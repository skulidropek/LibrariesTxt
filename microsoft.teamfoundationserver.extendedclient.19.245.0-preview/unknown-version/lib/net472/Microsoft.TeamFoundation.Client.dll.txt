[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
internal class Microsoft.Internal.Performance.CodeMarkerExStartEnd : object {
    private int _end;
    private Byte[] _aBuff;
    public CodeMarkerExStartEnd(int begin, int end, Byte[] aBuff);
    public CodeMarkerExStartEnd(int begin, int end, Guid guidData);
    public sealed virtual void Dispose();
}
internal class Microsoft.Internal.Performance.CodeMarkers : object {
    public static CodeMarkers Instance;
    private static string AtomName;
    private static string DllName;
    private bool fUseCodeMarkers;
    private static CodeMarkers();
    public void CodeMarker(int nTimerID);
    public void CodeMarkerEx(int nTimerID, Byte[] aBuff);
    public void CodeMarkerEx(int nTimerID, Guid guidData);
    public void CodeMarkerEx(int nTimerID, UInt32 uintData);
    public void CodeMarkerEx(int nTimerID, ulong ulongData);
    public void InitPerformanceDll(int iApp, string strRegRoot);
    private static bool UseCodeMarkers(string strRegRoot);
    private static string GetPerformanceSubKey(RegistryKey hKey, string strRegRoot);
    public void UninitializePerformanceDLL(int iApp);
}
internal class Microsoft.Internal.Performance.CodeMarkerStartEnd : object {
    private int _end;
    public CodeMarkerStartEnd(int begin, int end);
    public sealed virtual void Dispose();
}
[EditorBrowsableAttribute("1")]
public static class Microsoft.Internal.Performance.TfCodeMarkers : object {
    public static void CodeMarker(int nTimerID);
    public static void InitPerformanceDll(int iApp, string strRegRoot);
    public static void UninitializePerformanceDLL(int iApp);
}
[EditorBrowsableAttribute("1")]
public class Microsoft.Internal.Performance.TfCodeMarkerStartEnd : object {
    private CodeMarkerStartEnd m_codeMarker;
    public TfCodeMarkerStartEnd(int begin, int end);
    public sealed virtual void Dispose();
}
internal static class Microsoft.TeamFoundation.Client.AadSettings : object {
    public static string DefaultAadInstance;
    public static string CommonTenant;
    public static string Resource;
    public static string Client;
    public static string AadInstance { get; }
    public static string get_AadInstance();
    private static string GetAadInstanceOverrideFromRegistry();
}
[FlagsAttribute]
public enum Microsoft.TeamFoundation.Client.ActiveContextChange : Enum {
    public int value__;
    public static ActiveContextChange None;
    public static ActiveContextChange Server;
    public static ActiveContextChange TeamProject;
    public static ActiveContextChange Team;
    public static ActiveContextChange Repository;
}
public enum Microsoft.TeamFoundation.Client.ActiveContextChangeReason : Enum {
    public int value__;
    public static ActiveContextChangeReason Unspecified;
    public static ActiveContextChangeReason DocumentOpen;
    public static ActiveContextChangeReason DocumentFocus;
    public static ActiveContextChangeReason SelectionChange;
    public static ActiveContextChangeReason UserPicked;
}
internal class Microsoft.TeamFoundation.Client.AddDomainDialog : BaseDialog {
    private Label label1;
    private GroupBox _details;
    private Label _portNumber;
    private Label _protocol;
    private Button _okButton;
    private Button _cancelButton;
    private TextBox _serverName;
    private TextBox _portNumberText;
    private RadioButton _httpButton;
    private RadioButton _httpsButton;
    private TfsConnection _server;
    private string _errorCaption;
    private TableLayoutPanel okCancelTableLayoutPanel;
    private TableLayoutPanel connectionDetailsTableLayoutPanel;
    private TableLayoutPanel overarchingTableLayoutPanel;
    private Label _previewLabel;
    private TextBox _pathText;
    private Label _path;
    private TableLayoutPanel _previewPanel;
    private TextBox _previewText;
    private Cursor _originalCursor;
    private AddDomainDialogDataSource _datasource;
    [CompilerGeneratedAttribute]
private OnAddServerEventHandler OnAddServer;
    private Container components;
    public TfsConnection Server { get; }
    [CompilerGeneratedAttribute]
public void add_OnAddServer(OnAddServerEventHandler value);
    [CompilerGeneratedAttribute]
public void remove_OnAddServer(OnAddServerEventHandler value);
    public TfsConnection get_Server();
    protected virtual void Dispose(bool disposing);
    private void InitializeComponent();
    private void InvalidateDataSource();
    private void Datasource_PropertyChanged(object sender, PropertyChangedEventArgs e);
    private void RestoreCursor();
    private void SetWaitCursor();
    private void UseWaitCursorAndDisableControls();
    private void RestoreCursorAndEnableControls();
    protected virtual void OnLoad(EventArgs e);
    protected virtual void OnClosed(EventArgs e);
    private void _okButton_Click(object sender, EventArgs e);
    private void GetMessageAndHelpTopicFromException(Exception ex, TfsConnection server, String& reason, String& helpTopic);
    private void HandleConnectionCompleted(TfsConnection server, Exception error);
    private void OnServerAdded(TfsConnection server);
    private void ServerNameChanged(object sender, EventArgs e);
    private void PortChanged(object sender, EventArgs e);
    private void PathChanged(object sender, EventArgs e);
    private void IsHttpsChanged(object sender, EventArgs e);
}
[EditorBrowsableAttribute("1")]
public class Microsoft.TeamFoundation.Client.AddDomainDialogDataSource : BaseDataSource {
    private string m_serverName;
    private string m_port;
    private string m_path;
    private bool m_isHttps;
    private Action`2<TfsConnection, Exception> m_connectionCompleted;
    private BaseDialog m_dialog;
    private static int c_MaxPortNumber;
    private Dictionary`2<string, TimeSpan> m_cachedTimeouts;
    private BackgroundWorker m_authenticateWorker;
    public string ServerName { get; public set; }
    public string Port { get; public set; }
    public string Path { get; public set; }
    public bool IsHttps { get; public set; }
    public bool IsUrlEntered { get; }
    public bool IsHostedUrl { get; }
    public string Preview { get; }
    public bool IsInputValid { get; }
    public AddDomainDialogDataSource(BaseDialog dialog);
    public void StartConnect(Action`2<TfsConnection, Exception> connectionCompleted);
    public void StopConnect();
    public string get_ServerName();
    public void set_ServerName(string value);
    public string get_Port();
    public void set_Port(string value);
    public string get_Path();
    public void set_Path(string value);
    public bool get_IsHttps();
    public void set_IsHttps(bool value);
    public bool get_IsUrlEntered();
    public bool get_IsHostedUrl();
    public string get_Preview();
    public bool get_IsInputValid();
    private void m_authenticateWorker_DoWork(object sender, DoWorkEventArgs e);
    private void m_authenticateWorker_RunWorkerCompleted(object sender, RunWorkerCompletedEventArgs e);
    private void SetTimeouts();
    private void SetTimeout(string componentName);
    private void RestoreTimeouts();
    private void RestoreTimeout(string componentName);
    private void HandleConnectionCompleted(AuthenticateResult result);
    private void OnConnectionCompleted(TfsConnection server, Exception error);
    private bool ProcessResult(AuthenticateResult result);
    private Uri CreateUri();
    private Uri CreateUri(bool withPath);
    private bool IsPortNumberValid();
    private bool IsValid(String& preview);
}
public static class Microsoft.TeamFoundation.Client.ArtifactVersionSpec : object {
    public static int NonVersioned;
}
[EditorBrowsableAttribute("1")]
public class Microsoft.TeamFoundation.Client.AuthenticationCompleteEventArgs : EventArgs {
    private CookieCollection _cookieCollection;
    public CookieCollection Cookies { get; }
    public AuthenticationCompleteEventArgs(CookieCollection cookieCollection);
    public CookieCollection get_Cookies();
}
[EditorBrowsableAttribute("1")]
public class Microsoft.TeamFoundation.Client.AutoModal : object {
    private bool m_fModal;
    private sealed virtual override void System.IDisposable.Dispose();
}
[EditorBrowsableAttribute("1")]
public class Microsoft.TeamFoundation.Client.BaseDialog : Form {
    [CompilerGeneratedAttribute]
private FocusToolbarEventHandler FocusToolbar;
    private bool m_couldBeInOnLoad;
    private bool m_closeDialogOnVisibleTrue;
    private bool m_wasSizedMoved;
    private bool m_saveRestorePosition;
    private IMessageFilter m_messageFilter;
    private string m_helpTopic;
    private bool m_alwaysShowHelpButton;
    private bool m_forwardWndMsgOutsideVS;
    [BrowsableAttribute("True")]
[DescriptionAttribute("Sets the default help topic for dialog")]
[CategoryAttribute("Team Foundation")]
public string HelpTopic { get; public set; }
    [BrowsableAttribute("True")]
[DescriptionAttribute("Determines if dialog positions will be automatically saved and restored")]
[CategoryAttribute("Team Foundation")]
[DefaultValueAttribute("True")]
public bool SaveRestorePosition { get; public set; }
    [BrowsableAttribute("True")]
[DescriptionAttribute("Determines if we will always force showing a help button for this dialog")]
[CategoryAttribute("Team Foundation")]
[DefaultValueAttribute("True")]
public bool AlwaysShowHelpButton { get; public set; }
    [BrowsableAttribute("False")]
public IMessageFilter MessageFilter { get; public set; }
    public BaseDialog(bool forwardWndMsgOutsideVS);
    protected virtual void Dispose(bool disposing);
    public DialogResult ShowDialog();
    public DialogResult ShowDialog(IWin32Window parent);
    private void BaseDialog_HelpRequested(object sender, HelpEventArgs e);
    private void BaseDialog_HelpButtonClicked(object sender, CancelEventArgs e);
    private void BaseDialog_Move(object sender, EventArgs e);
    private void BaseDialog_Resize(object sender, EventArgs e);
    private void BaseDialog_FormClosing(object sender, FormClosingEventArgs e);
    protected virtual void OnLoad(EventArgs e);
    protected void RestoreSizePosition();
    protected void EnsureDialogFitsInWorkingArea();
    private void BaseDialog_FontChanged(object sender, EventArgs e);
    private void HostFontChanged(object sender, EventArgs e);
    public virtual string get_HelpTopic();
    public virtual void set_HelpTopic(string value);
    public bool get_SaveRestorePosition();
    public void set_SaveRestorePosition(bool value);
    public bool get_AlwaysShowHelpButton();
    public void set_AlwaysShowHelpButton(bool value);
    public IMessageFilter get_MessageFilter();
    public void set_MessageFilter(IMessageFilter value);
    protected virtual void WndProc(Message& m);
    protected virtual bool ProcessKeyPreview(Message& m);
    protected virtual bool OnContextMenu(Message m);
    [CompilerGeneratedAttribute]
public void add_FocusToolbar(FocusToolbarEventHandler value);
    [CompilerGeneratedAttribute]
public void remove_FocusToolbar(FocusToolbarEventHandler value);
    private bool OnFocusToolbar();
    public void CloseDuringOnLoad(DialogResult result);
    protected virtual void OnCreateControl();
    protected virtual void OnVisibleChanged(EventArgs e);
}
[EditorBrowsableAttribute("1")]
public class Microsoft.TeamFoundation.Client.BaseUserControl : UserControl {
    [EditorBrowsableAttribute("2")]
protected virtual void OnCreateControl();
    private void BaseUserControl_FontChanged(object sender, EventArgs e);
    protected virtual void HostFontChanged(object sender, EventArgs e);
    protected virtual void Dispose(bool disposing);
}
[ObsoleteAttribute("This class is deprecated and will be removed in a future release. See Microsoft.VisualStudio.Services.Common.VssBasicCredential instead.", "False")]
public class Microsoft.TeamFoundation.Client.BasicAuthCredential : FederatedCredential {
    protected VssCredentialsType CredentialType { get; }
    public BasicAuthCredential(ICredentials initialToken);
    public BasicAuthCredential(BasicAuthToken initialToken);
    protected virtual VssCredentialsType get_CredentialType();
    internal virtual bool IsAuthenticationChallenge(HttpWebResponse webResponse);
    internal virtual IssuedTokenProvider OnCreateTokenProvider(Uri serverUrl, HttpWebResponse response);
}
[ObsoleteAttribute("This class is deprecated and will be removed in a future release. See Microsoft.VisualStudio.Services.Common.VssBasicToken instead.", "False")]
public class Microsoft.TeamFoundation.Client.BasicAuthToken : IssuedToken {
    private ICredentials m_credentials;
    internal ICredentials Credentials { get; }
    protected internal VssCredentialsType CredentialType { get; }
    public BasicAuthToken(ICredentials credentials);
    internal ICredentials get_Credentials();
    protected internal virtual VssCredentialsType get_CredentialType();
    internal virtual void ApplyTo(HttpWebRequest webRequest);
    private static string FormatBasicAuthHeader(NetworkCredential credential);
}
[ObsoleteAttribute("This class is deprecated and will be removed in a future release. See Microsoft.VisualStudio.Services.Common.VssBasicTokenProvider instead.", "False")]
internal class Microsoft.TeamFoundation.Client.BasicAuthTokenProvider : IssuedTokenProvider {
    private IUICredentialsProvider m_provider;
    public BasicAuthCredential Credential { get; }
    public bool GetTokenIsInteractive { get; }
    public BasicAuthTokenProvider(BasicAuthCredential credential, Uri serverUrl);
    public BasicAuthCredential get_Credential();
    public virtual bool get_GetTokenIsInteractive();
    protected virtual IssuedToken OnGetToken(IssuedToken failedToken, TimeSpan timeout);
    protected virtual IAsyncResult OnBeginGetToken(IssuedToken failedToken, TimeSpan timeout, AsyncCallback callback, object state);
    protected virtual IssuedToken OnEndGetToken(IAsyncResult result);
}
[EditorBrowsableAttribute("1")]
public class Microsoft.TeamFoundation.Client.BeforeShowDialogEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
private Form <Dialog>k__BackingField;
    public Form Dialog { get; private set; }
    internal BeforeShowDialogEventArgs(Form dialog);
    [CompilerGeneratedAttribute]
public Form get_Dialog();
    [CompilerGeneratedAttribute]
private void set_Dialog(Form value);
}
[EditorBrowsableAttribute("1")]
public abstract class Microsoft.TeamFoundation.Client.BoardCacheServiceBase : SuggestedValueCacheService {
    protected virtual void OnInitialize();
}
[EditorBrowsableAttribute("1")]
public class Microsoft.TeamFoundation.Client.BoardColumnCacheService : BoardCacheServiceBase {
    protected virtual Task`1<IReadOnlyList`1<string>> GetValueAsync(Guid scope, ScopeSuggestedValue scopeValues);
}
[EditorBrowsableAttribute("1")]
public class Microsoft.TeamFoundation.Client.BoardRowCacheService : BoardCacheServiceBase {
    protected virtual Task`1<IReadOnlyList`1<string>> GetValueAsync(Guid scope, ScopeSuggestedValue scopeValues);
}
public class Microsoft.TeamFoundation.Client.BorderPanel : Panel {
    private Color m_borderColor;
    private ButtonBorderStyle m_borderStyle;
    private Padding m_borderPadding;
    private Sides m_borderSides;
    private bool m_useInnerColor;
    private Color m_innerColor;
    public Color BorderColor { get; public set; }
    public ButtonBorderStyle BorderStyle { get; public set; }
    public Padding BorderPadding { get; public set; }
    public Sides BorderSides { get; public set; }
    public Color InnerColor { get; public set; }
    public bool UseInnerColor { get; public set; }
    public Color get_BorderColor();
    public void set_BorderColor(Color value);
    public ButtonBorderStyle get_BorderStyle();
    public void set_BorderStyle(ButtonBorderStyle value);
    public Padding get_BorderPadding();
    public void set_BorderPadding(Padding value);
    public Sides get_BorderSides();
    public void set_BorderSides(Sides value);
    public Color get_InnerColor();
    public void set_InnerColor(Color value);
    public bool get_UseInnerColor();
    public void set_UseInnerColor(bool value);
    protected virtual void OnPaintBackground(PaintEventArgs pevent);
}
[EditorBrowsableAttribute("1")]
public static class Microsoft.TeamFoundation.Client.BrowserHelper : object {
    public static void LaunchBrowser(string url);
    public static void LaunchBrowser(string url, NetworkCredential credentials);
    private static void AttempStartBrowser(string url, NetworkCredential credentials);
    public static bool IsWellFormedUri(string url, UriKind uriKind);
    private static void StartBrowserProcess(string url, NetworkCredential credentials, string browserPath);
}
internal static class Microsoft.TeamFoundation.Client.BypassProxyOnLocalHelper : object {
    private static bool s_supportsIpv6;
    private static string s_domainSuffix;
    private static int s_sockAddrIn6Size;
    private static int s_sockAddrInSize;
    private static BypassProxyOnLocalHelper();
    public static bool IsHostLocal(string hostName);
}
[EditorBrowsableAttribute("1")]
public interface Microsoft.TeamFoundation.Client.Channels.ITfsRequestChannel {
    public Uri Uri { get; }
    public VssCredentials Credentials { get; }
    public CultureInfo Culture { get; }
    public Guid SessionId { get; }
    public TfsRequestSettings Settings { get; }
    public TfsHttpClientState State { get; }
    public abstract virtual Uri get_Uri();
    public abstract virtual VssCredentials get_Credentials();
    public abstract virtual CultureInfo get_Culture();
    public abstract virtual Guid get_SessionId();
    public abstract virtual TfsRequestSettings get_Settings();
    public abstract virtual TfsHttpClientState get_State();
    public abstract virtual void Abort();
    public abstract virtual IAsyncResult BeginRequest(TfsMessage message, AsyncCallback callback, object state);
    public abstract virtual IAsyncResult BeginRequest(TfsMessage message, TimeSpan timeout, AsyncCallback callback, object state);
    public abstract virtual TfsMessage EndRequest(IAsyncResult result);
    public abstract virtual TfsMessage Request(TfsMessage message);
    public abstract virtual TfsMessage Request(TfsMessage message, TimeSpan timeout);
}
[EditorBrowsableAttribute("1")]
public interface Microsoft.TeamFoundation.Client.Channels.ITfsRequestChannelFactory {
    public abstract virtual ITfsRequestChannel CreateChannel(ITfsRequestChannel innerChannel);
}
[EditorBrowsableAttribute("1")]
public interface Microsoft.TeamFoundation.Client.Channels.ITfsRequestListener {
    public abstract virtual void AfterReceiveReply(long requestId, string methodName, HttpWebResponse response);
    public abstract virtual void BeforeSendRequest(long requestId, string methodName, HttpWebRequest request);
    public abstract virtual long BeginRequest();
    public abstract virtual void EndRequest(long requestId, Exception exception);
}
internal static class Microsoft.TeamFoundation.Client.Channels.TaskAsyncHelper : object {
    private static Task s_completedTask;
    internal static Task CompletedTask { get; }
    private static TaskAsyncHelper();
    internal static IAsyncResult BeginTask(Func`1<Task`1<TResult>> taskFunc, AsyncCallback callback, object state);
    internal static T EndTask(IAsyncResult ar);
    internal static Task get_CompletedTask();
}
internal class Microsoft.TeamFoundation.Client.Channels.TaskWrapperAsyncResult`1 : object {
    [CompilerGeneratedAttribute]
private object <AsyncState>k__BackingField;
    [CompilerGeneratedAttribute]
private Task`1<T> <Task>k__BackingField;
    private bool _completedSynchronously;
    public object AsyncState { get; private set; }
    public WaitHandle AsyncWaitHandle { get; }
    public bool CompletedSynchronously { get; internal set; }
    public bool IsCompleted { get; }
    internal Task`1<T> Task { get; private set; }
    internal TaskWrapperAsyncResult`1(Task`1<T> task, object asyncState);
    [CompilerGeneratedAttribute]
public sealed virtual object get_AsyncState();
    [CompilerGeneratedAttribute]
private void set_AsyncState(object value);
    public sealed virtual WaitHandle get_AsyncWaitHandle();
    public sealed virtual bool get_CompletedSynchronously();
    internal void set_CompletedSynchronously(bool value);
    public sealed virtual bool get_IsCompleted();
    [CompilerGeneratedAttribute]
internal Task`1<T> get_Task();
    [CompilerGeneratedAttribute]
private void set_Task(Task`1<T> value);
}
[EditorBrowsableAttribute("1")]
public class Microsoft.TeamFoundation.Client.Channels.TfsBodyWriter : object {
    private string m_name;
    private string m_namespace;
    private Object[] m_parameters;
    private Action`2<XmlDictionaryWriter, Object[]> m_writeParameters;
    public TfsBodyWriter(string name, string ns, Object[] parameters, Action`2<XmlDictionaryWriter, Object[]> writeParameters);
    public void Close();
    public void WriteBodyContents(XmlDictionaryWriter writer);
}
[EditorBrowsableAttribute("1")]
public abstract class Microsoft.TeamFoundation.Client.Channels.TfsClientOperation : object {
    [CompilerGeneratedAttribute]
private ReadOnlyCollection`1<TfsMessageHeader> <OutputHeaders>k__BackingField;
    public string BodyName { get; }
    public bool HasOutputs { get; }
    public ReadOnlyCollection`1<TfsMessageHeader> OutputHeaders { get; internal set; }
    public string ResultName { get; }
    public string SoapAction { get; }
    public string SoapNamespace { get; }
    public abstract virtual string get_BodyName();
    public virtual bool get_HasOutputs();
    [CompilerGeneratedAttribute]
public ReadOnlyCollection`1<TfsMessageHeader> get_OutputHeaders();
    [CompilerGeneratedAttribute]
internal void set_OutputHeaders(ReadOnlyCollection`1<TfsMessageHeader> value);
    public virtual string get_ResultName();
    public abstract virtual string get_SoapAction();
    public abstract virtual string get_SoapNamespace();
    public TfsBodyWriter CreateBodyWriter(Object[] parameters);
    public virtual object InitializeOutputs(Object[]& parameters);
    public virtual object ReadResult(IServiceProvider serviceProvider, XmlReader reader);
    public virtual void ReadOutput(IServiceProvider serviceProvider, XmlReader reader, Object[] parameters);
    protected virtual void WriteParameters(XmlDictionaryWriter writer, Object[] parameters);
}
[EditorBrowsableAttribute("1")]
public abstract class Microsoft.TeamFoundation.Client.Channels.TfsHttpClient : TfsHttpClientBase {
    [CompilerGeneratedAttribute]
private TfsConnection <Connection>k__BackingField;
    public TfsConnection Connection { get; private set; }
    protected Guid CollectionServiceIdentifier { get; }
    protected Guid ConfigurationServiceIdentifier { get; }
    protected string ServiceType { get; }
    protected TfsHttpClient(TfsConnection connection);
    protected TfsHttpClient(TfsConnection connection, Uri serviceLocation);
    [CompilerGeneratedAttribute]
public TfsConnection get_Connection();
    [CompilerGeneratedAttribute]
private void set_Connection(TfsConnection value);
    protected virtual Guid get_CollectionServiceIdentifier();
    protected virtual Guid get_ConfigurationServiceIdentifier();
    protected abstract virtual string get_ServiceType();
    public virtual object GetService(Type serviceType);
    protected virtual ITfsRequestChannel OnCreateChannel(ITfsRequestChannel innerChannel);
    protected virtual Uri GetServiceLocation();
    protected Uri GetServiceLocation(string serviceType, Guid serviceIdentifier);
    protected virtual void OnAfterReceiveReply(long requestId, string methodName, HttpWebResponse response);
    protected virtual void OnBeforeSendRequest(long requestId, string methodName, HttpWebRequest request);
    protected virtual void OnEndRequest(long requestId, Exception exception);
    protected bool TryGetServiceLocation(string serviceType, Guid serviceIdentifier, Uri& serviceLocation);
}
[EditorBrowsableAttribute("1")]
public abstract class Microsoft.TeamFoundation.Client.Channels.TfsHttpClientBase : object {
    [CompilerGeneratedAttribute]
private VssCredentials <Credentials>k__BackingField;
    [CompilerGeneratedAttribute]
private CultureInfo <Culture>k__BackingField;
    [CompilerGeneratedAttribute]
private string <RemoteServerName>k__BackingField;
    [CompilerGeneratedAttribute]
private Guid <SessionId>k__BackingField;
    [CompilerGeneratedAttribute]
private TfsHttpClientState <State>k__BackingField;
    private Uri m_url;
    private object m_thisLock;
    private ITfsRequestChannel m_channel;
    private TfsRequestSettings m_settings;
    private IdentityDescriptor m_impersonate;
    private List`1<TfsMessageHeader> m_headers;
    private static Guid s_defaultSessionId;
    protected ITfsRequestChannel Channel { get; }
    protected string ComponentName { get; }
    public VssCredentials Credentials { get; private set; }
    public CultureInfo Culture { get; private set; }
    public ReadOnlyCollection`1<TfsMessageHeader> Headers { get; }
    public string RemoteServerName { get; protected set; }
    public Guid SessionId { get; private set; }
    public TfsRequestSettings Settings { get; }
    public TfsHttpClientState State { get; private set; }
    public Uri Url { get; private set; }
    protected object ThisLock { get; }
    protected TfsHttpClientBase(Uri uri, Nullable`1<Guid> sessionId, CultureInfo culture, VssCredentials credentials);
    protected TfsHttpClientBase(Uri uri, Nullable`1<Guid> sessionId, CultureInfo culture, VssCredentials credentials, IdentityDescriptor identityToImpersonate);
    private static TfsHttpClientBase();
    protected ITfsRequestChannel get_Channel();
    protected abstract virtual string get_ComponentName();
    [CompilerGeneratedAttribute]
public VssCredentials get_Credentials();
    [CompilerGeneratedAttribute]
private void set_Credentials(VssCredentials value);
    [CompilerGeneratedAttribute]
public CultureInfo get_Culture();
    [CompilerGeneratedAttribute]
private void set_Culture(CultureInfo value);
    public ReadOnlyCollection`1<TfsMessageHeader> get_Headers();
    [CompilerGeneratedAttribute]
public string get_RemoteServerName();
    [CompilerGeneratedAttribute]
protected void set_RemoteServerName(string value);
    [CompilerGeneratedAttribute]
public Guid get_SessionId();
    [CompilerGeneratedAttribute]
private void set_SessionId(Guid value);
    public TfsRequestSettings get_Settings();
    [CompilerGeneratedAttribute]
public TfsHttpClientState get_State();
    [CompilerGeneratedAttribute]
private void set_State(TfsHttpClientState value);
    public Uri get_Url();
    private void set_Url(Uri value);
    protected object get_ThisLock();
    public void Abort();
    public void AddMessageHeader(TfsMessageHeader header);
    protected virtual TfsRequestSettings ApplyCustomSettings(TfsRequestSettings settings);
    protected virtual TfsMessageEncoder CreateMessageEncoder();
    public void Open();
    public void Open(TimeSpan timeout);
    protected virtual ITfsRequestChannel OnCreateChannel(ITfsRequestChannel innerChannel);
    protected virtual Exception ConvertException(SoapException e);
    public virtual object GetService(Type serviceType);
    public T GetService();
    protected virtual Uri GetServiceLocation();
    protected object Invoke(TfsClientOperation operation, Object[] parameters);
    protected object Invoke(TfsClientOperation operation, Object[] parameters, Object[]& outputs);
    protected object Invoke(TfsClientOperation operation, Object[] parameters, TimeSpan timeout, Object[]& outputs);
    protected IAsyncResult BeginInvoke(TfsClientOperation operation, Object[] parameters, AsyncCallback callback, object state);
    protected IAsyncResult BeginInvoke(TfsClientOperation operation, Object[] parameters, TimeSpan timeout, AsyncCallback callback, object state);
    protected object EndInvoke(IAsyncResult result);
    protected object EndInvoke(Object[]& outputs, IAsyncResult result);
    private sealed virtual override void Microsoft.TeamFoundation.Client.Channels.ITfsRequestListener.AfterReceiveReply(long requestId, string methodName, HttpWebResponse response);
    private sealed virtual override void Microsoft.TeamFoundation.Client.Channels.ITfsRequestListener.BeforeSendRequest(long requestId, string methodName, HttpWebRequest request);
    private sealed virtual override long Microsoft.TeamFoundation.Client.Channels.ITfsRequestListener.BeginRequest();
    private sealed virtual override void Microsoft.TeamFoundation.Client.Channels.ITfsRequestListener.EndRequest(long requestId, Exception exception);
    protected virtual void OnAfterReceiveReply(long requestId, string methodName, HttpWebResponse response);
    protected virtual void OnBeforeSendRequest(long requestId, string methodName, HttpWebRequest request);
    protected virtual long OnBeginRequest();
    protected virtual void OnEndRequest(long requestId, Exception exception);
    private object HandleReply(TfsClientOperation operation, TfsMessage message, Object[]& outputs);
    private void ThrowIfAborted();
    private void EnsureOpened();
}
[EditorBrowsableAttribute("1")]
public enum Microsoft.TeamFoundation.Client.Channels.TfsHttpClientState : Enum {
    public int value__;
    public static TfsHttpClientState Created;
    public static TfsHttpClientState Opening;
    public static TfsHttpClientState Opened;
    public static TfsHttpClientState Aborted;
}
internal class Microsoft.TeamFoundation.Client.Channels.TfsHttpRequestChannel : object {
    private Uri m_uri;
    private Guid m_sessionId;
    private object m_thisLock;
    private string m_serverName;
    private CultureInfo m_cultureInfo;
    private TfsHttpClientState m_state;
    private TfsMessageHeader[] m_headers;
    private TfsRequestSettings m_settings;
    private ITfsRequestListener m_listener;
    private IdentityDescriptor m_impersonate;
    private TfsMessageEncoder m_messageEncoder;
    private VssCredentials m_credentials;
    private List`1<TfsHttpWebRequest> m_activeRequests;
    public VssCredentials Credentials { get; }
    public CultureInfo Culture { get; }
    public TfsMessageEncoder Encoder { get; }
    public TfsMessageHeader[] Headers { get; }
    public IdentityDescriptor Impersonate { get; }
    public ITfsRequestListener Listener { get; }
    public string ServerName { get; }
    public Guid SessionId { get; }
    public TfsRequestSettings Settings { get; }
    public TfsHttpClientState State { get; }
    public Uri Uri { get; }
    public TfsHttpRequestChannel(Uri uri, Guid sessionId, string serverName, CultureInfo cultureInfo, TfsMessageHeader[] headers, VssCredentials credentials, IdentityDescriptor impersonate, TfsRequestSettings settings, TfsMessageEncoder messageEncoder, ITfsRequestListener listener);
    public sealed virtual VssCredentials get_Credentials();
    public sealed virtual CultureInfo get_Culture();
    public TfsMessageEncoder get_Encoder();
    public TfsMessageHeader[] get_Headers();
    public IdentityDescriptor get_Impersonate();
    public ITfsRequestListener get_Listener();
    public string get_ServerName();
    public sealed virtual Guid get_SessionId();
    public sealed virtual TfsRequestSettings get_Settings();
    public sealed virtual TfsHttpClientState get_State();
    public sealed virtual Uri get_Uri();
    public sealed virtual void Abort();
    private void ApplyHeaders(TfsMessage message);
    public sealed virtual TfsMessage Request(TfsMessage message);
    public sealed virtual TfsMessage Request(TfsMessage message, TimeSpan timeout);
    public sealed virtual IAsyncResult BeginRequest(TfsMessage message, AsyncCallback callback, object state);
    public sealed virtual IAsyncResult BeginRequest(TfsMessage message, TimeSpan timeout, AsyncCallback callback, object state);
    public sealed virtual TfsMessage EndRequest(IAsyncResult result);
    private void ThrowIfAborted();
}
[EditorBrowsableAttribute("1")]
public static class Microsoft.TeamFoundation.Client.Channels.TfsHttpRequestHelpers : object {
    public static XmlWriter AddValidatingWriter(XmlWriter writer, Encoding encoding);
    public static UriBuilder CreateUri(string url, string queryString);
    public static HttpWebRequest CreateArtifactRequest(Uri uri, TfsConnection connection);
    public static HttpWebRequest CreateSoapRequest(Uri requestUri, TfsConnection connection);
    public static HttpWebRequest CreateSoapRequest(Uri requestUri, TfsConnection connection, string operationName);
    public static HttpWebRequest CreateSoapRequest(Uri requestUri, Guid sessionId, string operationName, CultureInfo cultureInfo, TfsRequestSettings settings, VssCredentials credentials, IdentityDescriptor impersonate);
    public static HttpWebRequest CreateSoapRequest(Uri requestUri, Guid sessionId, string operationName, CultureInfo cultureInfo, TfsRequestSettings settings, VssCredentials credentials, IdentityDescriptor impersonate, bool applyICredentialsToWebProxy, IssuedToken& currentToken, IssuedTokenProvider& tokenProvider);
    public static HttpWebRequest CreateSoapRequest(Uri requestUri, Guid sessionId, string soapAction, string operationName, CultureInfo cultureInfo, TfsRequestSettings settings, VssCredentials credentials, IdentityDescriptor impersonate, bool applyICredentialsToWebProxy, IssuedToken& currentToken, IssuedTokenProvider& tokenProvider);
    public static HttpWebRequest CreateWebRequest(Uri requestUri, TfsConnection connection);
    public static HttpWebRequest CreateWebRequest(Uri requestUri, TfsConnection connection, string operationName);
    public static HttpWebRequest CreateWebRequest(Uri requestUri, Guid sessionId, string operationName, CultureInfo cultureInfo, TfsRequestSettings settings, VssCredentials credentials, IdentityDescriptor impersonate, bool applyICredentialsToWebProxy, IssuedToken& currentToken, IssuedTokenProvider& tokenProvider);
    public static HttpWebRequest PrepareWebRequest(HttpWebRequest webRequest, TfsConnection connection);
    public static HttpWebRequest PrepareWebRequest(HttpWebRequest webRequest, TfsConnection connection, string operationName, TfsRequestSettings settings, bool applyICredentialsToWebProxy, IssuedToken& currentToken, IssuedTokenProvider& tokenProvider);
    public static HttpWebRequest PrepareWebRequest(HttpWebRequest webRequest, Guid sessionId, string operationName, CultureInfo cultureInfo, TfsRequestSettings settings, VssCredentials credentials, IdentityDescriptor impersonate);
    public static HttpWebRequest PrepareWebRequest(HttpWebRequest webRequest, Guid sessionId, string operationName, CultureInfo cultureInfo, TfsRequestSettings settings, VssCredentials credentials, IdentityDescriptor impersonate, bool applyICredentialsToWebProxy, IssuedToken& currentToken, IssuedTokenProvider& tokenProvider);
    public static string GetConnectionGroupName(Uri uri, ICredentials credentials);
    public static void TraceHeaders(WebHeaderCollection headers, String[] keywords);
}
internal class Microsoft.TeamFoundation.Client.Channels.TfsHttpRetryChannel : object {
    private ManualResetEvent m_aborted;
    private ITfsRequestChannel m_innerChannel;
    private TfsHttpRetryChannelFactory m_factory;
    private static TimeSpan m_maxSleepDuration;
    private ITfsRequestChannel InnerChannel { get; }
    public Uri Uri { get; }
    public VssCredentials Credentials { get; }
    public CultureInfo Culture { get; }
    public Guid SessionId { get; }
    public TfsRequestSettings Settings { get; }
    public TfsHttpClientState State { get; }
    public TfsHttpRetryChannel(TfsHttpRetryChannelFactory factory, ITfsRequestChannel innerChannel);
    private static TfsHttpRetryChannel();
    private ITfsRequestChannel get_InnerChannel();
    public sealed virtual Uri get_Uri();
    public sealed virtual VssCredentials get_Credentials();
    public sealed virtual CultureInfo get_Culture();
    public sealed virtual Guid get_SessionId();
    public sealed virtual TfsRequestSettings get_Settings();
    public sealed virtual TfsHttpClientState get_State();
    public sealed virtual void Abort();
    public sealed virtual IAsyncResult BeginRequest(TfsMessage message, AsyncCallback callback, object state);
    public sealed virtual IAsyncResult BeginRequest(TfsMessage message, TimeSpan timeout, AsyncCallback callback, object state);
    public sealed virtual TfsMessage EndRequest(IAsyncResult result);
    public sealed virtual TfsMessage Request(TfsMessage message);
    public sealed virtual TfsMessage Request(TfsMessage message, TimeSpan timeout);
    private bool CanRetryException(Exception ex);
}
[EditorBrowsableAttribute("1")]
public class Microsoft.TeamFoundation.Client.Channels.TfsHttpRetryChannelFactory : object {
    [CompilerGeneratedAttribute]
private bool <Enabled>k__BackingField;
    [CompilerGeneratedAttribute]
private TimeSpan <MaxTimeout>k__BackingField;
    public bool Enabled { get; public set; }
    public TimeSpan MaxTimeout { get; private set; }
    public TfsHttpRetryChannelFactory(TimeSpan maxTimeout);
    [CompilerGeneratedAttribute]
public bool get_Enabled();
    [CompilerGeneratedAttribute]
public void set_Enabled(bool value);
    [CompilerGeneratedAttribute]
public TimeSpan get_MaxTimeout();
    [CompilerGeneratedAttribute]
private void set_MaxTimeout(TimeSpan value);
    public sealed virtual ITfsRequestChannel CreateChannel(ITfsRequestChannel innerChannel);
}
internal class Microsoft.TeamFoundation.Client.Channels.TfsHttpWebRequest : AsyncOperation {
    private int m_retries;
    private bool m_aborted;
    private bool m_expired;
    private long m_requestId;
    private string m_methodName;
    private string m_methodNameEx;
    private TfsMessage m_request;
    private TfsMessage m_response;
    private Timer m_responseTimer;
    private Stream m_requestStream;
    private TimeoutHelper m_timeout;
    private long m_beginWorkingSet;
    private Stopwatch m_requestTimer;
    private WebException m_webException;
    private HttpWebRequest m_webRequest;
    private HttpWebResponse m_webResponse;
    private ITfsRequestListener m_listener;
    private TfsHttpRequestChannel m_channel;
    private bool m_lastResponseDemandedProxyAuth;
    private IssuedToken m_currentToken;
    private IssuedTokenProvider m_tokenProvider;
    private CancellationTokenSource m_cancellationTokenSource;
    private static string c_offlineEnvironmentVariable;
    private static int c_authRetriesTotal;
    public TfsMessage Request { get; }
    public TfsMessage Response { get; }
    public Uri RequestUri { get; }
    protected VssCredentials Credentials { get; }
    protected TfsRequestSettings Settings { get; }
    protected TimeoutHelper Timeout { get; }
    internal TfsHttpWebRequest(TfsHttpRequestChannel channel, TfsMessage message, TimeSpan timeout, ITfsRequestListener listener, AsyncCallback callback, object state);
    public TfsMessage get_Request();
    public TfsMessage get_Response();
    public Uri get_RequestUri();
    protected VssCredentials get_Credentials();
    protected TfsRequestSettings get_Settings();
    protected TimeoutHelper get_Timeout();
    internal void Abort();
    private void Abort(bool expired);
    public TfsMessage SendRequest();
    private bool IsAuthenticationChallenge(TfsMessage requestMessage, HttpWebResponse webResponse, WebException webException, TfsMessage& responseMessage);
    private bool IsLegacyAuthenticationChallenge(string action, TfsMessage message);
    private TfsMessage ReadResponse(HttpWebResponse webResponse, WebException webException);
    private void ThrowIfAborted();
    protected virtual HttpWebRequest CreateWebRequest();
    public string FormatServiceUnavailableMessage(string reason);
    public string FormatServiceUnavailableMessage(WebException webException);
    public string FormatServiceUnauthorizedMessage();
    protected TfsMessage ReadMessage(HttpWebResponse webResponse, WebException webException, Stream responseStream, Boolean& closeResponse);
    private void ValidateToken(HttpWebResponse webResponse);
    private TfsMessage ReadFaultFromHeader(HttpWebResponse webResponse);
    private IssuedToken EnsureTokenProvider(HttpWebResponse webResponse);
    private void TraceHeaders(WebHeaderCollection headers);
    private HttpWebResponse SendRequestAndGetResponse(HttpWebRequest webRequest, WebException& webException);
    public void Begin();
    private bool BeginSendRequest();
    private static void EndGetRequestStream(IAsyncResult result);
    private bool CompleteGetRequestStream(IAsyncResult result);
    private bool BeginGetResponse();
    private void EndGetResponse(IAsyncResult result);
    private bool CompleteGetResponse(IAsyncResult result);
    private static void EndGetToken(IAsyncResult result);
    private bool CompleteGetToken(IAsyncResult result);
    private void OnSendRequest(HttpWebRequest request);
    private void OnReceiveReply(HttpWebResponse response);
    private void OnBeginRequest();
    private void OnEndRequest(Exception exception);
    private void CancelResponseTimer();
    private static IHttpResponse Wrap(HttpWebResponse response);
    private static void ResponseTimerCallback(object state);
    private void ProcessDelay();
    public static bool TryEnd(IAsyncResult result, TfsHttpWebRequest& webRequest, Exception& exception);
}
[EditorBrowsableAttribute("1")]
public class Microsoft.TeamFoundation.Client.Channels.TfsMessage : object {
    [CompilerGeneratedAttribute]
private string <Action>k__BackingField;
    [CompilerGeneratedAttribute]
private TfsMessageEncoder <Encoder>k__BackingField;
    [CompilerGeneratedAttribute]
private Collection`1<TfsMessageHeader> <Headers>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsEmpty>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsFault>k__BackingField;
    [CompilerGeneratedAttribute]
private Uri <To>k__BackingField;
    private Exception m_fault;
    private TfsBodyWriter m_bodyWriter;
    private XmlDictionaryReader m_bodyReader;
    private static TfsMessage s_emptyMessage;
    public string Action { get; private set; }
    internal TfsMessageEncoder Encoder { get; private set; }
    public Collection`1<TfsMessageHeader> Headers { get; private set; }
    public bool IsEmpty { get; private set; }
    public bool IsFault { get; private set; }
    public Uri To { get; internal set; }
    public static TfsMessage EmptyMessage { get; }
    private TfsMessage(Uri to, string action, IList`1<TfsMessageHeader> headers, XmlDictionaryReader bodyReader);
    private TfsMessage(Uri to, string action, IList`1<TfsMessageHeader> headers, Exception fault);
    private TfsMessage(string action, TfsBodyWriter bodyWriter);
    private static TfsMessage();
    [CompilerGeneratedAttribute]
public string get_Action();
    [CompilerGeneratedAttribute]
private void set_Action(string value);
    [CompilerGeneratedAttribute]
internal TfsMessageEncoder get_Encoder();
    [CompilerGeneratedAttribute]
private void set_Encoder(TfsMessageEncoder value);
    [CompilerGeneratedAttribute]
public Collection`1<TfsMessageHeader> get_Headers();
    [CompilerGeneratedAttribute]
private void set_Headers(Collection`1<TfsMessageHeader> value);
    [CompilerGeneratedAttribute]
public bool get_IsEmpty();
    [CompilerGeneratedAttribute]
private void set_IsEmpty(bool value);
    [CompilerGeneratedAttribute]
public bool get_IsFault();
    [CompilerGeneratedAttribute]
private void set_IsFault(bool value);
    [CompilerGeneratedAttribute]
public Uri get_To();
    [CompilerGeneratedAttribute]
internal void set_To(Uri value);
    public static TfsMessage get_EmptyMessage();
    public static TfsMessage CreateMessage(Uri to, string action, IList`1<TfsMessageHeader> headers, XmlDictionaryReader bodyReader);
    public static TfsMessage CreateMessage(Uri to, string action, IList`1<TfsMessageHeader> headers, Exception fault);
    public static TfsMessage CreateMessage(string action, TfsBodyWriter bodyWriter);
    public void Close();
    public Exception CreateException();
    public XmlDictionaryReader GetBodyReader();
    public void WriteBodyContents(XmlDictionaryWriter writer);
}
[EditorBrowsableAttribute("1")]
public abstract class Microsoft.TeamFoundation.Client.Channels.TfsMessageEncoder : object {
    public string ContentType { get; }
    public abstract virtual string get_ContentType();
    public abstract virtual bool IsContentTypeSupported(string contentType);
    public abstract virtual TfsMessage ReadMessage(string messageAsString);
    public abstract virtual TfsMessage ReadMessage(Stream stream);
    public abstract virtual void WriteMessage(TfsMessage message, Stream stream);
}
[EditorBrowsableAttribute("1")]
public abstract class Microsoft.TeamFoundation.Client.Channels.TfsMessageHeader : object {
    public string Name { get; }
    public string Namespace { get; }
    public abstract virtual string get_Name();
    public abstract virtual string get_Namespace();
    public void Write(XmlDictionaryWriter writer);
    public virtual XmlDictionaryReader GetReader();
    protected virtual void OnWriteStartHeader(XmlDictionaryWriter writer);
    protected virtual void OnWriteEndHeader(XmlDictionaryWriter writer);
    protected abstract virtual void OnWriteHeaderContents(XmlDictionaryWriter writer);
}
[EditorBrowsableAttribute("1")]
public class Microsoft.TeamFoundation.Client.Channels.TfsRequestSettings : object {
    [CompilerGeneratedAttribute]
private bool <BypassProxyOnLocal>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <CompressionEnabled>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <CompressRequestBody>k__BackingField;
    [CompilerGeneratedAttribute]
private int <ConnectionLimit>k__BackingField;
    [CompilerGeneratedAttribute]
private TimeSpan <SendTimeout>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <SoapTraceEnabled>k__BackingField;
    [CompilerGeneratedAttribute]
private TraceSwitch <Tracing>k__BackingField;
    [CompilerGeneratedAttribute]
private string <UserAgent>k__BackingField;
    [CompilerGeneratedAttribute]
private string <AgentId>k__BackingField;
    [CompilerGeneratedAttribute]
private static TimeSpan <TestDelay>k__BackingField;
    private static object s_objectLock;
    private static TfsRequestSettings s_defaultSettings;
    private static Encoding s_requestEncoding;
    private static Dictionary`2<string, TfsRequestSettings> s_settingsCache;
    private static string c_settingsKey;
    private static string c_settingConnectionLimit;
    private static string c_settingBypassProxyOnLocal;
    private static string c_settingEnableCompression;
    private static string c_settingCompressRequestBody;
    private static string c_settingsDefaultTimeout;
    private static string c_settingsAgentId;
    private static string c_settingEnableSoapTrace;
    private static string c_defaultComponentName;
    private static string c_traceSwitchComment;
    private static int m_minConnectionLimit;
    public bool BypassProxyOnLocal { get; public set; }
    public bool CompressionEnabled { get; public set; }
    public bool CompressRequestBody { get; public set; }
    public int ConnectionLimit { get; private set; }
    public TimeSpan SendTimeout { get; public set; }
    public bool SoapTraceEnabled { get; private set; }
    public TraceSwitch Tracing { get; private set; }
    public string UserAgent { get; private set; }
    public string AgentId { get; public set; }
    public static TfsRequestSettings Default { get; }
    public static Encoding RequestEncoding { get; }
    public static TimeSpan TestDelay { get; public set; }
    private static TfsRequestSettings();
    private TfsRequestSettings(TfsRequestSettings settingsToBeCloned);
    [CompilerGeneratedAttribute]
public bool get_BypassProxyOnLocal();
    [CompilerGeneratedAttribute]
public void set_BypassProxyOnLocal(bool value);
    [CompilerGeneratedAttribute]
public bool get_CompressionEnabled();
    [CompilerGeneratedAttribute]
public void set_CompressionEnabled(bool value);
    [CompilerGeneratedAttribute]
public bool get_CompressRequestBody();
    [CompilerGeneratedAttribute]
public void set_CompressRequestBody(bool value);
    [CompilerGeneratedAttribute]
public int get_ConnectionLimit();
    [CompilerGeneratedAttribute]
private void set_ConnectionLimit(int value);
    [CompilerGeneratedAttribute]
public TimeSpan get_SendTimeout();
    [CompilerGeneratedAttribute]
public void set_SendTimeout(TimeSpan value);
    [CompilerGeneratedAttribute]
public bool get_SoapTraceEnabled();
    [CompilerGeneratedAttribute]
private void set_SoapTraceEnabled(bool value);
    [CompilerGeneratedAttribute]
public TraceSwitch get_Tracing();
    [CompilerGeneratedAttribute]
private void set_Tracing(TraceSwitch value);
    [CompilerGeneratedAttribute]
public string get_UserAgent();
    [CompilerGeneratedAttribute]
private void set_UserAgent(string value);
    [CompilerGeneratedAttribute]
public string get_AgentId();
    [CompilerGeneratedAttribute]
public void set_AgentId(string value);
    public static TfsRequestSettings get_Default();
    public static Encoding get_RequestEncoding();
    [CompilerGeneratedAttribute]
public static TimeSpan get_TestDelay();
    [CompilerGeneratedAttribute]
public static void set_TestDelay(TimeSpan value);
    public TfsRequestSettings Clone();
    public static TfsRequestSettings GetSettings(string componentName);
    private static void EnsureDefaultSettings();
    internal static void SetDefaultQuotas(XmlDictionaryReaderQuotas readerQuotas);
}
[EditorBrowsableAttribute("1")]
public class Microsoft.TeamFoundation.Client.Channels.TfsSoapMessageEncoder : TfsMessageEncoder {
    private Encoding m_encoding;
    private bool m_useWsAddressing10;
    private XmlDictionaryReaderQuotas m_readerQuotas;
    internal static string SoapPrefix;
    internal static string SoapCodeName;
    internal static string SoapBodyName;
    internal static string SoapTextName;
    internal static string SoapFaultName;
    internal static string SoapValueName;
    internal static string SoapReasonName;
    internal static string SoapDetailName;
    internal static string SoapHeaderName;
    internal static string SoapSubCodeName;
    internal static string SoapEnvelopeName;
    internal static string WsAddressingPrefix;
    internal static string WsAddressingToName;
    internal static string WsAddressingActionName;
    internal static string MustUnderstand;
    internal static string SoapNamespace;
    internal static string WsAddressing10Namespace;
    public string ContentType { get; }
    public TfsSoapMessageEncoder(Encoding encoding, XmlDictionaryReaderQuotas readerQuotas, bool useWsAddressing10);
    public virtual string get_ContentType();
    public virtual bool IsContentTypeSupported(string contentType);
    public virtual TfsMessage ReadMessage(Stream stream);
    public virtual TfsMessage ReadMessage(string messageString);
    public virtual void WriteMessage(TfsMessage message, Stream requestStream);
    private static TfsMessage CreateMessage(XmlDictionaryReader envelopeReader);
    private static SoapException CreateException(XmlDictionaryReader bodyReader);
    private static SoapFaultSubCode ReadSubCode(XmlDictionaryReader bodyReader);
    private static bool IsDetailNode(XmlDictionaryReader reader);
}
internal class Microsoft.TeamFoundation.Client.Channels.TracingStream : Stream {
    private Stream m_innerStream;
    private long m_numBytesRead;
    private long m_numBytesWritten;
    private TraceSwitch m_traceSwitch;
    private Byte[] m_dataRead;
    private Byte[] m_dataWritten;
    public bool CanRead { get; }
    public bool CanSeek { get; }
    public bool CanWrite { get; }
    public long NumBytesRead { get; }
    public long NumBytesWritten { get; }
    public long Length { get; }
    public long Position { get; public set; }
    public TracingStream(Stream s, TraceSwitch tracing);
    public virtual bool get_CanRead();
    public virtual bool get_CanSeek();
    public virtual bool get_CanWrite();
    public long get_NumBytesRead();
    public long get_NumBytesWritten();
    public virtual long get_Length();
    public virtual long get_Position();
    public virtual void set_Position(long value);
    public virtual void Close();
    private static string ToPrettyXml(string xml);
    public virtual void Flush();
    public virtual IAsyncResult BeginRead(Byte[] buffer, int offset, int count, AsyncCallback callback, object state);
    public virtual int EndRead(IAsyncResult result);
    public virtual IAsyncResult BeginWrite(Byte[] buffer, int offset, int count, AsyncCallback callback, object state);
    public virtual void EndWrite(IAsyncResult result);
    public virtual long Seek(long offset, SeekOrigin origin);
    public virtual void SetLength(long value);
    public virtual int Read(Byte[] buffer, int offset, int count);
    public virtual int ReadByte();
    public virtual void Write(Byte[] buffer, int offset, int count);
    public virtual void WriteByte(byte value);
}
[EditorBrowsableAttribute("1")]
public class Microsoft.TeamFoundation.Client.ClientCertificateManager : object {
    private Dictionary`2<string, X509Certificate2> m_allClientCertificates;
    private X509Certificate2Collection m_clientCertificates;
    private bool m_refreshNeeded;
    private ReaderWriterLock m_rwLock;
    private object m_refreshLock;
    private static ClientCertificateManager s_instance;
    private static object s_lock;
    public static string OID_EXTENDED_KEY_USAGE;
    public static string OID_PKIX_KP_CLIENT_AUTH;
    public static string OID_EXTENDED_KEY_USAGE_ANY;
    private static string s_certEnvironmentConfigVar;
    private static string s_clientCertsKeyName;
    private static string s_disableClientCertificatesName;
    private static string s_thumbprintsName;
    private static Char[] s_thumbprintDelimiters;
    public X509Certificate2Collection ClientCertificates { get; }
    public static ClientCertificateManager Instance { get; }
    private static ClientCertificateManager();
    public void Invalidate();
    public void ApplyCertificatesToWebRequest(HttpWebRequest request);
    public X509Certificate2Collection get_ClientCertificates();
    public static ClientCertificateManager get_Instance();
    public static void ApplyCertificatesToWebRequest(HttpWebRequest request, X509Certificate2Collection certificates);
    public static X509Certificate2Collection GetClientAuthCertificates(StoreLocation storeLocation);
    public static Nullable`1<bool> ReadDisableClientCertificates(StoreLocation machineOrUserLevel);
    public static bool ReadEffectiveDisableClientCertificates();
    public static String[] ReadEffectiveSpecifiedCertificateThumbprints();
    public static String[] ReadSpecifiedCertificateThumbprints(StoreLocation machineOrUserLevel);
    public static void WriteDisableClientCertificates(bool disableClientCertificates, StoreLocation machineOrUserLevel);
    public static void WriteSpecifiedCertificateThumbprints(String[] thumbprints, StoreLocation machineOrUserLevel);
    private void RefreshIfNeeded();
    private void Refresh();
    private static String[] SplitDelimitedString(string delimitedString);
    private X509Certificate2 GetClientCertificateByThumbprint(string thumbprint);
    private static bool CertificateSupportsClientAuth(X509Certificate2 certificate);
    private static bool IsPrivateKeyAvailable(X509Certificate2 toCheck, Int32& hr);
    private static Nullable`1<bool> GetBooleanValue(string name, StoreLocation machineOrUserLevel);
    private static string GetStringValue(string name, StoreLocation machineOrUserLevel);
    private static void WriteStringValue(string name, string value, StoreLocation machineOrUserLevel);
}
public class Microsoft.TeamFoundation.Client.ClientContext : object {
    private Guid m_id;
    private string m_command;
    public Guid Id { get; }
    public string Command { get; public set; }
    public ClientContext(string command);
    public sealed virtual Guid get_Id();
    public sealed virtual string get_Command();
    public void set_Command(string value);
}
internal static class Microsoft.TeamFoundation.Client.CodeSenseVersionInfo : object {
    public static string CoreAssemblyFullname;
    public static string ServiceObjectName;
    public static string CachedServiceFactoryObjectName;
    private static CodeSenseVersionInfo();
}
[EditorBrowsableAttribute("1")]
[DesignerCategoryAttribute("Code")]
public class Microsoft.TeamFoundation.Client.ComboTree : CustomCombo`1<ComboTreeView> {
    private ComboTreeView m_trvNodes;
    [CompilerGeneratedAttribute]
private TreeViewCancelEventHandler BeforeExpandTreeNode;
    [CompilerGeneratedAttribute]
private TreeViewCancelEventHandler BeforeCollapseTreeNode;
    public TreeNodeCollection TreeNodes { get; }
    public TreeView Tree { get; }
    public TreeNodeCollection get_TreeNodes();
    public TreeView get_Tree();
    [CompilerGeneratedAttribute]
public void add_BeforeExpandTreeNode(TreeViewCancelEventHandler value);
    [CompilerGeneratedAttribute]
public void remove_BeforeExpandTreeNode(TreeViewCancelEventHandler value);
    [CompilerGeneratedAttribute]
public void add_BeforeCollapseTreeNode(TreeViewCancelEventHandler value);
    [CompilerGeneratedAttribute]
public void remove_BeforeCollapseTreeNode(TreeViewCancelEventHandler value);
    protected virtual void Dispose(bool disposing);
    protected internal virtual TreeNode GetValidNode(TreeNode selectedNode);
    protected virtual void OnBeforeExpand(object sender, TreeViewCancelEventArgs e);
    protected virtual void OnBeforeCollapse(object sender, TreeViewCancelEventArgs e);
}
[EditorBrowsableAttribute("1")]
[DesignerCategoryAttribute("Code")]
public class Microsoft.TeamFoundation.Client.ComboTreeView : TreeView {
    private static int cMinDropdownItems;
    private static int cMaxDropdownItems;
    private static int cTreeViewMargin;
    private ComboTree m_parent;
    public ComboTreeView(ComboTree parent);
    public sealed virtual string GetSelectedText(Int32& caretPos);
    public sealed virtual bool Filter(string text);
    public sealed virtual Size GetDesiredControlSize();
    public sealed virtual Size GetMinimumControlSize();
    public sealed virtual void HandleComboControlFocusLost();
    protected virtual void OnKeyDown(KeyEventArgs e);
    public virtual bool PreProcessMessage(Message& msg);
    private void m_trvNodes_LostFocus(object sender, EventArgs e);
    private void m_trvNodes_NodeMouseClick(object sender, TreeNodeMouseClickEventArgs e);
    private void m_trvNodes_AfterExpand(object sender, TreeViewEventArgs e);
    private void SetSelection();
    private int GetTotalVisibleCount(TreeNodeCollection nodes);
}
[EditorBrowsableAttribute("1")]
public class Microsoft.TeamFoundation.Client.CommandLine.ArgumentParser : object {
    private ID[] m_optionIDs;
    private Arguments m_arguments;
    public Arguments Arguments { get; }
    public ArgumentParser(ID[] globalOptionIDs, ID[] localOptionIDs);
    public void Parse(string commandName, int start, String[] rawArguments);
    private void ParseValues(ID id, Style style, string invokedAs, Option option, string argument, int startIndex);
    public Arguments get_Arguments();
}
[EditorBrowsableAttribute("1")]
public class Microsoft.TeamFoundation.Client.CommandLine.Arguments : object {
    public List`1<string> FreeArguments;
    private string m_commandName;
    private List`1<Option> m_options;
    public string CommandName { get; }
    public IEnumerable`1<Option> Options { get; }
    public Arguments(string commandName);
    public bool Contains(ID optionID);
    public string GetOptionValue(ID optionID);
    private string GetOptionValue(ID optionID, int index);
    public String[] GetAllOptionValues(ID optionID);
    public Option[] GetAllOptionsByID(ID optionID);
    public Option GetOption(ID optionID);
    public void AppendOption(Option option);
    private Option FindOptionByID(ID optionID);
    public string GetFreeArgument(int index);
    public String[] GetFreeArgumentsAsArray();
    public virtual string ToString();
    public string get_CommandName();
    public IEnumerable`1<Option> get_Options();
}
[EditorBrowsableAttribute("1")]
public abstract class Microsoft.TeamFoundation.Client.CommandLine.Command : object {
    public static string IgnoreStdOutRedirection;
    private TfsConnection m_tfsConnection;
    protected Arguments m_arguments;
    private Stopwatch m_commandTimer;
    private Dictionary`2<QuestionType, string> m_questionSuffixes;
    private bool m_outputGenerated;
    public LogCategory LogCategory { get; }
    public TfsConnection TfsConnection { get; protected set; }
    protected Command(Arguments arguments);
    private static Command();
    public abstract virtual void Run();
    public virtual void Dispose();
    public void WriteSpacerLine();
    public void WriteErrorSpacerLine();
    public void WriteError(string message);
    public void WriteError(string messageFormat, Object[] args);
    public void WriteWarning(string message);
    public void WriteWarning(string messageFormat, Object[] args);
    public void WriteInfo(string message);
    public void WriteInfo(string messageFormat, Object[] args);
    public void WriteIndented(string indent, string messageFormat, Object[] args);
    public void WriteIndented(string indent, string message);
    public void WriteXml(Action`1<XmlWriter> action);
    public void WriteLine(string messageFormat, Object[] args);
    public void WriteLine(string message);
    public void WriteLine();
    public void Write(string messageFormat, Object[] args);
    public void Write(string message);
    public virtual LogCategory get_LogCategory();
    public void ReportBadOptionIfPresent(ID conflictingID, string messageFormat);
    public void ReportBadOptionCombinationIfPresent(ID optionId1, ID optionId2);
    public void ReportBadOptionCombinationIfPresent(ID optionId1, IEnumerable`1<ID> optionList);
    public void ReportMissingAssociatedOption(ID option, ID associatedOption);
    public void ReportMissingAssociatedOption(IEnumerable`1<ID> options, ID associatedOption);
    public void GetUserNameAndPassword(String& userName, String& password);
    public void GetImpersonationUserName(String& impersonationUserName);
    public virtual bool IsNoPromptSpecified();
    public Option GetCollectionOption();
    public string GetCollectionOptionValue();
    public static void ParseString(string s, char separator, String& value, String& remainder);
    internal bool IsOptionSpecified(ID optionId);
    public string GetStringStyleOption(ID optionId, int maxSize);
    public static string GetStringStyleOption(Arguments arguments, ID optionId, int maxSize);
    private static string ReadFile(string fileName, int maxSize);
    public Value ParseOption(ID optionId, Value[] supportedValues, Value fallback);
    protected ExitCode GetExitCode();
    protected virtual void SetExitCode(ExitCode exitCode);
    public int CalculateWidth(string text);
    public string Truncate(string text, int width);
    public static bool IsEnvVarSet(string envVar);
    public bool IsTfsSet();
    public QuestionResponse AskQuestion(QuestionType questionType, string question);
    public TfsConnection get_TfsConnection();
    protected void set_TfsConnection(TfsConnection value);
}
[EditorBrowsableAttribute("1")]
public abstract class Microsoft.TeamFoundation.Client.CommandLine.CommandLine : object {
    public static string NoPromptEnvironmentVariable;
    public static int ExpandEnvironmentVariablesMaximumLength;
    private static NoPromptState s_noPrompt;
    private static Encoding s_inputEncoding;
    private static Encoding s_outputEncoding;
    private static string m_exitMarker;
    private static int c_maxLineBufferSize;
    private string m_commandLine;
    private bool m_showExitCode;
    private bool m_showExitMarker;
    private Dictionary`2<string, TfsTeamProjectCollection> m_tfServers;
    private bool m_offline;
    private String[] m_helpCommandArgs;
    private TraceSwitch m_traceSwitch;
    private Stopwatch m_mainTimer;
    protected TraceSwitch Tracing { get; protected set; }
    protected bool TraceErrors { get; }
    protected bool TraceInformation { get; }
    protected bool TraceWarnings { get; }
    protected bool TraceVerbose { get; }
    protected bool TraceOff { get; }
    protected LogCategory LogCategory { get; }
    public string CommandLineArgs { get; public set; }
    public NoPromptState NoPrompt { get; }
    private static CommandLine();
    protected void Run(String[]& args);
    protected TraceSwitch get_Tracing();
    protected void set_Tracing(TraceSwitch value);
    protected bool get_TraceErrors();
    protected bool get_TraceInformation();
    protected bool get_TraceWarnings();
    protected bool get_TraceVerbose();
    protected bool get_TraceOff();
    private void TraceStartUp();
    private void TraceEnding();
    private void TraceRunCommandStart(string lineTag, string pseudoCmdPrompt);
    private void TraceRunCommandEnd(string lineTag, String[] args, long elapsedMilliseconds);
    public void LogException(Exception e);
    protected void RunCommand(String[] args);
    protected void UpdateHelpCommandArgs(bool commandGroupSpecified);
    protected virtual void Initialize(String[] args);
    protected abstract virtual void RunCommand(string commandName, String[] args, Boolean& showExitCode);
    protected abstract virtual Icon GetApplicationIcon();
    protected abstract virtual LogCategory get_LogCategory();
    protected virtual void Shutdown();
    private void Console_CancelKeyPress(object sender, ConsoleCancelEventArgs e);
    protected virtual void CancelKeyPressed(ConsoleCancelEventArgs e);
    protected void RunMultipleCommands(string arg, String[] parameters);
    protected void RunCommandsFromStream(TextReader stream, String[] parameters, string fileName);
    protected virtual bool RunExtendedCommand(String[] args, string fullCommandLine, String[] parameters, string fileName);
    private void RenameTeamProject(string origName, string newName);
    protected string ExpandVariables(string line, String[] parameters);
    protected void CheckNumArgs(String[] args, int numArgs);
    protected void CheckNumArgs(String[] args, int minArgs, int maxArgs);
    protected void DisplayTree(string path, int level, StringBuilder prefix, bool showDate);
    protected int CountFiles(string folderPath);
    protected void DisplayFileContents(string fileName);
    protected void CreateFile(String[] args);
    protected void Sleep(string arg);
    protected void AttribFile(String[] args);
    protected void AppendLine(String[] args);
    protected void RunOSCommand(string commandLine);
    public TfsTeamProjectCollection[] GetConnectedServers();
    private static string CanonicalizeTfsName(string tfsName);
    public TfsTeamProjectCollection CreateTfs(string tfsName, Command command);
    private NetworkCredential GetCredentials(string userName, string password);
    public static bool IsEnvVarSet(string envVar);
    private void SetShowExitCode(string setting);
    private void SetShowExitMarker(string setting);
    public virtual string get_CommandLineArgs();
    public virtual void set_CommandLineArgs(string value);
    public bool IsNoPromptSet();
    public NoPromptState get_NoPrompt();
    private void SetNoPrompt(string setting);
    public bool HelpRequested();
    public bool MsdnRequested();
    public string GetHelpCommandName();
    public string GetMsdnCommandName();
    protected static bool IsHelpText(string text);
    private static bool IsMsdnText(string text);
    protected static bool IsHelpAlias(string text);
    private static bool IsOption(string text);
}
[EditorBrowsableAttribute("1")]
public enum Microsoft.TeamFoundation.Client.CommandLine.ExitCode : Enum {
    public int value__;
    public static ExitCode Unknown;
    public static ExitCode Success;
    public static ExitCode PartialSuccess;
    public static ExitCode UnrecognizedCommand;
    public static ExitCode NotAttempted;
    public static ExitCode SuccessRebootRequired;
    public static ExitCode Failure;
}
[EditorBrowsableAttribute("1")]
public enum Microsoft.TeamFoundation.Client.CommandLine.NoPromptState : Enum {
    public int value__;
    public static NoPromptState NoPrompt;
    public static NoPromptState NotSpecified;
    public static NoPromptState Prompt;
}
[EditorBrowsableAttribute("1")]
public class Microsoft.TeamFoundation.Client.CommandLine.Option : object {
    public List`1<string> Values;
    private ID m_id;
    private string m_invokedAs;
    public ID ID { get; }
    public string InvokedAs { get; }
    public Option(ID id, string invokedAs);
    public virtual string ToString();
    public ID get_ID();
    public string get_InvokedAs();
}
[EditorBrowsableAttribute("1")]
public abstract class Microsoft.TeamFoundation.Client.CommandLine.Options : object {
    public static bool MatchesValue(string inputValue, Value val);
    public static void GetIDAndStyle(string alias, ID& id, Style& style);
    public static ID GetIDFromAlias(string alias);
    public static Style GetStyleFromID(ID id);
    public static Occurrences GetOccurrencesFromID(ID id);
}
[EditorBrowsableAttribute("1")]
public enum Microsoft.TeamFoundation.Client.CommandLine.QuestionResponse : Enum {
    public int value__;
    public static QuestionResponse Yes;
    public static QuestionResponse No;
    public static QuestionResponse All;
    public static QuestionResponse Cancel;
    public static QuestionResponse NoAction;
}
[EditorBrowsableAttribute("1")]
public enum Microsoft.TeamFoundation.Client.CommandLine.QuestionType : Enum {
    public int value__;
    public static QuestionType YesNo;
    public static QuestionType YesNoAll;
    public static QuestionType YesNoCancel;
    public static QuestionType YesAllNoAllCancel;
}
[ComVisibleAttribute("True")]
[InterfaceTypeAttribute("1")]
[GuidAttribute("B722BCCB-4E68-101B-A2BC-00AA00404770")]
[EditorBrowsableAttribute("1")]
[CLSCompliantAttribute("False")]
public interface Microsoft.TeamFoundation.Client.CommandTarget.IOleCommandTarget {
    public abstract virtual int QueryStatus(Guid& pguidCmdGroup, UInt32 cCmds, OLECMD[] prgCmds, IntPtr pCmdText);
    public abstract virtual int Exec(Guid& pguidCmdGroup, UInt32 nCmdID, UInt32 nCmdexecopt, IntPtr pvaIn, IntPtr pvaOut);
}
[EditorBrowsableAttribute("1")]
[CLSCompliantAttribute("False")]
public class Microsoft.TeamFoundation.Client.CommandTarget.OLECMD : ValueType {
    public UInt32 cmdID;
    public UInt32 cmdf;
}
[EditorBrowsableAttribute("1")]
public enum Microsoft.TeamFoundation.Client.CommandTarget.OleConstants : Enum {
    public int value__;
    public static OleConstants OLECMDERR_E_NOTSUPPORTED;
    public static OleConstants MSOCMDERR_E_NOTSUPPORTED;
    public static OleConstants MSOCMDERR_E_FIRST;
    public static OleConstants OLECMDERR_E_FIRST;
    public static OleConstants OLECMDERR_E_DISABLED;
    public static OleConstants MSOCMDERR_E_DISABLED;
    public static OleConstants MSOCMDERR_E_NOHELP;
    public static OleConstants OLECMDERR_E_NOHELP;
    public static OleConstants MSOCMDERR_E_CANCELED;
    public static OleConstants OLECMDERR_E_CANCELED;
    public static OleConstants OLECMDERR_E_UNKNOWNGROUP;
    public static OleConstants MSOCMDERR_E_UNKNOWNGROUP;
    public static OleConstants OLECONTEXT_NULLMENU;
    public static OleConstants PROPSETHDR_OSVERSION_UNKNOWN;
    public static OleConstants MSOCMDEXECOPT_DODEFAULT;
    public static OleConstants MSOCMDTEXTF_NONE;
    public static OleConstants MSOCMDTEXTF_NAME;
    public static OleConstants MSOCMDEXECOPT_PROMPTUSER;
    public static OleConstants OLECMDSTATE_DISABLED;
    public static OleConstants MSOCMDF_SUPPORTED;
    public static OleConstants MSOCMDID_OPEN;
    public static OleConstants MSOCMDSTATE_DISABLED;
    public static OleConstants MSOCMDEXECOPT_DONTPROMPTUSER;
    public static OleConstants MSOCMDF_ENABLED;
    public static OleConstants MSOCMDTEXTF_STATUS;
    public static OleConstants MSOCMDID_NEW;
    public static OleConstants MSOCMDSTATE_UP;
    public static OleConstants MSOCMDID_SAVE;
    public static OleConstants MSOCMDEXECOPT_SHOWHELP;
    public static OleConstants OLECMDSTATE_UP;
    public static OleConstants MSOCMDF_LATCHED;
    public static OleConstants MSOCMDID_SAVEAS;
    public static OleConstants MSOCMDID_SAVECOPYAS;
    public static OleConstants MSOCMDID_PRINT;
    public static OleConstants MSOCMDID_PRINTPREVIEW;
    public static OleConstants OLECMDSTATE_DOWN;
    public static OleConstants MSOCMDSTATE_DOWN;
    public static OleConstants MSOCMDID_PAGESETUP;
    public static OleConstants MSOCMDF_NINCHED;
    public static OleConstants MSOCMDID_SPELL;
    public static OleConstants MSOCMDID_PROPERTIES;
    public static OleConstants MSOCMDSTATE_NINCHED;
    public static OleConstants OLECMDSTATE_NINCHED;
    public static OleConstants MSOCMDID_CUT;
    public static OleConstants MSOCMDID_COPY;
    public static OleConstants MSOCMDID_PASTE;
    public static OleConstants MSOCMDID_PASTESPECIAL;
    public static OleConstants MSOCMDID_UNDO;
    public static OleConstants MSOCMDID_REDO;
    public static OleConstants MSOCMDSTATE_INVISIBLE;
    public static OleConstants MSOCMDID_SELECTALL;
    public static OleConstants OLECMDSTATE_INVISIBLE;
    public static OleConstants MSOCMDID_CLEARSELECTION;
    public static OleConstants MSOCMDID_ZOOM;
    public static OleConstants MSOCMDID_GETZOOMRANGE;
    public static OleConstants CCH_MAX_PROPSTG_NAME;
}
internal class Microsoft.TeamFoundation.Client.CommonDiagnosticProvider : object {
    private static string s_featureTeamCommon;
    private static string s_featureAreaEnvironment;
    private string s_areaPathEnvironment;
    public string Name { get; }
    public String[] AreaPaths { get; }
    private static CommonDiagnosticProvider();
    public sealed virtual string get_Name();
    public sealed virtual String[] get_AreaPaths();
    public sealed virtual void WriteState(string areaPath, XmlWriter writer);
}
public class Microsoft.TeamFoundation.Client.ConnectedUserContext : object {
    [CompilerGeneratedAttribute]
private string <ServerUri>k__BackingField;
    private static string m_namespace;
    private static string m_tokenKind;
    public string Namespace { get; public set; }
    public string TokenKind { get; public set; }
    public string ServerUri { get; public set; }
    private static ConnectedUserContext();
    public string get_Namespace();
    public void set_Namespace(string value);
    public string get_TokenKind();
    public void set_TokenKind(string value);
    [CompilerGeneratedAttribute]
public string get_ServerUri();
    [CompilerGeneratedAttribute]
public void set_ServerUri(string value);
}
internal enum Microsoft.TeamFoundation.Client.ConnectFailureCategory : Enum {
    public int value__;
    public static ConnectFailureCategory NotPermitted;
    public static ConnectFailureCategory ConnectFailure;
    public static ConnectFailureCategory TrustFailure;
    public static ConnectFailureCategory UnExpected;
    public static ConnectFailureCategory ServerFailure;
    public static ConnectFailureCategory Unknown;
}
internal class Microsoft.TeamFoundation.Client.ConnectFailureReason : object {
    private ConnectFailureStatus _statusCode;
    private ConnectFailureCategory _category;
    protected Exception _exception;
    public ConnectFailureStatus StatusCode { get; }
    public ConnectFailureCategory Category { get; }
    public string HelpTopic { get; }
    protected ConnectFailureReason(ConnectFailureStatus code, Exception ex);
    public ConnectFailureStatus get_StatusCode();
    public ConnectFailureCategory get_Category();
    public string get_HelpTopic();
    public virtual string GetErrorMessage(string serverName);
    internal static ConnectFailureStatus GetStatus(Exception e);
    public static ConnectFailureReason GetReason(Exception e);
}
internal enum Microsoft.TeamFoundation.Client.ConnectFailureStatus : Enum {
    public int value__;
    public static ConnectFailureStatus NotPermitted;
    public static ConnectFailureStatus NotAuthorized;
    public static ConnectFailureStatus AccessCheck;
    public static ConnectFailureStatus TimedOut;
    public static ConnectFailureStatus ConnectFailure;
    public static ConnectFailureStatus TrustFailure;
    public static ConnectFailureStatus UnExpected;
    public static ConnectFailureStatus NotWorkgroupUser;
    public static ConnectFailureStatus TrialExpired;
    public static ConnectFailureStatus Unknown;
}
public class Microsoft.TeamFoundation.Client.ConnectionUserChangedEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
private Guid <InstanceId>k__BackingField;
    public Guid InstanceId { get; private set; }
    public ConnectionUserChangedEventArgs(Guid instanceId);
    [CompilerGeneratedAttribute]
public Guid get_InstanceId();
    [CompilerGeneratedAttribute]
private void set_InstanceId(Guid value);
}
public class Microsoft.TeamFoundation.Client.ConnectivityFailureStatusChangedEventArgs : EventArgs {
    private bool m_newConnectivityFailureStatus;
    public bool NewConnectivityFailureStatus { get; }
    public ConnectivityFailureStatusChangedEventArgs(bool newConnectivityFailureStatus);
    public bool get_NewConnectivityFailureStatus();
}
public class Microsoft.TeamFoundation.Client.ConnectivityFailureStatusChangedEventHandler : MulticastDelegate {
    public ConnectivityFailureStatusChangedEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, ConnectivityFailureStatusChangedEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, ConnectivityFailureStatusChangedEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
internal static class Microsoft.TeamFoundation.Client.ConnectToTfsHelpKeyWords : object {
    public static string InvalidCertificate;
    public static string UnableToConnect;
    public static string CannotRetrieveProjects;
    public static string NoPermission;
    public static string UnExpected;
    private static ConnectToTfsHelpKeyWords();
}
internal class Microsoft.TeamFoundation.Client.ConsoleHandle : object {
    private IntPtr m_handle;
    internal bool IsValid { get; }
    internal IntPtr Handle { get; }
    internal ConsoleHandle(int nStdHandle);
    internal bool get_IsValid();
    internal IntPtr get_Handle();
}
[EditorBrowsableAttribute("1")]
public class Microsoft.TeamFoundation.Client.ConsoleHost : WindowsHost {
    public static string DisplayFallbackWidthSetting;
    public static string DisplayDisableColorsSetting;
    public static string DisplayErrorBackgroundSetting;
    public static string DisplayErrorForegroundSetting;
    public static string DisplayWarnBackgroundSetting;
    public static string DisplayWarnForegroundSetting;
    public static string DisplayInfoBackgroundSetting;
    public static string DisplayInfoForegroundSetting;
    private static int s_outputWidth;
    private static bool s_disableColors;
    private static ConsoleColor s_errorBackground;
    private static ConsoleColor s_errorForeground;
    private static ConsoleColor s_warnBackground;
    private static ConsoleColor s_warnForeground;
    private static ConsoleColor s_infoBackground;
    private static ConsoleColor s_infoForeground;
    private static bool s_suppressErrors;
    private static bool s_displayErrorsInMessageBoxWhenModal;
    private static bool s_isCanceled;
    public RuntimeEnvironmentFlags EnvironmentFlags { get; }
    public string NewLine { get; }
    public int OutputWidth { get; }
    public Encoding OutputEncoding { get; }
    public static bool IsStdOutRedirected { get; }
    public static bool IsStdErrRedirected { get; }
    public static bool IsStdInRedirected { get; }
    public static bool SuppressErrors { get; public set; }
    public static bool DisplayErrorsInMessageBoxWhenModal { get; public set; }
    public static bool Canceled { get; public set; }
    protected ConsoleHost(Icon appIcon);
    private static ConsoleHost();
    public virtual RuntimeEnvironmentFlags get_EnvironmentFlags();
    public virtual void Write(LogFlags flags, LogCategory category, string message);
    private void ShowModalErrorMessageBox(string message);
    public virtual string get_NewLine();
    public virtual int get_OutputWidth();
    public virtual Encoding get_OutputEncoding();
    protected virtual void OnModalDialogFormActivate(object sender, EventArgs e);
    public static void FocusOrBlink(IntPtr hwnd);
    public static string ReadLine();
    private ConsoleColor GetColor(string name, ConsoleColor fallback);
    private void SetErrorColors();
    private void SetWarningColors();
    private void SetInfoColors();
    private void ResetColors();
    public void ShowProgress(string message);
    public static void Initialize();
    public static void Initialize(Icon appIcon);
    public static void WriteBuffer(Byte[] rawBytes, int numBytesToWrite);
    public static void WriteBuffer(Byte[] rawBytes, int numBytesToWrite, bool stdErr);
    public static bool get_IsStdOutRedirected();
    public static bool get_IsStdErrRedirected();
    public static bool get_IsStdInRedirected();
    public static Stream GetOutputStream();
    public static Stream GetErrorStream();
    public static bool get_SuppressErrors();
    public static void set_SuppressErrors(bool value);
    public static bool get_DisplayErrorsInMessageBoxWhenModal();
    public static void set_DisplayErrorsInMessageBoxWhenModal(bool value);
    public static bool get_Canceled();
    public static void set_Canceled(bool value);
    public static void ThrowIfCanceled();
}
internal static class Microsoft.TeamFoundation.Client.ConsoleUtils : object {
    private static int s_redirectedState;
    private static Encoding s_redirectedOutputEncoding;
    internal static Encoding RedirectedOutputEncoding { get; }
    internal static bool IsStdInRedirected { get; }
    internal static bool IsStdOutRedirected { get; }
    internal static bool IsStdErrRedirected { get; }
    internal static bool IsPrintableConsoleChar(char ch);
    internal static Encoding get_RedirectedOutputEncoding();
    internal static bool Write(string message, bool toStandardOutput);
    internal static bool Write(Char[] chars, bool toStandardOutput);
    internal static bool Write(Char[] chars, int numCharsToWrite, bool toStandardOutput);
    internal static bool Write(Byte[] bytes, bool toStandardOutput);
    internal static bool Write(Byte[] bytes, int numBytesToWrite, bool toStandardOutput);
    internal static bool get_IsStdInRedirected();
    internal static bool get_IsStdOutRedirected();
    internal static bool get_IsStdErrRedirected();
    private static bool IsRedirected(int nStdHandle);
}
public class Microsoft.TeamFoundation.Client.ContextChangedEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
private ITeamFoundationContext <NewContext>k__BackingField;
    [CompilerGeneratedAttribute]
private ITeamFoundationContext <OldContext>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <TeamProjectCollectionChanged>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <TeamProjectChanged>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <TeamChanged>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <RepositoryChanged>k__BackingField;
    public ITeamFoundationContext NewContext { get; private set; }
    public ITeamFoundationContext OldContext { get; private set; }
    public bool TeamProjectCollectionChanged { get; private set; }
    public bool TeamProjectChanged { get; private set; }
    public bool TeamChanged { get; private set; }
    public bool RepositoryChanged { get; private set; }
    [EditorBrowsableAttribute("1")]
public ContextChangedEventArgs(ITeamFoundationContext oldContext, ITeamFoundationContext newContext, bool collectionChanged, bool teamProjectChanged, bool teamChanged, bool repositoryChanged);
    [CompilerGeneratedAttribute]
public ITeamFoundationContext get_NewContext();
    [CompilerGeneratedAttribute]
private void set_NewContext(ITeamFoundationContext value);
    [CompilerGeneratedAttribute]
public ITeamFoundationContext get_OldContext();
    [CompilerGeneratedAttribute]
private void set_OldContext(ITeamFoundationContext value);
    [CompilerGeneratedAttribute]
public bool get_TeamProjectCollectionChanged();
    [CompilerGeneratedAttribute]
private void set_TeamProjectCollectionChanged(bool value);
    [CompilerGeneratedAttribute]
public bool get_TeamProjectChanged();
    [CompilerGeneratedAttribute]
private void set_TeamProjectChanged(bool value);
    [CompilerGeneratedAttribute]
public bool get_TeamChanged();
    [CompilerGeneratedAttribute]
private void set_TeamChanged(bool value);
    [CompilerGeneratedAttribute]
public bool get_RepositoryChanged();
    [CompilerGeneratedAttribute]
private void set_RepositoryChanged(bool value);
}
[CLSCompliantAttribute("False")]
public abstract class Microsoft.TeamFoundation.Client.ContextChangingEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
private bool <Cancel>k__BackingField;
    [CompilerGeneratedAttribute]
private ITeamFoundationContext <NewContext>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <TeamProjectCollectionChanging>k__BackingField;
    public bool Cancel { get; public set; }
    public ITeamFoundationContext NewContext { get; private set; }
    public bool TeamProjectCollectionChanging { get; private set; }
    [EditorBrowsableAttribute("1")]
public ContextChangingEventArgs(ITeamFoundationContext newContext, bool collectionChanging);
    [CompilerGeneratedAttribute]
public bool get_Cancel();
    [CompilerGeneratedAttribute]
public void set_Cancel(bool value);
    [CompilerGeneratedAttribute]
public ITeamFoundationContext get_NewContext();
    [CompilerGeneratedAttribute]
private void set_NewContext(ITeamFoundationContext value);
    [CompilerGeneratedAttribute]
public bool get_TeamProjectCollectionChanging();
    [CompilerGeneratedAttribute]
private void set_TeamProjectCollectionChanging(bool value);
    public abstract virtual void AddHierarchyForPromptAndSave(object hierarchy, UInt32 parentItemId, bool autoClose);
}
[ObsoleteAttribute("This class is deprecated and will be removed in a future release. See Microsoft.VisualStudio.Services.Client.VssFederatedCredential instead.", "False")]
public class Microsoft.TeamFoundation.Client.CookieCredential : FederatedCredential {
    private bool m_useCache;
    private bool m_cacheInitialized;
    private VssFederatedCredentialPrompt m_prompt;
    private string m_tenantId;
    internal VssFederatedCredentialPrompt Prompt { get; internal set; }
    internal string TenantId { get; internal set; }
    protected VssCredentialsType CredentialType { get; }
    public CookieCredential(bool useCache);
    public CookieCredential(bool useCache, CookieToken initialToken);
    internal VssFederatedCredentialPrompt get_Prompt();
    internal void set_Prompt(VssFederatedCredentialPrompt value);
    internal string get_TenantId();
    internal void set_TenantId(string value);
    protected virtual VssCredentialsType get_CredentialType();
    internal virtual bool IsAuthenticationChallenge(HttpWebResponse webResponse);
    internal virtual IssuedTokenProvider OnCreateTokenProvider(Uri serverUrl, HttpWebResponse response);
    internal static void GetRealmAndIssuer(HttpWebResponse response, String& realm, String& issuer);
    internal static string GetTenantInfo(HttpWebResponse response);
    private static void AddParameter(Uri& uri, string name, string value);
}
[ObsoleteAttribute("This class is deprecated and will be removed in a future release. See Microsoft.VisualStudio.Services.Client.VssFederatedToken instead.", "False")]
public class Microsoft.TeamFoundation.Client.CookieToken : IssuedToken {
    private CookieCollection m_cookies;
    [EditorBrowsableAttribute("1")]
public CookieCollection CookieCollection { get; }
    protected internal VssCredentialsType CredentialType { get; }
    public CookieToken(CookieCollection cookies);
    public CookieCollection get_CookieCollection();
    protected internal virtual VssCredentialsType get_CredentialType();
    internal virtual void RequestUserData(HttpWebRequest webRequest);
    internal virtual void GetUserData(HttpWebResponse webResponse);
    internal virtual void ApplyTo(HttpWebRequest webRequest);
}
[ObsoleteAttribute("This class is deprecated and will be removed in a future release. See Microsoft.VisualStudio.Services.Client.VssFederatedTokenProvider instead.", "False")]
internal class Microsoft.TeamFoundation.Client.CookieTokenProvider : IssuedTokenProvider {
    [CompilerGeneratedAttribute]
private string <Issuer>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Realm>k__BackingField;
    [CompilerGeneratedAttribute]
private Uri <ReplyTo>k__BackingField;
    public CookieCredential Credential { get; }
    public bool GetTokenIsInteractive { get; }
    public string Issuer { get; private set; }
    public string Realm { get; private set; }
    public Uri ReplyTo { get; private set; }
    public CookieTokenProvider(CookieCredential credential, Uri serverUrl, Uri signInUrl, string issuer, string realm, Uri replyTo);
    public CookieCredential get_Credential();
    public virtual bool get_GetTokenIsInteractive();
    [CompilerGeneratedAttribute]
public string get_Issuer();
    [CompilerGeneratedAttribute]
private void set_Issuer(string value);
    [CompilerGeneratedAttribute]
public string get_Realm();
    [CompilerGeneratedAttribute]
private void set_Realm(string value);
    [CompilerGeneratedAttribute]
public Uri get_ReplyTo();
    [CompilerGeneratedAttribute]
private void set_ReplyTo(Uri value);
    internal virtual bool IsAuthenticationChallenge(HttpWebResponse webResponse);
    protected virtual IssuedToken OnGetToken(IssuedToken failedToken, TimeSpan timeout);
    protected virtual IAsyncResult OnBeginGetToken(IssuedToken failedToken, TimeSpan timeout, AsyncCallback callback, object state);
    protected virtual IssuedToken OnEndGetToken(IAsyncResult result);
    protected virtual IssuedToken OnValidatingToken(IssuedToken token, HttpWebResponse webResponse);
    protected virtual void OnTokenValidated(IssuedToken token);
    protected virtual void OnTokenInvalidated(IssuedToken token);
    public sealed virtual void SignOut(Uri signOutUrl, Uri replyToUrl, string identityProvider);
    private static void ParseUserData(string userData, Guid& userId, String& userName);
}
public class Microsoft.TeamFoundation.Client.CredentialsChangedEventArgs : EventArgs {
    private ICredentials m_credentials;
    public ICredentials Credentials { get; }
    public CredentialsChangedEventArgs(ICredentials credentials);
    public ICredentials get_Credentials();
}
public class Microsoft.TeamFoundation.Client.CredentialsChangedEventHandler : MulticastDelegate {
    public CredentialsChangedEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, CredentialsChangedEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, CredentialsChangedEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
[EditorBrowsableAttribute("1")]
public class Microsoft.TeamFoundation.Client.CssHierarchyControl : ComboTree {
    private ICssDataProvider m_dataProvider;
    private bool m_isRootLoaded;
    private static char cDefaultPathSplitter;
    private char m_pathSplitter;
    private ImageList m_imageList;
    public ImageList ImageList { get; public set; }
    public ICssDataProvider DataProvider { get; public set; }
    protected char PathSplitter { get; protected set; }
    public CssHierarchyControl(ICssDataProvider dataProvider);
    public ImageList get_ImageList();
    public void set_ImageList(ImageList value);
    public ICssDataProvider get_DataProvider();
    public void set_DataProvider(ICssDataProvider value);
    public void Reset();
    protected char get_PathSplitter();
    protected void set_PathSplitter(char value);
    protected virtual void OnDrawItem(DrawItemEventArgs e);
    protected virtual void OnDropDown(EventArgs e);
    protected virtual void OnBeforeExpand(object sender, TreeViewCancelEventArgs e);
    protected virtual void OnBeforeCollapse(object sender, TreeViewCancelEventArgs e);
    private void OnTextChanged(object sender, EventArgs e);
    private void InitControl();
    protected void LoadRootNodes();
    private void LoadChildNodes(TreeNode parentTreeNode, bool force);
    private bool NeedsLoading(TreeNode parentTreeNode);
    private TreeNode GetWrappingTreeNode(CssNode cssNode);
    private void ExpandPath();
    private void ExpandDefaultRootNode();
}
[EditorBrowsableAttribute("1")]
public class Microsoft.TeamFoundation.Client.CssLoadingNode : CssNode {
    public CssLoadingNode(string name);
}
[EditorBrowsableAttribute("1")]
public class Microsoft.TeamFoundation.Client.CssNode : object {
    [CompilerGeneratedAttribute]
private EventHandler`1<Exception> Populated;
    private string m_name;
    private object m_tag;
    private bool m_hasChildren;
    private int m_imageIndex;
    private int m_imageIndexExpanded;
    public string Name { get; public set; }
    public object Tag { get; public set; }
    public bool HasChildren { get; public set; }
    public int ImageIndex { get; public set; }
    public int ImageIndexExpanded { get; public set; }
    public CssNode(string name, object tag, bool hasChildren);
    public CssNode(string name);
    public CssNode(string name, object tag, bool hasChildren, int imageIndex);
    public CssNode(string name, object tag, bool hasChildren, int imageIndex, int imageIndexExpanded);
    public string get_Name();
    public void set_Name(string value);
    public object get_Tag();
    public void set_Tag(object value);
    public bool get_HasChildren();
    public void set_HasChildren(bool value);
    public int get_ImageIndex();
    public void set_ImageIndex(int value);
    public int get_ImageIndexExpanded();
    public void set_ImageIndexExpanded(int value);
    [CompilerGeneratedAttribute]
public void add_Populated(EventHandler`1<Exception> value);
    [CompilerGeneratedAttribute]
public void remove_Populated(EventHandler`1<Exception> value);
    public void RaisePopulated(Exception error);
}
[EditorBrowsableAttribute("1")]
public class Microsoft.TeamFoundation.Client.CssNodeCollection : List`1<CssNode> {
    public CssNodeCollection(int capacity);
}
[EditorBrowsableAttribute("1")]
public class Microsoft.TeamFoundation.Client.CustomCombo`1 : ComboBox {
    private static int cMinDropdownHeight;
    private static long cDropDownTickDelay;
    private ToolStripDropDown m_dropDown;
    private IComboHostedControl m_hostedControl;
    private Point m_currentPosition;
    private Timer m_moveTimer;
    private Timer m_textChangedTimer;
    private long m_lastTimeStamp;
    private int m_textChanging;
    private int m_suspendAutoComplete;
    private int m_cachedCaretPos;
    private bool m_accessibilityMode;
    unknown string Text {public set; }
    public bool IsDroppedDown { get; }
    public int CaretPosition { get; }
    public Control HostedDropDownControl { get; }
    protected IComboHostedControl HostedControl { get; }
    public void Initialize(T control);
    protected virtual void Dispose(bool disposing);
    protected virtual void WndProc(Message& m);
    private int HIWORD(int n);
    public virtual bool PreProcessMessage(Message& msg);
    protected virtual void OnKeyDown(KeyEventArgs e);
    protected virtual void OnKeyUp(KeyEventArgs e);
    protected virtual void OnMouseClick(MouseEventArgs e);
    protected virtual void OnFontChanged(EventArgs e);
    public virtual void set_Text(string value);
    protected virtual void OnTextChanged(EventArgs e);
    protected virtual void OnLostFocus(EventArgs e);
    protected virtual AccessibleObject CreateAccessibilityInstance();
    private void ComboBox_SizeChanged(object sender, EventArgs e);
    private void MoveTimer_TimerTick(object sender, EventArgs e);
    private void TextChangedTimer_Tick(object sender, EventArgs e);
    private void FilterItems();
    public void PostKey(Keys wParam, Keys lParam);
    public void SetSelection(string selectedText, int caretPos, bool closeDropdown);
    public void StartFilter();
    protected virtual void OnItemSelected(string item);
    public Size GetControlAreaSize();
    public bool get_IsDroppedDown();
    public void HideDropDown();
    public void ShowDropDown(bool giveFocus);
    public void RecalculateSize();
    public int get_CaretPosition();
    public Control get_HostedDropDownControl();
    public void SetCaretPosition(int pos);
    protected void SetDelayedFiltering(bool delayOn);
    protected void SetSelectedText(string text, int caretPos);
    protected IComboHostedControl get_HostedControl();
    private void SetDropDownVisibility(bool show);
    private void AsyncHideComboBoxDropDown();
    private Size GetDropdownSize();
    private ToolStripDropDownDirection SetDropdownSize();
    [CompilerGeneratedAttribute]
private void <AsyncHideComboBoxDropDown>b__51_0();
}
[EditorBrowsableAttribute("1")]
public class Microsoft.TeamFoundation.Client.DataGridViewDetailsEventArgs : CancelEventArgs {
    private int m_rowIndex;
    private bool m_userInitiated;
    private bool m_collapseDetails;
    public int RowIndex { get; }
    public bool UserInitiated { get; }
    public bool CollapseDetails { get; public set; }
    public DataGridViewDetailsEventArgs(int rowIndex, bool userInitiated);
    public int get_RowIndex();
    public bool get_UserInitiated();
    public bool get_CollapseDetails();
    public void set_CollapseDetails(bool value);
}
[EditorBrowsableAttribute("1")]
public enum Microsoft.TeamFoundation.Client.DataGridViewDetailsImageMode : Enum {
    public int value__;
    public static DataGridViewDetailsImageMode None;
    public static DataGridViewDetailsImageMode AllRows;
    public static DataGridViewDetailsImageMode FocusedRow;
}
[EditorBrowsableAttribute("1")]
public class Microsoft.TeamFoundation.Client.DataGridViewWithDetails : DataGridView {
    private int m_detailsRowIndex;
    private int m_detailsRowOrigHeight;
    private DataGridViewContentAlignment m_detailsRowOrigAlignment;
    private Panel m_detailsPanel;
    private Panel m_detailsTopGridLine;
    private Timer m_detailsTimer;
    private bool m_detailsInitialExpand;
    private bool m_detailsInitialExpansionIgnored;
    private bool m_detailsAutoExpand;
    private int m_detailsAutoExpandDelay;
    private int m_detailsImageColumnIndex;
    private DataGridViewDetailsImageMode m_detailsImageMode;
    private Image m_detailsExpandedImage;
    private Image m_detailsCollapsedImage;
    private UserControl m_detailsHostedControl;
    private bool m_selectionChanged;
    private bool m_selectionChangeInvalidatesDetails;
    private int m_skipUpdateDetailsPanel;
    [CompilerGeneratedAttribute]
private EventHandler`1<DataGridViewDetailsEventArgs> BeforeExpandDetails;
    [CompilerGeneratedAttribute]
private EventHandler`1<DataGridViewDetailsEventArgs> AfterExpandDetails;
    [CompilerGeneratedAttribute]
private EventHandler`1<DataGridViewDetailsEventArgs> BeforeCollapseDetails;
    [CompilerGeneratedAttribute]
private EventHandler`1<DataGridViewDetailsEventArgs> AfterCollapseDetails;
    private int m_correctRowMinHeight;
    [BrowsableAttribute("True")]
[CategoryAttribute("Details Panel")]
[DefaultValueAttribute("False")]
public bool InitialExpandDetails { get; public set; }
    [BrowsableAttribute("True")]
[CategoryAttribute("Details Panel")]
[DefaultValueAttribute("False")]
public bool SelectionChangeInvalidatesDetails { get; public set; }
    [BrowsableAttribute("True")]
[CategoryAttribute("Details Panel")]
[DefaultValueAttribute("False")]
public bool AutoExpandDetails { get; public set; }
    [BrowsableAttribute("True")]
[CategoryAttribute("Details Panel")]
[DefaultValueAttribute("400")]
public int AutoExpandDetailsDelay { get; public set; }
    [BrowsableAttribute("False")]
[DefaultValueAttribute("")]
public UserControl DetailsControl { get; public set; }
    [BrowsableAttribute("True")]
[CategoryAttribute("Details Panel")]
public Color DetailsBackColor { get; public set; }
    [BrowsableAttribute("False")]
public int DetailsRow { get; }
    [BrowsableAttribute("True")]
[CategoryAttribute("Details Panel")]
[DefaultValueAttribute("-2")]
public int DetailsImageColumnIndex { get; public set; }
    [BrowsableAttribute("True")]
[CategoryAttribute("Details Panel")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public DataGridViewDetailsImageMode DetailsImageMode { get; public set; }
    [BrowsableAttribute("False")]
public Image DetailsCollapsedImage { get; public set; }
    [BrowsableAttribute("False")]
public Image DetailsExpandedImage { get; public set; }
    protected bool IsExpandDelayed { get; }
    [BrowsableAttribute("False")]
internal int DetailsWidth { get; }
    private int BorderWidth { get; }
    private int GridLineWidth { get; }
    private int GridLineHeight { get; }
    [CompilerGeneratedAttribute]
public void add_BeforeExpandDetails(EventHandler`1<DataGridViewDetailsEventArgs> value);
    [CompilerGeneratedAttribute]
public void remove_BeforeExpandDetails(EventHandler`1<DataGridViewDetailsEventArgs> value);
    [CompilerGeneratedAttribute]
public void add_AfterExpandDetails(EventHandler`1<DataGridViewDetailsEventArgs> value);
    [CompilerGeneratedAttribute]
public void remove_AfterExpandDetails(EventHandler`1<DataGridViewDetailsEventArgs> value);
    [CompilerGeneratedAttribute]
public void add_BeforeCollapseDetails(EventHandler`1<DataGridViewDetailsEventArgs> value);
    [CompilerGeneratedAttribute]
public void remove_BeforeCollapseDetails(EventHandler`1<DataGridViewDetailsEventArgs> value);
    [CompilerGeneratedAttribute]
public void add_AfterCollapseDetails(EventHandler`1<DataGridViewDetailsEventArgs> value);
    [CompilerGeneratedAttribute]
public void remove_AfterCollapseDetails(EventHandler`1<DataGridViewDetailsEventArgs> value);
    protected virtual void Dispose(bool disposing);
    public bool get_InitialExpandDetails();
    public void set_InitialExpandDetails(bool value);
    public bool get_SelectionChangeInvalidatesDetails();
    public void set_SelectionChangeInvalidatesDetails(bool value);
    public bool get_AutoExpandDetails();
    public void set_AutoExpandDetails(bool value);
    public int get_AutoExpandDetailsDelay();
    public void set_AutoExpandDetailsDelay(int value);
    public UserControl get_DetailsControl();
    public void set_DetailsControl(UserControl value);
    public Color get_DetailsBackColor();
    public void set_DetailsBackColor(Color value);
    public int get_DetailsRow();
    public int get_DetailsImageColumnIndex();
    public void set_DetailsImageColumnIndex(int value);
    public DataGridViewDetailsImageMode get_DetailsImageMode();
    public void set_DetailsImageMode(DataGridViewDetailsImageMode value);
    public Image get_DetailsCollapsedImage();
    public void set_DetailsCollapsedImage(Image value);
    public Image get_DetailsExpandedImage();
    public void set_DetailsExpandedImage(Image value);
    protected bool get_IsExpandDelayed();
    public void ExpandDetails();
    public void ExpandDetails(int rowIndex);
    private void ExpandDetails(int rowIndex, bool userInitiated);
    public void CollapseDetails();
    private void CollapseDetails(bool userInitiated);
    internal int get_DetailsWidth();
    private int get_BorderWidth();
    private int get_GridLineWidth();
    private int get_GridLineHeight();
    protected virtual void OnBeforeExpandDetails(DataGridViewDetailsEventArgs e);
    protected virtual void OnAfterExpandDetails(DataGridViewDetailsEventArgs e);
    protected virtual void OnBeforeCollapseDetails(DataGridViewDetailsEventArgs e);
    protected virtual void OnAfterCollapseDetails(DataGridViewDetailsEventArgs e);
    protected virtual void OnResize(EventArgs e);
    protected virtual void OnScroll(ScrollEventArgs e);
    private void VerticalScrollBar_VisibleChanged(object sender, EventArgs e);
    protected virtual void OnVisibleChanged(EventArgs e);
    protected virtual void OnPaint(PaintEventArgs e);
    protected virtual void OnRowsAdded(DataGridViewRowsAddedEventArgs e);
    private void CalculateRowMinHeight();
    private void CalculateDetailsImageRects(int rowIndex, Rectangle cell, Rectangle& expanded, Rectangle& collapsed);
    protected virtual void OnRowPostPaint(DataGridViewRowPostPaintEventArgs e);
    protected virtual void OnGridColorChanged(EventArgs e);
    protected virtual void OnKeyUp(KeyEventArgs e);
    protected virtual void OnMouseUp(MouseEventArgs e);
    private void BeginExpandDetails();
    protected virtual void OnRowEnter(DataGridViewCellEventArgs e);
    protected virtual void OnRowsRemoved(DataGridViewRowsRemovedEventArgs e);
    protected virtual void OnRowLeave(DataGridViewCellEventArgs e);
    protected virtual void OnMouseDown(MouseEventArgs e);
    protected virtual bool ProcessKeyPreview(Message& m);
    protected virtual bool ProcessDialogKey(Keys keyData);
    protected virtual void OnKeyDown(KeyEventArgs e);
    private void detailsTimer_Tick(object sender, EventArgs e);
    public void UpdateDetailsPanelHeight();
    private void UpdateDetailsPanel();
    private void UpdateDetailsPanel(bool updateRowHeight);
    protected virtual AccessibleObject CreateAccessibilityInstance();
}
[EditorBrowsableAttribute("1")]
public class Microsoft.TeamFoundation.Client.DeferredEvent : object {
    private Control m_control;
    private MethodInvoker m_method;
    private bool m_pending;
    private MethodInvoker m_callback;
    private IAsyncResult m_asyncResult;
    public DeferredEvent(Control control, MethodInvoker method);
    public void Fire();
    private void Callback();
}
[EditorBrowsableAttribute("1")]
public class Microsoft.TeamFoundation.Client.DialogAuthenticate : BaseDialog {
    private FederatedAcsLogon m_federatedLoginHelper;
    [CompilerGeneratedAttribute]
private CookieCollection <SsoCookieCollection>k__BackingField;
    private IContainer components;
    private WebBrowser connectWebBrowser;
    private Label labelStatus;
    public CookieCollection SsoCookieCollection { get; private set; }
    internal WebBrowser ConnectWebBrowser { get; }
    internal DialogAuthenticate(string location, string replyToAddress);
    [CompilerGeneratedAttribute]
public CookieCollection get_SsoCookieCollection();
    [CompilerGeneratedAttribute]
private void set_SsoCookieCollection(CookieCollection value);
    internal WebBrowser get_ConnectWebBrowser();
    private void DialogAuthenticate_Resize(object sender, EventArgs e);
    private void AuthenticationComplete(object sender, AuthenticationCompleteEventArgs e);
    private void Navigating(object sender, WebBrowserNavigatingEventArgs e);
    private void Navigated(object sender, WebBrowserNavigatedEventArgs e);
    protected virtual void OnClosing(CancelEventArgs e);
    public static CookieCollection Authenticate(string location, string replyToAddress);
    private static void InvokeDialog(object state);
    protected virtual void Dispose(bool disposing);
    private void InitializeComponent();
}
internal class Microsoft.TeamFoundation.Client.DialogPerfListener : BaseDialog {
    private WebServiceStatList m_statList;
    private WebServiceCallList m_callList;
    private IContainer components;
    private DataGridView dataGridViewStats;
    private Button closeButton;
    private Button clearButton;
    private TableLayoutPanel overarchingtableLayoutPanel;
    private BindingSource WebServiceStatListBindingSource;
    private DataGridView dataGridViewHistory;
    private BindingSource WebServiceCallListBindingSource;
    private DataGridViewTextBoxColumn WebServiceCalled;
    private DataGridViewTextBoxColumn RunTime;
    private DataGridViewTextBoxColumn DateTimeStamp;
    private DataGridViewTextBoxColumn ThreadId;
    private DataGridViewTextBoxColumn WebService;
    private DataGridViewTextBoxColumn TotalTime;
    private DataGridViewTextBoxColumn Last;
    private DataGridViewTextBoxColumn Count;
    private DataGridViewTextBoxColumn Average;
    private DataGridViewTextBoxColumn MinTime;
    private DataGridViewTextBoxColumn MaxTime;
    private Button buttonSaveAll;
    protected virtual void OnLoad(EventArgs e);
    internal void AddRunning(string webServiceName, string serviceAddress);
    internal void AddTime(string webServiceName, int runTimeMilliseconds);
    private void dataGridViewHistory_DoubleClick(object sender, EventArgs e);
    private void dataGridViewHistory_Click(object sender, EventArgs e);
    private void closeButton_Click(object sender, EventArgs e);
    private void clearButton_Click(object sender, EventArgs e);
    private void buttonSaveAll_Click(object sender, EventArgs e);
    protected virtual void Dispose(bool disposing);
    private void InitializeComponent();
}
[EditorBrowsableAttribute("1")]
public class Microsoft.TeamFoundation.Client.Dpi.DpiHelper : object {
    private static DpiHelper _default;
    protected static double DefaultLogicalDpi;
    private ImageScalingMode _imageScalingMode;
    private BitmapScalingMode _bitmapScalingMode;
    private Nullable`1<bool> _usePreScaledImages;
    private MatrixTransform transformFromDevice;
    private MatrixTransform transformToDevice;
    [CompilerGeneratedAttribute]
private double <DeviceDpiX>k__BackingField;
    [CompilerGeneratedAttribute]
private double <DeviceDpiY>k__BackingField;
    [CompilerGeneratedAttribute]
private double <LogicalDpiX>k__BackingField;
    [CompilerGeneratedAttribute]
private double <LogicalDpiY>k__BackingField;
    private double _preScaledImageLayoutTransformScaleX;
    private double _preScaledImageLayoutTransformScaleY;
    public static DpiHelper Default { get; }
    public ImageScalingMode ImageScalingMode { get; }
    public BitmapScalingMode BitmapScalingMode { get; }
    public bool UsePreScaledImages { get; }
    public MatrixTransform TransformFromDevice { get; }
    public MatrixTransform TransformToDevice { get; }
    public double DeviceDpiX { get; private set; }
    public double DeviceDpiY { get; private set; }
    public double LogicalDpiX { get; private set; }
    public double LogicalDpiY { get; private set; }
    public bool IsScalingRequired { get; }
    public double DeviceToLogicalUnitsScalingFactorX { get; }
    public double DeviceToLogicalUnitsScalingFactorY { get; }
    public double LogicalToDeviceUnitsScalingFactorX { get; }
    public double LogicalToDeviceUnitsScalingFactorY { get; }
    public int DpiScalePercentX { get; }
    public int DpiScalePercentY { get; }
    public double PreScaledImageLayoutTransformScaleX { get; }
    public double PreScaledImageLayoutTransformScaleY { get; }
    protected DpiHelper(double logicalDpi);
    public static DpiHelper get_Default();
    public static DpiHelper GetHelper(int zoomPercent);
    private ImageScalingMode GetDefaultImageScalingMode(int dpiScalePercent);
    private BitmapScalingMode GetDefaultBitmapScalingMode(int dpiScalePercent);
    protected virtual ImageScalingMode GetImageScalingModeOverride(int dpiScalePercent, ImageScalingMode defaultImageScalingMode);
    protected virtual BitmapScalingMode GetBitmapScalingModeOverride(int dpiScalePercent, BitmapScalingMode defaultBitmapScalingMode);
    protected virtual bool GetUsePreScaledImagesOverride(int dpiScalePercent, bool defaultUsePreScaledImages);
    public ImageScalingMode get_ImageScalingMode();
    private InterpolationMode GetInterpolationMode(ImageScalingMode scalingMode);
    private ImageScalingMode GetActualScalingMode(ImageScalingMode scalingMode);
    public BitmapScalingMode get_BitmapScalingMode();
    public bool get_UsePreScaledImages();
    public MatrixTransform get_TransformFromDevice();
    public MatrixTransform get_TransformToDevice();
    [CompilerGeneratedAttribute]
public double get_DeviceDpiX();
    [CompilerGeneratedAttribute]
private void set_DeviceDpiX(double value);
    [CompilerGeneratedAttribute]
public double get_DeviceDpiY();
    [CompilerGeneratedAttribute]
private void set_DeviceDpiY(double value);
    [CompilerGeneratedAttribute]
public double get_LogicalDpiX();
    [CompilerGeneratedAttribute]
private void set_LogicalDpiX(double value);
    [CompilerGeneratedAttribute]
public double get_LogicalDpiY();
    [CompilerGeneratedAttribute]
private void set_LogicalDpiY(double value);
    public bool get_IsScalingRequired();
    public double get_DeviceToLogicalUnitsScalingFactorX();
    public double get_DeviceToLogicalUnitsScalingFactorY();
    public double get_LogicalToDeviceUnitsScalingFactorX();
    public double get_LogicalToDeviceUnitsScalingFactorY();
    public double LogicalToDeviceUnitsX(double value);
    public double LogicalToDeviceUnitsY(double value);
    public double DeviceToLogicalUnitsX(double value);
    public double DeviceToLogicalUnitsY(double value);
    public float LogicalToDeviceUnitsX(float value);
    public float LogicalToDeviceUnitsY(float value);
    public int LogicalToDeviceUnitsX(int value);
    public int LogicalToDeviceUnitsY(int value);
    public float DeviceToLogicalUnitsX(float value);
    public float DeviceToLogicalUnitsY(float value);
    public int DeviceToLogicalUnitsX(int value);
    public int DeviceToLogicalUnitsY(int value);
    public double RoundToDeviceUnitsX(double value);
    public double RoundToDeviceUnitsY(double value);
    public Point LogicalToDeviceUnits(Point logicalPoint);
    public Rect LogicalToDeviceUnits(Rect logicalRect);
    public Size LogicalToDeviceUnits(Size logicalSize);
    public Thickness LogicalToDeviceUnits(Thickness logicalThickness);
    public Padding LogicalToDeviceUnits(Padding logicalPadding);
    public Point DeviceToLogicalUnits(Point devicePoint);
    public Rect DeviceToLogicalUnits(Rect deviceRect);
    public Size DeviceToLogicalUnits(Size deviceSize);
    public Thickness DeviceToLogicalUnits(Thickness deviceThickness);
    public void SetDeviceLeft(Window& window, double deviceLeft);
    public double GetDeviceLeft(Window window);
    public void SetDeviceTop(Window& window, double deviceTop);
    public double GetDeviceTop(Window window);
    public void SetDeviceWidth(Window& window, double deviceWidth);
    public double GetDeviceWidth(Window window);
    public void SetDeviceHeight(Window& window, double deviceHeight);
    public double GetDeviceHeight(Window window);
    public Rect GetDeviceRect(Window window);
    public Size GetDeviceActualSize(FrameworkElement element);
    public Point LogicalToDeviceUnits(Point logicalPoint);
    public Size LogicalToDeviceUnits(Size logicalSize);
    public Rectangle LogicalToDeviceUnits(Rectangle logicalRect);
    public PointF LogicalToDeviceUnits(PointF logicalPoint);
    public SizeF LogicalToDeviceUnits(SizeF logicalSize);
    public RectangleF LogicalToDeviceUnits(RectangleF logicalRect);
    public void LogicalToDeviceUnits(Bitmap& bitmapImage, ImageScalingMode scalingMode);
    public void LogicalToDeviceUnits(Bitmap& bitmapImage, Color backgroundColor, ImageScalingMode scalingMode);
    public void LogicalToDeviceUnits(Image& image, ImageScalingMode scalingMode);
    public void LogicalToDeviceUnits(Image& image, Color backgroundColor, ImageScalingMode scalingMode);
    public int get_DpiScalePercentX();
    public int get_DpiScalePercentY();
    private Size GetPrescaledImageSize(Size size);
    public double get_PreScaledImageLayoutTransformScaleX();
    public double get_PreScaledImageLayoutTransformScaleY();
    public Image CreateDeviceFromLogicalImage(Image logicalImage, ImageScalingMode scalingMode);
    private void ProcessBitmapPixels(Bitmap image, PixelProcessor pixelProcessor);
    public ImageSource ScaleLogicalImageForDeviceSize(ImageSource image, Size deviceImageSize, BitmapScalingMode scalingMode);
    public Image CreateDeviceFromLogicalImage(Image logicalImage, Color backgroundColor, ImageScalingMode scalingMode);
    private Image ScaleLogicalImageForDeviceSize(Image logicalImage, Size deviceImageSize, Color backgroundColor, ImageScalingMode scalingMode);
    public void LogicalToDeviceUnits(Bitmap& imageStrip, Size logicalImageSize, ImageScalingMode scalingMode);
    public void LogicalToDeviceUnits(Bitmap& imageStrip, Size logicalImageSize, Color backgroundColor, ImageScalingMode scalingMode);
    public Bitmap CreateDeviceFromLogicalImage(Bitmap logicalBitmapStrip, Size logicalImageSize, ImageScalingMode scalingMode);
    public Bitmap CreateDeviceFromLogicalImage(Bitmap logicalBitmapStrip, Size logicalImageSize, Color backgroundColor, ImageScalingMode scalingMode);
    public void LogicalToDeviceUnits(Icon& icon, ImageScalingMode scalingMode);
    public Icon CreateDeviceFromLogicalImage(Icon logicalIcon, ImageScalingMode scalingMode);
    public void LogicalToDeviceUnits(ImageList& imageList, ImageScalingMode scalingMode);
    public void LogicalToDeviceUnits(ImageList& imageList, Color backgroundColor, ImageScalingMode scalingMode);
    public ImageList CreateDeviceFromLogicalImage(ImageList logicalImageList, ImageScalingMode scalingMode);
    public ImageList CreateDeviceFromLogicalImage(ImageList logicalImageList, Color backgroundColor, ImageScalingMode scalingMode);
}
[ExtensionAttribute]
public static class Microsoft.TeamFoundation.Client.DpiHelper : object {
    [CompilerGeneratedAttribute]
private static DpiHelperImplementation <Instance>k__BackingField;
    public static DpiHelperImplementation Instance { get; private set; }
    public static ImageScalingMode ImageScalingMode { get; }
    public static BitmapScalingMode BitmapScalingMode { get; }
    public static bool UsePreScaledImages { get; }
    public static MatrixTransform TransformFromDevice { get; }
    public static MatrixTransform TransformToDevice { get; }
    public static double DeviceDpiX { get; }
    public static double DeviceDpiY { get; }
    public static double LogicalDpiX { get; }
    public static double LogicalDpiY { get; }
    public static bool IsScalingRequired { get; }
    public static double DeviceToLogicalUnitsScalingFactorX { get; }
    public static double DeviceToLogicalUnitsScalingFactorY { get; }
    public static double LogicalToDeviceUnitsScalingFactorX { get; }
    public static double LogicalToDeviceUnitsScalingFactorY { get; }
    public static int DpiScalePercentX { get; }
    public static int DpiScalePercentY { get; }
    public static double PreScaledImageLayoutTransformScaleX { get; }
    public static double PreScaledImageLayoutTransformScaleY { get; }
    private static DpiHelper();
    [CompilerGeneratedAttribute]
public static DpiHelperImplementation get_Instance();
    [CompilerGeneratedAttribute]
private static void set_Instance(DpiHelperImplementation value);
    public static ImageScalingMode get_ImageScalingMode();
    public static BitmapScalingMode get_BitmapScalingMode();
    public static bool get_UsePreScaledImages();
    public static MatrixTransform get_TransformFromDevice();
    public static MatrixTransform get_TransformToDevice();
    public static double get_DeviceDpiX();
    public static double get_DeviceDpiY();
    public static double get_LogicalDpiX();
    public static double get_LogicalDpiY();
    public static bool get_IsScalingRequired();
    public static double get_DeviceToLogicalUnitsScalingFactorX();
    public static double get_DeviceToLogicalUnitsScalingFactorY();
    public static double get_LogicalToDeviceUnitsScalingFactorX();
    public static double get_LogicalToDeviceUnitsScalingFactorY();
    public static double LogicalToDeviceUnitsX(double value);
    public static double LogicalToDeviceUnitsY(double value);
    public static double DeviceToLogicalUnitsX(double value);
    public static double DeviceToLogicalUnitsY(double value);
    public static float LogicalToDeviceUnitsX(float value);
    public static float LogicalToDeviceUnitsY(float value);
    public static int LogicalToDeviceUnitsX(int value);
    public static int LogicalToDeviceUnitsY(int value);
    public static float DeviceToLogicalUnitsX(float value);
    public static float DeviceToLogicalUnitsY(float value);
    public static int DeviceToLogicalUnitsX(int value);
    public static int DeviceToLogicalUnitsY(int value);
    public static double RoundToDeviceUnitsX(double value);
    public static double RoundToDeviceUnitsY(double value);
    [ExtensionAttribute]
public static Padding LogicalToDeviceUnits(Padding logicalPadding);
    [ExtensionAttribute]
public static Point LogicalToDeviceUnits(Point logicalPoint);
    [ExtensionAttribute]
public static Rect LogicalToDeviceUnits(Rect logicalRect);
    [ExtensionAttribute]
public static Size LogicalToDeviceUnits(Size logicalSize);
    [ExtensionAttribute]
public static Thickness LogicalToDeviceUnits(Thickness logicalThickness);
    [ExtensionAttribute]
public static Point DeviceToLogicalUnits(Point devicePoint);
    [ExtensionAttribute]
public static Rect DeviceToLogicalUnits(Rect deviceRect);
    [ExtensionAttribute]
public static Size DeviceToLogicalUnits(Size deviceSize);
    [ExtensionAttribute]
public static Thickness DeviceToLogicalUnits(Thickness deviceThickness);
    [ExtensionAttribute]
public static void SetDeviceLeft(Window window, double deviceLeft);
    [ExtensionAttribute]
public static double GetDeviceLeft(Window window);
    [ExtensionAttribute]
public static void SetDeviceTop(Window window, double deviceTop);
    [ExtensionAttribute]
public static double GetDeviceTop(Window window);
    [ExtensionAttribute]
public static void SetDeviceWidth(Window window, double deviceWidth);
    [ExtensionAttribute]
public static double GetDeviceWidth(Window window);
    [ExtensionAttribute]
public static void SetDeviceHeight(Window window, double deviceHeight);
    [ExtensionAttribute]
public static double GetDeviceHeight(Window window);
    [ExtensionAttribute]
public static Rect GetDeviceRect(Window window);
    [ExtensionAttribute]
public static Size GetDeviceActualSize(FrameworkElement element);
    [ExtensionAttribute]
public static Point LogicalToDeviceUnits(Point logicalPoint);
    [ExtensionAttribute]
public static Size LogicalToDeviceUnits(Size logicalSize);
    [ExtensionAttribute]
public static Rectangle LogicalToDeviceUnits(Rectangle logicalRect);
    [ExtensionAttribute]
public static PointF LogicalToDeviceUnits(PointF logicalPoint);
    [ExtensionAttribute]
public static SizeF LogicalToDeviceUnits(SizeF logicalSize);
    [ExtensionAttribute]
public static RectangleF LogicalToDeviceUnits(RectangleF logicalRect);
    public static void LogicalToDeviceUnits(Bitmap& bitmapImage, ImageScalingMode scalingMode);
    public static void LogicalToDeviceUnits(Bitmap& bitmapImage, Color backgroundColor, ImageScalingMode scalingMode);
    public static void LogicalToDeviceUnits(Image& image, ImageScalingMode scalingMode);
    public static void LogicalToDeviceUnits(Image& image, Color backgroundColor, ImageScalingMode scalingMode);
    public static int get_DpiScalePercentX();
    public static int get_DpiScalePercentY();
    public static double get_PreScaledImageLayoutTransformScaleX();
    public static double get_PreScaledImageLayoutTransformScaleY();
    [ExtensionAttribute]
public static Image CreateDeviceFromLogicalImage(Image logicalImage, ImageScalingMode scalingMode);
    public static ImageSource ScaleLogicalImageForDeviceSize(ImageSource image, Size deviceImageSize, BitmapScalingMode scalingMode);
    [ExtensionAttribute]
public static Image CreateDeviceFromLogicalImage(Image logicalImage, Color backgroundColor, ImageScalingMode scalingMode);
    public static void LogicalToDeviceUnits(Bitmap& imageStrip, Size logicalImageSize, ImageScalingMode scalingMode);
    public static void LogicalToDeviceUnits(Bitmap& imageStrip, Size logicalImageSize, Color backgroundColor, ImageScalingMode scalingMode);
    [ExtensionAttribute]
public static Bitmap CreateDeviceFromLogicalImage(Bitmap logicalBitmapStrip, Size logicalImageSize, ImageScalingMode scalingMode);
    [ExtensionAttribute]
public static Bitmap CreateDeviceFromLogicalImage(Bitmap logicalBitmapStrip, Size logicalImageSize, Color backgroundColor, ImageScalingMode scalingMode);
    public static void LogicalToDeviceUnits(Icon& icon, ImageScalingMode scalingMode);
    [ExtensionAttribute]
public static Icon CreateDeviceFromLogicalImage(Icon logicalIcon, ImageScalingMode scalingMode);
    public static void LogicalToDeviceUnits(ImageList& imageList, ImageScalingMode scalingMode);
    public static void LogicalToDeviceUnits(ImageList& imageList, Color backgroundColor, ImageScalingMode scalingMode);
    [ExtensionAttribute]
public static ImageList CreateDeviceFromLogicalImage(ImageList logicalImageList, ImageScalingMode scalingMode);
    [ExtensionAttribute]
public static ImageList CreateDeviceFromLogicalImage(ImageList logicalImageList, Color backgroundColor, ImageScalingMode scalingMode);
}
public class Microsoft.TeamFoundation.Client.DragDrop : object {
    protected static DragDrop m_instance;
    public static DependencyProperty DragSourceFormatProperty;
    public static DependencyProperty DropTargetFormatsProperty;
    public static DependencyProperty DragDropTemplateProperty;
    public static DependencyProperty DragSourceMoveCommandProperty;
    public static DependencyProperty DropTargetMoveCommandProperty;
    private static DependencyPropertyKey DropSourceFormatPropertyKey;
    public static DependencyProperty DropSourceFormatProperty;
    public static DependencyProperty DropTargetTemplateProperty;
    public static DependencyProperty ContinueDragEventHandlingProperty;
    private static DragDrop();
    public static string GetDragSourceFormat(DependencyObject obj);
    public static void SetDragSourceFormat(DependencyObject obj, string value);
    public static string GetDropTargetFormats(DependencyObject obj);
    public static void SetDropTargetFormats(DependencyObject obj, string value);
    public static DataTemplate GetDragDropTemplate(DependencyObject obj);
    public static void SetDragDropTemplate(DependencyObject obj, DataTemplate value);
    public static ICommand GetDragSourceMoveCommand(DependencyObject obj);
    public static void SetDragSourceMoveCommand(DependencyObject obj, ICommand value);
    public static ICommand GetDropTargetMoveCommand(DependencyObject obj);
    public static void SetDropTargetMoveCommand(DependencyObject obj, ICommand value);
    public static string GetDropSourceFormat(DependencyObject obj);
    protected static void SetDropSourceFormat(DependencyObject obj, string value);
    public static DataTemplate GetDropTargetTemplate(DependencyObject obj);
    public static void SetDropTargetTemplate(DependencyObject obj, DataTemplate value);
    public static bool GetContinueDragEventHandling(DependencyObject obj);
    public static void SetContinueDragEventHandling(DependencyObject obj, bool value);
    private static void DragSourceFormatChanged(DependencyObject obj, DependencyPropertyChangedEventArgs e);
    protected virtual void DragSourceFormatChangedInternal(DependencyObject obj, DependencyPropertyChangedEventArgs e);
    private static void DropTargetFormatsChanged(DependencyObject obj, DependencyPropertyChangedEventArgs e);
    protected virtual void DropTargetFormatsChangedInternal(DependencyObject obj, DependencyPropertyChangedEventArgs e);
    private static void DropTargetTemplateChanged(DependencyObject obj, DependencyPropertyChangedEventArgs e);
    protected virtual void DropTargetTemplateChangedInternal(DependencyObject obj, DependencyPropertyChangedEventArgs e);
}
public class Microsoft.TeamFoundation.Client.DragDropParameters : object {
    [CompilerGeneratedAttribute]
private string <DragSourceFormat>k__BackingField;
    [CompilerGeneratedAttribute]
private object <DraggedObject>k__BackingField;
    public string DragSourceFormat { get; private set; }
    public object DraggedObject { get; private set; }
    public IList DraggedObjects { get; }
    public DragDropParameters(string format, object o);
    [CompilerGeneratedAttribute]
public string get_DragSourceFormat();
    [CompilerGeneratedAttribute]
private void set_DragSourceFormat(string value);
    [CompilerGeneratedAttribute]
public object get_DraggedObject();
    [CompilerGeneratedAttribute]
private void set_DraggedObject(object value);
    public IList get_DraggedObjects();
}
internal class Microsoft.TeamFoundation.Client.ExpanderButton : CheckBox {
    private IContainer components;
    private bool m_expanded;
    private VisualStyleRenderer m_plusMinusRenderer;
    private ToolTip m_tooltip;
    private string m_tooltipText;
    private static int m_boxHeight;
    private static int m_boxWidth;
    private static int m_paddingBetweenBoxAndText;
    private static int m_offSet;
    [CompilerGeneratedAttribute]
private EventHandler`1<CancelEventArgs> ExpandEvent;
    [CompilerGeneratedAttribute]
private EventHandler`1<CancelEventArgs> ContractEvent;
    [CategoryAttribute("Appearance")]
[BrowsableAttribute("True")]
[DefaultValueAttribute("True")]
public bool Expanded { get; public set; }
    private StringFormat TextFormat { get; }
    protected virtual void Dispose(bool disposing);
    public bool get_Expanded();
    public void set_Expanded(bool value);
    [CompilerGeneratedAttribute]
public void add_ExpandEvent(EventHandler`1<CancelEventArgs> value);
    [CompilerGeneratedAttribute]
public void remove_ExpandEvent(EventHandler`1<CancelEventArgs> value);
    [CompilerGeneratedAttribute]
public void add_ContractEvent(EventHandler`1<CancelEventArgs> value);
    [CompilerGeneratedAttribute]
public void remove_ContractEvent(EventHandler`1<CancelEventArgs> value);
    private bool OnExpand();
    private bool OnContract();
    private void Expand(bool bExpand);
    private StringFormat get_TextFormat();
    protected virtual void OnPaint(PaintEventArgs e);
    protected virtual void OnSizeChanged(EventArgs e);
    private void MeasureText(Graphics g, Rectangle& textRect, Size& textSize, Size& unboundTextSize, TextFormatFlags& format);
    private string StripHotKey(string text);
    protected virtual void OnMouseHover(EventArgs e);
    protected virtual void OnMouseLeave(EventArgs e);
    private void ExpanderButton_Click(object sender, EventArgs e);
    protected virtual AccessibleObject CreateAccessibilityInstance();
    private void InitializeComponent();
}
[EditorBrowsableAttribute("1")]
public class Microsoft.TeamFoundation.Client.Expandex : UserControl {
    private Panel m_panel;
    private ExpanderButton m_expander;
    private IContainer components;
    private Size m_expandedPanelSize;
    private int m_heightPad;
    [CategoryAttribute("Appearance")]
[DescriptionAttribute("Is the control expanded or contracted")]
[BrowsableAttribute("True")]
[DefaultValueAttribute("True")]
public bool Expanded { get; public set; }
    [CategoryAttribute("Appearance")]
[DescriptionAttribute("Text value to right of expand/contract button")]
[BrowsableAttribute("True")]
[DesignerSerializationVisibilityAttribute("1")]
public string Text { get; public set; }
    public Panel ExpandedPanel { get; }
    public Size ExpandedPanelSize { get; public set; }
    private int HeightPad { get; }
    protected virtual void Dispose(bool disposing);
    public bool get_Expanded();
    public void set_Expanded(bool value);
    public virtual string get_Text();
    public virtual void set_Text(string value);
    public Panel get_ExpandedPanel();
    public Size get_ExpandedPanelSize();
    public void set_ExpandedPanelSize(Size value);
    public int HeightFromExpandedPanelHeight(int epHeight);
    private void m_expander_ExpandEvent(object sender, CancelEventArgs e);
    private void m_expander_ContractEvent(object sender, CancelEventArgs e);
    protected virtual bool ProcessMnemonic(char charCode);
    private int get_HeightPad();
    private void InitializeComponent();
}
[EditorBrowsableAttribute("1")]
public static class Microsoft.TeamFoundation.Client.ExternalHelpLinks : object {
    private static string BaseForwardLinkUrl;
    public static int ProcessGuidanceWebSiteHelpLink;
    public static int SiteOwnershipHelpLink;
    public static int ConfigurePortal;
    public static int ConfigureProcessGuidance;
    public static int ConfigureDefaultSiteCreationLocation;
    public static int ConfigureReporting;
    public static int ConfigureWebAccess;
    public static int CreateTpcReportFolderHelpLink;
    public static int CreateTpcSharePointSiteHelpLink;
    public static int AddOrRemoveSharepointWebApplication;
    public static int CreateTeamProject;
    public static int TpcAdminPermissions;
    public static int InstructionsForSettingSiteOwner;
    public static int SharePointTfsIntegration;
    public static int ReportingTfsIntegration;
    public static int AnalyticsHelpLink;
    public static int AnalyticsMarketplace;
    public static int ReportingDepricating;
    public static int ReportingDisable;
    public static int UsingSplitterInWitForm;
    public static int HostedLandingPage;
    public static int LearnMoreAboutVso;
    public static int SqlServerReporting;
    public static int LearnMoreProcessModels;
    public static int AnalyticsHelp;
    private static ExternalHelpLinks();
    public static Uri GetUri(int linkId);
    public static string GetHtmlLink(int linkId, string text);
    public static void Launch(int linkId);
}
internal static class Microsoft.TeamFoundation.Client.FederatedAcsConstants : object {
    public static string AcsMetadataRetrievalExceptionText;
    public static string FedAuthCookieName;
}
[EditorBrowsableAttribute("1")]
public class Microsoft.TeamFoundation.Client.FederatedAcsLogon : object {
    private Uri _acsIdentityProviderServiceAddress;
    private EventHandler`1<AuthenticationCompleteEventArgs> _authenticationComplete;
    private Uri _cookieDomainAndPath;
    private CookieCollection _cookieCollection;
    private EventHandler`1<EventArgs> _userAgentComplete;
    private Uri _replyToAddress;
    private LogonState _state;
    private static Uri windowsLiveCookieDomain;
    private static string windowsLiveUISignOutUrl;
    private object _syncLock;
    [CLSCompliantAttribute("False")]
public static UInt32 INTERNET_COOKIE_HTTPONLY;
    public CookieCollection SsoCookieCollection { get; }
    public LogonState State { get; }
    public FederatedAcsLogon(Uri replyToAddress, Uri cookieDomainAndPath, Uri acsIdentityProviderServiceAddress);
    private static FederatedAcsLogon();
    public void add_AuthenticationComplete(EventHandler`1<AuthenticationCompleteEventArgs> value);
    public void remove_AuthenticationComplete(EventHandler`1<AuthenticationCompleteEventArgs> value);
    public void add_UserAgentComplete(EventHandler`1<EventArgs> value);
    public void remove_UserAgentComplete(EventHandler`1<EventArgs> value);
    public CookieCollection get_SsoCookieCollection();
    public LogonState get_State();
    public void Navigated(Uri address);
    public void Navigating(Uri address);
    private void SetAuthenticationComplete();
    private void SetUserAgentComplete();
    public CookieCollection GetFederatedCookies();
    public static CookieCollection GetFederatedCookies(Uri cookieDomainAndPath);
    public static CookieCollection GetFederatedCookies(CookieCollection cookies);
    public static CookieCollection GetAllCookies(Uri cookieDomainAndPath);
    public void DeleteFederatedCookies();
    public static void DeleteFederatedCookies(Uri cookieDomainAndPath);
    public static void DeleteFederatedCookies(Uri cookieDomainAndPath, bool exactDomainMatch);
    public static void DeleteWindowsLiveCookies();
    public static void DeleteAllCookies(Uri cookieDomainAndPath);
    private static Uri[] GetAllCookieDomains(Uri cookieDomainAndPath);
    private static bool InternetGetCookieEx(string url, string cookieName, StringBuilder cookieData, Int32& size, UInt32 flags, IntPtr reserved);
    private static bool InternetSetCookieEx(string url, string cookieName, string cookieData, UInt32 flags, IntPtr reserved);
    public static bool DeleteCookieEx(Uri cookiePath, string cookieName);
    public static List`1<Cookie> GetCookieEx(Uri cookiePath, string cookieName);
}
[ObsoleteAttribute("This class is deprecated and will be removed in a future release. See Microsoft.VisualStudio.Services.Common.FederatedCredential instead.", "False")]
public abstract class Microsoft.TeamFoundation.Client.FederatedCredential : IssuedTokenCredential {
    internal FederatedCredential(IssuedToken initialToken);
    internal virtual bool IsAuthenticationChallenge(HttpWebResponse webResponse);
}
[EditorBrowsableAttribute("1")]
public class Microsoft.TeamFoundation.Client.FocusableToolStrip : ToolStrip {
    private SelectToolStripLabel m_selector;
    private ToolStripItem GetSelectedItem();
    public void SelectToolStrip();
    protected virtual bool ProcessDialogKey(Keys keyData);
}
internal class Microsoft.TeamFoundation.Client.FocusRestorer : object {
    private IntPtr m_focusWnd;
    private sealed virtual override void System.IDisposable.Dispose();
}
[EditorBrowsableAttribute("1")]
public class Microsoft.TeamFoundation.Client.FocusToolbarEventArgs : object {
    private bool m_handled;
    public bool Handled { get; public set; }
    public void set_Handled(bool value);
    public bool get_Handled();
}
[EditorBrowsableAttribute("1")]
public class Microsoft.TeamFoundation.Client.FocusToolbarEventHandler : MulticastDelegate {
    public FocusToolbarEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, FocusToolbarEventArgs args);
    public virtual IAsyncResult BeginInvoke(object sender, FocusToolbarEventArgs args, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
[EditorBrowsableAttribute("1")]
public class Microsoft.TeamFoundation.Client.FormUtils : object {
    public static bool HandleContextMenuDispatch(Control parent, Message m);
    public static bool HandleContextMenuDispatch(Control parent, Control control, Point point, bool isKeyboardInvoke);
    public static Point ComputeContextMenuPositionForKeyboard(Control control, int x, int y, bool keyboardInvoke);
    public static Point AdjustToClientRect(int menuX, int menuY, Rectangle clientRect);
    internal static bool IsTypeOrDerived(Type type, Type typeCompare);
    internal static bool IsControlType(Type type);
    [ConditionalAttribute("DEBUG")]
internal static void CheckControlConstructorCalls();
    internal static bool IsDesignMode(Control ctl);
    public static bool DoAnyWishToCancel(EventHandler`1<T> handlers, object sender, T e);
    public static Control ActiveLeafControl(ContainerControl control);
    public static bool IsMnemonicMsg(Message msg);
    public static bool IsWindowNavigationMsg(Message msg);
}
[CompilerGeneratedAttribute]
internal static class Microsoft.TeamFoundation.Client.GeneratedVersionInfo : object {
    public static string MajorVersion;
    public static string MinorVersion;
    public static string BuildVersion;
    public static string PatchVersion;
    public static string ProductVersion;
    public static string AssemblyMajorVersion;
    public static string AssemblyMinorVersion;
    public static string AssemblyBuildVersion;
    public static string AssemblyPatchVersion;
    public static string AssemblyVersion;
    public static string FileMajorVersion;
    public static string FileMinorVersion;
    public static string FileBuildVersion;
    public static string FilePatchVersion;
    public static string FileVersion;
    public static string VisualStudioMajorVersion;
    public static string VisualStudioVersion;
    public static string TfsMajorVersion;
    public static string TfsMinorVersion;
    public static string TfsProductVersion;
    public static int TfsUpdateNumber;
    public static string TfsInstallDirectory;
}
public class Microsoft.TeamFoundation.Client.GzipResourceReader : object {
    private ResourceReader m_resourceReader;
    public GzipResourceReader(Stream stream);
    private sealed virtual override void System.Resources.IResourceReader.Close();
    private sealed virtual override IDictionaryEnumerator System.Resources.IResourceReader.GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    private sealed virtual override void System.IDisposable.Dispose();
}
internal static class Microsoft.TeamFoundation.Client.HelpUtilities : object {
    private static string HelpKey;
    private static string AppRoot;
    private static string HlpViewerExe;
    private static string CatalogName;
    private static string LaunchingApp;
    private static string VsHelpKey;
    private static string UseOnlineHelp;
    private static string BaseOnlineHelpUrl;
    public static void LaunchHelpTopic(string keyword);
    private static bool LaunchLocalHelp(string keyword);
    private static void LaunchOnlineHelp(string keyword);
    private static bool GetOnlineStatus();
    private static string GetHelpViewerPath();
    private static string GetHelpAppRoot();
}
internal class Microsoft.TeamFoundation.Client.HttpWebRequestWrapper : ValueType {
    private HttpWebRequest m_request;
    public IHttpHeaders Headers { get; }
    public Uri RequestUri { get; }
    public IDictionary`2<string, object> Properties { get; }
    public HttpWebRequestWrapper(HttpWebRequest request);
    public sealed virtual IHttpHeaders get_Headers();
    public sealed virtual Uri get_RequestUri();
    public sealed virtual IDictionary`2<string, object> get_Properties();
    private sealed virtual override IEnumerable`1<string> Microsoft.VisualStudio.Services.Common.IHttpHeaders.GetValues(string name);
    private sealed virtual override void Microsoft.VisualStudio.Services.Common.IHttpHeaders.SetValue(string name, string value);
    private sealed virtual override bool Microsoft.VisualStudio.Services.Common.IHttpHeaders.TryGetValues(string name, IEnumerable`1& values);
}
internal class Microsoft.TeamFoundation.Client.HttpWebResponseWrapper : ValueType {
    private HttpWebResponse m_response;
    public IHttpHeaders Headers { get; }
    public HttpStatusCode StatusCode { get; }
    public HttpWebResponseWrapper(HttpWebResponse response);
    public sealed virtual IHttpHeaders get_Headers();
    public sealed virtual HttpStatusCode get_StatusCode();
    private sealed virtual override IEnumerable`1<string> Microsoft.VisualStudio.Services.Common.IHttpHeaders.GetValues(string name);
    private sealed virtual override void Microsoft.VisualStudio.Services.Common.IHttpHeaders.SetValue(string name, string value);
    private sealed virtual override bool Microsoft.VisualStudio.Services.Common.IHttpHeaders.TryGetValues(string name, IEnumerable`1& values);
}
public interface Microsoft.TeamFoundation.Client.IArtifactProvider {
    public abstract virtual XmlDocument GetArtifactDocument(Uri artifactUri);
}
public interface Microsoft.TeamFoundation.Client.ICancelableAsyncResult {
    public bool IsCanceled { get; }
    public abstract virtual void Cancel();
    public abstract virtual bool get_IsCanceled();
}
public interface Microsoft.TeamFoundation.Client.IClientContext {
    public Guid Id { get; }
    public string Command { get; }
    public abstract virtual Guid get_Id();
    public abstract virtual string get_Command();
}
[ComVisibleAttribute("True")]
public interface Microsoft.TeamFoundation.Client.IClientLinking {
    public abstract virtual bool ExecuteDefaultAction(string artifactUri, string contextInfo);
}
[EditorBrowsableAttribute("1")]
public interface Microsoft.TeamFoundation.Client.IComboHostedControl {
    public abstract virtual string GetSelectedText(Int32& caretPos);
    public abstract virtual bool Filter(string text);
    public abstract virtual Size GetDesiredControlSize();
    public abstract virtual Size GetMinimumControlSize();
    public abstract virtual void HandleComboControlFocusLost();
}
[EditorBrowsableAttribute("1")]
public interface Microsoft.TeamFoundation.Client.IContextMenuDispatch {
    public abstract virtual bool ShowContextMenuForControl(Control control, Point position, bool isKeyboardInvoke);
}
[ObsoleteAttribute("This class is deprecated and will be removed in a future release. See Microsoft.VisualStudio.Services.Common.VssCredentials instead.", "False")]
public interface Microsoft.TeamFoundation.Client.IConvertibleToVssCredential {
    public abstract virtual FederatedCredential ConvertToVssCredential();
}
public interface Microsoft.TeamFoundation.Client.ICredentialsProvider {
    public abstract virtual ICredentials GetCredentials(Uri uri, ICredentials failedCredentials);
    public abstract virtual void NotifyCredentialsAuthenticated(Uri uri);
}
[EditorBrowsableAttribute("1")]
public interface Microsoft.TeamFoundation.Client.ICssDataProvider {
    public abstract virtual CssNodeCollection GetChildNodes(CssNode parentNode);
    public abstract virtual string GetInitialPath();
    public abstract virtual string GetDefaultRootNodeName();
}
[DataContractAttribute]
internal class Microsoft.TeamFoundation.Client.IdentityManagement.IdentitiesGetMruRequestModel : object {
    [CompilerGeneratedAttribute]
private IList`1<string> <OperationScopes>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<string> <Properties>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<string> <FilterByAncestorEntityIds>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<string> <FilterByEntityIds>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <MaxItemsCount>k__BackingField;
    [DataMemberAttribute]
public IList`1<string> OperationScopes { get; public set; }
    [DataMemberAttribute]
public IList`1<string> Properties { get; public set; }
    [DataMemberAttribute]
public IList`1<string> FilterByAncestorEntityIds { get; public set; }
    [DataMemberAttribute]
public IList`1<string> FilterByEntityIds { get; public set; }
    [DataMemberAttribute]
public Nullable`1<int> MaxItemsCount { get; public set; }
    [CompilerGeneratedAttribute]
public IList`1<string> get_OperationScopes();
    [CompilerGeneratedAttribute]
public void set_OperationScopes(IList`1<string> value);
    [CompilerGeneratedAttribute]
public IList`1<string> get_Properties();
    [CompilerGeneratedAttribute]
public void set_Properties(IList`1<string> value);
    [CompilerGeneratedAttribute]
public IList`1<string> get_FilterByAncestorEntityIds();
    [CompilerGeneratedAttribute]
public void set_FilterByAncestorEntityIds(IList`1<string> value);
    [CompilerGeneratedAttribute]
public IList`1<string> get_FilterByEntityIds();
    [CompilerGeneratedAttribute]
public void set_FilterByEntityIds(IList`1<string> value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_MaxItemsCount();
    [CompilerGeneratedAttribute]
public void set_MaxItemsCount(Nullable`1<int> value);
}
[DataContractAttribute]
internal class Microsoft.TeamFoundation.Client.IdentityManagement.IdentitiesGetMruResponseModel : object {
    [CompilerGeneratedAttribute]
private IList`1<Identity> <MruIdentities>k__BackingField;
    [DataMemberAttribute]
public IList`1<Identity> MruIdentities { get; public set; }
    [CompilerGeneratedAttribute]
public IList`1<Identity> get_MruIdentities();
    [CompilerGeneratedAttribute]
public void set_MruIdentities(IList`1<Identity> value);
}
[DataContractAttribute]
internal class Microsoft.TeamFoundation.Client.IdentityManagement.IdentitiesSearchRequestModel : object {
    [CompilerGeneratedAttribute]
private IList`1<string> <IdentityTypes>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<string> <OperationScopes>k__BackingField;
    [CompilerGeneratedAttribute]
private SearchOptions <Options>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Query>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<string> <FilterByAncestorEntityIds>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<string> <FilterByEntityIds>k__BackingField;
    [CompilerGeneratedAttribute]
private string <QueryTypeHint>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<string> <Properties>k__BackingField;
    [CompilerGeneratedAttribute]
private string <PagingToken>k__BackingField;
    [DataMemberAttribute]
public IList`1<string> IdentityTypes { get; public set; }
    [DataMemberAttribute]
public IList`1<string> OperationScopes { get; public set; }
    [DataMemberAttribute]
public SearchOptions Options { get; public set; }
    [DataMemberAttribute]
public string Query { get; public set; }
    [DataMemberAttribute]
public IList`1<string> FilterByAncestorEntityIds { get; public set; }
    [DataMemberAttribute]
public IList`1<string> FilterByEntityIds { get; public set; }
    [DataMemberAttribute]
public string QueryTypeHint { get; public set; }
    [DataMemberAttribute]
public IList`1<string> Properties { get; public set; }
    [DataMemberAttribute]
public string PagingToken { get; public set; }
    [CompilerGeneratedAttribute]
public IList`1<string> get_IdentityTypes();
    [CompilerGeneratedAttribute]
public void set_IdentityTypes(IList`1<string> value);
    [CompilerGeneratedAttribute]
public IList`1<string> get_OperationScopes();
    [CompilerGeneratedAttribute]
public void set_OperationScopes(IList`1<string> value);
    [CompilerGeneratedAttribute]
public SearchOptions get_Options();
    [CompilerGeneratedAttribute]
public void set_Options(SearchOptions value);
    [CompilerGeneratedAttribute]
public string get_Query();
    [CompilerGeneratedAttribute]
public void set_Query(string value);
    [CompilerGeneratedAttribute]
public IList`1<string> get_FilterByAncestorEntityIds();
    [CompilerGeneratedAttribute]
public void set_FilterByAncestorEntityIds(IList`1<string> value);
    [CompilerGeneratedAttribute]
public IList`1<string> get_FilterByEntityIds();
    [CompilerGeneratedAttribute]
public void set_FilterByEntityIds(IList`1<string> value);
    [CompilerGeneratedAttribute]
public string get_QueryTypeHint();
    [CompilerGeneratedAttribute]
public void set_QueryTypeHint(string value);
    [CompilerGeneratedAttribute]
public IList`1<string> get_Properties();
    [CompilerGeneratedAttribute]
public void set_Properties(IList`1<string> value);
    [CompilerGeneratedAttribute]
public string get_PagingToken();
    [CompilerGeneratedAttribute]
public void set_PagingToken(string value);
}
[DataContractAttribute]
internal class Microsoft.TeamFoundation.Client.IdentityManagement.IdentitiesSearchResponseModel : object {
    [CompilerGeneratedAttribute]
private IList`1<QueryTokenResult> <Results>k__BackingField;
    [DataMemberAttribute]
public IList`1<QueryTokenResult> Results { get; public set; }
    [CompilerGeneratedAttribute]
public IList`1<QueryTokenResult> get_Results();
    [CompilerGeneratedAttribute]
public void set_Results(IList`1<QueryTokenResult> value);
}
[DataContractAttribute]
internal class Microsoft.TeamFoundation.Client.IdentityManagement.Identity : object {
    [CompilerGeneratedAttribute]
private string <EntityId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <EntityType>k__BackingField;
    [CompilerGeneratedAttribute]
private string <OriginDirectory>k__BackingField;
    [CompilerGeneratedAttribute]
private string <OriginId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <LocalDirectory>k__BackingField;
    [CompilerGeneratedAttribute]
private string <LocalId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DisplayName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ScopeName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <SamAccountName>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <Active>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<SubjectDescriptor> <SubjectDescriptor>k__BackingField;
    [CompilerGeneratedAttribute]
private string <SignInAddress>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <IsMru>k__BackingField;
    [DataMemberAttribute]
public string EntityId { get; public set; }
    [DataMemberAttribute]
public string EntityType { get; public set; }
    [DataMemberAttribute]
public string OriginDirectory { get; public set; }
    [DataMemberAttribute]
public string OriginId { get; public set; }
    [DataMemberAttribute]
public string LocalDirectory { get; public set; }
    [DataMemberAttribute]
public string LocalId { get; public set; }
    [DataMemberAttribute]
public string DisplayName { get; public set; }
    [DataMemberAttribute]
public string ScopeName { get; public set; }
    [DataMemberAttribute]
public string SamAccountName { get; public set; }
    [DataMemberAttribute]
public Nullable`1<bool> Active { get; public set; }
    [DataMemberAttribute]
public Nullable`1<SubjectDescriptor> SubjectDescriptor { get; public set; }
    [DataMemberAttribute]
public string SignInAddress { get; public set; }
    [DataMemberAttribute]
public Nullable`1<bool> IsMru { get; public set; }
    [CompilerGeneratedAttribute]
public string get_EntityId();
    [CompilerGeneratedAttribute]
public void set_EntityId(string value);
    [CompilerGeneratedAttribute]
public string get_EntityType();
    [CompilerGeneratedAttribute]
public void set_EntityType(string value);
    [CompilerGeneratedAttribute]
public string get_OriginDirectory();
    [CompilerGeneratedAttribute]
public void set_OriginDirectory(string value);
    [CompilerGeneratedAttribute]
public string get_OriginId();
    [CompilerGeneratedAttribute]
public void set_OriginId(string value);
    [CompilerGeneratedAttribute]
public string get_LocalDirectory();
    [CompilerGeneratedAttribute]
public void set_LocalDirectory(string value);
    [CompilerGeneratedAttribute]
public string get_LocalId();
    [CompilerGeneratedAttribute]
public void set_LocalId(string value);
    [CompilerGeneratedAttribute]
public string get_DisplayName();
    [CompilerGeneratedAttribute]
public void set_DisplayName(string value);
    [CompilerGeneratedAttribute]
public string get_ScopeName();
    [CompilerGeneratedAttribute]
public void set_ScopeName(string value);
    [CompilerGeneratedAttribute]
public string get_SamAccountName();
    [CompilerGeneratedAttribute]
public void set_SamAccountName(string value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_Active();
    [CompilerGeneratedAttribute]
public void set_Active(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<SubjectDescriptor> get_SubjectDescriptor();
    [CompilerGeneratedAttribute]
public void set_SubjectDescriptor(Nullable`1<SubjectDescriptor> value);
    [CompilerGeneratedAttribute]
public string get_SignInAddress();
    [CompilerGeneratedAttribute]
public void set_SignInAddress(string value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_IsMru();
    [CompilerGeneratedAttribute]
public void set_IsMru(Nullable`1<bool> value);
}
internal class Microsoft.TeamFoundation.Client.IdentityManagement.IdentityPickerHttpClient : VssHttpClientBase {
    public IdentityPickerHttpClient(Uri baseUrl, VssCredentials credentials);
    public IdentityPickerHttpClient(Uri baseUrl, VssCredentials credentials, VssHttpRequestSettings settings);
    public IdentityPickerHttpClient(Uri baseUrl, VssCredentials credentials, DelegatingHandler[] handlers);
    public IdentityPickerHttpClient(Uri baseUrl, VssCredentials credentials, VssHttpRequestSettings settings, DelegatingHandler[] handlers);
    public IdentityPickerHttpClient(Uri baseUrl, HttpMessageHandler pipeline, bool disposeHandler);
    public virtual Task`1<IdentitiesSearchResponseModel> GetIdentitiesAsync(IdentitiesSearchRequestModel identitiesRequest, object userState, CancellationToken cancellationToken);
    public virtual Task`1<IdentitiesGetMruResponseModel> GetMruAsync(string objectId, string featureId, IdentitiesGetMruRequestModel getRequestParams, object userState, CancellationToken cancellationToken);
}
[EditorBrowsableAttribute("1")]
public class Microsoft.TeamFoundation.Client.IdentityManagement.IdentityPickerService : object {
    [CompilerGeneratedAttribute]
private TfsTeamProjectCollection <Collection>k__BackingField;
    private TfsTeamProjectCollection Collection { get; private set; }
    [CompilerGeneratedAttribute]
private TfsTeamProjectCollection get_Collection();
    [CompilerGeneratedAttribute]
private void set_Collection(TfsTeamProjectCollection value);
    public sealed virtual void Initialize(TfsTeamProjectCollection projectCollection);
    [AsyncStateMachineAttribute("Microsoft.TeamFoundation.Client.IdentityManagement.IdentityPickerService/<SearchIdentitiesAsync>d__5")]
public Task`1<IEnumerable`1<IdentityRef>> SearchIdentitiesAsync(string query, bool includeGroups);
    [AsyncStateMachineAttribute("Microsoft.TeamFoundation.Client.IdentityManagement.IdentityPickerService/<GetMruAsync>d__6")]
public Task`1<IEnumerable`1<IdentityRef>> GetMruAsync();
    private IdentityRef ConvertToIdentityRef(Identity identity);
    [CompilerGeneratedAttribute]
private IdentityRef <SearchIdentitiesAsync>b__5_1(Identity mi);
    [CompilerGeneratedAttribute]
private IdentityRef <GetMruAsync>b__6_0(Identity mi);
}
[DataContractAttribute]
internal class Microsoft.TeamFoundation.Client.IdentityManagement.QueryTokenResult : object {
    [CompilerGeneratedAttribute]
private string <QueryToken>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<Identity> <Identities>k__BackingField;
    [DataMemberAttribute]
public string QueryToken { get; public set; }
    [DataMemberAttribute]
public IList`1<Identity> Identities { get; public set; }
    [CompilerGeneratedAttribute]
public string get_QueryToken();
    [CompilerGeneratedAttribute]
public void set_QueryToken(string value);
    [CompilerGeneratedAttribute]
public IList`1<Identity> get_Identities();
    [CompilerGeneratedAttribute]
public void set_Identities(IList`1<Identity> value);
}
[DataContractAttribute]
internal class Microsoft.TeamFoundation.Client.IdentityManagement.SearchOptions : object {
    [CompilerGeneratedAttribute]
private Dictionary`2<string, object> <Options>k__BackingField;
    [DataMemberAttribute]
public Dictionary`2<string, object> Options { get; public set; }
    [CompilerGeneratedAttribute]
public Dictionary`2<string, object> get_Options();
    [CompilerGeneratedAttribute]
public void set_Options(Dictionary`2<string, object> value);
}
public enum Microsoft.TeamFoundation.Client.ImageScalingMode : Enum {
    public int value__;
    public static ImageScalingMode Default;
    public static ImageScalingMode BorderOnly;
    public static ImageScalingMode NearestNeighbor;
    public static ImageScalingMode Bilinear;
    public static ImageScalingMode Bicubic;
    public static ImageScalingMode HighQualityBilinear;
    public static ImageScalingMode HighQualityBicubic;
    public static ImageScalingMode MixedNearestNeighborHighQualityBicubic;
}
public class Microsoft.TeamFoundation.Client.InformationBar : BorderPanel {
    [CompilerGeneratedAttribute]
private LinkLabelLinkClickedEventHandler LabelLinkClicked;
    private LinkLabel m_labelText;
    private Label m_progressLabel;
    private int m_maxHeight;
    private int m_progressBarValue;
    private ProgressBar m_progressBar;
    private Panel m_progressPanel;
    private IconType m_iconType;
    private PictureBox m_icon;
    private Color m_warningBackColor;
    private Color m_warningForeColor;
    private Color m_infoBackColor;
    private Color m_infoForeColor;
    private Color m_linkForeColor;
    private static ImageList s_images;
    private static object s_imagesLock;
    private static Dictionary`2<int, Image> s_imagesCache;
    private bool m_resizing;
    private bool m_wrapText;
    private static string cInformationBarImages;
    public Color WarningBackColor { get; public set; }
    public Color WarningForeColor { get; public set; }
    public Color InfoBackColor { get; public set; }
    public Color InfoForeColor { get; public set; }
    public Color LinkForeColor { get; public set; }
    public string Text { get; public set; }
    public string ProgressText { get; public set; }
    public IconType Icon { get; public set; }
    public int ProgressBarValue { get; public set; }
    public Size PreferredSize { get; }
    public int AutoGrowMaxHeight { get; public set; }
    public bool WrapText { get; public set; }
    public LinkCollection LabelLinks { get; }
    internal Panel ProgressBarPanelInternal { get; }
    private static InformationBar();
    private void m_progressPanel_Resize(object sender, EventArgs e);
    private void InitControlColors();
    private void UpdateControlColors();
    public void StartMarquee(int speed);
    public void StopMarquee();
    private void OnLabelLinkClicked(object sender, LinkLabelLinkClickedEventArgs e);
    protected virtual void OnResize(EventArgs e);
    private void AdjustHeightToText();
    private void UpdateProgress();
    private void UpdateIcon();
    private static Image GetImageFromCache(int index);
    public Color get_WarningBackColor();
    public void set_WarningBackColor(Color value);
    public Color get_WarningForeColor();
    public void set_WarningForeColor(Color value);
    public Color get_InfoBackColor();
    public void set_InfoBackColor(Color value);
    public Color get_InfoForeColor();
    public void set_InfoForeColor(Color value);
    public Color get_LinkForeColor();
    public void set_LinkForeColor(Color value);
    public virtual string get_Text();
    public virtual void set_Text(string value);
    public string get_ProgressText();
    public void set_ProgressText(string value);
    public IconType get_Icon();
    public void set_Icon(IconType value);
    public int get_ProgressBarValue();
    public void set_ProgressBarValue(int value);
    public Size get_PreferredSize();
    public int get_AutoGrowMaxHeight();
    public void set_AutoGrowMaxHeight(int value);
    public bool get_WrapText();
    public void set_WrapText(bool value);
    public LinkCollection get_LabelLinks();
    [CompilerGeneratedAttribute]
public void add_LabelLinkClicked(LinkLabelLinkClickedEventHandler value);
    [CompilerGeneratedAttribute]
public void remove_LabelLinkClicked(LinkLabelLinkClickedEventHandler value);
    internal Panel get_ProgressBarPanelInternal();
    [CompilerGeneratedAttribute]
private void <OnResize>b__9_0();
}
[EditorBrowsableAttribute("1")]
public class Microsoft.TeamFoundation.Client.Internal.AutoWaitCursor : WaitCursor {
}
[EditorBrowsableAttribute("1")]
public static class Microsoft.TeamFoundation.Client.Internal.ClientResources : object {
    private static ResourceManager s_resMgr;
    public static ResourceManager Manager { get; }
    private static ClientResources();
    public static ResourceManager get_Manager();
    private static string Get(string resourceName);
    private static string Get(string resourceName, CultureInfo culture);
    public static int GetInt(string resourceName);
    public static int GetInt(string resourceName, CultureInfo culture);
    public static bool GetBool(string resourceName);
    public static bool GetBool(string resourceName, CultureInfo culture);
    private static string Format(string resourceName, Object[] args);
    private static string Format(string resourceName, CultureInfo culture, Object[] args);
    public static string AnswerAll();
    public static string AnswerAll(CultureInfo culture);
    public static string AnswerNo();
    public static string AnswerNo(CultureInfo culture);
    public static string AnswerYes();
    public static string AnswerYes(CultureInfo culture);
    public static string AnswerAllFull();
    public static string AnswerAllFull(CultureInfo culture);
    public static string AnswerNoFull();
    public static string AnswerNoFull(CultureInfo culture);
    public static string AnswerYesFull();
    public static string AnswerYesFull(CultureInfo culture);
    public static string Yes();
    public static string Yes(CultureInfo culture);
    public static string No();
    public static string No(CultureInfo culture);
    public static string BasicAuthenticationRequiresSsl();
    public static string BasicAuthenticationRequiresSsl(CultureInfo culture);
    public static string CannotGetTempFileName(object arg0);
    public static string CannotGetTempFileName(object arg0, CultureInfo culture);
    public static string CannotModifyBuiltinService(object arg0);
    public static string CannotModifyBuiltinService(object arg0, CultureInfo culture);
    public static string ComboTreeHelpText();
    public static string ComboTreeHelpText(CultureInfo culture);
    public static string CommandCanceled();
    public static string CommandCanceled(CultureInfo culture);
    public static string CommandFileLineTooLongWarning(object arg0);
    public static string CommandFileLineTooLongWarning(object arg0, CultureInfo culture);
    public static string ContentsOfFileTooBig(object arg0, object arg1);
    public static string ContentsOfFileTooBig(object arg0, object arg1, CultureInfo culture);
    public static string CouldNotParseParameter(object arg0, object arg1);
    public static string CouldNotParseParameter(object arg0, object arg1, CultureInfo culture);
    public static string DoesNotAcceptAValue(object arg0);
    public static string DoesNotAcceptAValue(object arg0, CultureInfo culture);
    public static string DuplicateOption(object arg0);
    public static string DuplicateOption(object arg0, CultureInfo culture);
    public static string EmptyStringNotAllowed();
    public static string EmptyStringNotAllowed(CultureInfo culture);
    public static string ErrorTitle();
    public static string ErrorTitle(CultureInfo culture);
    public static string ExceptionCaption();
    public static string ExceptionCaption(CultureInfo culture);
    public static string ExitCode(object arg0);
    public static string ExitCode(object arg0, CultureInfo culture);
    public static string ServerOptionIsDeprecated(object arg0);
    public static string ServerOptionIsDeprecated(object arg0, CultureInfo culture);
    public static string ExtraCommaInOption(object arg0);
    public static string ExtraCommaInOption(object arg0, CultureInfo culture);
    public static string InvalidOptionCombination(object arg0, object arg1);
    public static string InvalidOptionCombination(object arg0, object arg1, CultureInfo culture);
    public static string MissingAssociatedOption(object arg0, object arg1);
    public static string MissingAssociatedOption(object arg0, object arg1, CultureInfo culture);
    public static string InvalidOptionValue(object arg0, object arg1);
    public static string InvalidOptionValue(object arg0, object arg1, CultureInfo culture);
    public static string InvalidResponse();
    public static string InvalidResponse(CultureInfo culture);
    public static string MissingOptionValue(object arg0);
    public static string MissingOptionValue(object arg0, CultureInfo culture);
    public static string NoRootFolder();
    public static string NoRootFolder(CultureInfo culture);
    public static string PressEnterKey();
    public static string PressEnterKey(CultureInfo culture);
    public static string QuestionYNSuffix();
    public static string QuestionYNSuffix(CultureInfo culture);
    public static string QuestionYNASuffix();
    public static string QuestionYNASuffix(CultureInfo culture);
    public static string ServerNameNotValid(object arg0);
    public static string ServerNameNotValid(object arg0, CultureInfo culture);
    public static string ServiceNotRegistered(object arg0);
    public static string ServiceNotRegistered(object arg0, CultureInfo culture);
    public static string StandardErrorDlgTitle();
    public static string StandardErrorDlgTitle(CultureInfo culture);
    public static string ThreadingMustBeSTA();
    public static string ThreadingMustBeSTA(CultureInfo culture);
    public static string UICredProvider_MessageText();
    public static string UICredProvider_MessageText(CultureInfo culture);
    public static string UICredProvider_TitleText(object arg0);
    public static string UICredProvider_TitleText(object arg0, CultureInfo culture);
    public static string UnrecognizedOption(object arg0);
    public static string UnrecognizedOption(object arg0, CultureInfo culture);
    public static string ValueLengthExceedsMaxForOption(object arg0, object arg1);
    public static string ValueLengthExceedsMaxForOption(object arg0, object arg1, CultureInfo culture);
    public static string WrongNumberOfArgsForBuiltIn(object arg0);
    public static string WrongNumberOfArgsForBuiltIn(object arg0, CultureInfo culture);
    public static string InformationBarImages();
    public static string InformationBarImages(CultureInfo culture);
    public static string FileTypeFilter();
    public static string FileTypeFilter(CultureInfo culture);
    public static string ClientCertificateMissing(object arg0);
    public static string ClientCertificateMissing(object arg0, CultureInfo culture);
    public static string SmartCardMissing(object arg0);
    public static string SmartCardMissing(object arg0, CultureInfo culture);
    public static string ClientCertificateNoPermission(object arg0);
    public static string ClientCertificateNoPermission(object arg0, CultureInfo culture);
    public static string ClientCertificateErrorReadingStore(object arg0);
    public static string ClientCertificateErrorReadingStore(object arg0, CultureInfo culture);
    public static string ClientCertificatesEnabledDisabled(object arg0);
    public static string ClientCertificatesEnabledDisabled(object arg0, CultureInfo culture);
    public static string ClientCertificatesUsingAny();
    public static string ClientCertificatesUsingAny(CultureInfo culture);
    public static string ClientCertificatesUsingSpecific();
    public static string ClientCertificatesUsingSpecific(CultureInfo culture);
    public static string ClientCertificatesAffectedByMachineSettings();
    public static string ClientCertificatesAffectedByMachineSettings(CultureInfo culture);
    public static string NullArtifactUrlInUrlList();
    public static string NullArtifactUrlInUrlList(CultureInfo culture);
    public static string MissingOption(object arg0);
    public static string MissingOption(object arg0, CultureInfo culture);
    public static string ProcessIdentifierFormat(object arg0, object arg1, object arg2);
    public static string ProcessIdentifierFormat(object arg0, object arg1, object arg2, CultureInfo culture);
    public static string TfsConnectDialogTitleConnectToServer();
    public static string TfsConnectDialogTitleConnectToServer(CultureInfo culture);
    public static string TfsConnectDialogSelectServerToViewCollections();
    public static string TfsConnectDialogSelectServerToViewCollections(CultureInfo culture);
    public static string TfsConnectDialogSelectCollectionToViewProjects();
    public static string TfsConnectDialogSelectCollectionToViewProjects(CultureInfo culture);
    public static string TfsConnectDialogWorking();
    public static string TfsConnectDialogWorking(CultureInfo culture);
    public static string TfsConnectDialogLegacyServer(object arg0);
    public static string TfsConnectDialogLegacyServer(object arg0, CultureInfo culture);
    public static string TfsConnectDialogRefresh();
    public static string TfsConnectDialogRefresh(CultureInfo culture);
    public static string TfsConnectDialogActionLinkSeparator();
    public static string TfsConnectDialogActionLinkSeparator(CultureInfo culture);
    public static string TfsConnectDialogSupplyCredentials();
    public static string TfsConnectDialogSupplyCredentials(CultureInfo culture);
    public static string DomainNameAlreadyExists(object arg0);
    public static string DomainNameAlreadyExists(object arg0, CultureInfo culture);
    public static string DomainNameAlreadyExistsTitle();
    public static string DomainNameAlreadyExistsTitle(CultureInfo culture);
    public static string RemoveServer(object arg0);
    public static string RemoveServer(object arg0, CultureInfo culture);
    public static string RemoveServerTitle();
    public static string RemoveServerTitle(CultureInfo culture);
    public static string ServerNameEmpty();
    public static string ServerNameEmpty(CultureInfo culture);
    public static string InvalidServerName();
    public static string InvalidServerName(CultureInfo culture);
    public static string InvalidPortNumber();
    public static string InvalidPortNumber(CultureInfo culture);
    public static string ConnectToTfs_NoPermission(object arg0, object arg1);
    public static string ConnectToTfs_NoPermission(object arg0, object arg1, CultureInfo culture);
    public static string ConnectToTfs_AccessCheck(object arg0, object arg1);
    public static string ConnectToTfs_AccessCheck(object arg0, object arg1, CultureInfo culture);
    public static string ConnectToTfs_UnableToConnect(object arg0);
    public static string ConnectToTfs_UnableToConnect(object arg0, CultureInfo culture);
    public static string ConnectToTfs_UnExpected(object arg0);
    public static string ConnectToTfs_UnExpected(object arg0, CultureInfo culture);
    public static string ConnectToTfs_AddServer_UnableToConnect(object arg0, object arg1);
    public static string ConnectToTfs_AddServer_UnableToConnect(object arg0, object arg1, CultureInfo culture);
    public static string ConnectToTfs_AddServer_UnableToConnect_WithTechnicalInfo(object arg0, object arg1, object arg2);
    public static string ConnectToTfs_AddServer_UnableToConnect_WithTechnicalInfo(object arg0, object arg1, object arg2, CultureInfo culture);
    public static string ConnectToTfs_Unknown(object arg0, object arg1);
    public static string ConnectToTfs_Unknown(object arg0, object arg1, CultureInfo culture);
    public static string ConnectToTfs_TrustFailure(object arg0);
    public static string ConnectToTfs_TrustFailure(object arg0, CultureInfo culture);
    public static string ConnectDialogImages();
    public static string ConnectDialogImages(CultureInfo culture);
    public static string TFHost_ErrorWritingTEConfigFile();
    public static string TFHost_ErrorWritingTEConfigFile(CultureInfo culture);
    public static string RegisteredServersCannotFindCollection(object arg0);
    public static string RegisteredServersCannotFindCollection(object arg0, CultureInfo culture);
    public static string AddDomainDialogAddingCollection();
    public static string AddDomainDialogAddingCollection(CultureInfo culture);
    public static string AddDomainDialog_InvalidServer();
    public static string AddDomainDialog_InvalidServer(CultureInfo culture);
    public static string AddDomainDialog_InvalidPort();
    public static string AddDomainDialog_InvalidPort(CultureInfo culture);
    public static string ErrorCaption();
    public static string ErrorCaption(CultureInfo culture);
    public static string InformationCaption();
    public static string InformationCaption(CultureInfo culture);
    public static string WarningCaption();
    public static string WarningCaption(CultureInfo culture);
    public static string UnregisteredCollectionInvalidMethodError();
    public static string UnregisteredCollectionInvalidMethodError(CultureInfo culture);
    public static string InvalidConnectionString(object arg0);
    public static string InvalidConnectionString(object arg0, CultureInfo culture);
    public static string MissingConnectionString(object arg0);
    public static string MissingConnectionString(object arg0, CultureInfo culture);
    public static string CollectionServicingJobDidNotSucceed();
    public static string CollectionServicingJobDidNotSucceed(CultureInfo culture);
    public static string OperationNotSuportedPreFramework();
    public static string OperationNotSuportedPreFramework(CultureInfo culture);
    public static string ServicingOperationConfigDoesNotDefineOperationNameError();
    public static string ServicingOperationConfigDoesNotDefineOperationNameError(CultureInfo culture);
    public static string WaitForCollectionServicingTimeout();
    public static string WaitForCollectionServicingTimeout(CultureInfo culture);
    public static string RegisteredInstancedDuplicateInstances();
    public static string RegisteredInstancedDuplicateInstances(CultureInfo culture);
    public static string DialogAuthenticate_Waiting(object arg0);
    public static string DialogAuthenticate_Waiting(object arg0, CultureInfo culture);
    public static string DialogAuthenticate_Done();
    public static string DialogAuthenticate_Done(CultureInfo culture);
    public static string TfsmqInvalidChannelType(object arg0);
    public static string TfsmqInvalidChannelType(object arg0, CultureInfo culture);
    public static string TfsmqTransportNoProjectCollection();
    public static string TfsmqTransportNoProjectCollection(CultureInfo culture);
    public static string TfsmqInvalidOperationOneWayOnly(object arg0, object arg1);
    public static string TfsmqInvalidOperationOneWayOnly(object arg0, object arg1, CultureInfo culture);
    public static string TfsmqReceiveTimeout(object arg0);
    public static string TfsmqReceiveTimeout(object arg0, CultureInfo culture);
    public static string TfsmqInvalidServerConfiguration(object arg0, object arg1);
    public static string TfsmqInvalidServerConfiguration(object arg0, object arg1, CultureInfo culture);
    public static string TfsmqAcceptChannelTimeout(object arg0);
    public static string TfsmqAcceptChannelTimeout(object arg0, CultureInfo culture);
    public static string TfsmqNotSupportedOnProjectCollection(object arg0);
    public static string TfsmqNotSupportedOnProjectCollection(object arg0, CultureInfo culture);
    public static string TfsmqInvalidUri(object arg0);
    public static string TfsmqInvalidUri(object arg0, CultureInfo culture);
    public static string MultipleIdentitiesFoundMessage(object arg0, object arg1);
    public static string MultipleIdentitiesFoundMessage(object arg0, object arg1, CultureInfo culture);
    public static string ArgumentNotSupportedClass(object arg0);
    public static string ArgumentNotSupportedClass(object arg0, CultureInfo culture);
    public static string TeamProjectDeleter_CouldNotConnect(object arg0);
    public static string TeamProjectDeleter_CouldNotConnect(object arg0, CultureInfo culture);
    public static string TeamProjectDeleter_DeletingFrom(object arg0);
    public static string TeamProjectDeleter_DeletingFrom(object arg0, CultureInfo culture);
    public static string TeamProjectDeleter_DeletingFromRosetta();
    public static string TeamProjectDeleter_DeletingFromRosetta(CultureInfo culture);
    public static string TeamProjectDeleter_DetachingFromWss();
    public static string TeamProjectDeleter_DetachingFromWss(CultureInfo culture);
    public static string TeamProjectDeleter_DeletingFromWss();
    public static string TeamProjectDeleter_DeletingFromWss(CultureInfo culture);
    public static string TeamProjectDeleter_Done();
    public static string TeamProjectDeleter_Done(CultureInfo culture);
    public static string TeamProjectDeleter_EleadNotFound();
    public static string TeamProjectDeleter_EleadNotFound(CultureInfo culture);
    public static string TeamProjectDeleter_Failure();
    public static string TeamProjectDeleter_Failure(CultureInfo culture);
    public static string TeamProjectDeleter_ProjectNotFound(object arg0);
    public static string TeamProjectDeleter_ProjectNotFound(object arg0, CultureInfo culture);
    public static string TeamProjectDeleter_RosettaNotFound();
    public static string TeamProjectDeleter_RosettaNotFound(CultureInfo culture);
    public static string TeamProjectDeleter_WssNotFound();
    public static string TeamProjectDeleter_WssNotFound(CultureInfo culture);
    public static string TeamProjectDeleter_DomainError();
    public static string TeamProjectDeleter_DomainError(CultureInfo culture);
    public static string TeamProjectDeleter_TryUsingForce();
    public static string TeamProjectDeleter_TryUsingForce(CultureInfo culture);
    public static string TeamProjectDeleter_MissingName();
    public static string TeamProjectDeleter_MissingName(CultureInfo culture);
    public static string TeamProjectDeleter_MissingDomain(object arg0);
    public static string TeamProjectDeleter_MissingDomain(object arg0, CultureInfo culture);
    public static string TeamProjectDeleter_FailureInstructions();
    public static string TeamProjectDeleter_FailureInstructions(CultureInfo culture);
    public static string ToolNames_VersionControl();
    public static string ToolNames_VersionControl(CultureInfo culture);
    public static string ToolNames_WorkItemTracking();
    public static string ToolNames_WorkItemTracking(CultureInfo culture);
    public static string ToolNames_TeamFoundation();
    public static string ToolNames_TeamFoundation(CultureInfo culture);
    public static string ToolIdMalformed(object arg0);
    public static string ToolIdMalformed(object arg0, CultureInfo culture);
    public static string NoServiceInterfaceByName(object arg0, object arg1);
    public static string NoServiceInterfaceByName(object arg0, object arg1, CultureInfo culture);
    public static string NullServiceUrl(object arg0, object arg1);
    public static string NullServiceUrl(object arg0, object arg1, CultureInfo culture);
    public static string MoreThanOneServiceInstance(object arg0);
    public static string MoreThanOneServiceInstance(object arg0, CultureInfo culture);
    public static string NullOrEmptyServiceInterface(object arg0, object arg1);
    public static string NullOrEmptyServiceInterface(object arg0, object arg1, CultureInfo culture);
    public static string NoRegistrationEntries(object arg0);
    public static string NoRegistrationEntries(object arg0, CultureInfo culture);
    public static string NoServiceInterfaces(object arg0);
    public static string NoServiceInterfaces(object arg0, CultureInfo culture);
    public static string NodeDoesNotExistMessage(object arg0, object arg1);
    public static string NodeDoesNotExistMessage(object arg0, object arg1, CultureInfo culture);
    public static string RegistrationInInconsistentStateMessage();
    public static string RegistrationInInconsistentStateMessage(CultureInfo culture);
    public static string TypeCannotSerializeMessage(object arg0);
    public static string TypeCannotSerializeMessage(object arg0, CultureInfo culture);
    public static string ManageTfsListApplicationInstanceNotSupported();
    public static string ManageTfsListApplicationInstanceNotSupported(CultureInfo culture);
    public static string GenericTeamFoundationCaption();
    public static string GenericTeamFoundationCaption(CultureInfo culture);
    public static string MicrosoftVisualStudioCaption();
    public static string MicrosoftVisualStudioCaption(CultureInfo culture);
    public static string EnterValidPath();
    public static string EnterValidPath(CultureInfo culture);
    public static string HttpRequestTimeout(object arg0);
    public static string HttpRequestTimeout(object arg0, CultureInfo culture);
    public static string LocalMetadataTableMutexTimeout();
    public static string LocalMetadataTableMutexTimeout(CultureInfo culture);
    public static string ACSAuthenticationError(object arg0);
    public static string ACSAuthenticationError(object arg0, CultureInfo culture);
    public static string ConfigurationErrorsEncountered(object arg0);
    public static string ConfigurationErrorsEncountered(object arg0, CultureInfo culture);
    public static string FileNotFound(object arg0);
    public static string FileNotFound(object arg0, CultureInfo culture);
    public static string UnsafeFileOpenPrompt();
    public static string UnsafeFileOpenPrompt(CultureInfo culture);
    public static string HttpClientOpenTimeout(object arg0);
    public static string HttpClientOpenTimeout(object arg0, CultureInfo culture);
    public static string HttpClientAlreadyOpened();
    public static string HttpClientAlreadyOpened(CultureInfo culture);
    public static string SimpleWebCredentialsMissing();
    public static string SimpleWebCredentialsMissing(CultureInfo culture);
    public static string FederatedCredentialWithNoIssuedTokenProvider();
    public static string FederatedCredentialWithNoIssuedTokenProvider(CultureInfo culture);
    public static string TokenProviderReturnInvalidCurrentToken();
    public static string TokenProviderReturnInvalidCurrentToken(CultureInfo culture);
    public static string TfsConnectDialogSwitchUser();
    public static string TfsConnectDialogSwitchUser(CultureInfo culture);
    public static string TfsConnectDialogUserLabelFormat(object arg0, object arg1);
    public static string TfsConnectDialogUserLabelFormat(object arg0, object arg1, CultureInfo culture);
    public static string TruncatedStringFormat(object arg0);
    public static string TruncatedStringFormat(object arg0, CultureInfo culture);
    public static string CannotAuthenticateAsAnotherUser(object arg0, object arg1);
    public static string CannotAuthenticateAsAnotherUser(object arg0, object arg1, CultureInfo culture);
    public static string ConnectionUserChangedWarning(object arg0);
    public static string ConnectionUserChangedWarning(object arg0, CultureInfo culture);
    public static string SwitchUserNotSupportedOnPremise();
    public static string SwitchUserNotSupportedOnPremise(CultureInfo culture);
    public static string SwitchUserRequiresFederatedAuthentication();
    public static string SwitchUserRequiresFederatedAuthentication(CultureInfo culture);
    public static string DeleteVolatileCacheDirectoryError(object arg0, object arg1);
    public static string DeleteVolatileCacheDirectoryError(object arg0, object arg1, CultureInfo culture);
    public static string ServerNotSupported(object arg0);
    public static string ServerNotSupported(object arg0, CultureInfo culture);
    public static string JobDefinitionPropertiesCannotSet();
    public static string JobDefinitionPropertiesCannotSet(CultureInfo culture);
    public static string InvalidProxyUrl(object arg0);
    public static string InvalidProxyUrl(object arg0, CultureInfo culture);
    public static string TeamProjectDeleter_OperationCancelledAtTime(object arg0);
    public static string TeamProjectDeleter_OperationCancelledAtTime(object arg0, CultureInfo culture);
    public static string TeamProjectDeleter_OperationFailedAtTime(object arg0);
    public static string TeamProjectDeleter_OperationFailedAtTime(object arg0, CultureInfo culture);
    public static string TeamProjectDeleter_OperationInProgressAtTime(object arg0);
    public static string TeamProjectDeleter_OperationInProgressAtTime(object arg0, CultureInfo culture);
    public static string TeamProjectDeleter_OperationQueuedAtTime(object arg0);
    public static string TeamProjectDeleter_OperationQueuedAtTime(object arg0, CultureInfo culture);
    public static string TeamProjectDeleter_OperationSucceededAtTime(object arg0);
    public static string TeamProjectDeleter_OperationSucceededAtTime(object arg0, CultureInfo culture);
    public static string TeamProjectDeleter_DeletingFromTfs();
    public static string TeamProjectDeleter_DeletingFromTfs(CultureInfo culture);
    public static string TeamProjectDeleter_OperationHasId(object arg0);
    public static string TeamProjectDeleter_OperationHasId(object arg0, CultureInfo culture);
    public static string TeamProjectDeleter_ProjectServerNotFound();
    public static string TeamProjectDeleter_ProjectServerNotFound(CultureInfo culture);
    public static string ToolNames_Build();
    public static string ToolNames_Build(CultureInfo culture);
    public static string ToolNames_ProjectServer();
    public static string ToolNames_ProjectServer(CultureInfo culture);
    public static string ToolNames_TeamProjects();
    public static string ToolNames_TeamProjects(CultureInfo culture);
    public static string ToolNames_WSS();
    public static string ToolNames_WSS(CultureInfo culture);
    public static string TeamProjectDeleter_InitializationException(object arg0);
    public static string TeamProjectDeleter_InitializationException(object arg0, CultureInfo culture);
    public static string TeamProjectDeleter_ProjectNotFoundOnService();
    public static string TeamProjectDeleter_ProjectNotFoundOnService(CultureInfo culture);
    public static string ProcessModelIsNotCorrect(object arg0);
    public static string ProcessModelIsNotCorrect(object arg0, CultureInfo culture);
    public static string InternetExplorerNotFound(object arg0);
    public static string InternetExplorerNotFound(object arg0, CultureInfo culture);
    public static string TeamProjectDeleter_SoftDeleteNotSupported();
    public static string TeamProjectDeleter_SoftDeleteNotSupported(CultureInfo culture);
}
[EditorBrowsableAttribute("1")]
public enum Microsoft.TeamFoundation.Client.Internal.Notification : Enum {
    public int value__;
    public static Notification TeamFoundationNotificationBegin;
    public static Notification TeamExplorerNotificationBegin;
    public static Notification TeamExplorerFavoriteCreated;
    public static Notification TeamExplorerFavoriteDeleted;
    public static Notification TeamExplorerFavoriteRenamed;
    public static Notification TeamExplorerNotificationEnd;
    public static Notification VersionControlNotificationBegin;
    public static Notification VersionControlWorkspaceCreated;
    public static Notification VersionControlWorkspaceDeleted;
    public static Notification VersionControlWorkspaceChanged;
    public static Notification VersionControlPendingChangesChanged;
    public static Notification VersionControlGetCompleted;
    public static Notification VersionControlChangesetReconciled;
    public static Notification VersionControlFolderContentChanged;
    public static Notification VersionControlManualMergeClosed;
    public static Notification VersionControlLocalWorkspaceScan;
    public static Notification VersionControlNotificationEnd;
    public static Notification WorkItemTrackingNotificationBegin;
    public static Notification WorkItemTrackingUserQueryCreated;
    public static Notification WorkItemTrackingTeamQueryCreated;
    public static Notification WorkItemTrackingUserQueryDeleted;
    public static Notification WorkItemTrackingTeamQueryDeleted;
    public static Notification WorkItemTrackingUserQueryRenamed;
    public static Notification WorkItemTrackingTeamQueryRenamed;
    public static Notification WorkItemTrackingNotificationEnd;
    public static Notification ReportingNotificationBegin;
    public static Notification ReportingNotificationEnd;
    public static Notification DocumentsNotificationBegin;
    public static Notification DocumentsNotificationEnd;
    public static Notification BuildNotificationBegin;
    public static Notification BuildNotificationBuildCreated;
    public static Notification BuildNotificationBuildDeleted;
    public static Notification BuildNotificationBuildRenamed;
    public static Notification BuildNotificationBuildStarted;
    public static Notification BuildNotificationBuildStopped;
    public static Notification BuildNotificationEnd;
    public static Notification TfsConnectionNotificationBegin;
    public static Notification TfsConnectionUserChanged;
    public static Notification TfsConnectionNotificationEnd;
    public static Notification TeamFoundationNotificationEnd;
}
[EditorBrowsableAttribute("1")]
public static class Microsoft.TeamFoundation.Client.Internal.RegistryUtilities : object {
    public static object GetUserOrApplicationRegistryValue(string keyPath, string name);
    public static object GetApplicationRegistryValue(string keyPath, string name);
    public static object GetUserRegistryValue(string keyPath, string name);
    public static void SetUserRegistryValue(string keyPath, string name, object value);
}
[EditorBrowsableAttribute("1")]
public class Microsoft.TeamFoundation.Client.Internal.WaitCursor : object {
    private Cursor m_oldCursor;
    private sealed virtual override void System.IDisposable.Dispose();
    protected virtual void Dispose(bool disposing);
    protected void SetDefaultWaitCursor();
}
[EditorBrowsableAttribute("1")]
public class Microsoft.TeamFoundation.Client.Internal.WindowWaitCursor : object {
    private Window m_window;
    private Cursor m_originalCursor;
    public WindowWaitCursor(Window window);
    public sealed virtual void Dispose();
}
[GuidAttribute("6af75b24-7cc9-4973-b400-67e97ea0096f")]
[ComVisibleAttribute("True")]
[InterfaceTypeAttribute("0")]
[EditorBrowsableAttribute("1")]
public interface Microsoft.TeamFoundation.Client.IPortalSettingsLauncher {
    public abstract virtual void Show(TfsTeamProjectCollection tpc, string projectUri, string projectName);
}
[GuidAttribute("e9e3586b-e007-4762-b598-b76b30fb6ada")]
[ComVisibleAttribute("True")]
[InterfaceTypeAttribute("0")]
[EditorBrowsableAttribute("1")]
public interface Microsoft.TeamFoundation.Client.IProcessTemplateManagerLauncher {
    public abstract virtual void Show(TfsTeamProjectCollection tpc);
}
[GuidAttribute("7C33D957-342E-444C-B0BD-3BDE908EAA67")]
[ComVisibleAttribute("True")]
[InterfaceTypeAttribute("0")]
[EditorBrowsableAttribute("1")]
public interface Microsoft.TeamFoundation.Client.IProjectAlertsLauncher {
    public abstract virtual void Show(TfsTeamProjectCollection tpc, string projectName);
}
[ObsoleteAttribute("Obsolete and will be removed in the subsequent release, use ITeamFoundationContext.")]
public interface Microsoft.TeamFoundation.Client.IProjectContext {
    public string DomainName { get; }
    public string DomainUri { get; }
    public string ProjectName { get; }
    public string ProjectUri { get; }
    public abstract virtual string get_DomainName();
    public abstract virtual string get_DomainUri();
    public abstract virtual string get_ProjectName();
    public abstract virtual string get_ProjectUri();
}
[GuidAttribute("D2E07D5A-2DA2-4118-9C6E-31E8EFEDB9BC")]
[ComVisibleAttribute("True")]
[InterfaceTypeAttribute("0")]
public interface Microsoft.TeamFoundation.Client.IProjectCreation {
    public abstract virtual bool BatchCreateTeamProject(string teamProjectCreationSettingFile, String& logFileFullPath);
}
[GuidAttribute("70B8F042-B31B-4C8D-9D63-87985FF96565")]
[ComVisibleAttribute("True")]
[InterfaceTypeAttribute("0")]
[EditorBrowsableAttribute("1")]
public interface Microsoft.TeamFoundation.Client.IProjectCreationWizardLauncher {
    public abstract virtual bool LaunchProjectCreationWizard(TfsTeamProjectCollection tpc, String& teamProjectName, Uri& teamProjectUri, String& errorMessage);
}
public interface Microsoft.TeamFoundation.Client.IResultCollection`1 {
}
public interface Microsoft.TeamFoundation.Client.IRuntimeHost {
    public IWin32Window DefaultParentWindow { get; }
    public RuntimeEnvironmentFlags EnvironmentFlags { get; }
    public string NewLine { get; }
    public int OutputWidth { get; }
    public Encoding OutputEncoding { get; }
    public abstract virtual DialogResult ShowMessageBox(IWin32Window parent, string text, string helpTopic, string caption, MessageBoxButtons buttons, MessageBoxIcon icon, MessageBoxDefaultButton defaultButton);
    public abstract virtual bool EnableModeless(bool enable);
    public abstract virtual IWin32Window get_DefaultParentWindow();
    public abstract virtual RuntimeEnvironmentFlags get_EnvironmentFlags();
    public abstract virtual void Write(LogFlags flags, LogCategory category, string message);
    public abstract virtual string get_NewLine();
    public abstract virtual int get_OutputWidth();
    public abstract virtual Encoding get_OutputEncoding();
}
[GuidAttribute("C903B230-77C3-491F-A36A-444068C70AC4")]
[ComVisibleAttribute("True")]
[InterfaceTypeAttribute("0")]
[EditorBrowsableAttribute("1")]
public interface Microsoft.TeamFoundation.Client.ISourceControlSettingsLauncher {
    public abstract virtual void LaunchSourceControlSettings();
    public abstract virtual void LaunchSourceControlCollectionSettings();
}
[ObsoleteAttribute("This class is deprecated and will be removed in a future release. See Microsoft.VisualStudio.Services.Common.IssuedToken instead.", "False")]
public abstract class Microsoft.TeamFoundation.Client.IssuedToken : object {
    [CompilerGeneratedAttribute]
private Guid <UserId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <UserName>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <FromStorage>k__BackingField;
    private int m_authenticated;
    public bool IsAuthenticated { get; }
    protected internal VssCredentialsType CredentialType { get; }
    internal Guid UserId { get; internal set; }
    internal string UserName { get; internal set; }
    internal bool FromStorage { get; internal set; }
    public bool get_IsAuthenticated();
    protected internal abstract virtual VssCredentialsType get_CredentialType();
    [CompilerGeneratedAttribute]
internal Guid get_UserId();
    [CompilerGeneratedAttribute]
internal void set_UserId(Guid value);
    [CompilerGeneratedAttribute]
internal string get_UserName();
    [CompilerGeneratedAttribute]
internal void set_UserName(string value);
    [CompilerGeneratedAttribute]
internal bool get_FromStorage();
    [CompilerGeneratedAttribute]
internal void set_FromStorage(bool value);
    internal bool Authenticated();
    internal virtual void RequestUserData(HttpWebRequest webRequest);
    internal virtual void GetUserData(HttpWebResponse webResponse);
    internal abstract virtual void ApplyTo(HttpWebRequest webRequest);
}
[ObsoleteAttribute("This class is deprecated and will be removed in a future release. See Microsoft.VisualStudio.Services.Common.IssuedTokenCredential instead.", "False")]
public abstract class Microsoft.TeamFoundation.Client.IssuedTokenCredential : object {
    [CompilerGeneratedAttribute]
private IssuedToken <InitialToken>k__BackingField;
    private SynchronizationContext m_syncContext;
    private TfsClientCredentialStorage m_tokenStorage;
    internal IssuedToken InitialToken { get; internal set; }
    internal SynchronizationContext SyncContext { get; internal set; }
    protected VssCredentialsType CredentialType { get; }
    [EditorBrowsableAttribute("1")]
public TfsClientCredentialStorage TokenStorage { get; public set; }
    internal IssuedTokenCredential(IssuedToken initialToken);
    [CompilerGeneratedAttribute]
internal IssuedToken get_InitialToken();
    [CompilerGeneratedAttribute]
internal void set_InitialToken(IssuedToken value);
    internal SynchronizationContext get_SyncContext();
    internal void set_SyncContext(SynchronizationContext value);
    protected abstract virtual VssCredentialsType get_CredentialType();
    public TfsClientCredentialStorage get_TokenStorage();
    public void set_TokenStorage(TfsClientCredentialStorage value);
    internal IssuedTokenProvider CreateTokenProvider(Uri serverUrl, HttpWebResponse response, IssuedToken failedToken);
    internal abstract virtual bool IsAuthenticationChallenge(HttpWebResponse webResponse);
    internal abstract virtual IssuedTokenProvider OnCreateTokenProvider(Uri serverUrl, HttpWebResponse response);
}
[EditorBrowsableAttribute("1")]
[ObsoleteAttribute("This class is deprecated and will be removed in a future release. See Microsoft.VisualStudio.Services.Common.IssuedTokenProvider instead.", "False")]
public abstract class Microsoft.TeamFoundation.Client.IssuedTokenProvider : object {
    [CompilerGeneratedAttribute]
private IssuedTokenCredential <Credential>k__BackingField;
    [CompilerGeneratedAttribute]
private IssuedToken <CurrentToken>k__BackingField;
    [CompilerGeneratedAttribute]
private Uri <SignInUrl>k__BackingField;
    [CompilerGeneratedAttribute]
private Uri <ServerUrl>k__BackingField;
    private object m_thisLock;
    private List`1<GetTokenOperation> m_operations;
    protected internal IssuedTokenCredential Credential { get; private set; }
    public IssuedToken CurrentToken { get; internal set; }
    public bool GetTokenIsInteractive { get; }
    private bool InvokeRequired { get; }
    public Uri SignInUrl { get; private set; }
    protected Uri ServerUrl { get; private set; }
    protected IssuedTokenProvider(IssuedTokenCredential credential, Uri serverUrl, Uri signInUrl);
    [CompilerGeneratedAttribute]
protected internal IssuedTokenCredential get_Credential();
    [CompilerGeneratedAttribute]
private void set_Credential(IssuedTokenCredential value);
    [CompilerGeneratedAttribute]
public IssuedToken get_CurrentToken();
    [CompilerGeneratedAttribute]
internal void set_CurrentToken(IssuedToken value);
    public abstract virtual bool get_GetTokenIsInteractive();
    private bool get_InvokeRequired();
    [CompilerGeneratedAttribute]
public Uri get_SignInUrl();
    [CompilerGeneratedAttribute]
private void set_SignInUrl(Uri value);
    [CompilerGeneratedAttribute]
protected Uri get_ServerUrl();
    [CompilerGeneratedAttribute]
private void set_ServerUrl(Uri value);
    private GetTokenOperation CreateOperation(GetTokenOperation& operationInProgress, IssuedToken failedToken, TimeoutHelper timeout, bool canRefresh, AsyncCallback callback, object state);
    internal virtual bool IsAuthenticationChallenge(HttpWebResponse webResponse);
    internal void ValidateToken(IssuedToken& token, HttpWebResponse webResponse);
    internal void InvalidateToken(IssuedToken token);
    public IssuedToken GetToken(TimeSpan timeout);
    public IssuedToken GetToken(IssuedToken failedToken, TimeSpan timeout);
    public IssuedToken GetToken(IssuedToken failedToken, TimeSpan timeout, bool canRefresh);
    internal IssuedToken GetToken(IssuedToken failedToken, TimeoutHelper timeout, bool canRefresh);
    protected abstract virtual IssuedToken OnGetToken(IssuedToken failedToken, TimeSpan timeout);
    protected virtual IssuedToken OnValidatingToken(IssuedToken token, HttpWebResponse webResponse);
    protected virtual void OnTokenValidated(IssuedToken token);
    protected virtual void OnTokenInvalidated(IssuedToken token);
    public IAsyncResult BeginGetToken(TimeSpan timeout, AsyncCallback callback, object state);
    public IAsyncResult BeginGetToken(IssuedToken failedToken, TimeSpan timeout, AsyncCallback callback, object state);
    public IAsyncResult BeginGetToken(IssuedToken failedToken, TimeSpan timeout, bool canRefresh, AsyncCallback callback, object state);
    internal IAsyncResult BeginGetToken(IssuedToken failedToken, TimeoutHelper timeout, bool canRefresh, AsyncCallback callback, object state);
    protected abstract virtual IAsyncResult OnBeginGetToken(IssuedToken failedToken, TimeSpan timeout, AsyncCallback callback, object state);
    public IssuedToken EndGetToken(IAsyncResult result);
    protected abstract virtual IssuedToken OnEndGetToken(IAsyncResult result);
}
internal interface Microsoft.TeamFoundation.Client.ISupportSignOut {
    public abstract virtual void SignOut(Uri serverUrl, Uri replyToUrl, string identityProvider);
}
public interface Microsoft.TeamFoundation.Client.ITeamFoundationContext {
    public TfsTeamProjectCollection TeamProjectCollection { get; }
    public bool HasCollection { get; }
    public string TeamProjectName { get; }
    public Uri TeamProjectUri { get; }
    public bool HasTeamProject { get; }
    public string TeamName { get; }
    public Guid TeamId { get; }
    public bool HasTeam { get; }
    public abstract virtual TfsTeamProjectCollection get_TeamProjectCollection();
    public abstract virtual bool get_HasCollection();
    public abstract virtual string get_TeamProjectName();
    public abstract virtual Uri get_TeamProjectUri();
    public abstract virtual bool get_HasTeamProject();
    public abstract virtual string get_TeamName();
    public abstract virtual Guid get_TeamId();
    public abstract virtual bool get_HasTeam();
}
[CLSCompliantAttribute("False")]
[GuidAttribute("C4EDF2C2-A987-4AFC-AC67-8E8ADE6D2E13")]
public interface Microsoft.TeamFoundation.Client.ITeamFoundationContextManager {
    public ITeamFoundationContext CurrentContext { get; }
    public abstract virtual ITeamFoundationContext get_CurrentContext();
    public abstract virtual void SetContext(TfsTeamProjectCollection teamProjectCollection, string projectUri);
    public abstract virtual void SetContext(TfsTeamProjectCollection teamProjectCollection, string projectUri, Guid teamId);
    [CompilerGeneratedAttribute]
public abstract virtual void add_ContextChanged(EventHandler`1<ContextChangedEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_ContextChanged(EventHandler`1<ContextChangedEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_ContextChanging(EventHandler`1<ContextChangingEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_ContextChanging(EventHandler`1<ContextChangingEventArgs> value);
}
[CLSCompliantAttribute("False")]
[GuidAttribute("9CCFE978-9849-4338-AB18-194EA5A646C5")]
public interface Microsoft.TeamFoundation.Client.ITeamFoundationContextManager2 {
    public abstract virtual void SetContext(TfsTeamProjectCollection teamProjectCollection, string project, Guid teamId, bool connectAsynchronously, ActiveContextChangeReason reason, bool promptOnError);
    public abstract virtual void SetContext(string teamProjectCollectionUri, string project, Guid teamId, bool connectAsynchronously, ActiveContextChangeReason reason, bool promptOnError);
}
[CLSCompliantAttribute("False")]
[GuidAttribute("98BCADF2-C5C0-4D64-A685-48F60A7DB87E")]
public interface Microsoft.TeamFoundation.Client.ITeamFoundationContextManager3 {
    public abstract virtual void SetContext(string teamProjectCollectionUri, string project, string teamName, bool connectAsynchronously, ActiveContextChangeReason reason, bool promptOnError);
}
[CLSCompliantAttribute("False")]
[GuidAttribute("992CE4A5-D4ED-447E-BDEA-566A75BBB2CF")]
public interface Microsoft.TeamFoundation.Client.ITeamFoundationContextManager4 {
    public abstract virtual void SetContext(string teamProjectCollectionUri, string project, Guid teamId, IEnumerable`1<Guid> repositoryIds);
    public abstract virtual void SetContext(string teamProjectCollectionUri, string project, Guid teamId, IEnumerable`1<Guid> repositoryIds, bool connectAsynchronously, ActiveContextChangeReason reason, bool promptOnError);
}
[CLSCompliantAttribute("False")]
[GuidAttribute("0CFE311C-3DEF-4EFF-8E33-6414C2339725")]
public interface Microsoft.TeamFoundation.Client.ITeamFoundationContextManager5 {
    public abstract virtual void SetContext(TfsTeamProjectCollection teamProjectCollection, string project, Guid teamId, IEnumerable`1<Guid> repositoryIds, bool connectAsynchronously, ActiveContextChangeReason reason, bool promptOnError);
    public abstract virtual Task SetContextAsync(TfsTeamProjectCollection teamProjectCollection, string project, Guid teamId, IEnumerable`1<Guid> repositoryIds, bool connectAsynchronously, ActiveContextChangeReason reason, bool promptOnError);
}
public interface Microsoft.TeamFoundation.Client.ITeamFoundationSourceControlContext {
    public TeamFoundationSourceControlType SourceControlType { get; }
    public IReadOnlyList`1<Guid> RepositoryIds { get; }
    public bool HasRepositoryIds { get; }
    public abstract virtual TeamFoundationSourceControlType get_SourceControlType();
    public abstract virtual IReadOnlyList`1<Guid> get_RepositoryIds();
    public abstract virtual bool get_HasRepositoryIds();
}
[EditorBrowsableAttribute("1")]
public interface Microsoft.TeamFoundation.Client.ITeamFoundationWorkspaceContextMonitor {
    [CompilerGeneratedAttribute]
public abstract virtual void add_ContextChanged(EventHandler`1<TeamFoundationWorkspaceContextChangedEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_ContextChanged(EventHandler`1<TeamFoundationWorkspaceContextChangedEventArgs> value);
    public abstract virtual void NotifyWorkspaceChanged(string oldWorkspace, string newWorkspace);
}
public interface Microsoft.TeamFoundation.Client.ITeamProjectPickerDefaultSelectionProvider {
    public abstract virtual Uri GetDefaultServerUri();
    public abstract virtual Nullable`1<Guid> GetDefaultCollectionId(Uri instanceUri);
    public abstract virtual IEnumerable`1<string> GetDefaultProjects(Guid collectionId);
}
[EditorBrowsableAttribute("1")]
public interface Microsoft.TeamFoundation.Client.ITfsConfigurationServerObject {
    public abstract virtual void Initialize(TfsConfigurationServer application);
}
[EditorBrowsableAttribute("1")]
public interface Microsoft.TeamFoundation.Client.ITfsConnectionObject {
    public abstract virtual void Initialize(TfsConnection server);
}
[EditorBrowsableAttribute("1")]
public interface Microsoft.TeamFoundation.Client.ITfsDiagnosticProvider {
    public string Name { get; }
    public String[] AreaPaths { get; }
    public abstract virtual string get_Name();
    public abstract virtual String[] get_AreaPaths();
    public abstract virtual void WriteState(string areaPath, XmlWriter writer);
}
[EditorBrowsableAttribute("1")]
public interface Microsoft.TeamFoundation.Client.ITfsResult {
    public ITfsResult Previous { get; }
    public bool IsComplete { get; }
    public TfsRequestContext Context { get; public set; }
    public string XmlElement { get; }
    public abstract virtual void ReadAll();
    public abstract virtual ITfsResult get_Previous();
    public abstract virtual bool get_IsComplete();
    public abstract virtual TfsRequestContext get_Context();
    public abstract virtual void set_Context(TfsRequestContext value);
    public abstract virtual string get_XmlElement();
}
[EditorBrowsableAttribute("1")]
public interface Microsoft.TeamFoundation.Client.ITfsTeamProjectCollectionObject {
    public abstract virtual void Initialize(TfsTeamProjectCollection projectCollection);
}
[EditorBrowsableAttribute("1")]
public interface Microsoft.TeamFoundation.Client.ITfsXmlSerializable {
    public abstract virtual void WriteXml(XmlWriter writer, string xmlElement);
    public abstract virtual void ReadXml(XmlReader reader, string xmlElement);
}
[EditorBrowsableAttribute("1")]
[ObsoleteAttribute("This interface has been deprecated and will be removed in a future release. Use VssClientCredentials with CredentialPromptType.PromptIfNeeded instead.", "False")]
public interface Microsoft.TeamFoundation.Client.IUICredentialsProvider {
    public abstract virtual ICredentials GetCredentials(Uri uri, ICredentials failedCredentials, string caption, string messageText, IntPtr parentWindowHandle);
}
[EditorBrowsableAttribute("1")]
public static class Microsoft.TeamFoundation.Client.KnownCapFlagsScc : object {
    public static string TFVC;
    public static string Git;
    public static TeamFoundationSourceControlType Convert(string capFlagsScc);
}
internal class Microsoft.TeamFoundation.Client.LinkingProxy : TfsHttpClient {
    private static string c_namespaceUrl;
    protected string ComponentName { get; }
    protected string ServiceType { get; }
    internal LinkingProxy(TfsTeamProjectCollection server, string url);
    protected virtual string get_ComponentName();
    protected virtual string get_ServiceType();
    public Artifact[] GetArtifacts(String[] artifactUris);
    public Artifact[] GetReferencingArtifacts(String[] uriList);
    public Artifact[] GetReferencingArtifacts(String[] uriList, LinkFilter[] filters);
}
internal class Microsoft.TeamFoundation.Client.LinkingService : object {
    private TfsTeamProjectCollection m_tfs;
    private IRegistration m_registrationProxy;
    private Dictionary`2 modreq(System.Runtime.CompilerServices.IsVolatile) m_artifactProviders;
    private Dictionary`2 modreq(System.Runtime.CompilerServices.IsVolatile) m_artifactConsumers;
    private static object s_initializationLock;
    private String modreq(System.Runtime.CompilerServices.IsVolatile) m_serverUrlPublic;
    public string ServerUrlPublic { get; }
    internal LinkingService(TfsTeamProjectCollection tfs);
    private static LinkingService();
    public sealed virtual Artifact[] GetArtifacts(String[] artifactUriList);
    public sealed virtual Artifact[] GetReferencingArtifacts(String[] uriList);
    public sealed virtual Artifact[] GetReferencingArtifacts(String[] uriList, LinkFilter[] filters);
    public sealed virtual string GetArtifactUrl(string uri);
    public sealed virtual string GetArtifactUrl(ArtifactId artId);
    public sealed virtual string GetArtifactUrlExternal(string uri);
    public sealed virtual string GetArtifactUrlExternal(ArtifactId artId);
    public string get_ServerUrlPublic();
    private Dictionary`2<string, LinkingProxy> InitializeConsumers();
    private Dictionary`2<string, LinkingProxy> InitializeProviders();
    private Artifact[] GetArtifactsProcess(String[] artifactUriList);
    private Artifact[] GetArtifactsProcess(string tool, ArtifactId[] artifactIds);
    private string GetArtifactUrl(ArtifactId artId, string serverUrl);
    private void GetNullElementIndexes(Object[] arr, Int32[]& nullElementIndices, Object[]& filteredArr);
    private Object[] MergeNullElements(Object[] arr, Int32[] nullElementIndices);
}
[EditorBrowsableAttribute("1")]
public class Microsoft.TeamFoundation.Client.ListViewColumnSizedEventArgs : EventArgs {
    private int m_columnIndex;
    private int m_width;
    public int ColumnIndex { get; }
    public int Width { get; }
    public ListViewColumnSizedEventArgs(int columnIndex, int width);
    public int get_ColumnIndex();
    public int get_Width();
}
[EditorBrowsableAttribute("1")]
public class Microsoft.TeamFoundation.Client.ListViewResize : ListView {
    [CompilerGeneratedAttribute]
private EventHandler Scroll;
    [CompilerGeneratedAttribute]
private EventHandler`1<ListViewColumnSizedEventArgs> ColumnSized;
    private AutoHeadersSizingEnum m_autoHeadersSizing;
    private IComparer m_listViewSorter;
    private int m_updateDepth;
    private int m_verticalNonClient;
    private int m_horizontalNonClient;
    private int m_itemHeight;
    private int m_lastClientWidth;
    [BrowsableAttribute("True")]
[DescriptionAttribute("Set the criteria by which we size the right most column.")]
[CategoryAttribute("Team Foundation")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public AutoHeadersSizingEnum AutoHeadersSizing { get; public set; }
    public bool AnyItemsChecked { get; }
    public void BeginAddUpdate();
    public void EndAddUpdate();
    [CompilerGeneratedAttribute]
public void add_Scroll(EventHandler value);
    [CompilerGeneratedAttribute]
public void remove_Scroll(EventHandler value);
    [CompilerGeneratedAttribute]
public void add_ColumnSized(EventHandler`1<ListViewColumnSizedEventArgs> value);
    [CompilerGeneratedAttribute]
public void remove_ColumnSized(EventHandler`1<ListViewColumnSizedEventArgs> value);
    protected virtual void CreateHandle();
    public AutoHeadersSizingEnum get_AutoHeadersSizing();
    public void set_AutoHeadersSizing(AutoHeadersSizingEnum value);
    protected virtual void WndProc(Message& m);
    private void UpdateColumns(IntPtr hwnd, int itemCount, int width, int height);
    private void SizeLastColumn(IntPtr hwnd, int width);
    protected virtual void OnColumnSized(int column, int width);
    protected virtual void OnScroll();
    public virtual bool get_AnyItemsChecked();
}
[EditorBrowsableAttribute("1")]
public class Microsoft.TeamFoundation.Client.ListViewResizeX : ListViewResize {
    private bool m_inDoubleClickCheckHack;
    private bool m_doubleClickDoesCheck;
    [BrowsableAttribute("True")]
[DescriptionAttribute("When CheckBoxes is true, this controls whether or not double clicking will toggle the check.")]
[CategoryAttribute("Team Foundation")]
[DefaultValueAttribute("True")]
public bool DoubleClickDoesCheck { get; public set; }
    private void WmReflectNotify(Message& m);
    protected virtual void WndProc(Message& m);
    public bool get_DoubleClickDoesCheck();
    public void set_DoubleClickDoesCheck(bool value);
}
public enum Microsoft.TeamFoundation.Client.LogCategory : Enum {
    public int value__;
    public static LogCategory General;
    public static LogCategory Git;
    public static LogCategory VersionControl;
    public static LogCategory ProjectManagement;
    public static LogCategory WorkItemTracking;
    public static LogCategory TeamExplorer;
    public static LogCategory Reporting;
    public static LogCategory TeamBuild;
    public static LogCategory Documents;
    public static LogCategory TestManagement;
    public static LogCategory Configuration;
    public static LogCategory LabManagement;
}
[FlagsAttribute]
public enum Microsoft.TeamFoundation.Client.LogFlags : Enum {
    public int value__;
    public static LogFlags Normal;
    public static LogFlags Information;
    public static LogFlags Warning;
    public static LogFlags Error;
    public static LogFlags Persist;
}
internal class Microsoft.TeamFoundation.Client.ManageRegisteredServersDialog : BaseDialog {
    private Label _serverListLable;
    private Button _addButton;
    private Button _removeButton;
    private Button _closeButton;
    private ColumnHeader _serverName;
    private ColumnHeader _serverUrl;
    private ListView _serverList;
    private Container components;
    private TableLayoutPanel overarchingTableLayoutPanel;
    private TfsConnection m_activeServer;
    [CompilerGeneratedAttribute]
private ServerEventHandler ServerAdded;
    [CompilerGeneratedAttribute]
private ServerEventHandler ServerRemoved;
    private static string cHelpTopic;
    public ManageRegisteredServersDialog(TfsTeamProjectCollection activeServer);
    [CompilerGeneratedAttribute]
public void add_ServerAdded(ServerEventHandler value);
    [CompilerGeneratedAttribute]
public void remove_ServerAdded(ServerEventHandler value);
    [CompilerGeneratedAttribute]
public void add_ServerRemoved(ServerEventHandler value);
    [CompilerGeneratedAttribute]
public void remove_ServerRemoved(ServerEventHandler value);
    protected virtual void Dispose(bool disposing);
    private void InitializeComponent();
    private void ServerList_SelectedIndexChanged(object sender, EventArgs e);
    private void _closeButton_Click(object sender, EventArgs e);
    private void removeButton_Click(object sender, EventArgs e);
    private void addButton_Click(object sender, EventArgs e);
    private void OnAddServerValidate(object sender, OnAddServerEventArgs eventArgs);
}
[EditorBrowsableAttribute("1")]
public class Microsoft.TeamFoundation.Client.ModalStateEventHandler : MulticastDelegate {
    public ModalStateEventHandler(object object, IntPtr method);
    public virtual void Invoke();
    public virtual IAsyncResult BeginInvoke(AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
[EditorBrowsableAttribute("1")]
public static class Microsoft.TeamFoundation.Client.NonConfiguredSiteHelper : object {
    private static Dictionary`2<SiteType, string> m_createdPage;
    private static object m_sync;
    private static NonConfiguredSiteHelper();
    public static void ShowNonConfiguredSitePage(SiteType type);
    public static string GenerateNotFoundUri(SiteType type);
    public static string GetNonConfiguredSiteHtml(SiteType type, bool imagesFromAssembly);
    public static string GetNonConfiguredSiteHtml(SiteType type, string location);
    private static string LoadResource(string resourceName);
}
[CLSCompliantAttribute("False")]
public static class Microsoft.TeamFoundation.Client.NotificationManager : object {
    private static Dictionary`2<Notification, MessageInfo> s_infos;
    private static Queue`1<NotificationInstance> s_sendQueue;
    private static Queue`1<NotificationInstance> s_holdQueue;
    private static Dictionary`2<NotificationHandler, NotificationRange> s_handlers;
    private static int s_suspended;
    private static IntPtr s_hwndNotify;
    private static bool s_initialized;
    private static WndProc s_wndProc;
    private static object s_timerLock;
    private static Timer s_timer;
    private static TimeSpan s_timerInterval;
    private static string c_WindowClass;
    internal static bool IsSuspended { get; }
    private static NotificationManager();
    private static Dictionary`2<Notification, MessageInfo> GetMessageInfos();
    private static MessageInfo GetMessageInfo(Notification notification);
    internal static void EnqueueNotification(Notification notification);
    internal static void EnqueueNotification(Notification notification, object param1);
    internal static void EnqueueNotification(Notification notification, object param1, object param2);
    internal static void EnqueueNotification(Notification notification, object param1, object param2, GetNotificationParametersCallback callback, object userData);
    [EditorBrowsableAttribute("1")]
public static void EnqueueNotification(Notification notification, IntPtr wParam, IntPtr lParam);
    [EditorBrowsableAttribute("1")]
public static void EnqueueNotification(Notification notification, IntPtr wParam, IntPtr lParam, GetNotificationParametersCallback callback, object userData);
    internal static void BroadcastNotification(Notification notification);
    internal static void BroadcastNotification(Notification notification, object param1);
    internal static void BroadcastNotification(Notification notification, object param1, object param2);
    internal static void BroadcastNotification(Notification notification, object param1, object param2, GetNotificationParametersCallback callback, object userData);
    internal static void BroadcastNotification(Notification notification, IntPtr wParam, IntPtr lParam);
    internal static void BroadcastNotification(Notification notification, IntPtr wParam, IntPtr lParam, GetNotificationParametersCallback callback, object userData);
    private static void SendNotification(bool deliverNow, Notification notification, object param1, object param2);
    private static void SendNotification(bool deliverNow, Notification notification, object param1, object param2, GetNotificationParametersCallback callback, object userData);
    internal static void SendNotification(bool deliverNow, Notification notification, IntPtr wParam, IntPtr lParam);
    internal static void SendNotification(bool deliverNow, Notification notification, IntPtr wParam, IntPtr lParam, GetNotificationParametersCallback callback, object userData);
    private static void SendNotification(bool deliverNow, Notification notification, IntPtr wParam, IntPtr lParam, GetNotificationParametersCallback callback, object userData, MessageInfo info);
    private static void TimerCallback(object state);
    private static void DeliverLocalNotification(NotificationInstance ni);
    private static void DeliverLocalNotificationNow(Notification notification, IntPtr wParam, IntPtr lParam);
    private static void PostNotificationInstance(NotificationInstance ni, IntPtr hwnd);
    internal static void FlushNotificationQueue();
    private static void UIHost_ExitModalState();
    [EditorBrowsableAttribute("1")]
public static void Suspend();
    [EditorBrowsableAttribute("1")]
public static void Resume();
    internal static bool get_IsSuspended();
    private static bool IsOurWindowClass(StringBuilder sb);
    private static void RegisterClass();
    private static void CreateWindow();
    private static void DestroyWindow();
    public static void Initialize();
    public static void Shutdown();
    private static bool EnsureReady();
    internal static IntPtr DefWindowProc(IntPtr hWnd, int msg, IntPtr wParam, IntPtr lParam);
    private static IntPtr WndProc(IntPtr hwnd, int msg, IntPtr wParam, IntPtr lParam);
    internal static void AddNotificationHandler(NotificationHandler handler);
    [EditorBrowsableAttribute("1")]
public static void AddNotificationHandler(NotificationHandler handler, Notification begin, Notification end);
    internal static void RemoveNotificationHandler(NotificationHandler handler);
    private static StringBuilder GetClassNameHelper(IntPtr hWnd, StringBuilder sb);
    private static int GetModuleFileName(IntPtr hModule, StringBuilder lpFilename, int nSize);
    private static int GetCurrentProcessId();
    private static int GetClassName(IntPtr hWnd, StringBuilder lpClassName, int nMaxCount);
}
[ObsoleteAttribute("This class is deprecated and will be removed in a future release. See Microsoft.VisualStudio.Services.WebApi.VssOAuthAccessToken instead.", "False")]
public class Microsoft.TeamFoundation.Client.OAuthToken : IssuedToken {
    private string m_token;
    private OAuthTokenType m_tokenType;
    private DateTime m_expiration;
    public string Token { get; }
    public OAuthTokenType TokenType { get; }
    public DateTime Expiration { get; }
    protected internal VssCredentialsType CredentialType { get; }
    internal OAuthToken(string token, OAuthTokenType tokenType);
    internal OAuthToken(string token, OAuthTokenType tokenType, DateTime expiration);
    public string get_Token();
    public OAuthTokenType get_TokenType();
    public DateTime get_Expiration();
    protected internal virtual VssCredentialsType get_CredentialType();
    internal virtual void ApplyTo(HttpWebRequest webRequest);
}
[ObsoleteAttribute("This class is deprecated and will be removed in a future release. See Microsoft.VisualStudio.Services.WebApi.VssOAuthAccessToken instead.", "False")]
public class Microsoft.TeamFoundation.Client.OAuthTokenContainer : IssuedToken {
    private OAuthToken m_accessToken;
    private OAuthToken m_refreshToken;
    public OAuthToken AccessToken { get; }
    public OAuthToken RefreshToken { get; }
    protected internal VssCredentialsType CredentialType { get; }
    internal OAuthTokenContainer(OAuthToken accessToken, OAuthToken refreshToken);
    public OAuthToken get_AccessToken();
    public OAuthToken get_RefreshToken();
    protected internal virtual VssCredentialsType get_CredentialType();
    internal virtual void ApplyTo(HttpWebRequest webRequest);
    internal static OAuthTokenContainer ExtractTokens(Byte[] responseData, Encoding encoding);
    internal static OAuthTokenContainer FromAccessToken(string accessToken);
    internal static OAuthTokenContainer FromAuthCodeOrRefreshToken(string authCodeOrRefreshToken);
    private static OAuthTokenData GetTokenData(Byte[] responseData, Encoding encoding);
}
[ObsoleteAttribute("This class is deprecated and will be removed in a future release. See Microsoft.VisualStudio.Services.WebApi.VssOAuthCredential instead.", "False")]
public class Microsoft.TeamFoundation.Client.OAuthTokenCredential : FederatedCredential {
    private Uri m_authorizationUri;
    private string m_clientId;
    private string m_clientSecret;
    private OAuthTokensReceivedCallback m_callback;
    public Uri AuthorizationUrl { get; }
    public string ClientId { get; }
    internal string ClientSecret { get; }
    internal OAuthTokensReceivedCallback TokensReceived { get; }
    protected VssCredentialsType CredentialType { get; }
    public OAuthTokenCredential(string accessToken);
    public OAuthTokenCredential(Uri authorizationUri, string clientId, string clientSecret, string authCodeOrRefreshToken);
    public OAuthTokenCredential(Uri authorizationUri, string clientId, string clientSecret, string authCodeOrRefreshToken, OAuthTokensReceivedCallback tokensReceived);
    public OAuthTokenCredential(OAuthTokenContainer initialToken);
    public OAuthTokenCredential(Uri authorizationUri, string clientId, string clientSecret, OAuthTokenContainer initialToken, OAuthTokensReceivedCallback tokensReceived);
    public Uri get_AuthorizationUrl();
    public string get_ClientId();
    internal string get_ClientSecret();
    internal OAuthTokensReceivedCallback get_TokensReceived();
    protected virtual VssCredentialsType get_CredentialType();
    internal virtual bool IsAuthenticationChallenge(HttpWebResponse webResponse);
    internal virtual IssuedTokenProvider OnCreateTokenProvider(Uri serverUrl, HttpWebResponse response);
}
[ObsoleteAttribute("This class is deprecated and will be removed in a future release. See Microsoft.VisualStudio.Services.WebApi.VssOAuthTokenProvider instead.", "False")]
internal class Microsoft.TeamFoundation.Client.OAuthTokenProvider : IssuedTokenProvider {
    public OAuthTokenCredential Credential { get; }
    public bool GetTokenIsInteractive { get; }
    public OAuthTokenProvider(OAuthTokenCredential credential, Uri serverUrl, Uri signInUrl);
    public OAuthTokenCredential get_Credential();
    public virtual bool get_GetTokenIsInteractive();
    protected virtual IssuedToken OnGetToken(IssuedToken failedToken, TimeSpan timeout);
    protected virtual IAsyncResult OnBeginGetToken(IssuedToken failedToken, TimeSpan timeout, AsyncCallback callback, object state);
    protected virtual IssuedToken OnEndGetToken(IAsyncResult result);
}
[ObsoleteAttribute("This class is deprecated and will be removed in a future release.", "False")]
public class Microsoft.TeamFoundation.Client.OAuthTokensReceivedCallback : MulticastDelegate {
    public OAuthTokensReceivedCallback(object object, IntPtr method);
    public virtual void Invoke(OAuthTokenContainer receivedTokens);
    public virtual IAsyncResult BeginInvoke(OAuthTokenContainer receivedTokens, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public enum Microsoft.TeamFoundation.Client.OAuthTokenType : Enum {
    public int value__;
    public static OAuthTokenType AuthenticationCode;
    public static OAuthTokenType AccessToken;
    public static OAuthTokenType RefreshToken;
}
[EditorBrowsableAttribute("1")]
public static class Microsoft.TeamFoundation.Client.Office.OfficeInstall : object {
    public static string Version12;
    private static string MinRequiredOfficeVersion;
    private static string CurVerSuffix;
    private static string ExcelVersionIndependentProgId;
    private static string OutlookVersionIndependentProgId;
    private static string OfficeIntegrationProductName;
    private static string InstallKeyName;
    private static string OfficeIntegrationServicingPath;
    private static string PackagedComProgIdRoot;
    private static ConcurrentDictionary`2<string, bool> s_isInstalledCache;
    private static OfficeInstall();
    public static bool CanCreateExcelReport(TfsTeamProjectCollection teamProjectCollection);
    public static bool IsExcelInstalled();
    public static bool IsProjectInstalled();
    public static bool IsOutlookInstalled();
    public static bool IsPowerPointInstalled();
    private static bool IsOfficeAppInstalled(string versionIndependentProgId, string minRequiredVersion);
    public static int CompareVersions(string v1, string v2);
    private static bool IsOfficeIntegrationAddinInstalled();
    private static bool IsOfficeIntegrationAddinInstalled(string productName);
}
internal class Microsoft.TeamFoundation.Client.OnAddServerEventArgs : EventArgs {
    private TfsConnection _tfs;
    private bool _cancel;
    public TfsConnection Server { get; }
    public bool Cancel { get; public set; }
    public OnAddServerEventArgs(TfsConnection tfs);
    public TfsConnection get_Server();
    public void set_Cancel(bool value);
    public bool get_Cancel();
}
internal class Microsoft.TeamFoundation.Client.OnAddServerEventHandler : MulticastDelegate {
    public OnAddServerEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, OnAddServerEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, OnAddServerEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class Microsoft.TeamFoundation.Client.PerfTraceListener : TraceListener {
    private static Regex s_requestRegex;
    private static Regex s_responseRegex;
    private DialogPerfListener m_dialog;
    private static PerfTraceListener();
    public virtual void Write(string message);
    public virtual void WriteLine(string message);
    [CompilerGeneratedAttribute]
private void <.ctor>b__0_0();
}
internal class Microsoft.TeamFoundation.Client.ProjectSettings.FrameworkSettingsProvider : object {
    private TfsTeamProjectCollection m_tfs;
    private ICatalogService m_catalogService;
    public FrameworkSettingsProvider(TfsTeamProjectCollection teamProjectCollection);
    public sealed virtual void GetAllSettings(ProjectCollectionSettings& projectCollectionSettings, ICollection`1& teamProjectSettings);
    private TeamProjectSettings CreateTeamProjectSettings(TeamProject teamProject);
    private ProjectCollectionSettings GetProjectCollectionSettings(ProjectCollection projectCollection, OrganizationalRoot organizationalRoot);
    private CatalogBulkData GetCatalogBulkData();
    [CompilerGeneratedAttribute]
private TeamProjectSettings <GetAllSettings>b__1_0(TeamProject t);
}
internal interface Microsoft.TeamFoundation.Client.ProjectSettings.ITpcSettingsAdapter {
    public abstract virtual void GetAllSettings(ProjectCollectionSettings& projectCollectionSettings, ICollection`1& teamProjectSettings);
}
internal class Microsoft.TeamFoundation.Client.ProjectSettings.PreFrameworkSettingsProvider : object {
    private TfsTeamProjectCollection m_tfs;
    public PreFrameworkSettingsProvider(TfsTeamProjectCollection teamProjectCollection);
    public sealed virtual void GetAllSettings(ProjectCollectionSettings& projectCollectionSettings, ICollection`1& teamProjectSettings);
    private ProjectCollectionSettings GetProjectCollectionSettings();
    private Uri GetServiceLocation(string toolId, string serviceType);
    private Database GetDatabaseFromRegistration(string databaseType);
    private List`1<TeamProjectSettings> InternalGetTeamProjectSettings();
}
[EditorBrowsableAttribute("1")]
public class Microsoft.TeamFoundation.Client.ProjectSettings.ProjectCollectionSettings : object {
    [CompilerGeneratedAttribute]
private Uri <SiteCreationLocation>k__BackingField;
    [CompilerGeneratedAttribute]
private Uri <AdminUrlServiceLocation>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ReportFolder>k__BackingField;
    [CompilerGeneratedAttribute]
private Uri <ReportServerServiceLocation>k__BackingField;
    [CompilerGeneratedAttribute]
private Uri <ReportsManagerServiceLocation>k__BackingField;
    [CompilerGeneratedAttribute]
private string <CubeDatabaseName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <CubeServerName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <CubeConnectionString>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ReportWarehouseDatabaseName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ReportWarehoueServerName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ReportWarehouseConnectionString>k__BackingField;
    public Uri SiteCreationLocation { get; private set; }
    public Uri AdminUrlServiceLocation { get; private set; }
    public string ReportFolder { get; private set; }
    public Uri ReportServerServiceLocation { get; private set; }
    public Uri ReportsManagerServiceLocation { get; private set; }
    public string CubeDatabaseName { get; private set; }
    public string CubeServerName { get; private set; }
    public string CubeConnectionString { get; private set; }
    public string ReportWarehouseDatabaseName { get; private set; }
    public string ReportWarehoueServerName { get; private set; }
    public string ReportWarehouseConnectionString { get; private set; }
    internal ProjectCollectionSettings(Uri siteCreationLocation, Uri adminUri, string reportFolder, Uri reportServerUri, Uri reportManagerUri, string cubeDbName, string cubeServerName, string cubeConnectionString, string warehouseDbName, string warehouseServerName, string warehouseConnectionString);
    [CompilerGeneratedAttribute]
public Uri get_SiteCreationLocation();
    [CompilerGeneratedAttribute]
private void set_SiteCreationLocation(Uri value);
    [CompilerGeneratedAttribute]
public Uri get_AdminUrlServiceLocation();
    [CompilerGeneratedAttribute]
private void set_AdminUrlServiceLocation(Uri value);
    [CompilerGeneratedAttribute]
public string get_ReportFolder();
    [CompilerGeneratedAttribute]
private void set_ReportFolder(string value);
    [CompilerGeneratedAttribute]
public Uri get_ReportServerServiceLocation();
    [CompilerGeneratedAttribute]
private void set_ReportServerServiceLocation(Uri value);
    [CompilerGeneratedAttribute]
public Uri get_ReportsManagerServiceLocation();
    [CompilerGeneratedAttribute]
private void set_ReportsManagerServiceLocation(Uri value);
    [CompilerGeneratedAttribute]
public string get_CubeDatabaseName();
    [CompilerGeneratedAttribute]
private void set_CubeDatabaseName(string value);
    [CompilerGeneratedAttribute]
public string get_CubeServerName();
    [CompilerGeneratedAttribute]
private void set_CubeServerName(string value);
    [CompilerGeneratedAttribute]
public string get_CubeConnectionString();
    [CompilerGeneratedAttribute]
private void set_CubeConnectionString(string value);
    [CompilerGeneratedAttribute]
public string get_ReportWarehouseDatabaseName();
    [CompilerGeneratedAttribute]
private void set_ReportWarehouseDatabaseName(string value);
    [CompilerGeneratedAttribute]
public string get_ReportWarehoueServerName();
    [CompilerGeneratedAttribute]
private void set_ReportWarehoueServerName(string value);
    [CompilerGeneratedAttribute]
public string get_ReportWarehouseConnectionString();
    [CompilerGeneratedAttribute]
private void set_ReportWarehouseConnectionString(string value);
}
[EditorBrowsableAttribute("1")]
public static class Microsoft.TeamFoundation.Client.ProjectSettings.ReportingSettings : object {
    public static bool IsReportingConfigured(TfsTeamProjectCollection tpc);
    public static bool IsReportingConfigured(TfsTeamProjectCollection tpc, Uri projectUri);
    public static bool IsReportingCubeConfigured(TfsTeamProjectCollection tpc, String& server, String& database, String& connectionStr);
    public static Uri GetReportServiceUri(TfsTeamProjectCollection tpc);
    public static string GetBaseProjectCollectionPath(TfsTeamProjectCollection tpc);
    public static string GetBaseProjectPath(TfsTeamProjectCollection tpc, string projectUri);
    public static Uri GetReportSiteUri(TfsTeamProjectCollection tpc, string projectUri);
    public static Uri GetReportManagerUri(TfsTeamProjectCollection tpc);
}
[EditorBrowsableAttribute("1")]
public class Microsoft.TeamFoundation.Client.ProjectSettings.TeamProjectSettings : object {
    [CompilerGeneratedAttribute]
private Guid <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private Uri <ProjectUri>k__BackingField;
    [CompilerGeneratedAttribute]
private ProjectState <State>k__BackingField;
    [CompilerGeneratedAttribute]
private Uri <Portal>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <PortalIsSharePoint>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsOwnerOfSharePointPortal>k__BackingField;
    [CompilerGeneratedAttribute]
private Uri <Guidance>k__BackingField;
    [CompilerGeneratedAttribute]
private string <GuidanceFileName>k__BackingField;
    [CompilerGeneratedAttribute]
private ProcessGuidanceType <GuidanceResourceType>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ReportFolder>k__BackingField;
    [CompilerGeneratedAttribute]
private string <CatalogNodeFullPath>k__BackingField;
    [CompilerGeneratedAttribute]
private string <SccCapFlag>k__BackingField;
    [CompilerGeneratedAttribute]
private string <SupportsGit>k__BackingField;
    [CompilerGeneratedAttribute]
private string <SupportsTfvc>k__BackingField;
    public Guid Id { get; private set; }
    public string Name { get; private set; }
    public Uri ProjectUri { get; private set; }
    public ProjectState State { get; private set; }
    public Uri Portal { get; private set; }
    public bool PortalIsSharePoint { get; private set; }
    public bool IsOwnerOfSharePointPortal { get; private set; }
    public Uri Guidance { get; private set; }
    public string GuidanceFileName { get; private set; }
    public ProcessGuidanceType GuidanceResourceType { get; private set; }
    public string ReportFolder { get; private set; }
    internal string CatalogNodeFullPath { get; private set; }
    public Uri WellKnownGuidancePageUrl { get; }
    public string SccCapFlag { get; private set; }
    public string SupportsGit { get; private set; }
    public string SupportsTfvc { get; private set; }
    internal TeamProjectSettings(Guid id, string name, Uri projectUri, ProjectState state, Uri portalUri, bool portalIsSharePoint, bool ownsPortal, Uri guidanceUri, string guidanceFileName, ProcessGuidanceType guidanceType, string reportFolder, string catalogNodePath, string sccCapFlag, string supportsGit, string supportsTfvc);
    [CompilerGeneratedAttribute]
public Guid get_Id();
    [CompilerGeneratedAttribute]
private void set_Id(Guid value);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
private void set_Name(string value);
    [CompilerGeneratedAttribute]
public Uri get_ProjectUri();
    [CompilerGeneratedAttribute]
private void set_ProjectUri(Uri value);
    [CompilerGeneratedAttribute]
public ProjectState get_State();
    [CompilerGeneratedAttribute]
private void set_State(ProjectState value);
    [CompilerGeneratedAttribute]
public Uri get_Portal();
    [CompilerGeneratedAttribute]
private void set_Portal(Uri value);
    [CompilerGeneratedAttribute]
public bool get_PortalIsSharePoint();
    [CompilerGeneratedAttribute]
private void set_PortalIsSharePoint(bool value);
    [CompilerGeneratedAttribute]
public bool get_IsOwnerOfSharePointPortal();
    [CompilerGeneratedAttribute]
private void set_IsOwnerOfSharePointPortal(bool value);
    [CompilerGeneratedAttribute]
public Uri get_Guidance();
    [CompilerGeneratedAttribute]
private void set_Guidance(Uri value);
    [CompilerGeneratedAttribute]
public string get_GuidanceFileName();
    [CompilerGeneratedAttribute]
private void set_GuidanceFileName(string value);
    [CompilerGeneratedAttribute]
public ProcessGuidanceType get_GuidanceResourceType();
    [CompilerGeneratedAttribute]
private void set_GuidanceResourceType(ProcessGuidanceType value);
    [CompilerGeneratedAttribute]
public string get_ReportFolder();
    [CompilerGeneratedAttribute]
private void set_ReportFolder(string value);
    [CompilerGeneratedAttribute]
internal string get_CatalogNodeFullPath();
    [CompilerGeneratedAttribute]
private void set_CatalogNodeFullPath(string value);
    public Uri get_WellKnownGuidancePageUrl();
    [CompilerGeneratedAttribute]
public string get_SccCapFlag();
    [CompilerGeneratedAttribute]
private void set_SccCapFlag(string value);
    [CompilerGeneratedAttribute]
public string get_SupportsGit();
    [CompilerGeneratedAttribute]
private void set_SupportsGit(string value);
    [CompilerGeneratedAttribute]
public string get_SupportsTfvc();
    [CompilerGeneratedAttribute]
private void set_SupportsTfvc(string value);
}
[EditorBrowsableAttribute("1")]
public class Microsoft.TeamFoundation.Client.ProjectSettings.TpcSettingsStore : object {
    private bool m_isInitialized;
    private TfsTeamProjectCollection m_teamProjectCollection;
    private ITpcSettingsAdapter m_settingsAdapter;
    private Nullable`1<bool> m_supportsFramework;
    private ProjectCollectionSettings m_collectionSettings;
    private ConcurrentDictionary`2<Uri, TeamProjectSettings> m_projectSettingsCacheByUri;
    private ConcurrentDictionary`2<string, TeamProjectSettings> m_projectSettingsCacheByName;
    public bool SupportsFramework { get; }
    public ProjectCollectionSettings ProjectCollectionSettings { get; }
    public IEnumerable`1<Uri> TeamProjectsInCache { get; }
    private sealed virtual override void Microsoft.TeamFoundation.Client.ITfsTeamProjectCollectionObject.Initialize(TfsTeamProjectCollection teamProjectCollection);
    internal virtual void InitializeInternal();
    public bool get_SupportsFramework();
    public ProjectCollectionSettings get_ProjectCollectionSettings();
    public virtual TeamProjectSettings GetTeamProjectSettings(Uri projectUri);
    public TeamProjectSettings GetTeamProjectSettings(Uri projectUri, bool forceRefresh);
    public virtual TeamProjectSettings GetTeamProjectSettings(string projectName);
    public ICollection`1<TeamProjectSettings> GetTeamProjectSettings(ICollection`1<Uri> projectUris);
    public ICollection`1<TeamProjectSettings> GetTeamProjectSettings(ICollection`1<Uri> projectUris, bool refresh);
    public IEnumerable`1<Uri> get_TeamProjectsInCache();
    public void RemoveTeamProjectSettings(string projectName);
    public void InitializeSettingsCache();
    private void AddMissingUrisToCache(IEnumerable`1<Uri> projectUris);
    private void AddToCache(ICollection`1<TeamProjectSettings> tpSettings, bool clearCache);
    private void AddToCache(TeamProjectSettings tpSetting);
}
public class Microsoft.TeamFoundation.Client.ProxyStatistics : object {
    private ProxyStatisticsWebService m_service;
    public int Timeout { get; public set; }
    public ProxyStatistics(Uri url);
    public ProxyStatistics(TfsConnection tfs, Uri url);
    public int get_Timeout();
    public void set_Timeout(int value);
    public void Abort();
    public ProxyStatisticsInfo[] QueryProxyStatistics();
    public IAsyncResult BeginQueryProxyStatistics(AsyncCallback callback, object state);
    public ProxyStatisticsInfo[] EndQueryProxyStatistics(IAsyncResult result);
}
public class Microsoft.TeamFoundation.Client.ProxyStatisticsInfo : object {
    private float m_cacheHitsPercentage;
    private float m_cacheMissPercentage;
    private long m_currentCacheSize;
    private long m_noOfFilesInCache;
    private long m_noOfRequests;
    private long m_overallCacheHits;
    private long m_overallCacheMisses;
    private bool m_scanComplete;
    private string m_serverId;
    private string m_serverUrl;
    public float CacheHitsPercentage { get; public set; }
    public float CacheMissPercentage { get; public set; }
    public long CurrentCacheSize { get; public set; }
    public long NoOfFilesInCache { get; public set; }
    public long NoOfRequests { get; public set; }
    public long OverallCacheHits { get; public set; }
    public long OverallCacheMisses { get; public set; }
    public bool ScanComplete { get; public set; }
    public string ServerId { get; public set; }
    public string ServerUrl { get; public set; }
    public float get_CacheHitsPercentage();
    public void set_CacheHitsPercentage(float value);
    public float get_CacheMissPercentage();
    public void set_CacheMissPercentage(float value);
    public long get_CurrentCacheSize();
    public void set_CurrentCacheSize(long value);
    public long get_NoOfFilesInCache();
    public void set_NoOfFilesInCache(long value);
    public long get_NoOfRequests();
    public void set_NoOfRequests(long value);
    public long get_OverallCacheHits();
    public void set_OverallCacheHits(long value);
    public long get_OverallCacheMisses();
    public void set_OverallCacheMisses(long value);
    public bool get_ScanComplete();
    public void set_ScanComplete(bool value);
    public string get_ServerId();
    public void set_ServerId(string value);
    public string get_ServerUrl();
    public void set_ServerUrl(string value);
    internal static ProxyStatisticsInfo FromXml(IServiceProvider serviceProvider, XmlReader reader);
    public virtual string ToString();
    internal void ToXml(XmlWriter writer, string element);
    internal static void ToXml(XmlWriter writer, string element, ProxyStatisticsInfo obj);
}
internal class Microsoft.TeamFoundation.Client.ProxyStatisticsWebService : TfsHttpClientBase {
    [CompilerGeneratedAttribute]
private Nullable`1<int> <Timeout>k__BackingField;
    protected string ComponentName { get; }
    public Nullable`1<int> Timeout { get; public set; }
    public ProxyStatisticsWebService(VssCredentials credentials, Uri url);
    protected virtual string get_ComponentName();
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_Timeout();
    [CompilerGeneratedAttribute]
public void set_Timeout(Nullable`1<int> value);
    protected virtual TfsRequestSettings ApplyCustomSettings(TfsRequestSettings settings);
    protected virtual Exception ConvertException(SoapException exception);
    public ProxyStatisticsInfo[] QueryProxyStatistics();
    public IAsyncResult BeginQueryProxyStatistics(AsyncCallback callback, object state);
    public ProxyStatisticsInfo[] EndQueryProxyStatistics(IAsyncResult result);
}
[DefaultMemberAttribute("Item")]
public class Microsoft.TeamFoundation.Client.ReadOnlyDictionary`2 : object {
    private IDictionary`2<TKey, TValue> m_dictionary;
    public ICollection`1<TKey> Keys { get; }
    public ICollection`1<TValue> Values { get; }
    public TValue Item { get; }
    public int Count { get; }
    private TValue System.Collections.Generic.IDictionary<TKey,TValue>.Item { get; private set; }
    private int System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.Count { get; }
    private bool System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.IsReadOnly { get; }
    private bool System.Collections.IDictionary.IsFixedSize { get; }
    private bool System.Collections.IDictionary.IsReadOnly { get; }
    private ICollection System.Collections.IDictionary.Keys { get; }
    private ICollection System.Collections.IDictionary.Values { get; }
    private object System.Collections.IDictionary.Item { get; private set; }
    private int System.Collections.ICollection.Count { get; }
    private bool System.Collections.ICollection.IsSynchronized { get; }
    private object System.Collections.ICollection.SyncRoot { get; }
    public ReadOnlyDictionary`2(IDictionary`2<TKey, TValue> dictionary);
    public sealed virtual bool ContainsKey(TKey key);
    public sealed virtual ICollection`1<TKey> get_Keys();
    public sealed virtual bool TryGetValue(TKey key, TValue& value);
    public sealed virtual ICollection`1<TValue> get_Values();
    public TValue get_Item(TKey key);
    public int get_Count();
    public sealed virtual IEnumerator`1<KeyValuePair`2<TKey, TValue>> GetEnumerator();
    private sealed virtual override void System.Collections.Generic.IDictionary<TKey,TValue>.Add(TKey key, TValue value);
    private sealed virtual override bool System.Collections.Generic.IDictionary<TKey,TValue>.Remove(TKey key);
    private sealed virtual override TValue System.Collections.Generic.IDictionary<TKey,TValue>.get_Item(TKey key);
    private sealed virtual override void System.Collections.Generic.IDictionary<TKey,TValue>.set_Item(TKey key, TValue value);
    private sealed virtual override void System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.Add(KeyValuePair`2<TKey, TValue> item);
    private sealed virtual override void System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.Clear();
    private sealed virtual override bool System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.Contains(KeyValuePair`2<TKey, TValue> item);
    private sealed virtual override void System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.CopyTo(KeyValuePair`2[] array, int arrayIndex);
    private sealed virtual override int System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.get_Count();
    private sealed virtual override bool System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.get_IsReadOnly();
    private sealed virtual override bool System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.Remove(KeyValuePair`2<TKey, TValue> item);
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    private sealed virtual override void System.Collections.IDictionary.Add(object key, object value);
    private sealed virtual override void System.Collections.IDictionary.Clear();
    private sealed virtual override bool System.Collections.IDictionary.Contains(object key);
    private sealed virtual override IDictionaryEnumerator System.Collections.IDictionary.GetEnumerator();
    private sealed virtual override bool System.Collections.IDictionary.get_IsFixedSize();
    private sealed virtual override bool System.Collections.IDictionary.get_IsReadOnly();
    private sealed virtual override ICollection System.Collections.IDictionary.get_Keys();
    private sealed virtual override void System.Collections.IDictionary.Remove(object key);
    private sealed virtual override ICollection System.Collections.IDictionary.get_Values();
    private sealed virtual override object System.Collections.IDictionary.get_Item(object key);
    private sealed virtual override void System.Collections.IDictionary.set_Item(object key, object value);
    private sealed virtual override void System.Collections.ICollection.CopyTo(Array array, int index);
    private sealed virtual override int System.Collections.ICollection.get_Count();
    private sealed virtual override bool System.Collections.ICollection.get_IsSynchronized();
    private sealed virtual override object System.Collections.ICollection.get_SyncRoot();
}
public class Microsoft.TeamFoundation.Client.RegisteredConfigurationServer : object {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private Uri <Uri>k__BackingField;
    [CompilerGeneratedAttribute]
private Guid <InstanceId>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <IsHosted>k__BackingField;
    [CompilerGeneratedAttribute]
private string <RegistryKeyName>k__BackingField;
    public string Name { get; private set; }
    public Uri Uri { get; private set; }
    public Guid InstanceId { get; private set; }
    public Nullable`1<bool> IsHosted { get; private set; }
    internal string RegistryKeyName { get; private set; }
    internal RegisteredConfigurationServer(ServerInfo info);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
private void set_Name(string value);
    [CompilerGeneratedAttribute]
public Uri get_Uri();
    [CompilerGeneratedAttribute]
private void set_Uri(Uri value);
    [CompilerGeneratedAttribute]
public Guid get_InstanceId();
    [CompilerGeneratedAttribute]
private void set_InstanceId(Guid value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_IsHosted();
    [CompilerGeneratedAttribute]
private void set_IsHosted(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
internal string get_RegistryKeyName();
    [CompilerGeneratedAttribute]
private void set_RegistryKeyName(string value);
}
public class Microsoft.TeamFoundation.Client.RegisteredProjectCollection : object {
    private bool m_offline;
    private bool m_autoReconnect;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DisplayName>k__BackingField;
    [CompilerGeneratedAttribute]
private Uri <Uri>k__BackingField;
    [CompilerGeneratedAttribute]
private Guid <InstanceId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <RegistryKeyName>k__BackingField;
    public string Name { get; private set; }
    public string DisplayName { get; private set; }
    public Uri Uri { get; private set; }
    public Guid InstanceId { get; private set; }
    public bool Offline { get; public set; }
    public bool AutoReconnect { get; public set; }
    internal string RegistryKeyName { get; private set; }
    internal RegisteredProjectCollection(ServerInfo info);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
private void set_Name(string value);
    [CompilerGeneratedAttribute]
public string get_DisplayName();
    [CompilerGeneratedAttribute]
private void set_DisplayName(string value);
    [CompilerGeneratedAttribute]
public Uri get_Uri();
    [CompilerGeneratedAttribute]
private void set_Uri(Uri value);
    [CompilerGeneratedAttribute]
public Guid get_InstanceId();
    [CompilerGeneratedAttribute]
private void set_InstanceId(Guid value);
    public bool get_Offline();
    public void set_Offline(bool value);
    public bool get_AutoReconnect();
    public void set_AutoReconnect(bool value);
    [CompilerGeneratedAttribute]
internal string get_RegistryKeyName();
    [CompilerGeneratedAttribute]
private void set_RegistryKeyName(string value);
}
public static class Microsoft.TeamFoundation.Client.RegisteredTfsConnections : object {
    private static string m_currentUserRegistryRoot;
    private static string cInstancesKey;
    private static string cCollectionSubKey;
    private static string cDeleted;
    private static string cType;
    private static string cUri;
    private static string cOffline;
    private static string cAutoReconnect;
    private static string cInstanceId;
    private static string cIsHosted;
    private static char cSeparator;
    private static string CurrentUserRegistryRoot { get; }
    public static void RegisterConfigurationServer(TfsConfigurationServer configurationServer);
    public static void RegisterConfigurationServer(Uri uri, Guid instanceId, Nullable`1<bool> isHosted);
    public static void UnregisterConfigurationServer(string name);
    public static RegisteredConfigurationServer[] GetConfigurationServers();
    public static RegisteredConfigurationServer GetConfigurationServer(string name);
    public static RegisteredConfigurationServer GetConfigurationServer(Uri uri);
    [EditorBrowsableAttribute("1")]
public static void UpdateConfigurationServers(List`1<Tuple`2<Uri, Guid>> servers);
    public static void RegisterProjectCollection(TfsTeamProjectCollection projectCollection);
    public static void UnregisterProjectCollection(string name);
    public static RegisteredProjectCollection[] GetProjectCollections();
    public static RegisteredProjectCollection[] GetLegacyProjectCollections();
    public static List`1<RegisteredProjectCollection> GetProjectCollections(string serverName);
    public static RegisteredProjectCollection GetProjectCollection(string name);
    public static RegisteredProjectCollection GetProjectCollection(Uri uri);
    internal static RegistryKey GetServerSubKey(Uri uri, string subkeyName);
    internal static void SetOfflineInternal(string tpcRegKey, bool offline);
    internal static void SetAutoReconnectInternal(string tpcRegKey, bool autoReconnect);
    private static void SetBoolAttributeInternal(string tpcRegKey, string attributeName, bool value);
    private static string GetLegacyServerName(TfsTeamProjectCollection server);
    private static void RegisterConfigurationServerInternal(Uri uri, string name, ServerType type, Guid instanceId, Nullable`1<bool> isHosted);
    private static void RegisterCollectionInternal(string applicationName, Uri uri, string name, Guid instanceId);
    private static void RemoveDuplicateCollections(RegistryKey instanceKey, Uri uri, string name);
    private static void RemoveConfigurationServer(string name);
    private static void UnregisterConfigurationServerInternal(string name);
    private static void UnregisterCollectionInternal(string configurationServerName, string collectionName);
    private static RegisteredConfigurationServer[] GetConfigurationServersInternal();
    private static List`1<RegisteredProjectCollection> GetCollectionsInternal(bool returnOnlyLegacyServers);
    private static List`1<RegisteredProjectCollection> GetCollectionsInternal(string serverName, ServerType serverType);
    private static RegisteredConfigurationServer GetConfigurationServerInternal(string name);
    private static RegisteredConfigurationServer GetConfigurationServerInternal(Uri uri);
    private static List`1<ServerInfo> GetInstancesInfos(bool includeDeleted);
    private static List`1<ServerInfo> GetInfos(RegistryKey key);
    private static RegistryKey OpenCurrentUser(string key, bool writable, bool shouldCreate);
    private static string get_CurrentUserRegistryRoot();
}
[EditorBrowsableAttribute("1")]
public class Microsoft.TeamFoundation.Client.ResultCollection`2 : object {
    private bool m_disposed;
    private ITfsResult m_previous;
    private bool m_complete;
    private TfsRequestContext m_context;
    private string m_xmlElement;
    private ResultSetEnumerator<T, V> m_enumerator;
    private T m_current;
    private T m_last;
    private Queue`1<T> m_queue;
    private bool m_firstItem;
    protected V Current { get; }
    public ITfsResult Previous { get; public set; }
    public bool IsComplete { get; public set; }
    public TfsRequestContext Context { get; public set; }
    public string XmlElement { get; public set; }
    protected Queue`1<T> Queue { get; }
    protected bool HasQueuedItems { get; }
    protected IEnumerator`1<V> Enumerator { get; }
    public ResultCollection`2(TfsRequestContext context);
    public ResultCollection`2(TfsRequestContext context, string xmlElement);
    public ResultCollection`2(TfsRequestContext context, string xmlElement, ITfsResult previous);
    protected virtual override void Finalize();
    public sealed virtual void Dispose();
    protected void Dispose(bool disposing);
    protected void CheckDisposed();
    public sealed virtual IEnumerator`1<V> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    protected bool MoveNext();
    protected void Reset();
    protected V get_Current();
    public sealed virtual void ReadAll();
    public sealed virtual ITfsResult get_Previous();
    public void set_Previous(ITfsResult value);
    public sealed virtual bool get_IsComplete();
    public void set_IsComplete(bool value);
    public sealed virtual TfsRequestContext get_Context();
    public sealed virtual void set_Context(TfsRequestContext value);
    public sealed virtual string get_XmlElement();
    public void set_XmlElement(string value);
    private sealed virtual override void Microsoft.TeamFoundation.Client.ITfsXmlSerializable.WriteXml(XmlWriter writer, string element);
    private sealed virtual override void Microsoft.TeamFoundation.Client.ITfsXmlSerializable.ReadXml(XmlReader reader, string element);
    private bool MoveToNextXmlElement();
    private T CreateNext();
    protected Queue`1<T> get_Queue();
    protected bool get_HasQueuedItems();
    protected IEnumerator`1<V> get_Enumerator();
}
[FlagsAttribute]
public enum Microsoft.TeamFoundation.Client.RuntimeEnvironmentFlags : Enum {
    public int value__;
    public static RuntimeEnvironmentFlags None;
    public static RuntimeEnvironmentFlags Windows;
    public static RuntimeEnvironmentFlags Vsip;
    public static RuntimeEnvironmentFlags Console;
    public static RuntimeEnvironmentFlags Office;
}
internal class Microsoft.TeamFoundation.Client.SelectToolStripLabel : ToolStripLabel {
    protected Size DefaultSize { get; }
    protected Padding DefaultMargin { get; }
    protected Padding DefaultPadding { get; }
    protected virtual Size get_DefaultSize();
    protected virtual Padding get_DefaultMargin();
    protected virtual Padding get_DefaultPadding();
    public virtual Size GetPreferredSize(Size proposedSize);
    internal void SelectToolStrip();
}
[FlagsAttribute]
public enum Microsoft.TeamFoundation.Client.ServerCapabilities : Enum {
    public int value__;
    public static ServerCapabilities None;
    public static ServerCapabilities Hosted;
    public static ServerCapabilities Email;
    public static ServerCapabilities All;
}
internal class Microsoft.TeamFoundation.Client.ServerEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
private TfsConnection <Server>k__BackingField;
    internal TfsConnection Server { get; private set; }
    internal ServerEventArgs(TfsConnection tfs);
    [CompilerGeneratedAttribute]
internal TfsConnection get_Server();
    [CompilerGeneratedAttribute]
private void set_Server(TfsConnection value);
}
internal class Microsoft.TeamFoundation.Client.ServerEventHandler : MulticastDelegate {
    public ServerEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, ServerEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, ServerEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
[EditorBrowsableAttribute("1")]
public class Microsoft.TeamFoundation.Client.ServiceProviderAggregator : object {
    private Object[] m_providers;
    public ServiceProviderAggregator(Object[] list);
    public sealed virtual object GetService(Type type);
    [ConditionalAttribute("DEBUG")]
private void CheckList();
}
[ObsoleteAttribute("This class is deprecated and will be removed in a future release. See Microsoft.VisualStudio.Services.Common.VssServiceIdentityToken instead.", "False")]
public class Microsoft.TeamFoundation.Client.SimpleWebToken : IssuedToken {
    private string m_token;
    private static string c_expiresName;
    private static DateTime s_epoch;
    public string Token { get; }
    protected internal VssCredentialsType CredentialType { get; }
    public SimpleWebToken(string token);
    private static SimpleWebToken();
    public string get_Token();
    protected internal virtual VssCredentialsType get_CredentialType();
    internal virtual void ApplyTo(HttpWebRequest request);
    internal static SimpleWebToken ExtractToken(Byte[] responseData, Encoding encoding);
    internal static bool TryGetNameValues(string token, Dictionary`2& tokenValues);
}
[ObsoleteAttribute("This class is deprecated and will be removed in a future release. See Microsoft.VisualStudio.Services.Common.VssServiceIdentityCredential instead.", "False")]
public class Microsoft.TeamFoundation.Client.SimpleWebTokenCredential : FederatedCredential {
    private string m_userName;
    private string m_password;
    public string UserName { get; }
    internal string Password { get; }
    protected VssCredentialsType CredentialType { get; }
    public SimpleWebTokenCredential(string userName, string password);
    public SimpleWebTokenCredential(string userName, string password, SimpleWebToken initialToken);
    public string get_UserName();
    internal string get_Password();
    protected virtual VssCredentialsType get_CredentialType();
    internal virtual bool IsAuthenticationChallenge(HttpWebResponse webResponse);
    internal virtual IssuedTokenProvider OnCreateTokenProvider(Uri serverUrl, HttpWebResponse response);
}
[ObsoleteAttribute("This class is deprecated and will be removed in a future release. See Microsoft.VisualStudio.Services.Common.VssServiceIdentityTokenProvider instead.", "False")]
internal class Microsoft.TeamFoundation.Client.SimpleWebTokenProvider : IssuedTokenProvider {
    [CompilerGeneratedAttribute]
private string <Realm>k__BackingField;
    public SimpleWebTokenCredential Credential { get; }
    public bool GetTokenIsInteractive { get; }
    public string Realm { get; private set; }
    public SimpleWebTokenProvider(SimpleWebTokenCredential credential, Uri serverUrl, Uri signInUrl, string realm);
    public SimpleWebTokenCredential get_Credential();
    public virtual bool get_GetTokenIsInteractive();
    [CompilerGeneratedAttribute]
public string get_Realm();
    [CompilerGeneratedAttribute]
private void set_Realm(string value);
    internal virtual bool IsAuthenticationChallenge(HttpWebResponse webResponse);
    protected virtual IssuedToken OnGetToken(IssuedToken failedToken, TimeSpan timeout);
    protected virtual IAsyncResult OnBeginGetToken(IssuedToken failedToken, TimeSpan timeout, AsyncCallback callback, object state);
    protected virtual IssuedToken OnEndGetToken(IAsyncResult result);
}
[EditorBrowsableAttribute("1")]
public abstract class Microsoft.TeamFoundation.Client.SuggestedValueCacheService : object {
    private static int s_expirationMilliseconds;
    protected TfsTeamProjectCollection m_projectCollection;
    protected IVssHttpClient m_proxy;
    protected Dictionary`2<Guid, ScopeSuggestedValue> m_cache;
    protected object m_lock;
    private static SuggestedValueCacheService();
    private sealed virtual override void Microsoft.TeamFoundation.Client.ITfsTeamProjectCollectionObject.Initialize(TfsTeamProjectCollection projectCollection);
    protected abstract virtual void OnInitialize();
    public IReadOnlyList`1<string> GetCachedValues(Guid scope);
    public bool IsPopulated(Guid scope);
    public bool IsExpired(Guid scope);
    public Task`1<IReadOnlyList`1<string>> RefreshAsync(Guid scope);
    internal void SetExpirationInternal(int milliseconds);
    internal void SetProxyInternal(IVssHttpClient proxy);
    protected abstract virtual Task`1<IReadOnlyList`1<string>> GetValueAsync(Guid scope, ScopeSuggestedValue scopeValues);
    protected IReadOnlyList`1<string> ProcessGetSuggestedValuesAsyncTaskResult(Task task, ScopeSuggestedValue scopeValues, Action action);
}
[EditorBrowsableAttribute("1")]
public class Microsoft.TeamFoundation.Client.TagsCacheService : SuggestedValueCacheService {
    protected virtual void OnInitialize();
    public IReadOnlyList`1<string> GetCachedTags(Guid scope);
    protected virtual Task`1<IReadOnlyList`1<string>> GetValueAsync(Guid scope, ScopeSuggestedValue scopeValues);
}
[EditorBrowsableAttribute("1")]
public class Microsoft.TeamFoundation.Client.TeamExplorerProjects : object {
    private string m_fileName;
    private bool m_autoLoad;
    private Uri m_defaultServerUri;
    private Dictionary`2<Uri, ServerSettings> m_servers;
    private Dictionary`2<Guid, CollectionSettings> m_collections;
    private object m_dataLock;
    private static TeamExplorerProjects m_teamExplorerProject;
    private static string cTEFolderName;
    private static string cTEConfigFileName;
    private static string cServerListElement;
    private static string cServerElement;
    private static string cCollectionElement;
    private static string cQueryElement;
    private static string cProjectElement;
    private static string cActiveAttribute;
    private static string cTeamAttribute;
    private static string cCurrentAttribute;
    private static string cAutoloadAttribute;
    private static string cGuidAttribute;
    private static string cUrlAttribute;
    private static string cProjectUriAttribute;
    private static string cNameAttribute;
    private static string cIsHostedAttribute;
    private static string cCapFlagsSccAttribute;
    private static string cSupportsGitAttribute;
    private static string cSupportsTFVCAttribute;
    private static string cRepositoryElement;
    private static string cRepositoryTypeAttribute;
    private static string cRepositoryIsForkAttribute;
    private static string cRepositoryActiveCloneAttribute;
    private static string cYes;
    private static string cTFHostConfigWriteError;
    public static TeamExplorerProjects Instance { get; }
    public string DefaultCollectionUrl { get; }
    public Guid DefaultCollectionId { get; }
    public bool AutoLoad { get; public set; }
    private TeamExplorerProjects(string fileName);
    public static TeamExplorerProjects get_Instance();
    public ITeamProjectPickerDefaultSelectionProvider GetDefaultSelectionProvider(TeamProjectPickerMode mode);
    public string get_DefaultCollectionUrl();
    public Guid get_DefaultCollectionId();
    public bool get_AutoLoad();
    public void set_AutoLoad(bool value);
    public void Save();
    public bool TryGetCollectionId(string collectionUrl, Guid& collectionId);
    public List`1<Guid> GetCollectionIds();
    public Dictionary`2<string, string> GetCollectionProperties(Guid collectionId);
    public List`1<string> GetProjectsForCollection(Guid collectionId);
    public void SetProjectsForCollection(TfsTeamProjectCollection tpc, IEnumerable`1<Uri> projectUris);
    public void SetProjectsForCollection(TfsTeamProjectCollection tpc, IEnumerable`1<string> projectUris);
    public void AddProjectForCollection(TfsTeamProjectCollection tpc, string projectUri);
    public void RemoveProjectForCollection(Guid collectionId, string projectUri);
    public bool SetProjectProperties(Guid collectionId, string projectUri, Dictionary`2<string, string> properties);
    public Dictionary`2<string, string> GetProjectProperties(Guid collectionId, string projectUri);
    public Nullable`1<Guid> GetDefaultQueryGuid(Guid collectionId, string projectUri);
    public void SetDefaultQueryGuid(TfsTeamProjectCollection tpc, string projectUri, Guid queryGuid);
    public string GetActiveProjectForCollection(Guid collectionId);
    public string GetActiveProjectForCollection(string collectionUrl);
    public Guid GetActiveTeamForCollection(Guid collectionId);
    public Guid GetActiveTeamForCollection(string collectionUrl);
    public void SetActiveProjectForCollection(TfsTeamProjectCollection tpc, string projectUri);
    public void SetActiveProjectForCollection(TfsTeamProjectCollection tpc, string projectUri, Guid teamId);
    public void SetDefaultCollection(TfsTeamProjectCollection tpc);
    public List`1<Guid> GetRepositoriesForProject(Guid collectionId, string projectUri, string repositoryType);
    public List`1<Guid> GetRepositoriesForProject(Guid collectionId, string projectUri);
    public List`1<Guid> GetActiveRepositoriesForProject(Guid collectionId, string projectUri);
    public List`1<Guid> GetActiveRepositoriesForProject(string collectionUrl, string projectUri);
    public void SetRepositoriesForProject(Guid collectionId, string projectUri, IEnumerable`1<RepositorySettings> repositories);
    public void RemoveRepositoriesForProjectByType(Guid collectionId, string projectUri, string repositoryType);
    private void CleanActiveRepositories(ProjectSettings ps);
    public void AddRepositoryForProject(Guid collectionId, string projectUri, Guid repositoryId, string repositoryType, string repositoryName, Nullable`1<bool> isFork);
    public void RemoveRepositoryForProject(Guid collectionId, string projectUri, Guid repositoryId);
    public void SetActiveRepositoriesForProject(Guid collectionId, string projectUri, IEnumerable`1<Guid> repositoryIds);
    public Dictionary`2<string, string> GetRepositoryProperties(Guid collectionId, string projectUri, Guid repositoryId);
    public bool SetRepositoryProperties(Guid collectionId, string projectUri, Guid repositoryId, Dictionary`2<string, string> properties);
    private CollectionSettings GetOrCreateCollectionSettings(TfsTeamProjectCollection tpc);
    private void RemoveCollectionFromServersCache(Guid collectionId);
    private ProjectSettings FindProject(CollectionSettings collectionSettings, string projectUri);
    private int FindProjectIndex(CollectionSettings collectionSettings, string projectUri);
    private RepositorySettings FindRepository(ProjectSettings projectSettings, Guid repositoryId);
    private int FindRepositoryIndex(ProjectSettings projectSettings, Guid repositoryId);
    private void LoadFile();
    private static bool TryParseUri(string s, Uri& result);
    private static bool TryParseGuid(string s, Guid& result);
    private void Clear();
    protected void ReadConfig(XmlReader reader);
    protected virtual void WriteConfig();
    private void DeleteConfigFile();
}
[EditorBrowsableAttribute("1")]
public static class Microsoft.TeamFoundation.Client.TeamExplorerProjectsConstants : object {
    public static string CollectionIdProperty;
    public static string CollectionIsHostedProperty;
    public static string CollectionNameProperty;
    public static string CollectionUriProperty;
    public static string ProjectCapFlagsSccProperty;
    public static string ProjectSupportsGitProperty;
    public static string ProjectSupportsTFVCProperty;
    public static string ProjectNameProperty;
    public static string ProjectUriProperty;
    public static string TeamIdProperty;
    public static string RepositoryTypeProperty;
    public static string RepositoryIdProperty;
    public static string RepositoryNameProperty;
    public static string RepositoryActiveCloneProperty;
    public static string RepositoryIsForkProperty;
}
[EditorBrowsableAttribute("1")]
public class Microsoft.TeamFoundation.Client.TeamFoundationContext : object {
    private static TeamFoundationContext s_empty;
    [CompilerGeneratedAttribute]
private TfsTeamProjectCollection <TeamProjectCollection>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TeamProjectName>k__BackingField;
    [CompilerGeneratedAttribute]
private Uri <TeamProjectUri>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TeamName>k__BackingField;
    [CompilerGeneratedAttribute]
private Guid <TeamId>k__BackingField;
    [CompilerGeneratedAttribute]
private TeamFoundationSourceControlType <SourceControlType>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<Guid> <RepositoryIds>k__BackingField;
    public static TeamFoundationContext Empty { get; }
    public TfsTeamProjectCollection TeamProjectCollection { get; private set; }
    public bool HasCollection { get; }
    public string TeamProjectName { get; private set; }
    public Uri TeamProjectUri { get; private set; }
    public bool HasTeamProject { get; }
    public string TeamName { get; private set; }
    public Guid TeamId { get; private set; }
    public bool HasTeam { get; }
    public TeamFoundationSourceControlType SourceControlType { get; private set; }
    public IReadOnlyList`1<Guid> RepositoryIds { get; private set; }
    public bool HasRepositoryIds { get; }
    public TeamFoundationContext(TfsTeamProjectCollection collection, string teamProjectName, string teamProjectUri);
    public TeamFoundationContext(TfsTeamProjectCollection collection, string teamProjectName, string teamProjectUri, string teamName, Guid teamId, IEnumerable`1<Guid> repositoryIds, TeamFoundationSourceControlType sourceControlType);
    private static TeamFoundationContext();
    public static TeamFoundationContext get_Empty();
    [CompilerGeneratedAttribute]
public sealed virtual TfsTeamProjectCollection get_TeamProjectCollection();
    [CompilerGeneratedAttribute]
private void set_TeamProjectCollection(TfsTeamProjectCollection value);
    public sealed virtual bool get_HasCollection();
    [CompilerGeneratedAttribute]
public sealed virtual string get_TeamProjectName();
    [CompilerGeneratedAttribute]
private void set_TeamProjectName(string value);
    [CompilerGeneratedAttribute]
public sealed virtual Uri get_TeamProjectUri();
    [CompilerGeneratedAttribute]
private void set_TeamProjectUri(Uri value);
    public sealed virtual bool get_HasTeamProject();
    [CompilerGeneratedAttribute]
public sealed virtual string get_TeamName();
    [CompilerGeneratedAttribute]
private void set_TeamName(string value);
    [CompilerGeneratedAttribute]
public sealed virtual Guid get_TeamId();
    [CompilerGeneratedAttribute]
private void set_TeamId(Guid value);
    public sealed virtual bool get_HasTeam();
    [CompilerGeneratedAttribute]
public sealed virtual TeamFoundationSourceControlType get_SourceControlType();
    [CompilerGeneratedAttribute]
private void set_SourceControlType(TeamFoundationSourceControlType value);
    [CompilerGeneratedAttribute]
public sealed virtual IReadOnlyList`1<Guid> get_RepositoryIds();
    [CompilerGeneratedAttribute]
private void set_RepositoryIds(IReadOnlyList`1<Guid> value);
    public sealed virtual bool get_HasRepositoryIds();
}
[ExtensionAttribute]
[EditorBrowsableAttribute("1")]
public static class Microsoft.TeamFoundation.Client.TeamFoundationContextExtensions : object {
    [ExtensionAttribute]
public static string DomainName(ITeamFoundationContext context);
    [ExtensionAttribute]
public static string DomainUri(ITeamFoundationContext context);
    [ExtensionAttribute]
public static string ProjectUri(ITeamFoundationContext context);
    [ExtensionAttribute]
public static Guid TeamProjectGuid(ITeamFoundationContext context);
}
[EditorBrowsableAttribute("1")]
public static class Microsoft.TeamFoundation.Client.TeamFoundationContextHelper : object {
    public static bool IsProjectActive(IServiceProvider serviceProvider, Guid collectionId, string projectUri);
}
public class Microsoft.TeamFoundation.Client.TeamFoundationDateTimePicker : DateTimePicker {
    private Color m_alternateBackgroundColor;
    private bool m_useAlternateBackgroundColor;
    [BrowsableAttribute("True")]
[DescriptionAttribute("Enables use of the alternate background color for the date time picker control")]
[CategoryAttribute("Team Foundation")]
public bool UseAlternateBackgroundColor { get; public set; }
    [BrowsableAttribute("True")]
[DescriptionAttribute("Sets the alternate background color for the date time picker control")]
[CategoryAttribute("Team Foundation")]
public Color AlternateBackgroundColor { get; public set; }
    protected virtual void WndProc(Message& m);
    public bool get_UseAlternateBackgroundColor();
    public void set_UseAlternateBackgroundColor(bool value);
    public Color get_AlternateBackgroundColor();
    public void set_AlternateBackgroundColor(Color value);
}
[EditorBrowsableAttribute("1")]
public abstract class Microsoft.TeamFoundation.Client.TeamFoundationRuntimeHost : object {
    public Icon AppIcon { get; }
    public IWin32Window DefaultParentWindow { get; }
    public RuntimeEnvironmentFlags EnvironmentFlags { get; }
    public string NewLine { get; }
    public int OutputWidth { get; }
    public Encoding OutputEncoding { get; }
    public string VsApplicationDataPath { get; }
    public RegistryKey UserRegistryRoot { get; }
    public RegistryKey ApplicationRegistryRoot { get; }
    public UIHostColors HostColors { get; }
    public WinformsStyler WinformsStyler { get; }
    public Font Font { get; }
    public virtual void Shutdown();
    public virtual object GetService(Type type);
    public virtual Icon get_AppIcon();
    public virtual bool EnableModeless(bool enable);
    public abstract virtual DialogResult ShowMessageBox(IWin32Window parent, string text, string helpTopic, string caption, MessageBoxButtons buttons, MessageBoxIcon icon, MessageBoxDefaultButton defaultButton);
    public abstract virtual IWin32Window get_DefaultParentWindow();
    public abstract virtual RuntimeEnvironmentFlags get_EnvironmentFlags();
    public abstract virtual void Write(LogFlags flags, LogCategory category, string message);
    public virtual string get_NewLine();
    public virtual int get_OutputWidth();
    public virtual Encoding get_OutputEncoding();
    public virtual string get_VsApplicationDataPath();
    public virtual RegistryKey get_UserRegistryRoot();
    public virtual RegistryKey get_ApplicationRegistryRoot();
    public abstract virtual bool DisplayHelp(string helpTopic);
    public abstract virtual DialogResult ShowModalDialog(Form form, IWin32Window parent, bool showHelpButton);
    public abstract virtual UIHostColors get_HostColors();
    public abstract virtual WinformsStyler get_WinformsStyler();
    public abstract virtual Font get_Font();
    public abstract virtual WaitCursor GetWaitCursor();
    internal virtual string ExtractTFSDisplayName(string url);
    public virtual Bitmap ThemeBitmap(Bitmap image, Color backgroundColor);
    public virtual void UpdateCommandStatus();
}
[FlagsAttribute]
public enum Microsoft.TeamFoundation.Client.TeamFoundationSourceControlType : Enum {
    public int value__;
    public static TeamFoundationSourceControlType Default;
    public static TeamFoundationSourceControlType TFVC;
    public static TeamFoundationSourceControlType Git;
}
public class Microsoft.TeamFoundation.Client.TeamFoundationTeam : object {
    private Dictionary`2<Type, object> m_viewCache;
    private object m_cacheLock;
    [CompilerGeneratedAttribute]
private TeamFoundationIdentity <Identity>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsNameDirty>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsDescriptionDirty>k__BackingField;
    public TeamFoundationIdentity Identity { get; private set; }
    public string Project { get; }
    public string Name { get; public set; }
    public string Description { get; public set; }
    internal bool IsNameDirty { get; private set; }
    internal bool IsDescriptionDirty { get; private set; }
    internal TeamFoundationTeam(TeamFoundationIdentity team);
    [CompilerGeneratedAttribute]
public TeamFoundationIdentity get_Identity();
    [CompilerGeneratedAttribute]
private void set_Identity(TeamFoundationIdentity value);
    public string get_Project();
    public string get_Name();
    public void set_Name(string value);
    public string get_Description();
    public void set_Description(string value);
    public bool TryGetProperty(string name, Object& value);
    public object GetProperty(string name);
    public void RemoveProperty(string name);
    public IEnumerable`1<KeyValuePair`2<string, object>> GetProperties();
    public void SetProperty(string name, object value);
    public TeamFoundationIdentity[] GetMembers(TfsConnection tfs, MembershipQuery queryMembership);
    [CompilerGeneratedAttribute]
internal bool get_IsNameDirty();
    [CompilerGeneratedAttribute]
private void set_IsNameDirty(bool value);
    [CompilerGeneratedAttribute]
internal bool get_IsDescriptionDirty();
    [CompilerGeneratedAttribute]
private void set_IsDescriptionDirty(bool value);
    public T GetTeamPropertiesView(TfsConnection tfs);
}
[EditorBrowsableAttribute("1")]
public class Microsoft.TeamFoundation.Client.TeamFoundationWorkspaceContextChangedEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
private string <OldWorkspace>k__BackingField;
    [CompilerGeneratedAttribute]
private string <NewWorkspace>k__BackingField;
    public string OldWorkspace { get; public set; }
    public string NewWorkspace { get; public set; }
    public TeamFoundationWorkspaceContextChangedEventArgs(string oldWorkspace, string newWorkspace);
    [CompilerGeneratedAttribute]
public string get_OldWorkspace();
    [CompilerGeneratedAttribute]
public void set_OldWorkspace(string value);
    [CompilerGeneratedAttribute]
public string get_NewWorkspace();
    [CompilerGeneratedAttribute]
public void set_NewWorkspace(string value);
}
[EditorBrowsableAttribute("1")]
public class Microsoft.TeamFoundation.Client.TeamFoundationWorkspaceContextMonitor : object {
    private EventHandler`1<TeamFoundationWorkspaceContextChangedEventArgs> e_contextChanged;
    private sealed virtual override void Microsoft.TeamFoundation.Client.ITeamFoundationWorkspaceContextMonitor.add_ContextChanged(EventHandler`1<TeamFoundationWorkspaceContextChangedEventArgs> value);
    private sealed virtual override void Microsoft.TeamFoundation.Client.ITeamFoundationWorkspaceContextMonitor.remove_ContextChanged(EventHandler`1<TeamFoundationWorkspaceContextChangedEventArgs> value);
    private sealed virtual override void Microsoft.TeamFoundation.Client.ITeamFoundationWorkspaceContextMonitor.NotifyWorkspaceChanged(string oldWorkspace, string newWorkspace);
}
public class Microsoft.TeamFoundation.Client.TeamProjectPicker : object {
    private TfsConnectDataSource m_dataSource;
    private TfsConnectDialog m_internalDialog;
    private bool m_disposed;
    [CompilerGeneratedAttribute]
private CancelEventHandler AcceptButtonClick;
    public string Text { get; public set; }
    public string HelpTopic { get; public set; }
    public string AcceptButtonText { get; public set; }
    public bool AutoCommitConnectionChanges { get; public set; }
    public TfsTeamProjectCollection HostActiveTeamProjectCollection { get; public set; }
    public ProjectInfo[] SelectedProjects { get; public set; }
    public TfsTeamProjectCollection SelectedTeamProjectCollection { get; public set; }
    public bool HasNewCredentials { get; }
    public TeamProjectPicker(TeamProjectPickerMode mode, bool disableCollectionChange);
    public TeamProjectPicker(TeamProjectPickerMode mode, bool disableCollectionChange, ICredentialsProvider credentialsProvider);
    protected virtual override void Finalize();
    public void SetDefaultSelectionProvider(ITeamProjectPickerDefaultSelectionProvider provider);
    public DialogResult ShowDialog();
    public DialogResult ShowDialog(IWin32Window parentWindow);
    public sealed virtual void Dispose();
    protected virtual void Dispose(bool disposing);
    [CompilerGeneratedAttribute]
public void add_AcceptButtonClick(CancelEventHandler value);
    [CompilerGeneratedAttribute]
public void remove_AcceptButtonClick(CancelEventHandler value);
    public string get_Text();
    public void set_Text(string value);
    public string get_HelpTopic();
    public void set_HelpTopic(string value);
    public string get_AcceptButtonText();
    public void set_AcceptButtonText(string value);
    public bool get_AutoCommitConnectionChanges();
    public void set_AutoCommitConnectionChanges(bool value);
    public TfsTeamProjectCollection get_HostActiveTeamProjectCollection();
    public void set_HostActiveTeamProjectCollection(TfsTeamProjectCollection value);
    public ProjectInfo[] get_SelectedProjects();
    public void set_SelectedProjects(ProjectInfo[] value);
    public TfsTeamProjectCollection get_SelectedTeamProjectCollection();
    public void set_SelectedTeamProjectCollection(TfsTeamProjectCollection value);
    public bool get_HasNewCredentials();
    private void Initialize(TeamProjectPickerMode mode, bool disableCollectionChange, ICredentialsProvider credentialsProvider);
    private void m_internalDialog_AcceptButtonClick(object sender, CancelEventArgs e);
    public static void CommitConnectionChange(TfsTeamProjectCollection collection);
    public static void CommitConnectionChange(TfsTeamProjectCollection collection, bool storeCredentials);
}
public enum Microsoft.TeamFoundation.Client.TeamProjectPickerMode : Enum {
    public int value__;
    public static TeamProjectPickerMode NoProject;
    public static TeamProjectPickerMode SingleProject;
    public static TeamProjectPickerMode MultiProject;
}
public abstract class Microsoft.TeamFoundation.Client.TeamPropertiesView : object {
    private string m_namespace;
    [CompilerGeneratedAttribute]
private TeamFoundationTeam <Team>k__BackingField;
    public TeamFoundationTeam Team { get; private set; }
    protected string ViewNamespace { get; }
    [CompilerGeneratedAttribute]
public TeamFoundationTeam get_Team();
    [CompilerGeneratedAttribute]
private void set_Team(TeamFoundationTeam value);
    protected virtual string get_ViewNamespace();
    protected internal virtual void Initialize(TfsConnection tfs, TeamFoundationTeam team);
    public void SetViewProperty(string propertyName, object propertyValue);
    public void RemoveViewProperty(string propertyName);
    public object GetViewProperty(string propertyName);
    public bool TryGetViewProperty(string propertyName, Object& propertyValue);
}
[EditorBrowsableAttribute("1")]
public class Microsoft.TeamFoundation.Client.TFProxyServer : object {
    private string m_url;
    private string m_lastException;
    private bool m_isEnabled;
    private bool m_wasAutoConfigured;
    private DateTime m_disableTime;
    private DateTime m_lastConfigureTime;
    private DateTime m_lastCheckTime;
    private int m_retryIntervalMinutes;
    private static CredentialsType s_credentialType;
    public string Url { get; public set; }
    public bool IsEnabled { get; public set; }
    public bool IsAvailable { get; }
    public string LastException { get; }
    unknown int RetryIntervalMinutes {internal set; }
    public bool WasAutoConfigured { get; public set; }
    public DateTime LastConfigureTime { get; public set; }
    internal DateTime LastCheckTime { get; internal set; }
    internal bool NeedsAutoConfigure { get; }
    internal TFProxyServer(string url, bool isEnabled, int retryIntervalMinutes, bool wasAutoConfigured, DateTime lastConfigureTime, DateTime lastCheckTime);
    [AsyncStateMachineAttribute("Microsoft.TeamFoundation.Client.TFProxyServer/<GetFileAsync>d__1")]
public Task`1<Stream> GetFileAsync(TfsConnection connection, string ticket);
    public void NotifyUnavailable();
    internal void ResetDisableTime();
    public string get_Url();
    public void set_Url(string value);
    public bool get_IsEnabled();
    public void set_IsEnabled(bool value);
    public bool get_IsAvailable();
    public string get_LastException();
    internal void set_RetryIntervalMinutes(int value);
    public bool get_WasAutoConfigured();
    public void set_WasAutoConfigured(bool value);
    public DateTime get_LastConfigureTime();
    public void set_LastConfigureTime(DateTime value);
    internal DateTime get_LastCheckTime();
    internal void set_LastCheckTime(DateTime value);
    internal bool get_NeedsAutoConfigure();
}
[EditorBrowsableAttribute("1")]
public static class Microsoft.TeamFoundation.Client.TFProxyServerFactory : object {
    private static TFProxyServer s_tfsProxyServer;
    private static string s_registryPath;
    private static string s_proxyEnabled;
    private static string s_proxyUrl;
    private static string s_proxyRetryInterval;
    private static string s_proxyAutoConfigured;
    private static string s_proxyLastConfigureTime;
    private static string s_proxyLastCheckTime;
    private static string s_tfsProxy;
    private static string s_proxyVDir;
    private static string s_slashString;
    private static int DefaultProxyRetryIntervalMinutes;
    private static TFProxyServerFactory();
    public static TFProxyServer GetProxyServer();
    public static TFProxyServer GetProxyServerWithAutoConfigure(TfsConnection tfsConnection, string siteName);
    public static void LoadProxySettings(String& proxyEnabled, String& proxyUrl);
    public static void LoadProxySettings(String& proxyEnabled, String& proxyUrl, String& proxyRetryInterval, String& proxyAutoConfigured, String& proxyLastConfigureTime, String& proxyLastCheckTime);
    public static void StoreProxySettings(string proxyEnabled, string proxyUrl, string proxyAutoConfigured);
    public static void MarkProxyChecked();
    private static void AutoConfigureProxy(TfsConnection tfsConnection, string siteName);
    private static string GetWorkstationSiteName();
    private static List`1<Proxy> GetBestProxies(string site, IList`1<Proxy> proxyList);
    private static void ConfigureProxy(TfsConnection tfsConnection, string proxyUrl, bool proxyAutoConfigured);
    private static string AppendVirtualDirectory(string proxyUrl);
}
public static class Microsoft.TeamFoundation.Client.TfsClientCacheUtility : object {
    public static string GetCacheDirectory(Uri uri, Guid instanceId, Guid userId);
    public static string GetVolatileCacheDirectory(Uri uri, Guid instanceId);
    internal static void DeleteVolatileCacheDirectory(Uri uri, Guid instanceId);
    private static string GetDirectory(string cacheDirectory, Uri uri, Guid instanceId, Guid userId);
}
internal static class Microsoft.TeamFoundation.Client.TfsClientCredentialsCache : object {
    private static Dictionary`2<string, VssCredentials> s_cachedProvider;
    private static object s_cacheProviderLock;
    private static TfsClientCredentialsCache();
    public static VssCredentials GetCredentials(Uri uri);
    public static VssCredentials GetCredentials(string featureRegistryKeyword, Uri uri);
    public static bool SetCredentials(Uri serverUrl, VssCredentials credentials);
    public static bool RemoveCredentials(Uri serverUrl, VssCredentials credentials);
}
[EditorBrowsableAttribute("1")]
[ObsoleteAttribute("This class is deprecated and will be removed in a future release. See VssClientCredentialStorage instead.", "False")]
public class Microsoft.TeamFoundation.Client.TfsClientCredentialStorage : object {
    private VssTokenStorage m_tokenStorage;
    private Dictionary`2<string, VssTokenKey> m_tokenKeyMap;
    internal TfsClientCredentialStorage(string tokenNamespace);
    public IssuedToken RetrieveToken(Uri serverUrl, VssCredentialsType credentialType);
    public void StoreToken(Uri serverUrl, IssuedToken token, bool matchUserInformation);
    public void RemoveToken(Uri serverUrl);
    public bool RemoveTokenValue(Uri serverUrl, IssuedToken token);
    public void RemoveTokenValuesByUser(Guid userId);
    public string GetTokenProperty(Uri serverUrl, string propertyName);
    public String[] GetTokenProperty(Uri[] serverUrls, string propertyName);
    private VssTokenKey BuildTokenKey(Uri serverUrl, VssCredentialsType credentialType);
    public static VssToken RetrieveConnectedUserToken();
    private static IssuedToken GetTokenFromString(VssCredentialsType credentialType, string tokenValue);
    private static string GetTokenAsString(IssuedToken token);
}
public class Microsoft.TeamFoundation.Client.TfsConfigurationServer : TfsConnection {
    [CompilerGeneratedAttribute]
private bool <UseFactory>k__BackingField;
    private Dictionary`2<string, TfsTeamProjectCollection> m_collections;
    private CatalogNode m_catalogNode;
    private string m_displayName;
    private Nullable`1<int> m_instanceIdHashcode;
    public string Name { get; }
    public CatalogNode CatalogNode { get; }
    internal bool UseFactory { get; internal set; }
    internal Nullable`1<int> InstanceIdHashCode { get; }
    public TfsConfigurationServer(Uri uri);
    public TfsConfigurationServer(Uri uri, VssCredentials credentials);
    public TfsConfigurationServer(Uri uri, IdentityDescriptor identityToImpersonate);
    [ObsoleteAttribute("This constructor is obsolete and will be removed in a future version. See TfsConfigurationServer.TfsConfigurationServer(Uri, VssCredentials) instead", "False")]
public TfsConfigurationServer(Uri uri, ICredentials credentials);
    public TfsConfigurationServer(Uri uri, VssCredentials credentials, IdentityDescriptor identityToImpersonate);
    public TfsConfigurationServer(RegisteredConfigurationServer application);
    public TfsConfigurationServer(RegisteredConfigurationServer application, IdentityDescriptor identityToImpersonate);
    [EditorBrowsableAttribute("1")]
public TfsConfigurationServer(Uri uri, bool fromFactory);
    [EditorBrowsableAttribute("1")]
public TfsConfigurationServer(Uri uri, VssCredentials credentials, IdentityDescriptor identityToImpersonate, bool fromFactory);
    [EditorBrowsableAttribute("1")]
public TfsConfigurationServer(Uri uri, VssCredentials credentials, IdentityDescriptor identityToImpersonate, ITfsRequestChannelFactory channelFactory);
    [EditorBrowsableAttribute("1")]
public TfsConfigurationServer(Uri uri, VssCredentials credentials, IdentityDescriptor identityToImpersonate, ITfsRequestChannelFactory channelFactory, bool fromFactory);
    public virtual string get_Name();
    public virtual CatalogNode get_CatalogNode();
    [CompilerGeneratedAttribute]
internal bool get_UseFactory();
    [CompilerGeneratedAttribute]
internal void set_UseFactory(bool value);
    internal Nullable`1<int> get_InstanceIdHashCode();
    public TfsTeamProjectCollection GetTeamProjectCollection(Guid collectionId);
    internal IEnumerable`1<TfsTeamProjectCollection> GetTeamProjectCollections();
    [EditorBrowsableAttribute("1")]
public static Uri GetFullyQualifiedUriForName(string name);
    protected virtual object GetServiceInstance(Type serviceType, object serviceInstance);
    private object CreateServiceProxy(Type serviceType);
    protected virtual object InitializeTeamFoundationObject(string fullName, object instance);
}
public static class Microsoft.TeamFoundation.Client.TfsConfigurationServerFactory : object {
    private static Dictionary`2<Uri, TfsConfigurationServer> s_serverCache;
    public static ReadOnlyCollection`1<TfsConfigurationServer> Servers { get; }
    private static TfsConfigurationServerFactory();
    public static ReadOnlyCollection`1<TfsConfigurationServer> get_Servers();
    public static TfsConfigurationServer GetConfigurationServer(Uri uri);
    [EditorBrowsableAttribute("1")]
public static TfsConfigurationServer GetConfigurationServer(Uri uri, VssCredentials credentials);
    public static TfsConfigurationServer GetConfigurationServer(RegisteredConfigurationServer application);
    [EditorBrowsableAttribute("1")]
public static void ReplaceConfigurationServer(TfsConfigurationServer configurationServer);
    [EditorBrowsableAttribute("1")]
public static void RemoveConfigurationServer(TfsConfigurationServer configurationServer);
    private static void CrossProcessNotificationCallback(Notification notification, IntPtr param1, IntPtr param2);
}
public static class Microsoft.TeamFoundation.Client.TfsConfigurationServerManager : object {
    [CompilerGeneratedAttribute]
private static EventHandler`1<ConnectionUserChangedEventArgs> ConnectionUserChanged;
    public static void Update(TfsConfigurationServer configurationServer);
    public static void Remove(TfsConfigurationServer configurationServer);
    public static TfsConfigurationServer SwitchUser(Uri uri);
    public static void SwitchUser(TfsConfigurationServer configurationServer);
    internal static void OnConnectionUserChanged(Guid instanceId);
    internal static TfsConfigurationServer GetServerForSwitchUser(Uri uri, IdentityDescriptor identityToImpersonate);
    [CompilerGeneratedAttribute]
public static void add_ConnectionUserChanged(EventHandler`1<ConnectionUserChangedEventArgs> value);
    [CompilerGeneratedAttribute]
public static void remove_ConnectionUserChanged(EventHandler`1<ConnectionUserChangedEventArgs> value);
}
internal class Microsoft.TeamFoundation.Client.TfsConnectDataSource : BaseDataSource {
    private ServerNode m_selectedServer;
    private Dictionary`2<TeamProjectCollectionNode, ObservableCollection`1<TeamProjectNode>> m_selectedProjectsCache;
    private Dictionary`2<ServerNode, ContainerNode> m_selectedDirectoryNodeCache;
    private ObservableCollection`1<ServerNode> m_registedServers;
    private TfsBackgroundWorkerManager m_workerManager;
    private bool m_canSelectServer;
    private bool m_canSelectProject;
    private bool m_canSelectMultipleProjects;
    private List`1<string> m_defaultSelectedProjects;
    private ITeamProjectPickerDefaultSelectionProvider m_defaultsProvider;
    private Nullable`1<Guid> m_defaultCollectionId;
    private SortedList m_defaultSelectedProjectsList;
    [CompilerGeneratedAttribute]
private TfsTeamProjectCollection <ActiveServer>k__BackingField;
    public SortedList DefaultSelectedProjectsList { get; public set; }
    public TfsTeamProjectCollection ActiveServer { get; public set; }
    public bool CanSelectServer { get; }
    public bool CanSelectProject { get; }
    public bool CanSelectMultipleProjects { get; }
    public ObservableCollection`1<TeamProjectNode> SelectedProjects { get; }
    public ObservableCollection`1<ServerNode> RegisteredServers { get; }
    public ServerNode SelectedServer { get; public set; }
    public TeamProjectCollectionNode SelectedCollection { get; }
    public ContainerNode SelectedDirectoryNode { get; public set; }
    public TfsConnectDataSource(TeamProjectPickerMode mode, bool disableCollectionSelect);
    public ServerNode AddServer(TfsConnection server);
    public void SetSelectedCollection(TfsTeamProjectCollection server);
    public void SetDefaultSelectionProvider(ITeamProjectPickerDefaultSelectionProvider provider);
    public void SetDefaultSelectedProjects(ProjectInfo[] projects);
    public void Dispose();
    public SortedList get_DefaultSelectedProjectsList();
    public void set_DefaultSelectedProjectsList(SortedList value);
    [CompilerGeneratedAttribute]
public TfsTeamProjectCollection get_ActiveServer();
    [CompilerGeneratedAttribute]
public void set_ActiveServer(TfsTeamProjectCollection value);
    public bool get_CanSelectServer();
    public bool get_CanSelectProject();
    public bool get_CanSelectMultipleProjects();
    public ObservableCollection`1<TeamProjectNode> get_SelectedProjects();
    public ObservableCollection`1<ServerNode> get_RegisteredServers();
    public ServerNode get_SelectedServer();
    public void set_SelectedServer(ServerNode value);
    public TeamProjectCollectionNode get_SelectedCollection();
    public ContainerNode get_SelectedDirectoryNode();
    public void set_SelectedDirectoryNode(ContainerNode value);
    private void ClearUserSelections();
    private void AddListedProjectsByUris(ObservableCollection`1<TeamProjectNode> projectNodes, IEnumerable`1<string> projectsUris);
    private TeamProjectCollectionNode GetTPCbyGuid(ContainerNode rootNode, Guid guid);
    private void FillServerList();
}
internal class Microsoft.TeamFoundation.Client.TfsConnectDialog : BaseDialog {
    private TfsConnectDataSource m_dataSource;
    private bool m_isUpdating;
    private bool m_suspendItemCheckEvent;
    private ServerNode m_lastAddedServer;
    private bool m_autoCommitConnectionChanges;
    private CheckedListBox m_teamProjectsCheckedListBox;
    private ListBox m_teamProjectsListBox;
    private HashSet`1<INotifyPropertyChanged> m_hookedCollectionsEvent;
    private VssClientCredentialStorage m_credentialStorage;
    private Dictionary`2<Uri, string> m_connectionUserMap;
    private static string FORM_CHOOSE_PROJECT_MULTISELECT;
    private static string FORM_CHOOSE_PROJECT_SINGLESELECT;
    private static string FORM_NO_PROJECT;
    private static int cProgressSpeed;
    private static string cConnectDialogSubKey;
    private static string cSplitterDistanceValueName;
    [CompilerGeneratedAttribute]
private CancelEventHandler AcceptButtonClick;
    private IContainer components;
    private TableLayoutPanel m_mainPanel;
    private TableLayoutPanel m_domainPanel;
    private ComboBox m_domainComboBox;
    private Button m_serversButton;
    private TableLayoutPanel m_commandButtonsPanel;
    private Button m_connectButton;
    private Button m_cancelButton;
    private SplitContainer m_middlePanel;
    private Panel m_directoryPanel;
    private Label m_directoryLabel;
    private Panel m_teamProjectsPanel;
    private Label m_teamProjectsLabel;
    private Label m_selectServerLabel;
    private InformationBar m_directoryInfoBar;
    private InformationBar m_projectsInfoBar;
    private CheckBox m_projectSelectAll;
    private Panel m_selectAllPanel;
    private TreeView m_directoryTree;
    private ImageList m_directoryImageList;
    private TableLayoutPanel m_bottomPanel;
    private LinkLabel m_userLabel;
    private ToolTip m_toolTip;
    public string AcceptButtonText { get; public set; }
    public bool AutoCommitConnectionChanges { get; public set; }
    private int StoredSplitterDistance { get; private set; }
    public TfsConnectDialog(TfsConnectDataSource dataSource);
    public static void CommitConnectionChange(TfsTeamProjectCollection collection, bool storeCredentials);
    public string get_AcceptButtonText();
    public void set_AcceptButtonText(string value);
    public bool get_AutoCommitConnectionChanges();
    public void set_AutoCommitConnectionChanges(bool value);
    [CompilerGeneratedAttribute]
public void add_AcceptButtonClick(CancelEventHandler value);
    [CompilerGeneratedAttribute]
public void remove_AcceptButtonClick(CancelEventHandler value);
    private void SelectedServerChanged(object sender, EventArgs e);
    private void SelectedDirectoryNodeChanged(object sender, EventArgs e);
    private void ServerNodeStateChanged(object sender, PropertyChangedEventArgs e);
    private void TPCNodeStateChanged(object sender, PropertyChangedEventArgs e);
    private void m_teamProjectsCheckedListBox_ItemCheck(object sender, ItemCheckEventArgs e);
    private void m_projectSelectAll_Click(object sender, EventArgs e);
    private void m_projectsInfoBar_LabelLinkClicked(object sender, LinkLabelLinkClickedEventArgs e);
    private void m_directoryInfoBar_LabelLinkClicked(object sender, LinkLabelLinkClickedEventArgs e);
    private void m_userLabel_LabelLinkClicked(object sender, LinkLabelLinkClickedEventArgs e);
    private void m_connectButton_Click(object sender, EventArgs e);
    private void m_serversButton_Click(object sender, EventArgs e);
    private void ServerAdded(object sender, ServerEventArgs sae);
    private void ServerRemoved(object sender, ServerEventArgs sae);
    private void m_directoryTree_AfterSelect(object sender, TreeViewEventArgs e);
    private void m_teamProjectsListBox_SelectedIndexChanged(object sender, EventArgs e);
    private void TfsConnectDialog_FormClosed(object sender, FormClosedEventArgs e);
    private void m_teamProjectsListBox_DoubleClick(object sender, EventArgs e);
    private void m_projectSelectAll_PreviewKeyDown(object sender, PreviewKeyDownEventArgs e);
    private void m_teamProjectsCheckedListBox_KeyDown(object sender, KeyEventArgs e);
    protected virtual void OnLoad(EventArgs e);
    private int get_StoredSplitterDistance();
    private void set_StoredSplitterDistance(int value);
    private void HandleNodeChange(DialogPanel panel, ContainerNode selectedNode);
    private void HookEvent(INotifyPropertyChanged source, PropertyChangedEventHandler handler);
    private void UpdateDirectoryNodes(ServerNode node);
    private TreeNode AddINodeToTreeNodeCollection(TreeNodeCollection treeNodes, ContainerNode parentNode);
    private void UpdateTeamProjectsList(IList`1<INode> projects);
    private void PopulateServerList();
    private void StyleControls();
    private void SetupControls();
    private void UpdateUserLabel();
    private void ClearUserLabel();
    private void GetUserLabelTexts(string nameOnLabel, string nameOnToolTip, String& labelText, String& toolTipText);
    private void EnableDisableConnectButton();
    private void SetPanelStatus(DialogPanel panel, string text);
    private void SetPanelWorking(DialogPanel panel);
    private void SetPanelError(DialogPanel panel, Exception error, string serverName);
    private void SetInfobarError(InformationBar bar, Exception error, string serverName);
    private void ClearInfobar(InformationBar bar);
    private void ClearTeamProjectsPanel();
    private void ClearPanels();
    protected virtual void Dispose(bool disposing);
    private void InitializeComponent();
    private void ApplyInfoBarColors(InformationBar infoBar);
}
public abstract class Microsoft.TeamFoundation.Client.TfsConnection : object {
    [CompilerGeneratedAttribute]
private ITfsRequestChannelFactory <ChannelFactory>k__BackingField;
    [CompilerGeneratedAttribute]
private static TfsConnectionWebServiceCallEventHandler WebServiceCallBegin;
    [CompilerGeneratedAttribute]
private static TfsConnectionWebServiceCallEventHandler WebServiceCallEnd;
    [CompilerGeneratedAttribute]
private CredentialsChangedEventHandler CredentialsChanged;
    [CompilerGeneratedAttribute]
private ConnectivityFailureStatusChangedEventHandler ConnectivityFailureStatusChanged;
    private string m_displayName;
    private Uri m_uri;
    private string m_fullyQualifiedUrl;
    private TimeZone m_timeZone;
    private CultureInfo m_culture;
    private CultureInfo m_uiCulture;
    private IdentityDescriptor m_identityToImpersonate;
    private Guid m_sessionId;
    private VssCredentials m_clientCredentials;
    private string m_locationSerivceRelativePath;
    private object m_lockToken;
    private object m_lock;
    private bool m_isOffline;
    private VssConnection m_vssConnection;
    private FrameworkServerDataProvider m_serverDataProvider;
    private TFProxyServer m_proxyServer;
    private static string s_overriddenSettingsDirectory;
    private static string s_applicationName;
    private ThreadSafeServiceContainer m_serviceContainer;
    private Dictionary`2<Type, object> m_loadingServices;
    private static long s_requestId;
    [ThreadStaticAttribute]
private static string t_operationName;
    private static string s_unauthorizedAccessExceptionErrorCode;
    private static string c_cacheSettingsKey;
    private static string c_settingClientCacheTimeToLive;
    private static Nullable`1<int> s_clientCacheTimeToLive;
    private static bool s_checkedClientCacheTimeToLive;
    [EditorBrowsableAttribute("1")]
public ITfsRequestChannelFactory ChannelFactory { get; private set; }
    public VssCredentials ClientCredentials { get; public set; }
    public Guid InstanceId { get; }
    [EditorBrowsableAttribute("1")]
public Guid CachedInstanceId { get; }
    public Uri Uri { get; }
    public TimeZone TimeZone { get; public set; }
    public ServerCapabilities ServerCapabilities { get; }
    public bool IsHostedServer { get; }
    public CatalogNode CatalogNode { get; }
    public string Name { get; }
    public static string ApplicationName { get; public set; }
    public static string OperationName { get; public set; }
    public static long TotalRequestCount { get; }
    [EditorBrowsableAttribute("1")]
public IdentityDescriptor IdentityToImpersonate { get; }
    public ICredentials Credentials { get; public set; }
    [ObsoleteAttribute("This property is obsolete and will be removed in a future release. See VssCredentialPrompts instead.", "False")]
internal ICredentialsProvider CredentialsProvider { get; internal set; }
    public CultureInfo Culture { get; public set; }
    public CultureInfo UICulture { get; public set; }
    public Guid SessionId { get; }
    public static string ClientCacheDirectory { get; }
    public static string ClientVolatileCacheDirectory { get; }
    public static string ClientConfigurationDirectory { get; }
    public static string ClientSettingsDirectory { get; public set; }
    public string ClientCacheDirectoryForInstance { get; }
    public string ClientVolatileCacheDirectoryForInstance { get; }
    public string ClientCacheDirectoryForUser { get; }
    internal static Nullable`1<int> ClientCacheTimeToLive { get; internal set; }
    public TeamFoundationIdentity AuthorizedIdentity { get; }
    public bool HasAuthenticated { get; }
    [EditorBrowsableAttribute("1")]
public TFProxyServer ProxyServer { get; }
    public bool ConnectivityFailureOnLastWebServiceCall { get; internal set; }
    [EditorBrowsableAttribute("1")]
public bool Disposed { get; }
    protected Guid CatalogResourceId { get; }
    [EditorBrowsableAttribute("1")]
public IServerDataProvider ServerDataProvider { get; }
    internal TfsConnection(Uri uri, string locationServiceRelativePath);
    internal TfsConnection(Uri uri, string locationServiceRelativePath, IdentityDescriptor identityToImpersonate, ITfsRequestChannelFactory channelFactory);
    [ObsoleteAttribute("This constructor is obsolete and will be removed in a future version. See TfsTeamProjectCollection(Uri uri, VssCredentials credentials) instead", "False")]
internal TfsConnection(Uri uri, ICredentials credentials, string locationServiceRelativePath);
    internal TfsConnection(Uri uri, VssCredentials credentials, IdentityDescriptor identityToImpersonate, string locationServiceRelativePath, ITfsRequestChannelFactory channelFactory);
    [ObsoleteAttribute("This constructor is obsolete and will be removed in a future version. See TfsTeamProjectCollection(Uri uri, VssCredentials credentials) instead", "False")]
internal TfsConnection(Uri uri, ICredentials credentials, ICredentialsProvider credentialsProvider, IdentityDescriptor identityToImpersonate, string locationServiceRelativePath, ITfsRequestChannelFactory channelFactory);
    private static TfsConnection();
    [CompilerGeneratedAttribute]
public ITfsRequestChannelFactory get_ChannelFactory();
    [CompilerGeneratedAttribute]
private void set_ChannelFactory(ITfsRequestChannelFactory value);
    public VssCredentials get_ClientCredentials();
    [EditorBrowsableAttribute("1")]
public void set_ClientCredentials(VssCredentials value);
    private void SetClientCredentials(VssCredentials credentials);
    public virtual Guid get_InstanceId();
    public Guid get_CachedInstanceId();
    public Uri get_Uri();
    public TimeZone get_TimeZone();
    public void set_TimeZone(TimeZone value);
    public ServerCapabilities get_ServerCapabilities();
    public virtual bool get_IsHostedServer();
    public abstract virtual CatalogNode get_CatalogNode();
    public virtual string get_Name();
    public static string get_ApplicationName();
    public static void set_ApplicationName(string value);
    public static string get_OperationName();
    public static void set_OperationName(string value);
    [CompilerGeneratedAttribute]
public static void add_WebServiceCallBegin(TfsConnectionWebServiceCallEventHandler value);
    [CompilerGeneratedAttribute]
public static void remove_WebServiceCallBegin(TfsConnectionWebServiceCallEventHandler value);
    [CompilerGeneratedAttribute]
public static void add_WebServiceCallEnd(TfsConnectionWebServiceCallEventHandler value);
    [CompilerGeneratedAttribute]
public static void remove_WebServiceCallEnd(TfsConnectionWebServiceCallEventHandler value);
    public static long get_TotalRequestCount();
    private static VssCredentials LoadFromCache(Uri serverUrl, ICredentials credentials);
    internal static long OnBeginWebRequest();
    internal static void OnWebServiceCallBegin(TfsConnection originatingTfsConnection, long requestId, string methodName);
    internal static void OnWebServiceCallBegin(TfsConnection originatingTfsConnection, long requestId, string methodName, string componentName, HttpWebRequest request);
    internal static void OnWebServiceCallEnd(TfsConnection originatingTfsConnection, long requestId, string methodName);
    internal static void OnWebServiceCallEnd(TfsConnection originatingTfsConnection, long requestId, string methodName, string componentName, HttpWebResponse response);
    public IdentityDescriptor get_IdentityToImpersonate();
    public ICredentials get_Credentials();
    [EditorBrowsableAttribute("1")]
public void set_Credentials(ICredentials value);
    internal ICredentialsProvider get_CredentialsProvider();
    internal void set_CredentialsProvider(ICredentialsProvider value);
    public CultureInfo get_Culture();
    public void set_Culture(CultureInfo value);
    public CultureInfo get_UICulture();
    public void set_UICulture(CultureInfo value);
    public Guid get_SessionId();
    public static string get_ClientCacheDirectory();
    public static string get_ClientVolatileCacheDirectory();
    public static string get_ClientConfigurationDirectory();
    private static string SafeGetFolderPath(SpecialFolder specialFolder);
    public static string get_ClientSettingsDirectory();
    public static void set_ClientSettingsDirectory(string value);
    public string get_ClientCacheDirectoryForInstance();
    public string get_ClientVolatileCacheDirectoryForInstance();
    public string get_ClientCacheDirectoryForUser();
    internal static Nullable`1<int> get_ClientCacheTimeToLive();
    internal static void set_ClientCacheTimeToLive(Nullable`1<int> value);
    public void GetAuthenticatedIdentity(TeamFoundationIdentity& identity);
    public TeamFoundationIdentity get_AuthorizedIdentity();
    public bool get_HasAuthenticated();
    public virtual string ToString();
    public void EnsureAuthenticated();
    public void Authenticate();
    public void Connect(ConnectOptions connectOptions);
    [EditorBrowsableAttribute("1")]
public void Disconnect();
    public virtual T GetService();
    public virtual object GetService(Type serviceType);
    [EditorBrowsableAttribute("1")]
public void FlushServices();
    public virtual T GetClient();
    [EditorBrowsableAttribute("1")]
public T GetClient(VssHttpRequestSettings settings);
    private VssConnection ValidateAndPrepareGetClient(VssHttpRequestSettings requestSettings);
    protected virtual VssConnection CreateVssConnection();
    private VssConnection CreateVssConnection(VssHttpRequestSettings requestSettings);
    [CompilerGeneratedAttribute]
public void add_CredentialsChanged(CredentialsChangedEventHandler value);
    [CompilerGeneratedAttribute]
public void remove_CredentialsChanged(CredentialsChangedEventHandler value);
    internal void FireCredentialsChanged(ICredentials currentCredentials);
    internal string GetLocationServiceRelativePath();
    protected static Uri GetFullyQualifiedUriForName(string name, string locationServiceRelativePath, Func`2<string, Uri> getRegisteredUri);
    protected virtual object GetServiceInstance(Type serviceType, object serviceInstance);
    protected object CreateServiceInstance(Assembly assembly, string fullName);
    protected virtual object InitializeTeamFoundationObject(string fullName, object instance);
    protected virtual object CreateInternalProxy(Type serviceType);
    internal void RefreshProxySettings();
    public TFProxyServer get_ProxyServer();
    public bool get_ConnectivityFailureOnLastWebServiceCall();
    internal void set_ConnectivityFailureOnLastWebServiceCall(bool value);
    [CompilerGeneratedAttribute]
public void add_ConnectivityFailureStatusChanged(ConnectivityFailureStatusChangedEventHandler value);
    [CompilerGeneratedAttribute]
public void remove_ConnectivityFailureStatusChanged(ConnectivityFailureStatusChangedEventHandler value);
    protected virtual void OnConnectivityFailureStatusChanged(bool newConnectivityFailureStatus);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public bool get_Disposed();
    public virtual void Dispose();
    protected Guid get_CatalogResourceId();
    public IServerDataProvider get_ServerDataProvider();
    internal void ClearInMemoryCache();
    internal void ReactToPossibleServerUpdate(int locationServiceLastChangeId);
    private void EnsureProviderConnected();
    private static void ThrowAuthorizationException(Exception e);
}
public class Microsoft.TeamFoundation.Client.TfsConnectionWebServiceCallEventArgs : EventArgs {
    private TfsConnection m_tfsConnection;
    private long m_requestId;
    private string m_methodName;
    private string m_componentName;
    private long m_length;
    public TfsConnection TfsConnection { get; }
    public long RequestId { get; }
    public string MethodName { get; }
    public string ComponentName { get; }
    public long Length { get; }
    public TfsConnectionWebServiceCallEventArgs(TfsConnection originatingTfsConnection, long requestId, string methodName, string componentName, long length);
    public TfsConnection get_TfsConnection();
    public long get_RequestId();
    public string get_MethodName();
    public string get_ComponentName();
    public long get_Length();
}
public class Microsoft.TeamFoundation.Client.TfsConnectionWebServiceCallEventHandler : MulticastDelegate {
    public TfsConnectionWebServiceCallEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, TfsConnectionWebServiceCallEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, TfsConnectionWebServiceCallEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
[EditorBrowsableAttribute("1")]
public static class Microsoft.TeamFoundation.Client.TfsDiagnosticHelper : object {
    public static void WriteRegKeyContent(RegistryKey key, XmlWriter writer);
    public static void GetGuidsInDefaultValues(RegistryKey key, List`1<Guid> guids);
    private static void WriteRegKeyValues(RegistryKey key, XmlWriter writer);
    private static void WriteRegSubKeys(RegistryKey key, XmlWriter writer);
}
[EditorBrowsableAttribute("1")]
public class Microsoft.TeamFoundation.Client.TfsDiagnosticNodeInfo : object {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <AreaPath>k__BackingField;
    [CompilerGeneratedAttribute]
private ITfsDiagnosticProvider <Provider>k__BackingField;
    public string Name { get; private set; }
    public string AreaPath { get; private set; }
    public ITfsDiagnosticProvider Provider { get; private set; }
    public TfsDiagnosticNodeInfo(string nodeName, string areaPath, ITfsDiagnosticProvider provider);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
private void set_Name(string value);
    [CompilerGeneratedAttribute]
public string get_AreaPath();
    [CompilerGeneratedAttribute]
private void set_AreaPath(string value);
    [CompilerGeneratedAttribute]
public ITfsDiagnosticProvider get_Provider();
    [CompilerGeneratedAttribute]
private void set_Provider(ITfsDiagnosticProvider value);
    public virtual string ToString();
}
[EditorBrowsableAttribute("1")]
public class Microsoft.TeamFoundation.Client.TfsDiagnosticService : object {
    private static TfsDiagnosticService s_instance;
    private SortedDictionary`2<string, ITfsDiagnosticProvider> m_providers;
    private static char c_areaPathDelimiter;
    private static Char[] c_areaPathDelimiterArray;
    private static string c_rootNodeName;
    public static TfsDiagnosticService Instance { get; }
    public static Char[] AreaPathDelimiters { get; }
    private static TfsDiagnosticService();
    public static TfsDiagnosticService get_Instance();
    public static string BuildAreaPath(string featureTeam, String[] featureNames);
    public static Char[] get_AreaPathDelimiters();
    public void Register(ITfsDiagnosticProvider provider);
    public void Unregister(ITfsDiagnosticProvider provider);
    internal ITfsDiagnosticProvider[] GetProviders();
    public Tree`1<TfsDiagnosticNodeInfo> GetProvidersAsTree();
    public void SaveState(string areaPath, bool recursive, string outputFilename);
    public void SaveState(String[] areaPaths, bool recursive, string outputFilename);
    internal StringBuilder GetState(string areaPath, bool recursive);
    public StringBuilder GetState(String[] areaPaths, bool recursive);
    internal void TraceState(string areaPath, bool recursive);
    internal void TraceState(String[] areaPaths, bool recursive);
    private void WriteState(SortedDictionary`2<string, ITfsDiagnosticProvider> providers, TextWriter textWriter);
    private void WriteStateForNode(TreeNode`1<TfsDiagnosticNodeInfo> node, XmlWriter xmlWriter);
    private string NormalizeAreaPath(string areaPath);
    private SortedDictionary`2<string, ITfsDiagnosticProvider> GetProvidersForAreaPath(String[] areaPaths, bool recursive);
    private Tree`1<TfsDiagnosticNodeInfo> BuildTree(SortedDictionary`2<string, ITfsDiagnosticProvider> providers);
    private string BuildAreaPathForNode(TreeNode`1<TfsDiagnosticNodeInfo> parent, string nodeName);
}
[EditorBrowsableAttribute("1")]
public class Microsoft.TeamFoundation.Client.TfsRequestContext : object {
    private bool m_disposed;
    private string m_methodName;
    private TfsHttpClientBase m_proxy;
    private TfsMessage m_message;
    private List`1<ITfsResult> m_resultSets;
    private IClientContext m_clientContext;
    private XmlDictionaryReader m_bodyReader;
    public XmlDictionaryReader BodyReader { get; }
    public IClientContext ClientContext { get; }
    public TfsHttpClientBase Proxy { get; }
    public string MethodName { get; }
    protected List`1<ITfsResult> ResultSets { get; }
    public TfsRequestContext(IClientContext clientContext, TfsHttpClientBase proxy, TfsMessage message, XmlDictionaryReader bodyReader, string methodName);
    protected virtual override void Finalize();
    public sealed virtual void Dispose();
    protected void Dispose(bool disposing);
    protected void CheckDisposed();
    public XmlDictionaryReader get_BodyReader();
    public IClientContext get_ClientContext();
    public TfsHttpClientBase get_Proxy();
    public string get_MethodName();
    public void AddResultSet(ITfsResult resultSet);
    public void RemoveResultSet(ITfsResult resultSet);
    protected List`1<ITfsResult> get_ResultSets();
}
public class Microsoft.TeamFoundation.Client.TfsTeamProjectCollection : TfsConnection {
    [CompilerGeneratedAttribute]
private bool <UseFactory>k__BackingField;
    private RegistrationService m_registrationProxy;
    private TfsConfigurationServer m_configurationServer;
    private object m_configurationServerLockObject;
    private string m_name;
    private string m_displayName;
    private CatalogNode m_catalogNode;
    private object m_entityLockObject;
    public string Name { get; }
    public string DisplayName { get; }
    public CatalogNode CatalogNode { get; }
    public TfsConfigurationServer ConfigurationServer { get; internal set; }
    internal bool UseFactory { get; internal set; }
    private RegistrationService RegistrationProxy { get; }
    public TfsTeamProjectCollection(Uri uri);
    public TfsTeamProjectCollection(RegisteredProjectCollection projectCollection);
    public TfsTeamProjectCollection(Uri uri, VssCredentials credentials);
    public TfsTeamProjectCollection(Uri uri, IdentityDescriptor identityToImpersonate);
    public TfsTeamProjectCollection(RegisteredProjectCollection projectCollection, IdentityDescriptor identityToImpersonate);
    public TfsTeamProjectCollection(Uri uri, VssCredentials credentials, IdentityDescriptor identityToImpersonate);
    [EditorBrowsableAttribute("1")]
public TfsTeamProjectCollection(Uri uri, bool fromFactory);
    [EditorBrowsableAttribute("1")]
public TfsTeamProjectCollection(Uri uri, VssCredentials credentials, IdentityDescriptor identityToImpersonate, bool fromFactory);
    [EditorBrowsableAttribute("1")]
public TfsTeamProjectCollection(Uri uri, VssCredentials credentials, IdentityDescriptor identityToImpersonate, ITfsRequestChannelFactory channelFactory);
    [EditorBrowsableAttribute("1")]
public TfsTeamProjectCollection(Uri uri, VssCredentials credentials, IdentityDescriptor identityToImpersonate, ITfsRequestChannelFactory channelFactory, bool fromFactory);
    [ObsoleteAttribute("This constructor is obsolete and will be removed in a future version. See TfsTeamProjectCollection.TfsTeamProjectCollection(Uri, VssCredentials) instead", "False")]
public TfsTeamProjectCollection(Uri uri, ICredentials credentials);
    public virtual string get_Name();
    public string get_DisplayName();
    public virtual CatalogNode get_CatalogNode();
    public TfsConfigurationServer get_ConfigurationServer();
    internal void set_ConfigurationServer(TfsConfigurationServer value);
    [CompilerGeneratedAttribute]
internal bool get_UseFactory();
    [CompilerGeneratedAttribute]
internal void set_UseFactory(bool value);
    public static Uri GetFullyQualifiedUriForName(string name);
    protected virtual object GetServiceInstance(Type serviceType, object serviceInstance);
    private object CreateServiceProxy(Type serviceType);
    protected virtual object InitializeTeamFoundationObject(string fullName, object instance);
    private RegistrationService get_RegistrationProxy();
}
public static class Microsoft.TeamFoundation.Client.TfsTeamProjectCollectionFactory : object {
    private static Dictionary`2<Uri, TfsTeamProjectCollection> s_serverCache;
    public static ReadOnlyCollection`1<TfsTeamProjectCollection> Collections { get; }
    private static TfsTeamProjectCollectionFactory();
    public static ReadOnlyCollection`1<TfsTeamProjectCollection> get_Collections();
    public static TfsTeamProjectCollection GetTeamProjectCollection(Uri uri);
    [EditorBrowsableAttribute("1")]
public static TfsTeamProjectCollection GetTeamProjectCollection(Uri uri, VssCredentials credentials);
    [EditorBrowsableAttribute("1")]
public static TfsTeamProjectCollection GetTeamProjectCollection(string featureRegistryKeyword, Uri uri);
    [EditorBrowsableAttribute("1")]
public static TfsTeamProjectCollection GetTeamProjectCollection(string featureRegistryKeyword, Uri uri, VssCredentials credentials);
    public static TfsTeamProjectCollection GetTeamProjectCollection(RegisteredProjectCollection projectCollection);
    [EditorBrowsableAttribute("1")]
public static TfsTeamProjectCollection GetTeamProjectCollection(string serverName, bool ensureAuthenticated, bool ensureServerIsLocallyRegistered);
    [EditorBrowsableAttribute("1")]
public static TfsTeamProjectCollection GetTeamProjectCollection(string serverName, bool ensureAuthenticated, bool ensureServerIsLocallyRegistered, VssCredentials credentials);
    [EditorBrowsableAttribute("1")]
public static void ReplaceTeamProjectCollection(TfsTeamProjectCollection projectCollection);
    [EditorBrowsableAttribute("1")]
public static void RemoveTeamProjectCollection(TfsTeamProjectCollection projectCollection);
    [EditorBrowsableAttribute("1")]
private static IList`1<Uri> EnumeratePossibleCollectionUris(Uri tpcUri);
}
public class Microsoft.TeamFoundation.Client.TfsTeamService : object {
    private static string c_defaultTeamPropertyName;
    private TfsConnection m_tfs;
    public sealed virtual void Initialize(TfsConnection tfsConnection);
    public TeamFoundationTeam CreateTeam(string projectId, string name, string description, IDictionary`2<string, object> properties);
    public IEnumerable`1<TeamFoundationTeam> QueryTeams(string projectId);
    public IEnumerable`1<TeamFoundationTeam> QueryTeams(IdentityDescriptor descriptor);
    public IEnumerable`1<TeamFoundationTeam> QueryTeams(IdentityDescriptor descriptor, List`1<string> propertyNameFilters);
    private TeamFoundationTeam ReadTeamInternal(Func`3<T, IEnumerable`1<string>, TeamFoundationIdentity> teamRetriever, T teamDescriptor, List`1<string> propertyNameFilters);
    public TeamFoundationTeam ReadTeam(IdentityDescriptor descriptor, List`1<string> propertyNameFilters);
    public TeamFoundationTeam ReadTeam(Guid teamId, List`1<string> propertyNameFilters);
    public TeamFoundationTeam ReadTeam(string projectId, string teamName, List`1<string> propertyNameFilters);
    public Guid GetDefaultTeamId(string projectUri);
    public TeamFoundationTeam GetDefaultTeam(string projectUri, List`1<string> propertyNameFilters);
    public void SetDefaultTeam(TeamFoundationTeam team);
    public void SetDefaultTeamId(string projectUri, Guid teamId);
    public void UpdateTeam(TeamFoundationTeam team);
    [CompilerGeneratedAttribute]
private TeamFoundationIdentity <ReadTeam>b__8_0(IdentityDescriptor id, IEnumerable`1<string> filters);
    [CompilerGeneratedAttribute]
private TeamFoundationIdentity <ReadTeam>b__9_0(Guid id, IEnumerable`1<string> filters);
}
[EditorBrowsableAttribute("1")]
public class Microsoft.TeamFoundation.Client.TfsWebClient : WebClient {
    private TfsConnection m_tfs;
    public TfsWebClient(TfsConnection tfs);
    protected virtual WebRequest GetWebRequest(Uri address);
}
[EditorBrowsableAttribute("1")]
public static class Microsoft.TeamFoundation.Client.TFUtil : object {
    private static ICollection`1<string> UnsafeFileExtensions;
    private static int cMaxDirLength;
    private static DomainInfo[] m_knownDomains;
    internal static bool CanUseMD5 { get; }
    private static TFUtil();
    public static Uri GetApplicationInstanceUri(TfsConnection server);
    public static Process BeginRunApp(string appExe, string arguments);
    public static void SafeLaunchApp(string app);
    public static bool SafeOpenFile(string filename);
    public static void CheckAndLaunchUri(string uriString);
    public static void CheckForNull(object var, string varName);
    public static void CheckStringForNullOrEmpty(string stringVar, string stringVarName);
    public static string GetDirectoryName(string path);
    public static void AddXmlAttribute(XmlNode node, string attrName, string value);
    public static string PrepareForFormat(string s);
    private static string AdjustFileName(string name, int maxLength);
    public static string GetTempFileName(string dir, string template, string baseName);
    public static string RemoveInvalidFileNameChars(string fileName);
    public static Byte[] CalculateMD5(string fileName);
    public static Byte[] CalculateMD5(Stream stream);
    public static long CopyStream(Stream source, Stream dest, Byte[] buffer);
    public static long CopyStream(Stream source, Stream dest, Byte[] buffer, CopyStreamCallback progressCallback);
    public static string LocaleSensitiveToUpper(string original);
    public static bool IsHostedServer(string hostName);
    public static bool IsHostedServer(Uri uri);
    public static bool IsLocalDevFabric(string hostName);
    public static bool IsLegacyHostedServer(string hostName);
    public static bool IsLegacyHostedServer(Uri uri);
    public static string GetUniqueAccountKey(Uri uri);
    internal static void CopyRegistryBranch(RegistryKey source, RegistryKey destination);
    internal static bool get_CanUseMD5();
}
internal class Microsoft.TeamFoundation.Client.ThreadSafeServiceContainer : object {
    private ServiceContainer m_serviceContainer;
    private object m_lock;
    public void FlushServices();
    public sealed virtual void Dispose();
    public sealed virtual void AddService(Type serviceType, object serviceInstance);
    public sealed virtual void AddService(Type serviceType, ServiceCreatorCallback callback);
    public sealed virtual void AddService(Type serviceType, object serviceInstance, bool promote);
    public sealed virtual void AddService(Type serviceType, ServiceCreatorCallback callback, bool promote);
    public sealed virtual void RemoveService(Type serviceType);
    public sealed virtual void RemoveService(Type serviceType, bool promote);
    public sealed virtual object GetService(Type serviceType);
}
public class Microsoft.TeamFoundation.Client.TswaClientHyperlinkService : TswaHyperlinkBuilder {
    private ILocationService m_locationService;
    private IRegistration m_registrationService;
    private sealed virtual override void Microsoft.TeamFoundation.Client.ITfsConnectionObject.Initialize(TfsConnection server);
    protected virtual Uri GetUrl(string serviceType, string accessMappingMoniker);
    private ServiceDefinition GetServiceDefinition(string serviceType);
    private ServiceInterface GetServiceInterface(string serviceType);
}
[EditorBrowsableAttribute("1")]
public class Microsoft.TeamFoundation.Client.UIConfig : object {
    private string m_configFile;
    private Hashtable m_keyValueStore;
    private Hashtable m_origKeyValueStore;
    private static string m_attrTextWidth;
    private static string m_attrTextHeight;
    private static string m_attrTextX;
    private static string m_attrTextY;
    private static string m_attrTextValue;
    private static string m_srNodeName;
    private static int DesktopEdgeFudgeX;
    private static int DesktopEdgeFudgeY;
    internal UIConfig(string configFile);
    private void AddKeyValue(string key, string value);
    public void Add(string key, string value);
    public void Add(string key, int value);
    public void Add(string key, Point xy);
    public void Add(string key, Size wh);
    public void Add(string key, Point xy, Size wh);
    public bool Retrieve(string key, String& value);
    public bool Retrieve(string key, Int32& value);
    public bool Retrieve(string key, Point& xy);
    public bool Retrieve(string key, Size& wh);
    public bool Retrieve(string key, Point& xy, Size& wh);
    public bool Retrieve(Form form, Point& xy, Size& wh);
    private bool IsFormSizable(Form form);
    public void LoadStore();
    public void SaveStore();
    private XmlDocument ConvertHashToXml(XmlDocument doc);
    private void ConvertXmlToHash(XmlDocument doc);
    private bool ContentChanged();
    public void SaveForm(Form form);
    public void SaveWindow(Window window);
    public void RestoreWindow(Window window);
    public bool Retrieve(Window window, Point& xy, Size& wh);
    private void RestoreOrCenterWindow(Window window, Point xy, Size wh);
    public void RestoreForm(Form form, int defaultX, int defaultY, int defaultWidth, int defaultHeight, FormStartPosition defaultStartPosition);
    public void RestoreForm(Form form);
    private void RestoreOrCenterForm(Form form, Point xy, Size wh);
    private bool NeedRelocation(Point xy, Size wh);
    public bool WpfNeedRelocation(double left, double top, double width, double height);
}
[ObsoleteAttribute("This class has been deprecated and will be removed in a future release. Use VssClientCredentials with CredentialPromptType.PromptIfNeeded instead.", "False")]
public class Microsoft.TeamFoundation.Client.UICredentialsProvider : object {
    private IUICredentialsProvider m_windowsProvider;
    public UICredentialsProvider(IWin32Window parentWindow);
    [EditorBrowsableAttribute("1")]
public UICredentialsProvider(CachedCredentialsType credentialsType);
    [EditorBrowsableAttribute("1")]
public UICredentialsProvider(CachedCredentialsType credentialsType, IWin32Window parentWindow);
    private sealed virtual override ICredentials Microsoft.TeamFoundation.Client.ICredentialsProvider.GetCredentials(Uri uri, ICredentials failedCredentials);
    [EditorBrowsableAttribute("1")]
public sealed virtual ICredentials GetCredentials(Uri uri, ICredentials failedCredentials, string caption, string messageText, IntPtr parentWindowHandle);
    private sealed virtual override void Microsoft.TeamFoundation.Client.ICredentialsProvider.NotifyCredentialsAuthenticated(Uri uri);
}
[EditorBrowsableAttribute("1")]
public static class Microsoft.TeamFoundation.Client.UIHost : object {
    [CompilerGeneratedAttribute]
private static EventHandler ColorChanged;
    [CompilerGeneratedAttribute]
private static EventHandler FontChanged;
    private static ConnectedUserContext m_connectedUserContext;
    [CompilerGeneratedAttribute]
private static ModalStateEventHandler EnterModalState;
    [CompilerGeneratedAttribute]
private static ModalStateEventHandler ExitModalState;
    [CompilerGeneratedAttribute]
private static EventHandler`1<BeforeShowDialogEventArgs> BeforeShowDialog;
    private static Font s_font;
    private static UIConfig s_uiConfig;
    private static TeamFoundationRuntimeHost s_instance;
    private static string s_configurationFileName;
    private static bool s_isModal;
    public static IServiceProvider ServiceProvider { get; }
    public static IWin32Window DefaultParentWindow { get; }
    public static IntPtr DefaultParentWindowHandle { get; }
    public static Font SystemFont { get; }
    public static Font Font { get; }
    public static Icon AppIcon { get; }
    public static Encoding OutputEncoding { get; }
    internal static RuntimeEnvironmentFlags EnvironmentFlags { get; }
    public static UIConfig UIConfig { get; }
    public static string NewLine { get; }
    public static int OutputWidth { get; }
    public static string VsApplicationDataPath { get; }
    public static RegistryKey UserRegistryRoot { get; }
    public static RegistryKey ApplicationRegistryRoot { get; }
    public static string ConfigurationFileName { get; }
    public static UIHostColors Colors { get; }
    public static WinformsStyler WinformsStyler { get; }
    public static ConnectedUserContext ConnectedUserContext { get; }
    public static bool IsModal { get; public set; }
    public static string FileTypeFilter { get; }
    public static TeamFoundationRuntimeHost Instance { get; public set; }
    public static bool IsVistaOrNewer { get; }
    private static UIHost();
    public static object GetService(Type serviceType);
    public static IServiceProvider get_ServiceProvider();
    public static bool DisplayHelp(string helpTopic);
    public static IWin32Window GetProperOwnerWindow(IWin32Window owner);
    private static string GetHelpTopicFromParent(IWin32Window parent);
    public static DialogResult ShowModalDialog(Form form);
    public static DialogResult ShowModalDialog(Form form, IWin32Window parent);
    public static void WriteError(LogCategory category, string messageFormat, Object[] args);
    public static void WriteError(LogCategory category, string message);
    public static void WriteWarning(LogCategory category, string messageFormat, Object[] args);
    public static void WriteWarning(LogCategory category, string message);
    public static void WriteInfo(LogCategory category, string message);
    public static void WriteInfo(LogCategory category, string messageFormat, Object[] args);
    public static void WriteIndented(LogCategory category, string indent, string messageFormat, Object[] args);
    public static void WriteIndented(LogCategory category, string indent, string inputString);
    public static void WriteLine(LogCategory category, string messageFormat, Object[] args);
    public static void WriteLine(LogCategory category, string message);
    public static void WriteLine(LogCategory category);
    public static void WriteLine(LogFlags flags, LogCategory category, string messageFormat, Object[] args);
    public static void WriteLine(LogFlags flags, LogCategory category, string message);
    public static void WriteLine(LogFlags flags, LogCategory category);
    public static void Write(LogCategory category, string message);
    public static void Write(LogCategory category, string messageFormat, Object[] args);
    public static void Write(LogFlags flags, LogCategory category, string messageFormat, Object[] args);
    public static void Write(LogFlags flags, LogCategory category, string message);
    public static string Truncate(string text, int width);
    public static int CalculateWidth(string text);
    public static string EllipsisAtFront(string fullString, int fieldWidth);
    public static string EllipsisAtBack(string fullString, int fieldWidth);
    public static DialogResult ShowAndTraceException(Exception ex);
    public static DialogResult ShowException(Exception e);
    public static DialogResult ShowException(IWin32Window parent, Exception e);
    public static DialogResult ShowException(Exception e, string helpTopic, string caption);
    public static DialogResult ShowException(IWin32Window parent, Exception e, string helpTopic, string caption);
    public static DialogResult ShowError(string text);
    public static DialogResult ShowError(IWin32Window parent, string text);
    public static DialogResult ShowError(string text, string helpTopic, string caption);
    public static DialogResult ShowError(IWin32Window parent, string text, string helpTopic, string caption);
    public static DialogResult ShowWarning(string text);
    public static DialogResult ShowWarning(IWin32Window parent, string text);
    public static DialogResult ShowWarning(string text, string helpTopic, string caption);
    public static DialogResult ShowWarning(IWin32Window parent, string text, string helpTopic, string caption);
    public static DialogResult ShowInformation(string text);
    public static DialogResult ShowInformation(IWin32Window parent, string text);
    public static DialogResult ShowInformation(string text, string helpTopic, string caption);
    public static DialogResult ShowInformation(IWin32Window parent, string text, string helpTopic, string caption);
    public static DialogResult ShowMessageBox(string text, string helpTopic, string caption, MessageBoxButtons buttons, MessageBoxIcon icon, MessageBoxDefaultButton defaultButton);
    public static DialogResult ShowMessageBox(IWin32Window parent, string text, string helpTopic, string caption, MessageBoxButtons buttons, MessageBoxIcon icon, MessageBoxDefaultButton defaultButton);
    public static bool EnableModeless(bool enable);
    public static IWin32Window get_DefaultParentWindow();
    public static IntPtr get_DefaultParentWindowHandle();
    public static void InitializeContainer(ContainerControl container);
    public static int OnBroadcastMessage(int msg, IntPtr wParam, IntPtr lParam);
    public static Font get_SystemFont();
    private static Font GetInstanceFont();
    public static Font get_Font();
    public static Icon get_AppIcon();
    public static Encoding get_OutputEncoding();
    internal static RuntimeEnvironmentFlags get_EnvironmentFlags();
    public static WaitCursor GetWaitCursor();
    internal static string ExtractTFSDisplayName(string url);
    internal static string ExtractTFSDisplayName(Uri url);
    public static void Beep();
    public static void UpdatePrimaryFont(Font font, Control control, bool recurse);
    private static void UpdatePrimaryFontHelper(Font font, Control control, bool recurse);
    [CompilerGeneratedAttribute]
public static void add_ColorChanged(EventHandler value);
    [CompilerGeneratedAttribute]
public static void remove_ColorChanged(EventHandler value);
    internal static void OnColorChanged();
    [CompilerGeneratedAttribute]
public static void add_FontChanged(EventHandler value);
    [CompilerGeneratedAttribute]
public static void remove_FontChanged(EventHandler value);
    internal static void OnFontChanged();
    public static void UpdateCommandStatus();
    public static UIConfig get_UIConfig();
    private static void EnsureConfig();
    public static string get_NewLine();
    public static int get_OutputWidth();
    public static string get_VsApplicationDataPath();
    public static RegistryKey get_UserRegistryRoot();
    public static RegistryKey get_ApplicationRegistryRoot();
    public static RegistryKey TryGetUserRegistryRoot();
    public static RegistryKey TryGetApplicationRegistryRoot();
    public static string get_ConfigurationFileName();
    public static void Shutdown();
    public static UIHostColors get_Colors();
    public static WinformsStyler get_WinformsStyler();
    public static Bitmap ThemeBitmap(Bitmap image, Color backgroundColor);
    public static ConnectedUserContext get_ConnectedUserContext();
    [CompilerGeneratedAttribute]
public static void add_EnterModalState(ModalStateEventHandler value);
    [CompilerGeneratedAttribute]
public static void remove_EnterModalState(ModalStateEventHandler value);
    [CompilerGeneratedAttribute]
public static void add_ExitModalState(ModalStateEventHandler value);
    [CompilerGeneratedAttribute]
public static void remove_ExitModalState(ModalStateEventHandler value);
    public static void OnEnterExitModalState(bool enterModal);
    public static bool get_IsModal();
    public static void set_IsModal(bool value);
    public static string get_FileTypeFilter();
    public static TeamFoundationRuntimeHost get_Instance();
    public static void set_Instance(TeamFoundationRuntimeHost value);
    public static void SetInstanceInternal(TeamFoundationRuntimeHost host);
    public static bool get_IsVistaOrNewer();
    public static int GetComboBoxPreferredWidth(ComboBox comboBox);
    [CompilerGeneratedAttribute]
public static void add_BeforeShowDialog(EventHandler`1<BeforeShowDialogEventArgs> value);
    [CompilerGeneratedAttribute]
public static void remove_BeforeShowDialog(EventHandler`1<BeforeShowDialogEventArgs> value);
    internal static void OnBeforeShowDialog(Form dialog);
}
[EditorBrowsableAttribute("1")]
public class Microsoft.TeamFoundation.Client.UIHostColors : object {
    public Color BorderColor { get; }
    public Color DefaultInfoBackColor { get; }
    public Color InfoBackColor { get; }
    public Color InfoForeColor { get; }
    public Color ControlBackColor { get; }
    public Color ControlForeColor { get; }
    public Color ReadOnlyControlBackColor { get; }
    public Color ReadOnlyControlForeColor { get; }
    public Color InvalidControlBackColor { get; }
    public Color InvalidControlForeColor { get; }
    public Color ErrorControlBackColor { get; }
    public Color ErrorControlForeColor { get; }
    public Color ProgressFillColor { get; }
    public Color QueryBuilderGroupedBackColor { get; }
    public Color QueryBuilderGroupedLineColor { get; }
    public Color SortedColumnBackColor { get; }
    public Color SortedColumnForeColor { get; }
    public Color GrayTextColor { get; }
    public Color GridForeColor { get; }
    public Color GridBackColor { get; }
    public Color GridHeaderForeColor { get; }
    public Color GridHeaderBackColor { get; }
    public Color GridRowHeaderSelectionBackColor { get; }
    public Color GridRowHeaderSelectionForeColor { get; }
    public Color GridUnfocusedSelectedRowBackColor { get; }
    public Color GridUnfocusedSelectedRowForeColor { get; }
    public Color GridTargetRowBackColor { get; }
    public Color GridTargetRowForeColor { get; }
    public Color GridSummaryRowBackColor { get; }
    public Color GridSummaryRowForeColor { get; }
    public Color GridLineColor { get; }
    public Color HighlightForeColor { get; }
    public Color HighlightBackColor { get; }
    public Color FrameColor { get; }
    public Color FormBackColor { get; }
    public Color FormForeColor { get; }
    public Color FormDarkColor { get; }
    public Color FormDarkDarkColor { get; }
    public Color FormLightColor { get; }
    public Color VisualSurfaceSubItemBorder { get; }
    public Color VisualSurfaceSubItemGradientBegin { get; }
    public Color VisualSurfaceSubItemGradientEnd { get; }
    public Color VisualSurfaceSubItemText { get; }
    public Color VisualSurfaceMainItemBorder { get; }
    public Color VisualSurfaceMainItemGradientBegin { get; }
    public Color VisualSurfaceMainItemGradientEnd { get; }
    public Color VisualSurfaceMainItemText { get; }
    public Color VisualSurfaceOutline { get; }
    public Color ActiveTabForeground { get; }
    public Color TabForeground { get; }
    public Color TabBackground { get; }
    public Color TabHoverForeground { get; }
    public Color HotTrackColor { get; }
    public virtual Color get_BorderColor();
    public virtual Color get_DefaultInfoBackColor();
    public virtual Color get_InfoBackColor();
    public virtual Color get_InfoForeColor();
    public virtual Color get_ControlBackColor();
    public virtual Color get_ControlForeColor();
    public virtual Color get_ReadOnlyControlBackColor();
    public virtual Color get_ReadOnlyControlForeColor();
    public virtual Color get_InvalidControlBackColor();
    public virtual Color get_InvalidControlForeColor();
    public virtual Color get_ErrorControlBackColor();
    public virtual Color get_ErrorControlForeColor();
    public virtual Color get_ProgressFillColor();
    public virtual Color get_QueryBuilderGroupedBackColor();
    public virtual Color get_QueryBuilderGroupedLineColor();
    public virtual Color get_SortedColumnBackColor();
    public virtual Color get_SortedColumnForeColor();
    public virtual Color get_GrayTextColor();
    public virtual Color get_GridForeColor();
    public virtual Color get_GridBackColor();
    public virtual Color get_GridHeaderForeColor();
    public virtual Color get_GridHeaderBackColor();
    public virtual Color get_GridRowHeaderSelectionBackColor();
    public virtual Color get_GridRowHeaderSelectionForeColor();
    public virtual Color get_GridUnfocusedSelectedRowBackColor();
    public virtual Color get_GridUnfocusedSelectedRowForeColor();
    public virtual Color get_GridTargetRowBackColor();
    public virtual Color get_GridTargetRowForeColor();
    public virtual Color get_GridSummaryRowBackColor();
    public virtual Color get_GridSummaryRowForeColor();
    public virtual Color get_GridLineColor();
    public virtual Color get_HighlightForeColor();
    public virtual Color get_HighlightBackColor();
    public virtual Color get_FrameColor();
    public virtual Color get_FormBackColor();
    public virtual Color get_FormForeColor();
    public virtual Color get_FormDarkColor();
    public virtual Color get_FormDarkDarkColor();
    public virtual Color get_FormLightColor();
    public virtual Color get_VisualSurfaceSubItemBorder();
    public virtual Color get_VisualSurfaceSubItemGradientBegin();
    public virtual Color get_VisualSurfaceSubItemGradientEnd();
    public virtual Color get_VisualSurfaceSubItemText();
    public virtual Color get_VisualSurfaceMainItemBorder();
    public virtual Color get_VisualSurfaceMainItemGradientBegin();
    public virtual Color get_VisualSurfaceMainItemGradientEnd();
    public virtual Color get_VisualSurfaceMainItemText();
    public virtual Color get_VisualSurfaceOutline();
    public virtual Color get_ActiveTabForeground();
    public virtual Color get_TabForeground();
    public virtual Color get_TabBackground();
    public virtual Color get_TabHoverForeground();
    public virtual Color get_HotTrackColor();
    public static Color CombineColors(Color c1, int a1, Color c2, int a2);
}
public class Microsoft.TeamFoundation.Client.UILogger : TFLogger {
    public virtual void Error(string message);
    public virtual void Info(string message);
    public virtual void Warning(string message);
}
[EditorBrowsableAttribute("1")]
public class Microsoft.TeamFoundation.Client.VSColorTable : ProfessionalColorTable {
    private static string blueColorScheme;
    private static string oliveColorScheme;
    private static string silverColorScheme;
    private Dictionary`2<KnownColors, Color> vsRGB;
    private Dictionary`2<KnownColors, Color> ColorTable { get; }
    internal static string ColorScheme { get; }
    private bool UseBaseColorTable { get; }
    public Color ButtonPressedBorder { get; }
    public Color ButtonSelectedBorder { get; }
    public Color ButtonCheckedGradientBegin { get; }
    public Color ButtonCheckedGradientMiddle { get; }
    public Color ButtonCheckedGradientEnd { get; }
    public Color ButtonSelectedGradientBegin { get; }
    public Color ButtonSelectedGradientMiddle { get; }
    public Color ButtonSelectedGradientEnd { get; }
    public Color ButtonPressedGradientBegin { get; }
    public Color ButtonPressedGradientMiddle { get; }
    public Color ButtonPressedGradientEnd { get; }
    public Color CheckBackground { get; }
    public Color CheckSelectedBackground { get; }
    public Color CheckPressedBackground { get; }
    public Color GripDark { get; }
    public Color GripLight { get; }
    public Color ImageMarginGradientBegin { get; }
    public Color ImageMarginGradientMiddle { get; }
    public Color ImageMarginGradientEnd { get; }
    public Color ImageMarginRevealedGradientBegin { get; }
    public Color ImageMarginRevealedGradientMiddle { get; }
    public Color ImageMarginRevealedGradientEnd { get; }
    public Color MenuStripGradientBegin { get; }
    public Color MenuStripGradientEnd { get; }
    public Color MenuItemSelected { get; }
    public Color MenuItemBorder { get; }
    public Color MenuItemSelectedGradientBegin { get; }
    public Color MenuItemSelectedGradientEnd { get; }
    public Color MenuItemPressedGradientBegin { get; }
    public Color MenuItemPressedGradientMiddle { get; }
    public Color MenuItemPressedGradientEnd { get; }
    public Color RaftingContainerGradientBegin { get; }
    public Color RaftingContainerGradientEnd { get; }
    public Color SeparatorDark { get; }
    public Color SeparatorLight { get; }
    public Color ToolStripBorder { get; }
    public Color ToolStripDropDownBackground { get; }
    public Color ToolStripGradientBegin { get; }
    public Color ToolStripGradientMiddle { get; }
    public Color ToolStripGradientEnd { get; }
    public Color OverflowButtonGradientBegin { get; }
    public Color OverflowButtonGradientMiddle { get; }
    public Color OverflowButtonGradientEnd { get; }
    private Dictionary`2<KnownColors, Color> get_ColorTable();
    internal static string get_ColorScheme();
    private bool get_UseBaseColorTable();
    internal Color FromKnownColor(KnownColors color);
    public virtual Color get_ButtonPressedBorder();
    public virtual Color get_ButtonSelectedBorder();
    public virtual Color get_ButtonCheckedGradientBegin();
    public virtual Color get_ButtonCheckedGradientMiddle();
    public virtual Color get_ButtonCheckedGradientEnd();
    public virtual Color get_ButtonSelectedGradientBegin();
    public virtual Color get_ButtonSelectedGradientMiddle();
    public virtual Color get_ButtonSelectedGradientEnd();
    public virtual Color get_ButtonPressedGradientBegin();
    public virtual Color get_ButtonPressedGradientMiddle();
    public virtual Color get_ButtonPressedGradientEnd();
    public virtual Color get_CheckBackground();
    public virtual Color get_CheckSelectedBackground();
    public virtual Color get_CheckPressedBackground();
    public virtual Color get_GripDark();
    public virtual Color get_GripLight();
    public virtual Color get_ImageMarginGradientBegin();
    public virtual Color get_ImageMarginGradientMiddle();
    public virtual Color get_ImageMarginGradientEnd();
    public virtual Color get_ImageMarginRevealedGradientBegin();
    public virtual Color get_ImageMarginRevealedGradientMiddle();
    public virtual Color get_ImageMarginRevealedGradientEnd();
    public virtual Color get_MenuStripGradientBegin();
    public virtual Color get_MenuStripGradientEnd();
    public virtual Color get_MenuItemSelected();
    public virtual Color get_MenuItemBorder();
    public virtual Color get_MenuItemSelectedGradientBegin();
    public virtual Color get_MenuItemSelectedGradientEnd();
    public virtual Color get_MenuItemPressedGradientBegin();
    public virtual Color get_MenuItemPressedGradientMiddle();
    public virtual Color get_MenuItemPressedGradientEnd();
    public virtual Color get_RaftingContainerGradientBegin();
    public virtual Color get_RaftingContainerGradientEnd();
    public virtual Color get_SeparatorDark();
    public virtual Color get_SeparatorLight();
    public virtual Color get_ToolStripBorder();
    public virtual Color get_ToolStripDropDownBackground();
    public virtual Color get_ToolStripGradientBegin();
    public virtual Color get_ToolStripGradientMiddle();
    public virtual Color get_ToolStripGradientEnd();
    public virtual Color get_OverflowButtonGradientBegin();
    public virtual Color get_OverflowButtonGradientMiddle();
    public virtual Color get_OverflowButtonGradientEnd();
    internal void InitTanLunaColors(Dictionary`2& rgbTable);
}
public class Microsoft.TeamFoundation.Client.WebServiceCall : object {
    private string m_webServiceCalled;
    private int m_runTime;
    private DateTime m_startTime;
    private DateTime m_endTime;
    private int m_threadId;
    private string m_threadPriority;
    private bool m_isRunning;
    public string WebServiceCalled { get; }
    public int RunTime { get; }
    public DateTime StartTime { get; public set; }
    public string StartTimeString { get; }
    public DateTime EndTime { get; public set; }
    public string EndTimeString { get; }
    public int ThreadId { get; public set; }
    public string ThreadPriority { get; public set; }
    public bool IsRunning { get; }
    public WebServiceCall(string webServiceName, int runTime, bool isRunning);
    public string get_WebServiceCalled();
    public int get_RunTime();
    public DateTime get_StartTime();
    public void set_StartTime(DateTime value);
    public string get_StartTimeString();
    public DateTime get_EndTime();
    public void set_EndTime(DateTime value);
    public string get_EndTimeString();
    public int get_ThreadId();
    public void set_ThreadId(int value);
    public string get_ThreadPriority();
    public void set_ThreadPriority(string value);
    public bool get_IsRunning();
}
public class Microsoft.TeamFoundation.Client.WebServiceCallList : BindingList`1<WebServiceCall> {
    public void AddTime(string webServiceName, int runTime);
    internal void AddRunning(string webServiceName, int threadId, ThreadPriority threadPriority);
}
public class Microsoft.TeamFoundation.Client.WebServiceStatList : BindingList`1<WebServiceStats> {
    private WebServiceStats GetStats(string webServiceName);
    public void AddTime(string webServiceName, int runTime);
}
public class Microsoft.TeamFoundation.Client.WebServiceStats : object {
    [CompilerGeneratedAttribute]
private EventHandler WebServiceChanged;
    [CompilerGeneratedAttribute]
private EventHandler MinTimeChanged;
    [CompilerGeneratedAttribute]
private EventHandler MaxTimeChanged;
    [CompilerGeneratedAttribute]
private EventHandler CountChanged;
    [CompilerGeneratedAttribute]
private EventHandler TotalTimeChanged;
    [CompilerGeneratedAttribute]
private EventHandler AverageChanged;
    [CompilerGeneratedAttribute]
private EventHandler LastChanged;
    private string m_webService;
    private int m_minTime;
    private int m_maxTime;
    private int m_last;
    private int m_average;
    private int m_count;
    private int m_totalTime;
    public string WebService { get; private set; }
    public int MinTime { get; private set; }
    public int MaxTime { get; private set; }
    public int Count { get; private set; }
    public int TotalTime { get; private set; }
    public int Average { get; private set; }
    public int Last { get; private set; }
    public WebServiceStats(string webServiceName);
    public void AddTime(int runTime);
    [CompilerGeneratedAttribute]
public void add_WebServiceChanged(EventHandler value);
    [CompilerGeneratedAttribute]
public void remove_WebServiceChanged(EventHandler value);
    public string get_WebService();
    private void set_WebService(string value);
    [CompilerGeneratedAttribute]
public void add_MinTimeChanged(EventHandler value);
    [CompilerGeneratedAttribute]
public void remove_MinTimeChanged(EventHandler value);
    public int get_MinTime();
    private void set_MinTime(int value);
    [CompilerGeneratedAttribute]
public void add_MaxTimeChanged(EventHandler value);
    [CompilerGeneratedAttribute]
public void remove_MaxTimeChanged(EventHandler value);
    public int get_MaxTime();
    private void set_MaxTime(int value);
    [CompilerGeneratedAttribute]
public void add_CountChanged(EventHandler value);
    [CompilerGeneratedAttribute]
public void remove_CountChanged(EventHandler value);
    public int get_Count();
    private void set_Count(int value);
    [CompilerGeneratedAttribute]
public void add_TotalTimeChanged(EventHandler value);
    [CompilerGeneratedAttribute]
public void remove_TotalTimeChanged(EventHandler value);
    public int get_TotalTime();
    private void set_TotalTime(int value);
    [CompilerGeneratedAttribute]
public void add_AverageChanged(EventHandler value);
    [CompilerGeneratedAttribute]
public void remove_AverageChanged(EventHandler value);
    public int get_Average();
    private void set_Average(int value);
    [CompilerGeneratedAttribute]
public void add_LastChanged(EventHandler value);
    [CompilerGeneratedAttribute]
public void remove_LastChanged(EventHandler value);
    public int get_Last();
    private void set_Last(int value);
    public static int DescendingSort(WebServiceStats first, WebServiceStats second);
}
[EditorBrowsableAttribute("1")]
public class Microsoft.TeamFoundation.Client.Win32WindowWrapper : object {
    private IntPtr m_hwnd;
    private IntPtr System.Windows.Forms.IWin32Window.Handle { get; }
    public Win32WindowWrapper(IntPtr handle);
    public static Win32WindowWrapper FromVisual(Visual visual);
    private sealed virtual override IntPtr System.Windows.Forms.IWin32Window.get_Handle();
}
[ObsoleteAttribute("This class is deprecated and will be removed in a future release. See Microsoft.VisualStudio.Services.Common.WindowsCredential instead.", "False")]
public class Microsoft.TeamFoundation.Client.WindowsCredential : IssuedTokenCredential {
    [CompilerGeneratedAttribute]
private ICredentials <Credentials>k__BackingField;
    [CompilerGeneratedAttribute]
private ICredentialsProvider <Provider>k__BackingField;
    [EditorBrowsableAttribute("1")]
public ICredentials Credentials { get; public set; }
    internal ICredentialsProvider Provider { get; internal set; }
    protected VssCredentialsType CredentialType { get; }
    public WindowsCredential(bool useDefaultCredentials);
    public WindowsCredential(ICredentials credentials);
    public WindowsCredential(ICredentials credentials, ICredentialsProvider credentialsProvider);
    [CompilerGeneratedAttribute]
public ICredentials get_Credentials();
    [CompilerGeneratedAttribute]
public void set_Credentials(ICredentials value);
    [CompilerGeneratedAttribute]
internal ICredentialsProvider get_Provider();
    [CompilerGeneratedAttribute]
internal void set_Provider(ICredentialsProvider value);
    protected virtual VssCredentialsType get_CredentialType();
    internal virtual bool IsAuthenticationChallenge(HttpWebResponse webResponse);
    internal virtual IssuedTokenProvider OnCreateTokenProvider(Uri serverUrl, HttpWebResponse response);
}
[EditorBrowsableAttribute("1")]
public class Microsoft.TeamFoundation.Client.WindowsHost : TeamFoundationRuntimeHost {
    protected Icon m_appIcon;
    private static UIHostColors s_uiHostColors;
    private static WinformsStyler s_winformsStyler;
    private static int s_guiModeRefCount;
    private static IWin32Window m_defaultParentWindowImpl;
    private static Icon s_defaultIcon;
    public IWin32Window DefaultParentWindow { get; }
    public RuntimeEnvironmentFlags EnvironmentFlags { get; }
    public Icon AppIcon { get; }
    public UIHostColors HostColors { get; }
    public WinformsStyler WinformsStyler { get; }
    public Font Font { get; }
    public static IWin32Window DefaultParentWindowImpl { get; public set; }
    internal static UIHostColors HostColorsImpl { get; }
    internal static WinformsStyler WinformsStylerImpl { get; }
    internal static Font FontImpl { get; }
    internal static string NewLineImpl { get; }
    internal static int OutputWidthImpl { get; }
    internal static Encoding OutputEncodingImpl { get; }
    internal static string VsApplicationDataPathImpl { get; }
    internal static RegistryKey UserRegistryRootImpl { get; }
    internal static RegistryKey ApplicationRegistryRootImpl { get; }
    protected WindowsHost(Icon appIcon);
    private static WindowsHost();
    public virtual DialogResult ShowMessageBox(IWin32Window parent, string text, string helpTopic, string caption, MessageBoxButtons buttons, MessageBoxIcon icon, MessageBoxDefaultButton defaultButton);
    public virtual void Write(LogFlags flags, LogCategory category, string message);
    public virtual IWin32Window get_DefaultParentWindow();
    public virtual RuntimeEnvironmentFlags get_EnvironmentFlags();
    public virtual Icon get_AppIcon();
    public virtual bool DisplayHelp(string helpTopic);
    public virtual UIHostColors get_HostColors();
    public virtual WinformsStyler get_WinformsStyler();
    public virtual DialogResult ShowModalDialog(Form form, IWin32Window parent, bool showHelpButton);
    public virtual Font get_Font();
    public virtual WaitCursor GetWaitCursor();
    protected virtual void OnModalDialogFormActivate(object sender, EventArgs e);
    internal static DialogResult ShowModalDialogImpl(Form form, IWin32Window parent, bool showHelpButton);
    internal static bool DisplayHelpImpl(string helpTopic);
    internal static bool IsRightToLeft(IWin32Window owner);
    internal static DialogResult ShowMessageBoxImpl(IWin32Window parent, string text, string helpTopic, string caption, MessageBoxButtons buttons, MessageBoxIcon icon, MessageBoxDefaultButton defaultButton);
    private static string GetCaptionFromMessageBoxIcon(MessageBoxIcon icon);
    internal static void WriteImpl(LogFlags flags, LogCategory category, string message);
    public static IWin32Window get_DefaultParentWindowImpl();
    public static void set_DefaultParentWindowImpl(IWin32Window value);
    internal static UIHostColors get_HostColorsImpl();
    internal static WinformsStyler get_WinformsStylerImpl();
    internal static Font get_FontImpl();
    internal static WaitCursor GetWaitCursorImpl();
    internal static string get_NewLineImpl();
    internal static int get_OutputWidthImpl();
    internal static Encoding get_OutputEncodingImpl();
    internal static string get_VsApplicationDataPathImpl();
    internal static RegistryKey get_UserRegistryRootImpl();
    internal static RegistryKey get_ApplicationRegistryRootImpl();
    internal static bool EnableModelessImpl(bool enable);
    internal static void ShutdownImpl();
    private static void EnterGuiMode();
    private static void ExitGuiMode();
    public static void Initialize();
    public static void Initialize(Icon appIcon);
}
[ObsoleteAttribute("This class is deprecated and will be removed in a future release. See Microsoft.VisualStudio.Services.Common.WindowsToken instead.", "False")]
public class Microsoft.TeamFoundation.Client.WindowsToken : IssuedToken {
    [CompilerGeneratedAttribute]
private ICredentials <Credentials>k__BackingField;
    public ICredentials Credentials { get; private set; }
    protected internal VssCredentialsType CredentialType { get; }
    internal WindowsToken(ICredentials credentials);
    [CompilerGeneratedAttribute]
public ICredentials get_Credentials();
    [CompilerGeneratedAttribute]
private void set_Credentials(ICredentials value);
    protected internal virtual VssCredentialsType get_CredentialType();
    internal virtual void ApplyTo(HttpWebRequest webRequest);
    private sealed virtual override NetworkCredential System.Net.ICredentials.GetCredential(Uri uri, string authType);
}
[ObsoleteAttribute("This class is deprecated and will be removed in a future release. See Microsoft.VisualStudio.Services.Common.WindowsTokenProvider instead.", "False")]
internal class Microsoft.TeamFoundation.Client.WindowsTokenProvider : IssuedTokenProvider {
    public WindowsCredential Credential { get; }
    public bool GetTokenIsInteractive { get; }
    public WindowsTokenProvider(WindowsCredential credential, Uri serverUrl);
    public WindowsCredential get_Credential();
    public virtual bool get_GetTokenIsInteractive();
    protected virtual IssuedToken OnGetToken(IssuedToken failedToken, TimeSpan timeout);
    protected virtual IAsyncResult OnBeginGetToken(IssuedToken failedToken, TimeSpan timeout, AsyncCallback callback, object state);
    protected virtual IssuedToken OnEndGetToken(IAsyncResult result);
}
[EditorBrowsableAttribute("1")]
public static class Microsoft.TeamFoundation.Client.WindowsUserPicker : object {
    private static string s_localAccountsToken;
    private static WindowsUserPicker();
    public static IEnumerable`1<TeamFoundationIdentity> SelectWindowsUsers(IIdentityManagementService identityService, IntPtr hWnd);
    public static IEnumerable`1<TeamFoundationIdentity> SelectWindowsUsers(IIdentityManagementService identityService, IntPtr hWnd, bool isMultiSelected, bool allowGroups, bool includeComputers);
    public static IEnumerable`1<TeamFoundationIdentity> SelectWindowsUsers(IIdentityManagementService identityService, IntPtr hWnd, bool isMultiSelected, bool allowGroups, bool includeComputers, List`1& unresolvedIdentities);
    public static List`1<SecurityIdentifier> SelectAccounts(IntPtr hWnd, bool isMultiSelected, bool allowGroups, bool includeComputers);
    private static bool GetAccountName(DS_SELECTION selection, String& selectionName);
}
[EditorBrowsableAttribute("1")]
public class Microsoft.TeamFoundation.Client.WinformsStyler : object {
    public virtual void Style(ToolStrip toolStrip);
    public virtual void Style(ToolStrip toolStrip, bool preferVsipColors);
    public virtual void Style(ToolStrip toolStrip, bool preferVsipColors, bool overrideButtonSelectedColor);
    public virtual void Style(ContextMenuStrip contextMenu);
    public virtual void Style(DataGridView grid);
    public virtual void Style(DataGridView grid, bool highlightColumnHeaders);
    protected Size GetImageScalingSize();
    private void UpdateGridHeaderCells(DataGridView grid);
    private void grid_CellMouseLeave(object sender, DataGridViewCellEventArgs e);
    private void grid_CellMouseEnter(object sender, DataGridViewCellEventArgs e);
    public virtual void Style(CustomCombo`1<T> combo, bool preferVsipColors);
    public virtual void Style(TreeView treeView);
}
[EditorBrowsableAttribute("1")]
public class Microsoft.TeamFoundation.Client.WrappingCheckBox : CheckBox {
    private Size cachedSizeOfOneLineOfText;
    private Hashtable preferredSizeHash;
    protected virtual void OnTextChanged(EventArgs e);
    protected virtual void OnFontChanged(EventArgs e);
    private void cachetextsize();
    public virtual Size GetPreferredSize(Size proposedSize);
}
[EditorBrowsableAttribute("1")]
public class Microsoft.TeamFoundation.Client.WrappingRadioButton : RadioButton {
    private Size cachedSizeOfOneLineOfText;
    private Hashtable preferredSizeHash;
    protected virtual void OnTextChanged(EventArgs e);
    protected virtual void OnFontChanged(EventArgs e);
    private void cachetextsize();
    public virtual Size GetPreferredSize(Size proposedSize);
}
internal class Microsoft.TeamFoundation.Common.ELeadRegistry : object {
    public static RegistryKey OpenSubKey(string keyName, bool writable);
    public static RegistryKey OpenSubKeyOrCreate(string keyName);
    public static object GetValueFromRegistry(string keyName, string valueName);
    public static RegistryKey OpenSubKey(string keyName);
    private static void CopySubKeyFromHKLM(string keyName);
}
public class Microsoft.TeamFoundation.Common.SoapExceptionUtilities : object {
    public static string SqlNumber;
    public static string BaseExceptionName;
    public static string ExceptionMessage;
    public static string ServerTimeStamp;
    private static bool _fullDetails;
    public static bool FullDetails { get; public set; }
    private static SoapExceptionUtilities();
    public static bool get_FullDetails();
    public static void set_FullDetails(bool value);
    [ObsoleteAttribute("Method is obsolete")]
public static bool IsFromSqlException(SoapException se);
    [ObsoleteAttribute("Method is obsolete")]
public static bool IsFromSecurityException(SoapException se);
    [ObsoleteAttribute("Method is obsolete")]
public static bool IsFromArgumentException(SoapException se);
    public static Exception ConvertToStronglyTypedException(SoapException se);
    public static string GetExceptionMessage(SoapException e);
    public static string GetBaseExceptionName(SoapException exception);
    public static string GetDetailAttribute(SoapException exception, string name);
    public static int GetSqlNumber(SoapException exception);
    [ObsoleteAttribute("Method is obsolete")]
public static void ShowErrorDialog(IWin32Window owner, SoapException e);
}
public class Microsoft.TeamFoundation.Controls.CommonStructureEdit : UserControl {
    [CompilerGeneratedAttribute]
private EventHandler NodeSelectChange;
    private ResourceManager _resources;
    private ContextMenu menu;
    private MenuItem menuNew;
    private MenuItem menuRename;
    private MenuItem menuDelete;
    private MenuItem menuSeparator;
    private MenuItem menuSeparatorMoveDownIndent;
    private MenuItem menuSeparatorRefreshIndent;
    private MenuItem menuIndent;
    private MenuItem menuOutdent;
    private MenuItem menuRefresh;
    private MenuItem menuMoveUp;
    private MenuItem menuMoveDown;
    private TreeView tree;
    private Panel panel;
    private IContainer components;
    private ToolStripButton _addRootButton;
    private ToolStripButton _addChildButton;
    private ToolStripButton _removeButton;
    private ToolStripButton _moveUpButton;
    private ToolStripButton _moveDownButton;
    private ToolStripButton _indentButton;
    private ToolStripButton _unindentButton;
    private ToolStripSeparator _toolBarSeparator;
    private ToolStrip _treeViewToolBar;
    private string _rootNodeUri;
    private string _newNodeDefaultName;
    private bool _inNodeEdit;
    private bool _inCreateNewNode;
    private string FIND_NODE_URI_XPATH_QUERY;
    private ICommonStructureService css;
    private ILinking _linking;
    private TfsTeamProjectCollection _tfs;
    private string selectedName;
    private string selectedType;
    private string selectedNodeUri;
    private CssNode selectedCssNode;
    private XmlNode structure;
    private static string cHelpInvalidCssNodeName;
    public string RootNodeUri { get; public set; }
    public string SelectedNodeUri { get; }
    public TfsTeamProjectCollection TfsTeamProjectCollection { get; public set; }
    public ICommonStructureService CommonStructureServiceProxy { get; public set; }
    public string ToolStripAccessibilityName { get; public set; }
    [CompilerGeneratedAttribute]
public void add_NodeSelectChange(EventHandler value);
    [CompilerGeneratedAttribute]
public void remove_NodeSelectChange(EventHandler value);
    public string get_RootNodeUri();
    public void set_RootNodeUri(string value);
    public string get_SelectedNodeUri();
    public TfsTeamProjectCollection get_TfsTeamProjectCollection();
    public void set_TfsTeamProjectCollection(TfsTeamProjectCollection value);
    public ICommonStructureService get_CommonStructureServiceProxy();
    public void set_CommonStructureServiceProxy(ICommonStructureService value);
    public void SelectRootNode();
    protected virtual void Dispose(bool disposing);
    private CssNode GetNodeInfo(XmlNode xn);
    private void RefreshView(TreeNode prevSelToRestore);
    private TreeNode PopulateNode(XmlNode xn, XmlNode xnSelect, TreeNode& treeNodeToSelect);
    private XmlNode FindNodeOrClosestParent(XmlNode xn, TreeNode tn);
    private TreeNode CreateTreeNode(CssNode tag);
    public List`1<string> GetCssRootNodePaths(Uri rootNodeUri);
    public string get_ToolStripAccessibilityName();
    public void set_ToolStripAccessibilityName(string value);
    private string GetUniqueNodeName();
    private void menuNew_Click(object sender, EventArgs e);
    private void menuRename_Click(object sender, EventArgs e);
    private void menuDelete_Click(object sender, EventArgs e);
    private void ReorderNode(int increment);
    private void menuMoveUp_Click(object sender, EventArgs e);
    private void menuMoveDown_Click(object sender, EventArgs e);
    private void menuIndent_Click(object sender, EventArgs e);
    private void menuOutdent_Click(object sender, EventArgs e);
    private void menuRefresh_Click(object sender, EventArgs e);
    private void OnTreeViewToolBarButtonClick(object sender, ToolStripItemClickedEventArgs e);
    private void EnableAllMenuItems(bool enable);
    private void UpdateEnabledState();
    private void OnUnindentButtonClick();
    private void OnIndentButtonClick();
    private void menu_Popup(object sender, EventArgs e);
    private void tree_BeforeLabelEdit(object sender, NodeLabelEditEventArgs e);
    private void tree_AfterLabelEdit(object sender, NodeLabelEditEventArgs e);
    private void CreateNodeAfterEdit(NodeLabelEditEventArgs e);
    private void RenameNodeAfterEdit(NodeLabelEditEventArgs e);
    private void SelectChanged(TreeViewEventArgs e);
    private void tree_AfterSelect(object sender, TreeViewEventArgs e);
    private void SelectNodeAndFireEvent(TreeNode tn);
    private void MoveTreeNode(TreeNode node, TreeNode newParent);
    private void tree_DragDrop(object sender, DragEventArgs e);
    private void tree_DragEnter(object sender, DragEventArgs e);
    private void tree_DragOver(object sender, DragEventArgs e);
    private void tree_ItemDrag(object sender, ItemDragEventArgs e);
    private void tree_NodeMouseClick(object sender, TreeNodeMouseClickEventArgs e);
    private void CheckPermissions(string actionId);
}
[EditorBrowsableAttribute("1")]
public class Microsoft.TeamFoundation.Controls.CssNode : object {
    private string m_name;
    private string m_ID;
    internal string Name { get; internal set; }
    internal string ID { get; internal set; }
    internal CssNode(string name, string id);
    internal void set_Name(string value);
    internal string get_Name();
    internal void set_ID(string value);
    internal string get_ID();
}
internal class Microsoft.TeamFoundation.Controls.DeleteNodesDialog : BaseDialog {
    private NodeInfo _selectedNodeInfo;
    private ComponentResourceManager resources;
    private IContainer components;
    private TableLayoutPanel tableLayoutPanel1;
    private Label Info_label;
    private Label Select_node_text;
    private Button ok_button;
    private Button cancel_button;
    private CssDataProvider provider;
    private CssHierarchyControl _cssPicker;
    private PictureBox pictureBox1;
    private TableLayoutPanel Ok_cancel_tableLayoutPanel;
    public NodeInfo SelectedNodeInfo { get; }
    public DeleteNodesDialog(TfsTeamProjectCollection tfs, string reclassifyUri, string skipNodeUri);
    protected virtual void OnLoad(EventArgs e);
    public NodeInfo get_SelectedNodeInfo();
    private void ok_button_Click(object sender, EventArgs e);
    private void cancel_button_Click(object sender, EventArgs e);
    protected virtual void Dispose(bool disposing);
    private void InitializeComponent();
}
public class Microsoft.TeamFoundation.Framework.Client.AccessCheckException : TeamFoundationSecurityServiceException {
    private IdentityDescriptor m_identityDescriptor;
    public string IdentityName { get; }
    public string Token { get; }
    public int RequiredPermissions { get; }
    public Guid NamespaceId { get; }
    public IdentityDescriptor IdentityDescriptor { get; }
    public AccessCheckException(string message);
    public AccessCheckException(string message, Exception ex);
    protected AccessCheckException(SerializationInfo info, StreamingContext context);
    public string get_IdentityName();
    public string get_Token();
    public int get_RequiredPermissions();
    public Guid get_NamespaceId();
    public IdentityDescriptor get_IdentityDescriptor();
}
public class Microsoft.TeamFoundation.Framework.Client.AccessControlEntry : object {
    [CompilerGeneratedAttribute]
private int <Allow>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Deny>k__BackingField;
    [CompilerGeneratedAttribute]
private IdentityDescriptor <Descriptor>k__BackingField;
    [CompilerGeneratedAttribute]
private AceExtendedInformation <ExtendedInfo>k__BackingField;
    public int Allow { get; public set; }
    public int Deny { get; public set; }
    public IdentityDescriptor Descriptor { get; public set; }
    public AceExtendedInformation ExtendedInfo { get; public set; }
    public bool IsEmpty { get; }
    public AccessControlEntry(IdentityDescriptor descriptor, int allow, int deny);
    internal AccessControlEntry(IdentityDescriptor descriptor, int allow, int deny, AceExtendedInformation extendedInfo);
    [CompilerGeneratedAttribute]
public int get_Allow();
    [CompilerGeneratedAttribute]
public void set_Allow(int value);
    [CompilerGeneratedAttribute]
public int get_Deny();
    [CompilerGeneratedAttribute]
public void set_Deny(int value);
    [CompilerGeneratedAttribute]
public IdentityDescriptor get_Descriptor();
    [CompilerGeneratedAttribute]
public void set_Descriptor(IdentityDescriptor value);
    [CompilerGeneratedAttribute]
public AceExtendedInformation get_ExtendedInfo();
    [CompilerGeneratedAttribute]
[EditorBrowsableAttribute("1")]
public void set_ExtendedInfo(AceExtendedInformation value);
    public bool get_IsEmpty();
    internal AccessControlEntry Clone();
}
[EditorBrowsableAttribute("1")]
public class Microsoft.TeamFoundation.Framework.Client.AccessControlEntryDetails : AccessControlEntry {
    private int m_allow;
    private int m_deny;
    private IdentityDescriptor m_descriptor;
    private AceExtendedInformation m_extendedInformation;
    private string m_token;
    [EditorBrowsableAttribute("1")]
public static AccessControlEntryDetails FromXml(IServiceProvider serviceProvider, XmlReader reader);
    public virtual string ToString();
    [EditorBrowsableAttribute("1")]
public void ToXml(XmlWriter writer, string element);
    [EditorBrowsableAttribute("1")]
public static void ToXml(XmlWriter writer, string element, AccessControlEntryDetails obj);
    internal void InitializeFromWebService();
    [EditorBrowsableAttribute("1")]
public static AccessControlEntryDetails[] PrepareForWebServiceSerialization(string token, IEnumerable`1<AccessControlEntry> entries);
    internal static AccessControlEntryDetails PrepareForWebServiceSerialization(string token, AccessControlEntry entry);
}
public class Microsoft.TeamFoundation.Framework.Client.AccessControlList : object {
    [CompilerGeneratedAttribute]
private bool <InheritPermissions>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Token>k__BackingField;
    private Dictionary`2<IdentityDescriptor, AccessControlEntry> m_accessControlEntries;
    private bool m_includeExtendedInfoForAces;
    public bool InheritPermissions { get; public set; }
    public string Token { get; public set; }
    public IEnumerable`1<AccessControlEntry> AccessControlEntries { get; }
    protected internal bool IncludeExtendedInfoForAces { get; protected internal set; }
    public AccessControlList(string token, bool inherit);
    public AccessControlList(string token, bool inherit, IEnumerable`1<AccessControlEntry> accessControlEntries);
    internal AccessControlList(AccessControlList existingList);
    [CompilerGeneratedAttribute]
public bool get_InheritPermissions();
    [CompilerGeneratedAttribute]
public void set_InheritPermissions(bool value);
    [CompilerGeneratedAttribute]
public string get_Token();
    [CompilerGeneratedAttribute]
public void set_Token(string value);
    public IEnumerable`1<AccessControlEntry> get_AccessControlEntries();
    public AccessControlEntry RemovePermissions(IdentityDescriptor descriptor, int permissionsToRemove);
    public bool RemoveAccessControlEntry(IdentityDescriptor descriptor);
    public AccessControlEntry SetPermissions(IdentityDescriptor descriptor, int allow, int deny, bool merge);
    public AccessControlEntry SetAccessControlEntry(AccessControlEntry accessControlEntry, bool merge);
    public IEnumerable`1<AccessControlEntry> SetAccessControlEntries(IEnumerable`1<AccessControlEntry> accessControlEntries, bool merge);
    public AccessControlEntry QueryAccessControlEntry(IdentityDescriptor descriptor);
    public IEnumerable`1<AccessControlEntry> QueryAccessControlEntries(IEnumerable`1<IdentityDescriptor> descriptors);
    internal void LoadAce(AccessControlEntry ace);
    protected internal bool get_IncludeExtendedInfoForAces();
    protected internal void set_IncludeExtendedInfoForAces(bool value);
}
internal class Microsoft.TeamFoundation.Framework.Client.AccessControlListDetails : AccessControlList {
    internal AccessControlEntryDetails[] m_entries;
    private bool m_includeExtendedInfo;
    private bool m_inheritPermissions;
    private string m_token;
    internal AccessControlEntryDetails[] Entries { get; internal set; }
    internal bool IncludeExtendedInfo { get; internal set; }
    internal AccessControlEntryDetails[] get_Entries();
    internal void set_Entries(AccessControlEntryDetails[] value);
    internal bool get_IncludeExtendedInfo();
    internal void set_IncludeExtendedInfo(bool value);
    internal static AccessControlListDetails FromXml(IServiceProvider serviceProvider, XmlReader reader);
    public virtual string ToString();
    internal void ToXml(XmlWriter writer, string element);
    internal static void ToXml(XmlWriter writer, string element, AccessControlListDetails obj);
    internal void InitializeFromWebService();
    internal static AccessControlListDetails PrepareForWebServiceSerialization(AccessControlList accessControlList);
}
internal class Microsoft.TeamFoundation.Framework.Client.AccessControlService : object {
    private TfsConnection m_tfs;
    private AccessControlWebService m_accessControlWebService;
    internal AccessControlService(TfsConnection tfs);
    public sealed virtual ServiceIdentity ProvisionServiceIdentity();
    public sealed virtual ServiceIdentity ProvisionServiceIdentity(string serviceIdentityName);
    public sealed virtual ServiceIdentity ProvisionServiceIdentity(string serviceIdentityName, string password);
    public sealed virtual ServiceIdentity ProvisionServiceIdentity(string serviceIdentityName, string password, IdentityDescriptor[] addToGroups);
    public sealed virtual ServiceIdentity ProvisionServiceIdentity(ServiceIdentityInfo identityInfo);
    public sealed virtual ServiceIdentity ProvisionServiceIdentity(ServiceIdentityInfo identityInfo, IdentityDescriptor[] addToGroups);
    public sealed virtual ServiceIdentity QueryServiceIdentity(Guid serviceIdentityId);
    public sealed virtual ServiceIdentity QueryServiceIdentity(Guid serviceIdentityId, bool includeMemberships);
    public sealed virtual ServiceIdentity[] QueryServiceIdentities(Guid[] serviceIdentityIds, bool includeMemberships);
    public sealed virtual ServiceIdentity QueryServiceIdentity(string serviceIdentityName);
    public sealed virtual ServiceIdentity QueryServiceIdentity(string serviceIdentityName, bool includeMemberships);
    public sealed virtual ServiceIdentity[] QueryServiceIdentities(String[] serviceIdentityNames, bool includeMemberships);
    public sealed virtual void DeleteServiceIdentity(ServiceIdentity serviceIdentity);
    public sealed virtual void DeleteServiceIdentity(Guid serviceIdentityId);
}
internal class Microsoft.TeamFoundation.Framework.Client.AccessControlWebService : TfsHttpClient {
    protected Guid CollectionServiceIdentifier { get; }
    protected string ComponentName { get; }
    protected Guid ConfigurationServiceIdentifier { get; }
    protected string ServiceType { get; }
    public AccessControlWebService(TfsConnection connection);
    protected virtual Guid get_CollectionServiceIdentifier();
    protected virtual string get_ComponentName();
    protected virtual Guid get_ConfigurationServiceIdentifier();
    protected virtual string get_ServiceType();
    protected virtual Exception ConvertException(SoapException exception);
    public void DeleteServiceIdentity(Guid serviceIdentityId);
    public ServiceIdentity ProvisionServiceIdentity(ServiceIdentityInfo identityInfo, IdentityDescriptor[] addToGroups);
    public ServiceIdentity[] QueryServiceIdentities(String[] serviceIdentityNames, bool includeMemberships);
    public ServiceIdentity[] QueryServiceIdentitiesById(Guid[] serviceIdentityIds, bool includeMemberships);
}
public class Microsoft.TeamFoundation.Framework.Client.AccessMapping : object {
    private string m_accessPoint;
    private string m_displayName;
    private string m_moniker;
    private string m_virtualDirectory;
    public string DisplayName { get; internal set; }
    public string Moniker { get; internal set; }
    public string AccessPoint { get; internal set; }
    public string VirtualDirectory { get; internal set; }
    internal AccessMapping(string moniker, string displayName, string accessPoint);
    internal AccessMapping(string moniker, string displayName, string accessPoint, string virtualDirectory);
    public string get_DisplayName();
    internal void set_DisplayName(string value);
    public string get_Moniker();
    internal void set_Moniker(string value);
    public string get_AccessPoint();
    internal void set_AccessPoint(string value);
    public string get_VirtualDirectory();
    internal void set_VirtualDirectory(string value);
    [EditorBrowsableAttribute("1")]
public static AccessMapping FromXml(IServiceProvider serviceProvider, XmlReader reader);
    public virtual string ToString();
    [EditorBrowsableAttribute("1")]
public void ToXml(XmlWriter writer, string element);
    [EditorBrowsableAttribute("1")]
public static void ToXml(XmlWriter writer, string element, AccessMapping obj);
}
public class Microsoft.TeamFoundation.Framework.Client.AccessMappingNotRegisteredException : TeamFoundationLocationServiceException {
    public AccessMappingNotRegisteredException(string message);
    public AccessMappingNotRegisteredException(string message, Exception ex);
    protected AccessMappingNotRegisteredException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.TeamFoundation.Framework.Client.AccountPreferencesAlreadyExistException : TeamFoundationProfileServiceException {
    public AccountPreferencesAlreadyExistException(string message);
    public AccountPreferencesAlreadyExistException(string message, Exception ex);
    protected AccountPreferencesAlreadyExistException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.TeamFoundation.Framework.Client.AceExtendedInformation : object {
    private int m_effectiveAllow;
    private int m_effectiveDeny;
    private int m_inheritedAllow;
    private int m_inheritedDeny;
    public int InheritedAllow { get; }
    public int InheritedDeny { get; }
    public int EffectiveAllow { get; }
    public int EffectiveDeny { get; }
    [EditorBrowsableAttribute("1")]
public AceExtendedInformation(int inheritedAllow, int inheritedDeny, int effectiveAllow, int effectiveDeny);
    [EditorBrowsableAttribute("1")]
public static AceExtendedInformation FromXml(IServiceProvider serviceProvider, XmlReader reader);
    public virtual string ToString();
    [EditorBrowsableAttribute("1")]
public void ToXml(XmlWriter writer, string element);
    [EditorBrowsableAttribute("1")]
public static void ToXml(XmlWriter writer, string element, AceExtendedInformation obj);
    public int get_InheritedAllow();
    public int get_InheritedDeny();
    public int get_EffectiveAllow();
    public int get_EffectiveDeny();
}
internal class Microsoft.TeamFoundation.Framework.Client.AcknowledgementHeaderV1 : TfsMessageHeader {
    private long m_messageId;
    public string Name { get; }
    public string Namespace { get; }
    public AcknowledgementHeaderV1(long messageId);
    public virtual string get_Name();
    public virtual string get_Namespace();
    protected virtual void OnWriteHeaderContents(XmlDictionaryWriter writer);
}
internal class Microsoft.TeamFoundation.Framework.Client.AcknowledgementHeaderV2 : TfsMessageHeader {
    [CompilerGeneratedAttribute]
private IList`1<AcknowledgementRange> <Ranges>k__BackingField;
    public string Name { get; }
    public string Namespace { get; }
    public IList`1<AcknowledgementRange> Ranges { get; private set; }
    public AcknowledgementHeaderV2(IList`1<AcknowledgementRange> ranges);
    public virtual string get_Name();
    public virtual string get_Namespace();
    [CompilerGeneratedAttribute]
public IList`1<AcknowledgementRange> get_Ranges();
    [CompilerGeneratedAttribute]
private void set_Ranges(IList`1<AcknowledgementRange> value);
    protected virtual void OnWriteHeaderContents(XmlDictionaryWriter writer);
}
[DataContractAttribute]
internal class Microsoft.TeamFoundation.Framework.Client.AcknowledgementRange : object {
    [CompilerGeneratedAttribute]
private long <Lower>k__BackingField;
    [CompilerGeneratedAttribute]
private long <Upper>k__BackingField;
    [DataMemberAttribute]
public long Lower { get; private set; }
    [DataMemberAttribute]
public long Upper { get; private set; }
    public AcknowledgementRange(long messageId);
    public AcknowledgementRange(long lower, long upper);
    [CompilerGeneratedAttribute]
public long get_Lower();
    [CompilerGeneratedAttribute]
private void set_Lower(long value);
    [CompilerGeneratedAttribute]
public long get_Upper();
    [CompilerGeneratedAttribute]
private void set_Upper(long value);
    public virtual string ToString();
}
public class Microsoft.TeamFoundation.Framework.Client.AcquireDatabasePartitionException : TeamFoundationServiceException {
    public AcquireDatabasePartitionException(string message);
    public AcquireDatabasePartitionException(string message, Exception ex);
    protected AcquireDatabasePartitionException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.TeamFoundation.Framework.Client.ActionDefinition : object {
    private int m_bit;
    private string m_displayName;
    private string m_name;
    public int Bit { get; }
    public string Name { get; }
    public string DisplayName { get; }
    public ActionDefinition(int bit, string name, string displayName);
    [EditorBrowsableAttribute("1")]
public static ActionDefinition FromXml(IServiceProvider serviceProvider, XmlReader reader);
    public virtual string ToString();
    [EditorBrowsableAttribute("1")]
public void ToXml(XmlWriter writer, string element);
    [EditorBrowsableAttribute("1")]
public static void ToXml(XmlWriter writer, string element, ActionDefinition obj);
    public int get_Bit();
    public string get_Name();
    public string get_DisplayName();
}
public class Microsoft.TeamFoundation.Framework.Client.ActionDeniedBySubscriberException : EventException {
    public int StatusCode { get; }
    public string SubscriberName { get; }
    public string SubscriberType { get; }
    public ActionDeniedBySubscriberException(string message);
    public ActionDeniedBySubscriberException(string message, Exception ex);
    protected ActionDeniedBySubscriberException(SerializationInfo info, StreamingContext context);
    public int get_StatusCode();
    public string get_SubscriberName();
    public string get_SubscriberType();
}
public class Microsoft.TeamFoundation.Framework.Client.ActiveDirectoryAccessException : GroupSecuritySubsystemServiceException {
    public ActiveDirectoryAccessException(string message);
    public ActiveDirectoryAccessException(string message, Exception ex);
    protected ActiveDirectoryAccessException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.TeamFoundation.Framework.Client.AddGroupMemberIllegalInternetIdentityException : TeamFoundationIdentityServiceException {
    public AddGroupMemberIllegalInternetIdentityException(string message);
    public AddGroupMemberIllegalInternetIdentityException(string message, Exception ex);
    protected AddGroupMemberIllegalInternetIdentityException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.TeamFoundation.Framework.Client.AddGroupMemberIllegalMemberException : TeamFoundationIdentityServiceException {
    public AddGroupMemberIllegalMemberException(string message);
    public AddGroupMemberIllegalMemberException(string message, Exception ex);
    protected AddGroupMemberIllegalMemberException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.TeamFoundation.Framework.Client.AddGroupMemberIllegalWindowsIdentityException : TeamFoundationIdentityServiceException {
    public AddGroupMemberIllegalWindowsIdentityException(string message);
    public AddGroupMemberIllegalWindowsIdentityException(string message, Exception ex);
    protected AddGroupMemberIllegalWindowsIdentityException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.TeamFoundation.Framework.Client.AddGroupMemberOverLicenseLimitException : TeamFoundationIdentityServiceException {
    public AddGroupMemberOverLicenseLimitException(string message);
    public AddGroupMemberOverLicenseLimitException(string message, Exception ex);
    protected AddGroupMemberOverLicenseLimitException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.TeamFoundation.Framework.Client.AddMemberCyclicMembershipException : TeamFoundationIdentityServiceException {
    public AddMemberCyclicMembershipException(string message);
    public AddMemberCyclicMembershipException(string message, Exception ex);
    protected AddMemberCyclicMembershipException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.TeamFoundation.Framework.Client.AddMemberEveryoneException : TeamFoundationIdentityServiceException {
    public AddMemberEveryoneException(string message);
    public AddMemberEveryoneException(string message, Exception ex);
    protected AddMemberEveryoneException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.TeamFoundation.Framework.Client.AddMemberGroupMissingException : TeamFoundationIdentityServiceException {
    public AddMemberGroupMissingException(string message);
    public AddMemberGroupMissingException(string message, Exception ex);
    protected AddMemberGroupMissingException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.TeamFoundation.Framework.Client.AddMemberIdentityAlreadyMemberException : TeamFoundationIdentityServiceException {
    public AddMemberIdentityAlreadyMemberException(string message);
    public AddMemberIdentityAlreadyMemberException(string message, Exception ex);
    protected AddMemberIdentityAlreadyMemberException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.TeamFoundation.Framework.Client.AddMemberIdentityMissingException : TeamFoundationIdentityServiceException {
    public AddMemberIdentityMissingException(string message);
    public AddMemberIdentityMissingException(string message, Exception ex);
    protected AddMemberIdentityMissingException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.TeamFoundation.Framework.Client.AddMemberNoGroupException : TeamFoundationIdentityServiceException {
    public AddMemberNoGroupException(string message);
    public AddMemberNoGroupException(string message, Exception ex);
    protected AddMemberNoGroupException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.TeamFoundation.Framework.Client.AddProjectGroupProjectMismatchException : TeamFoundationIdentityServiceException {
    public AddProjectGroupProjectMismatchException(string message);
    public AddProjectGroupProjectMismatchException(string message, Exception ex);
    protected AddProjectGroupProjectMismatchException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.TeamFoundation.Framework.Client.AddProjectGroupToGlobalGroupException : TeamFoundationIdentityServiceException {
    public AddProjectGroupToGlobalGroupException(string message);
    public AddProjectGroupToGlobalGroupException(string message, Exception ex);
    protected AddProjectGroupToGlobalGroupException(SerializationInfo info, StreamingContext context);
}
internal class Microsoft.TeamFoundation.Framework.Client.AdministrationWebService : TfsHttpClient {
    protected string ComponentName { get; }
    protected Guid ConfigurationServiceIdentifier { get; }
    protected string ServiceType { get; }
    public AdministrationWebService(TfsConfigurationServer connection);
    protected virtual string get_ComponentName();
    protected virtual Guid get_ConfigurationServiceIdentifier();
    protected virtual string get_ServiceType();
    public void CancelRequest(Guid hostId, long requestId, string reason);
    protected virtual Exception ConvertException(SoapException exception);
    public TeamFoundationServiceHostActivity[] QueryActiveRequests(IEnumerable`1<Guid> hostIds, bool includeDetails);
}
public class Microsoft.TeamFoundation.Framework.Client.AnalysisServiceConnectionException : TeamFoundationServiceException {
    public AnalysisServiceConnectionException(string message);
    public AnalysisServiceConnectionException(string message, Exception ex);
    protected AnalysisServiceConnectionException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.TeamFoundation.Framework.Client.ApplicationTierTimeoutException : ProxyException {
    public ApplicationTierTimeoutException(string message);
    public ApplicationTierTimeoutException(string message, Exception ex);
    protected ApplicationTierTimeoutException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.TeamFoundation.Framework.Client.ArtifactKindAlreadyExistsException : PropertyServiceException {
    public ArtifactKindAlreadyExistsException(string message);
    public ArtifactKindAlreadyExistsException(string message, Exception ex);
    protected ArtifactKindAlreadyExistsException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.TeamFoundation.Framework.Client.ArtifactKindRestrictedException : PropertyServiceException {
    public ArtifactKindRestrictedException(string message);
    public ArtifactKindRestrictedException(string message, Exception ex);
    protected ArtifactKindRestrictedException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.TeamFoundation.Framework.Client.ArtifactKindsMustBeUniformException : PropertyServiceException {
    public ArtifactKindsMustBeUniformException(string message);
    public ArtifactKindsMustBeUniformException(string message, Exception ex);
    protected ArtifactKindsMustBeUniformException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.TeamFoundation.Framework.Client.ArtifactPropertyValue : object {
    private List`1<PropertyValue> m_values;
    internal PropertyValue[] m_internalPropertyValues;
    private ArtifactSpec m_spec;
    public List`1<PropertyValue> PropertyValues { get; }
    internal PropertyValue[] InternalPropertyValues { get; internal set; }
    public ArtifactSpec Spec { get; internal set; }
    public ArtifactPropertyValue(ArtifactSpec artifactSpec);
    public ArtifactPropertyValue(ArtifactSpec artifactSpec, List`1<PropertyValue> values);
    public ArtifactPropertyValue(ArtifactSpec artifactSpec, string propertyName, Nullable`1<int> value);
    public ArtifactPropertyValue(ArtifactSpec artifactSpec, string propertyName, Nullable`1<double> value);
    public ArtifactPropertyValue(ArtifactSpec artifactSpec, string propertyName, string value);
    public ArtifactPropertyValue(ArtifactSpec artifactSpec, string propertyName, Nullable`1<DateTime> value);
    public ArtifactPropertyValue(ArtifactSpec artifactSpec, string propertyName, Byte[] value);
    internal ArtifactPropertyValue(ArtifactSpec artifactSpec, PropertyValue propertyValue);
    public List`1<PropertyValue> get_PropertyValues();
    internal void PrepareInternalValues();
    internal PropertyValue[] get_InternalPropertyValues();
    internal void set_InternalPropertyValues(PropertyValue[] value);
    public ArtifactSpec get_Spec();
    internal void set_Spec(ArtifactSpec value);
    [EditorBrowsableAttribute("1")]
public static ArtifactPropertyValue FromXml(IServiceProvider serviceProvider, XmlReader reader);
    public virtual string ToString();
    [EditorBrowsableAttribute("1")]
public void ToXml(XmlWriter writer, string element);
    [EditorBrowsableAttribute("1")]
public static void ToXml(XmlWriter writer, string element, ArtifactPropertyValue obj);
}
public class Microsoft.TeamFoundation.Framework.Client.ArtifactSpec : object {
    internal Byte[] m_id;
    private Guid m_kind;
    private string m_moniker;
    private int m_version;
    public Byte[] Id { get; internal set; }
    public Guid Kind { get; internal set; }
    public string Moniker { get; internal set; }
    public int Version { get; internal set; }
    public ArtifactSpec(Guid kind, string moniker, int version);
    public ArtifactSpec(Guid kind, int artifactId, int version);
    public ArtifactSpec(Guid kind, Byte[] artifactId, int version);
    public Byte[] get_Id();
    internal void set_Id(Byte[] value);
    public Guid get_Kind();
    internal void set_Kind(Guid value);
    public string get_Moniker();
    internal void set_Moniker(string value);
    public int get_Version();
    internal void set_Version(int value);
    [EditorBrowsableAttribute("1")]
public static ArtifactSpec FromXml(IServiceProvider serviceProvider, XmlReader reader);
    public virtual string ToString();
    [EditorBrowsableAttribute("1")]
public void ToXml(XmlWriter writer, string element);
    [EditorBrowsableAttribute("1")]
public static void ToXml(XmlWriter writer, string element, ArtifactSpec obj);
}
public class Microsoft.TeamFoundation.Framework.Client.AttachCollectionException : TeamFoundationServiceException {
    public AttachCollectionException(string message);
    public AttachCollectionException(string message, Exception ex);
    protected AttachCollectionException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.TeamFoundation.Framework.Client.AuthorizationSubsystemServiceException : TeamFoundationServiceException {
    public AuthorizationSubsystemServiceException(string message);
    public AuthorizationSubsystemServiceException(string message, Exception ex);
    protected AuthorizationSubsystemServiceException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.TeamFoundation.Framework.Client.AzureClientIPRestrictedException : SqlAzureException {
    public AzureClientIPRestrictedException(string message);
    public AzureClientIPRestrictedException(string message, Exception ex);
    protected AzureClientIPRestrictedException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.TeamFoundation.Framework.Client.AzureDatabaseQuotaReachedException : SqlAzureException {
    public AzureDatabaseQuotaReachedException(string message);
    public AzureDatabaseQuotaReachedException(string message, Exception ex);
    protected AzureDatabaseQuotaReachedException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.TeamFoundation.Framework.Client.AzureDeprecatedFeatureException : SqlAzureException {
    public AzureDeprecatedFeatureException(string message);
    public AzureDeprecatedFeatureException(string message, Exception ex);
    protected AzureDeprecatedFeatureException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.TeamFoundation.Framework.Client.AzureLoginBadUserException : SqlAzureException {
    public AzureLoginBadUserException(string message);
    public AzureLoginBadUserException(string message, Exception ex);
    protected AzureLoginBadUserException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.TeamFoundation.Framework.Client.AzureOperationNotSupportedException : SqlAzureException {
    public AzureOperationNotSupportedException(string message);
    public AzureOperationNotSupportedException(string message, Exception ex);
    protected AzureOperationNotSupportedException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.TeamFoundation.Framework.Client.AzureProcessingException : SqlAzureException {
    public AzureProcessingException(string message);
    public AzureProcessingException(string message, Exception ex);
    protected AzureProcessingException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.TeamFoundation.Framework.Client.AzureQuotaReachedException : SqlAzureException {
    public AzureQuotaReachedException(string message);
    public AzureQuotaReachedException(string message, Exception ex);
    protected AzureQuotaReachedException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.TeamFoundation.Framework.Client.AzureServerUnavailableException : SqlAzureException {
    public AzureServerUnavailableException(string message);
    public AzureServerUnavailableException(string message, Exception ex);
    protected AzureServerUnavailableException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.TeamFoundation.Framework.Client.AzureServiceBusyException : SqlAzureException {
    public AzureServiceBusyException(string message);
    public AzureServiceBusyException(string message, Exception ex);
    protected AzureServiceBusyException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.TeamFoundation.Framework.Client.AzureSessionTerminatedException : SqlAzureException {
    public AzureSessionTerminatedException(string message);
    public AzureSessionTerminatedException(string message, Exception ex);
    protected AzureSessionTerminatedException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.TeamFoundation.Framework.Client.BadChecksumException : TeamFoundationServiceException {
    public BadChecksumException(string message);
    public BadChecksumException(string message, Exception ex);
    protected BadChecksumException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.TeamFoundation.Framework.Client.BadClassIdActionIdPairException : AuthorizationSubsystemServiceException {
    public BadClassIdActionIdPairException(string message);
    public BadClassIdActionIdPairException(string message, Exception ex);
    protected BadClassIdActionIdPairException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.TeamFoundation.Framework.Client.BadParentObjectClassIdException : AuthorizationSubsystemServiceException {
    public BadParentObjectClassIdException(string message);
    public BadParentObjectClassIdException(string message, Exception ex);
    protected BadParentObjectClassIdException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.TeamFoundation.Framework.Client.CannotAccessIdentitiesAfterDetachException : TeamFoundationIdentityServiceException {
    public CannotAccessIdentitiesAfterDetachException(string message);
    public CannotAccessIdentitiesAfterDetachException(string message, Exception ex);
    protected CannotAccessIdentitiesAfterDetachException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.TeamFoundation.Framework.Client.CannotAddDateToNonIterationException : CommonStructureSubsystemServiceException {
    public CannotAddDateToNonIterationException(string message);
    public CannotAddDateToNonIterationException(string message, Exception ex);
    protected CannotAddDateToNonIterationException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.TeamFoundation.Framework.Client.CannotChangeTreesException : CommonStructureSubsystemServiceException {
    public CannotChangeTreesException(string message);
    public CannotChangeTreesException(string message, Exception ex);
    protected CannotChangeTreesException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.TeamFoundation.Framework.Client.CannotModifyRootNodeException : CommonStructureSubsystemServiceException {
    public CannotModifyRootNodeException(string message);
    public CannotModifyRootNodeException(string message, Exception ex);
    protected CannotModifyRootNodeException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.TeamFoundation.Framework.Client.CannotUpdateDefaultCollectionException : TeamFoundationServiceException {
    public CannotUpdateDefaultCollectionException(string message);
    public CannotUpdateDefaultCollectionException(string message, Exception ex);
    protected CannotUpdateDefaultCollectionException(SerializationInfo info, StreamingContext context);
}
[EditorBrowsableAttribute("1")]
public class Microsoft.TeamFoundation.Framework.Client.Catalog.Objects.ApplicationInstance : CatalogObject {
    public static Guid ResourceTypeIdentifier;
    private static Type[] KnownChildTypes;
    private ICollection`1<ProjectCollection> m_ProjectCollections;
    private object m_WebAccessInstance;
    public TeamSystemWebAccess WebAccessInstance { get; }
    public ServiceDefinition LocationService { get; public set; }
    public Uri LocationServiceLocation { get; }
    [DebuggerBrowsableAttribute("0")]
public ICollection`1<ProjectCollection> ProjectCollections { get; }
    public ICollection`1<TeamWebApplication> WebApplications { get; }
    private static ApplicationInstance();
    protected virtual void Reset();
    public virtual void Preload(CatalogBulkData bulkData);
    public TeamSystemWebAccess get_WebAccessInstance();
    public ServiceDefinition get_LocationService();
    public void set_LocationService(ServiceDefinition value);
    public Uri get_LocationServiceLocation();
    public ICollection`1<ProjectCollection> get_ProjectCollections();
    public ICollection`1<TeamWebApplication> get_WebApplications();
}
[EditorBrowsableAttribute("1")]
public class Microsoft.TeamFoundation.Framework.Client.Catalog.Objects.CatalogBulkData : object {
    private ICollection`1<CatalogNode> m_nodes;
    private ICollection`1<Guid> m_queriedResourceTypes;
    private IDictionary`2<string, List`1<CatalogNode>> m_nodeTree;
    public bool QueriedAllResourceTypes { get; }
    public ICollection`1<Guid> QueriedResourceTypes { get; }
    public ICollection`1<CatalogNode> Nodes { get; }
    public CatalogBulkData(ICollection`1<CatalogNode> nodes);
    public CatalogBulkData(ICollection`1<CatalogNode> nodes, ICollection`1<Guid> queriedResourceTypes);
    public bool QueriedForResourceType(Guid guid);
    public bool get_QueriedAllResourceTypes();
    public ICollection`1<Guid> get_QueriedResourceTypes();
    public ICollection`1<CatalogNode> get_Nodes();
    public IEnumerable`1<CatalogNode> FindChildren(string path);
    private void ExpandRelationships(ICollection`1<CatalogNode> nodes);
}
[EditorBrowsableAttribute("1")]
public class Microsoft.TeamFoundation.Framework.Client.Catalog.Objects.CatalogObject : object {
    protected static object NullObject;
    private bool m_preloaded;
    private CatalogObject m_parent;
    [CompilerGeneratedAttribute]
private CatalogNode <CatalogNode>k__BackingField;
    [CompilerGeneratedAttribute]
private CatalogObjectContext <Context>k__BackingField;
    internal ICollection`1<CatalogObject> Children;
    internal IDictionary`2<string, object> SingletonDependencies;
    internal IDictionary`2<string, object> SetDependencies;
    internal ICollection`1<CatalogObject> Dependents;
    [CompilerGeneratedAttribute]
private PropertyChangedEventHandler PropertyChanged;
    public CatalogNode CatalogNode { get; internal set; }
    public CatalogObjectContext Context { get; internal set; }
    public string DisplayName { get; public set; }
    public string DisplayPath { get; }
    public string Description { get; public set; }
    public string CatalogNodeFullPath { get; }
    public Guid CatalogResourceIdentifier { get; }
    public bool IsDefault { get; }
    public CatalogObject Parent { get; }
    private static CatalogObject();
    [CompilerGeneratedAttribute]
public CatalogNode get_CatalogNode();
    [CompilerGeneratedAttribute]
internal void set_CatalogNode(CatalogNode value);
    [CompilerGeneratedAttribute]
public CatalogObjectContext get_Context();
    [CompilerGeneratedAttribute]
internal void set_Context(CatalogObjectContext value);
    public string get_DisplayName();
    public void set_DisplayName(string value);
    public string get_DisplayPath();
    public string get_Description();
    public void set_Description(string value);
    public string get_CatalogNodeFullPath();
    public Guid get_CatalogResourceIdentifier();
    public bool get_IsDefault();
    public CatalogObject get_Parent();
    public void Delete();
    private void MarkAsDirty();
    public void Preload();
    public void Refresh();
    public void Refresh(bool preload);
    protected virtual void OnRefresh();
    protected virtual void Reset();
    public virtual void Preload(CatalogBulkData bulkData);
    protected internal virtual void Initialize();
    public bool Is();
    public T As();
    public T CreateChild(string displayName);
    public T CreateChild();
    public void DeleteChild(CatalogObject child);
    public void DeleteChildren();
    [CompilerGeneratedAttribute]
public sealed virtual void add_PropertyChanged(PropertyChangedEventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_PropertyChanged(PropertyChangedEventHandler value);
    protected void NotifyPropertyChanged(string propertyName);
    protected virtual void BuildDisplayPath(StringBuilder sb);
    protected void SetProperty(string propertyName, T value);
    protected T GetProperty(string propertyName);
    protected void SetServiceRefence(string key, ServiceDefinition service);
    protected ServiceDefinition GetServiceReference(string key);
    protected Uri LocationAsUrl(ServiceDefinition service);
    protected ICollection`1<T> GetChildCollection(ICollection`1& result);
    protected T GetChild(Object& result);
    protected ICollection`1<T> PreloadChildren(CatalogBulkData bulkData);
    protected void PreloadChild(CatalogBulkData bulkData, Object& result);
    protected T GetParent();
    protected ICollection`1<T> GetDependencyCollection(string dependencyName);
    protected T GetDependency(string dependencyName);
    protected void SetDependency(string dependencyName, T value);
    private void EnsureDependenciesExpanded();
    public virtual string ToString();
    protected T CreateCatalogObject(CatalogNode catalogNode);
    protected ICollection`1<T> QueryChildren(bool recurse);
    protected ICollection`1<T> QueryChildren(string propertyName, object propertyValue, bool recurse);
    protected ICollection`1<T> QueryChildren(Dictionary`2<string, string> filters, bool recurse);
    protected ICollection`1<T> QueryDependents(bool includeParents, bool expandDependencies);
    protected T QueryParent(bool recurse);
    protected T QueryChild(bool recurse);
    protected T QueryChild(string propertyName, object propertyValue, bool recurse);
    protected T QueryChild(Dictionary`2<string, string> filters, bool recurse);
    protected ICollection`1<T> GetDependentsCollection(ICollection`1& result);
    protected ICollection`1<T> QueryDependents();
    private static bool IsNodeOfType(CatalogNode node);
    [CompilerGeneratedAttribute]
private T <GetDependencyCollection>b__61_0(CatalogNode node);
    [CompilerGeneratedAttribute]
private T <QueryChildren>b__69_0(CatalogNode c);
}
[EditorBrowsableAttribute("1")]
public class Microsoft.TeamFoundation.Framework.Client.Catalog.Objects.CatalogObjectCollection`1 : object {
    [CompilerGeneratedAttribute]
private ICollection`1<CatalogObject> <Items>k__BackingField;
    public int Count { get; }
    public bool IsReadOnly { get; }
    protected ICollection`1<CatalogObject> Items { get; protected set; }
    public CatalogObjectCollection`1(ICollection`1<CatalogObject> items);
    public sealed virtual void Add(T item);
    public sealed virtual void Clear();
    public sealed virtual bool Contains(T item);
    public sealed virtual void CopyTo(T[] array, int arrayIndex);
    public sealed virtual int get_Count();
    public sealed virtual bool Remove(T item);
    public sealed virtual IEnumerator`1<T> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    public sealed virtual bool get_IsReadOnly();
    [CompilerGeneratedAttribute]
protected ICollection`1<CatalogObject> get_Items();
    [CompilerGeneratedAttribute]
protected void set_Items(ICollection`1<CatalogObject> value);
}
[EditorBrowsableAttribute("1")]
public class Microsoft.TeamFoundation.Framework.Client.Catalog.Objects.CatalogObjectContext : object {
    private ICatalogService m_catalogService;
    private CatalogChangeContext m_transactionContext;
    private OrganizationalRoot m_OrganizationalRoot;
    private InfrastructureRoot m_InfrastructureRoot;
    private List`1<CatalogObject> m_objectsAffectedByTransactionContext;
    [CompilerGeneratedAttribute]
private CatalogQueryOptions <QueryOptions>k__BackingField;
    public CatalogQueryOptions QueryOptions { get; public set; }
    public ICatalogService CatalogService { get; }
    public ILocationService LocationService { get; }
    public CatalogChangeContext TransactionContext { get; }
    public OrganizationalRoot OrganizationalRoot { get; }
    public InfrastructureRoot InfrastructureRoot { get; }
    public CatalogObjectContext(ICatalogService catalogService);
    [CompilerGeneratedAttribute]
public CatalogQueryOptions get_QueryOptions();
    [CompilerGeneratedAttribute]
public void set_QueryOptions(CatalogQueryOptions value);
    public ICatalogService get_CatalogService();
    public ILocationService get_LocationService();
    public CatalogChangeContext get_TransactionContext();
    public OrganizationalRoot get_OrganizationalRoot();
    public InfrastructureRoot get_InfrastructureRoot();
    public string GetDisplayName(Type catalogObjectType);
    public string GetDescription(Type catalogObjectType);
    public void AddObject(CatalogObject entity);
    public void ModifyObject(CatalogObject entity);
    public void DeleteObject(CatalogObject entity);
    public void RefreshOnTransactionContextFailureOrReset(CatalogObject entity);
    public void SaveChanges();
    public void ResetTransactionContext();
    public T CreateCatalogObject(CatalogNode catalogNode);
    private T GetRootNode(CatalogTree tree, T& result);
    private bool TryGetCatalogResourceType(Type catalogObjectType, CatalogResourceType& catalogResourceType);
    public T CreateCatalogObject(CatalogBulkData bulkData, string nodePath);
    private void RefreshAffectedObjects();
    public static T CreateCatalogObject(TfsConfigurationServer tfsServer, CatalogNode catalogNode);
}
[EditorBrowsableAttribute("1")]
public class Microsoft.TeamFoundation.Framework.Client.Catalog.Objects.DataCollector : CatalogObject {
    public static Guid ResourceTypeIdentifier;
    private static DataCollector();
}
internal class Microsoft.TeamFoundation.Framework.Client.Catalog.Objects.DependencyCollection`1 : object {
    private ICollection`1<T> m_items;
    private CatalogObject m_parent;
    private string m_dependencyName;
    public int Count { get; }
    public bool IsReadOnly { get; }
    public DependencyCollection`1(CatalogObject parent, string dependencyName, ICollection`1<T> collection);
    public sealed virtual void Add(T item);
    public sealed virtual void Clear();
    public sealed virtual bool Contains(T item);
    public sealed virtual void CopyTo(T[] array, int arrayIndex);
    public sealed virtual int get_Count();
    public sealed virtual bool get_IsReadOnly();
    public sealed virtual bool Remove(T item);
    public sealed virtual IEnumerator`1<T> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
}
[EditorBrowsableAttribute("1")]
public class Microsoft.TeamFoundation.Framework.Client.Catalog.Objects.GenericLink : CatalogObject {
    public static Guid ResourceTypeIdentifier;
    private static GenericLink();
}
[EditorBrowsableAttribute("1")]
public class Microsoft.TeamFoundation.Framework.Client.Catalog.Objects.InfrastructureRoot : CatalogObject {
    public static Guid ResourceTypeIdentifier;
    private static Type[] KnownChildTypes;
    private ICollection`1<Machine> m_Machines;
    [DebuggerBrowsableAttribute("0")]
public ICollection`1<Machine> Machines { get; }
    private static InfrastructureRoot();
    protected virtual void Reset();
    public virtual void Preload(CatalogBulkData bulkData);
    public ICollection`1<Machine> get_Machines();
}
[EditorBrowsableAttribute("1")]
public class Microsoft.TeamFoundation.Framework.Client.Catalog.Objects.Machine : CatalogObject {
    public static Guid ResourceTypeIdentifier;
    private static Type[] KnownChildTypes;
    private ICollection`1<SqlAnalysisInstance> m_SqlAnalysisInstances;
    private ICollection`1<SqlReportingInstance> m_SqlReportingInstances;
    private ICollection`1<TeamWebApplication> m_WebApplications;
    public string MachineName { get; public set; }
    [DebuggerBrowsableAttribute("0")]
public ICollection`1<SqlAnalysisInstance> SqlAnalysisInstances { get; }
    [DebuggerBrowsableAttribute("0")]
public ICollection`1<SqlReportingInstance> SqlReportingInstances { get; }
    [DebuggerBrowsableAttribute("0")]
public ICollection`1<TeamWebApplication> WebApplications { get; }
    private static Machine();
    protected virtual void Reset();
    public virtual void Preload(CatalogBulkData bulkData);
    public string get_MachineName();
    public void set_MachineName(string value);
    public ICollection`1<SqlAnalysisInstance> get_SqlAnalysisInstances();
    public ICollection`1<SqlReportingInstance> get_SqlReportingInstances();
    public ICollection`1<TeamWebApplication> get_WebApplications();
    public static Machine Register(InfrastructureRoot root, string machineName);
}
[EditorBrowsableAttribute("1")]
public class Microsoft.TeamFoundation.Framework.Client.Catalog.Objects.OrganizationalRoot : CatalogObject {
    public static Guid ResourceTypeIdentifier;
    private static Type[] KnownChildTypes;
    private ICollection`1<ApplicationInstance> m_ApplicationInstances;
    private ICollection`1<SharePointWebApplication> m_SharePointWebApplications;
    private object m_ReportingConfiguration;
    public ReportingConfiguration ReportingConfiguration { get; }
    [DebuggerBrowsableAttribute("0")]
public ICollection`1<ApplicationInstance> ApplicationInstances { get; }
    [DebuggerBrowsableAttribute("0")]
public ICollection`1<SharePointWebApplication> SharePointWebApplications { get; }
    public ApplicationInstance ApplicationInstance { get; }
    private static OrganizationalRoot();
    protected virtual void Reset();
    public virtual void Preload(CatalogBulkData bulkData);
    public ReportingConfiguration get_ReportingConfiguration();
    public ICollection`1<ApplicationInstance> get_ApplicationInstances();
    public ICollection`1<SharePointWebApplication> get_SharePointWebApplications();
    public ApplicationInstance get_ApplicationInstance();
    public ProjectCollection FindProjectCollectionById(Guid instanceId);
    public TeamProject FindProjectById(Guid projectId);
    public TeamProject FindProjectByUri(Uri projectUri);
    public ICollection`1<ProjectPortal> FindProjectPortals(Guid ownedWebIdentifier);
}
[EditorBrowsableAttribute("1")]
public class Microsoft.TeamFoundation.Framework.Client.Catalog.Objects.ProcessGuidanceSite : TfsRelativeWebSite {
    public static Guid ResourceTypeIdentifier;
    public string AsciiName { get; public set; }
    public Uri FullyQualifiedUrl { get; public set; }
    public ProcessGuidanceType ResourceSubType { get; public set; }
    public string GuidanceFileName { get; public set; }
    public Uri FullUrl { get; }
    public Uri WellKnownGuidancePageUrl { get; }
    public bool HasAdminUrl { get; }
    public Uri AdminUrl { get; }
    private static ProcessGuidanceSite();
    public string get_AsciiName();
    public void set_AsciiName(string value);
    public Uri get_FullyQualifiedUrl();
    public void set_FullyQualifiedUrl(Uri value);
    public ProcessGuidanceType get_ResourceSubType();
    public void set_ResourceSubType(ProcessGuidanceType value);
    public string get_GuidanceFileName();
    public void set_GuidanceFileName(string value);
    public Uri get_FullUrl();
    public Uri get_WellKnownGuidancePageUrl();
    public bool get_HasAdminUrl();
    public Uri get_AdminUrl();
    public void ResetValues();
}
[EditorBrowsableAttribute("1")]
public class Microsoft.TeamFoundation.Framework.Client.Catalog.Objects.ProjectCollection : CatalogObject {
    public static Guid ResourceTypeIdentifier;
    private static Type[] KnownChildTypes;
    private ICollection`1<TeamProject> m_Projects;
    private object m_LocationForNewWssSites;
    private object m_ReportFolder;
    public Guid InstanceId { get; public set; }
    public SharePointSiteCreationLocation LocationForNewWssSites { get; }
    public ReportingFolder ReportFolder { get; }
    public ApplicationInstance ApplicationInstance { get; }
    public ServiceDefinition LocationService { get; public set; }
    public Uri LocationServiceLocation { get; }
    [DebuggerBrowsableAttribute("0")]
public ICollection`1<TeamProject> Projects { get; }
    public TfsTeamProjectCollection TfsServer { get; }
    private static ProjectCollection();
    protected virtual void Reset();
    public virtual void Preload(CatalogBulkData bulkData);
    public Guid get_InstanceId();
    public void set_InstanceId(Guid value);
    public SharePointSiteCreationLocation get_LocationForNewWssSites();
    public ReportingFolder get_ReportFolder();
    public ApplicationInstance get_ApplicationInstance();
    public ServiceDefinition get_LocationService();
    public void set_LocationService(ServiceDefinition value);
    public Uri get_LocationServiceLocation();
    public ICollection`1<TeamProject> get_Projects();
    public TeamProject FindProjectById(Guid projectId);
    public TeamProject FindProjectByName(string projectName);
    public TeamProject FindProjectByUri(Uri projectUri);
    public TfsTeamProjectCollection get_TfsServer();
}
[EditorBrowsableAttribute("1")]
public class Microsoft.TeamFoundation.Framework.Client.Catalog.Objects.ProjectPortal : TfsRelativeWebSite {
    public static Guid ResourceTypeIdentifier;
    private TeamProject m_teamProject;
    public Uri FullyQualifiedUrl { get; public set; }
    public Guid OwnedWebIdentifier { get; public set; }
    public ProjectPortalType ResourceSubType { get; public set; }
    public TeamProject TeamProject { get; }
    public Uri AdminUrl { get; }
    public Uri FullUrl { get; }
    public string FullyQualifiedUncPath { get; }
    public bool IsOwnerOfWssSite { get; }
    public bool HasAdminUrl { get; }
    private static ProjectPortal();
    public Uri get_FullyQualifiedUrl();
    public void set_FullyQualifiedUrl(Uri value);
    public Guid get_OwnedWebIdentifier();
    public void set_OwnedWebIdentifier(Guid value);
    public ProjectPortalType get_ResourceSubType();
    public void set_ResourceSubType(ProjectPortalType value);
    protected virtual void OnRefresh();
    protected internal virtual void Initialize();
    public TeamProject get_TeamProject();
    public Uri get_AdminUrl();
    public Uri get_FullUrl();
    public string get_FullyQualifiedUncPath();
    public string ToOwnershipString();
    public static string FormatOwnershipString(ICollection`1<ProjectPortal> list);
    public bool get_IsOwnerOfWssSite();
    public bool get_HasAdminUrl();
    public void ResetValues();
}
[EditorBrowsableAttribute("1")]
public class Microsoft.TeamFoundation.Framework.Client.Catalog.Objects.ReportingConfiguration : CatalogObject {
    public static Guid ResourceTypeIdentifier;
    public WarehouseDatabase ReportingWarehouse { get; public set; }
    public SqlAnalysisDatabase ReportingCube { get; public set; }
    public ReportingServer ReportServer { get; public set; }
    private static ReportingConfiguration();
    public WarehouseDatabase get_ReportingWarehouse();
    public void set_ReportingWarehouse(WarehouseDatabase value);
    public SqlAnalysisDatabase get_ReportingCube();
    public void set_ReportingCube(SqlAnalysisDatabase value);
    public ReportingServer get_ReportServer();
    public void set_ReportServer(ReportingServer value);
}
[EditorBrowsableAttribute("1")]
public class Microsoft.TeamFoundation.Framework.Client.Catalog.Objects.ReportingFolder : CatalogObject {
    public static Guid ResourceTypeIdentifier;
    private string m_fullPath;
    public string ItemPath { get; public set; }
    public CatalogObject ReferencedResource { get; public set; }
    public string FullPath { get; }
    private static ReportingFolder();
    public string get_ItemPath();
    public void set_ItemPath(string value);
    public CatalogObject get_ReferencedResource();
    public void set_ReferencedResource(CatalogObject value);
    protected virtual void OnRefresh();
    public string get_FullPath();
    public ReportingServer GetReportServer();
}
[EditorBrowsableAttribute("1")]
public class Microsoft.TeamFoundation.Framework.Client.Catalog.Objects.ReportingServer : CatalogObject {
    public static Guid ResourceTypeIdentifier;
    public string DefaultItemPath { get; public set; }
    public ServiceDefinition ReportsManagerService { get; public set; }
    public Uri ReportsManagerServiceLocation { get; }
    public ServiceDefinition ReportServerService { get; public set; }
    public Uri ReportServerServiceLocation { get; }
    public Machine Machine { get; public set; }
    private static ReportingServer();
    public string get_DefaultItemPath();
    public void set_DefaultItemPath(string value);
    public ServiceDefinition get_ReportsManagerService();
    public void set_ReportsManagerService(ServiceDefinition value);
    public Uri get_ReportsManagerServiceLocation();
    public ServiceDefinition get_ReportServerService();
    public void set_ReportServerService(ServiceDefinition value);
    public Uri get_ReportServerServiceLocation();
    public Machine get_Machine();
    public void set_Machine(Machine value);
}
[EditorBrowsableAttribute("1")]
public class Microsoft.TeamFoundation.Framework.Client.Catalog.Objects.ResourceFolder : CatalogObject {
    public static Guid ResourceTypeIdentifier;
    private static ResourceFolder();
}
[EditorBrowsableAttribute("1")]
public class Microsoft.TeamFoundation.Framework.Client.Catalog.Objects.ServerDatabase : CatalogObject {
    public string InitialCatalog { get; public set; }
    public bool IsOnline { get; public set; }
    public string get_InitialCatalog();
    public void set_InitialCatalog(string value);
    public bool get_IsOnline();
    public void set_IsOnline(bool value);
}
[EditorBrowsableAttribute("1")]
public class Microsoft.TeamFoundation.Framework.Client.Catalog.Objects.ServerInstance : CatalogObject {
    public string InstanceName { get; public set; }
    public bool IsClustered { get; public set; }
    public Machine Machine { get; }
    public string ServerName { get; }
    protected virtual void Reset();
    public string get_InstanceName();
    public void set_InstanceName(string value);
    public bool get_IsClustered();
    public void set_IsClustered(bool value);
    public Machine get_Machine();
    public string get_ServerName();
    protected static T Register(Machine machine, string displayName, string instanceName, ICollection`1<T> children);
}
[EditorBrowsableAttribute("1")]
public class Microsoft.TeamFoundation.Framework.Client.Catalog.Objects.SharePointSiteCreationLocation : TfsRelativeWebSite {
    public static Guid ResourceTypeIdentifier;
    private Uri m_fullyQualifiedUrl;
    public Uri FullyQualifiedUrl { get; }
    public Uri AdminUrl { get; }
    public string FullyQualifiedUncPath { get; }
    private static SharePointSiteCreationLocation();
    protected virtual void OnRefresh();
    public Uri get_FullyQualifiedUrl();
    public Uri get_AdminUrl();
    public string get_FullyQualifiedUncPath();
}
[EditorBrowsableAttribute("1")]
public class Microsoft.TeamFoundation.Framework.Client.Catalog.Objects.SharePointWebApplication : CatalogObject {
    public static Guid ResourceTypeIdentifier;
    public string DefaultRelativePath { get; public set; }
    public Uri SiteCreationUrl { get; public set; }
    public ServiceDefinition RootUrlService { get; public set; }
    public Uri RootUrlServiceLocation { get; }
    public ServiceDefinition AdminUrlService { get; public set; }
    public Uri AdminUrlServiceLocation { get; }
    public Uri FullyQualifiedUrl { get; }
    public string FullyQualifiedUncPath { get; }
    private static SharePointWebApplication();
    public string get_DefaultRelativePath();
    public void set_DefaultRelativePath(string value);
    public Uri get_SiteCreationUrl();
    public void set_SiteCreationUrl(Uri value);
    public ServiceDefinition get_RootUrlService();
    public void set_RootUrlService(ServiceDefinition value);
    public Uri get_RootUrlServiceLocation();
    public ServiceDefinition get_AdminUrlService();
    public void set_AdminUrlService(ServiceDefinition value);
    public Uri get_AdminUrlServiceLocation();
    public Uri get_FullyQualifiedUrl();
    public string get_FullyQualifiedUncPath();
    public virtual string ToString();
}
[EditorBrowsableAttribute("1")]
public class Microsoft.TeamFoundation.Framework.Client.Catalog.Objects.SqlAnalysisDatabase : ServerDatabase {
    public static Guid ResourceTypeIdentifier;
    public SqlAnalysisInstance DatabaseInstance { get; }
    public WarehouseDatabase ReportingWarehouse { get; public set; }
    private static SqlAnalysisDatabase();
    protected virtual void Reset();
    public SqlAnalysisInstance get_DatabaseInstance();
    public WarehouseDatabase get_ReportingWarehouse();
    public void set_ReportingWarehouse(WarehouseDatabase value);
    public virtual string GetConnectionString();
    public static SqlAnalysisDatabase Register(SqlAnalysisInstance instance, string databaseName);
}
[EditorBrowsableAttribute("1")]
public class Microsoft.TeamFoundation.Framework.Client.Catalog.Objects.SqlAnalysisInstance : ServerInstance {
    public static Guid ResourceTypeIdentifier;
    private static Type[] KnownChildTypes;
    private ICollection`1<SqlAnalysisDatabase> m_SqlAnalysisDatabases;
    [DebuggerBrowsableAttribute("0")]
public ICollection`1<SqlAnalysisDatabase> SqlAnalysisDatabases { get; }
    private static SqlAnalysisInstance();
    protected virtual void Reset();
    public virtual void Preload(CatalogBulkData bulkData);
    public ICollection`1<SqlAnalysisDatabase> get_SqlAnalysisDatabases();
    public static SqlAnalysisInstance Register(Machine machine, string instanceName);
}
[EditorBrowsableAttribute("1")]
public class Microsoft.TeamFoundation.Framework.Client.Catalog.Objects.SqlReportingInstance : ServerInstance {
    public static Guid ResourceTypeIdentifier;
    private static Type[] KnownChildTypes;
    private ICollection`1<WarehouseDatabase> m_WarehouseDatabases;
    [DebuggerBrowsableAttribute("0")]
public ICollection`1<WarehouseDatabase> WarehouseDatabases { get; }
    private static SqlReportingInstance();
    protected virtual void Reset();
    public virtual void Preload(CatalogBulkData bulkData);
    public ICollection`1<WarehouseDatabase> get_WarehouseDatabases();
    public static SqlReportingInstance Register(Machine machine, string instanceName);
}
[EditorBrowsableAttribute("1")]
public class Microsoft.TeamFoundation.Framework.Client.Catalog.Objects.TeamProject : CatalogObject {
    public static Guid ResourceTypeIdentifier;
    private static Type[] KnownChildTypes;
    private object m_Guidance;
    private object m_ReportFolder;
    private object m_Portal;
    private ProjectCollection m_projectCollection;
    public string ProjectName { get; public set; }
    public Uri ProjectUri { get; public set; }
    public Guid ProjectId { get; public set; }
    public ProjectState ProjectState { get; public set; }
    public string SourceControlCapabilityFlags { get; public set; }
    public string SourceControlGitEnabled { get; public set; }
    public string SourceControlTfvcEnabled { get; public set; }
    public ProcessGuidanceSite Guidance { get; }
    public ReportingFolder ReportFolder { get; }
    public ProjectPortal Portal { get; }
    public bool PortalIsSharePoint { get; }
    public bool IsOwnerOfSharePointPortal { get; }
    public ProjectCollection Collection { get; }
    private static TeamProject();
    protected virtual void Reset();
    public virtual void Preload(CatalogBulkData bulkData);
    public string get_ProjectName();
    public void set_ProjectName(string value);
    public Uri get_ProjectUri();
    public void set_ProjectUri(Uri value);
    public Guid get_ProjectId();
    public void set_ProjectId(Guid value);
    public ProjectState get_ProjectState();
    public void set_ProjectState(ProjectState value);
    public string get_SourceControlCapabilityFlags();
    public void set_SourceControlCapabilityFlags(string value);
    public string get_SourceControlGitEnabled();
    public void set_SourceControlGitEnabled(string value);
    public string get_SourceControlTfvcEnabled();
    public void set_SourceControlTfvcEnabled(string value);
    public ProcessGuidanceSite get_Guidance();
    public ReportingFolder get_ReportFolder();
    public ProjectPortal get_Portal();
    protected virtual void OnRefresh();
    public bool get_PortalIsSharePoint();
    public bool get_IsOwnerOfSharePointPortal();
    public ProjectCollection get_Collection();
    public ProjectPortal AddProjectPortal();
    public ProcessGuidanceSite AddProcessGuidanceSite();
    public ReportingFolder AddReportingFolder(ReportingFolder referencedParent, string itemPath);
}
[EditorBrowsableAttribute("1")]
public class Microsoft.TeamFoundation.Framework.Client.Catalog.Objects.TeamSystemWebAccess : CatalogObject {
    public static Guid ResourceTypeIdentifier;
    public ServiceDefinition HomeService { get; public set; }
    public Uri HomeServiceLocation { get; }
    public ServiceDefinition WorkItemEditorService { get; public set; }
    public Uri WorkItemEditorServiceLocation { get; }
    public ServiceDefinition ChangesetDetailService { get; public set; }
    public Uri ChangesetDetailServiceLocation { get; }
    public ServiceDefinition DifferenceService { get; public set; }
    public Uri DifferenceServiceLocation { get; }
    public ServiceDefinition ViewItemService { get; public set; }
    public Uri ViewItemServiceLocation { get; }
    public ServiceDefinition ShelvesetDetailService { get; public set; }
    public Uri ShelvesetDetailServiceLocation { get; }
    public ServiceDefinition QueryResultsService { get; public set; }
    public Uri QueryResultsServiceLocation { get; }
    public ServiceDefinition AnnotateService { get; public set; }
    public Uri AnnotateServiceLocation { get; }
    public ServiceDefinition SourceExplorerService { get; public set; }
    public Uri SourceExplorerServiceLocation { get; }
    public ServiceDefinition OpenWorkItemService { get; public set; }
    public Uri OpenWorkItemServiceLocation { get; }
    public ServiceDefinition CreateWorkItemService { get; public set; }
    public Uri CreateWorkItemServiceLocation { get; }
    public ServiceDefinition ViewServerQueryResultsService { get; public set; }
    public Uri ViewServerQueryResultsServiceLocation { get; }
    public ServiceDefinition ViewWiqlQueryResultsService { get; public set; }
    public Uri ViewWiqlQueryResultsServiceLocation { get; }
    public ServiceDefinition ExploreSourceControlPathService { get; public set; }
    public Uri ExploreSourceControlPathServiceLocation { get; }
    public ServiceDefinition FindShelvesetService { get; public set; }
    public Uri FindShelvesetServiceLocation { get; }
    public ServiceDefinition ViewShelvesetDetailsService { get; public set; }
    public Uri ViewShelvesetDetailsServiceLocation { get; }
    public ServiceDefinition FindChangesetService { get; public set; }
    public Uri FindChangesetServiceLocation { get; }
    public ServiceDefinition ViewChangesetDetailsService { get; public set; }
    public Uri ViewChangesetDetailsServiceLocation { get; }
    public ServiceDefinition ViewSourceControlItemService { get; public set; }
    public Uri ViewSourceControlItemServiceLocation { get; }
    public ServiceDefinition DownloadSourceControlItemService { get; public set; }
    public Uri DownloadSourceControlItemServiceLocation { get; }
    public ServiceDefinition DiffSourceControlItemsService { get; public set; }
    public Uri DiffSourceControlItemsServiceLocation { get; }
    public ServiceDefinition AnnotateSourceControlItemService { get; public set; }
    public Uri AnnotateSourceControlItemServiceLocation { get; }
    public ServiceDefinition ViewSourceControlItemHistoryService { get; public set; }
    public Uri ViewSourceControlItemHistoryServiceLocation { get; }
    public ServiceDefinition ViewBuildDetailsService { get; public set; }
    public Uri ViewBuildDetailsServiceLocation { get; }
    public ServiceDefinition ViewSourceControlShelvedItemService { get; public set; }
    public Uri ViewSourceControlShelvedItemServiceLocation { get; }
    public ServiceDefinition DiffSourceControlShelvedItemService { get; public set; }
    public Uri DiffSourceControlShelvedItemServiceLocation { get; }
    private static TeamSystemWebAccess();
    public ServiceDefinition get_HomeService();
    public void set_HomeService(ServiceDefinition value);
    public Uri get_HomeServiceLocation();
    public ServiceDefinition get_WorkItemEditorService();
    public void set_WorkItemEditorService(ServiceDefinition value);
    public Uri get_WorkItemEditorServiceLocation();
    public ServiceDefinition get_ChangesetDetailService();
    public void set_ChangesetDetailService(ServiceDefinition value);
    public Uri get_ChangesetDetailServiceLocation();
    public ServiceDefinition get_DifferenceService();
    public void set_DifferenceService(ServiceDefinition value);
    public Uri get_DifferenceServiceLocation();
    public ServiceDefinition get_ViewItemService();
    public void set_ViewItemService(ServiceDefinition value);
    public Uri get_ViewItemServiceLocation();
    public ServiceDefinition get_ShelvesetDetailService();
    public void set_ShelvesetDetailService(ServiceDefinition value);
    public Uri get_ShelvesetDetailServiceLocation();
    public ServiceDefinition get_QueryResultsService();
    public void set_QueryResultsService(ServiceDefinition value);
    public Uri get_QueryResultsServiceLocation();
    public ServiceDefinition get_AnnotateService();
    public void set_AnnotateService(ServiceDefinition value);
    public Uri get_AnnotateServiceLocation();
    public ServiceDefinition get_SourceExplorerService();
    public void set_SourceExplorerService(ServiceDefinition value);
    public Uri get_SourceExplorerServiceLocation();
    public ServiceDefinition get_OpenWorkItemService();
    public void set_OpenWorkItemService(ServiceDefinition value);
    public Uri get_OpenWorkItemServiceLocation();
    public ServiceDefinition get_CreateWorkItemService();
    public void set_CreateWorkItemService(ServiceDefinition value);
    public Uri get_CreateWorkItemServiceLocation();
    public ServiceDefinition get_ViewServerQueryResultsService();
    public void set_ViewServerQueryResultsService(ServiceDefinition value);
    public Uri get_ViewServerQueryResultsServiceLocation();
    public ServiceDefinition get_ViewWiqlQueryResultsService();
    public void set_ViewWiqlQueryResultsService(ServiceDefinition value);
    public Uri get_ViewWiqlQueryResultsServiceLocation();
    public ServiceDefinition get_ExploreSourceControlPathService();
    public void set_ExploreSourceControlPathService(ServiceDefinition value);
    public Uri get_ExploreSourceControlPathServiceLocation();
    public ServiceDefinition get_FindShelvesetService();
    public void set_FindShelvesetService(ServiceDefinition value);
    public Uri get_FindShelvesetServiceLocation();
    public ServiceDefinition get_ViewShelvesetDetailsService();
    public void set_ViewShelvesetDetailsService(ServiceDefinition value);
    public Uri get_ViewShelvesetDetailsServiceLocation();
    public ServiceDefinition get_FindChangesetService();
    public void set_FindChangesetService(ServiceDefinition value);
    public Uri get_FindChangesetServiceLocation();
    public ServiceDefinition get_ViewChangesetDetailsService();
    public void set_ViewChangesetDetailsService(ServiceDefinition value);
    public Uri get_ViewChangesetDetailsServiceLocation();
    public ServiceDefinition get_ViewSourceControlItemService();
    public void set_ViewSourceControlItemService(ServiceDefinition value);
    public Uri get_ViewSourceControlItemServiceLocation();
    public ServiceDefinition get_DownloadSourceControlItemService();
    public void set_DownloadSourceControlItemService(ServiceDefinition value);
    public Uri get_DownloadSourceControlItemServiceLocation();
    public ServiceDefinition get_DiffSourceControlItemsService();
    public void set_DiffSourceControlItemsService(ServiceDefinition value);
    public Uri get_DiffSourceControlItemsServiceLocation();
    public ServiceDefinition get_AnnotateSourceControlItemService();
    public void set_AnnotateSourceControlItemService(ServiceDefinition value);
    public Uri get_AnnotateSourceControlItemServiceLocation();
    public ServiceDefinition get_ViewSourceControlItemHistoryService();
    public void set_ViewSourceControlItemHistoryService(ServiceDefinition value);
    public Uri get_ViewSourceControlItemHistoryServiceLocation();
    public ServiceDefinition get_ViewBuildDetailsService();
    public void set_ViewBuildDetailsService(ServiceDefinition value);
    public Uri get_ViewBuildDetailsServiceLocation();
    public ServiceDefinition get_ViewSourceControlShelvedItemService();
    public void set_ViewSourceControlShelvedItemService(ServiceDefinition value);
    public Uri get_ViewSourceControlShelvedItemServiceLocation();
    public ServiceDefinition get_DiffSourceControlShelvedItemService();
    public void set_DiffSourceControlShelvedItemService(ServiceDefinition value);
    public Uri get_DiffSourceControlShelvedItemServiceLocation();
}
[EditorBrowsableAttribute("1")]
public class Microsoft.TeamFoundation.Framework.Client.Catalog.Objects.TeamWebApplication : CatalogObject {
    public static Guid ResourceTypeIdentifier;
    private static TeamWebApplication();
}
[EditorBrowsableAttribute("1")]
public class Microsoft.TeamFoundation.Framework.Client.Catalog.Objects.TestController : CatalogObject {
    public static Guid ResourceTypeIdentifier;
    public string ControllerName { get; public set; }
    public string GroupId { get; public set; }
    private static TestController();
    public string get_ControllerName();
    public void set_ControllerName(string value);
    public string get_GroupId();
    public void set_GroupId(string value);
}
[EditorBrowsableAttribute("1")]
public class Microsoft.TeamFoundation.Framework.Client.Catalog.Objects.TestEnvironment : CatalogObject {
    public static Guid ResourceTypeIdentifier;
    public string EnvironmentName { get; public set; }
    public string ControllerName { get; public set; }
    public string ProjectName { get; public set; }
    private static TestEnvironment();
    public string get_EnvironmentName();
    public void set_EnvironmentName(string value);
    public string get_ControllerName();
    public void set_ControllerName(string value);
    public string get_ProjectName();
    public void set_ProjectName(string value);
}
[EditorBrowsableAttribute("1")]
public class Microsoft.TeamFoundation.Framework.Client.Catalog.Objects.TfsRelativeWebSite : CatalogObject {
    public string RelativePath { get; public set; }
    public CatalogObject ReferencedResource { get; public set; }
    public string get_RelativePath();
    public void set_RelativePath(string value);
    public CatalogObject get_ReferencedResource();
    public void set_ReferencedResource(CatalogObject value);
    protected Uri GetFullyQualifiedUri();
}
[EditorBrowsableAttribute("1")]
public class Microsoft.TeamFoundation.Framework.Client.Catalog.Objects.WarehouseDatabase : ServerDatabase {
    public static Guid ResourceTypeIdentifier;
    public SqlReportingInstance DatabaseInstance { get; }
    private static WarehouseDatabase();
    protected virtual void Reset();
    public SqlReportingInstance get_DatabaseInstance();
    public virtual string GetConnectionString();
    public static WarehouseDatabase Register(SqlReportingInstance instance, string databaseName);
}
public class Microsoft.TeamFoundation.Framework.Client.CatalogChangeContext : object {
    private Dictionary`2<Guid, CatalogResource> m_resources;
    private Dictionary`2<string, CatalogNode> m_nodes;
    private List`1<KeyValueOfStringString> m_moves;
    private CatalogService m_catalogService;
    private CatalogWebService m_catalogProxy;
    internal CatalogChangeContext(CatalogService catalogService, CatalogWebService catalogProxy);
    public void AttachResource(CatalogResource resource);
    public void AttachNode(CatalogNode node);
    public void AttachDelete(CatalogNode node, bool recurse);
    public void AttachMove(CatalogNode nodeToMove, CatalogNode newParent);
    public CatalogChangeResult Save();
    public CatalogChangeResult Preview();
    private CatalogChangeResult SaveInternal(bool preview);
}
public class Microsoft.TeamFoundation.Framework.Client.CatalogChangeResult : object {
    [CompilerGeneratedAttribute]
private ReadOnlyCollection`1<CatalogNode> <DeletedNodes>k__BackingField;
    [CompilerGeneratedAttribute]
private ReadOnlyCollection`1<CatalogResource> <DeletedResources>k__BackingField;
    public ReadOnlyCollection`1<CatalogNode> DeletedNodes { get; internal set; }
    public ReadOnlyCollection`1<CatalogResource> DeletedResources { get; internal set; }
    [CompilerGeneratedAttribute]
public ReadOnlyCollection`1<CatalogNode> get_DeletedNodes();
    [CompilerGeneratedAttribute]
internal void set_DeletedNodes(ReadOnlyCollection`1<CatalogNode> value);
    [CompilerGeneratedAttribute]
public ReadOnlyCollection`1<CatalogResource> get_DeletedResources();
    [CompilerGeneratedAttribute]
internal void set_DeletedResources(ReadOnlyCollection`1<CatalogResource> value);
}
internal class Microsoft.TeamFoundation.Framework.Client.CatalogData : object {
    internal CatalogNode[] m_catalogNodes;
    internal CatalogResourceType[] m_catalogResourceTypes;
    internal CatalogResource[] m_catalogResources;
    internal CatalogResource[] m_deletedNodeResources;
    internal CatalogNode[] m_deletedNodes;
    internal CatalogResource[] m_deletedResources;
    private int m_locationServiceLastChangeId;
    public CatalogNode[] CatalogNodes { get; public set; }
    public CatalogResourceType[] CatalogResourceTypes { get; public set; }
    public CatalogResource[] CatalogResources { get; public set; }
    public CatalogResource[] DeletedNodeResources { get; public set; }
    public CatalogNode[] DeletedNodes { get; public set; }
    public CatalogResource[] DeletedResources { get; public set; }
    public int LocationServiceLastChangeId { get; public set; }
    public CatalogNode[] get_CatalogNodes();
    public void set_CatalogNodes(CatalogNode[] value);
    public CatalogResourceType[] get_CatalogResourceTypes();
    public void set_CatalogResourceTypes(CatalogResourceType[] value);
    public CatalogResource[] get_CatalogResources();
    public void set_CatalogResources(CatalogResource[] value);
    public CatalogResource[] get_DeletedNodeResources();
    public void set_DeletedNodeResources(CatalogResource[] value);
    public CatalogNode[] get_DeletedNodes();
    public void set_DeletedNodes(CatalogNode[] value);
    public CatalogResource[] get_DeletedResources();
    public void set_DeletedResources(CatalogResource[] value);
    public int get_LocationServiceLastChangeId();
    public void set_LocationServiceLastChangeId(int value);
    internal static CatalogData FromXml(IServiceProvider serviceProvider, XmlReader reader);
    public virtual string ToString();
    internal void ToXml(XmlWriter writer, string element);
    internal static void ToXml(XmlWriter writer, string element, CatalogData obj);
}
public class Microsoft.TeamFoundation.Framework.Client.CatalogDependencyGroup : object {
    private IDictionary`2<string, CatalogNode> m_singletons;
    private IDictionary`2<string, IList`1<CatalogNode>> m_sets;
    public IEnumerable`1<KeyValuePair`2<string, CatalogNode>> Singletons { get; }
    public IEnumerable`1<KeyValuePair`2<string, IList`1<CatalogNode>>> Sets { get; }
    public CatalogDependencyGroup(CatalogDependencyGroup dependencies);
    public IEnumerable`1<CatalogNode> GetAllDependencies();
    public void SetSingletonDependency(string key, CatalogNode node);
    public void RemoveSingletonDependency(string key);
    public CatalogNode GetSingletonDependency(string key);
    public IEnumerable`1<KeyValuePair`2<string, CatalogNode>> get_Singletons();
    public void AddSetDependency(string key, CatalogNode node);
    public void RemoveSetDependency(string key);
    public void RemoveSetDependency(string key, CatalogNode node);
    public IEnumerable`1<KeyValuePair`2<string, IList`1<CatalogNode>>> get_Sets();
    public IEnumerable`1<CatalogNode> GetDependencySet(string key);
    public void ClearSingletonDependencies();
    public void ClearDependencySets();
}
public class Microsoft.TeamFoundation.Framework.Client.CatalogNode : object {
    [CompilerGeneratedAttribute]
private CatalogNode <ParentNode>k__BackingField;
    [CompilerGeneratedAttribute]
private CatalogDependencyGroup <Dependencies>k__BackingField;
    [CompilerGeneratedAttribute]
private CatalogService <CatalogService>k__BackingField;
    private CatalogResource m_resource;
    private int m_changeTypeValue;
    private string m_childItem;
    private string m_fullPath;
    private bool m_isDefault;
    private bool m_matchedQuery;
    internal CatalogNodeDependency[] m_nodeDependencies;
    private bool m_nodeDependenciesIncluded;
    private string m_parentPath;
    private Guid m_resourceIdentifier;
    public CatalogNode ParentNode { get; internal set; }
    public string ParentPath { get; }
    public string FullPath { get; }
    public CatalogResource Resource { get; internal set; }
    public bool IsDefault { get; public set; }
    public CatalogDependencyGroup Dependencies { get; internal set; }
    public CatalogTree CatalogTree { get; }
    internal string ChildItem { get; private set; }
    internal bool MatchedQuery { get; }
    internal CatalogNodeDependency[] NodeDependencies { get; }
    internal bool NodeDependenciesIncluded { get; }
    internal CatalogService CatalogService { get; internal set; }
    internal CatalogChangeType ChangeType { get; internal set; }
    private CatalogNode(CatalogService catalogService, string parentPath, string childItem, CatalogDependencyGroup dependencies, CatalogResource resource);
    [CompilerGeneratedAttribute]
public CatalogNode get_ParentNode();
    [CompilerGeneratedAttribute]
internal void set_ParentNode(CatalogNode value);
    public string get_ParentPath();
    public string get_FullPath();
    public CatalogResource get_Resource();
    internal void set_Resource(CatalogResource value);
    public bool get_IsDefault();
    public void set_IsDefault(bool value);
    public CatalogNode CreateChild(Guid resourceTypeIdentifier, string resourceDisplayName);
    public CatalogNode CreateChild(CatalogResource existingResource);
    public ReadOnlyCollection`1<CatalogNode> QueryChildren(IEnumerable`1<Guid> resourceTypeFilters, bool recurse, CatalogQueryOptions queryOptions);
    public ReadOnlyCollection`1<CatalogNode> QueryChildren(IEnumerable`1<Guid> resourceTypeFilters, IEnumerable`1<KeyValuePair`2<string, string>> propertyFilters, bool recurse, CatalogQueryOptions queryOptions);
    public ReadOnlyCollection`1<CatalogNode> QueryParents(IEnumerable`1<Guid> resourceTypeFilters, bool recurseToRoot, CatalogQueryOptions queryOptions);
    public ReadOnlyCollection`1<CatalogNode> QueryDependents(CatalogQueryOptions queryOptions);
    [CompilerGeneratedAttribute]
public CatalogDependencyGroup get_Dependencies();
    [CompilerGeneratedAttribute]
internal void set_Dependencies(CatalogDependencyGroup value);
    public CatalogTree get_CatalogTree();
    public void ExpandDependencies();
    internal string get_ChildItem();
    private void set_ChildItem(string value);
    internal bool get_MatchedQuery();
    internal CatalogNodeDependency[] get_NodeDependencies();
    internal bool get_NodeDependenciesIncluded();
    [CompilerGeneratedAttribute]
internal CatalogService get_CatalogService();
    [CompilerGeneratedAttribute]
internal void set_CatalogService(CatalogService value);
    internal CatalogChangeType get_ChangeType();
    internal void set_ChangeType(CatalogChangeType value);
    internal void UpdateSelf(CatalogNode updatedNode);
    internal void InitializeFromWebService(CatalogService catalogService);
    internal static CatalogNode PrepareForWebServiceSerialization(CatalogNode node);
    [EditorBrowsableAttribute("1")]
public static CatalogNode FromXml(IServiceProvider serviceProvider, XmlReader reader);
    public virtual string ToString();
    [EditorBrowsableAttribute("1")]
public void ToXml(XmlWriter writer, string element);
    [EditorBrowsableAttribute("1")]
public static void ToXml(XmlWriter writer, string element, CatalogNode obj);
}
internal class Microsoft.TeamFoundation.Framework.Client.CatalogNodeDependency : object {
    private string m_associationKey;
    private string m_fullPath;
    private bool m_isSingleton;
    private string m_requiredNodeFullPath;
    public string AssociationKey { get; public set; }
    public string FullPath { get; public set; }
    public bool IsSingleton { get; public set; }
    public string RequiredNodeFullPath { get; public set; }
    public string get_AssociationKey();
    public void set_AssociationKey(string value);
    public string get_FullPath();
    public void set_FullPath(string value);
    public bool get_IsSingleton();
    public void set_IsSingleton(bool value);
    public string get_RequiredNodeFullPath();
    public void set_RequiredNodeFullPath(string value);
    internal static CatalogNodeDependency FromXml(IServiceProvider serviceProvider, XmlReader reader);
    public virtual string ToString();
    internal void ToXml(XmlWriter writer, string element);
    internal static void ToXml(XmlWriter writer, string element, CatalogNodeDependency obj);
}
public class Microsoft.TeamFoundation.Framework.Client.CatalogNodeDoesNotExistException : TeamFoundationCatalogServiceException {
    public CatalogNodeDoesNotExistException(string message);
    public CatalogNodeDoesNotExistException(string message, Exception ex);
    protected CatalogNodeDoesNotExistException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.TeamFoundation.Framework.Client.CatalogResource : object {
    [CompilerGeneratedAttribute]
private CatalogResourceType <ResourceType>k__BackingField;
    [CompilerGeneratedAttribute]
private IDictionary`2<string, string> <Properties>k__BackingField;
    [CompilerGeneratedAttribute]
private IDictionary`2<string, ServiceDefinition> <ServiceReferences>k__BackingField;
    [CompilerGeneratedAttribute]
private ReadOnlyCollection`1<CatalogNode> <NodeReferences>k__BackingField;
    internal CatalogServiceReference[] m_catalogServiceReferences;
    private int m_changeTypeValue;
    private string m_description;
    private string m_displayName;
    private Guid m_identifier;
    private bool m_matchedQuery;
    internal String[] m_nodeReferencePaths;
    internal KeyValueOfStringString[] m_propertyPairs;
    private Guid m_resourceTypeIdentifier;
    private Guid m_tempCorrelationId;
    public Guid Identifier { get; }
    public string DisplayName { get; public set; }
    public string Description { get; public set; }
    public CatalogResourceType ResourceType { get; internal set; }
    public IDictionary`2<string, string> Properties { get; internal set; }
    public IDictionary`2<string, ServiceDefinition> ServiceReferences { get; internal set; }
    public ReadOnlyCollection`1<CatalogNode> NodeReferences { get; internal set; }
    internal Guid TempCorrelationId { get; internal set; }
    internal CatalogChangeType ChangeType { get; internal set; }
    internal bool MatchedQuery { get; }
    internal CatalogResource(string displayName, CatalogResourceType resourceType);
    public Guid get_Identifier();
    public string get_DisplayName();
    public void set_DisplayName(string value);
    public string get_Description();
    public void set_Description(string value);
    [CompilerGeneratedAttribute]
public CatalogResourceType get_ResourceType();
    [CompilerGeneratedAttribute]
internal void set_ResourceType(CatalogResourceType value);
    [CompilerGeneratedAttribute]
public IDictionary`2<string, string> get_Properties();
    [CompilerGeneratedAttribute]
internal void set_Properties(IDictionary`2<string, string> value);
    [CompilerGeneratedAttribute]
public IDictionary`2<string, ServiceDefinition> get_ServiceReferences();
    [CompilerGeneratedAttribute]
internal void set_ServiceReferences(IDictionary`2<string, ServiceDefinition> value);
    [CompilerGeneratedAttribute]
public ReadOnlyCollection`1<CatalogNode> get_NodeReferences();
    [CompilerGeneratedAttribute]
internal void set_NodeReferences(ReadOnlyCollection`1<CatalogNode> value);
    internal Guid get_TempCorrelationId();
    internal void set_TempCorrelationId(Guid value);
    internal CatalogChangeType get_ChangeType();
    internal void set_ChangeType(CatalogChangeType value);
    internal bool get_MatchedQuery();
    internal void UpdateSelf(CatalogResource updatedResource);
    internal void InitializeFromWebService(Dictionary`2<Guid, CatalogResourceType> resourceTypes, Dictionary`2<string, CatalogNode> nodes, ILocationService locationService);
    internal static CatalogResource PrepareForWebServiceSerialization(CatalogResource resource);
    [EditorBrowsableAttribute("1")]
public static CatalogResource FromXml(IServiceProvider serviceProvider, XmlReader reader);
    public virtual string ToString();
    [EditorBrowsableAttribute("1")]
public void ToXml(XmlWriter writer, string element);
    [EditorBrowsableAttribute("1")]
public static void ToXml(XmlWriter writer, string element, CatalogResource obj);
}
public class Microsoft.TeamFoundation.Framework.Client.CatalogResourceDoesNotExistException : TeamFoundationCatalogServiceException {
    public CatalogResourceDoesNotExistException(string message);
    public CatalogResourceDoesNotExistException(string message, Exception ex);
    protected CatalogResourceDoesNotExistException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.TeamFoundation.Framework.Client.CatalogResourceType : object {
    private string m_description;
    private string m_displayName;
    private Guid m_identifier;
    public Guid Identifier { get; }
    public string DisplayName { get; }
    public string Description { get; }
    public Guid get_Identifier();
    public string get_DisplayName();
    public string get_Description();
    [EditorBrowsableAttribute("1")]
public static CatalogResourceType FromXml(IServiceProvider serviceProvider, XmlReader reader);
    public virtual string ToString();
    [EditorBrowsableAttribute("1")]
public void ToXml(XmlWriter writer, string element);
    [EditorBrowsableAttribute("1")]
public static void ToXml(XmlWriter writer, string element, CatalogResourceType obj);
}
public class Microsoft.TeamFoundation.Framework.Client.CatalogResourceTypeDoesNotExistException : TeamFoundationCatalogServiceException {
    public CatalogResourceTypeDoesNotExistException(string message);
    public CatalogResourceTypeDoesNotExistException(string message, Exception ex);
    protected CatalogResourceTypeDoesNotExistException(SerializationInfo info, StreamingContext context);
}
internal class Microsoft.TeamFoundation.Framework.Client.CatalogService : object {
    private bool m_resourceTypesLoaded;
    private ReaderWriterLock m_accessLock;
    private Dictionary`2<Guid, CatalogResourceType> m_resourceTypes;
    private TfsConfigurationServer m_server;
    private ILocationService m_locationService;
    private CatalogWebService m_catalogProxy;
    public ReadOnlyCollection`1<CatalogNode> RootNodes { get; }
    public ILocationService LocationService { get; }
    public CatalogService(TfsConfigurationServer server);
    public sealed virtual ReadOnlyCollection`1<CatalogResourceType> QueryResourceTypes(IEnumerable`1<Guid> resourceTypeIdentifiers);
    public sealed virtual ReadOnlyCollection`1<CatalogResource> QueryResources(IEnumerable`1<Guid> resourceIdentifiers, CatalogQueryOptions queryOptions);
    public sealed virtual ReadOnlyCollection`1<CatalogResource> QueryResourcesByType(IEnumerable`1<Guid> resourceTypeIdentifiers, CatalogQueryOptions queryOptions);
    public sealed virtual ReadOnlyCollection`1<CatalogResource> QueryResources(IEnumerable`1<Guid> resourceTypeIdentifiers, IEnumerable`1<KeyValuePair`2<string, string>> propertyFilters, CatalogQueryOptions queryOptions);
    public sealed virtual ReadOnlyCollection`1<CatalogNode> QueryUpTree(string path, IEnumerable`1<Guid> resourceTypeFilters, CatalogQueryOptions queryOptions);
    public sealed virtual ReadOnlyCollection`1<CatalogNode> QueryParents(Guid resourceIdentifier, IEnumerable`1<string> pathFilters, IEnumerable`1<Guid> resourceTypeFilters, bool recurseToRoot, CatalogQueryOptions queryOptions);
    public sealed virtual ReadOnlyCollection`1<CatalogNode> QueryNodes(IEnumerable`1<string> pathSpecs, IEnumerable`1<Guid> resourceTypeFilters, CatalogQueryOptions queryOptions);
    public sealed virtual ReadOnlyCollection`1<CatalogNode> QueryNodes(IEnumerable`1<string> pathSpecs, IEnumerable`1<Guid> resourceTypeFilters, IEnumerable`1<KeyValuePair`2<string, string>> propertyFilters, CatalogQueryOptions queryOptions);
    public ReadOnlyCollection`1<CatalogNode> QueryDependents(string path, CatalogQueryOptions queryOptions);
    public sealed virtual ReadOnlyCollection`1<CatalogNode> get_RootNodes();
    public sealed virtual CatalogNode QueryRootNode(CatalogTree tree);
    public sealed virtual void SaveResource(CatalogResource resource);
    public sealed virtual void SaveNode(CatalogNode node);
    public sealed virtual void SaveDelete(CatalogNode node, bool recurse);
    public sealed virtual void SaveMove(CatalogNode nodeToMove, CatalogNode newParent);
    public sealed virtual CatalogChangeContext CreateChangeContext();
    public sealed virtual ILocationService get_LocationService();
    internal void BuildCatalogObjects(int locationServiceLastChangeId, CatalogResource[] resources, CatalogNode[] nodes, CatalogResourceType[] types, CatalogQueryOptions queryOptions, List`1& matchingResources, List`1& matchingNodes);
    private void EnsureResourceTypesLoaded();
}
internal class Microsoft.TeamFoundation.Framework.Client.CatalogServiceReference : object {
    private string m_associationKey;
    private Guid m_resourceIdentifier;
    private ServiceDefinition m_serviceDefinition;
    public string AssociationKey { get; public set; }
    public Guid ResourceIdentifier { get; public set; }
    public ServiceDefinition ServiceDefinition { get; public set; }
    public string get_AssociationKey();
    public void set_AssociationKey(string value);
    public Guid get_ResourceIdentifier();
    public void set_ResourceIdentifier(Guid value);
    public ServiceDefinition get_ServiceDefinition();
    public void set_ServiceDefinition(ServiceDefinition value);
    internal static CatalogServiceReference FromXml(IServiceProvider serviceProvider, XmlReader reader);
    public virtual string ToString();
    internal void ToXml(XmlWriter writer, string element);
    internal static void ToXml(XmlWriter writer, string element, CatalogServiceReference obj);
}
internal class Microsoft.TeamFoundation.Framework.Client.CatalogWebService : TfsHttpClient {
    protected string ComponentName { get; }
    protected Guid ConfigurationServiceIdentifier { get; }
    protected string ServiceType { get; }
    public CatalogWebService(TfsConfigurationServer connection);
    protected virtual string get_ComponentName();
    protected virtual Guid get_ConfigurationServiceIdentifier();
    protected virtual string get_ServiceType();
    protected virtual Exception ConvertException(SoapException exception);
    public CatalogData QueryDependents(string path, int queryOptions);
    public CatalogData QueryNodes(String[] pathSpecs, Guid[] resourceTypeFilters, KeyValueOfStringString[] propertyFilters, int queryOptions);
    public CatalogData QueryParents(Guid resourceIdentifier, String[] pathFilters, Guid[] resourceTypeFilters, bool recurseToRoot, int queryOptions);
    public CatalogResourceType[] QueryResourceTypes(Guid[] resourceTypeIdentifiers);
    public CatalogData QueryResources(Guid[] resourceIdentifiers, int queryOptions);
    public CatalogData QueryResourcesByType(Guid[] resourceTypes, KeyValueOfStringString[] propertyFilters, int queryOptions);
    public CatalogData SaveCatalogChanges(CatalogResource[] resources, CatalogNode[] nodes, KeyValueOfStringString[] nodeMoves, int queryOptions, bool preview);
}
public class Microsoft.TeamFoundation.Framework.Client.CircularNodeReferenceException : CommonStructureSubsystemServiceException {
    public CircularNodeReferenceException(string message);
    public CircularNodeReferenceException(string message, Exception ex);
    protected CircularNodeReferenceException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.TeamFoundation.Framework.Client.CircularObjectInheritanceException : AuthorizationSubsystemServiceException {
    public CircularObjectInheritanceException(string message);
    public CircularObjectInheritanceException(string message, Exception ex);
    protected CircularObjectInheritanceException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.TeamFoundation.Framework.Client.ClassIdDoesNotExistException : GroupSecuritySubsystemServiceException {
    public ClassIdDoesNotExistException(string message);
    public ClassIdDoesNotExistException(string message, Exception ex);
    protected ClassIdDoesNotExistException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.TeamFoundation.Framework.Client.CleanupJobInProgressException : TeamFoundationServiceException {
    public CleanupJobInProgressException(string message);
    public CleanupJobInProgressException(string message, Exception ex);
    protected CleanupJobInProgressException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.TeamFoundation.Framework.Client.ClientCancelException : ProxyException {
    public ClientCancelException(string message);
    public ClientCancelException(string message, Exception ex);
    protected ClientCancelException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.TeamFoundation.Framework.Client.CollationException : TeamFoundationServiceException {
    public CollationException(string message);
    public CollationException(string message, Exception ex);
    protected CollationException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.TeamFoundation.Framework.Client.CollectionDoesNotExistException : TeamFoundationServiceException {
    public CollectionDoesNotExistException(string message);
    public CollectionDoesNotExistException(string message, Exception ex);
    protected CollectionDoesNotExistException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.TeamFoundation.Framework.Client.CollectionMisconfiguredException : TeamFoundationServiceException {
    public CollectionMisconfiguredException(string message);
    public CollectionMisconfiguredException(string message, Exception ex);
    protected CollectionMisconfiguredException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.TeamFoundation.Framework.Client.CollectionPropertyException : TeamFoundationServiceException {
    public CollectionPropertyException(string message);
    public CollectionPropertyException(string message, Exception ex);
    protected CollectionPropertyException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.TeamFoundation.Framework.Client.CollectionServicingJobDidNotSucceedException : TeamFoundationServerException {
    public CollectionServicingJobDidNotSucceedException(string message);
    public CollectionServicingJobDidNotSucceedException(string message, Exception innerException);
}
public class Microsoft.TeamFoundation.Framework.Client.CommonStructureSubsystemServiceException : TeamFoundationServiceException {
    public CommonStructureSubsystemServiceException(string message);
    public CommonStructureSubsystemServiceException(string message, Exception ex);
    protected CommonStructureSubsystemServiceException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.TeamFoundation.Framework.Client.ComponentFactoryException : TeamFoundationResourceManagementServiceException {
    public ComponentFactoryException(string message);
    public ComponentFactoryException(string message, Exception ex);
    protected ComponentFactoryException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.TeamFoundation.Framework.Client.ConnectedService : object {
    [CompilerGeneratedAttribute]
private TeamFoundationStrongBoxService <StrongBox>k__BackingField;
    private StrongBoxItemInfo m_credentialsXmlInfo;
    private StrongBoxItemInfo m_endpointInfo;
    private StrongBoxItemInfo m_oAuthTokenInfo;
    private ConnectedServiceMetadata m_serviceMetadata;
    private TeamFoundationStrongBoxService StrongBox { get; private set; }
    public string Endpoint { get; }
    public string CredentialsXml { get; }
    public string OAuthToken { get; }
    public ConnectedServiceMetadata ServiceMetadata { get; }
    [CompilerGeneratedAttribute]
private TeamFoundationStrongBoxService get_StrongBox();
    [CompilerGeneratedAttribute]
private void set_StrongBox(TeamFoundationStrongBoxService value);
    public string get_Endpoint();
    public string get_CredentialsXml();
    public string get_OAuthToken();
    public ConnectedServiceMetadata get_ServiceMetadata();
    [EditorBrowsableAttribute("1")]
public static ConnectedService FromXml(IServiceProvider serviceProvider, XmlReader reader);
    public virtual string ToString();
    [EditorBrowsableAttribute("1")]
public void ToXml(XmlWriter writer, string element);
    [EditorBrowsableAttribute("1")]
public static void ToXml(XmlWriter writer, string element, ConnectedService obj);
}
public class Microsoft.TeamFoundation.Framework.Client.ConnectedServiceCreationData : object {
    private string m_credentialsXml;
    private Uri m_endpoint;
    private ConnectedServiceMetadata m_serviceMetadata;
    public string CredentialsXml { get; }
    public Uri Endpoint { get; }
    public ConnectedServiceMetadata ServiceMetadata { get; }
    public ConnectedServiceCreationData(string name, string teamProject, ConnectedServiceKind kind, string friendlyName, string description, Uri serviceUri, Uri endpoint, string credentialsXml);
    public string get_CredentialsXml();
    public Uri get_Endpoint();
    public ConnectedServiceMetadata get_ServiceMetadata();
    [EditorBrowsableAttribute("1")]
public static ConnectedServiceCreationData FromXml(IServiceProvider serviceProvider, XmlReader reader);
    public virtual string ToString();
    [EditorBrowsableAttribute("1")]
public void ToXml(XmlWriter writer, string element);
    [EditorBrowsableAttribute("1")]
public static void ToXml(XmlWriter writer, string element, ConnectedServiceCreationData obj);
}
public enum Microsoft.TeamFoundation.Framework.Client.ConnectedServiceKind : Enum {
    public int value__;
    public static ConnectedServiceKind AzureSubscription;
    public static ConnectedServiceKind Custom;
}
public class Microsoft.TeamFoundation.Framework.Client.ConnectedServiceMetadata : object {
    private Guid m_authenticatedBy;
    private string m_description;
    private string m_friendlyName;
    private ConnectedServiceKind m_kind;
    private string m_name;
    private Uri m_serviceUri;
    private string m_teamProject;
    public Guid AuthenticatedBy { get; }
    public string Description { get; public set; }
    public string FriendlyName { get; public set; }
    public ConnectedServiceKind Kind { get; public set; }
    public string Name { get; public set; }
    public Uri ServiceUri { get; public set; }
    public string TeamProject { get; public set; }
    public Guid get_AuthenticatedBy();
    public string get_Description();
    public void set_Description(string value);
    public string get_FriendlyName();
    public void set_FriendlyName(string value);
    public ConnectedServiceKind get_Kind();
    public void set_Kind(ConnectedServiceKind value);
    public string get_Name();
    public void set_Name(string value);
    public Uri get_ServiceUri();
    public void set_ServiceUri(Uri value);
    public string get_TeamProject();
    public void set_TeamProject(string value);
    [EditorBrowsableAttribute("1")]
public static ConnectedServiceMetadata FromXml(IServiceProvider serviceProvider, XmlReader reader);
    public virtual string ToString();
    [EditorBrowsableAttribute("1")]
public void ToXml(XmlWriter writer, string element);
    [EditorBrowsableAttribute("1")]
public static void ToXml(XmlWriter writer, string element, ConnectedServiceMetadata obj);
}
public class Microsoft.TeamFoundation.Framework.Client.ConnectedServicesService : object {
    private ConnectedServicesWebService m_connectedServicesService;
    private TfsTeamProjectCollection m_tfs;
    private ConnectedServicesWebService connectedServices { get; }
    private sealed virtual override void Microsoft.TeamFoundation.Client.ITfsTeamProjectCollectionObject.Initialize(TfsTeamProjectCollection server);
    public ConnectedServiceMetadata CreateConnectedService(string name, string teamProject, ConnectedServiceKind kind, string friendlyName, string description, Uri serviceUri, Uri endpoint, string credentialsXml);
    public List`1<ConnectedServiceMetadata> QueryConnectedServices(string teamProject);
    public ConnectedService GetConnectedService(string name, string teamProject);
    public bool DoesConnectedServiceExist(string name, string teamProject);
    public void DeleteConnectedService(string name, string teamProject);
    private ConnectedServicesWebService get_connectedServices();
}
internal class Microsoft.TeamFoundation.Framework.Client.ConnectedServicesWebService : TfsHttpClient {
    private TeamFoundationStrongBoxService m_strongBox;
    protected Guid CollectionServiceIdentifier { get; }
    protected string ComponentName { get; }
    protected string ServiceType { get; }
    public ConnectedServicesWebService(TfsTeamProjectCollection connection);
    public virtual object GetService(Type serviceType);
    protected virtual Guid get_CollectionServiceIdentifier();
    protected virtual string get_ComponentName();
    protected virtual string get_ServiceType();
    protected virtual Exception ConvertException(SoapException exception);
    public ConnectedServiceMetadata CreateConnectedService(ConnectedServiceCreationData connectedServiceCreationData);
    public void DeleteConnectedService(string name, string teamProject);
    public bool DoesConnectedServiceExist(string name, string teamProject);
    public ConnectedService GetConnectedService(string name, string teamProject);
    public ConnectedServiceMetadata[] QueryConnectedServices(string teamProject);
}
internal class Microsoft.TeamFoundation.Framework.Client.ConnectionData : object {
    private TeamFoundationIdentity m_authenticatedUser;
    private TeamFoundationIdentity m_authorizedUser;
    private Guid m_catalogResourceId;
    private Guid m_instanceId;
    private LocationServiceData m_locationServiceData;
    private int m_serverCapabilities;
    private string m_webApplicationRelativeDirectory;
    private string m_serverVersion;
    public ServerCapabilities ServerCapabilities { get; }
    public TeamFoundationIdentity AuthenticatedUser { get; public set; }
    public TeamFoundationIdentity AuthorizedUser { get; public set; }
    public Guid CatalogResourceId { get; public set; }
    public Guid InstanceId { get; public set; }
    public LocationServiceData LocationServiceData { get; public set; }
    public string WebApplicationRelativeDirectory { get; public set; }
    public string ServerVersion { get; public set; }
    public ServerCapabilities get_ServerCapabilities();
    public TeamFoundationIdentity get_AuthenticatedUser();
    public void set_AuthenticatedUser(TeamFoundationIdentity value);
    public TeamFoundationIdentity get_AuthorizedUser();
    public void set_AuthorizedUser(TeamFoundationIdentity value);
    public Guid get_CatalogResourceId();
    public void set_CatalogResourceId(Guid value);
    public Guid get_InstanceId();
    public void set_InstanceId(Guid value);
    public LocationServiceData get_LocationServiceData();
    public void set_LocationServiceData(LocationServiceData value);
    public string get_WebApplicationRelativeDirectory();
    public void set_WebApplicationRelativeDirectory(string value);
    public string get_ServerVersion();
    public void set_ServerVersion(string value);
    internal static ConnectionData FromXml(IServiceProvider serviceProvider, XmlReader reader);
    public virtual string ToString();
    internal void ToXml(XmlWriter writer, string element);
    internal static void ToXml(XmlWriter writer, string element, ConnectionData obj);
}
public class Microsoft.TeamFoundation.Framework.Client.CreateACENoActionException : AuthorizationSubsystemServiceException {
    public CreateACENoActionException(string message);
    public CreateACENoActionException(string message, Exception ex);
    protected CreateACENoActionException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.TeamFoundation.Framework.Client.CreateACENoObjectException : AuthorizationSubsystemServiceException {
    public CreateACENoObjectException(string message);
    public CreateACENoObjectException(string message, Exception ex);
    protected CreateACENoObjectException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.TeamFoundation.Framework.Client.CssProjectUriDoesNotExistException : CommonStructureSubsystemServiceException {
    public CssProjectUriDoesNotExistException(string message);
    public CssProjectUriDoesNotExistException(string message, Exception ex);
    protected CssProjectUriDoesNotExistException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.TeamFoundation.Framework.Client.DatabaseCategoryNotRegisteredException : TeamFoundationServiceException {
    public DatabaseCategoryNotRegisteredException(string message);
    public DatabaseCategoryNotRegisteredException(string message, Exception ex);
    protected DatabaseCategoryNotRegisteredException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.TeamFoundation.Framework.Client.DatabaseConfigurationException : TeamFoundationServiceException {
    public DatabaseConfigurationException(string message);
    public DatabaseConfigurationException(string message, Exception ex);
    protected DatabaseConfigurationException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.TeamFoundation.Framework.Client.DatabaseConnectionException : TeamFoundationServiceException {
    public DatabaseConnectionException(string message);
    public DatabaseConnectionException(string message, Exception ex);
    protected DatabaseConnectionException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.TeamFoundation.Framework.Client.DatabaseFullException : TeamFoundationServiceException {
    public DatabaseFullException(string message);
    public DatabaseFullException(string message, Exception ex);
    protected DatabaseFullException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.TeamFoundation.Framework.Client.DatabaseInstanceException : TeamFoundationServiceException {
    public DatabaseInstanceException(string message);
    public DatabaseInstanceException(string message, Exception ex);
    protected DatabaseInstanceException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.TeamFoundation.Framework.Client.DatabaseNotFoundException : TeamFoundationServiceException {
    public DatabaseNotFoundException(string message);
    public DatabaseNotFoundException(string message, Exception ex);
    protected DatabaseNotFoundException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.TeamFoundation.Framework.Client.DatabaseOperationCanceledException : TeamFoundationServiceException {
    public DatabaseOperationCanceledException(string message);
    public DatabaseOperationCanceledException(string message, Exception ex);
    protected DatabaseOperationCanceledException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.TeamFoundation.Framework.Client.DatabaseOperationTimeoutException : TeamFoundationServiceException {
    public DatabaseOperationTimeoutException(string message);
    public DatabaseOperationTimeoutException(string message, Exception ex);
    protected DatabaseOperationTimeoutException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.TeamFoundation.Framework.Client.DatabasePartitionCannotBeDeletedException : TeamFoundationServiceException {
    public DatabasePartitionCannotBeDeletedException(string message);
    public DatabasePartitionCannotBeDeletedException(string message, Exception ex);
    protected DatabasePartitionCannotBeDeletedException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.TeamFoundation.Framework.Client.DatabasePartitionNotFoundException : TeamFoundationServiceException {
    public DatabasePartitionNotFoundException(string message);
    public DatabasePartitionNotFoundException(string message, Exception ex);
    protected DatabasePartitionNotFoundException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.TeamFoundation.Framework.Client.DatabasePoolAlreadyExistsException : TeamFoundationServiceException {
    public DatabasePoolAlreadyExistsException(string message);
    public DatabasePoolAlreadyExistsException(string message, Exception ex);
    protected DatabasePoolAlreadyExistsException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.TeamFoundation.Framework.Client.DatabasePoolCannotBeDeletedException : TeamFoundationServiceException {
    public DatabasePoolCannotBeDeletedException(string message);
    public DatabasePoolCannotBeDeletedException(string message, Exception ex);
    protected DatabasePoolCannotBeDeletedException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.TeamFoundation.Framework.Client.DatabasePoolFullException : TeamFoundationServiceException {
    public DatabasePoolFullException(string message);
    public DatabasePoolFullException(string message, Exception ex);
    protected DatabasePoolFullException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.TeamFoundation.Framework.Client.DatabasePoolNotFoundException : TeamFoundationServiceException {
    public DatabasePoolNotFoundException(string message);
    public DatabasePoolNotFoundException(string message, Exception ex);
    protected DatabasePoolNotFoundException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.TeamFoundation.Framework.Client.DatabaseRuntimeException : TeamFoundationServiceException {
    public DatabaseRuntimeException(string message);
    public DatabaseRuntimeException(string message, Exception ex);
    protected DatabaseRuntimeException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.TeamFoundation.Framework.Client.DatabaseSchemaException : TeamFoundationServiceException {
    public DatabaseSchemaException(string message);
    public DatabaseSchemaException(string message, Exception ex);
    protected DatabaseSchemaException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.TeamFoundation.Framework.Client.DataspaceNotFoundException : TeamFoundationServiceException {
    public DataspaceNotFoundException(string message);
    public DataspaceNotFoundException(string message, Exception ex);
    protected DataspaceNotFoundException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.TeamFoundation.Framework.Client.DataTierNotFoundException : TeamFoundationServiceException {
    public DataTierNotFoundException(string message);
    public DataTierNotFoundException(string message, Exception ex);
    protected DataTierNotFoundException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.TeamFoundation.Framework.Client.DateTimeShiftDetectedException : TeamFoundationServiceException {
    public DateTimeShiftDetectedException(string message);
    public DateTimeShiftDetectedException(string message, Exception ex);
    protected DateTimeShiftDetectedException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.TeamFoundation.Framework.Client.DBExecutingDeadlockException : TeamFoundationServiceException {
    public DBExecutingDeadlockException(string message);
    public DBExecutingDeadlockException(string message, Exception ex);
    protected DBExecutingDeadlockException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.TeamFoundation.Framework.Client.DBResultDeadlockException : TeamFoundationServiceException {
    public DBResultDeadlockException(string message);
    public DBResultDeadlockException(string message, Exception ex);
    protected DBResultDeadlockException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.TeamFoundation.Framework.Client.DeleteACEException : GroupSecuritySubsystemServiceException {
    public DeleteACEException(string message);
    public DeleteACEException(string message, Exception ex);
    protected DeleteACEException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.TeamFoundation.Framework.Client.DeleteSelfException : TeamFoundationIdentityServiceException {
    public DeleteSelfException(string message);
    public DeleteSelfException(string message, Exception ex);
    protected DeleteSelfException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.TeamFoundation.Framework.Client.DeliveryPreference : object {
    private string m_address;
    private DeliverySchedule m_schedule;
    private DeliveryType m_type;
    public DeliveryType Type { get; public set; }
    public DeliverySchedule Schedule { get; public set; }
    public string Address { get; public set; }
    public DeliveryType get_Type();
    public void set_Type(DeliveryType value);
    public DeliverySchedule get_Schedule();
    public void set_Schedule(DeliverySchedule value);
    public string get_Address();
    public void set_Address(string value);
    [EditorBrowsableAttribute("1")]
public static DeliveryPreference FromXml(IServiceProvider serviceProvider, XmlReader reader);
    public virtual string ToString();
    [EditorBrowsableAttribute("1")]
public void ToXml(XmlWriter writer, string element);
    [EditorBrowsableAttribute("1")]
public static void ToXml(XmlWriter writer, string element, DeliveryPreference obj);
}
public enum Microsoft.TeamFoundation.Framework.Client.DeliverySchedule : Enum {
    public int value__;
    public static DeliverySchedule Daily;
    public static DeliverySchedule Immediate;
    public static DeliverySchedule Weekly;
}
public enum Microsoft.TeamFoundation.Framework.Client.DeliveryType : Enum {
    public int value__;
    public static DeliveryType EmailHtml;
    public static DeliveryType EmailPlaintext;
    public static DeliveryType Soap;
    public static DeliveryType PersistedNotification;
}
public class Microsoft.TeamFoundation.Framework.Client.DeltaException : TeamFoundationServiceException {
    public DeltaException(string message);
    public DeltaException(string message, Exception ex);
    protected DeltaException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.TeamFoundation.Framework.Client.DeltaTooLargeException : TeamFoundationServiceException {
    public DeltaTooLargeException(string message);
    public DeltaTooLargeException(string message, Exception ex);
    protected DeltaTooLargeException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.TeamFoundation.Framework.Client.DestroyedContentUnavailableException : ProxyException {
    public DestroyedContentUnavailableException(string message);
    public DestroyedContentUnavailableException(string message, Exception ex);
    protected DestroyedContentUnavailableException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.TeamFoundation.Framework.Client.DownloadFromMidTierAbortedException : ProxyException {
    public DownloadFromMidTierAbortedException(string message);
    public DownloadFromMidTierAbortedException(string message, Exception ex);
    protected DownloadFromMidTierAbortedException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.TeamFoundation.Framework.Client.DownloadTicketValidationException : TeamFoundationServiceException {
    public DownloadTicketValidationException(string message);
    public DownloadTicketValidationException(string message, Exception ex);
    protected DownloadTicketValidationException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.TeamFoundation.Framework.Client.DuplicateFeatureException : TeamFoundationServiceException {
    public DuplicateFeatureException(string message);
    public DuplicateFeatureException(string message, Exception ex);
    protected DuplicateFeatureException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.TeamFoundation.Framework.Client.DuplicateFileNameException : TeamFoundationServiceException {
    public DuplicateFileNameException(string message);
    public DuplicateFileNameException(string message, Exception ex);
    protected DuplicateFileNameException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.TeamFoundation.Framework.Client.DuplicateJobIdException : TeamFoundationJobServiceException {
    public DuplicateJobIdException(string message);
    public DuplicateJobIdException(string message, Exception ex);
    protected DuplicateJobIdException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.TeamFoundation.Framework.Client.DuplicateJobScheduleException : TeamFoundationJobServiceException {
    public DuplicateJobScheduleException(string message);
    public DuplicateJobScheduleException(string message, Exception ex);
    protected DuplicateJobScheduleException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.TeamFoundation.Framework.Client.DuplicateLocationMappingException : TeamFoundationLocationServiceException {
    public DuplicateLocationMappingException(string message);
    public DuplicateLocationMappingException(string message, Exception ex);
    protected DuplicateLocationMappingException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.TeamFoundation.Framework.Client.EnumerationNoneArgumentException : TeamFoundationServiceException {
    public EnumerationNoneArgumentException(string message);
    public EnumerationNoneArgumentException(string message, Exception ex);
    protected EnumerationNoneArgumentException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.TeamFoundation.Framework.Client.EventException : TeamFoundationServiceException {
    public EventException(string message);
    public EventException(string message, Exception ex);
    protected EventException(SerializationInfo info, StreamingContext context);
}
internal class Microsoft.TeamFoundation.Framework.Client.EventWebService : TfsHttpClient {
    protected Guid CollectionServiceIdentifier { get; }
    protected string ComponentName { get; }
    protected Guid ConfigurationServiceIdentifier { get; }
    protected string ServiceType { get; }
    public EventWebService(TfsConnection connection);
    protected virtual Guid get_CollectionServiceIdentifier();
    protected virtual string get_ComponentName();
    protected virtual Guid get_ConfigurationServiceIdentifier();
    protected virtual string get_ServiceType();
    protected virtual Exception ConvertException(SoapException exception);
    public Subscription[] EventSubscriptions(string userId, string projectName);
    public Subscription[] EventSubscriptionsByClassification(string userId, string classification, string projectName);
    public void FireAsyncEvent(bool guaranteed, string theEvent);
    public void FireBulkAsyncEvents(bool guaranteed, IEnumerable`1<string> theEvents);
    public int SubscribeEvent(string userId, string eventType, string filterExpression, DeliveryPreference preferences, string projectName);
    public int SubscribeEventWithClassification(string userId, string eventType, string filterExpression, DeliveryPreference preferences, string classification, string projectName);
    public void UnsubscribeEvent(int subscriptionId, string projectName);
}
public class Microsoft.TeamFoundation.Framework.Client.FailedToAcquireServicingLockException : TeamFoundationServiceException {
    public FailedToAcquireServicingLockException(string message);
    public FailedToAcquireServicingLockException(string message, Exception ex);
    protected FailedToAcquireServicingLockException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.TeamFoundation.Framework.Client.FileAlreadyUploadedException : TeamFoundationServiceException {
    public FileAlreadyUploadedException(string message);
    public FileAlreadyUploadedException(string message, Exception ex);
    protected FileAlreadyUploadedException(SerializationInfo info, StreamingContext context);
}
internal class Microsoft.TeamFoundation.Framework.Client.FileHandlerWebService : TfsHttpClient {
    private Uri m_downloadBaseUri;
    protected Guid CollectionServiceIdentifier { get; }
    protected string ComponentName { get; }
    protected Guid ConfigurationServiceIdentifier { get; }
    protected string ServiceType { get; }
    private Uri DownloadBaseUri { get; }
    public FileHandlerWebService(TfsConnection connection);
    protected virtual Guid get_CollectionServiceIdentifier();
    protected virtual string get_ComponentName();
    protected virtual Guid get_ConfigurationServiceIdentifier();
    protected virtual string get_ServiceType();
    protected virtual Exception ConvertException(SoapException exception);
    public FileRepositoryProperties QueryForRepositoryProperties();
    internal HttpWebRequest CreateDownloadRequest(string downloadUrl, CredentialsType credentials, Boolean& isProxyUrl);
    internal HttpWebRequest CreateDownloadRequest(Uri downloadUri, string downloadUrl, CredentialsType credentials, Boolean& isProxyUrl);
    private Uri get_DownloadBaseUri();
}
public class Microsoft.TeamFoundation.Framework.Client.FileIdNotFoundException : TeamFoundationServiceException {
    public FileIdNotFoundException(string message);
    public FileIdNotFoundException(string message, Exception ex);
    protected FileIdNotFoundException(SerializationInfo info, StreamingContext context);
}
[EditorBrowsableAttribute("1")]
public class Microsoft.TeamFoundation.Framework.Client.FileRepository : object {
    private FileHandlerWebService m_fileServiceProxy;
    private TfsConnection m_connection;
    public FileRepository(TfsConnection teamFoundationServer);
    public HttpWebRequest CreateDownloadRequest(Uri downloadUri, string downloadUrl, CredentialsType proxyCredentials, Boolean& isProxyUrl);
    public HttpWebRequest CreateDownloadRequest(string downloadUrl, CredentialsType proxyCredentials, Boolean& isProxyUrl);
    public FileRepositoryProperties QueryForRepositoryProperties();
}
public class Microsoft.TeamFoundation.Framework.Client.FileRepositoryProperties : object {
    private SigningInfo m_signingInfo;
    public SigningInfo SigningInfo { get; internal set; }
    public SigningInfo get_SigningInfo();
    internal void set_SigningInfo(SigningInfo value);
    [EditorBrowsableAttribute("1")]
public static FileRepositoryProperties FromXml(IServiceProvider serviceProvider, XmlReader reader);
    public virtual string ToString();
    [EditorBrowsableAttribute("1")]
public void ToXml(XmlWriter writer, string element);
    [EditorBrowsableAttribute("1")]
public static void ToXml(XmlWriter writer, string element, FileRepositoryProperties obj);
}
public class Microsoft.TeamFoundation.Framework.Client.FilteredIdentitiesList : object {
    private bool m_hasMoreItems;
    internal TeamFoundationIdentity[] m_items;
    private int m_startingIndex;
    private int m_totalItems;
    public bool HasMoreItems { get; public set; }
    public TeamFoundationIdentity[] Items { get; public set; }
    public int StartingIndex { get; public set; }
    public int TotalItems { get; public set; }
    public bool get_HasMoreItems();
    public void set_HasMoreItems(bool value);
    public TeamFoundationIdentity[] get_Items();
    public void set_Items(TeamFoundationIdentity[] value);
    public int get_StartingIndex();
    public void set_StartingIndex(int value);
    public int get_TotalItems();
    public void set_TotalItems(int value);
    [EditorBrowsableAttribute("1")]
public static FilteredIdentitiesList FromXml(IServiceProvider serviceProvider, XmlReader reader);
    public virtual string ToString();
    [EditorBrowsableAttribute("1")]
public void ToXml(XmlWriter writer, string element);
    [EditorBrowsableAttribute("1")]
public static void ToXml(XmlWriter writer, string element, FilteredIdentitiesList obj);
}
[EditorBrowsableAttribute("1")]
public class Microsoft.TeamFoundation.Framework.Client.FilteredIdentityService : object {
    private TfsConnection m_tfsConnection;
    public sealed virtual void Initialize(TfsConnection server);
    public IList`1<TeamFoundationIdentity> SearchForUsers(string searchTerm);
    private void MakeDisplayNamesUnique(List`1<TeamFoundationIdentity> identities);
    private void ProcessIdentities(FilteredIdentitiesList identityList);
}
public class Microsoft.TeamFoundation.Framework.Client.FindGroupNameDoesNotExistException : TeamFoundationIdentityServiceException {
    public FindGroupNameDoesNotExistException(string message);
    public FindGroupNameDoesNotExistException(string message, Exception ex);
    protected FindGroupNameDoesNotExistException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.TeamFoundation.Framework.Client.FindGroupSidDoesNotExistException : TeamFoundationIdentityServiceException {
    public FindGroupSidDoesNotExistException(string message);
    public FindGroupSidDoesNotExistException(string message, Exception ex);
    protected FindGroupSidDoesNotExistException(SerializationInfo info, StreamingContext context);
}
internal class Microsoft.TeamFoundation.Framework.Client.FrameworkClientConstants : object {
    internal static string ClientUploadChunkSize;
    internal static string ImpersonationContextDataSlotName;
    private static FrameworkClientConstants();
}
internal class Microsoft.TeamFoundation.Framework.Client.FrameworkRegistrationEntry : object {
    internal RegistrationArtifactType[] m_artifactTypes;
    internal RegistrationDatabase[] m_databases;
    internal RegistrationExtendedAttribute2[] m_registrationExtendedAttributes;
    internal RegistrationServiceInterface[] m_serviceInterfaces;
    private string m_type;
    public RegistrationArtifactType[] ArtifactTypes { get; public set; }
    public RegistrationDatabase[] Databases { get; public set; }
    public RegistrationExtendedAttribute2[] RegistrationExtendedAttributes { get; public set; }
    public RegistrationServiceInterface[] ServiceInterfaces { get; public set; }
    public string Type { get; public set; }
    public RegistrationArtifactType[] get_ArtifactTypes();
    public void set_ArtifactTypes(RegistrationArtifactType[] value);
    public RegistrationDatabase[] get_Databases();
    public void set_Databases(RegistrationDatabase[] value);
    public RegistrationExtendedAttribute2[] get_RegistrationExtendedAttributes();
    public void set_RegistrationExtendedAttributes(RegistrationExtendedAttribute2[] value);
    public RegistrationServiceInterface[] get_ServiceInterfaces();
    public void set_ServiceInterfaces(RegistrationServiceInterface[] value);
    public string get_Type();
    public void set_Type(string value);
    internal static FrameworkRegistrationEntry FromXml(IServiceProvider serviceProvider, XmlReader reader);
    public virtual string ToString();
    internal void ToXml(XmlWriter writer, string element);
    internal static void ToXml(XmlWriter writer, string element, FrameworkRegistrationEntry obj);
    internal static RegistrationEntry[] Convert(FrameworkRegistrationEntry[] registryEntries);
    internal RegistrationEntry ToRegistrationEntry();
}
internal class Microsoft.TeamFoundation.Framework.Client.FrameworkRegistrationXmlSerializer : object {
    internal static string DatabasesNode;
    internal static string DatabaseNode;
    internal static string PropertyName;
    internal static string PropertyDatabaseName;
    internal static string PropertyDatabaseCategory;
    internal static string PropertySQLServerName;
    internal static string PropertyConnectionString;
    internal static string PropertyExcludeFromBackup;
    public static void Serialize(FrameworkRegistrationEntry registrationEntry, XmlWriter xmlWriter);
    public static object Deserialize(XmlNode root, Type type);
    internal static string GetTerminalNodeValue(XmlNode node, string tag);
    internal static string GetTerminalNodeValue(XmlNode node, string tag, bool throwIfNotFound);
    private static void Serialize(RegistrationServiceInterface si, XmlWriter w);
    private static void Serialize(RegistrationDatabase db, XmlWriter w);
    private static void Serialize(RegistrationExtendedAttribute2 rea, XmlWriter w);
    private static void Serialize(OutboundLinkType forwardLinkType, XmlWriter w);
    private static void Serialize(RegistrationArtifactType at, XmlWriter w);
}
internal class Microsoft.TeamFoundation.Framework.Client.FrameworkSecurityNamespace : SecurityNamespace {
    private SecurityNamespaceDescription m_description;
    private SecurityWebService m_securityProxy;
    public SecurityNamespaceDescription Description { get; }
    internal FrameworkSecurityNamespace(TfsConnection server, SecurityNamespaceDescription description);
    public virtual SecurityNamespaceDescription get_Description();
    public virtual bool HasPermission(string token, IdentityDescriptor descriptor, int requestedPermissions, bool alwaysAllowAdministrators);
    public virtual Collection`1<bool> HasPermission(IEnumerable`1<string> tokens, IdentityDescriptor descriptor, int requestedPermissions, bool alwaysAllowAdministrators);
    public virtual Collection`1<bool> HasPermission(string token, IEnumerable`1<IdentityDescriptor> descriptors, int requestedPermissions, bool alwaysAllowAdministrators);
    public virtual Collection`1<bool> HasPermission(string token, IdentityDescriptor descriptor, IEnumerable`1<int> requestedPermissions, bool alwaysAllowAdministrators);
    public virtual bool HasWritePermission(string token, int permissionsToChange);
    public virtual Collection`1<bool> HasWritePermission(string token, IEnumerable`1<int> permissionsToChange);
    public virtual bool RemoveAccessControlLists(string token, bool recurse);
    public virtual bool RemoveAccessControlLists(IEnumerable`1<string> tokens, bool recurse);
    public virtual bool RemoveAccessControlEntries(string token, IEnumerable`1<IdentityDescriptor> descriptors);
    public virtual bool RemoveAccessControlEntry(string token, IdentityDescriptor descriptor);
    public virtual AccessControlEntry RemovePermissions(string token, IdentityDescriptor descriptor, int permissionsToRemove);
    public virtual AccessControlEntry SetPermissions(string token, IdentityDescriptor descriptor, int allow, int deny, bool merge);
    public virtual AccessControlEntry SetAccessControlEntry(string token, AccessControlEntry accessControlEntry, bool merge);
    public virtual Collection`1<AccessControlEntry> SetAccessControlEntries(string token, IEnumerable`1<AccessControlEntry> accessControlEntries, bool merge);
    public virtual void SetAccessControlLists(IEnumerable`1<AccessControlList> accessControlLists);
    public virtual void SetAccessControlList(AccessControlList accessControlList);
    public virtual Collection`1<AccessControlList> QueryAccessControlLists(string token, IEnumerable`1<IdentityDescriptor> descriptors, bool includeExtendedInfo, bool recurse);
    public virtual AccessControlList QueryAccessControlList(string token, IEnumerable`1<IdentityDescriptor> descriptors, bool includeExtendedInfo);
    public virtual int QueryEffectivePermissions(string token, IdentityDescriptor descriptor);
    public virtual void SetInheritFlag(string token, bool inherit);
}
internal class Microsoft.TeamFoundation.Framework.Client.FrameworkServerDataProvider : object {
    private TfsConnection m_parent;
    private Uri m_baseUri;
    private string m_fullyQualifiedUrl;
    private TeamFoundationIdentity m_authenticatedIdentity;
    private TeamFoundationIdentity m_authorizedIdentity;
    private Guid m_instanceId;
    private string m_instanceCacheDirectory;
    private string m_instanceVolatileCacheDirectory;
    private string m_userCacheDirectory;
    private Guid m_catalogResourceId;
    private ServerCapabilities m_serverCapabilities;
    private string m_serverVersion;
    private Lazy`1<LocationWebService> m_locationServicePortal;
    private ConnectOptions m_validConnectionData;
    private bool m_connectionMade;
    private LocationCacheManager m_locationDataCacheManager;
    private object m_lockObject;
    private static ServiceTypeFilter[] s_allServiceTypesFilter;
    public bool LocalCacheAvailable { get; }
    public Guid InstanceId { get; }
    public Guid CachedInstanceId { get; }
    public Guid CatalogResourceId { get; }
    public ServerCapabilities ServerCapabilities { get; }
    public string ServerVersion { get; }
    public string ClientCacheDirectoryForInstance { get; }
    public string ClientVolatileCacheDirectoryForInstance { get; }
    public string ClientCacheDirectoryForUser { get; }
    public TeamFoundationIdentity AuthorizedIdentity { get; }
    public TeamFoundationIdentity AuthenticatedIdentity { get; }
    public bool HasAuthenticated { get; }
    public AccessMapping DefaultAccessMapping { get; }
    public AccessMapping ClientAccessMapping { get; }
    public IEnumerable`1<AccessMapping> ConfiguredAccessMappings { get; }
    public FrameworkServerDataProvider(TfsConnection server, string fullyQualifiedUrl);
    private static FrameworkServerDataProvider();
    public bool get_LocalCacheAvailable();
    public sealed virtual Guid get_InstanceId();
    public sealed virtual Guid get_CachedInstanceId();
    public sealed virtual Guid get_CatalogResourceId();
    public sealed virtual ServerCapabilities get_ServerCapabilities();
    public sealed virtual string get_ServerVersion();
    public sealed virtual string get_ClientCacheDirectoryForInstance();
    public sealed virtual string get_ClientVolatileCacheDirectoryForInstance();
    public sealed virtual string get_ClientCacheDirectoryForUser();
    public sealed virtual TeamFoundationIdentity get_AuthorizedIdentity();
    public sealed virtual TeamFoundationIdentity get_AuthenticatedIdentity();
    public sealed virtual bool get_HasAuthenticated();
    public sealed virtual void EnsureAuthenticated();
    public sealed virtual void Authenticate();
    public sealed virtual AccessMapping get_DefaultAccessMapping();
    public sealed virtual AccessMapping get_ClientAccessMapping();
    public sealed virtual IEnumerable`1<AccessMapping> get_ConfiguredAccessMappings();
    public sealed virtual AccessMapping GetAccessMapping(string moniker);
    public sealed virtual void SaveServiceDefinition(ServiceDefinition serviceDefinition);
    public sealed virtual void SaveServiceDefinitions(IEnumerable`1<ServiceDefinition> serviceDefinitions);
    public sealed virtual void RemoveServiceDefinition(string serviceType, Guid serviceIdentifier);
    public sealed virtual void RemoveServiceDefinition(ServiceDefinition serviceDefinition);
    public sealed virtual void RemoveServiceDefinitions(IEnumerable`1<ServiceDefinition> serviceDefinitions);
    public sealed virtual string FindServerLocation(Guid serverGuid);
    public sealed virtual string LocationForAccessMapping(string serviceType, Guid serviceIdentifier, AccessMapping accessMapping);
    public sealed virtual string LocationForAccessMapping(ServiceDefinition serviceDefinition, AccessMapping accessMapping);
    private sealed virtual override string Microsoft.TeamFoundation.Framework.Client.ILocationService.LocationForCurrentConnection(string serviceType, Guid serviceIdentifier);
    public sealed virtual string LocationForCurrentConnection(string serviceType, Guid serviceIdentifier, bool ignoreCacheExpiration);
    public sealed virtual string LocationForCurrentConnection(ServiceDefinition serviceDefinition);
    public sealed virtual IEnumerable`1<ServiceDefinition> FindServiceDefinitions(string serviceType);
    public sealed virtual IEnumerable`1<ServiceDefinition> FindServiceDefinitionsByToolType(string toolId);
    private sealed virtual override ServiceDefinition Microsoft.TeamFoundation.Framework.Client.ILocationService.FindServiceDefinition(string serviceType, Guid serviceIdentifier);
    public ServiceDefinition FindServiceDefinition(string serviceType, Guid serviceIdentifier, bool ignoreCacheExpiration);
    public sealed virtual AccessMapping ConfigureAccessMapping(string moniker, string displayName, string accessPoint, bool makeDefault);
    public sealed virtual void SetDefaultAccessMapping(AccessMapping accessMapping);
    public sealed virtual void RemoveAccessMapping(string moniker);
    public sealed virtual void ReactToPossibleServerUpdate(int serverLastChangeId);
    private void CheckForServerUpdates();
    private void EnsureConnected(ConnectOptions optionsNeeded);
    private bool NeedToConnect(ConnectOptions optionsNeeded);
    public sealed virtual void Connect(ConnectOptions connectOptions);
    public sealed virtual void Disconnect();
    [CompilerGeneratedAttribute]
private LocationWebService <.ctor>b__0_0();
    [CompilerGeneratedAttribute]
private LocationWebService <Disconnect>b__57_0();
}
internal class Microsoft.TeamFoundation.Framework.Client.FrameworkTemplateHeader : object {
    private string m_description;
    private string m_metadata;
    private string m_name;
    private int m_rank;
    private string m_state;
    private int m_templateId;
    public string Description { get; public set; }
    public string Metadata { get; public set; }
    public string Name { get; public set; }
    public int Rank { get; public set; }
    public string State { get; public set; }
    public int TemplateId { get; public set; }
    public string get_Description();
    public void set_Description(string value);
    public string get_Metadata();
    public void set_Metadata(string value);
    public string get_Name();
    public void set_Name(string value);
    public int get_Rank();
    public void set_Rank(int value);
    public string get_State();
    public void set_State(string value);
    public int get_TemplateId();
    public void set_TemplateId(int value);
    internal static FrameworkTemplateHeader FromXml(IServiceProvider serviceProvider, XmlReader reader);
    public virtual string ToString();
    internal void ToXml(XmlWriter writer, string element);
    internal static void ToXml(XmlWriter writer, string element, FrameworkTemplateHeader obj);
}
internal class Microsoft.TeamFoundation.Framework.Client.FrameworkTraceKeywords : TraceKeywords {
    public static string TokenProvider;
    private static FrameworkTraceKeywords();
}
internal class Microsoft.TeamFoundation.Framework.Client.FrameworkTraceKeywordSets : TraceKeywordSets {
    public static String[] TokenProvider;
    private static FrameworkTraceKeywordSets();
}
public class Microsoft.TeamFoundation.Framework.Client.GroupCreationException : TeamFoundationIdentityServiceException {
    public GroupCreationException(string message);
    public GroupCreationException(string message, Exception ex);
    protected GroupCreationException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.TeamFoundation.Framework.Client.GroupNameNotRecognizedException : TeamFoundationIdentityServiceException {
    public GroupNameNotRecognizedException(string message);
    public GroupNameNotRecognizedException(string message, Exception ex);
    protected GroupNameNotRecognizedException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.TeamFoundation.Framework.Client.GroupRenameException : TeamFoundationIdentityServiceException {
    public GroupRenameException(string message);
    public GroupRenameException(string message, Exception ex);
    protected GroupRenameException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.TeamFoundation.Framework.Client.GroupScopeCreationException : TeamFoundationIdentityServiceException {
    public GroupScopeCreationException(string message);
    public GroupScopeCreationException(string message, Exception ex);
    protected GroupScopeCreationException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.TeamFoundation.Framework.Client.GroupScopeDoesNotExistException : TeamFoundationIdentityServiceException {
    public GroupScopeDoesNotExistException(string message);
    public GroupScopeDoesNotExistException(string message, Exception ex);
    protected GroupScopeDoesNotExistException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.TeamFoundation.Framework.Client.GroupSecuritySubsystemServiceException : TeamFoundationServiceException {
    public GroupSecuritySubsystemServiceException(string message);
    public GroupSecuritySubsystemServiceException(string message, Exception ex);
    protected GroupSecuritySubsystemServiceException(SerializationInfo info, StreamingContext context);
}
public static class Microsoft.TeamFoundation.Framework.Client.GroupWellKnownDescriptors : object {
    public static IdentityDescriptor LicenseesGroup;
    public static IdentityDescriptor EveryoneGroup;
    public static IdentityDescriptor NamespaceAdministratorsGroup;
    public static IdentityDescriptor ServiceUsersGroup;
    private static GroupWellKnownDescriptors();
}
internal static class Microsoft.TeamFoundation.Framework.Client.Helper : object {
    private static AccessControlEntryDetails[] m_zeroLengthArrayOfAccessControlEntryDetails;
    private static AccessControlListDetails[] m_zeroLengthArrayOfAccessControlListDetails;
    private static AccessMapping[] m_zeroLengthArrayOfAccessMapping;
    private static ActionDefinition[] m_zeroLengthArrayOfActionDefinition;
    private static TeamFoundationIdentity[][] m_zeroLengthArrayOfArrayOfTeamFoundationIdentity;
    private static ArtifactPropertyValue[] m_zeroLengthArrayOfArtifactPropertyValue;
    private static ArtifactSpec[] m_zeroLengthArrayOfArtifactSpec;
    private static Boolean[] m_zeroLengthArrayOfBoolean;
    private static CatalogNode[] m_zeroLengthArrayOfCatalogNode;
    private static CatalogNodeDependency[] m_zeroLengthArrayOfCatalogNodeDependency;
    private static CatalogResource[] m_zeroLengthArrayOfCatalogResource;
    private static CatalogResourceType[] m_zeroLengthArrayOfCatalogResourceType;
    private static CatalogServiceReference[] m_zeroLengthArrayOfCatalogServiceReference;
    private static ConnectedServiceMetadata[] m_zeroLengthArrayOfConnectedServiceMetadata;
    private static FrameworkRegistrationEntry[] m_zeroLengthArrayOfFrameworkRegistrationEntry;
    private static FrameworkTemplateHeader[] m_zeroLengthArrayOfFrameworkTemplateHeader;
    private static Guid[] m_zeroLengthArrayOfGuid;
    private static IdentityDescriptor[] m_zeroLengthArrayOfIdentityDescriptor;
    private static KeyValueOfStringString[] m_zeroLengthArrayOfKeyValueOfStringString;
    private static LocationMapping[] m_zeroLengthArrayOfLocationMapping;
    private static OutboundLinkType[] m_zeroLengthArrayOfOutboundLinkType;
    private static PropertyValue[] m_zeroLengthArrayOfPropertyValue;
    private static RegistrationArtifactType[] m_zeroLengthArrayOfRegistrationArtifactType;
    private static RegistrationDatabase[] m_zeroLengthArrayOfRegistrationDatabase;
    private static RegistrationExtendedAttribute2[] m_zeroLengthArrayOfRegistrationExtendedAttribute2;
    private static RegistrationServiceInterface[] m_zeroLengthArrayOfRegistrationServiceInterface;
    private static RegistryAuditEntry[] m_zeroLengthArrayOfRegistryAuditEntry;
    private static RegistryEntry[] m_zeroLengthArrayOfRegistryEntry;
    private static SecurityNamespaceDescription[] m_zeroLengthArrayOfSecurityNamespaceDescription;
    private static ServiceDefinition[] m_zeroLengthArrayOfServiceDefinition;
    private static ServiceIdentity[] m_zeroLengthArrayOfServiceIdentity;
    private static ServiceTypeFilter[] m_zeroLengthArrayOfServiceTypeFilter;
    private static ServicingExecutionHandlerData[] m_zeroLengthArrayOfServicingExecutionHandlerData;
    private static ServicingJobDetail[] m_zeroLengthArrayOfServicingJobDetail;
    private static ServicingStep[] m_zeroLengthArrayOfServicingStep;
    private static ServicingStepDetail[] m_zeroLengthArrayOfServicingStepDetail;
    private static ServicingStepGroup[] m_zeroLengthArrayOfServicingStepGroup;
    private static String[] m_zeroLengthArrayOfString;
    private static StrongBoxItemInfo[] m_zeroLengthArrayOfStrongBoxItemInfo;
    private static Subscription[] m_zeroLengthArrayOfSubscription;
    private static TeamFoundationIdentity[] m_zeroLengthArrayOfTeamFoundationIdentity;
    private static TeamFoundationJobDefinition[] m_zeroLengthArrayOfTeamFoundationJobDefinition;
    private static TeamFoundationJobHistoryEntry[] m_zeroLengthArrayOfTeamFoundationJobHistoryEntry;
    private static TeamFoundationJobSchedule[] m_zeroLengthArrayOfTeamFoundationJobSchedule;
    private static TeamFoundationRequestInformation[] m_zeroLengthArrayOfTeamFoundationRequestInformation;
    private static TeamFoundationServiceHostActivity[] m_zeroLengthArrayOfTeamFoundationServiceHostActivity;
    private static TeamProjectCollectionProperties[] m_zeroLengthArrayOfTeamProjectCollectionProperties;
    private static AccessControlEntryDetails[] m_zeroLengthEnumerableOfAccessControlEntryDetails;
    private static AccessControlListDetails[] m_zeroLengthEnumerableOfAccessControlListDetails;
    private static Guid[] m_zeroLengthEnumerableOfGuid;
    private static IdentityDescriptor[] m_zeroLengthEnumerableOfIdentityDescriptor;
    private static Int32[] m_zeroLengthEnumerableOfInt32;
    private static RegistryEntry[] m_zeroLengthEnumerableOfRegistryEntry;
    private static ServicingStepGroup[] m_zeroLengthEnumerableOfServicingStepGroup;
    private static String[] m_zeroLengthEnumerableOfString;
    private static TeamFoundationJobDefinition[] m_zeroLengthEnumerableOfTeamFoundationJobDefinition;
    internal static AccessControlEntryDetails[] ZeroLengthArrayOfAccessControlEntryDetails { get; }
    internal static AccessControlListDetails[] ZeroLengthArrayOfAccessControlListDetails { get; }
    internal static AccessMapping[] ZeroLengthArrayOfAccessMapping { get; }
    internal static ActionDefinition[] ZeroLengthArrayOfActionDefinition { get; }
    internal static TeamFoundationIdentity[][] ZeroLengthArrayOfArrayOfTeamFoundationIdentity { get; }
    internal static ArtifactPropertyValue[] ZeroLengthArrayOfArtifactPropertyValue { get; }
    internal static ArtifactSpec[] ZeroLengthArrayOfArtifactSpec { get; }
    internal static Boolean[] ZeroLengthArrayOfBoolean { get; }
    internal static CatalogNode[] ZeroLengthArrayOfCatalogNode { get; }
    internal static CatalogNodeDependency[] ZeroLengthArrayOfCatalogNodeDependency { get; }
    internal static CatalogResource[] ZeroLengthArrayOfCatalogResource { get; }
    internal static CatalogResourceType[] ZeroLengthArrayOfCatalogResourceType { get; }
    internal static CatalogServiceReference[] ZeroLengthArrayOfCatalogServiceReference { get; }
    internal static ConnectedServiceMetadata[] ZeroLengthArrayOfConnectedServiceMetadata { get; }
    internal static FrameworkRegistrationEntry[] ZeroLengthArrayOfFrameworkRegistrationEntry { get; }
    internal static FrameworkTemplateHeader[] ZeroLengthArrayOfFrameworkTemplateHeader { get; }
    internal static Guid[] ZeroLengthArrayOfGuid { get; }
    internal static IdentityDescriptor[] ZeroLengthArrayOfIdentityDescriptor { get; }
    internal static KeyValueOfStringString[] ZeroLengthArrayOfKeyValueOfStringString { get; }
    internal static LocationMapping[] ZeroLengthArrayOfLocationMapping { get; }
    internal static OutboundLinkType[] ZeroLengthArrayOfOutboundLinkType { get; }
    internal static PropertyValue[] ZeroLengthArrayOfPropertyValue { get; }
    internal static RegistrationArtifactType[] ZeroLengthArrayOfRegistrationArtifactType { get; }
    internal static RegistrationDatabase[] ZeroLengthArrayOfRegistrationDatabase { get; }
    internal static RegistrationExtendedAttribute2[] ZeroLengthArrayOfRegistrationExtendedAttribute2 { get; }
    internal static RegistrationServiceInterface[] ZeroLengthArrayOfRegistrationServiceInterface { get; }
    internal static RegistryAuditEntry[] ZeroLengthArrayOfRegistryAuditEntry { get; }
    internal static RegistryEntry[] ZeroLengthArrayOfRegistryEntry { get; }
    internal static SecurityNamespaceDescription[] ZeroLengthArrayOfSecurityNamespaceDescription { get; }
    internal static ServiceDefinition[] ZeroLengthArrayOfServiceDefinition { get; }
    internal static ServiceIdentity[] ZeroLengthArrayOfServiceIdentity { get; }
    internal static ServiceTypeFilter[] ZeroLengthArrayOfServiceTypeFilter { get; }
    internal static ServicingExecutionHandlerData[] ZeroLengthArrayOfServicingExecutionHandlerData { get; }
    internal static ServicingJobDetail[] ZeroLengthArrayOfServicingJobDetail { get; }
    internal static ServicingStep[] ZeroLengthArrayOfServicingStep { get; }
    internal static ServicingStepDetail[] ZeroLengthArrayOfServicingStepDetail { get; }
    internal static ServicingStepGroup[] ZeroLengthArrayOfServicingStepGroup { get; }
    internal static String[] ZeroLengthArrayOfString { get; }
    internal static StrongBoxItemInfo[] ZeroLengthArrayOfStrongBoxItemInfo { get; }
    internal static Subscription[] ZeroLengthArrayOfSubscription { get; }
    internal static TeamFoundationIdentity[] ZeroLengthArrayOfTeamFoundationIdentity { get; }
    internal static TeamFoundationJobDefinition[] ZeroLengthArrayOfTeamFoundationJobDefinition { get; }
    internal static TeamFoundationJobHistoryEntry[] ZeroLengthArrayOfTeamFoundationJobHistoryEntry { get; }
    internal static TeamFoundationJobSchedule[] ZeroLengthArrayOfTeamFoundationJobSchedule { get; }
    internal static TeamFoundationRequestInformation[] ZeroLengthArrayOfTeamFoundationRequestInformation { get; }
    internal static TeamFoundationServiceHostActivity[] ZeroLengthArrayOfTeamFoundationServiceHostActivity { get; }
    internal static TeamProjectCollectionProperties[] ZeroLengthArrayOfTeamProjectCollectionProperties { get; }
    internal static IEnumerable`1<AccessControlEntryDetails> ZeroLengthEnumerableOfAccessControlEntryDetails { get; }
    internal static IEnumerable`1<AccessControlListDetails> ZeroLengthEnumerableOfAccessControlListDetails { get; }
    internal static IEnumerable`1<Guid> ZeroLengthEnumerableOfGuid { get; }
    internal static IEnumerable`1<IdentityDescriptor> ZeroLengthEnumerableOfIdentityDescriptor { get; }
    internal static IEnumerable`1<int> ZeroLengthEnumerableOfInt32 { get; }
    internal static IEnumerable`1<RegistryEntry> ZeroLengthEnumerableOfRegistryEntry { get; }
    internal static IEnumerable`1<ServicingStepGroup> ZeroLengthEnumerableOfServicingStepGroup { get; }
    internal static IEnumerable`1<string> ZeroLengthEnumerableOfString { get; }
    internal static IEnumerable`1<TeamFoundationJobDefinition> ZeroLengthEnumerableOfTeamFoundationJobDefinition { get; }
    internal static AccessControlEntryDetails[] get_ZeroLengthArrayOfAccessControlEntryDetails();
    internal static AccessControlListDetails[] get_ZeroLengthArrayOfAccessControlListDetails();
    internal static AccessMapping[] get_ZeroLengthArrayOfAccessMapping();
    internal static ActionDefinition[] get_ZeroLengthArrayOfActionDefinition();
    internal static TeamFoundationIdentity[][] get_ZeroLengthArrayOfArrayOfTeamFoundationIdentity();
    internal static ArtifactPropertyValue[] get_ZeroLengthArrayOfArtifactPropertyValue();
    internal static ArtifactSpec[] get_ZeroLengthArrayOfArtifactSpec();
    internal static Boolean[] get_ZeroLengthArrayOfBoolean();
    internal static CatalogNode[] get_ZeroLengthArrayOfCatalogNode();
    internal static CatalogNodeDependency[] get_ZeroLengthArrayOfCatalogNodeDependency();
    internal static CatalogResource[] get_ZeroLengthArrayOfCatalogResource();
    internal static CatalogResourceType[] get_ZeroLengthArrayOfCatalogResourceType();
    internal static CatalogServiceReference[] get_ZeroLengthArrayOfCatalogServiceReference();
    internal static ConnectedServiceMetadata[] get_ZeroLengthArrayOfConnectedServiceMetadata();
    internal static FrameworkRegistrationEntry[] get_ZeroLengthArrayOfFrameworkRegistrationEntry();
    internal static FrameworkTemplateHeader[] get_ZeroLengthArrayOfFrameworkTemplateHeader();
    internal static Guid[] get_ZeroLengthArrayOfGuid();
    internal static IdentityDescriptor[] get_ZeroLengthArrayOfIdentityDescriptor();
    internal static KeyValueOfStringString[] get_ZeroLengthArrayOfKeyValueOfStringString();
    internal static LocationMapping[] get_ZeroLengthArrayOfLocationMapping();
    internal static OutboundLinkType[] get_ZeroLengthArrayOfOutboundLinkType();
    internal static PropertyValue[] get_ZeroLengthArrayOfPropertyValue();
    internal static RegistrationArtifactType[] get_ZeroLengthArrayOfRegistrationArtifactType();
    internal static RegistrationDatabase[] get_ZeroLengthArrayOfRegistrationDatabase();
    internal static RegistrationExtendedAttribute2[] get_ZeroLengthArrayOfRegistrationExtendedAttribute2();
    internal static RegistrationServiceInterface[] get_ZeroLengthArrayOfRegistrationServiceInterface();
    internal static RegistryAuditEntry[] get_ZeroLengthArrayOfRegistryAuditEntry();
    internal static RegistryEntry[] get_ZeroLengthArrayOfRegistryEntry();
    internal static SecurityNamespaceDescription[] get_ZeroLengthArrayOfSecurityNamespaceDescription();
    internal static ServiceDefinition[] get_ZeroLengthArrayOfServiceDefinition();
    internal static ServiceIdentity[] get_ZeroLengthArrayOfServiceIdentity();
    internal static ServiceTypeFilter[] get_ZeroLengthArrayOfServiceTypeFilter();
    internal static ServicingExecutionHandlerData[] get_ZeroLengthArrayOfServicingExecutionHandlerData();
    internal static ServicingJobDetail[] get_ZeroLengthArrayOfServicingJobDetail();
    internal static ServicingStep[] get_ZeroLengthArrayOfServicingStep();
    internal static ServicingStepDetail[] get_ZeroLengthArrayOfServicingStepDetail();
    internal static ServicingStepGroup[] get_ZeroLengthArrayOfServicingStepGroup();
    internal static String[] get_ZeroLengthArrayOfString();
    internal static StrongBoxItemInfo[] get_ZeroLengthArrayOfStrongBoxItemInfo();
    internal static Subscription[] get_ZeroLengthArrayOfSubscription();
    internal static TeamFoundationIdentity[] get_ZeroLengthArrayOfTeamFoundationIdentity();
    internal static TeamFoundationJobDefinition[] get_ZeroLengthArrayOfTeamFoundationJobDefinition();
    internal static TeamFoundationJobHistoryEntry[] get_ZeroLengthArrayOfTeamFoundationJobHistoryEntry();
    internal static TeamFoundationJobSchedule[] get_ZeroLengthArrayOfTeamFoundationJobSchedule();
    internal static TeamFoundationRequestInformation[] get_ZeroLengthArrayOfTeamFoundationRequestInformation();
    internal static TeamFoundationServiceHostActivity[] get_ZeroLengthArrayOfTeamFoundationServiceHostActivity();
    internal static TeamProjectCollectionProperties[] get_ZeroLengthArrayOfTeamProjectCollectionProperties();
    internal static IEnumerable`1<AccessControlEntryDetails> get_ZeroLengthEnumerableOfAccessControlEntryDetails();
    internal static IEnumerable`1<AccessControlListDetails> get_ZeroLengthEnumerableOfAccessControlListDetails();
    internal static IEnumerable`1<Guid> get_ZeroLengthEnumerableOfGuid();
    internal static IEnumerable`1<IdentityDescriptor> get_ZeroLengthEnumerableOfIdentityDescriptor();
    internal static IEnumerable`1<int> get_ZeroLengthEnumerableOfInt32();
    internal static IEnumerable`1<RegistryEntry> get_ZeroLengthEnumerableOfRegistryEntry();
    internal static IEnumerable`1<ServicingStepGroup> get_ZeroLengthEnumerableOfServicingStepGroup();
    internal static IEnumerable`1<string> get_ZeroLengthEnumerableOfString();
    internal static IEnumerable`1<TeamFoundationJobDefinition> get_ZeroLengthEnumerableOfTeamFoundationJobDefinition();
    internal static AccessControlEntryDetails[] ArrayOfAccessControlEntryDetailsFromXml(IServiceProvider serviceProvider, XmlReader reader, bool inline);
    internal static AccessControlListDetails[] ArrayOfAccessControlListDetailsFromXml(IServiceProvider serviceProvider, XmlReader reader, bool inline);
    internal static AccessMapping[] ArrayOfAccessMappingFromXml(IServiceProvider serviceProvider, XmlReader reader, bool inline);
    internal static ActionDefinition[] ArrayOfActionDefinitionFromXml(IServiceProvider serviceProvider, XmlReader reader, bool inline);
    internal static TeamFoundationIdentity[][] ArrayOfArrayOfTeamFoundationIdentityFromXml(IServiceProvider serviceProvider, XmlReader reader, bool inline);
    internal static ArtifactPropertyValue[] ArrayOfArtifactPropertyValueFromXml(IServiceProvider serviceProvider, XmlReader reader, bool inline);
    internal static ArtifactSpec[] ArrayOfArtifactSpecFromXml(IServiceProvider serviceProvider, XmlReader reader, bool inline);
    internal static Boolean[] ArrayOfBooleanFromXml(XmlReader reader, bool inline);
    internal static CatalogNodeDependency[] ArrayOfCatalogNodeDependencyFromXml(IServiceProvider serviceProvider, XmlReader reader, bool inline);
    internal static CatalogNode[] ArrayOfCatalogNodeFromXml(IServiceProvider serviceProvider, XmlReader reader, bool inline);
    internal static CatalogResource[] ArrayOfCatalogResourceFromXml(IServiceProvider serviceProvider, XmlReader reader, bool inline);
    internal static CatalogResourceType[] ArrayOfCatalogResourceTypeFromXml(IServiceProvider serviceProvider, XmlReader reader, bool inline);
    internal static CatalogServiceReference[] ArrayOfCatalogServiceReferenceFromXml(IServiceProvider serviceProvider, XmlReader reader, bool inline);
    internal static ConnectedServiceMetadata[] ArrayOfConnectedServiceMetadataFromXml(IServiceProvider serviceProvider, XmlReader reader, bool inline);
    internal static FrameworkRegistrationEntry[] ArrayOfFrameworkRegistrationEntryFromXml(IServiceProvider serviceProvider, XmlReader reader, bool inline);
    internal static FrameworkTemplateHeader[] ArrayOfFrameworkTemplateHeaderFromXml(IServiceProvider serviceProvider, XmlReader reader, bool inline);
    internal static Guid[] ArrayOfGuidFromXml(XmlReader reader, bool inline);
    internal static IdentityDescriptor[] ArrayOfIdentityDescriptorFromXml(IServiceProvider serviceProvider, XmlReader reader, bool inline);
    internal static KeyValueOfStringString[] ArrayOfKeyValueOfStringStringFromXml(IServiceProvider serviceProvider, XmlReader reader, bool inline);
    internal static LocationMapping[] ArrayOfLocationMappingFromXml(IServiceProvider serviceProvider, XmlReader reader, bool inline);
    internal static OutboundLinkType[] ArrayOfOutboundLinkTypeFromXml(IServiceProvider serviceProvider, XmlReader reader, bool inline);
    internal static PropertyValue[] ArrayOfPropertyValueFromXml(IServiceProvider serviceProvider, XmlReader reader, bool inline);
    internal static RegistrationArtifactType[] ArrayOfRegistrationArtifactTypeFromXml(IServiceProvider serviceProvider, XmlReader reader, bool inline);
    internal static RegistrationDatabase[] ArrayOfRegistrationDatabaseFromXml(IServiceProvider serviceProvider, XmlReader reader, bool inline);
    internal static RegistrationExtendedAttribute2[] ArrayOfRegistrationExtendedAttribute2FromXml(IServiceProvider serviceProvider, XmlReader reader, bool inline);
    internal static RegistrationServiceInterface[] ArrayOfRegistrationServiceInterfaceFromXml(IServiceProvider serviceProvider, XmlReader reader, bool inline);
    internal static RegistryAuditEntry[] ArrayOfRegistryAuditEntryFromXml(IServiceProvider serviceProvider, XmlReader reader, bool inline);
    internal static RegistryEntry[] ArrayOfRegistryEntryFromXml(IServiceProvider serviceProvider, XmlReader reader, bool inline);
    internal static SecurityNamespaceDescription[] ArrayOfSecurityNamespaceDescriptionFromXml(IServiceProvider serviceProvider, XmlReader reader, bool inline);
    internal static ServiceDefinition[] ArrayOfServiceDefinitionFromXml(IServiceProvider serviceProvider, XmlReader reader, bool inline);
    internal static ServiceIdentity[] ArrayOfServiceIdentityFromXml(IServiceProvider serviceProvider, XmlReader reader, bool inline);
    internal static ServiceTypeFilter[] ArrayOfServiceTypeFilterFromXml(IServiceProvider serviceProvider, XmlReader reader, bool inline);
    internal static ServicingExecutionHandlerData[] ArrayOfServicingExecutionHandlerDataFromXml(IServiceProvider serviceProvider, XmlReader reader, bool inline);
    internal static ServicingJobDetail[] ArrayOfServicingJobDetailFromXml(IServiceProvider serviceProvider, XmlReader reader, bool inline);
    internal static ServicingStepDetail[] ArrayOfServicingStepDetailFromXml(IServiceProvider serviceProvider, XmlReader reader, bool inline);
    internal static ServicingStep[] ArrayOfServicingStepFromXml(IServiceProvider serviceProvider, XmlReader reader, bool inline);
    internal static ServicingStepGroup[] ArrayOfServicingStepGroupFromXml(IServiceProvider serviceProvider, XmlReader reader, bool inline);
    internal static String[] ArrayOfStringFromXml(XmlReader reader, bool inline);
    internal static StrongBoxItemInfo[] ArrayOfStrongBoxItemInfoFromXml(IServiceProvider serviceProvider, XmlReader reader, bool inline);
    internal static Subscription[] ArrayOfSubscriptionFromXml(IServiceProvider serviceProvider, XmlReader reader, bool inline);
    internal static TeamFoundationIdentity[] ArrayOfTeamFoundationIdentityFromXml(IServiceProvider serviceProvider, XmlReader reader, bool inline);
    internal static TeamFoundationIdentity[] ArrayOfTeamFoundationIdentityFromXml(IServiceProvider serviceProvider, XmlReader reader);
    internal static TeamFoundationJobDefinition[] ArrayOfTeamFoundationJobDefinitionFromXml(IServiceProvider serviceProvider, XmlReader reader, bool inline);
    internal static TeamFoundationJobHistoryEntry[] ArrayOfTeamFoundationJobHistoryEntryFromXml(IServiceProvider serviceProvider, XmlReader reader, bool inline);
    internal static TeamFoundationJobSchedule[] ArrayOfTeamFoundationJobScheduleFromXml(IServiceProvider serviceProvider, XmlReader reader, bool inline);
    internal static TeamFoundationRequestInformation[] ArrayOfTeamFoundationRequestInformationFromXml(IServiceProvider serviceProvider, XmlReader reader, bool inline);
    internal static TeamFoundationServiceHostActivity[] ArrayOfTeamFoundationServiceHostActivityFromXml(IServiceProvider serviceProvider, XmlReader reader, bool inline);
    internal static TeamProjectCollectionProperties[] ArrayOfTeamProjectCollectionPropertiesFromXml(IServiceProvider serviceProvider, XmlReader reader, bool inline);
    internal static string ArrayToString(T[] array);
    internal static IEnumerable`1<AccessControlEntryDetails> EnumerableOfAccessControlEntryDetailsFromXml(IServiceProvider serviceProvider, XmlReader reader, bool inline);
    internal static IEnumerable`1<AccessControlListDetails> EnumerableOfAccessControlListDetailsFromXml(IServiceProvider serviceProvider, XmlReader reader, bool inline);
    internal static IEnumerable`1<Guid> EnumerableOfGuidFromXml(XmlReader reader, bool inline);
    internal static IEnumerable`1<IdentityDescriptor> EnumerableOfIdentityDescriptorFromXml(IServiceProvider serviceProvider, XmlReader reader, bool inline);
    internal static IEnumerable`1<int> EnumerableOfInt32FromXml(XmlReader reader, bool inline);
    internal static IEnumerable`1<RegistryEntry> EnumerableOfRegistryEntryFromXml(IServiceProvider serviceProvider, XmlReader reader, bool inline);
    internal static IEnumerable`1<ServicingStepGroup> EnumerableOfServicingStepGroupFromXml(IServiceProvider serviceProvider, XmlReader reader, bool inline);
    internal static IEnumerable`1<string> EnumerableOfStringFromXml(XmlReader reader, bool inline);
    internal static IEnumerable`1<TeamFoundationJobDefinition> EnumerableOfTeamFoundationJobDefinitionFromXml(IServiceProvider serviceProvider, XmlReader reader, bool inline);
    internal static void StringToXmlElement(XmlWriter writer, string element, string str);
    internal static void ToXml(XmlWriter writer, string arrayName, AccessControlEntryDetails[] array);
    internal static void ToXml(XmlWriter writer, string arrayName, AccessControlEntryDetails[] array, bool inline, bool allowEmptyArrays);
    internal static void ToXml(XmlWriter writer, string arrayName, AccessControlListDetails[] array);
    internal static void ToXml(XmlWriter writer, string arrayName, AccessControlListDetails[] array, bool inline, bool allowEmptyArrays);
    internal static void ToXml(XmlWriter writer, string arrayName, AccessMapping[] array);
    internal static void ToXml(XmlWriter writer, string arrayName, AccessMapping[] array, bool inline, bool allowEmptyArrays);
    internal static void ToXml(XmlWriter writer, string arrayName, ActionDefinition[] array);
    internal static void ToXml(XmlWriter writer, string arrayName, ActionDefinition[] array, bool inline, bool allowEmptyArrays);
    internal static void ToXml(XmlWriter writer, string arrayName, ArtifactPropertyValue[] array);
    internal static void ToXml(XmlWriter writer, string arrayName, ArtifactPropertyValue[] array, bool inline, bool allowEmptyArrays);
    internal static void ToXml(XmlWriter writer, string arrayName, ArtifactSpec[] array);
    internal static void ToXml(XmlWriter writer, string arrayName, ArtifactSpec[] array, bool inline, bool allowEmptyArrays);
    internal static void ToXml(XmlWriter writer, string arrayName, Boolean[] array);
    internal static void ToXml(XmlWriter writer, string arrayName, Boolean[] array, bool inline, bool allowEmptyArrays);
    internal static void ToXml(XmlWriter writer, string arrayName, CatalogNodeDependency[] array);
    internal static void ToXml(XmlWriter writer, string arrayName, CatalogNodeDependency[] array, bool inline, bool allowEmptyArrays);
    internal static void ToXml(XmlWriter writer, string arrayName, CatalogNode[] array);
    internal static void ToXml(XmlWriter writer, string arrayName, CatalogNode[] array, bool inline, bool allowEmptyArrays);
    internal static void ToXml(XmlWriter writer, string arrayName, CatalogResourceType[] array);
    internal static void ToXml(XmlWriter writer, string arrayName, CatalogResourceType[] array, bool inline, bool allowEmptyArrays);
    internal static void ToXml(XmlWriter writer, string arrayName, CatalogResource[] array);
    internal static void ToXml(XmlWriter writer, string arrayName, CatalogResource[] array, bool inline, bool allowEmptyArrays);
    internal static void ToXml(XmlWriter writer, string arrayName, CatalogServiceReference[] array);
    internal static void ToXml(XmlWriter writer, string arrayName, CatalogServiceReference[] array, bool inline, bool allowEmptyArrays);
    internal static void ToXml(XmlWriter writer, string arrayName, ConnectedServiceMetadata[] array);
    internal static void ToXml(XmlWriter writer, string arrayName, ConnectedServiceMetadata[] array, bool inline, bool allowEmptyArrays);
    internal static void ToXml(XmlWriter writer, string arrayName, FrameworkRegistrationEntry[] array);
    internal static void ToXml(XmlWriter writer, string arrayName, FrameworkRegistrationEntry[] array, bool inline, bool allowEmptyArrays);
    internal static void ToXml(XmlWriter writer, string arrayName, FrameworkTemplateHeader[] array);
    internal static void ToXml(XmlWriter writer, string arrayName, FrameworkTemplateHeader[] array, bool inline, bool allowEmptyArrays);
    internal static void ToXml(XmlWriter writer, string arrayName, Guid[] array);
    internal static void ToXml(XmlWriter writer, string arrayName, Guid[] array, bool inline, bool allowEmptyArrays);
    internal static void ToXml(XmlWriter writer, string enumerableName, IEnumerable`1<IdentityDescriptor> enumerable, bool inline, bool allowEmptyArrays);
    internal static void ToXml(XmlWriter writer, string enumerableName, IEnumerable`1<RegistryEntry> enumerable, bool inline, bool allowEmptyArrays);
    internal static void ToXml(XmlWriter writer, string enumerableName, IEnumerable`1<int> enumerable, bool inline, bool allowEmptyArrays);
    internal static void ToXml(XmlWriter writer, string enumerableName, IEnumerable`1<AccessControlListDetails> enumerable, bool inline, bool allowEmptyArrays);
    internal static void ToXml(XmlWriter writer, string enumerableName, IEnumerable`1<string> enumerable, bool inline, bool allowEmptyArrays);
    internal static void ToXml(XmlWriter writer, string enumerableName, IEnumerable`1<Guid> enumerable, bool inline, bool allowEmptyArrays);
    internal static void ToXml(XmlWriter writer, string enumerableName, IEnumerable`1<AccessControlEntryDetails> enumerable, bool inline, bool allowEmptyArrays);
    internal static void ToXml(XmlWriter writer, string enumerableName, IEnumerable`1<ServicingStepGroup> enumerable, bool inline, bool allowEmptyArrays);
    internal static void ToXml(XmlWriter writer, string enumerableName, IEnumerable`1<TeamFoundationJobDefinition> enumerable, bool inline, bool allowEmptyArrays);
    internal static void ToXml(XmlWriter writer, string arrayName, IdentityDescriptor[] array);
    internal static void ToXml(XmlWriter writer, string arrayName, IdentityDescriptor[] array, bool inline, bool allowEmptyArrays);
    internal static void ToXml(XmlWriter writer, string arrayName, KeyValueOfStringString[] array);
    internal static void ToXml(XmlWriter writer, string arrayName, KeyValueOfStringString[] array, bool inline, bool allowEmptyArrays);
    internal static void ToXml(XmlWriter writer, string arrayName, LocationMapping[] array);
    internal static void ToXml(XmlWriter writer, string arrayName, LocationMapping[] array, bool inline, bool allowEmptyArrays);
    internal static void ToXml(XmlWriter writer, string arrayName, OutboundLinkType[] array);
    internal static void ToXml(XmlWriter writer, string arrayName, OutboundLinkType[] array, bool inline, bool allowEmptyArrays);
    internal static void ToXml(XmlWriter writer, string arrayName, PropertyValue[] array);
    internal static void ToXml(XmlWriter writer, string arrayName, PropertyValue[] array, bool inline, bool allowEmptyArrays);
    internal static void ToXml(XmlWriter writer, string arrayName, RegistrationArtifactType[] array);
    internal static void ToXml(XmlWriter writer, string arrayName, RegistrationArtifactType[] array, bool inline, bool allowEmptyArrays);
    internal static void ToXml(XmlWriter writer, string arrayName, RegistrationDatabase[] array);
    internal static void ToXml(XmlWriter writer, string arrayName, RegistrationDatabase[] array, bool inline, bool allowEmptyArrays);
    internal static void ToXml(XmlWriter writer, string arrayName, RegistrationExtendedAttribute2[] array);
    internal static void ToXml(XmlWriter writer, string arrayName, RegistrationExtendedAttribute2[] array, bool inline, bool allowEmptyArrays);
    internal static void ToXml(XmlWriter writer, string arrayName, RegistrationServiceInterface[] array);
    internal static void ToXml(XmlWriter writer, string arrayName, RegistrationServiceInterface[] array, bool inline, bool allowEmptyArrays);
    internal static void ToXml(XmlWriter writer, string arrayName, RegistryAuditEntry[] array);
    internal static void ToXml(XmlWriter writer, string arrayName, RegistryAuditEntry[] array, bool inline, bool allowEmptyArrays);
    internal static void ToXml(XmlWriter writer, string arrayName, RegistryEntry[] array);
    internal static void ToXml(XmlWriter writer, string arrayName, RegistryEntry[] array, bool inline, bool allowEmptyArrays);
    internal static void ToXml(XmlWriter writer, string arrayName, SecurityNamespaceDescription[] array);
    internal static void ToXml(XmlWriter writer, string arrayName, SecurityNamespaceDescription[] array, bool inline, bool allowEmptyArrays);
    internal static void ToXml(XmlWriter writer, string arrayName, ServiceDefinition[] array);
    internal static void ToXml(XmlWriter writer, string arrayName, ServiceDefinition[] array, bool inline, bool allowEmptyArrays);
    internal static void ToXml(XmlWriter writer, string arrayName, ServiceIdentity[] array);
    internal static void ToXml(XmlWriter writer, string arrayName, ServiceIdentity[] array, bool inline, bool allowEmptyArrays);
    internal static void ToXml(XmlWriter writer, string arrayName, ServiceTypeFilter[] array);
    internal static void ToXml(XmlWriter writer, string arrayName, ServiceTypeFilter[] array, bool inline, bool allowEmptyArrays);
    internal static void ToXml(XmlWriter writer, string arrayName, ServicingExecutionHandlerData[] array);
    internal static void ToXml(XmlWriter writer, string arrayName, ServicingExecutionHandlerData[] array, bool inline, bool allowEmptyArrays);
    internal static void ToXml(XmlWriter writer, string arrayName, ServicingJobDetail[] array);
    internal static void ToXml(XmlWriter writer, string arrayName, ServicingJobDetail[] array, bool inline, bool allowEmptyArrays);
    internal static void ToXml(XmlWriter writer, string arrayName, ServicingStepDetail[] array);
    internal static void ToXml(XmlWriter writer, string arrayName, ServicingStepDetail[] array, bool inline, bool allowEmptyArrays);
    internal static void ToXml(XmlWriter writer, string arrayName, ServicingStepGroup[] array);
    internal static void ToXml(XmlWriter writer, string arrayName, ServicingStepGroup[] array, bool inline, bool allowEmptyArrays);
    internal static void ToXml(XmlWriter writer, string arrayName, ServicingStep[] array);
    internal static void ToXml(XmlWriter writer, string arrayName, ServicingStep[] array, bool inline, bool allowEmptyArrays);
    internal static void ToXml(XmlWriter writer, string arrayName, String[] array);
    internal static void ToXml(XmlWriter writer, string arrayName, String[] array, bool inline, bool allowEmptyArrays);
    internal static void ToXml(XmlWriter writer, string arrayName, StrongBoxItemInfo[] array);
    internal static void ToXml(XmlWriter writer, string arrayName, StrongBoxItemInfo[] array, bool inline, bool allowEmptyArrays);
    internal static void ToXml(XmlWriter writer, string arrayName, Subscription[] array);
    internal static void ToXml(XmlWriter writer, string arrayName, Subscription[] array, bool inline, bool allowEmptyArrays);
    internal static void ToXml(XmlWriter writer, string arrayName, TeamFoundationIdentity[] array);
    internal static void ToXml(XmlWriter writer, string arrayName, TeamFoundationIdentity[] array, bool inline, bool allowEmptyArrays);
    internal static void ToXml(XmlWriter writer, string arrayName, TeamFoundationJobDefinition[] array);
    internal static void ToXml(XmlWriter writer, string arrayName, TeamFoundationJobDefinition[] array, bool inline, bool allowEmptyArrays);
    internal static void ToXml(XmlWriter writer, string arrayName, TeamFoundationJobHistoryEntry[] array);
    internal static void ToXml(XmlWriter writer, string arrayName, TeamFoundationJobHistoryEntry[] array, bool inline, bool allowEmptyArrays);
    internal static void ToXml(XmlWriter writer, string arrayName, TeamFoundationJobSchedule[] array);
    internal static void ToXml(XmlWriter writer, string arrayName, TeamFoundationJobSchedule[] array, bool inline, bool allowEmptyArrays);
    internal static void ToXml(XmlWriter writer, string arrayName, TeamFoundationRequestInformation[] array);
    internal static void ToXml(XmlWriter writer, string arrayName, TeamFoundationRequestInformation[] array, bool inline, bool allowEmptyArrays);
    internal static void ToXml(XmlWriter writer, string arrayName, TeamFoundationServiceHostActivity[] array);
    internal static void ToXml(XmlWriter writer, string arrayName, TeamFoundationServiceHostActivity[] array, bool inline, bool allowEmptyArrays);
    internal static void ToXml(XmlWriter writer, string arrayName, TeamProjectCollectionProperties[] array);
    internal static void ToXml(XmlWriter writer, string arrayName, TeamProjectCollectionProperties[] array, bool inline, bool allowEmptyArrays);
}
public class Microsoft.TeamFoundation.Framework.Client.HostAlreadyExistsException : HostManagementException {
    public HostAlreadyExistsException(string message);
    public HostAlreadyExistsException(string message, Exception ex);
    protected HostAlreadyExistsException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.TeamFoundation.Framework.Client.HostCannotBeDeletedException : HostManagementException {
    public HostCannotBeDeletedException(string message);
    public HostCannotBeDeletedException(string message, Exception ex);
    protected HostCannotBeDeletedException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.TeamFoundation.Framework.Client.HostCreationException : HostManagementException {
    public HostCreationException(string message);
    public HostCreationException(string message, Exception ex);
    protected HostCreationException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.TeamFoundation.Framework.Client.HostDoesNotExistException : HostManagementException {
    public HostDoesNotExistException(string message);
    public HostDoesNotExistException(string message, Exception ex);
    protected HostDoesNotExistException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.TeamFoundation.Framework.Client.HostInstanceDoesNotExistException : HostManagementException {
    public HostInstanceDoesNotExistException(string message);
    public HostInstanceDoesNotExistException(string message, Exception ex);
    protected HostInstanceDoesNotExistException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.TeamFoundation.Framework.Client.HostManagementException : TeamFoundationServiceException {
    public HostManagementException(string message);
    public HostManagementException(string message, Exception ex);
    protected HostManagementException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.TeamFoundation.Framework.Client.HostMustBeTopLevelException : HostManagementException {
    public HostMustBeTopLevelException(string message);
    public HostMustBeTopLevelException(string message, Exception ex);
    protected HostMustBeTopLevelException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.TeamFoundation.Framework.Client.HostProcessNotFoundException : HostManagementException {
    public HostProcessNotFoundException(string message);
    public HostProcessNotFoundException(string message, Exception ex);
    protected HostProcessNotFoundException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.TeamFoundation.Framework.Client.HostShutdownException : RequestCanceledException {
    public HostShutdownException(string message);
    public HostShutdownException(string message, Exception ex);
    protected HostShutdownException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.TeamFoundation.Framework.Client.HostStatusChangeException : HostManagementException {
    public HostStatusChangeException(string message);
    public HostStatusChangeException(string message, Exception ex);
    protected HostStatusChangeException(SerializationInfo info, StreamingContext context);
}
public interface Microsoft.TeamFoundation.Framework.Client.IAccessControlService {
    public abstract virtual ServiceIdentity ProvisionServiceIdentity();
    public abstract virtual ServiceIdentity ProvisionServiceIdentity(string serviceIdentityName);
    public abstract virtual ServiceIdentity ProvisionServiceIdentity(string serviceIdentityName, string password);
    public abstract virtual ServiceIdentity ProvisionServiceIdentity(string serviceIdentityName, string password, IdentityDescriptor[] addToGroups);
    public abstract virtual ServiceIdentity ProvisionServiceIdentity(ServiceIdentityInfo identityInfo);
    public abstract virtual ServiceIdentity ProvisionServiceIdentity(ServiceIdentityInfo identityInfo, IdentityDescriptor[] addToGroups);
    public abstract virtual ServiceIdentity QueryServiceIdentity(Guid serviceIdentityId);
    public abstract virtual ServiceIdentity QueryServiceIdentity(Guid serviceIdentityId, bool includeMemberships);
    public abstract virtual ServiceIdentity[] QueryServiceIdentities(Guid[] serviceIdentityIds, bool includeMemberships);
    public abstract virtual ServiceIdentity QueryServiceIdentity(string serviceIdentityName);
    public abstract virtual ServiceIdentity QueryServiceIdentity(string serviceIdentityName, bool includeMemberships);
    public abstract virtual ServiceIdentity[] QueryServiceIdentities(String[] serviceIdentityNames, bool includeMemberships);
    public abstract virtual void DeleteServiceIdentity(ServiceIdentity serviceIdentity);
    public abstract virtual void DeleteServiceIdentity(Guid serviceIdentityId);
}
public interface Microsoft.TeamFoundation.Framework.Client.IAdministrationService {
    public abstract virtual void CancelRequest(Guid hostId, long requestId, string reason);
    public abstract virtual TeamFoundationServiceHostActivity QueryActiveRequests(TfsConnection teamFoundationServer, bool includeDetails);
    public abstract virtual TeamFoundationServiceHostActivity QueryActiveRequests(Guid hostId, bool includeDetails);
    public abstract virtual ReadOnlyCollection`1<TeamFoundationServiceHostActivity> QueryActiveRequests(IEnumerable`1<Guid> hostIds, bool includeDetails);
}
public interface Microsoft.TeamFoundation.Framework.Client.ICatalogService {
    public ReadOnlyCollection`1<CatalogNode> RootNodes { get; }
    public ILocationService LocationService { get; }
    public abstract virtual ReadOnlyCollection`1<CatalogResourceType> QueryResourceTypes(IEnumerable`1<Guid> resourceTypeIdentifiers);
    public abstract virtual ReadOnlyCollection`1<CatalogResource> QueryResources(IEnumerable`1<Guid> resourceIdentifiers, CatalogQueryOptions queryOptions);
    public abstract virtual ReadOnlyCollection`1<CatalogResource> QueryResourcesByType(IEnumerable`1<Guid> resourceTypeIdentifiers, CatalogQueryOptions queryOptions);
    public abstract virtual ReadOnlyCollection`1<CatalogResource> QueryResources(IEnumerable`1<Guid> resourceTypeIdentifiers, IEnumerable`1<KeyValuePair`2<string, string>> propertyFilters, CatalogQueryOptions queryOptions);
    public abstract virtual ReadOnlyCollection`1<CatalogNode> QueryUpTree(string path, IEnumerable`1<Guid> resourceTypeFilters, CatalogQueryOptions queryOptions);
    public abstract virtual ReadOnlyCollection`1<CatalogNode> QueryParents(Guid resourceIdentifier, IEnumerable`1<string> pathFilters, IEnumerable`1<Guid> resourceTypeFilters, bool recurseToRoot, CatalogQueryOptions queryOptions);
    public abstract virtual ReadOnlyCollection`1<CatalogNode> QueryNodes(IEnumerable`1<string> pathSpecs, IEnumerable`1<Guid> resourceTypeFilters, CatalogQueryOptions queryOptions);
    public abstract virtual ReadOnlyCollection`1<CatalogNode> QueryNodes(IEnumerable`1<string> pathSpecs, IEnumerable`1<Guid> resourceTypeFilters, IEnumerable`1<KeyValuePair`2<string, string>> propertyFilters, CatalogQueryOptions queryOptions);
    public abstract virtual ReadOnlyCollection`1<CatalogNode> get_RootNodes();
    public abstract virtual CatalogNode QueryRootNode(CatalogTree tree);
    public abstract virtual void SaveResource(CatalogResource resource);
    public abstract virtual void SaveNode(CatalogNode node);
    public abstract virtual void SaveDelete(CatalogNode node, bool recurse);
    public abstract virtual void SaveMove(CatalogNode nodeToMove, CatalogNode newParent);
    public abstract virtual CatalogChangeContext CreateChangeContext();
    public abstract virtual ILocationService get_LocationService();
}
public class Microsoft.TeamFoundation.Framework.Client.IdentityAccountNameAlreadyInUseException : TeamFoundationIdentityServiceException {
    public IdentityAccountNameAlreadyInUseException(string message);
    public IdentityAccountNameAlreadyInUseException(string message, Exception ex);
    protected IdentityAccountNameAlreadyInUseException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.TeamFoundation.Framework.Client.IdentityAlreadyExistsException : TeamFoundationIdentityServiceException {
    public IdentityAlreadyExistsException(string message);
    public IdentityAlreadyExistsException(string message, Exception ex);
    protected IdentityAlreadyExistsException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.TeamFoundation.Framework.Client.IdentityDescriptor : object {
    private object m_data;
    private string m_identifier;
    private string m_identityType;
    [XmlIgnoreAttribute]
public object Data { get; public set; }
    public string Identifier { get; }
    public string IdentityType { get; }
    public IdentityDescriptor(string identityType, string identifier);
    public object get_Data();
    public void set_Data(object value);
    public string get_Identifier();
    public string get_IdentityType();
    [EditorBrowsableAttribute("1")]
public static IdentityDescriptor FromXml(IServiceProvider serviceProvider, XmlReader reader);
    public virtual string ToString();
    [EditorBrowsableAttribute("1")]
public void ToXml(XmlWriter writer, string element);
    [EditorBrowsableAttribute("1")]
public static void ToXml(XmlWriter writer, string element, IdentityDescriptor obj);
}
public class Microsoft.TeamFoundation.Framework.Client.IdentityDescriptorComparer : object {
    private static IdentityDescriptorComparer s_instance;
    public static IdentityDescriptorComparer Instance { get; }
    private static IdentityDescriptorComparer();
    public sealed virtual int Compare(IdentityDescriptor x, IdentityDescriptor y);
    public sealed virtual bool Equals(IdentityDescriptor x, IdentityDescriptor y);
    public sealed virtual int GetHashCode(IdentityDescriptor obj);
    public static IdentityDescriptorComparer get_Instance();
}
public class Microsoft.TeamFoundation.Framework.Client.IdentityDomainDoesNotExistException : TeamFoundationIdentityServiceException {
    public IdentityDomainDoesNotExistException(string message);
    public IdentityDomainDoesNotExistException(string message, Exception ex);
    protected IdentityDomainDoesNotExistException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.TeamFoundation.Framework.Client.IdentityDomainMismatchException : TeamFoundationIdentityServiceException {
    public IdentityDomainMismatchException(string message);
    public IdentityDomainMismatchException(string message, Exception ex);
    protected IdentityDomainMismatchException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.TeamFoundation.Framework.Client.IdentityExpressionException : TeamFoundationIdentityServiceException {
    public IdentityExpressionException(string message);
    public IdentityExpressionException(string message, Exception ex);
    protected IdentityExpressionException(SerializationInfo info, StreamingContext context);
}
public static class Microsoft.TeamFoundation.Framework.Client.IdentityHelper : object {
    public static IdentityDescriptor CreateDescriptorFromSid(string sid);
    public static IdentityDescriptor CreateDescriptorFromSid(SecurityIdentifier securityId);
    [EditorBrowsableAttribute("1")]
public static IdentityDescriptor CreateDescriptorFromSid(SecurityIdentifierInfo securityIdInfo);
    public static IdentityDescriptor CreateWindowsDescriptor(string sid);
    public static IdentityDescriptor CreateWindowsDescriptor(SecurityIdentifier securityId);
    [EditorBrowsableAttribute("1")]
public static IdentityDescriptor CreateWindowsDescriptor(SecurityIdentifierInfo securityIdInfo);
    public static IdentityDescriptor CreateTeamFoundationDescriptor(string sid);
    public static IdentityDescriptor CreateTeamFoundationDescriptor(SecurityIdentifier securityId);
    [EditorBrowsableAttribute("1")]
public static IdentityDescriptor CreateTeamFoundationDescriptor(SecurityIdentifierInfo securityIdInfo);
    [EditorBrowsableAttribute("1")]
public static GroupSpecialType GetGroupSpecialType(TeamFoundationIdentity identity);
    public static string GetDomainUserName(TeamFoundationIdentity identity, String& resolvableName);
    public static string GetDomainUserName(TeamFoundationIdentity identity);
    public static string GetDomainName(TeamFoundationIdentity identity);
    [EditorBrowsableAttribute("1")]
public static string CreateSecurityToken(TeamFoundationIdentity group);
    [EditorBrowsableAttribute("1")]
public static void CheckDescriptor(IdentityDescriptor descriptor, string parameterName);
    [EditorBrowsableAttribute("1")]
public static bool IdentityHasName(TeamFoundationIdentity identity, string name);
}
internal class Microsoft.TeamFoundation.Framework.Client.IdentityManagementService : object {
    protected IdentityManagementWebService m_proxy;
    private SecurityIdentifier m_domainSid;
    private string m_domainSidWithWellKnownPrefix;
    private string m_domainScope;
    public string IdentityDomainScope { get; }
    internal IdentityManagementService(TfsConnection tfsBase);
    public sealed virtual TeamFoundationIdentity[] ReadIdentities(IdentityDescriptor[] descriptors, MembershipQuery queryMembership, ReadIdentityOptions readOptions);
    public sealed virtual TeamFoundationIdentity ReadIdentity(IdentityDescriptor descriptor, MembershipQuery queryMembership, ReadIdentityOptions readOptions);
    public sealed virtual TeamFoundationIdentity[] ReadIdentities(Guid[] teamFoundationIds, MembershipQuery queryMembership);
    public sealed virtual TeamFoundationIdentity[][] ReadIdentities(IdentitySearchFactor searchFactor, String[] factorValues, MembershipQuery queryMembership, ReadIdentityOptions readOptions);
    public sealed virtual TeamFoundationIdentity ReadIdentity(IdentitySearchFactor searchFactor, string factorValue, MembershipQuery queryMembership, ReadIdentityOptions readOptions);
    public sealed virtual IdentityDescriptor CreateApplicationGroup(string projectUri, string groupName, string groupDescription);
    public sealed virtual TeamFoundationIdentity[] ListApplicationGroups(string projectUri, ReadIdentityOptions readOptions);
    public sealed virtual string GetScopeName(string scopeId);
    public sealed virtual void UpdateApplicationGroup(IdentityDescriptor groupDescriptor, GroupProperty property, string newValue);
    public sealed virtual void DeleteApplicationGroup(IdentityDescriptor groupDescriptor);
    public sealed virtual void AddMemberToApplicationGroup(IdentityDescriptor groupDescriptor, IdentityDescriptor descriptor);
    public sealed virtual void RemoveMemberFromApplicationGroup(IdentityDescriptor groupDescriptor, IdentityDescriptor descriptor);
    public sealed virtual bool IsMember(IdentityDescriptor groupDescriptor, IdentityDescriptor descriptor);
    public sealed virtual bool RefreshIdentity(IdentityDescriptor descriptor);
    public sealed virtual bool IsOwner(IdentityDescriptor descriptor);
    public sealed virtual bool IsOwnedWellKnownGroup(IdentityDescriptor descriptor);
    public sealed virtual string get_IdentityDomainScope();
    protected void InitializeFromWebService(TeamFoundationIdentity[] data);
}
internal class Microsoft.TeamFoundation.Framework.Client.IdentityManagementService2 : IdentityManagementService {
    private IdentityManagementWebService2 m_proxy2;
    internal IdentityManagementService2(TfsConnection tfsBase);
    public sealed virtual TeamFoundationIdentity[] GetMostRecentlyUsedUsers();
    public sealed virtual TeamFoundationIdentity[] GetMostRecentlyUsedUsersEx(Guid teamId);
    public sealed virtual void AddRecentUser(TeamFoundationIdentity identity);
    public sealed virtual void AddRecentUser(Guid teamFoundationId);
    public sealed virtual FilteredIdentitiesList ReadFilteredIdentities(string expression, int suggestedPageSize, string lastSearchResult, bool lookForward, int queryMembership);
    public sealed virtual TeamFoundationIdentity ReadIdentity(string generalSearchValue);
    public sealed virtual TeamFoundationIdentity[] ListApplicationGroups(string scopeId, ReadIdentityOptions readOptions, IEnumerable`1<string> propertyNameFilters, IdentityPropertyScope propertyScope);
    public sealed virtual void SetCustomDisplayName(string customDisplayName);
    public sealed virtual void ClearCustomDisplayName();
    private void AddUser(object obj);
    public sealed virtual TeamFoundationIdentity[] ReadIdentities(IdentityDescriptor[] descriptors, MembershipQuery queryMembership, ReadIdentityOptions readOptions, IEnumerable`1<string> propertyNameFilters, IdentityPropertyScope propertyScope);
    public sealed virtual TeamFoundationIdentity ReadIdentity(IdentityDescriptor descriptor, MembershipQuery queryMembership, ReadIdentityOptions readOptions, IEnumerable`1<string> propertyNameFilters, IdentityPropertyScope propertyScope);
    public sealed virtual TeamFoundationIdentity[] ReadIdentities(Guid[] teamFoundationIds, MembershipQuery queryMembership, ReadIdentityOptions readOptions, IEnumerable`1<string> propertyNameFilters, IdentityPropertyScope propertyScope);
    public sealed virtual TeamFoundationIdentity[][] ReadIdentities(IdentitySearchFactor searchFactor, String[] searchFactorValues, MembershipQuery queryMembership, ReadIdentityOptions readOptions, IEnumerable`1<string> propertyNameFilters, IdentityPropertyScope propertyScope);
    public sealed virtual TeamFoundationIdentity ReadIdentity(IdentitySearchFactor searchFactor, string searchFactorValue, MembershipQuery queryMembership, ReadIdentityOptions readOptions, IEnumerable`1<string> propertyNameFilters, IdentityPropertyScope propertyScope);
    public sealed virtual void UpdateExtendedProperties(TeamFoundationIdentity identity);
    private PropertyValue[] BuildModifiedProperties(IdentityPropertyScope propertyScope, TeamFoundationIdentity identity, HashSet`1<string> modifiedPropertiesLog);
}
[EditorBrowsableAttribute("1")]
public class Microsoft.TeamFoundation.Framework.Client.IdentityManagementWebService : TfsHttpClient {
    protected Guid CollectionServiceIdentifier { get; }
    protected string ComponentName { get; }
    protected Guid ConfigurationServiceIdentifier { get; }
    protected string ServiceType { get; }
    public IdentityManagementWebService(TfsConnection connection);
    protected virtual Guid get_CollectionServiceIdentifier();
    protected virtual string get_ComponentName();
    protected virtual Guid get_ConfigurationServiceIdentifier();
    protected virtual string get_ServiceType();
    public void AddMemberToApplicationGroup(IdentityDescriptor groupDescriptor, IdentityDescriptor descriptor);
    protected virtual Exception ConvertException(SoapException exception);
    public IdentityDescriptor CreateApplicationGroup(string projectUri, string groupName, string groupDescription);
    public void DeleteApplicationGroup(IdentityDescriptor groupDescriptor);
    public string GetScopeName(string scopeId);
    public bool IsMember(IdentityDescriptor groupDescriptor, IdentityDescriptor descriptor);
    public TeamFoundationIdentity[] ListApplicationGroups(string projectUri, int options, int features, IEnumerable`1<string> propertyNameFilters, int propertyScope);
    public TeamFoundationIdentity[][] ReadIdentities(int searchFactor, String[] factorValues, int queryMembership, int options, int features, IEnumerable`1<string> propertyNameFilters, int propertyScope);
    public TeamFoundationIdentity[] ReadIdentitiesByDescriptor(IdentityDescriptor[] descriptors, int queryMembership, int options, int features, IEnumerable`1<string> propertyNameFilters, int propertyScope);
    public TeamFoundationIdentity[] ReadIdentitiesById(Guid[] teamFoundationIds, int queryMembership, int features, int options, IEnumerable`1<string> propertyNameFilters, int propertyScope);
    public bool RefreshIdentity(IdentityDescriptor descriptor);
    public void RemoveMemberFromApplicationGroup(IdentityDescriptor groupDescriptor, IdentityDescriptor descriptor);
    public void UpdateApplicationGroup(IdentityDescriptor groupDescriptor, int groupProperty, string newValue);
}
[EditorBrowsableAttribute("1")]
public class Microsoft.TeamFoundation.Framework.Client.IdentityManagementWebService2 : IdentityManagementWebService {
    protected Guid CollectionServiceIdentifier { get; }
    protected string ComponentName { get; }
    protected Guid ConfigurationServiceIdentifier { get; }
    protected string ServiceType { get; }
    public IdentityManagementWebService2(TfsConnection connection);
    protected virtual Guid get_CollectionServiceIdentifier();
    protected virtual string get_ComponentName();
    protected virtual Guid get_ConfigurationServiceIdentifier();
    protected virtual string get_ServiceType();
    public void AddRecentUser(Guid teamFoundationId);
    protected virtual Exception ConvertException(SoapException exception);
    public TeamFoundationIdentity[] GetMostRecentlyUsedUsers(int features);
    public FilteredIdentitiesList ReadFilteredIdentities(string expression, int suggestedPageSize, string lastSearchResult, bool lookForward, int queryMembership, int features);
    public void SetCustomDisplayName(string customDisplayName);
    public void UpdateIdentityExtendedProperties(IdentityDescriptor descriptor, PropertyValue[] updates, PropertyValue[] localUpdates);
}
public class Microsoft.TeamFoundation.Framework.Client.IdentityNotFoundException : TeamFoundationIdentityServiceException {
    public IdentityNotFoundException(string message);
    public IdentityNotFoundException(string message, Exception ex);
    protected IdentityNotFoundException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.TeamFoundation.Framework.Client.IdentityNotServiceIdentityException : TeamFoundationIdentityServiceException {
    public IdentityNotServiceIdentityException(string message);
    public IdentityNotServiceIdentityException(string message, Exception ex);
    protected IdentityNotServiceIdentityException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.TeamFoundation.Framework.Client.IdentityPropertyRequiredException : TeamFoundationIdentityServiceException {
    public IdentityPropertyRequiredException(string message);
    public IdentityPropertyRequiredException(string message, Exception ex);
    protected IdentityPropertyRequiredException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.TeamFoundation.Framework.Client.IdentityProviderUnavailableException : TeamFoundationIdentityServiceException {
    public IdentityProviderUnavailableException(string message);
    public IdentityProviderUnavailableException(string message, Exception ex);
    protected IdentityProviderUnavailableException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.TeamFoundation.Framework.Client.IdentitySyncException : TeamFoundationIdentityServiceException {
    public IdentitySyncException(string message);
    public IdentitySyncException(string message, Exception ex);
    protected IdentitySyncException(SerializationInfo info, StreamingContext context);
}
public interface Microsoft.TeamFoundation.Framework.Client.IEventService {
    public abstract virtual int SubscribeEvent(string eventType, string filterExpression, DeliveryPreference preferences);
    public abstract virtual int SubscribeEvent(string eventType, string filterExpression, DeliveryPreference preferences, string classification);
    public abstract virtual int SubscribeEvent(string userId, string eventType, string filterExpression, DeliveryPreference preferences);
    public abstract virtual int SubscribeEvent(string userId, string eventType, string filterExpression, DeliveryPreference preferences, string classification, string projectName);
    public abstract virtual void UnsubscribeEvent(int subscriptionId, string projectName);
    public abstract virtual Subscription[] GetAllEventSubscriptions();
    public abstract virtual Subscription[] GetAllEventSubscriptions(string classification, string projectName);
    public abstract virtual Subscription[] GetEventSubscriptions(string user);
    public abstract virtual Subscription[] GetEventSubscriptions(IdentityDescriptor user);
    public abstract virtual Subscription[] GetEventSubscriptions(string user, string classification, string projectName);
    public abstract virtual Subscription[] GetEventSubscriptions(IdentityDescriptor user, string classification, string projectName);
    public abstract virtual void FireEvent(object theEvent);
    public abstract virtual void FireEvents(IEnumerable`1<object> theEvents);
    [ObsoleteAttribute("Use one of the GetEventSubscriptions() overloads")]
public abstract virtual Subscription[] EventSubscriptions(string userId);
    [ObsoleteAttribute("Use one of the GetEventSubscriptions() overloads")]
public abstract virtual Subscription[] EventSubscriptions(string userId, string tag);
    [ObsoleteAttribute("Use the FireEvent() overloads")]
public abstract virtual void FireAsyncEvent(string theEvent);
    [ObsoleteAttribute("Use the FireEvent() overloads")]
public abstract virtual void FireAsyncEvent(object theEvent);
    [ObsoleteAttribute("Use the FireEvent() overloads")]
public abstract virtual void FireBulkAsyncEvents(String[] theEvents);
    [ObsoleteAttribute("Use the FireEvent() overloads")]
public abstract virtual void FireBulkAsyncEvents(Object[] theEvents);
}
internal interface Microsoft.TeamFoundation.Framework.Client.IFrameworkRegistration {
    public Guid InstanceId { get; }
    public string InstanceClientCacheDirectory { get; }
    public abstract virtual FrameworkRegistrationEntry[] GetRegistrationEntries(string toolId);
    public abstract virtual Guid get_InstanceId();
    public abstract virtual string get_InstanceClientCacheDirectory();
}
public interface Microsoft.TeamFoundation.Framework.Client.IIdentityManagementService {
    public string IdentityDomainScope { get; }
    public abstract virtual TeamFoundationIdentity[] ReadIdentities(IdentityDescriptor[] descriptors, MembershipQuery queryMembership, ReadIdentityOptions readOptions);
    public abstract virtual TeamFoundationIdentity ReadIdentity(IdentityDescriptor descriptor, MembershipQuery queryMembership, ReadIdentityOptions readOptions);
    public abstract virtual TeamFoundationIdentity[] ReadIdentities(Guid[] teamFoundationIds, MembershipQuery queryMembership);
    public abstract virtual TeamFoundationIdentity[][] ReadIdentities(IdentitySearchFactor searchFactor, String[] searchFactorValues, MembershipQuery queryMembership, ReadIdentityOptions readOptions);
    public abstract virtual TeamFoundationIdentity ReadIdentity(IdentitySearchFactor searchFactor, string searchFactorValue, MembershipQuery queryMembership, ReadIdentityOptions readOptions);
    public abstract virtual IdentityDescriptor CreateApplicationGroup(string scopeId, string groupName, string groupDescription);
    public abstract virtual TeamFoundationIdentity[] ListApplicationGroups(string scopeId, ReadIdentityOptions readOptions);
    public abstract virtual void UpdateApplicationGroup(IdentityDescriptor groupDescriptor, GroupProperty groupProperty, string newValue);
    public abstract virtual void DeleteApplicationGroup(IdentityDescriptor groupDescriptor);
    public abstract virtual void AddMemberToApplicationGroup(IdentityDescriptor groupDescriptor, IdentityDescriptor descriptor);
    public abstract virtual void RemoveMemberFromApplicationGroup(IdentityDescriptor groupDescriptor, IdentityDescriptor descriptor);
    public abstract virtual bool IsMember(IdentityDescriptor groupDescriptor, IdentityDescriptor descriptor);
    public abstract virtual bool RefreshIdentity(IdentityDescriptor descriptor);
    public abstract virtual string GetScopeName(string scopeId);
    public abstract virtual bool IsOwner(IdentityDescriptor descriptor);
    public abstract virtual bool IsOwnedWellKnownGroup(IdentityDescriptor descriptor);
    public abstract virtual string get_IdentityDomainScope();
}
public interface Microsoft.TeamFoundation.Framework.Client.IIdentityManagementService2 {
    public abstract virtual TeamFoundationIdentity[] GetMostRecentlyUsedUsers();
    public abstract virtual TeamFoundationIdentity[] GetMostRecentlyUsedUsersEx(Guid teamId);
    public abstract virtual void AddRecentUser(TeamFoundationIdentity identity);
    public abstract virtual void AddRecentUser(Guid teamFoundationId);
    public abstract virtual TeamFoundationIdentity ReadIdentity(string generalSearchValue);
    public abstract virtual FilteredIdentitiesList ReadFilteredIdentities(string expression, int suggestedPageSize, string lastSearchResult, bool lookForward, int queryMembership);
    public abstract virtual void SetCustomDisplayName(string customDisplayName);
    public abstract virtual void ClearCustomDisplayName();
    public abstract virtual void UpdateExtendedProperties(TeamFoundationIdentity identity);
    public abstract virtual TeamFoundationIdentity[] ReadIdentities(IdentityDescriptor[] descriptors, MembershipQuery queryMembership, ReadIdentityOptions readOptions, IEnumerable`1<string> propertyNameFilters, IdentityPropertyScope propertyScope);
    public abstract virtual TeamFoundationIdentity ReadIdentity(IdentityDescriptor descriptor, MembershipQuery queryMembership, ReadIdentityOptions readOptions, IEnumerable`1<string> propertyNameFilters, IdentityPropertyScope propertyScope);
    public abstract virtual TeamFoundationIdentity[] ReadIdentities(Guid[] teamFoundationIds, MembershipQuery queryMembership, ReadIdentityOptions readOptions, IEnumerable`1<string> propertyNameFilters, IdentityPropertyScope propertyScope);
    public abstract virtual TeamFoundationIdentity[][] ReadIdentities(IdentitySearchFactor searchFactor, String[] searchFactorValues, MembershipQuery queryMembership, ReadIdentityOptions readOptions, IEnumerable`1<string> propertyNameFilters, IdentityPropertyScope propertyScope);
    public abstract virtual TeamFoundationIdentity ReadIdentity(IdentitySearchFactor searchFactor, string searchFactorValue, MembershipQuery queryMembership, ReadIdentityOptions readOptions, IEnumerable`1<string> propertyNameFilters, IdentityPropertyScope propertyScope);
    public abstract virtual TeamFoundationIdentity[] ListApplicationGroups(string scopeId, ReadIdentityOptions readOptions, IEnumerable`1<string> propertyNameFilters, IdentityPropertyScope propertyScope);
}
public class Microsoft.TeamFoundation.Framework.Client.IllegalDeleteSelfReferenceServiceDefinitionException : TeamFoundationLocationServiceException {
    public IllegalDeleteSelfReferenceServiceDefinitionException(string message);
    public IllegalDeleteSelfReferenceServiceDefinitionException(string message, Exception ex);
    protected IllegalDeleteSelfReferenceServiceDefinitionException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.TeamFoundation.Framework.Client.IllegalIdentityException : TeamFoundationIdentityServiceException {
    public IllegalIdentityException(string message);
    public IllegalIdentityException(string message, Exception ex);
    protected IllegalIdentityException(SerializationInfo info, StreamingContext context);
}
public interface Microsoft.TeamFoundation.Framework.Client.ILocationService {
    public AccessMapping ClientAccessMapping { get; }
    public AccessMapping DefaultAccessMapping { get; }
    public IEnumerable`1<AccessMapping> ConfiguredAccessMappings { get; }
    public abstract virtual AccessMapping get_ClientAccessMapping();
    public abstract virtual AccessMapping get_DefaultAccessMapping();
    public abstract virtual IEnumerable`1<AccessMapping> get_ConfiguredAccessMappings();
    public abstract virtual void SaveServiceDefinition(ServiceDefinition serviceDefinition);
    public abstract virtual void SaveServiceDefinitions(IEnumerable`1<ServiceDefinition> serviceDefinitions);
    public abstract virtual void RemoveServiceDefinition(string serviceType, Guid serviceIdentifier);
    public abstract virtual void RemoveServiceDefinition(ServiceDefinition serviceDefinition);
    public abstract virtual void RemoveServiceDefinitions(IEnumerable`1<ServiceDefinition> serviceDefinitions);
    public abstract virtual ServiceDefinition FindServiceDefinition(string serviceType, Guid serviceIdentifier);
    public abstract virtual IEnumerable`1<ServiceDefinition> FindServiceDefinitions(string serviceType);
    public abstract virtual IEnumerable`1<ServiceDefinition> FindServiceDefinitionsByToolType(string toolType);
    public abstract virtual string LocationForCurrentConnection(string serviceType, Guid serviceIdentifier);
    public abstract virtual string LocationForCurrentConnection(ServiceDefinition serviceDefinition);
    public abstract virtual string LocationForAccessMapping(string serviceType, Guid serviceIdentifier, AccessMapping accessMapping);
    public abstract virtual string LocationForAccessMapping(ServiceDefinition serviceDefinition, AccessMapping accessMapping);
    public abstract virtual AccessMapping ConfigureAccessMapping(string moniker, string displayName, string accessPoint, bool makeDefault);
    public abstract virtual void SetDefaultAccessMapping(AccessMapping accessMapping);
    public abstract virtual AccessMapping GetAccessMapping(string moniker);
    public abstract virtual void RemoveAccessMapping(string moniker);
}
internal interface Microsoft.TeamFoundation.Framework.Client.ILocationServiceInternal {
    public abstract virtual string LocationForCurrentConnection(string serviceType, Guid serviceIdentifier, bool ignoreCacheExpiration);
}
public class Microsoft.TeamFoundation.Framework.Client.IncompatibleCompressionFormatException : TeamFoundationServiceException {
    public IncompatibleCompressionFormatException(string message);
    public IncompatibleCompressionFormatException(string message, Exception ex);
    protected IncompatibleCompressionFormatException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.TeamFoundation.Framework.Client.IncompatibleTokenException : QueryExpressionException {
    public IncompatibleTokenException(string message);
    public IncompatibleTokenException(string message, Exception ex);
    protected IncompatibleTokenException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.TeamFoundation.Framework.Client.IncompleteUploadException : TeamFoundationServiceException {
    public IncompleteUploadException(string message);
    public IncompleteUploadException(string message, Exception ex);
    protected IncompleteUploadException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.TeamFoundation.Framework.Client.IncorrectSizeException : TeamFoundationServiceException {
    public IncorrectSizeException(string message);
    public IncorrectSizeException(string message, Exception ex);
    protected IncorrectSizeException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.TeamFoundation.Framework.Client.InternalStoredProcedureException : AuthorizationSubsystemServiceException {
    public InternalStoredProcedureException(string message);
    public InternalStoredProcedureException(string message, Exception ex);
    protected InternalStoredProcedureException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.TeamFoundation.Framework.Client.InvalidAccessException : TeamFoundationServiceException {
    public InvalidAccessException(string message);
    public InvalidAccessException(string message, Exception ex);
    protected InvalidAccessException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.TeamFoundation.Framework.Client.InvalidAccessPointException : TeamFoundationLocationServiceException {
    public InvalidAccessPointException(string message);
    public InvalidAccessPointException(string message, Exception ex);
    protected InvalidAccessPointException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.TeamFoundation.Framework.Client.InvalidBindPendingIdentityDescriptorException : TeamFoundationIdentityServiceException {
    public InvalidBindPendingIdentityDescriptorException(string message);
    public InvalidBindPendingIdentityDescriptorException(string message, Exception ex);
    protected InvalidBindPendingIdentityDescriptorException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.TeamFoundation.Framework.Client.InvalidCatalogDeleteNodeException : TeamFoundationCatalogServiceException {
    public InvalidCatalogDeleteNodeException(string message);
    public InvalidCatalogDeleteNodeException(string message, Exception ex);
    protected InvalidCatalogDeleteNodeException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.TeamFoundation.Framework.Client.InvalidCatalogNodeMoveException : TeamFoundationCatalogServiceException {
    public InvalidCatalogNodeMoveException(string message);
    public InvalidCatalogNodeMoveException(string message, Exception ex);
    protected InvalidCatalogNodeMoveException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.TeamFoundation.Framework.Client.InvalidCatalogNodePathException : TeamFoundationCatalogServiceException {
    public InvalidCatalogNodePathException(string message);
    public InvalidCatalogNodePathException(string message, Exception ex);
    protected InvalidCatalogNodePathException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.TeamFoundation.Framework.Client.InvalidCatalogSaveNodeException : TeamFoundationCatalogServiceException {
    public InvalidCatalogSaveNodeException(string message);
    public InvalidCatalogSaveNodeException(string message, Exception ex);
    protected InvalidCatalogSaveNodeException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.TeamFoundation.Framework.Client.InvalidCatalogSaveResourceException : TeamFoundationCatalogServiceException {
    public InvalidCatalogSaveResourceException(string message);
    public InvalidCatalogSaveResourceException(string message, Exception ex);
    protected InvalidCatalogSaveResourceException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.TeamFoundation.Framework.Client.InvalidCollationException : CollationException {
    public InvalidCollationException(string message);
    public InvalidCollationException(string message, Exception ex);
    protected InvalidCollationException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.TeamFoundation.Framework.Client.InvalidDisplayNameException : TeamFoundationIdentityServiceException {
    public InvalidDisplayNameException(string message);
    public InvalidDisplayNameException(string message, Exception ex);
    protected InvalidDisplayNameException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.TeamFoundation.Framework.Client.InvalidDomainException : GroupSecuritySubsystemServiceException {
    public InvalidDomainException(string message);
    public InvalidDomainException(string message, Exception ex);
    protected InvalidDomainException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.TeamFoundation.Framework.Client.InvalidEscapeSequenceException : QueryExpressionException {
    public InvalidEscapeSequenceException(string message);
    public InvalidEscapeSequenceException(string message, Exception ex);
    protected InvalidEscapeSequenceException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.TeamFoundation.Framework.Client.InvalidFeatureNameException : TeamFoundationServiceException {
    public InvalidFeatureNameException(string message);
    public InvalidFeatureNameException(string message, Exception ex);
    protected InvalidFeatureNameException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.TeamFoundation.Framework.Client.InvalidLobParameterException : TeamFoundationServiceException {
    public InvalidLobParameterException(string message);
    public InvalidLobParameterException(string message, Exception ex);
    protected InvalidLobParameterException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.TeamFoundation.Framework.Client.InvalidParentHostException : TeamFoundationServiceException {
    public InvalidParentHostException(string message);
    public InvalidParentHostException(string message, Exception ex);
    protected InvalidParentHostException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.TeamFoundation.Framework.Client.InvalidReclassificationException : CommonStructureSubsystemServiceException {
    public InvalidReclassificationException(string message);
    public InvalidReclassificationException(string message, Exception ex);
    protected InvalidReclassificationException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.TeamFoundation.Framework.Client.InvalidRegistryException : TeamFoundationServiceException {
    public InvalidRegistryException(string message);
    public InvalidRegistryException(string message, Exception ex);
    protected InvalidRegistryException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.TeamFoundation.Framework.Client.InvalidRequestContextHostException : TeamFoundationServiceException {
    public InvalidRequestContextHostException(string message);
    public InvalidRequestContextHostException(string message, Exception ex);
    protected InvalidRequestContextHostException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.TeamFoundation.Framework.Client.InvalidSecurityNamespaceDescriptionException : TeamFoundationSecurityServiceException {
    public InvalidSecurityNamespaceDescriptionException(string message);
    public InvalidSecurityNamespaceDescriptionException(string message, Exception ex);
    protected InvalidSecurityNamespaceDescriptionException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.TeamFoundation.Framework.Client.InvalidSecurityNamespaceException : TeamFoundationSecurityServiceException {
    public InvalidSecurityNamespaceException(string message);
    public InvalidSecurityNamespaceException(string message, Exception ex);
    protected InvalidSecurityNamespaceException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.TeamFoundation.Framework.Client.InvalidSecurityTokenException : TeamFoundationSecurityServiceException {
    public InvalidSecurityTokenException(string message);
    public InvalidSecurityTokenException(string message, Exception ex);
    protected InvalidSecurityTokenException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.TeamFoundation.Framework.Client.InvalidServiceDefinitionException : TeamFoundationLocationServiceException {
    public InvalidServiceDefinitionException(string message);
    public InvalidServiceDefinitionException(string message, Exception ex);
    protected InvalidServiceDefinitionException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.TeamFoundation.Framework.Client.InvalidServiceIdentityNameException : TeamFoundationIdentityServiceException {
    public InvalidServiceIdentityNameException(string message);
    public InvalidServiceIdentityNameException(string message, Exception ex);
    protected InvalidServiceIdentityNameException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.TeamFoundation.Framework.Client.InvalidServiceVersionException : TeamFoundationResourceManagementServiceException {
    public InvalidServiceVersionException(string message);
    public InvalidServiceVersionException(string message, Exception ex);
    protected InvalidServiceVersionException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.TeamFoundation.Framework.Client.InvalidServicingStepTypeException : TeamFoundationServicingException {
    public InvalidServicingStepTypeException(string message);
    public InvalidServicingStepTypeException(string message, Exception ex);
    protected InvalidServicingStepTypeException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.TeamFoundation.Framework.Client.InvalidTokenFormatExpcetion : QueryExpressionException {
    public InvalidTokenFormatExpcetion(string message);
    public InvalidTokenFormatExpcetion(string message, Exception ex);
    protected InvalidTokenFormatExpcetion(SerializationInfo info, StreamingContext context);
}
public interface Microsoft.TeamFoundation.Framework.Client.IPropertyService {
    public abstract virtual ArtifactPropertyValue[] GetProperties(ArtifactSpec artifactSpec, String[] propertyNameFilters);
    public abstract virtual ArtifactPropertyValue[] GetProperties(ArtifactSpec[] artifactSpecs, String[] propertyNameFilters);
    public abstract virtual ArtifactPropertyValue[] GetProperties(ArtifactSpec[] artifactSpecs, String[] propertyNameFilters, GetPropertiesOptions options);
    public abstract virtual void SetProperty(ArtifactSpec artifactSpec, string propertyName, Nullable`1<int> value);
    public abstract virtual void SetProperty(ArtifactSpec artifactSpec, string propertyName, Nullable`1<double> value);
    public abstract virtual void SetProperty(ArtifactSpec artifactSpec, string propertyName, string value);
    public abstract virtual void SetProperty(ArtifactSpec artifactSpec, string propertyName, Nullable`1<DateTime> value);
    public abstract virtual void SetProperty(ArtifactSpec artifactSpec, string propertyName, Byte[] value);
    public abstract virtual void SetProperties(ArtifactPropertyValue artifactPropertyValues);
    public abstract virtual void SetProperties(ArtifactPropertyValue[] artifactPropertyValues);
}
public interface Microsoft.TeamFoundation.Framework.Client.ISecurityService {
    public abstract virtual SecurityNamespace CreateSecurityNamespace(SecurityNamespaceDescription description);
    public abstract virtual bool DeleteSecurityNamespace(Guid namespaceId);
    public abstract virtual SecurityNamespace GetSecurityNamespace(Guid namespaceId);
    public abstract virtual ReadOnlyCollection`1<SecurityNamespace> GetSecurityNamespaces();
}
[EditorBrowsableAttribute("1")]
public interface Microsoft.TeamFoundation.Framework.Client.IServerDataProvider {
    public Guid InstanceId { get; }
    public Guid CachedInstanceId { get; }
    public Guid CatalogResourceId { get; }
    public ServerCapabilities ServerCapabilities { get; }
    public string ServerVersion { get; }
    public string ClientCacheDirectoryForInstance { get; }
    public string ClientVolatileCacheDirectoryForInstance { get; }
    public string ClientCacheDirectoryForUser { get; }
    public TeamFoundationIdentity AuthorizedIdentity { get; }
    public TeamFoundationIdentity AuthenticatedIdentity { get; }
    public bool HasAuthenticated { get; }
    public abstract virtual Guid get_InstanceId();
    public abstract virtual Guid get_CachedInstanceId();
    public abstract virtual Guid get_CatalogResourceId();
    public abstract virtual ServerCapabilities get_ServerCapabilities();
    public abstract virtual string get_ServerVersion();
    public abstract virtual string get_ClientCacheDirectoryForInstance();
    public abstract virtual string get_ClientVolatileCacheDirectoryForInstance();
    public abstract virtual string get_ClientCacheDirectoryForUser();
    public abstract virtual TeamFoundationIdentity get_AuthorizedIdentity();
    public abstract virtual TeamFoundationIdentity get_AuthenticatedIdentity();
    public abstract virtual bool get_HasAuthenticated();
    public abstract virtual void EnsureAuthenticated();
    public abstract virtual void Authenticate();
    public abstract virtual string FindServerLocation(Guid serverGuid);
    public abstract virtual void Connect(ConnectOptions connectOptions);
    public abstract virtual void Disconnect();
    public abstract virtual void ReactToPossibleServerUpdate(int serverLastChangeId);
}
public interface Microsoft.TeamFoundation.Framework.Client.ITeamFoundationJobService {
    public abstract virtual void DeleteJob(TeamFoundationJobDefinition job);
    public abstract virtual void DeleteJob(Guid jobId);
    public abstract virtual void DeleteJobs(IEnumerable`1<Guid> jobIds);
    public abstract virtual void DeleteJobs(IEnumerable`1<TeamFoundationJobDefinition> jobs);
    public abstract virtual void UpdateJob(TeamFoundationJobDefinition job);
    public abstract virtual void UpdateJobs(IEnumerable`1<Guid> jobsToDelete, IEnumerable`1<TeamFoundationJobDefinition> jobsToUpdate);
    public abstract virtual void UpdateJobs(IEnumerable`1<TeamFoundationJobDefinition> jobsToDelete, IEnumerable`1<TeamFoundationJobDefinition> jobsToUpdate);
    public abstract virtual void UpdateJobs(IEnumerable`1<TeamFoundationJobDefinition> jobs);
    public abstract virtual bool StopJob(Guid jobId);
    public abstract virtual bool StopJob(TeamFoundationJobDefinition job);
    public abstract virtual bool PauseJob(Guid jobId);
    public abstract virtual bool PauseJob(TeamFoundationJobDefinition job);
    public abstract virtual bool ResumeJob(Guid jobId);
    public abstract virtual bool ResumeJob(TeamFoundationJobDefinition job);
    public abstract virtual int QueueJobNow(TeamFoundationJobDefinition job, bool highPriority);
    public abstract virtual int QueueJobNow(Guid jobId, bool highPriority);
    public abstract virtual int QueueJobsNow(IEnumerable`1<TeamFoundationJobDefinition> jobs, bool highPriority);
    public abstract virtual int QueueJobsNow(IEnumerable`1<Guid> jobIds, bool highPriority);
    public abstract virtual int QueueDelayedJob(TeamFoundationJobDefinition job);
    public abstract virtual int QueueDelayedJob(Guid jobId);
    public abstract virtual int QueueDelayedJob(TeamFoundationJobDefinition job, int maxDelaySeconds);
    public abstract virtual int QueueDelayedJob(Guid jobId, int maxDelaySeconds);
    public abstract virtual int QueueDelayedJobs(IEnumerable`1<TeamFoundationJobDefinition> jobs);
    public abstract virtual int QueueDelayedJobs(IEnumerable`1<Guid> jobIds);
    public abstract virtual int QueueDelayedJobs(IEnumerable`1<TeamFoundationJobDefinition> jobs, int maxDelaySeconds);
    public abstract virtual int QueueDelayedJobs(IEnumerable`1<Guid> jobIds, int maxDelaySeconds);
    public abstract virtual Guid QueueOneTimeJob(string jobName, string extensionName, XmlNode jobData, bool highPriority);
    public abstract virtual TeamFoundationJobDefinition[] QueryJobs(IEnumerable`1<Guid> jobIds);
    public abstract virtual TeamFoundationJobDefinition[] QueryJobs();
    public abstract virtual IList`1<TeamFoundationJobHistoryEntry> QueryJobHistory(IEnumerable`1<Guid> jobIds);
    public abstract virtual IList`1<TeamFoundationJobHistoryEntry> QueryJobHistory(IEnumerable`1<TeamFoundationJobDefinition> jobs);
    public abstract virtual IList`1<TeamFoundationJobHistoryEntry> QueryLatestJobHistory(IEnumerable`1<Guid> jobIds);
    public abstract virtual IList`1<TeamFoundationJobHistoryEntry> QueryLatestJobHistory(IEnumerable`1<TeamFoundationJobDefinition> jobs);
    public abstract virtual TeamFoundationJobHistoryEntry QueryLatestJobHistory(Guid jobId);
    public abstract virtual TeamFoundationJobHistoryEntry QueryLatestJobHistory(TeamFoundationJobDefinition job);
}
public interface Microsoft.TeamFoundation.Framework.Client.ITeamFoundationRegistry {
    public abstract virtual int DeleteEntries(String[] registryPathPatterns);
    public abstract virtual int DeleteUserEntries(String[] registryPathPatterns);
    public abstract virtual RegistryEntryCollection ReadEntries(string registryPathPattern);
    public abstract virtual RegistryEntryCollection ReadEntries(string registryPathPattern, bool includeContainerHints);
    public abstract virtual RegistryEntryCollection ReadUserEntries(string registryPathPattern);
    public abstract virtual RegistryEntryCollection ReadUserEntries(string registryPathPattern, bool includeContainerHints);
    public abstract virtual void WriteEntries(IEnumerable`1<RegistryEntry> registryEntries);
    public abstract virtual void WriteUserEntries(IEnumerable`1<RegistryEntry> registryEntries);
    public abstract virtual string GetValue(string path);
    public abstract virtual string GetValue(string path, string defaultValue);
    public abstract virtual string GetUserValue(string path);
    public abstract virtual string GetUserValue(string path, string defaultValue);
    public abstract virtual T GetValue(string path);
    public abstract virtual T GetValue(string path, T defaultValue);
    public abstract virtual T GetUserValue(string path);
    public abstract virtual T GetUserValue(string path, T defaultValue);
    public abstract virtual void SetValue(string path, string value);
    public abstract virtual void SetValue(string path, T value);
    public abstract virtual void SetUserValue(string path, string value);
    public abstract virtual void SetUserValue(string path, T value);
    public abstract virtual IEnumerable`1<RegistryAuditEntry> QueryAuditLog(int changeIndex, bool returnOlder);
}
public interface Microsoft.TeamFoundation.Framework.Client.ITeamProjectCollectionService {
    public abstract virtual TeamProjectCollection GetCollection(Guid id);
    public abstract virtual TeamProjectCollection GetCollection(Guid id, ServiceHostFilterFlags filterFlags);
    public abstract virtual IList`1<TeamProjectCollection> GetCollections();
    public abstract virtual IList`1<TeamProjectCollection> GetCollections(ServiceHostFilterFlags filterFlags);
    public abstract virtual IList`1<TeamProjectCollection> GetCollections(IEnumerable`1<Guid> collectionIds);
    public abstract virtual IList`1<TeamProjectCollection> GetCollections(IEnumerable`1<Guid> collectionIds, ServiceHostFilterFlags filterFlags);
    public abstract virtual TeamProjectCollection GetDefaultCollection();
}
public interface Microsoft.TeamFoundation.Framework.Client.ITeamProjectCollectionServicing {
    public abstract virtual TeamProjectCollection WaitForCollectionServicingToComplete(ServicingJobDetail jobDetail);
    public abstract virtual TeamProjectCollection WaitForCollectionServicingToComplete(ServicingJobDetail jobDetail, TimeSpan timeout);
    public abstract virtual ServicingJobDetail QueueCreateCollection(string name, string description, bool isDefault, string virtualDirectory, TeamFoundationServiceHostStatus state, IDictionary`2<string, string> servicingTokens);
    public abstract virtual ServicingJobDetail QueueCreateCollection(string name, string description, bool isDefault, string virtualDirectory, TeamFoundationServiceHostStatus state, IDictionary`2<string, string> servicingTokens, string dataTierConnectionString, string defaultConnectionString, IDictionary`2<string, string> databaseCategoryConnectionStrings);
    public abstract virtual ServicingJobDetail QueueAttachCollection(string databaseConnectionString, IDictionary`2<string, string> servicingTokens, bool cloneCollection);
    public abstract virtual ServicingJobDetail QueueAttachCollection(string databaseConnectionString, IDictionary`2<string, string> servicingTokens, bool cloneCollection, string name, string description, string virtualDirectory);
    public abstract virtual ServicingJobDetail QueueDetachCollection(Guid collectionId, IDictionary`2<string, string> servicingTokens, string collectionStoppedMessage, String& detachedConnectionString);
    public abstract virtual ServicingJobDetail QueueDetachCollection(TeamProjectCollection teamProjectCollection, IDictionary`2<string, string> servicingTokens, string collectionStoppedMessage, String& detachedConnectionString);
    public abstract virtual ServicingJobDetail DeleteProject(Guid collectionId, string projectUri, Dictionary`2<string, string> servicingTokens);
    public abstract virtual ServicingJobDetail QueueDeleteProject(Guid collectionId, string projectUri, IDictionary`2<string, string> servicingTokens);
}
public class Microsoft.TeamFoundation.Framework.Client.JobAgentException : TeamFoundationServiceException {
    public JobAgentException(string message);
    public JobAgentException(string message, Exception ex);
    protected JobAgentException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.TeamFoundation.Framework.Client.JobAgentTeardownTimeoutException : JobAgentException {
    public JobAgentTeardownTimeoutException(string message);
    public JobAgentTeardownTimeoutException(string message, Exception ex);
    protected JobAgentTeardownTimeoutException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.TeamFoundation.Framework.Client.JobCannotBePausedException : TeamFoundationJobServiceException {
    public JobCannotBePausedException(string message);
    public JobCannotBePausedException(string message, Exception ex);
    protected JobCannotBePausedException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.TeamFoundation.Framework.Client.JobCannotBeResumedException : TeamFoundationJobServiceException {
    public JobCannotBeResumedException(string message);
    public JobCannotBeResumedException(string message, Exception ex);
    protected JobCannotBeResumedException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.TeamFoundation.Framework.Client.JobCannotBeStoppedException : TeamFoundationJobServiceException {
    public JobCannotBeStoppedException(string message);
    public JobCannotBeStoppedException(string message, Exception ex);
    protected JobCannotBeStoppedException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.TeamFoundation.Framework.Client.JobCannotBeUpdatedException : TeamFoundationJobServiceException {
    public JobCannotBeUpdatedException(string message);
    public JobCannotBeUpdatedException(string message, Exception ex);
    protected JobCannotBeUpdatedException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.TeamFoundation.Framework.Client.JobDefinitionNotFoundException : TeamFoundationJobServiceException {
    public JobDefinitionNotFoundException(string message);
    public JobDefinitionNotFoundException(string message, Exception ex);
    protected JobDefinitionNotFoundException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.TeamFoundation.Framework.Client.JobDidntPauseException : TeamFoundationJobServiceException {
    public JobDidntPauseException(string message);
    public JobDidntPauseException(string message, Exception ex);
    protected JobDidntPauseException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.TeamFoundation.Framework.Client.JobIntervalNotSupportedException : TeamFoundationJobServiceException {
    public JobIntervalNotSupportedException(string message);
    public JobIntervalNotSupportedException(string message, Exception ex);
    protected JobIntervalNotSupportedException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.TeamFoundation.Framework.Client.JobsStillRunningException : JobAgentException {
    public JobsStillRunningException(string message);
    public JobsStillRunningException(string message, Exception ex);
    protected JobsStillRunningException(SerializationInfo info, StreamingContext context);
}
internal class Microsoft.TeamFoundation.Framework.Client.JobWebService : TfsHttpClient {
    protected Guid CollectionServiceIdentifier { get; }
    protected string ComponentName { get; }
    protected Guid ConfigurationServiceIdentifier { get; }
    protected string ServiceType { get; }
    public JobWebService(TfsConnection connection);
    protected virtual Guid get_CollectionServiceIdentifier();
    protected virtual string get_ComponentName();
    protected virtual Guid get_ConfigurationServiceIdentifier();
    protected virtual string get_ServiceType();
    protected virtual Exception ConvertException(SoapException exception);
    public bool PauseJob(Guid jobId);
    public TeamFoundationJobDefinition[] QueryJobDefinitions(IEnumerable`1<Guid> jobIds);
    public TeamFoundationJobHistoryEntry[] QueryJobHistory(IEnumerable`1<Guid> jobIds);
    public TeamFoundationJobHistoryEntry[] QueryLatestJobHistory(IEnumerable`1<Guid> jobIds);
    public int QueueJobs(IEnumerable`1<Guid> jobIds, bool highPriority, int maxDelaySeconds);
    public Guid QueueOneTimeJob(string jobName, string extensionName, XmlNode jobData, bool highPriority);
    public bool ResumeJob(Guid jobId);
    public bool StopJob(Guid jobId);
    public void UpdateJobDefinitions(IEnumerable`1<Guid> jobsToDelete, IEnumerable`1<TeamFoundationJobDefinition> jobUpdates);
}
public class Microsoft.TeamFoundation.Framework.Client.KeyValueOfStringString : object {
    private string m_key;
    private string m_value;
    [EditorBrowsableAttribute("1")]
public string Key { get; public set; }
    [EditorBrowsableAttribute("1")]
public string Value { get; public set; }
    [EditorBrowsableAttribute("1")]
public KeyValueOfStringString(KeyValuePair`2<string, string> keyValuePair);
    [EditorBrowsableAttribute("1")]
public static KeyValueOfStringString[] Convert(IEnumerable`1<KeyValuePair`2<string, string>> pairs);
    public string get_Key();
    public void set_Key(string value);
    public string get_Value();
    public void set_Value(string value);
    [EditorBrowsableAttribute("1")]
public static KeyValueOfStringString FromXml(IServiceProvider serviceProvider, XmlReader reader);
    public virtual string ToString();
    [EditorBrowsableAttribute("1")]
public void ToXml(XmlWriter writer, string element);
    [EditorBrowsableAttribute("1")]
public static void ToXml(XmlWriter writer, string element, KeyValueOfStringString obj);
}
internal class Microsoft.TeamFoundation.Framework.Client.LastMessageHeader : TfsMessageHeader {
    private long m_messageId;
    public string Name { get; }
    public string Namespace { get; }
    public LastMessageHeader(long messageId);
    public virtual string get_Name();
    public virtual string get_Namespace();
    protected virtual void OnWriteHeaderContents(XmlDictionaryWriter writer);
}
internal class Microsoft.TeamFoundation.Framework.Client.LocationCacheManager : object {
    [CompilerGeneratedAttribute]
private Nullable`1<int> <ClientCacheTimeToLive>k__BackingField;
    private Dictionary`2<string, Dictionary`2<Guid, ServiceDefinition>> m_services;
    private HashSet`1<string> m_cachedMisses;
    private Dictionary`2<string, AccessMapping> m_accessMappings;
    private int m_lastChangeId;
    private DateTime m_cacheExpirationDate;
    private ReaderWriterLock m_accessLock;
    private string m_webApplicationRelativeDirectory;
    private static object s_cacheMutex;
    private bool m_cacheLocallyFresh;
    private bool m_cacheAvailable;
    private FileSystemWatcher m_fileSystemWatcher;
    private Uri m_connectionBaseUrl;
    private AccessMapping m_clientAccessMapping;
    private AccessMapping m_defaultAccessMapping;
    private static string s_cacheFileName;
    private string m_cacheFilePath;
    private LocationXmlOperator m_locationXmlOperator;
    private static string s_docStartElement;
    public bool LocalCacheAvailable { get; }
    internal bool CacheDataExpired { get; }
    public AccessMapping ClientAccessMapping { get; }
    public AccessMapping DefaultAccessMapping { get; }
    public string WebApplicationRelativeDirectory { get; public set; }
    public IEnumerable`1<AccessMapping> AccessMappings { get; }
    internal Nullable`1<int> ClientCacheTimeToLive { get; internal set; }
    public LocationCacheManager(Guid serverGuid, Uri connectionBaseUrl);
    private static LocationCacheManager();
    public bool get_LocalCacheAvailable();
    internal bool get_CacheDataExpired();
    public AccessMapping get_ClientAccessMapping();
    public AccessMapping get_DefaultAccessMapping();
    public string get_WebApplicationRelativeDirectory();
    public void set_WebApplicationRelativeDirectory(string value);
    public void ClearIfCacheNotFresh(int serverLastChangeId);
    public void RemoveServices(IEnumerable`1<ServiceDefinition> serviceDefinitions, int lastChangeId);
    public AccessMapping GetAccessMapping(string moniker);
    public bool TryFindService(string serviceType, Guid serviceIdentifier, bool ignoreCacheExpiration, ServiceDefinition& serviceDefinition);
    public IEnumerable`1<ServiceDefinition> FindServices(string serviceType);
    public IEnumerable`1<ServiceDefinition> FindServicesByToolId(string toolId);
    public void LoadServicesData(LocationServiceData locationServiceData, bool allServicesIncluded);
    private void DetermineClientAndDefaultZones(string defaultAccessMappingMoniker);
    public IEnumerable`1<AccessMapping> get_AccessMappings();
    public void RemoveAccessMapping(string moniker);
    public void AddCachedMiss(string serviceType, Guid serviceIdentifier, int missedLastChangeId);
    public int GetLastChangeId();
    internal DateTime GetCacheExpirationDate();
    private void SetLastChangeId(int lastChangeId, bool allServicesUpdated);
    private string BuildCacheMissString(string serviceType, Guid serviceIdentifier);
    internal void EnsureDiskCacheLoaded();
    private void m_fileSystemWatcher_Changed(object sender, FileSystemEventArgs e);
    public void WriteCacheToDisk();
    [CompilerGeneratedAttribute]
internal Nullable`1<int> get_ClientCacheTimeToLive();
    [CompilerGeneratedAttribute]
internal void set_ClientCacheTimeToLive(Nullable`1<int> value);
}
public class Microsoft.TeamFoundation.Framework.Client.LocationMapping : object {
    private string m_accessMappingMoniker;
    private string m_location;
    [ObsoleteAttribute("This property is not used, use AccessMappingMoniker")]
public AccessMapping AccessMapping { get; }
    public string AccessMappingMoniker { get; internal set; }
    public string Location { get; internal set; }
    internal LocationMapping(string accessMappingMoniker, string location);
    public AccessMapping get_AccessMapping();
    public string get_AccessMappingMoniker();
    internal void set_AccessMappingMoniker(string value);
    public string get_Location();
    internal void set_Location(string value);
    internal void PrepareForWebServiceSerialization();
    [EditorBrowsableAttribute("1")]
public static LocationMapping FromXml(IServiceProvider serviceProvider, XmlReader reader);
    public virtual string ToString();
    [EditorBrowsableAttribute("1")]
public void ToXml(XmlWriter writer, string element);
    [EditorBrowsableAttribute("1")]
public static void ToXml(XmlWriter writer, string element, LocationMapping obj);
}
public class Microsoft.TeamFoundation.Framework.Client.LocationMappingDoesNotExistException : TeamFoundationLocationServiceException {
    public LocationMappingDoesNotExistException(string message);
    public LocationMappingDoesNotExistException(string message, Exception ex);
    protected LocationMappingDoesNotExistException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.TeamFoundation.Framework.Client.LocationNotFoundException : RequestFilterException {
    public LocationNotFoundException(string message);
    public LocationNotFoundException(string message, Exception ex);
    protected LocationNotFoundException(SerializationInfo info, StreamingContext context);
}
public static class Microsoft.TeamFoundation.Framework.Client.LocationServerMapCache : object {
    private static ReaderWriterLockSlim s_accessLock;
    private static Dictionary`2<string, Guid> s_serverMappings;
    private static string s_filePath;
    private static FileSystemWatcher s_fileWatcher;
    private static bool s_cacheFreshLocally;
    private static bool s_cacheUnavailable;
    private static object s_cacheMutex;
    private static string s_fileName;
    private static string s_documentXmlText;
    private static string s_mappingXmlText;
    private static string s_locationAttribute;
    private static string s_guidAttribute;
    private static string FilePath { get; }
    private static LocationServerMapCache();
    public static string ReadServerLocation(Guid serverId);
    public static Guid ReadServerGuid(string location);
    public static bool EnsureServerMappingExists(string location, Guid serverId);
    private static void EnsureCacheLoaded();
    private static void s_fileWatcher_Changed(object sender, FileSystemEventArgs e);
    private static bool TryWriteMappingToDisk(string location, Guid serverGuid, bool isNew);
    private static void AddMappingNode(XmlNode parentNode, string location, Guid guid);
    private static string get_FilePath();
}
internal class Microsoft.TeamFoundation.Framework.Client.LocationServiceData : object {
    internal AccessMapping[] m_accessMappings;
    private bool m_accessPointsDoNotIncludeWebAppRelativeDirectory;
    private bool m_clientCacheFresh;
    private int m_clientCacheTimeToLive;
    private string m_defaultAccessMappingMoniker;
    private int m_lastChangeId;
    internal ServiceDefinition[] m_serviceDefinitions;
    public AccessMapping[] AccessMappings { get; public set; }
    public bool AccessPointsDoNotIncludeWebAppRelativeDirectory { get; public set; }
    public bool ClientCacheFresh { get; public set; }
    public int ClientCacheTimeToLive { get; public set; }
    public string DefaultAccessMappingMoniker { get; public set; }
    public int LastChangeId { get; public set; }
    public ServiceDefinition[] ServiceDefinitions { get; public set; }
    public AccessMapping[] get_AccessMappings();
    public void set_AccessMappings(AccessMapping[] value);
    public bool get_AccessPointsDoNotIncludeWebAppRelativeDirectory();
    public void set_AccessPointsDoNotIncludeWebAppRelativeDirectory(bool value);
    public bool get_ClientCacheFresh();
    public void set_ClientCacheFresh(bool value);
    public int get_ClientCacheTimeToLive();
    public void set_ClientCacheTimeToLive(int value);
    public string get_DefaultAccessMappingMoniker();
    public void set_DefaultAccessMappingMoniker(string value);
    public int get_LastChangeId();
    public void set_LastChangeId(int value);
    public ServiceDefinition[] get_ServiceDefinitions();
    public void set_ServiceDefinitions(ServiceDefinition[] value);
    internal static LocationServiceData FromXml(IServiceProvider serviceProvider, XmlReader reader);
    public virtual string ToString();
    internal void ToXml(XmlWriter writer, string element);
    internal static void ToXml(XmlWriter writer, string element, LocationServiceData obj);
}
internal class Microsoft.TeamFoundation.Framework.Client.LocationWebService : TfsHttpClient {
    protected Guid CollectionServiceIdentifier { get; }
    protected string ComponentName { get; }
    protected Guid ConfigurationServiceIdentifier { get; }
    protected string ServiceType { get; }
    public LocationWebService(TfsConnection connection);
    protected virtual Uri GetServiceLocation();
    protected virtual Guid get_CollectionServiceIdentifier();
    protected virtual string get_ComponentName();
    protected virtual Guid get_ConfigurationServiceIdentifier();
    protected virtual string get_ServiceType();
    public LocationServiceData ConfigureAccessMapping(AccessMapping accessMapping, int lastChangeId, bool makeDefault);
    public ConnectionData Connect(int connectOptions, int lastChangeId, int features);
    protected virtual Exception ConvertException(SoapException exception);
    public LocationServiceData QueryServices(ServiceTypeFilter[] serviceTypeFilters, int lastChangeId);
    public LocationServiceData RemoveAccessMapping(AccessMapping accessMapping, int lastChangeId);
    public LocationServiceData RemoveServiceDefinitions(ServiceDefinition[] serviceDefinitions, int lastChangeId);
    public LocationServiceData SaveServiceDefinitions(ServiceDefinition[] serviceDefinitions, int lastChangeId);
    public LocationServiceData SetDefaultAccessMapping(AccessMapping accessMapping, int lastChangeId);
}
internal class Microsoft.TeamFoundation.Framework.Client.LocationXmlOperator : object {
    private Dictionary`2<string, string> m_accessMappingLocationServiceUrls;
    private bool m_isClientCache;
    private static string s_lastChangeId;
    private static string s_cacheExpirationDate;
    private static string s_defaultAccessMappingMoniker;
    private static string s_virtualDirectory;
    private static string s_services;
    private static string s_cachedMisses;
    private static string s_serviceDefinition;
    private static string s_cachedMiss;
    private static string s_serviceType;
    private static string s_identifier;
    private static string s_displayName;
    private static string s_locationServiceUrl;
    private static string s_description;
    private static string s_toolId;
    private static string s_relativePath;
    private static string s_relativeTo;
    private static string s_locationMappings;
    private static string s_locationMapping;
    private static string s_location;
    private static string s_accessMappings;
    private static string s_accessMapping;
    private static string s_moniker;
    private static string s_accessPoint;
    public LocationXmlOperator(bool isClientCache);
    private static LocationXmlOperator();
    public List`1<ServiceDefinition> ReadServices(XmlDocument document, Dictionary`2<string, AccessMapping> accessMappings);
    public List`1<string> ReadCachedMisses(XmlDocument document);
    public List`1<AccessMapping> ReadAccessMappings(XmlDocument document);
    public int ReadLastChangeId(XmlDocument document);
    public DateTime ReadCacheExpirationDate(XmlDocument document);
    public string ReadDefaultAccessMappingMoniker(XmlDocument document);
    public string ReadVirtualDirectory(XmlDocument document);
    public void WriteLastChangeId(XmlNode documentNode, int lastChangeId);
    public void WriteCacheExpirationDate(XmlNode documentNode, DateTime cacheExpirationDate);
    public void WriteDefaultAccessMappingMoniker(XmlNode documentNode, string defaultAccessMappingMoniker);
    public void WriteVirtualDirectory(XmlNode documentNode, string virtualDirectory);
    public void WriteAccessMappings(XmlNode documentNode, IEnumerable`1<AccessMapping> accessMappings);
    public void WriteServices(XmlNode documentNode, IEnumerable`1<ServiceDefinition> serviceDefintions);
    public void WriteCachedMisses(XmlNode documentNode, IEnumerable`1<string> cachedMisses);
    public string GetLocationServiceUrl(string moniker);
    private static void CheckXmlNodeNull(XmlNode node, string nodeName, XmlNode parent);
    private static void CheckXmlNodeNullOrEmpty(XmlNode node, string nodeName, XmlNode parent);
    private static void CheckXmlAttributeNullOrEmpty(XmlAttribute attribute, string attributeName, XmlNode element);
}
public class Microsoft.TeamFoundation.Framework.Client.LockTimeoutException : TeamFoundationServiceException {
    public LockTimeoutException(string message);
    public LockTimeoutException(string message, Exception ex);
    protected LockTimeoutException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.TeamFoundation.Framework.Client.MaximumDepthExceededException : CommonStructureSubsystemServiceException {
    public MaximumDepthExceededException(string message);
    public MaximumDepthExceededException(string message, Exception ex);
    protected MaximumDepthExceededException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.TeamFoundation.Framework.Client.MessageQueueAlreadyExistsException : TeamFoundationMessageQueueException {
    public MessageQueueAlreadyExistsException(string message);
    public MessageQueueAlreadyExistsException(string message, Exception ex);
    protected MessageQueueAlreadyExistsException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.TeamFoundation.Framework.Client.MessageQueueNotFoundException : TeamFoundationMessageQueueException {
    public MessageQueueNotFoundException(string message);
    public MessageQueueNotFoundException(string message, Exception ex);
    protected MessageQueueNotFoundException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.TeamFoundation.Framework.Client.MissingFeatureException : TeamFoundationServiceException {
    public MissingFeatureException(string message);
    public MissingFeatureException(string message, Exception ex);
    protected MissingFeatureException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.TeamFoundation.Framework.Client.ModifyEveryoneGroupException : TeamFoundationIdentityServiceException {
    public ModifyEveryoneGroupException(string message);
    public ModifyEveryoneGroupException(string message, Exception ex);
    protected ModifyEveryoneGroupException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.TeamFoundation.Framework.Client.MoveArgumentOutOfRangeException : CommonStructureSubsystemServiceException {
    public MoveArgumentOutOfRangeException(string message);
    public MoveArgumentOutOfRangeException(string message, Exception ex);
    protected MoveArgumentOutOfRangeException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.TeamFoundation.Framework.Client.MultipleIdentitiesFoundException : TeamFoundationIdentityServiceException {
    [CompilerGeneratedAttribute]
private string <FactorValue>k__BackingField;
    [CompilerGeneratedAttribute]
private TeamFoundationIdentity[] <MatchingIdentities>k__BackingField;
    private String[] m_displayNames;
    private String[] m_uniqueNames;
    public string FactorValue { get; private set; }
    public TeamFoundationIdentity[] MatchingIdentities { get; private set; }
    [EditorBrowsableAttribute("1")]
public String[] MatchingIdentityDisplayNames { get; }
    [EditorBrowsableAttribute("1")]
public String[] MatchingIdentityUniqueNames { get; }
    public MultipleIdentitiesFoundException(string factorValue, TeamFoundationIdentity[] matchingIdentities);
    public MultipleIdentitiesFoundException(string message);
    public MultipleIdentitiesFoundException(string message, Exception ex);
    protected MultipleIdentitiesFoundException(SerializationInfo info, StreamingContext context);
    private static string BuildExceptionMessage(string factorValue, TeamFoundationIdentity[] matchingIdentities);
    [CompilerGeneratedAttribute]
public string get_FactorValue();
    [CompilerGeneratedAttribute]
private void set_FactorValue(string value);
    [CompilerGeneratedAttribute]
public TeamFoundationIdentity[] get_MatchingIdentities();
    [CompilerGeneratedAttribute]
private void set_MatchingIdentities(TeamFoundationIdentity[] value);
    public String[] get_MatchingIdentityDisplayNames();
    public String[] get_MatchingIdentityUniqueNames();
}
public class Microsoft.TeamFoundation.Framework.Client.MultiplePartitionsNotSupportedException : TeamFoundationServiceException {
    public MultiplePartitionsNotSupportedException(string message);
    public MultiplePartitionsNotSupportedException(string message, Exception ex);
    protected MultiplePartitionsNotSupportedException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.TeamFoundation.Framework.Client.NodeAlreadyExistsException : CommonStructureSubsystemServiceException {
    public NodeAlreadyExistsException(string message);
    public NodeAlreadyExistsException(string message, Exception ex);
    protected NodeAlreadyExistsException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.TeamFoundation.Framework.Client.NodeDoesNotExistException : NodeUriDoesNotExistException {
    public NodeDoesNotExistException(string message);
    public NodeDoesNotExistException(string message, Exception ex);
    protected NodeDoesNotExistException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.TeamFoundation.Framework.Client.NodePathDoesNotExistException : CommonStructureSubsystemServiceException {
    public NodePathDoesNotExistException(string message);
    public NodePathDoesNotExistException(string message, Exception ex);
    protected NodePathDoesNotExistException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.TeamFoundation.Framework.Client.NodeUriDoesNotExistException : CommonStructureSubsystemServiceException {
    public NodeUriDoesNotExistException(string message);
    public NodeUriDoesNotExistException(string message, Exception ex);
    protected NodeUriDoesNotExistException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.TeamFoundation.Framework.Client.NotApplicationGroupException : TeamFoundationIdentityServiceException {
    public NotApplicationGroupException(string message);
    public NotApplicationGroupException(string message, Exception ex);
    protected NotApplicationGroupException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.TeamFoundation.Framework.Client.NotASecurityGroupException : TeamFoundationIdentityServiceException {
    public NotASecurityGroupException(string message);
    public NotASecurityGroupException(string message, Exception ex);
    protected NotASecurityGroupException(SerializationInfo info, StreamingContext context);
}
[EditorBrowsableAttribute("1")]
public abstract class Microsoft.TeamFoundation.Framework.Client.Offline.LocalMetadataTable : object {
    [CompilerGeneratedAttribute]
private bool <IsAborted>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsEligibleForCachedLoad>k__BackingField;
    private bool m_flushToDisk;
    private bool m_dirty;
    private string m_fileName;
    private int m_retryCount;
    private bool m_loadFromBackup;
    private WIN32_FILE_ATTRIBUTE_DATA m_savedAttributes;
    private WIN32_FILE_ATTRIBUTE_DATA m_loadAttributes;
    private LocalMetadataTableLock m_tableLock;
    protected static string c_extensionSlotOne;
    protected static string c_extensionSlotTwo;
    protected static string c_extensionSlotThree;
    protected static string c_extensionSlotBackup;
    protected String[] TraceKeywords { get; }
    public bool IsDirty { get; public set; }
    public bool FlushToDisk { get; public set; }
    internal bool IsAborted { get; internal set; }
    internal bool IsEligibleForCachedLoad { get; internal set; }
    internal WIN32_FILE_ATTRIBUTE_DATA SavedAttributes { get; }
    internal WIN32_FILE_ATTRIBUTE_DATA LoadAttributes { get; }
    public string FileName { get; }
    protected LocalMetadataTable(string fileName);
    protected LocalMetadataTable(string fileName, bool loadFromBackup);
    protected LocalMetadataTable(string fileName, LocalMetadataTable cachedLoadSource);
    protected LocalMetadataTable(string fileName, LocalMetadataTable cachedLoadSource, int retryCount);
    protected LocalMetadataTable(string fileName, LocalMetadataTable cachedLoadSource, int retryCount, object initializeData);
    protected LocalMetadataTable(string fileName, LocalMetadataTable cachedLoadSource, int retryCount, object initializeData, bool loadFromBackup);
    public void Close();
    public sealed virtual void Dispose();
    protected virtual void Dispose(bool disposing);
    private void MakeEligibleForCachedLoad(bool dirty);
    protected abstract virtual void Load(SafeFileHandle fileHandle);
    protected abstract virtual bool Save(SafeFileHandle fileHandle);
    protected virtual void Initialize(object initializeData);
    protected virtual void SaveComplete();
    protected virtual bool CachedLoad(LocalMetadataTable source);
    private bool TryCachedLoad(LocalMetadataTable source);
    [CLSCompliantAttribute("False")]
public static bool AttributesMatch(WIN32_FILE_ATTRIBUTE_DATA attrs1, WIN32_FILE_ATTRIBUTE_DATA attrs2);
    protected abstract virtual String[] get_TraceKeywords();
    public bool get_IsDirty();
    public void set_IsDirty(bool value);
    public bool get_FlushToDisk();
    public void set_FlushToDisk(bool value);
    [CompilerGeneratedAttribute]
internal bool get_IsAborted();
    [CompilerGeneratedAttribute]
internal void set_IsAborted(bool value);
    [CompilerGeneratedAttribute]
internal bool get_IsEligibleForCachedLoad();
    [CompilerGeneratedAttribute]
internal void set_IsEligibleForCachedLoad(bool value);
    private void Recover();
    public void BackupFile();
    public bool NeedsBackup(int maximumPermissibleBackupAgeInSeconds);
    public void CorruptTable();
    private void PositionFile(bool keepFile);
    private SafeFileHandle GetReadHandle(bool loadFromBackup);
    private SafeFileHandle GetWriteHandle();
    public static string GetSlotOnePath(string fileName);
    public static string GetSlotTwoPath(string fileName);
    public static string GetSlotThreePath(string fileName);
    public static string GetSlotBackupPath(string fileName);
    internal WIN32_FILE_ATTRIBUTE_DATA get_SavedAttributes();
    internal WIN32_FILE_ATTRIBUTE_DATA get_LoadAttributes();
    public string get_FileName();
}
internal class Microsoft.TeamFoundation.Framework.Client.Offline.LocalMetadataTableLock : object {
    private Mutex m_mutex;
    private bool m_holdsMutex;
    private string m_mutexName;
    private string m_yieldRequestMutexName;
    private int m_retryCount;
    private Func`1<bool> m_spinDelegate;
    private static MutexSecurity s_mutexSecurity;
    private static string c_globalNamespacePrefix;
    private static LocalMetadataTableLock();
    public LocalMetadataTableLock(string fileName);
    public LocalMetadataTableLock(string fileName, bool requestYield);
    public LocalMetadataTableLock(string fileName, bool requestYield, Func`1<bool> spinDelegate);
    public LocalMetadataTableLock(string fileName, int retryCount, bool requestYield);
    public LocalMetadataTableLock(string fileName, int retryCount, bool requestYield, Func`1<bool> spinDelegate);
    private void Acquire(bool requestYield);
    public sealed virtual void Dispose();
    public bool IsYieldRequested();
    public void Yield();
}
internal class Microsoft.TeamFoundation.Framework.Client.Offline.SpinDelegateSucceededException : Exception {
}
internal class Microsoft.TeamFoundation.Framework.Client.OutboundLinkType : object {
    private string m_name;
    private string m_targetArtifactTypeName;
    private string m_targetArtifactTypeTool;
    public string Name { get; public set; }
    public string TargetArtifactTypeName { get; public set; }
    public string TargetArtifactTypeTool { get; public set; }
    public string get_Name();
    public void set_Name(string value);
    public string get_TargetArtifactTypeName();
    public void set_TargetArtifactTypeName(string value);
    public string get_TargetArtifactTypeTool();
    public void set_TargetArtifactTypeTool(string value);
    internal static OutboundLinkType FromXml(IServiceProvider serviceProvider, XmlReader reader);
    public virtual string ToString();
    internal void ToXml(XmlWriter writer, string element);
    internal static void ToXml(XmlWriter writer, string element, OutboundLinkType obj);
    internal static OutboundLinkType[] Convert(OutboundLinkType[] outboundLinkTypes);
    internal OutboundLinkType ToOutboundLinkType();
}
public class Microsoft.TeamFoundation.Framework.Client.ParentNodeDoesNotExistException : ParentNodeUriDoesNotExistException {
    public ParentNodeDoesNotExistException(string message);
    public ParentNodeDoesNotExistException(string message, Exception ex);
    protected ParentNodeDoesNotExistException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.TeamFoundation.Framework.Client.ParentNodeUriDoesNotExistException : CommonStructureSubsystemServiceException {
    public ParentNodeUriDoesNotExistException(string message);
    public ParentNodeUriDoesNotExistException(string message, Exception ex);
    protected ParentNodeUriDoesNotExistException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.TeamFoundation.Framework.Client.ParseException : TeamFoundationServiceException {
    public ParseException(string message);
    public ParseException(string message, Exception ex);
    protected ParseException(SerializationInfo info, StreamingContext context);
}
internal class Microsoft.TeamFoundation.Framework.Client.ProcessTemplateWebService : TfsHttpClient {
    protected Guid CollectionServiceIdentifier { get; }
    protected string ComponentName { get; }
    protected string ServiceType { get; }
    public ProcessTemplateWebService(TfsTeamProjectCollection connection);
    protected virtual Guid get_CollectionServiceIdentifier();
    protected virtual string get_ComponentName();
    protected virtual string get_ServiceType();
    protected virtual Exception ConvertException(SoapException exception);
    public FrameworkTemplateHeader[] DeleteTemplate(int templateId);
    public FrameworkTemplateHeader[] MakeDefaultTemplate(int templateId);
    public FrameworkTemplateHeader[] TemplateHeaders();
}
public class Microsoft.TeamFoundation.Framework.Client.ProjectAlreadyExistsException : CommonStructureSubsystemServiceException {
    public ProjectAlreadyExistsException(string message);
    public ProjectAlreadyExistsException(string message, Exception ex);
    protected ProjectAlreadyExistsException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.TeamFoundation.Framework.Client.ProjectDoesNotExistException : CssProjectUriDoesNotExistException {
    public ProjectDoesNotExistException(string message);
    public ProjectDoesNotExistException(string message, Exception ex);
    protected ProjectDoesNotExistException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.TeamFoundation.Framework.Client.ProjectDoesNotExistWithNameException : CommonStructureSubsystemServiceException {
    public ProjectDoesNotExistWithNameException(string message);
    public ProjectDoesNotExistWithNameException(string message, Exception ex);
    protected ProjectDoesNotExistWithNameException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.TeamFoundation.Framework.Client.ProjectNameNotRecognizedException : CommonStructureSubsystemServiceException {
    public ProjectNameNotRecognizedException(string message);
    public ProjectNameNotRecognizedException(string message, Exception ex);
    protected ProjectNameNotRecognizedException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.TeamFoundation.Framework.Client.ProjectNotFoundException : TeamFoundationIdentityServiceException {
    public ProjectNotFoundException(string message);
    public ProjectNotFoundException(string message, Exception ex);
    protected ProjectNotFoundException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.TeamFoundation.Framework.Client.ProjectWorkPendingException : TeamFoundationServiceException {
    public ProjectWorkPendingException(string message);
    public ProjectWorkPendingException(string message, Exception ex);
    protected ProjectWorkPendingException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.TeamFoundation.Framework.Client.PropertyDefinitionDoesNotExistException : PropertyServiceException {
    public PropertyDefinitionDoesNotExistException(string message);
    public PropertyDefinitionDoesNotExistException(string message, Exception ex);
    protected PropertyDefinitionDoesNotExistException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.TeamFoundation.Framework.Client.PropertyServiceException : TeamFoundationServiceException {
    public PropertyServiceException(string message);
    public PropertyServiceException(string message, Exception ex);
    protected PropertyServiceException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.TeamFoundation.Framework.Client.PropertyValue : object {
    private bool m_isValueDirty;
    private object m_internalValue;
    private string m_propertyName;
    public object Value { get; public set; }
    public Type PropertyType { get; }
    internal bool IsValueDirty { get; }
    internal object InternalValue { get; internal set; }
    public string PropertyName { get; internal set; }
    public PropertyValue(string propertyName, int value);
    public PropertyValue(string propertyName, double value);
    public PropertyValue(string propertyName, DateTime value);
    public PropertyValue(string propertyName, string value);
    public PropertyValue(string propertyName, Byte[] value);
    public PropertyValue(string propertyName, object value);
    public object get_Value();
    public void set_Value(object value);
    public Type get_PropertyType();
    internal bool get_IsValueDirty();
    internal object get_InternalValue();
    internal void set_InternalValue(object value);
    public string get_PropertyName();
    internal void set_PropertyName(string value);
    [EditorBrowsableAttribute("1")]
public static PropertyValue FromXml(IServiceProvider serviceProvider, XmlReader reader);
    public virtual string ToString();
    [EditorBrowsableAttribute("1")]
public void ToXml(XmlWriter writer, string element);
    [EditorBrowsableAttribute("1")]
public static void ToXml(XmlWriter writer, string element, PropertyValue obj);
}
internal class Microsoft.TeamFoundation.Framework.Client.PropertyWebService : TfsHttpClient {
    protected Guid CollectionServiceIdentifier { get; }
    protected string ComponentName { get; }
    protected Guid ConfigurationServiceIdentifier { get; }
    protected string ServiceType { get; }
    public PropertyWebService(TfsConnection connection);
    protected virtual Guid get_CollectionServiceIdentifier();
    protected virtual string get_ComponentName();
    protected virtual Guid get_ConfigurationServiceIdentifier();
    protected virtual string get_ServiceType();
    protected virtual Exception ConvertException(SoapException exception);
    public ArtifactPropertyValue[] GetProperties(ArtifactSpec[] artifactSpecs, String[] propertyNameFilters, int options);
    public void SetProperties(ArtifactPropertyValue[] artifactPropertyValues);
}
public class Microsoft.TeamFoundation.Framework.Client.ProxyAlreadyAddedToSiteException : ProxyException {
    public ProxyAlreadyAddedToSiteException(string message);
    public ProxyAlreadyAddedToSiteException(string message, Exception ex);
    protected ProxyAlreadyAddedToSiteException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.TeamFoundation.Framework.Client.ProxyCacheMissBecameHitException : ProxyException {
    public ProxyCacheMissBecameHitException(string message);
    public ProxyCacheMissBecameHitException(string message, Exception ex);
    protected ProxyCacheMissBecameHitException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.TeamFoundation.Framework.Client.ProxyClientRedirectException : ProxyException {
    public ProxyClientRedirectException(string message);
    public ProxyClientRedirectException(string message, Exception ex);
    protected ProxyClientRedirectException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.TeamFoundation.Framework.Client.ProxyException : TeamFoundationServiceException {
    public ProxyException(string message);
    public ProxyException(string message, Exception ex);
    protected ProxyException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.TeamFoundation.Framework.Client.QueryExpressionException : TeamFoundationServiceException {
    public QueryExpressionException(string message);
    public QueryExpressionException(string message, Exception ex);
    protected QueryExpressionException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.TeamFoundation.Framework.Client.ReaderAbortedException : ProxyException {
    public ReaderAbortedException(string message);
    public ReaderAbortedException(string message, Exception ex);
    protected ReaderAbortedException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.TeamFoundation.Framework.Client.ReclassificationNodeDoesNotExistException : CommonStructureSubsystemServiceException {
    public ReclassificationNodeDoesNotExistException(string message);
    public ReclassificationNodeDoesNotExistException(string message, Exception ex);
    protected ReclassificationNodeDoesNotExistException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.TeamFoundation.Framework.Client.ReclassificationNodeUriDoesNotExistException : CommonStructureSubsystemServiceException {
    public ReclassificationNodeUriDoesNotExistException(string message);
    public ReclassificationNodeUriDoesNotExistException(string message, Exception ex);
    protected ReclassificationNodeUriDoesNotExistException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.TeamFoundation.Framework.Client.ReclassifiedToDifferentTreeException : InvalidReclassificationException {
    public ReclassifiedToDifferentTreeException(string message);
    public ReclassifiedToDifferentTreeException(string message, Exception ex);
    protected ReclassifiedToDifferentTreeException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.TeamFoundation.Framework.Client.ReclassifiedToSubTreeException : InvalidReclassificationException {
    public ReclassifiedToSubTreeException(string message);
    public ReclassifiedToSubTreeException(string message, Exception ex);
    protected ReclassifiedToSubTreeException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.TeamFoundation.Framework.Client.RedirectionException : TeamFoundationServiceException {
    public RedirectionException(string message);
    public RedirectionException(string message, Exception ex);
    protected RedirectionException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.TeamFoundation.Framework.Client.RegisterObjectBadParentException : AuthorizationSubsystemServiceException {
    public RegisterObjectBadParentException(string message);
    public RegisterObjectBadParentException(string message, Exception ex);
    protected RegisterObjectBadParentException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.TeamFoundation.Framework.Client.RegisterObjectExistsException : AuthorizationSubsystemServiceException {
    public RegisterObjectExistsException(string message);
    public RegisterObjectExistsException(string message, Exception ex);
    protected RegisterObjectExistsException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.TeamFoundation.Framework.Client.RegisterObjectNoClassException : AuthorizationSubsystemServiceException {
    public RegisterObjectNoClassException(string message);
    public RegisterObjectNoClassException(string message, Exception ex);
    protected RegisterObjectNoClassException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.TeamFoundation.Framework.Client.RegisterObjectNoProjectException : AuthorizationSubsystemServiceException {
    public RegisterObjectNoProjectException(string message);
    public RegisterObjectNoProjectException(string message, Exception ex);
    protected RegisterObjectNoProjectException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.TeamFoundation.Framework.Client.RegisterObjectProjectMismatchException : AuthorizationSubsystemServiceException {
    public RegisterObjectProjectMismatchException(string message);
    public RegisterObjectProjectMismatchException(string message, Exception ex);
    protected RegisterObjectProjectMismatchException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.TeamFoundation.Framework.Client.RegisterProjectException : AuthorizationSubsystemServiceException {
    public RegisterProjectException(string message);
    public RegisterProjectException(string message, Exception ex);
    protected RegisterProjectException(SerializationInfo info, StreamingContext context);
}
internal class Microsoft.TeamFoundation.Framework.Client.Registration : TfsHttpClient {
    protected Guid CollectionServiceIdentifier { get; }
    protected string ComponentName { get; }
    protected string ServiceType { get; }
    public Registration(TfsTeamProjectCollection connection);
    internal Registration(TfsTeamProjectCollection server, string url);
    protected virtual Guid get_CollectionServiceIdentifier();
    protected virtual string get_ComponentName();
    protected virtual string get_ServiceType();
    protected virtual Exception ConvertException(SoapException exception);
    public FrameworkRegistrationEntry[] GetRegistrationEntries(string toolId);
}
internal class Microsoft.TeamFoundation.Framework.Client.RegistrationArtifactType : object {
    private string m_name;
    internal OutboundLinkType[] m_outboundLinkTypes;
    public string Name { get; public set; }
    public OutboundLinkType[] OutboundLinkTypes { get; public set; }
    public string get_Name();
    public void set_Name(string value);
    public OutboundLinkType[] get_OutboundLinkTypes();
    public void set_OutboundLinkTypes(OutboundLinkType[] value);
    internal static RegistrationArtifactType FromXml(IServiceProvider serviceProvider, XmlReader reader);
    public virtual string ToString();
    internal void ToXml(XmlWriter writer, string element);
    internal static void ToXml(XmlWriter writer, string element, RegistrationArtifactType obj);
    internal static ArtifactType[] Convert(RegistrationArtifactType[] artifactTypes);
    internal ArtifactType ToArtifactType();
}
internal class Microsoft.TeamFoundation.Framework.Client.RegistrationDatabase : object {
    private string m_connectionString;
    private string m_databaseName;
    private bool m_excludeFromBackup;
    private string m_name;
    private string m_sQLServerName;
    public string ConnectionString { get; public set; }
    public string DatabaseName { get; public set; }
    public bool ExcludeFromBackup { get; public set; }
    public string Name { get; public set; }
    public string SQLServerName { get; public set; }
    public string get_ConnectionString();
    public void set_ConnectionString(string value);
    public string get_DatabaseName();
    public void set_DatabaseName(string value);
    public bool get_ExcludeFromBackup();
    public void set_ExcludeFromBackup(bool value);
    public string get_Name();
    public void set_Name(string value);
    public string get_SQLServerName();
    public void set_SQLServerName(string value);
    internal static RegistrationDatabase FromXml(IServiceProvider serviceProvider, XmlReader reader);
    public virtual string ToString();
    internal void ToXml(XmlWriter writer, string element);
    internal static void ToXml(XmlWriter writer, string element, RegistrationDatabase obj);
    internal static Database[] Convert(RegistrationDatabase[] databases);
    internal Database ToDatabase();
}
internal class Microsoft.TeamFoundation.Framework.Client.RegistrationExtendedAttribute2 : object {
    private string m_name;
    private string m_value;
    public string Name { get; public set; }
    public string Value { get; public set; }
    public string get_Name();
    public void set_Name(string value);
    public string get_Value();
    public void set_Value(string value);
    internal static RegistrationExtendedAttribute2 FromXml(IServiceProvider serviceProvider, XmlReader reader);
    public virtual string ToString();
    internal void ToXml(XmlWriter writer, string element);
    internal static void ToXml(XmlWriter writer, string element, RegistrationExtendedAttribute2 obj);
    internal static RegistrationExtendedAttribute[] Convert(RegistrationExtendedAttribute2[] extendedAttributes);
    internal RegistrationExtendedAttribute ToExtendedAttribute();
}
internal class Microsoft.TeamFoundation.Framework.Client.RegistrationProxy : object {
    private Registration _proxy;
    private string _tfsServerUrl;
    private static string _UrlSeparator;
    internal RegistrationProxy(TfsTeamProjectCollection tfsObject, string url);
    public FrameworkRegistrationEntry[] GetRegistrationEntries(string toolId);
    internal static void ExpandRelativeUrls(FrameworkRegistrationEntry[] regEntries, string tfsServerUrl);
    private static string GetAbsoluteUrl(string relativeUrl, string tfsServerUrl);
}
internal class Microsoft.TeamFoundation.Framework.Client.RegistrationService : object {
    private static int s_maxCountForRetry;
    private static TimeSpan s_maxTimeForRetry;
    private static TimeSpan s_timeToSleepBetweenRetries;
    public static string s_vstfs;
    public static string s_instanceIdName;
    public static string RegistrationRefreshDurationInSeconds;
    public static string FileCacheName;
    public static double DefaultRefreshDurationInSeconds;
    public static bool s_enableDiskCaching;
    public static string RegistrationFileCachePath;
    private RegistrationProxy m_RegProxy;
    private string m_Url;
    private TfsTeamProjectCollection m_tfsObject;
    private ArrayList m_RegEntryList;
    private double m_RefreshDurationInSeconds;
    private DateTime m_LastRefreshTime;
    private string m_FileCachePath;
    private string m_instanceCacheDirectory;
    private static Dictionary`2<string, string> s_serverMap;
    private static string s_serverMapFileName;
    private static string s_serverMapPath;
    private static string s_arrayOfEntryElement;
    private static string s_entryElement;
    private static string s_keyElement;
    private static string s_valueElement;
    private Guid Microsoft.TeamFoundation.Server.IRegistration.InstanceId { get; }
    private string Microsoft.TeamFoundation.Server.IRegistration.InstanceClientCacheDirectory { get; }
    public string InstanceClientCacheDirectory { get; }
    public Guid InstanceId { get; }
    private static RegistrationService();
    internal RegistrationService(TfsTeamProjectCollection tfsObject);
    private string ConstructRegistrationUrl();
    public static void ExpandRelativeUrls(FrameworkRegistrationEntry[] entries, string tfsServerUrl);
    private void RefreshCachesIfNeeded(bool direct);
    private sealed virtual override RegistrationEntry[] Microsoft.TeamFoundation.Server.IRegistration.GetRegistrationEntries(string toolId);
    private sealed virtual override RegistrationEntry[] Microsoft.TeamFoundation.Server.IRegistration.GetRegistrationEntriesFromServer(string toolId);
    private sealed virtual override Guid Microsoft.TeamFoundation.Server.IRegistration.get_InstanceId();
    private sealed virtual override string Microsoft.TeamFoundation.Server.IRegistration.get_InstanceClientCacheDirectory();
    public sealed virtual FrameworkRegistrationEntry[] GetRegistrationEntries(string toolId);
    public FrameworkRegistrationEntry[] GetRegistrationEntriesFromServer(string toolId);
    private FrameworkRegistrationEntry[] GetRegistrationEntriesFromMemoryCache(string toolId);
    private bool IsTimeToRefreshCache();
    private void RefreshDiskAndMemoryCacheIfNeeded(bool direct);
    private void RefreshMemoryCache();
    internal void Refresh(bool force);
    private double GetRefreshDurationInSeconds();
    private string GetFileCachePath();
    public sealed virtual string get_InstanceClientCacheDirectory();
    public sealed virtual Guid get_InstanceId();
    private Guid GetInstanceId();
    private static void LoadServerMap();
    private static void SaveServerMap();
    private static FileStream OpenFileStream(string filePath, FileMode mode, FileAccess access);
}
internal class Microsoft.TeamFoundation.Framework.Client.RegistrationServiceInterface : object {
    private string m_name;
    private string m_url;
    public string Name { get; public set; }
    public string Url { get; public set; }
    public string get_Name();
    public void set_Name(string value);
    public string get_Url();
    public void set_Url(string value);
    internal static RegistrationServiceInterface FromXml(IServiceProvider serviceProvider, XmlReader reader);
    public virtual string ToString();
    internal void ToXml(XmlWriter writer, string element);
    internal static void ToXml(XmlWriter writer, string element, RegistrationServiceInterface obj);
    internal static ServiceInterface[] Convert(RegistrationServiceInterface[] serviceInterfaces);
    internal ServiceInterface ToServiceInterface();
}
public class Microsoft.TeamFoundation.Framework.Client.RegistryAuditEntry : object {
    private int m_changeIndex;
    private DateTime m_changeTime;
    private int m_changeTypeValue;
    private RegistryEntry m_entry;
    private string m_identityName;
    public RegistryChangeType ChangeType { get; }
    public int ChangeIndex { get; }
    public DateTime ChangeTime { get; }
    public RegistryEntry Entry { get; }
    public string IdentityName { get; }
    public RegistryChangeType get_ChangeType();
    public int get_ChangeIndex();
    public DateTime get_ChangeTime();
    public RegistryEntry get_Entry();
    public string get_IdentityName();
    [EditorBrowsableAttribute("1")]
public static RegistryAuditEntry FromXml(IServiceProvider serviceProvider, XmlReader reader);
    public virtual string ToString();
    [EditorBrowsableAttribute("1")]
public void ToXml(XmlWriter writer, string element);
    [EditorBrowsableAttribute("1")]
public static void ToXml(XmlWriter writer, string element, RegistryAuditEntry obj);
}
public class Microsoft.TeamFoundation.Framework.Client.RegistryEntry : object {
    private string m_name;
    private string m_path;
    private string m_value;
    public string Name { get; }
    public string Value { get; public set; }
    public string Path { get; }
    public RegistryEntry(string registryPath, string registryValue);
    public string get_Name();
    public string GetValue(string defaultValue);
    public T GetValue();
    public T GetValue(T defaultValue);
    public string get_Value();
    public void set_Value(string value);
    public string get_Path();
    [EditorBrowsableAttribute("1")]
public static RegistryEntry FromXml(IServiceProvider serviceProvider, XmlReader reader);
    public virtual string ToString();
    [EditorBrowsableAttribute("1")]
public void ToXml(XmlWriter writer, string element);
    [EditorBrowsableAttribute("1")]
public static void ToXml(XmlWriter writer, string element, RegistryEntry obj);
}
[DefaultMemberAttribute("Item")]
public class Microsoft.TeamFoundation.Framework.Client.RegistryEntryCollection : object {
    private string m_rootPath;
    private IDictionary`2<string, RegistryEntry> m_map;
    public RegistryEntry Item { get; }
    public int Count { get; }
    public RegistryEntryCollection(string rootPath);
    internal RegistryEntryCollection(string rootPath, ICollection`1<RegistryEntry> entries);
    public RegistryEntry get_Item(string path);
    public int get_Count();
    public bool ContainsPath(string path);
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    private sealed virtual override IEnumerator`1<RegistryEntry> System.Collections.Generic.IEnumerable<Microsoft.TeamFoundation.Framework.Client.RegistryEntry>.GetEnumerator();
}
public class Microsoft.TeamFoundation.Framework.Client.RegistryPathException : TeamFoundationServiceException {
    public RegistryPathException(string message);
    public RegistryPathException(string message, Exception ex);
    protected RegistryPathException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.TeamFoundation.Framework.Client.RegistryPathPatternException : TeamFoundationServiceException {
    public RegistryPathPatternException(string message);
    public RegistryPathPatternException(string message, Exception ex);
    protected RegistryPathPatternException(SerializationInfo info, StreamingContext context);
}
internal class Microsoft.TeamFoundation.Framework.Client.RegistryWebService : TfsHttpClient {
    protected Guid CollectionServiceIdentifier { get; }
    protected string ComponentName { get; }
    protected Guid ConfigurationServiceIdentifier { get; }
    protected string ServiceType { get; }
    public RegistryWebService(TfsConnection connection);
    protected virtual Guid get_CollectionServiceIdentifier();
    protected virtual string get_ComponentName();
    protected virtual Guid get_ConfigurationServiceIdentifier();
    protected virtual string get_ServiceType();
    protected virtual Exception ConvertException(SoapException exception);
    public RegistryAuditEntry[] QueryAuditLog(int changeIndex, bool returnOlder);
    public RegistryEntry[] QueryRegistryEntries(string registryPathPattern, bool includeFolders);
    public RegistryEntry[] QueryUserEntries(string registryPathPattern, bool includeFolders);
    public int RemoveRegistryEntries(String[] registryPathPatterns);
    public int RemoveUserEntries(String[] registryPathPatterns);
    public void UpdateRegistryEntries(IEnumerable`1<RegistryEntry> registryEntries);
    public void UpdateUserEntries(IEnumerable`1<RegistryEntry> registryEntries);
}
internal static class Microsoft.TeamFoundation.Framework.Client.RelativeToEnumCache : object {
    private static Dictionary`2<string, RelativeToSetting> s_relativeToEnums;
    private static RelativeToEnumCache();
    internal static Dictionary`2<string, RelativeToSetting> GetRelativeToEnums();
}
public class Microsoft.TeamFoundation.Framework.Client.RemoveAccessMappingException : TeamFoundationLocationServiceException {
    public RemoveAccessMappingException(string message);
    public RemoveAccessMappingException(string message, Exception ex);
    protected RemoveAccessMappingException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.TeamFoundation.Framework.Client.RemoveAccountOwnerFromAdminGroupException : TeamFoundationIdentityServiceException {
    public RemoveAccountOwnerFromAdminGroupException(string message);
    public RemoveAccountOwnerFromAdminGroupException(string message, Exception ex);
    protected RemoveAccountOwnerFromAdminGroupException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.TeamFoundation.Framework.Client.RemoveGroupMemberException : TeamFoundationIdentityServiceException {
    public RemoveGroupMemberException(string message);
    public RemoveGroupMemberException(string message, Exception ex);
    protected RemoveGroupMemberException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.TeamFoundation.Framework.Client.RemoveGroupMemberNotMemberException : TeamFoundationIdentityServiceException {
    public RemoveGroupMemberNotMemberException(string message);
    public RemoveGroupMemberNotMemberException(string message, Exception ex);
    protected RemoveGroupMemberNotMemberException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.TeamFoundation.Framework.Client.RemoveLastAdminGroupMemberException : TeamFoundationIdentityServiceException {
    public RemoveLastAdminGroupMemberException(string message);
    public RemoveLastAdminGroupMemberException(string message, Exception ex);
    protected RemoveLastAdminGroupMemberException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.TeamFoundation.Framework.Client.RemoveLastLicensedAdminException : TeamFoundationIdentityServiceException {
    public RemoveLastLicensedAdminException(string message);
    public RemoveLastLicensedAdminException(string message, Exception ex);
    protected RemoveLastLicensedAdminException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.TeamFoundation.Framework.Client.RemoveMemberGroupMissingException : TeamFoundationIdentityServiceException {
    public RemoveMemberGroupMissingException(string message);
    public RemoveMemberGroupMissingException(string message, Exception ex);
    protected RemoveMemberGroupMissingException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.TeamFoundation.Framework.Client.RemoveMemberIdentityMissingException : TeamFoundationIdentityServiceException {
    public RemoveMemberIdentityMissingException(string message);
    public RemoveMemberIdentityMissingException(string message, Exception ex);
    protected RemoveMemberIdentityMissingException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.TeamFoundation.Framework.Client.RemoveMemberServiceAccountException : TeamFoundationIdentityServiceException {
    public RemoveMemberServiceAccountException(string message);
    public RemoveMemberServiceAccountException(string message, Exception ex);
    protected RemoveMemberServiceAccountException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.TeamFoundation.Framework.Client.RemoveNonexistentGroupException : TeamFoundationIdentityServiceException {
    public RemoveNonexistentGroupException(string message);
    public RemoveNonexistentGroupException(string message, Exception ex);
    protected RemoveNonexistentGroupException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.TeamFoundation.Framework.Client.RemoveSelfFromAdminGroupException : TeamFoundationIdentityServiceException {
    public RemoveSelfFromAdminGroupException(string message);
    public RemoveSelfFromAdminGroupException(string message, Exception ex);
    protected RemoveSelfFromAdminGroupException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.TeamFoundation.Framework.Client.RemoveSpecialGroupException : TeamFoundationIdentityServiceException {
    public RemoveSpecialGroupException(string message);
    public RemoveSpecialGroupException(string message, Exception ex);
    protected RemoveSpecialGroupException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.TeamFoundation.Framework.Client.ReplaceDescriptorException : TeamFoundationIdentityServiceException {
    public ReplaceDescriptorException(string message);
    public ReplaceDescriptorException(string message, Exception ex);
    protected ReplaceDescriptorException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.TeamFoundation.Framework.Client.RequestCanceledException : TeamFoundationServiceException {
    public RequestCanceledException(string message);
    public RequestCanceledException(string message, Exception ex);
    protected RequestCanceledException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.TeamFoundation.Framework.Client.RequestDisabledDetailsException : RequestFilterException {
    public RequestDisabledDetailsException(string message);
    public RequestDisabledDetailsException(string message, Exception ex);
    protected RequestDisabledDetailsException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.TeamFoundation.Framework.Client.RequestDisabledException : RequestFilterException {
    public RequestDisabledException(string message);
    public RequestDisabledException(string message, Exception ex);
    protected RequestDisabledException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.TeamFoundation.Framework.Client.RequestFilterException : TeamFoundationServiceException {
    public RequestFilterException(string message);
    public RequestFilterException(string message, Exception ex);
    protected RequestFilterException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.TeamFoundation.Framework.Client.ResourceStreamNotFoundException : TeamFoundationServiceException {
    public ResourceStreamNotFoundException(string message);
    public ResourceStreamNotFoundException(string message, Exception ex);
    protected ResourceStreamNotFoundException(SerializationInfo info, StreamingContext context);
}
internal class Microsoft.TeamFoundation.Framework.Client.ResourceUploader : TfsHttpClient {
    private Stream m_resourceStream;
    private string m_resourceName;
    private long m_length;
    private Byte[] m_localHash;
    private Byte[] m_buffer;
    private Stopwatch m_progressTimer;
    private Byte[][] m_parameters;
    private static int s_uploadChunkSize;
    private static Byte[] s_wrapper;
    private static Int32[] s_wrapperOffsets;
    private static Byte[] s_contentType;
    private static int c_defaultUploadChunkSize;
    private static int NumberOfParams;
    private static string MimeBoundary;
    protected string ComponentName { get; }
    protected string ServiceType { get; }
    protected Guid ConfigurationServiceIdentifier { get; }
    private static ResourceUploader();
    public ResourceUploader(TfsConfigurationServer tfs);
    protected virtual string get_ComponentName();
    protected virtual string get_ServiceType();
    protected virtual Guid get_ConfigurationServiceIdentifier();
    internal void UploadResource(string resourceName, Stream resourceStream);
    private void UploadResourceInternal();
    private void CalculateHash();
    private void UploadContent();
    private void UploadChunk(Stream fileContentStream, long end);
    private void LogWebResponse(WebResponse response);
    protected Exception HandleErrorResponse(HttpWebResponse response);
    private void HandleRequest(Stream fileContentStream, Stream requestStream, long end);
    private Byte[] GetRangeFieldMimeParameter(long beginning, long end);
    private static void GenerateMimeWrapper();
}
public class Microsoft.TeamFoundation.Framework.Client.SecurityActionDoesNotExistException : GroupSecuritySubsystemServiceException {
    public SecurityActionDoesNotExistException(string message);
    public SecurityActionDoesNotExistException(string message, Exception ex);
    protected SecurityActionDoesNotExistException(SerializationInfo info, StreamingContext context);
}
public abstract class Microsoft.TeamFoundation.Framework.Client.SecurityNamespace : object {
    public SecurityNamespaceDescription Description { get; }
    public abstract virtual SecurityNamespaceDescription get_Description();
    public abstract virtual bool HasPermission(string token, IdentityDescriptor descriptor, int requestedPermissions, bool alwaysAllowAdministrators);
    public abstract virtual Collection`1<bool> HasPermission(IEnumerable`1<string> tokens, IdentityDescriptor descriptor, int requestedPermissions, bool alwaysAllowAdministrators);
    public abstract virtual Collection`1<bool> HasPermission(string token, IEnumerable`1<IdentityDescriptor> descriptors, int requestedPermissions, bool alwaysAllowAdministrators);
    public abstract virtual Collection`1<bool> HasPermission(string token, IdentityDescriptor descriptor, IEnumerable`1<int> requestedPermissions, bool alwaysAllowAdministrators);
    public abstract virtual bool HasWritePermission(string token, int permissionsToChange);
    public abstract virtual Collection`1<bool> HasWritePermission(string token, IEnumerable`1<int> permissionsToChange);
    public abstract virtual bool RemoveAccessControlLists(string token, bool recurse);
    public abstract virtual bool RemoveAccessControlLists(IEnumerable`1<string> tokens, bool recurse);
    public abstract virtual bool RemoveAccessControlEntries(string token, IEnumerable`1<IdentityDescriptor> descriptors);
    public abstract virtual bool RemoveAccessControlEntry(string token, IdentityDescriptor descriptor);
    public abstract virtual AccessControlEntry RemovePermissions(string token, IdentityDescriptor descriptor, int permissionsToRemove);
    public abstract virtual AccessControlEntry SetPermissions(string token, IdentityDescriptor descriptor, int allow, int deny, bool merge);
    public abstract virtual AccessControlEntry SetAccessControlEntry(string token, AccessControlEntry accessControlEntry, bool merge);
    public abstract virtual Collection`1<AccessControlEntry> SetAccessControlEntries(string token, IEnumerable`1<AccessControlEntry> accessControlEntries, bool merge);
    public abstract virtual void SetAccessControlList(AccessControlList accessControlList);
    public abstract virtual void SetAccessControlLists(IEnumerable`1<AccessControlList> accessControlLists);
    public abstract virtual Collection`1<AccessControlList> QueryAccessControlLists(string token, IEnumerable`1<IdentityDescriptor> descriptors, bool includeExtendedInfo, bool recurse);
    public abstract virtual AccessControlList QueryAccessControlList(string token, IEnumerable`1<IdentityDescriptor> descriptors, bool includeExtendedInfo);
    public abstract virtual int QueryEffectivePermissions(string token, IdentityDescriptor descriptor);
    public abstract virtual void SetInheritFlag(string token, bool inherit);
}
public class Microsoft.TeamFoundation.Framework.Client.SecurityNamespaceAlreadyExistsException : TeamFoundationSecurityServiceException {
    public SecurityNamespaceAlreadyExistsException(string message);
    public SecurityNamespaceAlreadyExistsException(string message, Exception ex);
    protected SecurityNamespaceAlreadyExistsException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.TeamFoundation.Framework.Client.SecurityNamespaceDescription : object {
    internal ActionDefinition[] m_actions;
    private string m_databaseCategory;
    private string m_displayName;
    private int m_elementLength;
    private string m_name;
    private Guid m_namespaceId;
    private int m_readPermission;
    private char m_separatorValue;
    private int m_structureValue;
    private int m_writePermission;
    private List`1<ActionDefinition> m_localActions;
    public SecurityNamespaceStructure NamespaceStructure { get; }
    public string DisplayName { get; }
    public Guid NamespaceId { get; }
    public string Name { get; }
    public char SeparatorValue { get; }
    public int ElementLength { get; }
    public int WritePermission { get; }
    public int ReadPermission { get; }
    public string DatabaseCategory { get; }
    public ReadOnlyCollection`1<ActionDefinition> Actions { get; }
    public SecurityNamespaceDescription(Guid namespaceId, string name, string displayName, string databaseCategory, char separatorValue, int elementLength, SecurityNamespaceStructure structure, int writePermission, int readPermission, IEnumerable`1<ActionDefinition> actions);
    [EditorBrowsableAttribute("1")]
public static SecurityNamespaceDescription FromXml(IServiceProvider serviceProvider, XmlReader reader);
    public virtual string ToString();
    [EditorBrowsableAttribute("1")]
public void ToXml(XmlWriter writer, string element);
    [EditorBrowsableAttribute("1")]
public static void ToXml(XmlWriter writer, string element, SecurityNamespaceDescription obj);
    public SecurityNamespaceStructure get_NamespaceStructure();
    public string get_DisplayName();
    public Guid get_NamespaceId();
    public string get_Name();
    public char get_SeparatorValue();
    public int get_ElementLength();
    public int get_WritePermission();
    public int get_ReadPermission();
    public string get_DatabaseCategory();
    public ReadOnlyCollection`1<ActionDefinition> get_Actions();
    public int GetBitmaskForAction(string actionName);
    public string GetActionNameForBitmask(int bitmask);
    public string GetActionDisplayNameForBitmask(int bitmask);
    internal SecurityNamespaceDescription Clone();
    private void PrepareForWebServiceSerialization();
    private void InitializeFromWebServiceDeserialization();
}
public class Microsoft.TeamFoundation.Framework.Client.SecurityObjectDoesNotExistException : GroupSecuritySubsystemServiceException {
    public SecurityObjectDoesNotExistException(string message);
    public SecurityObjectDoesNotExistException(string message, Exception ex);
    protected SecurityObjectDoesNotExistException(SerializationInfo info, StreamingContext context);
}
internal class Microsoft.TeamFoundation.Framework.Client.SecurityService : object {
    private IIdentityManagementService m_ims;
    private TfsConnection m_server;
    private Dictionary`2<Guid, SecurityNamespace> m_namespaces;
    private ReaderWriterLockSlim m_accessLock;
    private SecurityWebService m_securityProxy;
    internal SecurityService(TfsConnection server);
    public sealed virtual SecurityNamespace CreateSecurityNamespace(SecurityNamespaceDescription description);
    public sealed virtual bool DeleteSecurityNamespace(Guid namespaceId);
    public sealed virtual SecurityNamespace GetSecurityNamespace(Guid namespaceId);
    public sealed virtual ReadOnlyCollection`1<SecurityNamespace> GetSecurityNamespaces();
    internal void SetServerSimulationMode(bool simulateVersionTwoServer);
    private void EnsureNamespacesLoaded();
}
internal class Microsoft.TeamFoundation.Framework.Client.SecurityWebService : TfsHttpClient {
    protected Guid CollectionServiceIdentifier { get; }
    protected string ComponentName { get; }
    protected Guid ConfigurationServiceIdentifier { get; }
    protected string ServiceType { get; }
    public SecurityWebService(TfsConnection connection);
    protected virtual Guid get_CollectionServiceIdentifier();
    protected virtual string get_ComponentName();
    protected virtual Guid get_ConfigurationServiceIdentifier();
    protected virtual string get_ServiceType();
    protected virtual Exception ConvertException(SoapException exception);
    public void CreateSecurityNamespace(SecurityNamespaceDescription description);
    public void DeleteSecurityNamespace(Guid namespaceId);
    public Boolean[] HasPermissionByDescriptorList(Guid namespaceId, string token, IEnumerable`1<IdentityDescriptor> descriptors, int requestedPermissions, bool alwaysAllowAdministrators);
    public Boolean[] HasPermissionByPermissionsList(Guid namespaceId, string token, IdentityDescriptor descriptor, IEnumerable`1<int> requestedPermissions, bool alwaysAllowAdministrators);
    public Boolean[] HasPermissionByTokenList(Guid namespaceId, IEnumerable`1<string> tokens, IdentityDescriptor descriptor, int requestedPermissions, bool alwaysAllowAdministrators);
    public Boolean[] HasWritePermission(Guid namespaceId, string token, IEnumerable`1<int> requestedPermissions);
    public AccessControlListDetails[] QueryPermissions(Guid namespaceId, string token, IEnumerable`1<IdentityDescriptor> identities, bool includeExtendedInfo, bool recurse);
    public SecurityNamespaceDescription[] QuerySecurityNamespaces(Guid namespaceId);
    public bool RemoveAccessControlEntries(Guid namespaceId, string token, IEnumerable`1<IdentityDescriptor> identities);
    public bool RemoveAccessControlList(Guid namespaceId, IEnumerable`1<string> tokens, bool recurse);
    public AccessControlEntryDetails RemovePermissions(Guid namespaceId, string token, IdentityDescriptor descriptor, int permissions);
    public void SetAccessControlList(Guid namespaceId, IEnumerable`1<AccessControlListDetails> accessControlLists);
    public void SetInheritFlag(Guid namespaceId, string token, bool inherits);
    public AccessControlEntryDetails[] SetPermissions(Guid namespaceId, string token, IEnumerable`1<AccessControlEntryDetails> accessControlEntries, bool merge);
}
public class Microsoft.TeamFoundation.Framework.Client.ServiceDefinition : object {
    private List`1<LocationMapping> m_mappings;
    private static DefinitionEqualityComparer s_equalityComparer;
    private string m_description;
    private string m_displayName;
    private Guid m_identifier;
    private bool m_isSingleton;
    internal LocationMapping[] m_locationMappings;
    private string m_relativePath;
    private int m_relativeToSettingValue;
    private string m_serviceType;
    private string m_toolId;
    public string ServiceType { get; public set; }
    public Guid Identifier { get; public set; }
    public string DisplayName { get; public set; }
    public RelativeToSetting RelativeToSetting { get; public set; }
    public string RelativePath { get; public set; }
    public string Description { get; public set; }
    public string ToolType { get; public set; }
    public IEnumerable`1<LocationMapping> LocationMappings { get; internal set; }
    internal List`1<LocationMapping> Mappings { get; internal set; }
    internal static IEqualityComparer`1<ServiceDefinition> EqualityComparer { get; }
    public ServiceDefinition(string serviceType, Guid identifier, string displayName, string relativePath, RelativeToSetting relativeToSetting, string description, string toolType);
    internal ServiceDefinition(string serviceType, Guid identifier, string displayName, string relativePath, RelativeToSetting relativeToSetting, string description, string toolType, List`1<LocationMapping> locationMappings);
    private static ServiceDefinition();
    public string get_ServiceType();
    public void set_ServiceType(string value);
    public Guid get_Identifier();
    public void set_Identifier(Guid value);
    public string get_DisplayName();
    public void set_DisplayName(string value);
    public RelativeToSetting get_RelativeToSetting();
    public void set_RelativeToSetting(RelativeToSetting value);
    public string get_RelativePath();
    public void set_RelativePath(string value);
    public string get_Description();
    public void set_Description(string value);
    public string get_ToolType();
    public void set_ToolType(string value);
    public IEnumerable`1<LocationMapping> get_LocationMappings();
    internal void set_LocationMappings(IEnumerable`1<LocationMapping> value);
    internal List`1<LocationMapping> get_Mappings();
    internal void set_Mappings(List`1<LocationMapping> value);
    public void AddLocationMapping(AccessMapping accessMapping, string location);
    public bool RemoveLocationMapping(AccessMapping accessMapping);
    public LocationMapping GetLocationMapping(AccessMapping accessMapping);
    internal void PrepareForWebServiceSerialization();
    internal void ReactToWebServiceDeserialization(Dictionary`2<string, AccessMapping> accessMappings);
    internal ServiceDefinition Clone();
    internal static IEqualityComparer`1<ServiceDefinition> get_EqualityComparer();
    [EditorBrowsableAttribute("1")]
public static ServiceDefinition FromXml(IServiceProvider serviceProvider, XmlReader reader);
    public virtual string ToString();
    [EditorBrowsableAttribute("1")]
public void ToXml(XmlWriter writer, string element);
    [EditorBrowsableAttribute("1")]
public static void ToXml(XmlWriter writer, string element, ServiceDefinition obj);
}
public class Microsoft.TeamFoundation.Framework.Client.ServiceDefinitionDoesNotExistException : TeamFoundationLocationServiceException {
    public ServiceDefinitionDoesNotExistException(string message);
    public ServiceDefinitionDoesNotExistException(string message, Exception ex);
    protected ServiceDefinitionDoesNotExistException(SerializationInfo info, StreamingContext context);
}
[FlagsAttribute]
public enum Microsoft.TeamFoundation.Framework.Client.ServiceHostFilterFlags : Enum {
    public int value__;
    public static ServiceHostFilterFlags None;
    public static ServiceHostFilterFlags IncludeChildren;
    public static ServiceHostFilterFlags IncludeQueuedServicingDetails;
    public static ServiceHostFilterFlags IncludeRunningServicingDetails;
    public static ServiceHostFilterFlags IncludeCompletedServicingDetails;
    public static ServiceHostFilterFlags IncludeActiveServicingDetails;
    public static ServiceHostFilterFlags IncludeAllServicingDetails;
}
public class Microsoft.TeamFoundation.Framework.Client.ServiceIdentity : object {
    private TeamFoundationIdentity m_identity;
    private ServiceIdentityInfo m_identityInfo;
    public TeamFoundationIdentity Identity { get; }
    public ServiceIdentityInfo IdentityInfo { get; }
    public TeamFoundationIdentity get_Identity();
    public ServiceIdentityInfo get_IdentityInfo();
    [EditorBrowsableAttribute("1")]
public static ServiceIdentity FromXml(IServiceProvider serviceProvider, XmlReader reader);
    public virtual string ToString();
    [EditorBrowsableAttribute("1")]
public void ToXml(XmlWriter writer, string element);
    [EditorBrowsableAttribute("1")]
public static void ToXml(XmlWriter writer, string element, ServiceIdentity obj);
}
public class Microsoft.TeamFoundation.Framework.Client.ServiceIdentityInfo : object {
    private string m_name;
    private string m_password;
    public string Name { get; }
    public string Password { get; }
    public ServiceIdentityInfo(string name);
    public ServiceIdentityInfo(string name, string password);
    public string get_Name();
    public string get_Password();
    [EditorBrowsableAttribute("1")]
public static ServiceIdentityInfo FromXml(IServiceProvider serviceProvider, XmlReader reader);
    public virtual string ToString();
    [EditorBrowsableAttribute("1")]
public void ToXml(XmlWriter writer, string element);
    [EditorBrowsableAttribute("1")]
public static void ToXml(XmlWriter writer, string element, ServiceIdentityInfo obj);
}
public class Microsoft.TeamFoundation.Framework.Client.ServiceLevelException : TeamFoundationServiceException {
    public ServiceLevelException(string message);
    public ServiceLevelException(string message, Exception ex);
    protected ServiceLevelException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.TeamFoundation.Framework.Client.ServiceNotRegisteredException : TeamFoundationResourceManagementServiceException {
    public ServiceNotRegisteredException(string message);
    public ServiceNotRegisteredException(string message, Exception ex);
    protected ServiceNotRegisteredException(SerializationInfo info, StreamingContext context);
}
internal class Microsoft.TeamFoundation.Framework.Client.ServiceTypeFilter : object {
    private Guid m_identifier;
    private string m_serviceType;
    public Guid Identifier { get; public set; }
    public string ServiceType { get; public set; }
    public Guid get_Identifier();
    public void set_Identifier(Guid value);
    public string get_ServiceType();
    public void set_ServiceType(string value);
    internal static ServiceTypeFilter FromXml(IServiceProvider serviceProvider, XmlReader reader);
    public virtual string ToString();
    internal void ToXml(XmlWriter writer, string element);
    internal static void ToXml(XmlWriter writer, string element, ServiceTypeFilter obj);
}
public class Microsoft.TeamFoundation.Framework.Client.ServiceVersionNotSupportedException : TeamFoundationResourceManagementServiceException {
    public ServiceVersionNotSupportedException(string message);
    public ServiceVersionNotSupportedException(string message, Exception ex);
    protected ServiceVersionNotSupportedException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.TeamFoundation.Framework.Client.ServicingExecutionHandlerData : object {
    private string m_handlerType;
    public string HandlerType { get; public set; }
    public string get_HandlerType();
    public void set_HandlerType(string value);
    [EditorBrowsableAttribute("1")]
public static ServicingExecutionHandlerData FromXml(IServiceProvider serviceProvider, XmlReader reader);
    public virtual string ToString();
    [EditorBrowsableAttribute("1")]
public void ToXml(XmlWriter writer, string element);
    [EditorBrowsableAttribute("1")]
public static void ToXml(XmlWriter writer, string element, ServicingExecutionHandlerData obj);
}
public class Microsoft.TeamFoundation.Framework.Client.ServicingJobDetail : object {
    private short m_completedStepCount;
    private DateTime m_endTime;
    private Guid m_hostId;
    private Guid m_jobId;
    private int m_jobStatusValue;
    private string m_operationClass;
    private string m_operationString;
    internal String[] m_operations;
    private int m_queuePosition;
    private DateTime m_queueTime;
    private int m_resultValue;
    private DateTime m_startTime;
    private short m_totalStepCount;
    public ServicingJobStatus JobStatus { get; public set; }
    public ServicingJobResult Result { get; public set; }
    public ReadOnlyCollection`1<string> Operations { get; }
    public short CompletedStepCount { get; public set; }
    public DateTime EndTime { get; public set; }
    public Guid HostId { get; public set; }
    public Guid JobId { get; public set; }
    public int JobStatusValue { get; public set; }
    public string OperationClass { get; public set; }
    public string OperationString { get; public set; }
    public int QueuePosition { get; public set; }
    public DateTime QueueTime { get; public set; }
    public int ResultValue { get; public set; }
    public DateTime StartTime { get; public set; }
    public short TotalStepCount { get; public set; }
    public ServicingJobStatus get_JobStatus();
    public void set_JobStatus(ServicingJobStatus value);
    public ServicingJobResult get_Result();
    public void set_Result(ServicingJobResult value);
    public ReadOnlyCollection`1<string> get_Operations();
    public short get_CompletedStepCount();
    public void set_CompletedStepCount(short value);
    public DateTime get_EndTime();
    public void set_EndTime(DateTime value);
    public Guid get_HostId();
    public void set_HostId(Guid value);
    public Guid get_JobId();
    public void set_JobId(Guid value);
    public int get_JobStatusValue();
    public void set_JobStatusValue(int value);
    public string get_OperationClass();
    public void set_OperationClass(string value);
    public string get_OperationString();
    public void set_OperationString(string value);
    public int get_QueuePosition();
    public void set_QueuePosition(int value);
    public DateTime get_QueueTime();
    public void set_QueueTime(DateTime value);
    public int get_ResultValue();
    public void set_ResultValue(int value);
    public DateTime get_StartTime();
    public void set_StartTime(DateTime value);
    public short get_TotalStepCount();
    public void set_TotalStepCount(short value);
    [EditorBrowsableAttribute("1")]
public static ServicingJobDetail FromXml(IServiceProvider serviceProvider, XmlReader reader);
    public virtual string ToString();
    [EditorBrowsableAttribute("1")]
public void ToXml(XmlWriter writer, string element);
    [EditorBrowsableAttribute("1")]
public static void ToXml(XmlWriter writer, string element, ServicingJobDetail obj);
}
public enum Microsoft.TeamFoundation.Framework.Client.ServicingJobResult : Enum {
    public int value__;
    public static ServicingJobResult None;
    public static ServicingJobResult Failed;
    public static ServicingJobResult PartiallySucceeded;
    public static ServicingJobResult Succeeded;
    public static ServicingJobResult Skipped;
}
public enum Microsoft.TeamFoundation.Framework.Client.ServicingJobStatus : Enum {
    public int value__;
    public static ServicingJobStatus Unknown;
    public static ServicingJobStatus Queued;
    public static ServicingJobStatus Running;
    public static ServicingJobStatus Complete;
    public static ServicingJobStatus Failed;
}
[DebuggerDisplayAttribute("Name: {Name}, Groups: {Groups.Count}, Steps: {StepCount}")]
public class Microsoft.TeamFoundation.Framework.Client.ServicingOperation : object {
    internal ServicingExecutionHandlerData[] m_executionHandlers;
    internal ServicingStepGroup[] m_groups;
    private string m_name;
    [XmlIgnoreAttribute]
public int StepCount { get; }
    public ServicingExecutionHandlerData[] ExecutionHandlers { get; public set; }
    public ServicingStepGroup[] Groups { get; public set; }
    public string Name { get; public set; }
    public int get_StepCount();
    public ServicingExecutionHandlerData[] get_ExecutionHandlers();
    public void set_ExecutionHandlers(ServicingExecutionHandlerData[] value);
    public ServicingStepGroup[] get_Groups();
    public void set_Groups(ServicingStepGroup[] value);
    public string get_Name();
    public void set_Name(string value);
    [EditorBrowsableAttribute("1")]
public static ServicingOperation FromXml(IServiceProvider serviceProvider, XmlReader reader);
    public virtual string ToString();
    [EditorBrowsableAttribute("1")]
public void ToXml(XmlWriter writer, string element);
    [EditorBrowsableAttribute("1")]
public static void ToXml(XmlWriter writer, string element, ServicingOperation obj);
}
public class Microsoft.TeamFoundation.Framework.Client.ServicingOperationAlreadyExistsException : TeamFoundationServicingException {
    public ServicingOperationAlreadyExistsException(string message);
    public ServicingOperationAlreadyExistsException(string message, Exception ex);
    protected ServicingOperationAlreadyExistsException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.TeamFoundation.Framework.Client.ServicingOperationNotFoundException : TeamFoundationServicingException {
    public ServicingOperationNotFoundException(string message);
    public ServicingOperationNotFoundException(string message, Exception ex);
    protected ServicingOperationNotFoundException(SerializationInfo info, StreamingContext context);
}
[DebuggerDisplayAttribute("Name: {Name}, StepType: {StepType}, Performer: {StepPerformer}")]
public class Microsoft.TeamFoundation.Framework.Client.ServicingStep : object {
    [CompilerGeneratedAttribute]
private XmlNode <StepData>k__BackingField;
    private bool m_detachedOnly;
    private bool m_executeAlways;
    private string m_name;
    private bool m_simpleRecoveryModel;
    private bool m_sqlAzureOnly;
    private bool m_sqlServerOnly;
    private XmlNode m_stepData;
    private string m_stepPerformer;
    private string m_stepType;
    public XmlNode StepData { get; public set; }
    public bool DetachedOnly { get; public set; }
    public bool ExecuteAlways { get; public set; }
    public string Name { get; public set; }
    public bool SimpleRecoveryModel { get; public set; }
    public bool SqlAzureOnly { get; public set; }
    public bool SqlServerOnly { get; public set; }
    public string StepPerformer { get; public set; }
    public string StepType { get; public set; }
    public ServicingStep(string name, string performer, string stepType, string stepData);
    public ServicingStep(string name, string performer, string stepType, object stepData);
    [CompilerGeneratedAttribute]
public XmlNode get_StepData();
    [CompilerGeneratedAttribute]
public void set_StepData(XmlNode value);
    internal static string SerializeStepData(object stepData);
    public bool get_DetachedOnly();
    public void set_DetachedOnly(bool value);
    public bool get_ExecuteAlways();
    public void set_ExecuteAlways(bool value);
    public string get_Name();
    public void set_Name(string value);
    public bool get_SimpleRecoveryModel();
    public void set_SimpleRecoveryModel(bool value);
    public bool get_SqlAzureOnly();
    public void set_SqlAzureOnly(bool value);
    public bool get_SqlServerOnly();
    public void set_SqlServerOnly(bool value);
    public string get_StepPerformer();
    public void set_StepPerformer(string value);
    public string get_StepType();
    public void set_StepType(string value);
    [EditorBrowsableAttribute("1")]
public static ServicingStep FromXml(IServiceProvider serviceProvider, XmlReader reader);
    public virtual string ToString();
    [EditorBrowsableAttribute("1")]
public void ToXml(XmlWriter writer, string element);
    [EditorBrowsableAttribute("1")]
public static void ToXml(XmlWriter writer, string element, ServicingStep obj);
}
public abstract class Microsoft.TeamFoundation.Framework.Client.ServicingStepDetail : object {
    protected long m_detailId;
    protected DateTime m_detailTime;
    protected string m_servicingOperation;
    protected string m_servicingStepGroupId;
    protected string m_servicingStepId;
    public long DetailId { get; }
    public DateTime DetailTime { get; }
    public string ServicingOperation { get; }
    public string ServicingStepGroupId { get; }
    public string ServicingStepId { get; }
    public abstract virtual string ToLogEntryLine();
    public long get_DetailId();
    public DateTime get_DetailTime();
    public string get_ServicingOperation();
    public string get_ServicingStepGroupId();
    public string get_ServicingStepId();
    [EditorBrowsableAttribute("1")]
public static ServicingStepDetail FromXml(IServiceProvider serviceProvider, XmlReader reader);
    public virtual string ToString();
    [EditorBrowsableAttribute("1")]
public abstract virtual void ToXml(XmlWriter writer, string element);
    [EditorBrowsableAttribute("1")]
public static void ToXml(XmlWriter writer, string element, ServicingStepDetail obj);
}
public enum Microsoft.TeamFoundation.Framework.Client.ServicingStepDetailFilterOptions : Enum {
    public int value__;
    public static ServicingStepDetailFilterOptions SpecificQueueTime;
    public static ServicingStepDetailFilterOptions AllStepDetails;
    public static ServicingStepDetailFilterOptions FirstStepDetails;
    public static ServicingStepDetailFilterOptions LastStepDetails;
}
[DebuggerDisplayAttribute("Name: {Name}, Steps: {Steps.Length}, Subsystem: {Subsystem}")]
public class Microsoft.TeamFoundation.Framework.Client.ServicingStepGroup : object {
    internal ServicingExecutionHandlerData[] m_executionHandlers;
    private string m_name;
    internal ServicingStep[] m_steps;
    private string m_subsystemAttribute;
    public ServicingExecutionHandlerData[] ExecutionHandlers { get; public set; }
    public string Name { get; public set; }
    public ServicingStep[] Steps { get; public set; }
    public string SubsystemAttribute { get; public set; }
    public ServicingStepGroup(string name, string subsystem, IEnumerable`1<ServicingStep> steps);
    public ServicingExecutionHandlerData[] get_ExecutionHandlers();
    public void set_ExecutionHandlers(ServicingExecutionHandlerData[] value);
    public string get_Name();
    public void set_Name(string value);
    public ServicingStep[] get_Steps();
    public void set_Steps(ServicingStep[] value);
    public string get_SubsystemAttribute();
    public void set_SubsystemAttribute(string value);
    [EditorBrowsableAttribute("1")]
public static ServicingStepGroup FromXml(IServiceProvider serviceProvider, XmlReader reader);
    public virtual string ToString();
    [EditorBrowsableAttribute("1")]
public void ToXml(XmlWriter writer, string element);
    [EditorBrowsableAttribute("1")]
public static void ToXml(XmlWriter writer, string element, ServicingStepGroup obj);
}
public class Microsoft.TeamFoundation.Framework.Client.ServicingStepGroupAlreadyExistsException : TeamFoundationServicingException {
    public ServicingStepGroupAlreadyExistsException(string message);
    public ServicingStepGroupAlreadyExistsException(string message, Exception ex);
    protected ServicingStepGroupAlreadyExistsException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.TeamFoundation.Framework.Client.ServicingStepGroupDependencyException : TeamFoundationServicingException {
    public ServicingStepGroupDependencyException(string message);
    public ServicingStepGroupDependencyException(string message, Exception ex);
    protected ServicingStepGroupDependencyException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.TeamFoundation.Framework.Client.ServicingStepGroupInUseException : TeamFoundationServicingException {
    public ServicingStepGroupInUseException(string message);
    public ServicingStepGroupInUseException(string message, Exception ex);
    protected ServicingStepGroupInUseException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.TeamFoundation.Framework.Client.ServicingStepGroupNotFoundException : TeamFoundationServicingException {
    public ServicingStepGroupNotFoundException(string message);
    public ServicingStepGroupNotFoundException(string message, Exception ex);
    protected ServicingStepGroupNotFoundException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.TeamFoundation.Framework.Client.ServicingStepLogEntry : ServicingStepDetail {
    private int m_entryKindDataTransfer;
    private string m_message;
    public ServicingStepLogEntryKind EntryKind { get; }
    public string Message { get; }
    public ServicingStepLogEntryKind get_EntryKind();
    public virtual string ToLogEntryLine();
    public string get_Message();
    [EditorBrowsableAttribute("1")]
public static ServicingStepLogEntry FromXml(IServiceProvider serviceProvider, XmlReader reader);
    public virtual string ToString();
    [EditorBrowsableAttribute("1")]
public virtual void ToXml(XmlWriter writer, string element);
    [EditorBrowsableAttribute("1")]
public static void ToXml(XmlWriter writer, string element, ServicingStepLogEntry obj);
}
public class Microsoft.TeamFoundation.Framework.Client.ServicingStepStateChange : ServicingStepDetail {
    private int m_stepStateDataTransfer;
    public ServicingStepState StepState { get; }
    public ServicingStepState get_StepState();
    public virtual string ToLogEntryLine();
    [EditorBrowsableAttribute("1")]
public static ServicingStepStateChange FromXml(IServiceProvider serviceProvider, XmlReader reader);
    public virtual string ToString();
    [EditorBrowsableAttribute("1")]
public virtual void ToXml(XmlWriter writer, string element);
    [EditorBrowsableAttribute("1")]
public static void ToXml(XmlWriter writer, string element, ServicingStepStateChange obj);
}
public class Microsoft.TeamFoundation.Framework.Client.ServicingValidationException : TeamFoundationServiceException {
    public ServicingValidationException(string message);
    public ServicingValidationException(string message, Exception ex);
    protected ServicingValidationException(SerializationInfo info, StreamingContext context);
}
public static class Microsoft.TeamFoundation.Framework.Client.SidDescriptor : object {
    internal static IdentityDescriptor Create(string identityType, SecurityIdentifierInfo securityIdInfo);
    internal static SecurityIdentifierInfo GetData(IdentityDescriptor descriptor);
}
public class Microsoft.TeamFoundation.Framework.Client.SigningInfo : object {
    internal Byte[] m_downloadKey;
    private Guid m_id;
    public Byte[] DownloadKey { get; public set; }
    public Guid Id { get; internal set; }
    public Byte[] get_DownloadKey();
    public void set_DownloadKey(Byte[] value);
    public Guid get_Id();
    internal void set_Id(Guid value);
    [EditorBrowsableAttribute("1")]
public static SigningInfo FromXml(IServiceProvider serviceProvider, XmlReader reader);
    public virtual string ToString();
    [EditorBrowsableAttribute("1")]
public void ToXml(XmlWriter writer, string element);
    [EditorBrowsableAttribute("1")]
public static void ToXml(XmlWriter writer, string element, SigningInfo obj);
}
public class Microsoft.TeamFoundation.Framework.Client.SqlAzureException : TeamFoundationServiceException {
    public SqlAzureException(string message);
    public SqlAzureException(string message, Exception ex);
    protected SqlAzureException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.TeamFoundation.Framework.Client.StepPerformerNotFoundException : TeamFoundationServiceException {
    public StepPerformerNotFoundException(string message);
    public StepPerformerNotFoundException(string message, Exception ex);
    protected StepPerformerNotFoundException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.TeamFoundation.Framework.Client.StreamingCollectionUnsupportedOperationException : TeamFoundationServiceException {
    public StreamingCollectionUnsupportedOperationException(string message);
    public StreamingCollectionUnsupportedOperationException(string message, Exception ex);
    protected StreamingCollectionUnsupportedOperationException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.TeamFoundation.Framework.Client.StrongBoxDrawerExistsException : StrongBoxException {
    public StrongBoxDrawerExistsException(string message);
    public StrongBoxDrawerExistsException(string message, Exception ex);
    protected StrongBoxDrawerExistsException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.TeamFoundation.Framework.Client.StrongBoxDrawerNotFoundException : StrongBoxException {
    public StrongBoxDrawerNotFoundException(string message);
    public StrongBoxDrawerNotFoundException(string message, Exception ex);
    protected StrongBoxDrawerNotFoundException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.TeamFoundation.Framework.Client.StrongBoxException : TeamFoundationServiceException {
    public StrongBoxException(string message);
    public StrongBoxException(string message, Exception ex);
    protected StrongBoxException(SerializationInfo info, StreamingContext context);
}
[EditorBrowsableAttribute("1")]
public class Microsoft.TeamFoundation.Framework.Client.StrongBoxItemInfo : object {
    private Guid m_drawerId;
    private int m_fileId;
    private StrongBoxItemKind m_itemKind;
    private string m_lookupKey;
    public Guid DrawerId { get; }
    public int FileId { get; }
    public StrongBoxItemKind ItemKind { get; }
    public string LookupKey { get; }
    [EditorBrowsableAttribute("1")]
public Guid get_DrawerId();
    [EditorBrowsableAttribute("1")]
public int get_FileId();
    [EditorBrowsableAttribute("1")]
public StrongBoxItemKind get_ItemKind();
    [EditorBrowsableAttribute("1")]
public string get_LookupKey();
    [EditorBrowsableAttribute("1")]
public static StrongBoxItemInfo FromXml(IServiceProvider serviceProvider, XmlReader reader);
    public virtual string ToString();
    [EditorBrowsableAttribute("1")]
public void ToXml(XmlWriter writer, string element);
    [EditorBrowsableAttribute("1")]
public static void ToXml(XmlWriter writer, string element, StrongBoxItemInfo obj);
}
public enum Microsoft.TeamFoundation.Framework.Client.StrongBoxItemKind : Enum {
    public int value__;
    public static StrongBoxItemKind File;
    public static StrongBoxItemKind String;
}
public class Microsoft.TeamFoundation.Framework.Client.StrongBoxItemNotFoundException : StrongBoxException {
    public StrongBoxItemNotFoundException(string message);
    public StrongBoxItemNotFoundException(string message, Exception ex);
    protected StrongBoxItemNotFoundException(SerializationInfo info, StreamingContext context);
}
internal class Microsoft.TeamFoundation.Framework.Client.StrongBoxWebService : TfsHttpClient {
    protected Guid CollectionServiceIdentifier { get; }
    protected string ComponentName { get; }
    protected string ServiceType { get; }
    public StrongBoxWebService(TfsConnection connection);
    protected virtual Guid get_CollectionServiceIdentifier();
    protected virtual string get_ComponentName();
    protected virtual string get_ServiceType();
    public void AddString(Guid drawerId, string lookupKey, string value);
    protected virtual Exception ConvertException(SoapException exception);
    public Guid CreateDrawer(string name);
    public void DeleteDrawer(Guid drawerId);
    public void DeleteItem(Guid drawerId, string lookupKey);
    public StrongBoxItemInfo[] GetDrawerContents(Guid drawerId);
    public StrongBoxItemInfo GetItemInfo(Guid drawerId, string lookupKey);
    public string GetString(Guid drawerId, string lookupKey);
    public Guid UnlockDrawer(string name);
}
public class Microsoft.TeamFoundation.Framework.Client.Subscription : object {
    private string m_conditionString;
    private DeliveryPreference m_deliveryPreference;
    private string m_device;
    private string m_eventType;
    private int m_iD;
    private string m_subscriber;
    private string m_tag;
    private Guid m_projectId;
    public int ID { get; public set; }
    public Guid ProjectId { get; public set; }
    public string ConditionString { get; public set; }
    public DeliveryPreference DeliveryPreference { get; public set; }
    public string Device { get; public set; }
    public string EventType { get; public set; }
    public string Subscriber { get; public set; }
    public string Tag { get; public set; }
    public int get_ID();
    public void set_ID(int value);
    public Guid get_ProjectId();
    public void set_ProjectId(Guid value);
    public string get_ConditionString();
    public void set_ConditionString(string value);
    public DeliveryPreference get_DeliveryPreference();
    public void set_DeliveryPreference(DeliveryPreference value);
    public string get_Device();
    public void set_Device(string value);
    public string get_EventType();
    public void set_EventType(string value);
    public string get_Subscriber();
    public void set_Subscriber(string value);
    public string get_Tag();
    public void set_Tag(string value);
    [EditorBrowsableAttribute("1")]
public static Subscription FromXml(IServiceProvider serviceProvider, XmlReader reader);
    public virtual string ToString();
    [EditorBrowsableAttribute("1")]
public void ToXml(XmlWriter writer, string element);
    [EditorBrowsableAttribute("1")]
public static void ToXml(XmlWriter writer, string element, Subscription obj);
}
public class Microsoft.TeamFoundation.Framework.Client.SyncAccessDeniedServiceException : SyncSubsystemServiceException {
    public SyncAccessDeniedServiceException(string message);
    public SyncAccessDeniedServiceException(string message, Exception ex);
    protected SyncAccessDeniedServiceException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.TeamFoundation.Framework.Client.SyncBadBaselineRevServiceException : SyncSubsystemServiceException {
    public SyncBadBaselineRevServiceException(string message);
    public SyncBadBaselineRevServiceException(string message, Exception ex);
    protected SyncBadBaselineRevServiceException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.TeamFoundation.Framework.Client.SyncSubsystemServiceException : TeamFoundationServiceException {
    public SyncSubsystemServiceException(string message);
    public SyncSubsystemServiceException(string message, Exception ex);
    protected SyncSubsystemServiceException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.TeamFoundation.Framework.Client.SyncSupersededBaselineRevServiceException : SyncSubsystemServiceException {
    public SyncSupersededBaselineRevServiceException(string message);
    public SyncSupersededBaselineRevServiceException(string message, Exception ex);
    protected SyncSupersededBaselineRevServiceException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.TeamFoundation.Framework.Client.TeamFoundationAccessControlException : TeamFoundationServiceException {
    public TeamFoundationAccessControlException(string message);
    public TeamFoundationAccessControlException(string message, Exception ex);
    protected TeamFoundationAccessControlException(SerializationInfo info, StreamingContext context);
}
internal class Microsoft.TeamFoundation.Framework.Client.TeamFoundationAdministrationService : object {
    private AdministrationWebService m_administrationWebService;
    internal TeamFoundationAdministrationService(TfsConfigurationServer tfsApplication);
    public sealed virtual void CancelRequest(Guid hostId, long requestId, string reason);
    public sealed virtual TeamFoundationServiceHostActivity QueryActiveRequests(TfsConnection teamFoundationServer, bool includeDetails);
    public sealed virtual TeamFoundationServiceHostActivity QueryActiveRequests(Guid hostId, bool includeDetails);
    public sealed virtual ReadOnlyCollection`1<TeamFoundationServiceHostActivity> QueryActiveRequests(IEnumerable`1<Guid> hostIds, bool includeDetails);
}
public class Microsoft.TeamFoundation.Framework.Client.TeamFoundationCatalogServiceException : TeamFoundationServiceException {
    public TeamFoundationCatalogServiceException(string message);
    public TeamFoundationCatalogServiceException(string message, Exception ex);
    protected TeamFoundationCatalogServiceException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.TeamFoundation.Framework.Client.TeamFoundationDatabaseCopyException : TeamFoundationServiceException {
    public TeamFoundationDatabaseCopyException(string message);
    public TeamFoundationDatabaseCopyException(string message, Exception ex);
    protected TeamFoundationDatabaseCopyException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.TeamFoundation.Framework.Client.TeamFoundationDatabaseSplitException : TeamFoundationServiceException {
    public TeamFoundationDatabaseSplitException(string message);
    public TeamFoundationDatabaseSplitException(string message, Exception ex);
    protected TeamFoundationDatabaseSplitException(SerializationInfo info, StreamingContext context);
}
internal class Microsoft.TeamFoundation.Framework.Client.TeamFoundationEventService : object {
    private EventWebService m_eventWebService;
    public TeamFoundationEventService(TfsConnection tfs);
    public sealed virtual int SubscribeEvent(string userId, string eventType, string filterExpression, DeliveryPreference preferences);
    public sealed virtual int SubscribeEvent(string userId, string eventType, string filterExpression, DeliveryPreference preferences, string classification, string projectName);
    public sealed virtual int SubscribeEvent(string eventType, string filterExpression, DeliveryPreference preferences);
    public sealed virtual int SubscribeEvent(string eventType, string filterExpression, DeliveryPreference preferences, string classification);
    public sealed virtual void UnsubscribeEvent(int subscriptionId, string projectName);
    public sealed virtual Subscription[] GetAllEventSubscriptions();
    public sealed virtual Subscription[] GetAllEventSubscriptions(string classification, string projectName);
    public sealed virtual Subscription[] GetEventSubscriptions(string user);
    public sealed virtual Subscription[] GetEventSubscriptions(string user, string classification, string projectName);
    public sealed virtual Subscription[] GetEventSubscriptions(IdentityDescriptor user);
    public sealed virtual Subscription[] GetEventSubscriptions(IdentityDescriptor user, string classification, string projectName);
    public sealed virtual void FireEvent(object theEvent);
    public sealed virtual void FireEvents(IEnumerable`1<object> theEvents);
    private static string SerializeEvent(object eventObject);
    [ObsoleteAttribute]
public sealed virtual Subscription[] EventSubscriptions(string userId);
    [ObsoleteAttribute]
public sealed virtual Subscription[] EventSubscriptions(string userId, string tag);
    [ObsoleteAttribute]
public sealed virtual void FireAsyncEvent(string theEvent);
    [ObsoleteAttribute]
public sealed virtual void FireAsyncEvent(object theEvent);
    [ObsoleteAttribute]
public sealed virtual void FireBulkAsyncEvents(String[] theEvents);
    [ObsoleteAttribute]
public sealed virtual void FireBulkAsyncEvents(Object[] theEvents);
}
public class Microsoft.TeamFoundation.Framework.Client.TeamFoundationIdentity : object {
    private string m_clientSideUniqueName;
    private Dictionary`2<string, object> m_properties;
    private Dictionary`2<string, object> m_localProperties;
    private HashSet`1<string> m_modifiedPropertiesLog;
    private HashSet`1<string> m_modifiedLocalPropertiesLog;
    internal KeyValueOfStringString[] m_attributesSet;
    private IdentityDescriptor m_descriptor;
    private string m_displayName;
    private bool m_isActive;
    private bool m_isContainer;
    internal PropertyValue[] m_localPropertiesSet;
    internal IdentityDescriptor[] m_memberOf;
    internal IdentityDescriptor[] m_members;
    internal PropertyValue[] m_propertiesSet;
    private Guid m_teamFoundationId;
    private string m_uniqueName;
    private int m_uniqueUserId;
    public bool IsContainer { get; }
    public string UniqueName { get; }
    public IdentityDescriptor Descriptor { get; public set; }
    public string DisplayName { get; public set; }
    public bool IsActive { get; public set; }
    public IdentityDescriptor[] MemberOf { get; public set; }
    public IdentityDescriptor[] Members { get; public set; }
    public Guid TeamFoundationId { get; public set; }
    public int UniqueUserId { get; public set; }
    internal TeamFoundationIdentity(IdentityDescriptor descriptor, string displayName, bool isActive, IdentityDescriptor[] members, IdentityDescriptor[] memberOf);
    public bool TryGetProperty(string name, Object& value);
    public bool TryGetProperty(IdentityPropertyScope propertyScope, string name, Object& value);
    public object GetProperty(string name);
    public object GetProperty(IdentityPropertyScope propertyScope, string name);
    public IEnumerable`1<KeyValuePair`2<string, object>> GetProperties();
    public IEnumerable`1<KeyValuePair`2<string, object>> GetProperties(IdentityPropertyScope propertyScope);
    public void SetProperty(string name, object value);
    public void SetProperty(IdentityPropertyScope propertyScope, string name, object value);
    private void SetGlobalProperty(string name, object value);
    private void SetLocalProperty(string name, object value);
    public void RemoveProperty(string name);
    public void RemoveProperty(IdentityPropertyScope propertyScope, string name);
    public string GetAttribute(string name, string defaultValue);
    [EditorBrowsableAttribute("1")]
public void SetAttribute(string name, string value);
    public bool get_IsContainer();
    internal HashSet`1<string> GetModifiedPropertiesLog(IdentityPropertyScope propertyScope);
    internal void ResetModifiedProperties();
    internal void InitializeFromWebService();
    public string get_UniqueName();
    public IdentityDescriptor get_Descriptor();
    public void set_Descriptor(IdentityDescriptor value);
    public string get_DisplayName();
    public void set_DisplayName(string value);
    public bool get_IsActive();
    public void set_IsActive(bool value);
    public IdentityDescriptor[] get_MemberOf();
    public void set_MemberOf(IdentityDescriptor[] value);
    public IdentityDescriptor[] get_Members();
    public void set_Members(IdentityDescriptor[] value);
    public Guid get_TeamFoundationId();
    public void set_TeamFoundationId(Guid value);
    public int get_UniqueUserId();
    public void set_UniqueUserId(int value);
    [EditorBrowsableAttribute("1")]
public static TeamFoundationIdentity FromXml(IServiceProvider serviceProvider, XmlReader reader);
    public virtual string ToString();
    [EditorBrowsableAttribute("1")]
public void ToXml(XmlWriter writer, string element);
    [EditorBrowsableAttribute("1")]
public static void ToXml(XmlWriter writer, string element, TeamFoundationIdentity obj);
    [CompilerGeneratedAttribute]
private bool <GetProperties>b__6_0(KeyValuePair`2<string, object> kvp);
}
public class Microsoft.TeamFoundation.Framework.Client.TeamFoundationIdentityServiceException : TeamFoundationServiceException {
    public TeamFoundationIdentityServiceException(string message);
    public TeamFoundationIdentityServiceException(string message, Exception ex);
    protected TeamFoundationIdentityServiceException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.TeamFoundation.Framework.Client.TeamFoundationInvalidCertificateException : TeamFoundationServiceException {
    public TeamFoundationInvalidCertificateException(string message);
    public TeamFoundationInvalidCertificateException(string message, Exception ex);
    protected TeamFoundationInvalidCertificateException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.TeamFoundation.Framework.Client.TeamFoundationJobDefinition : object {
    private List`1<TeamFoundationJobSchedule> m_schedulesList;
    private XmlNode m_data;
    private int m_enabledState;
    private string m_extensionName;
    private bool m_ignoreDormancy;
    private bool m_allowDelete;
    private bool m_disableDuringUpgrade;
    private Guid m_jobId;
    private string m_name;
    private int m_priorityClass;
    internal TeamFoundationJobSchedule[] m_schedule;
    public IList`1<TeamFoundationJobSchedule> Schedule { get; }
    public string Name { get; public set; }
    public string ExtensionName { get; public set; }
    public TeamFoundationJobEnabledState EnabledState { get; public set; }
    public XmlNode Data { get; public set; }
    public bool IgnoreDormancy { get; public set; }
    public Guid JobId { get; }
    public TeamFoundationJobDefinition(Guid jobId, string name, string extensionName, XmlNode data);
    public TeamFoundationJobDefinition(Guid jobId, string name, string extensionName, XmlNode data, TeamFoundationJobEnabledState enabledState);
    public TeamFoundationJobDefinition(Guid jobId, string name, string extensionName, XmlNode data, TeamFoundationJobEnabledState enabledState, bool ignoreDormancy);
    public TeamFoundationJobDefinition(string name, string extensionName, XmlNode data);
    public TeamFoundationJobDefinition(string name, string extensionName);
    public IList`1<TeamFoundationJobSchedule> get_Schedule();
    public string get_Name();
    public void set_Name(string value);
    public string get_ExtensionName();
    public void set_ExtensionName(string value);
    public TeamFoundationJobEnabledState get_EnabledState();
    public void set_EnabledState(TeamFoundationJobEnabledState value);
    public XmlNode get_Data();
    public void set_Data(XmlNode value);
    private void BeforeSerialize();
    private void AfterDeserialize();
    public bool get_IgnoreDormancy();
    public void set_IgnoreDormancy(bool value);
    public Guid get_JobId();
    [EditorBrowsableAttribute("1")]
public static TeamFoundationJobDefinition FromXml(IServiceProvider serviceProvider, XmlReader reader);
    public virtual string ToString();
    [EditorBrowsableAttribute("1")]
public void ToXml(XmlWriter writer, string element);
    [EditorBrowsableAttribute("1")]
public static void ToXml(XmlWriter writer, string element, TeamFoundationJobDefinition obj);
}
public class Microsoft.TeamFoundation.Framework.Client.TeamFoundationJobHistoryEntry : object {
    private Guid m_agentId;
    private DateTime m_endTime;
    private DateTime m_executionStartTime;
    private long m_historyId;
    private Guid m_jobId;
    private Guid m_jobSource;
    private int m_priority;
    private DateTime m_queueTime;
    private int m_queuedReasons;
    private int m_result;
    private string m_resultMessage;
    public TeamFoundationJobResult Result { get; public set; }
    public Guid AgentId { get; }
    public DateTime EndTime { get; }
    public DateTime ExecutionStartTime { get; }
    public long HistoryId { get; }
    public Guid JobId { get; }
    public Guid JobSource { get; }
    public DateTime QueueTime { get; }
    public string ResultMessage { get; }
    public TeamFoundationJobResult get_Result();
    public void set_Result(TeamFoundationJobResult value);
    public Guid get_AgentId();
    public DateTime get_EndTime();
    public DateTime get_ExecutionStartTime();
    public long get_HistoryId();
    public Guid get_JobId();
    public Guid get_JobSource();
    public DateTime get_QueueTime();
    public string get_ResultMessage();
    [EditorBrowsableAttribute("1")]
public static TeamFoundationJobHistoryEntry FromXml(IServiceProvider serviceProvider, XmlReader reader);
    public virtual string ToString();
    [EditorBrowsableAttribute("1")]
public void ToXml(XmlWriter writer, string element);
    [EditorBrowsableAttribute("1")]
public static void ToXml(XmlWriter writer, string element, TeamFoundationJobHistoryEntry obj);
}
public class Microsoft.TeamFoundation.Framework.Client.TeamFoundationJobSchedule : object {
    private TimeZoneInfo m_timeZone;
    private int m_interval;
    private int m_priorityLevel;
    private DateTime m_scheduledTime;
    private string m_timeZoneId;
    public DateTime ScheduledTime { get; public set; }
    public int Interval { get; public set; }
    public TimeZoneInfo TimeZone { get; public set; }
    public TeamFoundationJobSchedule(DateTime scheduledTime);
    public TeamFoundationJobSchedule(DateTime scheduledTime, int interval);
    public TeamFoundationJobSchedule(DateTime scheduledTime, int interval, TimeZoneInfo timeZone);
    public DateTime get_ScheduledTime();
    public void set_ScheduledTime(DateTime value);
    public int get_Interval();
    public void set_Interval(int value);
    public TimeZoneInfo get_TimeZone();
    public void set_TimeZone(TimeZoneInfo value);
    private void AfterDeserialize();
    [EditorBrowsableAttribute("1")]
public static TeamFoundationJobSchedule FromXml(IServiceProvider serviceProvider, XmlReader reader);
    public virtual string ToString();
    [EditorBrowsableAttribute("1")]
public void ToXml(XmlWriter writer, string element);
    [EditorBrowsableAttribute("1")]
public static void ToXml(XmlWriter writer, string element, TeamFoundationJobSchedule obj);
}
public class Microsoft.TeamFoundation.Framework.Client.TeamFoundationJobService : object {
    private JobWebService m_service;
    public TeamFoundationJobService(TfsConnection server);
    public sealed virtual void DeleteJobs(IEnumerable`1<Guid> jobIds);
    public sealed virtual void DeleteJobs(IEnumerable`1<TeamFoundationJobDefinition> jobs);
    public sealed virtual void DeleteJob(TeamFoundationJobDefinition job);
    public sealed virtual void DeleteJob(Guid jobId);
    public sealed virtual void UpdateJob(TeamFoundationJobDefinition job);
    public sealed virtual void UpdateJobs(IEnumerable`1<Guid> jobsToDelete, IEnumerable`1<TeamFoundationJobDefinition> jobsToUpdate);
    public sealed virtual void UpdateJobs(IEnumerable`1<TeamFoundationJobDefinition> jobs);
    public sealed virtual void UpdateJobs(IEnumerable`1<TeamFoundationJobDefinition> jobsToDelete, IEnumerable`1<TeamFoundationJobDefinition> jobsToUpdate);
    public sealed virtual bool StopJob(Guid jobId);
    public sealed virtual bool StopJob(TeamFoundationJobDefinition job);
    public sealed virtual bool PauseJob(Guid jobId);
    public sealed virtual bool PauseJob(TeamFoundationJobDefinition job);
    public sealed virtual int QueueDelayedJob(TeamFoundationJobDefinition job);
    public sealed virtual int QueueDelayedJob(Guid jobId);
    public sealed virtual int QueueDelayedJob(TeamFoundationJobDefinition job, int maxDelaySeconds);
    public sealed virtual int QueueDelayedJob(Guid jobId, int maxDelaySeconds);
    public sealed virtual int QueueDelayedJobs(IEnumerable`1<TeamFoundationJobDefinition> jobs);
    public sealed virtual int QueueDelayedJobs(IEnumerable`1<Guid> jobIds);
    public sealed virtual int QueueDelayedJobs(IEnumerable`1<TeamFoundationJobDefinition> jobs, int maxDelaySeconds);
    public sealed virtual int QueueDelayedJobs(IEnumerable`1<Guid> jobIds, int maxDelaySeconds);
    public sealed virtual bool ResumeJob(Guid jobId);
    public sealed virtual bool ResumeJob(TeamFoundationJobDefinition job);
    public sealed virtual int QueueJobsNow(IEnumerable`1<TeamFoundationJobDefinition> jobs, bool highPriority);
    public sealed virtual int QueueJobsNow(IEnumerable`1<Guid> jobIds, bool highPriority);
    public sealed virtual int QueueJobNow(TeamFoundationJobDefinition job, bool highPriority);
    public sealed virtual int QueueJobNow(Guid jobId, bool highPriority);
    [ObsoleteAttribute("This method is no longer supported.")]
public sealed virtual Guid QueueOneTimeJob(string jobName, string extensionName, XmlNode data, bool highPriority);
    public sealed virtual TeamFoundationJobDefinition[] QueryJobs();
    public sealed virtual TeamFoundationJobDefinition[] QueryJobs(IEnumerable`1<Guid> jobIds);
    public sealed virtual IList`1<TeamFoundationJobHistoryEntry> QueryJobHistory(IEnumerable`1<Guid> jobIds);
    public sealed virtual IList`1<TeamFoundationJobHistoryEntry> QueryJobHistory(IEnumerable`1<TeamFoundationJobDefinition> jobs);
    public sealed virtual IList`1<TeamFoundationJobHistoryEntry> QueryLatestJobHistory(IEnumerable`1<Guid> jobIds);
    public sealed virtual IList`1<TeamFoundationJobHistoryEntry> QueryLatestJobHistory(IEnumerable`1<TeamFoundationJobDefinition> jobs);
    public sealed virtual TeamFoundationJobHistoryEntry QueryLatestJobHistory(Guid jobId);
    public sealed virtual TeamFoundationJobHistoryEntry QueryLatestJobHistory(TeamFoundationJobDefinition job);
}
public class Microsoft.TeamFoundation.Framework.Client.TeamFoundationJobServiceException : TeamFoundationServiceException {
    public TeamFoundationJobServiceException(string message);
    public TeamFoundationJobServiceException(string message, Exception ex);
    protected TeamFoundationJobServiceException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.TeamFoundation.Framework.Client.TeamFoundationLocationServiceException : TeamFoundationServiceException {
    public TeamFoundationLocationServiceException(string message);
    public TeamFoundationLocationServiceException(string message, Exception ex);
    protected TeamFoundationLocationServiceException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.TeamFoundation.Framework.Client.TeamFoundationLockException : TeamFoundationServiceException {
    public TeamFoundationLockException(string message);
    public TeamFoundationLockException(string message, Exception ex);
    protected TeamFoundationLockException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.TeamFoundation.Framework.Client.TeamFoundationMessageQueueException : TeamFoundationServiceException {
    public TeamFoundationMessageQueueException(string message);
    public TeamFoundationMessageQueueException(string message, Exception ex);
    protected TeamFoundationMessageQueueException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.TeamFoundation.Framework.Client.TeamFoundationProcessStillRunningException : TeamFoundationServiceException {
    public TeamFoundationProcessStillRunningException(string message);
    public TeamFoundationProcessStillRunningException(string message, Exception ex);
    protected TeamFoundationProcessStillRunningException(SerializationInfo info, StreamingContext context);
}
internal class Microsoft.TeamFoundation.Framework.Client.TeamFoundationProcessTemplateService : object {
    private static string c_MimeBoundary;
    private TfsTeamProjectCollection m_tfs;
    private ProcessTemplateWebService m_processTemplateWebService;
    public TeamFoundationProcessTemplateService(TfsTeamProjectCollection tfs);
    [ObsoleteAttribute("Please use the TemplateHeaders method instead")]
public sealed virtual XmlNode GetTemplateNames();
    public sealed virtual TemplateHeader[] TemplateHeaders();
    public sealed virtual TemplateHeader[] DeleteTemplate(int templateId);
    public sealed virtual TemplateHeader[] MakeDefaultTemplate(int templateId);
    [ObsoleteAttribute("Please use AddUpdateTemplate instead")]
public sealed virtual int AddTemplate(string name, string description, string metadata, string state);
    public sealed virtual int GetTemplateIndex(string name);
    public sealed virtual void AddUpdateTemplate(string name, string description, string metadata, string state, string zipFileName);
    [ObsoleteAttribute("Please use AddUpdateTemplate instead")]
public sealed virtual void UploadMethodology(string fileName, int templateId);
    public sealed virtual string GetTemplateData(int methodologyIndex);
    private Byte[] FormatFormHeader(string name, string description, string metadata, long fileLength);
    private Byte[] FormFooter();
    private void ProcessHttpWebResponse(HttpWebResponse response);
    private TemplateHeader[] ConvertToTemplateHeaders(FrameworkTemplateHeader[] frameworkTemplateHeaders);
}
public class Microsoft.TeamFoundation.Framework.Client.TeamFoundationProfileServiceException : TeamFoundationServiceException {
    public TeamFoundationProfileServiceException(string message);
    public TeamFoundationProfileServiceException(string message, Exception ex);
    protected TeamFoundationProfileServiceException(SerializationInfo info, StreamingContext context);
}
internal class Microsoft.TeamFoundation.Framework.Client.TeamFoundationPropertyService : object {
    private PropertyWebService m_propertyWebService;
    private TfsConnection m_teamFoundationServer;
    private static ArtifactPropertyValue[] s_emptyArtifactPropertyValueArray;
    internal TeamFoundationPropertyService(TfsConnection teamFoundationServer);
    private static TeamFoundationPropertyService();
    public sealed virtual ArtifactPropertyValue[] GetProperties(ArtifactSpec artifactSpec, String[] propertyNameFilters);
    public sealed virtual ArtifactPropertyValue[] GetProperties(ArtifactSpec[] artifactSpecs, String[] propertyNameFilters);
    public sealed virtual ArtifactPropertyValue[] GetProperties(ArtifactSpec[] artifactSpecs, String[] propertyNameFilters, GetPropertiesOptions options);
    public sealed virtual void SetProperty(ArtifactSpec artifactSpec, string propertyName, Nullable`1<int> value);
    public sealed virtual void SetProperty(ArtifactSpec artifactSpec, string propertyName, Nullable`1<double> value);
    public sealed virtual void SetProperty(ArtifactSpec artifactSpec, string propertyName, string value);
    public sealed virtual void SetProperty(ArtifactSpec artifactSpec, string propertyName, Nullable`1<DateTime> value);
    public sealed virtual void SetProperty(ArtifactSpec artifactSpec, string propertyName, Byte[] value);
    internal void InternalSetProperty(ArtifactSpec artifactSpec, string propertyName, object value);
    public sealed virtual void SetProperties(ArtifactPropertyValue artifactPropertyValue);
    public sealed virtual void SetProperties(ArtifactPropertyValue[] artifactPropertyValues);
    private static void HandlePropertyException(SoapException se);
}
internal class Microsoft.TeamFoundation.Framework.Client.TeamFoundationRegistry : object {
    private RegistryWebService m_registry;
    public TeamFoundationRegistry(TfsConnection server);
    public sealed virtual T GetValue(string path);
    public sealed virtual T GetValue(string path, T defaultValue);
    public sealed virtual string GetValue(string path);
    public sealed virtual string GetValue(string path, string defaultValue);
    public sealed virtual T GetUserValue(string path);
    public sealed virtual T GetUserValue(string path, T defaultValue);
    public sealed virtual string GetUserValue(string path);
    public sealed virtual string GetUserValue(string path, string defaultValue);
    public sealed virtual void SetValue(string path, string value);
    public sealed virtual void SetValue(string path, T value);
    public sealed virtual void SetUserValue(string path, string value);
    public sealed virtual void SetUserValue(string path, T value);
    public sealed virtual int DeleteEntries(String[] registryPathPatterns);
    public sealed virtual int DeleteUserEntries(String[] registryPathPatterns);
    public sealed virtual IEnumerable`1<RegistryAuditEntry> QueryAuditLog(int changeIndex, bool returnOlder);
    public sealed virtual RegistryEntryCollection ReadEntries(string registryPath);
    public sealed virtual RegistryEntryCollection ReadEntries(string registryPath, bool includeContainerHints);
    public sealed virtual RegistryEntryCollection ReadUserEntries(string registryPath);
    public sealed virtual RegistryEntryCollection ReadUserEntries(string registryPath, bool includeContainerHints);
    public sealed virtual void WriteEntries(IEnumerable`1<RegistryEntry> registryEntries);
    public sealed virtual void WriteUserEntries(IEnumerable`1<RegistryEntry> registryEntries);
    private void WriteEntriesInternal(IEnumerable`1<RegistryEntry> registryEntries, bool writeToUserHive);
}
public class Microsoft.TeamFoundation.Framework.Client.TeamFoundationRequestInformation : object {
    private TimeSpan m_executionTimeSpan;
    private ReadOnlyCollection`1<KeyValuePair`2<string, string>> m_readOnlyParameters;
    private long m_executionTime;
    private string m_methodName;
    internal KeyValueOfStringString[] m_parameters;
    private bool m_queued;
    private long m_queuedTime;
    private string m_remoteComputer;
    private string m_remotePort;
    private long m_requestId;
    private DateTime m_startTime;
    private string m_userAgent;
    private IdentityDescriptor m_userDescriptor;
    private string m_userName;
    public TimeSpan ExecutionTime { get; }
    public IdentityDescriptor UserDescriptor { get; }
    public ReadOnlyCollection`1<KeyValuePair`2<string, string>> Parameters { get; }
    public string MethodName { get; }
    public bool Queued { get; }
    public long QueuedTime { get; }
    public string RemoteComputer { get; }
    public string RemotePort { get; }
    public long RequestId { get; }
    public DateTime StartTime { get; }
    public string UserAgent { get; }
    public string UserName { get; }
    public TimeSpan get_ExecutionTime();
    public IdentityDescriptor get_UserDescriptor();
    public ReadOnlyCollection`1<KeyValuePair`2<string, string>> get_Parameters();
    private void AfterDeserialize();
    public string get_MethodName();
    public bool get_Queued();
    public long get_QueuedTime();
    public string get_RemoteComputer();
    public string get_RemotePort();
    public long get_RequestId();
    public DateTime get_StartTime();
    public string get_UserAgent();
    public string get_UserName();
    [EditorBrowsableAttribute("1")]
public static TeamFoundationRequestInformation FromXml(IServiceProvider serviceProvider, XmlReader reader);
    public virtual string ToString();
    [EditorBrowsableAttribute("1")]
public void ToXml(XmlWriter writer, string element);
    [EditorBrowsableAttribute("1")]
public static void ToXml(XmlWriter writer, string element, TeamFoundationRequestInformation obj);
}
public class Microsoft.TeamFoundation.Framework.Client.TeamFoundationResourceManagementServiceException : TeamFoundationServiceException {
    public TeamFoundationResourceManagementServiceException(string message);
    public TeamFoundationResourceManagementServiceException(string message, Exception ex);
    protected TeamFoundationResourceManagementServiceException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.TeamFoundation.Framework.Client.TeamFoundationSecurityServiceException : TeamFoundationServiceException {
    public TeamFoundationSecurityServiceException(string message);
    public TeamFoundationSecurityServiceException(string message, Exception ex);
    protected TeamFoundationSecurityServiceException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.TeamFoundation.Framework.Client.TeamFoundationServerNotSupportedException : TeamFoundationServerException {
    public TeamFoundationServerNotSupportedException(string nameOrUrl);
    protected TeamFoundationServerNotSupportedException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.TeamFoundation.Framework.Client.TeamFoundationServiceException : TeamFoundationServerException {
    public TeamFoundationServiceException(string message);
    public TeamFoundationServiceException(string message, Exception innerException);
    protected TeamFoundationServiceException(SerializationInfo info, StreamingContext context);
    [EditorBrowsableAttribute("1")]
public static Exception ConvertException(SoapException innerException);
    [EditorBrowsableAttribute("1")]
public static Exception ConvertException(SoapException innerException, bool convertUnknown);
    [EditorBrowsableAttribute("1")]
public static Exception ConvertException(string exceptionType, string exceptionMessage, Exception innerException, bool convertUnknown);
}
public class Microsoft.TeamFoundation.Framework.Client.TeamFoundationServiceHostActivity : object {
    private ReadOnlyCollection`1<TeamFoundationRequestInformation> m_readOnlyRequests;
    internal TeamFoundationRequestInformation[] m_activeRequests;
    private Guid m_id;
    private string m_name;
    private DateTime m_startTime;
    private string m_statusReason;
    private int m_statusValue;
    public TeamFoundationServiceHostStatus Status { get; }
    public ReadOnlyCollection`1<TeamFoundationRequestInformation> ActiveRequests { get; }
    public Guid Id { get; }
    public string Name { get; }
    public DateTime StartTime { get; }
    public string StatusReason { get; }
    public TeamFoundationServiceHostStatus get_Status();
    public ReadOnlyCollection`1<TeamFoundationRequestInformation> get_ActiveRequests();
    private void AfterDeserialize();
    public Guid get_Id();
    public string get_Name();
    public DateTime get_StartTime();
    public string get_StatusReason();
    [EditorBrowsableAttribute("1")]
public static TeamFoundationServiceHostActivity FromXml(IServiceProvider serviceProvider, XmlReader reader);
    public virtual string ToString();
    [EditorBrowsableAttribute("1")]
public void ToXml(XmlWriter writer, string element);
    [EditorBrowsableAttribute("1")]
public static void ToXml(XmlWriter writer, string element, TeamFoundationServiceHostActivity obj);
}
public class Microsoft.TeamFoundation.Framework.Client.TeamFoundationServicingException : TeamFoundationServiceException {
    public TeamFoundationServicingException(string message);
    public TeamFoundationServicingException(string message, Exception ex);
    protected TeamFoundationServicingException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.TeamFoundation.Framework.Client.TeamFoundationStrongBoxService : object {
    private TfsConnection m_tfs;
    private StrongBoxWebService m_webService;
    private sealed virtual override void Microsoft.TeamFoundation.Client.ITfsConnectionObject.Initialize(TfsConnection server);
    public Guid CreateDrawer(string name);
    public Guid UnlockDrawer(string name);
    public void DeleteDrawer(Guid drawerId);
    public string GetString(Guid drawerId, string lookupKey);
    [ObsoleteAttribute]
public string RetrieveFile(Guid drawerId, string lookupKey);
    public void AddString(Guid drawerId, string lookupKey, string value);
    [ObsoleteAttribute]
public void UploadFile(Guid drawerId, string lookupKey, Stream file);
    public void DeleteItem(Guid drawerId, string lookupKey);
}
public class Microsoft.TeamFoundation.Framework.Client.TeamFoundationValidationException : TeamFoundationServiceException {
    public TeamFoundationValidationException(string message);
    public TeamFoundationValidationException(string message, Exception ex);
    protected TeamFoundationValidationException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.TeamFoundation.Framework.Client.TeamProjectCollection : object {
    private TeamProjectCollectionWebService m_service;
    private TeamProjectCollectionProperties m_properties;
    private static int s_jobPollingInterval;
    public Guid Id { get; }
    public string Name { get; public set; }
    public string Description { get; public set; }
    public bool IsDefault { get; public set; }
    public bool Registered { get; public set; }
    public string VirtualDirectory { get; public set; }
    public TeamFoundationServiceHostStatus State { get; }
    public bool IsBeingServiced { get; }
    public ServicingJobDetail[] ServicingDetails { get; }
    internal TeamProjectCollection(TeamProjectCollectionWebService service, TeamProjectCollectionProperties properties);
    private static TeamProjectCollection();
    public Guid get_Id();
    public string get_Name();
    public void set_Name(string value);
    public string get_Description();
    public void set_Description(string value);
    public bool get_IsDefault();
    public void set_IsDefault(bool value);
    public bool get_Registered();
    public void set_Registered(bool value);
    public string get_VirtualDirectory();
    public void set_VirtualDirectory(string value);
    public TeamFoundationServiceHostStatus get_State();
    public bool get_IsBeingServiced();
    public ServicingJobDetail[] get_ServicingDetails();
    public void Refresh();
    public void Save();
    public void Delete();
    private void WaitForServicingToComplete(ServicingJobDetail queuedDeleteDetails);
}
internal class Microsoft.TeamFoundation.Framework.Client.TeamProjectCollectionProperties : object {
    private string m_authority;
    internal KeyValueOfStringString[] m_databaseCategoryConnectionStringsValue;
    private int m_databaseId;
    private string m_defaultConnectionString;
    private string m_description;
    private Guid m_id;
    private bool m_isDefault;
    private string m_name;
    private bool m_registered;
    internal ServicingJobDetail[] m_servicingDetails;
    internal KeyValueOfStringString[] m_servicingTokensValue;
    private int m_stateValue;
    private string m_virtualDirectory;
    public TeamFoundationServiceHostStatus State { get; public set; }
    public string Authority { get; public set; }
    public int DatabaseId { get; public set; }
    public string DefaultConnectionString { get; public set; }
    public string Description { get; public set; }
    public Guid Id { get; public set; }
    public bool IsDefault { get; public set; }
    public string Name { get; public set; }
    public bool Registered { get; internal set; }
    public ServicingJobDetail[] ServicingDetails { get; }
    public int StateValue { get; public set; }
    public string VirtualDirectory { get; public set; }
    public TeamProjectCollectionProperties(Guid id, string name, string description, bool isDefault, string virtualDirectory, TeamFoundationServiceHostStatus state, IDictionary`2<string, string> servicingTokens, string defaultConnectionString, IDictionary`2<string, string> databaseCategoryConnectionStrings);
    public TeamFoundationServiceHostStatus get_State();
    public void set_State(TeamFoundationServiceHostStatus value);
    private static KeyValueOfStringString[] ConvertDictionaryToPairs(IDictionary`2<string, string> map);
    internal void SetDatabaseCategoryConnectionStrings(IDictionary`2<string, string> connectionStrings);
    public string get_Authority();
    public void set_Authority(string value);
    public int get_DatabaseId();
    public void set_DatabaseId(int value);
    public string get_DefaultConnectionString();
    public void set_DefaultConnectionString(string value);
    public string get_Description();
    public void set_Description(string value);
    public Guid get_Id();
    public void set_Id(Guid value);
    public bool get_IsDefault();
    public void set_IsDefault(bool value);
    public string get_Name();
    public void set_Name(string value);
    public bool get_Registered();
    internal void set_Registered(bool value);
    public ServicingJobDetail[] get_ServicingDetails();
    public int get_StateValue();
    public void set_StateValue(int value);
    public string get_VirtualDirectory();
    public void set_VirtualDirectory(string value);
    internal static TeamProjectCollectionProperties FromXml(IServiceProvider serviceProvider, XmlReader reader);
    public virtual string ToString();
    internal void ToXml(XmlWriter writer, string element);
    internal static void ToXml(XmlWriter writer, string element, TeamProjectCollectionProperties obj);
}
internal class Microsoft.TeamFoundation.Framework.Client.TeamProjectCollectionService : object {
    private TeamProjectCollectionWebService m_service;
    private XmlReaderSettings m_xmlReaderSettings;
    private static int s_jobPollingInterval;
    public TeamProjectCollectionService(TfsConfigurationServer application);
    private static TeamProjectCollectionService();
    public sealed virtual IList`1<TeamProjectCollection> GetCollections(IEnumerable`1<Guid> collectionIds);
    public sealed virtual IList`1<TeamProjectCollection> GetCollections(IEnumerable`1<Guid> collectionIds, ServiceHostFilterFlags filterFlags);
    public sealed virtual TeamProjectCollection GetCollection(Guid collectionId);
    public sealed virtual TeamProjectCollection GetCollection(Guid collectionId, ServiceHostFilterFlags filterFlags);
    public sealed virtual IList`1<TeamProjectCollection> GetCollections();
    public sealed virtual IList`1<TeamProjectCollection> GetCollections(ServiceHostFilterFlags filterFlags);
    public sealed virtual TeamProjectCollection GetDefaultCollection();
    public sealed virtual TeamProjectCollection WaitForCollectionServicingToComplete(ServicingJobDetail jobDetail, TimeSpan timeout);
    public sealed virtual TeamProjectCollection WaitForCollectionServicingToComplete(ServicingJobDetail jobDetail);
    public sealed virtual ServicingJobDetail QueueCreateCollection(string name, string description, bool isDefault, string virtualDirectory, TeamFoundationServiceHostStatus state, IDictionary`2<string, string> servicingTokens, string dataTierConnectionString, string defaultConnectionString, IDictionary`2<string, string> databaseCategoryConnectionStrings);
    public sealed virtual ServicingJobDetail QueueCreateCollection(string name, string description, bool isDefault, string virtualDirectory, TeamFoundationServiceHostStatus state, IDictionary`2<string, string> servicingTokens);
    public sealed virtual ServicingJobDetail QueueAttachCollection(string databaseConnectionString, IDictionary`2<string, string> servicingTokens, bool cloneCollection);
    public sealed virtual ServicingJobDetail QueueAttachCollection(string databaseConnectionString, IDictionary`2<string, string> servicingTokens, bool cloneCollection, string name, string description, string virtualDirectory);
    public sealed virtual ServicingJobDetail QueueDetachCollection(Guid collectionId, IDictionary`2<string, string> servicingTokens, string collectionStoppedMessage, String& detachedConnectionString);
    public sealed virtual ServicingJobDetail QueueDetachCollection(TeamProjectCollection teamProjectCollection, IDictionary`2<string, string> servicingTokens, string collectionStoppedMessage, String& detachedConnectionString);
    public sealed virtual ServicingJobDetail DeleteProject(Guid collectionId, string projectUri, Dictionary`2<string, string> servicingTokens);
    public sealed virtual ServicingJobDetail QueueDeleteProject(Guid collectionId, string projectUri, IDictionary`2<string, string> servicingTokens);
}
internal class Microsoft.TeamFoundation.Framework.Client.TeamProjectCollectionWebService : TfsHttpClient {
    protected string ComponentName { get; }
    protected Guid ConfigurationServiceIdentifier { get; }
    protected string ServiceType { get; }
    public TeamProjectCollectionWebService(TfsConfigurationServer connection);
    public TeamProjectCollectionProperties[] GetCollectionProperties(IEnumerable`1<Guid> ids, ServiceHostFilterFlags filterFlags);
    protected virtual string get_ComponentName();
    protected virtual Guid get_ConfigurationServiceIdentifier();
    protected virtual string get_ServiceType();
    protected virtual Exception ConvertException(SoapException exception);
    public TeamProjectCollectionProperties[] GetCollectionProperties(IEnumerable`1<Guid> ids, int filterFlags);
    public Guid GetDefaultCollectionId();
    public ServicingJobDetail QueueAttachCollection(TeamProjectCollectionProperties collectionProperties, bool cloneCollection);
    public ServicingJobDetail QueueCreateCollection(TeamProjectCollectionProperties collectionProperties, string dataTierConnectionString);
    public ServicingJobDetail QueueDeleteCollection(Guid collectionId);
    public ServicingJobDetail QueueDeleteProject(TeamProjectCollectionProperties collectionProperties, string projectUri);
    public ServicingJobDetail QueueDetachCollection(TeamProjectCollectionProperties collectionProperties, string collectionStoppedMessage, String& detachedConnectionString);
    public ServicingJobDetail QueueUpdateCollection(TeamProjectCollectionProperties collectionProperties);
}
public class Microsoft.TeamFoundation.Framework.Client.TfsDequeueContext : object {
    [CompilerGeneratedAttribute]
private Message <Message>k__BackingField;
    [CompilerGeneratedAttribute]
private long <MessageId>k__BackingField;
    [CompilerGeneratedAttribute]
private TfsMessageQueue <Owner>k__BackingField;
    public Message Message { get; private set; }
    public long MessageId { get; private set; }
    internal TfsMessageQueue Owner { get; private set; }
    internal TfsDequeueContext(TfsMessageQueue owner, TfsMessage message);
    [CompilerGeneratedAttribute]
public Message get_Message();
    [CompilerGeneratedAttribute]
private void set_Message(Message value);
    [CompilerGeneratedAttribute]
public long get_MessageId();
    [CompilerGeneratedAttribute]
private void set_MessageId(long value);
    [CompilerGeneratedAttribute]
internal TfsMessageQueue get_Owner();
    [CompilerGeneratedAttribute]
private void set_Owner(TfsMessageQueue value);
    public void Acknowledge();
    public void Close();
    private static Message Convert(TfsMessage message);
}
public class Microsoft.TeamFoundation.Framework.Client.TfsMessageQueue : object {
    [CompilerGeneratedAttribute]
private List`1<TfsMessageHeader> <AdditionalHeaders>k__BackingField;
    [CompilerGeneratedAttribute]
private Uri <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private TimeSpan <MaxAcknowledgementDelay>k__BackingField;
    [CompilerGeneratedAttribute]
private int <MaxPendingCount>k__BackingField;
    [CompilerGeneratedAttribute]
private Func`2<SoapException, Exception> <ConvertException>k__BackingField;
    [CompilerGeneratedAttribute]
private TfsMessageQueueService <Manager>k__BackingField;
    [CompilerGeneratedAttribute]
private EventHandler Connected;
    [CompilerGeneratedAttribute]
private EventHandler`1<TfsMessageQueueDisconnectedEventArgs> Disconnected;
    private object m_thisLock;
    private Timer m_pollTimer;
    private int m_pollCount;
    private bool m_isShutdown;
    private long m_lastMessageId;
    private int m_pollingSuspended;
    private TimeSpan m_sleepInterval;
    private Timer m_disconnectedTimer;
    private Timer m_acknowledgementTimer;
    private Exception m_pendingException;
    private ITfsRequestChannel m_channel;
    private InputQueue`1<TfsMessage> m_localQueue;
    private bool m_acknowledgementTimerActive;
    private List`1<long> m_pendingAcknowledgements;
    [EditorBrowsableAttribute("1")]
public List`1<TfsMessageHeader> AdditionalHeaders { get; private set; }
    public Uri Id { get; private set; }
    public TimeSpan MaxAcknowledgementDelay { get; private set; }
    public int MaxPendingCount { get; private set; }
    internal Func`2<SoapException, Exception> ConvertException { get; private set; }
    internal TfsMessageQueueService Manager { get; private set; }
    internal TfsMessageQueue(Uri queueId, int maxPendingCount, TimeSpan maxAcknowledgementDelay, TfsMessageQueueService manager, Func`2<SoapException, Exception> convertException);
    [CompilerGeneratedAttribute]
public List`1<TfsMessageHeader> get_AdditionalHeaders();
    [CompilerGeneratedAttribute]
private void set_AdditionalHeaders(List`1<TfsMessageHeader> value);
    [CompilerGeneratedAttribute]
public Uri get_Id();
    [CompilerGeneratedAttribute]
private void set_Id(Uri value);
    [CompilerGeneratedAttribute]
public TimeSpan get_MaxAcknowledgementDelay();
    [CompilerGeneratedAttribute]
private void set_MaxAcknowledgementDelay(TimeSpan value);
    [CompilerGeneratedAttribute]
public int get_MaxPendingCount();
    [CompilerGeneratedAttribute]
private void set_MaxPendingCount(int value);
    [CompilerGeneratedAttribute]
internal Func`2<SoapException, Exception> get_ConvertException();
    [CompilerGeneratedAttribute]
private void set_ConvertException(Func`2<SoapException, Exception> value);
    [CompilerGeneratedAttribute]
internal TfsMessageQueueService get_Manager();
    [CompilerGeneratedAttribute]
private void set_Manager(TfsMessageQueueService value);
    [CompilerGeneratedAttribute]
public void add_Connected(EventHandler value);
    [CompilerGeneratedAttribute]
public void remove_Connected(EventHandler value);
    [CompilerGeneratedAttribute]
public void add_Disconnected(EventHandler`1<TfsMessageQueueDisconnectedEventArgs> value);
    [CompilerGeneratedAttribute]
public void remove_Disconnected(EventHandler`1<TfsMessageQueueDisconnectedEventArgs> value);
    public void Abort();
    internal void Acknowledge(long messageId);
    public void Close();
    public void Close(TimeSpan timeout);
    public IAsyncResult BeginClose(AsyncCallback callback, object state);
    public IAsyncResult BeginClose(TimeSpan timeout, AsyncCallback callback, object state);
    public void EndClose(IAsyncResult result);
    public TfsDequeueContext Dequeue(TimeSpan timeout);
    public bool Dequeue(TimeSpan timeout, TfsDequeueContext& context);
    public IAsyncResult BeginDequeue(TimeSpan timeout, AsyncCallback callback, object state);
    public TfsDequeueContext EndDequeue(IAsyncResult result);
    public bool EndDequeue(IAsyncResult result, TfsDequeueContext& context);
    private bool InitiateShutdown();
    private void EnsurePolling();
    private void EndPoll(IAsyncResult result);
    private void RestoreFailedAcknowledgements(AcknowledgementRange[] failedAcks);
    private void OnMessageDequeued();
    private void OnPollTimerElapsed(object sender);
    private void OnAcknowledgementTimerElapsed(object sender);
    private void EndAcknowledge(IAsyncResult result);
    private void OnConnected();
    private void OnDisconnected(Exception exception);
    private static void NotifyDisconnectedCallback(object state);
    private void NotifyDisconnected();
    private TfsMessage CreateAcknowledgementMessage(AcknowledgementRange[] ranges);
    private TfsMessage CreatePollMessage(AcknowledgementRange[] ranges);
    private AcknowledgementRange[] GetAcknowledgementRanges(bool resetAckTimer);
}
public class Microsoft.TeamFoundation.Framework.Client.TfsMessageQueueDisconnectedEventArgs : EventArgs {
    private Exception m_exception;
    public Exception Exception { get; }
    public TfsMessageQueueDisconnectedEventArgs(Exception exception);
    public Exception get_Exception();
}
internal static class Microsoft.TeamFoundation.Framework.Client.TfsMessageQueueHelpers : object {
    public static TfsBodyWriter CreateAcknowledgeWriter(IList`1<AcknowledgementRange> acknowledgements);
    public static TfsBodyWriter CreateDequeueWriter(TfsMessageQueueVersion version, Uri queueId);
    public static long ReadMessageIdHeader(TfsMessageQueueVersion version, IList`1<TfsMessageHeader> headers);
    private static void OnWriteAcknowledge(XmlDictionaryWriter writer, Object[] parameters);
    private static void OnWriteDequeue(XmlDictionaryWriter writer, Object[] parameters);
}
public class Microsoft.TeamFoundation.Framework.Client.TfsMessageQueueService : object {
    private object m_thisLock;
    private TfsConnection m_connection;
    private Uri m_queueServiceLocation;
    private PollTimeouts m_pollTimeouts;
    private TfsSoapMessageEncoder m_encoder;
    private TfsMessageQueueVersion m_version;
    private Dictionary`2<Uri, TfsMessageQueue> m_activeQueues;
    internal VssCredentials Credentials { get; }
    public TimeSpan ReceiveTimeout { get; }
    public TimeSpan ReconnectTimeout { get; }
    public TimeSpan SleepTimeout { get; }
    public TfsConnection Connection { get; }
    [ObsoleteAttribute("This property has been deprecated. See TfsMessageQueueService.Connection instead.")]
public TfsTeamProjectCollection ProjectCollection { get; }
    internal TfsMessageQueueVersion Version { get; }
    internal Uri QueueServiceLocation { get; }
    internal VssCredentials get_Credentials();
    public TimeSpan get_ReceiveTimeout();
    public TimeSpan get_ReconnectTimeout();
    public TimeSpan get_SleepTimeout();
    public TfsConnection get_Connection();
    public TfsTeamProjectCollection get_ProjectCollection();
    internal TfsMessageQueueVersion get_Version();
    internal Uri get_QueueServiceLocation();
    public void Close();
    private sealed virtual override void System.IDisposable.Dispose();
    public TfsMessageQueue CreateQueue(Uri queueId);
    public TfsMessageQueue CreateQueue(Uri queueId, int maxPendingCount);
    public TfsMessageQueue CreateQueue(Uri queueId, int maxPendingCount, TimeSpan maxAcknowledgementDelay);
    public TfsMessageQueue CreateQueue(Uri queueId, int maxPendingCount, TimeSpan maxAcknowledgementDelay, Func`2<SoapException, Exception> convertException);
    internal void Remove(TfsMessageQueue queue);
    private sealed virtual override void Microsoft.TeamFoundation.Client.ITfsConnectionObject.Initialize(TfsConnection server);
    internal ITfsRequestChannel CreatePollChannel();
    private void EnsureInitialized();
}
public class Microsoft.TeamFoundation.Framework.Client.TooManyItemsException : TeamFoundationServiceException {
    public TooManyItemsException(string message);
    public TooManyItemsException(string message, Exception ex);
    protected TooManyItemsException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.TeamFoundation.Framework.Client.UnauthorizedRequestException : RequestFilterException {
    public UnauthorizedRequestException(string message);
    public UnauthorizedRequestException(string message, Exception ex);
    protected UnauthorizedRequestException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.TeamFoundation.Framework.Client.UnexpectedDatabaseResultException : TeamFoundationServiceException {
    public UnexpectedDatabaseResultException(string message);
    public UnexpectedDatabaseResultException(string message, Exception ex);
    protected UnexpectedDatabaseResultException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.TeamFoundation.Framework.Client.UnexpectedHostTypeException : TeamFoundationServiceException {
    public UnexpectedHostTypeException(string message);
    public UnexpectedHostTypeException(string message, Exception ex);
    protected UnexpectedHostTypeException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.TeamFoundation.Framework.Client.UnexpectedItemKindException : StrongBoxException {
    public UnexpectedItemKindException(string message);
    public UnexpectedItemKindException(string message, Exception ex);
    protected UnexpectedItemKindException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.TeamFoundation.Framework.Client.UnknownMigrationOwnerException : TeamFoundationServiceException {
    public UnknownMigrationOwnerException(string message);
    public UnknownMigrationOwnerException(string message, Exception ex);
    protected UnknownMigrationOwnerException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.TeamFoundation.Framework.Client.UnknownRepositoryException : ProxyException {
    public UnknownRepositoryException(string message);
    public UnknownRepositoryException(string message, Exception ex);
    protected UnknownRepositoryException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.TeamFoundation.Framework.Client.UnregisterProjectException : AuthorizationSubsystemServiceException {
    public UnregisterProjectException(string message);
    public UnregisterProjectException(string message, Exception ex);
    protected UnregisterProjectException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.TeamFoundation.Framework.Client.UpdateGroupException : TeamFoundationIdentityServiceException {
    public UpdateGroupException(string message);
    public UpdateGroupException(string message, Exception ex);
    protected UpdateGroupException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.TeamFoundation.Framework.Client.VirtualPathMappingException : TeamFoundationServiceException {
    public VirtualPathMappingException(string message);
    public VirtualPathMappingException(string message, Exception ex);
    protected VirtualPathMappingException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.TeamFoundation.Framework.Client.VirtualPathsConflictException : TeamFoundationServiceException {
    public VirtualPathsConflictException(string message);
    public VirtualPathsConflictException(string message, Exception ex);
    protected VirtualPathsConflictException(SerializationInfo info, StreamingContext context);
}
internal class Microsoft.TeamFoundation.IdFormatter : object {
    private static string GetProjectName(string projectUri, ICommonStructureService css);
    internal static string FormatIdDisplay(Identity id, ICommonStructureService css);
}
internal class Microsoft.TeamFoundation.ManifestBasedPluginCatalogHelper : PluginCatalogHelper {
    private bool includeCurrentUserPlugins;
    internal ManifestBasedPluginCatalogHelper(bool includeCurrentUserPlugins);
    public virtual void FillCategoryNames(IList`1<string> names);
    public virtual void FillPluginCategory(string categoryName, bool includeDisabled, IList`1<PluginRecord> pluginRecords);
    public virtual void Refresh();
}
public class Microsoft.TeamFoundation.PluginActivationException : ApplicationException {
    public PluginActivationException(string message);
    public PluginActivationException(string message, Exception innerException);
    protected PluginActivationException(SerializationInfo info, StreamingContext context);
}
[DefaultMemberAttribute("Item")]
public abstract class Microsoft.TeamFoundation.PluginCatalog : object {
    protected bool includeDisabled;
    public String[] CategoryNames { get; }
    public bool IncludeDisabledPlugins { get; public set; }
    public PluginCategory Item { get; }
    public abstract virtual String[] get_CategoryNames();
    public bool get_IncludeDisabledPlugins();
    public void set_IncludeDisabledPlugins(bool value);
    public abstract virtual PluginCategory get_Item(string categoryName);
    public abstract virtual void Refresh();
}
public abstract class Microsoft.TeamFoundation.PluginCatalogHelper : object {
    public abstract virtual void FillCategoryNames(IList`1<string> names);
    public abstract virtual void FillPluginCategory(string categoryName, bool includeDisabled, IList`1<PluginRecord> pluginRecords);
    public abstract virtual void Refresh();
}
[DefaultMemberAttribute("Item")]
public class Microsoft.TeamFoundation.PluginCatalogImpl : PluginCatalog {
    private List`1<PluginCatalogHelper> catalogHelpers;
    public String[] CategoryNames { get; }
    public PluginCategory Item { get; }
    public PluginCatalogImpl(PluginCatalogHelper catalogHelper);
    public PluginCatalogImpl(PluginCatalogHelper[] catalogHelpers);
    public PluginCatalogImpl(PluginCatalog pluginCatalog, PluginCatalogHelper[] catalogHelpers);
    public virtual String[] get_CategoryNames();
    public virtual PluginCategory get_Item(string categoryName);
    public virtual void Refresh();
}
[DefaultMemberAttribute("Item")]
public class Microsoft.TeamFoundation.PluginCategory : object {
    private string name;
    private List`1<PluginRecord> pluginRecords;
    public string Name { get; }
    public PluginRecord[] PluginRecords { get; }
    public PluginRecord Item { get; }
    internal PluginCategory(string categoryName, List`1<PluginRecord> pluginRecords);
    public string get_Name();
    public PluginRecord[] get_PluginRecords();
    public PluginRecord get_Item(string pluginId);
}
public abstract class Microsoft.TeamFoundation.PluginRecord : object {
    private string id;
    private string name;
    private string description;
    private Guid guid;
    private bool enabled;
    private XmlNode pluginData;
    public string Id { get; }
    public string Name { get; }
    public Guid GUID { get; }
    public string Description { get; }
    public XmlNode PluginData { get; }
    public bool Enabled { get; }
    protected PluginRecord(string id, string name, Guid guid, string description, bool enabled, XmlNode pluginData);
    public string get_Id();
    public string get_Name();
    public Guid get_GUID();
    public string get_Description();
    public XmlNode get_PluginData();
    public bool get_Enabled();
    public abstract virtual object ActivatePlugin(Type pluginInterface);
    public abstract virtual object ActivatePlugin(Guid serviceType);
}
internal class Microsoft.TeamFoundation.Proxy.AuthorizationService : object {
    private AuthorizationService proxy;
    internal AuthorizationService(TfsTeamProjectCollection tfs, string url);
    internal AuthorizationService(string url);
    public sealed virtual void RegisterObject(string objectId, string objectClassId, string projectUri, string parentId);
    public sealed virtual void UnregisterObject(string objectId);
    public sealed virtual void ResetInheritance(string objectId, string parentObjectId);
    public sealed virtual string GetObjectClass(string objectId);
    public sealed virtual String[] ListObjectClasses();
    public sealed virtual String[] ListObjectClassActions(string objectClassId);
    public sealed virtual String[] ListLocalizedActionNames(string objectClassId, String[] actionId);
    public sealed virtual void AddAccessControlEntry(string objectId, AccessControlEntry ace);
    public sealed virtual void RemoveAccessControlEntry(string objectId, AccessControlEntry ace);
    public sealed virtual string GetChangedAccessControlEntries(int sequence_id);
    public sealed virtual void ReplaceAccessControlList(string objectId, AccessControlEntry[] acl);
    public sealed virtual AccessControlEntry[] ReadAccessControlList(string objectId);
    public sealed virtual AccessControlEntry[][] ReadAccessControlLists(String[] objectId);
    public sealed virtual void CheckPermission(string objectId, string actionId);
    public sealed virtual Boolean[] IsPermitted(String[] objectId, string actionId, string userSid);
    public sealed virtual Boolean[] IsPermitted(string objectId, String[] actionId, string userSid);
    public sealed virtual Boolean[] IsPermitted(string objectId, string actionId, String[] userSid);
}
internal class Microsoft.TeamFoundation.Proxy.CommonStructureService : object {
    private Hashtable _projectInfoCache;
    protected Classification _proxy;
    private static object m_locker;
    internal CommonStructureService(TfsTeamProjectCollection tfsObject, string url);
    private static CommonStructureService();
    public sealed virtual ProjectInfo[] ListProjects();
    public sealed virtual ProjectInfo[] ListAllProjects();
    public sealed virtual NodeInfo[] ListStructures(string projectUri);
    public sealed virtual XmlElement GetNodesXml(String[] nodeUris, bool childNodes);
    public sealed virtual XmlElement GetDeletedNodesXml(string projectUri, DateTime since);
    public sealed virtual ProjectInfo GetProject(string projectUri);
    public sealed virtual NodeInfo GetNode(string nodeUri);
    public sealed virtual NodeInfo GetNodeFromPath(string nodePath);
    public sealed virtual ProjectInfo GetProjectFromName(string projectName);
    public sealed virtual ProjectInfo CreateProject(string projectName, XmlElement structure);
    public sealed virtual void ClearProjectInfoCache();
    public sealed virtual void DeleteProject(string projectUri);
    public sealed virtual string CreateNode(string nodeName, string parentNodeUri);
    public sealed virtual void RenameNode(string nodeUri, string newNodeName);
    public sealed virtual void MoveBranch(string nodeUri, string newParentNodeUri);
    public sealed virtual void ReorderNode(string nodeUri, int moveBy);
    public sealed virtual void DeleteBranches(String[] nodeUris, string reclassifyUri);
    public sealed virtual void GetProjectProperties(string projectUri, String& name, String& state, Int32& templateId, ProjectProperty[]& properties);
    public sealed virtual void UpdateProjectProperties(string projectUri, string state, ProjectProperty[] properties);
    public sealed virtual string GetChangedNodes(int firstSequenceId);
    private ProjectInfo GetProjectInfoFromNameFromCache(string projectName);
}
internal class Microsoft.TeamFoundation.Proxy.CommonStructureService3 : CommonStructureService {
    private Classification3 _proxy3;
    internal CommonStructureService3(TfsTeamProjectCollection tfsObject, string url);
    public sealed virtual string GetChangedNodesAndProjects(int firstSequenceId);
}
internal class Microsoft.TeamFoundation.Proxy.CommonStructureService4 : CommonStructureService3 {
    private Classification4 _proxy4;
    internal CommonStructureService4(TfsTeamProjectCollection tfsObject, string url);
    public sealed virtual string CreateNode(string nodeName, string parentNodeUri, Nullable`1<DateTime> startDate, Nullable`1<DateTime> finishDate);
    public sealed virtual void SetIterationDates(string nodeUri, Nullable`1<DateTime> startDate, Nullable`1<DateTime> finishDate);
    public sealed virtual ProjectProperty GetProjectProperty(string projectUri, string name);
    public sealed virtual void SetProjectProperty(string projectUri, string name, string value);
}
[ObsoleteAttribute("IGroupSecurityService is obsolete.  Please use the IIdentityManagementService or ISecurityService instead.", "False")]
internal class Microsoft.TeamFoundation.Proxy.GroupSecurityService : object {
    private GroupSecurityService proxy;
    private IdentityManagementWebService m_proxyV3;
    private ICommonStructureService m_structureService;
    private bool m_serverIsV3;
    internal GroupSecurityService(TfsTeamProjectCollection tfs, string url);
    public sealed virtual Identity ReadIdentity(SearchFactor factor, string factorValue, QueryMembership queryMembership);
    public sealed virtual Identity[] ReadIdentities(SearchFactor factor, String[] factorValue, QueryMembership queryMembership);
    public sealed virtual bool IsIdentityCached(SearchFactor factor, string factorValue);
    public sealed virtual string GetChangedIdentities(int sequence_id);
    public sealed virtual Identity ReadIdentityFromSource(SearchFactor factor, string factorValue);
    public sealed virtual string CreateApplicationGroup(string projectUri, string groupName, string groupDescription);
    public sealed virtual Identity[] ListApplicationGroups(string projectUri);
    public sealed virtual void UpdateApplicationGroup(string groupSid, ApplicationGroupProperty property, string newValue);
    public sealed virtual void DeleteApplicationGroup(string groupSid);
    public sealed virtual void AddMemberToApplicationGroup(string groupSid, string identitySid);
    public sealed virtual void RemoveMemberFromApplicationGroup(string groupSid, string identitySid);
    public sealed virtual bool IsMember(string groupSid, string identitySid);
    public sealed virtual Identity Convert(TeamFoundationIdentity identity);
    public sealed virtual TeamFoundationIdentity Convert(Identity identity);
    private string GetProjectName(string scopeId);
}
[ObsoleteAttribute("IGroupSecurityService2 is obsolete.  Please use the IIdentityManagementService2 or ISecurityService instead.", "False")]
internal class Microsoft.TeamFoundation.Proxy.GroupSecurityService2 : GroupSecurityService {
    private GroupSecurityService2 proxy2;
    internal GroupSecurityService2(TfsTeamProjectCollection tfs, string url);
    public sealed virtual IResultCollection`1<Identity> GetIdentityChanges(int sequenceId, Int32& lastSequenceId);
}
internal class Microsoft.TeamFoundation.Proxy.Security.GroupSecurityService2 : TfsHttpClient {
    private static string c_soapAction;
    private static string c_soapNamespace;
    protected string ComponentName { get; }
    protected string ServiceType { get; }
    protected Guid CollectionServiceIdentifier { get; }
    public GroupSecurityService2(TfsTeamProjectCollection tfs);
    protected virtual string get_ComponentName();
    protected virtual string get_ServiceType();
    protected virtual Guid get_CollectionServiceIdentifier();
    public int GetIdentityChanges(IClientContext clientContext, int sequenceId, IResultCollection`1& identities);
    private static void WriteParameters(XmlDictionaryWriter writer, Object[] parameters);
}
internal class Microsoft.TeamFoundation.Proxy.ServerStatusService : object {
    private ServerStatus _proxy;
    internal ServerStatusService(TfsTeamProjectCollection tfs, string url);
    internal ServerStatusService(string url);
    public sealed virtual DataChanged[] GetServerStatus();
    public sealed virtual string GetSupportedContractVersion();
    public sealed virtual string CheckAuthentication();
}
[XmlTypeAttribute]
public class Microsoft.TeamFoundation.Server.AccessControlEntry : object {
    public string ActionId;
    public string Sid;
    public bool Deny;
    public AccessControlEntry(string actionId, string sid, bool deny);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public sealed virtual object Clone();
    [EditorBrowsableAttribute("1")]
public static AccessControlEntry FromXml(IServiceProvider serviceProvider, XmlReader reader);
    public virtual string ToString();
    [EditorBrowsableAttribute("1")]
public void ToXml(XmlWriter writer, string element);
    [EditorBrowsableAttribute("1")]
public static void ToXml(XmlWriter writer, string element, AccessControlEntry obj);
}
[ObsoleteAttribute("The AclChangedEvent class is obsolete.")]
public class Microsoft.TeamFoundation.Server.AclChangedEvent : object {
    public string ObjectId;
    public string ActionId;
    public string Sid;
    public string EntryType;
    public string ChangeType;
    public AclChangedEvent(string objectId, string actionId, string sid, string entryType, string changeType);
}
public enum Microsoft.TeamFoundation.Server.ApplicationGroupProperty : Enum {
    public int value__;
    public static ApplicationGroupProperty Description;
    public static ApplicationGroupProperty Name;
    public static ApplicationGroupProperty None;
}
public enum Microsoft.TeamFoundation.Server.ApplicationGroupSpecialType : Enum {
    public int value__;
    public static ApplicationGroupSpecialType AdministrativeApplicationGroup;
    public static ApplicationGroupSpecialType EveryoneApplicationGroup;
    public static ApplicationGroupSpecialType Generic;
    public static ApplicationGroupSpecialType LicenseesApplicationGroup;
    public static ApplicationGroupSpecialType ServiceApplicationGroup;
}
[XmlTypeAttribute]
public class Microsoft.TeamFoundation.Server.ArtifactType : object {
    private string m_Name;
    private OutboundLinkType[] m_ForwardLinkTypes;
    public string Name { get; public set; }
    public OutboundLinkType[] OutboundLinkTypes { get; public set; }
    public string get_Name();
    public void set_Name(string value);
    public OutboundLinkType[] get_OutboundLinkTypes();
    public void set_OutboundLinkTypes(OutboundLinkType[] value);
}
internal class Microsoft.TeamFoundation.Server.ArtifactTypeCombiner : object {
    public sealed virtual ArtifactType Combine(ArtifactType t1, ArtifactType t2);
}
internal class Microsoft.TeamFoundation.Server.ArtifactTypeComparer : object {
    public sealed virtual int Compare(ArtifactType first, ArtifactType second);
}
public static class Microsoft.TeamFoundation.Server.AuthorizationCssNodePermissions : object {
    public static int None;
    public static int GenericRead;
    public static int GenericWrite;
    public static int CreateChildren;
    public static int Delete;
    public static int WorkItemRead;
    public static int WorkItemWrite;
    public static int ManageTestPlans;
    public static int ManageTestSuites;
    public static int ViewEmailAddress;
    public static int WorkItemSaveComment;
    public static int AllPermissions;
    private static AuthorizationCssNodePermissions();
}
public static class Microsoft.TeamFoundation.Server.AuthorizationIterationNodePermissions : object {
    public static int GenericRead;
    public static int GenericWrite;
    public static int CreateChildren;
    public static int Delete;
    public static int AllPermissions;
    private static AuthorizationIterationNodePermissions();
}
public static class Microsoft.TeamFoundation.Server.AuthorizationNamespacePermissions : object {
    public static int GenericRead;
    public static int GenericWrite;
    public static int CreateProjects;
    public static int AdministerWarehouse;
    public static int TriggerEvent;
    public static int ManageTemplate;
    public static int DiagnosticTrace;
    public static int SynchronizeRead;
    public static int ManageLinkTypes;
    public static int ManageTestControllers;
    public static int AllPermissions;
    private static AuthorizationNamespacePermissions();
}
public static class Microsoft.TeamFoundation.Server.AuthorizationProjectPermissions : object {
    public static int GenericRead;
    public static int GenericWrite;
    public static int Delete;
    public static int PublishTestResults;
    public static int AdministerBuild;
    public static int StartBuild;
    public static int EditBuildStatus;
    public static int UpdateBuild;
    public static int DeleteTestResults;
    public static int ViewTestResults;
    public static int ManageTestEnvironments;
    public static int ManageTestConfigurations;
    public static int WorkItemSoftDelete;
    public static int WorkItemMove;
    public static int WorkItemPermanentlyDelete;
    public static int Rename;
    public static int ManageProperties;
    public static int ManageSystemProperties;
    public static int BypassPropertyCache;
    public static int BypassRules;
    public static int SuppressNotifications;
    public static int UpdateVisibility;
    public static int AllPermissions;
    private static AuthorizationProjectPermissions();
}
public static class Microsoft.TeamFoundation.Server.AuthorizationSecurityClasses : object {
    public static string Project;
    public static string Namespace;
    public static string CommonStructureNode;
    public static string IterationNode;
    public static string EventSubscription;
}
public static class Microsoft.TeamFoundation.Server.AuthorizationSecurityConstants : object {
    public static Guid NamespaceSecurityGuid;
    public static Guid ProjectSecurityGuid;
    public static Guid CommonStructureNodeSecurityGuid;
    public static Guid IterationNodeSecurityGuid;
    public static string NamespaceSecurityToken;
    public static string NamespaceSecurityObjectId;
    public static string ProjectSecurityPrefix;
    public static char SeparatorChar;
    private static AuthorizationSecurityConstants();
}
internal class Microsoft.TeamFoundation.Server.AuthorizationSecurityNamespace : SecurityNamespace {
    private IAuthorizationService m_authorizationService;
    private SecurityNamespaceDescription m_description;
    private TfsTeamProjectCollection m_projectCollection;
    public SecurityNamespaceDescription Description { get; }
    public AuthorizationSecurityNamespace(TfsTeamProjectCollection projectCollection, SecurityNamespaceDescription description);
    public virtual SecurityNamespaceDescription get_Description();
    public virtual Collection`1<bool> HasPermission(string token, IdentityDescriptor descriptor, IEnumerable`1<int> requestedPermissions, bool alwaysAllowAdministrators);
    public virtual Collection`1<bool> HasPermission(string token, IEnumerable`1<IdentityDescriptor> descriptors, int requestedPermissions, bool alwaysAllowAdministrators);
    public virtual Collection`1<bool> HasPermission(IEnumerable`1<string> tokens, IdentityDescriptor descriptor, int requestedPermissions, bool alwaysAllowAdministrators);
    public virtual bool HasPermission(string token, IdentityDescriptor descriptor, int requestedPermissions, bool alwaysAllowAdministrators);
    public virtual Collection`1<bool> HasWritePermission(string token, IEnumerable`1<int> permissionsToChange);
    public virtual bool HasWritePermission(string token, int permissionsToChange);
    public virtual int QueryEffectivePermissions(string token, IdentityDescriptor descriptor);
    public virtual AccessControlList QueryAccessControlList(string token, IEnumerable`1<IdentityDescriptor> descriptors, bool includeExtendedInfo);
    public virtual Collection`1<AccessControlList> QueryAccessControlLists(string token, IEnumerable`1<IdentityDescriptor> descriptors, bool includeExtendedInfo, bool recurse);
    public virtual bool RemoveAccessControlLists(string token, bool recurse);
    public virtual bool RemoveAccessControlLists(IEnumerable`1<string> tokens, bool recurse);
    public virtual AccessControlEntry RemovePermissions(string token, IdentityDescriptor descriptor, int permissionsToRemove);
    public virtual bool RemoveAccessControlEntry(string token, IdentityDescriptor identity);
    public virtual bool RemoveAccessControlEntries(string token, IEnumerable`1<IdentityDescriptor> descriptors);
    public virtual void SetAccessControlList(AccessControlList accessControlList);
    public virtual void SetAccessControlLists(IEnumerable`1<AccessControlList> accessControlLists);
    public virtual void SetInheritFlag(string token, bool inherit);
    public virtual AccessControlEntry SetAccessControlEntry(string token, AccessControlEntry permission, bool merge);
    public virtual AccessControlEntry SetPermissions(string token, IdentityDescriptor descriptor, int allow, int deny, bool merge);
    public virtual Collection`1<AccessControlEntry> SetAccessControlEntries(string token, IEnumerable`1<AccessControlEntry> permissions, bool merge);
}
internal static class Microsoft.TeamFoundation.Server.AuthorizationSecurityNamespaceFactory : object {
    internal static IEnumerable`1<SecurityNamespace> GetSecurityNamespaces(TfsTeamProjectCollection tfs);
    private static List`1<ActionDefinition> GetActionDefinitions(IAuthorizationService authorizationService, string classId);
}
internal class Microsoft.TeamFoundation.Server.AuthorizationService : TfsHttpClient {
    protected Guid CollectionServiceIdentifier { get; }
    protected string ServiceType { get; }
    protected string ComponentName { get; }
    public AuthorizationService(TfsTeamProjectCollection connection);
    internal AuthorizationService(TfsTeamProjectCollection server, string url);
    protected virtual Guid get_CollectionServiceIdentifier();
    protected virtual string get_ServiceType();
    public void AddAccessControlEntry(string objectId, AccessControlEntry ace);
    public void CheckPermission(string objectId, string actionId);
    public string GetChangedAccessControlEntries(int sequence_id);
    public string GetObjectClass(string objectId);
    public Boolean[] IsPermittedByActionList(string objectId, String[] actionId, string userSid);
    public Boolean[] IsPermittedByObjectList(String[] objectId, string actionId, string userSid);
    public Boolean[] IsPermittedBySidList(string objectId, string actionId, String[] userSid);
    public String[] ListLocalizedActionNames(string objectClassId, String[] actionId);
    public String[] ListObjectClassActions(string objectClassId);
    public String[] ListObjectClasses();
    public AccessControlEntry[] ReadAccessControlList(string objectId);
    public AccessControlEntry[][] ReadAccessControlLists(String[] objectId);
    public void RegisterObject(string objectId, string objectClassId, string projectUri, string parentObjectId);
    public void RemoveAccessControlEntry(string objectId, AccessControlEntry ace);
    public void ReplaceAccessControlList(string objectId, AccessControlEntry[] acl);
    public void ResetInheritance(string objectId, string parentObejctId);
    public void UnregisterObject(string objectId);
    protected virtual string get_ComponentName();
}
public class Microsoft.TeamFoundation.Server.AuthorizationSubsystemException : TeamFoundationServerException {
    public AuthorizationSubsystemException(string message);
    public AuthorizationSubsystemException(string message, Exception innerException);
    protected AuthorizationSubsystemException(SerializationInfo info, StreamingContext context);
}
public static class Microsoft.TeamFoundation.Server.Aux : object {
    public static string NormalizeString(string s, bool allowEmpty);
}
public class Microsoft.TeamFoundation.Server.BranchMovedEvent : object {
    private string _projectUri;
    private string _nodeUri;
    private string _oldParentUri;
    private string _newParentUri;
    public string ProjectUri { get; public set; }
    public string NodeUri { get; public set; }
    public string OldParentUri { get; public set; }
    public string NewParentUri { get; public set; }
    public BranchMovedEvent(string projectUri, string nodeUri, string oldParentUri, string newParentUri);
    public string get_ProjectUri();
    public void set_ProjectUri(string value);
    public string get_NodeUri();
    public void set_NodeUri(string value);
    public string get_OldParentUri();
    public void set_OldParentUri(string value);
    public string get_NewParentUri();
    public void set_NewParentUri(string value);
}
public enum Microsoft.TeamFoundation.Server.ChangeType : Enum {
    public int value__;
    public static ChangeType Add;
    public static ChangeType Change;
    public static ChangeType Delete;
    public static ChangeType NoChange;
}
[DefaultMemberAttribute("Item")]
public class Microsoft.TeamFoundation.Server.CisDictionary : Hashtable {
    public object Item { get; public set; }
    protected CisDictionary(SerializationInfo info, StreamingContext context);
    public virtual object get_Item(object index);
    public virtual void set_Item(object index, object value);
    public virtual bool Contains(object key);
    public virtual bool ContainsKey(object key);
    public virtual void Add(object key, object value);
}
internal class Microsoft.TeamFoundation.Server.Classification : TfsHttpClient {
    protected string ComponentName { get; }
    protected Guid CollectionServiceIdentifier { get; }
    protected string ServiceType { get; }
    internal Classification(TfsTeamProjectCollection server, string url);
    public Classification(TfsTeamProjectCollection connection);
    protected virtual string get_ComponentName();
    protected virtual Guid get_CollectionServiceIdentifier();
    protected virtual string get_ServiceType();
    public string CreateNode(string nodeName, string parentNodeUri);
    public ProjectInfo CreateProject(string projectName, XmlNode structure);
    public void DeleteBranches(String[] nodeUris, string reclassifyUri);
    public void DeleteProject(string projectUri);
    public string GetChangedNodes(int firstSequenceId);
    public XmlNode GetDeletedNodesXml(string projectUri, DateTime since);
    public NodeInfo GetNode(string nodeUri);
    public NodeInfo GetNodeFromPath(string nodePath);
    public XmlNode GetNodesXml(String[] nodeUris, bool childNodes);
    public ProjectInfo GetProject(string projectUri);
    public ProjectInfo GetProjectFromName(string projectName);
    public void GetProjectProperties(string projectUri, String& name, String& state, Int32& templateId, ProjectProperty[]& properties);
    public ProjectInfo[] ListAllProjects();
    public ProjectInfo[] ListProjects();
    public NodeInfo[] ListStructures(string projectUri);
    public void MoveBranch(string nodeUri, string newParentNodeUri);
    public void RenameNode(string nodeUri, string newNodeName);
    public void ReorderNode(string nodeUri, int moveBy);
    public void UpdateProjectProperties(string projectUri, string state, ProjectProperty[] properties);
}
internal class Microsoft.TeamFoundation.Server.Classification3 : Classification {
    protected Guid CollectionServiceIdentifier { get; }
    protected string ServiceType { get; }
    internal Classification3(TfsTeamProjectCollection server, string url);
    public Classification3(TfsTeamProjectCollection connection);
    protected virtual Guid get_CollectionServiceIdentifier();
    protected virtual string get_ServiceType();
    public string GetChangedNodesAndProjects(int firstSequenceId);
}
internal class Microsoft.TeamFoundation.Server.Classification4 : Classification3 {
    protected Guid CollectionServiceIdentifier { get; }
    protected string ServiceType { get; }
    internal Classification4(TfsTeamProjectCollection server, string url);
    public Classification4(TfsTeamProjectCollection connection);
    protected virtual Guid get_CollectionServiceIdentifier();
    protected virtual string get_ServiceType();
    public string CreateNodeWithDates(string nodeName, string parentNodeUri, Nullable`1<DateTime> startDate, Nullable`1<DateTime> finishDate);
    public ProjectProperty GetProjectProperty(string projectUri, string name);
    public void SetIterationDates(string nodeUri, Nullable`1<DateTime> startDate, Nullable`1<DateTime> finishDate);
    public void SetProjectProperty(string projectUri, string name, string value);
}
[ObsoleteAttribute("The CommonStructureServiceFaultCodes class is obsolete.")]
public class Microsoft.TeamFoundation.Server.CommonStructureServiceFaultCodes : object {
    public static SoapFaultSubCode Unknown { get; }
    public static SoapFaultSubCode Security { get; }
    public static SoapFaultSubCode Service { get; }
    public static SoapFaultSubCode Application { get; }
    public static SoapFaultSubCode ArgumentException { get; }
    public static SoapFaultSubCode ArgumentNullException { get; }
    public static SoapFaultSubCode BadServerConfig { get; }
    public static SoapFaultSubCode get_Unknown();
    public static SoapFaultSubCode get_Security();
    public static SoapFaultSubCode get_Service();
    public static SoapFaultSubCode get_Application();
    public static SoapFaultSubCode get_ArgumentException();
    public static SoapFaultSubCode get_ArgumentNullException();
    public static SoapFaultSubCode get_BadServerConfig();
}
public class Microsoft.TeamFoundation.Server.CommonStructureSubsystemException : TeamFoundationServerException {
    public CommonStructureSubsystemException(string message);
    public CommonStructureSubsystemException(string message, Exception innerException);
    protected CommonStructureSubsystemException(SerializationInfo info, StreamingContext context);
}
[EditorBrowsableAttribute("1")]
public class Microsoft.TeamFoundation.Server.CssDataProvider : object {
    private CssNodeCollection _nodeCollection;
    private NodeInfo _cssRootNode;
    private string _initialPath;
    private static string PATHSEPARATOR;
    private ResourceManager _resources;
    public CssDataProvider(TfsTeamProjectCollection tfs, string projectUri, string structureType, string initialPath, String[] nodeUrisToBeSkipped);
    public CssDataProvider(TfsTeamProjectCollection tfs, string projectUri, string structureType);
    public CssDataProvider(TfsTeamProjectCollection tfs, string projectUri, string structureType, string initialPath);
    private static CssDataProvider();
    private void LoadTree(ICommonStructureService proxy, string projectName, string projectUri, String[] nodeUrisToBeSkipped);
    private CssNodeCollection GetChildren(XmlNode cssTree, String[] nodeUrisToBeSkipped);
    private NodeInfo GetNodeInfo(XmlNode xn);
    private void SetInitialPath(ICommonStructureService proxy, string projectName, string initialPath);
    public NodeInfo TryGetCssNodeInfo(string path);
    private sealed virtual override CssNodeCollection Microsoft.TeamFoundation.Client.ICssDataProvider.GetChildNodes(CssNode parent);
    private sealed virtual override string Microsoft.TeamFoundation.Client.ICssDataProvider.GetInitialPath();
    private sealed virtual override string Microsoft.TeamFoundation.Client.ICssDataProvider.GetDefaultRootNodeName();
}
internal class Microsoft.TeamFoundation.Server.CssDataProviderNode : CssNode {
    private NodeInfo _nodeInfo;
    private CssNodeCollection _children;
    internal CssNodeCollection Children { get; internal set; }
    internal NodeInfo NodeInfo { get; }
    internal CssDataProviderNode(NodeInfo nodeInfo);
    internal void set_Children(CssNodeCollection value);
    internal CssNodeCollection get_Children();
    internal NodeInfo get_NodeInfo();
}
[XmlTypeAttribute]
public class Microsoft.TeamFoundation.Server.Database : object {
    private string m_Name;
    private string m_DatabaseName;
    private string m_SQLServerName;
    private string m_ConnectionString;
    private bool m_ExcludeFromBackup;
    public string Name { get; public set; }
    public string DatabaseName { get; public set; }
    public string SQLServerName { get; public set; }
    public string ConnectionString { get; public set; }
    public bool ExcludeFromBackup { get; public set; }
    public Database(string name, string databaseName, string serverName, string connectionString, bool excludeFromBackup);
    public string get_Name();
    public void set_Name(string value);
    public string get_DatabaseName();
    public void set_DatabaseName(string value);
    public string get_SQLServerName();
    public void set_SQLServerName(string value);
    public string get_ConnectionString();
    public void set_ConnectionString(string value);
    public bool get_ExcludeFromBackup();
    public void set_ExcludeFromBackup(bool value);
    internal Predicate`1<Database> EqualsByName();
    [CompilerGeneratedAttribute]
private bool <EqualsByName>b__17_0(Database that);
}
internal class Microsoft.TeamFoundation.Server.DatabaseComparer : object {
    public sealed virtual int Compare(Database first, Database second);
}
public class Microsoft.TeamFoundation.Server.DataChanged : object {
    public string DataType;
    public DateTime LastModified;
    public DataChanged(string dataType, DateTime dateTime);
    [EditorBrowsableAttribute("1")]
public static DataChanged FromXml(IServiceProvider serviceProvider, XmlReader reader);
    public virtual string ToString();
    [EditorBrowsableAttribute("1")]
public void ToXml(XmlWriter writer, string element);
    [EditorBrowsableAttribute("1")]
public static void ToXml(XmlWriter writer, string element, DataChanged obj);
}
public class Microsoft.TeamFoundation.Server.DataChangedEvent : object {
    public string DataType;
    public int SeqId;
    public DataChangedEvent(string dataType, int sequenceId);
}
public class Microsoft.TeamFoundation.Server.DeletedNode : object {
    private string _uri;
    private DeletedNode[] _children;
    public string Uri { get; public set; }
    public DeletedNode[] Children { get; public set; }
    public DeletedNode(string uri);
    public DeletedNode(string uri, DeletedNode[] children);
    public string get_Uri();
    public void set_Uri(string value);
    public DeletedNode[] get_Children();
    public void set_Children(DeletedNode[] value);
}
[XmlTypeAttribute]
public class Microsoft.TeamFoundation.Server.EventType : object {
    private string m_Name;
    private string m_Schema;
    public string Name { get; public set; }
    public string Schema { get; public set; }
    public EventType(string name, string schema);
    public string get_Name();
    public void set_Name(string value);
    public string get_Schema();
    public void set_Schema(string value);
    internal Predicate`1<EventType> EqualsByName();
    [CompilerGeneratedAttribute]
private bool <EqualsByName>b__8_0(EventType that);
}
internal class Microsoft.TeamFoundation.Server.EventTypeComparer : object {
    public sealed virtual int Compare(EventType first, EventType second);
}
[ObsoleteAttribute("GroupSecurityService is obsolete.  Please use the IdentityManagementService or SecurityService instead.", "False")]
internal class Microsoft.TeamFoundation.Server.GroupSecurityService : TfsHttpClient {
    protected Guid CollectionServiceIdentifier { get; }
    protected string ServiceType { get; }
    protected string ComponentName { get; }
    public GroupSecurityService(TfsTeamProjectCollection connection);
    internal GroupSecurityService(TfsTeamProjectCollection server, string url);
    protected virtual Guid get_CollectionServiceIdentifier();
    protected virtual string get_ServiceType();
    public void AddMemberToApplicationGroup(string groupSid, string identitySid);
    public string CreateApplicationGroup(string projectUri, string groupName, string groupDescription);
    public void DeleteApplicationGroup(string groupSid);
    public string GetChangedIdentities(int sequence_id);
    public bool IsIdentityCached(SearchFactor factor, string factorValue);
    public bool IsMember(string groupSid, string identitySid);
    public Identity[] ListApplicationGroups(string projectUri);
    public Identity ReadIdentity(SearchFactor factor, string factorValue, QueryMembership queryMembership);
    public Identity ReadIdentityFromSource(SearchFactor factor, string factorValue);
    public void RemoveMemberFromApplicationGroup(string groupSid, string identitySid);
    public void UpdateApplicationGroup(string groupSid, ApplicationGroupProperty property, string newValue);
    protected virtual string get_ComponentName();
}
public class Microsoft.TeamFoundation.Server.GroupSecuritySubsystemException : TeamFoundationServerException {
    public GroupSecuritySubsystemException(string message);
    public GroupSecuritySubsystemException(string message, Exception innerException);
    protected GroupSecuritySubsystemException(SerializationInfo info, StreamingContext context);
}
internal static class Microsoft.TeamFoundation.Server.Helper : object {
    private static AccessControlEntry[] m_zeroLengthArrayOfAccessControlEntry;
    private static AccessControlEntry[][] m_zeroLengthArrayOfArrayOfAccessControlEntry;
    private static Boolean[] m_zeroLengthArrayOfBoolean;
    private static DataChanged[] m_zeroLengthArrayOfDataChanged;
    private static Identity[] m_zeroLengthArrayOfIdentity;
    private static NodeInfo[] m_zeroLengthArrayOfNodeInfo;
    private static ProjectInfo[] m_zeroLengthArrayOfProjectInfo;
    private static ProjectProperty[] m_zeroLengthArrayOfProjectProperty;
    private static Property[] m_zeroLengthArrayOfProperty;
    private static String[] m_zeroLengthArrayOfString;
    private static SyncProperty[] m_zeroLengthArrayOfSyncProperty;
    internal static AccessControlEntry[] ZeroLengthArrayOfAccessControlEntry { get; }
    internal static AccessControlEntry[][] ZeroLengthArrayOfArrayOfAccessControlEntry { get; }
    internal static Boolean[] ZeroLengthArrayOfBoolean { get; }
    internal static DataChanged[] ZeroLengthArrayOfDataChanged { get; }
    internal static Identity[] ZeroLengthArrayOfIdentity { get; }
    internal static NodeInfo[] ZeroLengthArrayOfNodeInfo { get; }
    internal static ProjectInfo[] ZeroLengthArrayOfProjectInfo { get; }
    internal static ProjectProperty[] ZeroLengthArrayOfProjectProperty { get; }
    internal static Property[] ZeroLengthArrayOfProperty { get; }
    internal static String[] ZeroLengthArrayOfString { get; }
    internal static SyncProperty[] ZeroLengthArrayOfSyncProperty { get; }
    internal static AccessControlEntry[] get_ZeroLengthArrayOfAccessControlEntry();
    internal static AccessControlEntry[][] get_ZeroLengthArrayOfArrayOfAccessControlEntry();
    internal static Boolean[] get_ZeroLengthArrayOfBoolean();
    internal static DataChanged[] get_ZeroLengthArrayOfDataChanged();
    internal static Identity[] get_ZeroLengthArrayOfIdentity();
    internal static NodeInfo[] get_ZeroLengthArrayOfNodeInfo();
    internal static ProjectInfo[] get_ZeroLengthArrayOfProjectInfo();
    internal static ProjectProperty[] get_ZeroLengthArrayOfProjectProperty();
    internal static Property[] get_ZeroLengthArrayOfProperty();
    internal static String[] get_ZeroLengthArrayOfString();
    internal static SyncProperty[] get_ZeroLengthArrayOfSyncProperty();
    internal static AccessControlEntry[] ArrayOfAccessControlEntryFromXml(IServiceProvider serviceProvider, XmlReader reader, bool inline);
    internal static AccessControlEntry[] ArrayOfAccessControlEntryFromXml(IServiceProvider serviceProvider, XmlReader reader);
    internal static AccessControlEntry[][] ArrayOfArrayOfAccessControlEntryFromXml(IServiceProvider serviceProvider, XmlReader reader, bool inline);
    internal static Boolean[] ArrayOfBooleanFromXml(XmlReader reader, bool inline);
    internal static DataChanged[] ArrayOfDataChangedFromXml(IServiceProvider serviceProvider, XmlReader reader, bool inline);
    internal static Identity[] ArrayOfIdentityFromXml(IServiceProvider serviceProvider, XmlReader reader, bool inline);
    internal static NodeInfo[] ArrayOfNodeInfoFromXml(IServiceProvider serviceProvider, XmlReader reader, bool inline);
    internal static ProjectInfo[] ArrayOfProjectInfoFromXml(IServiceProvider serviceProvider, XmlReader reader, bool inline);
    internal static ProjectProperty[] ArrayOfProjectPropertyFromXml(IServiceProvider serviceProvider, XmlReader reader, bool inline);
    internal static Property[] ArrayOfPropertyFromXml(IServiceProvider serviceProvider, XmlReader reader, bool inline);
    internal static String[] ArrayOfStringFromXml(XmlReader reader, bool inline);
    internal static SyncProperty[] ArrayOfSyncPropertyFromXml(IServiceProvider serviceProvider, XmlReader reader, bool inline);
    internal static string ArrayToString(T[] array);
    internal static Nullable`1<DateTime> NullableOfDateTimeFromXml(IServiceProvider serviceProvider, XmlReader reader);
    internal static void StringToXmlElement(XmlWriter writer, string element, string str);
    internal static void ToXml(XmlWriter writer, string arrayName, AccessControlEntry[] array);
    internal static void ToXml(XmlWriter writer, string arrayName, AccessControlEntry[] array, bool inline, bool allowEmptyArrays);
    internal static void ToXml(XmlWriter writer, string arrayName, Boolean[] array);
    internal static void ToXml(XmlWriter writer, string arrayName, Boolean[] array, bool inline, bool allowEmptyArrays);
    internal static void ToXml(XmlWriter writer, string arrayName, NodeInfo[] array);
    internal static void ToXml(XmlWriter writer, string arrayName, NodeInfo[] array, bool inline, bool allowEmptyArrays);
    internal static void ToXml(XmlWriter writer, string arrayName, ProjectInfo[] array);
    internal static void ToXml(XmlWriter writer, string arrayName, ProjectInfo[] array, bool inline, bool allowEmptyArrays);
    internal static void ToXml(XmlWriter writer, string arrayName, ProjectProperty[] array);
    internal static void ToXml(XmlWriter writer, string arrayName, ProjectProperty[] array, bool inline, bool allowEmptyArrays);
    internal static void ToXml(XmlWriter writer, string arrayName, Property[] array);
    internal static void ToXml(XmlWriter writer, string arrayName, Property[] array, bool inline, bool allowEmptyArrays);
    internal static void ToXml(XmlWriter writer, string arrayName, DataChanged[] array);
    internal static void ToXml(XmlWriter writer, string arrayName, DataChanged[] array, bool inline, bool allowEmptyArrays);
    internal static void ToXml(XmlWriter writer, string arrayName, Identity[] array);
    internal static void ToXml(XmlWriter writer, string arrayName, Identity[] array, bool inline, bool allowEmptyArrays);
    internal static void ToXml(XmlWriter writer, string arrayName, String[] array);
    internal static void ToXml(XmlWriter writer, string arrayName, String[] array, bool inline, bool allowEmptyArrays);
    internal static void ToXml(XmlWriter writer, string arrayName, SyncProperty[] array);
    internal static void ToXml(XmlWriter writer, string arrayName, SyncProperty[] array, bool inline, bool allowEmptyArrays);
}
public interface Microsoft.TeamFoundation.Server.IAuthorizationService {
    public abstract virtual void RegisterObject(string objectId, string objectClassId, string projectUri, string parentObjectId);
    public abstract virtual void UnregisterObject(string objectId);
    public abstract virtual void ResetInheritance(string objectId, string parentObjectId);
    public abstract virtual String[] ListObjectClasses();
    public abstract virtual string GetObjectClass(string objectId);
    public abstract virtual String[] ListObjectClassActions(string objectClassId);
    public abstract virtual String[] ListLocalizedActionNames(string objectClassId, String[] actionId);
    public abstract virtual void AddAccessControlEntry(string objectId, AccessControlEntry ace);
    public abstract virtual void RemoveAccessControlEntry(string objectId, AccessControlEntry ace);
    public abstract virtual string GetChangedAccessControlEntries(int sequenceId);
    public abstract virtual void ReplaceAccessControlList(string objectId, AccessControlEntry[] acl);
    public abstract virtual AccessControlEntry[] ReadAccessControlList(string objectId);
    public abstract virtual AccessControlEntry[][] ReadAccessControlLists(String[] objectId);
    public abstract virtual void CheckPermission(string objectId, string actionId);
    public abstract virtual Boolean[] IsPermitted(String[] objectId, string actionId, string userSid);
    public abstract virtual Boolean[] IsPermitted(string objectId, String[] actionId, string userSid);
    public abstract virtual Boolean[] IsPermitted(string objectId, string actionId, String[] userSid);
}
public interface Microsoft.TeamFoundation.Server.IAutoLoadPlugin {
    public abstract virtual void Initialize(RegistrationEntry[] regEntries);
}
internal interface Microsoft.TeamFoundation.Server.ICombiner`1 {
    public abstract virtual T Combine(T t1, T t2);
}
public interface Microsoft.TeamFoundation.Server.ICommonStructureService {
    public abstract virtual ProjectInfo[] ListProjects();
    public abstract virtual ProjectInfo[] ListAllProjects();
    public abstract virtual NodeInfo[] ListStructures(string projectUri);
    public abstract virtual XmlElement GetNodesXml(String[] nodeUris, bool childNodes);
    public abstract virtual NodeInfo GetNode(string nodeUri);
    public abstract virtual NodeInfo GetNodeFromPath(string nodePath);
    public abstract virtual ProjectInfo GetProject(string projectUri);
    public abstract virtual ProjectInfo GetProjectFromName(string projectName);
    public abstract virtual void ClearProjectInfoCache();
    public abstract virtual XmlElement GetDeletedNodesXml(string projectUri, DateTime since);
    public abstract virtual ProjectInfo CreateProject(string projectName, XmlElement projectStructure);
    public abstract virtual void DeleteProject(string projectUri);
    public abstract virtual string CreateNode(string nodeName, string parentNodeUri);
    public abstract virtual void RenameNode(string nodeUri, string newNodeName);
    public abstract virtual void MoveBranch(string nodeUri, string newParentNodeUri);
    public abstract virtual void ReorderNode(string nodeUri, int moveBy);
    public abstract virtual void DeleteBranches(String[] nodeUris, string reclassifyUri);
    public abstract virtual void GetProjectProperties(string projectUri, String& name, String& state, Int32& templateId, ProjectProperty[]& properties);
    public abstract virtual void UpdateProjectProperties(string projectUri, string state, ProjectProperty[] properties);
    public abstract virtual string GetChangedNodes(int startSequenceId);
}
public interface Microsoft.TeamFoundation.Server.ICommonStructureService3 {
    public abstract virtual string GetChangedNodesAndProjects(int startSequenceId);
}
public interface Microsoft.TeamFoundation.Server.ICommonStructureService4 {
    public abstract virtual string CreateNode(string nodeName, string parentNodeUri, Nullable`1<DateTime> startDate, Nullable`1<DateTime> finishDate);
    public abstract virtual void SetIterationDates(string nodeUri, Nullable`1<DateTime> startDate, Nullable`1<DateTime> finishDate);
    public abstract virtual ProjectProperty GetProjectProperty(string projectUri, string name);
    public abstract virtual void SetProjectProperty(string projectUri, string name, string value);
}
[XmlTypeAttribute]
public class Microsoft.TeamFoundation.Server.Identity : object {
    private IdentityType mType;
    private string mSid;
    private Guid mTeamFoundationId;
    private string mDisplayName;
    private string mDescription;
    private string mDomain;
    private string mAccountName;
    private string mDistinguishedName;
    private string mMailAddress;
    private ApplicationGroupSpecialType mSpecialType;
    private bool mDeleted;
    private bool mSecurityGroup;
    private String[] mMembers;
    private String[] mMemberOf;
    public IdentityType Type { get; public set; }
    public string Sid { get; public set; }
    [XmlIgnoreAttribute]
public Guid TeamFoundationId { get; public set; }
    public string DisplayName { get; public set; }
    public string Description { get; public set; }
    public string Domain { get; public set; }
    public string AccountName { get; public set; }
    public string DistinguishedName { get; public set; }
    public string MailAddress { get; public set; }
    public ApplicationGroupSpecialType SpecialType { get; public set; }
    public bool Deleted { get; public set; }
    public String[] Members { get; public set; }
    public String[] MemberOf { get; public set; }
    [DefaultValueAttribute("False")]
public bool SecurityGroup { get; public set; }
    public static IdentityType GetType(string identityType, bool isGroup);
    public sealed virtual int CompareTo(object obj);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public IdentityType get_Type();
    public void set_Type(IdentityType value);
    public string get_Sid();
    public void set_Sid(string value);
    public Guid get_TeamFoundationId();
    public void set_TeamFoundationId(Guid value);
    public string get_DisplayName();
    public void set_DisplayName(string value);
    public string get_Description();
    public void set_Description(string value);
    public string get_Domain();
    public void set_Domain(string value);
    public string get_AccountName();
    public void set_AccountName(string value);
    public string get_DistinguishedName();
    public void set_DistinguishedName(string value);
    public string get_MailAddress();
    public void set_MailAddress(string value);
    public ApplicationGroupSpecialType get_SpecialType();
    public void set_SpecialType(ApplicationGroupSpecialType value);
    public bool get_Deleted();
    public void set_Deleted(bool value);
    public String[] get_Members();
    public void set_Members(String[] value);
    public String[] get_MemberOf();
    public void set_MemberOf(String[] value);
    public bool get_SecurityGroup();
    public void set_SecurityGroup(bool value);
    public sealed virtual void ReadXml(XmlReader reader, string xmlElement);
    private static string StringFromXml(XmlReader reader);
    private static object EnumFromXmlElem(XmlReader reader, Type type);
    private static bool BooleanFromXmlElem(XmlReader reader);
    private static String[] StringArrayFromXml(XmlReader reader);
    public sealed virtual void WriteXml(XmlWriter writer, string xmlElement);
    private static void StringToXmlElement(XmlWriter writer, string element, string str);
    private static void EnumToXmlElement(XmlWriter writer, string element, object value, Type type);
    private static void StringArrayToXmlElement(XmlWriter writer, string element, String[] array);
    [EditorBrowsableAttribute("1")]
public static Identity FromXml(IServiceProvider serviceProvider, XmlReader reader);
    public virtual string ToString();
    [EditorBrowsableAttribute("1")]
public void ToXml(XmlWriter writer, string element);
    [EditorBrowsableAttribute("1")]
public static void ToXml(XmlWriter writer, string element, Identity obj);
}
[ObsoleteAttribute("The IdentityChangedEvent class is obsolete.")]
public class Microsoft.TeamFoundation.Server.IdentityChangedEvent : object {
    public string Sid;
    public IdentityChangedEvent(string sid);
}
[ObsoleteAttribute("The IdentityCreatedEvent class is obsolete.")]
public class Microsoft.TeamFoundation.Server.IdentityCreatedEvent : object {
    public string Sid;
    public IdentityCreatedEvent(string sid);
}
[ObsoleteAttribute("The IdentityDeletedEvent class is obsolete.")]
public class Microsoft.TeamFoundation.Server.IdentityDeletedEvent : object {
    public string Sid;
    public IdentityDeletedEvent(string sid);
}
public enum Microsoft.TeamFoundation.Server.IdentityType : Enum {
    public int value__;
    public static IdentityType ApplicationGroup;
    public static IdentityType Extensible;
    public static IdentityType InvalidIdentity;
    public static IdentityType UnknownIdentityType;
    public static IdentityType WindowsGroup;
    public static IdentityType WindowsUser;
}
[ObsoleteAttribute("IGroupSecurityService is obsolete.  Please use the IIdentityManagementService or ISecurityService instead.", "False")]
public interface Microsoft.TeamFoundation.Server.IGroupSecurityService {
    public abstract virtual Identity ReadIdentity(SearchFactor factor, string factorValue, QueryMembership queryMembership);
    public abstract virtual Identity[] ReadIdentities(SearchFactor factor, String[] factorValue, QueryMembership queryMembership);
    public abstract virtual Identity ReadIdentityFromSource(SearchFactor factor, string factorValue);
    public abstract virtual bool IsIdentityCached(SearchFactor factor, string factorValue);
    public abstract virtual string GetChangedIdentities(int sequenceId);
    public abstract virtual string CreateApplicationGroup(string projectUri, string groupName, string groupDescription);
    public abstract virtual Identity[] ListApplicationGroups(string projectUri);
    public abstract virtual void UpdateApplicationGroup(string groupSid, ApplicationGroupProperty groupProperty, string newValue);
    public abstract virtual void DeleteApplicationGroup(string groupSid);
    public abstract virtual void AddMemberToApplicationGroup(string groupSid, string identitySid);
    public abstract virtual void RemoveMemberFromApplicationGroup(string groupSid, string identitySid);
    public abstract virtual bool IsMember(string groupSid, string identitySid);
    public abstract virtual Identity Convert(TeamFoundationIdentity identity);
    public abstract virtual TeamFoundationIdentity Convert(Identity identity);
}
[ObsoleteAttribute("IGroupSecurityService2 is obsolete.  Please use the IIdentityManagementService2 or ISecurityService instead.", "False")]
public interface Microsoft.TeamFoundation.Server.IGroupSecurityService2 {
    public abstract virtual IResultCollection`1<Identity> GetIdentityChanges(int sequenceId, Int32& lastSequenceId);
}
public interface Microsoft.TeamFoundation.Server.IProcessTemplates {
    [ObsoleteAttribute("Please use the TemplateHeaders method instead")]
public abstract virtual XmlNode GetTemplateNames();
    public abstract virtual TemplateHeader[] TemplateHeaders();
    public abstract virtual TemplateHeader[] DeleteTemplate(int templateId);
    public abstract virtual TemplateHeader[] MakeDefaultTemplate(int templateId);
    [ObsoleteAttribute("Please use AddUpdateTemplate instead")]
public abstract virtual int AddTemplate(string name, string description, string metadata, string state);
    public abstract virtual int GetTemplateIndex(string name);
    public abstract virtual void AddUpdateTemplate(string name, string description, string metadata, string state, string zipFileName);
    [ObsoleteAttribute("Please use AddUpdateTemplate instead")]
public abstract virtual void UploadMethodology(string fileName, int templateId);
    public abstract virtual string GetTemplateData(int templateId);
}
public interface Microsoft.TeamFoundation.Server.IProjectMaintenance {
    public abstract virtual bool DeleteProject(string project);
}
public interface Microsoft.TeamFoundation.Server.IRegistration {
    public Guid InstanceId { get; }
    public string InstanceClientCacheDirectory { get; }
    public abstract virtual RegistrationEntry[] GetRegistrationEntries(string toolId);
    public abstract virtual RegistrationEntry[] GetRegistrationEntriesFromServer(string toolId);
    public abstract virtual Guid get_InstanceId();
    public abstract virtual string get_InstanceClientCacheDirectory();
}
public interface Microsoft.TeamFoundation.Server.IServerStatusService {
    public abstract virtual DataChanged[] GetServerStatus();
    public abstract virtual string GetSupportedContractVersion();
    public abstract virtual string CheckAuthentication();
}
public interface Microsoft.TeamFoundation.Server.ISyncService {
    public abstract virtual SyncMapping GetSyncMapping(Guid serverId);
    public abstract virtual bool GetSyncMappingChange(Guid serverId, int baselineRev, SyncMapping& mapping);
    public abstract virtual SyncProperty[] GetSyncProperties(Guid serverId);
    public abstract virtual SyncProperty GetSyncProperty(Guid serverId, string name);
    public abstract virtual void SaveMapping(Guid serverId, int baselineRev, string mapping);
    public abstract virtual void SaveSyncProperty(Guid serverId, int baselineRev, string name, string value);
}
public interface Microsoft.TeamFoundation.Server.ITeamSystemTask {
    public abstract virtual bool Run();
    public abstract virtual int GetNextInterval(int lastInterval);
}
[XmlTypeAttribute]
public class Microsoft.TeamFoundation.Server.LinkType : object {
    private string m_SourceTool;
    private string m_SourceArtifactType;
    private string m_LinkName;
    private string m_SinkTool;
    private string m_SinkArtifactType;
    public string SourceTool { get; public set; }
    public string SourceArtifactType { get; public set; }
    public string LinkName { get; public set; }
    public string SinkTool { get; public set; }
    public string SinkArtifactType { get; public set; }
    public string get_SourceTool();
    public void set_SourceTool(string value);
    public string get_SourceArtifactType();
    public void set_SourceArtifactType(string value);
    public string get_LinkName();
    public void set_LinkName(string value);
    public string get_SinkTool();
    public void set_SinkTool(string value);
    public string get_SinkArtifactType();
    public void set_SinkArtifactType(string value);
    internal Predicate`1<LinkType> EqualsByName();
    [CompilerGeneratedAttribute]
private bool <EqualsByName>b__16_0(LinkType that);
}
internal class Microsoft.TeamFoundation.Server.LinkTypeComparer : object {
    public sealed virtual int Compare(LinkType first, LinkType second);
}
[ObsoleteAttribute("The MembershipChangedEvent class is obsolete.")]
public class Microsoft.TeamFoundation.Server.MembershipChangedEvent : object {
    public string GroupSid;
    public string MemberSid;
    public string ChangeType;
    public MembershipChangedEvent(string groupSid, string memberSid, string changeType);
}
public class Microsoft.TeamFoundation.Server.NodeCreatedEvent : object {
    private string _projectUri;
    private string _nodeUri;
    private string _name;
    public string ProjectUri { get; public set; }
    public string NodeUri { get; public set; }
    public string Name { get; public set; }
    public NodeCreatedEvent(string projectUri, string nodeUri, string name);
    public string get_ProjectUri();
    public void set_ProjectUri(string value);
    public string get_NodeUri();
    public void set_NodeUri(string value);
    public string get_Name();
    public void set_Name(string value);
}
public class Microsoft.TeamFoundation.Server.NodeInfo : object {
    public string Uri;
    public string Name;
    public string Path;
    public string StructureType;
    public Property[] Properties;
    public string ParentUri;
    public string ProjectUri;
    public Nullable`1<DateTime> StartDate;
    public Nullable`1<DateTime> FinishDate;
    public NodeInfo(string uri, string name, string structureType, Property[] properties, string parentUri, string projectUri, string path);
    public NodeInfo(string uri, string name, string structureType, Property[] properties, string parentUri, string projectUri, string path, Nullable`1<DateTime> startDate, Nullable`1<DateTime> finishDate);
    [EditorBrowsableAttribute("1")]
public static NodeInfo FromXml(IServiceProvider serviceProvider, XmlReader reader);
    public virtual string ToString();
    [EditorBrowsableAttribute("1")]
public void ToXml(XmlWriter writer, string element);
    [EditorBrowsableAttribute("1")]
public static void ToXml(XmlWriter writer, string element, NodeInfo obj);
}
public class Microsoft.TeamFoundation.Server.NodeRenamedEvent : object {
    private string _projectUri;
    private string _nodeUri;
    private string _newName;
    private string _oldName;
    public string ProjectUri { get; public set; }
    public string NodeUri { get; public set; }
    public string NewName { get; public set; }
    public string OldName { get; public set; }
    public NodeRenamedEvent(string projectUri, string nodeUri, string newName, string oldName);
    public string get_ProjectUri();
    public void set_ProjectUri(string value);
    public string get_NodeUri();
    public void set_NodeUri(string value);
    public string get_NewName();
    public void set_NewName(string value);
    public string get_OldName();
    public void set_OldName(string value);
}
public class Microsoft.TeamFoundation.Server.NodesDeletedEvent : object {
    private string _projectUri;
    private string _reclassifyUri;
    private string _deletedUser;
    private string _deletedTime;
    private DeletedNode[] _nodesDeleted;
    public string ProjectUri { get; public set; }
    public string DeletedUser { get; public set; }
    public string DeletedTime { get; public set; }
    public DeletedNode[] NodesDeleted { get; public set; }
    public NodesDeletedEvent(string projectUri, string reclassifyUri, string deletedUser, string deletedTime, DeletedNode[] nodesDeleted);
    public string get_ProjectUri();
    public void set_ProjectUri(string value);
    public string get_DeletedUser();
    public void set_DeletedUser(string value);
    public string get_DeletedTime();
    public void set_DeletedTime(string value);
    public DeletedNode[] get_NodesDeleted();
    public void set_NodesDeleted(DeletedNode[] value);
}
[XmlTypeAttribute]
public class Microsoft.TeamFoundation.Server.OutboundLinkType : object {
    private string m_Name;
    private string m_TargetArtifactTypeTool;
    private string m_TargetArtifactTypeName;
    public string Name { get; public set; }
    public string TargetArtifactTypeTool { get; public set; }
    public string TargetArtifactTypeName { get; public set; }
    public OutboundLinkType(string name, string targetArtifactTypeTool, string targetArtifactTypeName);
    public string get_Name();
    public void set_Name(string value);
    public string get_TargetArtifactTypeTool();
    public void set_TargetArtifactTypeTool(string value);
    public string get_TargetArtifactTypeName();
    public void set_TargetArtifactTypeName(string value);
    internal Predicate`1<OutboundLinkType> EqualsByName();
    [CompilerGeneratedAttribute]
private bool <EqualsByName>b__11_0(OutboundLinkType that);
}
internal class Microsoft.TeamFoundation.Server.OutboundLinkTypeComparer : object {
    public sealed virtual int Compare(OutboundLinkType first, OutboundLinkType second);
}
[NotificationEventBindingsAttribute]
public class Microsoft.TeamFoundation.Server.ProjectCreatedEvent : object {
    private string _projectUri;
    private string _name;
    public string Uri { get; public set; }
    public string Name { get; public set; }
    public ProjectCreatedEvent(string projectUri, string name);
    public string get_Uri();
    public void set_Uri(string value);
    public string get_Name();
    public void set_Name(string value);
}
[NotificationEventBindingsAttribute]
public class Microsoft.TeamFoundation.Server.ProjectDeletedEvent : object {
    private string _projectUri;
    private string _deletedUser;
    private string _deletedTime;
    public string Uri { get; public set; }
    public string DeletedUser { get; public set; }
    public string DeletedTime { get; public set; }
    public ProjectDeletedEvent(string projectUri, string deletedUser, string deletedTime);
    public string get_Uri();
    public void set_Uri(string value);
    public string get_DeletedUser();
    public void set_DeletedUser(string value);
    public string get_DeletedTime();
    public void set_DeletedTime(string value);
}
public class Microsoft.TeamFoundation.Server.ProjectInfo : object {
    public string Uri;
    public string Name;
    public ProjectState Status;
    public ProjectInfo(string uri, string name, ProjectState status);
    public virtual bool Equals(object that);
    public virtual int GetHashCode();
    [EditorBrowsableAttribute("1")]
public static ProjectInfo FromXml(IServiceProvider serviceProvider, XmlReader reader);
    public virtual string ToString();
    [EditorBrowsableAttribute("1")]
public void ToXml(XmlWriter writer, string element);
    [EditorBrowsableAttribute("1")]
public static void ToXml(XmlWriter writer, string element, ProjectInfo obj);
}
public class Microsoft.TeamFoundation.Server.ProjectProperty : object {
    private string m_name;
    private string m_value;
    public string Name { get; public set; }
    public string Value { get; public set; }
    public ProjectProperty(string name, string value);
    public string get_Name();
    public void set_Name(string value);
    public string get_Value();
    public void set_Value(string value);
    [EditorBrowsableAttribute("1")]
public static ProjectProperty FromXml(IServiceProvider serviceProvider, XmlReader reader);
    public virtual string ToString();
    [EditorBrowsableAttribute("1")]
public void ToXml(XmlWriter writer, string element);
    [EditorBrowsableAttribute("1")]
public static void ToXml(XmlWriter writer, string element, ProjectProperty obj);
}
[ObsoleteAttribute("The ProjectRenamedEvent class is obsolete.")]
public class Microsoft.TeamFoundation.Server.ProjectRenamedEvent : object {
    private string _projectUri;
    private string _newName;
    private string _oldName;
    public string Uri { get; public set; }
    public string NewName { get; public set; }
    public string OldName { get; public set; }
    public ProjectRenamedEvent(string projectUri, string newName, string oldName);
    public string get_Uri();
    public void set_Uri(string value);
    public string get_NewName();
    public void set_NewName(string value);
    public string get_OldName();
    public void set_OldName(string value);
}
public class Microsoft.TeamFoundation.Server.Property : object {
    public string Name;
    public string Value;
    public Property(string name, string propValue);
    [EditorBrowsableAttribute("1")]
public static Property FromXml(IServiceProvider serviceProvider, XmlReader reader);
    public virtual string ToString();
    [EditorBrowsableAttribute("1")]
public void ToXml(XmlWriter writer, string element);
    [EditorBrowsableAttribute("1")]
public static void ToXml(XmlWriter writer, string element, Property obj);
}
[ObsoleteAttribute("The PropertyChanged class is obsolete.")]
public class Microsoft.TeamFoundation.Server.PropertyChanged : object {
    private string _name;
    private string _oldValue;
    private string _newValue;
    public string Name { get; public set; }
    public string OldValue { get; public set; }
    public string NewValue { get; public set; }
    public PropertyChanged(string name, string oldValue, string newValue);
    public string get_Name();
    public void set_Name(string value);
    public string get_OldValue();
    public void set_OldValue(string value);
    public string get_NewValue();
    public void set_NewValue(string value);
}
public class Microsoft.TeamFoundation.Server.ProxyUtilities : object {
    public static string GetServerUrl(string absoluteUrl);
}
public enum Microsoft.TeamFoundation.Server.QueryMembership : Enum {
    public int value__;
    public static QueryMembership Direct;
    public static QueryMembership Expanded;
    public static QueryMembership None;
}
[XmlTypeAttribute]
public class Microsoft.TeamFoundation.Server.RegistrationEntry : object {
    private string m_Type;
    private ServiceInterface[] m_ServiceInterfaces;
    private Database[] m_Databases;
    private ArtifactType[] m_ArtifactTypes;
    private EventType[] m_EventTypes;
    private RegistrationExtendedAttribute[] m_RegistrationExtendedAttributes;
    private ChangeType m_ChangeType;
    public string Type { get; public set; }
    public ServiceInterface[] ServiceInterfaces { get; public set; }
    public Database[] Databases { get; public set; }
    public EventType[] EventTypes { get; public set; }
    public ArtifactType[] ArtifactTypes { get; public set; }
    public RegistrationExtendedAttribute[] RegistrationExtendedAttributes { get; public set; }
    [XmlIgnoreAttribute]
public ChangeType ChangeType { get; public set; }
    public string get_Type();
    public void set_Type(string value);
    public ServiceInterface[] get_ServiceInterfaces();
    public void set_ServiceInterfaces(ServiceInterface[] value);
    public Database[] get_Databases();
    public void set_Databases(Database[] value);
    public EventType[] get_EventTypes();
    public void set_EventTypes(EventType[] value);
    public ArtifactType[] get_ArtifactTypes();
    public void set_ArtifactTypes(ArtifactType[] value);
    public RegistrationExtendedAttribute[] get_RegistrationExtendedAttributes();
    public void set_RegistrationExtendedAttributes(RegistrationExtendedAttribute[] value);
    public ChangeType get_ChangeType();
    public void set_ChangeType(ChangeType value);
    internal void AddMissingElements(RegistrationEntry from);
    internal static T[] MergeArrays(T[] firstOne, T[] secondOne, IComparer`1<T> comparer, ICombiner`1<T> combiner);
    internal RegistrationExtendedAttribute GetExtendedAttribute(string name);
    internal Predicate`1<RegistrationEntry> EqualsByName();
    [CompilerGeneratedAttribute]
private bool <EqualsByName>b__25_0(RegistrationEntry that);
}
public class Microsoft.TeamFoundation.Server.RegistrationEntryRetrievalException : TeamFoundationServerException {
    public RegistrationEntryRetrievalException(string message);
    public RegistrationEntryRetrievalException(string message, Exception innerException);
    protected RegistrationEntryRetrievalException(SerializationInfo info, StreamingContext context);
}
[XmlTypeAttribute]
public class Microsoft.TeamFoundation.Server.RegistrationExtendedAttribute : object {
    private string m_Name;
    private string m_Value;
    public string Name { get; public set; }
    public string Value { get; public set; }
    public RegistrationExtendedAttribute(string name, string value);
    public string get_Name();
    public void set_Name(string value);
    public string get_Value();
    public void set_Value(string value);
    internal Predicate`1<RegistrationExtendedAttribute> EqualsByName();
    [CompilerGeneratedAttribute]
private bool <EqualsByName>b__8_0(RegistrationExtendedAttribute that);
}
internal class Microsoft.TeamFoundation.Server.RegistrationExtendedAttributeComparer : object {
    public sealed virtual int Compare(RegistrationExtendedAttribute first, RegistrationExtendedAttribute second);
}
public static class Microsoft.TeamFoundation.Server.RegistrationUtilities : object {
    public static string BisRegistryPath;
    public static string BisName;
    public static string RosettaName;
    public static string SharePointName;
    public static string RegRegistrationServiceUrl;
    private static RegistrationUtilities();
    public static string GetServiceUrlForTool(TfsConnection server, string toolName, string interfaceName);
    public static string GetServiceUrlForTool(TfsConnection server, string toolName);
    private static ServiceInterface[] GetServiceInterfacesForTool(IRegistration regProxy, string toolName);
    public static int Compare(string str1, string str2);
    public static int Compare(string str1, string str2, bool caseInsensitiveFlag);
    public static bool IsToolTypeWellFormed(string tool);
    public static bool IsToolType(string toolId);
    public static string GetServiceInterfaceUrl(RegistrationEntry registrationEntry, string serviceInterfaceName);
    internal static object GetValueFromRegistry(string registryKeyPath, string name);
    internal static void GetNullElementIndexes(Object[] arr, Int32[]& nullElementIndices, Object[]& filteredArr);
    internal static Object[] MergeNullElements(Object[] arr, Int32[] nullElementIndices);
    public static string GetConnectionString(RegistrationEntry entry, string databaseName);
    private static string ReplacementProperty(string property);
}
public class Microsoft.TeamFoundation.Server.RegistrationXmlSerializer : object {
    internal static string DatabasesNode;
    internal static string DatabaseNode;
    internal static string PropertyName;
    internal static string PropertyDatabaseName;
    internal static string PropertyDatabaseCategory;
    internal static string PropertySQLServerName;
    internal static string PropertyConnectionString;
    internal static string PropertyExcludeFromBackup;
    public static void Serialize(RegistrationEntry registrationEntry, XmlWriter xmlWriter);
    public static object Deserialize(XmlNode root, Type type);
    internal static string GetTerminalNodeValue(XmlNode node, string tag);
    internal static string GetTerminalNodeValue(XmlNode node, string tag, bool throwIfNotFound);
    private static void Serialize(ServiceInterface si, XmlWriter w);
    private static void Serialize(Database db, XmlWriter w);
    private static void Serialize(EventType et, XmlWriter w);
    private static void Serialize(RegistrationExtendedAttribute rea, XmlWriter w);
    private static void Serialize(OutboundLinkType forwardLinkType, XmlWriter w);
    private static void Serialize(ArtifactType at, XmlWriter w);
}
public enum Microsoft.TeamFoundation.Server.SearchFactor : Enum {
    public int value__;
    public static SearchFactor AccountName;
    public static SearchFactor AdministrativeApplicationGroup;
    public static SearchFactor DistinguishedName;
    public static SearchFactor EveryoneApplicationGroup;
    public static SearchFactor None;
    public static SearchFactor ServiceApplicationGroup;
    public static SearchFactor Sid;
}
internal static class Microsoft.TeamFoundation.Server.SecurityValidation : object {
    private static int GroupDescriptionMaxLength;
    internal static void CheckFactorAndValue(SearchFactor factor, String& factorValue, string factorParamName, string valueParamName);
    internal static void CheckFactorAndValueArray(SearchFactor factor, String[]& factorValues, string factorParamName, string valueParamName);
    internal static void CheckSid(String& sid, string paramName);
    internal static void CheckSidArray(String[] sids, string paramName);
    internal static void CheckAccountName(String& accountName, string paramName);
    internal static void CheckAccountNameArray(String[] accountNames, string paramName);
    internal static void CheckDistinguishedName(String& distinguishedName, string paramName);
    internal static void CheckDistinguishedNameArray(String[] distinguishedNames, string paramName);
    internal static void CheckProjectUri(String& projectUri, bool allowNullOrEmpty, string paramName);
    internal static void CheckProjectUriArray(String[] projectUris, bool allowNullOrEmpty, string paramName);
    internal static void CheckQueryMembership(QueryMembership queryMembership, string paramName);
    internal static void CheckSequenceId(int sequence_id, string paramName);
    internal static void CheckGroupName(String& groupName, string paramName);
    internal static void CheckGroupDescription(String& groupDescription, string paramName);
    internal static void CheckApplicationGroupPropertyAndValue(ApplicationGroupProperty property, String& value, string propertyParamName, string valueParamName);
    internal static void CheckObjectId(String& objectId, bool allowNullOrEmpty, string paramName);
    internal static void CheckParentObjectIdNotSelf(string objectId, string parentObjectId, string parentParamName);
    internal static void CheckObjectIdArray(String[] objectIds, string paramName);
    internal static void CheckObjectClassId(String& objectClassId, string paramName);
    internal static void CheckActionId(String& actionId, string paramName);
    internal static void CheckActionIdArray(String[] actionIds, string paramName);
    internal static void CheckAccessControlEntry(AccessControlEntry ace, string paramName);
    internal static void CheckAccessControlEntryArray(AccessControlEntry[] acls, string paramName);
}
internal class Microsoft.TeamFoundation.Server.ServerStatus : TfsHttpClient {
    protected Guid CollectionServiceIdentifier { get; }
    protected string ServiceType { get; }
    protected string ComponentName { get; }
    public ServerStatus(TfsTeamProjectCollection connection);
    internal ServerStatus(TfsTeamProjectCollection server, string url);
    protected virtual Guid get_CollectionServiceIdentifier();
    protected virtual string get_ServiceType();
    public string CheckAuthentication();
    public DataChanged[] GetServerStatus();
    public string GetSupportedContractVersion();
    protected virtual string get_ComponentName();
}
[XmlTypeAttribute]
public class Microsoft.TeamFoundation.Server.ServiceInterface : object {
    private string m_Name;
    private string m_Url;
    public string Name { get; public set; }
    public string Url { get; public set; }
    public ServiceInterface(string name, string url);
    public string get_Name();
    public void set_Name(string value);
    public string get_Url();
    public void set_Url(string value);
    internal Predicate`1<ServiceInterface> EqualsByName();
    [CompilerGeneratedAttribute]
private bool <EqualsByName>b__8_0(ServiceInterface that);
}
internal class Microsoft.TeamFoundation.Server.ServiceInterfaceComparer : object {
    public sealed virtual int Compare(ServiceInterface first, ServiceInterface second);
}
internal class Microsoft.TeamFoundation.Server.SimpleCombiner`1 : object {
    public sealed virtual T Combine(T t1, T t2);
}
public class Microsoft.TeamFoundation.Server.SyncAccessDeniedException : SyncSubsystemException {
    public SyncAccessDeniedException(string message);
    public SyncAccessDeniedException(string message, Exception innerException);
    protected SyncAccessDeniedException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.TeamFoundation.Server.SyncBadBaselineRevException : SyncSubsystemException {
    public SyncBadBaselineRevException(string message);
    public SyncBadBaselineRevException(string message, Exception innerException);
    protected SyncBadBaselineRevException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.TeamFoundation.Server.SyncMapping : object {
    private string m_mapping;
    private int m_rev;
    private Guid m_serverId;
    public string Mapping { get; public set; }
    public int Rev { get; public set; }
    public Guid ServerId { get; public set; }
    public SyncMapping(Guid serverId, int rev, string mapping);
    public string get_Mapping();
    public void set_Mapping(string value);
    public int get_Rev();
    public void set_Rev(int value);
    public Guid get_ServerId();
    public void set_ServerId(Guid value);
    [EditorBrowsableAttribute("1")]
public static SyncMapping FromXml(IServiceProvider serviceProvider, XmlReader reader);
    public virtual string ToString();
    [EditorBrowsableAttribute("1")]
public void ToXml(XmlWriter writer, string element);
    [EditorBrowsableAttribute("1")]
public static void ToXml(XmlWriter writer, string element, SyncMapping obj);
}
public class Microsoft.TeamFoundation.Server.SyncProperty : object {
    private string m_name;
    private int m_rev;
    private Guid m_serverId;
    private string m_value;
    public string Name { get; public set; }
    public int Rev { get; public set; }
    public Guid ServerId { get; public set; }
    public string Value { get; public set; }
    public SyncProperty(Guid serverId, int rev, string name, string value);
    public string get_Name();
    public void set_Name(string value);
    public int get_Rev();
    public void set_Rev(int value);
    public Guid get_ServerId();
    public void set_ServerId(Guid value);
    public string get_Value();
    public void set_Value(string value);
    [EditorBrowsableAttribute("1")]
public static SyncProperty FromXml(IServiceProvider serviceProvider, XmlReader reader);
    public virtual string ToString();
    [EditorBrowsableAttribute("1")]
public void ToXml(XmlWriter writer, string element);
    [EditorBrowsableAttribute("1")]
public static void ToXml(XmlWriter writer, string element, SyncProperty obj);
}
internal class Microsoft.TeamFoundation.Server.SyncService : TfsHttpClient {
    protected Guid CollectionServiceIdentifier { get; }
    protected string ComponentName { get; }
    protected string ServiceType { get; }
    public SyncService(TfsTeamProjectCollection connection);
    internal SyncService(TfsTeamProjectCollection tfsObject, string url);
    protected virtual Guid get_CollectionServiceIdentifier();
    protected virtual string get_ComponentName();
    protected virtual string get_ServiceType();
    public sealed virtual SyncMapping GetSyncMapping(Guid serverId);
    public sealed virtual bool GetSyncMappingChange(Guid serverId, int baselineRev, SyncMapping& mapping);
    public sealed virtual SyncProperty[] GetSyncProperties(Guid serverId);
    public sealed virtual SyncProperty GetSyncProperty(Guid serverId, string name);
    public sealed virtual void SaveMapping(Guid serverId, int baselineRev, string mapping);
    public sealed virtual void SaveSyncProperty(Guid serverId, int baselineRev, string name, string value);
    protected virtual Exception ConvertException(SoapException e);
}
internal class Microsoft.TeamFoundation.Server.SyncService4 : SyncService {
    protected Guid CollectionServiceIdentifier { get; }
    protected string ComponentName { get; }
    protected string ServiceType { get; }
    public SyncService4(TfsTeamProjectCollection connection);
    protected virtual Guid get_CollectionServiceIdentifier();
    protected virtual string get_ComponentName();
    protected virtual string get_ServiceType();
}
public class Microsoft.TeamFoundation.Server.SyncSubsystemException : TeamFoundationServerException {
    public SyncSubsystemException(string message);
    public SyncSubsystemException(string message, Exception innerException);
    protected SyncSubsystemException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.TeamFoundation.Server.SyncSupersededBaselineRevException : SyncSubsystemException {
    public SyncSupersededBaselineRevException(string message);
    public SyncSupersededBaselineRevException(string message, Exception innerException);
    protected SyncSupersededBaselineRevException(SerializationInfo info, StreamingContext context);
}
public static class Microsoft.TeamFoundation.Server.TeamProjectCatalogConstants : object {
    public static Guid ResourceType;
    public static string ProjectNameProperty;
    public static string ProjectUriProperty;
    public static string ProjectIdProperty;
    public static string ProjectStateProperty;
    public static string SourceControlCapabilityFlags;
    public static string SourceControlGitEnabled;
    public static string SourceControlTfvcEnabled;
    private static TeamProjectCatalogConstants();
}
public class Microsoft.TeamFoundation.Server.TemplateHeader : object {
    [CompilerGeneratedAttribute]
private string <Description>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Metadata>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Rank>k__BackingField;
    [CompilerGeneratedAttribute]
private string <State>k__BackingField;
    [CompilerGeneratedAttribute]
private int <TemplateId>k__BackingField;
    public string Description { get; public set; }
    public string Metadata { get; public set; }
    public string Name { get; public set; }
    public int Rank { get; public set; }
    public string State { get; public set; }
    public int TemplateId { get; public set; }
    internal TemplateHeader(FrameworkTemplateHeader header);
    [CompilerGeneratedAttribute]
public string get_Description();
    [CompilerGeneratedAttribute]
public void set_Description(string value);
    [CompilerGeneratedAttribute]
public string get_Metadata();
    [CompilerGeneratedAttribute]
public void set_Metadata(string value);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public int get_Rank();
    [CompilerGeneratedAttribute]
public void set_Rank(int value);
    [CompilerGeneratedAttribute]
public string get_State();
    [CompilerGeneratedAttribute]
public void set_State(string value);
    [CompilerGeneratedAttribute]
public int get_TemplateId();
    [CompilerGeneratedAttribute]
public void set_TemplateId(int value);
    public TemplateVersion GetVersion();
}
public class Microsoft.TeamFoundation.Server.TemplateVersion : object {
    private static string c_versionNodeName;
    private static string c_versionTypeAttributeName;
    private static string c_minorVersionAttributeName;
    private static string c_majorVersionAttributeName;
    private static TemplateVersion DefaultUnspecifiedVersion;
    [CompilerGeneratedAttribute]
private Guid <TypeId>k__BackingField;
    [CompilerGeneratedAttribute]
private int <MajorVersion>k__BackingField;
    [CompilerGeneratedAttribute]
private int <MinorVersion>k__BackingField;
    public Guid TypeId { get; private set; }
    public int MajorVersion { get; private set; }
    public int MinorVersion { get; private set; }
    public bool IsUnspecified { get; }
    private static TemplateVersion();
    [CompilerGeneratedAttribute]
public Guid get_TypeId();
    [CompilerGeneratedAttribute]
private void set_TypeId(Guid value);
    [CompilerGeneratedAttribute]
public int get_MajorVersion();
    [CompilerGeneratedAttribute]
private void set_MajorVersion(int value);
    [CompilerGeneratedAttribute]
public int get_MinorVersion();
    [CompilerGeneratedAttribute]
private void set_MinorVersion(int value);
    public static TemplateVersion Create(string metadataXml);
    public static TemplateVersion Create(XmlNode xmlNode);
    private static TemplateVersion Create(Guid typeId, int majorVersion, int minorVersion);
    public bool get_IsUnspecified();
    public bool CouldOverride(TemplateVersion other);
}
internal class Microsoft.TeamFoundation.Server.WebServiceSchemas : ValueType {
    public static string CssFaultCodes;
}
public static class Microsoft.TeamFoundation.StandardPluginCatalogFactory : object {
    public static PluginCatalog GetClientPluginCatalog();
    public static PluginCatalog GetServerPluginCatalog();
}
public static class Microsoft.TeamFoundation.Warehouse.WarehousePermissions : object {
    public static int Administer;
}
public static class Microsoft.TeamFoundation.Warehouse.WarehouseSecurity : object {
    public static Guid WarehouseNamespaceId;
    public static string WarehouseNamespaceToken;
    [EditorBrowsableAttribute("1")]
public static string WarehouseNamespaceName;
    private static WarehouseSecurity();
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("2")]
internal class System.Runtime.CompilerServices.RefSafetyRulesAttribute : Attribute {
    public int Version;
    public RefSafetyRulesAttribute(int );
}
