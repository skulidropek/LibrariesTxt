[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
public class Microsoft.TeamFoundation.Diff.ContinueDifferencePredicate`1 : MulticastDelegate {
    public ContinueDifferencePredicate`1(object object, IntPtr method);
    public virtual bool Invoke(int originalIndex, IList`1<T> originalSequence, int longestMatchSoFar);
    public virtual IAsyncResult BeginInvoke(int originalIndex, IList`1<T> originalSequence, int longestMatchSoFar, AsyncCallback callback, object object);
    public virtual bool EndInvoke(IAsyncResult result);
}
internal class Microsoft.TeamFoundation.Diff.DiffChange : object {
    private DiffChangeType m_changeType;
    private int m_originalStart;
    private int m_originalLength;
    private int m_modifiedStart;
    private int m_modifiedLength;
    private bool m_updateChangeType;
    public DiffChangeType ChangeType { get; }
    public int OriginalStart { get; public set; }
    public int OriginalLength { get; public set; }
    public int OriginalEnd { get; }
    public int ModifiedStart { get; public set; }
    public int ModifiedLength { get; public set; }
    public int ModifiedEnd { get; }
    internal DiffChange(int originalStart, int originalLength, int modifiedStart, int modifiedLength);
    private void UpdateChangeType();
    public sealed virtual DiffChangeType get_ChangeType();
    public sealed virtual int get_OriginalStart();
    public void set_OriginalStart(int value);
    public sealed virtual int get_OriginalLength();
    public void set_OriginalLength(int value);
    public sealed virtual int get_OriginalEnd();
    public sealed virtual int get_ModifiedStart();
    public void set_ModifiedStart(int value);
    public sealed virtual int get_ModifiedLength();
    public void set_ModifiedLength(int value);
    public sealed virtual int get_ModifiedEnd();
    public sealed virtual IDiffChange Add(IDiffChange diffChange);
}
internal class Microsoft.TeamFoundation.Diff.DiffChangeHelper : object {
    private int m_originalCount;
    private int m_modifiedCount;
    private List`1<IDiffChange> m_changes;
    private int m_originalStart;
    private int m_modifiedStart;
    public IDiffChange[] Changes { get; }
    public IDiffChange[] ReverseChanges { get; }
    public sealed virtual void Dispose();
    public void MarkNextChange();
    public void AddOriginalElement(int originalIndex, int modifiedIndex);
    public void AddModifiedElement(int originalIndex, int modifiedIndex);
    public IDiffChange[] get_Changes();
    public IDiffChange[] get_ReverseChanges();
}
public enum Microsoft.TeamFoundation.Diff.DiffChangeType : Enum {
    public int value__;
    public static DiffChangeType Insert;
    public static DiffChangeType Delete;
    public static DiffChangeType Change;
}
public abstract class Microsoft.TeamFoundation.Diff.DiffFinder`1 : object {
    private IList`1<T> m_original;
    private IList`1<T> m_modified;
    private Int32[] m_originalIds;
    private Int32[] m_modifiedIds;
    private IEqualityComparer`1<T> m_elementComparer;
    private ContinueDifferencePredicate`1<T> m_predicate;
    protected IList`1<T> OriginalSequence { get; }
    protected IList`1<T> ModifiedSequence { get; }
    protected IEqualityComparer`1<T> ElementComparer { get; }
    public static DiffFinder`1<T> LcsDiff { get; }
    protected ContinueDifferencePredicate`1<T> ContinueDifferencePredicate { get; }
    protected IList`1<T> get_OriginalSequence();
    protected IList`1<T> get_ModifiedSequence();
    protected IEqualityComparer`1<T> get_ElementComparer();
    public virtual void Dispose();
    protected bool ElementsAreEqual(int originalIndex, int modifiedIndex);
    protected bool ElementsAreEqualWithoutBoudaryCheck(int originalIndex, int modifiedIndex);
    protected bool OriginalElementsAreEqual(int firstIndex, int secondIndex);
    protected bool ModifiedElementsAreEqual(int firstIndex, int secondIndex);
    private bool ElementsAreEqual(int firstIndex, bool firstIsOriginal, int secondIndex, bool secondIsOriginal);
    private void ComputeUniqueIdentifiers(int originalStart, int originalEnd, int modifiedStart, int modifiedEnd);
    public IDiffChange[] Diff(IList`1<T> original, IList`1<T> modified, IEqualityComparer`1<T> elementComparer);
    private static WordPosition[] tokenizeWords(IList`1<T> file, int start, int end);
    private IList`1<IDiffChange> createDiffBlockPerLine(int startLine, int endLine, int wordStart, int wordCount, WordPosition[] wordPositions, bool isOriginal);
    public IList`1<LineChanges> WordDiff(IDiffChange[] lineDiffs, IList`1<T> original, IList`1<T> modified);
    public IList`1<LineChanges> WordDiff(IDiffChange[] lineDiffs, IList`1<T> original, IList`1<T> modified, ContinueDifferencePredicate`1<WordPosition> continueDiffPredicate);
    public IDiffChange[] Diff(IList`1<T> original, IList`1<T> modified, IEqualityComparer`1<T> elementComparer, ContinueDifferencePredicate`1<T> continueDiffPredicate);
    protected abstract virtual IDiffChange[] ComputeDiff(int originalStart, int originalEnd, int modifiedStart, int modifiedEnd);
    public static DiffFinder`1<T> get_LcsDiff();
    protected ContinueDifferencePredicate`1<T> get_ContinueDifferencePredicate();
    private void ScanEqualRegion(List`1<IDiffChange> listChanges, IEqualityComparer`1<T> secondaryElementComparer, int oBegin, int oLen, int mBegin, int mLen);
    public IDiffChange[] DiffEx(IList`1<T> original, IList`1<T> modified, IEqualityComparer`1<T> primaryElementComparer, IEqualityComparer`1<T> secondaryElementComparer);
    public IDiffChange[] DiffEx(IList`1<T> original, IList`1<T> modified, IEqualityComparer`1<T> primaryElementComparer, IEqualityComparer`1<T> secondaryElementComparer, ContinueDifferencePredicate`1<T> predicate);
}
public class Microsoft.TeamFoundation.Diff.DiffLineTokenizer : object {
    private static int LineSeparator;
    private static int ParagraphSeparator;
    private static int NextLine;
    private bool m_isUnicodeEncoding;
    private int m_bufferSize;
    private int m_numCharsInBuffer;
    private int m_currBufferPos;
    private Char[] m_charBuffer;
    private StringBuilder m_stringBuilder;
    private StreamReader m_streamReader;
    public DiffLineTokenizer(Stream stream, Encoding encoding);
    private int FillBuffer();
    public string NextLineToken(EndOfLineTerminator& endOfLine);
}
public enum Microsoft.TeamFoundation.Diff.EndOfLineTerminator : Enum {
    public int value__;
    public static EndOfLineTerminator None;
    public static EndOfLineTerminator LineFeed;
    public static EndOfLineTerminator CarriageReturn;
    public static EndOfLineTerminator CarriageReturnLineFeed;
    public static EndOfLineTerminator LineSeparator;
    public static EndOfLineTerminator ParagraphSeparator;
    public static EndOfLineTerminator NextLine;
}
[EditorBrowsableAttribute("1")]
public static class Microsoft.TeamFoundation.Diff.FileTypeUtil : object {
    private static object m_lock;
    private static Encoding m_utf8;
    private static Encoding m_utf8NoBom;
    private static Encoding m_utf16Little;
    private static Encoding m_utf16Big;
    private static Encoding m_utf32Little;
    private static Encoding m_utf32Big;
    private static Byte[] PdfMagic;
    private static FileTypeUtil();
    public static Encoding TryDetermineTextEncoding(string path);
    public static Encoding DetermineEncoding(string path, bool checkForBinary, Encoding fallbackEncoding);
    public static Encoding DetermineEncoding(Stream stream, bool checkForBinary, Encoding fallbackEncoding);
    public static Encoding DetermineEncoding(Stream stream, bool checkForBinary, Encoding fallbackEncoding, bool scanFullFile, Boolean& containsPreamble);
    public static Encoding DetermineEncoding(Stream stream, bool checkForBinary, Encoding fallbackEncoding, long scanBytes, Boolean& containsPreamble);
    private static Encoding FindMatchingEncoding(Byte[] buffer, int length, Boolean& isPdf);
    private static void GetUTF8Info(Byte[] buffer, int bufferLength, long scanBytes, Stream stream, UTF8Flags& result);
}
public interface Microsoft.TeamFoundation.Diff.IDiffChange {
    public DiffChangeType ChangeType { get; }
    public int OriginalStart { get; }
    public int OriginalLength { get; }
    public int OriginalEnd { get; }
    public int ModifiedStart { get; }
    public int ModifiedLength { get; }
    public int ModifiedEnd { get; }
    public abstract virtual DiffChangeType get_ChangeType();
    public abstract virtual int get_OriginalStart();
    public abstract virtual int get_OriginalLength();
    public abstract virtual int get_OriginalEnd();
    public abstract virtual int get_ModifiedStart();
    public abstract virtual int get_ModifiedLength();
    public abstract virtual int get_ModifiedEnd();
    public abstract virtual IDiffChange Add(IDiffChange diffChange);
}
internal class Microsoft.TeamFoundation.Diff.LcsDiff`1 : DiffFinder`1<T> {
    private List`1<Int32[]> m_forwardHistory;
    private List`1<Int32[]> m_reverseHistory;
    private static int MaxDifferencesHistory;
    public virtual void Dispose();
    protected virtual IDiffChange[] ComputeDiff(int originalStart, int originalEnd, int modifiedStart, int modifiedEnd);
    private IDiffChange[] ComputeDiffRecursive(int originalStart, int originalEnd, int modifiedStart, int modifiedEnd, Boolean& quitEarly);
    private IDiffChange[] ComputeRecursionPoint(int originalStart, int originalEnd, int modifiedStart, int modifiedEnd, Int32& midOriginal, Int32& midModified, Boolean& quitEarly);
    private IDiffChange[] ShiftChanges(IDiffChange[] changes);
    private IDiffChange[] ConcatenateChanges(IDiffChange[] left, IDiffChange[] right);
    private bool ChangesOverlap(IDiffChange left, IDiffChange right, IDiffChange& mergedChange);
    private int ClipDiagonalBound(int diagonal, int numDifferences, int diagonalBaseIndex, int numDiagonals);
}
public class Microsoft.TeamFoundation.Diff.LineChanges : object {
    public IDiffChange LineChange;
    public IDiffChange[] CharChange;
    public LineChanges(IDiffChange lineChange, IDiffChange[] charChange);
}
[FlagsAttribute]
internal enum Microsoft.TeamFoundation.Diff.UTF8Flags : Enum {
    public int value__;
    public static UTF8Flags NONE;
    public static UTF8Flags NONASCII;
    public static UTF8Flags UCS4;
    public static UTF8Flags OVERLONG;
    public static UTF8Flags TRAIL_NO_COUNT;
    public static UTF8Flags COUNT_NO_TRAIL;
    public static UTF8Flags UCS4OUTOFRANGE;
}
public class Microsoft.TeamFoundation.Diff.WordPosition : object {
    public int Line;
    public int Start;
    public int Length;
    public int FullStart;
    public string Word;
    public WordPosition(string word, int line, int start, int length, int fullstart);
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("2")]
internal class System.Runtime.CompilerServices.RefSafetyRulesAttribute : Attribute {
    public int Version;
    public RefSafetyRulesAttribute(int );
}
