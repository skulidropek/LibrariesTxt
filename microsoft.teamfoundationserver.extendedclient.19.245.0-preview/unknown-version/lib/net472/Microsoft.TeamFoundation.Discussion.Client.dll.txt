[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
public class Microsoft.TeamFoundation.Discussion.Client.Comment : object {
    [CompilerGeneratedAttribute]
private Comment <ClonedFrom>k__BackingField;
    private CommentSaveReasons m_needsSave;
    private bool m_isDirty;
    private DiscussionThread m_discussion;
    private CommentId m_commentId;
    private Comment m_parentComment;
    private TeamFoundationIdentity m_author;
    private List`1<Comment> m_childComments;
    private DateTime m_savedDate;
    private object m_lock;
    private object m_childListLock;
    private Guid m_authorIdentity;
    private byte m_commentType;
    private string m_content;
    private int m_discussionId;
    private short m_id;
    private bool m_isDeleted;
    private short m_parentId;
    private DateTime m_publishedDate;
    public short Id { get; }
    public int DiscussionId { get; }
    public DiscussionThread Discussion { get; internal set; }
    public TeamFoundationIdentity Author { get; }
    public CommentType CommentType { get; public set; }
    public string Content { get; public set; }
    public bool IsDeleted { get; public set; }
    public DateTime PublishedDate { get; }
    public Comment ParentComment { get; internal set; }
    public bool NeedsSave { get; }
    internal List`1<Comment> ChildList { get; }
    internal object ChildListLock { get; }
    internal CommentId CommentId { get; }
    internal short ParentId { get; }
    internal Guid AuthorIdentity { get; }
    internal Comment ClonedFrom { get; private set; }
    public DateTime SavedDate { get; }
    internal Comment(short localCommentId, DiscussionThread discussion, TeamFoundationIdentity author, CommentType commentType, string content);
    public short get_Id();
    public int get_DiscussionId();
    public DiscussionThread get_Discussion();
    internal void set_Discussion(DiscussionThread value);
    public TeamFoundationIdentity get_Author();
    public CommentType get_CommentType();
    public void set_CommentType(CommentType value);
    public string get_Content();
    public void set_Content(string value);
    public bool get_IsDeleted();
    public void set_IsDeleted(bool value);
    public DateTime get_PublishedDate();
    public Comment get_ParentComment();
    internal void set_ParentComment(Comment value);
    public bool get_NeedsSave();
    internal List`1<Comment> get_ChildList();
    internal object get_ChildListLock();
    internal CommentId get_CommentId();
    internal short get_ParentId();
    internal Guid get_AuthorIdentity();
    [CompilerGeneratedAttribute]
internal Comment get_ClonedFrom();
    [CompilerGeneratedAttribute]
private void set_ClonedFrom(Comment value);
    public DateTime get_SavedDate();
    public ReadOnlyCollection`1<Comment> GetChildComments();
    internal bool PrePublish(List`1& newComments, List`1& deletedComments);
    internal void PostPublish(short id, DateTime updatedDate);
    internal void PostFailedPublish(Comment clone);
    internal void PreSave(List`1& comments);
    internal void Save(DiscussionStorage ds);
    internal void PostSave();
    internal void PostFailedSave(Comment clone);
    internal void WriteToXml(XmlWriter w);
    internal void PostQuery(Dictionary`2<Guid, TeamFoundationIdentity> identityCache);
    internal void Load(Comment localComment);
    internal bool PruneDeletedTrees(List`1<Comment> deletedTrees);
    internal void GetComments(List`1<Comment> comments);
    private bool HasSaveReason(CommentSaveReasons reason);
    private Comment CloneProperties();
    internal static Comment ReadFromXml(XmlReader r);
    [EditorBrowsableAttribute("1")]
public static Comment FromXml(IServiceProvider serviceProvider, XmlReader reader);
    public virtual string ToString();
    [EditorBrowsableAttribute("1")]
public void ToXml(XmlWriter writer, string element);
    [EditorBrowsableAttribute("1")]
public static void ToXml(XmlWriter writer, string element, Comment obj);
}
public class Microsoft.TeamFoundation.Discussion.Client.CommentId : object {
    private int m_discussionId;
    private short m_id;
    internal short Id { get; }
    internal CommentId(int discussionId, short commentId);
    internal short get_Id();
    public sealed virtual bool Equals(CommentId other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    [EditorBrowsableAttribute("1")]
public static CommentId FromXml(IServiceProvider serviceProvider, XmlReader reader);
    public virtual string ToString();
    [EditorBrowsableAttribute("1")]
public void ToXml(XmlWriter writer, string element);
    [EditorBrowsableAttribute("1")]
public static void ToXml(XmlWriter writer, string element, CommentId obj);
}
[FlagsAttribute]
internal enum Microsoft.TeamFoundation.Discussion.Client.CommentSaveReasons : Enum {
    public int value__;
    public static CommentSaveReasons None;
    public static CommentSaveReasons New;
    public static CommentSaveReasons DeletionChanged;
    public static CommentSaveReasons ContentChanged;
    public static CommentSaveReasons CommentTypeChanged;
    public static CommentSaveReasons Published;
}
public enum Microsoft.TeamFoundation.Discussion.Client.CommentType : Enum {
    public int value__;
    public static CommentType Unknown;
    public static CommentType Text;
    public static CommentType CodeChange;
}
public class Microsoft.TeamFoundation.Discussion.Client.DiscussionException : TeamFoundationServerException {
    public DiscussionException(string message);
    public DiscussionException(string message, Exception innerException);
    protected DiscussionException(SerializationInfo info, StreamingContext context);
    [SecurityCriticalAttribute]
public virtual void GetObjectData(SerializationInfo info, StreamingContext context);
}
internal class Microsoft.TeamFoundation.Discussion.Client.DiscussionManager : object {
    [CompilerGeneratedAttribute]
private TeamFoundationDiscussionService <DiscussionService>k__BackingField;
    private string m_localStoragePath;
    private int m_localDataRetentionDays;
    [CompilerGeneratedAttribute]
private EventHandler`1<EventArgs> LocalDataLost;
    public int LocalDataRetentionDays { get; public set; }
    internal string LocalStoragePath { get; }
    internal TeamFoundationDiscussionService DiscussionService { get; private set; }
    internal DiscussionManager(TeamFoundationDiscussionService discussionService);
    public sealed virtual int get_LocalDataRetentionDays();
    public sealed virtual void set_LocalDataRetentionDays(int value);
    internal string get_LocalStoragePath();
    [CompilerGeneratedAttribute]
internal TeamFoundationDiscussionService get_DiscussionService();
    [CompilerGeneratedAttribute]
private void set_DiscussionService(TeamFoundationDiscussionService value);
    public sealed virtual IAsyncResult BeginSave(IEnumerable`1<DiscussionThread> discussions, AsyncCallback callback, object userState);
    public sealed virtual void EndSave(IAsyncResult asyncResult);
    public sealed virtual IAsyncResult BeginCleanup(IEnumerable`1<DiscussionThread> discussions, AsyncCallback callback, object userState);
    public sealed virtual void EndCleanup(IAsyncResult asyncResult);
    public sealed virtual IAsyncResult BeginPublish(IEnumerable`1<DiscussionThread> discussions, AsyncCallback callback, object userState);
    public sealed virtual void EndPublish(IAsyncResult asyncResult);
    public sealed virtual IAsyncResult BeginQueryByVersion(Uri versionUri, QueryStoreOptions storeOptions, AsyncCallback callback, object userState);
    public sealed virtual IEnumerable`1<DiscussionThread> EndQueryByVersion(IAsyncResult asyncResult);
    public sealed virtual IAsyncResult BeginQueryByCodeReviewRequest(int workItemId, QueryStoreOptions storeOptions, AsyncCallback callback, object userState);
    public sealed virtual IEnumerable`1<DiscussionThread> EndQueryByCodeReviewRequest(IAsyncResult asyncResult);
    private void OnLocalDataLost(EventArgs e);
    [CompilerGeneratedAttribute]
public sealed virtual void add_LocalDataLost(EventHandler`1<EventArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_LocalDataLost(EventHandler`1<EventArgs> value);
}
public class Microsoft.TeamFoundation.Discussion.Client.DiscussionPosition : object {
    private int m_endCharPosition;
    private int m_endColumn;
    private int m_endLine;
    private string m_positionContext;
    private int m_startCharPosition;
    private int m_startColumn;
    private int m_startLine;
    public int StartLine { get; private set; }
    public int EndLine { get; private set; }
    public int StartColumn { get; private set; }
    public int EndColumn { get; private set; }
    public int StartCharPosition { get; public set; }
    public int EndCharPosition { get; public set; }
    public string PositionContext { get; private set; }
    public DiscussionPosition(int startLine, int endLine, int startCharPosition, int endCharPosition, string positionContext);
    public DiscussionPosition(int startLine, int endLine, int startColumn, int endColumn, int startCharPosition, int endCharPosition, string positionContext);
    public int get_StartLine();
    private void set_StartLine(int value);
    public int get_EndLine();
    private void set_EndLine(int value);
    public int get_StartColumn();
    private void set_StartColumn(int value);
    public int get_EndColumn();
    private void set_EndColumn(int value);
    public int get_StartCharPosition();
    public void set_StartCharPosition(int value);
    public int get_EndCharPosition();
    public void set_EndCharPosition(int value);
    public string get_PositionContext();
    private void set_PositionContext(string value);
    [EditorBrowsableAttribute("1")]
public static DiscussionPosition FromXml(IServiceProvider serviceProvider, XmlReader reader);
    public virtual string ToString();
    [EditorBrowsableAttribute("1")]
public void ToXml(XmlWriter writer, string element);
    [EditorBrowsableAttribute("1")]
public static void ToXml(XmlWriter writer, string element, DiscussionPosition obj);
}
public class Microsoft.TeamFoundation.Discussion.Client.DiscussionPublishException : DiscussionException {
    public DiscussionPublishException(string message);
    public DiscussionPublishException(string message, Exception innerException);
    protected DiscussionPublishException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.TeamFoundation.Discussion.Client.DiscussionSaveException : DiscussionException {
    public DiscussionSaveException(string message);
    public DiscussionSaveException(string message, Exception innerException);
    protected DiscussionSaveException(SerializationInfo info, StreamingContext context);
}
[FlagsAttribute]
internal enum Microsoft.TeamFoundation.Discussion.Client.DiscussionSaveReasons : Enum {
    public int value__;
    public static DiscussionSaveReasons None;
    public static DiscussionSaveReasons StatusChanged;
    public static DiscussionSaveReasons SeverityChanged;
    public static DiscussionSaveReasons Deleted;
    public static DiscussionSaveReasons Undeleted;
    public static DiscussionSaveReasons ReadStatusChanged;
    public static DiscussionSaveReasons Published;
}
public enum Microsoft.TeamFoundation.Discussion.Client.DiscussionSeverity : Enum {
    public int value__;
    public static DiscussionSeverity Unknown;
    public static DiscussionSeverity Low;
    public static DiscussionSeverity Normal;
    public static DiscussionSeverity High;
}
public enum Microsoft.TeamFoundation.Discussion.Client.DiscussionStatus : Enum {
    public int value__;
    public static DiscussionStatus Unknown;
    public static DiscussionStatus Active;
    public static DiscussionStatus Fixed;
    public static DiscussionStatus WontFix;
    public static DiscussionStatus Closed;
}
internal class Microsoft.TeamFoundation.Discussion.Client.DiscussionStorage : LocalMetadataTable {
    [CompilerGeneratedAttribute]
private int <UnpublishedDiscussionId>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <FileCorrupted>k__BackingField;
    [CompilerGeneratedAttribute]
private DiscussionManager <DiscussionManager>k__BackingField;
    private Dictionary`2<int, DiscussionThread> m_discussions;
    private Dictionary`2<CommentId, Comment> m_comments;
    private static XmlReaderSettings s_readerSettings;
    private static XmlWriterSettings s_writerSettings;
    private static string c_schemaFile;
    internal int UnpublishedDiscussionId { get; internal set; }
    internal Dictionary`2<int, DiscussionThread> Discussions { get; }
    internal Dictionary`2<CommentId, Comment> Comments { get; }
    internal bool FileCorrupted { get; private set; }
    private DiscussionManager DiscussionManager { get; private set; }
    protected String[] TraceKeywords { get; }
    internal static XmlReaderSettings ReaderSettings { get; }
    internal static XmlWriterSettings WriterSettings { get; }
    internal DiscussionStorage(DiscussionManager discussionManager);
    [CompilerGeneratedAttribute]
internal int get_UnpublishedDiscussionId();
    [CompilerGeneratedAttribute]
internal void set_UnpublishedDiscussionId(int value);
    internal Dictionary`2<int, DiscussionThread> get_Discussions();
    internal Dictionary`2<CommentId, Comment> get_Comments();
    [CompilerGeneratedAttribute]
internal bool get_FileCorrupted();
    [CompilerGeneratedAttribute]
private void set_FileCorrupted(bool value);
    [CompilerGeneratedAttribute]
private DiscussionManager get_DiscussionManager();
    [CompilerGeneratedAttribute]
private void set_DiscussionManager(DiscussionManager value);
    protected virtual String[] get_TraceKeywords();
    protected virtual void Initialize(object initializeData);
    protected virtual void Load(SafeFileHandle fileHandle);
    protected virtual bool Save(SafeFileHandle fileHandle);
    internal void Store(IEnumerable`1<DiscussionThread> discussions, IEnumerable`1<Comment> comments);
    internal void Delete(IEnumerable`1<int> discussionIds, IEnumerable`1<CommentId> commentIds);
    internal IEnumerable`1<DiscussionThread> Retrieve(IEnumerable`1& comments);
    private void ReadDiscussion(XmlReader r);
    private void ReadComment(XmlReader r);
    internal static XmlReaderSettings get_ReaderSettings();
    internal static XmlWriterSettings get_WriterSettings();
    internal static int ReadInt(XmlReader r, string attributeName);
    internal static string ReadString(XmlReader r, string attributeName);
    internal static bool ReadBoolean(XmlReader r, string attributeName);
    internal static DateTime ReadDateTime(XmlReader r, string attributeName);
    internal static void WriteValue(XmlWriter w, string attributeName, T value);
    private static XmlSchema GetSchema();
}
public class Microsoft.TeamFoundation.Discussion.Client.DiscussionThread : object {
    [CompilerGeneratedAttribute]
private Comment <RootComment>k__BackingField;
    [CompilerGeneratedAttribute]
private DiscussionManager <Manager>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsBeingPublished>k__BackingField;
    [CompilerGeneratedAttribute]
private DiscussionThread <ClonedFrom>k__BackingField;
    [CompilerGeneratedAttribute]
private int <LocalId>k__BackingField;
    private DiscussionSaveReasons m_needsSave;
    private List`1<Comment> m_deletedTrees;
    private int m_nextUnpublishedCommentId;
    private ReadStatus m_readStatus;
    private DateTime m_savedDate;
    private object m_lock;
    private int m_id;
    private bool m_isDirty;
    private string m_itemPath;
    private DateTime m_lastUpdatedDate;
    private DiscussionPosition m_position;
    private DateTime m_publishedDate;
    private int m_revision;
    private byte m_severity;
    private byte m_status;
    private Uri m_versionUri;
    private int m_workItemId;
    public int Id { get; }
    public DiscussionStatus Status { get; public set; }
    public DiscussionSeverity Severity { get; public set; }
    public int WorkItemId { get; }
    public Uri VersionUri { get; }
    public string ItemPath { get; }
    public DiscussionPosition Position { get; }
    public DateTime PublishedDate { get; }
    public Comment RootComment { get; internal set; }
    public DateTime LastUpdatedDate { get; }
    public int Revision { get; }
    public bool NeedsSave { get; }
    public ReadStatus ReadStatus { get; public set; }
    internal DiscussionManager Manager { get; private set; }
    internal bool IsBeingPublished { get; internal set; }
    internal DiscussionThread ClonedFrom { get; private set; }
    internal int LocalId { get; internal set; }
    public DateTime SavedDate { get; }
    public DiscussionThread(IDiscussionManager discussionManager, int workItemId, Uri versionUri);
    public DiscussionThread(IDiscussionManager discussionManager, int workItemId, Uri versionUri, string itemPath);
    public DiscussionThread(IDiscussionManager discussionManager, int workItemId, Uri versionUri, string itemPath, DiscussionPosition position);
    public int get_Id();
    public DiscussionStatus get_Status();
    public void set_Status(DiscussionStatus value);
    public DiscussionSeverity get_Severity();
    public void set_Severity(DiscussionSeverity value);
    public int get_WorkItemId();
    public Uri get_VersionUri();
    public string get_ItemPath();
    public DiscussionPosition get_Position();
    public DateTime get_PublishedDate();
    [CompilerGeneratedAttribute]
public Comment get_RootComment();
    [CompilerGeneratedAttribute]
internal void set_RootComment(Comment value);
    public DateTime get_LastUpdatedDate();
    public int get_Revision();
    public bool get_NeedsSave();
    public ReadStatus get_ReadStatus();
    public void set_ReadStatus(ReadStatus value);
    [CompilerGeneratedAttribute]
internal DiscussionManager get_Manager();
    [CompilerGeneratedAttribute]
private void set_Manager(DiscussionManager value);
    [CompilerGeneratedAttribute]
internal bool get_IsBeingPublished();
    [CompilerGeneratedAttribute]
internal void set_IsBeingPublished(bool value);
    [CompilerGeneratedAttribute]
internal DiscussionThread get_ClonedFrom();
    [CompilerGeneratedAttribute]
private void set_ClonedFrom(DiscussionThread value);
    [CompilerGeneratedAttribute]
internal int get_LocalId();
    [CompilerGeneratedAttribute]
internal void set_LocalId(int value);
    public DateTime get_SavedDate();
    public Comment AddComment(TeamFoundationIdentity author, CommentType commentType, string content, Comment parentComment);
    public Comment AddComment(Comment comment, Comment parentComment);
    internal DiscussionThread PrePublish(List`1& newComments, List`1& deletedComments);
    internal void PostPublish(int discussionId, DateTime updatedDate);
    internal void PostFailedPublish(DiscussionThread clone);
    internal DiscussionThread PreSave(List`1& comments);
    internal void Save(DiscussionStorage ds);
    internal void PostSave(int discussionId);
    internal void PostFailedSave(DiscussionThread clone);
    internal void WriteToXml(XmlWriter w);
    internal void PostQuery(IDiscussionManager discussionManager);
    internal void Load(DiscussionThread d);
    internal void PostLoad(IDiscussionManager discussionManager);
    internal void SetSaveReason(DiscussionSaveReasons reason);
    private DiscussionThread CloneProperties(List`1<Comment> deletedTrees);
    private bool HasSaveReason(DiscussionSaveReasons reason);
    private short GenerateLocalCommentId();
    internal static DiscussionThread ReadFromXml(XmlReader r);
    internal static DiscussionThread FromXml(IServiceProvider serviceProvider, XmlReader reader);
    public virtual string ToString();
    internal void ToXml(XmlWriter writer, string element);
    internal static void ToXml(XmlWriter writer, string element, DiscussionThread obj);
}
internal static class Microsoft.TeamFoundation.Discussion.Client.DiscussionTraceKeywordSets : object {
    public static String[] General;
    private static DiscussionTraceKeywordSets();
}
internal class Microsoft.TeamFoundation.Discussion.Client.DiscussionWebService : TfsHttpClient {
    protected Guid CollectionServiceIdentifier { get; }
    protected string ComponentName { get; }
    protected string ServiceType { get; }
    public DiscussionWebService(TfsTeamProjectCollection connection);
    protected virtual Exception ConvertException(SoapException e);
    protected virtual Guid get_CollectionServiceIdentifier();
    protected virtual string get_ComponentName();
    protected virtual string get_ServiceType();
    public IAsyncResult BeginPublishDiscussions(IEnumerable`1<DiscussionThread> discussions, IEnumerable`1<Comment> comments, IEnumerable`1<CommentId> deletedComments, AsyncCallback callback, object state);
    public IAsyncResult BeginQueryDiscussionsByCodeReviewRequest(int workItemId, AsyncCallback callback, object state);
    public IAsyncResult BeginQueryDiscussionsByVersion(string versionUri, AsyncCallback callback, object state);
    public Int32[] EndPublishDiscussions(Int16[]& commentIds, DateTime& lastUpdatedDate, IAsyncResult result);
    public DiscussionThread[] EndQueryDiscussionsByCodeReviewRequest(Comment[]& comments, TeamFoundationIdentity[]& authors, IAsyncResult result);
    public DiscussionThread[] EndQueryDiscussionsByVersion(Comment[]& comments, TeamFoundationIdentity[]& authors, IAsyncResult result);
}
internal static class Microsoft.TeamFoundation.Discussion.Client.Helper : object {
    private static Comment[] m_zeroLengthArrayOfComment;
    private static DiscussionThread[] m_zeroLengthArrayOfDiscussionThread;
    private static IdentityDescriptor[] m_zeroLengthArrayOfIdentityDescriptor;
    private static Int16[] m_zeroLengthArrayOfInt16;
    private static Int32[] m_zeroLengthArrayOfInt32;
    private static KeyValueOfStringString[] m_zeroLengthArrayOfKeyValueOfStringString;
    private static PropertyValue[] m_zeroLengthArrayOfPropertyValue;
    private static TeamFoundationIdentity[] m_zeroLengthArrayOfTeamFoundationIdentity;
    private static Comment[] m_zeroLengthEnumerableOfComment;
    private static CommentId[] m_zeroLengthEnumerableOfCommentId;
    private static DiscussionThread[] m_zeroLengthEnumerableOfDiscussionThread;
    internal static Comment[] ZeroLengthArrayOfComment { get; }
    internal static DiscussionThread[] ZeroLengthArrayOfDiscussionThread { get; }
    internal static IdentityDescriptor[] ZeroLengthArrayOfIdentityDescriptor { get; }
    internal static Int16[] ZeroLengthArrayOfInt16 { get; }
    internal static Int32[] ZeroLengthArrayOfInt32 { get; }
    internal static KeyValueOfStringString[] ZeroLengthArrayOfKeyValueOfStringString { get; }
    internal static PropertyValue[] ZeroLengthArrayOfPropertyValue { get; }
    internal static TeamFoundationIdentity[] ZeroLengthArrayOfTeamFoundationIdentity { get; }
    internal static IEnumerable`1<Comment> ZeroLengthEnumerableOfComment { get; }
    internal static IEnumerable`1<CommentId> ZeroLengthEnumerableOfCommentId { get; }
    internal static IEnumerable`1<DiscussionThread> ZeroLengthEnumerableOfDiscussionThread { get; }
    internal static Comment[] get_ZeroLengthArrayOfComment();
    internal static DiscussionThread[] get_ZeroLengthArrayOfDiscussionThread();
    internal static IdentityDescriptor[] get_ZeroLengthArrayOfIdentityDescriptor();
    internal static Int16[] get_ZeroLengthArrayOfInt16();
    internal static Int32[] get_ZeroLengthArrayOfInt32();
    internal static KeyValueOfStringString[] get_ZeroLengthArrayOfKeyValueOfStringString();
    internal static PropertyValue[] get_ZeroLengthArrayOfPropertyValue();
    internal static TeamFoundationIdentity[] get_ZeroLengthArrayOfTeamFoundationIdentity();
    internal static IEnumerable`1<Comment> get_ZeroLengthEnumerableOfComment();
    internal static IEnumerable`1<CommentId> get_ZeroLengthEnumerableOfCommentId();
    internal static IEnumerable`1<DiscussionThread> get_ZeroLengthEnumerableOfDiscussionThread();
    internal static Comment[] ArrayOfCommentFromXml(IServiceProvider serviceProvider, XmlReader reader, bool inline);
    internal static DiscussionThread[] ArrayOfDiscussionThreadFromXml(IServiceProvider serviceProvider, XmlReader reader, bool inline);
    internal static IdentityDescriptor[] ArrayOfIdentityDescriptorFromXml(IServiceProvider serviceProvider, XmlReader reader, bool inline);
    internal static Int16[] ArrayOfInt16FromXml(XmlReader reader, bool inline);
    internal static Int32[] ArrayOfInt32FromXml(XmlReader reader, bool inline);
    internal static KeyValueOfStringString[] ArrayOfKeyValueOfStringStringFromXml(IServiceProvider serviceProvider, XmlReader reader, bool inline);
    internal static PropertyValue[] ArrayOfPropertyValueFromXml(IServiceProvider serviceProvider, XmlReader reader, bool inline);
    internal static TeamFoundationIdentity[] ArrayOfTeamFoundationIdentityFromXml(IServiceProvider serviceProvider, XmlReader reader, bool inline);
    internal static string ArrayToString(T[] array);
    internal static IEnumerable`1<Comment> EnumerableOfCommentFromXml(IServiceProvider serviceProvider, XmlReader reader, bool inline);
    internal static IEnumerable`1<CommentId> EnumerableOfCommentIdFromXml(IServiceProvider serviceProvider, XmlReader reader, bool inline);
    internal static IEnumerable`1<DiscussionThread> EnumerableOfDiscussionThreadFromXml(IServiceProvider serviceProvider, XmlReader reader, bool inline);
    internal static void StringToXmlElement(XmlWriter writer, string element, string str);
    internal static void ToXml(XmlWriter writer, string arrayName, Comment[] array);
    internal static void ToXml(XmlWriter writer, string arrayName, Comment[] array, bool inline, bool allowEmptyArrays);
    internal static void ToXml(XmlWriter writer, string arrayName, DiscussionThread[] array);
    internal static void ToXml(XmlWriter writer, string arrayName, DiscussionThread[] array, bool inline, bool allowEmptyArrays);
    internal static void ToXml(XmlWriter writer, string enumerableName, IEnumerable`1<Comment> enumerable, bool inline, bool allowEmptyArrays);
    internal static void ToXml(XmlWriter writer, string enumerableName, IEnumerable`1<CommentId> enumerable, bool inline, bool allowEmptyArrays);
    internal static void ToXml(XmlWriter writer, string enumerableName, IEnumerable`1<DiscussionThread> enumerable, bool inline, bool allowEmptyArrays);
    internal static void ToXml(XmlWriter writer, string arrayName, IdentityDescriptor[] array);
    internal static void ToXml(XmlWriter writer, string arrayName, IdentityDescriptor[] array, bool inline, bool allowEmptyArrays);
    internal static void ToXml(XmlWriter writer, string arrayName, Int16[] array);
    internal static void ToXml(XmlWriter writer, string arrayName, Int16[] array, bool inline, bool allowEmptyArrays);
    internal static void ToXml(XmlWriter writer, string arrayName, Int32[] array);
    internal static void ToXml(XmlWriter writer, string arrayName, Int32[] array, bool inline, bool allowEmptyArrays);
    internal static void ToXml(XmlWriter writer, string arrayName, KeyValueOfStringString[] array);
    internal static void ToXml(XmlWriter writer, string arrayName, KeyValueOfStringString[] array, bool inline, bool allowEmptyArrays);
    internal static void ToXml(XmlWriter writer, string arrayName, PropertyValue[] array);
    internal static void ToXml(XmlWriter writer, string arrayName, PropertyValue[] array, bool inline, bool allowEmptyArrays);
    internal static void ToXml(XmlWriter writer, string arrayName, TeamFoundationIdentity[] array);
    internal static void ToXml(XmlWriter writer, string arrayName, TeamFoundationIdentity[] array, bool inline, bool allowEmptyArrays);
}
public interface Microsoft.TeamFoundation.Discussion.Client.IDiscussionManager {
    public int LocalDataRetentionDays { get; public set; }
    public abstract virtual int get_LocalDataRetentionDays();
    public abstract virtual void set_LocalDataRetentionDays(int value);
    public abstract virtual IAsyncResult BeginSave(IEnumerable`1<DiscussionThread> discussions, AsyncCallback callback, object userState);
    public abstract virtual void EndSave(IAsyncResult asyncResult);
    public abstract virtual IAsyncResult BeginCleanup(IEnumerable`1<DiscussionThread> discussions, AsyncCallback callback, object userState);
    public abstract virtual void EndCleanup(IAsyncResult asyncResult);
    public abstract virtual IAsyncResult BeginPublish(IEnumerable`1<DiscussionThread> discussions, AsyncCallback callback, object userState);
    public abstract virtual void EndPublish(IAsyncResult asyncResult);
    public abstract virtual IAsyncResult BeginQueryByVersion(Uri versionUri, QueryStoreOptions storeOptions, AsyncCallback callback, object userState);
    public abstract virtual IEnumerable`1<DiscussionThread> EndQueryByVersion(IAsyncResult asyncResult);
    public abstract virtual IAsyncResult BeginQueryByCodeReviewRequest(int workItemId, QueryStoreOptions storeOptions, AsyncCallback callback, object userState);
    public abstract virtual IEnumerable`1<DiscussionThread> EndQueryByCodeReviewRequest(IAsyncResult asyncResult);
    [CompilerGeneratedAttribute]
public abstract virtual void add_LocalDataLost(EventHandler`1<EventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_LocalDataLost(EventHandler`1<EventArgs> value);
}
[FlagsAttribute]
public enum Microsoft.TeamFoundation.Discussion.Client.QueryStoreOptions : Enum {
    public int value__;
    public static QueryStoreOptions None;
    public static QueryStoreOptions ServerOnly;
    public static QueryStoreOptions LocalOnly;
    public static QueryStoreOptions ServerAndLocal;
}
public enum Microsoft.TeamFoundation.Discussion.Client.ReadStatus : Enum {
    public int value__;
    public static ReadStatus Unknown;
    public static ReadStatus Read;
    public static ReadStatus Unread;
}
[GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "4.0.0.0")]
[DebuggerNonUserCodeAttribute]
[CompilerGeneratedAttribute]
internal class Microsoft.TeamFoundation.Discussion.Client.Resources : object {
    private static ResourceManager resourceMan;
    private static CultureInfo resourceCulture;
    [EditorBrowsableAttribute("2")]
internal static ResourceManager ResourceManager { get; }
    [EditorBrowsableAttribute("2")]
internal static CultureInfo Culture { get; internal set; }
    internal static string ArgumentInvalidError { get; }
    internal static string ArgumentNullError { get; }
    internal static string CannotAddAnotherRootComment { get; }
    internal static string CannotDeleteCommentByOtherAuthors { get; }
    internal static string CannotPublishCommentWithNoContent { get; }
    internal static string CannotPublishDiscussionWithNoRootComment { get; }
    internal static string CannotUndeletePublishedComment { get; }
    internal static string CommentHasUnsupportedCharacters { get; }
    internal static string DiscussionIsBeingPublished { get; }
    internal static string LocalStoreXmlValidationError { get; }
    internal static string ParentCommentInDifferentDiscussion { get; }
    internal static string ParentCommentUnpublished { get; }
    internal static string PropertyCannotBeChanged { get; }
    internal static string PublishingFailed { get; }
    internal static string SavingFailed { get; }
    internal static ResourceManager get_ResourceManager();
    internal static CultureInfo get_Culture();
    internal static void set_Culture(CultureInfo value);
    internal static string get_ArgumentInvalidError();
    internal static string get_ArgumentNullError();
    internal static string get_CannotAddAnotherRootComment();
    internal static string get_CannotDeleteCommentByOtherAuthors();
    internal static string get_CannotPublishCommentWithNoContent();
    internal static string get_CannotPublishDiscussionWithNoRootComment();
    internal static string get_CannotUndeletePublishedComment();
    internal static string get_CommentHasUnsupportedCharacters();
    internal static string get_DiscussionIsBeingPublished();
    internal static string get_LocalStoreXmlValidationError();
    internal static string get_ParentCommentInDifferentDiscussion();
    internal static string get_ParentCommentUnpublished();
    internal static string get_PropertyCannotBeChanged();
    internal static string get_PublishingFailed();
    internal static string get_SavingFailed();
}
public class Microsoft.TeamFoundation.Discussion.Client.TeamFoundationDiscussionService : object {
    private TfsTeamProjectCollection m_server;
    private DiscussionWebService m_discussionWebService;
    private IIdentityManagementService m_identityService;
    internal DiscussionWebService DiscussionWebService { get; }
    internal IIdentityManagementService IdentityService { get; }
    internal TfsTeamProjectCollection TfsCollection { get; }
    public IDiscussionManager CreateDiscussionManager();
    internal DiscussionWebService get_DiscussionWebService();
    internal IIdentityManagementService get_IdentityService();
    internal TfsTeamProjectCollection get_TfsCollection();
    public sealed virtual void Initialize(TfsTeamProjectCollection server);
}
internal static class Microsoft.TeamFoundation.Discussion.Client.Validator : object {
    internal static void CheckNull(object obj, string argument);
    internal static void CheckNullCollection(IEnumerable`1<T> objs, string argument);
    internal static void CheckArgument(bool condition, string errorMessage, Object[] args);
    internal static void CheckInvalidOperation(bool condition, string errorMessage, Object[] args);
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("2")]
internal class System.Runtime.CompilerServices.RefSafetyRulesAttribute : Attribute {
    public int Version;
    public RefSafetyRulesAttribute(int );
}
