[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
[EditorBrowsableAttribute("1")]
public class Microsoft.TeamFoundation.Git.Client.CreateTeamProjectRepositoryException : TeamFoundationServerException {
    public CreateTeamProjectRepositoryException(string message);
}
internal abstract class Microsoft.TeamFoundation.Git.Client.GitClientProxy : TfsHttpClient {
    protected string ComponentName { get; }
    protected GitClientProxy(TfsTeamProjectCollection tfs);
    protected virtual string get_ComponentName();
}
internal class Microsoft.TeamFoundation.Git.Client.GitIntegration : GitClientProxy {
    protected Guid CollectionServiceIdentifier { get; }
    protected string ServiceType { get; }
    public GitIntegration(TfsTeamProjectCollection connection);
    protected virtual Guid get_CollectionServiceIdentifier();
    protected virtual string get_ServiceType();
    public void CreateTeamProjectRepository(string teamProjectName, AccessControlEntryDetails[] permissions);
    public TfsGitRef[] QueryRefs(Guid repositoryId, string refTypeFilter);
    public TfsGitRepositoryInfo[] QueryRepositories(string projectFilter);
}
public class Microsoft.TeamFoundation.Git.Client.GitRepositoryService : object {
    private TfsTeamProjectCollection m_projectCollection;
    private WebServiceLayer m_webServiceLayer;
    public WebServiceLevel WebServiceLevel { get; }
    public sealed virtual void Initialize(TfsTeamProjectCollection projectCollection);
    public WebServiceLevel get_WebServiceLevel();
    public void CreateTeamProjectRepository(string teamProjectName, AccessControlEntry[] permissions);
    public IList`1<GitRepository> QueryRepositories(string projectFilter);
    public IList`1<GitRef> QueryRefs(Guid repositoryId, string refTypeFilter);
    public IList`1<GitPullRequest> QueryPullRequests(GitPullRequestSearchCriteria searchCriteria, Nullable`1<int> maxCommentLength, Nullable`1<int> skip, Nullable`1<int> top);
    public GitPullRequest CreatePullRequest(GitPullRequest pullRequest, string repositoryId);
    public GitRef QueryBranch(Guid repositoryId, string branchName);
}
internal static class Microsoft.TeamFoundation.Git.Client.Helper : object {
    private static AccessControlEntryDetails[] m_zeroLengthArrayOfAccessControlEntryDetails;
    private static TfsGitRef[] m_zeroLengthArrayOfTfsGitRef;
    private static TfsGitRepositoryInfo[] m_zeroLengthArrayOfTfsGitRepositoryInfo;
    internal static AccessControlEntryDetails[] ZeroLengthArrayOfAccessControlEntryDetails { get; }
    internal static TfsGitRef[] ZeroLengthArrayOfTfsGitRef { get; }
    internal static TfsGitRepositoryInfo[] ZeroLengthArrayOfTfsGitRepositoryInfo { get; }
    internal static AccessControlEntryDetails[] get_ZeroLengthArrayOfAccessControlEntryDetails();
    internal static TfsGitRef[] get_ZeroLengthArrayOfTfsGitRef();
    internal static TfsGitRepositoryInfo[] get_ZeroLengthArrayOfTfsGitRepositoryInfo();
    internal static AccessControlEntryDetails[] ArrayOfAccessControlEntryDetailsFromXml(IServiceProvider serviceProvider, XmlReader reader, bool inline);
    internal static TfsGitRef[] ArrayOfTfsGitRefFromXml(IServiceProvider serviceProvider, XmlReader reader, bool inline);
    internal static TfsGitRepositoryInfo[] ArrayOfTfsGitRepositoryInfoFromXml(IServiceProvider serviceProvider, XmlReader reader, bool inline);
    internal static string ArrayToString(T[] array);
    internal static void StringToXmlElement(XmlWriter writer, string element, string str);
    internal static void ToXml(XmlWriter writer, string arrayName, AccessControlEntryDetails[] array);
    internal static void ToXml(XmlWriter writer, string arrayName, AccessControlEntryDetails[] array, bool inline, bool allowEmptyArrays);
    internal static void ToXml(XmlWriter writer, string arrayName, TfsGitRef[] array);
    internal static void ToXml(XmlWriter writer, string arrayName, TfsGitRef[] array, bool inline, bool allowEmptyArrays);
    internal static void ToXml(XmlWriter writer, string arrayName, TfsGitRepositoryInfo[] array);
    internal static void ToXml(XmlWriter writer, string arrayName, TfsGitRepositoryInfo[] array, bool inline, bool allowEmptyArrays);
}
internal class Microsoft.TeamFoundation.Git.Client.TfsGitBranchRef : TfsGitRef {
    private bool m_isDefaultBranch;
    public bool IsDefaultBranch { get; public set; }
    public bool get_IsDefaultBranch();
    public void set_IsDefaultBranch(bool value);
    internal static TfsGitBranchRef FromXml(IServiceProvider serviceProvider, XmlReader reader);
    public virtual string ToString();
    internal virtual void ToXml(XmlWriter writer, string element);
    internal static void ToXml(XmlWriter writer, string element, TfsGitBranchRef obj);
}
internal class Microsoft.TeamFoundation.Git.Client.TfsGitRef : object {
    protected string m_name;
    protected string m_objectId;
    public string Name { get; public set; }
    public string ObjectId { get; public set; }
    public string get_Name();
    public void set_Name(string value);
    public string get_ObjectId();
    public void set_ObjectId(string value);
    internal static TfsGitRef FromXml(IServiceProvider serviceProvider, XmlReader reader);
    public virtual string ToString();
    internal virtual void ToXml(XmlWriter writer, string element);
    internal static void ToXml(XmlWriter writer, string element, TfsGitRef obj);
}
internal class Microsoft.TeamFoundation.Git.Client.TfsGitRepositoryInfo : object {
    private string m_name;
    private string m_remoteUrl;
    private Guid m_repositoryId;
    private string m_teamProjectUri;
    public string Name { get; public set; }
    public string RemoteUrl { get; public set; }
    public Guid RepositoryId { get; public set; }
    public string TeamProjectUri { get; public set; }
    public string get_Name();
    public void set_Name(string value);
    public string get_RemoteUrl();
    public void set_RemoteUrl(string value);
    public Guid get_RepositoryId();
    public void set_RepositoryId(Guid value);
    public string get_TeamProjectUri();
    public void set_TeamProjectUri(string value);
    internal static TfsGitRepositoryInfo FromXml(IServiceProvider serviceProvider, XmlReader reader);
    public virtual string ToString();
    internal void ToXml(XmlWriter writer, string element);
    internal static void ToXml(XmlWriter writer, string element, TfsGitRepositoryInfo obj);
}
internal class Microsoft.TeamFoundation.Git.Client.TfsGitTagRef : TfsGitRef {
    internal static TfsGitTagRef FromXml(IServiceProvider serviceProvider, XmlReader reader);
    public virtual string ToString();
    internal virtual void ToXml(XmlWriter writer, string element);
    internal static void ToXml(XmlWriter writer, string element, TfsGitTagRef obj);
}
internal class Microsoft.TeamFoundation.Git.Client.WebServiceLayer : object {
    private WebServiceLevel m_webServiceLevel;
    private GitIntegration m_gitIntegrationService;
    private TfsTeamProjectCollection m_projectCollection;
    private GitHttpClient m_gitHttpClient;
    public WebServiceLevel WebServiceLevel { get; }
    public WebServiceLayer(TfsTeamProjectCollection projectCollection);
    public WebServiceLevel get_WebServiceLevel();
    public void CreateTeamProjectRepository(string teamProjectName, AccessControlEntry[] permissions);
    public IList`1<GitRepository> QueryRepositories(string projectNameOrId);
    public IList`1<GitRef> QueryRefs(Guid repositoryId, string refTypeFilter);
    public IList`1<GitPullRequest> QueryPullRequests(GitPullRequestSearchCriteria searchCriteria, Nullable`1<int> maxCommentLength, Nullable`1<int> skip, Nullable`1<int> top);
    public GitPullRequest CreatePullRequest(GitPullRequest pullRequest, string repositoryId);
    public GitRef QueryBranch(Guid repositoryId, string branchName);
    private void CheckWebServiceLevel();
}
[EditorBrowsableAttribute("1")]
public enum Microsoft.TeamFoundation.Git.Client.WebServiceLevel : Enum {
    public int value__;
    public static WebServiceLevel PreGit;
    public static WebServiceLevel GitV1;
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("2")]
internal class System.Runtime.CompilerServices.RefSafetyRulesAttribute : Attribute {
    public int Version;
    public RefSafetyRulesAttribute(int );
}
