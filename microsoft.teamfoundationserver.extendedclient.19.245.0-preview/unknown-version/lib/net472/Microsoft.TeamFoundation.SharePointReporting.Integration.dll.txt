[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
internal class Microsoft.TeamFoundation.Client.Reporting.BatchHeader : TfsMessageHeader {
    [CompilerGeneratedAttribute]
private string <BatchId>k__BackingField;
    private static string c_name;
    private static string c_namespace;
    public string BatchId { get; private set; }
    public string Name { get; }
    public string Namespace { get; }
    public BatchHeader(string batchId);
    [CompilerGeneratedAttribute]
public string get_BatchId();
    [CompilerGeneratedAttribute]
private void set_BatchId(string value);
    public virtual string get_Name();
    public virtual string get_Namespace();
    protected virtual void OnWriteHeaderContents(XmlDictionaryWriter writer);
}
public class Microsoft.TeamFoundation.Client.Reporting.CatalogItem : object {
    private string m_createdBy;
    private DateTime m_creationDate;
    private string m_description;
    private DateTime m_executionDate;
    private bool m_hidden;
    private string m_iD;
    private string m_mimeType;
    private string m_modifiedBy;
    private DateTime m_modifiedDate;
    private string m_name;
    private string m_path;
    private int m_size;
    private ItemTypeEnum m_type;
    private string m_virtualPath;
    public string CreatedBy { get; public set; }
    public DateTime CreationDate { get; public set; }
    public string Description { get; public set; }
    public DateTime ExecutionDate { get; public set; }
    public bool Hidden { get; public set; }
    public string ID { get; public set; }
    public string MimeType { get; public set; }
    public string ModifiedBy { get; public set; }
    public DateTime ModifiedDate { get; public set; }
    public string Name { get; public set; }
    public string Path { get; public set; }
    public int Size { get; public set; }
    public ItemTypeEnum Type { get; public set; }
    public string VirtualPath { get; public set; }
    public string get_CreatedBy();
    public void set_CreatedBy(string value);
    public DateTime get_CreationDate();
    public void set_CreationDate(DateTime value);
    public string get_Description();
    public void set_Description(string value);
    public DateTime get_ExecutionDate();
    public void set_ExecutionDate(DateTime value);
    public bool get_Hidden();
    public void set_Hidden(bool value);
    public string get_ID();
    public void set_ID(string value);
    public string get_MimeType();
    public void set_MimeType(string value);
    public string get_ModifiedBy();
    public void set_ModifiedBy(string value);
    public DateTime get_ModifiedDate();
    public void set_ModifiedDate(DateTime value);
    public string get_Name();
    public void set_Name(string value);
    public string get_Path();
    public void set_Path(string value);
    public int get_Size();
    public void set_Size(int value);
    public ItemTypeEnum get_Type();
    public void set_Type(ItemTypeEnum value);
    public string get_VirtualPath();
    public void set_VirtualPath(string value);
    internal static CatalogItem FromXml(IServiceProvider serviceProvider, XmlReader reader);
    public virtual string ToString();
    internal void ToXml(XmlWriter writer, string element);
    internal static void ToXml(XmlWriter writer, string element, CatalogItem obj);
}
public enum Microsoft.TeamFoundation.Client.Reporting.ConditionEnum : Enum {
    public int value__;
    public static ConditionEnum Contains;
    public static ConditionEnum Equals;
}
public enum Microsoft.TeamFoundation.Client.Reporting.CredentialRetrievalEnum : Enum {
    public int value__;
    public static CredentialRetrievalEnum Integrated;
    public static CredentialRetrievalEnum None;
    public static CredentialRetrievalEnum Prompt;
    public static CredentialRetrievalEnum Store;
}
public class Microsoft.TeamFoundation.Client.Reporting.DataSource : object {
    private DataSourceDefinitionOrReference m_item;
    private string m_name;
    public DataSourceDefinitionOrReference Item { get; public set; }
    public string Name { get; public set; }
    public DataSourceDefinitionOrReference get_Item();
    public void set_Item(DataSourceDefinitionOrReference value);
    public string get_Name();
    public void set_Name(string value);
    internal static DataSource FromXml(IServiceProvider serviceProvider, XmlReader reader);
    public virtual string ToString();
    internal void ToXml(XmlWriter writer, string element);
    internal static void ToXml(XmlWriter writer, string element, DataSource obj);
}
public class Microsoft.TeamFoundation.Client.Reporting.DataSourceCredentials : object {
    private string m_dataSourceName;
    private string m_password;
    private string m_userName;
    public string DataSourceName { get; public set; }
    public string Password { get; public set; }
    public string UserName { get; public set; }
    public string get_DataSourceName();
    public void set_DataSourceName(string value);
    public string get_Password();
    public void set_Password(string value);
    public string get_UserName();
    public void set_UserName(string value);
    internal static DataSourceCredentials FromXml(IServiceProvider serviceProvider, XmlReader reader);
    public virtual string ToString();
    internal void ToXml(XmlWriter writer, string element);
    internal static void ToXml(XmlWriter writer, string element, DataSourceCredentials obj);
}
public class Microsoft.TeamFoundation.Client.Reporting.DataSourceDefinition : DataSourceDefinitionOrReference {
    private string m_connectString;
    private CredentialRetrievalEnum m_credentialRetrieval;
    private bool m_enabled;
    private string m_extension;
    private Nullable`1<bool> m_impersonateUser;
    private bool m_originalConnectStringExpressionBased;
    private string m_password;
    private string m_prompt;
    private bool m_useOriginalConnectString;
    private string m_userName;
    private bool m_windowsCredentials;
    public string ConnectString { get; public set; }
    public CredentialRetrievalEnum CredentialRetrieval { get; public set; }
    public bool Enabled { get; public set; }
    public string Extension { get; public set; }
    public bool ImpersonateUser { get; public set; }
    public bool OriginalConnectStringExpressionBased { get; public set; }
    public string Password { get; public set; }
    public string Prompt { get; public set; }
    public bool UseOriginalConnectString { get; public set; }
    public string UserName { get; public set; }
    public bool WindowsCredentials { get; public set; }
    public string get_ConnectString();
    public void set_ConnectString(string value);
    public CredentialRetrievalEnum get_CredentialRetrieval();
    public void set_CredentialRetrieval(CredentialRetrievalEnum value);
    public bool get_Enabled();
    public void set_Enabled(bool value);
    public string get_Extension();
    public void set_Extension(string value);
    public bool get_ImpersonateUser();
    public void set_ImpersonateUser(bool value);
    public bool get_OriginalConnectStringExpressionBased();
    public void set_OriginalConnectStringExpressionBased(bool value);
    public string get_Password();
    public void set_Password(string value);
    public string get_Prompt();
    public void set_Prompt(string value);
    public bool get_UseOriginalConnectString();
    public void set_UseOriginalConnectString(bool value);
    public string get_UserName();
    public void set_UserName(string value);
    public bool get_WindowsCredentials();
    public void set_WindowsCredentials(bool value);
    internal static DataSourceDefinition FromXml(IServiceProvider serviceProvider, XmlReader reader);
    public virtual string ToString();
    internal virtual void ToXml(XmlWriter writer, string element);
    internal static void ToXml(XmlWriter writer, string element, DataSourceDefinition obj);
}
public class Microsoft.TeamFoundation.Client.Reporting.DataSourceDefinitionOrReference : object {
    internal static DataSourceDefinitionOrReference FromXml(IServiceProvider serviceProvider, XmlReader reader);
    public virtual string ToString();
    internal virtual void ToXml(XmlWriter writer, string element);
    internal static void ToXml(XmlWriter writer, string element, DataSourceDefinitionOrReference obj);
}
public class Microsoft.TeamFoundation.Client.Reporting.DataSourceReference : DataSourceDefinitionOrReference {
    private string m_reference;
    public string Reference { get; public set; }
    public string get_Reference();
    public void set_Reference(string value);
    internal static DataSourceReference FromXml(IServiceProvider serviceProvider, XmlReader reader);
    public virtual string ToString();
    internal virtual void ToXml(XmlWriter writer, string element);
    internal static void ToXml(XmlWriter writer, string element, DataSourceReference obj);
}
public class Microsoft.TeamFoundation.Client.Reporting.ExpirationDefinition : object {
    public virtual string ToString();
    internal virtual void ToXml(XmlWriter writer, string element);
    internal static void ToXml(XmlWriter writer, string element, ExpirationDefinition obj);
}
internal static class Microsoft.TeamFoundation.Client.Reporting.Helper : object {
    private static CatalogItem[] m_zeroLengthArrayOfCatalogItem;
    private static DataSource[] m_zeroLengthArrayOfDataSource;
    private static DataSourceCredentials[] m_zeroLengthArrayOfDataSourceCredentials;
    private static ParameterValue[] m_zeroLengthArrayOfParameterValue;
    private static ParameterValueOrFieldReference[] m_zeroLengthArrayOfParameterValueOrFieldReference;
    private static Policy[] m_zeroLengthArrayOfPolicy;
    private static Property[] m_zeroLengthArrayOfProperty;
    private static ReportParameter[] m_zeroLengthArrayOfReportParameter;
    private static Role[] m_zeroLengthArrayOfRole;
    private static SearchCondition[] m_zeroLengthArrayOfSearchCondition;
    private static String[] m_zeroLengthArrayOfString;
    private static Subscription[] m_zeroLengthArrayOfSubscription;
    private static Task[] m_zeroLengthArrayOfTask;
    private static ValidValue[] m_zeroLengthArrayOfValidValue;
    private static Warning[] m_zeroLengthArrayOfWarning;
    internal static CatalogItem[] ZeroLengthArrayOfCatalogItem { get; }
    internal static DataSource[] ZeroLengthArrayOfDataSource { get; }
    internal static DataSourceCredentials[] ZeroLengthArrayOfDataSourceCredentials { get; }
    internal static ParameterValue[] ZeroLengthArrayOfParameterValue { get; }
    internal static ParameterValueOrFieldReference[] ZeroLengthArrayOfParameterValueOrFieldReference { get; }
    internal static Policy[] ZeroLengthArrayOfPolicy { get; }
    internal static Property[] ZeroLengthArrayOfProperty { get; }
    internal static ReportParameter[] ZeroLengthArrayOfReportParameter { get; }
    internal static Role[] ZeroLengthArrayOfRole { get; }
    internal static SearchCondition[] ZeroLengthArrayOfSearchCondition { get; }
    internal static String[] ZeroLengthArrayOfString { get; }
    internal static Subscription[] ZeroLengthArrayOfSubscription { get; }
    internal static Task[] ZeroLengthArrayOfTask { get; }
    internal static ValidValue[] ZeroLengthArrayOfValidValue { get; }
    internal static Warning[] ZeroLengthArrayOfWarning { get; }
    internal static CatalogItem[] get_ZeroLengthArrayOfCatalogItem();
    internal static DataSource[] get_ZeroLengthArrayOfDataSource();
    internal static DataSourceCredentials[] get_ZeroLengthArrayOfDataSourceCredentials();
    internal static ParameterValue[] get_ZeroLengthArrayOfParameterValue();
    internal static ParameterValueOrFieldReference[] get_ZeroLengthArrayOfParameterValueOrFieldReference();
    internal static Policy[] get_ZeroLengthArrayOfPolicy();
    internal static Property[] get_ZeroLengthArrayOfProperty();
    internal static ReportParameter[] get_ZeroLengthArrayOfReportParameter();
    internal static Role[] get_ZeroLengthArrayOfRole();
    internal static SearchCondition[] get_ZeroLengthArrayOfSearchCondition();
    internal static String[] get_ZeroLengthArrayOfString();
    internal static Subscription[] get_ZeroLengthArrayOfSubscription();
    internal static Task[] get_ZeroLengthArrayOfTask();
    internal static ValidValue[] get_ZeroLengthArrayOfValidValue();
    internal static Warning[] get_ZeroLengthArrayOfWarning();
    internal static CatalogItem[] ArrayOfCatalogItemFromXml(IServiceProvider serviceProvider, XmlReader reader, bool inline);
    internal static DataSourceCredentials[] ArrayOfDataSourceCredentialsFromXml(IServiceProvider serviceProvider, XmlReader reader, bool inline);
    internal static DataSource[] ArrayOfDataSourceFromXml(IServiceProvider serviceProvider, XmlReader reader, bool inline);
    internal static ParameterValue[] ArrayOfParameterValueFromXml(IServiceProvider serviceProvider, XmlReader reader, bool inline);
    internal static ParameterValueOrFieldReference[] ArrayOfParameterValueOrFieldReferenceFromXml(IServiceProvider serviceProvider, XmlReader reader, bool inline);
    internal static Policy[] ArrayOfPolicyFromXml(IServiceProvider serviceProvider, XmlReader reader, bool inline);
    internal static Property[] ArrayOfPropertyFromXml(IServiceProvider serviceProvider, XmlReader reader, bool inline);
    internal static ReportParameter[] ArrayOfReportParameterFromXml(IServiceProvider serviceProvider, XmlReader reader, bool inline);
    internal static Role[] ArrayOfRoleFromXml(IServiceProvider serviceProvider, XmlReader reader, bool inline);
    internal static SearchCondition[] ArrayOfSearchConditionFromXml(IServiceProvider serviceProvider, XmlReader reader, bool inline);
    internal static String[] ArrayOfStringFromXml(XmlReader reader, bool inline);
    internal static Subscription[] ArrayOfSubscriptionFromXml(IServiceProvider serviceProvider, XmlReader reader, bool inline);
    internal static Task[] ArrayOfTaskFromXml(IServiceProvider serviceProvider, XmlReader reader, bool inline);
    internal static ValidValue[] ArrayOfValidValueFromXml(IServiceProvider serviceProvider, XmlReader reader, bool inline);
    internal static Warning[] ArrayOfWarningFromXml(IServiceProvider serviceProvider, XmlReader reader, bool inline);
    internal static string ArrayToString(T[] array);
    internal static void StringToXmlElement(XmlWriter writer, string element, string str);
    internal static void ToXml(XmlWriter writer, string arrayName, CatalogItem[] array);
    internal static void ToXml(XmlWriter writer, string arrayName, CatalogItem[] array, bool inline, bool allowEmptyArrays);
    internal static void ToXml(XmlWriter writer, string arrayName, DataSourceCredentials[] array);
    internal static void ToXml(XmlWriter writer, string arrayName, DataSourceCredentials[] array, bool inline, bool allowEmptyArrays);
    internal static void ToXml(XmlWriter writer, string arrayName, DataSource[] array);
    internal static void ToXml(XmlWriter writer, string arrayName, DataSource[] array, bool inline, bool allowEmptyArrays);
    internal static void ToXml(XmlWriter writer, string arrayName, ParameterValueOrFieldReference[] array);
    internal static void ToXml(XmlWriter writer, string arrayName, ParameterValueOrFieldReference[] array, bool inline, bool allowEmptyArrays);
    internal static void ToXml(XmlWriter writer, string arrayName, ParameterValue[] array);
    internal static void ToXml(XmlWriter writer, string arrayName, ParameterValue[] array, bool inline, bool allowEmptyArrays);
    internal static void ToXml(XmlWriter writer, string arrayName, Policy[] array);
    internal static void ToXml(XmlWriter writer, string arrayName, Policy[] array, bool inline, bool allowEmptyArrays);
    internal static void ToXml(XmlWriter writer, string arrayName, Property[] array);
    internal static void ToXml(XmlWriter writer, string arrayName, Property[] array, bool inline, bool allowEmptyArrays);
    internal static void ToXml(XmlWriter writer, string arrayName, ReportParameter[] array);
    internal static void ToXml(XmlWriter writer, string arrayName, ReportParameter[] array, bool inline, bool allowEmptyArrays);
    internal static void ToXml(XmlWriter writer, string arrayName, Role[] array);
    internal static void ToXml(XmlWriter writer, string arrayName, Role[] array, bool inline, bool allowEmptyArrays);
    internal static void ToXml(XmlWriter writer, string arrayName, SearchCondition[] array);
    internal static void ToXml(XmlWriter writer, string arrayName, SearchCondition[] array, bool inline, bool allowEmptyArrays);
    internal static void ToXml(XmlWriter writer, string arrayName, String[] array);
    internal static void ToXml(XmlWriter writer, string arrayName, String[] array, bool inline, bool allowEmptyArrays);
    internal static void ToXml(XmlWriter writer, string arrayName, Subscription[] array);
    internal static void ToXml(XmlWriter writer, string arrayName, Subscription[] array, bool inline, bool allowEmptyArrays);
    internal static void ToXml(XmlWriter writer, string arrayName, Task[] array);
    internal static void ToXml(XmlWriter writer, string arrayName, Task[] array, bool inline, bool allowEmptyArrays);
    internal static void ToXml(XmlWriter writer, string arrayName, ValidValue[] array);
    internal static void ToXml(XmlWriter writer, string arrayName, ValidValue[] array, bool inline, bool allowEmptyArrays);
    internal static void ToXml(XmlWriter writer, string arrayName, Warning[] array);
    internal static void ToXml(XmlWriter writer, string arrayName, Warning[] array, bool inline, bool allowEmptyArrays);
}
[EditorBrowsableAttribute("1")]
public interface Microsoft.TeamFoundation.Client.Reporting.IReportNode {
    public ReportNodeType Type { get; }
    public string Name { get; public set; }
    public bool HasDisplayableUrl { get; }
    public string DisplayableUrl { get; }
    public string Path { get; }
    public bool IsExpandable { get; }
    public abstract virtual ReportNodeType get_Type();
    public abstract virtual string get_Name();
    public abstract virtual void set_Name(string value);
    public abstract virtual bool get_HasDisplayableUrl();
    public abstract virtual string get_DisplayableUrl();
    public abstract virtual string get_Path();
    public abstract virtual bool get_IsExpandable();
    public abstract virtual IList GetChildren();
}
public enum Microsoft.TeamFoundation.Client.Reporting.ItemTypeEnum : Enum {
    public int value__;
    public static ItemTypeEnum DataSource;
    public static ItemTypeEnum Folder;
    public static ItemTypeEnum LinkedReport;
    public static ItemTypeEnum Model;
    public static ItemTypeEnum Report;
    public static ItemTypeEnum Resource;
    public static ItemTypeEnum Unknown;
}
public enum Microsoft.TeamFoundation.Client.Reporting.ParameterStateEnum : Enum {
    public int value__;
    public static ParameterStateEnum DynamicValuesUnavailable;
    public static ParameterStateEnum HasOutstandingDependencies;
    public static ParameterStateEnum HasValidValue;
    public static ParameterStateEnum MissingValidValue;
}
public enum Microsoft.TeamFoundation.Client.Reporting.ParameterTypeEnum : Enum {
    public int value__;
    public static ParameterTypeEnum Boolean;
    public static ParameterTypeEnum DateTime;
    public static ParameterTypeEnum Float;
    public static ParameterTypeEnum Integer;
    public static ParameterTypeEnum String;
}
public class Microsoft.TeamFoundation.Client.Reporting.ParameterValue : ParameterValueOrFieldReference {
    private string m_label;
    private string m_name;
    private string m_value;
    public string Label { get; public set; }
    public string Name { get; public set; }
    public string Value { get; public set; }
    public string get_Label();
    public void set_Label(string value);
    public string get_Name();
    public void set_Name(string value);
    public string get_Value();
    public void set_Value(string value);
    internal static ParameterValue FromXml(IServiceProvider serviceProvider, XmlReader reader);
    public virtual string ToString();
    internal virtual void ToXml(XmlWriter writer, string element);
    internal static void ToXml(XmlWriter writer, string element, ParameterValue obj);
}
public class Microsoft.TeamFoundation.Client.Reporting.ParameterValueOrFieldReference : object {
    internal static ParameterValueOrFieldReference FromXml(IServiceProvider serviceProvider, XmlReader reader);
    public virtual string ToString();
    internal virtual void ToXml(XmlWriter writer, string element);
    internal static void ToXml(XmlWriter writer, string element, ParameterValueOrFieldReference obj);
}
public class Microsoft.TeamFoundation.Client.Reporting.Policy : object {
    private string m_groupUserName;
    internal Role[] m_roles;
    public string GroupUserName { get; public set; }
    public Role[] Roles { get; public set; }
    public string get_GroupUserName();
    public void set_GroupUserName(string value);
    public Role[] get_Roles();
    public void set_Roles(Role[] value);
    internal static Policy FromXml(IServiceProvider serviceProvider, XmlReader reader);
    public virtual string ToString();
    internal void ToXml(XmlWriter writer, string element);
    internal static void ToXml(XmlWriter writer, string element, Policy obj);
}
public class Microsoft.TeamFoundation.Client.Reporting.Property : object {
    protected string m_name;
    protected string m_value;
    public string Name { get; public set; }
    public string Value { get; public set; }
    public string get_Name();
    public void set_Name(string value);
    public string get_Value();
    public void set_Value(string value);
    internal static Property FromXml(IServiceProvider serviceProvider, XmlReader reader);
    public virtual string ToString();
    internal virtual void ToXml(XmlWriter writer, string element);
    internal static void ToXml(XmlWriter writer, string element, Property obj);
}
[EditorBrowsableAttribute("1")]
public class Microsoft.TeamFoundation.Client.Reporting.Report : object {
    protected string m_name;
    protected string m_fullPath;
    protected string m_displayUrl;
    protected ReportFolder m_parent;
    protected ReportingService m_reportService;
    public string Path { get; }
    public ReportNodeType Type { get; }
    public string Name { get; public set; }
    public bool HasDisplayableUrl { get; }
    public string DisplayableUrl { get; }
    public bool IsExpandable { get; }
    public ReportingService Service { get; }
    internal Report(ReportFolder parent, ReportingService service, string name);
    public Byte[] GetReportData();
    public void SaveReportToLocation(string pathAndFileName);
    public sealed virtual string get_Path();
    public sealed virtual ReportNodeType get_Type();
    public sealed virtual string get_Name();
    public sealed virtual void set_Name(string value);
    public sealed virtual bool get_HasDisplayableUrl();
    public sealed virtual string get_DisplayableUrl();
    public sealed virtual bool get_IsExpandable();
    public sealed virtual IList GetChildren();
    public ReportingService get_Service();
}
internal class Microsoft.TeamFoundation.Client.Reporting.ReportCreationException : TeamFoundationServerException {
    public ReportCreationException(string failureMessage);
    public ReportCreationException(string message, Exception innerException);
    protected ReportCreationException(SerializationInfo info, StreamingContext context);
}
[EditorBrowsableAttribute("1")]
public class Microsoft.TeamFoundation.Client.Reporting.ReportData : object {
    private string m_reportPath;
    private Byte[] m_data;
    private DataSource[] m_dataSources;
    private ReportParameter[] m_parameters;
    public string Name { get; }
    public DataSource[] DataSources { get; public set; }
    public ReportParameter[] Parameters { get; public set; }
    public Byte[] Data { get; public set; }
    public ReportData(string reportPath);
    public string get_Name();
    public DataSource[] get_DataSources();
    public void set_DataSources(DataSource[] value);
    public ReportParameter[] get_Parameters();
    public void set_Parameters(ReportParameter[] value);
    public Byte[] get_Data();
    public void set_Data(Byte[] value);
}
internal class Microsoft.TeamFoundation.Client.Reporting.ReportDownloadException : TeamFoundationServerException {
    public ReportDownloadException(string errorMsg, Exception inner);
    public ReportDownloadException(string failureMessage);
    protected ReportDownloadException(SerializationInfo info, StreamingContext context);
}
[EditorBrowsableAttribute("1")]
public class Microsoft.TeamFoundation.Client.Reporting.ReportFolder : object {
    private string m_name;
    private string m_fullPath;
    private List`1<Report> m_reports;
    private List`1<ReportFolder> m_subfolders;
    private ReportFolder m_parent;
    private ReportingService m_reportService;
    public ReportNodeType Type { get; }
    public string Name { get; public set; }
    public string Path { get; }
    public bool HasDisplayableUrl { get; }
    public string DisplayableUrl { get; }
    public bool IsExpandable { get; }
    public int ChildCount { get; }
    public IList Subfolders { get; }
    public IList Reports { get; }
    public ReportFolder(string pathFromReportRoot, ReportingService reportService);
    protected ReportFolder(ReportFolder parent, ReportingService service, string name);
    private void PopulateReportStructure(string pathFromReportRoot);
    public ReportFolder GetSubfolder(string name);
    public Report GetReport(string reportName);
    public ReportFolder CreateSubfolder(string subfolderName);
    public Report CreateReport(string fullPath, string reportName, bool overwrite);
    public Report CreateReport(string reportName, Byte[] reportDefinition, bool overwrite);
    public Report CreateReport(string reportName, Byte[] reportDefinition, bool overwrite, DataSource[] dataSourceSet, ReportParameter[] reportParams);
    public Report CreateReport(string fullPath, string reportName, bool overwrite, DataSource[] dataSourceSet, ReportParameter[] reportParams);
    public sealed virtual ReportNodeType get_Type();
    public sealed virtual string get_Name();
    public sealed virtual void set_Name(string value);
    public sealed virtual string get_Path();
    public sealed virtual bool get_HasDisplayableUrl();
    public sealed virtual string get_DisplayableUrl();
    public sealed virtual bool get_IsExpandable();
    public int get_ChildCount();
    public sealed virtual IList GetChildren();
    public IList get_Subfolders();
    public IList get_Reports();
    protected void LoadSubFolderStructure();
    protected static String[] GetRelativePath(String[] tokenizedShallowPath, string deepPath);
}
internal class Microsoft.TeamFoundation.Client.Reporting.ReportFolderCreationException : TeamFoundationServerException {
    public ReportFolderCreationException(string failureMessage);
    public ReportFolderCreationException(string message, Exception innerException);
    protected ReportFolderCreationException(SerializationInfo info, StreamingContext context);
}
[EditorBrowsableAttribute("1")]
public static class Microsoft.TeamFoundation.Client.Reporting.ReportingOperations : object {
    public static string ExecuteReportDefinition;
    public static string OperCancelJobs;
    public static string OperCreateAnySubscription;
    public static string OperCreateDatasource;
    public static string OperCreateFolder;
    public static string OperCreateLink;
    public static string OperCreateModel;
    public static string OperCreateReport;
    public static string OperCreateResource;
    public static string OperCreateRoles;
    public static string OperCreateSchedules;
    public static string OperCreateSnapshot;
    public static string OperCreateSubscription;
    public static string OperDelete;
    public static string OperDeleteAnySubscription;
    public static string OperDeleteHistory;
    public static string OperDeleteRoles;
    public static string OperDeleteSchedules;
    public static string OperDeleteSubscription;
    public static string OperExecute;
    public static string OperExecuteAndView;
    public static string OperGenerateEvents;
    public static string OperListHistory;
    public static string OperListJobs;
    public static string OperManageSharedSchedules;
    public static string OperReadAnySubscription;
    public static string OperReadAuthorizationPolicy;
    public static string OperReadContent;
    public static string OperReadDatasources;
    public static string OperReadModelItemSecurityPolicies;
    public static string OperReadParameters;
    public static string OperReadPolicy;
    public static string OperReadProperties;
    public static string OperReadReportDefinition;
    public static string OperReadRoleProperties;
    public static string OperReadSchedules;
    public static string OperReadSubscription;
    public static string OperReadSystemProperties;
    public static string OperReadSystemSecurityPolicy;
    public static string OperUpdateAnySubscription;
    public static string OperUpdateContent;
    public static string OperUpdateDatasources;
    public static string OperUpdateDeleteAuthorizationPolicy;
    public static string OperUpdateModelItemSecurityPolicies;
    public static string OperUpdateParameters;
    public static string OperUpdatePolicy;
    public static string OperUpdateProperties;
    public static string OperUpdateReportDefinition;
    public static string OperUpdateRoleProperties;
    public static string OperUpdateSchedules;
    public static string OperUpdateSubscription;
    public static string OperUpdateSystemProperties;
    public static string OperUpdateSystemSecurityPolicy;
}
[ComVisibleAttribute("False")]
[EditorBrowsableAttribute("1")]
public class Microsoft.TeamFoundation.Client.Reporting.ReportingService : TfsHttpClientBase {
    [CompilerGeneratedAttribute]
private ServerInfo <ServerInfo>k__BackingField;
    [CompilerGeneratedAttribute]
private TfsConnection <Connection>k__BackingField;
    private Uri m_url;
    protected string ComponentName { get; }
    public ServerInfo ServerInfo { get; private set; }
    public TfsConnection Connection { get; private set; }
    public ReportingService(Uri serviceLocation, VssCredentials credentials);
    protected virtual string get_ComponentName();
    [CompilerGeneratedAttribute]
public ServerInfo get_ServerInfo();
    [CompilerGeneratedAttribute]
private void set_ServerInfo(ServerInfo value);
    private object Invoke(TfsClientOperation operation, Object[] outputs);
    public ReportingService CreateBatch();
    public void CreateBatch(String& BatchID);
    public void CreateDataSource(string DataSource, string Parent, bool Overwrite, DataSourceDefinition Definition, Property[] Properties);
    public void CreateFolder(string Folder, string Parent, Property[] Properties);
    public void CreateReport(string Report, string Parent, bool Overwrite, Byte[] Definition, Property[] Properties, Warning[]& Warnings);
    public void CreateRole(string Name, string Description, Task[] Tasks);
    public void DeleteItem(string Item);
    public void DeleteRole(string Name);
    public void ExecuteBatch();
    public void GetDataSourceContents(string DataSource, DataSourceDefinition& Definition);
    public void GetItemDataSources(string Item, DataSource[]& DataSources);
    public void GetItemType(string Item, ItemTypeEnum& Type);
    public void GetPermissions(string Item, String[]& Permissions);
    public void GetPolicies(string Item, Policy[]& Policies, Boolean& InheritParent);
    public void GetReportDefinition(string Report, Byte[]& Definition);
    public void GetReportParameters(string Report, string HistoryID, bool ForRendering, ParameterValue[] Values, DataSourceCredentials[] Credentials, ReportParameter[]& Parameters);
    public void GetRoleProperties(string Name, Task[]& Tasks, String& Description);
    public void GetSystemPermissions(String[]& Permissions);
    public void ListChildren(string Item, bool Recursive, CatalogItem[]& CatalogItems);
    public void ListRoles(SecurityScopeEnum SecurityScope, Role[]& Roles);
    public String[] ListSecureMethods();
    public void MoveItem(string Item, string Target);
    public void SetCacheOptions(string Report, bool CacheReport, ExpirationDefinition Expiration);
    public void SetDataSourceContents(string DataSource, DataSourceDefinition Definition);
    public void SetItemDataSources(string Item, DataSource[] DataSources);
    public void SetPolicies(string Item, Policy[] Policies);
    public void SetReportParameters(string Report, ReportParameter[] Parameters);
    public void SetRoleProperties(string Name, string Description, Task[] Tasks);
    [CompilerGeneratedAttribute]
public TfsConnection get_Connection();
    [CompilerGeneratedAttribute]
private void set_Connection(TfsConnection value);
    private sealed virtual override void Microsoft.TeamFoundation.Client.ITfsConnectionObject.Initialize(TfsConnection server);
    protected virtual Uri GetServiceLocation();
}
[ComVisibleAttribute("False")]
[EditorBrowsableAttribute("1")]
public class Microsoft.TeamFoundation.Client.Reporting.ReportingServiceException : TeamFoundationServerException {
    public ReportingServiceException(string errorMsg, Exception inner);
    public ReportingServiceException(string failureMessage);
    protected ReportingServiceException(SerializationInfo info, StreamingContext context);
}
internal static class Microsoft.TeamFoundation.Client.Reporting.ReportingTaskPermissions : object {
    public static String[] ManageFolders;
    public static String[] ManageReports_OnFolders;
    public static String[] ViewDataSources;
    private static ReportingTaskPermissions();
}
[EditorBrowsableAttribute("1")]
public static class Microsoft.TeamFoundation.Client.Reporting.ReportingTasks : object {
    public static ReadOnlyCollection`1<string> BrowserTasks;
    public static ReadOnlyCollection`1<string> ContentManagerTasks;
    public static ReadOnlyCollection`1<string> MyReportsTasks;
    public static ReadOnlyCollection`1<string> PublisherTasks;
    public static ReadOnlyCollection`1<string> ReportBuilderTasks;
    public static string ConsumeReports;
    public static string CreateLinkedReports;
    public static string ExecuteReportDefinitions;
    public static string GenerateEvents;
    public static string ManageAllSubscriptions;
    public static string ManageDataSources;
    public static string ManageFolders;
    public static string ManageIndividualSubscriptions;
    public static string ManageJobs;
    public static string ManageModels;
    public static string ManageReportHistory;
    public static string ManageReportServerProperties;
    public static string ManageReportServerSecurity;
    public static string ManageReports;
    public static string ManageResources;
    public static string ManageRoles;
    public static string ManageSharedSchedules;
    public static string SetSecurityForIndividualItems;
    public static string ViewDataSources;
    public static string ViewFolders;
    public static string ViewModelItems;
    public static string ViewModels;
    public static string ViewReportServerProperties;
    public static string ViewReports;
    public static string ViewResources;
    public static string ViewSharedSchedules;
    private static ReportingTasks();
}
[EditorBrowsableAttribute("1")]
public class Microsoft.TeamFoundation.Client.Reporting.ReportingUploader : object {
    private ReportingService proxy;
    private ReportingUploaderData data;
    private static int c_retryCount;
    private static int c_retryDelay;
    private static string c_templateFileName;
    [CompilerGeneratedAttribute]
private ReportingUploaderMessageHandler MessageLogged;
    public ReportingUploader(ReportingService proxy, ReportingUploaderData data);
    [CompilerGeneratedAttribute]
public void add_MessageLogged(ReportingUploaderMessageHandler value);
    [CompilerGeneratedAttribute]
public void remove_MessageLogged(ReportingUploaderMessageHandler value);
    public void Validate();
    public static void Validate(XmlNode manifest, string sourceFolder);
    public static void UploadReportsFromTemplateFolder(ReportingUploaderProjectData projectData, string templateName, bool force, ReportingUploaderMessageHandler messageHandler);
    private static XmlNodeList LoadReportingTasks(string templateFolder, FileInfo processTemplateFile);
    private static string DownloadUnzippedTemplate(TfsTeamProjectCollection tpc, string templateName, ReportingUploaderMessageHandler messageHandler);
    private void ValidateProjectFolder();
    public void Run();
    private void HandleCreateSite(XmlNode node);
    private void HandleCreateFolders(XmlNode node);
    private DataSource ReadDataSourceData(XmlNode node);
    private DataSource[] GetDataSources(XmlNode report);
    private Property[] GetReportProperties(XmlNode report);
    private ReportParameter[] GetReportParameters(XmlNode report);
    private void UploadReport(XmlNode report);
    private void LogUploadReportWarnings(bool includeDataSourceNotPublishedMessages, Warning[] warnings);
    private void HandleCreateReports(XmlNode node);
    private void HandleCreateDataSources(XmlNode node);
    private void LogEvent(string message);
}
[EditorBrowsableAttribute("1")]
public class Microsoft.TeamFoundation.Client.Reporting.ReportingUploaderData : object {
    private XmlNode manifest;
    private string sourceFolder;
    private string targetReportFolder;
    private bool allowTargetFolderToExist;
    private bool forceUpdate;
    private ReportingUploaderProjectData projectData;
    [CompilerGeneratedAttribute]
private bool <ValidateReportingConfigured>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ValidateProjectItemAlreadyExists>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsCreateNewProject>k__BackingField;
    public bool ValidateReportingConfigured { get; public set; }
    public bool ValidateProjectItemAlreadyExists { get; public set; }
    public bool IsCreateNewProject { get; public set; }
    public XmlNode Manifest { get; }
    public string SourceFolder { get; }
    public string TargetReportFolder { get; }
    public bool AllowTargetFolderToExist { get; }
    public bool ForceUpdate { get; }
    public ReportingUploaderProjectData ProjectData { get; }
    public ReportingUploaderData(XmlNode manifest, string sourceFolder, string targetReportFolder);
    public ReportingUploaderData(XmlNode manifest, string sourceFolder, string targetReportFolder, bool allowTargetFolderToExist, bool forceUpdate);
    public ReportingUploaderData(XmlNode manifest, string sourceFolder, ReportingUploaderProjectData projectData);
    public ReportingUploaderData(XmlNode manifest, string sourceFolder, ReportingUploaderProjectData projectData, bool allowTargetFolderToExist, bool forceUpdate);
    [CompilerGeneratedAttribute]
public void set_ValidateReportingConfigured(bool value);
    [CompilerGeneratedAttribute]
public bool get_ValidateReportingConfigured();
    [CompilerGeneratedAttribute]
public void set_ValidateProjectItemAlreadyExists(bool value);
    [CompilerGeneratedAttribute]
public bool get_ValidateProjectItemAlreadyExists();
    [CompilerGeneratedAttribute]
public void set_IsCreateNewProject(bool value);
    [CompilerGeneratedAttribute]
public bool get_IsCreateNewProject();
    public XmlNode get_Manifest();
    public string get_SourceFolder();
    public string get_TargetReportFolder();
    public bool get_AllowTargetFolderToExist();
    public bool get_ForceUpdate();
    public ReportingUploaderProjectData get_ProjectData();
}
internal class Microsoft.TeamFoundation.Client.Reporting.ReportingUploaderException : TeamFoundationServerException {
    public ReportingUploaderException(string errorMsg, Exception inner);
    public ReportingUploaderException(string failureMessage);
    protected ReportingUploaderException(SerializationInfo info, StreamingContext context);
}
[EditorBrowsableAttribute("1")]
public class Microsoft.TeamFoundation.Client.Reporting.ReportingUploaderMessageHandler : MulticastDelegate {
    public ReportingUploaderMessageHandler(object object, IntPtr method);
    public virtual void Invoke(string message);
    public virtual IAsyncResult BeginInvoke(string message, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
[EditorBrowsableAttribute("1")]
public class Microsoft.TeamFoundation.Client.Reporting.ReportingUploaderProjectData : object {
    private TfsTeamProjectCollection server;
    private string projectName;
    private string projectUri;
    public TfsTeamProjectCollection Server { get; }
    public string ProjectName { get; }
    public string ProjectUri { get; }
    public ReportingUploaderProjectData(TfsTeamProjectCollection server, string projectName, string projectUri);
    public TfsTeamProjectCollection get_Server();
    public string get_ProjectName();
    public string get_ProjectUri();
}
[EditorBrowsableAttribute("1")]
public static class Microsoft.TeamFoundation.Client.Reporting.ReportingUtilities : object {
    private static int MaxPathLength;
    private static string InvalidPathCharacters;
    private static Char[] InvalidNameCharacters;
    private static ReportingUtilities();
    public static ReportingService CreateReportingServiceProxy(TfsConnection tfs, Uri reportWebServiceUri);
    public static ReportingService CreateReportingServiceProxy(ICredentials credentials, Uri reportServerLocation);
    public static ReportingService CreateReportingServiceProxy(Uri fullyQualifiedServiceUri, ICredentials credentials);
    public static bool IsReportingConfigured(TfsTeamProjectCollection tpc);
    public static bool IsReportingConfigured(TfsTeamProjectCollection tpc, Uri projectUri);
    public static bool IsReportingCubeConfigured(TfsTeamProjectCollection tpc, String& server, String& database, String& connectionStr);
    public static Uri GetReportServiceUri(TfsTeamProjectCollection tpc);
    public static string GetBaseProjectCollectionPath(TfsTeamProjectCollection tpc);
    public static string GetBaseProjectPath(TfsTeamProjectCollection tpc, string projectUri);
    public static Uri GetReportSiteUri(TfsTeamProjectCollection tpc, string projectUri);
    public static Uri GetReportManagerUri(TfsTeamProjectCollection tpc);
    public static Uri RemoveKnownWebServicePaths(Uri input);
    public static string FormatReportManagerPath(string reportManagerUrl, string itemPath);
    public static string FormatReportViewerPath(string reportWebServiceUrl, string itemPath, bool showToolbar);
    public static void CopyFolder(ReportingService proxy, string sourceFolder, string newFolderName, string targetFolder);
    public static ReportData GetReport(ReportingService proxy, string report);
    public static void CreateReport(ReportingService proxy, string targetFolder, string reportName, ReportData report);
    public static void CopyReport(ReportingService proxy, string source, string targetName, string targetFolder);
    public static string GetUniqueItemPath(ReportingService rs, string basePath);
    public static bool ItemExists(ReportingService proxy, string itemPath);
    public static bool FolderExists(ReportingService proxy, string folderPath);
    public static bool ItemExistsInFolder(ReportingService proxy, string folderPath);
    public static void CreateFolder(ReportingService proxy, string folderPath);
    public static void EnsureFolderExists(ReportingService proxy, string folderPath);
    public static void CreateFolder(ReportingService proxy, string folderName, string targetFolder);
    public static void BatchCreateFolders(ReportingService proxy, IEnumerable`1<string> folderPaths);
    public static void BatchEnsureFoldersExist(ReportingService proxy, IEnumerable`1<string> folderPaths);
    public static void DeleteItem(ReportingService proxy, string itemPath);
    public static void MoveItem(ReportingService proxy, string itemPath, string targetPath);
    public static bool IsInRole(ReportingService proxy, string itemPath, string userName, string roleName);
    public static void AddRolePolicy(ReportingService proxy, string itemPath, string userName, string roleName);
    public static bool RemoveRolePolicy(ReportingService proxy, string itemPath, string userName, string roleName);
    public static bool EnsureRoleExists(ReportingService proxy, string roleName, string roleDescription, IEnumerable`1<string> requiredTaskIds);
    public static bool EnsureRoleHasTasks(ReportingService proxy, string roleName, IEnumerable`1<string> requiredTaskIds);
    public static void CreateRole(ReportingService proxy, string roleName, string roleDescription, IEnumerable`1<string> associatedTaskIds);
    public static bool RoleExists(ReportingService proxy, string roleName);
    public static void SetRoleDescription(ReportingService proxy, string roleName, string roleDescription);
    public static void CheckCreateFolder(ReportingService proxy, string folderPath);
    public static void CheckFolderExists(ReportingService proxy, string folderPath);
    public static void CheckManageFoldersAndReports(ReportingService proxy, string folderPath);
    public static void CheckItemType(ReportingService proxy, string itemPath, ItemTypeEnum expectedType);
    public static bool HasPermissions(ReportingService proxy, string itemPath, String[] permissions);
    public static bool HasSystemPermissions(ReportingService proxy, String[] permissions);
    public static void CheckPermissions(ReportingService proxy, string itemPath, String[] requiredPermissions);
    public static void ValidateItemPath(string itemPath);
    public static bool IsValidItemName(string itemName);
    public static void CheckContainsInvalidPathChars(string path);
    public static bool ContainsInvalidPathChars(string path);
    public static string EndOfPath(string path);
    public static string GetParent(string path);
    public static string GetExistingSelfOrAncestor(ReportingService proxy, string itemPath);
    public static string CombinePath(string path1, string path2);
    public static string TryGetReportingServicesErrorMessage(SoapException exception);
    private static ReportingServiceException ConvertException(SoapException e);
}
internal class Microsoft.TeamFoundation.Client.Reporting.ReportListChildrenException : TeamFoundationServerException {
    public ReportListChildrenException(string failureMessage);
    public ReportListChildrenException(string msg, Exception e);
    protected ReportListChildrenException(SerializationInfo info, StreamingContext context);
}
[EditorBrowsableAttribute("1")]
public enum Microsoft.TeamFoundation.Client.Reporting.ReportNodeType : Enum {
    public int value__;
    public static ReportNodeType Unknown;
    public static ReportNodeType Folder;
    public static ReportNodeType Report;
}
public class Microsoft.TeamFoundation.Client.Reporting.ReportParameter : object {
    private Nullable`1<bool> m_allowBlank;
    internal String[] m_defaultValues;
    private Nullable`1<bool> m_defaultValuesQueryBased;
    internal String[] m_dependencies;
    private string m_errorMessage;
    private Nullable`1<bool> m_multiValue;
    private string m_name;
    private Nullable`1<bool> m_nullable;
    private string m_prompt;
    private Nullable`1<bool> m_promptUser;
    private Nullable`1<bool> m_queryParameter;
    private Nullable`1<ParameterStateEnum> m_state;
    private Nullable`1<ParameterTypeEnum> m_type;
    internal ValidValue[] m_validValues;
    private Nullable`1<bool> m_validValuesQueryBased;
    public Nullable`1<bool> AllowBlank { get; public set; }
    public String[] DefaultValues { get; public set; }
    public Nullable`1<bool> DefaultValuesQueryBased { get; public set; }
    public String[] Dependencies { get; public set; }
    public string ErrorMessage { get; public set; }
    public Nullable`1<bool> MultiValue { get; public set; }
    public string Name { get; public set; }
    public Nullable`1<bool> Nullable { get; public set; }
    public string Prompt { get; public set; }
    public Nullable`1<bool> PromptUser { get; public set; }
    public Nullable`1<bool> QueryParameter { get; public set; }
    public Nullable`1<ParameterStateEnum> State { get; public set; }
    public Nullable`1<ParameterTypeEnum> Type { get; public set; }
    public ValidValue[] ValidValues { get; public set; }
    public Nullable`1<bool> ValidValuesQueryBased { get; public set; }
    public Nullable`1<bool> get_AllowBlank();
    public void set_AllowBlank(Nullable`1<bool> value);
    public String[] get_DefaultValues();
    public void set_DefaultValues(String[] value);
    public Nullable`1<bool> get_DefaultValuesQueryBased();
    public void set_DefaultValuesQueryBased(Nullable`1<bool> value);
    public String[] get_Dependencies();
    public void set_Dependencies(String[] value);
    public string get_ErrorMessage();
    public void set_ErrorMessage(string value);
    public Nullable`1<bool> get_MultiValue();
    public void set_MultiValue(Nullable`1<bool> value);
    public string get_Name();
    public void set_Name(string value);
    public Nullable`1<bool> get_Nullable();
    public void set_Nullable(Nullable`1<bool> value);
    public string get_Prompt();
    public void set_Prompt(string value);
    public Nullable`1<bool> get_PromptUser();
    public void set_PromptUser(Nullable`1<bool> value);
    public Nullable`1<bool> get_QueryParameter();
    public void set_QueryParameter(Nullable`1<bool> value);
    public Nullable`1<ParameterStateEnum> get_State();
    public void set_State(Nullable`1<ParameterStateEnum> value);
    public Nullable`1<ParameterTypeEnum> get_Type();
    public void set_Type(Nullable`1<ParameterTypeEnum> value);
    public ValidValue[] get_ValidValues();
    public void set_ValidValues(ValidValue[] value);
    public Nullable`1<bool> get_ValidValuesQueryBased();
    public void set_ValidValuesQueryBased(Nullable`1<bool> value);
    internal static ReportParameter FromXml(IServiceProvider serviceProvider, XmlReader reader);
    public virtual string ToString();
    internal void ToXml(XmlWriter writer, string element);
    internal static void ToXml(XmlWriter writer, string element, ReportParameter obj);
}
public class Microsoft.TeamFoundation.Client.Reporting.Role : object {
    private string m_description;
    private string m_name;
    public string Description { get; public set; }
    public string Name { get; public set; }
    public string get_Description();
    public void set_Description(string value);
    public string get_Name();
    public void set_Name(string value);
    internal static Role FromXml(IServiceProvider serviceProvider, XmlReader reader);
    public virtual string ToString();
    internal void ToXml(XmlWriter writer, string element);
    internal static void ToXml(XmlWriter writer, string element, Role obj);
}
public class Microsoft.TeamFoundation.Client.Reporting.SearchCondition : Property {
    private ConditionEnum m_condition;
    public ConditionEnum Condition { get; public set; }
    public ConditionEnum get_Condition();
    public void set_Condition(ConditionEnum value);
    internal static SearchCondition FromXml(IServiceProvider serviceProvider, XmlReader reader);
    public virtual string ToString();
    internal virtual void ToXml(XmlWriter writer, string element);
    internal static void ToXml(XmlWriter writer, string element, SearchCondition obj);
}
public enum Microsoft.TeamFoundation.Client.Reporting.SecurityScopeEnum : Enum {
    public int value__;
    public static SecurityScopeEnum All;
    public static SecurityScopeEnum Catalog;
    public static SecurityScopeEnum Model;
    public static SecurityScopeEnum System;
}
[EditorBrowsableAttribute("1")]
public class Microsoft.TeamFoundation.Client.Reporting.ServerInfo : object {
    [CompilerGeneratedAttribute]
private string <ReportServerDateTime>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ReportServerEdition>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ReportServerVersion>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ReportServerVersionNumber>k__BackingField;
    private static string c_name;
    private static string c_namespace;
    public string ReportServerDateTime { get; private set; }
    public string ReportServerEdition { get; private set; }
    public string ReportServerVersion { get; private set; }
    public string ReportServerVersionNumber { get; private set; }
    [CompilerGeneratedAttribute]
public string get_ReportServerDateTime();
    [CompilerGeneratedAttribute]
private void set_ReportServerDateTime(string value);
    [CompilerGeneratedAttribute]
public string get_ReportServerEdition();
    [CompilerGeneratedAttribute]
private void set_ReportServerEdition(string value);
    [CompilerGeneratedAttribute]
public string get_ReportServerVersion();
    [CompilerGeneratedAttribute]
private void set_ReportServerVersion(string value);
    [CompilerGeneratedAttribute]
public string get_ReportServerVersionNumber();
    [CompilerGeneratedAttribute]
private void set_ReportServerVersionNumber(string value);
    public static ServerInfo FromHeader(IList`1<TfsMessageHeader> headers);
}
public class Microsoft.TeamFoundation.Client.Reporting.Task : object {
    private string m_description;
    private string m_name;
    private string m_taskID;
    public string Description { get; public set; }
    public string Name { get; public set; }
    public string TaskID { get; public set; }
    public string get_Description();
    public void set_Description(string value);
    public string get_Name();
    public void set_Name(string value);
    public string get_TaskID();
    public void set_TaskID(string value);
    internal static Task FromXml(IServiceProvider serviceProvider, XmlReader reader);
    public virtual string ToString();
    internal void ToXml(XmlWriter writer, string element);
    internal static void ToXml(XmlWriter writer, string element, Task obj);
}
public class Microsoft.TeamFoundation.Client.Reporting.TimeExpiration : ExpirationDefinition {
    private int m_minutes;
    public int Minutes { get; public set; }
    public int get_Minutes();
    public void set_Minutes(int value);
    internal virtual void ToXml(XmlWriter writer, string element);
}
public class Microsoft.TeamFoundation.Client.Reporting.ValidValue : object {
    private string m_label;
    private string m_value;
    public string Label { get; public set; }
    public string Value { get; public set; }
    public string get_Label();
    public void set_Label(string value);
    public string get_Value();
    public void set_Value(string value);
    internal static ValidValue FromXml(IServiceProvider serviceProvider, XmlReader reader);
    public virtual string ToString();
    internal void ToXml(XmlWriter writer, string element);
    internal static void ToXml(XmlWriter writer, string element, ValidValue obj);
}
public class Microsoft.TeamFoundation.Client.Reporting.Warning : object {
    private string m_code;
    private string m_message;
    private string m_objectName;
    private string m_objectType;
    private string m_severity;
    public string Code { get; public set; }
    public string Message { get; public set; }
    public string ObjectName { get; public set; }
    public string ObjectType { get; public set; }
    public string Severity { get; public set; }
    public string get_Code();
    public void set_Code(string value);
    public string get_Message();
    public void set_Message(string value);
    public string get_ObjectName();
    public void set_ObjectName(string value);
    public string get_ObjectType();
    public void set_ObjectType(string value);
    public string get_Severity();
    public void set_Severity(string value);
    internal static Warning FromXml(IServiceProvider serviceProvider, XmlReader reader);
    public virtual string ToString();
    internal void ToXml(XmlWriter writer, string element);
    internal static void ToXml(XmlWriter writer, string element, Warning obj);
}
public class Microsoft.TeamFoundation.Client.SharePoint._sFPUrl : ValueType {
    private bool m_isFolder;
    private DateTime m_lastModified;
    private string m_url;
    public bool IsFolder { get; public set; }
    public DateTime LastModified { get; public set; }
    public string Url { get; public set; }
    public bool get_IsFolder();
    public void set_IsFolder(bool value);
    public DateTime get_LastModified();
    public void set_LastModified(DateTime value);
    public string get_Url();
    public void set_Url(string value);
    internal static _sFPUrl FromXml(IServiceProvider serviceProvider, XmlReader reader);
    public virtual string ToString();
    internal void ToXml(XmlWriter writer, string element);
    internal static void ToXml(XmlWriter writer, string element, _sFPUrl obj);
}
public class Microsoft.TeamFoundation.Client.SharePoint._sList : ValueType {
    private bool m_allowAnonymousAccess;
    private bool m_anonymousViewListItems;
    private string m_baseTemplate;
    private string m_baseType;
    private string m_defaultViewUrl;
    private string m_description;
    private bool m_inheritedSecurity;
    private string m_internalName;
    private string m_lastModified;
    private string m_permId;
    private int m_readSecurity;
    private string m_title;
    public bool AllowAnonymousAccess { get; public set; }
    public bool AnonymousViewListItems { get; public set; }
    public string BaseTemplate { get; public set; }
    public string BaseType { get; public set; }
    public string DefaultViewUrl { get; public set; }
    public string Description { get; public set; }
    public bool InheritedSecurity { get; public set; }
    public string InternalName { get; public set; }
    public string LastModified { get; public set; }
    public string PermId { get; public set; }
    public int ReadSecurity { get; public set; }
    public string Title { get; public set; }
    public bool get_AllowAnonymousAccess();
    public void set_AllowAnonymousAccess(bool value);
    public bool get_AnonymousViewListItems();
    public void set_AnonymousViewListItems(bool value);
    public string get_BaseTemplate();
    public void set_BaseTemplate(string value);
    public string get_BaseType();
    public void set_BaseType(string value);
    public string get_DefaultViewUrl();
    public void set_DefaultViewUrl(string value);
    public string get_Description();
    public void set_Description(string value);
    public bool get_InheritedSecurity();
    public void set_InheritedSecurity(bool value);
    public string get_InternalName();
    public void set_InternalName(string value);
    public string get_LastModified();
    public void set_LastModified(string value);
    public string get_PermId();
    public void set_PermId(string value);
    public int get_ReadSecurity();
    public void set_ReadSecurity(int value);
    public string get_Title();
    public void set_Title(string value);
    internal static _sList FromXml(IServiceProvider serviceProvider, XmlReader reader);
    public virtual string ToString();
    internal void ToXml(XmlWriter writer, string element);
    internal static void ToXml(XmlWriter writer, string element, _sList obj);
}
public class Microsoft.TeamFoundation.Client.SharePoint._sListMetadata : ValueType {
    private bool m_allowAnonymousAccess;
    private bool m_anonymousViewListItems;
    private string m_author;
    private string m_baseTemplate;
    private string m_baseType;
    private string m_defaultViewUrl;
    private string m_description;
    private bool m_inheritedSecurity;
    private DateTime m_lastModified;
    private DateTime m_lastModifiedForceRecrawl;
    private string m_permissions;
    private int m_readSecurity;
    private string m_title;
    private bool m_validSecurityInfo;
    public bool AllowAnonymousAccess { get; public set; }
    public bool AnonymousViewListItems { get; public set; }
    public string Author { get; public set; }
    public string BaseTemplate { get; public set; }
    public string BaseType { get; public set; }
    public string DefaultViewUrl { get; public set; }
    public string Description { get; public set; }
    public bool InheritedSecurity { get; public set; }
    public DateTime LastModified { get; public set; }
    public DateTime LastModifiedForceRecrawl { get; public set; }
    public string Permissions { get; public set; }
    public int ReadSecurity { get; public set; }
    public string Title { get; public set; }
    public bool ValidSecurityInfo { get; public set; }
    public bool get_AllowAnonymousAccess();
    public void set_AllowAnonymousAccess(bool value);
    public bool get_AnonymousViewListItems();
    public void set_AnonymousViewListItems(bool value);
    public string get_Author();
    public void set_Author(string value);
    public string get_BaseTemplate();
    public void set_BaseTemplate(string value);
    public string get_BaseType();
    public void set_BaseType(string value);
    public string get_DefaultViewUrl();
    public void set_DefaultViewUrl(string value);
    public string get_Description();
    public void set_Description(string value);
    public bool get_InheritedSecurity();
    public void set_InheritedSecurity(bool value);
    public DateTime get_LastModified();
    public void set_LastModified(DateTime value);
    public DateTime get_LastModifiedForceRecrawl();
    public void set_LastModifiedForceRecrawl(DateTime value);
    public string get_Permissions();
    public void set_Permissions(string value);
    public int get_ReadSecurity();
    public void set_ReadSecurity(int value);
    public string get_Title();
    public void set_Title(string value);
    public bool get_ValidSecurityInfo();
    public void set_ValidSecurityInfo(bool value);
    internal static _sListMetadata FromXml(IServiceProvider serviceProvider, XmlReader reader);
    public virtual string ToString();
    internal void ToXml(XmlWriter writer, string element);
    internal static void ToXml(XmlWriter writer, string element, _sListMetadata obj);
}
public class Microsoft.TeamFoundation.Client.SharePoint._sListWithTime : ValueType {
    private string m_internalName;
    private bool m_isEmpty;
    private DateTime m_lastModified;
    public string InternalName { get; public set; }
    public bool IsEmpty { get; public set; }
    public DateTime LastModified { get; public set; }
    public string get_InternalName();
    public void set_InternalName(string value);
    public bool get_IsEmpty();
    public void set_IsEmpty(bool value);
    public DateTime get_LastModified();
    public void set_LastModified(DateTime value);
    internal static _sListWithTime FromXml(IServiceProvider serviceProvider, XmlReader reader);
    public virtual string ToString();
    internal void ToXml(XmlWriter writer, string element);
    internal static void ToXml(XmlWriter writer, string element, _sListWithTime obj);
}
public class Microsoft.TeamFoundation.Client.SharePoint._sProperty : ValueType {
    private string m_name;
    private string m_title;
    private string m_type;
    public string Name { get; public set; }
    public string Title { get; public set; }
    public string Type { get; public set; }
    public string get_Name();
    public void set_Name(string value);
    public string get_Title();
    public void set_Title(string value);
    public string get_Type();
    public void set_Type(string value);
    internal static _sProperty FromXml(IServiceProvider serviceProvider, XmlReader reader);
    public virtual string ToString();
    internal void ToXml(XmlWriter writer, string element);
    internal static void ToXml(XmlWriter writer, string element, _sProperty obj);
}
public class Microsoft.TeamFoundation.Client.SharePoint._sSiteMetadata : ValueType {
    private DateTime m_lastModified;
    private DateTime m_lastModifiedForceRecrawl;
    private string m_portalUrl;
    private bool m_smallSite;
    private string m_userProfileGUID;
    private bool m_validSecurityInfo;
    public DateTime LastModified { get; public set; }
    public DateTime LastModifiedForceRecrawl { get; public set; }
    public string PortalUrl { get; public set; }
    public bool SmallSite { get; public set; }
    public string UserProfileGUID { get; public set; }
    public bool ValidSecurityInfo { get; public set; }
    public DateTime get_LastModified();
    public void set_LastModified(DateTime value);
    public DateTime get_LastModifiedForceRecrawl();
    public void set_LastModifiedForceRecrawl(DateTime value);
    public string get_PortalUrl();
    public void set_PortalUrl(string value);
    public bool get_SmallSite();
    public void set_SmallSite(bool value);
    public string get_UserProfileGUID();
    public void set_UserProfileGUID(string value);
    public bool get_ValidSecurityInfo();
    public void set_ValidSecurityInfo(bool value);
    internal static _sSiteMetadata FromXml(IServiceProvider serviceProvider, XmlReader reader);
    public virtual string ToString();
    internal void ToXml(XmlWriter writer, string element);
    internal static void ToXml(XmlWriter writer, string element, _sSiteMetadata obj);
}
public class Microsoft.TeamFoundation.Client.SharePoint._sWebMetadata : ValueType {
    private bool m_allowAnonymousAccess;
    private bool m_anonymousViewListItems;
    private string m_author;
    private string m_categoryBucketID;
    private string m_categoryId;
    private string m_categoryIdPath;
    private string m_categoryName;
    private string m_description;
    private bool m_externalSecurity;
    private bool m_inheritedSecurity;
    private bool m_isBucketWeb;
    private UInt32 m_language;
    private DateTime m_lastModified;
    private DateTime m_lastModifiedForceRecrawl;
    private string m_noIndex;
    private string m_permissions;
    private string m_title;
    private bool m_usedInAutocat;
    private bool m_validSecurityInfo;
    private string m_webID;
    public bool AllowAnonymousAccess { get; public set; }
    public bool AnonymousViewListItems { get; public set; }
    public string Author { get; public set; }
    public string CategoryBucketID { get; public set; }
    public string CategoryId { get; public set; }
    public string CategoryIdPath { get; public set; }
    public string CategoryName { get; public set; }
    public string Description { get; public set; }
    public bool ExternalSecurity { get; public set; }
    public bool InheritedSecurity { get; public set; }
    public bool IsBucketWeb { get; public set; }
    public UInt32 Language { get; public set; }
    public DateTime LastModified { get; public set; }
    public DateTime LastModifiedForceRecrawl { get; public set; }
    public string NoIndex { get; public set; }
    public string Permissions { get; public set; }
    public string Title { get; public set; }
    public bool UsedInAutocat { get; public set; }
    public bool ValidSecurityInfo { get; public set; }
    public string WebID { get; public set; }
    public bool get_AllowAnonymousAccess();
    public void set_AllowAnonymousAccess(bool value);
    public bool get_AnonymousViewListItems();
    public void set_AnonymousViewListItems(bool value);
    public string get_Author();
    public void set_Author(string value);
    public string get_CategoryBucketID();
    public void set_CategoryBucketID(string value);
    public string get_CategoryId();
    public void set_CategoryId(string value);
    public string get_CategoryIdPath();
    public void set_CategoryIdPath(string value);
    public string get_CategoryName();
    public void set_CategoryName(string value);
    public string get_Description();
    public void set_Description(string value);
    public bool get_ExternalSecurity();
    public void set_ExternalSecurity(bool value);
    public bool get_InheritedSecurity();
    public void set_InheritedSecurity(bool value);
    public bool get_IsBucketWeb();
    public void set_IsBucketWeb(bool value);
    public UInt32 get_Language();
    public void set_Language(UInt32 value);
    public DateTime get_LastModified();
    public void set_LastModified(DateTime value);
    public DateTime get_LastModifiedForceRecrawl();
    public void set_LastModifiedForceRecrawl(DateTime value);
    public string get_NoIndex();
    public void set_NoIndex(string value);
    public string get_Permissions();
    public void set_Permissions(string value);
    public string get_Title();
    public void set_Title(string value);
    public bool get_UsedInAutocat();
    public void set_UsedInAutocat(bool value);
    public bool get_ValidSecurityInfo();
    public void set_ValidSecurityInfo(bool value);
    public string get_WebID();
    public void set_WebID(string value);
    internal static _sWebMetadata FromXml(IServiceProvider serviceProvider, XmlReader reader);
    public virtual string ToString();
    internal void ToXml(XmlWriter writer, string element);
    internal static void ToXml(XmlWriter writer, string element, _sWebMetadata obj);
}
public class Microsoft.TeamFoundation.Client.SharePoint._sWebWithTime : ValueType {
    private DateTime m_lastModified;
    private string m_url;
    public DateTime LastModified { get; public set; }
    public string Url { get; public set; }
    public DateTime get_LastModified();
    public void set_LastModified(DateTime value);
    public string get_Url();
    public void set_Url(string value);
    internal static _sWebWithTime FromXml(IServiceProvider serviceProvider, XmlReader reader);
    public virtual string ToString();
    internal void ToXml(XmlWriter writer, string element);
    internal static void ToXml(XmlWriter writer, string element, _sWebWithTime obj);
}
internal class Microsoft.TeamFoundation.Client.SharePoint.Admin : TfsHttpClientBase {
    protected string ComponentName { get; }
    public Admin(Uri serviceUrl, VssCredentials credentials);
    public string CreateSite(string Url, string Title, string Description, int Lcid, string WebTemplate, string OwnerLogin, string OwnerName, string OwnerEmail, string PortalUrl, string PortalName);
    public void DeleteSite(string Url);
    public XmlNode GetLanguages();
    public void RefreshConfigCache(Guid VirtualServerId, bool AdminGroupChanged);
    protected virtual string get_ComponentName();
}
[FlagsAttribute]
public enum Microsoft.TeamFoundation.Client.SharePoint.CheckUrlOptions : Enum {
    public int value__;
    public static CheckUrlOptions None;
    public static CheckUrlOptions LocationNotExists;
    public static CheckUrlOptions LocationExists;
    public static CheckUrlOptions IsExplicitManagedPath;
    public static CheckUrlOptions IsWildcardManagedPath;
    public static CheckUrlOptions IsSite;
    public static CheckUrlOptions IsWeb;
    public static CheckUrlOptions IsWebApplication;
    public static CheckUrlOptions IsCentralAdministration;
    public static CheckUrlOptions LocationIsValidForCreate;
    public static CheckUrlOptions LocationIsValidForDelete;
    public static CheckUrlOptions LocationIsValidParentForCreate;
    public static CheckUrlOptions PermissionsToCreate;
    public static CheckUrlOptions PermissionsToDelete;
    public static CheckUrlOptions HasTeamFoundationMapping;
    public static CheckUrlOptions LocationIsValidPerRestrictedPath;
    public static CheckUrlOptions CheckCreateSite;
    public static CheckUrlOptions CheckUseExistingSite;
    public static CheckUrlOptions CheckDeleteSite;
}
public enum Microsoft.TeamFoundation.Client.SharePoint.CreateSiteLocation : Enum {
    public int value__;
    public static CreateSiteLocation Invalid;
    public static CreateSiteLocation Admin;
    public static CreateSiteLocation Content;
}
[EditorBrowsableAttribute("1")]
public class Microsoft.TeamFoundation.Client.SharePoint.DocumentLibraryInfo : object {
    [CompilerGeneratedAttribute]
private bool <IsValid>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsHidden>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <CheckoutRequired>k__BackingField;
    private static string c_Title;
    private static string c_DefaultViewUrl;
    private static string c_WebFullUrl;
    private static string c_Id;
    private static string c_Hidden;
    private static string c_RequireCheckout;
    private static string c_PathSeparator;
    private static char c_PathSeparatorChar;
    private TfsConnection m_tfs;
    private string m_title;
    private Guid m_id;
    private string m_asciiName;
    private Uri m_sitePath;
    public string Title { get; }
    public Guid Id { get; }
    public string AsciiName { get; }
    public TfsConnection TfsServer { get; }
    public Uri SitePath { get; }
    public bool IsValid { get; private set; }
    public bool IsHidden { get; private set; }
    public bool CheckoutRequired { get; private set; }
    public static DocumentLibraryInfo FromXmlElement(TfsConnection tfs, Uri sitePath, XmlElement node);
    public string get_Title();
    public Guid get_Id();
    public string get_AsciiName();
    public TfsConnection get_TfsServer();
    public Uri get_SitePath();
    [CompilerGeneratedAttribute]
public bool get_IsValid();
    [CompilerGeneratedAttribute]
private void set_IsValid(bool value);
    [CompilerGeneratedAttribute]
public bool get_IsHidden();
    [CompilerGeneratedAttribute]
private void set_IsHidden(bool value);
    [CompilerGeneratedAttribute]
public bool get_CheckoutRequired();
    [CompilerGeneratedAttribute]
private void set_CheckoutRequired(bool value);
    private static bool TryGetBooleanAttribute(XmlElement node, string boolAttribute, Boolean& retval);
    private static bool TryGetAsciiName(TfsConnection tfs, XmlElement node, String& asciiName);
    private static bool TryGetAsciiNameFromWebFullUrl(string defaultViewUrl, string webFullUrl, String& asciiName);
    private static bool TryGetAsciiNameFromIRegistrationDelta(TfsConnection tfs, string defaultViewUrl, String& asciiName);
    private static bool TryGetAsciiNameFromTemplateUrl(string defaultViewUrl, String& asciiName);
}
public class Microsoft.TeamFoundation.Client.SharePoint.FormDigestInformation : ValueType {
    private string m_digestValue;
    private string m_libraryVersion;
    private string m_supportedSchemaVersions;
    private int m_timeoutSeconds;
    private string m_webFullUrl;
    public string DigestValue { get; public set; }
    public string LibraryVersion { get; public set; }
    public string SupportedSchemaVersions { get; public set; }
    public int TimeoutSeconds { get; public set; }
    public string WebFullUrl { get; public set; }
    public string get_DigestValue();
    public void set_DigestValue(string value);
    public string get_LibraryVersion();
    public void set_LibraryVersion(string value);
    public string get_SupportedSchemaVersions();
    public void set_SupportedSchemaVersions(string value);
    public int get_TimeoutSeconds();
    public void set_TimeoutSeconds(int value);
    public string get_WebFullUrl();
    public void set_WebFullUrl(string value);
    internal static FormDigestInformation FromXml(IServiceProvider serviceProvider, XmlReader reader);
    public virtual string ToString();
    internal void ToXml(XmlWriter writer, string element);
    internal static void ToXml(XmlWriter writer, string element, FormDigestInformation obj);
}
internal static class Microsoft.TeamFoundation.Client.SharePoint.Helper : object {
    private static String[] m_zeroLengthArrayOfString;
    private static TemplateInfo[] m_zeroLengthArrayOfTemplateInfo;
    private static _sFPUrl[] m_zeroLengthArrayOf_sFPUrl;
    private static _sList[] m_zeroLengthArrayOf_sList;
    private static _sListWithTime[] m_zeroLengthArrayOf_sListWithTime;
    private static _sProperty[] m_zeroLengthArrayOf_sProperty;
    private static _sWebWithTime[] m_zeroLengthArrayOf_sWebWithTime;
    internal static String[] ZeroLengthArrayOfString { get; }
    internal static TemplateInfo[] ZeroLengthArrayOfTemplateInfo { get; }
    internal static _sFPUrl[] ZeroLengthArrayOf_sFPUrl { get; }
    internal static _sList[] ZeroLengthArrayOf_sList { get; }
    internal static _sListWithTime[] ZeroLengthArrayOf_sListWithTime { get; }
    internal static _sProperty[] ZeroLengthArrayOf_sProperty { get; }
    internal static _sWebWithTime[] ZeroLengthArrayOf_sWebWithTime { get; }
    internal static String[] get_ZeroLengthArrayOfString();
    internal static TemplateInfo[] get_ZeroLengthArrayOfTemplateInfo();
    internal static _sFPUrl[] get_ZeroLengthArrayOf_sFPUrl();
    internal static _sList[] get_ZeroLengthArrayOf_sList();
    internal static _sListWithTime[] get_ZeroLengthArrayOf_sListWithTime();
    internal static _sProperty[] get_ZeroLengthArrayOf_sProperty();
    internal static _sWebWithTime[] get_ZeroLengthArrayOf_sWebWithTime();
    internal static String[] ArrayOfStringFromXml(XmlReader reader, bool inline);
    internal static TemplateInfo[] ArrayOfTemplateInfoFromXml(IServiceProvider serviceProvider, XmlReader reader, bool inline);
    internal static _sFPUrl[] ArrayOf_sFPUrlFromXml(IServiceProvider serviceProvider, XmlReader reader, bool inline);
    internal static _sList[] ArrayOf_sListFromXml(IServiceProvider serviceProvider, XmlReader reader, bool inline);
    internal static _sListWithTime[] ArrayOf_sListWithTimeFromXml(IServiceProvider serviceProvider, XmlReader reader, bool inline);
    internal static _sProperty[] ArrayOf_sPropertyFromXml(IServiceProvider serviceProvider, XmlReader reader, bool inline);
    internal static _sWebWithTime[] ArrayOf_sWebWithTimeFromXml(IServiceProvider serviceProvider, XmlReader reader, bool inline);
    internal static string ArrayToString(T[] array);
    internal static void StringToXmlElement(XmlWriter writer, string element, string str);
    internal static void ToXml(XmlWriter writer, string arrayName, String[] array);
    internal static void ToXml(XmlWriter writer, string arrayName, String[] array, bool inline, bool allowEmptyArrays);
    internal static void ToXml(XmlWriter writer, string arrayName, TemplateInfo[] array);
    internal static void ToXml(XmlWriter writer, string arrayName, TemplateInfo[] array, bool inline, bool allowEmptyArrays);
    internal static void ToXml(XmlWriter writer, string arrayName, _sFPUrl[] array);
    internal static void ToXml(XmlWriter writer, string arrayName, _sFPUrl[] array, bool inline, bool allowEmptyArrays);
    internal static void ToXml(XmlWriter writer, string arrayName, _sListWithTime[] array);
    internal static void ToXml(XmlWriter writer, string arrayName, _sListWithTime[] array, bool inline, bool allowEmptyArrays);
    internal static void ToXml(XmlWriter writer, string arrayName, _sList[] array);
    internal static void ToXml(XmlWriter writer, string arrayName, _sList[] array, bool inline, bool allowEmptyArrays);
    internal static void ToXml(XmlWriter writer, string arrayName, _sProperty[] array);
    internal static void ToXml(XmlWriter writer, string arrayName, _sProperty[] array, bool inline, bool allowEmptyArrays);
    internal static void ToXml(XmlWriter writer, string arrayName, _sWebWithTime[] array);
    internal static void ToXml(XmlWriter writer, string arrayName, _sWebWithTime[] array, bool inline, bool allowEmptyArrays);
}
[ComVisibleAttribute("False")]
[EditorBrowsableAttribute("1")]
public class Microsoft.TeamFoundation.Client.SharePoint.Lists : TfsHttpClientBase {
    protected string ComponentName { get; }
    public Lists(Uri serviceUrl, VssCredentials credentials);
    public string AddAttachment(string listName, string listItemID, string fileName, Byte[] attachment);
    public XmlNode AddList(string listName, string description, int templateID);
    public void DeleteAttachment(string listName, string listItemID, string url);
    public void DeleteList(string listName);
    public XmlNode GetAttachmentCollection(string listName, string listItemID);
    public XmlNode GetList(string listName);
    public XmlNode GetListAndView(string listName, string viewName);
    public XmlNode GetListCollection();
    public XmlNode GetListItemChanges(string listName, XmlNode viewFields, string since, XmlNode contains);
    public XmlNode GetListItems(string listName, string viewName, XmlNode query, XmlNode viewFields, string rowLimit, XmlNode queryOptions, string webID);
    public XmlNode UpdateList(string listName, XmlNode listProperties, XmlNode newFields, XmlNode updateFields, XmlNode deleteFields, string listVersion);
    public XmlNode UpdateListItems(string listName, XmlNode updates);
    protected virtual string get_ComponentName();
    public IAsyncResult BeginGetListItems(string listName, string viewName, XmlNode query, XmlNode viewFields, string rowLimit, XmlNode queryOptions, string webID, AsyncCallback callback, object state);
    public XmlNode EndGetListItems(IAsyncResult result);
}
public enum Microsoft.TeamFoundation.Client.SharePoint.ObjectType : Enum {
    public int value__;
    public static ObjectType ContentDatabase;
    public static ObjectType Folder;
    public static ObjectType List;
    public static ObjectType ListItem;
    public static ObjectType ListItemAttachments;
    public static ObjectType Site;
    public static ObjectType SiteCollection;
    public static ObjectType VirtualServer;
}
[EditorBrowsableAttribute("1")]
public static class Microsoft.TeamFoundation.Client.SharePoint.ProcessGuidanceHelper : object {
    public static void LaunchProcessGuidance(TfsTeamProjectCollection teamProjectCollection, string projectName, IEnumerable`1<string> paths);
    public static Uri GetProcessGuidanceUrl(TfsTeamProjectCollection teamProjectCollection, string projectName);
    public static bool IsProcessGuidanceConfigured(TfsTeamProjectCollection teamProjectCollection, string projectName);
    public static bool IsValidUrl(TfsTeamProjectCollection teamProjectCollection, string url);
    private static Uri GetProcessGuidanceUrl(TfsTeamProjectCollection teamProjectCollection, string projectName, IEnumerable`1<string> documentPaths);
}
[ComVisibleAttribute("False")]
[EditorBrowsableAttribute("1")]
public class Microsoft.TeamFoundation.Client.SharePoint.SharePointTeamFoundationIntegrationService : TfsHttpClientBase {
    protected string ComponentName { get; }
    public SharePointTeamFoundationIntegrationService(Uri serviceUrl, VssCredentials credentials);
    public SharePointTeamFoundationIntegrationService(ICredentials credentials, Uri url);
    public void ActivateFeatureById(string webApplicationUrl, string absolutePath, Guid featureId);
    public void AttachWeb(string absolutePath, Guid applicationInstanceId);
    public void CheckIsFarmAdministrator();
    public void CheckUrl(string absolutePath, CheckUrlOptions options, Guid applicationInstanceId, Guid projectCollectionId);
    public Guid CreateSite(string webApplicationUrl, string absolutePath, string title, string description, UInt32 localeId, string template, bool templateIsTitle, string ownerLogin, string ownerName, string ownerEmail, Guid applicationInstanceId, Guid projectCollectionId);
    public void DeleteMapping(string webApplicationUrl, Guid mappingId);
    public void DeleteSite(string absolutePath);
    public void DetachWeb(string absolutePath);
    public int GetCreateSiteLocation(string absolutePath);
    public string GetMappings(string webApplicationUrl);
    public string GetServiceAccount(string webApplicationUrl, Guid applicationInstanceId);
    public void GetVersion(Int32& majorVersion, Int32& minorVersion);
    public string GetWebApplicationUrl();
    public string GetWebIdentifier(string absolutePath);
    public bool IsFarmAdmin(string loginName);
    public string QueryWeb(string absolutePath, string propertyName);
    public void RegisterTeamFoundationApplicationInstance(string webApplicationUrl, string applicationInstanceUrl);
    public void SaveMapping(string webApplicationUrl, string xml);
    protected virtual string get_ComponentName();
    protected virtual Exception ConvertException(SoapException e);
    protected void HandleException(Exception e);
    private string GetDetailInfo(SoapException exception, string name);
}
internal class Microsoft.TeamFoundation.Client.SharePoint.SiteData : TfsHttpClientBase {
    protected string ComponentName { get; }
    public SiteData(Uri serviceUrl, VssCredentials credentials);
    public UInt32 GetWeb(_sWebMetadata& sWebMetadata, _sWebWithTime[]& vWebs, _sListWithTime[]& vLists, _sFPUrl[]& vFPUrls, String& strRoles, String[]& vRolesUsers, String[]& vRolesGroups);
    protected virtual string get_ComponentName();
}
internal class Microsoft.TeamFoundation.Client.SharePoint.Sites : TfsHttpClientBase {
    protected string ComponentName { get; }
    public Sites(Uri serviceUrl, VssCredentials credentials);
    public UInt32 GetSiteTemplates(UInt32 LCID, TemplateInfo[]& TemplateList);
    protected virtual string get_ComponentName();
}
public class Microsoft.TeamFoundation.Client.SharePoint.TemplateInfo : object {
    private string m_description;
    private string m_displayCategory;
    private string m_filterCategories;
    private bool m_hasProvisionClass;
    private int m_iD;
    private string m_imageUrl;
    private bool m_isCustom;
    private bool m_isHidden;
    private bool m_isRootWebOnly;
    private bool m_isSubWebOnly;
    private bool m_isUnique;
    private string m_name;
    private string m_title;
    public string Description { get; public set; }
    public string DisplayCategory { get; public set; }
    public string FilterCategories { get; public set; }
    public bool HasProvisionClass { get; public set; }
    public int ID { get; public set; }
    public string ImageUrl { get; public set; }
    public bool IsCustom { get; public set; }
    public bool IsHidden { get; public set; }
    public bool IsRootWebOnly { get; public set; }
    public bool IsSubWebOnly { get; public set; }
    public bool IsUnique { get; public set; }
    public string Name { get; public set; }
    public string Title { get; public set; }
    public string get_Description();
    public void set_Description(string value);
    public string get_DisplayCategory();
    public void set_DisplayCategory(string value);
    public string get_FilterCategories();
    public void set_FilterCategories(string value);
    public bool get_HasProvisionClass();
    public void set_HasProvisionClass(bool value);
    public int get_ID();
    public void set_ID(int value);
    public string get_ImageUrl();
    public void set_ImageUrl(string value);
    public bool get_IsCustom();
    public void set_IsCustom(bool value);
    public bool get_IsHidden();
    public void set_IsHidden(bool value);
    public bool get_IsRootWebOnly();
    public void set_IsRootWebOnly(bool value);
    public bool get_IsSubWebOnly();
    public void set_IsSubWebOnly(bool value);
    public bool get_IsUnique();
    public void set_IsUnique(bool value);
    public string get_Name();
    public void set_Name(string value);
    public string get_Title();
    public void set_Title(string value);
    internal static TemplateInfo FromXml(IServiceProvider serviceProvider, XmlReader reader);
    public virtual string ToString();
    internal void ToXml(XmlWriter writer, string element);
    internal static void ToXml(XmlWriter writer, string element, TemplateInfo obj);
}
[ComVisibleAttribute("False")]
[EditorBrowsableAttribute("1")]
public class Microsoft.TeamFoundation.Client.SharePoint.WssDataUploadException : TeamFoundationServerException {
    private string remoteFile;
    private string siteUrl;
    private string error;
    private string wssFullText;
    private UInt32 errorNo;
    public string RemoteFile { get; }
    public string SiteUrl { get; }
    public string WssError { get; }
    public UInt32 ErrorNo { get; }
    public string WssFullText { get; }
    public WssDataUploadException(string failureMessage);
    public WssDataUploadException(string message, Exception innerException);
    public WssDataUploadException(string remoteFileName, string baseSiteUrl, string wssError, UInt32 errorNo, string wssFullText);
    protected WssDataUploadException(SerializationInfo info, StreamingContext context);
    public string get_RemoteFile();
    public string get_SiteUrl();
    public string get_WssError();
    public UInt32 get_ErrorNo();
    public string get_WssFullText();
}
[EditorBrowsableAttribute("1")]
public static class Microsoft.TeamFoundation.Client.SharePoint.WssErrorCodes : object {
    public static UInt32 InvalidFileFolderName;
    public static UInt32 FileIsNotCheckedOut;
    public static UInt32 BlockedFileTypeFolder;
    public static UInt32 BlockedFileTypeFile;
    public static UInt32 InvalidUrl;
    public static UInt32 DocLibAlreadyExistsErrorCode;
    public static UInt32 FolderAlreadyExists;
    internal static UInt32 Failed;
}
[ComVisibleAttribute("False")]
[EditorBrowsableAttribute("1")]
public class Microsoft.TeamFoundation.Client.SharePoint.WssFileUploadException : TeamFoundationServerException {
    public WssFileUploadException(string failureMessage);
    public WssFileUploadException(string message, Exception innerException);
    protected WssFileUploadException(SerializationInfo info, StreamingContext context);
}
[ComVisibleAttribute("False")]
[EditorBrowsableAttribute("1")]
public class Microsoft.TeamFoundation.Client.SharePoint.WssFolderCreationException : TeamFoundationServerException {
    private string folder;
    private string baseSiteUrl;
    private string wssFullText;
    private UInt32 errorNo;
    public string Folder { get; }
    public string SiteUrl { get; }
    public string WssFullText { get; }
    public UInt32 ErrorCode { get; }
    public WssFolderCreationException(string folder, string baseSiteUrl, string wssError, UInt32 errorNo, string wssFullText);
    public WssFolderCreationException(string failureMessage);
    public WssFolderCreationException(string message, Exception innerException);
    protected WssFolderCreationException(SerializationInfo info, StreamingContext context);
    public string get_Folder();
    public string get_SiteUrl();
    public string get_WssFullText();
    public UInt32 get_ErrorCode();
}
internal enum Microsoft.TeamFoundation.Client.SharePoint.WssListType : Enum {
    public int value__;
    public static WssListType Announcements;
    public static WssListType Contacts;
    public static WssListType CustomList;
    public static WssListType CustomListInDataSourceView;
    public static WssListType DataSources;
    public static WssListType DiscussionBoard;
    public static WssListType DocumentLibrary;
    public static WssListType Events;
    public static WssListType FormLibrary;
    public static WssListType Issues;
    public static WssListType Links;
    public static WssListType PictureLibrary;
    public static WssListType Survey;
    public static WssListType Tasks;
}
[EditorBrowsableAttribute("1")]
public class Microsoft.TeamFoundation.Client.SharePoint.WssTreeNode : object {
    private string m_fullName;
    private string m_name;
    private bool m_isFolder;
    private int m_id;
    private List`1<WssTreeNode> m_children;
    public string FullName { get; }
    public string Name { get; }
    public string FolderName { get; }
    public bool IsFolder { get; }
    public int Id { get; }
    public List`1<WssTreeNode> Children { get; }
    public WssTreeNode(XmlNode node);
    public string get_FullName();
    public string get_Name();
    public string get_FolderName();
    public bool get_IsFolder();
    public int get_Id();
    public List`1<WssTreeNode> get_Children();
    private string DecodeWssString(string name);
}
[EditorBrowsableAttribute("1")]
public static class Microsoft.TeamFoundation.Client.SharePoint.WssUtilities : object {
    public static void VerifyTeamFoundationSharePointExtensions(ICredentials credentials, Uri url);
    private static void GetTeamFoundationSharePointExtensionsVersion(ICredentials credentials, Uri url, Int32& majorVersion, Int32& minorVersion);
    public static void CheckIsAlive(ICredentials credentials, Uri uri);
    private static Lists GetListsProxy(TfsConnection tfs, Uri url);
    private static Lists GetListsProxy(ICredentials credentials, Uri url);
    private static SiteData GetSiteDataProxy(ICredentials credentials, Uri url);
    private static Sites GetSitesProxy(TfsConnection tfs, Uri url);
    private static Sites GetSitesProxy(ICredentials credentials, Uri url);
    private static Admin GetWssAdminProxy(ICredentials credentials, Uri url);
    public static SharePointTeamFoundationIntegrationService GetSharePointTeamFoundationIntegrationProxy(ICredentials credentials, Uri url);
    private static VssCredentials GetTfsClientCredentials(ICredentials credentials);
    public static Uri RemoveKnownWebServicePaths(Uri input);
    public static void CheckUrl(ICredentials credentials, Uri adminUrl, Uri siteUrl, CheckUrlOptions options, Guid configurationServerId, Guid projectCollectionId);
    public static void CheckCreateSite(TfsConnection tfs, Uri adminUrl, Uri siteUrl);
    public static void CheckCreateSite(ICredentials credentials, Uri adminUrl, Uri siteUrl, Guid configurationServerId, Guid projectCollectionId);
    private static void CheckCreateSiteBackcompat(ICredentials credentials, Uri adminUrl, Uri siteUrl);
    public static bool VerifyTeamFoundationMapping(TfsConnection tfs, Uri siteUrl);
    public static bool VerifyTeamFoundationMapping(ICredentials credentials, Uri siteUrl, Guid applicationInstanceId, Guid projectCollectionId);
    public static void CheckDeleteSite(TfsConnection tfs, Uri siteUrl);
    public static void CheckDeleteSite(ICredentials credentials, Uri siteUrl);
    private static void CheckDeleteSiteBackcompat(ICredentials credentials, Uri siteUrl);
    public static Guid CreateSite(WssSiteData siteCreationData, TfsConnection tfs, Uri adminUrl);
    public static void CheckIsFarmAdministrator(ICredentials credentials, Uri adminUrl);
    public static bool IsFarmAdmin(Uri adminUrl, string loginName);
    private static CreateSiteLocation GetCreateSiteLocation(ICredentials credentials, Uri siteUrl);
    private static void CheckPermissionsForCreateSiteLocation(ICredentials credentials, Uri adminUrl, CreateSiteLocation location);
    public static Guid CreateSite(ICredentials credentials, Uri adminUrl, WssSiteData siteCreationData, Guid configurationServerId, Guid projectCollectionId);
    private static Guid CreateSiteBackcompat(ICredentials credentials, Uri adminUrl, WssSiteData siteCreationData);
    public static bool TryDeleteSite(TfsConnection tfs, Uri siteUrl, Uri adminUrl);
    public static bool TryDeleteSite(ICredentials credentials, Uri siteUrl);
    private static bool TryDeleteSiteBackcompat(ICredentials credentials, Uri adminUrl, Uri siteUrl);
    public static void DeleteSite(ICredentials credentials, Uri siteUrl);
    private static Guid GetTfsApplicationInstanceId(TfsConnection tfs);
    private static Guid GetTfsTeamProjectCollectionId(TfsConnection tfs);
    public static List`1<int> GetLanguageIdsBackcompat(ICredentials credentials, Uri adminUrl);
    public static bool TryGetSiteTemplatesBackcompat(TfsConnection tfs, Uri url, int lcid, TemplateInfo[]& templates, String& fullServiceUrl, Exception& exception);
    public static _sWebMetadata GetWebMetadata(ICredentials credentials, Uri portalUri);
    public static Guid GetWebIdentifier(ICredentials credentials, Uri url);
    public static void ActivateSiteFeatureById(ICredentials credentials, Uri siteUrl, Guid featureId);
    public static void ActivateWebApplicationFeatureById(ICredentials credentials, Uri adminUrl, Uri siteUrl, Guid featureId);
    public static void CreateFolder(DocumentLibraryInfo docLibInfo, string folderUrl);
    public static void UploadFile(string localFile, string remoteFullName, string siteUrl, TfsConnection tfs);
    private static string EscapeFileName(string fileName);
    private static void UploadData(Byte[] fileData, string remoteFullName, string siteUrl, TfsConnection tfs);
    public static void CheckInDocument(string remoteFullName, string siteUrl, TfsConnection tfs);
    public static void CheckOutDocument(string remoteFullName, string siteUrl, bool force, int timeout, TfsConnection tfs);
    private static void CopyFileInternal(string sourceUrl, string targetFullName, string baseSiteUrl, TfsConnection tfs);
    public static void CopyFile(string sourceUrl, string targetFolder, string targetName, string siteUrl, TfsConnection tfs);
    private static XmlNodeList FetchList(Lists listProxy, WssListType type);
    private static List`1<string> FetchListTitles(TfsConnection tfs, Lists listProxy, WssListType type);
    public static void DeleteList(DocumentLibraryInfo docLibInfo, string name);
    private static bool CreateList(TfsConnection tfs, Lists listProxy, string name, string description, WssListType type);
    public static List`1<DocumentLibraryInfo> ListDocumentLibraries(TfsConnection tfs, Uri sitePath);
    public static DocumentLibraryInfo FindDocumentLibrary(TfsConnection tfs, Uri sitePath, Guid docLibId);
    public static DocumentLibraryInfo FindDocumentLibraryByAsciiName(TfsConnection tfs, Uri sitePath, string docLibAsciiName);
    public static DocumentLibraryInfo FindDocumentLibraryByTitle(TfsConnection tfs, Uri sitePath, string docLibTitle);
    private static DocumentLibraryInfo FindDocumentLibrary(TfsConnection tfs, Uri sitePath, string discriminator, bool byTitle);
    public static bool CreateDocumentLibrary(TfsConnection tfs, Uri sitePath, string docLibName, string description);
    private static List`1<WssTreeNode> MakeTree(XmlNodeList items);
    public static List`1<WssTreeNode> GetListItems(DocumentLibraryInfo docLibInfo, string folder);
    public static bool CheckSiteExists(ICredentials credentials, Uri url);
    public static bool CheckSiteExists(TfsConnection tfs, Uri url);
    public static bool CheckSiteExists(Lists listsProxy);
    public static bool CheckSharePointFunctionality(ITFLogger logger, Uri adminUri, Uri rootUri, string sitesPath);
    public static bool RenameItem(DocumentLibraryInfo docLibInfo, string listId, string fileRef, string newName, bool isFolder);
    public static void MoveItem(TfsConnection tfs, string siteUrl, string source, string target);
    public static bool DeleteItem(DocumentLibraryInfo docLib, string listId, string nodeUri);
    public static void AttachWeb(TfsConfigurationServer appInstance, Uri siteUrl);
    public static void AttachWeb(ICredentials credentials, Uri siteUrl, Guid configurationServerId);
    public static void DetachWeb(ICredentials credentials, Uri siteUrl);
    private static UInt32 VerifySuccessAfterListsCall(XmlNode returnValue);
    private static Byte[] FormatFpRpcCall(string format, String[] parameters);
    private static string SendFpRpcData(TfsConnection tfs, string siteUrl, Byte[] fpRpcCall);
    private static void HandleFpRpcReturnValue(string retStr, string remoteFullName, string siteUrl);
    private static bool CheckForFpRpcError(string htmlText, UInt32& errorNo, String& msg);
}
[EditorBrowsableAttribute("1")]
public static class Microsoft.TeamFoundation.Client.SharePoint.WssWebTemplates : object {
    public static string TeamSite;
    internal static string BlankSite;
    internal static string DocumentWorkspace;
    internal static string BlogSite;
    internal static string WikiSite;
}
internal static class Microsoft.TeamFoundation.Client.SharePointReportingResources : object {
    private static ResourceManager s_resMgr;
    public static ResourceManager Manager { get; }
    private static SharePointReportingResources();
    public static ResourceManager get_Manager();
    private static string Get(string resourceName);
    private static string Get(string resourceName, CultureInfo culture);
    public static int GetInt(string resourceName);
    public static int GetInt(string resourceName, CultureInfo culture);
    public static bool GetBool(string resourceName);
    public static bool GetBool(string resourceName, CultureInfo culture);
    private static string Format(string resourceName, Object[] args);
    private static string Format(string resourceName, CultureInfo culture, Object[] args);
    public static string FailedToRetieveReports();
    public static string FailedToRetieveReports(CultureInfo culture);
    public static string Reporting_IllegalFolderName();
    public static string Reporting_IllegalFolderName(CultureInfo culture);
    public static string Reporting_PathsDoNotCoincide();
    public static string Reporting_PathsDoNotCoincide(CultureInfo culture);
    public static string ReportingUploader_FileNotExists(object arg0);
    public static string ReportingUploader_FileNotExists(object arg0, CultureInfo culture);
    public static string ReportingUploader_DuplicateTarget(object arg0);
    public static string ReportingUploader_DuplicateTarget(object arg0, CultureInfo culture);
    public static string ReportingUploader_CreatingDataSource(object arg0);
    public static string ReportingUploader_CreatingDataSource(object arg0, CultureInfo culture);
    public static string ReportingUploader_CreatingDataSourceError(object arg0);
    public static string ReportingUploader_CreatingDataSourceError(object arg0, CultureInfo culture);
    public static string ReportingUploader_CreatingFolder(object arg0);
    public static string ReportingUploader_CreatingFolder(object arg0, CultureInfo culture);
    public static string ReportingUploader_CreatingReport(object arg0);
    public static string ReportingUploader_CreatingReport(object arg0, CultureInfo culture);
    public static string ReportingUploader_CreatingSite(object arg0);
    public static string ReportingUploader_CreatingSite(object arg0, CultureInfo culture);
    public static string ReportingUploader_UploadReportError(object arg0, object arg1);
    public static string ReportingUploader_UploadReportError(object arg0, object arg1, CultureInfo culture);
    public static string ReportingUploader_SettingData(object arg0);
    public static string ReportingUploader_SettingData(object arg0, CultureInfo culture);
    public static string ReportingUploader_IgnoringSiteDirective();
    public static string ReportingUploader_IgnoringSiteDirective(CultureInfo culture);
    public static string ReportingUploader_SkippingFolderAlreadyExists(object arg0);
    public static string ReportingUploader_SkippingFolderAlreadyExists(object arg0, CultureInfo culture);
    public static string ReportingUploader_DeletingDatasourceAlreadyExists(object arg0);
    public static string ReportingUploader_DeletingDatasourceAlreadyExists(object arg0, CultureInfo culture);
    public static string ReportingUploader_DeletingReportAlreadyExists(object arg0);
    public static string ReportingUploader_DeletingReportAlreadyExists(object arg0, CultureInfo culture);
    public static string ReportingUploader_CreateReportWarning(object arg0, object arg1, object arg2, object arg3, object arg4);
    public static string ReportingUploader_CreateReportWarning(object arg0, object arg1, object arg2, object arg3, object arg4, CultureInfo culture);
    public static string ReportingUploader_CreatingReportRetry(object arg0, object arg1);
    public static string ReportingUploader_CreatingReportRetry(object arg0, object arg1, CultureInfo culture);
    public static string UnableToRetrieveReportDefinition(object arg0);
    public static string UnableToRetrieveReportDefinition(object arg0, CultureInfo culture);
    public static string Reporting_ReportingUtilities_FolderAlreadyExists(object arg0);
    public static string Reporting_ReportingUtilities_FolderAlreadyExists(object arg0, CultureInfo culture);
    public static string Reporting_ReportingUtilities_InsufficientPrivilegesToCreate(object arg0);
    public static string Reporting_ReportingUtilities_InsufficientPrivilegesToCreate(object arg0, CultureInfo culture);
    public static string Reporting_ReportingUtilities_FolderDoesntExist(object arg0);
    public static string Reporting_ReportingUtilities_FolderDoesntExist(object arg0, CultureInfo culture);
    public static string Reporting_InvalidItemPath(object arg0, object arg1, object arg2);
    public static string Reporting_InvalidItemPath(object arg0, object arg1, object arg2, CultureInfo culture);
    public static string Reporting_InvalidPathChars();
    public static string Reporting_InvalidPathChars(CultureInfo culture);
    public static string Reporting_InvalidItemPath_Surrogates(object arg0);
    public static string Reporting_InvalidItemPath_Surrogates(object arg0, CultureInfo culture);
    public static string Reporting_ItemNotFound(object arg0);
    public static string Reporting_ItemNotFound(object arg0, CultureInfo culture);
    public static string Reporting_UnexpectedItemType(object arg0, object arg1, object arg2);
    public static string Reporting_UnexpectedItemType(object arg0, object arg1, object arg2, CultureInfo culture);
    public static string Reporting_NoPermissions(object arg0);
    public static string Reporting_NoPermissions(object arg0, CultureInfo culture);
    public static string SharePoint_WssUtilities_SiteIsNotRunningSharePointExtensions(object arg0, object arg1);
    public static string SharePoint_WssUtilities_SiteIsNotRunningSharePointExtensions(object arg0, object arg1, CultureInfo culture);
    public static string SharePoint_WssUtilities_SiteIsRunningUnsupportedExtensions(object arg0, object arg1, object arg2);
    public static string SharePoint_WssUtilities_SiteIsRunningUnsupportedExtensions(object arg0, object arg1, object arg2, CultureInfo culture);
    public static string SharePoint_WssUtilities_IntegrationServiceNotAvailable(object arg0, object arg1);
    public static string SharePoint_WssUtilities_IntegrationServiceNotAvailable(object arg0, object arg1, CultureInfo culture);
    public static string SharePoint_WssUtilities_IntegrationServiceNotAvailableWithInner(object arg0, object arg1, object arg2);
    public static string SharePoint_WssUtilities_IntegrationServiceNotAvailableWithInner(object arg0, object arg1, object arg2, CultureInfo culture);
    public static string SharePoint_WssUtilities_IntegrationServiceInvalidResponse(object arg0, object arg1);
    public static string SharePoint_WssUtilities_IntegrationServiceInvalidResponse(object arg0, object arg1, CultureInfo culture);
    public static string SharePoint_WssUtilities_FolderCreationError();
    public static string SharePoint_WssUtilities_FolderCreationError(CultureInfo culture);
    public static string SharePoint_WssUtilities_FileNameError(object arg0);
    public static string SharePoint_WssUtilities_FileNameError(object arg0, CultureInfo culture);
    public static string SharePoint_WssUtilities_FileUploadError(object arg0, object arg1);
    public static string SharePoint_WssUtilities_FileUploadError(object arg0, object arg1, CultureInfo culture);
    public static string SharePoint_WssUtilities_InsufficientPrivilegesToCreateBackcompat(object arg0);
    public static string SharePoint_WssUtilities_InsufficientPrivilegesToCreateBackcompat(object arg0, CultureInfo culture);
    public static string WcfHelpers_HostDidNotSignal(object arg0);
    public static string WcfHelpers_HostDidNotSignal(object arg0, CultureInfo culture);
    public static string WcfHelpers_HostExitedUnexpected(object arg0, object arg1);
    public static string WcfHelpers_HostExitedUnexpected(object arg0, object arg1, CultureInfo culture);
    public static string ReportingUploader_ProjectAlreadyExists(object arg0, object arg1);
    public static string ReportingUploader_ProjectAlreadyExists(object arg0, object arg1, CultureInfo culture);
    public static string ReportingUploader_ProjectFolderHasItems(object arg0);
    public static string ReportingUploader_ProjectFolderHasItems(object arg0, CultureInfo culture);
    public static string ReportingUploader_ReportingNotConfigured(object arg0);
    public static string ReportingUploader_ReportingNotConfigured(object arg0, CultureInfo culture);
    public static string Reporting_ReportingUtilities_ProcessTemplateNotFound(object arg0);
    public static string Reporting_ReportingUtilities_ProcessTemplateNotFound(object arg0, CultureInfo culture);
    public static string ReportingUploader_DownloadTemplateCompleted(object arg0, object arg1);
    public static string ReportingUploader_DownloadTemplateCompleted(object arg0, object arg1, CultureInfo culture);
    public static string ReportingUploader_UnzipTemplateCompleted(object arg0, object arg1);
    public static string ReportingUploader_UnzipTemplateCompleted(object arg0, object arg1, CultureInfo culture);
    public static string ReportingUploader_ProcessingTask(object arg0);
    public static string ReportingUploader_ProcessingTask(object arg0, CultureInfo culture);
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("2")]
internal class System.Runtime.CompilerServices.RefSafetyRulesAttribute : Attribute {
    public int Version;
    public RefSafetyRulesAttribute(int );
}
