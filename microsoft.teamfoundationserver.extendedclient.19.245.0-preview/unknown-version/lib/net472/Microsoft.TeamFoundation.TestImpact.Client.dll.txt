[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
public enum Microsoft.TeamFoundation.TestImpact.Client.AssociationOption : Enum {
    public int value__;
    public static AssociationOption KeepExisting;
    public static AssociationOption Replace;
}
public class Microsoft.TeamFoundation.TestImpact.Client.BuildImpactedTests : object {
    private List`1<Test> _tests;
    private List`1<CodeChange> _changes;
    public ReadOnlyCollection`1<Test> Tests { get; }
    public ReadOnlyCollection`1<CodeChange> CodeChanges { get; }
    internal Test[] TestsInternal { get; internal set; }
    internal CodeChange[] CodeChangesInternal { get; internal set; }
    public ReadOnlyCollection`1<Test> get_Tests();
    public ReadOnlyCollection`1<CodeChange> get_CodeChanges();
    internal Test[] get_TestsInternal();
    internal void set_TestsInternal(Test[] value);
    internal CodeChange[] get_CodeChangesInternal();
    internal void set_CodeChangesInternal(CodeChange[] value);
    internal static BuildImpactedTests FromXml(IServiceProvider serviceProvider, XmlReader reader);
    internal void ToXml(XmlWriter writer, string element);
    internal static void ToXml(XmlWriter writer, string element, BuildImpactedTests obj);
}
public class Microsoft.TeamFoundation.TestImpact.Client.ClientTestInfo : object {
    private DateTime m_dateCompleted;
    private int m_testCaseId;
    public DateTime DateCompleted { get; public set; }
    public int TestCaseId { get; public set; }
    public ClientTestInfo(int testCaseId, DateTime dateCompleted);
    public DateTime get_DateCompleted();
    public void set_DateCompleted(DateTime value);
    public int get_TestCaseId();
    public void set_TestCaseId(int value);
    internal static ClientTestInfo FromXml(IServiceProvider serviceProvider, XmlReader reader);
    internal void ToXml(XmlWriter writer, string element);
    internal static void ToXml(XmlWriter writer, string element, ClientTestInfo obj);
}
public class Microsoft.TeamFoundation.TestImpact.Client.CodeChange : object {
    private List`1<int> _changesets;
    private Guid m_assemblyIdentifier;
    private string m_assemblyName;
    private string m_fileName;
    private MethodAccess m_methodAccess;
    private MethodKind m_methodKind;
    private string m_name;
    private CodeChangeReason m_reason;
    private string m_signature;
    public List`1<int> Changesets { get; }
    internal Int32[] ChangesetsInternal { get; internal set; }
    public Guid AssemblyIdentifier { get; public set; }
    public string AssemblyName { get; public set; }
    public string FileName { get; public set; }
    public MethodAccess MethodAccess { get; public set; }
    public MethodKind MethodKind { get; public set; }
    public string Name { get; public set; }
    public CodeChangeReason Reason { get; public set; }
    public string Signature { get; public set; }
    public List`1<int> get_Changesets();
    internal Int32[] get_ChangesetsInternal();
    internal void set_ChangesetsInternal(Int32[] value);
    public virtual string ToString();
    public Guid get_AssemblyIdentifier();
    public void set_AssemblyIdentifier(Guid value);
    public string get_AssemblyName();
    public void set_AssemblyName(string value);
    public string get_FileName();
    public void set_FileName(string value);
    public MethodAccess get_MethodAccess();
    public void set_MethodAccess(MethodAccess value);
    public MethodKind get_MethodKind();
    public void set_MethodKind(MethodKind value);
    public string get_Name();
    public void set_Name(string value);
    public CodeChangeReason get_Reason();
    public void set_Reason(CodeChangeReason value);
    public string get_Signature();
    public void set_Signature(string value);
    internal static CodeChange FromXml(IServiceProvider serviceProvider, XmlReader reader);
    internal void ToXml(XmlWriter writer, string element);
    internal static void ToXml(XmlWriter writer, string element, CodeChange obj);
}
public enum Microsoft.TeamFoundation.TestImpact.Client.CodeChangeReason : Enum {
    public int value__;
    public static CodeChangeReason Added;
    public static CodeChangeReason Deleted;
    public static CodeChangeReason Modified;
}
internal static class Microsoft.TeamFoundation.TestImpact.Client.Helper : object {
    private static ClientTestInfo[] m_zeroLengthArrayOfClientTestInfo;
    private static CodeChange[] m_zeroLengthArrayOfCodeChange;
    private static Int32[] m_zeroLengthArrayOfInt32;
    private static String[] m_zeroLengthArrayOfString;
    private static Test[] m_zeroLengthArrayOfTest;
    internal static ClientTestInfo[] ZeroLengthArrayOfClientTestInfo { get; }
    internal static CodeChange[] ZeroLengthArrayOfCodeChange { get; }
    internal static Int32[] ZeroLengthArrayOfInt32 { get; }
    internal static String[] ZeroLengthArrayOfString { get; }
    internal static Test[] ZeroLengthArrayOfTest { get; }
    internal static ClientTestInfo[] get_ZeroLengthArrayOfClientTestInfo();
    internal static CodeChange[] get_ZeroLengthArrayOfCodeChange();
    internal static Int32[] get_ZeroLengthArrayOfInt32();
    internal static String[] get_ZeroLengthArrayOfString();
    internal static Test[] get_ZeroLengthArrayOfTest();
    internal static ClientTestInfo[] ArrayOfClientTestInfoFromXml(IServiceProvider serviceProvider, XmlReader reader, bool inline);
    internal static CodeChange[] ArrayOfCodeChangeFromXml(IServiceProvider serviceProvider, XmlReader reader, bool inline);
    internal static Int32[] ArrayOfInt32FromXml(XmlReader reader, bool inline);
    internal static String[] ArrayOfStringFromXml(XmlReader reader, bool inline);
    internal static Test[] ArrayOfTestFromXml(IServiceProvider serviceProvider, XmlReader reader, bool inline);
    internal static string ArrayToString(T[] array);
    internal static void StringToXmlElement(XmlWriter writer, string element, string str);
    internal static void ToXml(XmlWriter writer, string arrayName, ClientTestInfo[] array);
    internal static void ToXml(XmlWriter writer, string arrayName, ClientTestInfo[] array, bool inline, bool allowEmptyArrays);
    internal static void ToXml(XmlWriter writer, string arrayName, CodeChange[] array);
    internal static void ToXml(XmlWriter writer, string arrayName, CodeChange[] array, bool inline, bool allowEmptyArrays);
    internal static void ToXml(XmlWriter writer, string arrayName, Int32[] array);
    internal static void ToXml(XmlWriter writer, string arrayName, Int32[] array, bool inline, bool allowEmptyArrays);
    internal static void ToXml(XmlWriter writer, string arrayName, String[] array);
    internal static void ToXml(XmlWriter writer, string arrayName, String[] array, bool inline, bool allowEmptyArrays);
    internal static void ToXml(XmlWriter writer, string arrayName, Test[] array);
    internal static void ToXml(XmlWriter writer, string arrayName, Test[] array, bool inline, bool allowEmptyArrays);
}
public interface Microsoft.TeamFoundation.TestImpact.Client.ITestImpactServer {
    public abstract virtual void PublishBuildChanges(Uri buildUri, CodeChange[] changes);
    public abstract virtual void DeleteBuildImpact(Uri buildDefinitionUri, Uri buildUri);
    public abstract virtual CodeChange[] QueryBuildCodeChanges(Uri buildUri);
    public abstract virtual BuildImpactedTests QueryImpactedTests(Uri buildUri);
    public abstract virtual TestSignatureData QueryTestCaseSignatures(Uri[] buildDefinitionUris, ClientTestInfo[] clientTests);
}
public enum Microsoft.TeamFoundation.TestImpact.Client.MethodAccess : Enum {
    public int value__;
    public static MethodAccess Internal;
    public static MethodAccess Private;
    public static MethodAccess Protected;
    public static MethodAccess ProtectedAndInternal;
    public static MethodAccess ProtectedOrInternal;
    public static MethodAccess Public;
}
public enum Microsoft.TeamFoundation.TestImpact.Client.MethodKind : Enum {
    public int value__;
    public static MethodKind EventAdder;
    public static MethodKind EventRaiser;
    public static MethodKind EventRemover;
    public static MethodKind Method;
    public static MethodKind PropertyGetter;
    public static MethodKind PropertySetter;
}
[GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "15.0.0.0")]
[DebuggerNonUserCodeAttribute]
[CompilerGeneratedAttribute]
internal class Microsoft.TeamFoundation.TestImpact.Client.Properties.Resources : object {
    private static ResourceManager resourceMan;
    private static CultureInfo resourceCulture;
    [EditorBrowsableAttribute("2")]
internal static ResourceManager ResourceManager { get; }
    [EditorBrowsableAttribute("2")]
internal static CultureInfo Culture { get; internal set; }
    internal static string ArgumentNull { get; }
    internal static string ArgumentNullOrEmpty { get; }
    internal static string ObjectAlreadyInitialized { get; }
    internal static string ObjectNotATest { get; }
    internal static string ServerException { get; }
    internal static string TestCaseString { get; }
    internal static string TestFromProjectString { get; }
    internal static string TestImpactServiceNotSupported { get; }
    internal static string TestNotProjectTest { get; }
    internal static string TestNotTestCase { get; }
    internal static ResourceManager get_ResourceManager();
    internal static CultureInfo get_Culture();
    internal static void set_Culture(CultureInfo value);
    internal static string get_ArgumentNull();
    internal static string get_ArgumentNullOrEmpty();
    internal static string get_ObjectAlreadyInitialized();
    internal static string get_ObjectNotATest();
    internal static string get_ServerException();
    internal static string get_TestCaseString();
    internal static string get_TestFromProjectString();
    internal static string get_TestImpactServiceNotSupported();
    internal static string get_TestNotProjectTest();
    internal static string get_TestNotTestCase();
}
public class Microsoft.TeamFoundation.TestImpact.Client.Test : object {
    private AssociationOption m_associationOption;
    private Guid m_automatedTestId;
    private DateTime m_dateCompleted;
    private bool m_exists;
    private int m_testCaseId;
    private string m_testName;
    private string m_testType;
    private List`1<int> _indexes;
    public AssociationOption AssociationOption { get; public set; }
    public Guid AutomatedTestId { get; internal set; }
    public DateTime DateCompleted { get; internal set; }
    public bool Exists { get; internal set; }
    public int TestCaseId { get; internal set; }
    public string TestName { get; internal set; }
    public string TestType { get; internal set; }
    public bool IsTestCase { get; }
    public bool IsAutomated { get; }
    public List`1<int> AssociationIndexes { get; }
    internal Int32[] AssociationIndexesInternal { get; internal set; }
    [EditorBrowsableAttribute("1")]
public Test(Guid automatedTestId, string testName, DateTime dateCompleted);
    public AssociationOption get_AssociationOption();
    [EditorBrowsableAttribute("1")]
public void set_AssociationOption(AssociationOption value);
    public Guid get_AutomatedTestId();
    internal void set_AutomatedTestId(Guid value);
    public DateTime get_DateCompleted();
    internal void set_DateCompleted(DateTime value);
    public bool get_Exists();
    internal void set_Exists(bool value);
    public int get_TestCaseId();
    internal void set_TestCaseId(int value);
    public string get_TestName();
    internal void set_TestName(string value);
    public string get_TestType();
    internal void set_TestType(string value);
    internal static Test FromXml(IServiceProvider serviceProvider, XmlReader reader);
    internal void ToXml(XmlWriter writer, string element);
    internal static void ToXml(XmlWriter writer, string element, Test obj);
    public bool get_IsTestCase();
    public bool get_IsAutomated();
    public List`1<int> get_AssociationIndexes();
    public virtual bool Equals(object obj);
    private sealed virtual override bool System.IEquatable<Microsoft.TeamFoundation.TestImpact.Client.Test>.Equals(Test other);
    public static bool op_Equality(Test first, Test second);
    public static bool op_Inequality(Test first, Test second);
    public virtual int GetHashCode();
    public virtual string ToString();
    internal Int32[] get_AssociationIndexesInternal();
    internal void set_AssociationIndexesInternal(Int32[] value);
}
public abstract class Microsoft.TeamFoundation.TestImpact.Client.TestImpactException : Exception {
    protected TestImpactException(string message);
    protected TestImpactException(string message, Exception inner);
    protected TestImpactException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.TeamFoundation.TestImpact.Client.TestImpactServer : object {
    private TestImpactService _service;
    private sealed virtual override void Microsoft.TeamFoundation.Client.ITfsTeamProjectCollectionObject.Initialize(TfsTeamProjectCollection server);
    private sealed virtual override void Microsoft.TeamFoundation.TestImpact.Client.ITestImpactServer.PublishBuildChanges(Uri buildUri, CodeChange[] changes);
    private sealed virtual override void Microsoft.TeamFoundation.TestImpact.Client.ITestImpactServer.DeleteBuildImpact(Uri buildDefinitionUri, Uri buildUri);
    private sealed virtual override CodeChange[] Microsoft.TeamFoundation.TestImpact.Client.ITestImpactServer.QueryBuildCodeChanges(Uri buildUri);
    private sealed virtual override BuildImpactedTests Microsoft.TeamFoundation.TestImpact.Client.ITestImpactServer.QueryImpactedTests(Uri buildUri);
    private sealed virtual override TestSignatureData Microsoft.TeamFoundation.TestImpact.Client.ITestImpactServer.QueryTestCaseSignatures(Uri[] buildDefinitionUris, ClientTestInfo[] clientTests);
}
public class Microsoft.TeamFoundation.TestImpact.Client.TestImpactServerException : TestImpactException {
    public TestImpactServerException(string message);
    public TestImpactServerException(string message, Exception inner);
    protected TestImpactServerException(SerializationInfo info, StreamingContext context);
}
internal class Microsoft.TeamFoundation.TestImpact.Client.TestImpactService : TfsHttpClient {
    protected Guid CollectionServiceIdentifier { get; }
    protected string ComponentName { get; }
    protected string ServiceType { get; }
    public TestImpactService(TfsTeamProjectCollection connection);
    protected virtual Guid get_CollectionServiceIdentifier();
    protected virtual string get_ComponentName();
    protected virtual string get_ServiceType();
    public void DeleteBuildImpact(string buildDefinitionUri, string buildUri);
    public void PublishBuildChanges(string buildUri, CodeChange[] changes);
    public CodeChange[] QueryBuildCodeChanges(string buildUri);
    public BuildImpactedTests QueryImpactedTests(string buildUri);
    public TestSignatureData QueryTestCaseSignatures(String[] buildDefinitionUris, ClientTestInfo[] clientTests);
}
public class Microsoft.TeamFoundation.TestImpact.Client.TestSignatureData : object {
    private List`1<Test> _tests;
    private List`1<string> _signatures;
    public ReadOnlyCollection`1<Test> Tests { get; }
    public ReadOnlyCollection`1<string> Signatures { get; }
    internal Test[] TestsInternal { get; internal set; }
    internal String[] SignaturesInternal { get; internal set; }
    [EditorBrowsableAttribute("1")]
public TestSignatureData(List`1<Test> tests, List`1<string> signatures);
    internal static TestSignatureData FromXml(IServiceProvider serviceProvider, XmlReader reader);
    internal void ToXml(XmlWriter writer, string element);
    internal static void ToXml(XmlWriter writer, string element, TestSignatureData obj);
    public ReadOnlyCollection`1<Test> get_Tests();
    public ReadOnlyCollection`1<string> get_Signatures();
    internal Test[] get_TestsInternal();
    internal void set_TestsInternal(Test[] value);
    internal String[] get_SignaturesInternal();
    internal void set_SignaturesInternal(String[] value);
}
internal static class Microsoft.TeamFoundation.TestImpact.Client.Utility : object {
    internal static void CheckRequiredArgument(string arg, string name);
    internal static void CheckRequiredArgument(object arg, string name);
    internal static TestImpactServerException GetServerException(Exception caught);
    internal static void CheckTfsVersion(TfsTeamProjectCollection server);
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("2")]
internal class System.Runtime.CompilerServices.RefSafetyRulesAttribute : Attribute {
    public int Version;
    public RefSafetyRulesAttribute(int );
}
