[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
internal class Microsoft.TeamFoundation.VersionControl.Common.Binary : DiffOutput {
    public virtual void Output(IList`1<DiffLine> original, IList`1<DiffLine> modified, IDiffChange[] diffList);
}
[EditorBrowsableAttribute("1")]
public static class Microsoft.TeamFoundation.VersionControl.Common.ByteStreamCompare : object {
    public static bool Equals(Stream stream1, Stream stream2, Byte[] buffer1, Byte[] buffer2);
    public static bool Equals(string file1, string file2, int bufferSize);
}
[FlagsAttribute]
public enum Microsoft.TeamFoundation.VersionControl.Common.ChangePendedFlags : Enum {
    public int value__;
    public static ChangePendedFlags Unknown;
    public static ChangePendedFlags None;
    public static ChangePendedFlags WorkingFolderMappingsUpdated;
}
[FlagsAttribute]
public enum Microsoft.TeamFoundation.VersionControl.Common.CheckInOptions2 : Enum {
    public int value__;
    public static CheckInOptions2 None;
    public static CheckInOptions2 ValidateCheckInOwner;
    public static CheckInOptions2 SuppressEvent;
    public static CheckInOptions2 DeleteShelveset;
    public static CheckInOptions2 OverrideGatedCheckIn;
    public static CheckInOptions2 QueueBuildForGatedCheckIn;
    public static CheckInOptions2 AllContentUploaded;
    public static CheckInOptions2 AllowUnchangedContent;
    public static CheckInOptions2 NoAutoResolve;
    public static CheckInOptions2 NoConflictsCheckForGatedCheckIn;
}
public enum Microsoft.TeamFoundation.VersionControl.Common.CheckInState : Enum {
    public int value__;
    public static CheckInState Unknown;
    public static CheckInState Paging;
    public static CheckInState Committed;
    public static CheckInState Failed;
}
public static class Microsoft.TeamFoundation.VersionControl.Common.CodeChurnConstants : object {
    [EditorBrowsableAttribute("1")]
public static Guid CodeChurnJobGuid;
    [EditorBrowsableAttribute("1")]
public static int DefaultBatchSize;
    [EditorBrowsableAttribute("1")]
public static long DefaultMaxFileSizeToDiff;
    [EditorBrowsableAttribute("1")]
public static int DefaultRetryCount;
    [EditorBrowsableAttribute("1")]
public static int DefaultRetryInterval;
    [EditorBrowsableAttribute("1")]
public static string CodeChurnRegistryPath;
    [EditorBrowsableAttribute("1")]
public static string BatchSizeRegistryKey;
    [EditorBrowsableAttribute("1")]
public static string MaxFileSizeToChurn;
    [EditorBrowsableAttribute("1")]
public static string MaxFileSizeToDiff;
    [EditorBrowsableAttribute("1")]
public static string ItemRetryCount;
    [EditorBrowsableAttribute("1")]
public static string ItemRetryInterval;
    [EditorBrowsableAttribute("1")]
public static string NextChangeSetToProcessRegistryKey;
    [EditorBrowsableAttribute("1")]
public static string LastItemProcessedRegistryKey;
    [EditorBrowsableAttribute("1")]
public static string LastItemRetryTime;
    [EditorBrowsableAttribute("1")]
public static string InUpgrade;
    public static string DetailsPropertyName;
    [EditorBrowsableAttribute("1")]
public static string RetryCountPropertyName;
    private static CodeChurnConstants();
}
public static class Microsoft.TeamFoundation.VersionControl.Common.CodeChurnUtility : object {
    [EditorBrowsableAttribute("1")]
public static Byte[] ConvertToByte(int linesCount, int linesAdded, int linesDeleted, int linesModified);
    private static void PopulateBytes(Byte[] byteValue, int offset, int value);
    private static int GetInt(Byte[] byteValue, int offset);
    public static void ConvertToInt(Byte[] byteValue, Int32& linesCount, Int32& linesAdded, Int32& linesDeleted, Int32& linesModified);
}
[FlagsAttribute]
public enum Microsoft.TeamFoundation.VersionControl.Common.ConflictOptions : Enum {
    public int value__;
    public static ConflictOptions None;
    public static ConflictOptions DisallowAutoMerge;
    public static ConflictOptions PendingLocalVersionMismatch;
    public static ConflictOptions LocalChangesRedundantInTargetVersion;
}
internal class Microsoft.TeamFoundation.VersionControl.Common.Context : DiffOutput {
    public virtual void Output(IList`1<DiffLine> original, IList`1<DiffLine> modified, IDiffChange[] diffList);
}
[FlagsAttribute]
public enum Microsoft.TeamFoundation.VersionControl.Common.DestroyFlags : Enum {
    public int value__;
    public static DestroyFlags None;
    public static DestroyFlags Preview;
    public static DestroyFlags StartCleanup;
    public static DestroyFlags KeepHistory;
    public static DestroyFlags Silent;
    public static DestroyFlags AffectedChanges;
    public static DestroyFlags DeleteWorkspaceState;
}
public class Microsoft.TeamFoundation.VersionControl.Common.DiffFile : List`1<DiffLine> {
    [CompilerGeneratedAttribute]
private bool <HasPreamble>k__BackingField;
    private Encoding m_encoding;
    private static int AverageLinesInSequence;
    public bool HasPreamble { get; public set; }
    public Encoding Encoding { get; }
    private DiffFile(int capacity, Encoding encoding, bool containsPreamble);
    [CompilerGeneratedAttribute]
public bool get_HasPreamble();
    [CompilerGeneratedAttribute]
public void set_HasPreamble(bool value);
    public Encoding get_Encoding();
    public static DiffFile Create(string filePath, Encoding fileEncoding, DiffOptions diffOptions);
    public static DiffFile Create(Stream stream, Encoding encoding, DiffOptions diffOptions);
}
public class Microsoft.TeamFoundation.VersionControl.Common.DiffLine : object {
    private int m_hash;
    private string m_content;
    private EndOfLineTerminator m_eolType;
    public string Content { get; }
    public EndOfLineTerminator EndOfLineTerminator { get; }
    internal DiffLine(string content, EndOfLineTerminator eol, DiffOptions options);
    private int ComputeHashCode(CultureInfo cultureInfo, bool ignoreWhiteSpace, bool ignoreCase);
    public virtual string ToString();
    public virtual int GetHashCode();
    public string get_Content();
    public EndOfLineTerminator get_EndOfLineTerminator();
}
public class Microsoft.TeamFoundation.VersionControl.Common.DiffLineComparer : object {
    private DiffOptions m_options;
    private bool m_ignoreCase;
    private bool m_ignoreWhiteSpace;
    private bool m_ignoreEndOfLine;
    private bool m_ignoreLeadingAndTrailingWhiteSpace;
    private bool m_ignoreEndOfFileEndOfLineDifference;
    public DiffLineComparer(DiffOptions options);
    public sealed virtual bool Equals(DiffLine x, DiffLine y);
    public bool Equals(object left, object right);
    public sealed virtual int GetHashCode(DiffLine element);
    public int GetHashCode(object element);
    private string RemoveWhitespace(string input);
}
[FlagsAttribute]
public enum Microsoft.TeamFoundation.VersionControl.Common.DiffOptionFlags : Enum {
    public int value__;
    public static DiffOptionFlags None;
    public static DiffOptionFlags IgnoreEndOfLineDifference;
    public static DiffOptionFlags IgnoreCase;
    public static DiffOptionFlags IgnoreWhiteSpace;
    public static DiffOptionFlags IgnoreKanaType;
    public static DiffOptionFlags IgnoreSymbols;
    public static DiffOptionFlags IgnoreNonSpace;
    public static DiffOptionFlags IgnoreWidth;
    public static DiffOptionFlags EnablePreambleHandling;
    public static DiffOptionFlags IgnoreLeadingAndTrailingWhiteSpace;
    public static DiffOptionFlags ScanFullFileForEncodingDetection;
    public static DiffOptionFlags ThrowIfDetectedEncodingMismatch;
    public static DiffOptionFlags IgnoreEndOfFileEndOfLineDifference;
}
public class Microsoft.TeamFoundation.VersionControl.Common.DiffOptions : object {
    private int m_codePageOverride;
    private string m_commandLineOptions;
    private int m_contextLines;
    private CultureInfo m_cultureInfo;
    private DiffOptionFlags m_flags;
    private DiffOutputType m_outputType;
    private Encoding m_sourceEncoding;
    private Encoding m_targetEncoding;
    private string m_sourceLabel;
    private string m_targetLabel;
    private bool m_recursive;
    private StreamWriter m_streamWriter;
    private bool m_useThirdPartyTool;
    private int m_vssWidth;
    private VssOutputType m_vssSubFormat;
    public int CodePageOverride { get; public set; }
    public string CommandLineOptions { get; public set; }
    public int ContextLines { get; public set; }
    public CultureInfo CultureInfo { get; public set; }
    public DiffOptionFlags Flags { get; public set; }
    public DiffOutputType OutputType { get; public set; }
    public Encoding SourceEncoding { get; public set; }
    public Encoding TargetEncoding { get; public set; }
    public string SourceLabel { get; public set; }
    public string TargetLabel { get; public set; }
    public bool Recursive { get; public set; }
    public StreamWriter StreamWriter { get; public set; }
    public bool UseThirdPartyTool { get; public set; }
    public int VssOutputWidth { get; public set; }
    public VssOutputType VssFormatType { get; public set; }
    public int get_CodePageOverride();
    public void set_CodePageOverride(int value);
    public int GetCodePage(int fallbackCodePage);
    public string get_CommandLineOptions();
    public void set_CommandLineOptions(string value);
    public int get_ContextLines();
    public void set_ContextLines(int value);
    public CultureInfo get_CultureInfo();
    public void set_CultureInfo(CultureInfo value);
    public DiffOptionFlags get_Flags();
    public void set_Flags(DiffOptionFlags value);
    public DiffOutputType get_OutputType();
    public void set_OutputType(DiffOutputType value);
    public Encoding get_SourceEncoding();
    public void set_SourceEncoding(Encoding value);
    public Encoding get_TargetEncoding();
    public void set_TargetEncoding(Encoding value);
    public string get_SourceLabel();
    public void set_SourceLabel(string value);
    public string get_TargetLabel();
    public void set_TargetLabel(string value);
    public bool get_Recursive();
    public void set_Recursive(bool value);
    public StreamWriter get_StreamWriter();
    public void set_StreamWriter(StreamWriter value);
    public void SetTargetEncodingToConsole();
    public bool get_UseThirdPartyTool();
    public void set_UseThirdPartyTool(bool value);
    public int get_VssOutputWidth();
    public void set_VssOutputWidth(int value);
    public VssOutputType get_VssFormatType();
    public void set_VssFormatType(VssOutputType value);
}
[EditorBrowsableAttribute("1")]
public abstract class Microsoft.TeamFoundation.VersionControl.Common.DiffOutput : object {
    private DiffOptions m_options;
    protected DiffOptions Options { get; }
    protected StreamWriter Out { get; }
    protected DiffOptions get_Options();
    protected StreamWriter get_Out();
    protected void WriteElementRange(IList`1<DiffLine> sequence, string prefix, int startIndex, int endIndex);
    protected void WriteUnixChangeHeader(IDiffChange change);
    protected int ComputeHunkEnd(IDiffChange[] diffList, int hunkStart, int contextLines);
    public abstract virtual void Output(IList`1<DiffLine> original, IList`1<DiffLine> modified, IDiffChange[] diffList);
    public static DiffOutput Create(DiffOptions options);
}
public enum Microsoft.TeamFoundation.VersionControl.Common.DiffOutputType : Enum {
    public int value__;
    public static DiffOutputType Context;
    public static DiffOutputType RCS;
    public static DiffOutputType Ed;
    public static DiffOutputType Unified;
    public static DiffOutputType UnixNormal;
    public static DiffOutputType VSS;
    public static DiffOutputType Binary;
    public static DiffOutputType Visual;
}
public class Microsoft.TeamFoundation.VersionControl.Common.DiffSegment : object {
    private DiffSegment m_next;
    private DiffSegmentType m_type;
    private long m_originalStartOffset;
    private long m_originalByteLength;
    private int m_originalStart;
    private int m_originalLength;
    private long m_modifiedStartOffset;
    private int m_modifiedStart;
    private int m_modifiedLength;
    private long m_modifiedByteLength;
    private long m_latestStartOffset;
    private int m_latestStart;
    private int m_latestLength;
    private long m_latestByteLength;
    private IDiffChange[] m_charDiffs;
    public long OriginalByteLength { get; public set; }
    public long ModifiedByteLength { get; public set; }
    public long OriginalStartOffset { get; public set; }
    public long ModifiedStartOffset { get; public set; }
    public DiffSegment Next { get; public set; }
    public DiffSegmentType Type { get; public set; }
    public int OriginalStart { get; public set; }
    public int OriginalLength { get; public set; }
    public int ModifiedStart { get; public set; }
    public int ModifiedLength { get; public set; }
    public int LatestStart { get; public set; }
    public int LatestLength { get; public set; }
    public long LatestStartOffset { get; public set; }
    public long LatestByteLength { get; public set; }
    public IDiffChange[] CharDiffs { get; public set; }
    public long get_OriginalByteLength();
    public void set_OriginalByteLength(long value);
    public long get_ModifiedByteLength();
    public void set_ModifiedByteLength(long value);
    public long get_OriginalStartOffset();
    public void set_OriginalStartOffset(long value);
    public long get_ModifiedStartOffset();
    public void set_ModifiedStartOffset(long value);
    public DiffSegment get_Next();
    public void set_Next(DiffSegment value);
    public DiffSegmentType get_Type();
    public void set_Type(DiffSegmentType value);
    public int get_OriginalStart();
    public void set_OriginalStart(int value);
    public int get_OriginalLength();
    public void set_OriginalLength(int value);
    public int get_ModifiedStart();
    public void set_ModifiedStart(int value);
    public int get_ModifiedLength();
    public void set_ModifiedLength(int value);
    public int get_LatestStart();
    public void set_LatestStart(int value);
    public int get_LatestLength();
    public void set_LatestLength(int value);
    public long get_LatestStartOffset();
    public void set_LatestStartOffset(long value);
    public long get_LatestByteLength();
    public void set_LatestByteLength(long value);
    public IDiffChange[] get_CharDiffs();
    public void set_CharDiffs(IDiffChange[] value);
    public static DiffSegment Convert(IDiffChange[] diffList, int originalLength, int modifiedLength);
    [EditorBrowsableAttribute("1")]
public static DiffSegment Convert(LineChanges[] diffList, int originalLength, int modifiedLength);
}
public enum Microsoft.TeamFoundation.VersionControl.Common.DiffSegmentType : Enum {
    public int value__;
    public static DiffSegmentType Common;
    public static DiffSegmentType Modified;
    public static DiffSegmentType Latest;
    public static DiffSegmentType Conflict;
    public static DiffSegmentType DiffCommon;
}
public class Microsoft.TeamFoundation.VersionControl.Common.DiffSummary : object {
    private int m_originalLineCount;
    private int m_modifiedLineCount;
    private int m_totalLinesAdded;
    private int m_totalLinesModified;
    private int m_totalLinesDeleted;
    private IDiffChange[] m_changes;
    public int OriginalLineCount { get; }
    public int ModifiedLineCount { get; }
    public int TotalLinesAdded { get; }
    public int TotalLinesModified { get; }
    public int TotalLinesDeleted { get; }
    public IDiffChange[] Changes { get; }
    public DiffSummary(DiffFile original, DiffFile modified, IDiffChange[] diffList, bool includeChanges);
    [EditorBrowsableAttribute("1")]
public DiffSummary(int originalLineCount, int modifiedLineCount, int totalLinesAdded, int totalLinesModified, int totalLinesDeleted);
    public int get_OriginalLineCount();
    public int get_ModifiedLineCount();
    public int get_TotalLinesAdded();
    public int get_TotalLinesModified();
    public int get_TotalLinesDeleted();
    public IDiffChange[] get_Changes();
    public virtual string ToString();
}
[EditorBrowsableAttribute("1")]
public static class Microsoft.TeamFoundation.VersionControl.Common.DiffUtil : object {
    public static void DiffFiles(string originalPath, Encoding originalEncoding, string modifiedPath, Encoding modifiedEncoding, DiffOptions diffOptions, string fileLabel);
    public static DiffSummary Diff(Stream originalStream, Encoding originalEncoding, Stream modifiedStream, Encoding modifiedEncoding, DiffOptions diffOptions, bool includeChangesInSummary);
    public static DiffSummary DiffFiles(string originalPath, Encoding originalEncoding, string modifiedPath, Encoding modifiedEncoding, DiffOptions diffOptions, bool includeChangesInSummary);
}
[EditorBrowsableAttribute("1")]
public class Microsoft.TeamFoundation.VersionControl.Common.DownloadUrl : ValueType {
    private string m_url;
    private int m_fileIdInsertPos;
    private int m_fileId;
    [ThreadStaticAttribute]
private static string ts_lastParsedUrl;
    private static string c_fileIdSearchString;
    public bool IsContentDestroyed { get; }
    public string Url { get; }
    public DownloadUrl(string url);
    public bool get_IsContentDestroyed();
    public string get_Url();
}
internal class Microsoft.TeamFoundation.VersionControl.Common.Ed : DiffOutput {
    public virtual void Output(IList`1<DiffLine> original, IList`1<DiffLine> modified, IDiffChange[] diffList);
}
[FlagsAttribute]
public enum Microsoft.TeamFoundation.VersionControl.Common.GlobalPermissions : Enum {
    public int value__;
    public static GlobalPermissions None;
    public static GlobalPermissions CreateWorkspace;
    public static GlobalPermissions AdminWorkspaces;
    public static GlobalPermissions AdminShelvesets;
    public static GlobalPermissions AdminConnections;
    public static GlobalPermissions AdminConfiguration;
    public static GlobalPermissions All;
}
[EditorBrowsableAttribute("1")]
public interface Microsoft.TeamFoundation.VersionControl.Common.IBranchHistoryTreeItem {
    public IBranchRelative Relative { get; public set; }
    public int Level { get; public set; }
    public IBranchHistoryTreeItem Parent { get; public set; }
    public ICollection Children { get; }
    public abstract virtual void AddChild(IBranchHistoryTreeItem newChild);
    public abstract virtual IBranchRelative get_Relative();
    public abstract virtual void set_Relative(IBranchRelative value);
    public abstract virtual int get_Level();
    public abstract virtual void set_Level(int value);
    public abstract virtual IBranchHistoryTreeItem get_Parent();
    public abstract virtual void set_Parent(IBranchHistoryTreeItem value);
    public abstract virtual ICollection get_Children();
    public abstract virtual IBranchHistoryTreeItem GetRequestedItem();
}
[EditorBrowsableAttribute("1")]
public interface Microsoft.TeamFoundation.VersionControl.Common.IBranchRelative {
    public int RelativeToItemId { get; public set; }
    public int RelativeFromItemId { get; public set; }
    public bool IsRequestedItem { get; public set; }
    public object BranchFromItem { get; public set; }
    public object BranchToItem { get; public set; }
    public abstract virtual int get_RelativeToItemId();
    public abstract virtual void set_RelativeToItemId(int value);
    public abstract virtual int get_RelativeFromItemId();
    public abstract virtual void set_RelativeFromItemId(int value);
    public abstract virtual bool get_IsRequestedItem();
    public abstract virtual void set_IsRequestedItem(bool value);
    public abstract virtual object get_BranchFromItem();
    public abstract virtual void set_BranchFromItem(object value);
    public abstract virtual object get_BranchToItem();
    public abstract virtual void set_BranchToItem(object value);
}
public interface Microsoft.TeamFoundation.VersionControl.Common.IMergeChange {
    public MergeChangeType ChangeType { get; }
    public IDiffChange[] ModifiedChanges { get; }
    public IDiffChange[] LatestChanges { get; }
    public IDiffChange ModifiedChange { get; }
    public IDiffChange LatestChange { get; }
    public abstract virtual MergeChangeType get_ChangeType();
    public abstract virtual IDiffChange[] get_ModifiedChanges();
    public abstract virtual IDiffChange[] get_LatestChanges();
    public abstract virtual IDiffChange get_ModifiedChange();
    public abstract virtual IDiffChange get_LatestChange();
}
[EditorBrowsableAttribute("1")]
public static class Microsoft.TeamFoundation.VersionControl.Common.Internal.DiffResources : object {
    private static ResourceManager s_resMgr;
    public static string VssDiffChange;
    public static string VssDiffChangeTo;
    public static string VssDiffInsert;
    public static string VssDiffDelete;
    public static string UnexpectedEndOfStream;
    public static string IncompleteCharacter;
    public static string IncompleteSurrogatePair;
    public static string ReversedSurrogatePair;
    public static string InvalidCodePage;
    public static string InternalCodeError;
    public static string ArgOutOfRange;
    public static string ArgumentError_TokenizerTypesMustMatch;
    public static string TokenizersMustBeInitialized;
    public static string ArgumentError_TokenizerCodePagesMustMatch;
    public static string ArgumentError_TokenStreamsMustSeek;
    public static string InvalidDiffOperation;
    public static string WriteOnceProperty;
    public static string CouldNotRereadEntireToken;
    public static ResourceManager Manager { get; }
    private static DiffResources();
    public static ResourceManager get_Manager();
    public static string Get(string resourceName);
    public static string Get(string resourceName, CultureInfo culture);
    public static int GetInt(string resourceName);
    public static int GetInt(string resourceName, CultureInfo culture);
    public static bool GetBool(string resourceName);
    public static bool GetBool(string resourceName, CultureInfo culture);
    public static string Format(string resourceName, Object[] args);
    public static string Format(string resourceName, CultureInfo culture, Object[] args);
}
[EditorBrowsableAttribute("1")]
public static class Microsoft.TeamFoundation.VersionControl.Common.Internal.MergeFinder : object {
    public static IMergeChange[] Merge(IList`1<DiffLine> modified, IList`1<DiffLine> latest, IEqualityComparer`1<DiffLine> comparer, MergeOptions mergeOptions);
    public static IMergeChange[] Merge(IList`1<DiffLine> original, IList`1<DiffLine> modified, IList`1<DiffLine> latest, DiffLineComparer comparer, MergeOptions mergeOptions);
    private static IMergeChange[] JoinDiffs(IDiffChange[] originalModified, IDiffChange[] originalLatest, IList`1<DiffLine> original, IList`1<DiffLine> modified, IList`1<DiffLine> latest, DiffLineComparer comparer, MergeOptions mergeOptions);
    public static IMergeChange[] MergeEx(IList`1<DiffLine> diffFileOriginal, IList`1<DiffLine> diffFileModified, IList`1<DiffLine> diffFileLatest, DiffLineComparer comparer1, DiffLineComparer comparer2, MergeOptions mergeOptions1, MergeOptions mergeOptions2);
    private static bool ChangesIdentical(IList`1<DiffLine> leftSequence, IDiffChange leftChange, IList`1<DiffLine> rightSequence, IDiffChange rightChange, DiffLineComparer comparer);
    public static MergeSummary GetSummary(IMergeChange[] mergedChanges);
}
[EditorBrowsableAttribute("1")]
public class Microsoft.TeamFoundation.VersionControl.Common.Internal.MergeOptions : DiffOptions {
    private string m_latestLabel;
    private bool m_adjacentChangesConflict;
    [CompilerGeneratedAttribute]
private bool <WriteOriginalForConflictingRange>k__BackingField;
    public string LatestLabel { get; public set; }
    public bool AdjacentChangesConflict { get; public set; }
    public bool WriteOriginalForConflictingRange { get; public set; }
    public string get_LatestLabel();
    public void set_LatestLabel(string value);
    public bool get_AdjacentChangesConflict();
    public void set_AdjacentChangesConflict(bool value);
    [CompilerGeneratedAttribute]
public bool get_WriteOriginalForConflictingRange();
    [CompilerGeneratedAttribute]
public void set_WriteOriginalForConflictingRange(bool value);
}
[EditorBrowsableAttribute("1")]
public class Microsoft.TeamFoundation.VersionControl.Common.Internal.MergeOutput : object {
    private Stream m_stream;
    private bool m_lastWrittenLineHadEndOfLine;
    private Encoding m_encoding;
    private StreamWriter m_streamWriter;
    private bool m_useStreamWriter;
    private MergeOptions m_options;
    private static string c_targetLabel;
    private static string c_latestLabel;
    private static string c_sourceLabel;
    protected MergeOptions Options { get; }
    public MergeOutput(MergeOptions mergeOptions, Stream stream, Encoding encoding, bool outputPreamble);
    protected MergeOptions get_Options();
    private void Write(string value);
    private void WriteLine(string line);
    private void WriteElementRange(IList`1<DiffLine> sequence, int startIndex, int endIndex);
    public void Output(IList`1<DiffLine> modified, IList`1<DiffLine> latest, IMergeChange[] mergeList);
    public void Output(IList`1<DiffLine> original, IList`1<DiffLine> modified, IList`1<DiffLine> latest, IMergeChange[] mergeList);
}
[EditorBrowsableAttribute("1")]
public static class Microsoft.TeamFoundation.VersionControl.Common.Internal.Resources : object {
    private static ResourceManager s_resMgr;
    public static string AColon;
    public static string AColonB;
    public static string AColonBEqualsC;
    public static string AddedItemMissingLocally;
    public static string AllFilesUpToDate;
    public static string Allow;
    public static string AllowInherited;
    public static string AmbiguousVersion;
    public static string ArgumentsMustContain;
    public static string ArgumentsMustNotContain;
    public static string ArtifactNotFound;
    public static string BadOptionWorkspaceEdit;
    public static string BranchedFromVersion;
    public static string BranchesNoForwardProgress;
    public static string BranchesRequiresAtLeastOneItem;
    public static string BranchSource;
    public static string BranchUnreadable;
    public static string CannotAddProjectToSourceControl;
    public static string CannotAddSolutionToSourceControl;
    public static string CannotChangeWorkspaceOwnerAndPermissionsSimultaneously;
    public static string CannotDiffBinaryFiles;
    public static string CannotDiffFileWithFolder;
    public static string VersionControlNotRegistered;
    public static string CannotFindRegistrationInformation;
    public static string CannotSpecifyInheritWithPerms;
    public static string CannotUseDetailedWithCachedWorkspaces;
    public static string CantDeleteNonEmptyDir;
    public static string CantDeleteNonEmptyDirPath;
    public static string Change;
    public static string Changeset;
    public static string ChangesetEmpty;
    public static string ChangesetFormat;
    public static string ChangesetInvalid;
    public static string ChangesetLinkLocalizedName;
    public static string ChangesetModified;
    public static string ChangesetNotFound;
    public static string ChangesetSpecifyAtMostOne;
    public static string ChangesetSpecifyOne;
    public static string ChangesetOptionUnavailableWhenBrowsing;
    public static string ChangesUndoneByCheckin;
    public static string ChangeTypeAdd;
    public static string ChangeTypeBranch;
    public static string ChangeTypeDelete;
    public static string ChangeTypeEdit;
    public static string ChangeTypeFileType;
    public static string ChangeTypeLock;
    public static string ChangeTypeMerge;
    public static string ChangeTypeNone;
    public static string ChangeTypeRename;
    public static string ChangeTypeRollback;
    public static string ChangeTypeUndelete;
    public static string ChangeTypeSourceRename;
    public static string CheckedIn;
    public static string CheckingInPendingChange;
    public static string CheckinNoteFieldNotValidForChangeset;
    public static string CheckinNoteFieldNameEmpty;
    public static string CheckinNoteFieldUnknown;
    public static string CheckinNoteFieldValueEmpty;
    public static string CheckinNoteNameEmpty;
    public static string CheckinNoteNameInvalid;
    public static string CheckinNoteNameTooLong;
    public static string CheckinNoteRequiredFormattedFailedMessage;
    public static string CheckinNoteRequiredForMultipleNotes;
    public static string CheckinNoteRequiredForOneNote;
    public static string CheckinNoteRequiredValue;
    public static string CheckinNotes;
    public static string CheckinNotesNotInRoot;
    public static string CheckInParametersCannotHaveBothPendingChangesAndItemSpecs;
    public static string ClickToAddWorkingFolder;
    public static string Cloaked;
    public static string CloakedIndicator;
    public static string CannotCloakPathWithNoMappedParent;
    public static string CommandCanceled;
    public static string CommandContinuationError;
    public static string Comment;
    public static string CommittedBy;
    public static string Compare;
    public static string Computer;
    public static string ComputerNameEmpty;
    public static string ConfigureNoPromptBad;
    public static string Conflict;
    public static string ConflictingWorkingFolders;
    public static string ConflictMergeCollision;
    public static string ConflictMergeCollisionPath;
    public static string ConflictMergeSourceAndTargetChanged;
    public static string ConflictMergeSourceAndTargetChangedPath;
    public static string ConflictMergeTargetIsDeleted;
    public static string ConflictMergeTargetIsDeletedPath;
    public static string ConflictMergeSourceIsDeleted;
    public static string ConflictMergeSourceIsDeletedPath;
    public static string ConflictMergeSourceIsUndeleted;
    public static string ConflictMergeSourceIsUndeletedPath;
    public static string ConflictCheckinNewerVersion;
    public static string ConflictCheckinNewerVersionPath;
    public static string ConflictCheckinDeleted;
    public static string ConflictCheckinDeletedPath;
    public static string ConflictCheckinCollision;
    public static string ConflictCheckinCollisionPath;
    public static string ConflictGetPendingChange;
    public static string ConflictGetPendingChangePath;
    public static string ConflictGetPendingDelete;
    public static string ConflictGetPendingDeletePath;
    public static string ConflictGetDeleted;
    public static string ConflictGetDeletedPath;
    public static string ConflictGetCollision;
    public static string ConflictGetCollisionPath;
    public static string ConflictNotResolved;
    public static string ConflictNotResolvedNeedAutoMergeForced;
    public static string ConflictTagBase;
    public static string ConflictTagOriginal;
    public static string ConflictTagSource;
    public static string ConflictTagTarget;
    public static string ConflictTagServer;
    public static string ConflictTagLocal;
    public static string ConflictTagShelveset;
    public static string ConflictTagUnShelved;
    public static string ConflictTagOriginalWorkspace;
    public static string ConflictLabel;
    public static string ConflictTagGeneratedBase;
    public static string ContextDiffSourceLabel;
    public static string ContextDiffTargetLabel;
    public static string Copyright;
    public static string CouldNotParseParameter;
    public static string CouldNotRetrieveACL;
    public static string CreatedTeamProjectFolder;
    public static string CreatingFolderOperation;
    public static string CreateWorkspace;
    public static string Date;
    public static string DateFormatShort;
    public static string DateFormatLong;
    public static string DeletedShelveset;
    public static string DeleteShelvesetQuestion_YN;
    public static string DeleteWorkspaceQuestion_YN;
    public static string DeletionId;
    public static string Deny;
    public static string DenyInherited;
    public static string DiffAgainstFolder;
    public static string DiffFolder;
    public static string DiffFolderAndFile;
    public static string DiffIndex;
    public static string DiffNonCommonFile;
    public static string DiffNonCommonFolder;
    public static string DiffLocalLabel;
    public static string DiffRepositoryLabel;
    public static string DiffRepositoryShelveset;
    public static string DiffLocalLabelFull;
    public static string DiffRepositoryLabelFull;
    public static string DiffLabel;
    public static string DiffSeparator;
    public static string DirItems;
    public static string DownloadCorrupted;
    public static string DownloadConnectionFailed;
    public static string EditWorkspace;
    public static string EmbeddedWildcardsNotAllowed;
    public static string ErrorReadingConfig;
    public static string ErrorTitle;
    public static string ExceptionTypeAndMessage;
    public static string ExitCode;
    public static string FailedToCreateMapping;
    public static string FileDiffNotValid;
    public static string FileDoesNotExist;
    public static string FileExists;
    public static string FileIsWritable;
    public static string FileIsWritablePath;
    public static string FileName;
    public static string FileNotAvailable;
    public static string FileOrFolderNotFound;
    public static string FilesDiffer;
    public static string FileType;
    public static string FileTypeBinary;
    public static string FirstArgumentRepositoryFolder;
    public static string FolderEditException;
    public static string FolderNameEmpty;
    public static string FoundDirectoryExpectedFile;
    public static string FullyQualifiedUserNameRequired;
    public static string GetConflict;
    public static string GetConflictMove;
    public static string GetDelete;
    public static string GetDeleting;
    public static string GetGet;
    public static string GetGetting;
    public static string GetGettingMove;
    public static string GetLocalPending;
    public static string GetLocalPendingMove;
    public static string GetReplacing;
    public static string GetReplacingMove;
    public static string GetStatusSummary;
    public static string GetTargetIsDir;
    public static string GetUnableToRefresh;
    public static string GetWritable;
    public static string GetSourceWritableNewTarget;
    public static string Global;
    public static string GlobalPermissionOptionNotAllowed;
    public static string GlobalPermissionAdminConfiguration;
    public static string GlobalPermissionAdminConnections;
    public static string GlobalPermissionAdminShelvesets;
    public static string GlobalPermissionAdminWorkspaces;
    public static string GlobalPermissionCreateWorkspace;
    public static string HelpNotAvailable;
    public static string HelpTopicNotAvailable;
    public static string HistoryBriefChangeWidth;
    public static string HistoryBriefUserWidth;
    public static string HistoryBriefChangesetWidth;
    public static string HistoryNothingAvailable;
    public static string HistoryTakesOneItem;
    public static string HttpStatusInfo;
    public static string Identity;
    public static string IgnoringDeletionId;
    public static string IgnoringOption;
    public static string IgnoreOptionsNotPassed;
    public static string IgnoringVersionRangeStart;
    public static string IgnoringVersions;
    public static string IgnoringItem;
    public static string IncompatibleChangeException;
    public static string Indeterminate;
    public static string Inherit;
    public static string InternalPolicyError;
    public static string InvalidArgumentsDigitNonWS;
    public static string InvalidArgumentsPctOutOfRange;
    public static string InvalidArgumentsPctPct;
    public static string InvalidArgumentsStandAlonePct;
    public static string InvalidCacheFile;
    public static string InvalidCacheDir;
    public static string InvalidCommandEmpty;
    public static string InvalidCommandInvalidPath;
    public static string InvalidExtensionEmpty;
    public static string InvalidExtensionIllegalCharacters;
    public static string InvalidExtensionMustStartWithPeriod;
    public static string InvalidExtensionOnlyOnePeriod;
    public static string InvalidExtensionTooLong;
    public static string InvalidExtensionTooShort;
    public static string InvalidFileTypeException;
    public static string InvalidOperation;
    public static string InvalidOperationStatus;
    public static string InvalidPathInvalidFolderStartChar;
    public static string InvalidPathMissingRoot;
    public static string InvalidPathNoCommonParent;
    public static string InvalidPathNoHatterasItem;
    public static string InvalidPathTooManyDotDots;
    public static string ReservedPathName;
    public static string InvalidPolicy;
    public static string InvalidResourceDefinition;
    public static string InvalidServerResponse;
    public static string InvalidShelveset;
    public static string InvalidShelvesetName;
    public static string InvalidUserName;
    public static string InvalidWorkspaceName;
    public static string Item;
    public static string ItemIsADirectory;
    public static string ItemNotFoundInRepository;
    public static string FileNotFoundInRepository;
    public static string ItemNotFoundInRepositoryAtVersion;
    public static string ItemNotDoesNotExistAtChangeset;
    public static string ItemAtVersionNotFoundInRepository;
    public static string ItemChangesetIndeterminate;
    public static string ItemNotFoundInWorkspace;
    public static string ItemPermissionAdminProjectRights;
    public static string ItemPermissionCheckin;
    public static string ItemPermissionCheckinOther;
    public static string ItemPermissionLabel;
    public static string ItemPermissionLabelOther;
    public static string ItemPermissionLock;
    public static string ItemPermissionPendChange;
    public static string ItemPermissionRead;
    public static string ItemPermissionReviseOther;
    public static string ItemPermissionUndoOther;
    public static string ItemPermissionUnlockOther;
    public static string ItemPermissionMerge;
    public static string ItemPermissionManageBranch;
    public static string Items;
    public static string ItemsFromOneWorkspace;
    public static string ItemSpecNotAllowedForCheckInShelveset;
    public static string ItemTypeFile;
    public static string ItemTypeFolder;
    public static string Label;
    public static string LabelNameEmpty;
    public static string LabelCreated;
    public static string LabelDeleteArguments;
    public static string LabelDeleted;
    public static string LabelNameIllegal;
    public static string LabelNotEnoughArguments;
    public static string LabelScopeIllegal;
    public static string LabelScopeWildcard;
    public static string LabelsNotFound;
    public static string LabelsTooManyArguments;
    public static string LabelUpdated;
    public static string CompareLabelsTooManyArguments;
    public static string CompareLabelsTooFewArguments;
    public static string MaxPathLengthTooManyArguments;
    public static string LastModified;
    public static string LaunchingHelp;
    public static string LocalInformation;
    public static string LocalItem;
    public static string LocalPath;
    public static string LocalPathTooLong;
    public static string LocalWorkspaceRequired;
    public static string LocalWorkspaceMustBeLocal;
    public static string Lock;
    public static string LockCheckin;
    public static string LockCheckinShort;
    public static string LockCheckOut;
    public static string LockCheckOutShort;
    public static string LockNone;
    public static string LockOwner;
    public static string LockUnchanged;
    public static string MappingConflictNoTeamProject;
    public static string MappingConflictServerPath;
    public static string MappingCreationCancelled;
    public static string Merge;
    public static string MergeAssociatedPendingChange;
    public static string MergeConflict;
    public static string MergeConflictsSuppressed;
    public static string MergeContentSummary;
    public static string MergePended;
    public static string MergesAuthorHeader;
    public static string MergesAuthorWidth;
    public static string MergeSaved;
    public static string MergesChangesetHeader;
    public static string MergesChangesetWidth;
    public static string MergesDateHeader;
    public static string MergeForceRequiresVersion;
    public static string MergesMergedInHeader;
    public static string MergesMergedInWidth;
    public static string MergesNothingAvailable;
    public static string MergesTakesTargetOptionalSource;
    public static string MergeTarget;
    public static string MissingPendingChangeForUncommittedItem;
    public static string MoreThanOneRepositorySpecified;
    public static string MultipleFilesMatchQuestion_YN;
    public static string MultipleWorkingFoldersForPath;
    public static string MultipleWorkspacesSameName;
    public static string MustBeLocalWorkstation;
    public static string ConflictingWorkspaceInTheCache;
    public static string MustSpecifyAServerPath;
    public static string MustSpecifyAtLeastOnePath;
    public static string MustSpecifyAtLeastOneLocalPath;
    public static string MustSpecifyIdentityWithPerms;
    public static string MustSpecifyRepositoryFolderLocalFolder;
    public static string NewMappingMatchesMultipleExistingMappings;
    public static string NewNameOptionNotValid;
    public static string NewNameOptionRequired;
    public static string No;
    public static string NoAvailableOutputStream;
    public static string NoChangesetWithLatestOption;
    public static string NoChangesLeftToCheckin;
    public static string NoChangesShelved;
    public static string NoChangesToMerge;
    public static string NoChangesToUndo;
    public static string NoChangesUnshelved;
    public static string NoCloakedFolderMatches;
    public static string NoBaseFileForConflict;
    public static string NoTheirFileForConflict;
    public static string NoBaseFileForPendingChange;
    public static string NoFile;
    public static string NoFileMatches;
    public static string NoFilesCheckedIn;
    public static string NoFilesSpecified;
    public static string NoGlobalPermissions;
    public static string NoItemsFound;
    public static string NoItemsFoundUnder;
    public static string NoChangesFoundToPend;
    public static string NoConfiguredCompareToolFor;
    public static string NoConflictsToResolve;
    public static string NoInconsistenciesFound;
    public static string NoLocalChangesRemoteWorkspace;
    public static string NoLocalChangesNoWorkspacePermission;
    public static string NoLocalFileForPendingChange;
    public static string NoLocalMatchingWorkspaceFound;
    public static string NoMappedFolderMatches;
    public static string NoMatchingChanges;
    public static string NoMatchingChangesToShelve;
    public static string NoMatchingTeamProject;
    public static string NoWorkspaceInCacheMatches;
    public static string NoMatchingWorkspaceFoundInRepository;
    public static string NoPendingChanges;
    public static string NoPendingChangesMatchingItemSpec;
    public static string NoPendingChangesMatchingItemSpecs;
    public static string NoConflictsMatchingItemSpecs;
    public static string NoPermissions;
    public static string NoShelvesetsFoundMatching;
    public static string NotCloaked;
    public static string NoSourceFile;
    public static string NoTargetFile;
    public static string NoTeamProjectForPath;
    public static string ItemIsCloaked;
    public static string NoUriForUncommittedChangeset;
    public static string NoWorkingFolderFor;
    public static string NoWorkingFolderMappings;
    public static string OnlyOneWorkspace;
    public static string OptionNotAllowed;
    public static string OptionRequiresAtLeastOneItem;
    public static string Owner;
    public static string OwnerEmpty;
    public static string PartialMergeIndicator;
    public static string PathIsNotAFile;
    public static string PcwBranchFolderCreated;
    public static string PcwCheckinNoteDefinedMultipleTimes;
    public static string PcwCheckinNoteRequiredInvalid;
    public static string PcwExclusiveCheckoutMultiplyDefined;
    public static string PcwGitMultiplyDefined;
    public static string PcwGitNotDefined;
    public static string PcwExclusiveCheckoutRequiredInvalid;
    public static string PcwIsGlobalPermission;
    public static string PcwLoadingTeamProjectFolders;
    public static string PcwNewEmptyFolderCreated;
    public static string PcwNodeBadAttributeValue;
    public static string PcwNodeMissingRequiredAttribute;
    public static string PcwNoFolderCreated;
    public static string PcwNone;
    public static string PcwSccSourceControl;
    public static string PcwSccSpecifySettings;
    public static string PcwUnknownPermission;
    public static string PcwVersionControlCreation;
    public static string PcwLogChoseNoFolder;
    public static string PcwLogChoseBranch;
    public static string PcwLogChoseNewFolder;
    public static string PcwLogNoNodesFound;
    public static string PcwLogAllowingPermissions;
    public static string PcwLogDenyingPermissions;
    public static string PcwLogCreatingCheckinNote;
    public static string PcwLogSettingExclusiveCheckout;
    public static string PendingChangeIsNotAShelvedFile;
    public static string PendingOperation;
    public static string PendingParentDeleteException;
    public static string PermissionFormat;
    public static string PendingChangeToolTipChanges;
    public static string PendingChangeToolTipFolder;
    public static string PendingChangeToolTipName;
    public static string PendingChangeToolTipVersion;
    public static string PoliciesOnlyOnTeamProjects;
    public static string PolicyActive;
    public static string PolicyAssemblyNotRegistered;
    public static string PolicyDataCorrupted;
    public static string PolicyFailureNoMessage;
    public static string PolicyFailuresOverridden;
    public static string PolicyFailureTooManyPendingChanges;
    public static string PolicyInternalErrorNull;
    public static string PolicyLoadError;
    public static string PolicyLoadErrorMoreInfo;
    public static string PolicyOverrideCommentRequired;
    public static string PolicyOverrideReason;
    public static string PolicyViolations;
    public static string PolicyViolationsApplied;
    public static string PolicyWarningMessages;
    public static string PolicyWarnings;
    public static string PortfolioExplorerNodeName;
    public static string PressEnterKey;
    public static string ProblemsParsingIgnoring;
    public static string ProductName;
    public static string ProxyNotResponding;
    public static string ProxyNotRespondingWithMessage;
    public static string RecursionTypesMustMatch;
    public static string ResolveOneItemNewName;
    public static string Repository;
    public static string TeamProjectCollection;
    public static string RepositoryNotFoundWithInfo;
    public static string RequiresOneValue;
    public static string ResolveAndReCheckin;
    public static string ResolveCannotMergeBinaryFiles;
    public static string ResolvedConflict;
    public static string ResolveEncodingsDontMatch;
    public static string ResolveForceRequiresAutoMerge;
    public static string ResourcePendingChangeWarning;
    public static string ResourcePendingChangeWarningRelatedItem;
    public static string Scope;
    public static string SecondArgumentLocalFolder;
    public static string ServerDoesNotSupportChangingWorkspaceOwner;
    public static string ServerDoesNotSupportChangingWorkspacePermissions;
    public static string ServerInformation;
    public static string ServerItem;
    public static string ServerOptionRequiredForUpdateOptions;
    public static string ServerPath;
    public static string SetPermissionOptionNotAllowed;
    public static string ShelvedChange;
    public static string Shelveset;
    public static string ShelvesetCreated;
    public static string ShelvesetIllegalOwner;
    public static string ShelvesetHasNoPendingChangesMatching;
    public static string ShelvesetNameRequired;
    public static string ShelvingPendingChange;
    public static string Size;
    public static string SkippingNonFileShelvedChange;
    public static string SolutionSpansWorkspaces;
    public static string SourceAndTargetRequired;
    public static string SourceItem;
    public static string SpecifyLocalFolderOrRepositoryFolder;
    public static string SpecifyLockLevel;
    public static string SpecifyOneWorkspace;
    public static string SpecifySourceAndDestination;
    public static string SpecifyWorkspaceEditOption;
    public static string StaleVersion;
    public static string TargetLocalPending;
    public static string TargetLocalPendingPath;
    public static string TeamFoundationServerNameMissing;
    public static string ThreewayMergeInvalidEncodingForFile;
    public static string TooManyItemsSpecified;
    public static string TotalChanges;
    public static string Type;
    public static string MissingBaseline;
    public static string CorruptBaseline;
    public static string UnableToDownloadBaseline;
    public static string BaselineLengthDoesNotMatch;
    public static string BaselineHashValueDoesNotMatch;
    public static string UnableToDetermineRepository;
    public static string UnableToDetermineWorkspace;
    public static string UnableToEditNonExistentWorkspace;
    public static string UnableToFindVersionControlRegistration;
    public static string UndeleteOneItemNewName;
    public static string UndoMovedTo;
    public static string UndoEditQuestion_YNA;
    public static string UndoingOperation;
    public static string UnifiedDiffSourceLabel;
    public static string UnifiedDiffTargetLabel;
    public static string Unknown;
    public static string UnlabelMissingArguments;
    public static string UnrecognizedCommand;
    public static string UnshelveMoveCannotHaveFilespecs;
    public static string UnshelvingPendingChange;
    public static string User;
    public static string UserWildcardInvalidWithWorkspaceOption;
    public static string ValidationFailed;
    public static string ValidationSucceeded;
    public static string VersionControlServerDidNotMatch;
    public static string VersionedItem;
    public static string VersionedItemTypeLocalizedName;
    public static string VersionSpecPathEmpty;
    public static string VersionSpecEmpty;
    public static string VersionSpecIndicator;
    public static string VersionSpecInvalidDateTime;
    public static string VersionSpecInvalidDeletionId;
    public static string VersionSpecInvalidTip;
    public static string VersionSpecRangeNotPermitted;
    public static string VersionSpecSpecifyOnlyOneDeletionId;
    public static string VersionSpecTooManyVersionsSpecified;
    public static string VssProviderInterOpUnavailable;
    public static string WarnMappingCouldNotRelativize;
    public static string WarnMappingHadNameConflict;
    public static string WildcardsNotAllowedForOption;
    public static string WorkingFolders;
    public static string WorkingFoldersChangeWarning;
    public static string WorkItemHeaderAssignedTo;
    public static string WorkItemHeaderID;
    public static string WorkItemHeaderState;
    public static string WorkItemHeaderTitle;
    public static string WorkItemHeaderType;
    public static string WorkItemQueryDisplayName;
    public static string WorkItemQueryTitleDisplayName;
    public static string WorkItems;
    public static string WorkItemUpdateHistoryForAssociated;
    public static string WorkItemUpdateHistoryForResolved;
    public static string WorkItemUpdateHistoryForAssociatedWithComment;
    public static string WorkItemUpdateHistoryForResolvedWithComment;
    public static string WorkItemUpdateError;
    public static string WorkItemUpdateErrorMessagePlural;
    public static string WorkItemUpdateErrorMessageSingular;
    public static string UpdatingWorkItems;
    public static string WorkItemUpdateResolved;
    public static string WorkItemUpdateAssociated;
    public static string WorkItemUpdateResolveFailed;
    public static string WorkItemUpdateAssociateFailed;
    public static string Workspace;
    public static string WorkspaceItemNotFound;
    public static string WorkspaceItemNotFoundRecursive;
    public static string TemplateWorkspaceNameEmpty;
    public static string WorkspaceNameEmpty;
    public static string WorkspaceOwnerEmpty;
    public static string WorkspaceAndServerFormat;
    public static string WorkspaceIsDeleted;
    public static string WrongNumberOfArgsForBuiltIn;
    public static string WrongPolicyType;
    public static string Yes;
    public static string UnsupportedContentType;
    public static string PcwNetworkFailureError;
    public static string PcwNetworkFailureExplanation;
    public static string PcwNetworkFailureUserAction;
    public static string PcwDuplicateProjectNameError;
    public static string PcwDuplicateProjectNameExplanation;
    public static string PcwDuplicateProjectNameUserAction;
    public static string ShelvesetContainsNoChanges;
    public static string GetNamespaceConflict;
    public static string GetNamespaceConflictMove;
    public static string InvalidValueRange;
    public static string DestroyedItem;
    public static string DestroyNotEnoughArguments;
    public static string DestroyStopAtNotValidWithoutKeepHistory;
    public static string BranchesNoTree;
    public static string InvalidStopAtSpec;
    public static string ConflictMergeSourceRenamed;
    public static string ConflictMergeSourceRenamedPath;
    public static string MergedItems;
    public static string UnMergedItems;
    public static string PcwGetLatestOnCheckoutMultiplyDefined;
    public static string PcwGetLatestOnCheckoutRequiredInvalid;
    public static string PcwLogSettingGetLatestOnCheckout;
    public static string DepthOneMappingsNotSupported;
    public static string QueueForEditNotSupported;
    public static string QueueForEditRequiresServerWorkspace;
    public static string WorkingFolderWildcard;
    public static string ServerItemRequiredException;
    public static string DestroyQuestion_YNA;
    public static string DestroyAffectedQuestion_YNA;
    public static string DestroyAffectedPendingChanges;
    public static string DestroyAffectedShelvedChanges;
    public static string NoItemsToDestroy;
    public static string DestroyedContentUnavailableException;
    public static string DestroyedFileContentUnavailableException;
    public static string CannotDestroyRootException;
    public static string DestroyNotSupported;
    public static string CannotDeleteOnPartialUnshelve;
    public static string NeedReadPermissionToDownload;
    public static string PendingLocalVersionMismatchPath;
    public static string PendingLocalVersionMismatch;
    public static string AutoMergeDisallowedException;
    public static string EmptyPermissionsOrInheritanceError;
    public static string WildcardNotAllowedException;
    public static string WorkingFoldersChangeGetPrompt;
    public static string PerformingGetLatestOnWorkspace;
    public static string WorkspaceMappingsHaveChangedTitle;
    public static string CannotRollbackMultiplePaths;
    public static string NoChangesToRollback;
    public static string RollbackInvalidSpecForChangeset;
    public static string RollbackNoVersionsSpecified;
    public static string RollbackTargetDeleted;
    public static string RollbackTargetDeletedPath;
    public static string RollbackTargetVersionHasChanges;
    public static string RollbackTargetVersionHasChangesPath;
    public static string RollbackNotSupported;
    public static string QueryMergeCandidatesOptionsNotSupported;
    public static string VersionSpecOnlyTwoValid;
    public static string DeletionIdNotAllowed;
    public static string VersionSpecNotAllowed;
    public static string AtleastOneSourceAndOneOrMoreTarget;
    public static string NoMergesFound;
    public static string OptionNotAllowedOnPendBranch;
    public static string ExtendedMergesNotSupported;
    public static string CannotCreateOrModifyPropertyWithTFSPrefix;
    public static string CheckInOptions2NotSupported;
    public static string WorkspaceDiffNotSupported;
    public static string CheckInShelvesetNotSupported;
    public static string RootInheritanceException;
    public static string ShelvesetNotFoundException;
    public static string RemapNotAvailableWithFilterCallback;
    public static string AddProxyNotSupported;
    public static string DeleteProxyNotSupported;
    public static string QueryProxiesNotSupported;
    public static string SpecifyOneUrl;
    public static string Disabled;
    public static string Enabled;
    public static string EnabledOptionValueNotBoolean;
    public static string InvalidProxyUrl;
    public static string MustConfigureProxySetting;
    public static string NoProxyRecordsFound;
    public static string NoProxySetting;
    public static string ProxiesFound;
    public static string ProxyDescription;
    public static string ProxySite;
    public static string ProxyDefaults;
    public static string ProxySiteDefault;
    public static string ProxyDefaultsList;
    public static string ProxyGlobalDefault;
    public static string ProxyName;
    public static string ProxySeparator;
    public static string ProxyStatus;
    public static string ProxyTooManyArguments;
    public static string ProxyUrl;
    public static string AttemptProxyAutoConfigure;
    public static string ExhaustedAllProxies;
    public static string NoBestProxiesFound;
    public static string ProxySuccessfulConfigure;
    public static string QueryProxyRecords;
    public static string SuccessfulAddProxy;
    public static string SuccessfulDeleteProxy;
    public static string CouldNotDetermineProxySite;
    public static string FindProxiesForSite;
    public static string FoundProxySiteName;
    public static string ProxyAutoConfigured;
    public static string ProxyLastConfigureTime;
    public static string CreateBranchNotSupported;
    public static string GetChangesForChangesetNotSupported;
    public static string IdentityNotFoundException;
    public static string CouldNotReachProxy;
    public static string QueryLocalVersionsNotSupported;
    public static string WorkspacePermissionsProfileIndeterminate;
    public static string GetPendingChangesForWorkspaceNotSupported;
    public static string Permissions;
    public static string InvalidPermissionValue;
    public static string Invalid8Dot3Path;
    public static string PropertyOperationsNotSupported;
    public static string GetChangesWithPropertiesNotSupported;
    public static string GetChangesForChangesetWithPropertiesNotSupported;
    public static string GlobalResourceAccessException;
    public static string TrackMergesNotSupported;
    public static string ResourceAccessException;
    public static string ResourceAccessExceptionWorkspace;
    public static string ItemNotFound;
    public static string ItemNotFoundRecursive;
    public static string BranchObjectsNotSupported;
    public static string PendingChangesInvalidPageSize;
    public static string WorkspacePermissionAdminister;
    public static string WorkspacePermissionCheckIn;
    public static string WorkspacePermissionRead;
    public static string WorkspacePermissionUse;
    public static string PermissionActionNotSupportedOnPreFrameworkServer;
    public static string FileInUseEncodingFailure;
    public static string QueryMergeRelationshipsNotSupported;
    public static string RenameSourceUnreadable;
    public static string RenamedInVersion;
    public static string NoPropertiesSaved;
    public static string ComparingLocalToLatest;
    public static string GatedCheckinQueued;
    public static string GatedCheckinShelvesetQueued;
    public static string ResubmittingCheckin;
    public static string NotALocalPath;
    public static string InvalidUpdateLocalValue;
    public static string UnshelveWithMergeNotSupported;
    public static string WorkingFoldersOnlyForLocalWorkspaces;
    public static string LocalWorkspacesNotSupported;
    public static string UnableToLoadLocalPropertiesTable;
    public static string UnableToLoadLocalVersionTable;
    public static string UnableToLoadPendingChangesTable;
    public static string QueueUpdateOverloadNotSupportedWithLocalWorkspaces;
    public static string WorkspaceVersionTableUnknownSchema;
    public static string Location;
    public static string Local;
    public static string LocalToServerReconcile;
    public static string LocalToServerReadOnly;
    public static string LocalToServerUpdateWorkspace;
    public static string LocalToServerRefresh;
    public static string LocalToServerDeleteBaselines;
    public static string ServerToLocalDeletingExisting;
    public static string ServerToLocalCreatingPropertiesTable;
    public static string ServerToLocalCreatingPendingChangesTable;
    public static string ServerToLocalCreatingLocalVersionTable;
    public static string ServerToLocalProcessingBaselines;
    public static string ServerToLocalReadOnly;
    public static string ServerToLocalUpdateWorkspace;
    public static string ServerToLocalRefresh;
    public static string ShelvesetDeletedDisplayName;
    public static string CheckinDatesNotSupported;
    public static string ChangeAlreadyPendingException;
    public static string ItemExistsException;
    public static string CanNotChangeRootFolderException;
    public static string PendingDeleteConflictChange;
    public static string PendingChildException;
    public static string CannotCreateFilesInRootException;
    public static string InvalidProjectPendingChangeException;
    public static string ItemNotMappedException;
    public static string ItemCloakedException;
    public static string WildcardNotAllowedForRenameTarget;
    public static string WildcardNotAllowedForRenameSource;
    public static string PartialRenameConflictException;
    public static string RenameWorkingFolderException;
    public static string TargetCloakedException;
    public static string OfflineUndoNoLocalVersionEntry;
    public static string LockOwnerName;
    public static string LockOwnerIdentity;
    public static string TfIgnoreHeader;
    public static string ChangeRequestMustBeLocalNonRecursive;
    public static string CannotTakeCheckoutLockInLocalWorkspace;
    public static string UnshelveGetConflictBrief;
    public static string UnshelveGetConflictFull;
    public static string UnshelveMergeConflictBrief;
    public static string UnshelveMergeConflictFull;
    public static string UnshelveConflictGetCollisionPathBrief;
    public static string GetLatestOnCheckoutLocalWorkspaceWarning;
    public static string UnshelveConflictGetCollisionPathFull;
    public static string MultipleWorkspacesSameSpec;
    public static string ReconcileFailed;
    public static string PendingChangesModified;
    public static string UndoItemExistsLocally;
    public static string CannotRenameDueToChildConflictMessage;
    public static string CannotUndoRenameDueToChildConflictMessage;
    public static string CannotExecuteThirdPartyToolAssembly;
    public static string CannotLoadThirdPartyToolAssembly;
    public static string ThirdPartyToolAssemblyNotFound;
    public static string WorkspaceInfoNotFromServer;
    public static string ServerSettingsNotSupported;
    public static string ShelvesetPropertyOperationsNotSupported;
    public static string ShelvesetUpdateOperationsNotSuppoerted;
    public static string DefaultLocalItemExclusions;
    public static string DefaultLocalItemExclusionsForFolderDiff;
    public static string DetectedChanges;
    public static string ChangesSummary;
    public static string OptionNotAllowedInServerWorkspace;
    public static string NoDeletesDetected;
    public static string NoAddsDetected;
    public static string AddNoFileSpecified;
    public static string SetFileTimeNotSupported;
    public static string AutoResolvedConflict;
    public static string SetFileTime;
    public static string Current;
    public static string Checkin;
    public static string SetFileTimeToCheckinGetPrompt;
    public static string SetFileTimeToCheckinGetWarning;
    public static string AutoResolvedAllReCheckin;
    public static string ChangeNotACandidateDelete;
    public static string ResolveRequiresOneResolutionMessage;
    public static string ItemsIgnoredBecauseOfExclusions;
    public static string ExternalAutomergeFailed;
    public static string DownloadTimedOut;
    public static string UploadTimedOut;
    public static string PropertyChangesNotSupported;
    public static string BinaryValue;
    public static string MustSpecifyPropertyName;
    public static string MustSpecifyPropertyValue;
    public static string Name;
    public static string Value;
    public static string LocalWorkspaceTransactionAlreadyRunning;
    public static string OutputRequiresPropertyNameNoRecursion;
    public static string PropertyDoesNotExist;
    public static string ChangeTypeProperty;
    public static string CleanOrPromoteRequired;
    public static string PropertyNameEmpty;
    public static string PropertyValueEmpty;
    public static string NoPropertiesOnItem;
    public static string NoPropertiesToDeleteMessage;
    public static string AttributeOperationsNotSupported;
    public static string UnversionedAttributesNotSupported;
    public static string PropertiesCommandObsolete;
    public static string CannotAutoMergePropertyConflicts;
    public static string InvalidLocalItemParameter;
    public static string CannotCompareLabels;
    public static string CannotDecreaseMaxPathLength;
    public static string RepositoryPathTooLongDetailed;
    public static string RepositoryPathTooLong;
    public static string PcwGitRepositoryCreated;
    public static string PcwLogChoseGit;
    public static string SourceControlSystemDescriptionGit;
    public static string SourceControlSystemDescriptionTFVC;
    public static string SourceControlSystemNameGit;
    public static string SourceControlSystemNameTFVC;
    public static string TFVCNotEnabledForTeamProject;
    public static string GitPermissionAdminister;
    public static string GitPermissionGenericRead;
    public static string GitPermissionGenericContribute;
    public static string GitPermissionForcePush;
    public static string GitPermissionCreateBranch;
    public static string GitPermissionCreateTag;
    public static string GitPermissionManageNote;
    public static string LocalVersionTableTooLarge;
    public static string UnableToFormReplacementTeamProjectName;
    public static string RepeatedProjectRevisionId;
    public static string ServerUrl;
    public static string NoConnectionsFound;
    public static string RemoveConnection_YNA;
    public static string NoServerUrl;
    public static string GitRepositoryNotFound;
    public static string GitSubgroupIdentifier;
    public static string SettingsSubgroupIdentifier;
    public static string VCSubgroupIdentifier;
    public static string PropertyChangesScopedByProjectNotSupported;
    public static string CannotUseXmlWithCachedWorkspaces;
    public static ResourceManager Manager { get; }
    private static Resources();
    public static ResourceManager get_Manager();
    public static string Get(string resourceName);
    public static string Get(string resourceName, CultureInfo culture);
    public static int GetInt(string resourceName);
    public static int GetInt(string resourceName, CultureInfo culture);
    public static bool GetBool(string resourceName);
    public static bool GetBool(string resourceName, CultureInfo culture);
    public static string Format(string resourceName, Object[] args);
    public static string Format(string resourceName, CultureInfo culture, Object[] args);
}
[EditorBrowsableAttribute("1")]
public class Microsoft.TeamFoundation.VersionControl.Common.Internal.Set`1 : object {
    private Dictionary`2<T, object> m_dictionary;
    public int Count { get; }
    public bool IsReadOnly { get; }
    public Set`1(int itemCount);
    public Set`1(IEqualityComparer`1<T> equalityComparer);
    public Set`1(int itemCount, IEqualityComparer`1<T> equalityComparer);
    public Set`1(IList`1<T> initialContents);
    public Set`1(IList`1<T> initialContents, IEqualityComparer`1<T> equalityComparer);
    public sealed virtual void Add(T item);
    public void AddRange(IEnumerable`1<T> list);
    public sealed virtual void Clear();
    public sealed virtual bool Contains(T item);
    public sealed virtual void CopyTo(T[] array, int index);
    public sealed virtual bool Remove(T item);
    public sealed virtual int get_Count();
    public sealed virtual bool get_IsReadOnly();
    public sealed virtual IEnumerator`1<T> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    public T[] ToArray();
    public List`1<T> ToList();
}
[EditorBrowsableAttribute("1")]
public enum Microsoft.TeamFoundation.VersionControl.Common.ItemValidationError : Enum {
    public int value__;
    public static ItemValidationError None;
    public static ItemValidationError WildcardNotAllowed;
    public static ItemValidationError RepositoryPathTooLong;
    public static ItemValidationError LocalItemRequired;
}
public static class Microsoft.TeamFoundation.VersionControl.Common.LabelSpec : object {
    private static string m_LabelSeparator;
    private static LabelSpec();
    public static void Parse(string spec, string defaultScope, bool permitWildcardNames, String& labelName, String& labelScope);
    public static string Combine(string labelName, string labelScope);
    public static bool IsLegalSpec(string labelSpec, bool permitWildcardNames);
    public static bool IsLegalSpec(string labelSpec);
    public static bool IsLegalName(string labelName, bool permitWildcards);
    public static bool IsLegalName(string labelName);
    public static bool IsLegalScope(string labelScope);
}
[EditorBrowsableAttribute("1")]
[FlagsAttribute]
public enum Microsoft.TeamFoundation.VersionControl.Common.LocalPendingChangeFlags : Enum {
    public byte value__;
    public static LocalPendingChangeFlags None;
    public static LocalPendingChangeFlags HasMergeConflict;
    public static LocalPendingChangeFlags IsCandidate;
    public static LocalPendingChangeFlags Executable;
    public static LocalPendingChangeFlags NotExecutable;
}
internal class Microsoft.TeamFoundation.VersionControl.Common.MergeChange : object {
    private MergeChangeType m_changeType;
    private List`1<IDiffChange> m_modifiedChanges;
    private List`1<IDiffChange> m_latestChanges;
    private IDiffChange m_latestChange;
    private IDiffChange m_modifiedChange;
    public MergeChangeType ChangeType { get; }
    public IDiffChange[] ModifiedChanges { get; }
    public IDiffChange[] LatestChanges { get; }
    public IDiffChange ModifiedChange { get; }
    public IDiffChange LatestChange { get; }
    public MergeChange(MergeChangeType changeType);
    public MergeChange(MergeChangeType changeType, IDiffChange modifiedChange, IDiffChange latestChange);
    public sealed virtual MergeChangeType get_ChangeType();
    public sealed virtual IDiffChange[] get_ModifiedChanges();
    public sealed virtual IDiffChange[] get_LatestChanges();
    public sealed virtual IDiffChange get_ModifiedChange();
    public sealed virtual IDiffChange get_LatestChange();
    public void AddModifiedChange(IDiffChange modifiedChange);
    public void AddLatestChange(IDiffChange latestChange);
    private static IDiffChange BuildConsolidatedChange(List`1<IDiffChange> diffChanges);
}
public enum Microsoft.TeamFoundation.VersionControl.Common.MergeChangeType : Enum {
    public int value__;
    public static MergeChangeType Modified;
    public static MergeChangeType Latest;
    public static MergeChangeType Both;
    public static MergeChangeType Conflict;
}
internal class Microsoft.TeamFoundation.VersionControl.Common.MergeOptions : DiffOptions {
    private string m_latestLabel;
    private bool m_adjacentChangesConflict;
    [CompilerGeneratedAttribute]
private bool <WriteOriginalForConflictingRange>k__BackingField;
    public string LatestLabel { get; public set; }
    public bool AdjacentChangesConflict { get; public set; }
    public bool WriteOriginalForConflictingRange { get; public set; }
    public string get_LatestLabel();
    public void set_LatestLabel(string value);
    public bool get_AdjacentChangesConflict();
    public void set_AdjacentChangesConflict(bool value);
    [CompilerGeneratedAttribute]
public bool get_WriteOriginalForConflictingRange();
    [CompilerGeneratedAttribute]
public void set_WriteOriginalForConflictingRange(bool value);
}
[FlagsAttribute]
public enum Microsoft.TeamFoundation.VersionControl.Common.MergeOptionsEx : Enum {
    public int value__;
    public static MergeOptionsEx None;
    public static MergeOptionsEx ForceMerge;
    public static MergeOptionsEx Baseless;
    public static MergeOptionsEx NoMerge;
    public static MergeOptionsEx AlwaysAcceptMine;
    public static MergeOptionsEx Silent;
    public static MergeOptionsEx NoImplicitBaseless;
    public static MergeOptionsEx Conservative;
    public static MergeOptionsEx NoAutoResolve;
}
public class Microsoft.TeamFoundation.VersionControl.Common.MergeSummary : object {
    private int m_totalCommon;
    private int m_totalModified;
    private int m_totalLatest;
    private int m_totalBoth;
    private int m_totalConflicting;
    [ObsoleteAttribute("Please use the TotalModified, TotalLatest, TotalConflicting and TotalBoth properties to determine the results of the merge.")]
public int TotalCommon { get; public set; }
    public int TotalModified { get; public set; }
    public int TotalLatest { get; public set; }
    public int TotalBoth { get; public set; }
    public int TotalConflicting { get; public set; }
    public int get_TotalCommon();
    public void set_TotalCommon(int value);
    public int get_TotalModified();
    public void set_TotalModified(int value);
    public int get_TotalLatest();
    public void set_TotalLatest(int value);
    public int get_TotalBoth();
    public void set_TotalBoth(int value);
    public int get_TotalConflicting();
    public void set_TotalConflicting(int value);
}
public enum Microsoft.TeamFoundation.VersionControl.Common.OwnershipState : Enum {
    public int value__;
    public static OwnershipState Unknown;
    public static OwnershipState OwnedByAuthorizedUser;
    public static OwnershipState NotOwnedByAuthorizedUser;
}
public enum Microsoft.TeamFoundation.VersionControl.Common.PathLength : Enum {
    public int value__;
    public static PathLength Unspecified;
    public static PathLength Length259;
    public static PathLength Length259WithGuid;
    public static PathLength Length399;
    public static PathLength MaxLength;
    public static PathLength MaxLengthWithGuid;
}
[FlagsAttribute]
public enum Microsoft.TeamFoundation.VersionControl.Common.PendChangesOptions : Enum {
    public int value__;
    public static PendChangesOptions None;
    public static PendChangesOptions GetLatestOnCheckout;
    public static PendChangesOptions Silent;
    public static PendChangesOptions ForceCheckOutLocalVersion;
    public static PendChangesOptions SuppressItemNotFoundFailures;
}
public static class Microsoft.TeamFoundation.VersionControl.Common.PendingChangePropertyVersions : object {
    public static int NonVersioned;
    public static int SpecificVersion;
}
public static class Microsoft.TeamFoundation.VersionControl.Common.PropertyConstants : object {
    public static string CreatedByKey;
    public static string QueryAllPropertiesWildcard;
    private static PropertyConstants();
}
[FlagsAttribute]
public enum Microsoft.TeamFoundation.VersionControl.Common.ProxyFlags : Enum {
    public int value__;
    public static ProxyFlags None;
    public static ProxyFlags SiteDefault;
    public static ProxyFlags GlobalDefault;
}
[FlagsAttribute]
public enum Microsoft.TeamFoundation.VersionControl.Common.QueryMergesExtendedOptions : Enum {
    public int value__;
    public static QueryMergesExtendedOptions None;
    public static QueryMergesExtendedOptions QueryRenames;
    public static QueryMergesExtendedOptions IncludeDownloadInfo;
    public static QueryMergesExtendedOptions QueryTargetMerges;
}
internal class Microsoft.TeamFoundation.VersionControl.Common.Rcs : DiffOutput {
    public virtual void Output(IList`1<DiffLine> original, IList`1<DiffLine> modified, IDiffChange[] diffList);
}
public static class Microsoft.TeamFoundation.VersionControl.Common.RepositoryConstants : object {
    public static string AuthenticatedUser;
    public static int EncodingBinary;
    public static int EncodingUnchanged;
    [EditorBrowsableAttribute("1")]
public static int EncodingFolder;
    public static int MaxChangesetCommentSize;
    public static int MaxCommentSize;
    public static int MaxLabelCommentSize;
    public static int MaxComputerNameSize;
    public static int MaxWorkspaceNameSize;
    public static int MaxShelvesetNameSize;
    [EditorBrowsableAttribute("1")]
public static int MinFileNameReserveSize;
    public static int MaxServerPathSize;
    public static int MaxServerPathWithGuidSize;
    public static int ComponentReserveSize;
    public static int MaxLocalPathSize;
    public static int MaxLocalPathComponentSize;
    public static int MaxIdentityNameSize;
    public static int MaxLabelNameSize;
    public static int MaxPolicyNameSize;
    public static int MaxPolicyOverrideCommentSize;
    public static int MaxPropertyNameSize;
    public static int CheckinNoteNameSize;
    public static string NoCICheckInComment;
    public static string NoTriggerCheckInComment;
    public static int IndeterminateChangeset;
    private static string PublicDir;
    internal static string SchemaDir;
    private static string PublicAppDir;
    [EditorBrowsableAttribute("1")]
public static string TransformDir;
    [EditorBrowsableAttribute("1")]
public static string TransformLcidDir;
    [EditorBrowsableAttribute("1")]
public static string AppDir;
    [EditorBrowsableAttribute("1")]
public static string UrlSuffix;
    [EditorBrowsableAttribute("1")]
public static string AdminUrlSuffix;
    internal static string UploadUrlSuffix;
    [EditorBrowsableAttribute("1")]
public static string ProxyStatisticsUrlSuffix;
    [EditorBrowsableAttribute("1")]
public static int ProxyResponseTimeout;
    internal static string ServiceDefinitionPath;
    public static string IBISEnablement;
    public static string LinkingProviderInterfaceName;
    public static string ISCCProvider;
    public static Guid ISCCProviderServiceIdentifier;
    [EditorBrowsableAttribute("1")]
public static string ISCCProviderServiceIdentifierString;
    public static string ISCCAdmin;
    public static Guid ISCCAdminServiceIdentifier;
    [EditorBrowsableAttribute("1")]
public static string ISCCAdminServiceIdentifierString;
    public static string ISCCProvider3;
    public static Guid ISCCProvider3ServiceIdentifier;
    [EditorBrowsableAttribute("1")]
public static string ISCCProvider3ServiceIdentifierString;
    public static string ISCCProvider4;
    public static Guid ISCCProvider4ServiceIdentifier;
    [EditorBrowsableAttribute("1")]
public static string ISCCProvider4ServiceIdentifierString;
    [EditorBrowsableAttribute("1")]
public static string ISCCProvider4Dot1;
    [EditorBrowsableAttribute("1")]
public static Guid ISCCProvider4Dot1ServiceIdentifier;
    [EditorBrowsableAttribute("1")]
public static string ISCCProvider4Dot2;
    [EditorBrowsableAttribute("1")]
public static Guid ISCCProvider4Dot2ServiceIdentifier;
    [EditorBrowsableAttribute("1")]
public static string ISCCProvider4Dot3;
    [EditorBrowsableAttribute("1")]
public static Guid ISCCProvider4Dot3ServiceIdentifier;
    public static string ISCCProvider5;
    public static Guid ISCCProvider5ServiceIdentifier;
    [EditorBrowsableAttribute("1")]
public static string ISCCProvider5ServiceIdentifierString;
    [EditorBrowsableAttribute("1")]
public static string ISCCProvider5Dot1;
    [EditorBrowsableAttribute("1")]
public static Guid ISCCProvider5Dot1ServiceIdentifier;
    [EditorBrowsableAttribute("1")]
public static string ISCCProvider5Dot2;
    [EditorBrowsableAttribute("1")]
public static Guid ISCCProvider5Dot2ServiceIdentifier;
    public static string IProjectMaintenance;
    public static string Download;
    public static Guid DownloadServiceIdentifier;
    public static string Upload;
    public static Guid UploadServiceIdentifier;
    [EditorBrowsableAttribute("1")]
public static Guid InitialPendingChangesSignature;
    internal static Guid LocalVersionReplayRequiredSignature;
    public static string ExceptionHeader;
    internal static string InstanceHeader;
    [EditorBrowsableAttribute("1")]
public static string RepositoryHashHeader;
    internal static string SHA1AlgorithmIdentifier;
    internal static string NormalizedSignatureQueryString;
    public static string ServerItemField;
    public static string WorkspaceNameField;
    public static string WorkspaceOwnerField;
    public static string ModifiedDateField;
    public static string HashField;
    public static string ContentField;
    public static string LengthField;
    public static string RangeField;
    [EditorBrowsableAttribute("1")]
public static string CheckinPoliciesAnnotation;
    [EditorBrowsableAttribute("1")]
public static string ExclusiveCheckoutAnnotation;
    [EditorBrowsableAttribute("1")]
public static string GetLatestOnCheckoutAnnotation;
    internal static int DestroyedFileId;
    [EditorBrowsableAttribute("1")]
public static int WorkItemLinkTypeMask;
    [EditorBrowsableAttribute("1")]
public static int WorkItemToResolveLinkType;
    [EditorBrowsableAttribute("1")]
public static int WorkItemToAssociateLinkType;
    public static int SourceControlCapabilityFlag;
    private static RepositoryConstants();
}
public static class Microsoft.TeamFoundation.VersionControl.Common.RepositoryFailureCodes : object {
    public static string QueryShelvedItemsReadPermissionWarning;
    public static string UnshelveReadPermissionWarning;
    public static string MergeBranchSourceReadPermissionWarning;
    private static RepositoryFailureCodes();
}
[EditorBrowsableAttribute("1")]
public enum Microsoft.TeamFoundation.VersionControl.Common.ResolveErrorOptions : Enum {
    public int value__;
    public static ResolveErrorOptions None;
    public static ResolveErrorOptions ThrowOnError;
    public static ResolveErrorOptions RaiseWarningsForErrors;
}
[FlagsAttribute]
public enum Microsoft.TeamFoundation.VersionControl.Common.RollbackOptions : Enum {
    public int value__;
    public static RollbackOptions None;
    public static RollbackOptions ToVersion;
    public static RollbackOptions Silent;
    public static RollbackOptions KeepMergeHistory;
    public static RollbackOptions NoAutoResolve;
}
public static class Microsoft.TeamFoundation.VersionControl.Common.SecurityConstants : object {
    public static string GlobalSecurityResource;
    public static string WorkspaceRootSecurityResource;
    public static Guid RepositorySecurityNamespaceGuid;
    public static Guid RepositorySecurity2NamespaceGuid;
    public static Guid PrivilegeSecurityNamespaceGuid;
    public static Guid WorkspaceSecurityNamespaceGuid;
    public static int AllGlobalPermissions;
    public static int AllItemPermissions;
    [EditorBrowsableAttribute("1")]
public static int AllV2ItemPermissions;
    private static SecurityConstants();
}
[EditorBrowsableAttribute("1")]
public enum Microsoft.TeamFoundation.VersionControl.Common.ShelvesetVersions : Enum {
    public int value__;
    public static ShelvesetVersions Latest;
    public static ShelvesetVersions All;
}
[FlagsAttribute]
public enum Microsoft.TeamFoundation.VersionControl.Common.SupportedFeatures : Enum {
    public int value__;
    public static SupportedFeatures None;
    public static SupportedFeatures GetLatestOnCheckout;
    public static SupportedFeatures OneLevelMapping;
    public static SupportedFeatures Destroy;
    public static SupportedFeatures CreateBranch;
    public static SupportedFeatures GetChangesForChangeset;
    public static SupportedFeatures ProxySuite;
    public static SupportedFeatures LocalVersions;
    public static SupportedFeatures BatchedCheckins;
    public static SupportedFeatures WorkspacePermissions;
    public static SupportedFeatures CheckinDates;
    public static SupportedFeatures OwnerVSID;
    public static SupportedFeatures All;
}
[EditorBrowsableAttribute("1")]
public class Microsoft.TeamFoundation.VersionControl.Common.TemporaryDirectory : object {
    private string m_path;
    public string Path { get; }
    public string get_Path();
    public sealed virtual void Dispose();
}
internal class Microsoft.TeamFoundation.VersionControl.Common.Unified : DiffOutput {
    public virtual void Output(IList`1<DiffLine> original, IList`1<DiffLine> modified, IDiffChange[] diffList);
}
internal class Microsoft.TeamFoundation.VersionControl.Common.UnixNormal : DiffOutput {
    public virtual void Output(IList`1<DiffLine> original, IList`1<DiffLine> modified, IDiffChange[] diffList);
}
[EditorBrowsableAttribute("1")]
public class Microsoft.TeamFoundation.VersionControl.Common.VCTraceKeywords : TraceKeywords {
    internal static string Annotate;
    internal static string BranchVisualization;
    public static string CodeReview;
    public static string Download;
    public static string Upload;
    internal static string FolderDiff;
    internal static string Get;
    internal static string History;
    internal static string Label;
    public static string MyWork;
    internal static string PendingChanges;
    internal static string ProgressDialog;
    internal static string Resolve;
    internal static string ShelvesetDetails;
    internal static string SolutionIntegration;
    public static string SCE;
    internal static string UserTools;
    internal static string Vulcan;
    internal static string HandsOffHandsOn;
    internal static string DiffMerge;
    internal static string FindShelvesets;
    internal static string ChangesetDetails;
    internal static string LocalWorkspaces;
    private static VCTraceKeywords();
}
[EditorBrowsableAttribute("1")]
public class Microsoft.TeamFoundation.VersionControl.Common.VCTraceKeywordSets : TraceKeywordSets {
    public static String[] Annotate;
    public static String[] BranchVisualization;
    public static String[] Download;
    public static String[] Upload;
    public static String[] LocalWorkspaces;
    public static String[] FolderDiff;
    public static String[] GeneralVC;
    public static String[] Get;
    public static String[] History;
    public static String[] Label;
    public static String[] MyWork;
    public static String[] PendingChanges;
    public static String[] ProgressDialog;
    public static String[] Resolve;
    public static String[] ShelvesetDetails;
    public static String[] SolutionIntegration;
    public static String[] SCE;
    public static String[] UserTools;
    public static String[] Vulcan;
    public static String[] HandsOffHandsOn;
    public static String[] DiffMerge;
    public static String[] FindShelvesets;
    public static String[] ChangesetDetails;
    public static String[] CodeReview;
    private static VCTraceKeywordSets();
}
[EditorBrowsableAttribute("1")]
public static class Microsoft.TeamFoundation.VersionControl.Common.VersionControlConstants : object {
    public static int UpdateRevertToNotPresent;
    public static int NoRevertToUpdate;
}
[EditorBrowsableAttribute("1")]
public static class Microsoft.TeamFoundation.VersionControl.Common.VersionControlDebug : object {
    [ConditionalAttribute("DEBUG")]
public static void AssertIsServerItem(string path, string message);
    [ConditionalAttribute("DEBUG")]
public static void AssertIsNotServerItem(string path, string message);
    [ConditionalAttribute("DEBUG")]
public static void AssertIsTeamProject(string path, string message);
    [ConditionalAttribute("DEBUG")]
public static void AssertServerPathCanonicalized(bool preCondition, string path, PathLength maxServerPathLength, string message);
    [ConditionalAttribute("DEBUG")]
public static void AssertServerPathCanonicalized(string path, PathLength maxServerPathLength, string message);
    [ConditionalAttribute("DEBUG")]
public static void AssertLocalPathCanonicalized(string path, string message);
    [ConditionalAttribute("DEBUG")]
public static void AssertLocalFileExists(string path, string message);
    [ConditionalAttribute("DEBUG")]
public static void AssertLocalFileDoesNotExist(string path, string message);
    [ConditionalAttribute("DEBUG")]
public static void AssertLocalDirectoryExists(string path, string message);
    [ConditionalAttribute("DEBUG")]
public static void AssertLocalDirectoryDoesNotExist(string path, string message);
}
public static class Microsoft.TeamFoundation.VersionControl.Common.VersionControlPath : object {
    public static char Separator;
    public static string RootFolder;
    private static int s_maxAgeTempFilesToKeep;
    internal static int s_maxTemporaryFileRetries;
    private static int s_maxTempDirPlusExtensionPlusVersionPlusBaseFileLength;
    private static int s_maxTempDirPlusExtensionPlusVersionLength;
    private static int s_maxTempDirPlusExtensionLength;
    private static int s_maxTempDirLength;
    private static object s_getTempFileNameLock;
    private static IComparer`1<string> s_depthFirstTreeComparer;
    public static StringComparer FullPathComparer { get; }
    internal static StringComparer PartialPathComparer { get; }
    public static StringComparer StringComparer { get; }
    public static IComparer`1<string> DepthFirstTreeComparer { get; }
    private static VersionControlPath();
    public static bool IsServerItem(string path);
    public static bool IsValidFolderName(string name, String& error);
    public static string GetCommonParent(string path1, string path2);
    public static string GetFullPath(string item);
    public static string GetFullPath(string item, bool checkReservedCharacters);
    public static string GetFullPath(string item, PathLength maxPathLength);
    public static string GetFullPath(string item, bool checkReservedCharacters, PathLength maxPathLength);
    public static bool IsCanonicalizedPath(string serverItem, bool allowSemicolon);
    public static bool IsCanonicalizedPath(string serverItem, bool allowSemicolon, PathLength maxPathLength);
    private static bool IsCanonicalizedPathPart(string serverItem, int i, int pathPartLength, PathLength maxPathLength);
    public static bool IsValidPath(string serverItem);
    public static bool IsValidPath(string serverItem, PathLength maxPathLength);
    public static void ValidatePath(string serverItem);
    public static void ValidatePath(string serverItem, PathLength maxPathLength);
    public static void CheckForIllegalDollarInPath(string path);
    public static string Combine(string parent, string relative);
    public static string Combine(string parent, string relative, PathLength maxPathLength);
    public static void Parse(string item, String& parent, String& name);
    public static string GetFolderName(string item);
    public static int GetFolderDepth(string item);
    public static int GetFolderDepth(string item, int maxDepth);
    public static string GetFileName(string item);
    public static string GetFileName(string item, bool containsGuid);
    public static string GetExtension(string item);
    [EditorBrowsableAttribute("1")]
public static string GetTempFileName(string item, int version);
    [EditorBrowsableAttribute("1")]
public static string GetTempFileName(string item, string version);
    private static string CombinePathParts(string temporaryDirPath, string fileWithNoExtension, string version, int retryNumber, string extension);
    private static bool RecentFileExists(string path, String& currentOldestFile, DateTime& currentOldestTime);
    public static string GetTeamProjectName(string item);
    public static string GetTeamProjectName(string item, bool containsGuid, bool checkCanonicalization);
    public static string GetTeamProject(string item);
    public static string GetTeamProject(string item, bool containsGuid, bool checkCanonicalization);
    public static string GetTeamProjectNameAndRemainingPath(string item, String& remainingPath);
    public static bool IsRootFolder(string item);
    public static bool IsTeamProject(string item);
    public static string MakeRelative(string item, string folder);
    public static int GetRelativeStartIndex(string item, string folder);
    public static string MakeRelative(string item, string folder, bool recursive);
    public static string Combine(string baseLocalPath, string targetLocalPath, string baseServerPath);
    public static string Combine(string baseLocalPath, string targetLocalPath, string baseServerPath, PathLength maxServerPathLength);
    public static bool Equals(string item1, string item2);
    public static int Compare(string item1, string item2);
    public static int Compare(string item1, string item2, int item1Length, int item2Length);
    public static int CompareUI(string item1, string item2);
    public static int CompareUI(string item1, string item2, int item1Length, int item2Length);
    public static int CompareCaseSensitive(string item1, string item2);
    public static bool EqualsCaseSensitive(string item1, string item2);
    public static StringComparer get_FullPathComparer();
    internal static StringComparer get_PartialPathComparer();
    public static int CompareTopDown(string item1, string item2);
    public static int CompareTopDownUI(string item1, string item2);
    internal static int CompareBottomUp(string item1, string item2);
    internal static int CompareBottomUpUI(string item1, string item2);
    public static bool IsSubItem(string item, string parent);
    public static bool IsImmediateChild(string item, string parent);
    public static bool IsWildcard(string path);
    public static bool Match(string item, string matchFolder, string matchPattern, bool recursive);
    public static bool MatchFileName(string item, string matchPattern);
    public static string PrependRootIfNeeded(string folder);
    public static string PrependRootIfNeeded(string folder, PathLength maxPathLength);
    private static void BackupOneElement(StringBuilder sb, string item);
    private static bool StripTrailingChars(StringBuilder sb);
    public static StringComparer get_StringComparer();
    public static IComparer`1<string> get_DepthFirstTreeComparer();
}
public static class Microsoft.TeamFoundation.VersionControl.Common.VersionControlPropertyKinds : object {
    public static Guid Changeset;
    public static Guid VersionedItem;
    public static Guid Annotation;
    public static Guid Shelveset;
    public static Guid ImmutableVersionedItem;
    [ObsoleteAttribute("This no longer works on TFS 2015 and up.", "False")]
public static Guid PendingChange;
    private static VersionControlPropertyKinds();
}
[EditorBrowsableAttribute("1")]
public static class Microsoft.TeamFoundation.VersionControl.Common.VersionControlUtil : object {
    private static Regex s_8Dot3Checker;
    private static Int64[] s_subnetMasks;
    private static string c_tfvcArea;
    private static VersionControlUtil();
    public static string FormatWorkingFolderText(bool cloaked, string serverItem, string localFolder);
    public static string GetFullPath(string item);
    public static string GetFullPath(string item, PathLength maxServerPathLength);
    public static void GetFullPaths(String[] items);
    public static void GetFullPaths(String[] items, PathLength maxServerPathLength);
    public static bool IsLegalComment(string comment, int maxLength);
    public static RegistryKey GetOrCreateSubKey(RegistryKey parent, string keyName);
    public static RegistryKey GetSubKey(RegistryKey parent, string keyName, bool writable);
    public static DateTime GetLastWriteTime(string localPath);
    public static string GetWorkstationSiteName();
    public static string GetSiteName(string hostOrIP);
    public static int TranslatePermission(Type enumClass, String[] array, int allPermissions);
    public static ItemValidationError CheckItem(String& item, string parameterName, bool allowNull, bool allowWildcards, bool allow8Dot3Paths, bool checkReservedCharacters);
    public static ItemValidationError CheckItem(String& item, string parameterName, bool allowNull, bool allowWildcards, bool allow8Dot3Paths, bool checkReservedCharacters, PathLength maxServerPathLength);
    public static ItemValidationError CheckServerItem(String& item, string parameterName, bool allowNull, bool allowWildcards, bool allow8Dot3Paths, bool checkReservedCharacters);
    public static ItemValidationError CheckServerItem(String& item, string parameterName, bool allowNull, bool allowWildcards, bool allow8Dot3Paths, bool checkReservedCharacters, PathLength maxServerPathLength);
    public static ItemValidationError CheckLocalItem(string item, string parameterName, bool allowNull, bool allowWildcards, bool allow8Dot3Paths, bool checkReservedCharacters);
    public static int ConvertPathLengthToInt(PathLength pathLength);
    public static int GetMaxPathLengthComponent(PathLength pathLength);
    internal static void Check8Dot3Aliases(string item);
}
public static class Microsoft.TeamFoundation.VersionControl.Common.VersionControlWellKnownGroups : object {
    public static SecurityIdentifier ProxyServiceGroup;
    private static VersionControlWellKnownGroups();
}
[FlagsAttribute]
public enum Microsoft.TeamFoundation.VersionControl.Common.VersionedItemPermissions : Enum {
    public int value__;
    public static VersionedItemPermissions None;
    public static VersionedItemPermissions Read;
    public static VersionedItemPermissions PendChange;
    public static VersionedItemPermissions Checkin;
    public static VersionedItemPermissions Label;
    public static VersionedItemPermissions Lock;
    public static VersionedItemPermissions ReviseOther;
    public static VersionedItemPermissions UnlockOther;
    public static VersionedItemPermissions UndoOther;
    public static VersionedItemPermissions LabelOther;
    public static VersionedItemPermissions AdminProjectRights;
    public static VersionedItemPermissions CheckinOther;
    public static VersionedItemPermissions Merge;
    public static VersionedItemPermissions ManageBranch;
    public static VersionedItemPermissions All;
}
[EditorBrowsableAttribute("1")]
public static class Microsoft.TeamFoundation.VersionControl.Common.VersionSpecCommon : object {
    public static char RangeSeparator;
    private static Char[] s_versionSpecRangeDelims;
    public static char ChangesetIdentifier;
    public static char DateIdentifier;
    public static char LabelIdentifier;
    public static char LatestIdentifier;
    public static char WorkspaceIdentifier;
    private static VersionSpecCommon();
    public static object ParseSingleSpec(VersionSpecFactory factory, string versionSpec, string user, string userDisplay);
    public static Object[] Parse(VersionSpecFactory factory, string versionSpec, string user, string userDisplay);
    public static int ParseChangesetNumber(VersionSpecFactory factory, string changesetId);
    public static void ValidateNumber(VersionSpecFactory factory, int changesetId);
}
[EditorBrowsableAttribute("1")]
public abstract class Microsoft.TeamFoundation.VersionControl.Common.VersionSpecFactory : object {
    public abstract virtual object CreateVersionSpec(VersionSpecType type, string originalInput, Object[] parameters);
    public abstract virtual void ThrowInvalidVersionSpecException(string message);
}
[EditorBrowsableAttribute("1")]
public enum Microsoft.TeamFoundation.VersionControl.Common.VersionSpecType : Enum {
    public int value__;
    public static VersionSpecType Changeset;
    public static VersionSpecType Date;
    public static VersionSpecType Label;
    public static VersionSpecType Latest;
    public static VersionSpecType Workspace;
}
internal class Microsoft.TeamFoundation.VersionControl.Common.Vss : DiffOutput {
    private static int MaxWidth;
    private static int UnlimitedWidth;
    public virtual void Output(IList`1<DiffLine> original, IList`1<DiffLine> modified, IDiffChange[] diffList);
    protected void WriteElementRange(IList`1<DiffLine> sequence, string prefix, int startIndex, int endIndex, int maxLength);
    private void WriteVssRange(IList`1<DiffLine> sequence, string template, int startIndex, int endIndex, int maxLength);
    private void WriteSideBySideRange(IList`1<DiffLine> sequence, string middleText, int startIndex, int endIndex, int maxLength, Column column);
}
public enum Microsoft.TeamFoundation.VersionControl.Common.VssOutputType : Enum {
    public int value__;
    public static VssOutputType Vss;
    public static VssOutputType Unix;
    public static VssOutputType SideBySide;
}
public enum Microsoft.TeamFoundation.VersionControl.Common.WorkspaceLocation : Enum {
    public int value__;
    public static WorkspaceLocation Server;
    public static WorkspaceLocation Local;
}
[FlagsAttribute]
public enum Microsoft.TeamFoundation.VersionControl.Common.WorkspaceOptions : Enum {
    public int value__;
    public static WorkspaceOptions None;
    public static WorkspaceOptions SetFileTimeToCheckin;
}
public static class Microsoft.TeamFoundation.VersionControl.Common.WorkspaceSpec : object {
    private static string m_workspaceSeparator;
    public static char Separator { get; }
    public static string OwnerDisambiguationSeparatorStart { get; }
    public static string OwnerDisambiguationSeparatorEnd { get; }
    private static WorkspaceSpec();
    public static void Parse(string spec, string defaultUser, String& workspaceName, String& workspaceOwner);
    public static void Parse(string spec, string defaultUser, string defaultUserDisplay, String& workspaceName, String& workspaceOwner, String& workspaceOwnerDisplay);
    public static string Combine(string workspace, string owner);
    public static string Combine(string workspace, string ownerDisplay, string ownerUnique);
    public static bool IsLegalName(string workspaceName);
    public static string SanitizeProposedName(string proposedName);
    public static char get_Separator();
    public static string get_OwnerDisambiguationSeparatorStart();
    public static string get_OwnerDisambiguationSeparatorEnd();
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("2")]
internal class System.Runtime.CompilerServices.RefSafetyRulesAttribute : Attribute {
    public int Version;
    public RefSafetyRulesAttribute(int );
}
