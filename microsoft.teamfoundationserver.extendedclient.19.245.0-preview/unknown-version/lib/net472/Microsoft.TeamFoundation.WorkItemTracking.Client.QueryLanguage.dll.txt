[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
public class Microsoft.TeamFoundation.WorkItemTracking.Client.QueryLanguage.NodeParameters : object {
    [CompilerGeneratedAttribute]
private double <Offset>k__BackingField;
    private IList`1<NodeItem> m_arguments;
    public double Offset { get; public set; }
    public IList`1<NodeItem> Arguments { get; public set; }
    [CompilerGeneratedAttribute]
public double get_Offset();
    [CompilerGeneratedAttribute]
public void set_Offset(double value);
    public IList`1<NodeItem> get_Arguments();
    public void set_Arguments(IList`1<NodeItem> value);
}
[EditorBrowsableAttribute("1")]
public enum Microsoft.TeamFoundation.WorkItemTracking.Client.Wiql.Arithmetic : Enum {
    public int value__;
    public static Arithmetic None;
    public static Arithmetic Add;
    public static Arithmetic Subtract;
}
[EditorBrowsableAttribute("1")]
public static class Microsoft.TeamFoundation.WorkItemTracking.Client.Wiql.ArithmeticalOperators : object {
    private static String[] s_Strings;
    private static ArithmeticalOperators();
    public static Arithmetic Find(string op);
    public static string GetString(Arithmetic op);
}
[EditorBrowsableAttribute("1")]
public enum Microsoft.TeamFoundation.WorkItemTracking.Client.Wiql.Condition : Enum {
    public int value__;
    public static Condition None;
    public static Condition Equals;
    public static Condition NotEquals;
    public static Condition Less;
    public static Condition Greater;
    public static Condition LessOrEquals;
    public static Condition GreaterOrEquals;
    public static Condition Under;
    public static Condition In;
    public static Condition Contains;
    public static Condition ContainsWords;
    public static Condition Group;
    public static Condition IsEmpty;
    public static Condition IsNotEmpty;
    public static Condition EqualsAlias;
    public static Condition NotEqualsAlias;
}
[EditorBrowsableAttribute("1")]
public static class Microsoft.TeamFoundation.WorkItemTracking.Client.Wiql.ConditionalOperators : object {
    private static String[] s_Strings;
    private static ConditionalOperators();
    public static Condition Find(string op);
    public static string GetString(Condition condition);
}
[EditorBrowsableAttribute("1")]
public enum Microsoft.TeamFoundation.WorkItemTracking.Client.Wiql.DataType : Enum {
    public int value__;
    public static DataType Unknown;
    public static DataType Void;
    public static DataType Bool;
    public static DataType Numeric;
    public static DataType Date;
    public static DataType String;
    public static DataType Table;
    public static DataType Guid;
}
[EditorBrowsableAttribute("1")]
public enum Microsoft.TeamFoundation.WorkItemTracking.Client.Wiql.Direction : Enum {
    public int value__;
    public static Direction Unknown;
    public static Direction Ascending;
    public static Direction Descending;
}
[EditorBrowsableAttribute("1")]
public interface Microsoft.TeamFoundation.WorkItemTracking.Client.Wiql.IExternal {
    public CultureInfo CultureInfo { get; }
    public TimeZone TimeZone { get; }
    public abstract virtual object FindTable(string name);
    public abstract virtual object FindField(string name, string prefix, object tableTag);
    public abstract virtual DataType GetFieldDataType(object fieldTag);
    public abstract virtual void VerifyNode(Node node, NodeTableName tableContext, NodeFieldName fieldContext);
    public abstract virtual Node OptimizeNode(Node node, NodeTableName tableContext, NodeFieldName fieldContext);
    public abstract virtual object FindVariable(string name, NodeParameters parameters);
    public abstract virtual DataType GetVariableDataType(string name);
    public abstract virtual bool DoesMacroExtensionHandleOffset(string name);
    public abstract virtual CultureInfo get_CultureInfo();
    public abstract virtual TimeZone get_TimeZone();
    public abstract virtual void ValidateParameters(string macroName, NodeTableName tableContext, NodeFieldName fieldContext, NodeParameters parameters);
}
internal enum Microsoft.TeamFoundation.WorkItemTracking.Client.Wiql.LinkQueryMode : Enum {
    public int value__;
    public static LinkQueryMode Unknown;
    public static LinkQueryMode WorkItems;
    public static LinkQueryMode LinksMustContain;
    public static LinkQueryMode LinksMayContain;
    public static LinkQueryMode LinksDoesNotContain;
    public static LinkQueryMode LinksRecursive;
    public static LinkQueryMode LinksRecursiveReturnMatchingChildren;
}
[DefaultMemberAttribute("Item")]
[EditorBrowsableAttribute("1")]
public abstract class Microsoft.TeamFoundation.WorkItemTracking.Client.Wiql.Node : object {
    private NodeType m_nodeType;
    private int m_startOffset;
    private int m_endOffset;
    [CompilerGeneratedAttribute]
private bool <HasParentheses>k__BackingField;
    public NodeType NodeType { get; }
    public bool HasParentheses { get; public set; }
    public DataType DataType { get; }
    public bool IsConst { get; }
    public Priority Priority { get; }
    public bool IsScalar { get; }
    public int Count { get; }
    public Node Item { get; public set; }
    public string ConstStringValue { get; }
    public int StartOffset { get; public set; }
    public int EndOffset { get; public set; }
    protected Node(NodeType type);
    public NodeType get_NodeType();
    [CompilerGeneratedAttribute]
public bool get_HasParentheses();
    [CompilerGeneratedAttribute]
public void set_HasParentheses(bool value);
    public abstract virtual DataType get_DataType();
    public abstract virtual bool get_IsConst();
    public abstract virtual Priority get_Priority();
    public abstract virtual bool get_IsScalar();
    public abstract virtual int get_Count();
    public abstract virtual Node get_Item(int i);
    public abstract virtual void set_Item(int i, Node value);
    public abstract virtual void AppendTo(StringBuilder builder);
    public virtual bool CanCastTo(DataType type, CultureInfo culture);
    public virtual string get_ConstStringValue();
    public virtual void Bind(IExternal external, NodeTableName tableContext, NodeFieldName fieldContext);
    public virtual Node Optimize(IExternal external, NodeTableName tableContext, NodeFieldName fieldContext);
    public virtual void CheckPrefix(String& prefix);
    public virtual void SetPrefix(string prefix);
    public int get_StartOffset();
    public void set_StartOffset(int value);
    public int get_EndOffset();
    public void set_EndOffset(int value);
    public Node FindNodeByOffset(int offset);
    public void Walk(Action`1<Node> visit);
    public virtual string ToString();
    protected void AppendChildren(StringBuilder builder, string sep);
    protected DataType GetChildrenDataType();
    protected bool GetChildrenIsConst();
    protected bool GetChildrenCanCastTo(DataType type, CultureInfo culture);
    protected void BindChildren(IExternal external, NodeTableName tableContext, NodeFieldName fieldContext);
    protected void OptimizeChildren(IExternal external, NodeTableName tableContext, NodeFieldName fieldContext);
    public sealed virtual IEnumerator GetEnumerator();
}
[EditorBrowsableAttribute("1")]
public class Microsoft.TeamFoundation.WorkItemTracking.Client.Wiql.NodeAndOperator : NodeVariableList {
    public DataType DataType { get; }
    public Priority Priority { get; }
    public virtual DataType get_DataType();
    public virtual Priority get_Priority();
    public virtual void AppendTo(StringBuilder builder);
    public virtual void Bind(IExternal external, NodeTableName tableContext, NodeFieldName fieldContext);
    public virtual Node Optimize(IExternal external, NodeTableName tableContext, NodeFieldName fieldContext);
}
[EditorBrowsableAttribute("1")]
public class Microsoft.TeamFoundation.WorkItemTracking.Client.Wiql.NodeArithmetic : NodeList {
    private Arithmetic m_operator;
    public Arithmetic Arithmetic { get; public set; }
    public DataType DataType { get; }
    public Priority Priority { get; }
    public Node Left { get; public set; }
    public Node Right { get; public set; }
    public Arithmetic get_Arithmetic();
    public void set_Arithmetic(Arithmetic value);
    public virtual DataType get_DataType();
    public virtual Priority get_Priority();
    public virtual void AppendTo(StringBuilder builder);
    public Node get_Left();
    public void set_Left(Node value);
    public Node get_Right();
    public void set_Right(Node value);
    public virtual void Bind(IExternal external, NodeTableName tableContext, NodeFieldName fieldContext);
    public virtual Node Optimize(IExternal external, NodeTableName tableContext, NodeFieldName fieldContext);
}
[DefaultMemberAttribute("Item")]
[EditorBrowsableAttribute("1")]
public class Microsoft.TeamFoundation.WorkItemTracking.Client.Wiql.NodeBoolConst : Node {
    private bool m_bool;
    public bool Value { get; }
    public DataType DataType { get; }
    public bool IsConst { get; }
    public bool IsScalar { get; }
    public Priority Priority { get; }
    public int Count { get; }
    public Node Item { get; public set; }
    public NodeBoolConst(bool value);
    public bool get_Value();
    public virtual DataType get_DataType();
    public virtual bool get_IsConst();
    public virtual bool get_IsScalar();
    public virtual Priority get_Priority();
    public virtual int get_Count();
    public virtual Node get_Item(int i);
    public virtual void set_Item(int i, Node value);
    public virtual void AppendTo(StringBuilder b);
}
[EditorBrowsableAttribute("1")]
public class Microsoft.TeamFoundation.WorkItemTracking.Client.Wiql.NodeBoolValue : NodeItem {
    private bool m_b;
    public DataType DataType { get; }
    public bool IsConst { get; }
    public string ConstStringValue { get; }
    public bool BoolValue { get; }
    public NodeBoolValue(bool value);
    public virtual DataType get_DataType();
    public virtual bool get_IsConst();
    public virtual string get_ConstStringValue();
    public virtual bool CanCastTo(DataType type, CultureInfo culture);
    public virtual void Bind(IExternal e, NodeTableName tableContext, NodeFieldName fieldContext);
    public bool get_BoolValue();
}
[EditorBrowsableAttribute("1")]
public class Microsoft.TeamFoundation.WorkItemTracking.Client.Wiql.NodeCondition : NodeList {
    private Condition m_condition;
    public Condition Condition { get; public set; }
    public DataType DataType { get; }
    public Priority Priority { get; }
    public NodeFieldName Left { get; public set; }
    public Node Right { get; public set; }
    public NodeCondition(Condition condition, NodeFieldName left, Node right);
    public Condition get_Condition();
    public void set_Condition(Condition value);
    public virtual DataType get_DataType();
    public virtual Priority get_Priority();
    public virtual void AppendTo(StringBuilder builder);
    public NodeFieldName get_Left();
    public void set_Left(NodeFieldName value);
    public Node get_Right();
    public void set_Right(Node value);
    public virtual void Bind(IExternal external, NodeTableName tableContext, NodeFieldName fieldContext);
    public virtual Node Optimize(IExternal external, NodeTableName tableContext, NodeFieldName fieldContext);
}
internal class Microsoft.TeamFoundation.WorkItemTracking.Client.Wiql.NodeEnumerator : object {
    private int m_index;
    private Node m_node;
    public object Current { get; }
    internal NodeEnumerator(Node node);
    public sealed virtual void Reset();
    public sealed virtual object get_Current();
    public sealed virtual bool MoveNext();
}
[DefaultMemberAttribute("Item")]
[EditorBrowsableAttribute("1")]
public class Microsoft.TeamFoundation.WorkItemTracking.Client.Wiql.NodeEverOperator : Node {
    private Node m_child;
    public DataType DataType { get; }
    public bool IsConst { get; }
    public bool IsScalar { get; }
    public Priority Priority { get; }
    public int Count { get; }
    public Node Item { get; public set; }
    public Node Value { get; public set; }
    public NodeEverOperator(Node node);
    public virtual DataType get_DataType();
    public virtual bool get_IsConst();
    public virtual bool get_IsScalar();
    public virtual Priority get_Priority();
    public virtual int get_Count();
    public virtual Node get_Item(int i);
    public virtual void set_Item(int i, Node value);
    public Node get_Value();
    public void set_Value(Node value);
    public virtual void AppendTo(StringBuilder builder);
    public virtual void Bind(IExternal external, NodeTableName tableContext, NodeFieldName fieldContext);
    public virtual Node Optimize(IExternal external, NodeTableName tableContext, NodeFieldName fieldContext);
}
[DefaultMemberAttribute("Item")]
[EditorBrowsableAttribute("1")]
public class Microsoft.TeamFoundation.WorkItemTracking.Client.Wiql.NodeFieldList : NodeVariableList {
    public Priority Priority { get; }
    public NodeFieldName Item { get; public set; }
    public NodeFieldList(NodeType nodeType);
    public virtual Priority get_Priority();
    public NodeFieldName get_Item(int i);
    public void set_Item(int i, NodeFieldName value);
    public virtual void Bind(IExternal external, NodeTableName tableContext, NodeFieldName fieldContext);
    public virtual Node Optimize(IExternal external, NodeTableName tableContext, NodeFieldName fieldContext);
}
[EditorBrowsableAttribute("1")]
public class Microsoft.TeamFoundation.WorkItemTracking.Client.Wiql.NodeFieldName : NodeItem {
    private DataType m_type;
    private object m_tag;
    private Direction m_direction;
    private Nullable`1<bool> m_nullsFirst;
    private string m_prefix;
    public object Tag { get; public set; }
    public Direction Direction { get; public set; }
    public Nullable`1<bool> NullsFirst { get; public set; }
    public string Prefix { get; public set; }
    public DataType DataType { get; }
    public bool IsConst { get; }
    public NodeFieldName(string s);
    public NodeFieldName(string prefix, string s);
    public NodeFieldName(NodeName prefix, NodeName n);
    public NodeFieldName(NodeName n);
    public object get_Tag();
    public void set_Tag(object value);
    public Direction get_Direction();
    public void set_Direction(Direction value);
    public Nullable`1<bool> get_NullsFirst();
    public void set_NullsFirst(Nullable`1<bool> value);
    public string get_Prefix();
    public void set_Prefix(string value);
    public virtual DataType get_DataType();
    public virtual bool get_IsConst();
    public virtual void AppendTo(StringBuilder builder);
    public virtual void Bind(IExternal external, NodeTableName tableContext, NodeFieldName fieldContext);
    public virtual void CheckPrefix(String& prefix);
    public virtual void SetPrefix(string prefix);
}
[DefaultMemberAttribute("Item")]
[EditorBrowsableAttribute("1")]
public abstract class Microsoft.TeamFoundation.WorkItemTracking.Client.Wiql.NodeItem : Node {
    private string m_string;
    public string Value { get; public set; }
    public bool IsScalar { get; }
    public Priority Priority { get; }
    public int Count { get; }
    public Node Item { get; public set; }
    protected NodeItem(NodeType type, string s);
    public string get_Value();
    public void set_Value(string value);
    public virtual bool get_IsScalar();
    public virtual Priority get_Priority();
    public virtual int get_Count();
    public virtual Node get_Item(int i);
    public virtual void set_Item(int i, Node value);
    public virtual void AppendTo(StringBuilder builder);
}
[DefaultMemberAttribute("Item")]
[EditorBrowsableAttribute("1")]
public abstract class Microsoft.TeamFoundation.WorkItemTracking.Client.Wiql.NodeList : Node {
    private Node[] m_array;
    public DataType DataType { get; }
    public bool IsConst { get; }
    public bool IsScalar { get; }
    public int Count { get; }
    public Node Item { get; public set; }
    protected NodeList(NodeType type, int count);
    public virtual DataType get_DataType();
    public virtual bool get_IsConst();
    public virtual bool get_IsScalar();
    public virtual int get_Count();
    public virtual Node get_Item(int i);
    public virtual void set_Item(int i, Node value);
    public virtual void AppendTo(StringBuilder builder);
}
[EditorBrowsableAttribute("1")]
public class Microsoft.TeamFoundation.WorkItemTracking.Client.Wiql.NodeMode : NodeVariableList {
    public Priority Priority { get; }
    public virtual Priority get_Priority();
}
[EditorBrowsableAttribute("1")]
public class Microsoft.TeamFoundation.WorkItemTracking.Client.Wiql.NodeName : NodeItem {
    public DataType DataType { get; }
    public bool IsConst { get; }
    public NodeName(string s);
    public virtual DataType get_DataType();
    public virtual bool get_IsConst();
    public virtual void AppendTo(StringBuilder builder);
}
[DefaultMemberAttribute("Item")]
[EditorBrowsableAttribute("1")]
public class Microsoft.TeamFoundation.WorkItemTracking.Client.Wiql.NodeNotOperator : Node {
    private Node m_child;
    public DataType DataType { get; }
    public bool IsConst { get; }
    public bool IsScalar { get; }
    public Priority Priority { get; }
    public int Count { get; }
    public Node Item { get; public set; }
    public Node Value { get; public set; }
    public NodeNotOperator(Node node);
    public virtual DataType get_DataType();
    public virtual bool get_IsConst();
    public virtual bool get_IsScalar();
    public virtual Priority get_Priority();
    public virtual int get_Count();
    public virtual Node get_Item(int i);
    public virtual void set_Item(int i, Node value);
    public Node get_Value();
    public void set_Value(Node value);
    public virtual void AppendTo(StringBuilder builder);
    public virtual void Bind(IExternal e, NodeTableName tableContext, NodeFieldName fieldContext);
    public virtual Node Optimize(IExternal e, NodeTableName tableContext, NodeFieldName fieldContext);
}
[EditorBrowsableAttribute("1")]
public class Microsoft.TeamFoundation.WorkItemTracking.Client.Wiql.NodeNumber : NodeItem {
    public DataType DataType { get; }
    public bool IsConst { get; }
    public string ConstStringValue { get; }
    public NodeNumber(string s);
    public virtual DataType get_DataType();
    public virtual bool get_IsConst();
    public virtual string get_ConstStringValue();
    public virtual bool CanCastTo(DataType type, CultureInfo culture);
    public virtual void Bind(IExternal e, NodeTableName tableContext, NodeFieldName fieldContext);
}
internal class Microsoft.TeamFoundation.WorkItemTracking.Client.Wiql.NodeOperation : NodeItem {
    public DataType DataType { get; }
    public bool IsConst { get; }
    public NodeOperation(string s);
    public virtual DataType get_DataType();
    public virtual bool get_IsConst();
}
[EditorBrowsableAttribute("1")]
public class Microsoft.TeamFoundation.WorkItemTracking.Client.Wiql.NodeOrOperator : NodeVariableList {
    public DataType DataType { get; }
    public Priority Priority { get; }
    public virtual DataType get_DataType();
    public virtual Priority get_Priority();
    public virtual void AppendTo(StringBuilder builder);
    public virtual void Bind(IExternal external, NodeTableName tableContext, NodeFieldName fieldContext);
    public virtual Node Optimize(IExternal external, NodeTableName tableContext, NodeFieldName fieldContext);
}
[EditorBrowsableAttribute("1")]
public class Microsoft.TeamFoundation.WorkItemTracking.Client.Wiql.NodeSelect : NodeList {
    public DataType DataType { get; }
    public Priority Priority { get; }
    public NodeFieldList Fields { get; public set; }
    public NodeTableName From { get; public set; }
    public Node Where { get; public set; }
    public NodeFieldList GroupBy { get; public set; }
    public NodeFieldList OrderBy { get; public set; }
    public Node AsOf { get; public set; }
    public NodeMode Mode { get; public set; }
    public virtual DataType get_DataType();
    public virtual Priority get_Priority();
    public NodeFieldList get_Fields();
    public void set_Fields(NodeFieldList value);
    public NodeTableName get_From();
    public void set_From(NodeTableName value);
    public Node get_Where();
    public void set_Where(Node value);
    public NodeFieldList get_GroupBy();
    public void set_GroupBy(NodeFieldList value);
    public NodeFieldList get_OrderBy();
    public void set_OrderBy(NodeFieldList value);
    public Node get_AsOf();
    public void set_AsOf(Node value);
    public NodeMode get_Mode();
    public void set_Mode(NodeMode value);
    public virtual void AppendTo(StringBuilder builder);
    public virtual void Bind(IExternal external, NodeTableName tableContext, NodeFieldName fieldContext);
    public virtual Node Optimize(IExternal e, NodeTableName tableContext, NodeFieldName fieldContext);
    public Dictionary`2<string, NodeAndOperator> GetWhereGroups();
}
[EditorBrowsableAttribute("1")]
public class Microsoft.TeamFoundation.WorkItemTracking.Client.Wiql.NodeString : NodeItem {
    public DataType DataType { get; }
    public bool IsConst { get; }
    public string ConstStringValue { get; }
    public NodeString(string s);
    public virtual DataType get_DataType();
    public virtual bool get_IsConst();
    public virtual string get_ConstStringValue();
    public virtual bool CanCastTo(DataType type, CultureInfo culture);
    public virtual void AppendTo(StringBuilder builder);
}
[EditorBrowsableAttribute("1")]
public class Microsoft.TeamFoundation.WorkItemTracking.Client.Wiql.NodeTableName : NodeItem {
    private object m_tag;
    public object Tag { get; public set; }
    public DataType DataType { get; }
    public bool IsConst { get; }
    public NodeTableName(string s);
    public NodeTableName(NodeName n);
    public object get_Tag();
    public void set_Tag(object value);
    public virtual DataType get_DataType();
    public virtual bool get_IsConst();
    public virtual void AppendTo(StringBuilder builder);
    public virtual void Bind(IExternal external, NodeTableName tableContext, NodeFieldName fieldContext);
}
[EditorBrowsableAttribute("1")]
public enum Microsoft.TeamFoundation.WorkItemTracking.Client.Wiql.NodeType : Enum {
    public int value__;
    public static NodeType Number;
    public static NodeType Name;
    public static NodeType String;
    public static NodeType Operation;
    public static NodeType Select;
    public static NodeType FieldName;
    public static NodeType FieldList;
    public static NodeType OrderFieldList;
    public static NodeType GroupFieldList;
    public static NodeType TableName;
    public static NodeType FieldCondition;
    public static NodeType ValueList;
    public static NodeType BoolConst;
    public static NodeType BoolValue;
    public static NodeType Not;
    public static NodeType Ever;
    public static NodeType And;
    public static NodeType Or;
    public static NodeType Variable;
    public static NodeType Arithmetic;
    public static NodeType Mode;
}
[EditorBrowsableAttribute("1")]
public class Microsoft.TeamFoundation.WorkItemTracking.Client.Wiql.NodeValueList : NodeVariableList {
    public Priority Priority { get; }
    public virtual Priority get_Priority();
    public virtual bool CanCastTo(DataType type, CultureInfo culture);
    public virtual void Bind(IExternal e, NodeTableName tableContext, NodeFieldName fieldContext);
    public virtual Node Optimize(IExternal e, NodeTableName tableContext, NodeFieldName fieldContext);
}
[EditorBrowsableAttribute("1")]
public class Microsoft.TeamFoundation.WorkItemTracking.Client.Wiql.NodeVariable : NodeItem {
    private DataType m_type;
    public bool m_doesMacroExtensionHandleOffset;
    private object m_tag;
    private NodeParameters m_parameters;
    public NodeParameters Parameters { get; }
    public object Tag { get; }
    public DataType DataType { get; }
    public bool DoesMacroExtensionHandleOffset { get; }
    public bool IsConst { get; }
    public NodeVariable(string s);
    public NodeParameters get_Parameters();
    public object get_Tag();
    public virtual DataType get_DataType();
    public bool get_DoesMacroExtensionHandleOffset();
    public virtual bool get_IsConst();
    public virtual void AppendTo(StringBuilder builder);
    public object GetVariableValue(IExternal external, IDictionary context);
    public virtual void Bind(IExternal external, NodeTableName tableContext, NodeFieldName fieldContext);
}
[DefaultMemberAttribute("Item")]
[EditorBrowsableAttribute("1")]
public abstract class Microsoft.TeamFoundation.WorkItemTracking.Client.Wiql.NodeVariableList : Node {
    private List`1<Node> m_list;
    public DataType DataType { get; }
    public bool IsConst { get; }
    public bool IsScalar { get; }
    public int Count { get; }
    public Node Item { get; public set; }
    protected NodeVariableList(NodeType type);
    public virtual DataType get_DataType();
    public virtual bool get_IsConst();
    public virtual bool get_IsScalar();
    public virtual int get_Count();
    public virtual Node get_Item(int i);
    public virtual void set_Item(int i, Node value);
    public void RemoveAt(int i);
    public void Add(Node node);
    public void Clear();
    public void Insert(int i, Node node);
    public virtual void AppendTo(StringBuilder builder);
}
[EditorBrowsableAttribute("1")]
public class Microsoft.TeamFoundation.WorkItemTracking.Client.Wiql.Parser : object {
    public static List`1<Node> ParseLexems(string s);
    public static NodeSelect ParseSyntax(string wiql);
}
[EditorBrowsableAttribute("1")]
public enum Microsoft.TeamFoundation.WorkItemTracking.Client.Wiql.Priority : Enum {
    public int value__;
    public static Priority Operand;
    public static Priority AddOperator;
    public static Priority ConditionalOperator;
    public static Priority UnaryBoolOperator;
    public static Priority AndOperator;
    public static Priority OrOperator;
    public static Priority CommaOperator;
    public static Priority SelectOperator;
}
[EditorBrowsableAttribute("1")]
public static class Microsoft.TeamFoundation.WorkItemTracking.Client.Wiql.ResourceStrings : object {
    private static ResourceManager s_resMgr;
    public static string DateConstantFormat;
    public static string DuplicateFrom;
    public static string DuplicateGroupBy;
    public static string DuplicateOrderBy;
    public static string DuplicateWhere;
    public static string DuplicateAsOf;
    public static string DuplicateRecursive;
    public static string EverNotEqualOperator;
    public static string ExpectingBoolean;
    public static string ExpectingBy;
    public static string ExpectingClosingQuote;
    public static string ExpectingClosingSquareBracket;
    public static string ExpectingComparisonOperator;
    public static string ExpectingCondition;
    public static string ExpectingConst;
    public static string ExpectingEndOfString;
    public static string ExpectingFieldList;
    public static string ExpectingFieldName;
    public static string ExpectingFieldOrExpression;
    public static string ExpectingLeftBracket;
    public static string ExpectingRightBracket;
    public static string ExpectingSelect;
    public static string ExpectingTableName;
    public static string ExpectingValue;
    public static string ExpectingDate;
    public static string ExpectingExpression;
    public static string FieldDoesNotExistInTheTable;
    public static string InvalidFieldPrefixInLinkQueries;
    public static string GroupByIsNotSupported;
    public static string IncompatibleConditionPartsType;
    public static string InOperatorWithTreePathField;
    public static string InvalidConditionalOperator;
    public static string InvalidNodeType;
    public static string ContainsWorksForStringsOnly;
    public static string NoError;
    public static string PathMustBeAStringNotStartingWithBackslash;
    public static string StringIsNotANumber;
    public static string TableDoesNotExist;
    public static string TooComplexEverOperator;
    public static string AreaPathIsNotFoundInHierarchy;
    public static string IterationPathIsNotFoundInHierarchy;
    public static string UnderCanBeUsedForTreePathFieldOnly;
    public static string UnknownFieldType;
    public static string UnknownOrIncompatibleTypesInTheList;
    public static string FromIsNotSpecified;
    public static string FromIsNotSpecifiedFoundInFields;
    public static string InvalidConditionForLongTextField;
    public static string NonQueryableField;
    public static string NonSortableField;
    public static string InvalidConditionForTreeField;
    public static string VariableDoesNotExist;
    public static string UnknownVariableType;
    public static string InvalidConditionForNodeField;
    public static string InvalidProjectName;
    public static string ProjectNotFound;
    public static string WrongTypeForArithmetic;
    public static string InvalidLongTextSearchForWhitespace;
    public static string WrongTypeForArithmeticRightOperand;
    public static string NonZeroTime;
    public static string DetailedMessage;
    public static string InvalidConditionForEmptyString;
    public static string EverWithDatePrecision;
    public static string MixedPrefixes;
    public static string EverWithLinkQuery;
    public static string InvalidConditionForLinkType;
    public static string InvalidLinkTypeName;
    public static string NotSupportedTreeQuery;
    public static string ExpectingNumberAfterOp;
    public static string ExpectingEmptyAfterIsNot;
    public static string ExpectingEmptyNotEmptyAfterIs;
    public static string TreeQueryNeedsOneLinkType;
    public static string RecursiveOnWorkItems;
    public static string ExpectingMode;
    public static string UnknownMode;
    public static string ModeOnWorkItems;
    public static string OrderByLinkField;
    public static string InvalidLinkTypeNameRecursive;
    public static string EmptyName;
    public static string DuplicateOrderByField;
    public static string InvalidRightExpressionInCondition;
    public static string FieldConditionsInLinkQueries;
    public static string InvalidFieldTypeForCondition;
    public static string MacroUndefined;
    public static string ProjectMacroUndefined;
    public static ResourceManager Manager { get; }
    private static ResourceStrings();
    public static ResourceManager get_Manager();
    public static string Get(string resourceName);
    public static string Get(string resourceName, CultureInfo culture);
    public static int GetInt(string resourceName);
    public static int GetInt(string resourceName, CultureInfo culture);
    public static bool GetBool(string resourceName);
    public static bool GetBool(string resourceName, CultureInfo culture);
    public static string Format(string resourceName, Object[] args);
    public static string Format(string resourceName, CultureInfo culture, Object[] args);
}
internal class Microsoft.TeamFoundation.WorkItemTracking.Client.Wiql.Scanner : object {
    private List`1<Node> m_tokens;
    private int m_pos;
    public Scanner(List`1<Node> tokens);
    private void ThrowSyntaxError(SyntaxError err);
    private NodeItem NextToken();
    private NodeItem ScanToken(NodeType type, string str);
    private NodeItem EnsureToken(NodeType type, string str, SyntaxError err);
    private NodeFieldName ScanFieldName(NodeTableName table);
    private bool TryScanFieldName(Node& node);
    private NodeTableName ScanTableName();
    private NodeFieldList ScanFieldNameList(bool direction, NodeType nodeType);
    private Condition ScanConditionOperator(bool afterNotOrEver, Int32& endOffset);
    private Node ScanValueList(NodeTableName table);
    private NodeMode ScanMode();
    private bool TryScanExpression(Node& node);
    private Node ScanExpression(NodeTableName table);
    private Node ScanVariableParameters(NodeVariable variable);
    private bool TryScanSingleValue(Node& node);
    private Node ScanValue(NodeTableName table);
    private Node ScanConditionExpression(NodeTableName table);
    private Node ScanConditionNotEver(NodeTableName table);
    private Node ScanConditionAnd(NodeTableName table);
    private Node ScanConditionOr(NodeTableName table);
    private Node ScanWhere(NodeTableName table);
    private NodeSelect ScanSelect();
    private bool FieldsHasFrom(NodeFieldList fields);
    public NodeSelect Scan();
    public void CheckTail();
}
[EditorBrowsableAttribute("1")]
public enum Microsoft.TeamFoundation.WorkItemTracking.Client.Wiql.SyntaxError : Enum {
    public int value__;
    public static SyntaxError NoError;
    public static SyntaxError DateConstantFormat;
    public static SyntaxError DuplicateFrom;
    public static SyntaxError DuplicateGroupBy;
    public static SyntaxError DuplicateOrderBy;
    public static SyntaxError DuplicateWhere;
    public static SyntaxError DuplicateAsOf;
    public static SyntaxError DuplicateMode;
    public static SyntaxError EverNotEqualOperator;
    public static SyntaxError ExpectingBoolean;
    public static SyntaxError ExpectingBy;
    public static SyntaxError ExpectingClosingQuote;
    public static SyntaxError ExpectingClosingSquareBracket;
    public static SyntaxError ExpectingComparisonOperator;
    public static SyntaxError ExpectingCondition;
    public static SyntaxError ExpectingConst;
    public static SyntaxError ExpectingEndOfString;
    public static SyntaxError ExpectingFieldList;
    public static SyntaxError ExpectingFieldName;
    public static SyntaxError ExpectingFirstOrLast;
    public static SyntaxError ExpectingLeftBracket;
    public static SyntaxError ExpectingRightBracket;
    public static SyntaxError ExpectingSelect;
    public static SyntaxError ExpectingTableName;
    public static SyntaxError ExpectingValue;
    public static SyntaxError ExpectingDate;
    public static SyntaxError ExpectingMode;
    public static SyntaxError ExpectingExpression;
    public static SyntaxError ExpectingFieldOrExpression;
    public static SyntaxError EmptyName;
    public static SyntaxError FieldDoesNotExistInTheTable;
    public static SyntaxError GroupByIsNotSupported;
    public static SyntaxError InOperatorWithTreePathField;
    public static SyntaxError IncompatibleRightConst;
    public static SyntaxError InvalidConditionalOperator;
    public static SyntaxError InvalidNodeType;
    public static SyntaxError ContainsWorksForStringsOnly;
    public static SyntaxError NonSortableField;
    public static SyntaxError PathMustBeAStringNotStartingWithBackslash;
    public static SyntaxError StringIsNotANumber;
    public static SyntaxError TableDoesNotExist;
    public static SyntaxError TooComplexEverOperator;
    public static SyntaxError AreaPathIsNotFoundInHierarchy;
    public static SyntaxError IterationPathIsNotFoundInHierarchy;
    public static SyntaxError UnderCanBeUsedForTreePathFieldOnly;
    public static SyntaxError UnknownFieldType;
    public static SyntaxError UnknownOrIncompatibleTypesInTheList;
    public static SyntaxError FromIsNotSpecified;
    public static SyntaxError InvalidConditionForLongTextField;
    public static SyntaxError InvalidConditionForTreeField;
    public static SyntaxError NonQueryableField;
    public static SyntaxError VariableDoesNotExist;
    public static SyntaxError UnknownVariableType;
    public static SyntaxError InvalidConditionForNodeField;
    public static SyntaxError InvalidProjectName;
    public static SyntaxError ProjectNotFound;
    public static SyntaxError WrongTypeForArithmetic;
    public static SyntaxError InvalidLongTextSearchForWhitespace;
    public static SyntaxError WrongTypeForArithmeticRightOperand;
    public static SyntaxError NonZeroTime;
    public static SyntaxError InvalidConditionForEmptyString;
    public static SyntaxError EverWithDatePrecision;
    public static SyntaxError MixedPrefixes;
    public static SyntaxError EverWithLinkQuery;
    public static SyntaxError InvalidConditionForLinkType;
    public static SyntaxError InvalidLinkTypeName;
    public static SyntaxError NotSupportedTreeQuery;
    public static SyntaxError IncorrectQueryMethod;
    public static SyntaxError TreeQueryNeedsOneLinkType;
    public static SyntaxError RecursiveOnWorkItems;
    public static SyntaxError UnknownMode;
    public static SyntaxError ModeOnWorkItems;
    public static SyntaxError OrderByLinkField;
    public static SyntaxError InvalidLinkTypeNameRecursive;
    public static SyntaxError DuplicateOrderByField;
    public static SyntaxError IncompatibleConditionPartsType;
    public static SyntaxError InvalidRightExpressionInCondition;
    public static SyntaxError FieldConditionsInLinkQueries;
    public static SyntaxError InvalidFieldTypeForCondition;
    public static SyntaxError InvalidFieldPrefixInLinkQueries;
    public static SyntaxError FromIsNotSpecifiedFoundInFields;
}
[EditorBrowsableAttribute("1")]
public class Microsoft.TeamFoundation.WorkItemTracking.Client.Wiql.SyntaxException : ApplicationException {
    private Node m_node;
    private SyntaxError m_code;
    public Node Node { get; }
    public SyntaxError SyntaxError { get; }
    public string Details { get; }
    protected SyntaxException(SerializationInfo info, StreamingContext context);
    public SyntaxException(Node node, SyntaxError err);
    public SyntaxException(string message);
    public Node get_Node();
    public SyntaxError get_SyntaxError();
    public string get_Details();
    private static string GetDetailMessage(Node node, SyntaxError code);
}
[EditorBrowsableAttribute("1")]
public static class Microsoft.TeamFoundation.WorkItemTracking.Client.Wiql.Tools : object {
    public static void AppendName(StringBuilder builder, string name);
    public static void AppendString(StringBuilder builder, string token);
    public static bool IsNumericString(string value);
    public static bool IsDateString(string dateToken, CultureInfo culture);
    public static bool IsBoolString(string value);
    public static bool IsGuidString(string value);
    public static bool TranslateBoolToken(string value, Boolean& result);
    public static void EnsureSyntax(bool condition, SyntaxError message, Node node);
}
internal static class Microsoft.TeamFoundation.WorkItemTracking.Client.Wiql.WiqlConstants : object {
    public static string WorkItemTable;
    public static string WorkItemLinkTable;
    public static string SourcePrefix;
    public static string TargetPrefix;
    public static string MustContain;
    public static string MayContain;
    public static string DoesNotContain;
    public static string Recursive;
    public static string ReturnMatchingChild;
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("2")]
internal class System.Runtime.CompilerServices.RefSafetyRulesAttribute : Attribute {
    public int Version;
    public RefSafetyRulesAttribute(int );
}
