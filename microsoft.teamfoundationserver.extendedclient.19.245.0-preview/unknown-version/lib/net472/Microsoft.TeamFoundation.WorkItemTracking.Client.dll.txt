[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
[ObsoleteAttribute("For more information please see documentation at http://aka.ms/witclientom")]
public class Microsoft.TeamFoundation.WorkItemTracking.Client.Administration : object {
    private WorkItemStore m_store;
    [CompilerGeneratedAttribute]
private ImportEventHandler ImportEventHandler;
    public Administration(WorkItemStore store);
    [CompilerGeneratedAttribute]
public void add_ImportEventHandler(ImportEventHandler value);
    [CompilerGeneratedAttribute]
public void remove_ImportEventHandler(ImportEventHandler value);
    public void IndexFields(FieldIndexData[] indexes);
    public void IndexFields(IEnumerable`1<FieldIndexData> indexes);
    public void ImportGlobalWorkflow(int projectId, TextReader file);
    public void ValidateGlobalWorkflow(int projectId, TextReader file);
    public XmlDocument ExportGlobalWorkflow(int projectId, bool includeLists);
    private void CheckProjectValidity(int projectId);
    private static bool CanIndexField(FieldType type);
}
[ObsoleteAttribute("For more information please see documentation at http://aka.ms/witclientom")]
public class Microsoft.TeamFoundation.WorkItemTracking.Client.AllowedValuesCollection : ValuesCollection {
    internal AllowedValuesCollection(FieldDefinition fd);
    internal AllowedValuesCollection(WorkItemStore store, Type type, String[] values, IComparer comparer);
}
[ObsoleteAttribute("For more information please see documentation at http://aka.ms/witclientom")]
public class Microsoft.TeamFoundation.WorkItemTracking.Client.Attachment : object {
    private WorkItem m_item;
    private AttachmentInfo m_fileInfo;
    public bool IsSaved { get; }
    public string Name { get; }
    public DateTime CreationTime { get; }
    public DateTime CreationTimeUtc { get; }
    public DateTime AttachedTime { get; }
    public DateTime AttachedTimeUtc { get; }
    public DateTime LastWriteTime { get; }
    public DateTime LastWriteTimeUtc { get; }
    public string Extension { get; }
    public long Length { get; }
    public string Comment { get; public set; }
    public int Id { get; }
    public string FileGuid { get; }
    public Uri Uri { get; }
    public Attachment(string path, string comment);
    public Attachment(string path);
    internal Attachment(WorkItem workItem, AttachmentInfo attachmentInfo);
    internal Attachment(Attachment src);
    [EditorBrowsableAttribute("1")]
public static Attachment MakeAttachment(WorkItem workItem, AttachmentInfo attachmentInfo);
    public bool get_IsSaved();
    public string get_Name();
    public DateTime get_CreationTime();
    public DateTime get_CreationTimeUtc();
    public DateTime get_AttachedTime();
    public DateTime get_AttachedTimeUtc();
    public DateTime get_LastWriteTime();
    public DateTime get_LastWriteTimeUtc();
    public string get_Extension();
    public long get_Length();
    public string get_Comment();
    public void set_Comment(string value);
    public int get_Id();
    public string get_FileGuid();
    public Uri get_Uri();
    [EditorBrowsableAttribute("1")]
public bool Equals(AttachmentInfo attachmentInfo);
    internal bool InternalEquals(Attachment a);
    internal void InternalAdd(WorkItem workItem);
    internal void InternalRemove(WorkItem workItem);
}
[DefaultMemberAttribute("Item")]
[ObsoleteAttribute("For more information please see documentation at http://aka.ms/witclientom")]
public class Microsoft.TeamFoundation.WorkItemTracking.Client.AttachmentCollection : VariableSizeList {
    private WorkItem m_workitem;
    private int m_revision;
    private List`1<Attachment> m_attachmentList;
    private int m_removingIndex;
    private Attachment m_addingObject;
    public int Count { get; }
    public Attachment Item { get; }
    internal WorkItem WorkItem { get; }
    internal bool IsHistoricalRevision { get; }
    internal AttachmentCollection(WorkItem workitem, int revision);
    private void Ensure();
    private void Populate();
    [EditorBrowsableAttribute("1")]
public void Refresh();
    internal void HandleChange(LinkInfo li, LinkAction action);
    public virtual int get_Count();
    public Attachment get_Item(int index);
    public int Add(Attachment attachment);
    public virtual void RemoveAt(int index);
    public virtual void Clear();
    public int IndexOf(Attachment attachment);
    public void Remove(Attachment attachment);
    public bool Contains(Attachment attachment);
    private sealed virtual override int System.Collections.IList.IndexOf(object value);
    protected virtual object GetItem(int index);
    protected virtual int AddItem(object value);
    internal WorkItem get_WorkItem();
    internal bool get_IsHistoricalRevision();
}
[ObsoleteAttribute("For more information please see documentation at http://aka.ms/witclientom")]
public class Microsoft.TeamFoundation.WorkItemTracking.Client.AttachmentReference : object {
    [CompilerGeneratedAttribute]
private Guid <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Url>k__BackingField;
    public Guid Id { get; public set; }
    public string Url { get; public set; }
    [CompilerGeneratedAttribute]
public Guid get_Id();
    [CompilerGeneratedAttribute]
public void set_Id(Guid value);
    [CompilerGeneratedAttribute]
public string get_Url();
    [CompilerGeneratedAttribute]
public void set_Url(string value);
}
[ObsoleteAttribute("For more information please see documentation at http://aka.ms/witclientom")]
public enum Microsoft.TeamFoundation.WorkItemTracking.Client.BaseLinkType : Enum {
    public int value__;
    public static BaseLinkType Hyperlink;
    public static BaseLinkType RelatedLink;
    public static BaseLinkType ExternalLink;
    public static BaseLinkType WorkItemLink;
}
[ObsoleteAttribute("For more information please see documentation at http://aka.ms/witclientom")]
public class Microsoft.TeamFoundation.WorkItemTracking.Client.BatchReadParameter : object {
    private int m_id;
    private int m_rev;
    private int m_projectHint;
    public int Id { get; }
    public int Revision { get; }
    public int ProjectHint { get; public set; }
    public BatchReadParameter(int id, int revision);
    public BatchReadParameter(int id);
    public int get_Id();
    public int get_Revision();
    public int get_ProjectHint();
    public void set_ProjectHint(int value);
}
[DefaultMemberAttribute("Item")]
[ObsoleteAttribute("For more information please see documentation at http://aka.ms/witclientom")]
public class Microsoft.TeamFoundation.WorkItemTracking.Client.BatchReadParameterCollection : VariableSizeList {
    private ArrayList m_list;
    private Hashtable m_idHashtable;
    public int Count { get; }
    public BatchReadParameter Item { get; }
    public virtual int get_Count();
    public BatchReadParameter get_Item(int index);
    public int Add(BatchReadParameter item);
    public bool Contains(int id);
    public virtual void RemoveAt(int index);
    public virtual void Clear();
    public int IndexOf(BatchReadParameter item);
    public bool Contains(BatchReadParameter item);
    public void Remove(BatchReadParameter item);
    protected virtual object GetItem(int index);
    protected virtual int AddItem(object value);
}
[ObsoleteAttribute("For more information please see documentation at http://aka.ms/witclientom")]
public class Microsoft.TeamFoundation.WorkItemTracking.Client.BatchSave : object {
    private WorkItemStore m_store;
    private bool m_mergeLinks;
    private List`1<WorkItemLink> m_newLinks;
    private List`1<WorkItemLink> m_updatedLinks;
    private List`1<WorkItemLink> m_deletedLinks;
    public WorkItemStore WorkItemStore { get; }
    public bool MergeLinks { get; public set; }
    public IList`1<WorkItemLink> NewLinks { get; }
    public IList`1<WorkItemLink> UpdatedLinks { get; }
    public IList`1<WorkItemLink> DeletedLinks { get; }
    public BatchSave(WorkItemStore store);
    public WorkItemStore get_WorkItemStore();
    public bool get_MergeLinks();
    public void set_MergeLinks(bool value);
    public IList`1<WorkItemLink> get_NewLinks();
    public IList`1<WorkItemLink> get_UpdatedLinks();
    public IList`1<WorkItemLink> get_DeletedLinks();
    public void AddLinks(TargetSet linkSet, IEnumerable`1<WorkItemLink> links);
    public void Submit();
    private void GenerateBatch(XmlElement& batch, Int32& instrCount);
    private void AddLinkInstruction(LinkOperation op, WorkItemLink link, XmlElement package);
    private void Validate();
    private void CheckLocked(IEnumerable`1<WorkItemLink> links);
}
[ObsoleteAttribute("For more information please see documentation at http://aka.ms/witclientom")]
public class Microsoft.TeamFoundation.WorkItemTracking.Client.BatchSaveError : object {
    private WorkItem m_item;
    private Exception m_exception;
    public WorkItem WorkItem { get; }
    public Exception Exception { get; }
    internal BatchSaveError(WorkItem wi, Exception e);
    public WorkItem get_WorkItem();
    public Exception get_Exception();
}
[ObsoleteAttribute("For more information please see documentation at http://aka.ms/witclientom")]
public class Microsoft.TeamFoundation.WorkItemTracking.Client.BatchSaveFailedException : ClientException {
    public BatchSaveFailedException(string message);
    public BatchSaveFailedException(Exception innerException);
    public BatchSaveFailedException(string error, Exception innerException);
    protected BatchSaveFailedException(SerializationInfo info, StreamingContext context);
}
[ObsoleteAttribute("For more information please see documentation at http://aka.ms/witclientom")]
internal static class Microsoft.TeamFoundation.WorkItemTracking.Client.BatchSaveHelper : object {
    public static BatchSaveError[] BatchSave(WorkItemStore store, WorkItem[] workitems, SaveFlags saveFlags);
    private static void TryUpdate(WorkItemStore store, WorkItem[] workitems, SaveFlags saveFlags, List`1<BatchSaveError> errors);
}
[ObsoleteAttribute("For more information please see documentation at http://aka.ms/witclientom")]
public class Microsoft.TeamFoundation.WorkItemTracking.Client.BatchSaveRetryFailedException : BatchSaveFailedException {
    public BatchSaveRetryFailedException(Exception innerException);
    protected BatchSaveRetryFailedException(SerializationInfo info, StreamingContext context);
    public BatchSaveRetryFailedException(string message);
    public BatchSaveRetryFailedException(string message, Exception innerException);
}
[ObsoleteAttribute("For more information please see documentation at http://aka.ms/witclientom")]
public enum Microsoft.TeamFoundation.WorkItemTracking.Client.CancelableActionState : Enum {
    public int value__;
    public static CancelableActionState None;
    public static CancelableActionState Started;
    public static CancelableActionState Completed;
    public static CancelableActionState Canceled;
}
[ObsoleteAttribute("For more information please see documentation at http://aka.ms/witclientom")]
public class Microsoft.TeamFoundation.WorkItemTracking.Client.CancelableAsyncResult : object {
    private bool m_completedSync;
    private bool m_isCompleted;
    private bool m_canceled;
    private string m_id;
    private IAsyncResult m_ar;
    private QueryDelegate m_delegate;
    private QueryMode m_mode;
    private object m_action;
    private WorkItemStore m_store;
    private AsyncCallback m_cbInternal;
    private AsyncCallback m_cbExternal;
    private CancelableActionState m_state;
    [CompilerGeneratedAttribute]
private WorkItemAsyncEventHandler m_asyncStateChanged;
    public object AsyncState { get; }
    public WaitHandle AsyncWaitHandle { get; }
    public bool CompletedSynchronously { get; }
    public bool IsCompleted { get; }
    public bool IsCanceled { get; }
    public AsyncCallback Callback { get; public set; }
    public object Action { get; }
    internal IAsyncResult InternalAsyncResult { get; }
    internal QueryDelegate QueryDelegate { get; }
    internal QueryMode QueryMode { get; }
    internal CancelableAsyncResult(string id, WorkItemStore store, object obj, QueryDelegate wrapper, QueryMode mode, WorkItemAsyncEventHandler eventHandler);
    public sealed virtual object get_AsyncState();
    public sealed virtual WaitHandle get_AsyncWaitHandle();
    public sealed virtual bool get_CompletedSynchronously();
    public sealed virtual bool get_IsCompleted();
    public sealed virtual bool get_IsCanceled();
    private void CallbackFromDelegate(IAsyncResult ar);
    public void BeginAsync();
    private void ChangeState(CancelableActionState newState);
    public AsyncCallback get_Callback();
    public void set_Callback(AsyncCallback value);
    public sealed virtual void Cancel();
    public object get_Action();
    internal IAsyncResult get_InternalAsyncResult();
    internal QueryDelegate get_QueryDelegate();
    internal QueryMode get_QueryMode();
    [CompilerGeneratedAttribute]
private void add_m_asyncStateChanged(WorkItemAsyncEventHandler value);
    [CompilerGeneratedAttribute]
private void remove_m_asyncStateChanged(WorkItemAsyncEventHandler value);
}
[ObsoleteAttribute("Unused exception type")]
public class Microsoft.TeamFoundation.WorkItemTracking.Client.CannotChangePageSizeException : ClientException {
    protected CannotChangePageSizeException(SerializationInfo info, StreamingContext context);
    public CannotChangePageSizeException(string message);
    public CannotChangePageSizeException(string message, Exception innerException);
}
[ObsoleteAttribute("For more information please see documentation at http://aka.ms/witclientom")]
public class Microsoft.TeamFoundation.WorkItemTracking.Client.Category : object {
    private WorkItemStore m_store;
    private Nullable`1<int> m_id;
    private string m_refName;
    private string m_name;
    private WorkItemType m_defaultType;
    private List`1<WorkItemType> m_types;
    private Dictionary`2<int, int> m_typesMap;
    internal int Id { get; }
    public string ReferenceName { get; }
    public string Name { get; }
    public WorkItemType DefaultWorkItemType { get; }
    public IEnumerable`1<WorkItemType> WorkItemTypes { get; }
    internal Category(WorkItemStore store, Dictionary`2<string, WorkItemType> allTypes, XmlElement catElement);
    internal Category(Snapshot snapshot, Project p, PsCategoryMetadataRecord r);
    internal int get_Id();
    public string get_ReferenceName();
    public string get_Name();
    public WorkItemType get_DefaultWorkItemType();
    public IEnumerable`1<WorkItemType> get_WorkItemTypes();
    public bool Contains(WorkItemType value);
    internal void AddContent(int projectId, UpdatePackage batch);
    internal void RemoveContent(UpdatePackage batch);
    internal static void SyncContent(Category src, Category tgt, UpdatePackage batch);
    private static void SyncMembers(Category src, Category tgt, UpdatePackage batch);
    private static void SyncProperties(Category src, Category tgt, UpdatePackage batch);
    internal void Refresh(Category c);
}
[DefaultMemberAttribute("Item")]
[ObsoleteAttribute("For more information please see documentation at http://aka.ms/witclientom")]
public class Microsoft.TeamFoundation.WorkItemTracking.Client.CategoryCollection : object {
    private WorkItemStore m_store;
    private int m_projectId;
    private List`1<Category> m_items;
    private Dictionary`2<string, Category> m_itemsMap;
    [CompilerGeneratedAttribute]
private ImportEventHandler ImportEventHandler;
    public int Count { get; }
    public Category Item { get; }
    public Category Item { get; }
    internal CategoryCollection(Project p);
    internal CategoryCollection(Project p, XmlDocument doc);
    internal CategoryCollection(WorkItemStore store, Dictionary`2<string, WorkItemType> types, XmlDocument doc);
    public int get_Count();
    public Category get_Item(int index);
    public Category get_Item(string name);
    private sealed virtual override IEnumerator`1<Category> System.Collections.Generic.IEnumerable<Microsoft.TeamFoundation.WorkItemTracking.Client.Category>.GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    [EditorBrowsableAttribute("1")]
public void Import(Stream stream);
    public void Import(string categories);
    public void Import(XmlElement categoriesElement);
    public XmlDocument Export();
    public bool Contains(string name);
    [CompilerGeneratedAttribute]
public void add_ImportEventHandler(ImportEventHandler value);
    [CompilerGeneratedAttribute]
public void remove_ImportEventHandler(ImportEventHandler value);
    private void Initialize(WorkItemStore store, Dictionary`2<string, WorkItemType> types, XmlDocument doc);
    internal static void Compare(CategoryCollection src, CategoryCollection tgt, UpdatePackage batch);
    internal void Refresh();
}
[ObsoleteAttribute("For more information please see documentation at http://aka.ms/witclientom")]
public class Microsoft.TeamFoundation.WorkItemTracking.Client.ClientException : TeamFoundationServerException {
    private int m_errorId;
    public int ErrorId { get; public set; }
    public ClientException(string message);
    public ClientException(string message, Exception innerException);
    public ClientException(string message, int id, Exception innerException);
    protected ClientException(SerializationInfo info, StreamingContext context);
    public void set_ErrorId(int value);
    public int get_ErrorId();
}
[ObsoleteAttribute("For more information please see documentation at http://aka.ms/witclientom")]
internal class Microsoft.TeamFoundation.WorkItemTracking.Client.ClientMetadataProvisioningHelper : object {
    private Snapshot m_snapshot;
    private WorkItemStore m_store;
    private FieldDefinitionCollection m_fieldCollection;
    private WorkItemLinkTypeCollection m_linkCollection;
    private ImportEventHandler m_importEventHandler;
    private FieldDefinition m_cachedField;
    public StringComparer ServerStringComparer { get; }
    public CultureInfo ServerCulture { get; }
    public string InstanceGuid { get; }
    public int WorkItemLinkTypesCount { get; }
    public bool HasWorkItemType { get; }
    public bool UseStrictFieldNameCheck { get; }
    public bool IgnoreReportabilityChange { get; }
    public ClientMetadataProvisioningHelper(WorkItemStore store, ImportEventHandler importEventHandler);
    public sealed virtual void RaiseImportEvent(Exception e, string message);
    public sealed virtual void ThrowValidationException(string message);
    public sealed virtual bool IsSupported(string feature);
    public sealed virtual StringComparer get_ServerStringComparer();
    public sealed virtual CultureInfo get_ServerCulture();
    public sealed virtual string get_InstanceGuid();
    public sealed virtual List`1<int> GetFields();
    public sealed virtual string GetFieldName(int fieldId);
    public sealed virtual string GetFieldReferenceName(int fieldId);
    public sealed virtual PsFieldDefinitionTypeEnum GetPsFieldType(int fieldId);
    public sealed virtual int GetPsReportingType(int fieldId);
    public sealed virtual int GetPsReportingFormula(int fieldId);
    public sealed virtual bool IsReportable(int fieldId);
    public sealed virtual string GetReportingName(int fieldId);
    public sealed virtual string GetReportingReferenceName(int fieldId);
    public sealed virtual bool IsIgnored(int fieldId);
    public sealed virtual bool IsComputed(int fieldId);
    public sealed virtual string GetNodeGuid(int nodeId);
    public sealed virtual string GetWorkItemLinkTypeForwardEndName(string workItemLinkTypeReferenceName);
    public sealed virtual string GetWorkItemLinkTypeReverseEndName(string workItemLinkTypeReferenceName);
    public sealed virtual int GetTopologyForWorkItemLinkTypeRefName(string workItemLinkTypeReferenceName);
    public sealed virtual bool EditAllowForWorkItemLinkType(string workItemLinkTypeReferenceName);
    public sealed virtual bool ExistsWorkItemLinkRefName(string workItemLinkTypeReferenceName);
    public sealed virtual string GetWorkItemReferenceNameByFriendlyName(string friendlyName);
    public sealed virtual List`1<string> GetWorkItemLinkTypeReferenceNames();
    public sealed virtual List`1<string> GetRegisteredLinkTypes();
    public sealed virtual IEnumerable`1<int> GetCoreFieldIds();
    public sealed virtual int get_WorkItemLinkTypesCount();
    public sealed virtual bool IsLinkTypeDirectional(string ltr);
    public sealed virtual bool ContainsField(string field);
    public sealed virtual bool get_HasWorkItemType();
    private FieldDefinition GetField(int fieldId);
    private WorkItemLinkType GetWorkItemLinkType(string workItemLinkTypeRefName);
    public sealed virtual bool get_UseStrictFieldNameCheck();
    public sealed virtual bool get_IgnoreReportabilityChange();
    public sealed virtual IDictionary`2<int, IEnumerable`1<ListItem>> ExpandSetsOneLevel(IEnumerable`1<int> setIds);
    public sealed virtual bool FindConstByFullName(string name, bool isIdentity, Int32& id);
    public sealed virtual bool IsValidGroup(int id);
    public sealed virtual bool IsValidUserOrGroup(int id);
    public sealed virtual bool IsValidIdentityNameFormat(string name);
    public sealed virtual void ValidateRequiredFieldsOnLayout(XmlElement fieldsElement, XmlElement workflowElement, XmlElement formElement, Action`1<string> requiredFieldNotInBothLayoutsErrorAction);
    public sealed virtual void ValidateWebLayoutControls(XmlElement webLayoutElement, Action`1<string> systemControlNotAllowedErrorAction, Action controlHeightNotAllowedErrorAction, Action`1<string> controlNotRecognizedWarningAction);
    public sealed virtual void ValidateWebLayoutSystemControls(XmlElement webLayoutElement, ValidateWebLayoutSystemControlErrorActions errorActions);
    public sealed virtual void GeneratePageAndGroupIds(string processName, string workItemTypeName, XmlElement webLayoutElement, Action`1<string> invalidOrDuplicatedPageLabelErrorAction, Action`1<string> invalidOrDuplicatedGroupLabelErrorAction, Action`1<string> invalidControlsInGroupErrorAction, Action`2<string, string> duplicateControlsInGroupErrorAction);
    public sealed virtual void ValidateWebLayoutExtensions(XmlElement webLayoutElement, Func`3<string, String[], bool> doesFieldExist);
    public sealed virtual void ValidateLinksControls(XmlElement webLayoutElement);
}
[DefaultMemberAttribute("Item")]
[ObsoleteAttribute("For more information please see documentation at http://aka.ms/witclientom")]
internal class Microsoft.TeamFoundation.WorkItemTracking.Client.ClientQuery2ProvisioningHelper : object {
    private Dictionary`2<Guid, QueryItem2> m_queries;
    private QueryItem2 Item { get; }
    public ClientQuery2ProvisioningHelper(Dictionary`2<Guid, QueryItem2> queries);
    public sealed virtual IEnumerable`1<Guid> GetDirtyQueryItems();
    public sealed virtual bool IsQueryDeleted(Guid id);
    public sealed virtual bool IsQueryNew(Guid id);
    public sealed virtual bool IsQueryDirtyShallow(Guid id);
    public sealed virtual string GetOwnerIdentifier(Guid id, bool onlyIfChanged);
    public sealed virtual string GetIdentityType(Guid id, bool onlyIfChanged);
    private void UpdateIdentityDescriptor(Guid id);
    public sealed virtual string GetQueryText(Guid id, bool onlyIfChanged);
    public sealed virtual Guid GetParentId(Guid id, bool onlyIfChanged);
    public sealed virtual string GetName(Guid id, bool onlyIfChanged);
    [IteratorStateMachineAttribute("Microsoft.TeamFoundation.WorkItemTracking.Client.ClientQuery2ProvisioningHelper/<GetAccessControlEntries>d__11")]
public sealed virtual IEnumerable`1<QueryAccessControlEntry> GetAccessControlEntries(Guid id);
    public sealed virtual bool GetInheritPermissions(Guid id);
    public sealed virtual bool IsAccessControlListDirty(Guid id);
    private QueryItem2 get_Item(Guid id);
}
[DefaultMemberAttribute("Item")]
[ObsoleteAttribute("For more information please see documentation at http://aka.ms/witclientom")]
internal class Microsoft.TeamFoundation.WorkItemTracking.Client.ClientQueryProvisioningHelper : object {
    private Dictionary`2<Guid, QueryItem> m_queries;
    private QueryItem Item { get; }
    public ClientQueryProvisioningHelper(Dictionary`2<Guid, QueryItem> queries);
    public sealed virtual IEnumerable`1<Guid> GetDirtyQueryItems();
    public sealed virtual bool IsQueryDeleted(Guid id);
    public sealed virtual bool IsQueryNew(Guid id);
    public sealed virtual bool IsQueryDirtyShallow(Guid id);
    public sealed virtual string GetOwnerIdentifier(Guid id, bool onlyIfChanged);
    public sealed virtual string GetIdentityType(Guid id, bool onlyIfChanged);
    public sealed virtual string GetQueryText(Guid id, bool onlyIfChanged);
    public sealed virtual Guid GetParentId(Guid id, bool onlyIfChanged);
    public sealed virtual string GetName(Guid id, bool onlyIfChanged);
    [IteratorStateMachineAttribute("Microsoft.TeamFoundation.WorkItemTracking.Client.ClientQueryProvisioningHelper/<GetAccessControlEntries>d__10")]
public sealed virtual IEnumerable`1<QueryAccessControlEntry> GetAccessControlEntries(Guid id);
    public sealed virtual bool GetInheritPermissions(Guid id);
    public sealed virtual bool IsAccessControlListDirty(Guid id);
    private QueryItem get_Item(Guid id);
}
[EditorBrowsableAttribute("1")]
[ObsoleteAttribute("For more information please see documentation at http://aka.ms/witclientom")]
public class Microsoft.TeamFoundation.WorkItemTracking.Client.ClientWiqlAdapterHelper : object {
    private static string c_currentIteration;
    private static string c_teamAreas;
    private static string c_follows;
    private HashSet`1<string> c_dateMacros;
    private CultureInfo m_culture;
    private WorkItemStore m_store;
    private static int c_areaOrIterationLevel;
    public CultureInfo CultureInfo { get; internal set; }
    public TimeZone TimeZone { get; }
    public string UserDisplayName { get; }
    public ClientWiqlAdapterHelper(WorkItemStore store);
    public sealed virtual CultureInfo get_CultureInfo();
    internal void set_CultureInfo(CultureInfo value);
    public sealed virtual TimeZone get_TimeZone();
    public sealed virtual string get_UserDisplayName();
    public sealed virtual int GetTreeID(string path, TreeStructureType type);
    public sealed virtual bool IsSupported(string feature);
    public sealed virtual object FindField(string name, string prefix, object tableTag);
    public sealed virtual int GetFieldId(object fieldTag);
    public sealed virtual string GetFieldReferenceName(object fieldTag);
    public sealed virtual string GetFieldFriendlyName(object fieldTag);
    public sealed virtual bool GetFieldIsQueryable(object fieldTag);
    public sealed virtual bool GetFieldCanSortBy(object fieldTag);
    public sealed virtual InternalFieldUsages GetFieldUsage(object fieldTag);
    public sealed virtual InternalFieldType GetFieldType(object fieldTag);
    public sealed virtual Type GetFieldSystemType(object fieldTag);
    public sealed virtual bool GetFieldSupportsTextQuery(object fieldTag);
    public sealed virtual bool GetFieldIsLongText(object fieldTag);
    public sealed virtual string GetFieldFriendlyName(string fieldName);
    public sealed virtual int GetFieldPsFieldType(string fieldName);
    public sealed virtual InternalFieldType GetFieldType(string fieldName);
    public sealed virtual bool HasLinkType(string linkTypeName);
    public sealed virtual int GetLinkTypeId(string linkTypeName);
    public sealed virtual bool GetLinkTypeIsForward(string linkTypeName);
    public sealed virtual int GetLinkTypeTopology(string linkTypeName);
    [IteratorStateMachineAttribute("Microsoft.TeamFoundation.WorkItemTracking.Client.ClientWiqlAdapterHelper/<GetAllLinkTypeIds>d__33")]
public sealed virtual IEnumerable`1<int> GetAllLinkTypeIds();
    public sealed virtual List`1<object> GetSortFieldList(NodeSelect nodeSelect);
    public sealed virtual List`1<object> GetDisplayFieldList(NodeSelect nodeSelect);
    public sealed virtual void SetDisplayFieldList(NodeSelect nodeSelect, IEnumerable`1<object> list);
    public sealed virtual void SetSortFieldList(NodeSelect nodeSelect, IEnumerable`1<object> list);
    public sealed virtual object GetVariableValue(string name, NodeParameters parameters);
    public sealed virtual bool IsSupportedMacro(string name);
    public sealed virtual DataType GetVariableType(string name);
    public sealed virtual bool DoesMacroExtensionHandleOffset(string name);
    public sealed virtual void ValidateParameters(string macroName, NodeTableName tableContext, NodeFieldName fieldContext, NodeParameters parameters);
    public sealed virtual bool RewriteCondition(NodeCondition condition, Node& node);
}
[ObsoleteAttribute("For more information please see documentation at http://aka.ms/witclientom")]
public class Microsoft.TeamFoundation.WorkItemTracking.Client.ConnectionException : ClientException {
    private Type m_type;
    internal Type ExceptionType { get; internal set; }
    public ConnectionException(string message);
    public ConnectionException(Exception innerException);
    public ConnectionException(string message, Exception innerException);
    protected ConnectionException(SerializationInfo info, StreamingContext context);
    internal Type get_ExceptionType();
    internal void set_ExceptionType(Type value);
}
[GenerateAllConstantsAttribute("")]
public enum Microsoft.TeamFoundation.WorkItemTracking.Client.CoreField : Enum {
    public int value__;
    public static CoreField Id;
    public static CoreField Rev;
    public static CoreField Title;
    public static CoreField Description;
    public static CoreField WorkItemType;
    public static CoreField TeamProject;
    public static CoreField State;
    public static CoreField Reason;
    public static CoreField CreatedBy;
    public static CoreField AssignedTo;
    public static CoreField ChangedBy;
    public static CoreField ChangedDate;
    public static CoreField CreatedDate;
    public static CoreField RevisedDate;
    public static CoreField AuthorizedDate;
    public static CoreField AuthorizedAs;
    public static CoreField History;
    public static CoreField AreaPath;
    public static CoreField AreaId;
    public static CoreField IterationPath;
    public static CoreField IterationId;
    public static CoreField NodeName;
    public static CoreField RelatedLinkCount;
    public static CoreField HyperLinkCount;
    public static CoreField AttachedFileCount;
    public static CoreField ExternalLinkCount;
    public static CoreField CommentCount;
    public static CoreField LinkType;
    public static CoreField Parent;
    public static CoreField Tags;
    public static CoreField Watermark;
    public static CoreField BoardColumn;
    public static CoreField BoardColumnDone;
    public static CoreField BoardLane;
    public static CoreField IsDeleted;
}
public static class Microsoft.TeamFoundation.WorkItemTracking.Client.CoreFieldReferenceNames : object {
    public static string AreaId;
    public static string AreaPath;
    public static string AssignedTo;
    public static string AttachedFileCount;
    public static string AuthorizedAs;
    public static string BoardColumn;
    public static string BoardColumnDone;
    public static string BoardLane;
    public static string ChangedBy;
    public static string ChangedDate;
    public static string CommentCount;
    public static string CreatedBy;
    public static string CreatedDate;
    public static string Description;
    public static string ExternalLinkCount;
    public static string History;
    public static string HyperLinkCount;
    public static string Id;
    public static string IterationId;
    public static string IterationPath;
    public static string LinkType;
    public static string NodeName;
    public static string Parent;
    public static string Reason;
    public static string RelatedLinkCount;
    public static string Rev;
    public static string RevisedDate;
    public static string State;
    public static string AuthorizedDate;
    public static string TeamProject;
    public static string Tags;
    public static string Title;
    public static string WorkItemType;
    public static string Watermark;
    public static string IsDeleted;
    public static String[] All { get; }
    public static int Count { get; }
    private static CoreFieldReferenceNames();
    public static String[] get_All();
    public static int get_Count();
}
[GenerateAllConstantsAttribute("")]
public static class Microsoft.TeamFoundation.WorkItemTracking.Client.CoreLinkTypeReferenceNames : object {
    public static string Related;
    public static string Hierarchy;
    public static string Dependency;
    public static string Duplicate;
    private static String[] m_all;
    public static IEnumerable`1<string> All { get; }
    private static CoreLinkTypeReferenceNames();
    public static IEnumerable`1<string> get_All();
}
[ObsoleteAttribute("For more information please see documentation at http://aka.ms/witclientom")]
internal class Microsoft.TeamFoundation.WorkItemTracking.Client.DataStore.Datastore : CriticalFinalizerObject {
    private IntPtr m_handle;
    private object m_locker;
    internal Datastore(object locker);
    protected virtual override void Finalize();
    internal PsUserDisplayModeEnum GetUserDisplayMode();
    internal int GetLocale();
    internal int GetComparisonStyle();
    internal int GetNodeUserRights(int lObjectID, int lTreeID, int fRecursive);
    internal String[] GetAllowedValues(int lFieldId, int dwType, int lObjectType, int lTreeId, bool fScopedToWorkItemType, Int32[] varsFilterFieldIDs, Int32[] varsFilterFieldTypes, Object[] varsFilterValues, WorkItemStore ws);
    internal bool SyncToCache();
    internal void BeginDataStoreInit(string defaultCachePath, string instanceId, int cacheVersion);
    internal void FinishDataStoreInit(int locale, int comparisonStyle, int displayMode, string userSamName, string userFriendlyName, string userSid);
    internal void BrieAccessCheck(object callback, int flags, int fieldId);
    internal void BrieInvalidateFields(object callback, int fieldId);
    internal void GetMetadataHave(int cMax, Int64* prgStamps, UInt32* prgTypes, Int32& cnt, String& dbstamp);
    internal UInt32 UpdateMetadata(object rowset, string dbstamp);
    internal object GetMetadata();
}
[ComVisibleAttribute("False")]
[GuidAttribute("B7A10741-BD79-41E6-863B-1DD27478C8DE")]
[InterfaceTypeAttribute("1")]
[ObsoleteAttribute("For more information please see documentation at http://aka.ms/witclientom")]
internal interface Microsoft.TeamFoundation.WorkItemTracking.Client.DataStore.IPsBusinessRuleObject {
    public abstract virtual void HrGetTreeId(int fOldValue, Int32& id);
    public abstract virtual void HrGetObjectTypeId(Int32& value);
    public abstract virtual void HrGetObjectTypeScopeId(Int32& value);
    public abstract virtual void HrGetValue(int lFieldId, int fOld, Object& value);
    public abstract virtual void HrSetProperties(int lFieldId, PsFieldProperties* p);
    public abstract virtual void HrInvalidateComputedField(int lFieldId);
    public abstract virtual void HrSetValue(int lFieldId, object value);
}
[ObsoleteAttribute("For more information please see documentation at http://aka.ms/witclientom")]
internal class Microsoft.TeamFoundation.WorkItemTracking.Client.DataStore.PsFieldProperties : ValueType {
    public int fListsAvailable;
    public PsFieldPropertyCategory suggested;
    public PsFieldPropertyCategory required;
    public PsFieldPropertyCategory forbidden;
    public PsFieldPropertyCategory external;
}
[ObsoleteAttribute("For more information please see documentation at http://aka.ms/witclientom")]
internal class Microsoft.TeamFoundation.WorkItemTracking.Client.DataStore.PsFieldPropertyCategory : ValueType {
    public UInt32 dwFlags;
    public UInt32 dwStatusFlags;
    public int lStatusFieldId;
    public int cValues;
    public IntPtr prgpszValues;
    public int cFormats;
    public IntPtr prgpszFormats;
    public int lConstantSetId;
}
[ObsoleteAttribute("For more information please see documentation at http://aka.ms/witclientom")]
public class Microsoft.TeamFoundation.WorkItemTracking.Client.DeniedOrNotExistException : ClientException {
    public DeniedOrNotExistException(string message);
    public DeniedOrNotExistException(Exception innerException);
    public DeniedOrNotExistException(string message, Exception innerException);
    protected DeniedOrNotExistException(SerializationInfo info, StreamingContext context);
}
[ObsoleteAttribute("For more information please see documentation at http://aka.ms/witclientom")]
internal class Microsoft.TeamFoundation.WorkItemTracking.Client.DetachedQueryDefinition2 : QueryDefinition2 {
    private QueryHierarchy2 m_associatedHierarchy;
    public QueryHierarchy2 QueryHierarchy { get; }
    internal DetachedQueryDefinition2(string name, string queryText, QueryHierarchy2 associatedHierarchy, Guid id, IdentityDescriptor ownerDescriptor, bool isPersonal);
    public virtual QueryHierarchy2 get_QueryHierarchy();
    internal virtual void OnSaveCompleted();
}
[ObsoleteAttribute("For more information please see documentation at http://aka.ms/witclientom")]
internal class Microsoft.TeamFoundation.WorkItemTracking.Client.DetachedQueryFolder2 : QueryFolder2 {
    private QueryHierarchy2 m_associatedHierarchy;
    public QueryHierarchy2 QueryHierarchy { get; }
    internal DetachedQueryFolder2(string name, QueryHierarchy2 associatedHierarchy, Guid id, IdentityDescriptor ownerDescriptor, bool isPersonal);
    public virtual QueryHierarchy2 get_QueryHierarchy();
    internal virtual void OnSaveCompleted();
}
[DefaultMemberAttribute("Item")]
[ObsoleteAttribute("For more information please see documentation at http://aka.ms/witclientom")]
public class Microsoft.TeamFoundation.WorkItemTracking.Client.DisplayFieldList : OrderedVariableSizeList {
    private WorkItemStore m_store;
    private List`1<FieldDefinition> m_fields;
    public FieldDefinition Item { get; public set; }
    public int Count { get; }
    internal ICollection`1<FieldDefinition> Items { get; }
    internal DisplayFieldList(List`1<FieldDefinition> fields, WorkItemStore store);
    public FieldDefinition get_Item(int index);
    public void set_Item(int index, FieldDefinition value);
    public virtual void RemoveAt(int index);
    public void Remove(string fieldName);
    public virtual void Clear();
    public int IndexOfFieldId(int id);
    public int IndexOf(FieldDefinition value);
    public bool Contains(FieldDefinition value);
    public void Remove(FieldDefinition value);
    public int Add(FieldDefinition value);
    public void Insert(int index, FieldDefinition value);
    public int Add(string fieldName);
    public void Insert(int index, string fieldName);
    public virtual int get_Count();
    protected virtual object GetItem(int index);
    protected virtual void SetItem(int index, object value);
    protected virtual int IndexOfItem(object value);
    protected virtual int AddItem(object value);
    protected virtual void InsertItem(int index, object value);
    internal ICollection`1<FieldDefinition> get_Items();
}
[ObsoleteAttribute("For more information please see documentation at http://aka.ms/witclientom")]
public class Microsoft.TeamFoundation.WorkItemTracking.Client.DuplicateBatchReadParameterException : ClientException {
    public DuplicateBatchReadParameterException(Exception innerException);
    protected DuplicateBatchReadParameterException(SerializationInfo info, StreamingContext context);
    public DuplicateBatchReadParameterException(string message);
    public DuplicateBatchReadParameterException(string message, Exception innerException);
}
[ObsoleteAttribute("Unused exception type")]
public class Microsoft.TeamFoundation.WorkItemTracking.Client.DuplicateWorkItemException : ClientException {
    public DuplicateWorkItemException(Exception innerException);
    protected DuplicateWorkItemException(SerializationInfo info, StreamingContext context);
    public DuplicateWorkItemException(string message);
    public DuplicateWorkItemException(string message, Exception innerException);
}
[ObsoleteAttribute("For more information please see documentation at http://aka.ms/witclientom")]
public class Microsoft.TeamFoundation.WorkItemTracking.Client.ExternalLink : Link {
    private WorkItem m_item;
    private FileLinkInfo m_fileInfo;
    private RegisteredLinkType m_linkType;
    public RegisteredLinkType ArtifactLinkType { get; }
    public BaseLinkType BaseType { get; }
    public string LinkedArtifactUri { get; }
    public string Comment { get; public set; }
    public bool IsNew { get; }
    public ExternalLink(RegisteredLinkType type, string uri);
    internal ExternalLink(WorkItem workItem, LinkInfo fi);
    public virtual RegisteredLinkType get_ArtifactLinkType();
    public virtual BaseLinkType get_BaseType();
    internal virtual LinkInfo GetLinkInfo();
    public string get_LinkedArtifactUri();
    public virtual string get_Comment();
    public virtual void set_Comment(string value);
    public virtual bool get_IsNew();
    internal virtual bool InternalEquals(Link l);
    internal virtual void InternalAdd(WorkItem workItem);
    internal virtual void InternalRemove(WorkItem workItem);
    internal virtual Link Clone(WorkItem target);
}
[ObsoleteAttribute("For more information please see documentation at http://aka.ms/witclientom")]
public class Microsoft.TeamFoundation.WorkItemTracking.Client.Field : object {
    private static FieldFlags[] s_flagsToStatus;
    private FieldDefinition m_fd;
    private int m_id;
    private AllowedValuesCollection m_cachedAllowedValues;
    private IdentityFieldAllowedValuesCollection m_identityFieldAllowedValues;
    private ValuesCollection m_cachedProhibitedValues;
    private int m_metadataVersion;
    private IRevisionInternal m_rev;
    private Nullable`1<FieldInfo> m_fi;
    public object Value { get; public set; }
    [EditorBrowsableAttribute("1")]
public object ValueWithServerDefault { get; }
    public object OriginalValue { get; }
    [EditorBrowsableAttribute("1")]
public bool IsChangedInRevision { get; }
    public FieldDefinition FieldDefinition { get; }
    public int Id { get; }
    public string Name { get; }
    public string ReferenceName { get; }
    public bool IsDirty { get; }
    public bool IsEditable { get; }
    public bool IsComputed { get; }
    public bool IsRequired { get; }
    public bool IsChangedByUser { get; }
    public AllowedValuesCollection AllowedValues { get; }
    public IdentityFieldAllowedValuesCollection IdentityFieldAllowedValues { get; }
    public bool HasAllowedValuesList { get; }
    public bool IsLimitedToAllowedValues { get; }
    public ValuesCollection ProhibitedValues { get; }
    public bool HasPatternMatch { get; }
    public FieldStatus Status { get; }
    public bool IsValid { get; }
    public WorkItem WorkItem { get; }
    private bool IsHistoricalRevision { get; }
    internal Field(IRevisionInternal rev, FieldDefinition fd);
    private static Field();
    public object get_Value();
    public void set_Value(object value);
    public object get_ValueWithServerDefault();
    public object get_OriginalValue();
    public bool get_IsChangedInRevision();
    public FieldDefinition get_FieldDefinition();
    public int get_Id();
    public string get_Name();
    public string get_ReferenceName();
    public bool get_IsDirty();
    public bool get_IsEditable();
    public bool get_IsComputed();
    public bool get_IsRequired();
    public bool get_IsChangedByUser();
    public AllowedValuesCollection get_AllowedValues();
    public IdentityFieldAllowedValuesCollection get_IdentityFieldAllowedValues();
    public bool get_HasAllowedValuesList();
    public bool get_IsLimitedToAllowedValues();
    public ValuesCollection get_ProhibitedValues();
    public bool get_HasPatternMatch();
    public FieldStatus get_Status();
    public bool get_IsValid();
    public WorkItem get_WorkItem();
    private bool get_IsHistoricalRevision();
    internal void DropCachedData();
    private void RefreshListData();
}
[ObsoleteAttribute("For more information please see documentation at http://aka.ms/witclientom")]
internal class Microsoft.TeamFoundation.WorkItemTracking.Client.FieldClassifier : object {
    internal IEnumerable`1<int> IdentifyIdentityFields(IEnumerable`1<int> fieldsToIdentity, Action`1<Action`1<PsConstantMetadataRecord>> actionScanConstants, Action`1<Action`1<PsConstantSetMetadataRecord>> actionScanConstantSets, Action`1<Action`1<PsRuleMetadataRecord>> actionScanRules);
    private bool HasIdentityConstant(int constId, Dictionary`2<int, List`1<int>> constantSetsCache, HashSet`1<int> identityConstantIdsCache);
}
[DefaultMemberAttribute("Item")]
[ObsoleteAttribute("For more information please see documentation at http://aka.ms/witclientom")]
public class Microsoft.TeamFoundation.WorkItemTracking.Client.FieldCollection : ReadOnlyList {
    private IRevisionInternal m_rev;
    private Dictionary`2<int, Field> m_cache;
    private FieldDefinitionCollection m_defs;
    public int Count { get; }
    public Field Item { get; }
    public Field Item { get; }
    public Field Item { get; }
    internal FieldCollection(IRevisionInternal rev, FieldDefinitionCollection defs);
    public virtual int get_Count();
    public Field GetById(int id);
    public Field TryGetById(int id);
    public Field get_Item(int index);
    public Field get_Item(CoreField coreField);
    public Field get_Item(string name);
    public bool Contains(string fieldName);
    public bool Contains(int id);
    public int IndexOf(Field value);
    public bool Contains(Field value);
    protected virtual object GetItem(int index);
    [EditorBrowsableAttribute("1")]
public void DropCachedData();
}
[ObsoleteAttribute("For more information please see documentation at http://aka.ms/witclientom")]
public class Microsoft.TeamFoundation.WorkItemTracking.Client.FieldConflict : object {
    [CompilerGeneratedAttribute]
private string <FieldReferenceName>k__BackingField;
    [CompilerGeneratedAttribute]
private object <BaselineValue>k__BackingField;
    [CompilerGeneratedAttribute]
private object <LocalValue>k__BackingField;
    [CompilerGeneratedAttribute]
private object <ServerValue>k__BackingField;
    public string FieldReferenceName { get; internal set; }
    public object BaselineValue { get; internal set; }
    public object LocalValue { get; internal set; }
    public object ServerValue { get; internal set; }
    public FieldConflict(string fieldReferenceName, object baselineValue, object localValue, object serverValue);
    [CompilerGeneratedAttribute]
public string get_FieldReferenceName();
    [CompilerGeneratedAttribute]
internal void set_FieldReferenceName(string value);
    [CompilerGeneratedAttribute]
public object get_BaselineValue();
    [CompilerGeneratedAttribute]
internal void set_BaselineValue(object value);
    [CompilerGeneratedAttribute]
public object get_LocalValue();
    [CompilerGeneratedAttribute]
internal void set_LocalValue(object value);
    [CompilerGeneratedAttribute]
public object get_ServerValue();
    [CompilerGeneratedAttribute]
internal void set_ServerValue(object value);
}
[ObsoleteAttribute("For more information please see documentation at http://aka.ms/witclientom")]
public class Microsoft.TeamFoundation.WorkItemTracking.Client.FieldDefinition : object {
    [CompilerGeneratedAttribute]
private bool <IsIdentity>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsUsedInWorkItemType>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsUsedInGlobalWorkflow>k__BackingField;
    private PsFieldMetadataRecord m_record;
    private PsFieldUsageMetadataRecord m_urecord;
    private FieldUsages m_usage;
    private string m_referenceName;
    private string m_name;
    private string m_helpText;
    private FieldType m_fieldType;
    private Type m_systemType;
    private AllowedValuesCollection m_unfilteredAllowValues;
    private IdentityFieldAllowedValuesCollection m_identityFieldAllowedValues;
    private ValuesCollection m_prohibitedValues;
    private int m_metadataVersion;
    private WorkItemType m_type;
    private WorkItemStore m_store;
    private ReportingAttributes m_reportingAttributes;
    public string Name { get; }
    public string ReferenceName { get; }
    public int Id { get; }
    public FieldUsages Usage { get; }
    internal int PsUsageId { get; }
    public bool IsIndexed { get; }
    public bool IsCoreField { get; }
    public bool IsEditable { get; }
    public bool IsIdentity { get; internal set; }
    public bool IsComputed { get; }
    [EditorBrowsableAttribute("1")]
public bool IsUserNameField { get; }
    public string HelpText { get; }
    public FieldType FieldType { get; }
    public ReportingAttributes ReportingAttributes { get; }
    public Type SystemType { get; }
    public bool IsQueryable { get; }
    public bool CanSortBy { get; }
    internal WorkItemType WorkItemType { get; }
    [EditorBrowsableAttribute("1")]
public PsFieldDefinitionTypeEnum PsFieldType { get; }
    internal int InternalType { get; }
    [EditorBrowsableAttribute("1")]
public bool IsLongText { get; }
    [EditorBrowsableAttribute("1")]
public bool SupportsTextQuery { get; }
    [EditorBrowsableAttribute("1")]
public bool IsCloneable { get; }
    internal bool IsIgnored { get; }
    [EditorBrowsableAttribute("1")]
public bool IsInternal { get; }
    [EditorBrowsableAttribute("1")]
public int PsReportingType { get; }
    [EditorBrowsableAttribute("1")]
public int PsReportingFormula { get; }
    [EditorBrowsableAttribute("1")]
public bool IsReportable { get; }
    [EditorBrowsableAttribute("1")]
public string ReportingName { get; }
    [EditorBrowsableAttribute("1")]
public string ReportingReferenceName { get; }
    public AllowedValuesCollection AllowedValues { get; }
    public IdentityFieldAllowedValuesCollection IdentityFieldAllowedValues { get; }
    [EditorBrowsableAttribute("1")]
public ValuesCollection ProhibitedValues { get; }
    [EditorBrowsableAttribute("1")]
public WorkItemStore WorkItemStore { get; }
    [EditorBrowsableAttribute("1")]
public bool IsUsedInWorkItemType { get; internal set; }
    [EditorBrowsableAttribute("1")]
public bool IsUsedInGlobalWorkflow { get; internal set; }
    internal FieldDefinition(WorkItemStore store, PsFieldMetadataRecord record, PsFieldUsageMetadataRecord urecord, WorkItemType type, FieldUsages usage);
    public string get_Name();
    public string get_ReferenceName();
    public int get_Id();
    public FieldUsages get_Usage();
    internal int get_PsUsageId();
    public bool get_IsIndexed();
    public bool get_IsCoreField();
    public bool get_IsEditable();
    [CompilerGeneratedAttribute]
public bool get_IsIdentity();
    [CompilerGeneratedAttribute]
internal void set_IsIdentity(bool value);
    public bool get_IsComputed();
    public bool get_IsUserNameField();
    public string get_HelpText();
    public FieldType get_FieldType();
    public ReportingAttributes get_ReportingAttributes();
    public Type get_SystemType();
    public bool get_IsQueryable();
    public bool get_CanSortBy();
    internal WorkItemType get_WorkItemType();
    public PsFieldDefinitionTypeEnum get_PsFieldType();
    internal int get_InternalType();
    public bool get_IsLongText();
    public bool get_SupportsTextQuery();
    public bool get_IsCloneable();
    internal bool get_IsIgnored();
    public bool get_IsInternal();
    public int get_PsReportingType();
    public int get_PsReportingFormula();
    public bool get_IsReportable();
    public string get_ReportingName();
    public string get_ReportingReferenceName();
    public AllowedValuesCollection get_AllowedValues();
    public IdentityFieldAllowedValuesCollection get_IdentityFieldAllowedValues();
    public ValuesCollection get_ProhibitedValues();
    public AllowedValuesCollection FilteredAllowedValues(FieldFilterList filters);
    public WorkItemStore get_WorkItemStore();
    private void RefreshCachedData();
    internal static FieldType PsFieldTypeToFieldType(PsFieldDefinitionTypeEnum psType);
    internal static Type FieldTypeToSystemType(FieldType type);
    internal static ReportingType PsReportingTypeToReportingType(long psReportingType);
    [CompilerGeneratedAttribute]
public bool get_IsUsedInWorkItemType();
    [CompilerGeneratedAttribute]
internal void set_IsUsedInWorkItemType(bool value);
    [CompilerGeneratedAttribute]
public bool get_IsUsedInGlobalWorkflow();
    [CompilerGeneratedAttribute]
internal void set_IsUsedInGlobalWorkflow(bool value);
}
[DefaultMemberAttribute("Item")]
[ObsoleteAttribute("For more information please see documentation at http://aka.ms/witclientom")]
public class Microsoft.TeamFoundation.WorkItemTracking.Client.FieldDefinitionCollection : ReadOnlyList {
    private WorkItemStore m_store;
    private WorkItemType m_wit;
    private FieldDefinition[] m_list;
    private Dictionary`2<string, int> m_mapByName;
    private Dictionary`2<int, int> m_mapById;
    public FieldDefinition Item { get; }
    public FieldDefinition Item { get; }
    public FieldDefinition Item { get; }
    public int Count { get; }
    [EditorBrowsableAttribute("1")]
public FieldDefinitionCollection(WorkItemStore store, bool filtered);
    internal FieldDefinitionCollection(WorkItemStore store, PsDatastoreItemTypeEnum oType, bool filtered);
    internal FieldDefinitionCollection(WorkItemStore store, WorkItemType type);
    internal FieldDefinitionCollection(WorkItemStore store, ICollection`1<FieldDefinition> defs, CoreField[] extraFields);
    private void IdentifyIdentityFields(WorkItemStore store, List`1<FieldDefinition> fieldDefinitions);
    private void Init(WorkItemStore store, WorkItemType type);
    private void AddField(FieldDefinition fd, List`1<FieldDefinition> l);
    private void AddField(PsFieldMetadataRecord record, PsFieldUsageMetadataRecord urecord, FieldUsages usage, Dictionary`2<int, int> typeUsage, bool fGwUsage, List`1<FieldDefinition> list);
    public FieldDefinition get_Item(int index);
    public FieldDefinition get_Item(CoreField coreField);
    public FieldDefinition get_Item(string name);
    public bool Contains(string name);
    public bool Contains(int id);
    public virtual int get_Count();
    public int IndexOf(FieldDefinition fieldDefinition);
    public bool Contains(FieldDefinition fieldDefinition);
    public FieldDefinition GetById(int id);
    public FieldDefinition TryGetById(int id);
    public FieldDefinition TryGetByName(string name);
    protected virtual object GetItem(int index);
}
[ObsoleteAttribute("For more information please see documentation at http://aka.ms/witclientom")]
public class Microsoft.TeamFoundation.WorkItemTracking.Client.FieldDefinitionNotExistException : ClientException {
    public FieldDefinitionNotExistException(string message);
    public FieldDefinitionNotExistException(string message, Exception innerException);
    protected FieldDefinitionNotExistException(SerializationInfo info, StreamingContext context);
}
[ObsoleteAttribute("For more information please see documentation at http://aka.ms/witclientom")]
public class Microsoft.TeamFoundation.WorkItemTracking.Client.FieldFilter : object {
    private FieldDefinition m_fd;
    private object m_value;
    public FieldDefinition FieldDefinition { get; }
    public object Value { get; public set; }
    public FieldFilter(FieldDefinition fd, object value);
    public FieldDefinition get_FieldDefinition();
    public object get_Value();
    public void set_Value(object value);
}
[DefaultMemberAttribute("Item")]
[ObsoleteAttribute("For more information please see documentation at http://aka.ms/witclientom")]
public class Microsoft.TeamFoundation.WorkItemTracking.Client.FieldFilterList : VariableSizeList {
    private ArrayList m_al;
    public FieldFilter Item { get; }
    public int Count { get; }
    public FieldFilter get_Item(int index);
    public virtual void RemoveAt(int index);
    public virtual void Clear();
    public int IndexOfFieldId(int id);
    public int IndexOf(FieldFilter filter);
    public int Add(FieldFilter filter);
    public virtual int get_Count();
    protected virtual object GetItem(int index);
    protected virtual int AddItem(object value);
    protected virtual int IndexOfItem(object value);
    public bool Contains(FieldFilter value);
    public void Remove(FieldFilter value);
}
[ObsoleteAttribute("For more information please see documentation at http://aka.ms/witclientom")]
public class Microsoft.TeamFoundation.WorkItemTracking.Client.FieldIndexData : ValueType {
    [CompilerGeneratedAttribute]
private int <FieldId>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsIndexed>k__BackingField;
    public int FieldId { get; public set; }
    public bool IsIndexed { get; public set; }
    public FieldIndexData(int fieldId, bool isIndexed);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public int get_FieldId();
    [CompilerGeneratedAttribute]
public void set_FieldId(int value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public bool get_IsIndexed();
    [CompilerGeneratedAttribute]
public void set_IsIndexed(bool value);
    public virtual bool Equals(object obj);
    public bool Equals(FieldIndexData other);
    public static bool op_Equality(FieldIndexData indexData1, FieldIndexData indexData2);
    public static bool op_Inequality(FieldIndexData indexData1, FieldIndexData indexData2);
    public virtual int GetHashCode();
}
[ObsoleteAttribute("For more information please see documentation at http://aka.ms/witclientom")]
public enum Microsoft.TeamFoundation.WorkItemTracking.Client.FieldStatus : Enum {
    public int value__;
    public static FieldStatus Valid;
    public static FieldStatus InvalidEmpty;
    public static FieldStatus InvalidNotEmpty;
    public static FieldStatus InvalidFormat;
    public static FieldStatus InvalidListValue;
    public static FieldStatus InvalidOldValue;
    public static FieldStatus InvalidNotOldValue;
    public static FieldStatus InvalidEmptyOrOldValue;
    public static FieldStatus InvalidNotEmptyOrOldValue;
    public static FieldStatus InvalidValueInOtherField;
    public static FieldStatus InvalidValueNotInOtherField;
    public static FieldStatus InvalidUnknown;
    public static FieldStatus InvalidDate;
    public static FieldStatus InvalidTooLong;
    public static FieldStatus InvalidType;
    public static FieldStatus InvalidComputedField;
    public static FieldStatus InvalidPath;
    public static FieldStatus InvalidCharacters;
}
[GenerateAllConstantsAttribute("")]
[ObsoleteAttribute("For more information please see documentation at http://aka.ms/witclientom")]
public enum Microsoft.TeamFoundation.WorkItemTracking.Client.FieldType : Enum {
    public int value__;
    public static FieldType Internal;
    public static FieldType String;
    public static FieldType Integer;
    public static FieldType DateTime;
    public static FieldType PlainText;
    public static FieldType Html;
    public static FieldType TreePath;
    public static FieldType History;
    public static FieldType Double;
    public static FieldType Guid;
    public static FieldType Boolean;
    public static FieldType PicklistInteger;
    public static FieldType PicklistString;
}
[FlagsAttribute]
[ObsoleteAttribute("For more information please see documentation at http://aka.ms/witclientom")]
public enum Microsoft.TeamFoundation.WorkItemTracking.Client.FieldUsages : Enum {
    public int value__;
    public static FieldUsages WorkItem;
    public static FieldUsages WorkItemLink;
}
[ObsoleteAttribute("For more information please see documentation at http://aka.ms/witclientom")]
public class Microsoft.TeamFoundation.WorkItemTracking.Client.FileAttachmentException : ClientException {
    private Type m_type;
    private Attachment m_attachment;
    public Attachment SourceAttachment { get; }
    internal Type ExceptionType { get; internal set; }
    public FileAttachmentException(string message);
    public FileAttachmentException(string message, Exception innerException);
    protected FileAttachmentException(SerializationInfo info, StreamingContext context);
    public FileAttachmentException(string message, Attachment attachment);
    public FileAttachmentException(string message, Attachment attachment, Exception innerException);
    public Attachment get_SourceAttachment();
    internal Type get_ExceptionType();
    internal void set_ExceptionType(Type value);
}
[ObsoleteAttribute("For more information please see documentation at http://aka.ms/witclientom")]
internal static class Microsoft.TeamFoundation.WorkItemTracking.Client.HistoryBuilder : object {
    private static string c_format1;
    private static string c_format2;
    private static string c_wilink;
    internal static string BuildTagLineForCopy(WorkItem wi, int revision);
    internal static string BuildHistoryFromItem(WorkItem wi);
    public static string BuildTagLine(WorkItem wi, int revision);
    public static string BuildTagLineLinks(WorkItem wi, string changedBy);
}
[ObsoleteAttribute("For more information please see documentation at http://aka.ms/witclientom")]
public class Microsoft.TeamFoundation.WorkItemTracking.Client.Hyperlink : Link {
    private WorkItem m_item;
    private FileLinkInfo m_fileInfo;
    private static RegisteredLinkType s_hyperLinkType;
    public RegisteredLinkType ArtifactLinkType { get; }
    public BaseLinkType BaseType { get; }
    public string Location { get; }
    public string Comment { get; public set; }
    public bool IsNew { get; }
    public Hyperlink(string location);
    internal Hyperlink(WorkItem workItem, LinkInfo fi);
    private static Hyperlink();
    public virtual RegisteredLinkType get_ArtifactLinkType();
    public virtual BaseLinkType get_BaseType();
    internal virtual LinkInfo GetLinkInfo();
    public string get_Location();
    public virtual string get_Comment();
    public virtual void set_Comment(string value);
    public virtual bool get_IsNew();
    internal virtual bool InternalEquals(Link l);
    internal virtual void InternalAdd(WorkItem workItem);
    internal virtual void InternalRemove(WorkItem workItem);
    internal virtual Link Clone(WorkItem target);
}
[EditorBrowsableAttribute("1")]
[ObsoleteAttribute("For more information please see documentation at http://aka.ms/witclientom")]
public interface Microsoft.TeamFoundation.WorkItemTracking.Client.IClonableQueryItem {
    public abstract virtual QueryItem2 Clone(QueryHierarchy2 hierarchy);
}
[DefaultMemberAttribute("Item")]
[ObsoleteAttribute("For more information please see documentation at http://aka.ms/witclientom")]
public class Microsoft.TeamFoundation.WorkItemTracking.Client.IdentityFieldAllowedValuesCollection : ReadOnlyList {
    private IdentityFieldValue[] values;
    public IdentityFieldValue Item { get; }
    public int Count { get; }
    internal IdentityFieldAllowedValuesCollection(WorkItemStore store, AllowedValuesCollection fieldAllowedValues);
    public IdentityFieldValue get_Item(int index);
    public virtual int get_Count();
    protected virtual object GetItem(int index);
}
[ObsoleteAttribute("For more information please see documentation at http://aka.ms/witclientom")]
public class Microsoft.TeamFoundation.WorkItemTracking.Client.IdentityFieldValue : object {
    [CompilerGeneratedAttribute]
private int <ConstantId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DisplayPart>k__BackingField;
    [CompilerGeneratedAttribute]
private string <FullName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Domain>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Alias>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Email>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Sid>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsIdentity>k__BackingField;
    public string DisplayName { get; }
    public string IdentityName { get; }
    public int ConstantId { get; private set; }
    public string DisplayPart { get; private set; }
    public string FullName { get; private set; }
    public string Domain { get; private set; }
    public string Alias { get; private set; }
    public string Email { get; private set; }
    public string Sid { get; private set; }
    public bool IsIdentity { get; private set; }
    public bool IsGroup { get; }
    internal IdentityFieldValue(string displayName);
    internal IdentityFieldValue(PsConstantMetadataRecord constantMetadata);
    public string get_DisplayName();
    public string get_IdentityName();
    [CompilerGeneratedAttribute]
public int get_ConstantId();
    [CompilerGeneratedAttribute]
private void set_ConstantId(int value);
    [CompilerGeneratedAttribute]
public string get_DisplayPart();
    [CompilerGeneratedAttribute]
private void set_DisplayPart(string value);
    [CompilerGeneratedAttribute]
public string get_FullName();
    [CompilerGeneratedAttribute]
private void set_FullName(string value);
    [CompilerGeneratedAttribute]
public string get_Domain();
    [CompilerGeneratedAttribute]
private void set_Domain(string value);
    [CompilerGeneratedAttribute]
public string get_Alias();
    [CompilerGeneratedAttribute]
private void set_Alias(string value);
    [CompilerGeneratedAttribute]
public string get_Email();
    [CompilerGeneratedAttribute]
private void set_Email(string value);
    [CompilerGeneratedAttribute]
public string get_Sid();
    [CompilerGeneratedAttribute]
private void set_Sid(string value);
    [CompilerGeneratedAttribute]
public bool get_IsIdentity();
    [CompilerGeneratedAttribute]
private void set_IsIdentity(bool value);
    public bool get_IsGroup();
}
[ObsoleteAttribute("For more information please see documentation at http://aka.ms/witclientom")]
internal class Microsoft.TeamFoundation.WorkItemTracking.Client.IdentityGroupComparer : object {
    private CompareInfo m_compareInfo;
    private static char GroupDiscriminator;
    public IdentityGroupComparer(CultureInfo culture);
    public sealed virtual int Compare(object a, object b);
}
[ObsoleteAttribute("For more information please see documentation at http://aka.ms/witclientom")]
public class Microsoft.TeamFoundation.WorkItemTracking.Client.IdentityNotExistException : ClientException {
    public IdentityNotExistException(string message);
    public IdentityNotExistException(string message, Exception innerException);
    protected IdentityNotExistException(SerializationInfo info, StreamingContext context);
}
[ObsoleteAttribute("For more information please see documentation at http://aka.ms/witclientom")]
internal interface Microsoft.TeamFoundation.WorkItemTracking.Client.IFieldStore {
    public abstract virtual bool HasValue(int row, int fieldId);
    public abstract virtual void StoreValue(int row, int fieldId, object value);
    public abstract virtual object GetStoredValue(int row, int fieldId);
    public abstract virtual void SetAccessDenied(int row);
    public abstract virtual bool IsAccessDenied(int row);
}
[ObsoleteAttribute("For more information please see documentation at http://aka.ms/witclientom")]
public class Microsoft.TeamFoundation.WorkItemTracking.Client.ImportEventArgs : EventArgs {
    private ImportSeverity m_severity;
    private string m_message;
    private Exception m_exception;
    public ImportSeverity Severity { get; }
    public string Message { get; }
    public Exception Exception { get; }
    internal ImportEventArgs(string message);
    internal ImportEventArgs(Exception exception, string message);
    public ImportSeverity get_Severity();
    public string get_Message();
    public Exception get_Exception();
}
[ObsoleteAttribute("For more information please see documentation at http://aka.ms/witclientom")]
public class Microsoft.TeamFoundation.WorkItemTracking.Client.ImportEventHandler : MulticastDelegate {
    public ImportEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, ImportEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, ImportEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
[ObsoleteAttribute("For more information please see documentation at http://aka.ms/witclientom")]
public enum Microsoft.TeamFoundation.WorkItemTracking.Client.ImportSeverity : Enum {
    public int value__;
    public static ImportSeverity Error;
    public static ImportSeverity Warning;
}
[ObsoleteAttribute("For more information please see documentation at http://aka.ms/witclientom")]
public class Microsoft.TeamFoundation.WorkItemTracking.Client.ImportStructureException : ValidationException {
    private Type m_type;
    public Type ExceptionType { get; public set; }
    public ImportStructureException(string message);
    public ImportStructureException(string message, Exception innerException);
    public ImportStructureException(string message, Exception innerException, Type subtype);
    public Type get_ExceptionType();
    public void set_ExceptionType(Type value);
}
[ObsoleteAttribute("For more information please see documentation at http://aka.ms/witclientom")]
public class Microsoft.TeamFoundation.WorkItemTracking.Client.ImportWorkItemLinkTypeException : ValidationException {
    private Type m_type;
    public Type ExceptionType { get; public set; }
    public ImportWorkItemLinkTypeException(string message);
    public ImportWorkItemLinkTypeException(string message, Exception innerException);
    public ImportWorkItemLinkTypeException(string message, Exception innerException, Type subtype);
    public Type get_ExceptionType();
    public void set_ExceptionType(Type value);
}
[ObsoleteAttribute("For more information please see documentation at http://aka.ms/witclientom")]
public class Microsoft.TeamFoundation.WorkItemTracking.Client.ImportWorkitemTypeException : ValidationException {
    private Type m_type;
    public Type ExceptionType { get; public set; }
    public ImportWorkitemTypeException(string message);
    public ImportWorkitemTypeException(string message, Exception innerException);
    public ImportWorkitemTypeException(string message, Exception innerException, Type subtype);
    public Type get_ExceptionType();
    public void set_ExceptionType(Type value);
}
[EditorBrowsableAttribute("1")]
public static class Microsoft.TeamFoundation.WorkItemTracking.Client.Internal.ResourceStrings : object {
    private static ResourceManager s_resMgr;
    public static string ErrorCoreServicesAttributeNotFound;
    public static string ErrorInvalidOnParameterizedQuery;
    public static string ErrorCoreServicesMiddleTierNotRegistered;
    public static string ErrorNodeNotExist;
    public static string ErrorCannotFindNodeFromId;
    public static string ErrorCouldNotConnect;
    public static string ErrorDeniedOrNotExist;
    public static string ErrorDuplicateGlobalList;
    public static string ErrorDuplicateListItem;
    public static string ErrorDuplicateReason;
    public static string ErrorDuplicatePattern;
    public static string ErrorFieldDefinitionNotExist;
    public static string ErrorFieldDefinitionNotExistGeneral;
    public static string ErrorFieldDefinitionIdNotExist;
    public static string ErrorFieldIdNotExist;
    public static string ErrorFieldNotFound;
    public static string ErrorFieldTypeMismatch;
    public static string ErrorGlobalListNotFound;
    public static string ErrorInvalidState;
    public static string ErrorManyDefaultStates;
    public static string ErrorDuplicateFieldName;
    public static string ErrorDuplicateFieldNameBackup;
    public static string ErrorManyStates;
    public static string ErrorNoDefaultState;
    public static string ErrorProjectNotExist;
    public static string ErrorProjectIdNotExist;
    public static string ErrorRelatedLinkNotExist;
    public static string ErrorRelatedLinkToSelf;
    public static string ErrorWorkItemStoreAlreadyConnected;
    public static string ErrorWorkItemTypeNotExist;
    public static string ErrorWorkItemTypeNameInvalid;
    public static string ErrorProhibitedMeasure;
    public static string ErrorWorkItemUpdateFieldsConflict;
    public static string ErrorWorkItemUpdateRuleViolation;
    public static string ErrorIncompatibleMeasure;
    public static string ErrorIncompatibleDimension;
    public static string ErrorIncompatibleDetail;
    public static string ErrorUnsupportedReportingFieldType;
    public static string ErrorDuplicateActions;
    public static string ErrorPageSizeLocked;
    public static string ErrorPageSizeRange;
    public static string ErrorActionsForInitialTransition;
    public static string ErrorDuplicateGlobalListItem;
    public static string ErrorWrongRuleForFieldType;
    public static string ErrorInconsistentFieldTypes;
    public static string ErrorFieldSelfReference;
    public static string ErrorInvalidListItem;
    public static string ErrorCannotSortBy;
    public static string ErrorLinkCommentTooLong;
    public static string ErrorLinkLocationTooLong;
    public static string ErrorHistory;
    public static string ErrorIgnoreField;
    public static string ErrorInvalidURL;
    public static string ErrorItemIsNew;
    public static string ErrorItemNotOpen;
    public static string ErrorItemOpen;
    public static string ErrorQueryNestingLimit;
    public static string ErrorItemAlreadyUpdatedOnServer;
    public static string ErrorInvalidTreeNode;
    public static string ErrorReadOnlyField;
    public static string ErrorBatchSaveFailed;
    public static string ErrorInconsistentRules;
    public static string ErrorUnknownFormField;
    public static string ErrorCannotUseTreePathType;
    public static string ErrorCannotUseHistoryType;
    public static string QueryNameEmpty;
    public static string QueryTextEmpty;
    public static string ErrorWorkItemValidation;
    public static string ErrorWorkItemNotExistOrNoAccess;
    public static string ErrorWorkItemChangeRejected;
    public static string ErrorRequestCancelledByUser;
    public static string ErrorDuplicateWorkItem;
    public static string ErrorInvalidProject;
    public static string ErrorAttachmentFileNotFound;
    public static string ErrorAttachmentCommentTooLong;
    public static string ErrorAttachmentAlreadyExists;
    public static string ErrorMaxNewAttachments;
    public static string FileUploadedExceededMaxMb;
    public static string FileUploadedExceededMaxBytes;
    public static string CannotChangeQueryScope;
    public static string QueryAlreadySaved;
    public static string QueryDescriptionTooLong;
    public static string TagFormatCreate;
    public static string TagFormatEdit;
    public static string TagFormatTransition;
    public static string TagAuth;
    public static string UnknownUser;
    public static string CopiedCommentItem;
    public static string WorkItemTag;
    public static string CopiedCommentNewItem;
    public static string ErrorInvalidFieldValue;
    public static string ErrorInvalidFieldName;
    public static string ErrorInvalidFieldReferenceName;
    public static string ErrorInternalField;
    public static string ErrorInvalidRuleForFieldType;
    public static string ErrorInvalidRuleForField;
    public static string ErrorDuplicateFieldReference;
    public static string ErrorFieldAlreadyExists;
    public static string ErrorFieldNotQueryable;
    public static string ErrorUserNotFoundForSid;
    public static string ErrorServerRejectedChangesException;
    public static string ErrorOrphanedItem;
    public static string ErrorOrphanedLink;
    public static string AttachmentChangedException;
    public static string AttachmentExistsException;
    public static string AttachmentNotFoundException;
    public static string WebExceptionConnectFailed;
    public static string WebExceptionCouldNotReachServer;
    public static string CouldNotReachServer;
    public static string WebExceptionTimeout;
    public static string BackEndArgumentException;
    public static string ErrorMissingConstant;
    public static string ErrorInvalidXmlNamespace;
    public static string ErrorCannotRenameField;
    public static string ErrorDifferentReportingSettings;
    public static string FieldNameChanged;
    public static string ErrorDuplicateFieldDefinition;
    public static string WarningMissingIdentity;
    public static string ErrorNoImportPermissions;
    public static string ErrorMissingRequiredAttribute;
    public static string WhereIsNotEmptyOnParameterizedQuery;
    public static string ErrorInvalidQueryColumn;
    public static string ErrorNotEnoughFields;
    public static string ErrorCantSortBy;
    public static string ErrorDuplicateStateInTransition;
    public static string ErrorDuplicateTransition;
    public static string ErrorAttachmentUploadFailed;
    public static string ErrorTwoWidthElements;
    public static string ErrorNoWidthElements;
    public static string ErrorReportingFieldNamesCollision;
    public static string ErrorNoPermissionCacheOutOfDate;
    public static string ErrorMetadataCacheOutOfDate;
    public static string ErrorFieldNameInUse;
    public static string ErrorFieldReferenceNameInUse;
    public static string LinkTypeCannotUpdateTopology;
    public static string LinkTypeSourceRelationNameRequired;
    public static string LinkTypeTargetRelationNameRequired;
    public static string LinkTypeTopologyNotSpecified;
    public static string LinkTypeNonDirectionalSourceTargetDifferent;
    public static string LinkTypeDirectionalSourceTargetSame;
    public static string LinkTypeNameConflict;
    public static string LinkTypeRefNameConflict;
    public static string LinkTypeFieldRefNameConflict;
    public static string ErrorInvalidLinkTypeName;
    public static string ErrorInvalidLinkTypeReferenceName;
    public static string ErrorInvalidLinkTypeReferenceNameSystem;
    public static string FieldLinkTypeRefNameConflict;
    public static string LinkTypeCannotBeModified;
    public static string LinkTypeHasBeenDeleted;
    public static string LinkTypeCannotBeDeleted;
    public static string ErrorWorkItemLinkTypeNotExist;
    public static string DifferentStores;
    public static string LinkNotFound2;
    public static string AddLinkCircularity2;
    public static string AddLinkAlreadyExists2;
    public static string AddLinkExtraParent2;
    public static string AddLinkExtraParent3;
    public static string ErrorBatchSaveNullWorkItem;
    public static string ErrorBatchSaveDuplicateWorkItem;
    public static string ErrorBatchSaveInvalidWorkItem;
    public static string ErrorLinkAlreadyAdded;
    public static string ErrorDuplicateExternalLink;
    public static string ErrorHyperlinkAlreadyAdded;
    public static string ErrorDuplicateHyperlink;
    public static string ErrorWorkItemLinkAlreadyAdded;
    public static string ErrorDuplicateWorkItemLink;
    public static string ErrorWorkItemLinkChangeTargetId;
    public static string ErrorWorkItemLinkChangeSourceId;
    public static string ErrorWorkItemLinkNeedTargetId;
    public static string ErrorWorkItemLinkOneOfIds;
    public static string ErrorWorkItemLinkToUndefined;
    public static string ErrorWorkItemNeedCollection;
    public static string ErrorWorkItemIsNotReadyToSave;
    public static string ErrorCantModifyIdField;
    public static string ErrorMalformedUri;
    public static string QueryLinksOnParameterizedQuery;
    public static string IncorrectEndAsyncQuery;
    public static string IncorrectWorkItemQueryMethod;
    public static string IncorrectLinkedWorkItemQueryMethod;
    public static string ErrorNullLinkInArray;
    public static string ErrorNoAreaWriteAccess;
    public static string QueryHierarchyTeamQueries;
    public static string QueryHierarchyMyQueries;
    public static string QueryHierarchyCannotAddSelfAsChild;
    public static string QueryHierarchyCannotAddDeletedItems;
    public static string QueryHierarchyCannotAddToDeletedFolder;
    public static string QueryHierarchyServerDoesNotSupportFolders;
    public static string QueryHierarchyServerDoesNotSupportPermissions;
    public static string QueryHierarchyCannotAddParentAsChild;
    public static string QueryHierarchyNameConflict;
    public static string ArgumentCannotBeEmpty;
    public static string QueryHierarchyQueryTextCannotBeEmpty;
    public static string QueryHierarchyAddingAcrossStoresProhibited;
    public static string QueryHierarchyRootNodesMayNotBeModified;
    public static string QueryHierarchyCannotModifyDeletedItems;
    public static string QueryHierarchyCannotDeleteDeletedItems;
    public static string QueryHierarchyCannotDeleteOrphanedItems;
    public static string QueryHierarchyMoveBetweenProjectsProhibited;
    public static string ErrorCannotImportWITNoPermissionToModifyFieldForAllProjects;
    public static string ErrorDuplicateCatRefName;
    public static string ErrorDuplicateCatName;
    public static string ErrorUnknownTypeInCategory;
    public static string ErrorDuplicateTypeInCategory;
    public static string ErrorInvalidXml;
    public static string ListSeparator;
    public static string ErrorControlLabelAttributeMissing;
    public static string ErrorLinkParametersTooFew;
    public static string ErrorInvalidParameter;
    public static string InvalidParameterIndexError;
    public static string ParameterIndexDuplicateError;
    public static string InvalidUrlRootFormat;
    public static string UnsupportedUriScheme;
    public static string UnsupportedUriSchemeWebpageControl;
    public static string WebpageControlInvalidAttributes;
    public static string ArgumentCannotBeNullOrEmpty;
    public static string ErrorFieldReportabilityChange;
    public static string ErrorFieldIndexingInvalidType;
    public static string ErrorInvalidProjectId;
    public static string ErrorMissingProjectScope;
    public static string ErrorGuidFieldsNotSupported;
    public static string ErrorBoolFieldsNotSupported;
    public static string ErrorRevisionQueriesNotSupported;
    public static string ErrorLinkLockingNotSupported;
    public static string ErrorComputedFieldInRevisionQuery;
    public static string ErrorDifferentProjectsInBatchSave;
    public static string ErrorFullTextService;
    public static string ErrorRenameSafeChanged;
    public static string ErrorRenameSafeNotValid;
    public static string ErrorGlobalWorkflowNotSupported;
    public static string IncorrectWorkItemState;
    public static string ErrorImageNotFound;
    public static string ErrorImageUploadFailed;
    public static string ErrorDeleteFieldNoPermission;
    public static string FolderNotPopulated;
    public static string RootFolderCannotBeSaved;
    public static string RootFolderCannotBeReset;
    public static string CannotSaveDetachedQueryItem;
    public static ResourceManager Manager { get; }
    private static ResourceStrings();
    public static ResourceManager get_Manager();
    public static string Get(string resourceName);
    public static string Get(string resourceName, CultureInfo culture);
    public static int GetInt(string resourceName);
    public static int GetInt(string resourceName, CultureInfo culture);
    public static bool GetBool(string resourceName);
    public static bool GetBool(string resourceName, CultureInfo culture);
    public static string Format(string resourceName, Object[] args);
    public static string Format(string resourceName, CultureInfo culture, Object[] args);
}
[EditorBrowsableAttribute("1")]
[ObsoleteAttribute("For more information please see documentation at http://aka.ms/witclientom")]
public static class Microsoft.TeamFoundation.WorkItemTracking.Client.InternalAdmin : object {
    public static IEnumerable`1<WorkItemOperationError> DestroyWorkItems(WorkItemStore store, Int32[] ids);
    public static void DestroyWorkItemType(WorkItemType workItemType);
    public static void RenameWorkItemType(WorkItemType workItemType, string newWITName);
    public static void DestroyGlobalList(WorkItemStore store, string globalListName, bool force);
    private static void DestroyGlobalListViaServer(WorkItemStore store, string globalListName, bool force);
    private static void DestroyGlobalListViaClient(WorkItemStore store, string globalListName, bool force);
    private static void ParseConstants(WorkItemStore store, IMetadataRowSets metadata, StringComparer stringComparer, string globalList, Int32& userConstId, Int32& adminConstId, Int32& globalListConstId);
    private static void ParseSets(IMetadataRowSets metadata, int globalListConstId, Dictionary`2& membersOf, List`1& globalListSets);
    private static void ValidateRules(IMetadataRowSets metadata, int globalListConstId, int userConstId, int adminConstId, Dictionary`2<int, List`1<int>> membersOf, bool force);
    private static List`1<int> ConstantUpward(int constId, Dictionary`2<int, List`1<int>> membersOf);
    private static IMetadataRowSets GetMetadata(WorkItemServer cls, StringComparer& stringComparer);
    private static Dictionary`2<string, int> GetMetadataColumnMap(IRowSet rowSet);
    private static void DestroySets(WorkItemServer cls, List`1<int> sets);
    public static String[] GetListOfGlobalLists(WorkItemStore store);
    public static String[] GetGlobalListContents(WorkItemStore store, string name);
    private static List`1<string> GetListOfGlobalListsImpl(WorkItemStore store);
}
[ObsoleteAttribute("For more information please see documentation at http://aka.ms/witclientom")]
public class Microsoft.TeamFoundation.WorkItemTracking.Client.InternalDatastoreException : Exception {
    private Type m_type;
    internal Type ExceptionType { get; internal set; }
    internal InternalDatastoreException(Type type);
    internal Type get_ExceptionType();
    internal void set_ExceptionType(Type value);
}
[ObsoleteAttribute("For more information please see documentation at http://aka.ms/witclientom")]
public static class Microsoft.TeamFoundation.WorkItemTracking.Client.InternalFields : object {
    public static string AttachedFiles_Ref;
    public static string ChangedSet_Ref;
    public static string InAdminOnlyTreeFlag_Ref;
    public static string InDeletedTreeFlag_Ref;
    public static string LinkedFiles_Ref;
    public static string NodeType_Ref;
    public static string NotAField_Ref;
    public static string PersonId_Ref;
    public static string ProjectId_Ref;
    public static string RelatedLinks_Ref;
    public static string TFServer_Ref;
    public static string WorkItemForm_Ref;
    public static string WorkItemFormId_Ref;
    private static String[] m_refNamesAll;
    public static String[] RefNamesAll { get; }
    public static int Count { get; }
    private static InternalFields();
    public static String[] get_RefNamesAll();
    public static int get_Count();
}
[ObsoleteAttribute("For more information please see documentation at http://aka.ms/witclientom")]
public class Microsoft.TeamFoundation.WorkItemTracking.Client.InvalidFieldValueException : ClientException {
    public InvalidFieldValueException(Exception innerException);
    public InvalidFieldValueException(string message, Exception innerException);
    protected InvalidFieldValueException(SerializationInfo info, StreamingContext context);
    public InvalidFieldValueException(string message);
}
[ObsoleteAttribute("Unused exception type")]
public class Microsoft.TeamFoundation.WorkItemTracking.Client.InvalidProjectException : ClientException {
    public InvalidProjectException(Exception innerException);
    protected InvalidProjectException(SerializationInfo info, StreamingContext context);
    public InvalidProjectException(string message);
    public InvalidProjectException(string message, Exception innerException);
}
[ObsoleteAttribute("For more information please see documentation at http://aka.ms/witclientom")]
public class Microsoft.TeamFoundation.WorkItemTracking.Client.InvalidQueryTextException : ValidationException {
    public InvalidQueryTextException(string message);
    public InvalidQueryTextException(string message, Exception innerException);
    protected InvalidQueryTextException(SerializationInfo info, StreamingContext context);
}
[ObsoleteAttribute("For more information please see documentation at http://aka.ms/witclientom")]
public class Microsoft.TeamFoundation.WorkItemTracking.Client.InvalidTreeNodeException : ClientException {
    public InvalidTreeNodeException(Exception innerException);
    protected InvalidTreeNodeException(SerializationInfo info, StreamingContext context);
    public InvalidTreeNodeException(string message);
    public InvalidTreeNodeException(string message, Exception innerException);
}
[ObsoleteAttribute("For more information please see documentation at http://aka.ms/witclientom")]
internal interface Microsoft.TeamFoundation.WorkItemTracking.Client.IQueryHierarchy2Provider {
    public IdentityDescriptor ConnectedIdentity { get; }
    public abstract virtual AccessControlListMetadata GetAccessControlListMetadata(string objectClassId);
    public abstract virtual void GetAccessControlList(QueryItem2 queryItem);
    public abstract virtual void ValidateWiql(string queryText);
    public abstract virtual IdentityDescriptor get_ConnectedIdentity();
}
[ObsoleteAttribute("For more information please see documentation at http://aka.ms/witclientom")]
internal interface Microsoft.TeamFoundation.WorkItemTracking.Client.IQueryItemDataProvider {
    public abstract virtual IEnumerable`1<QueryItem2> GetRootItems();
    public abstract virtual IEnumerable`1<QueryItem2> GetChildren(Guid id);
    public abstract virtual IEnumerable`1<QueryItemInfo> GetQueryItems(Guid[] ids);
    public abstract virtual void SaveQueryItem(QueryItem2 item);
}
[ObsoleteAttribute("For more information please see documentation at http://aka.ms/witclientom")]
internal interface Microsoft.TeamFoundation.WorkItemTracking.Client.IRevisionInternal {
    public WorkItem WorkItem { get; }
    public bool IsReadOnly { get; }
    public int Number { get; }
    public abstract virtual WorkItem get_WorkItem();
    public abstract virtual void SetFieldValue(FieldDefinition fd, object value);
    public abstract virtual object GetCurrentFieldValue(FieldDefinition fd);
    public abstract virtual object GetOriginalFieldValue(FieldDefinition fd);
    public abstract virtual bool get_IsReadOnly();
    public abstract virtual int get_Number();
    public abstract virtual object GetCurrentFieldValueWithServerDefault(FieldDefinition fd);
}
[ObsoleteAttribute("For more information please see documentation at http://aka.ms/witclientom")]
public class Microsoft.TeamFoundation.WorkItemTracking.Client.ItemAlreadyUpdatedOnServerException : ClientException {
    private List`1<FieldConflict> m_conflicts;
    public List`1<FieldConflict> FieldConflicts { get; internal set; }
    public ItemAlreadyUpdatedOnServerException(Exception innerException);
    public ItemAlreadyUpdatedOnServerException(string message, Exception innerException);
    public ItemAlreadyUpdatedOnServerException(string message);
    protected ItemAlreadyUpdatedOnServerException(SerializationInfo info, StreamingContext context);
    public List`1<FieldConflict> get_FieldConflicts();
    internal void set_FieldConflicts(List`1<FieldConflict> value);
}
[ObsoleteAttribute("For more information please see documentation at http://aka.ms/witclientom")]
public abstract class Microsoft.TeamFoundation.WorkItemTracking.Client.Link : object {
    public BaseLinkType BaseType { get; }
    public RegisteredLinkType ArtifactLinkType { get; }
    public string Comment { get; public set; }
    public bool IsLocked { get; public set; }
    public bool IsNew { get; }
    public abstract virtual BaseLinkType get_BaseType();
    public abstract virtual RegisteredLinkType get_ArtifactLinkType();
    public abstract virtual string get_Comment();
    public abstract virtual void set_Comment(string value);
    public virtual bool get_IsLocked();
    public virtual void set_IsLocked(bool value);
    public abstract virtual bool get_IsNew();
    internal virtual void Update(WorkItemLinkData data, LinkUpdate lu);
    internal abstract virtual bool InternalEquals(Link l);
    internal abstract virtual void InternalAdd(WorkItem workItem);
    internal abstract virtual void InternalRemove(WorkItem workItem);
    internal abstract virtual LinkInfo GetLinkInfo();
    internal virtual Link Clone(WorkItem target);
}
[ObsoleteAttribute("For more information please see documentation at http://aka.ms/witclientom")]
public enum Microsoft.TeamFoundation.WorkItemTracking.Client.LinkAction : Enum {
    public int value__;
    public static LinkAction Added;
    public static LinkAction Removed;
    public static LinkAction Updated;
}
[DefaultMemberAttribute("Item")]
[ObsoleteAttribute("For more information please see documentation at http://aka.ms/witclientom")]
public class Microsoft.TeamFoundation.WorkItemTracking.Client.LinkCollection : VariableSizeList {
    private WorkItem m_workitem;
    private int m_revision;
    private List`1<Link> m_linkList;
    private int m_removingIndex;
    private Link m_addingObject;
    public WorkItem WorkItem { get; }
    public int Count { get; }
    public Link Item { get; }
    internal bool IsHistoricalRevision { get; }
    internal LinkCollection(WorkItem workitem, int revision);
    internal void Ensure();
    internal Link CreateLinkObject(LinkInfo li);
    private void Populate();
    [EditorBrowsableAttribute("1")]
public void Refresh();
    internal void HandleChange(LinkInfo li, LinkAction action);
    public WorkItem get_WorkItem();
    public virtual int get_Count();
    public Link get_Item(int index);
    public int Add(Link link);
    public int Add(Hyperlink link);
    public int Add(ExternalLink link);
    public int Add(RelatedLink link);
    public virtual void RemoveAt(int index);
    public virtual void Clear();
    public int IndexOf(Link link);
    public void Remove(Link link);
    public bool Contains(Link link);
    private sealed virtual override int System.Collections.IList.IndexOf(object value);
    protected virtual object GetItem(int index);
    protected virtual int AddItem(object value);
    internal bool get_IsHistoricalRevision();
}
[ObsoleteAttribute("For more information please see documentation at http://aka.ms/witclientom")]
internal enum Microsoft.TeamFoundation.WorkItemTracking.Client.LinkOperation : Enum {
    public int value__;
    public static LinkOperation Add;
    public static LinkOperation Update;
    public static LinkOperation Delete;
}
[ObsoleteAttribute("For more information please see documentation at http://aka.ms/witclientom")]
internal class Microsoft.TeamFoundation.WorkItemTracking.Client.LinkTypeXmlBuilder : object {
    private static string LinkTypesElementName;
    private static string LinkTypeElementName;
    private static string TopologyAttribute;
    private WorkItemStore m_ws;
    public LinkTypeXmlBuilder(WorkItemStore ws);
    public static XmlDocument Export(WorkItemLinkType linkType);
    public static XmlDocument Export(WorkItemLinkTypeCollection linkTypes);
    private static XmlElement Export(XmlDocument doc, WorkItemLinkType linkType);
    public static XmlDocument GetDeletePackage(WorkItemLinkType linkType);
    public static XmlDocument GetUpdateRulesPackage(WorkItemLinkType linkType, UInt32 newRules);
    public XmlDocument Translate(XmlElement linkTypesElement, bool insertsOnly);
}
[FlagsAttribute]
[ObsoleteAttribute("For more information please see documentation at http://aka.ms/witclientom")]
internal enum Microsoft.TeamFoundation.WorkItemTracking.Client.ListFlags : Enum {
    public int value__;
    public static ListFlags None;
    public static ListFlags Leafs;
    public static ListFlags Sets;
    public static ListFlags DirectChildren;
    public static ListFlags IndirectChildren;
    public static ListFlags ExcludeRoot;
    public static ListFlags All;
}
[ObsoleteAttribute("For more information please see documentation at http://aka.ms/witclientom")]
internal class Microsoft.TeamFoundation.WorkItemTracking.Client.ListItemComparer : object {
    private Type m_itemType;
    private CaseInsensitiveComparer m_cmp;
    public ListItemComparer(Type itemType, CultureInfo culture);
    public sealed virtual int Compare(object x, object y);
}
[ObsoleteAttribute("For more information please see documentation at http://aka.ms/witclientom")]
internal enum Microsoft.TeamFoundation.WorkItemTracking.Client.ListType : Enum {
    public int value__;
    public static ListType Allowed;
    public static ListType Prohibited;
}
[EditorBrowsableAttribute("1")]
[ObsoleteAttribute("For more information please see documentation at http://aka.ms/witclientom")]
public class Microsoft.TeamFoundation.WorkItemTracking.Client.Metadata.Cache : object {
    private WorkItemStore m_store;
    private Dictionary`2<IntPtr, WeakReference> m_strings;
    private Dictionary`2<int, ProjectInfo> m_projects;
    internal WorkItemStore Store { get; }
    public Cache(WorkItemStore store);
    internal WorkItemStore get_Store();
    public Snapshot GetSnapshot();
    internal string PtrToString(IntPtr psz);
    internal string PtrToString(IntPtr psz, int cch);
    internal string GetConstValue(int constId, bool fullValue);
    internal void ScanRules(int projectId);
    private bool TryGetProject(int projectId, ProjectInfo& proj);
    internal string GetFieldHelpText(int projId, int witConstId, int fieldId);
    internal string GetWitForm(int projId, int witConstId);
}
[ExtensionAttribute]
[ObsoleteAttribute("For more information please see documentation at http://aka.ms/witclientom")]
internal static class Microsoft.TeamFoundation.WorkItemTracking.Client.Metadata.Extensions : object {
    [ExtensionAttribute]
internal static PsFieldDefinitionTypeEnum GetFieldType(PsFieldMetadataRecord f);
    [ExtensionAttribute]
internal static bool IsReadOnly(PsFieldMetadataRecord f);
    [ExtensionAttribute]
internal static bool IsIgnored(PsFieldMetadataRecord f);
    [ExtensionAttribute]
internal static bool IsComputed(PsFieldMetadataRecord f);
    [ExtensionAttribute]
internal static bool IsInternal(PsFieldMetadataRecord f);
    [ExtensionAttribute]
internal static bool IsQueryable(PsFieldMetadataRecord f);
    [ExtensionAttribute]
internal static bool CanSortBy(PsFieldMetadataRecord f);
    [ExtensionAttribute]
internal static PsDatastoreItemTypeEnum GetObjectType(PsFieldUsageMetadataRecord u);
    [ExtensionAttribute]
internal static bool IsCoreField(PsFieldUsageMetadataRecord u);
    [ExtensionAttribute]
internal static bool IsFormRule(PsRuleMetadataRecord r);
    [ExtensionAttribute]
internal static bool IsHelpTextRule(PsRuleMetadataRecord r);
}
[ComVisibleAttribute("False")]
[GuidAttribute("326360e5-7fd0-4b97-900b-e5b9d428e1ca")]
[InterfaceTypeAttribute("1")]
[ObsoleteAttribute("For more information please see documentation at http://aka.ms/witclientom")]
internal interface Microsoft.TeamFoundation.WorkItemTracking.Client.Metadata.IPsCategoryMemberMetadataReadFactory {
    public abstract virtual object HrCreateCategoryMemberLookup(int c);
}
[ComVisibleAttribute("False")]
[GuidAttribute("b920dc9e-534e-49bf-9af4-1c9d77162bd5")]
[InterfaceTypeAttribute("1")]
[ObsoleteAttribute("For more information please see documentation at http://aka.ms/witclientom")]
internal interface Microsoft.TeamFoundation.WorkItemTracking.Client.Metadata.IPsCategoryMetadataReadFactory {
    public abstract virtual object HrCreateCategoryLookup(int c);
}
[ComVisibleAttribute("False")]
[GuidAttribute("B74A605A-F680-4652-A6E8-A721D9CDE5D6")]
[InterfaceTypeAttribute("1")]
[ObsoleteAttribute("For more information please see documentation at http://aka.ms/witclientom")]
internal interface Microsoft.TeamFoundation.WorkItemTracking.Client.Metadata.IPsConstantMetadataReadFactory {
    public abstract virtual object HrCreateConstantNameLookup(int id);
    public abstract virtual object HrCreateConstantSidLookup(int id);
}
[ComVisibleAttribute("False")]
[GuidAttribute("DB5C1CD4-99FE-4AB6-8E7D-6D0BE4CB6513")]
[InterfaceTypeAttribute("1")]
[ObsoleteAttribute("For more information please see documentation at http://aka.ms/witclientom")]
internal interface Microsoft.TeamFoundation.WorkItemTracking.Client.Metadata.IPsConstantSetMetadataReadFactory {
    public abstract virtual object HrCreateConstantSetParentLookup(int id);
    public abstract virtual object HrCreateConstantSetChildLookup(int id);
}
[ComVisibleAttribute("False")]
[GuidAttribute("55735142-1939-4d7f-9e69-3281c1f0461a")]
[InterfaceTypeAttribute("1")]
[ObsoleteAttribute("For more information please see documentation at http://aka.ms/witclientom")]
internal interface Microsoft.TeamFoundation.WorkItemTracking.Client.Metadata.IPsEnumCategoryIdMetadata {
    public abstract virtual int HrNext(int c, PsCategoryIdMetadataRecord* p, IntPtr cookie);
}
[ComVisibleAttribute("False")]
[GuidAttribute("224867f9-3fff-4932-af83-f16c1a7b569d")]
[InterfaceTypeAttribute("1")]
[ObsoleteAttribute("For more information please see documentation at http://aka.ms/witclientom")]
internal interface Microsoft.TeamFoundation.WorkItemTracking.Client.Metadata.IPsEnumCategoryMemberIdMetadata {
    public abstract virtual int HrNext(int c, PsCategoryMemberIdMetadataRecord* p, IntPtr cookie);
}
[ComVisibleAttribute("False")]
[GuidAttribute("33b027da-3a79-4ebb-beb3-908bde1e325c")]
[InterfaceTypeAttribute("1")]
[ObsoleteAttribute("For more information please see documentation at http://aka.ms/witclientom")]
internal interface Microsoft.TeamFoundation.WorkItemTracking.Client.Metadata.IPsEnumCategoryMemberMetadata {
    public abstract virtual int HrNext(int c, PsCategoryMemberMetadataRecord* p, IntPtr cookie);
}
[ComVisibleAttribute("False")]
[GuidAttribute("22494cfa-07fd-4b51-8269-df787fb63d3a")]
[InterfaceTypeAttribute("1")]
[ObsoleteAttribute("For more information please see documentation at http://aka.ms/witclientom")]
internal interface Microsoft.TeamFoundation.WorkItemTracking.Client.Metadata.IPsEnumCategoryMetadata {
    public abstract virtual int HrNext(int c, PsCategoryMetadataRecord* p, IntPtr cookie);
}
[ComVisibleAttribute("False")]
[GuidAttribute("9544E526-2D00-463C-A10F-A7B7F5C6C7A3")]
[InterfaceTypeAttribute("1")]
[ObsoleteAttribute("For more information please see documentation at http://aka.ms/witclientom")]
internal interface Microsoft.TeamFoundation.WorkItemTracking.Client.Metadata.IPsEnumConstantIdMetadata {
    public abstract virtual int HrNext(int c, PsConstantIdMetadataRecord* p, IntPtr cookie);
}
[ComVisibleAttribute("False")]
[GuidAttribute("C049C4C0-8F56-4047-BF2D-C911FB47BDC2")]
[InterfaceTypeAttribute("1")]
[ObsoleteAttribute("For more information please see documentation at http://aka.ms/witclientom")]
internal interface Microsoft.TeamFoundation.WorkItemTracking.Client.Metadata.IPsEnumConstantMetadata {
    public abstract virtual int HrNext(int c, PsConstantMetadataRecord* p, IntPtr cookie);
}
[ComVisibleAttribute("False")]
[GuidAttribute("C78E4E0F-9F39-4723-8160-8C7EB58AD63C")]
[InterfaceTypeAttribute("1")]
[ObsoleteAttribute("For more information please see documentation at http://aka.ms/witclientom")]
internal interface Microsoft.TeamFoundation.WorkItemTracking.Client.Metadata.IPsEnumConstantSetMetadata {
    public abstract virtual int HrNext(int c, PsConstantSetMetadataRecord* p, IntPtr cookie);
}
[ComVisibleAttribute("False")]
[GuidAttribute("4526CE50-9A31-45A5-B33D-4066CA59B61F")]
[InterfaceTypeAttribute("1")]
[ObsoleteAttribute("For more information please see documentation at http://aka.ms/witclientom")]
internal interface Microsoft.TeamFoundation.WorkItemTracking.Client.Metadata.IPsEnumConstantSetRelationMetadata {
    public abstract virtual int HrNext(int c, PsConstantSetRelationMetadataRecord* p, IntPtr cookie);
}
[ComVisibleAttribute("False")]
[GuidAttribute("36444477-F33A-44E5-BD3E-89524E66124C")]
[InterfaceTypeAttribute("1")]
[ObsoleteAttribute("For more information please see documentation at http://aka.ms/witclientom")]
internal interface Microsoft.TeamFoundation.WorkItemTracking.Client.Metadata.IPsEnumFieldIdMetadata {
    public abstract virtual int HrNext(int c, PsFieldIdMetadataRecord* p, IntPtr cookie);
}
[ComVisibleAttribute("False")]
[GuidAttribute("DA429519-EC46-403D-B48B-EFDF75599EEB")]
[InterfaceTypeAttribute("1")]
[ObsoleteAttribute("For more information please see documentation at http://aka.ms/witclientom")]
internal interface Microsoft.TeamFoundation.WorkItemTracking.Client.Metadata.IPsEnumFieldMetadata {
    public abstract virtual int HrNext(int c, PsFieldMetadataRecord* p, IntPtr cookie);
}
[ComVisibleAttribute("False")]
[GuidAttribute("831B6688-440E-431E-8ABD-CA6BCCDFCBAA")]
[InterfaceTypeAttribute("1")]
[ObsoleteAttribute("For more information please see documentation at http://aka.ms/witclientom")]
internal interface Microsoft.TeamFoundation.WorkItemTracking.Client.Metadata.IPsEnumFieldUsageChildrenMetadata {
    public abstract virtual int HrNext(int c, PsFieldUsageChildrenMetadataRecord* p, IntPtr cookie);
}
[ComVisibleAttribute("False")]
[GuidAttribute("C63C84F0-02FB-49E4-A9FD-3D25B377AA64")]
[InterfaceTypeAttribute("1")]
[ObsoleteAttribute("For more information please see documentation at http://aka.ms/witclientom")]
internal interface Microsoft.TeamFoundation.WorkItemTracking.Client.Metadata.IPsEnumFieldUsageMetadata {
    public abstract virtual int HrNext(int c, PsFieldUsageMetadataRecord* p, IntPtr cookie);
}
[ComVisibleAttribute("False")]
[GuidAttribute("271b1ac9-c13c-4d0b-987a-59bac83e465e")]
[InterfaceTypeAttribute("1")]
[ObsoleteAttribute("For more information please see documentation at http://aka.ms/witclientom")]
internal interface Microsoft.TeamFoundation.WorkItemTracking.Client.Metadata.IPsEnumLinkTypeMetadata {
    public abstract virtual int HrNext(int c, PsLinkTypeMetadataRecord* p, IntPtr cookie);
}
[ComVisibleAttribute("False")]
[GuidAttribute("0DA62968-B5D0-460B-B695-6217631A417E")]
[InterfaceTypeAttribute("1")]
[ObsoleteAttribute("For more information please see documentation at http://aka.ms/witclientom")]
internal interface Microsoft.TeamFoundation.WorkItemTracking.Client.Metadata.IPsEnumRuleIdMetadata {
    public abstract virtual int HrNext(int c, PsRuleIdMetadataRecord* p, IntPtr cookie);
}
[ComVisibleAttribute("False")]
[GuidAttribute("AC09964E-3CFD-4EB3-A292-969D2575D93D")]
[InterfaceTypeAttribute("1")]
[ObsoleteAttribute("For more information please see documentation at http://aka.ms/witclientom")]
internal interface Microsoft.TeamFoundation.WorkItemTracking.Client.Metadata.IPsEnumRuleMetadata {
    public abstract virtual int HrNext(int c, PsRuleMetadataRecord* p, IntPtr cookie);
}
[ComVisibleAttribute("False")]
[GuidAttribute("9e3da44c-152e-4fe1-97d3-6169aca3f562")]
[InterfaceTypeAttribute("1")]
[ObsoleteAttribute("For more information please see documentation at http://aka.ms/witclientom")]
internal interface Microsoft.TeamFoundation.WorkItemTracking.Client.Metadata.IPsEnumStateTransitionIdMetadata {
    public abstract virtual int HrNext(int c, PsStateTransitionIdMetadataRecord* p, IntPtr cookie);
}
[ComVisibleAttribute("False")]
[GuidAttribute("3F2DADD4-1798-40e8-A615-B695ED70453A")]
[InterfaceTypeAttribute("1")]
[ObsoleteAttribute("For more information please see documentation at http://aka.ms/witclientom")]
internal interface Microsoft.TeamFoundation.WorkItemTracking.Client.Metadata.IPsEnumStateTransitionMetadata {
    public abstract virtual int HrNext(int c, PsStateTransitionMetadataRecord* p, IntPtr cookie);
}
[ComVisibleAttribute("False")]
[GuidAttribute("75659DC2-674E-4EAB-BD81-D0936C58DCEC")]
[InterfaceTypeAttribute("1")]
[ObsoleteAttribute("For more information please see documentation at http://aka.ms/witclientom")]
internal interface Microsoft.TeamFoundation.WorkItemTracking.Client.Metadata.IPsEnumTreeIdMetadata {
    public abstract virtual int HrNext(int c, PsTreeIdMetadataRecord* p, IntPtr cookie);
}
[ComVisibleAttribute("False")]
[GuidAttribute("135BBA49-CEC5-4912-93A5-3A66DCCF9300")]
[InterfaceTypeAttribute("1")]
[ObsoleteAttribute("For more information please see documentation at http://aka.ms/witclientom")]
internal interface Microsoft.TeamFoundation.WorkItemTracking.Client.Metadata.IPsEnumTreeMetadata {
    public abstract virtual int HrNext(int c, PsTreeMetadataRecord* p, IntPtr cookie);
    public abstract virtual int HrGetCount();
}
[ComVisibleAttribute("False")]
[GuidAttribute("1CA78FB3-F1F6-42D7-AF8B-177A1B4F9A45")]
[InterfaceTypeAttribute("1")]
[ObsoleteAttribute("For more information please see documentation at http://aka.ms/witclientom")]
internal interface Microsoft.TeamFoundation.WorkItemTracking.Client.Metadata.IPsEnumTreePropertyIdMetadata {
    public abstract virtual int HrNext(int c, PsTreePropertyIdMetadataRecord* p, IntPtr cookie);
}
[ComVisibleAttribute("False")]
[GuidAttribute("0D32EB74-B23F-4C0B-949E-6B6F1B6F66C2")]
[InterfaceTypeAttribute("1")]
[ObsoleteAttribute("For more information please see documentation at http://aka.ms/witclientom")]
internal interface Microsoft.TeamFoundation.WorkItemTracking.Client.Metadata.IPsEnumTreePropertyMetadata {
    public abstract virtual int HrNext(int c, PsTreePropertyMetadataRecord* p, IntPtr cookie);
}
[ComVisibleAttribute("False")]
[GuidAttribute("9e3da44c-152e-4fe1-97d3-6169aca3f561")]
[InterfaceTypeAttribute("1")]
[ObsoleteAttribute("For more information please see documentation at http://aka.ms/witclientom")]
internal interface Microsoft.TeamFoundation.WorkItemTracking.Client.Metadata.IPsEnumWorkItemTypeFieldUsageIdMetadata {
    public abstract virtual int HrNext(int c, PsWorkItemTypeFieldUsageIdMetadataRecord* p, IntPtr cookie);
}
[ComVisibleAttribute("False")]
[GuidAttribute("a3b43347-8485-4672-98af-948bc7046f2a")]
[InterfaceTypeAttribute("1")]
[ObsoleteAttribute("For more information please see documentation at http://aka.ms/witclientom")]
internal interface Microsoft.TeamFoundation.WorkItemTracking.Client.Metadata.IPsEnumWorkItemTypeFieldUsageMetadata {
    public abstract virtual int HrNext(int c, PsWorkItemTypeFieldUsageMetadataRecord* p, IntPtr cookie);
}
[ComVisibleAttribute("False")]
[GuidAttribute("f8545be6-385b-4699-8494-abdcb40e2c94")]
[InterfaceTypeAttribute("1")]
[ObsoleteAttribute("For more information please see documentation at http://aka.ms/witclientom")]
internal interface Microsoft.TeamFoundation.WorkItemTracking.Client.Metadata.IPsEnumWorkItemTypeIdMetadata {
    public abstract virtual int HrNext(int c, PsWorkItemTypeIdMetadataRecord* p, IntPtr cookie);
}
[ComVisibleAttribute("False")]
[GuidAttribute("30ac0a67-b9d7-472b-ac2d-723e9dee55a9")]
[InterfaceTypeAttribute("1")]
[ObsoleteAttribute("For more information please see documentation at http://aka.ms/witclientom")]
internal interface Microsoft.TeamFoundation.WorkItemTracking.Client.Metadata.IPsEnumWorkItemTypeMetadata {
    public abstract virtual int HrNext(int c, PsWorkItemTypeMetadataRecord* p, IntPtr cookie);
}
[ComVisibleAttribute("False")]
[GuidAttribute("20DB4A5E-2829-4C41-A89A-85DA12659C01")]
[InterfaceTypeAttribute("1")]
[ObsoleteAttribute("For more information please see documentation at http://aka.ms/witclientom")]
internal interface Microsoft.TeamFoundation.WorkItemTracking.Client.Metadata.IPsFieldMetadataReadFactory {
    public abstract virtual object HrCreateFieldTypeLookup(int id);
    public abstract virtual object HrCreateFieldSchemaNameLookup(int id);
}
[ComVisibleAttribute("False")]
[GuidAttribute("C14ACD7B-B29B-481F-8A3A-28A41CC94841")]
[InterfaceTypeAttribute("1")]
[ObsoleteAttribute("For more information please see documentation at http://aka.ms/witclientom")]
internal interface Microsoft.TeamFoundation.WorkItemTracking.Client.Metadata.IPsFieldUsageMetadataReadFactory {
    public abstract virtual object HrCreateFieldUsageChildLookup(int id);
    public abstract virtual object HrCreateFieldUsageChildParentLookup(int id);
    public abstract virtual object HrCreateFieldUsageParentChildLookup(int id);
}
[ComVisibleAttribute("False")]
[GuidAttribute("08C8956A-4503-4043-BA00-A97372551E31")]
[InterfaceTypeAttribute("1")]
[ObsoleteAttribute("For more information please see documentation at http://aka.ms/witclientom")]
internal interface Microsoft.TeamFoundation.WorkItemTracking.Client.Metadata.IPsFullNameLookupConstantMetadata {
    public abstract virtual void HrLookup(int c, IntPtr* ids, Byte* found, PsConstantMetadataRecord* p, IntPtr cookie);
}
[ComVisibleAttribute("False")]
[GuidAttribute("257DE215-37A4-4ae5-99E4-64A6261AABA7")]
[InterfaceTypeAttribute("1")]
[ObsoleteAttribute("For more information please see documentation at http://aka.ms/witclientom")]
internal interface Microsoft.TeamFoundation.WorkItemTracking.Client.Metadata.IPsGUIDLookupTreeMetadata {
    public abstract virtual object HrLookup(string name);
}
[ComVisibleAttribute("False")]
[GuidAttribute("73eaed44-5adc-4c2f-83a0-fe28ca3413e0")]
[InterfaceTypeAttribute("1")]
[ObsoleteAttribute("For more information please see documentation at http://aka.ms/witclientom")]
internal interface Microsoft.TeamFoundation.WorkItemTracking.Client.Metadata.IPsLookupCategoryMemberRelationMetadata {
    public abstract virtual object HrLookup(int c);
}
[ComVisibleAttribute("False")]
[GuidAttribute("29F8B4AE-869A-4ED3-9E93-9D121BAD51D1")]
[InterfaceTypeAttribute("1")]
[ObsoleteAttribute("For more information please see documentation at http://aka.ms/witclientom")]
internal interface Microsoft.TeamFoundation.WorkItemTracking.Client.Metadata.IPsLookupConstantMetadata {
    public abstract virtual void HrLookup(int c, Int32* ids, Byte* found, PsConstantMetadataRecord* p, IntPtr cookie);
}
[ComVisibleAttribute("False")]
[GuidAttribute("4D496295-F84B-4C39-B74D-197932341D1C")]
[InterfaceTypeAttribute("1")]
[ObsoleteAttribute("For more information please see documentation at http://aka.ms/witclientom")]
internal interface Microsoft.TeamFoundation.WorkItemTracking.Client.Metadata.IPsLookupConstantSetRelationMetadata {
    public abstract virtual object HrLookup(int id);
}
[ComVisibleAttribute("False")]
[GuidAttribute("282B21B6-6BEB-439D-B58F-92297DB00415")]
[InterfaceTypeAttribute("1")]
[ObsoleteAttribute("For more information please see documentation at http://aka.ms/witclientom")]
internal interface Microsoft.TeamFoundation.WorkItemTracking.Client.Metadata.IPsLookupFieldMetadata {
    public abstract virtual void HrLookup(int c, Int32* ids, Byte* found, PsFieldMetadataRecord* p, IntPtr cookie);
}
[ComVisibleAttribute("False")]
[GuidAttribute("DA51F856-E401-42F6-8C59-5CD1DDB5A79C")]
[InterfaceTypeAttribute("1")]
[ObsoleteAttribute("For more information please see documentation at http://aka.ms/witclientom")]
internal interface Microsoft.TeamFoundation.WorkItemTracking.Client.Metadata.IPsLookupFieldSchemaNameMetadata {
    public abstract virtual object HrLookup(string name);
}
[ComVisibleAttribute("False")]
[GuidAttribute("86132795-C80D-48BC-8764-14CA6AD4DDDD")]
[InterfaceTypeAttribute("1")]
[ObsoleteAttribute("For more information please see documentation at http://aka.ms/witclientom")]
internal interface Microsoft.TeamFoundation.WorkItemTracking.Client.Metadata.IPsLookupFieldTypeMetadata {
    public abstract virtual object HrLookup(int id);
}
[ComVisibleAttribute("False")]
[GuidAttribute("33306B17-C135-4D74-8592-BA747CE7560B")]
[InterfaceTypeAttribute("1")]
[ObsoleteAttribute("For more information please see documentation at http://aka.ms/witclientom")]
internal interface Microsoft.TeamFoundation.WorkItemTracking.Client.Metadata.IPsLookupFieldUsageChildParentMetadata {
    public abstract virtual object HrLookup(int id);
}
[ComVisibleAttribute("False")]
[GuidAttribute("275F90FA-A7F5-4376-90D8-63A25D9ADA48")]
[InterfaceTypeAttribute("1")]
[ObsoleteAttribute("For more information please see documentation at http://aka.ms/witclientom")]
internal interface Microsoft.TeamFoundation.WorkItemTracking.Client.Metadata.IPsLookupFieldUsageChildrenMetadata {
    public abstract virtual object HrLookup(int id);
}
[ComVisibleAttribute("False")]
[GuidAttribute("B10ECD61-4274-40EF-AD59-05205CDC19C6")]
[InterfaceTypeAttribute("1")]
[ObsoleteAttribute("For more information please see documentation at http://aka.ms/witclientom")]
internal interface Microsoft.TeamFoundation.WorkItemTracking.Client.Metadata.IPsLookupFieldUsageParentChildMetadata {
    public abstract virtual object HrLookup(int id);
}
[ComVisibleAttribute("False")]
[GuidAttribute("673ab438-d5a2-4591-8485-1fd6e943fbd7")]
[InterfaceTypeAttribute("1")]
[ObsoleteAttribute("For more information please see documentation at http://aka.ms/witclientom")]
internal interface Microsoft.TeamFoundation.WorkItemTracking.Client.Metadata.IPsLookupProjectCategoryRelationMetadata {
    public abstract virtual object HrLookup(int id);
}
[ComVisibleAttribute("False")]
[GuidAttribute("5198069E-D27F-4E92-8E0D-822EAE9E6979")]
[InterfaceTypeAttribute("1")]
[ObsoleteAttribute("For more information please see documentation at http://aka.ms/witclientom")]
internal interface Microsoft.TeamFoundation.WorkItemTracking.Client.Metadata.IPsLookupRuleTreeMetadata {
    public abstract virtual object HrLookup(int id);
}
[ComVisibleAttribute("False")]
[GuidAttribute("B8DB437C-7F0B-483f-AD0D-54561FA38A44")]
[InterfaceTypeAttribute("1")]
[ObsoleteAttribute("For more information please see documentation at http://aka.ms/witclientom")]
internal interface Microsoft.TeamFoundation.WorkItemTracking.Client.Metadata.IPsLookupStateTransitionMetadata {
    public abstract virtual void HrLookup(int c, Int32* ids, Byte* found, PsStateTransitionMetadataRecord* p, IntPtr cookie);
}
[ComVisibleAttribute("False")]
[GuidAttribute("b5168f72-31be-4c5b-9c54-2c06a9309ed7")]
[InterfaceTypeAttribute("1")]
[ObsoleteAttribute("For more information please see documentation at http://aka.ms/witclientom")]
internal interface Microsoft.TeamFoundation.WorkItemTracking.Client.Metadata.IPsLookupStateTransitionWorkItemTypeMetadata {
    public abstract virtual object HrLookup(int id);
}
[ComVisibleAttribute("False")]
[GuidAttribute("4AC74B0A-A716-4149-9519-87F78C719024")]
[InterfaceTypeAttribute("1")]
[ObsoleteAttribute("For more information please see documentation at http://aka.ms/witclientom")]
internal interface Microsoft.TeamFoundation.WorkItemTracking.Client.Metadata.IPsLookupTreeChildrenMetadata {
    public abstract virtual object HrLookup(int id);
}
[ComVisibleAttribute("False")]
[GuidAttribute("FC815C13-43C6-4216-B82B-8868E24BF4AB")]
[InterfaceTypeAttribute("1")]
[ObsoleteAttribute("For more information please see documentation at http://aka.ms/witclientom")]
internal interface Microsoft.TeamFoundation.WorkItemTracking.Client.Metadata.IPsLookupTreeMetadata {
    public abstract virtual void HrLookup(int c, Int32* ids, Byte* found, PsTreeMetadataRecord* p, IntPtr cookie);
}
[ComVisibleAttribute("False")]
[GuidAttribute("79934A72-4919-4771-8843-924779EDB4C6")]
[InterfaceTypeAttribute("1")]
[ObsoleteAttribute("For more information please see documentation at http://aka.ms/witclientom")]
internal interface Microsoft.TeamFoundation.WorkItemTracking.Client.Metadata.IPsLookupTreeNameMetadata {
    public abstract virtual object HrLookup(string name);
}
[ComVisibleAttribute("False")]
[GuidAttribute("C2B1329C-A16B-4D7D-87FE-6E36F9C0AA4D")]
[InterfaceTypeAttribute("1")]
[ObsoleteAttribute("For more information please see documentation at http://aka.ms/witclientom")]
internal interface Microsoft.TeamFoundation.WorkItemTracking.Client.Metadata.IPsLookupTreePropertyMetadata {
    public abstract virtual void HrLookup(int c, Int32* ids, Byte* found, PsTreePropertyMetadataRecord* p, IntPtr cookie);
}
[ComVisibleAttribute("False")]
[GuidAttribute("A56B5498-4D14-4174-B95B-0D8E91AF7F4D")]
[InterfaceTypeAttribute("1")]
[ObsoleteAttribute("For more information please see documentation at http://aka.ms/witclientom")]
internal interface Microsoft.TeamFoundation.WorkItemTracking.Client.Metadata.IPsLookupTreeTypeMetadata {
    public abstract virtual object HrLookup(int id);
}
[ComVisibleAttribute("False")]
[GuidAttribute("b5168f72-31be-4c5b-9c54-2c06a9309ed6")]
[InterfaceTypeAttribute("1")]
[ObsoleteAttribute("For more information please see documentation at http://aka.ms/witclientom")]
internal interface Microsoft.TeamFoundation.WorkItemTracking.Client.Metadata.IPsLookupWorkItemTypeFieldUsageWorkItemTypeMetadata {
    public abstract virtual object HrLookup(int id);
}
[ComVisibleAttribute("False")]
[GuidAttribute("3d943ced-c461-4190-9f24-f156a6fa6ef6")]
[InterfaceTypeAttribute("1")]
[ObsoleteAttribute("For more information please see documentation at http://aka.ms/witclientom")]
internal interface Microsoft.TeamFoundation.WorkItemTracking.Client.Metadata.IPsLookupWorkItemTypeMetadata {
    public abstract virtual void HrLookup(int c, Int32* ids, Byte* found, PsWorkItemTypeMetadataRecord* p, IntPtr cookie);
}
[ComVisibleAttribute("False")]
[GuidAttribute("6a88658c-9789-4a52-af57-43796c9c0b5b")]
[InterfaceTypeAttribute("1")]
[ObsoleteAttribute("For more information please see documentation at http://aka.ms/witclientom")]
internal interface Microsoft.TeamFoundation.WorkItemTracking.Client.Metadata.IPsLookupWorkItemTypeTreeMetadata {
    public abstract virtual object HrLookup(int id);
}
[ComVisibleAttribute("False")]
[GuidAttribute("E81D6810-CD18-4A41-8251-A1B10826138D")]
[InterfaceTypeAttribute("1")]
[ObsoleteAttribute("For more information please see documentation at http://aka.ms/witclientom")]
internal interface Microsoft.TeamFoundation.WorkItemTracking.Client.Metadata.IPsMetadataReadFactory {
    public abstract virtual object HrCreateEnum(PsMetadataTypeMask m, int i);
    public abstract virtual object HrCreateLookup(PsMetadataTypeMask m, int i);
    public abstract virtual object HrCreateCookieLookup(PsMetadataTypeMask m);
    public abstract virtual object HrCreateNameLookup(PsMetadataTypeMask m, int i);
}
[ComVisibleAttribute("False")]
[GuidAttribute("97A639C2-C721-4C77-9E26-E5E4DCF240D0")]
[InterfaceTypeAttribute("1")]
[ObsoleteAttribute("For more information please see documentation at http://aka.ms/witclientom")]
internal interface Microsoft.TeamFoundation.WorkItemTracking.Client.Metadata.IPsNameLookupConstantMetadata {
    public abstract virtual object HrLookup(string name);
}
[ComVisibleAttribute("False")]
[GuidAttribute("AD56FBCD-AC85-4038-A63B-887EF6DE0F3A")]
[InterfaceTypeAttribute("1")]
[ObsoleteAttribute("For more information please see documentation at http://aka.ms/witclientom")]
internal interface Microsoft.TeamFoundation.WorkItemTracking.Client.Metadata.IPsRuleMetadataReadFactory {
    public abstract virtual object HrCreateRuleTreeLookup(int id);
}
[ComVisibleAttribute("False")]
[GuidAttribute("37B1DED7-7E10-4a95-8002-EC3392E971B6")]
[InterfaceTypeAttribute("1")]
[ObsoleteAttribute("For more information please see documentation at http://aka.ms/witclientom")]
internal interface Microsoft.TeamFoundation.WorkItemTracking.Client.Metadata.IPsSidLookupConstantMetadata {
    public abstract virtual object HrLookup(string name);
}
[ComVisibleAttribute("False")]
[GuidAttribute("9d6ce9d4-6a63-461a-a829-623c3f59dfb7")]
[InterfaceTypeAttribute("1")]
[ObsoleteAttribute("For more information please see documentation at http://aka.ms/witclientom")]
internal interface Microsoft.TeamFoundation.WorkItemTracking.Client.Metadata.IPsStateTransitionMetadataReadFactory {
    public abstract virtual object HrCreateStateTransitionLookup(int id);
}
[ComVisibleAttribute("False")]
[GuidAttribute("2A2A1F74-6A74-4792-B2FC-D0275CDAA677")]
[InterfaceTypeAttribute("1")]
[ObsoleteAttribute("For more information please see documentation at http://aka.ms/witclientom")]
internal interface Microsoft.TeamFoundation.WorkItemTracking.Client.Metadata.IPsTreeMetadataReadFactory {
    public abstract virtual object HrCreateChildrenLookup(int id);
    public abstract virtual object HrCreateTypeLookup(int id);
    public abstract virtual object HrCreateTreeNameLookup(int id);
}
[ComVisibleAttribute("False")]
[GuidAttribute("9d6ce9d4-6a63-461a-a829-623c3f59dfb6")]
[InterfaceTypeAttribute("1")]
[ObsoleteAttribute("For more information please see documentation at http://aka.ms/witclientom")]
internal interface Microsoft.TeamFoundation.WorkItemTracking.Client.Metadata.IPsWorkItemTypeFieldUsageMetadataReadFactory {
    public abstract virtual object HrCreateWorkItemTypeFieldUsageLookup(int id);
}
[ComVisibleAttribute("False")]
[GuidAttribute("db6aa9e5-0031-4448-8dde-b89d6a003599")]
[InterfaceTypeAttribute("1")]
[ObsoleteAttribute("For more information please see documentation at http://aka.ms/witclientom")]
internal interface Microsoft.TeamFoundation.WorkItemTracking.Client.Metadata.IPsWorkItemTypeMetadataReadFactory {
    public abstract virtual object HrCreateWorkItemTypeLookup(int id);
}
[ObsoleteAttribute("For more information please see documentation at http://aka.ms/witclientom")]
internal class Microsoft.TeamFoundation.WorkItemTracking.Client.Metadata.PsCategoryIdMetadataRecord : ValueType {
    public int lCategoryId;
}
[ObsoleteAttribute("For more information please see documentation at http://aka.ms/witclientom")]
internal class Microsoft.TeamFoundation.WorkItemTracking.Client.Metadata.PsCategoryMemberIdMetadataRecord : ValueType {
    public int lCategoryMemberId;
}
[ObsoleteAttribute("For more information please see documentation at http://aka.ms/witclientom")]
internal class Microsoft.TeamFoundation.WorkItemTracking.Client.Metadata.PsCategoryMemberMetadataRecord : ValueType {
    public int lRecordId;
    public int lCategoryId;
    public int lWorkItemTypeId;
    public ulong ullCachestamp;
    public byte fDeleted;
}
[ObsoleteAttribute("For more information please see documentation at http://aka.ms/witclientom")]
internal class Microsoft.TeamFoundation.WorkItemTracking.Client.Metadata.PsCategoryMetadataRecord : ValueType {
    public int lRecordId;
    public int lProjectId;
    public IntPtr pszName;
    public int cchName;
    public IntPtr pszReferenceName;
    public int cchReferenceName;
    public int lDefaultWorkItemTypeId;
    public ulong ullCachestamp;
    public byte fDeleted;
}
[ObsoleteAttribute("For more information please see documentation at http://aka.ms/witclientom")]
internal class Microsoft.TeamFoundation.WorkItemTracking.Client.Metadata.PsConstantIdMetadataRecord : ValueType {
    public int lConstantId;
}
[ObsoleteAttribute("For more information please see documentation at http://aka.ms/witclientom")]
internal class Microsoft.TeamFoundation.WorkItemTracking.Client.Metadata.PsConstantMetadataRecord : ValueType {
    public int lRecordId;
    public IntPtr pszName;
    public int cchName;
    public IntPtr pszFullName;
    public int cchFullName;
    public IntPtr pszSid;
    public int cchSid;
    public ulong ullCachestamp;
    public byte fDeleted;
}
[ObsoleteAttribute("For more information please see documentation at http://aka.ms/witclientom")]
internal class Microsoft.TeamFoundation.WorkItemTracking.Client.Metadata.PsConstantSetRelationMetadataRecord : ValueType {
    public int lConstantId;
}
[ObsoleteAttribute("For more information please see documentation at http://aka.ms/witclientom")]
internal class Microsoft.TeamFoundation.WorkItemTracking.Client.Metadata.PsFieldIdMetadataRecord : ValueType {
    public int lRecordId;
}
[FlagsAttribute]
[ObsoleteAttribute("For more information please see documentation at http://aka.ms/witclientom")]
internal enum Microsoft.TeamFoundation.WorkItemTracking.Client.Metadata.PsFieldMetadataFlags : Enum {
    public int value__;
    public static PsFieldMetadataFlags None;
    public static PsFieldMetadataFlags Editable;
    public static PsFieldMetadataFlags SemiEditable;
    public static PsFieldMetadataFlags Reportable;
    public static PsFieldMetadataFlags SupportsTextQuery;
}
[ObsoleteAttribute("For more information please see documentation at http://aka.ms/witclientom")]
internal class Microsoft.TeamFoundation.WorkItemTracking.Client.Metadata.PsFieldMetadataRecord : ValueType {
    public int lRecordId;
    public int lInRecordId;
    public UInt32 dwFieldFlags;
    public UInt32 dwType;
    public IntPtr pszName;
    public int cchName;
    public IntPtr pszReferenceName;
    public int cchReferenceName;
    public IntPtr pszReportingName;
    public int cchReportingName;
    public IntPtr pszReportingReferenceName;
    public int cchReportingReferenceName;
    public int lReportingType;
    public int lReportingFormula;
    public ulong ullCachestamp;
    public byte fDeleted;
}
[FlagsAttribute]
[ObsoleteAttribute("For more information please see documentation at http://aka.ms/witclientom")]
internal enum Microsoft.TeamFoundation.WorkItemTracking.Client.Metadata.PsFieldTypeMask : Enum {
    public int value__;
    public static PsFieldTypeMask DataType;
    public static PsFieldTypeMask DataSubType;
    public static PsFieldTypeMask ReadOnly;
    public static PsFieldTypeMask Ignore;
    public static PsFieldTypeMask StoreAsReference;
}
[ObsoleteAttribute("For more information please see documentation at http://aka.ms/witclientom")]
internal class Microsoft.TeamFoundation.WorkItemTracking.Client.Metadata.PsFieldUsageChildrenMetadataRecord : ValueType {
    public int lFieldUsageID;
}
[FlagsAttribute]
[ObsoleteAttribute("For more information please see documentation at http://aka.ms/witclientom")]
internal enum Microsoft.TeamFoundation.WorkItemTracking.Client.Metadata.PsFieldUsageMetadataFlags : Enum {
    public int value__;
    public static PsFieldUsageMetadataFlags None;
    public static PsFieldUsageMetadataFlags OftenQueried;
    public static PsFieldUsageMetadataFlags Core;
    public static PsFieldUsageMetadataFlags OftenQueriedAsText;
    public static PsFieldUsageMetadataFlags SupportsTextQuery;
}
[ObsoleteAttribute("For more information please see documentation at http://aka.ms/witclientom")]
internal class Microsoft.TeamFoundation.WorkItemTracking.Client.Metadata.PsFieldUsageMetadataRecord : ValueType {
    public int lRecordId;
    public int lParentId;
    public int lFldID;
    public int lDirectObjectID;
    public UInt32 dwFieldUsageFlags;
    public ulong ullCachestamp;
    public byte fDeleted;
}
[ObsoleteAttribute("For more information please see documentation at http://aka.ms/witclientom")]
internal class Microsoft.TeamFoundation.WorkItemTracking.Client.Metadata.PsLinkTypeMetadataRecord : ValueType {
    public int lRecordId;
    public int lReverseId;
    public IntPtr pszReferenceName;
    public int cchReferenceName;
    public IntPtr pszForwardName;
    public int cchForwardName;
    public IntPtr pszReverseName;
    public int cchReverseName;
    public UInt32 dwRules;
    public ulong ullCachestamp;
    public byte fDeleted;
}
[ObsoleteAttribute("For more information please see documentation at http://aka.ms/witclientom")]
internal enum Microsoft.TeamFoundation.WorkItemTracking.Client.Metadata.PsMetadataReadFlags : Enum {
    public int value__;
    public static PsMetadataReadFlags None;
    public static PsMetadataReadFlags Deleted;
}
[ObsoleteAttribute("For more information please see documentation at http://aka.ms/witclientom")]
internal class Microsoft.TeamFoundation.WorkItemTracking.Client.Metadata.PsRuleIdMetadataRecord : ValueType {
    public int lRecordId;
}
[FlagsAttribute]
[ObsoleteAttribute("For more information please see documentation at http://aka.ms/witclientom")]
internal enum Microsoft.TeamFoundation.WorkItemTracking.Client.Metadata.PsRuleMetadataFlags : Enum {
    public int value__;
    public static PsRuleMetadataFlags None;
    public static PsRuleMetadataFlags Default;
    public static PsRuleMetadataFlags Helptext;
}
[ObsoleteAttribute("For more information please see documentation at http://aka.ms/witclientom")]
internal class Microsoft.TeamFoundation.WorkItemTracking.Client.Metadata.PsRuleMetadataRecord : ValueType {
    public int lRecordId;
    public int lObjectTypeScopeId;
    public UInt32 dwRuleFlags;
    public UInt32 dwRuleFlags2;
    public int lTreeId;
    public int lRootTreeId;
    public int lPersonId;
    public int lFieldId0;
    public int lIsConstantId0;
    public int lWasConstantId0;
    public int lFieldId1;
    public int lIsConstantId1;
    public int lWasConstantId1;
    public int lFieldId2;
    public int lIsConstantId2;
    public int lWasConstantId2;
    public int lFieldId3;
    public int lIsConstantId3;
    public int lWasConstantId3;
    public int lIfFieldId;
    public int lIfConstantId;
    public int lIf2FieldId;
    public int lIf2ConstantId;
    public int lThenFieldId;
    public int lThenConstantId;
    public ulong ullCachestamp;
    public byte fDeleted;
}
[ObsoleteAttribute("For more information please see documentation at http://aka.ms/witclientom")]
internal class Microsoft.TeamFoundation.WorkItemTracking.Client.Metadata.PsStateTransitionIdMetadataRecord : ValueType {
    public int lActionID;
}
[ObsoleteAttribute("For more information please see documentation at http://aka.ms/witclientom")]
internal class Microsoft.TeamFoundation.WorkItemTracking.Client.Metadata.PsStateTransitionMetadataRecord : ValueType {
    public int lRecordId;
    public IntPtr pszName;
    public int cchName;
    public int lWorkItemTypeId;
    public int lFromStateId;
    public int lToStateId;
    public ulong ullCachestamp;
    public byte fDeleted;
}
[ObsoleteAttribute("For more information please see documentation at http://aka.ms/witclientom")]
internal class Microsoft.TeamFoundation.WorkItemTracking.Client.Metadata.PsTreeIdMetadataRecord : ValueType {
    public int lRecordId;
}
[ObsoleteAttribute("For more information please see documentation at http://aka.ms/witclientom")]
internal class Microsoft.TeamFoundation.WorkItemTracking.Client.Metadata.PsTreeMetadataRecord : ValueType {
    public int lRecordId;
    public int lParentId;
    public IntPtr pszName;
    public int cchName;
    public IntPtr pszGUID;
    public int cchGUID;
    public int lTypeId;
    public int lCSSType;
    public ulong ullCachestamp;
    public byte fDeleted;
}
[ObsoleteAttribute("For more information please see documentation at http://aka.ms/witclientom")]
internal class Microsoft.TeamFoundation.WorkItemTracking.Client.Metadata.PsTreePropertyIdMetadataRecord : ValueType {
    public int lTreePropID;
}
[ObsoleteAttribute("For more information please see documentation at http://aka.ms/witclientom")]
internal class Microsoft.TeamFoundation.WorkItemTracking.Client.Metadata.PsTreePropertyMetadataRecord : ValueType {
    public int lRecordId;
    public int lTreeID;
    public IntPtr pszValue;
    public int cchValue;
    public ulong ullCachestamp;
    public byte fDeleted;
}
[ObsoleteAttribute("For more information please see documentation at http://aka.ms/witclientom")]
internal class Microsoft.TeamFoundation.WorkItemTracking.Client.Metadata.PsWorkItemTypeFieldUsageIdMetadataRecord : ValueType {
    public int lWorkItemTypeFieldUsageID;
}
[ObsoleteAttribute("For more information please see documentation at http://aka.ms/witclientom")]
internal class Microsoft.TeamFoundation.WorkItemTracking.Client.Metadata.PsWorkItemTypeFieldUsageMetadataRecord : ValueType {
    public int lRecordId;
    public int lWorkItemTypeID;
    public int lFieldID;
    public ulong ullCachestamp;
    public byte fDeleted;
}
[ObsoleteAttribute("For more information please see documentation at http://aka.ms/witclientom")]
internal class Microsoft.TeamFoundation.WorkItemTracking.Client.Metadata.PsWorkItemTypeIdMetadataRecord : ValueType {
    public int lWorkItemTypeID;
}
[ObsoleteAttribute("For more information please see documentation at http://aka.ms/witclientom")]
internal class Microsoft.TeamFoundation.WorkItemTracking.Client.Metadata.PsWorkItemTypeMetadataRecord : ValueType {
    public int lRecordId;
    public int lProjectID;
    public int lNameConstantID;
    public int lDescrPropID;
    public ulong ullCachestamp;
    public byte fDeleted;
}
[EditorBrowsableAttribute("1")]
[ObsoleteAttribute("For more information please see documentation at http://aka.ms/witclientom")]
public class Microsoft.TeamFoundation.WorkItemTracking.Client.Metadata.Snapshot : object {
    private IPsMetadataReadFactory m_factory;
    private WorkItemStore m_store;
    public WorkItemStore Store { get; }
    private IPsMetadataReadFactory Factory { get; }
    public Snapshot(WorkItemStore store);
    public WorkItemStore get_Store();
    private IPsMetadataReadFactory get_Factory();
    internal bool GetConstRecord(int constId, PsConstantMetadataRecord& rec);
    internal IntPtr GetConstValue(int constId, Int32& cch, bool fullValue);
    internal string SafeGetConstant(int constId);
    internal bool FindConstByFullName(string name, Int32& id);
    internal int GetTopConstantSet(int id);
    internal Dictionary`2<int, int> GetGroupDictionary();
    internal List`1<string> GetGlobalAndProjectGroups(string serverGuid, string projectGuid);
    internal bool IsValidGroup(int id);
    internal bool IsValidUserOrGroup(int id);
    internal bool GetNode(int nodeId, PsTreeMetadataRecord& rec);
    internal string GetHierarchyProperty(int id);
    internal bool GetFieldById(int id, PsFieldMetadataRecord& rec);
    public Dictionary`2<int, int> LoadFieldIdsByWorkItemType(int typeId);
    private string ConvertToString(Dictionary`2<int, int> d);
    internal Dictionary`2<int, PsFieldUsageMetadataRecord> LoadFieldUsagesByObjectType(PsDatastoreItemTypeEnum type);
    internal void ScanFields(Action`1<PsFieldMetadataRecord> action);
    internal void ScanFieldUsages(PsDatastoreItemTypeEnum type, Action`1<PsFieldUsageMetadataRecord> action);
    internal void ScanWorkItemTypes(int projectId, Action`1<PsWorkItemTypeMetadataRecord> action);
    internal void ScanWorkItemLinkTypes(Action`1<PsLinkTypeMetadataRecord> action);
    internal void ScanHierarchy(int nodeId, Action`1<PsTreeMetadataRecord> action);
    internal void ScanTransitions(int wit, Action`1<PsStateTransitionMetadataRecord> action);
    internal void ScanRules(Action`1<PsRuleMetadataRecord> action);
    internal void ScanProjectRules(int projectId, Action`1<PsRuleMetadataRecord> action);
    internal void ScanListConsts(int listId, Action`1<PsConstantSetMetadataRecord> action);
    internal void ScanConstantSets(Action`1<PsConstantSetMetadataRecord> action);
    internal void ScanConstants(Action`1<PsConstantMetadataRecord> action);
    internal void ScanCategories(int nodeId, Action`1<PsCategoryMetadataRecord> action);
    internal void ScanCategoryWorkItemTypes(int catId, Action`1<PsCategoryMemberMetadataRecord> action);
    internal void ScanActions(int witId, Action`1<PsStateTransitionMetadataRecord> action);
    internal void ScanWorkItemTypeUsages(int witId, Action`1<PsWorkItemTypeFieldUsageMetadataRecord> action);
}
[ObsoleteAttribute("For more information please see documentation at http://aka.ms/witclientom")]
public class Microsoft.TeamFoundation.WorkItemTracking.Client.MetadataChangeEventHandler : MulticastDelegate {
    public MetadataChangeEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, MetadataEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, MetadataEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
[FlagsAttribute]
[ObsoleteAttribute("For more information please see documentation at http://aka.ms/witclientom")]
public enum Microsoft.TeamFoundation.WorkItemTracking.Client.MetadataChangeTypes : Enum {
    public int value__;
    public static MetadataChangeTypes Fields;
    public static MetadataChangeTypes Lists;
    public static MetadataChangeTypes Rules;
    public static MetadataChangeTypes Nodes;
    public static MetadataChangeTypes Forms;
    public static MetadataChangeTypes WorkItemTypes;
    public static MetadataChangeTypes WorkItemLinkTypes;
    public static MetadataChangeTypes WorkItemTypeCategories;
    public static MetadataChangeTypes WorkItemTypeCategoryMembers;
}
[ObsoleteAttribute("For more information please see documentation at http://aka.ms/witclientom")]
public class Microsoft.TeamFoundation.WorkItemTracking.Client.MetadataEventArgs : EventArgs {
    private MetadataChangeTypes m_mask;
    public MetadataChangeTypes MetadataChangeFlags { get; }
    internal MetadataEventArgs(PsMetadataTypeMask mask);
    public MetadataChangeTypes get_MetadataChangeFlags();
}
[ObsoleteAttribute("For more information please see documentation at http://aka.ms/witclientom")]
public class Microsoft.TeamFoundation.WorkItemTracking.Client.Node : object {
    internal static char PathSeparator;
    private WorkItemStore m_store;
    private PsTreeMetadataRecord m_record;
    private NodeCollection m_childNodes;
    private Node m_parentNode;
    private Node m_projectNode;
    private string m_name;
    private string m_guid;
    private string m_path;
    private Uri m_uri;
    private Nullable`1<PsUserRightsMask> m_rights;
    private Nullable`1<PsUserRightsMask> m_rightsRecursive;
    public int Id { get; }
    public string Name { get; }
    public Node ParentNode { get; }
    public bool HasChildNodes { get; }
    public NodeCollection ChildNodes { get; }
    public Uri Uri { get; }
    public string Path { get; }
    public bool IsIterationNode { get; }
    public bool IsAreaNode { get; }
    public bool HasWorkItemReadRights { get; }
    public bool HasWorkItemWriteRights { get; }
    public bool HasWorkItemReadRightsRecursive { get; }
    public bool HasWorkItemWriteRightsRecursive { get; }
    internal string Guid { get; }
    internal PsCoreFieldsEnum NodeType { get; }
    internal PsCSSType CSSType { get; }
    internal bool IsAreaOrIterationRootNode { get; }
    internal bool IsProjectNode { get; }
    internal bool IsDeleted { get; }
    internal PsUserRightsMask UserRights { get; }
    internal PsUserRightsMask UserRightsRecursive { get; }
    internal Node(WorkItemStore store, PsTreeMetadataRecord record, Node parent);
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    public int get_Id();
    public string get_Name();
    public Node get_ParentNode();
    public bool get_HasChildNodes();
    public NodeCollection get_ChildNodes();
    public Uri get_Uri();
    public string get_Path();
    public bool get_IsIterationNode();
    public bool get_IsAreaNode();
    public bool get_HasWorkItemReadRights();
    public bool get_HasWorkItemWriteRights();
    public bool get_HasWorkItemReadRightsRecursive();
    public bool get_HasWorkItemWriteRightsRecursive();
    public Node FindNodeInSubTree(string path);
    public Node FindNodeInSubTree(int nodeId);
    internal string get_Guid();
    internal PsCoreFieldsEnum get_NodeType();
    internal PsCSSType get_CSSType();
    internal bool get_IsAreaOrIterationRootNode();
    internal bool get_IsProjectNode();
    internal bool get_IsDeleted();
    internal Node GetProjectNode();
    internal Node GetNodeLevel(PsCoreFieldsEnum f);
    internal Node GetSubNodeOfType(PsCSSType t);
    internal bool ContainsNodeInSubtree(Node node);
    private string ComputePath();
    internal PsUserRightsMask get_UserRights();
    internal PsUserRightsMask get_UserRightsRecursive();
}
[DefaultMemberAttribute("Item")]
[ObsoleteAttribute("For more information please see documentation at http://aka.ms/witclientom")]
public class Microsoft.TeamFoundation.WorkItemTracking.Client.NodeCollection : ReadOnlyList {
    private Node[] m_nodes;
    private Dictionary`2<string, int> m_mapByName;
    public int Count { get; }
    public Node Item { get; }
    public Node Item { get; }
    internal NodeCollection(WorkItemStore store, Node parent);
    public virtual int get_Count();
    public Node get_Item(int index);
    public Node get_Item(string name);
    public int IndexOf(Node value);
    public bool Contains(Node value);
    internal Node TryGetByName(string name);
    protected virtual object GetItem(int index);
}
[ObsoleteAttribute("For more information please see documentation at http://aka.ms/witclientom")]
internal static class Microsoft.TeamFoundation.WorkItemTracking.Client.OME : object {
    private static UInt32 BaseBackendErrorCode;
    private static UInt32 BaseMappedErrorCode;
    private static UInt32 PsErrorBase;
    internal static Exception MapBackendException(Exception exc, WorkItemStore store);
    private static Exception MapWebException(WebException exc, WorkItemStore store);
    private static Exception MapSoapException(SoapException exc, WorkItemStore store);
    private static Exception MapPsException(Exception innerEx, PsErrorEnum err, WorkItemStore store);
    internal static Exception MapBulkUpdateBackendException(int backendErrorCode, string errorMessage);
    private static Exception MapBackendException(UInt32 hresult, SoapException innerException, WorkItemStore store, string fieldName);
    private static ImportWorkitemTypeException GetMappingImportWorkitemTypeException(int errorCode, Exception innerEx);
    private static QueryHierarchyException GetMappingQueryHierarchyException(int errorCode, Exception innerEx);
    private static ImportWorkItemLinkTypeException GetMappingImportWorkItemLinkTypeException(int errorCode, Exception innerEx);
    private static WorkItemLinkValidationException GetLinkingValidationException(int errorCode, Exception innerEx, WorkItemStore store);
    internal static WorkItemLinkValidationException TranslateLinkingValidationException(WorkItemLinkValidationException e, WorkItemStore store, WorkItem workItem);
    private static ValidationException GetMappingValidationException(int errorCode, Exception innerEx);
    private static ValidationException GetFieldLimitException(Exception innerEx);
    private static UnexpectedErrorException GetMappingUnexpectedErrorException(int errorCode, Exception innerEx);
    private static UnauthorizedAccessException GetMappingUnauthorizedAccessException(int errorCode, Exception innerEx);
    private static VerbatimMessageException GetMappingVerbatimMessageException(int errorCode, Exception innerException, string fieldName);
    private static PsErrorEnum HrTranslateSqlException(int err);
    internal static WorkItemLinkInfo GetLinkDetailsFromSoapException(SoapException soap);
    internal static bool TryGetDestroyedWorkItemsDetailsFromException(Exception ex, Int32& errorCode, XmlNodeList& details);
}
[EditorBrowsableAttribute("1")]
[ObsoleteAttribute("For more information please see documentation at http://aka.ms/witclientom")]
public static class Microsoft.TeamFoundation.WorkItemTracking.Client.OMStringUtil : object {
    internal static void ValidateStringLength(string value, int maximum, string error, Object[] args);
    public static bool IsValidFieldValueString(string value, bool isLongText);
    public static string MarshalPtrToStringUni(IntPtr ptr, int length);
}
[ObsoleteAttribute("For more information please see documentation at http://aka.ms/witclientom")]
public class Microsoft.TeamFoundation.WorkItemTracking.Client.PageSizeRangeException : ClientException {
    protected PageSizeRangeException(SerializationInfo info, StreamingContext context);
    public PageSizeRangeException(string message);
    public PageSizeRangeException(string message, Exception innerException);
}
[EditorBrowsableAttribute("1")]
public enum Microsoft.TeamFoundation.WorkItemTracking.Client.PageSizes : Enum {
    public int value__;
    public static PageSizes MinPageSize;
    public static PageSizes MaxPageSize;
}
[ObsoleteAttribute("For more information please see documentation at http://aka.ms/witclientom")]
internal class Microsoft.TeamFoundation.WorkItemTracking.Client.PagingFieldReader : object {
    private Query m_query;
    private WorkItemStore m_store;
    private IFieldStore m_fieldStore;
    private Int32[] m_ids;
    private Int32[] m_revs;
    private bool m_isTrusted;
    private int m_pageSize;
    private DateTime m_asOf;
    private Dictionary`2<int, string> m_plainFields;
    private Dictionary`2<int, string> m_textFields;
    private Nullable`1<int> m_fieldIdUsedAsChangedDate;
    public int PageSize { get; public set; }
    public DateTime AsOf { get; public set; }
    public int RowCount { get; }
    public Int32[] Revisions { get; }
    private int FieldIdUsedForChangedDate { get; }
    public PagingFieldReader(Query query, IFieldStore fieldStore, Int32[] ids, Int32[] revs, bool isTrusted, Int32[] extraFields);
    public int get_PageSize();
    public void set_PageSize(int value);
    public DateTime get_AsOf();
    public void set_AsOf(DateTime value);
    public int get_RowCount();
    public Int32[] get_Revisions();
    public bool Read(int row, Int32[] fields);
    private void UpdateColumns(Int32[] fields);
    internal static bool CanPage(WorkItemStore store, int id);
    private void ProcessRevision(int row, Dictionary`2<RowId, int> rowMap, Dictionary`2<int, string> plainFields, Dictionary`2<int, string> textFields);
    private bool ProcessFields(int row, IEnumerable`1<int> fieldIds, Dictionary`2<int, string> fields);
    private bool InternalFieldsOnly(Dictionary`2<int, string> plainFields);
    private void SetFromInternals(int row);
    private void EnsureRequiredFields(Dictionary`2<int, string> plainFields);
    private IPagedItemsRowSets PageData(Dictionary`2<RowId, int> rowMap, Dictionary`2<int, string> plainFields, Dictionary`2<int, string> textFields);
    private void AddColumn(int fieldId);
    private int get_FieldIdUsedForChangedDate();
}
[ObsoleteAttribute("For more information please see documentation at http://aka.ms/witclientom")]
public class Microsoft.TeamFoundation.WorkItemTracking.Client.Project : object {
    private Node m_node;
    private Node m_areaRoot;
    private Node m_iterationRoot;
    private WorkItemStore m_store;
    private WorkItemTypeCollection m_WITs;
    private StoredQueryCollection m_storedQueries;
    private CategoryCollection m_categories;
    public WorkItemTypeCollection WorkItemTypes { get; }
    public CategoryCollection Categories { get; }
    public WorkItemStore Store { get; }
    public NodeCollection AreaRootNodes { get; }
    [EditorBrowsableAttribute("1")]
public Uri AreaRootNodeUri { get; }
    public NodeCollection IterationRootNodes { get; }
    public int Id { get; }
    public string Name { get; }
    public Uri Uri { get; }
    [EditorBrowsableAttribute("1")]
public Guid Guid { get; }
    [ObsoleteAttribute("Please use the QueryHierarchy instead.")]
public StoredQueryCollection StoredQueries { get; }
    public QueryHierarchy QueryHierarchy { get; }
    public bool HasWorkItemReadRights { get; }
    public bool HasWorkItemWriteRights { get; }
    public bool HasWorkItemReadRightsRecursive { get; }
    public bool HasWorkItemWriteRightsRecursive { get; }
    internal Project(WorkItemStore store, Node node);
    public WorkItemTypeCollection get_WorkItemTypes();
    public CategoryCollection get_Categories();
    public WorkItemStore get_Store();
    public NodeCollection get_AreaRootNodes();
    public Uri get_AreaRootNodeUri();
    public NodeCollection get_IterationRootNodes();
    public Node FindNodeInSubTree(string path, TreeType treeType);
    public Node FindNodeInSubTree(int nodeId);
    public int get_Id();
    public string get_Name();
    public Uri get_Uri();
    public Guid get_Guid();
    public StoredQueryCollection get_StoredQueries();
    public QueryHierarchy get_QueryHierarchy();
    [EditorBrowsableAttribute("1")]
public QueryHierarchy2 GetQueryHierarchy2(bool refresh);
    public bool get_HasWorkItemReadRights();
    public bool get_HasWorkItemWriteRights();
    public bool get_HasWorkItemReadRightsRecursive();
    public bool get_HasWorkItemWriteRightsRecursive();
}
[DefaultMemberAttribute("Item")]
[ObsoleteAttribute("For more information please see documentation at http://aka.ms/witclientom")]
public class Microsoft.TeamFoundation.WorkItemTracking.Client.ProjectCollection : ReadOnlyList {
    private WorkItemStore m_store;
    private Node m_rootNode;
    private Project[] m_projects;
    private Dictionary`2<string, int> m_nameMap;
    private Dictionary`2<int, int> m_idMap;
    private Dictionary`2<Guid, int> m_projectGuidMap;
    public int Count { get; }
    public Project Item { get; }
    public Project Item { get; }
    public Project Item { get; }
    internal ProjectCollection(WorkItemStore store);
    public virtual int get_Count();
    public Project get_Item(int index);
    public Project get_Item(string projectName);
    public Project get_Item(Guid projectGuid);
    public bool Contains(string projectName);
    public bool Contains(Guid projectGuid);
    public int IndexOf(Project value);
    public bool Contains(Project value);
    public Project GetById(int projectId);
    protected virtual object GetItem(int index);
}
[ObsoleteAttribute("For more information please see documentation at http://aka.ms/witclientom")]
internal class Microsoft.TeamFoundation.WorkItemTracking.Client.Provision.ActionKey : ValueType {
    public int fromStateId;
    public int toStateId;
    public ActionKey(int from, int to);
    public virtual int GetHashCode();
    public sealed virtual bool Equals(ActionKey other);
}
[ObsoleteAttribute("For more information please see documentation at http://aka.ms/witclientom")]
internal class Microsoft.TeamFoundation.WorkItemTracking.Client.Provision.BackendAction : object {
    private Snapshot m_snapshot;
    private XmlElement m_element;
    private int m_id;
    private int m_typeId;
    private int m_fromStateId;
    private int m_toStateId;
    private string m_name;
    public int Id { get; }
    public BackendAction(Snapshot snapshot, int id, int typeId, int fromStateId, int toStateId, string name);
    public BackendAction(Snapshot snapshot, XmlElement element);
    public bool Submit(XmlElement root, BatchParamCounter counter);
    public bool Delete(XmlElement root, BatchParamCounter counter);
    public int get_Id();
    public sealed virtual int CompareTo(BackendAction other);
    public sealed virtual bool Equals(BackendAction action);
    public void UpdateConstant(int tempId, int id);
    public void UpdateWorkItemType(int tempId, int id);
}
[ObsoleteAttribute("For more information please see documentation at http://aka.ms/witclientom")]
internal class Microsoft.TeamFoundation.WorkItemTracking.Client.Provision.BackendActionStore : object {
    private Snapshot m_snapshot;
    private BackendConstantStore m_constantStore;
    private BackendFieldStore m_fieldStore;
    private SortedList`2<BackendAction, BackendAction> m_oldActions;
    private List`1<BackendAction> m_newActions;
    private List`1<int> m_types;
    private List`1<BackendAction> m_deletedActions;
    private List`1<BackendAction> m_addedActions;
    private int m_iAdded;
    private int m_iDeleted;
    private List`1<BackendAction> DeletedActions { get; }
    private List`1<BackendAction> AddedActions { get; }
    public BackendActionStore(Snapshot snapshot, BackendConstantStore constantStore, BackendFieldStore fieldStore);
    public void InsertActionUsage(XmlElement element);
    private void LoadActions(int typeId);
    public sealed virtual bool Submit(XmlElement rootElement, BatchParamCounter counter);
    private List`1<BackendAction> get_DeletedActions();
    private List`1<BackendAction> get_AddedActions();
    private void ProcessActions();
    public sealed virtual void UpdateReferences(MetadataType type, int tempId, int id);
    public sealed virtual bool ProcessStatement(XmlElement element);
    [CompilerGeneratedAttribute]
private void <LoadActions>b__12_0(PsStateTransitionMetadataRecord r);
}
[ObsoleteAttribute("For more information please see documentation at http://aka.ms/witclientom")]
internal class Microsoft.TeamFoundation.WorkItemTracking.Client.Provision.BackendConstant : object {
    private Snapshot m_snapshot;
    private string m_name;
    private List`1<BackendConstant> m_newChildItems;
    private List`1<BackendConstant> m_oldChildItems;
    private Dictionary`2<BackendConstant, int> m_tempIds;
    private Dictionary`2<BackendConstant, int> m_oldSetIds;
    private bool m_tempFlag;
    private bool m_wasTempFlag;
    private bool m_additiveFlag;
    private bool m_obsoleteFlag;
    private int m_id;
    private bool m_accountFlag;
    private List`1<int> m_deletedItems;
    private List`1<BackendConstant> m_addedItems;
    private int m_iDeleted;
    private int m_iAdded;
    private int m_replacementId;
    public string Name { get; }
    public bool IsTemporary { get; }
    public bool WasTemporary { get; }
    public bool IsObsolete { get; }
    public bool IsAdditive { get; public set; }
    public int Id { get; public set; }
    public int ReplacementId { get; public set; }
    private List`1<int> DeletedItems { get; }
    private List`1<BackendConstant> AddedItems { get; }
    public BackendConstant(Snapshot snapshot, string name, bool accountFlag, int tempId);
    public BackendConstant(Snapshot snapshot, int id);
    public void AddChild(BackendConstant constant, int tempSetId);
    public bool SubmitName(XmlElement root, BatchParamCounter counter);
    public bool SubmitSet(XmlElement root, BatchParamCounter counter);
    public string get_Name();
    public bool get_IsTemporary();
    public bool get_WasTemporary();
    public bool get_IsObsolete();
    public bool get_IsAdditive();
    public void set_IsAdditive(bool value);
    public int get_Id();
    public void set_Id(int value);
    public int get_ReplacementId();
    public void set_ReplacementId(int value);
    private List`1<int> get_DeletedItems();
    private List`1<BackendConstant> get_AddedItems();
    private bool AddItemToSet(XmlElement root, BackendConstant constant, BatchParamCounter counter);
    private bool DeleteItemFromSet(XmlElement root, int setId, BatchParamCounter counter);
    public sealed virtual int CompareTo(BackendConstant other);
    public sealed virtual bool Equals(BackendConstant other);
    public void SetChildItemsFrom(BackendConstant list);
    private void InitChildItems();
    public static string PrepareString(string value);
    [CompilerGeneratedAttribute]
private void <InitChildItems>b__48_0(PsConstantSetMetadataRecord r);
}
[ObsoleteAttribute("For more information please see documentation at http://aka.ms/witclientom")]
internal class Microsoft.TeamFoundation.WorkItemTracking.Client.Provision.BackendConstantStore : object {
    private Snapshot m_snapshot;
    private Dictionary`2<int, BackendConstant> m_newConstants;
    private Dictionary`2<int, BackendConstant> m_existingConstants;
    private Dictionary`2<int, BackendTreeProperty> m_treeProps;
    private List`1<BackendConstant> m_allConstants;
    private List`1<XmlElement> m_updateStatements;
    private int m_iNames;
    private int m_iSets;
    private int m_iTreeProps;
    private int m_iUpdatedTreeProps;
    private Int32[] m_treePropIds;
    private Int32[] TreePropIds { get; }
    public BackendConstantStore(Snapshot snapshot);
    public sealed virtual bool ProcessStatement(XmlElement element);
    private Int32[] get_TreePropIds();
    private BackendConstant InsertConstant(XmlElement element);
    private void InsertConstantSet(XmlElement element);
    private void InsertTreeProperty(XmlElement element);
    public BackendConstant GetConstant(int constantId, bool tempFlag);
    public BackendConstant GetConstant(XmlElement element, string permAttrName, string tempAttrName);
    public void UpdateTreeProperty(XmlDocument doc, int propId, int newPropId);
    public void ReplaceConstAttribute(XmlElement element, string tempAttribute, string permAttribute);
    public sealed virtual bool Submit(XmlElement rootElement, BatchParamCounter counter);
    public sealed virtual void UpdateReferences(MetadataType type, int tempId, int id);
    private void UpdateConstReferences(int tempId, int id);
}
[ObsoleteAttribute("For more information please see documentation at http://aka.ms/witclientom")]
internal class Microsoft.TeamFoundation.WorkItemTracking.Client.Provision.BackendField : object {
    private Snapshot m_snapshot;
    private XmlElement m_insertFieldElement;
    private XmlElement m_insertFieldUsageElement;
    public BackendField(Snapshot snapshot, XmlElement insertFieldElement);
    public void UpdateFieldUsage(XmlElement insertFieldUsageElement);
    public bool Submit(XmlElement rootElement, BatchParamCounter counter);
}
[ObsoleteAttribute("For more information please see documentation at http://aka.ms/witclientom")]
internal class Microsoft.TeamFoundation.WorkItemTracking.Client.Provision.BackendFieldStore : object {
    private Snapshot m_snapshot;
    private BackendConstantStore m_constantStore;
    private List`1<BackendWorkItemType> m_allTypes;
    private List`1<BackendWorkItemType> m_packageTypes;
    private Dictionary`2<int, BackendWorkItemType> m_newTypes;
    private Dictionary`2<int, BackendWorkItemType> m_oldTypes;
    private Dictionary`2<int, List`1<BackendWorkItemType>> m_projectTypes;
    private List`1<XmlElement> m_fieldStatements;
    private List`1<XmlElement> m_usageStatements;
    private List`1<BackendField> m_newFields;
    private Dictionary`2<int, BackendField> m_newFieldsMap;
    private int m_iNewFields;
    private int m_iUpdatedFields;
    private int m_iUsages;
    private int m_iWorkItemTypeUsages;
    private int m_iTypes;
    public ICollection`1<BackendWorkItemType> AddedTypes { get; }
    public BackendFieldStore(Snapshot snapshot, BackendConstantStore constantStore);
    public ICollection`1<BackendWorkItemType> get_AddedTypes();
    private void InsertWorkItemType(XmlElement element);
    public sealed virtual bool Submit(XmlElement rootElement, BatchParamCounter counter);
    private void LoadWorkItemTypes(int projectId);
    private void InsertWorkItemTypeUsage(XmlElement element);
    public BackendWorkItemType GetWorkItemType(XmlElement element, string permIdAttr, string tempIdAttr);
    private void InsertField(XmlElement element);
    private void UpdateField(XmlElement element);
    private void InsertFieldUsage(XmlElement element);
    public sealed virtual void UpdateReferences(MetadataType type, int tempId, int id);
    public sealed virtual bool ProcessStatement(XmlElement element);
    [CompilerGeneratedAttribute]
private void <LoadWorkItemTypes>b__21_0(PsWorkItemTypeMetadataRecord r);
}
[ObsoleteAttribute("For more information please see documentation at http://aka.ms/witclientom")]
internal class Microsoft.TeamFoundation.WorkItemTracking.Client.Provision.BackendRuleData : object {
    private int m_ruleId;
    private int m_thenConstantId;
    private int m_typeConstantId;
    private int m_projectId;
    public int RuleId { get; }
    public int ThenConstantId { get; }
    public int TypeConstantId { get; public set; }
    public int ProjectId { get; }
    public BackendRuleData(PsRuleMetadataRecord rule);
    public int get_RuleId();
    public int get_ThenConstantId();
    public int get_TypeConstantId();
    public void set_TypeConstantId(int value);
    public int get_ProjectId();
}
[ObsoleteAttribute("For more information please see documentation at http://aka.ms/witclientom")]
internal class Microsoft.TeamFoundation.WorkItemTracking.Client.Provision.BackendRuleKey : object {
    private PsRuleMetadataRecord m_rec;
    private bool m_initializedFlag;
    public bool IsInitialized { get; }
    public bool IsConditional { get; }
    public bool IsDenyWrite { get; }
    public int AreaId { get; }
    public int ThenFieldId { get; }
    public bool IsOptimizeable { get; }
    public BackendRuleKey(PsRuleMetadataRecord rule);
    public BackendRuleKey(XmlElement element);
    public virtual int GetHashCode();
    public bool get_IsInitialized();
    public bool get_IsConditional();
    public bool get_IsDenyWrite();
    public int get_AreaId();
    public int get_ThenFieldId();
    public bool get_IsOptimizeable();
    public sealed virtual bool Equals(BackendRuleKey other);
    private static bool GetAttribute(XmlElement element, string requiredAttribute, string prohibitedAttribute, Int32& value);
    private static bool GetAttribute(XmlElement element, string requiredAttribute, string prohibitedAttribute, int defaultValue, Int32& value);
    private static UInt32 GetFlagAttribute(XmlElement element, string attribute, UInt32 bit);
    private void ExtractKeyData(XmlElement element);
}
[ObsoleteAttribute("For more information please see documentation at http://aka.ms/witclientom")]
internal class Microsoft.TeamFoundation.WorkItemTracking.Client.Provision.BackendRuleStore : object {
    private Snapshot m_snapshot;
    private BackendConstantStore m_constantStore;
    private Dictionary`2<BackendRuleKey, List`1<BackendRuleData>> m_rules;
    private List`1<int> m_areas;
    private List`1<XmlElement> m_statements;
    private Dictionary`2<RuleScope, bool> m_scopes;
    private List`1<int> m_deletedRules;
    private int m_iAdded;
    private int m_iDeleted;
    private List`1<int> DeletedRules { get; }
    public BackendRuleStore(Snapshot snapshot, int projectId, BackendConstantStore constantStore);
    private void InsertRule(XmlElement element);
    private void LoadAreaRules(int areaId);
    private bool OptimizeRule(XmlElement element);
    private void PrepareStatement(XmlElement element);
    public sealed virtual bool Submit(XmlElement root, BatchParamCounter counter);
    private List`1<int> get_DeletedRules();
    private bool UpdateLargeTextRule(XmlElement element, List`1<BackendRuleData> rules);
    private bool UpdateListRule(XmlElement element, List`1<BackendRuleData> rules);
    private void ProcessWorkItemTypeRule(BackendRuleKey key, XmlElement ruleElement);
    public sealed virtual void UpdateReferences(MetadataType type, int tempId, int id);
    public sealed virtual bool ProcessStatement(XmlElement element);
    private void UpdateConstants(int tempId, int id);
    private void UpdateTreeProperties(int tempId, int id);
    private void UpdateFields(int tempId, int id);
    [CompilerGeneratedAttribute]
private void <LoadAreaRules>b__11_0(PsRuleMetadataRecord r);
}
[ObsoleteAttribute("For more information please see documentation at http://aka.ms/witclientom")]
internal class Microsoft.TeamFoundation.WorkItemTracking.Client.Provision.BackendTreeProperty : object {
    private string m_value;
    private XmlElement m_element;
    public string Value { get; }
    public BackendTreeProperty(XmlElement element);
    public bool Submit(XmlElement root, BatchParamCounter counter);
    public string get_Value();
}
[ObsoleteAttribute("For more information please see documentation at http://aka.ms/witclientom")]
internal class Microsoft.TeamFoundation.WorkItemTracking.Client.Provision.BackendTypeUsage : object {
    private XmlElement m_element;
    private int m_id;
    private int m_fieldId;
    private int m_typeId;
    public int FieldId { get; }
    public BackendTypeUsage(XmlElement element);
    public BackendTypeUsage(int usageId, int typeId, int fieldId);
    public bool Submit(XmlElement root, BatchParamCounter counter);
    public bool Delete(XmlElement root, BatchParamCounter counter);
    public int get_FieldId();
    public sealed virtual int CompareTo(BackendTypeUsage other);
    public sealed virtual bool Equals(BackendTypeUsage other);
    public void UpdateFieldReference(int tempId, int id);
    public void SetTypeId(int id);
}
[ObsoleteAttribute("For more information please see documentation at http://aka.ms/witclientom")]
internal class Microsoft.TeamFoundation.WorkItemTracking.Client.Provision.BackendWorkItemType : object {
    private Snapshot m_snapshot;
    private BackendConstantStore m_constantStore;
    private XmlElement m_element;
    private int m_id;
    private int m_constantId;
    private int m_descrId;
    private List`1<BackendTypeUsage> m_usages;
    private SortedList`2<BackendTypeUsage, int> m_oldUsages;
    private bool m_modifiedFlag;
    private List`1<BackendTypeUsage> m_deletedUsages;
    private List`1<BackendTypeUsage> m_addedUsages;
    private int m_iDeleted;
    private int m_iAdded;
    public int Id { get; }
    public int ConstantId { get; }
    public bool IsTemporary { get; }
    public List`1<BackendTypeUsage> AddedUsages { get; }
    public List`1<BackendTypeUsage> DeletedUsages { get; }
    public BackendWorkItemType(Snapshot snapshot, BackendConstantStore constantStore, int id, int constantId, int descrId);
    public BackendWorkItemType(Snapshot snapshot, BackendConstantStore constantStore, XmlElement element);
    public int get_Id();
    public int get_ConstantId();
    public bool get_IsTemporary();
    public bool SubmitType(XmlElement root, BatchParamCounter counter);
    public bool SubmitUsages(XmlElement root, BatchParamCounter counter);
    public List`1<BackendTypeUsage> get_AddedUsages();
    public List`1<BackendTypeUsage> get_DeletedUsages();
    private void InitDeltaUsages();
    public void AddChild(XmlElement element);
    private void LoadBackendUsages();
    public void SetDescription(XmlDocument doc, int tempDescrId);
    public void RefreshTreeProperty(int tempId, int id);
    public void RefreshConstant(int tempId, int id);
    public void UpdateFieldReference(int tempId, int id);
    public void SetId(int id);
    public void SetModified();
    [CompilerGeneratedAttribute]
private void <LoadBackendUsages>b__29_0(PsWorkItemTypeFieldUsageMetadataRecord r);
}
[ObsoleteAttribute("For more information please see documentation at http://aka.ms/witclientom")]
internal class Microsoft.TeamFoundation.WorkItemTracking.Client.Provision.BatchParamCounter : object {
    private int m_paramCount;
    private int m_tempVarCount;
    public static int MaxParamCount;
    public static int MaxVarCount;
    private static BatchParamCounter();
    public bool ProcessStatement(int paramCount, int tempVarCount);
    public void Reset();
}
[FlagsAttribute]
[ObsoleteAttribute("For more information please see documentation at http://aka.ms/witclientom")]
internal enum Microsoft.TeamFoundation.WorkItemTracking.Client.Provision.ExportMask : Enum {
    public int value__;
    public static ExportMask None;
    public static ExportMask ExportGlobalLists;
}
[ObsoleteAttribute("For more information please see documentation at http://aka.ms/witclientom")]
internal class Microsoft.TeamFoundation.WorkItemTracking.Client.Provision.GlobalListsImporter : object {
    private Snapshot m_snapshot;
    private ImportEventHandler m_handler;
    public GlobalListsImporter(Snapshot snapshot, ImportEventHandler handler);
    public XmlDocument Export();
}
[ObsoleteAttribute("For more information please see documentation at http://aka.ms/witclientom")]
internal interface Microsoft.TeamFoundation.WorkItemTracking.Client.Provision.IInstructionsCollection {
    public abstract virtual bool ProcessStatement(XmlElement element);
    public abstract virtual bool Submit(XmlElement rootElement, BatchParamCounter counter);
    public abstract virtual void UpdateReferences(MetadataType type, int tempId, int id);
}
[ObsoleteAttribute("For more information please see documentation at http://aka.ms/witclientom")]
internal static class Microsoft.TeamFoundation.WorkItemTracking.Client.Provision.InternalAttributes : object {
    public static string AllowExistingValues;
    public static string DefaultReason;
    private static InternalAttributes();
}
[ObsoleteAttribute("For more information please see documentation at http://aka.ms/witclientom")]
internal static class Microsoft.TeamFoundation.WorkItemTracking.Client.Provision.InternalTags : object {
    public static string Ignore;
    private static InternalTags();
}
[ObsoleteAttribute("For more information please see documentation at http://aka.ms/witclientom")]
internal enum Microsoft.TeamFoundation.WorkItemTracking.Client.Provision.MetadataType : Enum {
    public int value__;
    public static MetadataType Constant;
    public static MetadataType TreeProperty;
    public static MetadataType WorkItemType;
    public static MetadataType Field;
}
[ObsoleteAttribute("For more information please see documentation at http://aka.ms/witclientom")]
internal static class Microsoft.TeamFoundation.WorkItemTracking.Client.Provision.MultiBatchHelper : object {
    public static bool ReplaceXmlId(XmlElement element, string tempIdName, int tempId, string idName, int id);
}
[EditorBrowsableAttribute("1")]
[ObsoleteAttribute("For more information please see documentation at http://aka.ms/witclientom")]
public class Microsoft.TeamFoundation.WorkItemTracking.Client.Provision.ProvisionClass : object {
    private static int c_workItemTypeRetries;
    private WorkItemStore m_ws;
    private ImportEventHandler m_importHandler;
    private SecurityNamespace m_provisionSecurityNamespace;
    private Lazy`1<WorkItemTrackingHttpClient> m_witRestClient;
    internal static int MaxBatchParamCount { get; internal set; }
    internal static int MaxBatchVarCount { get; internal set; }
    private SecurityNamespace ProvisionSecurityNamespace { get; }
    private ProvisionClass(WorkItemStore ws, ImportEventHandler importHandler);
    public static void ImportWorkItemType(WorkItemStore ws, int projectId, string methodologyName, XmlElement typeElement, bool bypassSchema, ImportEventHandler handler);
    public static void ImportWorkItemType(WorkItemStore ws, int projectId, string methodologyName, string definition, ImportEventHandler handler);
    public static void ValidateWorkItemType(WorkItemStore ws, int projectId, string methodologyName, XmlElement typeElement, bool bypassSchema, ImportEventHandler handler);
    public static void ValidateWorkItemType(WorkItemStore ws, int projectId, string methodologyName, string definition, ImportEventHandler handler);
    public static void ImportGlobalLists(WorkItemStore ws, XmlElement listsElement, ImportEventHandler handler);
    public static void ImportGlobalLists(WorkItemStore ws, string lists, ImportEventHandler handler);
    public static XmlDocument ExportWorkItemType(WorkItemStore ws, int projectId, int typeId, bool withGlobalListsFlag);
    public static XmlDocument ExportGlobalLists(WorkItemStore ws);
    public static void ImportWorkItemLinkType(WorkItemStore ws, XmlElement linkTypeElement, ImportEventHandler handler, bool insertsOnly);
    public static void ImportWorkItemLinkType(WorkItemStore ws, string linkTypeDefinition, ImportEventHandler handler, bool insertsOnly);
    public static void ValidateWorkItemLinkType(WorkItemStore ws, XmlElement linkTypeElement, ImportEventHandler handler);
    public static void ValidateWorkItemLinkType(WorkItemStore ws, string linkTypeDefinition, ImportEventHandler handler);
    public static void ImportCategories(WorkItemStore ws, int projectId, Stream stream, ImportEventHandler handler);
    public static void ValidateCategories(WorkItemStore ws, Stream stream, Dictionary`2<string, WorkItemType> types, ImportEventHandler handler);
    public static void ImportGlobalWorkflow(ProvisioningActionType action, WorkItemStore ws, int projectId, TextReader file, ImportEventHandler handler);
    public static XmlDocument ExportGlobalWorkflow(WorkItemStore ws, int projectId, bool includeLists);
    public static void CheckPermissions(WorkItemStore ws, XmlDocument batch);
    internal static int get_MaxBatchParamCount();
    internal static void set_MaxBatchParamCount(int value);
    internal static int get_MaxBatchVarCount();
    internal static void set_MaxBatchVarCount(int value);
    private WorkItemTrackingHttpClient BuildRestClient();
    private void ImportValidateWorkItemType(int projectId, string methodologyName, XmlElement typeElement, bool bypassSchema, ProvisioningActionType action);
    private void ImportValidateWorkItemType(int projectId, string methodologyName, string definition, ProvisioningActionType action);
    private void ImportValidateWorkItemTypeInternal(int projectId, string methodologyName, string definition, ProvisioningActionType action);
    private void ImportValidateWorkItemTypeInternal(int projectId, string methodologyName, XmlElement typeElement, bool bypassSchema, ProvisioningActionType action);
    private bool ImportValidateWorkItemTypeInternalUsingServerProvisioning(int projectId, string methodologyName, XmlElement typeElement, ProvisioningActionType action, TemplateType templateType);
    private bool ExportWorkItemTypeUsingServerProvisioning(int projectId, Nullable`1<int> typeId, bool includeGlobalList, XmlDocument& template);
    private void ImportValidateWorkItemTypeInternalUsingClientProvisioning(int projectId, string methodologyName, XmlElement typeElement, ProvisioningActionType action);
    private void ImportGlobalLists(XmlElement listsElement);
    private void ImportGlobalLists(string lists);
    private void ImportGlobalListsInternal(XmlElement listsElement);
    private XmlDocument ExportWorkItemTypeUsingClientProvisioning(int projectId, int typeId, bool withGlobalListsFlag);
    private XmlDocument ExportWorkItemType(int projectId, int typeId, bool withGlobalListsFlag);
    private XmlDocument ExportGlobalLists();
    private void ImportValidateWorkItemLinkType(XmlElement typeElement, ProvisioningActionType action, bool insertsOnly);
    private void ImportValidateWorkItemLinkType(string definition, ProvisioningActionType action, bool insertsOnly);
    private void ImportValidateWorkItemLinkTypeInternal(XmlElement typeElement, ProvisioningActionType action, bool insertsOnly);
    public static XmlDocument GetXml(string xml, SchemaType schema, ImportEventHandler handler, bool validateSchema);
    public static XmlDocument GetXml(XmlElement element, SchemaType schema, ImportEventHandler handler, bool validateSchema);
    public static XmlDocument GetXml(TextReader stream, SchemaType type, ImportEventHandler handler, bool validateSchema);
    public static XmlDocument GetXml(Stream stream, SchemaType type, ImportEventHandler handler, bool validateSchema);
    private bool ProcessImportException(Exception e);
    private bool ProcessImportEvent(string message);
    private void CheckPermissions(Snapshot snapshot, int nodeId, bool isGlobalList);
    private void ImportCategories(int projectId, Stream stream);
    private void ValidateCategories(Stream stream, Dictionary`2<string, WorkItemType> types);
    private void ImportGlobalWorkflow(ProvisioningActionType action, int projectId, TextReader file);
    private XmlDocument ExportGlobalWorkflow(int projectId, bool includeLists);
    private XmlDocument ExportGlobalWorkflowUsingClientProvisioning(int projectId, bool withGlobalListsFlag);
    private WITImporter CreateImporterForTypeDefinition(Snapshot snapshot, int projectId, string methodologyName, XmlElement typeElement);
    private WITImporter CreateImporterForGlobalWorkflow(Snapshot snapshot, int projectId, XmlElement workflowElement);
    private WITImporter CreateImporterForGlobalLists(Snapshot snapshot, XmlElement listsElement);
    private void Submit(ProvisioningActionType action, Snapshot snapshot, int projectId, WITImporter importer);
    private void CheckPermissions(Snapshot snapshot, XmlDocument batch);
    internal bool HasProvisionPermission(Snapshot snapshot, int nodeId);
    private SecurityNamespace get_ProvisionSecurityNamespace();
    private bool AttemptServerProvisioning();
    [CompilerGeneratedAttribute]
private WorkItemTrackingHttpClient <.ctor>b__24_0();
}
[ObsoleteAttribute("For more information please see documentation at http://aka.ms/witclientom")]
public class Microsoft.TeamFoundation.WorkItemTracking.Client.Provision.ProvisionException : TeamFoundationServerException {
    public ProvisionException(string message);
    public ProvisionException(string message, Exception innerException);
    protected ProvisionException(SerializationInfo info, StreamingContext context);
}
[ObsoleteAttribute("For more information please see documentation at http://aka.ms/witclientom")]
public class Microsoft.TeamFoundation.WorkItemTracking.Client.Provision.ProvisionInvalidCachedDataException : ProvisionException {
    public ProvisionInvalidCachedDataException(string message);
    public ProvisionInvalidCachedDataException(string message, Exception innerException);
    protected ProvisionInvalidCachedDataException(SerializationInfo info, StreamingContext context);
}
[ObsoleteAttribute("For more information please see documentation at http://aka.ms/witclientom")]
public class Microsoft.TeamFoundation.WorkItemTracking.Client.Provision.ProvisionPermissionsException : ProvisionException {
    public ProvisionPermissionsException(string message);
    public ProvisionPermissionsException(string message, Exception innerException);
    protected ProvisionPermissionsException(SerializationInfo info, StreamingContext context);
}
[ObsoleteAttribute("For more information please see documentation at http://aka.ms/witclientom")]
public class Microsoft.TeamFoundation.WorkItemTracking.Client.Provision.ProvisionValidationException : ProvisionException {
    public ProvisionValidationException(string message);
    public ProvisionValidationException(string message, Exception innerException);
    protected ProvisionValidationException(SerializationInfo info, StreamingContext context);
}
[ObsoleteAttribute("For more information please see documentation at http://aka.ms/witclientom")]
internal class Microsoft.TeamFoundation.WorkItemTracking.Client.Provision.RuleScope : ValueType {
    public int projectId;
    public int typeConstantId;
    public virtual int GetHashCode();
    public sealed virtual bool Equals(RuleScope other);
}
[ObsoleteAttribute("For more information please see documentation at http://aka.ms/witclientom")]
internal class Microsoft.TeamFoundation.WorkItemTracking.Client.Provision.UpdatePackageOptimizer : object {
    private Snapshot m_snapshot;
    private IInstructionsCollection[] m_collections;
    private UpdatePackageOptimizer(Snapshot snapshot, int projectId);
    public static void Submit(Snapshot snapshot, int projectId, XmlElement updatePackage);
    private bool Submit(XmlElement rootElement);
    private void Load(XmlElement packageElement);
    private XmlElement Update(XmlElement updatePackage);
}
[ObsoleteAttribute("For more information please see documentation at http://aka.ms/witclientom")]
internal class Microsoft.TeamFoundation.WorkItemTracking.Client.Provision.WitExporter : object {
    private WorkItemStore m_store;
    private Snapshot m_snapshot;
    private int m_lTreeID;
    private int m_lTypeID;
    private int m_lTypeConstantID;
    private string m_projectGuid;
    private XmlDocument m_doc;
    private XmlElement m_typeElement;
    private XmlElement m_fieldsElement;
    private XmlElement m_statesElement;
    private XmlElement m_transitionsElement;
    private XmlElement m_formElement;
    private Dictionary`2<int, WitField> m_fieldsMap;
    private Dictionary`2<WorkflowKey, XmlElement> m_workflowMap;
    private SortedList`2<int, int> m_globalListsMap;
    private static string s_globalGuid;
    private static string s_instanceGuid;
    private List`1<RuleFilter> m_ruleFilters;
    private string ProjectGuid { get; }
    private string GlobalGuid { get; }
    private string InstanceGuid { get; }
    private SortedList`2<int, int> GlobalLists { get; }
    private WitExporter(WorkItemStore store);
    internal static XmlDocument ExportWorkItemType(WorkItemStore store, int treeId, int typeId, ExportMask flags);
    internal static XmlDocument ExportGlobalWorkflow(WorkItemStore store, int treeId, ExportMask flags);
    private XmlDocument ExportWorkItemType(int lTreeId, int lTypeId, ExportMask flags);
    private XmlDocument ExportGlobalWorkflow(int treeId, ExportMask flags);
    private void ExportDescription(WorkItemType type);
    private void ExportFields(bool fWorkItemType);
    private void ExportGlobalLists(XmlElement root);
    private void ExportList(int constId, int fieldId, XmlElement listElement);
    private void ExportConst(int constId, int fieldId, XmlElement listElement, bool isGlobalList);
    private void ExportRules();
    private void ExportActions();
    private void FixAllowExistingValue();
    private void FixDefaultReason();
    private string get_ProjectGuid();
    private string get_GlobalGuid();
    private string get_InstanceGuid();
    private SortedList`2<int, int> get_GlobalLists();
    private WitField FindAddField(int fieldId);
    private XmlElement FindAddState(int lStateID);
    private XmlElement FindAddTransition(int lFromID, int lToID);
    private XmlElement AddReason(XmlElement reasonsElement, WorkflowKey reason);
    private XmlElement FindAddReason(int lFromID, int lToID, int lReasonID);
    private XmlElement FindAddTargetElement(PsRuleMetadataRecord rule);
    private XmlElement AddRuleElement(string tagName, PsRuleMetadataRecord rule);
    private XmlElement AddListRuleElement(string tagName, PsRuleMetadataRecord rule);
    private void AddCopyDefaultRule(string tagName, PsRuleMetadataRecord rule);
    private bool StateValuesFilter(PsRuleMetadataRecord rule);
    private bool ReasonValuesFilter(PsRuleMetadataRecord rule);
    private bool HelpTextFilter(PsRuleMetadataRecord rule);
    private bool RequiredFilter(PsRuleMetadataRecord rule);
    private bool AllowedValuesFilter(PsRuleMetadataRecord rule);
    private bool SuggestedValuesFilter(PsRuleMetadataRecord rule);
    private bool ProhibitedValuesFilter(PsRuleMetadataRecord rule);
    private bool ReadOnlyFilter(PsRuleMetadataRecord rule);
    private bool CopyDefaultFilter(PsRuleMetadataRecord rule);
    private bool ValidUserFilter(PsRuleMetadataRecord rule);
    private bool EmptyFilter(PsRuleMetadataRecord rule);
    private bool CannotLoseValueFilter(PsRuleMetadataRecord rule);
    private bool NotSameAsFilter(PsRuleMetadataRecord rule);
    private bool FormFilter(PsRuleMetadataRecord rule);
    private bool DefaultReasonFilter(PsRuleMetadataRecord rule);
    private bool TransitionPermissionsFilter(PsRuleMetadataRecord rule);
    private bool MatchFilter(PsRuleMetadataRecord rule);
    private bool FrozenFilter(PsRuleMetadataRecord rule);
    private bool ServerDefaultFilter(PsRuleMetadataRecord rule);
    private bool RuleScopeFilter(PsRuleMetadataRecord rule);
    private bool RuleGlobalScopeFilter(PsRuleMetadataRecord rule);
    private static bool FIsValidRuleContext(PsRuleMetadataRecord rule, int lTreeID, int lTypeConstantID);
    private static bool FIsConditionalRule(PsRuleMetadataRecord rule);
    private string SafeGetFieldName(int fieldId);
    private string SafeGetTreeProperty(int propId);
    private string GetScopedConstant(int id);
    private static string NormalizeValue(string value, PsFieldDefinitionTypeEnum type);
    [CompilerGeneratedAttribute]
private void <ExportRules>b__29_0(PsRuleMetadataRecord rule);
    [CompilerGeneratedAttribute]
private void <get_GlobalLists>b__40_0(PsConstantSetMetadataRecord r);
    [CompilerGeneratedAttribute]
private void <StateValuesFilter>b__50_0(PsConstantSetMetadataRecord r);
}
[ObsoleteAttribute("For more information please see documentation at http://aka.ms/witclientom")]
internal class Microsoft.TeamFoundation.WorkItemTracking.Client.Provision.WitField : object {
    private int m_id;
    private PsFieldDefinitionTypeEnum m_type;
    private string m_referenceName;
    private XmlElement m_x;
    public int Id { get; }
    public bool IsIgnored { get; }
    public PsFieldDefinitionTypeEnum Type { get; }
    public XmlElement Element { get; }
    public string ReferenceName { get; }
    public WitField(XmlDocument doc, PsFieldMetadataRecord f);
    public int get_Id();
    public bool get_IsIgnored();
    public PsFieldDefinitionTypeEnum get_Type();
    public XmlElement get_Element();
    public string get_ReferenceName();
    private static string TranslateFieldType(PsFieldDefinitionTypeEnum fieldType);
    private static string TranslateReportingType(int reportingType);
    private static string TranslateReportingFormula(int formula);
    public sealed virtual int CompareTo(WitField other);
}
[ObsoleteAttribute("For more information please see documentation at http://aka.ms/witclientom")]
internal class Microsoft.TeamFoundation.WorkItemTracking.Client.Provision.WorkflowKey : ValueType {
    public int fromStateID;
    public int toStateID;
    public int reasonID;
    public WorkflowKey(int id1);
    public WorkflowKey(int id1, int id2);
    public WorkflowKey(int id1, int id2, int id3);
    public virtual int GetHashCode();
    public sealed virtual bool Equals(WorkflowKey other);
}
[ObsoleteAttribute("For more information please see documentation at http://aka.ms/witclientom")]
public class Microsoft.TeamFoundation.WorkItemTracking.Client.ProvisioningResult : object {
    [CompilerGeneratedAttribute]
private IEnumerable`1<string> <ProvisioningImportEvents>k__BackingField;
    public IEnumerable`1<string> ProvisioningImportEvents { get; public set; }
    [CompilerGeneratedAttribute]
public IEnumerable`1<string> get_ProvisioningImportEvents();
    [CompilerGeneratedAttribute]
public void set_ProvisioningImportEvents(IEnumerable`1<string> value);
}
[DefaultMemberAttribute("Item")]
[ObsoleteAttribute("For more information please see documentation at http://aka.ms/witclientom")]
internal class Microsoft.TeamFoundation.WorkItemTracking.Client.ProxyRowSetCollectionHelper : object {
    private IWorkItemRowSets m_rowsets;
    public IRowSetHelper Item { get; }
    public ProxyRowSetCollectionHelper(IWorkItemRowSets rowsets);
    public sealed virtual IRowSetHelper get_Item(string name);
    public sealed virtual bool TryGetRowSet(string name, IRowSetHelper& rowset);
}
[DefaultMemberAttribute("Item")]
[ObsoleteAttribute("For more information please see documentation at http://aka.ms/witclientom")]
internal class Microsoft.TeamFoundation.WorkItemTracking.Client.ProxyRowSetHelper : object {
    private IRowSet m_rowset;
    public int RowCount { get; }
    public int ColumnCount { get; }
    public string Item { get; }
    public object Item { get; }
    public object Item { get; }
    public ProxyRowSetHelper(IRowSet rowset);
    public sealed virtual int get_RowCount();
    public sealed virtual int get_ColumnCount();
    public sealed virtual string get_Item(int column);
    public sealed virtual object get_Item(int row, int column);
    public sealed virtual object get_Item(int row, string column);
}
[ObsoleteAttribute("For more information please see documentation at http://aka.ms/witclientom")]
public class Microsoft.TeamFoundation.WorkItemTracking.Client.Query : object {
    [CompilerGeneratedAttribute]
private WorkItemAsyncEventHandler AsyncStateChanged;
    private WorkItemStore m_store;
    private DisplayFieldList m_displayFieldList;
    private SortFieldList m_sortFieldList;
    private DateTime m_asofUtcQuery;
    private DateTime m_asofUtcResult;
    private XmlElement m_queryXml;
    private NodeSelect m_wiqlNode;
    private NodeAndOperator m_linkGroup;
    private int m_displayFieldListVersion;
    private int m_sortFieldListVersion;
    private Int32[] m_batchIds;
    private Int32[] m_batchRevs;
    public bool IsBatchReadMode { get; }
    public bool IsLinkQuery { get; }
    public bool IsTreeQuery { get; }
    public WorkItemStore WorkItemStore { get; }
    public DateTime AsOfUTC { get; }
    public DateTime AsOf { get; }
    public DisplayFieldList DisplayFieldList { get; }
    public SortFieldList SortFieldList { get; }
    public string QueryString { get; }
    internal NodeSelect WiqlNode { get; }
    public Query(WorkItemStore store, string wiql, IDictionary context, bool dayPrecision);
    public Query(WorkItemStore store, string wiql, IDictionary context);
    public Query(WorkItemStore store, string wiql);
    public Query(WorkItemStore store, string wiql, BatchReadParameterCollection batchReadParameters);
    public Query(WorkItemStore store, string wiql, Int32[] ids, Int32[] revs);
    public Query(WorkItemStore store, string wiql, Int32[] ids);
    private void Initialize(WorkItemStore store, string wiql, IDictionary context, Int32[] ids, Int32[] revs, bool dayPrecision);
    public bool get_IsBatchReadMode();
    public bool get_IsLinkQuery();
    public bool get_IsTreeQuery();
    public WorkItemStore get_WorkItemStore();
    public DateTime get_AsOfUTC();
    public DateTime get_AsOf();
    public DisplayFieldList get_DisplayFieldList();
    public SortFieldList get_SortFieldList();
    public string get_QueryString();
    public WorkItemLinkTypeEnd[] GetLinkTypes();
    internal NodeSelect get_WiqlNode();
    public WorkItemCollection RunQuery();
    [ObsoleteAttribute]
public IEnumerable`1<Revision> RunRevisionQuery();
    public Int32[] RunRegularQuery();
    public WorkItemLinkInfo[] RunLinkQuery();
    public int RunCountQuery();
    internal int RunCountQuery(string requestId);
    internal Int32[] RunRegularQuery(string requestid);
    internal WorkItemLinkInfo[] RunLinkQuery(string requestid);
    internal WorkItemCollection RunQuery(string requestId);
    private QuerySortOrderEntry[] GetRegularSortOrder();
    private QuerySortOrderEntry GetLinkSortOrder(SortField field, string prefix);
    private QuerySortOrderEntry[] GetLinksSortOrder(Nullable`1& sortFlag);
    internal object AsyncQueryRunner(string requestId, QueryMode mode);
    [CompilerGeneratedAttribute]
public void add_AsyncStateChanged(WorkItemAsyncEventHandler value);
    [CompilerGeneratedAttribute]
public void remove_AsyncStateChanged(WorkItemAsyncEventHandler value);
    private ICancelableAsyncResult BeginAsyncQuery(AsyncCallback callBack, QueryMode mode);
    private object EndAsyncQuery(ICancelableAsyncResult car, QueryMode mode);
    public ICancelableAsyncResult BeginQuery();
    public ICancelableAsyncResult BeginQuery(AsyncCallback callBack);
    public ICancelableAsyncResult BeginRegularQuery();
    public ICancelableAsyncResult BeginRegularQuery(AsyncCallback callback);
    public ICancelableAsyncResult BeginLinkQuery();
    public ICancelableAsyncResult BeginLinkQuery(AsyncCallback callback);
    public ICancelableAsyncResult BeginCountOnlyQuery();
    public ICancelableAsyncResult BeginCountOnlyQuery(AsyncCallback callBack);
    public WorkItemCollection EndQuery(ICancelableAsyncResult car);
    public Int32[] EndRegularQuery(ICancelableAsyncResult car);
    public WorkItemLinkInfo[] EndLinkQuery(ICancelableAsyncResult car);
    public int EndCountOnlyQuery(ICancelableAsyncResult car);
}
[ObsoleteAttribute("For more information please see documentation at http://aka.ms/witclientom")]
public class Microsoft.TeamFoundation.WorkItemTracking.Client.QueryDefinition : QueryItem {
    private string m_queryText;
    private string m_originalQueryText;
    private Nullable`1<QueryType> m_type;
    public string QueryText { get; public set; }
    public QueryType QueryType { get; }
    internal string ObjectClassId { get; }
    internal bool IsDirtyShallow { get; }
    internal string OriginalQueryText { get; }
    public QueryDefinition(string name, string queryText);
    public QueryDefinition(string name, string queryText, QueryFolder parent);
    internal QueryDefinition(string name, string queryText, QueryFolder parent, Guid id, IdentityDescriptor ownerDescriptor);
    public string get_QueryText();
    public void set_QueryText(string value);
    private void SetQueryTextWithValidation(string queryText);
    public QueryType get_QueryType();
    public static QueryType GetQueryType(string queryText);
    internal virtual string get_ObjectClassId();
    internal sealed virtual bool get_IsDirtyShallow();
    [EditorBrowsableAttribute("1")]
public virtual void ResetInternal();
    internal virtual void OnSaveCompleted();
    [EditorBrowsableAttribute("1")]
public virtual void ResetDirty();
    internal string get_OriginalQueryText();
    internal void SetQueryText(string queryText);
    internal virtual void Validate(WorkItemStore store);
    internal static QueryDefinition GetQueryDefinitionFromRowSet(RowSet rs, WorkItemStore wis);
    private void SetQueryTextInternal(string queryText);
}
[EditorBrowsableAttribute("1")]
[ObsoleteAttribute("For more information please see documentation at http://aka.ms/witclientom")]
public class Microsoft.TeamFoundation.WorkItemTracking.Client.QueryDefinition2 : QueryItem2 {
    private string m_queryText;
    private string m_originalQueryText;
    private Nullable`1<QueryType> m_type;
    public string QueryText { get; public set; }
    public QueryType QueryType { get; }
    internal string ObjectClassId { get; }
    internal bool IsDirtyShallow { get; }
    internal string OriginalQueryText { get; }
    public QueryDefinition2(string name, string queryText);
    public QueryDefinition2(string name, string queryText, QueryFolder2 parent);
    internal QueryDefinition2(string name, string queryText, QueryFolder2 parent, Guid id, IdentityDescriptor ownerDescriptor);
    public virtual void Reset();
    public string get_QueryText();
    public void set_QueryText(string value);
    public QueryType get_QueryType();
    private sealed virtual override QueryItem2 Microsoft.TeamFoundation.WorkItemTracking.Client.IClonableQueryItem.Clone(QueryHierarchy2 hierarchy);
    internal virtual string get_ObjectClassId();
    internal virtual bool get_IsDirtyShallow();
    internal virtual void OnSaveCompleted();
    internal virtual void ResetDirty();
    internal virtual void MergeProperties(QueryItem2 sourceQueryItem);
    internal string get_OriginalQueryText();
    internal void SetQueryText(string queryText);
    internal virtual void Validate();
    internal static QueryDefinition GetQueryDefinitionFromRowSet(RowSet rs, WorkItemStore wis);
    private void SetQueryTextInternal(string queryText);
    private void SetQueryTextWithValidation(string queryText);
    public static QueryType GetQueryType(string queryText);
}
[DefaultMemberAttribute("Item")]
[ObsoleteAttribute("For more information please see documentation at http://aka.ms/witclientom")]
public class Microsoft.TeamFoundation.WorkItemTracking.Client.QueryFolder : QueryItem {
    private List`1<QueryItem> m_addedItems;
    private List`1<QueryItem> m_removedItems;
    private List`1<QueryItem> m_items;
    private bool m_needsSort;
    [CompilerGeneratedAttribute]
private QueryFolderContentsChangedEventHandler ContentsChanged;
    [CompilerGeneratedAttribute]
private QueryFolderContentsChangedEventHandler ChangesCommitted;
    public QueryItem Item { get; }
    public QueryItem Item { get; }
    public int Count { get; }
    internal string ObjectClassId { get; }
    internal List`1<QueryItem> RemovedItems { get; }
    [EditorBrowsableAttribute("1")]
public bool IsRootNode { get; }
    public QueryFolder(string name);
    public QueryFolder(string name, QueryFolder parent);
    internal QueryFolder(string name, QueryFolder parent, Guid id, IdentityDescriptor ownerDescriptor);
    [CompilerGeneratedAttribute]
public void add_ContentsChanged(QueryFolderContentsChangedEventHandler value);
    [CompilerGeneratedAttribute]
public void remove_ContentsChanged(QueryFolderContentsChangedEventHandler value);
    [CompilerGeneratedAttribute]
public void add_ChangesCommitted(QueryFolderContentsChangedEventHandler value);
    [CompilerGeneratedAttribute]
public void remove_ChangesCommitted(QueryFolderContentsChangedEventHandler value);
    public bool Contains(QueryItem item);
    public bool Contains(Guid id);
    public bool Contains(string name);
    public QueryItem get_Item(Guid id);
    public QueryItem get_Item(string name);
    public int get_Count();
    public void Add(QueryItem item);
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    private sealed virtual override IEnumerator`1<QueryItem> System.Collections.Generic.IEnumerable<Microsoft.TeamFoundation.WorkItemTracking.Client.QueryItem>.GetEnumerator();
    private IEnumerator`1<QueryItem> GetEnumeratorImpl();
    internal virtual string get_ObjectClassId();
    [EditorBrowsableAttribute("1")]
public virtual void ResetInternal();
    internal virtual void OnMoveChangedHierarchy();
    internal virtual string CheckName(string name);
    internal void AddInternal(QueryItem item, bool updateChangedLists);
    internal void DeleteInternal(QueryItem item, bool updateChangedLists);
    internal void UpdateName(QueryItem item, string newName);
    internal void CheckForDuplicateName(QueryItem item, string name);
    internal void OnAddSaved(QueryItem item);
    internal void OnDeleteSaved(QueryItem item);
    internal void UpdateCollectionsForRemove(QueryItem item);
    internal void OnUpdateSaved(QueryItem item);
    internal List`1<QueryItem> get_RemovedItems();
    private void FireAdd(QueryItem item);
    private void FireDelete(QueryItem item);
    private void FireUpdate(QueryItem item);
    private void OnChangesCommitted(QueryFolderContentsChangedEventArgs e);
    internal void OnContentsChanged(QueryItem item, QueryFolderAction action);
    private void UpdateChangedListsOnRemove(QueryItem item);
    private void UpdateAttributes(QueryFolder folder);
    private QueryItem FindByName(string name);
    private QueryItem FindByGuid(Guid id);
    internal virtual void Validate(WorkItemStore store);
    public bool get_IsRootNode();
}
[EditorBrowsableAttribute("1")]
[ObsoleteAttribute("For more information please see documentation at http://aka.ms/witclientom")]
public class Microsoft.TeamFoundation.WorkItemTracking.Client.QueryFolder2 : QueryItem2 {
    private QueryItem2Collection m_children;
    [CompilerGeneratedAttribute]
private QueryFolder2ContentsChangedEventHandler ContentsChanged;
    [CompilerGeneratedAttribute]
private QueryFolder2ContentsChangedEventHandler ChangesCommitted;
    [CompilerGeneratedAttribute]
private EventHandler Populated;
    [CompilerGeneratedAttribute]
private bool <IsPopulated>k__BackingField;
    [CompilerGeneratedAttribute]
private Task`1<IEnumerable`1<QueryItem2>> <RetrievalTask>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <RetrievingGrandchildren>k__BackingField;
    public bool IsPopulated { get; internal set; }
    public bool IsRootNode { get; }
    internal string ObjectClassId { get; }
    protected Task`1<IEnumerable`1<QueryItem2>> RetrievalTask { get; protected set; }
    internal Task`1<IQueryItemDataProvider> Provider { get; }
    internal QueryItem2Collection Children { get; }
    private bool RetrievingGrandchildren { get; private set; }
    public QueryFolder2(string name);
    public QueryFolder2(string name, QueryFolder2 parent);
    internal QueryFolder2(string name, QueryFolder2 parent, Guid id, IdentityDescriptor ownerDescriptor);
    [CompilerGeneratedAttribute]
public void add_ContentsChanged(QueryFolder2ContentsChangedEventHandler value);
    [CompilerGeneratedAttribute]
public void remove_ContentsChanged(QueryFolder2ContentsChangedEventHandler value);
    [CompilerGeneratedAttribute]
public void add_ChangesCommitted(QueryFolder2ContentsChangedEventHandler value);
    [CompilerGeneratedAttribute]
public void remove_ChangesCommitted(QueryFolder2ContentsChangedEventHandler value);
    [CompilerGeneratedAttribute]
public void add_Populated(EventHandler value);
    [CompilerGeneratedAttribute]
public void remove_Populated(EventHandler value);
    [AsyncStateMachineAttribute("Microsoft.TeamFoundation.WorkItemTracking.Client.QueryFolder2/<GetChildrenAsync>d__13")]
public virtual Task`1<QueryItem2Collection> GetChildrenAsync();
    public virtual QueryItem2Collection GetChildren();
    [CompilerGeneratedAttribute]
public bool get_IsPopulated();
    [CompilerGeneratedAttribute]
internal void set_IsPopulated(bool value);
    public bool get_IsRootNode();
    private sealed virtual override QueryItem2 Microsoft.TeamFoundation.WorkItemTracking.Client.IClonableQueryItem.Clone(QueryHierarchy2 hierarchy);
    internal virtual string get_ObjectClassId();
    internal virtual void OnMoveChangedHierarchy();
    internal virtual string CheckName(string name);
    internal virtual void Validate();
    internal void MergeChildren(IEnumerable`1<QueryItem2> children);
    protected QueryItem2 FindInternal(Guid id);
    [CompilerGeneratedAttribute]
protected Task`1<IEnumerable`1<QueryItem2>> get_RetrievalTask();
    [CompilerGeneratedAttribute]
protected void set_RetrievalTask(Task`1<IEnumerable`1<QueryItem2>> value);
    internal Task`1<IQueryItemDataProvider> get_Provider();
    internal QueryItem2Collection get_Children();
    internal void UpdateName(QueryItem2 item, string newName);
    internal void CheckForDuplicateName(QueryItem2 item, string name);
    internal void OnAddSaved(QueryItem2 item);
    internal void OnDeleteSaved(QueryItem2 item);
    internal void OnUpdateSaved(QueryItem2 item);
    internal void OnAddPended(QueryItem2 item);
    internal void OnRemovePended(QueryItem2 item);
    internal void OnContentsChangePended(QueryItem2 item);
    internal void OnContentsChanged(QueryItem2 item, QueryFolderAction action);
    internal void CheckIsPopulated();
    [CompilerGeneratedAttribute]
private bool get_RetrievingGrandchildren();
    [CompilerGeneratedAttribute]
private void set_RetrievingGrandchildren(bool value);
    private IEnumerable`1<QueryFolder2> GetUnpopulatedChildFolders();
    private void FireAdd(QueryItem2 item);
    private void FireDelete(QueryItem2 item);
    private void FireUpdate(QueryItem2 item);
    private void OnChangesCommitted(QueryFolder2ContentsChangedEventArgs e);
    private void FirePopulated();
    private void UpdateAttributes();
    private void UpdateCollectionsForRemove(QueryItem2 item);
    private IEnumerable`1<TreeMergeResult> MergeTree(IEnumerable`1<QueryItem2> newChildren);
    private void MergeTree(IEnumerable`1<QueryItem2> updatedChildren, Dictionary`2<Guid, QueryItem2> currentItemDictionary, IList`1<TreeMergeResult> results);
    private void AddWithRootNodeCheck(QueryItem2 item);
    private void CreateMappingDictionary(QueryItem2 sourceItem, Dictionary`2<Guid, QueryItem2> map);
    [AsyncStateMachineAttribute("Microsoft.TeamFoundation.WorkItemTracking.Client.QueryFolder2/<RetrieveGrandChildren>d__63")]
private Task RetrieveGrandChildren(IEnumerable`1<QueryFolder2> subFoldersNeedingRefresh);
    private void MergeGrandChildren(IEnumerable`1<QueryFolder2> subFoldersNeedingRefresh, IEnumerable`1<QueryItem2> children);
    [CompilerGeneratedAttribute]
private void <GetChildrenAsync>b__13_1(Task x);
}
[EditorBrowsableAttribute("1")]
[ObsoleteAttribute("For more information please see documentation at http://aka.ms/witclientom")]
public class Microsoft.TeamFoundation.WorkItemTracking.Client.QueryFolder2ContentsChangedEventArgs : EventArgs {
    private QueryItem2 m_queryItem;
    private QueryFolderAction m_action;
    public QueryItem2 QueryItem { get; }
    public QueryFolderAction Action { get; }
    public QueryFolder2ContentsChangedEventArgs(QueryItem2 queryItem, QueryFolderAction action);
    public QueryItem2 get_QueryItem();
    public QueryFolderAction get_Action();
}
[EditorBrowsableAttribute("1")]
[ObsoleteAttribute("For more information please see documentation at http://aka.ms/witclientom")]
public class Microsoft.TeamFoundation.WorkItemTracking.Client.QueryFolder2ContentsChangedEventHandler : MulticastDelegate {
    public QueryFolder2ContentsChangedEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, QueryFolder2ContentsChangedEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, QueryFolder2ContentsChangedEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
[ObsoleteAttribute("For more information please see documentation at http://aka.ms/witclientom")]
public enum Microsoft.TeamFoundation.WorkItemTracking.Client.QueryFolderAction : Enum {
    public int value__;
    public static QueryFolderAction Added;
    public static QueryFolderAction Removed;
    public static QueryFolderAction Changed;
}
[ObsoleteAttribute("For more information please see documentation at http://aka.ms/witclientom")]
public class Microsoft.TeamFoundation.WorkItemTracking.Client.QueryFolderContentsChangedEventArgs : EventArgs {
    private QueryItem m_queryItem;
    private QueryFolderAction m_action;
    public QueryItem QueryItem { get; }
    public QueryFolderAction Action { get; }
    public QueryFolderContentsChangedEventArgs(QueryItem queryItem, QueryFolderAction action);
    public QueryItem get_QueryItem();
    public QueryFolderAction get_Action();
}
[ObsoleteAttribute("For more information please see documentation at http://aka.ms/witclientom")]
public class Microsoft.TeamFoundation.WorkItemTracking.Client.QueryFolderContentsChangedEventHandler : MulticastDelegate {
    public QueryFolderContentsChangedEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, QueryFolderContentsChangedEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, QueryFolderContentsChangedEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
[ObsoleteAttribute("For more information please see documentation at http://aka.ms/witclientom")]
public class Microsoft.TeamFoundation.WorkItemTracking.Client.QueryHierarchy : QueryFolder {
    private long m_rowVersion;
    private int m_hierarchyVersion;
    [CompilerGeneratedAttribute]
private EventHandler HierarchyRefreshed;
    [CompilerGeneratedAttribute]
private EventHandler HierarchyReset;
    [CompilerGeneratedAttribute]
private EventHandler HierarchySaved;
    [EditorBrowsableAttribute("1")]
[ObsoleteAttribute("UseIncrementalRefresh is no longer supported.  This property will be removed from the QueryHierarchy class in the next version of WorkItemTracking.")]
public static bool UseIncrementalRefresh;
    public bool SupportsFolders { get; }
    public bool SupportsPermissions { get; }
    internal bool IsVersionOutOfDate { get; }
    internal QueryHierarchy(Project project);
    [CompilerGeneratedAttribute]
public void add_HierarchyRefreshed(EventHandler value);
    [CompilerGeneratedAttribute]
public void remove_HierarchyRefreshed(EventHandler value);
    [CompilerGeneratedAttribute]
public void add_HierarchyReset(EventHandler value);
    [CompilerGeneratedAttribute]
public void remove_HierarchyReset(EventHandler value);
    [CompilerGeneratedAttribute]
public void add_HierarchySaved(EventHandler value);
    [CompilerGeneratedAttribute]
public void remove_HierarchySaved(EventHandler value);
    public bool get_SupportsFolders();
    public bool get_SupportsPermissions();
    internal bool get_IsVersionOutOfDate();
    internal void RefreshOnVersionMismatch();
    public void Refresh();
    [EditorBrowsableAttribute("1")]
public void Refresh(QueryHierarchyRefreshData refreshData);
    [EditorBrowsableAttribute("1")]
public QueryHierarchyRefreshData GetRefreshData();
    public QueryItem Find(Guid id);
    public void Save();
    public void Reset();
    private QueryItem FindInternal(QueryFolder root, Guid id);
    private QueryHierarchyRefreshData GetUpdateData(bool refresh);
    private void UpdateQueries(bool refresh);
    private void UpdateQueries(bool refresh, QueryHierarchyRefreshData refreshdata);
    private QueryFolder ProcessQueries(bool isRefresh, Dictionary`2<Guid, QueryItem> existingItemsByGuid, Dictionary`2<Guid, QueryItem> unmatchedItems, RowSet queryData, bool isPublic);
    private void AddUpdateItem(string name, Guid id, Guid parentId, QueryItem existingItem, string queryText, bool fFolder, bool isPublic, IdentityDescriptor ownerDescriptor, Dictionary`2<Guid, QueryItem> existingItemsByGuid, Dictionary`2<Guid, List`1<QueryItem>> waitingForParentList);
    private QueryFolder CreateFolder(string name, QueryFolder parent, Guid id, bool isPublic, IdentityDescriptor ownerDescriptor, Dictionary`2<Guid, List`1<QueryItem>> waitingForParentList, Dictionary`2<Guid, QueryItem> existingItemsByGuid);
    private void PopulateGuidDictionary(QueryFolder folder, Dictionary`2<Guid, QueryItem> existingQueryItemsByGuid);
    private void SaveToNewServer();
    private void GetDirtyItems(QueryItem item, List`1<QueryItem> itemsToSave);
    internal XmlDocument GenerateQueryItemsUpdatePackage(List`1& itemsToSave);
    private void SaveCompleted(List`1<QueryItem> itemsToSave);
    private void UpdateQueriesFromOldServer(ArrayList queriesList);
    private void SaveToOldServer();
    private void SaveQueryToOldServer(QueryDefinition query);
    private void AddStoredQuery(QueryDefinition query, StoredQueryProvider provider);
}
[EditorBrowsableAttribute("1")]
[ObsoleteAttribute("For more information please see documentation at http://aka.ms/witclientom")]
public class Microsoft.TeamFoundation.WorkItemTracking.Client.QueryHierarchy2 : QueryFolder2 {
    private Func`1<Task`1<IQueryItemDataProvider>> m_queryItemDataProviderFactory;
    private IQueryItemDataProvider m_dataProvider;
    [CompilerGeneratedAttribute]
private EventHandler HierarchyDetached;
    [CompilerGeneratedAttribute]
private QueryHierarchy2ContentsChangedEventHandler HierarchyChangesCommitted;
    [CompilerGeneratedAttribute]
private int <Version>k__BackingField;
    [CompilerGeneratedAttribute]
private IQueryHierarchy2Provider <QueryHierarchyProvider>k__BackingField;
    [CompilerGeneratedAttribute]
private object <HierarchyLock>k__BackingField;
    public int Version { get; private set; }
    internal IQueryHierarchy2Provider QueryHierarchyProvider { get; internal set; }
    internal object HierarchyLock { get; private set; }
    internal QueryHierarchy2(string projectName, Func`1<Task`1<IQueryItemDataProvider>> dataProviderFactory, IQueryHierarchy2Provider hierarchyProvider, int version);
    [CompilerGeneratedAttribute]
public void add_HierarchyDetached(EventHandler value);
    [CompilerGeneratedAttribute]
public void remove_HierarchyDetached(EventHandler value);
    [CompilerGeneratedAttribute]
public void add_HierarchyChangesCommitted(QueryHierarchy2ContentsChangedEventHandler value);
    [CompilerGeneratedAttribute]
public void remove_HierarchyChangesCommitted(QueryHierarchy2ContentsChangedEventHandler value);
    [AsyncStateMachineAttribute("Microsoft.TeamFoundation.WorkItemTracking.Client.QueryHierarchy2/<GetChildrenAsync>d__9")]
public virtual Task`1<QueryItem2Collection> GetChildrenAsync();
    [AsyncStateMachineAttribute("Microsoft.TeamFoundation.WorkItemTracking.Client.QueryHierarchy2/<FindAsync>d__10")]
public Task`1<QueryItem2> FindAsync(Guid id);
    [AsyncStateMachineAttribute("Microsoft.TeamFoundation.WorkItemTracking.Client.QueryHierarchy2/<FindAsync>d__11")]
public Task`1<IEnumerable`1<QueryItem2>> FindAsync(Guid[] ids);
    public QueryItem2 FindLocal(Guid id);
    public virtual void Save();
    public virtual void Reset();
    [CompilerGeneratedAttribute]
public int get_Version();
    [CompilerGeneratedAttribute]
private void set_Version(int value);
    [AsyncStateMachineAttribute("Microsoft.TeamFoundation.WorkItemTracking.Client.QueryHierarchy2/<GetDataProviderAsync>d__19")]
internal Task`1<IQueryItemDataProvider> GetDataProviderAsync();
    [CompilerGeneratedAttribute]
internal IQueryHierarchy2Provider get_QueryHierarchyProvider();
    [CompilerGeneratedAttribute]
internal void set_QueryHierarchyProvider(IQueryHierarchy2Provider value);
    internal void FireHierarchyDetached();
    internal void FireHierarchyChangesCommitted(QueryHierarchy2ContentsChangedEventArgs e);
    internal static void ValidateWiql(QueryHierarchy2 hierarchy, string queryText);
    [CompilerGeneratedAttribute]
internal object get_HierarchyLock();
    [CompilerGeneratedAttribute]
private void set_HierarchyLock(object value);
    private void GetDirtyItems(QueryItem2 item, List`1<QueryItem2> itemsToSave);
}
[EditorBrowsableAttribute("1")]
[ObsoleteAttribute("For more information please see documentation at http://aka.ms/witclientom")]
public class Microsoft.TeamFoundation.WorkItemTracking.Client.QueryHierarchy2ContentsChangedEventArgs : EventArgs {
    private IEnumerable`1<QueryItem2> m_queryItems;
    public IEnumerable`1<QueryItem2> QueryItems { get; }
    public QueryHierarchy2ContentsChangedEventArgs(IEnumerable`1<QueryItem2> items);
    public IEnumerable`1<QueryItem2> get_QueryItems();
}
[EditorBrowsableAttribute("1")]
[ObsoleteAttribute("For more information please see documentation at http://aka.ms/witclientom")]
public class Microsoft.TeamFoundation.WorkItemTracking.Client.QueryHierarchy2ContentsChangedEventHandler : MulticastDelegate {
    public QueryHierarchy2ContentsChangedEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, QueryHierarchy2ContentsChangedEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, QueryHierarchy2ContentsChangedEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
[EditorBrowsableAttribute("1")]
[ObsoleteAttribute("For more information please see documentation at http://aka.ms/witclientom")]
public class Microsoft.TeamFoundation.WorkItemTracking.Client.QueryHierarchy2Provider : object {
    private WorkItemStore m_store;
    private Dictionary`2<int, QueryHierarchy2> m_projectQueryHierarchies;
    private AccessControlListMetadata[] m_accessControlListMetadata;
    private QueryHierarchyProviderFactory m_queryHierarchyProviderFactory;
    private int m_version;
    private IdentityDescriptor Microsoft.TeamFoundation.WorkItemTracking.Client.IQueryHierarchy2Provider.ConnectedIdentity { get; }
    public QueryHierarchy2Provider(WorkItemStore store);
    public QueryHierarchy2 GetQueryHierarchy(Project project, bool refresh);
    public void Reset();
    public void SetSoapAsPreferredQueryHierarchyProvider(bool value);
    [AsyncStateMachineAttribute("Microsoft.TeamFoundation.WorkItemTracking.Client.QueryHierarchy2Provider/<IsUsingRest>d__9")]
public Task`1<bool> IsUsingRest();
    private sealed virtual override AccessControlListMetadata Microsoft.TeamFoundation.WorkItemTracking.Client.IQueryHierarchy2Provider.GetAccessControlListMetadata(string objectClassId);
    private sealed virtual override void Microsoft.TeamFoundation.WorkItemTracking.Client.IQueryHierarchy2Provider.GetAccessControlList(QueryItem2 queryItem);
    private sealed virtual override void Microsoft.TeamFoundation.WorkItemTracking.Client.IQueryHierarchy2Provider.ValidateWiql(string queryText);
    private sealed virtual override IdentityDescriptor Microsoft.TeamFoundation.WorkItemTracking.Client.IQueryHierarchy2Provider.get_ConnectedIdentity();
    private Nullable`1<bool> GetLocalRegistryUseSoapPreference();
    private void GetAccessControlList(QueryItem2 queryItem, bool getMetadata);
}
[ObsoleteAttribute("For more information please see documentation at http://aka.ms/witclientom")]
public class Microsoft.TeamFoundation.WorkItemTracking.Client.QueryHierarchyException : ValidationException {
    private Type m_type;
    public Type ExceptionType { get; }
    public QueryHierarchyException(string message);
    public QueryHierarchyException(string message, Exception innerException);
    public QueryHierarchyException(string message, Exception innerException, Type subtype);
    internal QueryHierarchyException(SoapException innerException, ResourceManager[] resMgrs);
    public Type get_ExceptionType();
}
[EditorBrowsableAttribute("1")]
[ObsoleteAttribute("For more information please see documentation at http://aka.ms/witclientom")]
public class Microsoft.TeamFoundation.WorkItemTracking.Client.QueryHierarchyProvider : object {
    private WorkItemStore m_store;
    private Dictionary`2<int, QueryHierarchy> m_projectQueryHierarchies;
    private AccessControlListMetadata[] m_accessControlListMetadata;
    private int m_version;
    public bool SupportsFolders { get; }
    public bool SupportsPermissions { get; }
    internal int Version { get; }
    public QueryHierarchyProvider(WorkItemStore store);
    public QueryHierarchy GetQueryHierarchy(Project project);
    public bool IsQueryHierarchyReady(Project project);
    public QueryDefinition GetQueryDefinition(Guid id);
    public bool get_SupportsFolders();
    public bool get_SupportsPermissions();
    internal int get_Version();
    public AccessControlListMetadata GetAccessControlListMetadata(string objectClassId);
    internal void GetAccessControlList(QueryItem queryItem);
    internal void GetAccessControlList(QueryItem queryItem, bool getMetadata);
    public void InvalidateAllHierarchies();
}
[ObsoleteAttribute("For more information please see documentation at http://aka.ms/witclientom")]
internal class Microsoft.TeamFoundation.WorkItemTracking.Client.QueryHierarchyProviderFactory : object {
    private static Version s_requiredRestApiVersion;
    private bool m_preferSoap;
    private bool m_initialized;
    private bool m_useRest;
    private TfsTeamProjectCollection m_teamProjectCollection;
    public QueryHierarchyProviderFactory(TfsTeamProjectCollection teamProjectCollection);
    private static QueryHierarchyProviderFactory();
    public Func`1<Task`1<IQueryItemDataProvider>> GetQueryProviderFactory(Project project);
    [AsyncStateMachineAttribute("Microsoft.TeamFoundation.WorkItemTracking.Client.QueryHierarchyProviderFactory/<IsUsingRest>d__7")]
public Task`1<bool> IsUsingRest();
    public void SetSoapAsPreferredQueryHierarchyProvider(bool value);
    private bool CanRestVersionCheckBeSkipped();
    private bool IsQueriesAPIAvailable();
    [AsyncStateMachineAttribute("Microsoft.TeamFoundation.WorkItemTracking.Client.QueryHierarchyProviderFactory/<IsQueriesApiOfSupportedVersion>d__11")]
private Task`1<bool> IsQueriesApiOfSupportedVersion();
}
[EditorBrowsableAttribute("1")]
[ObsoleteAttribute("For more information please see documentation at http://aka.ms/witclientom")]
public class Microsoft.TeamFoundation.WorkItemTracking.Client.QueryHierarchyRefreshData : object {
    [CompilerGeneratedAttribute]
private bool <IsLegacy>k__BackingField;
    [CompilerGeneratedAttribute]
private QueryHierarchy <Hierarchy>k__BackingField;
    [CompilerGeneratedAttribute]
private RowSetCollection <QueriesDataSet>k__BackingField;
    [CompilerGeneratedAttribute]
private ArrayList <LegacyQueries>k__BackingField;
    public bool IsLegacy { get; private set; }
    public QueryHierarchy Hierarchy { get; private set; }
    public RowSetCollection QueriesDataSet { get; private set; }
    public ArrayList LegacyQueries { get; private set; }
    public QueryHierarchyRefreshData(QueryHierarchy hierarchy, RowSetCollection queriesDataSet, ArrayList legacyQueries);
    [CompilerGeneratedAttribute]
public bool get_IsLegacy();
    [CompilerGeneratedAttribute]
private void set_IsLegacy(bool value);
    [CompilerGeneratedAttribute]
public QueryHierarchy get_Hierarchy();
    [CompilerGeneratedAttribute]
private void set_Hierarchy(QueryHierarchy value);
    [CompilerGeneratedAttribute]
public RowSetCollection get_QueriesDataSet();
    [CompilerGeneratedAttribute]
private void set_QueriesDataSet(RowSetCollection value);
    [CompilerGeneratedAttribute]
public ArrayList get_LegacyQueries();
    [CompilerGeneratedAttribute]
private void set_LegacyQueries(ArrayList value);
}
[ObsoleteAttribute("For more information please see documentation at http://aka.ms/witclientom")]
public abstract class Microsoft.TeamFoundation.WorkItemTracking.Client.QueryItem : object {
    private string m_name;
    private string m_originalName;
    private Guid m_id;
    private QueryFolder m_parent;
    private QueryFolder m_originalParent;
    private WorkItemStore m_store;
    private int m_projectId;
    private IdentityDescriptor m_ownerDescriptor;
    private IdentityDescriptor m_originalOwnerDescriptor;
    private AccessControlList m_accessControlList;
    private AccessControlList m_originalAccessControlList;
    private bool m_isDeleted;
    private bool m_isNew;
    private bool m_isPersonal;
    protected ReaderWriterLock m_lock;
    [CompilerGeneratedAttribute]
private bool <CanManagePermissions>k__BackingField;
    public Guid Id { get; internal set; }
    public string Name { get; public set; }
    public QueryFolder Parent { get; internal set; }
    public Project Project { get; internal set; }
    public IdentityDescriptor OwnerDescriptor { get; public set; }
    public AccessControlList AccessControlList { get; internal set; }
    [EditorBrowsableAttribute("1")]
public AccessControlListMetadata AccessControlListMetadata { get; }
    internal string ObjectClassId { get; }
    internal QueryHierarchyProvider QueryHierarchyProvider { get; }
    [EditorBrowsableAttribute("1")]
public bool CanManagePermissions { get; public set; }
    public bool IsPersonal { get; internal set; }
    public bool IsDeleted { get; internal set; }
    public bool IsNew { get; }
    public bool IsDirty { get; }
    internal bool IsDirtyShallow { get; }
    internal bool IsAccessControlListDirty { get; }
    public string Path { get; }
    internal QueryFolder OriginalParent { get; }
    internal string OriginalName { get; }
    internal IdentityDescriptor OriginalOwnerDescriptor { get; }
    protected QueryItem(string name, QueryFolder parent);
    internal QueryItem(string name, QueryFolder parent, Guid id, IdentityDescriptor ownerDescriptor);
    public Guid get_Id();
    internal void set_Id(Guid value);
    public string get_Name();
    public void set_Name(string value);
    public QueryFolder get_Parent();
    internal void set_Parent(QueryFolder value);
    public Project get_Project();
    internal void set_Project(Project value);
    public IdentityDescriptor get_OwnerDescriptor();
    public void set_OwnerDescriptor(IdentityDescriptor value);
    public AccessControlList get_AccessControlList();
    internal void set_AccessControlList(AccessControlList value);
    public AccessControlListMetadata get_AccessControlListMetadata();
    internal abstract virtual string get_ObjectClassId();
    internal QueryHierarchyProvider get_QueryHierarchyProvider();
    [CompilerGeneratedAttribute]
public bool get_CanManagePermissions();
    [CompilerGeneratedAttribute]
public void set_CanManagePermissions(bool value);
    public bool get_IsPersonal();
    internal void set_IsPersonal(bool value);
    public bool get_IsDeleted();
    internal void set_IsDeleted(bool value);
    public bool get_IsNew();
    public virtual bool get_IsDirty();
    internal virtual bool get_IsDirtyShallow();
    internal bool get_IsAccessControlListDirty();
    internal static bool Equals(AccessControlList acl1, AccessControlList acl2);
    public string get_Path();
    public virtual string ToString();
    [EditorBrowsableAttribute("1")]
public virtual void ResetInternal();
    internal void GenerateUpdateAclXml(XmlDocument xmlDoc, XmlElement rootNode);
    internal void SetName(string name);
    internal QueryFolder get_OriginalParent();
    internal string get_OriginalName();
    internal IdentityDescriptor get_OriginalOwnerDescriptor();
    public void Delete();
    internal void Initialize(string name, QueryFolder parent, Guid id, IdentityDescriptor ownerDescriptor, bool checkName);
    [EditorBrowsableAttribute("1")]
public virtual void ResetDirty();
    internal virtual void OnSaveCompleted();
    internal virtual void OnMoveChangedHierarchy();
    internal virtual string CheckName(string name);
    internal abstract virtual void Validate(WorkItemStore store);
}
[EditorBrowsableAttribute("1")]
[ObsoleteAttribute("For more information please see documentation at http://aka.ms/witclientom")]
public abstract class Microsoft.TeamFoundation.WorkItemTracking.Client.QueryItem2 : object {
    private string m_name;
    private string m_originalName;
    private Guid m_id;
    private QueryFolder2 m_parent;
    private QueryFolder2 m_originalParent;
    private AccessControlList m_accessControlList;
    private AccessControlList m_originalAccessControlList;
    private bool m_isDeleted;
    private bool m_isNew;
    private bool m_isPersonal;
    private static object s_globalLock;
    [CompilerGeneratedAttribute]
private IdentityDescriptor <OwnerDescriptor>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <CanManagePermissions>k__BackingField;
    [CompilerGeneratedAttribute]
private IdentityDescriptor <OriginalOwnerDescriptor>k__BackingField;
    public Guid Id { get; internal set; }
    public string Name { get; public set; }
    public QueryFolder2 Parent { get; internal set; }
    public QueryHierarchy2 QueryHierarchy { get; }
    internal object Lock { get; }
    public IdentityDescriptor OwnerDescriptor { get; public set; }
    public AccessControlList AccessControlList { get; internal set; }
    [EditorBrowsableAttribute("1")]
public bool CanManagePermissions { get; public set; }
    public bool IsPersonal { get; internal set; }
    public bool IsDeleted { get; internal set; }
    public bool IsNew { get; }
    public bool IsDirty { get; }
    public string Path { get; }
    [EditorBrowsableAttribute("1")]
public AccessControlListMetadata AccessControlListMetadata { get; }
    internal bool IsAccessControlListDirty { get; }
    internal QueryFolder2 OriginalParent { get; }
    internal string OriginalName { get; }
    internal IdentityDescriptor OriginalOwnerDescriptor { get; internal set; }
    internal string ObjectClassId { get; }
    internal bool IsDirtyShallow { get; }
    protected QueryItem2(string name, QueryFolder2 parent);
    internal QueryItem2(string name, QueryFolder2 parent, Guid id, IdentityDescriptor ownerDescriptor);
    private static QueryItem2();
    public Guid get_Id();
    internal void set_Id(Guid value);
    public string get_Name();
    public void set_Name(string value);
    public QueryFolder2 get_Parent();
    internal void set_Parent(QueryFolder2 value);
    public virtual QueryHierarchy2 get_QueryHierarchy();
    internal object get_Lock();
    [CompilerGeneratedAttribute]
public IdentityDescriptor get_OwnerDescriptor();
    [CompilerGeneratedAttribute]
public void set_OwnerDescriptor(IdentityDescriptor value);
    public AccessControlList get_AccessControlList();
    internal void set_AccessControlList(AccessControlList value);
    public void Delete();
    public virtual void Save();
    public virtual void Reset();
    [CompilerGeneratedAttribute]
public bool get_CanManagePermissions();
    [CompilerGeneratedAttribute]
public void set_CanManagePermissions(bool value);
    public bool get_IsPersonal();
    internal void set_IsPersonal(bool value);
    public bool get_IsDeleted();
    internal void set_IsDeleted(bool value);
    public bool get_IsNew();
    public virtual bool get_IsDirty();
    public string get_Path();
    public virtual string ToString();
    protected void FireHierarchyUpdatedEvent();
    public AccessControlListMetadata get_AccessControlListMetadata();
    internal bool get_IsAccessControlListDirty();
    internal static bool Equals(AccessControlList acl1, AccessControlList acl2);
    internal void GenerateUpdateAclXml(XmlDocument xmlDoc, XmlElement rootNode);
    internal void SetName(string name);
    internal QueryFolder2 get_OriginalParent();
    internal string get_OriginalName();
    [CompilerGeneratedAttribute]
internal IdentityDescriptor get_OriginalOwnerDescriptor();
    [CompilerGeneratedAttribute]
internal void set_OriginalOwnerDescriptor(IdentityDescriptor value);
    internal void Initialize(string name, QueryFolder2 parent, Guid id, IdentityDescriptor ownerDescriptor, bool checkName);
    internal void ResetDirtyParent();
    internal abstract virtual string get_ObjectClassId();
    internal virtual void MergeProperties(QueryItem2 sourceQueryItem);
    internal virtual bool get_IsDirtyShallow();
    internal virtual void ResetDirty();
    internal virtual void OnSaveCompleted();
    internal virtual void OnMoveChangedHierarchy();
    internal virtual string CheckName(string name);
    internal abstract virtual void Validate();
}
[DefaultMemberAttribute("Item")]
[EditorBrowsableAttribute("1")]
[ObsoleteAttribute("For more information please see documentation at http://aka.ms/witclientom")]
public class Microsoft.TeamFoundation.WorkItemTracking.Client.QueryItem2Collection : object {
    private List`1<QueryItem2> m_items;
    private List`1<QueryItem2> m_addedItems;
    private List`1<QueryItem2> m_removedItems;
    [CompilerGeneratedAttribute]
private bool <NeedsSort>k__BackingField;
    [CompilerGeneratedAttribute]
private QueryFolder2 <Folder>k__BackingField;
    public QueryItem2 Item { get; }
    public QueryItem2 Item { get; }
    public int Count { get; }
    internal bool NeedsSort { get; internal set; }
    internal List`1<QueryItem2> RemovedItems { get; }
    internal List`1<QueryItem2> AddedItems { get; }
    private QueryFolder2 Folder { get; private set; }
    internal QueryItem2Collection(QueryFolder2 folder);
    public void Add(QueryItem2 item);
    public bool Contains(QueryItem2 item);
    public bool Contains(Guid id);
    public bool Contains(string name);
    public QueryItem2 get_Item(Guid id);
    public QueryItem2 get_Item(string name);
    public int get_Count();
    public QueryItem2 FindByName(string name);
    public QueryItem2 FindByGuid(Guid id);
    internal void AddInternal(QueryItem2 item, bool updateChangedLists);
    internal void DeleteInternal(QueryItem2 item, bool updateChangedLists);
    internal void AddInternal(QueryItem2 item);
    internal void Remove(QueryItem2 item);
    [CompilerGeneratedAttribute]
internal bool get_NeedsSort();
    [CompilerGeneratedAttribute]
internal void set_NeedsSort(bool value);
    internal List`1<QueryItem2> get_RemovedItems();
    internal List`1<QueryItem2> get_AddedItems();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    private sealed virtual override IEnumerator`1<QueryItem2> System.Collections.Generic.IEnumerable<Microsoft.TeamFoundation.WorkItemTracking.Client.QueryItem2>.GetEnumerator();
    [CompilerGeneratedAttribute]
private QueryFolder2 get_Folder();
    [CompilerGeneratedAttribute]
private void set_Folder(QueryFolder2 value);
    private IEnumerator`1<QueryItem2> GetEnumeratorImpl();
    private void UpdateChangedListsOnRemove(QueryItem2 item);
}
[ObsoleteAttribute("For more information please see documentation at http://aka.ms/witclientom")]
internal class Microsoft.TeamFoundation.WorkItemTracking.Client.QueryItemDataProviderRest : object {
    private WorkItemStore m_store;
    private Guid m_projectId;
    private WorkItemTrackingHttpClient m_httpClient;
    public QueryItemDataProviderRest(WorkItemStore store, Guid projectId);
    public sealed virtual IEnumerable`1<QueryItem2> GetRootItems();
    public sealed virtual IEnumerable`1<QueryItem2> GetChildren(Guid id);
    public sealed virtual IEnumerable`1<QueryItemInfo> GetQueryItems(Guid[] ids);
    public sealed virtual void SaveQueryItem(QueryItem2 item);
    private static QueryItem2 ConvertToQueryItem(QueryHierarchyItem item, QueryFolder2 parent);
}
[ObsoleteAttribute("For more information please see documentation at http://aka.ms/witclientom")]
internal class Microsoft.TeamFoundation.WorkItemTracking.Client.QueryItemDataProviderSoap : object {
    [CompilerGeneratedAttribute]
private WorkItemStore <Store>k__BackingField;
    [CompilerGeneratedAttribute]
private Guid <ProjectId>k__BackingField;
    private WorkItemStore Store { get; private set; }
    private Guid ProjectId { get; private set; }
    private Project Project { get; }
    public QueryItemDataProviderSoap(WorkItemStore store, Guid projectId);
    private sealed virtual override IEnumerable`1<QueryItem2> Microsoft.TeamFoundation.WorkItemTracking.Client.IQueryItemDataProvider.GetRootItems();
    private sealed virtual override IEnumerable`1<QueryItem2> Microsoft.TeamFoundation.WorkItemTracking.Client.IQueryItemDataProvider.GetChildren(Guid id);
    private sealed virtual override IEnumerable`1<QueryItemInfo> Microsoft.TeamFoundation.WorkItemTracking.Client.IQueryItemDataProvider.GetQueryItems(Guid[] ids);
    private sealed virtual override void Microsoft.TeamFoundation.WorkItemTracking.Client.IQueryItemDataProvider.SaveQueryItem(QueryItem2 item);
    [CompilerGeneratedAttribute]
private WorkItemStore get_Store();
    [CompilerGeneratedAttribute]
private void set_Store(WorkItemStore value);
    [CompilerGeneratedAttribute]
private Guid get_ProjectId();
    [CompilerGeneratedAttribute]
private void set_ProjectId(Guid value);
    private Project get_Project();
    private RowSetCollection GetUpdateData();
    private void UpdateQueries(QueryFolder2 rootFolder, RowSetCollection queriesDataSet);
    private QueryFolder2 ProcessQueries(QueryFolder2 rootFolder, Dictionary`2<Guid, QueryItem2> existingItemsByGuid, Dictionary`2<Guid, QueryItem2> unmatchedItems, RowSet queryData, bool isPublic);
    private void AddUpdateItem(string name, Guid id, Guid parentId, QueryItem2 existingItem, string queryText, bool fFolder, bool isPublic, IdentityDescriptor ownerDescriptor, Dictionary`2<Guid, QueryItem2> existingItemsByGuid, Dictionary`2<Guid, List`1<QueryItem2>> waitingForParentList);
    private QueryFolder2 CreateFolder(string name, QueryFolder2 parent, Guid id, bool isPublic, IdentityDescriptor ownerDescriptor, Dictionary`2<Guid, List`1<QueryItem2>> waitingForParentList, Dictionary`2<Guid, QueryItem2> existingItemsByGuid);
    private void PopulateGuidDictionary(QueryFolder2 folder, Dictionary`2<Guid, QueryItem2> existingQueryItemsByGuid);
    private void SaveToNewServer(IEnumerable`1<QueryItem2> items);
    private XmlDocument GenerateQueryItemsUpdatePackage(IEnumerable`1<QueryItem2> itemsToSave);
}
[ObsoleteAttribute("For more information please see documentation at http://aka.ms/witclientom")]
internal class Microsoft.TeamFoundation.WorkItemTracking.Client.QueryItemInfo : object {
    [CompilerGeneratedAttribute]
private QueryItem2 <QueryItem>k__BackingField;
    [CompilerGeneratedAttribute]
private string <QueryItemPath>k__BackingField;
    public QueryItem2 QueryItem { get; public set; }
    public string QueryItemPath { get; public set; }
    [CompilerGeneratedAttribute]
public QueryItem2 get_QueryItem();
    [CompilerGeneratedAttribute]
public void set_QueryItem(QueryItem2 value);
    [CompilerGeneratedAttribute]
public string get_QueryItemPath();
    [CompilerGeneratedAttribute]
public void set_QueryItemPath(string value);
}
[FlagsAttribute]
[ObsoleteAttribute("For more information please see documentation at http://aka.ms/witclientom")]
public enum Microsoft.TeamFoundation.WorkItemTracking.Client.QueryItemPermissions : Enum {
    public int value__;
    public static QueryItemPermissions None;
    public static QueryItemPermissions Read;
    public static QueryItemPermissions Contribute;
    public static QueryItemPermissions Delete;
    public static QueryItemPermissions ManagePermissions;
    public static QueryItemPermissions FullControl;
    public static QueryItemPermissions ReadContribute;
    public static QueryItemPermissions ReadContributeDelete;
    public static QueryItemPermissions ReadManage;
    public static QueryItemPermissions AllPermissions;
}
[ObsoleteAttribute("For more information please see documentation at http://aka.ms/witclientom")]
public enum Microsoft.TeamFoundation.WorkItemTracking.Client.QueryScope : Enum {
    public int value__;
    public static QueryScope Public;
    public static QueryScope Private;
}
[ObsoleteAttribute("For more information please see documentation at http://aka.ms/witclientom")]
public enum Microsoft.TeamFoundation.WorkItemTracking.Client.QueryType : Enum {
    public int value__;
    public static QueryType Invalid;
    public static QueryType List;
    public static QueryType OneHop;
    public static QueryType Tree;
}
[ObsoleteAttribute("For more information please see documentation at http://aka.ms/witclientom")]
public class Microsoft.TeamFoundation.WorkItemTracking.Client.ReadOnlyFieldException : ClientException {
    public ReadOnlyFieldException(Exception innerException);
    protected ReadOnlyFieldException(SerializationInfo info, StreamingContext context);
    public ReadOnlyFieldException(string message);
    public ReadOnlyFieldException(string message, Exception innerException);
}
[ObsoleteAttribute("For more information please see documentation at http://aka.ms/witclientom")]
public class Microsoft.TeamFoundation.WorkItemTracking.Client.RegisteredLinkType : object {
    private string m_name;
    public string Name { get; }
    internal RegisteredLinkType(string name);
    public string get_Name();
    public bool Equals(RegisteredLinkType type);
}
[DefaultMemberAttribute("Item")]
[ObsoleteAttribute("For more information please see documentation at http://aka.ms/witclientom")]
public class Microsoft.TeamFoundation.WorkItemTracking.Client.RegisteredLinkTypeCollection : ReadOnlyList {
    private ArrayList m_typeList;
    private WorkItemStore m_store;
    public int Count { get; }
    public RegisteredLinkType Item { get; }
    [ObsoleteAttribute("This method is obsolete, will be removed in RTM tree. use this[string name] instead")]
public RegisteredLinkType Item { get; }
    public RegisteredLinkType Item { get; }
    internal RegisteredLinkTypeCollection(WorkItemStore store);
    public virtual int get_Count();
    public RegisteredLinkType get_Item(int index);
    public RegisteredLinkType get_Item(RegisteredLinkType registeredType);
    public RegisteredLinkType get_Item(string name);
    public int IndexOf(RegisteredLinkType value);
    public bool Contains(RegisteredLinkType value);
    protected virtual object GetItem(int index);
}
[ObsoleteAttribute("For more information please see documentation at http://aka.ms/witclientom")]
public class Microsoft.TeamFoundation.WorkItemTracking.Client.RelatedLink : Link {
    private WorkItem m_item;
    private WorkItemLinkInfo m_fileInfo;
    private WorkItemLinkTypeEnd m_linkTypeEnd;
    private static RegisteredLinkType s_relatedLinkType;
    public RegisteredLinkType ArtifactLinkType { get; }
    public BaseLinkType BaseType { get; }
    public int RelatedWorkItemId { get; }
    public WorkItemLinkTypeEnd LinkTypeEnd { get; }
    public string Comment { get; public set; }
    public bool IsLocked { get; public set; }
    public bool IsNew { get; }
    public RelatedLink(WorkItemLinkTypeEnd linkTypeEnd, int relatedWorkItemId);
    public RelatedLink(int relatedWorkItemId);
    internal RelatedLink(WorkItem workItem, WorkItemLinkInfo li, WorkItemLinkTypeEnd linkTypeEnd);
    private static RelatedLink();
    public virtual RegisteredLinkType get_ArtifactLinkType();
    public virtual BaseLinkType get_BaseType();
    internal virtual LinkInfo GetLinkInfo();
    public int get_RelatedWorkItemId();
    public WorkItemLinkTypeEnd get_LinkTypeEnd();
    public virtual string get_Comment();
    public virtual void set_Comment(string value);
    public virtual bool get_IsLocked();
    public virtual void set_IsLocked(bool value);
    public virtual bool get_IsNew();
    internal virtual bool InternalEquals(Link l);
    internal virtual void InternalAdd(WorkItem workItem);
    internal virtual void InternalRemove(WorkItem workItem);
    internal virtual Link Clone(WorkItem target);
}
[ObsoleteAttribute("For more information please see documentation at http://aka.ms/witclientom")]
public class Microsoft.TeamFoundation.WorkItemTracking.Client.ReportingAttributes : object {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ReferenceName>k__BackingField;
    [CompilerGeneratedAttribute]
private ReportingType <Type>k__BackingField;
    public string Name { get; internal set; }
    public string ReferenceName { get; internal set; }
    public ReportingType Type { get; internal set; }
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
internal void set_Name(string value);
    [CompilerGeneratedAttribute]
public string get_ReferenceName();
    [CompilerGeneratedAttribute]
internal void set_ReferenceName(string value);
    [CompilerGeneratedAttribute]
public ReportingType get_Type();
    [CompilerGeneratedAttribute]
internal void set_Type(ReportingType value);
}
[ObsoleteAttribute("For more information please see documentation at http://aka.ms/witclientom")]
public enum Microsoft.TeamFoundation.WorkItemTracking.Client.ReportingType : Enum {
    public int value__;
    public static ReportingType None;
    public static ReportingType Measure;
    public static ReportingType Dimension;
    public static ReportingType DrillDownField;
}
[ObsoleteAttribute("For more information please see documentation at http://aka.ms/witclientom")]
public class Microsoft.TeamFoundation.WorkItemTracking.Client.RequestCancelledByUserException : ClientException {
    public RequestCancelledByUserException(Exception innerException);
    protected RequestCancelledByUserException(SerializationInfo info, StreamingContext context);
    public RequestCancelledByUserException(string message);
    public RequestCancelledByUserException(string message, Exception innerException);
}
[ObsoleteAttribute("For more information please see documentation at http://aka.ms/witclientom")]
public class Microsoft.TeamFoundation.WorkItemTracking.Client.RequestNotCancelableException : ClientException {
    public RequestNotCancelableException(Exception innerException);
    protected RequestNotCancelableException(SerializationInfo info, StreamingContext context);
    public RequestNotCancelableException(string message);
    public RequestNotCancelableException(string message, Exception innerException);
}
[DefaultMemberAttribute("Item")]
[ObsoleteAttribute("For more information please see documentation at http://aka.ms/witclientom")]
public class Microsoft.TeamFoundation.WorkItemTracking.Client.Revision : object {
    private WorkItem m_workitem;
    private FieldCollection m_fields;
    private AttachmentCollection m_attachments;
    private LinkCollection m_links;
    private int m_revision;
    private FieldDefinitionCollection m_defs;
    private bool m_accessDenied;
    private Dictionary`2<int, object> m_values;
    public WorkItem WorkItem { get; }
    public int Index { get; }
    public FieldCollection Fields { get; }
    public AttachmentCollection Attachments { get; }
    public LinkCollection Links { get; }
    public object Item { get; }
    internal bool IsAccessDenied { get; }
    private WorkItem Microsoft.TeamFoundation.WorkItemTracking.Client.IRevisionInternal.WorkItem { get; }
    private bool Microsoft.TeamFoundation.WorkItemTracking.Client.IRevisionInternal.IsReadOnly { get; }
    private int Microsoft.TeamFoundation.WorkItemTracking.Client.IRevisionInternal.Number { get; }
    internal Revision(WorkItem workitem, int index);
    internal Revision(FieldDefinitionCollection defs, int rev);
    public WorkItem get_WorkItem();
    public int get_Index();
    public FieldCollection get_Fields();
    public AttachmentCollection get_Attachments();
    public LinkCollection get_Links();
    public object get_Item(string name);
    public string GetTagLine();
    internal void StoreValue(int fieldId, object value);
    internal object GetStoredValue(int fieldId);
    internal bool HasValue(int fieldId);
    internal void DenyAccess();
    internal bool get_IsAccessDenied();
    private sealed virtual override WorkItem Microsoft.TeamFoundation.WorkItemTracking.Client.IRevisionInternal.get_WorkItem();
    private sealed virtual override void Microsoft.TeamFoundation.WorkItemTracking.Client.IRevisionInternal.SetFieldValue(FieldDefinition fd, object value);
    private sealed virtual override object Microsoft.TeamFoundation.WorkItemTracking.Client.IRevisionInternal.GetCurrentFieldValueWithServerDefault(FieldDefinition fd);
    private sealed virtual override object Microsoft.TeamFoundation.WorkItemTracking.Client.IRevisionInternal.GetCurrentFieldValue(FieldDefinition fd);
    private sealed virtual override object Microsoft.TeamFoundation.WorkItemTracking.Client.IRevisionInternal.GetOriginalFieldValue(FieldDefinition fd);
    private sealed virtual override bool Microsoft.TeamFoundation.WorkItemTracking.Client.IRevisionInternal.get_IsReadOnly();
    private sealed virtual override int Microsoft.TeamFoundation.WorkItemTracking.Client.IRevisionInternal.get_Number();
}
[DefaultMemberAttribute("Item")]
[ObsoleteAttribute("For more information please see documentation at http://aka.ms/witclientom")]
public class Microsoft.TeamFoundation.WorkItemTracking.Client.RevisionCollection : ReadOnlyList {
    private WorkItem m_workitem;
    private Revision[] m_revisions;
    public int Count { get; }
    public Revision Item { get; }
    internal RevisionCollection(WorkItem workitem);
    private void Ensure();
    private void Populate();
    internal void Refresh();
    public virtual int get_Count();
    public Revision get_Item(int index);
    public int IndexOf(Revision value);
    public bool Contains(Revision value);
    protected virtual object GetItem(int index);
}
[ObsoleteAttribute("For more information please see documentation at http://aka.ms/witclientom")]
internal class Microsoft.TeamFoundation.WorkItemTracking.Client.RevisionQuery : object {
    private PagingFieldReader m_reader;
    private Revision[] m_revs;
    private FieldDefinitionCollection m_defs;
    private int m_row;
    private bool m_denyAccess;
    public RevisionQuery(Query query, Int32[] ids, Int32[] revs);
    [IteratorStateMachineAttribute("Microsoft.TeamFoundation.WorkItemTracking.Client.RevisionQuery/<Execute>d__6")]
public IEnumerable`1<Revision> Execute();
    private Revision GetPagedRevision(int row);
    private static bool IsValidField(FieldDefinition fd);
    internal void DenyAccess();
    private sealed virtual override bool Microsoft.TeamFoundation.WorkItemTracking.Client.IFieldStore.HasValue(int row, int fieldId);
    private sealed virtual override void Microsoft.TeamFoundation.WorkItemTracking.Client.IFieldStore.StoreValue(int row, int fieldId, object value);
    private sealed virtual override object Microsoft.TeamFoundation.WorkItemTracking.Client.IFieldStore.GetStoredValue(int row, int fieldId);
    private sealed virtual override void Microsoft.TeamFoundation.WorkItemTracking.Client.IFieldStore.SetAccessDenied(int row);
    private sealed virtual override bool Microsoft.TeamFoundation.WorkItemTracking.Client.IFieldStore.IsAccessDenied(int row);
}
[FlagsAttribute]
[ObsoleteAttribute("For more information please see documentation at http://aka.ms/witclientom")]
public enum Microsoft.TeamFoundation.WorkItemTracking.Client.SaveFlags : Enum {
    public int value__;
    public static SaveFlags None;
    public static SaveFlags MergeLinks;
    public static SaveFlags MergeAll;
}
[ObsoleteAttribute("For more information please see documentation at http://aka.ms/witclientom")]
public abstract class Microsoft.TeamFoundation.WorkItemTracking.Client.Schemas : object {
    public static XmlSchema GetSchema(SchemaType type);
    public static IEnumerable`1<XmlSchema> GetSchemas(SchemaType type);
    internal static void InitSchemaSet(SchemaType type, XmlSchemaSet schemas);
}
[ObsoleteAttribute("For more information please see documentation at http://aka.ms/witclientom")]
public enum Microsoft.TeamFoundation.WorkItemTracking.Client.SchemaType : Enum {
    public int value__;
    public static SchemaType WorkItemType;
    public static SchemaType GlobalLists;
    public static SchemaType SharedTypes;
    public static SchemaType WorkItemLinkType;
    public static SchemaType Categories;
    public static SchemaType GlobalWorkflow;
}
[ObsoleteAttribute("For more information please see documentation at http://aka.ms/witclientom")]
public class Microsoft.TeamFoundation.WorkItemTracking.Client.Server : object {
    private WorkItemStore m_store;
    private WorkItemServer m_webService;
    private bool m_disposed;
    public Server(WorkItemStore store);
    internal XmlElement Update(string package);
    internal StoredQuery GetQuery(Guid guid);
    internal ArrayList GetQueries(int projectId, long rowVersion);
    internal String[] GetReferencingWorkitemUris(string artifactUri);
    internal static StoredQuery GetQueryFromRow(RowSet rowSet, int rowIndex, WorkItemStore store);
    public sealed virtual void Dispose();
    protected virtual void Dispose(bool disposing);
}
[ObsoleteAttribute("For more information please see documentation at http://aka.ms/witclientom")]
public class Microsoft.TeamFoundation.WorkItemTracking.Client.ServerInfo : object {
    private HashSet`1<string> m_features;
    public IEnumerable`1<string> Features { get; }
    internal static StringComparer StringComparer { get; }
    internal ServerInfo(WorkItemServerVersion ver);
    public IEnumerable`1<string> get_Features();
    public bool IsSupported(string feature);
    private void RemoveUnSupportedFeatuers(WorkItemServerVersion ver);
    private void AddSupportedFeatures(WorkItemServerVersion ver);
    internal static StringComparer get_StringComparer();
    internal void SetState(string feature, bool isEnabled);
}
[ObsoleteAttribute("For more information please see documentation at http://aka.ms/witclientom")]
public class Microsoft.TeamFoundation.WorkItemTracking.Client.ServerRejectedChangesException : ValidationException {
    public ServerRejectedChangesException(string message);
    public ServerRejectedChangesException(string message, Exception innerException);
    protected ServerRejectedChangesException(SerializationInfo info, StreamingContext context);
}
[EditorBrowsableAttribute("1")]
public class Microsoft.TeamFoundation.WorkItemTracking.Client.SimpleOM.FieldChangedEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
private string <ReferenceName>k__BackingField;
    [CompilerGeneratedAttribute]
private object <Value>k__BackingField;
    public string ReferenceName { get; public set; }
    public object Value { get; public set; }
    internal FieldChangedEventArgs(string referenceName, object value);
    [CompilerGeneratedAttribute]
public string get_ReferenceName();
    [CompilerGeneratedAttribute]
public void set_ReferenceName(string value);
    [CompilerGeneratedAttribute]
public object get_Value();
    [CompilerGeneratedAttribute]
public void set_Value(object value);
}
[EditorBrowsableAttribute("1")]
public class Microsoft.TeamFoundation.WorkItemTracking.Client.SimpleOM.FieldChangeEventHandler : MulticastDelegate {
    public FieldChangeEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, FieldChangedEventArgs args);
    public virtual IAsyncResult BeginInvoke(object sender, FieldChangedEventArgs args, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
[EditorBrowsableAttribute("1")]
public interface Microsoft.TeamFoundation.WorkItemTracking.Client.SimpleOM.IProjectMetadataProvider {
    public bool IsObsolete { get; }
    public abstract virtual Task`1<IReadOnlyDictionary`2<string, WorkItemType>> GetWorkItemTypes(TeamProjectReference project);
    public abstract virtual Task`1<IReadOnlyCollection`1<WorkItemTypeCategory>> GetWorkItemTypeCategories(TeamProjectReference project);
    public abstract virtual Task`1<IReadOnlyDictionary`2<string, WorkItemField>> GetFields(TeamProjectReference project);
    public abstract virtual Task`1<IReadOnlyDictionary`2<string, string>> GetIcons(TeamProjectReference project, IEnumerable`1<WorkItemType> types);
    public abstract virtual Task`1<TeamProjectReference> GetTeamProject(Guid projectId);
    public abstract virtual Task`1<TeamProjectReference> GetTeamProject(string projectName);
    public abstract virtual Task`1<ProcessType> GetProcessType(TeamProjectReference project);
    public abstract virtual string GetDefaultColor();
    public abstract virtual bool get_IsObsolete();
}
[EditorBrowsableAttribute("1")]
public interface Microsoft.TeamFoundation.WorkItemTracking.Client.SimpleOM.IWorkItem {
    public int Id { get; }
    public IEnumerable`1<string> Fields { get; }
    public bool IsDirty { get; }
    public bool IsSaving { get; }
    public Exception Error { get; }
    public IEnumerable`1<string> DirtyFields { get; }
    [CompilerGeneratedAttribute]
public abstract virtual void add_FieldChanged(FieldChangeEventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_FieldChanged(FieldChangeEventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_SaveStatusChanged(SaveStatusChangedEventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_SaveStatusChanged(SaveStatusChangedEventHandler value);
    public abstract virtual int get_Id();
    public abstract virtual object GetFieldValue(string referenceName, bool original);
    public abstract virtual bool HasField(string referenceName);
    public abstract virtual IEnumerable`1<string> get_Fields();
    public abstract virtual bool get_IsDirty();
    public abstract virtual bool get_IsSaving();
    public abstract virtual Exception get_Error();
    public abstract virtual void SetFieldValue(string referenceName, object value);
    public abstract virtual void ResetFieldValue(string referenceName);
    public abstract virtual void ResetAllFieldValues();
    public abstract virtual IEnumerable`1<string> get_DirtyFields();
}
[EditorBrowsableAttribute("1")]
public interface Microsoft.TeamFoundation.WorkItemTracking.Client.SimpleOM.IWorkItemClientService {
    public abstract virtual Task`1<IWorkItemResultCollection> FlatQuery(string projectName, string teamName, string wiql, Nullable`1<int> top, IEnumerable`1<string> additionalFields);
    public abstract virtual Task`1<IWorkItem> GetWorkItem(int id);
    public abstract virtual IWorkItemResultCollection GetResultCollection(IEnumerable`1<int> ids, IEnumerable`1<string> fieldNames);
    public abstract virtual Task`1<IWorkItem> SaveWorkItem(Guid projectId, IWorkItem workItem);
    public abstract virtual Task`1<IEnumerable`1<IWorkItem>> SaveWorkItems(Guid projectId, IEnumerable`1<IWorkItem> workItems);
    public abstract virtual Task`1<IWorkItem> CreateWorkItem(Guid projectId, string workItemType, Dictionary`2<string, object> fieldValues);
}
[EditorBrowsableAttribute("1")]
public interface Microsoft.TeamFoundation.WorkItemTracking.Client.SimpleOM.IWorkItemQueryHierarchyService {
    public abstract virtual Task`1<IEnumerable`1<QueryHierarchyItem>> GetRootItems(Guid projectId);
    public abstract virtual Task`1<IEnumerable`1<QueryHierarchyItem>> GetChildren(Guid projectId, Guid queryFolderId);
    public abstract virtual Task`1<IEnumerable`1<QueryHierarchyItem>> GetQueryItems(Guid projectId, IEnumerable`1<Guid> ids);
}
[EditorBrowsableAttribute("1")]
public interface Microsoft.TeamFoundation.WorkItemTracking.Client.SimpleOM.IWorkItemResultCollection {
    public int Count { get; }
    public IEnumerable`1<int> Ids { get; }
    public abstract virtual int get_Count();
    public abstract virtual IEnumerable`1<int> get_Ids();
    public abstract virtual Task`1<IWorkItem> GetItem(int index);
}
public interface Microsoft.TeamFoundation.WorkItemTracking.Client.SimpleOM.IWorkItemResultExt {
    public IEnumerable`1<int> SelectedWorkItemIds { get; }
    public IEnumerable`1<int> WorkItemIds { get; }
    public abstract virtual IEnumerable`1<int> get_SelectedWorkItemIds();
    public abstract virtual IEnumerable`1<int> get_WorkItemIds();
    public abstract virtual void AssignToCurrentUser(int id);
    public abstract virtual void TransitionToStateCategory(int id, WorkItemStateCategory category);
    public abstract virtual void SetFieldValue(int id, string referenceName, object value);
    public abstract virtual object GetFieldValue(int id, string referenceName);
    public abstract virtual Task`1<bool> Save(IEnumerable`1<int> ids);
}
internal interface Microsoft.TeamFoundation.WorkItemTracking.Client.SimpleOM.IXamlIconCache {
    public abstract virtual string Get(TfsTeamProjectCollection tpc, string name);
    public abstract virtual void Write(TfsTeamProjectCollection tpc, string name, string icon);
}
[EditorBrowsableAttribute("1")]
public class Microsoft.TeamFoundation.WorkItemTracking.Client.SimpleOM.PreferSoapSettingService : object {
    private bool m_isWitClientPreferSoap;
    private bool m_isQueryHierarchyPreferSoap;
    private bool m_isProjectMetadataPreferSoap;
    [CompilerGeneratedAttribute]
private EventHandler WitClientSettingChanged;
    [CompilerGeneratedAttribute]
private EventHandler QueryHierarchySettingChanged;
    [CompilerGeneratedAttribute]
private EventHandler ProjectMetadataSettingChanged;
    public bool WitClientPreferSoap { get; public set; }
    public bool QueryHierarchyPreferSoap { get; public set; }
    public bool ProjectMetadataPreferSoap { get; public set; }
    public sealed virtual void Initialize(TfsTeamProjectCollection projectCollection);
    public bool get_WitClientPreferSoap();
    public void set_WitClientPreferSoap(bool value);
    public bool get_QueryHierarchyPreferSoap();
    public void set_QueryHierarchyPreferSoap(bool value);
    public bool get_ProjectMetadataPreferSoap();
    public void set_ProjectMetadataPreferSoap(bool value);
    [CompilerGeneratedAttribute]
public void add_WitClientSettingChanged(EventHandler value);
    [CompilerGeneratedAttribute]
public void remove_WitClientSettingChanged(EventHandler value);
    [CompilerGeneratedAttribute]
public void add_QueryHierarchySettingChanged(EventHandler value);
    [CompilerGeneratedAttribute]
public void remove_QueryHierarchySettingChanged(EventHandler value);
    [CompilerGeneratedAttribute]
public void add_ProjectMetadataSettingChanged(EventHandler value);
    [CompilerGeneratedAttribute]
public void remove_ProjectMetadataSettingChanged(EventHandler value);
}
[EditorBrowsableAttribute("1")]
public class Microsoft.TeamFoundation.WorkItemTracking.Client.SimpleOM.ProjectMetadata : object {
    [CompilerGeneratedAttribute]
private TeamProjectReference <TeamProject>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyCollection`1<WorkItemTypeCategory> <TypeCategories>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyDictionary`2<string, WorkItemType> <WorkItemTypes>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyDictionary`2<string, WorkItemField> <Fields>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyDictionary`2<string, string> <Icons>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DefaultStateColor>k__BackingField;
    [CompilerGeneratedAttribute]
private ProcessType <ProcessType>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsObsolete>k__BackingField;
    private TeamProjectReference TeamProject { get; private set; }
    private IReadOnlyCollection`1<WorkItemTypeCategory> TypeCategories { get; private set; }
    private IReadOnlyDictionary`2<string, WorkItemType> WorkItemTypes { get; private set; }
    private IReadOnlyDictionary`2<string, WorkItemField> Fields { get; private set; }
    private IReadOnlyDictionary`2<string, string> Icons { get; private set; }
    public Guid ProjectId { get; }
    public string ProjectName { get; }
    public string DefaultStateColor { get; private set; }
    public ProcessType ProcessType { get; private set; }
    public bool IsObsolete { get; private set; }
    internal ProjectMetadata(TeamProjectReference project);
    [CompilerGeneratedAttribute]
private TeamProjectReference get_TeamProject();
    [CompilerGeneratedAttribute]
private void set_TeamProject(TeamProjectReference value);
    [CompilerGeneratedAttribute]
private IReadOnlyCollection`1<WorkItemTypeCategory> get_TypeCategories();
    [CompilerGeneratedAttribute]
private void set_TypeCategories(IReadOnlyCollection`1<WorkItemTypeCategory> value);
    [CompilerGeneratedAttribute]
private IReadOnlyDictionary`2<string, WorkItemType> get_WorkItemTypes();
    [CompilerGeneratedAttribute]
private void set_WorkItemTypes(IReadOnlyDictionary`2<string, WorkItemType> value);
    [CompilerGeneratedAttribute]
private IReadOnlyDictionary`2<string, WorkItemField> get_Fields();
    [CompilerGeneratedAttribute]
private void set_Fields(IReadOnlyDictionary`2<string, WorkItemField> value);
    [CompilerGeneratedAttribute]
private IReadOnlyDictionary`2<string, string> get_Icons();
    [CompilerGeneratedAttribute]
private void set_Icons(IReadOnlyDictionary`2<string, string> value);
    public Guid get_ProjectId();
    public string get_ProjectName();
    [CompilerGeneratedAttribute]
public string get_DefaultStateColor();
    [CompilerGeneratedAttribute]
private void set_DefaultStateColor(string value);
    [CompilerGeneratedAttribute]
public ProcessType get_ProcessType();
    [CompilerGeneratedAttribute]
private void set_ProcessType(ProcessType value);
    [CompilerGeneratedAttribute]
public virtual bool get_IsObsolete();
    [CompilerGeneratedAttribute]
private void set_IsObsolete(bool value);
    [AsyncStateMachineAttribute("Microsoft.TeamFoundation.WorkItemTracking.Client.SimpleOM.ProjectMetadata/<Create>d__38")]
internal static Task`1<ProjectMetadata> Create(TeamProjectReference project, IProjectMetadataProvider metadataProvider);
    [AsyncStateMachineAttribute("Microsoft.TeamFoundation.WorkItemTracking.Client.SimpleOM.ProjectMetadata/<Initialize>d__39")]
private Task Initialize(IProjectMetadataProvider metadataProvider);
    public virtual bool IsDoneState(string workItemTypeName, string stateName);
    public virtual IEnumerable`1<string> GetDoneStates(string workItemTypeName);
    public virtual IEnumerable`1<string> GetStatesByCategory(string workItemTypeName, WorkItemStateCategory stateCategory);
    public virtual WorkItemStateCategory GetStateCategory(string workItemTypeName, string stateName);
    public virtual IReadOnlyDictionary`2<string, StateInfo> GetStateInfo(string workItemTypeName);
    public virtual StateInfo GetStateInfo(string workItemTypeName, string stateName);
    public virtual string GetStateColor(string workItemTypeName, string stateName);
    public IEnumerable`1<StateInfo> GetStateTransitions(string workItemTypeName, string fromState);
    public virtual IReadOnlyDictionary`2<string, WorkItemType> GetWorkItemTypes();
    public virtual WorkItemType GetWorkItemType(string workItemTypeName);
    public virtual IEnumerable`1<string> GetWorkItemTypeNames();
    public virtual IEnumerable`1<string> GetWorkItemTypeNames(string categoryRefName);
    public virtual bool IsTypeInCategory(string typeName, string categoryRefName);
    public virtual string GetDefaultTypeNameFromCategory(string categoryRefName);
    public virtual WorkItemTypeCategory GetWorkItemTypeCategory(string categoryRefName);
    public virtual IReadOnlyCollection`1<WorkItemTypeCategory> GetWorkItemTypeCategories();
    public virtual WorkItemField GetField(string fieldName);
    public virtual IReadOnlyDictionary`2<string, WorkItemField> GetFields();
    public virtual IReadOnlyDictionary`2<string, string> GetIcons();
}
internal abstract class Microsoft.TeamFoundation.WorkItemTracking.Client.SimpleOM.ProjectMetadataProviderBase : object {
    [CompilerGeneratedAttribute]
private TfsTeamProjectCollection <ProjectCollection>k__BackingField;
    protected static string DefaultColor;
    protected TfsTeamProjectCollection ProjectCollection { get; protected set; }
    private static ProjectMetadataProviderBase();
    [CompilerGeneratedAttribute]
protected TfsTeamProjectCollection get_ProjectCollection();
    [CompilerGeneratedAttribute]
protected void set_ProjectCollection(TfsTeamProjectCollection value);
    [AsyncStateMachineAttribute("Microsoft.TeamFoundation.WorkItemTracking.Client.SimpleOM.ProjectMetadataProviderBase/<GetTeamProject>d__5")]
public virtual Task`1<TeamProjectReference> GetTeamProject(string projectName);
    [AsyncStateMachineAttribute("Microsoft.TeamFoundation.WorkItemTracking.Client.SimpleOM.ProjectMetadataProviderBase/<GetTeamProject>d__6")]
public virtual Task`1<TeamProjectReference> GetTeamProject(Guid projectId);
    [AsyncStateMachineAttribute("Microsoft.TeamFoundation.WorkItemTracking.Client.SimpleOM.ProjectMetadataProviderBase/<GetProcessType>d__7")]
public virtual Task`1<ProcessType> GetProcessType(TeamProjectReference projectRef);
}
internal class Microsoft.TeamFoundation.WorkItemTracking.Client.SimpleOM.ProjectMetadataRestProvider : ProjectMetadataProviderBase {
    public bool IsObsolete { get; }
    public sealed virtual void Initialize(TfsTeamProjectCollection tpc);
    [AsyncStateMachineAttribute("Microsoft.TeamFoundation.WorkItemTracking.Client.SimpleOM.ProjectMetadataRestProvider/<GetWorkItemTypes>d__1")]
public virtual Task`1<IReadOnlyDictionary`2<string, WorkItemType>> GetWorkItemTypes(TeamProjectReference project);
    [AsyncStateMachineAttribute("Microsoft.TeamFoundation.WorkItemTracking.Client.SimpleOM.ProjectMetadataRestProvider/<GetWorkItemTypeCategories>d__2")]
public virtual Task`1<IReadOnlyCollection`1<WorkItemTypeCategory>> GetWorkItemTypeCategories(TeamProjectReference project);
    [AsyncStateMachineAttribute("Microsoft.TeamFoundation.WorkItemTracking.Client.SimpleOM.ProjectMetadataRestProvider/<GetFields>d__3")]
public virtual Task`1<IReadOnlyDictionary`2<string, WorkItemField>> GetFields(TeamProjectReference project);
    public virtual string GetDefaultColor();
    [AsyncStateMachineAttribute("Microsoft.TeamFoundation.WorkItemTracking.Client.SimpleOM.ProjectMetadataRestProvider/<GetIcons>d__5")]
public virtual Task`1<IReadOnlyDictionary`2<string, string>> GetIcons(TeamProjectReference project, IEnumerable`1<WorkItemType> types);
    [AsyncStateMachineAttribute("Microsoft.TeamFoundation.WorkItemTracking.Client.SimpleOM.ProjectMetadataRestProvider/<GetStateCatergoriesAndColors>d__6")]
internal virtual Task`1<bool> GetStateCatergoriesAndColors(TeamProjectReference project, IList`1<WorkItemType> types);
    public virtual bool get_IsObsolete();
}
[EditorBrowsableAttribute("1")]
public class Microsoft.TeamFoundation.WorkItemTracking.Client.SimpleOM.ProjectMetadataService : object {
    private ConcurrentDictionary`2<Guid, Lazy`1<Task`1<ProjectMetadata>>> m_metadataById;
    private ConcurrentDictionary`2<string, Lazy`1<Task`1<ProjectMetadata>>> m_metadataByName;
    private TfsTeamProjectCollection m_tfsTeamProjectCollection;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <RestApiSupported>k__BackingField;
    private static Version s_requiredRestApiVersion;
    private Nullable`1<bool> RestApiSupported { get; private set; }
    private static ProjectMetadataService();
    [CompilerGeneratedAttribute]
private Nullable`1<bool> get_RestApiSupported();
    [CompilerGeneratedAttribute]
private void set_RestApiSupported(Nullable`1<bool> value);
    public sealed virtual void Initialize(TfsTeamProjectCollection tpc);
    [AsyncStateMachineAttribute("Microsoft.TeamFoundation.WorkItemTracking.Client.SimpleOM.ProjectMetadataService/<GetMetadataProvider>d__8")]
private Task`1<IProjectMetadataProvider> GetMetadataProvider();
    private void SettingsService_SettingChanged(object sender, EventArgs e);
    [AsyncStateMachineAttribute("Microsoft.TeamFoundation.WorkItemTracking.Client.SimpleOM.ProjectMetadataService/<GetAsync>d__10")]
public virtual Task`1<ProjectMetadata> GetAsync(Guid projectId);
    [AsyncStateMachineAttribute("Microsoft.TeamFoundation.WorkItemTracking.Client.SimpleOM.ProjectMetadataService/<GetAsync>d__11")]
public virtual Task`1<ProjectMetadata> GetAsync(string projectName);
    public virtual ProjectMetadata Get(Guid projectId);
    public virtual ProjectMetadata Get(string projectName);
    public bool Has(Guid projectId);
    public bool Has(string projectName);
    public void Clear(Guid projectId);
    public void Clear(string projectName);
    public void Clear();
    [AsyncStateMachineAttribute("Microsoft.TeamFoundation.WorkItemTracking.Client.SimpleOM.ProjectMetadataService/<CanUseRestApi>d__20")]
private Task`1<bool> CanUseRestApi();
}
internal class Microsoft.TeamFoundation.WorkItemTracking.Client.SimpleOM.ProjectMetadataSoapProvider : ProjectMetadataProviderBase {
    public bool IsObsolete { get; }
    public sealed virtual void Initialize(TfsTeamProjectCollection tpc);
    [AsyncStateMachineAttribute("Microsoft.TeamFoundation.WorkItemTracking.Client.SimpleOM.ProjectMetadataSoapProvider/<GetWorkItemTypes>d__1")]
public virtual Task`1<IReadOnlyDictionary`2<string, WorkItemType>> GetWorkItemTypes(TeamProjectReference project);
    [AsyncStateMachineAttribute("Microsoft.TeamFoundation.WorkItemTracking.Client.SimpleOM.ProjectMetadataSoapProvider/<GetWorkItemTypeCategories>d__2")]
public virtual Task`1<IReadOnlyCollection`1<WorkItemTypeCategory>> GetWorkItemTypeCategories(TeamProjectReference project);
    [AsyncStateMachineAttribute("Microsoft.TeamFoundation.WorkItemTracking.Client.SimpleOM.ProjectMetadataSoapProvider/<GetFields>d__3")]
public virtual Task`1<IReadOnlyDictionary`2<string, WorkItemField>> GetFields(TeamProjectReference project);
    [AsyncStateMachineAttribute("Microsoft.TeamFoundation.WorkItemTracking.Client.SimpleOM.ProjectMetadataSoapProvider/<GetIcons>d__4")]
public virtual Task`1<IReadOnlyDictionary`2<string, string>> GetIcons(TeamProjectReference project, IEnumerable`1<WorkItemType> types);
    [AsyncStateMachineAttribute("Microsoft.TeamFoundation.WorkItemTracking.Client.SimpleOM.ProjectMetadataSoapProvider/<GetStateCatergoriesAndColors>d__5")]
internal virtual Task`1<IReadOnlyDictionary`2<string, IEnumerable`1<WorkItemStateColor>>> GetStateCatergoriesAndColors(TeamProjectReference project, ProjectProcessConfiguration processConfig);
    public virtual string GetDefaultColor();
    public virtual bool get_IsObsolete();
    private static string GetIconResource(string iconResourceName);
    private Task`1<Project> GetWitClientProject(Guid projectId);
    private Task`1<ProjectProcessConfiguration> GetProcessConfiguration(Guid projectId);
    private IReadOnlyCollection`1<CategoryConfiguration> GetAllCategoryConfigurationsWithStates(ProjectProcessConfiguration processConfig);
    private IDictionary`2<string, WorkItemStateTransition[]> CreateTransitions(WorkItemType wit);
}
internal class Microsoft.TeamFoundation.WorkItemTracking.Client.SimpleOM.RestResultCollectionAdapter : object {
    private Int32[] m_ids;
    private String[] m_columns;
    private TfsTeamProjectCollection m_tpc;
    private IWorkItem[] m_items;
    private Dictionary`2<int, int> m_workItemToIndex;
    private Boolean[] m_pagedIndexes;
    private static int MaxPageSize;
    private static int MaxUrlLength;
    public int Count { get; }
    public IEnumerable`1<int> Ids { get; }
    internal RestResultCollectionAdapter(TfsTeamProjectCollection tpc, IEnumerable`1<int> workItemIds, IEnumerable`1<string> columns);
    public sealed virtual int get_Count();
    public sealed virtual IEnumerable`1<int> get_Ids();
    [AsyncStateMachineAttribute("Microsoft.TeamFoundation.WorkItemTracking.Client.SimpleOM.RestResultCollectionAdapter/<GetItem>d__13")]
public sealed virtual Task`1<IWorkItem> GetItem(int index);
    private IEnumerable`1<int> GetNextPage(int index);
    private bool TryAdd(List`1<int> list, int id, Int32& curLen);
    [AsyncStateMachineAttribute("Microsoft.TeamFoundation.WorkItemTracking.Client.SimpleOM.RestResultCollectionAdapter/<PageItems>d__16")]
private Task`1<IEnumerable`1<IWorkItem>> PageItems(IEnumerable`1<int> ids);
}
[EditorBrowsableAttribute("1")]
public class Microsoft.TeamFoundation.WorkItemTracking.Client.SimpleOM.RestWiqlAdapterHelper : object {
    private ProjectMetadata m_projectMetadata;
    [CompilerGeneratedAttribute]
private CultureInfo <CultureInfo>k__BackingField;
    [CompilerGeneratedAttribute]
private TimeZone <TimeZone>k__BackingField;
    [CompilerGeneratedAttribute]
private string <UserDisplayName>k__BackingField;
    public Guid ProjectId { get; }
    public CultureInfo CultureInfo { get; private set; }
    public TimeZone TimeZone { get; private set; }
    public string UserDisplayName { get; private set; }
    public RestWiqlAdapterHelper(ProjectMetadata projectMetadata, CultureInfo cultureInfo, TimeZone timezone, string userDisplayName);
    public Guid get_ProjectId();
    [CompilerGeneratedAttribute]
public sealed virtual CultureInfo get_CultureInfo();
    [CompilerGeneratedAttribute]
private void set_CultureInfo(CultureInfo value);
    [CompilerGeneratedAttribute]
public sealed virtual TimeZone get_TimeZone();
    [CompilerGeneratedAttribute]
private void set_TimeZone(TimeZone value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_UserDisplayName();
    [CompilerGeneratedAttribute]
private void set_UserDisplayName(string value);
    public sealed virtual int GetTreeID(string path, TreeStructureType type);
    public sealed virtual bool IsSupported(string feature);
    public sealed virtual object FindField(string name, string prefix, object tableTag);
    public sealed virtual int GetFieldId(object fieldTag);
    public sealed virtual string GetFieldReferenceName(object fieldTag);
    public sealed virtual string GetFieldFriendlyName(object fieldTag);
    public sealed virtual bool GetFieldIsQueryable(object fieldTag);
    public sealed virtual bool GetFieldCanSortBy(object fieldTag);
    public sealed virtual InternalFieldUsages GetFieldUsage(object fieldTag);
    public sealed virtual InternalFieldType GetFieldType(object fieldTag);
    public sealed virtual Type GetFieldSystemType(object fieldTag);
    public sealed virtual bool GetFieldSupportsTextQuery(object fieldTag);
    public sealed virtual bool GetFieldIsLongText(object fieldTag);
    public sealed virtual string GetFieldFriendlyName(string fieldName);
    public sealed virtual int GetFieldPsFieldType(string fieldName);
    public sealed virtual InternalFieldType GetFieldType(string fieldName);
    public sealed virtual bool HasLinkType(string linkTypeName);
    public sealed virtual int GetLinkTypeId(string linkTypeName);
    public sealed virtual bool GetLinkTypeIsForward(string linkTypeName);
    public sealed virtual int GetLinkTypeTopology(string linkTypeName);
    public sealed virtual IEnumerable`1<int> GetAllLinkTypeIds();
    public sealed virtual List`1<object> GetSortFieldList(NodeSelect nodeSelect);
    public sealed virtual List`1<object> GetDisplayFieldList(NodeSelect nodeSelect);
    public sealed virtual void SetDisplayFieldList(NodeSelect nodeSelect, IEnumerable`1<object> list);
    public sealed virtual void SetSortFieldList(NodeSelect nodeSelect, IEnumerable`1<object> list);
    public object GetVariableValue(string name);
    public sealed virtual bool IsSupportedMacro(string name);
    private WorkItemField GetField(string name);
    public sealed virtual DataType GetVariableType(string name);
    public sealed virtual object GetVariableValue(string name, NodeParameters parameters);
    public sealed virtual bool RewriteCondition(NodeCondition condition, Node& rewritten);
    public sealed virtual bool DoesMacroExtensionHandleOffset(string macroName);
    public sealed virtual void ValidateParameters(string macroName, NodeTableName tableContext, NodeFieldName fieldContext, NodeParameters parameters);
}
internal class Microsoft.TeamFoundation.WorkItemTracking.Client.SimpleOM.RestWorkItemAdapter : WorkItemAdapterBase {
    private WorkItem m_workItem;
    public int Id { get; }
    public IEnumerable`1<string> Fields { get; }
    internal RestWorkItemAdapter(WorkItem wi);
    internal void TakeUpdate(WorkItem wi);
    public sealed virtual int get_Id();
    public sealed virtual IEnumerable`1<string> get_Fields();
    public virtual object GetFieldValue(string referenceName, bool originalValue);
    public sealed virtual bool HasField(string referenceName);
    public sealed virtual void ResetFieldValue(string referenceName);
    public sealed virtual void ResetAllFieldValues();
    public sealed virtual void SetFieldValue(string referenceName, object value);
}
[EditorBrowsableAttribute("1")]
public enum Microsoft.TeamFoundation.WorkItemTracking.Client.SimpleOM.SaveEventType : Enum {
    public int value__;
    public static SaveEventType PreSave;
    public static SaveEventType Saved;
    public static SaveEventType Error;
}
[EditorBrowsableAttribute("1")]
public class Microsoft.TeamFoundation.WorkItemTracking.Client.SimpleOM.SaveStatusChangedEventHandler : MulticastDelegate {
    public SaveStatusChangedEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, SaveStatusEventArgs args);
    public virtual IAsyncResult BeginInvoke(object sender, SaveStatusEventArgs args, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
[EditorBrowsableAttribute("1")]
public class Microsoft.TeamFoundation.WorkItemTracking.Client.SimpleOM.SaveStatusEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
private SaveEventType <EventType>k__BackingField;
    [CompilerGeneratedAttribute]
private Exception <Error>k__BackingField;
    public SaveEventType EventType { get; public set; }
    public Exception Error { get; public set; }
    internal SaveStatusEventArgs(SaveEventType saveEventType, Exception exception);
    [CompilerGeneratedAttribute]
public SaveEventType get_EventType();
    [CompilerGeneratedAttribute]
public void set_EventType(SaveEventType value);
    [CompilerGeneratedAttribute]
public Exception get_Error();
    [CompilerGeneratedAttribute]
public void set_Error(Exception value);
}
internal class Microsoft.TeamFoundation.WorkItemTracking.Client.SimpleOM.SoapClientResultCollectionAdapter : object {
    private WorkItemCollection m_collection;
    [CompilerGeneratedAttribute]
private int <Count>k__BackingField;
    public int Count { get; private set; }
    public IEnumerable`1<int> Ids { get; }
    public SoapClientResultCollectionAdapter(WorkItemCollection collection, Nullable`1<int> top);
    [CompilerGeneratedAttribute]
public sealed virtual int get_Count();
    [CompilerGeneratedAttribute]
private void set_Count(int value);
    public sealed virtual IEnumerable`1<int> get_Ids();
    [AsyncStateMachineAttribute("Microsoft.TeamFoundation.WorkItemTracking.Client.SimpleOM.SoapClientResultCollectionAdapter/<GetItem>d__8")]
public sealed virtual Task`1<IWorkItem> GetItem(int index);
}
internal class Microsoft.TeamFoundation.WorkItemTracking.Client.SimpleOM.SoapWorkItemAdapter : WorkItemAdapterBase {
    private WorkItem m_workItem;
    private List`1<string> m_orderedKeys;
    public int Id { get; }
    public IEnumerable`1<string> Fields { get; }
    public SoapWorkItemAdapter(WorkItem workItem);
    public sealed virtual int get_Id();
    public sealed virtual IEnumerable`1<string> get_Fields();
    public virtual object GetFieldValue(string referenceName, bool originalValue);
    public sealed virtual bool HasField(string referenceName);
    public sealed virtual void ResetFieldValue(string referenceName);
    public sealed virtual void ResetAllFieldValues();
    public sealed virtual void SetFieldValue(string referenceName, object value);
    internal void ApplyChanges();
    internal WorkItem GetInnerWrokItem();
    internal void CompleteUpdate();
}
[EditorBrowsableAttribute("1")]
public class Microsoft.TeamFoundation.WorkItemTracking.Client.SimpleOM.StateInfo : object {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Color>k__BackingField;
    [CompilerGeneratedAttribute]
private WorkItemStateCategory <Category>k__BackingField;
    public string Name { get; private set; }
    public string Color { get; private set; }
    public WorkItemStateCategory Category { get; private set; }
    public StateInfo(string state, string color, WorkItemStateCategory category);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
private void set_Name(string value);
    [CompilerGeneratedAttribute]
public string get_Color();
    [CompilerGeneratedAttribute]
private void set_Color(string value);
    [CompilerGeneratedAttribute]
public WorkItemStateCategory get_Category();
    [CompilerGeneratedAttribute]
private void set_Category(WorkItemStateCategory value);
    public virtual string ToString();
}
internal static class Microsoft.TeamFoundation.WorkItemTracking.Client.SimpleOM.TypeConverters : object {
    private static Dictionary`2<string, WorkItemStateCategory> s_stateMapping;
    private static Dictionary`2<StateTypeEnum, string> s_stateEnumMapping;
    private static TypeConverters();
    public static InternalFieldType GetFieldType(FieldType fieldType);
    public static Type GetFieldSystemType(FieldType fieldType);
    public static FieldType GetWebApiFieldType(FieldType fieldType);
    public static string TranslateStateTypeToString(StateTypeEnum stateTypeEnum);
    public static WorkItemStateCategory TranslateStateTypeStringToCategory(string stateType);
    public static FieldUsage GetWebApiFieldUsage(FieldUsages fieldUsage);
    public static TeamProjectReference ConvertProjectInfoToTeamProjectReference(ProjectInfo project);
}
internal abstract class Microsoft.TeamFoundation.WorkItemTracking.Client.SimpleOM.WorkItemAdapterBase : object {
    [CompilerGeneratedAttribute]
private IDictionary`2<string, object> <Updates>k__BackingField;
    [CompilerGeneratedAttribute]
private FieldChangeEventHandler FieldChanged;
    [CompilerGeneratedAttribute]
private SaveStatusChangedEventHandler SaveStatusChanged;
    [CompilerGeneratedAttribute]
private bool <IsSaving>k__BackingField;
    [CompilerGeneratedAttribute]
private Exception <Error>k__BackingField;
    protected IDictionary`2<string, object> Updates { get; }
    public bool IsSaving { get; private set; }
    public Exception Error { get; private set; }
    public bool IsDirty { get; }
    public IEnumerable`1<string> DirtyFields { get; }
    [CompilerGeneratedAttribute]
protected IDictionary`2<string, object> get_Updates();
    [CompilerGeneratedAttribute]
public sealed virtual void add_FieldChanged(FieldChangeEventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_FieldChanged(FieldChangeEventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_SaveStatusChanged(SaveStatusChangedEventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_SaveStatusChanged(SaveStatusChangedEventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_IsSaving();
    [CompilerGeneratedAttribute]
private void set_IsSaving(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual Exception get_Error();
    [CompilerGeneratedAttribute]
private void set_Error(Exception value);
    public sealed virtual bool get_IsDirty();
    public sealed virtual IEnumerable`1<string> get_DirtyFields();
    public abstract virtual object GetFieldValue(string referenceName, bool originalValue);
    internal void SetSaveState(SaveEventType eventType, Exception error);
    protected void FireFieldChanged(string referenceName);
    protected void FireSaveStatusChanged(SaveEventType eventType, Exception error);
    protected bool AreValuesEqual(object a, object b);
}
[EditorBrowsableAttribute("1")]
public class Microsoft.TeamFoundation.WorkItemTracking.Client.SimpleOM.WorkItemClientService : object {
    private TfsTeamProjectCollection m_tfsTeamProjectCollection;
    private bool m_useRestApi;
    private IWorkItemClientService CurrentService { get; }
    public sealed virtual void Initialize(TfsTeamProjectCollection tpc);
    private IWorkItemClientService get_CurrentService();
    public virtual Task`1<IWorkItemResultCollection> FlatQuery(string projectName, string teamName, string wiql, Nullable`1<int> top, IEnumerable`1<string> additionalFields);
    public sealed virtual Task`1<IWorkItem> GetWorkItem(int id);
    public sealed virtual IWorkItemResultCollection GetResultCollection(IEnumerable`1<int> ids, IEnumerable`1<string> fieldNames);
    public sealed virtual Task`1<IWorkItem> SaveWorkItem(Guid projectId, IWorkItem workItem);
    public sealed virtual Task`1<IEnumerable`1<IWorkItem>> SaveWorkItems(Guid projectId, IEnumerable`1<IWorkItem> workItems);
    public sealed virtual Task`1<IWorkItem> CreateWorkItem(Guid projectId, string workItemType, Dictionary`2<string, object> fieldValues);
    protected internal virtual bool UseRestApi(TfsTeamProjectCollection tpc);
}
[ExtensionAttribute]
[EditorBrowsableAttribute("1")]
public static class Microsoft.TeamFoundation.WorkItemTracking.Client.SimpleOM.WorkItemExtensions : object {
    [ExtensionAttribute]
public static IdentityRef GetIdentityRefFromField(IWorkItem workItem, string fieldName);
}
[EditorBrowsableAttribute("1")]
public class Microsoft.TeamFoundation.WorkItemTracking.Client.SimpleOM.WorkItemQueryHierarchyService : object {
    private static Version s_requiredRestApiVersion;
    [CompilerGeneratedAttribute]
private TfsTeamProjectCollection <Collection>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <RestApiSupported>k__BackingField;
    private TfsTeamProjectCollection Collection { get; private set; }
    private Nullable`1<bool> RestApiSupported { get; private set; }
    private static WorkItemQueryHierarchyService();
    [CompilerGeneratedAttribute]
private TfsTeamProjectCollection get_Collection();
    [CompilerGeneratedAttribute]
private void set_Collection(TfsTeamProjectCollection value);
    [CompilerGeneratedAttribute]
private Nullable`1<bool> get_RestApiSupported();
    [CompilerGeneratedAttribute]
private void set_RestApiSupported(Nullable`1<bool> value);
    public sealed virtual void Initialize(TfsTeamProjectCollection tpc);
    [AsyncStateMachineAttribute("Microsoft.TeamFoundation.WorkItemTracking.Client.SimpleOM.WorkItemQueryHierarchyService/<GetRootItems>d__10")]
public sealed virtual Task`1<IEnumerable`1<QueryHierarchyItem>> GetRootItems(Guid projectId);
    [AsyncStateMachineAttribute("Microsoft.TeamFoundation.WorkItemTracking.Client.SimpleOM.WorkItemQueryHierarchyService/<GetChildren>d__11")]
public sealed virtual Task`1<IEnumerable`1<QueryHierarchyItem>> GetChildren(Guid projectId, Guid queryFolderId);
    [AsyncStateMachineAttribute("Microsoft.TeamFoundation.WorkItemTracking.Client.SimpleOM.WorkItemQueryHierarchyService/<GetQueryItems>d__12")]
public sealed virtual Task`1<IEnumerable`1<QueryHierarchyItem>> GetQueryItems(Guid projectId, IEnumerable`1<Guid> ids);
    [AsyncStateMachineAttribute("Microsoft.TeamFoundation.WorkItemTracking.Client.SimpleOM.WorkItemQueryHierarchyService/<GetProvider>d__13")]
internal Task`1<IWorkItemQueryHierarchyService> GetProvider();
    [AsyncStateMachineAttribute("Microsoft.TeamFoundation.WorkItemTracking.Client.SimpleOM.WorkItemQueryHierarchyService/<UseRestApi>d__14")]
internal Task`1<bool> UseRestApi();
}
[EditorBrowsableAttribute("1")]
internal class Microsoft.TeamFoundation.WorkItemTracking.Client.SimpleOM.WorkItemRestClientService : object {
    private TfsTeamProjectCollection m_tpc;
    public sealed virtual void Initialize(TfsTeamProjectCollection tpc);
    [AsyncStateMachineAttribute("Microsoft.TeamFoundation.WorkItemTracking.Client.SimpleOM.WorkItemRestClientService/<FlatQuery>d__2")]
public sealed virtual Task`1<IWorkItemResultCollection> FlatQuery(string projectName, string teamName, string wiql, Nullable`1<int> top, IEnumerable`1<string> additionalFields);
    [AsyncStateMachineAttribute("Microsoft.TeamFoundation.WorkItemTracking.Client.SimpleOM.WorkItemRestClientService/<GetWorkItem>d__3")]
public sealed virtual Task`1<IWorkItem> GetWorkItem(int id);
    public sealed virtual IWorkItemResultCollection GetResultCollection(IEnumerable`1<int> ids, IEnumerable`1<string> fieldNames);
    [AsyncStateMachineAttribute("Microsoft.TeamFoundation.WorkItemTracking.Client.SimpleOM.WorkItemRestClientService/<SaveWorkItem>d__5")]
public sealed virtual Task`1<IWorkItem> SaveWorkItem(Guid projectId, IWorkItem workItem);
    [AsyncStateMachineAttribute("Microsoft.TeamFoundation.WorkItemTracking.Client.SimpleOM.WorkItemRestClientService/<SaveWorkItems>d__6")]
public sealed virtual Task`1<IEnumerable`1<IWorkItem>> SaveWorkItems(Guid projectId, IEnumerable`1<IWorkItem> workItems);
    [AsyncStateMachineAttribute("Microsoft.TeamFoundation.WorkItemTracking.Client.SimpleOM.WorkItemRestClientService/<CreateWorkItem>d__7")]
public sealed virtual Task`1<IWorkItem> CreateWorkItem(Guid projectId, string workItemType, Dictionary`2<string, object> fieldValues);
}
internal class Microsoft.TeamFoundation.WorkItemTracking.Client.SimpleOM.WorkItemRestQueryHierarchyService : object {
    [CompilerGeneratedAttribute]
private TfsTeamProjectCollection <Collection>k__BackingField;
    private TfsTeamProjectCollection Collection { get; private set; }
    [CompilerGeneratedAttribute]
private TfsTeamProjectCollection get_Collection();
    [CompilerGeneratedAttribute]
private void set_Collection(TfsTeamProjectCollection value);
    public sealed virtual void Initialize(TfsTeamProjectCollection projectCollection);
    [AsyncStateMachineAttribute("Microsoft.TeamFoundation.WorkItemTracking.Client.SimpleOM.WorkItemRestQueryHierarchyService/<GetRootItems>d__5")]
public sealed virtual Task`1<IEnumerable`1<QueryHierarchyItem>> GetRootItems(Guid projectId);
    [AsyncStateMachineAttribute("Microsoft.TeamFoundation.WorkItemTracking.Client.SimpleOM.WorkItemRestQueryHierarchyService/<GetChildren>d__6")]
public sealed virtual Task`1<IEnumerable`1<QueryHierarchyItem>> GetChildren(Guid projectId, Guid queryFolderId);
    [AsyncStateMachineAttribute("Microsoft.TeamFoundation.WorkItemTracking.Client.SimpleOM.WorkItemRestQueryHierarchyService/<GetQueryItems>d__7")]
public sealed virtual Task`1<IEnumerable`1<QueryHierarchyItem>> GetQueryItems(Guid projectId, IEnumerable`1<Guid> ids);
    private IEnumerable`1<QueryHierarchyItem> FilterProperties(IEnumerable`1<QueryHierarchyItem> items);
    private QueryHierarchyItem FilterProperties(QueryHierarchyItem item);
    [CompilerGeneratedAttribute]
private QueryHierarchyItem <FilterProperties>b__8_0(QueryHierarchyItem i);
}
[EditorBrowsableAttribute("1")]
internal class Microsoft.TeamFoundation.WorkItemTracking.Client.SimpleOM.WorkItemSoapClientService : object {
    private TfsTeamProjectCollection m_tpc;
    public sealed virtual void Initialize(TfsTeamProjectCollection tpc);
    [AsyncStateMachineAttribute("Microsoft.TeamFoundation.WorkItemTracking.Client.SimpleOM.WorkItemSoapClientService/<FlatQuery>d__2")]
public sealed virtual Task`1<IWorkItemResultCollection> FlatQuery(string projectName, string teamName, string wiql, Nullable`1<int> top, IEnumerable`1<string> additionalFields);
    [AsyncStateMachineAttribute("Microsoft.TeamFoundation.WorkItemTracking.Client.SimpleOM.WorkItemSoapClientService/<GetWorkItem>d__3")]
public sealed virtual Task`1<IWorkItem> GetWorkItem(int id);
    public sealed virtual IWorkItemResultCollection GetResultCollection(IEnumerable`1<int> ids, IEnumerable`1<string> fieldNames);
    [AsyncStateMachineAttribute("Microsoft.TeamFoundation.WorkItemTracking.Client.SimpleOM.WorkItemSoapClientService/<SaveWorkItem>d__5")]
public sealed virtual Task`1<IWorkItem> SaveWorkItem(Guid projectId, IWorkItem workItem);
    public sealed virtual Task`1<IEnumerable`1<IWorkItem>> SaveWorkItems(Guid projectId, IEnumerable`1<IWorkItem> workItems);
    private IEnumerable`1<IWorkItem> SaveWorkItemsInternal(IEnumerable`1<IWorkItem> workItems);
    [AsyncStateMachineAttribute("Microsoft.TeamFoundation.WorkItemTracking.Client.SimpleOM.WorkItemSoapClientService/<CreateWorkItem>d__8")]
public sealed virtual Task`1<IWorkItem> CreateWorkItem(Guid projectId, string workItemType, Dictionary`2<string, object> fieldValues);
}
internal class Microsoft.TeamFoundation.WorkItemTracking.Client.SimpleOM.WorkItemSoapQueryHierarchyService : object {
    [CompilerGeneratedAttribute]
private TfsTeamProjectCollection <Collection>k__BackingField;
    private TfsTeamProjectCollection Collection { get; private set; }
    [CompilerGeneratedAttribute]
private TfsTeamProjectCollection get_Collection();
    [CompilerGeneratedAttribute]
private void set_Collection(TfsTeamProjectCollection value);
    public sealed virtual void Initialize(TfsTeamProjectCollection projectCollection);
    [AsyncStateMachineAttribute("Microsoft.TeamFoundation.WorkItemTracking.Client.SimpleOM.WorkItemSoapQueryHierarchyService/<GetRootItems>d__5")]
public sealed virtual Task`1<IEnumerable`1<QueryHierarchyItem>> GetRootItems(Guid projectId);
    [AsyncStateMachineAttribute("Microsoft.TeamFoundation.WorkItemTracking.Client.SimpleOM.WorkItemSoapQueryHierarchyService/<GetChildren>d__6")]
public sealed virtual Task`1<IEnumerable`1<QueryHierarchyItem>> GetChildren(Guid projectId, Guid queryFolderId);
    [AsyncStateMachineAttribute("Microsoft.TeamFoundation.WorkItemTracking.Client.SimpleOM.WorkItemSoapQueryHierarchyService/<GetQueryItems>d__7")]
public sealed virtual Task`1<IEnumerable`1<QueryHierarchyItem>> GetQueryItems(Guid projectId, IEnumerable`1<Guid> ids);
    [AsyncStateMachineAttribute("Microsoft.TeamFoundation.WorkItemTracking.Client.SimpleOM.WorkItemSoapQueryHierarchyService/<GetHierarchy>d__8")]
private Task`1<QueryHierarchy2> GetHierarchy(Guid projectId);
    private QueryHierarchyItem ConvertToQueryHierarchyItem(QueryItem2 item);
    private Nullable`1<QueryType> ConvertQueryType(Nullable`1<QueryType> queryType);
    [CompilerGeneratedAttribute]
private QueryHierarchyItem <GetRootItems>b__5_0(QueryItem2 i);
    [CompilerGeneratedAttribute]
private QueryHierarchyItem <GetChildren>b__6_0(QueryItem2 i);
    [CompilerGeneratedAttribute]
private QueryHierarchyItem <GetQueryItems>b__7_0(QueryItem2 i);
    [CompilerGeneratedAttribute]
private QueryHierarchyItem <ConvertToQueryHierarchyItem>b__9_0(QueryItem2 c);
}
[EditorBrowsableAttribute("1")]
public enum Microsoft.TeamFoundation.WorkItemTracking.Client.SimpleOM.WorkItemStateCategory : Enum {
    public int value__;
    public static WorkItemStateCategory Unknown;
    public static WorkItemStateCategory Proposed;
    public static WorkItemStateCategory InProgress;
    public static WorkItemStateCategory Resolved;
    public static WorkItemStateCategory Completed;
    public static WorkItemStateCategory Removed;
}
[EditorBrowsableAttribute("1")]
public class Microsoft.TeamFoundation.WorkItemTracking.Client.SimpleOM.XamlColorHelper : object {
    private static XamlColorHelper s_instance;
    private static string PathElementName;
    private static string FillAttributeName;
    public static XamlColorHelper Instance { get; public set; }
    public static XamlColorHelper get_Instance();
    public static void set_Instance(XamlColorHelper value);
    public static string ApplyColorToXamlIcon(string iconText, string color);
    public virtual string GetColorWithContrast(string color, string background, double requiredContrast);
    private static double Luminance(Int32[] rgbValues);
    public static Int32[] ConvertToRGBArray(string color);
}
internal class Microsoft.TeamFoundation.WorkItemTracking.Client.SimpleOM.XamlIconCache : object {
    private static string CacheFolder;
    private static int expirationTimeoutInDays;
    private static IXamlIconCache s_instance;
    private static object s_lock;
    public static IXamlIconCache Instance { get; public set; }
    private static XamlIconCache();
    public static IXamlIconCache get_Instance();
    public static void set_Instance(IXamlIconCache value);
    public sealed virtual string Get(TfsTeamProjectCollection tpc, string name);
    public sealed virtual void Write(TfsTeamProjectCollection tpc, string name, string icon);
    private static string EnsureCacheFolder(TfsTeamProjectCollection tpc);
    private static string MakeCacheFileName(string name);
}
[ObsoleteAttribute("For more information please see documentation at http://aka.ms/witclientom")]
public class Microsoft.TeamFoundation.WorkItemTracking.Client.SortField : object {
    private FieldDefinition m_fd;
    private SortType m_sortType;
    public FieldDefinition FieldDefinition { get; }
    public SortType SortType { get; }
    public SortField(FieldDefinition fd, SortType sortType);
    public SortField(WorkItemStore store, string name, SortType sortType);
    public FieldDefinition get_FieldDefinition();
    public SortType get_SortType();
}
[DefaultMemberAttribute("Item")]
[ObsoleteAttribute("For more information please see documentation at http://aka.ms/witclientom")]
public class Microsoft.TeamFoundation.WorkItemTracking.Client.SortFieldList : OrderedVariableSizeList {
    private WorkItemStore m_store;
    private List`1<SortField> m_fields;
    public SortField Item { get; public set; }
    public int Count { get; }
    internal SortFieldList(List`1<SortField> fields, WorkItemStore store);
    public SortField get_Item(int index);
    public void set_Item(int index, SortField value);
    public virtual void RemoveAt(int index);
    public virtual void Clear();
    public int IndexOfFieldId(int id);
    public int IndexOf(SortField sortField);
    public int Add(SortField sortField);
    public int Add(string name, SortType sortType);
    public void Insert(int index, SortField sortField);
    public void Insert(int index, string name, SortType sortType);
    public void Remove(string fieldName);
    public void Remove(FieldDefinition fd);
    public virtual int get_Count();
    protected virtual object GetItem(int index);
    protected virtual void SetItem(int index, object value);
    protected virtual int AddItem(object value);
    protected virtual void InsertItem(int index, object value);
    protected virtual int IndexOfItem(object value);
    public bool Contains(SortField value);
    public void Remove(SortField value);
}
[ObsoleteAttribute("For more information please see documentation at http://aka.ms/witclientom")]
public enum Microsoft.TeamFoundation.WorkItemTracking.Client.SortType : Enum {
    public int value__;
    public static SortType Ascending;
    public static SortType Descending;
}
[ObsoleteAttribute("For more information please see documentation at http://aka.ms/witclientom")]
public enum Microsoft.TeamFoundation.WorkItemTracking.Client.StoredQueriesAction : Enum {
    public int value__;
    public static StoredQueriesAction Added;
    public static StoredQueriesAction Removed;
    public static StoredQueriesAction Changed;
}
[ObsoleteAttribute("For more information please see documentation at http://aka.ms/witclientom")]
public class Microsoft.TeamFoundation.WorkItemTracking.Client.StoredQueriesChangedEventArgs : EventArgs {
    private StoredQuery m_storedQuery;
    private StoredQueriesAction m_action;
    public StoredQuery SourceStoredQuery { get; }
    public StoredQueriesAction StoredQueriesAction { get; }
    public StoredQueriesChangedEventArgs(StoredQuery storedQuery, StoredQueriesAction action);
    public StoredQuery get_SourceStoredQuery();
    public StoredQueriesAction get_StoredQueriesAction();
}
[ObsoleteAttribute("For more information please see documentation at http://aka.ms/witclientom")]
public class Microsoft.TeamFoundation.WorkItemTracking.Client.StoredQueriesEventHandler : MulticastDelegate {
    public StoredQueriesEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, StoredQueriesChangedEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, StoredQueriesChangedEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
[ObsoleteAttribute("For more information please see documentation at http://aka.ms/witclientom")]
public class Microsoft.TeamFoundation.WorkItemTracking.Client.StoredQuery : object {
    internal string m_queryName;
    internal string m_queryText;
    internal string m_description;
    internal string m_queryNameInitial;
    internal string m_queryTextInitial;
    internal string m_descriptionInitial;
    internal bool m_isSaved;
    internal DateTime m_creationTimeUtc;
    internal DateTime m_lastWriteTimeUtc;
    internal string m_owner;
    internal Project m_project;
    internal Guid m_guid;
    internal bool m_isDirty;
    internal long m_rowVersion;
    internal int m_projectId;
    internal bool m_deleted;
    internal StoredQueryProvider m_queryProvider;
    internal WorkItemStore m_store;
    internal QueryScope m_queryScope;
    public bool IsSaved { get; }
    public string Name { get; public set; }
    public string QueryText { get; public set; }
    public DateTime CreationTime { get; }
    public DateTime CreationTimeUtc { get; }
    public DateTime LastWriteTime { get; }
    public DateTime LastWriteTimeUtc { get; }
    public string Owner { get; }
    public string Description { get; public set; }
    public QueryScope QueryScope { get; public set; }
    public Project Project { get; }
    public Guid QueryGuid { get; }
    public StoredQuery(QueryScope queryScope, string queryName, string queryText, string description);
    public bool get_IsSaved();
    public string get_Name();
    public void set_Name(string value);
    public string get_QueryText();
    public void set_QueryText(string value);
    public DateTime get_CreationTime();
    public DateTime get_CreationTimeUtc();
    public DateTime get_LastWriteTime();
    public DateTime get_LastWriteTimeUtc();
    public string get_Owner();
    public string get_Description();
    public void set_Description(string value);
    public QueryScope get_QueryScope();
    public void set_QueryScope(QueryScope value);
    public Project get_Project();
    public Guid get_QueryGuid();
    public void Reset();
    public void Update();
    private sealed virtual override int System.IComparable.CompareTo(object storedQuery);
    public int CompareTo(StoredQuery storedQuery);
    [EditorBrowsableAttribute("1")]
public static void ValidateWiql(WorkItemStore store, string queryText);
}
[ObsoleteAttribute("For more information please see documentation at http://aka.ms/witclientom")]
internal class Microsoft.TeamFoundation.WorkItemTracking.Client.StoredQueryBucket : object {
    private long m_rowVersion;
    private int m_projectId;
    internal ArrayList m_queryList;
    private WorkItemStore m_store;
    internal StoredQueryBucket(int projectId, WorkItemStore store);
    internal int Add(StoredQuery storedQuery);
    internal void Remove(StoredQuery storedQuery);
    internal ArrayList GetRefreshData();
    internal void Refresh(ArrayList queries);
    internal void Refresh();
}
[DefaultMemberAttribute("Item")]
[ObsoleteAttribute("For more information please see documentation at http://aka.ms/witclientom")]
public class Microsoft.TeamFoundation.WorkItemTracking.Client.StoredQueryCollection : VariableSizeList {
    [CompilerGeneratedAttribute]
private StoredQueriesEventHandler StoredQueriesChanged;
    private int m_projectId;
    private Project m_project;
    private WorkItemStore m_store;
    private StoredQueryProvider m_queryProvider;
    private StoredQueryBucket m_queryBucket;
    private ArrayList m_queryList;
    public StoredQuery Item { get; }
    public int Count { get; }
    public StoredQuery Item { get; }
    internal StoredQueryCollection(Project project, WorkItemStore store);
    internal StoredQueryCollection(WorkItemStore store);
    [CompilerGeneratedAttribute]
public void add_StoredQueriesChanged(StoredQueriesEventHandler value);
    [CompilerGeneratedAttribute]
public void remove_StoredQueriesChanged(StoredQueriesEventHandler value);
    private void Initialize();
    public StoredQuery get_Item(Guid guid);
    public virtual int get_Count();
    public StoredQuery get_Item(int index);
    public int Add(StoredQuery storedQuery);
    protected virtual void OnStoredQueriesChanged(StoredQueriesChangedEventArgs e);
    public int IndexOf(StoredQuery storedQuery);
    public void Remove(StoredQuery storedQuery);
    public virtual void RemoveAt(int index);
    public virtual void Clear();
    public void Refresh();
    protected virtual object GetItem(int index);
    protected virtual int AddItem(object value);
    protected virtual int IndexOfItem(object value);
}
[ObsoleteAttribute("For more information please see documentation at http://aka.ms/witclientom")]
internal class Microsoft.TeamFoundation.WorkItemTracking.Client.StoredQueryProvider : object {
    internal Dictionary`2<int, StoredQueryBucket> m_buckets;
    internal Dictionary`2<Guid, StoredQuery> m_queryMap;
    private WorkItemStore m_store;
    internal StoredQueryProvider(WorkItemStore store);
    internal StoredQueryBucket GetQueryBucket(int projectId);
    internal bool HasQueryBucket(int projectId);
    internal StoredQuery GetQuery(Guid guid);
    internal int AddStoredQuery(StoredQuery storedQuery);
    internal void UpdateStoredQuery(StoredQuery storedQuery);
    internal void DeleteStoredQuery(StoredQuery storedQuery);
    internal void DeleteStoredQuery(int projectId, int position);
    internal void Refresh(int projectId);
    private void SendInsert(StoredQuery storedQuery);
    private void SendUpdate(StoredQuery storedQuery);
    private void SendDelete(StoredQuery storedQuery);
}
[ObsoleteAttribute("For more information please see documentation at http://aka.ms/witclientom")]
public enum Microsoft.TeamFoundation.WorkItemTracking.Client.StringDataLengths : Enum {
    public int value__;
    public static StringDataLengths StringFieldLength;
    public static StringDataLengths TextFieldLength;
    public static StringDataLengths StoredQueryNameLength;
    public static StringDataLengths StoredQueryTextLength;
    public static StringDataLengths StoredQueryFormattingLength;
    public static StringDataLengths StoredQueryDescriptionLength;
    public static StringDataLengths HyperLinkCommentLength;
    public static StringDataLengths HyperLinkLocationLength;
    public static StringDataLengths HyperLinkDisplayNameLength;
    public static StringDataLengths RelatedLinkCommentLength;
    public static StringDataLengths ExternalLinkCommentLength;
    public static StringDataLengths ExternalLinkURILength;
    public static StringDataLengths AttachmentCommentLength;
    public static StringDataLengths AttachmentPathLength;
}
[ObsoleteAttribute("For more information please see documentation at http://aka.ms/witclientom")]
public static class Microsoft.TeamFoundation.WorkItemTracking.Client.SupportedFeatures : object {
    public static string GuidFields;
    public static string BooleanFields;
    public static string QueryFolders;
    public static string QueryFolderPermissions;
    public static string QueryFolderSetOwner;
    public static string QueryFieldsComparison;
    public static string QueryHistoricalRevisions;
    public static string QueryInGroupFilter;
    public static string WorkItemTypeCategories;
    public static string WorkItemLinks;
    public static string WorkItemLinkLocks;
    public static string BatchSaveWorkItemsFromDifferentProjects;
    public static string SyncNameChanges;
    public static string ReportingNames;
    public static string SetReportingTypeToNone;
    public static string GlobalWorkflow;
    public static string QueryRecursiveReturnMatchingChildren;
    public static string ProvisionPermission;
    public static string ConfigurableBulkUpdateBatchSize;
    public static string WiqlEvaluationOnServer;
    public static string IdentifyIdentityFields;
}
[ObsoleteAttribute("For more information please see documentation at http://aka.ms/witclientom")]
internal class Microsoft.TeamFoundation.WorkItemTracking.Client.SymDiff`1 : object {
    internal static void Compare(IEnumerable`1<T> leftItems, IEnumerable`1<T> rightItems, Comparison`1<T> comparison, CompareCallback<T> compareCallback);
}
[ObsoleteAttribute("For more information please see documentation at http://aka.ms/witclientom")]
public enum Microsoft.TeamFoundation.WorkItemTracking.Client.TargetSet : Enum {
    public int value__;
    public static TargetSet New;
    public static TargetSet Updated;
    public static TargetSet Deleted;
}
[ObsoleteAttribute("For more information please see documentation at http://aka.ms/witclientom")]
public class Microsoft.TeamFoundation.WorkItemTracking.Client.TreeViolationException : ValidationException {
    public TreeViolationException(string message);
    public TreeViolationException(string message, Exception innerException);
    protected TreeViolationException(SerializationInfo info, StreamingContext context);
}
[ObsoleteAttribute("For more information please see documentation at http://aka.ms/witclientom")]
public class Microsoft.TeamFoundation.WorkItemTracking.Client.UnexpectedErrorException : ClientException {
    private Type m_type;
    internal Type ExceptionType { get; internal set; }
    public UnexpectedErrorException(string message);
    public UnexpectedErrorException(string message, Exception innerException);
    public UnexpectedErrorException(Exception innerException);
    protected UnexpectedErrorException(SerializationInfo info, StreamingContext context);
    internal Type get_ExceptionType();
    internal void set_ExceptionType(Type value);
}
[ObsoleteAttribute("For more information please see documentation at http://aka.ms/witclientom")]
public class Microsoft.TeamFoundation.WorkItemTracking.Client.UnsupportedDocumentVersionException : ValidationException {
    private string m_version;
    public string Version { get; internal set; }
    public UnsupportedDocumentVersionException(string message, string version);
    public UnsupportedDocumentVersionException(string message);
    public UnsupportedDocumentVersionException(string message, Exception innerException);
    protected UnsupportedDocumentVersionException(SerializationInfo info, StreamingContext context);
    public string get_Version();
    internal void set_Version(string value);
    public virtual void GetObjectData(SerializationInfo info, StreamingContext context);
}
[ObsoleteAttribute("For more information please see documentation at http://aka.ms/witclientom")]
public enum Microsoft.TeamFoundation.WorkItemTracking.Client.UserDisplayMode : Enum {
    public int value__;
    public static UserDisplayMode AccountName;
    public static UserDisplayMode FriendlyName;
}
[ObsoleteAttribute("For more information please see documentation at http://aka.ms/witclientom")]
public class Microsoft.TeamFoundation.WorkItemTracking.Client.ValidationException : ClientException {
    private Type m_type;
    internal Type ExceptionType { get; internal set; }
    public ValidationException(string message);
    public ValidationException(string message, Exception innerException);
    protected ValidationException(SerializationInfo info, StreamingContext context);
    internal ValidationException(SoapException innerException, ResourceManager[] resMgrs);
    internal static string GetMessageFromDetails(SoapException soapExc, ResourceManager[] resMgrs);
    internal static T GetSubTypeFromDetails(SoapException soapExc);
    internal Type get_ExceptionType();
    internal void set_ExceptionType(Type value);
}
[DefaultMemberAttribute("Item")]
[ObsoleteAttribute("For more information please see documentation at http://aka.ms/witclientom")]
public class Microsoft.TeamFoundation.WorkItemTracking.Client.ValuesCollection : ReadOnlyList {
    private WorkItemStore m_store;
    private Type m_itemType;
    private IComparer m_cmp;
    private Object[] m_values;
    public int Count { get; }
    public string Item { get; }
    internal ValuesCollection(ListType listType, FieldDefinition fd);
    internal ValuesCollection(WorkItemStore store, Type itemType, String[] values, IComparer comparer);
    public virtual int get_Count();
    public string get_Item(int index);
    public bool Contains(string value);
    public int IndexOf(string value);
    private sealed virtual override bool System.Collections.IList.Contains(object value);
    private sealed virtual override int System.Collections.IList.IndexOf(object value);
    protected virtual object GetItem(int index);
    private object ConvertToObject(string s, CultureInfo culture);
    private string ConvertToString(object o);
    private static Dictionary`2<int, string> LoadValues(WorkItemStore store, ListType listType, int fieldId, int projectId, string wit);
    private static void ExplodeList(Snapshot snapshot, int constId, ListFlags flags, Dictionary`2<int, ListFlags> lists, Dictionary`2<int, string> consts, Dictionary`2<int, int> globalLists, bool leaf);
    private static Dictionary`2<int, int> LoadGlobalLists(Snapshot snapshot);
}
[ObsoleteAttribute("For more information please see documentation at http://aka.ms/witclientom")]
public class Microsoft.TeamFoundation.WorkItemTracking.Client.VerbatimMessageException : ClientException {
    [CompilerGeneratedAttribute]
private string <FieldReferenceName>k__BackingField;
    public string FieldReferenceName { get; private set; }
    public VerbatimMessageException(string message);
    public VerbatimMessageException(string message, Exception innerException);
    public VerbatimMessageException(string message, Exception innerException, string fieldName);
    protected VerbatimMessageException(SerializationInfo info, StreamingContext context);
    public virtual void GetObjectData(SerializationInfo info, StreamingContext context);
    [CompilerGeneratedAttribute]
public string get_FieldReferenceName();
    [CompilerGeneratedAttribute]
private void set_FieldReferenceName(string value);
}
[ObsoleteAttribute("For more information please see documentation at http://aka.ms/witclientom")]
internal class Microsoft.TeamFoundation.WorkItemTracking.Client.WitRestClient : VssHttpClientBase {
    public static string RestArea;
    public static string TypeTemplateResourceName;
    public static Guid TypeTemplateResourceId;
    public static string AttachmentResourceName;
    public static Guid AttachmentResourceId;
    public static string chunkedUploadType;
    private static MediaTypeHeaderValue ApplicationOctet;
    protected IDictionary`2<string, Type> TranslatedExceptions { get; }
    public WitRestClient(Uri baseUrl, VssCredentials credentials);
    public WitRestClient(Uri baseUrl, VssCredentials credentials, DelegatingHandler[] handlers);
    public WitRestClient(Uri baseUrl, VssCredentials credentials, VssHttpRequestSettings settings);
    public WitRestClient(Uri baseUrl, VssCredentials credentials, VssHttpRequestSettings settings, DelegatingHandler[] handlers);
    public WitRestClient(Uri baseUrl, HttpMessageHandler pipeline, bool disposeHandler);
    private static WitRestClient();
    protected virtual IDictionary`2<string, Type> get_TranslatedExceptions();
    public Task`1<HttpResponseMessage> RegisterAttachmentUpload(object userState);
    public Task`1<HttpResponseMessage> UploadAttachment(string attachmentId, Stream fileStream, int chunkSize, string uploadType, object userState, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.TeamFoundation.WorkItemTracking.Client.WitRestClient/<UploadAttachmentChunked>d__16")]
public Task`1<HttpResponseMessage> UploadAttachmentChunked(string attachmentId, Stream fileStream, int chunkSize, string uploadType, object userState, CancellationToken cancellationToken);
}
[DefaultMemberAttribute("Item")]
[ObsoleteAttribute("For more information please see documentation at http://aka.ms/witclientom")]
public class Microsoft.TeamFoundation.WorkItemTracking.Client.WorkItem : object {
    private WorkItemStore m_store;
    private WorkItemCollection m_list;
    private int m_index;
    private FieldCollection m_fields;
    private RevisionCollection m_revisions;
    private LinkCollection m_links;
    private WorkItemLinkCollection m_wlinks;
    private WorkItemLinkCollection m_wlinksHistory;
    private AttachmentCollection m_attachments;
    private int m_id;
    private int m_tempId;
    private bool m_IsUpdating;
    private Nullable`1<bool> m_dirty;
    private Nullable`1<bool> m_dirtyOverride;
    private Nullable`1<bool> m_readonly;
    private Nullable`1<DateTime> m_asof;
    private OpenState m_openState;
    private WorkItemType m_type;
    private Project m_project;
    private int m_metadataVersion;
    private int m_dataVersion;
    private WorkItemFieldChangeEventHandler m_fieldEventHandler;
    private WorkItemPreSaveEventHandler m_savingEventHandler;
    private WorkItemFieldData m_fieldsData;
    private WorkItemLinkData m_linksData;
    private static string c_fileSchemePrefix;
    private static int defaultAttachmentChunkSize;
    [EditorBrowsableAttribute("1")]
public static int c_revisionNull;
    [EditorBrowsableAttribute("1")]
public static int c_revisionUpdate;
    [EditorBrowsableAttribute("1")]
public static int c_revisionLatest;
    [EditorBrowsableAttribute("1")]
public static int c_revisionHistory;
    private static Regex s_imageRegex;
    private static int s_tempId;
    private static Int32[] s_areaDependentFieldIds;
    private static Int32[] s_iterationDependentFieldIds;
    internal static Int32[] s_internallyCalculatedFieldIds;
    public int Id { get; }
    public int TemporaryId { get; }
    public Uri Uri { get; }
    public int Revision { get; }
    public RevisionCollection Revisions { get; }
    public AttachmentCollection Attachments { get; }
    public WorkItemLinkCollection WorkItemLinks { get; }
    public LinkCollection Links { get; }
    public WorkItemLinkCollection WorkItemLinkHistory { get; }
    public WorkItemStore Store { get; }
    public string Title { get; public set; }
    public string State { get; public set; }
    public string Reason { get; public set; }
    public int Rev { get; }
    public string Description { get; public set; }
    public string History { get; public set; }
    public string ChangedBy { get; }
    public DateTime RevisedDate { get; }
    public int Watermark { get; }
    public DateTime ChangedDate { get; }
    public DateTime AuthorizedDate { get; }
    public DateTime CreatedDate { get; }
    public string CreatedBy { get; }
    public string Tags { get; public set; }
    public string NodeName { get; }
    public string AreaPath { get; public set; }
    public int AreaId { get; public set; }
    public string IterationPath { get; public set; }
    public int IterationId { get; public set; }
    public int ExternalLinkCount { get; }
    public int HyperLinkCount { get; }
    public int AttachedFileCount { get; }
    public int RelatedLinkCount { get; }
    public bool IsOpen { get; }
    internal bool IsUpdating { get; internal set; }
    public bool IsPartialOpen { get; }
    public bool IsReadOnly { get; }
    public bool IsReadOnlyOpen { get; }
    public bool IsNew { get; }
    public FieldCollection Fields { get; }
    public Project Project { get; }
    public WorkItemType Type { get; }
    [EditorBrowsableAttribute("1")]
public WorkItemCollection Collection { get; }
    private bool IsValidType { get; }
    public object Item { get; public set; }
    public object Item { get; public set; }
    public bool IsDirty { get; }
    public string DisplayForm { get; }
    [EditorBrowsableAttribute("1")]
public int InternalVersion { get; }
    [EditorBrowsableAttribute("1")]
public bool IsAccessDenied { get; }
    internal bool IsRevised { get; }
    internal Nullable`1<DateTime> AsOfUTC { get; }
    [EditorBrowsableAttribute("1")]
public WorkItemFieldData FieldData { get; }
    [EditorBrowsableAttribute("1")]
public WorkItemLinkData LinkData { get; }
    private static Regex ImageRegex { get; }
    private WorkItem Microsoft.TeamFoundation.WorkItemTracking.Client.IRevisionInternal.WorkItem { get; }
    private bool Microsoft.TeamFoundation.WorkItemTracking.Client.IRevisionInternal.IsReadOnly { get; }
    private int Microsoft.TeamFoundation.WorkItemTracking.Client.IRevisionInternal.Number { get; }
    public WorkItem(WorkItemType type);
    internal WorkItem(WorkItemStore store, int id);
    internal WorkItem(WorkItemStore store, int id, DateTime at);
    internal WorkItem(WorkItemStore store, int id, int revision);
    internal WorkItem(WorkItemStore store, Uri uri);
    internal WorkItem(WorkItemStore store, Uri uri, DateTime at);
    internal WorkItem(WorkItemStore store, Uri uri, int revision);
    internal WorkItem(WorkItemCollection list, int index);
    private static WorkItem();
    public void Open();
    public void PartialOpen();
    public void Close();
    public void Reset();
    public void SyncToLatest();
    private void ApplyRulesAndRefresh();
    public void Save();
    public void Save(SaveFlags saveFlags);
    internal void PreSave();
    internal void PostSaveError();
    internal void PostSave();
    public WorkItem Copy(WorkItemType targetType, WorkItemCopyFlags flags);
    public WorkItem Copy(WorkItemType targetType);
    public WorkItem Copy();
    public ArrayList Validate();
    public int get_Id();
    public int get_TemporaryId();
    public Uri get_Uri();
    private bool IsValidUri(Uri uri);
    private ArtifactId GetArtifact(Uri uri);
    public int get_Revision();
    public RevisionCollection get_Revisions();
    public AttachmentCollection get_Attachments();
    public WorkItemLinkCollection get_WorkItemLinks();
    public LinkCollection get_Links();
    public WorkItemLinkCollection get_WorkItemLinkHistory();
    public WorkItemStore get_Store();
    public string get_Title();
    public void set_Title(string value);
    public string get_State();
    public void set_State(string value);
    public string get_Reason();
    public void set_Reason(string value);
    public int get_Rev();
    public string get_Description();
    public void set_Description(string value);
    public string get_History();
    public void set_History(string value);
    public string get_ChangedBy();
    public DateTime get_RevisedDate();
    public int get_Watermark();
    public DateTime get_ChangedDate();
    public DateTime get_AuthorizedDate();
    public DateTime get_CreatedDate();
    public string get_CreatedBy();
    public string get_Tags();
    public void set_Tags(string value);
    public string get_NodeName();
    public string get_AreaPath();
    public void set_AreaPath(string value);
    public int get_AreaId();
    public void set_AreaId(int value);
    public string get_IterationPath();
    public void set_IterationPath(string value);
    public int get_IterationId();
    public void set_IterationId(int value);
    public int get_ExternalLinkCount();
    public int get_HyperLinkCount();
    public int get_AttachedFileCount();
    public int get_RelatedLinkCount();
    public bool IsValid();
    public bool get_IsOpen();
    internal bool get_IsUpdating();
    internal void set_IsUpdating(bool value);
    public bool get_IsPartialOpen();
    public bool get_IsReadOnly();
    public bool get_IsReadOnlyOpen();
    public bool get_IsNew();
    public FieldCollection get_Fields();
    public Project get_Project();
    public WorkItemType get_Type();
    public WorkItemCollection get_Collection();
    private void CheckType();
    private bool get_IsValidType();
    public string GetNextState(string action);
    public object get_Item(string name);
    public void set_Item(string name, object value);
    public object get_Item(CoreField id);
    public void set_Item(CoreField id, object value);
    public bool get_IsDirty();
    public void SetDirty(bool isDirty);
    public string get_DisplayForm();
    public void add_FieldChanged(WorkItemFieldChangeEventHandler value);
    public void remove_FieldChanged(WorkItemFieldChangeEventHandler value);
    public void add_Saving(WorkItemPreSaveEventHandler value);
    public void remove_Saving(WorkItemPreSaveEventHandler value);
    private void CheckUpdateCachedData(bool projectChanged, bool typeChanged);
    private void CreateLocalCopy(TfsWebClient client, AttachmentInfo fi);
    private static string GetTempFileName(string path);
    internal void FireFieldChangeEvent(int id);
    internal void FirePreSaveEvent();
    internal void HandleLinkCollectionChange(LinkInfo li, LinkAction action);
    internal void FireCollectionChangeEvent(object updatedCollection, object updatedItem, LinkAction action);
    internal void FireWorkItemChangeEvent();
    internal void SyncAndMergeToLatest();
    internal bool QueryFieldValue(int field);
    internal void SetListIndex(WorkItemCollection list, int index);
    public int get_InternalVersion();
    internal void ResetDirty();
    public bool get_IsAccessDenied();
    internal void SetAccessDenied();
    internal bool GetAccessDenied();
    internal bool get_IsRevised();
    internal Nullable`1<DateTime> get_AsOfUTC();
    public WorkItemFieldData get_FieldData();
    public WorkItemLinkData get_LinkData();
    [EditorBrowsableAttribute("1")]
public object GetFieldValue(int id, int revision);
    internal void SetFieldValue(int id, object value, FieldFlags flags);
    internal Nullable`1<bool> IsChangedInRevision(int id, int revision);
    internal bool IsFieldValueValid(int id);
    internal bool GetCalculatedFieldValue(int id, int revision, Object& value);
    internal void ProcessFieldChange(int id);
    private bool AreFieldValuesEqual(Type type, object val1, object val2);
    private object CalculateTreePathField(int fpath, int fid, int revision);
    private object CalculateNodeNameField(int fname, int fid, int revision);
    private object CalculateTreeLevelField(PsCoreFieldsEnum f, int fid, int revision);
    private object CalculateAuthorizedAsField(int revision);
    private void ProcessTreeIdField(int fid, int fpath, Int32[] affected);
    private void ProcessTreePathField(int fpath, int fid, PsCSSType csstype);
    internal void ConvertFieldValueToExternal(Object& value, Type type);
    internal FieldFlags ConvertFieldValueToInternal(Object& value, Type type);
    [EditorBrowsableAttribute("1")]
public object GetFieldValueExternal(FieldDefinition fd, int revision);
    internal object GetFieldValueExternalWithServerDefault(FieldDefinition fd, int revision);
    internal void SetFieldValueExternal(FieldDefinition fd, object value);
    private PsAccessCheckFlags ApplyBypassRulesFlag(PsAccessCheckFlags flags);
    private void ApplyFieldChange(int fieldId, BrieCallBack bc, int recursive);
    internal void ApplyFieldChange(int fieldId, object value);
    [EditorBrowsableAttribute("1")]
public void ApplyRules();
    [EditorBrowsableAttribute("1")]
public void ApplyRules(bool copyChangedByFromLatest);
    [EditorBrowsableAttribute("1")]
public void CalculateFieldLists(int fieldId);
    internal void EnsureCollections();
    [EditorBrowsableAttribute("1")]
public WorkItemSyncData GetLatestSyncData();
    [EditorBrowsableAttribute("1")]
public void SyncWorkItem(WorkItemSyncData syncData);
    private void EvaluateProjectOrTypeChange();
    private void LoadWorkItem(int id, int rev, Nullable`1<DateTime> asof);
    private void LoadWorkItemFromRowSetInternal(int rev, Nullable`1<DateTime> asof, IWorkItemRowSets witem);
    internal XmlElement CreateUpdateElement(XmlDocument xdoc, SaveFlags saveFlags, List`1& xlist, List`1& links);
    internal void TakeUpdateResult(XmlElement result);
    internal void TakeUpdateLinkResult(WorkItemLinkInfo li, XmlElement result);
    private void RefreshCachedData();
    private void InitNew(WorkItemType type);
    private string GetAreaNodeUri();
    public void UploadAttachments();
    public void UploadAttachment(AttachmentInfo fi);
    private void UploadAttachmentInternalUsingSOAP(AttachmentInfo attachmentInfo, string areaNodeUri, string projectNodeUri);
    private bool UploadAttachmentInternalUsingREST(AttachmentInfo attachmentInfo);
    private bool UseChunkedUpload(AttachmentInfo attachmentInfo);
    private WitRestClient BuildRestClient();
    private void UploadInlineImages();
    private Dictionary`2<string, string> GetImgTagUris(string content);
    private bool IsTcmInlineAttachment(string url);
    private string DecodeFilePath(string url);
    private static Regex get_ImageRegex();
    private static EditAction FieldIdToAction(int fid);
    private void FinishConstruction(EditActionSet& set);
    [EditorBrowsableAttribute("1")]
public EditActionSet[] GetActionsHistory();
    [EditorBrowsableAttribute("1")]
public object GetActionObject(EditActionInfo actionInfo);
    private sealed virtual override WorkItem Microsoft.TeamFoundation.WorkItemTracking.Client.IRevisionInternal.get_WorkItem();
    private sealed virtual override void Microsoft.TeamFoundation.WorkItemTracking.Client.IRevisionInternal.SetFieldValue(FieldDefinition fd, object value);
    private int GetCurrentFieldEnumValue();
    private sealed virtual override object Microsoft.TeamFoundation.WorkItemTracking.Client.IRevisionInternal.GetCurrentFieldValue(FieldDefinition fd);
    private sealed virtual override object Microsoft.TeamFoundation.WorkItemTracking.Client.IRevisionInternal.GetCurrentFieldValueWithServerDefault(FieldDefinition fd);
    private sealed virtual override object Microsoft.TeamFoundation.WorkItemTracking.Client.IRevisionInternal.GetOriginalFieldValue(FieldDefinition fd);
    private sealed virtual override bool Microsoft.TeamFoundation.WorkItemTracking.Client.IRevisionInternal.get_IsReadOnly();
    private sealed virtual override int Microsoft.TeamFoundation.WorkItemTracking.Client.IRevisionInternal.get_Number();
    [CompilerGeneratedAttribute]
private object <SyncAndMergeToLatest>b__152_1(int fldId);
}
[ObsoleteAttribute("For more information please see documentation at http://aka.ms/witclientom")]
public class Microsoft.TeamFoundation.WorkItemTracking.Client.WorkItemAsyncEventArgs : EventArgs {
    private CancelableAsyncResult m_car;
    private CancelableActionState m_oldState;
    private CancelableActionState m_newState;
    public CancelableAsyncResult CancelableAsyncResult { get; }
    public CancelableActionState OldState { get; }
    public CancelableActionState NewState { get; }
    public WorkItemAsyncEventArgs(CancelableAsyncResult car, CancelableActionState oldState, CancelableActionState newState);
    public CancelableAsyncResult get_CancelableAsyncResult();
    public CancelableActionState get_OldState();
    public CancelableActionState get_NewState();
}
[ObsoleteAttribute("For more information please see documentation at http://aka.ms/witclientom")]
public class Microsoft.TeamFoundation.WorkItemTracking.Client.WorkItemAsyncEventHandler : MulticastDelegate {
    public WorkItemAsyncEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, WorkItemAsyncEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, WorkItemAsyncEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
[ObsoleteAttribute("For more information please see documentation at http://aka.ms/witclientom")]
public class Microsoft.TeamFoundation.WorkItemTracking.Client.WorkItemChangeRejectedException : ClientException {
    public WorkItemChangeRejectedException(Exception innerException);
    protected WorkItemChangeRejectedException(SerializationInfo info, StreamingContext context);
    public WorkItemChangeRejectedException(string message, Exception innerException);
}
[DefaultMemberAttribute("Item")]
[ObsoleteAttribute("For more information please see documentation at http://aka.ms/witclientom")]
public class Microsoft.TeamFoundation.WorkItemTracking.Client.WorkItemCollection : ReadOnlyList {
    private WorkItemStore m_store;
    private Query m_query;
    private Int32[] m_ids;
    private Int32[] m_revs;
    private WorkItem[] m_cache;
    private List`1<int> m_extraColumns;
    private int m_projectHint;
    private DateTime m_asof;
    internal int m_version;
    private PagingFieldReader m_reader;
    public DateTime AsOfUTC { get; public set; }
    public DateTime AsOf { get; public set; }
    public int PageSize { get; public set; }
    public int DefaultProjectHint { get; public set; }
    public WorkItem Item { get; }
    public Query Query { get; }
    public WorkItemStore Store { get; }
    public DisplayFieldList DisplayFields { get; }
    public SortFieldList SortFields { get; }
    public int Count { get; }
    [EditorBrowsableAttribute("1")]
public WorkItemCollection(Int32[] ids, Int32[] revs, Query query);
    public DateTime get_AsOfUTC();
    public void set_AsOfUTC(DateTime value);
    public DateTime get_AsOf();
    public void set_AsOf(DateTime value);
    public int get_PageSize();
    public void set_PageSize(int value);
    public int get_DefaultProjectHint();
    public void set_DefaultProjectHint(int value);
    public void Resort();
    public WorkItem get_Item(int index);
    [EditorBrowsableAttribute("1")]
public int GetId(int index);
    internal IEnumerable`1<int> GetIds();
    public Query get_Query();
    public WorkItemStore get_Store();
    public DisplayFieldList get_DisplayFields();
    public SortFieldList get_SortFields();
    public int IndexOf(int id);
    public virtual int get_Count();
    private bool IsColumnInUse(int fieldId);
    private bool IsColumnCached(int index, int fieldId);
    internal bool QueryFieldValues(int index, Int32[] fields);
    internal bool QueryFieldValuesForPartialOpen(int index);
    private Int32[] GetDefaultPageFields();
    private void AddPageField(List`1<int> fields, FieldDefinition fd);
    internal int GetAsOfRevision(int index);
    public int IndexOf(WorkItem value);
    public bool Contains(WorkItem value);
    protected virtual object GetItem(int index);
    private sealed virtual override bool Microsoft.TeamFoundation.WorkItemTracking.Client.IFieldStore.HasValue(int row, int fieldId);
    private sealed virtual override void Microsoft.TeamFoundation.WorkItemTracking.Client.IFieldStore.StoreValue(int row, int fieldId, object value);
    private sealed virtual override object Microsoft.TeamFoundation.WorkItemTracking.Client.IFieldStore.GetStoredValue(int row, int fieldId);
    private sealed virtual override void Microsoft.TeamFoundation.WorkItemTracking.Client.IFieldStore.SetAccessDenied(int row);
    private sealed virtual override bool Microsoft.TeamFoundation.WorkItemTracking.Client.IFieldStore.IsAccessDenied(int row);
}
[FlagsAttribute]
[ObsoleteAttribute("For more information please see documentation at http://aka.ms/witclientom")]
public enum Microsoft.TeamFoundation.WorkItemTracking.Client.WorkItemCopyFlags : Enum {
    public int value__;
    public static WorkItemCopyFlags None;
    public static WorkItemCopyFlags CopyFiles;
    public static WorkItemCopyFlags CopyLinks;
}
[ObsoleteAttribute("For more information please see documentation at http://aka.ms/witclientom")]
public class Microsoft.TeamFoundation.WorkItemTracking.Client.WorkItemEventArgs : EventArgs {
    private object m_object;
    public Field Field { get; }
    public object Object { get; }
    public WorkItemEventArgs(object o);
    public Field get_Field();
    public object get_Object();
}
[ObsoleteAttribute("For more information please see documentation at http://aka.ms/witclientom")]
public class Microsoft.TeamFoundation.WorkItemTracking.Client.WorkItemFieldChangeEventHandler : MulticastDelegate {
    public WorkItemFieldChangeEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, WorkItemEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, WorkItemEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
[EditorBrowsableAttribute("1")]
[ObsoleteAttribute("For more information please see documentation at http://aka.ms/witclientom")]
public class Microsoft.TeamFoundation.WorkItemTracking.Client.WorkItemFieldData : object {
    private WorkItem m_workitem;
    private Dictionary`2<int, object> m_latestData;
    private Dictionary`2<int, FieldUpdate> m_updateData;
    private Dictionary`2<int, FieldInfo> m_fieldStates;
    private RevisionInfo[] m_revisionData;
    private Dictionary`2<int, int> m_changes;
    internal WorkItem WorkItem { get; internal set; }
    private string Microsoft.TeamFoundation.WorkItemTracking.Internals.IWorkItemSaveFieldDataHelper.UserDisplayName { get; }
    private bool Microsoft.TeamFoundation.WorkItemTracking.Internals.IWorkItemSaveFieldDataHelper.IsDirty { get; }
    private Dictionary`2<int, object> Microsoft.TeamFoundation.WorkItemTracking.Internals.IWorkItemSaveFieldDataHelper.FieldUpdates { get; }
    internal WorkItemFieldData(WorkItem workitem);
    private static bool IsNonDeltaField(int id);
    private static bool IsTeamProjectField(int id);
    private static bool IsNonNullDefaultField(int id);
    internal object GetFieldValue(int id, int revision);
    internal Nullable`1<bool> IsChangedInRevision(int id, int revision);
    internal bool HasLatestFieldValue(int id);
    internal void SetLatestFieldValue(int id, object value);
    internal bool HasUpdateFieldValue(int id);
    internal Dictionary`2<int, FieldUpdate> GetUpdateFieldValues();
    public bool GetUpdateFieldValue(int id, FieldUpdate& fu);
    public bool SetUpdateFieldValue(int id, object value, FieldFlags flags);
    internal bool ResetUpdateFieldValue(int id);
    public FieldInfo GetFieldState(int id);
    private void FixFieldState(FieldInfo& fi, Nullable`1<FieldUpdate> fu);
    internal void SetFieldState(FieldInfo fi);
    internal void SetAllFieldStates(Dictionary`2<int, FieldInfo> dict);
    internal void SetFieldStates(Dictionary`2<int, FieldInfo> dict);
    internal void SetFieldValues(Dictionary`2<int, FieldUpdate> dict);
    public bool IsDirty();
    [IteratorStateMachineAttribute("Microsoft.TeamFoundation.WorkItemTracking.Client.WorkItemFieldData/<GetInvalidFields>d__20")]
private IEnumerable`1<int> GetInvalidFields();
    internal ArrayList Validate();
    internal bool IsValid();
    internal int GetRevisionCount();
    internal RevisionInfo GetRevisionInfo(int i);
    private int ConvertValueFromRowset(string column, Object& value);
    private object GetTeamProjectName(int revision);
    internal object ConvertFromXml(string value, Type type);
    internal void TakeUpdateResult(XmlElement result, int newRev);
    internal void Reset();
    internal void FireEvents();
    internal void RegisterChangedField(int id);
    internal void ResetChangedFields();
    internal void set_WorkItem(WorkItem value);
    internal WorkItem get_WorkItem();
    private sealed virtual override void Microsoft.TeamFoundation.WorkItemTracking.Internals.IWorkItemOpenFieldDataHelper.SetLatestData(Dictionary`2<int, object> latestData);
    private sealed virtual override void Microsoft.TeamFoundation.WorkItemTracking.Internals.IWorkItemOpenFieldDataHelper.SetRevisionData(List`1<Dictionary`2<int, object>> revisionData);
    private sealed virtual override int Microsoft.TeamFoundation.WorkItemTracking.Internals.IWorkItemOpenFieldDataHelper.GetFieldId(string fieldName);
    private sealed virtual override bool Microsoft.TeamFoundation.WorkItemTracking.Internals.IWorkItemOpenFieldDataHelper.HasField(int fieldId);
    private sealed virtual override string Microsoft.TeamFoundation.WorkItemTracking.Internals.IWorkItemSaveFieldDataHelper.get_UserDisplayName();
    private sealed virtual override bool Microsoft.TeamFoundation.WorkItemTracking.Internals.IWorkItemSaveFieldDataHelper.get_IsDirty();
    private sealed virtual override Dictionary`2<int, object> Microsoft.TeamFoundation.WorkItemTracking.Internals.IWorkItemSaveFieldDataHelper.get_FieldUpdates();
    private sealed virtual override bool Microsoft.TeamFoundation.WorkItemTracking.Internals.IWorkItemSaveFieldDataHelper.HasField(int fieldId);
    private sealed virtual override bool Microsoft.TeamFoundation.WorkItemTracking.Internals.IWorkItemSaveFieldDataHelper.IsLongTextField(int fieldId);
    private sealed virtual override string Microsoft.TeamFoundation.WorkItemTracking.Internals.IWorkItemSaveFieldDataHelper.GetFieldReferenceName(int fieldId);
    private sealed virtual override string Microsoft.TeamFoundation.WorkItemTracking.Internals.IWorkItemSaveFieldDataHelper.GetFieldName(int fieldId);
    private sealed virtual override Type Microsoft.TeamFoundation.WorkItemTracking.Internals.IWorkItemSaveFieldDataHelper.GetFieldSystemType(int fieldId);
}
[ObsoleteAttribute("For more information please see documentation at http://aka.ms/witclientom")]
internal class Microsoft.TeamFoundation.WorkItemTracking.Client.WorkItemFieldValueComparerUtils : object {
    internal static IComparer GetComparer(FieldDefinition fd, CultureInfo cultureInfo);
}
[ObsoleteAttribute("For more information please see documentation at http://aka.ms/witclientom")]
public class Microsoft.TeamFoundation.WorkItemTracking.Client.WorkItemLink : Link {
    [CompilerGeneratedAttribute]
private Nullable`1<DateTime> <ChangedDate>k__BackingField;
    private WorkItem m_item;
    private WorkItemLinkInfo m_fileInfo;
    private WorkItemLinkTypeEnd m_linkTypeEnd;
    public RegisteredLinkType ArtifactLinkType { get; }
    public BaseLinkType BaseType { get; }
    public int SourceId { get; public set; }
    public int TargetId { get; public set; }
    public WorkItemLinkTypeEnd LinkTypeEnd { get; }
    public string Comment { get; public set; }
    public bool IsLocked { get; public set; }
    public bool IsNew { get; }
    public DateTime AddedDateUtc { get; }
    public DateTime AddedDate { get; }
    public DateTime RemovedDateUtc { get; }
    public DateTime RemovedDate { get; }
    public string AddedBy { get; }
    public string RemovedBy { get; }
    public Nullable`1<DateTime> ChangedDate { get; public set; }
    public WorkItemLink(WorkItemLinkTypeEnd linkTypeEnd);
    public WorkItemLink(WorkItemLinkTypeEnd linkTypeEnd, int sourceId, int targetId);
    public WorkItemLink(WorkItemLinkTypeEnd linkTypeEnd, int targetId);
    internal WorkItemLink(WorkItem workItem, WorkItemLinkInfo li, WorkItemLinkTypeEnd linkTypeEnd);
    public virtual RegisteredLinkType get_ArtifactLinkType();
    public virtual BaseLinkType get_BaseType();
    internal virtual LinkInfo GetLinkInfo();
    internal virtual void Update(WorkItemLinkData data, LinkUpdate lu);
    public int get_SourceId();
    public void set_SourceId(int value);
    public int get_TargetId();
    public void set_TargetId(int value);
    public WorkItemLinkTypeEnd get_LinkTypeEnd();
    public virtual string get_Comment();
    public virtual void set_Comment(string value);
    public virtual bool get_IsLocked();
    public virtual void set_IsLocked(bool value);
    public virtual bool get_IsNew();
    public DateTime get_AddedDateUtc();
    public DateTime get_AddedDate();
    public DateTime get_RemovedDateUtc();
    public DateTime get_RemovedDate();
    public string get_AddedBy();
    public string get_RemovedBy();
    [CompilerGeneratedAttribute]
public Nullable`1<DateTime> get_ChangedDate();
    [CompilerGeneratedAttribute]
public void set_ChangedDate(Nullable`1<DateTime> value);
    internal virtual bool InternalEquals(Link l);
    internal virtual void InternalAdd(WorkItem workItem);
    internal virtual void InternalRemove(WorkItem workItem);
    internal void Disconnect();
    internal XmlElement CreateUpdateElement(WorkItemStore ws, LinkOperation op, XmlDocument xdoc, SaveFlags saveFlags);
    internal virtual Link Clone(WorkItem target);
    private static string GetTagName(LinkOperation op);
}
[DefaultMemberAttribute("Item")]
[ObsoleteAttribute("For more information please see documentation at http://aka.ms/witclientom")]
public class Microsoft.TeamFoundation.WorkItemTracking.Client.WorkItemLinkCollection : VariableSizeList {
    private WorkItem m_workitem;
    private int m_revision;
    private List`1<WorkItemLink> m_linkList;
    private int m_removingIndex;
    private WorkItemLink m_addingObject;
    [EditorBrowsableAttribute("1")]
public IEnumerable`1<WorkItemLink> AddedLinks { get; }
    [EditorBrowsableAttribute("1")]
public IEnumerable`1<WorkItemLink> DeletedLinks { get; }
    public int Count { get; }
    public WorkItemLink Item { get; }
    internal WorkItem WorkItem { get; }
    internal bool IsHistoricalRevision { get; }
    internal WorkItemLinkCollection(WorkItem workitem, int revision);
    internal void Ensure();
    private WorkItemLink CreateLinkObject(WorkItemLinkInfo li);
    private void Populate();
    [EditorBrowsableAttribute("1")]
public void Refresh();
    internal void HandleChange(LinkInfo li, LinkAction action);
    public IEnumerable`1<WorkItemLink> get_AddedLinks();
    public IEnumerable`1<WorkItemLink> get_DeletedLinks();
    public virtual int get_Count();
    public WorkItemLink get_Item(int index);
    public int Add(WorkItemLink link);
    public virtual void RemoveAt(int index);
    public virtual void Clear();
    public int IndexOf(WorkItemLink link);
    public void Remove(WorkItemLink link);
    public bool Contains(WorkItemLink link);
    private sealed virtual override int System.Collections.IList.IndexOf(object value);
    protected virtual object GetItem(int index);
    protected virtual int AddItem(object value);
    internal WorkItem get_WorkItem();
    internal bool get_IsHistoricalRevision();
}
[EditorBrowsableAttribute("1")]
[ObsoleteAttribute("For more information please see documentation at http://aka.ms/witclientom")]
public class Microsoft.TeamFoundation.WorkItemTracking.Client.WorkItemLinkData : object {
    private WorkItem m_workitem;
    private LinkInfo[] m_linksData;
    private HashSet`1<LinkInfo> m_addedLinks;
    private HashSet`1<LinkInfo> m_deletedLinks;
    private Dictionary`2<LinkInfo, LinkUpdate> m_updatedLinks;
    private Dictionary`2<WorkItemLinkInfo, bool> m_queuedLinks;
    private List`1<WorkItemLinkInfo> m_wlinksToUpdate;
    internal WorkItemLinkTypeEnd ParentLinkTypeEnd { get; }
    private Dictionary`2<LinkInfo, LinkUpdate> UpdatedLinks { get; }
    internal LinkInfo[] LatestLinks { get; internal set; }
    private IEnumerable`1<LinkInfo> Microsoft.TeamFoundation.WorkItemTracking.Internals.IWorkItemSaveLinkDataHelper.AddedLinks { get; }
    private IEnumerable`1<LinkInfo> Microsoft.TeamFoundation.WorkItemTracking.Internals.IWorkItemSaveLinkDataHelper.DeletedLinks { get; }
    private IEnumerable`1<KeyValuePair`2<LinkInfo, LinkUpdate>> Microsoft.TeamFoundation.WorkItemTracking.Internals.IWorkItemSaveLinkDataHelper.UpdatedLinks { get; }
    internal List`1<WorkItemLinkInfo> LinkInfoToUpdate { get; }
    internal WorkItemLinkData(WorkItem workitem);
    public int GetLinkInfoCount();
    public LinkInfo GetLinkInfo(int index);
    public void AddLinkInfo(LinkInfo linkInfo, object updatedItem);
    public void MarkLinkToDelete(LinkInfo linkInfo, object updatedItem);
    public HashSet`1<LinkInfo> GetAddedLinks();
    public HashSet`1<LinkInfo> GetDeletedLinks();
    public Dictionary`2<LinkInfo, LinkUpdate> GetUpdatedLinks();
    public int GetAddedLinksCount();
    public int GetDeletedLinksCount();
    public int GetUpdatedLinksCount();
    internal bool IsLinkMarkedToAdd(LinkInfo fi);
    internal bool IsLinkMarkedToDelete(LinkInfo fi);
    public bool IsDirty();
    public void SetLinkComment(LinkInfo linkInfo, string value);
    internal string GetLinkComment(LinkInfo fi);
    internal void SetLinkLocked(LinkInfo fi, bool value);
    internal bool GetLinkLocked(LinkInfo fi);
    [IteratorStateMachineAttribute("Microsoft.TeamFoundation.WorkItemTracking.Client.WorkItemLinkData/<GetLinkCollection>d__18")]
internal IEnumerable`1<LinkInfo> GetLinkCollection(int revision);
    [IteratorStateMachineAttribute("Microsoft.TeamFoundation.WorkItemTracking.Client.WorkItemLinkData/<GetAddedLinks>d__19")]
public IEnumerable`1<LinkInfo> GetAddedLinks(int fieldId);
    public bool ReplaceAddedLink(LinkInfo existingLink, LinkInfo newLink);
    [IteratorStateMachineAttribute("Microsoft.TeamFoundation.WorkItemTracking.Client.WorkItemLinkData/<GetLinkCollection>d__21")]
internal IEnumerable`1<LinkInfo> GetLinkCollection(int fieldId, int revision);
    internal int ComputeLinkCount(int fieldId, int revision);
    internal Nullable`1<int> ComputeParentField(int revision);
    internal WorkItemLinkTypeEnd get_ParentLinkTypeEnd();
    internal WorkItemLinkInfo GetParentLink(int revision);
    internal bool IsParentLink(LinkInfo li);
    internal void LoadData(IWorkItemRowSets witem);
    private static bool IsOldStyleLinkType(LinkInfo li);
    internal void TakeUpdateResult(XmlElement result);
    internal void TakeUpdateLinkResult(WorkItemLinkInfo li, XmlElement result);
    internal void ResetResultQueue();
    internal void ProcessResultQueue();
    internal void ValidateTempIds(IDictionary`2<int, WorkItem> map);
    public void Reset();
    private Dictionary`2<LinkInfo, LinkUpdate> get_UpdatedLinks();
    private LinkUpdate GetLinkUpdate(LinkInfo fi);
    public void Check();
    internal LinkInfo[] get_LatestLinks();
    internal void set_LatestLinks(LinkInfo[] value);
    private sealed virtual override IEnumerable`1<LinkInfo> Microsoft.TeamFoundation.WorkItemTracking.Internals.IWorkItemSaveLinkDataHelper.get_AddedLinks();
    private sealed virtual override IEnumerable`1<LinkInfo> Microsoft.TeamFoundation.WorkItemTracking.Internals.IWorkItemSaveLinkDataHelper.get_DeletedLinks();
    private sealed virtual override IEnumerable`1<KeyValuePair`2<LinkInfo, LinkUpdate>> Microsoft.TeamFoundation.WorkItemTracking.Internals.IWorkItemSaveLinkDataHelper.get_UpdatedLinks();
    private sealed virtual override void Microsoft.TeamFoundation.WorkItemTracking.Internals.IWorkItemSaveLinkDataHelper.ResetWorkItemLinkInfo();
    private sealed virtual override void Microsoft.TeamFoundation.WorkItemTracking.Internals.IWorkItemSaveLinkDataHelper.AddWorkItemLinkInfo(WorkItemLinkInfo link);
    internal List`1<WorkItemLinkInfo> get_LinkInfoToUpdate();
}
[ObsoleteAttribute("For more information please see documentation at http://aka.ms/witclientom")]
public class Microsoft.TeamFoundation.WorkItemTracking.Client.WorkItemLinkEventArgs : WorkItemEventArgs {
    private object m_updatedItem;
    private LinkAction m_action;
    public object ChangedLink { get; }
    public LinkAction Action { get; }
    public WorkItemLinkEventArgs(object collection, object updatedItem, LinkAction action);
    public object get_ChangedLink();
    public LinkAction get_Action();
}
[ObsoleteAttribute("For more information please see documentation at http://aka.ms/witclientom")]
public class Microsoft.TeamFoundation.WorkItemTracking.Client.WorkItemLinkInfo : ValueType {
    public int SourceId;
    public int TargetId;
    public int LinkTypeId;
    public bool IsLocked;
    public virtual int GetHashCode();
    public virtual bool Equals(object obj);
    public bool Equals(WorkItemLinkInfo other);
    public static bool op_Equality(WorkItemLinkInfo workItemLinkInfo1, WorkItemLinkInfo workItemLinkInfo2);
    public static bool op_Inequality(WorkItemLinkInfo workItemLinkInfo1, WorkItemLinkInfo workItemLinkInfo2);
}
[ObsoleteAttribute("For more information please see documentation at http://aka.ms/witclientom")]
public class Microsoft.TeamFoundation.WorkItemTracking.Client.WorkItemLinkType : object {
    private static int TopologyMask;
    private string m_referenceName;
    private UInt32 m_rules;
    private bool m_isDeleted;
    private WorkItemLinkTypeEnd m_forwardEnd;
    private WorkItemLinkTypeEnd m_reverseEnd;
    private WorkItemStore m_store;
    public WorkItemLinkTypeEnd ForwardEnd { get; }
    public WorkItemLinkTypeEnd ReverseEnd { get; }
    public string ReferenceName { get; }
    public bool IsDirectional { get; }
    public bool IsNonCircular { get; }
    public bool IsOneToMany { get; }
    public bool IsActive { get; }
    public bool CanDelete { get; }
    public bool CanEdit { get; }
    public Topology LinkTopology { get; }
    internal WorkItemStore Store { get; }
    [EditorBrowsableAttribute("1")]
public bool IsDeleted { get; }
    internal WorkItemLinkType(WorkItemStore store, PsLinkTypeMetadataRecord r);
    public WorkItemLinkTypeEnd get_ForwardEnd();
    public WorkItemLinkTypeEnd get_ReverseEnd();
    public XmlDocument Export();
    public string get_ReferenceName();
    public bool get_IsDirectional();
    public bool get_IsNonCircular();
    public bool get_IsOneToMany();
    public bool get_IsActive();
    public bool get_CanDelete();
    public bool get_CanEdit();
    public Topology get_LinkTopology();
    internal WorkItemStore get_Store();
    [EditorBrowsableAttribute("1")]
public void Delete();
    [EditorBrowsableAttribute("1")]
public void Activate();
    [EditorBrowsableAttribute("1")]
public void Deactivate();
    public bool get_IsDeleted();
    internal static Topology GetTopology(UInt32 topology);
    private void CheckDeleted();
    internal static XmlDocument Translate(WorkItemStore ws, XmlElement linkTypesElement, bool insertsOnly);
    private void Update(XmlDocument xml);
}
[DefaultMemberAttribute("Item")]
[ObsoleteAttribute("For more information please see documentation at http://aka.ms/witclientom")]
public class Microsoft.TeamFoundation.WorkItemTracking.Client.WorkItemLinkTypeCollection : object {
    [CompilerGeneratedAttribute]
private ImportEventHandler ImportEventHandler;
    private WorkItemStore m_store;
    private Dictionary`2<string, WorkItemLinkType> m_mapByName;
    private WorkItemLinkTypeEndCollection m_endsCollection;
    public int Count { get; }
    public WorkItemLinkType Item { get; }
    public WorkItemLinkTypeEndCollection LinkTypeEnds { get; }
    internal WorkItemStore Store { get; }
    internal WorkItemLinkTypeCollection(WorkItemStore store);
    [CompilerGeneratedAttribute]
public void add_ImportEventHandler(ImportEventHandler value);
    [CompilerGeneratedAttribute]
public void remove_ImportEventHandler(ImportEventHandler value);
    public XmlDocument Export();
    public void Import(string definitionXml);
    public void Import(XmlElement definitionElement);
    [EditorBrowsableAttribute("1")]
public void Import(string definitionXml, bool insertsOnly);
    public void Validate(string definitionXml);
    public int get_Count();
    public WorkItemLinkType get_Item(string linkTypeReferenceName);
    public bool Contains(string linkTypeReferenceName);
    public bool TryGetByName(string linkTypeReferenceName, WorkItemLinkType& linkType);
    public WorkItemLinkTypeEndCollection get_LinkTypeEnds();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    private sealed virtual override IEnumerator`1<WorkItemLinkType> System.Collections.Generic.IEnumerable<Microsoft.TeamFoundation.WorkItemTracking.Client.WorkItemLinkType>.GetEnumerator();
    internal WorkItemStore get_Store();
}
[ObsoleteAttribute("For more information please see documentation at http://aka.ms/witclientom")]
public class Microsoft.TeamFoundation.WorkItemTracking.Client.WorkItemLinkTypeEnd : object {
    private WorkItemLinkType m_linkType;
    private string m_name;
    private int m_id;
    private WorkItemLinkTypeEnd m_oppositeEnd;
    public WorkItemLinkType LinkType { get; }
    public string Name { get; }
    public string ImmutableName { get; }
    public int Id { get; }
    public WorkItemLinkTypeEnd OppositeEnd { get; internal set; }
    public bool IsForwardLink { get; }
    internal WorkItemLinkTypeEnd(WorkItemLinkType linkType, string name, int id);
    public WorkItemLinkType get_LinkType();
    public string get_Name();
    public string get_ImmutableName();
    public int get_Id();
    public WorkItemLinkTypeEnd get_OppositeEnd();
    internal void set_OppositeEnd(WorkItemLinkTypeEnd value);
    public bool get_IsForwardLink();
}
[DefaultMemberAttribute("Item")]
[ObsoleteAttribute("For more information please see documentation at http://aka.ms/witclientom")]
public class Microsoft.TeamFoundation.WorkItemTracking.Client.WorkItemLinkTypeEndCollection : object {
    private Dictionary`2<string, WorkItemLinkTypeEnd> m_mapByName;
    private Dictionary`2<int, WorkItemLinkTypeEnd> m_mapById;
    public int Count { get; }
    public WorkItemLinkTypeEnd Item { get; }
    internal WorkItemLinkTypeEndCollection(WorkItemStore store, Dictionary`2<string, WorkItemLinkType> linkTypes);
    public int get_Count();
    public WorkItemLinkTypeEnd get_Item(string linkTypeEndName);
    public bool Contains(int id);
    public bool Contains(string linkTypeName);
    public WorkItemLinkTypeEnd GetById(int id);
    public bool TryGetById(int id, WorkItemLinkTypeEnd& linkTypeEnd);
    public bool TryGetByName(string linkTypeEndName, WorkItemLinkTypeEnd& linkTypeEnd);
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    private sealed virtual override IEnumerator`1<WorkItemLinkTypeEnd> System.Collections.Generic.IEnumerable<Microsoft.TeamFoundation.WorkItemTracking.Client.WorkItemLinkTypeEnd>.GetEnumerator();
}
[ObsoleteAttribute("For more information please see documentation at http://aka.ms/witclientom")]
public class Microsoft.TeamFoundation.WorkItemTracking.Client.WorkItemLinkValidationException : ValidationException {
    private Type m_type;
    private WorkItemLinkInfo m_link;
    public Type ExceptionType { get; public set; }
    public WorkItemLinkInfo LinkInfo { get; public set; }
    public WorkItemLinkValidationException(string message);
    public WorkItemLinkValidationException(string message, Exception innerException);
    public WorkItemLinkValidationException(string message, Exception innerException, Type subtype);
    public Type get_ExceptionType();
    public void set_ExceptionType(Type value);
    public WorkItemLinkInfo get_LinkInfo();
    public void set_LinkInfo(WorkItemLinkInfo value);
}
[ObsoleteAttribute("For more information please see documentation at http://aka.ms/witclientom")]
public class Microsoft.TeamFoundation.WorkItemTracking.Client.WorkItemOperationError : object {
    private int m_id;
    private Exception m_exception;
    public int Id { get; }
    public Exception Exception { get; }
    internal WorkItemOperationError(int id, Exception exception);
    public int get_Id();
    public Exception get_Exception();
}
[ObsoleteAttribute("For more information please see documentation at http://aka.ms/witclientom")]
public class Microsoft.TeamFoundation.WorkItemTracking.Client.WorkItemPreSaveEventHandler : MulticastDelegate {
    public WorkItemPreSaveEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, WorkItemEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, WorkItemEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
[ObsoleteAttribute("For more information please see documentation at http://aka.ms/witclientom")]
public class Microsoft.TeamFoundation.WorkItemTracking.Client.WorkItemStore : object {
    internal static string IdentityFieldCacheFileName;
    internal static string IdentityFieldCacheHeaderFileName;
    [CompilerGeneratedAttribute]
private bool <IsObsolete>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<DateTime> <ObsoleteDate>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <DebugMode>k__BackingField;
    private static int LCID_INSTALLED;
    private static int LCID_SUPPORTED;
    private static int LOCALE_INVARIANT;
    private static int NORM_IGNORECASE;
    [CompilerGeneratedAttribute]
private ImportEventHandler ImportEventHandler;
    [CompilerGeneratedAttribute]
private MetadataChangeEventHandler MetadataChanging;
    [CompilerGeneratedAttribute]
private MetadataChangeEventHandler MetadataChanged;
    private ReadOnlyDictionary`2<string, IdentityFieldValue> m_identityValueCache;
    private TfsTeamProjectCollection m_teamProjectCollection;
    private StoredQueryProvider m_queryProvider;
    private QueryHierarchyProvider m_queryHierarchyProvider;
    private QueryHierarchy2Provider m_queryHierarchy2Provider;
    private StringComparer m_serverStringComparer;
    private CultureInfo m_serverCulture;
    private string m_wsUrl;
    private string m_attachmentServerUrl;
    private Cache m_metadata;
    private ProjectCollection m_projects;
    private FieldDefinitionCollection m_fieldDefinitionCollection;
    private RegisteredLinkTypeCollection m_registeredLinkTypeCollection;
    private WorkItemLinkTypeCollection m_workItemLinkTypeCollection;
    private bool m_IsEverConnected;
    private Datastore m_psDatastore;
    private long m_latestStamp;
    private long m_latestIdentityFieldCacheStamp;
    private string m_userIdentityName;
    private WorkItemServer m_clientService;
    private ServerInfo m_serverInfo;
    private WorkItemStoreFlags m_workItemStoreFlags;
    internal static string CacheDirParam;
    private string m_cacheDir;
    private object m_locker;
    private int m_metadataVersion;
    internal Dictionary`2<int, Node> m_cachedNodes;
    internal int m_roundtripCount;
    internal int m_roundtripTicks;
    private static int c_batchSaveSizeDev11AndOnward;
    private static int c_batchSaveSizePriorDev11;
    private static Guid SoapAccessBlockedSpecialGuid;
    public CultureInfo CultureInfo { get; }
    public TimeZone TimeZone { get; }
    public bool IsObsolete { get; private set; }
    public Nullable`1<DateTime> ObsoleteDate { get; private set; }
    [EditorBrowsableAttribute("1")]
public StringComparer ServerStringComparer { get; }
    internal bool DebugMode { get; internal set; }
    internal CultureInfo ServerCulture { get; }
    public ProjectCollection Projects { get; }
    public FieldDefinitionCollection FieldDefinitions { get; }
    public TfsTeamProjectCollection TeamProjectCollection { get; }
    [EditorBrowsableAttribute("1")]
public WorkItemServer ClientService { get; }
    public RegisteredLinkTypeCollection RegisteredLinkTypes { get; }
    public WorkItemLinkTypeCollection WorkItemLinkTypes { get; }
    public WorkItemStoreDiagnostics Diagnostics { get; }
    [ObsoleteAttribute("Use TfsConnection.ApplicationName instead.")]
public string CallingProcessIdentity { get; public set; }
    public UserDisplayMode UserDisplayMode { get; }
    public ServerInfo ServerInfo { get; }
    public int MaxBulkUpdateBatchSize { get; }
    public bool IsIdentityFieldSupported { get; }
    public bool BypassRules { get; }
    internal int MetadataVersion { get; }
    internal StoredQueryProvider QueryProvider { get; }
    [EditorBrowsableAttribute("1")]
public QueryHierarchyProvider QueryHierarchyProvider { get; }
    [EditorBrowsableAttribute("1")]
public QueryHierarchy2Provider QueryHierarchy2Provider { get; }
    [EditorBrowsableAttribute("1")]
public string WebServiceUrl { get; }
    internal string AttachmentServerUrl { get; }
    internal string UserAccountName { get; }
    internal string UserFriendlyName { get; }
    [EditorBrowsableAttribute("1")]
public string UserDisplayName { get; }
    public string UserIdentityName { get; }
    [EditorBrowsableAttribute("1")]
public string UserSid { get; }
    internal object Locker { get; }
    internal Datastore PsDatastore { get; }
    [EditorBrowsableAttribute("1")]
public Cache Metadata { get; }
    internal string CacheDirectory { get; }
    internal string IdentityFieldCacheLocation { get; }
    internal string IdentityFieldCacheFile { get; }
    internal string IdentityFieldCacheHeaderFile { get; }
    internal ReadOnlyDictionary`2<string, IdentityFieldValue> IdentityValueCache { get; }
    internal bool IsCachingConstantStrings { get; }
    public WorkItemStore(string teamSystemName);
    public WorkItemStore(string teamSystemName, WorkItemStoreFlags workItemStoreFlags);
    public WorkItemStore(TfsTeamProjectCollection teamProjectCollection);
    public WorkItemStore(TfsTeamProjectCollection teamProjectCollection, WorkItemStoreFlags workItemStoreFlags);
    private static WorkItemStore();
    private sealed virtual override void Microsoft.TeamFoundation.Client.ITfsTeamProjectCollectionObject.Initialize(TfsTeamProjectCollection teamProjectCollection);
    internal void InitializeInternal();
    [EditorBrowsableAttribute("1")]
public void InvalidateCacheStamp();
    public CultureInfo get_CultureInfo();
    public TimeZone get_TimeZone();
    [CompilerGeneratedAttribute]
public bool get_IsObsolete();
    [CompilerGeneratedAttribute]
private void set_IsObsolete(bool value);
    [CompilerGeneratedAttribute]
public Nullable`1<DateTime> get_ObsoleteDate();
    [CompilerGeneratedAttribute]
private void set_ObsoleteDate(Nullable`1<DateTime> value);
    public StringComparer get_ServerStringComparer();
    [CompilerGeneratedAttribute]
internal void set_DebugMode(bool value);
    [CompilerGeneratedAttribute]
internal bool get_DebugMode();
    internal CultureInfo get_ServerCulture();
    public WorkItemCollection Query(string wiql);
    public WorkItemCollection Query(string wiql, IDictionary context);
    public WorkItemCollection Query(Int32[] ids, string wiql);
    public WorkItemCollection Query(Int32[] ids, Int32[] revs, string wiql);
    public WorkItemCollection Query(Int32[] ids, string wiql, DateTime asof);
    public WorkItemCollection Query(BatchReadParameterCollection batchReadParams, string wiql);
    public int QueryCount(string wiql);
    public int QueryCount(string wiql, IDictionary context);
    public WorkItem GetWorkItem(int id);
    public WorkItem GetWorkItem(int id, DateTime at);
    public WorkItem GetWorkItem(int id, int revision);
    public WorkItem GetWorkItem(Uri uri);
    public WorkItem GetWorkItem(Uri uri, DateTime at);
    public WorkItem GetWorkItem(Uri uri, int revision);
    public Uri[] GetReferencingWorkItemUris(Uri referencedUri);
    public Dictionary`2<string, Int32[]> GetWorkItemIdsForArtifactUris(String[] artifactUriList, DateTime asOfDate);
    public BatchSaveError[] BatchSave(WorkItem[] workitems);
    public BatchSaveError[] BatchSave(WorkItem[] workitems, SaveFlags saveFlags);
    internal BatchSaveError[] SaveWorkItems(WorkItem[] workitems, bool bulk, SaveFlags saveFlags);
    private int CreateErrorsFromExceptions(WorkItem[] workItems, Exception[] workItemExceptions, BatchSaveError[]& errors);
    private BatchSaveError[] TryBatchMergeWorkItem(WorkItem[] workItems, SaveFlags saveFlags, Exception[] workItemExceptions);
    private void TryMergeWorkItem(WorkItem wi, SaveFlags saveFlags, Exception originalException);
    public void RefreshCache(bool forceRefresh);
    public void RefreshCache();
    private BackendCallData RefreshCacheInternal(BackendCallData& data);
    private static bool IsValidLocale(UInt32 lcid, UInt32 dwFlags);
    public bool SyncToCache();
    public ProjectCollection get_Projects();
    public FieldDefinitionCollection get_FieldDefinitions();
    [ObsoleteAttribute("Please use GetQueryDefinition instead")]
public StoredQuery GetStoredQuery(Guid guid);
    public QueryDefinition GetQueryDefinition(Guid guid);
    public void ImportGlobalLists(string lists);
    public void ImportGlobalLists(XmlElement listsElement);
    [CompilerGeneratedAttribute]
public void add_ImportEventHandler(ImportEventHandler value);
    [CompilerGeneratedAttribute]
public void remove_ImportEventHandler(ImportEventHandler value);
    public XmlDocument ExportGlobalLists();
    [CompilerGeneratedAttribute]
public void add_MetadataChanging(MetadataChangeEventHandler value);
    [CompilerGeneratedAttribute]
public void remove_MetadataChanging(MetadataChangeEventHandler value);
    [CompilerGeneratedAttribute]
public void add_MetadataChanged(MetadataChangeEventHandler value);
    [CompilerGeneratedAttribute]
public void remove_MetadataChanged(MetadataChangeEventHandler value);
    public TfsTeamProjectCollection get_TeamProjectCollection();
    public WorkItemServer get_ClientService();
    public RegisteredLinkTypeCollection get_RegisteredLinkTypes();
    public WorkItemLinkTypeCollection get_WorkItemLinkTypes();
    public WorkItemStoreDiagnostics get_Diagnostics();
    public string get_CallingProcessIdentity();
    public void set_CallingProcessIdentity(string value);
    public UserDisplayMode get_UserDisplayMode();
    public ServerInfo get_ServerInfo();
    public int get_MaxBulkUpdateBatchSize();
    public bool get_IsIdentityFieldSupported();
    public bool get_BypassRules();
    public ICollection`1<WorkItemOperationError> DestroyWorkItems(IEnumerable`1<int> ids);
    private void PreSave(WorkItem[] workItems);
    private void PostSave(WorkItem[] workItems);
    private void PostSaveError(WorkItem[] workItems);
    private string GetDefaultCacheDirectory();
    private string GetInstanceIdentifier();
    private void ReadRegistrationData();
    internal void OnMetadataChange(PsMetadataTypeMask mask);
    [EditorBrowsableAttribute("1")]
public void ResetCachedData();
    internal int get_MetadataVersion();
    internal StoredQueryProvider get_QueryProvider();
    [EditorBrowsableAttribute("1")]
public QueryHierarchy GetQueryHierarchy(Project project);
    internal QueryHierarchy2 GetQueryHierarchy2(Project project, bool refresh);
    public QueryHierarchyProvider get_QueryHierarchyProvider();
    public QueryHierarchy2Provider get_QueryHierarchy2Provider();
    public string get_WebServiceUrl();
    internal string get_AttachmentServerUrl();
    internal string get_UserAccountName();
    internal string get_UserFriendlyName();
    public string get_UserDisplayName();
    public string get_UserIdentityName();
    public string get_UserSid();
    internal object get_Locker();
    internal DateTime ConvertToLocalTime(DateTime dt);
    internal DateTime ConvertToUniversalTime(DateTime dt);
    internal Datastore get_PsDatastore();
    public Cache get_Metadata();
    internal static Node TryGetNodeFromSnapshot(Snapshot snapshot, int id);
    internal static Node GetNodeFromSnapshot(Snapshot snapshot, int id);
    internal Node TryGetNode(int id);
    internal Node GetNode(int id);
    internal Node GetNode(PsTreeMetadataRecord record, Node parent);
    internal int TreeIdFromPath(int projectId, string path, PsCSSType type);
    [EditorBrowsableAttribute("1")]
public string TreeIdToPath(int id);
    internal string TreeIdToNodeName(int id);
    internal string TreeIdToNodeLevel(int id, PsCoreFieldsEnum f);
    internal int TreeIdToProjectId(int id);
    [EditorBrowsableAttribute("1")]
public string GetPersonNameById(int id);
    internal bool VerifyTreeId(int projectId, int nodeId, PsCSSType type);
    [EditorBrowsableAttribute("1")]
public PsUserRightsMask GetNodePermissions(int nodeId);
    internal string get_CacheDirectory();
    internal string get_IdentityFieldCacheLocation();
    internal string get_IdentityFieldCacheFile();
    internal string get_IdentityFieldCacheHeaderFile();
    internal bool IsIdentityFieldCacheLatest();
    internal void ClearIdentityFieldCache();
    internal bool TryReadIdentityFieldCache(Dictionary`2& identityFieldCache);
    internal void SaveIdentityFieldCache(Dictionary`2<int, bool> identityFields);
    internal ReadOnlyDictionary`2<string, IdentityFieldValue> get_IdentityValueCache();
    public string GetValidDisplayName(TeamFoundationIdentity identity);
    public string GetValidDisplayName(string displayName, string uniqueName);
    public bool TryFindIdentity(string displayPart, IdentityFieldValue& fieldValue);
    internal bool Equals(WorkItemStore store);
    internal bool get_IsCachingConstantStrings();
    [EditorBrowsableAttribute("1")]
public void CacheConstantStrings();
    [EditorBrowsableAttribute("1")]
public void ResetConstantStringCache();
    private BackendCallData BeginBackendCall();
    private MetadataTableHaveEntry[] GetMetadataHave(bool forceRefresh, String& dbStamp);
    private long GetLatestTableStamp(MetadataTableHaveEntry[] metadataHaveEntries);
    private long GetLatestIdentityFieldCacheStamp(MetadataTableHaveEntry[] metadataHaveEntries);
    private BackendCallData BeginBackendCall(bool forceRefresh);
    private void EndBackendCall(BackendCallData data);
    internal void LoadWorkItem(int id, int rev, Nullable`1<DateTime> asof, IWorkItemRowSets& witem);
    internal void QueryWorkItems(string requestid, XmlElement queryXml, QuerySortOrderEntry[] sort, Int32[]& ids, DateTime& asof);
    internal void QueryRevisions(string requestId, XmlElement queryXml, QuerySortOrderEntry[] sort, Int32[]& ids, Int32[]& revs, DateTime& asof);
    private static void TraceQuery(XmlElement queryXml, QuerySortOrderEntry[] sort);
    internal void QueryWorkItemLinks(string requestid, XmlElement queryXml, QuerySortOrderEntry[] sort, WorkItemRelation[]& links, DateTime& asof);
    internal int QueryWorkItemCount(string requestid, XmlElement queryXml, DateTime& asof);
    internal void PageWorkItems(Int32[] ids, Int32[] revs, String[] columns, Int32[] longTextColumns, Nullable`1<DateTime> asof, IPagedItemsRowSets& items);
    [EditorBrowsableAttribute("1")]
public void SendUpdatePackage(XmlElement package, XmlElement& result, bool bulk);
    [EditorBrowsableAttribute("1")]
public List`1<string> GetGlobalAndProjectGroups(int projectId, bool includeGlobal);
    [EditorBrowsableAttribute("1")]
public IEnumerable`1<IdentityFieldValue> GetGlobalAndProjectGroups(Guid projectGuid, bool includeGlobal);
    private MetadataRowSetNames TypeToName(PsMetadataTypeMask t);
    internal String[] GetRuleEngineValues(int c, IntPtr prgpszValues);
    [CompilerGeneratedAttribute]
private bool <get_UserIdentityName>b__132_0(KeyValuePair`2<string, IdentityFieldValue> x);
}
[ObsoleteAttribute("For more information please see documentation at http://aka.ms/witclientom")]
public class Microsoft.TeamFoundation.WorkItemTracking.Client.WorkItemStoreDiagnostics : object {
    private WorkItemStore m_store;
    public int RoundTripCount { get; }
    public long RoundTripTime { get; }
    public WorkItemStoreDiagnostics(WorkItemStore store);
    public int get_RoundTripCount();
    public long get_RoundTripTime();
}
[ObsoleteAttribute("For more information please see documentation at http://aka.ms/witclientom")]
public enum Microsoft.TeamFoundation.WorkItemTracking.Client.WorkItemStoreFlags : Enum {
    public int value__;
    public static WorkItemStoreFlags None;
    public static WorkItemStoreFlags BypassRules;
}
[EditorBrowsableAttribute("1")]
[ObsoleteAttribute("For more information please see documentation at http://aka.ms/witclientom")]
public class Microsoft.TeamFoundation.WorkItemTracking.Client.WorkItemSyncData : object {
    [CompilerGeneratedAttribute]
private IWorkItemRowSets <RowSets>k__BackingField;
    [CompilerGeneratedAttribute]
private int <DataVersion>k__BackingField;
    [CompilerGeneratedAttribute]
private WorkItem <Item>k__BackingField;
    public IWorkItemRowSets RowSets { get; private set; }
    public int DataVersion { get; private set; }
    public WorkItem Item { get; private set; }
    public WorkItemSyncData(IWorkItemRowSets rowSets, int dataVersion, WorkItem item);
    [CompilerGeneratedAttribute]
public IWorkItemRowSets get_RowSets();
    [CompilerGeneratedAttribute]
private void set_RowSets(IWorkItemRowSets value);
    [CompilerGeneratedAttribute]
public int get_DataVersion();
    [CompilerGeneratedAttribute]
private void set_DataVersion(int value);
    [CompilerGeneratedAttribute]
public WorkItem get_Item();
    [CompilerGeneratedAttribute]
private void set_Item(WorkItem value);
}
[ObsoleteAttribute("For more information please see documentation at http://aka.ms/witclientom")]
public class Microsoft.TeamFoundation.WorkItemTracking.Client.WorkItemType : object {
    [CompilerGeneratedAttribute]
private static ImportEventHandler ValidationEventHandler;
    private PsWorkItemTypeMetadataRecord m_record;
    private WorkItemStore m_store;
    private Project m_project;
    private FieldDefinitionCollection m_scopedFDC;
    private string m_name;
    private string m_descr;
    private string m_form;
    public string Name { get; }
    public Project Project { get; }
    public string DisplayForm { get; }
    public FieldDefinitionCollection FieldDefinitions { get; }
    public string Description { get; }
    public WorkItemStore Store { get; }
    [EditorBrowsableAttribute("1")]
public string CacheMoniker { get; }
    internal int Id { get; }
    internal PsWorkItemTypeMetadataRecord MetadataRecord { get; }
    internal WorkItemType(WorkItemStore store, Project project, PsWorkItemTypeMetadataRecord record);
    public string get_Name();
    public Project get_Project();
    public string get_DisplayForm();
    public FieldDefinitionCollection get_FieldDefinitions();
    public XmlDocument Export(bool includeGlobalListsFlag);
    public string GetNextState(string currentState, string action);
    internal IDictionary`2<string, IEnumerable`1<WorkItemStateTransition>> GetStateTransitions();
    public WorkItem NewWorkItem();
    public static void Validate(Project project, string definition);
    public static void Validate(Project project, string definition, string methodologyName);
    public static void Validate(WorkItemStore store, string definition);
    public static void Validate(WorkItemStore store, string definition, string methodologyName);
    [CompilerGeneratedAttribute]
public static void add_ValidationEventHandler(ImportEventHandler value);
    [CompilerGeneratedAttribute]
public static void remove_ValidationEventHandler(ImportEventHandler value);
    public string get_Description();
    public WorkItemStore get_Store();
    public string get_CacheMoniker();
    internal int get_Id();
    internal string GetFieldHelpText(int fieldId);
    internal PsWorkItemTypeMetadataRecord get_MetadataRecord();
}
[DefaultMemberAttribute("Item")]
[ObsoleteAttribute("For more information please see documentation at http://aka.ms/witclientom")]
public class Microsoft.TeamFoundation.WorkItemTracking.Client.WorkItemTypeCollection : ReadOnlyList {
    [CompilerGeneratedAttribute]
private ImportEventHandler ImportEventHandler;
    private WorkItemType[] m_witypes;
    private WorkItemStore m_store;
    private Project m_project;
    public int Count { get; }
    public WorkItemType Item { get; }
    public WorkItemType Item { get; }
    internal WorkItemTypeCollection(WorkItemStore store, Project project);
    public void Import(string definition);
    public void Import(XmlElement definitionElement);
    public void Import(string definition, string methodologyName);
    public void Import(XmlElement definitionElement, string methodologyName);
    [CompilerGeneratedAttribute]
public void add_ImportEventHandler(ImportEventHandler value);
    [CompilerGeneratedAttribute]
public void remove_ImportEventHandler(ImportEventHandler value);
    public virtual int get_Count();
    public WorkItemType get_Item(int index);
    public WorkItemType get_Item(string typeName);
    public bool Contains(string typeName);
    internal WorkItemType GetById(int id);
    public int IndexOf(WorkItemType value);
    public bool Contains(WorkItemType value);
    protected virtual object GetItem(int index);
}
[ObsoleteAttribute("For more information please see documentation at http://aka.ms/witclientom")]
public class Microsoft.TeamFoundation.WorkItemTracking.Client.WorkItemTypeDeniedOrNotExistException : DeniedOrNotExistException {
    public WorkItemTypeDeniedOrNotExistException(string message);
    public WorkItemTypeDeniedOrNotExistException(Exception innerException);
    public WorkItemTypeDeniedOrNotExistException(string message, Exception innerException);
    protected WorkItemTypeDeniedOrNotExistException(SerializationInfo info, StreamingContext context);
}
[ObsoleteAttribute("For more information please see documentation at http://aka.ms/witclientom")]
public class Microsoft.TeamFoundation.WorkItemTracking.Client.WorkItemTypeTemplate : object {
    [CompilerGeneratedAttribute]
private string <Template>k__BackingField;
    public string Template { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Template();
    [CompilerGeneratedAttribute]
public void set_Template(string value);
}
[ObsoleteAttribute("For more information please see documentation at http://aka.ms/witclientom")]
internal class Microsoft.TeamFoundation.WorkItemTracking.Common.Enumerator`1 : object {
    private int m_index;
    private IList m_list;
    private int m_version;
    private object System.Collections.IEnumerator.Current { get; }
    public T Current { get; }
    internal Enumerator`1(IList list);
    private sealed virtual override object System.Collections.IEnumerator.get_Current();
    public T get_Current();
    public sealed virtual bool MoveNext();
    public sealed virtual void Reset();
    private int GetVersionTag();
}
[ObsoleteAttribute("For more information please see documentation at http://aka.ms/witclientom")]
public interface Microsoft.TeamFoundation.WorkItemTracking.Common.IVersionTag {
    public int VersionTag { get; }
    public abstract virtual int get_VersionTag();
}
[ObsoleteAttribute("For more information please see documentation at http://aka.ms/witclientom")]
internal static class Microsoft.TeamFoundation.WorkItemTracking.Common.ListHelper : object {
    public static void CopyTo(IList t, Array array, int index);
    public static int IndexOf(IList t, object value);
    public static bool Contains(IList t, object value);
    public static void Remove(IList t, object value);
}
[ObsoleteAttribute("For more information please see documentation at http://aka.ms/witclientom")]
public abstract class Microsoft.TeamFoundation.WorkItemTracking.Common.OrderedVariableSizeList : object {
    protected int m_version;
    public int Count { get; }
    [ObsoleteAttribute("Direct using of o.IsSynchronized is obsolete, use ((ICollection)o).IsSyncronized")]
public bool IsSynchronized { get; }
    [ObsoleteAttribute("Direct using of o.SyncRoot is obsolete, use ((ICollection)o).SyncRoot")]
public object SyncRoot { get; }
    [ObsoleteAttribute("Direct using of o.IsFixedSize is obsolete, use ((IList)o).IsFixedSize")]
public bool IsFixedSize { get; }
    [ObsoleteAttribute("Direct using of o.IsReadOnly is obsolete, use ((IList)o).IsReadOnly")]
public bool IsReadOnly { get; }
    private bool System.Collections.ICollection.IsSynchronized { get; }
    private object System.Collections.ICollection.SyncRoot { get; }
    private int System.Collections.ICollection.Count { get; }
    private bool System.Collections.IList.IsFixedSize { get; }
    private bool System.Collections.IList.IsReadOnly { get; }
    private object System.Collections.IList.Item { get; private set; }
    private int Microsoft.TeamFoundation.WorkItemTracking.Common.IVersionTag.VersionTag { get; }
    public abstract virtual int get_Count();
    public abstract virtual void RemoveAt(int index);
    public abstract virtual void Clear();
    protected abstract virtual object GetItem(int index);
    protected abstract virtual void SetItem(int index, object value);
    protected abstract virtual int AddItem(object value);
    protected abstract virtual void InsertItem(int index, object value);
    protected virtual int IndexOfItem(object value);
    public sealed virtual IEnumerator GetEnumerator();
    public bool get_IsSynchronized();
    public object get_SyncRoot();
    [ObsoleteAttribute("Direct using of o.CopyTo is obsolete, use ((ICollection)o).CopyTo")]
public void CopyTo(Array array, int index);
    public bool get_IsFixedSize();
    public bool get_IsReadOnly();
    private sealed virtual override bool System.Collections.ICollection.get_IsSynchronized();
    private sealed virtual override object System.Collections.ICollection.get_SyncRoot();
    private sealed virtual override void System.Collections.ICollection.CopyTo(Array array, int index);
    private sealed virtual override int System.Collections.ICollection.get_Count();
    private sealed virtual override int System.Collections.IList.Add(object value);
    private sealed virtual override void System.Collections.IList.Clear();
    private sealed virtual override bool System.Collections.IList.Contains(object value);
    private sealed virtual override int System.Collections.IList.IndexOf(object value);
    private sealed virtual override void System.Collections.IList.Insert(int index, object value);
    private sealed virtual override void System.Collections.IList.Remove(object value);
    private sealed virtual override void System.Collections.IList.RemoveAt(int index);
    private sealed virtual override bool System.Collections.IList.get_IsFixedSize();
    private sealed virtual override bool System.Collections.IList.get_IsReadOnly();
    private sealed virtual override object System.Collections.IList.get_Item(int index);
    private sealed virtual override void System.Collections.IList.set_Item(int index, object value);
    private sealed virtual override int Microsoft.TeamFoundation.WorkItemTracking.Common.IVersionTag.get_VersionTag();
}
[ObsoleteAttribute("For more information please see documentation at http://aka.ms/witclientom")]
public abstract class Microsoft.TeamFoundation.WorkItemTracking.Common.ReadOnlyList : object {
    public int Count { get; }
    [ObsoleteAttribute("Direct using of o.IsSynchronized is obsolete, use ((ICollection)o).IsSyncronized")]
public bool IsSynchronized { get; }
    [ObsoleteAttribute("Direct using of o.SyncRoot is obsolete, use ((ICollection)o).SyncRoot")]
public object SyncRoot { get; }
    [ObsoleteAttribute("Direct using of o.IsFixedSize is obsolete, use ((IList)o).IsFixedSize")]
public bool IsFixedSize { get; }
    [ObsoleteAttribute("Direct using of o.IsReadOnly is obsolete, use ((IList)o).IsReadOnly")]
public bool IsReadOnly { get; }
    private bool System.Collections.ICollection.IsSynchronized { get; }
    private object System.Collections.ICollection.SyncRoot { get; }
    private int System.Collections.ICollection.Count { get; }
    private bool System.Collections.IList.IsFixedSize { get; }
    private bool System.Collections.IList.IsReadOnly { get; }
    private object System.Collections.IList.Item { get; private set; }
    public abstract virtual int get_Count();
    protected abstract virtual object GetItem(int index);
    public sealed virtual IEnumerator GetEnumerator();
    public bool get_IsSynchronized();
    public object get_SyncRoot();
    [ObsoleteAttribute("Direct using of o.CopyTo is obsolete, use ((ICollection)o).CopyTo")]
public void CopyTo(Array array, int index);
    public bool get_IsFixedSize();
    public bool get_IsReadOnly();
    private sealed virtual override bool System.Collections.ICollection.get_IsSynchronized();
    private sealed virtual override object System.Collections.ICollection.get_SyncRoot();
    private sealed virtual override void System.Collections.ICollection.CopyTo(Array array, int index);
    private sealed virtual override int System.Collections.ICollection.get_Count();
    private sealed virtual override int System.Collections.IList.Add(object value);
    private sealed virtual override void System.Collections.IList.Clear();
    private sealed virtual override bool System.Collections.IList.Contains(object value);
    private sealed virtual override int System.Collections.IList.IndexOf(object value);
    private sealed virtual override void System.Collections.IList.Insert(int index, object value);
    private sealed virtual override void System.Collections.IList.Remove(object value);
    private sealed virtual override void System.Collections.IList.RemoveAt(int index);
    private sealed virtual override bool System.Collections.IList.get_IsFixedSize();
    private sealed virtual override bool System.Collections.IList.get_IsReadOnly();
    private sealed virtual override object System.Collections.IList.get_Item(int index);
    private sealed virtual override void System.Collections.IList.set_Item(int index, object value);
}
[ObsoleteAttribute("For more information please see documentation at http://aka.ms/witclientom")]
public abstract class Microsoft.TeamFoundation.WorkItemTracking.Common.VariableSizeList : object {
    protected int m_version;
    public int Count { get; }
    [ObsoleteAttribute("Direct using of o.IsSynchronized is obsolete, use ((ICollection)o).IsSyncronized")]
public bool IsSynchronized { get; }
    [ObsoleteAttribute("Direct using of o.SyncRoot is obsolete, use ((ICollection)o).SyncRoot")]
public object SyncRoot { get; }
    [ObsoleteAttribute("Direct using of o.IsFixedSize is obsolete, use ((IList)o).IsFixedSize")]
public bool IsFixedSize { get; }
    [ObsoleteAttribute("Direct using of o.IsReadOnly is obsolete, use ((IList)o).IsReadOnly")]
public bool IsReadOnly { get; }
    private bool System.Collections.ICollection.IsSynchronized { get; }
    private object System.Collections.ICollection.SyncRoot { get; }
    private int System.Collections.ICollection.Count { get; }
    private bool System.Collections.IList.IsFixedSize { get; }
    private bool System.Collections.IList.IsReadOnly { get; }
    private object System.Collections.IList.Item { get; private set; }
    private int Microsoft.TeamFoundation.WorkItemTracking.Common.IVersionTag.VersionTag { get; }
    public abstract virtual int get_Count();
    public abstract virtual void RemoveAt(int index);
    public abstract virtual void Clear();
    protected abstract virtual object GetItem(int index);
    protected abstract virtual int AddItem(object value);
    protected virtual int IndexOfItem(object value);
    public sealed virtual IEnumerator GetEnumerator();
    public bool get_IsSynchronized();
    public object get_SyncRoot();
    [ObsoleteAttribute("Direct using of o.CopyTo is obsolete, use ((ICollection)o).CopyTo")]
public void CopyTo(Array array, int index);
    public bool get_IsFixedSize();
    public bool get_IsReadOnly();
    private sealed virtual override bool System.Collections.ICollection.get_IsSynchronized();
    private sealed virtual override object System.Collections.ICollection.get_SyncRoot();
    private sealed virtual override void System.Collections.ICollection.CopyTo(Array array, int index);
    private sealed virtual override int System.Collections.ICollection.get_Count();
    private sealed virtual override int System.Collections.IList.Add(object value);
    private sealed virtual override void System.Collections.IList.Clear();
    private sealed virtual override bool System.Collections.IList.Contains(object value);
    private sealed virtual override int System.Collections.IList.IndexOf(object value);
    private sealed virtual override void System.Collections.IList.Insert(int index, object value);
    private sealed virtual override void System.Collections.IList.Remove(object value);
    private sealed virtual override void System.Collections.IList.RemoveAt(int index);
    private sealed virtual override bool System.Collections.IList.get_IsFixedSize();
    private sealed virtual override bool System.Collections.IList.get_IsReadOnly();
    private sealed virtual override object System.Collections.IList.get_Item(int index);
    private sealed virtual override void System.Collections.IList.set_Item(int index, object value);
    private sealed virtual override int Microsoft.TeamFoundation.WorkItemTracking.Common.IVersionTag.get_VersionTag();
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("2")]
internal class System.Runtime.CompilerServices.RefSafetyRulesAttribute : Attribute {
    public int Version;
    public RefSafetyRulesAttribute(int );
}
