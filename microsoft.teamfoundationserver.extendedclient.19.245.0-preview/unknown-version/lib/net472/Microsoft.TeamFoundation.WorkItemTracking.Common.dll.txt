[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
internal class Microsoft.TeamFoundation.Common.Constants : ValueType {
    public static int MarkBaseUI;
    public static int MarkBaseOM;
    public static int MarkBaseProxy;
    public static int MarkBaseServer;
}
[EditorBrowsableAttribute("1")]
public enum Microsoft.TeamFoundation.Common.Mark : Enum {
    public int value__;
    public static Mark None;
    public static Mark ConnectBegin;
    public static Mark ConnectEnd;
    public static Mark QueryBegin;
    public static Mark QueryEnd;
    public static Mark QueryCountBegin;
    public static Mark QueryCountEnd;
    public static Mark WorkItemNewBegin;
    public static Mark WorkItemNewEnd;
    public static Mark WorkItemOpenBegin;
    public static Mark WorkItemOpenEnd;
    public static Mark WorkItemSaveBegin;
    public static Mark WorkItemSaveEnd;
    public static Mark WorkItemCopyBegin;
    public static Mark WorkItemCopyEnd;
    public static Mark StoredQuerySaveBegin;
    public static Mark StoredQuerySaveEnd;
    public static Mark AttachmentUploadBegin;
    public static Mark AttachmentUploadEnd;
    public static Mark DisplayItemBegin;
    public static Mark DisplayItemEnd;
    public static Mark SaveDataBegin;
    public static Mark SaveDataEnd;
    public static Mark TriageViewDisplayBegin;
    public static Mark TriageViewDisplayEnd;
    public static Mark TriageQueryRefreshBegin;
    public static Mark TriageQueryRefreshEnd;
    public static Mark GetMetadataBegin;
    public static Mark GetMetadataEnd;
    public static Mark AttachmentDownloadBegin;
    public static Mark AttachmentDownloadEnd;
    public static Mark GetQueryBegin;
    public static Mark GetQueryEnd;
    public static Mark GetQueriesBegin;
    public static Mark GetQueriesEnd;
    public static Mark SyncExternalStructureBegin;
    public static Mark SyncExternalStructureEnd;
    public static Mark SyncBisGroupsAndUsersBegin;
    public static Mark SyncBisGroupsAndUsersEnd;
    public static Mark RequestCancelBegin;
    public static Mark RequestCancelEnd;
    public static Mark GetReferencingWorkitemUrisBegin;
    public static Mark GetReferencingWorkitemUrisEnd;
    public static Mark SyncAccessControlListsBegin;
    public static Mark SyncAccessControlListsEnd;
    public static Mark PageItemsBegin;
    public static Mark PageItemsEnd;
    public static Mark ResultListRefreshBegin;
    public static Mark ResultListRefreshEnd;
    public static Mark WorkItemFormRenderBegin;
    public static Mark WorkItemFormRenderEnd;
    public static Mark PageItemsByPairsBegin;
    public static Mark PageItemsByPairsEnd;
    public static Mark WorkItemPartialOpenBegin;
    public static Mark WorkItemPartialOpenEnd;
    public static Mark BulkSaveBegin;
    public static Mark BulkSaveEnd;
    public static Mark ResultViewLastPageBegin;
    public static Mark ResultViewLastPageEnd;
    public static Mark ViewQueryBegin;
    public static Mark ViewQueryEnd;
    public static Mark GetListOfGroupsBegin;
    public static Mark GetListOfGroupsEnd;
    public static Mark GetWorkItemIdsForArtifactUrisBegin;
    public static Mark GetWorkItemIdsForArtifactUrisEnd;
    public static Mark GetQueryACLBegin;
    public static Mark GetQueryACLEnd;
    public static Mark ViewQueryACLBegin;
    public static Mark ViewQueryACLEnd;
    public static Mark QueryEditorRefreshBegin;
    public static Mark QueryEditorRefreshEnd;
    public static Mark NodePopulateBegin;
    public static Mark NodePopulateEnd;
    public static Mark UIConnectBegin;
    public static Mark UIConnectEnd;
    public static Mark UIQueryBegin;
    public static Mark UIQueryEnd;
    public static Mark UIQueryCountBegin;
    public static Mark UIQueryCountEnd;
    public static Mark UIWorkItemNewBegin;
    public static Mark UIWorkItemNewEnd;
    public static Mark UIWorkItemOpenBegin;
    public static Mark UIWorkItemOpenEnd;
    public static Mark UIWorkItemSaveBegin;
    public static Mark UIWorkItemSaveEnd;
    public static Mark UIWorkItemCopyBegin;
    public static Mark UIWorkItemCopyEnd;
    public static Mark UIStoredQuerySaveBegin;
    public static Mark UIStoredQuerySaveEnd;
    public static Mark UIAttachmentUploadBegin;
    public static Mark UIAttachmentUploadEnd;
    public static Mark UIDisplayItemBegin;
    public static Mark UIDisplayItemEnd;
    public static Mark UISaveDataBegin;
    public static Mark UISaveDataEnd;
    public static Mark UITriageViewDisplayBegin;
    public static Mark UITriageViewDisplayEnd;
    public static Mark UITriageQueryRefreshBegin;
    public static Mark UITriageQueryRefreshEnd;
    public static Mark UIQueryEditorRefreshBegin;
    public static Mark UIQueryEditorRefreshEnd;
    public static Mark UIResultListRefreshBegin;
    public static Mark UIResultListRefreshEnd;
    public static Mark UIWorkItemFormRenderBegin;
    public static Mark UIWorkItemFormRenderEnd;
    public static Mark UIGetListOfGroupsBegin;
    public static Mark UIGetListOfGroupsEnd;
    public static Mark UIResultViewLastPageBegin;
    public static Mark UIResultViewLastPageEnd;
    public static Mark UIViewQueryBegin;
    public static Mark UIViewQueryEnd;
    public static Mark UIViewQueryACLBegin;
    public static Mark UIViewQueryACLEnd;
    public static Mark UINodePopulateBegin;
    public static Mark UINodePopulateEnd;
    public static Mark OMConnectBegin;
    public static Mark OMConnectEnd;
    public static Mark OMQueryBegin;
    public static Mark OMQueryEnd;
    public static Mark OMQueryCountBegin;
    public static Mark OMQueryCountEnd;
    public static Mark OMWorkItemNewBegin;
    public static Mark OMWorkItemNewEnd;
    public static Mark OMWorkItemOpenBegin;
    public static Mark OMWorkItemOpenEnd;
    public static Mark OMWorkItemSaveBegin;
    public static Mark OMWorkItemSaveEnd;
    public static Mark OMBatchSaveBegin;
    public static Mark OMBatchSaveEnd;
    public static Mark OMWorkItemCopyBegin;
    public static Mark OMWorkItemCopyEnd;
    public static Mark OMStoredQuerySaveBegin;
    public static Mark OMStoredQuerySaveEnd;
    public static Mark OMAttachmentUploadBegin;
    public static Mark OMAttachmentUploadEnd;
    public static Mark OMGetReferencingWorkItemUrisBegin;
    public static Mark OMGetReferencingWorkItemUrisEnd;
    public static Mark OMWorkItemPartialOpenBegin;
    public static Mark OMWorkItemPartialOpenEnd;
    public static Mark ProxyConnectBegin;
    public static Mark ProxyConnectEnd;
    public static Mark ProxyQueryBegin;
    public static Mark ProxyQueryEnd;
    public static Mark ProxyQueryCountBegin;
    public static Mark ProxyQueryCountEnd;
    public static Mark ProxyGetWorkItemBegin;
    public static Mark ProxyGetWorkItemEnd;
    public static Mark ProxyUpdateBegin;
    public static Mark ProxyUpdateEnd;
    public static Mark ProxyBulkUpdateBegin;
    public static Mark ProxyBulkUpdateEnd;
    public static Mark ProxyStoredQuerySaveBegin;
    public static Mark ProxyStoredQuerySaveEnd;
    public static Mark ProxyUploadFileBegin;
    public static Mark ProxyUploadFileEnd;
    public static Mark ProxyGetMetadataBegin;
    public static Mark ProxyGetMetadataEnd;
    public static Mark ProxyDownloadFileBegin;
    public static Mark ProxyDownloadFileEnd;
    public static Mark ProxyGetQueryBegin;
    public static Mark ProxyGetQueryEnd;
    public static Mark ProxyGetQueriesBegin;
    public static Mark ProxyGetQueriesEnd;
    public static Mark ProxyGetQueryACLBegin;
    public static Mark ProxyGetQueryACLEnd;
    public static Mark ProxySyncExternalStructuresBegin;
    public static Mark ProxySyncExternalStructuresEnd;
    public static Mark ProxySyncBisGroupsAndUsersBegin;
    public static Mark ProxySyncBisGroupsAndUsersEnd;
    public static Mark ProxyRequestCancelBegin;
    public static Mark ProxyRequestCancelEnd;
    public static Mark ProxyGetReferencingWorkitemUrisBegin;
    public static Mark ProxyGetReferencingWorkitemUrisEnd;
    public static Mark ProxyGetWorkItemIdsForArtifactUrisBegin;
    public static Mark ProxyGetWorkItemIdsForArtifactUrisEnd;
    public static Mark ProxySyncAccessControlListsBegin;
    public static Mark ProxySyncAccessControlListsEnd;
    public static Mark ProxyPageItemsBegin;
    public static Mark ProxyPageItemsEnd;
    public static Mark ProxyPageItemsByPairsBegin;
    public static Mark ProxyPageItemsByPairsEnd;
}
[EditorBrowsableAttribute("1")]
public static class Microsoft.TeamFoundation.Common.Marker : object {
    private static Dictionary`2<int, int> s_codeMarkerMap;
    private static string s_format;
    private static BooleanSwitch s_switchPerf;
    private static Marker();
    public static void Process(Mark mark);
    internal static void TraceMarker(Mark mark);
    internal static bool TryTranslate(Mark mark, Int32& codeMarker);
    private static void EnsureList();
}
[EditorBrowsableAttribute("1")]
public class Microsoft.TeamFoundation.Common.WITCodeMarkerStartEnd : object {
    private TfCodeMarkerStartEnd m_codeMarker;
    private Mark m_endMarker;
    public WITCodeMarkerStartEnd(Mark begin, Mark end);
    public sealed virtual void Dispose();
}
[EditorBrowsableAttribute("1")]
public class Microsoft.TeamFoundation.WorkItemTracking.Common.AccountDisplayMode : ValueType {
    public static int NotSpecified;
    public static int AccountName;
    public static int FriendlyName;
}
[EditorBrowsableAttribute("1")]
public class Microsoft.TeamFoundation.WorkItemTracking.Common.AceElementAttributes : ValueType {
    public static string ObjectId;
    public static string AceSid;
    public static string ActionId;
    public static string Deny;
    public static string Deleted;
}
[EditorBrowsableAttribute("1")]
public static class Microsoft.TeamFoundation.WorkItemTracking.Common.AdminUpdatePackageHelpers : object {
    public static XmlDocument BuildDestroyWorkItemTypeUpdatePackage(string name, string projectName);
    public static XmlDocument BuildRenameWorkItemTypeUpdatePackage(string witName, string newWitName, string projectName);
}
public class Microsoft.TeamFoundation.WorkItemTracking.Common.AmbiguousIdentity : object {
    [CompilerGeneratedAttribute]
private string <DisplayName>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <AccountNames>k__BackingField;
    public string DisplayName { get; public set; }
    public String[] AccountNames { get; public set; }
    [CompilerGeneratedAttribute]
public string get_DisplayName();
    [CompilerGeneratedAttribute]
public void set_DisplayName(string value);
    [CompilerGeneratedAttribute]
public String[] get_AccountNames();
    [CompilerGeneratedAttribute]
public void set_AccountNames(String[] value);
}
[EditorBrowsableAttribute("1")]
public class Microsoft.TeamFoundation.WorkItemTracking.Common.AttachmentRequestParameters : ValueType {
    public static string FileName;
    public static string FileNameGUID;
    public static string AreaNodeUri;
    public static string ProjectUri;
    public static string Content;
    public static string FileID;
}
[EditorBrowsableAttribute("1")]
public class Microsoft.TeamFoundation.WorkItemTracking.Common.BisData : ValueType {
    public static string AttachmentServerUrl;
    public static string TFSServerNameSpace;
    public static string ConfigurationServerUrl;
    public static string ArtifactTypeTeamProject;
    public static string WitOmExpirationDate;
}
internal class Microsoft.TeamFoundation.WorkItemTracking.Common.BisDataChangedEvent : ValueType {
    public static string DataTypeElementName;
    public static string SeqIdElementName;
}
[EditorBrowsableAttribute("1")]
public class Microsoft.TeamFoundation.WorkItemTracking.Common.BisEventMessage : ValueType {
    public static string NodeElementName;
    public static string NodeElementsName;
    public static string AceElementName;
}
[EditorBrowsableAttribute("1")]
public class Microsoft.TeamFoundation.WorkItemTracking.Common.BisEventTypes : ValueType {
    public static string Identity;
    public static string Structure;
    public static string Security;
}
[EditorBrowsableAttribute("1")]
public class Microsoft.TeamFoundation.WorkItemTracking.Common.BoxcarExtensionIds : ValueType {
    public static int Identity;
}
[EditorBrowsableAttribute("1")]
public class Microsoft.TeamFoundation.WorkItemTracking.Common.BuiltInSecurityGroups : ValueType {
    public static string GlobalGroupDomainName;
    public static string InstanceGroupDomainName;
}
[FlagsAttribute]
public enum Microsoft.TeamFoundation.WorkItemTracking.Common.ClientCapabilities : Enum {
    public int value__;
    public static ClientCapabilities SupportsExtensions;
}
[EditorBrowsableAttribute("1")]
public class Microsoft.TeamFoundation.WorkItemTracking.Common.ClientVersion : object {
    public static int V1;
    public static int V2;
    public static int V3;
    public static int V4;
    public static int V5;
    public static int V6;
    public static int V7;
    public static int V8;
    public static int CurrentVersion;
    public static int Max;
}
[GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "15.0.0.0")]
[DebuggerNonUserCodeAttribute]
[CompilerGeneratedAttribute]
internal class Microsoft.TeamFoundation.WorkItemTracking.Common.CommonClientResourceStrings : object {
    private static ResourceManager resourceMan;
    private static CultureInfo resourceCulture;
    [EditorBrowsableAttribute("2")]
internal static ResourceManager ResourceManager { get; }
    [EditorBrowsableAttribute("2")]
internal static CultureInfo Culture { get; internal set; }
    internal static string WiqlOperators_And { get; }
    internal static string WiqlOperators_Any { get; }
    internal static string WiqlOperators_Contains { get; }
    internal static string WiqlOperators_ContainsWords { get; }
    internal static string WiqlOperators_EqualTo { get; }
    internal static string WiqlOperators_Ever { get; }
    internal static string WiqlOperators_FieldComparisonQualifier { get; }
    internal static string WiqlOperators_FieldComparisonReferenceName { get; }
    internal static string WiqlOperators_GreaterThan { get; }
    internal static string WiqlOperators_GreaterThanOrEqualTo { get; }
    internal static string WiqlOperators_In { get; }
    internal static string WiqlOperators_InGroup { get; }
    internal static string WiqlOperators_IsEmpty { get; }
    internal static string WiqlOperators_IsNotEmpty { get; }
    internal static string WiqlOperators_LessThan { get; }
    internal static string WiqlOperators_LessThanOrEqualTo { get; }
    internal static string WiqlOperators_MacroCurrentIteration { get; }
    internal static string WiqlOperators_MacroFollows { get; }
    internal static string WiqlOperators_MacroMe { get; }
    internal static string WiqlOperators_MacroMyRecentActivity { get; }
    internal static string WiqlOperators_MacroProject { get; }
    internal static string WiqlOperators_MacroRecentMentions { get; }
    internal static string WiqlOperators_MacroRecentProjectActivity { get; }
    internal static string WiqlOperators_MacroStartOfDay { get; }
    internal static string WiqlOperators_MacroStartOfMonth { get; }
    internal static string WiqlOperators_MacroStartOfWeek { get; }
    internal static string WiqlOperators_MacroStartOfYear { get; }
    internal static string WiqlOperators_MacroTeamAreas { get; }
    internal static string WiqlOperators_MacroToday { get; }
    internal static string WiqlOperators_MacroTodayMinusDaysFormat { get; }
    internal static string WiqlOperators_NotContains { get; }
    internal static string WiqlOperators_NotContainsWords { get; }
    internal static string WiqlOperators_NotEqualTo { get; }
    internal static string WiqlOperators_NotEver { get; }
    internal static string WiqlOperators_NotIn { get; }
    internal static string WiqlOperators_NotInGroup { get; }
    internal static string WiqlOperators_NotUnder { get; }
    internal static string WiqlOperators_Or { get; }
    internal static string WiqlOperators_Under { get; }
    internal static ResourceManager get_ResourceManager();
    internal static CultureInfo get_Culture();
    internal static void set_Culture(CultureInfo value);
    internal static string get_WiqlOperators_And();
    internal static string get_WiqlOperators_Any();
    internal static string get_WiqlOperators_Contains();
    internal static string get_WiqlOperators_ContainsWords();
    internal static string get_WiqlOperators_EqualTo();
    internal static string get_WiqlOperators_Ever();
    internal static string get_WiqlOperators_FieldComparisonQualifier();
    internal static string get_WiqlOperators_FieldComparisonReferenceName();
    internal static string get_WiqlOperators_GreaterThan();
    internal static string get_WiqlOperators_GreaterThanOrEqualTo();
    internal static string get_WiqlOperators_In();
    internal static string get_WiqlOperators_InGroup();
    internal static string get_WiqlOperators_IsEmpty();
    internal static string get_WiqlOperators_IsNotEmpty();
    internal static string get_WiqlOperators_LessThan();
    internal static string get_WiqlOperators_LessThanOrEqualTo();
    internal static string get_WiqlOperators_MacroCurrentIteration();
    internal static string get_WiqlOperators_MacroFollows();
    internal static string get_WiqlOperators_MacroMe();
    internal static string get_WiqlOperators_MacroMyRecentActivity();
    internal static string get_WiqlOperators_MacroProject();
    internal static string get_WiqlOperators_MacroRecentMentions();
    internal static string get_WiqlOperators_MacroRecentProjectActivity();
    internal static string get_WiqlOperators_MacroStartOfDay();
    internal static string get_WiqlOperators_MacroStartOfMonth();
    internal static string get_WiqlOperators_MacroStartOfWeek();
    internal static string get_WiqlOperators_MacroStartOfYear();
    internal static string get_WiqlOperators_MacroTeamAreas();
    internal static string get_WiqlOperators_MacroToday();
    internal static string get_WiqlOperators_MacroTodayMinusDaysFormat();
    internal static string get_WiqlOperators_NotContains();
    internal static string get_WiqlOperators_NotContainsWords();
    internal static string get_WiqlOperators_NotEqualTo();
    internal static string get_WiqlOperators_NotEver();
    internal static string get_WiqlOperators_NotIn();
    internal static string get_WiqlOperators_NotInGroup();
    internal static string get_WiqlOperators_NotUnder();
    internal static string get_WiqlOperators_Or();
    internal static string get_WiqlOperators_Under();
}
[ExtensionAttribute]
public static class Microsoft.TeamFoundation.WorkItemTracking.Common.CommonUtils : object {
    [ExtensionAttribute]
public static bool TryGetValue(IDictionary`2<TKey, object> dict, TKey key, TValue& value);
    [ExtensionAttribute]
public static bool TryGetValue(Dictionary`2<TKey, object> dict, TKey key, TValue& value);
    [IteratorStateMachineAttribute("Microsoft.TeamFoundation.WorkItemTracking.Common.CommonUtils/<Page>d__2`1")]
[ExtensionAttribute]
public static IEnumerable`1<IEnumerable`1<T>> Page(IEnumerable`1<T> source, int count);
    public static int CombineHashCodes(int hashA, int hashB);
    public static string GetDisplayNameFromDistinctDisplayName(string distinctDisplayName);
    public static string DistinctDisplayName(IdentityRef identity);
}
[EditorBrowsableAttribute("1")]
[GenerateAllConstantsAttribute("")]
public static class Microsoft.TeamFoundation.WorkItemTracking.Common.Constants.CoreFieldRefNames : object {
    public static string AreaId;
    public static string AreaPath;
    public static string AssignedTo;
    public static string AttachedFileCount;
    public static string AuthorizedAs;
    public static string BoardColumn;
    public static string BoardColumnDone;
    public static string BoardLane;
    public static string ChangedBy;
    public static string ChangedDate;
    public static string CreatedBy;
    public static string CreatedDate;
    public static string Description;
    public static string CommentCount;
    public static string ExternalLinkCount;
    public static string History;
    public static string HyperLinkCount;
    public static string RemoteLinkCount;
    public static string Id;
    public static string IterationId;
    public static string IterationPath;
    public static string LinkType;
    public static string NodeName;
    public static string Parent;
    public static string Reason;
    public static string RelatedLinkCount;
    public static string Rev;
    public static string RevisedDate;
    public static string State;
    public static string AuthorizedDate;
    public static string TeamProject;
    public static string Tags;
    public static string Title;
    public static string WorkItemType;
    public static string Watermark;
    public static string IsDeleted;
    private static String[] m_all;
    public static IEnumerable`1<string> All { get; }
    private static CoreFieldRefNames();
    public static IEnumerable`1<string> get_All();
}
[EditorBrowsableAttribute("1")]
public class Microsoft.TeamFoundation.WorkItemTracking.Common.ConstantSearchFactor : object {
    public static int AccountName;
    public static int DisplayName;
    public static int Sid;
    public static int TeamFoundationId;
    public static int NonIdentity;
}
public class Microsoft.TeamFoundation.WorkItemTracking.Common.ContributionInputNotSpecifiedException : Exception {
    [CompilerGeneratedAttribute]
private string <ContributionId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ContributionInputId>k__BackingField;
    public string ContributionId { get; private set; }
    public string ContributionInputId { get; private set; }
    public ContributionInputNotSpecifiedException(string contributionId, string contributionInputId);
    [CompilerGeneratedAttribute]
public string get_ContributionId();
    [CompilerGeneratedAttribute]
private void set_ContributionId(string value);
    [CompilerGeneratedAttribute]
public string get_ContributionInputId();
    [CompilerGeneratedAttribute]
private void set_ContributionInputId(string value);
}
public class Microsoft.TeamFoundation.WorkItemTracking.Common.ContributionNotFoundOrNotInListedExtensionsElement : Exception {
    [CompilerGeneratedAttribute]
private string <ContributionId>k__BackingField;
    public string ContributionId { get; private set; }
    public ContributionNotFoundOrNotInListedExtensionsElement(string contributionId);
    [CompilerGeneratedAttribute]
public string get_ContributionId();
    [CompilerGeneratedAttribute]
private void set_ContributionId(string value);
}
[EditorBrowsableAttribute("1")]
public class Microsoft.TeamFoundation.WorkItemTracking.Common.CoreLinkTypes : ValueType {
    public static int Related;
    public static int Parent;
    public static int Child;
    public static int Predecessor;
    public static int Successor;
    public static int RemoteProducesFor;
    public static int RemoteConsumedBy;
    public static int RemoteRelated;
}
[EditorBrowsableAttribute("1")]
public class Microsoft.TeamFoundation.WorkItemTracking.Common.CssSync : ValueType {
    public static string structureNodeName;
    public static string lifecycleNodeName;
    public static int modelTree;
    public static int lifecycleTree;
    public static int otherTypeTree;
}
[EditorBrowsableAttribute("1")]
public enum Microsoft.TeamFoundation.WorkItemTracking.Common.CurrituckArtifactType : Enum {
    public int value__;
    public static CurrituckArtifactType Workitem;
    public static CurrituckArtifactType Hyperlink;
    public static CurrituckArtifactType External;
}
[EditorBrowsableAttribute("1")]
public class Microsoft.TeamFoundation.WorkItemTracking.Common.DalErrors : ValueType {
    public static int DalErrorsBegin;
    public static int DalErrorsEnd;
    public static int UnexpectedDatabaseError;
    public static int InvalidProjectNodeId;
    public static int InvalidQueryId;
    public static int InvalidQueryName;
    public static int InvalidQueryText;
    public static int DeniedOrNotExist;
    public static int NotAProjectUser;
    public static int NotUnique;
    public static int NotANamespaceAdmin;
    public static int AddConstantNotValidDomainAccount;
    public static int AuthorizeFieldChanges;
    public static int AuthorizeRuleChanges;
    public static int AuthorizeWorkItemTypeChangesForcedRollback;
    public static int AuthorizeActionChangesForcedRollback;
    public static int ChangeFieldAlreadyChanged;
    public static int ChangeFieldNotAllowed;
    public static int ChangeFieldUsageAlreadyChanged;
    public static int ChangeFieldReportingTypeAlreadySet;
    public static int ChangeFieldReportingFormulaAlreadySet;
    public static int ChangeFieldUsageCreate;
    public static int ChangeRuleAlreadyChanged;
    public static int ChangeRuleRuleNonEditable;
    public static int ChangeRuleSetSetADObject;
    public static int ChangeRuleSetSetAlreadyChanged;
    public static int LookupRulePersonScopeNotADObject;
    public static int RebuildCallersViewsInvalidDomainName;
    public static int ConstSetMembershipCheckDbStampMismatch;
    public static int ChangeTreePropertyAlreadyChanged;
    public static int ChangeWorkItemTypeAlreadyChanged;
    public static int ChangeWorkItemTypeUsageAlreadyChanged;
    public static int ChangeWorkItemTypeInvalidProjectID;
    public static int ChangeActionAlreadyChanged;
    public static int BadAdminDataFieldsOutOfRange;
    public static int BadAdminDataInvalidFieldType;
    public static int BadAdminDataInvalidFieldName;
    public static int BadAdminDataInvalidFieldReferenceName;
    public static int BadAdminDataUnimplementedReadRuleCondition;
    public static int BadAdminDataRuleFlagsNonEditable;
    public static int BadAdminDataRuleEnforcementIsNotImplemented;
    public static int BadAdminDataDenyAdminNotAllowed;
    public static int BadAdminDataTypeCannotChangeAfterFieldHasBeenUsed;
    public static int BadAdminCannotAddRuleOnCoreFields;
    public static int LookupRuleTreeIdNotFound;
    public static int ForceRollback;
    public static int ForceRollbackBulkUpdate;
    public static int AddFileFileAlreadyExists;
    public static int ResourceLinkNotFound;
    public static int ChangeActionTypeNameFromStateAlreadyExists;
    public static int DeleteFieldFieldDoesNotExist;
    public static int DeleteFieldFieldInUse;
    public static int InvalidField;
    public static int AddSetInvalidParentIDOrConstantID;
    public static int ProjectAdminGroupNotFound;
    public static int AddConstantStringNotSupportedByCollation;
    public static int ChangeCategoryMetadataStampMismatch;
    public static int PicklistNameAlreadyExists;
    public static int FieldDoesNotExist;
    public static int InvalidPicklist;
    public static int FieldListAlreadyExists;
    public static int FieldReferencingPicklist;
    public static int UpdateListDoesNotExist;
    public static int UpdateListNameNotSpecified;
    public static int UpdateListItemsNotSpecified;
    public static int QueryDepthTooLarge;
    public static int QueryResultsMaxLengthExceeded;
    public static int QueryTooComplex;
    public static int WorkItemUpdateWorkItemMissingOrUpdated;
    public static int SqlDataTypeConversionError;
    public static int ManageLinkTypesSecurityError;
    public static int DatetimeShiftDetected;
    public static int CannotSaveTags;
    public static int DateInFuture;
    public static int WorkItemUpdateInsertFileFailedToFindFile;
    public static int SqlErrorObjectNotFound;
    public static int SqlErrorStoredProcedureNotFound;
    public static int SqlErrorTransactionCount;
    public static int SqlErrorDeadlock;
    public static int SqlErrorColumnNotFound;
    public static int SqlErrorDatabaseReadOnly;
    public static int SqlErrorViewBindingError;
    public static int SqlErrorMoreColumnsError;
    public static int SqlErrorMoreColumnNamesError;
    public static int SqlErrorFullTextBegin;
    public static int SqlErrorFullTextEnd;
    public static int SqlErrorFullTextBegin2;
    public static int SqlErrorFullTextEnd2;
    public static int SqlErrorFullTextServiceDisabled;
    public static int SqlErrorFullTextServiceNotResponsive;
    public static int SqlErrorFullTextServiceLogonFailure;
    public static int SqlErrorFullTextCatalogCorrupt;
    public static int SqlErrorFullTextCatalogMissing;
    public static int SqlErrorExistingConnectionForciblyClosed;
    public static int SqlErrorTimeOutOrServerNotResponding;
    public static int SqlErrorLoginFailed;
    public static int SqlErrorCannotOpenDatabase;
    public static int SqlErrorServerPaused;
    public static int SqlErrorSevereError;
    public static int SqlErrorInsufficientMemory;
    public static int SqlErrorCannotReachServer;
    public static int SqlErrorRemoteAccessNotPermitted;
    public static int SqlErrorDatabaseDown;
    public static int SqlErrorNamedPipeError;
    public static int SqlErrorNamedPipeNotFound;
    public static int SqlErrorNetworkTransportErrorNameNotAvailable;
    public static int SqlErrorRemoteAccessDisabled;
    public static int SqlErrorLoginTimeoutError;
    public static int SqlErrorNetworkTransportError;
    public static int SqlErrorLoginError;
    public static int SqlErrorTcpConnectionRefused;
    public static int SqlErrorScalarVariableNotDeclaredError;
    public static int SqlErrorIndexAssociatedWithFieldError;
    public static int SqlErrorInsufficientMemoryTimeout;
    public static int SqlErrorStatisticsStreamCorrupt;
    public static int SqlErrorDataTypeConversionError1;
    public static int SqlErrorDataTypeConversionError2;
    public static int SqlErrorDataTypeConversionError3;
    public static int SqlErrorDataTypeConversionError4;
    public static int SqlErrorDataTypeConversionError5;
    public static int SqlErrorDataTypeConversionError6;
    public static int UnexpectedError;
    public static int UpdatePackageRequired;
    public static int BadServiceConfig;
    public static int InvalidUpdatePackage;
    public static int RequestNotCancellable;
    public static int CancelledByUser;
    public static int AddFileGuidAlreadyExists;
    public static int AddFileGuidDoesNotExist;
    public static int InternalArgumentError;
    public static int FieldNameAlreadyInUse;
    public static int FieldReferenceNameAlreadyInUse;
    public static int ChangeActionMissingWorkItemType;
    public static int ChangeActionMissingFromState;
    public static int ChangeActionMissingToState;
    public static int ChangeWorkItemTypeMissingTreeProperty;
    public static int ChangeWorkItemTypeMissingNameConstant;
    public static int ChangeWorkItemTypeNameConstantInUse;
    public static int ChangeWorkItemTypeUsageMissingField;
    public static int ChangeWorkItemTypeUsageMissingWorkItemType;
    public static int ChangeFieldUsageMissingField;
    public static int ChangeFieldUsageMissingFieldUsage;
    public static int AuthorizeFieldChangesMissingFieldUsage;
    public static int WorkItemCurrentDateEqualsPreviousDate;
    public static int LinkTypeNotFound;
    public static int AddLinkTypeCannotCreateCoreType;
    public static int AddLinkTypeCannotCreateDisabledType;
    public static int AddLinkTypeInvalidTopology;
    public static int AddLinkTypeMissingReverseName;
    public static int AddLinkTypeIncorrectReverseName;
    public static int AddLinkTypeReferenceNameInUse;
    public static int AddLinkTypeForwardNameInUse;
    public static int AddLinkTypeReverseNameInUse;
    public static int UpdateLinkTypeNothingSpecified;
    public static int UpdateLinkTypeMissingReverseName;
    public static int UpdateLinkTypeIncorrectReverseName;
    public static int UpdateLinkTypeForwardNameInUse;
    public static int UpdateLinkTypeReverseNameInUse;
    public static int UpdateLinkTypeEditDenied;
    public static int UpdateLinkTypeModifiedTopology;
    public static int DeleteLinkTypeDeleteDenied;
    public static int AddLinkCannotLinkToSelf;
    public static int AddRemoteLinkCannotLinkToSameAccount;
    public static int AddRemoteLinkWhenPendingDelete;
    public static int LinkAuthorizationFailed;
    public static int LinkAuthorizationFailedNotServiceAccount;
    public static int LinkAuthorizationFailedLinksLocked;
    public static int LinkAuthorizationFailedAreaIdChanged;
    public static int AddLinkDisabledType;
    public static int AddLinkCircularity;
    public static int AddLinkExtraParent;
    public static int AddLinkChildIsAncestor;
    public static int AddLinkAlreadyExists;
    public static int AddLinkMaxDepthExceeded;
    public static int AddLinkLimitExceeded;
    public static int AddRemoteLinkLimitExceeded;
    public static int UpdateLinkAlreadyUpdatedOrNotFound;
    public static int DeleteLinkNotFound;
    public static int RenameWorkItemTypeDuplicateWorkItemTypeName;
    public static int DestroyWorkItemsAuthorizationFailed;
    public static int DestroyGlobalListListInUse;
    public static int WorkItemTypeCategoryTypeNotInProject;
    public static int WorkItemTypeCategoryNameAlreadyInUse;
    public static int WorkItemTypeCategoryReferenceNameAlreadyInUse;
    public static int WorkItemTypeCategoryTypeInUse;
    public static int WorkItemTypeCategoryCannotDeleteDefaultType;
    public static int QueryItemDeniedOrNotExist;
    public static int QueryItemDoesNotExist;
    public static int QueryItemParentMissing;
    public static int QueryItemParentNotAFolder;
    public static int QueryItemNameConflicts;
    public static int QueryItemCircularity;
    public static int QueryItemTypeMismatch;
    public static int QueryItemAlreadyExists;
    public static int TooManyQueryItemsUnderParent;
    public static int TooManyQueryItemsReturned;
    public static int QueryItemCannotMoveRootFolder;
    public static int QueryItemCannotDeleteRootFolder;
    public static int QueryItemCannotDenyAdmin;
    public static int QueryItemAccessException;
    public static int QueryItemInvalidPermissionCombination;
    public static int QueryItemGeneralException;
    public static int VerbatimMessage;
    public static int FieldLimitExceeded;
    public static int QueryOptimizationFailed;
    public static int WarehouseWorkItemRevisionNotFound;
    public static int DuplicateWorkItemTypeletID;
    public static int DuplicateWorkItemTypeletName;
    public static int WorkItemTypeletDoesNotExist;
    public static int QueryItemNotDeleted;
    public static int ParentNotFound;
    public static int SiblingWithSameName;
    public static int ClassificationNodeNotExist;
    public static int ClassificationParentNodeNotExist;
    public static int ClassificationReclassifyNodeNotExist;
    public static int ClassificationIdentifierNotUnique;
    public static int ClassificationNameNotUnique;
    public static int ClassificationMoveToNodeBeneath;
    public static int ClassificationExceedMaxAllowedDepth;
    public static int ClassificationReclassifyToNodeBeneath;
    public static int ClassificationUnabletoGetSequenceId;
}
[EditorBrowsableAttribute("1")]
[GenerateAllConstantsAttribute("")]
public class Microsoft.TeamFoundation.WorkItemTracking.Common.DalFields : ValueType {
    public static int IDId;
    public static int RevId;
    public static int TitleId;
    public static int DescriptionId;
    public static int WorkItemTypeId;
    public static int PortfolioProjectId;
    public static int WorkItemFormIDId;
    public static int WorkItemFormId;
    public static int StateId;
    public static int ReasonId;
    public static int CreatedById;
    public static int WatermarkId;
    public static int AssignedToId;
    public static int LastChangedById;
    public static int LastChangedDateId;
    public static int AuthorizedDateId;
    public static int CreatedDateId;
    public static int RevisedDateId;
    public static int PersonNameId;
    public static int AuthorizedAsId;
    public static int HistoryId;
    public static int AreaPathId;
    public static int AreaIDId;
    public static int IterationPathId;
    public static int IterationIDId;
    public static int NodeNameId;
    public static int RelatedLinkCountId;
    public static int RemoteLinkCountId;
    public static int LinkedFileCountId;
    public static int AttachedFileCountId;
    public static int CommentCountId;
    public static int ParentId;
    public static int BISURICountId;
    public static int Tags;
    public static int BoardColumnId;
    public static int BoardColumnDoneId;
    public static int BoardLaneId;
    public static int RelatedLinks;
    public static int PersonID;
    public static int LinkedFiles;
    public static int BISURI;
    public static int AttachedFiles;
    public static int HiddenAttachedFiles;
    public static int AreaLevel1;
    public static int AreaLevel2;
    public static int AreaLevel3;
    public static int AreaLevel4;
    public static int AreaLevel5;
    public static int AreaLevel6;
    public static int AreaLevel7;
    public static int IterationLevel1;
    public static int IterationLevel2;
    public static int IterationLevel3;
    public static int IterationLevel4;
    public static int IterationLevel5;
    public static int IterationLevel6;
    public static int IterationLevel7;
    public static int IsDeleted;
    public static int ZZZDummyField;
}
[EditorBrowsableAttribute("1")]
public class Microsoft.TeamFoundation.WorkItemTracking.Common.DalLinkFields : ValueType {
    public static int LinkType;
}
[EditorBrowsableAttribute("1")]
public class Microsoft.TeamFoundation.WorkItemTracking.Common.DatabaseColumnNames : ValueType {
    public static string TreeNodesId;
    public static string TreeNodesName;
    public static string TreeNodesCSSNodeId;
    public static string TreeNodesTypeId;
    public static string TreeNodesStructureType;
    public static string TreeNodesParentId;
    public static string NotAField;
    public static string FieldId;
    public static string FieldName;
    public static string FieldReferenceName;
    public static string FieldReportingReferenceName;
    public static string FieldReportingDisplayName;
    public static string FieldType;
    public static string FieldReportingType;
    public static string FieldReportingFormula;
    public static string FieldLastWarehouseName;
    public static string FieldWarehouseDimensionName;
    public static string FieldCachestamp;
    public static string ConstantDomainPart;
    public static string ConstantNamePart;
    public static string ConstantDisplayPart;
    public static string ConstantString;
    public static string ConstantSid;
    public static string LongTextId;
    public static string LookupAccount;
    public static string LongTextWord;
    public static string LongTextAddedDate;
    public static string LongTextFldId;
    public static string LongTextRev;
    public static string LongTextIsHtml;
    public static string FieldDeleted;
    public static string AttachmentFileContent;
    public static string AttachmentFileGuid;
    public static string AttachmentFileCreationDate;
    public static string AttachmentFileId;
    public static string AttachmentIdentityName;
    public static string AttachmentFileProjectUri;
    public static string AttachmentTfsFileId;
    public static string FilesId;
    public static string FilesFieldId;
    public static string FilesExtId;
    public static string FilesRemovedDate;
    public static string AuthorizedRemovedDate;
    public static string FilesAddedDate;
    public static string FilesCreationDate;
    public static string FilesLastWriteDate;
    public static string FilesHistoricalChangedDate;
    public static string AuthorizedAddedDate;
    public static string FilesComment;
    public static string FilesFilePath;
    public static string FilesOriginalName;
    public static string FilesLength;
    public static string ConstId;
    public static string ViewerChangedBy;
    public static string ViewerRelatedID;
    public static string LinkType;
    public static string ObjectId;
    public static string ReferenceName;
    public static string Value;
    public static string SetDefault;
    public static string QueryId;
    public static string QueryParentId;
    public static string QueryProjectId;
    public static string QueryName;
    public static string OldQueryName;
    public static string QueryFolder;
    public static string QueryPublic;
    public static string QueryDeleted;
    public static string QueryText;
    public static string OldQueryText;
    public static string QueryCachestamp;
    public static string QueryOwner;
    public static string QueryOwnerIdentifier;
    public static string QueryOwnerType;
    public static string QuerySecurityToken;
    public static string RuleSetID;
    public static string ParentID;
    public static string RuleFlags2;
    public static string String;
    public static string SID;
    public static string PartitionId;
    public static string RuleID;
    public static string TreeID;
    public static string ProjectID;
    public static string PersonID;
    public static string ObjectTypeScopeID;
    public static string fUnless;
    public static string IfFieldID;
    public static string fIfNot;
    public static string IfConstID;
    public static string ThenFieldID;
    public static string fThenNot;
    public static string fThenLike;
    public static string fThenTwoPlus;
    public static string ThenConstID;
    public static string fFlowDownTree;
    public static string fThenOneLevel;
    public static string fThenInterior;
    public static string fThenConstLargetext;
    public static string fThenLeaf;
    public static string fReverse;
    public static string fInversePersonID;
    public static string fThenImplicitEmpty;
    public static string fThenImplicitUnchanged;
    public static string RootTreeID;
    public static string fFlowAroundTree;
    public static string Field1ID;
    public static string Field1IsConstID;
    public static string Field1WasConstID;
    public static string Field2ID;
    public static string Field2IsConstID;
    public static string Field2WasConstID;
    public static string Field3ID;
    public static string Field3IsConstID;
    public static string Field3WasConstID;
    public static string Field4ID;
    public static string Field4IsConstID;
    public static string Field4WasConstID;
    public static string fAcl;
    public static string If2FieldID;
    public static string fIf2Not;
    public static string If2ConstID;
    public static string VersionFrom;
    public static string VersionTo;
    public static string fGrantRead;
    public static string fDenyRead;
    public static string fGrantWrite;
    public static string fDenyWrite;
    public static string fSuggestion;
    public static string fGrantAdmin;
    public static string fDenyAdmin;
    public static string fDefault;
    public static string fHelptext;
    public static string SetId;
    public static string fIsValueAllowed;
    public static string ErrorCode;
    public static string IncludeTop;
    public static string ExcludeGroups;
    public static string Direct;
    public static string LatestAreaId;
    public static string AreaId;
    public static string AboveID;
    public static string BelowID;
    public static string fDeleted;
    public static string CacheStamp;
    public static string WorkItemId;
    public static string WorkItemFieldId;
    public static string WorkItemParentFieldId;
    public static string TrendDataUpdateOption;
    public static string AuthorizedDate;
    public static string RevisedDate;
    public static string WorkItemTypeID;
    public static string WorkItemTypeCategoryId;
    public static string WorkItemTypeCategoryMemberId;
    public static string WorkItemTypeCategoryName;
    public static string WorkItemTypeCategoryReferenceName;
    public static string WorkItemTypeCategoryDefaultWorkItemTypeID;
    public static string ActionID;
    public static string ActionName;
    public static string ActionFromStateConstId;
    public static string ActionToStateConstId;
    public static string IntValue;
    public static string FloatValue;
    public static string DateTimeValue;
    public static string GuidValue;
    public static string BitValue;
    public static string StringValue;
    public static string TrendDataValue;
    public static string TrendDataCount;
    public static string ReportingEnabled;
    public static string ReportingName;
    public static string Usage;
    public static string ProcessId;
    public static string Description;
    public static string PicklistId;
    public static string IsIdentityFromProcess;
    public static string IsLocked;
    public static string fDirect;
    public static string fIncludeGroups;
    public static string fIncludeTop;
    public static string DisplayName;
    public static string UserSid;
    public static string Tfid;
    public static string TempId;
    public static string Id;
    public static string Order;
    public static string Val;
    public static string Vsid;
    public static string UserVsid;
    public static string GroupSid;
    public static string IsGroup;
    public static string ObjectCategory;
    public static string ObjectSpecialType;
}
[EditorBrowsableAttribute("1")]
public class Microsoft.TeamFoundation.WorkItemTracking.Common.DatabaseCoreFieldRefName : ValueType {
    public static string Id;
    public static string Title;
    public static string State;
    public static string Reason;
    public static string Rev;
    public static string AssignedTo;
    public static string WorkItemType;
    public static string PersonId;
    public static string ChangedOrder;
    public static string ChangedBy;
    public static string ChangedDate;
    public static string AuthorizedDate;
    public static string OpenedBy;
    public static string OpenedDate;
    public static string RevisedDate;
    public static string AreaId;
    public static string AreaPath;
    public static string AuthorizedAs;
    public static string IterationPath;
    public static string IterationId;
    public static string PortfolioProject;
    public static string NotAField;
    public static string History;
    public static string ExternalLinkCount;
    public static string HyperLinkCount;
    public static string AttachedFileCount;
    public static string RelatedLinkCount;
    public static string RemoteLinkCount;
    public static string CommentCount;
    public static string Parent;
    public static string NodeName;
    public static string NodeType;
    public static string Description;
    public static string LinkType;
    public static string TeamProject;
    public static string Watermark;
    public static string Tags;
    public static string BoardColumn;
    public static string BoardColumnDone;
    public static string BoardLane;
    public static string TeamProjectGuid;
}
[EditorBrowsableAttribute("1")]
public class Microsoft.TeamFoundation.WorkItemTracking.Common.DatabaseInternalFieldRefName : ValueType {
    public static string AttachedFiles;
    public static string ChangedSet;
    public static string InAdminOnlyTreeFlag;
    public static string InDeletedTreeFlag;
    public static string LinkedFiles;
    public static string NodeType;
    public static string NotAField;
    public static string PersonId;
    public static string ProjectId;
    public static string RelatedLinks;
    public static string TFServer;
    public static string WorkItemForm;
    public static string WorkItemFormId;
    public static string BisLinks;
}
[EditorBrowsableAttribute("1")]
public class Microsoft.TeamFoundation.WorkItemTracking.Common.DatabaseNotificationIds : ValueType {
    public static string LinkTypeChanged;
    public static string QueryItemChanged;
    public static string FieldChanged;
    public static string TreeChanged;
    public static string WorkItemTypeChanged;
    public static string WorkItemTypeExtensionChanged;
    public static string WorkItemTypeExtensionReconciliationStatusChanged;
    public static string PicklistChanged;
    public static string PicklistDeleted;
    public static string WorkItemTypeletFieldPropertiesChanged;
}
[EditorBrowsableAttribute("1")]
public class Microsoft.TeamFoundation.WorkItemTracking.Common.DatabaseTableNames : ValueType {
    public static string Constants;
    public static string StoredQueries;
    public static string PublicQueryItems;
    public static string PrivateQueryItems;
    public static string TreeNodes;
    public static string Attachments;
    public static string Fields;
    public static string TreeProperties;
    public static string Rules;
    public static string ConstantSets;
    public static string FieldUsages;
    public static string WorkItemTypes;
    public static string WorkItemTypeUsages;
    public static string Actions;
    public static string LinkTypes;
    public static string WorkItemTypeCategories;
    public static string WorkItemTypeCategoryMembers;
    public static string TreeIDPairs;
}
[FlagsAttribute]
[EditorBrowsableAttribute("1")]
public enum Microsoft.TeamFoundation.WorkItemTracking.Common.DataStore.PsAccessCheckFlags : Enum {
    public int value__;
    public static PsAccessCheckFlags AccessCheckComputeFieldProperties;
    public static PsAccessCheckFlags AccessCheckComputeFieldLists;
    public static PsAccessCheckFlags AccessCheckNoComputeAffectedFields;
    public static PsAccessCheckFlags AccessCheckUnconditionalOnly;
    public static PsAccessCheckFlags AccessCheckConditionalOnly;
    public static PsAccessCheckFlags AccessAttemptMakeTrueAll;
    public static PsAccessCheckFlags AccessAttemptMakeTruePartial;
    public static PsAccessCheckFlags AccessApplyDefaults;
    public static PsAccessCheckFlags AccessApplyAcceptMissingIf;
    public static PsAccessCheckFlags AccessCheckSubtree;
    public static PsAccessCheckFlags AccessNonRestrictiveAllowedValues;
    public static PsAccessCheckFlags AccessApplyGlobalSystemRulesOnly;
}
[FlagsAttribute]
internal enum Microsoft.TeamFoundation.WorkItemTracking.Common.DataStore.PsAccessMask : Enum {
    public int value__;
    public static PsAccessMask AccessMaskRead;
    public static PsAccessMask AccessMaskWrite;
    public static PsAccessMask AccessMaskAdmin;
    public static PsAccessMask AccessMaskAll;
}
internal enum Microsoft.TeamFoundation.WorkItemTracking.Common.DataStore.PsComputedFieldDefinitionProperty : Enum {
    public int value__;
    public static PsComputedFieldDefinitionProperty HelpText;
}
[FlagsAttribute]
[EditorBrowsableAttribute("1")]
public enum Microsoft.TeamFoundation.WorkItemTracking.Common.DataStore.PsComputedFieldFlags : Enum {
    public int value__;
    public static PsComputedFieldFlags ComputedFieldFlagEmpty;
    public static PsComputedFieldFlags ComputedFieldFlagSameAsBefore;
    public static PsComputedFieldFlags ComputedFieldFlagList;
    public static PsComputedFieldFlags ComputedFieldFlagPattern;
    public static PsComputedFieldFlags ComputedFieldFlagIncludeOldValue;
    public static PsComputedFieldFlags ComputedFieldFlagKeepOld;
    public static PsComputedFieldFlags ComputedFieldFlagKeepEmpty;
    public static PsComputedFieldFlags ComputedFieldFlagCanBeAddedToList;
    public static PsComputedFieldFlags ComputedFieldFlagFullNameInList;
    public static PsComputedFieldFlags ComputedFieldFlagUnderlying;
    public static PsComputedFieldFlags ComputedFieldFlagValueInOtherField;
    public static PsComputedFieldFlags ComputedFieldFlagDomainUsers;
    public static PsComputedFieldFlags ComputedFieldFlagDomainGroups;
    public static PsComputedFieldFlags ComputedFieldFlagIncompleteSet;
    public static PsComputedFieldFlags ComputedFieldFlagEmptyOrSameAsBefore;
}
[EditorBrowsableAttribute("1")]
public enum Microsoft.TeamFoundation.WorkItemTracking.Common.DataStore.PsCoreFieldsEnum : Enum {
    public int value__;
    public static PsCoreFieldsEnum CoreFieldsID;
    public static PsCoreFieldsEnum CoreFieldsDatastoreItemTypeID;
    public static PsCoreFieldsEnum CoreFieldsDatastoreItemType;
    public static PsCoreFieldsEnum CoreFieldsTreePath;
    public static PsCoreFieldsEnum CoreFieldsIterationPath;
    public static PsCoreFieldsEnum CoreFieldsIterationID;
    public static PsCoreFieldsEnum CoreFieldsRevision;
    public static PsCoreFieldsEnum CoreFieldsTree;
    public static PsCoreFieldsEnum CoreFieldsTitle;
    public static PsCoreFieldsEnum CoreFieldsStatus;
    public static PsCoreFieldsEnum CoreFieldsChangedBy;
    public static PsCoreFieldsEnum CoreFieldsChangedDate;
    public static PsCoreFieldsEnum CoreFieldsAssignedTo;
    public static PsCoreFieldsEnum CoreFieldsCreatedBy;
    public static PsCoreFieldsEnum CoreFieldsOpenedDate;
    public static PsCoreFieldsEnum CoreFieldsReason;
    public static PsCoreFieldsEnum CoreFieldsLinkedFiles;
    public static PsCoreFieldsEnum CoreFieldsAttachedFiles;
    public static PsCoreFieldsEnum CoreFieldsBISURI;
    public static PsCoreFieldsEnum CoreFieldsDescription;
    public static PsCoreFieldsEnum CoreFieldsHistory;
    public static PsCoreFieldsEnum CoreFieldsRevisedDate;
    public static PsCoreFieldsEnum CoreFieldsPersonName;
    public static PsCoreFieldsEnum CoreFieldsPersonID;
    public static PsCoreFieldsEnum CoreFieldsProduct;
    public static PsCoreFieldsEnum CoreFieldsDisplayForm;
    public static PsCoreFieldsEnum CoreFieldsWorkItemType;
    public static PsCoreFieldsEnum CoreFieldsNodeName;
    public static PsCoreFieldsEnum CoreFieldsTreeNodeTypeProduct;
    public static PsCoreFieldsEnum CoreFieldsTreeNodeTypePortfolioProject;
    public static PsCoreFieldsEnum CoreFieldsTreeNodeTypeAreaLevel1;
    public static PsCoreFieldsEnum CoreFieldsTreeNodeTypeAreaLevel2;
    public static PsCoreFieldsEnum CoreFieldsTreeNodeTypeAreaLevel3;
    public static PsCoreFieldsEnum CoreFieldsTreeNodeTypeAreaLevel4;
    public static PsCoreFieldsEnum CoreFieldsTreeNodeTypeAreaLevel5;
    public static PsCoreFieldsEnum CoreFieldsTreeNodeTypeAreaLevel6;
    public static PsCoreFieldsEnum CoreFieldsTreeNodeTypeAreaLevel7;
    public static PsCoreFieldsEnum CoreFieldsTreeNodeTypeIterationLevel1;
    public static PsCoreFieldsEnum CoreFieldsTreeNodeTypeIterationLevel2;
    public static PsCoreFieldsEnum CoreFieldsTreeNodeTypeIterationLevel3;
    public static PsCoreFieldsEnum CoreFieldsTreeNodeTypeIterationLevel4;
    public static PsCoreFieldsEnum CoreFieldsTreeNodeTypeIterationLevel5;
    public static PsCoreFieldsEnum CoreFieldsTreeNodeTypeIterationLevel6;
    public static PsCoreFieldsEnum CoreFieldsTreeNodeTypeIterationLevel7;
}
[EditorBrowsableAttribute("1")]
public enum Microsoft.TeamFoundation.WorkItemTracking.Common.DataStore.PsCSSType : Enum {
    public int value__;
    public static PsCSSType CSSTypeNone;
    public static PsCSSType CSSTypeArea;
    public static PsCSSType CSSTypeIteration;
}
[EditorBrowsableAttribute("1")]
public enum Microsoft.TeamFoundation.WorkItemTracking.Common.DataStore.PsDatastoreItemTypeEnum : Enum {
    public int value__;
    public static PsDatastoreItemTypeEnum DatastoreItemTypeAll;
    public static PsDatastoreItemTypeEnum DatastoreItemTypeBugs;
    public static PsDatastoreItemTypeEnum DatastoreItemTypeTree;
    public static PsDatastoreItemTypeEnum DatastoreItemTypeLink;
}
[EditorBrowsableAttribute("1")]
[CLSCompliantAttribute("False")]
public enum Microsoft.TeamFoundation.WorkItemTracking.Common.DataStore.PsErrorEnum : Enum {
    public UInt32 value__;
    public static PsErrorEnum ErrorServerItemAlreadyUpdated;
    public static PsErrorEnum ErrorServerInternalUnknown;
    public static PsErrorEnum ErrorServerActionFailed;
    public static PsErrorEnum ErrorItemNotOpen;
    public static PsErrorEnum ErrorInvalidItem;
    public static PsErrorEnum ErrorItemIsNew;
    public static PsErrorEnum ErrorHistory;
    public static PsErrorEnum ErrorNoDocument;
    public static PsErrorEnum ErrorChangesRejected;
    public static PsErrorEnum ErrorIgnoreField;
    public static PsErrorEnum ErrorCannotSortBy;
    public static PsErrorEnum ErrorFieldUsage;
    public static PsErrorEnum ErrorInvalidURL;
    public static PsErrorEnum ErrorDuplicateFieldName;
    public static PsErrorEnum ErrorDuplicateNodeName;
    public static PsErrorEnum ErrorAmbiguousNameInAD;
    public static PsErrorEnum ErrorItemOpen;
    public static PsErrorEnum ErrorItemOpenForEdit;
    public static PsErrorEnum ErrorItemNotOpenForEdit;
    public static PsErrorEnum ErrorAttachedFilesNotSupported;
    public static PsErrorEnum ErrorLinkedFilesNotSupported;
    public static PsErrorEnum ErrorQueryNestingLimit;
    public static PsErrorEnum ErrorUpdateNestingLimit;
    public static PsErrorEnum ErrorAttachmentAlreadyExists;
    public static PsErrorEnum ErrorLinkAlreadyExists;
    public static PsErrorEnum ErrorDuplicateLink;
    public static PsErrorEnum ErrorLinkOrphaned;
    public static PsErrorEnum ErrorPreCommit;
    public static PsErrorEnum ErrorRequestNotCancelable;
    public static PsErrorEnum ErrorCancelledByUser;
    public static PsErrorEnum ErrorInvalidTreeNodeValue;
    public static PsErrorEnum ErrorReadOnlyField;
    public static PsErrorEnum ErrorItemOrphaned;
    public static PsErrorEnum WebExceptionConnectFailed;
    public static PsErrorEnum WebExceptionCouldNotReachServer;
    public static PsErrorEnum WebExceptionTimeOut;
    public static PsErrorEnum WebExceptionAccessDenied;
    public static PsErrorEnum BackendArgumentException;
    public static PsErrorEnum MAP_DB_ErrorObjectNotFound;
    public static PsErrorEnum MAP_DB_ErrorTransactionCount;
    public static PsErrorEnum MAP_DB_ErrorDeadlock;
    public static PsErrorEnum MAP_DB_ErrorColumnNotFound;
    public static PsErrorEnum MAP_DB_ErrorDatabaseReadOnly;
    public static PsErrorEnum MAP_DB_ErrorDatabaseCustomError;
    public static PsErrorEnum MAP_DB_ErrorViewBindingError;
    public static PsErrorEnum MAP_DB_ErrorColumnConversion;
    public static PsErrorEnum MAP_DB_ErrorFullText;
    public static PsErrorEnum MAP_DB_ErrorLoginFailed;
    public static PsErrorEnum MAP_DB_ErrorConnectionForciblyClosed;
    public static PsErrorEnum MAP_DB_ErrorTimeOutOrServerNotResponding;
    public static PsErrorEnum MAP_DB_ErrorCannotOpenDatabase;
    public static PsErrorEnum MAP_DB_ErrorInsufficientMemory;
    public static PsErrorEnum MAP_DB_ErrorServerPaused;
    public static PsErrorEnum MAP_DB_ErrorSevereError;
    public static PsErrorEnum MAP_DB_ErrorDatetimeShiftDetected;
    public static PsErrorEnum MAP_DB_ErrorViewMoreColumnsError;
    public static PsErrorEnum MAP_DB_ErrorViewMoreColumnNamesError;
    public static PsErrorEnum MAP_DB_ErrorStoredProcedureNotFound;
    public static PsErrorEnum MAP_DB_IndexAssociatedWithFieldError;
}
[EditorBrowsableAttribute("1")]
public enum Microsoft.TeamFoundation.WorkItemTracking.Common.DataStore.PsFieldDefinitionTypeEnum : Enum {
    public int value__;
    public static PsFieldDefinitionTypeEnum FieldDefinitionTypeSingleValuedKeyword;
    public static PsFieldDefinitionTypeEnum FieldDefinitionTypeSingleValuedKeyword_TreePath;
    public static PsFieldDefinitionTypeEnum FieldDefinitionTypeSingleValuedKeyword_TreeNodeName;
    public static PsFieldDefinitionTypeEnum FieldDefinitionTypeSingleValuedKeyword_TreeNodeType;
    public static PsFieldDefinitionTypeEnum FieldDefinitionTypeSingleValuedKeyword_Person;
    public static PsFieldDefinitionTypeEnum FieldDefinitionTypeSingleValuedInteger;
    public static PsFieldDefinitionTypeEnum FieldDefinitionTypeSingleValuedInteger_TreeID;
    public static PsFieldDefinitionTypeEnum FieldDefinitionTypeSingleValuedDouble;
    public static PsFieldDefinitionTypeEnum FieldDefinitionTypeSingleValuedDatetime;
    public static PsFieldDefinitionTypeEnum FieldDefinitionTypeSingleValuedLargeText_PlainText;
    public static PsFieldDefinitionTypeEnum FieldDefinitionTypeSingleValuedLargeText_History;
    public static PsFieldDefinitionTypeEnum FieldDefinitionTypeSingleValuedLargeText_HTML;
    public static PsFieldDefinitionTypeEnum FieldDefinitionTypeTreeNode;
    public static PsFieldDefinitionTypeEnum FieldDefinitionTypeSingleValuedBoolean;
    public static PsFieldDefinitionTypeEnum FieldDefinitionTypeSingleValuedGuid;
}
[EditorBrowsableAttribute("1")]
public enum Microsoft.TeamFoundation.WorkItemTracking.Common.DataStore.PsMaxLengths : Enum {
    public int value__;
    public static PsMaxLengths FieldNameLength;
    public static PsMaxLengths NodeNameLength;
    public static PsMaxLengths NodePropertyNameLength;
    public static PsMaxLengths ToolTipLength;
    public static PsMaxLengths DescriptionLength;
    public static PsMaxLengths ConstantLength;
    public static PsMaxLengths KeywordLength;
    public static PsMaxLengths TextLength;
    public static PsMaxLengths StoredQueryName;
    public static PsMaxLengths StoredQueryText;
    public static PsMaxLengths StoredQueryFormatting;
    public static PsMaxLengths StoredQueryDescription;
    public static PsMaxLengths LinkCommentLength;
    public static PsMaxLengths LinkURLTarget;
    public static PsMaxLengths LinkURLDisplayName;
    public static PsMaxLengths LinkURITarget;
    public static PsMaxLengths LinkURIType;
    public static PsMaxLengths FileCommentLength;
    public static PsMaxLengths FilePath;
    public static PsMaxLengths FileDisplayName;
}
[FlagsAttribute]
[EditorBrowsableAttribute("1")]
public enum Microsoft.TeamFoundation.WorkItemTracking.Common.DataStore.PsMetadataTypeMask : Enum {
    public int value__;
    public static PsMetadataTypeMask MetadataTypeHierarchy;
    public static PsMetadataTypeMask MetadataTypeFields;
    public static PsMetadataTypeMask MetadataTypeConstants;
    public static PsMetadataTypeMask MetadataTypeRules;
    public static PsMetadataTypeMask MetadataTypeConstantSets;
    public static PsMetadataTypeMask MetadataTypeHierarchyProperties;
    public static PsMetadataTypeMask MetadataTypeFieldUsages;
    public static PsMetadataTypeMask MetadataTypeWorkItemTypes;
    public static PsMetadataTypeMask MetadataTypeWorkItemTypeFieldUsages;
    public static PsMetadataTypeMask MetadataTypeStateTransition;
    public static PsMetadataTypeMask MetadataTypeLinkTypes;
    public static PsMetadataTypeMask MetadataTypeCategories;
    public static PsMetadataTypeMask MetadataTypeCategoryMembers;
    public static PsMetadataTypeMask MetadataAllTypes;
}
[FlagsAttribute]
[EditorBrowsableAttribute("1")]
public enum Microsoft.TeamFoundation.WorkItemTracking.Common.DataStore.PsRuleMetadataFlags : Enum {
    public int value__;
    public static PsRuleMetadataFlags RuleFlagNone;
    public static PsRuleMetadataFlags RuleFlagEditable;
    public static PsRuleMetadataFlags RuleFlagGrantRead;
    public static PsRuleMetadataFlags RuleFlagDenyRead;
    public static PsRuleMetadataFlags RuleFlagGrantWrite;
    public static PsRuleMetadataFlags RuleFlagDenyWrite;
    public static PsRuleMetadataFlags RuleFlagGrantAdmin;
    public static PsRuleMetadataFlags RuleFlagDenyAdmin;
    public static PsRuleMetadataFlags RuleFlagUnless;
    public static PsRuleMetadataFlags RuleFlagFlowdownTree;
    public static PsRuleMetadataFlags RuleFlagDefault;
    public static PsRuleMetadataFlags RuleFlagSuggestion;
    public static PsRuleMetadataFlags RuleFlagReverse;
    public static PsRuleMetadataFlags RuleFlagIfNot;
    public static PsRuleMetadataFlags RuleFlagIf2Not;
    public static PsRuleMetadataFlags RuleFlagSemiEditable;
    public static PsRuleMetadataFlags RuleFlagInversePerson;
    public static PsRuleMetadataFlags RuleFlagThenNot;
    public static PsRuleMetadataFlags RuleFlagThenLike;
    public static PsRuleMetadataFlags RuleFlagThenLeaf;
    public static PsRuleMetadataFlags RuleFlagThenInterior;
    public static PsRuleMetadataFlags RuleFlagThenOneLevel;
    public static PsRuleMetadataFlags RuleFlagThenTwoPlusLevels;
    public static PsRuleMetadataFlags RuleFlagThenImplicitAlso;
    public static PsRuleMetadataFlags RuleFlagHelptext;
    public static PsRuleMetadataFlags RuleFlagIf;
    public static PsRuleMetadataFlags RuleFlagThen;
    public static PsRuleMetadataFlags RuleFlagAccessMasks;
    public static PsRuleMetadataFlags RuleFlagIfAllNodes;
    public static PsRuleMetadataFlags RuleFlagThenAllNodes;
    public static PsRuleMetadataFlags RuleFlagDecisiveRuleFlags;
}
[FlagsAttribute]
[EditorBrowsableAttribute("1")]
public enum Microsoft.TeamFoundation.WorkItemTracking.Common.DataStore.PsRuleMetadataFlags2 : Enum {
    public int value__;
    public static PsRuleMetadataFlags2 RuleFlag2None;
    public static PsRuleMetadataFlags2 RuleFlag2ThenConstLargetext;
    public static PsRuleMetadataFlags2 RuleFlag2ThenImplicitEmpty;
    public static PsRuleMetadataFlags2 RuleFlag2ThenImplicitUnchanged;
    public static PsRuleMetadataFlags2 RuleFlag2FlowaroundTree;
    public static PsRuleMetadataFlags2 RuleFlagDecisiveRuleFlags2;
}
internal enum Microsoft.TeamFoundation.WorkItemTracking.Common.DataStore.PsSpecialVariantType : Enum {
    public int value__;
    public static PsSpecialVariantType SpecialVariantType;
}
internal enum Microsoft.TeamFoundation.WorkItemTracking.Common.DataStore.PsSpecialVariantValue : Enum {
    public int value__;
    public static PsSpecialVariantValue SpecialValueServerDateTime;
    public static PsSpecialVariantValue SpecialValueServerSecurityPrincipal;
    public static PsSpecialVariantValue SpecialValueServerRandomGuid;
}
[EditorBrowsableAttribute("1")]
public enum Microsoft.TeamFoundation.WorkItemTracking.Common.DataStore.PsSqlError : Enum {
    public int value__;
    public static PsSqlError ErrorStoredProcedureNotFound;
    public static PsSqlError ErrorObjectNotFound;
    public static PsSqlError ErrorTransactionCount;
    public static PsSqlError ErrorDeadlock;
    public static PsSqlError ErrorColumnNotFound;
    public static PsSqlError ErrorDatabaseReadOnly;
    public static PsSqlError ErrorViewBindingError;
    public static PsSqlError ErrorViewMoreColumnsError;
    public static PsSqlError ErrorViewMoreColumnNamesError;
    public static PsSqlError ErrorColumnConversion;
    public static PsSqlError ErrorFullTextBegin;
    public static PsSqlError ErrorFullTextEnd;
    public static PsSqlError ErrorFullTextBegin2;
    public static PsSqlError ErrorFullTextEnd2;
    public static PsSqlError ErrorLoginFailed;
    public static PsSqlError ErrorServerPaused;
    public static PsSqlError ErrorCannotOpenDatabase;
    public static PsSqlError ErrorConnectionForciblyClosed;
    public static PsSqlError ErrorTimeOutOrServerNotResponding;
    public static PsSqlError ErrorSevereError;
    public static PsSqlError ErrorInsufficientMemory;
    public static PsSqlError CannotReachServer;
    public static PsSqlError ScalarVariableNotDeclaredError;
    public static PsSqlError IndexAssociatedWithFieldError;
    public static PsSqlError ErrorInsufficientMemoryTimeout;
    public static PsSqlError ErrorStatisticsStreamCorrupt;
    public static PsSqlError FullTextServiceDisabled;
    public static PsSqlError FullTextServiceNotResponsive;
    public static PsSqlError FullTextServiceLogonFailure;
    public static PsSqlError FullTextCatalogCorrupt;
    public static PsSqlError FullTextCatalogMissing;
}
[EditorBrowsableAttribute("1")]
public enum Microsoft.TeamFoundation.WorkItemTracking.Common.DataStore.PsUserDisplayModeEnum : Enum {
    public int value__;
    public static PsUserDisplayModeEnum AccountName;
    public static PsUserDisplayModeEnum FriendlyName;
}
[FlagsAttribute]
internal enum Microsoft.TeamFoundation.WorkItemTracking.Common.DataStore.PsUserRights : Enum {
    public int value__;
    public static PsUserRights UserRightsNone;
    public static PsUserRights UserRightsRead;
    public static PsUserRights UserRightsWrite;
    public static PsUserRights UserRightsAdmin;
}
[FlagsAttribute]
[EditorBrowsableAttribute("1")]
public enum Microsoft.TeamFoundation.WorkItemTracking.Common.DataStore.PsUserRightsMask : Enum {
    public int value__;
    public static PsUserRightsMask UserRightsNone;
    public static PsUserRightsMask UserRightsRead;
    public static PsUserRightsMask UserRightsWrite;
    public static PsUserRightsMask UserRightsReadWrite;
    public static PsUserRightsMask UserRightsAdmin;
    public static PsUserRightsMask UserRightsAll;
}
[EditorBrowsableAttribute("1")]
public enum Microsoft.TeamFoundation.WorkItemTracking.Common.DataStore.ServerDefaultType : Enum {
    public int value__;
    public static ServerDefaultType ServerDateTime;
    public static ServerDefaultType CallerIdentity;
    public static ServerDefaultType RandomGuid;
}
public class Microsoft.TeamFoundation.WorkItemTracking.Common.DuplicateGroupContributionsException : Exception {
    [CompilerGeneratedAttribute]
private string <PageLabel>k__BackingField;
    [CompilerGeneratedAttribute]
private string <GroupContributionId>k__BackingField;
    public string PageLabel { get; private set; }
    public string GroupContributionId { get; private set; }
    public DuplicateGroupContributionsException(string pageLabel, string groupContributionId);
    [CompilerGeneratedAttribute]
public string get_PageLabel();
    [CompilerGeneratedAttribute]
private void set_PageLabel(string value);
    [CompilerGeneratedAttribute]
public string get_GroupContributionId();
    [CompilerGeneratedAttribute]
private void set_GroupContributionId(string value);
}
public class Microsoft.TeamFoundation.WorkItemTracking.Common.DuplicatePageContributionsException : Exception {
    [CompilerGeneratedAttribute]
private string <PageContributionId>k__BackingField;
    public string PageContributionId { get; private set; }
    public DuplicatePageContributionsException(string pageContributionId);
    [CompilerGeneratedAttribute]
public string get_PageContributionId();
    [CompilerGeneratedAttribute]
private void set_PageContributionId(string value);
}
[EditorBrowsableAttribute("1")]
public class Microsoft.TeamFoundation.WorkItemTracking.Common.EventElementAttributes : ValueType {
    public static string MaxSequence;
}
public class Microsoft.TeamFoundation.WorkItemTracking.Common.ExtensionDoesNotContainValidFormContribution : Exception {
    [CompilerGeneratedAttribute]
private string <ExtensionId>k__BackingField;
    public string ExtensionId { get; private set; }
    public ExtensionDoesNotContainValidFormContribution(string extension);
    [CompilerGeneratedAttribute]
public string get_ExtensionId();
    [CompilerGeneratedAttribute]
private void set_ExtensionId(string value);
}
[EditorBrowsableAttribute("1")]
public static class Microsoft.TeamFoundation.WorkItemTracking.Common.ExternalArtifactConstants : object {
    public static int ExternalArtifactIdLength;
    public static int ExternalDeploymentType;
}
[EditorBrowsableAttribute("1")]
public enum Microsoft.TeamFoundation.WorkItemTracking.Common.ExternalArtifactHydrationStatus : Enum {
    public byte value__;
    public static ExternalArtifactHydrationStatus Watermark;
    public static ExternalArtifactHydrationStatus Partial;
    public static ExternalArtifactHydrationStatus Full;
    public static ExternalArtifactHydrationStatus Failed;
}
[EditorBrowsableAttribute("1")]
public static class Microsoft.TeamFoundation.WorkItemTracking.Common.ExternalConnectionConstants : object {
    public static int ExternalTinyStringMaxLength;
    public static int ExternalShortStringMaxLength;
    public static int ExternalLongStringMaxLength;
    public static Guid GitHubProviderId;
    public static string GitHubProviderKey;
    public static string GitHubProviderType;
    public static string GitHubEnterpriseProviderType;
    public static string GitHubEnterpriseHostHeaderKey;
    public static string GitHubEnterpriseVersionHeaderKey;
    public static int DefaultDataCollectionTimeFrameInDays;
    private static ExternalConnectionConstants();
}
[FlagsAttribute]
[EditorBrowsableAttribute("1")]
public enum Microsoft.TeamFoundation.WorkItemTracking.Common.FieldDBType : Enum {
    public int value__;
    public static FieldDBType MaskReadOnly;
    public static FieldDBType MaskIgnore;
    public static FieldDBType MaskStoreAsReference;
    public static FieldDBType Keyword;
    public static FieldDBType Integer;
    public static FieldDBType DateTime;
    public static FieldDBType LongText;
    public static FieldDBType Files;
    public static FieldDBType Object;
    public static FieldDBType TreeNode;
    public static FieldDBType RelatedLinks;
    public static FieldDBType Guid;
    public static FieldDBType Bit;
    public static FieldDBType Double;
    public static FieldDBType Person;
    public static FieldDBType TreePath;
    public static FieldDBType TreeId;
    public static FieldDBType TreeNodeName;
    public static FieldDBType TreeNodeType;
    public static FieldDBType History;
    public static FieldDBType Html;
    public static FieldDBType PlainText;
    public static FieldDBType MaskDataType;
    public static FieldDBType MaskDataSubType;
    public static FieldDBType MaskDataTypeSubType;
    public static FieldDBType MaskFieldType;
}
public class Microsoft.TeamFoundation.WorkItemTracking.Common.FieldReferenceNames : ValueType {
    public static string FoundInBuild;
    public static string IntegrationBuild;
    public static string ReproSteps;
    public static string StartDate;
    public static string TargetDate;
}
public enum Microsoft.TeamFoundation.WorkItemTracking.Common.FieldReportingType : Enum {
    public int value__;
    public static FieldReportingType None;
    public static FieldReportingType Measure;
    public static FieldReportingType Dimension;
    public static FieldReportingType DrillDownField;
}
[FlagsAttribute]
[EditorBrowsableAttribute("1")]
public enum Microsoft.TeamFoundation.WorkItemTracking.Common.FieldStatusFlags : Enum {
    public int value__;
    public static FieldStatusFlags None;
    public static FieldStatusFlags Required;
    public static FieldStatusFlags ReadOnly;
    public static FieldStatusFlags HasValues;
    public static FieldStatusFlags LimitedToValues;
    public static FieldStatusFlags HasFormats;
    public static FieldStatusFlags LimitedToFormats;
    public static FieldStatusFlags AllowsOldValue;
    public static FieldStatusFlags SetByRule;
    public static FieldStatusFlags SetByDefaultRule;
    public static FieldStatusFlags SetByComputedRule;
    public static FieldStatusFlags PendingListCheck;
    public static FieldStatusFlags InvalidType;
    public static FieldStatusFlags InvalidDate;
    public static FieldStatusFlags InvalidID;
    public static FieldStatusFlags InvalidPath;
    public static FieldStatusFlags InvalidTooLong;
    public static FieldStatusFlags InvalidSpecialChars;
    public static FieldStatusFlags InvalidRule;
    public static FieldStatusFlags InvalidEmpty;
    public static FieldStatusFlags InvalidNotEmpty;
    public static FieldStatusFlags InvalidFormat;
    public static FieldStatusFlags InvalidListValue;
    public static FieldStatusFlags InvalidOldValue;
    public static FieldStatusFlags InvalidNotOldValue;
    public static FieldStatusFlags InvalidEmptyOrOldValue;
    public static FieldStatusFlags InvalidNotEmptyOrOldValue;
    public static FieldStatusFlags InvalidValueInOtherField;
    public static FieldStatusFlags InvalidValueNotInOtherField;
    public static FieldStatusFlags InvalidComputedField;
    public static FieldStatusFlags InvalidIdentityField;
    public static FieldStatusFlags InvalidMask;
}
public class Microsoft.TeamFoundation.WorkItemTracking.Common.FormExtensionNotDeclaredException : Exception {
}
public class Microsoft.TeamFoundation.WorkItemTracking.Common.FormExtensionNotFoundOrNoFormContribution : Exception {
    [CompilerGeneratedAttribute]
private string <ExtensionId>k__BackingField;
    public string ExtensionId { get; private set; }
    public FormExtensionNotFoundOrNoFormContribution(string extensionId);
    [CompilerGeneratedAttribute]
public string get_ExtensionId();
    [CompilerGeneratedAttribute]
private void set_ExtensionId(string value);
}
[EditorBrowsableAttribute("1")]
public class Microsoft.TeamFoundation.WorkItemTracking.Common.GetSequenceIdFields : ValueType {
    public static string IdentitySeqId;
    public static string StructureSeqId;
    public static string SecuritySeqId;
    public static string GroupSeqId;
    public static string OrganizationSeqId;
}
[EditorBrowsableAttribute("1")]
public interface Microsoft.TeamFoundation.WorkItemTracking.Common.IMetadataProvisioningHelper {
    public StringComparer ServerStringComparer { get; }
    public CultureInfo ServerCulture { get; }
    public string InstanceGuid { get; }
    public bool HasWorkItemType { get; }
    public int WorkItemLinkTypesCount { get; }
    public bool UseStrictFieldNameCheck { get; }
    public bool IgnoreReportabilityChange { get; }
    public abstract virtual bool IsSupported(string feature);
    public abstract virtual StringComparer get_ServerStringComparer();
    public abstract virtual CultureInfo get_ServerCulture();
    public abstract virtual string get_InstanceGuid();
    public abstract virtual List`1<int> GetFields();
    public abstract virtual string GetFieldName(int fieldId);
    public abstract virtual string GetFieldReferenceName(int fieldId);
    public abstract virtual PsFieldDefinitionTypeEnum GetPsFieldType(int fieldId);
    public abstract virtual int GetPsReportingType(int fieldId);
    public abstract virtual int GetPsReportingFormula(int fieldId);
    public abstract virtual bool IsReportable(int fieldId);
    public abstract virtual string GetReportingName(int fieldId);
    public abstract virtual string GetReportingReferenceName(int fieldId);
    public abstract virtual bool IsIgnored(int fieldId);
    public abstract virtual bool IsComputed(int fieldId);
    public abstract virtual void RaiseImportEvent(Exception exception, string message);
    public abstract virtual void ThrowValidationException(string message);
    public abstract virtual string GetNodeGuid(int nodeId);
    public abstract virtual string GetWorkItemLinkTypeForwardEndName(string workItemLinkTypeReferenceName);
    public abstract virtual string GetWorkItemLinkTypeReverseEndName(string workItemLinkTypeReferenceName);
    public abstract virtual string GetWorkItemReferenceNameByFriendlyName(string friendlyName);
    public abstract virtual int GetTopologyForWorkItemLinkTypeRefName(string workItemLinkTypeReferenceName);
    public abstract virtual bool EditAllowForWorkItemLinkType(string workItemLinkTypeReferenceName);
    public abstract virtual bool ExistsWorkItemLinkRefName(string workItemLinkTypeReferenceName);
    public abstract virtual List`1<string> GetWorkItemLinkTypeReferenceNames();
    public abstract virtual List`1<string> GetRegisteredLinkTypes();
    public abstract virtual IEnumerable`1<int> GetCoreFieldIds();
    public abstract virtual bool get_HasWorkItemType();
    public abstract virtual int get_WorkItemLinkTypesCount();
    public abstract virtual bool IsLinkTypeDirectional(string ltr);
    public abstract virtual bool ContainsField(string field);
    public abstract virtual bool get_UseStrictFieldNameCheck();
    public abstract virtual bool get_IgnoreReportabilityChange();
    public abstract virtual IDictionary`2<int, IEnumerable`1<ListItem>> ExpandSetsOneLevel(IEnumerable`1<int> setIds);
    public abstract virtual bool FindConstByFullName(string name, bool isIdentity, Int32& id);
    public abstract virtual bool IsValidGroup(int id);
    public abstract virtual bool IsValidUserOrGroup(int id);
    public abstract virtual bool IsValidIdentityNameFormat(string name);
    public abstract virtual void ValidateRequiredFieldsOnLayout(XmlElement fieldsElement, XmlElement workflowElement, XmlElement formElement, Action`1<string> requiredFieldNotInBothLayoutsErrorAction);
    public abstract virtual void ValidateWebLayoutControls(XmlElement webLayoutElement, Action`1<string> systemControlNotAllowedErrorAction, Action controlHeightNotAllowedErrorAction, Action`1<string> controlNotRecognizedWarningAction);
    public abstract virtual void ValidateWebLayoutSystemControls(XmlElement webLayoutElement, ValidateWebLayoutSystemControlErrorActions errorActions);
    public abstract virtual void GeneratePageAndGroupIds(string processName, string workItemTypeName, XmlElement webLayoutElement, Action`1<string> invalidOrDuplicatedPageLabelErrorAction, Action`1<string> invalidOrDuplicatedGroupLabelErrorAction, Action`1<string> invalidControlsInGroupErrorAction, Action`2<string, string> duplicateControlsInGroupErrorAction);
    public abstract virtual void ValidateWebLayoutExtensions(XmlElement webLayoutElement, Func`3<string, String[], bool> doesFieldExist);
    public abstract virtual void ValidateLinksControls(XmlElement webLayoutElement);
}
internal class Microsoft.TeamFoundation.WorkItemTracking.Common.Instrumentation : ValueType {
    public static string LoggingSource;
    public static string CounterCategory;
    public static string ActiveQueryRequests;
    public static string ActivePagingRequests;
    public static string ActiveGetWorkitemRequests;
    public static string ActiveUpdateRequests;
    public static string ActiveGetMetadataRequests;
    public static string ActiveGetStoredQueryRequests;
    public static string ActiveGetStoredQueriesRequests;
    public static string ActiveGetQueryAccessControlListRequests;
}
[ExtensionAttribute]
[EditorBrowsableAttribute("1")]
public static class Microsoft.TeamFoundation.WorkItemTracking.Common.Internal.ExtensionMethods : object {
    [ExtensionAttribute]
public static string Replace(string s, string oldValue, string newValue, StringComparison comparisonType);
}
[EditorBrowsableAttribute("1")]
public enum Microsoft.TeamFoundation.WorkItemTracking.Common.InternalFieldType : Enum {
    public int value__;
    public static InternalFieldType String;
    public static InternalFieldType Integer;
    public static InternalFieldType DateTime;
    public static InternalFieldType PlainText;
    public static InternalFieldType Html;
    public static InternalFieldType TreePath;
    public static InternalFieldType History;
    public static InternalFieldType Double;
    public static InternalFieldType Guid;
    public static InternalFieldType Boolean;
    public static InternalFieldType Identity;
    public static InternalFieldType PicklistInteger;
    public static InternalFieldType PicklistString;
    public static InternalFieldType PicklistDouble;
}
[EditorBrowsableAttribute("1")]
public enum Microsoft.TeamFoundation.WorkItemTracking.Common.InternalFieldUsages : Enum {
    public int value__;
    public static InternalFieldUsages None;
    public static InternalFieldUsages WorkItem;
    public static InternalFieldUsages WorkItemLink;
    public static InternalFieldUsages Tree;
    public static InternalFieldUsages WorkItemTypeExtension;
}
internal static class Microsoft.TeamFoundation.WorkItemTracking.Common.InternalSchemaFiles : object {
    public static string WorkItemType1;
    public static string WorkItemType2;
    public static string GlobalLists1;
    public static string WorkItemLinkTypes1;
    public static string Categories1;
    public static string TypeLib1;
    public static string TypeLib2;
    public static string GlobalWorkflow1;
}
[EditorBrowsableAttribute("1")]
public static class Microsoft.TeamFoundation.WorkItemTracking.Common.InternalSchemas : object {
    public static XmlSchema GetSchema(InternalSchemaType type);
    [IteratorStateMachineAttribute("Microsoft.TeamFoundation.WorkItemTracking.Common.InternalSchemas/<GetSchemas>d__1")]
public static IEnumerable`1<XmlSchema> GetSchemas(InternalSchemaType type);
    private static XmlSchema ReadSchema(string name);
    public static void InitSchemaSet(InternalSchemaType type, XmlSchemaSet schemas);
    private static XmlSchema RemoveNamespace(XmlSchema schema);
}
[EditorBrowsableAttribute("1")]
public enum Microsoft.TeamFoundation.WorkItemTracking.Common.InternalSchemaType : Enum {
    public int value__;
    public static InternalSchemaType WorkItemType;
    public static InternalSchemaType GlobalLists;
    public static InternalSchemaType SharedTypes;
    public static InternalSchemaType WorkItemLinkType;
    public static InternalSchemaType Categories;
    public static InternalSchemaType GlobalWorkflow;
}
[EditorBrowsableAttribute("1")]
public static class Microsoft.TeamFoundation.WorkItemTracking.Common.InternalSupportedFeatures : object {
    public static string GuidFields;
    public static string BooleanFields;
    public static string IdentityFields;
    public static string QueryFolders;
    public static string QueryFolderPermissions;
    public static string QueryFolderSetOwner;
    public static string QueryFieldsComparison;
    public static string QueryHistoricalRevisions;
    public static string QueryInGroupFilter;
    public static string WorkItemTypeCategories;
    public static string WorkItemLinks;
    public static string WorkItemLinkLocks;
    public static string BatchSaveWorkItemsFromDifferentProjects;
    public static string SyncNameChanges;
    public static string ReportingNames;
    public static string SetReportingTypeToNone;
    public static string GlobalWorkflow;
    public static string QueryRecursiveReturnMatchingChildren;
    public static string ProvisionPermission;
    public static string ConfigurableBulkUpdateBatchSize;
}
internal class Microsoft.TeamFoundation.WorkItemTracking.Common.InTheBoxTfsGroupSids : ValueType {
    public static string ServiceAccounts;
}
public class Microsoft.TeamFoundation.WorkItemTracking.Common.InvalidContributionInputIdException : Exception {
    [CompilerGeneratedAttribute]
private string <ContributionId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ContributionInputId>k__BackingField;
    public string ContributionId { get; private set; }
    public string ContributionInputId { get; private set; }
    public InvalidContributionInputIdException(string contributionId, string contributionInputId);
    [CompilerGeneratedAttribute]
public string get_ContributionId();
    [CompilerGeneratedAttribute]
private void set_ContributionId(string value);
    [CompilerGeneratedAttribute]
public string get_ContributionInputId();
    [CompilerGeneratedAttribute]
private void set_ContributionInputId(string value);
}
public class Microsoft.TeamFoundation.WorkItemTracking.Common.InvalidContributionInputTypeException : Exception {
    [CompilerGeneratedAttribute]
private string <ContributionId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ContributionInputId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ContributionInputType>k__BackingField;
    public string ContributionId { get; private set; }
    public string ContributionInputId { get; private set; }
    public string ContributionInputType { get; private set; }
    public InvalidContributionInputTypeException(string contributionId, string contributionInputId, string contributionInputType);
    [CompilerGeneratedAttribute]
public string get_ContributionId();
    [CompilerGeneratedAttribute]
private void set_ContributionId(string value);
    [CompilerGeneratedAttribute]
public string get_ContributionInputId();
    [CompilerGeneratedAttribute]
private void set_ContributionInputId(string value);
    [CompilerGeneratedAttribute]
public string get_ContributionInputType();
    [CompilerGeneratedAttribute]
private void set_ContributionInputType(string value);
}
public class Microsoft.TeamFoundation.WorkItemTracking.Common.InvalidContributionInputValueException : Exception {
    [CompilerGeneratedAttribute]
private string <ContributionId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ContributionInputId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ContributionInputValue>k__BackingField;
    public string ContributionId { get; private set; }
    public string ContributionInputId { get; private set; }
    public string ContributionInputValue { get; private set; }
    public InvalidContributionInputValueException(string contributionId, string contributionInputId, string contributionInputValue);
    [CompilerGeneratedAttribute]
public string get_ContributionId();
    [CompilerGeneratedAttribute]
private void set_ContributionId(string value);
    [CompilerGeneratedAttribute]
public string get_ContributionInputId();
    [CompilerGeneratedAttribute]
private void set_ContributionInputId(string value);
    [CompilerGeneratedAttribute]
public string get_ContributionInputValue();
    [CompilerGeneratedAttribute]
private void set_ContributionInputValue(string value);
}
public class Microsoft.TeamFoundation.WorkItemTracking.Common.InvalidContributionTypeException : Exception {
    [CompilerGeneratedAttribute]
private string <ContributionId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ExpectedContributionType>k__BackingField;
    public string ContributionId { get; private set; }
    public string ExpectedContributionType { get; private set; }
    public InvalidContributionTypeException(string contributionId, string expectedContributionType);
    [CompilerGeneratedAttribute]
public string get_ContributionId();
    [CompilerGeneratedAttribute]
private void set_ContributionId(string value);
    [CompilerGeneratedAttribute]
public string get_ExpectedContributionType();
    [CompilerGeneratedAttribute]
private void set_ExpectedContributionType(string value);
}
public class Microsoft.TeamFoundation.WorkItemTracking.Common.LinkingUtilitiesWrapper : object {
    public virtual bool IsToolTypeWellFormed(string tool);
    public virtual bool IsUriWellFormed(string artifactUri);
    public virtual bool IsArtifactTypeWellFormed(string artifactType);
    public virtual bool IsArtifactToolSpecificIdWellFormed(string toolSpecificId);
    public virtual bool IsArtifactIdWellFormed(ArtifactId artifactId);
    public virtual string EncodeUri(ArtifactId artifactId);
    public virtual ArtifactId DecodeUri(string uri);
    public virtual ArrayList RemoveDuplicateArtifacts(ArrayList artifactList);
    public virtual string GetArtifactUri(string artifactUrl);
    public virtual string GetArtifactUrl(string artifactDisplayUrl, ArtifactId artId, string serverUrl);
    public virtual string GetServerUrl(Uri serverUri);
}
[EditorBrowsableAttribute("1")]
public class Microsoft.TeamFoundation.WorkItemTracking.Common.LinkQueryResultXmlConstants : ValueType {
    public static string RootElement;
    public static string ChildElement;
    public static string SourceID;
    public static string TargetID;
    public static string LinkType;
    public static string EnumValue;
    public static string SourceRun;
    public static string TargetRun;
    public static string RunStart;
    public static string RunEnd;
    public static int MissingID;
}
[EditorBrowsableAttribute("1")]
public class Microsoft.TeamFoundation.WorkItemTracking.Common.LinkTopologies : ValueType {
    public static int Network;
    public static int DirectedNetwork;
    public static int Dependency;
    public static int Tree;
}
[EditorBrowsableAttribute("1")]
public enum Microsoft.TeamFoundation.WorkItemTracking.Common.LinkTopology : Enum {
    public int value__;
    public static LinkTopology Network;
    public static LinkTopology DirectedNetwork;
    public static LinkTopology Dependency;
    public static LinkTopology Tree;
}
[EditorBrowsableAttribute("1")]
public class Microsoft.TeamFoundation.WorkItemTracking.Common.LinkTypeRuleMasks : ValueType {
    public static int DenyDelete;
    public static int DenyEdit;
    public static int Directional;
    public static int NonCircular;
    public static int SingleTarget;
    public static int Disabled;
    public static int Remote;
}
[EditorBrowsableAttribute("1")]
public enum Microsoft.TeamFoundation.WorkItemTracking.Common.LinkUpdateType : Enum {
    public int value__;
    public static LinkUpdateType Add;
    public static LinkUpdateType Update;
    public static LinkUpdateType Delete;
}
[EditorBrowsableAttribute("1")]
public class Microsoft.TeamFoundation.WorkItemTracking.Common.ListItem : ValueType {
    [CompilerGeneratedAttribute]
private int <ConstId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DisplayName>k__BackingField;
    public int ConstId { get; public set; }
    public string DisplayName { get; public set; }
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public int get_ConstId();
    [CompilerGeneratedAttribute]
public void set_ConstId(int value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public string get_DisplayName();
    [CompilerGeneratedAttribute]
public void set_DisplayName(string value);
    public virtual int GetHashCode();
    public virtual bool Equals(object obj);
    public sealed virtual bool Equals(ListItem other);
    public static bool op_Equality(ListItem op1, ListItem op2);
    public static bool op_Inequality(ListItem op1, ListItem op2);
}
[EditorBrowsableAttribute("1")]
public class Microsoft.TeamFoundation.WorkItemTracking.Common.Metadata.MDWorkItemLinkType : object {
    [CompilerGeneratedAttribute]
private WorkItemLinkTypeEnd <ForwardEnd>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ReferenceName>k__BackingField;
    public int Rules;
    private WorkItemLinkTypeEnd m_reverseEnd;
    private static int c_topologyMask;
    public WorkItemLinkTypeEnd ForwardEnd { get; public set; }
    public WorkItemLinkTypeEnd ReverseEnd { get; public set; }
    public int ForwardId { get; }
    public int ReverseId { get; }
    public string ReferenceName { get; public set; }
    public string ForwardEndName { get; }
    public string ReverseEndName { get; }
    public bool CanEdit { get; }
    public bool Enabled { get; }
    public bool IsCircular { get; }
    public bool IsDirectional { get; }
    public bool IsOneToMany { get; }
    public bool IsRemote { get; }
    public LinkTopology Topology { get; }
    public int InternalLinkTopologies { get; }
    [CompilerGeneratedAttribute]
public WorkItemLinkTypeEnd get_ForwardEnd();
    [CompilerGeneratedAttribute]
public void set_ForwardEnd(WorkItemLinkTypeEnd value);
    public WorkItemLinkTypeEnd get_ReverseEnd();
    public void set_ReverseEnd(WorkItemLinkTypeEnd value);
    public int get_ForwardId();
    public int get_ReverseId();
    [CompilerGeneratedAttribute]
public string get_ReferenceName();
    [CompilerGeneratedAttribute]
public void set_ReferenceName(string value);
    public string get_ForwardEndName();
    public string get_ReverseEndName();
    public bool get_CanEdit();
    public bool get_Enabled();
    public bool get_IsCircular();
    public bool get_IsDirectional();
    public bool get_IsOneToMany();
    public bool get_IsRemote();
    public LinkTopology get_Topology();
    public int get_InternalLinkTopologies();
}
public class Microsoft.TeamFoundation.WorkItemTracking.Common.Metadata.WorkItemLinkTypeEnd : object {
    [CompilerGeneratedAttribute]
private int <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private MDWorkItemLinkType <LinkType>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsForwardEnd>k__BackingField;
    private static string c_forward;
    private static string c_reverse;
    public int Id { get; public set; }
    public string ReferenceName { get; }
    public string Name { get; public set; }
    public MDWorkItemLinkType LinkType { get; public set; }
    public WorkItemLinkTypeEnd OppositeEnd { get; }
    public bool IsForwardEnd { get; public set; }
    [CompilerGeneratedAttribute]
public int get_Id();
    [CompilerGeneratedAttribute]
public void set_Id(int value);
    public string get_ReferenceName();
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public MDWorkItemLinkType get_LinkType();
    [CompilerGeneratedAttribute]
public void set_LinkType(MDWorkItemLinkType value);
    public WorkItemLinkTypeEnd get_OppositeEnd();
    [CompilerGeneratedAttribute]
public bool get_IsForwardEnd();
    [CompilerGeneratedAttribute]
public void set_IsForwardEnd(bool value);
}
[EditorBrowsableAttribute("1")]
public class Microsoft.TeamFoundation.WorkItemTracking.Common.PageSizeLimits : ValueType {
    public static int DefaultPageSize;
    public static int MaxPageSize;
}
[EditorBrowsableAttribute("1")]
public class Microsoft.TeamFoundation.WorkItemTracking.Common.PayloadXmlConstants : ValueType {
    public static string Namespace;
    public static string TableTag;
    public static string RowsTag;
    public static string RowTag;
    public static string FieldTag;
    public static string ColumnsTag;
    public static string ColumnTag;
    public static string ColumnNameTag;
    public static string ColumnTypeTag;
    public static string TableNameTag;
    public static string IndexTag;
}
[EditorBrowsableAttribute("1")]
public class Microsoft.TeamFoundation.WorkItemTracking.Common.PlanSecurityGroupConstants : ValueType {
    public static Guid SecurityNamespaceId;
    public static string SecurityNamespaceName;
    public static char PathSeparator;
    public static string RootToken;
    private static PlanSecurityGroupConstants();
}
public class Microsoft.TeamFoundation.WorkItemTracking.Common.Predicates.InvalidPredicateException : InvalidOperationException {
    public InvalidPredicateException(string message);
    public InvalidPredicateException(string message, Exception innerException);
    public InvalidPredicateException(SerializationInfo info, StreamingContext context);
}
public interface Microsoft.TeamFoundation.WorkItemTracking.Common.Predicates.IPredicateEvaluationHelper {
    public abstract virtual object GetFieldValue(int fieldId);
    public abstract virtual bool IsTreeNodeUnder(int parentTreeId, int childTreeId);
    public abstract virtual bool IsWorkItemTypeInCategory(string workItemType, string categoryId);
}
public interface Microsoft.TeamFoundation.WorkItemTracking.Common.Predicates.IPredicateValidationHelper {
    public abstract virtual InternalFieldType GetFieldType(string fieldReferenceName);
    public abstract virtual int GetFieldId(string fieldReferenceName);
    public abstract virtual string GetTreePath(int treeNodeId);
    public abstract virtual int GetTreeId(string path, TreeStructureType type);
}
[XmlTypeAttribute("and")]
public class Microsoft.TeamFoundation.WorkItemTracking.Common.Predicates.PredicateAndOperator : PredicateBinaryOperator {
    protected string WiqlOperator { get; }
    protected string InverseWiqlOperator { get; }
    protected virtual string get_WiqlOperator();
    protected virtual string get_InverseWiqlOperator();
    public virtual bool Evaluate(IPredicateEvaluationHelper helper);
}
public abstract class Microsoft.TeamFoundation.WorkItemTracking.Common.Predicates.PredicateBinaryOperator : PredicateOperator {
    [CompilerGeneratedAttribute]
private PredicateOperator[] <Operands>k__BackingField;
    [XmlElementAttribute("Microsoft.TeamFoundation.WorkItemTracking.Common.Predicates.PredicateAndOperator")]
[XmlElementAttribute("Microsoft.TeamFoundation.WorkItemTracking.Common.Predicates.PredicateOrOperator")]
[XmlElementAttribute("Microsoft.TeamFoundation.WorkItemTracking.Common.Predicates.PredicateNotOperator")]
[XmlElementAttribute("Microsoft.TeamFoundation.WorkItemTracking.Common.Predicates.PredicateEqualsOperator")]
[XmlElementAttribute("Microsoft.TeamFoundation.WorkItemTracking.Common.Predicates.PredicateNotEqualsOperator")]
[XmlElementAttribute("Microsoft.TeamFoundation.WorkItemTracking.Common.Predicates.PredicateGreaterThanOperator")]
[XmlElementAttribute("Microsoft.TeamFoundation.WorkItemTracking.Common.Predicates.PredicateGreaterOrEqualsOperator")]
[XmlElementAttribute("Microsoft.TeamFoundation.WorkItemTracking.Common.Predicates.PredicateLessThanOperator")]
[XmlElementAttribute("Microsoft.TeamFoundation.WorkItemTracking.Common.Predicates.PredicateLessOrEqualsOperator")]
[XmlElementAttribute("Microsoft.TeamFoundation.WorkItemTracking.Common.Predicates.PredicateContainsOperator")]
[XmlElementAttribute("Microsoft.TeamFoundation.WorkItemTracking.Common.Predicates.PredicateNotContainsOperator")]
[XmlElementAttribute("Microsoft.TeamFoundation.WorkItemTracking.Common.Predicates.PredicateUnderOperator")]
[XmlElementAttribute("Microsoft.TeamFoundation.WorkItemTracking.Common.Predicates.PredicateNotUnderOperator")]
[XmlElementAttribute("Microsoft.TeamFoundation.WorkItemTracking.Common.Predicates.PredicateInOperator")]
[XmlElementAttribute("Microsoft.TeamFoundation.WorkItemTracking.Common.Predicates.PredicateInGroupOperator")]
[XmlElementAttribute("Microsoft.TeamFoundation.WorkItemTracking.Common.Predicates.PredicateInListOperator")]
public PredicateOperator[] Operands { get; public set; }
    protected string WiqlOperator { get; }
    protected string InverseWiqlOperator { get; }
    [CompilerGeneratedAttribute]
public PredicateOperator[] get_Operands();
    [CompilerGeneratedAttribute]
public void set_Operands(PredicateOperator[] value);
    protected abstract virtual string get_WiqlOperator();
    protected abstract virtual string get_InverseWiqlOperator();
    public virtual void Validate(IPredicateValidationHelper validator);
    protected internal virtual string ToWIQLPredicate(IPredicateValidationHelper validator, bool inverse);
    public virtual IEnumerable`1<int> GetReferencedFields();
    public virtual void FixFieldReferences(IPredicateValidationHelper validationHelper);
    public virtual bool Walk(PredicateOperator parent, PredicateVisitor before, PredicateVisitor after);
    public virtual PredicateOperator Clone();
}
[XmlTypeAttribute("contains")]
public class Microsoft.TeamFoundation.WorkItemTracking.Common.Predicates.PredicateContainsOperator : PredicateFieldComparisonOperator {
    protected string WiqlOperator { get; }
    protected string InverseWiqlOperator { get; }
    protected virtual string get_WiqlOperator();
    protected virtual string get_InverseWiqlOperator();
    public virtual void Validate(IPredicateValidationHelper validator);
    public virtual bool Evaluate(IPredicateEvaluationHelper helper);
}
[XmlTypeAttribute("equals")]
public class Microsoft.TeamFoundation.WorkItemTracking.Common.Predicates.PredicateEqualsOperator : PredicateFieldComparisonOperator {
    protected string WiqlOperator { get; }
    protected string InverseWiqlOperator { get; }
    protected virtual string get_WiqlOperator();
    protected virtual string get_InverseWiqlOperator();
    public virtual bool Evaluate(IPredicateEvaluationHelper helper);
}
public abstract class Microsoft.TeamFoundation.WorkItemTracking.Common.Predicates.PredicateFieldComparisonOperator : PredicateOperator {
    private Nullable`1<InternalFieldType> m_fieldType;
    [CompilerGeneratedAttribute]
private string <Field>k__BackingField;
    [CompilerGeneratedAttribute]
private int <FieldId>k__BackingField;
    [CompilerGeneratedAttribute]
private object <Value>k__BackingField;
    [XmlAttributeAttribute("field")]
public string Field { get; public set; }
    [XmlIgnoreAttribute]
internal int FieldId { get; internal set; }
    [XmlElementAttribute("string", "System.String")]
[XmlElementAttribute("int", "System.Int32")]
[XmlElementAttribute("double", "System.Double")]
[XmlElementAttribute("guid", "System.Guid")]
[XmlElementAttribute("date-time", "System.DateTime")]
[XmlElementAttribute("bool", "System.Boolean")]
[XmlElementAttribute("strings", "System.String[]")]
public object Value { get; public set; }
    protected string WiqlOperator { get; }
    protected string InverseWiqlOperator { get; }
    [CompilerGeneratedAttribute]
public string get_Field();
    [CompilerGeneratedAttribute]
public void set_Field(string value);
    [CompilerGeneratedAttribute]
internal int get_FieldId();
    [CompilerGeneratedAttribute]
internal void set_FieldId(int value);
    [CompilerGeneratedAttribute]
public object get_Value();
    [CompilerGeneratedAttribute]
public void set_Value(object value);
    protected abstract virtual string get_WiqlOperator();
    protected abstract virtual string get_InverseWiqlOperator();
    protected InternalFieldType GetFieldType(IPredicateValidationHelper helper);
    public virtual void Validate(IPredicateValidationHelper validator);
    protected virtual void ValidateFieldType(IPredicateValidationHelper validator);
    protected int Compare(IPredicateEvaluationHelper helper);
    protected virtual string GetWiqlFieldReferenceName(IPredicateValidationHelper validator);
    protected virtual object GetWiqlFieldValue(IPredicateValidationHelper validator);
    private string GetFalsyExpression(bool inverse);
    protected internal virtual string ToWIQLPredicate(IPredicateValidationHelper validator, bool inverse);
    public virtual IEnumerable`1<int> GetReferencedFields();
    public virtual void FixFieldReferences(IPredicateValidationHelper validationHelper);
    private static string QuoteStringValue(string value);
}
[XmlTypeAttribute("greater-or-equals")]
public class Microsoft.TeamFoundation.WorkItemTracking.Common.Predicates.PredicateGreaterOrEqualsOperator : PredicateFieldComparisonOperator {
    protected string WiqlOperator { get; }
    protected string InverseWiqlOperator { get; }
    protected virtual string get_WiqlOperator();
    protected virtual string get_InverseWiqlOperator();
    public virtual bool Evaluate(IPredicateEvaluationHelper helper);
}
[XmlTypeAttribute("greater-than")]
public class Microsoft.TeamFoundation.WorkItemTracking.Common.Predicates.PredicateGreaterThanOperator : PredicateFieldComparisonOperator {
    protected string WiqlOperator { get; }
    protected string InverseWiqlOperator { get; }
    protected virtual string get_WiqlOperator();
    protected virtual string get_InverseWiqlOperator();
    public virtual bool Evaluate(IPredicateEvaluationHelper helper);
}
[XmlTypeAttribute("in-group")]
public class Microsoft.TeamFoundation.WorkItemTracking.Common.Predicates.PredicateInGroupOperator : PredicateFieldComparisonOperator {
    protected string WiqlOperator { get; }
    protected string InverseWiqlOperator { get; }
    protected virtual string get_WiqlOperator();
    protected virtual string get_InverseWiqlOperator();
    public virtual void Validate(IPredicateValidationHelper validator);
    protected virtual void ValidateFieldType(IPredicateValidationHelper validator);
    public virtual bool Evaluate(IPredicateEvaluationHelper helper);
}
[XmlTypeAttribute("in-list")]
public class Microsoft.TeamFoundation.WorkItemTracking.Common.Predicates.PredicateInListOperator : PredicateOperator {
    [CompilerGeneratedAttribute]
private string <List>k__BackingField;
    protected string WiqlOperator { get; }
    protected string InverseWiqlOperator { get; }
    [XmlAttributeAttribute("list")]
public string List { get; public set; }
    protected string get_WiqlOperator();
    protected string get_InverseWiqlOperator();
    [CompilerGeneratedAttribute]
public string get_List();
    [CompilerGeneratedAttribute]
public void set_List(string value);
    public virtual void Validate(IPredicateValidationHelper validator);
    protected internal virtual string ToWIQLPredicate(IPredicateValidationHelper validator, bool inverse);
}
[XmlTypeAttribute("in")]
public class Microsoft.TeamFoundation.WorkItemTracking.Common.Predicates.PredicateInOperator : PredicateFieldComparisonOperator {
    protected string WiqlOperator { get; }
    protected string InverseWiqlOperator { get; }
    protected virtual string get_WiqlOperator();
    protected virtual string get_InverseWiqlOperator();
    public virtual void Validate(IPredicateValidationHelper validator);
    protected virtual void ValidateFieldType(IPredicateValidationHelper validator);
    public virtual bool Evaluate(IPredicateEvaluationHelper helper);
}
[XmlTypeAttribute("less-or-equals")]
public class Microsoft.TeamFoundation.WorkItemTracking.Common.Predicates.PredicateLessOrEqualsOperator : PredicateFieldComparisonOperator {
    protected string WiqlOperator { get; }
    protected string InverseWiqlOperator { get; }
    protected virtual string get_WiqlOperator();
    protected virtual string get_InverseWiqlOperator();
    public virtual bool Evaluate(IPredicateEvaluationHelper helper);
}
[XmlTypeAttribute("less-than")]
public class Microsoft.TeamFoundation.WorkItemTracking.Common.Predicates.PredicateLessThanOperator : PredicateFieldComparisonOperator {
    protected string WiqlOperator { get; }
    protected string InverseWiqlOperator { get; }
    protected virtual string get_WiqlOperator();
    protected virtual string get_InverseWiqlOperator();
    public virtual bool Evaluate(IPredicateEvaluationHelper helper);
}
[XmlTypeAttribute("not-contains")]
public class Microsoft.TeamFoundation.WorkItemTracking.Common.Predicates.PredicateNotContainsOperator : PredicateContainsOperator {
    public virtual bool Evaluate(IPredicateEvaluationHelper helper);
    protected internal virtual string ToWIQLPredicate(IPredicateValidationHelper validator, bool inverse);
}
[XmlTypeAttribute("not-equals")]
public class Microsoft.TeamFoundation.WorkItemTracking.Common.Predicates.PredicateNotEqualsOperator : PredicateEqualsOperator {
    public virtual bool Evaluate(IPredicateEvaluationHelper helper);
    protected internal virtual string ToWIQLPredicate(IPredicateValidationHelper validator, bool inverse);
}
[XmlTypeAttribute("not")]
public class Microsoft.TeamFoundation.WorkItemTracking.Common.Predicates.PredicateNotOperator : PredicateUnaryOperator {
    public virtual bool Evaluate(IPredicateEvaluationHelper helper);
    protected internal virtual string ToWIQLPredicate(IPredicateValidationHelper validator, bool inverse);
}
[XmlTypeAttribute("not-under")]
public class Microsoft.TeamFoundation.WorkItemTracking.Common.Predicates.PredicateNotUnderOperator : PredicateUnderOperator {
    public virtual bool Evaluate(IPredicateEvaluationHelper helper);
    protected internal virtual string ToWIQLPredicate(IPredicateValidationHelper validator, bool inverse);
}
public abstract class Microsoft.TeamFoundation.WorkItemTracking.Common.Predicates.PredicateOperator : object {
    public virtual bool Evaluate(IPredicateEvaluationHelper helper);
    public abstract virtual void Validate(IPredicateValidationHelper validator);
    public virtual string ToWIQLPredicate(IPredicateValidationHelper validator);
    protected internal abstract virtual string ToWIQLPredicate(IPredicateValidationHelper validator, bool inverse);
    public virtual IEnumerable`1<int> GetReferencedFields();
    public virtual void FixFieldReferences(IPredicateValidationHelper validationHelper);
    public virtual bool Walk(PredicateOperator parent, PredicateVisitor before, PredicateVisitor after);
    public virtual PredicateOperator Clone();
    private sealed virtual override object System.ICloneable.Clone();
}
[XmlTypeAttribute("or")]
public class Microsoft.TeamFoundation.WorkItemTracking.Common.Predicates.PredicateOrOperator : PredicateBinaryOperator {
    protected string WiqlOperator { get; }
    protected string InverseWiqlOperator { get; }
    protected virtual string get_WiqlOperator();
    protected virtual string get_InverseWiqlOperator();
    public virtual bool Evaluate(IPredicateEvaluationHelper helper);
}
public abstract class Microsoft.TeamFoundation.WorkItemTracking.Common.Predicates.PredicateUnaryOperator : PredicateOperator {
    [CompilerGeneratedAttribute]
private PredicateOperator <Operand>k__BackingField;
    [XmlElementAttribute("Microsoft.TeamFoundation.WorkItemTracking.Common.Predicates.PredicateAndOperator")]
[XmlElementAttribute("Microsoft.TeamFoundation.WorkItemTracking.Common.Predicates.PredicateOrOperator")]
[XmlElementAttribute("Microsoft.TeamFoundation.WorkItemTracking.Common.Predicates.PredicateNotOperator")]
[XmlElementAttribute("Microsoft.TeamFoundation.WorkItemTracking.Common.Predicates.PredicateEqualsOperator")]
[XmlElementAttribute("Microsoft.TeamFoundation.WorkItemTracking.Common.Predicates.PredicateNotEqualsOperator")]
[XmlElementAttribute("Microsoft.TeamFoundation.WorkItemTracking.Common.Predicates.PredicateGreaterThanOperator")]
[XmlElementAttribute("Microsoft.TeamFoundation.WorkItemTracking.Common.Predicates.PredicateGreaterOrEqualsOperator")]
[XmlElementAttribute("Microsoft.TeamFoundation.WorkItemTracking.Common.Predicates.PredicateLessThanOperator")]
[XmlElementAttribute("Microsoft.TeamFoundation.WorkItemTracking.Common.Predicates.PredicateLessOrEqualsOperator")]
[XmlElementAttribute("Microsoft.TeamFoundation.WorkItemTracking.Common.Predicates.PredicateContainsOperator")]
[XmlElementAttribute("Microsoft.TeamFoundation.WorkItemTracking.Common.Predicates.PredicateNotContainsOperator")]
[XmlElementAttribute("Microsoft.TeamFoundation.WorkItemTracking.Common.Predicates.PredicateUnderOperator")]
[XmlElementAttribute("Microsoft.TeamFoundation.WorkItemTracking.Common.Predicates.PredicateNotUnderOperator")]
[XmlElementAttribute("Microsoft.TeamFoundation.WorkItemTracking.Common.Predicates.PredicateInOperator")]
[XmlElementAttribute("Microsoft.TeamFoundation.WorkItemTracking.Common.Predicates.PredicateInGroupOperator")]
[XmlElementAttribute("Microsoft.TeamFoundation.WorkItemTracking.Common.Predicates.PredicateInListOperator")]
public PredicateOperator Operand { get; public set; }
    [CompilerGeneratedAttribute]
public PredicateOperator get_Operand();
    [CompilerGeneratedAttribute]
public void set_Operand(PredicateOperator value);
    public virtual bool Evaluate(IPredicateEvaluationHelper helper);
    public virtual void Validate(IPredicateValidationHelper validator);
    protected internal virtual string ToWIQLPredicate(IPredicateValidationHelper validator, bool inverse);
    public virtual IEnumerable`1<int> GetReferencedFields();
    public virtual void FixFieldReferences(IPredicateValidationHelper validationHelper);
    public virtual bool Walk(PredicateOperator parent, PredicateVisitor before, PredicateVisitor after);
}
[XmlTypeAttribute("under")]
public class Microsoft.TeamFoundation.WorkItemTracking.Common.Predicates.PredicateUnderOperator : PredicateFieldComparisonOperator {
    protected string WiqlOperator { get; }
    protected string InverseWiqlOperator { get; }
    protected virtual string get_WiqlOperator();
    protected virtual string get_InverseWiqlOperator();
    public virtual void Validate(IPredicateValidationHelper validator);
    public virtual bool Evaluate(IPredicateEvaluationHelper helper);
    protected virtual string GetWiqlFieldReferenceName(IPredicateValidationHelper validator);
    protected virtual object GetWiqlFieldValue(IPredicateValidationHelper validator);
}
public class Microsoft.TeamFoundation.WorkItemTracking.Common.Predicates.PredicateVisitor : MulticastDelegate {
    public PredicateVisitor(object object, IntPtr method);
    public virtual bool Invoke(PredicateOperator currentPredicate, PredicateOperator parentPredicate);
    public virtual IAsyncResult BeginInvoke(PredicateOperator currentPredicate, PredicateOperator parentPredicate, AsyncCallback callback, object object);
    public virtual bool EndInvoke(IAsyncResult result);
}
[XmlTypeAttribute("predicate")]
public class Microsoft.TeamFoundation.WorkItemTracking.Common.Predicates.WorkItemExtensionPredicate : PredicateUnaryOperator {
}
internal class Microsoft.TeamFoundation.WorkItemTracking.Common.Presentation.FormattingFieldDefinition : object {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ReferenceName>k__BackingField;
    [CompilerGeneratedAttribute]
private InternalFieldType <FieldType>k__BackingField;
    public string Name { get; private set; }
    public string ReferenceName { get; private set; }
    public InternalFieldType FieldType { get; private set; }
    public FormattingFieldDefinition(string name, string referenceName, InternalFieldType fieldType);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
private void set_Name(string value);
    [CompilerGeneratedAttribute]
public string get_ReferenceName();
    [CompilerGeneratedAttribute]
private void set_ReferenceName(string value);
    [CompilerGeneratedAttribute]
public InternalFieldType get_FieldType();
    [CompilerGeneratedAttribute]
private void set_FieldType(InternalFieldType value);
}
internal class Microsoft.TeamFoundation.WorkItemTracking.Common.Presentation.FormattingWorkItem : object {
    [CompilerGeneratedAttribute]
private int <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private IDictionary`2<string, object> <FieldValues>k__BackingField;
    public int Id { get; private set; }
    public IDictionary`2<string, object> FieldValues { get; private set; }
    public FormattingWorkItem(int id);
    [CompilerGeneratedAttribute]
public int get_Id();
    [CompilerGeneratedAttribute]
private void set_Id(int value);
    [CompilerGeneratedAttribute]
public IDictionary`2<string, object> get_FieldValues();
    [CompilerGeneratedAttribute]
private void set_FieldValues(IDictionary`2<string, object> value);
}
internal class Microsoft.TeamFoundation.WorkItemTracking.Common.Presentation.FormattingWorkItemCollection : object {
    [CompilerGeneratedAttribute]
private string <ProjectCollectionName>k__BackingField;
    [CompilerGeneratedAttribute]
private Uri <ProjectUri>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<Guid> <QueryId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <QueryName>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<FormattingWorkItem> <WorkItems>k__BackingField;
    public string ProjectCollectionName { get; private set; }
    public Uri ProjectUri { get; private set; }
    public Nullable`1<Guid> QueryId { get; private set; }
    public string QueryName { get; private set; }
    public IList`1<FormattingWorkItem> WorkItems { get; public set; }
    public FormattingWorkItemCollection(string projectCollectionName, Uri projectUri, Nullable`1<Guid> queryId, string queryName);
    public FormattingWorkItemCollection(string projectCollectionName, Uri projectUri);
    [CompilerGeneratedAttribute]
public string get_ProjectCollectionName();
    [CompilerGeneratedAttribute]
private void set_ProjectCollectionName(string value);
    [CompilerGeneratedAttribute]
public Uri get_ProjectUri();
    [CompilerGeneratedAttribute]
private void set_ProjectUri(Uri value);
    [CompilerGeneratedAttribute]
public Nullable`1<Guid> get_QueryId();
    [CompilerGeneratedAttribute]
private void set_QueryId(Nullable`1<Guid> value);
    [CompilerGeneratedAttribute]
public string get_QueryName();
    [CompilerGeneratedAttribute]
private void set_QueryName(string value);
    [CompilerGeneratedAttribute]
public IList`1<FormattingWorkItem> get_WorkItems();
    [CompilerGeneratedAttribute]
public void set_WorkItems(IList`1<FormattingWorkItem> value);
}
internal class Microsoft.TeamFoundation.WorkItemTracking.Common.Presentation.HtmlFormatter : object {
    private static string c_htmlDocumentLabel;
    private static string c_htmlHeaderLabel;
    private static string c_htmlBodyLabel;
    private static string c_htmlLineBreakLabel;
    private static string c_htmlTableLabel;
    private static string c_htmlBorderLabel;
    private static string c_htmlBorderColorLabel;
    private static string c_htmlColumnWidthLabel;
    private static string c_htmlColumnGroupLabel;
    private static string c_htmlColumnLabel;
    private static string c_htmlColumnSpanLabel;
    private static string c_htmlCellPaddingLabel;
    private static string c_htmlCellSpacingLabel;
    private static string c_htmlTableHeaderLabel;
    private static string c_htmlTableRowLabel;
    private static string c_htmlTableCellLabel;
    private static string c_htmlAnchorLabel;
    private static string c_htmlHrefLabel;
    private static string c_htmlBoldLabel;
    private static string c_htmlTextcolorLabel;
    private static string c_htmlSpanLabel;
    private static string c_htmlStyleLabel;
    private static string c_htmlParagraphTextLabel;
    private static string c_htmlTargetLabel;
    private static string c_htmlTabIndex;
    private static string c_htmlDefaultBodyStyle;
    private static int c_htmlBorderValue;
    private static int c_htmlColumnWidthValue;
    private static int c_htmlCellPaddingValue;
    private static int c_htmlCellSpacingValue;
    private static string c_generalLongTimeFormat;
    private static string c_htmlTargetBlankValue;
    private static string c_headerStyle;
    private static string c_tableStyle;
    private static string c_cellStyle;
    private static string c_headerColorCode;
    private static string c_rowBgColorCode;
    private static string c_rowBgColorCodeAlternate;
    private static string c_defaultIdColumnName;
    private static string c_defaultTitleColumnName;
    private static int c_defaultColumnCount;
    private static string c_themeRowBgColorCode;
    private static string c_themeRowBgColorCodeAlternate;
    private Dictionary`2<string, string> m_columnNameDictionary;
    public void SetDefaultColumnDisplayName(string corefieldReferenceName, string fieldDisplayName);
    public string FormatInputData(FormattingWorkItemCollection workItemList, IEnumerable`1<FormattingFieldDefinition> displayFieldList, IWorkItemUrlBuilder builder, bool useThemeSpecificBgColor);
    private static XElement CreateHeader(FormattingWorkItemCollection workItemCollection, IWorkItemUrlBuilder builder);
    private XElement CreateWorkItemTable(FormattingWorkItemCollection workItemCollection, IEnumerable`1<FormattingFieldDefinition> displayFieldList, IWorkItemUrlBuilder builder, bool useThemeSpecificBgColor);
    private XElement CreateWorkItemHeader(IEnumerable`1<FormattingFieldDefinition> displayFieldList);
    private static XElement CreateWorkItemRow(FormattingWorkItem wi, string currentRowBgColor, IEnumerable`1<FormattingFieldDefinition> displayFieldList, IWorkItemUrlBuilder builder, Uri projectUri);
    private static XElement GetAnchorNode(string url, object value);
}
internal interface Microsoft.TeamFoundation.WorkItemTracking.Common.Presentation.IWorkItemUrlBuilder {
    public abstract virtual string GetWorkItemHyperlink(int workItemId);
    public abstract virtual string GetWorkItemHyperlink(Uri projectUri, int workItemId);
    public abstract virtual string GetQueryResultsHyperlink(Uri projectUri, Guid queryId);
}
internal class Microsoft.TeamFoundation.WorkItemTracking.Common.Presentation.WorkItemUrlBuilder : object {
    private TswaClientHyperlinkService m_tswaLinkingService;
    private ILinking m_linkingService;
    private bool m_useProjectContextForUrl;
    public WorkItemUrlBuilder(TfsTeamProjectCollection teamProjectCollection, bool useProjectContextForUrl);
    public sealed virtual string GetWorkItemHyperlink(int workItemId);
    public sealed virtual string GetWorkItemHyperlink(Uri projectUri, int workItemId);
    public string GetWorkItemTswaHyperlink(int workItemId);
    public string GetNoWebAccessHyperlink(string projectUri);
    public sealed virtual string GetQueryResultsHyperlink(Uri projectUri, Guid queryId);
    public string GetWorkItemPageHyperlink(int workItemId);
    private string GetWorkItemTswaHyperlink(Uri projectUri, int workItemId);
}
[EditorBrowsableAttribute("1")]
public static class Microsoft.TeamFoundation.WorkItemTracking.Common.Provision.CategoryHelper : object {
    public static XmlDocument Export(IEnumerable`1<T> categories, Func`2<T, string> getReferenceName, Func`2<T, string> getDisplayName, Func`2<T, string> getDefaultType, Func`2<T, IEnumerable`1<string>> getTypes);
}
[EditorBrowsableAttribute("1")]
public enum Microsoft.TeamFoundation.WorkItemTracking.Common.Provision.ConditionType : Enum {
    public int value__;
    public static ConditionType Transparent;
    public static ConditionType Context;
    public static ConditionType Condition;
}
internal class Microsoft.TeamFoundation.WorkItemTracking.Common.Provision.FlagHelper : object {
    private ContextType m_type;
    private MetaID m_fromStateId;
    private MetaID m_toStateId;
    private FlagHelper(ContextType type, MetaID fromStateId, MetaID toStateId);
    public static FlagHelper StateCreateFlagHelper(MetaID stateId);
    public static FlagHelper TransitionCreateFlagHelper(MetaID fromStateId, MetaID toStateId);
    public static FlagHelper ReasonCreateFlagHelper(MetaID fromStateId, MetaID toStateId);
    public RuleFlags GetFlags(UpdatePackageFlagManager flagManager, XmlElement containerElement);
}
[EditorBrowsableAttribute("1")]
public class Microsoft.TeamFoundation.WorkItemTracking.Common.Provision.GlobalListsCollection : object {
    private IMetadataProvisioningHelper m_metadata;
    private Dictionary`2<string, HashSet`1<string>> m_newLists;
    private Dictionary`2<string, ListItem> m_existingLists;
    private Dictionary`2<UpdatePackageField, HashSet`1<int>> m_pendingValidation;
    private Dictionary`2<string, ListItem> ExistingLists { get; }
    public GlobalListsCollection(IMetadataProvisioningHelper provisioning);
    public void Add(XmlElement listElement, bool throwOnDuplicateGloballist);
    public void SubmitChanges(UpdatePackage batch);
    public void CheckItemsValidity(string listName, UpdatePackageField field);
    public void CheckPendingItemsValidity();
    private void ValidateListItems(UpdatePackageField field, IEnumerable`1<string> items);
    private Dictionary`2<string, ListItem> get_ExistingLists();
}
[EditorBrowsableAttribute("1")]
public interface Microsoft.TeamFoundation.WorkItemTracking.Common.Provision.IQueryProvisioningHelper {
    public abstract virtual IEnumerable`1<Guid> GetDirtyQueryItems();
    public abstract virtual bool IsQueryDeleted(Guid id);
    public abstract virtual bool IsQueryNew(Guid id);
    public abstract virtual bool IsQueryDirtyShallow(Guid id);
    public abstract virtual string GetOwnerIdentifier(Guid id, bool onlyIfChanged);
    public abstract virtual string GetIdentityType(Guid id, bool onlyIfChanged);
    public abstract virtual string GetQueryText(Guid id, bool onlyIfChanged);
    public abstract virtual Guid GetParentId(Guid id, bool onlyIfChanged);
    public abstract virtual string GetName(Guid id, bool onlyIfChanged);
    public abstract virtual IEnumerable`1<QueryAccessControlEntry> GetAccessControlEntries(Guid id);
    public abstract virtual bool IsAccessControlListDirty(Guid id);
    public abstract virtual bool GetInheritPermissions(Guid id);
}
[EditorBrowsableAttribute("1")]
public enum Microsoft.TeamFoundation.WorkItemTracking.Common.Provision.ListRuleType : Enum {
    public int value__;
    public static ListRuleType AllowedList;
    public static ListRuleType SuggestedList;
    public static ListRuleType ProhibitedList;
    public static ListRuleType RequiredList;
}
internal class Microsoft.TeamFoundation.WorkItemTracking.Common.Provision.MatchKey : object {
    [CompilerGeneratedAttribute]
private string <For>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Not>k__BackingField;
    private UpdatePackageData m_updatePackageData;
    public string For { get; private set; }
    public string Not { get; private set; }
    public MatchKey(UpdatePackageData updatePackageData, string forGroup, string notGroup);
    private sealed virtual override bool System.IEquatable<Microsoft.TeamFoundation.WorkItemTracking.Common.Provision.MatchKey>.Equals(MatchKey c);
    public virtual int GetHashCode();
    [CompilerGeneratedAttribute]
public string get_For();
    [CompilerGeneratedAttribute]
private void set_For(string value);
    [CompilerGeneratedAttribute]
public string get_Not();
    [CompilerGeneratedAttribute]
private void set_Not(string value);
}
[EditorBrowsableAttribute("1")]
public class Microsoft.TeamFoundation.WorkItemTracking.Common.Provision.MetaID : object {
    private int m_ID;
    private bool m_IsTemp;
    public bool IsTemporary { get; }
    public int Value { get; }
    private MetaID(int id, bool isTemp);
    public bool get_IsTemporary();
    public int get_Value();
    public static MetaID CreateTempMetaID(int tempId);
    public static MetaID CreateMetaID(int id);
    public virtual string ToString();
    public virtual int GetHashCode();
    private sealed virtual override int System.IComparable<Microsoft.TeamFoundation.WorkItemTracking.Common.Provision.MetaID>.CompareTo(MetaID other);
    private sealed virtual override bool System.IEquatable<Microsoft.TeamFoundation.WorkItemTracking.Common.Provision.MetaID>.Equals(MetaID other);
    public virtual bool Equals(object o);
    public static MetaID op_Implicit(int id);
}
[EditorBrowsableAttribute("1")]
public class Microsoft.TeamFoundation.WorkItemTracking.Common.Provision.MetaIDFactory : object {
    private int nextId;
    public MetaID NewMetaID();
    public MetaID NewMetaID(int id);
}
[EditorBrowsableAttribute("1")]
public static class Microsoft.TeamFoundation.WorkItemTracking.Common.Provision.ProvisionAttributes : object {
    public static string DefaultNamespace;
    public static string FriendlyName;
    public static string ReferenceName;
    public static string RenameSafe;
    public static string WorkItemTypeName;
    public static string FieldName;
    public static string FieldReferenceName;
    public static string GlobalListName;
    public static string GroupReference;
    public static string Application;
    public static string AppVersion;
    public static string ListItemValue;
    public static string FieldType;
    public static string FieldValue;
    public static string OriginalState;
    public static string NewState;
    public static string RuleValue;
    public static string RuleSource;
    public static string FieldReference;
    public static string StateValue;
    public static string Reportable;
    public static string FieldReportingName;
    public static string FieldReportingReferenceName;
    public static string Formula;
    public static string ExpandItems;
    public static string FilterItems;
    public static string MatchPattern;
    public static string RuleApplyTo;
    public static string RuleDontApplyTo;
    public static string TransitionAllowedFor;
    public static string TransitionProhibitedFor;
    public static string Margin;
    public static string Label;
    public static string Visible;
    public static string Height;
    public static string LayoutTarget;
    public static string LayoutHideReadOnlyEmptyFields;
    public static string LayoutShowEmptyReadOnlyFields;
    public static string LayoutHideControlBorders;
    public static string ColumnPercentWidth;
    public static string ColumnFixedWidth;
    public static string ControlFieldName;
    public static string ControlType;
    public static string ControlName;
    public static string ControlReadOnly;
    public static string ControlLabelPosition;
    public static string ControlEmptyText;
    public static string LinkAttribute;
    public static string LinkRefName;
    public static string LinkType;
    public static string FilterOn;
    public static string FilterType;
    public static string WorkItemType;
    public static string Scope;
    public static string ContributionId;
    public static string InstanceId;
    public static string ControlFontSize;
    public static string ExtensionId;
    public static string ControlHeight;
    public static string InputId;
    public static string InputValue;
    public static string PageLayoutMode;
    public static string WebLayoutElementId;
    public static string WebLayoutLinkType;
    public static string WebLayoutColumnName;
    public static string WebLayoutWorkItemTypeFiltersScope;
    public static string UrlRoot;
    public static string UrlPath;
    public static string ParamValue;
    public static string ParamType;
    public static string TargetName;
    public static string ReloadOnParamChange;
    public static string AllowScript;
    public static string Index;
    public static string ControlReplacesFieldReferenceName;
    private static ProvisionAttributes();
}
[EditorBrowsableAttribute("1")]
public static class Microsoft.TeamFoundation.WorkItemTracking.Common.Provision.ProvisionTags : object {
    public static string Root;
    public static string WorkItemType;
    public static string Description;
    public static string GlobalLists;
    public static string FieldDefinitions;
    public static string FieldDefinition;
    public static string Workflow;
    public static string States;
    public static string State;
    public static string Transitions;
    public static string Transition;
    public static string Reasons;
    public static string Reason;
    public static string DefaultReason;
    public static string FieldReferences;
    public static string FieldReference;
    public static string Form;
    public static string GlobalWorkflow;
    public static string HelpTextRule;
    public static string RequiredRule;
    public static string ReadOnlyRule;
    public static string NotSameAsRule;
    public static string CopyRule;
    public static string DefaultRule;
    public static string ServerDefaultRule;
    public static string CannotLoseValueRule;
    public static string AllowExistingValueRule;
    public static string EmptyRule;
    public static string ValidUserRule;
    public static string FrozenRule;
    public static string MatchRule;
    public static string AllowedValuesRule;
    public static string SuggestedValuesRule;
    public static string ProhibitedValuesRule;
    public static string GlobalList;
    public static string ListItem;
    public static string GroupItem;
    public static string UserList;
    public static string WhenCondition;
    public static string WhenNotCondition;
    public static string WhenChangedCondition;
    public static string WhenNotChangedCondition;
    public static string Actions;
    public static string Action;
    public static string Layout;
    public static string TabGroup;
    public static string Tab;
    public static string Group;
    public static string Column;
    public static string Control;
    public static string LinksControlOptions;
    public static string WorkItemLinkFilters;
    public static string ExternalLinkFilters;
    public static string WorkItemTypeFilters;
    public static string LinkColumns;
    public static string LinkColumn;
    public static string Filter;
    public static string WebLayout;
    public static string Page;
    public static string Section;
    public static string WebLayoutLinkFilters;
    public static string WebLayoutWorkItemLinkFilter;
    public static string WebLayoutExternalLinkFilter;
    public static string WebLayoutWorkItemTypeFilters;
    public static string WebLayoutLinkColumns;
    public static string WebLayoutLinkColumn;
    public static string PageContribution;
    public static string GroupContribution;
    public static string ControlContribution;
    public static string ControlContributionInputs;
    public static string ControlContributionInput;
    public static string Extensions;
    public static string Extension;
    public static string SystemControls;
    public static string Categories;
    public static string Category;
    public static string WorkItemTypeReference;
    public static string DefaultWorkItemTypeReference;
    public static string TypePrefix;
    public static string GlobalListsPrefix;
    public static string CategoriesPrefix;
    public static string LinkElement;
    public static string ParamElement;
    public static string LabelElement;
    public static string TextElement;
    public static string ContentElement;
    public static string WebpageControlOptions;
    private static ProvisionTags();
}
[EditorBrowsableAttribute("1")]
public static class Microsoft.TeamFoundation.WorkItemTracking.Common.Provision.ProvisionValues : object {
    public static string TypesNamespace;
    public static string GlobalListsNamespace;
    public static string CategoriesNamespace;
    public static string Application;
    public static string AppVersion;
    public static string SourceValue;
    public static string SourceField;
    public static string SourceClock;
    public static string SourceCurrentUser;
    public static string SourceGuid;
    public static string LayoutTargetNewForm;
    public static string LayoutTargetWeb;
    public static string FieldTypeString;
    public static string FieldTypeInteger;
    public static string FieldTypeDateTime;
    public static string FieldTypePlainText;
    public static string FieldTypeHtml;
    public static string FieldTypeDouble;
    public static string FieldTypeTreePath;
    public static string FieldTypeHistory;
    public static string FieldTypeGuid;
    public static string FieldTypeBoolean;
    public static string FieldTypeIdentity;
    public static string ReportingMeasure;
    public static string ReportingDimension;
    public static string ReportingDetail;
    public static string FormulaSum;
    public static string FormulaCount;
    public static string FormulaDistinctCount;
    public static string FormulaAvg;
    public static string FormulaMin;
    public static string FormulaMax;
    public static string ExcludeGroups;
    public static string ConstScopeInstance;
    public static string ConstScopeGlobal;
    public static string ConstScopeProject;
    public static string ControlFontSizeLarge;
    public static string ControlLabelPositionTop;
    public static string ControlLabelPositionLeft;
    public static string ColumnTargetDescription;
    public static string ColumnLinkComment;
    public static string ColumnLinkType;
    public static string Include;
    public static string Exclude;
    public static string IncludeAll;
    public static string ExcludeAll;
    public static string ForwardName;
    public static string ReverseName;
    public static string Project;
    public static string All;
    public static string ParamTypeValueOriginal;
    public static string ParamMacroProcessGuidanceUrl;
    public static string ParamMacroPortal;
    public static string ParamMacroReportManagerUrl;
    public static string ParamMacroReportServiceSiteUrl;
    public static string ParamMacroMe;
    public static string WebLayoutIncludeAllLinkTypes;
    public static string ForwardNameSuffix;
    public static string ReverseNameSuffix;
    private static ProvisionValues();
}
[EditorBrowsableAttribute("1")]
public class Microsoft.TeamFoundation.WorkItemTracking.Common.Provision.QueryAccessControlEntry : object {
    [CompilerGeneratedAttribute]
private string <IdentityType>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Identifier>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Deny>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Allow>k__BackingField;
    internal string IdentityType { get; private set; }
    internal string Identifier { get; private set; }
    internal int Deny { get; private set; }
    internal int Allow { get; private set; }
    public QueryAccessControlEntry(int allow, int deny, string identityType, string identifier);
    [CompilerGeneratedAttribute]
internal string get_IdentityType();
    [CompilerGeneratedAttribute]
private void set_IdentityType(string value);
    [CompilerGeneratedAttribute]
internal string get_Identifier();
    [CompilerGeneratedAttribute]
private void set_Identifier(string value);
    [CompilerGeneratedAttribute]
internal int get_Deny();
    [CompilerGeneratedAttribute]
private void set_Deny(int value);
    [CompilerGeneratedAttribute]
internal int get_Allow();
    [CompilerGeneratedAttribute]
private void set_Allow(int value);
}
[EditorBrowsableAttribute("1")]
public class Microsoft.TeamFoundation.WorkItemTracking.Common.Provision.QueryItemUpdatePackageHelpers : object {
    private IQueryProvisioningHelper m_provisioning;
    public QueryItemUpdatePackageHelpers(IQueryProvisioningHelper provisioning);
    public XmlDocument Translate();
    private void GenerateDeleteItemXml(XmlDocument xmlDoc, XmlElement rootNode, Guid itemId);
    private void GenerateNewItemXml(XmlDocument xmlDoc, XmlElement rootNode, Guid itemId);
    private void GenerateUpdateAclXml(XmlDocument xmlDoc, XmlElement rootNode, Guid itemId);
    private void GenerateUpdateItemXml(XmlDocument xmlDoc, XmlElement rootNode, Guid id);
}
[FlagsAttribute]
[EditorBrowsableAttribute("1")]
public enum Microsoft.TeamFoundation.WorkItemTracking.Common.Provision.RuleFlags : Enum {
    public int value__;
    public static RuleFlags AllowExistingValue;
}
internal enum Microsoft.TeamFoundation.WorkItemTracking.Common.Provision.RuleTypeEnum : Enum {
    public int value__;
    public static RuleTypeEnum HelpText;
    public static RuleTypeEnum Required;
    public static RuleTypeEnum ReadOnly;
    public static RuleTypeEnum Empty;
    public static RuleTypeEnum Frozen;
    public static RuleTypeEnum CannotLoseValue;
    public static RuleTypeEnum NotSameAs;
    public static RuleTypeEnum ValidUser;
    public static RuleTypeEnum Match;
    public static RuleTypeEnum AllowedValues;
    public static RuleTypeEnum SuggestedValues;
    public static RuleTypeEnum ProhibitedValues;
    public static RuleTypeEnum Default;
    public static RuleTypeEnum Copy;
    public static RuleTypeEnum ServerDefault;
    public static RuleTypeEnum AllowExistingValue;
}
internal class Microsoft.TeamFoundation.WorkItemTracking.Common.Provision.TransitionKey : object {
    private MetaID m_fromStateId;
    private MetaID m_toStateId;
    public MetaID ToStateId { get; }
    public TransitionKey(MetaID fromStateId, MetaID toStateId);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public MetaID get_ToStateId();
}
[EditorBrowsableAttribute("1")]
public class Microsoft.TeamFoundation.WorkItemTracking.Common.Provision.UpdatePackage : object {
    protected IMetadataProvisioningHelper m_metadata;
    protected XmlDocument m_doc;
    protected Hashtable m_constMap;
    private string m_globalGuid;
    private string m_instanceGuid;
    private MetaIDFactory m_metaIdFactory;
    private bool m_fillRulesWithNegativeProjectIds;
    public XmlDocument Xml { get; }
    internal string GlobalGuid { get; }
    internal string InstanceGuid { get; }
    public UpdatePackage(IMetadataProvisioningHelper metadata, MetaIDFactory metaIdFactory, bool fillRulesWithNegativeProjectIds);
    public UpdatePackage(UpdatePackageData updatePackageData);
    public MetaID InsertConstant(string constant, MetaID listID);
    internal MetaID InsertConstant(string projectGuid, string constant, MetaID listID);
    private MetaID InsertConstantInternal(string constant, bool lookupFlag);
    public void SetListMember(MetaID listID, MetaID constID);
    public void InsertComment(string formatString, Object[] args);
    public MetaID InsertWorkItemTypeCategory(int projectId, string refName, string name, int defaultTypeId);
    public void DestroyWorkItemTypeCategory(int catId);
    public void DeleteWorkItemTypeCategoryMember(int catMemberId);
    public void InsertWorkItemTypeCategoryMember(MetaID catId, int typeId);
    public void UpdateWorkItemTypeCategory(int catId, Hashtable props);
    public void UpdateFieldUsage(int usageId, Hashtable props);
    private bool IsUserName(string name);
    internal MetaID FindGroup(string projectGuid, string constant);
    internal MetaID FindUserGroup(string projectGuid, string constant);
    private MetaID FindIdentity(string projectGuid, string name, bool groupsOnlyFlag);
    private MetaID InsertIdentity(string name);
    public void InsertField(MetaID id, string name, string refName, int type, int report, int formula, string reportingName, string reportingRefName);
    public void UpdateField(int fieldId, Dictionary`2<string, object> props);
    public void InsertFieldUsage(MetaID fieldID);
    public void InsertWorkItemTypeUsage(MetaID typeId, MetaID fieldId);
    public MetaID InsertRule(int projectId, UpdatePackageRuleProperties props);
    public MetaID InsertForm(int projectId, MetaID typeConstID, string form);
    public MetaID InsertTreeProperty(int projectId, string name, string val);
    public MetaID InsertAction(MetaID typeID, MetaID fromID, MetaID toID, string action);
    public static void SetListRuleProperties(ListRuleType ruleType, MetaID listID, Hashtable props);
    public MetaID InsertWorkItemType(int projectID, MetaID typeConstID, MetaID descrID);
    public XmlDocument get_Xml();
    internal string get_GlobalGuid();
    internal string get_InstanceGuid();
}
[EditorBrowsableAttribute("1")]
public class Microsoft.TeamFoundation.WorkItemTracking.Common.Provision.UpdatePackageCondition : object {
    private UpdatePackageData m_sharedData;
    private MetaID m_fieldId;
    private MetaID m_fromId;
    private MetaID m_toId;
    private bool m_invertedFlag;
    private Dictionary`2<MetaID, List`1<UpdatePackageRule>> m_fieldRules;
    private ConditionType m_type;
    public ConditionType ConditionType { get; }
    public Dictionary`2<MetaID, List`1<UpdatePackageRule>> FieldRules { get; }
    public UpdatePackageCondition(UpdatePackageData sharedData, XmlElement conditionElement, UpdatePackageFieldCollection fields, UpdatePackage batch);
    public UpdatePackageCondition(UpdatePackageData sharedData, MetaID fieldId, MetaID valueId);
    public UpdatePackageCondition(MetaID fieldId, MetaID fromId, MetaID toId);
    public void SetProperties(int depth, UpdatePackageRuleProperties props);
    public ConditionType get_ConditionType();
    public void MakeTransparent();
    public Dictionary`2<MetaID, List`1<UpdatePackageRule>> get_FieldRules();
}
[EditorBrowsableAttribute("1")]
public class Microsoft.TeamFoundation.WorkItemTracking.Common.Provision.UpdatePackageData : object {
    private IMetadataProvisioningHelper m_metadata;
    private int m_projectId;
    private string m_projectGuid;
    private GlobalListsCollection m_globalLists;
    private string m_methodologyName;
    private MetaIDFactory m_metaIdFactory;
    public MetaID CurrentTypeId;
    public IMetadataProvisioningHelper Metadata { get; }
    public int ProjectId { get; }
    public GlobalListsCollection GlobalLists { get; }
    public string ProjectGuid { get; }
    public string MethodologyName { get; }
    public MetaIDFactory MetaIDFactory { get; }
    public UpdatePackageData(IMetadataProvisioningHelper metadata, MetaIDFactory metaIdFactory, int projectId, string methodologyName);
    public static string GetNormalizedMethodologyName(string name);
    public IMetadataProvisioningHelper get_Metadata();
    public int get_ProjectId();
    public GlobalListsCollection get_GlobalLists();
    public string get_ProjectGuid();
    public string get_MethodologyName();
    public MetaIDFactory get_MetaIDFactory();
}
[EditorBrowsableAttribute("1")]
public class Microsoft.TeamFoundation.WorkItemTracking.Common.Provision.UpdatePackageField : object {
    private UpdatePackageData m_updatePackageData;
    private string m_name;
    private string m_refName;
    private PsFieldDefinitionTypeEnum m_type;
    private string m_typeStr;
    private MetaID m_ID;
    private XmlElement m_fieldElement;
    private UpdatePackageFieldCollection m_fields;
    private Nullable`1<int> m_fieldId;
    private bool m_reportingSpecified;
    private bool m_reportable;
    private int m_report;
    private int m_formula;
    private string m_reportingName;
    private string m_reportingRefName;
    private UpdatePackageFlagManager m_flagManager;
    private FieldUpdateType m_updateType;
    private bool m_isAdded;
    private bool IsReportingChanged { get; }
    public string Name { get; public set; }
    public string ReferenceName { get; }
    public string ReportingName { get; }
    public string ReportingReferenceName { get; }
    public MetaID ID { get; }
    public bool AcceptRules { get; }
    public bool IsInternal { get; }
    internal int FieldType { get; }
    internal string StringFieldType { get; }
    internal UpdatePackageFlagManager FlagManager { get; }
    public UpdatePackageField(UpdatePackageData sharedData, UpdatePackageFieldCollection fields, XmlElement fieldElement);
    public UpdatePackageField(UpdatePackageData sharedData, UpdatePackageFieldCollection fields, int fieldId);
    public void AddToUpdatePackage(UpdatePackageRuleContext context, bool addDefinitionFlag, UpdatePackage batch);
    private bool get_IsReportingChanged();
    public void AddRulesToUpdatePackage(UpdatePackageRuleContext context, XmlNode parentNode, RuleFlags flags, UpdatePackage batch);
    public string get_Name();
    public void set_Name(string value);
    public string get_ReferenceName();
    public string get_ReportingName();
    public string get_ReportingReferenceName();
    public MetaID get_ID();
    public bool get_AcceptRules();
    public bool get_IsInternal();
    public static PsFieldDefinitionTypeEnum StringToFieldType(string stringType);
    internal static bool IsInternalFieldType(PsFieldDefinitionTypeEnum psFieldType);
    internal static bool IsInternalField(int fieldId, IMetadataProvisioningHelper provisioning);
    internal static string FieldTypeToString(PsFieldDefinitionTypeEnum fieldType);
    private void AddHelpText(UpdatePackageRuleContext context, string helpText, UpdatePackage batch);
    private void AddRule(UpdatePackageRuleContext context, UpdatePackageRule importerRule, RuleFlags flags, UpdatePackage batch);
    private void SetNotSameAsRule(XmlElement rule, Hashtable props);
    private void SetCopyDefaultRule(XmlElement rule, UpdatePackageRuleContext context, UpdatePackageRuleProperties props, UpdatePackage batch);
    private string GetRequiredAttribute(XmlElement element, string attribute);
    private void SetValidUserRule(XmlElement ruleElement, Hashtable props, UpdatePackage batch);
    private void AddList(XmlElement rule, bool expandFlag, UpdatePackage batch, MetaID& listId, MetaID& badNamesListId);
    private static PsFieldDefinitionTypeEnum TranslatePicklistTypesIntoBasicTypes(PsFieldDefinitionTypeEnum psFieldType);
    private static int TranslateReportability(string value);
    private static int TranslateFormula(string value);
    internal void InitReportability(XmlElement fieldElement, Boolean& reportingSpecified, Int32& reportingType, Int32& reportingFormula, String& reportingName, String& reportingRefName);
    private static bool IsSupportedReportingFieldType(PsFieldDefinitionTypeEnum type);
    private UpdatePackageRuleProperties CreateRule(UpdatePackageRuleContext context, RuleFlags flags);
    private void CheckAppropriateFieldType(string ruleName, PsFieldDefinitionTypeEnum[] types);
    internal string NormalizeValue(string value);
    private void AddServerDefaultRule(UpdatePackageRuleContext context, XmlElement rule, RuleFlags flags, UpdatePackage batch);
    public void Update(XmlElement fieldElement);
    private void RaiseRenameSafeValidationWarning();
    internal static string CreateBackupName(string methodologyName, string fieldName);
    private void CheckDefinitionConsistency(XmlElement fieldElement);
    public void UpdateRules(XmlElement fieldElement);
    internal int get_FieldType();
    internal string get_StringFieldType();
    internal UpdatePackageFlagManager get_FlagManager();
    private void InsertRule(UpdatePackage batch, UpdatePackageRuleProperties props, string forGroup, string notGroup);
    private void AddMatchPattern(XmlElement matchElement, Dictionary`2<MatchKey, List`1<string>> matchLists);
    private void CreateMatchRules(UpdatePackageRuleContext context, Dictionary`2<MatchKey, List`1<string>> matchLists, RuleFlags flags, UpdatePackage batch);
    private void AddListRule(UpdatePackageRuleContext context, ListRuleType listType, XmlElement listElement, RuleFlags flags, UpdatePackage batch);
    private static void CheckTypeAvailability(IMetadataProvisioningHelper pro, PsFieldDefinitionTypeEnum type);
    private bool TypesAreEquivalent(PsFieldDefinitionTypeEnum type1, PsFieldDefinitionTypeEnum type2);
}
[DefaultMemberAttribute("Item")]
[EditorBrowsableAttribute("1")]
public class Microsoft.TeamFoundation.WorkItemTracking.Common.Provision.UpdatePackageFieldCollection : object {
    private UpdatePackageData m_updatePackageData;
    private Dictionary`2<string, UpdatePackageField> m_fieldsMap;
    private List`1<UpdatePackageField> m_fieldsList;
    private Dictionary`2<string, UpdatePackageField> m_newFields;
    private Dictionary`2<string, UpdatePackageField> m_refnameMap;
    private Dictionary`2<string, UpdatePackageField> m_nameMap;
    private List`1<UpdatePackageField> m_coreFields;
    private HashSet`1<int> m_coreFieldIds;
    private HashSet`1<string> m_linkTypesRefName;
    internal static int c_maxFieldsCount;
    private int m_remainingFieldsCount;
    public UpdatePackageField Item { get; }
    public UpdatePackageFieldCollection(UpdatePackageData sharedData);
    public void ProcessFieldDefinitions(UpdatePackageRuleContext context, XmlElement fieldsNode, UpdatePackage batch, bool provisionRules, bool provisionFields);
    internal void CheckFieldNameUniqueness(UpdatePackageField field, bool useStrictFieldNameCheck);
    private static void ValidateDuplicateReportingName(IMetadataProvisioningHelper pro, Dictionary`2<string, string> knownNames, string refname, string name);
    public UpdatePackageField get_Item(string name);
    public bool Contains(string fieldName);
    public void StateAddReferencesToUpdatePackage(UpdatePackageRuleContext context, MetaID stateId, XmlElement containerElement, UpdatePackage batch);
    public void TransitionAddReferencesToUpdatePackage(UpdatePackageRuleContext context, MetaID fromStateId, MetaID toStateId, XmlElement containerElement, UpdatePackage batch);
    public void ReasonAddReferencesToUpdatePackage(UpdatePackageRuleContext context, MetaID fromStateId, MetaID toStateId, XmlElement containerElement, UpdatePackage batch);
    private void AddReferencesToUpdatePackage(UpdatePackageRuleContext context, FlagHelper flagHelper, XmlElement container, UpdatePackage batch);
    private void AddToUpdatePackage(UpdatePackageRuleContext context, UpdatePackage batch, bool provisionRules, bool provisionFields);
    public bool IsCoreField(int fieldId);
    public static string GetReportingFieldName(string refName);
    public UpdatePackageField GetField(string refName);
}
internal class Microsoft.TeamFoundation.WorkItemTracking.Common.Provision.UpdatePackageFlagManager : object {
    private RuleFlags m_baseFlags;
    private Dictionary`2<MetaID, RuleFlags> m_stateFlags;
    private Dictionary`2<TransitionKey, RuleFlags> m_transitionFlags;
    public RuleFlags BaseFlags { get; }
    public UpdatePackageFlagManager(XmlElement containerElement);
    public RuleFlags StateGetFlags(MetaID stateId, XmlElement containerElement);
    public RuleFlags TransitionGetFlags(MetaID fromStateId, MetaID toStateId, XmlElement containerElement);
    public RuleFlags ReasonGetFlags(MetaID fromStateId, MetaID toStateId, XmlElement containerElement);
    internal static RuleFlags ExtractFlags(XmlElement containerElement);
    private RuleFlags InternalTransitionGetFlags(TransitionKey key);
    public RuleFlags get_BaseFlags();
}
[EditorBrowsableAttribute("1")]
public class Microsoft.TeamFoundation.WorkItemTracking.Common.Provision.UpdatePackageRule : object {
    private UpdatePackageData m_updatePackageData;
    private string m_name;
    private string m_for;
    private RuleTypeEnum m_type;
    private XmlElement m_ruleElement;
    internal string Name { get; }
    internal RuleTypeEnum RuleType { get; }
    internal XmlElement RuleElement { get; }
    internal bool ChangesValue { get; }
    internal bool LocksValue { get; }
    public UpdatePackageRule(UpdatePackageData sharedData, XmlElement ruleElement);
    internal string get_Name();
    internal RuleTypeEnum get_RuleType();
    internal XmlElement get_RuleElement();
    internal static bool AreRulesConsistent(StringComparer comparer, UpdatePackageRule rule1, UpdatePackageRule rule2);
    internal void CheckValidity(UpdatePackageField field);
    private bool IsValidForFieldType(int fieldType);
    private bool IsValidForField(UpdatePackageField field);
    internal bool get_ChangesValue();
    internal bool get_LocksValue();
}
[EditorBrowsableAttribute("1")]
public class Microsoft.TeamFoundation.WorkItemTracking.Common.Provision.UpdatePackageRuleContext : object {
    private IMetadataProvisioningHelper m_metadata;
    private List`1<UpdatePackageCondition> m_items;
    private int m_contextDepth;
    public int Count { get; }
    public UpdatePackageRuleContext(IMetadataProvisioningHelper metadata);
    public void Push(UpdatePackageCondition condition);
    public UpdatePackageCondition Pop();
    public void SetProperties(UpdatePackageRuleProperties props);
    public void AddDefaultConditionToEmptySlot(MetaID fieldId, UpdatePackageRuleProperties props);
    public int get_Count();
    public void AddRule(UpdatePackageField field, UpdatePackageRule rule);
}
[EditorBrowsableAttribute("1")]
public class Microsoft.TeamFoundation.WorkItemTracking.Common.Provision.UpdatePackageRuleProperties : Hashtable {
    public void SetProperties(XmlElement elt);
}
internal class Microsoft.TeamFoundation.WorkItemTracking.Common.Provision.UpdatePackageTransition : object {
    private MetaID m_fromId;
    private MetaID m_toId;
    private MetaID m_forId;
    private MetaID m_notId;
    public UpdatePackageTransition(MetaID fromId, MetaID toId, MetaID forId, MetaID notId);
    public virtual bool Equals(object o);
    public virtual int GetHashCode();
}
[EditorBrowsableAttribute("1")]
[GenerateAllConstantsAttribute("")]
public static class Microsoft.TeamFoundation.WorkItemTracking.Common.Provision.WellKnownControlNames : object {
    public static string HtmlControl;
    public static string PlainTextControl;
    public static string FreshnessIndicatorControl;
    public static string FieldControl;
    public static string DateControl;
    public static string ClassificationControl;
    public static string WorkItemLogControl;
    public static string WorkItemHistoryControl;
    public static string WorkItemStateGraphControl;
    public static string LinksControl;
    public static string AttachmentsControl;
    public static string WebpageControl;
    public static string LabelControl;
    public static string TagFieldControl;
    public static string TestStepsControl;
    public static string AssociatedAutomationControl;
    public static string StageControl;
    public static string StageBuildControl;
    public static string ReleaseBuildControl;
    public static string AcceptanceCriteriaControl;
    public static string DevelopmentControl;
    public static string WorkItemDiscussionControl;
    public static string ParameterSetControl;
    public static string DeploymentsControl;
    private static WellKnownControlNames();
}
[EditorBrowsableAttribute("1")]
public class Microsoft.TeamFoundation.WorkItemTracking.Common.Provision.WITImporter : object {
    public string MethodologyName;
    private IMetadataProvisioningHelper m_metadata;
    private UpdatePackageData m_updatePackageData;
    private MetaID m_currentTypeNameID;
    private int m_projectId;
    private string m_processName;
    private bool m_provisionRules;
    private bool m_provisionFields;
    private bool m_provisionActions;
    private bool m_provisionWorkItemTypes;
    private UpdatePackageFieldCollection m_fieldDefinitions;
    private Dictionary`2<MetaID, UpdatePackageCondition> m_stateConditions;
    private Dictionary`2<MetaID, Dictionary`2<string, string>> m_actionsMap;
    private List`1<WorkItemTypeDefinition> m_workItemTypes;
    private List`1<XmlElement> m_globalLists;
    private WorkItemTypeDefinition m_currentWitd;
    private MetaID m_validWorkItemTypes;
    public int ProjectId { get; public set; }
    public IEnumerable`1<WorkItemTypeDefinition> WorkItemTypes { get; }
    public bool ProvisionRules { get; }
    public WITImporter(IMetadataProvisioningHelper metadata, int projectId, string methodologyName, string processName, bool isProvisionRulesEnabled, bool isProvisionFieldsEnabled, bool isProvisionActions, bool isProvisionWorkItemTypes);
    public int get_ProjectId();
    public void set_ProjectId(int value);
    public IEnumerable`1<WorkItemTypeDefinition> get_WorkItemTypes();
    public bool get_ProvisionRules();
    public void AddWorkItemTypeDefinition(XmlElement typeElement);
    public void AddGlobalLists(XmlElement listsElement);
    public XmlDocument Translate();
    private void ProcessGlobalLists(UpdatePackage batch);
    private void ProcessForm(UpdatePackage batch);
    private void ProcessFieldNames();
    private void ProcessLegacyFormLayout();
    private void ThrowValidationException(string resourceName, String[] args);
    private void ThrowValidationWarning(string resourceName, String[] args);
    private void ProcessWebLayout();
    private void ProcessLinksControls();
    private void ValidateLinksControlWorkItemTypeFilters(XmlNode node);
    private void ValidateLinksControlFilters(XmlNode node, bool external, Boolean& isExcludeAll);
    private void ValidateLinkColumns(XmlNode node);
    private void ProcessLabelControls();
    private void ProcessWebpageControlElements();
    private void ProcessLinkElements();
    private bool IsValidUrlPathMacro(string macro);
    private bool IsValidUrlRootMacro(string macro);
    private void ValidateUrlRoot(string url, bool isParentWebBrowser, string errorXml);
    private bool IsParentWebBrowser(XmlElement linkElement);
    private void ProcessWorkItemType(UpdatePackage batch);
    private void ProcessWorkflow(UpdatePackageRuleContext context, UpdatePackage batch);
    private void ProcessStatesRules(UpdatePackageRuleContext context, UpdatePackage batch, Hashtable& states);
    private void ProcessTransitions(Hashtable states, UpdatePackageRuleContext context, UpdatePackage batch, MetaID& defaultStateID);
    private void ProcessDefaultState(MetaID defaultStateID, UpdatePackageRuleContext context, UpdatePackage batch);
    private void ProcessActions(XmlElement actionsElement, string transitionFrom, MetaID fromID, MetaID toID, UpdatePackage batch);
    private void ProcessReasons(MetaID fromStateId, MetaID toStateId, XmlElement transitionElement, UpdatePackageRuleContext context, UpdatePackage batch);
    private void RestrictTransition(MetaID fromId, MetaID toId, MetaID personId, bool inverseFlag, UpdatePackage batch);
    private static string GetTrimmedAttribute(XmlElement element, string attribute);
    [CompilerGeneratedAttribute]
private void <ProcessWebLayout>b__18_0(string fieldName);
    [CompilerGeneratedAttribute]
private void <ProcessWebLayout>b__18_1(string controlType);
    [CompilerGeneratedAttribute]
private void <ProcessWebLayout>b__18_2();
    [CompilerGeneratedAttribute]
private void <ProcessWebLayout>b__18_3(string controlType);
    [CompilerGeneratedAttribute]
private void <ProcessWebLayout>b__18_9(string controlType);
    [CompilerGeneratedAttribute]
private void <ProcessWebLayout>b__18_10(string fieldName);
    [CompilerGeneratedAttribute]
private void <ProcessWebLayout>b__18_11(string controlName);
    [CompilerGeneratedAttribute]
private void <ProcessWebLayout>b__18_12(string fieldNames);
    [CompilerGeneratedAttribute]
private void <ProcessWebLayout>b__18_13(string fieldName);
    [CompilerGeneratedAttribute]
private void <ProcessWebLayout>b__18_14(string fieldNames);
    [CompilerGeneratedAttribute]
private bool <ProcessWebLayout>b__18_4(string fieldReferenceName, String[] fieldTypes);
    [CompilerGeneratedAttribute]
private void <ProcessWebLayout>b__18_5(string pageLabel);
    [CompilerGeneratedAttribute]
private void <ProcessWebLayout>b__18_6(string groupLabel);
    [CompilerGeneratedAttribute]
private void <ProcessWebLayout>b__18_7(string groupLabel);
    [CompilerGeneratedAttribute]
private void <ProcessWebLayout>b__18_8(string fieldRefName, string groupLabel);
}
[EditorBrowsableAttribute("1")]
public class Microsoft.TeamFoundation.WorkItemTracking.Common.Provision.WorkItemLinkTypeImporter : object {
    private IMetadataProvisioningHelper m_metadata;
    private Dictionary`2<string, WorkItemLinkTypeEntry> m_processedWorkLinkTypes;
    private static string c_linkTypeElementName;
    private static string c_topologyAttribute;
    public WorkItemLinkTypeImporter(IMetadataProvisioningHelper metadata);
    public XmlDocument Translate(XmlElement workItemLinkTypeDefinition, bool insertsOnly);
    private XmlElement TranslateLinkType(XmlElement listElement, XmlDocument doc, bool isUpdate);
    private string HandleReverseName(XmlElement listElement, string refName, string forwardName, int topology, XmlElement xout);
    private int HandleTopology(XmlElement listElement, string refName, XmlElement xout);
    private int TranslateTopology(string topology);
    private string HandleForwardName(XmlElement listElement, string refName, XmlElement xout);
    private void CheckFriendlyName(string refName, string name);
    private void CheckRefName(string refName);
}
[EditorBrowsableAttribute("1")]
public class Microsoft.TeamFoundation.WorkItemTracking.Common.Provision.WorkItemTypeDefinition : object {
    [CompilerGeneratedAttribute]
private string <TypeName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TypeRefName>k__BackingField;
    [CompilerGeneratedAttribute]
private XmlElement <Description>k__BackingField;
    [CompilerGeneratedAttribute]
private XmlElement <FieldDefinitions>k__BackingField;
    [CompilerGeneratedAttribute]
private XmlElement <Workflow>k__BackingField;
    [CompilerGeneratedAttribute]
private XmlElement <Form>k__BackingField;
    public string TypeName { get; public set; }
    public string TypeRefName { get; public set; }
    public XmlElement Description { get; public set; }
    public XmlElement FieldDefinitions { get; public set; }
    public XmlElement Workflow { get; public set; }
    public XmlElement Form { get; public set; }
    [CompilerGeneratedAttribute]
public string get_TypeName();
    [CompilerGeneratedAttribute]
public void set_TypeName(string value);
    [CompilerGeneratedAttribute]
public string get_TypeRefName();
    [CompilerGeneratedAttribute]
public void set_TypeRefName(string value);
    [CompilerGeneratedAttribute]
public XmlElement get_Description();
    [CompilerGeneratedAttribute]
public void set_Description(XmlElement value);
    [CompilerGeneratedAttribute]
public XmlElement get_FieldDefinitions();
    [CompilerGeneratedAttribute]
public void set_FieldDefinitions(XmlElement value);
    [CompilerGeneratedAttribute]
public XmlElement get_Workflow();
    [CompilerGeneratedAttribute]
public void set_Workflow(XmlElement value);
    [CompilerGeneratedAttribute]
public XmlElement get_Form();
    [CompilerGeneratedAttribute]
public void set_Form(XmlElement value);
}
[EditorBrowsableAttribute("1")]
public class Microsoft.TeamFoundation.WorkItemTracking.Common.PsConstantSetMetadataRecord : ValueType {
    public int lRecordId;
    public int lConstantId;
    public int lInConstantId;
    public long ullCachestamp;
    public byte fDeleted;
}
[EditorBrowsableAttribute("1")]
public enum Microsoft.TeamFoundation.WorkItemTracking.Common.QueryItemExceptionType : Enum {
    public int value__;
    public static QueryItemExceptionType Other;
    public static QueryItemExceptionType DeniedOrNotExist;
    public static QueryItemExceptionType ParentDoesNotExist;
    public static QueryItemExceptionType ParentIsNotAFolder;
    public static QueryItemExceptionType NameConflictsWithExistingItem;
    public static QueryItemExceptionType CircularReference;
    public static QueryItemExceptionType TypeMismatch;
    public static QueryItemExceptionType ItemAlreadyExists;
    public static QueryItemExceptionType CannotMoveRootFolder;
    public static QueryItemExceptionType CannotDeleteRootFolder;
    public static QueryItemExceptionType AccessException;
    public static QueryItemExceptionType CannotDenyAdmin;
    public static QueryItemExceptionType InvalidPermissionCombination;
}
[FlagsAttribute]
[EditorBrowsableAttribute("1")]
public enum Microsoft.TeamFoundation.WorkItemTracking.Common.QueryItemPermissionsInternal : Enum {
    public int value__;
    public static QueryItemPermissionsInternal None;
    public static QueryItemPermissionsInternal Read;
    public static QueryItemPermissionsInternal Contribute;
    public static QueryItemPermissionsInternal Delete;
    public static QueryItemPermissionsInternal ManagePermissions;
    public static QueryItemPermissionsInternal FullControl;
    public static QueryItemPermissionsInternal ReadContribute;
    public static QueryItemPermissionsInternal ReadContributeDelete;
    public static QueryItemPermissionsInternal ReadManage;
    public static QueryItemPermissionsInternal AllPermissions;
    public static QueryItemPermissionsInternal CrossProjectExecution;
    public static QueryItemPermissionsInternal RecordQueryExecutionInfo;
}
[EditorBrowsableAttribute("1")]
public class Microsoft.TeamFoundation.WorkItemTracking.Common.QueryItemSecurityConstants : ValueType {
    public static string NamespaceName;
    public static Guid NamespaceGuid;
    public static char PathSeparator;
    public static string RootFolder;
    private static QueryItemSecurityConstants();
}
[EditorBrowsableAttribute("1")]
public class Microsoft.TeamFoundation.WorkItemTracking.Common.QueryItemSecurityObjectClassIds : ValueType {
    public static string StoredQuery;
    public static string StoredQueryFolder;
}
[EditorBrowsableAttribute("1")]
public class Microsoft.TeamFoundation.WorkItemTracking.Common.QueryPackageNames : ValueType {
    public static string QueryAsOf;
    public static string QueryEver;
    public static string GroupOperator;
    public static string OperatorAnd;
    public static string OperatorOr;
    public static string OperatorAndNot;
    public static string OperatorOrNot;
    public static string Expression;
    public static string Group;
    public static string Operator;
    public static string FieldType;
    public static string ValueTypeString;
    public static string ValueTypeNumber;
    public static string ValueTypeDouble;
    public static string ValueTypeDateTime;
    public static string ValueTypeBoolean;
    public static string ValueTypeGuid;
    public static string ValueTypeColumn;
    public static string ExpandConstant;
    public static string ExpressionOperatorEquals;
    public static string ExpressionOperatorNotEquals;
    public static string ExpressionOperatorLess;
    public static string ExpressionOperatorLessEquals;
    public static string ExpressionOperatorGreater;
    public static string ExpressionOperatorGreaterEquals;
    public static string ExpressionOperatorEver;
    public static string ExpressionOperatorContains;
    public static string ExpressionOperatorNotContains;
    public static string ExpressionOperatorContainsWords;
    public static string ExpressionOperatorNotContainsWords;
    public static string ExpressionOperatorUnder;
    public static string ExpressionOperatorNotUnder;
    public static string ExpressionOperatorEverContains;
    public static string ExpressionOperatorNeverContains;
    public static string ExpressionOperatorEverContainsWords;
    public static string ExpressionOperatorNeverContainsWords;
    public static string ExpressionOperatorFTContains;
    public static string ExpressionOperatorNotFTContains;
    public static string ExpressionOperatorEverFTContains;
    public static string ExpressionOperatorNeverFTContains;
    public static string QueryLinksElement;
    public static string QueryLinksLeftQueryElement;
    public static string QueryLinksLeftQueryPrefix;
    public static string QueryLinksLinkQueryElement;
    public static string QueryLinksLinkQueryPrefix;
    public static string QueryLinksLinkTypeQueryPrefix;
    public static string QueryLinksRightQueryElement;
    public static string QueryLinksRightQueryPrefix;
    public static string QueryLinksRecursiveAttribute;
    public static string QueryLinksReturnMatchingParentsAttribute;
    public static string QueryLinksTypeAttribute;
    public static string QueryLinksMustContainType;
    public static string QueryLinksMayContainType;
    public static string QueryLinksDoesNotContainType;
    public static int FieldsTypeMaskDataType;
    public static int FieldTypeMaskFlagsAndDataType;
    public static int FieldsTypeMaskSubType;
    public static int FieldsTypeMaskReadOnly;
    public static int FieldsTypeMaskIgnore;
    public static int FieldsTypeMaskPerson;
    public static int FieldsTypeKeyword;
    public static int FieldsTypeInteger;
    public static int FieldsTypeDateTime;
    public static int FieldsTypeDouble;
    public static int FieldsTypeLongText;
    public static int FieldsTypeFiles;
    public static int FieldsTypeTreeNode;
    public static int FieldsTypeBit;
    public static int FieldsTypeGuid;
    public static int TypeTreePath;
    public static int TypeHistory;
    public static int TypeHtml;
    public static int TypeAttachment;
    public static int TypeUrl;
    public static int TypeBisUri;
    public static int TypeUnc;
    public static int TypeRelatedLinks;
    public static int TypeTreeNodeName;
    public static int TypeTreeNodeType;
    public static int TypePerson;
    public static int FieldsTypeTreeId;
    public static int SubTypePickList;
    public static int ExpandConstantFlag;
    public static int UseFieldTypeFlag;
}
[EditorBrowsableAttribute("1")]
public class Microsoft.TeamFoundation.WorkItemTracking.Common.RecursionLevelInternal : object {
    public static int OneLevel;
    public static int Full;
}
[EditorBrowsableAttribute("1")]
public class Microsoft.TeamFoundation.WorkItemTracking.Common.RegisteredLinks : ValueType {
    public static string Related;
    public static string Hyperlink;
    public static string Changeset;
    public static string SourceCode;
    public static string TestResult;
    public static string Storyboard;
    public static string GitHubCommit;
    public static string GitHubPullRequest;
    public static string GitHubIssue;
    public static string GitHubBranch;
}
[EditorBrowsableAttribute("1")]
public class Microsoft.TeamFoundation.WorkItemTracking.Common.RemoteLinkTypeReferenceNames : ValueType {
    public static string RemoteRelated;
    public static string RemoteDependency;
}
[EditorBrowsableAttribute("1")]
public enum Microsoft.TeamFoundation.WorkItemTracking.Common.RemoteStatus : Enum {
    public byte value__;
    public static RemoteStatus PendingAdd;
    public static RemoteStatus Success;
    public static RemoteStatus Failed;
    public static RemoteStatus PendingUpdate;
    public static RemoteStatus PendingDelete;
}
[EditorBrowsableAttribute("1")]
public class Microsoft.TeamFoundation.WorkItemTracking.Common.ReportingFormulaNames : ValueType {
    public static string None;
    public static string Sum;
    public static string Count;
    public static string DistinctCount;
    public static string Average;
    public static string Minimum;
    public static string Maximum;
}
[EditorBrowsableAttribute("1")]
public class Microsoft.TeamFoundation.WorkItemTracking.Common.ReportingFormulas : ValueType {
    public static int None;
    public static int Sum;
    public static int Count;
    public static int DistinctCount;
    public static int Average;
    public static int Minimum;
    public static int Maximum;
}
[EditorBrowsableAttribute("1")]
public class Microsoft.TeamFoundation.WorkItemTracking.Common.ReportingTypes : ValueType {
    public static int None;
    public static int Measure;
    public static int Dimension;
    public static int DrillDownField;
}
[EditorBrowsableAttribute("1")]
public interface Microsoft.TeamFoundation.WorkItemTracking.Common.Search.ISearchCriteriaRecorder {
    public abstract virtual void RecordCriterion(string fieldName, string operation, string value);
}
[EditorBrowsableAttribute("1")]
[CLSCompliantAttribute("False")]
public interface Microsoft.TeamFoundation.WorkItemTracking.Common.Search.ISearchTokenHelper {
    public abstract virtual Object[] GetTokens();
    public abstract virtual bool IsFilterToken(object token);
    public abstract virtual string GetOriginalTokenText(object token);
    public abstract virtual string GetParsedTokenText(object token);
    public abstract virtual UInt32 GetTokenStartPosition(object token);
    public abstract virtual UInt32 GetParseError(object token);
    public abstract virtual string GetFilterField(object token);
    public abstract virtual string GetFilterValue(object token);
    public abstract virtual UInt32 GetFilterSeperatorPosition(object token);
    public abstract virtual UInt32 GetFilterTokenType(object token);
}
[EditorBrowsableAttribute("1")]
public class Microsoft.TeamFoundation.WorkItemTracking.Common.Search.SearchConstants : object {
    public static string InvariantKeywordContains;
    public static string InvariantKeywordContainsWords;
    public static string InvariantKeywordNotContains;
    public static string InvariantKeywordNotContainsWords;
}
[EditorBrowsableAttribute("1")]
public enum Microsoft.TeamFoundation.WorkItemTracking.Common.Search.SearchFilterTokenType : Enum {
    public int value__;
    public static SearchFilterTokenType SFTT_DEFAULT;
    public static SearchFilterTokenType SFTT_EXCLUDE;
    public static SearchFilterTokenType SFTT_EXACTMATCH;
}
[EditorBrowsableAttribute("1")]
public enum Microsoft.TeamFoundation.WorkItemTracking.Common.Search.SearchParseError : Enum {
    public int value__;
    public static SearchParseError SPE_NONE;
    public static SearchParseError SPE_UNMATCHEDQUOTES;
    public static SearchParseError SPE_INVALIDESCAPE;
    public static SearchParseError SPE_EMPTYFILTERFIELD;
    public static SearchParseError SPE_EMPTYFILTERVALUE;
}
[EditorBrowsableAttribute("1")]
public class Microsoft.TeamFoundation.WorkItemTracking.Common.Search.SearchWiqlBuilder : object {
    private static string cInvariantDateFormat;
    private ISearchCriteriaRecorder m_criteriaHelper;
    private ISearchTokenHelper m_tokenHelper;
    private IWiqlAdapterHelper m_wiqlHelper;
    private string m_projectName;
    [CLSCompliantAttribute("False")]
public SearchWiqlBuilder(IWiqlAdapterHelper wiqlHelper, ISearchTokenHelper tokenHelper, string projectName, ISearchCriteriaRecorder criteriaHelper);
    public string BuildWiql(string orderWiql, string previewFieldsWiql, bool excludeCodeReviewResponse, bool includeTags, bool skipReproStepsFieldForSearch);
    private string BuildSelect(string previewFieldsWiql, bool includeTags);
    private string BuildWhere(bool excludeCodeReviewResponse, bool skipReproStepsFieldForSearch);
    private string BuildOrder(string orderWiql);
    private void AppendFilterCondition(object filterToken, StringBuilder wiql);
    private string GetOperator(object field, SearchFilterTokenType filterOp);
    private string GetInvariantMacro(string localizedValue);
    private string GetInvariantFieldValue(object field, string localValue);
    private string GetFieldReferenceName(string name);
    private void AppendBasicCondition(object token, StringBuilder wiql, bool skipReproStepsFieldForSearch);
    private bool IsQuoted(string text);
    private string GetKeywordSearchHelpText(bool exclude, object titleField, object descriptionField, object reproStepsField);
    private string GetContainsClause(object field, string value, bool exclude, bool useTextSearchIfAvailable);
    private string EvaluateInvariantMacro(object field, string invariantMacro);
}
[EditorBrowsableAttribute("1")]
public class Microsoft.TeamFoundation.WorkItemTracking.Common.ServerDefaultFieldValue : object {
    private ServerDefaultType m_type;
    public ServerDefaultType Type { get; }
    public ServerDefaultFieldValue(ServerDefaultType t);
    public ServerDefaultType get_Type();
    public virtual bool Equals(object o);
    public virtual int GetHashCode();
}
[EditorBrowsableAttribute("1")]
public enum Microsoft.TeamFoundation.WorkItemTracking.Common.ServerDefaultType : Enum {
    public int value__;
    public static ServerDefaultType ServerDateTime;
    public static ServerDefaultType CallerIdentity;
    public static ServerDefaultType RandomGuid;
}
[EditorBrowsableAttribute("1")]
public class Microsoft.TeamFoundation.WorkItemTracking.Common.ServiceIdentifiers : ValueType {
    public static Guid WorkItem;
    public static Guid WorkItem2;
    public static Guid WorkItem3;
    public static Guid WorkItem4;
    public static Guid WorkItem5;
    public static Guid WorkItem6;
    public static Guid WorkItem7;
    public static Guid WorkItem8;
    public static Guid WorkItemAttachmentHandler;
    public static Guid ConfigurationServerUrl;
    private static ServiceIdentifiers();
}
[EditorBrowsableAttribute("1")]
public class Microsoft.TeamFoundation.WorkItemTracking.Common.ServiceIdentifierStrings : ValueType {
    public static string WorkItem;
    public static string WorkItem2;
    public static string WorkItem3;
    public static string WorkItem4;
    public static string WorkItem5;
    public static string WorkItem6;
    public static string WorkItem7;
    public static string WorkItem8;
    public static string WorkItemAttachmentHandler;
    public static string ConfigurationServerUrl;
}
[EditorBrowsableAttribute("1")]
public class Microsoft.TeamFoundation.WorkItemTracking.Common.SharedVariables : ValueType {
    public static string GlobalListsSetName;
    public static int ConstValidUser;
    public static int ConstEmptyValue;
    public static int ConstSameAsOldValue;
    public static int ConstCurrentUser;
    public static int ConstWasEmptyValue;
    public static int ConstOldValueInOtherField;
    public static int ConstServerDateTime;
    public static int ConstUtcDateTime;
    public static int ConstServerCurrentUser;
    public static int ConstLocalDateTime;
    public static int ConstValueInOtherField;
    public static int ConstWasEmptyOrSameAsOldValue;
    public static int ConstServerRandomGuid;
    public static int ConstBecameNonEmptyValue;
    public static int ConstRemainedNonEmptyValue;
    public static int FldIssue;
    public static int FldState;
    public static int FldReason;
    public static int FldWorkItemType;
    public static int FldForm;
    public static int FldAttachedFiles;
    public static int FldHiddenAttachedFiles;
    public static int FldWorkItemLink;
    public static int FldWorkItemTypeExtension;
    public static int FldTree;
    public static int IssueOpenNumberOfReturnedTables;
    public static int WorkitemXmlNumberOfReturnedTables;
    public static int FieldNameMaximum;
    public static int FieldReferenceNameMaximum;
    public static int ActionSizeMaximum;
    public static int TreePropertyNameMaxLength;
    public static int ConstantNameMaxLength;
    public static int DomainNameMaxLength;
    public static string FieldNameRegularExpression;
    public static string FieldReferenceNameRegularExpression;
    public static string WarehouseTableFields;
    public static string WarehouseTableTreeNodes;
    public static string WarehouseTableChangedRevisions;
    public static string WarehouseTablePreviousRevisions;
    public static string WarehouseTableWorkItemFiles;
    public static string WarehouseTableRelatedWorkItems;
    public static string WarehouseTablePeople;
    public static string WarehouseTableBatchConstIds;
    public static string WarehouseTableChangedDimensionRevisions;
    public static string WarehouseTableChangedFactRevisions;
    public static string WarehouseTableLargestChangedOrder;
    public static string WarehouseTableChangesetLinks;
    public static string WarehouseTableTestResultLinks;
    public static string WarehouseTableLinks;
    public static string WarehouseTableLargestLinkTimeStamp;
    public static string WarehouseTableLinkType;
    public static string WarehouseTableLargestLinkTypeCacheStamp;
    public static string WarehouseTableDestroyedWorkItems;
    public static string WarehouseTableDestroyedWorkItemStamp;
    public static string WarehouseTableRenamedWorkItemTypes;
    public static string WarehouseTableWorkItemTypeCategories;
    public static string WarehouseTableWorkItemTypeCategoryMembers;
    public static string BisRegBackendDatabaseName;
    public static int StringFieldLength;
    public static int AttachmentFileNameMaximum;
    public static int AttachmentCommentMaximum;
    public static int LinkStringMaxLength;
    public static int LinkStringMaxComment;
    public static int MaxNewAttachments;
    public static string FileId;
    public static string FileName;
    public static string QueryIdsElementRoot;
    public static string QueryIdsElementName;
    public static string QueryIdsAttributeStart;
    public static string QueryIdsAttributeEnd;
    public static string QueryIdsAttributeId;
    public static string QueryIdsAttributeRev;
    public static int MaxAttachmentSizeLimit;
    public static int NamespaceAdministratorRoleID;
    public static int SqlMinYear;
    public static int SqlMaxYear;
    public static int NewFieldIdBase;
    public static int DomainGroupsId;
    public static string SqlFutureDate;
    public static DateTime FutureDateTimeValue;
    public static string DateTimeToken;
    public static int DomainAccounts;
    public static int DomainUsers;
    public static int GlobalProjectId;
    public static int ValidationProjectId;
    public static int GlobalPartitionId;
    public static int TempIdOffset;
    public static string WorkItemTypeExtensionFieldPrefix;
    public static string WorkItemTypeExtensionMarkerFieldName;
    public static string WorkItemTypeExtensionMarkerFieldRefName;
    public static int DefaultLinksLimit;
    public static int DefaultRemoteLinksLimit;
    private static SharedVariables();
}
[EditorBrowsableAttribute("1")]
public class Microsoft.TeamFoundation.WorkItemTracking.Common.SoapExceptionDetailNames : ValueType {
    public static string Details;
    public static string Id;
    public static string MessageResource;
    public static string ResourceName;
    public static string Param;
    public static string ExceptionSubType;
    public static string SubType;
}
[EditorBrowsableAttribute("1")]
public class Microsoft.TeamFoundation.WorkItemTracking.Common.SpecialGuids : ValueType {
    public static string ProcessChangesLock;
    internal static Guid ProcessIdentitiesLock;
    internal static Guid GlobalListsSetConstant;
    public static Guid ServerDefaultGuidRuleConstant;
    public static Guid QueryItemChanged;
    public static Guid LinkTypeChanged;
    public static Guid FieldChanged;
    public static Guid TreeChanged;
    public static Guid WorkItemTypeChanged;
    public static Guid WorkItemTypeExtensionChanged;
    public static Guid WorkItemTypeExtensionDeleted;
    public static Guid WorkItemTypeExtensionReconciliationStatusChanged;
    public static Guid WorkItemTypeletChanged;
    public static Guid WorkItemTypeletDeleted;
    public static Guid WorkItemStateDefinitionModified;
    public static Guid WorkItemTypeBehaviorReferenceModified;
    public static Guid WorkItemTypeletFieldPropertiesChanged;
    public static Guid WorkItemArtifactKind;
    private static SpecialGuids();
}
[EditorBrowsableAttribute("1")]
public class Microsoft.TeamFoundation.WorkItemTracking.Common.SpecialGuidStrings : ValueType {
    public static string WorkItemArtifactKind;
}
[EditorBrowsableAttribute("1")]
public class Microsoft.TeamFoundation.WorkItemTracking.Common.StoredProcedureNames : ValueType {
    public static string ForceRollback;
    public static string GetForceRollbackErrorCode;
    public static string GetAdminData;
    public static string AddFieldValues;
    public static string UpdateTrendData;
    public static string AddTexts;
    public static string AddFiles;
    public static string UpdateFiles;
    public static string RemoveFiles;
    public static string FetchTfsFileIdByFilePath;
    public static string FetchTfsFileIdByExtId;
    public static string GetComputedColumns;
    public static string ProcessLinkChanges;
    public static string AddWorkItemLink;
    public static string UpdateWorkItemLink;
    public static string DeleteWorkItemLink;
    public static string AddWorkItemLinkType;
    public static string UpdateWorkItemLinkType;
    public static string DeleteWorkItemLinkType;
    public static string IssueOpen;
    public static string AuthorizeChanges;
    public static string AuthorizeFieldChanges;
    public static string AuthorizeRuleChanges;
    public static string AuthorizeWorkItemTypeChanges;
    public static string AuthorizeActionChanges;
    public static string ApplyChanges;
    public static string ApplyFieldChanges;
    public static string ApplyRuleChanges;
    public static string ApplyWorkItemTypeChanges;
    public static string ApplyActionChanges;
    public static string ChangeField;
    public static string DeleteField;
    public static string ChangeFieldUsage;
    public static string ChangeTreeProperty;
    public static string ChangeRuleSet;
    public static string ChangeRule;
    public static string SaveRules;
    public static string SaveConstantSets;
    public static string AddConstant;
    public static string AddConstants;
    public static string LookupIdentityConstants;
    public static string LookupRule;
    public static string RebuildCallersViews;
    public static string ExplodeSet;
    public static string ExplodeSetIDToSids;
    public static string WordsContains;
    public static string CreateIssuesTemplate;
    public static string CreateIssuesFromValuesTemplate;
    public static string UpdateIssuesTemplate;
    public static string UpdateIssuesFromValuesTemplate;
    public static string AddQueryItem;
    public static string UpdateQueryItem;
    public static string DeleteQueryItem;
    public static string AuthorizeQueryItemChanges;
    public static string GetStoredQueries;
    public static string GetStoredQueryItems;
    public static string GetStoredQuery;
    public static string GetQueryItemFromPath;
    public static string GetQueryItemAndChildren;
    public static string GetQueryItemSecurityInfo;
    public static string GetQueryItemSubtreeSecurityInfo;
    public static string ChangeWorkItemType;
    public static string ChangeWorkItemTypeUsage;
    public static string ChangeAction;
    public static string ProjectDelete;
    public static string BoxCarAdminDataChanges;
    public static string GetSequenceIds;
    public static string StampDb;
    public static string WorkitemServiceView;
    public static string ProcessIdentities;
    public static string DestroyWorkItems;
    public static string DestroyWorkItemType;
    public static string RenameWorkItemType;
    public static string DestroyGlobalList;
    public static string ChangeWorkItemTypeCategory;
    public static string CheckWorkItemTypeCategory;
    public static string DestroyWorkItemTypeCategory;
    public static string AddWorkItemTypeCategoryMember;
    public static string DeleteWorkItemTypeCategoryMember;
    public static string EventChanges;
    public static string SubTreeFromId;
    public static string GetProjectID;
    public static string IsNamespaceAdminOrProjectAdmin;
}
[EditorBrowsableAttribute("1")]
public class Microsoft.TeamFoundation.WorkItemTracking.Common.StringColumnMaxLength : object {
    public static int FieldName;
    public static int FieldReferenceName;
    public static int CssNodeId;
    public static int TreeName;
    public static int Sid;
    public static int ConstDisplayPart;
    public static int FilePath;
    public static int Domain;
    public static int AccountName;
    public static int FileName;
    public static int LinkComment;
    public static int ReportingFieldName;
    public static int ReportingFieldReferenceName;
}
[EditorBrowsableAttribute("1")]
public class Microsoft.TeamFoundation.WorkItemTracking.Common.StringMaxLengths : ValueType {
    public static int StoredQueryNameMax;
    public static int StoredQueryDescriptionMax;
}
[EditorBrowsableAttribute("1")]
public class Microsoft.TeamFoundation.WorkItemTracking.Common.StructureElementAttributes : ValueType {
    public static string Id;
    public static string Name;
    public static string ParentId;
    public static string StructureType;
    public static string IsStructureNode;
    public static string ProjectId;
    public static string Deleted;
    public static string ForwardingId;
}
[EditorBrowsableAttribute("1")]
public static class Microsoft.TeamFoundation.WorkItemTracking.Common.SurrogateNames : object {
    public static string Watermark;
    public static string AuthorizedDate;
}
[EditorBrowsableAttribute("1")]
public class Microsoft.TeamFoundation.WorkItemTracking.Common.SyncBis : ValueType {
}
internal class Microsoft.TeamFoundation.WorkItemTracking.Common.ToolType : ValueType {
    public static string Classification;
}
[EditorBrowsableAttribute("1")]
public class Microsoft.TeamFoundation.WorkItemTracking.Common.TrendDataValue : object {
    private static TrendDataValue s_increase;
    private static TrendDataValue s_decrease;
    public static TrendDataValue Increase { get; }
    public static TrendDataValue Decrease { get; }
    public static TrendDataValue get_Increase();
    public static TrendDataValue get_Decrease();
}
public class Microsoft.TeamFoundation.WorkItemTracking.Common.UnknownIdentity : object {
    [CompilerGeneratedAttribute]
private string <DisplayName>k__BackingField;
    [CompilerGeneratedAttribute]
private Guid <Guid>k__BackingField;
    public string DisplayName { get; public set; }
    public Guid Guid { get; public set; }
    [CompilerGeneratedAttribute]
public string get_DisplayName();
    [CompilerGeneratedAttribute]
public void set_DisplayName(string value);
    [CompilerGeneratedAttribute]
public Guid get_Guid();
    [CompilerGeneratedAttribute]
public void set_Guid(Guid value);
}
[EditorBrowsableAttribute("1")]
public class Microsoft.TeamFoundation.WorkItemTracking.Common.UpdatePackageNames : ValueType {
    public static string InsertIssue;
    public static string UpdateIssue;
    public static string DestroyIssue;
    public static string InsertField;
    public static string UpdateField;
    public static string DeleteField;
    public static string InsertFieldUsage;
    public static string UpdateFieldUsage;
    public static string InsertTree;
    public static string UpdateTree;
    public static string InsertTreeProperty;
    public static string UpdateTreeProperty;
    public static string InsertRule;
    public static string UpdateRule;
    public static string InsertConstant;
    public static string UpdateConstant;
    public static string InsertConstantSet;
    public static string UpdateConstantSet;
    public static string InsertQuery;
    public static string UpdateQuery;
    public static string DeleteQuery;
    public static string InsertQueryItem;
    public static string UpdateQueryItem;
    public static string DeleteQueryItem;
    public static string UnDeleteQueryItem;
    public static string SetQueryItemAccessControlList;
    public static string InsertWorkItemType;
    public static string UpdateWorkItemType;
    public static string DestroyWorkItemType;
    public static string RenameWorkItemType;
    public static string InsertWorkItemTypeUsage;
    public static string UpdateWorkItemTypeUsage;
    public static string InsertAction;
    public static string UpdateAction;
    public static string UpdateSequenceId;
    public static string FailedWorkitem;
    public static string FailedWorkitems;
    public static string InsertWorkItemLink;
    public static string UpdateWorkItemLink;
    public static string DeleteWorkItemLink;
    public static string InsertWorkItemLinkType;
    public static string UpdateWorkItemLinkType;
    public static string DeleteWorkItemLinkType;
    public static string InsertWorkItemTypeCategory;
    public static string UpdateWorkItemTypeCategory;
    public static string DestroyWorkItemTypeCategory;
    public static string InsertWorkItemTypeCategoryMember;
    public static string DeleteWorkItemTypeCategoryMember;
    public static string InsertText;
    public static string FieldName;
    public static string FieldDisplayName;
    public static string CreateRelation;
    public static string UpdateRelation;
    public static string RemoveRelation;
    public static string InsertFile;
    public static string RemoveFile;
    public static string FileName;
    public static string OriginalName;
    public static string FileId;
    public static string CreationDate;
    public static string LastWriteDate;
    public static string InsertResourceLink;
    public static string RemoveResourceLink;
    public static string UpdateResourceLink;
    public static string ResourceLocation;
    public static string ResourceLinkId;
    public static string ResourceLinkType;
    public static string ResourceDisplayName;
    public static string ResourceComment;
    public static string ResourceLinkFieldName;
    public static string AttachmentUrl;
    public static string ObjectTypeWorkItem;
    public static string ObjectTypeWorkItemId;
    public static string Package;
    public static string DisableNotifications;
    public static string Product;
    public static string TempId;
    public static string ProjectID;
    public static string Name;
    public static string ReferenceName;
    public static string Type;
    public static string FieldIdShortName;
    public static string TempFieldIdShortName;
    public static string ParentId;
    public static string TempParentId;
    public static string Deleted;
    public static string ObjectType;
    public static string Verbose;
    public static string VerboseAlways;
    public static string VerboseFailure;
    public static string IssueId;
    public static string Revision;
    public static string Bypass;
    public static string Columns;
    public static string Column;
    public static string ComputedColumns;
    public static string ComputedColumn;
    public static string ValueNode;
    public static string ServerDateTime;
    public static string ServerRandomGuid;
    public static string Comment;
    public static string CacheStamp;
    public static string AddedTags;
    public static string RemovedTags;
    public static string TagElement;
    public static string TagIdAttribute;
    public static string WorkItemTypeExtensions;
    public static string WorkItemTypeExtensionAttached;
    public static string WorkItemTypeExtensionDetached;
    public static string WorkItemTypeExtensionCurrent;
    public static string WorkItemTypeExtension;
    public static string WorkItemTypeExtensionId;
    public static string ClientCapabilities;
    public static string FileSize;
    public static string FieldsAddedCount;
    public static string FieldsRemainingCount;
    public static string FieldAttributeName;
    public static string FieldAttributeReferenceName;
    public static string FieldAttributeType;
    public static string FieldAttributeInFieldId;
    public static string FieldAttributeTempInFieldId;
    public static string FieldAttributeId;
    public static string FieldAttributeReportingType;
    public static string FieldAttributeReportingFormula;
    public static string FieldAttributeReportingEnabled;
    public static string FieldAttributeForceDelete;
    public static string FieldAttributeReportingName;
    public static string FieldAttributeReportingReferenceName;
    public static string TypeString;
    public static string TypeNumber;
    public static string TypeDateTime;
    public static string TypeInteger;
    public static string TypeDouble;
    public static string TypeBoolean;
    public static string TypeGuid;
    public static string QueryText;
    public static string Description;
    public static string IsPublic;
    public static string QueryId;
    public static string QueryParentId;
    public static string QueryUpdateTime;
    public static string QueryOwnerIdentifier;
    public static string QueryOwnerType;
    public static string InheritPermissions;
    public static string AccessControlEntry;
    public static string IdentityType;
    public static string Identifier;
    public static string Allow;
    public static string Deny;
    public static string DenyWrite;
    public static string Suggestion;
    public static string Default;
    public static string HelpText;
    public static string FlowDownTree;
    public static string TempThenFieldId;
    public static string ThenFieldId;
    public static string ThenOneLevel;
    public static string ThenTwoPlusLevels;
    public static string TempThenConstId;
    public static string ThenConstId;
    public static string Unless;
    public static string ThenNot;
    public static string IfNot;
    public static string IfConstId;
    public static string TempIfConstId;
    public static string PersonId;
    public static string TempPersonId;
    public static string InversePersonId;
    public static string ThenImplicitEmpty;
    public static string ThenImplicitUnchanged;
    public static string ThenLeaf;
    public static string ThenInterior;
    public static string ThenConstLargeText;
    public static string ConstantId;
    public static string TempConstantId;
    public static string IfFieldId;
    public static string TempIfFieldId;
    public static string AreaId;
    public static string TempAreaId;
    public static string RootTreeId;
    public static string TempRootTreeId;
    public static string ObjectTypeScopeId;
    public static string TempObjectTypeScopeId;
    public static string LookupAccount;
    public static string PropertyValue;
    public static string ThenLike;
    public static string OftenQueried;
    public static string FieldUsageId;
    public static string FlowAroundTree;
    public static string TreePropertyId;
    public static string Reverse;
    public static string GrantRead;
    public static string DenyRead;
    public static string GrantWrite;
    public static string GrantAdmin;
    public static string DenyAdmin;
    public static string RuleId;
    public static string SetId;
    public static string Field1Id;
    public static string TempField1Id;
    public static string Field1IsConstId;
    public static string TempField1IsConstId;
    public static string Field1WasConstId;
    public static string TempField1WasConstId;
    public static string Field2Id;
    public static string TempField2Id;
    public static string Field2IsConstId;
    public static string TempField2IsConstId;
    public static string Field2WasConstId;
    public static string TempField2WasConstId;
    public static string Field3Id;
    public static string TempField3Id;
    public static string Field3IsConstId;
    public static string TempField3IsConstId;
    public static string Field3WasConstId;
    public static string TempField3WasConstId;
    public static string Field4Id;
    public static string TempField4Id;
    public static string Field4IsConstId;
    public static string TempField4IsConstId;
    public static string Field4WasConstId;
    public static string TempField4WasConstId;
    public static string FldXID;
    public static string TempFldXID;
    public static string FldXWasConst;
    public static string TempFldXWasConst;
    public static string FldXIsConst;
    public static string TempFldXIsConst;
    public static string IsAcl;
    public static string If2FieldId;
    public static string TempIf2FieldId;
    public static string If2Not;
    public static string If2ConstId;
    public static string TempIf2ConstId;
    public static string AttachedFilesField;
    public static int DomainAccounts;
    public static string ObjectTypeRule;
    public static string ObjectTypeTree;
    public static string OutputId;
    public static string UpdateResults;
    public static string ErrorNumber;
    public static string WorkItemTypeId;
    public static string WorkItemTypeNameConstantId;
    public static string WorkItemTypeTempNameConstantId;
    public static string WorkItemTypeProjectId;
    public static string WorkItemTypeDescriptionId;
    public static string WorkItemTypeTempDescriptionId;
    public static string WorkItemTypeDeleted;
    public static string ActionsId;
    public static string ActionsName;
    public static string ActionsWorkItemTypeId;
    public static string ActionsTempWorkItemTypeId;
    public static string ActionsFromStateConstId;
    public static string ActionsTempFromStateConstId;
    public static string ActionsToStateConstId;
    public static string ActionsTempToStateConstId;
    public static string ActionsDeleted;
    public static string WorkItemTypeUsageId;
    public static string WorkItemTypeUsageFieldId;
    public static string WorkItemTypeUsageTempFieldId;
    public static string WorkItemTypeUsageWorkItemTypeId;
    public static string WorkItemTypeUsageTempWorkItemTypeId;
    public static string WorkItemTypeUsageGreyOut;
    public static string WorkItemTypeUsageDeleted;
    public static string ObjectTypeWorkItemLink;
    public static string WorkItemLinkSourceID;
    public static string WorkItemLinkTargetID;
    public static string WorkItemLinkType;
    public static string WorkItemLinkComment;
    public static string WorkItemLinkAutoMerge;
    public static string WorkItemLinkLock;
    public static string WorkItemLinkChangedDate;
    public static string LinkOutputSourceID;
    public static string LinkOutputTargetID;
    public static string LinkOutputLinkType;
    public static string LinkOutputDeleted;
    public static string LinkOutputChangedBy;
    public static string LinkOutputChangedDate;
    public static string ObjectTypeWorkItemLinkType;
    public static string LinkTypeReferenceName;
    public static string LinkTypeForwardName;
    public static string LinkTypeReverseName;
    public static string LinkTypeRules;
    public static string LinkTypeOutputReferenceName;
    public static string LinkTypeOutputForwardName;
    public static string LinkTypeOutputForwardId;
    public static string LinkTypeOutputReverseName;
    public static string LinkTypeOutputReverseId;
    public static string LinkTypeOutputRules;
    public static string LinkTypeOutputDeleted;
    public static string LinkTypeOutputChangedBy;
    public static string LinkTypeOutputChangedDate;
    public static string LinkTypeOutputCacheStamp;
    public static string WorkItemTypeName;
    public static string WorkItemTypeProjectName;
    public static string WorkItemTypeNewName;
    public static string DestroyGlobalList;
    public static string GlobalListName;
    public static string CategoryID;
    public static string TempCategoryID;
    public static string CategoryMemberID;
    public static string DefaultWorkItemTypeId;
    public static string TempDefaultWorkItemTypeId;
    public static string CategoryWorkItemTypeId;
    public static string TempCategoryWorkItemTypeId;
}
internal class Microsoft.TeamFoundation.WorkItemTracking.Common.UserSecurityMask : ValueType {
    public static string Read;
    public static string Write;
    public static string Admin;
}
[EditorBrowsableAttribute("1")]
public class Microsoft.TeamFoundation.WorkItemTracking.Common.ValidateWebLayoutSystemControlErrorActions : object {
    [CompilerGeneratedAttribute]
private Action`1<string> <SystemControlTypeErrorAction>k__BackingField;
    [CompilerGeneratedAttribute]
private Action`1<string> <SystemControlFieldErrorAction>k__BackingField;
    [CompilerGeneratedAttribute]
private Action`1<string> <SystemControlDuplicateErrorAction>k__BackingField;
    [CompilerGeneratedAttribute]
private Action`1<string> <SystemControlReplacesFieldErrorAction>k__BackingField;
    [CompilerGeneratedAttribute]
private Action`1<string> <SystemControlHiddenFieldErrorAction>k__BackingField;
    [CompilerGeneratedAttribute]
private Action`1<string> <SystemControlReplacesDuplicateFieldErrorAction>k__BackingField;
    public Action`1<string> SystemControlTypeErrorAction { get; public set; }
    public Action`1<string> SystemControlFieldErrorAction { get; public set; }
    public Action`1<string> SystemControlDuplicateErrorAction { get; public set; }
    public Action`1<string> SystemControlReplacesFieldErrorAction { get; public set; }
    public Action`1<string> SystemControlHiddenFieldErrorAction { get; public set; }
    public Action`1<string> SystemControlReplacesDuplicateFieldErrorAction { get; public set; }
    [CompilerGeneratedAttribute]
public Action`1<string> get_SystemControlTypeErrorAction();
    [CompilerGeneratedAttribute]
public void set_SystemControlTypeErrorAction(Action`1<string> value);
    [CompilerGeneratedAttribute]
public Action`1<string> get_SystemControlFieldErrorAction();
    [CompilerGeneratedAttribute]
public void set_SystemControlFieldErrorAction(Action`1<string> value);
    [CompilerGeneratedAttribute]
public Action`1<string> get_SystemControlDuplicateErrorAction();
    [CompilerGeneratedAttribute]
public void set_SystemControlDuplicateErrorAction(Action`1<string> value);
    [CompilerGeneratedAttribute]
public Action`1<string> get_SystemControlReplacesFieldErrorAction();
    [CompilerGeneratedAttribute]
public void set_SystemControlReplacesFieldErrorAction(Action`1<string> value);
    [CompilerGeneratedAttribute]
public Action`1<string> get_SystemControlHiddenFieldErrorAction();
    [CompilerGeneratedAttribute]
public void set_SystemControlHiddenFieldErrorAction(Action`1<string> value);
    [CompilerGeneratedAttribute]
public Action`1<string> get_SystemControlReplacesDuplicateFieldErrorAction();
    [CompilerGeneratedAttribute]
public void set_SystemControlReplacesDuplicateFieldErrorAction(Action`1<string> value);
}
[EditorBrowsableAttribute("1")]
public class Microsoft.TeamFoundation.WorkItemTracking.Common.ValidationMethods : ValueType {
    public static bool IsValidLinkTypeName(string name);
    public static bool IsValidLinkTypeReferenceName(string name);
    public static bool IsValidLinkTypeReferenceNameForImport(string name);
    public static bool IsValidWorkItemTypeCategoryName(string name);
    public static bool IsValidWorkItemTypeCategoryReferenceName(string name);
    public static bool IsValidFieldName(string name);
    public static bool IsValidReferenceFieldName(string name);
    public static bool IsValidReferenceFieldNameForImport(string name);
    public static bool IsSystemReferenceName(string name);
}
internal class Microsoft.TeamFoundation.WorkItemTracking.Common.WarehouseDimensionFieldNames : ValueType {
    public static string Identifier;
    public static string AssignedTo;
    public static string ChangedBy;
    public static string ChangedDate;
    public static string CreatedBy;
    public static string Area;
    public static string Iteration;
    public static string TeamProject;
}
internal class Microsoft.TeamFoundation.WorkItemTracking.Common.WarehouseDimensionNames : ValueType {
    public static string Person;
    public static string Project;
    public static string ProjectTime;
    public static string Area;
    public static string Iteration;
    public static string Build;
    public static string WorkItem;
}
internal class Microsoft.TeamFoundation.WorkItemTracking.Common.WarehouseFactFieldNames : ValueType {
    public static string BuiltinProjectSuffix;
    public static string RevisionExpiredDate;
    public static string PreviousState;
    public static string RecordCount;
    public static string TransitionCount;
    public static string RevisionCount;
    public static string WorkItemFactTrackingId;
}
[EditorBrowsableAttribute("1")]
public class Microsoft.TeamFoundation.WorkItemTracking.Common.WarehouseFieldTypeNames : ValueType {
    public static string NVarChar;
    public static string Int;
    public static string DateTime;
    public static string Float;
    public static string Bit;
}
[EditorBrowsableAttribute("1")]
public static class Microsoft.TeamFoundation.WorkItemTracking.Common.WiqlHelpers : object {
    private static string cSingleQuote;
    private static string cTwoSingleQuotes;
    private static string cSingleQuotedStringFormat;
    private static string cDoubleQuotedStringFormat;
    private static string cBracketedStringFormat;
    public static Dictionary`2<string, string> GetParameterDictionary(string projectName);
    public static string GetEscapedSingleQuotedValue(string value);
    public static string GetSingleQuotedValue(string value);
    public static string GetDoubleQuotedValue(string value);
    public static string GetEnclosedField(string value);
}
[EditorBrowsableAttribute("1")]
public class Microsoft.TeamFoundation.WorkItemTracking.Common.WiqlOperators : object {
    private IDictionary`2<string, string> m_localizedOperatorLookup;
    private IDictionary`2<string, string> m_invariantOperatorLookup;
    private IDictionary`2<string, string> m_supportedInvariantOperationsLookup;
    private IDictionary`2<string, string> m_supportedLocalizedOperationsLookup;
    public static string cAnd;
    public static string cOr;
    public static string cNot_;
    public static string cContains;
    public static string cContainsWords;
    public static string cNotContains;
    public static string cNotContainsWords;
    public static string cUnder;
    public static string cNotUnder;
    public static string cIn;
    public static string cNotIn;
    public static string cEver;
    public static string cNotEver;
    public static string cEqualTo;
    public static string cNotEqualTo;
    public static string cGreaterThan;
    public static string cLessThan;
    public static string cGreaterThanOrEqualTo;
    public static string cLessThanOrEqualTo;
    public static string cInGroup;
    public static string cNotInGroup;
    public static string cIsEmpty;
    public static string cIsNotEmpty;
    public static string cMacroStart;
    public static string cMacroToday;
    public static string cMacroMe;
    public static string cProjectContextKey;
    public static string cTeamNameContextKey;
    public static string cMacroProject;
    public static string cCurrentIterationContextKey;
    public static string cMacroCurrentIteration;
    public static string cMacroFollows;
    public static string cRecentMentions;
    public static string cMyRecentActivity;
    public static string cRecentProjectActivity;
    public static string cStartOfYearName;
    public static string cStartOfMonthName;
    public static string cStartOfWeekName;
    public static string cStartOfDayName;
    public static string cStartOfYear;
    public static string cStartOfMonth;
    public static string cStartOfWeek;
    public static string cStartOfDay;
    public static string refNameContains;
    public static string refNameContainsWords;
    public static string refNameNotContains;
    public static string refNameNotContainsWords;
    public static string refNameUnder;
    public static string refNameNotUnder;
    public static string refNameIn;
    public static string refNameEver;
    public static string refNameNotEver;
    public static string refNameEqualTo;
    public static string refNameNotEqualTo;
    public static string refNameGreaterThan;
    public static string refNameLessThan;
    public static string refNameGreaterThanOrEqualTo;
    public static string refNameLessThanOrEqualTo;
    public static string refNameInGroup;
    public static string refNameNotInGroup;
    public static String[] ProjectOperators;
    public static String[] StringOperators;
    public static String[] StringWithTextSupportOperators;
    public static String[] TextOperators;
    public static String[] TextWithTextSupportOperators;
    public static String[] ContainsOperators;
    public static String[] ContainsWordsOperators;
    public static String[] TreePathOperators;
    public static String[] ComparisonOperators;
    public static String[] EqualityOperators;
    public static String[] LogicalOperators;
    public static String[] GroupOperators;
    public static String[] OperatorsSupportingFieldComparison;
    public static String[] IdentityOperators;
    public static InternalFieldType[] FieldTypesSupportingInGroup;
    public static InternalFieldType[] FieldTypesSupportingEver;
    public static InternalFieldType[] FieldTypesSupportingFieldComparison;
    public WiqlOperators(WiqlOperatorsOptions options);
    private static WiqlOperators();
    public IEnumerable`1<string> GetLocalizedMacros();
    public IEnumerable`1<string> GetInvariantMacros();
    public string GetInvariantOperator(string localizedOperator);
    public string GetLocalizedOperator(string invariantOperator);
    public List`1<string> GetLocalizedOperatorList(IEnumerable`1<string> invariantOperatorList);
    public LogicalOperator GetLogicalOperator(string logicalOperatorText);
    public string GetLocalizedTodayMinusMacro(int number);
    public bool IsValidMacro(string macro, bool localized);
    public static bool IsFieldComparisonOperator(string operatorName);
    public string GetFieldComparisonOperator(string invariantOperator);
    public static string StripFieldComparisonQualifier(string operatorName);
    public static string AppendFieldComparisonQualifier(string operatorName);
    public static string AppendFieldComparisonReferenceName(string operatorReferenceName);
    public static string GetMacro(string stringFromResource);
    private bool IsTodayMacro(string macroText, bool localized);
    private String[] GetComplexMacroParts(string macroText);
    private bool IsComplexMacro(string macroText, bool localized);
    private string GetComplexMacro(string macroText, bool localized);
    public bool IsProjectMacro(string macro, bool localized);
    public static bool IsCurrentIterationMacro(string macro, bool localized);
    public static bool IsFollowsMacro(string macro, bool localized);
    public static string GetInvariantTodayMacro(string localizedMacro);
    private string GetLocalizedTodayMacro(string invariantMacro);
    private void AddOperatorPair(string invariantValue, string localizedValue);
    private bool AddOperatorPair(IDictionary`2<string, string> hash, string key, string value);
    private void AddSupportedOperatorPair(string invariantOperator, string supportedOperator);
    public static string ConvertToContainsWords(string containsOperator);
    public static string ConvertToContains(string containsWordsOperator);
    public IDictionary`2<string, string> GetSupportedOperationLookup(bool isInvariant);
}
[EditorBrowsableAttribute("1")]
public class Microsoft.TeamFoundation.WorkItemTracking.Common.WiqlOperatorsOptions : object {
    public IEnumerable`1<string> FilteredOperators;
}
[EditorBrowsableAttribute("1")]
public enum Microsoft.TeamFoundation.WorkItemTracking.Common.WITQueryApplicationIntentOverride : Enum {
    public int value__;
    public static WITQueryApplicationIntentOverride Default;
    public static WITQueryApplicationIntentOverride ReadWrite;
}
[EditorBrowsableAttribute("1")]
public enum Microsoft.TeamFoundation.WorkItemTracking.Common.WorkItemClassificationReconciliationState : Enum {
    public int value__;
    public static WorkItemClassificationReconciliationState Succeeded;
    public static WorkItemClassificationReconciliationState Failed;
    public static WorkItemClassificationReconciliationState Canceled;
    public static WorkItemClassificationReconciliationState TimedOut;
}
[EditorBrowsableAttribute("1")]
public enum Microsoft.TeamFoundation.WorkItemTracking.Common.WorkItemGroupIdentityScope : Enum {
    public int value__;
    public static WorkItemGroupIdentityScope None;
    public static WorkItemGroupIdentityScope Project;
    public static WorkItemGroupIdentityScope Global;
    public static WorkItemGroupIdentityScope Instance;
}
public enum Microsoft.TeamFoundation.WorkItemTracking.Common.WorkItemServerVersion : Enum {
    public int value__;
    public static WorkItemServerVersion None;
    public static WorkItemServerVersion V1;
    public static WorkItemServerVersion V2;
    public static WorkItemServerVersion V3;
    public static WorkItemServerVersion V4;
    public static WorkItemServerVersion V5;
    public static WorkItemServerVersion V6;
    public static WorkItemServerVersion V7;
    public static WorkItemServerVersion V8;
}
[EditorBrowsableAttribute("1")]
public static class Microsoft.TeamFoundation.WorkItemTracking.Common.WorkItemTrackingJobs : object {
    public static Guid WorkItemReclassification;
    public static Guid IdentitySync;
    public static Guid RemoteLinking;
    public static Guid RemoteLinkingProjectDelete;
    public static Guid GitHubMentionProcessing;
    public static Guid GitHubArtifactStorage;
    public static Guid UpdateViolations;
    public static Guid TemporaryQueryCleanup;
    private static WorkItemTrackingJobs();
}
[FlagsAttribute]
[EditorBrowsableAttribute("1")]
public enum Microsoft.TeamFoundation.WorkItemTracking.Common.WorkItemTrackingPermissions : Enum {
    public int value__;
    public static WorkItemTrackingPermissions None;
    public static WorkItemTrackingPermissions ManagePermissions;
    public static WorkItemTrackingPermissions DestroyAttachments;
}
[EditorBrowsableAttribute("1")]
public class Microsoft.TeamFoundation.WorkItemTracking.Common.WorkItemTrackingSecurityConstants : ValueType {
    public static Guid NamespaceGuid;
    public static string SecurityToken;
    private static WorkItemTrackingSecurityConstants();
}
[EditorBrowsableAttribute("1")]
public enum Microsoft.TeamFoundation.WorkItemTracking.Common.WorkItemTypeExtensionReconciliationStatus : Enum {
    public int value__;
    public static WorkItemTypeExtensionReconciliationStatus Error;
    public static WorkItemTypeExtensionReconciliationStatus NeverReconciled;
    public static WorkItemTypeExtensionReconciliationStatus Reconciled;
    public static WorkItemTypeExtensionReconciliationStatus Pending;
}
internal static class Microsoft.TeamFoundation.WorkItemTracking.Internals.AllowedHtmlTags : object {
    private static Dictionary`2<string, TagInfo> m_hashAllowed;
    private static Dictionary`2<string, int> m_hashSpecial;
    private static Dictionary`2<string, int> m_hashAttributes;
    public static bool AreTagsEqual(string t1, string t2);
    public static bool IsAllowedTag(string s);
    public static bool IsSpecialTag(string s);
    public static bool IsAllowedAttribute(string t, string a);
    public static int GetEolBefore(string t);
    public static int GetEolAfter(string t);
    private static void AddTag(string tag, int eolBefore, int eolAfter, String[] attributes);
    private static void AddTag(string tag, String[] attributes);
    private static void AddTags(String[] tags);
    private static void AddCommonAttributes(String[] attributes);
    private static void AddSpecialTags(String[] tags);
    private static void Init();
}
[EditorBrowsableAttribute("1")]
public class Microsoft.TeamFoundation.WorkItemTracking.Internals.AttachmentInfo : FileLinkInfo {
    public FileInfo FileInfo;
    [CompilerGeneratedAttribute]
private long <Length>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTime <CreationDate>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTime <LastWriteDate>k__BackingField;
    public bool IsUploaded;
    public bool IsLocalCopy;
    public long Length { get; public set; }
    public DateTime CreationDate { get; public set; }
    public DateTime LastWriteDate { get; public set; }
    public AttachmentInfo(string path);
    public AttachmentInfo(AttachmentInfo src);
    [CompilerGeneratedAttribute]
public long get_Length();
    [CompilerGeneratedAttribute]
public void set_Length(long value);
    [CompilerGeneratedAttribute]
public DateTime get_CreationDate();
    [CompilerGeneratedAttribute]
public void set_CreationDate(DateTime value);
    [CompilerGeneratedAttribute]
public DateTime get_LastWriteDate();
    [CompilerGeneratedAttribute]
public void set_LastWriteDate(DateTime value);
    public virtual int GetHashCode();
    public virtual bool Equals(object obj);
}
[TypeConverterAttribute("Microsoft.TeamFoundation.WorkItemTracking.Internals.ConstantSetReferenceTypeConverter")]
[XmlTypeAttribute("set-reference")]
[XmlIncludeAttribute("Microsoft.TeamFoundation.WorkItemTracking.Internals.ExtendedConstantSetRef")]
public class Microsoft.TeamFoundation.WorkItemTracking.Internals.ConstantSetReference : object {
    private static string c_excludeGroups;
    private static string c_includeTop;
    private static string c_direct;
    [CompilerGeneratedAttribute]
private int <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IncludeTop>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Direct>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ExcludeGroups>k__BackingField;
    [CompilerGeneratedAttribute]
private Guid <TeamFoundationId>k__BackingField;
    [CompilerGeneratedAttribute]
private IdentityDescriptor <IdentityDescriptor>k__BackingField;
    [XmlAttributeAttribute("id")]
[DefaultValueAttribute("0")]
public int Id { get; public set; }
    [XmlAttributeAttribute("include-top")]
[DefaultValueAttribute("False")]
public bool IncludeTop { get; public set; }
    [XmlAttributeAttribute("direct")]
[DefaultValueAttribute("False")]
public bool Direct { get; public set; }
    [XmlAttributeAttribute("exclude-groups")]
[DefaultValueAttribute("False")]
public bool ExcludeGroups { get; public set; }
    [XmlIgnoreAttribute]
public Guid TeamFoundationId { get; public set; }
    [XmlIgnoreAttribute]
public IdentityDescriptor IdentityDescriptor { get; public set; }
    public long Handle { get; }
    public ConstantSetReference(int setId);
    public ConstantSetReference(int setId, bool direct, bool includeGroups, bool includeTop);
    [CompilerGeneratedAttribute]
public int get_Id();
    [CompilerGeneratedAttribute]
public void set_Id(int value);
    [CompilerGeneratedAttribute]
public bool get_IncludeTop();
    [CompilerGeneratedAttribute]
public void set_IncludeTop(bool value);
    [CompilerGeneratedAttribute]
public bool get_Direct();
    [CompilerGeneratedAttribute]
public void set_Direct(bool value);
    [CompilerGeneratedAttribute]
public bool get_ExcludeGroups();
    [CompilerGeneratedAttribute]
public void set_ExcludeGroups(bool value);
    [CompilerGeneratedAttribute]
public Guid get_TeamFoundationId();
    [CompilerGeneratedAttribute]
public void set_TeamFoundationId(Guid value);
    [CompilerGeneratedAttribute]
public IdentityDescriptor get_IdentityDescriptor();
    [CompilerGeneratedAttribute]
public void set_IdentityDescriptor(IdentityDescriptor value);
    public virtual string ToString();
    public long get_Handle();
    public static ConstantSetReference CreateFrom(string stringValue);
    public virtual int GetHashCode();
    public virtual bool Equals(object obj);
    public sealed virtual bool Equals(ConstantSetReference other);
}
public class Microsoft.TeamFoundation.WorkItemTracking.Internals.ConstantSetReferenceTypeConverter : TypeConverter {
    public virtual bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType);
    public virtual bool CanConvertTo(ITypeDescriptorContext context, Type destinationType);
    public virtual object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value);
    public virtual object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType);
}
[TypeConverterAttribute("Microsoft.TeamFoundation.WorkItemTracking.Internals.ConstantSetReferenceTypeConverter")]
[XmlTypeAttribute("extended-set-reference")]
public class Microsoft.TeamFoundation.WorkItemTracking.Internals.ExtendedConstantSetRef : ConstantSetReference {
    [CompilerGeneratedAttribute]
private string <EntityId>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsGroup>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DisplayName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DistinctDisplayName>k__BackingField;
    [XmlIgnoreAttribute]
public string EntityId { get; public set; }
    [XmlIgnoreAttribute]
public bool IsGroup { get; public set; }
    [XmlIgnoreAttribute]
public string DisplayName { get; public set; }
    [XmlIgnoreAttribute]
public string DistinctDisplayName { get; public set; }
    [CompilerGeneratedAttribute]
public string get_EntityId();
    [CompilerGeneratedAttribute]
public void set_EntityId(string value);
    [CompilerGeneratedAttribute]
public bool get_IsGroup();
    [CompilerGeneratedAttribute]
public void set_IsGroup(bool value);
    [CompilerGeneratedAttribute]
public string get_DisplayName();
    [CompilerGeneratedAttribute]
public void set_DisplayName(string value);
    [CompilerGeneratedAttribute]
public string get_DistinctDisplayName();
    [CompilerGeneratedAttribute]
public void set_DistinctDisplayName(string value);
}
public static class Microsoft.TeamFoundation.WorkItemTracking.Internals.FieldHelpers : object {
    public static Type GetFieldSystemType(InternalFieldType fieldType);
    public static InternalFieldUsages GetFieldUsage(int objectId);
    public static InternalFieldType ConvertToFieldType(FieldDBType fieldDataType);
    public static FieldDBType ConvertToFieldDBType(InternalFieldType fieldType);
    public static FieldDBType StringToFieldDBType(string stringType);
    public static FieldDBType StringToFieldDBType(string stringType, bool syncNameChanges);
    public static FieldDBType StringToFieldDBType(string stringType, bool syncNameChanges, bool identityFieldsEnabled);
    public static int ParseFormulaString(string value);
    public static int ParseReportabilityString(string value);
    public static bool IsValidFieldValue(Type fieldType, string value);
}
[EditorBrowsableAttribute("1")]
public class Microsoft.TeamFoundation.WorkItemTracking.Internals.FileLinkInfo : LinkInfo {
    [CompilerGeneratedAttribute]
private string <Path>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Attribute>k__BackingField;
    [CompilerGeneratedAttribute]
private int <ExtId>k__BackingField;
    public string Path { get; public set; }
    public string Attribute { get; public set; }
    public int ExtId { get; public set; }
    public FileLinkInfo(FileLinkInfo link);
    [CompilerGeneratedAttribute]
public string get_Path();
    [CompilerGeneratedAttribute]
public void set_Path(string value);
    [CompilerGeneratedAttribute]
public string get_Attribute();
    [CompilerGeneratedAttribute]
public void set_Attribute(string value);
    [CompilerGeneratedAttribute]
public int get_ExtId();
    [CompilerGeneratedAttribute]
public void set_ExtId(int value);
    public virtual int GetHashCode();
    public virtual bool Equals(object obj);
}
[DefaultMemberAttribute("Item")]
public class Microsoft.TeamFoundation.WorkItemTracking.Internals.GenericDataReader : object {
    private bool m_open;
    private KeyValuePair`2[] m_columns;
    private Dictionary`2<string, int> m_nameToOrdinalMap;
    private IEnumerator`1<IEnumerable`1<object>> m_enumerator;
    private Object[] m_currentRow;
    public int Depth { get; }
    public bool IsClosed { get; }
    public int RecordsAffected { get; }
    public int FieldCount { get; }
    public object Item { get; }
    public object Item { get; }
    public GenericDataReader(IEnumerable`1<string> columns, IEnumerable`1<IEnumerable`1<object>> data);
    public GenericDataReader(IEnumerable`1<KeyValuePair`2<string, Type>> columns, IEnumerable`1<IEnumerable`1<object>> data);
    private static IEnumerable`1<KeyValuePair`2<string, Type>> CreateColumnInfo(IEnumerable`1<string> columns);
    public sealed virtual void Close();
    public sealed virtual int get_Depth();
    public sealed virtual DataTable GetSchemaTable();
    public sealed virtual bool get_IsClosed();
    public sealed virtual bool NextResult();
    public sealed virtual bool Read();
    public sealed virtual int get_RecordsAffected();
    public sealed virtual void Dispose();
    public void Dispose(bool disposing);
    public sealed virtual int get_FieldCount();
    public sealed virtual bool GetBoolean(int i);
    public sealed virtual byte GetByte(int i);
    public sealed virtual long GetBytes(int i, long fieldOffset, Byte[] buffer, int bufferoffset, int length);
    public sealed virtual char GetChar(int i);
    public sealed virtual long GetChars(int i, long fieldoffset, Char[] buffer, int bufferoffset, int length);
    public sealed virtual DateTime GetDateTime(int i);
    public sealed virtual decimal GetDecimal(int i);
    public sealed virtual double GetDouble(int i);
    public sealed virtual float GetFloat(int i);
    public sealed virtual Guid GetGuid(int i);
    public sealed virtual short GetInt16(int i);
    public sealed virtual int GetInt32(int i);
    public sealed virtual long GetInt64(int i);
    public sealed virtual string GetString(int i);
    public sealed virtual object GetValue(int i);
    public sealed virtual IDataReader GetData(int i);
    public sealed virtual string GetDataTypeName(int i);
    public sealed virtual Type GetFieldType(int i);
    public sealed virtual string GetName(int i);
    public sealed virtual int GetOrdinal(string name);
    public sealed virtual int GetValues(Object[] values);
    public sealed virtual bool IsDBNull(int i);
    public sealed virtual object get_Item(string name);
    public sealed virtual object get_Item(int i);
    [IteratorStateMachineAttribute("Microsoft.TeamFoundation.WorkItemTracking.Internals.GenericDataReader/<GetEnumerator>d__48")]
public sealed virtual IEnumerator`1<IDataRecord> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
}
[EditorBrowsableAttribute("1")]
public static class Microsoft.TeamFoundation.WorkItemTracking.Internals.HtmlConverter : object {
    public static string Strip(string s);
    public static StringBuilder StripToBuilder(string s);
    public static string ConvertToPlainText(string s);
    public static string ConvertToHtml(object o, bool editableStyle);
    private static int SkipWhiteSpaces(string s, int i);
    private static int SkipUntil(string s, int i, char c1);
    private static int SkipUntil(string s, int i, char c1, char c2, char c3);
    private static int ScanName(string s, int i, String& name);
    internal static void Parse(string s, IHtmlFilterWriter writer);
}
internal static class Microsoft.TeamFoundation.WorkItemTracking.Internals.HtmlEntities : object {
    private static Dictionary`2<string, int> m_entities;
    public static bool TryGetValue(string name, Int32& value);
    private static void Init();
}
internal class Microsoft.TeamFoundation.WorkItemTracking.Internals.HtmlPlainTextWriter : object {
    private StringBuilder m_str;
    private int m_eol;
    private bool m_pre;
    public virtual string ToString();
    private static bool IsHexChar(char ch, Int32& val);
    private void AppendEol(int eol);
    private void AppendString(string s, int offs);
    private void AppendString(string s, int offs, int len);
    private sealed virtual override void Microsoft.TeamFoundation.WorkItemTracking.Internals.IHtmlFilterWriter.WriteText(string s, int offs, int len);
    private sealed virtual override void Microsoft.TeamFoundation.WorkItemTracking.Internals.IHtmlFilterWriter.WriteTag(string s, int offs, int len, string tag, bool endTag);
    private sealed virtual override void Microsoft.TeamFoundation.WorkItemTracking.Internals.IHtmlFilterWriter.WriteEndOfTag(string s, int offs, int len, string tag);
    private sealed virtual override void Microsoft.TeamFoundation.WorkItemTracking.Internals.IHtmlFilterWriter.WriteAttribute(string s, int offs, int len, string tag, string attr, int i1, int i2);
}
internal class Microsoft.TeamFoundation.WorkItemTracking.Internals.HtmlSimpleWriter : object {
    private StringBuilder m_str;
    public StringBuilder Content { get; }
    public virtual string ToString();
    public StringBuilder get_Content();
    private sealed virtual override void Microsoft.TeamFoundation.WorkItemTracking.Internals.IHtmlFilterWriter.WriteText(string s, int offs, int len);
    private sealed virtual override void Microsoft.TeamFoundation.WorkItemTracking.Internals.IHtmlFilterWriter.WriteTag(string s, int offs, int len, string tag, bool endTag);
    private sealed virtual override void Microsoft.TeamFoundation.WorkItemTracking.Internals.IHtmlFilterWriter.WriteEndOfTag(string s, int offs, int len, string tag);
    private sealed virtual override void Microsoft.TeamFoundation.WorkItemTracking.Internals.IHtmlFilterWriter.WriteAttribute(string s, int offs, int len, string tag, string attr, int i1, int i2);
}
internal interface Microsoft.TeamFoundation.WorkItemTracking.Internals.IHtmlFilterWriter {
    public abstract virtual void WriteText(string s, int offs, int len);
    public abstract virtual void WriteTag(string s, int offs, int len, string tag, bool endTag);
    public abstract virtual void WriteEndOfTag(string s, int offs, int len, string tag);
    public abstract virtual void WriteAttribute(string s, int offs, int len, string tag, string attr, int i1, int i2);
}
[EditorBrowsableAttribute("1")]
public static class Microsoft.TeamFoundation.WorkItemTracking.Internals.InternalsResourceStrings : object {
    private static ResourceManager s_resMgr;
    public static string BuletPlainText;
    public static string ErrorInGroupNotSupported;
    public static string ErrorInvalidQueryItemName;
    public static string ErrorQueryFieldsComparisonNotSupported;
    public static string ErrorWitCategoriesNotSupported;
    public static string ErrorWitLinksNotSupported;
    public static string ErrorWrongFieldTypeInInGroup;
    public static string FileUploadedExceededMax;
    public static string ImageAltTextEnd;
    public static string ImageAltTextStart;
    public static string QueryHierarchyNameCannotBeEmpty;
    public static string QueryNameTooLong;
    public static string UnrecognizedServerData;
    public static string ErrorNotUniqueStoredQuery;
    public static string ErrorUnexpected;
    public static string ErrorUnexpectedWithDetails;
    public static string ErrorWorkItemTypeAlreadyExists;
    public static string ErrorServerInternalUnknown;
    public static string ErrorRequestNotCancelable;
    public static string ErrorInvalidQueryName;
    public static string ErrorInvalidQueryText;
    public static string ImportWorkitemTypeException;
    public static string ErrorAuthorizeFieldChanges;
    public static string ErrorChangeWorkItemTypeAlreadyChanged;
    public static string ErrorChangeWorkItemTypeInvalidProjectID;
    public static string ErrorChangeActionAlreadyChanged;
    public static string ErrorBadAdminDataFieldsOutOfRange;
    public static string ErrorBadAdminDataInvalidFieldType;
    public static string ErrorBadAdminDataInvalidFieldName;
    public static string ErrorBadAdminDataInvalidFieldReferenceName;
    public static string ErrorBadAdminDataUnimplementedReadRuleCondition;
    public static string ErrorBadAdminDataRuleFlagsNonEditable;
    public static string ErrorBadAdminDataRuleEnforcementIsNotImplemented;
    public static string ErrorBadAdminDataDenyAdminNotAllowed;
    public static string ErrorBadAdminCannotAddRuleOnCoreFields;
    public static string ErrorLookupRuleTreeIdNotFound;
    public static string ErrorWorkItemUpdateForceRollback;
    public static string ErrorChangesRejected;
    public static string ErrorBadServiceConfig;
    public static string ErrorSqlErrorLoginFailed;
    public static string ErrorSqlErrorDeadlock;
    public static string ErrorSqlErrorTimeOutOrServerNotResponding;
    public static string ErrorCannotOpenDatabase;
    public static string ErrorNotAProjectUser;
    public static string ErrorNotANamespaceAdmin;
    public static string ErrorWorkItemUpdateWorkItemMissingOrUpdated;
    public static string ErrorAddConstantNotValidDomainAccount;
    public static string ErrorChangeFieldReportingTypeAlreadySet;
    public static string ErrorInvalidFieldSpecified;
    public static string ErrorAddSetInvalidParentIDOrConstID;
    public static string ErrorQueryDepthTooLarge;
    public static string InvalidProjectNodeId;
    public static string ErrorAddFileFileAlreadyExists;
    public static string ErrorAddFileFailedToFindFile;
    public static string ErrorSqlInsufficientMemory;
    public static string ErrorNotEnoughFields;
    public static string IndexAssociatedWithFieldError;
    public static string ErrorNoPermissionToModify;
    public static string ErrorNoPermissionToModifyField;
    public static string ErrorNoPermissionToModifyRules;
    public static string ErrorUserOrGroupNotFound;
    public static string ImportWorkItemLinkTypeException_InvalidRules;
    public static string ImportWorkItemLinkTypeException_InvalidTopology;
    public static string ImportWorkItemLinkTypeException_ReverseNameInvalid;
    public static string ImportWorkItemLinkTypeException_ReferenceNameInUse;
    public static string ImportWorkItemLinkTypeException_ForwardNameInUse;
    public static string ImportWorkItemLinkTypeException_ReverseNameInUse;
    public static string ImportWorkItemLinkTypeException_NothingSpecified;
    public static string ImportWorkItemLinkTypeException_EditDenied;
    public static string ImportWorkItemLinkTypeException_ModifyTopology;
    public static string ImportWorkItemLinkTypeException_DeleteDenied;
    public static string LinkTypeNotFound;
    public static string LinkTypeNotSupportedForQuerying;
    public static string LinkNotFoundForDelete;
    public static string LinkNotFoundForEdit;
    public static string AddLinkCannotLinkToSelf;
    public static string AddRemoteLinkCannotLinkToSameAccount;
    public static string AddRemoteLinkAccountRequired;
    public static string RemoteLinkInvalidUriException;
    public static string AddRemoteLinkProjectRequired;
    public static string AddLinkDisabledType;
    public static string AddLinkCircularity;
    public static string AddLinkExtraParent;
    public static string AddLinkAlreadyExists;
    public static string AddLinkMaxDepthExceeded;
    public static string AddLinkLimitExceeded;
    public static string LinkAuthorizationFailed;
    public static string LinkAuthorizationFailedAreaIdChanged;
    public static string LinkAuthorizationFailedLinkLocked;
    public static string QueryHierarchyDeniedOrNotExist;
    public static string QueryHierarchyParentDoesNotExist;
    public static string QueryHierarchyParentIsNotAFolder;
    public static string QueryHierarchyNameConflictsWithExistingItem;
    public static string QueryHierarchyCircularReference;
    public static string QueryHierarchyTypeMismatch;
    public static string QueryHierarchyItemAlreadyExists;
    public static string QueryHierarchyCannotMoveRootFolder;
    public static string QueryHierarchyCannotDeleteRootFolder;
    public static string ErrorGlobalListInUse;
    public static string ErrorWorkItemTypeInUse;
    public static string ErrorBisAttributeNotFound;
    public static string ErrorInvalidOnParamedQuery;
    public static string ErrorBisMiddleTierNotRegistered;
    public static string ErrorNodeNotExist;
    public static string ErrorCannotFindNodeFromId;
    public static string ErrorCouldNotConnect;
    public static string ErrorDeniedOrNotExist;
    public static string ErrorDuplicateGlobalList;
    public static string ErrorDuplicateListItem;
    public static string ErrorDuplicateReason;
    public static string ErrorDuplicatePattern;
    public static string ErrorFieldDefinitionNotExist;
    public static string ErrorFieldDefinitionNotExistGeneral;
    public static string ErrorFieldDefinitionIdNotExist;
    public static string ErrorFieldIdNotExist;
    public static string ErrorFieldNotFound;
    public static string ErrorFieldTypeMismatch;
    public static string ErrorGlobalListNotFound;
    public static string ErrorInvalidState;
    public static string ErrorManyDefaultStates;
    public static string ErrorDuplicateFieldName;
    public static string ErrorDuplicateFieldNameBackup;
    public static string ErrorManyStates;
    public static string ErrorNoDefaultState;
    public static string ErrorProjectNotExist;
    public static string ErrorProjectIdNotExist;
    public static string ErrorRelatedLinkNotExist;
    public static string ErrorRelatedLinkToSelf;
    public static string ErrorWorkItemStoreAlreadyConnected;
    public static string ErrorWorkItemTypeNotExist;
    public static string ErrorWorkItemTypeNameInvalid;
    public static string ErrorProhibitedMeasure;
    public static string ErrorWorkItemUpdateFieldsConflict;
    public static string ErrorWorkItemUpdateRuleViolation;
    public static string ErrorIncompatibleMeasure;
    public static string ErrorIncompatibleDimension;
    public static string ErrorIncompatibleDetail;
    public static string ErrorUnsupportedReportingFieldType;
    public static string ErrorDuplicateActions;
    public static string ErrorPageSizeLocked;
    public static string ErrorPageSizeRange;
    public static string ErrorActionsForInitialTransition;
    public static string ErrorDuplicateGlobalListItem;
    public static string ErrorWrongRuleForFieldType;
    public static string ErrorInconsistentFieldTypes;
    public static string ErrorFieldSelfReference;
    public static string ErrorInvalidListItem;
    public static string ErrorCannotSortBy;
    public static string ErrorLinkCommentTooLong;
    public static string ErrorLinkLocationTooLong;
    public static string ErrorHistory;
    public static string ErrorIgnoreField;
    public static string ErrorInvalidURL;
    public static string ErrorItemIsNew;
    public static string ErrorItemNotOpen;
    public static string ErrorItemOpen;
    public static string ErrorQueryNestingLimit;
    public static string ErrorItemAlreadyUpdatedOnServer;
    public static string ErrorInvalidTreeNode;
    public static string ErrorReadOnlyField;
    public static string ErrorBatchSaveFailed;
    public static string ErrorInconsistentRules;
    public static string ErrorUnknownFormField;
    public static string ErrorCannotUseTreePathType;
    public static string ErrorCannotUseHistoryType;
    public static string QueryNameEmpty;
    public static string QueryTextEmpty;
    public static string ErrorWorkItemValidation;
    public static string ErrorWorkItemNotExistOrNoAccess;
    public static string ErrorWorkItemChangeRejected;
    public static string ErrorRequestCancelledByUser;
    public static string ErrorDuplicateWorkItem;
    public static string ErrorInvalidProject;
    public static string ErrorAttachmentFileNotFound;
    public static string ErrorAttachmentCommentTooLong;
    public static string ErrorAttachmentAlreadyExists;
    public static string ErrorMaxNewAttachments;
    public static string FileUploadedExceededMaxMb;
    public static string FileUploadedExceededMaxBytes;
    public static string CannotChangeQueryScope;
    public static string QueryAlreadySaved;
    public static string QueryDescriptionTooLong;
    public static string TagFormatCreate;
    public static string TagFormatEdit;
    public static string TagFormatTransition;
    public static string TagAuth;
    public static string UnknownUser;
    public static string CopiedCommentItem;
    public static string WorkItemTag;
    public static string CopiedCommentNewItem;
    public static string ErrorInvalidFieldValue;
    public static string ErrorInvalidFieldName;
    public static string ErrorInvalidFieldReferenceName;
    public static string ErrorInternalField;
    public static string ErrorInvalidRuleForFieldType;
    public static string ErrorInvalidRuleForField;
    public static string ErrorDuplicateFieldReference;
    public static string ErrorFieldAlreadyExists;
    public static string ErrorFieldNotQueryable;
    public static string ErrorUserNotFoundForSid;
    public static string ErrorServerRejectedChangesException;
    public static string ErrorOrphanedItem;
    public static string ErrorOrphanedLink;
    public static string AttachmentChangedException;
    public static string AttachmentExistsException;
    public static string AttachmentNotFoundException;
    public static string WebExceptionConnectFailed;
    public static string WebExceptionCouldNotReachServer;
    public static string CouldNotReachServer;
    public static string WebExceptionTimeOut;
    public static string BackendArgumentException;
    public static string ErrorMissingConstant;
    public static string ErrorInvalidXmlNamespace;
    public static string ErrorCannotRenameField;
    public static string ErrorDifferentReportingSettings;
    public static string FieldNameChanged;
    public static string ErrorDuplicateFieldDefinition;
    public static string WarningMissingIdentity;
    public static string ErrorNoImportPermissions;
    public static string ErrorMissingRequiredAttribute;
    public static string WhereIsNotEmptyOnParamedQuery;
    public static string ErrorInvalidQueryColumn;
    public static string ErrorCantSortBy;
    public static string ErrorDuplicateStateInTransition;
    public static string ErrorDuplicateTransition;
    public static string ErrorAttachmentUploadFailed;
    public static string ErrorTwoWidthElements;
    public static string ErrorNoWidthElements;
    public static string ErrorReportingFieldNamesCollision;
    public static string LinkTypeCannotUpdateTopology;
    public static string LinkTypeSourceRelationNameRequired;
    public static string LinkTypeTargetRelationNameRequired;
    public static string LinkTypeTopologyNotSpecified;
    public static string LinkTypeNonDirectionalSourceTargetDifferent;
    public static string LinkTypeDirectionalSourceTargetSame;
    public static string LinkTypeNameConflict;
    public static string LinkTypeRefNameConflict;
    public static string LinkTypeFieldRefNameConflict;
    public static string ErrorInvalidLinkTypeName;
    public static string ErrorInvalidLinkTypeReferenceName;
    public static string ErrorInvalidLinkTypeReferenceNameSystem;
    public static string FieldLinkTypeRefNameConflict;
    public static string LinkTypeCannotBeModified;
    public static string LinkTypeHasBeenDeleted;
    public static string ErrorNoPermissions;
    public static string LinkTypeCannotBeDeleted;
    public static string ErrorWorkItemLinkTypeNotExist;
    public static string DifferentStores;
    public static string LinkNotFound2;
    public static string AddLinkCircularity2;
    public static string AddLinkAlreadyExists2;
    public static string AddLinkExtraParent2;
    public static string AddLinkExtraParent3;
    public static string ErrorBatchSaveNullWorkItem;
    public static string ErrorBatchSaveDuplicateWorkItem;
    public static string ErrorBatchSaveInvalidWorkitem;
    public static string ErrorLinkAlreadyAdded;
    public static string ErrorDuplicateExternalLink;
    public static string ErrorHyperLinkAlreadyAdded;
    public static string ErrorDuplicateHyperlink;
    public static string ErrorWorkItemLinkAlreadyAdded;
    public static string ErrorDuplicateWorkItemLink;
    public static string ErrorWorkItemLinkChangeTargetId;
    public static string ErrorWorkItemLinkChangeSourceId;
    public static string ErrorWorkItemLinkNeedTargetId;
    public static string ErrorWorkItemLinkOneOfIds;
    public static string ErrorWorkItemLinkToUndefined;
    public static string ErrorWorkItemNeedCollection;
    public static string ErrorWorkItemIsNotReadyToSave;
    public static string ErrorCantModifyIdField;
    public static string ErrorMalformedUri;
    public static string QueryLinksOnParamedQuery;
    public static string IncorrectEndAsyncQuery;
    public static string IncorrectWorkItemQueryMethod;
    public static string IncorrectLinkedWorkItemQueryMethod;
    public static string LinksControlDuplicateName;
    public static string LinksControlLinkColumnInvalidAttributes;
    public static string LinksControlLinkColumnDuplicateColumn;
    public static string LinksControlDuplicateFilterName;
    public static string LinksControlDuplicateWITFilterName;
    public static string LinksControlCannotContainLinksOptions;
    public static string LinksControlUnknownFilterName;
    public static string LinksControlLinkAttributeInvalid;
    public static string LinksControlAllFiltersCannotContainChildren;
    public static string LinksControlExcludeAllLinkTypesFiltersCannotContainWorkItemTypeFilters;
    public static string LinksControlNonDirectionalLinkWithFilterOn;
    public static string ErrorNullLinkInArray;
    public static string ErrorNoAreaWriteAccess;
    public static string QueryHierarchyTeamQueries;
    public static string QueryHierarchyMyQueries;
    public static string QueryHierarchyCannotAddSelfAsChild;
    public static string QueryHierarchyCannotAddDeletedItems;
    public static string QueryHierarchyCannotAddToDeletedFolder;
    public static string QueryHierarchyServerDoesNotSupportFolders;
    public static string QueryHierarchyServerDoesNotSupportPermissions;
    public static string IsEmptyValidWith;
    public static string QueryHierarchyCannotAddParentAsChild;
    public static string QueryHierarchyNameConflict;
    public static string ArgumentCannotBeEmpty;
    public static string QueryHierarchyQueryTextCannotBeEmpty;
    public static string QueryHierarchyAddingAcrossStoresProhibited;
    public static string QueryHierarchyRootNodesMayNotBeModified;
    public static string QueryHierarchyCannotModifyDeletedItems;
    public static string QueryHierarchyCannotDeleteDeletedItems;
    public static string QueryHierarchyCannotDeleteOrphanedItems;
    public static string QueryHierarchyMoveBetweenProjectsProhibited;
    public static string ErrorCannotImportWITNoPermissionToModifyFieldForAllProjects;
    public static string ErrorUnknownTypeInCategory;
    public static string ErrorDuplicateTypeInCategory;
    public static string ErrorInvalidXml;
    public static string ListSeparator;
    public static string ErrorControlLabelAttrMissing;
    public static string ErrorLinkParamsTooFew;
    public static string ErrorInvalidParam;
    public static string InvalidParamIndexError;
    public static string ParamIndexDuplicateError;
    public static string InvalidUrlRootFormat;
    public static string UnsupportedUriScheme;
    public static string UnsupportedUriSchemeWebpageControl;
    public static string WebpageControlInvalidAttributes;
    public static string ArgumentCannotBeNullOrEmpty;
    public static string ErrorFieldReportabilityChange;
    public static string ErrorFieldIndexingInvalidType;
    public static string ErrorInvalidProjectId;
    public static string ErrorMissingProjectScope;
    public static string ErrorGuidFieldsNotSupported;
    public static string ErrorBoolFieldsNotSupported;
    public static string ErrorRevisionQueriesNotSupported;
    public static string ErrorLinkLockingNotSupported;
    public static string ErrorComputedFieldInRevisionQuery;
    public static string ErrorDifferentProjectsInBatchSave;
    public static string ErrorFullTextService;
    public static string ErrorRenameSafeChanged;
    public static string ErrorRenameSafeNotValid;
    public static string ErrorGlobalWorkflowNotSupported;
    public static string IncorrectWorkItemState;
    public static string ErrorSavingWorkItemTagFailed;
    public static string ErrorImageNotFound;
    public static string ErrorImageUploadFailed;
    public static string ErrorDeleteFieldNoPermission;
    public static string ErrorDifferentFieldDefinitions;
    public static string FormatterQuery;
    public static string PredicateError;
    public static string PredicateErrorInvalidValueType;
    public static string PredicateErrorMissingFieldName;
    public static string ErrorDuplicateWorkItemTypeletID;
    public static string ErrorDuplicateWorkItemTypeletName;
    public static string ErrorWorkItemTypeletDoesNotExist;
    public static string SearchPageCancelled;
    public static string SearchPageExceededCharacterLimit;
    public static string SearchPageExceededTermLimit;
    public static string SearchPageFailed;
    public static string SearchPageFormatException;
    public static string SearchPageKeywordHelpTextWithoutRepro;
    public static string SearchPageKeywordHelpTextWithRepro;
    public static string SearchPageKeywordNotHelpTextWithoutRepro;
    public static string SearchPageKeywordNotHelpTextWithRepro;
    public static string ErrorSearchInvalidFieldName;
    public static string ErrorObseleteFeature;
    public static string ErrorIdentityFieldsNotSupported;
    public static string ErrorIdentityMustBeAGroup;
    public static string ErrorMissingIdentity;
    public static string ErrorOnlyIdentitiesAllowedInIdentityFields;
    public static string ErrorAddFileFileDoesNotExist;
    public static string WorkItemAttachmentIncorrectOffset;
    public static string ErrorWorkItemTypeNameNotUnique;
    public static string ErrorWorkItemTypeReferenceNameNotUnique;
    public static string ErrorInvalidWorkItemTypeReferenceName;
    public static string ErrorIdentityNotFound;
    public static string FieldTypeInvalid;
    public static string WebLayout_ControlTypeNotAllowed;
    public static string WebLayout_SystemControlTypeNotAllowed;
    public static string WebLayout_SystemControlNameDuplicated;
    public static string WebLayout_SystemControlFieldNameNotAllowed;
    public static string WebLayout_FieldNameNotAllowed;
    public static string WebLayout_ControlTypeOnlyAllowedInFirstSection;
    public static string WorkItemFormAttachments;
    public static string WorkItemFormHistory;
    public static string WorkItemFormLinks;
    public static string WebLayout_InvalidOrDuplicatedPageLabel;
    public static string WebLayout_InvalidOrDuplicatedGroupLabel;
    public static string WebLayout_InvalidControlsInGroup;
    public static string WebLayout_RequiredFieldsNotInBothLayouts;
    public static string WebLayout_DuplicateControlsInGroup;
    public static string WebLayoutLinksControlLinkColumnInvalidAttributes;
    public static string Control;
    public static string Group;
    public static string Page;
    public static string WebLayout_InvalidContributionType;
    public static string WebLayout_InvalidContributionInputValue;
    public static string WebLayout_InvalidContributionInputId;
    public static string WebLayout_InvalidContributionInputType;
    public static string WebLayout_ContributionInputNotSpecified;
    public static string WebLayout_ContributionNotFoundOrNotInListedExtensionsElement;
    public static string WebLayout_FormExtensionNotFoundOrNoFormContribution;
    public static string WebLayout_FormExtensionDoesNotHavePageGroupOrControlContribution;
    public static string WebLayout_UnsupportedAutoInjectionContributionType;
    public static string WebLayout_DuplicateGroupContributions;
    public static string WebLayout_DuplicatePageContributions;
    public static string WebLayout_FormExtensionNotDeclared;
    public static string MultipleControlsInLinksGroupException;
    public static string NewFormFirstPageTitle;
    public static string WebLayout_ControlHeightNotAllowed;
    public static string WorkItemFormDevelopment;
    public static string WorkItemFormRelatedWork;
    public static string ErrorGroupContainsAADGroupMember;
    public static string ErrorGroupContainsAADGroupSnippet;
    public static string ErrorGroupContainsAADGroupSnippetTeamProject;
    public static string ErrorReportabilityValidationFailed;
    public static string WebLayout_SystemControlReplacesFieldNotAllowed;
    public static string WebLayout_SystemControlReplacesFieldDuplicated;
    public static string WorkItemTypeListItemMustHaveValue;
    public static string DataImportWhitelistedLinksControlUnknownFilterName;
    public static string WebLayout_ControlNotRecognized;
    public static string WebLayout_SystemControlHiddenFieldNotAllowed;
    public static string ErrorGroupContainsADGroupMember;
    public static string FileDownloadExceededMaxBytes;
    public static string FileDownloadExceededMaxMb;
    public static string ErrorGroupIdentityNotFound;
    public static string RemoteLinkAddLockedLink;
    public static string AddRemoteLinkWhenPendingDelete;
    public static string InvalidContributionInputIdException;
    public static ResourceManager Manager { get; }
    private static InternalsResourceStrings();
    public static ResourceManager get_Manager();
    public static string Get(string resourceName);
    public static string Get(string resourceName, CultureInfo culture);
    public static int GetInt(string resourceName);
    public static int GetInt(string resourceName, CultureInfo culture);
    public static bool GetBool(string resourceName);
    public static bool GetBool(string resourceName, CultureInfo culture);
    public static string Format(string resourceName, Object[] args);
    public static string Format(string resourceName, CultureInfo culture, Object[] args);
}
public class Microsoft.TeamFoundation.WorkItemTracking.Internals.InternalWorkItemLinkInfo : object {
    [CompilerGeneratedAttribute]
private int <SourceId>k__BackingField;
    [CompilerGeneratedAttribute]
private int <TargetId>k__BackingField;
    [CompilerGeneratedAttribute]
private int <LinkTypeId>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsLocked>k__BackingField;
    public int SourceId { get; public set; }
    public int TargetId { get; public set; }
    public int LinkTypeId { get; public set; }
    public bool IsLocked { get; public set; }
    public InternalWorkItemLinkInfo(int sourceId, int targetId, int linkTypeId, bool isLocked);
    [CompilerGeneratedAttribute]
public int get_SourceId();
    [CompilerGeneratedAttribute]
public void set_SourceId(int value);
    [CompilerGeneratedAttribute]
public int get_TargetId();
    [CompilerGeneratedAttribute]
public void set_TargetId(int value);
    [CompilerGeneratedAttribute]
public int get_LinkTypeId();
    [CompilerGeneratedAttribute]
public void set_LinkTypeId(int value);
    [CompilerGeneratedAttribute]
public bool get_IsLocked();
    [CompilerGeneratedAttribute]
public void set_IsLocked(bool value);
}
[EditorBrowsableAttribute("1")]
public class Microsoft.TeamFoundation.WorkItemTracking.Internals.InternalWorkItemRelation : object {
    [CompilerGeneratedAttribute]
private int <SourceID>k__BackingField;
    [CompilerGeneratedAttribute]
private int <TargetID>k__BackingField;
    [CompilerGeneratedAttribute]
private int <LinkTypeID>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsLocked>k__BackingField;
    public int SourceID { get; public set; }
    public int TargetID { get; public set; }
    public int LinkTypeID { get; public set; }
    public bool IsLocked { get; public set; }
    public static int MissingID { get; }
    public InternalWorkItemRelation(int sourceId, int targetId, int linkTypeId, bool isLocked);
    [CompilerGeneratedAttribute]
public sealed virtual int get_SourceID();
    [CompilerGeneratedAttribute]
public sealed virtual void set_SourceID(int value);
    [CompilerGeneratedAttribute]
public sealed virtual int get_TargetID();
    [CompilerGeneratedAttribute]
public sealed virtual void set_TargetID(int value);
    [CompilerGeneratedAttribute]
public sealed virtual int get_LinkTypeID();
    [CompilerGeneratedAttribute]
public sealed virtual void set_LinkTypeID(int value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_IsLocked();
    [CompilerGeneratedAttribute]
public sealed virtual void set_IsLocked(bool value);
    public static int get_MissingID();
}
[DefaultMemberAttribute("Item")]
[EditorBrowsableAttribute("1")]
public interface Microsoft.TeamFoundation.WorkItemTracking.Internals.IRowSetCollectionHelper {
    public IRowSetHelper Item { get; }
    public abstract virtual IRowSetHelper get_Item(string name);
}
[EditorBrowsableAttribute("1")]
public interface Microsoft.TeamFoundation.WorkItemTracking.Internals.IRowSetCollectionHelper2 {
    public abstract virtual bool TryGetRowSet(string name, IRowSetHelper& rowset);
}
[DefaultMemberAttribute("Item")]
[EditorBrowsableAttribute("1")]
public interface Microsoft.TeamFoundation.WorkItemTracking.Internals.IRowSetHelper {
    public int RowCount { get; }
    public int ColumnCount { get; }
    public string Item { get; }
    public object Item { get; }
    public object Item { get; }
    public abstract virtual int get_RowCount();
    public abstract virtual int get_ColumnCount();
    public abstract virtual string get_Item(int column);
    public abstract virtual object get_Item(int row, int column);
    public abstract virtual object get_Item(int row, string column);
}
[EditorBrowsableAttribute("1")]
public interface Microsoft.TeamFoundation.WorkItemTracking.Internals.IWiqlAdapterHelper {
    public CultureInfo CultureInfo { get; }
    public TimeZone TimeZone { get; }
    public string UserDisplayName { get; }
    public abstract virtual CultureInfo get_CultureInfo();
    public abstract virtual TimeZone get_TimeZone();
    public abstract virtual string get_UserDisplayName();
    public abstract virtual int GetTreeID(string path, TreeStructureType type);
    public abstract virtual bool IsSupported(string feature);
    public abstract virtual object FindField(string name, string prefix, object tableTag);
    public abstract virtual int GetFieldId(object fieldTag);
    public abstract virtual string GetFieldReferenceName(object fieldTag);
    public abstract virtual string GetFieldFriendlyName(object fieldTag);
    public abstract virtual bool GetFieldIsQueryable(object fieldTag);
    public abstract virtual bool GetFieldCanSortBy(object fieldTag);
    public abstract virtual InternalFieldUsages GetFieldUsage(object fieldTag);
    public abstract virtual InternalFieldType GetFieldType(object fieldTag);
    public abstract virtual Type GetFieldSystemType(object fieldTag);
    public abstract virtual bool GetFieldSupportsTextQuery(object fieldTag);
    public abstract virtual bool GetFieldIsLongText(object fieldTag);
    public abstract virtual string GetFieldFriendlyName(string fieldName);
    public abstract virtual int GetFieldPsFieldType(string fieldName);
    public abstract virtual InternalFieldType GetFieldType(string fieldName);
    public abstract virtual bool HasLinkType(string linkTypeName);
    public abstract virtual int GetLinkTypeId(string linkTypeName);
    public abstract virtual bool GetLinkTypeIsForward(string linkTypeName);
    public abstract virtual int GetLinkTypeTopology(string linkTypeName);
    public abstract virtual IEnumerable`1<int> GetAllLinkTypeIds();
    public abstract virtual List`1<object> GetSortFieldList(NodeSelect nodeSelect);
    public abstract virtual List`1<object> GetDisplayFieldList(NodeSelect nodeSelect);
    public abstract virtual void SetDisplayFieldList(NodeSelect nodeSelect, IEnumerable`1<object> list);
    public abstract virtual void SetSortFieldList(NodeSelect nodeSelect, IEnumerable`1<object> list);
    public abstract virtual DataType GetVariableType(string name);
    public abstract virtual object GetVariableValue(string name, NodeParameters parameters);
    public abstract virtual bool RewriteCondition(NodeCondition condition, Node& rewritten);
    public abstract virtual bool DoesMacroExtensionHandleOffset(string macroName);
    public abstract virtual bool IsSupportedMacro(string name);
    public abstract virtual void ValidateParameters(string macroName, NodeTableName tableContext, NodeFieldName fieldContext, NodeParameters parameters);
}
[EditorBrowsableAttribute("1")]
public interface Microsoft.TeamFoundation.WorkItemTracking.Internals.IWorkItemOpenFieldDataHelper {
    public abstract virtual void SetLatestData(Dictionary`2<int, object> latestData);
    public abstract virtual void SetRevisionData(List`1<Dictionary`2<int, object>> revisionData);
    public abstract virtual int GetFieldId(string fieldName);
    public abstract virtual bool HasField(int fieldId);
}
[EditorBrowsableAttribute("1")]
public interface Microsoft.TeamFoundation.WorkItemTracking.Internals.IWorkItemRelation {
    public int SourceID { get; public set; }
    public int TargetID { get; public set; }
    public int LinkTypeID { get; public set; }
    public bool IsLocked { get; public set; }
    public abstract virtual int get_SourceID();
    public abstract virtual void set_SourceID(int value);
    public abstract virtual int get_TargetID();
    public abstract virtual void set_TargetID(int value);
    public abstract virtual int get_LinkTypeID();
    public abstract virtual void set_LinkTypeID(int value);
    public abstract virtual bool get_IsLocked();
    public abstract virtual void set_IsLocked(bool value);
}
[EditorBrowsableAttribute("1")]
public interface Microsoft.TeamFoundation.WorkItemTracking.Internals.IWorkItemSaveFieldDataHelper {
    public string UserDisplayName { get; }
    public bool IsDirty { get; }
    public Dictionary`2<int, object> FieldUpdates { get; }
    public abstract virtual string get_UserDisplayName();
    public abstract virtual bool get_IsDirty();
    public abstract virtual bool HasField(int fieldId);
    public abstract virtual Dictionary`2<int, object> get_FieldUpdates();
    public abstract virtual bool IsLongTextField(int fieldId);
    public abstract virtual string GetFieldReferenceName(int fieldId);
    public abstract virtual string GetFieldName(int fieldId);
    public abstract virtual Type GetFieldSystemType(int fieldId);
}
[EditorBrowsableAttribute("1")]
public interface Microsoft.TeamFoundation.WorkItemTracking.Internals.IWorkItemSaveLinkDataHelper {
    public IEnumerable`1<LinkInfo> DeletedLinks { get; }
    public IEnumerable`1<LinkInfo> AddedLinks { get; }
    public IEnumerable`1<KeyValuePair`2<LinkInfo, LinkUpdate>> UpdatedLinks { get; }
    public abstract virtual IEnumerable`1<LinkInfo> get_DeletedLinks();
    public abstract virtual IEnumerable`1<LinkInfo> get_AddedLinks();
    public abstract virtual IEnumerable`1<KeyValuePair`2<LinkInfo, LinkUpdate>> get_UpdatedLinks();
    public abstract virtual void ResetWorkItemLinkInfo();
    public abstract virtual void AddWorkItemLinkInfo(WorkItemLinkInfo link);
}
[EditorBrowsableAttribute("1")]
public abstract class Microsoft.TeamFoundation.WorkItemTracking.Internals.LinkInfo : object {
    public DateTime AddedDate;
    public DateTime RemovedDate;
    [CompilerGeneratedAttribute]
private string <Comment>k__BackingField;
    [CompilerGeneratedAttribute]
private int <FieldId>k__BackingField;
    private Nullable`1<DateTime> m_authorizedAddedDate;
    private Nullable`1<DateTime> m_authorizedRemovedDate;
    public string Comment { get; public set; }
    public int FieldId { get; public set; }
    public DateTime AuthorizedAddedDate { get; public set; }
    public DateTime AuthorizedRemovedDate { get; public set; }
    protected LinkInfo(LinkInfo link);
    [CompilerGeneratedAttribute]
public string get_Comment();
    [CompilerGeneratedAttribute]
public void set_Comment(string value);
    [CompilerGeneratedAttribute]
public int get_FieldId();
    [CompilerGeneratedAttribute]
public void set_FieldId(int value);
    public DateTime get_AuthorizedAddedDate();
    public void set_AuthorizedAddedDate(DateTime value);
    public DateTime get_AuthorizedRemovedDate();
    public void set_AuthorizedRemovedDate(DateTime value);
}
[FlagsAttribute]
[EditorBrowsableAttribute("1")]
public enum Microsoft.TeamFoundation.WorkItemTracking.Internals.LinkProperties : Enum {
    public int value__;
    public static LinkProperties None;
    public static LinkProperties Comment;
    public static LinkProperties IsLocked;
}
[EditorBrowsableAttribute("1")]
public enum Microsoft.TeamFoundation.WorkItemTracking.Internals.LinkQueryMode : Enum {
    public int value__;
    public static LinkQueryMode Unknown;
    public static LinkQueryMode WorkItems;
    public static LinkQueryMode LinksMustContain;
    public static LinkQueryMode LinksMayContain;
    public static LinkQueryMode LinksDoesNotContain;
    public static LinkQueryMode LinksRecursive;
    public static LinkQueryMode LinksRecursiveReturnMatchingChildren;
}
[EditorBrowsableAttribute("1")]
public class Microsoft.TeamFoundation.WorkItemTracking.Internals.LinkUpdate : object {
    private LinkProperties m_supported;
    private LinkProperties m_mask;
    private string m_comment;
    private bool m_isLocked;
    public LinkProperties Mask { get; }
    public string Comment { get; public set; }
    public bool IsLocked { get; public set; }
    public LinkUpdate(LinkProperties supported);
    public LinkProperties get_Mask();
    public string get_Comment();
    public void set_Comment(string value);
    public bool get_IsLocked();
    public void set_IsLocked(bool value);
    public void Submit(XmlElement element);
    public void Submit(LinkInfo li);
    private void CheckSupport(LinkProperties props);
}
[EditorBrowsableAttribute("1")]
public static class Microsoft.TeamFoundation.WorkItemTracking.Internals.QueryHelper : object {
    public static List`1<InternalWorkItemRelation> ConvertLinkQueryResult(XmlElement resultsElement);
    public static List`1<InternalWorkItemLinkInfo> SortAndConvert(List`1<IWorkItemRelation> links, bool isTreeQuery, Nullable`1<bool> sortFlag);
    public static List`1<int> ConvertRegularQueryResult(XmlElement resultsElement);
}
[EditorBrowsableAttribute("1")]
public static class Microsoft.TeamFoundation.WorkItemTracking.Internals.QueryItemHelper : object {
    private static Char[] InvalidNameChars;
    private static QueryItemHelper();
    private static void AddTextNode(XmlElement node, string name, string text);
    private static XmlElement CreateQueryItemActionNode(XmlElement node, string action, Guid id);
    public static void Create(XmlElement node, Guid id, Guid parentId, string name, string queryText, string ownerIdentifier, string ownerType);
    public static void Update(XmlElement node, Guid id, Guid parentId, string name, string queryText, string ownerIdentifier, string ownerType);
    private static void UpdateInternal(XmlElement actionNode, Guid parentId, string name, string queryText, string ownerIdentifier, string ownerType);
    public static void Delete(XmlElement node, Guid id);
    public static string CheckNameIsValid(string name);
    public static void ValidateWiql(WiqlAdapter wiqlAdapter, string queryText);
    public static XmlNodeList GetQueryTextNodes(XmlElement node);
}
[EditorBrowsableAttribute("1")]
public static class Microsoft.TeamFoundation.WorkItemTracking.Internals.QueryXmlConstants : object {
    public static string Wiql;
    public static string Context;
    public static string Key;
    public static string Value;
    public static string DayPrecision;
    public static string ValueType;
    private static QueryXmlConstants();
}
[EditorBrowsableAttribute("1")]
public static class Microsoft.TeamFoundation.WorkItemTracking.Internals.Replication : object {
    public static string ReplicationEnabledHttpHeader;
    public static string ReplicationEnabledHttpHeaderValue;
    public static string ReplicationHttpHeaderPrefix;
    public static string ReplicationWitHttpHeaderName;
}
public enum Microsoft.TeamFoundation.WorkItemTracking.Internals.TreeStructureType : Enum {
    public int value__;
    public static TreeStructureType None;
    public static TreeStructureType Area;
    public static TreeStructureType Iteration;
}
[EditorBrowsableAttribute("1")]
public class Microsoft.TeamFoundation.WorkItemTracking.Internals.WiqlAdapter : object {
    private IWiqlAdapterHelper m_helper;
    private IDictionary m_context;
    private bool m_dayPrecision;
    private bool m_isAtTodayClause;
    private bool m_isDateBasedMacro;
    private static string c_me;
    private static string c_today;
    private static string c_project;
    private static string c_team;
    private static DateTime s_startOfLastDay;
    private static String[] s_Operators;
    public bool DayPrecision { get; public set; }
    public IDictionary Context { get; public set; }
    public CultureInfo CultureInfo { get; }
    public TimeZone TimeZone { get; }
    public static string Me { get; }
    public static string Today { get; }
    public static string Project { get; }
    public static string Team { get; }
    public WiqlAdapter(IWiqlAdapterHelper helper);
    private static WiqlAdapter();
    public bool get_DayPrecision();
    public void set_DayPrecision(bool value);
    public IDictionary get_Context();
    public void set_Context(IDictionary value);
    public sealed virtual CultureInfo get_CultureInfo();
    public sealed virtual TimeZone get_TimeZone();
    public static string get_Me();
    public static string get_Today();
    public static string get_Project();
    public static string get_Team();
    private int GetTreeID(string path, TreeStructureType type);
    public sealed virtual object FindTable(string name);
    public virtual object FindField(string name, string prefix, object tableTag);
    public sealed virtual DataType GetFieldDataType(object fieldTag);
    public sealed virtual object FindVariable(string name, NodeParameters parameters);
    public sealed virtual void ValidateParameters(string macroName, NodeTableName tableContext, NodeFieldName fieldContext, NodeParameters parameters);
    public sealed virtual DataType GetVariableDataType(string name);
    public sealed virtual bool DoesMacroExtensionHandleOffset(string macroName);
    private bool IsListNodeNumber(object val);
    private bool IsListNodeString(object val);
    private void VerifyCondition(NodeFieldName left, Node right, Condition op, Node errorNode, LinkQueryMode mode);
    public sealed virtual void VerifyNode(Node node, NodeTableName tableContext, NodeFieldName fieldContext);
    public sealed virtual Node OptimizeNode(Node node, NodeTableName tableContext, NodeFieldName fieldContext);
    private string GetConditionalOperator(int c, bool not, bool ever, Node errorNode);
    private XmlElement QueryXml(Node node, XmlDocument doc, bool not, bool ever, bool num);
    public Dictionary`2<int, bool> ComputeLinkTypes(Node node);
    private DateTime ConvertDateTimeToUtc(DateTime source);
    public DateTime GetAsOfUtc(NodeSelect nodeSelect);
    public XmlElement GetQueryXml(NodeSelect nodeSelect);
    public XmlElement GetQueryXml(string wiql, IDictionary context, bool isLinkQuery, bool dayPrecision);
    private string GetContextValueType(object val);
    public XmlElement GetLinkQueryXml(NodeSelect nodeSelect, NodeAndOperator& linkGroup);
    public NodeAndOperator GetLinkGroup(NodeSelect nodeSelect);
    public List`1<object> GetDisplayFieldList(NodeSelect nodeSelect);
    public List`1<object> GetSortFieldList(NodeSelect nodeSelect);
    public void SetDisplayFieldList(NodeSelect nodeSelect, IEnumerable`1<object> list);
    public void SetSortFieldList(NodeSelect nodeSelect, IEnumerable`1<object> list);
    public static bool IsNonNullableField(int fieldId);
    private static LinkQueryMode GetQueryMode(NodeTableName tableContext);
    private static LinkQueryMode GetQueryMode(NodeMode nodeMode, NodeTableName tableContext);
    public static LinkQueryMode GetQueryMode(NodeSelect nodeSelect);
}
[EditorBrowsableAttribute("1")]
public abstract class Microsoft.TeamFoundation.WorkItemTracking.Internals.WiqlConstants : object {
    public static string WorkItemTable;
    public static string WorkItemLinkTable;
    public static string SourcePrefix;
    public static string TargetPrefix;
    public static string MustContain;
    public static string MayContain;
    public static string DoesNotContain;
    public static string Recursive;
    public static string ReturnMatchingChild;
}
[EditorBrowsableAttribute("1")]
public static class Microsoft.TeamFoundation.WorkItemTracking.Internals.WorkItemExternalEventConstants : object {
    public static string WorkRestAreaName;
    public static string WorkRestResourceEvents;
    public static string WorkRestResourceEventsGuidString;
    public static Guid WorkRestResourceEventsGuid;
    private static WorkItemExternalEventConstants();
}
[EditorBrowsableAttribute("1")]
[GenerateAllConstantsAttribute("")]
public static class Microsoft.TeamFoundation.WorkItemTracking.Internals.WorkItemFormContributionProperties : object {
    public static string ShowOnDeletedWorkItem;
    public static string Height;
    public static string Name;
    public static string Inputs;
    public static string InputId;
    public static string InputRequired;
    public static string InputMode;
    public static string InputValidation;
    public static string InputDataType;
    public static string InputDescription;
    public static string InputType;
    public static string InputProperties;
    public static string InputType_WorkItemField;
    public static string FieldType;
    public static string InputProperties_WorkItemFieldTypes;
}
[EditorBrowsableAttribute("1")]
[GenerateAllConstantsAttribute("")]
public static class Microsoft.TeamFoundation.WorkItemTracking.Internals.WorkItemFormExtensionsConstants : object {
    public static int ContributionDefaultHeight_Group;
    public static int ContributionDefaultHeight_Control;
    public static string ContributionTarget_Form;
    public static string ContributionType_Page;
    public static string ContributionType_Group;
    public static string ContributionType_Control;
    public static string ContributionType_Notifications;
    public static String[] ValidFormContributionTypes;
    public static string ProjectAdminGroupCache;
    private static WorkItemFormExtensionsConstants();
}
[EditorBrowsableAttribute("1")]
public static class Microsoft.TeamFoundation.WorkItemTracking.Internals.WorkItemHelper : object {
    [EditorBrowsableAttribute("1")]
public static bool LoadWorkItemFieldData(IRowSetCollectionHelper2 tables, IWorkItemOpenFieldDataHelper helper);
    [EditorBrowsableAttribute("1")]
public static bool LoadWorkItemFieldData(IRowSetCollectionHelper tables, IWorkItemOpenFieldDataHelper helper);
    private static List`1<Dictionary`2<int, object>> LoadRevisions(IRowSetCollectionHelper tables, IWorkItemOpenFieldDataHelper helper, Dictionary`2<int, object> latestData);
    [IteratorStateMachineAttribute("Microsoft.TeamFoundation.WorkItemTracking.Internals.WorkItemHelper/<ReadTable>d__4")]
private static IEnumerable`1<Dictionary`2<int, object>> ReadTable(IRowSetHelper rowset, IWorkItemOpenFieldDataHelper helper, bool isLatest);
    private static Dictionary`2<int, object> ReadRow(IRowSetHelper rowset, IWorkItemOpenFieldDataHelper helper, bool isLatest, int row);
    private static int FindRevisionIndexByDate(int trackTimeFieldId, List`1<Dictionary`2<int, object>> revisions, Dictionary`2<int, object> latestData, DateTime dt, int startIndex);
    [ObsoleteAttribute("Do not use this method. This is deprecated.")]
public static XmlElement GenerateWorkItemUpdatePackage(XmlDocument xdoc, int id, int rev, int tempId, IWorkItemSaveFieldDataHelper fHelper, IWorkItemSaveLinkDataHelper lHelper, bool mergeLinks, List`1& xlinks, IEnumerable`1<Guid> addedTags, IEnumerable`1<Guid> removedTags);
    [ObsoleteAttribute("Do not use this method. This is deprecated.")]
public static XmlElement GenerateWorkItemUpdatePackage(XmlDocument xdoc, int id, int rev, int tempId, IWorkItemSaveFieldDataHelper fHelper, IWorkItemSaveLinkDataHelper lHelper, bool mergeLinks, List`1& xlinks, IEnumerable`1<Guid> addedTags, IEnumerable`1<Guid> removedTags, ClientCapabilities capabilities);
    private static void AddTags(XmlElement element, IEnumerable`1<Guid> tags);
    public static XmlElement GenerateWorkItemUpdatePackage(XmlDocument xdoc, int id, int rev, int tempId, IWorkItemSaveFieldDataHelper fHelper, IWorkItemSaveLinkDataHelper lHelper, bool mergeLinks, List`1& xlinks);
    public static XmlElement GenerateWorkItemUpdatePackage(XmlDocument xdoc, int id, int rev, int tempId, IWorkItemSaveFieldDataHelper fHelper, IWorkItemSaveLinkDataHelper lHelper, bool mergeLinks, List`1& xlinks, ClientCapabilities capabilities);
    private static string ConvertToXml(object value, String& packageType);
    private static void AddColumn(XmlElement element, string colName, string type, string value);
}
[EditorBrowsableAttribute("1")]
public class Microsoft.TeamFoundation.WorkItemTracking.Internals.WorkItemLinkInfo : LinkInfo {
    [CompilerGeneratedAttribute]
private int <LinkType>k__BackingField;
    [CompilerGeneratedAttribute]
private int <SourceId>k__BackingField;
    [CompilerGeneratedAttribute]
private int <TargetId>k__BackingField;
    public int AddedBy;
    public int RemovedBy;
    [CompilerGeneratedAttribute]
private bool <IsLocked>k__BackingField;
    public int LinkType { get; public set; }
    public int SourceId { get; public set; }
    public int TargetId { get; public set; }
    public bool IsLocked { get; public set; }
    public WorkItemLinkInfo(WorkItemLinkInfo link);
    [CompilerGeneratedAttribute]
public int get_LinkType();
    [CompilerGeneratedAttribute]
public void set_LinkType(int value);
    [CompilerGeneratedAttribute]
public int get_SourceId();
    [CompilerGeneratedAttribute]
public void set_SourceId(int value);
    [CompilerGeneratedAttribute]
public int get_TargetId();
    [CompilerGeneratedAttribute]
public void set_TargetId(int value);
    [CompilerGeneratedAttribute]
public bool get_IsLocked();
    [CompilerGeneratedAttribute]
public void set_IsLocked(bool value);
    public virtual int GetHashCode();
    public virtual bool Equals(object obj);
    public static bool op_Equality(WorkItemLinkInfo workItemLinkInfo1, WorkItemLinkInfo workItemLinkInfo2);
    public static bool op_Inequality(WorkItemLinkInfo workItemLinkInfo1, WorkItemLinkInfo workItemLinkInfo2);
    private bool EqualsInternal(WorkItemLinkInfo other);
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("2")]
internal class System.Runtime.CompilerServices.RefSafetyRulesAttribute : Attribute {
    public int Version;
    public RefSafetyRulesAttribute(int );
}
