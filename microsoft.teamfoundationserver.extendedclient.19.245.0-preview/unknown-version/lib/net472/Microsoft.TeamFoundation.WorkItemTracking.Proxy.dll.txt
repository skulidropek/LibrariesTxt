[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
public class Microsoft.TeamFoundation.WorkItemTracking.Proxy.AccessControlEntryData : object {
    private int m_allow;
    private int m_deny;
    private IdentityDescriptorData m_descriptor;
    private AccessControlEntryExtendedData m_extendedInfo;
    public int Allow { get; public set; }
    public int Deny { get; public set; }
    public IdentityDescriptorData Descriptor { get; public set; }
    public AccessControlEntryExtendedData ExtendedInfo { get; public set; }
    public int get_Allow();
    public void set_Allow(int value);
    public int get_Deny();
    public void set_Deny(int value);
    public IdentityDescriptorData get_Descriptor();
    public void set_Descriptor(IdentityDescriptorData value);
    public AccessControlEntryExtendedData get_ExtendedInfo();
    public void set_ExtendedInfo(AccessControlEntryExtendedData value);
    [EditorBrowsableAttribute("1")]
public static AccessControlEntryData FromXml(IServiceProvider serviceProvider, XmlReader reader);
    public virtual string ToString();
    [EditorBrowsableAttribute("1")]
public void ToXml(XmlWriter writer, string element);
    [EditorBrowsableAttribute("1")]
public static void ToXml(XmlWriter writer, string element, AccessControlEntryData obj);
}
public class Microsoft.TeamFoundation.WorkItemTracking.Proxy.AccessControlEntryExtendedData : object {
    private int m_effectiveAllow;
    private int m_effectiveDeny;
    private int m_inheritedAllow;
    private int m_inheritedDeny;
    public int EffectiveAllow { get; public set; }
    public int EffectiveDeny { get; public set; }
    public int InheritedAllow { get; public set; }
    public int InheritedDeny { get; public set; }
    public int get_EffectiveAllow();
    public void set_EffectiveAllow(int value);
    public int get_EffectiveDeny();
    public void set_EffectiveDeny(int value);
    public int get_InheritedAllow();
    public void set_InheritedAllow(int value);
    public int get_InheritedDeny();
    public void set_InheritedDeny(int value);
    [EditorBrowsableAttribute("1")]
public static AccessControlEntryExtendedData FromXml(IServiceProvider serviceProvider, XmlReader reader);
    public virtual string ToString();
    [EditorBrowsableAttribute("1")]
public void ToXml(XmlWriter writer, string element);
    [EditorBrowsableAttribute("1")]
public static void ToXml(XmlWriter writer, string element, AccessControlEntryExtendedData obj);
}
public class Microsoft.TeamFoundation.WorkItemTracking.Proxy.AccessControlListMetadata : object {
    private string m_fullSelectionPermission;
    internal String[] m_irrevocableAdminPermissions;
    private string m_objectClassId;
    internal String[] m_permissionDescriptions;
    internal String[] m_permissionDisplayStrings;
    internal String[] m_permissionNames;
    internal RequiredPermissions[] m_permissionRequirements;
    public string FullSelectionPermission { get; public set; }
    public String[] IrrevocableAdminPermissions { get; public set; }
    public string ObjectClassId { get; public set; }
    public String[] PermissionDescriptions { get; public set; }
    public String[] PermissionDisplayStrings { get; public set; }
    public String[] PermissionNames { get; public set; }
    public RequiredPermissions[] PermissionRequirements { get; public set; }
    public string get_FullSelectionPermission();
    public void set_FullSelectionPermission(string value);
    public String[] get_IrrevocableAdminPermissions();
    public void set_IrrevocableAdminPermissions(String[] value);
    public string get_ObjectClassId();
    public void set_ObjectClassId(string value);
    public String[] get_PermissionDescriptions();
    public void set_PermissionDescriptions(String[] value);
    public String[] get_PermissionDisplayStrings();
    public void set_PermissionDisplayStrings(String[] value);
    public String[] get_PermissionNames();
    public void set_PermissionNames(String[] value);
    public RequiredPermissions[] get_PermissionRequirements();
    public void set_PermissionRequirements(RequiredPermissions[] value);
    [EditorBrowsableAttribute("1")]
public static AccessControlListMetadata FromXml(IServiceProvider serviceProvider, XmlReader reader);
    public virtual string ToString();
    [EditorBrowsableAttribute("1")]
public void ToXml(XmlWriter writer, string element);
    [EditorBrowsableAttribute("1")]
public static void ToXml(XmlWriter writer, string element, AccessControlListMetadata obj);
}
public class Microsoft.TeamFoundation.WorkItemTracking.Proxy.ArtifactWorkItemIds : object {
    private int m_uriListOffset;
    private Int32[] m_workItemIds;
    private string m_uri;
    public int UriListOffset { get; public set; }
    public string Uri { get; }
    private static int IntFromXml(XmlReader reader);
    private static string StringFromXml(XmlReader reader);
    private static Int32[] IntArrayFromXml(XmlReader reader);
    public Int32[] GetWorkItemIds();
    public int get_UriListOffset();
    public void set_UriListOffset(int value);
    public string get_Uri();
    public sealed virtual void ReadXml(XmlReader reader, string xmlElement);
    public sealed virtual void WriteXml(XmlWriter writer, string xmlElement);
}
internal class Microsoft.TeamFoundation.WorkItemTracking.Proxy.ClientService : TfsHttpClient {
    private Nullable`1<int> m_timeout;
    private ITfsRequestListener m_tfsRequestlistener;
    protected string ComponentName { get; }
    protected Guid CollectionServiceIdentifier { get; }
    protected string ServiceType { get; }
    public ClientService(TfsTeamProjectCollection connection);
    protected virtual string get_ComponentName();
    internal void SetTimeout(int timeout);
    protected virtual TfsRequestSettings ApplyCustomSettings(TfsRequestSettings settings);
    internal void InitRequestListener(ITfsRequestListener listener);
    protected virtual void OnAfterReceiveReply(long requestId, string methodName, HttpWebResponse response);
    protected virtual void OnBeforeSendRequest(long requestId, string methodName, HttpWebRequest request);
    protected virtual Guid get_CollectionServiceIdentifier();
    protected virtual string get_ServiceType();
    public bool BulkUpdate(XmlNode package, XmlNode& result, MetadataTableHaveEntry[] metadataHave, String& dbStamp, RowSetCollection& metadata);
    public void GetMetadata(MetadataTableHaveEntry[] metadataHave, bool useMaster, RowSetCollection& metadata, String& dbStamp, Int32& locale, Int32& comparisonStyle, String& callerIdentity);
    public void GetMetadataEx(MetadataTableHaveEntry[] metadataHave, bool useMaster, RowSetCollection& metadata, String& dbStamp, Int32& locale, Int32& comparisonStyle, String& callerIdentity, String& callerIdentitySid);
    public void GetMetadataEx2(MetadataTableHaveEntry[] metadataHave, bool useMaster, RowSetCollection& metadata, String& dbStamp, Int32& locale, Int32& comparisonStyle, Int32& mode);
    public String[] GetReferencingWorkitemUris(string artifactUri);
    public void GetStoredQueries(long rowVersion, int projectId, RowSetCollection& queriesPayload);
    public void GetStoredQuery(Guid queryId, RowSetCollection& queryPayload);
    public void GetWorkItem(int workItemId, int revisionId, int minimumRevisionId, Nullable`1<DateTime> asOfDate, bool useMaster, RowSetCollection& workItem, MetadataTableHaveEntry[] metadataHave, String& dbStamp, RowSetCollection& metadata);
    public string GetWorkitemTrackingVersion();
    public void PageItemsOnBehalfOf(string userName, Int32[] ids, String[] columns, RowSetCollection& items);
    public void PageWorkitemsByIdRevs(IdRevisionPair[] pairs, String[] columns, Int32[] longTextColumns, Nullable`1<DateTime> asOfDate, DateTime& pageDate, bool useMaster, RowSetCollection& items);
    public void PageWorkitemsByIds(Int32[] ids, String[] columns, Int32[] longTextColumns, Nullable`1<DateTime> asOfDate, bool useMaster, RowSetCollection& items, MetadataTableHaveEntry[] metadataHave, RowSetCollection& metadata);
    public void QueryWorkitemCount(XmlNode psQuery, bool useMaster, Int32& count, DateTime& asOfDate, MetadataTableHaveEntry[] metadataHave, String& dbStamp, RowSetCollection& metadata);
    public void QueryWorkitemCountOnBehalfOf(string userName, XmlNode query, Int32& count);
    public void QueryWorkitems(XmlNode psQuery, QuerySortOrderEntry[] sort, bool useMaster, XmlNode& resultIds, DateTime& asOfDate, MetadataTableHaveEntry[] metadataHave, String& dbStamp, RowSetCollection& metadata);
    public void RequestCancel(string requestIdToCancel);
    public void StampWorkitemCache();
    public void SyncAccessControlLists(string projectURI);
    public void SyncBisGroupsAndUsers(string projectUri);
    public void SyncExternalStructures(string projectURI);
    public void Update(XmlNode package, XmlNode& result, MetadataTableHaveEntry[] metadataHave, String& dbStamp, RowSetCollection& metadata);
}
internal class Microsoft.TeamFoundation.WorkItemTracking.Proxy.ClientService2 : ClientService {
    protected Guid CollectionServiceIdentifier { get; }
    protected string ServiceType { get; }
    public ClientService2(TfsTeamProjectCollection connection);
    protected virtual Guid get_CollectionServiceIdentifier();
    protected virtual string get_ServiceType();
    public void GetStoredQueryItems(long rowVersion, int projectId, RowSetCollection& queryItemsPayload);
}
internal class Microsoft.TeamFoundation.WorkItemTracking.Proxy.ClientService3 : ClientService2 {
    protected Guid CollectionServiceIdentifier { get; }
    protected string ServiceType { get; }
    public ClientService3(TfsTeamProjectCollection connection);
    public void GetMetadata(MetadataTableHaveEntry[] metadataHave, bool useMaster, RowSetCollection& metadata, String& dbStamp, Int32& locale, Int32& comparisonStyle, String& callerIdentity);
    public void GetMetadataEx(MetadataTableHaveEntry[] metadataHave, bool useMaster, RowSetCollection& metadata, String& dbStamp, Int32& locale, Int32& comparisonStyle, String& callerIdentity, String& callerIdentitySid);
    protected virtual Guid get_CollectionServiceIdentifier();
    protected virtual string get_ServiceType();
    public WorkItemId[] GetChangedWorkItemIds(long rowVersion);
    public WorkItemId[] GetDestroyedWorkItemIds(long rowVersion);
    public ExtendedAccessControlListData GetStoredQueryItemAccessControlList(Guid queryItemId, bool getMetadata);
    public WorkItemLinkChange[] GetWorkItemLinkChanges(long rowVersion);
}
internal class Microsoft.TeamFoundation.WorkItemTracking.Proxy.ClientService4 : ClientService3 {
    protected Guid CollectionServiceIdentifier { get; }
    protected string ServiceType { get; }
    public ClientService4(TfsTeamProjectCollection connection);
    protected virtual Guid get_CollectionServiceIdentifier();
    protected virtual string get_ServiceType();
}
internal class Microsoft.TeamFoundation.WorkItemTracking.Proxy.ClientService5 : ClientService4 {
    protected Guid CollectionServiceIdentifier { get; }
    protected string ServiceType { get; }
    public ClientService5(TfsTeamProjectCollection connection);
    protected virtual Guid get_CollectionServiceIdentifier();
    protected virtual string get_ServiceType();
    public void DestroyAttachments(Int32[] workItemIds);
    public ConstantRecord[] GetConstantRecords(String[] searchValues, ConstantRecordSearchFactor searchFactor);
}
internal class Microsoft.TeamFoundation.WorkItemTracking.Proxy.ClientService6 : ClientService5 {
    protected Guid CollectionServiceIdentifier { get; }
    protected string ServiceType { get; }
    public ClientService6(TfsTeamProjectCollection connection);
    protected virtual Guid get_CollectionServiceIdentifier();
    protected virtual string get_ServiceType();
}
internal class Microsoft.TeamFoundation.WorkItemTracking.Proxy.ClientService7 : ClientService6 {
    protected Guid CollectionServiceIdentifier { get; }
    protected string ServiceType { get; }
    public ClientService7(TfsTeamProjectCollection connection);
    protected virtual Guid get_CollectionServiceIdentifier();
    protected virtual string get_ServiceType();
}
internal class Microsoft.TeamFoundation.WorkItemTracking.Proxy.ClientService8 : ClientService7 {
    protected Guid CollectionServiceIdentifier { get; }
    protected string ServiceType { get; }
    public ClientService8(TfsTeamProjectCollection connection);
    protected virtual Guid get_CollectionServiceIdentifier();
    protected virtual string get_ServiceType();
}
internal class Microsoft.TeamFoundation.WorkItemTracking.Proxy.ClientServiceStreamingProxy : TfsHttpClient {
    private static Guid s_collectionServiceIdentifier;
    protected string ComponentName { get; }
    protected string ServiceType { get; }
    protected Guid CollectionServiceIdentifier { get; }
    public ClientServiceStreamingProxy(TfsTeamProjectCollection tfs);
    private static ClientServiceStreamingProxy();
    protected virtual string get_ComponentName();
    protected virtual string get_ServiceType();
    protected virtual Guid get_CollectionServiceIdentifier();
    public void GetWorkItemIdsForArtifactUris(IClientContext clientContext, String[] artifactUris, Nullable`1<DateTime> asOfDate, IResultCollection`1& workItemIds);
    private static void WriteParameters(XmlDictionaryWriter writer, Object[] parameters);
}
internal class Microsoft.TeamFoundation.WorkItemTracking.Proxy.ConfigurationSettingsService : TfsHttpClient {
    protected string ComponentName { get; }
    protected Guid CollectionServiceIdentifier { get; }
    protected string ServiceType { get; }
    public ConfigurationSettingsService(TfsTeamProjectCollection connection);
    protected virtual string get_ComponentName();
    protected virtual Guid get_CollectionServiceIdentifier();
    protected virtual string get_ServiceType();
    public bool GetInProcBuildCompletionNotificationAvailability();
    public long GetMaxAttachmentSize();
    public int GetMaxBuildListSize();
    public int GetWorkItemQueryTimeout();
    public string GetWorkitemTrackingVersion();
    public void SetInProcBuildCompletionNotificationAvailability(bool isEnabled);
    public void SetMaxAttachmentSize(long maxSize);
    public void SetMaxBuildListSize(int maxBuildListSize);
    public void SetWorkItemQueryTimeout(int workItemQueryTimeout);
}
public class Microsoft.TeamFoundation.WorkItemTracking.Proxy.ConstantRecord : object {
    private string m_accountName;
    private int m_constantId;
    private string m_displayValue;
    private string m_sid;
    private Guid m_teamFoundationId;
    public string AccountName { get; public set; }
    public int ConstantId { get; public set; }
    public string DisplayValue { get; public set; }
    public string Sid { get; public set; }
    public Guid TeamFoundationId { get; public set; }
    public string get_AccountName();
    public void set_AccountName(string value);
    public int get_ConstantId();
    public void set_ConstantId(int value);
    public string get_DisplayValue();
    public void set_DisplayValue(string value);
    public string get_Sid();
    public void set_Sid(string value);
    public Guid get_TeamFoundationId();
    public void set_TeamFoundationId(Guid value);
    [EditorBrowsableAttribute("1")]
public static ConstantRecord FromXml(IServiceProvider serviceProvider, XmlReader reader);
    public virtual string ToString();
    [EditorBrowsableAttribute("1")]
public void ToXml(XmlWriter writer, string element);
    [EditorBrowsableAttribute("1")]
public static void ToXml(XmlWriter writer, string element, ConstantRecord obj);
}
public enum Microsoft.TeamFoundation.WorkItemTracking.Proxy.ConstantRecordSearchFactor : Enum {
    public int value__;
    public static ConstantRecordSearchFactor AccountName;
    public static ConstantRecordSearchFactor DisplayName;
    public static ConstantRecordSearchFactor Sid;
    public static ConstantRecordSearchFactor TeamFoundationId;
}
internal class Microsoft.TeamFoundation.WorkItemTracking.Proxy.Constants : ValueType {
    internal static string requestIdParamter;
    internal static string rowSetParameter;
    internal static string indexParameter;
    internal static string readerParameter;
    internal static string columnParameter;
    internal static string rowParameter;
    internal static string row1Parameter;
    internal static string row2Parameter;
    internal static string nameParameter;
    internal static string uuidScheme;
    public static int RetryAttemptsDeadlock;
    public static int RetryAttemptsStaleView;
}
public class Microsoft.TeamFoundation.WorkItemTracking.Proxy.ExtendedAccessControlListData : object {
    private bool m_inheritPermissions;
    private bool m_isEditable;
    internal AccessControlListMetadata[] m_metadata;
    internal AccessControlEntryData[] m_permissions;
    private string m_token;
    public bool InheritPermissions { get; public set; }
    public bool IsEditable { get; public set; }
    public AccessControlListMetadata[] Metadata { get; public set; }
    public AccessControlEntryData[] Permissions { get; public set; }
    public string Token { get; public set; }
    public bool get_InheritPermissions();
    public void set_InheritPermissions(bool value);
    public bool get_IsEditable();
    public void set_IsEditable(bool value);
    public AccessControlListMetadata[] get_Metadata();
    public void set_Metadata(AccessControlListMetadata[] value);
    public AccessControlEntryData[] get_Permissions();
    public void set_Permissions(AccessControlEntryData[] value);
    public string get_Token();
    public void set_Token(string value);
    [EditorBrowsableAttribute("1")]
public static ExtendedAccessControlListData FromXml(IServiceProvider serviceProvider, XmlReader reader);
    public virtual string ToString();
    [EditorBrowsableAttribute("1")]
public void ToXml(XmlWriter writer, string element);
    [EditorBrowsableAttribute("1")]
public static void ToXml(XmlWriter writer, string element, ExtendedAccessControlListData obj);
}
public class Microsoft.TeamFoundation.WorkItemTracking.Proxy.FileAttachment : ValueType {
    private Guid m_fileNameGUID;
    private string m_areaNodeUri;
    private string m_projectUri;
    private Stream m_localFile;
    public Guid FileNameGUID { get; public set; }
    public string AreaNodeUri { get; public set; }
    public string ProjectUri { get; public set; }
    public Stream LocalFile { get; public set; }
    public Guid get_FileNameGUID();
    public void set_FileNameGUID(Guid value);
    public string get_AreaNodeUri();
    public void set_AreaNodeUri(string value);
    public string get_ProjectUri();
    public void set_ProjectUri(string value);
    public Stream get_LocalFile();
    public void set_LocalFile(Stream value);
}
internal static class Microsoft.TeamFoundation.WorkItemTracking.Proxy.Helper : object {
    private static AccessControlEntryData[] m_zeroLengthArrayOfAccessControlEntryData;
    private static AccessControlListMetadata[] m_zeroLengthArrayOfAccessControlListMetadata;
    private static ConstantRecord[] m_zeroLengthArrayOfConstantRecord;
    private static IdRevisionPair[] m_zeroLengthArrayOfIdRevisionPair;
    private static Int32[] m_zeroLengthArrayOfInt32;
    private static MetadataTableHaveEntry[] m_zeroLengthArrayOfMetadataTableHaveEntry;
    private static QuerySortOrderEntry[] m_zeroLengthArrayOfQuerySortOrderEntry;
    private static RequiredPermissions[] m_zeroLengthArrayOfRequiredPermissions;
    private static String[] m_zeroLengthArrayOfString;
    private static WorkItemId[] m_zeroLengthArrayOfWorkItemId;
    private static WorkItemLinkChange[] m_zeroLengthArrayOfWorkItemLinkChange;
    internal static AccessControlEntryData[] ZeroLengthArrayOfAccessControlEntryData { get; }
    internal static AccessControlListMetadata[] ZeroLengthArrayOfAccessControlListMetadata { get; }
    internal static ConstantRecord[] ZeroLengthArrayOfConstantRecord { get; }
    internal static IdRevisionPair[] ZeroLengthArrayOfIdRevisionPair { get; }
    internal static Int32[] ZeroLengthArrayOfInt32 { get; }
    internal static MetadataTableHaveEntry[] ZeroLengthArrayOfMetadataTableHaveEntry { get; }
    internal static QuerySortOrderEntry[] ZeroLengthArrayOfQuerySortOrderEntry { get; }
    internal static RequiredPermissions[] ZeroLengthArrayOfRequiredPermissions { get; }
    internal static String[] ZeroLengthArrayOfString { get; }
    internal static WorkItemId[] ZeroLengthArrayOfWorkItemId { get; }
    internal static WorkItemLinkChange[] ZeroLengthArrayOfWorkItemLinkChange { get; }
    internal static AccessControlEntryData[] get_ZeroLengthArrayOfAccessControlEntryData();
    internal static AccessControlListMetadata[] get_ZeroLengthArrayOfAccessControlListMetadata();
    internal static ConstantRecord[] get_ZeroLengthArrayOfConstantRecord();
    internal static IdRevisionPair[] get_ZeroLengthArrayOfIdRevisionPair();
    internal static Int32[] get_ZeroLengthArrayOfInt32();
    internal static MetadataTableHaveEntry[] get_ZeroLengthArrayOfMetadataTableHaveEntry();
    internal static QuerySortOrderEntry[] get_ZeroLengthArrayOfQuerySortOrderEntry();
    internal static RequiredPermissions[] get_ZeroLengthArrayOfRequiredPermissions();
    internal static String[] get_ZeroLengthArrayOfString();
    internal static WorkItemId[] get_ZeroLengthArrayOfWorkItemId();
    internal static WorkItemLinkChange[] get_ZeroLengthArrayOfWorkItemLinkChange();
    internal static AccessControlEntryData[] ArrayOfAccessControlEntryDataFromXml(IServiceProvider serviceProvider, XmlReader reader, bool inline);
    internal static AccessControlListMetadata[] ArrayOfAccessControlListMetadataFromXml(IServiceProvider serviceProvider, XmlReader reader, bool inline);
    internal static ConstantRecord[] ArrayOfConstantRecordFromXml(IServiceProvider serviceProvider, XmlReader reader, bool inline);
    internal static IdRevisionPair[] ArrayOfIdRevisionPairFromXml(IServiceProvider serviceProvider, XmlReader reader, bool inline);
    internal static Int32[] ArrayOfInt32FromXml(XmlReader reader, bool inline);
    internal static MetadataTableHaveEntry[] ArrayOfMetadataTableHaveEntryFromXml(IServiceProvider serviceProvider, XmlReader reader, bool inline);
    internal static QuerySortOrderEntry[] ArrayOfQuerySortOrderEntryFromXml(IServiceProvider serviceProvider, XmlReader reader, bool inline);
    internal static RequiredPermissions[] ArrayOfRequiredPermissionsFromXml(IServiceProvider serviceProvider, XmlReader reader, bool inline);
    internal static String[] ArrayOfStringFromXml(XmlReader reader, bool inline);
    internal static WorkItemId[] ArrayOfWorkItemIdFromXml(IServiceProvider serviceProvider, XmlReader reader, bool inline);
    internal static WorkItemLinkChange[] ArrayOfWorkItemLinkChangeFromXml(IServiceProvider serviceProvider, XmlReader reader, bool inline);
    internal static string ArrayToString(T[] array);
    internal static Nullable`1<DateTime> NullableOfDateTimeFromXml(IServiceProvider serviceProvider, XmlReader reader);
    internal static void StringToXmlElement(XmlWriter writer, string element, string str);
    internal static void ToXml(XmlWriter writer, string arrayName, AccessControlEntryData[] array);
    internal static void ToXml(XmlWriter writer, string arrayName, AccessControlEntryData[] array, bool inline, bool allowEmptyArrays);
    internal static void ToXml(XmlWriter writer, string arrayName, AccessControlListMetadata[] array);
    internal static void ToXml(XmlWriter writer, string arrayName, AccessControlListMetadata[] array, bool inline, bool allowEmptyArrays);
    internal static void ToXml(XmlWriter writer, string arrayName, ConstantRecord[] array);
    internal static void ToXml(XmlWriter writer, string arrayName, ConstantRecord[] array, bool inline, bool allowEmptyArrays);
    internal static void ToXml(XmlWriter writer, string arrayName, IdRevisionPair[] array);
    internal static void ToXml(XmlWriter writer, string arrayName, IdRevisionPair[] array, bool inline, bool allowEmptyArrays);
    internal static void ToXml(XmlWriter writer, string arrayName, Int32[] array);
    internal static void ToXml(XmlWriter writer, string arrayName, Int32[] array, bool inline, bool allowEmptyArrays);
    internal static void ToXml(XmlWriter writer, string arrayName, MetadataTableHaveEntry[] array);
    internal static void ToXml(XmlWriter writer, string arrayName, MetadataTableHaveEntry[] array, bool inline, bool allowEmptyArrays);
    internal static void ToXml(XmlWriter writer, string arrayName, QuerySortOrderEntry[] array);
    internal static void ToXml(XmlWriter writer, string arrayName, QuerySortOrderEntry[] array, bool inline, bool allowEmptyArrays);
    internal static void ToXml(XmlWriter writer, string arrayName, RequiredPermissions[] array);
    internal static void ToXml(XmlWriter writer, string arrayName, RequiredPermissions[] array, bool inline, bool allowEmptyArrays);
    internal static void ToXml(XmlWriter writer, string arrayName, String[] array);
    internal static void ToXml(XmlWriter writer, string arrayName, String[] array, bool inline, bool allowEmptyArrays);
    internal static void ToXml(XmlWriter writer, string arrayName, WorkItemId[] array);
    internal static void ToXml(XmlWriter writer, string arrayName, WorkItemId[] array, bool inline, bool allowEmptyArrays);
    internal static void ToXml(XmlWriter writer, string arrayName, WorkItemLinkChange[] array);
    internal static void ToXml(XmlWriter writer, string arrayName, WorkItemLinkChange[] array, bool inline, bool allowEmptyArrays);
}
public class Microsoft.TeamFoundation.WorkItemTracking.Proxy.IdentityDescriptorData : object {
    private string m_identifier;
    private string m_identityType;
    public string Identifier { get; public set; }
    public string IdentityType { get; public set; }
    public string get_Identifier();
    public void set_Identifier(string value);
    public string get_IdentityType();
    public void set_IdentityType(string value);
    [EditorBrowsableAttribute("1")]
public static IdentityDescriptorData FromXml(IServiceProvider serviceProvider, XmlReader reader);
    public virtual string ToString();
    [EditorBrowsableAttribute("1")]
public void ToXml(XmlWriter writer, string element);
    [EditorBrowsableAttribute("1")]
public static void ToXml(XmlWriter writer, string element, IdentityDescriptorData obj);
}
public class Microsoft.TeamFoundation.WorkItemTracking.Proxy.IdRevisionPair : ValueType {
    private int m_id;
    private int m_revision;
    public int Id { get; public set; }
    public int Revision { get; public set; }
    public IdRevisionPair(int id, int revision);
    public int get_Id();
    public void set_Id(int value);
    public int get_Revision();
    public void set_Revision(int value);
    [EditorBrowsableAttribute("1")]
public static IdRevisionPair FromXml(IServiceProvider serviceProvider, XmlReader reader);
    public virtual string ToString();
    [EditorBrowsableAttribute("1")]
public void ToXml(XmlWriter writer, string element);
    [EditorBrowsableAttribute("1")]
public static void ToXml(XmlWriter writer, string element, IdRevisionPair obj);
}
[DefaultMemberAttribute("Item")]
public interface Microsoft.TeamFoundation.WorkItemTracking.Proxy.IMetadataRowSets {
    public IRowSet Item { get; }
    public IRowSet Item { get; }
    public int Count { get; }
    public abstract virtual IRowSet get_Item(MetadataRowSetNames name);
    public abstract virtual IRowSet get_Item(int index);
    public abstract virtual int get_Count();
}
[DefaultMemberAttribute("Item")]
public interface Microsoft.TeamFoundation.WorkItemTracking.Proxy.IPagedItemsRowSets {
    public IRowSet Item { get; }
    public abstract virtual IRowSet get_Item(PagedItemsRowSetNames name);
}
[DefaultMemberAttribute("Item")]
public interface Microsoft.TeamFoundation.WorkItemTracking.Proxy.IRowSet {
    public int RowCount { get; }
    public int ColumnCount { get; }
    public string Item { get; }
    public object Item { get; }
    public object Item { get; }
    public abstract virtual bool ContainsColumn(string name);
    public abstract virtual int get_RowCount();
    public abstract virtual int get_ColumnCount();
    public abstract virtual string get_Item(int column);
    public abstract virtual object get_Item(int column, int row);
    public abstract virtual object get_Item(string column, int row);
    public abstract virtual void SwapRows(int row1, int row2);
}
[ComVisibleAttribute("False")]
[GuidAttribute("b23fa78e-ad7b-4efc-a96c-b56a22031f67")]
[InterfaceTypeAttribute("1")]
internal interface Microsoft.TeamFoundation.WorkItemTracking.Proxy.IRowSetNative {
    public abstract virtual int GetRowCount();
    public abstract virtual String[] GetColumns();
    public abstract virtual void GetRow(int row, IntPtr p, int esz);
}
[ComVisibleAttribute("False")]
[GuidAttribute("3ca9b98e-eea9-4179-97e5-8acc774385c2")]
[InterfaceTypeAttribute("1")]
[EditorBrowsableAttribute("1")]
public interface Microsoft.TeamFoundation.WorkItemTracking.Proxy.IRowSetsNative {
    public abstract virtual object GetRowSet(MetadataRowSetNames name);
}
internal interface Microsoft.TeamFoundation.WorkItemTracking.Proxy.ISerializeRow {
    public abstract virtual void CopyRow(int row, IntPtr p, int esz);
}
[DefaultMemberAttribute("Item")]
public interface Microsoft.TeamFoundation.WorkItemTracking.Proxy.IWorkItemRowSets {
    public IRowSet Item { get; }
    public IRowSet Item { get; }
    public abstract virtual IRowSet get_Item(WorkItemRowSetNames name);
    public abstract virtual IRowSet get_Item(string name);
    public abstract virtual bool TryGetRowSet(string name, IRowSet& rowset);
}
public class Microsoft.TeamFoundation.WorkItemTracking.Proxy.LongRowSet : object {
    private Hashtable m_hash;
    public LongRowSet(IRowSet irowset);
    public string GetWords(LongRowSetKey key);
}
internal enum Microsoft.TeamFoundation.WorkItemTracking.Proxy.LongRowSetCols : Enum {
    public int value__;
    public static LongRowSetCols AddedDate;
    public static LongRowSetCols FldId;
    public static LongRowSetCols Id;
    public static LongRowSetCols Words;
}
public class Microsoft.TeamFoundation.WorkItemTracking.Proxy.LongRowSetData : object {
    private DateTime m_dt;
    private string m_words;
    public DateTime AddedDate { get; }
    public string Words { get; }
    public LongRowSetData(DateTime dt, string words);
    public DateTime get_AddedDate();
    public string get_Words();
}
public class Microsoft.TeamFoundation.WorkItemTracking.Proxy.LongRowSetKey : object {
    private int m_fldID;
    private int m_itemID;
    public int FldID { get; }
    public int ItemID { get; }
    public LongRowSetKey(int fldID, int itemID);
    public int get_FldID();
    public int get_ItemID();
}
public class Microsoft.TeamFoundation.WorkItemTracking.Proxy.LongRowSetKeyComparator : object {
    private sealed virtual override bool System.Collections.IEqualityComparer.Equals(object obj1, object obj2);
    private sealed virtual override int System.Collections.IEqualityComparer.GetHashCode(object obj);
}
public enum Microsoft.TeamFoundation.WorkItemTracking.Proxy.MetadataRowSetNames : Enum {
    public int value__;
    public static MetadataRowSetNames Hierarchy;
    public static MetadataRowSetNames Fields;
    public static MetadataRowSetNames HierarchyProperties;
    public static MetadataRowSetNames Constants;
    public static MetadataRowSetNames Rules;
    public static MetadataRowSetNames ConstantSets;
    public static MetadataRowSetNames FieldUsages;
    public static MetadataRowSetNames WorkItemTypes;
    public static MetadataRowSetNames WorkItemTypeUsages;
    public static MetadataRowSetNames Actions;
    public static MetadataRowSetNames LinkTypes;
    public static MetadataRowSetNames WorkItemTypeCategories;
    public static MetadataRowSetNames WorkItemTypeCategoryMembers;
}
[DefaultMemberAttribute("Item")]
internal class Microsoft.TeamFoundation.WorkItemTracking.Proxy.MetadataRowSets : object {
    private RowSetCollection m_rowSets;
    public IRowSet Item { get; }
    public IRowSet Item { get; }
    public int Count { get; }
    internal MetadataRowSets(RowSetCollection rowSets);
    public sealed virtual IRowSet get_Item(MetadataRowSetNames name);
    public sealed virtual IRowSet get_Item(int index);
    public sealed virtual int get_Count();
}
[EditorBrowsableAttribute("1")]
public class Microsoft.TeamFoundation.WorkItemTracking.Proxy.MetadataRowSetsNative : object {
    private IMetadataRowSets m_rs;
    public MetadataRowSetsNative(IMetadataRowSets rs);
    private sealed virtual override object Microsoft.TeamFoundation.WorkItemTracking.Proxy.IRowSetsNative.GetRowSet(MetadataRowSetNames name);
}
public class Microsoft.TeamFoundation.WorkItemTracking.Proxy.MetadataTableHaveEntry : ValueType {
    private long m_rowVersion;
    private string m_tableName;
    public long RowVersion { get; public set; }
    public string TableName { get; public set; }
    public MetadataTableHaveEntry(long rowVersion, string name);
    public long get_RowVersion();
    public void set_RowVersion(long value);
    public string get_TableName();
    public void set_TableName(string value);
    [EditorBrowsableAttribute("1")]
public static MetadataTableHaveEntry FromXml(IServiceProvider serviceProvider, XmlReader reader);
    public virtual string ToString();
    [EditorBrowsableAttribute("1")]
public void ToXml(XmlWriter writer, string element);
    [EditorBrowsableAttribute("1")]
public static void ToXml(XmlWriter writer, string element, MetadataTableHaveEntry obj);
}
public enum Microsoft.TeamFoundation.WorkItemTracking.Proxy.PagedItemsRowSetNames : Enum {
    public int value__;
    public static PagedItemsRowSetNames Items;
    public static PagedItemsRowSetNames LongTextItems;
}
[DefaultMemberAttribute("Item")]
public class Microsoft.TeamFoundation.WorkItemTracking.Proxy.PagedItemsRowSets : object {
    private RowSetCollection m_rowSets;
    public IRowSet Item { get; }
    public PagedItemsRowSets(RowSetCollection rowSets);
    public sealed virtual IRowSet get_Item(PagedItemsRowSetNames name);
}
public class Microsoft.TeamFoundation.WorkItemTracking.Proxy.QuerySortOrderEntry : ValueType {
    private bool m_ascending;
    private Nullable`1<bool> m_nullsFirst;
    private string m_columnName;
    public bool Ascending { get; public set; }
    public Nullable`1<bool> NullsFirst { get; public set; }
    public string ColumnName { get; public set; }
    public bool get_Ascending();
    public void set_Ascending(bool value);
    public Nullable`1<bool> get_NullsFirst();
    public void set_NullsFirst(Nullable`1<bool> value);
    public string get_ColumnName();
    public void set_ColumnName(string value);
    [EditorBrowsableAttribute("1")]
public static QuerySortOrderEntry FromXml(IServiceProvider serviceProvider, XmlReader reader);
    public virtual string ToString();
    [EditorBrowsableAttribute("1")]
public void ToXml(XmlWriter writer, string element);
    [EditorBrowsableAttribute("1")]
public static void ToXml(XmlWriter writer, string element, QuerySortOrderEntry obj);
}
internal class Microsoft.TeamFoundation.WorkItemTracking.Proxy.RequestHeader : TfsMessageHeader {
    private string m_requestId;
    public string Name { get; }
    public string Namespace { get; }
    public RequestHeader(string id);
    public virtual string get_Name();
    public virtual string get_Namespace();
    protected virtual void OnWriteHeaderContents(XmlDictionaryWriter writer);
}
public class Microsoft.TeamFoundation.WorkItemTracking.Proxy.RequiredPermissions : object {
    private string m_permissionName;
    private int m_requiredPermissionBits;
    public string PermissionName { get; public set; }
    public int RequiredPermissionBits { get; public set; }
    public string get_PermissionName();
    public void set_PermissionName(string value);
    public int get_RequiredPermissionBits();
    public void set_RequiredPermissionBits(int value);
    [EditorBrowsableAttribute("1")]
public static RequiredPermissions FromXml(IServiceProvider serviceProvider, XmlReader reader);
    public virtual string ToString();
    [EditorBrowsableAttribute("1")]
public void ToXml(XmlWriter writer, string element);
    [EditorBrowsableAttribute("1")]
public static void ToXml(XmlWriter writer, string element, RequiredPermissions obj);
}
internal static class Microsoft.TeamFoundation.WorkItemTracking.Proxy.ResourceStrings : object {
    private static ResourceManager s_resMgr;
    public static string ErrorBisMiddleTierNotRegistered;
    public static string InvalidRequestId;
    public static string StreamDoesNotSupportLength;
    public static string HTTPStatusCode;
    public static string HTTPStatusCodeAndDescription;
    public static string ParameterNotNullOrEmpty;
    public static string UnexpectedColumnType;
    public static string WriteXmlNotImplemented;
    public static string BadQuery;
    public static ResourceManager Manager { get; }
    private static ResourceStrings();
    public static ResourceManager get_Manager();
    public static string Get(string resourceName);
    public static string Get(string resourceName, CultureInfo culture);
    public static int GetInt(string resourceName);
    public static int GetInt(string resourceName, CultureInfo culture);
    public static bool GetBool(string resourceName);
    public static bool GetBool(string resourceName, CultureInfo culture);
    public static string Format(string resourceName, Object[] args);
    public static string Format(string resourceName, CultureInfo culture, Object[] args);
}
internal class Microsoft.TeamFoundation.WorkItemTracking.Proxy.RetryHandler : object {
    private RetryTypes m_retryTypes;
    private int m_retriesDeadlock;
    private int m_retriesStaleView;
    internal bool HasRemainingRetries { get; }
    private int Attempts { get; }
    internal RetryHandler(RetryTypes types);
    internal void HandleSoapException(SoapException se);
    internal bool get_HasRemainingRetries();
    private void RandomSleep();
    private int get_Attempts();
    private bool IsStaleViewError(int errorId);
    private int GetErrorId(SoapException se);
}
[FlagsAttribute]
internal enum Microsoft.TeamFoundation.WorkItemTracking.Proxy.RetryTypes : Enum {
    public int value__;
    public static RetryTypes None;
    public static RetryTypes Deadlock;
    public static RetryTypes StaleView;
    public static RetryTypes All;
}
[DefaultMemberAttribute("Item")]
public class Microsoft.TeamFoundation.WorkItemTracking.Proxy.RowSet : object {
    private string m_name;
    private Dictionary`2<string, int> m_columnNames;
    private RowSetColumn[] m_columns;
    private int m_intCount;
    private int m_objCount;
    private RowSetRow[] m_rows;
    internal string Name { get; }
    [EditorBrowsableAttribute("1")]
public RowSetColumn[] Columns { get; }
    internal int IntCount { get; }
    internal int ObjCount { get; }
    public int RowCount { get; }
    public int ColumnCount { get; }
    public string Item { get; }
    public object Item { get; }
    public object Item { get; }
    internal string get_Name();
    public RowSetColumn[] get_Columns();
    internal int get_IntCount();
    internal int get_ObjCount();
    internal RowSetColumn GetColumn(int column);
    internal RowSetRow GetRow(int row);
    public sealed virtual bool ContainsColumn(string name);
    public sealed virtual int get_RowCount();
    public sealed virtual int get_ColumnCount();
    public sealed virtual string get_Item(int column);
    public sealed virtual object get_Item(int column, int row);
    public sealed virtual object get_Item(string column, int row);
    public sealed virtual void SwapRows(int row1, int row2);
    private sealed virtual override XmlSchema System.Xml.Serialization.IXmlSerializable.GetSchema();
    private sealed virtual override void System.Xml.Serialization.IXmlSerializable.WriteXml(XmlWriter w);
    private sealed virtual override void System.Xml.Serialization.IXmlSerializable.ReadXml(XmlReader reader);
    private sealed virtual override void Microsoft.TeamFoundation.WorkItemTracking.Proxy.ISerializeRow.CopyRow(int row, IntPtr p, int esz);
    private void InitColumns();
}
[DefaultMemberAttribute("Item")]
[XmlRootAttribute("PayLoad")]
public class Microsoft.TeamFoundation.WorkItemTracking.Proxy.RowSetCollection : object {
    protected List`1<RowSet> m_rowSetList;
    protected Dictionary`2<string, RowSet> m_rowSetDictionary;
    public RowSet Item { get; }
    public RowSet Item { get; }
    public int Count { get; }
    public virtual string ToString();
    public RowSet get_Item(int index);
    public RowSet get_Item(string name);
    public int get_Count();
    public bool TryGetRowSet(string name, RowSet& rowset);
    internal static RowSetCollection FromXml(IServiceProvider serviceProvider, XmlReader reader);
    internal void ToXml(XmlWriter writer, string element);
    private sealed virtual override XmlSchema System.Xml.Serialization.IXmlSerializable.GetSchema();
    private sealed virtual override void System.Xml.Serialization.IXmlSerializable.WriteXml(XmlWriter w);
    private sealed virtual override void System.Xml.Serialization.IXmlSerializable.ReadXml(XmlReader reader);
}
public class Microsoft.TeamFoundation.WorkItemTracking.Proxy.RowSetColumn : object {
    private string m_name;
    private Type m_dataType;
    private VarEnum m_varType;
    private bool m_isValue;
    private int m_offset;
    [EditorBrowsableAttribute("1")]
public string Name { get; }
    internal Type DataType { get; }
    internal VarEnum VarType { get; }
    internal bool IsValue { get; }
    internal int Offset { get; internal set; }
    public string get_Name();
    internal Type get_DataType();
    internal VarEnum get_VarType();
    internal bool get_IsValue();
    internal int get_Offset();
    internal void set_Offset(int value);
    private sealed virtual override XmlSchema System.Xml.Serialization.IXmlSerializable.GetSchema();
    private sealed virtual override void System.Xml.Serialization.IXmlSerializable.WriteXml(XmlWriter w);
    private sealed virtual override void System.Xml.Serialization.IXmlSerializable.ReadXml(XmlReader reader);
    private void SetType(Type t);
}
internal class Microsoft.TeamFoundation.WorkItemTracking.Proxy.RowSetNative : object {
    private IRowSet m_rs;
    private ISerializeRow m_sr;
    public RowSetNative(IRowSet rs);
    private sealed virtual override int Microsoft.TeamFoundation.WorkItemTracking.Proxy.IRowSetNative.GetRowCount();
    private sealed virtual override String[] Microsoft.TeamFoundation.WorkItemTracking.Proxy.IRowSetNative.GetColumns();
    private sealed virtual override void Microsoft.TeamFoundation.WorkItemTracking.Proxy.IRowSetNative.GetRow(int row, IntPtr p, int esz);
}
[DefaultMemberAttribute("Item")]
public class Microsoft.TeamFoundation.WorkItemTracking.Proxy.RowSetRow : object {
    private Object[] m_values;
    private Nullable`1[] m_ints;
    private RowSet m_rowSet;
    internal Object[] ObjValues { get; }
    internal Nullable`1[] IntValues { get; }
    internal object Item { get; }
    internal RowSetRow(RowSet rowSet);
    internal Object[] get_ObjValues();
    internal Nullable`1[] get_IntValues();
    internal object get_Item(int index);
    private sealed virtual override XmlSchema System.Xml.Serialization.IXmlSerializable.GetSchema();
    private sealed virtual override void System.Xml.Serialization.IXmlSerializable.WriteXml(XmlWriter w);
    private sealed virtual override void System.Xml.Serialization.IXmlSerializable.ReadXml(XmlReader reader);
}
public class Microsoft.TeamFoundation.WorkItemTracking.Proxy.WorkItemId : object {
    private int m_id;
    private long m_rowVersion;
    public int Id { get; public set; }
    public long RowVersion { get; public set; }
    public int get_Id();
    public void set_Id(int value);
    public long get_RowVersion();
    public void set_RowVersion(long value);
    [EditorBrowsableAttribute("1")]
public static WorkItemId FromXml(IServiceProvider serviceProvider, XmlReader reader);
    public virtual string ToString();
    [EditorBrowsableAttribute("1")]
public void ToXml(XmlWriter writer, string element);
    [EditorBrowsableAttribute("1")]
public static void ToXml(XmlWriter writer, string element, WorkItemId obj);
}
public class Microsoft.TeamFoundation.WorkItemTracking.Proxy.WorkItemLinkChange : object {
    private DateTime m_changedDate;
    private bool m_isActive;
    private string m_linkType;
    private long m_rowVersion;
    private int m_sourceID;
    private int m_targetID;
    public DateTime ChangedDate { get; public set; }
    public bool IsActive { get; public set; }
    public string LinkType { get; public set; }
    public long RowVersion { get; public set; }
    public int SourceID { get; public set; }
    public int TargetID { get; public set; }
    public DateTime get_ChangedDate();
    public void set_ChangedDate(DateTime value);
    public bool get_IsActive();
    public void set_IsActive(bool value);
    public string get_LinkType();
    public void set_LinkType(string value);
    public long get_RowVersion();
    public void set_RowVersion(long value);
    public int get_SourceID();
    public void set_SourceID(int value);
    public int get_TargetID();
    public void set_TargetID(int value);
    [EditorBrowsableAttribute("1")]
public static WorkItemLinkChange FromXml(IServiceProvider serviceProvider, XmlReader reader);
    public virtual string ToString();
    [EditorBrowsableAttribute("1")]
public void ToXml(XmlWriter writer, string element);
    [EditorBrowsableAttribute("1")]
public static void ToXml(XmlWriter writer, string element, WorkItemLinkChange obj);
}
public class Microsoft.TeamFoundation.WorkItemTracking.Proxy.WorkItemRelation : ValueType {
    private int m_sourceID;
    private int m_targetID;
    private int m_linkType;
    private bool m_locked;
    public int SourceID { get; public set; }
    public int TargetID { get; public set; }
    public int LinkTypeID { get; public set; }
    public bool IsLocked { get; public set; }
    public static int MissingID { get; }
    public WorkItemRelation(int sourceId, int targetId, int linkTypeId, bool isLocked);
    public sealed virtual int get_SourceID();
    public sealed virtual void set_SourceID(int value);
    public sealed virtual int get_TargetID();
    public sealed virtual void set_TargetID(int value);
    public sealed virtual int get_LinkTypeID();
    public sealed virtual void set_LinkTypeID(int value);
    public sealed virtual bool get_IsLocked();
    public sealed virtual void set_IsLocked(bool value);
    public static int get_MissingID();
}
public enum Microsoft.TeamFoundation.WorkItemTracking.Proxy.WorkItemRowSetNames : Enum {
    public int value__;
    public static WorkItemRowSetNames Latest;
    public static WorkItemRowSetNames Revisions;
    public static WorkItemRowSetNames Keywords;
    public static WorkItemRowSetNames Texts;
    public static WorkItemRowSetNames Files;
    public static WorkItemRowSetNames Relations;
    public static WorkItemRowSetNames RelationRevisions;
}
[DefaultMemberAttribute("Item")]
internal class Microsoft.TeamFoundation.WorkItemTracking.Proxy.WorkItemRowSets : object {
    private RowSetCollection m_rowSets;
    public IRowSet Item { get; }
    public IRowSet Item { get; }
    internal WorkItemRowSets(RowSetCollection rowSets);
    public sealed virtual IRowSet get_Item(WorkItemRowSetNames name);
    public sealed virtual IRowSet get_Item(string name);
    public sealed virtual bool TryGetRowSet(string name, IRowSet& rowset);
}
public class Microsoft.TeamFoundation.WorkItemTracking.Proxy.WorkItemServer : object {
    private TfsTeamProjectCollection m_tfs;
    private WorkItemServerVersion m_serverVersion;
    private string m_clientServiceUrl;
    private string m_attachmentsUrl;
    private string m_configurationUrl;
    private Dictionary`2<string, string> m_replicationHeaders;
    private object m_replicationHeadersLock;
    private static int BufferSize;
    internal static int TimeOut;
    internal static int FileTimeOut;
    private static int m_requestCount;
    private static long m_maxAttachmentSize;
    private static long m_attachmentSizeLimitForBuffering;
    private static bool m_maxAttachmentIsCached;
    public WorkItemServerVersion WorkItemServerVersion { get; }
    public long MaxAttachmentSize { get; }
    private static WorkItemServer();
    private sealed virtual override void Microsoft.TeamFoundation.Client.ITfsTeamProjectCollectionObject.Initialize(TfsTeamProjectCollection tfs);
    internal void InitProxyInfo(TfsTeamProjectCollection tfs);
    public WorkItemServerVersion get_WorkItemServerVersion();
    private ClientService GetClientServiceProxy(string requestId);
    public string GetWorkitemTrackingVersion(string requestId);
    public void StampWorkitemCache(string requestId);
    public void GetWorkItem(string requestId, int workItemId, int revisionId, int minimumRevisionId, Nullable`1<DateTime> asOfDate, bool useMaster, IWorkItemRowSets& workItem, MetadataTableHaveEntry[] metadataHave, String& dbStamp, IMetadataRowSets& metadata);
    public void QueryWorkitemRevisions(string requestId, XmlElement psQuery, QuerySortOrderEntry[] sort, bool useMaster, IdRevisionPair[]& pairs, DateTime& asOfDate, MetadataTableHaveEntry[] metadataHave, String& dbStamp, IMetadataRowSets& metadata);
    public void QueryWorkitems(string requestId, XmlElement psQuery, QuerySortOrderEntry[] sort, bool useMaster, Int32[]& ids, DateTime& asOfDate, MetadataTableHaveEntry[] metadataHave, String& dbStamp, IMetadataRowSets& metadata);
    public void QueryLinkedWorkitems(string requestId, XmlElement psQuery, QuerySortOrderEntry[] sort, bool useMaster, WorkItemRelation[]& relations, DateTime& asOfDate, MetadataTableHaveEntry[] metadataHave, String& dbStamp, IMetadataRowSets& metadata);
    public void PageWorkitemsByIds(string requestId, Int32[] ids, String[] columns, Int32[] longTextColumns, Nullable`1<DateTime> asOfDate, bool useMaster, IPagedItemsRowSets& items, MetadataTableHaveEntry[] metadataHave, IMetadataRowSets& metadata);
    public void PageWorkitemsByIdRevs(string requestId, IdRevisionPair[] pairs, String[] columns, Int32[] longTextColumns, Nullable`1<DateTime> asOfDate, DateTime& pageDate, bool useMaster, IPagedItemsRowSets& items);
    public void QueryWorkitemCount(string requestId, XmlElement psQuery, bool useMaster, Int32& count, DateTime& asOfDate, MetadataTableHaveEntry[] metadataHave, String& dbStamp, IMetadataRowSets& metadata);
    public void GetMetadata(string requestId, bool useMaster, MetadataTableHaveEntry[] metadataHave, String& dbStamp, IMetadataRowSets& metadata, Int32& locale, Int32& comparisonStyle, String& callerIdentity);
    public void GetMetadataEx(string requestId, bool useMaster, MetadataTableHaveEntry[] metadataHave, String& dbStamp, IMetadataRowSets& metadata, Int32& locale, Int32& comparisonStyle, String& callerIdentity, String& callerIdentitySid);
    public void GetMetadataEx2(string requestId, bool useMaster, MetadataTableHaveEntry[] metadataHave, String& dbStamp, IMetadataRowSets& metadata, Int32& locale, Int32& comparisonStyle, Int32& displayMode);
    public bool BulkUpdate(string requestId, XmlElement package, XmlElement& result, MetadataTableHaveEntry[] metadataHave, String& dbStamp, IMetadataRowSets& metadata);
    public void Update(string requestId, XmlElement package, XmlElement& result, MetadataTableHaveEntry[] metadataHave, String& dbStamp, IMetadataRowSets& metadata);
    public long get_MaxAttachmentSize();
    public void UpdateMaxAttachmentSize();
    public void UploadFile(FileAttachment fileAttachment);
    private HttpWebRequest CreateFileUploadWebRequest();
    protected void UploadFileInternal(FileAttachment fileAttachment, bool allowWriteStreamBuffering);
    public string DownloadFile(int fileAttachmentId);
    private void ProcessHttpWebResponse(HttpWebResponse response);
    private bool HandleUnauthorizedException(TeamFoundationServerUnauthorizedException ex);
    public void GetStoredQuery(string requestId, bool useMaster, Guid queryId, RowSetCollection& queryDataSet);
    public void GetStoredQueries(string requestId, bool useMaster, long rowVersion, int projectId, RowSetCollection& queriesDataSet);
    public void GetStoredQueryItems(string requestId, long rowVersion, int projectId, RowSetCollection& queriesDataSet);
    public IEnumerable`1<WorkItemId> GetDestroyedWorkItemIds(string requestId, long rowVersion);
    public IEnumerable`1<WorkItemId> GetChangedWorkItemIds(string requestId, long rowVersion);
    public IEnumerable`1<WorkItemLinkChange> GetWorkItemLinkChanges(string requestId, long rowVersion);
    public ExtendedAccessControlListData GetStoredQueryItemAccessControlList(string requestId, Guid queryItemId, bool getMetadata);
    public void RequestCancel(string requestId, string cancelRequestId);
    public void SyncExternalStructures(string requestId, string projectURI);
    public void SyncBisGroupsAndUsers(string requestId, string projectUri);
    public String[] GetReferencingWorkitemUris(string requestId, string artifactUri);
    public IResultCollection`1<ArtifactWorkItemIds> GetWorkItemIdsForArtifactUris(String[] artifactUris, Nullable`1<DateTime> asOfDate);
    public void DestroyAttachments(string requestId, Int32[] workItemIds);
    public static string NewRequestId();
    private void ValidateRequestId(string requestId);
    private ClientServiceStreamingProxy GetStreamingProxy();
    private ConfigurationSettingsService GetConfigurationProxy();
    private void TraceException(Exception ex);
    private void TraceException(Exception ex, String& content);
    private void TraceException(Exception ex, ClientService proxy, String& content);
    private void IncRequestCount();
    private void StoreReplicationHeaders(HttpWebResponse response);
    private void SetReplicationHeaders(HttpWebRequest request);
    private sealed virtual override void Microsoft.TeamFoundation.Client.Channels.ITfsRequestListener.AfterReceiveReply(long requestId, string methodName, HttpWebResponse response);
    private sealed virtual override void Microsoft.TeamFoundation.Client.Channels.ITfsRequestListener.BeforeSendRequest(long requestId, string methodName, HttpWebRequest request);
    private sealed virtual override long Microsoft.TeamFoundation.Client.Channels.ITfsRequestListener.BeginRequest();
    private sealed virtual override void Microsoft.TeamFoundation.Client.Channels.ITfsRequestListener.EndRequest(long requestId, Exception exception);
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("2")]
internal class System.Runtime.CompilerServices.RefSafetyRulesAttribute : Attribute {
    public int Version;
    public RefSafetyRulesAttribute(int );
}
