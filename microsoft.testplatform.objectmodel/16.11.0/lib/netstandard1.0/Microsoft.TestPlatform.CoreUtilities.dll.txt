internal class Microsoft.VisualStudio.TestPlatform.Common.Utilities.Job`1 : object {
    [CompilerGeneratedAttribute]
private TPayload <Payload>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Shutdown>k__BackingField;
    [CompilerGeneratedAttribute]
private ManualResetEvent <WaitManualResetEvent>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Size>k__BackingField;
    public static Job`1<TPayload> ShutdownJob { get; }
    public TPayload Payload { get; private set; }
    public bool Shutdown { get; private set; }
    public ManualResetEvent WaitManualResetEvent { get; private set; }
    public int Size { get; private set; }
    public Job`1(TPayload job, int size);
    public static Job`1<TPayload> get_ShutdownJob();
    [CompilerGeneratedAttribute]
public TPayload get_Payload();
    [CompilerGeneratedAttribute]
private void set_Payload(TPayload value);
    [CompilerGeneratedAttribute]
public bool get_Shutdown();
    [CompilerGeneratedAttribute]
private void set_Shutdown(bool value);
    [CompilerGeneratedAttribute]
public ManualResetEvent get_WaitManualResetEvent();
    [CompilerGeneratedAttribute]
private void set_WaitManualResetEvent(ManualResetEvent value);
    [CompilerGeneratedAttribute]
public int get_Size();
    [CompilerGeneratedAttribute]
private void set_Size(int value);
    public static Job`1<TPayload> CreateWaitJob(ManualResetEvent waitEvent);
}
public class Microsoft.VisualStudio.TestPlatform.CoreUtilities.Constants : object {
    public static string VstestConsoleProcessName;
    public static string TesthostProcessName;
    public static string DatacollectorProcessName;
    public static int StandardErrorMaxLength;
    public static string DotNetUserSpecifiedCulture;
    public static string TestSourcesKeyName;
}
[ExtensionAttribute]
public static class Microsoft.VisualStudio.TestPlatform.CoreUtilities.Extensions.StringBuilderExtensions : object {
    [ExtensionAttribute]
public static void AppendSafeWithNewLine(StringBuilder result, string data);
}
[ExtensionAttribute]
public static class Microsoft.VisualStudio.TestPlatform.CoreUtilities.Extensions.StringExtensions : object {
    [ExtensionAttribute]
public static string AddDoubleQuote(string value);
}
public class Microsoft.VisualStudio.TestPlatform.CoreUtilities.Helpers.CommandLineArgumentsHelper : object {
    public static IDictionary`2<string, string> GetArgumentsDictionary(String[] args);
    public static int GetIntArgFromDict(IDictionary`2<string, string> argsDictionary, string fullname);
    public static bool TryGetIntArgFromDict(IDictionary`2<string, string> argsDictionary, string fullname, Int32& value);
    public static string GetStringArgFromDict(IDictionary`2<string, string> argsDictionary, string fullname);
}
public class Microsoft.VisualStudio.TestPlatform.CoreUtilities.Helpers.EnvironmentHelper : object {
    public static string VstestConnectionTimeout;
    public static int DefaultConnectionTimeout;
    public static int GetConnectionTimeout();
}
[GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "4.0.0.0")]
[DebuggerNonUserCodeAttribute]
[CompilerGeneratedAttribute]
internal class Microsoft.VisualStudio.TestPlatform.CoreUtilities.Resources.Resources : object {
    private static ResourceManager resourceMan;
    private static CultureInfo resourceCulture;
    [EditorBrowsableAttribute("2")]
internal static ResourceManager ResourceManager { get; }
    [EditorBrowsableAttribute("2")]
internal static CultureInfo Culture { get; internal set; }
    internal static string CannotBeNullOrEmpty { get; }
    internal static string CommandLineError { get; }
    internal static string CommandLineInformational { get; }
    internal static string CommandLineWarning { get; }
    internal static string Error_ArgumentIsEmpty { get; }
    internal static string Error_ArgumentIsNegative { get; }
    internal static string Error_ArgumentNotTypeOf { get; }
    internal static string Error_ArgumentPropertyIsEmpty { get; }
    internal static string Error_ArgumentPropertyIsNegative { get; }
    internal static string Error_ArgumentPropertyIsNull { get; }
    internal static string Error_ArgumentPropertyNotTypeOf { get; }
    internal static string ExceptionFromJobProcessor { get; }
    internal static string QueueAlreadyDisposed { get; }
    internal static string QueuePausedDisposeError { get; }
    internal static string Utility_ProcessNameWhenCannotGetIt { get; }
    internal static string NoDotnetExeFound { get; }
    internal static string MethodNotImplementedOnPlatform { get; }
    internal static ResourceManager get_ResourceManager();
    internal static CultureInfo get_Culture();
    internal static void set_Culture(CultureInfo value);
    internal static string get_CannotBeNullOrEmpty();
    internal static string get_CommandLineError();
    internal static string get_CommandLineInformational();
    internal static string get_CommandLineWarning();
    internal static string get_Error_ArgumentIsEmpty();
    internal static string get_Error_ArgumentIsNegative();
    internal static string get_Error_ArgumentNotTypeOf();
    internal static string get_Error_ArgumentPropertyIsEmpty();
    internal static string get_Error_ArgumentPropertyIsNegative();
    internal static string get_Error_ArgumentPropertyIsNull();
    internal static string get_Error_ArgumentPropertyNotTypeOf();
    internal static string get_ExceptionFromJobProcessor();
    internal static string get_QueueAlreadyDisposed();
    internal static string get_QueuePausedDisposeError();
    internal static string get_Utility_ProcessNameWhenCannotGetIt();
    internal static string get_NoDotnetExeFound();
    internal static string get_MethodNotImplementedOnPlatform();
}
public interface Microsoft.VisualStudio.TestPlatform.CoreUtilities.Tracing.Interfaces.ITestPlatformEventSource {
    public abstract virtual void VsTestConsoleStart();
    public abstract virtual void VsTestConsoleStop();
    public abstract virtual void DiscoveryRequestStart();
    public abstract virtual void DiscoveryRequestStop();
    public abstract virtual void ExecutionRequestStart();
    public abstract virtual void ExecutionRequestStop();
    public abstract virtual void TestHostStart();
    public abstract virtual void TestHostStop();
    public abstract virtual void TestHostAppDomainCreationStart();
    public abstract virtual void TestHostAppDomainCreationStop();
    public abstract virtual void AdapterSearchStart();
    public abstract virtual void AdapterSearchStop();
    public abstract virtual void AdapterExecutionStart(string executorUri);
    public abstract virtual void AdapterExecutionStop(long numberOfTests);
    public abstract virtual void AdapterDiscoveryStart(string executorUri);
    public abstract virtual void AdapterDiscoveryStop(long numberOfTests);
    public abstract virtual void DiscoveryStart();
    public abstract virtual void DiscoveryStop(long numberOfTests);
    public abstract virtual void ExecutionStart();
    public abstract virtual void ExecutionStop(long numberOfTests);
    public abstract virtual void DataCollectionStart(string dataCollectorUri);
    public abstract virtual void DataCollectionStop();
    public abstract virtual void TranslationLayerInitializeStart();
    public abstract virtual void TranslationLayerInitializeStop();
    public abstract virtual void TranslationLayerDiscoveryStart();
    public abstract virtual void TranslationLayerDiscoveryStop();
    public abstract virtual void TranslationLayerExecutionStart(long customTestHost, long sourcesCount, long testCasesCount, string runSettings);
    public abstract virtual void TranslationLayerExecutionStop();
    public abstract virtual void MetricsDisposeStart();
    public abstract virtual void MetricsDisposeStop();
    public abstract virtual void TestRunAttachmentsProcessingRequestStart();
    public abstract virtual void TestRunAttachmentsProcessingRequestStop();
    public abstract virtual void TestRunAttachmentsProcessingStart(long numberOfAttachments);
    public abstract virtual void TestRunAttachmentsProcessingStop(long numberOfAttachments);
    public abstract virtual void TranslationLayerTestRunAttachmentsProcessingStart();
    public abstract virtual void TranslationLayerTestRunAttachmentsProcessingStop();
    public abstract virtual void StartTestSessionStart();
    public abstract virtual void StartTestSessionStop();
    public abstract virtual void TranslationLayerStartTestSessionStart();
    public abstract virtual void TranslationLayerStartTestSessionStop();
    public abstract virtual void StopTestSessionStart();
    public abstract virtual void StopTestSessionStop();
    public abstract virtual void TranslationLayerStopTestSessionStart();
    public abstract virtual void TranslationLayerStopTestSessionStop();
}
internal class Microsoft.VisualStudio.TestPlatform.CoreUtilities.Tracing.TestPlatformInstrumentationEvents : object {
    public static int DiscoveryStartEventId;
    public static int DiscoveryStopEventId;
    public static int ExecutionStartEventId;
    public static int ExecutionStopEventId;
    public static int AdapterExecutionStartEventId;
    public static int AdapterExecutionStopEventId;
    public static int VsTestConsoleStartEventId;
    public static int VsTestConsoleStopEventId;
    public static int TestHostStartEventId;
    public static int TestHostStopEventId;
    public static int AdapterSearchStartEventId;
    public static int AdapterSearchStopEventId;
    public static int DiscoveryRequestStartEventId;
    public static int DiscoveryRequestStopEventId;
    public static int ExecutionRequestStartEventId;
    public static int ExecutionRequestStopEventId;
    public static int DataCollectionStartEventId;
    public static int DataCollectionStopEventId;
    public static int AdapterDiscoveryStartEventId;
    public static int AdapterDiscoveryStopEventId;
    public static int TestHostAppDomainCreationStartEventId;
    public static int TestHostAppDomainCreationStopEventId;
    public static int TranslationLayerInitializeStartEventId;
    public static int TranslationLayerInitializeStopEventId;
    public static int TranslationLayerDiscoveryStartEventId;
    public static int TranslationLayerDiscoveryStopEventId;
    public static int TranslationLayerExecutionStartEventId;
    public static int TranslationLayerExecutionStopEventId;
    public static int MetricsDisposeStartEventId;
    public static int MetricsDisposeStopEventId;
    public static int TestRunAttachmentsProcessingStartEventId;
    public static int TestRunAttachmentsProcessingStopEventId;
    public static int TestRunAttachmentsProcessingRequestStartEventId;
    public static int TestRunAttachmentsProcessingRequestStopEventId;
    public static int TranslationLayerTestRunAttachmentsProcessingStartEventId;
    public static int TranslationLayerTestRunAttachmentsProcessingStopEventId;
    public static int StartTestSessionStartEventId;
    public static int StartTestSessionStopEventId;
    public static int TranslationLayerStartTestSessionStartEventId;
    public static int TranslationLayerStartTestSessionStopEventId;
    public static int StopTestSessionStartEventId;
    public static int StopTestSessionStopEventId;
    public static int TranslationLayerStopTestSessionStartEventId;
    public static int TranslationLayerStopTestSessionStopEventId;
}
public interface Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.Helpers.Interfaces.IDotnetHostHelper {
    public abstract virtual string GetDotnetPath();
    public abstract virtual string GetMonoPath();
}
public static class Microsoft.VisualStudio.TestPlatform.ObjectModel.EqtTrace : object {
    private static IPlatformEqtTrace traceImpl;
    [CompilerGeneratedAttribute]
private static string <ErrorOnInitialization>k__BackingField;
    public static PlatformTraceLevel TraceLevel { get; public set; }
    public static string LogFile { get; }
    public static bool DoNotInitailize { get; public set; }
    public static string ErrorOnInitialization { get; public set; }
    public static bool IsErrorEnabled { get; }
    public static bool IsInfoEnabled { get; }
    public static bool IsVerboseEnabled { get; }
    public static bool IsWarningEnabled { get; }
    private static EqtTrace();
    public static PlatformTraceLevel get_TraceLevel();
    public static void set_TraceLevel(PlatformTraceLevel value);
    public static string get_LogFile();
    public static bool get_DoNotInitailize();
    public static void set_DoNotInitailize(bool value);
    [CompilerGeneratedAttribute]
public static string get_ErrorOnInitialization();
    [CompilerGeneratedAttribute]
public static void set_ErrorOnInitialization(string value);
    public static bool get_IsErrorEnabled();
    public static bool get_IsInfoEnabled();
    public static bool get_IsVerboseEnabled();
    public static bool get_IsWarningEnabled();
    public static bool InitializeVerboseTrace(string customLogFile);
    public static bool InitializeTrace(string customLogFile, PlatformTraceLevel traceLevel);
    [ConditionalAttribute("TRACE")]
public static void Fail(string message);
    [ConditionalAttribute("TRACE")]
public static void Fail(string format, Object[] args);
    [ConditionalAttribute("TRACE")]
public static void Error(string message);
    [ConditionalAttribute("TRACE")]
public static void ErrorIf(bool condition, string message);
    [ConditionalAttribute("TRACE")]
public static void ErrorUnless(bool condition, string message);
    [ConditionalAttribute("TRACE")]
public static void ErrorUnlessAlterTrace(bool condition, PlatformTraceLevel bumpLevel, string message);
    [ConditionalAttribute("TRACE")]
public static void Error(string format, Object[] args);
    [ConditionalAttribute("TRACE")]
public static void ErrorUnless(bool condition, string format, Object[] args);
    [ConditionalAttribute("TRACE")]
public static void ErrorUnlessAlterTrace(bool condition, PlatformTraceLevel bumpLevel, string format, Object[] args);
    [ConditionalAttribute("TRACE")]
public static void ErrorIf(bool condition, string format, Object[] args);
    [ConditionalAttribute("TRACE")]
public static void ErrorAssert(string format, Object[] args);
    [ConditionalAttribute("TRACE")]
public static void Error(Exception exceptionToTrace);
    [ConditionalAttribute("TRACE")]
public static void Warning(string message);
    [ConditionalAttribute("TRACE")]
public static void WarningIf(bool condition, string message);
    [ConditionalAttribute("TRACE")]
public static void WarningUnless(bool condition, string message);
    [ConditionalAttribute("TRACE")]
public static void WarningUnlessAlterTrace(bool condition, PlatformTraceLevel bumpLevel, string message);
    [ConditionalAttribute("TRACE")]
public static void Warning(string format, Object[] args);
    [ConditionalAttribute("TRACE")]
public static void WarningIf(bool condition, string format, Object[] args);
    [ConditionalAttribute("TRACE")]
public static void WarningUnless(bool condition, string format, Object[] args);
    [ConditionalAttribute("TRACE")]
public static void WarningUnlessAlterTrace(bool condition, PlatformTraceLevel bumpLevel, string format, Object[] args);
    [ConditionalAttribute("TRACE")]
public static void Info(string message);
    [ConditionalAttribute("TRACE")]
public static void InfoIf(bool condition, string message);
    [ConditionalAttribute("TRACE")]
public static void InfoUnless(bool condition, string message);
    [ConditionalAttribute("TRACE")]
public static void InfoUnlessAlterTrace(bool condition, PlatformTraceLevel bumpLevel, string message);
    [ConditionalAttribute("TRACE")]
public static void Info(string format, Object[] args);
    [ConditionalAttribute("TRACE")]
public static void InfoIf(bool condition, string format, Object[] args);
    [ConditionalAttribute("TRACE")]
public static void InfoUnless(bool condition, string format, Object[] args);
    [ConditionalAttribute("TRACE")]
public static void InfoUnlessAlterTrace(bool condition, PlatformTraceLevel bumpLevel, string format, Object[] args);
    [ConditionalAttribute("TRACE")]
public static void Verbose(string message);
    [ConditionalAttribute("TRACE")]
public static void VerboseIf(bool condition, string message);
    [ConditionalAttribute("TRACE")]
public static void VerboseUnless(bool condition, string message);
    [ConditionalAttribute("TRACE")]
public static void VerboseUnlessAlterTrace(bool condition, PlatformTraceLevel level, string message);
    [ConditionalAttribute("TRACE")]
public static void Verbose(string format, Object[] args);
    [ConditionalAttribute("TRACE")]
public static void VerboseIf(bool condition, string format, Object[] args);
    [ConditionalAttribute("TRACE")]
public static void VerboseUnless(bool condition, string format, Object[] args);
    [ConditionalAttribute("TRACE")]
public static void VerboseUnlessAlterTrace(bool condition, PlatformTraceLevel level, string format, Object[] args);
    private static string FormatException(Exception exceptionToTrace);
    private static void WriteAtLevel(PlatformTraceLevel level, string message);
    private static void WriteAtLevel(PlatformTraceLevel level, string format, Object[] args);
    private static void FailDebugger(string message);
}
public static class Microsoft.VisualStudio.TestPlatform.ObjectModel.ValidateArg : object {
    [DebuggerStepThroughAttribute]
public static T NotNull(T arg, string parameterName);
    [DebuggerStepThroughAttribute]
public static string NotNullOrEmpty(string arg, string parameterName);
    [DebuggerStepThroughAttribute]
public static string NotNullOrWhiteSpace(string arg, string parameterName);
    [DebuggerStepThroughAttribute]
public static void NotNegative(int arg, string parameterName);
    [DebuggerStepThroughAttribute]
public static void NotNegative(long arg, string parameterName);
    [DebuggerStepThroughAttribute]
public static void NotNullOrEmpty(IEnumerable`1<T> arg, string parameterName);
    [DebuggerStepThroughAttribute]
public static void TypeOf(object arg, string parameterName);
}
public static class Microsoft.VisualStudio.TestPlatform.ObjectModel.ValidateArgProperty : object {
    [DebuggerStepThroughAttribute]
public static void NotNull(object arg, string parameterName, string propertyName);
    [DebuggerStepThroughAttribute]
public static void NotNegative(int arg, string parameterName, string propertyName);
    [DebuggerStepThroughAttribute]
public static void NotNullOrEmpty(string arg, string parameterName, string propertyName);
    [DebuggerStepThroughAttribute]
public static void TypeOf(object arg, string parameterName, string propertyName);
}
[AttributeUsageAttribute("2048")]
internal class Microsoft.VisualStudio.TestPlatform.ObjectModel.ValidatedNotNullAttribute : Attribute {
}
public interface Microsoft.VisualStudio.TestPlatform.Utilities.Helpers.Interfaces.IFileHelper {
    public abstract virtual string GetCurrentDirectory();
    public abstract virtual bool Exists(string path);
    public abstract virtual bool DirectoryExists(string path);
    public abstract virtual Version GetFileVersion(string path);
    public abstract virtual void CopyFile(string sourcePath, string destinationPath);
    public abstract virtual void MoveFile(string sourcePath, string destinationPath);
    public abstract virtual void WriteAllTextToFile(string filePath, string content);
    public abstract virtual string GetFullPath(string path);
    public abstract virtual void DeleteEmptyDirectroy(string directoryPath);
    public abstract virtual void Delete(string path);
}
public interface Microsoft.VisualStudio.TestPlatform.Utilities.IOutput {
    public abstract virtual void WriteLine(string message, OutputLevel level);
    public abstract virtual void Write(string message, OutputLevel level);
}
public class Microsoft.VisualStudio.TestPlatform.Utilities.JobQueue`1 : object {
    private Action`1<T> processJob;
    private string displayName;
    private Queue`1<Job`1<T>> jobsQueue;
    private ManualResetEvent jobAdded;
    private int maxNumberOfJobsInQueue;
    private int maxBytesQueueCanHold;
    private int currentNumberOfBytesQueueIsHolding;
    private bool enableBoundsOnQueue;
    private ManualResetEvent queueProcessing;
    private Task backgroundJobProcessor;
    private bool isDisposed;
    private Action`1<string> exceptionLogger;
    public JobQueue`1(Action`1<T> processJob, string displayName, int maxQueueLength, int maxQueueSize, bool enableBounds, Action`1<string> exceptionLogger);
    public void QueueJob(T job, int jobSize);
    public void Pause();
    public void Resume();
    public void Flush();
    public sealed virtual void Dispose();
    protected virtual bool WaitForQueueToGetEmpty();
    private void InternalQueueJob(Job`1<T> job);
    private void CheckDisposed();
    private void BackgroundJobProcessor();
    private void SafeProcessJob(T job);
    [CompilerGeneratedAttribute]
private void <.ctor>b__12_0();
}
[ExtensionAttribute]
public static class Microsoft.VisualStudio.TestPlatform.Utilities.MulticastDelegateUtilities : object {
    [ExtensionAttribute]
public static void SafeInvoke(Delegate delegates, object sender, EventArgs args, string traceDisplayName);
}
public enum Microsoft.VisualStudio.TestPlatform.Utilities.OutputLevel : Enum {
    public int value__;
    public static OutputLevel Information;
    public static OutputLevel Warning;
    public static OutputLevel Error;
}
public static class Microsoft.VisualStudio.TestPlatform.Utilities.TimeSpanParser : object {
    private static Regex pattern;
    private static TimeSpanParser();
    public static TimeSpan Parse(string time);
    public static bool TryParse(string time, TimeSpan& result);
    private static FormatException GetFormatException(string value);
}
