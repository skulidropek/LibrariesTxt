public static class Microsoft.VisualStudio.TestPlatform.Utilities.ClientUtilities : object {
    private static string TestSettingsFileXPath;
    private static string ResultsDirectoryXPath;
    private static string RunsettingsDirectory;
    public static void FixRelativePathsInRunSettings(XmlDocument xmlDocument, string path);
    private static void AddRunSettingsDirectoryNode(XmlDocument doc, string path);
    private static void FixNodeFilePath(XmlNode node, string root);
}
public class Microsoft.VisualStudio.TestPlatform.Utilities.CodeCoverageDataAttachmentsHandler : object {
    private static string CoverageUri;
    private static string CoverageFileExtension;
    private static string CoverageFriendlyName;
    private static string CodeCoverageIOAssemblyName;
    private static string CoverageFileUtilityTypeName;
    private static string MergeMethodName;
    private static string WriteMethodName;
    private static Uri CodeCoverageDataCollectorUri;
    public bool SupportsIncrementalProcessing { get; }
    private static CodeCoverageDataAttachmentsHandler();
    public sealed virtual bool get_SupportsIncrementalProcessing();
    [IteratorStateMachineAttribute("Microsoft.VisualStudio.TestPlatform.Utilities.CodeCoverageDataAttachmentsHandler/<GetExtensionUris>d__10")]
public sealed virtual IEnumerable`1<Uri> GetExtensionUris();
    [AsyncStateMachineAttribute("Microsoft.VisualStudio.TestPlatform.Utilities.CodeCoverageDataAttachmentsHandler/<ProcessAttachmentSetsAsync>d__11")]
public sealed virtual Task`1<ICollection`1<AttachmentSet>> ProcessAttachmentSetsAsync(ICollection`1<AttachmentSet> attachments, IProgress`1<int> progressReporter, IMessageLogger logger, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.VisualStudio.TestPlatform.Utilities.CodeCoverageDataAttachmentsHandler/<MergeCodeCoverageFilesAsync>d__12")]
private Task`1<string> MergeCodeCoverageFilesAsync(IList`1<string> files, IProgress`1<int> progressReporter, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.VisualStudio.TestPlatform.Utilities.CodeCoverageDataAttachmentsHandler/<MergeCodeCoverageFilesAsync>d__13")]
private Task`1<string> MergeCodeCoverageFilesAsync(IList`1<string> files, CancellationToken cancellationToken);
}
public class Microsoft.VisualStudio.TestPlatform.Utilities.CodeCoverageRunSettingsProcessor : object {
    private XmlNode defaultSettingsRootNode;
    public CodeCoverageRunSettingsProcessor(XmlNode defaultSettingsRootNode);
    public XmlNode Process(string currentSettings);
    public XmlNode Process(XmlDocument currentSettingsDocument);
    public XmlNode Process(XmlNode currentSettingsRootNode);
    private XmlNode SelectNodeOrAddDefaults(XmlNode currentRootNode, XmlNode defaultRootNode, IList`1<string> pathComponents);
    private bool ShouldProcessCurrentExclusion(XmlNode node);
    private string BuildPath(IList`1<string> pathComponents);
    private XmlNode ExtractNode(XmlNode node, string path);
    private void MergeNodes(XmlNode currentNode, XmlNode defaultNode);
}
public static class Microsoft.VisualStudio.TestPlatform.Utilities.CommandLineUtilities : object {
    public static bool SplitCommandLineIntoArguments(string args, String[]& arguments);
}
public class Microsoft.VisualStudio.TestPlatform.Utilities.InferRunSettingsHelper : object {
    private static string DesignModeNodeName;
    private static string CollectSourceInformationNodeName;
    private static string RunSettingsNodeName;
    private static string RunConfigurationNodeName;
    private static string ResultsDirectoryNodeName;
    private static string TargetPlatformNodeName;
    private static string TargetFrameworkNodeName;
    private static string TargetDevice;
    private static string DesignModeNodePath;
    private static string CollectSourceInformationNodePath;
    private static string RunConfigurationNodePath;
    private static string TargetPlatformNodePath;
    private static string TargetFrameworkNodePath;
    private static string ResultsDirectoryNodePath;
    private static string TargetDeviceNodePath;
    private static string EnvironmentVariablesNodePath;
    private static string multiTargettingForwardLink;
    private static string MsTestTargetDeviceNodePath;
    private static string CodeCoverageCollectorUri;
    private static string FakesCollectorUri;
    private static string CodeCoverageFriendlyName;
    private static string FakesFriendlyName;
    private static string LegacyElementsString;
    private static string DeploymentAttributesString;
    private static string ExecutionAttributesString;
    private static List`1<string> ExecutionNodesPaths;
    private static InferRunSettingsHelper();
    public static string MakeRunsettingsCompatible(string runsettingsXml);
    public static void UpdateRunSettingsWithUserProvidedSwitches(XmlDocument runSettingsDocument, Architecture architecture, Framework framework, string resultsDirectory);
    public static void UpdateDesignMode(XmlDocument runSettingsDocument, bool designModeValue);
    public static void UpdateCollectSourceInformation(XmlDocument runSettingsDocument, bool collectSourceInformationValue);
    public static void UpdateTargetDevice(XmlDocument runSettingsDocument, string targetDevice);
    public static void UpdateTargetFramework(XmlDocument runSettingsDocument, string framework, bool overwrite);
    public static bool AreRunSettingsCollectorsIncompatibleWithTestSettings(string runsettings);
    public static bool TryGetLegacySettingElements(string runsettingsXml, Dictionary`2& legacySettingsTelemetry);
    private static List`1<string> GetNodeAttributes(XPathNavigator node);
    public static Dictionary`2<string, string> GetEnvironmentVariables(string runSettings);
    public static void UpdateTargetPlatform(XmlDocument runSettingsDocument, string platform, bool overwrite);
    public static bool TryGetDeviceXml(XPathNavigator runSettingsNavigator, String& deviceXml);
    public static bool IsTestSettingsEnabled(string runsettingsXml);
    private static void AddNodeIfNotPresent(XmlDocument xmlDocument, string nodePath, string nodeName, T nodeValue, bool overwrite);
    private static void ValidateRunConfiguration(XPathNavigator runSettingsNavigator);
    private static void VerifyCompatibilityWithOSArchitecture(Architecture architecture);
    private static void UpdateRunConfiguration(XmlDocument xmlDocument, Architecture effectivePlatform, Framework effectiveFramework, string resultsDirectory);
    public static bool TryGetPlatformXml(XPathNavigator runSettingsNavigator, String& platformXml);
    public static bool TryGetFrameworkXml(XPathNavigator runSettingsNavigator, String& frameworkXml);
    public static IEnumerable`1<string> FilterCompatibleSources(Architecture chosenPlatform, Architecture defaultArchitecture, Framework chosenFramework, IDictionary`2<string, Architecture> sourcePlatforms, IDictionary`2<string, Framework> sourceFrameworks, String& incompatibleSettingWarning);
    private static bool IsSettingIncompatible(Architecture sourcePlatform, Architecture targetPlatform, Framework sourceFramework, Framework targetFramework);
    private static bool IsPlatformIncompatible(Architecture sourcePlatform, Architecture targetPlatform);
    private static bool IsFrameworkIncompatible(Framework sourceFramework, Framework targetFramework);
    [CompilerGeneratedAttribute]
internal static bool <IsPlatformIncompatible>g__Is64BitOperatingSystem|47_0();
}
public static class Microsoft.VisualStudio.TestPlatform.Utilities.MSTestSettingsUtilities : object {
    public static XmlDocument Import(string settingsFile, XmlDocument defaultRunSettings);
    public static bool IsLegacyTestSettingsFile(string settingsFile);
    private static XmlElement GenerateMSTestXml(string settingsFile);
}
public static class Microsoft.VisualStudio.TestPlatform.Utilities.ParallelRunSettingsUtilities : object {
    private static string XpathOfRunSettings;
    private static string XpathOfRunConfiguration;
    private static string XpathOfMaxCpuCount;
    private static string MaxCpuCountSettingTemplate;
    private static string RunConfigurationWithMaxCpuCountSettingTemplate;
    private static ParallelRunSettingsUtilities();
    public static void UpdateRunSettingsWithParallelSettingIfNotConfigured(XPathNavigator navigator);
}
[GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "4.0.0.0")]
[DebuggerNonUserCodeAttribute]
[CompilerGeneratedAttribute]
internal class Microsoft.VisualStudio.TestPlatform.Utilities.Resources.Resources : object {
    private static ResourceManager resourceMan;
    private static CultureInfo resourceCulture;
    [EditorBrowsableAttribute("2")]
internal static ResourceManager ResourceManager { get; }
    [EditorBrowsableAttribute("2")]
internal static CultureInfo Culture { get; internal set; }
    internal static string InvalidRunSettingsXml { get; }
    internal static string InvalidSettingsIncorrectValue { get; }
    internal static string MissingRunSettingsNode { get; }
    internal static string NoRunSettingsNodeFound { get; }
    internal static string RunSettingsParseError { get; }
    internal static string SystemArchitectureIncompatibleWithTargetPlatform { get; }
    internal static string UnExpectedSettingsFile { get; }
    internal static ResourceManager get_ResourceManager();
    internal static CultureInfo get_Culture();
    internal static void set_Culture(CultureInfo value);
    internal static string get_InvalidRunSettingsXml();
    internal static string get_InvalidSettingsIncorrectValue();
    internal static string get_MissingRunSettingsNode();
    internal static string get_NoRunSettingsNodeFound();
    internal static string get_RunSettingsParseError();
    internal static string get_SystemArchitectureIncompatibleWithTargetPlatform();
    internal static string get_UnExpectedSettingsFile();
}
[ExtensionAttribute]
public static class Microsoft.VisualStudio.TestPlatform.Utilities.StringExtensions : object {
    [IteratorStateMachineAttribute("Microsoft.VisualStudio.TestPlatform.Utilities.StringExtensions/<Tokenize>d__0")]
[ExtensionAttribute]
public static IEnumerable`1<string> Tokenize(string input, char separator, char escape);
    [ExtensionAttribute]
private static string Flush(StringBuilder stringBuilder);
}
internal class Microsoft.VisualStudio.TestPlatform.Utilities.XmlUtilities : object {
    internal static string GetNodeXml(XPathNavigator runSettingsNavigator, string nodeXPath);
    internal static bool IsValidNodeXmlValue(string xmlNodeValue, Func`2<string, bool> validator);
    internal static void AppendOrModifyChild(XmlDocument xmlDocument, string nodeXPath, string nodeName, string innerXml);
    internal static void RemoveChildNode(XPathNavigator parentNavigator, string nodeXPath, string childName);
}
