[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
[DebuggerStepThroughAttribute]
public static class Microsoft.Toolkit.Diagnostics.Guard : object {
    public static void IsEmpty(Span`1<T> span, string name);
    public static void IsNotEmpty(Span`1<T> span, string name);
    public static void HasSizeEqualTo(Span`1<T> span, int size, string name);
    public static void HasSizeNotEqualTo(Span`1<T> span, int size, string name);
    public static void HasSizeGreaterThan(Span`1<T> span, int size, string name);
    public static void HasSizeGreaterThanOrEqualTo(Span`1<T> span, int size, string name);
    public static void HasSizeLessThan(Span`1<T> span, int size, string name);
    public static void HasSizeLessThanOrEqualTo(Span`1<T> span, int size, string name);
    public static void HasSizeEqualTo(Span`1<T> source, Span`1<T> destination, string name);
    public static void HasSizeLessThanOrEqualTo(Span`1<T> source, Span`1<T> destination, string name);
    public static void IsInRangeFor(int index, Span`1<T> span, string name);
    public static void IsNotInRangeFor(int index, Span`1<T> span, string name);
    public static void IsEmpty(ReadOnlySpan`1<T> span, string name);
    public static void IsNotEmpty(ReadOnlySpan`1<T> span, string name);
    public static void HasSizeEqualTo(ReadOnlySpan`1<T> span, int size, string name);
    public static void HasSizeNotEqualTo(ReadOnlySpan`1<T> span, int size, string name);
    public static void HasSizeGreaterThan(ReadOnlySpan`1<T> span, int size, string name);
    public static void HasSizeGreaterThanOrEqualTo(ReadOnlySpan`1<T> span, int size, string name);
    public static void HasSizeLessThan(ReadOnlySpan`1<T> span, int size, string name);
    public static void HasSizeLessThanOrEqualTo(ReadOnlySpan`1<T> span, int size, string name);
    public static void HasSizeEqualTo(ReadOnlySpan`1<T> source, Span`1<T> destination, string name);
    public static void HasSizeLessThanOrEqualTo(ReadOnlySpan`1<T> source, Span`1<T> destination, string name);
    public static void IsInRangeFor(int index, ReadOnlySpan`1<T> span, string name);
    public static void IsNotInRangeFor(int index, ReadOnlySpan`1<T> span, string name);
    public static void IsEmpty(Memory`1<T> memory, string name);
    public static void IsNotEmpty(Memory`1<T> memory, string name);
    public static void HasSizeEqualTo(Memory`1<T> memory, int size, string name);
    public static void HasSizeNotEqualTo(Memory`1<T> memory, int size, string name);
    public static void HasSizeGreaterThan(Memory`1<T> memory, int size, string name);
    public static void HasSizeGreaterThanOrEqualTo(Memory`1<T> memory, int size, string name);
    public static void HasSizeLessThan(Memory`1<T> memory, int size, string name);
    public static void HasSizeLessThanOrEqualTo(Memory`1<T> memory, int size, string name);
    public static void HasSizeEqualTo(Memory`1<T> source, Memory`1<T> destination, string name);
    public static void HasSizeLessThanOrEqualTo(Memory`1<T> source, Memory`1<T> destination, string name);
    public static void IsInRangeFor(int index, Memory`1<T> memory, string name);
    public static void IsNotInRangeFor(int index, Memory`1<T> memory, string name);
    public static void IsEmpty(ReadOnlyMemory`1<T> memory, string name);
    public static void IsNotEmpty(ReadOnlyMemory`1<T> memory, string name);
    public static void HasSizeEqualTo(ReadOnlyMemory`1<T> memory, int size, string name);
    public static void HasSizeNotEqualTo(ReadOnlyMemory`1<T> memory, int size, string name);
    public static void HasSizeGreaterThan(ReadOnlyMemory`1<T> memory, int size, string name);
    public static void HasSizeGreaterThanOrEqualTo(ReadOnlyMemory`1<T> memory, int size, string name);
    public static void HasSizeLessThan(ReadOnlyMemory`1<T> memory, int size, string name);
    public static void HasSizeLessThanOrEqualTo(ReadOnlyMemory`1<T> memory, int size, string name);
    public static void HasSizeEqualTo(ReadOnlyMemory`1<T> source, Memory`1<T> destination, string name);
    public static void HasSizeLessThanOrEqualTo(ReadOnlyMemory`1<T> source, Memory`1<T> destination, string name);
    public static void IsInRangeFor(int index, ReadOnlyMemory`1<T> memory, string name);
    public static void IsNotInRangeFor(int index, ReadOnlyMemory`1<T> memory, string name);
    public static void IsEmpty(T[] array, string name);
    public static void IsNotEmpty(T[] array, string name);
    public static void HasSizeEqualTo(T[] array, int size, string name);
    public static void HasSizeNotEqualTo(T[] array, int size, string name);
    public static void HasSizeGreaterThan(T[] array, int size, string name);
    public static void HasSizeGreaterThanOrEqualTo(T[] array, int size, string name);
    public static void HasSizeLessThan(T[] array, int size, string name);
    public static void HasSizeLessThanOrEqualTo(T[] array, int size, string name);
    public static void HasSizeEqualTo(T[] source, T[] destination, string name);
    public static void HasSizeLessThanOrEqualTo(T[] source, T[] destination, string name);
    public static void IsInRangeFor(int index, T[] array, string name);
    public static void IsNotInRangeFor(int index, T[] array, string name);
    public static void IsEmpty(List`1<T> list, string name);
    public static void IsNotEmpty(List`1<T> list, string name);
    public static void HasSizeEqualTo(List`1<T> list, int size, string name);
    public static void HasSizeNotEqualTo(List`1<T> list, int size, string name);
    public static void HasSizeGreaterThan(List`1<T> list, int size, string name);
    public static void HasSizeGreaterThanOrEqualTo(List`1<T> list, int size, string name);
    public static void HasSizeLessThan(List`1<T> list, int size, string name);
    public static void HasSizeLessThanOrEqualTo(List`1<T> list, int size, string name);
    public static void HasSizeEqualTo(List`1<T> source, List`1<T> destination, string name);
    public static void HasSizeLessThanOrEqualTo(List`1<T> source, List`1<T> destination, string name);
    public static void IsInRangeFor(int index, List`1<T> list, string name);
    public static void IsNotInRangeFor(int index, List`1<T> list, string name);
    public static void IsEmpty(ICollection`1<T> collection, string name);
    public static void IsNotEmpty(ICollection`1<T> collection, string name);
    public static void HasSizeEqualTo(ICollection`1<T> collection, int size, string name);
    public static void HasSizeNotEqualTo(ICollection`1<T> collection, int size, string name);
    public static void HasSizeGreaterThan(ICollection`1<T> collection, int size, string name);
    public static void HasSizeGreaterThanOrEqualTo(ICollection`1<T> collection, int size, string name);
    public static void HasSizeLessThan(ICollection`1<T> collection, int size, string name);
    public static void HasSizeLessThanOrEqualTo(ICollection`1<T> collection, int size, string name);
    public static void HasSizeEqualTo(ICollection`1<T> source, ICollection`1<T> destination, string name);
    public static void HasSizeLessThanOrEqualTo(ICollection`1<T> source, ICollection`1<T> destination, string name);
    public static void IsInRangeFor(int index, ICollection`1<T> collection, string name);
    public static void IsNotInRangeFor(int index, ICollection`1<T> collection, string name);
    public static void IsEmpty(IReadOnlyCollection`1<T> collection, string name);
    public static void IsNotEmpty(IReadOnlyCollection`1<T> collection, string name);
    public static void HasSizeEqualTo(IReadOnlyCollection`1<T> collection, int size, string name);
    public static void HasSizeNotEqualTo(IReadOnlyCollection`1<T> collection, int size, string name);
    public static void HasSizeGreaterThan(IReadOnlyCollection`1<T> collection, int size, string name);
    public static void HasSizeGreaterThanOrEqualTo(IReadOnlyCollection`1<T> collection, int size, string name);
    public static void HasSizeLessThan(IReadOnlyCollection`1<T> collection, int size, string name);
    public static void HasSizeLessThanOrEqualTo(IReadOnlyCollection`1<T> collection, int size, string name);
    public static void HasSizeEqualTo(IReadOnlyCollection`1<T> source, ICollection`1<T> destination, string name);
    public static void HasSizeLessThanOrEqualTo(IReadOnlyCollection`1<T> source, ICollection`1<T> destination, string name);
    public static void IsInRangeFor(int index, IReadOnlyCollection`1<T> collection, string name);
    public static void IsNotInRangeFor(int index, IReadOnlyCollection`1<T> collection, string name);
    public static void IsEqualTo(byte value, byte target, string name);
    public static void IsNotEqualTo(byte value, byte target, string name);
    public static void IsLessThan(byte value, byte maximum, string name);
    public static void IsLessThanOrEqualTo(byte value, byte maximum, string name);
    public static void IsGreaterThan(byte value, byte minimum, string name);
    public static void IsGreaterThanOrEqualTo(byte value, byte minimum, string name);
    public static void IsInRange(byte value, byte minimum, byte maximum, string name);
    public static void IsNotInRange(byte value, byte minimum, byte maximum, string name);
    public static void IsBetween(byte value, byte minimum, byte maximum, string name);
    public static void IsNotBetween(byte value, byte minimum, byte maximum, string name);
    public static void IsBetweenOrEqualTo(byte value, byte minimum, byte maximum, string name);
    public static void IsNotBetweenOrEqualTo(byte value, byte minimum, byte maximum, string name);
    public static void IsEqualTo(sbyte value, sbyte target, string name);
    public static void IsNotEqualTo(sbyte value, sbyte target, string name);
    public static void IsLessThan(sbyte value, sbyte maximum, string name);
    public static void IsLessThanOrEqualTo(sbyte value, sbyte maximum, string name);
    public static void IsGreaterThan(sbyte value, sbyte minimum, string name);
    public static void IsGreaterThanOrEqualTo(sbyte value, sbyte minimum, string name);
    public static void IsInRange(sbyte value, sbyte minimum, sbyte maximum, string name);
    public static void IsNotInRange(sbyte value, sbyte minimum, sbyte maximum, string name);
    public static void IsBetween(sbyte value, sbyte minimum, sbyte maximum, string name);
    public static void IsNotBetween(sbyte value, sbyte minimum, sbyte maximum, string name);
    public static void IsBetweenOrEqualTo(sbyte value, sbyte minimum, sbyte maximum, string name);
    public static void IsNotBetweenOrEqualTo(sbyte value, sbyte minimum, sbyte maximum, string name);
    public static void IsEqualTo(short value, short target, string name);
    public static void IsNotEqualTo(short value, short target, string name);
    public static void IsLessThan(short value, short maximum, string name);
    public static void IsLessThanOrEqualTo(short value, short maximum, string name);
    public static void IsGreaterThan(short value, short minimum, string name);
    public static void IsGreaterThanOrEqualTo(short value, short minimum, string name);
    public static void IsInRange(short value, short minimum, short maximum, string name);
    public static void IsNotInRange(short value, short minimum, short maximum, string name);
    public static void IsBetween(short value, short minimum, short maximum, string name);
    public static void IsNotBetween(short value, short minimum, short maximum, string name);
    public static void IsBetweenOrEqualTo(short value, short minimum, short maximum, string name);
    public static void IsNotBetweenOrEqualTo(short value, short minimum, short maximum, string name);
    public static void IsEqualTo(ushort value, ushort target, string name);
    public static void IsNotEqualTo(ushort value, ushort target, string name);
    public static void IsLessThan(ushort value, ushort maximum, string name);
    public static void IsLessThanOrEqualTo(ushort value, ushort maximum, string name);
    public static void IsGreaterThan(ushort value, ushort minimum, string name);
    public static void IsGreaterThanOrEqualTo(ushort value, ushort minimum, string name);
    public static void IsInRange(ushort value, ushort minimum, ushort maximum, string name);
    public static void IsNotInRange(ushort value, ushort minimum, ushort maximum, string name);
    public static void IsBetween(ushort value, ushort minimum, ushort maximum, string name);
    public static void IsNotBetween(ushort value, ushort minimum, ushort maximum, string name);
    public static void IsBetweenOrEqualTo(ushort value, ushort minimum, ushort maximum, string name);
    public static void IsNotBetweenOrEqualTo(ushort value, ushort minimum, ushort maximum, string name);
    public static void IsEqualTo(char value, char target, string name);
    public static void IsNotEqualTo(char value, char target, string name);
    public static void IsLessThan(char value, char maximum, string name);
    public static void IsLessThanOrEqualTo(char value, char maximum, string name);
    public static void IsGreaterThan(char value, char minimum, string name);
    public static void IsGreaterThanOrEqualTo(char value, char minimum, string name);
    public static void IsInRange(char value, char minimum, char maximum, string name);
    public static void IsNotInRange(char value, char minimum, char maximum, string name);
    public static void IsBetween(char value, char minimum, char maximum, string name);
    public static void IsNotBetween(char value, char minimum, char maximum, string name);
    public static void IsBetweenOrEqualTo(char value, char minimum, char maximum, string name);
    public static void IsNotBetweenOrEqualTo(char value, char minimum, char maximum, string name);
    public static void IsEqualTo(int value, int target, string name);
    public static void IsNotEqualTo(int value, int target, string name);
    public static void IsLessThan(int value, int maximum, string name);
    public static void IsLessThanOrEqualTo(int value, int maximum, string name);
    public static void IsGreaterThan(int value, int minimum, string name);
    public static void IsGreaterThanOrEqualTo(int value, int minimum, string name);
    public static void IsInRange(int value, int minimum, int maximum, string name);
    public static void IsNotInRange(int value, int minimum, int maximum, string name);
    public static void IsBetween(int value, int minimum, int maximum, string name);
    public static void IsNotBetween(int value, int minimum, int maximum, string name);
    public static void IsBetweenOrEqualTo(int value, int minimum, int maximum, string name);
    public static void IsNotBetweenOrEqualTo(int value, int minimum, int maximum, string name);
    public static void IsEqualTo(UInt32 value, UInt32 target, string name);
    public static void IsNotEqualTo(UInt32 value, UInt32 target, string name);
    public static void IsLessThan(UInt32 value, UInt32 maximum, string name);
    public static void IsLessThanOrEqualTo(UInt32 value, UInt32 maximum, string name);
    public static void IsGreaterThan(UInt32 value, UInt32 minimum, string name);
    public static void IsGreaterThanOrEqualTo(UInt32 value, UInt32 minimum, string name);
    public static void IsInRange(UInt32 value, UInt32 minimum, UInt32 maximum, string name);
    public static void IsNotInRange(UInt32 value, UInt32 minimum, UInt32 maximum, string name);
    public static void IsBetween(UInt32 value, UInt32 minimum, UInt32 maximum, string name);
    public static void IsNotBetween(UInt32 value, UInt32 minimum, UInt32 maximum, string name);
    public static void IsBetweenOrEqualTo(UInt32 value, UInt32 minimum, UInt32 maximum, string name);
    public static void IsNotBetweenOrEqualTo(UInt32 value, UInt32 minimum, UInt32 maximum, string name);
    public static void IsEqualTo(float value, float target, string name);
    public static void IsNotEqualTo(float value, float target, string name);
    public static void IsLessThan(float value, float maximum, string name);
    public static void IsLessThanOrEqualTo(float value, float maximum, string name);
    public static void IsGreaterThan(float value, float minimum, string name);
    public static void IsGreaterThanOrEqualTo(float value, float minimum, string name);
    public static void IsInRange(float value, float minimum, float maximum, string name);
    public static void IsNotInRange(float value, float minimum, float maximum, string name);
    public static void IsBetween(float value, float minimum, float maximum, string name);
    public static void IsNotBetween(float value, float minimum, float maximum, string name);
    public static void IsBetweenOrEqualTo(float value, float minimum, float maximum, string name);
    public static void IsNotBetweenOrEqualTo(float value, float minimum, float maximum, string name);
    public static void IsEqualTo(long value, long target, string name);
    public static void IsNotEqualTo(long value, long target, string name);
    public static void IsLessThan(long value, long maximum, string name);
    public static void IsLessThanOrEqualTo(long value, long maximum, string name);
    public static void IsGreaterThan(long value, long minimum, string name);
    public static void IsGreaterThanOrEqualTo(long value, long minimum, string name);
    public static void IsInRange(long value, long minimum, long maximum, string name);
    public static void IsNotInRange(long value, long minimum, long maximum, string name);
    public static void IsBetween(long value, long minimum, long maximum, string name);
    public static void IsNotBetween(long value, long minimum, long maximum, string name);
    public static void IsBetweenOrEqualTo(long value, long minimum, long maximum, string name);
    public static void IsNotBetweenOrEqualTo(long value, long minimum, long maximum, string name);
    public static void IsEqualTo(ulong value, ulong target, string name);
    public static void IsNotEqualTo(ulong value, ulong target, string name);
    public static void IsLessThan(ulong value, ulong maximum, string name);
    public static void IsLessThanOrEqualTo(ulong value, ulong maximum, string name);
    public static void IsGreaterThan(ulong value, ulong minimum, string name);
    public static void IsGreaterThanOrEqualTo(ulong value, ulong minimum, string name);
    public static void IsInRange(ulong value, ulong minimum, ulong maximum, string name);
    public static void IsNotInRange(ulong value, ulong minimum, ulong maximum, string name);
    public static void IsBetween(ulong value, ulong minimum, ulong maximum, string name);
    public static void IsNotBetween(ulong value, ulong minimum, ulong maximum, string name);
    public static void IsBetweenOrEqualTo(ulong value, ulong minimum, ulong maximum, string name);
    public static void IsNotBetweenOrEqualTo(ulong value, ulong minimum, ulong maximum, string name);
    public static void IsEqualTo(double value, double target, string name);
    public static void IsNotEqualTo(double value, double target, string name);
    public static void IsLessThan(double value, double maximum, string name);
    public static void IsLessThanOrEqualTo(double value, double maximum, string name);
    public static void IsGreaterThan(double value, double minimum, string name);
    public static void IsGreaterThanOrEqualTo(double value, double minimum, string name);
    public static void IsInRange(double value, double minimum, double maximum, string name);
    public static void IsNotInRange(double value, double minimum, double maximum, string name);
    public static void IsBetween(double value, double minimum, double maximum, string name);
    public static void IsNotBetween(double value, double minimum, double maximum, string name);
    public static void IsBetweenOrEqualTo(double value, double minimum, double maximum, string name);
    public static void IsNotBetweenOrEqualTo(double value, double minimum, double maximum, string name);
    public static void IsEqualTo(decimal value, decimal target, string name);
    public static void IsNotEqualTo(decimal value, decimal target, string name);
    public static void IsLessThan(decimal value, decimal maximum, string name);
    public static void IsLessThanOrEqualTo(decimal value, decimal maximum, string name);
    public static void IsGreaterThan(decimal value, decimal minimum, string name);
    public static void IsGreaterThanOrEqualTo(decimal value, decimal minimum, string name);
    public static void IsInRange(decimal value, decimal minimum, decimal maximum, string name);
    public static void IsNotInRange(decimal value, decimal minimum, decimal maximum, string name);
    public static void IsBetween(decimal value, decimal minimum, decimal maximum, string name);
    public static void IsNotBetween(decimal value, decimal minimum, decimal maximum, string name);
    public static void IsBetweenOrEqualTo(decimal value, decimal minimum, decimal maximum, string name);
    public static void IsNotBetweenOrEqualTo(decimal value, decimal minimum, decimal maximum, string name);
    public static void IsEqualTo(IntPtr value, IntPtr target, string name);
    public static void IsNotEqualTo(IntPtr value, IntPtr target, string name);
    public static void IsLessThan(IntPtr value, IntPtr maximum, string name);
    public static void IsLessThanOrEqualTo(IntPtr value, IntPtr maximum, string name);
    public static void IsGreaterThan(IntPtr value, IntPtr minimum, string name);
    public static void IsGreaterThanOrEqualTo(IntPtr value, IntPtr minimum, string name);
    public static void IsInRange(IntPtr value, IntPtr minimum, IntPtr maximum, string name);
    public static void IsNotInRange(IntPtr value, IntPtr minimum, IntPtr maximum, string name);
    public static void IsBetween(IntPtr value, IntPtr minimum, IntPtr maximum, string name);
    public static void IsNotBetween(IntPtr value, IntPtr minimum, IntPtr maximum, string name);
    public static void IsBetweenOrEqualTo(IntPtr value, IntPtr minimum, IntPtr maximum, string name);
    public static void IsNotBetweenOrEqualTo(IntPtr value, IntPtr minimum, IntPtr maximum, string name);
    public static void IsEqualTo(UIntPtr value, UIntPtr target, string name);
    public static void IsNotEqualTo(UIntPtr value, UIntPtr target, string name);
    public static void IsLessThan(UIntPtr value, UIntPtr maximum, string name);
    public static void IsLessThanOrEqualTo(UIntPtr value, UIntPtr maximum, string name);
    public static void IsGreaterThan(UIntPtr value, UIntPtr minimum, string name);
    public static void IsGreaterThanOrEqualTo(UIntPtr value, UIntPtr minimum, string name);
    public static void IsInRange(UIntPtr value, UIntPtr minimum, UIntPtr maximum, string name);
    public static void IsNotInRange(UIntPtr value, UIntPtr minimum, UIntPtr maximum, string name);
    public static void IsBetween(UIntPtr value, UIntPtr minimum, UIntPtr maximum, string name);
    public static void IsNotBetween(UIntPtr value, UIntPtr minimum, UIntPtr maximum, string name);
    public static void IsBetweenOrEqualTo(UIntPtr value, UIntPtr minimum, UIntPtr maximum, string name);
    public static void IsNotBetweenOrEqualTo(UIntPtr value, UIntPtr minimum, UIntPtr maximum, string name);
    public static void IsDefault(T value, string name);
    public static void IsNotDefault(T value, string name);
    [NullableContextAttribute("1")]
public static void IsEqualTo(T value, T target, string name);
    [NullableContextAttribute("1")]
public static void IsNotEqualTo(T value, T target, string name);
    public static void IsBitwiseEqualTo(T value, T target, string name);
    private static bool Bit64Compare(UInt64& left, UInt64& right);
    [NullableContextAttribute("1")]
public static void IsLessThan(T value, T maximum, string name);
    [NullableContextAttribute("1")]
public static void IsLessThanOrEqualTo(T value, T maximum, string name);
    [NullableContextAttribute("1")]
public static void IsGreaterThan(T value, T minimum, string name);
    [NullableContextAttribute("1")]
public static void IsGreaterThanOrEqualTo(T value, T minimum, string name);
    [NullableContextAttribute("1")]
public static void IsInRange(T value, T minimum, T maximum, string name);
    [NullableContextAttribute("1")]
public static void IsNotInRange(T value, T minimum, T maximum, string name);
    [NullableContextAttribute("1")]
public static void IsBetween(T value, T minimum, T maximum, string name);
    [NullableContextAttribute("1")]
public static void IsNotBetween(T value, T minimum, T maximum, string name);
    [NullableContextAttribute("1")]
public static void IsBetweenOrEqualTo(T value, T minimum, T maximum, string name);
    [NullableContextAttribute("1")]
public static void IsNotBetweenOrEqualTo(T value, T minimum, T maximum, string name);
    [NullableContextAttribute("1")]
public static void IsCloseTo(int value, int target, UInt32 delta, string name);
    [NullableContextAttribute("1")]
public static void IsNotCloseTo(int value, int target, UInt32 delta, string name);
    [NullableContextAttribute("1")]
public static void IsCloseTo(long value, long target, ulong delta, string name);
    [NullableContextAttribute("1")]
public static void IsNotCloseTo(long value, long target, ulong delta, string name);
    [NullableContextAttribute("1")]
public static void IsCloseTo(float value, float target, float delta, string name);
    [NullableContextAttribute("1")]
public static void IsNotCloseTo(float value, float target, float delta, string name);
    [NullableContextAttribute("1")]
public static void IsCloseTo(double value, double target, double delta, string name);
    [NullableContextAttribute("1")]
public static void IsNotCloseTo(double value, double target, double delta, string name);
    [NullableContextAttribute("1")]
public static void IsCloseTo(IntPtr value, IntPtr target, UIntPtr delta, string name);
    [NullableContextAttribute("1")]
public static void IsNotCloseTo(IntPtr value, IntPtr target, UIntPtr delta, string name);
    [NullableContextAttribute("1")]
public static void IsNull(T value, string name);
    public static void IsNull(Nullable`1<T> value, string name);
    [NullableContextAttribute("1")]
public static void IsNotNull(T value, string name);
    public static void IsNotNull(Nullable`1<T> value, string name);
    [NullableContextAttribute("1")]
public static void IsOfType(object value, string name);
    [NullableContextAttribute("1")]
public static void IsNotOfType(object value, string name);
    [NullableContextAttribute("1")]
public static void IsOfType(object value, Type type, string name);
    [NullableContextAttribute("1")]
public static void IsNotOfType(object value, Type type, string name);
    [NullableContextAttribute("1")]
public static void IsAssignableToType(object value, string name);
    [NullableContextAttribute("1")]
public static void IsNotAssignableToType(object value, string name);
    [NullableContextAttribute("1")]
public static void IsAssignableToType(object value, Type type, string name);
    [NullableContextAttribute("1")]
public static void IsNotAssignableToType(object value, Type type, string name);
    [NullableContextAttribute("1")]
public static void IsReferenceEqualTo(T value, T target, string name);
    [NullableContextAttribute("1")]
public static void IsReferenceNotEqualTo(T value, T target, string name);
    [NullableContextAttribute("1")]
public static void IsTrue(bool value, string name);
    [NullableContextAttribute("1")]
public static void IsTrue(bool value, string name, string message);
    [NullableContextAttribute("1")]
public static void IsFalse(bool value, string name);
    [NullableContextAttribute("1")]
public static void IsFalse(bool value, string name, string message);
    [NullableContextAttribute("1")]
public static void CanRead(Stream stream, string name);
    [NullableContextAttribute("1")]
public static void CanWrite(Stream stream, string name);
    [NullableContextAttribute("1")]
public static void CanSeek(Stream stream, string name);
    [NullableContextAttribute("1")]
public static void IsAtStartPosition(Stream stream, string name);
    [NullableContextAttribute("1")]
public static void IsNullOrEmpty(string text, string name);
    [NullableContextAttribute("1")]
public static void IsNotNullOrEmpty(string text, string name);
    [NullableContextAttribute("1")]
public static void IsNullOrWhiteSpace(string text, string name);
    [NullableContextAttribute("1")]
[ObsoleteAttribute("Use IsNullOrWhiteSpace")]
public static void IsNullOrWhitespace(string text, string name);
    [NullableContextAttribute("1")]
public static void IsNotNullOrWhiteSpace(string text, string name);
    [NullableContextAttribute("1")]
[ObsoleteAttribute("Use IsNotNullOrWhiteSpace")]
public static void IsNotNullOrWhitespace(string text, string name);
    [NullableContextAttribute("1")]
public static void IsEmpty(string text, string name);
    [NullableContextAttribute("1")]
public static void IsNotEmpty(string text, string name);
    [NullableContextAttribute("1")]
public static void IsWhiteSpace(string text, string name);
    [NullableContextAttribute("1")]
[ObsoleteAttribute("Use IsWhiteSpace")]
public static void IsWhitespace(string text, string name);
    [NullableContextAttribute("1")]
public static void IsNotWhiteSpace(string text, string name);
    [NullableContextAttribute("1")]
[ObsoleteAttribute("Use IsNotWhiteSpace")]
public static void IsNotWhitespace(string text, string name);
    [NullableContextAttribute("1")]
public static void HasSizeEqualTo(string text, int size, string name);
    [NullableContextAttribute("1")]
public static void HasSizeNotEqualTo(string text, int size, string name);
    [NullableContextAttribute("1")]
public static void HasSizeGreaterThan(string text, int size, string name);
    [NullableContextAttribute("1")]
public static void HasSizeGreaterThanOrEqualTo(string text, int size, string name);
    [NullableContextAttribute("1")]
public static void HasSizeLessThan(string text, int size, string name);
    [NullableContextAttribute("1")]
public static void HasSizeLessThanOrEqualTo(string text, int size, string name);
    [NullableContextAttribute("1")]
public static void HasSizeEqualTo(string source, string destination, string name);
    [NullableContextAttribute("1")]
public static void HasSizeLessThanOrEqualTo(string source, string destination, string name);
    [NullableContextAttribute("1")]
public static void IsInRangeFor(int index, string text, string name);
    [NullableContextAttribute("1")]
public static void IsNotInRangeFor(int index, string text, string name);
    [NullableContextAttribute("1")]
public static void IsCompleted(Task task, string name);
    [NullableContextAttribute("1")]
public static void IsNotCompleted(Task task, string name);
    [NullableContextAttribute("1")]
public static void IsCompletedSuccessfully(Task task, string name);
    [NullableContextAttribute("1")]
public static void IsNotCompletedSuccessfully(Task task, string name);
    [NullableContextAttribute("1")]
public static void IsFaulted(Task task, string name);
    [NullableContextAttribute("1")]
public static void IsNotFaulted(Task task, string name);
    [NullableContextAttribute("1")]
public static void IsCanceled(Task task, string name);
    [NullableContextAttribute("1")]
public static void IsNotCanceled(Task task, string name);
    [NullableContextAttribute("1")]
public static void HasStatusEqualTo(Task task, TaskStatus status, string name);
    [NullableContextAttribute("1")]
public static void HasStatusNotEqualTo(Task task, TaskStatus status, string name);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public static class Microsoft.Toolkit.Diagnostics.ThrowHelper : object {
    [DoesNotReturnAttribute]
public static void ThrowArrayTypeMismatchException();
    [DoesNotReturnAttribute]
public static void ThrowArrayTypeMismatchException(string message);
    [DoesNotReturnAttribute]
public static void ThrowArrayTypeMismatchException(string message, Exception innerException);
    [DoesNotReturnAttribute]
public static void ThrowArgumentException();
    [DoesNotReturnAttribute]
public static void ThrowArgumentException(string message);
    [DoesNotReturnAttribute]
public static void ThrowArgumentException(string message, Exception innerException);
    [DoesNotReturnAttribute]
public static void ThrowArgumentException(string name, string message);
    [DoesNotReturnAttribute]
public static void ThrowArgumentException(string name, string message, Exception innerException);
    [DoesNotReturnAttribute]
public static void ThrowArgumentNullException();
    [DoesNotReturnAttribute]
public static void ThrowArgumentNullException(string name);
    [DoesNotReturnAttribute]
public static void ThrowArgumentNullException(string name, Exception innerException);
    [DoesNotReturnAttribute]
public static void ThrowArgumentNullException(string name, string message);
    [DoesNotReturnAttribute]
public static void ThrowArgumentOutOfRangeException();
    [DoesNotReturnAttribute]
public static void ThrowArgumentOutOfRangeException(string name);
    [DoesNotReturnAttribute]
public static void ThrowArgumentOutOfRangeException(string name, Exception innerException);
    [DoesNotReturnAttribute]
public static void ThrowArgumentOutOfRangeException(string name, string message);
    [DoesNotReturnAttribute]
public static void ThrowArgumentOutOfRangeException(string name, object value, string message);
    [DoesNotReturnAttribute]
public static void ThrowCOMException();
    [DoesNotReturnAttribute]
public static void ThrowCOMException(string message);
    [DoesNotReturnAttribute]
public static void ThrowCOMException(string message, Exception innerException);
    [DoesNotReturnAttribute]
public static void ThrowCOMException(string message, int error);
    [DoesNotReturnAttribute]
public static void ThrowExternalException();
    [DoesNotReturnAttribute]
public static void ThrowExternalException(string message);
    [DoesNotReturnAttribute]
public static void ThrowExternalException(string message, Exception innerException);
    [DoesNotReturnAttribute]
public static void ThrowExternalException(string message, int error);
    [DoesNotReturnAttribute]
public static void ThrowFormatException();
    [DoesNotReturnAttribute]
public static void ThrowFormatException(string message);
    [DoesNotReturnAttribute]
public static void ThrowFormatException(string message, Exception innerException);
    [DoesNotReturnAttribute]
public static void ThrowInsufficientMemoryException();
    [DoesNotReturnAttribute]
public static void ThrowInsufficientMemoryException(string message);
    [DoesNotReturnAttribute]
public static void ThrowInsufficientMemoryException(string message, Exception innerException);
    [DoesNotReturnAttribute]
public static void ThrowInvalidDataException();
    [DoesNotReturnAttribute]
public static void ThrowInvalidDataException(string message);
    [DoesNotReturnAttribute]
public static void ThrowInvalidDataException(string message, Exception innerException);
    [DoesNotReturnAttribute]
public static void ThrowInvalidOperationException();
    [DoesNotReturnAttribute]
public static void ThrowInvalidOperationException(string message);
    [DoesNotReturnAttribute]
public static void ThrowInvalidOperationException(string message, Exception innerException);
    [DoesNotReturnAttribute]
public static void ThrowLockRecursionException();
    [DoesNotReturnAttribute]
public static void ThrowLockRecursionException(string message);
    [DoesNotReturnAttribute]
public static void ThrowLockRecursionException(string message, Exception innerException);
    [DoesNotReturnAttribute]
public static void ThrowMissingFieldException();
    [DoesNotReturnAttribute]
public static void ThrowMissingFieldException(string message);
    [DoesNotReturnAttribute]
public static void ThrowMissingFieldException(string message, Exception innerException);
    [DoesNotReturnAttribute]
public static void ThrowMissingFieldException(string className, string fieldName);
    [DoesNotReturnAttribute]
public static void ThrowMissingMemberException();
    [DoesNotReturnAttribute]
public static void ThrowMissingMemberException(string message);
    [DoesNotReturnAttribute]
public static void ThrowMissingMemberException(string message, Exception innerException);
    [DoesNotReturnAttribute]
public static void ThrowMissingMemberException(string className, string memberName);
    [DoesNotReturnAttribute]
public static void ThrowMissingMethodException();
    [DoesNotReturnAttribute]
public static void ThrowMissingMethodException(string message);
    [DoesNotReturnAttribute]
public static void ThrowMissingMethodException(string message, Exception innerException);
    [DoesNotReturnAttribute]
public static void ThrowMissingMethodException(string className, string methodName);
    [DoesNotReturnAttribute]
public static void ThrowNotSupportedException();
    [DoesNotReturnAttribute]
public static void ThrowNotSupportedException(string message);
    [DoesNotReturnAttribute]
public static void ThrowNotSupportedException(string message, Exception innerException);
    [DoesNotReturnAttribute]
public static void ThrowObjectDisposedException(string objectName);
    [DoesNotReturnAttribute]
public static void ThrowObjectDisposedException(string objectName, Exception innerException);
    [DoesNotReturnAttribute]
public static void ThrowObjectDisposedException(string objectName, string message);
    [DoesNotReturnAttribute]
public static void ThrowOperationCanceledException();
    [DoesNotReturnAttribute]
public static void ThrowOperationCanceledException(string message);
    [DoesNotReturnAttribute]
public static void ThrowOperationCanceledException(string message, Exception innerException);
    [DoesNotReturnAttribute]
public static void ThrowOperationCanceledException(CancellationToken token);
    [DoesNotReturnAttribute]
public static void ThrowOperationCanceledException(string message, CancellationToken token);
    [DoesNotReturnAttribute]
public static void ThrowOperationCanceledException(string message, Exception innerException, CancellationToken token);
    [DoesNotReturnAttribute]
public static void ThrowPlatformNotSupportedException();
    [DoesNotReturnAttribute]
public static void ThrowPlatformNotSupportedException(string message);
    [DoesNotReturnAttribute]
public static void ThrowPlatformNotSupportedException(string message, Exception innerException);
    [DoesNotReturnAttribute]
public static void ThrowSynchronizationLockException();
    [DoesNotReturnAttribute]
public static void ThrowSynchronizationLockException(string message);
    [DoesNotReturnAttribute]
public static void ThrowSynchronizationLockException(string message, Exception innerException);
    [DoesNotReturnAttribute]
public static void ThrowTimeoutException();
    [DoesNotReturnAttribute]
public static void ThrowTimeoutException(string message);
    [DoesNotReturnAttribute]
public static void ThrowTimeoutException(string message, Exception innerException);
    [DoesNotReturnAttribute]
public static void ThrowUnauthorizedAccessException();
    [DoesNotReturnAttribute]
public static void ThrowUnauthorizedAccessException(string message);
    [DoesNotReturnAttribute]
public static void ThrowUnauthorizedAccessException(string message, Exception innerException);
    [DoesNotReturnAttribute]
public static void ThrowWin32Exception();
    [DoesNotReturnAttribute]
public static void ThrowWin32Exception(int error);
    [DoesNotReturnAttribute]
public static void ThrowWin32Exception(int error, string message);
    [DoesNotReturnAttribute]
public static void ThrowWin32Exception(string message);
    [DoesNotReturnAttribute]
public static void ThrowWin32Exception(string message, Exception innerException);
    [NullableContextAttribute("1")]
[DoesNotReturnAttribute]
public static T ThrowArrayTypeMismatchException();
    [DoesNotReturnAttribute]
public static T ThrowArrayTypeMismatchException(string message);
    [DoesNotReturnAttribute]
public static T ThrowArrayTypeMismatchException(string message, Exception innerException);
    [NullableContextAttribute("1")]
[DoesNotReturnAttribute]
public static T ThrowArgumentException();
    [DoesNotReturnAttribute]
public static T ThrowArgumentException(string message);
    [DoesNotReturnAttribute]
public static T ThrowArgumentException(string message, Exception innerException);
    [DoesNotReturnAttribute]
public static T ThrowArgumentException(string name, string message);
    [DoesNotReturnAttribute]
public static T ThrowArgumentException(string name, string message, Exception innerException);
    [NullableContextAttribute("1")]
[DoesNotReturnAttribute]
public static T ThrowArgumentNullException();
    [DoesNotReturnAttribute]
public static T ThrowArgumentNullException(string name);
    [DoesNotReturnAttribute]
public static T ThrowArgumentNullException(string name, Exception innerException);
    [DoesNotReturnAttribute]
public static T ThrowArgumentNullException(string name, string message);
    [NullableContextAttribute("1")]
[DoesNotReturnAttribute]
public static T ThrowArgumentOutOfRangeException();
    [DoesNotReturnAttribute]
public static T ThrowArgumentOutOfRangeException(string name);
    [DoesNotReturnAttribute]
public static T ThrowArgumentOutOfRangeException(string name, Exception innerException);
    [DoesNotReturnAttribute]
public static T ThrowArgumentOutOfRangeException(string name, string message);
    [DoesNotReturnAttribute]
public static T ThrowArgumentOutOfRangeException(string name, object value, string message);
    [NullableContextAttribute("1")]
[DoesNotReturnAttribute]
public static T ThrowCOMException();
    [DoesNotReturnAttribute]
public static T ThrowCOMException(string message);
    [DoesNotReturnAttribute]
public static T ThrowCOMException(string message, Exception innerException);
    [DoesNotReturnAttribute]
public static T ThrowCOMException(string message, int error);
    [NullableContextAttribute("1")]
[DoesNotReturnAttribute]
public static T ThrowExternalException();
    [DoesNotReturnAttribute]
public static T ThrowExternalException(string message);
    [DoesNotReturnAttribute]
public static T ThrowExternalException(string message, Exception innerException);
    [DoesNotReturnAttribute]
public static T ThrowExternalException(string message, int error);
    [NullableContextAttribute("1")]
[DoesNotReturnAttribute]
public static T ThrowFormatException();
    [DoesNotReturnAttribute]
public static T ThrowFormatException(string message);
    [DoesNotReturnAttribute]
public static T ThrowFormatException(string message, Exception innerException);
    [NullableContextAttribute("1")]
[DoesNotReturnAttribute]
public static T ThrowInsufficientMemoryException();
    [DoesNotReturnAttribute]
public static T ThrowInsufficientMemoryException(string message);
    [DoesNotReturnAttribute]
public static T ThrowInsufficientMemoryException(string message, Exception innerException);
    [NullableContextAttribute("1")]
[DoesNotReturnAttribute]
public static T ThrowInvalidDataException();
    [DoesNotReturnAttribute]
public static T ThrowInvalidDataException(string message);
    [DoesNotReturnAttribute]
public static T ThrowInvalidDataException(string message, Exception innerException);
    [NullableContextAttribute("1")]
[DoesNotReturnAttribute]
public static T ThrowInvalidOperationException();
    [DoesNotReturnAttribute]
public static T ThrowInvalidOperationException(string message);
    [DoesNotReturnAttribute]
public static T ThrowInvalidOperationException(string message, Exception innerException);
    [NullableContextAttribute("1")]
[DoesNotReturnAttribute]
public static T ThrowLockRecursionException();
    [DoesNotReturnAttribute]
public static T ThrowLockRecursionException(string message);
    [DoesNotReturnAttribute]
public static T ThrowLockRecursionException(string message, Exception innerException);
    [NullableContextAttribute("1")]
[DoesNotReturnAttribute]
public static T ThrowMissingFieldException();
    [DoesNotReturnAttribute]
public static T ThrowMissingFieldException(string message);
    [DoesNotReturnAttribute]
public static T ThrowMissingFieldException(string message, Exception innerException);
    [DoesNotReturnAttribute]
public static T ThrowMissingFieldException(string className, string fieldName);
    [NullableContextAttribute("1")]
[DoesNotReturnAttribute]
public static T ThrowMissingMemberException();
    [DoesNotReturnAttribute]
public static T ThrowMissingMemberException(string message);
    [DoesNotReturnAttribute]
public static T ThrowMissingMemberException(string message, Exception innerException);
    [DoesNotReturnAttribute]
public static T ThrowMissingMemberException(string className, string memberName);
    [NullableContextAttribute("1")]
[DoesNotReturnAttribute]
public static T ThrowMissingMethodException();
    [DoesNotReturnAttribute]
public static T ThrowMissingMethodException(string message);
    [DoesNotReturnAttribute]
public static T ThrowMissingMethodException(string message, Exception innerException);
    [DoesNotReturnAttribute]
public static T ThrowMissingMethodException(string className, string methodName);
    [NullableContextAttribute("1")]
[DoesNotReturnAttribute]
public static T ThrowNotSupportedException();
    [DoesNotReturnAttribute]
public static T ThrowNotSupportedException(string message);
    [DoesNotReturnAttribute]
public static T ThrowNotSupportedException(string message, Exception innerException);
    [DoesNotReturnAttribute]
public static T ThrowObjectDisposedException(string objectName);
    [DoesNotReturnAttribute]
public static T ThrowObjectDisposedException(string objectName, Exception innerException);
    [DoesNotReturnAttribute]
public static T ThrowObjectDisposedException(string objectName, string message);
    [NullableContextAttribute("1")]
[DoesNotReturnAttribute]
public static T ThrowOperationCanceledException();
    [DoesNotReturnAttribute]
public static T ThrowOperationCanceledException(string message);
    [DoesNotReturnAttribute]
public static T ThrowOperationCanceledException(string message, Exception innerException);
    [NullableContextAttribute("1")]
[DoesNotReturnAttribute]
public static T ThrowOperationCanceledException(CancellationToken token);
    [DoesNotReturnAttribute]
public static T ThrowOperationCanceledException(string message, CancellationToken token);
    [DoesNotReturnAttribute]
public static T ThrowOperationCanceledException(string message, Exception innerException, CancellationToken token);
    [NullableContextAttribute("1")]
[DoesNotReturnAttribute]
public static T ThrowPlatformNotSupportedException();
    [DoesNotReturnAttribute]
public static T ThrowPlatformNotSupportedException(string message);
    [DoesNotReturnAttribute]
public static T ThrowPlatformNotSupportedException(string message, Exception innerException);
    [NullableContextAttribute("1")]
[DoesNotReturnAttribute]
public static T ThrowSynchronizationLockException();
    [DoesNotReturnAttribute]
public static T ThrowSynchronizationLockException(string message);
    [DoesNotReturnAttribute]
public static T ThrowSynchronizationLockException(string message, Exception innerException);
    [NullableContextAttribute("1")]
[DoesNotReturnAttribute]
public static T ThrowTimeoutException();
    [DoesNotReturnAttribute]
public static T ThrowTimeoutException(string message);
    [DoesNotReturnAttribute]
public static T ThrowTimeoutException(string message, Exception innerException);
    [NullableContextAttribute("1")]
[DoesNotReturnAttribute]
public static T ThrowUnauthorizedAccessException();
    [DoesNotReturnAttribute]
public static T ThrowUnauthorizedAccessException(string message);
    [DoesNotReturnAttribute]
public static T ThrowUnauthorizedAccessException(string message, Exception innerException);
    [NullableContextAttribute("1")]
[DoesNotReturnAttribute]
public static T ThrowWin32Exception();
    [NullableContextAttribute("1")]
[DoesNotReturnAttribute]
public static T ThrowWin32Exception(int error);
    [DoesNotReturnAttribute]
public static T ThrowWin32Exception(int error, string message);
    [DoesNotReturnAttribute]
public static T ThrowWin32Exception(string message);
    [DoesNotReturnAttribute]
public static T ThrowWin32Exception(string message, Exception innerException);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class Microsoft.Toolkit.Diagnostics.TypeExtensions : object {
    private static IReadOnlyDictionary`2<Type, string> BuiltInTypesMap;
    private static ConditionalWeakTable`2<Type, string> DisplayNames;
    private static TypeExtensions();
    [ExtensionAttribute]
public static string ToTypeString(Type type);
    [ExtensionAttribute]
private static bool IsGenericType(Type type);
    [CompilerGeneratedAttribute]
internal static string <ToTypeString>g__FormatDisplayString|2_0(Type type, int genericTypeOffset, ReadOnlySpan`1<Type> typeArguments);
}
[ExtensionAttribute]
public static class Microsoft.Toolkit.Diagnostics.ValueTypeExtensions : object {
    private static ReadOnlySpan`1<byte> HexCharactersTable { get; }
    private static ReadOnlySpan`1<byte> get_HexCharactersTable();
    [ExtensionAttribute]
[SkipLocalsInitAttribute]
public static string ToHexString(T value);
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class System.Runtime.CompilerServices.IsUnmanagedAttribute : Attribute {
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("27524")]
internal class System.Runtime.CompilerServices.NativeIntegerAttribute : Attribute {
    public Boolean[] TransformFlags;
    public NativeIntegerAttribute(Boolean[] );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("27524")]
internal class System.Runtime.CompilerServices.NullableAttribute : Attribute {
    public Byte[] NullableFlags;
    public NullableAttribute(byte );
    public NullableAttribute(Byte[] );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("5196")]
internal class System.Runtime.CompilerServices.NullableContextAttribute : Attribute {
    public byte Flag;
    public NullableContextAttribute(byte );
}
[GeneratedCodeAttribute("Nerdbank.GitVersioning.Tasks", "3.3.37.35081")]
[ExcludeFromCodeCoverageAttribute]
internal static class ThisAssembly : object {
    internal static string AssemblyVersion;
    internal static string AssemblyFileVersion;
    internal static string AssemblyInformationalVersion;
    internal static string AssemblyName;
    internal static string AssemblyTitle;
    internal static string AssemblyConfiguration;
    internal static string GitCommitId;
    internal static string PublicKey;
    internal static string PublicKeyToken;
    internal static bool IsPublicRelease;
    internal static bool IsPrerelease;
    internal static DateTime GitCommitDate;
    internal static string RootNamespace;
    private static ThisAssembly();
}
