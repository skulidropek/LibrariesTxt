[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DefaultMemberAttribute("Item")]
[DebuggerDisplayAttribute("Count = {Count}")]
internal class Microsoft.Collections.Extensions.DictionarySlim`2 : object {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private static Entry[] InitialEntries;
    private int count;
    private int freeList;
    private Int32[] buckets;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Entry[] entries;
    public int Count { get; }
    public TValue Item { get; }
    private static DictionarySlim`2();
    public sealed virtual int get_Count();
    public sealed virtual TValue get_Item(TKey key);
    public sealed virtual void Clear();
    public bool ContainsKey(TKey key);
    public bool TryGetValue(TKey key, TValue& value);
    public sealed virtual bool TryRemove(TKey key);
    public TValue& GetOrAddValueRef(TKey key);
    private TValue& AddKey(TKey key, int bucketIndex);
    private Entry[] Resize();
    [NullableContextAttribute("0")]
public Enumerator<TKey, TValue> GetEnumerator();
    private static void ThrowArgumentExceptionForKeyNotFound(TKey key);
    private static void ThrowInvalidOperationExceptionForMaxCapacityExceeded();
}
internal static class Microsoft.Collections.Extensions.HashHelpers : object {
    [NullableAttribute("1")]
public static Int32[] SizeOneIntArray;
    private static HashHelpers();
}
internal interface Microsoft.Collections.Extensions.IDictionarySlim {
    public int Count { get; }
    public abstract virtual int get_Count();
    public abstract virtual void Clear();
}
internal interface Microsoft.Collections.Extensions.IDictionarySlim`1 {
    [NullableContextAttribute("1")]
public abstract virtual bool TryRemove(TKey key);
}
[NullableContextAttribute("1")]
[DefaultMemberAttribute("Item")]
internal interface Microsoft.Collections.Extensions.IDictionarySlim`2 {
    public TValue Item { get; }
    public abstract virtual TValue get_Item(TKey key);
}
[EditorBrowsableAttribute("1")]
[ObsoleteAttribute("This type is not intended to be used directly by user code")]
public static class Microsoft.Toolkit.Mvvm.ComponentModel.__Internals.__ObservableValidatorHelper : object {
    [NullableContextAttribute("1")]
[EditorBrowsableAttribute("1")]
[ObsoleteAttribute("This method is not intended to be called directly by user code")]
public static void ValidateProperty(ObservableValidator instance, object value, string propertyName);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[AttributeUsageAttribute("256")]
public class Microsoft.Toolkit.Mvvm.ComponentModel.AlsoNotifyChangeForAttribute : Attribute {
    [CompilerGeneratedAttribute]
private String[] <PropertyNames>k__BackingField;
    public String[] PropertyNames { get; }
    public AlsoNotifyChangeForAttribute(string propertyName);
    public AlsoNotifyChangeForAttribute(string propertyName, String[] otherPropertyNames);
    [CompilerGeneratedAttribute]
public String[] get_PropertyNames();
}
[AttributeUsageAttribute("4")]
public class Microsoft.Toolkit.Mvvm.ComponentModel.INotifyPropertyChangedAttribute : Attribute {
    [CompilerGeneratedAttribute]
private bool <IncludeAdditionalHelperMethods>k__BackingField;
    public bool IncludeAdditionalHelperMethods { get; public set; }
    [CompilerGeneratedAttribute]
public bool get_IncludeAdditionalHelperMethods();
    [CompilerGeneratedAttribute]
public void set_IncludeAdditionalHelperMethods(bool value);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public abstract class Microsoft.Toolkit.Mvvm.ComponentModel.ObservableObject : object {
    [CompilerGeneratedAttribute]
private PropertyChangedEventHandler PropertyChanged;
    [CompilerGeneratedAttribute]
private PropertyChangingEventHandler PropertyChanging;
    [CompilerGeneratedAttribute]
public sealed virtual void add_PropertyChanged(PropertyChangedEventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_PropertyChanged(PropertyChangedEventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_PropertyChanging(PropertyChangingEventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_PropertyChanging(PropertyChangingEventHandler value);
    [NullableContextAttribute("1")]
protected virtual void OnPropertyChanged(PropertyChangedEventArgs e);
    [NullableContextAttribute("1")]
protected virtual void OnPropertyChanging(PropertyChangingEventArgs e);
    protected void OnPropertyChanged(string propertyName);
    protected void OnPropertyChanging(string propertyName);
    [NullableContextAttribute("1")]
protected bool SetProperty(T& field, T newValue, string propertyName);
    [NullableContextAttribute("1")]
protected bool SetProperty(T& field, T newValue, IEqualityComparer`1<T> comparer, string propertyName);
    [NullableContextAttribute("1")]
protected bool SetProperty(T oldValue, T newValue, Action`1<T> callback, string propertyName);
    [NullableContextAttribute("1")]
protected bool SetProperty(T oldValue, T newValue, IEqualityComparer`1<T> comparer, Action`1<T> callback, string propertyName);
    [NullableContextAttribute("1")]
protected bool SetProperty(T oldValue, T newValue, TModel model, Action`2<TModel, T> callback, string propertyName);
    [NullableContextAttribute("1")]
protected bool SetProperty(T oldValue, T newValue, IEqualityComparer`1<T> comparer, TModel model, Action`2<TModel, T> callback, string propertyName);
    protected bool SetPropertyAndNotifyOnCompletion(TaskNotifier& taskNotifier, Task newValue, string propertyName);
    protected bool SetPropertyAndNotifyOnCompletion(TaskNotifier& taskNotifier, Task newValue, Action`1<Task> callback, string propertyName);
    protected bool SetPropertyAndNotifyOnCompletion(TaskNotifier`1& taskNotifier, Task`1<T> newValue, string propertyName);
    protected bool SetPropertyAndNotifyOnCompletion(TaskNotifier`1& taskNotifier, Task`1<T> newValue, Action`1<Task`1<T>> callback, string propertyName);
    [NullableContextAttribute("1")]
private bool SetPropertyAndNotifyOnCompletion(ITaskNotifier`1<TTask> taskNotifier, TTask newValue, Action`1<TTask> callback, string propertyName);
}
[AttributeUsageAttribute("4")]
public class Microsoft.Toolkit.Mvvm.ComponentModel.ObservableObjectAttribute : Attribute {
}
[AttributeUsageAttribute("256")]
public class Microsoft.Toolkit.Mvvm.ComponentModel.ObservablePropertyAttribute : Attribute {
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class Microsoft.Toolkit.Mvvm.ComponentModel.ObservableRecipient : ObservableObject {
    [CompilerGeneratedAttribute]
private IMessenger <Messenger>k__BackingField;
    private bool isActive;
    protected IMessenger Messenger { get; }
    public bool IsActive { get; public set; }
    protected ObservableRecipient(IMessenger messenger);
    [CompilerGeneratedAttribute]
protected IMessenger get_Messenger();
    public bool get_IsActive();
    public void set_IsActive(bool value);
    protected virtual void OnActivated();
    protected virtual void OnDeactivated();
    protected virtual void Broadcast(T oldValue, T newValue, string propertyName);
    protected bool SetProperty(T& field, T newValue, bool broadcast, string propertyName);
    protected bool SetProperty(T& field, T newValue, IEqualityComparer`1<T> comparer, bool broadcast, string propertyName);
    protected bool SetProperty(T oldValue, T newValue, Action`1<T> callback, bool broadcast, string propertyName);
    protected bool SetProperty(T oldValue, T newValue, IEqualityComparer`1<T> comparer, Action`1<T> callback, bool broadcast, string propertyName);
    protected bool SetProperty(T oldValue, T newValue, TModel model, Action`2<TModel, T> callback, bool broadcast, string propertyName);
    protected bool SetProperty(T oldValue, T newValue, IEqualityComparer`1<T> comparer, TModel model, Action`2<TModel, T> callback, bool broadcast, string propertyName);
}
[AttributeUsageAttribute("4")]
public class Microsoft.Toolkit.Mvvm.ComponentModel.ObservableRecipientAttribute : Attribute {
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class Microsoft.Toolkit.Mvvm.ComponentModel.ObservableValidator : ObservableObject {
    private static ConditionalWeakTable`2<Type, Action`1<object>> EntityValidatorMap;
    private static ConditionalWeakTable`2<Type, Dictionary`2<string, string>> DisplayNamesMap;
    private static PropertyChangedEventArgs HasErrorsChangedEventArgs;
    private ValidationContext validationContext;
    private Dictionary`2<string, List`1<ValidationResult>> errors;
    private int totalErrors;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private EventHandler`1<DataErrorsChangedEventArgs> ErrorsChanged;
    public bool HasErrors { get; }
    protected ObservableValidator(IDictionary`2<object, object> items);
    [NullableContextAttribute("2")]
protected ObservableValidator(IServiceProvider serviceProvider, IDictionary`2<object, object> items);
    protected ObservableValidator(ValidationContext validationContext);
    private static ObservableValidator();
    [CompilerGeneratedAttribute]
public sealed virtual void add_ErrorsChanged(EventHandler`1<DataErrorsChangedEventArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_ErrorsChanged(EventHandler`1<DataErrorsChangedEventArgs> value);
    public sealed virtual bool get_HasErrors();
    protected bool SetProperty(T& field, T newValue, bool validate, string propertyName);
    protected bool SetProperty(T& field, T newValue, IEqualityComparer`1<T> comparer, bool validate, string propertyName);
    protected bool SetProperty(T oldValue, T newValue, Action`1<T> callback, bool validate, string propertyName);
    protected bool SetProperty(T oldValue, T newValue, IEqualityComparer`1<T> comparer, Action`1<T> callback, bool validate, string propertyName);
    protected bool SetProperty(T oldValue, T newValue, TModel model, Action`2<TModel, T> callback, bool validate, string propertyName);
    protected bool SetProperty(T oldValue, T newValue, IEqualityComparer`1<T> comparer, TModel model, Action`2<TModel, T> callback, bool validate, string propertyName);
    protected bool TrySetProperty(T& field, T newValue, IReadOnlyCollection`1& errors, string propertyName);
    protected bool TrySetProperty(T& field, T newValue, IEqualityComparer`1<T> comparer, IReadOnlyCollection`1& errors, string propertyName);
    protected bool TrySetProperty(T oldValue, T newValue, Action`1<T> callback, IReadOnlyCollection`1& errors, string propertyName);
    protected bool TrySetProperty(T oldValue, T newValue, IEqualityComparer`1<T> comparer, Action`1<T> callback, IReadOnlyCollection`1& errors, string propertyName);
    protected bool TrySetProperty(T oldValue, T newValue, TModel model, Action`2<TModel, T> callback, IReadOnlyCollection`1& errors, string propertyName);
    protected bool TrySetProperty(T oldValue, T newValue, IEqualityComparer`1<T> comparer, TModel model, Action`2<TModel, T> callback, IReadOnlyCollection`1& errors, string propertyName);
    [NullableContextAttribute("2")]
protected void ClearErrors(string propertyName);
    public IEnumerable`1<ValidationResult> GetErrors(string propertyName);
    private sealed virtual override IEnumerable System.ComponentModel.INotifyDataErrorInfo.GetErrors(string propertyName);
    protected void ValidateAllProperties();
    [NullableContextAttribute("2")]
protected internal void ValidateProperty(object value, string propertyName);
    [NullableContextAttribute("2")]
private bool TryValidateProperty(object value, string propertyName, IReadOnlyCollection`1& errors);
    private void ClearAllErrors();
    private void ClearErrorsForProperty(string propertyName);
    private string GetDisplayNameForProperty(string propertyName);
    private static void ThrowArgumentNullExceptionForNullPropertyName();
    [CompilerGeneratedAttribute]
private IEnumerable`1<ValidationResult> <GetErrors>g__GetAllErrors|28_0();
    [CompilerGeneratedAttribute]
internal static Action`1<object> <ValidateAllProperties>g__GetValidationAction|30_0(Type type);
    [CompilerGeneratedAttribute]
internal static Action`1<object> <ValidateAllProperties>g__GetValidationActionFallback|30_1(Type type);
    [CompilerGeneratedAttribute]
internal static Dictionary`2<string, string> <GetDisplayNameForProperty>g__GetDisplayNames|35_0(Type type);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.Toolkit.Mvvm.DependencyInjection.Ioc : object {
    [CompilerGeneratedAttribute]
private static Ioc <Default>k__BackingField;
    [NullableAttribute("2")]
private IServiceProvider modreq(System.Runtime.CompilerServices.IsVolatile) serviceProvider;
    public static Ioc Default { get; }
    private static Ioc();
    [CompilerGeneratedAttribute]
public static Ioc get_Default();
    public sealed virtual object GetService(Type serviceType);
    public T GetService();
    public T GetRequiredService();
    public void ConfigureServices(IServiceProvider serviceProvider);
    private static void ThrowInvalidOperationExceptionForMissingInitialization();
    private static void ThrowInvalidOperationExceptionForUnregisteredType();
    private static void ThrowInvalidOperationExceptionForRepeatedConfiguration();
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class Microsoft.Toolkit.Mvvm.Input.AsyncRelayCommand : ObservableObject {
    [NullableAttribute("1")]
internal static PropertyChangedEventArgs CanBeCanceledChangedEventArgs;
    [NullableAttribute("1")]
internal static PropertyChangedEventArgs IsCancellationRequestedChangedEventArgs;
    [NullableAttribute("1")]
internal static PropertyChangedEventArgs IsRunningChangedEventArgs;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Func`1<Task> execute;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Func`2<CancellationToken, Task> cancelableExecute;
    private Func`1<bool> canExecute;
    private CancellationTokenSource cancellationTokenSource;
    [CompilerGeneratedAttribute]
private EventHandler CanExecuteChanged;
    private TaskNotifier executionTask;
    public Task ExecutionTask { get; private set; }
    public bool CanBeCanceled { get; }
    public bool IsCancellationRequested { get; }
    public bool IsRunning { get; }
    [NullableContextAttribute("1")]
public AsyncRelayCommand(Func`1<Task> execute);
    [NullableContextAttribute("1")]
public AsyncRelayCommand(Func`2<CancellationToken, Task> cancelableExecute);
    [NullableContextAttribute("1")]
public AsyncRelayCommand(Func`1<Task> execute, Func`1<bool> canExecute);
    [NullableContextAttribute("1")]
public AsyncRelayCommand(Func`2<CancellationToken, Task> cancelableExecute, Func`1<bool> canExecute);
    private static AsyncRelayCommand();
    [CompilerGeneratedAttribute]
public sealed virtual void add_CanExecuteChanged(EventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_CanExecuteChanged(EventHandler value);
    public sealed virtual Task get_ExecutionTask();
    private void set_ExecutionTask(Task value);
    public sealed virtual bool get_CanBeCanceled();
    public sealed virtual bool get_IsCancellationRequested();
    public sealed virtual bool get_IsRunning();
    public sealed virtual void NotifyCanExecuteChanged();
    public sealed virtual bool CanExecute(object parameter);
    public sealed virtual void Execute(object parameter);
    [NullableContextAttribute("1")]
public sealed virtual Task ExecuteAsync(object parameter);
    public sealed virtual void Cancel();
    [CompilerGeneratedAttribute]
private void <set_ExecutionTask>b__17_0(Task _);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class Microsoft.Toolkit.Mvvm.Input.AsyncRelayCommand`1 : ObservableObject {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Func`2<T, Task> execute;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Func`3<T, CancellationToken, Task> cancelableExecute;
    private Predicate`1<T> canExecute;
    private CancellationTokenSource cancellationTokenSource;
    [CompilerGeneratedAttribute]
private EventHandler CanExecuteChanged;
    private TaskNotifier executionTask;
    public Task ExecutionTask { get; private set; }
    public bool CanBeCanceled { get; }
    public bool IsCancellationRequested { get; }
    public bool IsRunning { get; }
    public AsyncRelayCommand`1(Func`2<T, Task> execute);
    public AsyncRelayCommand`1(Func`3<T, CancellationToken, Task> cancelableExecute);
    public AsyncRelayCommand`1(Func`2<T, Task> execute, Predicate`1<T> canExecute);
    public AsyncRelayCommand`1(Func`3<T, CancellationToken, Task> cancelableExecute, Predicate`1<T> canExecute);
    [CompilerGeneratedAttribute]
public sealed virtual void add_CanExecuteChanged(EventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_CanExecuteChanged(EventHandler value);
    public sealed virtual Task get_ExecutionTask();
    private void set_ExecutionTask(Task value);
    public sealed virtual bool get_CanBeCanceled();
    public sealed virtual bool get_IsCancellationRequested();
    public sealed virtual bool get_IsRunning();
    public sealed virtual void NotifyCanExecuteChanged();
    public sealed virtual bool CanExecute(T parameter);
    public sealed virtual bool CanExecute(object parameter);
    public sealed virtual void Execute(T parameter);
    public sealed virtual void Execute(object parameter);
    [NullableContextAttribute("1")]
public sealed virtual Task ExecuteAsync(T parameter);
    [NullableContextAttribute("1")]
public sealed virtual Task ExecuteAsync(object parameter);
    public sealed virtual void Cancel();
    [CompilerGeneratedAttribute]
private void <set_ExecutionTask>b__14_0(Task _);
}
public interface Microsoft.Toolkit.Mvvm.Input.IAsyncRelayCommand {
    [NullableAttribute("2")]
public Task ExecutionTask { get; }
    public bool CanBeCanceled { get; }
    public bool IsCancellationRequested { get; }
    public bool IsRunning { get; }
    [NullableContextAttribute("2")]
public abstract virtual Task get_ExecutionTask();
    public abstract virtual bool get_CanBeCanceled();
    public abstract virtual bool get_IsCancellationRequested();
    public abstract virtual bool get_IsRunning();
    [NullableContextAttribute("1")]
public abstract virtual Task ExecuteAsync(object parameter);
    public abstract virtual void Cancel();
}
public interface Microsoft.Toolkit.Mvvm.Input.IAsyncRelayCommand`1 {
    [NullableContextAttribute("1")]
public abstract virtual Task ExecuteAsync(T parameter);
}
[AttributeUsageAttribute("64")]
public class Microsoft.Toolkit.Mvvm.Input.ICommandAttribute : Attribute {
}
public interface Microsoft.Toolkit.Mvvm.Input.IRelayCommand {
    public abstract virtual void NotifyCanExecuteChanged();
}
[NullableContextAttribute("2")]
public interface Microsoft.Toolkit.Mvvm.Input.IRelayCommand`1 {
    public abstract virtual bool CanExecute(T parameter);
    public abstract virtual void Execute(T parameter);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class Microsoft.Toolkit.Mvvm.Input.RelayCommand : object {
    [NullableAttribute("1")]
private Action execute;
    private Func`1<bool> canExecute;
    [CompilerGeneratedAttribute]
private EventHandler CanExecuteChanged;
    [NullableContextAttribute("1")]
public RelayCommand(Action execute);
    [NullableContextAttribute("1")]
public RelayCommand(Action execute, Func`1<bool> canExecute);
    [CompilerGeneratedAttribute]
public sealed virtual void add_CanExecuteChanged(EventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_CanExecuteChanged(EventHandler value);
    public sealed virtual void NotifyCanExecuteChanged();
    public sealed virtual bool CanExecute(object parameter);
    public sealed virtual void Execute(object parameter);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class Microsoft.Toolkit.Mvvm.Input.RelayCommand`1 : object {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Action`1<T> execute;
    private Predicate`1<T> canExecute;
    [CompilerGeneratedAttribute]
private EventHandler CanExecuteChanged;
    public RelayCommand`1(Action`1<T> execute);
    public RelayCommand`1(Action`1<T> execute, Predicate`1<T> canExecute);
    [CompilerGeneratedAttribute]
public sealed virtual void add_CanExecuteChanged(EventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_CanExecuteChanged(EventHandler value);
    public sealed virtual void NotifyCanExecuteChanged();
    public sealed virtual bool CanExecute(T parameter);
    public sealed virtual bool CanExecute(object parameter);
    public sealed virtual void Execute(T parameter);
    public sealed virtual void Execute(object parameter);
}
[NullableContextAttribute("1")]
public interface Microsoft.Toolkit.Mvvm.Messaging.IMessenger {
    public abstract virtual bool IsRegistered(object recipient, TToken token);
    public abstract virtual void Register(TRecipient recipient, TToken token, MessageHandler`2<TRecipient, TMessage> handler);
    public abstract virtual void UnregisterAll(object recipient);
    public abstract virtual void UnregisterAll(object recipient, TToken token);
    public abstract virtual void Unregister(object recipient, TToken token);
    public abstract virtual TMessage Send(TMessage message, TToken token);
    public abstract virtual void Cleanup();
    public abstract virtual void Reset();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class Microsoft.Toolkit.Mvvm.Messaging.IMessengerExtensions : object {
    [ExtensionAttribute]
public static bool IsRegistered(IMessenger messenger, object recipient);
    [ExtensionAttribute]
public static void RegisterAll(IMessenger messenger, object recipient);
    [ExtensionAttribute]
public static void RegisterAll(IMessenger messenger, object recipient, TToken token);
    [ExtensionAttribute]
public static void Register(IMessenger messenger, IRecipient`1<TMessage> recipient);
    [ExtensionAttribute]
public static void Register(IMessenger messenger, IRecipient`1<TMessage> recipient, TToken token);
    [ExtensionAttribute]
public static void Register(IMessenger messenger, object recipient, MessageHandler`2<object, TMessage> handler);
    [ExtensionAttribute]
public static void Register(IMessenger messenger, TRecipient recipient, MessageHandler`2<TRecipient, TMessage> handler);
    [ExtensionAttribute]
public static void Register(IMessenger messenger, object recipient, TToken token, MessageHandler`2<object, TMessage> handler);
    [ExtensionAttribute]
public static void Unregister(IMessenger messenger, object recipient);
    [ExtensionAttribute]
public static TMessage Send(IMessenger messenger);
    [ExtensionAttribute]
public static TMessage Send(IMessenger messenger, TMessage message);
    [ExtensionAttribute]
public static TMessage Send(IMessenger messenger, TToken token);
    [CompilerGeneratedAttribute]
internal static Action`2<IMessenger, object> <RegisterAll>g__LoadRegistrationMethodsForType|4_0(Type recipientType);
    [CompilerGeneratedAttribute]
internal static Action`3<IMessenger, object, TToken> <RegisterAll>g__LoadRegistrationMethodsForType|5_0(Type recipientType);
    [CompilerGeneratedAttribute]
internal static Action`3<IMessenger, object, TToken> <RegisterAll>g__LoadRegistrationMethodsForTypeFallback|5_1(Type recipientType);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[IsByRefLikeAttribute]
[ObsoleteAttribute("Types with embedded references are not supported in this version of your compiler.", "True")]
internal class Microsoft.Toolkit.Mvvm.Messaging.Internals.ArrayPoolBufferWriter`1 : ValueType {
    private static int DefaultInitialBufferSize;
    private T[] array;
    private int index;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public ReadOnlySpan`1<T> Span { get; }
    public static ArrayPoolBufferWriter`1<T> Create();
    public ReadOnlySpan`1<T> get_Span();
    public void Add(T item);
    public void Reset();
    private void ResizeBuffer();
    public void Dispose();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[IsReadOnlyAttribute]
internal class Microsoft.Toolkit.Mvvm.Messaging.Internals.Type2 : ValueType {
    public Type TMessage;
    public Type TToken;
    public Type2(Type tMessage, Type tToken);
    public sealed virtual bool Equals(Type2 other);
    [NullableContextAttribute("2")]
public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
[IsReadOnlyAttribute]
internal class Microsoft.Toolkit.Mvvm.Messaging.Internals.Unit : ValueType {
    public sealed virtual bool Equals(Unit other);
    [NullableContextAttribute("2")]
public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
[NullableContextAttribute("1")]
public interface Microsoft.Toolkit.Mvvm.Messaging.IRecipient`1 {
    public abstract virtual void Receive(TMessage message);
}
public class Microsoft.Toolkit.Mvvm.Messaging.MessageHandler`2 : MulticastDelegate {
    public MessageHandler`2(object object, IntPtr method);
    [NullableContextAttribute("1")]
public virtual void Invoke(TRecipient recipient, TMessage message);
    public virtual IAsyncResult BeginInvoke(TRecipient recipient, TMessage message, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.Toolkit.Mvvm.Messaging.Messages.AsyncCollectionRequestMessage`1 : object {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private List`1<ValueTuple`2<Task`1<T>, Func`2<CancellationToken, Task`1<T>>>> responses;
    private CancellationTokenSource cancellationTokenSource;
    public CancellationToken CancellationToken { get; }
    public CancellationToken get_CancellationToken();
    public void Reply(T response);
    public void Reply(Task`1<T> response);
    public void Reply(Func`2<CancellationToken, Task`1<T>> response);
    [AsyncStateMachineAttribute("Microsoft.Toolkit.Mvvm.Messaging.Messages.AsyncCollectionRequestMessage`1/<GetResponsesAsync>d__7")]
public Task`1<IReadOnlyCollection`1<T>> GetResponsesAsync(CancellationToken cancellationToken);
    [AsyncIteratorStateMachineAttribute("Microsoft.Toolkit.Mvvm.Messaging.Messages.AsyncCollectionRequestMessage`1/<GetAsyncEnumerator>d__8")]
[EditorBrowsableAttribute("1")]
public sealed virtual IAsyncEnumerator`1<T> GetAsyncEnumerator(CancellationToken cancellationToken);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.Toolkit.Mvvm.Messaging.Messages.AsyncRequestMessage`1 : object {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Task`1<T> response;
    [CompilerGeneratedAttribute]
private bool <HasReceivedResponse>k__BackingField;
    public Task`1<T> Response { get; }
    public bool HasReceivedResponse { get; private set; }
    public Task`1<T> get_Response();
    [CompilerGeneratedAttribute]
public bool get_HasReceivedResponse();
    [CompilerGeneratedAttribute]
private void set_HasReceivedResponse(bool value);
    public void Reply(T response);
    public void Reply(Task`1<T> response);
    [EditorBrowsableAttribute("1")]
public TaskAwaiter`1<T> GetAwaiter();
    private static void ThrowInvalidOperationExceptionForNoResponseReceived();
    private static void ThrowInvalidOperationExceptionForDuplicateReply();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.Toolkit.Mvvm.Messaging.Messages.CollectionRequestMessage`1 : object {
    private List`1<T> responses;
    public IReadOnlyCollection`1<T> Responses { get; }
    public IReadOnlyCollection`1<T> get_Responses();
    public void Reply(T response);
    [EditorBrowsableAttribute("1")]
public sealed virtual IEnumerator`1<T> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.Toolkit.Mvvm.Messaging.Messages.PropertyChangedMessage`1 : object {
    [CompilerGeneratedAttribute]
private object <Sender>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private string <PropertyName>k__BackingField;
    [CompilerGeneratedAttribute]
private T <OldValue>k__BackingField;
    [CompilerGeneratedAttribute]
private T <NewValue>k__BackingField;
    public object Sender { get; }
    [NullableAttribute("2")]
public string PropertyName { get; }
    public T OldValue { get; }
    public T NewValue { get; }
    public PropertyChangedMessage`1(object sender, string propertyName, T oldValue, T newValue);
    [CompilerGeneratedAttribute]
public object get_Sender();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public string get_PropertyName();
    [CompilerGeneratedAttribute]
public T get_OldValue();
    [CompilerGeneratedAttribute]
public T get_NewValue();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.Toolkit.Mvvm.Messaging.Messages.RequestMessage`1 : object {
    private T response;
    [CompilerGeneratedAttribute]
private bool <HasReceivedResponse>k__BackingField;
    public T Response { get; }
    public bool HasReceivedResponse { get; private set; }
    public T get_Response();
    [CompilerGeneratedAttribute]
public bool get_HasReceivedResponse();
    [CompilerGeneratedAttribute]
private void set_HasReceivedResponse(bool value);
    public void Reply(T response);
    public static T op_Implicit(RequestMessage`1<T> message);
    private static void ThrowInvalidOperationExceptionForNoResponseReceived();
    private static void ThrowInvalidOperationExceptionForDuplicateReply();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.Toolkit.Mvvm.Messaging.Messages.ValueChangedMessage`1 : object {
    [CompilerGeneratedAttribute]
private T <Value>k__BackingField;
    public T Value { get; }
    public ValueChangedMessage`1(T value);
    [CompilerGeneratedAttribute]
public T get_Value();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.Toolkit.Mvvm.Messaging.StrongReferenceMessenger : object {
    private DictionarySlim`2<Recipient, HashSet`1<IMapping>> recipientsMap;
    private DictionarySlim`2<Type2, IMapping> typesMap;
    [CompilerGeneratedAttribute]
private static StrongReferenceMessenger <Default>k__BackingField;
    public static StrongReferenceMessenger Default { get; }
    private static StrongReferenceMessenger();
    [CompilerGeneratedAttribute]
public static StrongReferenceMessenger get_Default();
    public sealed virtual bool IsRegistered(object recipient, TToken token);
    public sealed virtual void Register(TRecipient recipient, TToken token, MessageHandler`2<TRecipient, TMessage> handler);
    public sealed virtual void UnregisterAll(object recipient);
    public sealed virtual void UnregisterAll(object recipient, TToken token);
    public sealed virtual void Unregister(object recipient, TToken token);
    public sealed virtual TMessage Send(TMessage message, TToken token);
    private sealed virtual override void Microsoft.Toolkit.Mvvm.Messaging.IMessenger.Cleanup();
    public sealed virtual void Reset();
    private bool TryGetMapping(Mapping`2& mapping);
    private Mapping`2<TMessage, TToken> GetOrAddMapping();
    private static void ThrowInvalidOperationExceptionForDuplicateRegistration();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.Toolkit.Mvvm.Messaging.WeakReferenceMessenger : object {
    private DictionarySlim`2<Type2, ConditionalWeakTable`2<object, IDictionarySlim>> recipientsMap;
    [CompilerGeneratedAttribute]
private static WeakReferenceMessenger <Default>k__BackingField;
    public static WeakReferenceMessenger Default { get; }
    private static WeakReferenceMessenger();
    [CompilerGeneratedAttribute]
public static WeakReferenceMessenger get_Default();
    public sealed virtual bool IsRegistered(object recipient, TToken token);
    public sealed virtual void Register(TRecipient recipient, TToken token, MessageHandler`2<TRecipient, TMessage> handler);
    public sealed virtual void UnregisterAll(object recipient);
    public sealed virtual void UnregisterAll(object recipient, TToken token);
    public sealed virtual void Unregister(object recipient, TToken token);
    public sealed virtual TMessage Send(TMessage message, TToken token);
    public sealed virtual void Cleanup();
    public sealed virtual void Reset();
    private void CleanupWithNonBlockingLock();
    private void CleanupWithoutLock();
    private static void ThrowInvalidOperationExceptionForDuplicateRegistration();
    [CompilerGeneratedAttribute]
internal static void <.ctor>g__Gen2GcCallbackProxy|1_0(object target);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class System.Gen2GcCallback : CriticalFinalizerObject {
    private Action`1<object> callback;
    private GCHandle handle;
    private Gen2GcCallback(Action`1<object> callback, object target);
    public static void Register(Action`1<object> callback, object target);
    protected virtual override void Finalize();
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("27524")]
internal class System.Runtime.CompilerServices.NullableAttribute : Attribute {
    public Byte[] NullableFlags;
    public NullableAttribute(byte );
    public NullableAttribute(Byte[] );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("5196")]
internal class System.Runtime.CompilerServices.NullableContextAttribute : Attribute {
    public byte Flag;
    public NullableContextAttribute(byte );
}
[GeneratedCodeAttribute("Nerdbank.GitVersioning.Tasks", "3.3.37.35081")]
[ExcludeFromCodeCoverageAttribute]
internal static class ThisAssembly : object {
    internal static string AssemblyVersion;
    internal static string AssemblyFileVersion;
    internal static string AssemblyInformationalVersion;
    internal static string AssemblyName;
    internal static string AssemblyTitle;
    internal static string AssemblyConfiguration;
    internal static string GitCommitId;
    internal static string PublicKey;
    internal static string PublicKeyToken;
    internal static bool IsPublicRelease;
    internal static bool IsPrerelease;
    internal static DateTime GitCommitDate;
    internal static string RootNamespace;
    private static ThisAssembly();
}
