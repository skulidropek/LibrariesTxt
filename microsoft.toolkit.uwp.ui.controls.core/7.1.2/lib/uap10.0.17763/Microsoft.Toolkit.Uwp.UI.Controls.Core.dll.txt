[TemplatePartAttribute]
[TemplatePartAttribute]
public class Microsoft.Toolkit.Uwp.UI.Controls.CameraPreview : Control {
    private static string Preview_MediaPlayerElementControl;
    private static string Preview_FrameSourceGroupButton;
    private CameraHelper _cameraHelper;
    private MediaPlayer _mediaPlayer;
    private MediaPlayerElement _mediaPlayerElementControl;
    private Button _frameSourceGroupButton;
    private IReadOnlyList`1<MediaFrameSourceGroup> _frameSourceGroups;
    [CompilerGeneratedAttribute]
private EventHandler`1<PreviewFailedEventArgs> PreviewFailed;
    public static DependencyProperty IsFrameSourceGroupButtonVisibleProperty;
    private bool IsFrameSourceGroupButtonAvailable { get; }
    public CameraHelper CameraHelper { get; private set; }
    public bool IsFrameSourceGroupButtonVisible { get; public set; }
    private static CameraPreview();
    private bool get_IsFrameSourceGroupButtonAvailable();
    public CameraHelper get_CameraHelper();
    private void set_CameraHelper(CameraHelper value);
    [AsyncStateMachineAttribute("Microsoft.Toolkit.Uwp.UI.Controls.CameraPreview/<StartAsync>d__12")]
public Task StartAsync();
    [AsyncStateMachineAttribute("Microsoft.Toolkit.Uwp.UI.Controls.CameraPreview/<StartAsync>d__13")]
public Task StartAsync(CameraHelper cameraHelper);
    [AsyncStateMachineAttribute("Microsoft.Toolkit.Uwp.UI.Controls.CameraPreview/<OnApplyTemplate>d__15")]
protected virtual void OnApplyTemplate();
    [AsyncStateMachineAttribute("Microsoft.Toolkit.Uwp.UI.Controls.CameraPreview/<InitializeAsync>d__16")]
private Task InitializeAsync();
    [AsyncStateMachineAttribute("Microsoft.Toolkit.Uwp.UI.Controls.CameraPreview/<FrameSourceGroupButton_ClickAsync>d__17")]
private void FrameSourceGroupButton_ClickAsync(object sender, RoutedEventArgs e);
    private void InvokePreviewFailed(string error);
    private void SetMediaPlayerSource();
    private void SetUIControls(CameraHelperResult result);
    private void SetFrameSourceGroupButtonVisibility();
    public void Stop();
    [CompilerGeneratedAttribute]
public void add_PreviewFailed(EventHandler`1<PreviewFailedEventArgs> value);
    [CompilerGeneratedAttribute]
public void remove_PreviewFailed(EventHandler`1<PreviewFailedEventArgs> value);
    public bool get_IsFrameSourceGroupButtonVisible();
    public void set_IsFrameSourceGroupButtonVisible(bool value);
    private static void IsFrameSourceGroupButtonVisibleChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    [CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private void <>n__0();
}
[ExtensionAttribute]
internal static class Microsoft.Toolkit.Uwp.UI.Controls.ControlHelpers : object {
    [CompilerGeneratedAttribute]
private static bool <IsXamlRootAvailable>k__BackingField;
    internal static bool IsXamlRootAvailable { get; }
    private static ControlHelpers();
    [ExtensionAttribute]
public static ContainerVisual GetVisual(UIElement element);
    [ExtensionAttribute]
public static int Mod(int value, int module);
    [ExtensionAttribute]
public static int IncMod(int value, int module);
    [ExtensionAttribute]
public static int DecMod(int value, int module);
    [ExtensionAttribute]
public static double Mod(double value, double module);
    [CompilerGeneratedAttribute]
internal static bool get_IsXamlRootAvailable();
}
[ObsoleteAttribute("DropShadowPanel will be removed in a future release, please use the AttachedDropShadow or AttachedCardShadow implementations instead.")]
[TemplatePartAttribute]
public class Microsoft.Toolkit.Uwp.UI.Controls.DropShadowPanel : ContentControl {
    private static string PartShadow;
    private DropShadow _dropShadow;
    private SpriteVisual _shadowVisual;
    private Border _border;
    public static DependencyProperty BlurRadiusProperty;
    public static DependencyProperty ColorProperty;
    public static DependencyProperty OffsetXProperty;
    public static DependencyProperty OffsetYProperty;
    public static DependencyProperty OffsetZProperty;
    public static DependencyProperty ShadowOpacityProperty;
    public static DependencyProperty IsMaskedProperty;
    public DropShadow DropShadow { get; }
    public CompositionBrush Mask { get; public set; }
    public double BlurRadius { get; public set; }
    public Color Color { get; public set; }
    public double OffsetX { get; public set; }
    public double OffsetY { get; public set; }
    public double OffsetZ { get; public set; }
    public double ShadowOpacity { get; public set; }
    public bool IsMasked { get; public set; }
    private static DropShadowPanel();
    protected virtual void OnApplyTemplate();
    protected virtual void OnContentChanged(object oldContent, object newContent);
    private void OnSizeChanged(object sender, SizeChangedEventArgs e);
    private void ConfigureShadowVisualForCastingElement();
    private void OnBlurRadiusChanged(double newValue);
    private void OnColorChanged(Color newValue);
    private void OnOffsetXChanged(double newValue);
    private void OnOffsetYChanged(double newValue);
    private void OnOffsetZChanged(double newValue);
    private void OnShadowOpacityChanged(double newValue);
    private void UpdateShadowMask();
    private void CustomMaskedElement_Loaded(object sender, RoutedEventArgs e);
    private void UpdateShadowOffset(float x, float y, float z);
    private void UpdateShadowSize();
    public DropShadow get_DropShadow();
    public CompositionBrush get_Mask();
    public void set_Mask(CompositionBrush value);
    public double get_BlurRadius();
    public void set_BlurRadius(double value);
    public Color get_Color();
    public void set_Color(Color value);
    public double get_OffsetX();
    public void set_OffsetX(double value);
    public double get_OffsetY();
    public void set_OffsetY(double value);
    public double get_OffsetZ();
    public void set_OffsetZ(double value);
    public double get_ShadowOpacity();
    public void set_ShadowOpacity(double value);
    public bool get_IsMasked();
    public void set_IsMasked(bool value);
    private static void OnBlurRadiusChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    private static void OnColorChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    private static void OnOffsetXChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    private static void OnOffsetYChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    private static void OnOffsetZChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    private static void OnShadowOpacityChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    private static void OnIsMaskedChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
}
public class Microsoft.Toolkit.Uwp.UI.Controls.EditorChangedArgs : object {
    [CompilerGeneratedAttribute]
private RichEditBox <Old>k__BackingField;
    [CompilerGeneratedAttribute]
private RichEditBox <New>k__BackingField;
    public RichEditBox Old { get; internal set; }
    public RichEditBox New { get; internal set; }
    [CompilerGeneratedAttribute]
public RichEditBox get_Old();
    [CompilerGeneratedAttribute]
internal void set_Old(RichEditBox value);
    [CompilerGeneratedAttribute]
public RichEditBox get_New();
    [CompilerGeneratedAttribute]
internal void set_New(RichEditBox value);
}
public enum Microsoft.Toolkit.Uwp.UI.Controls.ImageAlignment : Enum {
    public int value__;
    public static ImageAlignment None;
    public static ImageAlignment Left;
    public static ImageAlignment Right;
    public static ImageAlignment Top;
    public static ImageAlignment Bottom;
}
public class Microsoft.Toolkit.Uwp.UI.Controls.ImageEx : ImageExBase {
    public static DependencyProperty NineGridProperty;
    public Thickness NineGrid { get; public set; }
    private static ImageEx();
    public Thickness get_NineGrid();
    public void set_NineGrid(Thickness value);
    public virtual CompositionBrush GetAlphaMask();
    public CastingSource GetAsCastingSource();
}
[TemplateVisualStateAttribute]
[TemplateVisualStateAttribute]
[TemplateVisualStateAttribute]
[TemplateVisualStateAttribute]
[TemplatePartAttribute]
public abstract class Microsoft.Toolkit.Uwp.UI.Controls.ImageExBase : Control {
    private bool _isInViewport;
    protected static string PartImage;
    protected static string CommonGroup;
    protected static string LoadingState;
    protected static string LoadedState;
    protected static string UnloadedState;
    protected static string FailedState;
    [CompilerGeneratedAttribute]
private object <Image>k__BackingField;
    public static DependencyProperty StretchProperty;
    public static DependencyProperty DecodePixelHeightProperty;
    public static DependencyProperty DecodePixelTypeProperty;
    public static DependencyProperty DecodePixelWidthProperty;
    public static DependencyProperty IsCacheEnabledProperty;
    public static DependencyProperty EnableLazyLoadingProperty;
    public static DependencyProperty LazyLoadingThresholdProperty;
    [CompilerGeneratedAttribute]
private ImageExFailedEventHandler ImageExFailed;
    [CompilerGeneratedAttribute]
private ImageExOpenedEventHandler ImageExOpened;
    [CompilerGeneratedAttribute]
private EventHandler ImageExInitialized;
    [CompilerGeneratedAttribute]
private bool <IsInitialized>k__BackingField;
    public static DependencyProperty PlaceholderSourceProperty;
    public static DependencyProperty PlaceholderStretchProperty;
    public static DependencyProperty SourceProperty;
    private CancellationTokenSource _tokenSource;
    private object _lazyLoadingSource;
    protected object Image { get; private set; }
    public bool WaitUntilLoaded { get; }
    public bool IsInitialized { get; private set; }
    public int DecodePixelHeight { get; public set; }
    public DecodePixelType DecodePixelType { get; public set; }
    public int DecodePixelWidth { get; public set; }
    public Stretch Stretch { get; public set; }
    public bool IsCacheEnabled { get; public set; }
    public bool EnableLazyLoading { get; public set; }
    public double LazyLoadingThreshold { get; public set; }
    public ImageSource PlaceholderSource { get; public set; }
    public Stretch PlaceholderStretch { get; public set; }
    public object Source { get; public set; }
    private static ImageExBase();
    [CompilerGeneratedAttribute]
protected object get_Image();
    [CompilerGeneratedAttribute]
private void set_Image(object value);
    public sealed virtual bool get_WaitUntilLoaded();
    protected void AttachImageOpened(RoutedEventHandler handler);
    protected void RemoveImageOpened(RoutedEventHandler handler);
    protected void AttachImageFailed(ExceptionRoutedEventHandler handler);
    protected void RemoveImageFailed(ExceptionRoutedEventHandler handler);
    protected virtual void OnApplyTemplate();
    protected virtual void OnImageOpened(object sender, RoutedEventArgs e);
    protected virtual void OnImageFailed(object sender, ExceptionRoutedEventArgs e);
    private void ImageExBase_LayoutUpdated(object sender, object e);
    private void InvalidateLazyLoading();
    public abstract virtual CompositionBrush GetAlphaMask();
    [CompilerGeneratedAttribute]
public void add_ImageExFailed(ImageExFailedEventHandler value);
    [CompilerGeneratedAttribute]
public void remove_ImageExFailed(ImageExFailedEventHandler value);
    [CompilerGeneratedAttribute]
public void add_ImageExOpened(ImageExOpenedEventHandler value);
    [CompilerGeneratedAttribute]
public void remove_ImageExOpened(ImageExOpenedEventHandler value);
    [CompilerGeneratedAttribute]
public void add_ImageExInitialized(EventHandler value);
    [CompilerGeneratedAttribute]
public void remove_ImageExInitialized(EventHandler value);
    [CompilerGeneratedAttribute]
public bool get_IsInitialized();
    [CompilerGeneratedAttribute]
private void set_IsInitialized(bool value);
    public int get_DecodePixelHeight();
    public void set_DecodePixelHeight(int value);
    public DecodePixelType get_DecodePixelType();
    public void set_DecodePixelType(DecodePixelType value);
    public int get_DecodePixelWidth();
    public void set_DecodePixelWidth(int value);
    public Stretch get_Stretch();
    public void set_Stretch(Stretch value);
    public bool get_IsCacheEnabled();
    public void set_IsCacheEnabled(bool value);
    public bool get_EnableLazyLoading();
    public void set_EnableLazyLoading(bool value);
    public double get_LazyLoadingThreshold();
    public void set_LazyLoadingThreshold(double value);
    private static void EnableLazyLoadingChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    private static void LazyLoadingThresholdChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    public ImageSource get_PlaceholderSource();
    public void set_PlaceholderSource(ImageSource value);
    private static void PlaceholderSourceChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    protected virtual void OnPlaceholderSourceChanged(DependencyPropertyChangedEventArgs e);
    public Stretch get_PlaceholderStretch();
    public void set_PlaceholderStretch(Stretch value);
    public object get_Source();
    public void set_Source(object value);
    private static void SourceChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    private static bool IsHttpUri(Uri uri);
    private void AttachSource(ImageSource source);
    [AsyncStateMachineAttribute("Microsoft.Toolkit.Uwp.UI.Controls.ImageExBase/<SetSource>d__86")]
private void SetSource(object source);
    [AsyncStateMachineAttribute("Microsoft.Toolkit.Uwp.UI.Controls.ImageExBase/<LoadImageAsync>d__87")]
private Task LoadImageAsync(Uri imageUri, CancellationToken token);
    protected virtual Task`1<ImageSource> ProvideCachedResourceAsync(Uri imageUri, CancellationToken token);
}
public class Microsoft.Toolkit.Uwp.UI.Controls.ImageExFailedEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
private Exception <ErrorException>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ErrorMessage>k__BackingField;
    public Exception ErrorException { get; private set; }
    public string ErrorMessage { get; private set; }
    public ImageExFailedEventArgs(Exception errorException);
    [CompilerGeneratedAttribute]
public Exception get_ErrorException();
    [CompilerGeneratedAttribute]
private void set_ErrorException(Exception value);
    [CompilerGeneratedAttribute]
public string get_ErrorMessage();
    [CompilerGeneratedAttribute]
private void set_ErrorMessage(string value);
}
public class Microsoft.Toolkit.Uwp.UI.Controls.ImageExFailedEventHandler : MulticastDelegate {
    public ImageExFailedEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, ImageExFailedEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, ImageExFailedEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class Microsoft.Toolkit.Uwp.UI.Controls.ImageExOpenedEventArgs : EventArgs {
}
public class Microsoft.Toolkit.Uwp.UI.Controls.ImageExOpenedEventHandler : MulticastDelegate {
    public ImageExOpenedEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, ImageExOpenedEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, ImageExOpenedEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
[TemplateVisualStateAttribute]
[TemplateVisualStateAttribute]
[TemplatePartAttribute]
[TemplatePartAttribute]
public class Microsoft.Toolkit.Uwp.UI.Controls.InAppNotification : ContentControl {
    public static DependencyProperty KeyFrameDurationProperty;
    private static string GroupContent;
    private static string StateContentVisible;
    private static string StateContentCollapsed;
    private static string DismissButtonPart;
    private static string ContentPresenterPart;
    private ContentPresenter _contentProvider;
    private DispatcherQueueTimer _dismissTimer;
    private Button _dismissButton;
    private DispatcherQueue _dispatcherQueue;
    private InAppNotificationDismissKind _lastDismissKind;
    private List`1<NotificationOptions> _stackedNotificationOptions;
    private VisualStateGroup _visualStateGroup;
    [CompilerGeneratedAttribute]
private InAppNotificationOpeningEventHandler Opening;
    [CompilerGeneratedAttribute]
private EventHandler Opened;
    [CompilerGeneratedAttribute]
private InAppNotificationClosingEventHandler Closing;
    [CompilerGeneratedAttribute]
private InAppNotificationClosedEventHandler Closed;
    public static DependencyProperty ShowDismissButtonProperty;
    public static DependencyProperty AnimationDurationProperty;
    public static DependencyProperty VerticalOffsetProperty;
    public static DependencyProperty HorizontalOffsetProperty;
    public static DependencyProperty StackModeProperty;
    public bool ShowDismissButton { get; public set; }
    public TimeSpan AnimationDuration { get; public set; }
    public double VerticalOffset { get; public set; }
    public double HorizontalOffset { get; public set; }
    public StackMode StackMode { get; public set; }
    private static InAppNotification();
    public static TimeSpan GetKeyFrameDuration(DependencyObject obj);
    public static void SetKeyFrameDuration(DependencyObject obj, TimeSpan value);
    private static void OnKeyFrameAnimationChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    protected virtual void OnApplyTemplate();
    public void Show(int duration);
    public void Show(string text, int duration);
    public void Show(UIElement element, int duration);
    public void Show(DataTemplate dataTemplate, int duration);
    public void Show(object content, int duration);
    public void Dismiss(bool dismissAll);
    private void Dismiss(InAppNotificationDismissKind dismissKind, bool dismissAll);
    private void UpdateContent(NotificationOptions notificationOptions);
    private void Show(NotificationOptions notificationOptions);
    [CompilerGeneratedAttribute]
public void add_Opening(InAppNotificationOpeningEventHandler value);
    [CompilerGeneratedAttribute]
public void remove_Opening(InAppNotificationOpeningEventHandler value);
    [CompilerGeneratedAttribute]
public void add_Opened(EventHandler value);
    [CompilerGeneratedAttribute]
public void remove_Opened(EventHandler value);
    [CompilerGeneratedAttribute]
public void add_Closing(InAppNotificationClosingEventHandler value);
    [CompilerGeneratedAttribute]
public void remove_Closing(InAppNotificationClosingEventHandler value);
    [CompilerGeneratedAttribute]
public void add_Closed(InAppNotificationClosedEventHandler value);
    [CompilerGeneratedAttribute]
public void remove_Closed(InAppNotificationClosedEventHandler value);
    private void DismissButton_Click(object sender, RoutedEventArgs e);
    private void DismissTimer_Tick(object sender, object e);
    private void OnCurrentStateChanging(object sender, VisualStateChangedEventArgs e);
    private void OnCurrentStateChanged(object sender, VisualStateChangedEventArgs e);
    private void OnNotificationVisible();
    private void OnNotificationCollapsed();
    private void RaiseAutomationNotification();
    public bool get_ShowDismissButton();
    public void set_ShowDismissButton(bool value);
    public TimeSpan get_AnimationDuration();
    public void set_AnimationDuration(TimeSpan value);
    public double get_VerticalOffset();
    public void set_VerticalOffset(double value);
    public double get_HorizontalOffset();
    public void set_HorizontalOffset(double value);
    public StackMode get_StackMode();
    public void set_StackMode(StackMode value);
    private static void OnShowDismissButtonChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
}
public class Microsoft.Toolkit.Uwp.UI.Controls.InAppNotificationClosedEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
private InAppNotificationDismissKind <DismissKind>k__BackingField;
    public InAppNotificationDismissKind DismissKind { get; private set; }
    public InAppNotificationClosedEventArgs(InAppNotificationDismissKind dismissKind);
    [CompilerGeneratedAttribute]
public InAppNotificationDismissKind get_DismissKind();
    [CompilerGeneratedAttribute]
private void set_DismissKind(InAppNotificationDismissKind value);
}
public class Microsoft.Toolkit.Uwp.UI.Controls.InAppNotificationClosedEventHandler : MulticastDelegate {
    public InAppNotificationClosedEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, InAppNotificationClosedEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, InAppNotificationClosedEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class Microsoft.Toolkit.Uwp.UI.Controls.InAppNotificationClosingEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
private InAppNotificationDismissKind <DismissKind>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Cancel>k__BackingField;
    public InAppNotificationDismissKind DismissKind { get; private set; }
    public bool Cancel { get; public set; }
    public InAppNotificationClosingEventArgs(InAppNotificationDismissKind dismissKind);
    [CompilerGeneratedAttribute]
public InAppNotificationDismissKind get_DismissKind();
    [CompilerGeneratedAttribute]
private void set_DismissKind(InAppNotificationDismissKind value);
    [CompilerGeneratedAttribute]
public bool get_Cancel();
    [CompilerGeneratedAttribute]
public void set_Cancel(bool value);
}
public class Microsoft.Toolkit.Uwp.UI.Controls.InAppNotificationClosingEventHandler : MulticastDelegate {
    public InAppNotificationClosingEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, InAppNotificationClosingEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, InAppNotificationClosingEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public enum Microsoft.Toolkit.Uwp.UI.Controls.InAppNotificationDismissKind : Enum {
    public int value__;
    public static InAppNotificationDismissKind Programmatic;
    public static InAppNotificationDismissKind User;
    public static InAppNotificationDismissKind Timeout;
}
public class Microsoft.Toolkit.Uwp.UI.Controls.InAppNotificationOpeningEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
private bool <Cancel>k__BackingField;
    public bool Cancel { get; public set; }
    [CompilerGeneratedAttribute]
public bool get_Cancel();
    [CompilerGeneratedAttribute]
public void set_Cancel(bool value);
}
public class Microsoft.Toolkit.Uwp.UI.Controls.InAppNotificationOpeningEventHandler : MulticastDelegate {
    public InAppNotificationOpeningEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, InAppNotificationOpeningEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, InAppNotificationOpeningEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
[DefaultMemberAttribute("Item")]
public class Microsoft.Toolkit.Uwp.UI.Controls.InlineCollectionWrapper : object {
    private IList`1<Inline> _collection;
    public int Count { get; }
    public bool IsReadOnly { get; }
    public Inline Item { get; public set; }
    public sealed virtual int get_Count();
    public sealed virtual bool get_IsReadOnly();
    public sealed virtual Inline get_Item(int index);
    public sealed virtual void set_Item(int index, Inline value);
    public sealed virtual void Add(Inline item);
    public sealed virtual void Clear();
    public sealed virtual bool Contains(Inline item);
    public sealed virtual void CopyTo(Inline[] array, int arrayIndex);
    [IteratorStateMachineAttribute("Microsoft.Toolkit.Uwp.UI.Controls.InlineCollectionWrapper/<GetEnumerator>d__13")]
public sealed virtual IEnumerator`1<Inline> GetEnumerator();
    public sealed virtual int IndexOf(Inline item);
    public sealed virtual void Insert(int index, Inline item);
    public sealed virtual bool Remove(Inline item);
    public sealed virtual void RemoveAt(int index);
    internal void AddItemsToTextBlock(TextBlock textBlock);
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
}
[TemplateVisualStateAttribute]
[TemplateVisualStateAttribute]
public class Microsoft.Toolkit.Uwp.UI.Controls.Loading : ContentControl {
    private FrameworkElement _presenter;
    public static DependencyProperty IsLoadingProperty;
    public bool IsLoading { get; public set; }
    private static Loading();
    protected virtual void OnApplyTemplate();
    private void Update();
    public bool get_IsLoading();
    public void set_IsLoading(bool value);
    private static void IsLoadingPropertyChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
}
[ObsoleteAttribute("This control will be removed in a future major release. Please use the MenuBar control from the WinUI Library instead.")]
public class Microsoft.Toolkit.Uwp.UI.Controls.Menu : ItemsControl {
    private WrapPanel _wrapPanel;
    private static Dictionary`2<string, DependencyObject> MenuItemInputGestureCache;
    public static DependencyProperty OrientationProperty;
    public static DependencyProperty MenuFlyoutStyleProperty;
    public static DependencyProperty TooltipStyleProperty;
    public static DependencyProperty TooltipPlacementProperty;
    [CompilerGeneratedAttribute]
private MenuItem <SelectedMenuItem>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsOpened>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsInTransitionState>k__BackingField;
    private static UInt32 AltScanCode;
    private bool _onlyAltCharacterPressed;
    private Control _lastFocusElement;
    private bool _isLostFocus;
    private Control _lastFocusElementBeforeMenu;
    private Rect _bounds;
    private static string InputGestureTextName;
    private static string AllowTooltipName;
    public static DependencyProperty InputGestureTextProperty;
    public static DependencyProperty AllowTooltipProperty;
    private static string CtrlValue;
    private static string ShiftValue;
    private static string AltValue;
    [CompilerGeneratedAttribute]
private Nullable`1<FlyoutPlacementMode> <CurrentFlyoutPlacement>k__BackingField;
    public Orientation Orientation { get; public set; }
    public Style MenuFlyoutStyle { get; public set; }
    public Style TooltipStyle { get; public set; }
    public PlacementMode TooltipPlacement { get; public set; }
    public MenuItem SelectedMenuItem { get; internal set; }
    public bool IsOpened { get; internal set; }
    internal bool IsInTransitionState { get; internal set; }
    private bool AllowTooltip { get; }
    internal Nullable`1<FlyoutPlacementMode> CurrentFlyoutPlacement { get; internal set; }
    private static Menu();
    public Orientation get_Orientation();
    public void set_Orientation(Orientation value);
    public Style get_MenuFlyoutStyle();
    public void set_MenuFlyoutStyle(Style value);
    public Style get_TooltipStyle();
    public void set_TooltipStyle(Style value);
    public PlacementMode get_TooltipPlacement();
    public void set_TooltipPlacement(PlacementMode value);
    [CompilerGeneratedAttribute]
public MenuItem get_SelectedMenuItem();
    [CompilerGeneratedAttribute]
internal void set_SelectedMenuItem(MenuItem value);
    [CompilerGeneratedAttribute]
public bool get_IsOpened();
    [CompilerGeneratedAttribute]
internal void set_IsOpened(bool value);
    [CompilerGeneratedAttribute]
internal bool get_IsInTransitionState();
    [CompilerGeneratedAttribute]
internal void set_IsInTransitionState(bool value);
    protected virtual void OnApplyTemplate();
    protected virtual bool IsItemItsOwnContainerOverride(object item);
    protected virtual DependencyObject GetContainerForItemOverride();
    private bool get_AllowTooltip();
    private void Menu_Loaded(object sender, RoutedEventArgs e);
    private void Menu_Unloaded(object sender, RoutedEventArgs e);
    private void CoreWindow_PointerMoved(CoreWindow sender, PointerEventArgs args);
    private void CoreWindow_KeyDown(CoreWindow sender, KeyEventArgs args);
    private void Menu_LostFocus(object sender, RoutedEventArgs e);
    private void Dispatcher_AcceleratorKeyActivated(CoreDispatcher sender, AcceleratorKeyEventArgs args);
    private void HideToolTip();
    private static void InputGestureTextChanged(DependencyObject sender, DependencyPropertyChangedEventArgs e);
    public static string GetInputGestureText(FrameworkElement obj);
    public static void SetInputGestureText(FrameworkElement obj, string value);
    public static bool GetAllowTooltip(Menu obj);
    public static void SetAllowTooltip(Menu obj, bool value);
    [CompilerGeneratedAttribute]
internal Nullable`1<FlyoutPlacementMode> get_CurrentFlyoutPlacement();
    [CompilerGeneratedAttribute]
internal void set_CurrentFlyoutPlacement(Nullable`1<FlyoutPlacementMode> value);
    private static bool NavigateUsingKeyboard(KeyEventArgs args, Menu menu, Orientation orientation);
    private static MenuItem GetNextMenuItem(Menu menu, int moveCount);
    private static string MapInputToGestureKey(VirtualKey key, bool menuHasFocus);
    internal bool UpdateMenuItemsFlyoutPlacement();
    internal FlyoutPlacementMode GetMenuFlyoutPlacementMode();
    private static void OrientationPropertyChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    private static void RemoveElementFromCache(FrameworkElement descendant);
    private void ShowMenuItemsToolTips();
    private void UnderlineMenuItems();
    private void RemoveUnderlineMenuItems();
    private void HideMenuItemsTooltips();
    internal void CalculateBounds();
}
[ObsoleteAttribute("This control will be removed in a future major release. Please use the MenuBar control from the WinUI Library instead.")]
public class Microsoft.Toolkit.Uwp.UI.Controls.MenuItem : ItemsControl {
    private static string FlyoutButtonName;
    private static char UnderlineCharacter;
    private Menu _parentMenu;
    private bool _isOpened;
    private bool _menuFlyoutRepositioned;
    private bool _menuFlyoutPlacementChanged;
    private string _originalHeader;
    private bool _isInternalHeaderUpdate;
    [CompilerGeneratedAttribute]
private MenuFlyout <MenuFlyout>k__BackingField;
    [CompilerGeneratedAttribute]
private Button <FlyoutButton>k__BackingField;
    private Rect _bounds;
    public static DependencyProperty HeaderProperty;
    public static DependencyProperty HeaderTemplateProperty;
    internal MenuFlyout MenuFlyout { get; internal set; }
    internal Button FlyoutButton { get; private set; }
    unknown object InternalHeader {private set; }
    public object Header { get; public set; }
    public DataTemplate HeaderTemplate { get; public set; }
    public bool IsOpened { get; private set; }
    private static MenuItem();
    [CompilerGeneratedAttribute]
internal MenuFlyout get_MenuFlyout();
    [CompilerGeneratedAttribute]
internal void set_MenuFlyout(MenuFlyout value);
    [CompilerGeneratedAttribute]
internal Button get_FlyoutButton();
    [CompilerGeneratedAttribute]
private void set_FlyoutButton(Button value);
    private void set_InternalHeader(object value);
    public object get_Header();
    public void set_Header(object value);
    public DataTemplate get_HeaderTemplate();
    public void set_HeaderTemplate(DataTemplate value);
    public bool get_IsOpened();
    private void set_IsOpened(bool value);
    internal bool ContainsPoint(Point point);
    public void HideMenu();
    protected virtual void OnApplyTemplate();
    private void MenuItem_IsEnabledChanged(object sender, DependencyPropertyChangedEventArgs e);
    internal void CalculateBounds();
    internal IEnumerable`1<MenuFlyoutItemBase> GetMenuFlyoutItems();
    private void GetMenuFlyoutItemItems(IList`1<MenuFlyoutItemBase> menuFlyoutItems, List`1<MenuFlyoutItemBase> allItems);
    internal void ShowTooltip();
    private string RemoveAlt(string inputGesture);
    internal void HideTooltip();
    private void ReAddItemsToFlyout();
    private void AddItemToFlyout(object item);
    private void InsertItemToFlyout(object item, int index);
    private void Items_VectorChanged(IObservableVector`1<object> sender, IVectorChangedEventArgs e);
    private void FlyoutButton_PointerExited(object sender, PointerRoutedEventArgs e);
    private void MenuFlyout_Closed(object sender, object e);
    private void MenuFlyout_Opened(object sender, object e);
    private void ShowMenuRepositioned(double menuWidth, double menuHeight);
    public void ShowMenu();
    protected virtual void OnTapped(TappedRoutedEventArgs e);
    protected virtual void OnGotFocus(RoutedEventArgs e);
    internal void Underline();
    private static void OnHeaderChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    internal void RemoveUnderline();
    internal void UpdateEnabledVisualState();
}
[TemplatePartAttribute]
public class Microsoft.Toolkit.Uwp.UI.Controls.MetadataControl : Control {
    public static DependencyProperty SeparatorProperty;
    public static DependencyProperty AccessibleSeparatorProperty;
    public static DependencyProperty ItemsProperty;
    public static DependencyProperty TextBlockStyleProperty;
    private static string TextContainerPart;
    private TextBlock _textContainer;
    public string Separator { get; public set; }
    public string AccessibleSeparator { get; public set; }
    public IEnumerable`1<MetadataItem> Items { get; public set; }
    public Style TextBlockStyle { get; public set; }
    private static MetadataControl();
    public string get_Separator();
    public void set_Separator(string value);
    public string get_AccessibleSeparator();
    public void set_AccessibleSeparator(string value);
    public IEnumerable`1<MetadataItem> get_Items();
    public void set_Items(IEnumerable`1<MetadataItem> value);
    public Style get_TextBlockStyle();
    public void set_TextBlockStyle(Style value);
    protected virtual void OnApplyTemplate();
    private static void OnMetadataItemsChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    private static void OnPropertyChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    private void OnActualThemeChanged(FrameworkElement sender, object args);
    private void Update();
    private void NotifyLiveRegionChanged();
}
public class Microsoft.Toolkit.Uwp.UI.Controls.MetadataItem : ValueType {
    [CompilerGeneratedAttribute]
private string <Label>k__BackingField;
    [CompilerGeneratedAttribute]
private string <AccessibleLabel>k__BackingField;
    [CompilerGeneratedAttribute]
private ICommand <Command>k__BackingField;
    [CompilerGeneratedAttribute]
private object <CommandParameter>k__BackingField;
    public string Label { get; public set; }
    public string AccessibleLabel { get; public set; }
    public ICommand Command { get; public set; }
    public object CommandParameter { get; public set; }
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public string get_Label();
    [CompilerGeneratedAttribute]
public void set_Label(string value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public string get_AccessibleLabel();
    [CompilerGeneratedAttribute]
public void set_AccessibleLabel(string value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public ICommand get_Command();
    [CompilerGeneratedAttribute]
public void set_Command(ICommand value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public object get_CommandParameter();
    [CompilerGeneratedAttribute]
public void set_CommandParameter(object value);
}
internal class Microsoft.Toolkit.Uwp.UI.Controls.Microsoft_Toolkit_Uwp_UI_Controls_Core_XamlTypeInfo.Activator : MulticastDelegate {
    public Activator(object object, IntPtr method);
    public virtual object Invoke();
    public virtual IAsyncResult BeginInvoke(AsyncCallback callback, object object);
    public virtual object EndInvoke(IAsyncResult result);
}
internal class Microsoft.Toolkit.Uwp.UI.Controls.Microsoft_Toolkit_Uwp_UI_Controls_Core_XamlTypeInfo.AddToCollection : MulticastDelegate {
    public AddToCollection(object object, IntPtr method);
    public virtual void Invoke(object instance, object item);
    public virtual IAsyncResult BeginInvoke(object instance, object item, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
internal class Microsoft.Toolkit.Uwp.UI.Controls.Microsoft_Toolkit_Uwp_UI_Controls_Core_XamlTypeInfo.AddToDictionary : MulticastDelegate {
    public AddToDictionary(object object, IntPtr method);
    public virtual void Invoke(object instance, object key, object item);
    public virtual IAsyncResult BeginInvoke(object instance, object key, object item, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
internal class Microsoft.Toolkit.Uwp.UI.Controls.Microsoft_Toolkit_Uwp_UI_Controls_Core_XamlTypeInfo.BoxInstanceMethod : MulticastDelegate {
    public BoxInstanceMethod(object object, IntPtr method);
    public virtual object Invoke(object instance);
    public virtual IAsyncResult BeginInvoke(object instance, AsyncCallback callback, object object);
    public virtual object EndInvoke(IAsyncResult result);
}
internal class Microsoft.Toolkit.Uwp.UI.Controls.Microsoft_Toolkit_Uwp_UI_Controls_Core_XamlTypeInfo.CreateFromStringMethod : MulticastDelegate {
    public CreateFromStringMethod(object object, IntPtr method);
    public virtual object Invoke(string args);
    public virtual IAsyncResult BeginInvoke(string args, AsyncCallback callback, object object);
    public virtual object EndInvoke(IAsyncResult result);
}
internal class Microsoft.Toolkit.Uwp.UI.Controls.Microsoft_Toolkit_Uwp_UI_Controls_Core_XamlTypeInfo.Getter : MulticastDelegate {
    public Getter(object object, IntPtr method);
    public virtual object Invoke(object instance);
    public virtual IAsyncResult BeginInvoke(object instance, AsyncCallback callback, object object);
    public virtual object EndInvoke(IAsyncResult result);
}
internal class Microsoft.Toolkit.Uwp.UI.Controls.Microsoft_Toolkit_Uwp_UI_Controls_Core_XamlTypeInfo.Setter : MulticastDelegate {
    public Setter(object object, IntPtr method);
    public virtual void Invoke(object instance, object value);
    public virtual IAsyncResult BeginInvoke(object instance, object value, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
[GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks", " 10.0.19041.685")]
[DebuggerNonUserCodeAttribute]
internal class Microsoft.Toolkit.Uwp.UI.Controls.Microsoft_Toolkit_Uwp_UI_Controls_Core_XamlTypeInfo.XamlMember : object {
    private XamlTypeInfoProvider _provider;
    private string _name;
    private bool _isAttachable;
    private bool _isDependencyProperty;
    private bool _isReadOnly;
    private string _typeName;
    private string _targetTypeName;
    [CompilerGeneratedAttribute]
private Getter <Getter>k__BackingField;
    [CompilerGeneratedAttribute]
private Setter <Setter>k__BackingField;
    public string Name { get; }
    public IXamlType Type { get; }
    public IXamlType TargetType { get; }
    public bool IsAttachable { get; }
    public bool IsDependencyProperty { get; }
    public bool IsReadOnly { get; }
    public Getter Getter { get; public set; }
    public Setter Setter { get; public set; }
    public XamlMember(XamlTypeInfoProvider provider, string name, string typeName);
    public sealed virtual string get_Name();
    public sealed virtual IXamlType get_Type();
    public void SetTargetTypeName(string targetTypeName);
    public sealed virtual IXamlType get_TargetType();
    public void SetIsAttachable();
    public sealed virtual bool get_IsAttachable();
    public void SetIsDependencyProperty();
    public sealed virtual bool get_IsDependencyProperty();
    public void SetIsReadOnly();
    public sealed virtual bool get_IsReadOnly();
    [CompilerGeneratedAttribute]
public Getter get_Getter();
    [CompilerGeneratedAttribute]
public void set_Getter(Getter value);
    public sealed virtual object GetValue(object instance);
    [CompilerGeneratedAttribute]
public Setter get_Setter();
    [CompilerGeneratedAttribute]
public void set_Setter(Setter value);
    public sealed virtual void SetValue(object instance, object value);
}
[GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks", " 10.0.19041.685")]
[DebuggerNonUserCodeAttribute]
public class Microsoft.Toolkit.Uwp.UI.Controls.Microsoft_Toolkit_Uwp_UI_Controls_Core_XamlTypeInfo.XamlMetaDataProvider : object {
    private XamlTypeInfoProvider _provider;
    private XamlTypeInfoProvider Provider { get; }
    private XamlTypeInfoProvider get_Provider();
    public sealed virtual IXamlType GetXamlType(Type type);
    public sealed virtual IXamlType GetXamlType(string fullName);
    public sealed virtual XmlnsDefinition[] GetXmlnsDefinitions();
}
[GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks", " 10.0.19041.685")]
[DebuggerNonUserCodeAttribute]
internal class Microsoft.Toolkit.Uwp.UI.Controls.Microsoft_Toolkit_Uwp_UI_Controls_Core_XamlTypeInfo.XamlSystemBaseType : object {
    private string _fullName;
    private Type _underlyingType;
    public string FullName { get; }
    public Type UnderlyingType { get; }
    public IXamlType BaseType { get; }
    public IXamlMember ContentProperty { get; }
    public bool IsArray { get; }
    public bool IsCollection { get; }
    public bool IsConstructible { get; }
    public bool IsDictionary { get; }
    public bool IsMarkupExtension { get; }
    public bool IsBindable { get; }
    public bool IsReturnTypeStub { get; }
    public bool IsLocalType { get; }
    public IXamlType ItemType { get; }
    public IXamlType KeyType { get; }
    public XamlSystemBaseType(string fullName, Type underlyingType);
    public sealed virtual string get_FullName();
    public sealed virtual Type get_UnderlyingType();
    public virtual IXamlType get_BaseType();
    public virtual IXamlMember get_ContentProperty();
    public virtual IXamlMember GetMember(string name);
    public virtual bool get_IsArray();
    public virtual bool get_IsCollection();
    public virtual bool get_IsConstructible();
    public virtual bool get_IsDictionary();
    public virtual bool get_IsMarkupExtension();
    public virtual bool get_IsBindable();
    public virtual bool get_IsReturnTypeStub();
    public virtual bool get_IsLocalType();
    public virtual IXamlType get_ItemType();
    public virtual IXamlType get_KeyType();
    public virtual object ActivateInstance();
    public virtual void AddToMap(object instance, object key, object item);
    public virtual void AddToVector(object instance, object item);
    public virtual void RunInitializer();
    public virtual object CreateFromString(string input);
}
[GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks", " 10.0.19041.685")]
[DebuggerNonUserCodeAttribute]
internal class Microsoft.Toolkit.Uwp.UI.Controls.Microsoft_Toolkit_Uwp_UI_Controls_Core_XamlTypeInfo.XamlTypeInfoProvider : object {
    private Dictionary`2<string, IXamlType> _xamlTypeCacheByName;
    private Dictionary`2<Type, IXamlType> _xamlTypeCacheByType;
    private Dictionary`2<string, IXamlMember> _xamlMembers;
    private String[] _typeNameTable;
    private Type[] _typeTable;
    private List`1<IXamlMetadataProvider> _otherProviders;
    private List`1<IXamlMetadataProvider> OtherProviders { get; }
    public IXamlType GetXamlTypeByType(Type type);
    public IXamlType GetXamlTypeByName(string typeName);
    public IXamlMember GetMemberByLongName(string longMemberName);
    private void InitTypeTables();
    private int LookupTypeIndexByName(string typeName);
    private int LookupTypeIndexByType(Type type);
    private object Activate_0_CameraPreview();
    private object Activate_2_CameraHelper();
    private object Activate_5_DropShadowPanel();
    private object Activate_14_ImageEx();
    private object Activate_21_InAppNotification();
    private object Activate_26_Loading();
    private object Activate_27_Menu();
    private object Activate_32_MenuItem();
    private object Activate_36_WrapPanel();
    private object Activate_39_MetadataControl();
    private object Activate_41_RadialProgressBar();
    private object Activate_44_RotatorTile();
    private object Activate_46_TabbedCommandBar();
    private object Activate_47_NavigationView();
    private object Activate_59_NavigationViewTemplateSettings();
    private object Activate_60_ItemsRepeaterScrollHost();
    private object Activate_62_ItemsRepeater();
    private object Activate_65_StackLayout();
    private object Activate_66_VirtualizingLayout();
    private object Activate_67_TabbedCommandBarItem();
    private object Activate_70_TabbedCommandBarItemTemplateSelector();
    private object Activate_71_NavigationViewItem();
    private object Activate_74_InfoBadge();
    private object Activate_75_List();
    private object Activate_77_NumberedList();
    private object Activate_78_TextToolbar();
    private object Activate_81_ButtonMap();
    private object Activate_82_ObservableCollection();
    private object Activate_83_Collection();
    private object Activate_85_DefaultButtonModificationList();
    private object Activate_86_ObservableCollection();
    private object Activate_87_Collection();
    private object Activate_88_DefaultButton();
    private object Activate_91_ToolbarButton();
    private object Activate_97_ToolbarSeparator();
    private object Activate_99_TileControl();
    private object Activate_104_TreeViewNode();
    private void VectorAdd_48_IList(object instance, object item);
    private void VectorAdd_81_ButtonMap(object instance, object item);
    private void VectorAdd_82_ObservableCollection(object instance, object item);
    private void VectorAdd_83_Collection(object instance, object item);
    private void VectorAdd_85_DefaultButtonModificationList(object instance, object item);
    private void VectorAdd_86_ObservableCollection(object instance, object item);
    private void VectorAdd_87_Collection(object instance, object item);
    private void VectorAdd_105_IList(object instance, object item);
    private IXamlType CreateXamlType(int typeIndex);
    private List`1<IXamlMetadataProvider> get_OtherProviders();
    private IXamlType CheckOtherMetadataProvidersForName(string typeName);
    private IXamlType CheckOtherMetadataProvidersForType(Type type);
    private object get_0_CameraPreview_CameraHelper(object instance);
    private object get_1_CameraPreview_IsFrameSourceGroupButtonVisible(object instance);
    private void set_1_CameraPreview_IsFrameSourceGroupButtonVisible(object instance, object Value);
    private object get_2_DropShadowPanel_DropShadow(object instance);
    private object get_3_DropShadowPanel_Mask(object instance);
    private void set_3_DropShadowPanel_Mask(object instance, object Value);
    private object get_4_DropShadowPanel_BlurRadius(object instance);
    private void set_4_DropShadowPanel_BlurRadius(object instance, object Value);
    private object get_5_DropShadowPanel_Color(object instance);
    private void set_5_DropShadowPanel_Color(object instance, object Value);
    private object get_6_DropShadowPanel_OffsetX(object instance);
    private void set_6_DropShadowPanel_OffsetX(object instance, object Value);
    private object get_7_DropShadowPanel_OffsetY(object instance);
    private void set_7_DropShadowPanel_OffsetY(object instance, object Value);
    private object get_8_DropShadowPanel_OffsetZ(object instance);
    private void set_8_DropShadowPanel_OffsetZ(object instance, object Value);
    private object get_9_DropShadowPanel_ShadowOpacity(object instance);
    private void set_9_DropShadowPanel_ShadowOpacity(object instance, object Value);
    private object get_10_DropShadowPanel_IsMasked(object instance);
    private void set_10_DropShadowPanel_IsMasked(object instance, object Value);
    private object get_11_ImageExBase_LazyLoadingThreshold(object instance);
    private void set_11_ImageExBase_LazyLoadingThreshold(object instance, object Value);
    private object get_12_ImageEx_NineGrid(object instance);
    private void set_12_ImageEx_NineGrid(object instance, object Value);
    private object get_13_ImageExBase_WaitUntilLoaded(object instance);
    private object get_14_ImageExBase_IsInitialized(object instance);
    private object get_15_ImageExBase_DecodePixelHeight(object instance);
    private void set_15_ImageExBase_DecodePixelHeight(object instance, object Value);
    private object get_16_ImageExBase_DecodePixelType(object instance);
    private void set_16_ImageExBase_DecodePixelType(object instance, object Value);
    private object get_17_ImageExBase_DecodePixelWidth(object instance);
    private void set_17_ImageExBase_DecodePixelWidth(object instance, object Value);
    private object get_18_ImageExBase_Stretch(object instance);
    private void set_18_ImageExBase_Stretch(object instance, object Value);
    private object get_19_ImageExBase_IsCacheEnabled(object instance);
    private void set_19_ImageExBase_IsCacheEnabled(object instance, object Value);
    private object get_20_ImageExBase_EnableLazyLoading(object instance);
    private void set_20_ImageExBase_EnableLazyLoading(object instance, object Value);
    private object get_21_ImageExBase_PlaceholderSource(object instance);
    private void set_21_ImageExBase_PlaceholderSource(object instance, object Value);
    private object get_22_ImageExBase_PlaceholderStretch(object instance);
    private void set_22_ImageExBase_PlaceholderStretch(object instance, object Value);
    private object get_23_ImageExBase_Source(object instance);
    private void set_23_ImageExBase_Source(object instance, object Value);
    private object get_24_InAppNotification_AnimationDuration(object instance);
    private void set_24_InAppNotification_AnimationDuration(object instance, object Value);
    private object get_25_InAppNotification_VerticalOffset(object instance);
    private void set_25_InAppNotification_VerticalOffset(object instance, object Value);
    private object get_26_InAppNotification_HorizontalOffset(object instance);
    private void set_26_InAppNotification_HorizontalOffset(object instance, object Value);
    private object get_27_InAppNotification_ShowDismissButton(object instance);
    private void set_27_InAppNotification_ShowDismissButton(object instance, object Value);
    private object get_28_InAppNotification_StackMode(object instance);
    private void set_28_InAppNotification_StackMode(object instance, object Value);
    private object get_29_InAppNotification_KeyFrameDuration(object instance);
    private void set_29_InAppNotification_KeyFrameDuration(object instance, object Value);
    private object get_30_Loading_IsLoading(object instance);
    private void set_30_Loading_IsLoading(object instance, object Value);
    private object get_31_Menu_MenuFlyoutStyle(object instance);
    private void set_31_Menu_MenuFlyoutStyle(object instance, object Value);
    private object get_32_Menu_Orientation(object instance);
    private void set_32_Menu_Orientation(object instance, object Value);
    private object get_33_Menu_TooltipStyle(object instance);
    private void set_33_Menu_TooltipStyle(object instance, object Value);
    private object get_34_Menu_TooltipPlacement(object instance);
    private void set_34_Menu_TooltipPlacement(object instance, object Value);
    private object get_35_Menu_SelectedMenuItem(object instance);
    private object get_36_Menu_IsOpened(object instance);
    private object get_37_Menu_InputGestureText(object instance);
    private void set_37_Menu_InputGestureText(object instance, object Value);
    private object get_38_Menu_AllowTooltip(object instance);
    private void set_38_Menu_AllowTooltip(object instance, object Value);
    private object get_39_MenuItem_Header(object instance);
    private void set_39_MenuItem_Header(object instance, object Value);
    private object get_40_MenuItem_HeaderTemplate(object instance);
    private void set_40_MenuItem_HeaderTemplate(object instance, object Value);
    private object get_41_MenuItem_IsOpened(object instance);
    private object get_42_WrapPanel_HorizontalSpacing(object instance);
    private void set_42_WrapPanel_HorizontalSpacing(object instance, object Value);
    private object get_43_WrapPanel_VerticalSpacing(object instance);
    private void set_43_WrapPanel_VerticalSpacing(object instance, object Value);
    private object get_44_WrapPanel_Orientation(object instance);
    private void set_44_WrapPanel_Orientation(object instance, object Value);
    private object get_45_WrapPanel_Padding(object instance);
    private void set_45_WrapPanel_Padding(object instance, object Value);
    private object get_46_WrapPanel_StretchChild(object instance);
    private void set_46_WrapPanel_StretchChild(object instance, object Value);
    private object get_47_MetadataControl_Separator(object instance);
    private void set_47_MetadataControl_Separator(object instance, object Value);
    private object get_48_MetadataControl_AccessibleSeparator(object instance);
    private void set_48_MetadataControl_AccessibleSeparator(object instance, object Value);
    private object get_49_MetadataControl_Items(object instance);
    private void set_49_MetadataControl_Items(object instance, object Value);
    private object get_50_MetadataControl_TextBlockStyle(object instance);
    private void set_50_MetadataControl_TextBlockStyle(object instance, object Value);
    private object get_51_RadialProgressBar_Outline(object instance);
    private void set_51_RadialProgressBar_Outline(object instance, object Value);
    private object get_52_RadialProgressBar_Thickness(object instance);
    private void set_52_RadialProgressBar_Thickness(object instance, object Value);
    private object get_53_RotatorTile_RotationDelay(object instance);
    private void set_53_RotatorTile_RotationDelay(object instance, object Value);
    private object get_54_RotatorTile_ExtraRandomDuration(object instance);
    private void set_54_RotatorTile_ExtraRandomDuration(object instance, object Value);
    private object get_55_RotatorTile_ItemsSource(object instance);
    private void set_55_RotatorTile_ItemsSource(object instance, object Value);
    private object get_56_RotatorTile_CurrentItem(object instance);
    private void set_56_RotatorTile_CurrentItem(object instance, object Value);
    private object get_57_RotatorTile_ItemTemplate(object instance);
    private void set_57_RotatorTile_ItemTemplate(object instance, object Value);
    private object get_58_RotatorTile_Direction(object instance);
    private void set_58_RotatorTile_Direction(object instance, object Value);
    private object get_59_NavigationView_MenuItems(object instance);
    private object get_60_NavigationView_MenuItemTemplateSelector(object instance);
    private void set_60_NavigationView_MenuItemTemplateSelector(object instance, object Value);
    private object get_61_NavigationView_PaneDisplayMode(object instance);
    private void set_61_NavigationView_PaneDisplayMode(object instance, object Value);
    private object get_62_NavigationView_PaneToggleButtonStyle(object instance);
    private void set_62_NavigationView_PaneToggleButtonStyle(object instance, object Value);
    private object get_63_NavigationView_IsBackButtonVisible(object instance);
    private void set_63_NavigationView_IsBackButtonVisible(object instance, object Value);
    private object get_64_NavigationView_IsSettingsVisible(object instance);
    private void set_64_NavigationView_IsSettingsVisible(object instance, object Value);
    private object get_65_NavigationView_CompactPaneLength(object instance);
    private void set_65_NavigationView_CompactPaneLength(object instance, object Value);
    private object get_66_NavigationView_SelectedItem(object instance);
    private void set_66_NavigationView_SelectedItem(object instance, object Value);
    private object get_67_NavigationView_PaneFooter(object instance);
    private void set_67_NavigationView_PaneFooter(object instance, object Value);
    private object get_68_NavigationView_OpenPaneLength(object instance);
    private void set_68_NavigationView_OpenPaneLength(object instance, object Value);
    private object get_69_NavigationView_MenuItemsSource(object instance);
    private void set_69_NavigationView_MenuItemsSource(object instance, object Value);
    private object get_70_NavigationView_MenuItemContainerStyleSelector(object instance);
    private void set_70_NavigationView_MenuItemContainerStyleSelector(object instance, object Value);
    private object get_71_NavigationView_MenuItemContainerStyle(object instance);
    private void set_71_NavigationView_MenuItemContainerStyle(object instance, object Value);
    private object get_72_NavigationView_IsTitleBarAutoPaddingEnabled(object instance);
    private void set_72_NavigationView_IsTitleBarAutoPaddingEnabled(object instance, object Value);
    private object get_73_NavigationView_IsPaneToggleButtonVisible(object instance);
    private void set_73_NavigationView_IsPaneToggleButtonVisible(object instance, object Value);
    private object get_74_NavigationView_IsPaneOpen(object instance);
    private void set_74_NavigationView_IsPaneOpen(object instance, object Value);
    private object get_75_NavigationView_HeaderTemplate(object instance);
    private void set_75_NavigationView_HeaderTemplate(object instance, object Value);
    private object get_76_NavigationView_Header(object instance);
    private void set_76_NavigationView_Header(object instance, object Value);
    private object get_77_NavigationView_FooterMenuItemsSource(object instance);
    private void set_77_NavigationView_FooterMenuItemsSource(object instance, object Value);
    private object get_78_NavigationView_ExpandedModeThresholdWidth(object instance);
    private void set_78_NavigationView_ExpandedModeThresholdWidth(object instance, object Value);
    private object get_79_NavigationView_MenuItemTemplate(object instance);
    private void set_79_NavigationView_MenuItemTemplate(object instance, object Value);
    private object get_80_NavigationView_CompactModeThresholdWidth(object instance);
    private void set_80_NavigationView_CompactModeThresholdWidth(object instance, object Value);
    private object get_81_NavigationView_AutoSuggestBox(object instance);
    private void set_81_NavigationView_AutoSuggestBox(object instance, object Value);
    private object get_82_NavigationView_AlwaysShowHeader(object instance);
    private void set_82_NavigationView_AlwaysShowHeader(object instance, object Value);
    private object get_83_NavigationView_DisplayMode(object instance);
    private object get_84_NavigationView_FooterMenuItems(object instance);
    private object get_85_NavigationView_SettingsItem(object instance);
    private object get_86_NavigationView_ShoulderNavigationEnabled(object instance);
    private void set_86_NavigationView_ShoulderNavigationEnabled(object instance, object Value);
    private object get_87_NavigationView_SelectionFollowsFocus(object instance);
    private void set_87_NavigationView_SelectionFollowsFocus(object instance, object Value);
    private object get_88_NavigationView_PaneTitle(object instance);
    private void set_88_NavigationView_PaneTitle(object instance, object Value);
    private object get_89_NavigationView_PaneHeader(object instance);
    private void set_89_NavigationView_PaneHeader(object instance, object Value);
    private object get_90_NavigationView_PaneCustomContent(object instance);
    private void set_90_NavigationView_PaneCustomContent(object instance, object Value);
    private object get_91_NavigationView_OverflowLabelMode(object instance);
    private void set_91_NavigationView_OverflowLabelMode(object instance, object Value);
    private object get_92_NavigationView_IsPaneVisible(object instance);
    private void set_92_NavigationView_IsPaneVisible(object instance, object Value);
    private object get_93_NavigationView_IsBackEnabled(object instance);
    private void set_93_NavigationView_IsBackEnabled(object instance, object Value);
    private object get_94_NavigationView_ContentOverlay(object instance);
    private void set_94_NavigationView_ContentOverlay(object instance, object Value);
    private object get_95_NavigationView_TemplateSettings(object instance);
    private object get_96_ItemsRepeaterScrollHost_ScrollViewer(object instance);
    private void set_96_ItemsRepeaterScrollHost_ScrollViewer(object instance, object Value);
    private object get_97_ItemsRepeaterScrollHost_VerticalAnchorRatio(object instance);
    private void set_97_ItemsRepeaterScrollHost_VerticalAnchorRatio(object instance, object Value);
    private object get_98_ItemsRepeaterScrollHost_HorizontalAnchorRatio(object instance);
    private void set_98_ItemsRepeaterScrollHost_HorizontalAnchorRatio(object instance, object Value);
    private object get_99_ItemsRepeaterScrollHost_CurrentAnchor(object instance);
    private object get_100_ItemsRepeater_ItemTemplate(object instance);
    private void set_100_ItemsRepeater_ItemTemplate(object instance, object Value);
    private object get_101_ItemsRepeater_Layout(object instance);
    private void set_101_ItemsRepeater_Layout(object instance, object Value);
    private object get_102_ItemsRepeater_VerticalCacheLength(object instance);
    private void set_102_ItemsRepeater_VerticalCacheLength(object instance, object Value);
    private object get_103_ItemsRepeater_ItemsSource(object instance);
    private void set_103_ItemsRepeater_ItemsSource(object instance, object Value);
    private object get_104_ItemsRepeater_HorizontalCacheLength(object instance);
    private void set_104_ItemsRepeater_HorizontalCacheLength(object instance, object Value);
    private object get_105_ItemsRepeater_Background(object instance);
    private void set_105_ItemsRepeater_Background(object instance, object Value);
    private object get_106_ItemsRepeater_ItemsSourceView(object instance);
    private object get_107_StackLayout_Orientation(object instance);
    private void set_107_StackLayout_Orientation(object instance, object Value);
    private object get_108_StackLayout_Spacing(object instance);
    private void set_108_StackLayout_Spacing(object instance, object Value);
    private object get_109_TabbedCommandBarItem_Header(object instance);
    private void set_109_TabbedCommandBarItem_Header(object instance, object Value);
    private object get_110_TabbedCommandBarItem_IsContextual(object instance);
    private void set_110_TabbedCommandBarItem_IsContextual(object instance, object Value);
    private object get_111_TabbedCommandBarItem_OverflowButtonAlignment(object instance);
    private void set_111_TabbedCommandBarItem_OverflowButtonAlignment(object instance, object Value);
    private object get_112_TabbedCommandBarItem_CommandAlignment(object instance);
    private void set_112_TabbedCommandBarItem_CommandAlignment(object instance, object Value);
    private object get_113_TabbedCommandBarItemTemplateSelector_Contextual(object instance);
    private void set_113_TabbedCommandBarItemTemplateSelector_Contextual(object instance, object Value);
    private object get_114_TabbedCommandBarItemTemplateSelector_Normal(object instance);
    private void set_114_TabbedCommandBarItemTemplateSelector_Normal(object instance, object Value);
    private object get_115_NavigationViewItem_Icon(object instance);
    private void set_115_NavigationViewItem_Icon(object instance, object Value);
    private object get_116_NavigationViewItem_CompactPaneLength(object instance);
    private object get_117_NavigationViewItem_SelectsOnInvoked(object instance);
    private void set_117_NavigationViewItem_SelectsOnInvoked(object instance, object Value);
    private object get_118_NavigationViewItem_MenuItemsSource(object instance);
    private void set_118_NavigationViewItem_MenuItemsSource(object instance, object Value);
    private object get_119_NavigationViewItem_IsExpanded(object instance);
    private void set_119_NavigationViewItem_IsExpanded(object instance, object Value);
    private object get_120_NavigationViewItem_IsChildSelected(object instance);
    private void set_120_NavigationViewItem_IsChildSelected(object instance, object Value);
    private object get_121_NavigationViewItem_HasUnrealizedChildren(object instance);
    private void set_121_NavigationViewItem_HasUnrealizedChildren(object instance, object Value);
    private object get_122_NavigationViewItem_MenuItems(object instance);
    private object get_123_NavigationViewItem_InfoBadge(object instance);
    private void set_123_NavigationViewItem_InfoBadge(object instance, object Value);
    private object get_124_NavigationViewItemBase_IsSelected(object instance);
    private void set_124_NavigationViewItemBase_IsSelected(object instance, object Value);
    private object get_125_TextToolbar_ControlKeyDown(object instance);
    private object get_126_TextToolbar_MenuKeyDown(object instance);
    private object get_127_TextToolbar_ShiftKeyDown(object instance);
    private object get_128_TextToolbar_Editor(object instance);
    private void set_128_TextToolbar_Editor(object instance, object Value);
    private object get_129_TextToolbar_Formatter(object instance);
    private void set_129_TextToolbar_Formatter(object instance, object Value);
    private object get_130_TextToolbar_DefaultButtons(object instance);
    private object get_131_IToolbarItem_Position(object instance);
    private void set_131_IToolbarItem_Position(object instance, object Value);
    private object get_132_TextToolbar_CustomButtons(object instance);
    private void set_132_TextToolbar_CustomButtons(object instance, object Value);
    private object get_133_TextToolbar_ButtonModifications(object instance);
    private void set_133_TextToolbar_ButtonModifications(object instance, object Value);
    private object get_134_DefaultButton_IsVisible(object instance);
    private void set_134_DefaultButton_IsVisible(object instance, object Value);
    private object get_135_DefaultButton_Type(object instance);
    private void set_135_DefaultButton_Type(object instance, object Value);
    private object get_136_TextToolbar_LastKeyPress(object instance);
    private object get_137_TextToolbar_UseURIChecker(object instance);
    private void set_137_TextToolbar_UseURIChecker(object instance, object Value);
    private object get_138_ToolbarButton_Activation(object instance);
    private void set_138_ToolbarButton_Activation(object instance, object Value);
    private object get_139_ToolbarButton_ShiftActivation(object instance);
    private void set_139_ToolbarButton_ShiftActivation(object instance, object Value);
    private object get_140_ToolbarButton_ToolTip(object instance);
    private void set_140_ToolbarButton_ToolTip(object instance, object Value);
    private object get_141_ToolbarButton_ShortcutKey(object instance);
    private void set_141_ToolbarButton_ShortcutKey(object instance, object Value);
    private object get_142_ToolbarButton_ShortcutFancyName(object instance);
    private void set_142_ToolbarButton_ShortcutFancyName(object instance, object Value);
    private object get_143_ToolbarButton_Position(object instance);
    private void set_143_ToolbarButton_Position(object instance, object Value);
    private object get_144_ToolbarButton_IsToggled(object instance);
    private void set_144_ToolbarButton_IsToggled(object instance, object Value);
    private object get_145_ToolbarSeparator_Position(object instance);
    private void set_145_ToolbarSeparator_Position(object instance, object Value);
    private object get_146_TileControl_ScrollViewerContainer(object instance);
    private void set_146_TileControl_ScrollViewerContainer(object instance, object Value);
    private object get_147_TileControl_ImageAlignment(object instance);
    private void set_147_TileControl_ImageAlignment(object instance, object Value);
    private object get_148_TileControl_ImageSource(object instance);
    private void set_148_TileControl_ImageSource(object instance, object Value);
    private object get_149_TileControl_ScrollOrientation(object instance);
    private void set_149_TileControl_ScrollOrientation(object instance, object Value);
    private object get_150_TileControl_OffsetX(object instance);
    private void set_150_TileControl_OffsetX(object instance, object Value);
    private object get_151_TileControl_OffsetY(object instance);
    private void set_151_TileControl_OffsetY(object instance, object Value);
    private object get_152_TileControl_ParallaxSpeedRatio(object instance);
    private void set_152_TileControl_ParallaxSpeedRatio(object instance, object Value);
    private object get_153_TileControl_IsAnimated(object instance);
    private void set_153_TileControl_IsAnimated(object instance, object Value);
    private object get_154_TileControl_AnimationStepX(object instance);
    private void set_154_TileControl_AnimationStepX(object instance, object Value);
    private object get_155_TileControl_AnimationStepY(object instance);
    private void set_155_TileControl_AnimationStepY(object instance, object Value);
    private object get_156_TileControl_AnimationDuration(object instance);
    private void set_156_TileControl_AnimationDuration(object instance, object Value);
    private object get_157_IconSource_Foreground(object instance);
    private void set_157_IconSource_Foreground(object instance, object Value);
    private object get_158_TreeViewNode_IsExpanded(object instance);
    private void set_158_TreeViewNode_IsExpanded(object instance, object Value);
    private object get_159_TreeViewNode_HasUnrealizedChildren(object instance);
    private void set_159_TreeViewNode_HasUnrealizedChildren(object instance, object Value);
    private object get_160_TreeViewNode_Content(object instance);
    private void set_160_TreeViewNode_Content(object instance, object Value);
    private object get_161_TreeViewNode_Children(object instance);
    private object get_162_TreeViewNode_Depth(object instance);
    private object get_163_TreeViewNode_HasChildren(object instance);
    private object get_164_TreeViewNode_Parent(object instance);
    private IXamlMember CreateXamlMember(string longMemberName);
}
[GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks", " 10.0.19041.685")]
[DebuggerNonUserCodeAttribute]
internal class Microsoft.Toolkit.Uwp.UI.Controls.Microsoft_Toolkit_Uwp_UI_Controls_Core_XamlTypeInfo.XamlUserType : XamlSystemBaseType {
    private XamlTypeInfoProvider _provider;
    private IXamlType _baseType;
    private bool _isArray;
    private bool _isMarkupExtension;
    private bool _isBindable;
    private bool _isReturnTypeStub;
    private bool _isLocalType;
    private IXamlType _boxedType;
    private string _contentPropertyName;
    private string _itemTypeName;
    private string _keyTypeName;
    private Dictionary`2<string, string> _memberNames;
    private Dictionary`2<string, object> _enumValues;
    [CompilerGeneratedAttribute]
private Activator <Activator>k__BackingField;
    [CompilerGeneratedAttribute]
private AddToCollection <CollectionAdd>k__BackingField;
    [CompilerGeneratedAttribute]
private AddToDictionary <DictionaryAdd>k__BackingField;
    [CompilerGeneratedAttribute]
private CreateFromStringMethod <CreateFromStringMethod>k__BackingField;
    [CompilerGeneratedAttribute]
private BoxInstanceMethod <BoxInstance>k__BackingField;
    public IXamlType BaseType { get; }
    public bool IsArray { get; }
    public bool IsCollection { get; }
    public bool IsConstructible { get; }
    public bool IsDictionary { get; }
    public bool IsMarkupExtension { get; }
    public bool IsBindable { get; }
    public bool IsReturnTypeStub { get; }
    public bool IsLocalType { get; }
    public IXamlType BoxedType { get; }
    public IXamlMember ContentProperty { get; }
    public IXamlType ItemType { get; }
    public IXamlType KeyType { get; }
    public Activator Activator { get; public set; }
    public AddToCollection CollectionAdd { get; public set; }
    public AddToDictionary DictionaryAdd { get; public set; }
    public CreateFromStringMethod CreateFromStringMethod { get; public set; }
    public BoxInstanceMethod BoxInstance { get; public set; }
    public XamlUserType(XamlTypeInfoProvider provider, string fullName, Type fullType, IXamlType baseType);
    public virtual IXamlType get_BaseType();
    public virtual bool get_IsArray();
    public virtual bool get_IsCollection();
    public virtual bool get_IsConstructible();
    public virtual bool get_IsDictionary();
    public virtual bool get_IsMarkupExtension();
    public virtual bool get_IsBindable();
    public virtual bool get_IsReturnTypeStub();
    public virtual bool get_IsLocalType();
    public sealed virtual IXamlType get_BoxedType();
    public virtual IXamlMember get_ContentProperty();
    public virtual IXamlType get_ItemType();
    public virtual IXamlType get_KeyType();
    public virtual IXamlMember GetMember(string name);
    public virtual object ActivateInstance();
    public virtual void AddToMap(object instance, object key, object item);
    public virtual void AddToVector(object instance, object item);
    public virtual void RunInitializer();
    public virtual object CreateFromString(string input);
    [CompilerGeneratedAttribute]
public Activator get_Activator();
    [CompilerGeneratedAttribute]
public void set_Activator(Activator value);
    [CompilerGeneratedAttribute]
public AddToCollection get_CollectionAdd();
    [CompilerGeneratedAttribute]
public void set_CollectionAdd(AddToCollection value);
    [CompilerGeneratedAttribute]
public AddToDictionary get_DictionaryAdd();
    [CompilerGeneratedAttribute]
public void set_DictionaryAdd(AddToDictionary value);
    [CompilerGeneratedAttribute]
public CreateFromStringMethod get_CreateFromStringMethod();
    [CompilerGeneratedAttribute]
public void set_CreateFromStringMethod(CreateFromStringMethod value);
    [CompilerGeneratedAttribute]
public BoxInstanceMethod get_BoxInstance();
    [CompilerGeneratedAttribute]
public void set_BoxInstance(BoxInstanceMethod value);
    public void SetContentPropertyName(string contentPropertyName);
    public void SetIsArray();
    public void SetIsMarkupExtension();
    public void SetIsBindable();
    public void SetIsReturnTypeStub();
    public void SetIsLocalType();
    public void SetItemTypeName(string itemTypeName);
    public void SetKeyTypeName(string keyTypeName);
    public void SetBoxedType(IXamlType boxedType);
    public object BoxType(object instance);
    public void AddMemberName(string shortName);
    public void AddEnumValue(string name, object value);
}
internal class Microsoft.Toolkit.Uwp.UI.Controls.NotificationOptions : object {
    [CompilerGeneratedAttribute]
private int <Duration>k__BackingField;
    [CompilerGeneratedAttribute]
private object <Content>k__BackingField;
    public int Duration { get; public set; }
    public object Content { get; public set; }
    [CompilerGeneratedAttribute]
public int get_Duration();
    [CompilerGeneratedAttribute]
public void set_Duration(int value);
    [CompilerGeneratedAttribute]
public object get_Content();
    [CompilerGeneratedAttribute]
public void set_Content(object value);
}
public class Microsoft.Toolkit.Uwp.UI.Controls.PreviewFailedEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
private string <Error>k__BackingField;
    public string Error { get; internal set; }
    [CompilerGeneratedAttribute]
public string get_Error();
    [CompilerGeneratedAttribute]
internal void set_Error(string value);
}
[ObsoleteAttribute("The platform ProgressRing now supports determinate mode and is part of WinUI 2.5, please upgrade to use that control: https://docs.microsoft.com/windows/apps/winui/winui2/release-notes/winui-2.5#determinate-progressring")]
[TemplatePartAttribute]
[TemplatePartAttribute]
[TemplatePartAttribute]
[TemplatePartAttribute]
public class Microsoft.Toolkit.Uwp.UI.Controls.RadialProgressBar : ProgressBar {
    private static string OutlineFigurePartName;
    private static string OutlineArcPartName;
    private static string BarFigurePartName;
    private static string BarArcPartName;
    private PathFigure outlineFigure;
    private PathFigure barFigure;
    private ArcSegment outlineArc;
    private ArcSegment barArc;
    private bool allTemplatePartsDefined;
    public static DependencyProperty ThicknessProperty;
    public static DependencyProperty OutlineProperty;
    public double Thickness { get; public set; }
    public Brush Outline { get; public set; }
    private static RadialProgressBar();
    protected virtual void OnMinimumChanged(double oldMinimum, double newMinimum);
    protected virtual void OnMaximumChanged(double oldMaximum, double newMaximum);
    protected virtual void OnValueChanged(double oldValue, double newValue);
    protected virtual void OnApplyTemplate();
    public double get_Thickness();
    public void set_Thickness(double value);
    public Brush get_Outline();
    public void set_Outline(Brush value);
    private static void ThicknessChangedHandler(DependencyObject d, DependencyPropertyChangedEventArgs e);
    private void SizeChangedHandler(object sender, SizeChangedEventArgs e);
    private double ComputeNormalizedRange();
    private Size ComputeEllipseSize();
    private void RenderSegment();
    private void RenderAll();
}
[TemplatePartAttribute]
[TemplatePartAttribute]
[TemplatePartAttribute]
[TemplatePartAttribute]
[TemplatePartAttribute]
public class Microsoft.Toolkit.Uwp.UI.Controls.RotatorTile : Control {
    private static string ScrollerPartName;
    private static string CurrentPartName;
    private static string NextPartName;
    private static string TranslatePartName;
    private static string StackPartName;
    private static Random Randomizer;
    private int _currentIndex;
    private DispatcherQueueTimer _timer;
    private FrameworkElement _currentElement;
    private FrameworkElement _nextElement;
    private FrameworkElement _scroller;
    private TranslateTransform _translate;
    private StackPanel _stackPanel;
    private bool _suppressFlipOnSet;
    private WeakEventListener`3<RotatorTile, object, NotifyCollectionChangedEventArgs> _inccWeakEventListener;
    public static DependencyProperty ExtraRandomDurationProperty;
    public static DependencyProperty RotationDelayProperty;
    public static DependencyProperty ItemsSourceProperty;
    public static DependencyProperty ItemTemplateProperty;
    public static DependencyProperty RotateDirectionProperty;
    public static DependencyProperty CurrentItemProperty;
    public object ItemsSource { get; public set; }
    public object CurrentItem { get; public set; }
    public DataTemplate ItemTemplate { get; public set; }
    public RotateDirection Direction { get; public set; }
    public TimeSpan RotationDelay { get; public set; }
    public TimeSpan ExtraRandomDuration { get; public set; }
    private static RotatorTile();
    protected virtual void OnApplyTemplate();
    private void RotatorTile_SizeChanged(object sender, SizeChangedEventArgs e);
    private void RotatorTile_Loaded(object sender, RoutedEventArgs e);
    private void RotatorTile_Unloaded(object sender, RoutedEventArgs e);
    private void Timer_Tick(object sender, object e);
    private void UpdateNextItem();
    private void RotateToNextItem();
    private void UpdateTranslateXY();
    private object GetCurrent();
    private object GetNext();
    private object GetItemAt(int index);
    private int GetIndexOf(object item);
    private void Start();
    private TimeSpan GetTileDuration();
    public object get_ItemsSource();
    public void set_ItemsSource(object value);
    private static void OnItemsSourcePropertyChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    private void OnCollectionChanged(object oldValue, object newValue);
    private void Incc_CollectionChanged(object sender, NotifyCollectionChangedEventArgs e);
    public object get_CurrentItem();
    public void set_CurrentItem(object value);
    private static void OnRotationDelayInSecondsPropertyChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    private static void OnCurrentItemPropertyChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    public DataTemplate get_ItemTemplate();
    public void set_ItemTemplate(DataTemplate value);
    public RotateDirection get_Direction();
    public void set_Direction(RotateDirection value);
    public TimeSpan get_RotationDelay();
    public void set_RotationDelay(TimeSpan value);
    public TimeSpan get_ExtraRandomDuration();
    public void set_ExtraRandomDuration(TimeSpan value);
}
public enum Microsoft.Toolkit.Uwp.UI.Controls.ScrollOrientation : Enum {
    public int value__;
    public static ScrollOrientation Horizontal;
    public static ScrollOrientation Vertical;
    public static ScrollOrientation Both;
}
public class Microsoft.Toolkit.Uwp.UI.Controls.ShortcutKeyRequestArgs : object {
    [CompilerGeneratedAttribute]
private VirtualKey <Key>k__BackingField;
    [CompilerGeneratedAttribute]
private KeyRoutedEventArgs <OriginalArgs>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ShiftKeyHeld>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Handled>k__BackingField;
    public VirtualKey Key { get; private set; }
    public KeyRoutedEventArgs OriginalArgs { get; private set; }
    public bool ShiftKeyHeld { get; private set; }
    public bool Handled { get; public set; }
    public ShortcutKeyRequestArgs(VirtualKey key, bool shiftKeyHeld, KeyRoutedEventArgs args);
    [CompilerGeneratedAttribute]
public VirtualKey get_Key();
    [CompilerGeneratedAttribute]
private void set_Key(VirtualKey value);
    [CompilerGeneratedAttribute]
public KeyRoutedEventArgs get_OriginalArgs();
    [CompilerGeneratedAttribute]
private void set_OriginalArgs(KeyRoutedEventArgs value);
    [CompilerGeneratedAttribute]
public bool get_ShiftKeyHeld();
    [CompilerGeneratedAttribute]
private void set_ShiftKeyHeld(bool value);
    [CompilerGeneratedAttribute]
public bool get_Handled();
    [CompilerGeneratedAttribute]
public void set_Handled(bool value);
}
public enum Microsoft.Toolkit.Uwp.UI.Controls.StackMode : Enum {
    public int value__;
    public static StackMode Replace;
    public static StackMode StackInFront;
    public static StackMode QueueBehind;
}
[ContentPropertyAttribute]
[TemplatePartAttribute]
[TemplatePartAttribute]
[TemplatePartAttribute]
public class Microsoft.Toolkit.Uwp.UI.Controls.TabbedCommandBar : NavigationView {
    private ContentControl _tabbedCommandBarContent;
    private Border _tabbedCommandBarContentBorder;
    private Storyboard _tabChangedStoryboard;
    private TabbedCommandBarItem _previousSelectedItem;
    private long _visibilityChangedToken;
    protected virtual void OnApplyTemplate();
    private void TabbedCommandBar_Loaded(object sender, RoutedEventArgs e);
    private void SelectedItemChanged(NavigationView sender, NavigationViewSelectionChangedEventArgs args);
    private void SelectedItemVisibilityChanged(DependencyObject sender, DependencyProperty dp);
}
[TemplatePartAttribute]
[TemplatePartAttribute]
public class Microsoft.Toolkit.Uwp.UI.Controls.TabbedCommandBarItem : CommandBar {
    private ItemsControl _primaryItemsControl;
    private Button _moreButton;
    public static DependencyProperty HeaderProperty;
    public static DependencyProperty IsContextualProperty;
    public static DependencyProperty OverflowButtonAlignmentProperty;
    public static DependencyProperty CommandAlignmentProperty;
    public object Header { get; public set; }
    public bool IsContextual { get; public set; }
    public HorizontalAlignment OverflowButtonAlignment { get; public set; }
    public HorizontalAlignment CommandAlignment { get; public set; }
    private static TabbedCommandBarItem();
    public object get_Header();
    public void set_Header(object value);
    public bool get_IsContextual();
    public void set_IsContextual(bool value);
    public HorizontalAlignment get_OverflowButtonAlignment();
    public void set_OverflowButtonAlignment(HorizontalAlignment value);
    public HorizontalAlignment get_CommandAlignment();
    public void set_CommandAlignment(HorizontalAlignment value);
    protected virtual void OnApplyTemplate();
    [CompilerGeneratedAttribute]
private void <OnApplyTemplate>b__19_0(DependencyObject sender, DependencyProperty dp);
    [CompilerGeneratedAttribute]
private void <OnApplyTemplate>b__19_1(DependencyObject sender, DependencyProperty dp);
}
public class Microsoft.Toolkit.Uwp.UI.Controls.TabbedCommandBarItemTemplateSelector : DataTemplateSelector {
    [CompilerGeneratedAttribute]
private DataTemplate <Normal>k__BackingField;
    [CompilerGeneratedAttribute]
private DataTemplate <Contextual>k__BackingField;
    public DataTemplate Normal { get; public set; }
    public DataTemplate Contextual { get; public set; }
    [CompilerGeneratedAttribute]
public DataTemplate get_Normal();
    [CompilerGeneratedAttribute]
public void set_Normal(DataTemplate value);
    [CompilerGeneratedAttribute]
public DataTemplate get_Contextual();
    [CompilerGeneratedAttribute]
public void set_Contextual(DataTemplate value);
    protected virtual DataTemplate SelectTemplateCore(object item);
    protected virtual DataTemplate SelectTemplateCore(object item, DependencyObject container);
}
[TemplatePartAttribute]
public class Microsoft.Toolkit.Uwp.UI.Controls.TextToolbar : Control {
    internal static string RootControl;
    internal static string BoldElement;
    internal static string ItalicsElement;
    internal static string StrikethoughElement;
    internal static string LinkElement;
    internal static string ListElement;
    internal static string OrderedElement;
    [CompilerGeneratedAttribute]
private KeyEventHandler <KeyEventHandler>k__BackingField;
    [CompilerGeneratedAttribute]
private EventHandler`1<ShortcutKeyRequestArgs> ShortcutRequested;
    [CompilerGeneratedAttribute]
private EventHandler`1<EditorChangedArgs> EditorChanged;
    public static DependencyProperty EditorProperty;
    public static DependencyProperty FormatterProperty;
    public static DependencyProperty DefaultButtonsProperty;
    public static DependencyProperty CustomButtonsProperty;
    public static DependencyProperty DefaultButtonModificationsProperty;
    public static DependencyProperty UseURICheckerProperty;
    [CompilerGeneratedAttribute]
private VirtualKey <LastKeyPress>k__BackingField;
    private KeyEventHandler KeyEventHandler { get; private set; }
    public bool ControlKeyDown { get; }
    public bool MenuKeyDown { get; }
    public bool ShiftKeyDown { get; }
    public RichEditBox Editor { get; public set; }
    public Formatter Formatter { get; public set; }
    public ButtonMap DefaultButtons { get; private set; }
    public ButtonMap CustomButtons { get; public set; }
    public DefaultButtonModificationList ButtonModifications { get; public set; }
    public VirtualKey LastKeyPress { get; private set; }
    public bool UseURIChecker { get; public set; }
    internal static bool InDesignMode { get; }
    private static TextToolbar();
    protected virtual void OnApplyTemplate();
    private static void OnEditorChanged(DependencyObject obj, DependencyPropertyChangedEventArgs args);
    private static void OnFormatterChanged(DependencyObject obj, DependencyPropertyChangedEventArgs args);
    private static void OnButtonMapChanged(DependencyObject obj, DependencyPropertyChangedEventArgs args);
    private static void OnDefaultButtonModificationsChanged(DependencyObject obj, DependencyPropertyChangedEventArgs args);
    private void OnButtonMapModified(object sender, NotifyCollectionChangedEventArgs e);
    private void OnDefaultButtonModificationListChanged(object sender, NotifyCollectionChangedEventArgs e);
    private void ToolbarItemPropertyChanged(object sender, PropertyChangedEventArgs e);
    private void Editor_KeyDown(object sender, KeyRoutedEventArgs e);
    private bool IsDoingShortcut(VirtualKey pressedKey);
    [CompilerGeneratedAttribute]
private KeyEventHandler get_KeyEventHandler();
    [CompilerGeneratedAttribute]
private void set_KeyEventHandler(KeyEventHandler value);
    public bool get_ControlKeyDown();
    public bool get_MenuKeyDown();
    public bool get_ShiftKeyDown();
    [CompilerGeneratedAttribute]
public void add_ShortcutRequested(EventHandler`1<ShortcutKeyRequestArgs> value);
    [CompilerGeneratedAttribute]
public void remove_ShortcutRequested(EventHandler`1<ShortcutKeyRequestArgs> value);
    [CompilerGeneratedAttribute]
public void add_EditorChanged(EventHandler`1<EditorChangedArgs> value);
    [CompilerGeneratedAttribute]
public void remove_EditorChanged(EventHandler`1<EditorChangedArgs> value);
    public ToolbarButton GetDefaultButton(ButtonType button);
    private void BuildBar();
    private void AttachButtonMap(ButtonMap map, CommandBar root);
    private void AddToolbarItem(IToolbarItem item, CommandBar root);
    private void MoveToolbarItem(IToolbarItem item, CommandBar root);
    public void RemoveToolbarItem(IToolbarItem item);
    private static VirtualKey FindBestAlternativeKey(VirtualKey original);
    private static bool IsKeyActive(CoreVirtualKeyStates state);
    public RichEditBox get_Editor();
    public void set_Editor(RichEditBox value);
    public Formatter get_Formatter();
    public void set_Formatter(Formatter value);
    public ButtonMap get_DefaultButtons();
    private void set_DefaultButtons(ButtonMap value);
    public ButtonMap get_CustomButtons();
    public void set_CustomButtons(ButtonMap value);
    public DefaultButtonModificationList get_ButtonModifications();
    public void set_ButtonModifications(DefaultButtonModificationList value);
    [CompilerGeneratedAttribute]
public VirtualKey get_LastKeyPress();
    [CompilerGeneratedAttribute]
private void set_LastKeyPress(VirtualKey value);
    public bool get_UseURIChecker();
    public void set_UseURIChecker(bool value);
    internal static bool get_InDesignMode();
}
public class Microsoft.Toolkit.Uwp.UI.Controls.TextToolbarButtons.ButtonMap : ObservableCollection`1<IToolbarItem> {
}
public enum Microsoft.Toolkit.Uwp.UI.Controls.TextToolbarButtons.ButtonType : Enum {
    public int value__;
    public static ButtonType Bold;
    public static ButtonType Italics;
    public static ButtonType Strikethrough;
    public static ButtonType Code;
    public static ButtonType Quote;
    public static ButtonType Link;
    public static ButtonType List;
    public static ButtonType OrderedList;
    public static ButtonType Headers;
}
public class Microsoft.Toolkit.Uwp.UI.Controls.TextToolbarButtons.Common.CommonButtons : object {
    [CompilerGeneratedAttribute]
private TextToolbar <Model>k__BackingField;
    private TextToolbar Model { get; }
    public ToolbarButton Bold { get; }
    public ToolbarButton Italics { get; }
    public ToolbarButton Strikethrough { get; }
    public ToolbarButton Link { get; }
    public ToolbarButton List { get; }
    public ToolbarButton OrderedList { get; }
    public CommonButtons(TextToolbar model);
    [CompilerGeneratedAttribute]
private TextToolbar get_Model();
    public ToolbarButton get_Bold();
    public ToolbarButton get_Italics();
    public ToolbarButton get_Strikethrough();
    public ToolbarButton get_Link();
    public ToolbarButton get_List();
    public ToolbarButton get_OrderedList();
    private void MakeBold(ToolbarButton button);
    private void MakeItalics(ToolbarButton button);
    private void MakeStrike(ToolbarButton button);
    private void MakeLink(ToolbarButton button);
    private void MakeList(ToolbarButton button);
    private void MakeOList(ToolbarButton button);
    [AsyncStateMachineAttribute("Microsoft.Toolkit.Uwp.UI.Controls.TextToolbarButtons.Common.CommonButtons/<OpenLinkCreator>d__22")]
public void OpenLinkCreator(ToolbarButton button);
    [AsyncStateMachineAttribute("Microsoft.Toolkit.Uwp.UI.Controls.TextToolbarButtons.Common.CommonButtons/<ShowContentDialog>d__23")]
private void ShowContentDialog(string title, string content, string primaryButtonText, ToolbarButton button);
}
public class Microsoft.Toolkit.Uwp.UI.Controls.TextToolbarButtons.DefaultButton : DependencyObject {
    public static DependencyProperty IsVisibleProperty;
    [CompilerGeneratedAttribute]
private ButtonType <Type>k__BackingField;
    private IToolbarItem _button;
    public bool IsVisible { get; public set; }
    public ButtonType Type { get; public set; }
    internal IToolbarItem Button { get; internal set; }
    private static DefaultButton();
    public static DefaultButton OfType(ButtonType type);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public virtual string ToString();
    private static void IsVisibleChanged(DependencyObject obj, DependencyPropertyChangedEventArgs args);
    public bool get_IsVisible();
    public void set_IsVisible(bool value);
    [CompilerGeneratedAttribute]
public ButtonType get_Type();
    [CompilerGeneratedAttribute]
public void set_Type(ButtonType value);
    internal IToolbarItem get_Button();
    internal void set_Button(IToolbarItem value);
}
public class Microsoft.Toolkit.Uwp.UI.Controls.TextToolbarButtons.DefaultButtonModificationList : ObservableCollection`1<DefaultButton> {
}
public interface Microsoft.Toolkit.Uwp.UI.Controls.TextToolbarButtons.IToolbarItem {
    public int Position { get; public set; }
    public abstract virtual int get_Position();
    public abstract virtual void set_Position(int value);
}
public class Microsoft.Toolkit.Uwp.UI.Controls.TextToolbarButtons.ToolbarButton : AppBarButton {
    public static DependencyProperty ToolTipProperty;
    public static DependencyProperty ShortcutKeyProperty;
    public static DependencyProperty IsToggledProperty;
    public static DependencyProperty ShortcutFancyNameProperty;
    [CompilerGeneratedAttribute]
private Action`1<ToolbarButton> <Activation>k__BackingField;
    [CompilerGeneratedAttribute]
private Action`1<ToolbarButton> <ShiftActivation>k__BackingField;
    private TextToolbar _model;
    private int _position;
    [CompilerGeneratedAttribute]
private PropertyChangedEventHandler PropertyChanged;
    public Action`1<ToolbarButton> Activation { get; public set; }
    public Action`1<ToolbarButton> ShiftActivation { get; public set; }
    public string ToolTip { get; public set; }
    public Nullable`1<VirtualKey> ShortcutKey { get; public set; }
    public string ShortcutFancyName { get; public set; }
    public int Position { get; public set; }
    public bool IsToggled { get; public set; }
    private Visibility Toggled { get; private set; }
    internal TextToolbar Model { get; internal set; }
    private static ToolbarButton();
    protected virtual void OnApplyTemplate();
    private static void ToolTipChanged(DependencyObject obj, DependencyPropertyChangedEventArgs args);
    private void UpdateTooltip();
    private void ToolbarButton_Click(object sender, RoutedEventArgs e);
    internal void ShortcutRequested(ShortcutKeyRequestArgs& args);
    private void Activate(bool isShift);
    [CompilerGeneratedAttribute]
public Action`1<ToolbarButton> get_Activation();
    [CompilerGeneratedAttribute]
public void set_Activation(Action`1<ToolbarButton> value);
    [CompilerGeneratedAttribute]
public Action`1<ToolbarButton> get_ShiftActivation();
    [CompilerGeneratedAttribute]
public void set_ShiftActivation(Action`1<ToolbarButton> value);
    public string get_ToolTip();
    public void set_ToolTip(string value);
    public Nullable`1<VirtualKey> get_ShortcutKey();
    public void set_ShortcutKey(Nullable`1<VirtualKey> value);
    public string get_ShortcutFancyName();
    public void set_ShortcutFancyName(string value);
    public sealed virtual int get_Position();
    public sealed virtual void set_Position(int value);
    public bool get_IsToggled();
    public void set_IsToggled(bool value);
    private Visibility get_Toggled();
    private void set_Toggled(Visibility value);
    internal TextToolbar get_Model();
    internal void set_Model(TextToolbar value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_PropertyChanged(PropertyChangedEventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_PropertyChanged(PropertyChangedEventHandler value);
}
public class Microsoft.Toolkit.Uwp.UI.Controls.TextToolbarButtons.ToolbarSeparator : AppBarSeparator {
    [CompilerGeneratedAttribute]
private int <Position>k__BackingField;
    public int Position { get; public set; }
    [CompilerGeneratedAttribute]
public sealed virtual int get_Position();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Position(int value);
}
public abstract class Microsoft.Toolkit.Uwp.UI.Controls.TextToolbarFormats.ButtonActions : object {
    public abstract virtual void FormatBold(ToolbarButton button);
    public abstract virtual void FormatItalics(ToolbarButton button);
    public abstract virtual void FormatStrikethrough(ToolbarButton button);
    public abstract virtual void FormatLink(ToolbarButton button, string label, string formattedLabel, string link);
    public abstract virtual void FormatList(ToolbarButton button);
    public abstract virtual void FormatOrderedList(ToolbarButton button);
}
public abstract class Microsoft.Toolkit.Uwp.UI.Controls.TextToolbarFormats.Formatter : object {
    [CompilerGeneratedAttribute]
private TextToolbar <Model>k__BackingField;
    [CompilerGeneratedAttribute]
private ButtonActions <ButtonActions>k__BackingField;
    protected static string Return;
    public TextToolbar Model { get; private set; }
    public ButtonActions ButtonActions { get; protected set; }
    public ButtonMap DefaultButtons { get; }
    public string Text { get; }
    public string NewLineChars { get; }
    public ITextSelection Selected { get; }
    protected virtual void Model_EditorChanged(object sender, EditorChangedArgs e);
    private void Editor_SelectionChanged(object sender, RoutedEventArgs e);
    public virtual void EnsureAtStartOfCurrentLine();
    public virtual void EnsureAtNewLine();
    public virtual String[] GetLines();
    public virtual string GetLine(int index);
    public virtual string GetLastLine();
    public virtual void OnSelectionChanged();
    [CompilerGeneratedAttribute]
public TextToolbar get_Model();
    [CompilerGeneratedAttribute]
private void set_Model(TextToolbar value);
    public virtual void UnsetModel(TextToolbar model);
    public virtual void SetModel(TextToolbar model);
    [CompilerGeneratedAttribute]
public ButtonActions get_ButtonActions();
    [CompilerGeneratedAttribute]
protected void set_ButtonActions(ButtonActions value);
    public abstract virtual ButtonMap get_DefaultButtons();
    public virtual string get_Text();
    public virtual string get_NewLineChars();
    public ITextSelection get_Selected();
}
public class Microsoft.Toolkit.Uwp.UI.Controls.TextToolbarFormats.RichText.RichTextButtonActions : ButtonActions {
    [CompilerGeneratedAttribute]
private RichTextFormatter <Formatter>k__BackingField;
    public RichTextFormatter Formatter { get; }
    public RichTextButtonActions(RichTextFormatter formatter);
    public virtual void FormatBold(ToolbarButton button);
    public virtual void FormatItalics(ToolbarButton button);
    public virtual void FormatStrikethrough(ToolbarButton button);
    public virtual void FormatLink(ToolbarButton button, string label, string formattedText, string link);
    public virtual void FormatList(ToolbarButton button);
    public virtual void FormatOrderedList(ToolbarButton button);
    public void FormatUnderline(ToolbarButton button);
    [CompilerGeneratedAttribute]
public RichTextFormatter get_Formatter();
}
public class Microsoft.Toolkit.Uwp.UI.Controls.TextToolbarFormats.RichText.RichTextFormatter : Formatter {
    [CompilerGeneratedAttribute]
private CommonButtons <CommonButtons>k__BackingField;
    [CompilerGeneratedAttribute]
private ToolbarButton <BoldButton>k__BackingField;
    [CompilerGeneratedAttribute]
private ToolbarButton <ItalicButton>k__BackingField;
    [CompilerGeneratedAttribute]
private ToolbarButton <StrikeButton>k__BackingField;
    [CompilerGeneratedAttribute]
private ToolbarButton <Underline>k__BackingField;
    [CompilerGeneratedAttribute]
private ToolbarButton <ListButton>k__BackingField;
    [CompilerGeneratedAttribute]
private ToolbarButton <OrderedListButton>k__BackingField;
    private CommonButtons CommonButtons { get; private set; }
    public string Text { get; }
    internal ToolbarButton BoldButton { get; internal set; }
    internal ToolbarButton ItalicButton { get; internal set; }
    internal ToolbarButton StrikeButton { get; internal set; }
    internal ToolbarButton Underline { get; internal set; }
    internal ToolbarButton ListButton { get; internal set; }
    internal ToolbarButton OrderedListButton { get; internal set; }
    public ButtonMap DefaultButtons { get; }
    public ITextCharacterFormat SelectionFormat { get; public set; }
    public string NewLineChars { get; }
    public virtual void SetModel(TextToolbar model);
    public virtual void OnSelectionChanged();
    [CompilerGeneratedAttribute]
private CommonButtons get_CommonButtons();
    [CompilerGeneratedAttribute]
private void set_CommonButtons(CommonButtons value);
    public virtual string get_Text();
    [CompilerGeneratedAttribute]
internal ToolbarButton get_BoldButton();
    [CompilerGeneratedAttribute]
internal void set_BoldButton(ToolbarButton value);
    [CompilerGeneratedAttribute]
internal ToolbarButton get_ItalicButton();
    [CompilerGeneratedAttribute]
internal void set_ItalicButton(ToolbarButton value);
    [CompilerGeneratedAttribute]
internal ToolbarButton get_StrikeButton();
    [CompilerGeneratedAttribute]
internal void set_StrikeButton(ToolbarButton value);
    [CompilerGeneratedAttribute]
internal ToolbarButton get_Underline();
    [CompilerGeneratedAttribute]
internal void set_Underline(ToolbarButton value);
    [CompilerGeneratedAttribute]
internal ToolbarButton get_ListButton();
    [CompilerGeneratedAttribute]
internal void set_ListButton(ToolbarButton value);
    [CompilerGeneratedAttribute]
internal ToolbarButton get_OrderedListButton();
    [CompilerGeneratedAttribute]
internal void set_OrderedListButton(ToolbarButton value);
    public virtual ButtonMap get_DefaultButtons();
    public ITextCharacterFormat get_SelectionFormat();
    public void set_SelectionFormat(ITextCharacterFormat value);
    public virtual string get_NewLineChars();
}
public class Microsoft.Toolkit.Uwp.UI.Controls.TextToolbarSymbols.List : Symbol {
}
public class Microsoft.Toolkit.Uwp.UI.Controls.TextToolbarSymbols.NumberedList : Symbol {
}
[TemplateVisualStateAttribute]
[TemplateVisualStateAttribute]
public abstract class Microsoft.Toolkit.Uwp.UI.Controls.TextToolbarSymbols.Symbol : Control {
    internal static string Common;
    internal static string Normal;
    internal static string Disabled;
    private DependencyPropertyWatcher`1<bool> isEnabledWatcher;
    protected virtual void OnApplyTemplate();
    private void IsEnabledWatcher_PropertyChanged(object sender, EventArgs e);
    private void CheckIsEnabled();
    protected virtual override void Finalize();
    [CompilerGeneratedAttribute]
private void <Finalize>b__7_0();
}
public class Microsoft.Toolkit.Uwp.UI.Controls.TileControl : ContentControl {
    private SemaphoreSlim _flag;
    private List`1<SpriteVisual> _compositionChildren;
    private object _lockerOffset;
    private FrameworkElement _rootElement;
    private ContainerVisual _containerVisual;
    private CompositionSurfaceBrush _brushVisual;
    private LoadedImageSurface _imageSurface;
    private Size _imageSize;
    private DispatcherQueueTimer _timerAnimation;
    private ScrollViewer _scrollViewer;
    private bool _isImageSourceLoaded;
    private bool _isRootElementSizeChanged;
    private CompositionPropertySet _propertySetModulo;
    private double _animationX;
    private double _animationY;
    [CompilerGeneratedAttribute]
private EventHandler ImageLoaded;
    public static DependencyProperty ScrollViewerContainerProperty;
    public static DependencyProperty ImageAlignmentProperty;
    public static DependencyProperty ImageSourceProperty;
    public static DependencyProperty ScrollOrientationProperty;
    public static DependencyProperty OffsetXProperty;
    public static DependencyProperty OffsetYProperty;
    public static DependencyProperty ParallaxSpeedRatioProperty;
    public static DependencyProperty IsAnimatedProperty;
    public static DependencyProperty AnimationStepXProperty;
    public static DependencyProperty AnimationStepYProperty;
    public static DependencyProperty AnimationDurationProperty;
    public FrameworkElement ScrollViewerContainer { get; public set; }
    public ImageAlignment ImageAlignment { get; public set; }
    public Uri ImageSource { get; public set; }
    public ScrollOrientation ScrollOrientation { get; public set; }
    public double OffsetX { get; public set; }
    public double OffsetY { get; public set; }
    public double ParallaxSpeedRatio { get; public set; }
    public bool IsAnimated { get; public set; }
    public double AnimationStepX { get; public set; }
    public double AnimationStepY { get; public set; }
    public double AnimationDuration { get; public set; }
    private static TileControl();
    [CompilerGeneratedAttribute]
public void add_ImageLoaded(EventHandler value);
    [CompilerGeneratedAttribute]
public void remove_ImageLoaded(EventHandler value);
    private Task InitializeScrollViewerContainer(FrameworkElement oldScrollViewerContainer, FrameworkElement newScrollViewerContainer);
    [AsyncStateMachineAttribute("Microsoft.Toolkit.Uwp.UI.Controls.TileControl/<ScrollViewerContainer_Loaded>d__20")]
private void ScrollViewerContainer_Loaded(object sender, RoutedEventArgs e);
    [AsyncStateMachineAttribute("Microsoft.Toolkit.Uwp.UI.Controls.TileControl/<AttachScrollViewer>d__21")]
private Task AttachScrollViewer(DependencyObject scrollViewerContainer);
    [AsyncStateMachineAttribute("Microsoft.Toolkit.Uwp.UI.Controls.TileControl/<LoadImageBrushAsync>d__22")]
private Task`1<bool> LoadImageBrushAsync(Uri uri);
    [AsyncStateMachineAttribute("Microsoft.Toolkit.Uwp.UI.Controls.TileControl/<OnApplyTemplate>d__23")]
protected virtual void OnApplyTemplate();
    [AsyncStateMachineAttribute("Microsoft.Toolkit.Uwp.UI.Controls.TileControl/<RootElement_SizeChanged>d__24")]
private void RootElement_SizeChanged(object sender, SizeChangedEventArgs e);
    [AsyncStateMachineAttribute("Microsoft.Toolkit.Uwp.UI.Controls.TileControl/<RefreshContainerTileLocked>d__25")]
private Task RefreshContainerTileLocked();
    private void RefreshContainerTile();
    private bool RefreshContainerTile(double width, double height, double imageWidth, double imageHeight, ScrollOrientation orientation);
    [AsyncStateMachineAttribute("Microsoft.Toolkit.Uwp.UI.Controls.TileControl/<CreateModuloExpression>d__28")]
private Task CreateModuloExpression(ScrollViewer scrollViewer);
    private void CreateModuloExpression(ScrollViewer scrollViewer, double imageWidth, double imageHeight, ScrollOrientation scrollOrientation);
    private void RefreshMove();
    private void RefreshMove(double x, double y);
    private double GetOffsetModulo(double offset, double size);
    private void RefreshImageSize(double width, double height);
    private void RefreshScrollSpeedRatio(double speedRatio);
    private void InitializeAnimation();
    private void Timer_Tick(object sender, object e);
    public FrameworkElement get_ScrollViewerContainer();
    public void set_ScrollViewerContainer(FrameworkElement value);
    [AsyncStateMachineAttribute("Microsoft.Toolkit.Uwp.UI.Controls.TileControl/<OnScrollViewerContainerChange>d__51")]
private static void OnScrollViewerContainerChange(DependencyObject d, DependencyPropertyChangedEventArgs e);
    public ImageAlignment get_ImageAlignment();
    public void set_ImageAlignment(ImageAlignment value);
    [AsyncStateMachineAttribute("Microsoft.Toolkit.Uwp.UI.Controls.TileControl/<OnAlignmentChange>d__55")]
private static void OnAlignmentChange(DependencyObject d, DependencyPropertyChangedEventArgs e);
    public Uri get_ImageSource();
    public void set_ImageSource(Uri value);
    [AsyncStateMachineAttribute("Microsoft.Toolkit.Uwp.UI.Controls.TileControl/<OnImageSourceChanged>d__59")]
private static void OnImageSourceChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    public ScrollOrientation get_ScrollOrientation();
    public void set_ScrollOrientation(ScrollOrientation value);
    [AsyncStateMachineAttribute("Microsoft.Toolkit.Uwp.UI.Controls.TileControl/<OnOrientationChanged>d__63")]
private static void OnOrientationChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    public double get_OffsetX();
    public void set_OffsetX(double value);
    private static void OnOffsetChange(DependencyObject d, DependencyPropertyChangedEventArgs e);
    public double get_OffsetY();
    public void set_OffsetY(double value);
    public double get_ParallaxSpeedRatio();
    public void set_ParallaxSpeedRatio(double value);
    private static void OnScrollSpeedRatioChange(DependencyObject d, DependencyPropertyChangedEventArgs e);
    public bool get_IsAnimated();
    public void set_IsAnimated(bool value);
    private static void OnIsAnimatedChange(DependencyObject d, DependencyPropertyChangedEventArgs e);
    public double get_AnimationStepX();
    public void set_AnimationStepX(double value);
    public double get_AnimationStepY();
    public void set_AnimationStepY(double value);
    public double get_AnimationDuration();
    public void set_AnimationDuration(double value);
    private static void OnAnimationDuration(DependencyObject d, DependencyPropertyChangedEventArgs e);
    [CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private void <>n__0();
    [CompilerGeneratedAttribute]
internal static string <CreateModuloExpression>g__GenerateFormula|29_0(string common, string dimension);
    [CompilerGeneratedAttribute]
internal static string <CreateModuloExpression>g__GenerateParallaxFormula|29_1(string scrollTranslation, string speed, string offset, string dimension);
}
internal static class ThisAssembly : object {
    internal static string AssemblyVersion;
    internal static string AssemblyFileVersion;
    internal static string AssemblyInformationalVersion;
    internal static string AssemblyName;
    internal static string AssemblyTitle;
    internal static string AssemblyConfiguration;
    internal static string GitCommitId;
    internal static bool IsPublicRelease;
    internal static bool IsPrerelease;
    internal static DateTime GitCommitDate;
    internal static string RootNamespace;
    private static ThisAssembly();
}
