public class Microsoft.Toolkit.Uwp.UI.Automation.Peers.DataGridAutomationPeer : FrameworkElementAutomationPeer {
    private Dictionary`2<object, DataGridGroupItemAutomationPeer> _groupItemPeers;
    private Dictionary`2<object, DataGridItemAutomationPeer> _itemPeers;
    private bool _oldHorizontallyScrollable;
    private double _oldHorizontalScrollPercent;
    private double _oldHorizontalViewSize;
    private bool _oldVerticallyScrollable;
    private double _oldVerticalScrollPercent;
    private double _oldVerticalViewSize;
    private bool HorizontallyScrollable { get; }
    private double HorizontalScrollPercent { get; }
    private double HorizontalViewSize { get; }
    private DataGrid OwningDataGrid { get; }
    private bool VerticallyScrollable { get; }
    private double VerticalScrollPercent { get; }
    private double VerticalViewSize { get; }
    private int Windows.UI.Xaml.Automation.Provider.IGridProvider.ColumnCount { get; }
    private int Windows.UI.Xaml.Automation.Provider.IGridProvider.RowCount { get; }
    private bool Windows.UI.Xaml.Automation.Provider.IScrollProvider.HorizontallyScrollable { get; }
    private double Windows.UI.Xaml.Automation.Provider.IScrollProvider.HorizontalScrollPercent { get; }
    private double Windows.UI.Xaml.Automation.Provider.IScrollProvider.HorizontalViewSize { get; }
    private bool Windows.UI.Xaml.Automation.Provider.IScrollProvider.VerticallyScrollable { get; }
    private double Windows.UI.Xaml.Automation.Provider.IScrollProvider.VerticalScrollPercent { get; }
    private double Windows.UI.Xaml.Automation.Provider.IScrollProvider.VerticalViewSize { get; }
    private bool Windows.UI.Xaml.Automation.Provider.ISelectionProvider.CanSelectMultiple { get; }
    private bool Windows.UI.Xaml.Automation.Provider.ISelectionProvider.IsSelectionRequired { get; }
    private RowOrColumnMajor Windows.UI.Xaml.Automation.Provider.ITableProvider.RowOrColumnMajor { get; }
    public DataGridAutomationPeer(DataGrid owner);
    private bool get_HorizontallyScrollable();
    private double get_HorizontalScrollPercent();
    private double get_HorizontalViewSize();
    private DataGrid get_OwningDataGrid();
    private bool get_VerticallyScrollable();
    private double get_VerticalScrollPercent();
    private double get_VerticalViewSize();
    protected virtual AutomationControlType GetAutomationControlTypeCore();
    protected virtual IList`1<AutomationPeer> GetChildrenCore();
    protected virtual string GetClassNameCore();
    protected virtual string GetNameCore();
    protected virtual object GetPatternCore(PatternInterface patternInterface);
    private sealed virtual override int Windows.UI.Xaml.Automation.Provider.IGridProvider.get_ColumnCount();
    private sealed virtual override int Windows.UI.Xaml.Automation.Provider.IGridProvider.get_RowCount();
    private sealed virtual override IRawElementProviderSimple Windows.UI.Xaml.Automation.Provider.IGridProvider.GetItem(int row, int column);
    private sealed virtual override bool Windows.UI.Xaml.Automation.Provider.IScrollProvider.get_HorizontallyScrollable();
    private sealed virtual override double Windows.UI.Xaml.Automation.Provider.IScrollProvider.get_HorizontalScrollPercent();
    private sealed virtual override double Windows.UI.Xaml.Automation.Provider.IScrollProvider.get_HorizontalViewSize();
    private sealed virtual override bool Windows.UI.Xaml.Automation.Provider.IScrollProvider.get_VerticallyScrollable();
    private sealed virtual override double Windows.UI.Xaml.Automation.Provider.IScrollProvider.get_VerticalScrollPercent();
    private sealed virtual override double Windows.UI.Xaml.Automation.Provider.IScrollProvider.get_VerticalViewSize();
    private sealed virtual override void Windows.UI.Xaml.Automation.Provider.IScrollProvider.Scroll(ScrollAmount horizontalAmount, ScrollAmount verticalAmount);
    private sealed virtual override void Windows.UI.Xaml.Automation.Provider.IScrollProvider.SetScrollPercent(double horizontalPercent, double verticalPercent);
    private sealed virtual override IRawElementProviderSimple[] Windows.UI.Xaml.Automation.Provider.ISelectionProvider.GetSelection();
    private sealed virtual override bool Windows.UI.Xaml.Automation.Provider.ISelectionProvider.get_CanSelectMultiple();
    private sealed virtual override bool Windows.UI.Xaml.Automation.Provider.ISelectionProvider.get_IsSelectionRequired();
    private sealed virtual override RowOrColumnMajor Windows.UI.Xaml.Automation.Provider.ITableProvider.get_RowOrColumnMajor();
    private sealed virtual override IRawElementProviderSimple[] Windows.UI.Xaml.Automation.Provider.ITableProvider.GetColumnHeaders();
    private sealed virtual override IRawElementProviderSimple[] Windows.UI.Xaml.Automation.Provider.ITableProvider.GetRowHeaders();
    private AutomationPeer GetCellPeer(int slot, int column);
    internal static void RaiseAutomationInvokeEvent(UIElement element);
    internal List`1<AutomationPeer> GetChildPeers();
    internal DataGridGroupItemAutomationPeer GetOrCreateGroupItemPeer(object group);
    internal DataGridItemAutomationPeer GetOrCreateItemPeer(object item);
    internal void PopulateGroupItemPeers();
    internal void PopulateItemPeers();
    internal void RaiseAutomationCellSelectedEvent(int slot, int column);
    internal void RaiseAutomationFocusChangedEvent(int slot, int column);
    internal void RaiseAutomationInvokeEvents(DataGridEditingUnit editingUnit, DataGridColumn column, DataGridRow row);
    internal void RaiseAutomationScrollEvents();
    internal void RaiseAutomationSelectionEvents(SelectionChangedEventArgs e);
    internal void UpdateRowGroupHeaderPeerEventsSource(DataGridRowGroupHeader header);
    internal void UpdateRowPeerEventsSource(DataGridRow row);
}
public class Microsoft.Toolkit.Uwp.UI.Automation.Peers.DataGridCellAutomationPeer : FrameworkElementAutomationPeer {
    private IRawElementProviderSimple ContainingGrid { get; }
    private DataGridCell OwningCell { get; }
    private DataGridColumn OwningColumn { get; }
    private DataGrid OwningGrid { get; }
    private DataGridRow OwningRow { get; }
    private int Windows.UI.Xaml.Automation.Provider.IGridItemProvider.Column { get; }
    private int Windows.UI.Xaml.Automation.Provider.IGridItemProvider.ColumnSpan { get; }
    private IRawElementProviderSimple Windows.UI.Xaml.Automation.Provider.IGridItemProvider.ContainingGrid { get; }
    private int Windows.UI.Xaml.Automation.Provider.IGridItemProvider.Row { get; }
    private int Windows.UI.Xaml.Automation.Provider.IGridItemProvider.RowSpan { get; }
    private bool Windows.UI.Xaml.Automation.Provider.ISelectionItemProvider.IsSelected { get; }
    private IRawElementProviderSimple Windows.UI.Xaml.Automation.Provider.ISelectionItemProvider.SelectionContainer { get; }
    public DataGridCellAutomationPeer(DataGridCell owner);
    private IRawElementProviderSimple get_ContainingGrid();
    private DataGridCell get_OwningCell();
    private DataGridColumn get_OwningColumn();
    private DataGrid get_OwningGrid();
    private DataGridRow get_OwningRow();
    protected virtual AutomationControlType GetAutomationControlTypeCore();
    protected virtual string GetClassNameCore();
    protected virtual string GetNameCore();
    protected virtual object GetPatternCore(PatternInterface patternInterface);
    protected virtual bool IsKeyboardFocusableCore();
    private sealed virtual override int Windows.UI.Xaml.Automation.Provider.IGridItemProvider.get_Column();
    private sealed virtual override int Windows.UI.Xaml.Automation.Provider.IGridItemProvider.get_ColumnSpan();
    private sealed virtual override IRawElementProviderSimple Windows.UI.Xaml.Automation.Provider.IGridItemProvider.get_ContainingGrid();
    private sealed virtual override int Windows.UI.Xaml.Automation.Provider.IGridItemProvider.get_Row();
    private sealed virtual override int Windows.UI.Xaml.Automation.Provider.IGridItemProvider.get_RowSpan();
    private sealed virtual override void Windows.UI.Xaml.Automation.Provider.IInvokeProvider.Invoke();
    private sealed virtual override void Windows.UI.Xaml.Automation.Provider.IScrollItemProvider.ScrollIntoView();
    private sealed virtual override bool Windows.UI.Xaml.Automation.Provider.ISelectionItemProvider.get_IsSelected();
    private sealed virtual override IRawElementProviderSimple Windows.UI.Xaml.Automation.Provider.ISelectionItemProvider.get_SelectionContainer();
    private sealed virtual override void Windows.UI.Xaml.Automation.Provider.ISelectionItemProvider.AddToSelection();
    private sealed virtual override void Windows.UI.Xaml.Automation.Provider.ISelectionItemProvider.RemoveFromSelection();
    private sealed virtual override void Windows.UI.Xaml.Automation.Provider.ISelectionItemProvider.Select();
    private sealed virtual override IRawElementProviderSimple[] Windows.UI.Xaml.Automation.Provider.ITableItemProvider.GetColumnHeaderItems();
    private sealed virtual override IRawElementProviderSimple[] Windows.UI.Xaml.Automation.Provider.ITableItemProvider.GetRowHeaderItems();
    private void EnsureEnabled();
    [CompilerGeneratedAttribute]
private void <Windows.UI.Xaml.Automation.Provider.IInvokeProvider.Invoke>b__26_0();
    [CompilerGeneratedAttribute]
private void <Windows.UI.Xaml.Automation.Provider.ISelectionItemProvider.Select>b__34_0();
}
public class Microsoft.Toolkit.Uwp.UI.Automation.Peers.DataGridColumnHeaderAutomationPeer : FrameworkElementAutomationPeer {
    private DataGridColumnHeader OwningHeader { get; }
    private bool Windows.UI.Xaml.Automation.Provider.ITransformProvider.CanMove { get; }
    private bool Windows.UI.Xaml.Automation.Provider.ITransformProvider.CanResize { get; }
    private bool Windows.UI.Xaml.Automation.Provider.ITransformProvider.CanRotate { get; }
    public DataGridColumnHeaderAutomationPeer(DataGridColumnHeader owner);
    private DataGridColumnHeader get_OwningHeader();
    protected virtual AutomationControlType GetAutomationControlTypeCore();
    protected virtual string GetClassNameCore();
    protected virtual string GetHelpTextCore();
    protected virtual string GetNameCore();
    protected virtual object GetPatternCore(PatternInterface patternInterface);
    protected virtual bool IsContentElementCore();
    private sealed virtual override void Windows.UI.Xaml.Automation.Provider.IInvokeProvider.Invoke();
    private sealed virtual override void Windows.UI.Xaml.Automation.Provider.IScrollItemProvider.ScrollIntoView();
    private sealed virtual override bool Windows.UI.Xaml.Automation.Provider.ITransformProvider.get_CanMove();
    private sealed virtual override bool Windows.UI.Xaml.Automation.Provider.ITransformProvider.get_CanResize();
    private sealed virtual override bool Windows.UI.Xaml.Automation.Provider.ITransformProvider.get_CanRotate();
    private sealed virtual override void Windows.UI.Xaml.Automation.Provider.ITransformProvider.Move(double x, double y);
    private sealed virtual override void Windows.UI.Xaml.Automation.Provider.ITransformProvider.Resize(double width, double height);
    private sealed virtual override void Windows.UI.Xaml.Automation.Provider.ITransformProvider.Rotate(double degrees);
}
public class Microsoft.Toolkit.Uwp.UI.Automation.Peers.DataGridColumnHeadersPresenterAutomationPeer : FrameworkElementAutomationPeer {
    public DataGridColumnHeadersPresenterAutomationPeer(DataGridColumnHeadersPresenter owner);
    protected virtual AutomationControlType GetAutomationControlTypeCore();
    protected virtual string GetClassNameCore();
    protected virtual bool IsContentElementCore();
}
public class Microsoft.Toolkit.Uwp.UI.Automation.Peers.DataGridDetailsPresenterAutomationPeer : FrameworkElementAutomationPeer {
    public DataGridDetailsPresenterAutomationPeer(DataGridDetailsPresenter owner);
    protected virtual AutomationControlType GetAutomationControlTypeCore();
    protected virtual string GetClassNameCore();
    protected virtual bool IsControlElementCore();
    protected virtual bool IsContentElementCore();
}
public class Microsoft.Toolkit.Uwp.UI.Automation.Peers.DataGridGroupItemAutomationPeer : FrameworkElementAutomationPeer {
    private ICollectionViewGroup _group;
    private AutomationPeer _dataGridAutomationPeer;
    private DataGrid OwningDataGrid { get; }
    private DataGridAutomationPeer OwningDataGridPeer { get; }
    private DataGridRowGroupHeader OwningRowGroupHeader { get; }
    internal DataGridRowGroupHeaderAutomationPeer OwningRowGroupHeaderPeer { get; }
    private ExpandCollapseState Windows.UI.Xaml.Automation.Provider.IExpandCollapseProvider.ExpandCollapseState { get; }
    private int Windows.UI.Xaml.Automation.Provider.IGridProvider.ColumnCount { get; }
    private int Windows.UI.Xaml.Automation.Provider.IGridProvider.RowCount { get; }
    private bool Windows.UI.Xaml.Automation.Provider.ISelectionProvider.CanSelectMultiple { get; }
    private bool Windows.UI.Xaml.Automation.Provider.ISelectionProvider.IsSelectionRequired { get; }
    public DataGridGroupItemAutomationPeer(ICollectionViewGroup group, DataGrid dataGrid);
    private DataGrid get_OwningDataGrid();
    private DataGridAutomationPeer get_OwningDataGridPeer();
    private DataGridRowGroupHeader get_OwningRowGroupHeader();
    internal DataGridRowGroupHeaderAutomationPeer get_OwningRowGroupHeaderPeer();
    protected virtual string GetAcceleratorKeyCore();
    protected virtual string GetAccessKeyCore();
    protected virtual AutomationControlType GetAutomationControlTypeCore();
    protected virtual string GetAutomationIdCore();
    protected virtual Rect GetBoundingRectangleCore();
    protected virtual IList`1<AutomationPeer> GetChildrenCore();
    protected virtual string GetClassNameCore();
    protected virtual Point GetClickablePointCore();
    protected virtual string GetHelpTextCore();
    protected virtual string GetItemStatusCore();
    protected virtual string GetItemTypeCore();
    protected virtual AutomationPeer GetLabeledByCore();
    protected virtual string GetLocalizedControlTypeCore();
    protected virtual string GetNameCore();
    protected virtual AutomationOrientation GetOrientationCore();
    protected virtual object GetPatternCore(PatternInterface patternInterface);
    protected virtual bool HasKeyboardFocusCore();
    protected virtual bool IsContentElementCore();
    protected virtual bool IsControlElementCore();
    protected virtual bool IsEnabledCore();
    protected virtual bool IsKeyboardFocusableCore();
    protected virtual bool IsOffscreenCore();
    protected virtual bool IsPasswordCore();
    protected virtual bool IsRequiredForFormCore();
    protected virtual void SetFocusCore();
    private sealed virtual override void Windows.UI.Xaml.Automation.Provider.IExpandCollapseProvider.Collapse();
    private sealed virtual override void Windows.UI.Xaml.Automation.Provider.IExpandCollapseProvider.Expand();
    private sealed virtual override ExpandCollapseState Windows.UI.Xaml.Automation.Provider.IExpandCollapseProvider.get_ExpandCollapseState();
    private sealed virtual override int Windows.UI.Xaml.Automation.Provider.IGridProvider.get_ColumnCount();
    private sealed virtual override IRawElementProviderSimple Windows.UI.Xaml.Automation.Provider.IGridProvider.GetItem(int row, int column);
    private sealed virtual override int Windows.UI.Xaml.Automation.Provider.IGridProvider.get_RowCount();
    private sealed virtual override void Windows.UI.Xaml.Automation.Provider.IScrollItemProvider.ScrollIntoView();
    private sealed virtual override IRawElementProviderSimple[] Windows.UI.Xaml.Automation.Provider.ISelectionProvider.GetSelection();
    private sealed virtual override bool Windows.UI.Xaml.Automation.Provider.ISelectionProvider.get_CanSelectMultiple();
    private sealed virtual override bool Windows.UI.Xaml.Automation.Provider.ISelectionProvider.get_IsSelectionRequired();
    private void EnsureEnabled();
}
public class Microsoft.Toolkit.Uwp.UI.Automation.Peers.DataGridItemAutomationPeer : FrameworkElementAutomationPeer {
    private object _item;
    private AutomationPeer _dataGridAutomationPeer;
    private DataGrid OwningDataGrid { get; }
    private DataGridRow OwningRow { get; }
    internal DataGridRowAutomationPeer OwningRowPeer { get; }
    private bool Windows.UI.Xaml.Automation.Provider.ISelectionItemProvider.IsSelected { get; }
    private IRawElementProviderSimple Windows.UI.Xaml.Automation.Provider.ISelectionItemProvider.SelectionContainer { get; }
    private bool Windows.UI.Xaml.Automation.Provider.ISelectionProvider.CanSelectMultiple { get; }
    private bool Windows.UI.Xaml.Automation.Provider.ISelectionProvider.IsSelectionRequired { get; }
    public DataGridItemAutomationPeer(object item, DataGrid dataGrid);
    private DataGrid get_OwningDataGrid();
    private DataGridRow get_OwningRow();
    internal DataGridRowAutomationPeer get_OwningRowPeer();
    protected virtual string GetAcceleratorKeyCore();
    protected virtual string GetAccessKeyCore();
    protected virtual AutomationControlType GetAutomationControlTypeCore();
    protected virtual string GetAutomationIdCore();
    protected virtual Rect GetBoundingRectangleCore();
    protected virtual IList`1<AutomationPeer> GetChildrenCore();
    protected virtual string GetClassNameCore();
    protected virtual Point GetClickablePointCore();
    protected virtual string GetHelpTextCore();
    protected virtual string GetItemStatusCore();
    protected virtual string GetItemTypeCore();
    protected virtual AutomationPeer GetLabeledByCore();
    protected virtual string GetLocalizedControlTypeCore();
    protected virtual string GetNameCore();
    protected virtual AutomationOrientation GetOrientationCore();
    protected virtual object GetPatternCore(PatternInterface patternInterface);
    protected virtual bool HasKeyboardFocusCore();
    protected virtual bool IsContentElementCore();
    protected virtual bool IsControlElementCore();
    protected virtual bool IsEnabledCore();
    protected virtual bool IsKeyboardFocusableCore();
    protected virtual bool IsOffscreenCore();
    protected virtual bool IsPasswordCore();
    protected virtual bool IsRequiredForFormCore();
    protected virtual void SetFocusCore();
    private sealed virtual override void Windows.UI.Xaml.Automation.Provider.IInvokeProvider.Invoke();
    private sealed virtual override void Windows.UI.Xaml.Automation.Provider.IScrollItemProvider.ScrollIntoView();
    private sealed virtual override bool Windows.UI.Xaml.Automation.Provider.ISelectionItemProvider.get_IsSelected();
    private sealed virtual override IRawElementProviderSimple Windows.UI.Xaml.Automation.Provider.ISelectionItemProvider.get_SelectionContainer();
    private sealed virtual override void Windows.UI.Xaml.Automation.Provider.ISelectionItemProvider.AddToSelection();
    private sealed virtual override void Windows.UI.Xaml.Automation.Provider.ISelectionItemProvider.RemoveFromSelection();
    private sealed virtual override void Windows.UI.Xaml.Automation.Provider.ISelectionItemProvider.Select();
    private sealed virtual override bool Windows.UI.Xaml.Automation.Provider.ISelectionProvider.get_CanSelectMultiple();
    private sealed virtual override bool Windows.UI.Xaml.Automation.Provider.ISelectionProvider.get_IsSelectionRequired();
    private sealed virtual override IRawElementProviderSimple[] Windows.UI.Xaml.Automation.Provider.ISelectionProvider.GetSelection();
    private void EnsureEnabled();
    [CompilerGeneratedAttribute]
private void <Windows.UI.Xaml.Automation.Provider.IInvokeProvider.Invoke>b__34_0();
    [CompilerGeneratedAttribute]
private void <Windows.UI.Xaml.Automation.Provider.ISelectionItemProvider.RemoveFromSelection>b__41_0();
    [CompilerGeneratedAttribute]
private void <Windows.UI.Xaml.Automation.Provider.ISelectionItemProvider.Select>b__42_0();
}
public class Microsoft.Toolkit.Uwp.UI.Automation.Peers.DataGridRowAutomationPeer : FrameworkElementAutomationPeer {
    public DataGridRowAutomationPeer(DataGridRow owner);
    protected virtual AutomationControlType GetAutomationControlTypeCore();
    protected virtual string GetClassNameCore();
    protected virtual string GetItemTypeCore();
}
public class Microsoft.Toolkit.Uwp.UI.Automation.Peers.DataGridRowGroupHeaderAutomationPeer : FrameworkElementAutomationPeer {
    public DataGridRowGroupHeaderAutomationPeer(DataGridRowGroupHeader owner);
    protected virtual AutomationControlType GetAutomationControlTypeCore();
    protected virtual string GetClassNameCore();
}
public class Microsoft.Toolkit.Uwp.UI.Automation.Peers.DataGridRowHeaderAutomationPeer : FrameworkElementAutomationPeer {
    private DataGridRowHeader OwningHeader { get; }
    public DataGridRowHeaderAutomationPeer(DataGridRowHeader owner);
    private DataGridRowHeader get_OwningHeader();
    protected virtual AutomationControlType GetAutomationControlTypeCore();
    protected virtual string GetClassNameCore();
    protected virtual string GetNameCore();
    protected virtual bool IsContentElementCore();
}
public class Microsoft.Toolkit.Uwp.UI.Automation.Peers.DataGridRowsPresenterAutomationPeer : FrameworkElementAutomationPeer {
    private DataGridAutomationPeer GridPeer { get; }
    private DataGridRowsPresenter OwningRowsPresenter { get; }
    public DataGridRowsPresenterAutomationPeer(DataGridRowsPresenter owner);
    private DataGridAutomationPeer get_GridPeer();
    private DataGridRowsPresenter get_OwningRowsPresenter();
    protected virtual AutomationControlType GetAutomationControlTypeCore();
    protected virtual IList`1<AutomationPeer> GetChildrenCore();
    protected virtual string GetClassNameCore();
    protected virtual bool IsContentElementCore();
}
[TemplatePartAttribute]
[TemplatePartAttribute]
[TemplatePartAttribute]
[TemplatePartAttribute]
[TemplatePartAttribute]
[TemplateVisualStateAttribute]
[TemplateVisualStateAttribute]
[TemplateVisualStateAttribute]
[TemplateVisualStateAttribute]
[TemplateVisualStateAttribute]
[TemplateVisualStateAttribute]
[TemplateVisualStateAttribute]
[TemplateVisualStateAttribute]
[TemplateVisualStateAttribute]
[TemplateVisualStateAttribute]
[TemplateVisualStateAttribute]
[TemplateVisualStateAttribute]
[StyleTypedPropertyAttribute]
[StyleTypedPropertyAttribute]
[StyleTypedPropertyAttribute]
[StyleTypedPropertyAttribute]
[StyleTypedPropertyAttribute]
[StyleTypedPropertyAttribute]
public class Microsoft.Toolkit.Uwp.UI.Controls.DataGrid : Control {
    private static string DATAGRID_elementRootName;
    private static string DATAGRID_elementRowsPresenterName;
    private static string DATAGRID_elementColumnHeadersPresenterName;
    private static string DATAGRID_elementFrozenColumnScrollBarSpacerName;
    private static string DATAGRID_elementHorizontalScrollBarName;
    private static string DATAGRID_elementRowHeadersPresenterName;
    private static string DATAGRID_elementTopLeftCornerHeaderName;
    private static string DATAGRID_elementTopRightCornerHeaderName;
    private static string DATAGRID_elementBottomRightCornerHeaderName;
    private static string DATAGRID_elementVerticalScrollBarName;
    private static bool DATAGRID_defaultAutoGenerateColumns;
    private static bool DATAGRID_defaultCanUserReorderColumns;
    private static bool DATAGRID_defaultCanUserResizeColumns;
    private static bool DATAGRID_defaultCanUserSortColumns;
    private static DataGridGridLinesVisibility DATAGRID_defaultGridLinesVisibility;
    private static DataGridHeadersVisibility DATAGRID_defaultHeadersVisibility;
    private static DataGridRowDetailsVisibilityMode DATAGRID_defaultRowDetailsVisibility;
    private static DataGridSelectionMode DATAGRID_defaultSelectionMode;
    private static ScrollBarVisibility DATAGRID_defaultScrollBarVisibility;
    private static int DATAGRID_defaultColumnDisplayOrder;
    private static double DATAGRID_horizontalGridLinesThickness;
    private static double DATAGRID_minimumRowHeaderWidth;
    private static double DATAGRID_minimumColumnHeaderHeight;
    internal static double DATAGRID_maximumStarColumnWidth;
    internal static double DATAGRID_minimumStarColumnWidth;
    private static double DATAGRID_mouseWheelDeltaDivider;
    private static double DATAGRID_maxHeadersThickness;
    private static double DATAGRID_defaultRowHeight;
    internal static double DATAGRID_defaultRowGroupSublevelIndent;
    private static double DATAGRID_defaultMinColumnWidth;
    private static double DATAGRID_defaultMaxColumnWidth;
    private static double DATAGRID_defaultIncrementalLoadingThreshold;
    private static double DATAGRID_defaultDataFetchSize;
    private static int DATAGRID_noScrollBarCountdownMs;
    private static double DATAGRID_roundingDelta;
    private UIElement _bottomRightCorner;
    private DataGridColumnHeadersPresenter _columnHeadersPresenter;
    private ScrollBar _hScrollBar;
    private DataGridRowsPresenter _rowsPresenter;
    private ScrollBar _vScrollBar;
    private byte _autoGeneratingColumnOperationCount;
    private bool _autoSizingColumns;
    private List`1<ValidationResult> _bindingValidationResults;
    private ContentControl _clipboardContentControl;
    private IndexToValueTable`1<Visibility> _collapsedSlotsTable;
    private bool _columnHeaderHasFocus;
    private DataGridCellCoordinates _currentCellCoordinates;
    private int _desiredCurrentColumnIndex;
    private int _editingColumnIndex;
    private RoutedEventArgs _editingEventArgs;
    private bool _executingLostFocusActions;
    private bool _flushCurrentCellChanged;
    private bool _focusEditingControl;
    private FocusInputDeviceKind _focusInputDevice;
    private DependencyObject _focusedObject;
    private DataGridRow _focusedRow;
    private FrameworkElement _frozenColumnScrollBarSpacer;
    private bool _hasNoIndicatorStateStoryboardCompletedHandler;
    private DispatcherQueueTimer _hideScrollBarsTimer;
    private double _horizontalOffset;
    private byte _horizontalScrollChangesIgnored;
    private bool _ignoreNextScrollBarsLayout;
    private List`1<ValidationResult> _indeiValidationResults;
    private bool _initializingNewItem;
    private bool _isHorizontalScrollBarInteracting;
    private bool _isVerticalScrollBarInteracting;
    private bool _isPointerOverHorizontalScrollBar;
    private bool _isPointerOverVerticalScrollBar;
    private bool _keepScrollBarsShowing;
    private int _lastEstimatedRow;
    private List`1<DataGridRow> _loadedRows;
    private Queue`1<Action> _lostFocusActions;
    private bool _makeFirstDisplayedCellCurrentCellPending;
    private bool _measured;
    private double _negHorizontalOffset;
    private int _noCurrentCellChangeCount;
    private int _noFocusedColumnChangeCount;
    private int _noSelectionChangeCount;
    private double _oldEdgedRowsHeightCalculated;
    private bool _preferMouseIndicators;
    private DataGridCellCoordinates _previousAutomationFocusCoordinates;
    private DataGridColumn _previousCurrentColumn;
    private object _previousCurrentItem;
    private List`1<ValidationResult> _propertyValidationResults;
    private ScrollBarVisualState _proposedScrollBarsState;
    private ScrollBarsSeparatorVisualState _proposedScrollBarsSeparatorState;
    private string _rowGroupHeaderPropertyNameAlternative;
    private ObservableCollection`1<Style> _rowGroupHeaderStyles;
    private List`1<Style> _rowGroupHeaderStylesOld;
    private Double[] _rowGroupHeightsByLevel;
    private double _rowHeaderDesiredWidth;
    private Nullable`1<Size> _rowsPresenterAvailableSize;
    private bool _scrollingByHeight;
    private DataGridSelectedItemsCollection _selectedItems;
    private IndexToValueTable`1<Visibility> _showDetailsTable;
    private bool _showingMouseIndicators;
    private bool _successfullyUpdatedSelection;
    private bool _temporarilyResetCurrentCell;
    private bool _isUserSorting;
    private ContentControl _topLeftCornerHeader;
    private ContentControl _topRightCornerHeader;
    private object _uneditedValue;
    private string _updateSourcePath;
    private Dictionary`2<INotifyDataErrorInfo, string> _validationItems;
    private List`1<ValidationResult> _validationResults;
    private byte _verticalScrollChangesIgnored;
    private IObservableVector`1<object> _topLevelGroup;
    private double _verticalOffset;
    private Dictionary`2<IObservableVector`1<object>, WeakEventListener`3<DataGrid, object, IVectorChangedEventArgs>> _groupsVectorChangedListenersTable;
    [CompilerGeneratedAttribute]
private EventHandler`1<DataGridAutoGeneratingColumnEventArgs> AutoGeneratingColumn;
    [CompilerGeneratedAttribute]
private EventHandler`1<DataGridBeginningEditEventArgs> BeginningEdit;
    [CompilerGeneratedAttribute]
private EventHandler`1<DataGridCellEditEndedEventArgs> CellEditEnded;
    [CompilerGeneratedAttribute]
private EventHandler`1<DataGridCellEditEndingEventArgs> CellEditEnding;
    [CompilerGeneratedAttribute]
private EventHandler`1<DataGridColumnEventArgs> ColumnDisplayIndexChanged;
    [CompilerGeneratedAttribute]
private EventHandler`1<DragCompletedEventArgs> ColumnHeaderDragCompleted;
    [CompilerGeneratedAttribute]
private EventHandler`1<DragDeltaEventArgs> ColumnHeaderDragDelta;
    [CompilerGeneratedAttribute]
private EventHandler`1<DragStartedEventArgs> ColumnHeaderDragStarted;
    [CompilerGeneratedAttribute]
private EventHandler`1<DataGridColumnEventArgs> ColumnReordered;
    [CompilerGeneratedAttribute]
private EventHandler`1<DataGridColumnReorderingEventArgs> ColumnReordering;
    [CompilerGeneratedAttribute]
private EventHandler`1<DataGridRowClipboardEventArgs> CopyingRowClipboardContent;
    [CompilerGeneratedAttribute]
private EventHandler`1<EventArgs> CurrentCellChanged;
    [CompilerGeneratedAttribute]
private EventHandler`1<DataGridRowEventArgs> LoadingRow;
    [CompilerGeneratedAttribute]
private EventHandler`1<DataGridRowDetailsEventArgs> LoadingRowDetails;
    [CompilerGeneratedAttribute]
private EventHandler`1<DataGridRowGroupHeaderEventArgs> LoadingRowGroup;
    [CompilerGeneratedAttribute]
private EventHandler`1<DataGridPreparingCellForEditEventArgs> PreparingCellForEdit;
    [CompilerGeneratedAttribute]
private EventHandler`1<DataGridRowDetailsEventArgs> RowDetailsVisibilityChanged;
    [CompilerGeneratedAttribute]
private EventHandler`1<DataGridRowEditEndedEventArgs> RowEditEnded;
    [CompilerGeneratedAttribute]
private EventHandler`1<DataGridRowEditEndingEventArgs> RowEditEnding;
    [CompilerGeneratedAttribute]
private SelectionChangedEventHandler SelectionChanged;
    [CompilerGeneratedAttribute]
private EventHandler`1<DataGridColumnEventArgs> Sorting;
    [CompilerGeneratedAttribute]
private EventHandler`1<DataGridRowEventArgs> UnloadingRow;
    [CompilerGeneratedAttribute]
private EventHandler`1<DataGridRowGroupHeaderEventArgs> UnloadingRowGroup;
    [CompilerGeneratedAttribute]
private EventHandler`1<DataGridRowDetailsEventArgs> UnloadingRowDetails;
    public static DependencyProperty AlternatingRowBackgroundProperty;
    public static DependencyProperty AlternatingRowForegroundProperty;
    public static DependencyProperty AreRowDetailsFrozenProperty;
    public static DependencyProperty AreRowGroupHeadersFrozenProperty;
    public static DependencyProperty AutoGenerateColumnsProperty;
    public static DependencyProperty CanUserReorderColumnsProperty;
    public static DependencyProperty CanUserResizeColumnsProperty;
    public static DependencyProperty CanUserSortColumnsProperty;
    public static DependencyProperty CellStyleProperty;
    public static DependencyProperty ClipboardCopyModeProperty;
    public static DependencyProperty ColumnHeaderHeightProperty;
    public static DependencyProperty ColumnHeaderStyleProperty;
    public static DependencyProperty ColumnWidthProperty;
    public static DependencyProperty DataFetchSizeProperty;
    public static DependencyProperty DragIndicatorStyleProperty;
    public static DependencyProperty DropLocationIndicatorStyleProperty;
    public static DependencyProperty FrozenColumnCountProperty;
    public static DependencyProperty GridLinesVisibilityProperty;
    public static DependencyProperty HeadersVisibilityProperty;
    public static DependencyProperty HorizontalGridLinesBrushProperty;
    public static DependencyProperty HorizontalScrollBarVisibilityProperty;
    public static DependencyProperty IsReadOnlyProperty;
    public static DependencyProperty IsValidProperty;
    public static DependencyProperty IncrementalLoadingThresholdProperty;
    public static DependencyProperty IncrementalLoadingTriggerProperty;
    public static DependencyProperty ItemsSourceProperty;
    public static DependencyProperty MaxColumnWidthProperty;
    public static DependencyProperty MinColumnWidthProperty;
    public static DependencyProperty RowBackgroundProperty;
    public static DependencyProperty RowDetailsTemplateProperty;
    public static DependencyProperty RowDetailsVisibilityModeProperty;
    public static DependencyProperty RowForegroundProperty;
    public static DependencyProperty RowHeightProperty;
    public static DependencyProperty RowHeaderWidthProperty;
    public static DependencyProperty RowHeaderStyleProperty;
    public static DependencyProperty RowStyleProperty;
    public static DependencyProperty SelectionModeProperty;
    public static DependencyProperty SelectedIndexProperty;
    public static DependencyProperty SelectedItemProperty;
    public static DependencyProperty VerticalGridLinesBrushProperty;
    public static DependencyProperty VerticalScrollBarVisibilityProperty;
    [CompilerGeneratedAttribute]
private int <AnchorSlot>k__BackingField;
    [CompilerGeneratedAttribute]
private double <AvailableSlotElementRoom>k__BackingField;
    [CompilerGeneratedAttribute]
private DataGridColumnHeaderInteractionInfo <ColumnHeaderInteractionInfo>k__BackingField;
    [CompilerGeneratedAttribute]
private DataGridColumnCollection <ColumnsInternal>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ContainsFocus>k__BackingField;
    [CompilerGeneratedAttribute]
private DataGridDataConnection <DataConnection>k__BackingField;
    [CompilerGeneratedAttribute]
private DataGridDisplayData <DisplayData>k__BackingField;
    [CompilerGeneratedAttribute]
private DataGridRow <EditingRow>k__BackingField;
    [CompilerGeneratedAttribute]
private DataGridColumn <FocusedColumn>k__BackingField;
    [CompilerGeneratedAttribute]
private double <HorizontalAdjustment>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <LoadingOrUnloadingRow>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <InDisplayIndexAdjustments>k__BackingField;
    [CompilerGeneratedAttribute]
private double <NegVerticalOffset>k__BackingField;
    [CompilerGeneratedAttribute]
private double <RowDetailsHeightEstimate>k__BackingField;
    [CompilerGeneratedAttribute]
private double <RowGroupHeaderHeightEstimate>k__BackingField;
    [CompilerGeneratedAttribute]
private IndexToValueTable`1<DataGridRowGroupInfo> <RowGroupHeadersTable>k__BackingField;
    [CompilerGeneratedAttribute]
private Double[] <RowGroupSublevelIndents>k__BackingField;
    [CompilerGeneratedAttribute]
private double <RowHeightEstimate>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <SelectionHasChanged>k__BackingField;
    [CompilerGeneratedAttribute]
private int <SlotCount>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <UpdatedStateOnTapped>k__BackingField;
    [CompilerGeneratedAttribute]
private int <VisibleSlotCount>k__BackingField;
    [CompilerGeneratedAttribute]
private VirtualKey <LastHandledKeyDown>k__BackingField;
    public Brush AlternatingRowBackground { get; public set; }
    public Brush AlternatingRowForeground { get; public set; }
    public bool AreRowDetailsFrozen { get; public set; }
    public bool AreRowGroupHeadersFrozen { get; public set; }
    public bool AutoGenerateColumns { get; public set; }
    public bool CanUserReorderColumns { get; public set; }
    public bool CanUserResizeColumns { get; public set; }
    public bool CanUserSortColumns { get; public set; }
    public Style CellStyle { get; public set; }
    public DataGridClipboardCopyMode ClipboardCopyMode { get; public set; }
    public double ColumnHeaderHeight { get; public set; }
    public Style ColumnHeaderStyle { get; public set; }
    public DataGridLength ColumnWidth { get; public set; }
    public double DataFetchSize { get; public set; }
    public Style DragIndicatorStyle { get; public set; }
    public Style DropLocationIndicatorStyle { get; public set; }
    public int FrozenColumnCount { get; public set; }
    public DataGridGridLinesVisibility GridLinesVisibility { get; public set; }
    public DataGridHeadersVisibility HeadersVisibility { get; public set; }
    public Brush HorizontalGridLinesBrush { get; public set; }
    public ScrollBarVisibility HorizontalScrollBarVisibility { get; public set; }
    public bool IsReadOnly { get; public set; }
    public bool IsValid { get; internal set; }
    public double IncrementalLoadingThreshold { get; public set; }
    public IncrementalLoadingTrigger IncrementalLoadingTrigger { get; public set; }
    public IEnumerable ItemsSource { get; public set; }
    public double MaxColumnWidth { get; public set; }
    public double MinColumnWidth { get; public set; }
    public Brush RowBackground { get; public set; }
    public DataTemplate RowDetailsTemplate { get; public set; }
    public DataGridRowDetailsVisibilityMode RowDetailsVisibilityMode { get; public set; }
    public Brush RowForeground { get; public set; }
    public double RowHeight { get; public set; }
    public double RowHeaderWidth { get; public set; }
    public Style RowHeaderStyle { get; public set; }
    public Style RowStyle { get; public set; }
    public DataGridSelectionMode SelectionMode { get; public set; }
    public int SelectedIndex { get; public set; }
    public object SelectedItem { get; public set; }
    public Brush VerticalGridLinesBrush { get; public set; }
    public ScrollBarVisibility VerticalScrollBarVisibility { get; public set; }
    public ObservableCollection`1<DataGridColumn> Columns { get; }
    public DataGridColumn CurrentColumn { get; public set; }
    public string RowGroupHeaderPropertyNameAlternative { get; public set; }
    public ObservableCollection`1<Style> RowGroupHeaderStyles { get; }
    public IList SelectedItems { get; }
    protected object CurrentItem { get; }
    internal static double HorizontalGridLinesThickness { get; }
    internal int AnchorSlot { get; private set; }
    internal double ActualRowHeaderWidth { get; }
    internal double ActualRowsPresenterHeight { get; }
    internal bool AllowsManipulation { get; }
    internal bool AreColumnHeadersVisible { get; }
    internal bool AreRowHeadersVisible { get; }
    internal bool AutoSizingColumns { get; internal set; }
    internal double AvailableSlotElementRoom { get; internal set; }
    internal double CellsHeight { get; }
    internal double CellsWidth { get; }
    internal ContentControl ClipboardContentControl { get; }
    internal bool ColumnHeaderHasFocus { get; internal set; }
    internal DataGridColumnHeaderInteractionInfo ColumnHeaderInteractionInfo { get; internal set; }
    internal DataGridColumnHeadersPresenter ColumnHeaders { get; }
    internal DataGridColumnCollection ColumnsInternal { get; private set; }
    internal List`1<DataGridColumn> ColumnsItemsInternal { get; }
    internal bool ContainsFocus { get; private set; }
    internal int CurrentColumnIndex { get; private set; }
    internal int CurrentSlot { get; private set; }
    internal DataGridDataConnection DataConnection { get; private set; }
    internal DataGridDisplayData DisplayData { get; private set; }
    internal int EditingColumnIndex { get; }
    internal DataGridRow EditingRow { get; private set; }
    internal double FirstDisplayedScrollingColumnHiddenWidth { get; }
    internal DataGridColumn FocusedColumn { get; internal set; }
    internal bool HasColumnUserInteraction { get; }
    internal double HorizontalAdjustment { get; private set; }
    internal double HorizontalOffset { get; internal set; }
    internal ScrollBar HorizontalScrollBar { get; }
    internal bool LoadingOrUnloadingRow { get; private set; }
    internal bool InDisplayIndexAdjustments { get; internal set; }
    internal double NegVerticalOffset { get; private set; }
    internal int NoCurrentCellChangeCount { get; internal set; }
    internal double RowDetailsHeightEstimate { get; private set; }
    internal double RowHeadersDesiredWidth { get; internal set; }
    internal double RowGroupHeaderHeightEstimate { get; private set; }
    internal IndexToValueTable`1<DataGridRowGroupInfo> RowGroupHeadersTable { get; private set; }
    internal Double[] RowGroupSublevelIndents { get; private set; }
    internal double RowHeightEstimate { get; private set; }
    internal Nullable`1<Size> RowsPresenterAvailableSize { get; internal set; }
    internal bool SelectionHasChanged { get; internal set; }
    internal int SlotCount { get; private set; }
    internal bool UpdatedStateOnTapped { get; internal set; }
    internal bool UsesStarSizing { get; }
    internal double VerticalOffset { get; internal set; }
    internal ScrollBar VerticalScrollBar { get; }
    internal int VisibleSlotCount { get; internal set; }
    private bool AreAllScrollBarsCollapsed { get; }
    private bool AreBothScrollBarsVisible { get; }
    private DataGridCellCoordinates CurrentCellCoordinates { get; private set; }
    private int FirstDisplayedNonFillerColumnIndex { get; }
    private bool IsHorizontalScrollBarInteracting { get; private set; }
    private bool IsHorizontalScrollBarOverCells { get; }
    private bool IsVerticalScrollBarInteracting { get; private set; }
    private bool IsVerticalScrollBarOverCells { get; }
    private VirtualKey LastHandledKeyDown { get; private set; }
    private int NoSelectionChangeCount { get; private set; }
    internal bool AreRowBottomGridLinesRequired { get; }
    internal int FirstVisibleSlot { get; }
    internal int FrozenColumnCountWithFiller { get; }
    internal int LastVisibleSlot { get; }
    private double EdgedRowsHeightCalculated { get; }
    private static DataGrid();
    [CompilerGeneratedAttribute]
public void add_AutoGeneratingColumn(EventHandler`1<DataGridAutoGeneratingColumnEventArgs> value);
    [CompilerGeneratedAttribute]
public void remove_AutoGeneratingColumn(EventHandler`1<DataGridAutoGeneratingColumnEventArgs> value);
    [CompilerGeneratedAttribute]
public void add_BeginningEdit(EventHandler`1<DataGridBeginningEditEventArgs> value);
    [CompilerGeneratedAttribute]
public void remove_BeginningEdit(EventHandler`1<DataGridBeginningEditEventArgs> value);
    [CompilerGeneratedAttribute]
public void add_CellEditEnded(EventHandler`1<DataGridCellEditEndedEventArgs> value);
    [CompilerGeneratedAttribute]
public void remove_CellEditEnded(EventHandler`1<DataGridCellEditEndedEventArgs> value);
    [CompilerGeneratedAttribute]
public void add_CellEditEnding(EventHandler`1<DataGridCellEditEndingEventArgs> value);
    [CompilerGeneratedAttribute]
public void remove_CellEditEnding(EventHandler`1<DataGridCellEditEndingEventArgs> value);
    [CompilerGeneratedAttribute]
public void add_ColumnDisplayIndexChanged(EventHandler`1<DataGridColumnEventArgs> value);
    [CompilerGeneratedAttribute]
public void remove_ColumnDisplayIndexChanged(EventHandler`1<DataGridColumnEventArgs> value);
    [CompilerGeneratedAttribute]
public void add_ColumnHeaderDragCompleted(EventHandler`1<DragCompletedEventArgs> value);
    [CompilerGeneratedAttribute]
public void remove_ColumnHeaderDragCompleted(EventHandler`1<DragCompletedEventArgs> value);
    [CompilerGeneratedAttribute]
public void add_ColumnHeaderDragDelta(EventHandler`1<DragDeltaEventArgs> value);
    [CompilerGeneratedAttribute]
public void remove_ColumnHeaderDragDelta(EventHandler`1<DragDeltaEventArgs> value);
    [CompilerGeneratedAttribute]
public void add_ColumnHeaderDragStarted(EventHandler`1<DragStartedEventArgs> value);
    [CompilerGeneratedAttribute]
public void remove_ColumnHeaderDragStarted(EventHandler`1<DragStartedEventArgs> value);
    [CompilerGeneratedAttribute]
public void add_ColumnReordered(EventHandler`1<DataGridColumnEventArgs> value);
    [CompilerGeneratedAttribute]
public void remove_ColumnReordered(EventHandler`1<DataGridColumnEventArgs> value);
    [CompilerGeneratedAttribute]
public void add_ColumnReordering(EventHandler`1<DataGridColumnReorderingEventArgs> value);
    [CompilerGeneratedAttribute]
public void remove_ColumnReordering(EventHandler`1<DataGridColumnReorderingEventArgs> value);
    [CompilerGeneratedAttribute]
public void add_CopyingRowClipboardContent(EventHandler`1<DataGridRowClipboardEventArgs> value);
    [CompilerGeneratedAttribute]
public void remove_CopyingRowClipboardContent(EventHandler`1<DataGridRowClipboardEventArgs> value);
    [CompilerGeneratedAttribute]
public void add_CurrentCellChanged(EventHandler`1<EventArgs> value);
    [CompilerGeneratedAttribute]
public void remove_CurrentCellChanged(EventHandler`1<EventArgs> value);
    [CompilerGeneratedAttribute]
public void add_LoadingRow(EventHandler`1<DataGridRowEventArgs> value);
    [CompilerGeneratedAttribute]
public void remove_LoadingRow(EventHandler`1<DataGridRowEventArgs> value);
    [CompilerGeneratedAttribute]
public void add_LoadingRowDetails(EventHandler`1<DataGridRowDetailsEventArgs> value);
    [CompilerGeneratedAttribute]
public void remove_LoadingRowDetails(EventHandler`1<DataGridRowDetailsEventArgs> value);
    [CompilerGeneratedAttribute]
public void add_LoadingRowGroup(EventHandler`1<DataGridRowGroupHeaderEventArgs> value);
    [CompilerGeneratedAttribute]
public void remove_LoadingRowGroup(EventHandler`1<DataGridRowGroupHeaderEventArgs> value);
    [CompilerGeneratedAttribute]
public void add_PreparingCellForEdit(EventHandler`1<DataGridPreparingCellForEditEventArgs> value);
    [CompilerGeneratedAttribute]
public void remove_PreparingCellForEdit(EventHandler`1<DataGridPreparingCellForEditEventArgs> value);
    [CompilerGeneratedAttribute]
public void add_RowDetailsVisibilityChanged(EventHandler`1<DataGridRowDetailsEventArgs> value);
    [CompilerGeneratedAttribute]
public void remove_RowDetailsVisibilityChanged(EventHandler`1<DataGridRowDetailsEventArgs> value);
    [CompilerGeneratedAttribute]
public void add_RowEditEnded(EventHandler`1<DataGridRowEditEndedEventArgs> value);
    [CompilerGeneratedAttribute]
public void remove_RowEditEnded(EventHandler`1<DataGridRowEditEndedEventArgs> value);
    [CompilerGeneratedAttribute]
public void add_RowEditEnding(EventHandler`1<DataGridRowEditEndingEventArgs> value);
    [CompilerGeneratedAttribute]
public void remove_RowEditEnding(EventHandler`1<DataGridRowEditEndingEventArgs> value);
    [CompilerGeneratedAttribute]
public void add_SelectionChanged(SelectionChangedEventHandler value);
    [CompilerGeneratedAttribute]
public void remove_SelectionChanged(SelectionChangedEventHandler value);
    [CompilerGeneratedAttribute]
public void add_Sorting(EventHandler`1<DataGridColumnEventArgs> value);
    [CompilerGeneratedAttribute]
public void remove_Sorting(EventHandler`1<DataGridColumnEventArgs> value);
    [CompilerGeneratedAttribute]
public void add_UnloadingRow(EventHandler`1<DataGridRowEventArgs> value);
    [CompilerGeneratedAttribute]
public void remove_UnloadingRow(EventHandler`1<DataGridRowEventArgs> value);
    [CompilerGeneratedAttribute]
public void add_UnloadingRowGroup(EventHandler`1<DataGridRowGroupHeaderEventArgs> value);
    [CompilerGeneratedAttribute]
public void remove_UnloadingRowGroup(EventHandler`1<DataGridRowGroupHeaderEventArgs> value);
    [CompilerGeneratedAttribute]
public void add_UnloadingRowDetails(EventHandler`1<DataGridRowDetailsEventArgs> value);
    [CompilerGeneratedAttribute]
public void remove_UnloadingRowDetails(EventHandler`1<DataGridRowDetailsEventArgs> value);
    public Brush get_AlternatingRowBackground();
    public void set_AlternatingRowBackground(Brush value);
    private static void OnAlternatingRowBackgroundPropertyChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    public Brush get_AlternatingRowForeground();
    public void set_AlternatingRowForeground(Brush value);
    private static void OnAlternatingRowForegroundPropertyChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    public bool get_AreRowDetailsFrozen();
    public void set_AreRowDetailsFrozen(bool value);
    public bool get_AreRowGroupHeadersFrozen();
    public void set_AreRowGroupHeadersFrozen(bool value);
    private static void OnAreRowGroupHeadersFrozenPropertyChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    public bool get_AutoGenerateColumns();
    public void set_AutoGenerateColumns(bool value);
    private static void OnAutoGenerateColumnsPropertyChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    public bool get_CanUserReorderColumns();
    public void set_CanUserReorderColumns(bool value);
    public bool get_CanUserResizeColumns();
    public void set_CanUserResizeColumns(bool value);
    private static void OnCanUserResizeColumnsPropertyChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    public bool get_CanUserSortColumns();
    public void set_CanUserSortColumns(bool value);
    public Style get_CellStyle();
    public void set_CellStyle(Style value);
    private static void OnCellStylePropertyChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    public DataGridClipboardCopyMode get_ClipboardCopyMode();
    public void set_ClipboardCopyMode(DataGridClipboardCopyMode value);
    public double get_ColumnHeaderHeight();
    public void set_ColumnHeaderHeight(double value);
    private static void OnColumnHeaderHeightPropertyChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    public Style get_ColumnHeaderStyle();
    public void set_ColumnHeaderStyle(Style value);
    private static void OnColumnHeaderStylePropertyChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    public DataGridLength get_ColumnWidth();
    public void set_ColumnWidth(DataGridLength value);
    private static void OnColumnWidthPropertyChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    public double get_DataFetchSize();
    public void set_DataFetchSize(double value);
    private static void OnDataFetchSizePropertyChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    public Style get_DragIndicatorStyle();
    public void set_DragIndicatorStyle(Style value);
    public Style get_DropLocationIndicatorStyle();
    public void set_DropLocationIndicatorStyle(Style value);
    public int get_FrozenColumnCount();
    public void set_FrozenColumnCount(int value);
    private static void OnFrozenColumnCountPropertyChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    private static void ProcessFrozenColumnCount(DataGrid dataGrid);
    public DataGridGridLinesVisibility get_GridLinesVisibility();
    public void set_GridLinesVisibility(DataGridGridLinesVisibility value);
    private static void OnGridLinesVisibilityPropertyChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    public DataGridHeadersVisibility get_HeadersVisibility();
    public void set_HeadersVisibility(DataGridHeadersVisibility value);
    private static void OnHeadersVisibilityPropertyChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    public Brush get_HorizontalGridLinesBrush();
    public void set_HorizontalGridLinesBrush(Brush value);
    private static void OnHorizontalGridLinesBrushPropertyChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    public ScrollBarVisibility get_HorizontalScrollBarVisibility();
    public void set_HorizontalScrollBarVisibility(ScrollBarVisibility value);
    private static void OnHorizontalScrollBarVisibilityPropertyChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    public bool get_IsReadOnly();
    public void set_IsReadOnly(bool value);
    private static void OnIsReadOnlyPropertyChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    public bool get_IsValid();
    internal void set_IsValid(bool value);
    private static void OnIsValidPropertyChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    public double get_IncrementalLoadingThreshold();
    public void set_IncrementalLoadingThreshold(double value);
    private static void OnIncrementalLoadingThresholdPropertyChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    public IncrementalLoadingTrigger get_IncrementalLoadingTrigger();
    public void set_IncrementalLoadingTrigger(IncrementalLoadingTrigger value);
    public IEnumerable get_ItemsSource();
    public void set_ItemsSource(IEnumerable value);
    private static void OnItemsSourcePropertyChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    public double get_MaxColumnWidth();
    public void set_MaxColumnWidth(double value);
    private static void OnMaxColumnWidthPropertyChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    public double get_MinColumnWidth();
    public void set_MinColumnWidth(double value);
    private static void OnMinColumnWidthPropertyChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    public Brush get_RowBackground();
    public void set_RowBackground(Brush value);
    private static void OnRowBackgroundPropertyChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    public DataTemplate get_RowDetailsTemplate();
    public void set_RowDetailsTemplate(DataTemplate value);
    private static void OnRowDetailsTemplatePropertyChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    public DataGridRowDetailsVisibilityMode get_RowDetailsVisibilityMode();
    public void set_RowDetailsVisibilityMode(DataGridRowDetailsVisibilityMode value);
    private static void OnRowDetailsVisibilityModePropertyChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    public Brush get_RowForeground();
    public void set_RowForeground(Brush value);
    private static void OnRowForegroundPropertyChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    public double get_RowHeight();
    public void set_RowHeight(double value);
    private static void OnRowHeightPropertyChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    public double get_RowHeaderWidth();
    public void set_RowHeaderWidth(double value);
    private static void OnRowHeaderWidthPropertyChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    public Style get_RowHeaderStyle();
    public void set_RowHeaderStyle(Style value);
    private static void OnRowHeaderStylePropertyChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    public Style get_RowStyle();
    public void set_RowStyle(Style value);
    private static void OnRowStylePropertyChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    public DataGridSelectionMode get_SelectionMode();
    public void set_SelectionMode(DataGridSelectionMode value);
    private static void OnSelectionModePropertyChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    public int get_SelectedIndex();
    public void set_SelectedIndex(int value);
    private static void OnSelectedIndexPropertyChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    public object get_SelectedItem();
    public void set_SelectedItem(object value);
    private static void OnSelectedItemPropertyChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    public Brush get_VerticalGridLinesBrush();
    public void set_VerticalGridLinesBrush(Brush value);
    private static void OnVerticalGridLinesBrushPropertyChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    public ScrollBarVisibility get_VerticalScrollBarVisibility();
    public void set_VerticalScrollBarVisibility(ScrollBarVisibility value);
    private static void OnVerticalScrollBarVisibilityPropertyChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    public ObservableCollection`1<DataGridColumn> get_Columns();
    public DataGridColumn get_CurrentColumn();
    public void set_CurrentColumn(DataGridColumn value);
    public string get_RowGroupHeaderPropertyNameAlternative();
    public void set_RowGroupHeaderPropertyNameAlternative(string value);
    public ObservableCollection`1<Style> get_RowGroupHeaderStyles();
    public IList get_SelectedItems();
    protected object get_CurrentItem();
    internal static double get_HorizontalGridLinesThickness();
    [CompilerGeneratedAttribute]
internal int get_AnchorSlot();
    [CompilerGeneratedAttribute]
private void set_AnchorSlot(int value);
    internal double get_ActualRowHeaderWidth();
    internal double get_ActualRowsPresenterHeight();
    internal bool get_AllowsManipulation();
    internal bool get_AreColumnHeadersVisible();
    internal bool get_AreRowHeadersVisible();
    internal bool get_AutoSizingColumns();
    internal void set_AutoSizingColumns(bool value);
    [CompilerGeneratedAttribute]
internal double get_AvailableSlotElementRoom();
    [CompilerGeneratedAttribute]
internal void set_AvailableSlotElementRoom(double value);
    internal double get_CellsHeight();
    internal double get_CellsWidth();
    internal ContentControl get_ClipboardContentControl();
    internal bool get_ColumnHeaderHasFocus();
    internal void set_ColumnHeaderHasFocus(bool value);
    [CompilerGeneratedAttribute]
internal DataGridColumnHeaderInteractionInfo get_ColumnHeaderInteractionInfo();
    [CompilerGeneratedAttribute]
internal void set_ColumnHeaderInteractionInfo(DataGridColumnHeaderInteractionInfo value);
    internal DataGridColumnHeadersPresenter get_ColumnHeaders();
    [CompilerGeneratedAttribute]
internal DataGridColumnCollection get_ColumnsInternal();
    [CompilerGeneratedAttribute]
private void set_ColumnsInternal(DataGridColumnCollection value);
    internal List`1<DataGridColumn> get_ColumnsItemsInternal();
    [CompilerGeneratedAttribute]
internal bool get_ContainsFocus();
    [CompilerGeneratedAttribute]
private void set_ContainsFocus(bool value);
    internal int get_CurrentColumnIndex();
    private void set_CurrentColumnIndex(int value);
    internal int get_CurrentSlot();
    private void set_CurrentSlot(int value);
    [CompilerGeneratedAttribute]
internal DataGridDataConnection get_DataConnection();
    [CompilerGeneratedAttribute]
private void set_DataConnection(DataGridDataConnection value);
    [CompilerGeneratedAttribute]
internal DataGridDisplayData get_DisplayData();
    [CompilerGeneratedAttribute]
private void set_DisplayData(DataGridDisplayData value);
    internal int get_EditingColumnIndex();
    [CompilerGeneratedAttribute]
internal DataGridRow get_EditingRow();
    [CompilerGeneratedAttribute]
private void set_EditingRow(DataGridRow value);
    internal double get_FirstDisplayedScrollingColumnHiddenWidth();
    [CompilerGeneratedAttribute]
internal DataGridColumn get_FocusedColumn();
    [CompilerGeneratedAttribute]
internal void set_FocusedColumn(DataGridColumn value);
    internal bool get_HasColumnUserInteraction();
    [CompilerGeneratedAttribute]
internal double get_HorizontalAdjustment();
    [CompilerGeneratedAttribute]
private void set_HorizontalAdjustment(double value);
    internal double get_HorizontalOffset();
    internal void set_HorizontalOffset(double value);
    internal ScrollBar get_HorizontalScrollBar();
    [CompilerGeneratedAttribute]
internal bool get_LoadingOrUnloadingRow();
    [CompilerGeneratedAttribute]
private void set_LoadingOrUnloadingRow(bool value);
    [CompilerGeneratedAttribute]
internal bool get_InDisplayIndexAdjustments();
    [CompilerGeneratedAttribute]
internal void set_InDisplayIndexAdjustments(bool value);
    [CompilerGeneratedAttribute]
internal double get_NegVerticalOffset();
    [CompilerGeneratedAttribute]
private void set_NegVerticalOffset(double value);
    internal int get_NoCurrentCellChangeCount();
    internal void set_NoCurrentCellChangeCount(int value);
    [CompilerGeneratedAttribute]
internal double get_RowDetailsHeightEstimate();
    [CompilerGeneratedAttribute]
private void set_RowDetailsHeightEstimate(double value);
    internal double get_RowHeadersDesiredWidth();
    internal void set_RowHeadersDesiredWidth(double value);
    [CompilerGeneratedAttribute]
internal double get_RowGroupHeaderHeightEstimate();
    [CompilerGeneratedAttribute]
private void set_RowGroupHeaderHeightEstimate(double value);
    [CompilerGeneratedAttribute]
internal IndexToValueTable`1<DataGridRowGroupInfo> get_RowGroupHeadersTable();
    [CompilerGeneratedAttribute]
private void set_RowGroupHeadersTable(IndexToValueTable`1<DataGridRowGroupInfo> value);
    [CompilerGeneratedAttribute]
internal Double[] get_RowGroupSublevelIndents();
    [CompilerGeneratedAttribute]
private void set_RowGroupSublevelIndents(Double[] value);
    [CompilerGeneratedAttribute]
internal double get_RowHeightEstimate();
    [CompilerGeneratedAttribute]
private void set_RowHeightEstimate(double value);
    internal Nullable`1<Size> get_RowsPresenterAvailableSize();
    internal void set_RowsPresenterAvailableSize(Nullable`1<Size> value);
    [CompilerGeneratedAttribute]
internal bool get_SelectionHasChanged();
    [CompilerGeneratedAttribute]
internal void set_SelectionHasChanged(bool value);
    [CompilerGeneratedAttribute]
internal int get_SlotCount();
    [CompilerGeneratedAttribute]
private void set_SlotCount(int value);
    [CompilerGeneratedAttribute]
internal bool get_UpdatedStateOnTapped();
    [CompilerGeneratedAttribute]
internal void set_UpdatedStateOnTapped(bool value);
    internal bool get_UsesStarSizing();
    internal double get_VerticalOffset();
    internal void set_VerticalOffset(double value);
    internal ScrollBar get_VerticalScrollBar();
    [CompilerGeneratedAttribute]
internal int get_VisibleSlotCount();
    [CompilerGeneratedAttribute]
internal void set_VisibleSlotCount(int value);
    private bool get_AreAllScrollBarsCollapsed();
    private bool get_AreBothScrollBarsVisible();
    private DataGridCellCoordinates get_CurrentCellCoordinates();
    private void set_CurrentCellCoordinates(DataGridCellCoordinates value);
    private int get_FirstDisplayedNonFillerColumnIndex();
    private bool get_IsHorizontalScrollBarInteracting();
    private void set_IsHorizontalScrollBarInteracting(bool value);
    private bool get_IsHorizontalScrollBarOverCells();
    private bool get_IsVerticalScrollBarInteracting();
    private void set_IsVerticalScrollBarInteracting(bool value);
    private bool get_IsVerticalScrollBarOverCells();
    [CompilerGeneratedAttribute]
private VirtualKey get_LastHandledKeyDown();
    [CompilerGeneratedAttribute]
private void set_LastHandledKeyDown(VirtualKey value);
    private int get_NoSelectionChangeCount();
    private void set_NoSelectionChangeCount(int value);
    public bool BeginEdit();
    public bool BeginEdit(RoutedEventArgs editingEventArgs);
    public bool CancelEdit();
    public bool CancelEdit(DataGridEditingUnit editingUnit);
    public bool CommitEdit();
    public bool CommitEdit(DataGridEditingUnit editingUnit, bool exitEditingMode);
    public ICollectionViewGroup GetGroupFromItem(object item, int groupLevel);
    public void ScrollIntoView(object item, DataGridColumn column);
    protected virtual Size ArrangeOverride(Size finalSize);
    protected virtual Size MeasureOverride(Size availableSize);
    protected virtual void OnApplyTemplate();
    protected virtual void OnAutoGeneratingColumn(DataGridAutoGeneratingColumnEventArgs e);
    protected virtual void OnBeginningEdit(DataGridBeginningEditEventArgs e);
    protected virtual void OnCellEditEnded(DataGridCellEditEndedEventArgs e);
    protected virtual void OnCellEditEnding(DataGridCellEditEndingEventArgs e);
    protected virtual void OnCopyingRowClipboardContent(DataGridRowClipboardEventArgs e);
    protected virtual AutomationPeer OnCreateAutomationPeer();
    protected virtual void OnCurrentCellChanged(EventArgs e);
    protected virtual void OnLoadingRow(DataGridRowEventArgs e);
    protected virtual void OnLoadingRowGroup(DataGridRowGroupHeaderEventArgs e);
    protected virtual void OnLoadingRowDetails(DataGridRowDetailsEventArgs e);
    protected virtual void OnPointerWheelChanged(PointerRoutedEventArgs e);
    protected virtual void OnPreparingCellForEdit(DataGridPreparingCellForEditEventArgs e);
    protected virtual void OnRowEditEnded(DataGridRowEditEndedEventArgs e);
    protected virtual void OnRowEditEnding(DataGridRowEditEndingEventArgs e);
    protected virtual void OnSelectionChanged(SelectionChangedEventArgs e);
    protected virtual void OnUnloadingRow(DataGridRowEventArgs e);
    protected virtual void OnUnloadingRowDetails(DataGridRowDetailsEventArgs e);
    protected virtual void OnUnloadingRowGroup(DataGridRowGroupHeaderEventArgs e);
    internal static DataGridCell GetOwningCell(FrameworkElement element);
    internal bool CancelEdit(DataGridEditingUnit editingUnit, bool raiseEvents);
    internal void CoerceSelectedItem();
    [IteratorStateMachineAttribute("Microsoft.Toolkit.Uwp.UI.Controls.DataGrid/<GetSelectionInclusive>d__605")]
internal IEnumerable`1<object> GetSelectionInclusive(int startRowIndex, int endRowIndex);
    internal void InitializeElements(bool recycleRows);
    internal object ItemFromSlot(int slot, Int32& rowIndex);
    internal void LoadMoreDataFromIncrementalItemsSource();
    internal void OnRowDetailsChanged();
    internal void OnUserSorting();
    internal void OnUserSorted();
    internal bool ProcessDownKey();
    internal bool ProcessEndKey();
    internal bool ProcessEnterKey();
    internal bool ProcessHomeKey();
    internal void ProcessHorizontalScroll(ScrollEventType scrollEventType);
    internal bool ProcessLeftKey();
    internal bool ProcessNextKey();
    internal bool ProcessPriorKey();
    internal bool ProcessRightKey();
    internal bool ProcessScrollOffsetDelta(double offsetDelta, bool isForHorizontalScroll);
    internal void ProcessSelectionAndCurrency(int columnIndex, object item, int backupSlot, DataGridSelectionAction action, bool scrollIntoView);
    internal bool ProcessUpKey();
    internal void ProcessVerticalScroll(ScrollEventType scrollEventType);
    internal void RefreshRowsAndColumns(bool clearRows);
    internal void ResetColumnHeaderInteractionInfo();
    internal bool ScrollSlotIntoView(int columnIndex, int slot, bool forCurrentCellChange, bool forceHorizontalScroll);
    internal bool SetCurrentCellCore(int columnIndex, int slot);
    internal void UpdateHorizontalOffset(double newValue);
    internal bool UpdateSelectionAndCurrency(int columnIndex, int slot, DataGridSelectionAction action, bool scrollIntoView);
    internal void UpdateStateOnCurrentChanged(object currentItem, int currentPosition);
    internal bool UpdateStateOnTapped(TappedRoutedEventArgs args, int columnIndex, int slot, bool allowEdit);
    internal void UpdateVerticalScrollBar();
    internal bool WaitForLostFocus(Action action);
    private static void EnsureElementStyle(FrameworkElement element, Style oldDataGridStyle, Style newDataGridStyle);
    private bool AddNewItem(RoutedEventArgs editingEventArgs);
    private void AddNewCellPrivate(DataGridRow row, DataGridColumn column);
    private bool BeginCellEdit(RoutedEventArgs editingEventArgs);
    private bool BeginRowEdit(DataGridRow dataGridRow);
    private bool CancelRowEdit(bool exitEditingMode);
    private bool CommitEditForOperation(int columnIndex, int slot, bool forCurrentCellChange);
    private bool CommitRowEdit(bool exitEditingMode);
    private void CompleteCellsCollection(DataGridRow dataGridRow);
    private void ComputeScrollBarsLayout();
    private void EditingElement_LostFocus(object sender, RoutedEventArgs e);
    private void EnsureHorizontalLayout();
    private bool EnsureRowHeaderWidth();
    private void EnsureRowsPresenterVisibility();
    private void EnsureTopLeftCornerHeader();
    private void ExpandRowGroupParentChain(int level, int slot);
    private void InvalidateCellsArrange();
    private void InvalidateColumnHeadersArrange();
    private void InvalidateColumnHeadersMeasure();
    private void InvalidateRowsArrange();
    private void InvalidateRowsMeasure(bool invalidateIndividualElements);
    private void DataGrid_GettingFocus(UIElement sender, GettingFocusEventArgs e);
    private void DataGrid_GotFocus(object sender, RoutedEventArgs e);
    private void DataGrid_IsEnabledChanged(object sender, DependencyPropertyChangedEventArgs e);
    private void DataGrid_KeyDown(object sender, KeyRoutedEventArgs e);
    private void DataGrid_KeyUp(object sender, KeyRoutedEventArgs e);
    private void DataGrid_LostFocus(object sender, RoutedEventArgs e);
    private object GetFocusedElement();
    private void DataGrid_PointerEntered(object sender, PointerRoutedEventArgs e);
    private void DataGrid_PointerExited(object sender, PointerRoutedEventArgs e);
    private void DataGrid_PointerMoved(object sender, PointerRoutedEventArgs e);
    private void DataGrid_PointerPressed(object sender, PointerRoutedEventArgs e);
    private void DataGrid_PointerReleased(object sender, PointerRoutedEventArgs e);
    private void DataGrid_Unloaded(object sender, RoutedEventArgs e);
    private void EditingElement_Loaded(object sender, RoutedEventArgs e);
    private bool EndCellEdit(DataGridEditAction editAction, bool exitEditingMode, bool keepFocus, bool raiseEvents);
    private bool EndRowEdit(DataGridEditAction editAction, bool exitEditingMode, bool raiseEvents);
    private void EnsureColumnHeadersVisibility();
    private void EnsureVerticalGridLines();
    private void ExitEdit(bool keepFocus);
    private void ExternalEditingElement_LostFocus(object sender, RoutedEventArgs e);
    private void FlushCurrentCellChanged();
    private void FlushSelectionChanged();
    private bool FocusEditingCell(bool setFocus);
    private string FormatClipboardContent(DataGridRowClipboardEventArgs e);
    private double GetHorizontalSmallScrollDecrease();
    private double GetHorizontalSmallScrollIncrease();
    private double GetVerticalSmallScrollIncrease();
    private void HideScrollBars(bool useTransitions);
    private void HideScrollBarsAfterDelay();
    private void HideScrollBarsTimerTick(object sender, object e);
    private void HookDataGridEvents();
    private void HookHorizontalScrollBarEvents();
    private void HookVerticalScrollBarEvents();
    private void HorizontalScrollBar_PointerEntered(object sender, PointerRoutedEventArgs e);
    private void HorizontalScrollBar_PointerExited(object sender, PointerRoutedEventArgs e);
    private void VerticalScrollBar_PointerEntered(object sender, PointerRoutedEventArgs e);
    private void VerticalScrollBar_PointerExited(object sender, PointerRoutedEventArgs e);
    private void HorizontalScrollBar_Scroll(object sender, ScrollEventArgs e);
    private void IndicatorStateStoryboard_Completed(object sender, object e);
    private bool IsColumnOutOfBounds(int columnIndex);
    private bool IsInnerCellOutOfBounds(int columnIndex, int slot);
    private bool IsInnerCellOutOfSelectionBounds(int columnIndex, int slot);
    private bool IsSlotOutOfBounds(int slot);
    private bool IsSlotOutOfSelectionBounds(int slot);
    private void LoadMoreDataFromIncrementalItemsSource(double totalVisibleHeight);
    private void MakeFirstDisplayedCellCurrentCell();
    private void NoIndicatorStateStoryboard_Completed(object sender, object e);
    private void PopulateCellContent(bool isCellEdited, DataGridColumn dataGridColumn, DataGridRow dataGridRow, DataGridCell dataGridCell);
    private void PreparingCellForEditPrivate(FrameworkElement editingElement);
    private bool ProcessAKey();
    private bool ProcessCopyKey();
    private bool ProcessDataGridKey(KeyRoutedEventArgs e);
    private bool ProcessDownKeyInternal(bool shift, bool ctrl);
    private bool ProcessEndKey(bool shift, bool ctrl);
    private bool ProcessEnterKey(bool shift, bool ctrl);
    private bool ProcessEscapeKey();
    private bool ProcessF2Key(KeyRoutedEventArgs e);
    private bool ProcessHomeKey(bool shift, bool ctrl);
    private bool ProcessLeftKey(bool shift, bool ctrl);
    private bool ProcessLeftMost(int firstVisibleColumnIndex, int firstVisibleSlot);
    private bool ProcessNextKey(bool shift, bool ctrl);
    private bool ProcessPriorKey(bool shift, bool ctrl);
    private bool ProcessRightKey(bool shift, bool ctrl);
    private bool ProcessRightMost(int lastVisibleColumnIndex, int firstVisibleSlot);
    private bool ProcessSpaceKey();
    private bool ProcessTabKey(KeyRoutedEventArgs e);
    private bool ProcessTabKey(KeyRoutedEventArgs e, bool shift, bool ctrl);
    private bool ProcessUpKey(bool shift, bool ctrl);
    private void RemoveDisplayedColumnHeader(DataGridColumn dataGridColumn);
    private void RemoveDisplayedColumnHeaders();
    private bool ResetCurrentCellCore();
    private void ResetEditingRow();
    private void ResetFocusedRow();
    private void ResetValidationStatus();
    private void RowGroupHeaderStyles_CollectionChanged(object sender, NotifyCollectionChangedEventArgs e);
    private void SelectAll();
    private void SetAndSelectCurrentCell(int columnIndex, int slot, bool forceCurrentCellSelection);
    private bool SetCurrentCellCore(int columnIndex, int slot, bool commitEdit, bool endRowEdit);
    private void SetHorizontalOffset(double newHorizontalOffset);
    private void SetVerticalOffset(double newVerticalOffset);
    private void ShowScrollBars();
    private void StopHideScrollBarsTimer();
    private void SwitchScrollBarsVisualStates(ScrollBarVisualState scrollBarsState, ScrollBarsSeparatorVisualState separatorState, bool useTransitions);
    private void UnhookHorizontalScrollBarEvents();
    private void UnhookVerticalScrollBarEvents();
    private void UpdateCurrentState(UIElement displayedElement, int columnIndex, bool applyCellState);
    private void UpdateDisabledVisual();
    private void UpdateHorizontalScrollBar(bool needHorizScrollBar, bool forceHorizScrollBar, double totalVisibleWidth, double totalVisibleFrozenWidth, double cellsWidth);
    private void UpdateRowDetailsVisibilityMode(DataGridRowDetailsVisibilityMode newDetailsMode);
    private void UpdateRowsPresenterManipulationMode(bool horizontalMode, bool verticalMode);
    private bool UpdateStateOnTapped(TappedRoutedEventArgs args, int columnIndex, int slot, bool allowEdit, bool shift, bool ctrl);
    private void UpdateValidationResults(List`1<ValidationResult> newValidationResults, bool scrollIntoView);
    private void UpdateValidationStatus();
    private void UpdateVerticalScrollBar(bool needVertScrollBar, bool forceVertScrollBar, double totalVisibleHeight, double cellsHeight);
    private bool ValidateEditingRow(bool scrollIntoView, bool wireEvents);
    private void ValidateIndei(INotifyDataErrorInfo indei, string bindingProperty, string bindingPath, string declaringPath, List`1<ValidationResult> validationResults, bool wireEvents);
    private void ValidationItem_ErrorsChanged(object sender, DataErrorsChangedEventArgs e);
    private void VerticalScrollBar_Scroll(object sender, ScrollEventArgs e);
    protected virtual void OnColumnDisplayIndexChanged(DataGridColumnEventArgs e);
    protected internal virtual void OnColumnReordered(DataGridColumnEventArgs e);
    protected internal virtual void OnColumnReordering(DataGridColumnReorderingEventArgs e);
    protected internal virtual void OnColumnSorting(DataGridColumnEventArgs e);
    internal static double GetEdgedColumnWidth(DataGridColumn dataGridColumn);
    internal double AdjustColumnWidths(int displayIndex, double amount, bool userInitiated);
    internal void AutoSizeColumn(DataGridColumn column, double desiredWidth);
    internal bool ColumnRequiresRightGridLine(DataGridColumn dataGridColumn, bool includeLastRightGridLineWhenPresent);
    internal DataGridColumnCollection CreateColumnsInstance();
    internal double DecreaseColumnWidths(int displayIndex, double amount, bool userInitiated);
    internal bool GetColumnReadOnlyState(DataGridColumn dataGridColumn, bool isReadOnly);
    internal double IncreaseColumnWidths(int displayIndex, double amount, bool userInitiated);
    internal void OnClearingColumns();
    internal void OnColumnCanUserResizeChanged(DataGridColumn column);
    internal void OnColumnCellStyleChanged(DataGridColumn column, Style previousStyle);
    internal void OnColumnCollectionChanged_PostNotification(bool columnsGrew);
    internal void OnColumnCollectionChanged_PreNotification(bool columnsGrew);
    internal void OnColumnDisplayIndexChanged(DataGridColumn dataGridColumn);
    internal void OnColumnDisplayIndexChanged_PostNotification();
    internal void OnColumnDisplayIndexChanging(DataGridColumn targetColumn, int newDisplayIndex);
    internal void OnColumnBindingChanged(DataGridBoundColumn column);
    internal void OnColumnElementStyleChanged(DataGridBoundColumn column);
    internal void OnColumnHeaderDragStarted(DragStartedEventArgs e);
    internal void OnColumnHeaderDragDelta(DragDeltaEventArgs e);
    internal void OnColumnHeaderDragCompleted(DragCompletedEventArgs e);
    internal void OnColumnMaxWidthChanged(DataGridColumn column, double oldValue);
    internal void OnColumnMinWidthChanged(DataGridColumn column, double oldValue);
    internal void OnColumnReadOnlyStateChanging(DataGridColumn dataGridColumn, bool isReadOnly);
    internal void OnColumnVisibleStateChanged(DataGridColumn updatedColumn);
    internal void OnColumnVisibleStateChanging(DataGridColumn targetColumn);
    internal void OnColumnWidthChanged(DataGridColumn updatedColumn);
    internal void OnFillerColumnWidthNeeded(double finalWidth);
    internal void OnInsertedColumn_PostNotification(DataGridCellCoordinates newCurrentCellCoordinates, int newDisplayIndex);
    internal void OnInsertedColumn_PreNotification(DataGridColumn insertedColumn);
    internal DataGridCellCoordinates OnInsertingColumn(int columnIndexInserted, DataGridColumn insertColumn);
    internal void OnRemovedColumn_PostNotification(DataGridCellCoordinates newCurrentCellCoordinates);
    internal void OnRemovedColumn_PreNotification(DataGridColumn removedColumn);
    internal DataGridCellCoordinates OnRemovingColumn(DataGridColumn dataGridColumn);
    internal void RefreshColumnElements(DataGridColumn dataGridColumn, string propertyName);
    private static double DecreaseNonStarColumnWidth(DataGridColumn column, double targetWidth, double amount);
    private static DataGridAutoGeneratingColumnEventArgs GenerateColumn(Type propertyType, string propertyName, string header);
    private static DataGridBoundColumn GetDataGridColumnFromType(Type type);
    private static double IncreaseNonStarColumnWidth(DataGridColumn column, double targetWidth, double amount);
    private static void RefreshCellElement(DataGridColumn dataGridColumn, DataGridRow dataGridRow, string propertyName);
    private bool AddGeneratedColumn(DataGridAutoGeneratingColumnEventArgs e);
    private double AdjustStarColumnWidths(int displayIndex, double adjustment, bool userInitiated);
    private double AdjustStarColumnWidths(int displayIndex, double remainingAdjustment, bool userInitiated, Func`2<DataGridColumn, double> targetWidth);
    private void AutoGenerateColumnsPrivate();
    private bool ComputeDisplayedColumns();
    private int ComputeFirstVisibleScrollingColumn();
    private void CorrectColumnDisplayIndexesAfterDeletion(DataGridColumn deletedColumn);
    private void CorrectColumnDisplayIndexesAfterInsertion(DataGridColumn insertedColumn);
    private void CorrectColumnFrozenStates();
    private void CorrectColumnIndexesAfterDeletion(DataGridColumn deletedColumn);
    private void CorrectColumnIndexesAfterInsertion(DataGridColumn insertedColumn, int insertionCount);
    private double DecreaseNonStarColumnWidths(int displayIndex, Func`2<DataGridColumn, double> targetWidth, double amount, bool reverse, bool affectNewColumns);
    private void FlushDisplayIndexChanged(bool raiseEvent);
    private void GenerateColumnsFromProperties();
    private bool GetColumnEffectiveReadOnlyState(DataGridColumn dataGridColumn);
    private double GetColumnXFromIndex(int index);
    private double GetNegHorizontalOffsetFromHorizontalOffset(double horizontalOffset);
    private double IncreaseNonStarColumnWidths(int displayIndex, Func`2<DataGridColumn, double> targetWidth, double amount, bool reverse, bool affectNewColumns);
    private void InsertDisplayedColumnHeader(DataGridColumn dataGridColumn);
    private void RemoveAutoGeneratedColumns();
    private bool ScrollColumnIntoView(int columnIndex);
    private void ScrollColumns(int columns);
    private void UpdateDisplayedColumns();
    internal bool get_AreRowBottomGridLinesRequired();
    internal int get_FirstVisibleSlot();
    internal int get_FrozenColumnCountWithFiller();
    internal int get_LastVisibleSlot();
    private double get_EdgedRowsHeightCalculated();
    public void CollapseRowGroup(ICollectionViewGroup collectionViewGroup, bool collapseAllSubgroups);
    public void ExpandRowGroup(ICollectionViewGroup collectionViewGroup, bool expandAllSubgroups);
    protected internal virtual void OnRowDetailsVisibilityChanged(DataGridRowDetailsEventArgs e);
    internal void ClearRowSelection(bool resetAnchorSlot);
    internal void ClearRowSelection(int slotException, bool setAnchorSlot);
    internal int GetCollapsedSlotCount(int startSlot, int endSlot);
    internal int GetNextVisibleSlot(int slot);
    internal int GetPreviousVisibleSlot(int slot);
    internal Visibility GetRowDetailsVisibility(int rowIndex);
    internal Visibility GetRowDetailsVisibility(int rowIndex, DataGridRowDetailsVisibilityMode gridLevelRowDetailsVisibility);
    internal DataGridRow GetRowFromItem(object dataItem);
    internal bool GetRowSelection(int slot);
    internal void InsertElementAt(int slot, int rowIndex, object item, DataGridRowGroupInfo groupInfo, bool isCollapsed);
    internal void InsertRowAt(int rowIndex);
    internal bool IsColumnDisplayed(int columnIndex);
    internal bool IsRowRecyclable(DataGridRow row);
    internal bool IsSlotVisible(int slot);
    internal void OnUnloadingRowDetails(DataGridRow row, FrameworkElement detailsElement);
    internal void OnLoadingRowDetails(DataGridRow row, FrameworkElement detailsElement);
    internal void OnRowDetailsVisibilityPropertyChanged(int rowIndex, Visibility visibility);
    internal void OnRowGroupHeaderToggled(DataGridRowGroupHeader groupHeader, Visibility newVisibility, bool setCurrent);
    internal void OnRowsMeasure();
    internal void OnSublevelIndentUpdated(DataGridRowGroupHeader groupHeader, double newValue);
    internal void RefreshRows(bool recycleRows, bool clearRows);
    internal void RemoveRowAt(int rowIndex, object item);
    internal DataGridRowGroupInfo RowGroupInfoFromCollectionViewGroup(ICollectionViewGroup collectionViewGroup);
    internal int RowIndexFromSlot(int slot);
    internal bool ScrollSlotIntoView(int slot, bool scrolledHorizontally);
    internal void SetRowSelection(int slot, bool isSelected, bool setAnchorSlot);
    internal void SetRowsSelection(int startSlot, int endSlot, bool isSelected);
    internal int SlotFromRowIndex(int rowIndex);
    private static void CorrectRowAfterDeletion(DataGridRow row, bool rowDeleted);
    private static void CorrectRowAfterInsertion(DataGridRow row, bool rowInserted);
    private void AddSlotElement(int slot, UIElement element);
    private void AddSlots(int totalSlots);
    private void ApplyDisplayedRowsState(int startSlot, int endSlot);
    private void ClearRowGroupHeadersTable();
    private void ClearRows(bool recycle);
    private void ClearShowDetailsTable();
    private double CollapseSlotsInTable(int startSlot, int endSlot, Int32& slotsExpanded, int lastDisplayedSlot, Double& heightChangeBelowLastDisplayedSlot);
    private void CorrectEditingRow();
    private void CorrectLastSubItemSlotsAfterInsertion(DataGridRowGroupInfo subGroupInfo);
    private void CorrectSlotsAfterDeletion(int slotDeleted, bool wasRow);
    private void CorrectSlotsAfterInsertion(int slotInserted, bool isCollapsed, bool rowInserted);
    private int CountAndPopulateGroupHeaders(object group, int rootSlot, int level);
    private void CollectionViewGroupItems_VectorChanged(IObservableVector`1<object> groupItems, IVectorChangedEventArgs e);
    private void EnsureAnscestorsExpanderButtonChecked(DataGridRowGroupInfo parentGroupInfo);
    private void EnsureRowDetailsVisibility(DataGridRow row, bool raiseNotification);
    [IteratorStateMachineAttribute("Microsoft.Toolkit.Uwp.UI.Controls.DataGrid/<GetAllRows>d__879")]
private IEnumerable`1<DataGridRow> GetAllRows();
    [IteratorStateMachineAttribute("Microsoft.Toolkit.Uwp.UI.Controls.DataGrid/<GetAllRowGroupHeaders>d__880")]
private IEnumerable`1<DataGridRowGroupHeader> GetAllRowGroupHeaders();
    private int GetDetailsCountInclusive(int lowerBound, int upperBound);
    private void EnsureRowGroupSpacerColumn();
    private void EnsureRowGroupSpacerColumnWidth(int groupLevelCount);
    private void EnsureRowGroupVisibility(DataGridRowGroupInfo rowGroupInfo, Visibility visibility, bool setCurrent);
    private void ExpandSlots(int startSlot, int endSlot, bool isHeaderDisplayed, Int32& slotsExpanded, Double& totalHeightChange);
    private void GenerateEditingElements();
    private DataGridRow GenerateRow(int rowIndex, int slot);
    private DataGridRow GenerateRow(int rowIndex, int slot, object dataContext);
    private DataGridRowGroupHeader GenerateRowGroupHeader(int slot, DataGridRowGroupInfo rowGroupInfo);
    private double GetExactSlotElementHeight(int slot);
    private double GetHeightEstimate(int fromSlot, int toSlot);
    private DataGridRowGroupInfo GetParentGroupInfo(object collection);
    private int GetRowGroupHeaderCount(int startSlot, int endSlot, Nullable`1<Visibility> visibility, Double& headersHeight);
    private double GetSlotElementHeight(int slot);
    private double GetSlotElementsHeight(int fromSlot, int toSlot);
    private DataGridRow GetGeneratedRow(object dataContext);
    private DataGridRow GetLoadedRow(object dataContext);
    private FrameworkElement InsertDisplayedElement(int slot, bool updateSlotInformation);
    private void InsertDisplayedElement(int slot, UIElement element, bool wasNewlyAdded, bool updateSlotInformation);
    private void InsertElement(int slot, UIElement element, bool updateVerticalScrollBarOnly, bool isCollapsed, bool isRow);
    private void InvalidateRowHeightEstimate();
    private void OnAddedElement_Phase1(int slot, UIElement element);
    private void OnAddedElement_Phase2(int slot, bool updateVerticalScrollBarOnly);
    private void OnCollectionViewGroupItemInserted(object groupItems, object insertedItem, int insertedIndex);
    private void OnCollectionViewGroupItemRemoved(object groupItems, object removedItem, int removedIndex);
    private void OnElementsChanged(bool grew);
    private void OnInsertedElement_Phase1(int slot, UIElement element, bool isCollapsed, bool isRow);
    private void OnInsertedElement_Phase2(int slot, bool updateVerticalScrollBarOnly, bool isCollapsed);
    private void OnInsertingElement(int slotInserted, bool firstInsertion, bool isCollapsed, bool isRow);
    private void OnRemovedElement(int slotDeleted, object itemDeleted, bool isRow);
    private void OnRemovingElement(int slotDeleted);
    private void LoadRowVisualsForDisplay(DataGridRow row);
    private void PopulateRowGroupHeadersTable();
    private void HookupVectorChangedListenerToGroup(IObservableVector`1<object> groupItems);
    private void UnhookVectorChangedListenerFromGroup(IObservableVector`1<object> groupItems, bool removeFromTable);
    private void RefreshRowGroupHeaders();
    private void RefreshSlotCounts();
    private void RemoveDisplayedElement(int slot, bool wasDeleted, bool updateSlotInformation);
    private void RemoveDisplayedElement(UIElement element, int slot, bool wasDeleted, bool updateSlotInformation);
    private void RemoveEditingElements();
    private void RemoveElementAt(int slot, object item, bool isRow);
    private void RemoveNonDisplayedRows(int newFirstDisplayedSlot, int newLastDisplayedSlot);
    private void ResetDisplayedRows();
    private bool SlotIsDisplayed(int slot);
    private void ScrollSlotsByHeight(double height);
    private void SelectDisplayedElement(int slot);
    private void SelectSlot(int slot, bool isSelected);
    private void SelectSlots(int startSlot, int endSlot, bool isSelected);
    private bool ToggleRowGroup();
    private void UnloadElements(bool recycle);
    private void UnloadRow(DataGridRow dataGridRow);
    private void UpdateDisplayedRows(int newFirstDisplayedSlot, double displayHeight);
    private void UpdateDisplayedRowsFromBottom(int newLastDisplayedScrollingRow);
    private void UpdateRowDetailsHeightEstimate();
    private double UpdateRowGroupVisibility(DataGridRowGroupInfo targetRowGroupInfo, Visibility newVisibility, bool isHeaderDisplayed);
    private void UpdateTablesForRemoval(int slotDeleted, object itemDeleted);
    [CompilerGeneratedAttribute]
private void <ProcessEscapeKey>b__711_0();
}
public class Microsoft.Toolkit.Uwp.UI.Controls.DataGridAutoGeneratingColumnEventArgs : CancelEventArgs {
    [CompilerGeneratedAttribute]
private DataGridColumn <Column>k__BackingField;
    [CompilerGeneratedAttribute]
private string <PropertyName>k__BackingField;
    [CompilerGeneratedAttribute]
private Type <PropertyType>k__BackingField;
    public DataGridColumn Column { get; public set; }
    public string PropertyName { get; private set; }
    public Type PropertyType { get; private set; }
    public DataGridAutoGeneratingColumnEventArgs(string propertyName, Type propertyType, DataGridColumn column);
    [CompilerGeneratedAttribute]
public DataGridColumn get_Column();
    [CompilerGeneratedAttribute]
public void set_Column(DataGridColumn value);
    [CompilerGeneratedAttribute]
public string get_PropertyName();
    [CompilerGeneratedAttribute]
private void set_PropertyName(string value);
    [CompilerGeneratedAttribute]
public Type get_PropertyType();
    [CompilerGeneratedAttribute]
private void set_PropertyType(Type value);
}
public class Microsoft.Toolkit.Uwp.UI.Controls.DataGridBeginningEditEventArgs : CancelEventArgs {
    [CompilerGeneratedAttribute]
private DataGridColumn <Column>k__BackingField;
    [CompilerGeneratedAttribute]
private RoutedEventArgs <EditingEventArgs>k__BackingField;
    [CompilerGeneratedAttribute]
private DataGridRow <Row>k__BackingField;
    public DataGridColumn Column { get; private set; }
    public RoutedEventArgs EditingEventArgs { get; private set; }
    public DataGridRow Row { get; private set; }
    public DataGridBeginningEditEventArgs(DataGridColumn column, DataGridRow row, RoutedEventArgs editingEventArgs);
    [CompilerGeneratedAttribute]
public DataGridColumn get_Column();
    [CompilerGeneratedAttribute]
private void set_Column(DataGridColumn value);
    [CompilerGeneratedAttribute]
public RoutedEventArgs get_EditingEventArgs();
    [CompilerGeneratedAttribute]
private void set_EditingEventArgs(RoutedEventArgs value);
    [CompilerGeneratedAttribute]
public DataGridRow get_Row();
    [CompilerGeneratedAttribute]
private void set_Row(DataGridRow value);
}
[StyleTypedPropertyAttribute]
[StyleTypedPropertyAttribute]
public abstract class Microsoft.Toolkit.Uwp.UI.Controls.DataGridBoundColumn : DataGridColumn {
    private Binding _binding;
    private Style _elementStyle;
    private Style _editingElementStyle;
    [CompilerGeneratedAttribute]
private DependencyProperty <BindingTarget>k__BackingField;
    public Binding Binding { get; public set; }
    public Binding ClipboardContentBinding { get; public set; }
    public Style EditingElementStyle { get; public set; }
    public Style ElementStyle { get; public set; }
    internal DependencyProperty BindingTarget { get; internal set; }
    public virtual Binding get_Binding();
    public virtual void set_Binding(Binding value);
    public virtual Binding get_ClipboardContentBinding();
    public virtual void set_ClipboardContentBinding(Binding value);
    public Style get_EditingElementStyle();
    public void set_EditingElementStyle(Style value);
    public Style get_ElementStyle();
    public void set_ElementStyle(Style value);
    [CompilerGeneratedAttribute]
internal DependencyProperty get_BindingTarget();
    [CompilerGeneratedAttribute]
internal void set_BindingTarget(DependencyProperty value);
    internal virtual List`1<string> CreateBindingPaths();
    internal virtual List`1<BindingInfo> CreateBindings(FrameworkElement element, object dataItem, bool twoWay);
    internal void SetHeaderFromBinding();
}
[TemplatePartAttribute]
[TemplateVisualStateAttribute]
[TemplateVisualStateAttribute]
[TemplateVisualStateAttribute]
[TemplateVisualStateAttribute]
[TemplateVisualStateAttribute]
[TemplateVisualStateAttribute]
[TemplateVisualStateAttribute]
[TemplateVisualStateAttribute]
[TemplateVisualStateAttribute]
[TemplateVisualStateAttribute]
[TemplateVisualStateAttribute]
public class Microsoft.Toolkit.Uwp.UI.Controls.DataGridCell : ContentControl {
    private static string DATAGRIDCELL_elementRightGridLine;
    private Rectangle _rightGridLine;
    public static DependencyProperty IsValidProperty;
    [CompilerGeneratedAttribute]
private DataGridColumn <OwningColumn>k__BackingField;
    [CompilerGeneratedAttribute]
private DataGridRow <OwningRow>k__BackingField;
    [CompilerGeneratedAttribute]
private DataGridInteractionInfo <InteractionInfo>k__BackingField;
    public bool IsValid { get; internal set; }
    internal double ActualRightGridLineWidth { get; }
    internal int ColumnIndex { get; }
    internal bool IsCurrent { get; }
    internal bool IsPointerOver { get; internal set; }
    internal DataGridColumn OwningColumn { get; internal set; }
    internal DataGrid OwningGrid { get; }
    internal DataGridRow OwningRow { get; internal set; }
    internal int RowIndex { get; }
    private DataGridInteractionInfo InteractionInfo { get; private set; }
    private bool IsEdited { get; }
    private static DataGridCell();
    public bool get_IsValid();
    internal void set_IsValid(bool value);
    private static void OnIsValidPropertyChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    internal double get_ActualRightGridLineWidth();
    internal int get_ColumnIndex();
    internal bool get_IsCurrent();
    internal bool get_IsPointerOver();
    internal void set_IsPointerOver(bool value);
    [CompilerGeneratedAttribute]
internal DataGridColumn get_OwningColumn();
    [CompilerGeneratedAttribute]
internal void set_OwningColumn(DataGridColumn value);
    internal DataGrid get_OwningGrid();
    [CompilerGeneratedAttribute]
internal DataGridRow get_OwningRow();
    [CompilerGeneratedAttribute]
internal void set_OwningRow(DataGridRow value);
    internal int get_RowIndex();
    [CompilerGeneratedAttribute]
private DataGridInteractionInfo get_InteractionInfo();
    [CompilerGeneratedAttribute]
private void set_InteractionInfo(DataGridInteractionInfo value);
    private bool get_IsEdited();
    protected virtual void OnApplyTemplate();
    protected virtual AutomationPeer OnCreateAutomationPeer();
    internal void ApplyCellState(bool animate);
    internal void EnsureGridLine(DataGridColumn lastVisibleColumn);
    internal void EnsureStyle(Style previousStyle);
    internal void Recycle();
    private void CancelPointer(PointerRoutedEventArgs e);
    private void DataGridCell_PointerCanceled(object sender, PointerRoutedEventArgs e);
    private void DataGridCell_PointerCaptureLost(object sender, PointerRoutedEventArgs e);
    private void DataGridCell_PointerPressed(object sender, PointerRoutedEventArgs e);
    private void DataGridCell_PointerReleased(object sender, PointerRoutedEventArgs e);
    private void DataGridCell_PointerEntered(object sender, PointerRoutedEventArgs e);
    private void DataGridCell_PointerExited(object sender, PointerRoutedEventArgs e);
    private void DataGridCell_PointerMoved(object sender, PointerRoutedEventArgs e);
    private void DataGridCell_PointerTapped(object sender, TappedRoutedEventArgs e);
    private void UpdateIsPointerOver(bool isPointerOver);
}
[DefaultMemberAttribute("Item")]
internal class Microsoft.Toolkit.Uwp.UI.Controls.DataGridCellCollection : object {
    private List`1<DataGridCell> _cells;
    private DataGridRow _owningRow;
    [CompilerGeneratedAttribute]
private EventHandler`1<DataGridCellEventArgs> CellAdded;
    [CompilerGeneratedAttribute]
private EventHandler`1<DataGridCellEventArgs> CellRemoved;
    public int Count { get; }
    public DataGridCell Item { get; }
    public DataGridCellCollection(DataGridRow owningRow);
    [CompilerGeneratedAttribute]
internal void add_CellAdded(EventHandler`1<DataGridCellEventArgs> value);
    [CompilerGeneratedAttribute]
internal void remove_CellAdded(EventHandler`1<DataGridCellEventArgs> value);
    [CompilerGeneratedAttribute]
internal void add_CellRemoved(EventHandler`1<DataGridCellEventArgs> value);
    [CompilerGeneratedAttribute]
internal void remove_CellRemoved(EventHandler`1<DataGridCellEventArgs> value);
    public int get_Count();
    public IEnumerator GetEnumerator();
    public void Insert(int cellIndex, DataGridCell cell);
    public void RemoveAt(int cellIndex);
    public DataGridCell get_Item(int index);
}
public class Microsoft.Toolkit.Uwp.UI.Controls.DataGridCellEditEndedEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
private DataGridColumn <Column>k__BackingField;
    [CompilerGeneratedAttribute]
private DataGridEditAction <EditAction>k__BackingField;
    [CompilerGeneratedAttribute]
private DataGridRow <Row>k__BackingField;
    public DataGridColumn Column { get; private set; }
    public DataGridEditAction EditAction { get; private set; }
    public DataGridRow Row { get; private set; }
    public DataGridCellEditEndedEventArgs(DataGridColumn column, DataGridRow row, DataGridEditAction editAction);
    [CompilerGeneratedAttribute]
public DataGridColumn get_Column();
    [CompilerGeneratedAttribute]
private void set_Column(DataGridColumn value);
    [CompilerGeneratedAttribute]
public DataGridEditAction get_EditAction();
    [CompilerGeneratedAttribute]
private void set_EditAction(DataGridEditAction value);
    [CompilerGeneratedAttribute]
public DataGridRow get_Row();
    [CompilerGeneratedAttribute]
private void set_Row(DataGridRow value);
}
public class Microsoft.Toolkit.Uwp.UI.Controls.DataGridCellEditEndingEventArgs : CancelEventArgs {
    [CompilerGeneratedAttribute]
private DataGridColumn <Column>k__BackingField;
    [CompilerGeneratedAttribute]
private DataGridEditAction <EditAction>k__BackingField;
    [CompilerGeneratedAttribute]
private FrameworkElement <EditingElement>k__BackingField;
    [CompilerGeneratedAttribute]
private DataGridRow <Row>k__BackingField;
    public DataGridColumn Column { get; private set; }
    public DataGridEditAction EditAction { get; private set; }
    public FrameworkElement EditingElement { get; private set; }
    public DataGridRow Row { get; private set; }
    public DataGridCellEditEndingEventArgs(DataGridColumn column, DataGridRow row, FrameworkElement editingElement, DataGridEditAction editAction);
    [CompilerGeneratedAttribute]
public DataGridColumn get_Column();
    [CompilerGeneratedAttribute]
private void set_Column(DataGridColumn value);
    [CompilerGeneratedAttribute]
public DataGridEditAction get_EditAction();
    [CompilerGeneratedAttribute]
private void set_EditAction(DataGridEditAction value);
    [CompilerGeneratedAttribute]
public FrameworkElement get_EditingElement();
    [CompilerGeneratedAttribute]
private void set_EditingElement(FrameworkElement value);
    [CompilerGeneratedAttribute]
public DataGridRow get_Row();
    [CompilerGeneratedAttribute]
private void set_Row(DataGridRow value);
}
internal class Microsoft.Toolkit.Uwp.UI.Controls.DataGridCellEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
private DataGridCell <Cell>k__BackingField;
    internal DataGridCell Cell { get; private set; }
    internal DataGridCellEventArgs(DataGridCell dataGridCell);
    [CompilerGeneratedAttribute]
internal DataGridCell get_Cell();
    [CompilerGeneratedAttribute]
private void set_Cell(DataGridCell value);
}
[StyleTypedPropertyAttribute]
[StyleTypedPropertyAttribute]
public class Microsoft.Toolkit.Uwp.UI.Controls.DataGridCheckBoxColumn : DataGridBoundColumn {
    private static string DATAGRIDCHECKBOXCOLUMN_isThreeStateName;
    private static double DATAGRIDCHECKBOXCOLUMN_leftMargin;
    private bool _beganEditWithKeyboard;
    private bool _isThreeState;
    private CheckBox _currentCheckBox;
    private DataGrid _owningGrid;
    public bool IsThreeState { get; public set; }
    public bool get_IsThreeState();
    public void set_IsThreeState(bool value);
    protected virtual void CancelCellEdit(FrameworkElement editingElement, object uneditedValue);
    protected virtual FrameworkElement GenerateEditingElement(DataGridCell cell, object dataItem);
    protected virtual FrameworkElement GenerateElement(DataGridCell cell, object dataItem);
    protected virtual object PrepareCellForEdit(FrameworkElement editingElement, RoutedEventArgs editingEventArgs);
    protected internal virtual void RefreshCellContent(FrameworkElement element, Brush computedRowForeground, string propertyName);
    protected internal virtual void RefreshForeground(FrameworkElement element, Brush computedRowForeground);
    private void Columns_CollectionChanged(object sender, NotifyCollectionChangedEventArgs e);
    private void ConfigureCheckBox(CheckBox checkBox, Brush computedRowForeground);
    private bool EnsureOwningGrid();
    private void OwningGrid_CurrentCellChanged(object sender, EventArgs e);
    private void OwningGrid_KeyDown(object sender, KeyRoutedEventArgs e);
    private void OwningGrid_LoadingRow(object sender, DataGridRowEventArgs e);
}
public class Microsoft.Toolkit.Uwp.UI.Controls.DataGridClipboardCellContent : ValueType {
    private DataGridColumn _column;
    private object _content;
    private object _item;
    public DataGridColumn Column { get; }
    public object Content { get; }
    public object Item { get; }
    public DataGridClipboardCellContent(object item, DataGridColumn column, object content);
    public DataGridColumn get_Column();
    public object get_Content();
    public object get_Item();
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public static bool op_Equality(DataGridClipboardCellContent clipboardCellContent1, DataGridClipboardCellContent clipboardCellContent2);
    public static bool op_Inequality(DataGridClipboardCellContent clipboardCellContent1, DataGridClipboardCellContent clipboardCellContent2);
}
public enum Microsoft.Toolkit.Uwp.UI.Controls.DataGridClipboardCopyMode : Enum {
    public int value__;
    public static DataGridClipboardCopyMode None;
    public static DataGridClipboardCopyMode ExcludeHeader;
    public static DataGridClipboardCopyMode IncludeHeader;
}
[StyleTypedPropertyAttribute]
[StyleTypedPropertyAttribute]
[StyleTypedPropertyAttribute]
public abstract class Microsoft.Toolkit.Uwp.UI.Controls.DataGridColumn : DependencyObject {
    private static bool DATAGRIDCOLUMN_defaultCanUserReorder;
    private static bool DATAGRIDCOLUMN_defaultCanUserResize;
    private static bool DATAGRIDCOLUMN_defaultCanUserSort;
    private static bool DATAGRIDCOLUMN_defaultIsReadOnly;
    private List`1<string> _bindingPaths;
    private Style _cellStyle;
    private Binding _clipboardContentBinding;
    private int _displayIndexWithFiller;
    private Style _dragIndicatorStyle;
    private FrameworkElement _editingElement;
    private object _header;
    private DataGridColumnHeader _headerCell;
    private Style _headerStyle;
    private List`1<BindingInfo> _inputBindings;
    private Nullable`1<bool> _isReadOnly;
    private Nullable`1<double> _maxWidth;
    private Nullable`1<double> _minWidth;
    private bool _settingWidthInternally;
    private Nullable`1<DataGridLength> _width;
    private Visibility _visibility;
    private Nullable`1<DataGridSortDirection> _sortDirection;
    [CompilerGeneratedAttribute]
private bool <IsAutoGenerated>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsFrozen>k__BackingField;
    [CompilerGeneratedAttribute]
private object <Tag>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <CanUserReorderInternal>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <CanUserResizeInternal>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <CanUserSortInternal>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <DisplayIndexHasChanged>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Index>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <InheritsWidth>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsInitialDesiredWidthDetermined>k__BackingField;
    [CompilerGeneratedAttribute]
private double <LayoutRoundedWidth>k__BackingField;
    [CompilerGeneratedAttribute]
private DataGrid <OwningGrid>k__BackingField;
    public double ActualWidth { get; }
    public bool CanUserReorder { get; public set; }
    public bool CanUserResize { get; public set; }
    public bool CanUserSort { get; public set; }
    public Style CellStyle { get; public set; }
    public Binding ClipboardContentBinding { get; public set; }
    public int DisplayIndex { get; public set; }
    public Style DragIndicatorStyle { get; public set; }
    public Style HeaderStyle { get; public set; }
    public object Header { get; public set; }
    public bool IsAutoGenerated { get; internal set; }
    public bool IsFrozen { get; internal set; }
    public bool IsReadOnly { get; public set; }
    public double MaxWidth { get; public set; }
    public double MinWidth { get; public set; }
    public Nullable`1<DataGridSortDirection> SortDirection { get; public set; }
    public object Tag { get; public set; }
    public Visibility Visibility { get; public set; }
    public DataGridLength Width { get; public set; }
    internal bool ActualCanUserResize { get; }
    internal double ActualMaxWidth { get; }
    internal double ActualMinWidth { get; }
    internal List`1<string> BindingPaths { get; }
    internal Nullable`1<bool> CanUserReorderInternal { get; internal set; }
    internal Nullable`1<bool> CanUserResizeInternal { get; internal set; }
    internal Nullable`1<bool> CanUserSortInternal { get; internal set; }
    internal bool DisplayIndexHasChanged { get; internal set; }
    internal int DisplayIndexWithFiller { get; internal set; }
    internal bool HasHeaderCell { get; }
    internal DataGridColumnHeader HeaderCell { get; }
    internal int Index { get; internal set; }
    internal bool InheritsWidth { get; private set; }
    internal bool IsInitialDesiredWidthDetermined { get; internal set; }
    internal bool IsVisible { get; }
    internal double LayoutRoundedWidth { get; private set; }
    internal DataGrid OwningGrid { get; internal set; }
    public double get_ActualWidth();
    public bool get_CanUserReorder();
    public void set_CanUserReorder(bool value);
    public bool get_CanUserResize();
    public void set_CanUserResize(bool value);
    public bool get_CanUserSort();
    public void set_CanUserSort(bool value);
    public Style get_CellStyle();
    public void set_CellStyle(Style value);
    public virtual Binding get_ClipboardContentBinding();
    public virtual void set_ClipboardContentBinding(Binding value);
    public int get_DisplayIndex();
    public void set_DisplayIndex(int value);
    public Style get_DragIndicatorStyle();
    public void set_DragIndicatorStyle(Style value);
    public Style get_HeaderStyle();
    public void set_HeaderStyle(Style value);
    public object get_Header();
    public void set_Header(object value);
    [CompilerGeneratedAttribute]
public bool get_IsAutoGenerated();
    [CompilerGeneratedAttribute]
internal void set_IsAutoGenerated(bool value);
    [CompilerGeneratedAttribute]
public bool get_IsFrozen();
    [CompilerGeneratedAttribute]
internal void set_IsFrozen(bool value);
    public bool get_IsReadOnly();
    public void set_IsReadOnly(bool value);
    public double get_MaxWidth();
    public void set_MaxWidth(double value);
    public double get_MinWidth();
    public void set_MinWidth(double value);
    public Nullable`1<DataGridSortDirection> get_SortDirection();
    public void set_SortDirection(Nullable`1<DataGridSortDirection> value);
    [CompilerGeneratedAttribute]
public object get_Tag();
    [CompilerGeneratedAttribute]
public void set_Tag(object value);
    public Visibility get_Visibility();
    public void set_Visibility(Visibility value);
    public DataGridLength get_Width();
    public void set_Width(DataGridLength value);
    internal bool get_ActualCanUserResize();
    internal double get_ActualMaxWidth();
    internal double get_ActualMinWidth();
    internal List`1<string> get_BindingPaths();
    [CompilerGeneratedAttribute]
internal Nullable`1<bool> get_CanUserReorderInternal();
    [CompilerGeneratedAttribute]
internal void set_CanUserReorderInternal(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
internal Nullable`1<bool> get_CanUserResizeInternal();
    [CompilerGeneratedAttribute]
internal void set_CanUserResizeInternal(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
internal Nullable`1<bool> get_CanUserSortInternal();
    [CompilerGeneratedAttribute]
internal void set_CanUserSortInternal(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
internal bool get_DisplayIndexHasChanged();
    [CompilerGeneratedAttribute]
internal void set_DisplayIndexHasChanged(bool value);
    internal int get_DisplayIndexWithFiller();
    internal void set_DisplayIndexWithFiller(int value);
    internal bool get_HasHeaderCell();
    internal DataGridColumnHeader get_HeaderCell();
    [CompilerGeneratedAttribute]
internal int get_Index();
    [CompilerGeneratedAttribute]
internal void set_Index(int value);
    [CompilerGeneratedAttribute]
internal bool get_InheritsWidth();
    [CompilerGeneratedAttribute]
private void set_InheritsWidth(bool value);
    [CompilerGeneratedAttribute]
internal bool get_IsInitialDesiredWidthDetermined();
    [CompilerGeneratedAttribute]
internal void set_IsInitialDesiredWidthDetermined(bool value);
    internal bool get_IsVisible();
    [CompilerGeneratedAttribute]
internal double get_LayoutRoundedWidth();
    [CompilerGeneratedAttribute]
private void set_LayoutRoundedWidth(double value);
    [CompilerGeneratedAttribute]
internal DataGrid get_OwningGrid();
    [CompilerGeneratedAttribute]
internal void set_OwningGrid(DataGrid value);
    public static DataGridColumn GetColumnContainingElement(FrameworkElement element);
    public FrameworkElement GetCellContent(DataGridRow dataGridRow);
    public FrameworkElement GetCellContent(object dataItem);
    protected virtual void CancelCellEdit(FrameworkElement editingElement, object uneditedValue);
    protected abstract virtual FrameworkElement GenerateEditingElement(DataGridCell cell, object dataItem);
    protected abstract virtual FrameworkElement GenerateElement(DataGridCell cell, object dataItem);
    protected void NotifyPropertyChanged(string propertyName);
    protected abstract virtual object PrepareCellForEdit(FrameworkElement editingElement, RoutedEventArgs editingEventArgs);
    protected internal virtual void RefreshCellContent(FrameworkElement element, Brush computedRowForeground, string propertyName);
    protected internal virtual void RefreshForeground(FrameworkElement element, Brush computedRowForeground);
    internal void CancelCellEditInternal(FrameworkElement editingElement, object uneditedValue);
    internal DataGridLength CoerceWidth(DataGridLength width);
    internal void ComputeLayoutRoundedWidth(double leftEdge);
    internal virtual List`1<string> CreateBindingPaths();
    internal virtual List`1<BindingInfo> CreateBindings(FrameworkElement element, object dataItem, bool twoWay);
    internal virtual DataGridColumnHeader CreateHeader();
    internal void EnsureWidth();
    internal FrameworkElement GenerateEditingElementInternal(DataGridCell cell, object dataItem);
    internal FrameworkElement GenerateElementInternal(DataGridCell cell, object dataItem);
    internal object GetCellValue(object item, Binding binding);
    internal List`1<BindingInfo> GetInputBindings(FrameworkElement element, object dataItem);
    internal object PrepareCellForEditInternal(FrameworkElement editingElement, RoutedEventArgs editingEventArgs);
    internal void RemoveEditingElement();
    internal void Resize(double value, DataGridLengthUnitType unitType, double desiredValue, double displayValue, bool userInitiated);
    internal void SetWidthDesiredValue(double desiredValue);
    internal void SetWidthDisplayValue(double displayValue);
    internal void SetWidthInternal(DataGridLength width);
    internal void SetWidthInternalNoCallback(DataGridLength width);
    internal void SetWidthStarValue(double value);
    [CompilerGeneratedAttribute]
private bool <CoerceWidth>b__145_0(DataGridColumn c);
}
internal class Microsoft.Toolkit.Uwp.UI.Controls.DataGridColumnCollection : ObservableCollection`1<DataGridColumn> {
    private DataGrid _owningGrid;
    [CompilerGeneratedAttribute]
private int <AutogeneratedColumnCount>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<int> <DisplayIndexMap>k__BackingField;
    [CompilerGeneratedAttribute]
private DataGridFillerColumn <FillerColumn>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<DataGridColumn> <ItemsInternal>k__BackingField;
    [CompilerGeneratedAttribute]
private DataGridFillerColumn <RowGroupSpacerColumn>k__BackingField;
    [CompilerGeneratedAttribute]
private double <VisibleEdgedColumnsWidth>k__BackingField;
    [CompilerGeneratedAttribute]
private int <VisibleStarColumnCount>k__BackingField;
    internal int AutogeneratedColumnCount { get; internal set; }
    internal List`1<int> DisplayIndexMap { get; internal set; }
    internal DataGridFillerColumn FillerColumn { get; private set; }
    internal DataGridColumn FirstColumn { get; }
    internal DataGridColumn FirstVisibleColumn { get; }
    internal DataGridColumn FirstVisibleNonFillerColumn { get; }
    internal DataGridColumn FirstVisibleWritableColumn { get; }
    internal DataGridColumn FirstVisibleScrollingColumn { get; }
    internal List`1<DataGridColumn> ItemsInternal { get; private set; }
    internal DataGridColumn LastVisibleColumn { get; }
    internal DataGridColumn LastVisibleScrollingColumn { get; }
    internal DataGridColumn LastVisibleWritableColumn { get; }
    internal DataGridFillerColumn RowGroupSpacerColumn { get; private set; }
    internal int VisibleColumnCount { get; }
    internal double VisibleEdgedColumnsWidth { get; private set; }
    internal int VisibleStarColumnCount { get; private set; }
    public DataGridColumnCollection(DataGrid owningGrid);
    [CompilerGeneratedAttribute]
internal int get_AutogeneratedColumnCount();
    [CompilerGeneratedAttribute]
internal void set_AutogeneratedColumnCount(int value);
    [CompilerGeneratedAttribute]
internal List`1<int> get_DisplayIndexMap();
    [CompilerGeneratedAttribute]
internal void set_DisplayIndexMap(List`1<int> value);
    [CompilerGeneratedAttribute]
internal DataGridFillerColumn get_FillerColumn();
    [CompilerGeneratedAttribute]
private void set_FillerColumn(DataGridFillerColumn value);
    internal DataGridColumn get_FirstColumn();
    internal DataGridColumn get_FirstVisibleColumn();
    internal DataGridColumn get_FirstVisibleNonFillerColumn();
    internal DataGridColumn get_FirstVisibleWritableColumn();
    internal DataGridColumn get_FirstVisibleScrollingColumn();
    [CompilerGeneratedAttribute]
internal List`1<DataGridColumn> get_ItemsInternal();
    [CompilerGeneratedAttribute]
private void set_ItemsInternal(List`1<DataGridColumn> value);
    internal DataGridColumn get_LastVisibleColumn();
    internal DataGridColumn get_LastVisibleScrollingColumn();
    internal DataGridColumn get_LastVisibleWritableColumn();
    [CompilerGeneratedAttribute]
internal DataGridFillerColumn get_RowGroupSpacerColumn();
    [CompilerGeneratedAttribute]
private void set_RowGroupSpacerColumn(DataGridFillerColumn value);
    internal int get_VisibleColumnCount();
    [CompilerGeneratedAttribute]
internal double get_VisibleEdgedColumnsWidth();
    [CompilerGeneratedAttribute]
private void set_VisibleEdgedColumnsWidth(double value);
    [CompilerGeneratedAttribute]
internal int get_VisibleStarColumnCount();
    [CompilerGeneratedAttribute]
private void set_VisibleStarColumnCount(int value);
    protected virtual void ClearItems();
    protected virtual void InsertItem(int columnIndex, DataGridColumn dataGridColumn);
    protected virtual void RemoveItem(int columnIndex);
    protected virtual void SetItem(int columnIndex, DataGridColumn dataGridColumn);
    internal bool DisplayInOrder(int columnIndex1, int columnIndex2);
    internal bool EnsureRowGrouping(bool rowGrouping);
    internal void EnsureVisibleEdgedColumnsWidth();
    internal DataGridColumn GetColumnAtDisplayIndex(int displayIndex);
    internal int GetColumnCount(bool isVisible, bool isFrozen, int fromColumnIndex, int toColumnIndex);
    [IteratorStateMachineAttribute("Microsoft.Toolkit.Uwp.UI.Controls.DataGridColumnCollection/<GetDisplayedColumns>d__57")]
internal IEnumerable`1<DataGridColumn> GetDisplayedColumns();
    [IteratorStateMachineAttribute("Microsoft.Toolkit.Uwp.UI.Controls.DataGridColumnCollection/<GetDisplayedColumns>d__58")]
internal IEnumerable`1<DataGridColumn> GetDisplayedColumns(Predicate`1<DataGridColumn> filter);
    internal IEnumerable`1<DataGridColumn> GetDisplayedColumns(bool reverse, Predicate`1<DataGridColumn> filter);
    [IteratorStateMachineAttribute("Microsoft.Toolkit.Uwp.UI.Controls.DataGridColumnCollection/<GetDisplayedColumnsReverse>d__60")]
internal IEnumerable`1<DataGridColumn> GetDisplayedColumnsReverse(Predicate`1<DataGridColumn> filter);
    internal DataGridColumn GetFirstColumn(Nullable`1<bool> isVisible, Nullable`1<bool> isFrozen, Nullable`1<bool> isReadOnly);
    internal DataGridColumn GetLastColumn(Nullable`1<bool> isVisible, Nullable`1<bool> isFrozen, Nullable`1<bool> isReadOnly);
    internal DataGridColumn GetNextColumn(DataGridColumn dataGridColumnStart);
    internal DataGridColumn GetNextColumn(DataGridColumn dataGridColumnStart, Nullable`1<bool> isVisible, Nullable`1<bool> isFrozen, Nullable`1<bool> isReadOnly);
    internal DataGridColumn GetNextVisibleColumn(DataGridColumn dataGridColumnStart);
    internal DataGridColumn GetNextVisibleFrozenColumn(DataGridColumn dataGridColumnStart);
    internal DataGridColumn GetNextVisibleWritableColumn(DataGridColumn dataGridColumnStart);
    internal DataGridColumn GetPreviousColumn(DataGridColumn dataGridColumnStart, Nullable`1<bool> isVisible, Nullable`1<bool> isFrozen, Nullable`1<bool> isReadOnly);
    internal DataGridColumn GetPreviousVisibleNonFillerColumn(DataGridColumn dataGridColumnStart);
    internal DataGridColumn GetPreviousVisibleScrollingColumn(DataGridColumn dataGridColumnStart);
    internal DataGridColumn GetPreviousVisibleWritableColumn(DataGridColumn dataGridColumnStart);
    internal int GetVisibleColumnCount(int fromColumnIndex, int toColumnIndex);
    internal IEnumerable`1<DataGridColumn> GetVisibleColumns();
    internal IEnumerable`1<DataGridColumn> GetVisibleFrozenColumns();
    internal double GetVisibleFrozenEdgedColumnsWidth();
    internal IEnumerable`1<DataGridColumn> GetVisibleScrollingColumns();
    private void RemoveItemPrivate(int columnIndex, bool isSpacer);
}
public class Microsoft.Toolkit.Uwp.UI.Controls.DataGridColumnEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
private DataGridColumn <Column>k__BackingField;
    public DataGridColumn Column { get; private set; }
    public DataGridColumnEventArgs(DataGridColumn column);
    [CompilerGeneratedAttribute]
public DataGridColumn get_Column();
    [CompilerGeneratedAttribute]
private void set_Column(DataGridColumn value);
}
public class Microsoft.Toolkit.Uwp.UI.Controls.DataGridColumnReorderingEventArgs : CancelEventArgs {
    [CompilerGeneratedAttribute]
private DataGridColumn <Column>k__BackingField;
    [CompilerGeneratedAttribute]
private Control <DragIndicator>k__BackingField;
    [CompilerGeneratedAttribute]
private Control <DropLocationIndicator>k__BackingField;
    public DataGridColumn Column { get; private set; }
    public Control DragIndicator { get; public set; }
    public Control DropLocationIndicator { get; public set; }
    public DataGridColumnReorderingEventArgs(DataGridColumn dataGridColumn);
    [CompilerGeneratedAttribute]
public DataGridColumn get_Column();
    [CompilerGeneratedAttribute]
private void set_Column(DataGridColumn value);
    [CompilerGeneratedAttribute]
public Control get_DragIndicator();
    [CompilerGeneratedAttribute]
public void set_DragIndicator(Control value);
    [CompilerGeneratedAttribute]
public Control get_DropLocationIndicator();
    [CompilerGeneratedAttribute]
public void set_DropLocationIndicator(Control value);
}
[StyleTypedPropertyAttribute]
[StyleTypedPropertyAttribute]
public class Microsoft.Toolkit.Uwp.UI.Controls.DataGridComboBoxColumn : DataGridBoundColumn {
    private static string DATAGRIDCOMBOBOXCOLUMN_fontFamilyName;
    private static string DATAGRIDCOMBOBOXCOLUMN_fontSizeName;
    private static string DATAGRIDCOMBOBOXCOLUMN_fontStyleName;
    private static string DATAGRIDCOMBOBOXCOLUMN_fontWeightName;
    private static string DATAGRIDCOMBOBOXCOLUMN_foregroundName;
    private static string DATAGRIDCOMBOBOXCOLUMN_itemsSourceName;
    private static string DATAGRIDCOMBOBOXCOLUMN_displayMemberPathName;
    private static double DATAGRIDCOMBOBOXCOLUMN_leftMargin;
    private static double DATAGRIDCOMBOBOXCOLUMN_rightMargin;
    private Nullable`1<double> _fontSize;
    private DataGrid _owningGrid;
    private Nullable`1<FontStyle> _fontStyle;
    private Nullable`1<FontWeight> _fontWeight;
    private Brush _foreground;
    private HashSet`1<object> _notifyingDataItems;
    public static DependencyProperty ItemsSourceProperty;
    public static DependencyProperty DisplayMemberPathProperty;
    public static DependencyProperty FontFamilyProperty;
    public IEnumerable ItemsSource { get; public set; }
    public string DisplayMemberPath { get; public set; }
    public FontFamily FontFamily { get; public set; }
    [DefaultValueAttribute("не число")]
public double FontSize { get; public set; }
    public FontStyle FontStyle { get; public set; }
    public FontWeight FontWeight { get; public set; }
    public Brush Foreground { get; public set; }
    private static DataGridComboBoxColumn();
    public IEnumerable get_ItemsSource();
    public void set_ItemsSource(IEnumerable value);
    private static void OnItemSourcePropertyChanged(DependencyObject comboBoxDependencyObject, DependencyPropertyChangedEventArgs e);
    public string get_DisplayMemberPath();
    public void set_DisplayMemberPath(string value);
    public FontFamily get_FontFamily();
    public void set_FontFamily(FontFamily value);
    private static void OnFontFamilyPropertyChanged(DependencyObject comboBoxColumnDependencyObject, DependencyPropertyChangedEventArgs e);
    public double get_FontSize();
    public void set_FontSize(double value);
    public FontStyle get_FontStyle();
    public void set_FontStyle(FontStyle value);
    public FontWeight get_FontWeight();
    public void set_FontWeight(FontWeight value);
    public Brush get_Foreground();
    public void set_Foreground(Brush value);
    protected virtual FrameworkElement GenerateEditingElement(DataGridCell cell, object dataItem);
    protected virtual FrameworkElement GenerateElement(DataGridCell cell, object dataItem);
    protected virtual void CancelCellEdit(FrameworkElement editingElement, object uneditedValue);
    protected virtual object PrepareCellForEdit(FrameworkElement editingElement, RoutedEventArgs editingEventArgs);
    protected internal virtual void RefreshCellContent(FrameworkElement element, Brush computedRowForeground, string propertyName);
    protected internal virtual void RefreshForeground(FrameworkElement element, Brush computedRowForeground);
    private void RefreshForeground(ComboBox comboBox, Brush computedRowForeground);
    private void RefreshForeground(TextBlock textBlock, Brush computedRowForeground);
    private void SetTextFontSize(DependencyObject textElement, DependencyProperty fontSizeProperty);
    private bool EnsureOwningGrid();
    private void OwningGrid_LoadingRow(object sender, DataGridRowEventArgs e);
    private void OwningGrid_UnloadingRow(object sender, DataGridRowEventArgs e);
    private void OwningGrid_CellEditEnded(object sender, DataGridCellEditEndedEventArgs e);
    private void Columns_CollectionChanged(object sender, NotifyCollectionChangedEventArgs e);
    private void SetDisplayMemberPathValue(DataGridRow row);
    private string GetDisplayValue(object dataItem);
    private void EnsureColumnBinding(object dataItem);
    private void EnsureColumnTypeAgreement(object dataItem);
    private void EnsureDisplayMemberPathExists();
    private void EnsureItemsSourceBinding();
    private void HookDataItemPropertyChanged(object dataItem);
    private void UnhookDataItemPropertyChanged(object dataItem);
    private void DataItem_PropertyChanged(object dataItem, PropertyChangedEventArgs e);
    [CompilerGeneratedAttribute]
private bool <EnsureDisplayMemberPathExists>b__59_0(PropertyInfo x);
    [CompilerGeneratedAttribute]
private bool <EnsureItemsSourceBinding>b__60_0(PropertyInfo y);
}
public enum Microsoft.Toolkit.Uwp.UI.Controls.DataGridEditAction : Enum {
    public int value__;
    public static DataGridEditAction Cancel;
    public static DataGridEditAction Commit;
}
internal enum Microsoft.Toolkit.Uwp.UI.Controls.DataGridEditingRowLocation : Enum {
    public int value__;
    public static DataGridEditingRowLocation Bottom;
    public static DataGridEditingRowLocation Inline;
    public static DataGridEditingRowLocation Top;
}
public enum Microsoft.Toolkit.Uwp.UI.Controls.DataGridEditingUnit : Enum {
    public int value__;
    public static DataGridEditingUnit Cell;
    public static DataGridEditingUnit Row;
}
internal class Microsoft.Toolkit.Uwp.UI.Controls.DataGridFillerColumn : DataGridColumn {
    [CompilerGeneratedAttribute]
private double <FillerWidth>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsRepresented>k__BackingField;
    internal double FillerWidth { get; internal set; }
    internal bool IsActive { get; }
    internal bool IsRepresented { get; internal set; }
    public DataGridFillerColumn(DataGrid owningGrid);
    [CompilerGeneratedAttribute]
internal double get_FillerWidth();
    [CompilerGeneratedAttribute]
internal void set_FillerWidth(double value);
    internal bool get_IsActive();
    [CompilerGeneratedAttribute]
internal bool get_IsRepresented();
    [CompilerGeneratedAttribute]
internal void set_IsRepresented(bool value);
    internal virtual DataGridColumnHeader CreateHeader();
    protected virtual FrameworkElement GenerateElement(DataGridCell cell, object dataItem);
    protected virtual FrameworkElement GenerateEditingElement(DataGridCell cell, object dataItem);
    protected virtual object PrepareCellForEdit(FrameworkElement editingElement, RoutedEventArgs editingEventArgs);
}
[FlagsAttribute]
public enum Microsoft.Toolkit.Uwp.UI.Controls.DataGridGridLinesVisibility : Enum {
    public int value__;
    public static DataGridGridLinesVisibility None;
    public static DataGridGridLinesVisibility Horizontal;
    public static DataGridGridLinesVisibility Vertical;
    public static DataGridGridLinesVisibility All;
}
[FlagsAttribute]
public enum Microsoft.Toolkit.Uwp.UI.Controls.DataGridHeadersVisibility : Enum {
    public int value__;
    public static DataGridHeadersVisibility All;
    public static DataGridHeadersVisibility Column;
    public static DataGridHeadersVisibility Row;
    public static DataGridHeadersVisibility None;
}
internal class Microsoft.Toolkit.Uwp.UI.Controls.DataGridInternals.DataGridCellCoordinates : object {
    [CompilerGeneratedAttribute]
private int <ColumnIndex>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Slot>k__BackingField;
    public int ColumnIndex { get; public set; }
    public int Slot { get; public set; }
    public DataGridCellCoordinates(int columnIndex, int slot);
    public DataGridCellCoordinates(DataGridCellCoordinates dataGridCellCoordinates);
    [CompilerGeneratedAttribute]
public int get_ColumnIndex();
    [CompilerGeneratedAttribute]
public void set_ColumnIndex(int value);
    [CompilerGeneratedAttribute]
public int get_Slot();
    [CompilerGeneratedAttribute]
public void set_Slot(int value);
    public virtual bool Equals(object o);
    public virtual int GetHashCode();
}
internal class Microsoft.Toolkit.Uwp.UI.Controls.DataGridInternals.DataGridDataConnection : object {
    private int _backupSlotForCurrentChanged;
    private int _columnForCurrentChanged;
    private PropertyInfo[] _dataProperties;
    private IEnumerable _dataSource;
    private Type _dataType;
    private bool _expectingCurrentChanged;
    private ISupportIncrementalLoading _incrementalItemsSource;
    private object _itemToSelectOnCurrentChanged;
    private IAsyncOperation`1<LoadMoreItemsResult> _loadingOperation;
    private DataGrid _owner;
    private bool _scrollForCurrentChanged;
    private DataGridSelectionAction _selectionActionForCurrentChanged;
    private WeakEventListener`3<DataGridDataConnection, object, NotifyCollectionChangedEventArgs> _weakCollectionChangedListener;
    private WeakEventListener`3<DataGridDataConnection, object, IVectorChangedEventArgs> _weakVectorChangedListener;
    private WeakEventListener`3<DataGridDataConnection, object, CurrentChangingEventArgs> _weakCurrentChangingListener;
    private WeakEventListener`3<DataGridDataConnection, object, object> _weakCurrentChangedListener;
    private WeakEventListener`3<DataGridDataConnection, object, PropertyChangedEventArgs> _weakIncrementalItemsSourcePropertyChangedListener;
    [CompilerGeneratedAttribute]
private bool <EndingEdit>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <EventsWired>k__BackingField;
    public bool AllowEdit { get; }
    public bool AllowSort { get; }
    public bool CanCancelEdit { get; }
    public ICollectionView CollectionView { get; }
    public int Count { get; }
    public bool DataIsPrimitive { get; }
    public PropertyInfo[] DataProperties { get; }
    public IEnumerable DataSource { get; public set; }
    public Type DataType { get; }
    public bool HasMoreItems { get; }
    public bool IsDataSourceIncremental { get; }
    public bool IsLoadingMoreItems { get; }
    public bool EndingEdit { get; private set; }
    public bool EventsWired { get; private set; }
    public bool IsAddingNew { get; }
    private bool IsGrouping { get; }
    public IList List { get; }
    public int NewItemPlaceholderIndex { get; }
    public bool ShouldAutoGenerateColumns { get; }
    public DataGridDataConnection(DataGrid owner);
    public bool get_AllowEdit();
    public bool get_AllowSort();
    public bool get_CanCancelEdit();
    public ICollectionView get_CollectionView();
    public int get_Count();
    public bool get_DataIsPrimitive();
    public PropertyInfo[] get_DataProperties();
    public IEnumerable get_DataSource();
    public void set_DataSource(IEnumerable value);
    public Type get_DataType();
    public bool get_HasMoreItems();
    public bool get_IsDataSourceIncremental();
    public bool get_IsLoadingMoreItems();
    [CompilerGeneratedAttribute]
public bool get_EndingEdit();
    [CompilerGeneratedAttribute]
private void set_EndingEdit(bool value);
    [CompilerGeneratedAttribute]
public bool get_EventsWired();
    [CompilerGeneratedAttribute]
private void set_EventsWired(bool value);
    public bool get_IsAddingNew();
    private bool get_IsGrouping();
    public IList get_List();
    public int get_NewItemPlaceholderIndex();
    public bool get_ShouldAutoGenerateColumns();
    public static bool CanEdit(Type type);
    public bool BeginEdit(object dataItem);
    public bool CancelEdit(object dataItem);
    public bool EndEdit(object dataItem);
    public object GetDataItem(int index);
    public bool GetPropertyIsReadOnly(string propertyName);
    public int IndexOf(object dataItem);
    public void LoadMoreItems(UInt32 count);
    internal static ICollectionView CreateView(IEnumerable source);
    internal static bool DataTypeIsPrimitive(Type dataType);
    internal void ClearDataProperties();
    internal void MoveCurrentTo(object item, int backupSlot, int columnIndex, DataGridSelectionAction action, bool scrollIntoView);
    internal void UnWireEvents(IEnumerable value);
    internal void WireEvents(IEnumerable value);
    private void CollectionView_CurrentChanged(object sender, object e);
    private void CollectionView_CurrentChanging(object sender, CurrentChangingEventArgs e);
    private void NotifyingDataSource_CollectionChanged(object sender, NotifyCollectionChangedEventArgs e);
    private void NotifyingDataSource_VectorChanged(IObservableVector`1<object> sender, IVectorChangedEventArgs e);
    private void NotifyingDataSource_Add(int index);
    private void NotifyingDataSource_Reset();
    private void NotifyingIncrementalItemsSource(object sender, PropertyChangedEventArgs e);
    private void OnLoadingOperationCompleted(object info, AsyncStatus status);
    private void UpdateDataProperties();
    private void UpdateIncrementalItemsSource();
}
internal class Microsoft.Toolkit.Uwp.UI.Controls.DataGridInternals.DataGridDisplayData : object {
    private Stack`1<DataGridRow> _fullyRecycledRows;
    private int _headScrollingElements;
    private DataGrid _owner;
    private Stack`1<DataGridRow> _recyclableRows;
    private List`1<UIElement> _scrollingElements;
    private Stack`1<DataGridRowGroupHeader> _fullyRecycledGroupHeaders;
    private Stack`1<DataGridRowGroupHeader> _recyclableGroupHeaders;
    [CompilerGeneratedAttribute]
private int <FirstDisplayedScrollingCol>k__BackingField;
    [CompilerGeneratedAttribute]
private int <FirstScrollingSlot>k__BackingField;
    [CompilerGeneratedAttribute]
private int <LastScrollingSlot>k__BackingField;
    [CompilerGeneratedAttribute]
private int <LastTotallyDisplayedScrollingCol>k__BackingField;
    [CompilerGeneratedAttribute]
private int <NumTotallyDisplayedScrollingElements>k__BackingField;
    [CompilerGeneratedAttribute]
private double <PendingVerticalScrollHeight>k__BackingField;
    public int FirstDisplayedScrollingCol { get; public set; }
    public int FirstScrollingSlot { get; public set; }
    public int LastScrollingSlot { get; public set; }
    public int LastTotallyDisplayedScrollingCol { get; public set; }
    public int NumDisplayedScrollingElements { get; }
    public int NumTotallyDisplayedScrollingElements { get; public set; }
    internal double PendingVerticalScrollHeight { get; internal set; }
    public DataGridDisplayData(DataGrid owner);
    [CompilerGeneratedAttribute]
public int get_FirstDisplayedScrollingCol();
    [CompilerGeneratedAttribute]
public void set_FirstDisplayedScrollingCol(int value);
    [CompilerGeneratedAttribute]
public int get_FirstScrollingSlot();
    [CompilerGeneratedAttribute]
public void set_FirstScrollingSlot(int value);
    [CompilerGeneratedAttribute]
public int get_LastScrollingSlot();
    [CompilerGeneratedAttribute]
public void set_LastScrollingSlot(int value);
    [CompilerGeneratedAttribute]
public int get_LastTotallyDisplayedScrollingCol();
    [CompilerGeneratedAttribute]
public void set_LastTotallyDisplayedScrollingCol(int value);
    public int get_NumDisplayedScrollingElements();
    [CompilerGeneratedAttribute]
public int get_NumTotallyDisplayedScrollingElements();
    [CompilerGeneratedAttribute]
public void set_NumTotallyDisplayedScrollingElements(int value);
    [CompilerGeneratedAttribute]
internal double get_PendingVerticalScrollHeight();
    [CompilerGeneratedAttribute]
internal void set_PendingVerticalScrollHeight(double value);
    internal void AddRecylableRow(DataGridRow row);
    internal void AddRecylableRowGroupHeader(DataGridRowGroupHeader groupHeader);
    internal void ClearElements(bool recycle);
    internal void CorrectSlotsAfterDeletion(int slot, bool wasCollapsed);
    internal void CorrectSlotsAfterInsertion(int slot, UIElement element, bool isCollapsed);
    private int GetCircularListIndex(int slot, bool wrap);
    internal void FullyRecycleElements();
    internal UIElement GetDisplayedElement(int slot);
    internal DataGridRow GetDisplayedRow(int rowIndex);
    [IteratorStateMachineAttribute("Microsoft.Toolkit.Uwp.UI.Controls.DataGridInternals.DataGridDisplayData/<GetScrollingElements>d__43")]
internal IEnumerable`1<UIElement> GetScrollingElements(bool onlyRows);
    internal DataGridRowGroupHeader GetUsedGroupHeader();
    internal DataGridRow GetUsedRow();
    internal void LoadScrollingSlot(int slot, UIElement element, bool updateSlotInformation);
    private void ResetSlotIndexes();
    private void SetScrollingSlots(int newValue);
    internal void UnloadScrollingElement(int slot, bool updateSlotInformation, bool wasDeleted);
}
internal static class Microsoft.Toolkit.Uwp.UI.Controls.DataGridInternals.DataGridError : object {
    private static string Format(string formatString, Object[] args);
}
internal class Microsoft.Toolkit.Uwp.UI.Controls.DataGridInternals.DataGridInteractionInfo : object {
    [CompilerGeneratedAttribute]
private UInt32 <CapturedPointerId>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsPointerOver>k__BackingField;
    internal UInt32 CapturedPointerId { get; internal set; }
    internal bool IsPointerOver { get; internal set; }
    [CompilerGeneratedAttribute]
internal UInt32 get_CapturedPointerId();
    [CompilerGeneratedAttribute]
internal void set_CapturedPointerId(UInt32 value);
    [CompilerGeneratedAttribute]
internal bool get_IsPointerOver();
    [CompilerGeneratedAttribute]
internal void set_IsPointerOver(bool value);
}
internal class Microsoft.Toolkit.Uwp.UI.Controls.DataGridInternals.DataGridRowGroupInfo : object {
    [CompilerGeneratedAttribute]
private ICollectionViewGroup <CollectionViewGroup>k__BackingField;
    [CompilerGeneratedAttribute]
private int <LastSubItemSlot>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Level>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Slot>k__BackingField;
    [CompilerGeneratedAttribute]
private Visibility <Visibility>k__BackingField;
    public ICollectionViewGroup CollectionViewGroup { get; private set; }
    public int LastSubItemSlot { get; public set; }
    public int Level { get; private set; }
    public int Slot { get; public set; }
    public Visibility Visibility { get; public set; }
    public DataGridRowGroupInfo(ICollectionViewGroup collectionViewGroup, Visibility visibility, int level, int slot, int lastSubItemSlot);
    [CompilerGeneratedAttribute]
public ICollectionViewGroup get_CollectionViewGroup();
    [CompilerGeneratedAttribute]
private void set_CollectionViewGroup(ICollectionViewGroup value);
    [CompilerGeneratedAttribute]
public int get_LastSubItemSlot();
    [CompilerGeneratedAttribute]
public void set_LastSubItemSlot(int value);
    [CompilerGeneratedAttribute]
public int get_Level();
    [CompilerGeneratedAttribute]
private void set_Level(int value);
    [CompilerGeneratedAttribute]
public int get_Slot();
    [CompilerGeneratedAttribute]
public void set_Slot(int value);
    [CompilerGeneratedAttribute]
public Visibility get_Visibility();
    [CompilerGeneratedAttribute]
public void set_Visibility(Visibility value);
}
internal class Microsoft.Toolkit.Uwp.UI.Controls.DataGridInternals.DataGridValueConverter : object {
    public sealed virtual object Convert(object value, Type targetType, object parameter, string language);
    public sealed virtual object ConvertBack(object value, Type targetType, object parameter, string language);
}
[CreateFromStringAttribute]
public class Microsoft.Toolkit.Uwp.UI.Controls.DataGridLength : ValueType {
    private static DataGridLength _auto;
    private static DataGridLength _sizeToCells;
    private static DataGridLength _sizeToHeader;
    private static string _starSuffix;
    private static String[] _valueInvariantUnitStrings;
    private static DataGridLength[] _valueInvariantDataGridLengths;
    private double _desiredValue;
    private double _displayValue;
    private double _unitValue;
    private DataGridLengthUnitType _unitType;
    internal static double DATAGRIDLENGTH_DefaultValue;
    public static DataGridLength Auto { get; }
    public static DataGridLength SizeToCells { get; }
    public static DataGridLength SizeToHeader { get; }
    public double DesiredValue { get; }
    public double DisplayValue { get; }
    public bool IsAbsolute { get; }
    public bool IsAuto { get; }
    public bool IsSizeToCells { get; }
    public bool IsSizeToHeader { get; }
    public bool IsStar { get; }
    public DataGridLengthUnitType UnitType { get; }
    public double Value { get; }
    public DataGridLength(double value);
    public DataGridLength(double value, DataGridLengthUnitType type);
    public DataGridLength(double value, DataGridLengthUnitType type, double desiredValue, double displayValue);
    private static DataGridLength();
    public static DataGridLength get_Auto();
    public static DataGridLength get_SizeToCells();
    public static DataGridLength get_SizeToHeader();
    public double get_DesiredValue();
    public double get_DisplayValue();
    public bool get_IsAbsolute();
    public bool get_IsAuto();
    public bool get_IsSizeToCells();
    public bool get_IsSizeToHeader();
    public bool get_IsStar();
    public DataGridLengthUnitType get_UnitType();
    public double get_Value();
    public static DataGridLength ConvertFromString(string value);
    public static DataGridLength ConvertFrom(CultureInfo culture, object value);
    public static string ConvertToString(CultureInfo culture, DataGridLength value);
    public static bool op_Equality(DataGridLength gl1, DataGridLength gl2);
    public static bool op_Inequality(DataGridLength gl1, DataGridLength gl2);
    public sealed virtual bool Equals(DataGridLength other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
public enum Microsoft.Toolkit.Uwp.UI.Controls.DataGridLengthUnitType : Enum {
    public int value__;
    public static DataGridLengthUnitType Auto;
    public static DataGridLengthUnitType Pixel;
    public static DataGridLengthUnitType SizeToCells;
    public static DataGridLengthUnitType SizeToHeader;
    public static DataGridLengthUnitType Star;
}
public class Microsoft.Toolkit.Uwp.UI.Controls.DataGridPreparingCellForEditEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
private DataGridColumn <Column>k__BackingField;
    [CompilerGeneratedAttribute]
private FrameworkElement <EditingElement>k__BackingField;
    [CompilerGeneratedAttribute]
private RoutedEventArgs <EditingEventArgs>k__BackingField;
    [CompilerGeneratedAttribute]
private DataGridRow <Row>k__BackingField;
    public DataGridColumn Column { get; private set; }
    public FrameworkElement EditingElement { get; private set; }
    public RoutedEventArgs EditingEventArgs { get; private set; }
    public DataGridRow Row { get; private set; }
    public DataGridPreparingCellForEditEventArgs(DataGridColumn column, DataGridRow row, RoutedEventArgs editingEventArgs, FrameworkElement editingElement);
    [CompilerGeneratedAttribute]
public DataGridColumn get_Column();
    [CompilerGeneratedAttribute]
private void set_Column(DataGridColumn value);
    [CompilerGeneratedAttribute]
public FrameworkElement get_EditingElement();
    [CompilerGeneratedAttribute]
private void set_EditingElement(FrameworkElement value);
    [CompilerGeneratedAttribute]
public RoutedEventArgs get_EditingEventArgs();
    [CompilerGeneratedAttribute]
private void set_EditingEventArgs(RoutedEventArgs value);
    [CompilerGeneratedAttribute]
public DataGridRow get_Row();
    [CompilerGeneratedAttribute]
private void set_Row(DataGridRow value);
}
[TemplatePartAttribute]
[TemplatePartAttribute]
[TemplatePartAttribute]
[TemplatePartAttribute]
[TemplatePartAttribute]
[TemplateVisualStateAttribute]
[TemplateVisualStateAttribute]
[TemplateVisualStateAttribute]
[TemplateVisualStateAttribute]
[TemplateVisualStateAttribute]
[TemplateVisualStateAttribute]
[TemplateVisualStateAttribute]
[TemplateVisualStateAttribute]
[TemplateVisualStateAttribute]
[TemplateVisualStateAttribute]
[TemplateVisualStateAttribute]
[TemplateVisualStateAttribute]
[TemplateVisualStateAttribute]
[StyleTypedPropertyAttribute]
public class Microsoft.Toolkit.Uwp.UI.Controls.DataGridRow : Control {
    private static byte DATAGRIDROW_defaultMinHeight;
    internal static int DATAGRIDROW_maximumHeight;
    internal static double DATAGRIDROW_minimumHeight;
    private static string DATAGRIDROW_elementBottomGridLine;
    private static string DATAGRIDROW_elementCells;
    private static string DATAGRIDROW_elementDetails;
    internal static string DATAGRIDROW_elementRoot;
    internal static string DATAGRIDROW_elementRowHeader;
    private static string DATAGRIDROW_stateAlternate;
    private static string DATAGRIDROW_statePointerOver;
    private static string DATAGRIDROW_statePointerOverEditing;
    private static string DATAGRIDROW_statePointerOverEditingFocused;
    private static string DATAGRIDROW_statePointerOverSelected;
    private static string DATAGRIDROW_statePointerOverSelectedFocused;
    private static string DATAGRIDROW_stateNormal;
    private static string DATAGRIDROW_stateNormalEditing;
    private static string DATAGRIDROW_stateNormalEditingFocused;
    private static string DATAGRIDROW_stateSelected;
    private static string DATAGRIDROW_stateSelectedFocused;
    private static byte DATAGRIDROW_statePointerOverCode;
    private static byte DATAGRIDROW_statePointerOverEditingCode;
    private static byte DATAGRIDROW_statePointerOverEditingFocusedCode;
    private static byte DATAGRIDROW_statePointerOverSelectedCode;
    private static byte DATAGRIDROW_statePointerOverSelectedFocusedCode;
    private static byte DATAGRIDROW_stateNormalCode;
    private static byte DATAGRIDROW_stateNormalEditingCode;
    private static byte DATAGRIDROW_stateNormalEditingFocusedCode;
    private static byte DATAGRIDROW_stateSelectedCode;
    private static byte DATAGRIDROW_stateSelectedFocusedCode;
    private static byte DATAGRIDROW_stateNullCode;
    private static Byte[] _idealStateMapping;
    private static Byte[] _fallbackStateMapping;
    private static String[] _stateNames;
    private DataTemplate _appliedDetailsTemplate;
    private Nullable`1<Visibility> _appliedDetailsVisibility;
    private Rectangle _bottomGridLine;
    private DataGridCellsPresenter _cellsElement;
    private bool _checkDetailsContentHeight;
    private Brush _computedForeground;
    private double _detailsDesiredHeight;
    private bool _detailsLoaded;
    private bool _detailsVisibilityNotificationPending;
    private FrameworkElement _detailsContent;
    private DataGridDetailsPresenter _detailsElement;
    private DataGridCell _fillerCell;
    private DataGridRowHeader _headerElement;
    private double _lastHorizontalOffset;
    public static DependencyProperty DetailsTemplateProperty;
    public static DependencyProperty DetailsVisibilityProperty;
    public static DependencyProperty HeaderProperty;
    public static DependencyProperty HeaderStyleProperty;
    public static DependencyProperty IsValidProperty;
    [CompilerGeneratedAttribute]
private DataGridCellCollection <Cells>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Index>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsLayoutDelayed>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsRecycled>k__BackingField;
    [CompilerGeneratedAttribute]
private DataGrid <OwningGrid>k__BackingField;
    [CompilerGeneratedAttribute]
private Panel <RootElement>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Slot>k__BackingField;
    [CompilerGeneratedAttribute]
private DataGridInteractionInfo <InteractionInfo>k__BackingField;
    public DataTemplate DetailsTemplate { get; public set; }
    public Visibility DetailsVisibility { get; public set; }
    public object Header { get; public set; }
    public Style HeaderStyle { get; public set; }
    public bool IsValid { get; internal set; }
    internal double ActualBottomGridLineHeight { get; }
    internal DataGridCellCollection Cells { get; private set; }
    internal Brush ComputedForeground { get; internal set; }
    internal double DetailsContentHeight { get; }
    internal DataGridCell FillerCell { get; }
    internal bool HasBottomGridLine { get; }
    internal bool HasHeaderCell { get; }
    internal DataGridRowHeader HeaderCell { get; }
    internal int Index { get; internal set; }
    internal bool IsEditing { get; }
    internal bool IsLayoutDelayed { get; private set; }
    internal bool IsPointerOver { get; internal set; }
    internal bool IsRecycled { get; private set; }
    internal bool IsRecyclable { get; }
    internal bool IsSelected { get; }
    internal DataGrid OwningGrid { get; internal set; }
    internal Panel RootElement { get; private set; }
    internal int Slot { get; internal set; }
    internal double TargetHeight { get; }
    private DataTemplate ActualDetailsTemplate { get; }
    private Visibility ActualDetailsVisibility { get; }
    private bool AreDetailsVisible { get; }
    private DataGridInteractionInfo InteractionInfo { get; private set; }
    private static DataGridRow();
    public DataTemplate get_DetailsTemplate();
    public void set_DetailsTemplate(DataTemplate value);
    private static void OnDetailsTemplatePropertyChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    public Visibility get_DetailsVisibility();
    public void set_DetailsVisibility(Visibility value);
    private static void OnDetailsVisibilityPropertyChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    public object get_Header();
    public void set_Header(object value);
    private static void OnHeaderPropertyChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    public Style get_HeaderStyle();
    public void set_HeaderStyle(Style value);
    private static void OnHeaderStylePropertyChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    public bool get_IsValid();
    internal void set_IsValid(bool value);
    private static void OnIsValidPropertyChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    internal double get_ActualBottomGridLineHeight();
    [CompilerGeneratedAttribute]
internal DataGridCellCollection get_Cells();
    [CompilerGeneratedAttribute]
private void set_Cells(DataGridCellCollection value);
    internal Brush get_ComputedForeground();
    internal void set_ComputedForeground(Brush value);
    internal double get_DetailsContentHeight();
    internal DataGridCell get_FillerCell();
    internal bool get_HasBottomGridLine();
    internal bool get_HasHeaderCell();
    internal DataGridRowHeader get_HeaderCell();
    [CompilerGeneratedAttribute]
internal int get_Index();
    [CompilerGeneratedAttribute]
internal void set_Index(int value);
    internal bool get_IsEditing();
    [CompilerGeneratedAttribute]
internal bool get_IsLayoutDelayed();
    [CompilerGeneratedAttribute]
private void set_IsLayoutDelayed(bool value);
    internal bool get_IsPointerOver();
    internal void set_IsPointerOver(bool value);
    [CompilerGeneratedAttribute]
internal bool get_IsRecycled();
    [CompilerGeneratedAttribute]
private void set_IsRecycled(bool value);
    internal bool get_IsRecyclable();
    internal bool get_IsSelected();
    [CompilerGeneratedAttribute]
internal DataGrid get_OwningGrid();
    [CompilerGeneratedAttribute]
internal void set_OwningGrid(DataGrid value);
    [CompilerGeneratedAttribute]
internal Panel get_RootElement();
    [CompilerGeneratedAttribute]
private void set_RootElement(Panel value);
    [CompilerGeneratedAttribute]
internal int get_Slot();
    [CompilerGeneratedAttribute]
internal void set_Slot(int value);
    internal double get_TargetHeight();
    private DataTemplate get_ActualDetailsTemplate();
    private Visibility get_ActualDetailsVisibility();
    private bool get_AreDetailsVisible();
    [CompilerGeneratedAttribute]
private DataGridInteractionInfo get_InteractionInfo();
    [CompilerGeneratedAttribute]
private void set_InteractionInfo(DataGridInteractionInfo value);
    public static DataGridRow GetRowContainingElement(FrameworkElement element);
    public int GetIndex();
    protected virtual Size ArrangeOverride(Size finalSize);
    protected virtual Size MeasureOverride(Size availableSize);
    protected virtual void OnApplyTemplate();
    protected virtual AutomationPeer OnCreateAutomationPeer();
    internal void ApplyCellsState(bool animate);
    internal void ApplyDetailsTemplate(bool initializeDetailsPreferredHeight);
    internal void ApplyHeaderState(bool animate);
    internal void ApplyState(bool animate);
    internal void DetachFromDataGrid(bool recycle);
    internal void EnsureBackground();
    internal void EnsureForeground();
    internal void EnsureFillerVisibility();
    internal void EnsureGridLines();
    internal void EnsureHeaderStyleAndVisibility(Style previousStyle);
    internal void EnsureHeaderVisibility();
    private void EnsureHeaderGridLines(Visibility visibility);
    internal void InvalidateHorizontalArrange();
    internal void SetDetailsVisibilityInternal(Visibility visibility, bool raiseNotification);
    private void CancelPointer(PointerRoutedEventArgs e);
    private void DataGridCellCollection_CellAdded(object sender, DataGridCellEventArgs e);
    private void DataGridCellCollection_CellRemoved(object sender, DataGridCellEventArgs e);
    private void DataGridRow_PointerCanceled(object sender, PointerRoutedEventArgs e);
    private void DataGridRow_PointerCaptureLost(object sender, PointerRoutedEventArgs e);
    private void DataGridRow_PointerPressed(object sender, PointerRoutedEventArgs e);
    private void DataGridRow_PointerReleased(object sender, PointerRoutedEventArgs e);
    private void DataGridRow_PointerEntered(object sender, PointerRoutedEventArgs e);
    private void DataGridRow_PointerExited(object sender, PointerRoutedEventArgs e);
    private void DataGridRow_PointerMoved(object sender, PointerRoutedEventArgs e);
    private void DataGridRow_Tapped(object sender, TappedRoutedEventArgs e);
    private void DetailsContent_SizeChanged(object sender, SizeChangedEventArgs e);
    private void EnsureDetailsDesiredHeight();
    private void EnsureDetailsContentHeight();
    private void OnDependencyPropertyChanged(DependencyObject dependencyObject, DependencyProperty dependencyProperty);
    private void OnRowDetailsChanged();
    private void Recycle();
    private void UnloadDetailsTemplate(bool recycle, bool setDetailsVisibilityToCollapsed);
    private void UpdateIsPointerOver(bool isPointerOver);
}
public class Microsoft.Toolkit.Uwp.UI.Controls.DataGridRowClipboardEventArgs : EventArgs {
    private List`1<DataGridClipboardCellContent> _clipboardRowContent;
    private bool _isColumnHeadersRow;
    private object _item;
    public List`1<DataGridClipboardCellContent> ClipboardRowContent { get; }
    public bool IsColumnHeadersRow { get; }
    public object Item { get; }
    internal DataGridRowClipboardEventArgs(object item, bool isColumnHeadersRow);
    public List`1<DataGridClipboardCellContent> get_ClipboardRowContent();
    public bool get_IsColumnHeadersRow();
    public object get_Item();
}
public class Microsoft.Toolkit.Uwp.UI.Controls.DataGridRowDetailsEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
private FrameworkElement <DetailsElement>k__BackingField;
    [CompilerGeneratedAttribute]
private DataGridRow <Row>k__BackingField;
    public FrameworkElement DetailsElement { get; private set; }
    public DataGridRow Row { get; private set; }
    public DataGridRowDetailsEventArgs(DataGridRow row, FrameworkElement detailsElement);
    [CompilerGeneratedAttribute]
public FrameworkElement get_DetailsElement();
    [CompilerGeneratedAttribute]
private void set_DetailsElement(FrameworkElement value);
    [CompilerGeneratedAttribute]
public DataGridRow get_Row();
    [CompilerGeneratedAttribute]
private void set_Row(DataGridRow value);
}
public enum Microsoft.Toolkit.Uwp.UI.Controls.DataGridRowDetailsVisibilityMode : Enum {
    public int value__;
    public static DataGridRowDetailsVisibilityMode Collapsed;
    public static DataGridRowDetailsVisibilityMode Visible;
    public static DataGridRowDetailsVisibilityMode VisibleWhenSelected;
}
public class Microsoft.Toolkit.Uwp.UI.Controls.DataGridRowEditEndedEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
private DataGridEditAction <EditAction>k__BackingField;
    [CompilerGeneratedAttribute]
private DataGridRow <Row>k__BackingField;
    public DataGridEditAction EditAction { get; private set; }
    public DataGridRow Row { get; private set; }
    public DataGridRowEditEndedEventArgs(DataGridRow row, DataGridEditAction editAction);
    [CompilerGeneratedAttribute]
public DataGridEditAction get_EditAction();
    [CompilerGeneratedAttribute]
private void set_EditAction(DataGridEditAction value);
    [CompilerGeneratedAttribute]
public DataGridRow get_Row();
    [CompilerGeneratedAttribute]
private void set_Row(DataGridRow value);
}
public class Microsoft.Toolkit.Uwp.UI.Controls.DataGridRowEditEndingEventArgs : CancelEventArgs {
    [CompilerGeneratedAttribute]
private DataGridEditAction <EditAction>k__BackingField;
    [CompilerGeneratedAttribute]
private DataGridRow <Row>k__BackingField;
    public DataGridEditAction EditAction { get; private set; }
    public DataGridRow Row { get; private set; }
    public DataGridRowEditEndingEventArgs(DataGridRow row, DataGridEditAction editAction);
    [CompilerGeneratedAttribute]
public DataGridEditAction get_EditAction();
    [CompilerGeneratedAttribute]
private void set_EditAction(DataGridEditAction value);
    [CompilerGeneratedAttribute]
public DataGridRow get_Row();
    [CompilerGeneratedAttribute]
private void set_Row(DataGridRow value);
}
public class Microsoft.Toolkit.Uwp.UI.Controls.DataGridRowEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
private DataGridRow <Row>k__BackingField;
    public DataGridRow Row { get; private set; }
    public DataGridRowEventArgs(DataGridRow dataGridRow);
    [CompilerGeneratedAttribute]
public DataGridRow get_Row();
    [CompilerGeneratedAttribute]
private void set_Row(DataGridRow value);
}
[TemplatePartAttribute]
[TemplatePartAttribute]
[TemplatePartAttribute]
[TemplatePartAttribute]
[TemplatePartAttribute]
[TemplatePartAttribute]
[TemplatePartAttribute]
[TemplatePartAttribute]
[StyleTypedPropertyAttribute]
public class Microsoft.Toolkit.Uwp.UI.Controls.DataGridRowGroupHeader : Control {
    private static string DATAGRIDROWGROUPHEADER_bottomGridLine;
    private static string DATAGRIDROWGROUPHEADER_expanderButton;
    private static string DATAGRIDROWGROUPHEADER_indentSpacer;
    private static string DATAGRIDROWGROUPHEADER_itemCountElement;
    private static string DATAGRIDROWGROUPHEADER_propertyNameElement;
    private static string DATAGRIDROWGROUPHEADER_propertyValueElement;
    private bool _areIsCheckedHandlersSuspended;
    private Rectangle _bottomGridLine;
    private ToggleButton _expanderButton;
    private FrameworkElement _indentSpacer;
    private TextBlock _itemCountElement;
    private TextBlock _propertyNameElement;
    private TextBlock _propertyValueElement;
    private Panel _rootElement;
    private double _totalIndent;
    public static DependencyProperty HeaderStyleProperty;
    public static DependencyProperty ItemCountVisibilityProperty;
    public static DependencyProperty LevelProperty;
    public static DependencyProperty PropertyNameProperty;
    public static DependencyProperty PropertyNameVisibilityProperty;
    public static DependencyProperty PropertyValueProperty;
    public static DependencyProperty SublevelIndentProperty;
    [CompilerGeneratedAttribute]
private DataGridRowHeader <HeaderElement>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsPointerOver>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsPressed>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsRecycled>k__BackingField;
    [CompilerGeneratedAttribute]
private DataGrid <OwningGrid>k__BackingField;
    [CompilerGeneratedAttribute]
private DataGridRowGroupInfo <RowGroupInfo>k__BackingField;
    public Style HeaderStyle { get; public set; }
    public Visibility ItemCountVisibility { get; public set; }
    public int Level { get; internal set; }
    public string PropertyName { get; public set; }
    public Visibility PropertyNameVisibility { get; public set; }
    public string PropertyValue { get; public set; }
    public double SublevelIndent { get; public set; }
    public ICollectionViewGroup CollectionViewGroup { get; }
    internal DataGridRowHeader HeaderCell { get; }
    private DataGridRowHeader HeaderElement { get; private set; }
    private bool IsCurrent { get; }
    private bool IsPointerOver { get; private set; }
    private bool IsPressed { get; private set; }
    internal bool IsRecycled { get; internal set; }
    internal DataGrid OwningGrid { get; internal set; }
    internal DataGridRowGroupInfo RowGroupInfo { get; internal set; }
    unknown double TotalIndent {internal set; }
    private static DataGridRowGroupHeader();
    public Style get_HeaderStyle();
    public void set_HeaderStyle(Style value);
    private static void OnHeaderStylePropertyChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    public Visibility get_ItemCountVisibility();
    public void set_ItemCountVisibility(Visibility value);
    public int get_Level();
    internal void set_Level(int value);
    public string get_PropertyName();
    public void set_PropertyName(string value);
    private static void OnPropertyNameChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    public Visibility get_PropertyNameVisibility();
    public void set_PropertyNameVisibility(Visibility value);
    public string get_PropertyValue();
    public void set_PropertyValue(string value);
    private static void OnPropertyValueChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    public double get_SublevelIndent();
    public void set_SublevelIndent(double value);
    private static void OnSublevelIndentPropertyChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    public ICollectionViewGroup get_CollectionViewGroup();
    internal DataGridRowHeader get_HeaderCell();
    [CompilerGeneratedAttribute]
private DataGridRowHeader get_HeaderElement();
    [CompilerGeneratedAttribute]
private void set_HeaderElement(DataGridRowHeader value);
    private bool get_IsCurrent();
    [CompilerGeneratedAttribute]
private bool get_IsPointerOver();
    [CompilerGeneratedAttribute]
private void set_IsPointerOver(bool value);
    [CompilerGeneratedAttribute]
private bool get_IsPressed();
    [CompilerGeneratedAttribute]
private void set_IsPressed(bool value);
    [CompilerGeneratedAttribute]
internal bool get_IsRecycled();
    [CompilerGeneratedAttribute]
internal void set_IsRecycled(bool value);
    [CompilerGeneratedAttribute]
internal DataGrid get_OwningGrid();
    [CompilerGeneratedAttribute]
internal void set_OwningGrid(DataGrid value);
    [CompilerGeneratedAttribute]
internal DataGridRowGroupInfo get_RowGroupInfo();
    [CompilerGeneratedAttribute]
internal void set_RowGroupInfo(DataGridRowGroupInfo value);
    internal void set_TotalIndent(double value);
    internal void ApplyHeaderState(bool animate);
    internal void ApplyState(bool useTransitions);
    protected virtual Size ArrangeOverride(Size finalSize);
    internal void ClearFrozenStates();
    private void DataGridRowGroupHeader_Tapped(object sender, TappedRoutedEventArgs e);
    private void DataGridRowGroupHeader_DoubleTapped(object sender, DoubleTappedRoutedEventArgs e);
    private void EnsureChildClip(UIElement child, double frozenLeftEdge);
    internal void EnsureExpanderButtonIsChecked();
    internal void EnsureHeaderStyleAndVisibility(Style previousStyle);
    private void ExpanderButton_Checked(object sender, RoutedEventArgs e);
    private void ExpanderButton_Unchecked(object sender, RoutedEventArgs e);
    internal void LoadVisualsForDisplay();
    protected virtual void OnApplyTemplate();
    protected virtual AutomationPeer OnCreateAutomationPeer();
    private void SetIsCheckedNoCallBack(bool value);
    internal void ToggleExpandCollapse(Visibility newVisibility, bool setCurrent);
    internal void UpdateTitleElements();
    private void DataGridRowGroupHeader_PointerCanceled(object sender, PointerRoutedEventArgs e);
    private void DataGridRowGroupHeader_PointerEntered(object sender, PointerRoutedEventArgs e);
    private void DataGridRowGroupHeader_PointerExited(object sender, PointerRoutedEventArgs e);
    private void DataGridRowGroupHeader_PointerMoved(object sender, PointerRoutedEventArgs e);
    private void DataGridRowGroupHeader_PointerPressed(object sender, PointerRoutedEventArgs e);
    private void DataGridRowGroupHeader_PointerReleased(object sender, PointerRoutedEventArgs e);
    internal void EnsureGridLine();
    private void UpdateIsPointerOver(bool isPointerOver);
    private void UpdateIsPressed(bool isPressed);
}
public class Microsoft.Toolkit.Uwp.UI.Controls.DataGridRowGroupHeaderEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
private DataGridRowGroupHeader <RowGroupHeader>k__BackingField;
    public DataGridRowGroupHeader RowGroupHeader { get; private set; }
    public DataGridRowGroupHeaderEventArgs(DataGridRowGroupHeader rowGroupHeader);
    [CompilerGeneratedAttribute]
public DataGridRowGroupHeader get_RowGroupHeader();
    [CompilerGeneratedAttribute]
private void set_RowGroupHeader(DataGridRowGroupHeader value);
}
[DefaultMemberAttribute("Item")]
internal class Microsoft.Toolkit.Uwp.UI.Controls.DataGridSelectedItemsCollection : object {
    private List`1<object> _oldSelectedItemsCache;
    private IndexToValueTable`1<bool> _oldSelectedSlotsTable;
    private List`1<object> _selectedItemsCache;
    private IndexToValueTable`1<bool> _selectedSlotsTable;
    [CompilerGeneratedAttribute]
private DataGrid <OwningGrid>k__BackingField;
    public object Item { get; public set; }
    public bool IsFixedSize { get; }
    public bool IsReadOnly { get; }
    public int Count { get; }
    public bool IsSynchronized { get; }
    public object SyncRoot { get; }
    internal DataGrid OwningGrid { get; private set; }
    internal List`1<object> SelectedItemsCache { get; internal set; }
    public DataGridSelectedItemsCollection(DataGrid owningGrid);
    public sealed virtual object get_Item(int index);
    public sealed virtual void set_Item(int index, object value);
    public sealed virtual bool get_IsFixedSize();
    public sealed virtual bool get_IsReadOnly();
    public sealed virtual int Add(object dataItem);
    public sealed virtual void Clear();
    public sealed virtual bool Contains(object dataItem);
    public sealed virtual int IndexOf(object dataItem);
    public sealed virtual void Insert(int index, object dataItem);
    public sealed virtual void Remove(object dataItem);
    public sealed virtual void RemoveAt(int index);
    public sealed virtual int get_Count();
    public sealed virtual bool get_IsSynchronized();
    public sealed virtual object get_SyncRoot();
    public sealed virtual void CopyTo(Array array, int index);
    [IteratorStateMachineAttribute("Microsoft.Toolkit.Uwp.UI.Controls.DataGridSelectedItemsCollection/<GetEnumerator>d__26")]
public sealed virtual IEnumerator GetEnumerator();
    [CompilerGeneratedAttribute]
internal DataGrid get_OwningGrid();
    [CompilerGeneratedAttribute]
private void set_OwningGrid(DataGrid value);
    internal List`1<object> get_SelectedItemsCache();
    internal void set_SelectedItemsCache(List`1<object> value);
    internal void ClearRows();
    internal bool ContainsSlot(int slot);
    internal bool ContainsAll(int startSlot, int endSlot);
    internal void Delete(int slot, object item);
    internal void DeleteSlot(int slot);
    internal int GetIndexCount(int lowerBound, int upperBound);
    internal IEnumerable`1<int> GetIndexes();
    internal IEnumerable`1<int> GetSlots(int startSlot);
    internal SelectionChangedEventArgs GetSelectionChangedEventArgs();
    internal void InsertIndex(int slot);
    internal void SelectSlot(int slot, bool select);
    internal void SelectSlots(int startSlot, int endSlot, bool select);
    internal void UpdateIndexes();
}
internal enum Microsoft.Toolkit.Uwp.UI.Controls.DataGridSelectionAction : Enum {
    public int value__;
    public static DataGridSelectionAction AddCurrentToSelection;
    public static DataGridSelectionAction None;
    public static DataGridSelectionAction RemoveCurrentFromSelection;
    public static DataGridSelectionAction SelectCurrent;
    public static DataGridSelectionAction SelectFromAnchorToCurrent;
}
public enum Microsoft.Toolkit.Uwp.UI.Controls.DataGridSelectionMode : Enum {
    public int value__;
    public static DataGridSelectionMode Extended;
    public static DataGridSelectionMode Single;
}
public enum Microsoft.Toolkit.Uwp.UI.Controls.DataGridSortDirection : Enum {
    public int value__;
    public static DataGridSortDirection Ascending;
    public static DataGridSortDirection Descending;
}
public class Microsoft.Toolkit.Uwp.UI.Controls.DataGridTemplateColumn : DataGridColumn {
    private DataTemplate _cellTemplate;
    private DataTemplate _cellEditingTemplate;
    public DataTemplate CellEditingTemplate { get; public set; }
    public DataTemplate CellTemplate { get; public set; }
    internal bool HasDistinctTemplates { get; }
    public DataTemplate get_CellEditingTemplate();
    public void set_CellEditingTemplate(DataTemplate value);
    public DataTemplate get_CellTemplate();
    public void set_CellTemplate(DataTemplate value);
    internal bool get_HasDistinctTemplates();
    protected virtual void CancelCellEdit(FrameworkElement editingElement, object uneditedValue);
    protected virtual FrameworkElement GenerateEditingElement(DataGridCell cell, object dataItem);
    protected virtual FrameworkElement GenerateElement(DataGridCell cell, object dataItem);
    protected virtual object PrepareCellForEdit(FrameworkElement editingElement, RoutedEventArgs editingEventArgs);
}
[StyleTypedPropertyAttribute]
[StyleTypedPropertyAttribute]
public class Microsoft.Toolkit.Uwp.UI.Controls.DataGridTextColumn : DataGridBoundColumn {
    private static string DATAGRIDTEXTCOLUMN_fontFamilyName;
    private static string DATAGRIDTEXTCOLUMN_fontSizeName;
    private static string DATAGRIDTEXTCOLUMN_fontStyleName;
    private static string DATAGRIDTEXTCOLUMN_fontWeightName;
    private static string DATAGRIDTEXTCOLUMN_foregroundName;
    private static double DATAGRIDTEXTCOLUMN_leftMargin;
    private static double DATAGRIDTEXTCOLUMN_rightMargin;
    private Nullable`1<double> _fontSize;
    private Nullable`1<FontStyle> _fontStyle;
    private Nullable`1<FontWeight> _fontWeight;
    private Brush _foreground;
    public static DependencyProperty FontFamilyProperty;
    public FontFamily FontFamily { get; public set; }
    [DefaultValueAttribute("не число")]
public double FontSize { get; public set; }
    public FontStyle FontStyle { get; public set; }
    public FontWeight FontWeight { get; public set; }
    public Brush Foreground { get; public set; }
    private static DataGridTextColumn();
    public FontFamily get_FontFamily();
    public void set_FontFamily(FontFamily value);
    private static void OnFontFamilyPropertyChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    public double get_FontSize();
    public void set_FontSize(double value);
    public FontStyle get_FontStyle();
    public void set_FontStyle(FontStyle value);
    public FontWeight get_FontWeight();
    public void set_FontWeight(FontWeight value);
    public Brush get_Foreground();
    public void set_Foreground(Brush value);
    protected virtual void CancelCellEdit(FrameworkElement editingElement, object uneditedValue);
    protected virtual FrameworkElement GenerateEditingElement(DataGridCell cell, object dataItem);
    protected virtual FrameworkElement GenerateElement(DataGridCell cell, object dataItem);
    protected virtual object PrepareCellForEdit(FrameworkElement editingElement, RoutedEventArgs editingEventArgs);
    protected internal virtual void RefreshCellContent(FrameworkElement element, Brush computedRowForeground, string propertyName);
    protected internal virtual void RefreshForeground(FrameworkElement element, Brush computedRowForeground);
    private void RefreshForeground(TextBlock textBlock, Brush computedRowForeground);
    private void RefreshForeground(TextBox textBox, Brush computedRowForeground);
    private void SetTextFontSize(DependencyObject textElement, DependencyProperty fontSizeProperty);
}
internal class Microsoft.Toolkit.Uwp.UI.Controls.Microsoft_Toolkit_Uwp_UI_Controls_DataGrid_XamlTypeInfo.Activator : MulticastDelegate {
    public Activator(object object, IntPtr method);
    public virtual object Invoke();
    public virtual IAsyncResult BeginInvoke(AsyncCallback callback, object object);
    public virtual object EndInvoke(IAsyncResult result);
}
internal class Microsoft.Toolkit.Uwp.UI.Controls.Microsoft_Toolkit_Uwp_UI_Controls_DataGrid_XamlTypeInfo.AddToCollection : MulticastDelegate {
    public AddToCollection(object object, IntPtr method);
    public virtual void Invoke(object instance, object item);
    public virtual IAsyncResult BeginInvoke(object instance, object item, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
internal class Microsoft.Toolkit.Uwp.UI.Controls.Microsoft_Toolkit_Uwp_UI_Controls_DataGrid_XamlTypeInfo.AddToDictionary : MulticastDelegate {
    public AddToDictionary(object object, IntPtr method);
    public virtual void Invoke(object instance, object key, object item);
    public virtual IAsyncResult BeginInvoke(object instance, object key, object item, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
internal class Microsoft.Toolkit.Uwp.UI.Controls.Microsoft_Toolkit_Uwp_UI_Controls_DataGrid_XamlTypeInfo.BoxInstanceMethod : MulticastDelegate {
    public BoxInstanceMethod(object object, IntPtr method);
    public virtual object Invoke(object instance);
    public virtual IAsyncResult BeginInvoke(object instance, AsyncCallback callback, object object);
    public virtual object EndInvoke(IAsyncResult result);
}
internal class Microsoft.Toolkit.Uwp.UI.Controls.Microsoft_Toolkit_Uwp_UI_Controls_DataGrid_XamlTypeInfo.CreateFromStringMethod : MulticastDelegate {
    public CreateFromStringMethod(object object, IntPtr method);
    public virtual object Invoke(string args);
    public virtual IAsyncResult BeginInvoke(string args, AsyncCallback callback, object object);
    public virtual object EndInvoke(IAsyncResult result);
}
internal class Microsoft.Toolkit.Uwp.UI.Controls.Microsoft_Toolkit_Uwp_UI_Controls_DataGrid_XamlTypeInfo.Getter : MulticastDelegate {
    public Getter(object object, IntPtr method);
    public virtual object Invoke(object instance);
    public virtual IAsyncResult BeginInvoke(object instance, AsyncCallback callback, object object);
    public virtual object EndInvoke(IAsyncResult result);
}
internal class Microsoft.Toolkit.Uwp.UI.Controls.Microsoft_Toolkit_Uwp_UI_Controls_DataGrid_XamlTypeInfo.Setter : MulticastDelegate {
    public Setter(object object, IntPtr method);
    public virtual void Invoke(object instance, object value);
    public virtual IAsyncResult BeginInvoke(object instance, object value, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
[GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks", " 10.0.19041.685")]
[DebuggerNonUserCodeAttribute]
internal class Microsoft.Toolkit.Uwp.UI.Controls.Microsoft_Toolkit_Uwp_UI_Controls_DataGrid_XamlTypeInfo.XamlMember : object {
    private XamlTypeInfoProvider _provider;
    private string _name;
    private bool _isAttachable;
    private bool _isDependencyProperty;
    private bool _isReadOnly;
    private string _typeName;
    private string _targetTypeName;
    [CompilerGeneratedAttribute]
private Getter <Getter>k__BackingField;
    [CompilerGeneratedAttribute]
private Setter <Setter>k__BackingField;
    public string Name { get; }
    public IXamlType Type { get; }
    public IXamlType TargetType { get; }
    public bool IsAttachable { get; }
    public bool IsDependencyProperty { get; }
    public bool IsReadOnly { get; }
    public Getter Getter { get; public set; }
    public Setter Setter { get; public set; }
    public XamlMember(XamlTypeInfoProvider provider, string name, string typeName);
    public sealed virtual string get_Name();
    public sealed virtual IXamlType get_Type();
    public void SetTargetTypeName(string targetTypeName);
    public sealed virtual IXamlType get_TargetType();
    public void SetIsAttachable();
    public sealed virtual bool get_IsAttachable();
    public void SetIsDependencyProperty();
    public sealed virtual bool get_IsDependencyProperty();
    public void SetIsReadOnly();
    public sealed virtual bool get_IsReadOnly();
    [CompilerGeneratedAttribute]
public Getter get_Getter();
    [CompilerGeneratedAttribute]
public void set_Getter(Getter value);
    public sealed virtual object GetValue(object instance);
    [CompilerGeneratedAttribute]
public Setter get_Setter();
    [CompilerGeneratedAttribute]
public void set_Setter(Setter value);
    public sealed virtual void SetValue(object instance, object value);
}
[GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks", " 10.0.19041.685")]
[DebuggerNonUserCodeAttribute]
public class Microsoft.Toolkit.Uwp.UI.Controls.Microsoft_Toolkit_Uwp_UI_Controls_DataGrid_XamlTypeInfo.XamlMetaDataProvider : object {
    private XamlTypeInfoProvider _provider;
    private XamlTypeInfoProvider Provider { get; }
    private XamlTypeInfoProvider get_Provider();
    public sealed virtual IXamlType GetXamlType(Type type);
    public sealed virtual IXamlType GetXamlType(string fullName);
    public sealed virtual XmlnsDefinition[] GetXmlnsDefinitions();
}
[GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks", " 10.0.19041.685")]
[DebuggerNonUserCodeAttribute]
internal class Microsoft.Toolkit.Uwp.UI.Controls.Microsoft_Toolkit_Uwp_UI_Controls_DataGrid_XamlTypeInfo.XamlSystemBaseType : object {
    private string _fullName;
    private Type _underlyingType;
    public string FullName { get; }
    public Type UnderlyingType { get; }
    public IXamlType BaseType { get; }
    public IXamlMember ContentProperty { get; }
    public bool IsArray { get; }
    public bool IsCollection { get; }
    public bool IsConstructible { get; }
    public bool IsDictionary { get; }
    public bool IsMarkupExtension { get; }
    public bool IsBindable { get; }
    public bool IsReturnTypeStub { get; }
    public bool IsLocalType { get; }
    public IXamlType ItemType { get; }
    public IXamlType KeyType { get; }
    public XamlSystemBaseType(string fullName, Type underlyingType);
    public sealed virtual string get_FullName();
    public sealed virtual Type get_UnderlyingType();
    public virtual IXamlType get_BaseType();
    public virtual IXamlMember get_ContentProperty();
    public virtual IXamlMember GetMember(string name);
    public virtual bool get_IsArray();
    public virtual bool get_IsCollection();
    public virtual bool get_IsConstructible();
    public virtual bool get_IsDictionary();
    public virtual bool get_IsMarkupExtension();
    public virtual bool get_IsBindable();
    public virtual bool get_IsReturnTypeStub();
    public virtual bool get_IsLocalType();
    public virtual IXamlType get_ItemType();
    public virtual IXamlType get_KeyType();
    public virtual object ActivateInstance();
    public virtual void AddToMap(object instance, object key, object item);
    public virtual void AddToVector(object instance, object item);
    public virtual void RunInitializer();
    public virtual object CreateFromString(string input);
}
[GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks", " 10.0.19041.685")]
[DebuggerNonUserCodeAttribute]
internal class Microsoft.Toolkit.Uwp.UI.Controls.Microsoft_Toolkit_Uwp_UI_Controls_DataGrid_XamlTypeInfo.XamlTypeInfoProvider : object {
    private Dictionary`2<string, IXamlType> _xamlTypeCacheByName;
    private Dictionary`2<Type, IXamlType> _xamlTypeCacheByType;
    private Dictionary`2<string, IXamlMember> _xamlMembers;
    private String[] _typeNameTable;
    private Type[] _typeTable;
    private List`1<IXamlMetadataProvider> _otherProviders;
    private List`1<IXamlMetadataProvider> OtherProviders { get; }
    public IXamlType GetXamlTypeByType(Type type);
    public IXamlType GetXamlTypeByName(string typeName);
    public IXamlMember GetMemberByLongName(string longMemberName);
    private void InitTypeTables();
    private int LookupTypeIndexByName(string typeName);
    private int LookupTypeIndexByType(Type type);
    private object Activate_0_DataGrid();
    private object Activate_20_ObservableCollection();
    private object Activate_21_Collection();
    private object Activate_29_ObservableCollection();
    private object Activate_30_Collection();
    private object Activate_32_DataGridCell();
    private object Activate_34_DataGridColumnHeader();
    private object Activate_35_DataGridRow();
    private object Activate_36_DataGridRowHeader();
    private object Activate_37_DataGridRowGroupHeader();
    private object Activate_39_DataGridFrozenGrid();
    private object Activate_42_DataGridCellsPresenter();
    private object Activate_43_DataGridDetailsPresenter();
    private object Activate_44_DataGridColumnHeadersPresenter();
    private object Activate_45_DataGridRowsPresenter();
    private object Activate_47_TreeViewNode();
    private void VectorAdd_20_ObservableCollection(object instance, object item);
    private void VectorAdd_21_Collection(object instance, object item);
    private void VectorAdd_29_ObservableCollection(object instance, object item);
    private void VectorAdd_30_Collection(object instance, object item);
    private void VectorAdd_48_IList(object instance, object item);
    private IXamlType CreateXamlType(int typeIndex);
    private List`1<IXamlMetadataProvider> get_OtherProviders();
    private IXamlType CheckOtherMetadataProvidersForName(string typeName);
    private IXamlType CheckOtherMetadataProvidersForType(Type type);
    private object get_0_DataGrid_DragIndicatorStyle(object instance);
    private void set_0_DataGrid_DragIndicatorStyle(object instance, object Value);
    private object get_1_DataGrid_DropLocationIndicatorStyle(object instance);
    private void set_1_DataGrid_DropLocationIndicatorStyle(object instance, object Value);
    private object get_2_DataGrid_HorizontalGridLinesBrush(object instance);
    private void set_2_DataGrid_HorizontalGridLinesBrush(object instance, object Value);
    private object get_3_DataGrid_VerticalGridLinesBrush(object instance);
    private void set_3_DataGrid_VerticalGridLinesBrush(object instance, object Value);
    private object get_4_DataGrid_AlternatingRowBackground(object instance);
    private void set_4_DataGrid_AlternatingRowBackground(object instance, object Value);
    private object get_5_DataGrid_AlternatingRowForeground(object instance);
    private void set_5_DataGrid_AlternatingRowForeground(object instance, object Value);
    private object get_6_DataGrid_AreRowDetailsFrozen(object instance);
    private void set_6_DataGrid_AreRowDetailsFrozen(object instance, object Value);
    private object get_7_DataGrid_AreRowGroupHeadersFrozen(object instance);
    private void set_7_DataGrid_AreRowGroupHeadersFrozen(object instance, object Value);
    private object get_8_DataGrid_AutoGenerateColumns(object instance);
    private void set_8_DataGrid_AutoGenerateColumns(object instance, object Value);
    private object get_9_DataGrid_CanUserReorderColumns(object instance);
    private void set_9_DataGrid_CanUserReorderColumns(object instance, object Value);
    private object get_10_DataGrid_CanUserResizeColumns(object instance);
    private void set_10_DataGrid_CanUserResizeColumns(object instance, object Value);
    private object get_11_DataGrid_CanUserSortColumns(object instance);
    private void set_11_DataGrid_CanUserSortColumns(object instance, object Value);
    private object get_12_DataGrid_CellStyle(object instance);
    private void set_12_DataGrid_CellStyle(object instance, object Value);
    private object get_13_DataGrid_ClipboardCopyMode(object instance);
    private void set_13_DataGrid_ClipboardCopyMode(object instance, object Value);
    private object get_14_DataGrid_ColumnHeaderHeight(object instance);
    private void set_14_DataGrid_ColumnHeaderHeight(object instance, object Value);
    private object get_15_DataGrid_ColumnHeaderStyle(object instance);
    private void set_15_DataGrid_ColumnHeaderStyle(object instance, object Value);
    private object get_16_DataGrid_ColumnWidth(object instance);
    private void set_16_DataGrid_ColumnWidth(object instance, object Value);
    private object get_17_DataGrid_DataFetchSize(object instance);
    private void set_17_DataGrid_DataFetchSize(object instance, object Value);
    private object get_18_DataGrid_FrozenColumnCount(object instance);
    private void set_18_DataGrid_FrozenColumnCount(object instance, object Value);
    private object get_19_DataGrid_GridLinesVisibility(object instance);
    private void set_19_DataGrid_GridLinesVisibility(object instance, object Value);
    private object get_20_DataGrid_HeadersVisibility(object instance);
    private void set_20_DataGrid_HeadersVisibility(object instance, object Value);
    private object get_21_DataGrid_HorizontalScrollBarVisibility(object instance);
    private void set_21_DataGrid_HorizontalScrollBarVisibility(object instance, object Value);
    private object get_22_DataGrid_IsReadOnly(object instance);
    private void set_22_DataGrid_IsReadOnly(object instance, object Value);
    private object get_23_DataGrid_IsValid(object instance);
    private object get_24_DataGrid_IncrementalLoadingThreshold(object instance);
    private void set_24_DataGrid_IncrementalLoadingThreshold(object instance, object Value);
    private object get_25_DataGrid_IncrementalLoadingTrigger(object instance);
    private void set_25_DataGrid_IncrementalLoadingTrigger(object instance, object Value);
    private object get_26_DataGrid_ItemsSource(object instance);
    private void set_26_DataGrid_ItemsSource(object instance, object Value);
    private object get_27_DataGrid_MaxColumnWidth(object instance);
    private void set_27_DataGrid_MaxColumnWidth(object instance, object Value);
    private object get_28_DataGrid_MinColumnWidth(object instance);
    private void set_28_DataGrid_MinColumnWidth(object instance, object Value);
    private object get_29_DataGrid_RowBackground(object instance);
    private void set_29_DataGrid_RowBackground(object instance, object Value);
    private object get_30_DataGrid_RowDetailsTemplate(object instance);
    private void set_30_DataGrid_RowDetailsTemplate(object instance, object Value);
    private object get_31_DataGrid_RowDetailsVisibilityMode(object instance);
    private void set_31_DataGrid_RowDetailsVisibilityMode(object instance, object Value);
    private object get_32_DataGrid_RowForeground(object instance);
    private void set_32_DataGrid_RowForeground(object instance, object Value);
    private object get_33_DataGrid_RowHeight(object instance);
    private void set_33_DataGrid_RowHeight(object instance, object Value);
    private object get_34_DataGrid_RowHeaderWidth(object instance);
    private void set_34_DataGrid_RowHeaderWidth(object instance, object Value);
    private object get_35_DataGrid_RowHeaderStyle(object instance);
    private void set_35_DataGrid_RowHeaderStyle(object instance, object Value);
    private object get_36_DataGrid_RowStyle(object instance);
    private void set_36_DataGrid_RowStyle(object instance, object Value);
    private object get_37_DataGrid_SelectionMode(object instance);
    private void set_37_DataGrid_SelectionMode(object instance, object Value);
    private object get_38_DataGrid_SelectedIndex(object instance);
    private void set_38_DataGrid_SelectedIndex(object instance, object Value);
    private object get_39_DataGrid_SelectedItem(object instance);
    private void set_39_DataGrid_SelectedItem(object instance, object Value);
    private object get_40_DataGrid_VerticalScrollBarVisibility(object instance);
    private void set_40_DataGrid_VerticalScrollBarVisibility(object instance, object Value);
    private object get_41_DataGrid_Columns(object instance);
    private object get_42_DataGridColumn_ActualWidth(object instance);
    private object get_43_DataGridColumn_CanUserReorder(object instance);
    private void set_43_DataGridColumn_CanUserReorder(object instance, object Value);
    private object get_44_DataGridColumn_CanUserResize(object instance);
    private void set_44_DataGridColumn_CanUserResize(object instance, object Value);
    private object get_45_DataGridColumn_CanUserSort(object instance);
    private void set_45_DataGridColumn_CanUserSort(object instance, object Value);
    private object get_46_DataGridColumn_CellStyle(object instance);
    private void set_46_DataGridColumn_CellStyle(object instance, object Value);
    private object get_47_DataGridColumn_ClipboardContentBinding(object instance);
    private void set_47_DataGridColumn_ClipboardContentBinding(object instance, object Value);
    private object get_48_DataGridColumn_DisplayIndex(object instance);
    private void set_48_DataGridColumn_DisplayIndex(object instance, object Value);
    private object get_49_DataGridColumn_DragIndicatorStyle(object instance);
    private void set_49_DataGridColumn_DragIndicatorStyle(object instance, object Value);
    private object get_50_DataGridColumn_HeaderStyle(object instance);
    private void set_50_DataGridColumn_HeaderStyle(object instance, object Value);
    private object get_51_DataGridColumn_Header(object instance);
    private void set_51_DataGridColumn_Header(object instance, object Value);
    private object get_52_DataGridColumn_IsAutoGenerated(object instance);
    private object get_53_DataGridColumn_IsFrozen(object instance);
    private object get_54_DataGridColumn_IsReadOnly(object instance);
    private void set_54_DataGridColumn_IsReadOnly(object instance, object Value);
    private object get_55_DataGridColumn_MaxWidth(object instance);
    private void set_55_DataGridColumn_MaxWidth(object instance, object Value);
    private object get_56_DataGridColumn_MinWidth(object instance);
    private void set_56_DataGridColumn_MinWidth(object instance, object Value);
    private object get_57_DataGridColumn_SortDirection(object instance);
    private void set_57_DataGridColumn_SortDirection(object instance, object Value);
    private object get_58_DataGridColumn_Tag(object instance);
    private void set_58_DataGridColumn_Tag(object instance, object Value);
    private object get_59_DataGridColumn_Visibility(object instance);
    private void set_59_DataGridColumn_Visibility(object instance, object Value);
    private object get_60_DataGridColumn_Width(object instance);
    private void set_60_DataGridColumn_Width(object instance, object Value);
    private object get_61_DataGrid_CurrentColumn(object instance);
    private void set_61_DataGrid_CurrentColumn(object instance, object Value);
    private object get_62_DataGrid_RowGroupHeaderPropertyNameAlternative(object instance);
    private void set_62_DataGrid_RowGroupHeaderPropertyNameAlternative(object instance, object Value);
    private object get_63_DataGrid_RowGroupHeaderStyles(object instance);
    private object get_64_DataGrid_SelectedItems(object instance);
    private object get_65_DataGridCell_IsValid(object instance);
    private object get_66_DataGridColumnHeader_SeparatorBrush(object instance);
    private void set_66_DataGridColumnHeader_SeparatorBrush(object instance, object Value);
    private object get_67_DataGridColumnHeader_SeparatorVisibility(object instance);
    private void set_67_DataGridColumnHeader_SeparatorVisibility(object instance, object Value);
    private object get_68_DataGridRow_DetailsTemplate(object instance);
    private void set_68_DataGridRow_DetailsTemplate(object instance, object Value);
    private object get_69_DataGridRow_DetailsVisibility(object instance);
    private void set_69_DataGridRow_DetailsVisibility(object instance, object Value);
    private object get_70_DataGridRow_Header(object instance);
    private void set_70_DataGridRow_Header(object instance, object Value);
    private object get_71_DataGridRow_HeaderStyle(object instance);
    private void set_71_DataGridRow_HeaderStyle(object instance, object Value);
    private object get_72_DataGridRow_IsValid(object instance);
    private object get_73_DataGridRowHeader_SeparatorBrush(object instance);
    private void set_73_DataGridRowHeader_SeparatorBrush(object instance, object Value);
    private object get_74_DataGridRowHeader_SeparatorVisibility(object instance);
    private void set_74_DataGridRowHeader_SeparatorVisibility(object instance, object Value);
    private object get_75_DataGridRowGroupHeader_HeaderStyle(object instance);
    private void set_75_DataGridRowGroupHeader_HeaderStyle(object instance, object Value);
    private object get_76_DataGridRowGroupHeader_ItemCountVisibility(object instance);
    private void set_76_DataGridRowGroupHeader_ItemCountVisibility(object instance, object Value);
    private object get_77_DataGridRowGroupHeader_Level(object instance);
    private object get_78_DataGridRowGroupHeader_PropertyName(object instance);
    private void set_78_DataGridRowGroupHeader_PropertyName(object instance, object Value);
    private object get_79_DataGridRowGroupHeader_PropertyNameVisibility(object instance);
    private void set_79_DataGridRowGroupHeader_PropertyNameVisibility(object instance, object Value);
    private object get_80_DataGridRowGroupHeader_PropertyValue(object instance);
    private void set_80_DataGridRowGroupHeader_PropertyValue(object instance, object Value);
    private object get_81_DataGridRowGroupHeader_SublevelIndent(object instance);
    private void set_81_DataGridRowGroupHeader_SublevelIndent(object instance, object Value);
    private object get_82_DataGridRowGroupHeader_CollectionViewGroup(object instance);
    private object get_83_DataGridFrozenGrid_IsFrozen(object instance);
    private void set_83_DataGridFrozenGrid_IsFrozen(object instance, object Value);
    private object get_84_DataGridDetailsPresenter_ContentHeight(object instance);
    private void set_84_DataGridDetailsPresenter_ContentHeight(object instance, object Value);
    private object get_85_IconSource_Foreground(object instance);
    private void set_85_IconSource_Foreground(object instance, object Value);
    private object get_86_TreeViewNode_IsExpanded(object instance);
    private void set_86_TreeViewNode_IsExpanded(object instance, object Value);
    private object get_87_TreeViewNode_HasUnrealizedChildren(object instance);
    private void set_87_TreeViewNode_HasUnrealizedChildren(object instance, object Value);
    private object get_88_TreeViewNode_Content(object instance);
    private void set_88_TreeViewNode_Content(object instance, object Value);
    private object get_89_TreeViewNode_Children(object instance);
    private object get_90_TreeViewNode_Depth(object instance);
    private object get_91_TreeViewNode_HasChildren(object instance);
    private object get_92_TreeViewNode_Parent(object instance);
    private IXamlMember CreateXamlMember(string longMemberName);
}
[GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks", " 10.0.19041.685")]
[DebuggerNonUserCodeAttribute]
internal class Microsoft.Toolkit.Uwp.UI.Controls.Microsoft_Toolkit_Uwp_UI_Controls_DataGrid_XamlTypeInfo.XamlUserType : XamlSystemBaseType {
    private XamlTypeInfoProvider _provider;
    private IXamlType _baseType;
    private bool _isArray;
    private bool _isMarkupExtension;
    private bool _isBindable;
    private bool _isReturnTypeStub;
    private bool _isLocalType;
    private IXamlType _boxedType;
    private string _contentPropertyName;
    private string _itemTypeName;
    private string _keyTypeName;
    private Dictionary`2<string, string> _memberNames;
    private Dictionary`2<string, object> _enumValues;
    [CompilerGeneratedAttribute]
private Activator <Activator>k__BackingField;
    [CompilerGeneratedAttribute]
private AddToCollection <CollectionAdd>k__BackingField;
    [CompilerGeneratedAttribute]
private AddToDictionary <DictionaryAdd>k__BackingField;
    [CompilerGeneratedAttribute]
private CreateFromStringMethod <CreateFromStringMethod>k__BackingField;
    [CompilerGeneratedAttribute]
private BoxInstanceMethod <BoxInstance>k__BackingField;
    public IXamlType BaseType { get; }
    public bool IsArray { get; }
    public bool IsCollection { get; }
    public bool IsConstructible { get; }
    public bool IsDictionary { get; }
    public bool IsMarkupExtension { get; }
    public bool IsBindable { get; }
    public bool IsReturnTypeStub { get; }
    public bool IsLocalType { get; }
    public IXamlType BoxedType { get; }
    public IXamlMember ContentProperty { get; }
    public IXamlType ItemType { get; }
    public IXamlType KeyType { get; }
    public Activator Activator { get; public set; }
    public AddToCollection CollectionAdd { get; public set; }
    public AddToDictionary DictionaryAdd { get; public set; }
    public CreateFromStringMethod CreateFromStringMethod { get; public set; }
    public BoxInstanceMethod BoxInstance { get; public set; }
    public XamlUserType(XamlTypeInfoProvider provider, string fullName, Type fullType, IXamlType baseType);
    public virtual IXamlType get_BaseType();
    public virtual bool get_IsArray();
    public virtual bool get_IsCollection();
    public virtual bool get_IsConstructible();
    public virtual bool get_IsDictionary();
    public virtual bool get_IsMarkupExtension();
    public virtual bool get_IsBindable();
    public virtual bool get_IsReturnTypeStub();
    public virtual bool get_IsLocalType();
    public sealed virtual IXamlType get_BoxedType();
    public virtual IXamlMember get_ContentProperty();
    public virtual IXamlType get_ItemType();
    public virtual IXamlType get_KeyType();
    public virtual IXamlMember GetMember(string name);
    public virtual object ActivateInstance();
    public virtual void AddToMap(object instance, object key, object item);
    public virtual void AddToVector(object instance, object item);
    public virtual void RunInitializer();
    public virtual object CreateFromString(string input);
    [CompilerGeneratedAttribute]
public Activator get_Activator();
    [CompilerGeneratedAttribute]
public void set_Activator(Activator value);
    [CompilerGeneratedAttribute]
public AddToCollection get_CollectionAdd();
    [CompilerGeneratedAttribute]
public void set_CollectionAdd(AddToCollection value);
    [CompilerGeneratedAttribute]
public AddToDictionary get_DictionaryAdd();
    [CompilerGeneratedAttribute]
public void set_DictionaryAdd(AddToDictionary value);
    [CompilerGeneratedAttribute]
public CreateFromStringMethod get_CreateFromStringMethod();
    [CompilerGeneratedAttribute]
public void set_CreateFromStringMethod(CreateFromStringMethod value);
    [CompilerGeneratedAttribute]
public BoxInstanceMethod get_BoxInstance();
    [CompilerGeneratedAttribute]
public void set_BoxInstance(BoxInstanceMethod value);
    public void SetContentPropertyName(string contentPropertyName);
    public void SetIsArray();
    public void SetIsMarkupExtension();
    public void SetIsBindable();
    public void SetIsReturnTypeStub();
    public void SetIsLocalType();
    public void SetItemTypeName(string itemTypeName);
    public void SetKeyTypeName(string keyTypeName);
    public void SetBoxedType(IXamlType boxedType);
    public object BoxType(object instance);
    public void AddMemberName(string shortName);
    public void AddEnumValue(string name, object value);
}
public class Microsoft.Toolkit.Uwp.UI.Controls.Primitives.DataGridCellsPresenter : Panel {
    private double _fillerLeftEdge;
    [CompilerGeneratedAttribute]
private double <DesiredHeight>k__BackingField;
    [CompilerGeneratedAttribute]
private DataGridRow <OwningRow>k__BackingField;
    private double DesiredHeight { get; private set; }
    private DataGrid OwningGrid { get; }
    internal DataGridRow OwningRow { get; internal set; }
    [CompilerGeneratedAttribute]
private double get_DesiredHeight();
    [CompilerGeneratedAttribute]
private void set_DesiredHeight(double value);
    private DataGrid get_OwningGrid();
    [CompilerGeneratedAttribute]
internal DataGridRow get_OwningRow();
    [CompilerGeneratedAttribute]
internal void set_OwningRow(DataGridRow value);
    protected virtual Size ArrangeOverride(Size finalSize);
    private static void EnsureCellClip(DataGridCell cell, double width, double height, double frozenLeftEdge, double cellLeftEdge);
    private static void EnsureCellDisplay(DataGridCell cell, bool displayColumn);
    internal void EnsureFillerVisibility();
    protected virtual Size MeasureOverride(Size availableSize);
    internal void Recycle();
    private bool ShouldDisplayCell(DataGridColumn column, double frozenLeftEdge, double scrollingLeftEdge);
}
[TemplateVisualStateAttribute]
[TemplateVisualStateAttribute]
[TemplateVisualStateAttribute]
[TemplateVisualStateAttribute]
[TemplateVisualStateAttribute]
[TemplateVisualStateAttribute]
[TemplateVisualStateAttribute]
[TemplateVisualStateAttribute]
public class Microsoft.Toolkit.Uwp.UI.Controls.Primitives.DataGridColumnHeader : ContentControl {
    private static int DATAGRIDCOLUMNHEADER_dragThreshold;
    private static int DATAGRIDCOLUMNHEADER_resizeRegionWidthStrict;
    private static int DATAGRIDCOLUMNHEADER_resizeRegionWidthLoose;
    private static double DATAGRIDCOLUMNHEADER_separatorThickness;
    private Visibility _desiredSeparatorVisibility;
    public static DependencyProperty SeparatorBrushProperty;
    public static DependencyProperty SeparatorVisibilityProperty;
    [CompilerGeneratedAttribute]
private DataGridColumn <OwningColumn>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsPointerOver>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsPressed>k__BackingField;
    public Brush SeparatorBrush { get; public set; }
    public Visibility SeparatorVisibility { get; public set; }
    internal int ColumnIndex { get; }
    internal DataGrid OwningGrid { get; }
    internal DataGridColumn OwningColumn { get; internal set; }
    private bool HasFocus { get; }
    private bool IsPointerOver { get; private set; }
    private bool IsPressed { get; private set; }
    private static DataGridColumnHeader();
    public Brush get_SeparatorBrush();
    public void set_SeparatorBrush(Brush value);
    public Visibility get_SeparatorVisibility();
    public void set_SeparatorVisibility(Visibility value);
    private static void OnSeparatorVisibilityPropertyChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    internal int get_ColumnIndex();
    internal DataGrid get_OwningGrid();
    [CompilerGeneratedAttribute]
internal DataGridColumn get_OwningColumn();
    [CompilerGeneratedAttribute]
internal void set_OwningColumn(DataGridColumn value);
    private bool get_HasFocus();
    [CompilerGeneratedAttribute]
private bool get_IsPointerOver();
    [CompilerGeneratedAttribute]
private void set_IsPointerOver(bool value);
    [CompilerGeneratedAttribute]
private bool get_IsPressed();
    [CompilerGeneratedAttribute]
private void set_IsPressed(bool value);
    protected virtual void OnApplyTemplate();
    protected virtual void OnContentChanged(object oldContent, object newContent);
    protected virtual AutomationPeer OnCreateAutomationPeer();
    internal void ApplyState(bool useTransitions);
    internal void EnsureStyle(Style previousStyle);
    internal void InvokeProcessSort();
    private void ProcessSort();
    internal void UpdateSeparatorVisibility(DataGridColumn lastVisibleColumn);
    private static bool CanResizeColumn(DataGridColumn column);
    private bool TrySetResizeColumn(UInt32 pointerId, DataGridColumn column);
    private bool CanReorderColumn(DataGridColumn column);
    private void DataGridColumnHeader_PointerCanceled(object sender, PointerRoutedEventArgs e);
    private void DataGridColumnHeader_PointerCaptureLost(object sender, PointerRoutedEventArgs e);
    private void CancelPointer(PointerRoutedEventArgs e);
    private void DataGridColumnHeader_IsEnabledChanged(object sender, DependencyPropertyChangedEventArgs e);
    private void DataGridColumnHeader_PointerEntered(object sender, PointerRoutedEventArgs e);
    private void DataGridColumnHeader_PointerExited(object sender, PointerRoutedEventArgs e);
    private void DataGridColumnHeader_PointerPressed(object sender, PointerRoutedEventArgs e);
    private void DataGridColumnHeader_PointerReleased(object sender, PointerRoutedEventArgs e);
    private void DataGridColumnHeader_PointerMoved(object sender, PointerRoutedEventArgs e);
    private DataGridColumn GetReorderingTargetColumn(Point pointerPositionHeaders, bool scroll, Double& scrollAmount);
    private int GetReorderingTargetDisplayIndex(Point pointerPositionHeaders);
    private void OnPointerMove_BeginReorder(UInt32 pointerId, Point pointerPosition);
    private void OnPointerMove_Reorder(Boolean& handled, Pointer pointer, Point pointerPosition, Point pointerPositionHeaders, double distanceFromLeft, double distanceFromRight);
    private void OnPointerMove_Resize(Boolean& handled, Point pointerPositionHeaders);
    private void SetOriginalCursor();
    private void SetResizeCursor(Pointer pointer, Point pointerPosition);
    [CompilerGeneratedAttribute]
private void <InvokeProcessSort>b__39_0();
    [CompilerGeneratedAttribute]
private void <InvokeProcessSort>b__39_1();
}
internal class Microsoft.Toolkit.Uwp.UI.Controls.Primitives.DataGridColumnHeaderInteractionInfo : object {
    [CompilerGeneratedAttribute]
private Pointer <CapturedPointer>k__BackingField;
    [CompilerGeneratedAttribute]
private DataGridColumn <DragColumn>k__BackingField;
    [CompilerGeneratedAttribute]
private DragMode <DragMode>k__BackingField;
    [CompilerGeneratedAttribute]
private UInt32 <DragPointerId>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<Point> <DragStart>k__BackingField;
    [CompilerGeneratedAttribute]
private double <FrozenColumnsWidth>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<Point> <LastPointerPositionHeaders>k__BackingField;
    [CompilerGeneratedAttribute]
private CoreCursor <OriginalCursor>k__BackingField;
    [CompilerGeneratedAttribute]
private double <OriginalHorizontalOffset>k__BackingField;
    [CompilerGeneratedAttribute]
private double <OriginalWidth>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<Point> <PressedPointerPositionHeaders>k__BackingField;
    [CompilerGeneratedAttribute]
private UInt32 <ResizePointerId>k__BackingField;
    internal Pointer CapturedPointer { get; internal set; }
    internal DataGridColumn DragColumn { get; internal set; }
    internal DragMode DragMode { get; internal set; }
    internal UInt32 DragPointerId { get; internal set; }
    internal Nullable`1<Point> DragStart { get; internal set; }
    internal double FrozenColumnsWidth { get; internal set; }
    internal bool HasUserInteraction { get; }
    internal Nullable`1<Point> LastPointerPositionHeaders { get; internal set; }
    internal CoreCursor OriginalCursor { get; internal set; }
    internal double OriginalHorizontalOffset { get; internal set; }
    internal double OriginalWidth { get; internal set; }
    internal Nullable`1<Point> PressedPointerPositionHeaders { get; internal set; }
    internal UInt32 ResizePointerId { get; internal set; }
    [CompilerGeneratedAttribute]
internal Pointer get_CapturedPointer();
    [CompilerGeneratedAttribute]
internal void set_CapturedPointer(Pointer value);
    [CompilerGeneratedAttribute]
internal DataGridColumn get_DragColumn();
    [CompilerGeneratedAttribute]
internal void set_DragColumn(DataGridColumn value);
    [CompilerGeneratedAttribute]
internal DragMode get_DragMode();
    [CompilerGeneratedAttribute]
internal void set_DragMode(DragMode value);
    [CompilerGeneratedAttribute]
internal UInt32 get_DragPointerId();
    [CompilerGeneratedAttribute]
internal void set_DragPointerId(UInt32 value);
    [CompilerGeneratedAttribute]
internal Nullable`1<Point> get_DragStart();
    [CompilerGeneratedAttribute]
internal void set_DragStart(Nullable`1<Point> value);
    [CompilerGeneratedAttribute]
internal double get_FrozenColumnsWidth();
    [CompilerGeneratedAttribute]
internal void set_FrozenColumnsWidth(double value);
    internal bool get_HasUserInteraction();
    [CompilerGeneratedAttribute]
internal Nullable`1<Point> get_LastPointerPositionHeaders();
    [CompilerGeneratedAttribute]
internal void set_LastPointerPositionHeaders(Nullable`1<Point> value);
    [CompilerGeneratedAttribute]
internal CoreCursor get_OriginalCursor();
    [CompilerGeneratedAttribute]
internal void set_OriginalCursor(CoreCursor value);
    [CompilerGeneratedAttribute]
internal double get_OriginalHorizontalOffset();
    [CompilerGeneratedAttribute]
internal void set_OriginalHorizontalOffset(double value);
    [CompilerGeneratedAttribute]
internal double get_OriginalWidth();
    [CompilerGeneratedAttribute]
internal void set_OriginalWidth(double value);
    [CompilerGeneratedAttribute]
internal Nullable`1<Point> get_PressedPointerPositionHeaders();
    [CompilerGeneratedAttribute]
internal void set_PressedPointerPositionHeaders(Nullable`1<Point> value);
    [CompilerGeneratedAttribute]
internal UInt32 get_ResizePointerId();
    [CompilerGeneratedAttribute]
internal void set_ResizePointerId(UInt32 value);
}
public class Microsoft.Toolkit.Uwp.UI.Controls.Primitives.DataGridColumnHeadersPresenter : Panel {
    private Control _dragIndicator;
    private Control _dropLocationIndicator;
    [CompilerGeneratedAttribute]
private DataGridColumn <DragColumn>k__BackingField;
    [CompilerGeneratedAttribute]
private double <DragIndicatorOffset>k__BackingField;
    [CompilerGeneratedAttribute]
private double <DropLocationIndicatorOffset>k__BackingField;
    [CompilerGeneratedAttribute]
private DataGrid <OwningGrid>k__BackingField;
    internal DataGridColumn DragColumn { get; internal set; }
    internal Control DragIndicator { get; internal set; }
    internal double DragIndicatorOffset { get; internal set; }
    internal Control DropLocationIndicator { get; internal set; }
    internal double DropLocationIndicatorOffset { get; internal set; }
    internal DataGrid OwningGrid { get; internal set; }
    [CompilerGeneratedAttribute]
internal DataGridColumn get_DragColumn();
    [CompilerGeneratedAttribute]
internal void set_DragColumn(DataGridColumn value);
    internal Control get_DragIndicator();
    internal void set_DragIndicator(Control value);
    [CompilerGeneratedAttribute]
internal double get_DragIndicatorOffset();
    [CompilerGeneratedAttribute]
internal void set_DragIndicatorOffset(double value);
    internal Control get_DropLocationIndicator();
    internal void set_DropLocationIndicator(Control value);
    [CompilerGeneratedAttribute]
internal double get_DropLocationIndicatorOffset();
    [CompilerGeneratedAttribute]
internal void set_DropLocationIndicatorOffset(double value);
    [CompilerGeneratedAttribute]
internal DataGrid get_OwningGrid();
    [CompilerGeneratedAttribute]
internal void set_OwningGrid(DataGrid value);
    protected virtual Size ArrangeOverride(Size finalSize);
    private static void EnsureColumnHeaderClip(DataGridColumnHeader columnHeader, double width, double height, double frozenLeftEdge, double columnHeaderLeftEdge);
    private void EnsureColumnReorderingClip(Control control, double height, double frozenColumnsWidth, double controlLeftEdge);
    protected virtual Size MeasureOverride(Size availableSize);
    protected virtual AutomationPeer OnCreateAutomationPeer();
}
public class Microsoft.Toolkit.Uwp.UI.Controls.Primitives.DataGridDetailsPresenter : Panel {
    public static DependencyProperty ContentHeightProperty;
    [CompilerGeneratedAttribute]
private DataGridRow <OwningRow>k__BackingField;
    public double ContentHeight { get; public set; }
    private DataGrid OwningGrid { get; }
    internal DataGridRow OwningRow { get; internal set; }
    private static DataGridDetailsPresenter();
    public double get_ContentHeight();
    public void set_ContentHeight(double value);
    private static void OnContentHeightPropertyChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    private DataGrid get_OwningGrid();
    [CompilerGeneratedAttribute]
internal DataGridRow get_OwningRow();
    [CompilerGeneratedAttribute]
internal void set_OwningRow(DataGridRow value);
    protected virtual Size ArrangeOverride(Size finalSize);
    protected virtual Size MeasureOverride(Size availableSize);
    protected virtual AutomationPeer OnCreateAutomationPeer();
}
public class Microsoft.Toolkit.Uwp.UI.Controls.Primitives.DataGridFrozenGrid : Grid {
    public static DependencyProperty IsFrozenProperty;
    private static DataGridFrozenGrid();
    public static bool GetIsFrozen(DependencyObject element);
    public static void SetIsFrozen(DependencyObject element, bool value);
}
[TemplatePartAttribute]
[TemplateVisualStateAttribute]
[TemplateVisualStateAttribute]
[TemplateVisualStateAttribute]
[TemplateVisualStateAttribute]
[TemplateVisualStateAttribute]
[TemplateVisualStateAttribute]
[TemplateVisualStateAttribute]
[TemplateVisualStateAttribute]
[TemplateVisualStateAttribute]
[TemplateVisualStateAttribute]
[TemplateVisualStateAttribute]
[TemplateVisualStateAttribute]
[TemplateVisualStateAttribute]
[TemplateVisualStateAttribute]
[TemplateVisualStateAttribute]
[TemplateVisualStateAttribute]
[TemplateVisualStateAttribute]
[TemplateVisualStateAttribute]
public class Microsoft.Toolkit.Uwp.UI.Controls.Primitives.DataGridRowHeader : ContentControl {
    private static string DATAGRIDROWHEADER_elementRootName;
    private static double DATAGRIDROWHEADER_separatorThickness;
    private static string DATAGRIDROWHEADER_statePointerOver;
    private static string DATAGRIDROWHEADER_statePointerOverCurrentRow;
    private static string DATAGRIDROWHEADER_statePointerOverEditingRow;
    private static string DATAGRIDROWHEADER_statePointerOverEditingRowFocused;
    private static string DATAGRIDROWHEADER_statePointerOverSelected;
    private static string DATAGRIDROWHEADER_statePointerOverSelectedCurrentRow;
    private static string DATAGRIDROWHEADER_statePointerOverSelectedCurrentRowFocused;
    private static string DATAGRIDROWHEADER_statePointerOverSelectedFocused;
    private static string DATAGRIDROWHEADER_stateNormal;
    private static string DATAGRIDROWHEADER_stateNormalCurrentRow;
    private static string DATAGRIDROWHEADER_stateNormalEditingRow;
    private static string DATAGRIDROWHEADER_stateNormalEditingRowFocused;
    private static string DATAGRIDROWHEADER_stateSelected;
    private static string DATAGRIDROWHEADER_stateSelectedCurrentRow;
    private static string DATAGRIDROWHEADER_stateSelectedCurrentRowFocused;
    private static string DATAGRIDROWHEADER_stateSelectedFocused;
    private static byte DATAGRIDROWHEADER_statePointerOverCode;
    private static byte DATAGRIDROWHEADER_statePointerOverCurrentRowCode;
    private static byte DATAGRIDROWHEADER_statePointerOverEditingRowCode;
    private static byte DATAGRIDROWHEADER_statePointerOverEditingRowFocusedCode;
    private static byte DATAGRIDROWHEADER_statePointerOverSelectedCode;
    private static byte DATAGRIDROWHEADER_statePointerOverSelectedCurrentRowCode;
    private static byte DATAGRIDROWHEADER_statePointerOverSelectedCurrentRowFocusedCode;
    private static byte DATAGRIDROWHEADER_statePointerOverSelectedFocusedCode;
    private static byte DATAGRIDROWHEADER_stateNormalCode;
    private static byte DATAGRIDROWHEADER_stateNormalCurrentRowCode;
    private static byte DATAGRIDROWHEADER_stateNormalEditingRowCode;
    private static byte DATAGRIDROWHEADER_stateNormalEditingRowFocusedCode;
    private static byte DATAGRIDROWHEADER_stateSelectedCode;
    private static byte DATAGRIDROWHEADER_stateSelectedCurrentRowCode;
    private static byte DATAGRIDROWHEADER_stateSelectedCurrentRowFocusedCode;
    private static byte DATAGRIDROWHEADER_stateSelectedFocusedCode;
    private static byte DATAGRIDROWHEADER_stateNullCode;
    private static Byte[] _fallbackStateMapping;
    private static Byte[] _idealStateMapping;
    private static String[] _stateNames;
    private FrameworkElement _rootElement;
    public static DependencyProperty SeparatorBrushProperty;
    public static DependencyProperty SeparatorVisibilityProperty;
    [CompilerGeneratedAttribute]
private Control <Owner>k__BackingField;
    public Brush SeparatorBrush { get; public set; }
    public Visibility SeparatorVisibility { get; public set; }
    private DataGrid OwningGrid { get; }
    private DataGridRow OwningRow { get; }
    private DataGridRowGroupHeader OwningRowGroupHeader { get; }
    internal Control Owner { get; internal set; }
    private int Slot { get; }
    private static DataGridRowHeader();
    public Brush get_SeparatorBrush();
    public void set_SeparatorBrush(Brush value);
    public Visibility get_SeparatorVisibility();
    public void set_SeparatorVisibility(Visibility value);
    private DataGrid get_OwningGrid();
    private DataGridRow get_OwningRow();
    private DataGridRowGroupHeader get_OwningRowGroupHeader();
    [CompilerGeneratedAttribute]
internal Control get_Owner();
    [CompilerGeneratedAttribute]
internal void set_Owner(Control value);
    private int get_Slot();
    protected virtual void OnApplyTemplate();
    protected virtual Size MeasureOverride(Size availableSize);
    protected virtual AutomationPeer OnCreateAutomationPeer();
    internal void ApplyOwnerState(bool animate);
    internal void EnsureStyle(Style previousStyle);
    private void DataGridRowHeader_Tapped(object sender, TappedRoutedEventArgs e);
}
public class Microsoft.Toolkit.Uwp.UI.Controls.Primitives.DataGridRowsPresenter : Panel {
    private double _preManipulationHorizontalOffset;
    private double _preManipulationVerticalOffset;
    [CompilerGeneratedAttribute]
private DataGrid <OwningGrid>k__BackingField;
    internal DataGrid OwningGrid { get; internal set; }
    [CompilerGeneratedAttribute]
internal DataGrid get_OwningGrid();
    [CompilerGeneratedAttribute]
internal void set_OwningGrid(DataGrid value);
    protected virtual Size ArrangeOverride(Size finalSize);
    protected virtual Size MeasureOverride(Size availableSize);
    protected virtual AutomationPeer OnCreateAutomationPeer();
    private void DataGridRowsPresenter_ManipulationStarting(object sender, ManipulationStartingRoutedEventArgs e);
    private void DataGridRowsPresenter_ManipulationStarted(object sender, ManipulationStartedRoutedEventArgs e);
    private void DataGridRowsPresenter_ManipulationDelta(object sender, ManipulationDeltaRoutedEventArgs e);
}
[GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "15.0.0.0")]
[DebuggerNonUserCodeAttribute]
[CompilerGeneratedAttribute]
internal class Microsoft.Toolkit.Uwp.UI.Controls.Resources : object {
    private static ResourceManager resourceMan;
    private static CultureInfo resourceCulture;
    [EditorBrowsableAttribute("2")]
internal static ResourceManager ResourceManager { get; }
    [EditorBrowsableAttribute("2")]
internal static CultureInfo Culture { get; internal set; }
    internal static string DataGridRowAutomationPeer_ItemType { get; }
    internal static string DataGridRowGroupHeader_ItemCountPlural { get; }
    internal static string DataGridRowGroupHeader_ItemCountSingular { get; }
    internal static string DataGridRowGroupHeader_PropertyName { get; }
    internal static string DefaultRowGroupHeaderPropertyNameAlternative { get; }
    internal static ResourceManager get_ResourceManager();
    internal static CultureInfo get_Culture();
    internal static void set_Culture(CultureInfo value);
    internal static string get_DataGridRowAutomationPeer_ItemType();
    internal static string get_DataGridRowGroupHeader_ItemCountPlural();
    internal static string get_DataGridRowGroupHeader_ItemCountSingular();
    internal static string get_DataGridRowGroupHeader_PropertyName();
    internal static string get_DefaultRowGroupHeaderPropertyNameAlternative();
}
internal static class Microsoft.Toolkit.Uwp.UI.Controls.Utilities.UISettingsHelper : object {
    private static UISettings _uiSettings;
    internal static bool AreSettingsEnablingAnimations { get; }
    internal static bool AreSettingsAutoHidingScrollBars { get; }
    internal static bool get_AreSettingsEnablingAnimations();
    internal static bool get_AreSettingsAutoHidingScrollBars();
}
internal static class Microsoft.Toolkit.Uwp.UI.Controls.Utilities.VisualStates : object {
    public static string StateNormal;
    public static string StatePointerOver;
    public static string StatePressed;
    public static string StateDisabled;
    public static string GroupCommon;
    public static string StateExpanded;
    public static string StateCollapsed;
    public static string StateEmpty;
    public static string StateUnfocused;
    public static string StateFocused;
    public static string GroupFocus;
    public static string StateSelected;
    public static string StateUnselected;
    public static string GroupSelection;
    public static string StateActive;
    public static string StateInactive;
    public static string GroupActive;
    public static string StateRegular;
    public static string StateCurrent;
    public static string StateCurrentWithFocus;
    public static string GroupCurrent;
    public static string StateDisplay;
    public static string StateEditing;
    public static string GroupInteraction;
    public static string StateUnsorted;
    public static string StateSortAscending;
    public static string StateSortDescending;
    public static string GroupSort;
    public static string StateInvalid;
    public static string StateRowInvalid;
    public static string StateRowValid;
    public static string StateValid;
    public static string GroupValidation;
    public static string StateSeparatorExpanded;
    public static string StateSeparatorCollapsed;
    public static string StateSeparatorExpandedWithoutAnimation;
    public static string StateSeparatorCollapsedWithoutAnimation;
    public static string GroupScrollBarsSeparator;
    public static string StateTouchIndicator;
    public static string StateMouseIndicator;
    public static string StateMouseIndicatorFull;
    public static string StateNoIndicator;
    public static string GroupScrollBars;
    public static void GoToState(Control control, bool useTransitions, String[] stateNames);
}
internal class Microsoft.Toolkit.Uwp.UI.Data.Utilities.BindingInfo : object {
    [CompilerGeneratedAttribute]
private BindingExpression <BindingExpression>k__BackingField;
    [CompilerGeneratedAttribute]
private DependencyProperty <BindingTarget>k__BackingField;
    [CompilerGeneratedAttribute]
private FrameworkElement <Element>k__BackingField;
    public BindingExpression BindingExpression { get; public set; }
    public DependencyProperty BindingTarget { get; public set; }
    public FrameworkElement Element { get; public set; }
    public BindingInfo(BindingExpression bindingExpression, DependencyProperty bindingTarget, FrameworkElement element);
    [CompilerGeneratedAttribute]
public BindingExpression get_BindingExpression();
    [CompilerGeneratedAttribute]
public void set_BindingExpression(BindingExpression value);
    [CompilerGeneratedAttribute]
public DependencyProperty get_BindingTarget();
    [CompilerGeneratedAttribute]
public void set_BindingTarget(DependencyProperty value);
    [CompilerGeneratedAttribute]
public FrameworkElement get_Element();
    [CompilerGeneratedAttribute]
public void set_Element(FrameworkElement value);
}
[DefaultMemberAttribute("Item")]
internal abstract class Microsoft.Toolkit.Uwp.UI.Data.Utilities.CollectionView : object {
    [CompilerGeneratedAttribute]
private EventRegistrationTokenTable`1<CurrentChangingEventHandler> CurrentChanging;
    [CompilerGeneratedAttribute]
private EventRegistrationTokenTable`1<EventHandler`1<object>> CurrentChanged;
    [CompilerGeneratedAttribute]
private NotifyCollectionChangedEventHandler CollectionChanged;
    [CompilerGeneratedAttribute]
private PropertyChangedEventHandler PropertyChanged;
    internal static string CountPropertyName;
    internal static string IsEmptyPropertyName;
    internal static string CulturePropertyName;
    internal static string CurrentPositionPropertyName;
    internal static string CurrentItemPropertyName;
    internal static string IsCurrentBeforeFirstPropertyName;
    internal static string IsCurrentAfterLastPropertyName;
    private static CurrentChangingEventArgs UncancelableCurrentChangingEventArgs;
    private static string IEnumerableT;
    internal static object NoNewItem;
    private IEnumerable _sourceCollection;
    private CollectionViewFlags _flags;
    private int _timestamp;
    private object _currentItem;
    private int _currentPosition;
    private CultureInfo _culture;
    private int _deferLevel;
    private SimpleMonitor _currentChangedMonitor;
    private WeakEventListener`3<CollectionView, object, NotifyCollectionChangedEventArgs> _sourceWeakEventListener;
    public IObservableVector`1<object> CollectionGroups { get; }
    public CultureInfo Culture { get; public set; }
    public object CurrentItem { get; }
    public int CurrentPosition { get; }
    public bool HasMoreItems { get; }
    public bool IsCurrentAfterLast { get; }
    public bool IsCurrentBeforeFirst { get; }
    public bool IsReadOnly { get; }
    public IEnumerable SourceCollection { get; }
    public object Item { get; public set; }
    public int Count { get; }
    public bool IsEmpty { get; }
    public IComparer Comparer { get; }
    public bool NeedsRefresh { get; }
    protected bool IsRefreshDeferred { get; }
    protected bool IsCurrentInSync { get; }
    internal SimpleMonitor CurrentChangedMonitor { get; }
    internal object SyncRoot { get; }
    internal int Timestamp { get; }
    private bool IsCurrentInView { get; }
    public CollectionView(IEnumerable collection);
    private static CollectionView();
    [CompilerGeneratedAttribute]
public virtual EventRegistrationToken add_CurrentChanging(CurrentChangingEventHandler value);
    [CompilerGeneratedAttribute]
public virtual void remove_CurrentChanging(EventRegistrationToken value);
    [CompilerGeneratedAttribute]
public virtual EventRegistrationToken add_CurrentChanged(EventHandler`1<object> value);
    [CompilerGeneratedAttribute]
public virtual void remove_CurrentChanged(EventRegistrationToken value);
    private sealed virtual override void System.Collections.Specialized.INotifyCollectionChanged.add_CollectionChanged(NotifyCollectionChangedEventHandler value);
    private sealed virtual override void System.Collections.Specialized.INotifyCollectionChanged.remove_CollectionChanged(NotifyCollectionChangedEventHandler value);
    private sealed virtual override void System.ComponentModel.INotifyPropertyChanged.add_PropertyChanged(PropertyChangedEventHandler value);
    private sealed virtual override void System.ComponentModel.INotifyPropertyChanged.remove_PropertyChanged(PropertyChangedEventHandler value);
    private sealed virtual override EventRegistrationToken Windows.Foundation.Collections.IObservableVector<System.Object>.add_VectorChanged(VectorChangedEventHandler`1<object> value);
    private sealed virtual override void Windows.Foundation.Collections.IObservableVector<System.Object>.remove_VectorChanged(EventRegistrationToken value);
    public virtual IObservableVector`1<object> get_CollectionGroups();
    public virtual CultureInfo get_Culture();
    public virtual void set_Culture(CultureInfo value);
    public virtual IDisposable DeferRefresh();
    public virtual object get_CurrentItem();
    public virtual int get_CurrentPosition();
    public sealed virtual bool get_HasMoreItems();
    public virtual bool get_IsCurrentAfterLast();
    public virtual bool get_IsCurrentBeforeFirst();
    public sealed virtual bool get_IsReadOnly();
    public virtual IEnumerable get_SourceCollection();
    public sealed virtual object get_Item(int index);
    public sealed virtual void set_Item(int index, object value);
    public sealed virtual void Add(object item);
    public sealed virtual void Clear();
    public abstract virtual bool Contains(object item);
    public sealed virtual void CopyTo(Object[] array, int arrayIndex);
    public sealed virtual void Insert(int index, object item);
    public sealed virtual IAsyncOperation`1<LoadMoreItemsResult> LoadMoreItemsAsync(UInt32 count);
    public virtual bool MoveCurrentToFirst();
    public virtual bool MoveCurrentToLast();
    public virtual bool MoveCurrentToNext();
    public virtual bool MoveCurrentToPrevious();
    public virtual bool MoveCurrentTo(object item);
    public abstract virtual bool MoveCurrentToPosition(int position);
    public virtual void Refresh();
    public sealed virtual bool Remove(object item);
    public sealed virtual void RemoveAt(int index);
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    private sealed virtual override IEnumerator`1<object> System.Collections.Generic.IEnumerable<System.Object>.GetEnumerator();
    public abstract virtual int IndexOf(object item);
    public abstract virtual object GetItemAt(int index);
    public abstract virtual int get_Count();
    public abstract virtual bool get_IsEmpty();
    public virtual IComparer get_Comparer();
    public virtual bool get_NeedsRefresh();
    [CompilerGeneratedAttribute]
protected virtual void add_CollectionChanged(NotifyCollectionChangedEventHandler value);
    [CompilerGeneratedAttribute]
protected virtual void remove_CollectionChanged(NotifyCollectionChangedEventHandler value);
    protected virtual void OnPropertyChanged(PropertyChangedEventArgs e);
    [CompilerGeneratedAttribute]
protected virtual void add_PropertyChanged(PropertyChangedEventHandler value);
    [CompilerGeneratedAttribute]
protected virtual void remove_PropertyChanged(PropertyChangedEventHandler value);
    protected abstract virtual void RefreshOverride();
    protected abstract virtual IEnumerator GetEnumerator();
    protected virtual void OnCollectionChanged(NotifyCollectionChangedEventArgs args);
    protected void SetCurrent(object newItem, int newPosition);
    protected void SetCurrent(object newItem, int newPosition, int count);
    protected bool OKToChangeCurrent();
    protected void OnCurrentChanging();
    protected virtual void OnCurrentChanging(CurrentChangingEventArgs args);
    protected virtual void OnCurrentChanged();
    protected abstract virtual void ProcessCollectionChanged(NotifyCollectionChangedEventArgs args);
    protected void OnCollectionChanged(object sender, NotifyCollectionChangedEventArgs args);
    protected void RefreshOrDefer();
    protected bool get_IsRefreshDeferred();
    protected bool get_IsCurrentInSync();
    internal Type GetItemType(bool useRepresentativeItem);
    internal object GetRepresentativeItem();
    internal void RefreshInternal();
    internal void VerifyRefreshNotDeferred();
    internal SimpleMonitor get_CurrentChangedMonitor();
    internal object get_SyncRoot();
    internal int get_Timestamp();
    private bool get_IsCurrentInView();
    private bool CheckFlag(CollectionViewFlags flags);
    private void SetFlag(CollectionViewFlags flags, bool value);
    private void EndDefer();
    private void OnPropertyChanged(string propertyName);
    [CompilerGeneratedAttribute]
private void <.ctor>b__15_0(CollectionView source, object changed, NotifyCollectionChangedEventArgs arg);
}
internal static class Microsoft.Toolkit.Uwp.UI.Data.Utilities.CollectionViewsError : object {
    private static string Format(string formatString, Object[] args);
}
internal class Microsoft.Toolkit.Uwp.UI.Data.Utilities.EnumerableCollectionView : CollectionView {
    private ListCollectionView _view;
    private ObservableCollection`1<object> _snapshot;
    private IEnumerator _trackingEnumerator;
    private int _ignoreEventsLevel;
    private bool _pollForChanges;
    public CultureInfo Culture { get; public set; }
    public object CurrentItem { get; }
    public int CurrentPosition { get; }
    public bool IsCurrentAfterLast { get; }
    public bool IsCurrentBeforeFirst { get; }
    public int Count { get; }
    public bool IsEmpty { get; }
    public bool NeedsRefresh { get; }
    internal EnumerableCollectionView(IEnumerable source);
    public virtual CultureInfo get_Culture();
    public virtual void set_Culture(CultureInfo value);
    public virtual bool Contains(object item);
    public virtual IDisposable DeferRefresh();
    public virtual object get_CurrentItem();
    public virtual int get_CurrentPosition();
    public virtual bool get_IsCurrentAfterLast();
    public virtual bool get_IsCurrentBeforeFirst();
    public virtual bool MoveCurrentToFirst();
    public virtual bool MoveCurrentToPrevious();
    public virtual bool MoveCurrentToNext();
    public virtual bool MoveCurrentToLast();
    public virtual bool MoveCurrentTo(object item);
    public virtual bool MoveCurrentToPosition(int position);
    public virtual int get_Count();
    public virtual bool get_IsEmpty();
    public virtual bool get_NeedsRefresh();
    public virtual int IndexOf(object item);
    public virtual object GetItemAt(int index);
    protected virtual IEnumerator GetEnumerator();
    protected virtual void RefreshOverride();
    protected virtual void ProcessCollectionChanged(NotifyCollectionChangedEventArgs args);
    private void LoadSnapshot(IEnumerable source);
    private void LoadSnapshotCore(IEnumerable source);
    private void EnsureSnapshot();
    private IDisposable IgnoreViewEvents();
    private void BeginIgnoreEvents();
    private void EndIgnoreEvents();
    private void EnumerableCollectionView_OnPropertyChanged(object sender, PropertyChangedEventArgs args);
    private void EnumerableCollectionView_OnViewChanged(object sender, NotifyCollectionChangedEventArgs args);
    private void EnumerableCollectionView_OnCurrentChanging(object sender, CurrentChangingEventArgs args);
    private void EnumerableCollectionView_OnCurrentChanged(object sender, object args);
}
internal class Microsoft.Toolkit.Uwp.UI.Data.Utilities.ListCollectionView : CollectionView {
    private IList _internalList;
    private bool _currentElementWasRemoved;
    public int Count { get; }
    public bool IsEmpty { get; }
    protected IList InternalList { get; }
    protected bool IsGrouping { get; }
    protected int InternalCount { get; }
    private bool IsCurrentInView { get; }
    private IList SourceList { get; }
    public ListCollectionView(IList list);
    protected virtual void RefreshOverride();
    public virtual bool Contains(object item);
    public virtual bool MoveCurrentToPosition(int position);
    public virtual int IndexOf(object item);
    public virtual object GetItemAt(int index);
    private sealed virtual override int System.Collections.Generic.IComparer<System.Object>.Compare(object o1, object o2);
    protected virtual int Compare(object o1, object o2);
    protected virtual IEnumerator GetEnumerator();
    public virtual int get_Count();
    public virtual bool get_IsEmpty();
    protected virtual void ProcessCollectionChanged(NotifyCollectionChangedEventArgs args);
    private void ProcessCollectionChangedWithAdjustedIndex(NotifyCollectionChangedEventArgs args, int adjustedOldIndex, int adjustedNewIndex);
    private void ProcessCollectionChangedWithAdjustedIndex(object movedItem, int adjustedOldIndex, int adjustedNewIndex);
    private void ProcessCollectionChangedWithAdjustedIndex(EffectiveNotifyCollectionChangedAction action, object oldItem, object newItem, int adjustedOldIndex, int adjustedNewIndex);
    protected int InternalIndexOf(object item);
    protected object InternalItemAt(int index);
    protected bool InternalContains(object item);
    protected IEnumerator InternalGetEnumerator();
    protected IList get_InternalList();
    protected bool get_IsGrouping();
    protected int get_InternalCount();
    private bool get_IsCurrentInView();
    private IList get_SourceList();
    [ConditionalAttribute("DEBUG")]
private void Debug_ValidateCollectionChangedEventArgs(NotifyCollectionChangedEventArgs e);
    private void MoveCurrencyOffDeletedElement(int oldCurrentPosition);
    private int AdjustBefore(NotifyCollectionChangedAction action, object item, int index);
    private void AdjustCurrencyForAdd(int index);
    private void AdjustCurrencyForRemove(int index);
    private void AdjustCurrencyForMove(int oldIndex, int newIndex);
    private void AdjustCurrencyForReplace(int index);
    private void RaiseCurrencyChanges(bool raiseCurrentChanged, bool raiseCurrentItem, bool raiseCurrentPosition, bool raiseIsCurrentBeforeFirst, bool raiseIsCurrentAfterLast);
    private void PrepareSortAndFilter();
    private void OnPropertyChanged(string propertyName);
}
[ExtensionAttribute]
internal static class Microsoft.Toolkit.Uwp.UI.Data.Utilities.ValidationUtil : object {
    [ExtensionAttribute]
public static void AddIfNew(ICollection`1<ValidationResult> collection, ValidationResult value);
    public static void CatchNonCriticalExceptions(Action action);
    [ExtensionAttribute]
public static bool ContainsEqualValidationResult(ICollection`1<ValidationResult> collection, ValidationResult target);
    [ExtensionAttribute]
public static bool ContainsMemberName(ValidationResult validationResult, string target);
    [ExtensionAttribute]
public static ValidationResult FindEqualValidationResult(ICollection`1<ValidationResult> collection, ValidationResult target);
    [ExtensionAttribute]
public static List`1<BindingInfo> GetBindingInfo(FrameworkElement element, object dataItem, bool twoWayOnly, bool useBlockList, bool searchChildren, Type[] excludedTypes);
    [ExtensionAttribute]
public static List`1<DependencyProperty> GetDependencyProperties(FrameworkElement element, bool useBlockList);
    public static bool IsCriticalException(Exception exception);
    [ExtensionAttribute]
private static List`1<BindingInfo> GetBindingInfoOfSingleElement(FrameworkElement element, object inheritedDataContext, object dataItem, bool twoWayOnly, bool useBlockList);
}
[ExtensionAttribute]
internal static class Microsoft.Toolkit.Uwp.UI.Utilities.Extensions : object {
    private static Dictionary`2<DependencyObject, Dictionary`2<DependencyProperty, int>> _suspendedHandlers;
    private static Extensions();
    [ExtensionAttribute]
public static bool IsHandlerSuspended(DependencyObject dependencyObject, DependencyProperty dependencyProperty);
    [ExtensionAttribute]
internal static bool ContainsChild(DependencyObject element, DependencyObject child);
    [ExtensionAttribute]
internal static bool ContainsFocusedElement(DependencyObject element, UIElement uiElement);
    private static object GetFocusedElement(UIElement uiElement);
    [ExtensionAttribute]
internal static bool GetIsReadOnly(MemberInfo memberInfo);
    [ExtensionAttribute]
internal static Type GetItemType(IEnumerable list);
    [ExtensionAttribute]
public static void SetStyleWithType(FrameworkElement element, Style style);
    [ExtensionAttribute]
public static void SetValueNoCallback(DependencyObject obj, DependencyProperty property, object value);
    [ExtensionAttribute]
internal static Point Translate(UIElement fromElement, UIElement toElement, Point fromPoint);
    [ExtensionAttribute]
internal static UIElement EnsureMeasured(UIElement element);
    [ExtensionAttribute]
private static void SuspendHandler(DependencyObject obj, DependencyProperty dependencyProperty, bool incrementSuspensionCount);
}
internal static class Microsoft.Toolkit.Uwp.Utilities.DoubleUtil : object {
    internal static double DBL_EPSILON;
    public static bool AreClose(double value1, double value2);
    public static bool GreaterThan(double value1, double value2);
    public static bool GreaterThanOrClose(double value1, double value2);
    public static bool IsZero(double value);
    public static bool LessThan(double value1, double value2);
    public static bool LessThanOrClose(double value1, double value2);
}
internal class Microsoft.Toolkit.Uwp.Utilities.IndexToValueTable`1 : object {
    private List`1<Range`1<T>> _list;
    public int IndexCount { get; }
    public bool IsEmpty { get; }
    public int RangeCount { get; }
    public int get_IndexCount();
    public bool get_IsEmpty();
    public int get_RangeCount();
    public void AddValue(int index, T value);
    public void AddValues(int startIndex, int count, T value);
    public void Clear();
    public bool Contains(int index);
    public bool ContainsAll(int startIndex, int endIndex);
    public bool ContainsIndexAndValue(int index, T value);
    public IndexToValueTable`1<T> Copy();
    public int GetNextGap(int index);
    public int GetNextIndex(int index);
    public int GetPreviousGap(int index);
    public int GetPreviousIndex(int index);
    public int GetIndexCount(int lowerBound, int upperBound, T value);
    public int GetIndexCount(int lowerBound, int upperBound);
    public int GetIndexCountBeforeGap(int startingIndex, int gapSize);
    [IteratorStateMachineAttribute("Microsoft.Toolkit.Uwp.Utilities.IndexToValueTable`1/<GetIndexes>d__22")]
public IEnumerable`1<int> GetIndexes();
    [IteratorStateMachineAttribute("Microsoft.Toolkit.Uwp.Utilities.IndexToValueTable`1/<GetIndexes>d__23")]
public IEnumerable`1<int> GetIndexes(int startIndex);
    public int GetNthIndex(int n);
    public T GetValueAt(int index);
    public T GetValueAt(int index, Boolean& found);
    public int IndexOf(int index);
    public void InsertIndex(int index);
    public void InsertIndexAndValue(int index, T value);
    public void InsertIndexes(int startIndex, int count);
    public void InsertIndexesAndValues(int startIndex, int count, T value);
    public void RemoveIndex(int index);
    public void RemoveIndexAndValue(int index);
    public void RemoveIndexes(int startIndex, int count);
    public void RemoveIndexesAndValues(int startIndex, int count);
    public void RemoveValue(int index);
    public void RemoveValues(int startIndex, int count);
    private void AddValuesPrivate(int startIndex, int count, T value, Nullable`1<int> startRangeIndex);
    private int FindRangeIndex(int index);
    private bool Merge(int lowerRangeIndex);
    private void InsertIndexesPrivate(int startIndex, int count, int lowerRangeIndex);
    private bool IsCorrectRangeIndex(int rangeIndex, int index);
    private bool RemoveRangeIfInvalid(Range`1<T> range, int rangeIndex);
    public sealed virtual IEnumerator`1<Range`1<T>> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
}
internal static class Microsoft.Toolkit.Uwp.Utilities.KeyboardHelper : object {
    public static void GetMetaKeyState(Boolean& ctrl, Boolean& shift);
    public static void GetMetaKeyState(Boolean& ctrl, Boolean& shift, Boolean& alt);
}
internal class Microsoft.Toolkit.Uwp.Utilities.Range`1 : object {
    [CompilerGeneratedAttribute]
private int <LowerBound>k__BackingField;
    [CompilerGeneratedAttribute]
private int <UpperBound>k__BackingField;
    [CompilerGeneratedAttribute]
private T <Value>k__BackingField;
    public int Count { get; }
    public int LowerBound { get; public set; }
    public int UpperBound { get; public set; }
    public T Value { get; public set; }
    public Range`1(int lowerBound, int upperBound, T value);
    public int get_Count();
    [CompilerGeneratedAttribute]
public int get_LowerBound();
    [CompilerGeneratedAttribute]
public void set_LowerBound(int value);
    [CompilerGeneratedAttribute]
public int get_UpperBound();
    [CompilerGeneratedAttribute]
public void set_UpperBound(int value);
    [CompilerGeneratedAttribute]
public T get_Value();
    [CompilerGeneratedAttribute]
public void set_Value(T value);
    public bool ContainsIndex(int index);
    public bool ContainsValue(object value);
    public Range`1<T> Copy();
}
[ExtensionAttribute]
internal static class Microsoft.Toolkit.Uwp.Utilities.TypeHelper : object {
    internal static char LeftIndexerToken;
    internal static char PropertyNameSeparator;
    internal static char RightIndexerToken;
    private static bool isAPIsAvailableInitialized;
    private static bool isXamlRootAvailable;
    internal static bool IsXamlRootAvailable { get; }
    private static Type FindGenericType(Type definition, Type type);
    private static PropertyInfo FindIndexerInMembers(MemberInfo[] members, string stringIndex, Object[]& index);
    [ExtensionAttribute]
private static string GetDefaultMemberName(Type type);
    [ExtensionAttribute]
internal static string GetBindingPropertyName(Binding binding);
    [ExtensionAttribute]
internal static string GetDisplayName(Type type, string propertyPath);
    [ExtensionAttribute]
internal static Type GetEnumerableItemType(Type enumerableType);
    [ExtensionAttribute]
internal static PropertyInfo GetNestedProperty(Type parentType, string propertyPath);
    [ExtensionAttribute]
internal static PropertyInfo GetNestedProperty(Type parentType, string propertyPath, Object& item);
    [ExtensionAttribute]
internal static Type GetNestedPropertyType(Type parentType, string propertyPath);
    internal static object GetNestedPropertyValue(object item, string propertyPath);
    [ExtensionAttribute]
internal static Type GetNonNullableType(Type type);
    [ExtensionAttribute]
internal static PropertyInfo GetPropertyOrIndexer(Type type, string propertyPath, Object[]& index);
    [ExtensionAttribute]
internal static bool IsEnumerableType(Type enumerableType);
    [ExtensionAttribute]
internal static bool IsNullableType(Type type);
    internal static string PrependDefaultMemberName(object item, string property);
    internal static string RemoveDefaultMemberName(string property);
    internal static void SetNestedPropertyValue(Object& item, object newValue, string propertyPath);
    internal static List`1<string> SplitPropertyPath(string propertyPath);
    [ExtensionAttribute]
internal static Type GetCustomOrCLRType(object instance);
    internal static bool get_IsXamlRootAvailable();
    internal static void InitializeAPIsAvailable();
}
[EditorBrowsableAttribute("1")]
internal class Microsoft.Toolkit.Uwp.Utilities.WeakEventListener`3 : object {
    private WeakReference weakInstance;
    [CompilerGeneratedAttribute]
private Action`3<TInstance, TSource, TEventArgs> <OnEventAction>k__BackingField;
    [CompilerGeneratedAttribute]
private Action`1<WeakEventListener`3<TInstance, TSource, TEventArgs>> <OnDetachAction>k__BackingField;
    public Action`3<TInstance, TSource, TEventArgs> OnEventAction { get; public set; }
    public Action`1<WeakEventListener`3<TInstance, TSource, TEventArgs>> OnDetachAction { get; public set; }
    public WeakEventListener`3(TInstance instance);
    [CompilerGeneratedAttribute]
public Action`3<TInstance, TSource, TEventArgs> get_OnEventAction();
    [CompilerGeneratedAttribute]
public void set_OnEventAction(Action`3<TInstance, TSource, TEventArgs> value);
    [CompilerGeneratedAttribute]
public Action`1<WeakEventListener`3<TInstance, TSource, TEventArgs>> get_OnDetachAction();
    [CompilerGeneratedAttribute]
public void set_OnDetachAction(Action`1<WeakEventListener`3<TInstance, TSource, TEventArgs>> value);
    public void OnEvent(TSource source, TEventArgs eventArgs);
    public void Detach();
}
internal static class ThisAssembly : object {
    internal static string AssemblyVersion;
    internal static string AssemblyFileVersion;
    internal static string AssemblyInformationalVersion;
    internal static string AssemblyName;
    internal static string AssemblyTitle;
    internal static string AssemblyConfiguration;
    internal static string GitCommitId;
    internal static bool IsPublicRelease;
    internal static bool IsPrerelease;
    internal static DateTime GitCommitDate;
    internal static string RootNamespace;
    private static ThisAssembly();
}
