public class Microsoft.Toolkit.Uwp.UI.Automation.Peers.TokenizingTextBoxAutomationPeer : ListViewBaseAutomationPeer {
    public bool IsReadOnly { get; }
    public string Value { get; }
    private TokenizingTextBox OwningTokenizingTextBox { get; }
    public TokenizingTextBoxAutomationPeer(TokenizingTextBox owner);
    public sealed virtual bool get_IsReadOnly();
    public sealed virtual string get_Value();
    private TokenizingTextBox get_OwningTokenizingTextBox();
    public sealed virtual void SetValue(string value);
    protected virtual string GetClassNameCore();
    protected virtual string GetNameCore();
    protected virtual object GetPatternCore(PatternInterface patternInterface);
    protected virtual IList`1<AutomationPeer> GetChildrenCore();
}
[EditorBrowsableAttribute("2")]
public enum Microsoft.Toolkit.Uwp.UI.Controls.ColorChannel : Enum {
    public int value__;
    public static ColorChannel Alpha;
    public static ColorChannel Channel1;
    public static ColorChannel Channel2;
    public static ColorChannel Channel3;
}
[TemplatePartAttribute]
[TemplatePartAttribute]
[TemplatePartAttribute]
[TemplatePartAttribute]
[TemplatePartAttribute]
[TemplatePartAttribute]
[TemplatePartAttribute]
[TemplatePartAttribute]
[TemplatePartAttribute]
[TemplatePartAttribute]
[TemplatePartAttribute]
[TemplatePartAttribute]
[TemplatePartAttribute]
[TemplatePartAttribute]
[TemplatePartAttribute]
[TemplatePartAttribute]
[TemplatePartAttribute]
[TemplatePartAttribute]
[TemplatePartAttribute]
[TemplatePartAttribute]
[TemplatePartAttribute]
[TemplatePartAttribute]
[TemplatePartAttribute]
[TemplatePartAttribute]
[TemplatePartAttribute]
[TemplatePartAttribute]
[TemplatePartAttribute]
[TemplatePartAttribute]
[TemplatePartAttribute]
public class Microsoft.Toolkit.Uwp.UI.Controls.ColorPicker : ColorPicker {
    [CompilerGeneratedAttribute]
private Color <CheckerBackgroundColor>k__BackingField;
    private static int ColorUpdateInterval;
    private long tokenColor;
    private bool callbacksConnected;
    private bool eventsConnected;
    private bool isInitialized;
    private Nullable`1<HsvColor> savedHsvColor;
    private Nullable`1<Color> savedHsvColorRgbEquivalent;
    private Nullable`1<Color> updatedRgbColor;
    private DispatcherQueueTimer dispatcherQueueTimer;
    private ListBox ColorPanelSelector;
    private ColorSpectrum ColorSpectrumControl;
    private ColorPickerSlider ColorSpectrumAlphaSlider;
    private ColorPickerSlider ColorSpectrumThirdDimensionSlider;
    private TextBox HexInputTextBox;
    private ToggleButton HsvToggleButton;
    private ToggleButton RgbToggleButton;
    private TextBox Channel1TextBox;
    private TextBox Channel2TextBox;
    private TextBox Channel3TextBox;
    private TextBox AlphaChannelTextBox;
    private ColorPickerSlider Channel1Slider;
    private ColorPickerSlider Channel2Slider;
    private ColorPickerSlider Channel3Slider;
    private ColorPickerSlider AlphaChannelSlider;
    private Border N1PreviewBorder;
    private Border N2PreviewBorder;
    private Border P1PreviewBorder;
    private Border P2PreviewBorder;
    private Border CheckeredBackground1Border;
    private Border CheckeredBackground2Border;
    private Border CheckeredBackground3Border;
    private Border CheckeredBackground4Border;
    private Border CheckeredBackground5Border;
    private Border CheckeredBackground6Border;
    private Border CheckeredBackground7Border;
    private Border CheckeredBackground8Border;
    private Border CheckeredBackground9Border;
    private Border CheckeredBackground10Border;
    public static DependencyProperty CustomPaletteColorsProperty;
    public static DependencyProperty CustomPaletteColumnCountProperty;
    public static DependencyProperty CustomPaletteProperty;
    public static DependencyProperty IsColorPaletteVisibleProperty;
    internal Color CheckerBackgroundColor { get; internal set; }
    public ObservableCollection`1<Color> CustomPaletteColors { get; }
    public int CustomPaletteColumnCount { get; public set; }
    public IColorPalette CustomPalette { get; public set; }
    public bool IsColorPaletteVisible { get; public set; }
    private static ColorPicker();
    [CompilerGeneratedAttribute]
internal Color get_CheckerBackgroundColor();
    [CompilerGeneratedAttribute]
internal void set_CheckerBackgroundColor(Color value);
    protected virtual override void Finalize();
    private static bool IsColorEmpty(Color color);
    protected virtual void OnApplyTemplate();
    private T GetTemplateChild(string childName, bool isRequired);
    private void ConnectCallbacks(bool connected);
    private void ConnectEvents(bool connected);
    private void UpdateVisualState(bool useTransitions);
    private ColorRepresentation GetActiveColorRepresentation();
    private void SetActiveColorRepresentation(Nullable`1<ColorRepresentation> colorRepresentation);
    private ColorChannel GetActiveColorSpectrumThirdDimension();
    private void ScheduleColorUpdate(Color newColor);
    private void ApplyChannelTextBoxValue(TextBox channelTextBox);
    private void UpdateColorControlValues();
    private void SetColorChannel(ColorRepresentation colorRepresentation, ColorChannel channel, double newValue);
    private void UpdateChannelSliderBackgrounds();
    private void UpdateChannelSliderBackground(ColorPickerSlider slider);
    private void SetDefaultPalette();
    private void ValidateSelectedPanel();
    private void OnDependencyPropertyChanged(object sender, DependencyPropertyChangedEventArgs args);
    private void StartDispatcherQueueTimer();
    private void StopDispatcherQueueTimer();
    private void DispatcherQueueTimer_Tick(object sender, object e);
    private void OnColorChanged(DependencyObject d, DependencyProperty e);
    private void ColorPickerButton_Loaded(object sender, RoutedEventArgs e);
    private void ChannelSlider_Loaded(object sender, RoutedEventArgs e);
    [AsyncStateMachineAttribute("Microsoft.Toolkit.Uwp.UI.Controls.ColorPicker/<CheckeredBackgroundBorder_Loaded>d__68")]
private void CheckeredBackgroundBorder_Loaded(object sender, RoutedEventArgs e);
    private void CustomPaletteColors_CollectionChanged(object sender, NotifyCollectionChangedEventArgs e);
    private void ColorSpectrum_ColorChanged(ColorSpectrum sender, ColorChangedEventArgs args);
    private void ColorSpectrum_GotFocus(object sender, RoutedEventArgs e);
    private void ColorRepToggleButton_CheckedUnchecked(object sender, RoutedEventArgs e);
    private void PreviewBorder_PointerPressed(object sender, PointerRoutedEventArgs e);
    private void HexInputTextBox_KeyDown(object sender, KeyRoutedEventArgs e);
    private void HexInputTextBox_LostFocus(object sender, RoutedEventArgs e);
    private void ChannelTextBox_KeyDown(object sender, KeyRoutedEventArgs e);
    private void ChannelTextBox_LostFocus(object sender, RoutedEventArgs e);
    private void ChannelSlider_ValueChanged(object sender, RangeBaseValueChangedEventArgs e);
    public ObservableCollection`1<Color> get_CustomPaletteColors();
    public int get_CustomPaletteColumnCount();
    public void set_CustomPaletteColumnCount(int value);
    public IColorPalette get_CustomPalette();
    public void set_CustomPalette(IColorPalette value);
    public bool get_IsColorPaletteVisible();
    public void set_IsColorPaletteVisible(bool value);
    [CompilerGeneratedAttribute]
internal static void <GetTemplateChild>g__ThrowArgumentNullException|46_0();
}
[TemplatePartAttribute]
public class Microsoft.Toolkit.Uwp.UI.Controls.ColorPickerButton : DropDownButton {
    [CompilerGeneratedAttribute]
private ColorPicker <ColorPicker>k__BackingField;
    public static DependencyProperty ColorPickerStyleProperty;
    public static DependencyProperty FlyoutPresenterStyleProperty;
    public static DependencyProperty SelectedColorProperty;
    private Border CheckeredBackgroundBorder;
    public ColorPicker ColorPicker { get; private set; }
    public Style ColorPickerStyle { get; public set; }
    public Style FlyoutPresenterStyle { get; public set; }
    public Color SelectedColor { get; public set; }
    private static ColorPickerButton();
    [CompilerGeneratedAttribute]
public ColorPicker get_ColorPicker();
    [CompilerGeneratedAttribute]
private void set_ColorPicker(ColorPicker value);
    public Style get_ColorPickerStyle();
    public void set_ColorPickerStyle(Style value);
    public Style get_FlyoutPresenterStyle();
    public void set_FlyoutPresenterStyle(Style value);
    public Color get_SelectedColor();
    public void set_SelectedColor(Color value);
    protected virtual void OnApplyTemplate();
    private void ColorPicker_ColorChanged(ColorPicker sender, ColorChangedEventArgs args);
    [AsyncStateMachineAttribute("Microsoft.Toolkit.Uwp.UI.Controls.ColorPickerButton/<CheckeredBackgroundBorder_Loaded>d__20")]
private void CheckeredBackgroundBorder_Loaded(object sender, RoutedEventArgs e);
}
public class Microsoft.Toolkit.Uwp.UI.Controls.ColorPickerConverters.ColorToColorShadeConverter : object {
    public sealed virtual object Convert(object value, Type targetType, object parameter, string language);
    public sealed virtual object ConvertBack(object value, Type targetType, object parameter, string language);
}
public class Microsoft.Toolkit.Uwp.UI.Controls.ColorPickerConverters.ColorToHexConverter : object {
    public sealed virtual object Convert(object value, Type targetType, object parameter, string language);
    public sealed virtual object ConvertBack(object value, Type targetType, object parameter, string language);
}
public class Microsoft.Toolkit.Uwp.UI.Controls.ColorPickerConverters.ContrastBrushConverter : object {
    [CompilerGeneratedAttribute]
private byte <AlphaThreshold>k__BackingField;
    public byte AlphaThreshold { get; public set; }
    [CompilerGeneratedAttribute]
public byte get_AlphaThreshold();
    [CompilerGeneratedAttribute]
public void set_AlphaThreshold(byte value);
    public sealed virtual object Convert(object value, Type targetType, object parameter, string language);
    public sealed virtual object ConvertBack(object value, Type targetType, object parameter, string language);
    private bool UseLightContrastColor(Color displayedColor);
}
internal class Microsoft.Toolkit.Uwp.UI.Controls.ColorPickerRenderingHelpers : object {
    [AsyncStateMachineAttribute("Microsoft.Toolkit.Uwp.UI.Controls.ColorPickerRenderingHelpers/<CreateChannelBitmapAsync>d__0")]
public static Task`1<Byte[]> CreateChannelBitmapAsync(int width, int height, Orientation orientation, ColorRepresentation colorRepresentation, ColorChannel channel, HsvColor baseHsvColor, Nullable`1<Color> checkerColor, bool isAlphaMaxForced, bool isSaturationValueMaxForced);
    [AsyncStateMachineAttribute("Microsoft.Toolkit.Uwp.UI.Controls.ColorPickerRenderingHelpers/<CreateCheckeredBitmapAsync>d__1")]
public static Task`1<Byte[]> CreateCheckeredBitmapAsync(int width, int height, Color checkerColor);
    [AsyncStateMachineAttribute("Microsoft.Toolkit.Uwp.UI.Controls.ColorPickerRenderingHelpers/<BitmapToBrushAsync>d__2")]
public static Task`1<ImageBrush> BitmapToBrushAsync(Byte[] bitmap, int width, int height);
    [AsyncStateMachineAttribute("Microsoft.Toolkit.Uwp.UI.Controls.ColorPickerRenderingHelpers/<UpdateBorderBackgroundWithCheckerAsync>d__3")]
public static Task UpdateBorderBackgroundWithCheckerAsync(Border border, Color color);
}
[EditorBrowsableAttribute("2")]
public enum Microsoft.Toolkit.Uwp.UI.Controls.ColorRepresentation : Enum {
    public int value__;
    public static ColorRepresentation Hsva;
    public static ColorRepresentation Rgba;
}
[ExtensionAttribute]
internal static class Microsoft.Toolkit.Uwp.UI.Controls.ControlHelpers : object {
    [CompilerGeneratedAttribute]
private static bool <IsXamlRootAvailable>k__BackingField;
    internal static bool IsXamlRootAvailable { get; }
    private static ControlHelpers();
    [ExtensionAttribute]
public static ContainerVisual GetVisual(UIElement element);
    [CompilerGeneratedAttribute]
internal static bool get_IsXamlRootAvailable();
}
public class Microsoft.Toolkit.Uwp.UI.Controls.FluentColorPalette : object {
    private static Color[0...,0...] colorChart;
    public static int DefaultShadeIndex;
    public int ColorCount { get; }
    public int ShadeCount { get; }
    private static FluentColorPalette();
    public sealed virtual int get_ColorCount();
    public sealed virtual int get_ShadeCount();
    public sealed virtual Color GetColor(int colorIndex, int shadeIndex);
}
public interface Microsoft.Toolkit.Uwp.UI.Controls.IColorPalette {
    public int ColorCount { get; }
    public int ShadeCount { get; }
    public abstract virtual int get_ColorCount();
    public abstract virtual int get_ShadeCount();
    public abstract virtual Color GetColor(int colorIndex, int shadeIndex);
}
[DefaultMemberAttribute("Item")]
internal class Microsoft.Toolkit.Uwp.UI.Controls.InterspersedObservableCollection : object {
    [CompilerGeneratedAttribute]
private IList <ItemsSource>k__BackingField;
    private Dictionary`2<Nullable`1<int>, object> _interspersedObjects;
    private bool _isInsertingOriginal;
    [CompilerGeneratedAttribute]
private NotifyCollectionChangedEventHandler CollectionChanged;
    public IList ItemsSource { get; private set; }
    public bool IsFixedSize { get; }
    public bool IsReadOnly { get; }
    public int Count { get; }
    public bool IsSynchronized { get; }
    public object SyncRoot { get; }
    public object Item { get; public set; }
    public InterspersedObservableCollection(object itemsSource);
    [CompilerGeneratedAttribute]
public IList get_ItemsSource();
    [CompilerGeneratedAttribute]
private void set_ItemsSource(IList value);
    public sealed virtual bool get_IsFixedSize();
    public sealed virtual bool get_IsReadOnly();
    public sealed virtual int get_Count();
    public sealed virtual bool get_IsSynchronized();
    public sealed virtual object get_SyncRoot();
    public sealed virtual object get_Item(int index);
    public sealed virtual void set_Item(int index, object value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_CollectionChanged(NotifyCollectionChangedEventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_CollectionChanged(NotifyCollectionChangedEventHandler value);
    private void ItemsSource_CollectionChanged(object source, NotifyCollectionChangedEventArgs eventArgs);
    private void MoveKeysForward(int pivot, int amount);
    private void MoveKeysBackward(int pivot, int amount);
    private void ReadjustKeys();
    private int ToInnerIndex(int outerIndex);
    private int ToOuterIndex(int innerIndex);
    private int ToOuterIndexAfterRemoval(int innerIndexToProject);
    public sealed virtual void Insert(int index, object obj);
    public void InsertAt(int outerIndex, object obj);
    [IteratorStateMachineAttribute("Microsoft.Toolkit.Uwp.UI.Controls.InterspersedObservableCollection/<GetEnumerator>d__32")]
public sealed virtual IEnumerator`1<object> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    public sealed virtual int Add(object value);
    public sealed virtual void Clear();
    public sealed virtual bool Contains(object value);
    private KeyValuePair`2<Nullable`1<int>, object> ItemKeySearch(object value);
    public sealed virtual int IndexOf(object value);
    public sealed virtual void Remove(object value);
    public sealed virtual void RemoveAt(int index);
    public sealed virtual void CopyTo(Array array, int index);
    [CompilerGeneratedAttribute]
internal static void <.ctor>g__ThrowArgumentException|22_0();
    [CompilerGeneratedAttribute]
internal static void <ToInnerIndex>g__ThrowArgumentOutOfRangeException|27_1();
    [CompilerGeneratedAttribute]
internal static void <ToInnerIndex>g__ThrowArgumentException|27_2();
    [CompilerGeneratedAttribute]
internal static void <ToOuterIndex>g__ThrowArgumentOutOfRangeException|28_1();
    [CompilerGeneratedAttribute]
internal static void <ToOuterIndexAfterRemoval>g__ThrowArgumentOutOfRangeException|29_1();
}
public interface Microsoft.Toolkit.Uwp.UI.Controls.ITokenStringContainer {
    public string Text { get; public set; }
    public bool IsLast { get; }
    public abstract virtual string get_Text();
    public abstract virtual void set_Text(string value);
    public abstract virtual bool get_IsLast();
}
internal class Microsoft.Toolkit.Uwp.UI.Controls.Microsoft_Toolkit_Uwp_UI_Controls_Input_XamlTypeInfo.Activator : MulticastDelegate {
    public Activator(object object, IntPtr method);
    public virtual object Invoke();
    public virtual IAsyncResult BeginInvoke(AsyncCallback callback, object object);
    public virtual object EndInvoke(IAsyncResult result);
}
internal class Microsoft.Toolkit.Uwp.UI.Controls.Microsoft_Toolkit_Uwp_UI_Controls_Input_XamlTypeInfo.AddToCollection : MulticastDelegate {
    public AddToCollection(object object, IntPtr method);
    public virtual void Invoke(object instance, object item);
    public virtual IAsyncResult BeginInvoke(object instance, object item, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
internal class Microsoft.Toolkit.Uwp.UI.Controls.Microsoft_Toolkit_Uwp_UI_Controls_Input_XamlTypeInfo.AddToDictionary : MulticastDelegate {
    public AddToDictionary(object object, IntPtr method);
    public virtual void Invoke(object instance, object key, object item);
    public virtual IAsyncResult BeginInvoke(object instance, object key, object item, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
internal class Microsoft.Toolkit.Uwp.UI.Controls.Microsoft_Toolkit_Uwp_UI_Controls_Input_XamlTypeInfo.BoxInstanceMethod : MulticastDelegate {
    public BoxInstanceMethod(object object, IntPtr method);
    public virtual object Invoke(object instance);
    public virtual IAsyncResult BeginInvoke(object instance, AsyncCallback callback, object object);
    public virtual object EndInvoke(IAsyncResult result);
}
internal class Microsoft.Toolkit.Uwp.UI.Controls.Microsoft_Toolkit_Uwp_UI_Controls_Input_XamlTypeInfo.CreateFromStringMethod : MulticastDelegate {
    public CreateFromStringMethod(object object, IntPtr method);
    public virtual object Invoke(string args);
    public virtual IAsyncResult BeginInvoke(string args, AsyncCallback callback, object object);
    public virtual object EndInvoke(IAsyncResult result);
}
internal class Microsoft.Toolkit.Uwp.UI.Controls.Microsoft_Toolkit_Uwp_UI_Controls_Input_XamlTypeInfo.Getter : MulticastDelegate {
    public Getter(object object, IntPtr method);
    public virtual object Invoke(object instance);
    public virtual IAsyncResult BeginInvoke(object instance, AsyncCallback callback, object object);
    public virtual object EndInvoke(IAsyncResult result);
}
internal class Microsoft.Toolkit.Uwp.UI.Controls.Microsoft_Toolkit_Uwp_UI_Controls_Input_XamlTypeInfo.Setter : MulticastDelegate {
    public Setter(object object, IntPtr method);
    public virtual void Invoke(object instance, object value);
    public virtual IAsyncResult BeginInvoke(object instance, object value, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
[GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks", " 10.0.19041.685")]
[DebuggerNonUserCodeAttribute]
internal class Microsoft.Toolkit.Uwp.UI.Controls.Microsoft_Toolkit_Uwp_UI_Controls_Input_XamlTypeInfo.XamlMember : object {
    private XamlTypeInfoProvider _provider;
    private string _name;
    private bool _isAttachable;
    private bool _isDependencyProperty;
    private bool _isReadOnly;
    private string _typeName;
    private string _targetTypeName;
    [CompilerGeneratedAttribute]
private Getter <Getter>k__BackingField;
    [CompilerGeneratedAttribute]
private Setter <Setter>k__BackingField;
    public string Name { get; }
    public IXamlType Type { get; }
    public IXamlType TargetType { get; }
    public bool IsAttachable { get; }
    public bool IsDependencyProperty { get; }
    public bool IsReadOnly { get; }
    public Getter Getter { get; public set; }
    public Setter Setter { get; public set; }
    public XamlMember(XamlTypeInfoProvider provider, string name, string typeName);
    public sealed virtual string get_Name();
    public sealed virtual IXamlType get_Type();
    public void SetTargetTypeName(string targetTypeName);
    public sealed virtual IXamlType get_TargetType();
    public void SetIsAttachable();
    public sealed virtual bool get_IsAttachable();
    public void SetIsDependencyProperty();
    public sealed virtual bool get_IsDependencyProperty();
    public void SetIsReadOnly();
    public sealed virtual bool get_IsReadOnly();
    [CompilerGeneratedAttribute]
public Getter get_Getter();
    [CompilerGeneratedAttribute]
public void set_Getter(Getter value);
    public sealed virtual object GetValue(object instance);
    [CompilerGeneratedAttribute]
public Setter get_Setter();
    [CompilerGeneratedAttribute]
public void set_Setter(Setter value);
    public sealed virtual void SetValue(object instance, object value);
}
[GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks", " 10.0.19041.685")]
[DebuggerNonUserCodeAttribute]
public class Microsoft.Toolkit.Uwp.UI.Controls.Microsoft_Toolkit_Uwp_UI_Controls_Input_XamlTypeInfo.XamlMetaDataProvider : object {
    private XamlTypeInfoProvider _provider;
    private XamlTypeInfoProvider Provider { get; }
    private XamlTypeInfoProvider get_Provider();
    public sealed virtual IXamlType GetXamlType(Type type);
    public sealed virtual IXamlType GetXamlType(string fullName);
    public sealed virtual XmlnsDefinition[] GetXmlnsDefinitions();
}
[GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks", " 10.0.19041.685")]
[DebuggerNonUserCodeAttribute]
internal class Microsoft.Toolkit.Uwp.UI.Controls.Microsoft_Toolkit_Uwp_UI_Controls_Input_XamlTypeInfo.XamlSystemBaseType : object {
    private string _fullName;
    private Type _underlyingType;
    public string FullName { get; }
    public Type UnderlyingType { get; }
    public IXamlType BaseType { get; }
    public IXamlMember ContentProperty { get; }
    public bool IsArray { get; }
    public bool IsCollection { get; }
    public bool IsConstructible { get; }
    public bool IsDictionary { get; }
    public bool IsMarkupExtension { get; }
    public bool IsBindable { get; }
    public bool IsReturnTypeStub { get; }
    public bool IsLocalType { get; }
    public IXamlType ItemType { get; }
    public IXamlType KeyType { get; }
    public XamlSystemBaseType(string fullName, Type underlyingType);
    public sealed virtual string get_FullName();
    public sealed virtual Type get_UnderlyingType();
    public virtual IXamlType get_BaseType();
    public virtual IXamlMember get_ContentProperty();
    public virtual IXamlMember GetMember(string name);
    public virtual bool get_IsArray();
    public virtual bool get_IsCollection();
    public virtual bool get_IsConstructible();
    public virtual bool get_IsDictionary();
    public virtual bool get_IsMarkupExtension();
    public virtual bool get_IsBindable();
    public virtual bool get_IsReturnTypeStub();
    public virtual bool get_IsLocalType();
    public virtual IXamlType get_ItemType();
    public virtual IXamlType get_KeyType();
    public virtual object ActivateInstance();
    public virtual void AddToMap(object instance, object key, object item);
    public virtual void AddToVector(object instance, object item);
    public virtual void RunInitializer();
    public virtual object CreateFromString(string input);
}
[GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks", " 10.0.19041.685")]
[DebuggerNonUserCodeAttribute]
internal class Microsoft.Toolkit.Uwp.UI.Controls.Microsoft_Toolkit_Uwp_UI_Controls_Input_XamlTypeInfo.XamlTypeInfoProvider : object {
    private Dictionary`2<string, IXamlType> _xamlTypeCacheByName;
    private Dictionary`2<Type, IXamlType> _xamlTypeCacheByType;
    private Dictionary`2<string, IXamlMember> _xamlMembers;
    private String[] _typeNameTable;
    private Type[] _typeTable;
    private List`1<IXamlMetadataProvider> _otherProviders;
    private List`1<IXamlMetadataProvider> OtherProviders { get; }
    public IXamlType GetXamlTypeByType(Type type);
    public IXamlType GetXamlTypeByName(string typeName);
    public IXamlMember GetMemberByLongName(string longMemberName);
    private void InitTypeTables();
    private int LookupTypeIndexByName(string typeName);
    private int LookupTypeIndexByType(Type type);
    private object Activate_0_ColorPicker();
    private object Activate_1_ColorPicker();
    private object Activate_3_ObservableCollection();
    private object Activate_4_Collection();
    private object Activate_17_ContrastBrushConverter();
    private object Activate_18_ColorToColorShadeConverter();
    private object Activate_19_ColorToDisplayNameConverter();
    private object Activate_20_ColorToHexConverter();
    private object Activate_21_SwitchPresenter();
    private object Activate_23_CaseCollection();
    private object Activate_26_Case();
    private object Activate_30_ColorPickerSlider();
    private object Activate_36_UniformGrid();
    private object Activate_44_ColorSpectrum();
    private object Activate_46_ColorPickerButton();
    private object Activate_50_RadialGauge();
    private object Activate_54_RangeSelector();
    private object Activate_55_RemoteSystemKindToSymbolConverter();
    private object Activate_56_RemoteDevicePicker();
    private object Activate_59_RichSuggestBox();
    private object Activate_71_TokenizingTextBoxStyleSelector();
    private object Activate_73_TokenizingTextBox();
    private object Activate_77_WrapPanel();
    private object Activate_80_TokenizingTextBoxItem();
    private object Activate_83_TreeViewNode();
    private void VectorAdd_3_ObservableCollection(object instance, object item);
    private void VectorAdd_4_Collection(object instance, object item);
    private void VectorAdd_23_CaseCollection(object instance, object item);
    private void VectorAdd_67_ReadOnlyObservableCollection(object instance, object item);
    private void VectorAdd_68_ReadOnlyCollection(object instance, object item);
    private void VectorAdd_84_IList(object instance, object item);
    private IXamlType CreateXamlType(int typeIndex);
    private List`1<IXamlMetadataProvider> get_OtherProviders();
    private IXamlType CheckOtherMetadataProvidersForName(string typeName);
    private IXamlType CheckOtherMetadataProvidersForType(Type type);
    private object get_0_ColorPicker_CustomPaletteColors(object instance);
    private object get_1_Color_A(object instance);
    private void set_1_Color_A(object instance, object Value);
    private object get_2_Color_B(object instance);
    private void set_2_Color_B(object instance, object Value);
    private object get_3_Color_G(object instance);
    private void set_3_Color_G(object instance, object Value);
    private object get_4_Color_R(object instance);
    private void set_4_Color_R(object instance, object Value);
    private object get_5_ColorPicker_CustomPaletteColumnCount(object instance);
    private void set_5_ColorPicker_CustomPaletteColumnCount(object instance, object Value);
    private object get_6_ColorPicker_CustomPalette(object instance);
    private void set_6_ColorPicker_CustomPalette(object instance, object Value);
    private object get_7_ColorPicker_IsColorPaletteVisible(object instance);
    private void set_7_ColorPicker_IsColorPaletteVisible(object instance, object Value);
    private object get_8_ColorPicker_PreviousColor(object instance);
    private void set_8_ColorPicker_PreviousColor(object instance, object Value);
    private object get_9_ColorPicker_MinValue(object instance);
    private void set_9_ColorPicker_MinValue(object instance, object Value);
    private object get_10_ColorPicker_MinSaturation(object instance);
    private void set_10_ColorPicker_MinSaturation(object instance, object Value);
    private object get_11_ColorPicker_MinHue(object instance);
    private void set_11_ColorPicker_MinHue(object instance, object Value);
    private object get_12_ColorPicker_MaxValue(object instance);
    private void set_12_ColorPicker_MaxValue(object instance, object Value);
    private object get_13_ColorPicker_MaxSaturation(object instance);
    private void set_13_ColorPicker_MaxSaturation(object instance, object Value);
    private object get_14_ColorPicker_MaxHue(object instance);
    private void set_14_ColorPicker_MaxHue(object instance, object Value);
    private object get_15_ColorPicker_IsMoreButtonVisible(object instance);
    private void set_15_ColorPicker_IsMoreButtonVisible(object instance, object Value);
    private object get_16_ColorPicker_IsHexInputVisible(object instance);
    private void set_16_ColorPicker_IsHexInputVisible(object instance, object Value);
    private object get_17_ColorPicker_IsColorSpectrumVisible(object instance);
    private void set_17_ColorPicker_IsColorSpectrumVisible(object instance, object Value);
    private object get_18_ColorPicker_IsColorSliderVisible(object instance);
    private void set_18_ColorPicker_IsColorSliderVisible(object instance, object Value);
    private object get_19_ColorPicker_IsColorPreviewVisible(object instance);
    private void set_19_ColorPicker_IsColorPreviewVisible(object instance, object Value);
    private object get_20_ColorPicker_IsColorChannelTextInputVisible(object instance);
    private void set_20_ColorPicker_IsColorChannelTextInputVisible(object instance, object Value);
    private object get_21_ColorPicker_IsAlphaTextInputVisible(object instance);
    private void set_21_ColorPicker_IsAlphaTextInputVisible(object instance, object Value);
    private object get_22_ColorPicker_IsAlphaSliderVisible(object instance);
    private void set_22_ColorPicker_IsAlphaSliderVisible(object instance, object Value);
    private object get_23_ColorPicker_IsAlphaEnabled(object instance);
    private void set_23_ColorPicker_IsAlphaEnabled(object instance, object Value);
    private object get_24_ColorPicker_ColorSpectrumShape(object instance);
    private void set_24_ColorPicker_ColorSpectrumShape(object instance, object Value);
    private object get_25_ColorPicker_ColorSpectrumComponents(object instance);
    private void set_25_ColorPicker_ColorSpectrumComponents(object instance, object Value);
    private object get_26_ColorPicker_Color(object instance);
    private void set_26_ColorPicker_Color(object instance, object Value);
    private object get_27_ColorPicker_Orientation(object instance);
    private void set_27_ColorPicker_Orientation(object instance, object Value);
    private object get_28_ContrastBrushConverter_AlphaThreshold(object instance);
    private void set_28_ContrastBrushConverter_AlphaThreshold(object instance, object Value);
    private object get_29_SwitchPresenter_SwitchCases(object instance);
    private void set_29_SwitchPresenter_SwitchCases(object instance, object Value);
    private object get_30_SwitchPresenter_Value(object instance);
    private void set_30_SwitchPresenter_Value(object instance, object Value);
    private object get_31_SwitchPresenter_CurrentCase(object instance);
    private object get_32_Case_Content(object instance);
    private void set_32_Case_Content(object instance, object Value);
    private object get_33_SwitchPresenter_TargetType(object instance);
    private void set_33_SwitchPresenter_TargetType(object instance, object Value);
    private object get_34_Case_Value(object instance);
    private void set_34_Case_Value(object instance, object Value);
    private object get_35_Case_IsDefault(object instance);
    private void set_35_Case_IsDefault(object instance, object Value);
    private object get_36_ColorPickerSlider_DefaultForeground(object instance);
    private void set_36_ColorPickerSlider_DefaultForeground(object instance, object Value);
    private object get_37_ColorPickerSlider_Color(object instance);
    private void set_37_ColorPickerSlider_Color(object instance, object Value);
    private object get_38_ColorPickerSlider_ColorChannel(object instance);
    private void set_38_ColorPickerSlider_ColorChannel(object instance, object Value);
    private object get_39_ColorPickerSlider_ColorRepresentation(object instance);
    private void set_39_ColorPickerSlider_ColorRepresentation(object instance, object Value);
    private object get_40_ColorPickerSlider_HsvColor(object instance);
    private void set_40_ColorPickerSlider_HsvColor(object instance, object Value);
    private object get_41_ColorPickerSlider_IsAlphaMaxForced(object instance);
    private void set_41_ColorPickerSlider_IsAlphaMaxForced(object instance, object Value);
    private object get_42_ColorPickerSlider_IsAutoUpdatingEnabled(object instance);
    private void set_42_ColorPickerSlider_IsAutoUpdatingEnabled(object instance, object Value);
    private object get_43_ColorPickerSlider_IsSaturationValueMaxForced(object instance);
    private void set_43_ColorPickerSlider_IsSaturationValueMaxForced(object instance, object Value);
    private object get_44_UniformGrid_Rows(object instance);
    private void set_44_UniformGrid_Rows(object instance, object Value);
    private object get_45_UniformGrid_Columns(object instance);
    private void set_45_UniformGrid_Columns(object instance, object Value);
    private object get_46_UniformGrid_FirstColumn(object instance);
    private void set_46_UniformGrid_FirstColumn(object instance, object Value);
    private object get_47_UniformGrid_Orientation(object instance);
    private void set_47_UniformGrid_Orientation(object instance, object Value);
    private object get_48_UniformGrid_AutoLayout(object instance);
    private void set_48_UniformGrid_AutoLayout(object instance, object Value);
    private object get_49_FrameworkElementExtensions_AncestorType(object instance);
    private void set_49_FrameworkElementExtensions_AncestorType(object instance, object Value);
    private object get_50_FrameworkElementExtensions_EnableActualSizeBinding(object instance);
    private void set_50_FrameworkElementExtensions_EnableActualSizeBinding(object instance, object Value);
    private object get_51_FrameworkElementExtensions_ActualHeight(object instance);
    private void set_51_FrameworkElementExtensions_ActualHeight(object instance, object Value);
    private object get_52_FrameworkElementExtensions_ActualWidth(object instance);
    private void set_52_FrameworkElementExtensions_ActualWidth(object instance, object Value);
    private object get_53_FrameworkElementExtensions_Cursor(object instance);
    private void set_53_FrameworkElementExtensions_Cursor(object instance, object Value);
    private object get_54_FrameworkElementExtensions_Ancestor(object instance);
    private void set_54_FrameworkElementExtensions_Ancestor(object instance, object Value);
    private object get_55_ColorSpectrum_Components(object instance);
    private void set_55_ColorSpectrum_Components(object instance, object Value);
    private object get_56_ColorSpectrum_MaxHue(object instance);
    private void set_56_ColorSpectrum_MaxHue(object instance, object Value);
    private object get_57_ColorSpectrum_MaxSaturation(object instance);
    private void set_57_ColorSpectrum_MaxSaturation(object instance, object Value);
    private object get_58_ColorSpectrum_MaxValue(object instance);
    private void set_58_ColorSpectrum_MaxValue(object instance, object Value);
    private object get_59_ColorSpectrum_MinHue(object instance);
    private void set_59_ColorSpectrum_MinHue(object instance, object Value);
    private object get_60_ColorSpectrum_MinSaturation(object instance);
    private void set_60_ColorSpectrum_MinSaturation(object instance, object Value);
    private object get_61_ColorSpectrum_MinValue(object instance);
    private void set_61_ColorSpectrum_MinValue(object instance, object Value);
    private object get_62_ColorSpectrum_Shape(object instance);
    private void set_62_ColorSpectrum_Shape(object instance, object Value);
    private object get_63_ColorSpectrum_HsvColor(object instance);
    private void set_63_ColorSpectrum_HsvColor(object instance, object Value);
    private object get_64_ColorSpectrum_Color(object instance);
    private void set_64_ColorSpectrum_Color(object instance, object Value);
    private object get_65_ColorPickerButton_SelectedColor(object instance);
    private void set_65_ColorPickerButton_SelectedColor(object instance, object Value);
    private object get_66_ColorPickerButton_FlyoutPresenterStyle(object instance);
    private void set_66_ColorPickerButton_FlyoutPresenterStyle(object instance, object Value);
    private object get_67_ColorPickerButton_ColorPicker(object instance);
    private object get_68_ColorPickerButton_ColorPickerStyle(object instance);
    private void set_68_ColorPickerButton_ColorPickerStyle(object instance, object Value);
    private object get_69_RadialGauge_NeedleBrush(object instance);
    private void set_69_RadialGauge_NeedleBrush(object instance, object Value);
    private object get_70_RadialGauge_TrailBrush(object instance);
    private void set_70_RadialGauge_TrailBrush(object instance, object Value);
    private object get_71_RadialGauge_ScaleBrush(object instance);
    private void set_71_RadialGauge_ScaleBrush(object instance, object Value);
    private object get_72_RadialGauge_ScaleTickBrush(object instance);
    private void set_72_RadialGauge_ScaleTickBrush(object instance, object Value);
    private object get_73_RadialGauge_TickBrush(object instance);
    private void set_73_RadialGauge_TickBrush(object instance, object Value);
    private object get_74_RadialGauge_StepSize(object instance);
    private void set_74_RadialGauge_StepSize(object instance, object Value);
    private object get_75_RadialGauge_IsInteractive(object instance);
    private void set_75_RadialGauge_IsInteractive(object instance, object Value);
    private object get_76_RadialGauge_ScaleWidth(object instance);
    private void set_76_RadialGauge_ScaleWidth(object instance, object Value);
    private object get_77_RadialGauge_Unit(object instance);
    private void set_77_RadialGauge_Unit(object instance, object Value);
    private object get_78_RadialGauge_ValueStringFormat(object instance);
    private void set_78_RadialGauge_ValueStringFormat(object instance, object Value);
    private object get_79_RadialGauge_TickSpacing(object instance);
    private void set_79_RadialGauge_TickSpacing(object instance, object Value);
    private object get_80_RadialGauge_NeedleLength(object instance);
    private void set_80_RadialGauge_NeedleLength(object instance, object Value);
    private object get_81_RadialGauge_NeedleWidth(object instance);
    private void set_81_RadialGauge_NeedleWidth(object instance, object Value);
    private object get_82_RadialGauge_ScalePadding(object instance);
    private void set_82_RadialGauge_ScalePadding(object instance, object Value);
    private object get_83_RadialGauge_ScaleTickWidth(object instance);
    private void set_83_RadialGauge_ScaleTickWidth(object instance, object Value);
    private object get_84_RadialGauge_TickLength(object instance);
    private void set_84_RadialGauge_TickLength(object instance, object Value);
    private object get_85_RadialGauge_TickWidth(object instance);
    private void set_85_RadialGauge_TickWidth(object instance, object Value);
    private object get_86_RadialGauge_MinAngle(object instance);
    private void set_86_RadialGauge_MinAngle(object instance, object Value);
    private object get_87_RadialGauge_MaxAngle(object instance);
    private void set_87_RadialGauge_MaxAngle(object instance, object Value);
    private object get_88_RangeSelector_Minimum(object instance);
    private void set_88_RangeSelector_Minimum(object instance, object Value);
    private object get_89_RangeSelector_Maximum(object instance);
    private void set_89_RangeSelector_Maximum(object instance, object Value);
    private object get_90_RangeSelector_RangeStart(object instance);
    private void set_90_RangeSelector_RangeStart(object instance, object Value);
    private object get_91_RangeSelector_RangeEnd(object instance);
    private void set_91_RangeSelector_RangeEnd(object instance, object Value);
    private object get_92_RangeSelector_StepFrequency(object instance);
    private void set_92_RangeSelector_StepFrequency(object instance, object Value);
    private object get_93_RemoteDevicePicker_SelectionMode(object instance);
    private void set_93_RemoteDevicePicker_SelectionMode(object instance, object Value);
    private object get_94_RemoteDevicePicker_ShowAdvancedFilters(object instance);
    private void set_94_RemoteDevicePicker_ShowAdvancedFilters(object instance, object Value);
    private object get_95_RichSuggestBox_Prefixes(object instance);
    private void set_95_RichSuggestBox_Prefixes(object instance, object Value);
    private object get_96_RichSuggestBox_TokenForeground(object instance);
    private void set_96_RichSuggestBox_TokenForeground(object instance, object Value);
    private object get_97_RichSuggestBox_TokenBackground(object instance);
    private void set_97_RichSuggestBox_TokenBackground(object instance, object Value);
    private object get_98_RichSuggestBox_RichEditBoxStyle(object instance);
    private void set_98_RichSuggestBox_RichEditBoxStyle(object instance, object Value);
    private object get_99_RichSuggestBox_PopupCornerRadius(object instance);
    private void set_99_RichSuggestBox_PopupCornerRadius(object instance, object Value);
    private object get_100_RichSuggestBox_ClipboardCopyFormat(object instance);
    private void set_100_RichSuggestBox_ClipboardCopyFormat(object instance, object Value);
    private object get_101_RichSuggestBox_ClipboardPasteFormat(object instance);
    private void set_101_RichSuggestBox_ClipboardPasteFormat(object instance, object Value);
    private object get_102_RichSuggestBox_DisabledFormattingAccelerators(object instance);
    private void set_102_RichSuggestBox_DisabledFormattingAccelerators(object instance, object Value);
    private object get_103_RichSuggestBox_PlaceholderText(object instance);
    private void set_103_RichSuggestBox_PlaceholderText(object instance, object Value);
    private object get_104_RichSuggestBox_Header(object instance);
    private void set_104_RichSuggestBox_Header(object instance, object Value);
    private object get_105_RichSuggestBox_HeaderTemplate(object instance);
    private void set_105_RichSuggestBox_HeaderTemplate(object instance, object Value);
    private object get_106_RichSuggestBox_Description(object instance);
    private void set_106_RichSuggestBox_Description(object instance, object Value);
    private object get_107_RichSuggestBox_PopupPlacement(object instance);
    private void set_107_RichSuggestBox_PopupPlacement(object instance, object Value);
    private object get_108_RichSuggestBox_PopupHeader(object instance);
    private void set_108_RichSuggestBox_PopupHeader(object instance, object Value);
    private object get_109_RichSuggestBox_PopupHeaderTemplate(object instance);
    private void set_109_RichSuggestBox_PopupHeaderTemplate(object instance, object Value);
    private object get_110_RichSuggestBox_PopupFooter(object instance);
    private void set_110_RichSuggestBox_PopupFooter(object instance, object Value);
    private object get_111_RichSuggestBox_PopupFooterTemplate(object instance);
    private void set_111_RichSuggestBox_PopupFooterTemplate(object instance, object Value);
    private object get_112_RichSuggestBox_TextDocument(object instance);
    private object get_113_RichSuggestBox_HorizontalOffset(object instance);
    private object get_114_RichSuggestBox_VerticalOffset(object instance);
    private object get_115_RichSuggestBox_Tokens(object instance);
    private object get_116_RichSuggestToken_Id(object instance);
    private object get_117_RichSuggestToken_DisplayText(object instance);
    private object get_118_RichSuggestToken_Item(object instance);
    private void set_118_RichSuggestToken_Item(object instance, object Value);
    private object get_119_RichSuggestToken_RangeStart(object instance);
    private object get_120_RichSuggestToken_RangeEnd(object instance);
    private object get_121_RichSuggestToken_Position(object instance);
    private object get_122_TokenizingTextBoxStyleSelector_TextStyle(object instance);
    private void set_122_TokenizingTextBoxStyleSelector_TextStyle(object instance, object Value);
    private object get_123_TokenizingTextBoxStyleSelector_TokenStyle(object instance);
    private void set_123_TokenizingTextBoxStyleSelector_TokenStyle(object instance, object Value);
    private object get_124_TokenizingTextBox_AutoSuggestBoxTextBoxStyle(object instance);
    private void set_124_TokenizingTextBox_AutoSuggestBoxTextBoxStyle(object instance, object Value);
    private object get_125_TokenizingTextBox_TokenSpacing(object instance);
    private void set_125_TokenizingTextBox_TokenSpacing(object instance, object Value);
    private object get_126_TokenizingTextBox_AutoSuggestBoxStyle(object instance);
    private void set_126_TokenizingTextBox_AutoSuggestBoxStyle(object instance, object Value);
    private object get_127_TokenizingTextBox_TextMemberPath(object instance);
    private void set_127_TokenizingTextBox_TextMemberPath(object instance, object Value);
    private object get_128_TokenizingTextBox_TokenItemTemplate(object instance);
    private void set_128_TokenizingTextBox_TokenItemTemplate(object instance, object Value);
    private object get_129_TokenizingTextBox_TokenItemTemplateSelector(object instance);
    private void set_129_TokenizingTextBox_TokenItemTemplateSelector(object instance, object Value);
    private object get_130_TokenizingTextBox_TokenDelimiter(object instance);
    private void set_130_TokenizingTextBox_TokenDelimiter(object instance, object Value);
    private object get_131_TokenizingTextBox_PlaceholderText(object instance);
    private void set_131_TokenizingTextBox_PlaceholderText(object instance, object Value);
    private object get_132_TokenizingTextBox_QueryIcon(object instance);
    private void set_132_TokenizingTextBox_QueryIcon(object instance, object Value);
    private object get_133_TokenizingTextBox_Text(object instance);
    private void set_133_TokenizingTextBox_Text(object instance, object Value);
    private object get_134_TokenizingTextBox_SuggestedItemsSource(object instance);
    private void set_134_TokenizingTextBox_SuggestedItemsSource(object instance, object Value);
    private object get_135_TokenizingTextBox_SuggestedItemTemplate(object instance);
    private void set_135_TokenizingTextBox_SuggestedItemTemplate(object instance, object Value);
    private object get_136_TokenizingTextBox_SuggestedItemTemplateSelector(object instance);
    private void set_136_TokenizingTextBox_SuggestedItemTemplateSelector(object instance, object Value);
    private object get_137_TokenizingTextBox_SuggestedItemContainerStyle(object instance);
    private void set_137_TokenizingTextBox_SuggestedItemContainerStyle(object instance, object Value);
    private object get_138_TokenizingTextBox_TabNavigateBackOnArrow(object instance);
    private void set_138_TokenizingTextBox_TabNavigateBackOnArrow(object instance, object Value);
    private object get_139_TokenizingTextBox_SelectedTokenText(object instance);
    private object get_140_TokenizingTextBox_MaximumTokens(object instance);
    private void set_140_TokenizingTextBox_MaximumTokens(object instance, object Value);
    private object get_141_WrapPanel_HorizontalSpacing(object instance);
    private void set_141_WrapPanel_HorizontalSpacing(object instance, object Value);
    private object get_142_WrapPanel_VerticalSpacing(object instance);
    private void set_142_WrapPanel_VerticalSpacing(object instance, object Value);
    private object get_143_WrapPanel_StretchChild(object instance);
    private void set_143_WrapPanel_StretchChild(object instance, object Value);
    private object get_144_WrapPanel_Orientation(object instance);
    private void set_144_WrapPanel_Orientation(object instance, object Value);
    private object get_145_WrapPanel_Padding(object instance);
    private void set_145_WrapPanel_Padding(object instance, object Value);
    private object get_146_TokenizingTextBoxItem_ClearButtonStyle(object instance);
    private void set_146_TokenizingTextBoxItem_ClearButtonStyle(object instance, object Value);
    private object get_147_IconSource_Foreground(object instance);
    private void set_147_IconSource_Foreground(object instance, object Value);
    private object get_148_TreeViewNode_IsExpanded(object instance);
    private void set_148_TreeViewNode_IsExpanded(object instance, object Value);
    private object get_149_TreeViewNode_HasUnrealizedChildren(object instance);
    private void set_149_TreeViewNode_HasUnrealizedChildren(object instance, object Value);
    private object get_150_TreeViewNode_Content(object instance);
    private void set_150_TreeViewNode_Content(object instance, object Value);
    private object get_151_TreeViewNode_Children(object instance);
    private object get_152_TreeViewNode_Depth(object instance);
    private object get_153_TreeViewNode_HasChildren(object instance);
    private object get_154_TreeViewNode_Parent(object instance);
    private IXamlMember CreateXamlMember(string longMemberName);
}
[GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks", " 10.0.19041.685")]
[DebuggerNonUserCodeAttribute]
internal class Microsoft.Toolkit.Uwp.UI.Controls.Microsoft_Toolkit_Uwp_UI_Controls_Input_XamlTypeInfo.XamlUserType : XamlSystemBaseType {
    private XamlTypeInfoProvider _provider;
    private IXamlType _baseType;
    private bool _isArray;
    private bool _isMarkupExtension;
    private bool _isBindable;
    private bool _isReturnTypeStub;
    private bool _isLocalType;
    private IXamlType _boxedType;
    private string _contentPropertyName;
    private string _itemTypeName;
    private string _keyTypeName;
    private Dictionary`2<string, string> _memberNames;
    private Dictionary`2<string, object> _enumValues;
    [CompilerGeneratedAttribute]
private Activator <Activator>k__BackingField;
    [CompilerGeneratedAttribute]
private AddToCollection <CollectionAdd>k__BackingField;
    [CompilerGeneratedAttribute]
private AddToDictionary <DictionaryAdd>k__BackingField;
    [CompilerGeneratedAttribute]
private CreateFromStringMethod <CreateFromStringMethod>k__BackingField;
    [CompilerGeneratedAttribute]
private BoxInstanceMethod <BoxInstance>k__BackingField;
    public IXamlType BaseType { get; }
    public bool IsArray { get; }
    public bool IsCollection { get; }
    public bool IsConstructible { get; }
    public bool IsDictionary { get; }
    public bool IsMarkupExtension { get; }
    public bool IsBindable { get; }
    public bool IsReturnTypeStub { get; }
    public bool IsLocalType { get; }
    public IXamlType BoxedType { get; }
    public IXamlMember ContentProperty { get; }
    public IXamlType ItemType { get; }
    public IXamlType KeyType { get; }
    public Activator Activator { get; public set; }
    public AddToCollection CollectionAdd { get; public set; }
    public AddToDictionary DictionaryAdd { get; public set; }
    public CreateFromStringMethod CreateFromStringMethod { get; public set; }
    public BoxInstanceMethod BoxInstance { get; public set; }
    public XamlUserType(XamlTypeInfoProvider provider, string fullName, Type fullType, IXamlType baseType);
    public virtual IXamlType get_BaseType();
    public virtual bool get_IsArray();
    public virtual bool get_IsCollection();
    public virtual bool get_IsConstructible();
    public virtual bool get_IsDictionary();
    public virtual bool get_IsMarkupExtension();
    public virtual bool get_IsBindable();
    public virtual bool get_IsReturnTypeStub();
    public virtual bool get_IsLocalType();
    public sealed virtual IXamlType get_BoxedType();
    public virtual IXamlMember get_ContentProperty();
    public virtual IXamlType get_ItemType();
    public virtual IXamlType get_KeyType();
    public virtual IXamlMember GetMember(string name);
    public virtual object ActivateInstance();
    public virtual void AddToMap(object instance, object key, object item);
    public virtual void AddToVector(object instance, object item);
    public virtual void RunInitializer();
    public virtual object CreateFromString(string input);
    [CompilerGeneratedAttribute]
public Activator get_Activator();
    [CompilerGeneratedAttribute]
public void set_Activator(Activator value);
    [CompilerGeneratedAttribute]
public AddToCollection get_CollectionAdd();
    [CompilerGeneratedAttribute]
public void set_CollectionAdd(AddToCollection value);
    [CompilerGeneratedAttribute]
public AddToDictionary get_DictionaryAdd();
    [CompilerGeneratedAttribute]
public void set_DictionaryAdd(AddToDictionary value);
    [CompilerGeneratedAttribute]
public CreateFromStringMethod get_CreateFromStringMethod();
    [CompilerGeneratedAttribute]
public void set_CreateFromStringMethod(CreateFromStringMethod value);
    [CompilerGeneratedAttribute]
public BoxInstanceMethod get_BoxInstance();
    [CompilerGeneratedAttribute]
public void set_BoxInstance(BoxInstanceMethod value);
    public void SetContentPropertyName(string contentPropertyName);
    public void SetIsArray();
    public void SetIsMarkupExtension();
    public void SetIsBindable();
    public void SetIsReturnTypeStub();
    public void SetIsLocalType();
    public void SetItemTypeName(string itemTypeName);
    public void SetKeyTypeName(string keyTypeName);
    public void SetBoxedType(IXamlType boxedType);
    public object BoxType(object instance);
    public void AddMemberName(string shortName);
    public void AddEnumValue(string name, object value);
}
internal class Microsoft.Toolkit.Uwp.UI.Controls.PretokenStringContainer : DependencyObject {
    public static DependencyProperty TextProperty;
    [CompilerGeneratedAttribute]
private bool <IsLast>k__BackingField;
    public string Text { get; public set; }
    public bool IsLast { get; private set; }
    public PretokenStringContainer(bool isLast);
    public PretokenStringContainer(string text);
    private static PretokenStringContainer();
    public sealed virtual string get_Text();
    public sealed virtual void set_Text(string value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_IsLast();
    [CompilerGeneratedAttribute]
private void set_IsLast(bool value);
    public virtual string ToString();
}
public class Microsoft.Toolkit.Uwp.UI.Controls.Primitives.ColorPickerSlider : Slider {
    [CompilerGeneratedAttribute]
private Color <CheckerBackgroundColor>k__BackingField;
    private Size oldSize;
    private Size measuredSize;
    private Size cachedSize;
    public static DependencyProperty ColorProperty;
    public static DependencyProperty ColorChannelProperty;
    public static DependencyProperty ColorRepresentationProperty;
    public static DependencyProperty DefaultForegroundProperty;
    public static DependencyProperty HsvColorProperty;
    public static DependencyProperty IsAlphaMaxForcedProperty;
    public static DependencyProperty IsAutoUpdatingEnabledProperty;
    public static DependencyProperty IsSaturationValueMaxForcedProperty;
    internal Color CheckerBackgroundColor { get; internal set; }
    public Color Color { get; public set; }
    public ColorChannel ColorChannel { get; public set; }
    public ColorRepresentation ColorRepresentation { get; public set; }
    public Brush DefaultForeground { get; public set; }
    public HsvColor HsvColor { get; public set; }
    public bool IsAlphaMaxForced { get; public set; }
    public bool IsAutoUpdatingEnabled { get; public set; }
    public bool IsSaturationValueMaxForced { get; public set; }
    private static ColorPickerSlider();
    [CompilerGeneratedAttribute]
internal Color get_CheckerBackgroundColor();
    [CompilerGeneratedAttribute]
internal void set_CheckerBackgroundColor(Color value);
    public void UpdateColors();
    [AsyncStateMachineAttribute("Microsoft.Toolkit.Uwp.UI.Controls.Primitives.ColorPickerSlider/<UpdateBackground>d__9")]
private void UpdateBackground(HsvColor color);
    protected virtual Size MeasureOverride(Size availableSize);
    private void OnDependencyPropertyChanged(object sender, DependencyPropertyChangedEventArgs args);
    public Color get_Color();
    public void set_Color(Color value);
    public ColorChannel get_ColorChannel();
    public void set_ColorChannel(ColorChannel value);
    public ColorRepresentation get_ColorRepresentation();
    public void set_ColorRepresentation(ColorRepresentation value);
    public Brush get_DefaultForeground();
    public void set_DefaultForeground(Brush value);
    public HsvColor get_HsvColor();
    public void set_HsvColor(HsvColor value);
    public bool get_IsAlphaMaxForced();
    public void set_IsAlphaMaxForced(bool value);
    public bool get_IsAutoUpdatingEnabled();
    public void set_IsAutoUpdatingEnabled(bool value);
    public bool get_IsSaturationValueMaxForced();
    public void set_IsSaturationValueMaxForced(bool value);
}
[TemplatePartAttribute]
[TemplatePartAttribute]
[TemplatePartAttribute]
[TemplatePartAttribute]
public class Microsoft.Toolkit.Uwp.UI.Controls.RadialGauge : RangeBase {
    public static DependencyProperty StepSizeProperty;
    public static DependencyProperty IsInteractiveProperty;
    public static DependencyProperty ScaleWidthProperty;
    public static DependencyProperty NeedleBrushProperty;
    public static DependencyProperty UnitProperty;
    public static DependencyProperty TrailBrushProperty;
    public static DependencyProperty ScaleBrushProperty;
    public static DependencyProperty ScaleTickBrushProperty;
    public static DependencyProperty TickBrushProperty;
    public static DependencyProperty ValueStringFormatProperty;
    public static DependencyProperty TickSpacingProperty;
    public static DependencyProperty NeedleLengthProperty;
    public static DependencyProperty NeedleWidthProperty;
    public static DependencyProperty ScalePaddingProperty;
    public static DependencyProperty ScaleTickWidthProperty;
    public static DependencyProperty TickWidthProperty;
    public static DependencyProperty TickLengthProperty;
    public static DependencyProperty MinAngleProperty;
    public static DependencyProperty MaxAngleProperty;
    protected static DependencyProperty ValueAngleProperty;
    private static string ContainerPartName;
    private static string ScalePartName;
    private static string TrailPartName;
    private static string ValueTextPartName;
    private static double Degrees2Radians;
    private static ThemeListener ThemeListener;
    private SolidColorBrush _needleBrush;
    private Brush _trailBrush;
    private Brush _scaleBrush;
    private SolidColorBrush _scaleTickBrush;
    private SolidColorBrush _tickBrush;
    private Brush _foreground;
    private double _normalizedMinAngle;
    private double _normalizedMaxAngle;
    private Compositor _compositor;
    private ContainerVisual _root;
    private SpriteVisual _needle;
    public double StepSize { get; public set; }
    public bool IsInteractive { get; public set; }
    public double ScaleWidth { get; public set; }
    public string Unit { get; public set; }
    public SolidColorBrush NeedleBrush { get; public set; }
    public Brush TrailBrush { get; public set; }
    public Brush ScaleBrush { get; public set; }
    public SolidColorBrush ScaleTickBrush { get; public set; }
    public SolidColorBrush TickBrush { get; public set; }
    public string ValueStringFormat { get; public set; }
    public int TickSpacing { get; public set; }
    public double NeedleLength { get; public set; }
    public double NeedleWidth { get; public set; }
    public double ScalePadding { get; public set; }
    public double ScaleTickWidth { get; public set; }
    public double TickLength { get; public set; }
    public double TickWidth { get; public set; }
    public int MinAngle { get; public set; }
    public int MaxAngle { get; public set; }
    protected double ValueAngle { get; protected set; }
    protected double NormalizedMinAngle { get; }
    protected double NormalizedMaxAngle { get; }
    private static RadialGauge();
    private void ThemeListener_ThemeChanged(ThemeListener sender);
    private void RadialGauge_KeyDown(object sender, KeyRoutedEventArgs e);
    private void RadialGauge_Unloaded(object sender, RoutedEventArgs e);
    public double get_StepSize();
    public void set_StepSize(double value);
    public bool get_IsInteractive();
    public void set_IsInteractive(bool value);
    public double get_ScaleWidth();
    public void set_ScaleWidth(double value);
    public string get_Unit();
    public void set_Unit(string value);
    public SolidColorBrush get_NeedleBrush();
    public void set_NeedleBrush(SolidColorBrush value);
    public Brush get_TrailBrush();
    public void set_TrailBrush(Brush value);
    public Brush get_ScaleBrush();
    public void set_ScaleBrush(Brush value);
    public SolidColorBrush get_ScaleTickBrush();
    public void set_ScaleTickBrush(SolidColorBrush value);
    public SolidColorBrush get_TickBrush();
    public void set_TickBrush(SolidColorBrush value);
    public string get_ValueStringFormat();
    public void set_ValueStringFormat(string value);
    public int get_TickSpacing();
    public void set_TickSpacing(int value);
    public double get_NeedleLength();
    public void set_NeedleLength(double value);
    public double get_NeedleWidth();
    public void set_NeedleWidth(double value);
    public double get_ScalePadding();
    public void set_ScalePadding(double value);
    public double get_ScaleTickWidth();
    public void set_ScaleTickWidth(double value);
    public double get_TickLength();
    public void set_TickLength(double value);
    public double get_TickWidth();
    public void set_TickWidth(double value);
    public int get_MinAngle();
    public void set_MinAngle(int value);
    public int get_MaxAngle();
    public void set_MaxAngle(int value);
    protected double get_ValueAngle();
    protected void set_ValueAngle(double value);
    protected double get_NormalizedMinAngle();
    protected double get_NormalizedMaxAngle();
    protected virtual AutomationPeer OnCreateAutomationPeer();
    protected virtual void OnApplyTemplate();
    protected virtual void OnMinimumChanged(double oldMinimum, double newMinimum);
    protected virtual void OnMaximumChanged(double oldMaximum, double newMaximum);
    protected virtual void OnValueChanged(double oldValue, double newValue);
    private static void OnValueChanged(DependencyObject d);
    private static void OnInteractivityChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    private static void OnScaleChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    private static void OnScaleChanged(DependencyObject d);
    private static void OnFaceChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    private static void OnFaceChanged(DependencyObject d);
    private void OnColorsChanged();
    private void ClearBrush(Brush brush, DependencyProperty prop);
    private void RestoreBrush(Brush source, DependencyProperty prop);
    private void RadialGauge_ManipulationDelta(object sender, ManipulationDeltaRoutedEventArgs e);
    private void RadialGauge_Tapped(object sender, TappedRoutedEventArgs e);
    private void RadialGauge_PointerReleased(object sender, PointerRoutedEventArgs e);
    private void UpdateNormalizedAngles();
    private void SetGaugeValueFromPoint(Point p);
    private Point ScalePoint(double angle, double middleOfScale);
    private double ValueToAngle(double value);
    private double Mod(double number, double divider);
    private double RoundToMultiple(double number, double multiple);
}
public class Microsoft.Toolkit.Uwp.UI.Controls.RadialGaugeAutomationPeer : RangeBaseAutomationPeer {
    public bool IsReadOnly { get; }
    public double LargeChange { get; }
    public double Maximum { get; }
    public double Minimum { get; }
    public double SmallChange { get; }
    public double Value { get; }
    public RadialGaugeAutomationPeer(RadialGauge owner);
    public sealed virtual bool get_IsReadOnly();
    public sealed virtual double get_LargeChange();
    public sealed virtual double get_Maximum();
    public sealed virtual double get_Minimum();
    public sealed virtual double get_SmallChange();
    public sealed virtual double get_Value();
    public sealed virtual void SetValue(double value);
    protected virtual IList`1<AutomationPeer> GetChildrenCore();
    protected virtual string GetNameCore();
    protected virtual object GetPatternCore(PatternInterface patternInterface);
    protected virtual AutomationControlType GetAutomationControlTypeCore();
    public void RaiseValueChangedEvent(double oldValue, double newValue);
}
public class Microsoft.Toolkit.Uwp.UI.Controls.RangeChangedEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
private double <OldValue>k__BackingField;
    [CompilerGeneratedAttribute]
private double <NewValue>k__BackingField;
    [CompilerGeneratedAttribute]
private RangeSelectorProperty <ChangedRangeProperty>k__BackingField;
    public double OldValue { get; private set; }
    public double NewValue { get; private set; }
    public RangeSelectorProperty ChangedRangeProperty { get; private set; }
    public RangeChangedEventArgs(double oldValue, double newValue, RangeSelectorProperty changedRangeProperty);
    [CompilerGeneratedAttribute]
public double get_OldValue();
    [CompilerGeneratedAttribute]
private void set_OldValue(double value);
    [CompilerGeneratedAttribute]
public double get_NewValue();
    [CompilerGeneratedAttribute]
private void set_NewValue(double value);
    [CompilerGeneratedAttribute]
public RangeSelectorProperty get_ChangedRangeProperty();
    [CompilerGeneratedAttribute]
private void set_ChangedRangeProperty(RangeSelectorProperty value);
}
[TemplateVisualStateAttribute]
[TemplateVisualStateAttribute]
[TemplateVisualStateAttribute]
[TemplateVisualStateAttribute]
[TemplatePartAttribute]
[TemplatePartAttribute]
[TemplatePartAttribute]
[TemplatePartAttribute]
[TemplatePartAttribute]
[TemplatePartAttribute]
[TemplatePartAttribute]
[TemplatePartAttribute]
public class Microsoft.Toolkit.Uwp.UI.Controls.RangeSelector : Control {
    private static double Epsilon;
    private static double DefaultMinimum;
    private static double DefaultMaximum;
    private static double DefaultStepFrequency;
    private static TimeSpan TimeToHideToolTipOnKeyUp;
    private Border _outOfRangeContentContainer;
    private Rectangle _activeRectangle;
    private Thumb _minThumb;
    private Thumb _maxThumb;
    private Canvas _containerCanvas;
    private Grid _controlGrid;
    private double _oldValue;
    private bool _valuesAssigned;
    private bool _minSet;
    private bool _maxSet;
    private bool _pointerManipulatingMin;
    private bool _pointerManipulatingMax;
    private double _absolutePosition;
    private Grid _toolTip;
    private TextBlock _toolTipText;
    [CompilerGeneratedAttribute]
private DragStartedEventHandler ThumbDragStarted;
    [CompilerGeneratedAttribute]
private DragCompletedEventHandler ThumbDragCompleted;
    [CompilerGeneratedAttribute]
private EventHandler`1<RangeChangedEventArgs> ValueChanged;
    private DispatcherQueueTimer keyDebounceTimer;
    public static DependencyProperty MinimumProperty;
    public static DependencyProperty MaximumProperty;
    public static DependencyProperty RangeStartProperty;
    public static DependencyProperty RangeEndProperty;
    public static DependencyProperty StepFrequencyProperty;
    public double Minimum { get; public set; }
    public double Maximum { get; public set; }
    public double RangeStart { get; public set; }
    public double RangeEnd { get; public set; }
    public double StepFrequency { get; public set; }
    private static RangeSelector();
    protected virtual void OnApplyTemplate();
    private static void UpdateToolTipText(RangeSelector rangeSelector, TextBlock toolTip, double newValue);
    private void ContainerCanvas_SizeChanged(object sender, SizeChangedEventArgs e);
    private void VerifyValues();
    private void RangeMinToStepFrequency();
    private void RangeMaxToStepFrequency();
    private double MoveToStepFrequency(double rangeValue);
    private void SyncThumbs(bool fromMinKeyDown, bool fromMaxKeyDown);
    private void SyncActiveRectangle();
    private void RangeSelector_IsEnabledChanged(object sender, DependencyPropertyChangedEventArgs e);
    [CompilerGeneratedAttribute]
public void add_ThumbDragStarted(DragStartedEventHandler value);
    [CompilerGeneratedAttribute]
public void remove_ThumbDragStarted(DragStartedEventHandler value);
    [CompilerGeneratedAttribute]
public void add_ThumbDragCompleted(DragCompletedEventHandler value);
    [CompilerGeneratedAttribute]
public void remove_ThumbDragCompleted(DragCompletedEventHandler value);
    [CompilerGeneratedAttribute]
public void add_ValueChanged(EventHandler`1<RangeChangedEventArgs> value);
    [CompilerGeneratedAttribute]
public void remove_ValueChanged(EventHandler`1<RangeChangedEventArgs> value);
    protected virtual void OnThumbDragStarted(DragStartedEventArgs e);
    protected virtual void OnThumbDragCompleted(DragCompletedEventArgs e);
    protected virtual void OnValueChanged(RangeChangedEventArgs e);
    private void MinThumb_DragDelta(object sender, DragDeltaEventArgs e);
    private void MaxThumb_DragDelta(object sender, DragDeltaEventArgs e);
    private void MinThumb_DragStarted(object sender, DragStartedEventArgs e);
    private void MaxThumb_DragStarted(object sender, DragStartedEventArgs e);
    private void Thumb_DragCompleted(object sender, DragCompletedEventArgs e);
    private double DragWidth();
    private double DragThumb(Thumb thumb, double min, double max, double nextPos);
    private void Thumb_DragStarted(Thumb thumb);
    private void MinThumb_KeyDown(object sender, KeyRoutedEventArgs e);
    private void MaxThumb_KeyDown(object sender, KeyRoutedEventArgs e);
    private void Thumb_KeyUp(object sender, KeyRoutedEventArgs e);
    private void ContainerCanvas_PointerEntered(object sender, PointerRoutedEventArgs e);
    private void ContainerCanvas_PointerExited(object sender, PointerRoutedEventArgs e);
    private void ContainerCanvas_PointerReleased(object sender, PointerRoutedEventArgs e);
    private void ContainerCanvas_PointerMoved(object sender, PointerRoutedEventArgs e);
    private void ContainerCanvas_PointerPressed(object sender, PointerRoutedEventArgs e);
    public double get_Minimum();
    public void set_Minimum(double value);
    public double get_Maximum();
    public void set_Maximum(double value);
    public double get_RangeStart();
    public void set_RangeStart(double value);
    public double get_RangeEnd();
    public void set_RangeEnd(double value);
    public double get_StepFrequency();
    public void set_StepFrequency(double value);
    private static void MinimumChangedCallback(DependencyObject d, DependencyPropertyChangedEventArgs e);
    private static void MaximumChangedCallback(DependencyObject d, DependencyPropertyChangedEventArgs e);
    private static void RangeMinChangedCallback(DependencyObject d, DependencyPropertyChangedEventArgs e);
    private static void RangeMaxChangedCallback(DependencyObject d, DependencyPropertyChangedEventArgs e);
    [CompilerGeneratedAttribute]
private void <Thumb_KeyUp>b__54_0();
}
public enum Microsoft.Toolkit.Uwp.UI.Controls.RangeSelectorProperty : Enum {
    public int value__;
    public static RangeSelectorProperty MinimumValue;
    public static RangeSelectorProperty MaximumValue;
}
[TemplatePartAttribute]
[TemplatePartAttribute]
[TemplatePartAttribute]
[TemplatePartAttribute]
[TemplatePartAttribute]
[TemplatePartAttribute]
[TemplatePartAttribute]
public class Microsoft.Toolkit.Uwp.UI.Controls.RemoteDevicePicker : ContentDialog {
    private ListView _listDevices;
    private ComboBox _listDeviceTypes;
    private ProgressRing _progressRing;
    private Grid _commandSpace;
    private ComboBox _deviceDiscovery;
    private ComboBox _deviceStatus;
    private ComboBox _authorizationType;
    private Grid _advancedFiltersGrid;
    private RemoteSystemDiscoveryTypeFilter _discoveryFilter;
    private RemoteSystemAuthorizationKindFilter _authorizationKindFilter;
    private RemoteSystemStatusTypeFilter _statusFilter;
    [CompilerGeneratedAttribute]
private ObservableCollection`1<RemoteSystem> <RemoteSystems>k__BackingField;
    public static DependencyProperty SelectionModeProperty;
    public static DependencyProperty ShowAdvancedFiltersProperty;
    private ObservableCollection`1<RemoteSystem> RemoteSystems { get; private set; }
    public RemoteDeviceSelectionMode SelectionMode { get; public set; }
    public bool ShowAdvancedFilters { get; public set; }
    public RemoteDevicePicker(RemoteSystemDiscoveryType remoteSystemDiscoveryType, RemoteSystemAuthorizationKind remoteSystemAuthorizationKind, RemoteSystemStatusType remoteSystemStatusType);
    private static RemoteDevicePicker();
    [CompilerGeneratedAttribute]
private ObservableCollection`1<RemoteSystem> get_RemoteSystems();
    [CompilerGeneratedAttribute]
private void set_RemoteSystems(ObservableCollection`1<RemoteSystem> value);
    public RemoteDeviceSelectionMode get_SelectionMode();
    public void set_SelectionMode(RemoteDeviceSelectionMode value);
    public bool get_ShowAdvancedFilters();
    public void set_ShowAdvancedFilters(bool value);
    private void RemoteDevicePicker_PrimaryButtonClick(ContentDialog sender, ContentDialogButtonClickEventArgs args);
    [AsyncStateMachineAttribute("Microsoft.Toolkit.Uwp.UI.Controls.RemoteDevicePicker/<PickDeviceAsync>d__26")]
public Task`1<IEnumerable`1<RemoteSystem>> PickDeviceAsync();
    internal IEnumerable`1<RemoteSystem> ReturnDevices();
    protected virtual void OnApplyTemplate();
    private void UnhookEvents();
    private void Filters_SelectionChanged(object sender, SelectionChangedEventArgs e);
    private void LoadFilters();
    private void BuildFilters(RemoteSystemDiscoveryTypeFilter discoveryFilter, RemoteSystemAuthorizationKindFilter authorizationKindFilter, RemoteSystemStatusTypeFilter statusFilter);
    private void ListDevices_ContainerContentChanging(ListViewBase sender, ContainerContentChangingEventArgs args);
    private void ListDevices_SelectionChanged(object sender, SelectionChangedEventArgs e);
    private void ListDevices_DoubleTapped(object sender, DoubleTappedRoutedEventArgs e);
    private void ListDeviceTypes_SelectionChanged(object sender, SelectionChangedEventArgs e);
    private void UpdateList();
    private void UpdateProgressRing(bool state);
    [CompilerGeneratedAttribute]
private bool <UpdateList>b__37_0(RemoteSystem a);
}
public enum Microsoft.Toolkit.Uwp.UI.Controls.RemoteDeviceSelectionMode : Enum {
    public int value__;
    public static RemoteDeviceSelectionMode Single;
    public static RemoteDeviceSelectionMode Multiple;
}
[TemplatePartAttribute]
[TemplatePartAttribute]
[TemplatePartAttribute]
[TemplatePartAttribute]
[TemplatePartAttribute]
[TemplatePartAttribute]
public class Microsoft.Toolkit.Uwp.UI.Controls.RichSuggestBox : ItemsControl {
    private static string PartRichEditBox;
    private static string PartSuggestionsPopup;
    private static string PartSuggestionsList;
    private static string PartSuggestionsContainer;
    private static string PartHeaderContentPresenter;
    private static string PartDescriptionPresenter;
    private object _tokensLock;
    private Dictionary`2<string, RichSuggestToken> _tokens;
    private ObservableCollection`1<RichSuggestToken> _visibleTokens;
    private Popup _suggestionPopup;
    private RichEditBox _richEditBox;
    private ScrollViewer _scrollViewer;
    private ListViewBase _suggestionsList;
    private Border _suggestionsContainer;
    private int _suggestionChoice;
    private bool _ignoreChange;
    private bool _popupOpenDown;
    private bool _textCompositionActive;
    private RichSuggestQuery _currentQuery;
    [CompilerGeneratedAttribute]
private TypedEventHandler`2<RichSuggestBox, SuggestionRequestedEventArgs> SuggestionRequested;
    [CompilerGeneratedAttribute]
private TypedEventHandler`2<RichSuggestBox, SuggestionChosenEventArgs> SuggestionChosen;
    [CompilerGeneratedAttribute]
private TypedEventHandler`2<RichSuggestBox, RichSuggestTokenSelectedEventArgs> TokenSelected;
    [CompilerGeneratedAttribute]
private TypedEventHandler`2<RichSuggestBox, RichSuggestTokenPointerOverEventArgs> TokenPointerOver;
    [CompilerGeneratedAttribute]
private TypedEventHandler`2<RichSuggestBox, RoutedEventArgs> TextChanged;
    [CompilerGeneratedAttribute]
private TypedEventHandler`2<RichSuggestBox, RoutedEventArgs> SelectionChanged;
    [CompilerGeneratedAttribute]
private TypedEventHandler`2<RichSuggestBox, TextControlPasteEventArgs> Paste;
    public static DependencyProperty PlaceholderTextProperty;
    public static DependencyProperty RichEditBoxStyleProperty;
    public static DependencyProperty HeaderProperty;
    public static DependencyProperty HeaderTemplateProperty;
    public static DependencyProperty DescriptionProperty;
    public static DependencyProperty PopupPlacementProperty;
    public static DependencyProperty PopupCornerRadiusProperty;
    public static DependencyProperty PopupHeaderProperty;
    public static DependencyProperty PopupHeaderTemplateProperty;
    public static DependencyProperty PopupFooterProperty;
    public static DependencyProperty PopupFooterTemplateProperty;
    public static DependencyProperty TokenBackgroundProperty;
    public static DependencyProperty TokenForegroundProperty;
    public static DependencyProperty PrefixesProperty;
    public static DependencyProperty ClipboardPasteFormatProperty;
    public static DependencyProperty ClipboardCopyFormatProperty;
    public static DependencyProperty DisabledFormattingAcceleratorsProperty;
    [CompilerGeneratedAttribute]
private ReadOnlyObservableCollection`1<RichSuggestToken> <Tokens>k__BackingField;
    public string PlaceholderText { get; public set; }
    public Style RichEditBoxStyle { get; public set; }
    public object Header { get; public set; }
    public DataTemplate HeaderTemplate { get; public set; }
    public object Description { get; public set; }
    public SuggestionPopupPlacementMode PopupPlacement { get; public set; }
    public CornerRadius PopupCornerRadius { get; public set; }
    public object PopupHeader { get; public set; }
    public DataTemplate PopupHeaderTemplate { get; public set; }
    public object PopupFooter { get; public set; }
    public DataTemplate PopupFooterTemplate { get; public set; }
    public SolidColorBrush TokenBackground { get; public set; }
    public SolidColorBrush TokenForeground { get; public set; }
    public string Prefixes { get; public set; }
    public RichEditClipboardFormat ClipboardPasteFormat { get; public set; }
    public RichEditClipboardFormat ClipboardCopyFormat { get; public set; }
    public DisabledFormattingAccelerators DisabledFormattingAccelerators { get; public set; }
    public RichEditTextDocument TextDocument { get; }
    public double HorizontalOffset { get; }
    public double VerticalOffset { get; }
    public ReadOnlyObservableCollection`1<RichSuggestToken> Tokens { get; }
    private static RichSuggestBox();
    public void ClearUndoRedoSuggestionHistory();
    public void Clear();
    public void AddTokens(IEnumerable`1<RichSuggestToken> tokens);
    public void Load(string rtf, IEnumerable`1<RichSuggestToken> tokens);
    public bool TryGetTokenFromRange(ITextRange range, RichSuggestToken& token);
    public Rect GetRectFromRange(ITextRange range);
    protected virtual void OnApplyTemplate();
    private static void OnHeaderChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    private static void OnDescriptionChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    private static void OnSuggestionPopupPlacementChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    private static void OnPrefixesChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    private void OnCornerRadiusChanged(DependencyObject sender, DependencyProperty dp);
    private void OnLoaded(object sender, RoutedEventArgs e);
    private void OnLostFocus(object sender, RoutedEventArgs e);
    [AsyncStateMachineAttribute("Microsoft.Toolkit.Uwp.UI.Controls.RichSuggestBox/<SuggestionsList_ItemClick>d__34")]
private void SuggestionsList_ItemClick(object sender, ItemClickEventArgs e);
    private void SuggestionsList_SizeChanged(object sender, SizeChangedEventArgs e);
    private void SuggestionList_GotFocus(object sender, RoutedEventArgs e);
    private void RichEditBox_OnPointerMoved(object sender, PointerRoutedEventArgs e);
    private void RichEditBox_SelectionChanging(RichEditBox sender, RichEditBoxSelectionChangingEventArgs args);
    [AsyncStateMachineAttribute("Microsoft.Toolkit.Uwp.UI.Controls.RichSuggestBox/<RichEditBox_SelectionChanged>d__39")]
private void RichEditBox_SelectionChanged(object sender, RoutedEventArgs e);
    private void RichEditBox_OnPointerPressed(object sender, PointerRoutedEventArgs e);
    [AsyncStateMachineAttribute("Microsoft.Toolkit.Uwp.UI.Controls.RichSuggestBox/<RichEditBox_ProcessKeyboardAccelerators>d__41")]
private void RichEditBox_ProcessKeyboardAccelerators(UIElement sender, ProcessKeyboardAcceleratorEventArgs args);
    [AsyncStateMachineAttribute("Microsoft.Toolkit.Uwp.UI.Controls.RichSuggestBox/<RichEditBox_PreviewKeyDown>d__42")]
private void RichEditBox_PreviewKeyDown(object sender, KeyRoutedEventArgs e);
    private void RichEditBox_TextChanging(RichEditBox sender, RichEditBoxTextChangingEventArgs args);
    private void RichEditBox_TextChanged(object sender, RoutedEventArgs e);
    private void RichEditBox_TextCompositionStarted(RichEditBox sender, TextCompositionStartedEventArgs args);
    [AsyncStateMachineAttribute("Microsoft.Toolkit.Uwp.UI.Controls.RichSuggestBox/<RichEditBox_TextCompositionChanged>d__46")]
private void RichEditBox_TextCompositionChanged(RichEditBox sender, TextCompositionChangedEventArgs args);
    private void RichEditBox_TextCompositionEnded(RichEditBox sender, TextCompositionEndedEventArgs args);
    private void RichEditBox_SizeChanged(object sender, SizeChangedEventArgs e);
    [AsyncStateMachineAttribute("Microsoft.Toolkit.Uwp.UI.Controls.RichSuggestBox/<RichEditBox_Paste>d__49")]
private void RichEditBox_Paste(object sender, TextControlPasteEventArgs e);
    private void ConditionallyLoadElement(object property, string elementName);
    private void UpdateVisibleTokenList();
    private void CreateSingleEdit(Action editAction);
    private void ExpandSelectionOnPartialTokenSelect(ITextSelection selection, ITextRange tokenRange);
    private void InvokeTokenSelected(ITextSelection selection);
    private void InvokeTokenPointerOver(PointerPoint pointer);
    private void ValidateTokensInDocument();
    private void ValidateTokenFromRange(ITextRange range);
    private bool TryCommitSuggestionIntoDocument(ITextRange range, string displayText, Guid id, ITextCharacterFormat format, bool addTrailingSpace);
    private bool TryExtractQueryFromSelection(String& prefix, String& query, ITextRange& range);
    private bool TryExtractQueryFromRange(ITextRange range, String& prefix, String& query);
    private ITextCharacterFormat CreateTokenFormat(ITextRange range);
    [CompilerGeneratedAttribute]
public void add_SuggestionRequested(TypedEventHandler`2<RichSuggestBox, SuggestionRequestedEventArgs> value);
    [CompilerGeneratedAttribute]
public void remove_SuggestionRequested(TypedEventHandler`2<RichSuggestBox, SuggestionRequestedEventArgs> value);
    [CompilerGeneratedAttribute]
public void add_SuggestionChosen(TypedEventHandler`2<RichSuggestBox, SuggestionChosenEventArgs> value);
    [CompilerGeneratedAttribute]
public void remove_SuggestionChosen(TypedEventHandler`2<RichSuggestBox, SuggestionChosenEventArgs> value);
    [CompilerGeneratedAttribute]
public void add_TokenSelected(TypedEventHandler`2<RichSuggestBox, RichSuggestTokenSelectedEventArgs> value);
    [CompilerGeneratedAttribute]
public void remove_TokenSelected(TypedEventHandler`2<RichSuggestBox, RichSuggestTokenSelectedEventArgs> value);
    [CompilerGeneratedAttribute]
public void add_TokenPointerOver(TypedEventHandler`2<RichSuggestBox, RichSuggestTokenPointerOverEventArgs> value);
    [CompilerGeneratedAttribute]
public void remove_TokenPointerOver(TypedEventHandler`2<RichSuggestBox, RichSuggestTokenPointerOverEventArgs> value);
    [CompilerGeneratedAttribute]
public void add_TextChanged(TypedEventHandler`2<RichSuggestBox, RoutedEventArgs> value);
    [CompilerGeneratedAttribute]
public void remove_TextChanged(TypedEventHandler`2<RichSuggestBox, RoutedEventArgs> value);
    [CompilerGeneratedAttribute]
public void add_SelectionChanged(TypedEventHandler`2<RichSuggestBox, RoutedEventArgs> value);
    [CompilerGeneratedAttribute]
public void remove_SelectionChanged(TypedEventHandler`2<RichSuggestBox, RoutedEventArgs> value);
    [CompilerGeneratedAttribute]
public void add_Paste(TypedEventHandler`2<RichSuggestBox, TextControlPasteEventArgs> value);
    [CompilerGeneratedAttribute]
public void remove_Paste(TypedEventHandler`2<RichSuggestBox, TextControlPasteEventArgs> value);
    private static bool IsElementOnScreen(FrameworkElement element, double offsetX, double offsetY);
    private static bool IsElementInsideWindow(FrameworkElement element, double offsetX, double offsetY);
    private static string EnforcePrefixesRequirements(string value);
    private static void PadRange(ITextRange range, ITextCharacterFormat format);
    private static void ForEachLinkInDocument(ITextDocument document, Action`1<ITextRange> action);
    public string get_PlaceholderText();
    public void set_PlaceholderText(string value);
    public Style get_RichEditBoxStyle();
    public void set_RichEditBoxStyle(Style value);
    public object get_Header();
    public void set_Header(object value);
    public DataTemplate get_HeaderTemplate();
    public void set_HeaderTemplate(DataTemplate value);
    public object get_Description();
    public void set_Description(object value);
    public SuggestionPopupPlacementMode get_PopupPlacement();
    public void set_PopupPlacement(SuggestionPopupPlacementMode value);
    public CornerRadius get_PopupCornerRadius();
    public void set_PopupCornerRadius(CornerRadius value);
    public object get_PopupHeader();
    public void set_PopupHeader(object value);
    public DataTemplate get_PopupHeaderTemplate();
    public void set_PopupHeaderTemplate(DataTemplate value);
    public object get_PopupFooter();
    public void set_PopupFooter(object value);
    public DataTemplate get_PopupFooterTemplate();
    public void set_PopupFooterTemplate(DataTemplate value);
    public SolidColorBrush get_TokenBackground();
    public void set_TokenBackground(SolidColorBrush value);
    public SolidColorBrush get_TokenForeground();
    public void set_TokenForeground(SolidColorBrush value);
    public string get_Prefixes();
    public void set_Prefixes(string value);
    public RichEditClipboardFormat get_ClipboardPasteFormat();
    public void set_ClipboardPasteFormat(RichEditClipboardFormat value);
    public RichEditClipboardFormat get_ClipboardCopyFormat();
    public void set_ClipboardCopyFormat(RichEditClipboardFormat value);
    public DisabledFormattingAccelerators get_DisabledFormattingAccelerators();
    public void set_DisabledFormattingAccelerators(DisabledFormattingAccelerators value);
    public RichEditTextDocument get_TextDocument();
    public double get_HorizontalOffset();
    public double get_VerticalOffset();
    [CompilerGeneratedAttribute]
public ReadOnlyObservableCollection`1<RichSuggestToken> get_Tokens();
    [AsyncStateMachineAttribute("Microsoft.Toolkit.Uwp.UI.Controls.RichSuggestBox/<RequestSuggestionsAsync>d__165")]
private Task RequestSuggestionsAsync(ITextRange range);
    [AsyncStateMachineAttribute("Microsoft.Toolkit.Uwp.UI.Controls.RichSuggestBox/<CommitSuggestionAsync>d__166")]
internal Task CommitSuggestionAsync(object selectedItem);
    private void UpdateSuggestionsListSelectedItem(int choice);
    private void ShowSuggestionsPopup(bool show);
    private void UpdatePopupWidth();
    private void UpdatePopupOffset();
    private void UpdateCornerRadii();
    [CompilerGeneratedAttribute]
private bool <UpdateVisibleTokenList>b__51_0(RichSuggestToken x);
    [CompilerGeneratedAttribute]
private bool <UpdateVisibleTokenList>b__51_1(KeyValuePair`2<string, RichSuggestToken> pair);
}
internal class Microsoft.Toolkit.Uwp.UI.Controls.RichSuggestQuery : object {
    [CompilerGeneratedAttribute]
private string <Prefix>k__BackingField;
    [CompilerGeneratedAttribute]
private string <QueryText>k__BackingField;
    [CompilerGeneratedAttribute]
private ITextRange <Range>k__BackingField;
    [CompilerGeneratedAttribute]
private CancellationTokenSource <CancellationTokenSource>k__BackingField;
    public string Prefix { get; public set; }
    public string QueryText { get; public set; }
    public ITextRange Range { get; public set; }
    public CancellationTokenSource CancellationTokenSource { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Prefix();
    [CompilerGeneratedAttribute]
public void set_Prefix(string value);
    [CompilerGeneratedAttribute]
public string get_QueryText();
    [CompilerGeneratedAttribute]
public void set_QueryText(string value);
    [CompilerGeneratedAttribute]
public ITextRange get_Range();
    [CompilerGeneratedAttribute]
public void set_Range(ITextRange value);
    [CompilerGeneratedAttribute]
public CancellationTokenSource get_CancellationTokenSource();
    [CompilerGeneratedAttribute]
public void set_CancellationTokenSource(CancellationTokenSource value);
}
public class Microsoft.Toolkit.Uwp.UI.Controls.RichSuggestToken : object {
    [CompilerGeneratedAttribute]
private PropertyChangedEventHandler PropertyChanged;
    [CompilerGeneratedAttribute]
private Guid <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DisplayText>k__BackingField;
    [CompilerGeneratedAttribute]
private object <Item>k__BackingField;
    [CompilerGeneratedAttribute]
private int <RangeStart>k__BackingField;
    [CompilerGeneratedAttribute]
private int <RangeEnd>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Active>k__BackingField;
    private ITextRange _range;
    public Guid Id { get; }
    public string DisplayText { get; }
    public object Item { get; public set; }
    public int RangeStart { get; private set; }
    public int RangeEnd { get; private set; }
    public int Position { get; }
    internal bool Active { get; internal set; }
    public RichSuggestToken(Guid id, string displayText);
    [CompilerGeneratedAttribute]
public sealed virtual void add_PropertyChanged(PropertyChangedEventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_PropertyChanged(PropertyChangedEventHandler value);
    [CompilerGeneratedAttribute]
public Guid get_Id();
    [CompilerGeneratedAttribute]
public string get_DisplayText();
    [CompilerGeneratedAttribute]
public object get_Item();
    [CompilerGeneratedAttribute]
public void set_Item(object value);
    [CompilerGeneratedAttribute]
public int get_RangeStart();
    [CompilerGeneratedAttribute]
private void set_RangeStart(int value);
    [CompilerGeneratedAttribute]
public int get_RangeEnd();
    [CompilerGeneratedAttribute]
private void set_RangeEnd(int value);
    public int get_Position();
    [CompilerGeneratedAttribute]
internal bool get_Active();
    [CompilerGeneratedAttribute]
internal void set_Active(bool value);
    internal void UpdateTextRange(ITextRange range);
    public virtual string ToString();
}
public class Microsoft.Toolkit.Uwp.UI.Controls.RichSuggestTokenPointerOverEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
private RichSuggestToken <Token>k__BackingField;
    [CompilerGeneratedAttribute]
private ITextRange <Range>k__BackingField;
    [CompilerGeneratedAttribute]
private PointerPoint <CurrentPoint>k__BackingField;
    public RichSuggestToken Token { get; public set; }
    public ITextRange Range { get; public set; }
    public PointerPoint CurrentPoint { get; public set; }
    [CompilerGeneratedAttribute]
public RichSuggestToken get_Token();
    [CompilerGeneratedAttribute]
public void set_Token(RichSuggestToken value);
    [CompilerGeneratedAttribute]
public ITextRange get_Range();
    [CompilerGeneratedAttribute]
public void set_Range(ITextRange value);
    [CompilerGeneratedAttribute]
public PointerPoint get_CurrentPoint();
    [CompilerGeneratedAttribute]
public void set_CurrentPoint(PointerPoint value);
}
public class Microsoft.Toolkit.Uwp.UI.Controls.RichSuggestTokenSelectedEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
private RichSuggestToken <Token>k__BackingField;
    [CompilerGeneratedAttribute]
private ITextRange <Range>k__BackingField;
    public RichSuggestToken Token { get; public set; }
    public ITextRange Range { get; public set; }
    [CompilerGeneratedAttribute]
public RichSuggestToken get_Token();
    [CompilerGeneratedAttribute]
public void set_Token(RichSuggestToken value);
    [CompilerGeneratedAttribute]
public ITextRange get_Range();
    [CompilerGeneratedAttribute]
public void set_Range(ITextRange value);
}
public class Microsoft.Toolkit.Uwp.UI.Controls.SuggestionChosenEventArgs : DeferredEventArgs {
    [CompilerGeneratedAttribute]
private string <QueryText>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Prefix>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DisplayText>k__BackingField;
    [CompilerGeneratedAttribute]
private object <SelectedItem>k__BackingField;
    [CompilerGeneratedAttribute]
private Guid <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private ITextCharacterFormat <Format>k__BackingField;
    public string QueryText { get; internal set; }
    public string Prefix { get; internal set; }
    public string DisplayText { get; public set; }
    public object SelectedItem { get; internal set; }
    public Guid Id { get; internal set; }
    public ITextCharacterFormat Format { get; public set; }
    [CompilerGeneratedAttribute]
public string get_QueryText();
    [CompilerGeneratedAttribute]
internal void set_QueryText(string value);
    [CompilerGeneratedAttribute]
public string get_Prefix();
    [CompilerGeneratedAttribute]
internal void set_Prefix(string value);
    [CompilerGeneratedAttribute]
public string get_DisplayText();
    [CompilerGeneratedAttribute]
public void set_DisplayText(string value);
    [CompilerGeneratedAttribute]
public object get_SelectedItem();
    [CompilerGeneratedAttribute]
internal void set_SelectedItem(object value);
    [CompilerGeneratedAttribute]
public Guid get_Id();
    [CompilerGeneratedAttribute]
internal void set_Id(Guid value);
    [CompilerGeneratedAttribute]
public ITextCharacterFormat get_Format();
    [CompilerGeneratedAttribute]
public void set_Format(ITextCharacterFormat value);
}
public enum Microsoft.Toolkit.Uwp.UI.Controls.SuggestionPopupPlacementMode : Enum {
    public int value__;
    public static SuggestionPopupPlacementMode Floating;
    public static SuggestionPopupPlacementMode Attached;
}
public class Microsoft.Toolkit.Uwp.UI.Controls.SuggestionRequestedEventArgs : DeferredCancelEventArgs {
    [CompilerGeneratedAttribute]
private string <Prefix>k__BackingField;
    [CompilerGeneratedAttribute]
private string <QueryText>k__BackingField;
    public string Prefix { get; public set; }
    public string QueryText { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Prefix();
    [CompilerGeneratedAttribute]
public void set_Prefix(string value);
    [CompilerGeneratedAttribute]
public string get_QueryText();
    [CompilerGeneratedAttribute]
public void set_QueryText(string value);
}
public class Microsoft.Toolkit.Uwp.UI.Controls.TokenItemAddingEventArgs : DeferredCancelEventArgs {
    [CompilerGeneratedAttribute]
private string <TokenText>k__BackingField;
    [CompilerGeneratedAttribute]
private object <Item>k__BackingField;
    public string TokenText { get; private set; }
    public object Item { get; public set; }
    public TokenItemAddingEventArgs(string token);
    [CompilerGeneratedAttribute]
public string get_TokenText();
    [CompilerGeneratedAttribute]
private void set_TokenText(string value);
    [CompilerGeneratedAttribute]
public object get_Item();
    [CompilerGeneratedAttribute]
public void set_Item(object value);
}
public class Microsoft.Toolkit.Uwp.UI.Controls.TokenItemRemovingEventArgs : DeferredCancelEventArgs {
    [CompilerGeneratedAttribute]
private object <Item>k__BackingField;
    [CompilerGeneratedAttribute]
private TokenizingTextBoxItem <Token>k__BackingField;
    public object Item { get; private set; }
    public TokenizingTextBoxItem Token { get; private set; }
    public TokenItemRemovingEventArgs(object item, TokenizingTextBoxItem token);
    [CompilerGeneratedAttribute]
public object get_Item();
    [CompilerGeneratedAttribute]
private void set_Item(object value);
    [CompilerGeneratedAttribute]
public TokenizingTextBoxItem get_Token();
    [CompilerGeneratedAttribute]
private void set_Token(TokenizingTextBoxItem value);
}
[TemplatePartAttribute]
[TemplatePartAttribute]
[TemplatePartAttribute]
[TemplatePartAttribute]
public class Microsoft.Toolkit.Uwp.UI.Controls.TokenizingTextBox : ListViewBase {
    internal static string PART_NormalState;
    internal static string PART_PointerOverState;
    internal static string PART_FocusedState;
    internal static string PART_UnfocusedState;
    [CompilerGeneratedAttribute]
private bool <PauseTokenClearOnFocus>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsClearingForClick>k__BackingField;
    private InterspersedObservableCollection _innerItemsSource;
    private ITokenStringContainer _currentTextEdit;
    private ITokenStringContainer _lastTextEdit;
    [CompilerGeneratedAttribute]
private TypedEventHandler`2<AutoSuggestBox, AutoSuggestBoxTextChangedEventArgs> TextChanged;
    [CompilerGeneratedAttribute]
private TypedEventHandler`2<AutoSuggestBox, AutoSuggestBoxSuggestionChosenEventArgs> SuggestionChosen;
    [CompilerGeneratedAttribute]
private TypedEventHandler`2<AutoSuggestBox, AutoSuggestBoxQuerySubmittedEventArgs> QuerySubmitted;
    [CompilerGeneratedAttribute]
private TypedEventHandler`2<TokenizingTextBox, TokenItemAddingEventArgs> TokenItemAdding;
    [CompilerGeneratedAttribute]
private TypedEventHandler`2<TokenizingTextBox, object> TokenItemAdded;
    [CompilerGeneratedAttribute]
private TypedEventHandler`2<TokenizingTextBox, TokenItemRemovingEventArgs> TokenItemRemoving;
    [CompilerGeneratedAttribute]
private TypedEventHandler`2<TokenizingTextBox, object> TokenItemRemoved;
    public static DependencyProperty AutoSuggestBoxStyleProperty;
    public static DependencyProperty AutoSuggestBoxTextBoxStyleProperty;
    public static DependencyProperty TextMemberPathProperty;
    public static DependencyProperty TokenItemTemplateProperty;
    public static DependencyProperty TokenItemTemplateSelectorProperty;
    public static DependencyProperty TokenDelimiterProperty;
    public static DependencyProperty TokenSpacingProperty;
    public static DependencyProperty PlaceholderTextProperty;
    public static DependencyProperty QueryIconProperty;
    public static DependencyProperty TextProperty;
    public static DependencyProperty SuggestedItemsSourceProperty;
    public static DependencyProperty SuggestedItemTemplateProperty;
    public static DependencyProperty SuggestedItemTemplateSelectorProperty;
    public static DependencyProperty SuggestedItemContainerStyleProperty;
    public static DependencyProperty TabNavigateBackOnArrowProperty;
    public static DependencyProperty MaximumTokensProperty;
    internal static bool IsShiftPressed { get; }
    internal bool IsControlPressed { get; }
    internal bool PauseTokenClearOnFocus { get; internal set; }
    internal bool IsClearingForClick { get; internal set; }
    public Style AutoSuggestBoxStyle { get; public set; }
    public Style AutoSuggestBoxTextBoxStyle { get; public set; }
    public string TextMemberPath { get; public set; }
    public DataTemplate TokenItemTemplate { get; public set; }
    public DataTemplateSelector TokenItemTemplateSelector { get; public set; }
    public string TokenDelimiter { get; public set; }
    public double TokenSpacing { get; public set; }
    public string PlaceholderText { get; public set; }
    public IconSource QueryIcon { get; public set; }
    public string Text { get; public set; }
    public object SuggestedItemsSource { get; public set; }
    public DataTemplate SuggestedItemTemplate { get; public set; }
    public DataTemplateSelector SuggestedItemTemplateSelector { get; public set; }
    public Style SuggestedItemContainerStyle { get; public set; }
    public bool TabNavigateBackOnArrow { get; public set; }
    public string SelectedTokenText { get; }
    public int MaximumTokens { get; public set; }
    private static TokenizingTextBox();
    internal static bool get_IsShiftPressed();
    internal bool get_IsControlPressed();
    [CompilerGeneratedAttribute]
internal bool get_PauseTokenClearOnFocus();
    [CompilerGeneratedAttribute]
internal void set_PauseTokenClearOnFocus(bool value);
    [CompilerGeneratedAttribute]
internal bool get_IsClearingForClick();
    [CompilerGeneratedAttribute]
internal void set_IsClearingForClick(bool value);
    private void ItemsSource_PropertyChanged(DependencyObject sender, DependencyProperty dp);
    private void TokenizingTextBox_ItemClick(object sender, ItemClickEventArgs e);
    private void TokenizingTextBox_PreviewKeyUp(object sender, KeyRoutedEventArgs e);
    internal void TokenizingTextBox_PreviewKeyUp(VirtualKey key);
    private void FocusPrimaryAutoSuggestBox();
    [AsyncStateMachineAttribute("Microsoft.Toolkit.Uwp.UI.Controls.TokenizingTextBox/<TokenizingTextBox_PreviewKeyDown>d__25")]
private void TokenizingTextBox_PreviewKeyDown(object sender, KeyRoutedEventArgs e);
    [AsyncStateMachineAttribute("Microsoft.Toolkit.Uwp.UI.Controls.TokenizingTextBox/<TokenizingTextBox_PreviewKeyDown>d__26")]
internal Task`1<bool> TokenizingTextBox_PreviewKeyDown(VirtualKey key);
    protected virtual void OnApplyTemplate();
    internal void RaiseQuerySubmitted(AutoSuggestBox sender, AutoSuggestBoxQuerySubmittedEventArgs args);
    internal void RaiseSuggestionChosen(AutoSuggestBox sender, AutoSuggestBoxSuggestionChosenEventArgs args);
    internal void RaiseTextChanged(AutoSuggestBox sender, AutoSuggestBoxTextChangedEventArgs args);
    [AsyncStateMachineAttribute("Microsoft.Toolkit.Uwp.UI.Controls.TokenizingTextBox/<TokenizingTextBox_CharacterReceived>d__31")]
private void TokenizingTextBox_CharacterReceived(UIElement sender, CharacterReceivedRoutedEventArgs args);
    private object GetFocusedElement();
    protected virtual DependencyObject GetContainerForItemOverride();
    protected virtual bool IsItemItsOwnContainerOverride(object item);
    protected virtual void PrepareContainerForItemOverride(DependencyObject element, object item);
    private void TokenizingTextBoxItem_GotFocus(object sender, RoutedEventArgs e);
    private void TokenizingTextBoxItem_LostFocus(object sender, RoutedEventArgs e);
    public void AddTokenItem(object data, bool atEnd);
    [AsyncStateMachineAttribute("Microsoft.Toolkit.Uwp.UI.Controls.TokenizingTextBox/<ClearAsync>d__39")]
public Task ClearAsync();
    [AsyncStateMachineAttribute("Microsoft.Toolkit.Uwp.UI.Controls.TokenizingTextBox/<AddTokenAsync>d__40")]
internal Task AddTokenAsync(object data, Nullable`1<bool> atEnd);
    protected void UpdateCurrentTextEdit(ITokenStringContainer edit);
    protected virtual AutomationPeer OnCreateAutomationPeer();
    [AsyncStateMachineAttribute("Microsoft.Toolkit.Uwp.UI.Controls.TokenizingTextBox/<RemoveTokenAsync>d__43")]
private Task`1<bool> RemoveTokenAsync(TokenizingTextBoxItem item, object data);
    private void GuardAgainstPlaceholderTextLayoutIssue();
    [CompilerGeneratedAttribute]
public void add_TextChanged(TypedEventHandler`2<AutoSuggestBox, AutoSuggestBoxTextChangedEventArgs> value);
    [CompilerGeneratedAttribute]
public void remove_TextChanged(TypedEventHandler`2<AutoSuggestBox, AutoSuggestBoxTextChangedEventArgs> value);
    [CompilerGeneratedAttribute]
public void add_SuggestionChosen(TypedEventHandler`2<AutoSuggestBox, AutoSuggestBoxSuggestionChosenEventArgs> value);
    [CompilerGeneratedAttribute]
public void remove_SuggestionChosen(TypedEventHandler`2<AutoSuggestBox, AutoSuggestBoxSuggestionChosenEventArgs> value);
    [CompilerGeneratedAttribute]
public void add_QuerySubmitted(TypedEventHandler`2<AutoSuggestBox, AutoSuggestBoxQuerySubmittedEventArgs> value);
    [CompilerGeneratedAttribute]
public void remove_QuerySubmitted(TypedEventHandler`2<AutoSuggestBox, AutoSuggestBoxQuerySubmittedEventArgs> value);
    [CompilerGeneratedAttribute]
public void add_TokenItemAdding(TypedEventHandler`2<TokenizingTextBox, TokenItemAddingEventArgs> value);
    [CompilerGeneratedAttribute]
public void remove_TokenItemAdding(TypedEventHandler`2<TokenizingTextBox, TokenItemAddingEventArgs> value);
    [CompilerGeneratedAttribute]
public void add_TokenItemAdded(TypedEventHandler`2<TokenizingTextBox, object> value);
    [CompilerGeneratedAttribute]
public void remove_TokenItemAdded(TypedEventHandler`2<TokenizingTextBox, object> value);
    [CompilerGeneratedAttribute]
public void add_TokenItemRemoving(TypedEventHandler`2<TokenizingTextBox, TokenItemRemovingEventArgs> value);
    [CompilerGeneratedAttribute]
public void remove_TokenItemRemoving(TypedEventHandler`2<TokenizingTextBox, TokenItemRemovingEventArgs> value);
    [CompilerGeneratedAttribute]
public void add_TokenItemRemoved(TypedEventHandler`2<TokenizingTextBox, object> value);
    [CompilerGeneratedAttribute]
public void remove_TokenItemRemoved(TypedEventHandler`2<TokenizingTextBox, object> value);
    private static void TextPropertyChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    private static void OnMaximumTokensChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    public Style get_AutoSuggestBoxStyle();
    public void set_AutoSuggestBoxStyle(Style value);
    public Style get_AutoSuggestBoxTextBoxStyle();
    public void set_AutoSuggestBoxTextBoxStyle(Style value);
    public string get_TextMemberPath();
    public void set_TextMemberPath(string value);
    public DataTemplate get_TokenItemTemplate();
    public void set_TokenItemTemplate(DataTemplate value);
    public DataTemplateSelector get_TokenItemTemplateSelector();
    public void set_TokenItemTemplateSelector(DataTemplateSelector value);
    public string get_TokenDelimiter();
    public void set_TokenDelimiter(string value);
    public double get_TokenSpacing();
    public void set_TokenSpacing(double value);
    public string get_PlaceholderText();
    public void set_PlaceholderText(string value);
    public IconSource get_QueryIcon();
    public void set_QueryIcon(IconSource value);
    public string get_Text();
    public void set_Text(string value);
    public object get_SuggestedItemsSource();
    public void set_SuggestedItemsSource(object value);
    public DataTemplate get_SuggestedItemTemplate();
    public void set_SuggestedItemTemplate(DataTemplate value);
    public DataTemplateSelector get_SuggestedItemTemplateSelector();
    public void set_SuggestedItemTemplateSelector(DataTemplateSelector value);
    public Style get_SuggestedItemContainerStyle();
    public void set_SuggestedItemContainerStyle(Style value);
    public bool get_TabNavigateBackOnArrow();
    public void set_TabNavigateBackOnArrow(bool value);
    public string get_SelectedTokenText();
    public int get_MaximumTokens();
    public void set_MaximumTokens(int value);
    private bool MoveFocusAndSelection(MoveDirection direction);
    private TokenizingTextBoxItem GetCurrentContainerItem();
    internal void SelectAllTokensAndText();
    internal void DeselectAllTokensAndText(TokenizingTextBoxItem ignoreItem);
    private void ClearAllTextSelections(TokenizingTextBoxItem ignoreItem);
    internal bool SelectPreviousItem(TokenizingTextBoxItem item);
    internal bool SelectNextItem(TokenizingTextBoxItem item);
    private bool SelectNewItem(TokenizingTextBoxItem item, int increment, Func`2<int, bool> testFunc);
    [AsyncStateMachineAttribute("Microsoft.Toolkit.Uwp.UI.Controls.TokenizingTextBox/<TokenizingTextBoxItem_ClearAllAction>d__143")]
private void TokenizingTextBoxItem_ClearAllAction(TokenizingTextBoxItem sender, RoutedEventArgs args);
    [AsyncStateMachineAttribute("Microsoft.Toolkit.Uwp.UI.Controls.TokenizingTextBox/<TokenizingTextBoxItem_ClearClicked>d__144")]
private void TokenizingTextBoxItem_ClearClicked(TokenizingTextBoxItem sender, RoutedEventArgs args);
    [AsyncStateMachineAttribute("Microsoft.Toolkit.Uwp.UI.Controls.TokenizingTextBox/<RemoveAllSelectedTokens>d__145")]
internal Task RemoveAllSelectedTokens();
    private void CopySelectedToClipboard();
    private string PrepareSelectionForClipboard();
    [CompilerGeneratedAttribute]
private void <OnApplyTemplate>b__27_0(object s, RoutedEventArgs e);
    [CompilerGeneratedAttribute]
private void <SelectAllTokensAndText>b__137_0();
    [CompilerGeneratedAttribute]
private bool <SelectNextItem>b__141_0(int i);
}
[TemplatePartAttribute]
[TemplatePartAttribute]
[TemplatePartAttribute]
public class Microsoft.Toolkit.Uwp.UI.Controls.TokenizingTextBoxItem : ListViewItem {
    private static string PART_AutoSuggestBox;
    private static string PART_TokensCounter;
    private AutoSuggestBox _autoSuggestBox;
    internal TextBox _autoSuggestTextBox;
    [CompilerGeneratedAttribute]
private TypedEventHandler`2<TokenizingTextBoxItem, RoutedEventArgs> AutoSuggestTextBoxLoaded;
    [CompilerGeneratedAttribute]
private bool <UseCharacterAsUser>k__BackingField;
    private bool _isSelectedFocusOnFirstCharacter;
    private bool _isSelectedFocusOnLastCharacter;
    private static string PART_ClearButton;
    private Button _clearButton;
    [CompilerGeneratedAttribute]
private TypedEventHandler`2<TokenizingTextBoxItem, RoutedEventArgs> ClearClicked;
    [CompilerGeneratedAttribute]
private TypedEventHandler`2<TokenizingTextBoxItem, RoutedEventArgs> ClearAllAction;
    public static DependencyProperty ClearButtonStyleProperty;
    internal static DependencyProperty OwnerProperty;
    internal bool UseCharacterAsUser { get; internal set; }
    private bool IsCaretAtStart { get; }
    private bool IsCaretAtEnd { get; }
    private bool IsAllSelected { get; }
    public Style ClearButtonStyle { get; public set; }
    internal TokenizingTextBox Owner { get; internal set; }
    private static TokenizingTextBoxItem();
    [CompilerGeneratedAttribute]
internal void add_AutoSuggestTextBoxLoaded(TypedEventHandler`2<TokenizingTextBoxItem, RoutedEventArgs> value);
    [CompilerGeneratedAttribute]
internal void remove_AutoSuggestTextBoxLoaded(TypedEventHandler`2<TokenizingTextBoxItem, RoutedEventArgs> value);
    [CompilerGeneratedAttribute]
internal bool get_UseCharacterAsUser();
    [CompilerGeneratedAttribute]
internal void set_UseCharacterAsUser(bool value);
    private bool get_IsCaretAtStart();
    private bool get_IsCaretAtEnd();
    private bool get_IsAllSelected();
    private void OnApplyTemplateAutoSuggestBox(AutoSuggestBox auto);
    [AsyncStateMachineAttribute("Microsoft.Toolkit.Uwp.UI.Controls.TokenizingTextBoxItem/<AutoSuggestBox_QuerySubmitted>d__20")]
private void AutoSuggestBox_QuerySubmitted(AutoSuggestBox sender, AutoSuggestBoxQuerySubmittedEventArgs args);
    private void AutoSuggestBox_SuggestionChosen(AutoSuggestBox sender, AutoSuggestBoxSuggestionChosenEventArgs args);
    private void AutoSuggestBox_TextChanged(AutoSuggestBox sender, AutoSuggestBoxTextChangedEventArgs args);
    private void AutoSuggestBox_PointerEntered(object sender, PointerRoutedEventArgs e);
    private void AutoSuggestBox_PointerExited(object sender, PointerRoutedEventArgs e);
    private void AutoSuggestBox_LostFocus(object sender, RoutedEventArgs e);
    private void AutoSuggestBox_GotFocus(object sender, RoutedEventArgs e);
    private void OnASBLoaded(object sender, RoutedEventArgs e);
    private void AutoSuggestTextBox_SelectionChanging(TextBox sender, TextBoxSelectionChangingEventArgs args);
    private void AutoSuggestTextBox_PreviewKeyDown(object sender, KeyRoutedEventArgs e);
    private void UpdateTokensCounter(TokenizingTextBoxItem ttbi);
    [CompilerGeneratedAttribute]
public void add_ClearClicked(TypedEventHandler`2<TokenizingTextBoxItem, RoutedEventArgs> value);
    [CompilerGeneratedAttribute]
public void remove_ClearClicked(TypedEventHandler`2<TokenizingTextBoxItem, RoutedEventArgs> value);
    [CompilerGeneratedAttribute]
public void add_ClearAllAction(TypedEventHandler`2<TokenizingTextBoxItem, RoutedEventArgs> value);
    [CompilerGeneratedAttribute]
public void remove_ClearAllAction(TypedEventHandler`2<TokenizingTextBoxItem, RoutedEventArgs> value);
    public Style get_ClearButtonStyle();
    public void set_ClearButtonStyle(Style value);
    internal TokenizingTextBox get_Owner();
    internal void set_Owner(TokenizingTextBox value);
    protected virtual void OnApplyTemplate();
    private void ClearButton_Click(object sender, RoutedEventArgs e);
    private void TokenizingTextBoxItem_RightTapped(object sender, RightTappedRoutedEventArgs e);
    private void TokenizingTextBoxItem_KeyDown(object sender, KeyRoutedEventArgs e);
    [CompilerGeneratedAttribute]
private void <OnASBLoaded>g__AutoSuggestTextBox_SelectionChanged|27_0(object box, RoutedEventArgs args);
    [AsyncStateMachineAttribute("Microsoft.Toolkit.Uwp.UI.Controls.TokenizingTextBoxItem/<<OnASBLoaded>g__AutoSuggestTextBox_TextChangingAsync|27_1>d")]
[CompilerGeneratedAttribute]
private void <OnASBLoaded>g__AutoSuggestTextBox_TextChangingAsync|27_1(TextBox o, TextBoxTextChangingEventArgs args);
}
public class Microsoft.Toolkit.Uwp.UI.Controls.TokenizingTextBoxStyleSelector : StyleSelector {
    [CompilerGeneratedAttribute]
private Style <TokenStyle>k__BackingField;
    [CompilerGeneratedAttribute]
private Style <TextStyle>k__BackingField;
    public Style TokenStyle { get; public set; }
    public Style TextStyle { get; public set; }
    [CompilerGeneratedAttribute]
public Style get_TokenStyle();
    [CompilerGeneratedAttribute]
public void set_TokenStyle(Style value);
    [CompilerGeneratedAttribute]
public Style get_TextStyle();
    [CompilerGeneratedAttribute]
public void set_TextStyle(Style value);
    protected virtual Style SelectStyleCore(object item, DependencyObject container);
}
public class Microsoft.Toolkit.Uwp.UI.Converters.RemoteSystemKindToSymbolConverter : object {
    public sealed virtual object Convert(object value, Type targetType, object parameter, string language);
    public sealed virtual object ConvertBack(object value, Type targetType, object parameter, string language);
}
internal static class ThisAssembly : object {
    internal static string AssemblyVersion;
    internal static string AssemblyFileVersion;
    internal static string AssemblyInformationalVersion;
    internal static string AssemblyName;
    internal static string AssemblyTitle;
    internal static string AssemblyConfiguration;
    internal static string GitCommitId;
    internal static bool IsPublicRelease;
    internal static bool IsPrerelease;
    internal static DateTime GitCommitDate;
    internal static string RootNamespace;
    private static ThisAssembly();
}
