public class Microsoft.Toolkit.Uwp.UI.Automation.Peers.BladeItemAutomationPeer : FrameworkElementAutomationPeer {
    private BladeItem OwnerBladeItem { get; }
    public BladeItemAutomationPeer(BladeItem owner);
    private BladeItem get_OwnerBladeItem();
    protected virtual AutomationControlType GetAutomationControlTypeCore();
    protected virtual string GetClassNameCore();
    protected virtual string GetNameCore();
    protected virtual int GetSizeOfSetCore();
    protected virtual int GetPositionInSetCore();
}
public class Microsoft.Toolkit.Uwp.UI.Automation.Peers.BladeViewAutomationPeer : ItemsControlAutomationPeer {
    private BladeView OwningBladeView { get; }
    public BladeViewAutomationPeer(BladeView owner);
    private BladeView get_OwningBladeView();
    protected virtual AutomationControlType GetAutomationControlTypeCore();
    protected virtual string GetClassNameCore();
    protected virtual string GetNameCore();
    protected virtual IList`1<AutomationPeer> GetChildrenCore();
}
public class Microsoft.Toolkit.Uwp.UI.Automation.Peers.CarouselAutomationPeer : ItemsControlAutomationPeer {
    public bool CanSelectMultiple { get; }
    public bool IsSelectionRequired { get; }
    private Carousel OwningCarousel { get; }
    public CarouselAutomationPeer(Carousel owner);
    public sealed virtual bool get_CanSelectMultiple();
    public sealed virtual bool get_IsSelectionRequired();
    private Carousel get_OwningCarousel();
    public sealed virtual IRawElementProviderSimple[] GetSelection();
    protected virtual AutomationControlType GetAutomationControlTypeCore();
    protected virtual string GetClassNameCore();
    protected virtual string GetNameCore();
    protected virtual object GetPatternCore(PatternInterface patternInterface);
    protected virtual IList`1<AutomationPeer> GetChildrenCore();
}
public class Microsoft.Toolkit.Uwp.UI.Automation.Peers.CarouselItemAutomationPeer : FrameworkElementAutomationPeer {
    public bool IsSelected { get; }
    public IRawElementProviderSimple SelectionContainer { get; }
    private CarouselItem OwnerCarouselItem { get; }
    public CarouselItemAutomationPeer(CarouselItem owner);
    public sealed virtual bool get_IsSelected();
    public sealed virtual IRawElementProviderSimple get_SelectionContainer();
    private CarouselItem get_OwnerCarouselItem();
    public sealed virtual void AddToSelection();
    public sealed virtual void RemoveFromSelection();
    public sealed virtual void Select();
    protected virtual AutomationControlType GetAutomationControlTypeCore();
    protected virtual string GetClassNameCore();
    protected virtual string GetNameCore();
    protected virtual object GetPatternCore(PatternInterface patternInterface);
    protected virtual int GetSizeOfSetCore();
    protected virtual int GetPositionInSetCore();
}
public class Microsoft.Toolkit.Uwp.UI.Automation.Peers.ExpanderAutomationPeer : FrameworkElementAutomationPeer {
    public ToggleState ToggleState { get; }
    private Expander OwningExpander { get; }
    public ExpanderAutomationPeer(Expander owner);
    public sealed virtual ToggleState get_ToggleState();
    private Expander get_OwningExpander();
    public sealed virtual void Toggle();
    protected virtual AutomationControlType GetAutomationControlTypeCore();
    protected virtual string GetClassNameCore();
    protected virtual string GetNameCore();
    protected virtual object GetPatternCore(PatternInterface patternInterface);
}
public enum Microsoft.Toolkit.Uwp.UI.Controls.BackButtonBehavior : Enum {
    public int value__;
    public static BackButtonBehavior Automatic;
    public static BackButtonBehavior Inline;
    public static BackButtonBehavior System;
    public static BackButtonBehavior Manual;
}
[TemplatePartAttribute]
[TemplatePartAttribute]
public class Microsoft.Toolkit.Uwp.UI.Controls.BladeItem : Expander {
    private Button _closeButton;
    private Button _enlargeButton;
    private double _normalModeWidth;
    private bool _loaded;
    [CompilerGeneratedAttribute]
private EventHandler`1<Visibility> VisibilityChanged;
    public static DependencyProperty TitleBarVisibilityProperty;
    public static DependencyProperty TitleBarBackgroundProperty;
    public static DependencyProperty CloseButtonBackgroundProperty;
    public static DependencyProperty IsOpenProperty;
    public static DependencyProperty CloseButtonForegroundProperty;
    private WeakReference`1<BladeView> _parentBladeView;
    public Brush CloseButtonForeground { get; public set; }
    public Visibility TitleBarVisibility { get; public set; }
    public Brush TitleBarBackground { get; public set; }
    public Brush CloseButtonBackground { get; public set; }
    public bool IsOpen { get; public set; }
    internal BladeView ParentBladeView { get; internal set; }
    private static BladeItem();
    protected virtual void OnApplyTemplate();
    protected virtual void OnExpanded(EventArgs args);
    protected virtual void OnCollapsed(EventArgs args);
    protected virtual AutomationPeer OnCreateAutomationPeer();
    private void OnSizeChanged(object sender, SizeChangedEventArgs sizeChangedEventArgs);
    private void CloseButton_Click(object sender, RoutedEventArgs e);
    private void EnlargeButton_Click(object sender, RoutedEventArgs e);
    [CompilerGeneratedAttribute]
public void add_VisibilityChanged(EventHandler`1<Visibility> value);
    [CompilerGeneratedAttribute]
public void remove_VisibilityChanged(EventHandler`1<Visibility> value);
    public Brush get_CloseButtonForeground();
    public void set_CloseButtonForeground(Brush value);
    public Visibility get_TitleBarVisibility();
    public void set_TitleBarVisibility(Visibility value);
    public Brush get_TitleBarBackground();
    public void set_TitleBarBackground(Brush value);
    public Brush get_CloseButtonBackground();
    public void set_CloseButtonBackground(Brush value);
    public bool get_IsOpen();
    public void set_IsOpen(bool value);
    internal BladeView get_ParentBladeView();
    internal void set_ParentBladeView(BladeView value);
    private static void IsOpenChangedCallback(DependencyObject dependencyObject, DependencyPropertyChangedEventArgs dependencyPropertyChangedEventArgs);
}
public enum Microsoft.Toolkit.Uwp.UI.Controls.BladeMode : Enum {
    public int value__;
    public static BladeMode Normal;
    public static BladeMode Fullscreen;
}
public class Microsoft.Toolkit.Uwp.UI.Controls.BladeView : ItemsControl {
    private ScrollViewer _scrollViewer;
    private Dictionary`2<BladeItem, Size> _cachedBladeItemSizes;
    [CompilerGeneratedAttribute]
private EventHandler`1<BladeItem> BladeOpened;
    [CompilerGeneratedAttribute]
private EventHandler`1<BladeItem> BladeClosed;
    public static DependencyProperty ActiveBladesProperty;
    public static DependencyProperty BladeModeProperty;
    public static DependencyProperty AutoCollapseCountThresholdProperty;
    public IList`1<BladeItem> ActiveBlades { get; public set; }
    public BladeMode BladeMode { get; public set; }
    public int AutoCollapseCountThreshold { get; public set; }
    private static BladeView();
    protected virtual void OnApplyTemplate();
    protected virtual DependencyObject GetContainerForItemOverride();
    protected virtual bool IsItemItsOwnContainerOverride(object item);
    protected virtual void PrepareContainerForItemOverride(DependencyObject element, object item);
    protected virtual void ClearContainerForItemOverride(DependencyObject element, object item);
    protected virtual AutomationPeer OnCreateAutomationPeer();
    private void CycleBlades();
    private BladeItem GetBladeItem(object item);
    [AsyncStateMachineAttribute("Microsoft.Toolkit.Uwp.UI.Controls.BladeView/<BladeOnVisibilityChanged>d__11")]
private void BladeOnVisibilityChanged(object sender, Visibility visibility);
    private ScrollViewer GetScrollViewer();
    private void AdjustBladeItemSize();
    private void ItemsVectorChanged(IObservableVector`1<object> sender, IVectorChangedEventArgs e);
    [CompilerGeneratedAttribute]
public void add_BladeOpened(EventHandler`1<BladeItem> value);
    [CompilerGeneratedAttribute]
public void remove_BladeOpened(EventHandler`1<BladeItem> value);
    [CompilerGeneratedAttribute]
public void add_BladeClosed(EventHandler`1<BladeItem> value);
    [CompilerGeneratedAttribute]
public void remove_BladeClosed(EventHandler`1<BladeItem> value);
    public IList`1<BladeItem> get_ActiveBlades();
    public void set_ActiveBlades(IList`1<BladeItem> value);
    public BladeMode get_BladeMode();
    public void set_BladeMode(BladeMode value);
    public int get_AutoCollapseCountThreshold();
    public void set_AutoCollapseCountThreshold(int value);
    private static void OnBladeModeChanged(DependencyObject dependencyObject, DependencyPropertyChangedEventArgs e);
    private static void OnOpenBladesChanged(DependencyObject dependencyObject, DependencyPropertyChangedEventArgs e);
    [CompilerGeneratedAttribute]
private void <.ctor>b__2_0(object sender, RoutedEventArgs e);
    [CompilerGeneratedAttribute]
private void <.ctor>b__2_1(object sender, SizeChangedEventArgs e);
    [CompilerGeneratedAttribute]
private void <BladeOnVisibilityChanged>b__11_0();
}
public class Microsoft.Toolkit.Uwp.UI.Controls.Carousel : ItemsControl {
    public static DependencyProperty SelectedItemProperty;
    public static DependencyProperty SelectedIndexProperty;
    public static DependencyProperty TransitionDurationProperty;
    public static DependencyProperty ItemDepthProperty;
    public static DependencyProperty EasingFunctionProperty;
    public static DependencyProperty ItemMarginProperty;
    public static DependencyProperty InvertPositiveProperty;
    public static DependencyProperty ItemRotationXProperty;
    public static DependencyProperty ItemRotationYProperty;
    public static DependencyProperty ItemRotationZProperty;
    public static DependencyProperty OrientationProperty;
    [CompilerGeneratedAttribute]
private SelectionChangedEventHandler SelectionChanged;
    public object SelectedItem { get; public set; }
    public int SelectedIndex { get; public set; }
    public int TransitionDuration { get; public set; }
    public int ItemDepth { get; public set; }
    public EasingFunctionBase EasingFunction { get; public set; }
    public int ItemMargin { get; public set; }
    public bool InvertPositive { get; public set; }
    public double ItemRotationX { get; public set; }
    public double ItemRotationY { get; public set; }
    public double ItemRotationZ { get; public set; }
    public Orientation Orientation { get; public set; }
    private static Carousel();
    public object get_SelectedItem();
    public void set_SelectedItem(object value);
    public int get_SelectedIndex();
    public void set_SelectedIndex(int value);
    public int get_TransitionDuration();
    public void set_TransitionDuration(int value);
    public int get_ItemDepth();
    public void set_ItemDepth(int value);
    public EasingFunctionBase get_EasingFunction();
    public void set_EasingFunction(EasingFunctionBase value);
    public int get_ItemMargin();
    public void set_ItemMargin(int value);
    public bool get_InvertPositive();
    public void set_InvertPositive(bool value);
    public double get_ItemRotationX();
    public void set_ItemRotationX(double value);
    public double get_ItemRotationY();
    public void set_ItemRotationY(double value);
    public double get_ItemRotationZ();
    public void set_ItemRotationZ(double value);
    public Orientation get_Orientation();
    public void set_Orientation(Orientation value);
    private static void OnCarouselPropertyChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    private void FocusContainerFromIndex(int index);
    [CompilerGeneratedAttribute]
public void add_SelectionChanged(SelectionChangedEventHandler value);
    [CompilerGeneratedAttribute]
public void remove_SelectionChanged(SelectionChangedEventHandler value);
    internal CarouselPanel GetItemsPanel();
    protected virtual DependencyObject GetContainerForItemOverride();
    private void UpdatePositions();
    private void CarouselControl_PointerReleased(object sender, PointerRoutedEventArgs e);
    private void Keyboard_KeyUp(object sender, KeyRoutedEventArgs e);
    internal void OnPointerWheelChanged(object sender, PointerRoutedEventArgs e);
    protected virtual bool IsItemItsOwnContainerOverride(object item);
    protected virtual void ClearContainerForItemOverride(DependencyObject element, object item);
    protected virtual void PrepareContainerForItemOverride(DependencyObject element, object item);
    protected virtual AutomationPeer OnCreateAutomationPeer();
    private void OnCarouselItemSelected(object sender, EventArgs e);
    internal void SetSelectedItem(CarouselItem owner);
    [CompilerGeneratedAttribute]
private void <.ctor>b__51_0(DependencyObject d, DependencyProperty dp);
}
public class Microsoft.Toolkit.Uwp.UI.Controls.CarouselItem : SelectorItem {
    private static string PointerOverState;
    private static string PointerOverSelectedState;
    private static string PressedState;
    private static string PressedSelectedState;
    private static string SelectedState;
    private static string NormalState;
    private WeakReference`1<Carousel> parentCarousel;
    [CompilerGeneratedAttribute]
private EventHandler Selected;
    internal Carousel ParentCarousel { get; internal set; }
    internal Carousel get_ParentCarousel();
    internal void set_ParentCarousel(Carousel value);
    protected virtual void OnPointerEntered(PointerRoutedEventArgs e);
    protected virtual void OnPointerExited(PointerRoutedEventArgs e);
    protected virtual void OnPointerPressed(PointerRoutedEventArgs e);
    protected virtual AutomationPeer OnCreateAutomationPeer();
    [CompilerGeneratedAttribute]
internal void add_Selected(EventHandler value);
    [CompilerGeneratedAttribute]
internal void remove_Selected(EventHandler value);
    private void OnIsSelectedChanged(DependencyObject sender, DependencyProperty dp);
}
public class Microsoft.Toolkit.Uwp.UI.Controls.CarouselPanel : Panel {
    private Storyboard storyboard;
    private double desiredWidth;
    private double desiredHeight;
    private Carousel carouselControl;
    public Carousel Carousel { get; }
    public Carousel get_Carousel();
    private void OnTapped(object sender, TappedRoutedEventArgs e);
    internal void OnManipulationDelta(object sender, ManipulationDeltaRoutedEventArgs e);
    internal void OnManipulationCompleted(object sender, ManipulationCompletedRoutedEventArgs e);
    internal void UpdatePosition();
    protected virtual Size MeasureOverride(Size availableSize);
    protected virtual Size ArrangeOverride(Size finalSize);
    private void ApplyProjection(UIElement element, Proj proj, Storyboard storyboard);
    private Proj GetProjectionFromManipulation(UIElement element, double delta);
    private Proj GetProjectionFromSelectedIndex(int childIndex);
    public static void AddAnimation(Storyboard storyboard, DependencyObject element, int duration, double toValue, string propertyPath, EasingFunctionBase easingFunction);
    [CompilerGeneratedAttribute]
private void <UpdatePosition>b__10_0(object sender, object o);
}
internal static class Microsoft.Toolkit.Uwp.UI.Controls.ControlHelpers : object {
    [CompilerGeneratedAttribute]
private static bool <IsXamlRootAvailable>k__BackingField;
    internal static bool IsXamlRootAvailable { get; }
    private static ControlHelpers();
    [CompilerGeneratedAttribute]
internal static bool get_IsXamlRootAvailable();
}
public enum Microsoft.Toolkit.Uwp.UI.Controls.ExpandDirection : Enum {
    public int value__;
    public static ExpandDirection Down;
    public static ExpandDirection Up;
    public static ExpandDirection Left;
    public static ExpandDirection Right;
}
[TemplateVisualStateAttribute]
[TemplateVisualStateAttribute]
[TemplateVisualStateAttribute]
[TemplateVisualStateAttribute]
[TemplateVisualStateAttribute]
[TemplateVisualStateAttribute]
[TemplateVisualStateAttribute]
[TemplateVisualStateAttribute]
[TemplateVisualStateAttribute]
[TemplateVisualStateAttribute]
[TemplateVisualStateAttribute]
[TemplateVisualStateAttribute]
[TemplatePartAttribute]
[TemplatePartAttribute]
[TemplatePartAttribute]
[ContentPropertyAttribute]
public class Microsoft.Toolkit.Uwp.UI.Controls.Expander : HeaderedContentControl {
    private static string DisplayModeAndDirectionStatesGroupStateContent;
    private static string StateContentVisibleLeft;
    private static string StateContentVisibleDown;
    private static string StateContentVisibleRight;
    private static string StateContentVisibleUp;
    private static string StateContentCollapsedLeft;
    private static string StateContentCollapsedDown;
    private static string StateContentCollapsedRight;
    private static string StateContentCollapsedUp;
    private static string ExpanderToggleButtonPart;
    private static string MainContentPart;
    private static string ExpandDirectionGroupStateContent;
    private static string StateContentLeftDirection;
    private static string StateContentDownDirection;
    private static string StateContentRightDirection;
    private static string StateContentUpDirection;
    private static string RootGridPart;
    private static string LayoutTransformerPart;
    [CompilerGeneratedAttribute]
private EventHandler Expanded;
    [CompilerGeneratedAttribute]
private EventHandler Collapsed;
    public static DependencyProperty IsExpandedProperty;
    public static DependencyProperty ExpandDirectionProperty;
    public static DependencyProperty ContentOverlayProperty;
    public static DependencyProperty HeaderStyleProperty;
    public bool IsExpanded { get; public set; }
    public ExpandDirection ExpandDirection { get; public set; }
    public UIElement ContentOverlay { get; public set; }
    public Style HeaderStyle { get; public set; }
    private static Expander();
    protected virtual void OnApplyTemplate();
    protected virtual void OnExpanded(EventArgs args);
    protected virtual void OnCollapsed(EventArgs args);
    protected virtual AutomationPeer OnCreateAutomationPeer();
    private void ExpanderToggleButtonPart_KeyDown(object sender, KeyRoutedEventArgs e);
    private void ExpandControl();
    private void CollapseControl();
    private void OnExpandDirectionChanged(bool useTransitions);
    private void OnDisplayModeOrIsExpandedChanged(bool useTransitions);
    private void UpdateDisplayModeOrExpanderDirection(bool useTransitions);
    private string GetDisplayModeVisualState(string collapsedState, string visibleState);
    [CompilerGeneratedAttribute]
public void add_Expanded(EventHandler value);
    [CompilerGeneratedAttribute]
public void remove_Expanded(EventHandler value);
    [CompilerGeneratedAttribute]
public void add_Collapsed(EventHandler value);
    [CompilerGeneratedAttribute]
public void remove_Collapsed(EventHandler value);
    public bool get_IsExpanded();
    public void set_IsExpanded(bool value);
    public ExpandDirection get_ExpandDirection();
    public void set_ExpandDirection(ExpandDirection value);
    public UIElement get_ContentOverlay();
    public void set_ContentOverlay(UIElement value);
    public Style get_HeaderStyle();
    public void set_HeaderStyle(Style value);
    private static void OnIsExpandedPropertyChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    private static void OnExpandDirectionChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
}
public class Microsoft.Toolkit.Uwp.UI.Controls.GridSplitter : Control {
    internal static int GripperCustomCursorDefaultResource;
    internal static CoreCursor ColumnsSplitterCursor;
    internal static CoreCursor RowSplitterCursor;
    [CompilerGeneratedAttribute]
private CoreCursor <PreviousCursor>k__BackingField;
    private GridResizeDirection _resizeDirection;
    private GridResizeBehavior _resizeBehavior;
    private GripperHoverWrapper _hoverWrapper;
    private TextBlock _gripperDisplay;
    private bool _pressed;
    private bool _dragging;
    private bool _pointerEntered;
    private static string GripperBarVertical;
    private static string GripperBarHorizontal;
    private static string GripperDisplayFont;
    public static DependencyProperty ElementProperty;
    public static DependencyProperty ResizeDirectionProperty;
    public static DependencyProperty ResizeBehaviorProperty;
    public static DependencyProperty GripperForegroundProperty;
    public static DependencyProperty ParentLevelProperty;
    public static DependencyProperty GripperCursorProperty;
    public static DependencyProperty GripperCustomCursorResourceProperty;
    public static DependencyProperty CursorBehaviorProperty;
    internal CoreCursor PreviousCursor { get; internal set; }
    private FrameworkElement TargetControl { get; }
    private Grid Resizable { get; }
    private ColumnDefinition CurrentColumn { get; }
    private ColumnDefinition SiblingColumn { get; }
    private RowDefinition CurrentRow { get; }
    private RowDefinition SiblingRow { get; }
    public UIElement Element { get; public set; }
    public GridResizeDirection ResizeDirection { get; public set; }
    public GridResizeBehavior ResizeBehavior { get; public set; }
    public Brush GripperForeground { get; public set; }
    public int ParentLevel { get; public set; }
    public GripperCursorType GripperCursor { get; public set; }
    public int GripperCustomCursorResource { get; public set; }
    public SplitterCursorBehavior CursorBehavior { get; public set; }
    private static GridSplitter();
    [CompilerGeneratedAttribute]
internal CoreCursor get_PreviousCursor();
    [CompilerGeneratedAttribute]
internal void set_PreviousCursor(CoreCursor value);
    private FrameworkElement get_TargetControl();
    private Grid get_Resizable();
    private ColumnDefinition get_CurrentColumn();
    private ColumnDefinition get_SiblingColumn();
    private RowDefinition get_CurrentRow();
    private RowDefinition get_SiblingRow();
    protected virtual void OnApplyTemplate();
    private void GridSplitter_PointerReleased(object sender, PointerRoutedEventArgs e);
    private void GridSplitter_PointerPressed(object sender, PointerRoutedEventArgs e);
    private void GridSplitter_PointerExited(object sender, PointerRoutedEventArgs e);
    private void GridSplitter_PointerEntered(object sender, PointerRoutedEventArgs e);
    private void GridSplitter_ManipulationCompleted(object sender, ManipulationCompletedRoutedEventArgs e);
    private void GridSplitter_ManipulationStarted(object sender, ManipulationStartedRoutedEventArgs e);
    private void GridSplitter_Loaded(object sender, RoutedEventArgs e);
    private void CreateGripperDisplay();
    protected virtual void OnKeyDown(KeyRoutedEventArgs e);
    protected virtual void OnManipulationStarted(ManipulationStartedRoutedEventArgs e);
    protected virtual void OnManipulationCompleted(ManipulationCompletedRoutedEventArgs e);
    protected virtual void OnManipulationDelta(ManipulationDeltaRoutedEventArgs e);
    private bool VerticalMove(double verticalChange);
    private bool HorizontalMove(double horizontalChange);
    private static bool IsStarColumn(ColumnDefinition definition);
    private static bool IsStarRow(RowDefinition definition);
    private bool SetColumnWidth(ColumnDefinition columnDefinition, double horizontalChange, GridUnitType unitType);
    private bool IsValidColumnWidth(ColumnDefinition columnDefinition, double horizontalChange);
    private bool SetRowHeight(RowDefinition rowDefinition, double verticalChange, GridUnitType unitType);
    private bool IsValidRowHeight(RowDefinition rowDefinition, double verticalChange);
    private int GetTargetedColumn();
    private int GetTargetedRow();
    private int GetSiblingColumn();
    private int GetSiblingRow();
    private int GetTargetIndex(int currentIndex);
    private int GetSiblingIndex(int currentIndex);
    private GridResizeDirection GetResizeDirection();
    private GridResizeBehavior GetResizeBehavior();
    public UIElement get_Element();
    public void set_Element(UIElement value);
    public GridResizeDirection get_ResizeDirection();
    public void set_ResizeDirection(GridResizeDirection value);
    public GridResizeBehavior get_ResizeBehavior();
    public void set_ResizeBehavior(GridResizeBehavior value);
    public Brush get_GripperForeground();
    public void set_GripperForeground(Brush value);
    public int get_ParentLevel();
    public void set_ParentLevel(int value);
    public GripperCursorType get_GripperCursor();
    public void set_GripperCursor(GripperCursorType value);
    public int get_GripperCustomCursorResource();
    public void set_GripperCustomCursorResource(int value);
    public SplitterCursorBehavior get_CursorBehavior();
    public void set_CursorBehavior(SplitterCursorBehavior value);
    private static void OnGripperForegroundPropertyChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    private static void OnGripperCursorPropertyChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    private static void GripperCustomCursorResourcePropertyChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    private static void CursorBehaviorPropertyChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    private static void OnElementPropertyChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
}
internal class Microsoft.Toolkit.Uwp.UI.Controls.GripperHoverWrapper : object {
    private GridResizeDirection _gridSplitterDirection;
    private CoreCursor _splitterPreviousPointer;
    private CoreCursor _previousCursor;
    private GripperCursorType _gripperCursor;
    private int _gripperCustomCursorResource;
    private bool _isDragging;
    private UIElement _element;
    internal GripperCursorType GripperCursor { get; internal set; }
    internal int GripperCustomCursorResource { get; internal set; }
    internal GripperHoverWrapper(UIElement element, GridResizeDirection gridSplitterDirection, GripperCursorType gripperCursor, int gripperCustomCursorResource);
    internal GripperCursorType get_GripperCursor();
    internal void set_GripperCursor(GripperCursorType value);
    internal int get_GripperCustomCursorResource();
    internal void set_GripperCustomCursorResource(int value);
    internal void UpdateHoverElement(UIElement element);
    private void Element_PointerExited(object sender, PointerRoutedEventArgs e);
    private void Element_PointerEntered(object sender, PointerRoutedEventArgs e);
    private void UpdateDisplayCursor();
    internal void SplitterManipulationStarted(object sender, ManipulationStartedRoutedEventArgs e);
    internal void SplitterManipulationCompleted(object sender, ManipulationCompletedRoutedEventArgs e);
    internal void UnhookEvents();
}
public class Microsoft.Toolkit.Uwp.UI.Controls.HeaderedContentControl : ContentControl {
    private static string PartHeaderPresenter;
    public static DependencyProperty HeaderProperty;
    public static DependencyProperty HeaderTemplateProperty;
    public static DependencyProperty OrientationProperty;
    public Orientation Orientation { get; public set; }
    public object Header { get; public set; }
    public DataTemplate HeaderTemplate { get; public set; }
    private static HeaderedContentControl();
    public Orientation get_Orientation();
    public void set_Orientation(Orientation value);
    public object get_Header();
    public void set_Header(object value);
    public DataTemplate get_HeaderTemplate();
    public void set_HeaderTemplate(DataTemplate value);
    protected virtual void OnApplyTemplate();
    protected virtual void OnHeaderChanged(object oldValue, object newValue);
    private static void OnOrientationChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    private static void OnHeaderChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    private void SetHeaderVisibility();
    private void SetOrientation();
}
public class Microsoft.Toolkit.Uwp.UI.Controls.HeaderedItemsControl : ItemsControl {
    public static DependencyProperty HeaderProperty;
    public static DependencyProperty HeaderTemplateProperty;
    public static DependencyProperty OrientationProperty;
    public object Header { get; public set; }
    public DataTemplate HeaderTemplate { get; public set; }
    public Orientation Orientation { get; public set; }
    private static HeaderedItemsControl();
    public object get_Header();
    public void set_Header(object value);
    public DataTemplate get_HeaderTemplate();
    public void set_HeaderTemplate(DataTemplate value);
    public Orientation get_Orientation();
    public void set_Orientation(Orientation value);
    protected virtual void OnHeaderChanged(object oldValue, object newValue);
    private static void OnHeaderChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
}
[ContentPropertyAttribute]
public class Microsoft.Toolkit.Uwp.UI.Controls.LayoutTransformControl : Control {
    private static double AcceptableDelta;
    private static int DecimalsAfterRound;
    private Dictionary`2<Transform, List`1<PropertyChangeEventSource`1<double>>> _transformPropertyChangeEventSources;
    private Panel _layoutRoot;
    private MatrixTransform _matrixTransform;
    private Matrix _transformation;
    private Size _childActualSize;
    public static DependencyProperty ChildProperty;
    public static DependencyProperty TransformProperty;
    public FrameworkElement Child { get; public set; }
    public Transform Transform { get; public set; }
    private static LayoutTransformControl();
    protected virtual void OnApplyTemplate();
    public void TransformUpdated();
    private static bool IsSizeSmaller(Size a, Size b);
    private void ProcessTransform();
    private Matrix GetTransformMatrix(Transform transform);
    protected virtual Size MeasureOverride(Size availableSize);
    protected virtual Size ArrangeOverride(Size finalSize);
    private Size ComputeLargestTransformedSize(Size arrangeBounds);
    public FrameworkElement get_Child();
    public void set_Child(FrameworkElement value);
    private static void ChildChanged(DependencyObject o, DependencyPropertyChangedEventArgs e);
    private void OnChildChanged(FrameworkElement newContent);
    public Transform get_Transform();
    public void set_Transform(Transform value);
    private static void TransformChanged(DependencyObject o, DependencyPropertyChangedEventArgs e);
    private void OnTransformChanged(Transform oldValue, Transform newValue);
    private void UnsubscribeFromTransformPropertyChanges(Transform transform);
    private void SubscribeToTransformPropertyChanges(Transform transform);
    private void OnTransformPropertyChanged(object sender, double e);
}
[TemplatePartAttribute]
[TemplatePartAttribute]
[TemplateVisualStateAttribute]
[TemplateVisualStateAttribute]
[TemplateVisualStateAttribute]
[TemplateVisualStateAttribute]
public class Microsoft.Toolkit.Uwp.UI.Controls.ListDetailsView : ItemsControl {
    private Nullable`1<AppViewBackButtonVisibility> _previousSystemBackButtonVisibility;
    private bool _previousNavigationViewBackEnabled;
    private int _previousNavigationViewBackVisibilty;
    private Button _inlineBackButton;
    private object _navigationView;
    private Frame _frame;
    private static string SelectionStates;
    private static string NoSelectionWideState;
    private static string HasSelectionWideState;
    private static string NoSelectionNarrowState;
    private static string HasSelectionNarrowState;
    private static string HasItemsStates;
    private static string HasItemsState;
    private static string HasNoItemsState;
    private static string PartRootPanel;
    private static string PartDetailsPresenter;
    private static string PartDetailsPanel;
    private static string PartMainList;
    private static string PartBackButton;
    private static string PartHeaderContentPresenter;
    private static string PartListPaneCommandBarPanel;
    private static string PartDetailsPaneCommandBarPanel;
    private ContentPresenter _detailsPresenter;
    private TwoPaneView _twoPaneView;
    private VisualStateGroup _selectionStateGroup;
    [CompilerGeneratedAttribute]
private SelectionChangedEventHandler SelectionChanged;
    [CompilerGeneratedAttribute]
private EventHandler`1<ListDetailsViewState> ViewStateChanged;
    public static DependencyProperty SelectedIndexProperty;
    public static DependencyProperty SelectedItemProperty;
    public static DependencyProperty DetailsTemplateProperty;
    public static DependencyProperty DetailsContentTemplateSelectorProperty;
    public static DependencyProperty ListPaneItemTemplateSelectorProperty;
    public static DependencyProperty DetailsPaneBackgroundProperty;
    public static DependencyProperty ListPaneBackgroundProperty;
    public static DependencyProperty ListHeaderProperty;
    public static DependencyProperty ListHeaderTemplateProperty;
    public static DependencyProperty ListPaneEmptyContentProperty;
    public static DependencyProperty ListPaneEmptyContentTemplateProperty;
    public static DependencyProperty DetailsHeaderProperty;
    public static DependencyProperty DetailsHeaderTemplateProperty;
    public static DependencyProperty ListPaneWidthProperty;
    public static DependencyProperty NoSelectionContentProperty;
    public static DependencyProperty NoSelectionContentTemplateProperty;
    public static DependencyProperty ViewStateProperty;
    public static DependencyProperty ListCommandBarProperty;
    public static DependencyProperty DetailsCommandBarProperty;
    public static DependencyProperty CompactModeThresholdWidthProperty;
    public static DependencyProperty BackButtonBehaviorProperty;
    [CompilerGeneratedAttribute]
private Func`2<object, object> <MapDetails>k__BackingField;
    public int SelectedIndex { get; public set; }
    public object SelectedItem { get; public set; }
    public DataTemplate DetailsTemplate { get; public set; }
    public DataTemplateSelector DetailsContentTemplateSelector { get; public set; }
    public DataTemplateSelector ListPaneItemTemplateSelector { get; public set; }
    public Brush DetailsPaneBackground { get; public set; }
    public Brush ListPaneBackground { get; public set; }
    public object ListHeader { get; public set; }
    public DataTemplate ListHeaderTemplate { get; public set; }
    public object ListPaneEmptyContent { get; public set; }
    public DataTemplate ListPaneEmptyContentTemplate { get; public set; }
    public object DetailsHeader { get; public set; }
    public DataTemplate DetailsHeaderTemplate { get; public set; }
    public double ListPaneWidth { get; public set; }
    public object NoSelectionContent { get; public set; }
    public DataTemplate NoSelectionContentTemplate { get; public set; }
    public ListDetailsViewState ViewState { get; private set; }
    public CommandBar ListCommandBar { get; public set; }
    public CommandBar DetailsCommandBar { get; public set; }
    public double CompactModeThresholdWidth { get; public set; }
    public BackButtonBehavior BackButtonBehavior { get; public set; }
    public Func`2<object, object> MapDetails { get; public set; }
    private static ListDetailsView();
    private void SetBackButtonVisibility(Nullable`1<ListDetailsViewState> previousState);
    private void SetNavigationViewBackButtonState(int visible, bool enabled);
    private void OnFrameNavigating(object sender, NavigatingCancelEventArgs args);
    private void OnBackRequested(object sender, BackRequestedEventArgs args);
    private void OnInlineBackButtonClicked(object sender, RoutedEventArgs e);
    public void ClearSelectedItem();
    protected virtual void OnApplyTemplate();
    private void OnSelectedIndexChanged(DependencyPropertyChangedEventArgs e);
    private void OnSelectedItemChanged(DependencyPropertyChangedEventArgs e);
    private void OnLoaded(object sender, RoutedEventArgs e);
    private void OnUnloaded(object sender, RoutedEventArgs e);
    private void UpdateSelection(object oldSelection, object newSelection);
    private void SetListHeaderVisibility();
    private void UpdateView(bool animate);
    private void UpdateViewState();
    private void SetVisualState(bool animate);
    private void SetDetailsContent();
    private void OnListCommandBarChanged();
    private void OnDetailsCommandBarChanged();
    private void OnCommandBarChanged(string panelName, CommandBar commandbar);
    private void SetListSelectionWithKeyboardFocusOnVisualStateChanged(ListDetailsViewState viewState);
    private void SetListSelectionWithKeyboardFocus(bool singleSelectionFollowsFocus);
    private void OnSelectionStateChanged(object sender, VisualStateChangedEventArgs e);
    private void SetFocus(ListDetailsViewState viewState);
    private void FocusFirstFocusableElementInDetails();
    private void FocusItemList();
    private void OnModeChanged(TwoPaneView sender, object args);
    protected virtual void OnItemsChanged(object e);
    private void OnListPaneWidthChanged();
    [CompilerGeneratedAttribute]
public void add_SelectionChanged(SelectionChangedEventHandler value);
    [CompilerGeneratedAttribute]
public void remove_SelectionChanged(SelectionChangedEventHandler value);
    [CompilerGeneratedAttribute]
public void add_ViewStateChanged(EventHandler`1<ListDetailsViewState> value);
    [CompilerGeneratedAttribute]
public void remove_ViewStateChanged(EventHandler`1<ListDetailsViewState> value);
    private void OnSelectionChanged(SelectionChangedEventArgs e);
    public int get_SelectedIndex();
    public void set_SelectedIndex(int value);
    public object get_SelectedItem();
    public void set_SelectedItem(object value);
    public DataTemplate get_DetailsTemplate();
    public void set_DetailsTemplate(DataTemplate value);
    public DataTemplateSelector get_DetailsContentTemplateSelector();
    public void set_DetailsContentTemplateSelector(DataTemplateSelector value);
    public DataTemplateSelector get_ListPaneItemTemplateSelector();
    public void set_ListPaneItemTemplateSelector(DataTemplateSelector value);
    public Brush get_DetailsPaneBackground();
    public void set_DetailsPaneBackground(Brush value);
    public Brush get_ListPaneBackground();
    public void set_ListPaneBackground(Brush value);
    public object get_ListHeader();
    public void set_ListHeader(object value);
    public DataTemplate get_ListHeaderTemplate();
    public void set_ListHeaderTemplate(DataTemplate value);
    public object get_ListPaneEmptyContent();
    public void set_ListPaneEmptyContent(object value);
    public DataTemplate get_ListPaneEmptyContentTemplate();
    public void set_ListPaneEmptyContentTemplate(DataTemplate value);
    public object get_DetailsHeader();
    public void set_DetailsHeader(object value);
    public DataTemplate get_DetailsHeaderTemplate();
    public void set_DetailsHeaderTemplate(DataTemplate value);
    public double get_ListPaneWidth();
    public void set_ListPaneWidth(double value);
    public object get_NoSelectionContent();
    public void set_NoSelectionContent(object value);
    public DataTemplate get_NoSelectionContentTemplate();
    public void set_NoSelectionContentTemplate(DataTemplate value);
    public ListDetailsViewState get_ViewState();
    private void set_ViewState(ListDetailsViewState value);
    public CommandBar get_ListCommandBar();
    public void set_ListCommandBar(CommandBar value);
    public CommandBar get_DetailsCommandBar();
    public void set_DetailsCommandBar(CommandBar value);
    public double get_CompactModeThresholdWidth();
    public void set_CompactModeThresholdWidth(double value);
    public BackButtonBehavior get_BackButtonBehavior();
    public void set_BackButtonBehavior(BackButtonBehavior value);
    [CompilerGeneratedAttribute]
public Func`2<object, object> get_MapDetails();
    [CompilerGeneratedAttribute]
public void set_MapDetails(Func`2<object, object> value);
    private static void OnDetailsCommandBarChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    private static void OnListCommandBarChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    private static void OnSelectedItemChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    private static void OnSelectedIndexChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    private static void OnBackButtonBehaviorChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    private static void OnListHeaderChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    private static void OnListPaneWidthChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
}
public enum Microsoft.Toolkit.Uwp.UI.Controls.ListDetailsViewState : Enum {
    public int value__;
    public static ListDetailsViewState List;
    public static ListDetailsViewState Details;
    public static ListDetailsViewState Both;
}
internal class Microsoft.Toolkit.Uwp.UI.Controls.Microsoft_Toolkit_Uwp_UI_Controls_Layout_XamlTypeInfo.Activator : MulticastDelegate {
    public Activator(object object, IntPtr method);
    public virtual object Invoke();
    public virtual IAsyncResult BeginInvoke(AsyncCallback callback, object object);
    public virtual object EndInvoke(IAsyncResult result);
}
internal class Microsoft.Toolkit.Uwp.UI.Controls.Microsoft_Toolkit_Uwp_UI_Controls_Layout_XamlTypeInfo.AddToCollection : MulticastDelegate {
    public AddToCollection(object object, IntPtr method);
    public virtual void Invoke(object instance, object item);
    public virtual IAsyncResult BeginInvoke(object instance, object item, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
internal class Microsoft.Toolkit.Uwp.UI.Controls.Microsoft_Toolkit_Uwp_UI_Controls_Layout_XamlTypeInfo.AddToDictionary : MulticastDelegate {
    public AddToDictionary(object object, IntPtr method);
    public virtual void Invoke(object instance, object key, object item);
    public virtual IAsyncResult BeginInvoke(object instance, object key, object item, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
internal class Microsoft.Toolkit.Uwp.UI.Controls.Microsoft_Toolkit_Uwp_UI_Controls_Layout_XamlTypeInfo.BoxInstanceMethod : MulticastDelegate {
    public BoxInstanceMethod(object object, IntPtr method);
    public virtual object Invoke(object instance);
    public virtual IAsyncResult BeginInvoke(object instance, AsyncCallback callback, object object);
    public virtual object EndInvoke(IAsyncResult result);
}
internal class Microsoft.Toolkit.Uwp.UI.Controls.Microsoft_Toolkit_Uwp_UI_Controls_Layout_XamlTypeInfo.CreateFromStringMethod : MulticastDelegate {
    public CreateFromStringMethod(object object, IntPtr method);
    public virtual object Invoke(string args);
    public virtual IAsyncResult BeginInvoke(string args, AsyncCallback callback, object object);
    public virtual object EndInvoke(IAsyncResult result);
}
internal class Microsoft.Toolkit.Uwp.UI.Controls.Microsoft_Toolkit_Uwp_UI_Controls_Layout_XamlTypeInfo.Getter : MulticastDelegate {
    public Getter(object object, IntPtr method);
    public virtual object Invoke(object instance);
    public virtual IAsyncResult BeginInvoke(object instance, AsyncCallback callback, object object);
    public virtual object EndInvoke(IAsyncResult result);
}
internal class Microsoft.Toolkit.Uwp.UI.Controls.Microsoft_Toolkit_Uwp_UI_Controls_Layout_XamlTypeInfo.Setter : MulticastDelegate {
    public Setter(object object, IntPtr method);
    public virtual void Invoke(object instance, object value);
    public virtual IAsyncResult BeginInvoke(object instance, object value, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
[GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks", " 10.0.19041.685")]
[DebuggerNonUserCodeAttribute]
internal class Microsoft.Toolkit.Uwp.UI.Controls.Microsoft_Toolkit_Uwp_UI_Controls_Layout_XamlTypeInfo.XamlMember : object {
    private XamlTypeInfoProvider _provider;
    private string _name;
    private bool _isAttachable;
    private bool _isDependencyProperty;
    private bool _isReadOnly;
    private string _typeName;
    private string _targetTypeName;
    [CompilerGeneratedAttribute]
private Getter <Getter>k__BackingField;
    [CompilerGeneratedAttribute]
private Setter <Setter>k__BackingField;
    public string Name { get; }
    public IXamlType Type { get; }
    public IXamlType TargetType { get; }
    public bool IsAttachable { get; }
    public bool IsDependencyProperty { get; }
    public bool IsReadOnly { get; }
    public Getter Getter { get; public set; }
    public Setter Setter { get; public set; }
    public XamlMember(XamlTypeInfoProvider provider, string name, string typeName);
    public sealed virtual string get_Name();
    public sealed virtual IXamlType get_Type();
    public void SetTargetTypeName(string targetTypeName);
    public sealed virtual IXamlType get_TargetType();
    public void SetIsAttachable();
    public sealed virtual bool get_IsAttachable();
    public void SetIsDependencyProperty();
    public sealed virtual bool get_IsDependencyProperty();
    public void SetIsReadOnly();
    public sealed virtual bool get_IsReadOnly();
    [CompilerGeneratedAttribute]
public Getter get_Getter();
    [CompilerGeneratedAttribute]
public void set_Getter(Getter value);
    public sealed virtual object GetValue(object instance);
    [CompilerGeneratedAttribute]
public Setter get_Setter();
    [CompilerGeneratedAttribute]
public void set_Setter(Setter value);
    public sealed virtual void SetValue(object instance, object value);
}
[GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks", " 10.0.19041.685")]
[DebuggerNonUserCodeAttribute]
public class Microsoft.Toolkit.Uwp.UI.Controls.Microsoft_Toolkit_Uwp_UI_Controls_Layout_XamlTypeInfo.XamlMetaDataProvider : object {
    private XamlTypeInfoProvider _provider;
    private XamlTypeInfoProvider Provider { get; }
    private XamlTypeInfoProvider get_Provider();
    public sealed virtual IXamlType GetXamlType(Type type);
    public sealed virtual IXamlType GetXamlType(string fullName);
    public sealed virtual XmlnsDefinition[] GetXmlnsDefinitions();
}
[GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks", " 10.0.19041.685")]
[DebuggerNonUserCodeAttribute]
internal class Microsoft.Toolkit.Uwp.UI.Controls.Microsoft_Toolkit_Uwp_UI_Controls_Layout_XamlTypeInfo.XamlSystemBaseType : object {
    private string _fullName;
    private Type _underlyingType;
    public string FullName { get; }
    public Type UnderlyingType { get; }
    public IXamlType BaseType { get; }
    public IXamlMember ContentProperty { get; }
    public bool IsArray { get; }
    public bool IsCollection { get; }
    public bool IsConstructible { get; }
    public bool IsDictionary { get; }
    public bool IsMarkupExtension { get; }
    public bool IsBindable { get; }
    public bool IsReturnTypeStub { get; }
    public bool IsLocalType { get; }
    public IXamlType ItemType { get; }
    public IXamlType KeyType { get; }
    public XamlSystemBaseType(string fullName, Type underlyingType);
    public sealed virtual string get_FullName();
    public sealed virtual Type get_UnderlyingType();
    public virtual IXamlType get_BaseType();
    public virtual IXamlMember get_ContentProperty();
    public virtual IXamlMember GetMember(string name);
    public virtual bool get_IsArray();
    public virtual bool get_IsCollection();
    public virtual bool get_IsConstructible();
    public virtual bool get_IsDictionary();
    public virtual bool get_IsMarkupExtension();
    public virtual bool get_IsBindable();
    public virtual bool get_IsReturnTypeStub();
    public virtual bool get_IsLocalType();
    public virtual IXamlType get_ItemType();
    public virtual IXamlType get_KeyType();
    public virtual object ActivateInstance();
    public virtual void AddToMap(object instance, object key, object item);
    public virtual void AddToVector(object instance, object item);
    public virtual void RunInitializer();
    public virtual object CreateFromString(string input);
}
[GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks", " 10.0.19041.685")]
[DebuggerNonUserCodeAttribute]
internal class Microsoft.Toolkit.Uwp.UI.Controls.Microsoft_Toolkit_Uwp_UI_Controls_Layout_XamlTypeInfo.XamlTypeInfoProvider : object {
    private Dictionary`2<string, IXamlType> _xamlTypeCacheByName;
    private Dictionary`2<Type, IXamlType> _xamlTypeCacheByType;
    private Dictionary`2<string, IXamlMember> _xamlMembers;
    private String[] _typeNameTable;
    private Type[] _typeTable;
    private List`1<IXamlMetadataProvider> _otherProviders;
    private List`1<IXamlMetadataProvider> OtherProviders { get; }
    public IXamlType GetXamlTypeByType(Type type);
    public IXamlType GetXamlTypeByName(string typeName);
    public IXamlMember GetMemberByLongName(string longMemberName);
    private void InitTypeTables();
    private int LookupTypeIndexByName(string typeName);
    private int LookupTypeIndexByType(Type type);
    private object Activate_0_BladeView();
    private object Activate_3_BladeItem();
    private object Activate_4_Expander();
    private object Activate_5_HeaderedContentControl();
    private object Activate_20_CarouselItem();
    private object Activate_22_Carousel();
    private object Activate_25_CarouselPanel();
    private object Activate_27_EmptyObjectToObjectConverter();
    private object Activate_29_BoolNegationConverter();
    private object Activate_30_LayoutTransformControl();
    private object Activate_34_GridSplitter();
    private object Activate_39_HeaderedItemsControl();
    private object Activate_40_ListDetailsView();
    private object Activate_48_TwoPaneView();
    private object Activate_54_OrbitView();
    private object Activate_56_OrbitViewItem();
    private object Activate_57_OrbitViewPanel();
    private object Activate_59_TreeViewNode();
    private void VectorAdd_2_IList(object instance, object item);
    private void VectorAdd_60_IList(object instance, object item);
    private IXamlType CreateXamlType(int typeIndex);
    private List`1<IXamlMetadataProvider> get_OtherProviders();
    private IXamlType CheckOtherMetadataProvidersForName(string typeName);
    private IXamlType CheckOtherMetadataProvidersForType(Type type);
    private object get_0_BladeView_ActiveBlades(object instance);
    private void set_0_BladeView_ActiveBlades(object instance, object Value);
    private object get_1_BladeItem_CloseButtonForeground(object instance);
    private void set_1_BladeItem_CloseButtonForeground(object instance, object Value);
    private object get_2_BladeItem_TitleBarBackground(object instance);
    private void set_2_BladeItem_TitleBarBackground(object instance, object Value);
    private object get_3_Expander_IsExpanded(object instance);
    private void set_3_Expander_IsExpanded(object instance, object Value);
    private object get_4_HeaderedContentControl_HeaderTemplate(object instance);
    private void set_4_HeaderedContentControl_HeaderTemplate(object instance, object Value);
    private object get_5_BladeItem_TitleBarVisibility(object instance);
    private void set_5_BladeItem_TitleBarVisibility(object instance, object Value);
    private object get_6_BladeItem_CloseButtonBackground(object instance);
    private void set_6_BladeItem_CloseButtonBackground(object instance, object Value);
    private object get_7_BladeItem_IsOpen(object instance);
    private void set_7_BladeItem_IsOpen(object instance, object Value);
    private object get_8_Expander_ExpandDirection(object instance);
    private void set_8_Expander_ExpandDirection(object instance, object Value);
    private object get_9_Expander_ContentOverlay(object instance);
    private void set_9_Expander_ContentOverlay(object instance, object Value);
    private object get_10_Expander_HeaderStyle(object instance);
    private void set_10_Expander_HeaderStyle(object instance, object Value);
    private object get_11_HeaderedContentControl_Orientation(object instance);
    private void set_11_HeaderedContentControl_Orientation(object instance, object Value);
    private object get_12_HeaderedContentControl_Header(object instance);
    private void set_12_HeaderedContentControl_Header(object instance, object Value);
    private object get_13_BladeView_BladeMode(object instance);
    private void set_13_BladeView_BladeMode(object instance, object Value);
    private object get_14_BladeView_AutoCollapseCountThreshold(object instance);
    private void set_14_BladeView_AutoCollapseCountThreshold(object instance, object Value);
    private object get_15_Carousel_EasingFunction(object instance);
    private void set_15_Carousel_EasingFunction(object instance, object Value);
    private object get_16_Carousel_SelectedItem(object instance);
    private void set_16_Carousel_SelectedItem(object instance, object Value);
    private object get_17_Carousel_SelectedIndex(object instance);
    private void set_17_Carousel_SelectedIndex(object instance, object Value);
    private object get_18_Carousel_TransitionDuration(object instance);
    private void set_18_Carousel_TransitionDuration(object instance, object Value);
    private object get_19_Carousel_ItemDepth(object instance);
    private void set_19_Carousel_ItemDepth(object instance, object Value);
    private object get_20_Carousel_ItemMargin(object instance);
    private void set_20_Carousel_ItemMargin(object instance, object Value);
    private object get_21_Carousel_InvertPositive(object instance);
    private void set_21_Carousel_InvertPositive(object instance, object Value);
    private object get_22_Carousel_ItemRotationX(object instance);
    private void set_22_Carousel_ItemRotationX(object instance, object Value);
    private object get_23_Carousel_ItemRotationY(object instance);
    private void set_23_Carousel_ItemRotationY(object instance, object Value);
    private object get_24_Carousel_ItemRotationZ(object instance);
    private void set_24_Carousel_ItemRotationZ(object instance, object Value);
    private object get_25_Carousel_Orientation(object instance);
    private void set_25_Carousel_Orientation(object instance, object Value);
    private object get_26_CarouselPanel_Carousel(object instance);
    private object get_27_EmptyObjectToObjectConverter_EmptyValue(object instance);
    private void set_27_EmptyObjectToObjectConverter_EmptyValue(object instance, object Value);
    private object get_28_EmptyObjectToObjectConverter_NotEmptyValue(object instance);
    private void set_28_EmptyObjectToObjectConverter_NotEmptyValue(object instance, object Value);
    private object get_29_LayoutTransformControl_Child(object instance);
    private void set_29_LayoutTransformControl_Child(object instance, object Value);
    private object get_30_LayoutTransformControl_Transform(object instance);
    private void set_30_LayoutTransformControl_Transform(object instance, object Value);
    private object get_31_GridSplitter_GripperForeground(object instance);
    private void set_31_GridSplitter_GripperForeground(object instance, object Value);
    private object get_32_GridSplitter_Element(object instance);
    private void set_32_GridSplitter_Element(object instance, object Value);
    private object get_33_GridSplitter_ResizeDirection(object instance);
    private void set_33_GridSplitter_ResizeDirection(object instance, object Value);
    private object get_34_GridSplitter_ResizeBehavior(object instance);
    private void set_34_GridSplitter_ResizeBehavior(object instance, object Value);
    private object get_35_GridSplitter_ParentLevel(object instance);
    private void set_35_GridSplitter_ParentLevel(object instance, object Value);
    private object get_36_GridSplitter_GripperCursor(object instance);
    private void set_36_GridSplitter_GripperCursor(object instance, object Value);
    private object get_37_GridSplitter_GripperCustomCursorResource(object instance);
    private void set_37_GridSplitter_GripperCustomCursorResource(object instance, object Value);
    private object get_38_GridSplitter_CursorBehavior(object instance);
    private void set_38_GridSplitter_CursorBehavior(object instance, object Value);
    private object get_39_HeaderedItemsControl_Header(object instance);
    private void set_39_HeaderedItemsControl_Header(object instance, object Value);
    private object get_40_HeaderedItemsControl_HeaderTemplate(object instance);
    private void set_40_HeaderedItemsControl_HeaderTemplate(object instance, object Value);
    private object get_41_HeaderedItemsControl_Orientation(object instance);
    private void set_41_HeaderedItemsControl_Orientation(object instance, object Value);
    private object get_42_ListDetailsView_SelectedIndex(object instance);
    private void set_42_ListDetailsView_SelectedIndex(object instance, object Value);
    private object get_43_ListDetailsView_SelectedItem(object instance);
    private void set_43_ListDetailsView_SelectedItem(object instance, object Value);
    private object get_44_ListDetailsView_DetailsTemplate(object instance);
    private void set_44_ListDetailsView_DetailsTemplate(object instance, object Value);
    private object get_45_ListDetailsView_DetailsContentTemplateSelector(object instance);
    private void set_45_ListDetailsView_DetailsContentTemplateSelector(object instance, object Value);
    private object get_46_ListDetailsView_ListPaneItemTemplateSelector(object instance);
    private void set_46_ListDetailsView_ListPaneItemTemplateSelector(object instance, object Value);
    private object get_47_ListDetailsView_DetailsPaneBackground(object instance);
    private void set_47_ListDetailsView_DetailsPaneBackground(object instance, object Value);
    private object get_48_ListDetailsView_ListPaneBackground(object instance);
    private void set_48_ListDetailsView_ListPaneBackground(object instance, object Value);
    private object get_49_ListDetailsView_ListHeader(object instance);
    private void set_49_ListDetailsView_ListHeader(object instance, object Value);
    private object get_50_ListDetailsView_ListHeaderTemplate(object instance);
    private void set_50_ListDetailsView_ListHeaderTemplate(object instance, object Value);
    private object get_51_ListDetailsView_ListPaneEmptyContent(object instance);
    private void set_51_ListDetailsView_ListPaneEmptyContent(object instance, object Value);
    private object get_52_ListDetailsView_ListPaneEmptyContentTemplate(object instance);
    private void set_52_ListDetailsView_ListPaneEmptyContentTemplate(object instance, object Value);
    private object get_53_ListDetailsView_DetailsHeader(object instance);
    private void set_53_ListDetailsView_DetailsHeader(object instance, object Value);
    private object get_54_ListDetailsView_DetailsHeaderTemplate(object instance);
    private void set_54_ListDetailsView_DetailsHeaderTemplate(object instance, object Value);
    private object get_55_ListDetailsView_ListPaneWidth(object instance);
    private void set_55_ListDetailsView_ListPaneWidth(object instance, object Value);
    private object get_56_ListDetailsView_NoSelectionContent(object instance);
    private void set_56_ListDetailsView_NoSelectionContent(object instance, object Value);
    private object get_57_ListDetailsView_NoSelectionContentTemplate(object instance);
    private void set_57_ListDetailsView_NoSelectionContentTemplate(object instance, object Value);
    private object get_58_ListDetailsView_ViewState(object instance);
    private object get_59_ListDetailsView_ListCommandBar(object instance);
    private void set_59_ListDetailsView_ListCommandBar(object instance, object Value);
    private object get_60_ListDetailsView_DetailsCommandBar(object instance);
    private void set_60_ListDetailsView_DetailsCommandBar(object instance, object Value);
    private object get_61_ListDetailsView_CompactModeThresholdWidth(object instance);
    private void set_61_ListDetailsView_CompactModeThresholdWidth(object instance, object Value);
    private object get_62_ListDetailsView_BackButtonBehavior(object instance);
    private void set_62_ListDetailsView_BackButtonBehavior(object instance, object Value);
    private object get_63_ListDetailsView_MapDetails(object instance);
    private void set_63_ListDetailsView_MapDetails(object instance, object Value);
    private object get_64_TwoPaneView_MinWideModeWidth(object instance);
    private void set_64_TwoPaneView_MinWideModeWidth(object instance, object Value);
    private object get_65_TwoPaneView_PanePriority(object instance);
    private void set_65_TwoPaneView_PanePriority(object instance, object Value);
    private object get_66_TwoPaneView_TallModeConfiguration(object instance);
    private void set_66_TwoPaneView_TallModeConfiguration(object instance, object Value);
    private object get_67_TwoPaneView_WideModeConfiguration(object instance);
    private void set_67_TwoPaneView_WideModeConfiguration(object instance, object Value);
    private object get_68_TwoPaneView_Pane1(object instance);
    private void set_68_TwoPaneView_Pane1(object instance, object Value);
    private object get_69_TwoPaneView_Pane2(object instance);
    private void set_69_TwoPaneView_Pane2(object instance, object Value);
    private object get_70_TwoPaneView_Pane2Length(object instance);
    private void set_70_TwoPaneView_Pane2Length(object instance, object Value);
    private object get_71_TwoPaneView_Pane1Length(object instance);
    private void set_71_TwoPaneView_Pane1Length(object instance, object Value);
    private object get_72_TwoPaneView_MinTallModeHeight(object instance);
    private void set_72_TwoPaneView_MinTallModeHeight(object instance, object Value);
    private object get_73_TwoPaneView_Mode(object instance);
    private object get_74_OrbitView_AnchorColor(object instance);
    private void set_74_OrbitView_AnchorColor(object instance, object Value);
    private object get_75_OrbitView_OrbitColor(object instance);
    private void set_75_OrbitView_OrbitColor(object instance, object Value);
    private object get_76_OrbitView_OrbitsEnabled(object instance);
    private void set_76_OrbitView_OrbitsEnabled(object instance, object Value);
    private object get_77_OrbitView_IsItemClickEnabled(object instance);
    private void set_77_OrbitView_IsItemClickEnabled(object instance, object Value);
    private object get_78_OrbitView_AnchorsEnabled(object instance);
    private void set_78_OrbitView_AnchorsEnabled(object instance, object Value);
    private object get_79_OrbitView_MinItemSize(object instance);
    private void set_79_OrbitView_MinItemSize(object instance, object Value);
    private object get_80_OrbitView_MaxItemSize(object instance);
    private void set_80_OrbitView_MaxItemSize(object instance, object Value);
    private object get_81_OrbitView_OrbitDashArray(object instance);
    private void set_81_OrbitView_OrbitDashArray(object instance, object Value);
    private object get_82_OrbitView_AnchorThickness(object instance);
    private void set_82_OrbitView_AnchorThickness(object instance, object Value);
    private object get_83_OrbitView_OrbitThickness(object instance);
    private void set_83_OrbitView_OrbitThickness(object instance, object Value);
    private object get_84_OrbitView_CenterContent(object instance);
    private void set_84_OrbitView_CenterContent(object instance, object Value);
    private object get_85_OrbitViewPanel_OrbitView(object instance);
    private object get_86_IconSource_Foreground(object instance);
    private void set_86_IconSource_Foreground(object instance, object Value);
    private object get_87_TreeViewNode_IsExpanded(object instance);
    private void set_87_TreeViewNode_IsExpanded(object instance, object Value);
    private object get_88_TreeViewNode_HasUnrealizedChildren(object instance);
    private void set_88_TreeViewNode_HasUnrealizedChildren(object instance, object Value);
    private object get_89_TreeViewNode_Content(object instance);
    private void set_89_TreeViewNode_Content(object instance, object Value);
    private object get_90_TreeViewNode_Children(object instance);
    private object get_91_TreeViewNode_Depth(object instance);
    private object get_92_TreeViewNode_HasChildren(object instance);
    private object get_93_TreeViewNode_Parent(object instance);
    private IXamlMember CreateXamlMember(string longMemberName);
}
[GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks", " 10.0.19041.685")]
[DebuggerNonUserCodeAttribute]
internal class Microsoft.Toolkit.Uwp.UI.Controls.Microsoft_Toolkit_Uwp_UI_Controls_Layout_XamlTypeInfo.XamlUserType : XamlSystemBaseType {
    private XamlTypeInfoProvider _provider;
    private IXamlType _baseType;
    private bool _isArray;
    private bool _isMarkupExtension;
    private bool _isBindable;
    private bool _isReturnTypeStub;
    private bool _isLocalType;
    private IXamlType _boxedType;
    private string _contentPropertyName;
    private string _itemTypeName;
    private string _keyTypeName;
    private Dictionary`2<string, string> _memberNames;
    private Dictionary`2<string, object> _enumValues;
    [CompilerGeneratedAttribute]
private Activator <Activator>k__BackingField;
    [CompilerGeneratedAttribute]
private AddToCollection <CollectionAdd>k__BackingField;
    [CompilerGeneratedAttribute]
private AddToDictionary <DictionaryAdd>k__BackingField;
    [CompilerGeneratedAttribute]
private CreateFromStringMethod <CreateFromStringMethod>k__BackingField;
    [CompilerGeneratedAttribute]
private BoxInstanceMethod <BoxInstance>k__BackingField;
    public IXamlType BaseType { get; }
    public bool IsArray { get; }
    public bool IsCollection { get; }
    public bool IsConstructible { get; }
    public bool IsDictionary { get; }
    public bool IsMarkupExtension { get; }
    public bool IsBindable { get; }
    public bool IsReturnTypeStub { get; }
    public bool IsLocalType { get; }
    public IXamlType BoxedType { get; }
    public IXamlMember ContentProperty { get; }
    public IXamlType ItemType { get; }
    public IXamlType KeyType { get; }
    public Activator Activator { get; public set; }
    public AddToCollection CollectionAdd { get; public set; }
    public AddToDictionary DictionaryAdd { get; public set; }
    public CreateFromStringMethod CreateFromStringMethod { get; public set; }
    public BoxInstanceMethod BoxInstance { get; public set; }
    public XamlUserType(XamlTypeInfoProvider provider, string fullName, Type fullType, IXamlType baseType);
    public virtual IXamlType get_BaseType();
    public virtual bool get_IsArray();
    public virtual bool get_IsCollection();
    public virtual bool get_IsConstructible();
    public virtual bool get_IsDictionary();
    public virtual bool get_IsMarkupExtension();
    public virtual bool get_IsBindable();
    public virtual bool get_IsReturnTypeStub();
    public virtual bool get_IsLocalType();
    public sealed virtual IXamlType get_BoxedType();
    public virtual IXamlMember get_ContentProperty();
    public virtual IXamlType get_ItemType();
    public virtual IXamlType get_KeyType();
    public virtual IXamlMember GetMember(string name);
    public virtual object ActivateInstance();
    public virtual void AddToMap(object instance, object key, object item);
    public virtual void AddToVector(object instance, object item);
    public virtual void RunInitializer();
    public virtual object CreateFromString(string input);
    [CompilerGeneratedAttribute]
public Activator get_Activator();
    [CompilerGeneratedAttribute]
public void set_Activator(Activator value);
    [CompilerGeneratedAttribute]
public AddToCollection get_CollectionAdd();
    [CompilerGeneratedAttribute]
public void set_CollectionAdd(AddToCollection value);
    [CompilerGeneratedAttribute]
public AddToDictionary get_DictionaryAdd();
    [CompilerGeneratedAttribute]
public void set_DictionaryAdd(AddToDictionary value);
    [CompilerGeneratedAttribute]
public CreateFromStringMethod get_CreateFromStringMethod();
    [CompilerGeneratedAttribute]
public void set_CreateFromStringMethod(CreateFromStringMethod value);
    [CompilerGeneratedAttribute]
public BoxInstanceMethod get_BoxInstance();
    [CompilerGeneratedAttribute]
public void set_BoxInstance(BoxInstanceMethod value);
    public void SetContentPropertyName(string contentPropertyName);
    public void SetIsArray();
    public void SetIsMarkupExtension();
    public void SetIsBindable();
    public void SetIsReturnTypeStub();
    public void SetIsLocalType();
    public void SetItemTypeName(string itemTypeName);
    public void SetKeyTypeName(string keyTypeName);
    public void SetBoxedType(IXamlType boxedType);
    public object BoxType(object instance);
    public void AddMemberName(string shortName);
    public void AddEnumValue(string name, object value);
}
[TemplatePartAttribute]
[TemplatePartAttribute]
[TemplatePartAttribute]
public class Microsoft.Toolkit.Uwp.UI.Controls.OrbitView : ItemsControl {
    private static double AnimationDuration;
    private OrbitViewPanel _panel;
    private Grid _orbitsContainer;
    private Canvas _anchorCanvas;
    private ContentPresenter _centerContent;
    private Compositor _compositor;
    private Dictionary`2<object, Ellipse> _orbits;
    private Dictionary`2<object, Line> _anchors;
    [CompilerGeneratedAttribute]
private EventHandler`1<OrbitViewItemClickedEventArgs> ItemClick;
    public static DependencyProperty OrbitsEnabledProperty;
    public static DependencyProperty IsItemClickEnabledProperty;
    public static DependencyProperty AnchorsEnabledProperty;
    public static DependencyProperty MinItemSizeProperty;
    public static DependencyProperty MaxItemSizeProperty;
    public static DependencyProperty AnchorColorProperty;
    public static DependencyProperty OrbitColorProperty;
    public static DependencyProperty OrbitDashArrayProperty;
    public static DependencyProperty AnchorThicknessProperty;
    public static DependencyProperty OrbitThicknessProperty;
    public static DependencyProperty CenterContentProperty;
    public bool OrbitsEnabled { get; public set; }
    public bool IsItemClickEnabled { get; public set; }
    public bool AnchorsEnabled { get; public set; }
    public double MinItemSize { get; public set; }
    public double MaxItemSize { get; public set; }
    public Brush AnchorColor { get; public set; }
    public Brush OrbitColor { get; public set; }
    public DoubleCollection OrbitDashArray { get; public set; }
    public double AnchorThickness { get; public set; }
    public double OrbitThickness { get; public set; }
    public object CenterContent { get; public set; }
    private static OrbitView();
    [CompilerGeneratedAttribute]
public void add_ItemClick(EventHandler`1<OrbitViewItemClickedEventArgs> value);
    [CompilerGeneratedAttribute]
public void remove_ItemClick(EventHandler`1<OrbitViewItemClickedEventArgs> value);
    protected virtual void OnApplyTemplate();
    public bool get_OrbitsEnabled();
    public void set_OrbitsEnabled(bool value);
    public bool get_IsItemClickEnabled();
    public void set_IsItemClickEnabled(bool value);
    public bool get_AnchorsEnabled();
    public void set_AnchorsEnabled(bool value);
    public double get_MinItemSize();
    public void set_MinItemSize(double value);
    public double get_MaxItemSize();
    public void set_MaxItemSize(double value);
    public Brush get_AnchorColor();
    public void set_AnchorColor(Brush value);
    public Brush get_OrbitColor();
    public void set_OrbitColor(Brush value);
    public DoubleCollection get_OrbitDashArray();
    public void set_OrbitDashArray(DoubleCollection value);
    public double get_AnchorThickness();
    public void set_AnchorThickness(double value);
    public double get_OrbitThickness();
    public void set_OrbitThickness(double value);
    public object get_CenterContent();
    public void set_CenterContent(object value);
    protected virtual DependencyObject GetContainerForItemOverride();
    protected virtual void PrepareContainerForItemOverride(DependencyObject element, object item);
    protected virtual void ClearContainerForItemOverride(DependencyObject element, object item);
    private static void OnAchorsEnabledChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    private static void OnOrbitsEnabledChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    private static void OnItemSizePropertyChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    private static void OnItemClickEnabledChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    private static void OnOrbitPropertyChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    private static void OnAnchorPropertyChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    private void OrbitViewItem_PointerReleased(object sender, PointerRoutedEventArgs e);
    private void OrbitViewItem_KeyUp(object sender, KeyRoutedEventArgs e);
    private void OrbitViewPanel_ItemsArranged(object sender, OrbitViewPanelItemsArrangedArgs e);
    private void OrbitViewPanel_ItemArranged(object sender, OrbitViewPanelItemArrangedArgs e);
    private void OrbitView_KeyDown(object sender, KeyRoutedEventArgs e);
    private object GetFocusedElement();
    private void OnItemClicked(OrbitViewItem item);
    private void ClearOrbits();
    private Ellipse CreateOrbit();
    private void SetOrbitProperties(Ellipse orbit);
    private void SetAnchorProperties(Line anchor);
    private Line CreateAnchor(UIElement element, double x, double y);
    private void ClearAnchors();
    private void ApplyImplicitOffsetAnimation(UIElement element, double delay);
}
public class Microsoft.Toolkit.Uwp.UI.Controls.OrbitViewDataItem : DependencyObject {
    public static DependencyProperty DistanceProperty;
    public static DependencyProperty LabelProperty;
    public static DependencyProperty DiameterProperty;
    public static DependencyProperty ImageProperty;
    public static DependencyProperty ItemProperty;
    public double Distance { get; public set; }
    public string Label { get; public set; }
    public double Diameter { get; public set; }
    public ImageSource Image { get; public set; }
    public object Item { get; public set; }
    private static OrbitViewDataItem();
    public double get_Distance();
    public void set_Distance(double value);
    public string get_Label();
    public void set_Label(string value);
    public double get_Diameter();
    public void set_Diameter(double value);
    public ImageSource get_Image();
    public void set_Image(ImageSource value);
    public object get_Item();
    public void set_Item(object value);
}
public class Microsoft.Toolkit.Uwp.UI.Controls.OrbitViewDataItemCollection : List`1<OrbitViewDataItem> {
}
public class Microsoft.Toolkit.Uwp.UI.Controls.OrbitViewElementProperties : object {
    [CompilerGeneratedAttribute]
private UIElement <Element>k__BackingField;
    [CompilerGeneratedAttribute]
private Point <XYFromCenter>k__BackingField;
    [CompilerGeneratedAttribute]
private double <DistanceFromCenter>k__BackingField;
    public UIElement Element { get; internal set; }
    public Point XYFromCenter { get; internal set; }
    public double DistanceFromCenter { get; internal set; }
    [CompilerGeneratedAttribute]
public UIElement get_Element();
    [CompilerGeneratedAttribute]
internal void set_Element(UIElement value);
    [CompilerGeneratedAttribute]
public Point get_XYFromCenter();
    [CompilerGeneratedAttribute]
internal void set_XYFromCenter(Point value);
    [CompilerGeneratedAttribute]
public double get_DistanceFromCenter();
    [CompilerGeneratedAttribute]
internal void set_DistanceFromCenter(double value);
}
[TemplatePartAttribute]
[TemplateVisualStateAttribute]
[TemplateVisualStateAttribute]
[TemplateVisualStateAttribute]
public class Microsoft.Toolkit.Uwp.UI.Controls.OrbitViewItem : ContentControl {
    private static string CommonStateGroup;
    private static string VsNormal;
    private static string VsPressed;
    private static string VsPointerOver;
    private static string _transformName;
    private CompositeTransform _transform;
    private bool _isClickEnabled;
    internal bool IsClickEnabled { get; internal set; }
    internal bool get_IsClickEnabled();
    internal void set_IsClickEnabled(bool value);
    protected virtual void OnApplyTemplate();
    private void OrbitViewItemControl_SizeChanged(object sender, SizeChangedEventArgs e);
    private void EnableItemInteraction();
    private void DisableItemInteraction();
    private void Control_KeyUp(object sender, KeyRoutedEventArgs e);
    private void Control_KeyDown(object sender, KeyRoutedEventArgs e);
    private void Control_PointerReleased(object sender, PointerRoutedEventArgs e);
    private void Control_PointerPressed(object sender, PointerRoutedEventArgs e);
    private void Control_PointerExited(object sender, PointerRoutedEventArgs e);
    private void Control_PointerEntered(object sender, PointerRoutedEventArgs e);
}
public class Microsoft.Toolkit.Uwp.UI.Controls.OrbitViewItemClickedEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
private object <Item>k__BackingField;
    public object Item { get; public set; }
    public OrbitViewItemClickedEventArgs(object item);
    [CompilerGeneratedAttribute]
public object get_Item();
    [CompilerGeneratedAttribute]
public void set_Item(object value);
}
public class Microsoft.Toolkit.Uwp.UI.Controls.OrbitViewPanel : Panel {
    private OrbitView _orbitView;
    [CompilerGeneratedAttribute]
private EventHandler`1<OrbitViewPanelItemArrangedArgs> ItemArranged;
    [CompilerGeneratedAttribute]
private EventHandler`1<OrbitViewPanelItemsArrangedArgs> ItemsArranged;
    public OrbitView OrbitView { get; }
    [CompilerGeneratedAttribute]
public void add_ItemArranged(EventHandler`1<OrbitViewPanelItemArrangedArgs> value);
    [CompilerGeneratedAttribute]
public void remove_ItemArranged(EventHandler`1<OrbitViewPanelItemArrangedArgs> value);
    [CompilerGeneratedAttribute]
public void add_ItemsArranged(EventHandler`1<OrbitViewPanelItemsArrangedArgs> value);
    [CompilerGeneratedAttribute]
public void remove_ItemsArranged(EventHandler`1<OrbitViewPanelItemsArrangedArgs> value);
    public OrbitView get_OrbitView();
    protected virtual Size MeasureOverride(Size availableSize);
    protected virtual Size ArrangeOverride(Size finalSize);
}
public class Microsoft.Toolkit.Uwp.UI.Controls.OrbitViewPanelItemArrangedArgs : EventArgs {
    [CompilerGeneratedAttribute]
private OrbitViewElementProperties <ElementProperties>k__BackingField;
    [CompilerGeneratedAttribute]
private int <ItemIndex>k__BackingField;
    public OrbitViewElementProperties ElementProperties { get; public set; }
    public int ItemIndex { get; public set; }
    [CompilerGeneratedAttribute]
public OrbitViewElementProperties get_ElementProperties();
    [CompilerGeneratedAttribute]
public void set_ElementProperties(OrbitViewElementProperties value);
    [CompilerGeneratedAttribute]
public int get_ItemIndex();
    [CompilerGeneratedAttribute]
public void set_ItemIndex(int value);
}
public class Microsoft.Toolkit.Uwp.UI.Controls.OrbitViewPanelItemsArrangedArgs : object {
    [CompilerGeneratedAttribute]
private List`1<OrbitViewElementProperties> <Elements>k__BackingField;
    public List`1<OrbitViewElementProperties> Elements { get; public set; }
    [CompilerGeneratedAttribute]
public List`1<OrbitViewElementProperties> get_Elements();
    [CompilerGeneratedAttribute]
public void set_Elements(List`1<OrbitViewElementProperties> value);
}
public class Microsoft.Toolkit.Uwp.UI.Controls.Proj : ValueType {
    [CompilerGeneratedAttribute]
private double <Position>k__BackingField;
    [CompilerGeneratedAttribute]
private double <Depth>k__BackingField;
    [CompilerGeneratedAttribute]
private double <RotationX>k__BackingField;
    [CompilerGeneratedAttribute]
private double <RotationY>k__BackingField;
    [CompilerGeneratedAttribute]
private double <RotationZ>k__BackingField;
    public double Position { get; public set; }
    public double Depth { get; public set; }
    public double RotationX { get; public set; }
    public double RotationY { get; public set; }
    public double RotationZ { get; public set; }
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public double get_Position();
    [CompilerGeneratedAttribute]
public void set_Position(double value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public double get_Depth();
    [CompilerGeneratedAttribute]
public void set_Depth(double value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public double get_RotationX();
    [CompilerGeneratedAttribute]
public void set_RotationX(double value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public double get_RotationY();
    [CompilerGeneratedAttribute]
public void set_RotationY(double value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public double get_RotationZ();
    [CompilerGeneratedAttribute]
public void set_RotationZ(double value);
}
internal class Microsoft.Toolkit.Uwp.UI.Controls.PropertyChangeEventSource`1 : FrameworkElement {
    private DependencyObject _source;
    [CompilerGeneratedAttribute]
private EventHandler`1<TPropertyType> ValueChanged;
    public static DependencyProperty ValueProperty;
    public TPropertyType Value { get; public set; }
    public PropertyChangeEventSource`1(DependencyObject source, string propertyName, BindingMode bindingMode);
    private static PropertyChangeEventSource`1();
    [CompilerGeneratedAttribute]
public void add_ValueChanged(EventHandler`1<TPropertyType> value);
    [CompilerGeneratedAttribute]
public void remove_ValueChanged(EventHandler`1<TPropertyType> value);
    public TPropertyType get_Value();
    public void set_Value(TPropertyType value);
    private static void OnValueChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    private void OnValueChanged(TPropertyType oldValue, TPropertyType newValue);
}
internal static class ThisAssembly : object {
    internal static string AssemblyVersion;
    internal static string AssemblyFileVersion;
    internal static string AssemblyInformationalVersion;
    internal static string AssemblyName;
    internal static string AssemblyTitle;
    internal static string AssemblyConfiguration;
    internal static string GitCommitId;
    internal static bool IsPublicRelease;
    internal static bool IsPrerelease;
    internal static DateTime GitCommitDate;
    internal static string RootNamespace;
    private static ThisAssembly();
}
