internal static class Microsoft.Toolkit.Parsers.Constants : object {
    internal static string ParserObsoleteMsg;
}
[ObsoleteAttribute("Parsing code has been deprecated, we suggest using Markdig. See https://github.com/CommunityToolkit/WindowsCommunityToolkit/issues/3200 for more info.")]
public static class Microsoft.Toolkit.Parsers.Core.ParseHelpers : object {
    public static bool IsMarkdownBlankOrWhiteSpace(string str);
    public static bool IsMarkdownWhiteSpace(char c);
}
[AttributeUsageAttribute("256")]
[ObsoleteAttribute("Parsing code has been deprecated, we suggest using Markdig. See https://github.com/CommunityToolkit/WindowsCommunityToolkit/issues/3200 for more info.")]
public class Microsoft.Toolkit.Parsers.Core.StringValueAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <Value>k__BackingField;
    public string Value { get; }
    public StringValueAttribute(string value);
    [CompilerGeneratedAttribute]
public string get_Value();
}
[ObsoleteAttribute("Parsing code has been deprecated, we suggest using Markdig. See https://github.com/CommunityToolkit/WindowsCommunityToolkit/issues/3200 for more info.")]
public interface Microsoft.Toolkit.Parsers.IParser`1 {
    public abstract virtual IEnumerable`1<T> Parse(string data);
}
[ObsoleteAttribute("Parsing code has been deprecated, we suggest using Markdig. See https://github.com/CommunityToolkit/WindowsCommunityToolkit/issues/3200 for more info.")]
public class Microsoft.Toolkit.Parsers.Markdown.Blocks.CodeBlock : MarkdownBlock {
    [CompilerGeneratedAttribute]
private string <Text>k__BackingField;
    [CompilerGeneratedAttribute]
private string <CodeLanguage>k__BackingField;
    public string Text { get; public set; }
    public string CodeLanguage { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Text();
    [CompilerGeneratedAttribute]
public void set_Text(string value);
    [CompilerGeneratedAttribute]
public string get_CodeLanguage();
    [CompilerGeneratedAttribute]
public void set_CodeLanguage(string value);
    internal static CodeBlock Parse(string markdown, int start, int maxEnd, int quoteDepth, Int32& actualEnd);
    public virtual string ToString();
}
[ObsoleteAttribute("Parsing code has been deprecated, we suggest using Markdig. See https://github.com/CommunityToolkit/WindowsCommunityToolkit/issues/3200 for more info.")]
public class Microsoft.Toolkit.Parsers.Markdown.Blocks.HeaderBlock : MarkdownBlock {
    private int _headerLevel;
    [CompilerGeneratedAttribute]
private IList`1<MarkdownInline> <Inlines>k__BackingField;
    public int HeaderLevel { get; public set; }
    public IList`1<MarkdownInline> Inlines { get; public set; }
    public int get_HeaderLevel();
    public void set_HeaderLevel(int value);
    [CompilerGeneratedAttribute]
public IList`1<MarkdownInline> get_Inlines();
    [CompilerGeneratedAttribute]
public void set_Inlines(IList`1<MarkdownInline> value);
    internal static HeaderBlock ParseHashPrefixedHeader(string markdown, int start, int end);
    internal static HeaderBlock ParseUnderlineStyleHeader(string markdown, int firstLineStart, int firstLineEnd, int secondLineStart, int secondLineEnd);
    public virtual string ToString();
}
[ObsoleteAttribute("Parsing code has been deprecated, we suggest using Markdig. See https://github.com/CommunityToolkit/WindowsCommunityToolkit/issues/3200 for more info.")]
public class Microsoft.Toolkit.Parsers.Markdown.Blocks.HorizontalRuleBlock : MarkdownBlock {
    internal static HorizontalRuleBlock Parse(string markdown, int start, int end);
    public virtual string ToString();
}
[ObsoleteAttribute("Parsing code has been deprecated, we suggest using Markdig. See https://github.com/CommunityToolkit/WindowsCommunityToolkit/issues/3200 for more info.")]
public class Microsoft.Toolkit.Parsers.Markdown.Blocks.LinkReferenceBlock : MarkdownBlock {
    [CompilerGeneratedAttribute]
private string <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Url>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Tooltip>k__BackingField;
    public string Id { get; public set; }
    public string Url { get; public set; }
    public string Tooltip { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Id();
    [CompilerGeneratedAttribute]
public void set_Id(string value);
    [CompilerGeneratedAttribute]
public string get_Url();
    [CompilerGeneratedAttribute]
public void set_Url(string value);
    [CompilerGeneratedAttribute]
public string get_Tooltip();
    [CompilerGeneratedAttribute]
public void set_Tooltip(string value);
    internal static LinkReferenceBlock Parse(string markdown, int start, int end);
    public virtual string ToString();
}
[ObsoleteAttribute("Parsing code has been deprecated, we suggest using Markdig. See https://github.com/CommunityToolkit/WindowsCommunityToolkit/issues/3200 for more info.")]
public class Microsoft.Toolkit.Parsers.Markdown.Blocks.ListBlock : MarkdownBlock {
    [CompilerGeneratedAttribute]
private IList`1<ListItemBlock> <Items>k__BackingField;
    [CompilerGeneratedAttribute]
private ListStyle <Style>k__BackingField;
    public IList`1<ListItemBlock> Items { get; public set; }
    public ListStyle Style { get; public set; }
    [CompilerGeneratedAttribute]
public IList`1<ListItemBlock> get_Items();
    [CompilerGeneratedAttribute]
public void set_Items(IList`1<ListItemBlock> value);
    [CompilerGeneratedAttribute]
public ListStyle get_Style();
    [CompilerGeneratedAttribute]
public void set_Style(ListStyle value);
    internal static ListBlock Parse(string markdown, int start, int maxEnd, int quoteDepth, Int32& actualEnd);
    private static ListItemPreamble ParseItemPreamble(string markdown, int start, int maxEnd);
    private static void AppendTextToListItem(ListItemBlock listItem, string markdown, int start, int end, bool newLine);
    private static bool ReplaceStringBuilders(ListBlock list);
    public virtual string ToString();
}
[ObsoleteAttribute("Parsing code has been deprecated, we suggest using Markdig. See https://github.com/CommunityToolkit/WindowsCommunityToolkit/issues/3200 for more info.")]
public class Microsoft.Toolkit.Parsers.Markdown.Blocks.ListItemBlock : object {
    [CompilerGeneratedAttribute]
private IList`1<MarkdownBlock> <Blocks>k__BackingField;
    public IList`1<MarkdownBlock> Blocks { get; public set; }
    [CompilerGeneratedAttribute]
public IList`1<MarkdownBlock> get_Blocks();
    [CompilerGeneratedAttribute]
public void set_Blocks(IList`1<MarkdownBlock> value);
}
[ObsoleteAttribute("Parsing code has been deprecated, we suggest using Markdig. See https://github.com/CommunityToolkit/WindowsCommunityToolkit/issues/3200 for more info.")]
internal class Microsoft.Toolkit.Parsers.Markdown.Blocks.ListItemBuilder : MarkdownBlock {
    [CompilerGeneratedAttribute]
private StringBuilder <Builder>k__BackingField;
    public StringBuilder Builder { get; }
    [CompilerGeneratedAttribute]
public StringBuilder get_Builder();
}
[ObsoleteAttribute("Parsing code has been deprecated, we suggest using Markdig. See https://github.com/CommunityToolkit/WindowsCommunityToolkit/issues/3200 for more info.")]
internal class Microsoft.Toolkit.Parsers.Markdown.Blocks.ListItemPreamble : object {
    [CompilerGeneratedAttribute]
private ListStyle <Style>k__BackingField;
    [CompilerGeneratedAttribute]
private int <ContentStartPos>k__BackingField;
    public ListStyle Style { get; public set; }
    public int ContentStartPos { get; public set; }
    [CompilerGeneratedAttribute]
public ListStyle get_Style();
    [CompilerGeneratedAttribute]
public void set_Style(ListStyle value);
    [CompilerGeneratedAttribute]
public int get_ContentStartPos();
    [CompilerGeneratedAttribute]
public void set_ContentStartPos(int value);
}
[ObsoleteAttribute("Parsing code has been deprecated, we suggest using Markdig. See https://github.com/CommunityToolkit/WindowsCommunityToolkit/issues/3200 for more info.")]
public abstract class Microsoft.Toolkit.Parsers.Markdown.Blocks.MarkdownBlock : MarkdownElement {
    [CompilerGeneratedAttribute]
private MarkdownBlockType <Type>k__BackingField;
    public MarkdownBlockType Type { get; public set; }
    internal MarkdownBlock(MarkdownBlockType type);
    [CompilerGeneratedAttribute]
public MarkdownBlockType get_Type();
    [CompilerGeneratedAttribute]
public void set_Type(MarkdownBlockType value);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
[ObsoleteAttribute("Parsing code has been deprecated, we suggest using Markdig. See https://github.com/CommunityToolkit/WindowsCommunityToolkit/issues/3200 for more info.")]
internal class Microsoft.Toolkit.Parsers.Markdown.Blocks.NestedListInfo : object {
    [CompilerGeneratedAttribute]
private ListBlock <List>k__BackingField;
    [CompilerGeneratedAttribute]
private int <SpaceCount>k__BackingField;
    public ListBlock List { get; public set; }
    public int SpaceCount { get; public set; }
    [CompilerGeneratedAttribute]
public ListBlock get_List();
    [CompilerGeneratedAttribute]
public void set_List(ListBlock value);
    [CompilerGeneratedAttribute]
public int get_SpaceCount();
    [CompilerGeneratedAttribute]
public void set_SpaceCount(int value);
}
[ObsoleteAttribute("Parsing code has been deprecated, we suggest using Markdig. See https://github.com/CommunityToolkit/WindowsCommunityToolkit/issues/3200 for more info.")]
public class Microsoft.Toolkit.Parsers.Markdown.Blocks.ParagraphBlock : MarkdownBlock {
    [CompilerGeneratedAttribute]
private IList`1<MarkdownInline> <Inlines>k__BackingField;
    public IList`1<MarkdownInline> Inlines { get; public set; }
    [CompilerGeneratedAttribute]
public IList`1<MarkdownInline> get_Inlines();
    [CompilerGeneratedAttribute]
public void set_Inlines(IList`1<MarkdownInline> value);
    internal static ParagraphBlock Parse(string markdown);
    public virtual string ToString();
}
[ObsoleteAttribute("Parsing code has been deprecated, we suggest using Markdig. See https://github.com/CommunityToolkit/WindowsCommunityToolkit/issues/3200 for more info.")]
public class Microsoft.Toolkit.Parsers.Markdown.Blocks.QuoteBlock : MarkdownBlock {
    [CompilerGeneratedAttribute]
private IList`1<MarkdownBlock> <Blocks>k__BackingField;
    public IList`1<MarkdownBlock> Blocks { get; public set; }
    [CompilerGeneratedAttribute]
public IList`1<MarkdownBlock> get_Blocks();
    [CompilerGeneratedAttribute]
public void set_Blocks(IList`1<MarkdownBlock> value);
    internal static QuoteBlock Parse(string markdown, int startOfLine, int maxEnd, int quoteDepth, Int32& actualEnd);
}
[ObsoleteAttribute("Parsing code has been deprecated, we suggest using Markdig. See https://github.com/CommunityToolkit/WindowsCommunityToolkit/issues/3200 for more info.")]
public class Microsoft.Toolkit.Parsers.Markdown.Blocks.TableBlock : MarkdownBlock {
    [CompilerGeneratedAttribute]
private IList`1<TableRow> <Rows>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<TableColumnDefinition> <ColumnDefinitions>k__BackingField;
    public IList`1<TableRow> Rows { get; public set; }
    public IList`1<TableColumnDefinition> ColumnDefinitions { get; public set; }
    [CompilerGeneratedAttribute]
public IList`1<TableRow> get_Rows();
    [CompilerGeneratedAttribute]
public void set_Rows(IList`1<TableRow> value);
    [CompilerGeneratedAttribute]
public IList`1<TableColumnDefinition> get_ColumnDefinitions();
    [CompilerGeneratedAttribute]
public void set_ColumnDefinitions(IList`1<TableColumnDefinition> value);
    internal static TableBlock Parse(string markdown, int start, int endOfFirstLine, int maxEnd, int quoteDepth, Int32& actualEnd);
}
[ObsoleteAttribute("Parsing code has been deprecated, we suggest using Markdig. See https://github.com/CommunityToolkit/WindowsCommunityToolkit/issues/3200 for more info.")]
public class Microsoft.Toolkit.Parsers.Markdown.Blocks.YamlHeaderBlock : MarkdownBlock {
    [CompilerGeneratedAttribute]
private Dictionary`2<string, string> <Children>k__BackingField;
    public Dictionary`2<string, string> Children { get; public set; }
    [CompilerGeneratedAttribute]
public Dictionary`2<string, string> get_Children();
    [CompilerGeneratedAttribute]
public void set_Children(Dictionary`2<string, string> value);
    internal static YamlHeaderBlock Parse(string markdown, int start, int end, Int32& realEndIndex);
    public virtual string ToString();
}
[ObsoleteAttribute("Parsing code has been deprecated, we suggest using Markdig. See https://github.com/CommunityToolkit/WindowsCommunityToolkit/issues/3200 for more info.")]
public enum Microsoft.Toolkit.Parsers.Markdown.ColumnAlignment : Enum {
    public int value__;
    public static ColumnAlignment Unspecified;
    public static ColumnAlignment Left;
    public static ColumnAlignment Right;
    public static ColumnAlignment Center;
}
[ObsoleteAttribute("Parsing code has been deprecated, we suggest using Markdig. See https://github.com/CommunityToolkit/WindowsCommunityToolkit/issues/3200 for more info.")]
internal class Microsoft.Toolkit.Parsers.Markdown.Helpers.Common : object {
    private static List`1<InlineTripCharHelper> _triggerList;
    private static Char[] _tripCharacters;
    private static Common();
    public static List`1<MarkdownInline> ParseInlineChildren(string markdown, int startingPos, int maxEndingPos, bool ignoreLinks);
    private static InlineParseResult FindNextInlineElement(string markdown, int start, int end, bool ignoreLinks);
    public static int FindNextSingleNewLine(string markdown, int startingPos, int endingPos, Int32& startOfNextLine);
    public static int IndexOf(string markdown, string search, int startingPos, int endingPos, bool reverseSearch);
    public static int IndexOf(string markdown, char search, int startingPos, int endingPos, bool reverseSearch);
    public static int FindNextWhiteSpace(string markdown, int startingPos, int endingPos, bool ifNotFoundReturnLength);
    [IteratorStateMachineAttribute("Microsoft.Toolkit.Parsers.Markdown.Helpers.Common/<ParseLines>d__9")]
public static IEnumerable`1<LineInfo> ParseLines(string markdown, int start, int end, int quoteDepth);
    public static int SkipQuoteCharacters(string markdown, int start, int end, int quoteDepth);
    public static bool IsUrlValid(string url);
}
[ObsoleteAttribute("Parsing code has been deprecated, we suggest using Markdig. See https://github.com/CommunityToolkit/WindowsCommunityToolkit/issues/3200 for more info.")]
internal class Microsoft.Toolkit.Parsers.Markdown.Helpers.DebuggingReporter : object {
    public static void ReportCriticalError(string errorText);
}
[ObsoleteAttribute("Parsing code has been deprecated, we suggest using Markdig. See https://github.com/CommunityToolkit/WindowsCommunityToolkit/issues/3200 for more info.")]
internal class Microsoft.Toolkit.Parsers.Markdown.Helpers.InlineParseResult : object {
    [CompilerGeneratedAttribute]
private MarkdownInline <ParsedElement>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Start>k__BackingField;
    [CompilerGeneratedAttribute]
private int <End>k__BackingField;
    public MarkdownInline ParsedElement { get; }
    public int Start { get; }
    public int End { get; }
    public InlineParseResult(MarkdownInline parsedElement, int start, int end);
    [CompilerGeneratedAttribute]
public MarkdownInline get_ParsedElement();
    [CompilerGeneratedAttribute]
public int get_Start();
    [CompilerGeneratedAttribute]
public int get_End();
}
[ObsoleteAttribute("Parsing code has been deprecated, we suggest using Markdig. See https://github.com/CommunityToolkit/WindowsCommunityToolkit/issues/3200 for more info.")]
internal class Microsoft.Toolkit.Parsers.Markdown.Helpers.InlineTripCharHelper : object {
    [CompilerGeneratedAttribute]
private char <FirstChar>k__BackingField;
    [CompilerGeneratedAttribute]
private InlineParseMethod <Method>k__BackingField;
    public char FirstChar { get; public set; }
    public InlineParseMethod Method { get; public set; }
    [CompilerGeneratedAttribute]
public char get_FirstChar();
    [CompilerGeneratedAttribute]
public void set_FirstChar(char value);
    [CompilerGeneratedAttribute]
public InlineParseMethod get_Method();
    [CompilerGeneratedAttribute]
public void set_Method(InlineParseMethod value);
}
[ObsoleteAttribute("Parsing code has been deprecated, we suggest using Markdig. See https://github.com/CommunityToolkit/WindowsCommunityToolkit/issues/3200 for more info.")]
internal class Microsoft.Toolkit.Parsers.Markdown.Helpers.LineInfo : object {
    [CompilerGeneratedAttribute]
private int <StartOfLine>k__BackingField;
    [CompilerGeneratedAttribute]
private int <FirstNonWhitespaceChar>k__BackingField;
    [CompilerGeneratedAttribute]
private int <EndOfLine>k__BackingField;
    [CompilerGeneratedAttribute]
private int <StartOfNextLine>k__BackingField;
    public int StartOfLine { get; public set; }
    public int FirstNonWhitespaceChar { get; public set; }
    public int EndOfLine { get; public set; }
    public bool IsLineBlank { get; }
    public int StartOfNextLine { get; public set; }
    [CompilerGeneratedAttribute]
public int get_StartOfLine();
    [CompilerGeneratedAttribute]
public void set_StartOfLine(int value);
    [CompilerGeneratedAttribute]
public int get_FirstNonWhitespaceChar();
    [CompilerGeneratedAttribute]
public void set_FirstNonWhitespaceChar(int value);
    [CompilerGeneratedAttribute]
public int get_EndOfLine();
    [CompilerGeneratedAttribute]
public void set_EndOfLine(int value);
    public bool get_IsLineBlank();
    [CompilerGeneratedAttribute]
public int get_StartOfNextLine();
    [CompilerGeneratedAttribute]
public void set_StartOfNextLine(int value);
}
[ObsoleteAttribute("Parsing code has been deprecated, we suggest using Markdig. See https://github.com/CommunityToolkit/WindowsCommunityToolkit/issues/3200 for more info.")]
public enum Microsoft.Toolkit.Parsers.Markdown.HyperlinkType : Enum {
    public int value__;
    public static HyperlinkType BracketedUrl;
    public static HyperlinkType FullUrl;
    public static HyperlinkType PartialUrl;
    public static HyperlinkType Email;
    public static HyperlinkType Subreddit;
    public static HyperlinkType User;
}
[ObsoleteAttribute("Parsing code has been deprecated, we suggest using Markdig. See https://github.com/CommunityToolkit/WindowsCommunityToolkit/issues/3200 for more info.")]
internal enum Microsoft.Toolkit.Parsers.Markdown.InlineParseMethod : Enum {
    public int value__;
    public static InlineParseMethod Comment;
    public static InlineParseMethod LinkReference;
    public static InlineParseMethod Bold;
    public static InlineParseMethod BoldItalic;
    public static InlineParseMethod Code;
    public static InlineParseMethod Italic;
    public static InlineParseMethod MarkdownLink;
    public static InlineParseMethod AngleBracketLink;
    public static InlineParseMethod Url;
    public static InlineParseMethod RedditLink;
    public static InlineParseMethod PartialLink;
    public static InlineParseMethod Email;
    public static InlineParseMethod Strikethrough;
    public static InlineParseMethod Superscript;
    public static InlineParseMethod Subscript;
    public static InlineParseMethod Image;
    public static InlineParseMethod Emoji;
}
[ObsoleteAttribute("Parsing code has been deprecated, we suggest using Markdig. See https://github.com/CommunityToolkit/WindowsCommunityToolkit/issues/3200 for more info.")]
internal class Microsoft.Toolkit.Parsers.Markdown.Inlines.BoldItalicTextInline : MarkdownInline {
    [CompilerGeneratedAttribute]
private IList`1<MarkdownInline> <Inlines>k__BackingField;
    public IList`1<MarkdownInline> Inlines { get; public set; }
    [CompilerGeneratedAttribute]
public sealed virtual IList`1<MarkdownInline> get_Inlines();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Inlines(IList`1<MarkdownInline> value);
    internal static void AddTripChars(List`1<InlineTripCharHelper> tripCharHelpers);
    internal static InlineParseResult Parse(string markdown, int start, int maxEnd);
    public virtual string ToString();
}
[ObsoleteAttribute("Parsing code has been deprecated, we suggest using Markdig. See https://github.com/CommunityToolkit/WindowsCommunityToolkit/issues/3200 for more info.")]
public class Microsoft.Toolkit.Parsers.Markdown.Inlines.BoldTextInline : MarkdownInline {
    [CompilerGeneratedAttribute]
private IList`1<MarkdownInline> <Inlines>k__BackingField;
    public IList`1<MarkdownInline> Inlines { get; public set; }
    [CompilerGeneratedAttribute]
public sealed virtual IList`1<MarkdownInline> get_Inlines();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Inlines(IList`1<MarkdownInline> value);
    internal static void AddTripChars(List`1<InlineTripCharHelper> tripCharHelpers);
    internal static InlineParseResult Parse(string markdown, int start, int maxEnd);
    public virtual string ToString();
}
[ObsoleteAttribute("Parsing code has been deprecated, we suggest using Markdig. See https://github.com/CommunityToolkit/WindowsCommunityToolkit/issues/3200 for more info.")]
public class Microsoft.Toolkit.Parsers.Markdown.Inlines.CodeInline : MarkdownInline {
    [CompilerGeneratedAttribute]
private string <Text>k__BackingField;
    public string Text { get; public set; }
    [CompilerGeneratedAttribute]
public sealed virtual string get_Text();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Text(string value);
    internal static void AddTripChars(List`1<InlineTripCharHelper> tripCharHelpers);
    internal static InlineParseResult Parse(string markdown, int start, int maxEnd);
    public virtual string ToString();
}
[ObsoleteAttribute("Parsing code has been deprecated, we suggest using Markdig. See https://github.com/CommunityToolkit/WindowsCommunityToolkit/issues/3200 for more info.")]
internal class Microsoft.Toolkit.Parsers.Markdown.Inlines.CommentInline : MarkdownInline {
    [CompilerGeneratedAttribute]
private string <Text>k__BackingField;
    public string Text { get; public set; }
    [CompilerGeneratedAttribute]
public sealed virtual string get_Text();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Text(string value);
    internal static void AddTripChars(List`1<InlineTripCharHelper> tripCharHelpers);
    internal static InlineParseResult Parse(string markdown, int start, int maxEnd);
    public virtual string ToString();
}
[ObsoleteAttribute("Parsing code has been deprecated, we suggest using Markdig. See https://github.com/CommunityToolkit/WindowsCommunityToolkit/issues/3200 for more info.")]
public class Microsoft.Toolkit.Parsers.Markdown.Inlines.EmojiInline : MarkdownInline {
    [CompilerGeneratedAttribute]
private string <Text>k__BackingField;
    private static Dictionary`2<string, int> _emojiCodesDictionary;
    public string Text { get; public set; }
    private static EmojiInline();
    internal static void AddTripChars(List`1<InlineTripCharHelper> tripCharHelpers);
    internal static InlineParseResult Parse(string markdown, int start, int maxEnd);
    [CompilerGeneratedAttribute]
public sealed virtual string get_Text();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Text(string value);
}
[ObsoleteAttribute("Parsing code has been deprecated, we suggest using Markdig. See https://github.com/CommunityToolkit/WindowsCommunityToolkit/issues/3200 for more info.")]
public class Microsoft.Toolkit.Parsers.Markdown.Inlines.HyperlinkInline : MarkdownInline {
    [CompilerGeneratedAttribute]
private string <Text>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Url>k__BackingField;
    [CompilerGeneratedAttribute]
private HyperlinkType <LinkType>k__BackingField;
    public string Text { get; public set; }
    public string Url { get; public set; }
    private string Microsoft.Toolkit.Parsers.Markdown.Inlines.ILinkElement.Tooltip { get; }
    public HyperlinkType LinkType { get; public set; }
    [CompilerGeneratedAttribute]
public sealed virtual string get_Text();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Text(string value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_Url();
    [CompilerGeneratedAttribute]
public void set_Url(string value);
    private sealed virtual override string Microsoft.Toolkit.Parsers.Markdown.Inlines.ILinkElement.get_Tooltip();
    [CompilerGeneratedAttribute]
public HyperlinkType get_LinkType();
    [CompilerGeneratedAttribute]
public void set_LinkType(HyperlinkType value);
    internal static void AddTripChars(List`1<InlineTripCharHelper> tripCharHelpers);
    internal static InlineParseResult ParseAngleBracketLink(string markdown, int start, int maxEnd);
    internal static InlineParseResult ParseUrl(string markdown, int tripPos, int maxEnd);
    internal static InlineParseResult ParseRedditLink(string markdown, int start, int maxEnd);
    private static InlineParseResult ParseDoubleSlashLink(string markdown, int start, int maxEnd);
    private static InlineParseResult ParseSingleSlashLink(string markdown, int start, int maxEnd);
    internal static InlineParseResult ParsePartialLink(string markdown, int tripPos, int maxEnd);
    internal static InlineParseResult ParseEmailAddress(string markdown, int minStart, int tripPos, int maxEnd);
    public virtual string ToString();
    private static int FindEndOfRedditLink(string markdown, int start, int end);
    private static int FindUrlEnd(string markdown, int start, int maxEnd);
}
[ObsoleteAttribute("Parsing code has been deprecated, we suggest using Markdig. See https://github.com/CommunityToolkit/WindowsCommunityToolkit/issues/3200 for more info.")]
public interface Microsoft.Toolkit.Parsers.Markdown.Inlines.IInlineContainer {
    public IList`1<MarkdownInline> Inlines { get; public set; }
    public abstract virtual IList`1<MarkdownInline> get_Inlines();
    public abstract virtual void set_Inlines(IList`1<MarkdownInline> value);
}
[ObsoleteAttribute("Parsing code has been deprecated, we suggest using Markdig. See https://github.com/CommunityToolkit/WindowsCommunityToolkit/issues/3200 for more info.")]
public interface Microsoft.Toolkit.Parsers.Markdown.Inlines.IInlineLeaf {
    public string Text { get; public set; }
    public abstract virtual string get_Text();
    public abstract virtual void set_Text(string value);
}
[ObsoleteAttribute("Parsing code has been deprecated, we suggest using Markdig. See https://github.com/CommunityToolkit/WindowsCommunityToolkit/issues/3200 for more info.")]
internal interface Microsoft.Toolkit.Parsers.Markdown.Inlines.ILinkElement {
    public string Url { get; }
    public string Tooltip { get; }
    public abstract virtual string get_Url();
    public abstract virtual string get_Tooltip();
}
[ObsoleteAttribute("Parsing code has been deprecated, we suggest using Markdig. See https://github.com/CommunityToolkit/WindowsCommunityToolkit/issues/3200 for more info.")]
public class Microsoft.Toolkit.Parsers.Markdown.Inlines.ImageInline : MarkdownInline {
    [CompilerGeneratedAttribute]
private string <Url>k__BackingField;
    [CompilerGeneratedAttribute]
private string <RenderUrl>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Tooltip>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Text>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ReferenceId>k__BackingField;
    [CompilerGeneratedAttribute]
private int <ImageWidth>k__BackingField;
    [CompilerGeneratedAttribute]
private int <ImageHeight>k__BackingField;
    public string Url { get; public set; }
    public string RenderUrl { get; public set; }
    public string Tooltip { get; public set; }
    public string Text { get; public set; }
    public string ReferenceId { get; public set; }
    public int ImageWidth { get; internal set; }
    public int ImageHeight { get; internal set; }
    [CompilerGeneratedAttribute]
public string get_Url();
    [CompilerGeneratedAttribute]
public void set_Url(string value);
    [CompilerGeneratedAttribute]
public string get_RenderUrl();
    [CompilerGeneratedAttribute]
public void set_RenderUrl(string value);
    [CompilerGeneratedAttribute]
public string get_Tooltip();
    [CompilerGeneratedAttribute]
public void set_Tooltip(string value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_Text();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Text(string value);
    [CompilerGeneratedAttribute]
public string get_ReferenceId();
    [CompilerGeneratedAttribute]
public void set_ReferenceId(string value);
    [CompilerGeneratedAttribute]
public int get_ImageWidth();
    [CompilerGeneratedAttribute]
internal void set_ImageWidth(int value);
    [CompilerGeneratedAttribute]
public int get_ImageHeight();
    [CompilerGeneratedAttribute]
internal void set_ImageHeight(int value);
    internal static void AddTripChars(List`1<InlineTripCharHelper> tripCharHelpers);
    internal static InlineParseResult Parse(string markdown, int start, int end);
    internal void ResolveReference(MarkdownDocument document);
    public virtual string ToString();
}
[ObsoleteAttribute("Parsing code has been deprecated, we suggest using Markdig. See https://github.com/CommunityToolkit/WindowsCommunityToolkit/issues/3200 for more info.")]
public class Microsoft.Toolkit.Parsers.Markdown.Inlines.ItalicTextInline : MarkdownInline {
    [CompilerGeneratedAttribute]
private IList`1<MarkdownInline> <Inlines>k__BackingField;
    public IList`1<MarkdownInline> Inlines { get; public set; }
    [CompilerGeneratedAttribute]
public sealed virtual IList`1<MarkdownInline> get_Inlines();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Inlines(IList`1<MarkdownInline> value);
    internal static void AddTripChars(List`1<InlineTripCharHelper> tripCharHelpers);
    internal static InlineParseResult Parse(string markdown, int start, int maxEnd);
    public virtual string ToString();
}
[ObsoleteAttribute("Parsing code has been deprecated, we suggest using Markdig. See https://github.com/CommunityToolkit/WindowsCommunityToolkit/issues/3200 for more info.")]
public class Microsoft.Toolkit.Parsers.Markdown.Inlines.LinkAnchorInline : MarkdownInline {
    [CompilerGeneratedAttribute]
private string <Link>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Raw>k__BackingField;
    public string Link { get; public set; }
    public string Raw { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Link();
    [CompilerGeneratedAttribute]
public void set_Link(string value);
    [CompilerGeneratedAttribute]
public string get_Raw();
    [CompilerGeneratedAttribute]
public void set_Raw(string value);
    internal static void AddTripChars(List`1<InlineTripCharHelper> tripCharHelpers);
    internal static InlineParseResult Parse(string markdown, int start, int maxEnd);
    public virtual string ToString();
}
[ObsoleteAttribute("Parsing code has been deprecated, we suggest using Markdig. See https://github.com/CommunityToolkit/WindowsCommunityToolkit/issues/3200 for more info.")]
public abstract class Microsoft.Toolkit.Parsers.Markdown.Inlines.MarkdownInline : MarkdownElement {
    [CompilerGeneratedAttribute]
private MarkdownInlineType <Type>k__BackingField;
    public MarkdownInlineType Type { get; public set; }
    internal MarkdownInline(MarkdownInlineType type);
    [CompilerGeneratedAttribute]
public MarkdownInlineType get_Type();
    [CompilerGeneratedAttribute]
public void set_Type(MarkdownInlineType value);
}
[ObsoleteAttribute("Parsing code has been deprecated, we suggest using Markdig. See https://github.com/CommunityToolkit/WindowsCommunityToolkit/issues/3200 for more info.")]
public class Microsoft.Toolkit.Parsers.Markdown.Inlines.MarkdownLinkInline : MarkdownInline {
    [CompilerGeneratedAttribute]
private IList`1<MarkdownInline> <Inlines>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Url>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Tooltip>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ReferenceId>k__BackingField;
    public IList`1<MarkdownInline> Inlines { get; public set; }
    public string Url { get; public set; }
    public string Tooltip { get; public set; }
    public string ReferenceId { get; public set; }
    [CompilerGeneratedAttribute]
public sealed virtual IList`1<MarkdownInline> get_Inlines();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Inlines(IList`1<MarkdownInline> value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_Url();
    [CompilerGeneratedAttribute]
public void set_Url(string value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_Tooltip();
    [CompilerGeneratedAttribute]
public void set_Tooltip(string value);
    [CompilerGeneratedAttribute]
public string get_ReferenceId();
    [CompilerGeneratedAttribute]
public void set_ReferenceId(string value);
    internal static void AddTripChars(List`1<InlineTripCharHelper> tripCharHelpers);
    internal static InlineParseResult Parse(string markdown, int start, int maxEnd);
    internal void ResolveReference(MarkdownDocument document);
    public virtual string ToString();
}
[ObsoleteAttribute("Parsing code has been deprecated, we suggest using Markdig. See https://github.com/CommunityToolkit/WindowsCommunityToolkit/issues/3200 for more info.")]
public class Microsoft.Toolkit.Parsers.Markdown.Inlines.StrikethroughTextInline : MarkdownInline {
    [CompilerGeneratedAttribute]
private IList`1<MarkdownInline> <Inlines>k__BackingField;
    public IList`1<MarkdownInline> Inlines { get; public set; }
    [CompilerGeneratedAttribute]
public sealed virtual IList`1<MarkdownInline> get_Inlines();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Inlines(IList`1<MarkdownInline> value);
    internal static void AddTripChars(List`1<InlineTripCharHelper> tripCharHelpers);
    internal static InlineParseResult Parse(string markdown, int start, int maxEnd);
    public virtual string ToString();
}
[ObsoleteAttribute("Parsing code has been deprecated, we suggest using Markdig. See https://github.com/CommunityToolkit/WindowsCommunityToolkit/issues/3200 for more info.")]
public class Microsoft.Toolkit.Parsers.Markdown.Inlines.SubscriptTextInline : MarkdownInline {
    [CompilerGeneratedAttribute]
private IList`1<MarkdownInline> <Inlines>k__BackingField;
    public IList`1<MarkdownInline> Inlines { get; public set; }
    [CompilerGeneratedAttribute]
public sealed virtual IList`1<MarkdownInline> get_Inlines();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Inlines(IList`1<MarkdownInline> value);
    internal static void AddTripChars(List`1<InlineTripCharHelper> tripCharHelpers);
    internal static InlineParseResult Parse(string markdown, int start, int maxEnd);
    public virtual string ToString();
}
[ObsoleteAttribute("Parsing code has been deprecated, we suggest using Markdig. See https://github.com/CommunityToolkit/WindowsCommunityToolkit/issues/3200 for more info.")]
public class Microsoft.Toolkit.Parsers.Markdown.Inlines.SuperscriptTextInline : MarkdownInline {
    [CompilerGeneratedAttribute]
private IList`1<MarkdownInline> <Inlines>k__BackingField;
    public IList`1<MarkdownInline> Inlines { get; public set; }
    [CompilerGeneratedAttribute]
public sealed virtual IList`1<MarkdownInline> get_Inlines();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Inlines(IList`1<MarkdownInline> value);
    internal static void AddTripChars(List`1<InlineTripCharHelper> tripCharHelpers);
    internal static InlineParseResult Parse(string markdown, int start, int maxEnd);
    public virtual string ToString();
}
[ObsoleteAttribute("Parsing code has been deprecated, we suggest using Markdig. See https://github.com/CommunityToolkit/WindowsCommunityToolkit/issues/3200 for more info.")]
public class Microsoft.Toolkit.Parsers.Markdown.Inlines.TextRunInline : MarkdownInline {
    [CompilerGeneratedAttribute]
private string <Text>k__BackingField;
    private static Dictionary`2<string, int> _entities;
    private static Char[] _escapeCharacters;
    public string Text { get; public set; }
    private static TextRunInline();
    [CompilerGeneratedAttribute]
public sealed virtual string get_Text();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Text(string value);
    internal static TextRunInline Parse(string markdown, int start, int end);
    internal static string ResolveEscapeSequences(string markdown, int start, int end);
    public virtual string ToString();
}
[ObsoleteAttribute("Parsing code has been deprecated, we suggest using Markdig. See https://github.com/CommunityToolkit/WindowsCommunityToolkit/issues/3200 for more info.")]
public enum Microsoft.Toolkit.Parsers.Markdown.ListStyle : Enum {
    public int value__;
    public static ListStyle Bulleted;
    public static ListStyle Numbered;
}
[ObsoleteAttribute("Parsing code has been deprecated, we suggest using Markdig. See https://github.com/CommunityToolkit/WindowsCommunityToolkit/issues/3200 for more info.")]
public enum Microsoft.Toolkit.Parsers.Markdown.MarkdownBlockType : Enum {
    public int value__;
    public static MarkdownBlockType Root;
    public static MarkdownBlockType Paragraph;
    public static MarkdownBlockType Quote;
    public static MarkdownBlockType Code;
    public static MarkdownBlockType Header;
    public static MarkdownBlockType List;
    public static MarkdownBlockType ListItemBuilder;
    public static MarkdownBlockType HorizontalRule;
    public static MarkdownBlockType Table;
    public static MarkdownBlockType LinkReference;
    public static MarkdownBlockType YamlHeader;
}
[ObsoleteAttribute("Parsing code has been deprecated, we suggest using Markdig. See https://github.com/CommunityToolkit/WindowsCommunityToolkit/issues/3200 for more info.")]
public class Microsoft.Toolkit.Parsers.Markdown.MarkdownDocument : MarkdownBlock {
    [CompilerGeneratedAttribute]
private static List`1<string> <KnownSchemes>k__BackingField;
    private Dictionary`2<string, LinkReferenceBlock> _references;
    [CompilerGeneratedAttribute]
private IList`1<MarkdownBlock> <Blocks>k__BackingField;
    public static List`1<string> KnownSchemes { get; private set; }
    public IList`1<MarkdownBlock> Blocks { get; public set; }
    private static MarkdownDocument();
    [CompilerGeneratedAttribute]
public static List`1<string> get_KnownSchemes();
    [CompilerGeneratedAttribute]
private static void set_KnownSchemes(List`1<string> value);
    [CompilerGeneratedAttribute]
public IList`1<MarkdownBlock> get_Blocks();
    [CompilerGeneratedAttribute]
public void set_Blocks(IList`1<MarkdownBlock> value);
    public void Parse(string markdownText);
    internal static List`1<MarkdownBlock> Parse(string markdown, int start, int end, int quoteDepth, Int32& actualEnd);
    public LinkReferenceBlock LookUpReference(string id);
    public virtual string ToString();
}
[ObsoleteAttribute("Parsing code has been deprecated, we suggest using Markdig. See https://github.com/CommunityToolkit/WindowsCommunityToolkit/issues/3200 for more info.")]
public abstract class Microsoft.Toolkit.Parsers.Markdown.MarkdownElement : object {
}
[ObsoleteAttribute("Parsing code has been deprecated, we suggest using Markdig. See https://github.com/CommunityToolkit/WindowsCommunityToolkit/issues/3200 for more info.")]
public enum Microsoft.Toolkit.Parsers.Markdown.MarkdownInlineType : Enum {
    public int value__;
    public static MarkdownInlineType Comment;
    public static MarkdownInlineType TextRun;
    public static MarkdownInlineType Bold;
    public static MarkdownInlineType Italic;
    public static MarkdownInlineType MarkdownLink;
    public static MarkdownInlineType RawHyperlink;
    public static MarkdownInlineType RawSubreddit;
    public static MarkdownInlineType Strikethrough;
    public static MarkdownInlineType Superscript;
    public static MarkdownInlineType Subscript;
    public static MarkdownInlineType Code;
    public static MarkdownInlineType Image;
    public static MarkdownInlineType Emoji;
    public static MarkdownInlineType LinkReference;
}
public interface Microsoft.Toolkit.Parsers.Markdown.Render.IRenderContext {
    public bool TrimLeadingWhitespace { get; public set; }
    public object Parent { get; public set; }
    public abstract virtual bool get_TrimLeadingWhitespace();
    public abstract virtual void set_TrimLeadingWhitespace(bool value);
    public abstract virtual object get_Parent();
    public abstract virtual void set_Parent(object value);
    public abstract virtual IRenderContext Clone();
}
public abstract class Microsoft.Toolkit.Parsers.Markdown.Render.MarkdownRendererBase : object {
    [CompilerGeneratedAttribute]
private MarkdownDocument <Document>k__BackingField;
    protected MarkdownDocument Document { get; }
    public MarkdownRendererBase(MarkdownDocument document);
    protected abstract virtual void RenderParagraph(ParagraphBlock element, IRenderContext context);
    protected abstract virtual void RenderYamlHeader(YamlHeaderBlock element, IRenderContext context);
    protected abstract virtual void RenderHeader(HeaderBlock element, IRenderContext context);
    protected abstract virtual void RenderListElement(ListBlock element, IRenderContext context);
    protected abstract virtual void RenderHorizontalRule(IRenderContext context);
    protected abstract virtual void RenderQuote(QuoteBlock element, IRenderContext context);
    protected abstract virtual void RenderCode(CodeBlock element, IRenderContext context);
    protected abstract virtual void RenderTable(TableBlock element, IRenderContext context);
    public virtual void Render(IRenderContext context);
    protected virtual void RenderBlocks(IEnumerable`1<MarkdownBlock> blockElements, IRenderContext context);
    protected void RenderBlock(MarkdownBlock element, IRenderContext context);
    protected void RenderInlineChildren(IList`1<MarkdownInline> inlineElements, IRenderContext context);
    protected void RenderInline(MarkdownInline element, IRenderContext context);
    protected string CollapseWhitespace(IRenderContext context, string text);
    protected void CheckRenderMarkdownLink(MarkdownLinkInline element, IRenderContext context);
    [CompilerGeneratedAttribute]
protected MarkdownDocument get_Document();
    protected abstract virtual void RenderEmoji(EmojiInline element, IRenderContext context);
    protected abstract virtual void RenderTextRun(TextRunInline element, IRenderContext context);
    protected abstract virtual void RenderBoldRun(BoldTextInline element, IRenderContext context);
    protected abstract virtual void RenderMarkdownLink(MarkdownLinkInline element, IRenderContext context);
    protected abstract virtual void RenderImage(ImageInline element, IRenderContext context);
    protected abstract virtual void RenderHyperlink(HyperlinkInline element, IRenderContext context);
    protected abstract virtual void RenderItalicRun(ItalicTextInline element, IRenderContext context);
    protected abstract virtual void RenderStrikethroughRun(StrikethroughTextInline element, IRenderContext context);
    protected abstract virtual void RenderSuperscriptRun(SuperscriptTextInline element, IRenderContext context);
    protected abstract virtual void RenderSubscriptRun(SubscriptTextInline element, IRenderContext context);
    protected abstract virtual void RenderCodeRun(CodeInline element, IRenderContext context);
}
[ObsoleteAttribute("Parsing code has been deprecated, we suggest using Markdig. See https://github.com/CommunityToolkit/WindowsCommunityToolkit/issues/3200 for more info.")]
public abstract class Microsoft.Toolkit.Parsers.SchemaBase : object {
    [CompilerGeneratedAttribute]
private string <InternalID>k__BackingField;
    public string InternalID { get; public set; }
    [CompilerGeneratedAttribute]
public string get_InternalID();
    [CompilerGeneratedAttribute]
public void set_InternalID(string value);
}
public class Microsoft.Toolkit.Uwp.UI.Controls.CodeBlockResolvingEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
private string <CodeLanguage>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Text>k__BackingField;
    [CompilerGeneratedAttribute]
private InlineCollection <InlineCollection>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Handled>k__BackingField;
    public string CodeLanguage { get; }
    public string Text { get; }
    public InlineCollection InlineCollection { get; }
    public bool Handled { get; public set; }
    internal CodeBlockResolvingEventArgs(InlineCollection inlineCollection, string text, string codeLanguage);
    [CompilerGeneratedAttribute]
public string get_CodeLanguage();
    [CompilerGeneratedAttribute]
public string get_Text();
    [CompilerGeneratedAttribute]
public InlineCollection get_InlineCollection();
    [CompilerGeneratedAttribute]
public bool get_Handled();
    [CompilerGeneratedAttribute]
public void set_Handled(bool value);
}
public class Microsoft.Toolkit.Uwp.UI.Controls.ImageResolvingEventArgs : EventArgs {
    private IList`1<TaskCompletionSource`1<object>> _deferrals;
    [CompilerGeneratedAttribute]
private string <Url>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Tooltip>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Handled>k__BackingField;
    [CompilerGeneratedAttribute]
private ImageSource <Image>k__BackingField;
    public string Url { get; }
    public string Tooltip { get; }
    public bool Handled { get; public set; }
    public ImageSource Image { get; public set; }
    internal ImageResolvingEventArgs(string url, string tooltip);
    [CompilerGeneratedAttribute]
public string get_Url();
    [CompilerGeneratedAttribute]
public string get_Tooltip();
    [CompilerGeneratedAttribute]
public bool get_Handled();
    [CompilerGeneratedAttribute]
public void set_Handled(bool value);
    [CompilerGeneratedAttribute]
public ImageSource get_Image();
    [CompilerGeneratedAttribute]
public void set_Image(ImageSource value);
    public Deferral GetDeferral();
    internal Task WaitForDeferrals();
}
public class Microsoft.Toolkit.Uwp.UI.Controls.LinkClickedEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
private string <Link>k__BackingField;
    public string Link { get; }
    internal LinkClickedEventArgs(string link);
    [CompilerGeneratedAttribute]
public string get_Link();
}
public interface Microsoft.Toolkit.Uwp.UI.Controls.Markdown.Render.ICodeBlockResolver {
    public abstract virtual bool ParseSyntax(InlineCollection inlineCollection, string text, string codeLanguage);
}
public interface Microsoft.Toolkit.Uwp.UI.Controls.Markdown.Render.IImageResolver {
    public abstract virtual Task`1<ImageSource> ResolveImageAsync(string url, string tooltip);
}
public interface Microsoft.Toolkit.Uwp.UI.Controls.Markdown.Render.ILinkRegister {
    public abstract virtual void RegisterNewHyperLink(Hyperlink newHyperlink, string linkUrl);
    public abstract virtual void RegisterNewHyperLink(Image newImagelink, string linkUrl, bool isHyperLink);
}
public class Microsoft.Toolkit.Uwp.UI.Controls.Markdown.Render.InlineRenderContext : RenderContext {
    [CompilerGeneratedAttribute]
private bool <WithinItalics>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <WithinBold>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <WithinHyperlink>k__BackingField;
    [CompilerGeneratedAttribute]
private InlineCollection <InlineCollection>k__BackingField;
    public bool WithinItalics { get; public set; }
    public bool WithinBold { get; public set; }
    public bool WithinHyperlink { get; public set; }
    public InlineCollection InlineCollection { get; public set; }
    internal InlineRenderContext(InlineCollection inlineCollection, IRenderContext context);
    [CompilerGeneratedAttribute]
public bool get_WithinItalics();
    [CompilerGeneratedAttribute]
public void set_WithinItalics(bool value);
    [CompilerGeneratedAttribute]
public bool get_WithinBold();
    [CompilerGeneratedAttribute]
public void set_WithinBold(bool value);
    [CompilerGeneratedAttribute]
public bool get_WithinHyperlink();
    [CompilerGeneratedAttribute]
public void set_WithinHyperlink(bool value);
    [CompilerGeneratedAttribute]
public InlineCollection get_InlineCollection();
    [CompilerGeneratedAttribute]
public void set_InlineCollection(InlineCollection value);
}
public class Microsoft.Toolkit.Uwp.UI.Controls.Markdown.Render.MarkdownRenderer : MarkdownRendererBase {
    [CompilerGeneratedAttribute]
private Thickness <Padding>k__BackingField;
    [CompilerGeneratedAttribute]
private Thickness <BorderThickness>k__BackingField;
    [CompilerGeneratedAttribute]
private Thickness <CodeBorderThickness>k__BackingField;
    [CompilerGeneratedAttribute]
private Thickness <InlineCodeBorderThickness>k__BackingField;
    [CompilerGeneratedAttribute]
private Thickness <CodeMargin>k__BackingField;
    [CompilerGeneratedAttribute]
private Thickness <CodePadding>k__BackingField;
    [CompilerGeneratedAttribute]
private Thickness <InlineCodePadding>k__BackingField;
    [CompilerGeneratedAttribute]
private Thickness <InlineCodeMargin>k__BackingField;
    [CompilerGeneratedAttribute]
private double <Header1FontSize>k__BackingField;
    [CompilerGeneratedAttribute]
private Thickness <Header1Margin>k__BackingField;
    [CompilerGeneratedAttribute]
private double <Header2FontSize>k__BackingField;
    [CompilerGeneratedAttribute]
private Thickness <Header2Margin>k__BackingField;
    [CompilerGeneratedAttribute]
private double <Header3FontSize>k__BackingField;
    [CompilerGeneratedAttribute]
private Thickness <Header3Margin>k__BackingField;
    [CompilerGeneratedAttribute]
private double <Header4FontSize>k__BackingField;
    [CompilerGeneratedAttribute]
private Thickness <Header4Margin>k__BackingField;
    [CompilerGeneratedAttribute]
private double <Header5FontSize>k__BackingField;
    [CompilerGeneratedAttribute]
private Thickness <Header5Margin>k__BackingField;
    [CompilerGeneratedAttribute]
private double <Header6FontSize>k__BackingField;
    [CompilerGeneratedAttribute]
private Thickness <Header6Margin>k__BackingField;
    [CompilerGeneratedAttribute]
private Thickness <HorizontalRuleMargin>k__BackingField;
    [CompilerGeneratedAttribute]
private double <HorizontalRuleThickness>k__BackingField;
    [CompilerGeneratedAttribute]
private Thickness <ListMargin>k__BackingField;
    [CompilerGeneratedAttribute]
private double <ListGutterWidth>k__BackingField;
    [CompilerGeneratedAttribute]
private double <ListBulletSpacing>k__BackingField;
    [CompilerGeneratedAttribute]
private Thickness <ParagraphMargin>k__BackingField;
    [CompilerGeneratedAttribute]
private int <ParagraphLineHeight>k__BackingField;
    [CompilerGeneratedAttribute]
private Thickness <QuoteBorderThickness>k__BackingField;
    [CompilerGeneratedAttribute]
private Thickness <QuoteMargin>k__BackingField;
    [CompilerGeneratedAttribute]
private Thickness <QuotePadding>k__BackingField;
    [CompilerGeneratedAttribute]
private double <TableBorderThickness>k__BackingField;
    [CompilerGeneratedAttribute]
private double <YamlBorderThickness>k__BackingField;
    [CompilerGeneratedAttribute]
private Thickness <TableCellPadding>k__BackingField;
    [CompilerGeneratedAttribute]
private Thickness <TableMargin>k__BackingField;
    [CompilerGeneratedAttribute]
private double <FontSize>k__BackingField;
    [CompilerGeneratedAttribute]
private int <CharacterSpacing>k__BackingField;
    [CompilerGeneratedAttribute]
private TextWrapping <TextWrapping>k__BackingField;
    [CompilerGeneratedAttribute]
private FontStretch <FontStretch>k__BackingField;
    [CompilerGeneratedAttribute]
private Stretch <ImageStretch>k__BackingField;
    [CompilerGeneratedAttribute]
private double <ImageMaxHeight>k__BackingField;
    [CompilerGeneratedAttribute]
private double <ImageMaxWidth>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <WrapCodeBlock>k__BackingField;
    private static MethodInfo pointerWheelChanged;
    [CompilerGeneratedAttribute]
private FrameworkElement <RootElement>k__BackingField;
    [CompilerGeneratedAttribute]
private ILinkRegister <LinkRegister>k__BackingField;
    [CompilerGeneratedAttribute]
private IImageResolver <ImageResolver>k__BackingField;
    [CompilerGeneratedAttribute]
private ICodeBlockResolver <CodeBlockResolver>k__BackingField;
    [CompilerGeneratedAttribute]
private FontFamily <DefaultEmojiFont>k__BackingField;
    [CompilerGeneratedAttribute]
private Brush <Background>k__BackingField;
    [CompilerGeneratedAttribute]
private Brush <BorderBrush>k__BackingField;
    [CompilerGeneratedAttribute]
private FlowDirection <FlowDirection>k__BackingField;
    [CompilerGeneratedAttribute]
private FontFamily <FontFamily>k__BackingField;
    [CompilerGeneratedAttribute]
private FontStyle <FontStyle>k__BackingField;
    [CompilerGeneratedAttribute]
private FontWeight <FontWeight>k__BackingField;
    [CompilerGeneratedAttribute]
private Brush <Foreground>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsTextSelectionEnabled>k__BackingField;
    [CompilerGeneratedAttribute]
private Brush <CodeBackground>k__BackingField;
    [CompilerGeneratedAttribute]
private Brush <InlineCodeBackground>k__BackingField;
    [CompilerGeneratedAttribute]
private Brush <InlineCodeForeground>k__BackingField;
    [CompilerGeneratedAttribute]
private Brush <InlineCodeBorderBrush>k__BackingField;
    [CompilerGeneratedAttribute]
private Brush <CodeBorderBrush>k__BackingField;
    [CompilerGeneratedAttribute]
private Brush <CodeForeground>k__BackingField;
    [CompilerGeneratedAttribute]
private FontFamily <CodeFontFamily>k__BackingField;
    [CompilerGeneratedAttribute]
private FontFamily <InlineCodeFontFamily>k__BackingField;
    [CompilerGeneratedAttribute]
private FontFamily <EmojiFontFamily>k__BackingField;
    [CompilerGeneratedAttribute]
private FontWeight <Header1FontWeight>k__BackingField;
    [CompilerGeneratedAttribute]
private Brush <Header1Foreground>k__BackingField;
    [CompilerGeneratedAttribute]
private FontWeight <Header2FontWeight>k__BackingField;
    [CompilerGeneratedAttribute]
private Brush <Header2Foreground>k__BackingField;
    [CompilerGeneratedAttribute]
private FontWeight <Header3FontWeight>k__BackingField;
    [CompilerGeneratedAttribute]
private Brush <Header3Foreground>k__BackingField;
    [CompilerGeneratedAttribute]
private FontWeight <Header4FontWeight>k__BackingField;
    [CompilerGeneratedAttribute]
private Brush <Header4Foreground>k__BackingField;
    [CompilerGeneratedAttribute]
private FontWeight <Header5FontWeight>k__BackingField;
    [CompilerGeneratedAttribute]
private Brush <Header5Foreground>k__BackingField;
    [CompilerGeneratedAttribute]
private FontWeight <Header6FontWeight>k__BackingField;
    [CompilerGeneratedAttribute]
private Brush <Header6Foreground>k__BackingField;
    [CompilerGeneratedAttribute]
private Brush <HorizontalRuleBrush>k__BackingField;
    [CompilerGeneratedAttribute]
private Brush <QuoteBackground>k__BackingField;
    [CompilerGeneratedAttribute]
private Brush <QuoteBorderBrush>k__BackingField;
    [CompilerGeneratedAttribute]
private Brush <QuoteForeground>k__BackingField;
    [CompilerGeneratedAttribute]
private Brush <TableBorderBrush>k__BackingField;
    [CompilerGeneratedAttribute]
private Brush <YamlBorderBrush>k__BackingField;
    [CompilerGeneratedAttribute]
private Brush <LinkForeground>k__BackingField;
    public Thickness Padding { get; public set; }
    public Thickness BorderThickness { get; public set; }
    public Thickness CodeBorderThickness { get; public set; }
    public Thickness InlineCodeBorderThickness { get; public set; }
    public Thickness CodeMargin { get; public set; }
    public Thickness CodePadding { get; public set; }
    public Thickness InlineCodePadding { get; public set; }
    public Thickness InlineCodeMargin { get; public set; }
    public double Header1FontSize { get; public set; }
    public Thickness Header1Margin { get; public set; }
    public double Header2FontSize { get; public set; }
    public Thickness Header2Margin { get; public set; }
    public double Header3FontSize { get; public set; }
    public Thickness Header3Margin { get; public set; }
    public double Header4FontSize { get; public set; }
    public Thickness Header4Margin { get; public set; }
    public double Header5FontSize { get; public set; }
    public Thickness Header5Margin { get; public set; }
    public double Header6FontSize { get; public set; }
    public Thickness Header6Margin { get; public set; }
    public Thickness HorizontalRuleMargin { get; public set; }
    public double HorizontalRuleThickness { get; public set; }
    public Thickness ListMargin { get; public set; }
    public double ListGutterWidth { get; public set; }
    public double ListBulletSpacing { get; public set; }
    public Thickness ParagraphMargin { get; public set; }
    public int ParagraphLineHeight { get; public set; }
    public Thickness QuoteBorderThickness { get; public set; }
    public Thickness QuoteMargin { get; public set; }
    public Thickness QuotePadding { get; public set; }
    public double TableBorderThickness { get; public set; }
    public double YamlBorderThickness { get; public set; }
    public Thickness TableCellPadding { get; public set; }
    public Thickness TableMargin { get; public set; }
    public double FontSize { get; public set; }
    public int CharacterSpacing { get; public set; }
    public TextWrapping TextWrapping { get; public set; }
    public FontStretch FontStretch { get; public set; }
    public Stretch ImageStretch { get; public set; }
    public double ImageMaxHeight { get; public set; }
    public double ImageMaxWidth { get; public set; }
    public bool WrapCodeBlock { get; public set; }
    private FrameworkElement RootElement { get; private set; }
    protected ILinkRegister LinkRegister { get; }
    protected IImageResolver ImageResolver { get; }
    protected ICodeBlockResolver CodeBlockResolver { get; }
    protected FontFamily DefaultEmojiFont { get; }
    public Brush Background { get; public set; }
    public Brush BorderBrush { get; public set; }
    public FlowDirection FlowDirection { get; public set; }
    public FontFamily FontFamily { get; public set; }
    public FontStyle FontStyle { get; public set; }
    public FontWeight FontWeight { get; public set; }
    public Brush Foreground { get; public set; }
    public bool IsTextSelectionEnabled { get; public set; }
    public Brush CodeBackground { get; public set; }
    public Brush InlineCodeBackground { get; public set; }
    public Brush InlineCodeForeground { get; public set; }
    public Brush InlineCodeBorderBrush { get; public set; }
    public Brush CodeBorderBrush { get; public set; }
    public Brush CodeForeground { get; public set; }
    public FontFamily CodeFontFamily { get; public set; }
    public FontFamily InlineCodeFontFamily { get; public set; }
    public FontFamily EmojiFontFamily { get; public set; }
    public FontWeight Header1FontWeight { get; public set; }
    public Brush Header1Foreground { get; public set; }
    public FontWeight Header2FontWeight { get; public set; }
    public Brush Header2Foreground { get; public set; }
    public FontWeight Header3FontWeight { get; public set; }
    public Brush Header3Foreground { get; public set; }
    public FontWeight Header4FontWeight { get; public set; }
    public Brush Header4Foreground { get; public set; }
    public FontWeight Header5FontWeight { get; public set; }
    public Brush Header5Foreground { get; public set; }
    public FontWeight Header6FontWeight { get; public set; }
    public Brush Header6Foreground { get; public set; }
    public Brush HorizontalRuleBrush { get; public set; }
    public Brush QuoteBackground { get; public set; }
    public Brush QuoteBorderBrush { get; public set; }
    public Brush QuoteForeground { get; public set; }
    public Brush TableBorderBrush { get; public set; }
    public Brush YamlBorderBrush { get; public set; }
    public Brush LinkForeground { get; public set; }
    public MarkdownRenderer(MarkdownDocument document, ILinkRegister linkRegister, IImageResolver imageResolver, ICodeBlockResolver codeBlockResolver);
    private static MarkdownRenderer();
    protected virtual void RenderBlocks(IEnumerable`1<MarkdownBlock> blockElements, IRenderContext context);
    protected virtual void RenderParagraph(ParagraphBlock element, IRenderContext context);
    protected virtual void RenderYamlHeader(YamlHeaderBlock element, IRenderContext context);
    protected virtual void RenderHeader(HeaderBlock element, IRenderContext context);
    protected virtual void RenderListElement(ListBlock element, IRenderContext context);
    protected virtual void RenderHorizontalRule(IRenderContext context);
    protected virtual void RenderQuote(QuoteBlock element, IRenderContext context);
    protected virtual void RenderCode(CodeBlock element, IRenderContext context);
    protected virtual void RenderTable(TableBlock element, IRenderContext context);
    public UIElement Render();
    protected RichTextBlock CreateOrReuseRichTextBlock(IRenderContext context);
    protected TextBlock CreateTextBlock(RenderContext context);
    protected void AlterChildRuns(Span parentSpan, Action`2<Span, Run> action);
    private bool AllTextIsSuperscript(IInlineContainer container, int superscriptLevel);
    private void RemoveSuperscriptRuns(IInlineContainer container, bool insertCaret);
    private void Preventative_PointerWheelChanged(object sender, PointerRoutedEventArgs e);
    [CompilerGeneratedAttribute]
public Thickness get_Padding();
    [CompilerGeneratedAttribute]
public void set_Padding(Thickness value);
    [CompilerGeneratedAttribute]
public Thickness get_BorderThickness();
    [CompilerGeneratedAttribute]
public void set_BorderThickness(Thickness value);
    [CompilerGeneratedAttribute]
public Thickness get_CodeBorderThickness();
    [CompilerGeneratedAttribute]
public void set_CodeBorderThickness(Thickness value);
    [CompilerGeneratedAttribute]
public Thickness get_InlineCodeBorderThickness();
    [CompilerGeneratedAttribute]
public void set_InlineCodeBorderThickness(Thickness value);
    [CompilerGeneratedAttribute]
public Thickness get_CodeMargin();
    [CompilerGeneratedAttribute]
public void set_CodeMargin(Thickness value);
    [CompilerGeneratedAttribute]
public Thickness get_CodePadding();
    [CompilerGeneratedAttribute]
public void set_CodePadding(Thickness value);
    [CompilerGeneratedAttribute]
public Thickness get_InlineCodePadding();
    [CompilerGeneratedAttribute]
public void set_InlineCodePadding(Thickness value);
    [CompilerGeneratedAttribute]
public Thickness get_InlineCodeMargin();
    [CompilerGeneratedAttribute]
public void set_InlineCodeMargin(Thickness value);
    [CompilerGeneratedAttribute]
public double get_Header1FontSize();
    [CompilerGeneratedAttribute]
public void set_Header1FontSize(double value);
    [CompilerGeneratedAttribute]
public Thickness get_Header1Margin();
    [CompilerGeneratedAttribute]
public void set_Header1Margin(Thickness value);
    [CompilerGeneratedAttribute]
public double get_Header2FontSize();
    [CompilerGeneratedAttribute]
public void set_Header2FontSize(double value);
    [CompilerGeneratedAttribute]
public Thickness get_Header2Margin();
    [CompilerGeneratedAttribute]
public void set_Header2Margin(Thickness value);
    [CompilerGeneratedAttribute]
public double get_Header3FontSize();
    [CompilerGeneratedAttribute]
public void set_Header3FontSize(double value);
    [CompilerGeneratedAttribute]
public Thickness get_Header3Margin();
    [CompilerGeneratedAttribute]
public void set_Header3Margin(Thickness value);
    [CompilerGeneratedAttribute]
public double get_Header4FontSize();
    [CompilerGeneratedAttribute]
public void set_Header4FontSize(double value);
    [CompilerGeneratedAttribute]
public Thickness get_Header4Margin();
    [CompilerGeneratedAttribute]
public void set_Header4Margin(Thickness value);
    [CompilerGeneratedAttribute]
public double get_Header5FontSize();
    [CompilerGeneratedAttribute]
public void set_Header5FontSize(double value);
    [CompilerGeneratedAttribute]
public Thickness get_Header5Margin();
    [CompilerGeneratedAttribute]
public void set_Header5Margin(Thickness value);
    [CompilerGeneratedAttribute]
public double get_Header6FontSize();
    [CompilerGeneratedAttribute]
public void set_Header6FontSize(double value);
    [CompilerGeneratedAttribute]
public Thickness get_Header6Margin();
    [CompilerGeneratedAttribute]
public void set_Header6Margin(Thickness value);
    [CompilerGeneratedAttribute]
public Thickness get_HorizontalRuleMargin();
    [CompilerGeneratedAttribute]
public void set_HorizontalRuleMargin(Thickness value);
    [CompilerGeneratedAttribute]
public double get_HorizontalRuleThickness();
    [CompilerGeneratedAttribute]
public void set_HorizontalRuleThickness(double value);
    [CompilerGeneratedAttribute]
public Thickness get_ListMargin();
    [CompilerGeneratedAttribute]
public void set_ListMargin(Thickness value);
    [CompilerGeneratedAttribute]
public double get_ListGutterWidth();
    [CompilerGeneratedAttribute]
public void set_ListGutterWidth(double value);
    [CompilerGeneratedAttribute]
public double get_ListBulletSpacing();
    [CompilerGeneratedAttribute]
public void set_ListBulletSpacing(double value);
    [CompilerGeneratedAttribute]
public Thickness get_ParagraphMargin();
    [CompilerGeneratedAttribute]
public void set_ParagraphMargin(Thickness value);
    [CompilerGeneratedAttribute]
public int get_ParagraphLineHeight();
    [CompilerGeneratedAttribute]
public void set_ParagraphLineHeight(int value);
    [CompilerGeneratedAttribute]
public Thickness get_QuoteBorderThickness();
    [CompilerGeneratedAttribute]
public void set_QuoteBorderThickness(Thickness value);
    [CompilerGeneratedAttribute]
public Thickness get_QuoteMargin();
    [CompilerGeneratedAttribute]
public void set_QuoteMargin(Thickness value);
    [CompilerGeneratedAttribute]
public Thickness get_QuotePadding();
    [CompilerGeneratedAttribute]
public void set_QuotePadding(Thickness value);
    [CompilerGeneratedAttribute]
public double get_TableBorderThickness();
    [CompilerGeneratedAttribute]
public void set_TableBorderThickness(double value);
    [CompilerGeneratedAttribute]
public double get_YamlBorderThickness();
    [CompilerGeneratedAttribute]
public void set_YamlBorderThickness(double value);
    [CompilerGeneratedAttribute]
public Thickness get_TableCellPadding();
    [CompilerGeneratedAttribute]
public void set_TableCellPadding(Thickness value);
    [CompilerGeneratedAttribute]
public Thickness get_TableMargin();
    [CompilerGeneratedAttribute]
public void set_TableMargin(Thickness value);
    [CompilerGeneratedAttribute]
public double get_FontSize();
    [CompilerGeneratedAttribute]
public void set_FontSize(double value);
    [CompilerGeneratedAttribute]
public int get_CharacterSpacing();
    [CompilerGeneratedAttribute]
public void set_CharacterSpacing(int value);
    [CompilerGeneratedAttribute]
public TextWrapping get_TextWrapping();
    [CompilerGeneratedAttribute]
public void set_TextWrapping(TextWrapping value);
    [CompilerGeneratedAttribute]
public FontStretch get_FontStretch();
    [CompilerGeneratedAttribute]
public void set_FontStretch(FontStretch value);
    [CompilerGeneratedAttribute]
public Stretch get_ImageStretch();
    [CompilerGeneratedAttribute]
public void set_ImageStretch(Stretch value);
    [CompilerGeneratedAttribute]
public double get_ImageMaxHeight();
    [CompilerGeneratedAttribute]
public void set_ImageMaxHeight(double value);
    [CompilerGeneratedAttribute]
public double get_ImageMaxWidth();
    [CompilerGeneratedAttribute]
public void set_ImageMaxWidth(double value);
    [CompilerGeneratedAttribute]
public bool get_WrapCodeBlock();
    [CompilerGeneratedAttribute]
public void set_WrapCodeBlock(bool value);
    protected virtual void RenderEmoji(EmojiInline element, IRenderContext context);
    protected virtual void RenderTextRun(TextRunInline element, IRenderContext context);
    private Run InternalRenderTextRun(TextRunInline element, IRenderContext context);
    protected virtual void RenderBoldRun(BoldTextInline element, IRenderContext context);
    protected virtual void RenderMarkdownLink(MarkdownLinkInline element, IRenderContext context);
    protected virtual void RenderHyperlink(HyperlinkInline element, IRenderContext context);
    [AsyncStateMachineAttribute("Microsoft.Toolkit.Uwp.UI.Controls.Markdown.Render.MarkdownRenderer/<RenderImage>d__191")]
protected virtual void RenderImage(ImageInline element, IRenderContext context);
    protected virtual void RenderItalicRun(ItalicTextInline element, IRenderContext context);
    protected virtual void RenderStrikethroughRun(StrikethroughTextInline element, IRenderContext context);
    protected virtual void RenderSuperscriptRun(SuperscriptTextInline element, IRenderContext context);
    protected virtual void RenderSubscriptRun(SubscriptTextInline element, IRenderContext context);
    protected virtual void RenderCodeRun(CodeInline element, IRenderContext context);
    [CompilerGeneratedAttribute]
private FrameworkElement get_RootElement();
    [CompilerGeneratedAttribute]
private void set_RootElement(FrameworkElement value);
    [CompilerGeneratedAttribute]
protected ILinkRegister get_LinkRegister();
    [CompilerGeneratedAttribute]
protected IImageResolver get_ImageResolver();
    [CompilerGeneratedAttribute]
protected ICodeBlockResolver get_CodeBlockResolver();
    [CompilerGeneratedAttribute]
protected FontFamily get_DefaultEmojiFont();
    [CompilerGeneratedAttribute]
public Brush get_Background();
    [CompilerGeneratedAttribute]
public void set_Background(Brush value);
    [CompilerGeneratedAttribute]
public Brush get_BorderBrush();
    [CompilerGeneratedAttribute]
public void set_BorderBrush(Brush value);
    [CompilerGeneratedAttribute]
public FlowDirection get_FlowDirection();
    [CompilerGeneratedAttribute]
public void set_FlowDirection(FlowDirection value);
    [CompilerGeneratedAttribute]
public FontFamily get_FontFamily();
    [CompilerGeneratedAttribute]
public void set_FontFamily(FontFamily value);
    [CompilerGeneratedAttribute]
public FontStyle get_FontStyle();
    [CompilerGeneratedAttribute]
public void set_FontStyle(FontStyle value);
    [CompilerGeneratedAttribute]
public FontWeight get_FontWeight();
    [CompilerGeneratedAttribute]
public void set_FontWeight(FontWeight value);
    [CompilerGeneratedAttribute]
public Brush get_Foreground();
    [CompilerGeneratedAttribute]
public void set_Foreground(Brush value);
    [CompilerGeneratedAttribute]
public bool get_IsTextSelectionEnabled();
    [CompilerGeneratedAttribute]
public void set_IsTextSelectionEnabled(bool value);
    [CompilerGeneratedAttribute]
public Brush get_CodeBackground();
    [CompilerGeneratedAttribute]
public void set_CodeBackground(Brush value);
    [CompilerGeneratedAttribute]
public Brush get_InlineCodeBackground();
    [CompilerGeneratedAttribute]
public void set_InlineCodeBackground(Brush value);
    [CompilerGeneratedAttribute]
public Brush get_InlineCodeForeground();
    [CompilerGeneratedAttribute]
public void set_InlineCodeForeground(Brush value);
    [CompilerGeneratedAttribute]
public Brush get_InlineCodeBorderBrush();
    [CompilerGeneratedAttribute]
public void set_InlineCodeBorderBrush(Brush value);
    [CompilerGeneratedAttribute]
public Brush get_CodeBorderBrush();
    [CompilerGeneratedAttribute]
public void set_CodeBorderBrush(Brush value);
    [CompilerGeneratedAttribute]
public Brush get_CodeForeground();
    [CompilerGeneratedAttribute]
public void set_CodeForeground(Brush value);
    [CompilerGeneratedAttribute]
public FontFamily get_CodeFontFamily();
    [CompilerGeneratedAttribute]
public void set_CodeFontFamily(FontFamily value);
    [CompilerGeneratedAttribute]
public FontFamily get_InlineCodeFontFamily();
    [CompilerGeneratedAttribute]
public void set_InlineCodeFontFamily(FontFamily value);
    [CompilerGeneratedAttribute]
public FontFamily get_EmojiFontFamily();
    [CompilerGeneratedAttribute]
public void set_EmojiFontFamily(FontFamily value);
    [CompilerGeneratedAttribute]
public FontWeight get_Header1FontWeight();
    [CompilerGeneratedAttribute]
public void set_Header1FontWeight(FontWeight value);
    [CompilerGeneratedAttribute]
public Brush get_Header1Foreground();
    [CompilerGeneratedAttribute]
public void set_Header1Foreground(Brush value);
    [CompilerGeneratedAttribute]
public FontWeight get_Header2FontWeight();
    [CompilerGeneratedAttribute]
public void set_Header2FontWeight(FontWeight value);
    [CompilerGeneratedAttribute]
public Brush get_Header2Foreground();
    [CompilerGeneratedAttribute]
public void set_Header2Foreground(Brush value);
    [CompilerGeneratedAttribute]
public FontWeight get_Header3FontWeight();
    [CompilerGeneratedAttribute]
public void set_Header3FontWeight(FontWeight value);
    [CompilerGeneratedAttribute]
public Brush get_Header3Foreground();
    [CompilerGeneratedAttribute]
public void set_Header3Foreground(Brush value);
    [CompilerGeneratedAttribute]
public FontWeight get_Header4FontWeight();
    [CompilerGeneratedAttribute]
public void set_Header4FontWeight(FontWeight value);
    [CompilerGeneratedAttribute]
public Brush get_Header4Foreground();
    [CompilerGeneratedAttribute]
public void set_Header4Foreground(Brush value);
    [CompilerGeneratedAttribute]
public FontWeight get_Header5FontWeight();
    [CompilerGeneratedAttribute]
public void set_Header5FontWeight(FontWeight value);
    [CompilerGeneratedAttribute]
public Brush get_Header5Foreground();
    [CompilerGeneratedAttribute]
public void set_Header5Foreground(Brush value);
    [CompilerGeneratedAttribute]
public FontWeight get_Header6FontWeight();
    [CompilerGeneratedAttribute]
public void set_Header6FontWeight(FontWeight value);
    [CompilerGeneratedAttribute]
public Brush get_Header6Foreground();
    [CompilerGeneratedAttribute]
public void set_Header6Foreground(Brush value);
    [CompilerGeneratedAttribute]
public Brush get_HorizontalRuleBrush();
    [CompilerGeneratedAttribute]
public void set_HorizontalRuleBrush(Brush value);
    [CompilerGeneratedAttribute]
public Brush get_QuoteBackground();
    [CompilerGeneratedAttribute]
public void set_QuoteBackground(Brush value);
    [CompilerGeneratedAttribute]
public Brush get_QuoteBorderBrush();
    [CompilerGeneratedAttribute]
public void set_QuoteBorderBrush(Brush value);
    [CompilerGeneratedAttribute]
public Brush get_QuoteForeground();
    [CompilerGeneratedAttribute]
public void set_QuoteForeground(Brush value);
    [CompilerGeneratedAttribute]
public Brush get_TableBorderBrush();
    [CompilerGeneratedAttribute]
public void set_TableBorderBrush(Brush value);
    [CompilerGeneratedAttribute]
public Brush get_YamlBorderBrush();
    [CompilerGeneratedAttribute]
public void set_YamlBorderBrush(Brush value);
    [CompilerGeneratedAttribute]
public Brush get_LinkForeground();
    [CompilerGeneratedAttribute]
public void set_LinkForeground(Brush value);
}
internal class Microsoft.Toolkit.Uwp.UI.Controls.Markdown.Render.MarkdownTable : Panel {
    private int _columnCount;
    private int _rowCount;
    private double _borderThickness;
    private Double[] _columnWidths;
    private Double[] _rowHeights;
    private IEnumerable`1<FrameworkElement> ContentChildren { get; }
    private IEnumerable`1<Rectangle> VerticalLines { get; }
    private IEnumerable`1<Rectangle> HorizontalLines { get; }
    public MarkdownTable(int columnCount, int rowCount, double borderThickness, Brush borderBrush);
    [IteratorStateMachineAttribute("Microsoft.Toolkit.Uwp.UI.Controls.Markdown.Render.MarkdownTable/<get_ContentChildren>d__7")]
private IEnumerable`1<FrameworkElement> get_ContentChildren();
    [IteratorStateMachineAttribute("Microsoft.Toolkit.Uwp.UI.Controls.Markdown.Render.MarkdownTable/<get_VerticalLines>d__9")]
private IEnumerable`1<Rectangle> get_VerticalLines();
    [IteratorStateMachineAttribute("Microsoft.Toolkit.Uwp.UI.Controls.Markdown.Render.MarkdownTable/<get_HorizontalLines>d__11")]
private IEnumerable`1<Rectangle> get_HorizontalLines();
    protected virtual Size MeasureOverride(Size availableSize);
    protected virtual Size ArrangeOverride(Size finalSize);
}
public abstract class Microsoft.Toolkit.Uwp.UI.Controls.Markdown.Render.RenderContext : object {
    [CompilerGeneratedAttribute]
private Brush <Foreground>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <TrimLeadingWhitespace>k__BackingField;
    [CompilerGeneratedAttribute]
private object <Parent>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <OverrideForeground>k__BackingField;
    public Brush Foreground { get; public set; }
    public bool TrimLeadingWhitespace { get; public set; }
    public object Parent { get; public set; }
    public bool OverrideForeground { get; public set; }
    [CompilerGeneratedAttribute]
public Brush get_Foreground();
    [CompilerGeneratedAttribute]
public void set_Foreground(Brush value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_TrimLeadingWhitespace();
    [CompilerGeneratedAttribute]
public sealed virtual void set_TrimLeadingWhitespace(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual object get_Parent();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Parent(object value);
    [CompilerGeneratedAttribute]
public bool get_OverrideForeground();
    [CompilerGeneratedAttribute]
public void set_OverrideForeground(bool value);
    public sealed virtual IRenderContext Clone();
}
public class Microsoft.Toolkit.Uwp.UI.Controls.Markdown.Render.RenderContextIncorrectException : Exception {
}
public class Microsoft.Toolkit.Uwp.UI.Controls.Markdown.Render.UIElementCollectionRenderContext : RenderContext {
    [CompilerGeneratedAttribute]
private UIElementCollection <BlockUIElementCollection>k__BackingField;
    public UIElementCollection BlockUIElementCollection { get; public set; }
    internal UIElementCollectionRenderContext(UIElementCollection blockUIElementCollection);
    internal UIElementCollectionRenderContext(UIElementCollection blockUIElementCollection, IRenderContext context);
    [CompilerGeneratedAttribute]
public UIElementCollection get_BlockUIElementCollection();
    [CompilerGeneratedAttribute]
public void set_BlockUIElementCollection(UIElementCollection value);
}
public class Microsoft.Toolkit.Uwp.UI.Controls.MarkdownRenderedEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
private Exception <Exception>k__BackingField;
    public Exception Exception { get; }
    internal MarkdownRenderedEventArgs(Exception ex);
    [CompilerGeneratedAttribute]
public Exception get_Exception();
}
public class Microsoft.Toolkit.Uwp.UI.Controls.MarkdownTextBlock : Control {
    private long _fontSizePropertyToken;
    private long _flowDirectionPropertyToken;
    private long _backgroundPropertyToken;
    private long _borderBrushPropertyToken;
    private long _borderThicknessPropertyToken;
    private long _characterSpacingPropertyToken;
    private long _fontFamilyPropertyToken;
    private long _fontStretchPropertyToken;
    private long _fontStylePropertyToken;
    private long _fontWeightPropertyToken;
    private long _foregroundPropertyToken;
    private long _paddingPropertyToken;
    private long _requestedThemePropertyToken;
    public static DependencyProperty InlineCodePaddingProperty;
    public static DependencyProperty InlineCodeMarginProperty;
    public static DependencyProperty InlineCodeBorderThicknessProperty;
    public static DependencyProperty ImageStretchProperty;
    public static DependencyProperty CodeBorderThicknessProperty;
    public static DependencyProperty CodeMarginProperty;
    public static DependencyProperty CodePaddingProperty;
    public static DependencyProperty Header1FontSizeProperty;
    public static DependencyProperty Header1MarginProperty;
    public static DependencyProperty Header2FontSizeProperty;
    public static DependencyProperty Header2MarginProperty;
    public static DependencyProperty Header3FontSizeProperty;
    public static DependencyProperty Header3MarginProperty;
    public static DependencyProperty Header4FontSizeProperty;
    public static DependencyProperty Header4MarginProperty;
    public static DependencyProperty Header5FontSizeProperty;
    public static DependencyProperty Header5MarginProperty;
    public static DependencyProperty Header6MarginProperty;
    public static DependencyProperty Header6FontSizeProperty;
    public static DependencyProperty HorizontalRuleMarginProperty;
    public static DependencyProperty HorizontalRuleThicknessProperty;
    public static DependencyProperty ListMarginProperty;
    public static DependencyProperty ListGutterWidthProperty;
    public static DependencyProperty ListBulletSpacingProperty;
    public static DependencyProperty ParagraphMarginProperty;
    public static DependencyProperty ParagraphLineHeightProperty;
    public static DependencyProperty QuoteBorderThicknessProperty;
    public static DependencyProperty QuoteMarginProperty;
    public static DependencyProperty QuotePaddingProperty;
    public static DependencyProperty YamlBorderThicknessProperty;
    public static DependencyProperty TableBorderThicknessProperty;
    public static DependencyProperty TableCellPaddingProperty;
    public static DependencyProperty TableMarginProperty;
    public static DependencyProperty TextWrappingProperty;
    public static DependencyProperty ImageMaxHeightProperty;
    public static DependencyProperty ImageMaxWidthProperty;
    [CompilerGeneratedAttribute]
private EventHandler`1<MarkdownRenderedEventArgs> MarkdownRendered;
    [CompilerGeneratedAttribute]
private EventHandler`1<LinkClickedEventArgs> LinkClicked;
    [CompilerGeneratedAttribute]
private EventHandler`1<LinkClickedEventArgs> ImageClicked;
    [CompilerGeneratedAttribute]
private EventHandler`1<ImageResolvingEventArgs> ImageResolving;
    [CompilerGeneratedAttribute]
private EventHandler`1<CodeBlockResolvingEventArgs> CodeBlockResolving;
    private static DependencyProperty HyperlinkUrlProperty;
    private static DependencyProperty IsHyperlinkProperty;
    public static DependencyProperty CodeStylingProperty;
    public static DependencyProperty UseSyntaxHighlightingProperty;
    public static DependencyProperty WrapCodeBlockProperty;
    public static DependencyProperty TextProperty;
    public static DependencyProperty InlineCodeBackgroundProperty;
    public static DependencyProperty InlineCodeForegroundProperty;
    public static DependencyProperty InlineCodeBorderBrushProperty;
    public static DependencyProperty IsTextSelectionEnabledProperty;
    public static DependencyProperty LinkForegroundProperty;
    public static DependencyProperty CodeBackgroundProperty;
    public static DependencyProperty CodeBorderBrushProperty;
    public static DependencyProperty CodeForegroundProperty;
    public static DependencyProperty CodeFontFamilyProperty;
    public static DependencyProperty InlineCodeFontFamilyProperty;
    public static DependencyProperty EmojiFontFamilyProperty;
    public static DependencyProperty Header1FontWeightProperty;
    public static DependencyProperty Header1ForegroundProperty;
    public static DependencyProperty Header2FontWeightProperty;
    public static DependencyProperty Header2ForegroundProperty;
    public static DependencyProperty Header3FontWeightProperty;
    public static DependencyProperty Header3ForegroundProperty;
    public static DependencyProperty Header4FontWeightProperty;
    public static DependencyProperty Header4ForegroundProperty;
    public static DependencyProperty Header5FontWeightProperty;
    public static DependencyProperty Header5ForegroundProperty;
    public static DependencyProperty Header6FontWeightProperty;
    public static DependencyProperty Header6ForegroundProperty;
    public static DependencyProperty HorizontalRuleBrushProperty;
    public static DependencyProperty QuoteBackgroundProperty;
    public static DependencyProperty QuoteBorderBrushProperty;
    public static DependencyProperty QuoteForegroundProperty;
    public static DependencyProperty TableBorderBrushProperty;
    public static DependencyProperty YamlBorderBrushProperty;
    public static DependencyProperty UriPrefixProperty;
    public static DependencyProperty SchemeListProperty;
    private List`1<object> _listeningHyperlinks;
    private Border _rootElement;
    private bool multiClickDetectionTriggered;
    private Type renderertype;
    private ThemeListener themeListener;
    public double ImageMaxWidth { get; public set; }
    public double ImageMaxHeight { get; public set; }
    public Stretch ImageStretch { get; public set; }
    public Thickness CodeBorderThickness { get; public set; }
    public Thickness InlineCodeBorderThickness { get; public set; }
    public Thickness InlineCodePadding { get; public set; }
    public Thickness InlineCodeMargin { get; public set; }
    public Thickness CodeMargin { get; public set; }
    public Thickness CodePadding { get; public set; }
    public double Header1FontSize { get; public set; }
    public Thickness Header1Margin { get; public set; }
    public double Header2FontSize { get; public set; }
    public Thickness Header2Margin { get; public set; }
    public double Header3FontSize { get; public set; }
    public Thickness Header3Margin { get; public set; }
    public double Header4FontSize { get; public set; }
    public Thickness Header4Margin { get; public set; }
    public double Header5FontSize { get; public set; }
    public Thickness Header5Margin { get; public set; }
    public double Header6FontSize { get; public set; }
    public Thickness Header6Margin { get; public set; }
    public Thickness HorizontalRuleMargin { get; public set; }
    public double HorizontalRuleThickness { get; public set; }
    public Thickness ListMargin { get; public set; }
    public double ListGutterWidth { get; public set; }
    public double ListBulletSpacing { get; public set; }
    public Thickness ParagraphMargin { get; public set; }
    public int ParagraphLineHeight { get; public set; }
    public Thickness QuoteBorderThickness { get; public set; }
    public Thickness QuoteMargin { get; public set; }
    public Thickness QuotePadding { get; public set; }
    public double YamlBorderThickness { get; public set; }
    public double TableBorderThickness { get; public set; }
    public Thickness TableCellPadding { get; public set; }
    public Thickness TableMargin { get; public set; }
    public TextWrapping TextWrapping { get; public set; }
    public string Text { get; public set; }
    public bool UseSyntaxHighlighting { get; public set; }
    public bool WrapCodeBlock { get; public set; }
    public StyleDictionary CodeStyling { get; public set; }
    public bool IsTextSelectionEnabled { get; public set; }
    public Brush LinkForeground { get; public set; }
    public Brush CodeBackground { get; public set; }
    public Brush CodeBorderBrush { get; public set; }
    public Brush CodeForeground { get; public set; }
    public FontFamily CodeFontFamily { get; public set; }
    public FontFamily InlineCodeFontFamily { get; public set; }
    public Brush InlineCodeBackground { get; public set; }
    public Brush InlineCodeForeground { get; public set; }
    public Brush InlineCodeBorderBrush { get; public set; }
    public FontFamily EmojiFontFamily { get; public set; }
    public FontWeight Header1FontWeight { get; public set; }
    public Brush Header1Foreground { get; public set; }
    public FontWeight Header2FontWeight { get; public set; }
    public Brush Header2Foreground { get; public set; }
    public FontWeight Header3FontWeight { get; public set; }
    public Brush Header3Foreground { get; public set; }
    public FontWeight Header4FontWeight { get; public set; }
    public Brush Header4Foreground { get; public set; }
    public FontWeight Header5FontWeight { get; public set; }
    public Brush Header5Foreground { get; public set; }
    public FontWeight Header6FontWeight { get; public set; }
    public Brush Header6Foreground { get; public set; }
    public Brush HorizontalRuleBrush { get; public set; }
    public Brush QuoteBackground { get; public set; }
    public Brush QuoteBorderBrush { get; public set; }
    public Brush QuoteForeground { get; public set; }
    public Brush TableBorderBrush { get; public set; }
    public Brush YamlBorderBrush { get; public set; }
    public string UriPrefix { get; public set; }
    public string SchemeList { get; public set; }
    private static MarkdownTextBlock();
    private void ThemeListener_ThemeChanged(ThemeListener sender);
    private void OnLoaded(object sender, RoutedEventArgs e);
    private void OnUnloaded(object sender, RoutedEventArgs e);
    protected virtual void OnApplyTemplate();
    private void RegisterThemeChangedHandler();
    public double get_ImageMaxWidth();
    public void set_ImageMaxWidth(double value);
    public double get_ImageMaxHeight();
    public void set_ImageMaxHeight(double value);
    public Stretch get_ImageStretch();
    public void set_ImageStretch(Stretch value);
    public Thickness get_CodeBorderThickness();
    public void set_CodeBorderThickness(Thickness value);
    public Thickness get_InlineCodeBorderThickness();
    public void set_InlineCodeBorderThickness(Thickness value);
    public Thickness get_InlineCodePadding();
    public void set_InlineCodePadding(Thickness value);
    public Thickness get_InlineCodeMargin();
    public void set_InlineCodeMargin(Thickness value);
    public Thickness get_CodeMargin();
    public void set_CodeMargin(Thickness value);
    public Thickness get_CodePadding();
    public void set_CodePadding(Thickness value);
    public double get_Header1FontSize();
    public void set_Header1FontSize(double value);
    public Thickness get_Header1Margin();
    public void set_Header1Margin(Thickness value);
    public double get_Header2FontSize();
    public void set_Header2FontSize(double value);
    public Thickness get_Header2Margin();
    public void set_Header2Margin(Thickness value);
    public double get_Header3FontSize();
    public void set_Header3FontSize(double value);
    public Thickness get_Header3Margin();
    public void set_Header3Margin(Thickness value);
    public double get_Header4FontSize();
    public void set_Header4FontSize(double value);
    public Thickness get_Header4Margin();
    public void set_Header4Margin(Thickness value);
    public double get_Header5FontSize();
    public void set_Header5FontSize(double value);
    public Thickness get_Header5Margin();
    public void set_Header5Margin(Thickness value);
    public double get_Header6FontSize();
    public void set_Header6FontSize(double value);
    public Thickness get_Header6Margin();
    public void set_Header6Margin(Thickness value);
    public Thickness get_HorizontalRuleMargin();
    public void set_HorizontalRuleMargin(Thickness value);
    public double get_HorizontalRuleThickness();
    public void set_HorizontalRuleThickness(double value);
    public Thickness get_ListMargin();
    public void set_ListMargin(Thickness value);
    public double get_ListGutterWidth();
    public void set_ListGutterWidth(double value);
    public double get_ListBulletSpacing();
    public void set_ListBulletSpacing(double value);
    public Thickness get_ParagraphMargin();
    public void set_ParagraphMargin(Thickness value);
    public int get_ParagraphLineHeight();
    public void set_ParagraphLineHeight(int value);
    public Thickness get_QuoteBorderThickness();
    public void set_QuoteBorderThickness(Thickness value);
    public Thickness get_QuoteMargin();
    public void set_QuoteMargin(Thickness value);
    public Thickness get_QuotePadding();
    public void set_QuotePadding(Thickness value);
    public double get_YamlBorderThickness();
    public void set_YamlBorderThickness(double value);
    public double get_TableBorderThickness();
    public void set_TableBorderThickness(double value);
    public Thickness get_TableCellPadding();
    public void set_TableCellPadding(Thickness value);
    public Thickness get_TableMargin();
    public void set_TableMargin(Thickness value);
    public TextWrapping get_TextWrapping();
    public void set_TextWrapping(TextWrapping value);
    private static void OnPropertyChangedStatic(DependencyObject d, DependencyPropertyChangedEventArgs e);
    private void OnPropertyChanged(DependencyObject d, DependencyProperty prop);
    private void Hyperlink_Click(Hyperlink sender, HyperlinkClickEventArgs args);
    private void NewImagelink_Tapped(object sender, TappedRoutedEventArgs e);
    [CompilerGeneratedAttribute]
public void add_MarkdownRendered(EventHandler`1<MarkdownRenderedEventArgs> value);
    [CompilerGeneratedAttribute]
public void remove_MarkdownRendered(EventHandler`1<MarkdownRenderedEventArgs> value);
    [CompilerGeneratedAttribute]
public void add_LinkClicked(EventHandler`1<LinkClickedEventArgs> value);
    [CompilerGeneratedAttribute]
public void remove_LinkClicked(EventHandler`1<LinkClickedEventArgs> value);
    [CompilerGeneratedAttribute]
public void add_ImageClicked(EventHandler`1<LinkClickedEventArgs> value);
    [CompilerGeneratedAttribute]
public void remove_ImageClicked(EventHandler`1<LinkClickedEventArgs> value);
    [CompilerGeneratedAttribute]
public void add_ImageResolving(EventHandler`1<ImageResolvingEventArgs> value);
    [CompilerGeneratedAttribute]
public void remove_ImageResolving(EventHandler`1<ImageResolvingEventArgs> value);
    [CompilerGeneratedAttribute]
public void add_CodeBlockResolving(EventHandler`1<CodeBlockResolvingEventArgs> value);
    [CompilerGeneratedAttribute]
public void remove_CodeBlockResolving(EventHandler`1<CodeBlockResolvingEventArgs> value);
    public void SetRenderer();
    private void RenderMarkdown();
    private void HookListeners();
    private void UnhookListeners();
    public sealed virtual void RegisterNewHyperLink(Hyperlink newHyperlink, string linkUrl);
    public sealed virtual void RegisterNewHyperLink(Image newImagelink, string linkUrl, bool isHyperLink);
    [AsyncStateMachineAttribute("Microsoft.Toolkit.Uwp.UI.Controls.MarkdownTextBlock/<Microsoft-Toolkit-Uwp-UI-Controls-Markdown-Render-IImageResolver-ResolveImageAsync>d__188")]
private sealed virtual override Task`1<ImageSource> Microsoft.Toolkit.Uwp.UI.Controls.Markdown.Render.IImageResolver.ResolveImageAsync(string url, string tooltip);
    private sealed virtual override bool Microsoft.Toolkit.Uwp.UI.Controls.Markdown.Render.ICodeBlockResolver.ParseSyntax(InlineCollection inlineCollection, string text, string codeLanguage);
    [AsyncStateMachineAttribute("Microsoft.Toolkit.Uwp.UI.Controls.MarkdownTextBlock/<LinkHandled>d__190")]
internal void LinkHandled(string url, bool isHyperlink);
    public string get_Text();
    public void set_Text(string value);
    public bool get_UseSyntaxHighlighting();
    public void set_UseSyntaxHighlighting(bool value);
    public bool get_WrapCodeBlock();
    public void set_WrapCodeBlock(bool value);
    public StyleDictionary get_CodeStyling();
    public void set_CodeStyling(StyleDictionary value);
    public bool get_IsTextSelectionEnabled();
    public void set_IsTextSelectionEnabled(bool value);
    public Brush get_LinkForeground();
    public void set_LinkForeground(Brush value);
    public Brush get_CodeBackground();
    public void set_CodeBackground(Brush value);
    public Brush get_CodeBorderBrush();
    public void set_CodeBorderBrush(Brush value);
    public Brush get_CodeForeground();
    public void set_CodeForeground(Brush value);
    public FontFamily get_CodeFontFamily();
    public void set_CodeFontFamily(FontFamily value);
    public FontFamily get_InlineCodeFontFamily();
    public void set_InlineCodeFontFamily(FontFamily value);
    public Brush get_InlineCodeBackground();
    public void set_InlineCodeBackground(Brush value);
    public Brush get_InlineCodeForeground();
    public void set_InlineCodeForeground(Brush value);
    public Brush get_InlineCodeBorderBrush();
    public void set_InlineCodeBorderBrush(Brush value);
    public FontFamily get_EmojiFontFamily();
    public void set_EmojiFontFamily(FontFamily value);
    public FontWeight get_Header1FontWeight();
    public void set_Header1FontWeight(FontWeight value);
    public Brush get_Header1Foreground();
    public void set_Header1Foreground(Brush value);
    public FontWeight get_Header2FontWeight();
    public void set_Header2FontWeight(FontWeight value);
    public Brush get_Header2Foreground();
    public void set_Header2Foreground(Brush value);
    public FontWeight get_Header3FontWeight();
    public void set_Header3FontWeight(FontWeight value);
    public Brush get_Header3Foreground();
    public void set_Header3Foreground(Brush value);
    public FontWeight get_Header4FontWeight();
    public void set_Header4FontWeight(FontWeight value);
    public Brush get_Header4Foreground();
    public void set_Header4Foreground(Brush value);
    public FontWeight get_Header5FontWeight();
    public void set_Header5FontWeight(FontWeight value);
    public Brush get_Header5Foreground();
    public void set_Header5Foreground(Brush value);
    public FontWeight get_Header6FontWeight();
    public void set_Header6FontWeight(FontWeight value);
    public Brush get_Header6Foreground();
    public void set_Header6Foreground(Brush value);
    public Brush get_HorizontalRuleBrush();
    public void set_HorizontalRuleBrush(Brush value);
    public Brush get_QuoteBackground();
    public void set_QuoteBackground(Brush value);
    public Brush get_QuoteBorderBrush();
    public void set_QuoteBorderBrush(Brush value);
    public Brush get_QuoteForeground();
    public void set_QuoteForeground(Brush value);
    public Brush get_TableBorderBrush();
    public void set_TableBorderBrush(Brush value);
    public Brush get_YamlBorderBrush();
    public void set_YamlBorderBrush(Brush value);
    public string get_UriPrefix();
    public void set_UriPrefix(string value);
    public string get_SchemeList();
    public void set_SchemeList(string value);
    [CompilerGeneratedAttribute]
internal static ImageSource <Microsoft.Toolkit.Uwp.UI.Controls.Markdown.Render.IImageResolver.ResolveImageAsync>g__GetImageSource|188_0(Uri imageUrl);
    [CompilerGeneratedAttribute]
private bool <LinkHandled>b__190_0();
}
internal class Microsoft.Toolkit.Uwp.UI.Controls.Microsoft_Toolkit_Uwp_UI_Controls_Markdown_XamlTypeInfo.Activator : MulticastDelegate {
    public Activator(object object, IntPtr method);
    public virtual object Invoke();
    public virtual IAsyncResult BeginInvoke(AsyncCallback callback, object object);
    public virtual object EndInvoke(IAsyncResult result);
}
internal class Microsoft.Toolkit.Uwp.UI.Controls.Microsoft_Toolkit_Uwp_UI_Controls_Markdown_XamlTypeInfo.AddToCollection : MulticastDelegate {
    public AddToCollection(object object, IntPtr method);
    public virtual void Invoke(object instance, object item);
    public virtual IAsyncResult BeginInvoke(object instance, object item, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
internal class Microsoft.Toolkit.Uwp.UI.Controls.Microsoft_Toolkit_Uwp_UI_Controls_Markdown_XamlTypeInfo.AddToDictionary : MulticastDelegate {
    public AddToDictionary(object object, IntPtr method);
    public virtual void Invoke(object instance, object key, object item);
    public virtual IAsyncResult BeginInvoke(object instance, object key, object item, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
internal class Microsoft.Toolkit.Uwp.UI.Controls.Microsoft_Toolkit_Uwp_UI_Controls_Markdown_XamlTypeInfo.BoxInstanceMethod : MulticastDelegate {
    public BoxInstanceMethod(object object, IntPtr method);
    public virtual object Invoke(object instance);
    public virtual IAsyncResult BeginInvoke(object instance, AsyncCallback callback, object object);
    public virtual object EndInvoke(IAsyncResult result);
}
internal class Microsoft.Toolkit.Uwp.UI.Controls.Microsoft_Toolkit_Uwp_UI_Controls_Markdown_XamlTypeInfo.CreateFromStringMethod : MulticastDelegate {
    public CreateFromStringMethod(object object, IntPtr method);
    public virtual object Invoke(string args);
    public virtual IAsyncResult BeginInvoke(string args, AsyncCallback callback, object object);
    public virtual object EndInvoke(IAsyncResult result);
}
internal class Microsoft.Toolkit.Uwp.UI.Controls.Microsoft_Toolkit_Uwp_UI_Controls_Markdown_XamlTypeInfo.Getter : MulticastDelegate {
    public Getter(object object, IntPtr method);
    public virtual object Invoke(object instance);
    public virtual IAsyncResult BeginInvoke(object instance, AsyncCallback callback, object object);
    public virtual object EndInvoke(IAsyncResult result);
}
internal class Microsoft.Toolkit.Uwp.UI.Controls.Microsoft_Toolkit_Uwp_UI_Controls_Markdown_XamlTypeInfo.Setter : MulticastDelegate {
    public Setter(object object, IntPtr method);
    public virtual void Invoke(object instance, object value);
    public virtual IAsyncResult BeginInvoke(object instance, object value, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
[GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks", " 10.0.19041.685")]
[DebuggerNonUserCodeAttribute]
internal class Microsoft.Toolkit.Uwp.UI.Controls.Microsoft_Toolkit_Uwp_UI_Controls_Markdown_XamlTypeInfo.XamlMember : object {
    private XamlTypeInfoProvider _provider;
    private string _name;
    private bool _isAttachable;
    private bool _isDependencyProperty;
    private bool _isReadOnly;
    private string _typeName;
    private string _targetTypeName;
    [CompilerGeneratedAttribute]
private Getter <Getter>k__BackingField;
    [CompilerGeneratedAttribute]
private Setter <Setter>k__BackingField;
    public string Name { get; }
    public IXamlType Type { get; }
    public IXamlType TargetType { get; }
    public bool IsAttachable { get; }
    public bool IsDependencyProperty { get; }
    public bool IsReadOnly { get; }
    public Getter Getter { get; public set; }
    public Setter Setter { get; public set; }
    public XamlMember(XamlTypeInfoProvider provider, string name, string typeName);
    public sealed virtual string get_Name();
    public sealed virtual IXamlType get_Type();
    public void SetTargetTypeName(string targetTypeName);
    public sealed virtual IXamlType get_TargetType();
    public void SetIsAttachable();
    public sealed virtual bool get_IsAttachable();
    public void SetIsDependencyProperty();
    public sealed virtual bool get_IsDependencyProperty();
    public void SetIsReadOnly();
    public sealed virtual bool get_IsReadOnly();
    [CompilerGeneratedAttribute]
public Getter get_Getter();
    [CompilerGeneratedAttribute]
public void set_Getter(Getter value);
    public sealed virtual object GetValue(object instance);
    [CompilerGeneratedAttribute]
public Setter get_Setter();
    [CompilerGeneratedAttribute]
public void set_Setter(Setter value);
    public sealed virtual void SetValue(object instance, object value);
}
[GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks", " 10.0.19041.685")]
[DebuggerNonUserCodeAttribute]
public class Microsoft.Toolkit.Uwp.UI.Controls.Microsoft_Toolkit_Uwp_UI_Controls_Markdown_XamlTypeInfo.XamlMetaDataProvider : object {
    private XamlTypeInfoProvider _provider;
    private XamlTypeInfoProvider Provider { get; }
    private XamlTypeInfoProvider get_Provider();
    public sealed virtual IXamlType GetXamlType(Type type);
    public sealed virtual IXamlType GetXamlType(string fullName);
    public sealed virtual XmlnsDefinition[] GetXmlnsDefinitions();
}
[GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks", " 10.0.19041.685")]
[DebuggerNonUserCodeAttribute]
internal class Microsoft.Toolkit.Uwp.UI.Controls.Microsoft_Toolkit_Uwp_UI_Controls_Markdown_XamlTypeInfo.XamlSystemBaseType : object {
    private string _fullName;
    private Type _underlyingType;
    public string FullName { get; }
    public Type UnderlyingType { get; }
    public IXamlType BaseType { get; }
    public IXamlMember ContentProperty { get; }
    public bool IsArray { get; }
    public bool IsCollection { get; }
    public bool IsConstructible { get; }
    public bool IsDictionary { get; }
    public bool IsMarkupExtension { get; }
    public bool IsBindable { get; }
    public bool IsReturnTypeStub { get; }
    public bool IsLocalType { get; }
    public IXamlType ItemType { get; }
    public IXamlType KeyType { get; }
    public XamlSystemBaseType(string fullName, Type underlyingType);
    public sealed virtual string get_FullName();
    public sealed virtual Type get_UnderlyingType();
    public virtual IXamlType get_BaseType();
    public virtual IXamlMember get_ContentProperty();
    public virtual IXamlMember GetMember(string name);
    public virtual bool get_IsArray();
    public virtual bool get_IsCollection();
    public virtual bool get_IsConstructible();
    public virtual bool get_IsDictionary();
    public virtual bool get_IsMarkupExtension();
    public virtual bool get_IsBindable();
    public virtual bool get_IsReturnTypeStub();
    public virtual bool get_IsLocalType();
    public virtual IXamlType get_ItemType();
    public virtual IXamlType get_KeyType();
    public virtual object ActivateInstance();
    public virtual void AddToMap(object instance, object key, object item);
    public virtual void AddToVector(object instance, object item);
    public virtual void RunInitializer();
    public virtual object CreateFromString(string input);
}
[GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks", " 10.0.19041.685")]
[DebuggerNonUserCodeAttribute]
internal class Microsoft.Toolkit.Uwp.UI.Controls.Microsoft_Toolkit_Uwp_UI_Controls_Markdown_XamlTypeInfo.XamlTypeInfoProvider : object {
    private Dictionary`2<string, IXamlType> _xamlTypeCacheByName;
    private Dictionary`2<Type, IXamlType> _xamlTypeCacheByType;
    private Dictionary`2<string, IXamlMember> _xamlMembers;
    private String[] _typeNameTable;
    private Type[] _typeTable;
    private List`1<IXamlMetadataProvider> _otherProviders;
    private List`1<IXamlMetadataProvider> OtherProviders { get; }
    public IXamlType GetXamlTypeByType(Type type);
    public IXamlType GetXamlTypeByName(string typeName);
    public IXamlMember GetMemberByLongName(string longMemberName);
    private void InitTypeTables();
    private int LookupTypeIndexByName(string typeName);
    private int LookupTypeIndexByType(Type type);
    private object Activate_0_MarkdownTextBlock();
    private object Activate_14_StyleDictionary();
    private object Activate_16_Collection();
    private object Activate_20_TreeViewNode();
    private void VectorAdd_14_StyleDictionary(object instance, object item);
    private void VectorAdd_15_KeyedCollection(object instance, object item);
    private void VectorAdd_16_Collection(object instance, object item);
    private void VectorAdd_21_IList(object instance, object item);
    private IXamlType CreateXamlType(int typeIndex);
    private List`1<IXamlMetadataProvider> get_OtherProviders();
    private IXamlType CheckOtherMetadataProvidersForName(string typeName);
    private IXamlType CheckOtherMetadataProvidersForType(Type type);
    private object get_0_MarkdownTextBlock_LinkForeground(object instance);
    private void set_0_MarkdownTextBlock_LinkForeground(object instance, object Value);
    private object get_1_MarkdownTextBlock_QuoteBackground(object instance);
    private void set_1_MarkdownTextBlock_QuoteBackground(object instance, object Value);
    private object get_2_MarkdownTextBlock_QuoteForeground(object instance);
    private void set_2_MarkdownTextBlock_QuoteForeground(object instance, object Value);
    private object get_3_MarkdownTextBlock_QuoteBorderBrush(object instance);
    private void set_3_MarkdownTextBlock_QuoteBorderBrush(object instance, object Value);
    private object get_4_MarkdownTextBlock_QuoteBorderThickness(object instance);
    private void set_4_MarkdownTextBlock_QuoteBorderThickness(object instance, object Value);
    private object get_5_MarkdownTextBlock_QuoteMargin(object instance);
    private void set_5_MarkdownTextBlock_QuoteMargin(object instance, object Value);
    private object get_6_MarkdownTextBlock_QuotePadding(object instance);
    private void set_6_MarkdownTextBlock_QuotePadding(object instance, object Value);
    private object get_7_MarkdownTextBlock_CodeBackground(object instance);
    private void set_7_MarkdownTextBlock_CodeBackground(object instance, object Value);
    private object get_8_MarkdownTextBlock_CodeBorderBrush(object instance);
    private void set_8_MarkdownTextBlock_CodeBorderBrush(object instance, object Value);
    private object get_9_MarkdownTextBlock_CodeBorderThickness(object instance);
    private void set_9_MarkdownTextBlock_CodeBorderThickness(object instance, object Value);
    private object get_10_MarkdownTextBlock_CodeFontFamily(object instance);
    private void set_10_MarkdownTextBlock_CodeFontFamily(object instance, object Value);
    private object get_11_MarkdownTextBlock_CodeMargin(object instance);
    private void set_11_MarkdownTextBlock_CodeMargin(object instance, object Value);
    private object get_12_MarkdownTextBlock_CodePadding(object instance);
    private void set_12_MarkdownTextBlock_CodePadding(object instance, object Value);
    private object get_13_MarkdownTextBlock_InlineCodeBorderThickness(object instance);
    private void set_13_MarkdownTextBlock_InlineCodeBorderThickness(object instance, object Value);
    private object get_14_MarkdownTextBlock_InlineCodePadding(object instance);
    private void set_14_MarkdownTextBlock_InlineCodePadding(object instance, object Value);
    private object get_15_MarkdownTextBlock_InlineCodeMargin(object instance);
    private void set_15_MarkdownTextBlock_InlineCodeMargin(object instance, object Value);
    private object get_16_MarkdownTextBlock_InlineCodeBackground(object instance);
    private void set_16_MarkdownTextBlock_InlineCodeBackground(object instance, object Value);
    private object get_17_MarkdownTextBlock_InlineCodeBorderBrush(object instance);
    private void set_17_MarkdownTextBlock_InlineCodeBorderBrush(object instance, object Value);
    private object get_18_MarkdownTextBlock_InlineCodeForeground(object instance);
    private void set_18_MarkdownTextBlock_InlineCodeForeground(object instance, object Value);
    private object get_19_MarkdownTextBlock_InlineCodeFontFamily(object instance);
    private void set_19_MarkdownTextBlock_InlineCodeFontFamily(object instance, object Value);
    private object get_20_MarkdownTextBlock_EmojiFontFamily(object instance);
    private void set_20_MarkdownTextBlock_EmojiFontFamily(object instance, object Value);
    private object get_21_MarkdownTextBlock_Header1FontWeight(object instance);
    private void set_21_MarkdownTextBlock_Header1FontWeight(object instance, object Value);
    private object get_22_MarkdownTextBlock_Header1FontSize(object instance);
    private void set_22_MarkdownTextBlock_Header1FontSize(object instance, object Value);
    private object get_23_MarkdownTextBlock_Header1Margin(object instance);
    private void set_23_MarkdownTextBlock_Header1Margin(object instance, object Value);
    private object get_24_MarkdownTextBlock_Header1Foreground(object instance);
    private void set_24_MarkdownTextBlock_Header1Foreground(object instance, object Value);
    private object get_25_MarkdownTextBlock_Header2FontWeight(object instance);
    private void set_25_MarkdownTextBlock_Header2FontWeight(object instance, object Value);
    private object get_26_MarkdownTextBlock_Header2FontSize(object instance);
    private void set_26_MarkdownTextBlock_Header2FontSize(object instance, object Value);
    private object get_27_MarkdownTextBlock_Header2Margin(object instance);
    private void set_27_MarkdownTextBlock_Header2Margin(object instance, object Value);
    private object get_28_MarkdownTextBlock_Header2Foreground(object instance);
    private void set_28_MarkdownTextBlock_Header2Foreground(object instance, object Value);
    private object get_29_MarkdownTextBlock_Header3FontWeight(object instance);
    private void set_29_MarkdownTextBlock_Header3FontWeight(object instance, object Value);
    private object get_30_MarkdownTextBlock_Header3FontSize(object instance);
    private void set_30_MarkdownTextBlock_Header3FontSize(object instance, object Value);
    private object get_31_MarkdownTextBlock_Header3Margin(object instance);
    private void set_31_MarkdownTextBlock_Header3Margin(object instance, object Value);
    private object get_32_MarkdownTextBlock_Header3Foreground(object instance);
    private void set_32_MarkdownTextBlock_Header3Foreground(object instance, object Value);
    private object get_33_MarkdownTextBlock_Header4FontWeight(object instance);
    private void set_33_MarkdownTextBlock_Header4FontWeight(object instance, object Value);
    private object get_34_MarkdownTextBlock_Header4FontSize(object instance);
    private void set_34_MarkdownTextBlock_Header4FontSize(object instance, object Value);
    private object get_35_MarkdownTextBlock_Header4Margin(object instance);
    private void set_35_MarkdownTextBlock_Header4Margin(object instance, object Value);
    private object get_36_MarkdownTextBlock_Header4Foreground(object instance);
    private void set_36_MarkdownTextBlock_Header4Foreground(object instance, object Value);
    private object get_37_MarkdownTextBlock_Header5FontWeight(object instance);
    private void set_37_MarkdownTextBlock_Header5FontWeight(object instance, object Value);
    private object get_38_MarkdownTextBlock_Header5FontSize(object instance);
    private void set_38_MarkdownTextBlock_Header5FontSize(object instance, object Value);
    private object get_39_MarkdownTextBlock_Header5Margin(object instance);
    private void set_39_MarkdownTextBlock_Header5Margin(object instance, object Value);
    private object get_40_MarkdownTextBlock_Header5Foreground(object instance);
    private void set_40_MarkdownTextBlock_Header5Foreground(object instance, object Value);
    private object get_41_MarkdownTextBlock_Header6FontWeight(object instance);
    private void set_41_MarkdownTextBlock_Header6FontWeight(object instance, object Value);
    private object get_42_MarkdownTextBlock_Header6FontSize(object instance);
    private void set_42_MarkdownTextBlock_Header6FontSize(object instance, object Value);
    private object get_43_MarkdownTextBlock_Header6Margin(object instance);
    private void set_43_MarkdownTextBlock_Header6Margin(object instance, object Value);
    private object get_44_MarkdownTextBlock_Header6Foreground(object instance);
    private void set_44_MarkdownTextBlock_Header6Foreground(object instance, object Value);
    private object get_45_MarkdownTextBlock_HorizontalRuleBrush(object instance);
    private void set_45_MarkdownTextBlock_HorizontalRuleBrush(object instance, object Value);
    private object get_46_MarkdownTextBlock_HorizontalRuleMargin(object instance);
    private void set_46_MarkdownTextBlock_HorizontalRuleMargin(object instance, object Value);
    private object get_47_MarkdownTextBlock_HorizontalRuleThickness(object instance);
    private void set_47_MarkdownTextBlock_HorizontalRuleThickness(object instance, object Value);
    private object get_48_MarkdownTextBlock_ListMargin(object instance);
    private void set_48_MarkdownTextBlock_ListMargin(object instance, object Value);
    private object get_49_MarkdownTextBlock_ListGutterWidth(object instance);
    private void set_49_MarkdownTextBlock_ListGutterWidth(object instance, object Value);
    private object get_50_MarkdownTextBlock_ListBulletSpacing(object instance);
    private void set_50_MarkdownTextBlock_ListBulletSpacing(object instance, object Value);
    private object get_51_MarkdownTextBlock_ParagraphMargin(object instance);
    private void set_51_MarkdownTextBlock_ParagraphMargin(object instance, object Value);
    private object get_52_MarkdownTextBlock_ParagraphLineHeight(object instance);
    private void set_52_MarkdownTextBlock_ParagraphLineHeight(object instance, object Value);
    private object get_53_MarkdownTextBlock_TableBorderBrush(object instance);
    private void set_53_MarkdownTextBlock_TableBorderBrush(object instance, object Value);
    private object get_54_MarkdownTextBlock_TableBorderThickness(object instance);
    private void set_54_MarkdownTextBlock_TableBorderThickness(object instance, object Value);
    private object get_55_MarkdownTextBlock_TableCellPadding(object instance);
    private void set_55_MarkdownTextBlock_TableCellPadding(object instance, object Value);
    private object get_56_MarkdownTextBlock_YamlBorderThickness(object instance);
    private void set_56_MarkdownTextBlock_YamlBorderThickness(object instance, object Value);
    private object get_57_MarkdownTextBlock_YamlBorderBrush(object instance);
    private void set_57_MarkdownTextBlock_YamlBorderBrush(object instance, object Value);
    private object get_58_MarkdownTextBlock_TableMargin(object instance);
    private void set_58_MarkdownTextBlock_TableMargin(object instance, object Value);
    private object get_59_MarkdownTextBlock_TextWrapping(object instance);
    private void set_59_MarkdownTextBlock_TextWrapping(object instance, object Value);
    private object get_60_MarkdownTextBlock_ImageMaxWidth(object instance);
    private void set_60_MarkdownTextBlock_ImageMaxWidth(object instance, object Value);
    private object get_61_MarkdownTextBlock_ImageMaxHeight(object instance);
    private void set_61_MarkdownTextBlock_ImageMaxHeight(object instance, object Value);
    private object get_62_MarkdownTextBlock_ImageStretch(object instance);
    private void set_62_MarkdownTextBlock_ImageStretch(object instance, object Value);
    private object get_63_MarkdownTextBlock_Text(object instance);
    private void set_63_MarkdownTextBlock_Text(object instance, object Value);
    private object get_64_MarkdownTextBlock_UseSyntaxHighlighting(object instance);
    private void set_64_MarkdownTextBlock_UseSyntaxHighlighting(object instance, object Value);
    private object get_65_MarkdownTextBlock_WrapCodeBlock(object instance);
    private void set_65_MarkdownTextBlock_WrapCodeBlock(object instance, object Value);
    private object get_66_MarkdownTextBlock_CodeStyling(object instance);
    private void set_66_MarkdownTextBlock_CodeStyling(object instance, object Value);
    private object get_67_Style_Background(object instance);
    private void set_67_Style_Background(object instance, object Value);
    private object get_68_Style_Foreground(object instance);
    private void set_68_Style_Foreground(object instance, object Value);
    private object get_69_Style_ScopeName(object instance);
    private void set_69_Style_ScopeName(object instance, object Value);
    private object get_70_Style_ReferenceName(object instance);
    private void set_70_Style_ReferenceName(object instance, object Value);
    private object get_71_Style_Italic(object instance);
    private void set_71_Style_Italic(object instance, object Value);
    private object get_72_Style_Bold(object instance);
    private void set_72_Style_Bold(object instance, object Value);
    private object get_73_MarkdownTextBlock_IsTextSelectionEnabled(object instance);
    private void set_73_MarkdownTextBlock_IsTextSelectionEnabled(object instance, object Value);
    private object get_74_MarkdownTextBlock_CodeForeground(object instance);
    private void set_74_MarkdownTextBlock_CodeForeground(object instance, object Value);
    private object get_75_MarkdownTextBlock_UriPrefix(object instance);
    private void set_75_MarkdownTextBlock_UriPrefix(object instance, object Value);
    private object get_76_MarkdownTextBlock_SchemeList(object instance);
    private void set_76_MarkdownTextBlock_SchemeList(object instance, object Value);
    private object get_77_IconSource_Foreground(object instance);
    private void set_77_IconSource_Foreground(object instance, object Value);
    private object get_78_TreeViewNode_IsExpanded(object instance);
    private void set_78_TreeViewNode_IsExpanded(object instance, object Value);
    private object get_79_TreeViewNode_HasUnrealizedChildren(object instance);
    private void set_79_TreeViewNode_HasUnrealizedChildren(object instance, object Value);
    private object get_80_TreeViewNode_Content(object instance);
    private void set_80_TreeViewNode_Content(object instance, object Value);
    private object get_81_TreeViewNode_Children(object instance);
    private object get_82_TreeViewNode_Depth(object instance);
    private object get_83_TreeViewNode_HasChildren(object instance);
    private object get_84_TreeViewNode_Parent(object instance);
    private IXamlMember CreateXamlMember(string longMemberName);
}
[GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks", " 10.0.19041.685")]
[DebuggerNonUserCodeAttribute]
internal class Microsoft.Toolkit.Uwp.UI.Controls.Microsoft_Toolkit_Uwp_UI_Controls_Markdown_XamlTypeInfo.XamlUserType : XamlSystemBaseType {
    private XamlTypeInfoProvider _provider;
    private IXamlType _baseType;
    private bool _isArray;
    private bool _isMarkupExtension;
    private bool _isBindable;
    private bool _isReturnTypeStub;
    private bool _isLocalType;
    private IXamlType _boxedType;
    private string _contentPropertyName;
    private string _itemTypeName;
    private string _keyTypeName;
    private Dictionary`2<string, string> _memberNames;
    private Dictionary`2<string, object> _enumValues;
    [CompilerGeneratedAttribute]
private Activator <Activator>k__BackingField;
    [CompilerGeneratedAttribute]
private AddToCollection <CollectionAdd>k__BackingField;
    [CompilerGeneratedAttribute]
private AddToDictionary <DictionaryAdd>k__BackingField;
    [CompilerGeneratedAttribute]
private CreateFromStringMethod <CreateFromStringMethod>k__BackingField;
    [CompilerGeneratedAttribute]
private BoxInstanceMethod <BoxInstance>k__BackingField;
    public IXamlType BaseType { get; }
    public bool IsArray { get; }
    public bool IsCollection { get; }
    public bool IsConstructible { get; }
    public bool IsDictionary { get; }
    public bool IsMarkupExtension { get; }
    public bool IsBindable { get; }
    public bool IsReturnTypeStub { get; }
    public bool IsLocalType { get; }
    public IXamlType BoxedType { get; }
    public IXamlMember ContentProperty { get; }
    public IXamlType ItemType { get; }
    public IXamlType KeyType { get; }
    public Activator Activator { get; public set; }
    public AddToCollection CollectionAdd { get; public set; }
    public AddToDictionary DictionaryAdd { get; public set; }
    public CreateFromStringMethod CreateFromStringMethod { get; public set; }
    public BoxInstanceMethod BoxInstance { get; public set; }
    public XamlUserType(XamlTypeInfoProvider provider, string fullName, Type fullType, IXamlType baseType);
    public virtual IXamlType get_BaseType();
    public virtual bool get_IsArray();
    public virtual bool get_IsCollection();
    public virtual bool get_IsConstructible();
    public virtual bool get_IsDictionary();
    public virtual bool get_IsMarkupExtension();
    public virtual bool get_IsBindable();
    public virtual bool get_IsReturnTypeStub();
    public virtual bool get_IsLocalType();
    public sealed virtual IXamlType get_BoxedType();
    public virtual IXamlMember get_ContentProperty();
    public virtual IXamlType get_ItemType();
    public virtual IXamlType get_KeyType();
    public virtual IXamlMember GetMember(string name);
    public virtual object ActivateInstance();
    public virtual void AddToMap(object instance, object key, object item);
    public virtual void AddToVector(object instance, object item);
    public virtual void RunInitializer();
    public virtual object CreateFromString(string input);
    [CompilerGeneratedAttribute]
public Activator get_Activator();
    [CompilerGeneratedAttribute]
public void set_Activator(Activator value);
    [CompilerGeneratedAttribute]
public AddToCollection get_CollectionAdd();
    [CompilerGeneratedAttribute]
public void set_CollectionAdd(AddToCollection value);
    [CompilerGeneratedAttribute]
public AddToDictionary get_DictionaryAdd();
    [CompilerGeneratedAttribute]
public void set_DictionaryAdd(AddToDictionary value);
    [CompilerGeneratedAttribute]
public CreateFromStringMethod get_CreateFromStringMethod();
    [CompilerGeneratedAttribute]
public void set_CreateFromStringMethod(CreateFromStringMethod value);
    [CompilerGeneratedAttribute]
public BoxInstanceMethod get_BoxInstance();
    [CompilerGeneratedAttribute]
public void set_BoxInstance(BoxInstanceMethod value);
    public void SetContentPropertyName(string contentPropertyName);
    public void SetIsArray();
    public void SetIsMarkupExtension();
    public void SetIsBindable();
    public void SetIsReturnTypeStub();
    public void SetIsLocalType();
    public void SetItemTypeName(string itemTypeName);
    public void SetKeyTypeName(string keyTypeName);
    public void SetBoxedType(IXamlType boxedType);
    public object BoxType(object instance);
    public void AddMemberName(string shortName);
    public void AddEnumValue(string name, object value);
}
public class Microsoft.Toolkit.Uwp.UI.Controls.TextToolbarFormats.MarkDown.MarkDownButtonActions : ButtonActions {
    [CompilerGeneratedAttribute]
private MarkDownFormatter <Formatter>k__BackingField;
    public MarkDownFormatter Formatter { get; }
    public MarkDownButtonActions(MarkDownFormatter formatter);
    public virtual void FormatBold(ToolbarButton button);
    public virtual void FormatItalics(ToolbarButton button);
    public virtual void FormatStrikethrough(ToolbarButton button);
    public virtual void FormatLink(ToolbarButton button, string label, string formattedText, string link);
    public virtual void FormatList(ToolbarButton button);
    public virtual void FormatOrderedList(ToolbarButton button);
    [CompilerGeneratedAttribute]
public MarkDownFormatter get_Formatter();
}
public class Microsoft.Toolkit.Uwp.UI.Controls.TextToolbarFormats.MarkDown.MarkDownFormatter : Formatter {
    internal static string QuoteElement;
    internal static string HeadersElement;
    internal static string CodeElement;
    [CompilerGeneratedAttribute]
private CommonButtons <CommonButtons>k__BackingField;
    [CompilerGeneratedAttribute]
private int <ListLineIterator>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ReachedEndLine>k__BackingField;
    [CompilerGeneratedAttribute]
private ToolbarButton <QuoteButton>k__BackingField;
    [CompilerGeneratedAttribute]
private ToolbarButton <ListButton>k__BackingField;
    [CompilerGeneratedAttribute]
private ToolbarButton <OrderedListButton>k__BackingField;
    private Flyout headerFlyout;
    private CommonButtons CommonButtons { get; private set; }
    public string Text { get; }
    public ButtonMap DefaultButtons { get; }
    public int ListLineIterator { get; internal set; }
    public bool ReachedEndLine { get; private set; }
    internal ToolbarButton QuoteButton { get; internal set; }
    internal ToolbarButton ListButton { get; internal set; }
    internal ToolbarButton OrderedListButton { get; internal set; }
    public string NewLineChars { get; }
    public virtual void SetModel(TextToolbar model);
    public void StyleHeader(ToolbarButton button);
    private void HeaderSelected(object sender, TappedRoutedEventArgs e);
    public void FormatCode(ToolbarButton button);
    public void FormatQuote(ToolbarButton button);
    public virtual void SetSelection(string start, string end, bool reversible, string contents);
    protected virtual bool DetermineSimpleReverse(string start, string end);
    protected virtual bool DetermineSimpleInlineReverse(string start, string end);
    public virtual void SetList(Func`1<string> listChar, ToolbarButton button, bool wrapNewLines);
    protected virtual bool DetermineListReverse(Func`1<string> listChar, bool wrapNewLines);
    protected virtual bool DetermineInlineWrapListReverse(Func`1<string> listChar);
    internal string OrderedListIterate();
    [CompilerGeneratedAttribute]
private CommonButtons get_CommonButtons();
    [CompilerGeneratedAttribute]
private void set_CommonButtons(CommonButtons value);
    public virtual string get_Text();
    public virtual ButtonMap get_DefaultButtons();
    [CompilerGeneratedAttribute]
public int get_ListLineIterator();
    [CompilerGeneratedAttribute]
internal void set_ListLineIterator(int value);
    [CompilerGeneratedAttribute]
public bool get_ReachedEndLine();
    [CompilerGeneratedAttribute]
private void set_ReachedEndLine(bool value);
    [CompilerGeneratedAttribute]
internal ToolbarButton get_QuoteButton();
    [CompilerGeneratedAttribute]
internal void set_QuoteButton(ToolbarButton value);
    [CompilerGeneratedAttribute]
internal ToolbarButton get_ListButton();
    [CompilerGeneratedAttribute]
internal void set_ListButton(ToolbarButton value);
    [CompilerGeneratedAttribute]
internal ToolbarButton get_OrderedListButton();
    [CompilerGeneratedAttribute]
internal void set_OrderedListButton(ToolbarButton value);
    public virtual string get_NewLineChars();
    [CompilerGeneratedAttribute]
private string <FormatCode>b__6_0();
}
internal static class ThisAssembly : object {
    internal static string AssemblyVersion;
    internal static string AssemblyFileVersion;
    internal static string AssemblyInformationalVersion;
    internal static string AssemblyName;
    internal static string AssemblyTitle;
    internal static string AssemblyConfiguration;
    internal static string GitCommitId;
    internal static bool IsPublicRelease;
    internal static bool IsPrerelease;
    internal static DateTime GitCommitDate;
    internal static string RootNamespace;
    private static ThisAssembly();
}
