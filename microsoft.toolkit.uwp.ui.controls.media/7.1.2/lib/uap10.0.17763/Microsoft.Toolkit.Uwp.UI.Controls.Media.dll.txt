public enum Microsoft.Toolkit.Uwp.UI.Controls.BitmapFileFormat : Enum {
    public int value__;
    public static BitmapFileFormat Bmp;
    public static BitmapFileFormat Png;
    public static BitmapFileFormat Jpeg;
    public static BitmapFileFormat Tiff;
    public static BitmapFileFormat Gif;
    public static BitmapFileFormat JpegXR;
}
internal static class Microsoft.Toolkit.Uwp.UI.Controls.ControlHelpers : object {
    [CompilerGeneratedAttribute]
private static bool <IsXamlRootAvailable>k__BackingField;
    internal static bool IsXamlRootAvailable { get; }
    private static ControlHelpers();
    [CompilerGeneratedAttribute]
internal static bool get_IsXamlRootAvailable();
}
public enum Microsoft.Toolkit.Uwp.UI.Controls.CropShape : Enum {
    public int value__;
    public static CropShape Rectangular;
    public static CropShape Circular;
}
internal class Microsoft.Toolkit.Uwp.UI.Controls.CustomInkDrawingAttribute : object {
    [CompilerGeneratedAttribute]
private Color <Color>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <FitToCurve>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IgnorePressure>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IgnoreTilt>k__BackingField;
    [CompilerGeneratedAttribute]
private Size <Size>k__BackingField;
    [CompilerGeneratedAttribute]
private PenTipShape <PenTip>k__BackingField;
    [CompilerGeneratedAttribute]
private Matrix3x2 <PenTipTransform>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <DrawAsHighlighter>k__BackingField;
    public Color Color { get; public set; }
    public bool FitToCurve { get; public set; }
    public bool IgnorePressure { get; public set; }
    public bool IgnoreTilt { get; public set; }
    public Size Size { get; public set; }
    public PenTipShape PenTip { get; public set; }
    public Matrix3x2 PenTipTransform { get; public set; }
    public bool DrawAsHighlighter { get; public set; }
    [CompilerGeneratedAttribute]
public Color get_Color();
    [CompilerGeneratedAttribute]
public void set_Color(Color value);
    [CompilerGeneratedAttribute]
public bool get_FitToCurve();
    [CompilerGeneratedAttribute]
public void set_FitToCurve(bool value);
    [CompilerGeneratedAttribute]
public bool get_IgnorePressure();
    [CompilerGeneratedAttribute]
public void set_IgnorePressure(bool value);
    [CompilerGeneratedAttribute]
public bool get_IgnoreTilt();
    [CompilerGeneratedAttribute]
public void set_IgnoreTilt(bool value);
    [CompilerGeneratedAttribute]
public Size get_Size();
    [CompilerGeneratedAttribute]
public void set_Size(Size value);
    [CompilerGeneratedAttribute]
public PenTipShape get_PenTip();
    [CompilerGeneratedAttribute]
public void set_PenTip(PenTipShape value);
    [CompilerGeneratedAttribute]
public Matrix3x2 get_PenTipTransform();
    [CompilerGeneratedAttribute]
public void set_PenTipTransform(Matrix3x2 value);
    [CompilerGeneratedAttribute]
public bool get_DrawAsHighlighter();
    [CompilerGeneratedAttribute]
public void set_DrawAsHighlighter(bool value);
}
public class Microsoft.Toolkit.Uwp.UI.Controls.Eyedropper : Control {
    private static string TouchState;
    private static string MousePenState;
    private static int PreviewPixelsPerRawPixel;
    private static int PixelCountPerRow;
    private static CoreCursor DefaultCursor;
    private static CoreCursor MoveCursor;
    private CanvasDevice _device;
    private TranslateTransform _layoutTransform;
    private CanvasImageSource _previewImageSource;
    private Grid _rootGrid;
    private Grid _targetGrid;
    private Popup _popup;
    private CanvasBitmap _appScreenshot;
    private Action _lazyTask;
    private Nullable`1<UInt32> _pointerId;
    private TaskCompletionSource`1<Color> _taskSource;
    private double _currentDpi;
    [CompilerGeneratedAttribute]
private TypedEventHandler`2<Eyedropper, EyedropperColorChangedEventArgs> ColorChanged;
    [CompilerGeneratedAttribute]
private TypedEventHandler`2<Eyedropper, EventArgs> PickStarted;
    [CompilerGeneratedAttribute]
private TypedEventHandler`2<Eyedropper, EventArgs> PickCompleted;
    public static DependencyProperty ColorProperty;
    public static DependencyProperty PreviewProperty;
    public static DependencyProperty WorkAreaProperty;
    public Color Color { get; private set; }
    public ImageSource Preview { get; private set; }
    public Rect WorkArea { get; public set; }
    private static Eyedropper();
    [CompilerGeneratedAttribute]
public void add_ColorChanged(TypedEventHandler`2<Eyedropper, EyedropperColorChangedEventArgs> value);
    [CompilerGeneratedAttribute]
public void remove_ColorChanged(TypedEventHandler`2<Eyedropper, EyedropperColorChangedEventArgs> value);
    [CompilerGeneratedAttribute]
public void add_PickStarted(TypedEventHandler`2<Eyedropper, EventArgs> value);
    [CompilerGeneratedAttribute]
public void remove_PickStarted(TypedEventHandler`2<Eyedropper, EventArgs> value);
    [CompilerGeneratedAttribute]
public void add_PickCompleted(TypedEventHandler`2<Eyedropper, EventArgs> value);
    [CompilerGeneratedAttribute]
public void remove_PickCompleted(TypedEventHandler`2<Eyedropper, EventArgs> value);
    [AsyncStateMachineAttribute("Microsoft.Toolkit.Uwp.UI.Controls.Eyedropper/<Open>d__27")]
public Task`1<Color> Open(Nullable`1<Point> startPoint);
    public void Close();
    private void HookUpEvents();
    [AsyncStateMachineAttribute("Microsoft.Toolkit.Uwp.UI.Controls.Eyedropper/<XamlRoot_Changed>d__30")]
private void XamlRoot_Changed(XamlRoot sender, XamlRootChangedEventArgs args);
    private void UnhookEvents();
    private void Eyedropper_Loaded(object sender, RoutedEventArgs e);
    private void TargetGrid_PointerExited(object sender, PointerRoutedEventArgs e);
    private void TargetGrid_PointerEntered(object sender, PointerRoutedEventArgs e);
    [AsyncStateMachineAttribute("Microsoft.Toolkit.Uwp.UI.Controls.Eyedropper/<Eyedropper_DpiChanged>d__35")]
private void Eyedropper_DpiChanged(DisplayInformation sender, object args);
    [AsyncStateMachineAttribute("Microsoft.Toolkit.Uwp.UI.Controls.Eyedropper/<TargetGrid_PointerReleased>d__36")]
private void TargetGrid_PointerReleased(object sender, PointerRoutedEventArgs e);
    [AsyncStateMachineAttribute("Microsoft.Toolkit.Uwp.UI.Controls.Eyedropper/<InternalPointerReleasedAsync>d__37")]
internal Task InternalPointerReleasedAsync(UInt32 pointerId, Point position);
    private void TargetGrid_PointerMoved(object sender, PointerRoutedEventArgs e);
    internal void InternalPointerMoved(UInt32 pointerId, Point position);
    [AsyncStateMachineAttribute("Microsoft.Toolkit.Uwp.UI.Controls.Eyedropper/<TargetGrid_PointerPressed>d__40")]
private void TargetGrid_PointerPressed(object sender, PointerRoutedEventArgs e);
    [AsyncStateMachineAttribute("Microsoft.Toolkit.Uwp.UI.Controls.Eyedropper/<InternalPointerPressedAsync>d__41")]
internal Task InternalPointerPressedAsync(UInt32 pointerId, Point position, PointerDeviceType pointerDeviceType);
    private void Eyedropper_Unloaded(object sender, RoutedEventArgs e);
    private void Window_SizeChanged(object sender, WindowSizeChangedEventArgs e);
    private void UpdateRootGridSize(double width, double height);
    private void UpdateEyedropper(Point position);
    private void UpdateWorkArea();
    private void UpdatePreview(int centerX, int centerY);
    [AsyncStateMachineAttribute("Microsoft.Toolkit.Uwp.UI.Controls.Eyedropper/<UpdateAppScreenshotAsync>d__48")]
internal Task UpdateAppScreenshotAsync();
    public Color get_Color();
    private void set_Color(Color value);
    public ImageSource get_Preview();
    private void set_Preview(ImageSource value);
    public Rect get_WorkArea();
    public void set_WorkArea(Rect value);
    private static void OnColorChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    private static void OnWorkAreaChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
}
public class Microsoft.Toolkit.Uwp.UI.Controls.EyedropperColorChangedEventArgs : object {
    [CompilerGeneratedAttribute]
private Color <NewColor>k__BackingField;
    [CompilerGeneratedAttribute]
private Color <OldColor>k__BackingField;
    public Color NewColor { get; internal set; }
    public Color OldColor { get; internal set; }
    [CompilerGeneratedAttribute]
public Color get_NewColor();
    [CompilerGeneratedAttribute]
internal void set_NewColor(Color value);
    [CompilerGeneratedAttribute]
public Color get_OldColor();
    [CompilerGeneratedAttribute]
internal void set_OldColor(Color value);
}
public class Microsoft.Toolkit.Uwp.UI.Controls.EyedropperToolButton : ButtonBase {
    private static string NormalState;
    private static string PointerOverState;
    private static string PressedState;
    private static string DisabledState;
    private static string EyedropperEnabledState;
    private static string EyedropperEnabledPointerOverState;
    private static string EyedropperEnabledPressedState;
    private static string EyedropperEnabledDisabledState;
    private Eyedropper _eyedropper;
    [CompilerGeneratedAttribute]
private TypedEventHandler`2<EyedropperToolButton, EyedropperColorChangedEventArgs> ColorChanged;
    [CompilerGeneratedAttribute]
private TypedEventHandler`2<EyedropperToolButton, EventArgs> PickStarted;
    [CompilerGeneratedAttribute]
private TypedEventHandler`2<EyedropperToolButton, EventArgs> PickCompleted;
    public static DependencyProperty ColorProperty;
    public static DependencyProperty EyedropperEnabledProperty;
    public static DependencyProperty EyedropperStyleProperty;
    public static DependencyProperty TargetElementProperty;
    public Color Color { get; private set; }
    public bool EyedropperEnabled { get; public set; }
    public Style EyedropperStyle { get; public set; }
    public FrameworkElement TargetElement { get; public set; }
    private static EyedropperToolButton();
    [CompilerGeneratedAttribute]
public void add_ColorChanged(TypedEventHandler`2<EyedropperToolButton, EyedropperColorChangedEventArgs> value);
    [CompilerGeneratedAttribute]
public void remove_ColorChanged(TypedEventHandler`2<EyedropperToolButton, EyedropperColorChangedEventArgs> value);
    [CompilerGeneratedAttribute]
public void add_PickStarted(TypedEventHandler`2<EyedropperToolButton, EventArgs> value);
    [CompilerGeneratedAttribute]
public void remove_PickStarted(TypedEventHandler`2<EyedropperToolButton, EventArgs> value);
    [CompilerGeneratedAttribute]
public void add_PickCompleted(TypedEventHandler`2<EyedropperToolButton, EventArgs> value);
    [CompilerGeneratedAttribute]
public void remove_PickCompleted(TypedEventHandler`2<EyedropperToolButton, EventArgs> value);
    private void HookUpEvents();
    private void UnhookEvents();
    private void EyedropperToolButton_Loaded(object sender, RoutedEventArgs e);
    private void EyedropperToolButton_Unloaded(object sender, RoutedEventArgs e);
    private void EyedropperToolButton_ActualThemeChanged(FrameworkElement sender, object args);
    protected virtual void OnPointerEntered(PointerRoutedEventArgs e);
    protected virtual void OnPointerExited(PointerRoutedEventArgs e);
    protected virtual void OnPointerPressed(PointerRoutedEventArgs e);
    private void Eyedropper_PickStarted(Eyedropper sender, EventArgs args);
    private void Eyedropper_PickCompleted(Eyedropper sender, EventArgs args);
    private void Eyedropper_ColorChanged(Eyedropper sender, EyedropperColorChangedEventArgs args);
    private void OnIsEnabledChanged(DependencyObject sender, DependencyProperty dp);
    private void EyedropperToolButton_Click(object sender, RoutedEventArgs e);
    [AsyncStateMachineAttribute("Microsoft.Toolkit.Uwp.UI.Controls.EyedropperToolButton/<Window_SizeChanged>d__32")]
private void Window_SizeChanged(object sender, WindowSizeChangedEventArgs e);
    [AsyncStateMachineAttribute("Microsoft.Toolkit.Uwp.UI.Controls.EyedropperToolButton/<XamlRoot_Changed>d__33")]
private void XamlRoot_Changed(XamlRoot sender, XamlRootChangedEventArgs args);
    [AsyncStateMachineAttribute("Microsoft.Toolkit.Uwp.UI.Controls.EyedropperToolButton/<UpdateEyedropperWorkAreaAsync>d__34")]
private Task UpdateEyedropperWorkAreaAsync();
    public Color get_Color();
    private void set_Color(Color value);
    public bool get_EyedropperEnabled();
    public void set_EyedropperEnabled(bool value);
    public Style get_EyedropperStyle();
    public void set_EyedropperStyle(Style value);
    public FrameworkElement get_TargetElement();
    public void set_TargetElement(FrameworkElement value);
    private static void OnEyedropperEnabledChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    private static void OnEyedropperStyleChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    private static void OnTargetElementChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    private void UnhookTargetElementEvents(FrameworkElement target);
    private void HookUpTargetElementEvents(FrameworkElement target);
    [AsyncStateMachineAttribute("Microsoft.Toolkit.Uwp.UI.Controls.EyedropperToolButton/<Target_PointerEntered>d__56")]
private void Target_PointerEntered(object sender, PointerRoutedEventArgs e);
    [AsyncStateMachineAttribute("Microsoft.Toolkit.Uwp.UI.Controls.EyedropperToolButton/<Target_SizeChanged>d__57")]
private void Target_SizeChanged(object sender, SizeChangedEventArgs e);
}
internal interface Microsoft.Toolkit.Uwp.UI.Controls.IDrawable {
    public bool IsActive { get; public set; }
    public Rect Bounds { get; public set; }
    public abstract virtual void Draw(CanvasDrawingSession drawingSession, Rect sessionBounds);
    public abstract virtual bool IsVisible(Rect viewPort);
    public abstract virtual void WriteJson(Utf8JsonWriter writer);
    public abstract virtual void ReadProperty(string propertyName, Utf8JsonReader& reader);
    public abstract virtual void OnDeserialized();
    public abstract virtual bool get_IsActive();
    public abstract virtual void set_IsActive(bool value);
    public abstract virtual Rect get_Bounds();
    public abstract virtual void set_Bounds(Rect value);
}
internal class Microsoft.Toolkit.Uwp.UI.Controls.IDrawableConverter : JsonConverter`1<IDrawable> {
    private static string OldInkDrawableDiscriminator;
    private static string OldTextDrawableDiscriminator;
    public virtual bool CanConvert(Type typeToConvert);
    public virtual IDrawable Read(Utf8JsonReader& reader, Type typeToConvert, JsonSerializerOptions options);
    public virtual void Write(Utf8JsonWriter writer, IDrawable drawable, JsonSerializerOptions options);
    internal static string GetDiscriminator(Type type);
}
internal interface Microsoft.Toolkit.Uwp.UI.Controls.IInfiniteCanvasCommand {
    public abstract virtual void Execute();
    public abstract virtual void Undo();
}
[TemplatePartAttribute]
[TemplatePartAttribute]
[TemplatePartAttribute]
[TemplatePartAttribute]
[TemplatePartAttribute]
[TemplatePartAttribute]
[TemplatePartAttribute]
[TemplatePartAttribute]
[TemplatePartAttribute]
[TemplatePartAttribute]
[TemplatePartAttribute]
[TemplatePartAttribute]
public class Microsoft.Toolkit.Uwp.UI.Controls.ImageCropper : Control {
    private static string LayoutGridName;
    private static string ImageCanvasPartName;
    private static string SourceImagePartName;
    private static string MaskAreaPathPartName;
    private static string TopThumbPartName;
    private static string BottomThumbPartName;
    private static string LeftThumbPartName;
    private static string RightThumbPartName;
    private static string UpperLeftThumbPartName;
    private static string UpperRightThumbPartName;
    private static string LowerLeftThumbPartName;
    private static string LowerRightThumbPartName;
    private CompositeTransform _imageTransform;
    private CompositeTransform _inverseImageTransform;
    private GeometryGroup _maskAreaGeometryGroup;
    private Grid _layoutGrid;
    private Canvas _imageCanvas;
    private Image _sourceImage;
    private Path _maskAreaPath;
    private ImageCropperThumb _topThumb;
    private ImageCropperThumb _bottomThumb;
    private ImageCropperThumb _leftThumb;
    private ImageCropperThumb _rightThumb;
    private ImageCropperThumb _upperLeftThumb;
    private ImageCropperThumb _upperRightThumb;
    private ImageCropperThumb _lowerLeftThumb;
    private ImageCropperThumb _lowerRigthThumb;
    private double _startX;
    private double _startY;
    private double _endX;
    private double _endY;
    private Rect _currentCroppedRect;
    private Rect _restrictedCropRect;
    private Rect _restrictedSelectRect;
    private RectangleGeometry _outerGeometry;
    private Geometry _innerGeometry;
    private TimeSpan _animationDuration;
    private static double ThresholdValue;
    [CompilerGeneratedAttribute]
private double <MinCroppedPixelLength>k__BackingField;
    [CompilerGeneratedAttribute]
private double <MinSelectedLength>k__BackingField;
    public static DependencyProperty AspectRatioProperty;
    public static DependencyProperty SourceProperty;
    public static DependencyProperty CropShapeProperty;
    public static DependencyProperty MaskProperty;
    public static DependencyProperty PrimaryThumbStyleProperty;
    public static DependencyProperty SecondaryThumbStyleProperty;
    public static DependencyProperty ThumbPlacementProperty;
    private Rect CanvasRect { get; }
    private bool KeepAspectRatio { get; }
    private double UsedAspectRatio { get; }
    private Size MinCropSize { get; }
    private Size MinSelectSize { get; }
    public double MinCroppedPixelLength { get; public set; }
    public double MinSelectedLength { get; public set; }
    public Rect CroppedRegion { get; }
    public WriteableBitmap Source { get; public set; }
    public Nullable`1<double> AspectRatio { get; public set; }
    public CropShape CropShape { get; public set; }
    public Brush Mask { get; public set; }
    public Style PrimaryThumbStyle { get; public set; }
    public Style SecondaryThumbStyle { get; public set; }
    public ThumbPlacement ThumbPlacement { get; public set; }
    private static ImageCropper();
    private static void AnimateUIElementOffset(Point to, TimeSpan duration, UIElement target);
    private static void AnimateUIElementScale(double to, TimeSpan duration, UIElement target);
    private static DoubleAnimation CreateDoubleAnimation(double to, TimeSpan duration, DependencyObject target, string propertyName, bool enableDependentAnimation);
    private static PointAnimation CreatePointAnimation(Point to, TimeSpan duration, DependencyObject target, string propertyName, bool enableDependentAnimation);
    private static ObjectAnimationUsingKeyFrames CreateRectangleAnimation(Rect to, TimeSpan duration, RectangleGeometry rectangle, bool enableDependentAnimation);
    private static List`1<DiscreteObjectKeyFrame> GetRectKeyframes(Rect from, Rect to, TimeSpan duration);
    private Rect get_CanvasRect();
    private bool get_KeepAspectRatio();
    private double get_UsedAspectRatio();
    private Size get_MinCropSize();
    private Size get_MinSelectSize();
    protected virtual void OnApplyTemplate();
    private void HookUpEvents();
    private void UnhookEvents();
    protected virtual Size MeasureOverride(Size availableSize);
    [AsyncStateMachineAttribute("Microsoft.Toolkit.Uwp.UI.Controls.ImageCropper/<LoadImageFromFile>d__58")]
public Task LoadImageFromFile(StorageFile imageFile);
    [AsyncStateMachineAttribute("Microsoft.Toolkit.Uwp.UI.Controls.ImageCropper/<SaveAsync>d__59")]
public Task SaveAsync(IRandomAccessStream stream, BitmapFileFormat bitmapFileFormat, bool keepRectangularOutput);
    public void Reset();
    public bool TrySetCroppedRegion(Rect rect);
    private void ImageCropperThumb_KeyDown(object sender, KeyRoutedEventArgs e);
    private void ImageCropperThumb_KeyUp(object sender, KeyRoutedEventArgs e);
    private void ImageCropperThumb_ManipulationCompleted(object sender, ManipulationCompletedRoutedEventArgs e);
    private void ImageCropperThumb_ManipulationDelta(object sender, ManipulationDeltaRoutedEventArgs e);
    private void SourceImage_ManipulationDelta(object sender, ManipulationDeltaRoutedEventArgs e);
    private void ImageCanvas_SizeChanged(object sender, SizeChangedEventArgs e);
    [AsyncStateMachineAttribute("Microsoft.Toolkit.Uwp.UI.Controls.ImageCropper/<CropImageAsync>d__69")]
private static Task CropImageAsync(WriteableBitmap writeableBitmap, IRandomAccessStream stream, Rect croppedRect, BitmapFileFormat bitmapFileFormat);
    [AsyncStateMachineAttribute("Microsoft.Toolkit.Uwp.UI.Controls.ImageCropper/<CropImageWithShapeAsync>d__70")]
private static Task CropImageWithShapeAsync(WriteableBitmap writeableBitmap, IRandomAccessStream stream, Rect croppedRect, BitmapFileFormat bitmapFileFormat, CropShape cropShape);
    private static CanvasGeometry CreateClipGeometry(ICanvasResourceCreator resourceCreator, CropShape cropShape, Size croppedSize);
    private static Guid GetEncoderId(BitmapFileFormat bitmapFileFormat);
    private static Point GetSafePoint(Rect targetRect, Point point);
    private static bool IsSafePoint(Rect targetRect, Point point);
    private static bool IsSafeRect(Point startPoint, Point endPoint, Size minSize);
    private static Rect GetSafeRect(Point startPoint, Point endPoint, Size minSize, ThumbPosition position);
    private static Rect GetUniformRect(Rect targetRect, double aspectRatio);
    private static bool IsValidRect(Rect targetRect);
    private static Point GetSafeSizeChangeWhenKeepAspectRatio(Rect targetRect, ThumbPosition thumbPosition, Rect selectedRect, Point originSizeChange, double aspectRatio);
    private static bool CanContains(Rect targetRect, Rect testRect);
    private static bool TryGetContainedRect(Rect targetRect, Rect& testRect);
    private static bool IsCornerThumb(ThumbPosition thumbPosition);
    private void InitImageLayout(bool animate);
    private void UpdateImageLayout(bool animate);
    private void UpdateImageLayoutWithViewport(Rect viewport, Rect viewportImageRect, bool animate);
    private void UpdateCroppedRect(ThumbPosition position, Point diffPos);
    private void UpdateSelectedRect(Point startPoint, Point endPoint, bool animate);
    private void UpdateCropShape();
    private void UpdateMaskArea(bool animate);
    private void UpdateAspectRatio(bool animate);
    private void UpdateThumbsVisibility();
    [CompilerGeneratedAttribute]
public double get_MinCroppedPixelLength();
    [CompilerGeneratedAttribute]
public void set_MinCroppedPixelLength(double value);
    [CompilerGeneratedAttribute]
public double get_MinSelectedLength();
    [CompilerGeneratedAttribute]
public void set_MinSelectedLength(double value);
    public Rect get_CroppedRegion();
    private static void OnSourceChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    private static void OnAspectRatioChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    private static void OnCropShapeChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    private static void OnThumbPlacementChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    public WriteableBitmap get_Source();
    public void set_Source(WriteableBitmap value);
    public Nullable`1<double> get_AspectRatio();
    public void set_AspectRatio(Nullable`1<double> value);
    public CropShape get_CropShape();
    public void set_CropShape(CropShape value);
    public Brush get_Mask();
    public void set_Mask(Brush value);
    public Style get_PrimaryThumbStyle();
    public void set_PrimaryThumbStyle(Style value);
    public Style get_SecondaryThumbStyle();
    public void set_SecondaryThumbStyle(Style value);
    public ThumbPlacement get_ThumbPlacement();
    public void set_ThumbPlacement(ThumbPlacement value);
}
public class Microsoft.Toolkit.Uwp.UI.Controls.ImageCropperThumb : Control {
    private TranslateTransform _layoutTransform;
    [CompilerGeneratedAttribute]
private ThumbPosition <Position>k__BackingField;
    public static DependencyProperty XProperty;
    public static DependencyProperty YProperty;
    internal ThumbPosition Position { get; internal set; }
    public double X { get; public set; }
    public double Y { get; public set; }
    private static ImageCropperThumb();
    private void ImageCropperThumb_SizeChanged(object sender, SizeChangedEventArgs e);
    [CompilerGeneratedAttribute]
internal ThumbPosition get_Position();
    [CompilerGeneratedAttribute]
internal void set_Position(ThumbPosition value);
    private void UpdatePosition();
    public double get_X();
    public void set_X(double value);
    private static void OnXChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    public double get_Y();
    public void set_Y(double value);
    private static void OnYChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
}
[TemplatePartAttribute]
[TemplatePartAttribute]
[TemplatePartAttribute]
[TemplatePartAttribute]
[TemplatePartAttribute]
[TemplatePartAttribute]
[TemplatePartAttribute]
[TemplatePartAttribute]
[TemplatePartAttribute]
[TemplatePartAttribute]
[TemplatePartAttribute]
[TemplatePartAttribute]
[TemplatePartAttribute]
[TemplatePartAttribute]
[TemplatePartAttribute]
[TemplatePartAttribute]
[TemplatePartAttribute]
[TemplatePartAttribute]
public class Microsoft.Toolkit.Uwp.UI.Controls.InfiniteCanvas : Control {
    private static double DefaultMaxZoomFactor;
    private static double DefaultMinZoomFactor;
    private static double LargeCanvasWidthHeight;
    private static string CanvasTextBoxToolsName;
    private static string CanvasTextBoxColorPickerName;
    private static string CanvasComboBoxFontSizeTextBoxName;
    private static string CanvasTextBoxItalicButtonName;
    private static string CanvasTextBoxBoldButtonName;
    private static string DrawingSurfaceRendererName;
    private static string MainContainerName;
    private static string InfiniteCanvasScrollViewerName;
    private static string EraseAllButtonName;
    private static string CanvasTextBoxName;
    private static string EnableTextButtonName;
    private static string EnableTouchInkingButtonName;
    private static string InkCanvasToolBarName;
    private static string CanvasToolbarContainerName;
    private static string DrawingInkCanvasName;
    private static string UndoButtonName;
    private static string RedoButtonName;
    private static string FontColorIconName;
    private InkCanvas _inkCanvas;
    private InfiniteCanvasVirtualDrawingSurface _drawingSurfaceRenderer;
    private InkSynchronizer _inkSync;
    private InkToolbarCustomToolButton _enableTextButton;
    private InkToolbarCustomToggleButton _enableTouchInkingButton;
    private InfiniteCanvasTextBox _canvasTextBox;
    private StackPanel _canvasTextBoxTools;
    private ColorPicker _canvasTextBoxColorPicker;
    private ComboBox _canvasComboBoxFontSizeTextBox;
    private ToggleButton _canvasTextBoxItalicButton;
    private ToggleButton _canvasTextBoxBoldButton;
    private Button _undoButton;
    private Button _redoButton;
    private Button _eraseAllButton;
    private InkToolbar _inkCanvasToolBar;
    private Canvas _mainContainer;
    private ScrollViewer _infiniteCanvasScrollViewer;
    private StackPanel _canvasToolbarContainer;
    private FontIcon _fontColorIcon;
    public static DependencyProperty CanvasWidthProperty;
    public static DependencyProperty CanvasHeightProperty;
    public static DependencyProperty IsToolbarVisibleProperty;
    public static DependencyProperty MaxZoomFactorProperty;
    public static DependencyProperty MinZoomFactorProperty;
    [CompilerGeneratedAttribute]
private EventHandler ReRenderCompleted;
    private static int DefaultFontValue;
    private String[] _allowedCommands;
    private Point _lastInputPoint;
    private float _textFontSize;
    public double CanvasWidth { get; public set; }
    public double CanvasHeight { get; public set; }
    public bool IsToolbarVisible { get; public set; }
    public double MaxZoomFactor { get; public set; }
    public double MinZoomFactor { get; public set; }
    private Rect ViewPort { get; }
    private double ViewPortHeight { get; }
    private double ViewPortWidth { get; }
    private TextDrawable SelectedTextDrawable { get; }
    private static InfiniteCanvas();
    public double get_CanvasWidth();
    public void set_CanvasWidth(double value);
    public double get_CanvasHeight();
    public void set_CanvasHeight(double value);
    public bool get_IsToolbarVisible();
    public void set_IsToolbarVisible(bool value);
    public double get_MaxZoomFactor();
    public void set_MaxZoomFactor(double value);
    public double get_MinZoomFactor();
    public void set_MinZoomFactor(double value);
    private Rect get_ViewPort();
    private double get_ViewPortHeight();
    private double get_ViewPortWidth();
    protected virtual void OnApplyTemplate();
    private void UnRegisterEvents();
    private void RegisterEvents();
    private void InfiniteCanvas_Loaded(object sender, RoutedEventArgs e);
    private void ConfigureControls();
    private void SetZoomFactor();
    private void SetCanvasWidthHeight();
    private void ReDrawCanvas();
    public void Redo();
    public void Undo();
    public string ExportAsJson();
    public List`1<InkStroke> ExportInkStrokes();
    public List`1<string> ExportText();
    public void ImportFromJson(string json);
    [AsyncStateMachineAttribute("Microsoft.Toolkit.Uwp.UI.Controls.InfiniteCanvas/<SaveBitmapAsync>d__81")]
public Task SaveBitmapAsync(IRandomAccessStream stream, BitmapFileFormat bitmapFileFormat);
    [CompilerGeneratedAttribute]
public void add_ReRenderCompleted(EventHandler value);
    [CompilerGeneratedAttribute]
public void remove_ReRenderCompleted(EventHandler value);
    private static CanvasBitmapFileFormat MapToCanvasBitmapFileFormat(BitmapFileFormat bitmapFileFormat);
    private static void CanvasWidthHeightPropertyChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    private static void IsToolbarVisiblePropertyChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    private static void MinMaxZoomChangedPropertyChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    protected virtual void OnKeyDown(KeyRoutedEventArgs e);
    private void InfiniteCanvas_Unloaded(object sender, RoutedEventArgs e);
    private void RedoButton_Click(object sender, RoutedEventArgs e);
    private void UndoButton_Click(object sender, RoutedEventArgs e);
    private void EnableTouchInkingButton_Unchecked(object sender, RoutedEventArgs e);
    private void EnableTouchInkingButton_Checked(object sender, RoutedEventArgs e);
    private void EnableTextButton_Unchecked(object sender, RoutedEventArgs e);
    private void EnableTextButton_Checked(object sender, RoutedEventArgs e);
    private void EraseAllButton_Click(object sender, RoutedEventArgs e);
    [AsyncStateMachineAttribute("Microsoft.Toolkit.Uwp.UI.Controls.InfiniteCanvas/<Current_LeavingBackground>d__98")]
private void Current_LeavingBackground(object sender, LeavingBackgroundEventArgs e);
    private void InkScrollViewer_SizeChanged(object sender, SizeChangedEventArgs e);
    private void OnStrokesCollected(InkPresenter sender, InkStrokesCollectedEventArgs args);
    private void UnprocessedInput_PointerMoved(InkUnprocessedInput sender, PointerEventArgs args);
    private void InkScrollViewer_ViewChanged(object sender, ScrollViewerViewChangedEventArgs e);
    private void DrawingSurfaceRenderer_CommandExecuted(object sender, EventArgs e);
    private TextDrawable get_SelectedTextDrawable();
    private void SetFontSize(float newSize);
    private void InkScrollViewer_PreviewKeyDown(object sender, KeyRoutedEventArgs e);
    private void CanvasTextBoxBoldButton_Clicked(object sender, RoutedEventArgs e);
    private void CanvasTextBoxItalicButton_Clicked(object sender, RoutedEventArgs e);
    private void CanvasComboBoxFontSizeTextBox_SelectionChanged(object sender, SelectionChangedEventArgs e);
    private void CanvasComboBoxFontSizeTextBox_TextSubmitted(ComboBox sender, ComboBoxTextSubmittedEventArgs args);
    private void CanvasTextBox_SizeChanged(object sender, SizeChangedEventArgs e);
    private void CanvasTextBoxColorPicker_ColorChanged(ColorPicker sender, ColorChangedEventArgs args);
    private void CanvasTextBox_TextChanged(object sender, string text);
    private void InkScrollViewer_PointerPressed(object sender, PointerRoutedEventArgs e);
    private void ClearTextBoxValue();
    private void CanvasComboBoxFontSizeTextBox_PreviewKeyDown(object sender, KeyRoutedEventArgs e);
}
internal class Microsoft.Toolkit.Uwp.UI.Controls.InfiniteCanvasClearAllCommand : object {
    private List`1<IDrawable> _drawableList;
    private IDrawable[] _storeList;
    public InfiniteCanvasClearAllCommand(List`1<IDrawable> drawableList);
    public sealed virtual void Execute();
    public sealed virtual void Undo();
}
internal class Microsoft.Toolkit.Uwp.UI.Controls.InfiniteCanvasCreateInkCommand : object {
    private List`1<IDrawable> _drawableList;
    private InkDrawable _drawable;
    public InfiniteCanvasCreateInkCommand(List`1<IDrawable> drawableList, IReadOnlyList`1<InkStroke> strokes);
    public sealed virtual void Execute();
    public sealed virtual void Undo();
}
internal class Microsoft.Toolkit.Uwp.UI.Controls.InfiniteCanvasCreateTextBoxCommand : object {
    private List`1<IDrawable> _drawableList;
    private TextDrawable _drawable;
    public InfiniteCanvasCreateTextBoxCommand(List`1<IDrawable> drawableList, double x, double y, double width, double height, float textFontSize, string text, Color color, bool isBold, bool isItalic);
    public sealed virtual void Execute();
    public sealed virtual void Undo();
}
internal class Microsoft.Toolkit.Uwp.UI.Controls.InfiniteCanvasEraseInkCommand : object {
    private List`1<IDrawable> _drawableList;
    private IDrawable _drawable;
    public InfiniteCanvasEraseInkCommand(List`1<IDrawable> drawableList, IDrawable drawable);
    public sealed virtual void Execute();
    public sealed virtual void Undo();
}
internal class Microsoft.Toolkit.Uwp.UI.Controls.InfiniteCanvasRemoveTextBoxCommand : object {
    private List`1<IDrawable> _drawableList;
    private TextDrawable _drawable;
    public InfiniteCanvasRemoveTextBoxCommand(List`1<IDrawable> drawableList, TextDrawable drawable);
    public sealed virtual void Execute();
    public sealed virtual void Undo();
}
public class Microsoft.Toolkit.Uwp.UI.Controls.InfiniteCanvasTextBox : Control {
    private TextBox _editZone;
    [CompilerGeneratedAttribute]
private EventHandler`1<string> TextChanged;
    [CompilerGeneratedAttribute]
internal void add_TextChanged(EventHandler`1<string> value);
    [CompilerGeneratedAttribute]
internal void remove_TextChanged(EventHandler`1<string> value);
    protected virtual void OnApplyTemplate();
    private void EditZone_TextChanged(object sender, RoutedEventArgs e);
    internal double GetEditZoneWidth();
    internal double GetEditZoneHeight();
    internal void Clear();
    internal void SetText(string text);
    internal void UpdateFontSize(float textFontSize);
    internal void UpdateFontStyle(bool isItalic);
    internal void UpdateFontWeight(bool isBold);
    internal bool CannotGoRight();
    internal bool CannotGoLeft();
    internal bool CannotGoUp();
    internal bool CannotGoDown();
}
internal class Microsoft.Toolkit.Uwp.UI.Controls.InfiniteCanvasUpdateTextColorCommand : object {
    private Color _oldColor;
    private Color _newColor;
    private TextDrawable _drawable;
    public InfiniteCanvasUpdateTextColorCommand(TextDrawable drawable, Color oldText, Color newText);
    public sealed virtual void Execute();
    public sealed virtual void Undo();
}
internal class Microsoft.Toolkit.Uwp.UI.Controls.InfiniteCanvasUpdateTextCommand : object {
    private string _oldText;
    private string _newText;
    private TextDrawable _drawable;
    public InfiniteCanvasUpdateTextCommand(TextDrawable drawable, string oldText, string newText);
    public sealed virtual void Execute();
    public sealed virtual void Undo();
}
internal class Microsoft.Toolkit.Uwp.UI.Controls.InfiniteCanvasUpdateTextFontSizeCommand : object {
    private float _oldValue;
    private float _newValue;
    private TextDrawable _drawable;
    public InfiniteCanvasUpdateTextFontSizeCommand(TextDrawable drawable, float oldValue, float newValue);
    public sealed virtual void Execute();
    public sealed virtual void Undo();
}
internal class Microsoft.Toolkit.Uwp.UI.Controls.InfiniteCanvasUpdateTextStyleCommand : object {
    private bool _oldValue;
    private bool _newValue;
    private TextDrawable _drawable;
    public InfiniteCanvasUpdateTextStyleCommand(TextDrawable drawable, bool oldValue, bool newValue);
    public sealed virtual void Execute();
    public sealed virtual void Undo();
}
internal class Microsoft.Toolkit.Uwp.UI.Controls.InfiniteCanvasUpdateTextWeightCommand : object {
    private bool _oldValue;
    private bool _newValue;
    private TextDrawable _drawable;
    public InfiniteCanvasUpdateTextWeightCommand(TextDrawable drawable, bool oldValue, bool newValue);
    public sealed virtual void Execute();
    public sealed virtual void Undo();
}
public class Microsoft.Toolkit.Uwp.UI.Controls.InfiniteCanvasVirtualDrawingSurface : Panel {
    private Stack`1<IInfiniteCanvasCommand> _undoCommands;
    private Stack`1<IInfiniteCanvasCommand> _redoCommands;
    [CompilerGeneratedAttribute]
private EventHandler CommandExecuted;
    private Compositor _compositor;
    private CanvasDevice _win2DDevice;
    private CompositionGraphicsDevice _comositionGraphicsDevice;
    private SpriteVisual _myDrawingVisual;
    private CompositionVirtualDrawingSurface _drawingSurface;
    private CompositionSurfaceBrush _surfaceBrush;
    private double _screenScale;
    private static float BaseCanvasDPI;
    private List`1<IDrawable> _visibleList;
    private List`1<IDrawable> _drawableList;
    private static int DrawableNullIndex;
    private int _selectedTextDrawableIndex;
    [CompilerGeneratedAttribute]
internal void add_CommandExecuted(EventHandler value);
    [CompilerGeneratedAttribute]
internal void remove_CommandExecuted(EventHandler value);
    internal void Undo(Rect viewPort, float zoomFactor);
    internal void Redo(Rect viewPort, float zoomFactor);
    internal void ExecuteUpdateTextBoxText(string newText);
    internal void ExecuteUpdateTextBoxColor(Color newColor);
    internal void ExecuteUpdateTextBoxStyle(bool newValue);
    internal void ExecuteUpdateTextBoxWeight(bool newValue);
    internal void ExecuteUpdateTextBoxFontSize(float newValue);
    internal void ExecuteCreateTextBox(double x, double y, double width, double height, float textFontSize, string text, Color color, bool isBold, bool isItalic);
    internal void ExecuteRemoveTextBox();
    internal void ExecuteCreateInk(IReadOnlyList`1<InkStroke> beginDry);
    internal void ExecuteEraseInk(IDrawable drawable);
    internal void ExecuteClearAll();
    private void ExecuteCommand(IInfiniteCanvasCommand command);
    private void TheSurface_SizeChanged(object sender, SizeChangedEventArgs e);
    internal void InitializeComposition();
    internal void ConfigureSpriteVisual(double width, double height, float zoomFactor);
    internal void SetScale(float zoomFactor);
    internal List`1<InkStroke> ExportInkStrokes();
    internal void Erase(Point point, Rect viewPort, float zoomFactor);
    internal void ReDraw(Rect viewPort, float zoom);
    private Rect ScaleRect(Rect rect, double scale);
    internal CanvasRenderTarget ExportMaxOffScreenDrawings();
    internal void ClearAll(Rect viewPort);
    internal string GetSerializedList();
    private static JsonSerializerOptions GetJsonSerializerOptions();
    internal static List`1<IDrawable> LoadJson(string json);
    internal void RenderFromJsonAndDraw(Rect viewPort, string json, float zoom);
    private Rect GetDrawingBoundaries(Rect viewPort);
    private Rect GetMaxDrawingsBoundaries();
    private CanvasRenderTarget DrawOffScreen(Rect toDraw, List`1<IDrawable> visibleList);
    internal void UpdateSelectedTextDrawableIfSelected(Point point, Rect viewPort);
    internal TextDrawable GetSelectedTextDrawable();
    internal void ResetSelectedTextDrawable();
    internal void UpdateSelectedTextDrawable();
    internal List`1<string> ExportText();
}
internal class Microsoft.Toolkit.Uwp.UI.Controls.InkCanvasExportModel : object {
    [CompilerGeneratedAttribute]
private List`1<IDrawable> <DrawableList>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Version>k__BackingField;
    public List`1<IDrawable> DrawableList { get; public set; }
    public int Version { get; public set; }
    [CompilerGeneratedAttribute]
public List`1<IDrawable> get_DrawableList();
    [CompilerGeneratedAttribute]
public void set_DrawableList(List`1<IDrawable> value);
    [CompilerGeneratedAttribute]
public int get_Version();
    [CompilerGeneratedAttribute]
public void set_Version(int value);
}
internal class Microsoft.Toolkit.Uwp.UI.Controls.InkDrawable : object {
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<InkStroke> <Strokes>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<SerializableStroke> <SerializableStrokeList>k__BackingField;
    [CompilerGeneratedAttribute]
private Rect <Bounds>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsActive>k__BackingField;
    internal static InkStrokeBuilder StrokeBuilder;
    [JsonIgnoreAttribute]
public IReadOnlyList`1<InkStroke> Strokes { get; public set; }
    [JsonPropertyNameAttribute("$type")]
public string Type { get; }
    public List`1<SerializableStroke> SerializableStrokeList { get; public set; }
    public Rect Bounds { get; public set; }
    public bool IsActive { get; public set; }
    public InkDrawable(IReadOnlyList`1<InkStroke> strokes);
    private static InkDrawable();
    [CompilerGeneratedAttribute]
public IReadOnlyList`1<InkStroke> get_Strokes();
    [CompilerGeneratedAttribute]
public void set_Strokes(IReadOnlyList`1<InkStroke> value);
    public string get_Type();
    [CompilerGeneratedAttribute]
public List`1<SerializableStroke> get_SerializableStrokeList();
    [CompilerGeneratedAttribute]
public void set_SerializableStrokeList(List`1<SerializableStroke> value);
    [CompilerGeneratedAttribute]
public sealed virtual Rect get_Bounds();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Bounds(Rect value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_IsActive();
    [CompilerGeneratedAttribute]
public sealed virtual void set_IsActive(bool value);
    public sealed virtual bool IsVisible(Rect viewPort);
    public sealed virtual void Draw(CanvasDrawingSession drawingSession, Rect sessionBounds);
    private static InkPoint MapPointToToSessionBounds(InkPoint point, Rect sessionBounds);
    public sealed virtual void WriteJson(Utf8JsonWriter writer);
    public sealed virtual void OnDeserialized();
    public sealed virtual void ReadProperty(string propertyName, Utf8JsonReader& reader);
}
internal class Microsoft.Toolkit.Uwp.UI.Controls.Matrix3x2Converter : JsonConverter`1<Matrix3x2> {
    public virtual Matrix3x2 Read(Utf8JsonReader& reader, Type typeToConvert, JsonSerializerOptions options);
    public virtual void Write(Utf8JsonWriter writer, Matrix3x2 value, JsonSerializerOptions options);
}
internal class Microsoft.Toolkit.Uwp.UI.Controls.Microsoft_Toolkit_Uwp_UI_Controls_Media_XamlTypeInfo.Activator : MulticastDelegate {
    public Activator(object object, IntPtr method);
    public virtual object Invoke();
    public virtual IAsyncResult BeginInvoke(AsyncCallback callback, object object);
    public virtual object EndInvoke(IAsyncResult result);
}
internal class Microsoft.Toolkit.Uwp.UI.Controls.Microsoft_Toolkit_Uwp_UI_Controls_Media_XamlTypeInfo.AddToCollection : MulticastDelegate {
    public AddToCollection(object object, IntPtr method);
    public virtual void Invoke(object instance, object item);
    public virtual IAsyncResult BeginInvoke(object instance, object item, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
internal class Microsoft.Toolkit.Uwp.UI.Controls.Microsoft_Toolkit_Uwp_UI_Controls_Media_XamlTypeInfo.AddToDictionary : MulticastDelegate {
    public AddToDictionary(object object, IntPtr method);
    public virtual void Invoke(object instance, object key, object item);
    public virtual IAsyncResult BeginInvoke(object instance, object key, object item, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
internal class Microsoft.Toolkit.Uwp.UI.Controls.Microsoft_Toolkit_Uwp_UI_Controls_Media_XamlTypeInfo.BoxInstanceMethod : MulticastDelegate {
    public BoxInstanceMethod(object object, IntPtr method);
    public virtual object Invoke(object instance);
    public virtual IAsyncResult BeginInvoke(object instance, AsyncCallback callback, object object);
    public virtual object EndInvoke(IAsyncResult result);
}
internal class Microsoft.Toolkit.Uwp.UI.Controls.Microsoft_Toolkit_Uwp_UI_Controls_Media_XamlTypeInfo.CreateFromStringMethod : MulticastDelegate {
    public CreateFromStringMethod(object object, IntPtr method);
    public virtual object Invoke(string args);
    public virtual IAsyncResult BeginInvoke(string args, AsyncCallback callback, object object);
    public virtual object EndInvoke(IAsyncResult result);
}
internal class Microsoft.Toolkit.Uwp.UI.Controls.Microsoft_Toolkit_Uwp_UI_Controls_Media_XamlTypeInfo.Getter : MulticastDelegate {
    public Getter(object object, IntPtr method);
    public virtual object Invoke(object instance);
    public virtual IAsyncResult BeginInvoke(object instance, AsyncCallback callback, object object);
    public virtual object EndInvoke(IAsyncResult result);
}
internal class Microsoft.Toolkit.Uwp.UI.Controls.Microsoft_Toolkit_Uwp_UI_Controls_Media_XamlTypeInfo.Setter : MulticastDelegate {
    public Setter(object object, IntPtr method);
    public virtual void Invoke(object instance, object value);
    public virtual IAsyncResult BeginInvoke(object instance, object value, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
[GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks", " 10.0.19041.685")]
[DebuggerNonUserCodeAttribute]
internal class Microsoft.Toolkit.Uwp.UI.Controls.Microsoft_Toolkit_Uwp_UI_Controls_Media_XamlTypeInfo.XamlMember : object {
    private XamlTypeInfoProvider _provider;
    private string _name;
    private bool _isAttachable;
    private bool _isDependencyProperty;
    private bool _isReadOnly;
    private string _typeName;
    private string _targetTypeName;
    [CompilerGeneratedAttribute]
private Getter <Getter>k__BackingField;
    [CompilerGeneratedAttribute]
private Setter <Setter>k__BackingField;
    public string Name { get; }
    public IXamlType Type { get; }
    public IXamlType TargetType { get; }
    public bool IsAttachable { get; }
    public bool IsDependencyProperty { get; }
    public bool IsReadOnly { get; }
    public Getter Getter { get; public set; }
    public Setter Setter { get; public set; }
    public XamlMember(XamlTypeInfoProvider provider, string name, string typeName);
    public sealed virtual string get_Name();
    public sealed virtual IXamlType get_Type();
    public void SetTargetTypeName(string targetTypeName);
    public sealed virtual IXamlType get_TargetType();
    public void SetIsAttachable();
    public sealed virtual bool get_IsAttachable();
    public void SetIsDependencyProperty();
    public sealed virtual bool get_IsDependencyProperty();
    public void SetIsReadOnly();
    public sealed virtual bool get_IsReadOnly();
    [CompilerGeneratedAttribute]
public Getter get_Getter();
    [CompilerGeneratedAttribute]
public void set_Getter(Getter value);
    public sealed virtual object GetValue(object instance);
    [CompilerGeneratedAttribute]
public Setter get_Setter();
    [CompilerGeneratedAttribute]
public void set_Setter(Setter value);
    public sealed virtual void SetValue(object instance, object value);
}
[GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks", " 10.0.19041.685")]
[DebuggerNonUserCodeAttribute]
public class Microsoft.Toolkit.Uwp.UI.Controls.Microsoft_Toolkit_Uwp_UI_Controls_Media_XamlTypeInfo.XamlMetaDataProvider : object {
    private XamlTypeInfoProvider _provider;
    private XamlTypeInfoProvider Provider { get; }
    private XamlTypeInfoProvider get_Provider();
    public sealed virtual IXamlType GetXamlType(Type type);
    public sealed virtual IXamlType GetXamlType(string fullName);
    public sealed virtual XmlnsDefinition[] GetXmlnsDefinitions();
}
[GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks", " 10.0.19041.685")]
[DebuggerNonUserCodeAttribute]
internal class Microsoft.Toolkit.Uwp.UI.Controls.Microsoft_Toolkit_Uwp_UI_Controls_Media_XamlTypeInfo.XamlSystemBaseType : object {
    private string _fullName;
    private Type _underlyingType;
    public string FullName { get; }
    public Type UnderlyingType { get; }
    public IXamlType BaseType { get; }
    public IXamlMember ContentProperty { get; }
    public bool IsArray { get; }
    public bool IsCollection { get; }
    public bool IsConstructible { get; }
    public bool IsDictionary { get; }
    public bool IsMarkupExtension { get; }
    public bool IsBindable { get; }
    public bool IsReturnTypeStub { get; }
    public bool IsLocalType { get; }
    public IXamlType ItemType { get; }
    public IXamlType KeyType { get; }
    public XamlSystemBaseType(string fullName, Type underlyingType);
    public sealed virtual string get_FullName();
    public sealed virtual Type get_UnderlyingType();
    public virtual IXamlType get_BaseType();
    public virtual IXamlMember get_ContentProperty();
    public virtual IXamlMember GetMember(string name);
    public virtual bool get_IsArray();
    public virtual bool get_IsCollection();
    public virtual bool get_IsConstructible();
    public virtual bool get_IsDictionary();
    public virtual bool get_IsMarkupExtension();
    public virtual bool get_IsBindable();
    public virtual bool get_IsReturnTypeStub();
    public virtual bool get_IsLocalType();
    public virtual IXamlType get_ItemType();
    public virtual IXamlType get_KeyType();
    public virtual object ActivateInstance();
    public virtual void AddToMap(object instance, object key, object item);
    public virtual void AddToVector(object instance, object item);
    public virtual void RunInitializer();
    public virtual object CreateFromString(string input);
}
[GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks", " 10.0.19041.685")]
[DebuggerNonUserCodeAttribute]
internal class Microsoft.Toolkit.Uwp.UI.Controls.Microsoft_Toolkit_Uwp_UI_Controls_Media_XamlTypeInfo.XamlTypeInfoProvider : object {
    private Dictionary`2<string, IXamlType> _xamlTypeCacheByName;
    private Dictionary`2<Type, IXamlType> _xamlTypeCacheByType;
    private Dictionary`2<string, IXamlMember> _xamlMembers;
    private String[] _typeNameTable;
    private Type[] _typeTable;
    private List`1<IXamlMetadataProvider> _otherProviders;
    private List`1<IXamlMetadataProvider> OtherProviders { get; }
    public IXamlType GetXamlTypeByType(Type type);
    public IXamlType GetXamlTypeByName(string typeName);
    public IXamlMember GetMemberByLongName(string longMemberName);
    private void InitTypeTables();
    private int LookupTypeIndexByName(string typeName);
    private int LookupTypeIndexByType(Type type);
    private object Activate_0_Eyedropper();
    private object Activate_7_EyedropperToolButton();
    private object Activate_13_ImageCropper();
    private object Activate_21_ImageCropperThumb();
    private object Activate_27_InfiniteCanvas();
    private object Activate_28_InfiniteCanvasTextBox();
    private object Activate_29_InfiniteCanvasVirtualDrawingSurface();
    private object Activate_32_TreeViewNode();
    private void VectorAdd_33_IList(object instance, object item);
    private IXamlType CreateXamlType(int typeIndex);
    private List`1<IXamlMetadataProvider> get_OtherProviders();
    private IXamlType CheckOtherMetadataProvidersForName(string typeName);
    private IXamlType CheckOtherMetadataProvidersForType(Type type);
    private object get_0_Eyedropper_Color(object instance);
    private object get_1_Eyedropper_Preview(object instance);
    private object get_2_Eyedropper_WorkArea(object instance);
    private void set_2_Eyedropper_WorkArea(object instance, object Value);
    private object get_3_EyedropperToolButton_Color(object instance);
    private object get_4_EyedropperToolButton_EyedropperEnabled(object instance);
    private void set_4_EyedropperToolButton_EyedropperEnabled(object instance, object Value);
    private object get_5_EyedropperToolButton_EyedropperStyle(object instance);
    private void set_5_EyedropperToolButton_EyedropperStyle(object instance, object Value);
    private object get_6_EyedropperToolButton_TargetElement(object instance);
    private void set_6_EyedropperToolButton_TargetElement(object instance, object Value);
    private object get_7_ImageCropper_Mask(object instance);
    private void set_7_ImageCropper_Mask(object instance, object Value);
    private object get_8_ImageCropper_MinCroppedPixelLength(object instance);
    private void set_8_ImageCropper_MinCroppedPixelLength(object instance, object Value);
    private object get_9_ImageCropper_MinSelectedLength(object instance);
    private void set_9_ImageCropper_MinSelectedLength(object instance, object Value);
    private object get_10_ImageCropper_CroppedRegion(object instance);
    private object get_11_ImageCropper_Source(object instance);
    private void set_11_ImageCropper_Source(object instance, object Value);
    private object get_12_ImageCropper_AspectRatio(object instance);
    private void set_12_ImageCropper_AspectRatio(object instance, object Value);
    private object get_13_ImageCropper_CropShape(object instance);
    private void set_13_ImageCropper_CropShape(object instance, object Value);
    private object get_14_ImageCropper_PrimaryThumbStyle(object instance);
    private void set_14_ImageCropper_PrimaryThumbStyle(object instance, object Value);
    private object get_15_ImageCropper_SecondaryThumbStyle(object instance);
    private void set_15_ImageCropper_SecondaryThumbStyle(object instance, object Value);
    private object get_16_ImageCropper_ThumbPlacement(object instance);
    private void set_16_ImageCropper_ThumbPlacement(object instance, object Value);
    private object get_17_ImageCropperThumb_X(object instance);
    private void set_17_ImageCropperThumb_X(object instance, object Value);
    private object get_18_ImageCropperThumb_Y(object instance);
    private void set_18_ImageCropperThumb_Y(object instance, object Value);
    private object get_19_FrameworkElementExtensions_Cursor(object instance);
    private void set_19_FrameworkElementExtensions_Cursor(object instance, object Value);
    private object get_20_FrameworkElementExtensions_EnableActualSizeBinding(object instance);
    private void set_20_FrameworkElementExtensions_EnableActualSizeBinding(object instance, object Value);
    private object get_21_FrameworkElementExtensions_ActualHeight(object instance);
    private void set_21_FrameworkElementExtensions_ActualHeight(object instance, object Value);
    private object get_22_FrameworkElementExtensions_ActualWidth(object instance);
    private void set_22_FrameworkElementExtensions_ActualWidth(object instance, object Value);
    private object get_23_FrameworkElementExtensions_Ancestor(object instance);
    private void set_23_FrameworkElementExtensions_Ancestor(object instance, object Value);
    private object get_24_FrameworkElementExtensions_AncestorType(object instance);
    private void set_24_FrameworkElementExtensions_AncestorType(object instance, object Value);
    private object get_25_InfiniteCanvas_CanvasWidth(object instance);
    private void set_25_InfiniteCanvas_CanvasWidth(object instance, object Value);
    private object get_26_InfiniteCanvas_CanvasHeight(object instance);
    private void set_26_InfiniteCanvas_CanvasHeight(object instance, object Value);
    private object get_27_InfiniteCanvas_IsToolbarVisible(object instance);
    private void set_27_InfiniteCanvas_IsToolbarVisible(object instance, object Value);
    private object get_28_InfiniteCanvas_MaxZoomFactor(object instance);
    private void set_28_InfiniteCanvas_MaxZoomFactor(object instance, object Value);
    private object get_29_InfiniteCanvas_MinZoomFactor(object instance);
    private void set_29_InfiniteCanvas_MinZoomFactor(object instance, object Value);
    private object get_30_IconSource_Foreground(object instance);
    private void set_30_IconSource_Foreground(object instance, object Value);
    private object get_31_TreeViewNode_IsExpanded(object instance);
    private void set_31_TreeViewNode_IsExpanded(object instance, object Value);
    private object get_32_TreeViewNode_HasUnrealizedChildren(object instance);
    private void set_32_TreeViewNode_HasUnrealizedChildren(object instance, object Value);
    private object get_33_TreeViewNode_Content(object instance);
    private void set_33_TreeViewNode_Content(object instance, object Value);
    private object get_34_TreeViewNode_Children(object instance);
    private object get_35_TreeViewNode_Depth(object instance);
    private object get_36_TreeViewNode_HasChildren(object instance);
    private object get_37_TreeViewNode_Parent(object instance);
    private IXamlMember CreateXamlMember(string longMemberName);
}
[GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks", " 10.0.19041.685")]
[DebuggerNonUserCodeAttribute]
internal class Microsoft.Toolkit.Uwp.UI.Controls.Microsoft_Toolkit_Uwp_UI_Controls_Media_XamlTypeInfo.XamlUserType : XamlSystemBaseType {
    private XamlTypeInfoProvider _provider;
    private IXamlType _baseType;
    private bool _isArray;
    private bool _isMarkupExtension;
    private bool _isBindable;
    private bool _isReturnTypeStub;
    private bool _isLocalType;
    private IXamlType _boxedType;
    private string _contentPropertyName;
    private string _itemTypeName;
    private string _keyTypeName;
    private Dictionary`2<string, string> _memberNames;
    private Dictionary`2<string, object> _enumValues;
    [CompilerGeneratedAttribute]
private Activator <Activator>k__BackingField;
    [CompilerGeneratedAttribute]
private AddToCollection <CollectionAdd>k__BackingField;
    [CompilerGeneratedAttribute]
private AddToDictionary <DictionaryAdd>k__BackingField;
    [CompilerGeneratedAttribute]
private CreateFromStringMethod <CreateFromStringMethod>k__BackingField;
    [CompilerGeneratedAttribute]
private BoxInstanceMethod <BoxInstance>k__BackingField;
    public IXamlType BaseType { get; }
    public bool IsArray { get; }
    public bool IsCollection { get; }
    public bool IsConstructible { get; }
    public bool IsDictionary { get; }
    public bool IsMarkupExtension { get; }
    public bool IsBindable { get; }
    public bool IsReturnTypeStub { get; }
    public bool IsLocalType { get; }
    public IXamlType BoxedType { get; }
    public IXamlMember ContentProperty { get; }
    public IXamlType ItemType { get; }
    public IXamlType KeyType { get; }
    public Activator Activator { get; public set; }
    public AddToCollection CollectionAdd { get; public set; }
    public AddToDictionary DictionaryAdd { get; public set; }
    public CreateFromStringMethod CreateFromStringMethod { get; public set; }
    public BoxInstanceMethod BoxInstance { get; public set; }
    public XamlUserType(XamlTypeInfoProvider provider, string fullName, Type fullType, IXamlType baseType);
    public virtual IXamlType get_BaseType();
    public virtual bool get_IsArray();
    public virtual bool get_IsCollection();
    public virtual bool get_IsConstructible();
    public virtual bool get_IsDictionary();
    public virtual bool get_IsMarkupExtension();
    public virtual bool get_IsBindable();
    public virtual bool get_IsReturnTypeStub();
    public virtual bool get_IsLocalType();
    public sealed virtual IXamlType get_BoxedType();
    public virtual IXamlMember get_ContentProperty();
    public virtual IXamlType get_ItemType();
    public virtual IXamlType get_KeyType();
    public virtual IXamlMember GetMember(string name);
    public virtual object ActivateInstance();
    public virtual void AddToMap(object instance, object key, object item);
    public virtual void AddToVector(object instance, object item);
    public virtual void RunInitializer();
    public virtual object CreateFromString(string input);
    [CompilerGeneratedAttribute]
public Activator get_Activator();
    [CompilerGeneratedAttribute]
public void set_Activator(Activator value);
    [CompilerGeneratedAttribute]
public AddToCollection get_CollectionAdd();
    [CompilerGeneratedAttribute]
public void set_CollectionAdd(AddToCollection value);
    [CompilerGeneratedAttribute]
public AddToDictionary get_DictionaryAdd();
    [CompilerGeneratedAttribute]
public void set_DictionaryAdd(AddToDictionary value);
    [CompilerGeneratedAttribute]
public CreateFromStringMethod get_CreateFromStringMethod();
    [CompilerGeneratedAttribute]
public void set_CreateFromStringMethod(CreateFromStringMethod value);
    [CompilerGeneratedAttribute]
public BoxInstanceMethod get_BoxInstance();
    [CompilerGeneratedAttribute]
public void set_BoxInstance(BoxInstanceMethod value);
    public void SetContentPropertyName(string contentPropertyName);
    public void SetIsArray();
    public void SetIsMarkupExtension();
    public void SetIsBindable();
    public void SetIsReturnTypeStub();
    public void SetIsLocalType();
    public void SetItemTypeName(string itemTypeName);
    public void SetKeyTypeName(string keyTypeName);
    public void SetBoxedType(IXamlType boxedType);
    public object BoxType(object instance);
    public void AddMemberName(string shortName);
    public void AddEnumValue(string name, object value);
}
internal class Microsoft.Toolkit.Uwp.UI.Controls.SerializablePoint : object {
    [CompilerGeneratedAttribute]
private Point <Position>k__BackingField;
    [CompilerGeneratedAttribute]
private float <Pressure>k__BackingField;
    [CompilerGeneratedAttribute]
private float <TiltX>k__BackingField;
    [CompilerGeneratedAttribute]
private float <TiltY>k__BackingField;
    [CompilerGeneratedAttribute]
private ulong <Timestamp>k__BackingField;
    public Point Position { get; public set; }
    public float Pressure { get; public set; }
    public float TiltX { get; public set; }
    public float TiltY { get; public set; }
    public ulong Timestamp { get; public set; }
    [CompilerGeneratedAttribute]
public Point get_Position();
    [CompilerGeneratedAttribute]
public void set_Position(Point value);
    [CompilerGeneratedAttribute]
public float get_Pressure();
    [CompilerGeneratedAttribute]
public void set_Pressure(float value);
    [CompilerGeneratedAttribute]
public float get_TiltX();
    [CompilerGeneratedAttribute]
public void set_TiltX(float value);
    [CompilerGeneratedAttribute]
public float get_TiltY();
    [CompilerGeneratedAttribute]
public void set_TiltY(float value);
    [CompilerGeneratedAttribute]
public ulong get_Timestamp();
    [CompilerGeneratedAttribute]
public void set_Timestamp(ulong value);
}
internal class Microsoft.Toolkit.Uwp.UI.Controls.SerializableStroke : object {
    [CompilerGeneratedAttribute]
private List`1<InkPoint> <FinalPointList>k__BackingField;
    [CompilerGeneratedAttribute]
private InkDrawingAttributes <DrawingAttributesIgnored>k__BackingField;
    [CompilerGeneratedAttribute]
private CustomInkDrawingAttribute <DrawingAttributes>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<SerializablePoint> <SerializableFinalPointList>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<short> <SerializableDrawingAttributesKind>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<double> <SerializableDrawingAttributesPencilProperties>k__BackingField;
    [CompilerGeneratedAttribute]
private Matrix3x2 <PointTransform>k__BackingField;
    [JsonIgnoreAttribute]
public List`1<InkPoint> FinalPointList { get; public set; }
    [JsonIgnoreAttribute]
public InkDrawingAttributes DrawingAttributesIgnored { get; public set; }
    public CustomInkDrawingAttribute DrawingAttributes { get; public set; }
    public List`1<SerializablePoint> SerializableFinalPointList { get; public set; }
    public Nullable`1<short> SerializableDrawingAttributesKind { get; public set; }
    public Nullable`1<double> SerializableDrawingAttributesPencilProperties { get; public set; }
    public Matrix3x2 PointTransform { get; public set; }
    [CompilerGeneratedAttribute]
public List`1<InkPoint> get_FinalPointList();
    [CompilerGeneratedAttribute]
public void set_FinalPointList(List`1<InkPoint> value);
    [CompilerGeneratedAttribute]
public InkDrawingAttributes get_DrawingAttributesIgnored();
    [CompilerGeneratedAttribute]
public void set_DrawingAttributesIgnored(InkDrawingAttributes value);
    [CompilerGeneratedAttribute]
public CustomInkDrawingAttribute get_DrawingAttributes();
    [CompilerGeneratedAttribute]
public void set_DrawingAttributes(CustomInkDrawingAttribute value);
    [CompilerGeneratedAttribute]
public List`1<SerializablePoint> get_SerializableFinalPointList();
    [CompilerGeneratedAttribute]
public void set_SerializableFinalPointList(List`1<SerializablePoint> value);
    [CompilerGeneratedAttribute]
public Nullable`1<short> get_SerializableDrawingAttributesKind();
    [CompilerGeneratedAttribute]
public void set_SerializableDrawingAttributesKind(Nullable`1<short> value);
    [CompilerGeneratedAttribute]
public Nullable`1<double> get_SerializableDrawingAttributesPencilProperties();
    [CompilerGeneratedAttribute]
public void set_SerializableDrawingAttributesPencilProperties(Nullable`1<double> value);
    [CompilerGeneratedAttribute]
public Matrix3x2 get_PointTransform();
    [CompilerGeneratedAttribute]
public void set_PointTransform(Matrix3x2 value);
    internal void Write(Utf8JsonWriter writer, JsonSerializerOptions options);
    internal void OnDeserialized();
}
internal class Microsoft.Toolkit.Uwp.UI.Controls.SerializableStrokeConverter : JsonConverter`1<SerializableStroke> {
    public virtual SerializableStroke Read(Utf8JsonReader& reader, Type typeToConvert, JsonSerializerOptions options);
    public virtual void Write(Utf8JsonWriter writer, SerializableStroke value, JsonSerializerOptions options);
}
internal class Microsoft.Toolkit.Uwp.UI.Controls.TextDrawable : object {
    [CompilerGeneratedAttribute]
private string <Text>k__BackingField;
    [CompilerGeneratedAttribute]
private Rect <Bounds>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsActive>k__BackingField;
    [CompilerGeneratedAttribute]
private float <FontSize>k__BackingField;
    [CompilerGeneratedAttribute]
private Color <TextColor>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsBold>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsItalic>k__BackingField;
    [JsonPropertyNameAttribute("$type")]
public string Type { get; }
    public string Text { get; public set; }
    public Rect Bounds { get; public set; }
    public bool IsActive { get; public set; }
    public float FontSize { get; public set; }
    public Color TextColor { get; public set; }
    public bool IsBold { get; public set; }
    public bool IsItalic { get; public set; }
    public float HorizontalMarginBasedOnFont { get; }
    public TextDrawable(double left, double top, double width, double height, float fontSize, string text, Color textColor, bool isBold, bool isItalic);
    public string get_Type();
    [CompilerGeneratedAttribute]
public string get_Text();
    [CompilerGeneratedAttribute]
public void set_Text(string value);
    [CompilerGeneratedAttribute]
public sealed virtual Rect get_Bounds();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Bounds(Rect value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_IsActive();
    [CompilerGeneratedAttribute]
public sealed virtual void set_IsActive(bool value);
    [CompilerGeneratedAttribute]
public float get_FontSize();
    [CompilerGeneratedAttribute]
public void set_FontSize(float value);
    [CompilerGeneratedAttribute]
public Color get_TextColor();
    [CompilerGeneratedAttribute]
public void set_TextColor(Color value);
    [CompilerGeneratedAttribute]
public bool get_IsBold();
    [CompilerGeneratedAttribute]
public void set_IsBold(bool value);
    [CompilerGeneratedAttribute]
public bool get_IsItalic();
    [CompilerGeneratedAttribute]
public void set_IsItalic(bool value);
    public sealed virtual bool IsVisible(Rect viewPort);
    public sealed virtual void Draw(CanvasDrawingSession drawingSession, Rect sessionBounds);
    public void UpdateBounds(double actualWidth, double actualHeight);
    public float get_HorizontalMarginBasedOnFont();
    public sealed virtual void WriteJson(Utf8JsonWriter writer);
    public sealed virtual void OnDeserialized();
    public sealed virtual void ReadProperty(string propertyName, Utf8JsonReader& reader);
}
public enum Microsoft.Toolkit.Uwp.UI.Controls.ThumbPlacement : Enum {
    public int value__;
    public static ThumbPlacement All;
    public static ThumbPlacement Corners;
}
internal enum Microsoft.Toolkit.Uwp.UI.Controls.ThumbPosition : Enum {
    public int value__;
    public static ThumbPosition Top;
    public static ThumbPosition Bottom;
    public static ThumbPosition Left;
    public static ThumbPosition Right;
    public static ThumbPosition UpperLeft;
    public static ThumbPosition UpperRight;
    public static ThumbPosition LowerLeft;
    public static ThumbPosition LowerRight;
}
internal static class ThisAssembly : object {
    internal static string AssemblyVersion;
    internal static string AssemblyFileVersion;
    internal static string AssemblyInformationalVersion;
    internal static string AssemblyName;
    internal static string AssemblyTitle;
    internal static string AssemblyConfiguration;
    internal static string GitCommitId;
    internal static bool IsPublicRelease;
    internal static bool IsPrerelease;
    internal static DateTime GitCommitDate;
    internal static string RootNamespace;
    private static ThisAssembly();
}
