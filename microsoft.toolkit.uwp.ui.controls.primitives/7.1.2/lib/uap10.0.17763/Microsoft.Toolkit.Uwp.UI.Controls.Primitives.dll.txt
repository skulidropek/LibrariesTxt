public class Microsoft.Toolkit.Uwp.UI.Controls.AdaptiveGridView : GridView {
    private bool _isLoaded;
    private ScrollMode _savedVerticalScrollMode;
    private ScrollMode _savedHorizontalScrollMode;
    private ScrollBarVisibility _savedVerticalScrollBarVisibility;
    private ScrollBarVisibility _savedHorizontalScrollBarVisibility;
    private Orientation _savedOrientation;
    private bool _needToRestoreScrollStates;
    private bool _needContainerMarginForLayout;
    public static DependencyProperty ItemClickCommandProperty;
    public static DependencyProperty ItemHeightProperty;
    public static DependencyProperty OneRowModeEnabledProperty;
    private static DependencyProperty ItemWidthProperty;
    public static DependencyProperty DesiredWidthProperty;
    public static DependencyProperty StretchContentForSingleRowProperty;
    public double DesiredWidth { get; public set; }
    public bool StretchContentForSingleRow { get; public set; }
    public ICommand ItemClickCommand { get; public set; }
    public double ItemHeight { get; public set; }
    public bool OneRowModeEnabled { get; public set; }
    public ItemsPanelTemplate ItemsPanel { get; }
    private double ItemWidth { get; private set; }
    private static AdaptiveGridView();
    protected virtual void PrepareContainerForItemOverride(DependencyObject obj, object item);
    protected virtual double CalculateItemWidth(double containerWidth);
    protected virtual void OnApplyTemplate();
    private void ItemsOnVectorChanged(IObservableVector`1<object> sender, IVectorChangedEventArgs event);
    private void OnItemClick(object sender, ItemClickEventArgs e);
    private void OnSizeChanged(object sender, SizeChangedEventArgs e);
    private void OnLoaded(object sender, RoutedEventArgs e);
    private void OnUnloaded(object sender, RoutedEventArgs e);
    private void DetermineOneRowMode();
    private void RecalculateLayout(double containerWidth);
    private static void OnOneRowModeEnabledChanged(DependencyObject d, object newValue);
    private static void DesiredWidthChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    private static void OnStretchContentForSingleRowPropertyChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    public double get_DesiredWidth();
    public void set_DesiredWidth(double value);
    public bool get_StretchContentForSingleRow();
    public void set_StretchContentForSingleRow(bool value);
    public ICommand get_ItemClickCommand();
    public void set_ItemClickCommand(ICommand value);
    public double get_ItemHeight();
    public void set_ItemHeight(double value);
    public bool get_OneRowModeEnabled();
    public void set_OneRowModeEnabled(bool value);
    public ItemsPanelTemplate get_ItemsPanel();
    private double get_ItemWidth();
    private void set_ItemWidth(double value);
    private static int CalculateColumns(double containerWidth, double itemWidth);
}
internal class Microsoft.Toolkit.Uwp.UI.Controls.AdaptiveHeightValueConverter : object {
    private Thickness thickness;
    public Thickness DefaultItemMargin { get; public set; }
    public Thickness get_DefaultItemMargin();
    public void set_DefaultItemMargin(Thickness value);
    public sealed virtual object Convert(object value, Type targetType, object parameter, string language);
    public sealed virtual object ConvertBack(object value, Type targetType, object parameter, string language);
    internal static Thickness GetItemMargin(GridView view, Thickness fallback);
}
[IsReadOnlyAttribute]
[CreateFromStringAttribute]
public class Microsoft.Toolkit.Uwp.UI.Controls.AspectRatio : ValueType {
    [CompilerGeneratedAttribute]
private double <Width>k__BackingField;
    [CompilerGeneratedAttribute]
private double <Height>k__BackingField;
    public double Width { get; }
    public double Height { get; }
    public double Value { get; }
    public AspectRatio(double width, double height);
    public AspectRatio(double ratio);
    [CompilerGeneratedAttribute]
public double get_Width();
    [CompilerGeneratedAttribute]
public double get_Height();
    public double get_Value();
    public static double op_Implicit(AspectRatio aspect);
    public static AspectRatio op_Implicit(double ratio);
    public static AspectRatio op_Implicit(int width);
    public static AspectRatio ConvertToAspectRatio(string rawString);
    public virtual string ToString();
}
[ContentPropertyAttribute]
public class Microsoft.Toolkit.Uwp.UI.Controls.Case : DependencyObject {
    public static DependencyProperty ContentProperty;
    public static DependencyProperty IsDefaultProperty;
    public static DependencyProperty ValueProperty;
    public UIElement Content { get; public set; }
    public bool IsDefault { get; public set; }
    public object Value { get; public set; }
    private static Case();
    public UIElement get_Content();
    public void set_Content(UIElement value);
    public bool get_IsDefault();
    public void set_IsDefault(bool value);
    public object get_Value();
    public void set_Value(object value);
}
public class Microsoft.Toolkit.Uwp.UI.Controls.CaseCollection : DependencyObjectCollection {
}
public class Microsoft.Toolkit.Uwp.UI.Controls.ConstrainedBox : ContentPresenter {
    private static double CalculationTolerance;
    private Size _originalSize;
    private Size _lastMeasuredSize;
    public static DependencyProperty ScaleXProperty;
    public static DependencyProperty ScaleYProperty;
    public static DependencyProperty MultipleXProperty;
    public static DependencyProperty MultipleYProperty;
    public static DependencyProperty AspectRatioProperty;
    private bool _propertyUpdating;
    public double ScaleX { get; public set; }
    public double ScaleY { get; public set; }
    public int MultipleX { get; public set; }
    public int MultipleY { get; public set; }
    public AspectRatio AspectRatio { get; public set; }
    private static ConstrainedBox();
    private bool IsPositiveRealNumber(double value);
    protected virtual Size MeasureOverride(Size availableSize);
    protected virtual Size ArrangeOverride(Size finalSize);
    private void CalculateConstrainedSize(Size& availableSize);
    public double get_ScaleX();
    public void set_ScaleX(double value);
    public double get_ScaleY();
    public void set_ScaleY(double value);
    public int get_MultipleX();
    public void set_MultipleX(int value);
    public int get_MultipleY();
    public void set_MultipleY(int value);
    public AspectRatio get_AspectRatio();
    public void set_AspectRatio(AspectRatio value);
    private static void ConstraintPropertyChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    private void CoerceValues();
}
public enum Microsoft.Toolkit.Uwp.UI.Controls.Dock : Enum {
    public int value__;
    public static Dock Left;
    public static Dock Top;
    public static Dock Right;
    public static Dock Bottom;
}
public class Microsoft.Toolkit.Uwp.UI.Controls.DockPanel : Panel {
    public static DependencyProperty DockProperty;
    public static DependencyProperty LastChildFillProperty;
    public static DependencyProperty PaddingProperty;
    public bool LastChildFill { get; public set; }
    public Thickness Padding { get; public set; }
    private static DockPanel();
    private static void DockChanged(DependencyObject sender, DependencyPropertyChangedEventArgs e);
    private static void LastChildFillChanged(DependencyObject sender, DependencyPropertyChangedEventArgs e);
    private static void OnPaddingChanged(DependencyObject sender, DependencyPropertyChangedEventArgs e);
    protected virtual Size ArrangeOverride(Size finalSize);
    protected virtual Size MeasureOverride(Size availableSize);
    private static double GetPositiveOrZero(double value);
    public static Dock GetDock(FrameworkElement obj);
    public static void SetDock(FrameworkElement obj, Dock value);
    public bool get_LastChildFill();
    public void set_LastChildFill(bool value);
    public Thickness get_Padding();
    public void set_Padding(Thickness value);
}
[DebuggerDisplayAttribute("Count = {Count}, Height = {Height}")]
internal class Microsoft.Toolkit.Uwp.UI.Controls.StaggeredColumnLayout : List`1<StaggeredItem> {
    [CompilerGeneratedAttribute]
private double <Height>k__BackingField;
    public double Height { get; private set; }
    [CompilerGeneratedAttribute]
public double get_Height();
    [CompilerGeneratedAttribute]
private void set_Height(double value);
    public void Add(StaggeredItem item);
    public void Clear();
}
internal class Microsoft.Toolkit.Uwp.UI.Controls.StaggeredItem : object {
    [CompilerGeneratedAttribute]
private double <Top>k__BackingField;
    [CompilerGeneratedAttribute]
private double <Height>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Index>k__BackingField;
    [CompilerGeneratedAttribute]
private UIElement <Element>k__BackingField;
    public double Top { get; internal set; }
    public double Height { get; internal set; }
    public int Index { get; }
    public UIElement Element { get; internal set; }
    public StaggeredItem(int index);
    [CompilerGeneratedAttribute]
public double get_Top();
    [CompilerGeneratedAttribute]
internal void set_Top(double value);
    [CompilerGeneratedAttribute]
public double get_Height();
    [CompilerGeneratedAttribute]
internal void set_Height(double value);
    [CompilerGeneratedAttribute]
public int get_Index();
    [CompilerGeneratedAttribute]
public UIElement get_Element();
    [CompilerGeneratedAttribute]
internal void set_Element(UIElement value);
}
public class Microsoft.Toolkit.Uwp.UI.Controls.StaggeredLayout : VirtualizingLayout {
    public static DependencyProperty DesiredColumnWidthProperty;
    public static DependencyProperty ColumnSpacingProperty;
    public static DependencyProperty RowSpacingProperty;
    public double DesiredColumnWidth { get; public set; }
    public double ColumnSpacing { get; public set; }
    public double RowSpacing { get; public set; }
    private static StaggeredLayout();
    public double get_DesiredColumnWidth();
    public void set_DesiredColumnWidth(double value);
    public double get_ColumnSpacing();
    public void set_ColumnSpacing(double value);
    public double get_RowSpacing();
    public void set_RowSpacing(double value);
    protected virtual void InitializeForContextCore(VirtualizingLayoutContext context);
    protected virtual void UninitializeForContextCore(VirtualizingLayoutContext context);
    protected virtual void OnItemsChangedCore(VirtualizingLayoutContext context, object source, NotifyCollectionChangedEventArgs args);
    protected virtual Size MeasureOverride(VirtualizingLayoutContext context, Size availableSize);
    protected virtual Size ArrangeOverride(VirtualizingLayoutContext context, Size finalSize);
    private static void OnDesiredColumnWidthChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    private static void OnSpacingChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    private static int GetColumnIndex(Double[] columnHeights);
}
internal class Microsoft.Toolkit.Uwp.UI.Controls.StaggeredLayoutState : object {
    private List`1<StaggeredItem> _items;
    private VirtualizingLayoutContext _context;
    private Dictionary`2<int, StaggeredColumnLayout> _columnLayout;
    private double _lastAverageHeight;
    [CompilerGeneratedAttribute]
private double <ColumnWidth>k__BackingField;
    [CompilerGeneratedAttribute]
private double <RowSpacing>k__BackingField;
    public double ColumnWidth { get; internal set; }
    public int NumberOfColumns { get; }
    public double RowSpacing { get; internal set; }
    public StaggeredLayoutState(VirtualizingLayoutContext context);
    [CompilerGeneratedAttribute]
public double get_ColumnWidth();
    [CompilerGeneratedAttribute]
internal void set_ColumnWidth(double value);
    public int get_NumberOfColumns();
    [CompilerGeneratedAttribute]
public double get_RowSpacing();
    [CompilerGeneratedAttribute]
internal void set_RowSpacing(double value);
    internal void AddItemToColumn(StaggeredItem item, int columnIndex);
    internal StaggeredItem GetItemAt(int index);
    internal StaggeredColumnLayout GetColumnLayout(int columnIndex);
    internal void Clear();
    internal void ClearColumns();
    internal double GetHeight();
    internal void RecycleElementAt(int index);
    internal void RemoveFromIndex(int index);
    internal void RemoveRange(int startIndex, int endIndex);
}
public class Microsoft.Toolkit.Uwp.UI.Controls.StaggeredPanel : Panel {
    private double _columnWidth;
    public static DependencyProperty DesiredColumnWidthProperty;
    public static DependencyProperty PaddingProperty;
    public static DependencyProperty ColumnSpacingProperty;
    public static DependencyProperty RowSpacingProperty;
    public double DesiredColumnWidth { get; public set; }
    public Thickness Padding { get; public set; }
    public double ColumnSpacing { get; public set; }
    public double RowSpacing { get; public set; }
    private static StaggeredPanel();
    public double get_DesiredColumnWidth();
    public void set_DesiredColumnWidth(double value);
    public Thickness get_Padding();
    public void set_Padding(Thickness value);
    public double get_ColumnSpacing();
    public void set_ColumnSpacing(double value);
    public double get_RowSpacing();
    public void set_RowSpacing(double value);
    protected virtual Size MeasureOverride(Size availableSize);
    protected virtual Size ArrangeOverride(Size finalSize);
    private static void OnDesiredColumnWidthChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    private static void OnPaddingChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    private void OnHorizontalAlignmentChanged(DependencyObject sender, DependencyProperty dp);
    private int GetColumnIndex(Double[] columnHeights);
}
public enum Microsoft.Toolkit.Uwp.UI.Controls.StretchChild : Enum {
    public int value__;
    public static StretchChild None;
    public static StretchChild Last;
}
[ContentPropertyAttribute]
public class Microsoft.Toolkit.Uwp.UI.Controls.SwitchPresenter : ContentPresenter {
    public static DependencyProperty CurrentCaseProperty;
    public static DependencyProperty SwitchCasesProperty;
    public static DependencyProperty ValueProperty;
    public static DependencyProperty TargetTypeProperty;
    public Case CurrentCase { get; private set; }
    public CaseCollection SwitchCases { get; public set; }
    public object Value { get; public set; }
    public Type TargetType { get; public set; }
    private static SwitchPresenter();
    public Case get_CurrentCase();
    private void set_CurrentCase(Case value);
    public CaseCollection get_SwitchCases();
    public void set_SwitchCases(CaseCollection value);
    public object get_Value();
    public void set_Value(object value);
    public Type get_TargetType();
    public void set_TargetType(Type value);
    private static void OnValuePropertyChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    private static void OnSwitchCasesPropertyChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    private void SwitchPresenter_Loaded(object sender, RoutedEventArgs e);
    protected virtual void OnApplyTemplate();
    private void EvaluateCases();
    private bool CompareValues(object compare, object value);
    internal static object ConvertValue(Type targetType, object value);
    [CompilerGeneratedAttribute]
internal static object <ConvertValue>g__ThrowExceptionForKeyNotFound|23_0();
}
[DefaultMemberAttribute("Item")]
internal class Microsoft.Toolkit.Uwp.UI.Controls.TakenSpotsReferenceHolder : object {
    private BitArray spotsTaken;
    [CompilerGeneratedAttribute]
private int <Height>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Width>k__BackingField;
    public int Height { get; }
    public int Width { get; }
    public bool Item { get; public set; }
    public TakenSpotsReferenceHolder(int rows, int columns);
    [CompilerGeneratedAttribute]
public int get_Height();
    [CompilerGeneratedAttribute]
public int get_Width();
    public bool get_Item(int i, int j);
    public void set_Item(int i, int j, bool value);
    public void Fill(bool value, int row, int column, int width, int height);
    public void Reset();
}
public class Microsoft.Toolkit.Uwp.UI.Controls.UniformGrid : Grid {
    private List`1<UIElement> _overflow;
    private TakenSpotsReferenceHolder _spotref;
    public static DependencyProperty AutoLayoutProperty;
    public static DependencyProperty ColumnsProperty;
    public static DependencyProperty FirstColumnProperty;
    public static DependencyProperty OrientationProperty;
    public static DependencyProperty RowsProperty;
    public int Columns { get; public set; }
    public int FirstColumn { get; public set; }
    public Orientation Orientation { get; public set; }
    public int Rows { get; public set; }
    private static UniformGrid();
    protected virtual Size MeasureOverride(Size availableSize);
    protected virtual Size ArrangeOverride(Size finalSize);
    [IteratorStateMachineAttribute("Microsoft.Toolkit.Uwp.UI.Controls.UniformGrid/<GetFreeSpot>d__4")]
internal static IEnumerable`1<ValueTuple`2<int, int>> GetFreeSpot(TakenSpotsReferenceHolder arrayref, int firstcolumn, bool topdown);
    internal static ValueTuple`2<int, int> GetDimensions(FrameworkElement[] visible, int rows, int cols, int firstColumn);
    internal void SetupRowDefinitions(int rows);
    internal void SetupColumnDefinitions(int columns);
    public static void SetAutoLayout(FrameworkElement element, Nullable`1<bool> value);
    public static Nullable`1<bool> GetAutoLayout(FrameworkElement element);
    internal static void SetAutoLayout(ColumnDefinition element, Nullable`1<bool> value);
    internal static Nullable`1<bool> GetAutoLayout(ColumnDefinition element);
    internal static void SetAutoLayout(RowDefinition element, Nullable`1<bool> value);
    internal static Nullable`1<bool> GetAutoLayout(RowDefinition element);
    private static void OnPropertyChanged(DependencyObject d, object newValue);
    public int get_Columns();
    public void set_Columns(int value);
    public int get_FirstColumn();
    public void set_FirstColumn(int value);
    public Orientation get_Orientation();
    public void set_Orientation(Orientation value);
    public int get_Rows();
    public void set_Rows(int value);
}
internal class Microsoft.Toolkit.Uwp.UI.Controls.UvBounds : ValueType {
    [CompilerGeneratedAttribute]
private double <UMin>k__BackingField;
    [CompilerGeneratedAttribute]
private double <UMax>k__BackingField;
    [CompilerGeneratedAttribute]
private double <VMin>k__BackingField;
    [CompilerGeneratedAttribute]
private double <VMax>k__BackingField;
    public double UMin { get; }
    public double UMax { get; }
    public double VMin { get; }
    public double VMax { get; }
    public UvBounds(Orientation orientation, Rect rect);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public double get_UMin();
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public double get_UMax();
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public double get_VMin();
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public double get_VMax();
}
[DebuggerDisplayAttribute("U = {U} V = {V}")]
internal class Microsoft.Toolkit.Uwp.UI.Controls.UvMeasure : ValueType {
    internal static UvMeasure Zero;
    [CompilerGeneratedAttribute]
private double <U>k__BackingField;
    [CompilerGeneratedAttribute]
private double <V>k__BackingField;
    internal double U { get; internal set; }
    internal double V { get; internal set; }
    public UvMeasure(Orientation orientation, double width, double height);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
internal double get_U();
    [CompilerGeneratedAttribute]
internal void set_U(double value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
internal double get_V();
    [CompilerGeneratedAttribute]
internal void set_V(double value);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
internal class Microsoft.Toolkit.Uwp.UI.Controls.WrapItem : object {
    [CompilerGeneratedAttribute]
private int <Index>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<UvMeasure> <Measure>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<UvMeasure> <Position>k__BackingField;
    [CompilerGeneratedAttribute]
private UIElement <Element>k__BackingField;
    public int Index { get; }
    public Nullable`1<UvMeasure> Measure { get; internal set; }
    public Nullable`1<UvMeasure> Position { get; internal set; }
    public UIElement Element { get; internal set; }
    public WrapItem(int index);
    [CompilerGeneratedAttribute]
public int get_Index();
    [CompilerGeneratedAttribute]
public Nullable`1<UvMeasure> get_Measure();
    [CompilerGeneratedAttribute]
internal void set_Measure(Nullable`1<UvMeasure> value);
    [CompilerGeneratedAttribute]
public Nullable`1<UvMeasure> get_Position();
    [CompilerGeneratedAttribute]
internal void set_Position(Nullable`1<UvMeasure> value);
    [CompilerGeneratedAttribute]
public UIElement get_Element();
    [CompilerGeneratedAttribute]
internal void set_Element(UIElement value);
}
public class Microsoft.Toolkit.Uwp.UI.Controls.WrapLayout : VirtualizingLayout {
    public static DependencyProperty HorizontalSpacingProperty;
    public static DependencyProperty VerticalSpacingProperty;
    public static DependencyProperty OrientationProperty;
    public double HorizontalSpacing { get; public set; }
    public double VerticalSpacing { get; public set; }
    public Orientation Orientation { get; public set; }
    private static WrapLayout();
    public double get_HorizontalSpacing();
    public void set_HorizontalSpacing(double value);
    public double get_VerticalSpacing();
    public void set_VerticalSpacing(double value);
    public Orientation get_Orientation();
    public void set_Orientation(Orientation value);
    private static void LayoutPropertyChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    protected virtual void InitializeForContextCore(VirtualizingLayoutContext context);
    protected virtual void UninitializeForContextCore(VirtualizingLayoutContext context);
    protected virtual void OnItemsChangedCore(VirtualizingLayoutContext context, object source, NotifyCollectionChangedEventArgs args);
    protected virtual Size MeasureOverride(VirtualizingLayoutContext context, Size availableSize);
    protected virtual Size ArrangeOverride(VirtualizingLayoutContext context, Size finalSize);
    [CompilerGeneratedAttribute]
private bool <ArrangeOverride>g__Arrange|17_0(WrapItem item, bool isLast, <>c__DisplayClass17_0& , <>c__DisplayClass17_1& );
}
internal class Microsoft.Toolkit.Uwp.UI.Controls.WrapLayoutState : object {
    private List`1<WrapItem> _items;
    private VirtualizingLayoutContext _context;
    [CompilerGeneratedAttribute]
private Orientation <Orientation>k__BackingField;
    [CompilerGeneratedAttribute]
private UvMeasure <Spacing>k__BackingField;
    [CompilerGeneratedAttribute]
private double <AvailableU>k__BackingField;
    public Orientation Orientation { get; private set; }
    public UvMeasure Spacing { get; internal set; }
    public double AvailableU { get; internal set; }
    public WrapLayoutState(VirtualizingLayoutContext context);
    [CompilerGeneratedAttribute]
public Orientation get_Orientation();
    [CompilerGeneratedAttribute]
private void set_Orientation(Orientation value);
    [CompilerGeneratedAttribute]
public UvMeasure get_Spacing();
    [CompilerGeneratedAttribute]
internal void set_Spacing(UvMeasure value);
    [CompilerGeneratedAttribute]
public double get_AvailableU();
    [CompilerGeneratedAttribute]
internal void set_AvailableU(double value);
    internal WrapItem GetItemAt(int index);
    internal void Clear();
    internal void RemoveFromIndex(int index);
    internal void SetOrientation(Orientation orientation);
    internal void ClearPositions();
    internal double GetHeight();
    internal void RecycleElementAt(int index);
}
public class Microsoft.Toolkit.Uwp.UI.Controls.WrapPanel : Panel {
    public static DependencyProperty HorizontalSpacingProperty;
    public static DependencyProperty VerticalSpacingProperty;
    public static DependencyProperty OrientationProperty;
    public static DependencyProperty PaddingProperty;
    public static DependencyProperty StretchChildProperty;
    private List`1<Row> _rows;
    public double HorizontalSpacing { get; public set; }
    public double VerticalSpacing { get; public set; }
    public Orientation Orientation { get; public set; }
    public Thickness Padding { get; public set; }
    public StretchChild StretchChild { get; public set; }
    private static WrapPanel();
    public double get_HorizontalSpacing();
    public void set_HorizontalSpacing(double value);
    public double get_VerticalSpacing();
    public void set_VerticalSpacing(double value);
    public Orientation get_Orientation();
    public void set_Orientation(Orientation value);
    public Thickness get_Padding();
    public void set_Padding(Thickness value);
    public StretchChild get_StretchChild();
    public void set_StretchChild(StretchChild value);
    private static void LayoutPropertyChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    protected virtual Size MeasureOverride(Size availableSize);
    protected virtual Size ArrangeOverride(Size finalSize);
    private Size UpdateRows(Size availableSize);
    [CompilerGeneratedAttribute]
private void <UpdateRows>g__Arrange|24_0(UIElement child, bool isLast, <>c__DisplayClass24_0& );
}
internal static class ThisAssembly : object {
    internal static string AssemblyVersion;
    internal static string AssemblyFileVersion;
    internal static string AssemblyInformationalVersion;
    internal static string AssemblyName;
    internal static string AssemblyTitle;
    internal static string AssemblyConfiguration;
    internal static string GitCommitId;
    internal static bool IsPublicRelease;
    internal static bool IsPrerelease;
    internal static DateTime GitCommitDate;
    internal static string RootNamespace;
    private static ThisAssembly();
}
