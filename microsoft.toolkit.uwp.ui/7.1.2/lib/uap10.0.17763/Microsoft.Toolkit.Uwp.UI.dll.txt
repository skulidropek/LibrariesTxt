[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
[DefaultMemberAttribute("Item")]
public class Microsoft.Toolkit.Uwp.UI.AdvancedCollectionView : object {
    private List`1<object> _view;
    private ObservableCollection`1<SortDescription> _sortDescriptions;
    private Dictionary`2<string, PropertyInfo> _sortProperties;
    private bool _liveShapingEnabled;
    private HashSet`1<string> _observedFilterProperties;
    private IList _source;
    private Predicate`1<object> _filter;
    private int _deferCounter;
    private WeakEventListener`3<AdvancedCollectionView, object, NotifyCollectionChangedEventArgs> _sourceWeakEventListener;
    [CompilerGeneratedAttribute]
private EventRegistrationTokenTable`1<VectorChangedEventHandler`1<object>> VectorChanged;
    [CompilerGeneratedAttribute]
private int <CurrentPosition>k__BackingField;
    [CompilerGeneratedAttribute]
private EventRegistrationTokenTable`1<EventHandler`1<object>> CurrentChanged;
    [CompilerGeneratedAttribute]
private EventRegistrationTokenTable`1<CurrentChangingEventHandler> CurrentChanging;
    [CompilerGeneratedAttribute]
private PropertyChangedEventHandler PropertyChanged;
    public IList Source { get; public set; }
    public int Count { get; }
    public bool IsReadOnly { get; }
    public object Item { get; public set; }
    public IObservableVector`1<object> CollectionGroups { get; }
    public object CurrentItem { get; public set; }
    public int CurrentPosition { get; private set; }
    public bool HasMoreItems { get; }
    public bool IsCurrentAfterLast { get; }
    public bool IsCurrentBeforeFirst { get; }
    public bool CanFilter { get; }
    public Predicate`1<object> Filter { get; public set; }
    public bool CanSort { get; }
    public IList`1<SortDescription> SortDescriptions { get; }
    public IEnumerable SourceCollection { get; }
    public AdvancedCollectionView(IList source, bool isLiveShaping);
    public IList get_Source();
    public void set_Source(IList value);
    public sealed virtual void Refresh();
    public sealed virtual void RefreshFilter();
    public sealed virtual void RefreshSorting();
    public sealed virtual IEnumerator`1<object> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    public sealed virtual void Add(object item);
    public sealed virtual void Clear();
    public sealed virtual bool Contains(object item);
    public sealed virtual void CopyTo(Object[] array, int arrayIndex);
    public sealed virtual bool Remove(object item);
    public sealed virtual int get_Count();
    public sealed virtual bool get_IsReadOnly();
    public sealed virtual int IndexOf(object item);
    public sealed virtual void Insert(int index, object item);
    public sealed virtual void RemoveAt(int index);
    public sealed virtual object get_Item(int index);
    public sealed virtual void set_Item(int index, object value);
    [CompilerGeneratedAttribute]
public sealed virtual EventRegistrationToken add_VectorChanged(VectorChangedEventHandler`1<object> value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_VectorChanged(EventRegistrationToken value);
    public sealed virtual bool MoveCurrentTo(object item);
    public sealed virtual bool MoveCurrentToPosition(int index);
    public sealed virtual bool MoveCurrentToFirst();
    public sealed virtual bool MoveCurrentToLast();
    public sealed virtual bool MoveCurrentToNext();
    public sealed virtual bool MoveCurrentToPrevious();
    public sealed virtual IAsyncOperation`1<LoadMoreItemsResult> LoadMoreItemsAsync(UInt32 count);
    public sealed virtual IObservableVector`1<object> get_CollectionGroups();
    public sealed virtual object get_CurrentItem();
    public void set_CurrentItem(object value);
    [CompilerGeneratedAttribute]
public sealed virtual int get_CurrentPosition();
    [CompilerGeneratedAttribute]
private void set_CurrentPosition(int value);
    public sealed virtual bool get_HasMoreItems();
    public sealed virtual bool get_IsCurrentAfterLast();
    public sealed virtual bool get_IsCurrentBeforeFirst();
    [CompilerGeneratedAttribute]
public sealed virtual EventRegistrationToken add_CurrentChanged(EventHandler`1<object> value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_CurrentChanged(EventRegistrationToken value);
    [CompilerGeneratedAttribute]
public sealed virtual EventRegistrationToken add_CurrentChanging(CurrentChangingEventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_CurrentChanging(EventRegistrationToken value);
    public sealed virtual bool get_CanFilter();
    public sealed virtual Predicate`1<object> get_Filter();
    public sealed virtual void set_Filter(Predicate`1<object> value);
    public sealed virtual bool get_CanSort();
    public sealed virtual IList`1<SortDescription> get_SortDescriptions();
    public sealed virtual IEnumerable get_SourceCollection();
    private sealed virtual override int System.Collections.Generic.IComparer<System.Object>.Compare(object x, object y);
    [CompilerGeneratedAttribute]
public sealed virtual void add_PropertyChanged(PropertyChangedEventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_PropertyChanged(PropertyChangedEventHandler value);
    protected virtual void OnPropertyChanged(string propertyName);
    public sealed virtual void ObserveFilterProperty(string propertyName);
    public sealed virtual void ClearObservedFilterProperties();
    private void ItemOnPropertyChanged(object item, PropertyChangedEventArgs e);
    private void AttachPropertyChangedHandler(IEnumerable items);
    private void DetachPropertyChangedHandler(IEnumerable items);
    private void HandleSortChanged();
    private void HandleFilterChanged();
    private void HandleSourceChanged();
    private void SourceNcc_CollectionChanged(object sender, NotifyCollectionChangedEventArgs e);
    private bool HandleItemAdded(int newStartingIndex, object newItem, Nullable`1<int> viewIndex);
    private void HandleItemRemoved(int oldStartingIndex, object oldItem);
    private void RemoveFromView(int itemIndex, object item);
    private void SortDescriptions_CollectionChanged(object sender, NotifyCollectionChangedEventArgs e);
    private bool MoveCurrentToIndex(int i);
    public sealed virtual IDisposable DeferRefresh();
    private void OnCurrentChanging(CurrentChangingEventArgs e);
    private void OnCurrentChanged(object e);
    private void OnVectorChanged(IVectorChangedEventArgs e);
}
public static class Microsoft.Toolkit.Uwp.UI.ApplicationViewExtensions : object {
    public static string GetTitle(Page page);
    public static void SetTitle(Page page, string value);
    public static bool GetExtendViewIntoTitleBar(Page page);
    public static void SetExtendViewIntoTitleBar(Page page, bool value);
    public static AppViewBackButtonVisibility GetBackButtonVisibility(Page page);
    public static void SetBackButtonVisibility(Page page, AppViewBackButtonVisibility value);
    private static SystemNavigationManager GetSystemNavigationManager();
    private static CoreApplicationView GetCoreApplicationView();
    private static ApplicationView GetApplicationView();
}
public class Microsoft.Toolkit.Uwp.UI.AttachedDropShadow : AttachedShadowBase {
    private static float MaxBlurRadius;
    private static TypedResourceKey`1<CompositionRoundedRectangleGeometry> RoundedRectangleGeometryResourceKey;
    private static TypedResourceKey`1<CompositionSpriteShape> ShapeResourceKey;
    private static TypedResourceKey`1<ShapeVisual> ShapeVisualResourceKey;
    private static TypedResourceKey`1<CompositionSurfaceBrush> SurfaceBrushResourceKey;
    private static TypedResourceKey`1<CompositionVisualSurface> VisualSurfaceResourceKey;
    public static DependencyProperty IsMaskedProperty;
    public static DependencyProperty CornerRadiusProperty;
    public static DependencyProperty CastToProperty;
    private ContainerVisual _container;
    public bool IsSupported { get; }
    protected internal bool SupportsOnSizeChangedEvent { get; }
    public bool IsMasked { get; public set; }
    public double CornerRadius { get; public set; }
    public FrameworkElement CastTo { get; public set; }
    private static AttachedDropShadow();
    public virtual bool get_IsSupported();
    protected internal virtual bool get_SupportsOnSizeChangedEvent();
    public bool get_IsMasked();
    public void set_IsMasked(bool value);
    public double get_CornerRadius();
    public void set_CornerRadius(double value);
    public FrameworkElement get_CastTo();
    public void set_CastTo(FrameworkElement value);
    private static void OnCastToPropertyChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    private void CastToElement_SizeChanged(object sender, SizeChangedEventArgs e);
    protected internal virtual void OnElementContextUninitialized(AttachedShadowElementContext context);
    protected virtual void SetElementChildVisual(AttachedShadowElementContext context);
    private void Element_LayoutUpdated(object sender, object e);
    private void Element_VisibilityChanged(DependencyObject sender, DependencyProperty dp);
    protected virtual CompositionBrush GetShadowMask(AttachedShadowElementContext context);
    private static void BindSizeAndScale(CompositionObject source, UIElement target);
    private void CustomMaskedElement_Loaded(object sender, RoutedEventArgs e);
    protected internal virtual void OnSizeChanged(AttachedShadowElementContext context, Size newSize, Size previousSize);
    protected virtual void OnPropertyChanged(AttachedShadowElementContext context, DependencyProperty property, object oldValue, object newValue);
}
public abstract class Microsoft.Toolkit.Uwp.UI.AttachedShadowBase : DependencyObject {
    protected static bool SupportsCompositionVisualSurface;
    public static DependencyProperty BlurRadiusProperty;
    public static DependencyProperty ColorProperty;
    public static DependencyProperty OffsetProperty;
    public static DependencyProperty OpacityProperty;
    [CompilerGeneratedAttribute]
private ConditionalWeakTable`2<FrameworkElement, AttachedShadowElementContext> <ShadowElementContextTable>k__BackingField;
    public bool IsSupported { get; }
    private ConditionalWeakTable`2<FrameworkElement, AttachedShadowElementContext> ShadowElementContextTable { get; private set; }
    public double BlurRadius { get; public set; }
    public double Opacity { get; public set; }
    public string Offset { get; public set; }
    public Color Color { get; public set; }
    protected internal bool SupportsOnSizeChangedEvent { get; }
    private static AttachedShadowBase();
    public abstract virtual bool get_IsSupported();
    [CompilerGeneratedAttribute]
private ConditionalWeakTable`2<FrameworkElement, AttachedShadowElementContext> get_ShadowElementContextTable();
    [CompilerGeneratedAttribute]
private void set_ShadowElementContextTable(ConditionalWeakTable`2<FrameworkElement, AttachedShadowElementContext> value);
    public sealed virtual double get_BlurRadius();
    public sealed virtual void set_BlurRadius(double value);
    public sealed virtual double get_Opacity();
    public sealed virtual void set_Opacity(double value);
    public sealed virtual string get_Offset();
    public sealed virtual void set_Offset(string value);
    public sealed virtual Color get_Color();
    public sealed virtual void set_Color(Color value);
    protected internal abstract virtual bool get_SupportsOnSizeChangedEvent();
    protected static void OnDependencyPropertyChanged(object sender, DependencyPropertyChangedEventArgs args);
    internal void ConnectElement(FrameworkElement element);
    internal void DisconnectElement(FrameworkElement element);
    protected internal virtual void OnElementContextInitialized(AttachedShadowElementContext context);
    protected internal virtual void OnElementContextUninitialized(AttachedShadowElementContext context);
    public sealed virtual AttachedShadowElementContext GetElementContext(FrameworkElement element);
    [IteratorStateMachineAttribute("Microsoft.Toolkit.Uwp.UI.AttachedShadowBase/<EnumerateElementContexts>d__31")]
public sealed virtual IEnumerable`1<AttachedShadowElementContext> EnumerateElementContexts();
    protected virtual void SetElementChildVisual(AttachedShadowElementContext context);
    private void CallPropertyChangedForEachElement(DependencyProperty property, object oldValue, object newValue);
    protected virtual CompositionBrush GetShadowMask(AttachedShadowElementContext context);
    protected virtual CompositionClip GetShadowClip(AttachedShadowElementContext context);
    protected void UpdateShadowMask(AttachedShadowElementContext context);
    protected void UpdateShadowClip(AttachedShadowElementContext context);
    protected virtual void OnPropertyChanged(AttachedShadowElementContext context, DependencyProperty property, object oldValue, object newValue);
    protected internal virtual void OnSizeChanged(AttachedShadowElementContext context, Size newSize, Size previousSize);
}
public class Microsoft.Toolkit.Uwp.UI.AttachedShadowElementContext : object {
    private bool _isConnected;
    private Dictionary`2<string, object> _resources;
    [CompilerGeneratedAttribute]
private Nullable`1<long> <VisibilityToken>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsInitialized>k__BackingField;
    [CompilerGeneratedAttribute]
private AttachedShadowBase <Parent>k__BackingField;
    [CompilerGeneratedAttribute]
private FrameworkElement <Element>k__BackingField;
    [CompilerGeneratedAttribute]
private Visual <ElementVisual>k__BackingField;
    [CompilerGeneratedAttribute]
private Compositor <Compositor>k__BackingField;
    [CompilerGeneratedAttribute]
private SpriteVisual <SpriteVisual>k__BackingField;
    [CompilerGeneratedAttribute]
private DropShadow <Shadow>k__BackingField;
    internal Nullable`1<long> VisibilityToken { get; internal set; }
    public bool IsInitialized { get; private set; }
    public AttachedShadowBase Parent { get; private set; }
    public FrameworkElement Element { get; private set; }
    public Visual ElementVisual { get; private set; }
    public Compositor Compositor { get; private set; }
    public SpriteVisual SpriteVisual { get; private set; }
    public DropShadow Shadow { get; private set; }
    [CompilerGeneratedAttribute]
internal Nullable`1<long> get_VisibilityToken();
    [CompilerGeneratedAttribute]
internal void set_VisibilityToken(Nullable`1<long> value);
    [CompilerGeneratedAttribute]
public bool get_IsInitialized();
    [CompilerGeneratedAttribute]
private void set_IsInitialized(bool value);
    [CompilerGeneratedAttribute]
public AttachedShadowBase get_Parent();
    [CompilerGeneratedAttribute]
private void set_Parent(AttachedShadowBase value);
    [CompilerGeneratedAttribute]
public FrameworkElement get_Element();
    [CompilerGeneratedAttribute]
private void set_Element(FrameworkElement value);
    [CompilerGeneratedAttribute]
public Visual get_ElementVisual();
    [CompilerGeneratedAttribute]
private void set_ElementVisual(Visual value);
    [CompilerGeneratedAttribute]
public Compositor get_Compositor();
    [CompilerGeneratedAttribute]
private void set_Compositor(Compositor value);
    [CompilerGeneratedAttribute]
public SpriteVisual get_SpriteVisual();
    [CompilerGeneratedAttribute]
private void set_SpriteVisual(SpriteVisual value);
    [CompilerGeneratedAttribute]
public DropShadow get_Shadow();
    [CompilerGeneratedAttribute]
private void set_Shadow(DropShadow value);
    internal void ConnectToElement(AttachedShadowBase parent, FrameworkElement element);
    internal void DisconnectFromElement();
    public void CreateResources();
    private void Initialize(bool forceIfNotLoaded);
    private void Uninitialize();
    private void OnElementUnloaded(object sender, RoutedEventArgs e);
    private void OnElementLoaded(object sender, RoutedEventArgs e);
    private void OnElementSizeChanged(object sender, SizeChangedEventArgs e);
    public T AddResource(string key, T resource);
    public bool TryGetResource(string key, T& resource);
    public T GetResource(string key);
    public T RemoveResource(string key);
    public T RemoveAndDisposeResource(string key);
    internal T AddResource(TypedResourceKey`1<T> key, T resource);
    internal bool TryGetResource(TypedResourceKey`1<T> key, T& resource);
    internal T GetResource(TypedResourceKey`1<T> key);
    internal T RemoveResource(TypedResourceKey`1<T> key);
    internal T RemoveAndDisposeResource(TypedResourceKey`1<T> key);
    public void ClearAndDisposeResources();
}
[MarkupExtensionReturnTypeAttribute]
public class Microsoft.Toolkit.Uwp.UI.BitmapIconExtension : MarkupExtension {
    [CompilerGeneratedAttribute]
private Uri <Source>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ShowAsMonochrome>k__BackingField;
    public Uri Source { get; public set; }
    public bool ShowAsMonochrome { get; public set; }
    [CompilerGeneratedAttribute]
public Uri get_Source();
    [CompilerGeneratedAttribute]
public void set_Source(Uri value);
    [CompilerGeneratedAttribute]
public bool get_ShowAsMonochrome();
    [CompilerGeneratedAttribute]
public void set_ShowAsMonochrome(bool value);
    protected virtual object ProvideValue();
}
[MarkupExtensionReturnTypeAttribute]
public class Microsoft.Toolkit.Uwp.UI.BitmapIconSourceExtension : MarkupExtension {
    [CompilerGeneratedAttribute]
private Uri <Source>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ShowAsMonochrome>k__BackingField;
    public Uri Source { get; public set; }
    public bool ShowAsMonochrome { get; public set; }
    [CompilerGeneratedAttribute]
public Uri get_Source();
    [CompilerGeneratedAttribute]
public void set_Source(Uri value);
    [CompilerGeneratedAttribute]
public bool get_ShowAsMonochrome();
    [CompilerGeneratedAttribute]
public void set_ShowAsMonochrome(bool value);
    protected virtual object ProvideValue();
}
public abstract class Microsoft.Toolkit.Uwp.UI.CacheBase`1 : object {
    private SemaphoreSlim _cacheFolderSemaphore;
    private StorageFolder _baseFolder;
    private string _cacheFolderName;
    private StorageFolder _cacheFolder;
    private InMemoryStorage`1<T> _inMemoryFileStorage;
    private ConcurrentDictionary`2<string, ConcurrentRequest<T>> _concurrentTasks;
    private HttpClient _httpClient;
    [CompilerGeneratedAttribute]
private TimeSpan <CacheDuration>k__BackingField;
    [CompilerGeneratedAttribute]
private UInt32 <RetryCount>k__BackingField;
    public TimeSpan CacheDuration { get; public set; }
    public UInt32 RetryCount { get; public set; }
    public int MaxMemoryCacheCount { get; public set; }
    protected HttpClient HttpClient { get; }
    [CompilerGeneratedAttribute]
public TimeSpan get_CacheDuration();
    [CompilerGeneratedAttribute]
public void set_CacheDuration(TimeSpan value);
    [CompilerGeneratedAttribute]
public UInt32 get_RetryCount();
    [CompilerGeneratedAttribute]
public void set_RetryCount(UInt32 value);
    public int get_MaxMemoryCacheCount();
    public void set_MaxMemoryCacheCount(int value);
    protected HttpClient get_HttpClient();
    [AsyncStateMachineAttribute("Microsoft.Toolkit.Uwp.UI.CacheBase`1/<InitializeAsync>d__22")]
public virtual Task InitializeAsync(StorageFolder folder, string folderName, HttpMessageHandler httpMessageHandler);
    [AsyncStateMachineAttribute("Microsoft.Toolkit.Uwp.UI.CacheBase`1/<ClearAsync>d__23")]
public Task ClearAsync();
    public Task ClearAsync(TimeSpan duration);
    [AsyncStateMachineAttribute("Microsoft.Toolkit.Uwp.UI.CacheBase`1/<RemoveExpiredAsync>d__25")]
public Task RemoveExpiredAsync(Nullable`1<TimeSpan> duration);
    [AsyncStateMachineAttribute("Microsoft.Toolkit.Uwp.UI.CacheBase`1/<RemoveAsync>d__26")]
public Task RemoveAsync(IEnumerable`1<Uri> uriForCachedItems);
    public Task PreCacheAsync(Uri uri, bool throwOnError, bool storeToMemoryCache, CancellationToken cancellationToken);
    public Task`1<T> GetFromCacheAsync(Uri uri, bool throwOnError, CancellationToken cancellationToken, List`1<KeyValuePair`2<string, object>> initializerKeyValues);
    [AsyncStateMachineAttribute("Microsoft.Toolkit.Uwp.UI.CacheBase`1/<GetFileFromCacheAsync>d__29")]
public Task`1<StorageFile> GetFileFromCacheAsync(Uri uri);
    public T GetFromMemoryCache(Uri uri);
    protected abstract virtual Task`1<T> InitializeTypeAsync(Stream stream, List`1<KeyValuePair`2<string, object>> initializerKeyValues);
    protected abstract virtual Task`1<T> InitializeTypeAsync(StorageFile baseFile, List`1<KeyValuePair`2<string, object>> initializerKeyValues);
    [AsyncStateMachineAttribute("Microsoft.Toolkit.Uwp.UI.CacheBase`1/<IsFileOutOfDateAsync>d__33")]
protected virtual Task`1<bool> IsFileOutOfDateAsync(StorageFile file, TimeSpan duration, bool treatNullFileAsOutOfDate);
    private static string GetCacheFileName(Uri uri);
    private static ulong CreateHash64(string str);
    [AsyncStateMachineAttribute("Microsoft.Toolkit.Uwp.UI.CacheBase`1/<GetItemAsync>d__36")]
private Task`1<T> GetItemAsync(Uri uri, bool throwOnError, bool preCacheOnly, CancellationToken cancellationToken, List`1<KeyValuePair`2<string, object>> initializerKeyValues);
    [AsyncStateMachineAttribute("Microsoft.Toolkit.Uwp.UI.CacheBase`1/<GetFromCacheOrDownloadAsync>d__37")]
private Task`1<T> GetFromCacheOrDownloadAsync(Uri uri, string fileName, bool preCacheOnly, CancellationToken cancellationToken, List`1<KeyValuePair`2<string, object>> initializerKeyValues);
    [AsyncStateMachineAttribute("Microsoft.Toolkit.Uwp.UI.CacheBase`1/<DownloadFileAsync>d__38")]
private Task`1<T> DownloadFileAsync(Uri uri, StorageFile baseFile, bool preCacheOnly, CancellationToken cancellationToken, List`1<KeyValuePair`2<string, object>> initializerKeyValues);
    [AsyncStateMachineAttribute("Microsoft.Toolkit.Uwp.UI.CacheBase`1/<InternalClearAsync>d__39")]
private Task InternalClearAsync(IEnumerable`1<StorageFile> files);
    [AsyncStateMachineAttribute("Microsoft.Toolkit.Uwp.UI.CacheBase`1/<ForceInitialiseAsync>d__40")]
private Task ForceInitialiseAsync();
    [AsyncStateMachineAttribute("Microsoft.Toolkit.Uwp.UI.CacheBase`1/<GetCacheFolderAsync>d__41")]
private Task`1<StorageFolder> GetCacheFolderAsync();
}
public class Microsoft.Toolkit.Uwp.UI.Converters.BoolNegationConverter : object {
    public sealed virtual object Convert(object value, Type targetType, object parameter, string language);
    public sealed virtual object ConvertBack(object value, Type targetType, object parameter, string language);
}
public class Microsoft.Toolkit.Uwp.UI.Converters.BoolToObjectConverter : DependencyObject {
    public static DependencyProperty TrueValueProperty;
    public static DependencyProperty FalseValueProperty;
    public object TrueValue { get; public set; }
    public object FalseValue { get; public set; }
    private static BoolToObjectConverter();
    public object get_TrueValue();
    public void set_TrueValue(object value);
    public object get_FalseValue();
    public void set_FalseValue(object value);
    public sealed virtual object Convert(object value, Type targetType, object parameter, string language);
    public sealed virtual object ConvertBack(object value, Type targetType, object parameter, string language);
}
public class Microsoft.Toolkit.Uwp.UI.Converters.BoolToVisibilityConverter : BoolToObjectConverter {
}
public class Microsoft.Toolkit.Uwp.UI.Converters.CollectionVisibilityConverter : EmptyCollectionToObjectConverter {
}
public class Microsoft.Toolkit.Uwp.UI.Converters.ColorToDisplayNameConverter : object {
    public sealed virtual object Convert(object value, Type targetType, object parameter, string language);
    public sealed virtual object ConvertBack(object value, Type targetType, object parameter, string language);
}
internal static class Microsoft.Toolkit.Uwp.UI.Converters.ConverterTools : object {
    internal static bool TryParseBool(object parameter);
    internal static object Convert(object value, Type targetType);
}
public class Microsoft.Toolkit.Uwp.UI.Converters.DoubleToObjectConverter : DependencyObject {
    public static DependencyProperty TrueValueProperty;
    public static DependencyProperty FalseValueProperty;
    public static DependencyProperty NullValueProperty;
    public static DependencyProperty GreaterThanProperty;
    public static DependencyProperty LessThanProperty;
    public object TrueValue { get; public set; }
    public object FalseValue { get; public set; }
    public object NullValue { get; public set; }
    public double GreaterThan { get; public set; }
    public double LessThan { get; public set; }
    private static DoubleToObjectConverter();
    public object get_TrueValue();
    public void set_TrueValue(object value);
    public object get_FalseValue();
    public void set_FalseValue(object value);
    public object get_NullValue();
    public void set_NullValue(object value);
    public double get_GreaterThan();
    public void set_GreaterThan(double value);
    public double get_LessThan();
    public void set_LessThan(double value);
    public sealed virtual object Convert(object value, Type targetType, object parameter, string language);
    public sealed virtual object ConvertBack(object value, Type targetType, object parameter, string language);
}
public class Microsoft.Toolkit.Uwp.UI.Converters.DoubleToVisibilityConverter : DoubleToObjectConverter {
}
public class Microsoft.Toolkit.Uwp.UI.Converters.EmptyCollectionToObjectConverter : EmptyObjectToObjectConverter {
    protected virtual bool CheckValueIsEmpty(object value);
}
public class Microsoft.Toolkit.Uwp.UI.Converters.EmptyObjectToObjectConverter : DependencyObject {
    public static DependencyProperty NotEmptyValueProperty;
    public static DependencyProperty EmptyValueProperty;
    public object NotEmptyValue { get; public set; }
    public object EmptyValue { get; public set; }
    private static EmptyObjectToObjectConverter();
    public object get_NotEmptyValue();
    public void set_NotEmptyValue(object value);
    public object get_EmptyValue();
    public void set_EmptyValue(object value);
    public sealed virtual object Convert(object value, Type targetType, object parameter, string language);
    public sealed virtual object ConvertBack(object value, Type targetType, object parameter, string language);
    protected virtual bool CheckValueIsEmpty(object value);
}
public class Microsoft.Toolkit.Uwp.UI.Converters.EmptyStringToObjectConverter : EmptyObjectToObjectConverter {
    protected virtual bool CheckValueIsEmpty(object value);
}
public class Microsoft.Toolkit.Uwp.UI.Converters.FileSizeToFriendlyStringConverter : object {
    public sealed virtual object Convert(object value, Type targetType, object parameter, string language);
    public sealed virtual object ConvertBack(object value, Type targetType, object parameter, string language);
}
public class Microsoft.Toolkit.Uwp.UI.Converters.FormatStringConverter : object {
    public sealed virtual object Convert(object value, Type targetType, object parameter, string language);
    public sealed virtual object ConvertBack(object value, Type targetType, object parameter, string language);
}
public class Microsoft.Toolkit.Uwp.UI.Converters.ResourceNameToResourceStringConverter : object {
    private ResourceLoader _resourceLoader;
    public sealed virtual object Convert(object value, Type targetType, object parameter, string language);
    public sealed virtual object ConvertBack(object value, Type targetType, object parameter, string language);
}
public class Microsoft.Toolkit.Uwp.UI.Converters.StringFormatConverter : object {
    public sealed virtual object Convert(object value, Type targetType, object parameter, string language);
    public sealed virtual object ConvertBack(object value, Type targetType, object parameter, string language);
}
public class Microsoft.Toolkit.Uwp.UI.Converters.StringVisibilityConverter : EmptyStringToObjectConverter {
}
public class Microsoft.Toolkit.Uwp.UI.Converters.TaskResultConverter : object {
    public sealed virtual object Convert(object value, Type targetType, object parameter, string language);
    public sealed virtual object ConvertBack(object value, Type targetType, object parameter, string language);
}
public class Microsoft.Toolkit.Uwp.UI.Converters.TypeToObjectConverter : DependencyObject {
    public static DependencyProperty TrueValueProperty;
    public static DependencyProperty FalseValueProperty;
    public static DependencyProperty TypeProperty;
    public object TrueValue { get; public set; }
    public object FalseValue { get; public set; }
    public Type Type { get; public set; }
    private static TypeToObjectConverter();
    public object get_TrueValue();
    public void set_TrueValue(object value);
    public object get_FalseValue();
    public void set_FalseValue(object value);
    public Type get_Type();
    public void set_Type(Type value);
    public sealed virtual object Convert(object value, Type targetType, object parameter, string language);
    public sealed virtual object ConvertBack(object value, Type targetType, object parameter, string language);
}
public class Microsoft.Toolkit.Uwp.UI.Converters.VisibilityToBoolConverter : object {
    public sealed virtual object Convert(object value, Type targetType, object parameter, string language);
    public sealed virtual object ConvertBack(object value, Type targetType, object parameter, string language);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class Microsoft.Toolkit.Uwp.UI.DependencyObjectExtensions : object {
    [ExtensionAttribute]
public static FrameworkElement FindDescendant(DependencyObject element, string name, StringComparison comparisonType);
    [ExtensionAttribute]
public static T FindDescendant(DependencyObject element);
    [ExtensionAttribute]
public static DependencyObject FindDescendant(DependencyObject element, Type type);
    [ExtensionAttribute]
public static T FindDescendant(DependencyObject element, Func`2<T, bool> predicate);
    [ExtensionAttribute]
public static T FindDescendant(DependencyObject element, TState state, Func`3<T, TState, bool> predicate);
    [ExtensionAttribute]
private static T FindDescendant(DependencyObject element, TPredicate& predicate);
    [ExtensionAttribute]
public static FrameworkElement FindDescendantOrSelf(DependencyObject element, string name, StringComparison comparisonType);
    [ExtensionAttribute]
public static T FindDescendantOrSelf(DependencyObject element);
    [ExtensionAttribute]
public static DependencyObject FindDescendantOrSelf(DependencyObject element, Type type);
    [ExtensionAttribute]
public static T FindDescendantOrSelf(DependencyObject element, Func`2<T, bool> predicate);
    [ExtensionAttribute]
public static T FindDescendantOrSelf(DependencyObject element, TState state, Func`3<T, TState, bool> predicate);
    [IteratorStateMachineAttribute("Microsoft.Toolkit.Uwp.UI.DependencyObjectExtensions/<FindDescendants>d__11")]
[ExtensionAttribute]
public static IEnumerable`1<DependencyObject> FindDescendants(DependencyObject element);
    [ExtensionAttribute]
public static FrameworkElement FindAscendant(DependencyObject element, string name, StringComparison comparisonType);
    [ExtensionAttribute]
public static T FindAscendant(DependencyObject element);
    [ExtensionAttribute]
public static DependencyObject FindAscendant(DependencyObject element, Type type);
    [ExtensionAttribute]
public static T FindAscendant(DependencyObject element, Func`2<T, bool> predicate);
    [ExtensionAttribute]
public static T FindAscendant(DependencyObject element, TState state, Func`3<T, TState, bool> predicate);
    [ExtensionAttribute]
private static T FindAscendant(DependencyObject element, TPredicate& predicate);
    [ExtensionAttribute]
public static FrameworkElement FindAscendantOrSelf(DependencyObject element, string name, StringComparison comparisonType);
    [ExtensionAttribute]
public static T FindAscendantOrSelf(DependencyObject element);
    [ExtensionAttribute]
public static DependencyObject FindAscendantOrSelf(DependencyObject element, Type type);
    [ExtensionAttribute]
public static T FindAscendantOrSelf(DependencyObject element, Func`2<T, bool> predicate);
    [ExtensionAttribute]
public static T FindAscendantOrSelf(DependencyObject element, TState state, Func`3<T, TState, bool> predicate);
    [IteratorStateMachineAttribute("Microsoft.Toolkit.Uwp.UI.DependencyObjectExtensions/<FindAscendants>d__23")]
[ExtensionAttribute]
public static IEnumerable`1<DependencyObject> FindAscendants(DependencyObject element);
}
public static class Microsoft.Toolkit.Uwp.UI.DesignTimeHelpers : object {
    private static Lazy`1<bool> designModeEnabled;
    private static Lazy`1<bool> designMode2Enabled;
    public static bool IsRunningInLegacyDesignerMode { get; }
    public static bool IsRunningInEnhancedDesignerMode { get; }
    public static bool IsRunningInApplicationRuntimeMode { get; }
    private static DesignTimeHelpers();
    public static bool get_IsRunningInLegacyDesignerMode();
    public static bool get_IsRunningInEnhancedDesignerMode();
    public static bool get_IsRunningInApplicationRuntimeMode();
    private static bool InitializeDesignerMode();
    private static bool InitializeDesignMode2();
}
public static class Microsoft.Toolkit.Uwp.UI.Effects : object {
    public static DependencyProperty ShadowProperty;
    private static Effects();
    public static AttachedShadowBase GetShadow(FrameworkElement obj);
    public static void SetShadow(FrameworkElement obj, AttachedShadowBase value);
    private static void OnShadowChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
}
[MarkupExtensionReturnTypeAttribute]
public class Microsoft.Toolkit.Uwp.UI.EnumValuesExtension : MarkupExtension {
    [CompilerGeneratedAttribute]
private Type <Type>k__BackingField;
    public Type Type { get; public set; }
    [CompilerGeneratedAttribute]
public Type get_Type();
    [CompilerGeneratedAttribute]
public void set_Type(Type value);
    protected virtual object ProvideValue();
}
public class Microsoft.Toolkit.Uwp.UI.FileCache : CacheBase`1<StorageFile> {
    private static FileCache _instance;
    public static FileCache Instance { get; }
    public static FileCache get_Instance();
    protected virtual Task`1<StorageFile> InitializeTypeAsync(Stream stream, List`1<KeyValuePair`2<string, object>> initializerKeyValues);
    protected virtual Task`1<StorageFile> InitializeTypeAsync(StorageFile baseFile, List`1<KeyValuePair`2<string, object>> initializerKeyValues);
}
[MarkupExtensionReturnTypeAttribute]
public class Microsoft.Toolkit.Uwp.UI.FontIconExtension : TextIconExtension {
    [CompilerGeneratedAttribute]
private string <Glyph>k__BackingField;
    [CompilerGeneratedAttribute]
private FontFamily <FontFamily>k__BackingField;
    public string Glyph { get; public set; }
    public FontFamily FontFamily { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Glyph();
    [CompilerGeneratedAttribute]
public void set_Glyph(string value);
    [CompilerGeneratedAttribute]
public FontFamily get_FontFamily();
    [CompilerGeneratedAttribute]
public void set_FontFamily(FontFamily value);
    protected virtual object ProvideValue();
}
[MarkupExtensionReturnTypeAttribute]
public class Microsoft.Toolkit.Uwp.UI.FontIconSourceExtension : TextIconExtension {
    [CompilerGeneratedAttribute]
private string <Glyph>k__BackingField;
    [CompilerGeneratedAttribute]
private FontFamily <FontFamily>k__BackingField;
    public string Glyph { get; public set; }
    public FontFamily FontFamily { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Glyph();
    [CompilerGeneratedAttribute]
public void set_Glyph(string value);
    [CompilerGeneratedAttribute]
public FontFamily get_FontFamily();
    [CompilerGeneratedAttribute]
public void set_FontFamily(FontFamily value);
    protected virtual object ProvideValue();
}
[ExtensionAttribute]
public static class Microsoft.Toolkit.Uwp.UI.FrameworkElementExtensions : object {
    public static DependencyProperty EnableActualSizeBindingProperty;
    public static DependencyProperty ActualHeightProperty;
    public static DependencyProperty ActualWidthProperty;
    private static object _cursorLock;
    private static CoreCursor _defaultCursor;
    private static Dictionary`2<CoreCursorType, CoreCursor> _cursors;
    public static DependencyProperty CursorProperty;
    public static DependencyProperty AncestorProperty;
    public static DependencyProperty AncestorTypeProperty;
    private static FrameworkElementExtensions();
    public static bool GetEnableActualSizeBinding(FrameworkElement obj);
    public static void SetEnableActualSizeBinding(FrameworkElement obj, bool value);
    public static double GetActualHeight(FrameworkElement obj);
    public static void SetActualHeight(FrameworkElement obj, double value);
    public static double GetActualWidth(FrameworkElement obj);
    public static void SetActualWidth(FrameworkElement obj, double value);
    private static void OnEnableActualSizeBindingPropertyChanged(DependencyObject sender, DependencyPropertyChangedEventArgs args);
    private static void UpdateActualSizeProperties(object sender, RoutedEventArgs routedEventArgs);
    [NullableContextAttribute("1")]
[ExtensionAttribute]
public static FrameworkElement FindChild(FrameworkElement element, string name, StringComparison comparisonType);
    [NullableContextAttribute("1")]
[ExtensionAttribute]
public static T FindChild(FrameworkElement element);
    [NullableContextAttribute("1")]
[ExtensionAttribute]
public static FrameworkElement FindChild(FrameworkElement element, Type type);
    [NullableContextAttribute("1")]
[ExtensionAttribute]
public static T FindChild(FrameworkElement element, Func`2<T, bool> predicate);
    [NullableContextAttribute("1")]
[ExtensionAttribute]
public static T FindChild(FrameworkElement element, TState state, Func`3<T, TState, bool> predicate);
    [NullableContextAttribute("1")]
[ExtensionAttribute]
private static T FindChild(FrameworkElement element, TPredicate& predicate);
    [NullableContextAttribute("1")]
[ExtensionAttribute]
public static FrameworkElement FindChildOrSelf(FrameworkElement element, string name, StringComparison comparisonType);
    [NullableContextAttribute("1")]
[ExtensionAttribute]
public static T FindChildOrSelf(FrameworkElement element);
    [NullableContextAttribute("1")]
[ExtensionAttribute]
public static FrameworkElement FindChildOrSelf(FrameworkElement element, Type type);
    [NullableContextAttribute("1")]
[ExtensionAttribute]
public static T FindChildOrSelf(FrameworkElement element, Func`2<T, bool> predicate);
    [NullableContextAttribute("1")]
[ExtensionAttribute]
public static T FindChildOrSelf(FrameworkElement element, TState state, Func`3<T, TState, bool> predicate);
    [NullableContextAttribute("1")]
[IteratorStateMachineAttribute("Microsoft.Toolkit.Uwp.UI.FrameworkElementExtensions/<FindChildren>d__22")]
[ExtensionAttribute]
public static IEnumerable`1<FrameworkElement> FindChildren(FrameworkElement element);
    [NullableContextAttribute("1")]
[ExtensionAttribute]
public static FrameworkElement FindParent(FrameworkElement element, string name, StringComparison comparisonType);
    [NullableContextAttribute("1")]
[ExtensionAttribute]
public static T FindParent(FrameworkElement element);
    [NullableContextAttribute("1")]
[ExtensionAttribute]
public static FrameworkElement FindParent(FrameworkElement element, Type type);
    [NullableContextAttribute("1")]
[ExtensionAttribute]
public static T FindParent(FrameworkElement element, Func`2<T, bool> predicate);
    [NullableContextAttribute("1")]
[ExtensionAttribute]
public static T FindParent(FrameworkElement element, TState state, Func`3<T, TState, bool> predicate);
    [NullableContextAttribute("1")]
[ExtensionAttribute]
private static T FindParent(FrameworkElement element, TPredicate& predicate);
    [NullableContextAttribute("1")]
[ExtensionAttribute]
public static FrameworkElement FindParentOrSelf(FrameworkElement element, string name, StringComparison comparisonType);
    [NullableContextAttribute("1")]
[ExtensionAttribute]
public static T FindParentOrSelf(FrameworkElement element);
    [NullableContextAttribute("1")]
[ExtensionAttribute]
public static FrameworkElement FindParentOrSelf(FrameworkElement element, Type type);
    [NullableContextAttribute("1")]
[ExtensionAttribute]
public static T FindParentOrSelf(FrameworkElement element, Func`2<T, bool> predicate);
    [NullableContextAttribute("1")]
[ExtensionAttribute]
public static T FindParentOrSelf(FrameworkElement element, TState state, Func`3<T, TState, bool> predicate);
    [NullableContextAttribute("1")]
[IteratorStateMachineAttribute("Microsoft.Toolkit.Uwp.UI.FrameworkElementExtensions/<FindParents>d__34")]
[ExtensionAttribute]
public static IEnumerable`1<FrameworkElement> FindParents(FrameworkElement element);
    [NullableContextAttribute("1")]
[ExtensionAttribute]
public static UIElement GetContentControl(FrameworkElement element);
    [NullableContextAttribute("1")]
[ExtensionAttribute]
public static object FindResource(FrameworkElement element, object resourceKey);
    [NullableContextAttribute("1")]
[ExtensionAttribute]
public static object TryFindResource(FrameworkElement element, object resourceKey);
    [NullableContextAttribute("1")]
[ExtensionAttribute]
public static bool TryFindResource(FrameworkElement element, object resourceKey, Object& value);
    public static void SetCursor(FrameworkElement element, CoreCursorType value);
    public static CoreCursorType GetCursor(FrameworkElement element);
    private static void CursorChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    private static void Element_PointerEntered(object sender, PointerRoutedEventArgs e);
    private static void Element_PointerExited(object sender, PointerRoutedEventArgs e);
    private static void ElementOnUnloaded(object sender, RoutedEventArgs routedEventArgs);
    public static object GetAncestor(DependencyObject obj);
    public static void SetAncestor(DependencyObject obj, object value);
    public static Type GetAncestorType(DependencyObject obj);
    public static void SetAncestorType(DependencyObject obj, Type value);
    private static void AncestorType_PropertyChanged(DependencyObject obj, DependencyPropertyChangedEventArgs args);
    private static void FrameworkElement_Loaded(object sender, RoutedEventArgs e);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
internal static object <FindResource>g__Throw|36_0(object resourceKey);
}
[ContentPropertyAttribute]
public class Microsoft.Toolkit.Uwp.UI.Helpers.BindableValueHolder : DependencyObject {
    public static DependencyProperty ValueProperty;
    public object Value { get; public set; }
    private static BindableValueHolder();
    public object get_Value();
    public void set_Value(object value);
}
public static class Microsoft.Toolkit.Uwp.UI.Helpers.CompositionTargetHelper : object {
    public static Task`1<bool> ExecuteAfterCompositionRenderingAsync(Action action, Nullable`1<TaskCreationOptions> options);
    [CompilerGeneratedAttribute]
internal static void <ExecuteAfterCompositionRenderingAsync>g__ThrowArgumentNullException|0_1();
}
public class Microsoft.Toolkit.Uwp.UI.Helpers.DependencyPropertyWatcher`1 : DependencyObject {
    public static DependencyProperty ValueProperty;
    [CompilerGeneratedAttribute]
private EventHandler PropertyChanged;
    [CompilerGeneratedAttribute]
private DependencyObject <Target>k__BackingField;
    public DependencyObject Target { get; private set; }
    public T Value { get; }
    public DependencyPropertyWatcher`1(DependencyObject target, string propertyPath);
    private static DependencyPropertyWatcher`1();
    [CompilerGeneratedAttribute]
public void add_PropertyChanged(EventHandler value);
    [CompilerGeneratedAttribute]
public void remove_PropertyChanged(EventHandler value);
    [CompilerGeneratedAttribute]
public DependencyObject get_Target();
    [CompilerGeneratedAttribute]
private void set_Target(DependencyObject value);
    public T get_Value();
    public static void OnPropertyChanged(object sender, DependencyPropertyChangedEventArgs args);
    public sealed virtual void Dispose();
}
public class Microsoft.Toolkit.Uwp.UI.Helpers.ThemeChangedEvent : MulticastDelegate {
    public ThemeChangedEvent(object object, IntPtr method);
    public virtual void Invoke(ThemeListener sender);
    public virtual IAsyncResult BeginInvoke(ThemeListener sender, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
[AllowForWebAttribute]
public class Microsoft.Toolkit.Uwp.UI.Helpers.ThemeListener : object {
    [CompilerGeneratedAttribute]
private ApplicationTheme <CurrentTheme>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsHighContrast>k__BackingField;
    [CompilerGeneratedAttribute]
private DispatcherQueue <DispatcherQueue>k__BackingField;
    [CompilerGeneratedAttribute]
private ThemeChangedEvent ThemeChanged;
    private AccessibilitySettings _accessible;
    private UISettings _settings;
    public string CurrentThemeName { get; }
    public ApplicationTheme CurrentTheme { get; public set; }
    public bool IsHighContrast { get; public set; }
    public DispatcherQueue DispatcherQueue { get; public set; }
    public ThemeListener(DispatcherQueue dispatcherQueue);
    public string get_CurrentThemeName();
    [CompilerGeneratedAttribute]
public ApplicationTheme get_CurrentTheme();
    [CompilerGeneratedAttribute]
public void set_CurrentTheme(ApplicationTheme value);
    [CompilerGeneratedAttribute]
public bool get_IsHighContrast();
    [CompilerGeneratedAttribute]
public void set_IsHighContrast(bool value);
    [CompilerGeneratedAttribute]
public DispatcherQueue get_DispatcherQueue();
    [CompilerGeneratedAttribute]
public void set_DispatcherQueue(DispatcherQueue value);
    [CompilerGeneratedAttribute]
public void add_ThemeChanged(ThemeChangedEvent value);
    [CompilerGeneratedAttribute]
public void remove_ThemeChanged(ThemeChangedEvent value);
    [AsyncStateMachineAttribute("Microsoft.Toolkit.Uwp.UI.Helpers.ThemeListener/<Accessible_HighContrastChanged>d__20")]
private void Accessible_HighContrastChanged(AccessibilitySettings sender, object args);
    [AsyncStateMachineAttribute("Microsoft.Toolkit.Uwp.UI.Helpers.ThemeListener/<Settings_ColorValuesChanged>d__21")]
private void Settings_ColorValuesChanged(UISettings sender, object args);
    internal Task OnThemePropertyChangedAsync();
    private void CoreWindow_Activated(CoreWindow sender, WindowActivatedEventArgs args);
    private void UpdateProperties();
    public sealed virtual void Dispose();
    [CompilerGeneratedAttribute]
private void <OnThemePropertyChangedAsync>b__22_0();
}
public static class Microsoft.Toolkit.Uwp.UI.HyperlinkExtensions : object {
    public static DependencyProperty CommandProperty;
    public static DependencyProperty CommandParameterProperty;
    private static HyperlinkExtensions();
    public static ICommand GetCommand(Hyperlink obj);
    public static void SetCommand(Hyperlink obj, ICommand value);
    public static object GetCommandParameter(Hyperlink obj);
    public static void SetCommandParameter(Hyperlink obj, object value);
    private static void OnCommandPropertyChanged(DependencyObject sender, DependencyPropertyChangedEventArgs args);
    private static void OnHyperlinkClicked(Hyperlink sender, HyperlinkClickEventArgs args);
}
public interface Microsoft.Toolkit.Uwp.UI.IAdvancedCollectionView {
    public bool CanFilter { get; }
    public Predicate`1<object> Filter { get; public set; }
    public bool CanSort { get; }
    public IList`1<SortDescription> SortDescriptions { get; }
    public IEnumerable SourceCollection { get; }
    public abstract virtual bool get_CanFilter();
    public abstract virtual Predicate`1<object> get_Filter();
    public abstract virtual void set_Filter(Predicate`1<object> value);
    public abstract virtual bool get_CanSort();
    public abstract virtual IList`1<SortDescription> get_SortDescriptions();
    public abstract virtual IEnumerable get_SourceCollection();
    public abstract virtual IDisposable DeferRefresh();
    public abstract virtual void Refresh();
    public abstract virtual void RefreshFilter();
    public abstract virtual void RefreshSorting();
    public abstract virtual void ObserveFilterProperty(string propertyName);
    public abstract virtual void ClearObservedFilterProperties();
}
public interface Microsoft.Toolkit.Uwp.UI.IAlphaMaskProvider {
    public bool WaitUntilLoaded { get; }
    public abstract virtual bool get_WaitUntilLoaded();
    public abstract virtual CompositionBrush GetAlphaMask();
}
public interface Microsoft.Toolkit.Uwp.UI.IAttachedShadow {
    public double BlurRadius { get; public set; }
    public double Opacity { get; public set; }
    public string Offset { get; public set; }
    public Color Color { get; public set; }
    public abstract virtual double get_BlurRadius();
    public abstract virtual void set_BlurRadius(double value);
    public abstract virtual double get_Opacity();
    public abstract virtual void set_Opacity(double value);
    public abstract virtual string get_Offset();
    public abstract virtual void set_Offset(string value);
    public abstract virtual Color get_Color();
    public abstract virtual void set_Color(Color value);
    public abstract virtual AttachedShadowElementContext GetElementContext(FrameworkElement element);
    public abstract virtual IEnumerable`1<AttachedShadowElementContext> EnumerateElementContexts();
}
public class Microsoft.Toolkit.Uwp.UI.ImageCache : CacheBase`1<BitmapImage> {
    private static string DateAccessedProperty;
    [ThreadStaticAttribute]
private static ImageCache _instance;
    private List`1<string> _extendedPropertyNames;
    [CompilerGeneratedAttribute]
private DispatcherQueue <DispatcherQueue>k__BackingField;
    public static ImageCache Instance { get; }
    public DispatcherQueue DispatcherQueue { get; public set; }
    public ImageCache(DispatcherQueue dispatcherQueue);
    public static ImageCache get_Instance();
    [CompilerGeneratedAttribute]
public DispatcherQueue get_DispatcherQueue();
    [CompilerGeneratedAttribute]
public void set_DispatcherQueue(DispatcherQueue value);
    [AsyncStateMachineAttribute("Microsoft.Toolkit.Uwp.UI.ImageCache/<InitializeTypeAsync>d__10")]
protected virtual Task`1<BitmapImage> InitializeTypeAsync(Stream stream, List`1<KeyValuePair`2<string, object>> initializerKeyValues);
    [AsyncStateMachineAttribute("Microsoft.Toolkit.Uwp.UI.ImageCache/<InitializeTypeAsync>d__11")]
protected virtual Task`1<BitmapImage> InitializeTypeAsync(StorageFile baseFile, List`1<KeyValuePair`2<string, object>> initializerKeyValues);
    [AsyncStateMachineAttribute("Microsoft.Toolkit.Uwp.UI.ImageCache/<IsFileOutOfDateAsync>d__12")]
protected virtual Task`1<bool> IsFileOutOfDateAsync(StorageFile file, TimeSpan duration, bool treatNullFileAsOutOfDate);
}
public class Microsoft.Toolkit.Uwp.UI.InMemoryStorage`1 : object {
    private int _maxItemCount;
    private ConcurrentDictionary`2<string, InMemoryStorageItem`1<T>> _inMemoryStorage;
    private object _settingMaxItemCountLocker;
    public int MaxItemCount { get; public set; }
    public int get_MaxItemCount();
    public void set_MaxItemCount(int value);
    public void Clear();
    public void Clear(TimeSpan duration);
    public void Remove(IEnumerable`1<string> keys);
    public void SetItem(InMemoryStorageItem`1<T> item);
    public InMemoryStorageItem`1<T> GetItem(string id, TimeSpan duration);
    private void EnsureStorageBounds(int maxCount);
}
public class Microsoft.Toolkit.Uwp.UI.InMemoryStorageItem`1 : object {
    [CompilerGeneratedAttribute]
private string <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTime <Created>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTime <LastUpdated>k__BackingField;
    [CompilerGeneratedAttribute]
private T <Item>k__BackingField;
    public string Id { get; private set; }
    public DateTime Created { get; private set; }
    public DateTime LastUpdated { get; private set; }
    public T Item { get; private set; }
    public InMemoryStorageItem`1(string id, DateTime lastUpdated, T item);
    [CompilerGeneratedAttribute]
public string get_Id();
    [CompilerGeneratedAttribute]
private void set_Id(string value);
    [CompilerGeneratedAttribute]
public DateTime get_Created();
    [CompilerGeneratedAttribute]
private void set_Created(DateTime value);
    [CompilerGeneratedAttribute]
public DateTime get_LastUpdated();
    [CompilerGeneratedAttribute]
private void set_LastUpdated(DateTime value);
    [CompilerGeneratedAttribute]
public T get_Item();
    [CompilerGeneratedAttribute]
private void set_Item(T value);
}
public enum Microsoft.Toolkit.Uwp.UI.ItemContainerStretchDirection : Enum {
    public int value__;
    public static ItemContainerStretchDirection Horizontal;
    public static ItemContainerStretchDirection Vertical;
    public static ItemContainerStretchDirection Both;
}
[ExtensionAttribute]
public static class Microsoft.Toolkit.Uwp.UI.ListViewExtensions : object {
    private static Dictionary`2<IObservableVector`1<object>, ListViewBase> _itemsForList;
    public static DependencyProperty AlternateColorProperty;
    public static DependencyProperty AlternateItemTemplateProperty;
    public static DependencyProperty CommandProperty;
    public static DependencyProperty ItemContainerStretchDirectionProperty;
    private static ListViewExtensions();
    public static Brush GetAlternateColor(ListViewBase obj);
    public static void SetAlternateColor(ListViewBase obj, Brush value);
    public static DataTemplate GetAlternateItemTemplate(ListViewBase obj);
    public static void SetAlternateItemTemplate(ListViewBase obj, DataTemplate value);
    private static void OnAlternateColorPropertyChanged(DependencyObject sender, DependencyPropertyChangedEventArgs args);
    private static void ColorContainerContentChanging(ListViewBase sender, ContainerContentChangingEventArgs args);
    private static void OnAlternateItemTemplatePropertyChanged(DependencyObject sender, DependencyPropertyChangedEventArgs args);
    private static void ItemTemplateContainerContentChanging(ListViewBase sender, ContainerContentChangingEventArgs args);
    private static void OnItemContainerStretchDirectionPropertyChanged(DependencyObject sender, DependencyPropertyChangedEventArgs args);
    private static void ItemContainerStretchDirectionChanging(ListViewBase sender, ContainerContentChangingEventArgs args);
    private static void OnListViewBaseUnloaded(object sender, RoutedEventArgs e);
    private static void ColorItemsVectorChanged(IObservableVector`1<object> sender, IVectorChangedEventArgs args);
    private static void SetItemContainerBackground(ListViewBase sender, Control itemContainer, int itemIndex);
    public static ICommand GetCommand(ListViewBase obj);
    public static void SetCommand(ListViewBase obj, ICommand value);
    private static void OnCommandPropertyChanged(DependencyObject sender, DependencyPropertyChangedEventArgs args);
    private static void OnListViewBaseItemClick(object sender, ItemClickEventArgs e);
    [ExtensionAttribute]
public static void DeselectItem(ListViewBase list, T item);
    [ExtensionAttribute]
public static void DeselectAll(ListViewBase list);
    [ExtensionAttribute]
public static void SelectAllSafe(ListViewBase list);
    [AsyncStateMachineAttribute("Microsoft.Toolkit.Uwp.UI.ListViewExtensions/<SmoothScrollIntoViewWithIndexAsync>d__24")]
[ExtensionAttribute]
public static Task SmoothScrollIntoViewWithIndexAsync(ListViewBase listViewBase, int index, ScrollItemPlacement itemPlacement, bool disableAnimation, bool scrollIfVisible, int additionalHorizontalOffset, int additionalVerticalOffset);
    [AsyncStateMachineAttribute("Microsoft.Toolkit.Uwp.UI.ListViewExtensions/<SmoothScrollIntoViewWithItemAsync>d__25")]
[ExtensionAttribute]
public static Task SmoothScrollIntoViewWithItemAsync(ListViewBase listViewBase, object item, ScrollItemPlacement itemPlacement, bool disableAnimation, bool scrollIfVisibile, int additionalHorizontalOffset, int additionalVerticalOffset);
    [AsyncStateMachineAttribute("Microsoft.Toolkit.Uwp.UI.ListViewExtensions/<ChangeViewAsync>d__26")]
[ExtensionAttribute]
private static Task ChangeViewAsync(ScrollViewer scrollViewer, Nullable`1<double> horizontalOffset, Nullable`1<double> verticalOffset, Nullable`1<float> zoomFactor, bool disableAnimation);
    public static ItemContainerStretchDirection GetItemContainerStretchDirection(ListViewBase obj);
    public static void SetItemContainerStretchDirection(ListViewBase obj, ItemContainerStretchDirection value);
}
[ExtensionAttribute]
public static class Microsoft.Toolkit.Uwp.UI.MatrixExtensions : object {
    [ExtensionAttribute]
public static bool HasInverse(Matrix matrix);
    [ExtensionAttribute]
public static Matrix Multiply(Matrix matrix1, Matrix matrix2);
    [ExtensionAttribute]
public static Matrix Round(Matrix matrix, int decimalsAfterRound);
    [ExtensionAttribute]
public static Matrix Rotate(Matrix matrix, double angle);
    [ExtensionAttribute]
public static Matrix RotateAt(Matrix matrix, double angle, double centerX, double centerY);
    [ExtensionAttribute]
public static Matrix Scale(Matrix matrix, double scaleX, double scaleY);
    [ExtensionAttribute]
public static Matrix ScaleAt(Matrix matrix, double scaleX, double scaleY, double centerX, double centerY);
    [ExtensionAttribute]
public static Matrix Skew(Matrix matrix, double skewX, double skewY);
    [ExtensionAttribute]
public static Matrix Translate(Matrix matrix, double offsetX, double offsetY);
    private static Matrix CreateRotationRadians(double angle);
    private static Matrix CreateRotationRadians(double angle, double centerX, double centerY);
    private static Matrix CreateScaling(double scaleX, double scaleY);
    private static Matrix CreateScaling(double scaleX, double scaleY, double centerX, double centerY);
    private static Matrix CreateSkewRadians(double skewX, double skewY);
}
[MarkupExtensionReturnTypeAttribute]
public class Microsoft.Toolkit.Uwp.UI.NullableBoolExtension : MarkupExtension {
    [CompilerGeneratedAttribute]
private bool <Value>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsNull>k__BackingField;
    public bool Value { get; public set; }
    public bool IsNull { get; public set; }
    [CompilerGeneratedAttribute]
public bool get_Value();
    [CompilerGeneratedAttribute]
public void set_Value(bool value);
    [CompilerGeneratedAttribute]
public bool get_IsNull();
    [CompilerGeneratedAttribute]
public void set_IsNull(bool value);
    protected virtual object ProvideValue();
}
public class Microsoft.Toolkit.Uwp.UI.OnDeviceExtension : MarkupExtension {
    [CompilerGeneratedAttribute]
private string <DeviceFamily>k__BackingField;
    [CompilerGeneratedAttribute]
private object <Default>k__BackingField;
    [CompilerGeneratedAttribute]
private object <Desktop>k__BackingField;
    [CompilerGeneratedAttribute]
private object <Holographic>k__BackingField;
    [CompilerGeneratedAttribute]
private object <IoT>k__BackingField;
    [CompilerGeneratedAttribute]
private object <Team>k__BackingField;
    [CompilerGeneratedAttribute]
private object <Xbox>k__BackingField;
    private string DeviceFamily { get; }
    public object Default { get; public set; }
    public object Desktop { get; public set; }
    public object Holographic { get; public set; }
    public object IoT { get; public set; }
    public object Team { get; public set; }
    public object Xbox { get; public set; }
    [CompilerGeneratedAttribute]
private string get_DeviceFamily();
    [CompilerGeneratedAttribute]
public object get_Default();
    [CompilerGeneratedAttribute]
public void set_Default(object value);
    [CompilerGeneratedAttribute]
public object get_Desktop();
    [CompilerGeneratedAttribute]
public void set_Desktop(object value);
    [CompilerGeneratedAttribute]
public object get_Holographic();
    [CompilerGeneratedAttribute]
public void set_Holographic(object value);
    [CompilerGeneratedAttribute]
public object get_IoT();
    [CompilerGeneratedAttribute]
public void set_IoT(object value);
    [CompilerGeneratedAttribute]
public object get_Team();
    [CompilerGeneratedAttribute]
public void set_Team(object value);
    [CompilerGeneratedAttribute]
public object get_Xbox();
    [CompilerGeneratedAttribute]
public void set_Xbox(object value);
    protected virtual object ProvideValue();
}
internal interface Microsoft.Toolkit.Uwp.UI.Predicates.IPredicate`1 {
    public abstract virtual bool Match(T element);
}
[IsReadOnlyAttribute]
internal class Microsoft.Toolkit.Uwp.UI.Predicates.PredicateByAny`1 : ValueType {
    public sealed virtual bool Match(T element);
}
[IsReadOnlyAttribute]
internal class Microsoft.Toolkit.Uwp.UI.Predicates.PredicateByFunc`1 : ValueType {
    private Func`2<T, bool> predicate;
    public PredicateByFunc`1(Func`2<T, bool> predicate);
    public sealed virtual bool Match(T element);
}
[IsReadOnlyAttribute]
internal class Microsoft.Toolkit.Uwp.UI.Predicates.PredicateByFunc`2 : ValueType {
    private TState state;
    private Func`3<T, TState, bool> predicate;
    public PredicateByFunc`2(TState state, Func`3<T, TState, bool> predicate);
    public sealed virtual bool Match(T element);
}
[IsReadOnlyAttribute]
internal class Microsoft.Toolkit.Uwp.UI.Predicates.PredicateByName : ValueType {
    private string name;
    private StringComparison comparisonType;
    public PredicateByName(string name, StringComparison comparisonType);
    public sealed virtual bool Match(FrameworkElement element);
}
[IsReadOnlyAttribute]
internal class Microsoft.Toolkit.Uwp.UI.Predicates.PredicateByType : ValueType {
    private Type type;
    public PredicateByType(Type type);
    public sealed virtual bool Match(object element);
}
[ExtensionAttribute]
public static class Microsoft.Toolkit.Uwp.UI.RectExtensions : object {
    [ExtensionAttribute]
public static Rect Transform(Rect rectangle, Matrix matrix);
}
[ExtensionAttribute]
public static class Microsoft.Toolkit.Uwp.UI.RotateTransformExtensions : object {
    [ExtensionAttribute]
public static Matrix GetMatrix(RotateTransform transform);
}
[ExtensionAttribute]
public static class Microsoft.Toolkit.Uwp.UI.ScaleTransformExtensions : object {
    [ExtensionAttribute]
public static Matrix GetMatrix(ScaleTransform transform);
}
public enum Microsoft.Toolkit.Uwp.UI.ScrollItemPlacement : Enum {
    public int value__;
    public static ScrollItemPlacement Default;
    public static ScrollItemPlacement Left;
    public static ScrollItemPlacement Top;
    public static ScrollItemPlacement Center;
    public static ScrollItemPlacement Right;
    public static ScrollItemPlacement Bottom;
}
public static class Microsoft.Toolkit.Uwp.UI.ScrollViewerExtensions : object {
    private static double _threshold;
    private static bool _isPressed;
    private static bool _isMoved;
    private static Point _startPosition;
    private static bool _isDeferredMovingStarted;
    private static double _factor;
    private static Point _currentPosition;
    private static Timer _timer;
    private static ScrollViewer _scrollViewer;
    private static UInt32 _oldCursorID;
    private static UInt32 _maxSpeed;
    private static bool _isCursorAvailable;
    public static DependencyProperty HorizontalScrollBarMarginProperty;
    public static DependencyProperty VerticalScrollBarMarginProperty;
    public static DependencyProperty EnableMiddleClickScrollingProperty;
    private static ScrollViewerExtensions();
    private static void OnHorizontalScrollBarMarginPropertyChanged(DependencyObject sender, DependencyPropertyChangedEventArgs args);
    private static bool ChangeHorizontalScrollBarMarginProperty(FrameworkElement sender);
    private static void ChangeHorizontalScrollBarMarginProperty(object sender, RoutedEventArgs routedEventArgs);
    private static void OnVerticalScrollBarMarginPropertyChanged(DependencyObject sender, DependencyPropertyChangedEventArgs args);
    private static bool ChangeVerticalScrollBarMarginProperty(FrameworkElement sender);
    private static void ChangeVerticalScrollBarMarginProperty(object sender, RoutedEventArgs routedEventArgs);
    private static void OnEnableMiddleClickScrollingChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    private static void UpdateChange(bool newValue);
    private static void SubscribeMiddleClickScrolling(DispatcherQueue dispatcherQueue);
    private static void UnsubscribeMiddleClickScrolling();
    private static void Scroll(object state);
    private static bool CanScroll();
    private static void ScrollViewer_PointerPressed(object sender, PointerRoutedEventArgs e);
    private static void CoreWindow_PointerMoved(CoreWindow sender, PointerEventArgs args);
    private static void CoreWindow_PointerReleased(CoreWindow sender, PointerEventArgs args);
    private static void CoreWindow_PointerPressed(CoreWindow sender, PointerEventArgs args);
    private static void CoreWindow_PointerExited(CoreWindow sender, PointerEventArgs args);
    private static void SetCursorType(DispatcherQueue dispatcherQueue, double offsetX, double offsetY);
    private static bool IsCursorResourceAvailable();
    public static Thickness GetVerticalScrollBarMargin(FrameworkElement obj);
    public static void SetVerticalScrollBarMargin(FrameworkElement obj, Thickness value);
    public static Thickness GetHorizontalScrollBarMargin(FrameworkElement obj);
    public static void SetHorizontalScrollBarMargin(FrameworkElement obj, Thickness value);
    public static bool GetEnableMiddleClickScrolling(DependencyObject obj);
    public static void SetEnableMiddleClickScrolling(DependencyObject obj, bool value);
}
[ExtensionAttribute]
public static class Microsoft.Toolkit.Uwp.UI.SkewTransformExtensions : object {
    [ExtensionAttribute]
public static Matrix GetMatrix(SkewTransform transform);
}
public class Microsoft.Toolkit.Uwp.UI.SortDescription : object {
    [CompilerGeneratedAttribute]
private string <PropertyName>k__BackingField;
    [CompilerGeneratedAttribute]
private SortDirection <Direction>k__BackingField;
    [CompilerGeneratedAttribute]
private IComparer <Comparer>k__BackingField;
    public string PropertyName { get; }
    public SortDirection Direction { get; }
    public IComparer Comparer { get; }
    public SortDescription(SortDirection direction, IComparer comparer);
    public SortDescription(string propertyName, SortDirection direction, IComparer comparer);
    [CompilerGeneratedAttribute]
public string get_PropertyName();
    [CompilerGeneratedAttribute]
public SortDirection get_Direction();
    [CompilerGeneratedAttribute]
public IComparer get_Comparer();
}
public enum Microsoft.Toolkit.Uwp.UI.SortDirection : Enum {
    public int value__;
    public static SortDirection Ascending;
    public static SortDirection Descending;
}
[ExtensionAttribute]
public static class Microsoft.Toolkit.Uwp.UI.StringExtensions : object {
    [ExtensionAttribute]
public static Vector2 ToVector2(string text);
    [ExtensionAttribute]
public static Vector3 ToVector3(string text);
    [ExtensionAttribute]
public static Vector4 ToVector4(string text);
    [ExtensionAttribute]
public static Quaternion ToQuaternion(string text);
    private static string Unbracket(string text);
    [CompilerGeneratedAttribute]
internal static Vector2 <ToVector2>g__Throw|0_0(string text);
    [CompilerGeneratedAttribute]
internal static Vector3 <ToVector3>g__Throw|1_0(string text);
    [CompilerGeneratedAttribute]
internal static Vector4 <ToVector4>g__Throw|2_0(string text);
    [CompilerGeneratedAttribute]
internal static Quaternion <ToQuaternion>g__Throw|3_0(string text);
}
public class Microsoft.Toolkit.Uwp.UI.SurfaceDialOptions : DependencyObject {
    [CompilerGeneratedAttribute]
private static SurfaceDialOptions <Default>k__BackingField;
    [CompilerGeneratedAttribute]
private RadialControllerMenuKnownIcon <Icon>k__BackingField;
    [CompilerGeneratedAttribute]
private double <StepValue>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <EnableHapticFeedback>k__BackingField;
    [CompilerGeneratedAttribute]
private double <RotationResolutionInDegrees>k__BackingField;
    [CompilerGeneratedAttribute]
private double <MinValue>k__BackingField;
    [CompilerGeneratedAttribute]
private double <MaxValue>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <EnableTapToNextControl>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <EnableMinMaxValue>k__BackingField;
    internal static SurfaceDialOptions Default { get; }
    public RadialControllerMenuKnownIcon Icon { get; public set; }
    public double StepValue { get; public set; }
    public bool EnableHapticFeedback { get; public set; }
    public double RotationResolutionInDegrees { get; public set; }
    public double MinValue { get; public set; }
    public double MaxValue { get; public set; }
    public bool EnableTapToNextControl { get; public set; }
    public bool EnableMinMaxValue { get; public set; }
    private static SurfaceDialOptions();
    [CompilerGeneratedAttribute]
internal static SurfaceDialOptions get_Default();
    [CompilerGeneratedAttribute]
public RadialControllerMenuKnownIcon get_Icon();
    [CompilerGeneratedAttribute]
public void set_Icon(RadialControllerMenuKnownIcon value);
    [CompilerGeneratedAttribute]
public double get_StepValue();
    [CompilerGeneratedAttribute]
public void set_StepValue(double value);
    [CompilerGeneratedAttribute]
public bool get_EnableHapticFeedback();
    [CompilerGeneratedAttribute]
public void set_EnableHapticFeedback(bool value);
    [CompilerGeneratedAttribute]
public double get_RotationResolutionInDegrees();
    [CompilerGeneratedAttribute]
public void set_RotationResolutionInDegrees(double value);
    [CompilerGeneratedAttribute]
public double get_MinValue();
    [CompilerGeneratedAttribute]
public void set_MinValue(double value);
    [CompilerGeneratedAttribute]
public double get_MaxValue();
    [CompilerGeneratedAttribute]
public void set_MaxValue(double value);
    [CompilerGeneratedAttribute]
public bool get_EnableTapToNextControl();
    [CompilerGeneratedAttribute]
public void set_EnableTapToNextControl(bool value);
    [CompilerGeneratedAttribute]
public bool get_EnableMinMaxValue();
    [CompilerGeneratedAttribute]
public void set_EnableMinMaxValue(bool value);
}
[MarkupExtensionReturnTypeAttribute]
public class Microsoft.Toolkit.Uwp.UI.SymbolIconExtension : TextIconExtension {
    [CompilerGeneratedAttribute]
private Symbol <Symbol>k__BackingField;
    public Symbol Symbol { get; public set; }
    [CompilerGeneratedAttribute]
public Symbol get_Symbol();
    [CompilerGeneratedAttribute]
public void set_Symbol(Symbol value);
    protected virtual object ProvideValue();
}
[MarkupExtensionReturnTypeAttribute]
public class Microsoft.Toolkit.Uwp.UI.SymbolIconSourceExtension : TextIconExtension {
    [CompilerGeneratedAttribute]
private Symbol <Symbol>k__BackingField;
    public Symbol Symbol { get; public set; }
    [CompilerGeneratedAttribute]
public Symbol get_Symbol();
    [CompilerGeneratedAttribute]
public void set_Symbol(Symbol value);
    protected virtual object ProvideValue();
}
public static class Microsoft.Toolkit.Uwp.UI.TextBoxExtensions : object {
    private static string DefaultPlaceHolder;
    private static char EscapeChar;
    private static KeyValuePair`2<char, string> AlphaCharacterRepresentation;
    private static KeyValuePair`2<char, string> NumericCharacterRepresentation;
    private static KeyValuePair`2<char, string> AlphaNumericRepresentation;
    public static DependencyProperty MaskProperty;
    public static DependencyProperty MaskPlaceholderProperty;
    public static DependencyProperty CustomMaskProperty;
    private static DependencyProperty RepresentationDictionaryProperty;
    private static DependencyProperty OldTextProperty;
    private static DependencyProperty DefaultDisplayTextProperty;
    private static DependencyProperty OldSelectionLengthProperty;
    private static DependencyProperty OldSelectionStartProperty;
    private static DependencyProperty EscapedMaskProperty;
    private static DependencyProperty EscapedCharacterIndicesProperty;
    public static DependencyProperty RegexProperty;
    public static DependencyProperty IsValidProperty;
    public static DependencyProperty ValidationModeProperty;
    public static DependencyProperty ValidationTypeProperty;
    [NullableAttribute("1")]
public static DependencyProperty SurfaceDialOptionsProperty;
    [NullableAttribute("2")]
private static RadialController _controller;
    [NullableAttribute("2")]
private static RadialControllerMenuItem _stepTextMenuItem;
    [NullableAttribute("2")]
private static TextBox _textBox;
    public static bool IsSurfaceDialOptionsSupported { get; }
    [NullableAttribute("1")]
public static RadialController Controller { get; public set; }
    private static TextBoxExtensions();
    private static void InitTextBoxMask(DependencyObject d, DependencyPropertyChangedEventArgs e);
    private static void Textbox_Loaded(object sender, RoutedEventArgs e);
    private static void Textbox_GotFocus_Mask(object sender, RoutedEventArgs e);
    [AsyncStateMachineAttribute("Microsoft.Toolkit.Uwp.UI.TextBoxExtensions/<Textbox_Paste>d__8")]
private static void Textbox_Paste(object sender, TextControlPasteEventArgs e);
    private static void SetTextBoxValue(string newValue, TextBox textbox, string mask, List`1<int> escapedChars, Dictionary`2<char, string> representationDictionary, char placeholder, int oldSelectionStart);
    private static void Textbox_SelectionChanged(object sender, RoutedEventArgs e);
    private static void Textbox_TextChanging(TextBox textbox, TextBoxTextChangingEventArgs args);
    private static int GetSelectionStart(string mask, List`1<int> escapedChars, int selectionIndex, Dictionary`2<char, string> representationDictionary);
    public static string GetMask(TextBox obj);
    public static void SetMask(TextBox obj, string value);
    public static string GetMaskPlaceholder(TextBox obj);
    public static void SetMaskPlaceholder(TextBox obj, string value);
    public static string GetCustomMask(TextBox obj);
    public static void SetCustomMask(TextBox obj, string value);
    private static void TextBoxRegexPropertyOnChange(DependencyObject sender, DependencyPropertyChangedEventArgs e);
    private static void TextBox_TextChanged(object sender, TextChangedEventArgs e);
    private static void TextBox_Loaded(object sender, RoutedEventArgs e);
    private static void TextBox_LostFocus(object sender, RoutedEventArgs e);
    private static void ValidateTextBox(TextBox textBox, bool force);
    public static string GetRegex(TextBox textBox);
    public static void SetRegex(TextBox textBox, string value);
    public static bool GetIsValid(TextBox textBox);
    public static void SetIsValid(TextBox textBox, bool value);
    public static ValidationMode GetValidationMode(TextBox textBox);
    public static void SetValidationMode(TextBox textBox, ValidationMode value);
    public static ValidationType GetValidationType(TextBox textBox);
    public static void SetValidationType(TextBox textBox, ValidationType value);
    [NullableContextAttribute("1")]
public static SurfaceDialOptions GetSurfaceDialOptions(TextBox textBox);
    [NullableContextAttribute("1")]
public static void SetSurfaceDialOptions(TextBox textBox, SurfaceDialOptions value);
    public static bool get_IsSurfaceDialOptionsSupported();
    [NullableContextAttribute("1")]
public static RadialController get_Controller();
    [NullableContextAttribute("1")]
public static void set_Controller(RadialController value);
    [NullableContextAttribute("1")]
private static void Controller_RotationChanged(RadialController sender, RadialControllerRotationChangedEventArgs args);
    [NullableContextAttribute("1")]
private static void OnSurfaceDialOptionsPropertyChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    [NullableContextAttribute("1")]
private static void TextBox_LostFocus_SurfaceDial(object sender, RoutedEventArgs e);
    [NullableContextAttribute("1")]
private static void TextBox_GotFocus_SurfaceDial(object sender, RoutedEventArgs e);
    [NullableContextAttribute("1")]
private static void Controller_ButtonClicked(RadialController sender, RadialControllerButtonClickedEventArgs args);
}
public abstract class Microsoft.Toolkit.Uwp.UI.TextIconExtension : MarkupExtension {
    [CompilerGeneratedAttribute]
private double <FontSize>k__BackingField;
    [ThreadStaticAttribute]
private static FontFamily segoeMDL2AssetsFontFamily;
    [CompilerGeneratedAttribute]
private FontWeight <FontWeight>k__BackingField;
    [CompilerGeneratedAttribute]
private FontStyle <FontStyle>k__BackingField;
    [CompilerGeneratedAttribute]
private Brush <Foreground>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsTextScaleFactorEnabled>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <MirroredWhenRightToLeft>k__BackingField;
    public double FontSize { get; public set; }
    protected static FontFamily SegoeMDL2AssetsFontFamily { get; }
    public FontWeight FontWeight { get; public set; }
    public FontStyle FontStyle { get; public set; }
    public Brush Foreground { get; public set; }
    public bool IsTextScaleFactorEnabled { get; public set; }
    public bool MirroredWhenRightToLeft { get; public set; }
    [CompilerGeneratedAttribute]
public double get_FontSize();
    [CompilerGeneratedAttribute]
public void set_FontSize(double value);
    protected static FontFamily get_SegoeMDL2AssetsFontFamily();
    [CompilerGeneratedAttribute]
public FontWeight get_FontWeight();
    [CompilerGeneratedAttribute]
public void set_FontWeight(FontWeight value);
    [CompilerGeneratedAttribute]
public FontStyle get_FontStyle();
    [CompilerGeneratedAttribute]
public void set_FontStyle(FontStyle value);
    [CompilerGeneratedAttribute]
public Brush get_Foreground();
    [CompilerGeneratedAttribute]
public void set_Foreground(Brush value);
    [CompilerGeneratedAttribute]
public bool get_IsTextScaleFactorEnabled();
    [CompilerGeneratedAttribute]
public void set_IsTextScaleFactorEnabled(bool value);
    [CompilerGeneratedAttribute]
public bool get_MirroredWhenRightToLeft();
    [CompilerGeneratedAttribute]
public void set_MirroredWhenRightToLeft(bool value);
}
public static class Microsoft.Toolkit.Uwp.UI.TitleBarExtensions : object {
    public static Color GetBackgroundColor(Page page);
    public static void SetBackgroundColor(Page page, Color value);
    public static Color GetButtonBackgroundColor(Page page);
    public static void SetButtonBackgroundColor(Page page, Color value);
    public static Color GetButtonForegroundColor(Page page);
    public static void SetButtonForegroundColor(Page page, Color value);
    public static Color GetButtonHoverBackgroundColor(Page page);
    public static void SetButtonHoverBackgroundColor(Page page, Color value);
    public static Color GetButtonHoverForegroundColor(Page page);
    public static void SetButtonHoverForegroundColor(Page page, Color value);
    public static Color GetButtonInactiveBackgroundColor(Page page);
    public static void SetButtonInactiveBackgroundColor(Page page, Color value);
    public static Color GetButtonInactiveForegroundColor(Page page);
    public static void SetButtonInactiveForegroundColor(Page page, Color value);
    public static Color GetButtonPressedBackgroundColor(Page page);
    public static void SetButtonPressedBackgroundColor(Page page, Color value);
    public static Color GetButtonPressedForegroundColor(Page page);
    public static void SetButtonPressedForegroundColor(Page page, Color value);
    public static Color GetForegroundColor(Page page);
    public static void SetForegroundColor(Page page, Color value);
    public static Color GetInactiveBackgroundColor(Page page);
    public static void SetInactiveBackgroundColor(Page page, Color value);
    public static Color GetInactiveForegroundColor(Page page);
    public static void SetInactiveForegroundColor(Page page, Color value);
    private static ApplicationViewTitleBar GetTitleBar();
}
[ExtensionAttribute]
public static class Microsoft.Toolkit.Uwp.UI.TranslateTransformExtensions : object {
    [ExtensionAttribute]
public static Matrix GetMatrix(TranslateTransform transform);
}
public class Microsoft.Toolkit.Uwp.UI.Triggers.CompareStateTrigger : StateTriggerBase {
    public static DependencyProperty ValueProperty;
    public static DependencyProperty ToProperty;
    public static DependencyProperty ComparisonProperty;
    public object Value { get; public set; }
    public object To { get; public set; }
    public Comparison Comparison { get; public set; }
    private static CompareStateTrigger();
    private void UpdateTrigger();
    public object get_Value();
    public void set_Value(object value);
    private static void OnValuePropertyChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    public object get_To();
    public void set_To(object value);
    public Comparison get_Comparison();
    public void set_Comparison(Comparison value);
    internal Comparison CompareValues();
}
public enum Microsoft.Toolkit.Uwp.UI.Triggers.Comparison : Enum {
    public int value__;
    public static Comparison LessThan;
    public static Comparison LessThanOrEqual;
    public static Comparison Equal;
    public static Comparison GreaterThanOrEqual;
    public static Comparison GreaterThan;
}
public enum Microsoft.Toolkit.Uwp.UI.Triggers.ConnectionState : Enum {
    public int value__;
    public static ConnectionState Connected;
    public static ConnectionState Disconnected;
}
public class Microsoft.Toolkit.Uwp.UI.Triggers.ControlSizeTrigger : StateTriggerBase {
    public static DependencyProperty CanTriggerProperty;
    public static DependencyProperty MaxWidthProperty;
    public static DependencyProperty MinWidthProperty;
    public static DependencyProperty MaxHeightProperty;
    public static DependencyProperty MinHeightProperty;
    public static DependencyProperty TargetElementProperty;
    [CompilerGeneratedAttribute]
private bool <IsActive>k__BackingField;
    public bool CanTrigger { get; public set; }
    public double MaxWidth { get; public set; }
    public double MinWidth { get; public set; }
    public double MaxHeight { get; public set; }
    public double MinHeight { get; public set; }
    public FrameworkElement TargetElement { get; public set; }
    public bool IsActive { get; private set; }
    private static ControlSizeTrigger();
    public bool get_CanTrigger();
    public void set_CanTrigger(bool value);
    public double get_MaxWidth();
    public void set_MaxWidth(double value);
    public double get_MinWidth();
    public void set_MinWidth(double value);
    public double get_MaxHeight();
    public void set_MaxHeight(double value);
    public double get_MinHeight();
    public void set_MinHeight(double value);
    public FrameworkElement get_TargetElement();
    public void set_TargetElement(FrameworkElement value);
    [CompilerGeneratedAttribute]
public bool get_IsActive();
    [CompilerGeneratedAttribute]
private void set_IsActive(bool value);
    private static void OnTargetElementPropertyChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    private void OnTargetElementSizeChanged(object sender, SizeChangedEventArgs e);
    private void UpdateTargetElement(FrameworkElement oldValue, FrameworkElement newValue);
    private void UpdateTrigger();
}
public class Microsoft.Toolkit.Uwp.UI.Triggers.FullScreenModeStateTrigger : StateTriggerBase {
    private bool _isFullScreen;
    public bool IsFullScreen { get; public set; }
    private void FullScreenModeTrigger_VisibleBoundsChanged(ApplicationView sender, object args);
    public bool get_IsFullScreen();
    public void set_IsFullScreen(bool value);
    private void UpdateTrigger(bool isFullScreenMode);
}
public class Microsoft.Toolkit.Uwp.UI.Triggers.IsEqualStateTrigger : StateTriggerBase {
    public static DependencyProperty ValueProperty;
    public static DependencyProperty ToProperty;
    public object Value { get; public set; }
    public object To { get; public set; }
    private static IsEqualStateTrigger();
    private void UpdateTrigger();
    public object get_Value();
    public void set_Value(object value);
    private static void OnValuePropertyChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    public object get_To();
    public void set_To(object value);
    internal static bool AreValuesEqual(object value1, object value2, bool convertType);
    private static bool ConvertTypeEquals(object value1, object value2);
    private static object ConvertToEnum(Type enumType, object value);
}
public class Microsoft.Toolkit.Uwp.UI.Triggers.IsNotEqualStateTrigger : StateTriggerBase {
    public static DependencyProperty ValueProperty;
    public static DependencyProperty ToProperty;
    public object Value { get; public set; }
    public object To { get; public set; }
    private static IsNotEqualStateTrigger();
    private void UpdateTrigger();
    public object get_Value();
    public void set_Value(object value);
    private static void OnValuePropertyChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    public object get_To();
    public void set_To(object value);
}
public class Microsoft.Toolkit.Uwp.UI.Triggers.IsNullOrEmptyStateTrigger : StateTriggerBase {
    public static DependencyProperty ValueProperty;
    public object Value { get; public set; }
    private static IsNullOrEmptyStateTrigger();
    public object get_Value();
    public void set_Value(object value);
    private static void OnValuePropertyChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    private static bool IsNullOrEmpty(object val);
}
public class Microsoft.Toolkit.Uwp.UI.Triggers.NetworkConnectionStateTrigger : StateTriggerBase {
    private DispatcherQueue _dispatcherQueue;
    public static DependencyProperty ConnectionStateProperty;
    public ConnectionState ConnectionState { get; public set; }
    private static NetworkConnectionStateTrigger();
    private void NetworkInformation_NetworkStatusChanged(object sender);
    private void UpdateState();
    public ConnectionState get_ConnectionState();
    public void set_ConnectionState(ConnectionState value);
    private static void OnConnectionStatePropertyChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    [CompilerGeneratedAttribute]
private void <.ctor>b__1_0(NetworkConnectionStateTrigger instance, object source);
}
public class Microsoft.Toolkit.Uwp.UI.Triggers.RegexStateTrigger : StateTriggerBase {
    public static DependencyProperty ValueProperty;
    public static DependencyProperty ExpressionProperty;
    public static DependencyProperty OptionsProperty;
    public string Value { get; public set; }
    public string Expression { get; public set; }
    public RegexOptions Options { get; public set; }
    private static RegexStateTrigger();
    private void UpdateTrigger();
    public string get_Value();
    public void set_Value(string value);
    private static void OnValuePropertyChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    public string get_Expression();
    public void set_Expression(string value);
    public RegexOptions get_Options();
    public void set_Options(RegexOptions value);
}
public class Microsoft.Toolkit.Uwp.UI.Triggers.UserHandPreferenceStateTrigger : StateTriggerBase {
    private static HandPreference handPreference;
    public static DependencyProperty HandPreferenceProperty;
    public HandPreference HandPreference { get; public set; }
    private static UserHandPreferenceStateTrigger();
    public HandPreference get_HandPreference();
    public void set_HandPreference(HandPreference value);
    private static void OnHandPreferencePropertyChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
}
public class Microsoft.Toolkit.Uwp.UI.Triggers.UserInteractionModeStateTrigger : StateTriggerBase {
    public static DependencyProperty InteractionModeProperty;
    public UserInteractionMode InteractionMode { get; public set; }
    private static UserInteractionModeStateTrigger();
    public UserInteractionMode get_InteractionMode();
    public void set_InteractionMode(UserInteractionMode value);
    private static void OnInteractionModeChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    private void UpdateTrigger(UserInteractionMode interactionMode);
    private void UserInteractionModeTrigger_SizeChanged(object sender, WindowSizeChangedEventArgs e);
    [CompilerGeneratedAttribute]
private void <.ctor>b__0_0(UserInteractionModeStateTrigger instance, object source, WindowSizeChangedEventArgs eventArgs);
}
internal class Microsoft.Toolkit.Uwp.UI.TypedResourceKey`1 : object {
    [CompilerGeneratedAttribute]
private string <Key>k__BackingField;
    public string Key { get; }
    public TypedResourceKey`1(string key);
    [CompilerGeneratedAttribute]
public string get_Key();
    public static TypedResourceKey`1<TValue> op_Implicit(string key);
}
[ExtensionAttribute]
public static class Microsoft.Toolkit.Uwp.UI.UIElementExtensions : object {
    public static DependencyProperty ClipToBoundsProperty;
    private static UIElementExtensions();
    public static bool GetClipToBounds(UIElement element);
    public static void SetClipToBounds(UIElement element, bool value);
    private static void OnClipToBoundsPropertyChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    [ExtensionAttribute]
public static Point CoordinatesFrom(UIElement target, UIElement parent);
    [ExtensionAttribute]
public static Point CoordinatesTo(UIElement parent, UIElement target);
}
internal class Microsoft.Toolkit.Uwp.UI.VectorChangedEventArgs : object {
    [CompilerGeneratedAttribute]
private CollectionChange <CollectionChange>k__BackingField;
    [CompilerGeneratedAttribute]
private UInt32 <Index>k__BackingField;
    public CollectionChange CollectionChange { get; }
    public UInt32 Index { get; }
    public VectorChangedEventArgs(CollectionChange cc, int index, object item);
    [CompilerGeneratedAttribute]
public sealed virtual CollectionChange get_CollectionChange();
    [CompilerGeneratedAttribute]
public sealed virtual UInt32 get_Index();
}
[ExtensionAttribute]
public static class Microsoft.Toolkit.Uwp.UI.VisualExtensions : object {
    public static DependencyProperty AnchorPointProperty;
    public static DependencyProperty CenterPointProperty;
    public static DependencyProperty OffsetProperty;
    public static DependencyProperty TranslationProperty;
    public static DependencyProperty OpacityProperty;
    public static DependencyProperty RotationAngleProperty;
    public static DependencyProperty RotationAngleInDegreesProperty;
    public static DependencyProperty RotationAxisProperty;
    public static DependencyProperty ScaleProperty;
    public static DependencyProperty SizeProperty;
    public static DependencyProperty NormalizedCenterPointProperty;
    private static VisualExtensions();
    [ExtensionAttribute]
public static Visual GetVisual(UIElement element);
    public static string GetAnchorPoint(DependencyObject obj);
    public static void SetAnchorPoint(DependencyObject obj, string value);
    public static string GetCenterPoint(DependencyObject obj);
    public static void SetCenterPoint(DependencyObject obj, string value);
    public static string GetOffset(DependencyObject obj);
    public static void SetOffset(DependencyObject obj, string value);
    public static string GetTranslation(DependencyObject obj);
    public static void SetTranslation(DependencyObject obj, string value);
    public static double GetOpacity(DependencyObject obj);
    public static void SetOpacity(DependencyObject obj, double value);
    public static double GetRotationAngle(DependencyObject obj);
    public static void SetRotationAngle(DependencyObject obj, double value);
    public static double GetRotationAngleInDegrees(DependencyObject obj);
    public static void SetRotationAngleInDegrees(DependencyObject obj, double value);
    public static string GetRotationAxis(DependencyObject obj);
    public static void SetRotationAxis(DependencyObject obj, string value);
    public static string GetScale(DependencyObject obj);
    public static void SetScale(DependencyObject obj, string value);
    public static string GetSize(DependencyObject obj);
    public static void SetSize(DependencyObject obj, string value);
    public static string GetNormalizedCenterPoint(DependencyObject obj);
    public static void SetNormalizedCenterPoint(DependencyObject obj, string value);
    private static void OnAnchorPointChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    private static void OnCenterPointChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    private static void OnOffsetChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    private static void OnTranslationChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    private static void OnOpacityChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    private static void OnRotationAngleChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    private static void OnRotationAngleInDegreesChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    private static void OnRotationAxisChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    private static void OnScaleChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    private static void OnSizeChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    private static void OnNormalizedCenterPointChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    private static string GetAnchorPointForElement(UIElement element);
    private static void SetAnchorPointForElement(string value, UIElement element);
    private static string GetCenterPointForElement(UIElement element);
    private static void SetCenterPointForElement(string value, UIElement element);
    private static string GetOffsetForElement(UIElement element);
    private static void SetOffsetForElement(string value, UIElement element);
    private static string GetTranslationForElement(UIElement element);
    private static void SetTranslationForElement(string value, UIElement element);
    private static double GetOpacityForElement(UIElement element);
    private static void SetOpacityForElement(double value, UIElement element);
    private static double GetRotationAngleForElement(UIElement element);
    private static void SetRotationAngleForElement(double value, UIElement element);
    private static double GetRotationAngleInDegreesForElement(UIElement element);
    private static void SetRotationAngleInDegreesForElement(double value, UIElement element);
    private static string GetRotationAxisForElement(UIElement element);
    private static void SetRotationAxisForElement(string value, UIElement element);
    private static string GetScaleForElement(UIElement element);
    private static void SetScaleForElement(string value, UIElement element);
    private static string GetSizeForElement(UIElement element);
    private static void SetSizeForElement(string value, UIElement element);
}
public static class Microsoft.Toolkit.Uwp.UI.WebViewExtensions : object {
    public static DependencyProperty ContentProperty;
    public static DependencyProperty ContentUriProperty;
    private static WebViewExtensions();
    public static string GetContent(DependencyObject obj);
    public static void SetContent(DependencyObject obj, string value);
    public static Uri GetContentUri(DependencyObject obj);
    public static void SetContentUri(DependencyObject obj, Uri value);
    private static void OnContentChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    private static void OnContentUriChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("27524")]
internal class System.Runtime.CompilerServices.NullableAttribute : Attribute {
    public Byte[] NullableFlags;
    public NullableAttribute(byte );
    public NullableAttribute(Byte[] );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("5196")]
internal class System.Runtime.CompilerServices.NullableContextAttribute : Attribute {
    public byte Flag;
    public NullableContextAttribute(byte );
}
internal static class ThisAssembly : object {
    internal static string AssemblyVersion;
    internal static string AssemblyFileVersion;
    internal static string AssemblyInformationalVersion;
    internal static string AssemblyName;
    internal static string AssemblyTitle;
    internal static string AssemblyConfiguration;
    internal static string GitCommitId;
    internal static bool IsPublicRelease;
    internal static bool IsPrerelease;
    internal static DateTime GitCommitDate;
    internal static string RootNamespace;
    private static ThisAssembly();
}
