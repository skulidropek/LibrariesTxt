[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class Microsoft.Toolkit.ArrayExtensions : object {
    [NullableContextAttribute("2")]
[IteratorStateMachineAttribute("Microsoft.Toolkit.ArrayExtensions/<GetColumn>d__0`1")]
[ExtensionAttribute]
public static IEnumerable`1<T> GetColumn(T[][] rectarray, int column);
    [ExtensionAttribute]
public static string ToArrayString(T[] array);
    [ExtensionAttribute]
public static string ToArrayString(T[][] mdarray);
    [ExtensionAttribute]
public static string ToArrayString(T[0...,0...] array);
}
[NullableContextAttribute("1")]
public interface Microsoft.Toolkit.Collections.IIncrementalSource`1 {
    public abstract virtual Task`1<IEnumerable`1<TSource>> GetPagedItemsAsync(int pageIndex, int pageSize, CancellationToken cancellationToken);
}
[NullableContextAttribute("1")]
public interface Microsoft.Toolkit.Collections.IReadOnlyObservableGroup {
    public object Key { get; }
    public int Count { get; }
    public abstract virtual object get_Key();
    public abstract virtual int get_Count();
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[DebuggerDisplayAttribute("Key = {Key}, Count = {Count}")]
public class Microsoft.Toolkit.Collections.ObservableGroup`2 : ObservableCollection`1<TValue> {
    private static PropertyChangedEventArgs KeyChangedEventArgs;
    private TKey key;
    public TKey Key { get; public set; }
    private object Microsoft.Toolkit.Collections.IReadOnlyObservableGroup.Key { get; }
    public ObservableGroup`2(TKey key);
    public ObservableGroup`2(IGrouping`2<TKey, TValue> grouping);
    public ObservableGroup`2(TKey key, IEnumerable`1<TValue> collection);
    private static ObservableGroup`2();
    public sealed virtual TKey get_Key();
    public void set_Key(TKey value);
    private sealed virtual override object Microsoft.Toolkit.Collections.IReadOnlyObservableGroup.get_Key();
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class Microsoft.Toolkit.Collections.ObservableGroupedCollection`2 : ObservableCollection`1<ObservableGroup`2<TKey, TValue>> {
    public ObservableGroupedCollection`2(IEnumerable`1<IGrouping`2<TKey, TValue>> collection);
    internal bool TryGetList(List`1& list);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class Microsoft.Toolkit.Collections.ObservableGroupedCollectionExtensions : object {
    [ExtensionAttribute]
public static ObservableGroup`2<TKey, TValue> First(ObservableGroupedCollection`2<TKey, TValue> source, TKey key);
    [ExtensionAttribute]
public static ObservableGroup`2<TKey, TValue> FirstOrDefault(ObservableGroupedCollection`2<TKey, TValue> source, TKey key);
    [ExtensionAttribute]
public static TValue ElementAt(ObservableGroupedCollection`2<TKey, TValue> source, TKey key, int index);
    [ExtensionAttribute]
public static TValue ElementAtOrDefault(ObservableGroupedCollection`2<TKey, TValue> source, TKey key, int index);
    [ExtensionAttribute]
public static ObservableGroup`2<TKey, TValue> AddGroup(ObservableGroupedCollection`2<TKey, TValue> source, TKey key, TValue value);
    [ExtensionAttribute]
public static ObservableGroup`2<TKey, TValue> AddGroup(ObservableGroupedCollection`2<TKey, TValue> source, TKey key, TValue[] collection);
    [ExtensionAttribute]
public static ObservableGroup`2<TKey, TValue> AddGroup(ObservableGroupedCollection`2<TKey, TValue> source, TKey key, IEnumerable`1<TValue> collection);
    [ExtensionAttribute]
public static ObservableGroup`2<TKey, TValue> AddItem(ObservableGroupedCollection`2<TKey, TValue> source, TKey key, TValue item);
    [ExtensionAttribute]
public static ObservableGroup`2<TKey, TValue> InsertItem(ObservableGroupedCollection`2<TKey, TValue> source, TKey key, int index, TValue item);
    [ExtensionAttribute]
public static ObservableGroup`2<TKey, TValue> SetItem(ObservableGroupedCollection`2<TKey, TValue> source, TKey key, int index, TValue item);
    [ExtensionAttribute]
public static void RemoveGroup(ObservableGroupedCollection`2<TKey, TValue> source, TKey key);
    [ExtensionAttribute]
public static void RemoveItem(ObservableGroupedCollection`2<TKey, TValue> source, TKey key, TValue item, bool removeGroupIfEmpty);
    [ExtensionAttribute]
public static void RemoveItemAt(ObservableGroupedCollection`2<TKey, TValue> source, TKey key, int index, bool removeGroupIfEmpty);
    [CompilerGeneratedAttribute]
internal static void <First>g__ThrowArgumentExceptionForKeyNotFound|0_0();
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
internal static ObservableGroup`2<TKey, TValue> <FirstOrDefault>g__FirstOrDefaultWithLinq|1_0(ObservableGroupedCollection`2<TKey, TValue> source, TKey key);
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
internal static void <RemoveGroup>g__RemoveGroupWithLinq|10_0(ObservableGroupedCollection`2<TKey, TValue> source, TKey key);
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
internal static void <RemoveItem>g__RemoveItemWithLinq|11_0(ObservableGroupedCollection`2<TKey, TValue> source, TKey key, TValue item, bool removeGroupIfEmpty);
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
internal static void <RemoveItemAt>g__RemoveItemAtWithLinq|12_0(ObservableGroupedCollection`2<TKey, TValue> source, TKey key, int index, bool removeGroupIfEmpty);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class Microsoft.Toolkit.Collections.ReadOnlyObservableGroup`2 : ReadOnlyObservableCollection`1<TValue> {
    [CompilerGeneratedAttribute]
private TKey <Key>k__BackingField;
    public TKey Key { get; }
    private object Microsoft.Toolkit.Collections.IReadOnlyObservableGroup.Key { get; }
    public ReadOnlyObservableGroup`2(TKey key, ObservableCollection`1<TValue> collection);
    public ReadOnlyObservableGroup`2(ObservableGroup`2<TKey, TValue> group);
    public ReadOnlyObservableGroup`2(TKey key, IEnumerable`1<TValue> collection);
    [CompilerGeneratedAttribute]
public sealed virtual TKey get_Key();
    private sealed virtual override object Microsoft.Toolkit.Collections.IReadOnlyObservableGroup.get_Key();
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class Microsoft.Toolkit.Collections.ReadOnlyObservableGroupedCollection`2 : ReadOnlyObservableCollection`1<ReadOnlyObservableGroup`2<TKey, TValue>> {
    public ReadOnlyObservableGroupedCollection`2(ObservableGroupedCollection`2<TKey, TValue> collection);
    public ReadOnlyObservableGroupedCollection`2(IEnumerable`1<ReadOnlyObservableGroup`2<TKey, TValue>> collection);
    public ReadOnlyObservableGroupedCollection`2(IEnumerable`1<IGrouping`2<TKey, TValue>> collection);
    private void OnSourceCollectionChanged(object sender, NotifyCollectionChangedEventArgs e);
    [CompilerGeneratedAttribute]
internal static void <OnSourceCollectionChanged>g__ThrowNotSupportedException|3_0();
}
public static class Microsoft.Toolkit.Converters : object {
    [NullableContextAttribute("1")]
public static string ToFileSizeString(long size);
}
public class Microsoft.Toolkit.Deferred.DeferredCancelEventArgs : DeferredEventArgs {
    [CompilerGeneratedAttribute]
private bool <Cancel>k__BackingField;
    public bool Cancel { get; public set; }
    [CompilerGeneratedAttribute]
public bool get_Cancel();
    [CompilerGeneratedAttribute]
public void set_Cancel(bool value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.Toolkit.Deferred.DeferredEventArgs : EventArgs {
    private object _eventDeferralLock;
    [NullableAttribute("2")]
private EventDeferral _eventDeferral;
    public static DeferredEventArgs Empty { get; }
    public static DeferredEventArgs get_Empty();
    public EventDeferral GetDeferral();
    [NullableContextAttribute("2")]
[BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
[ObsoleteAttribute("This is an internal only method to be used by EventHandler extension classes, public callers should call GetDeferral() instead.")]
public EventDeferral GetCurrentDeferralAndReset();
}
public class Microsoft.Toolkit.Deferred.EventDeferral : object {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private TaskCompletionSource`1<object> _taskCompletionSource;
    public void Complete();
    [NullableContextAttribute("1")]
[AsyncStateMachineAttribute("Microsoft.Toolkit.Deferred.EventDeferral/<WaitForCompletion>d__3")]
[BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
[ObsoleteAttribute("This is an internal only method to be used by EventHandler extension classes, public callers should call GetDeferral() instead on the DeferredEventArgs.")]
public Task WaitForCompletion(CancellationToken cancellationToken);
    public sealed virtual void Dispose();
    [CompilerGeneratedAttribute]
private void <WaitForCompletion>b__3_0();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class Microsoft.Toolkit.Deferred.EventHandlerExtensions : object {
    [ExtensionAttribute]
public static Task InvokeAsync(EventHandler`1<T> eventHandler, object sender, T eventArgs);
    [ExtensionAttribute]
public static Task InvokeAsync(EventHandler`1<T> eventHandler, object sender, T eventArgs, CancellationToken cancellationToken);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class Microsoft.Toolkit.Extensions.ISettingsStorageHelperExtensions : object {
    [ExtensionAttribute]
public static TValue GetValueOrDefault(ISettingsStorageHelper`1<TKey> storageHelper, TKey key, TValue fallback);
    [ExtensionAttribute]
public static TValue Read(ISettingsStorageHelper`1<TKey> storageHelper, TKey key);
    [ExtensionAttribute]
public static void Delete(ISettingsStorageHelper`1<TKey> storageHelper, TKey key);
    private static void ThrowKeyNotFoundException(TKey key);
}
public enum Microsoft.Toolkit.Helpers.DirectoryItemType : Enum {
    public int value__;
    public static DirectoryItemType None;
    public static DirectoryItemType File;
    public static DirectoryItemType Folder;
}
[NullableContextAttribute("1")]
public interface Microsoft.Toolkit.Helpers.IFileStorageHelper {
    [NullableContextAttribute("2")]
public abstract virtual Task`1<T> ReadFileAsync(string filePath, T default);
    public abstract virtual Task`1<IEnumerable`1<ValueTuple`2<DirectoryItemType, string>>> ReadFolderAsync(string folderPath);
    public abstract virtual Task CreateFileAsync(string filePath, T value);
    public abstract virtual Task CreateFolderAsync(string folderPath);
    public abstract virtual Task`1<bool> TryDeleteItemAsync(string itemPath);
    public abstract virtual Task`1<bool> TryRenameItemAsync(string itemPath, string newName);
}
[NullableContextAttribute("1")]
public interface Microsoft.Toolkit.Helpers.IObjectSerializer {
    [NullableContextAttribute("2")]
public abstract virtual string Serialize(T value);
    public abstract virtual T Deserialize(string value);
}
[NullableContextAttribute("1")]
public interface Microsoft.Toolkit.Helpers.ISettingsStorageHelper`1 {
    [NullableContextAttribute("2")]
public abstract virtual bool TryRead(TKey key, TValue& value);
    public abstract virtual void Save(TKey key, TValue value);
    public abstract virtual bool TryDelete(TKey key);
    public abstract virtual void Clear();
}
public class Microsoft.Toolkit.Helpers.SystemSerializer : object {
    [NullableContextAttribute("1")]
public sealed virtual T Deserialize(string value);
    [NullableContextAttribute("2")]
public sealed virtual string Serialize(T value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class Microsoft.Toolkit.StringExtensions : object {
    internal static string PhoneNumberRegex;
    internal static string CharactersRegex;
    internal static string EmailRegex;
    private static string RemoveHtmlTagsRegex;
    private static Regex RemoveHtmlCommentsRegex;
    private static Regex RemoveHtmlScriptsRegex;
    private static Regex RemoveHtmlStylesRegex;
    private static StringExtensions();
    [ExtensionAttribute]
public static bool IsEmail(string str);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static bool IsDecimal(string str);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static bool IsNumeric(string str);
    [ExtensionAttribute]
public static bool IsPhoneNumber(string str);
    [ExtensionAttribute]
public static bool IsCharacterString(string str);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static string DecodeHtml(string htmlText);
    [ExtensionAttribute]
public static string FixHtml(string html);
    [ExtensionAttribute]
public static string Truncate(string value, int length);
    [ExtensionAttribute]
[ObsoleteAttribute("This method will be removed in a future version of the Toolkit. Use the native C# string interpolation syntax instead, see: https://docs.microsoft.com/dotnet/csharp/language-reference/tokens/interpolated")]
public static string AsFormat(string format, Object[] args);
    [ExtensionAttribute]
public static string Truncate(string value, int length, bool ellipsis);
}
[ExtensionAttribute]
public static class Microsoft.Toolkit.TaskExtensions : object {
    [NullableContextAttribute("1")]
[ExtensionAttribute]
public static object GetResultOrDefault(Task task);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static T GetResultOrDefault(Task`1<T> task);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[AttributeUsageAttribute("10368")]
internal class System.Diagnostics.CodeAnalysis.NotNullIfNotNullAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <ParameterName>k__BackingField;
    public string ParameterName { get; }
    public NotNullIfNotNullAttribute(string parameterName);
    [CompilerGeneratedAttribute]
public string get_ParameterName();
}
[AttributeUsageAttribute("2048")]
internal class System.Diagnostics.CodeAnalysis.NotNullWhenAttribute : Attribute {
    [CompilerGeneratedAttribute]
private bool <ReturnValue>k__BackingField;
    public bool ReturnValue { get; }
    public NotNullWhenAttribute(bool returnValue);
    [CompilerGeneratedAttribute]
public bool get_ReturnValue();
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("27524")]
internal class System.Runtime.CompilerServices.NullableAttribute : Attribute {
    public Byte[] NullableFlags;
    public NullableAttribute(byte );
    public NullableAttribute(Byte[] );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("5196")]
internal class System.Runtime.CompilerServices.NullableContextAttribute : Attribute {
    public byte Flag;
    public NullableContextAttribute(byte );
}
[GeneratedCodeAttribute("Nerdbank.GitVersioning.Tasks", "3.3.37.35081")]
[ExcludeFromCodeCoverageAttribute]
internal static class ThisAssembly : object {
    internal static string AssemblyVersion;
    internal static string AssemblyFileVersion;
    internal static string AssemblyInformationalVersion;
    internal static string AssemblyName;
    internal static string AssemblyTitle;
    internal static string AssemblyConfiguration;
    internal static string GitCommitId;
    internal static string PublicKey;
    internal static string PublicKeyToken;
    internal static bool IsPublicRelease;
    internal static bool IsPrerelease;
    internal static DateTime GitCommitDate;
    internal static string RootNamespace;
    private static ThisAssembly();
}
