internal class FxResources.Microsoft.VisualBasic.SR : object {
}
public enum Microsoft.VisualBasic.CallType : Enum {
    public int value__;
    public static CallType Method;
    public static CallType Get;
    public static CallType Let;
    public static CallType Set;
}
internal class Microsoft.VisualBasic.CompilerServices.CacheSet`1 : object {
    private Dictionary`2<T, LinkedListNode`1<T>> _dict;
    private LinkedList`1<T> _list;
    private int _maxSize;
    internal CacheSet`1(int maxSize);
    internal T GetExistingOrAdd(T key);
}
internal class Microsoft.VisualBasic.CompilerServices.ConversionResolution : object {
    private static ConversionClass[][] s_conversionTable;
    internal static Int32[] NumericSpecificityRank;
    internal static TypeCode[][] ForLoopWidestTypeCode;
    private static ConversionResolution();
    [ConditionalAttribute("DEBUG")]
private static void VerifyTypeCodeEnum();
    internal static ConversionClass ClassifyConversion(Type targetType, Type sourceType, Method& operatorMethod);
    internal static ConversionClass ClassifyIntrinsicConversion(TypeCode targetTypeCode, TypeCode sourceTypeCode);
    internal static ConversionClass ClassifyPredefinedCLRConversion(Type targetType, Type sourceType);
    private static ConversionClass ClassifyCLRArrayToInterfaceConversion(Type targetInterface, Type sourceArrayType);
    private static ConversionClass ClassifyCLRConversionForArrayElementTypes(Type targetElementType, Type sourceElementType);
    internal static ConversionClass ClassifyPredefinedConversion(Type targetType, Type sourceType);
    private static List`1<Method> CollectConversionOperators(Type targetType, Type sourceType, Boolean& foundTargetTypeOperators, Boolean& foundSourceTypeOperators);
    private static bool Encompasses(Type larger, Type smaller);
    private static bool NotEncompasses(Type larger, Type smaller);
    private static Type MostEncompassing(List`1<Type> types);
    private static Type MostEncompassed(List`1<Type> types);
    private static void FindBestMatch(Type targetType, Type sourceType, List`1<Method> searchList, List`1<Method> resultList, Boolean& genericMembersExistInList);
    private static void InsertInOperatorListIfLessGenericThanExisting(Method operatorToInsert, List`1<Method> operatorList, Boolean& genericMembersExistInList);
    private static List`1<Method> ResolveConversion(Type targetType, Type sourceType, List`1<Method> operatorSet, bool wideningOnly, Boolean& resolutionIsAmbiguous);
    internal static ConversionClass ClassifyUserDefinedConversion(Type targetType, Type sourceType, Method& operatorMethod);
    private static ConversionClass DoClassifyUserDefinedConversion(Type targetType, Type sourceType, Method& operatorMethod, Boolean& foundTargetTypeOperators, Boolean& foundSourceTypeOperators);
}
[DebuggerNonUserCodeAttribute]
[EditorBrowsableAttribute("1")]
public class Microsoft.VisualBasic.CompilerServices.Conversions : object {
    private static object GetEnumValue(object value);
    public static bool ToBoolean(string value);
    public static bool ToBoolean(object value);
    public static byte ToByte(string value);
    public static byte ToByte(object value);
    [CLSCompliantAttribute("False")]
public static sbyte ToSByte(string value);
    [CLSCompliantAttribute("False")]
public static sbyte ToSByte(object value);
    public static short ToShort(string value);
    public static short ToShort(object value);
    [CLSCompliantAttribute("False")]
public static ushort ToUShort(string value);
    [CLSCompliantAttribute("False")]
public static ushort ToUShort(object value);
    public static int ToInteger(string value);
    public static int ToInteger(object value);
    [CLSCompliantAttribute("False")]
public static UInt32 ToUInteger(string value);
    [CLSCompliantAttribute("False")]
public static UInt32 ToUInteger(object value);
    public static long ToLong(string value);
    public static long ToLong(object value);
    [CLSCompliantAttribute("False")]
public static ulong ToULong(string value);
    [CLSCompliantAttribute("False")]
public static ulong ToULong(object value);
    public static decimal ToDecimal(bool value);
    public static decimal ToDecimal(string value);
    public static decimal ToDecimal(object value);
    private static decimal ParseDecimal(string value, NumberFormatInfo numberFormat);
    private static NumberFormatInfo GetNormalizedNumberFormat(NumberFormatInfo inNumberFormat);
    public static float ToSingle(string value);
    public static float ToSingle(object value);
    public static double ToDouble(string value);
    public static double ToDouble(object value);
    private static double ParseDouble(string value);
    public static DateTime ToDate(string value);
    public static DateTime ToDate(object value);
    public static char ToChar(string value);
    public static char ToChar(object value);
    public static Char[] ToCharArrayRankOne(string value);
    public static Char[] ToCharArrayRankOne(object value);
    public static string ToString(short value);
    public static string ToString(int value);
    [CLSCompliantAttribute("False")]
public static string ToString(UInt32 value);
    public static string ToString(long value);
    [CLSCompliantAttribute("False")]
public static string ToString(ulong value);
    public static string ToString(float value);
    public static string ToString(double value);
    public static string ToString(DateTime value);
    public static string ToString(decimal value);
    public static string ToString(object value);
    public static string ToString(bool value);
    public static string ToString(byte value);
    public static string ToString(char value);
    public static CultureInfo GetCultureInfo();
    public static string ToHalfwidthNumbers(string s, CultureInfo culture);
    public static bool IsHexOrOctValue(string value, Int64& i64Value);
    [CLSCompliantAttribute("False")]
public static bool IsHexOrOctValue(string value, UInt64& ui64Value);
    public static T ToGenericParameter(object value);
    private static object CastSByteEnum(sbyte expression, Type targetType);
    private static object CastByteEnum(byte expression, Type targetType);
    private static object CastInt16Enum(short expression, Type targetType);
    private static object CastUInt16Enum(ushort expression, Type targetType);
    private static object CastInt32Enum(int expression, Type targetType);
    private static object CastUInt32Enum(UInt32 expression, Type targetType);
    private static object CastInt64Enum(long expression, Type targetType);
    private static object CastUInt64Enum(ulong expression, Type targetType);
    internal static object ForceValueCopy(object expression, Type targetType);
    private static object ChangeIntrinsicType(object expression, Type targetType);
    public static object ChangeType(object expression, Type targetType);
    internal static object ChangeType(object expression, Type targetType, bool dynamic);
    [ObsoleteAttribute("do not use this method", "True")]
[DebuggerHiddenAttribute]
[DebuggerStepThroughAttribute]
public static object FallbackUserDefinedConversion(object expression, Type targetType);
    [DebuggerHiddenAttribute]
[DebuggerStepThroughAttribute]
private static object ObjectUserDefinedConversion(object expression, Type targetType);
    internal static bool CanUserDefinedConvert(object expression, Type targetType);
}
[AttributeUsageAttribute("4")]
[EditorBrowsableAttribute("1")]
public class Microsoft.VisualBasic.CompilerServices.DesignerGeneratedAttribute : Attribute {
}
internal class Microsoft.VisualBasic.CompilerServices.ExceptionUtils : object {
    internal static Exception VbMakeIllegalForException();
    internal static Exception VbMakeObjNotSetException();
    private static Exception VbMakeExceptionEx(int number, string sMsg);
    private static Exception BuildException(int number, string description, Boolean& vBDefinedError);
}
internal class Microsoft.VisualBasic.CompilerServices.IDOBinder : object {
    internal static object missingMemberSentinel;
    private static IDOBinder();
    internal static Boolean[] GetCopyBack();
    internal static object IDOCall(IDynamicMetaObjectProvider instance, string memberName, Object[] arguments, String[] argumentNames, Boolean[] copyBack, bool ignoreReturn);
    internal static object IDOGet(IDynamicMetaObjectProvider instance, string memberName, Object[] arguments, String[] argumentNames, Boolean[] copyBack);
    internal static object IDOInvokeDefault(IDynamicMetaObjectProvider instance, Object[] arguments, String[] argumentNames, bool reportErrors, Boolean[] copyBack);
    internal static object IDOFallbackInvokeDefault(IDynamicMetaObjectProvider instance, Object[] arguments, String[] argumentNames, bool reportErrors, Boolean[] copyBack);
    internal static void IDOSet(IDynamicMetaObjectProvider instance, string memberName, String[] argumentNames, Object[] arguments);
    internal static void IDOSetComplex(IDynamicMetaObjectProvider instance, string memberName, Object[] arguments, String[] argumentNames, bool optimisticSet, bool rValueBase);
    internal static void IDOIndexSet(IDynamicMetaObjectProvider instance, Object[] arguments, String[] argumentNames);
    internal static void IDOIndexSetComplex(IDynamicMetaObjectProvider instance, Object[] arguments, String[] argumentNames, bool optimisticSet, bool rValueBase);
    internal static object UserDefinedConversion(IDynamicMetaObjectProvider expression, Type targetType);
    internal static object InvokeUserDefinedOperator(UserDefinedOperator op, Object[] arguments);
}
internal class Microsoft.VisualBasic.CompilerServices.IDOUtils : object {
    private static CacheSet`1<CallSiteBinder> s_binderCache;
    private static IDOUtils();
    private static CallSiteBinder GetCachedBinder(CallSiteBinder action);
    internal static IDynamicMetaObjectProvider TryCastToIDMOP(object o);
    internal static Nullable`1<ExpressionType> LinqOperator(UserDefinedOperator vbOperator);
    public static void CopyBackArguments(CallInfo callInfo, Object[] packedArgs, Object[] args);
    public static void PackArguments(int valueArgs, String[] argNames, Object[] args, Object[]& packedArgs, CallInfo& callInfo);
    public static void UnpackArguments(DynamicMetaObject[] packedArgs, CallInfo callInfo, Expression[]& args, String[]& argNames, Object[]& argValues);
    public static Expression GetWriteBack(Expression[] arguments, ParameterExpression array);
    public static Expression ConvertToObject(Expression valueExpression);
    public static object CreateRefCallSiteAndInvoke(CallSiteBinder action, object instance, Object[] arguments);
    public static object CreateFuncCallSiteAndInvoke(CallSiteBinder action, object instance, Object[] arguments);
    public static object CreateConvertCallSiteAndInvoke(ConvertBinder action, object instance);
    internal static BindingRestrictions CreateRestrictions(DynamicMetaObject target, DynamicMetaObject[] args, DynamicMetaObject value);
    private static BindingRestrictions CreateRestriction(DynamicMetaObject metaObject);
    internal static bool NeedsDeferral(DynamicMetaObject target, DynamicMetaObject[] args, DynamicMetaObject value);
}
[DebuggerNonUserCodeAttribute]
[EditorBrowsableAttribute("1")]
public class Microsoft.VisualBasic.CompilerServices.IncompleteInitialization : Exception {
}
public class Microsoft.VisualBasic.CompilerServices.InternalErrorException : Exception {
    public InternalErrorException(string message);
    public InternalErrorException(string message, Exception innerException);
}
public class Microsoft.VisualBasic.CompilerServices.NewLateBinding : object {
    [DebuggerHiddenAttribute]
[DebuggerStepThroughAttribute]
public static bool LateCanEvaluate(object instance, Type type, string memberName, Object[] arguments, bool allowFunctionEvaluation, bool allowPropertyEvaluation);
    [DebuggerHiddenAttribute]
[DebuggerStepThroughAttribute]
public static object LateCall(object instance, Type type, string memberName, Object[] arguments, String[] argumentNames, Type[] typeArguments, Boolean[] copyBack, bool ignoreReturn);
    [ObsoleteAttribute("do not use this method", "True")]
[EditorBrowsableAttribute("1")]
[DebuggerHiddenAttribute]
[DebuggerStepThroughAttribute]
public static object FallbackCall(object instance, string memberName, Object[] arguments, String[] argumentNames, bool ignoreReturn);
    [DebuggerHiddenAttribute]
[DebuggerStepThroughAttribute]
private static object ObjectLateCall(object instance, Type type, string memberName, Object[] arguments, String[] argumentNames, Type[] typeArguments, Boolean[] copyBack, bool ignoreReturn);
    internal static bool CanBindCall(object instance, string memberName, Object[] arguments, String[] argumentNames, bool ignoreReturn);
    [EditorBrowsableAttribute("1")]
[DebuggerHiddenAttribute]
[DebuggerStepThroughAttribute]
public static object LateCallInvokeDefault(object instance, Object[] arguments, String[] argumentNames, bool reportErrors);
    [EditorBrowsableAttribute("1")]
[DebuggerHiddenAttribute]
[DebuggerStepThroughAttribute]
public static object LateGetInvokeDefault(object instance, Object[] arguments, String[] argumentNames, bool reportErrors);
    private static object InternalLateInvokeDefault(object instance, Object[] arguments, String[] argumentNames, bool reportErrors, Boolean[] copyBack);
    [ObsoleteAttribute("do not use this method", "True")]
[EditorBrowsableAttribute("1")]
[DebuggerHiddenAttribute]
[DebuggerStepThroughAttribute]
public static object FallbackInvokeDefault1(object instance, Object[] arguments, String[] argumentNames, bool reportErrors);
    [ObsoleteAttribute("do not use this method", "True")]
[EditorBrowsableAttribute("1")]
[DebuggerHiddenAttribute]
[DebuggerStepThroughAttribute]
public static object FallbackInvokeDefault2(object instance, Object[] arguments, String[] argumentNames, bool reportErrors);
    [DebuggerHiddenAttribute]
[DebuggerStepThroughAttribute]
private static object ObjectLateInvokeDefault(object instance, Object[] arguments, String[] argumentNames, bool reportErrors, Boolean[] copyBack);
    [DebuggerHiddenAttribute]
[DebuggerStepThroughAttribute]
public static object LateIndexGet(object instance, Object[] arguments, String[] argumentNames);
    private static object LateIndexGet(object instance, Object[] arguments, String[] argumentNames, Boolean[] copyBack);
    private static object InternalLateIndexGet(object instance, Object[] arguments, String[] argumentNames, bool reportErrors, ResolutionFailure& failure, Boolean[] copyBack);
    internal static bool CanBindInvokeDefault(object instance, Object[] arguments, String[] argumentNames, bool reportErrors);
    internal static void ResetCopyback(Boolean[] copyBack);
    [DebuggerHiddenAttribute]
[DebuggerStepThroughAttribute]
public static object LateGet(object instance, Type type, string memberName, Object[] arguments, String[] argumentNames, Type[] typeArguments, Boolean[] copyBack);
    [ObsoleteAttribute("do not use this method", "True")]
[EditorBrowsableAttribute("1")]
[DebuggerHiddenAttribute]
[DebuggerStepThroughAttribute]
public static object FallbackGet(object instance, string memberName, Object[] arguments, String[] argumentNames);
    [DebuggerHiddenAttribute]
[DebuggerStepThroughAttribute]
private static object ObjectLateGet(object instance, Type type, string memberName, Object[] arguments, String[] argumentNames, Type[] typeArguments, Boolean[] copyBack);
    internal static bool CanBindGet(object instance, string memberName, Object[] arguments, String[] argumentNames);
    internal static bool IsZeroArgumentCall(MemberInfo member);
    [DebuggerHiddenAttribute]
[DebuggerStepThroughAttribute]
public static void LateIndexSetComplex(object instance, Object[] arguments, String[] argumentNames, bool optimisticSet, bool rValueBase);
    [ObsoleteAttribute("do not use this method", "True")]
[EditorBrowsableAttribute("1")]
[DebuggerHiddenAttribute]
[DebuggerStepThroughAttribute]
public static void FallbackIndexSetComplex(object instance, Object[] arguments, String[] argumentNames, bool optimisticSet, bool rValueBase);
    [DebuggerHiddenAttribute]
[DebuggerStepThroughAttribute]
internal static void ObjectLateIndexSetComplex(object instance, Object[] arguments, String[] argumentNames, bool optimisticSet, bool rValueBase);
    internal static bool CanIndexSetComplex(object instance, Object[] arguments, String[] argumentNames, bool optimisticSet, bool rValueBase);
    [DebuggerHiddenAttribute]
[DebuggerStepThroughAttribute]
public static void LateIndexSet(object instance, Object[] arguments, String[] argumentNames);
    [ObsoleteAttribute("do not use this method", "True")]
[EditorBrowsableAttribute("1")]
[DebuggerHiddenAttribute]
[DebuggerStepThroughAttribute]
public static void FallbackIndexSet(object instance, Object[] arguments, String[] argumentNames);
    [DebuggerHiddenAttribute]
[DebuggerStepThroughAttribute]
private static void ObjectLateIndexSet(object instance, Object[] arguments, String[] argumentNames);
    [DebuggerHiddenAttribute]
[DebuggerStepThroughAttribute]
public static void LateSetComplex(object instance, Type type, string memberName, Object[] arguments, String[] argumentNames, Type[] typeArguments, bool optimisticSet, bool rValueBase);
    [ObsoleteAttribute("do not use this method", "True")]
[EditorBrowsableAttribute("1")]
[DebuggerHiddenAttribute]
[DebuggerStepThroughAttribute]
public static void FallbackSetComplex(object instance, string memberName, Object[] arguments, bool optimisticSet, bool rValueBase);
    [DebuggerHiddenAttribute]
[DebuggerStepThroughAttribute]
internal static void ObjectLateSetComplex(object instance, Type type, string memberName, Object[] arguments, String[] argumentNames, Type[] typeArguments, bool optimisticSet, bool rValueBase);
    [DebuggerHiddenAttribute]
[DebuggerStepThroughAttribute]
public static void LateSet(object instance, Type type, string memberName, Object[] arguments, String[] argumentNames, Type[] typeArguments);
    [ObsoleteAttribute("do not use this method", "True")]
[EditorBrowsableAttribute("1")]
[DebuggerHiddenAttribute]
[DebuggerStepThroughAttribute]
public static void FallbackSet(object instance, string memberName, Object[] arguments);
    internal static void ObjectLateSet(object instance, Type type, string memberName, Object[] arguments, String[] argumentNames, Type[] typeArguments);
    [DebuggerHiddenAttribute]
[DebuggerStepThroughAttribute]
public static void LateSet(object instance, Type type, string memberName, Object[] arguments, String[] argumentNames, Type[] typeArguments, bool optimisticSet, bool rValueBase, CallType callType);
    internal static bool CanBindSet(object instance, string memberName, object value, bool optimisticSet, bool rValueBase);
    private static object CallMethod(Container baseReference, string methodName, Object[] arguments, String[] argumentNames, Type[] typeArguments, Boolean[] copyBack, BindingFlags invocationFlags, bool reportErrors, ResolutionFailure& failure);
    internal static MethodInfo MatchesPropertyRequirements(Method targetProcedure, BindingFlags flags);
    internal static Exception ReportPropertyMismatch(Method targetProcedure, BindingFlags flags);
    internal static Method ResolveCall(Container baseReference, string methodName, MemberInfo[] members, Object[] arguments, String[] argumentNames, Type[] typeArguments, BindingFlags lookupFlags, bool reportErrors, ResolutionFailure& failure);
    internal static MethodBase GetCallTarget(Method targetProcedure, BindingFlags flags);
    internal static Object[] ConstructCallArguments(Method targetProcedure, Object[] arguments, BindingFlags lookupFlags);
}
public class Microsoft.VisualBasic.CompilerServices.ObjectFlowControl : object {
    public static void CheckForSyncLockOnValueType(object expression);
}
public class Microsoft.VisualBasic.CompilerServices.Operators : object {
    internal static object Boxed_ZeroDouble;
    internal static object Boxed_ZeroSinge;
    internal static object Boxed_ZeroDecimal;
    internal static object Boxed_ZeroLong;
    internal static object Boxed_ZeroInteger;
    internal static object Boxed_ZeroShort;
    internal static object Boxed_ZeroULong;
    internal static object Boxed_ZeroUInteger;
    internal static object Boxed_ZeroUShort;
    internal static object Boxed_ZeroSByte;
    internal static object Boxed_ZeroByte;
    private static int s_TCMAX;
    private static Operators();
    internal static List`1<Method> CollectOperators(UserDefinedOperator op, Type type1, Type type2, Boolean& foundType1Operators, Boolean& foundType2Operators);
    internal static Method ResolveUserDefinedOperator(UserDefinedOperator op, Object[] arguments, bool reportErrors);
    internal static object InvokeUserDefinedOperator(Method operatorMethod, bool forceArgumentValidation, Object[] arguments);
    internal static object InvokeUserDefinedOperator(UserDefinedOperator op, Object[] arguments);
    [ObsoleteAttribute("do not use this method", "True")]
[DebuggerHiddenAttribute]
[DebuggerStepThroughAttribute]
public static object FallbackInvokeUserDefinedOperator(object vbOp, Object[] arguments);
    internal static object InvokeObjectUserDefinedOperator(UserDefinedOperator op, Object[] arguments);
    internal static Method GetCallableUserDefinedOperator(UserDefinedOperator op, Object[] arguments);
    private static sbyte ToVBBool(object conv);
    private static TypeCode GetTypeCode(object o);
    private static Type GetEnumResult(object left, object right);
    private static Exception GetNoValidOperatorException(UserDefinedOperator op, object operand);
    private static Exception GetNoValidOperatorException(UserDefinedOperator op, object left, object right);
    public static object CompareObjectEqual(object left, object right, bool textCompare);
    public static bool ConditionalCompareObjectEqual(object left, object right, bool textCompare);
    public static object CompareObjectNotEqual(object left, object right, bool textCompare);
    public static bool ConditionalCompareObjectNotEqual(object left, object right, bool textCompare);
    public static object CompareObjectLess(object left, object right, bool textCompare);
    public static bool ConditionalCompareObjectLess(object left, object right, bool textCompare);
    public static object CompareObjectLessEqual(object left, object right, bool textCompare);
    public static bool ConditionalCompareObjectLessEqual(object left, object right, bool textCompare);
    public static object CompareObjectGreaterEqual(object left, object right, bool textCompare);
    public static bool ConditionalCompareObjectGreaterEqual(object left, object right, bool textCompare);
    public static object CompareObjectGreater(object left, object right, bool textCompare);
    public static bool ConditionalCompareObjectGreater(object left, object right, bool textCompare);
    public static int CompareObject(object left, object right, bool textCompare);
    private static CompareClass CompareObject2(object left, object right, bool textCompare);
    private static CompareClass CompareBoolean(bool left, bool right);
    private static CompareClass CompareInt32(int left, int right);
    private static CompareClass CompareUInt32(UInt32 left, UInt32 right);
    private static CompareClass CompareInt64(long left, long right);
    private static CompareClass CompareUInt64(ulong left, ulong right);
    private static CompareClass CompareDecimal(object left, object right);
    private static CompareClass CompareSingle(float left, float right);
    private static CompareClass CompareDouble(double left, double right);
    private static CompareClass CompareDate(DateTime left, DateTime right);
    private static CompareClass CompareChar(char left, char right);
    public static int CompareString(string left, string right, bool textCompare);
    public static object PlusObject(object operand);
    public static object NegateObject(object operand);
    private static object NegateBoolean(bool operand);
    private static object NegateSByte(sbyte operand);
    private static object NegateByte(byte operand);
    private static object NegateInt16(short operand);
    private static object NegateUInt16(ushort operand);
    private static object NegateInt32(int operand);
    private static object NegateUInt32(UInt32 operand);
    private static object NegateInt64(long operand);
    private static object NegateUInt64(ulong operand);
    private static object NegateDecimal(decimal operand);
    private static object NegateSingle(float operand);
    private static object NegateDouble(double operand);
    private static object NegateString(string operand);
    public static object NotObject(object operand);
    private static object NotBoolean(bool operand);
    private static object NotSByte(sbyte operand, Type operandType);
    private static object NotByte(byte operand, Type operandType);
    private static object NotInt16(short operand, Type operandType);
    private static object NotUInt16(ushort operand, Type operandType);
    private static object NotInt32(int operand, Type operandType);
    private static object NotUInt32(UInt32 operand, Type operandType);
    private static object NotInt64(long operand);
    private static object NotInt64(long operand, Type operandType);
    private static object NotUInt64(ulong operand, Type operandType);
    public static object AndObject(object left, object right);
    private static object AndBoolean(bool left, bool right);
    private static object AndSByte(sbyte left, sbyte right, Type enumType);
    private static object AndByte(byte left, byte right, Type enumType);
    private static object AndInt16(short left, short right, Type enumType);
    private static object AndUInt16(ushort left, ushort right, Type enumType);
    private static object AndInt32(int left, int right, Type enumType);
    private static object AndUInt32(UInt32 left, UInt32 right, Type enumType);
    private static object AndInt64(long left, long right, Type enumType);
    private static object AndUInt64(ulong left, ulong right, Type enumType);
    public static object OrObject(object left, object right);
    private static object OrBoolean(bool left, bool right);
    private static object OrSByte(sbyte left, sbyte right, Type enumType);
    private static object OrByte(byte left, byte right, Type enumType);
    private static object OrInt16(short left, short right, Type enumType);
    private static object OrUInt16(ushort left, ushort right, Type enumType);
    private static object OrInt32(int left, int right, Type enumType);
    private static object OrUInt32(UInt32 left, UInt32 right, Type enumType);
    private static object OrInt64(long left, long right, Type enumType);
    private static object OrUInt64(ulong left, ulong right, Type enumType);
    public static object XorObject(object left, object right);
    private static object XorBoolean(bool left, bool right);
    private static object XorSByte(sbyte left, sbyte right, Type enumType);
    private static object XorByte(byte left, byte right, Type enumType);
    private static object XorInt16(short left, short right, Type enumType);
    private static object XorUInt16(ushort left, ushort right, Type enumType);
    private static object XorInt32(int left, int right, Type enumType);
    private static object XorUInt32(UInt32 left, UInt32 right, Type enumType);
    private static object XorInt64(long left, long right, Type enumType);
    private static object XorUInt64(ulong left, ulong right, Type enumType);
    public static object AddObject(object left, object right);
    private static object AddByte(byte left, byte right);
    private static object AddSByte(sbyte left, sbyte right);
    private static object AddInt16(short left, short right);
    private static object AddUInt16(ushort left, ushort right);
    private static object AddInt32(int left, int right);
    private static object AddUInt32(UInt32 left, UInt32 right);
    private static object AddInt64(long left, long right);
    private static object AddUInt64(ulong left, ulong right);
    private static object AddDecimal(object left, object right);
    private static object AddSingle(float left, float right);
    private static object AddDouble(double left, double right);
    private static object AddString(string left, string right);
    public static object SubtractObject(object left, object right);
    private static object SubtractByte(byte left, byte right);
    private static object SubtractSByte(sbyte left, sbyte right);
    private static object SubtractInt16(short left, short right);
    private static object SubtractUInt16(ushort left, ushort right);
    private static object SubtractInt32(int left, int right);
    private static object SubtractUInt32(UInt32 left, UInt32 right);
    private static object SubtractInt64(long left, long right);
    private static object SubtractUInt64(ulong left, ulong right);
    private static object SubtractDecimal(object left, object right);
    private static object SubtractSingle(float left, float right);
    private static object SubtractDouble(double left, double right);
    public static object MultiplyObject(object left, object right);
    private static object MultiplyByte(byte left, byte right);
    private static object MultiplySByte(sbyte left, sbyte right);
    private static object MultiplyInt16(short left, short right);
    private static object MultiplyUInt16(ushort left, ushort right);
    private static object MultiplyInt32(int left, int right);
    private static object MultiplyUInt32(UInt32 left, UInt32 right);
    private static object MultiplyInt64(long left, long right);
    private static object MultiplyUInt64(ulong left, ulong right);
    private static object MultiplyDecimal(object left, object right);
    private static object MultiplySingle(float left, float right);
    private static object MultiplyDouble(double left, double right);
    public static object DivideObject(object left, object right);
    private static object DivideDecimal(object left, object right);
    private static object DivideSingle(float left, float right);
    private static object DivideDouble(double left, double right);
    public static object ExponentObject(object left, object right);
    public static object ModObject(object left, object right);
    private static object ModSByte(sbyte left, sbyte right);
    private static object ModByte(byte left, byte right);
    private static object ModInt16(short left, short right);
    private static object ModUInt16(ushort left, ushort right);
    private static object ModInt32(int left, int right);
    private static object ModUInt32(UInt32 left, UInt32 right);
    private static object ModInt64(long left, long right);
    private static object ModUInt64(ulong left, ulong right);
    private static object ModDecimal(object left, object right);
    private static object ModSingle(float left, float right);
    private static object ModDouble(double left, double right);
    public static object IntDivideObject(object left, object right);
    private static object IntDivideSByte(sbyte left, sbyte right);
    private static object IntDivideByte(byte left, byte right);
    private static object IntDivideInt16(short left, short right);
    private static object IntDivideUInt16(ushort left, ushort right);
    private static object IntDivideInt32(int left, int right);
    private static object IntDivideUInt32(UInt32 left, UInt32 right);
    private static object IntDivideInt64(long left, long right);
    private static object IntDivideUInt64(ulong left, ulong right);
    public static object LeftShiftObject(object operand, object amount);
    public static object RightShiftObject(object operand, object amount);
    public static object ConcatenateObject(object left, object right);
}
[AttributeUsageAttribute("2048")]
[EditorBrowsableAttribute("1")]
public class Microsoft.VisualBasic.CompilerServices.OptionCompareAttribute : Attribute {
}
[AttributeUsageAttribute("4")]
[EditorBrowsableAttribute("1")]
public class Microsoft.VisualBasic.CompilerServices.OptionTextAttribute : Attribute {
}
internal class Microsoft.VisualBasic.CompilerServices.OverloadResolution : object {
    private static bool IsExactSignatureMatch(ParameterInfo[] leftSignature, int leftTypeParameterCount, ParameterInfo[] rightSignature, int rightTypeParameterCount);
    private static void CompareNumericTypeSpecificity(Type leftType, Type rightType, Boolean& leftWins, Boolean& rightWins);
    private static void CompareParameterSpecificity(Type argumentType, ParameterInfo leftParameter, MethodBase leftProcedure, bool expandLeftParamArray, ParameterInfo rightParameter, MethodBase rightProcedure, bool expandRightParamArray, Boolean& leftWins, Boolean& rightWins, Boolean& bothLose);
    private static void CompareGenericityBasedOnMethodGenericParams(ParameterInfo leftParameter, ParameterInfo rawLeftParameter, Method leftMember, bool expandLeftParamArray, ParameterInfo rightParameter, ParameterInfo rawRightParameter, Method rightMember, bool expandRightParamArray, Boolean& leftIsLessGeneric, Boolean& rightIsLessGeneric, Boolean& signatureMismatch);
    private static void CompareGenericityBasedOnTypeGenericParams(ParameterInfo leftParameter, ParameterInfo rawLeftParameter, Method leftMember, bool expandLeftParamArray, ParameterInfo rightParameter, ParameterInfo rawRightParameter, Method rightMember, bool expandRightParamArray, Boolean& leftIsLessGeneric, Boolean& rightIsLessGeneric, Boolean& signatureMismatch);
    private static Method LeastGenericProcedure(Method left, Method right, ComparisonType compareGenericity, Boolean& signatureMismatch);
    internal static Method LeastGenericProcedure(Method left, Method right);
    private static void InsertIfMethodAvailable(MemberInfo newCandidate, ParameterInfo[] newCandidateSignature, int newCandidateParamArrayIndex, bool expandNewCandidateParamArray, Object[] arguments, int argumentCount, String[] argumentNames, Type[] typeArguments, bool collectOnlyOperators, List`1<Method> candidates, Container baseReference);
    internal static List`1<Method> CollectOverloadCandidates(MemberInfo[] members, Object[] arguments, int argumentCount, String[] argumentNames, Type[] typeArguments, bool collectOnlyOperators, Type terminatingScope, Int32& rejectedForArgumentCount, Int32& rejectedForTypeArgumentCount, Container baseReference);
    private static bool CanConvert(Type targetType, Type sourceType, bool rejectNarrowingConversion, List`1<string> errors, string parameterName, bool isByRefCopyBackContext, Boolean& requiresNarrowingConversion, Boolean& allNarrowingIsFromObject);
    private static bool InferTypeArgumentsFromArgument(Type argumentType, Type parameterType, Type[] typeInferenceArguments, MethodBase targetProcedure, bool digThroughToBasesAndImplements);
    private static bool InferTypeArgumentsFromArgumentDirectly(Type argumentType, Type parameterType, Type[] typeInferenceArguments, MethodBase targetProcedure, bool digThroughToBasesAndImplements);
    private static bool CanPassToParamArray(Method targetProcedure, object argument, ParameterInfo parameter);
    internal static bool CanPassToParameter(Method targetProcedure, object argument, ParameterInfo parameter, bool isExpandedParamArray, bool rejectNarrowingConversions, List`1<string> errors, Boolean& requiresNarrowingConversion, Boolean& allNarrowingIsFromObject);
    internal static bool InferTypeArgumentsFromArgument(Method targetProcedure, object argument, ParameterInfo parameter, bool isExpandedParamArray, List`1<string> errors);
    internal static object PassToParameter(object argument, ParameterInfo parameter, Type parameterType);
    private static bool FindParameterByName(ParameterInfo[] parameters, string name, Int32& index);
    private static Boolean[] CreateMatchTable(int size, int lastPositionalMatchIndex);
    internal static bool CanMatchArguments(Method targetProcedure, Object[] arguments, String[] argumentNames, Type[] typeArguments, bool rejectNarrowingConversions, List`1<string> errors);
    private static bool InstantiateGenericMethod(Method targetProcedure, Type[] typeArguments, List`1<string> errors);
    internal static void MatchArguments(Method targetProcedure, Object[] arguments, Object[] matchedArguments);
    private static bool InferTypeArguments(Method targetProcedure, Object[] arguments, String[] argumentNames, Type[] typeArguments, List`1<string> errors);
    internal static void ReorderArgumentArray(Method targetProcedure, Object[] parameterResults, Object[] arguments, Boolean[] copyBack, BindingFlags lookupFlags);
    private static Method RejectUncallableProcedures(List`1<Method> candidates, Object[] arguments, String[] argumentNames, Type[] typeArguments, Int32& candidateCount, Boolean& someCandidatesAreGeneric);
    private static void RejectUncallableProcedure(Method candidate, Object[] arguments, String[] argumentNames, Type[] typeArguments);
    private static Type GetArgumentType(object argument);
    private static Method MoreSpecificProcedure(Method left, Method right, Object[] arguments, String[] argumentNames, ComparisonType compareGenericity, Boolean& bothLose, bool continueWhenBothLose);
    private static Method MostSpecificProcedure(List`1<Method> candidates, Int32& candidateCount, Object[] arguments, String[] argumentNames);
    private static Method RemoveRedundantGenericProcedures(List`1<Method> candidates, Int32& candidateCount, Object[] arguments, String[] argumentNames);
    private static void ReportError(List`1<string> errors, string resourceID, string substitution1, Type substitution2, Type substitution3);
    private static void ReportError(List`1<string> errors, string resourceID, string substitution1, Method substitution2);
    private static void ReportError(List`1<string> errors, string resourceID, string substitution1);
    private static void ReportError(List`1<string> errors, string resourceID);
    private static Exception ReportOverloadResolutionFailure(string overloadedProcedureName, List`1<Method> candidates, Object[] arguments, String[] argumentNames, Type[] typeArguments, string errorID, ResolutionFailure failure, ArgumentDetector detector, CandidateProperty candidateFilter);
    private static bool DetectArgumentErrors(Method targetProcedure, Object[] arguments, String[] argumentNames, Type[] typeArguments, List`1<string> errors);
    private static bool CandidateIsNotCallable(Method candidate);
    private static Exception ReportUncallableProcedures(string overloadedProcedureName, List`1<Method> candidates, Object[] arguments, String[] argumentNames, Type[] typeArguments, ResolutionFailure failure);
    private static bool DetectArgumentNarrowing(Method targetProcedure, Object[] arguments, String[] argumentNames, Type[] typeArguments, List`1<string> errors);
    private static bool CandidateIsNarrowing(Method candidate);
    private static Exception ReportNarrowingProcedures(string overloadedProcedureName, List`1<Method> candidates, Object[] arguments, String[] argumentNames, Type[] typeArguments, ResolutionFailure failure);
    private static bool DetectUnspecificity(Method targetProcedure, Object[] arguments, String[] argumentNames, Type[] typeArguments, List`1<string> errors);
    private static bool CandidateIsUnspecific(Method candidate);
    private static Exception ReportUnspecificProcedures(string overloadedProcedureName, List`1<Method> candidates, ResolutionFailure failure);
    internal static Method ResolveOverloadedCall(string methodName, List`1<Method> candidates, Object[] arguments, String[] argumentNames, Type[] typeArguments, BindingFlags lookupFlags, bool reportErrors, ResolutionFailure& failure);
    internal static Method ResolveOverloadedCall(string methodName, MemberInfo[] members, Object[] arguments, String[] argumentNames, Type[] typeArguments, BindingFlags lookupFlags, bool reportErrors, ResolutionFailure& failure, Container baseReference);
}
[DebuggerNonUserCodeAttribute]
[EditorBrowsableAttribute("1")]
public class Microsoft.VisualBasic.CompilerServices.ProjectData : object {
    public static void SetProjectError(Exception ex);
    public static void SetProjectError(Exception ex, int lErl);
    public static void ClearProjectError();
}
[ExtensionAttribute]
[StandardModuleAttribute]
internal class Microsoft.VisualBasic.CompilerServices.ReflectionExtensions : object {
    private static Func`3<MethodBase, MethodBase, bool> s_MemberEquivalence;
    public static BindingFlags BindingFlagsInvokeMethod { get; }
    public static BindingFlags BindingFlagsGetProperty { get; }
    public static BindingFlags BindingFlagsSetProperty { get; }
    public static BindingFlags BindingFlagsIgnoreReturn { get; }
    private static ReflectionExtensions();
    [ExtensionAttribute]
public static MemberTypes MemberType(MemberInfo memberInfo);
    [ExtensionAttribute]
public static TypeCode GetTypeCode(Type type);
    [ExtensionAttribute]
public static bool IsSubclassOf(Type source, Type other);
    public static BindingFlags get_BindingFlagsInvokeMethod();
    public static BindingFlags get_BindingFlagsGetProperty();
    public static BindingFlags get_BindingFlagsSetProperty();
    public static BindingFlags get_BindingFlagsIgnoreReturn();
    [ExtensionAttribute]
public static bool IsEquivalentTo(MethodBase mi1, MethodBase mi2);
    [ExtensionAttribute]
private static bool IsEquivalentTo(ParameterInfo pi1, ParameterInfo pi2, MethodBase method1, MethodBase method2);
    [ExtensionAttribute]
private static bool IsGenericallyEqual(Type t1, Type t2);
    [ExtensionAttribute]
private static bool IsGenericallyEquivalentTo(Type t1, Type t2, MemberInfo member1, MemberInfo member2);
    [ExtensionAttribute]
private static bool IsTypeParameterEquivalentToTypeInst(Type typeParam, Type typeInst, MemberInfo member);
    [ExtensionAttribute]
public static bool HasSameMetadataDefinitionAs(MethodBase mi1, MethodBase mi2);
}
public class Microsoft.VisualBasic.CompilerServices.SiteDelegate0 : MulticastDelegate {
    public SiteDelegate0(object TargetObject, IntPtr TargetMethod);
    public virtual IAsyncResult BeginInvoke(CallSite site, object instance, AsyncCallback DelegateCallback, object DelegateAsyncState);
    public virtual object EndInvoke(IAsyncResult DelegateAsyncResult);
    public virtual object Invoke(CallSite site, object instance);
}
public class Microsoft.VisualBasic.CompilerServices.SiteDelegate1 : MulticastDelegate {
    public SiteDelegate1(object TargetObject, IntPtr TargetMethod);
    public virtual IAsyncResult BeginInvoke(CallSite site, object instance, Object& arg0, AsyncCallback DelegateCallback, object DelegateAsyncState);
    public virtual object EndInvoke(Object& arg0, IAsyncResult DelegateAsyncResult);
    public virtual object Invoke(CallSite site, object instance, Object& arg0);
}
public class Microsoft.VisualBasic.CompilerServices.SiteDelegate2 : MulticastDelegate {
    public SiteDelegate2(object TargetObject, IntPtr TargetMethod);
    public virtual IAsyncResult BeginInvoke(CallSite site, object instance, Object& arg0, Object& arg1, AsyncCallback DelegateCallback, object DelegateAsyncState);
    public virtual object EndInvoke(Object& arg0, Object& arg1, IAsyncResult DelegateAsyncResult);
    public virtual object Invoke(CallSite site, object instance, Object& arg0, Object& arg1);
}
public class Microsoft.VisualBasic.CompilerServices.SiteDelegate3 : MulticastDelegate {
    public SiteDelegate3(object TargetObject, IntPtr TargetMethod);
    public virtual IAsyncResult BeginInvoke(CallSite site, object instance, Object& arg0, Object& arg1, Object& arg2, AsyncCallback DelegateCallback, object DelegateAsyncState);
    public virtual object EndInvoke(Object& arg0, Object& arg1, Object& arg2, IAsyncResult DelegateAsyncResult);
    public virtual object Invoke(CallSite site, object instance, Object& arg0, Object& arg1, Object& arg2);
}
public class Microsoft.VisualBasic.CompilerServices.SiteDelegate4 : MulticastDelegate {
    public SiteDelegate4(object TargetObject, IntPtr TargetMethod);
    public virtual IAsyncResult BeginInvoke(CallSite site, object instance, Object& arg0, Object& arg1, Object& arg2, Object& arg3, AsyncCallback DelegateCallback, object DelegateAsyncState);
    public virtual object EndInvoke(Object& arg0, Object& arg1, Object& arg2, Object& arg3, IAsyncResult DelegateAsyncResult);
    public virtual object Invoke(CallSite site, object instance, Object& arg0, Object& arg1, Object& arg2, Object& arg3);
}
public class Microsoft.VisualBasic.CompilerServices.SiteDelegate5 : MulticastDelegate {
    public SiteDelegate5(object TargetObject, IntPtr TargetMethod);
    public virtual IAsyncResult BeginInvoke(CallSite site, object instance, Object& arg0, Object& arg1, Object& arg2, Object& arg3, Object& arg4, AsyncCallback DelegateCallback, object DelegateAsyncState);
    public virtual object EndInvoke(Object& arg0, Object& arg1, Object& arg2, Object& arg3, Object& arg4, IAsyncResult DelegateAsyncResult);
    public virtual object Invoke(CallSite site, object instance, Object& arg0, Object& arg1, Object& arg2, Object& arg3, Object& arg4);
}
public class Microsoft.VisualBasic.CompilerServices.SiteDelegate6 : MulticastDelegate {
    public SiteDelegate6(object TargetObject, IntPtr TargetMethod);
    public virtual IAsyncResult BeginInvoke(CallSite site, object instance, Object& arg0, Object& arg1, Object& arg2, Object& arg3, Object& arg4, Object& arg5, AsyncCallback DelegateCallback, object DelegateAsyncState);
    public virtual object EndInvoke(Object& arg0, Object& arg1, Object& arg2, Object& arg3, Object& arg4, Object& arg5, IAsyncResult DelegateAsyncResult);
    public virtual object Invoke(CallSite site, object instance, Object& arg0, Object& arg1, Object& arg2, Object& arg3, Object& arg4, Object& arg5);
}
public class Microsoft.VisualBasic.CompilerServices.SiteDelegate7 : MulticastDelegate {
    public SiteDelegate7(object TargetObject, IntPtr TargetMethod);
    public virtual IAsyncResult BeginInvoke(CallSite site, object instance, Object& arg0, Object& arg1, Object& arg2, Object& arg3, Object& arg4, Object& arg5, Object& arg6, AsyncCallback DelegateCallback, object DelegateAsyncState);
    public virtual object EndInvoke(Object& arg0, Object& arg1, Object& arg2, Object& arg3, Object& arg4, Object& arg5, Object& arg6, IAsyncResult DelegateAsyncResult);
    public virtual object Invoke(CallSite site, object instance, Object& arg0, Object& arg1, Object& arg2, Object& arg3, Object& arg4, Object& arg5, Object& arg6);
}
[AttributeUsageAttribute("4")]
[EditorBrowsableAttribute("1")]
public class Microsoft.VisualBasic.CompilerServices.StandardModuleAttribute : Attribute {
}
[DebuggerNonUserCodeAttribute]
[EditorBrowsableAttribute("1")]
public class Microsoft.VisualBasic.CompilerServices.StaticLocalInitFlag : object {
    public short State;
}
internal class Microsoft.VisualBasic.CompilerServices.Symbols : object {
    internal static Object[] NoArguments;
    internal static String[] NoArgumentNames;
    internal static Type[] NoTypeArguments;
    internal static Type[] NoTypeParameters;
    internal static String[] OperatorCLSNames;
    internal static String[] OperatorNames;
    private static Symbols();
    internal static bool IsUnaryOperator(UserDefinedOperator op);
    internal static bool IsBinaryOperator(UserDefinedOperator op);
    internal static bool IsUserDefinedOperator(MethodBase method);
    internal static bool IsNarrowingConversionOperator(MethodBase method);
    internal static UserDefinedOperator MapToUserDefinedOperator(MethodBase method);
    internal static TypeCode GetTypeCode(Type type);
    internal static Type MapTypeCodeToType(TypeCode typeCode);
    internal static bool IsRootObjectType(Type type);
    internal static bool IsRootEnumType(Type type);
    internal static bool IsValueType(Type type);
    internal static bool IsEnum(Type type);
    internal static bool IsArrayType(Type type);
    internal static bool IsStringType(Type type);
    internal static bool IsCharArrayRankOne(Type type);
    internal static bool IsIntegralType(TypeCode typeCode);
    internal static bool IsNumericType(TypeCode typeCode);
    internal static bool IsNumericType(Type type);
    internal static bool IsIntrinsicType(TypeCode typeCode);
    internal static bool IsIntrinsicType(Type type);
    internal static bool IsClass(Type type);
    internal static bool IsClassOrValueType(Type type);
    internal static bool IsInterface(Type type);
    internal static bool IsClassOrInterface(Type type);
    internal static bool IsReferenceType(Type type);
    internal static bool IsGenericParameter(Type type);
    internal static bool IsCollectionInterface(Type type);
    internal static bool Implements(Type implementor, Type interface);
    internal static bool IsOrInheritsFrom(Type derived, Type base);
    internal static bool IsGeneric(Type type);
    internal static bool IsInstantiatedGeneric(Type type);
    internal static bool IsGeneric(MethodBase method);
    internal static bool IsGeneric(MemberInfo member);
    internal static bool IsRawGeneric(MethodBase method);
    internal static Type[] GetTypeParameters(MemberInfo member);
    internal static Type[] GetTypeParameters(Type type);
    internal static Type[] GetTypeArguments(Type type);
    internal static Type[] GetInterfaceConstraints(Type genericParameter);
    internal static Type GetClassConstraint(Type genericParameter);
    internal static int IndexIn(Type possibleGenericParameter, MethodBase genericMethodDef);
    internal static bool RefersToGenericParameter(Type referringType, MethodBase method);
    internal static bool RefersToGenericParameterCLRSemantics(Type referringType, Type typ);
    internal static bool AreGenericMethodDefsEqual(MethodBase method1, MethodBase method2);
    internal static bool IsShadows(MethodBase method);
    internal static bool IsShared(MemberInfo member);
    internal static bool IsParamArray(ParameterInfo parameter);
    internal static Type GetElementType(Type type);
    internal static bool AreParametersAndReturnTypesValid(ParameterInfo[] parameters, Type returnType);
    internal static void GetAllParameterCounts(ParameterInfo[] parameters, Int32& requiredParameterCount, Int32& maximumParameterCount, Int32& paramArrayIndex);
    internal static bool IsNonPublicRuntimeMember(MemberInfo member);
    internal static bool HasFlag(BindingFlags flags, BindingFlags flagToTest);
}
[DebuggerNonUserCodeAttribute]
[EditorBrowsableAttribute("1")]
public class Microsoft.VisualBasic.CompilerServices.Utils : object {
    internal static int SEVERITY_ERROR;
    internal static int FACILITY_CONTROL;
    internal static int FACILITY_RPC;
    internal static int FACILITY_ITF;
    internal static int SCODE_FACILITY;
    private static int s_ERROR_INVALID_PARAMETER;
    internal static char chPeriod;
    internal static char chSpace;
    internal static char chIntlSpace;
    internal static char chZero;
    internal static char chHyphen;
    internal static char chPlus;
    internal static char chLetterA;
    internal static char chLetterZ;
    internal static char chColon;
    internal static char chSlash;
    internal static char chBackslash;
    internal static char chTab;
    internal static char chCharH0A;
    internal static char chCharH0B;
    internal static char chCharH0C;
    internal static char chCharH0D;
    internal static char chLineFeed;
    internal static char chDblQuote;
    internal static char chGenericManglingChar;
    internal static CompareOptions OptionCompareTextFlags;
    private static ResourceManager s_VBAResourceManager;
    private static bool s_triedLoadingResourceManager;
    private static object s_resourceManagerSyncObj;
    internal static Char[] m_achIntlSpace;
    private static Type s_voidType;
    private static Assembly s_VBRuntimeAssembly;
    internal static Assembly VBRuntimeAssembly { get; }
    private static Utils();
    private static char IntToHex(int n);
    public static string GetResourceString(string resourceKey, String[] args);
    internal static CultureInfo GetCultureInfo();
    internal static CultureInfo GetInvariantCultureInfo();
    internal static Assembly get_VBRuntimeAssembly();
    internal static string ToHalfwidthNumbers(string s, CultureInfo culture);
    internal static bool IsHexOrOctValue(string value, Int64& i64Value);
    internal static bool IsHexOrOctValue(string value, UInt64& ui64Value);
    internal static string VBFriendlyName(object obj);
    internal static string VBFriendlyName(Type typ);
    internal static string VBFriendlyName(Type typ, object o);
    internal static string VBFriendlyNameOfType(Type typ, bool fullName);
    private static string GetArraySuffixAndElementType(Type& typ);
    private static string GetGenericArgsSuffix(Type typ);
    internal static string ParameterToString(ParameterInfo parameter);
    public static string MethodToString(MethodBase method);
    internal static string PropertyToString(PropertyInfo prop);
    internal static string MemberToString(MemberInfo member);
    internal static string FieldToString(FieldInfo field);
    public static Array CopyArray(Array arySrc, Array aryDest);
}
internal class Microsoft.VisualBasic.CompilerServices.VBBinaryOperatorBinder : BinaryOperationBinder {
    private UserDefinedOperator _Op;
    private static int s_hash;
    private static VBBinaryOperatorBinder();
    public VBBinaryOperatorBinder(UserDefinedOperator op, ExpressionType linqOp);
    public virtual DynamicMetaObject FallbackBinaryOperation(DynamicMetaObject target, DynamicMetaObject arg, DynamicMetaObject errorSuggestion);
    public virtual bool Equals(object _other);
    public virtual int GetHashCode();
}
internal class Microsoft.VisualBasic.CompilerServices.VBCallBinder : InvokeMemberBinder {
    private bool _ignoreReturn;
    private static int s_hash;
    private static VBCallBinder();
    public VBCallBinder(string memberName, CallInfo callInfo, bool ignoreReturn);
    public virtual DynamicMetaObject FallbackInvokeMember(DynamicMetaObject target, DynamicMetaObject[] packedArgs, DynamicMetaObject errorSuggestion);
    public virtual DynamicMetaObject FallbackInvoke(DynamicMetaObject target, DynamicMetaObject[] packedArgs, DynamicMetaObject errorSuggestion);
    public virtual bool Equals(object _other);
    public virtual int GetHashCode();
}
internal class Microsoft.VisualBasic.CompilerServices.VBConversionBinder : ConvertBinder {
    private static int s_hash;
    private static VBConversionBinder();
    public VBConversionBinder(Type t);
    public virtual DynamicMetaObject FallbackConvert(DynamicMetaObject target, DynamicMetaObject errorSuggestion);
    public virtual bool Equals(object _other);
    public virtual int GetHashCode();
}
internal enum Microsoft.VisualBasic.CompilerServices.vbErrors : Enum {
    public int value__;
    public static vbErrors ObjNotSet;
    public static vbErrors IllegalFor;
}
internal class Microsoft.VisualBasic.CompilerServices.VBGetBinder : InvokeMemberBinder {
    private static int s_hash;
    private static VBGetBinder();
    public VBGetBinder(string memberName, CallInfo callInfo);
    public virtual DynamicMetaObject FallbackInvokeMember(DynamicMetaObject target, DynamicMetaObject[] packedArgs, DynamicMetaObject errorSuggestion);
    public virtual DynamicMetaObject FallbackInvoke(DynamicMetaObject target, DynamicMetaObject[] packedArgs, DynamicMetaObject errorSuggestion);
    public virtual bool Equals(object _other);
    public virtual int GetHashCode();
}
internal class Microsoft.VisualBasic.CompilerServices.VBGetMemberBinder : GetMemberBinder {
    private static int s_hash;
    private bool InvokeOnGet { get; }
    private static VBGetMemberBinder();
    public VBGetMemberBinder(string name);
    public virtual DynamicMetaObject FallbackGetMember(DynamicMetaObject target, DynamicMetaObject errorSuggestion);
    public virtual bool Equals(object _other);
    public virtual int GetHashCode();
    private sealed virtual override bool get_InvokeOnGet();
}
internal class Microsoft.VisualBasic.CompilerServices.VBIndexSetBinder : SetIndexBinder {
    private static int s_hash;
    private static VBIndexSetBinder();
    public VBIndexSetBinder(CallInfo callInfo);
    public virtual DynamicMetaObject FallbackSetIndex(DynamicMetaObject target, DynamicMetaObject[] packedIndexes, DynamicMetaObject value, DynamicMetaObject errorSuggestion);
    public virtual bool Equals(object _other);
    public virtual int GetHashCode();
}
internal class Microsoft.VisualBasic.CompilerServices.VBIndexSetComplexBinder : SetIndexBinder {
    private bool _optimisticSet;
    private bool _rValueBase;
    private static int s_hash;
    private static VBIndexSetComplexBinder();
    public VBIndexSetComplexBinder(CallInfo callInfo, bool optimisticSet, bool rValueBase);
    public virtual DynamicMetaObject FallbackSetIndex(DynamicMetaObject target, DynamicMetaObject[] packedIndexes, DynamicMetaObject value, DynamicMetaObject errorSuggestion);
    public virtual bool Equals(object _other);
    public virtual int GetHashCode();
}
internal class Microsoft.VisualBasic.CompilerServices.VBInvokeBinder : InvokeBinder {
    private bool _lateCall;
    private static int s_hash;
    private static VBInvokeBinder();
    public VBInvokeBinder(CallInfo callInfo, bool lateCall);
    public virtual DynamicMetaObject FallbackInvoke(DynamicMetaObject target, DynamicMetaObject[] packedArgs, DynamicMetaObject errorSuggestion);
    public virtual bool Equals(object _other);
    public virtual int GetHashCode();
}
internal class Microsoft.VisualBasic.CompilerServices.VBInvokeDefaultBinder : InvokeBinder {
    private bool _reportErrors;
    private static int s_hash;
    private static VBInvokeDefaultBinder();
    public VBInvokeDefaultBinder(CallInfo callInfo, bool reportErrors);
    public virtual DynamicMetaObject FallbackInvoke(DynamicMetaObject target, DynamicMetaObject[] packedArgs, DynamicMetaObject errorSuggestion);
    public virtual bool Equals(object _other);
    public virtual int GetHashCode();
}
internal class Microsoft.VisualBasic.CompilerServices.VBInvokeDefaultFallbackBinder : GetIndexBinder {
    private bool _reportErrors;
    private static int s_hash;
    private static VBInvokeDefaultFallbackBinder();
    public VBInvokeDefaultFallbackBinder(CallInfo callInfo, bool reportErrors);
    public virtual DynamicMetaObject FallbackGetIndex(DynamicMetaObject target, DynamicMetaObject[] packedArgs, DynamicMetaObject errorSuggestion);
    public virtual bool Equals(object _other);
    public virtual int GetHashCode();
}
internal class Microsoft.VisualBasic.CompilerServices.VBSetBinder : SetMemberBinder {
    private static int s_hash;
    private static VBSetBinder();
    public VBSetBinder(string memberName);
    public virtual DynamicMetaObject FallbackSetMember(DynamicMetaObject target, DynamicMetaObject value, DynamicMetaObject errorSuggestion);
    public virtual bool Equals(object _other);
    public virtual int GetHashCode();
}
internal class Microsoft.VisualBasic.CompilerServices.VBSetComplexBinder : SetMemberBinder {
    private bool _optimisticSet;
    private bool _rValueBase;
    private static int s_hash;
    private static VBSetComplexBinder();
    public VBSetComplexBinder(string memberName, bool optimisticSet, bool rValueBase);
    public virtual DynamicMetaObject FallbackSetMember(DynamicMetaObject target, DynamicMetaObject value, DynamicMetaObject errorSuggestion);
    public virtual bool Equals(object _other);
    public virtual int GetHashCode();
}
internal class Microsoft.VisualBasic.CompilerServices.VBUnaryOperatorBinder : UnaryOperationBinder {
    private UserDefinedOperator _Op;
    private static int s_hash;
    private static VBUnaryOperatorBinder();
    public VBUnaryOperatorBinder(UserDefinedOperator op, ExpressionType linqOp);
    public virtual DynamicMetaObject FallbackUnaryOperation(DynamicMetaObject target, DynamicMetaObject errorSuggestion);
    public virtual bool Equals(object _other);
    public virtual int GetHashCode();
}
[StandardModuleAttribute]
[DebuggerNonUserCodeAttribute]
public class Microsoft.VisualBasic.Constants : object {
    public static string vbCrLf;
    [ObsoleteAttribute("For a carriage return and line feed, use vbCrLf.  For the current platform's newline, use System.Environment.NewLine.")]
public static string vbNewLine;
    public static string vbCr;
    public static string vbLf;
    public static string vbBack;
    public static string vbFormFeed;
    public static string vbTab;
    public static string vbVerticalTab;
    public static string vbNullChar;
    public static string vbNullString;
}
public class Microsoft.VisualBasic.ControlChars : object {
    public static string CrLf;
    public static string NewLine;
    public static char Cr;
    public static char Lf;
    public static char Back;
    public static char FormFeed;
    public static char Tab;
    public static char VerticalTab;
    public static char NullChar;
    public static char Quote;
}
[AttributeUsageAttribute("4")]
[EditorBrowsableAttribute("1")]
public class Microsoft.VisualBasic.HideModuleNameAttribute : Attribute {
}
[StandardModuleAttribute]
public class Microsoft.VisualBasic.Interaction : object {
    internal static T IIf(bool condition, T truePart, T falsePart);
}
[StandardModuleAttribute]
[DebuggerNonUserCodeAttribute]
public class Microsoft.VisualBasic.Strings : object {
    public static char ChrW(int charCode);
    public static int AscW(string string);
    public static int AscW(char string);
    public static string Left(string str, int length);
}
internal class System.SR : object {
    private static ResourceManager s_resourceManager;
    private static string s_resourcesName;
    private static ResourceManager ResourceManager { get; }
    internal static string ID91 { get; }
    internal static string ID92 { get; }
    internal static string Argument_GEZero1 { get; }
    internal static string Argument_GTZero1 { get; }
    internal static string Argument_LengthGTZero1 { get; }
    internal static string Argument_RangeTwoBytes1 { get; }
    internal static string Argument_MinusOneOrGTZero1 { get; }
    internal static string Argument_GEMinusOne1 { get; }
    internal static string Argument_GEOne1 { get; }
    internal static string Argument_RankEQOne1 { get; }
    internal static string Argument_IComparable2 { get; }
    internal static string Argument_NotNumericType2 { get; }
    internal static string Argument_InvalidValue1 { get; }
    internal static string Argument_InvalidValueType2 { get; }
    internal static string Argument_InvalidValue { get; }
    internal static string Collection_BeforeAfterExclusive { get; }
    internal static string Collection_DuplicateKey { get; }
    internal static string ForLoop_CommonType2 { get; }
    internal static string ForLoop_CommonType3 { get; }
    internal static string ForLoop_ConvertToType3 { get; }
    internal static string ForLoop_OperatorRequired2 { get; }
    internal static string ForLoop_UnacceptableOperator2 { get; }
    internal static string ForLoop_UnacceptableRelOperator2 { get; }
    internal static string InternalError { get; }
    internal static string MaxErrNumber { get; }
    internal static string Argument_InvalidNullValue1 { get; }
    internal static string Argument_InvalidRank1 { get; }
    internal static string Argument_Range0to99_1 { get; }
    internal static string Array_RankMismatch { get; }
    internal static string Array_TypeMismatch { get; }
    internal static string InvalidCast_FromTo { get; }
    internal static string InvalidCast_FromStringTo { get; }
    internal static string Argument_InvalidDateValue1 { get; }
    internal static string ArgumentNotNumeric1 { get; }
    internal static string Argument_IndexLELength2 { get; }
    internal static string MissingMember_NoDefaultMemberFound1 { get; }
    internal static string MissingMember_MemberNotFoundOnType2 { get; }
    internal static string IntermediateLateBoundNothingResult1 { get; }
    internal static string Argument_CollectionIndex { get; }
    internal static string RValueBaseForValueType { get; }
    internal static string ExpressionNotProcedure { get; }
    internal static string LateboundCallToInheritedComClass { get; }
    internal static string MissingMember_ReadOnlyField2 { get; }
    internal static string Argument_InvalidNamedArgs { get; }
    internal static string SyncLockRequiresReferenceType1 { get; }
    internal static string NullReference_InstanceReqToAccessMember1 { get; }
    internal static string MatchArgumentFailure2 { get; }
    internal static string NoGetProperty1 { get; }
    internal static string NoSetProperty1 { get; }
    internal static string MethodAssignment1 { get; }
    internal static string NoViableOverloadCandidates1 { get; }
    internal static string NoArgumentCountOverloadCandidates1 { get; }
    internal static string NoTypeArgumentCountOverloadCandidates1 { get; }
    internal static string NoCallableOverloadCandidates2 { get; }
    internal static string NoNonNarrowingOverloadCandidates2 { get; }
    internal static string NoMostSpecificOverload2 { get; }
    internal static string AmbiguousCast2 { get; }
    internal static string NotMostSpecificOverload { get; }
    internal static string NamedParamNotFound2 { get; }
    internal static string NamedParamArrayArgument1 { get; }
    internal static string NamedArgUsedTwice2 { get; }
    internal static string OmittedArgument1 { get; }
    internal static string OmittedParamArrayArgument { get; }
    internal static string ArgumentMismatch3 { get; }
    internal static string ArgumentMismatchAmbiguous3 { get; }
    internal static string ArgumentNarrowing3 { get; }
    internal static string ArgumentMismatchCopyBack3 { get; }
    internal static string ArgumentMismatchAmbiguousCopyBack3 { get; }
    internal static string ArgumentNarrowingCopyBack3 { get; }
    internal static string UnboundTypeParam1 { get; }
    internal static string TypeInferenceFails1 { get; }
    internal static string FailedTypeArgumentBinding { get; }
    internal static string UnaryOperand2 { get; }
    internal static string BinaryOperands3 { get; }
    internal static string NoValidOperator_StringType1 { get; }
    internal static string NoValidOperator_NonStringType1 { get; }
    internal static string PropertySetMissingArgument1 { get; }
    internal static Type ResourceType { get; }
    private static ResourceManager get_ResourceManager();
    public static bool UsingResourceKeys();
    internal static string GetResourceString(string resourceKey, string defaultString);
    internal static string Format(string resourceFormat, Object[] args);
    internal static string Format(string resourceFormat, object p1);
    internal static string Format(string resourceFormat, object p1, object p2);
    internal static string Format(string resourceFormat, object p1, object p2, object p3);
    internal static string get_ID91();
    internal static string get_ID92();
    internal static string get_Argument_GEZero1();
    internal static string get_Argument_GTZero1();
    internal static string get_Argument_LengthGTZero1();
    internal static string get_Argument_RangeTwoBytes1();
    internal static string get_Argument_MinusOneOrGTZero1();
    internal static string get_Argument_GEMinusOne1();
    internal static string get_Argument_GEOne1();
    internal static string get_Argument_RankEQOne1();
    internal static string get_Argument_IComparable2();
    internal static string get_Argument_NotNumericType2();
    internal static string get_Argument_InvalidValue1();
    internal static string get_Argument_InvalidValueType2();
    internal static string get_Argument_InvalidValue();
    internal static string get_Collection_BeforeAfterExclusive();
    internal static string get_Collection_DuplicateKey();
    internal static string get_ForLoop_CommonType2();
    internal static string get_ForLoop_CommonType3();
    internal static string get_ForLoop_ConvertToType3();
    internal static string get_ForLoop_OperatorRequired2();
    internal static string get_ForLoop_UnacceptableOperator2();
    internal static string get_ForLoop_UnacceptableRelOperator2();
    internal static string get_InternalError();
    internal static string get_MaxErrNumber();
    internal static string get_Argument_InvalidNullValue1();
    internal static string get_Argument_InvalidRank1();
    internal static string get_Argument_Range0to99_1();
    internal static string get_Array_RankMismatch();
    internal static string get_Array_TypeMismatch();
    internal static string get_InvalidCast_FromTo();
    internal static string get_InvalidCast_FromStringTo();
    internal static string get_Argument_InvalidDateValue1();
    internal static string get_ArgumentNotNumeric1();
    internal static string get_Argument_IndexLELength2();
    internal static string get_MissingMember_NoDefaultMemberFound1();
    internal static string get_MissingMember_MemberNotFoundOnType2();
    internal static string get_IntermediateLateBoundNothingResult1();
    internal static string get_Argument_CollectionIndex();
    internal static string get_RValueBaseForValueType();
    internal static string get_ExpressionNotProcedure();
    internal static string get_LateboundCallToInheritedComClass();
    internal static string get_MissingMember_ReadOnlyField2();
    internal static string get_Argument_InvalidNamedArgs();
    internal static string get_SyncLockRequiresReferenceType1();
    internal static string get_NullReference_InstanceReqToAccessMember1();
    internal static string get_MatchArgumentFailure2();
    internal static string get_NoGetProperty1();
    internal static string get_NoSetProperty1();
    internal static string get_MethodAssignment1();
    internal static string get_NoViableOverloadCandidates1();
    internal static string get_NoArgumentCountOverloadCandidates1();
    internal static string get_NoTypeArgumentCountOverloadCandidates1();
    internal static string get_NoCallableOverloadCandidates2();
    internal static string get_NoNonNarrowingOverloadCandidates2();
    internal static string get_NoMostSpecificOverload2();
    internal static string get_AmbiguousCast2();
    internal static string get_NotMostSpecificOverload();
    internal static string get_NamedParamNotFound2();
    internal static string get_NamedParamArrayArgument1();
    internal static string get_NamedArgUsedTwice2();
    internal static string get_OmittedArgument1();
    internal static string get_OmittedParamArrayArgument();
    internal static string get_ArgumentMismatch3();
    internal static string get_ArgumentMismatchAmbiguous3();
    internal static string get_ArgumentNarrowing3();
    internal static string get_ArgumentMismatchCopyBack3();
    internal static string get_ArgumentMismatchAmbiguousCopyBack3();
    internal static string get_ArgumentNarrowingCopyBack3();
    internal static string get_UnboundTypeParam1();
    internal static string get_TypeInferenceFails1();
    internal static string get_FailedTypeArgumentBinding();
    internal static string get_UnaryOperand2();
    internal static string get_BinaryOperands3();
    internal static string get_NoValidOperator_StringType1();
    internal static string get_NoValidOperator_NonStringType1();
    internal static string get_PropertySetMissingArgument1();
    internal static Type get_ResourceType();
}
