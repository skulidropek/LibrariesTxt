public class Microsoft.VisualStudio.DesignTools.Extensibility.AssemblyReferences : ContextItem {
    private AssemblyIdentifier[] referencedAssemblies;
    [CompilerGeneratedAttribute]
private AssemblyIdentifier <LocalAssemblyIdentifier>k__BackingField;
    public Type ItemType { get; }
    public IEnumerable`1<AssemblyIdentifier> ReferencedAssemblies { get; }
    public AssemblyIdentifier LocalAssemblyIdentifier { get; private set; }
    public AssemblyReferences(IEnumerable`1<AssemblyIdentifier> newReferences);
    public AssemblyReferences(AssemblyIdentifier localAssemblyIdentifier, IEnumerable`1<AssemblyIdentifier> newReferences);
    public sealed virtual Type get_ItemType();
    public IEnumerable`1<AssemblyIdentifier> get_ReferencedAssemblies();
    [CompilerGeneratedAttribute]
public AssemblyIdentifier get_LocalAssemblyIdentifier();
    [CompilerGeneratedAttribute]
private void set_LocalAssemblyIdentifier(AssemblyIdentifier value);
    protected virtual void OnItemChanged(EditingContext context, ContextItem previousItem);
    private void BuildAssemblyReferences(IEnumerable`1<AssemblyIdentifier> newReferences);
}
public abstract class Microsoft.VisualStudio.DesignTools.Extensibility.ContextItem : object {
    public Type ItemType { get; }
    public abstract virtual Type get_ItemType();
    protected virtual void OnItemChanged(EditingContext context, ContextItem previousItem);
    internal void InvokeOnItemChanged(EditingContext context, ContextItem previousItem);
}
public abstract class Microsoft.VisualStudio.DesignTools.Extensibility.ContextItemManager : object {
    public abstract virtual bool Contains(Type itemType);
    public bool Contains();
    public abstract virtual IEnumerator`1<ContextItem> GetEnumerator();
    public abstract virtual ContextItem GetValue(Type itemType);
    public TItemType GetValue();
    protected static void NotifyItemChanged(EditingContext context, ContextItem item, ContextItem previousItem);
    public abstract virtual void SetValue(ContextItem value);
    public abstract virtual void Subscribe(Type contextItemType, SubscribeContextCallback callback);
    public void Subscribe(SubscribeContextCallback`1<TContextItemType> callback);
    public void Unsubscribe(SubscribeContextCallback`1<TContextItemType> callback);
    public abstract virtual void Unsubscribe(Type contextItemType, SubscribeContextCallback callback);
    protected static object GetTarget(Delegate callback);
    protected static Delegate RemoveCallback(Delegate existing, Delegate toRemove);
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
}
public class Microsoft.VisualStudio.DesignTools.Extensibility.EditingContext : object {
    private ContextItemManager _contextItems;
    private ServiceManager _services;
    [CompilerGeneratedAttribute]
private EventHandler Disposing;
    public ContextItemManager Items { get; }
    public ServiceManager Services { get; }
    [CompilerGeneratedAttribute]
public void add_Disposing(EventHandler value);
    [CompilerGeneratedAttribute]
public void remove_Disposing(EventHandler value);
    protected virtual override void Finalize();
    public ContextItemManager get_Items();
    public ServiceManager get_Services();
    protected virtual ContextItemManager CreateContextItemManager();
    protected virtual ServiceManager CreateServiceManager();
    public sealed virtual void Dispose();
    protected virtual void Dispose(bool disposing);
}
[AttributeUsageAttribute("1028")]
public class Microsoft.VisualStudio.DesignTools.Extensibility.Features.FeatureAttribute : Attribute {
    private Type _featureProviderType;
    private EqualityArray _typeId;
    public Type FeatureProviderType { get; }
    public object TypeId { get; }
    public FeatureAttribute(Type featureProviderType);
    public Type get_FeatureProviderType();
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public virtual object get_TypeId();
}
public class Microsoft.VisualStudio.DesignTools.Extensibility.Features.FeatureAvailableEventArgs : EventArgs {
    private Type _featureProviderType;
    public Type FeatureProviderType { get; }
    public FeatureAvailableEventArgs(Type featureProviderType);
    public Type get_FeatureProviderType();
}
public abstract class Microsoft.VisualStudio.DesignTools.Extensibility.Features.FeatureConnector`1 : object {
    private EditingContext _context;
    private FeatureManager _manager;
    protected EditingContext Context { get; }
    protected FeatureManager Manager { get; }
    protected FeatureConnector`1(FeatureManager manager);
    protected virtual override void Finalize();
    protected EditingContext get_Context();
    protected FeatureManager get_Manager();
    [IteratorStateMachineAttribute("Microsoft.VisualStudio.DesignTools.Extensibility.Features.FeatureConnector`1/<CreateFeatureProviders>d__8")]
protected IEnumerable`1<TFeatureProviderType> CreateFeatureProviders(TypeDefinition type);
    [IteratorStateMachineAttribute("Microsoft.VisualStudio.DesignTools.Extensibility.Features.FeatureConnector`1/<CreateFeatureProviders>d__9`1")]
protected IEnumerable`1<TSubtype> CreateFeatureProviders(TypeDefinition type);
    public sealed virtual void Dispose();
    protected virtual void Dispose(bool disposing);
}
[AttributeUsageAttribute("4")]
public class Microsoft.VisualStudio.DesignTools.Extensibility.Features.FeatureConnectorAttribute : Attribute {
    private Type _featureConnectorType;
    private EqualityArray _typeId;
    public Type FeatureConnectorType { get; }
    public object TypeId { get; }
    public FeatureConnectorAttribute(Type featureConnectorType);
    public Type get_FeatureConnectorType();
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public virtual object get_TypeId();
}
public abstract class Microsoft.VisualStudio.DesignTools.Extensibility.Features.FeatureConnectorInformation : object {
    public Type FeatureConnectorType { get; }
    public IEnumerable`1<Type> RequiredServices { get; }
    public IEnumerable`1<Type> RequiredItems { get; }
    public IEnumerable`1<Type> PendingServices { get; }
    public IEnumerable`1<Type> PendingItems { get; }
    public abstract virtual Type get_FeatureConnectorType();
    public abstract virtual IEnumerable`1<Type> get_RequiredServices();
    public abstract virtual IEnumerable`1<Type> get_RequiredItems();
    public abstract virtual IEnumerable`1<Type> get_PendingServices();
    public abstract virtual IEnumerable`1<Type> get_PendingItems();
}
public class Microsoft.VisualStudio.DesignTools.Extensibility.Features.FeatureManager : object {
    private EditingContext _context;
    private Dictionary`2<Type, FeatureConnectorEntry> _featureConnectors;
    private HashSet`1<Type> _knownFeatureProviders;
    private Predicate`1<Type> _defaultFilter;
    private MetadataProviderCallback _metadataProvider;
    private Dictionary`2<TypeDefinition, IEnumerable`1<object>> _featureAttributeCache;
    private Dictionary`2<Type, IEnumerable`1<object>> _featureConnectorAttributeCache;
    private HashSet`1<TypeDefinition> _initializedTypes;
    private HashSet`1<Type> _initializedFeatureProviderTypes;
    private static BindingFlags _createBindingFlags;
    [CompilerGeneratedAttribute]
private EventHandler`1<FeatureAvailableEventArgs> FeatureAvailable;
    public EditingContext Context { get; }
    public MetadataProviderCallback MetadataProvider { get; }
    public IEnumerable`1<FeatureConnectorInformation> PendingConnectors { get; }
    public IEnumerable`1<FeatureConnectorInformation> RunningConnectors { get; }
    public FeatureManager(EditingContext context);
    public FeatureManager(EditingContext context, MetadataProviderCallback metadataProvider);
    private static FeatureManager();
    protected virtual override void Finalize();
    private void ClearCaches();
    public EditingContext get_Context();
    public MetadataProviderCallback get_MetadataProvider();
    [IteratorStateMachineAttribute("Microsoft.VisualStudio.DesignTools.Extensibility.Features.FeatureManager/<get_PendingConnectors>d__19")]
public IEnumerable`1<FeatureConnectorInformation> get_PendingConnectors();
    [IteratorStateMachineAttribute("Microsoft.VisualStudio.DesignTools.Extensibility.Features.FeatureManager/<get_RunningConnectors>d__21")]
public IEnumerable`1<FeatureConnectorInformation> get_RunningConnectors();
    [CompilerGeneratedAttribute]
public void add_FeatureAvailable(EventHandler`1<FeatureAvailableEventArgs> value);
    [CompilerGeneratedAttribute]
public void remove_FeatureAvailable(EventHandler`1<FeatureAvailableEventArgs> value);
    public IEnumerable`1<FeatureProvider> CreateFeatureProviders(Type featureProviderType);
    [IteratorStateMachineAttribute("Microsoft.VisualStudio.DesignTools.Extensibility.Features.FeatureManager/<CreateFeatureProviders>d__26")]
public virtual IEnumerable`1<FeatureProvider> CreateFeatureProviders(Type featureProviderType, Predicate`1<Type> match);
    public IEnumerable`1<FeatureProvider> CreateFeatureProviders(Type featureProviderType, TypeDefinition typeDefinition);
    [IteratorStateMachineAttribute("Microsoft.VisualStudio.DesignTools.Extensibility.Features.FeatureManager/<CreateFeatureProviders>d__28")]
public virtual IEnumerable`1<FeatureProvider> CreateFeatureProviders(Type featureProviderType, TypeDefinition typeDefinition, Predicate`1<Type> match);
    private static FeatureProvider CreateFeatureProvider(Type featureProviderType);
    [IteratorStateMachineAttribute("Microsoft.VisualStudio.DesignTools.Extensibility.Features.FeatureManager/<CreateFeatureProviders>d__30")]
private static IEnumerable`1<FeatureProvider> CreateFeatureProviders(Type featureProviderType, IEnumerable`1<object> attrs, Predicate`1<Type> match);
    public sealed virtual void Dispose();
    protected virtual void Dispose(bool disposing);
    public IEnumerable`1<object> GetCustomAttributes(TypeDefinition typeDefinition, Type attributeType);
    private IEnumerable`1<object> GetCustomAttributesDefault(Type type, Type attributeType);
    private IEnumerable`1<object> GetFeatureAttributesForType(TypeDefinition typeDefinition);
    private IEnumerable`1<object> GetFeatureConnectorAttributesForType(Type type);
    public void InitializeFeatures(TypeDefinition type);
    private bool OnDefaultCallbackFilter(Type featureProviderType);
    protected virtual void OnFeatureAvailable(FeatureAvailableEventArgs e);
    [CompilerGeneratedAttribute]
private void <.ctor>b__10_0(AssemblyReferences newReferences);
}
public abstract class Microsoft.VisualStudio.DesignTools.Extensibility.Features.FeatureProvider : object {
}
internal interface Microsoft.VisualStudio.DesignTools.Extensibility.Features.IFeatureConnectorMarker {
}
public class Microsoft.VisualStudio.DesignTools.Extensibility.Features.MetadataProviderCallback : MulticastDelegate {
    public MetadataProviderCallback(object object, IntPtr method);
    public virtual IEnumerable`1<object> Invoke(TypeDefinition typeDefinition, Type attributeType);
    public virtual IAsyncResult BeginInvoke(TypeDefinition typeDefinition, Type attributeType, AsyncCallback callback, object object);
    public virtual IEnumerable`1<object> EndInvoke(IAsyncResult result);
}
public abstract class Microsoft.VisualStudio.DesignTools.Extensibility.Metadata.AssemblyDefinition : AssemblyIdentifier {
    public string FullName { get; }
    public abstract virtual string get_FullName();
    public abstract virtual IEnumerable`1<TypeDefinition> GetTypes();
}
public class Microsoft.VisualStudio.DesignTools.Extensibility.Metadata.AssemblyIdentifier : object {
    private Identifier name;
    private Identifier location;
    public bool IsEmpty { get; }
    public string Name { get; }
    public string Location { get; }
    public AssemblyIdentifier(string assemblyName);
    public AssemblyIdentifier(string assemblyName, string assemblyLocation);
    public bool get_IsEmpty();
    public virtual string get_Name();
    public virtual string get_Location();
    public virtual int GetHashCode();
    public virtual bool Equals(object obj);
    public static bool op_Equality(AssemblyIdentifier first, AssemblyIdentifier second);
    public static bool op_Inequality(AssemblyIdentifier first, AssemblyIdentifier second);
    public virtual bool Equals(AssemblyIdentifier other);
    public virtual string ToString();
}
public class Microsoft.VisualStudio.DesignTools.Extensibility.Metadata.AttributeCallback : MulticastDelegate {
    public AttributeCallback(object object, IntPtr method);
    public virtual void Invoke(AttributeCallbackBuilder builder);
    public virtual IAsyncResult BeginInvoke(AttributeCallbackBuilder builder, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class Microsoft.VisualStudio.DesignTools.Extensibility.Metadata.AttributeCallbackBuilder : object {
    private MutableAttributeTable table;
    private string callbackTypeIdentifier;
    public string CallbackTypeIdentifier { get; }
    internal AttributeCallbackBuilder(MutableAttributeTable table, string callbackTypeIdentifier);
    public string get_CallbackTypeIdentifier();
    public void AddCustomAttributes(Attribute[] attributes);
    public void AddCustomAttributes(string memberName, Attribute[] attributes);
}
public class Microsoft.VisualStudio.DesignTools.Extensibility.Metadata.AttributeTable : object {
    private MutableAttributeTable attributes;
    public IEnumerable`1<string> AttributedTypeIdentifiers { get; }
    internal MutableAttributeTable MutableTable { get; }
    internal AttributeTable(MutableAttributeTable attributes);
    public IEnumerable`1<string> get_AttributedTypeIdentifiers();
    internal MutableAttributeTable get_MutableTable();
    public bool ContainsAttributes(string typeIdentifier);
    public IEnumerable`1<string> GetAttributedMembers(string typeIdentifier);
    public IEnumerable GetAssemblyCustomAttributes(string assemblyIdentifier);
    public IEnumerable GetCustomAttributes(string typeIdentifier);
    public IEnumerable GetCustomAttributes(string ownerTypeIdentifier, string memberName);
}
public class Microsoft.VisualStudio.DesignTools.Extensibility.Metadata.AttributeTableBuilder : object {
    private MutableAttributeTable table;
    private bool cloneOnUse;
    private MutableAttributeTable MutableTable { get; }
    private MutableAttributeTable get_MutableTable();
    public void AddCallback(string typeIdentifier, AttributeCallback callback);
    public void AddAssemblyCustomAttributes(string assemblyIdentifier, Attribute[] attributes);
    public void AddCustomAttributes(string typeIdentifier, Attribute[] attributes);
    public void AddCustomAttributes(string ownerTypeIdentifier, string memberName, Attribute[] attributes);
    public void AddTable(AttributeTable table);
    public AttributeTable CreateTable();
}
public class Microsoft.VisualStudio.DesignTools.Extensibility.Metadata.EventIdentifier : ValueType {
    private TypeDefinition _declaringType;
    private TypeIdentifier _declaringTypeId;
    private Identifier _name;
    public TypeDefinition DeclaringType { get; }
    public TypeIdentifier DeclaringTypeIdentifier { get; }
    public string FullName { get; }
    public string Name { get; }
    public bool IsEmpty { get; }
    public EventIdentifier(TypeDefinition declaringType, string name);
    public EventIdentifier(TypeIdentifier declaringTypeId, string name);
    public TypeDefinition get_DeclaringType();
    public TypeIdentifier get_DeclaringTypeIdentifier();
    public string get_FullName();
    public string get_Name();
    public virtual int GetHashCode();
    public bool get_IsEmpty();
    public virtual bool Equals(object obj);
    public static bool op_Equality(EventIdentifier first, EventIdentifier second);
    public static bool op_Inequality(EventIdentifier first, EventIdentifier second);
    public sealed virtual bool Equals(EventIdentifier other);
    public virtual string ToString();
}
public interface Microsoft.VisualStudio.DesignTools.Extensibility.Metadata.IProvideAttributeTable {
    public AttributeTable AttributeTable { get; }
    public abstract virtual AttributeTable get_AttributeTable();
}
public static class Microsoft.VisualStudio.DesignTools.Extensibility.Metadata.MetadataFactory : object {
    public static TypeDefinition ResolveType(EditingContext context, TypeIdentifier typeIdentifier);
    public static AssemblyDefinition ResolveAssembly(EditingContext context, AssemblyIdentifier assemblyIdentifier);
}
public abstract class Microsoft.VisualStudio.DesignTools.Extensibility.Metadata.MetadataService : object {
    public abstract virtual AssemblyDefinition ResolveAssembly(AssemblyIdentifier assemblyIdentifier);
    public abstract virtual TypeDefinition ResolveType(TypeIdentifier typeIdentifier);
}
public class Microsoft.VisualStudio.DesignTools.Extensibility.Metadata.PropertyIdentifier : ValueType {
    private TypeDefinition _declaringType;
    private TypeIdentifier _declaringTypeId;
    private Identifier _name;
    private string _fullName;
    public TypeDefinition DeclaringType { get; }
    public TypeIdentifier DeclaringTypeIdentifier { get; }
    public string FullName { get; }
    public bool IsEmpty { get; }
    public string Name { get; }
    public PropertyIdentifier(TypeDefinition declaringType, string name);
    public PropertyIdentifier(TypeIdentifier declaringTypeId, string name);
    private static string CreateFullName(TypeDefinition declaringType, TypeIdentifier declaringTypeId, Identifier name);
    public TypeDefinition get_DeclaringType();
    public TypeIdentifier get_DeclaringTypeIdentifier();
    public string get_FullName();
    public bool get_IsEmpty();
    public string get_Name();
    public virtual int GetHashCode();
    public virtual bool Equals(object obj);
    public static bool op_Equality(PropertyIdentifier first, PropertyIdentifier second);
    public static bool op_Inequality(PropertyIdentifier first, PropertyIdentifier second);
    public sealed virtual bool Equals(PropertyIdentifier other);
    public virtual string ToString();
}
[AttributeUsageAttribute("1")]
public class Microsoft.VisualStudio.DesignTools.Extensibility.Metadata.ProvideMetadataAttribute : Attribute {
    private Type _metadataProviderType;
    public Type MetadataProviderType { get; }
    public ProvideMetadataAttribute(Type metadataProviderType);
    public Type get_MetadataProviderType();
}
public abstract class Microsoft.VisualStudio.DesignTools.Extensibility.Metadata.TypeDefinition : TypeIdentifier {
    public string FullName { get; }
    public bool IsPrimitive { get; }
    public abstract virtual string get_FullName();
    public abstract virtual bool get_IsPrimitive();
    public abstract virtual bool IsSubclassOf(TypeDefinition typeDefinition);
    public abstract virtual bool IsAssignableFrom(TypeDefinition typeDefinition);
}
public class Microsoft.VisualStudio.DesignTools.Extensibility.Metadata.TypeIdentifier : object {
    private Identifier _xmlNamespace;
    private Identifier _name;
    public bool IsEmpty { get; }
    public string Name { get; }
    internal string SimpleName { get; }
    public string XmlNamespace { get; }
    public TypeIdentifier(string xmlNamespace, string name);
    public TypeIdentifier(string fullyQualifiedName);
    public bool get_IsEmpty();
    public virtual string get_Name();
    internal string get_SimpleName();
    public string get_XmlNamespace();
    public virtual int GetHashCode();
    public virtual bool Equals(object obj);
    public static bool op_Equality(TypeIdentifier first, TypeIdentifier second);
    public static bool op_Inequality(TypeIdentifier first, TypeIdentifier second);
    public virtual bool Equals(TypeIdentifier other);
    public virtual string ToString();
}
public class Microsoft.VisualStudio.DesignTools.Extensibility.PublishServiceCallback : MulticastDelegate {
    public PublishServiceCallback(object object, IntPtr method);
    public virtual object Invoke(Type serviceType);
    public virtual IAsyncResult BeginInvoke(Type serviceType, AsyncCallback callback, object object);
    public virtual object EndInvoke(IAsyncResult result);
}
public class Microsoft.VisualStudio.DesignTools.Extensibility.PublishServiceCallback`1 : MulticastDelegate {
    public PublishServiceCallback`1(object object, IntPtr method);
    public virtual TServiceType Invoke();
    public virtual IAsyncResult BeginInvoke(AsyncCallback callback, object object);
    public virtual TServiceType EndInvoke(IAsyncResult result);
}
public abstract class Microsoft.VisualStudio.DesignTools.Extensibility.RequirementAttribute : Attribute {
    public bool AllRequired { get; }
    public virtual bool get_AllRequired();
    public abstract virtual bool MeetsRequirement(EditingContext context);
    public abstract virtual RequirementSubscription CreateSubscription(EditingContext context);
}
public abstract class Microsoft.VisualStudio.DesignTools.Extensibility.RequirementSubscription : object {
    private EventHandler _requirementChanged;
    private RequirementAttribute _requirement;
    public RequirementAttribute Requirement { get; }
    protected RequirementSubscription(RequirementAttribute requirement);
    public RequirementAttribute get_Requirement();
    public void add_RequirementChanged(EventHandler value);
    public void remove_RequirementChanged(EventHandler value);
    protected void OnRequirementChanged();
    protected abstract virtual void Subscribe();
    protected abstract virtual void Unsubscribe();
}
public class Microsoft.VisualStudio.DesignTools.Extensibility.RequirementValidator : object {
    private FeatureManager _featureManager;
    private Type _type;
    private IEnumerable`1<RequirementAttribute> _requirements;
    private EventHandler _requirementsChanged;
    private IEnumerable`1<RequirementSubscription> _subscriptions;
    private static object _syncLock;
    private static Dictionary`2<Type, IEnumerable`1<RequirementAttribute>> _requirementCache;
    public bool MeetsRequirements { get; }
    public IEnumerable`1<RequirementAttribute> PendingRequirements { get; }
    public IEnumerable`1<RequirementAttribute> Requirements { get; }
    public Type Type { get; }
    public RequirementValidator(FeatureManager featureManager, Type type);
    private static RequirementValidator();
    public bool get_MeetsRequirements();
    [IteratorStateMachineAttribute("Microsoft.VisualStudio.DesignTools.Extensibility.RequirementValidator/<get_PendingRequirements>d__11")]
public IEnumerable`1<RequirementAttribute> get_PendingRequirements();
    public IEnumerable`1<RequirementAttribute> get_Requirements();
    public Type get_Type();
    public void add_RequirementsChanged(EventHandler value);
    public void remove_RequirementsChanged(EventHandler value);
    private void OnRequirementChanged(object sender, EventArgs e);
    private void SubscribeRequirements();
    [ConditionalAttribute("DEBUG")]
internal static void Trace(string format, Object[] args);
    private void UnsubscribeRequirements();
}
[AttributeUsageAttribute("4")]
public class Microsoft.VisualStudio.DesignTools.Extensibility.RequiresContextItemAttribute : RequirementAttribute {
    private Type _contextItemType;
    public Type ContextItemType { get; }
    public object TypeId { get; }
    public RequiresContextItemAttribute(Type contextItemType);
    public Type get_ContextItemType();
    public virtual object get_TypeId();
    public virtual RequirementSubscription CreateSubscription(EditingContext context);
    public virtual bool MeetsRequirement(EditingContext context);
}
[AttributeUsageAttribute("4")]
public class Microsoft.VisualStudio.DesignTools.Extensibility.RequiresServiceAttribute : RequirementAttribute {
    private Type _serviceType;
    public Type ServiceType { get; }
    public object TypeId { get; }
    public RequiresServiceAttribute(Type serviceType);
    public Type get_ServiceType();
    public virtual object get_TypeId();
    public virtual RequirementSubscription CreateSubscription(EditingContext context);
    public virtual bool MeetsRequirement(EditingContext context);
}
public abstract class Microsoft.VisualStudio.DesignTools.Extensibility.ServiceManager : object {
    public abstract virtual bool Contains(Type serviceType);
    public bool Contains();
    public TServiceType GetRequiredService();
    public TServiceType GetService();
    public abstract virtual object GetService(Type serviceType);
    public abstract virtual IEnumerator`1<Type> GetEnumerator();
    public abstract virtual void Subscribe(Type serviceType, SubscribeServiceCallback callback);
    public void Subscribe(SubscribeServiceCallback`1<TServiceType> callback);
    public abstract virtual void Publish(Type serviceType, PublishServiceCallback callback);
    public abstract virtual void Publish(Type serviceType, object serviceInstance);
    public void Publish(PublishServiceCallback`1<TServiceType> callback);
    public void Publish(TServiceType serviceInstance);
    public void Unsubscribe(SubscribeServiceCallback`1<TServiceType> callback);
    public abstract virtual void Unsubscribe(Type serviceType, SubscribeServiceCallback callback);
    protected static object GetTarget(Delegate callback);
    protected static Delegate RemoveCallback(Delegate existing, Delegate toRemove);
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
}
public class Microsoft.VisualStudio.DesignTools.Extensibility.SubscribeContextCallback : MulticastDelegate {
    public SubscribeContextCallback(object object, IntPtr method);
    public virtual void Invoke(ContextItem item);
    public virtual IAsyncResult BeginInvoke(ContextItem item, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class Microsoft.VisualStudio.DesignTools.Extensibility.SubscribeContextCallback`1 : MulticastDelegate {
    public SubscribeContextCallback`1(object object, IntPtr method);
    public virtual void Invoke(TContextItemType item);
    public virtual IAsyncResult BeginInvoke(TContextItemType item, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class Microsoft.VisualStudio.DesignTools.Extensibility.SubscribeServiceCallback : MulticastDelegate {
    public SubscribeServiceCallback(object object, IntPtr method);
    public virtual void Invoke(Type serviceType, object serviceInstance);
    public virtual IAsyncResult BeginInvoke(Type serviceType, object serviceInstance, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class Microsoft.VisualStudio.DesignTools.Extensibility.SubscribeServiceCallback`1 : MulticastDelegate {
    public SubscribeServiceCallback`1(object object, IntPtr method);
    public virtual void Invoke(TServiceType serviceInstance);
    public virtual IAsyncResult BeginInvoke(TServiceType serviceInstance, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
[AttributeUsageAttribute("1")]
public class Microsoft.VisualStudio.DesignTools.Extensibility.XmlnsSupportsValidationAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <XmlNamespace>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <SupportsValidation>k__BackingField;
    public string XmlNamespace { get; private set; }
    public bool SupportsValidation { get; private set; }
    public XmlnsSupportsValidationAttribute(string xmlNamespace, bool supportsValidation);
    [CompilerGeneratedAttribute]
public string get_XmlNamespace();
    [CompilerGeneratedAttribute]
private void set_XmlNamespace(string value);
    [CompilerGeneratedAttribute]
public bool get_SupportsValidation();
    [CompilerGeneratedAttribute]
private void set_SupportsValidation(bool value);
}
internal static class Microsoft.VisualStudio.DesignTools.Utility.BrandNames : object {
    public static string VSGeneralBrand;
    public static string VSGeneralBrandMicrosoft;
    public static string VSGeneralBrandName;
    public static string VSGeneralBrandRelease;
    public static string VSGeneralBrandVersion;
    public static string VSGeneralVersion;
    public static string VSGeneralUserFilesFolderName;
}
internal static class Microsoft.VisualStudio.Internal.BrandNames : object {
    public static string VSGeneralAssemblyVersionPrevious;
    public static string Manufacturer;
    public static string EnterpriseGeneralBrandVersionRelease;
    public static string EnterpriseBrandVersionRelease;
    public static string EnterpriseGeneralBrandVersionReleaseLanguage;
    public static string EnterpriseName;
    public static string SSEnterpriseGeneralBrandVersionRelease;
    public static string SSEditionEnterpriseName;
    public static string EditionEnterpriseName;
    public static string EnterpriseBrandName;
    public static string EnterpriseBrandNameM;
    public static string EnterpriseBrandNameVersion;
    public static string EnterpriseBrandNameVersionM;
    public static string EnterpriseBrandNameVersionReleaseM;
    public static string EnterpriseBrandNameVersionReleaseMNoLoc;
    public static string EnterpriseBrandNameVersionReleaseMsiResource;
    public static string EnterpriseBrandNameShort;
    public static string EnterpriseNameA;
    public static string EnterpriseEditionNameA;
    public static string EnterpriseBrandNameA;
    public static string EnterpriseBrandNameMA;
    public static string EnterpriseBrandNameVersionA;
    public static string EnterpriseBrandNameVersionMA;
    public static string EnterpriseBrandNameVersionReleaseA;
    public static string EnterpriseBrandNameVersionReleaseMA;
    public static string EnterpriseBrandNameShortA;
    public static string VSTDBrandNameVersionReleaseM;
    public static string VSTDBrandNameVersionReleaseResourceMsi;
    public static string TeamExplorerGeneralBrandVersionRelease;
    public static string TeamExplorerBrandVersionRelease;
    public static string TeamExplorerGeneralBrandVersionReleaseLanguage;
    public static string TeamExplorerName;
    public static string SSTeamExplorerGeneralBrandVersionRelease;
    public static string SSEditionTeamExplorerName;
    public static string EditionTeamExplorerName;
    public static string TeamExplorerBrandName;
    public static string TeamExplorerBrandNameM;
    public static string TeamExplorerBrandNameVersion;
    public static string TeamExplorerBrandNameVersionM;
    public static string TeamExplorerBrandNameVersionReleaseM;
    public static string TeamExplorerBrandNameVersionReleaseMNoLoc;
    public static string TeamExplorerBrandNameVersionReleaseMsiResource;
    public static string TeamExplorerBrandNameShort;
    public static string TeamExplorerNameA;
    public static string TeamExplorerEditionNameA;
    public static string TeamExplorerBrandNameA;
    public static string TeamExplorerBrandNameMA;
    public static string TeamExplorerBrandNameVersionA;
    public static string TeamExplorerBrandNameVersionMA;
    public static string TeamExplorerBrandNameVersionReleaseA;
    public static string TeamExplorerBrandNameVersionReleaseMA;
    public static string TeamExplorerBrandNameShortA;
    public static string ProfessionalGeneralBrandVersionRelease;
    public static string ProfessionalBrandVersionRelease;
    public static string ProfessionalGeneralBrandVersionReleaseLanguage;
    public static string SSEditionProName;
    public static string EditionProName;
    public static string ProBrandName;
    public static string ProBrandNameM;
    public static string ProBrandNameVersionM;
    public static string ProBrandNameVersionReleaseM;
    public static string ProBrandNameVersionReleaseMNoLoc;
    public static string ProBrandNameVersionReleaseResourceMsi;
    public static string ProBrandNameShort;
    public static string ProNameA;
    public static string ProEditionNameA;
    public static string ProBrandNameA;
    public static string ProBrandNameMA;
    public static string ProBrandNameVersionA;
    public static string ProBrandNameVersionMA;
    public static string ProBrandNameVersionReleaseA;
    public static string ProBrandNameVersionReleaseMA;
    public static string ProBrandNameShortA;
    public static string CommunityGeneralBrandVersionRelease;
    public static string CommunityBrandVersionRelease;
    public static string CommunityBrandNameVersionM;
    public static string EditionCommunityName;
    public static string SSEditionCommunityName;
    public static string CommunityEditionNameA;
    public static string CommunityBrandNameShortA;
    public static string CommunityBrandNameVersionReleaseMA;
    public static string CommunityBrandNameVersionReleaseM;
    public static string CommunityBrandNameVersionReleaseA;
    public static string CommunityBrandNameVersionReleaseResourceMsi;
    public static string TestProfessionalGeneralBrandVersionRelease;
    public static string TestProfessionalBrandVersionRelease;
    public static string TestProfessionalGeneralBrandVersionReleaseLanguage;
    public static string FeedbackClientGeneralBrandVersionRelease;
    public static string FeedbackClientBrandVersionRelease;
    public static string FeedbackClientGeneralBrandVersionReleaseLanguage;
    public static string AgentsGeneralBrandVersionRelease;
    public static string AgentsBrandVersionRelease;
    public static string AgentsGeneralBrandVersionReleaseLanguage;
    public static string TestControllerGeneralBrandVersionRelease;
    public static string TestControllerBrandVersionRelease;
    public static string TestControllerGeneralBrandVersionReleaseLanguage;
    public static string TestToolsGeneralBrandVersionRelease;
    public static string TestToolsBrandVersionRelease;
    public static string TestToolsGeneralBrandVersionReleaseLanguage;
    public static string TestToolsLanguagePackGeneralBrandVersionReleaseLanguage;
    public static string TestToolsLanguagePackBrandVersionReleaseLanguage;
    public static string IsoShellGeneralBrandVersionRelease;
    public static string IsoShellBrandVersionRelease;
    public static string IsoShellGeneralBrandVersionReleaseLanguage;
    public static string IsoShellLanguagePackGeneralBrandVersionReleaseLanguage;
    public static string IsoShellLanguagePackBrandVersionReleaseLanguage;
    public static string IntShellGeneralBrandVersionRelease;
    public static string IntShellBrandVersionRelease;
    public static string IntShellGeneralBrandVersionReleaseLanguage;
    public static string IntShellLanguagePackGeneralBrandVersionReleaseLanguage;
    public static string IntShellLanguagePackBrandVersionReleaseLanguage;
    public static string VSSDKGeneralVersionReleaseBrand;
    public static string VSSDKVersionReleaseBrand;
    public static string VSSDKGeneralVersionReleaseBrandLanguage;
    public static string VSSDKExpInstanceLaunchShortcutName;
    public static string VSSDKExpInstanceRecreateShortcutName;
    public static string VSSDKGettingStartedShortcutName;
    public static string VSSDKLanguagePackVersionReleaseBrandLanguage;
    public static string VSSDKLanguagePackGeneralVersionReleaseBrandLanguage;
    public static string TestHostLongProductName;
    public static string TestHostShortProductName;
    public static string GeneralBrandVersionRelease;
    public static string GeneralBrandShortcutName;
    public static string VSToolsFolderGeneralBrandShortcutName;
    public static string VSToolsFolderGeneralBrandDescription;
    public static string VisualStudioLanguagePackGeneralBrandVersionRelease;
    public static string VisualStudioLanguagePackBrandVersionReleaseLanguage;
    public static string TestProfessionalLanguagePackGeneralBrandVersionRelease;
    public static string TestProfessionalLanguagePackBrandVersionReleaseLanguage;
    public static string FeedbackClientLanguagePackGeneralBrandVersionRelease;
    public static string FeedbackClientLanguagePackBrandVersionReleaseLanguage;
    public static string AgentsLanguagePackGeneralBrandVersionRelease;
    public static string AgentsLanguagePackBrandVersionReleaseLanguage;
    public static string TestControllerLanguagePackGeneralBrandVersionRelease;
    public static string TestControllerLanguagePackBrandVersionReleaseLanguage;
    public static string WindowsExpressGeneralBrandVersionRelease;
    public static string WindowsExpressBrandVersionRelease;
    public static string WindowsGeneralBrandVersionReleaseLanguage;
    public static string WindowsExpressBrandShortcutName;
    public static string WindowsExpressLanguagePackGeneralBrandVersionReleaseLanguage;
    public static string WindowsExpressLanguagePackBrandVersionReleaseLanguage;
    public static string PhoneAddonGeneralBrandVersionReleaseLanguage;
    public static string PhoneAddonBrandNoRelease;
    public static string PhoneAddonBrandVersionRelease;
    public static string PhoneAddonWindowsExpressCoreGeneralBrandVersionRelease;
    public static string PhoneAddonWindowsExpressCoreGeneralBrandVersionReleaseLanguage;
    public static string PhoneAddonProfessionalCoreGeneralBrandVersionRelease;
    public static string PhoneAddonProfessionalCoreGeneralBrandVersionReleaseLanguage;
    public static string PhoneAddonSharedCoreGeneralBrandVersionRelease;
    public static string PhoneAddonSharedCoreGeneralBrandVersionReleaseLanguage;
    public static string VSTemplatesGeneralBrandVersionReleaseLanguage;
    public static string VSTemplatesBrandNoRelease;
    public static string VSTemplatesBrandVersionRelease;
    public static string VSTemplatesWindowsExpressCoreGeneralBrandVersionRelease;
    public static string VSTemplatesWindowsExpressCoreGeneralBrandVersionReleaseLanguage;
    public static string VSTemplatesProfessionalCoreGeneralBrandVersionRelease;
    public static string VSTemplatesProfessionalCoreGeneralBrandVersionReleaseLanguage;
    public static string VSTemplatesSharedCoreGeneralBrandVersionRelease;
    public static string VSTemplatesSharedCoreGeneralBrandVersionReleaseLanguage;
    public static string VSTemplates_Win81WP81_CommunityCoreGeneralBrandVersionReleaseLanguage;
    public static string WindowsBuildCoreMSI;
    public static string WindowsBuildCoreResMSI;
    public static string WindowsToolsCoreMSI;
    public static string WindowsToolsCoreResMSI;
    public static string WindowsTestCoreMSI;
    public static string WindowsMobileEmulatorsMSI;
    public static string WindowsMobileEmSaveStateMSI;
    public static string WindowsOneCoreDesktopMSI;
    public static string Windows10Tools_BundleName;
    public static string WindowsSimulatorMSI;
    public static string WindowsSimulatorResMSI;
    public static string WindowsPhoneEmulators80GeneralBrandVersionReleaseLanguage;
    public static string WindowsPhoneEmulators80BrandNoRelease;
    public static string WindowsPhoneEmulators80BrandVersionRelease;
    public static string WindowsPhoneEmulators81GeneralBrandVersionReleaseLanguage;
    public static string WindowsPhoneEmulators81BrandNoRelease;
    public static string WindowsPhoneEmulators81BrandVersionRelease;
    public static string WindowsPhoneEmulators81GDR1GeneralBrandVersionReleaseLanguage;
    public static string WindowsPhoneEmulators81GDR1BrandNoRelease;
    public static string WebExpressGeneralBrandVersionRelease;
    public static string WebExpressBrandVersionRelease;
    public static string WebExpressGeneralBrandVersionReleaseLanguage;
    public static string WebExpressBrandShortcutName;
    public static string WebExpressLanguagePackGeneralBrandVersionReleaseLanguage;
    public static string WebExpressLanguagePackBrandVersionReleaseLanguage;
    public static string DesktopExpressGeneralBrandVersionRelease;
    public static string DesktopExpressBrandVersionRelease;
    public static string DesktopExpressGeneralBrandVersionReleaseLanguage;
    public static string DesktopExpressBrandShortcutName;
    public static string DesktopExpressLanguagePackGeneralBrandVersionReleaseLanguage;
    public static string DesktopExpressLanguagePackBrandVersionReleaseLanguage;
    public static string FSharpToolsForVWDExpressBrand;
    public static string LightSwitchLanguagePackGeneralBrandVersionReleaseLanguage;
    public static string DevenvLanguagePackGeneralBrandVersionRelease;
    public static string AppInsightsVSBrandVersionRelease;
    public static string AppInsightsVWDExpressBrandVersionRelease;
    public static string AppInsightsVSWinExpressBrandVersionRelease;
    public static string IntelliTraceFrontEndGeneralBrandVersionRelease;
    public static string PerfDebuggerWebViews;
    public static string PerfDebuggerWebViewsLoc;
    public static string IntelliTraceFrontEndLanguagePackGeneralBrandVersionReleaseLanguage;
    public static string IntelliTraceGeneralBrandVersionReleasex86;
    public static string IntelliTraceGeneralBrandVersionReleasex64;
    public static string IntellitraceLanguagePackGeneralBrandVersionRelease;
    public static string IntelliTraceLanguagePackGeneralBrandVersionReleaseLanguagex86;
    public static string IntelliTraceLanguagePackGeneralBrandVersionReleaseLanguagex64;
    public static string DiagnosticToolsGeneralBrandVersionX86;
    public static string DiagnosticToolsGeneralBrandVersionAMD64;
    public static string DiagnosticToolsGeneralBrandVersionARM;
    public static string DiagnosticToolsGeneralBrandVersionARM64;
    public static string DiagnosticToolsResourcesGeneralBrandVersion;
    public static string DynamicanalysisCollectionbitsGeneralBrandVersionRelease;
    public static string DynamicanalysisCollectionbitsLanguagePackGeneralBrandVersionRelease;
    public static string FinalizerGeneralBrandVersionRelease;
    public static string SpToolsLangPackGeneralBrandVersionRelease;
    public static string MinShellLangPackGeneralBrandVersionRelease;
    public static string BuildToolsProductName;
    public static string BuildToolsResProductName;
    public static string VSVmSdkFullBrandName;
    public static string VSVmSdkShortBrandName;
    public static string VisualCppCompilerBrandName;
    public static string VSMBCSMFCBrandName;
    public static string VS2012VerificationSDK;
    public static string UnitTestCppForWinExpress;
    public static string CodedUITestUAPSDK;
    public static string CodedUITest81SDK;
    public static string CppRestSDKBrandName;
    public static string CppRestSDKInstallerBrandName;
    public static string CppAzureMobileSDKBrandName;
    public static string CppAzureMobileSDKInstallerBrandName;
    public static string VSUpdateCore;
    public static string SSProfessionalGeneralBrandVersionRelease;
    public static string SSCommunityGeneralBrandVersionRelease;
    public static string SSVnsExpressGeneralBrandVersionRelease;
    public static string SSDesktopExpressGeneralBrandVersionRelease;
    public static string SSWindowsExpressGeneralBrandVersionRelease;
    public static string VSGraphicsAnalyzerBrandName;
    public static string VSGraphicsAnalyzerBrandNameVersionRelease;
    public static string VstaLanguages;
    public static string VstaLpLanguages;
    public static string TestBundleGeneralBrandVersionRelease;
    public static string TestBundleGeneralBrandVersion;
    public static string VSGeneralBrandMicrosoft;
    public static string VSGeneralBrandName;
    public static string VSGeneralBrandNameShort;
    public static string VSGeneralBrandLanguagePack;
    public static string IsoShellName;
    public static string IntShellName;
    public static string IntShellNameShort;
    public static string ShellsRedistName;
    public static string ProName;
    public static string LSName;
    public static string AgentsName;
    public static string TestControllerName;
    public static string TestElementsName;
    public static string TestProfessionalName;
    public static string FeedbackClientName;
    public static string SkuFlavorExpress;
    public static string VWDGeneralPurpose;
    public static string VWDGeneralPurposeShort;
    public static string VW8GeneralPurpose;
    public static string VW8GeneralPurposeShort;
    public static string BlendBrandNoRelease;
    public static string BlendGeneralBrandNameA;
    public static string BlendGeneralBrandNameM;
    public static string BlendGeneralBrandNameMA;
    public static string BlendGeneralBrandNameShortA;
    public static string BlendVW8ExpressBrandNameVersionReleaseA;
    public static string BlendVW8ExpressBrandNameVersionReleaseMA;
    public static string BlendVW8ExpressBrandNameShortA;
    public static string BlendCommunityBrandNameVersionReleaseA;
    public static string BlendCommunityBrandNameVersionReleaseMA;
    public static string BlendCommunityBrandNameShortA;
    public static string BlendProBrandNameVersionReleaseA;
    public static string BlendProBrandNameVersionReleaseMA;
    public static string BlendProBrandNameShortA;
    public static string BlendTSBrandNameVersionReleaseA;
    public static string BlendTSBrandNameVersionReleaseMA;
    public static string BlendTSBrandNameShortA;
    public static string BlendBrandNameShortcutName;
    public static string VSBlendBrandName;
    public static string VSBlendBrandNameA;
    public static string VSBlendBrandNameM;
    public static string VSBlendBrandNameShortA;
    public static string VSBlendBrandNameVersionA;
    public static string VSBlendBrandNameVersionM;
    public static string VSBlendBrandNameVersionMA;
    public static string VSBlendBrandNameVersionReleaseM;
    public static string VSBlendBrandNameVersionReleaseMLanguage;
    public static string VSBlendBrandNameShortcutName;
    public static string HelpViewerVersion;
    public static string HelpCatalogName;
    public static string HelpEndPointVersion;
    public static string HelpAppID;
    public static string HelpQueryBase;
    public static string HelpSettingFilePath;
    public static string HelpLocProductNameAndLanguage;
    public static string HelpLocProductNameAndDescription;
    public static string WindowsPhoneSDK80BrandNameShort;
    public static string WindowsPhoneSDK80EditionName;
    public static string AddinForWindowsPhone;
    public static string LanguagePack;
    public static string Emulator80Configurator;
    public static string WP80ManagedSdkProfiler;
    public static string PlatformX86;
    public static string PlatformARM;
    public static string SdkToolsFinalizer;
    public static string XDEHost;
    public static string WDGeneralPurpose;
    public static string WDGeneralPurposeShort;
    public static string RemoteDebuggerBrandName;
    public static string RemoteToolsBrandNameVersion;
    public static string RemoteToolsRegistrationBrandNameVersion;
    public static string RemoteToolsBrandNameVersionLangPack;
    public static string RemoteDebuggerDiscoveryFirewallConfig_Name;
    public static string RemoteDebuggerDiscoveryFirewallConfig_Description;
    public static string PerformanceToolsName;
    public static string UpdateName;
    public static string SDKName;
    public static string ClusterToolsName;
    public static string ConcViStandaloneToolsName;
    public static string CodeMetricsPowerToolBrandNameVersion;
    public static string LANGLocName;
    public static string ProfilingTool;
    public static string SLDRT;
    public static string MDDCPlusPlusBreadcrumbResName;
    public static string MDDCSharpBreadcrumbResName;
    public static string MDDJSBreadcrumbResName;
    public static string MDDCPlusPlusCoreName;
    public static string MDDCPlusPlusCoreResName;
    public static string MDDCPlusPlusCoreName_iOS;
    public static string MDDCPlusPlusCoreResName_iOS;
    public static string MDDCSharpCoreName;
    public static string MDDCSharpCoreResName;
    public static string MDDJSCoreName;
    public static string MDDJSCoreResName;
    public static string MDDCPlusPlusBundle_iOS;
    public static string MDDCPlusPlusBundle;
    public static string VCLinuxCoreName;
    public static string VCLinuxBundle;
    public static string SecondaryInstallerName;
    public static string SecondaryInstallerNameRes;
    public static string SecondaryInstallerExePackage;
    public static string BlissGeneralBrandVersionRelease;
    public static string BlissGeneralBrandVersionReleaseLanguage;
    public static string ClientDiagnosticsGeneralBrandVersionRelease;
    public static string ClientDiagnosticsGeneralBrandVersionReleaseLanguage;
    public static string ClientDiagnosticsARGeneralBrandVersionRelease;
    public static string ClientDiagnosticsARGeneralBrandVersionReleaseLanguage;
    public static string ClientDiagnosticsXDGeneralBrandVersionRelease;
    public static string ClientDiagnosticsWindowsXDGeneralBrandVersionRelease;
    public static string ClientDiagnosticsXDGeneralBrandVersionReleaseLanguage;
    public static string ClientDiagnosticsAAGeneralBrandVersionRelease;
    public static string ClientDiagnosticsAAGeneralBrandVersionReleaseLanguage;
    public static string LaunchConditionMessage;
    public static string FilesInUseText;
    public static string DowngradeErrorMessage;
    public static string GeneralBrandRelease;
    public static string GeneralBrandVersion;
    public static string GeneralVersion;
    public static string GeneralVersionShort;
    public static string VSGeneralCopyrightYear;
    public static string VSWindowsSDKVersion;
    public static string VSGeneralBrandMicrosoftNoLoc;
    public static string VSGeneralBrandNameNoLoc;
    public static string VSGeneralBrandVersion;
    public static string VSGeneralVersion;
    public static string VSGeneralUserFilesFolderName;
    public static string VSGeneralBrandNameMNoLoc;
    public static string VSGeneralInstallFolderName;
    public static string WinJSName;
    public static string VSUpdateGeneralBrandRelease;
    public static string IRUpdateGeneralBrandRelease;
    public static string VSUpdateGeneralVersion;
    public static string IRUpdateGeneralVersion;
    public static string VSUpdateBrandNameNoLoc;
    public static string VSUpdateBrandNameVersionRelease;
    public static string VSUpdateExeNameNoLoc;
    public static string IRServerGeneralBrandNameNoLoc;
    public static string IRClientGeneralBrandNameNoLoc;
    public static string IRDeployerGeneralBrandNameNoLoc;
    public static string IRProductFolderName;
    public static string VSGeneralBrandRelease;
    public static string VSGeneralBrandVersionRelease;
    public static string VSGeneralBrandNameM;
    public static string VSGeneralBrandNoRelease;
    public static string VSGeneralBrand;
    public static string VSGeneralBrandNoMNoRelease;
    public static string VSGeneralBrandNoM;
    public static string VSGeneralVersionShort;
    public static string IsoShellBrandName;
    public static string IsoShellBrandNameM;
    public static string IsoShellBrandNameVersion;
    public static string IsoShellBrandNameVersionM;
    public static string IsoShellResBrandNameVersionM;
    public static string IsoShellBrandNameVersionReleaseM;
    public static string IsoShellResourceMsi;
    public static string IntShellBrandName;
    public static string IntShellBrandNameM;
    public static string IntShellBrandNameVersion;
    public static string IntShellBrandNameVersionM;
    public static string IntShellBrandNameVersionReleaseM;
    public static string IntShellBrandNameShort;
    public static string IntShellResourceMsi;
    public static string VSSDKShortName;
    public static string VSSDKLongName;
    public static string VSSDKBrandName;
    public static string VSSDKLangPackBrandName;
    public static string MinShellName;
    public static string MinShellBrandNameVersionM;
    public static string MinShellResBrandNameVersionM;
    public static string MinShellInteropBrandNameVersionM;
    public static string DevenvName;
    public static string DevenvBrandNameVersionM;
    public static string DevenvResBrandNameVersionM;
    public static string ShellsRedistBrandName;
    public static string ShellsRedistBrandNameM;
    public static string ShellsRedistBrandNameVersion;
    public static string ShellsRedistBrandNameVersionM;
    public static string ShellsRedistResBrandNameVersionM;
    public static string ShellsRedistBrandNameVersionReleaseM;
    public static string VSGeneralBrandShortcutName;
    public static string LSBrandName;
    public static string LSBrandNameM;
    public static string LSBrandNameVersionM;
    public static string LSBrandNameVersionReleaseM;
    public static string LSLanguagePackGeneralBrandVersionReleaseLanguage;
    public static string AgentsBrandName;
    public static string AgentsBrandNameM;
    public static string AgentsBrandNameVersion;
    public static string AgentsBrandNameVersionReleaseMsiResource;
    public static string AgentsBrandNameVersionM;
    public static string AgentsBrandNameVersionReleaseM;
    public static string TestControllerBrandName;
    public static string TestControllerBrandNameM;
    public static string TestControllerBrandNameVersion;
    public static string TestControllerBrandNameVersionReleaseMsiResource;
    public static string TestControllerBrandNameVersionM;
    public static string TestControllerBrandNameVersionReleaseM;
    public static string TestElementsBrandName;
    public static string TestElementsBrandNameM;
    public static string TestElementsBrandNameVersion;
    public static string TestElementsBrandNameVersionM;
    public static string TestElementsBrandNameVersionReleaseM;
    public static string TestProfessionalBrandName;
    public static string TestProfessionalBrandNameM;
    public static string TestProfessionalBrandNameVersion;
    public static string TestProfessionalBrandNameVersionReleaseMsiResource;
    public static string TestProfessionalBrandNameVersionM;
    public static string TestProfessionalBrandNameVersionReleaseM;
    public static string FeedbackClientBrandName;
    public static string FeedbackClientBrandNameM;
    public static string FeedbackClientBrandNameVersion;
    public static string FeedbackClientBrandNameVersionReleaseMsiResource;
    public static string FeedbackClientBrandNameVersionM;
    public static string FeedbackClientBrandNameVersionReleaseM;
    public static string VWDGeneralBrandName;
    public static string VWDGeneralBrandNameM;
    public static string VWDGeneralBrandNameVersion;
    public static string VWDExpressBrandNoRelease;
    public static string VWDExpressBrand;
    public static string VWDExpressBrandShort;
    public static string VWDExpressBrandShortcutName;
    public static string VWDExpressResourceMsi;
    public static string VW8GeneralBrandName;
    public static string VW8GeneralBrandNameM;
    public static string VW8GeneralBrandNameVersion;
    public static string VW8ExpressBrandNoRelease;
    public static string VW8ExpressBrand;
    public static string VW8ExpressBrandShort;
    public static string VW8ExpressBrandShortcutName;
    public static string VW8ExpressResourceMsi;
    public static string WDGeneralBrandName;
    public static string WDGeneralBrandNameM;
    public static string WDGeneralBrandNameVersion;
    public static string WDExpressBrandNoRelease;
    public static string WDExpressBrand;
    public static string WDExpressBrandShort;
    public static string WDExpressBrandShortcutName;
    public static string WDExpressResourceMsi;
    public static string WPSDK80ShortBrandName;
    public static string WPSdk80ProductNameBrandNameVersionRelease;
    public static string WPSdk80ProductNameBrandNameVersionReleaseLanguage;
    public static string WP80ManagedSdkProfilerX86;
    public static string WP80ManagedSdkProfilerARM;
    public static string WP80ToolsFinalizer;
    public static string WP80EmulationImagesBrandNameVersionRelease;
    public static string WP80EmulationImagesBrandNameVersionReleaseLanguage;
    public static string WPEmulator80Configurator;
    public static string WPAddinForWindowsPhone;
    public static string WPAddinForWindowsPhoneLanguagePack;
    public static string WPXDEHost;
    public static string MBCSMFCBrandName;
    public static string EditionVisualStudioLanguagePack;
    public static string VisualStudioLanguagePack;
    public static string EditionLanguagePack;
    public static string EditionUpdate;
    public static string EditionWin8Express;
    public static string Win8Express;
    public static string EditionWin8ExpressLangpack;
    public static string Win8ExpressLangpack;
    public static string EditionWinPhoneExpress;
    public static string EditionWinPhoneExpressLangpack;
    public static string WinPhoneExpressLangpack;
    public static string EditionTeamExplorerLangpack;
    public static string EditionTestProfessional;
    public static string EditionTestProfessionalLangpack;
    public static string EditionTestProfessionalLanguagePack;
    public static string TestProfessionalLanguagePack;
    public static string EditionTestController;
    public static string EditionTestControllerLangpack;
    public static string EditionTestControllerLanguagePack;
    public static string TestControllerLanguagePack;
    public static string EditionAgents;
    public static string EditionAgentsLangpack;
    public static string EditionAgentsLanguagePack;
    public static string AgentsLanguagePack;
    public static string EditionFeedbackClient;
    public static string EditionFeedbackClientLangpack;
    public static string EditionFeedbackClientLanguagePack;
    public static string FeedbackClientLanguagePack;
    public static string EditionShellsRedist;
    public static string EditionShellsRedistLangpack;
    public static string EditionSDK;
    public static string EditionSDKLangpack;
    public static string EditionClusterTools;
    public static string EditionClusterToolsLangpack;
    public static string EditionVnsExpress;
    public static string VnsExpress;
    public static string EditionVnsExpressLangpack;
    public static string VnsExpressLangpack;
    public static string EditionDesktopExpress;
    public static string DesktopExpress;
    public static string EditionDesktopExpressLangpack;
    public static string DesktopExpressLangpack;
    public static string EditionIntShell;
    public static string IntShell;
    public static string EditionIntShellLangpack;
    public static string IntShellLangpack;
    public static string EditionIsoShell;
    public static string IsoShell;
    public static string EditionIsoShellLangpack;
    public static string IsoShellLangpack;
    public static string PerformanceToolsBrandNameVersion;
    public static string PerformanceToolsBrandNameVersionLangPack;
    public static string ProfilingToolNameM;
    public static string VBPowerPacksName;
    public static string SilverlightVersion;
    public static string SilverlightDRTBrandName;
    public static string CppRestSDKNameNoLoc;
    public static string CppRestSDKFolderName;
    public static string CppAzureMobileSDKNameNoLoc;
    public static string CppAzureMobileSDKFolderName;
    public static string IRServerGeneralBrandName;
    public static string IRServerGeneralBrandVersion;
    public static string IRServerGeneralBrand;
    public static string IRClientGeneralBrandName;
    public static string IRClientGeneralBrandVersion;
    public static string IRClientGeneralBrand;
    public static string IRDeployerGeneralBrandName;
    public static string IRDeployerGeneralBrandVersion;
    public static string IRDeployerGeneralBrand;
    public static string IRUpdateVersion;
    public static string MDDToolsBrand;
    public static string VSInternalBrand;
    public static string VSGeneralVersionMajor;
    public static string VSGeneralVersionMinor;
    public static string IsoShellNameNoLoc;
    public static string IsoShellBrandNameVersionReleaseNoMNoLoc;
    public static string IsoShellBrandNameVersionReleaseMNoLoc;
    public static string ProBrandNameVersion;
    public static string LSBrandNameVersion;
    public static string VSWindowsSDKVersionMinMaj;
    public static string WinSDK_Reg_Version;
    public static string WinSDK_Version_Major_And_Minor;
    public static string WinSDK_IntellisenseRefAssys_ShortName;
    public static string WinSDK_VSHeadersLibs_ShortName;
    public static string WinSDK_VSTools_ShortName;
    public static string WinSDK_VSWin32Tools_ShortName;
    public static string WinSDK_VSExpressTools_ShortName;
    public static string WinSDK_Reg_ProductName;
    public static string WinSDK_Reg_ComponentName;
    public static string VSRegVer;
    public static string VSProgidVer;
    public static string VSRegHelpTopkenVersion;
    public static string VSRegHelpDataInstallVersion;
    public static string VSRegDexploreInstallLocation;
    public static string VSRegHelpContentVersion;
    public static string HelpVersion;
    public static string VSGeneralAssemblyVersion;
    public static string LSBrandNameVersionRelease;
    public static string BuildGeneralBrandName;
    public static string VSGeneralBrandShort;
    public static string VSGeneralBrandMicrosoftA;
    public static string VSGeneralBrandNameA;
    public static string VSGeneralBrandNameShortA;
    public static string VSGeneralBrandVersionA;
    public static string VSGeneralBrandEditionVersion;
    public static string VSGeneralCopyrightYearA;
    public static string VSGeneralBrandReleaseA;
    public static string VSGeneralBrandVersionReleaseA;
    public static string VSGeneralBrandEditionVersionReleaseA;
    public static string VSGeneralBrandNameMA;
    public static string VSGeneralBrandNoReleaseA;
    public static string VSGeneralBrandNoReleaseMA;
    public static string VSGeneralBrandA;
    public static string VSGeneralBrandMA;
    public static string VSGeneralBrandShortA;
    public static string SkuFlavorShellA;
    public static string SkuFlavorShellIsolatedA;
    public static string VSShellIsolatedEditionNameA;
    public static string VSShellIsolatedBrandNameMA;
    public static string VSShellIsolatedBrandNoReleaseA;
    public static string VSShellIsolatedBrandA;
    public static string SkuFlavorShellIntegratedA;
    public static string VSShellIntegratedEditionNameA;
    public static string VSShellIntegratedBrandNameMA;
    public static string VSShellIntegratedBrandNoReleaseA;
    public static string VSShellIntegratedBrandA;
    public static string VSShellIntegratedBrandShortA;
    public static string ShellsRedistA;
    public static string ShellsRedistBrandNameMA;
    public static string ShellsRedistBrandNoReleaseA;
    public static string ShellsRedistBrandA;
    public static string SkuFlavorExpressA;
    public static string VWDGeneralPurposeA;
    public static string VWDGeneralPurposeShortA;
    public static string VWDEditionNameA;
    public static string VWDGeneralBrandNameA;
    public static string VWDExpressBrandNoReleaseA;
    public static string VWDExpressBrandA;
    public static string VWDExpressBrandShortA;
    public static string VW8GeneralPurposeA;
    public static string VW8GeneralPurposeShortA;
    public static string VW8EditionNameA;
    public static string VW8GeneralBrandNameA;
    public static string VW8ExpressBrandNoReleaseA;
    public static string VW8ExpressBrandA;
    public static string VW8ExpressBrandShortA;
    public static string WDGeneralPurposeA;
    public static string WDGeneralPurposeShortA;
    public static string WDEditionNameA;
    public static string WDGeneralBrandNameA;
    public static string WDExpressBrandNoReleaseA;
    public static string WDExpressBrandA;
    public static string WDExpressBrandShortA;
    public static string VBGeneralBrandNameA;
    public static string VBGeneralBrandNameMA;
    public static string VBGeneralBrandNoReleaseA;
    public static string VBGeneralBrandNoReleaseMA;
    public static string VBGeneralBrandA;
    public static string VBGeneralBrandMA;
    public static string VCGeneralBrandNameA;
    public static string VCGeneralBrandNameMA;
    public static string VCGeneralBrandNoReleaseA;
    public static string VCGeneralBrandNoReleaseMA;
    public static string VCGeneralBrandA;
    public static string VCGeneralBrandMA;
    public static string VCSGeneralBrandNameA;
    public static string VCSGeneralBrandNameMA;
    public static string VCSGeneralBrandNoReleaseA;
    public static string VCSGeneralBrandNoReleaseMA;
    public static string VCSGeneralBrandA;
    public static string VCSGeneralBrandMA;
    public static string VLSGeneralBrandNameA;
    public static string VLSEditionNameA;
    public static string VLSGeneralBrandNoReleaseA;
    public static string VLSGeneralBrandA;
    public static string VLSGeneralBrandMA;
    public static string VLSGeneralBrandShortA;
    public static string VSReleaseDescription;
}
internal class MS.Internal.EqualityArray : object {
    private Object[] _values;
    internal EqualityArray(Object[] values);
    public virtual bool Equals(object other);
    public virtual int GetHashCode();
}
internal class MS.Internal.Identifier : ValueType {
    public int UniqueId;
    private static int DEFAULT_TABLE_SIZE;
    private static Hashtable _identifiers;
    private static List`1<string> _names;
    private static int _nextId;
    public static Identifier Undefined;
    public string Name { get; }
    public bool IsDefined { get; }
    private Identifier(int id);
    private static Identifier();
    public string get_Name();
    public bool get_IsDefined();
    public static Identifier For(string name);
    public virtual bool Equals(object other);
    public virtual int GetHashCode();
    public static bool op_Equality(Identifier one, Identifier two);
    public static bool op_Inequality(Identifier one, Identifier two);
    public virtual string ToString();
    public static string op_Implicit(Identifier identifier);
}
internal class MS.Internal.MemberEqualityComparer : object {
    internal static bool Equals(MemberInfo mx, MemberInfo my);
    private static bool TypesEqual(Type[] tx, Type[] ty);
    private sealed virtual override bool System.Collections.IEqualityComparer.Equals(object x, object y);
    private sealed virtual override int System.Collections.IEqualityComparer.GetHashCode(object obj);
    private sealed virtual override bool System.Collections.Generic.IEqualityComparer<System.Reflection.MemberInfo>.Equals(MemberInfo x, MemberInfo y);
    private sealed virtual override int System.Collections.Generic.IEqualityComparer<System.Reflection.MemberInfo>.GetHashCode(MemberInfo obj);
}
internal class MS.Internal.Metadata.MutableAttributeTable : object {
    private Dictionary`2<string, AttributeList> assemblyIdentifierAttributes;
    private Dictionary`2<string, TypeMetadata> typeIdentifierMetadata;
    private object syncLock;
    private static Object[] empty;
    internal IEnumerable`1<string> AttributedTypeIdentifiers { get; }
    private static MutableAttributeTable();
    internal IEnumerable`1<string> get_AttributedTypeIdentifiers();
    private static void AddAttributeMetadata(TypeMetadata newMetadata, TypeMetadata existingMetadata);
    private static void AddAttributes(AttributeList list, IEnumerable`1<object> attributes);
    internal void AddCallback(string typeIdentifier, AttributeCallback callback);
    internal void AddAssemblyCustomAttributes(string assemblyIdentifier, IEnumerable`1<object> attributes);
    internal void AddCustomAttributes(string typeIdentifier, IEnumerable`1<object> attributes);
    internal void AddCustomAttributes(string ownerTypeIdentifier, string memberName, IEnumerable`1<object> attributes);
    private static void AddMemberMetadata(TypeMetadata newMetadata, TypeMetadata existingMetadata);
    internal void AddTable(MutableAttributeTable table);
    private void AddTypeMetadata(string typeIdentifier, TypeMetadata md);
    private void AddAssemblyMetadata(string assemblyIdentifier, AttributeList attributes);
    internal bool ContainsAttributes(string typeIdentifier);
    private void ExpandAttributes(string typeIdentifier, AttributeList attributes);
    internal IEnumerable`1<string> GetAttributedMembers(string typeIdentifier);
    internal IEnumerable GetAssemblyCustomAttributes(string assemblyIdentifier);
    internal IEnumerable GetCustomAttributes(string typeIdentifier);
    internal IEnumerable GetCustomAttributes(string ownerTypeIdentifier, string memberName);
    private AttributeList GetMemberList(string ownerTypeIdentifier, string memberName);
    private AttributeList GetAssemblyList(string assemblyIdentifier);
    private AttributeList GetExpandedAttributes(string typeIdentifier, object callbackParam, GetTypeIdentifierAttributesCallback callback);
    private AttributeList GetTypeList(string typeIdentifier);
    private TypeMetadata GetTypeMetadata(string typeIdentifier);
    [CompilerGeneratedAttribute]
private AttributeList <GetCustomAttributes>b__21_0(string typeToGet, object callbackParam);
}
[GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "4.0.0.0")]
[DebuggerNonUserCodeAttribute]
[CompilerGeneratedAttribute]
internal class MS.Internal.Properties.Resources : object {
    private static ResourceManager resourceMan;
    private static CultureInfo resourceCulture;
    [EditorBrowsableAttribute("2")]
internal static ResourceManager ResourceManager { get; }
    [EditorBrowsableAttribute("2")]
internal static CultureInfo Culture { get; internal set; }
    internal static string Error_ArgIncorrectType { get; }
    internal static string Error_ArgIncorrectTypeValue { get; }
    internal static string Error_CannotConvertValueToString { get; }
    internal static string Error_CannotUpdateValueFromStringValue { get; }
    internal static string Error_DerivedContextItem { get; }
    internal static string Error_DesignerActionItemSharing { get; }
    internal static string Error_DuplicateItem { get; }
    internal static string Error_DuplicateService { get; }
    internal static string Error_EnumerationNotReady { get; }
    internal static string Error_IncompatiblePositionReference { get; }
    internal static string Error_IncorrectServiceType { get; }
    internal static string Error_IncorrectTypePassed { get; }
    internal static string Error_InvalidArrayIndex { get; }
    internal static string Error_InvalidFactoryType { get; }
    internal static string Error_InvalidRedirectParent { get; }
    internal static string Error_LocalAssemblyIdentifierChanged { get; }
    internal static string Error_NoCreationType { get; }
    internal static string Error_NoPropertyValue { get; }
    internal static string Error_NullImplementation { get; }
    internal static string Error_NullService { get; }
    internal static string Error_ObjectAlreadyActive { get; }
    internal static string Error_ObjectNotActive { get; }
    internal static string Error_ParentNotSupported { get; }
    internal static string Error_PropertyIsReadOnly { get; }
    internal static string Error_PropertyNotFound { get; }
    internal static string Error_PropertyValueEditor_InvalidDialogValueEditorCommandInvocation { get; }
    internal static string Error_PropertyValueEditor_InvalidDialogValueEditorEditorValue { get; }
    internal static string Error_RecursionResolvingService { get; }
    internal static string Error_RequiredService { get; }
    internal static string Error_TableValidationFailed { get; }
    internal static string Error_ToolAlreadyActive { get; }
    internal static string Error_UnknownMemberDescriptor { get; }
    internal static string Error_ValidationAmbiguousMember { get; }
    internal static string Error_ValidationNoMatchingMember { get; }
    internal static string Error_ValueGetFailed { get; }
    internal static string Error_ValueSetFailed { get; }
    internal static string ToolDescription_CreateInstance { get; }
    internal static ResourceManager get_ResourceManager();
    internal static CultureInfo get_Culture();
    internal static void set_Culture(CultureInfo value);
    internal static string get_Error_ArgIncorrectType();
    internal static string get_Error_ArgIncorrectTypeValue();
    internal static string get_Error_CannotConvertValueToString();
    internal static string get_Error_CannotUpdateValueFromStringValue();
    internal static string get_Error_DerivedContextItem();
    internal static string get_Error_DesignerActionItemSharing();
    internal static string get_Error_DuplicateItem();
    internal static string get_Error_DuplicateService();
    internal static string get_Error_EnumerationNotReady();
    internal static string get_Error_IncompatiblePositionReference();
    internal static string get_Error_IncorrectServiceType();
    internal static string get_Error_IncorrectTypePassed();
    internal static string get_Error_InvalidArrayIndex();
    internal static string get_Error_InvalidFactoryType();
    internal static string get_Error_InvalidRedirectParent();
    internal static string get_Error_LocalAssemblyIdentifierChanged();
    internal static string get_Error_NoCreationType();
    internal static string get_Error_NoPropertyValue();
    internal static string get_Error_NullImplementation();
    internal static string get_Error_NullService();
    internal static string get_Error_ObjectAlreadyActive();
    internal static string get_Error_ObjectNotActive();
    internal static string get_Error_ParentNotSupported();
    internal static string get_Error_PropertyIsReadOnly();
    internal static string get_Error_PropertyNotFound();
    internal static string get_Error_PropertyValueEditor_InvalidDialogValueEditorCommandInvocation();
    internal static string get_Error_PropertyValueEditor_InvalidDialogValueEditorEditorValue();
    internal static string get_Error_RecursionResolvingService();
    internal static string get_Error_RequiredService();
    internal static string get_Error_TableValidationFailed();
    internal static string get_Error_ToolAlreadyActive();
    internal static string get_Error_UnknownMemberDescriptor();
    internal static string get_Error_ValidationAmbiguousMember();
    internal static string get_Error_ValidationNoMatchingMember();
    internal static string get_Error_ValueGetFailed();
    internal static string get_Error_ValueSetFailed();
    internal static string get_ToolDescription_CreateInstance();
}
[CompilerGeneratedAttribute]
internal static class MS.Internal.VisualStudioVersionInfo : object {
    public static string MajorVersion;
    public static string MinorVersion;
    public static string ProductVersion;
    public static string VSAssemblyVersion;
}
