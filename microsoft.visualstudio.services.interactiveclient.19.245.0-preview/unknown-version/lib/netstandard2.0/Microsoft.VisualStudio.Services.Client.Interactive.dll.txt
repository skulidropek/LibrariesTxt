[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
public class Microsoft.VisualStudio.Services.Client.AccountManagement.Account : AccountKey {
    public static AccountMemberComparer AccountMemberComparer;
    [CompilerGeneratedAttribute]
private string <Authenticator>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<Guid> <SupportedAccountProviders>k__BackingField;
    [CompilerGeneratedAttribute]
private AccountDisplayInfo <DisplayInfo>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyDictionary`2<string, string> <Properties>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <NeedsReauthentication>k__BackingField;
    public string Authenticator { get; private set; }
    public IReadOnlyList`1<Guid> SupportedAccountProviders { get; private set; }
    public AccountDisplayInfo DisplayInfo { get; private set; }
    public IReadOnlyDictionary`2<string, string> Properties { get; private set; }
    public bool NeedsReauthentication { get; private set; }
    public Account(AccountInitializationData initializationData);
    private static Account();
    [CompilerGeneratedAttribute]
public string get_Authenticator();
    [CompilerGeneratedAttribute]
private void set_Authenticator(string value);
    [CompilerGeneratedAttribute]
public IReadOnlyList`1<Guid> get_SupportedAccountProviders();
    [CompilerGeneratedAttribute]
private void set_SupportedAccountProviders(IReadOnlyList`1<Guid> value);
    [CompilerGeneratedAttribute]
public AccountDisplayInfo get_DisplayInfo();
    [CompilerGeneratedAttribute]
private void set_DisplayInfo(AccountDisplayInfo value);
    [CompilerGeneratedAttribute]
public IReadOnlyDictionary`2<string, string> get_Properties();
    [CompilerGeneratedAttribute]
private void set_Properties(IReadOnlyDictionary`2<string, string> value);
    [CompilerGeneratedAttribute]
public bool get_NeedsReauthentication();
    [CompilerGeneratedAttribute]
private void set_NeedsReauthentication(bool value);
    internal AccountInitializationData InitializationDataFromAccount();
}
internal class Microsoft.VisualStudio.Services.Client.AccountManagement.AccountCache : object {
    private IPublicClientApplication m_application;
    private string m_lockfilePath;
    private string m_authorityBase;
    private bool m_validateAuthority;
    public AccountCache(IAccountCacheConfiguration cacheConfig, IAadProviderConfiguration aadConfig, string tenantId, string queryParameters);
    [AsyncStateMachineAttribute("Microsoft.VisualStudio.Services.Client.AccountManagement.AccountCache/<GetItemsAsync>d__1")]
public sealed virtual Task`1<IEnumerable`1<IAccountCacheItem>> GetItemsAsync();
    public sealed virtual IEnumerable`1<IAccountCacheItem> GetItems();
    [AsyncStateMachineAttribute("Microsoft.VisualStudio.Services.Client.AccountManagement.AccountCache/<AcquireTokenSilentAsync>d__3")]
public sealed virtual Task`1<IAccountCacheItem> AcquireTokenSilentAsync(String[] scopes, string userIdentifier, string tenantId);
    [AsyncStateMachineAttribute("Microsoft.VisualStudio.Services.Client.AccountManagement.AccountCache/<DeleteItemAsync>d__4")]
public sealed virtual Task DeleteItemAsync(IAccountCacheItem token);
    [AsyncStateMachineAttribute("Microsoft.VisualStudio.Services.Client.AccountManagement.AccountCache/<AcquireTokenInteractiveAsync>d__5")]
public sealed virtual Task`1<IAccountCacheItem> AcquireTokenInteractiveAsync(String[] scopes, Prompt prompt, string userIdentifier, string tenantId);
    [AsyncStateMachineAttribute("Microsoft.VisualStudio.Services.Client.AccountManagement.AccountCache/<GetAnyUserIdentifierAsync>d__6")]
public sealed virtual Task`1<string> GetAnyUserIdentifierAsync();
    [AsyncStateMachineAttribute("Microsoft.VisualStudio.Services.Client.AccountManagement.AccountCache/<GetVsoEndpointTokenAsync>d__7")]
public sealed virtual Task`1<IEnumerable`1<IAccountCacheItem>> GetVsoEndpointTokenAsync(IAccountCacheItem tokenCacheItem);
    public sealed virtual IEnumerable`1<IAccountCacheItem> GetVsoEndpointToken(IAccountCacheItem tokenCacheItem);
}
internal class Microsoft.VisualStudio.Services.Client.AccountManagement.AccountCacheConfiguration : object {
    private string path;
    internal static string DefaultBaseCachePath;
    [CompilerGeneratedAttribute]
private string <InstanceName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <FileName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <MacKeyChainService>k__BackingField;
    [CompilerGeneratedAttribute]
private string <MacKeyChainAccount>k__BackingField;
    [CompilerGeneratedAttribute]
private string <LinuxKeyRingSchema>k__BackingField;
    [CompilerGeneratedAttribute]
private string <LinuxKeyRingCollection>k__BackingField;
    [CompilerGeneratedAttribute]
private string <LinuxKeyRingLabel>k__BackingField;
    [CompilerGeneratedAttribute]
private KeyValuePair`2<string, string> <LinuxKeyRingAttr1>k__BackingField;
    [CompilerGeneratedAttribute]
private KeyValuePair`2<string, string> <LinuxKeyRingAttr2>k__BackingField;
    [CompilerGeneratedAttribute]
private string <LockfileName>k__BackingField;
    public string InstanceName { get; public set; }
    public string FileName { get; public set; }
    public string DirectoryPath { get; public set; }
    public string FilePath { get; }
    public string MacKeyChainService { get; public set; }
    public string MacKeyChainAccount { get; public set; }
    public string LinuxKeyRingSchema { get; public set; }
    public string LinuxKeyRingCollection { get; public set; }
    public string LinuxKeyRingLabel { get; public set; }
    public KeyValuePair`2<string, string> LinuxKeyRingAttr1 { get; public set; }
    public KeyValuePair`2<string, string> LinuxKeyRingAttr2 { get; public set; }
    public string LockfileName { get; public set; }
    public string LockfilePath { get; }
    [CompilerGeneratedAttribute]
public sealed virtual string get_InstanceName();
    [CompilerGeneratedAttribute]
public sealed virtual void set_InstanceName(string value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_FileName();
    [CompilerGeneratedAttribute]
public sealed virtual void set_FileName(string value);
    public sealed virtual string get_DirectoryPath();
    public sealed virtual void set_DirectoryPath(string value);
    public sealed virtual string get_FilePath();
    [CompilerGeneratedAttribute]
public sealed virtual string get_MacKeyChainService();
    [CompilerGeneratedAttribute]
public sealed virtual void set_MacKeyChainService(string value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_MacKeyChainAccount();
    [CompilerGeneratedAttribute]
public sealed virtual void set_MacKeyChainAccount(string value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_LinuxKeyRingSchema();
    [CompilerGeneratedAttribute]
public sealed virtual void set_LinuxKeyRingSchema(string value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_LinuxKeyRingCollection();
    [CompilerGeneratedAttribute]
public sealed virtual void set_LinuxKeyRingCollection(string value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_LinuxKeyRingLabel();
    [CompilerGeneratedAttribute]
public sealed virtual void set_LinuxKeyRingLabel(string value);
    [CompilerGeneratedAttribute]
public sealed virtual KeyValuePair`2<string, string> get_LinuxKeyRingAttr1();
    [CompilerGeneratedAttribute]
public sealed virtual void set_LinuxKeyRingAttr1(KeyValuePair`2<string, string> value);
    [CompilerGeneratedAttribute]
public sealed virtual KeyValuePair`2<string, string> get_LinuxKeyRingAttr2();
    [CompilerGeneratedAttribute]
public sealed virtual void set_LinuxKeyRingAttr2(KeyValuePair`2<string, string> value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_LockfileName();
    [CompilerGeneratedAttribute]
public sealed virtual void set_LockfileName(string value);
    public sealed virtual string get_LockfilePath();
}
internal class Microsoft.VisualStudio.Services.Client.AccountManagement.AccountCacheItem : object {
    private AuthenticationResult authenticationResult;
    public string UniqueId { get; }
    public string TenantId { get; }
    public string Username { get; }
    public string Environment { get; }
    public string IdToken { get; }
    public DateTimeOffset ExpiresOn { get; }
    public string AccessToken { get; }
    public AuthenticationResult InnerResult { get; }
    public string GivenName { get; }
    public string FamilyName { get; }
    public AccountCacheItem(AuthenticationResult authenticationResult);
    public sealed virtual string get_UniqueId();
    public sealed virtual string get_TenantId();
    public sealed virtual string get_Username();
    public sealed virtual string get_Environment();
    public sealed virtual string get_IdToken();
    public sealed virtual DateTimeOffset get_ExpiresOn();
    public sealed virtual string get_AccessToken();
    public sealed virtual AuthenticationResult get_InnerResult();
    public sealed virtual string get_GivenName();
    public sealed virtual string get_FamilyName();
}
public class Microsoft.VisualStudio.Services.Client.AccountManagement.AccountDisplayInfo : object {
    public static AccountDisplayInfoNoLogoComparer DisplayInfoNoLogoComparer;
    [CompilerGeneratedAttribute]
private string <AccountDisplayName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ProviderDisplayName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <UserName>k__BackingField;
    [CompilerGeneratedAttribute]
private Byte[] <AccountLogo>k__BackingField;
    [CompilerGeneratedAttribute]
private Byte[] <ProviderLogo>k__BackingField;
    public string AccountDisplayName { get; private set; }
    public string ProviderDisplayName { get; private set; }
    public string UserName { get; private set; }
    public Byte[] AccountLogo { get; private set; }
    public Byte[] ProviderLogo { get; private set; }
    public AccountDisplayInfo(string accountDisplayName, string providerDisplayName, string userName, Byte[] accountLogo, Byte[] providerLogo);
    private static AccountDisplayInfo();
    [CompilerGeneratedAttribute]
public string get_AccountDisplayName();
    [CompilerGeneratedAttribute]
private void set_AccountDisplayName(string value);
    [CompilerGeneratedAttribute]
public string get_ProviderDisplayName();
    [CompilerGeneratedAttribute]
private void set_ProviderDisplayName(string value);
    [CompilerGeneratedAttribute]
public string get_UserName();
    [CompilerGeneratedAttribute]
private void set_UserName(string value);
    [CompilerGeneratedAttribute]
public Byte[] get_AccountLogo();
    [CompilerGeneratedAttribute]
private void set_AccountLogo(Byte[] value);
    [CompilerGeneratedAttribute]
public Byte[] get_ProviderLogo();
    [CompilerGeneratedAttribute]
private void set_ProviderLogo(Byte[] value);
}
public class Microsoft.VisualStudio.Services.Client.AccountManagement.AccountDisplayInfoNoLogoComparer : object {
    public sealed virtual bool Equals(AccountDisplayInfo x, AccountDisplayInfo y);
    public sealed virtual int GetHashCode(AccountDisplayInfo obj);
}
public class Microsoft.VisualStudio.Services.Client.AccountManagement.AccountInitializationData : ValueType {
    [CompilerGeneratedAttribute]
private AccountDisplayInfo <DisplayInfo>k__BackingField;
    [CompilerGeneratedAttribute]
private string <UniqueId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Authenticator>k__BackingField;
    [CompilerGeneratedAttribute]
private Guid <ParentProviderId>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyDictionary`2<string, string> <Properties>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<Guid> <SupportedAccountProviders>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <NeedsReauthentication>k__BackingField;
    public AccountDisplayInfo DisplayInfo { get; public set; }
    public string UniqueId { get; public set; }
    public string Authenticator { get; public set; }
    public Guid ParentProviderId { get; public set; }
    public IReadOnlyDictionary`2<string, string> Properties { get; public set; }
    public IReadOnlyList`1<Guid> SupportedAccountProviders { get; public set; }
    public bool NeedsReauthentication { get; public set; }
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public AccountDisplayInfo get_DisplayInfo();
    [CompilerGeneratedAttribute]
public void set_DisplayInfo(AccountDisplayInfo value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public string get_UniqueId();
    [CompilerGeneratedAttribute]
public void set_UniqueId(string value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public string get_Authenticator();
    [CompilerGeneratedAttribute]
public void set_Authenticator(string value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public Guid get_ParentProviderId();
    [CompilerGeneratedAttribute]
public void set_ParentProviderId(Guid value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public IReadOnlyDictionary`2<string, string> get_Properties();
    [CompilerGeneratedAttribute]
public void set_Properties(IReadOnlyDictionary`2<string, string> value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public IReadOnlyList`1<Guid> get_SupportedAccountProviders();
    [CompilerGeneratedAttribute]
public void set_SupportedAccountProviders(IReadOnlyList`1<Guid> value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public bool get_NeedsReauthentication();
    [CompilerGeneratedAttribute]
public void set_NeedsReauthentication(bool value);
}
public class Microsoft.VisualStudio.Services.Client.AccountManagement.AccountKey : object {
    public static AccountKeyComparer KeyComparer;
    [CompilerGeneratedAttribute]
private string <UniqueId>k__BackingField;
    [CompilerGeneratedAttribute]
private Guid <ProviderId>k__BackingField;
    public string UniqueId { get; private set; }
    public Guid ProviderId { get; private set; }
    public AccountKey(string uniqueId, Guid providerId);
    private static AccountKey();
    [CompilerGeneratedAttribute]
public string get_UniqueId();
    [CompilerGeneratedAttribute]
private void set_UniqueId(string value);
    [CompilerGeneratedAttribute]
public Guid get_ProviderId();
    [CompilerGeneratedAttribute]
private void set_ProviderId(Guid value);
}
public class Microsoft.VisualStudio.Services.Client.AccountManagement.AccountKeyComparer : object {
    public sealed virtual bool Equals(AccountKey x, AccountKey y);
    public sealed virtual int GetHashCode(AccountKey obj);
}
[ExtensionAttribute]
internal static class Microsoft.VisualStudio.Services.Client.AccountManagement.AccountManagementUtilities : object {
    internal static int DefaultCacheVersion;
    internal static string DefaultRegistryRoot;
    internal static string EndpointRegistryOverrideName;
    internal static string VSOEndpointRegistryOverrideName;
    internal static string ExtraParametersRegistryOverrideName;
    public static Task`1<bool> TrueTask;
    public static Task`1<bool> FalseTask;
    private static AccountManagementUtilities();
    [ExtensionAttribute]
internal static bool RemoveMidQueue(Queue`1<T> queue, T valueToRemove);
    internal static Uri CreateAzureRMUri(Uri baseUri, string apiVersion, Uri relativeUri);
    internal static void ExecuteActionInGlobalMutex(string globalMutexName, Action action);
    internal static string SerializeDictionaryAccountProperty(IDictionary`2<string, string> map);
    internal static Uri CheckUri(string uriName);
    internal static bool IsFwlink(Uri url);
    internal static TResult ExecuteInGlobalMutex(string globalMutexName, Func`1<TResult> func);
    internal static Uri ResolveFWLinkIfRequired(Uri vsoEndPoint);
    [ExtensionAttribute]
internal static bool EqualsOrdinalIgnoreCase(string string1, string string2);
    [ExtensionAttribute]
internal static IEnumerable`1<T> ExceptNull(IEnumerable`1<T> source);
    [ExtensionAttribute]
public static bool AreSetsEqual(IEnumerable`1<T> first, IEnumerable`1<T> second, IEqualityComparer`1<T> equalityComparer);
    [ExtensionAttribute]
internal static Account GetAccountFromKey(IAccountStore store, AccountKey key);
}
public class Microsoft.VisualStudio.Services.Client.AccountManagement.AccountMemberComparer : object {
    public sealed virtual bool Equals(Account accountA, Account accountB);
    public sealed virtual int GetHashCode(Account obj);
}
[ExtensionAttribute]
public static class Microsoft.VisualStudio.Services.Client.AccountManagement.AccountProviderExtensions : object {
    [AsyncStateMachineAttribute("Microsoft.VisualStudio.Services.Client.AccountManagement.AccountProviderExtensions/<RefreshAuthenticationStateAsync>d__0")]
[ExtensionAttribute]
public static Task RefreshAuthenticationStateAsync(IAccountProvider provider, CancellationToken cancellationToken);
}
public class Microsoft.VisualStudio.Services.Client.AccountManagement.AccountsProcessedEventArgs : object {
    [CompilerGeneratedAttribute]
private bool <Skipped>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<Exception> <Exceptions>k__BackingField;
    public bool Skipped { get; public set; }
    public IList`1<Exception> Exceptions { get; public set; }
    public AccountsProcessedEventArgs(IList`1<Exception> exceptions);
    public AccountsProcessedEventArgs(bool skipped, IList`1<Exception> exceptions);
    [CompilerGeneratedAttribute]
public bool get_Skipped();
    [CompilerGeneratedAttribute]
public void set_Skipped(bool value);
    [CompilerGeneratedAttribute]
public IList`1<Exception> get_Exceptions();
    [CompilerGeneratedAttribute]
public void set_Exceptions(IList`1<Exception> value);
}
[ExceptionMappingAttribute("0.0", "3.0", "AccountStorageException", "Microsoft.VisualStudio.Services.Client.AccountManagement.AccountStorageException, Microsoft.VisualStudio.Services.Client, Version=14.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
public class Microsoft.VisualStudio.Services.Client.AccountManagement.AccountStorageException : Exception {
    public AccountStorageException(string message);
    public AccountStorageException(string message, Exception innerException);
    protected AccountStorageException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.VisualStudio.Services.Client.AccountManagement.AccountStoreChangedEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<Account> <Added>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<Account> <Removed>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<Tuple`2<Account, Account>> <Modified>k__BackingField;
    public IReadOnlyList`1<Account> Added { get; private set; }
    public IReadOnlyList`1<Account> Removed { get; private set; }
    public IReadOnlyList`1<Tuple`2<Account, Account>> Modified { get; private set; }
    public AccountStoreChangedEventArgs(IReadOnlyList`1<Account> added, IReadOnlyList`1<Account> removed, IReadOnlyList`1<Tuple`2<Account, Account>> modified);
    [CompilerGeneratedAttribute]
public IReadOnlyList`1<Account> get_Added();
    [CompilerGeneratedAttribute]
private void set_Added(IReadOnlyList`1<Account> value);
    [CompilerGeneratedAttribute]
public IReadOnlyList`1<Account> get_Removed();
    [CompilerGeneratedAttribute]
private void set_Removed(IReadOnlyList`1<Account> value);
    [CompilerGeneratedAttribute]
public IReadOnlyList`1<Tuple`2<Account, Account>> get_Modified();
    [CompilerGeneratedAttribute]
private void set_Modified(IReadOnlyList`1<Tuple`2<Account, Account>> value);
    private static IReadOnlyList`1<Account> GetReadOnlyCollection(Account account);
    internal static AccountStoreChangedEventArgs CreateForAddingAccount(Account account);
    internal static AccountStoreChangedEventArgs CreateForRemovingAccount(Account account);
    internal static AccountStoreChangedEventArgs CreateForModifyingAccount(Account afterAccount);
}
public interface Microsoft.VisualStudio.Services.Client.AccountManagement.IAccountCache {
    public abstract virtual IEnumerable`1<IAccountCacheItem> GetItems();
    public abstract virtual Task`1<IEnumerable`1<IAccountCacheItem>> GetItemsAsync();
    public abstract virtual Task`1<IAccountCacheItem> AcquireTokenSilentAsync(String[] scopes, string userIdentifier, string tenantId);
    public abstract virtual Task DeleteItemAsync(IAccountCacheItem token);
    public abstract virtual Task`1<IAccountCacheItem> AcquireTokenInteractiveAsync(String[] scopes, Prompt prompt, string userIdentifier, string tenantId);
    public abstract virtual Task`1<string> GetAnyUserIdentifierAsync();
    public abstract virtual IEnumerable`1<IAccountCacheItem> GetVsoEndpointToken(IAccountCacheItem tokenCacheItem);
    public abstract virtual Task`1<IEnumerable`1<IAccountCacheItem>> GetVsoEndpointTokenAsync(IAccountCacheItem tokenCacheItem);
}
public interface Microsoft.VisualStudio.Services.Client.AccountManagement.IAccountCacheConfiguration {
    public string InstanceName { get; public set; }
    public string FileName { get; public set; }
    public string DirectoryPath { get; public set; }
    public string FilePath { get; }
    public string MacKeyChainService { get; public set; }
    public string MacKeyChainAccount { get; public set; }
    public string LinuxKeyRingSchema { get; public set; }
    public string LinuxKeyRingCollection { get; public set; }
    public string LinuxKeyRingLabel { get; public set; }
    public KeyValuePair`2<string, string> LinuxKeyRingAttr1 { get; public set; }
    public KeyValuePair`2<string, string> LinuxKeyRingAttr2 { get; public set; }
    public string LockfilePath { get; }
    public string LockfileName { get; public set; }
    public abstract virtual string get_InstanceName();
    public abstract virtual void set_InstanceName(string value);
    public abstract virtual string get_FileName();
    public abstract virtual void set_FileName(string value);
    public abstract virtual string get_DirectoryPath();
    public abstract virtual void set_DirectoryPath(string value);
    public abstract virtual string get_FilePath();
    public abstract virtual string get_MacKeyChainService();
    public abstract virtual void set_MacKeyChainService(string value);
    public abstract virtual string get_MacKeyChainAccount();
    public abstract virtual void set_MacKeyChainAccount(string value);
    public abstract virtual string get_LinuxKeyRingSchema();
    public abstract virtual void set_LinuxKeyRingSchema(string value);
    public abstract virtual string get_LinuxKeyRingCollection();
    public abstract virtual void set_LinuxKeyRingCollection(string value);
    public abstract virtual string get_LinuxKeyRingLabel();
    public abstract virtual void set_LinuxKeyRingLabel(string value);
    public abstract virtual KeyValuePair`2<string, string> get_LinuxKeyRingAttr1();
    public abstract virtual void set_LinuxKeyRingAttr1(KeyValuePair`2<string, string> value);
    public abstract virtual KeyValuePair`2<string, string> get_LinuxKeyRingAttr2();
    public abstract virtual void set_LinuxKeyRingAttr2(KeyValuePair`2<string, string> value);
    public abstract virtual string get_LockfilePath();
    public abstract virtual string get_LockfileName();
    public abstract virtual void set_LockfileName(string value);
}
public interface Microsoft.VisualStudio.Services.Client.AccountManagement.IAccountCacheItem {
    public string UniqueId { get; }
    public string TenantId { get; }
    public string Username { get; }
    public string Environment { get; }
    public string IdToken { get; }
    public DateTimeOffset ExpiresOn { get; }
    public string AccessToken { get; }
    public AuthenticationResult InnerResult { get; }
    public string GivenName { get; }
    public string FamilyName { get; }
    public abstract virtual string get_UniqueId();
    public abstract virtual string get_TenantId();
    public abstract virtual string get_Username();
    public abstract virtual string get_Environment();
    public abstract virtual string get_IdToken();
    public abstract virtual DateTimeOffset get_ExpiresOn();
    public abstract virtual string get_AccessToken();
    public abstract virtual AuthenticationResult get_InnerResult();
    public abstract virtual string get_GivenName();
    public abstract virtual string get_FamilyName();
}
public interface Microsoft.VisualStudio.Services.Client.AccountManagement.IAccountManager {
    public IAccountStore Store { get; }
    public abstract virtual IAccountStore get_Store();
    public abstract virtual T GetCache();
    public abstract virtual IAccountProvider GetAccountProvider(Guid accountProviderId);
}
public interface Microsoft.VisualStudio.Services.Client.AccountManagement.IAccountProvider {
    public Guid AccountProviderId { get; }
    public IAccountStore AccountStore { get; }
    public abstract virtual Guid get_AccountProviderId();
    public abstract virtual IAccountStore get_AccountStore();
    public abstract virtual void ClearTokensForAccount(Account account);
    public abstract virtual void Initialize(IAccountStore store);
    public abstract virtual Task`1<Account> RefreshAuthenticationStateAsync(AccountKey accountKey, CancellationToken cancellationToken);
    public abstract virtual Task`1<Account> AuthenticateAccountWithUIAsync(AccountKey accountKey, IntPtr parentWindowHandle, CancellationToken cancellationToken);
    public abstract virtual Task`1<Account> CreateAccountWithUIAsync(IntPtr parentWindowHandle, CancellationToken cancellationToken);
    public abstract virtual Task`1<Account> RefreshDisplayInfoAsync(AccountKey accountKey, CancellationToken cancellationToken);
}
public interface Microsoft.VisualStudio.Services.Client.AccountManagement.IAccountStore {
    [CompilerGeneratedAttribute]
public abstract virtual void add_KeychainAccountStoreChanged(EventHandler`1<AccountStoreChangedEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_KeychainAccountStoreChanged(EventHandler`1<AccountStoreChangedEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_KeychainAccountStoreChanging(EventHandler`1<AccountStoreChangedEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_KeychainAccountStoreChanging(EventHandler`1<AccountStoreChangedEventArgs> value);
    public abstract virtual Account AddOrUpdateAccount(Account account);
    public abstract virtual Account SetDisplayInfo(AccountKey account, AccountDisplayInfo info);
    public abstract virtual Account SetProperty(AccountKey account, string key, string value);
    public abstract virtual Account SetNeedsReauthentication(AccountKey account, bool value);
    public abstract virtual Account SetProperties(AccountKey account, IDictionary`2<string, string> properties);
    public abstract virtual void RemoveAccount(AccountKey key);
    public abstract virtual IReadOnlyCollection`1<Account> GetAllAccounts();
}
public interface Microsoft.VisualStudio.Services.Client.AccountManagement.IVSAccountProviderShim {
    public string ExtraQueryParameters { get; public set; }
    public Action`2<bool, List`1<Exception>> RaiseAccountProcessingDoneEvent { get; public set; }
    public abstract virtual string get_ExtraQueryParameters();
    public abstract virtual void set_ExtraQueryParameters(string value);
    public abstract virtual IAadProviderConfiguration GetConfiguration();
    public abstract virtual Guid GetMsaHomeTenantId();
    public abstract virtual Task`1<string> ProcessAuthenticationResultAsync(AuthenticationResult authenticationResult);
    public abstract virtual void ClearTokensForAccount(Account account);
    public abstract virtual Task`1<AuthenticationResult> AcquireTokenAsync(String[] scopes, string tenantId, string userIdentifier, IntPtr parentWindowHandle, AccountKey accountKeyForReAuthentication, bool prompt, CancellationToken cancellationToken);
    public abstract virtual Task`1<AuthenticationResult> AcquireTokenAsyncWithContextAsync(String[] scopes, IAccountCache accountCache, string userIdentifier, AccountKey accountForReauthentication, bool prompt, string extraQueryParameters, CancellationToken cancellationToken);
    public abstract virtual Task`1<string> GetSessionTokenFromAccountAsync(Account account, string scope, bool forceRefresh, CancellationToken cancellationToken);
    public abstract virtual string GetExtraQueryParameters(string authority);
    public abstract virtual Task`1<Account> RefreshAuthenticationStateAsync(AccountKey account, CancellationToken cancellationToken);
    public abstract virtual Task`1<Account> CreateAccountWithUIAsync(IntPtr parentWindowHandle, CancellationToken cancellationToken);
    public abstract virtual Task`1<Account> AuthenticateAccountWithUIAsync(AccountKey accountKey, IntPtr parentWindowHandle, CancellationToken cancellationToken);
    public abstract virtual Task`1<Account> AuthenticateAndApplyScopeWithUIAsync(AccountKey accountKey, IntPtr parentWindowHandle, IEnumerable`1<ScopeInfo> scopes, CancellationToken cancellationToken);
    public abstract virtual Account ClearScopes(AccountKey accountKey);
    public abstract virtual IEnumerable`1<ScopeInfo> GetScopesForAccount(AccountKey accountKey);
    public abstract virtual TenantInformation GetHomeTenantInfo(AccountKey accountKey);
    public abstract virtual IEnumerable`1<TenantInformation> GetTenantsInScope(AccountKey accountKey);
    public abstract virtual Task`1<Account> RefreshDisplayInfoAsync(AccountKey accountKey, CancellationToken cancellationToken);
    public abstract virtual Action`2<bool, List`1<Exception>> get_RaiseAccountProcessingDoneEvent();
    public abstract virtual void set_RaiseAccountProcessingDoneEvent(Action`2<bool, List`1<Exception>> value);
}
internal class Microsoft.VisualStudio.Services.Client.AccountManagement.Logging.AggregateLogger : object {
    private ReaderWriterLockSlim loggersLock;
    private IList`1<ILogger> loggers;
    protected virtual override void Finalize();
    public sealed virtual void LogEvent(string name, IDictionary`2<string, object> properties);
    public void Add(ILogger logger);
    public void Remove(ILogger logger);
    internal void ClearLoggers();
    private void ModifyLoggers(ILogger logger, Action action);
    private void ModifyLoggers(Action action);
    [CompilerGeneratedAttribute]
private void <ClearLoggers>b__6_0();
}
public interface Microsoft.VisualStudio.Services.Client.AccountManagement.Logging.ILogger {
    public abstract virtual void LogEvent(string name, IDictionary`2<string, object> properties);
}
internal class Microsoft.VisualStudio.Services.Client.AccountManagement.PartialCacheItem : object {
    private IAccount account;
    public string UniqueId { get; }
    public string TenantId { get; }
    public string Username { get; }
    public string Environment { get; }
    public string IdToken { get; }
    public DateTimeOffset ExpiresOn { get; }
    public string AccessToken { get; }
    public AuthenticationResult InnerResult { get; }
    public string GivenName { get; }
    public string FamilyName { get; }
    public PartialCacheItem(IAccount account);
    public sealed virtual string get_UniqueId();
    public sealed virtual string get_TenantId();
    public sealed virtual string get_Username();
    public sealed virtual string get_Environment();
    public sealed virtual string get_IdToken();
    public sealed virtual DateTimeOffset get_ExpiresOn();
    public sealed virtual string get_AccessToken();
    public sealed virtual AuthenticationResult get_InnerResult();
    public sealed virtual string get_GivenName();
    public sealed virtual string get_FamilyName();
}
[ExtensionAttribute]
public static class Microsoft.VisualStudio.Services.Client.AccountManagement.PublicClientApplicationExtensions : object {
    [ExtensionAttribute]
public static AbstractAcquireTokenParameterBuilder`1<T> WithOptionalCorrelationId(AbstractAcquireTokenParameterBuilder`1<T> builder, Nullable`1<Guid> correlationId);
}
public class Microsoft.VisualStudio.Services.Client.AccountManagement.ScopeInfo : object {
    [CompilerGeneratedAttribute]
private string <Domain>k__BackingField;
    [CompilerGeneratedAttribute]
private Guid <TenantId>k__BackingField;
    public string Domain { get; private set; }
    public Guid TenantId { get; private set; }
    public ScopeInfo(Guid tenantId);
    public ScopeInfo(string domain);
    [JsonConstructorAttribute]
[DebuggerStepThroughAttribute]
public ScopeInfo(Guid tenantId, string domain);
    [CompilerGeneratedAttribute]
public string get_Domain();
    [CompilerGeneratedAttribute]
private void set_Domain(string value);
    [CompilerGeneratedAttribute]
public Guid get_TenantId();
    [CompilerGeneratedAttribute]
private void set_TenantId(Guid value);
    public void UpdateTenantIdForDomain(Guid tenantId);
}
public class Microsoft.VisualStudio.Services.Client.AccountManagement.TenantInformation : object {
    [CompilerGeneratedAttribute]
private String[] <UniqueIds>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TenantId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <FriendlyName>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsOwned>k__BackingField;
    public String[] UniqueIds { get; private set; }
    public string TenantId { get; private set; }
    public string FriendlyName { get; private set; }
    public bool IsOwned { get; private set; }
    [JsonConstructorAttribute]
public TenantInformation(HashSet`1<string> uniqueIds, string tenantId, string friendlyName, bool isOwned);
    [CompilerGeneratedAttribute]
public String[] get_UniqueIds();
    [CompilerGeneratedAttribute]
private void set_UniqueIds(String[] value);
    [CompilerGeneratedAttribute]
public string get_TenantId();
    [CompilerGeneratedAttribute]
private void set_TenantId(string value);
    [CompilerGeneratedAttribute]
public string get_FriendlyName();
    [CompilerGeneratedAttribute]
private void set_FriendlyName(string value);
    [CompilerGeneratedAttribute]
public bool get_IsOwned();
    [CompilerGeneratedAttribute]
private void set_IsOwned(bool value);
}
public static class Microsoft.VisualStudio.Services.Client.AccountManagement.VSAccountProviderConstants : object {
    public static Guid AccountProviderIdentifier;
    public static string PersonalizationAccountPropertyName;
    public static string IsMSAPropertyName;
    public static string AdalSigninExtraQueryParameters;
    private static VSAccountProviderConstants();
}
internal static class Microsoft.VisualStudio.Services.Client.ClientResources : object {
    private static ResourceManager s_resMgr;
    public static ResourceManager Manager { get; }
    private static ClientResources();
    public static ResourceManager get_Manager();
    private static string Get(string resourceName);
    private static string Get(string resourceName, CultureInfo culture);
    public static int GetInt(string resourceName);
    public static int GetInt(string resourceName, CultureInfo culture);
    public static bool GetBool(string resourceName);
    public static bool GetBool(string resourceName, CultureInfo culture);
    private static string Format(string resourceName, Object[] args);
    private static string Format(string resourceName, CultureInfo culture, Object[] args);
    public static string UnexpectedNavigation();
    public static string UnexpectedNavigation(CultureInfo culture);
    public static string UnexpectedNavigationToUrl();
    public static string UnexpectedNavigationToUrl(CultureInfo culture);
    public static string STAThreadRequired();
    public static string STAThreadRequired(CultureInfo culture);
    public static string BrowserNavigationFailed();
    public static string BrowserNavigationFailed(CultureInfo culture);
    public static string BrowserNavigationToUrlFailed();
    public static string BrowserNavigationToUrlFailed(CultureInfo culture);
    public static string None();
    public static string None(CultureInfo culture);
    public static string BrowserScriptDisabled();
    public static string BrowserScriptDisabled(CultureInfo culture);
    public static string ErrorDeserializeFailed();
    public static string ErrorDeserializeFailed(CultureInfo culture);
    public static string SignInCancelled();
    public static string SignInCancelled(CultureInfo culture);
    public static string TokenDeserializeFailed();
    public static string TokenDeserializeFailed(CultureInfo culture);
    public static string ExplicitTrustRequired();
    public static string ExplicitTrustRequired(CultureInfo culture);
    public static string NavigationBadGateway();
    public static string NavigationBadGateway(CultureInfo culture);
    public static string NavigationBadRequest();
    public static string NavigationBadRequest(CultureInfo culture);
    public static string NavigationForbidden();
    public static string NavigationForbidden(CultureInfo culture);
    public static string NavigationGatewayTimeout();
    public static string NavigationGatewayTimeout(CultureInfo culture);
    public static string NavigationInternalServerError();
    public static string NavigationInternalServerError(CultureInfo culture);
    public static string NavigationNotFound();
    public static string NavigationNotFound(CultureInfo culture);
    public static string NavigationServiceUnavailable();
    public static string NavigationServiceUnavailable(CultureInfo culture);
    public static string NavigationUnauthorized();
    public static string NavigationUnauthorized(CultureInfo culture);
    public static string ServerBadRequest();
    public static string ServerBadRequest(CultureInfo culture);
    public static string ServerForbidden();
    public static string ServerForbidden(CultureInfo culture);
    public static string ServerInternalServerError();
    public static string ServerInternalServerError(CultureInfo culture);
    public static string ServerNotFound();
    public static string ServerNotFound(CultureInfo culture);
    public static string ServerServiceUnavailable();
    public static string ServerServiceUnavailable(CultureInfo culture);
    public static string ServerUnauthorized();
    public static string ServerUnauthorized(CultureInfo culture);
    public static string ServerUnknownError();
    public static string ServerUnknownError(CultureInfo culture);
    public static string UnknownClientError();
    public static string UnknownClientError(CultureInfo culture);
    public static string UnknownError();
    public static string UnknownError(CultureInfo culture);
    public static string AccountManagerProblemExecutingInGlobalMutex(object arg0);
    public static string AccountManagerProblemExecutingInGlobalMutex(object arg0, CultureInfo culture);
    public static string RegistryAccountStoreCannotCreateSubKey(object arg0, object arg1);
    public static string RegistryAccountStoreCannotCreateSubKey(object arg0, object arg1, CultureInfo culture);
    public static string RegistryAccountStoreMemberNotValid(object arg0, object arg1);
    public static string RegistryAccountStoreMemberNotValid(object arg0, object arg1, CultureInfo culture);
    public static string BlueBadgeAccountImage192192();
    public static string BlueBadgeAccountImage192192(CultureInfo culture);
    public static string VsAccountProviderName();
    public static string VsAccountProviderName(CultureInfo culture);
    public static string MicrosoftLogo_128xLG();
    public static string MicrosoftLogo_128xLG(CultureInfo culture);
    public static string VsAccountProviderWorkOrSchool();
    public static string VsAccountProviderWorkOrSchool(CultureInfo culture);
    public static string VsAccountProviderUserNameCannotBeEmpty();
    public static string VsAccountProviderUserNameCannotBeEmpty(CultureInfo culture);
    public static string VsAccountProviderUnsupportedAccount();
    public static string VsAccountProviderUnsupportedAccount(CultureInfo culture);
    public static string VsAccountProviderSetCacheInvalidOperation();
    public static string VsAccountProviderSetCacheInvalidOperation(CultureInfo culture);
    public static string VsAccountProviderAccountNotFoundFromKey();
    public static string VsAccountProviderAccountNotFoundFromKey(CultureInfo culture);
    public static string UICredProvider_MessageText();
    public static string UICredProvider_MessageText(CultureInfo culture);
    public static string UICredProvider_TitleText(object arg0);
    public static string UICredProvider_TitleText(object arg0, CultureInfo culture);
}
internal static class Microsoft.VisualStudio.Services.Client.CookieUtility : object {
    public static string AcsMetadataRetrievalExceptionText;
    public static string FedAuthCookieName;
    public static string WindowsLiveSignOutUrl;
    public static Uri WindowsLiveCookieDomain;
    public static UInt32 INTERNET_COOKIE_HTTPONLY;
    private static CookieUtility();
    public static CookieCollection GetFederatedCookies(Uri cookieDomainAndPath);
    public static CookieCollection GetFederatedCookies(String[] token);
    public static CookieCollection GetFederatedCookies(IHttpResponse webResponse);
    public static CookieCollection GetAllCookies(Uri cookieDomainAndPath);
    public static void DeleteFederatedCookies(Uri cookieDomainAndPath);
    public static void DeleteWindowsLiveCookies();
    public static void DeleteAllCookies(Uri cookieDomainAndPath);
    private static bool InternetGetCookieEx(string url, string cookieName, StringBuilder cookieData, Int32& size, UInt32 flags, IntPtr reserved);
    private static bool InternetSetCookieEx(string url, string cookieName, string cookieData, UInt32 flags, IntPtr reserved);
    public static bool DeleteCookieEx(Uri cookiePath, string cookieName);
    public static bool SetCookiesEx(Uri cookiePath, CookieCollection cookies);
    public static List`1<Cookie> GetCookieEx(Uri cookiePath, string cookieName);
}
[EditorBrowsableAttribute("1")]
public static class Microsoft.VisualStudio.Services.Client.CredentialStorageConstants : object {
    public static string DefaultNamespace;
    public static string DefaultTokenKind;
    public static string DefaultTokenUser;
    public static string UserIdProperty;
    public static string UserNameProperty;
    public static string AuthorityProperty;
    public static string ClientProperty;
    public static string RefreshTokenProperty;
    public static string TenantProperty;
}
[EditorBrowsableAttribute("1")]
public static class Microsoft.VisualStudio.Services.Client.CredentialStorageUtility : object {
    public static VssClientCredentials GetCredentials(VssToken token);
    public static IssuedToken GetTokenFromString(VssCredentialsType credentialsType, string tokenValue);
    public static string GetTokenAsString(IssuedToken token);
    public static Dictionary`2<string, string> GetDictionaryFromString(string tokenValue);
    public static string GetStringFromDictionary(Dictionary`2<string, string> keyValueCollection);
    public static bool IsUserDataMatched(VssToken token, Guid userId);
    private static VssCredentialsType ToCredentialsType(string type);
}
[CompilerGeneratedAttribute]
internal static class Microsoft.VisualStudio.Services.Client.GeneratedVersionInfo : object {
    public static string MajorVersion;
    public static string MinorVersion;
    public static string BuildVersion;
    public static string PatchVersion;
    public static string ProductVersion;
    public static string AssemblyMajorVersion;
    public static string AssemblyMinorVersion;
    public static string AssemblyBuildVersion;
    public static string AssemblyPatchVersion;
    public static string AssemblyVersion;
    public static string FileMajorVersion;
    public static string FileMinorVersion;
    public static string FileBuildVersion;
    public static string FilePatchVersion;
    public static string FileVersion;
    public static string VisualStudioMajorVersion;
    public static string VisualStudioVersion;
    public static string TfsMajorVersion;
    public static string TfsMinorVersion;
    public static string TfsProductVersion;
    public static int TfsUpdateNumber;
    public static string TfsInstallDirectory;
}
internal class Microsoft.VisualStudio.Services.Client.HttpClientFactoryWithUserAgent : object {
    private static string UserAgentPrefix;
    private static Lazy`1<HttpClient> httpClient;
    private static HttpClientFactoryWithUserAgent();
    private static HttpClient CreateClientWithCustomUserAgent();
    public sealed virtual HttpClient GetHttpClient();
}
public static class Microsoft.VisualStudio.Services.Client.Internal.AdminConstants : object {
    public static string ServerProcessID;
    public static string ApplicationName;
}
internal static class Microsoft.VisualStudio.Services.Client.Keychain.Logging.AccountManagementLoggingAuthType : object {
    internal static string Unknown;
    internal static string Create;
    internal static string Reauth;
}
public static class Microsoft.VisualStudio.Services.Client.Keychain.Logging.AccountManagementLoggingEventNames : object {
    public static string AcquireTokenLogEventName;
    public static string VssFederatedSignInWindowOnTokenDataReceived;
    public static string SessionTokenRequiresRefreshLoggingEventName;
    public static string RetreiveAndStoreSessionTokensFromVSO;
    public static string Prompt;
}
internal static class Microsoft.VisualStudio.Services.Client.Keychain.Logging.AccountManagementLoggingEventProperties : object {
    internal static string AuthType;
    internal static string Source;
}
internal static class Microsoft.VisualStudio.Services.Client.Keychain.Logging.AccountManagementLoggingSource : object {
    internal static string ASAP;
    internal static string Wrapper;
    internal static string TFS;
    internal static string NonTFS;
}
public static class Microsoft.VisualStudio.Services.Client.Keychain.Logging.DiagnosticsLogging : object {
    public static string EventTypeProperty;
    public static string DiagnosticsLoggingEventType;
    public static string MessagePropertyName;
    public static string ExceptionPropertyName;
    public static string SeverityPropertyName;
    public static void LogInformationEvent(ILogger logger, string eventName, string message, IDictionary`2<string, object> additionalMetadata, Exception exception);
    public static void LogErrorEvent(ILogger logger, string eventName, string message, IDictionary`2<string, object> additionalMetadata, Exception exception);
    private static void LogEvent(ILogger logger, DiagnosticsLoggingMessageSeverity severity, string eventName, string message, IDictionary`2<string, object> additionalMetadata, Exception e);
}
public enum Microsoft.VisualStudio.Services.Client.Keychain.Logging.DiagnosticsLoggingMessageSeverity : Enum {
    public int value__;
    public static DiagnosticsLoggingMessageSeverity Information;
    public static DiagnosticsLoggingMessageSeverity Error;
}
public class Microsoft.VisualStudio.Services.Client.Keychain.SessionToken : object {
    [CompilerGeneratedAttribute]
private DateTime <DateToRefresh>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTime <ValidFrom>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTime <ValidTo>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTime <RefreshedOn>k__BackingField;
    [CompilerGeneratedAttribute]
private string <UserId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Scope>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <HasCompact>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<Guid> <TargetAccounts>k__BackingField;
    public DateTime DateToRefresh { get; public set; }
    public DateTime ValidFrom { get; public set; }
    public DateTime ValidTo { get; public set; }
    public DateTime RefreshedOn { get; public set; }
    public string UserId { get; public set; }
    public string Scope { get; public set; }
    public bool HasCompact { get; public set; }
    public IEnumerable`1<Guid> TargetAccounts { get; public set; }
    [CompilerGeneratedAttribute]
public DateTime get_DateToRefresh();
    [CompilerGeneratedAttribute]
public void set_DateToRefresh(DateTime value);
    [CompilerGeneratedAttribute]
public DateTime get_ValidFrom();
    [CompilerGeneratedAttribute]
public void set_ValidFrom(DateTime value);
    [CompilerGeneratedAttribute]
public DateTime get_ValidTo();
    [CompilerGeneratedAttribute]
public void set_ValidTo(DateTime value);
    [CompilerGeneratedAttribute]
public DateTime get_RefreshedOn();
    [CompilerGeneratedAttribute]
public void set_RefreshedOn(DateTime value);
    [CompilerGeneratedAttribute]
public string get_UserId();
    [CompilerGeneratedAttribute]
public void set_UserId(string value);
    [CompilerGeneratedAttribute]
public string get_Scope();
    [CompilerGeneratedAttribute]
public void set_Scope(string value);
    [CompilerGeneratedAttribute]
public bool get_HasCompact();
    [CompilerGeneratedAttribute]
public void set_HasCompact(bool value);
    [CompilerGeneratedAttribute]
public IEnumerable`1<Guid> get_TargetAccounts();
    [CompilerGeneratedAttribute]
public void set_TargetAccounts(IEnumerable`1<Guid> value);
}
public class Microsoft.VisualStudio.Services.Client.Keychain.SessionTokenDescriptor : object {
    private string scope;
    private string lifeTime;
    private IList`1<Guid> targetAccounts;
    private SessionTokenType tokenType;
    private static string TokenStorageScopePrefix;
    private static string TokenStorageTargetAccountsPrefix;
    public string Scope { get; }
    public string LifeTime { get; }
    public IList`1<Guid> TargetAccounts { get; }
    public SessionTokenType TokenType { get; }
    public SessionTokenDescriptor(string scope, SessionTokenType tokenType, string lifeTime, IList`1<Guid> targetAccounts);
    public string get_Scope();
    public string get_LifeTime();
    public IList`1<Guid> get_TargetAccounts();
    public SessionTokenType get_TokenType();
    public static SessionTokenDescriptor FromKey(VssToken token, SessionTokenType tokenType);
    private static string CleanString(string orjString, string prefix);
    public string ToKey();
    public virtual int GetHashCode();
    public virtual bool Equals(object obj);
}
internal class Microsoft.VisualStudio.Services.Client.Keychain.SessionTokenPair : object {
    [CompilerGeneratedAttribute]
private string <SelfDescribing>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Compact>k__BackingField;
    public string SelfDescribing { get; private set; }
    public string Compact { get; private set; }
    [JsonConstructorAttribute]
public SessionTokenPair(string selfDescribing, string compact);
    public string GetToken(SessionTokenType tokenType);
    [CompilerGeneratedAttribute]
public string get_SelfDescribing();
    [CompilerGeneratedAttribute]
private void set_SelfDescribing(string value);
    [CompilerGeneratedAttribute]
public string get_Compact();
    [CompilerGeneratedAttribute]
private void set_Compact(string value);
    public string Serialize();
    public static SessionTokenPair GetTokenPair(string tokenValue);
    private static SessionTokenPair TryDeserialize(string tokenValue);
}
public interface Microsoft.VisualStudio.Services.Client.Keychain.VSProvider.IAadProviderConfiguration {
    public bool AzureRMIdentityEnabled { get; }
    public string AadAuthorityBase { get; }
    public bool ValidateAadAuthority { get; }
    public string ClientIdentifier { get; }
    public Uri NativeClientRedirect { get; }
    [ObsoleteAttribute("Use Scopes instead.")]
public Uri ResourceEndpoint { get; }
    public String[] Scopes { get; }
    public Uri AzureResourceManagementEndpoint { get; }
    [ObsoleteAttribute("Use AzureRMAudienceScopes instead.")]
public Uri AzureRMAudienceEndpoint { get; }
    public String[] AzureRMAudienceScopes { get; }
    public abstract virtual bool get_AzureRMIdentityEnabled();
    public abstract virtual string get_AadAuthorityBase();
    public abstract virtual bool get_ValidateAadAuthority();
    public abstract virtual string get_ClientIdentifier();
    public abstract virtual Uri get_NativeClientRedirect();
    public abstract virtual Uri get_ResourceEndpoint();
    public abstract virtual String[] get_Scopes();
    public abstract virtual Uri get_AzureResourceManagementEndpoint();
    public abstract virtual Uri get_AzureRMAudienceEndpoint();
    public abstract virtual String[] get_AzureRMAudienceScopes();
}
public class Microsoft.VisualStudio.Services.Client.VssAadCredential : FederatedCredential {
    [CompilerGeneratedAttribute]
private string <Username>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Password>k__BackingField;
    public VssCredentialsType CredentialType { get; }
    public string Username { get; }
    [EditorBrowsableAttribute("1")]
public string Password { get; }
    public VssAadCredential(VssAadToken initialToken);
    public VssAadCredential(string username, string password);
    public virtual VssCredentialsType get_CredentialType();
    [CompilerGeneratedAttribute]
public string get_Username();
    [CompilerGeneratedAttribute]
public string get_Password();
    public virtual bool IsAuthenticationChallenge(IHttpResponse webResponse);
    protected virtual IssuedTokenProvider OnCreateTokenProvider(Uri serverUrl, IHttpResponse response);
}
public static class Microsoft.VisualStudio.Services.Client.VssAadSettings : object {
    public static string DefaultAadInstance;
    public static string CommonTenant;
    public static string Resource;
    public static string Client;
    private static string ApplicationTenantId;
    public static String[] DefaultScopes;
    public static string AadInstance { get; }
    private static VssAadSettings();
    public static string get_AadInstance();
}
public class Microsoft.VisualStudio.Services.Client.VssAadToken : IssuedToken {
    private bool allowDialog;
    private string accessToken;
    private string accessTokenType;
    private IPublicClientApplication app;
    private VssAadCredential userCredential;
    private Func`2<String[], AuthenticationResult> tokenAcquisitionDelegate;
    protected internal VssCredentialsType CredentialType { get; }
    public VssAadToken(string accessTokenType, string accessToken);
    public VssAadToken(PublicClientApplicationBuilder clientBuilder, VssAadCredential userCredential, bool allowDialog);
    public VssAadToken(Func`2<String[], AuthenticationResult> tokenAcquisitionDelegate);
    protected internal virtual VssCredentialsType get_CredentialType();
    public AuthenticationResult AcquireToken(String[] scopes);
    internal virtual void ApplyTo(IHttpRequest request);
}
internal class Microsoft.VisualStudio.Services.Client.VssAadTokenProvider : IssuedTokenProvider {
    public bool GetTokenIsInteractive { get; }
    public VssAadTokenProvider(VssAadCredential credential);
    public virtual bool get_GetTokenIsInteractive();
    private VssAadToken GetVssAadToken();
    protected virtual Task`1<IssuedToken> OnGetTokenAsync(IssuedToken failedToken, CancellationToken cancellationToken);
}
public class Microsoft.VisualStudio.Services.Client.VssAadVSAccountProviderToken : IssuedToken {
    private AuthenticationResult m_authResult;
    protected internal VssCredentialsType CredentialType { get; }
    public VssAadVSAccountProviderToken(AuthenticationResult result);
    protected internal virtual VssCredentialsType get_CredentialType();
    internal virtual void ApplyTo(IHttpRequest request);
}
public class Microsoft.VisualStudio.Services.Client.VssAzureIdentityCredential : FederatedCredential {
    private TokenCredential tokenCredential;
    public VssCredentialsType CredentialType { get; }
    public VssAzureIdentityCredential(TokenCredential tokenCredential);
    public virtual VssCredentialsType get_CredentialType();
    public virtual bool IsAuthenticationChallenge(IHttpResponse webResponse);
    protected virtual IssuedTokenProvider OnCreateTokenProvider(Uri serverUrl, IHttpResponse response);
}
internal class Microsoft.VisualStudio.Services.Client.VssAzureIdentityTokenProvider : IssuedTokenProvider {
    private TokenCredential tokenCredential;
    public bool GetTokenIsInteractive { get; }
    public VssAzureIdentityTokenProvider(VssAzureIdentityCredential credential, TokenCredential tokenCredential);
    public virtual bool get_GetTokenIsInteractive();
    [AsyncStateMachineAttribute("Microsoft.VisualStudio.Services.Client.VssAzureIdentityTokenProvider/<OnGetTokenAsync>d__4")]
protected virtual Task`1<IssuedToken> OnGetTokenAsync(IssuedToken failedToken, CancellationToken cancellationToken);
}
internal static class Microsoft.VisualStudio.Services.Client.VssClaimsConstants : object {
    internal static string GivenNameClaimType;
    internal static string FamilyNameClaimType;
    internal static string ProfileExtraScope;
}
public class Microsoft.VisualStudio.Services.Client.VssClientCredentials : VssCredentials {
    public VssClientCredentials(WindowsCredential windowsCredential, FederatedCredential federatedCredential, Nullable`1<CredentialPromptType> promptType, TaskScheduler scheduler, IVssCredentialPrompt credentialPrompt);
    public VssClientCredentials(bool useDefaultCredentials);
    private VssClientCredentials(WindowsCredential windowsCredential, FederatedCredential federatedCredential, TaskScheduler scheduler, Nullable`1<CredentialPromptType> promptType, IVssCredentialPrompt credentialPrompt);
    private VssClientCredentials(WindowsCredential windowsCredential, FederatedCredential federatedCredential, CredentialPromptType promptType, TaskScheduler scheduler, IVssCredentialPrompt credentialPrompt);
    public static VssClientCredentials op_Implicit(FederatedCredential credential);
    public static VssClientCredentials op_Implicit(WindowsCredential credential);
    private static FederatedCredential CreateDefaultFederatedCredential(bool useDefaultCredentials);
    private static CredentialPromptType CreateDefaultPromptType(FederatedCredential federatedCredential);
}
public class Microsoft.VisualStudio.Services.Client.VssClientCredentialStorage : object {
    private string m_tokenKind;
    private VssTokenStorage m_tokenStorage;
    private Dictionary`2<string, VssTokenKey> m_tokenKeyMap;
    protected VssTokenStorage TokenStorage { get; }
    protected string TokenKind { get; }
    public VssClientCredentialStorage(string storageKind, VssTokenStorage tokenStorage);
    protected VssTokenStorage get_TokenStorage();
    protected string get_TokenKind();
    public string GetTokenProperty(Uri serverUrl, string propertyName);
    public String[] GetTokenProperty(Uri[] serverUrls, string propertyName);
    public virtual IssuedToken RetrieveToken(Uri serverUrl, VssCredentialsType credentialsType);
    public virtual void StoreToken(Uri serverUrl, IssuedToken token);
    public void RemoveToken(Uri serverUrl);
    public virtual void RemoveToken(Uri serverUrl, IssuedToken token);
    public virtual bool RemoveTokenValue(Uri serverUrl, IssuedToken token);
    public void RemoveTokenValues(Guid userId);
    protected virtual VssTokenKey BuildTokenKey(Uri serverUrl, VssCredentialsType credentialType);
    private string ConvertUriForStorage(Uri serverUri);
}
public class Microsoft.VisualStudio.Services.Client.VssFederatedCredential : FederatedCredential {
    public VssCredentialsType CredentialType { get; }
    public VssFederatedCredential(bool useCache, VssFederatedToken initialToken);
    public virtual VssCredentialsType get_CredentialType();
    public virtual bool IsAuthenticationChallenge(IHttpResponse webResponse);
    protected virtual IssuedTokenProvider OnCreateTokenProvider(Uri serverUrl, IHttpResponse response);
    internal static void GetRealmAndIssuer(IHttpResponse response, String& realm, String& issuer);
    internal static Nullable`1<bool> IsVssFederatedAuthenticationChallenge(IHttpResponse webResponse, Boolean& isNonAuthenticationChallenge);
    private static void AddParameter(Uri& uri, string name, string value);
}
public class Microsoft.VisualStudio.Services.Client.VssFederatedToken : IssuedToken {
    private CookieCollection m_cookies;
    private static string c_cookieHeader;
    [EditorBrowsableAttribute("1")]
public CookieCollection CookieCollection { get; }
    protected internal VssCredentialsType CredentialType { get; }
    public VssFederatedToken(CookieCollection cookies);
    public CookieCollection get_CookieCollection();
    protected internal virtual VssCredentialsType get_CredentialType();
    internal virtual void ApplyTo(IHttpRequest request);
    private string GetHeaderValue(IEnumerable`1<string> cookieHeaders);
}
internal class Microsoft.VisualStudio.Services.Client.VssFederatedTokenProvider : IssuedTokenProvider {
    [CompilerGeneratedAttribute]
private string <Issuer>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Realm>k__BackingField;
    protected string AuthenticationScheme { get; }
    protected string AuthenticationParameter { get; }
    public VssFederatedCredential Credential { get; }
    public bool GetTokenIsInteractive { get; }
    public string Issuer { get; private set; }
    public string Realm { get; private set; }
    public VssFederatedTokenProvider(VssFederatedCredential credential, Uri serverUrl, Uri signInUrl, string issuer, string realm);
    protected virtual string get_AuthenticationScheme();
    protected virtual string get_AuthenticationParameter();
    public VssFederatedCredential get_Credential();
    public virtual bool get_GetTokenIsInteractive();
    [CompilerGeneratedAttribute]
public string get_Issuer();
    [CompilerGeneratedAttribute]
private void set_Issuer(string value);
    [CompilerGeneratedAttribute]
public string get_Realm();
    [CompilerGeneratedAttribute]
private void set_Realm(string value);
    protected internal virtual bool IsAuthenticationChallenge(IHttpResponse webResponse);
    protected virtual IssuedToken OnValidatingToken(IssuedToken token, IHttpResponse webResponse);
    public sealed virtual void SignOut(Uri signOutUrl, Uri replyToUrl, string identityProvider);
}
public class Microsoft.VisualStudio.Services.Client.VssOAuthCredential : FederatedCredential {
    private string m_clientId;
    private string m_clientSecret;
    private Uri m_authorizationUri;
    private Action`1<VssOAuthTokenContainer> m_callback;
    public VssCredentialsType CredentialType { get; }
    public string ClientId { get; }
    internal string ClientSecret { get; }
    internal Action`1<VssOAuthTokenContainer> TokensReceived { get; }
    public VssOAuthCredential(Uri authorizationUri, string clientId, string clientSecret, VssOAuthTokenContainer initialToken, Action`1<VssOAuthTokenContainer> tokensReceived);
    public virtual VssCredentialsType get_CredentialType();
    public string get_ClientId();
    internal string get_ClientSecret();
    internal Action`1<VssOAuthTokenContainer> get_TokensReceived();
    public virtual bool IsAuthenticationChallenge(IHttpResponse webResponse);
    protected virtual IssuedTokenProvider OnCreateTokenProvider(Uri serverUrl, IHttpResponse response);
}
public class Microsoft.VisualStudio.Services.Client.VssOAuthToken : IssuedToken {
    private string m_token;
    private DateTime m_expiration;
    private VssOAuthTokenType m_tokenType;
    public string Token { get; }
    public VssOAuthTokenType TokenType { get; }
    public DateTime Expiration { get; }
    protected internal VssCredentialsType CredentialType { get; }
    public VssOAuthToken(string token);
    internal VssOAuthToken(string token, VssOAuthTokenType tokenType);
    internal VssOAuthToken(string token, VssOAuthTokenType tokenType, DateTime expiration);
    public string get_Token();
    public VssOAuthTokenType get_TokenType();
    public DateTime get_Expiration();
    protected internal virtual VssCredentialsType get_CredentialType();
    internal virtual void ApplyTo(IHttpRequest request);
}
public class Microsoft.VisualStudio.Services.Client.VssOAuthTokenContainer : IssuedToken {
    private VssOAuthToken m_accessToken;
    private VssOAuthToken m_refreshToken;
    private static Lazy`1<DataContractJsonSerializer> s_serializer;
    public VssOAuthToken AccessToken { get; }
    public VssOAuthToken RefreshToken { get; }
    protected internal VssCredentialsType CredentialType { get; }
    internal VssOAuthTokenContainer(VssOAuthToken accessToken, VssOAuthToken refreshToken);
    private static VssOAuthTokenContainer();
    public VssOAuthToken get_AccessToken();
    public VssOAuthToken get_RefreshToken();
    protected internal virtual VssCredentialsType get_CredentialType();
    internal virtual void ApplyTo(IHttpRequest message);
    internal static VssOAuthTokenContainer ExtractTokens(Stream stream);
    internal static VssOAuthTokenContainer FromAccessToken(string accessToken);
    internal static VssOAuthTokenContainer FromAuthCodeOrRefreshToken(string authCodeOrRefreshToken);
}
internal class Microsoft.VisualStudio.Services.Client.VssOAuthTokenProvider : IssuedTokenProvider {
    protected string AuthenticationScheme { get; }
    public VssOAuthCredential Credential { get; }
    public bool GetTokenIsInteractive { get; }
    public VssOAuthTokenProvider(VssOAuthCredential credential, Uri serverUrl, Uri signInUrl);
    protected virtual string get_AuthenticationScheme();
    public VssOAuthCredential get_Credential();
    public virtual bool get_GetTokenIsInteractive();
    [AsyncStateMachineAttribute("Microsoft.VisualStudio.Services.Client.VssOAuthTokenProvider/<OnGetTokenAsync>d__7")]
protected virtual Task`1<IssuedToken> OnGetTokenAsync(IssuedToken failedToken, CancellationToken cancellationToken);
    private HttpMessageHandler CreateMessageHandler();
}
public enum Microsoft.VisualStudio.Services.Client.VssOAuthTokenType : Enum {
    public int value__;
    public static VssOAuthTokenType AuthenticationCode;
    public static VssOAuthTokenType AccessToken;
    public static VssOAuthTokenType RefreshToken;
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class System.Runtime.CompilerServices.IsReadOnlyAttribute : Attribute {
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("2")]
internal class System.Runtime.CompilerServices.RefSafetyRulesAttribute : Attribute {
    public int Version;
    public RefSafetyRulesAttribute(int );
}
