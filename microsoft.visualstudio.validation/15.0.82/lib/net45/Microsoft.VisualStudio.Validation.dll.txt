public static class Microsoft.Assumes : object {
    [DebuggerStepThroughAttribute]
[TargetedPatchingOptOutAttribute("Performance critical to inline across NGen image boundaries")]
public static void NotNull(T value);
    [DebuggerStepThroughAttribute]
public static void NotNullOrEmpty(string value);
    [DebuggerStepThroughAttribute]
public static void NotNullOrEmpty(ICollection`1<T> values);
    [DebuggerStepThroughAttribute]
public static void NotNullOrEmpty(IEnumerable`1<T> values);
    [DebuggerStepThroughAttribute]
[TargetedPatchingOptOutAttribute("Performance critical to inline across NGen image boundaries")]
public static void Null(T value);
    [DebuggerStepThroughAttribute]
[TargetedPatchingOptOutAttribute("Performance critical to inline across NGen image boundaries")]
public static void Is(object value);
    [DebuggerStepThroughAttribute]
[TargetedPatchingOptOutAttribute("Performance critical to inline across NGen image boundaries")]
public static void False(bool condition, string message);
    [DebuggerStepThroughAttribute]
[TargetedPatchingOptOutAttribute("Performance critical to inline across NGen image boundaries")]
public static void False(bool condition, string unformattedMessage, object arg1);
    [DebuggerStepThroughAttribute]
[TargetedPatchingOptOutAttribute("Performance critical to inline across NGen image boundaries")]
public static void False(bool condition, string unformattedMessage, Object[] args);
    [DebuggerStepThroughAttribute]
[TargetedPatchingOptOutAttribute("Performance critical to inline across NGen image boundaries")]
public static void True(bool condition, string message);
    [DebuggerStepThroughAttribute]
[TargetedPatchingOptOutAttribute("Performance critical to inline across NGen image boundaries")]
public static void True(bool condition, string unformattedMessage, object arg1);
    [DebuggerStepThroughAttribute]
[TargetedPatchingOptOutAttribute("Performance critical to inline across NGen image boundaries")]
public static void True(bool condition, string unformattedMessage, Object[] args);
    [DebuggerStepThroughAttribute]
public static Exception NotReachable();
    [DebuggerStepThroughAttribute]
public static void Present(T component);
    [DebuggerStepThroughAttribute]
public static Exception Fail(string message, bool showAssert);
    public static Exception Fail(string message, Exception innerException, bool showAssert);
    private static string Format(string format, Object[] arguments);
}
[ExtensionAttribute]
public static class Microsoft.EventHandlerExtensions : object {
    [ExtensionAttribute]
public static void Raise(Delegate handler, object sender, EventArgs e);
    [ExtensionAttribute]
public static void Raise(EventHandler handler, object sender, EventArgs e);
    [ExtensionAttribute]
public static void Raise(EventHandler`1<T> handler, object sender, T e);
}
public interface Microsoft.IDisposableObservable {
    public bool IsDisposed { get; }
    public abstract virtual bool get_IsDisposed();
}
internal static class Microsoft.PrivateErrorHelpers : object {
    internal static Type TrimGenericWrapper(Type type, Type wrapper);
    internal static string Format(string format, Object[] arguments);
}
public static class Microsoft.Report : object {
    [ConditionalAttribute("DEBUG")]
public static void IfNotPresent(T part);
    [ConditionalAttribute("DEBUG")]
public static void If(bool condition, string message);
    [ConditionalAttribute("DEBUG")]
public static void IfNot(bool condition, string message);
    [ConditionalAttribute("DEBUG")]
public static void IfNot(bool condition, string message, object arg1);
    [ConditionalAttribute("DEBUG")]
public static void IfNot(bool condition, string message, object arg1, object arg2);
    [ConditionalAttribute("DEBUG")]
public static void IfNot(bool condition, string message, Object[] args);
    [ConditionalAttribute("DEBUG")]
public static void Fail(string message);
    [ConditionalAttribute("DEBUG")]
public static void Fail(string message, Object[] args);
}
public static class Microsoft.Requires : object {
    [DebuggerStepThroughAttribute]
[TargetedPatchingOptOutAttribute("Performance critical to inline across NGen image boundaries")]
public static T NotNull(T value, string parameterName);
    [DebuggerStepThroughAttribute]
[TargetedPatchingOptOutAttribute("Performance critical to inline across NGen image boundaries")]
public static IntPtr NotNull(IntPtr value, string parameterName);
    [DebuggerStepThroughAttribute]
[TargetedPatchingOptOutAttribute("Performance critical to inline across NGen image boundaries")]
public static void NotNull(Task value, string parameterName);
    [DebuggerStepThroughAttribute]
[TargetedPatchingOptOutAttribute("Performance critical to inline across NGen image boundaries")]
public static void NotNull(Task`1<T> value, string parameterName);
    [DebuggerStepThroughAttribute]
public static T NotNullAllowStructs(T value, string parameterName);
    [DebuggerStepThroughAttribute]
public static void NotNullOrEmpty(string value, string parameterName);
    [DebuggerStepThroughAttribute]
public static void NotNullOrWhiteSpace(string value, string parameterName);
    [DebuggerStepThroughAttribute]
public static void NotNullOrEmpty(IEnumerable values, string parameterName);
    [DebuggerStepThroughAttribute]
public static void NotNullEmptyOrNullElements(IEnumerable`1<T> values, string parameterName);
    [DebuggerStepThroughAttribute]
public static void NullOrNotNullElements(IEnumerable`1<T> values, string parameterName);
    [DebuggerStepThroughAttribute]
public static void NotEmpty(Guid value, string parameterName);
    [DebuggerStepThroughAttribute]
public static void Range(bool condition, string parameterName, string message);
    [DebuggerStepThroughAttribute]
public static Exception FailRange(string parameterName, string message);
    [DebuggerStepThroughAttribute]
public static void Argument(bool condition, string parameterName, string message);
    [DebuggerStepThroughAttribute]
public static void Argument(bool condition, string parameterName, string message, object arg1);
    [DebuggerStepThroughAttribute]
public static void Argument(bool condition, string parameterName, string message, object arg1, object arg2);
    [DebuggerStepThroughAttribute]
public static void Argument(bool condition, string parameterName, string message, Object[] args);
    [DebuggerStepThroughAttribute]
public static Exception Fail(string message);
    [DebuggerStepThroughAttribute]
public static Exception Fail(string unformattedMessage, Object[] args);
    [DebuggerStepThroughAttribute]
public static Exception Fail(Exception innerException, string unformattedMessage, Object[] args);
    private static string Format(string format, Object[] arguments);
}
[GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "4.0.0.0")]
[DebuggerNonUserCodeAttribute]
[CompilerGeneratedAttribute]
internal class Microsoft.Strings : object {
    private static ResourceManager resourceMan;
    private static CultureInfo resourceCulture;
    [EditorBrowsableAttribute("2")]
internal static ResourceManager ResourceManager { get; }
    [EditorBrowsableAttribute("2")]
internal static CultureInfo Culture { get; internal set; }
    internal static string Argument_EmptyArray { get; }
    internal static string Argument_EmptyGuid { get; }
    internal static string Argument_EmptyString { get; }
    internal static string Argument_NullElement { get; }
    internal static string Argument_Whitespace { get; }
    internal static string InternalExceptionMessage { get; }
    internal static string ServiceMissing { get; }
    internal static ResourceManager get_ResourceManager();
    internal static CultureInfo get_Culture();
    internal static void set_Culture(CultureInfo value);
    internal static string get_Argument_EmptyArray();
    internal static string get_Argument_EmptyGuid();
    internal static string get_Argument_EmptyString();
    internal static string get_Argument_NullElement();
    internal static string get_Argument_Whitespace();
    internal static string get_InternalExceptionMessage();
    internal static string get_ServiceMissing();
}
[ExcludeFromCodeCoverageAttribute]
[AttributeUsageAttribute("2048")]
public class Microsoft.ValidatedNotNullAttribute : Attribute {
}
public static class Microsoft.Verify : object {
    [DebuggerStepThroughAttribute]
public static void HResult(int hresult, bool ignorePreviousComCalls);
    [DebuggerStepThroughAttribute]
public static void Operation(bool condition, string message);
    [DebuggerStepThroughAttribute]
public static void Operation(bool condition, string unformattedMessage, object arg1);
    [DebuggerStepThroughAttribute]
public static void Operation(bool condition, string unformattedMessage, object arg1, object arg2);
    [DebuggerStepThroughAttribute]
public static void Operation(bool condition, string unformattedMessage, Object[] args);
    [DebuggerStepThroughAttribute]
public static void OperationWithHelp(bool condition, string message, string helpLink);
    [DebuggerStepThroughAttribute]
public static Exception FailOperation(string message, Object[] args);
    [DebuggerStepThroughAttribute]
public static void NotDisposed(IDisposableObservable disposedValue, string message);
    [DebuggerStepThroughAttribute]
public static void NotDisposed(bool condition, object disposedValue, string message);
    [DebuggerStepThroughAttribute]
public static void NotDisposed(bool condition, string message);
}
internal class ThisAssembly : object {
    internal static string AssemblyVersion;
    internal static string AssemblyFileVersion;
    internal static string AssemblyInformationalVersion;
    internal static string AssemblyName;
    internal static string PublicKey;
    internal static string PublicKeyToken;
    internal static string AssemblyConfiguration;
    internal static string RootNamespace;
}
