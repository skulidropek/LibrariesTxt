[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
internal class Microsoft.Internal.Performance.CodeMarkerExStartEnd : ValueType {
    private int _end;
    private Byte[] _aBuff;
    internal CodeMarkerExStartEnd(int begin, int end, Byte[] aBuff, bool correlated);
    internal CodeMarkerExStartEnd(int begin, int end, Guid guidData, bool correlated);
    internal CodeMarkerExStartEnd(int begin, int end, string stringData, bool correlated);
    internal CodeMarkerExStartEnd(int begin, int end, UInt32 uintData, bool correlated);
    internal CodeMarkerExStartEnd(int begin, int end, ulong ulongData, bool correlated);
    public sealed virtual void Dispose();
}
internal class Microsoft.Internal.Performance.CodeMarkers : object {
    public static CodeMarkers Instance;
    private static string AtomName;
    private static string TestDllName;
    private static string ProductDllName;
    private State state;
    private RegistryView registryView;
    private string regroot;
    private Nullable`1<bool> shouldUseTestDll;
    private static Byte[] CorrelationMarkBytes;
    public bool IsEnabled { get; }
    public bool ShouldUseTestDll { get; }
    private static CodeMarkers();
    public bool get_IsEnabled();
    public bool get_ShouldUseTestDll();
    public bool CodeMarker(int nTimerID);
    public bool CodeMarkerEx(int nTimerID, Byte[] aBuff);
    public void SetStateDLLException();
    public bool CodeMarkerEx(int nTimerID, Guid guidData);
    public bool CodeMarkerEx(int nTimerID, string stringData);
    internal static Byte[] StringToBytesZeroTerminated(string stringData);
    public static Byte[] AttachCorrelationId(Byte[] buffer, Guid correlationId);
    public bool CodeMarkerEx(int nTimerID, UInt32 uintData);
    public bool CodeMarkerEx(int nTimerID, ulong ulongData);
    private static bool UsePrivateCodeMarkers(string regRoot, RegistryView registryView);
}
internal class Microsoft.Internal.Performance.CodeMarkerStartEnd : ValueType {
    private int _end;
    private Byte[] _buffer;
    internal CodeMarkerStartEnd(int begin, int end, bool correlated);
    public sealed virtual void Dispose();
    private void CodeMarker(int id);
}
[GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "17.0.0.0")]
[DebuggerNonUserCodeAttribute]
[CompilerGeneratedAttribute]
internal class Microsoft.VisualStudio.ExtensionEngine.ExtensionsScanningStrings : object {
    private static ResourceManager resourceMan;
    private static CultureInfo resourceCulture;
    [EditorBrowsableAttribute("2")]
internal static ResourceManager ResourceManager { get; }
    [EditorBrowsableAttribute("2")]
internal static CultureInfo Culture { get; internal set; }
    internal static string AllowButtonCaption { get; }
    internal static string DenyButtonCaption { get; }
    internal static string InfobarMessage { get; }
    internal static string PrivacyPolicyButtonCaption { get; }
    internal static ResourceManager get_ResourceManager();
    internal static CultureInfo get_Culture();
    internal static void set_Culture(CultureInfo value);
    internal static string get_AllowButtonCaption();
    internal static string get_DenyButtonCaption();
    internal static string get_InfobarMessage();
    internal static string get_PrivacyPolicyButtonCaption();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.VisualStudio.ExtensionEngine.Impl.Settings.ExtensionHotloadWatcher : object {
    private CancellationToken disposalToken;
    private IEngineHost engineHost;
    private IExtensionEngine extensionEngine;
    private List`1<SingleFileWatcher> fileSystemWatchers;
    private HotloadLocationFactory hotloadLocationFactory;
    private object syncRoot;
    private bool processingPerUser;
    private bool processingPerMachine;
    [CompilerGeneratedAttribute]
private string <PerMachineFilePath>k__BackingField;
    [CompilerGeneratedAttribute]
private string <PerUserFilePath>k__BackingField;
    public string PerMachineFilePath { get; }
    public string PerUserFilePath { get; }
    public ExtensionHotloadWatcher(IExtensionEngine extensionEngine, CancellationToken disposalToken);
    [CompilerGeneratedAttribute]
public sealed virtual string get_PerMachineFilePath();
    [CompilerGeneratedAttribute]
public sealed virtual string get_PerUserFilePath();
    public sealed virtual void Dispose();
    [AsyncStateMachineAttribute("Microsoft.VisualStudio.ExtensionEngine.Impl.Settings.ExtensionHotloadWatcher/<ProcessHotloadRegistrationAsync>d__16")]
public sealed virtual Task ProcessHotloadRegistrationAsync(CancellationToken cancellationToken);
    [IteratorStateMachineAttribute("Microsoft.VisualStudio.ExtensionEngine.Impl.Settings.ExtensionHotloadWatcher/<GetAddedExtensions>d__17")]
private IEnumerable`1<IInstalledExtension> GetAddedExtensions(HashSet`1<string> extensionDirectoryPathsFromHotloadFile, Dictionary`2<string, IInstalledExtension> currentHotloadExtensionManifestPaths, bool perMachine);
    private FileSystemEventHandler GetCallback(bool perMachine);
    private Dictionary`2<string, IInstalledExtension> GetCurrentlyRegisteredHotloadExtensionsByPath(bool perMachine);
    [AsyncStateMachineAttribute("Microsoft.VisualStudio.ExtensionEngine.Impl.Settings.ExtensionHotloadWatcher/<GetManifestPathsFromFileAsync>d__20")]
private Task`1<HashSet`1<string>> GetManifestPathsFromFileAsync(string fullPath);
    [IteratorStateMachineAttribute("Microsoft.VisualStudio.ExtensionEngine.Impl.Settings.ExtensionHotloadWatcher/<GetRemovedExtensions>d__21")]
private IEnumerable`1<IInstalledExtension> GetRemovedExtensions(HashSet`1<string> extensionManifestPathsFromHotloadFile, Dictionary`2<string, IInstalledExtension> currentHotloadExtensionManifestPaths, bool perMachine);
    [AsyncStateMachineAttribute("Microsoft.VisualStudio.ExtensionEngine.Impl.Settings.ExtensionHotloadWatcher/<HandleFileUpdatedEventSafelyAsync>d__22")]
private Task HandleFileUpdatedEventSafelyAsync(object sender, FileSystemEventArgs e, bool perMachine);
    private void HotloadFileUpdatedPerMachineEvent(object sender, FileSystemEventArgs e);
    private void HotloadFileUpdatedPerUserEvent(object sender, FileSystemEventArgs e);
    private void ProcessAddedExtensions(IEnumerable`1<IInstalledExtension> addedExtensions);
    [AsyncStateMachineAttribute("Microsoft.VisualStudio.ExtensionEngine.Impl.Settings.ExtensionHotloadWatcher/<ProcessHotloadFileAsync>d__26")]
private Task ProcessHotloadFileAsync(string fullPath, bool perMachine);
    private void ProcessRemovedExtensions(IEnumerable`1<IInstalledExtension> removedExtensions);
    private void SendHotloadExtensionTelemetry(IInstalledExtension extension, string eventName);
    private void SetupFileSystemWatchers();
    private void SetupWatcherForPath(string hotloadFilePath, bool perMachine);
    [AsyncStateMachineAttribute("Microsoft.VisualStudio.ExtensionEngine.Impl.Settings.ExtensionHotloadWatcher/<TryProcessHotloadFileAsync>d__31")]
private Task TryProcessHotloadFileAsync(string fullPath, bool perMachine);
    private void SetProcessingState(bool perMachine, bool value);
    private bool GetProcessingState(bool perMachine);
}
public class Microsoft.VisualStudio.ExtensionEngine.Impl.Settings.HotloadException : Exception {
    public HotloadException(string message);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.VisualStudio.ExtensionEngine.Impl.Settings.HotloadLocationFactory : object {
    private Lazy`1<string> machinePathLazy;
    private ISettingsManager settingsManager;
    private Lazy`1<string> userPathLazy;
    public HotloadLocationFactory(ISettingsManager settingsManager);
    public string GetHotloadLocationForMachine();
    public string GetHotloadLocationForUser();
    private string CalculateHotloadLocationForMachine();
    private string CalculateHotloadLocationForUser();
}
internal interface Microsoft.VisualStudio.ExtensionEngine.Impl.Settings.IExtensionHotloadWatcher {
    public string PerMachineFilePath { get; }
    public string PerUserFilePath { get; }
    public abstract virtual string get_PerMachineFilePath();
    public abstract virtual string get_PerUserFilePath();
    public abstract virtual Task ProcessHotloadRegistrationAsync(CancellationToken cancellationToken);
}
internal class Microsoft.VisualStudio.ExtensionEngine.Impl.Settings.MetadataStore.CultureInfoFormatter : object {
    public static IMessagePackFormatter`1<CultureInfo> Instance;
    private static CultureInfoFormatter();
    public sealed virtual CultureInfo Deserialize(MessagePackReader& reader, MessagePackSerializerOptions options);
    public sealed virtual void Serialize(MessagePackWriter& writer, CultureInfo value, MessagePackSerializerOptions options);
}
[ExtensionAttribute]
internal static class Microsoft.VisualStudio.ExtensionEngine.Impl.Settings.MetadataStore.ExtensionMetadataStore : object {
    private static UInt32 MaximumReadAttempts;
    private static UInt32 LinearBackoffFactor;
    private static string MetadataFileName;
    private static string ExtensionsConfigurationChanged;
    private static MessagePackSerializerOptions Options;
    private static RetryPolicy LinearRetryPolicy;
    private static object syncRoot;
    private static ExtensionMetadataStore();
    [AsyncStateMachineAttribute("Microsoft.VisualStudio.ExtensionEngine.Impl.Settings.MetadataStore.ExtensionMetadataStore/<ReadExtensionDataAsync>d__7")]
public static Task`1<IEnumerable`1<ExtensionFromStorageImpl>> ReadExtensionDataAsync(IEngineHost engineHost, CancellationToken cancellationToken);
    private static IEnumerable`1<ExtensionFromStorageImpl> ReadExtensionsFromStream(FileStream stream);
    public static bool IsExtensionDataStale(IEngineHost engineHost);
    public static bool DeleteExtensionData(IEngineHost engineHost, object telemetryEvent);
    [AsyncStateMachineAttribute("Microsoft.VisualStudio.ExtensionEngine.Impl.Settings.MetadataStore.ExtensionMetadataStore/<WriteExtensionDataAsync>d__11")]
public static Task`1<IEnumerable`1<ExtensionFromStorageImpl>> WriteExtensionDataAsync(IEnumerable`1<IInstalledExtension> installedExtensions, IEngineHost engineHost, CancellationToken cancellationToken);
    [ExtensionAttribute]
internal static int Read(Stream stream, Span`1<byte> buffer);
    [CompilerGeneratedAttribute]
internal static long <IsExtensionDataStale>g__GetFileTimeStamp|9_0(string filePath);
}
[MessagePackObjectAttribute("False")]
public class Microsoft.VisualStudio.ExtensionEngine.Impl.Settings.MetadataStore.StorageModel.ExtensionContentFromStorage : object {
    [CompilerGeneratedAttribute]
private string <ContentTypeName>k__BackingField;
    [CompilerGeneratedAttribute]
private IDictionary`2<string, string> <Attributes>k__BackingField;
    [CompilerGeneratedAttribute]
private string <RelativePath>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<XmlElement> <AdditionalElements>k__BackingField;
    [KeyAttribute("0")]
public string ContentTypeName { get; public set; }
    [KeyAttribute("1")]
public IDictionary`2<string, string> Attributes { get; public set; }
    [KeyAttribute("2")]
public string RelativePath { get; public set; }
    [KeyAttribute("3")]
public IList`1<XmlElement> AdditionalElements { get; public set; }
    public ExtensionContentFromStorage(IExtensionContent content);
    [CompilerGeneratedAttribute]
public string get_ContentTypeName();
    [CompilerGeneratedAttribute]
public void set_ContentTypeName(string value);
    [CompilerGeneratedAttribute]
public IDictionary`2<string, string> get_Attributes();
    [CompilerGeneratedAttribute]
public void set_Attributes(IDictionary`2<string, string> value);
    [CompilerGeneratedAttribute]
public string get_RelativePath();
    [CompilerGeneratedAttribute]
public void set_RelativePath(string value);
    [CompilerGeneratedAttribute]
public IList`1<XmlElement> get_AdditionalElements();
    [CompilerGeneratedAttribute]
public void set_AdditionalElements(IList`1<XmlElement> value);
}
[MessagePackObjectAttribute("False")]
public class Microsoft.VisualStudio.ExtensionEngine.Impl.Settings.MetadataStore.StorageModel.ExtensionFromStorageImpl : object {
    [CompilerGeneratedAttribute]
private IList`1<XmlElement> <AdditionalElements>k__BackingField;
    [CompilerGeneratedAttribute]
private AutoUpdateState <AutoUpdateState>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<ExtensionContentFromStorage> <Content>k__BackingField;
    [CompilerGeneratedAttribute]
private ExtensionHeaderFromStorage <Header>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<DateTimeOffset> <InstalledOn>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <InstalledPerMachine>k__BackingField;
    [CompilerGeneratedAttribute]
private ExtensionInstallerInformationFromStorage <InstallerInformation>k__BackingField;
    [CompilerGeneratedAttribute]
private string <InstallPath>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsPackComponent>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<XmlElement> <LocalizedAdditionalElements>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<Guid> <PackageGuidList>k__BackingField;
    [CompilerGeneratedAttribute]
private VsixType <PackageType>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<string> <PackedExtensionsVsixIDs>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<ExtensionReferenceFromStorage> <References>k__BackingField;
    [CompilerGeneratedAttribute]
private Version <SchemaVersion>k__BackingField;
    [CompilerGeneratedAttribute]
private ulong <SizeInBytes>k__BackingField;
    [CompilerGeneratedAttribute]
private EnabledState <State>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<ExtensionRequirementFromStorage> <Targets>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Type>k__BackingField;
    [CompilerGeneratedAttribute]
private string <IncompatibleReason>k__BackingField;
    [IgnoreMemberAttribute]
private string extensionNameInRegistry;
    [KeyAttribute("0")]
public IList`1<XmlElement> AdditionalElements { get; public set; }
    [KeyAttribute("1")]
public AutoUpdateState AutoUpdateState { get; public set; }
    [KeyAttribute("2")]
public IEnumerable`1<ExtensionContentFromStorage> Content { get; public set; }
    [KeyAttribute("3")]
public ExtensionHeaderFromStorage Header { get; public set; }
    [KeyAttribute("4")]
public Nullable`1<DateTimeOffset> InstalledOn { get; public set; }
    [KeyAttribute("5")]
public bool InstalledPerMachine { get; public set; }
    [KeyAttribute("6")]
public ExtensionInstallerInformationFromStorage InstallerInformation { get; public set; }
    [KeyAttribute("7")]
public string InstallPath { get; public set; }
    [KeyAttribute("8")]
public bool IsPackComponent { get; public set; }
    [KeyAttribute("9")]
public IList`1<XmlElement> LocalizedAdditionalElements { get; public set; }
    [KeyAttribute("10")]
public IList`1<Guid> PackageGuidList { get; public set; }
    [KeyAttribute("11")]
public VsixType PackageType { get; public set; }
    [KeyAttribute("12")]
public IEnumerable`1<string> PackedExtensionsVsixIDs { get; public set; }
    [KeyAttribute("13")]
public IEnumerable`1<ExtensionReferenceFromStorage> References { get; public set; }
    [KeyAttribute("14")]
public Version SchemaVersion { get; public set; }
    [KeyAttribute("15")]
public ulong SizeInBytes { get; public set; }
    [KeyAttribute("16")]
public EnabledState State { get; public set; }
    [KeyAttribute("17")]
public IEnumerable`1<ExtensionRequirementFromStorage> Targets { get; public set; }
    [KeyAttribute("18")]
public string Type { get; public set; }
    [KeyAttribute("19")]
public string IncompatibleReason { get; public set; }
    public ExtensionFromStorageImpl(IInstalledExtension extension);
    [CompilerGeneratedAttribute]
public IList`1<XmlElement> get_AdditionalElements();
    [CompilerGeneratedAttribute]
public void set_AdditionalElements(IList`1<XmlElement> value);
    [CompilerGeneratedAttribute]
public AutoUpdateState get_AutoUpdateState();
    [CompilerGeneratedAttribute]
public void set_AutoUpdateState(AutoUpdateState value);
    [CompilerGeneratedAttribute]
public IEnumerable`1<ExtensionContentFromStorage> get_Content();
    [CompilerGeneratedAttribute]
public void set_Content(IEnumerable`1<ExtensionContentFromStorage> value);
    [CompilerGeneratedAttribute]
public ExtensionHeaderFromStorage get_Header();
    [CompilerGeneratedAttribute]
public void set_Header(ExtensionHeaderFromStorage value);
    [CompilerGeneratedAttribute]
public Nullable`1<DateTimeOffset> get_InstalledOn();
    [CompilerGeneratedAttribute]
public void set_InstalledOn(Nullable`1<DateTimeOffset> value);
    [CompilerGeneratedAttribute]
public bool get_InstalledPerMachine();
    [CompilerGeneratedAttribute]
public void set_InstalledPerMachine(bool value);
    [CompilerGeneratedAttribute]
public ExtensionInstallerInformationFromStorage get_InstallerInformation();
    [CompilerGeneratedAttribute]
public void set_InstallerInformation(ExtensionInstallerInformationFromStorage value);
    [CompilerGeneratedAttribute]
public string get_InstallPath();
    [CompilerGeneratedAttribute]
public void set_InstallPath(string value);
    [CompilerGeneratedAttribute]
public bool get_IsPackComponent();
    [CompilerGeneratedAttribute]
public void set_IsPackComponent(bool value);
    [CompilerGeneratedAttribute]
public IList`1<XmlElement> get_LocalizedAdditionalElements();
    [CompilerGeneratedAttribute]
public void set_LocalizedAdditionalElements(IList`1<XmlElement> value);
    [CompilerGeneratedAttribute]
public IList`1<Guid> get_PackageGuidList();
    [CompilerGeneratedAttribute]
public void set_PackageGuidList(IList`1<Guid> value);
    [CompilerGeneratedAttribute]
public VsixType get_PackageType();
    [CompilerGeneratedAttribute]
public void set_PackageType(VsixType value);
    [CompilerGeneratedAttribute]
public IEnumerable`1<string> get_PackedExtensionsVsixIDs();
    [CompilerGeneratedAttribute]
public void set_PackedExtensionsVsixIDs(IEnumerable`1<string> value);
    [CompilerGeneratedAttribute]
public IEnumerable`1<ExtensionReferenceFromStorage> get_References();
    [CompilerGeneratedAttribute]
public void set_References(IEnumerable`1<ExtensionReferenceFromStorage> value);
    [CompilerGeneratedAttribute]
public Version get_SchemaVersion();
    [CompilerGeneratedAttribute]
public void set_SchemaVersion(Version value);
    [CompilerGeneratedAttribute]
public ulong get_SizeInBytes();
    [CompilerGeneratedAttribute]
public void set_SizeInBytes(ulong value);
    [CompilerGeneratedAttribute]
public EnabledState get_State();
    [CompilerGeneratedAttribute]
public void set_State(EnabledState value);
    [CompilerGeneratedAttribute]
public IEnumerable`1<ExtensionRequirementFromStorage> get_Targets();
    [CompilerGeneratedAttribute]
public void set_Targets(IEnumerable`1<ExtensionRequirementFromStorage> value);
    [CompilerGeneratedAttribute]
public string get_Type();
    [CompilerGeneratedAttribute]
public void set_Type(string value);
    [CompilerGeneratedAttribute]
public string get_IncompatibleReason();
    [CompilerGeneratedAttribute]
public void set_IncompatibleReason(string value);
    public string GetExtensionNameInRegistry();
}
[MessagePackObjectAttribute("False")]
public class Microsoft.VisualStudio.ExtensionEngine.Impl.Settings.MetadataStore.StorageModel.ExtensionHeaderFromStorage : object {
    [CompilerGeneratedAttribute]
private IList`1<XmlElement> <AdditionalElements>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <AllowClientRole>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <AllUsers>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Author>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ContentsAreInsideVSIXPackage>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ContentsPath>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Description>k__BackingField;
    [CompilerGeneratedAttribute]
private Uri <GettingStartedGuide>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <GlobalScope>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Icon>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Identifier>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <InstalledByMsi>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsExperimental>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <LicenseClickThrough>k__BackingField;
    [CompilerGeneratedAttribute]
private string <LicenseFormat>k__BackingField;
    [CompilerGeneratedAttribute]
private string <LicenseRelativePath>k__BackingField;
    [CompilerGeneratedAttribute]
private CultureInfo <Locale>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<XmlElement> <LocalizedAdditionalElements>k__BackingField;
    [CompilerGeneratedAttribute]
private string <LocalizedDescription>k__BackingField;
    [CompilerGeneratedAttribute]
private string <LocalizedName>k__BackingField;
    [CompilerGeneratedAttribute]
private Uri <MoreInfoUrl>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private InstallationPartialManifestType <PartialManifestType>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Preview>k__BackingField;
    [CompilerGeneratedAttribute]
private string <PreviewImage>k__BackingField;
    [CompilerGeneratedAttribute]
private Uri <ReleaseNotes>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ReleaseNotesFormat>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ReleaseNotesRelativePath>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <RemoveOldPerUserExtension>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ShortcutPath>k__BackingField;
    [CompilerGeneratedAttribute]
private VersionRange <SupportedFrameworkVersionRange>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <SystemComponent>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<string> <Tags>k__BackingField;
    [CompilerGeneratedAttribute]
private Version <Version>k__BackingField;
    [CompilerGeneratedAttribute]
private string <VsixManifestVersion>k__BackingField;
    [CompilerGeneratedAttribute]
private ExtensionType <ExtensionType>k__BackingField;
    [KeyAttribute("0")]
public IList`1<XmlElement> AdditionalElements { get; public set; }
    [KeyAttribute("1")]
public bool AllowClientRole { get; public set; }
    [KeyAttribute("2")]
public bool AllUsers { get; public set; }
    [KeyAttribute("3")]
public string Author { get; public set; }
    [KeyAttribute("4")]
public bool ContentsAreInsideVSIXPackage { get; public set; }
    [KeyAttribute("5")]
public string ContentsPath { get; public set; }
    [KeyAttribute("6")]
public string Description { get; public set; }
    [KeyAttribute("7")]
public Uri GettingStartedGuide { get; public set; }
    [KeyAttribute("8")]
public bool GlobalScope { get; public set; }
    [KeyAttribute("9")]
public string Icon { get; public set; }
    [KeyAttribute("10")]
public string Identifier { get; public set; }
    [KeyAttribute("11")]
public bool InstalledByMsi { get; public set; }
    [KeyAttribute("12")]
public bool IsExperimental { get; public set; }
    [KeyAttribute("13")]
public bool LicenseClickThrough { get; public set; }
    [KeyAttribute("14")]
public string LicenseFormat { get; public set; }
    [KeyAttribute("15")]
public string LicenseRelativePath { get; public set; }
    [KeyAttribute("16")]
public CultureInfo Locale { get; public set; }
    [KeyAttribute("17")]
public IList`1<XmlElement> LocalizedAdditionalElements { get; public set; }
    [KeyAttribute("18")]
public string LocalizedDescription { get; public set; }
    [KeyAttribute("19")]
public string LocalizedName { get; public set; }
    [KeyAttribute("20")]
public Uri MoreInfoUrl { get; public set; }
    [KeyAttribute("21")]
public string Name { get; public set; }
    [KeyAttribute("22")]
public InstallationPartialManifestType PartialManifestType { get; public set; }
    [KeyAttribute("23")]
public bool Preview { get; public set; }
    [KeyAttribute("24")]
public string PreviewImage { get; public set; }
    [KeyAttribute("25")]
public Uri ReleaseNotes { get; public set; }
    [KeyAttribute("26")]
public string ReleaseNotesFormat { get; public set; }
    [KeyAttribute("27")]
public string ReleaseNotesRelativePath { get; public set; }
    [KeyAttribute("28")]
public bool RemoveOldPerUserExtension { get; public set; }
    [KeyAttribute("29")]
public string ShortcutPath { get; public set; }
    [KeyAttribute("30")]
public VersionRange SupportedFrameworkVersionRange { get; public set; }
    [KeyAttribute("31")]
public bool SystemComponent { get; public set; }
    [KeyAttribute("32")]
public IEnumerable`1<string> Tags { get; public set; }
    [KeyAttribute("33")]
public Version Version { get; public set; }
    [KeyAttribute("34")]
public string VsixManifestVersion { get; public set; }
    [KeyAttribute("35")]
public ExtensionType ExtensionType { get; public set; }
    public ExtensionHeaderFromStorage(ExtensionHeaderImpl header);
    [CompilerGeneratedAttribute]
public IList`1<XmlElement> get_AdditionalElements();
    [CompilerGeneratedAttribute]
public void set_AdditionalElements(IList`1<XmlElement> value);
    [CompilerGeneratedAttribute]
public bool get_AllowClientRole();
    [CompilerGeneratedAttribute]
public void set_AllowClientRole(bool value);
    [CompilerGeneratedAttribute]
public bool get_AllUsers();
    [CompilerGeneratedAttribute]
public void set_AllUsers(bool value);
    [CompilerGeneratedAttribute]
public string get_Author();
    [CompilerGeneratedAttribute]
public void set_Author(string value);
    [CompilerGeneratedAttribute]
public bool get_ContentsAreInsideVSIXPackage();
    [CompilerGeneratedAttribute]
public void set_ContentsAreInsideVSIXPackage(bool value);
    [CompilerGeneratedAttribute]
public string get_ContentsPath();
    [CompilerGeneratedAttribute]
public void set_ContentsPath(string value);
    [CompilerGeneratedAttribute]
public string get_Description();
    [CompilerGeneratedAttribute]
public void set_Description(string value);
    [CompilerGeneratedAttribute]
public Uri get_GettingStartedGuide();
    [CompilerGeneratedAttribute]
public void set_GettingStartedGuide(Uri value);
    [CompilerGeneratedAttribute]
public bool get_GlobalScope();
    [CompilerGeneratedAttribute]
public void set_GlobalScope(bool value);
    [CompilerGeneratedAttribute]
public string get_Icon();
    [CompilerGeneratedAttribute]
public void set_Icon(string value);
    [CompilerGeneratedAttribute]
public string get_Identifier();
    [CompilerGeneratedAttribute]
public void set_Identifier(string value);
    [CompilerGeneratedAttribute]
public bool get_InstalledByMsi();
    [CompilerGeneratedAttribute]
public void set_InstalledByMsi(bool value);
    [CompilerGeneratedAttribute]
public bool get_IsExperimental();
    [CompilerGeneratedAttribute]
public void set_IsExperimental(bool value);
    [CompilerGeneratedAttribute]
public bool get_LicenseClickThrough();
    [CompilerGeneratedAttribute]
public void set_LicenseClickThrough(bool value);
    [CompilerGeneratedAttribute]
public string get_LicenseFormat();
    [CompilerGeneratedAttribute]
public void set_LicenseFormat(string value);
    [CompilerGeneratedAttribute]
public string get_LicenseRelativePath();
    [CompilerGeneratedAttribute]
public void set_LicenseRelativePath(string value);
    [CompilerGeneratedAttribute]
public CultureInfo get_Locale();
    [CompilerGeneratedAttribute]
public void set_Locale(CultureInfo value);
    [CompilerGeneratedAttribute]
public IList`1<XmlElement> get_LocalizedAdditionalElements();
    [CompilerGeneratedAttribute]
public void set_LocalizedAdditionalElements(IList`1<XmlElement> value);
    [CompilerGeneratedAttribute]
public string get_LocalizedDescription();
    [CompilerGeneratedAttribute]
public void set_LocalizedDescription(string value);
    [CompilerGeneratedAttribute]
public string get_LocalizedName();
    [CompilerGeneratedAttribute]
public void set_LocalizedName(string value);
    [CompilerGeneratedAttribute]
public Uri get_MoreInfoUrl();
    [CompilerGeneratedAttribute]
public void set_MoreInfoUrl(Uri value);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public InstallationPartialManifestType get_PartialManifestType();
    [CompilerGeneratedAttribute]
public void set_PartialManifestType(InstallationPartialManifestType value);
    [CompilerGeneratedAttribute]
public bool get_Preview();
    [CompilerGeneratedAttribute]
public void set_Preview(bool value);
    [CompilerGeneratedAttribute]
public string get_PreviewImage();
    [CompilerGeneratedAttribute]
public void set_PreviewImage(string value);
    [CompilerGeneratedAttribute]
public Uri get_ReleaseNotes();
    [CompilerGeneratedAttribute]
public void set_ReleaseNotes(Uri value);
    [CompilerGeneratedAttribute]
public string get_ReleaseNotesFormat();
    [CompilerGeneratedAttribute]
public void set_ReleaseNotesFormat(string value);
    [CompilerGeneratedAttribute]
public string get_ReleaseNotesRelativePath();
    [CompilerGeneratedAttribute]
public void set_ReleaseNotesRelativePath(string value);
    [CompilerGeneratedAttribute]
public bool get_RemoveOldPerUserExtension();
    [CompilerGeneratedAttribute]
public void set_RemoveOldPerUserExtension(bool value);
    [CompilerGeneratedAttribute]
public string get_ShortcutPath();
    [CompilerGeneratedAttribute]
public void set_ShortcutPath(string value);
    [CompilerGeneratedAttribute]
public VersionRange get_SupportedFrameworkVersionRange();
    [CompilerGeneratedAttribute]
public void set_SupportedFrameworkVersionRange(VersionRange value);
    [CompilerGeneratedAttribute]
public bool get_SystemComponent();
    [CompilerGeneratedAttribute]
public void set_SystemComponent(bool value);
    [CompilerGeneratedAttribute]
public IEnumerable`1<string> get_Tags();
    [CompilerGeneratedAttribute]
public void set_Tags(IEnumerable`1<string> value);
    [CompilerGeneratedAttribute]
public Version get_Version();
    [CompilerGeneratedAttribute]
public void set_Version(Version value);
    [CompilerGeneratedAttribute]
public string get_VsixManifestVersion();
    [CompilerGeneratedAttribute]
public void set_VsixManifestVersion(string value);
    [CompilerGeneratedAttribute]
public ExtensionType get_ExtensionType();
    [CompilerGeneratedAttribute]
public void set_ExtensionType(ExtensionType value);
}
[MessagePackObjectAttribute("False")]
public class Microsoft.VisualStudio.ExtensionEngine.Impl.Settings.MetadataStore.StorageModel.ExtensionInstallerInformationFromStorage : object {
    [CompilerGeneratedAttribute]
private IEnumerable`1<ExtensionInstallerActionFromStorage> <Actions>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<ExtensionReferenceFromStorage> <References>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Chip>k__BackingField;
    [KeyAttribute("0")]
public IEnumerable`1<ExtensionInstallerActionFromStorage> Actions { get; public set; }
    [KeyAttribute("1")]
public IEnumerable`1<ExtensionReferenceFromStorage> References { get; public set; }
    [KeyAttribute("2")]
public string Chip { get; public set; }
    public ExtensionInstallerInformationFromStorage(IExtensionInstallerInformation installerInformation);
    [CompilerGeneratedAttribute]
public IEnumerable`1<ExtensionInstallerActionFromStorage> get_Actions();
    [CompilerGeneratedAttribute]
public void set_Actions(IEnumerable`1<ExtensionInstallerActionFromStorage> value);
    [CompilerGeneratedAttribute]
public IEnumerable`1<ExtensionReferenceFromStorage> get_References();
    [CompilerGeneratedAttribute]
public void set_References(IEnumerable`1<ExtensionReferenceFromStorage> value);
    [CompilerGeneratedAttribute]
public string get_Chip();
    [CompilerGeneratedAttribute]
public void set_Chip(string value);
}
[MessagePackObjectAttribute("False")]
public class Microsoft.VisualStudio.ExtensionEngine.Impl.Settings.MetadataStore.StorageModel.ExtensionReferenceFromStorage : ExtensionRequirementFromStorage {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private Uri <MoreInfoUrl>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <CanAutoDownload>k__BackingField;
    [CompilerGeneratedAttribute]
private string <NestedExtensionPath>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsRequired>k__BackingField;
    [KeyAttribute("4")]
public string Name { get; public set; }
    [KeyAttribute("5")]
public Uri MoreInfoUrl { get; public set; }
    [KeyAttribute("6")]
public bool CanAutoDownload { get; public set; }
    [KeyAttribute("7")]
public string NestedExtensionPath { get; public set; }
    [KeyAttribute("8")]
public bool IsRequired { get; public set; }
    public ExtensionReferenceFromStorage(IExtensionReference reference);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public Uri get_MoreInfoUrl();
    [CompilerGeneratedAttribute]
public void set_MoreInfoUrl(Uri value);
    [CompilerGeneratedAttribute]
public bool get_CanAutoDownload();
    [CompilerGeneratedAttribute]
public void set_CanAutoDownload(bool value);
    [CompilerGeneratedAttribute]
public string get_NestedExtensionPath();
    [CompilerGeneratedAttribute]
public void set_NestedExtensionPath(string value);
    [CompilerGeneratedAttribute]
public bool get_IsRequired();
    [CompilerGeneratedAttribute]
public void set_IsRequired(bool value);
}
[MessagePackObjectAttribute("False")]
public class Microsoft.VisualStudio.ExtensionEngine.Impl.Settings.MetadataStore.StorageModel.ExtensionRequirementFromStorage : object {
    [CompilerGeneratedAttribute]
private string <Identifier>k__BackingField;
    [CompilerGeneratedAttribute]
private VersionRange <VersionRange>k__BackingField;
    [CompilerGeneratedAttribute]
private ProductArchitecture <ProductArchitecture>k__BackingField;
    [CompilerGeneratedAttribute]
private IDictionary`2<string, string> <Attributes>k__BackingField;
    [KeyAttribute("0")]
public string Identifier { get; public set; }
    [KeyAttribute("1")]
public VersionRange VersionRange { get; public set; }
    [KeyAttribute("2")]
public ProductArchitecture ProductArchitecture { get; public set; }
    [KeyAttribute("3")]
public IDictionary`2<string, string> Attributes { get; public set; }
    public ExtensionRequirementFromStorage(IExtensionRequirement req);
    [CompilerGeneratedAttribute]
public sealed virtual string get_Identifier();
    [CompilerGeneratedAttribute]
public void set_Identifier(string value);
    [CompilerGeneratedAttribute]
public sealed virtual VersionRange get_VersionRange();
    [CompilerGeneratedAttribute]
public void set_VersionRange(VersionRange value);
    [CompilerGeneratedAttribute]
public sealed virtual ProductArchitecture get_ProductArchitecture();
    [CompilerGeneratedAttribute]
public void set_ProductArchitecture(ProductArchitecture value);
    [CompilerGeneratedAttribute]
public sealed virtual IDictionary`2<string, string> get_Attributes();
    [CompilerGeneratedAttribute]
public void set_Attributes(IDictionary`2<string, string> value);
}
internal class Microsoft.VisualStudio.ExtensionEngine.Impl.Settings.MetadataStore.VersionFormatter : object {
    public static IMessagePackFormatter`1<Version> Instance;
    private static VersionFormatter();
    public sealed virtual Version Deserialize(MessagePackReader& reader, MessagePackSerializerOptions options);
    public sealed virtual void Serialize(MessagePackWriter& writer, Version value, MessagePackSerializerOptions options);
}
internal class Microsoft.VisualStudio.ExtensionEngine.Impl.Settings.MetadataStore.VersionRangeFormatter : object {
    public static IMessagePackFormatter`1<VersionRange> Instance;
    private static VersionRangeFormatter();
    public sealed virtual VersionRange Deserialize(MessagePackReader& reader, MessagePackSerializerOptions options);
    public sealed virtual void Serialize(MessagePackWriter& writer, VersionRange value, MessagePackSerializerOptions options);
}
internal class Microsoft.VisualStudio.ExtensionEngine.Impl.Settings.MetadataStore.XmlElementFormatter : object {
    public static IMessagePackFormatter`1<XmlElement> Instance;
    private static XmlElementFormatter();
    public sealed virtual XmlElement Deserialize(MessagePackReader& reader, MessagePackSerializerOptions options);
    public sealed virtual void Serialize(MessagePackWriter& writer, XmlElement value, MessagePackSerializerOptions options);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.VisualStudio.ExtensionEngine.Impl.Settings.SingleFileWatcher : object {
    public static int DefaultDebounceInterval;
    private TimeSpan debounceWaitInterval;
    private CancellationToken disposalToken;
    private JoinableTaskFactory joinableTaskFactory;
    private object syncRoot;
    private string targetDirectory;
    private string targetFile;
    private string targetFullPath;
    private bool debounceWaiting;
    private long lastWriteTime;
    private FileSystemWatcher watcher;
    [CompilerGeneratedAttribute]
private FileSystemEventHandler Changed;
    [CompilerGeneratedAttribute]
private FileSystemEventHandler targetFileCreated;
    [CompilerGeneratedAttribute]
private bool <TargetFileFound>k__BackingField;
    public bool TargetFileFound { get; private set; }
    public SingleFileWatcher(string targetDirectory, string targetFile, FileSystemEventHandler fileCreatedCallback, FileSystemEventHandler fileChangedCallbackAfterTargetFileCreated, CancellationToken disposalToken, JoinableTaskFactory joinableTaskFactory, FileSystemWatcher watcher, UInt32 debounceInterval);
    [CompilerGeneratedAttribute]
public void add_Changed(FileSystemEventHandler value);
    [CompilerGeneratedAttribute]
public void remove_Changed(FileSystemEventHandler value);
    [CompilerGeneratedAttribute]
private void add_targetFileCreated(FileSystemEventHandler value);
    [CompilerGeneratedAttribute]
private void remove_targetFileCreated(FileSystemEventHandler value);
    [CompilerGeneratedAttribute]
public bool get_TargetFileFound();
    [CompilerGeneratedAttribute]
private void set_TargetFileFound(bool value);
    public void DisableEvents();
    public sealed virtual void Dispose();
    public void EnableEvents();
    [AsyncStateMachineAttribute("Microsoft.VisualStudio.ExtensionEngine.Impl.Settings.SingleFileWatcher/<DebounceRapidUpdatesAsync>d__25")]
private Task DebounceRapidUpdatesAsync();
    private void FileSystemItemCreatedEvent(object sender, FileSystemEventArgs e);
    private void FindNextExistingPathToWatch();
    private void HandleFoundTargetFile();
    private void SendFileChangeIfNeeded(object sender, FileSystemEventArgs e);
    internal void ResetUpdateTime();
}
[MessagePackObjectAttribute("False")]
public class Microsoft.VisualStudio.ExtensionEngine.Impl.Settings.StorageModel.ExtensionInstallerActionFromStorage : object {
    [CompilerGeneratedAttribute]
private string <ActionTypeName>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<XmlElement> <AdditionalElements>k__BackingField;
    [CompilerGeneratedAttribute]
private IDictionary`2<string, string> <Attributes>k__BackingField;
    [CompilerGeneratedAttribute]
private string <RelativePath>k__BackingField;
    [KeyAttribute("0")]
public string ActionTypeName { get; public set; }
    [KeyAttribute("1")]
public IList`1<XmlElement> AdditionalElements { get; public set; }
    [KeyAttribute("2")]
public IDictionary`2<string, string> Attributes { get; public set; }
    [KeyAttribute("3")]
public string RelativePath { get; public set; }
    public ExtensionInstallerActionFromStorage(IExtensionInstallerAction action);
    [CompilerGeneratedAttribute]
public string get_ActionTypeName();
    [CompilerGeneratedAttribute]
public void set_ActionTypeName(string value);
    [CompilerGeneratedAttribute]
public IList`1<XmlElement> get_AdditionalElements();
    [CompilerGeneratedAttribute]
public void set_AdditionalElements(IList`1<XmlElement> value);
    [CompilerGeneratedAttribute]
public IDictionary`2<string, string> get_Attributes();
    [CompilerGeneratedAttribute]
public void set_Attributes(IDictionary`2<string, string> value);
    [CompilerGeneratedAttribute]
public string get_RelativePath();
    [CompilerGeneratedAttribute]
public void set_RelativePath(string value);
}
public class Microsoft.VisualStudio.ExtensionEngine.MessagePack.Formatters.Microsoft.VisualStudio.ExtensionEngine.Impl.Settings.MetadataStore.StorageModel.ExtensionContentFromStorageFormatter : object {
    public sealed virtual void Serialize(MessagePackWriter& writer, ExtensionContentFromStorage value, MessagePackSerializerOptions options);
    public sealed virtual ExtensionContentFromStorage Deserialize(MessagePackReader& reader, MessagePackSerializerOptions options);
}
public class Microsoft.VisualStudio.ExtensionEngine.MessagePack.Formatters.Microsoft.VisualStudio.ExtensionEngine.Impl.Settings.MetadataStore.StorageModel.ExtensionFromStorageImplFormatter : object {
    public sealed virtual void Serialize(MessagePackWriter& writer, ExtensionFromStorageImpl value, MessagePackSerializerOptions options);
    public sealed virtual ExtensionFromStorageImpl Deserialize(MessagePackReader& reader, MessagePackSerializerOptions options);
}
public class Microsoft.VisualStudio.ExtensionEngine.MessagePack.Formatters.Microsoft.VisualStudio.ExtensionEngine.Impl.Settings.MetadataStore.StorageModel.ExtensionHeaderFromStorageFormatter : object {
    public sealed virtual void Serialize(MessagePackWriter& writer, ExtensionHeaderFromStorage value, MessagePackSerializerOptions options);
    public sealed virtual ExtensionHeaderFromStorage Deserialize(MessagePackReader& reader, MessagePackSerializerOptions options);
}
public class Microsoft.VisualStudio.ExtensionEngine.MessagePack.Formatters.Microsoft.VisualStudio.ExtensionEngine.Impl.Settings.MetadataStore.StorageModel.ExtensionInstallerInformationFromStorageFormatter : object {
    public sealed virtual void Serialize(MessagePackWriter& writer, ExtensionInstallerInformationFromStorage value, MessagePackSerializerOptions options);
    public sealed virtual ExtensionInstallerInformationFromStorage Deserialize(MessagePackReader& reader, MessagePackSerializerOptions options);
}
public class Microsoft.VisualStudio.ExtensionEngine.MessagePack.Formatters.Microsoft.VisualStudio.ExtensionEngine.Impl.Settings.MetadataStore.StorageModel.ExtensionReferenceFromStorageFormatter : object {
    public sealed virtual void Serialize(MessagePackWriter& writer, ExtensionReferenceFromStorage value, MessagePackSerializerOptions options);
    public sealed virtual ExtensionReferenceFromStorage Deserialize(MessagePackReader& reader, MessagePackSerializerOptions options);
}
public class Microsoft.VisualStudio.ExtensionEngine.MessagePack.Formatters.Microsoft.VisualStudio.ExtensionEngine.Impl.Settings.MetadataStore.StorageModel.ExtensionRequirementFromStorageFormatter : object {
    public sealed virtual void Serialize(MessagePackWriter& writer, ExtensionRequirementFromStorage value, MessagePackSerializerOptions options);
    public sealed virtual ExtensionRequirementFromStorage Deserialize(MessagePackReader& reader, MessagePackSerializerOptions options);
}
public class Microsoft.VisualStudio.ExtensionEngine.MessagePack.Formatters.Microsoft.VisualStudio.ExtensionEngine.Impl.Settings.StorageModel.ExtensionInstallerActionFromStorageFormatter : object {
    public sealed virtual void Serialize(MessagePackWriter& writer, ExtensionInstallerActionFromStorage value, MessagePackSerializerOptions options);
    public sealed virtual ExtensionInstallerActionFromStorage Deserialize(MessagePackReader& reader, MessagePackSerializerOptions options);
}
public class Microsoft.VisualStudio.ExtensionEngine.MessagePack.Formatters.Microsoft.VisualStudio.ExtensionManager.AutoUpdateStateFormatter : object {
    public sealed virtual void Serialize(MessagePackWriter& writer, AutoUpdateState value, MessagePackSerializerOptions options);
    public sealed virtual AutoUpdateState Deserialize(MessagePackReader& reader, MessagePackSerializerOptions options);
}
public class Microsoft.VisualStudio.ExtensionEngine.MessagePack.Formatters.Microsoft.VisualStudio.ExtensionManager.EnabledStateFormatter : object {
    public sealed virtual void Serialize(MessagePackWriter& writer, EnabledState value, MessagePackSerializerOptions options);
    public sealed virtual EnabledState Deserialize(MessagePackReader& reader, MessagePackSerializerOptions options);
}
public class Microsoft.VisualStudio.ExtensionEngine.MessagePack.Formatters.Microsoft.VisualStudio.ExtensionManager.ExtensionTypeFormatter : object {
    public sealed virtual void Serialize(MessagePackWriter& writer, ExtensionType value, MessagePackSerializerOptions options);
    public sealed virtual ExtensionType Deserialize(MessagePackReader& reader, MessagePackSerializerOptions options);
}
public class Microsoft.VisualStudio.ExtensionEngine.MessagePack.Formatters.Microsoft.VisualStudio.ExtensionManager.InstallationPartialManifestTypeFormatter : object {
    public sealed virtual void Serialize(MessagePackWriter& writer, InstallationPartialManifestType value, MessagePackSerializerOptions options);
    public sealed virtual InstallationPartialManifestType Deserialize(MessagePackReader& reader, MessagePackSerializerOptions options);
}
public class Microsoft.VisualStudio.ExtensionEngine.MessagePack.Formatters.Microsoft.VisualStudio.ExtensionManager.ProductArchitectureFormatter : object {
    public sealed virtual void Serialize(MessagePackWriter& writer, ProductArchitecture value, MessagePackSerializerOptions options);
    public sealed virtual ProductArchitecture Deserialize(MessagePackReader& reader, MessagePackSerializerOptions options);
}
public class Microsoft.VisualStudio.ExtensionEngine.MessagePack.Formatters.Microsoft.VisualStudio.ExtensionManager.VsixTypeFormatter : object {
    public sealed virtual void Serialize(MessagePackWriter& writer, VsixType value, MessagePackSerializerOptions options);
    public sealed virtual VsixType Deserialize(MessagePackReader& reader, MessagePackSerializerOptions options);
}
public class Microsoft.VisualStudio.ExtensionEngine.MessagePack.Resolvers.GeneratedResolver : object {
    public static IFormatterResolver Instance;
    private static GeneratedResolver();
    public sealed virtual IMessagePackFormatter`1<T> GetFormatter();
}
internal static class Microsoft.VisualStudio.ExtensionEngine.MessagePack.Resolvers.GeneratedResolverGetFormatterHelper : object {
    private static Dictionary`2<Type, int> lookup;
    private static GeneratedResolverGetFormatterHelper();
    internal static object GetFormatter(Type t);
}
[GeneratedCodeAttribute("xsd", "4.6.1055.0")]
[DebuggerStepThroughAttribute]
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
public class Microsoft.VisualStudio.ExtensionManager.Action : object {
    private XmlElement[] anyField;
    private string typeField;
    private string pathField;
    private XmlAttribute[] anyAttrField;
    [XmlAnyElementAttribute]
public XmlElement[] Any { get; public set; }
    [XmlAttributeAttribute]
public string Type { get; public set; }
    [XmlAttributeAttribute]
public string Path { get; public set; }
    [XmlAnyAttributeAttribute]
public XmlAttribute[] AnyAttr { get; public set; }
    public XmlElement[] get_Any();
    public void set_Any(XmlElement[] value);
    public string get_Type();
    public void set_Type(string value);
    public string get_Path();
    public void set_Path(string value);
    public XmlAttribute[] get_AnyAttr();
    public void set_AnyAttr(XmlAttribute[] value);
}
[GeneratedCodeAttribute("xsd", "4.6.81.0")]
[DebuggerStepThroughAttribute]
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
public class Microsoft.VisualStudio.ExtensionManager.Asset : object {
    private XmlElement[] anyField;
    private string typeField;
    private string pathField;
    private XmlAttribute[] anyAttrField;
    [XmlAnyElementAttribute]
public XmlElement[] Any { get; public set; }
    [XmlAttributeAttribute]
public string Type { get; public set; }
    [XmlAttributeAttribute]
public string Path { get; public set; }
    [XmlAnyAttributeAttribute]
public XmlAttribute[] AnyAttr { get; public set; }
    public XmlElement[] get_Any();
    public void set_Any(XmlElement[] value);
    public string get_Type();
    public void set_Type(string value);
    public string get_Path();
    public void set_Path(string value);
    public XmlAttribute[] get_AnyAttr();
    public void set_AnyAttr(XmlAttribute[] value);
}
public class Microsoft.VisualStudio.ExtensionManager.AtomExtensionFeed : SyndicationFeed {
    protected virtual SyndicationItem CreateItem();
}
public class Microsoft.VisualStudio.ExtensionManager.AtomExtensionItem : SyndicationItem {
    private AtomVsixMetadata _itemData;
    public AtomVsixMetadata ItemData { get; private set; }
    public AtomVsixMetadata get_ItemData();
    private void set_ItemData(AtomVsixMetadata value);
    protected virtual bool TryParseElement(XmlReader reader, string version);
    protected virtual void WriteElementExtensions(XmlWriter writer, string version);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.VisualStudio.ExtensionManager.AtomOnlineExtension : BaseOnlineExtensionWithPropertyChange {
    private AtomExtensionItem syndicationItem;
    private Uri atomFileUri;
    private bool displayIfNotPresent;
    private bool isVSUpdate;
    public IEnumerable`1<string> Categories { get; }
    public bool DisplayIfNotPresent { get; }
    public bool IsVSUpdate { get; }
    public AtomOnlineExtension(AtomExtensionItem atomExtensionItem, Uri atomFileUri);
    private static bool GetBooleanAttributeValue(AtomExtensionItem item, string attributeName);
    private static string GetStringAttributeValue(AtomExtensionItem item, string attributeName);
    private string GetUriForRelationship(string relationshipType);
    private string GetAbsoluteUriString(string uri);
    private string GetAbsoluteUriString(Uri uri);
    public IEnumerable`1<string> get_Categories();
    public bool get_DisplayIfNotPresent();
    public bool get_IsVSUpdate();
}
public class Microsoft.VisualStudio.ExtensionManager.AtomRepository : BaseExtensionRepository {
    private static XNamespace feedNamespace;
    private static long MaxFeedCharacters;
    private static string VSVersionHeader;
    private object taskCreationLock;
    private IEnumerable`1<IOnlineExtensionUpdate> updates;
    private Task`1<IList`1<AtomOnlineExtension>> webRequestTask;
    private Nullable`1<bool> _supportsUpdatesForExtensionsInstalledByMsi;
    private Task`1<IList`1<AtomOnlineExtension>> WebRequestTask { get; }
    public bool SupportsUpdatesForExtensionsInstalledByMsi { get; }
    public bool VisibleAsOnline { get; }
    public AtomRepository(IExtensionRepositoryConfig repositoryConfig);
    private static AtomRepository();
    public virtual void ResetStateForGetUpdates();
    protected virtual IEnumerable`1<IOnlineExtension> SearchImpl(string searchTerms);
    protected virtual IEnumerable`1<IOnlineExtensionUpdate> GetUpdatesImpl(IEnumerable`1<IInstalledExtension> extensionsToCheck, bool forAutoupdate);
    protected virtual Task`1<IEnumerable`1<IOnlineExtensionUpdate>> GetUpdatesImplAsync(IEnumerable`1<IInstalledExtension> extensionsToCheck, bool forAutoupdate);
    private bool IsOSVersionCompatible(AtomOnlineExtension atomEntry);
    private IList`1<AtomOnlineExtension> LoadFeed();
    private AtomExtensionFeed LoadOOBFeed();
    private AtomExtensionFeed LoadSyndicationFeed(XDocument document);
    private Task`1<IList`1<AtomOnlineExtension>> get_WebRequestTask();
    public IList`1<AtomOnlineExtension> GetExtensions();
    public virtual bool get_SupportsUpdatesForExtensionsInstalledByMsi();
    public virtual bool get_VisibleAsOnline();
    private bool IsExtensionApplicableToCurrentSKU(AtomOnlineExtension atomEntry);
    public virtual IEnumerable`1<T> GetExtensions(List`1<string> extensionIds, int lcid, bool forAutoupdate);
    private object CreateTelemetryActivity(string eventId);
    private void AddEvent(object telemetryActivityObject, string propertyName, object value);
    private void PostTelemetry(object telemetryActivityObject);
}
[ExportAttribute("Microsoft.VisualStudio.ExtensionManager.IExtensionRepositoryFactory")]
[ExportMetadataAttribute("RepositoryProtocol", "Mono.Cecil.CustomAttributeArgument")]
public class Microsoft.VisualStudio.ExtensionManager.AtomRepositoryFactory : object {
    public sealed virtual IExtensionRepository CreateRepository(IExtensionRepositoryConfig serverConfig, Func`3<string, Func`1<Task>, Task> proxyResolver);
    public sealed virtual IExtensionRepository CreateRepository(IExtensionRepositoryConfig serverConfig);
    public sealed virtual bool IsProtocolMatch(WebResponse response, Stream responseStream);
}
[XmlRootAttribute("Installations")]
public class Microsoft.VisualStudio.ExtensionManager.AtomVsixInstallationItem : object {
    [CompilerGeneratedAttribute]
private string <Identifier>k__BackingField;
    [CompilerGeneratedAttribute]
private string <VersionRange>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ProductArchitecture>k__BackingField;
    [XmlElementAttribute]
public string Identifier { get; public set; }
    [XmlElementAttribute]
public string VersionRange { get; public set; }
    [XmlElementAttribute]
public string ProductArchitecture { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Identifier();
    [CompilerGeneratedAttribute]
public void set_Identifier(string value);
    [CompilerGeneratedAttribute]
public string get_VersionRange();
    [CompilerGeneratedAttribute]
public void set_VersionRange(string value);
    [CompilerGeneratedAttribute]
public string get_ProductArchitecture();
    [CompilerGeneratedAttribute]
public void set_ProductArchitecture(string value);
}
[XmlRootAttribute("Vsix")]
public class Microsoft.VisualStudio.ExtensionManager.AtomVsixMetadata : object {
    public static string LocalName;
    public static string Namespace;
    public static string InstallationsName;
    [CompilerGeneratedAttribute]
private string <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Version>k__BackingField;
    [CompilerGeneratedAttribute]
private string <References>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<decimal> <Rating>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<UInt32> <RatingCount>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<UInt32> <DownloadCount>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<string> <PackedExtensionIDs>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<AtomVsixInstallationItem> <Installations>k__BackingField;
    [XmlElementAttribute]
public string Id { get; public set; }
    [XmlElementAttribute]
public string Version { get; public set; }
    [XmlElementAttribute]
public string References { get; public set; }
    [XmlElementAttribute]
public Nullable`1<decimal> Rating { get; public set; }
    [XmlElementAttribute]
public Nullable`1<UInt32> RatingCount { get; public set; }
    [XmlElementAttribute]
public Nullable`1<UInt32> DownloadCount { get; public set; }
    [XmlElementAttribute]
public List`1<string> PackedExtensionIDs { get; public set; }
    [XmlElementAttribute]
public List`1<AtomVsixInstallationItem> Installations { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Id();
    [CompilerGeneratedAttribute]
public void set_Id(string value);
    [CompilerGeneratedAttribute]
public string get_Version();
    [CompilerGeneratedAttribute]
public void set_Version(string value);
    [CompilerGeneratedAttribute]
public string get_References();
    [CompilerGeneratedAttribute]
public void set_References(string value);
    [CompilerGeneratedAttribute]
public Nullable`1<decimal> get_Rating();
    [CompilerGeneratedAttribute]
public void set_Rating(Nullable`1<decimal> value);
    [CompilerGeneratedAttribute]
public Nullable`1<UInt32> get_RatingCount();
    [CompilerGeneratedAttribute]
public void set_RatingCount(Nullable`1<UInt32> value);
    [CompilerGeneratedAttribute]
public Nullable`1<UInt32> get_DownloadCount();
    [CompilerGeneratedAttribute]
public void set_DownloadCount(Nullable`1<UInt32> value);
    [CompilerGeneratedAttribute]
public List`1<string> get_PackedExtensionIDs();
    [CompilerGeneratedAttribute]
public void set_PackedExtensionIDs(List`1<string> value);
    [CompilerGeneratedAttribute]
public List`1<AtomVsixInstallationItem> get_Installations();
    [CompilerGeneratedAttribute]
public void set_Installations(List`1<AtomVsixInstallationItem> value);
}
public class Microsoft.VisualStudio.ExtensionManager.AtomVsixMetadataSerializer : XmlSerializer {
    public virtual bool CanDeserialize(XmlReader xmlReader);
    protected virtual XmlSerializationReader CreateReader();
    protected virtual XmlSerializationWriter CreateWriter();
    protected virtual object Deserialize(XmlSerializationReader reader);
    protected virtual void Serialize(object objectToSerialize, XmlSerializationWriter writer);
}
public class Microsoft.VisualStudio.ExtensionManager.AutoUpdateExtensionSettings : object {
    [DataMemberAttribute]
public bool ShouldAutoUpdate;
}
public class Microsoft.VisualStudio.ExtensionManager.AutoUpdateOutputDataImpl : object {
    [CompilerGeneratedAttribute]
private bool <AutoUpdateExtensionsEnabled>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<IAutoUpdateResult> <AutoUpdateResults>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<IInstalledExtension> <UpdatedExtensions>k__BackingField;
    public bool AutoUpdateExtensionsEnabled { get; }
    public IEnumerable`1<IAutoUpdateResult> AutoUpdateResults { get; }
    public IEnumerable`1<IInstalledExtension> UpdatedExtensions { get; }
    public AutoUpdateOutputDataImpl(bool autoUpdateExtensionsEnabled, IEnumerable`1<IAutoUpdateResult> autoUpdateResults, IEnumerable`1<IInstalledExtension> updatedExtensions);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_AutoUpdateExtensionsEnabled();
    [CompilerGeneratedAttribute]
public sealed virtual IEnumerable`1<IAutoUpdateResult> get_AutoUpdateResults();
    [CompilerGeneratedAttribute]
public sealed virtual IEnumerable`1<IInstalledExtension> get_UpdatedExtensions();
}
public class Microsoft.VisualStudio.ExtensionManager.AutoUpdateResultImpl : object {
    [CompilerGeneratedAttribute]
private string <Identifier>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private Version <Version>k__BackingField;
    [CompilerGeneratedAttribute]
private Guid <RepositoryId>k__BackingField;
    [CompilerGeneratedAttribute]
private ExtensionUpdate <Source>k__BackingField;
    [CompilerGeneratedAttribute]
private AutoUpdateProgress <State>k__BackingField;
    [CompilerGeneratedAttribute]
private Exception <Error>k__BackingField;
    public string Identifier { get; }
    public string Name { get; }
    public Version Version { get; }
    public Guid RepositoryId { get; }
    public ExtensionUpdate Source { get; }
    public AutoUpdateProgress State { get; public set; }
    public Exception Error { get; public set; }
    public AutoUpdateResultImpl(ExtensionUpdate source, AutoUpdateProgress state, Exception error);
    public AutoUpdateResultImpl(ExtensionUpdate source, string identifier, string name, Version version, Guid repositoryId, AutoUpdateProgress state, Exception error);
    [CompilerGeneratedAttribute]
public sealed virtual string get_Identifier();
    [CompilerGeneratedAttribute]
public sealed virtual string get_Name();
    [CompilerGeneratedAttribute]
public sealed virtual Version get_Version();
    [CompilerGeneratedAttribute]
public Guid get_RepositoryId();
    [CompilerGeneratedAttribute]
public sealed virtual ExtensionUpdate get_Source();
    [CompilerGeneratedAttribute]
public sealed virtual AutoUpdateProgress get_State();
    [CompilerGeneratedAttribute]
public void set_State(AutoUpdateProgress value);
    [CompilerGeneratedAttribute]
public sealed virtual Exception get_Error();
    [CompilerGeneratedAttribute]
public void set_Error(Exception value);
}
public abstract class Microsoft.VisualStudio.ExtensionManager.BaseExtensionRepository : object {
    private SendOrPostCallback onDownloadProgressChangedDelegate;
    private SendOrPostCallback onDownloadCompletedDelegate;
    private HybridDictionary userStateToLifetime;
    private Dictionary`2<Guid, DownloadJob> jobTable;
    private string unresolvedRepositoryServiceUri;
    private string resolvedRepositoryServiceUri;
    private object resolvedRepsositoryServiceUriSyncObject;
    [CompilerGeneratedAttribute]
private EventHandler`1<DownloadProgressChangedEventArgs> DownloadProgressChanged;
    [CompilerGeneratedAttribute]
private EventHandler`1<DownloadCompletedEventArgs> DownloadCompleted;
    [CompilerGeneratedAttribute]
private IExtensionRepositoryConfig <RepositoryConfig>k__BackingField;
    [CompilerGeneratedAttribute]
private IExtensionScheduleLists <ExtensionScheduleLists>k__BackingField;
    protected IExtensionRepositoryConfig RepositoryConfig { get; private set; }
    public IExtensionScheduleLists ExtensionScheduleLists { get; private set; }
    public string LocDisplayName { get; }
    public bool SupportsUpdatesForExtensionsInstalledByMsi { get; }
    public bool VisibleAsOnline { get; }
    public Guid RepositoryId { get; }
    public ILogger RepositoryLogger { get; }
    public BaseExtensionRepository(IExtensionRepositoryConfig repositoryConfig);
    public BaseExtensionRepository(string repositoryUri);
    [CompilerGeneratedAttribute]
public sealed virtual void add_DownloadProgressChanged(EventHandler`1<DownloadProgressChangedEventArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_DownloadProgressChanged(EventHandler`1<DownloadProgressChangedEventArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_DownloadCompleted(EventHandler`1<DownloadCompletedEventArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_DownloadCompleted(EventHandler`1<DownloadCompletedEventArgs> value);
    public sealed virtual string GetResolvedRepositoryServiceUri(Func`2<Uri, Uri> resolver);
    private void InitializeDelegates();
    private void DownloadComplete(object e);
    private void OnDownloadOperationCompleted(DownloadCompletedEventArgs args);
    private void ReportProgress(object e);
    private void OnDownloadProgressChanged(DownloadProgressChangedEventArgs args);
    [CompilerGeneratedAttribute]
protected IExtensionRepositoryConfig get_RepositoryConfig();
    [CompilerGeneratedAttribute]
private void set_RepositoryConfig(IExtensionRepositoryConfig value);
    [CompilerGeneratedAttribute]
public sealed virtual IExtensionScheduleLists get_ExtensionScheduleLists();
    [CompilerGeneratedAttribute]
private void set_ExtensionScheduleLists(IExtensionScheduleLists value);
    public virtual string get_LocDisplayName();
    public virtual bool get_SupportsUpdatesForExtensionsInstalledByMsi();
    public virtual bool get_VisibleAsOnline();
    public sealed virtual Guid get_RepositoryId();
    public sealed virtual ILogger get_RepositoryLogger();
    public sealed virtual IEnumerable`1<IOnlineExtension> Search(string searchTerms);
    public virtual void ResetStateForGetUpdates();
    public sealed virtual IEnumerable`1<IOnlineExtensionUpdate> GetUpdates(IEnumerable`1<IInstalledExtension> extensionsToCheck, bool forAutoupdate);
    [AsyncStateMachineAttribute("Microsoft.VisualStudio.ExtensionManager.BaseExtensionRepository/<GetUpdatesAsync>d__43")]
public sealed virtual Task`1<IEnumerable`1<IOnlineExtensionUpdate>> GetUpdatesAsync(IEnumerable`1<IInstalledExtension> extensionsToCheck, bool forAutoupdate);
    protected virtual IExtensionManagerWebClient CreateNewWebClient();
    protected virtual IInstallableExtension CreateNewExtension(string localPath);
    public sealed virtual IInstallableExtension Download(IRepositoryEntry extensionDetails);
    public sealed virtual Guid DownloadAsync(IRepositoryEntry extensionDetails);
    public sealed virtual void DownloadAsyncCancel(Guid jobId);
    protected virtual void MakeWebCall(string webCallUrl, Action webCall);
    private void StartDownloadFileAsync(object jobObject);
    private void WebClient_DownloadProgressChanged(object sender, DownloadProgressChangedEventArgs e);
    private void WebClient_DownloadFileCompleted(object sender, AsyncCompletedEventArgs e);
    private static AsyncOperation TryGetAndRemoveOperation(Guid jobId, HybridDictionary guidToAsyncOperationDictionary);
    protected abstract virtual IEnumerable`1<IOnlineExtension> SearchImpl(string searchTerms);
    protected abstract virtual IEnumerable`1<IOnlineExtensionUpdate> GetUpdatesImpl(IEnumerable`1<IInstalledExtension> extensionsToCheck, bool forAutoupdate);
    protected abstract virtual Task`1<IEnumerable`1<IOnlineExtensionUpdate>> GetUpdatesImplAsync(IEnumerable`1<IInstalledExtension> extensionsToCheck, bool forAutoupdate);
    public abstract virtual IEnumerable`1<T> GetExtensions(List`1<string> extensionIds, int lcid, bool forAutoupdate);
    [CompilerGeneratedAttribute]
private bool <GetUpdates>b__42_0(IInstalledExtension extension);
    [CompilerGeneratedAttribute]
private bool <GetUpdatesAsync>b__43_0(IInstalledExtension extension);
}
internal class Microsoft.VisualStudio.ExtensionManager.BaseOnlineExtensionUpdate : object {
    [CompilerGeneratedAttribute]
private IInstalledExtension <InstalledExtension>k__BackingField;
    [CompilerGeneratedAttribute]
private IOnlineExtension <UpdateEntry>k__BackingField;
    [CompilerGeneratedAttribute]
private IExtensionScheduleLists <ExtensionScheduleLists>k__BackingField;
    private bool isSelected;
    [CompilerGeneratedAttribute]
private PropertyChangedEventHandler PropertyChanged;
    public IInstalledExtension InstalledExtension { get; private set; }
    public IOnlineExtension UpdateEntry { get; private set; }
    public bool UpdateIsInstalled { get; }
    public IExtensionScheduleLists ExtensionScheduleLists { get; private set; }
    public bool IsScheduled { get; }
    public string Description { get; }
    public string Id { get; }
    public bool IsSelected { get; public set; }
    public string Name { get; }
    public float Priority { get; }
    public BaseOnlineExtensionUpdate(IInstalledExtension installedExtension, IOnlineExtension updateEntry, IExtensionScheduleLists extensionScheduleLists);
    [CompilerGeneratedAttribute]
public sealed virtual IInstalledExtension get_InstalledExtension();
    [CompilerGeneratedAttribute]
private void set_InstalledExtension(IInstalledExtension value);
    [CompilerGeneratedAttribute]
public sealed virtual IOnlineExtension get_UpdateEntry();
    [CompilerGeneratedAttribute]
private void set_UpdateEntry(IOnlineExtension value);
    public sealed virtual void RefreshUpdateStatus();
    public sealed virtual bool get_UpdateIsInstalled();
    [CompilerGeneratedAttribute]
public sealed virtual IExtensionScheduleLists get_ExtensionScheduleLists();
    [CompilerGeneratedAttribute]
private void set_ExtensionScheduleLists(IExtensionScheduleLists value);
    public sealed virtual bool get_IsScheduled();
    public sealed virtual void RefreshScheduledStatus();
    public sealed virtual string get_Description();
    public sealed virtual string get_Id();
    public sealed virtual bool get_IsSelected();
    public sealed virtual void set_IsSelected(bool value);
    public sealed virtual string get_Name();
    public sealed virtual float get_Priority();
    [CompilerGeneratedAttribute]
public sealed virtual void add_PropertyChanged(PropertyChangedEventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_PropertyChanged(PropertyChangedEventHandler value);
    private void OnNotifyPropertyChanged(string propertyName);
}
public abstract class Microsoft.VisualStudio.ExtensionManager.BaseOnlineExtensionWithPropertyChange : OnlineExtensionBase {
    private bool isSelected;
    private string installedBy;
    private string vsixID;
    private string vsixVersion;
    private DateTime lastModified;
    private string author;
    private string referralUrl;
    private Version _nonNullVsixVersion;
    private string description;
    private int downloadCount;
    private string name;
    private string moreInfoURL;
    private string releaseNotes;
    private string onlinePreviewImage;
    private string icon;
    private string downloadUrl;
    private string downloadUpdateUrl;
    private string vsixReferences;
    private string setupCommandLine;
    private string applicableSKUs;
    private bool isRatingVisible;
    private bool isReportLinkVisible;
    private double rating;
    private int ratingsCount;
    [CompilerGeneratedAttribute]
private string <Type>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ProjectTypeFriendly>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <SupportsCodeSeparation>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <SupportsMasterPage>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DefaultName>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<string> <PackedExtensionsVsixIDs>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<string> <Flags>k__BackingField;
    private string reportAbuseUrl;
    private VersionRange osVersionRange;
    [CompilerGeneratedAttribute]
private IEnumerable`1<IOnlineExtension> <PackedExtensions>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Version>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTime <PublishedDate>k__BackingField;
    [CompilerGeneratedAttribute]
private string <PublisherDomain>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsPublisherDomainVerified>k__BackingField;
    [CompilerGeneratedAttribute]
private string <MarkdownUrl>k__BackingField;
    [CompilerGeneratedAttribute]
private string <MarkdownAssetBaseURL>k__BackingField;
    [CompilerGeneratedAttribute]
private Func`2<CancellationToken, Task`1<string>> <FetchMarkdownDescriptionAsync>k__BackingField;
    public bool IsSelected { get; public set; }
    public bool IsScheduled { get; }
    public IExtensionScheduleLists ExtensionScheduleLists { get; }
    public bool ExtensionIsInstalled { get; }
    public bool HasParentExtensions { get; }
    public string InstalledBy { get; }
    public string VsixID { get; public set; }
    public string VsixVersion { get; public set; }
    public DateTime LastModified { get; public set; }
    public string Author { get; public set; }
    public string ReferralUrl { get; public set; }
    public bool IsReferenceLink { get; }
    public Version NonNullVsixVersion { get; }
    public string Description { get; public set; }
    public int DownloadCount { get; public set; }
    public string Name { get; public set; }
    public string MoreInfoURL { get; public set; }
    public string ReleaseNotes { get; public set; }
    public string OnlinePreviewImage { get; public set; }
    public object PreviewImageNonNull { get; }
    public string Icon { get; public set; }
    public object IconNonNull { get; }
    public float Priority { get; }
    public string DownloadUrl { get; public set; }
    public string DownloadUpdateUrl { get; public set; }
    public string VsixReferences { get; public set; }
    public string SetupCommandLine { get; public set; }
    public string ApplicableSKUs { get; public set; }
    public bool IsRatingVisible { get; public set; }
    public bool IsReportLinkVisible { get; public set; }
    public bool IsMoreInfoLinkVisible { get; }
    public double Rating { get; public set; }
    public string RatingToolTip { get; }
    public int RatingsCount { get; public set; }
    public string Type { get; public set; }
    public string ProjectTypeFriendly { get; public set; }
    public bool SupportsCodeSeparation { get; public set; }
    public bool SupportsMasterPage { get; public set; }
    public string DefaultName { get; public set; }
    public List`1<string> PackedExtensionsVsixIDs { get; public set; }
    public List`1<string> Flags { get; public set; }
    public string RatingsCountFormatted { get; }
    public string ReportAbuseUrl { get; public set; }
    public VersionRange OSVersionRange { get; public set; }
    public bool IsReleaseNotesLinkVisible { get; }
    public bool IsBadgeVisible { get; }
    public IEnumerable`1<IOnlineExtension> PackedExtensions { get; public set; }
    public string Version { get; public set; }
    public DateTime PublishedDate { get; public set; }
    public string PublisherDomain { get; public set; }
    public bool IsPublisherDomainVerified { get; public set; }
    public string MarkdownUrl { get; public set; }
    public string MarkdownAssetBaseURL { get; public set; }
    public Func`2<CancellationToken, Task`1<string>> FetchMarkdownDescriptionAsync { get; public set; }
    public virtual bool get_IsSelected();
    public virtual void set_IsSelected(bool value);
    public virtual bool get_IsScheduled();
    public virtual void RefreshScheduledStatus();
    public virtual IExtensionScheduleLists get_ExtensionScheduleLists();
    public virtual void RefreshInstalledStatus();
    public virtual bool get_ExtensionIsInstalled();
    public virtual bool get_HasParentExtensions();
    public virtual string get_InstalledBy();
    public virtual string get_VsixID();
    public virtual void set_VsixID(string value);
    public virtual string get_VsixVersion();
    public virtual void set_VsixVersion(string value);
    public virtual DateTime get_LastModified();
    public virtual void set_LastModified(DateTime value);
    public virtual string get_Author();
    public virtual void set_Author(string value);
    public virtual string get_ReferralUrl();
    public virtual void set_ReferralUrl(string value);
    public virtual bool get_IsReferenceLink();
    public virtual Version get_NonNullVsixVersion();
    public virtual string get_Description();
    public virtual void set_Description(string value);
    public virtual int get_DownloadCount();
    public virtual void set_DownloadCount(int value);
    public virtual string get_Name();
    public virtual void set_Name(string value);
    public virtual string get_MoreInfoURL();
    public virtual void set_MoreInfoURL(string value);
    public virtual string get_ReleaseNotes();
    public virtual void set_ReleaseNotes(string value);
    public virtual string get_OnlinePreviewImage();
    public virtual void set_OnlinePreviewImage(string value);
    public virtual object get_PreviewImageNonNull();
    public virtual string get_Icon();
    public virtual void set_Icon(string value);
    public virtual object get_IconNonNull();
    public virtual float get_Priority();
    public virtual string get_DownloadUrl();
    public virtual void set_DownloadUrl(string value);
    public virtual string get_DownloadUpdateUrl();
    public virtual void set_DownloadUpdateUrl(string value);
    public virtual string get_VsixReferences();
    public virtual void set_VsixReferences(string value);
    public string get_SetupCommandLine();
    public void set_SetupCommandLine(string value);
    public string get_ApplicableSKUs();
    public void set_ApplicableSKUs(string value);
    public bool get_IsRatingVisible();
    public void set_IsRatingVisible(bool value);
    public bool get_IsReportLinkVisible();
    public void set_IsReportLinkVisible(bool value);
    public virtual bool get_IsMoreInfoLinkVisible();
    public virtual double get_Rating();
    public virtual void set_Rating(double value);
    public virtual string get_RatingToolTip();
    public virtual int get_RatingsCount();
    public virtual void set_RatingsCount(int value);
    [CompilerGeneratedAttribute]
public virtual string get_Type();
    [CompilerGeneratedAttribute]
public virtual void set_Type(string value);
    [CompilerGeneratedAttribute]
public virtual string get_ProjectTypeFriendly();
    [CompilerGeneratedAttribute]
public virtual void set_ProjectTypeFriendly(string value);
    [CompilerGeneratedAttribute]
public virtual bool get_SupportsCodeSeparation();
    [CompilerGeneratedAttribute]
public virtual void set_SupportsCodeSeparation(bool value);
    [CompilerGeneratedAttribute]
public virtual bool get_SupportsMasterPage();
    [CompilerGeneratedAttribute]
public virtual void set_SupportsMasterPage(bool value);
    [CompilerGeneratedAttribute]
public virtual string get_DefaultName();
    [CompilerGeneratedAttribute]
public virtual void set_DefaultName(string value);
    [CompilerGeneratedAttribute]
public virtual List`1<string> get_PackedExtensionsVsixIDs();
    [CompilerGeneratedAttribute]
public virtual void set_PackedExtensionsVsixIDs(List`1<string> value);
    [CompilerGeneratedAttribute]
public virtual List`1<string> get_Flags();
    [CompilerGeneratedAttribute]
public virtual void set_Flags(List`1<string> value);
    public virtual string get_RatingsCountFormatted();
    public virtual string get_ReportAbuseUrl();
    public virtual void set_ReportAbuseUrl(string value);
    public VersionRange get_OSVersionRange();
    public void set_OSVersionRange(VersionRange value);
    public virtual bool get_IsReleaseNotesLinkVisible();
    public virtual bool get_IsBadgeVisible();
    [CompilerGeneratedAttribute]
public sealed virtual IEnumerable`1<IOnlineExtension> get_PackedExtensions();
    [CompilerGeneratedAttribute]
public sealed virtual void set_PackedExtensions(IEnumerable`1<IOnlineExtension> value);
    [CompilerGeneratedAttribute]
public virtual string get_Version();
    [CompilerGeneratedAttribute]
public virtual void set_Version(string value);
    [CompilerGeneratedAttribute]
public virtual DateTime get_PublishedDate();
    [CompilerGeneratedAttribute]
public virtual void set_PublishedDate(DateTime value);
    [CompilerGeneratedAttribute]
public virtual string get_PublisherDomain();
    [CompilerGeneratedAttribute]
public virtual void set_PublisherDomain(string value);
    [CompilerGeneratedAttribute]
public virtual bool get_IsPublisherDomainVerified();
    [CompilerGeneratedAttribute]
public virtual void set_IsPublisherDomainVerified(bool value);
    [CompilerGeneratedAttribute]
public virtual string get_MarkdownUrl();
    [CompilerGeneratedAttribute]
public virtual void set_MarkdownUrl(string value);
    [CompilerGeneratedAttribute]
public virtual string get_MarkdownAssetBaseURL();
    [CompilerGeneratedAttribute]
public virtual void set_MarkdownAssetBaseURL(string value);
    [CompilerGeneratedAttribute]
public virtual Func`2<CancellationToken, Task`1<string>> get_FetchMarkdownDescriptionAsync();
    [CompilerGeneratedAttribute]
public virtual void set_FetchMarkdownDescriptionAsync(Func`2<CancellationToken, Task`1<string>> value);
}
[ExtensionAttribute]
internal static class Microsoft.VisualStudio.ExtensionManager.BinaryHelper : object {
    [ExtensionAttribute]
internal static void WriteNullableString(BinaryWriter writer, string s);
    [ExtensionAttribute]
internal static string ReadNullableString(BinaryReader reader);
    [ExtensionAttribute]
internal static void Write(BinaryWriter writer, Uri uri);
    [ExtensionAttribute]
internal static Uri ReadUri(BinaryReader reader);
    [ExtensionAttribute]
internal static void Write(BinaryWriter writer, Version version);
    [ExtensionAttribute]
internal static Version ReadVersion(BinaryReader reader);
    [ExtensionAttribute]
internal static void Write(BinaryWriter writer, VersionRange versionRange);
    [ExtensionAttribute]
internal static VersionRange ReadVersionRange(BinaryReader reader);
    [ExtensionAttribute]
internal static void Write(BinaryWriter writer, ProductArchitecture productArchitecture);
    [ExtensionAttribute]
internal static ProductArchitecture ReadProductArchitecture(BinaryReader reader);
    [ExtensionAttribute]
internal static void Write(BinaryWriter writer, IEnumerable`1<string> strings);
    [ExtensionAttribute]
internal static IEnumerable`1<string> ReadStringList(BinaryReader reader);
    [ExtensionAttribute]
internal static void Write(BinaryWriter writer, IList`1<XmlElement> list);
    [ExtensionAttribute]
internal static IList`1<XmlElement> ReadXmlElementList(BinaryReader reader);
    [ExtensionAttribute]
internal static void Write(BinaryWriter writer, IDictionary`2<string, string> dictionary);
    [ExtensionAttribute]
internal static IDictionary`2<string, string> ReadStringStringDictionary(BinaryReader reader);
}
internal static class Microsoft.VisualStudio.ExtensionManager.BitRotator : object {
    internal static sbyte RotateLeft(sbyte value, int count);
    internal static byte RotateLeft(byte value, int count);
    internal static sbyte RotateRight(sbyte value, int count);
    internal static byte RotateRight(byte value, int count);
    internal static short RotateLeft(short value, int count);
    internal static ushort RotateLeft(ushort value, int count);
    internal static short RotateRight(short value, int count);
    internal static ushort RotateRight(ushort value, int count);
    internal static int RotateLeft(int value, int count);
    internal static UInt32 RotateLeft(UInt32 value, int count);
    internal static int RotateRight(int value, int count);
    internal static UInt32 RotateRight(UInt32 value, int count);
    internal static long RotateLeft(long value, int count);
    internal static ulong RotateLeft(ulong value, int count);
    internal static long RotateRight(long value, int count);
    internal static ulong RotateRight(ulong value, int count);
}
public class Microsoft.VisualStudio.ExtensionManager.ClientEnabledSettings : object {
    [CompilerGeneratedAttribute]
private string <ClientAppPath>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsClientMode>k__BackingField;
    [CompilerGeneratedAttribute]
private ISettingsManager <SettingsManager>k__BackingField;
    public string ClientAppPath { get; private set; }
    public bool IsClientMode { get; private set; }
    public ISettingsManager SettingsManager { get; private set; }
    public ClientEnabledSettings(bool isClientMode, string clientAppPath, ISettingsManager settingsManager);
    [CompilerGeneratedAttribute]
public sealed virtual string get_ClientAppPath();
    [CompilerGeneratedAttribute]
private void set_ClientAppPath(string value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_IsClientMode();
    [CompilerGeneratedAttribute]
private void set_IsClientMode(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual ISettingsManager get_SettingsManager();
    [CompilerGeneratedAttribute]
private void set_SettingsManager(ISettingsManager value);
}
public class Microsoft.VisualStudio.ExtensionManager.Common.EnumHelper : object {
    public static IEnumerable`1<TEnum> GetEnumMembers();
}
[DataContractAttribute]
public class Microsoft.VisualStudio.ExtensionManager.Criteria : object {
    [CompilerGeneratedAttribute]
private IList`1<Filter> <FilterList>k__BackingField;
    [CompilerGeneratedAttribute]
private string <SortBy>k__BackingField;
    [CompilerGeneratedAttribute]
private string <SortOrder>k__BackingField;
    [CompilerGeneratedAttribute]
private string <PageSize>k__BackingField;
    [CompilerGeneratedAttribute]
private string <PageNumber>k__BackingField;
    [DataMemberAttribute]
public IList`1<Filter> FilterList { get; public set; }
    [DataMemberAttribute]
public string SortBy { get; public set; }
    [DataMemberAttribute]
public string SortOrder { get; public set; }
    [DataMemberAttribute]
public string PageSize { get; public set; }
    [DataMemberAttribute]
public string PageNumber { get; public set; }
    public Criteria(IList`1<Filter> filters);
    public Criteria(IList`1<Filter> filters, string sortBy, string sortOrder, string pageSize, string pageNumber);
    [CompilerGeneratedAttribute]
public IList`1<Filter> get_FilterList();
    [CompilerGeneratedAttribute]
public void set_FilterList(IList`1<Filter> value);
    [CompilerGeneratedAttribute]
public string get_SortBy();
    [CompilerGeneratedAttribute]
public void set_SortBy(string value);
    [CompilerGeneratedAttribute]
public string get_SortOrder();
    [CompilerGeneratedAttribute]
public void set_SortOrder(string value);
    [CompilerGeneratedAttribute]
public string get_PageSize();
    [CompilerGeneratedAttribute]
public void set_PageSize(string value);
    [CompilerGeneratedAttribute]
public string get_PageNumber();
    [CompilerGeneratedAttribute]
public void set_PageNumber(string value);
}
internal static class Microsoft.VisualStudio.ExtensionManager.DataFormats : object {
    internal static string Text;
    internal static string Rtf;
    internal static string Xaml;
    private static DataFormats();
}
internal class Microsoft.VisualStudio.ExtensionManager.DefaultPackageInstaller : PackageInstaller {
    public DefaultPackageInstaller(InstallerData data);
    internal virtual string PrepareLayout(ZipPackage packageContainer);
    internal virtual void Validate(ZipPackage packageContainer, IEngineHost engineHost);
    internal static void ValidateCatalog(Catalog catalog, string installDir, bool installPerMachine);
}
[GeneratedCodeAttribute("xsd", "4.6.81.0")]
[DebuggerStepThroughAttribute]
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
public class Microsoft.VisualStudio.ExtensionManager.Dependency : DependencyInfo {
    private string versionField;
    private bool canAutoDownloadField;
    private bool isRequiredField;
    [XmlAttributeAttribute]
public string Version { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("False")]
public bool CanAutoDownload { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("True")]
public bool IsRequired { get; public set; }
    public string get_Version();
    public void set_Version(string value);
    public bool get_CanAutoDownload();
    public void set_CanAutoDownload(bool value);
    public bool get_IsRequired();
    public void set_IsRequired(bool value);
}
[XmlIncludeAttribute("Microsoft.VisualStudio.ExtensionManager.Dependency")]
[GeneratedCodeAttribute("xsd", "4.6.81.0")]
[DebuggerStepThroughAttribute]
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
public class Microsoft.VisualStudio.ExtensionManager.DependencyInfo : object {
    private string idField;
    private string displayNameField;
    private string locationField;
    private XmlAttribute[] anyAttrField;
    [XmlAttributeAttribute]
public string Id { get; public set; }
    [XmlAttributeAttribute]
public string DisplayName { get; public set; }
    [XmlAttributeAttribute]
public string Location { get; public set; }
    [XmlAnyAttributeAttribute]
public XmlAttribute[] AnyAttr { get; public set; }
    public string get_Id();
    public void set_Id(string value);
    public string get_DisplayName();
    public void set_DisplayName(string value);
    public string get_Location();
    public void set_Location(string value);
    public XmlAttribute[] get_AnyAttr();
    public void set_AnyAttr(XmlAttribute[] value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.VisualStudio.ExtensionManager.DocIdBuilder : object {
    [CompilerGeneratedAttribute]
private MetadataReader <mdReader>P;
    private static string EventAddPrefix;
    private static string EventRemovePrefix;
    private static string PropertyGetPrefix;
    private static string PropertySetPrefix;
    private static ThreadLocal`1<StringBuilder> Builder;
    public DocIdBuilder(MetadataReader mdReader);
    private static DocIdBuilder();
    public string GetDocumentationCommentId(EntityHandle entityHandle);
    private void VisitType(TypeReferenceHandle typeRefHandle, StringBuilder builder);
    private void VisitType(TypeSpecificationHandle typeSpecHandle, StringBuilder builder);
    private void VisitType(TypeDefinitionHandle typeDefHandle, StringBuilder builder);
    private void VisitType(TypeHandleInfo typeHandle, StringBuilder builder);
    private void VisitParentType(MemberReference memberReference, StringBuilder builder);
    private void VisitParentType(EntityHandle typeHandle, StringBuilder builder);
    private void VisitMethodHelper(string name, MethodSignature`1<TypeHandleInfo> signature, StringBuilder builder);
    private void VisitMethod(MemberReference methodReference, StringBuilder builder);
    private void VisitMethod(MethodDefinitionHandle handle, StringBuilder builder);
    private void VisitPropertyHelper(string name, MethodSignature`1<TypeHandleInfo> signature, StringBuilder builder);
    [NullableContextAttribute("0")]
private void VisitPropertyHelper(ReadOnlySpan`1<char> name, MethodSignature`1<TypeHandleInfo> signature, StringBuilder builder);
    private void VisitProperty(MemberReference propertyReference, StringBuilder builder, bool fromAccessorMethod);
    private void VisitProperty(PropertyDefinitionHandle handle, StringBuilder builder);
    private void VisitField(MemberReference fieldReference, StringBuilder builder);
    private void VisitField(FieldDefinitionHandle handle, StringBuilder builder);
    private void VisitEvent(MemberReference eventReference, StringBuilder builder);
    private void VisitEvent(EventDefinitionHandle handle, StringBuilder builder);
    private bool IsProperty(MemberReference memberReference);
    private bool IsEvent(MemberReference memberReference);
}
internal class Microsoft.VisualStudio.ExtensionManager.Dotnet.Stubs.CodeMarkerEvent : object {
    public static int perfExtensionManagerUninstallStart;
    public static int perfExtensionManagerUninstallEnd;
    public static int perfExtensionManagerInstallStart;
    public static int perfExtensionManagerInstallEnd;
    public static int perfExtensionManagerDisableStart;
    public static int perfExtensionManagerDisableEnd;
    public static int perfExtensionManagerEnableStart;
    public static int perfExtensionManagerEnableEnd;
    public static int perfExtensionManagerExtensionsDeletionStart;
    public static int perfExtensionManagerExtensionsDeletionEnd;
    public static int perfExtensionManagerInitializeStart;
    public static int perfExtensionManagerInitializeEnd;
    public static int perfExtensionManagerTryGetInstalledExtensionStart;
    public static int perfExtensionManagerTryGetInstalledExtensionEnd;
    private static CodeMarkerEvent();
}
internal class Microsoft.VisualStudio.ExtensionManager.Dotnet.Stubs.CodeMarkerStartEnd : object {
    public CodeMarkerStartEnd(int arg1, int arg2);
    public sealed virtual void Dispose();
}
internal static class Microsoft.VisualStudio.ExtensionManager.DotNetFrameworkDetector : object {
    private static string NetFrameworkSetupKey;
    private static List`1<CheckFrameworkInstalled> _frameworkDetectionDelegates;
    private static List`1<Version> _installedFrameworkVersions;
    private static List`1<DotNetFrameworkReleaseVersionMap> _dotNetFrameworkReleaseVersionMap;
    internal static IEnumerable`1<Version> InstalledFrameworkVersions { get; }
    private static DotNetFrameworkDetector();
    internal static IEnumerable`1<Version> get_InstalledFrameworkVersions();
    private static void CalculateInstalledFrameworkRange();
    private static Version Check10FrameworkInstalled();
    private static Version Check11FrameworkInstalled();
    private static Version Check20FrameworkInstalled();
    private static Version Check30FrameworkInstalled();
    private static Version Check35FrameworkInstalled();
    private static Version GetVersionFromRelease(long release, string defaultVersion);
    private static Version GetVersionFromClientVersionKey(RegistryKey clientVersionKey, string defaultVersion);
    private static void CheckPost35FrameworksInstalled();
}
internal class Microsoft.VisualStudio.ExtensionManager.EmptyCacheException : Exception {
    public string Message { get; }
    public virtual string get_Message();
}
[ExtensionAttribute]
public static class Microsoft.VisualStudio.ExtensionManager.EngineExtensionMethods : object {
    [ExtensionAttribute]
public static ExtensionDigitalSignatureState VerifySignature(PackageDigitalSignature packageSignature);
    [ExtensionAttribute]
public static string GetIdentifierVersionPairString(IInstalledExtension extension);
    [ExtensionAttribute]
public static bool IsExtAutoUpdateable(IInstalledExtension extension);
    [ExtensionAttribute]
public static string LoadJsonString(ZipPackage package, string sourceUri);
    [ExtensionAttribute]
public static VsixPackage LoadSetupVsixPackage(ZipPackage package);
    [ExtensionAttribute]
public static Catalog LoadCatalog(ZipPackage package, ServiceProvider serviceProvider);
    [ExtensionAttribute]
public static string Serialize(Catalog catalog);
    [ExtensionAttribute]
public static IEnumerable`1<IDependencyNode> GetDependentNodes(IDependencyNode initialNode);
    [ExtensionAttribute]
public static IEnumerable`1<string> GetUnlistedParts(ZipPackage package, VsixPackage vsixPackage);
    private static string UnescapeUri(Uri uri);
    private static void AddSignatureParts(HashSet`1<string> packageFiles, ZipPackage package);
    private static void EnsureUri(HashSet`1<string> packageFiles, Uri uri);
}
public class Microsoft.VisualStudio.ExtensionManager.EngineServices : object {
    internal static ServiceProvider AddDefaultServices(ServiceProvider passInServiceProvider, IEngineHost engineHost, CancellationTokenSource cancelTokenSource, InstallFlags installFlags);
    private static void MessageBus_MessageReceived(object sender, MessageEventArgs e);
}
public class Microsoft.VisualStudio.ExtensionManager.EngineSettings : object {
    private static string TestMarketplaceUriEnvVariable;
    private static string ConfigurationRepositoryLimitSetting;
    private static int ConfigurationRepositoryLimitSettingDefault;
    private static string UserSettingsRepositoryLimitSetting;
    private static int UserSettingsRepositoryLimitSettingDefault;
    private static string UseRestAPIExtensionSetting;
    private static bool UseRestAPIExtensionSettingDefault;
    private static string UseRestAPIExtensionSettingValue;
    private string _testMarketPlaceUri;
    private ISettingsStore ConfigurationSettingsStore { get; }
    private IWritableSettingsStore UserSettingsStore { get; }
    public string VSMarketPlaceUri { get; }
    public string TestMarketPlaceUri { get; }
    public bool ShouldAutoUpdatePerMachine { get; public set; }
    public int ConfigurationRepositoryLimit { get; }
    public int UserSettingsRepositoryLimit { get; }
    public IEnumerable`1<IExtensionRepositoryConfig> AllRepositories { get; }
    public IExtensionRepository GetVSGalleryRepo { get; }
    public ExtensionRepositoryConfigList UserRepositories { get; public set; }
    public bool IsUseRestAPIForMarketPlaceFeatureEnabled { get; }
    private string GetMarketPlaceUri(string marketplaceUriDefault);
    private ISettingsStore get_ConfigurationSettingsStore();
    private IWritableSettingsStore get_UserSettingsStore();
    public sealed virtual string get_VSMarketPlaceUri();
    public sealed virtual string get_TestMarketPlaceUri();
    public sealed virtual bool GetExtensionAutoUpdateEnabled(string extensionIdentifier);
    public sealed virtual void SetExtensionAutoUpdateEnabled(string extensionIdentifier, bool shouldAutoUpdate);
    public sealed virtual bool get_ShouldAutoUpdatePerMachine();
    public sealed virtual void set_ShouldAutoUpdatePerMachine(bool value);
    public sealed virtual int get_ConfigurationRepositoryLimit();
    public sealed virtual int get_UserSettingsRepositoryLimit();
    public sealed virtual IEnumerable`1<IExtensionRepositoryConfig> get_AllRepositories();
    public sealed virtual IExtensionRepository get_GetVSGalleryRepo();
    public sealed virtual ExtensionRepositoryConfigList get_UserRepositories();
    public sealed virtual void set_UserRepositories(ExtensionRepositoryConfigList value);
    public sealed virtual bool IsMicrosoftGallery(IExtensionRepositoryConfig config);
    public sealed virtual bool get_IsUseRestAPIForMarketPlaceFeatureEnabled();
    internal void WriteExtensionRepositoryConfig(IExtensionRepositoryConfig config);
    private void SetMarketplaceUri(IEnumerable`1<IExtensionRepositoryConfig> repositories);
    private bool ReadRepositoryValue(string valueName, bool required, Func`2<string, bool> propertyExists, Func`2<string, T> getter, Action`1<T> setter);
    private void ReadRepositoriesFromStore(ISettingsStore store, List`1<IExtensionRepositoryConfig> repositories, SettingsScope settingsScope);
}
[ExtensionAttribute]
public static class Microsoft.VisualStudio.ExtensionManager.EngineUtilities : object {
    private static int ERROR_ACCESS_DENIED;
    private static string MSBuildExe;
    private static string ShellFolderToken;
    private static string RootFolderToken;
    private static Lazy`1<IVsExperimentationService> experimentationService;
    [CompilerGeneratedAttribute]
private static IEngineHost <EngineHost>k__BackingField;
    private static IExtensionEngine extensionEngine;
    public static IVsExperimentationService ExperimentationService { get; }
    public static IEngineHost EngineHost { get; private set; }
    public static IExtensionEngine ExtensionEngine { get; public set; }
    public static string InstallDir { get; }
    public static string ShellFolder { get; }
    public static string RootFolder { get; }
    private static string ProductName { get; }
    private static EngineUtilities();
    private static IVsExperimentationService GetExperimentationService();
    public static IVsExperimentationService get_ExperimentationService();
    [CompilerGeneratedAttribute]
public static IEngineHost get_EngineHost();
    [CompilerGeneratedAttribute]
private static void set_EngineHost(IEngineHost value);
    public static IExtensionEngine get_ExtensionEngine();
    public static void set_ExtensionEngine(IExtensionEngine value);
    public static string BuildShowFilesInUseMessage(IEnumerable`1<Process> processes);
    [ExtensionAttribute]
public static bool TryFromFileTimeUtc(long fileTime, DateTime& result, Nullable`1<DateTime> defaultValue);
    public static string get_InstallDir();
    public static string get_ShellFolder();
    public static string get_RootFolder();
    public static string GetContentLocation(string installPath, string relativePath);
    public static string EnsureTrailingSeparator(string path);
    private static string get_ProductName();
    public static string GetProcessName(Process process);
    public static void CopyStream(Stream input, Stream output, bool copyFromBeginning);
    [ExtensionAttribute]
public static bool IsSelectable(IPackage package);
    [ExtensionAttribute]
public static InstallProgressType ToInstallProgressType(ProgressType type);
    public static string Replace(string value, string replace, string replacement, StringComparison comparison);
    public static string ToHexString(Byte[] buffer, int maxBytes);
    public static string GetLocalizedPackageName(CultureInfo currentCulture, IEnumerable`1<LocalizedResource> localizedResources);
    public static void EnsureNoMissingReferences(IEnumerable`1<IExtensionReference> missingRefs);
    public static string ReplaceLcidPlaceholders(string originalURI);
    public static Uri ResolveFwLink(Uri url);
    public static bool IsFwLink(Uri url);
    public static void ThrowExceptionIfProxyCredentialsRequired(Exception ex, string uri);
    public static bool ProxyAuthenticationRequired(Exception ex);
    public static bool IsMarketPlaceServerAvailable(Exception ex);
    public static void LogRepositoryCreated(string protocol, Guid id);
    public static IDependencyNode EnsureComponentAndPackageAreHigherVersion(ILogger logger, IDependencyGraph dGraph, Catalog catalog, Component vsixComponent);
    public static CultureInfo GetPreferredCulture();
    [AsyncStateMachineAttribute("Microsoft.VisualStudio.ExtensionManager.EngineUtilities/<GetServicePreferAsyncProviderAsync>d__46`2")]
[ExtensionAttribute]
public static Task`1<TInterface> GetServicePreferAsyncProviderAsync(IEngineHost host, bool throwOnFailure, bool suppressAllErrors);
    [AsyncStateMachineAttribute("Microsoft.VisualStudio.ExtensionManager.EngineUtilities/<GetServiceIfAvailableAsync>d__47`2")]
[ExtensionAttribute]
public static Task`1<TInterface> GetServiceIfAvailableAsync(IEngineHost host, bool suppressAllErrors);
    [ExtensionAttribute]
public static bool IsExtensionDisabled(IInstalledExtension extension);
    public static bool ContainsPath(string fullPath, string path);
    private static string NormalizePath(string path, bool addBackslash);
    private static string RemoveAdjacentChars(string value, char ch, int startIndex);
}
internal class Microsoft.VisualStudio.ExtensionManager.ExperimentPackageInstaller : PackageInstaller {
    public ExperimentPackageInstaller(InstallerData data);
    internal virtual void Validate(ZipPackage packageContainer, IEngineHost engineHost);
    private bool IsCatalogSigned(ZipPackage packageContainer);
}
[DataContractAttribute]
public class Microsoft.VisualStudio.ExtensionManager.Extension : object {
    [CompilerGeneratedAttribute]
private string <Publisher>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ExtensionId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ExtensionName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DisplayName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Flags>k__BackingField;
    [CompilerGeneratedAttribute]
private string <LastUpdated>k__BackingField;
    [CompilerGeneratedAttribute]
private string <PublishedDate>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ShortDescription>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<ExtensionVersion> <Versions>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<Statistic> <Statistics>k__BackingField;
    [DataMemberAttribute]
public string Publisher { get; public set; }
    [DataMemberAttribute]
public string ExtensionId { get; public set; }
    [DataMemberAttribute]
public string ExtensionName { get; public set; }
    [DataMemberAttribute]
public string DisplayName { get; public set; }
    [DataMemberAttribute]
public string Flags { get; public set; }
    [DataMemberAttribute]
public string LastUpdated { get; public set; }
    [DataMemberAttribute]
public string PublishedDate { get; public set; }
    [DataMemberAttribute]
public string ShortDescription { get; public set; }
    [DataMemberAttribute]
public IList`1<ExtensionVersion> Versions { get; public set; }
    [DataMemberAttribute]
public IList`1<Statistic> Statistics { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Publisher();
    [CompilerGeneratedAttribute]
public void set_Publisher(string value);
    [CompilerGeneratedAttribute]
public string get_ExtensionId();
    [CompilerGeneratedAttribute]
public void set_ExtensionId(string value);
    [CompilerGeneratedAttribute]
public string get_ExtensionName();
    [CompilerGeneratedAttribute]
public void set_ExtensionName(string value);
    [CompilerGeneratedAttribute]
public string get_DisplayName();
    [CompilerGeneratedAttribute]
public void set_DisplayName(string value);
    [CompilerGeneratedAttribute]
public string get_Flags();
    [CompilerGeneratedAttribute]
public void set_Flags(string value);
    [CompilerGeneratedAttribute]
public string get_LastUpdated();
    [CompilerGeneratedAttribute]
public void set_LastUpdated(string value);
    [CompilerGeneratedAttribute]
public string get_PublishedDate();
    [CompilerGeneratedAttribute]
public void set_PublishedDate(string value);
    [CompilerGeneratedAttribute]
public string get_ShortDescription();
    [CompilerGeneratedAttribute]
public void set_ShortDescription(string value);
    [CompilerGeneratedAttribute]
public IList`1<ExtensionVersion> get_Versions();
    [CompilerGeneratedAttribute]
public void set_Versions(IList`1<ExtensionVersion> value);
    [CompilerGeneratedAttribute]
public IList`1<Statistic> get_Statistics();
    [CompilerGeneratedAttribute]
public void set_Statistics(IList`1<Statistic> value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.VisualStudio.ExtensionManager.ExtensionApiUsageScanner : object {
    [CompilerGeneratedAttribute]
private IEngineHost <engineHost>P;
    private static string AzureHostId;
    private static string AzureAccountBaseUri;
    private static string UnknownExtensionsRelativePathInAzure;
    private static TimeSpan UnknownExtensionsMaxCacheTime;
    private static StringComparer ExtensionIdHashEqualityComparer;
    public ExtensionApiUsageScanner(IEngineHost engineHost);
    private static ExtensionApiUsageScanner();
    [AsyncStateMachineAttribute("Microsoft.VisualStudio.ExtensionManager.ExtensionApiUsageScanner/<ScanApiUsageIfNecessaryAsync>d__7")]
internal Task ScanApiUsageIfNecessaryAsync(IEnumerable`1<IInstalledExtension> installedExtensions, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.VisualStudio.ExtensionManager.ExtensionApiUsageScanner/<GetUserApprovalAsync>d__8")]
private Task`1<Nullable`1<bool>> GetUserApprovalAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.VisualStudio.ExtensionManager.ExtensionApiUsageScanner/<GetUnknownExtensionsListAsync>d__9")]
private Task`1<ISet`1<string>> GetUnknownExtensionsListAsync(CancellationToken cancellationToken);
}
public class Microsoft.VisualStudio.ExtensionManager.ExtensionBatchEngine : object {
    private ServiceProvider serviceProvider;
    private IEngineHost engineHost;
    private CancellationTokenSource cancelTokenSource;
    private InstallFlags installFlags;
    private IExtensionEngine extensionEngine;
    private List`1<VsixPackage> embeddedVsixList;
    internal ExtensionBatchEngine(ServiceProvider serviceProvider, IEngineHost engineHost, CancellationTokenSource cancelTokenSource, InstallFlags installFlags, IExtensionEngine extensionEngine);
    internal void Initialize();
    public List`1<IInstalledExtension> Execute(List`1<IInstallableExtension> installableExtensions, Version targetVsVersion);
    private ValueTuple`2<PackageInstaller, List`1<string>> LoadExtension(ISetupEngineService engineService, InstallableExtensionImpl extension, string fileDestinationDirectory, VsixInstaller installer, bool writePackComponentFile);
    internal ValueTuple`2<PackageInstaller, List`1<string>> LoadEmbeddedExtension(ISetupEngineService engineService, PackageInstaller packageInstaller, InstallableExtensionImpl extension, string fileDestinationDirectory, IDependencyGraph graph, VsixInstaller installer);
    private bool ShouldWritePackComponentFile(IDependencyNode node);
    [CompilerGeneratedAttribute]
private InstalledExtensionImpl <Execute>b__8_1(string x);
}
public class Microsoft.VisualStudio.ExtensionManager.ExtensionContentImpl : object {
    [CompilerGeneratedAttribute]
private string <ContentTypeName>k__BackingField;
    [CompilerGeneratedAttribute]
private IDictionary`2<string, string> <Attributes>k__BackingField;
    [CompilerGeneratedAttribute]
private string <RelativePath>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<XmlElement> <AdditionalElements>k__BackingField;
    public string ContentTypeName { get; public set; }
    public IDictionary`2<string, string> Attributes { get; public set; }
    public string RelativePath { get; public set; }
    public IList`1<XmlElement> AdditionalElements { get; public set; }
    public ExtensionContentImpl(ExtensionContentFromStorage content);
    [CompilerGeneratedAttribute]
public sealed virtual string get_ContentTypeName();
    [CompilerGeneratedAttribute]
public void set_ContentTypeName(string value);
    [CompilerGeneratedAttribute]
public sealed virtual IDictionary`2<string, string> get_Attributes();
    [CompilerGeneratedAttribute]
public void set_Attributes(IDictionary`2<string, string> value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_RelativePath();
    [CompilerGeneratedAttribute]
public void set_RelativePath(string value);
    [CompilerGeneratedAttribute]
public sealed virtual IList`1<XmlElement> get_AdditionalElements();
    [CompilerGeneratedAttribute]
public void set_AdditionalElements(IList`1<XmlElement> value);
}
public static class Microsoft.VisualStudio.ExtensionManager.ExtensionEngineConstants : object {
    internal static string FileDeletionExtension;
    public static string HotloadRegistrationFileName;
}
public class Microsoft.VisualStudio.ExtensionManager.ExtensionEngineImpl : object {
    private static string ExtensionsConfigurationChanged;
    public static string ScanExtensionSDKsAtStartupRegistryValue;
    private static string DirectoryForSDKs;
    private static string DirectoryForPlatformSDKs;
    public static string NuGetPackagesDirectory;
    private static string AssetScanDepthSetting;
    public static AutoUpdateState DefaultAutoUpdateState;
    public static string BaseCacheFileName;
    public static string BaseSdkCacheFileName;
    private static int InstalledTelemetryTaskTimeout;
    public static Version VersionCutOffForSetupEngineInstaller;
    private static ConcurrentDictionary`2<string, IInstalledExtension> autoUpdatedExtensions;
    private static Dictionary`2<string, bool> ContentTypeRequiresRestart;
    private static ConcurrentDictionary`2<string, AsyncEventHandler`1<InstallCompletedEventArgs>> updateInstallCompletedEventHandlers;
    private static object updateInstallCompletedEventHandlersLock;
    private IEnumerable`1<string> perMachineExtensionsRoots;
    private CancellationToken disposalToken;
    private CancellationTokenSource engineToken;
    private bool isClosed;
    private CancellationTokenSource disposalTokenSource;
    [CompilerGeneratedAttribute]
private EngineMode <EngineModeFlags>k__BackingField;
    private Nullable`1<bool> didLoaduserExtensionsOverride;
    private DateTime lastConfigChange;
    private IReadOnlyCollection`1<IPackage> presentPackages;
    private IReadOnlyCollection`1<IPackage> absentPackages;
    private Version vsVersion;
    [CompilerGeneratedAttribute]
private IExtensionHotloadWatcher <HotloadWatcher>k__BackingField;
    private JoinableTask asyncCtorWorkTrackingTask;
    private JoinableTask asyncRemoveOldPerUserExtensionTrackingTask;
    public bool runningDeleteCodeInCtorAsyncTask;
    private Mutex removeOldPerUserExtensionLock;
    [CompilerGeneratedAttribute]
private InstallModule <installModuleNoWait>k__BackingField;
    [CompilerGeneratedAttribute]
private UninstallModule <uninstallModuleNoWait>k__BackingField;
    [CompilerGeneratedAttribute]
private StateManagerModule <stateManagerModuleNoWait>k__BackingField;
    [CompilerGeneratedAttribute]
private ScanModule <scanModuleNoWait>k__BackingField;
    [CompilerGeneratedAttribute]
private IInstalledExtensionSettingsList <installedExtensionsNoWait>k__BackingField;
    [CompilerGeneratedAttribute]
private string <CurrentUserExtensionsRoot>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ApplicationExtensionsRoot>k__BackingField;
    [CompilerGeneratedAttribute]
private EventHandler`1<InstallCompletedEventArgs> InstallCompleted;
    [CompilerGeneratedAttribute]
private EventHandler`1<InstallProgressChangedEventArgs> InstallProgressChanged;
    [CompilerGeneratedAttribute]
private ExtensionHotloadCompletedEventHandler ExtensionHotloadComplete;
    [CompilerGeneratedAttribute]
private PropertyChangedEventHandler PropertyChanged;
    [CompilerGeneratedAttribute]
private static bool <IsRunningInUnitTests>k__BackingField;
    [CompilerGeneratedAttribute]
private IEngineHost <EngineHost>k__BackingField;
    private static bool alreadyLoggedExtensionTelemetry;
    private IDependencyGraph _dependencyGraph;
    private Task installedExtensionsTelemetryTask;
    public EngineMode EngineModeFlags { get; private set; }
    private IExtensionHotloadWatcher HotloadWatcher { get; private set; }
    private InstallModule installModuleNoWait { get; }
    internal UninstallModule uninstallModuleNoWait { get; }
    private StateManagerModule stateManagerModuleNoWait { get; }
    internal ScanModule scanModuleNoWait { get; }
    private IInstalledExtensionSettingsList installedExtensionsNoWait { get; private set; }
    public InstallModule InstallModule { get; }
    public UninstallModule UninstallModule { get; }
    public StateManagerModule StateManagerModule { get; }
    public ScanModule ScanModule { get; }
    public IInstalledExtensionSettingsList InstalledExtensions { get; }
    public string CurrentUserExtensionsRoot { get; }
    public string ApplicationExtensionsRoot { get; }
    public int UninstalledRestartRequiredExtensionsCount { get; }
    public bool DidLoadUserExtensions { get; public set; }
    public static ConcurrentDictionary`2<string, AsyncEventHandler`1<InstallCompletedEventArgs>> UpdateInstallCompletedEventHandlers { get; }
    public static ConcurrentDictionary`2<string, IInstalledExtension> UpdatedExtensions { get; }
    public static bool IsRunningInUnitTests { get; public set; }
    public JoinableTaskFactory JoinableTaskFactory { get; }
    public IEngineHost EngineHost { get; }
    public string PerMachineExtensionSDKInstallRoot { get; }
    public string PerMachinePlatformSDKInstallRoot { get; }
    public string PerUserExtensionSDKInstallRoot { get; }
    private bool ScanAlways { get; }
    private bool SafeScanAlways { get; }
    private bool SafeMode { get; }
    public bool ScanSdkDirectories { get; }
    private static bool AlreadyLoggedExtensionTelemetry { get; private set; }
    private IReadOnlyCollection`1<IPackage> AbsentPackages { get; }
    private IReadOnlyCollection`1<IPackage> PresentPackages { get; }
    private Version VsVersion { get; }
    public IDependencyGraph DependencyGraph { get; }
    public ExtensionEngineImpl(IEngineHost engineHost, EngineMode mode, IExtensionSettingsCache extensionSettingsCache);
    public ExtensionEngineImpl(IEngineHost engineHost, EngineMode mode);
    public ExtensionEngineImpl(IEngineHost engineHost, ExtensionEngineOptions extensionEngineOptions);
    public ExtensionEngineImpl(IEngineHost engineHost, EngineMode mode, IEnumerable`1<string> enabledExtensions, CancellationToken disposalToken, IExtensionSettingsCache extensionSettingsCache, ExtensionEngineOptions extensionEngineOptions);
    private static ExtensionEngineImpl();
    [CompilerGeneratedAttribute]
public sealed virtual EngineMode get_EngineModeFlags();
    [CompilerGeneratedAttribute]
private void set_EngineModeFlags(EngineMode value);
    [CompilerGeneratedAttribute]
private IExtensionHotloadWatcher get_HotloadWatcher();
    [CompilerGeneratedAttribute]
private void set_HotloadWatcher(IExtensionHotloadWatcher value);
    [CompilerGeneratedAttribute]
private InstallModule get_installModuleNoWait();
    [CompilerGeneratedAttribute]
internal UninstallModule get_uninstallModuleNoWait();
    [CompilerGeneratedAttribute]
private StateManagerModule get_stateManagerModuleNoWait();
    [CompilerGeneratedAttribute]
internal ScanModule get_scanModuleNoWait();
    [CompilerGeneratedAttribute]
private IInstalledExtensionSettingsList get_installedExtensionsNoWait();
    [CompilerGeneratedAttribute]
private void set_installedExtensionsNoWait(IInstalledExtensionSettingsList value);
    public InstallModule get_InstallModule();
    public UninstallModule get_UninstallModule();
    public StateManagerModule get_StateManagerModule();
    public ScanModule get_ScanModule();
    public sealed virtual IInstalledExtensionSettingsList get_InstalledExtensions();
    [CompilerGeneratedAttribute]
public sealed virtual string get_CurrentUserExtensionsRoot();
    [CompilerGeneratedAttribute]
public sealed virtual string get_ApplicationExtensionsRoot();
    public sealed virtual int get_UninstalledRestartRequiredExtensionsCount();
    public sealed virtual IEnumerable`1<IExtensionReference> FindMissingReferences(IExtension extension);
    public sealed virtual void GetPrerequisites(IInstallableExtension extension, IEnumerable`1& installedPackages, IEnumerable`1& installablePackages, IEnumerable`1& unresolvedReferences);
    public sealed virtual IEnumerable`1<IInstalledExtension> GetImmediateDependants(IInstalledExtension extension);
    public sealed virtual IEnumerable`1<IInstalledExtension> GetExtensionPacks(IInstalledExtension extension);
    public sealed virtual long UpdateLastExtensionsChangedTimestamp(bool alsoUpdateConfigurationChangedTimestamp, Nullable`1<DateTime> lastConfigChange);
    public long UpdateLastExtensionsChangedTimestampCore(bool alsoUpdateConfigurationChangedTimestamp, bool updateClient, Nullable`1<DateTime> lastConfigChange);
    private void UpdateLastConfigurationChangeForSettingsManager(ISettingsManager settingsManager);
    public sealed virtual void UpdateLastExtensionsChange(bool updateClient);
    private void UpdateLastExtensionsChangeForSettingsManager(ISettingsManager settingsManager);
    public sealed virtual bool get_DidLoadUserExtensions();
    public sealed virtual void set_DidLoadUserExtensions(bool value);
    public sealed virtual bool CommitExternalInstall(string dataPath, bool perMachine);
    public sealed virtual bool CommitExternalUninstall(IInstalledExtension extension);
    public sealed virtual bool CommitChanges(IEnumerable`1<IInstalledExtension> installedExtensions, IEnumerable`1<IInstalledExtension> uninstalledExtensions, IEnumerable`1<ValueTuple`2<string, bool>> packComponentChanges, Version targetedVSVersion, InstallFlags installFlags);
    public sealed virtual void RemoveOrphanedComponents(IInstalledExtension parentExtension);
    public sealed virtual RestartReason Enable(IInstalledExtension extension);
    public sealed virtual RestartReason Disable(IInstalledExtension extension);
    public sealed virtual RestartReason PermanentDisable(IInstalledExtension extension);
    public sealed virtual bool Install(IInstallableExtension extension, InstallFlags installFlags, Version targetedVsVersion);
    public sealed virtual void InstallAsync(IInstallableExtension extension, InstallFlags installFlags, object userState);
    public sealed virtual void InstallAsyncCancel(object userState);
    public sealed virtual void Downgrade(IInstalledExtension extension, InstallFlags installFlags);
    public sealed virtual void Uninstall(IInstalledExtension extension, InstallFlags installFlags, Version targetedVSVersion);
    public sealed virtual void RevertUninstall(IInstalledExtension extension);
    public sealed virtual long GetLastExtensionsChangedTimestamp();
    internal long GetLastExtensionsChangedTimestampInternal();
    [AsyncStateMachineAttribute("Microsoft.VisualStudio.ExtensionManager.ExtensionEngineImpl/<BlockUntilScanCompleteIfScanningAllExtensions>d__102")]
private Task BlockUntilScanCompleteIfScanningAllExtensions();
    private bool IsTimestampOptimizationEnabled(ExtensionEngineOptions extensionEngineOptions);
    private EngineMode CheckAndUpdateTheIncomingMode(EngineMode engineModeRequested, bool isTimestampOptimizationEnabled, object initializeCacheEvent);
    public string GetExtensionsCacheHash(string cacheName);
    public sealed virtual bool TryGetExtensionVersionFromCatalog(string identifier, Version& version);
    public sealed virtual Task SchedulePendingUninstallDeletion();
    [CompilerGeneratedAttribute]
public sealed virtual void add_InstallCompleted(EventHandler`1<InstallCompletedEventArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_InstallCompleted(EventHandler`1<InstallCompletedEventArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_InstallProgressChanged(EventHandler`1<InstallProgressChangedEventArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_InstallProgressChanged(EventHandler`1<InstallProgressChangedEventArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_ExtensionHotloadComplete(ExtensionHotloadCompletedEventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_ExtensionHotloadComplete(ExtensionHotloadCompletedEventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_PropertyChanged(PropertyChangedEventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_PropertyChanged(PropertyChangedEventHandler value);
    [AsyncStateMachineAttribute("Microsoft.VisualStudio.ExtensionManager.ExtensionEngineImpl/<DisposeAsync>d__120")]
public sealed virtual Task DisposeAsync();
    [AsyncStateMachineAttribute("Microsoft.VisualStudio.ExtensionManager.ExtensionEngineImpl/<DisposeCoreAsync>d__121")]
private Task DisposeCoreAsync(bool isDisposing);
    public static ConcurrentDictionary`2<string, AsyncEventHandler`1<InstallCompletedEventArgs>> get_UpdateInstallCompletedEventHandlers();
    public static ConcurrentDictionary`2<string, IInstalledExtension> get_UpdatedExtensions();
    [CompilerGeneratedAttribute]
public static bool get_IsRunningInUnitTests();
    [CompilerGeneratedAttribute]
public static void set_IsRunningInUnitTests(bool value);
    public JoinableTaskFactory get_JoinableTaskFactory();
    [CompilerGeneratedAttribute]
public sealed virtual IEngineHost get_EngineHost();
    public static IExtension CreateExtension(string extensionPath);
    public sealed virtual IInstallableExtension CreateInstallableExtension(string extensionPath);
    public static IInstallableExtension CreateInstallableExtension(string extensionPath, CultureInfo preferredCulture);
    public static void RegisterUpdateInstallCompletedEventForExtension(IInstalledExtension extension, AsyncEventHandler`1<InstallCompletedEventArgs> handler);
    public static void UnregisterUpdateInstallCompletedEventForExtension(IInstalledExtension extension, AsyncEventHandler`1<InstallCompletedEventArgs> handler);
    public static bool StateIsEnabled(EnabledState state);
    public sealed virtual Version GetLatestSchemaVersion(IInstallableExtension installableExtension);
    public static long GetLastExtensionChangedTimestampInternal(IEngineHost engineHost, string perMachineExtensionInstallRoot);
    public static string GetUniqueExtensionString(IExtension extension);
    public static string GetUniqueExtensionString(string identifier, Version version);
    public static string NormalizeInstallPath(string installPath);
    public static InstalledExtensionImpl CreateInstalledExtension(IEngineHost engineHost, string installPath, bool perMachine, CultureInfo preferredCulture);
    public static AutoUpdateState CalculateDefaultAutoUpdateState(INotifyUpdateInstallCompleted extension);
    public void SetGetInstallPathOverride(Func`3<IInstallableExtension, bool, string> getInstallPathOverride);
    public InstalledExtensionSettingsList CreateList();
    [AsyncStateMachineAttribute("Microsoft.VisualStudio.ExtensionManager.ExtensionEngineImpl/<GetInstalledExtensionsAsync>d__150")]
public sealed virtual Task`1<IInstalledExtensionSettingsList> GetInstalledExtensionsAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.VisualStudio.ExtensionManager.ExtensionEngineImpl/<ForceExtensionScanAsyncForVsixBuildAsync>d__151")]
public Task ForceExtensionScanAsyncForVsixBuildAsync(CancellationToken disposalToken);
    [AsyncStateMachineAttribute("Microsoft.VisualStudio.ExtensionManager.ExtensionEngineImpl/<ScanIfNeededAndInitializeCacheAsync>d__152")]
private Task ScanIfNeededAndInitializeCacheAsync(IEnumerable`1<string> enabledExtensions, bool safeMode, long extensionsChangedTimestamp, object initializeTelemetryCacheEvent, bool isTimestampOptimizationEnabled, CancellationToken cancellationToken);
    private void EnableAndDisableExtensionsBasedOnSafeModeAndEnabledListFromPkgDefMerge(IEnumerable`1<string> enabledExtensions, bool safeMode);
    [AsyncStateMachineAttribute("Microsoft.VisualStudio.ExtensionManager.ExtensionEngineImpl/<ScanExtensionsIfNeededAsync>d__154")]
private Task`1<ScanResult> ScanExtensionsIfNeededAsync(bool safeMode, bool canBypassScan, long lastScanTime);
    private bool ShouldScanSdkExtensions(bool canBypassScan);
    private bool ShouldScanUserAndMachineExtensions(bool canBypassScan);
    [AsyncStateMachineAttribute("Microsoft.VisualStudio.ExtensionManager.ExtensionEngineImpl/<LoadExtensionsFromCacheAsync>d__157")]
private Task`1<ExtensionChangedState> LoadExtensionsFromCacheAsync(Nullable`1<bool> isCacheVersionValid, CancellationToken cancellationToken);
    public string get_PerMachineExtensionSDKInstallRoot();
    public string get_PerMachinePlatformSDKInstallRoot();
    public string get_PerUserExtensionSDKInstallRoot();
    private bool get_ScanAlways();
    private bool get_SafeScanAlways();
    private bool get_SafeMode();
    public bool get_ScanSdkDirectories();
    private static bool get_AlreadyLoggedExtensionTelemetry();
    private static void set_AlreadyLoggedExtensionTelemetry(bool value);
    private IReadOnlyCollection`1<IPackage> get_AbsentPackages();
    private IReadOnlyCollection`1<IPackage> get_PresentPackages();
    private Version get_VsVersion();
    private static EngineMode GetEngineMode(ExtensionEngineOptions extensionEngineOptions);
    public static void CheckForValidDotNetFramework(IExtension extension);
    public static void CheckForValidNameAndAuthor(InstallableExtensionImpl extension);
    public static bool ReferenceIsCompatibleWithExtension(IExtensionReference reference, IExtension extension);
    public static bool ContainsInconsistentElevationRequests(InstallableExtensionImpl installableExtension);
    private static bool ContainsInconsistentElevationRequests(InstallableExtensionImpl installableExtension, bool allUserRequested);
    public static bool ReferenceIsCompatibleWithExtension(IExtensionReference reference, Version version);
    private static bool TryGetInstalledExtension(IReadOnlyInstalledExtensionList installedExtensionList, string identifier, Version& version);
    private static bool TryGetSetupPackage(IEnumerable`1<IPackage> installedPackageCollection, string identifier, Version& version);
    public static bool ExtensionRequiresLegacyInstallation(IExtension extension, Version targetedVSVersion);
    public bool IsInstalled(IExtension extension);
    public bool TryGetInstalledExtension(string identifier, IInstalledExtension& result);
    [AsyncStateMachineAttribute("Microsoft.VisualStudio.ExtensionManager.ExtensionEngineImpl/<ForceHotloadRefreshAsync>d__194")]
public sealed virtual Task ForceHotloadRefreshAsync(CancellationToken cancellationToken);
    public IDependencyGraph get_DependencyGraph();
    public IEnumerable`1<IDependencyNode> GetVsixPackageDependancyNodes();
    public static bool MustBeUninstalledThroughInstaller(IDependencyNode initialNode);
    public static IEnumerable`1<Tuple`2<string, string>> GetInstalledDependentPackagesForExtensionPackage(IDependencyNode extensionPackageNode, CultureInfo currentCulture);
    private static IEnumerable`1<IDependencyNode> GetAllInstalledRequiredDependencyNodesFromNodesList(IEnumerable`1<IDependencyNode> nodesList);
    public sealed virtual List`1<IInstalledExtension> BatchEngineInstall(List`1<IInstallableExtension> installableExtensions, InstallFlags installFlags, Version targetVsVersion);
    public IEnumerable`1<IExtensionReference> FindMissingReferences(IEnumerable`1<IExtensionReference> requiredRefs, IReadOnlyInstalledExtensionList installedExtensionList);
    public bool RequiresRestart(IExtension extension);
    public void OnPropertyChanged(string propertyName);
    public sealed virtual void RaiseExtensionHotloadCompleted(IInstalledExtension extension, InstallState installState);
    public void WaitForAsyncCtorWorkIfNecessary();
    public sealed virtual bool IsDowngradable(IInstalledExtension extension);
    private bool ReferenceIsInstalled(IExtensionReference reference, IReadOnlyInstalledExtensionList installedExtensionList);
    public sealed virtual bool ValidReferenceSpecialCase(IExtensionReference reference);
    private void ThrowIfClosed();
    public void ReportProgress(object e);
    private void OnInstallProgressChanged(InstallProgressChangedEventArgs args);
    public void InstallComplete(object e);
    private void OnInstallOperationCompleted(InstallCompletedEventArgs args);
    private void IntializePackages();
    private void GetPrerequisitesInternal(IInstallableExtension extension, ICollection`1<IPackage> installedPackages, ICollection`1<IPackage> installablePackages, ICollection`1<IExtensionReference> unresolvedReferences);
    private bool TryGetDependency(IEnumerable`1<IPackage> packages, IExtensionReference reference, IPackage& package);
    public void HandleRemoveOldPerUserExtensionManifestFlag();
    [CompilerGeneratedAttribute]
private bool <CommitChanges>b__89_0(IInstalledExtension x);
    [CompilerGeneratedAttribute]
private bool <CommitChanges>b__89_1(IInstalledExtension x);
    [CompilerGeneratedAttribute]
private bool <IsTimestampOptimizationEnabled>g__IsFlightEnabled|103_0();
    [NullableContextAttribute("1")]
[AsyncStateMachineAttribute("Microsoft.VisualStudio.ExtensionManager.ExtensionEngineImpl/<<IsTimestampOptimizationEnabled>b__103_1>d")]
[CompilerGeneratedAttribute]
private Task`1<bool> <IsTimestampOptimizationEnabled>b__103_1();
}
public class Microsoft.VisualStudio.ExtensionManager.ExtensionEngineInstaller : object {
    private IEngineHost engineHost;
    private HybridDictionary userStateToLifetime;
    private ExtensionSettingsStoreList pendingDeletionsList;
    private static string SkipCertCheckRoot;
    private static string SkipCertCheckKey;
    public static int MAX_PATH_SIZE;
    public static int TemplateFolderPathSize;
    public ExtensionEngineInstaller(IEngineHost engineHost, HybridDictionary userStateToLifetime, ExtensionSettingsStoreList pendingDeletionsList);
    public void WriteFilesToInstallDirectory(InstallableExtensionImpl extension, string installPath, ZipPackage vsixPackage, IDictionary`2<IInstalledExtension, Dictionary`2<string, bool>> extensionsInstalledSoFar, AsyncOperation asyncOp, IProgress`1<InstallProgressData> progress);
    private void RenameAndMarkForDeletion(string oldPath, string newPath);
    public static void WriteSigningInformation(InstallableExtensionImpl extension, string installPath, IEngineHost engineHost);
    private bool TaskCanceled(object userState);
    public static bool IsCertCheckSkipped(InstallableExtensionImpl extension, IEngineHost engineHost);
    public static bool IsVSIXSignedExtension(InstallableExtensionImpl extension);
}
public class Microsoft.VisualStudio.ExtensionManager.ExtensionHeaderImpl : object {
    private Uri _releaseNotes;
    private string _licenseRelativePath;
    private string _licenseContents;
    private string _releaseNotesRelativePath;
    private IList`1<XmlElement> _additionalElements;
    private IList`1<XmlElement> _localizedAdditionalElements;
    [CompilerGeneratedAttribute]
private string <Author>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Description>k__BackingField;
    [CompilerGeneratedAttribute]
private string <LocalizedDescription>k__BackingField;
    [CompilerGeneratedAttribute]
private Uri <GettingStartedGuide>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ReleaseNotesFormat>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Identifier>k__BackingField;
    [CompilerGeneratedAttribute]
private string <LicenseFormat>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <LicenseClickThrough>k__BackingField;
    [CompilerGeneratedAttribute]
private CultureInfo <Locale>k__BackingField;
    [CompilerGeneratedAttribute]
private Uri <MoreInfoUrl>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Icon>k__BackingField;
    [CompilerGeneratedAttribute]
private string <PreviewImage>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <InstalledByMsi>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <LocalizedName>k__BackingField;
    [CompilerGeneratedAttribute]
private Version <Version>k__BackingField;
    [CompilerGeneratedAttribute]
private string <VsixManifestVersion>k__BackingField;
    [CompilerGeneratedAttribute]
private VersionRange <SupportedFrameworkVersionRange>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <SystemComponent>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <AllUsers>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsExperimental>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <GlobalScope>k__BackingField;
    [CompilerGeneratedAttribute]
private InstallationPartialManifestType <PartialManifestType>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<string> <Tags>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Preview>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ShortcutPath>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <RemoveOldPerUserExtension>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <AllowClientRole>k__BackingField;
    [CompilerGeneratedAttribute]
private PropertyChangedEventHandler PropertyChanged;
    [CompilerGeneratedAttribute]
private string <ContentsPath>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ContentsAreInsideVSIXPackage>k__BackingField;
    [CompilerGeneratedAttribute]
private ExtensionType <ExtensionType>k__BackingField;
    public string Author { get; public set; }
    public string Description { get; public set; }
    public string LocalizedDescription { get; public set; }
    public Uri GettingStartedGuide { get; public set; }
    public Uri ReleaseNotes { get; public set; }
    public Byte[] ReleaseNotesContent { get; }
    public string ReleaseNotesFormat { get; public set; }
    public string Identifier { get; public set; }
    public string License { get; public set; }
    public string LicenseFormat { get; public set; }
    public bool LicenseClickThrough { get; public set; }
    public CultureInfo Locale { get; public set; }
    public Uri MoreInfoUrl { get; public set; }
    public string Icon { get; public set; }
    public string PreviewImage { get; public set; }
    public bool InstalledByMsi { get; public set; }
    public string Name { get; public set; }
    public string LocalizedName { get; public set; }
    public Version Version { get; public set; }
    public string VsixManifestVersion { get; public set; }
    public VersionRange SupportedFrameworkVersionRange { get; public set; }
    public bool SystemComponent { get; public set; }
    public bool AllUsers { get; public set; }
    public bool IsExperimental { get; public set; }
    public bool GlobalScope { get; public set; }
    public InstallationPartialManifestType PartialManifestType { get; public set; }
    public IEnumerable`1<string> Tags { get; public set; }
    public bool Preview { get; public set; }
    public IList`1<XmlElement> AdditionalElements { get; public set; }
    public IList`1<XmlElement> LocalizedAdditionalElements { get; public set; }
    public string ShortcutPath { get; public set; }
    public bool RemoveOldPerUserExtension { get; public set; }
    public bool AllowClientRole { get; public set; }
    public string ContentsPath { get; public set; }
    public bool ContentsAreInsideVSIXPackage { get; public set; }
    public string LicenseRelativePath { get; public set; }
    public string ReleaseNotesRelativePath { get; public set; }
    public ExtensionType ExtensionType { get; public set; }
    public ExtensionHeaderImpl(ExtensionHeaderFromStorage header);
    public ExtensionHeaderImpl(IExtensionHeader header);
    [CompilerGeneratedAttribute]
public sealed virtual string get_Author();
    [CompilerGeneratedAttribute]
public void set_Author(string value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_Description();
    [CompilerGeneratedAttribute]
public void set_Description(string value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_LocalizedDescription();
    [CompilerGeneratedAttribute]
public void set_LocalizedDescription(string value);
    [CompilerGeneratedAttribute]
public sealed virtual Uri get_GettingStartedGuide();
    [CompilerGeneratedAttribute]
public void set_GettingStartedGuide(Uri value);
    public sealed virtual Uri get_ReleaseNotes();
    public void set_ReleaseNotes(Uri value);
    public sealed virtual Byte[] get_ReleaseNotesContent();
    [CompilerGeneratedAttribute]
public sealed virtual string get_ReleaseNotesFormat();
    [CompilerGeneratedAttribute]
public void set_ReleaseNotesFormat(string value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_Identifier();
    [CompilerGeneratedAttribute]
public void set_Identifier(string value);
    public sealed virtual string get_License();
    public void set_License(string value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_LicenseFormat();
    [CompilerGeneratedAttribute]
public void set_LicenseFormat(string value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_LicenseClickThrough();
    [CompilerGeneratedAttribute]
public void set_LicenseClickThrough(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual CultureInfo get_Locale();
    [CompilerGeneratedAttribute]
public void set_Locale(CultureInfo value);
    [CompilerGeneratedAttribute]
public sealed virtual Uri get_MoreInfoUrl();
    [CompilerGeneratedAttribute]
public void set_MoreInfoUrl(Uri value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_Icon();
    [CompilerGeneratedAttribute]
public void set_Icon(string value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_PreviewImage();
    [CompilerGeneratedAttribute]
public void set_PreviewImage(string value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_InstalledByMsi();
    [CompilerGeneratedAttribute]
public void set_InstalledByMsi(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_LocalizedName();
    [CompilerGeneratedAttribute]
public void set_LocalizedName(string value);
    [CompilerGeneratedAttribute]
public sealed virtual Version get_Version();
    [CompilerGeneratedAttribute]
public void set_Version(Version value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_VsixManifestVersion();
    [CompilerGeneratedAttribute]
public void set_VsixManifestVersion(string value);
    [CompilerGeneratedAttribute]
public sealed virtual VersionRange get_SupportedFrameworkVersionRange();
    [CompilerGeneratedAttribute]
public void set_SupportedFrameworkVersionRange(VersionRange value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_SystemComponent();
    [CompilerGeneratedAttribute]
public void set_SystemComponent(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_AllUsers();
    [CompilerGeneratedAttribute]
public void set_AllUsers(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_IsExperimental();
    [CompilerGeneratedAttribute]
public void set_IsExperimental(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_GlobalScope();
    [CompilerGeneratedAttribute]
public void set_GlobalScope(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual InstallationPartialManifestType get_PartialManifestType();
    [CompilerGeneratedAttribute]
public void set_PartialManifestType(InstallationPartialManifestType value);
    [CompilerGeneratedAttribute]
public sealed virtual IEnumerable`1<string> get_Tags();
    [CompilerGeneratedAttribute]
public void set_Tags(IEnumerable`1<string> value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_Preview();
    [CompilerGeneratedAttribute]
public void set_Preview(bool value);
    public sealed virtual IList`1<XmlElement> get_AdditionalElements();
    public void set_AdditionalElements(IList`1<XmlElement> value);
    public sealed virtual IList`1<XmlElement> get_LocalizedAdditionalElements();
    public void set_LocalizedAdditionalElements(IList`1<XmlElement> value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_ShortcutPath();
    [CompilerGeneratedAttribute]
public void set_ShortcutPath(string value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_RemoveOldPerUserExtension();
    [CompilerGeneratedAttribute]
public void set_RemoveOldPerUserExtension(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_AllowClientRole();
    [CompilerGeneratedAttribute]
public void set_AllowClientRole(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_PropertyChanged(PropertyChangedEventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_PropertyChanged(PropertyChangedEventHandler value);
    protected void OnNotifyPropertyChanged(string propertyName);
    [CompilerGeneratedAttribute]
public string get_ContentsPath();
    [CompilerGeneratedAttribute]
public void set_ContentsPath(string value);
    [CompilerGeneratedAttribute]
public bool get_ContentsAreInsideVSIXPackage();
    [CompilerGeneratedAttribute]
public void set_ContentsAreInsideVSIXPackage(bool value);
    public void set_LicenseRelativePath(string value);
    public string get_LicenseRelativePath();
    public void set_ReleaseNotesRelativePath(string value);
    public string get_ReleaseNotesRelativePath();
    [CompilerGeneratedAttribute]
public sealed virtual ExtensionType get_ExtensionType();
    [CompilerGeneratedAttribute]
public void set_ExtensionType(ExtensionType value);
}
public class Microsoft.VisualStudio.ExtensionManager.ExtensionImpl : object {
    protected List`1<IExtensionContent> contentTypes;
    protected string extensionType;
    protected ExtensionHeaderImpl header;
    protected ExtensionInstallerInformationImpl installerInformation;
    protected IEnumerable`1<string> packedExtensionsVsixIDs;
    protected ExtensionReferenceCollection references;
    protected VsixType vsixType;
    private static string GlobalScopeID;
    private static Version Dev17Version;
    private static Lazy`1<XmlSerializer> packageManifestSerializer;
    private static Lazy`1<XmlSerializer> packageLanguagePackManifestSerializer;
    private static ILookup`2<string, IExtensionRequirement> EmptyTargets;
    private static XmlReaderSettings genericReaderSettings;
    private static XmlReaderSettings languagePackReaderSettings;
    private static ILookup`2<string, string> productHierarchy;
    private static XmlReaderSettings vsixManifestReaderSettings;
    private IList`1<XmlElement> additionalElements;
    private IList`1<XmlElement> localizedAdditionalElements;
    private ILookup`2<string, IExtensionRequirement> targets;
    [CompilerGeneratedAttribute]
private Lazy`1<IEnumerable`1<string>> <ExtensionPackInfoLazy>k__BackingField;
    [CompilerGeneratedAttribute]
private Version <SchemaVersion>k__BackingField;
    [CompilerGeneratedAttribute]
private PropertyChangedEventHandler PropertyChanged;
    public string Identifier { get; }
    public VsixType PackageType { get; }
    protected Lazy`1<IEnumerable`1<string>> ExtensionPackInfoLazy { get; protected set; }
    private static ILookup`2<string, string> ProductHierachy { get; }
    public IList`1<XmlElement> AdditionalElements { get; }
    public IEnumerable`1<IExtensionContent> Content { get; }
    public IExtensionHeader Header { get; }
    public IExtensionInstallerInformation InstallerInformation { get; }
    public IList`1<XmlElement> LocalizedAdditionalElements { get; }
    public IEnumerable`1<string> PackedExtensionsVsixIDs { get; }
    public IEnumerable`1<IExtensionReference> References { get; }
    public Version SchemaVersion { get; protected set; }
    public IEnumerable`1<IExtensionRequirement> Targets { get; }
    public string Type { get; }
    public ExtensionImpl(string path);
    protected ExtensionImpl(ExtensionFromStorageImpl extension);
    public ExtensionImpl(IExtension extension);
    private static ExtensionImpl();
    public string get_Identifier();
    public sealed virtual VsixType get_PackageType();
    [CompilerGeneratedAttribute]
protected Lazy`1<IEnumerable`1<string>> get_ExtensionPackInfoLazy();
    [CompilerGeneratedAttribute]
protected void set_ExtensionPackInfoLazy(Lazy`1<IEnumerable`1<string>> value);
    private static ILookup`2<string, string> get_ProductHierachy();
    public static IExtension CreateExtensionFromManifest(Stream manifestStream);
    public static IExtension CreateLocalizedExtensionInfoFromManifest(Stream manifestStream, string localeRelativeRoot);
    public static string EscapeString(string s);
    public static void LoadSchemas();
    public static string UnescapeString(string s);
    public sealed virtual IList`1<XmlElement> get_AdditionalElements();
    public sealed virtual IEnumerable`1<IExtensionContent> get_Content();
    public sealed virtual IExtensionHeader get_Header();
    public sealed virtual IExtensionInstallerInformation get_InstallerInformation();
    public sealed virtual IList`1<XmlElement> get_LocalizedAdditionalElements();
    public sealed virtual IEnumerable`1<string> get_PackedExtensionsVsixIDs();
    public sealed virtual IEnumerable`1<IExtensionReference> get_References();
    [CompilerGeneratedAttribute]
public sealed virtual Version get_SchemaVersion();
    [CompilerGeneratedAttribute]
protected void set_SchemaVersion(Version value);
    public sealed virtual IEnumerable`1<IExtensionRequirement> get_Targets();
    public sealed virtual string get_Type();
    public sealed virtual bool IsProductSupported(string productId, Version version, ProductArchitecture productArchitecture, IDictionary`2<string, string> additionalProperties);
    [CompilerGeneratedAttribute]
public sealed virtual void add_PropertyChanged(PropertyChangedEventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_PropertyChanged(PropertyChangedEventHandler value);
    protected void OnPropertyChanged(string propertyName);
    public static void UnloadSchemas();
    public sealed virtual bool CanHotload();
    protected void LocalizeExtension(string langPackManifestPath, string localeRelativeRoot);
    protected void ReadLanguageManifest(Stream manifestStream, string localeRelativeRoot);
    protected void ReadManifest(Stream manifestStream);
    protected void ReadPackageLanguagePackManifest(XmlReader reader, string localeRelativeRoot);
    protected void ReadPackageManifest(XmlReader reader);
    protected void ReadVSIXLanguagePackManifest(XmlReader langPackManifestReader, string localeRelativeRoot);
    protected void ReadVSIXManifest(XmlReader xmlReader);
    private static XmlReaderSettings CreateGenericReaderSettings();
    private static XmlReaderSettings CreateXmlReaderSettingsForSchema(Byte[] schemaData);
    [IteratorStateMachineAttribute("Microsoft.VisualStudio.ExtensionManager.ExtensionImpl/<GetProductChain>d__76")]
private static IEnumerable`1<KeyValuePair`2<string, string>> GetProductChain();
    private static XmlReader GetVSIXValidatingReader(XmlReader vsixManifestReader, bool languagePackReader);
    private static void IgnoreErrorsValidationReader(object sender, ValidationEventArgs e);
    private string CombinePath(string root, string relativePath);
    private void ExtractContent(VsixContent content, string localeRelativeRoot);
    private void ExtractContentRelativePath(VsixContent content, ExtensionContentImpl contentImpl, string localeRelativeRoot, UInt32 itemIndex);
    private void ExtractDeserializedVSIXManifestData(Vsix data);
    private ProductArchitecture ExtractInstallationTargetPlatformArchitecture(string productArchitecture, VersionRange versionRange);
    private void ExtractInstallerData(Installer installerInfo);
    private void ExtractLocaleManifestData(ILanguagePackManifestSchema manifest, string localeRelativeRoot, bool localeSpecific);
    private void ExtractManifestData(PackageManifest manifest);
    private void ExtractPrerequisiteData(Prerequisites prerequisites);
    private VersionRange ExtractReferences(IEnumerable`1<DependencyInfo> elements, bool localeSpecific, bool requireNameAttribute, ExtensionReferenceCollection references);
    private void FailIfTrue(bool value, ErrorInfo info);
    private IList`1<XmlElement> GetAdditionalElementList(IList`1<XmlElement> elements);
    private ErrorInfo GetAttributeInfo(string parentName, string propertyName);
    private ErrorInfo GetElementInfo(string parentName, string propertyName);
    private bool IsNullOrWhiteSpace(string s);
    private bool IsProductSupportedCore(string productId, Version version, ProductArchitecture productArchitecture, IDictionary`2<string, string> additionalProperties);
    private IDictionary`2<string, string> MergeAttributes(IList`1<XmlAttribute> attributes, IDictionary`2<string, string> baseAttributes);
    private void ProcessSupportedProducts(Vsix data, List`1<IExtensionRequirement> targets);
    private void ReadDocumentNameAndVersion(Stream stream, String& nspace, String& name, Version& version);
    private string ResolveContentPath(string localeRelativeRoot, string path);
    private ILookup`2<string, IExtensionRequirement> ToLookup(IEnumerable`1<IExtensionRequirement> requirements);
    private ILookup`2<string, IExtensionRequirement> ToLookup(IEnumerable`1<ExtensionRequirementFromStorage> requirements);
    private bool VerifyAttributes(IExtensionRequirement requirement, IDictionary`2<string, string> additionalProperties);
    private IList`1<T> VerifyRequiredCount(IList`1<T> value, int minCount, int maxCount, ErrorInfo info);
    private T VerifyRequiredValue(T value, ErrorInfo info, bool isRequired);
    private string VerifyString(string value, ErrorInfo info, bool isRequired, int maxLength, string defaultValue);
    private void VerifyStringNotPresent(string value, ErrorInfo info);
    private T VerifyStringValue(string value, ErrorInfo info, Func`2<string, T> selector, bool isRequired, int maxLength, T defaultValue);
    private string VerifyValidPath(string path);
    private static XmlSerializer CreateXmlSerializer(Type type);
}
public class Microsoft.VisualStudio.ExtensionManager.ExtensionInstallerActionImpl : object {
    [CompilerGeneratedAttribute]
private string <ActionTypeName>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<XmlElement> <AdditionalElements>k__BackingField;
    [CompilerGeneratedAttribute]
private IDictionary`2<string, string> <Attributes>k__BackingField;
    [CompilerGeneratedAttribute]
private string <RelativePath>k__BackingField;
    public string ActionTypeName { get; public set; }
    public IList`1<XmlElement> AdditionalElements { get; public set; }
    public IDictionary`2<string, string> Attributes { get; public set; }
    public string RelativePath { get; public set; }
    public ExtensionInstallerActionImpl(IExtensionInstallerAction installerAction);
    public ExtensionInstallerActionImpl(ExtensionInstallerActionFromStorage installerAction);
    [CompilerGeneratedAttribute]
public sealed virtual string get_ActionTypeName();
    [CompilerGeneratedAttribute]
public void set_ActionTypeName(string value);
    [CompilerGeneratedAttribute]
public sealed virtual IList`1<XmlElement> get_AdditionalElements();
    [CompilerGeneratedAttribute]
public void set_AdditionalElements(IList`1<XmlElement> value);
    [CompilerGeneratedAttribute]
public sealed virtual IDictionary`2<string, string> get_Attributes();
    [CompilerGeneratedAttribute]
public void set_Attributes(IDictionary`2<string, string> value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_RelativePath();
    [CompilerGeneratedAttribute]
public void set_RelativePath(string value);
}
public class Microsoft.VisualStudio.ExtensionManager.ExtensionInstallerInformationImpl : object {
    [CompilerGeneratedAttribute]
private IEnumerable`1<IExtensionInstallerAction> <Actions>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Chip>k__BackingField;
    protected ExtensionReferenceCollection _references;
    public IEnumerable`1<IExtensionInstallerAction> Actions { get; internal set; }
    public string Chip { get; public set; }
    public IEnumerable`1<IExtensionReference> References { get; }
    public ExtensionInstallerInformationImpl(IExtensionInstallerInformation installerInformation);
    public ExtensionInstallerInformationImpl(ExtensionInstallerInformationFromStorage installerInformation);
    [CompilerGeneratedAttribute]
public sealed virtual IEnumerable`1<IExtensionInstallerAction> get_Actions();
    [CompilerGeneratedAttribute]
internal void set_Actions(IEnumerable`1<IExtensionInstallerAction> value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_Chip();
    [CompilerGeneratedAttribute]
public void set_Chip(string value);
    public sealed virtual IEnumerable`1<IExtensionReference> get_References();
    public void AddReferences(IEnumerable`1<ExtensionReferenceImpl> references);
}
internal class Microsoft.VisualStudio.ExtensionManager.ExtensionManagerWebClient : object {
    private WebClient client;
    private bool isDisposed;
    public sealed virtual void add_DownloadFileCompleted(AsyncCompletedEventHandler value);
    public sealed virtual void remove_DownloadFileCompleted(AsyncCompletedEventHandler value);
    public sealed virtual void add_DownloadProgressChanged(DownloadProgressChangedEventHandler value);
    public sealed virtual void remove_DownloadProgressChanged(DownloadProgressChangedEventHandler value);
    public sealed virtual void DownloadFile(Uri address, string fileName);
    public sealed virtual void DownloadFileAsync(Uri address, string fileName, object userToken);
    public sealed virtual void CancelAsync();
    protected void Dispose(bool disposing);
    public sealed virtual void Dispose();
}
[ExtensionAttribute]
internal static class Microsoft.VisualStudio.ExtensionManager.ExtensionMethods : object {
    [ExtensionAttribute]
public static bool IsRemotableExtension(IExtension extension);
    [ExtensionAttribute]
internal static bool IsProductSupported(IExtension extension, IEngineHost host);
}
[DataContractAttribute]
public class Microsoft.VisualStudio.ExtensionManager.ExtensionPack : object {
    [CompilerGeneratedAttribute]
private string <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Description>k__BackingField;
    [CompilerGeneratedAttribute]
private string <version>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<PackedExtension> <PackedExtensions>k__BackingField;
    [DataMemberAttribute]
public string Id { get; public set; }
    [DataMemberAttribute]
public string Name { get; public set; }
    [DataMemberAttribute]
public string Description { get; public set; }
    [DataMemberAttribute]
public string version { get; public set; }
    [DataMemberAttribute]
public IList`1<PackedExtension> PackedExtensions { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Id();
    [CompilerGeneratedAttribute]
public void set_Id(string value);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public string get_Description();
    [CompilerGeneratedAttribute]
public void set_Description(string value);
    [CompilerGeneratedAttribute]
public string get_version();
    [CompilerGeneratedAttribute]
public void set_version(string value);
    [CompilerGeneratedAttribute]
public IList`1<PackedExtension> get_PackedExtensions();
    [CompilerGeneratedAttribute]
public void set_PackedExtensions(IList`1<PackedExtension> value);
}
public class Microsoft.VisualStudio.ExtensionManager.ExtensionReferenceCollection : KeyedCollection`2<string, ExtensionReferenceImpl> {
    public ExtensionReferenceCollection(IEnumerable`1<ExtensionReferenceFromStorage> collection);
    public ExtensionReferenceCollection(IEnumerable`1<ExtensionReferenceImpl> collection);
    public ExtensionReferenceCollection(IEnumerable`1<IExtensionReference> collection);
    protected virtual string GetKeyForItem(ExtensionReferenceImpl item);
    public bool TryGetValue(string identifier, ExtensionReferenceImpl& reference);
    private static ExtensionReferenceImpl ToReferenceImpl(IExtensionReference reference);
    [IteratorStateMachineAttribute("Microsoft.VisualStudio.ExtensionManager.ExtensionReferenceCollection/<System-Collections-Generic-IEnumerable<Microsoft-VisualStudio-ExtensionManager-IExtensionReference>-GetEnumerator>d__7")]
private sealed virtual override IEnumerator`1<IExtensionReference> System.Collections.Generic.IEnumerable<Microsoft.VisualStudio.ExtensionManager.IExtensionReference>.GetEnumerator();
    public void MergeCollection(IEnumerable`1<ExtensionReferenceImpl> collection);
}
public class Microsoft.VisualStudio.ExtensionManager.ExtensionReferenceImpl : ExtensionReferenceBase {
    public ExtensionReferenceImpl(ExtensionReferenceFromStorage reference);
    public ExtensionReferenceImpl(IExtensionReference reference);
}
public class Microsoft.VisualStudio.ExtensionManager.ExtensionRepositoryConfig : object {
    private string uri;
    private string locDisplayName;
    private string displayName;
    private Dictionary`2<string, string> propertyErrors;
    [CompilerGeneratedAttribute]
private Guid <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Enabled>k__BackingField;
    [CompilerGeneratedAttribute]
private UInt32 <Priority>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Protocol>k__BackingField;
    [CompilerGeneratedAttribute]
private Guid <DisplayNamePackageGuid>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DisplayNameResourceID>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <UserConfigured>k__BackingField;
    [CompilerGeneratedAttribute]
private PropertyChangedEventHandler PropertyChanged;
    public string Uri { get; public set; }
    private string System.ComponentModel.IDataErrorInfo.Error { get; }
    private string System.ComponentModel.IDataErrorInfo.Item { get; }
    public Guid Id { get; public set; }
    public bool Enabled { get; public set; }
    public UInt32 Priority { get; public set; }
    public string Protocol { get; public set; }
    public string DisplayName { get; public set; }
    public Guid DisplayNamePackageGuid { get; public set; }
    public string DisplayNameResourceID { get; public set; }
    public bool UserConfigured { get; public set; }
    [DesignerSerializationVisibilityAttribute("0")]
public string LocDisplayName { get; }
    public sealed virtual string get_Uri();
    public sealed virtual void set_Uri(string value);
    private sealed virtual override string System.ComponentModel.IDataErrorInfo.get_Error();
    private sealed virtual override string System.ComponentModel.IDataErrorInfo.get_Item(string columnName);
    [CompilerGeneratedAttribute]
public sealed virtual Guid get_Id();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Id(Guid value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_Enabled();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Enabled(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual UInt32 get_Priority();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Priority(UInt32 value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_Protocol();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Protocol(string value);
    public sealed virtual string get_DisplayName();
    public sealed virtual void set_DisplayName(string value);
    [CompilerGeneratedAttribute]
public sealed virtual Guid get_DisplayNamePackageGuid();
    [CompilerGeneratedAttribute]
public sealed virtual void set_DisplayNamePackageGuid(Guid value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_DisplayNameResourceID();
    [CompilerGeneratedAttribute]
public sealed virtual void set_DisplayNameResourceID(string value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_UserConfigured();
    [CompilerGeneratedAttribute]
public sealed virtual void set_UserConfigured(bool value);
    public sealed virtual string get_LocDisplayName();
    private string Validate();
    private void OnPropertyChanged(string propertyName);
    [CompilerGeneratedAttribute]
public sealed virtual void add_PropertyChanged(PropertyChangedEventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_PropertyChanged(PropertyChangedEventHandler value);
    public static string ValidateName(string name);
    public static string ValidateUri(string uriString);
}
public class Microsoft.VisualStudio.ExtensionManager.ExtensionRequirementImpl : ExtensionRequirementBase {
    public ExtensionRequirementImpl(IExtensionRequirement reference);
}
[ExtensionAttribute]
public static class Microsoft.VisualStudio.ExtensionManager.Extensions : object {
    [ExtensionAttribute]
public static string ToUncPath(Uri uri);
}
public class Microsoft.VisualStudio.ExtensionManager.ExtensionScheduleLists : object {
    private static ExtensionScheduleLists _instance;
    private ObservableCollection`1<IScheduledExtension> _scheduledExtensionInstalls;
    private ObservableCollection`1<IScheduledExtension> _scheduledExtensionUpdates;
    private ObservableCollection`1<IScheduledExtension> _scheduledExtensionUninstalls;
    private ObservableCollection`1<IScheduledExtension> _scheduledExtensionDowngrades;
    public static ExtensionScheduleLists Instance { get; }
    public ObservableCollection`1<IScheduledExtension> ScheduledExtensionInstalls { get; }
    public ObservableCollection`1<IScheduledExtension> ScheduledExtensionUpdates { get; }
    public ObservableCollection`1<IScheduledExtension> ScheduledExtensionUninstalls { get; }
    public ObservableCollection`1<IScheduledExtension> ScheduledExtensionDowngrades { get; }
    public bool ExtensionSdksAreScheduled { get; }
    public bool RegularExtensionAreScheduled { get; }
    public IEnumerable`1<IScheduledExtension> AllScheduledExtensions { get; }
    public bool AnyExtensionsScheduled { get; }
    public static ExtensionScheduleLists get_Instance();
    public sealed virtual ObservableCollection`1<IScheduledExtension> get_ScheduledExtensionInstalls();
    public sealed virtual ObservableCollection`1<IScheduledExtension> get_ScheduledExtensionUpdates();
    public sealed virtual ObservableCollection`1<IScheduledExtension> get_ScheduledExtensionUninstalls();
    public sealed virtual ObservableCollection`1<IScheduledExtension> get_ScheduledExtensionDowngrades();
    public sealed virtual bool get_ExtensionSdksAreScheduled();
    public sealed virtual bool get_RegularExtensionAreScheduled();
    [IteratorStateMachineAttribute("Microsoft.VisualStudio.ExtensionManager.ExtensionScheduleLists/<get_AllScheduledExtensions>d__21")]
public sealed virtual IEnumerable`1<IScheduledExtension> get_AllScheduledExtensions();
    public sealed virtual void ScheduleInstall(IScheduledExtension extension);
    public sealed virtual void ScheduleUpdate(IScheduledExtension extension);
    public sealed virtual void ScheduleUninstall(IScheduledExtension extension);
    public sealed virtual void ScheduleDowngrade(IScheduledExtension extension);
    public sealed virtual bool CanScheduleInstall(string id);
    public sealed virtual bool CanScheduleUpdate(string id);
    public sealed virtual bool CanScheduleUninstall(string id);
    public sealed virtual bool CanScheduleDowngrade(string id);
    public sealed virtual void UnscheduleInstall(string id);
    public sealed virtual void UnscheduleUpdate(string id);
    public sealed virtual void UnscheduleUninstall(string id);
    public sealed virtual void UnscheduleDowngrade(string id);
    private static void IterateAndRemoveFromCollection(ObservableCollection`1<IScheduledExtension> scheduledExtension, string id);
    public void UnscheduleFromAllLists(string id);
    public sealed virtual void Update(IExtensionScheduleLists updatedList);
    public sealed virtual bool get_AnyExtensionsScheduled();
    public sealed virtual void Clear();
}
internal class Microsoft.VisualStudio.ExtensionManager.ExtensionSdkImpl : ExtensionRequirementImpl {
    [CompilerGeneratedAttribute]
private string <TargetPlatformIdentifier>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TargetPlatformVersion>k__BackingField;
    [CompilerGeneratedAttribute]
private string <SdkName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <SdkVersion>k__BackingField;
    public string TargetPlatformIdentifier { get; public set; }
    public string TargetPlatformVersion { get; public set; }
    public string SdkName { get; public set; }
    public string SdkVersion { get; public set; }
    internal ExtensionSdkImpl(IExtensionSdk reference);
    [CompilerGeneratedAttribute]
public sealed virtual string get_TargetPlatformIdentifier();
    [CompilerGeneratedAttribute]
public void set_TargetPlatformIdentifier(string value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_TargetPlatformVersion();
    [CompilerGeneratedAttribute]
public void set_TargetPlatformVersion(string value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_SdkName();
    [CompilerGeneratedAttribute]
public void set_SdkName(string value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_SdkVersion();
    [CompilerGeneratedAttribute]
public void set_SdkVersion(string value);
}
public class Microsoft.VisualStudio.ExtensionManager.ExtensionSettingsStoreListEntry : ValueType {
    [CompilerGeneratedAttribute]
private ExtensionSettingsStoreListKey <PropertyName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <PropertyValue>k__BackingField;
    public ExtensionSettingsStoreListKey PropertyName { get; public set; }
    public string PropertyValue { get; public set; }
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public ExtensionSettingsStoreListKey get_PropertyName();
    [CompilerGeneratedAttribute]
public void set_PropertyName(ExtensionSettingsStoreListKey value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public string get_PropertyValue();
    [CompilerGeneratedAttribute]
public void set_PropertyValue(string value);
    public void SetPropertyValueAsPath(string value);
}
public class Microsoft.VisualStudio.ExtensionManager.ExtensionSettingsStoreListKey : object {
    [CompilerGeneratedAttribute]
private string <Identifier>k__BackingField;
    [CompilerGeneratedAttribute]
private Version <Version>k__BackingField;
    public string Identifier { get; }
    public Version Version { get; }
    public ExtensionSettingsStoreListKey(string identifier, Version version);
    [CompilerGeneratedAttribute]
public string get_Identifier();
    [CompilerGeneratedAttribute]
public Version get_Version();
    public virtual string ToString();
    public static ExtensionSettingsStoreListKey Parse(string extension);
    public static string GetKeyString(string identifier, string version);
    public sealed virtual bool Equals(ExtensionSettingsStoreListKey other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
[DataContractAttribute]
public class Microsoft.VisualStudio.ExtensionManager.ExtensionUpdate : object {
    [CompilerGeneratedAttribute]
private Guid <RepositoryId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Identifier>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Description>k__BackingField;
    [CompilerGeneratedAttribute]
private Version <UpdateVersion>k__BackingField;
    [CompilerGeneratedAttribute]
private int <LCID>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <DisplayIfNotPresent>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsVSUpdate>k__BackingField;
    [CompilerGeneratedAttribute]
private string <SetupCommandLine>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ApplicableSKUs>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsAutoUpdate>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsPerMachine>k__BackingField;
    [CompilerGeneratedAttribute]
private IOnlineExtension <RepositoryEntry>k__BackingField;
    [DataMemberAttribute]
public Guid RepositoryId { get; private set; }
    [DataMemberAttribute]
public string Identifier { get; private set; }
    [DataMemberAttribute]
public string Name { get; private set; }
    [DataMemberAttribute]
public string Description { get; private set; }
    [DataMemberAttribute]
public Version UpdateVersion { get; private set; }
    [DataMemberAttribute]
public int LCID { get; private set; }
    [DataMemberAttribute]
public bool DisplayIfNotPresent { get; private set; }
    [DataMemberAttribute]
public bool IsVSUpdate { get; private set; }
    [DataMemberAttribute]
public string SetupCommandLine { get; private set; }
    [DataMemberAttribute]
public string ApplicableSKUs { get; private set; }
    [DataMemberAttribute]
public bool IsAutoUpdate { get; private set; }
    [DataMemberAttribute]
public bool IsPerMachine { get; private set; }
    public IOnlineExtension RepositoryEntry { get; private set; }
    public ExtensionUpdate(Guid repositoryId, string identifier, string name, string description, Version updateVersion, int lcid, bool isAutoUpdate, bool displayIfNotPresent, bool isVSUpdate, string setupCommandLine, string applicableSKUs, IOnlineExtension repositoryEntry, bool isPerMachine);
    [CompilerGeneratedAttribute]
public Guid get_RepositoryId();
    [CompilerGeneratedAttribute]
private void set_RepositoryId(Guid value);
    [CompilerGeneratedAttribute]
public string get_Identifier();
    [CompilerGeneratedAttribute]
private void set_Identifier(string value);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
private void set_Name(string value);
    [CompilerGeneratedAttribute]
public string get_Description();
    [CompilerGeneratedAttribute]
private void set_Description(string value);
    [CompilerGeneratedAttribute]
public Version get_UpdateVersion();
    [CompilerGeneratedAttribute]
private void set_UpdateVersion(Version value);
    [CompilerGeneratedAttribute]
public int get_LCID();
    [CompilerGeneratedAttribute]
private void set_LCID(int value);
    [CompilerGeneratedAttribute]
public bool get_DisplayIfNotPresent();
    [CompilerGeneratedAttribute]
private void set_DisplayIfNotPresent(bool value);
    [CompilerGeneratedAttribute]
public bool get_IsVSUpdate();
    [CompilerGeneratedAttribute]
private void set_IsVSUpdate(bool value);
    [CompilerGeneratedAttribute]
public string get_SetupCommandLine();
    [CompilerGeneratedAttribute]
private void set_SetupCommandLine(string value);
    [CompilerGeneratedAttribute]
public string get_ApplicableSKUs();
    [CompilerGeneratedAttribute]
private void set_ApplicableSKUs(string value);
    [CompilerGeneratedAttribute]
public bool get_IsAutoUpdate();
    [CompilerGeneratedAttribute]
private void set_IsAutoUpdate(bool value);
    [CompilerGeneratedAttribute]
public bool get_IsPerMachine();
    [CompilerGeneratedAttribute]
private void set_IsPerMachine(bool value);
    [CompilerGeneratedAttribute]
public IOnlineExtension get_RepositoryEntry();
    [CompilerGeneratedAttribute]
private void set_RepositoryEntry(IOnlineExtension value);
    public virtual string ToString();
}
[DataContractAttribute]
public class Microsoft.VisualStudio.ExtensionManager.ExtensionVersion : object {
    [CompilerGeneratedAttribute]
private string <Version>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Flags>k__BackingField;
    [CompilerGeneratedAttribute]
private string <LastUpdated>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<Property> <Properties>k__BackingField;
    [DataMemberAttribute]
public string Version { get; public set; }
    [DataMemberAttribute]
public string Flags { get; public set; }
    [DataMemberAttribute]
public string LastUpdated { get; public set; }
    [DataMemberAttribute]
public IList`1<Property> Properties { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Version();
    [CompilerGeneratedAttribute]
public void set_Version(string value);
    [CompilerGeneratedAttribute]
public string get_Flags();
    [CompilerGeneratedAttribute]
public void set_Flags(string value);
    [CompilerGeneratedAttribute]
public string get_LastUpdated();
    [CompilerGeneratedAttribute]
public void set_LastUpdated(string value);
    [CompilerGeneratedAttribute]
public IList`1<Property> get_Properties();
    [CompilerGeneratedAttribute]
public void set_Properties(IList`1<Property> value);
}
[DataContractAttribute]
public class Microsoft.VisualStudio.ExtensionManager.Filter : object {
    [CompilerGeneratedAttribute]
private string <FilterType>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Value>k__BackingField;
    [DataMemberAttribute]
public string FilterType { get; public set; }
    [DataMemberAttribute]
public string Value { get; public set; }
    public Filter(string filterType, string value);
    [CompilerGeneratedAttribute]
public string get_FilterType();
    [CompilerGeneratedAttribute]
public void set_FilterType(string value);
    [CompilerGeneratedAttribute]
public string get_Value();
    [CompilerGeneratedAttribute]
public void set_Value(string value);
}
public static class Microsoft.VisualStudio.ExtensionManager.HashHelpers : object {
    private static int HashSeed;
    private static int HashCombiningMultiplier;
    public static int GetStableHashCode(string s, bool ignoreCase);
    public static int CombineHashes(int hash1, int hash2);
}
public interface Microsoft.VisualStudio.ExtensionManager.IAutoUpdateOutputData {
    public bool AutoUpdateExtensionsEnabled { get; }
    public IEnumerable`1<IAutoUpdateResult> AutoUpdateResults { get; }
    public IEnumerable`1<IInstalledExtension> UpdatedExtensions { get; }
    public abstract virtual bool get_AutoUpdateExtensionsEnabled();
    public abstract virtual IEnumerable`1<IAutoUpdateResult> get_AutoUpdateResults();
    public abstract virtual IEnumerable`1<IInstalledExtension> get_UpdatedExtensions();
}
public interface Microsoft.VisualStudio.ExtensionManager.IAutoUpdateResult {
    public string Identifier { get; }
    public string Name { get; }
    public Version Version { get; }
    public ExtensionUpdate Source { get; }
    public AutoUpdateProgress State { get; }
    public Exception Error { get; }
    public abstract virtual string get_Identifier();
    public abstract virtual string get_Name();
    public abstract virtual Version get_Version();
    public abstract virtual ExtensionUpdate get_Source();
    public abstract virtual AutoUpdateProgress get_State();
    public abstract virtual Exception get_Error();
}
internal interface Microsoft.VisualStudio.ExtensionManager.ILanguagePackManifestSchema {
    public XmlElement[] Any { get; }
    public Asset[] Assets { get; }
    public DependencyInfo[] Dependencies { get; }
    public IMetadataSchema MetadataSchema { get; }
    public string Version { get; }
    public abstract virtual XmlElement[] get_Any();
    public abstract virtual Asset[] get_Assets();
    public abstract virtual DependencyInfo[] get_Dependencies();
    public abstract virtual IMetadataSchema get_MetadataSchema();
    public abstract virtual string get_Version();
}
public interface Microsoft.VisualStudio.ExtensionManager.IMetadataSchema {
    public string DisplayName { get; }
    public string Description { get; }
    public string MoreInfo { get; }
    public string License { get; }
    public string GettingStartedGuide { get; }
    public string ReleaseNotes { get; }
    public string Icon { get; }
    public string PreviewImage { get; }
    public string Version { get; }
    public string Tags { get; }
    public bool Preview { get; }
    public XmlElement[] Any { get; }
    public bool RemoveOldPerUserExtension { get; }
    public bool AllowClientRole { get; }
    public abstract virtual string get_DisplayName();
    public abstract virtual string get_Description();
    public abstract virtual string get_MoreInfo();
    public abstract virtual string get_License();
    public abstract virtual string get_GettingStartedGuide();
    public abstract virtual string get_ReleaseNotes();
    public abstract virtual string get_Icon();
    public abstract virtual string get_PreviewImage();
    public abstract virtual string get_Version();
    public abstract virtual string get_Tags();
    public abstract virtual bool get_Preview();
    public abstract virtual XmlElement[] get_Any();
    public abstract virtual bool get_RemoveOldPerUserExtension();
    public abstract virtual bool get_AllowClientRole();
}
[GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "17.0.0.0")]
[DebuggerNonUserCodeAttribute]
[CompilerGeneratedAttribute]
public class Microsoft.VisualStudio.ExtensionManager.Impl.ExtensionEngineResources : object {
    private static ResourceManager resourceMan;
    private static CultureInfo resourceCulture;
    [EditorBrowsableAttribute("2")]
public static ResourceManager ResourceManager { get; }
    [EditorBrowsableAttribute("2")]
public static CultureInfo Culture { get; public set; }
    public static string ErrorAlreadyInstalled { get; }
    public static string ErrorBadAllUserExtension { get; }
    public static string ErrorBlockedOnProcesses { get; }
    public static string ErrorBreaksExistingExtensions { get; }
    public static string ErrorCannotDisablePackComponent { get; }
    public static string ErrorCannotEnableDependency { get; }
    public static string ErrorCertCheckFailed { get; }
    public static string ErrorCertFileNotFound { get; }
    public static string ErrorCertificateFieldsNotFound { get; }
    public static string ErrorCertificateFieldsNotFoundInUpdate { get; }
    public static string ErrorCertPackagePathNotFound { get; }
    public static string ErrorDirectoryInUse { get; }
    public static string ErrorDisallowedPackageTypesInCatalog { get; }
    public static string ErrorExtensionAndPlatformSigned { get; }
    public static string ErrorFilesInUse { get; }
    public static string ErrorFilesInUseAdditional { get; }
    public static string ErrorInconsistentManifestValues { get; }
    public static string ErrorInstallByMSI { get; }
    public static string ErrorInstallExtensionSDKDirectoryExists { get; }
    public static string ErrorInstallRequiresElevation { get; }
    public static string ErrorInvalidAttributeValue { get; }
    public static string ErrorInvalidAttributeValueLength { get; }
    public static string ErrorInvalidCount { get; }
    public static string ErrorInvalidElementValue { get; }
    public static string ErrorInvalidElementValueLength { get; }
    public static string ErrorInvalidInstallationTargetPlatformArchitecture { get; }
    public static string ErrorInvalidJsonManifest { get; }
    public static string ErrorInvalidLanguagePackManifestRootElement { get; }
    public static string ErrorInvalidManifest { get; }
    public static string ErrorInvalidManifestFileExtension { get; }
    public static string ErrorInvalidManifestRootElement { get; }
    public static string ErrorInvalidMinimumCount { get; }
    public static string ErrorInvalidPath { get; }
    public static string ErrorInvalidPath_Args2 { get; }
    public static string ErrorInvalidVSIX { get; }
    public static string ErrorInvalidVsixIdInCatalog_Args1 { get; }
    public static string ErrorLowerPackage_Args1 { get; }
    public static string ErrorMissingComponent { get; }
    public static string ErrorMissingEula { get; }
    public static string ErrorMissingInstallationTargetPlatformArchitecture { get; }
    public static string ErrorMissingLocalizedResources_Args2 { get; }
    public static string ErrorMissingManifest { get; }
    public static string ErrorMissingNameOrAuthor { get; }
    public static string ErrorMissingPackage_Args1 { get; }
    public static string ErrorMissingPackage1_Args1 { get; }
    public static string ErrorMissingReferences { get; }
    public static string ErrorMissingRequiredAttribute { get; }
    public static string ErrorMissingRequiredElement { get; }
    public static string ErrorMissingTargetFramework { get; }
    public static string ErrorNestedExtensionFailed { get; }
    public static string ErrorNestedExtensionInitialization { get; }
    public static string ErrorNestedExtensionReferenceIdMismatch { get; }
    public static string ErrorNestedVsixBrokenInternalDependency { get; }
    public static string ErrorNoPerUserOutOfConeFiles { get; }
    public static string ErrorNotValidSignedAllUserExtension { get; }
    public static string ErrorNotValidSignedPerUserExtension { get; }
    public static string ErrorOutOfDiskSpaceExceptionBody { get; }
    public static string ErrorOutOfDiskSpaceExceptionTitle { get; }
    public static string ErrorPerUserExperimentPartialManifestType { get; }
    public static string ErrorReferenceConstraint { get; }
    public static string ErrorUninstallDependencyException { get; }
    public static string ErrorUninstallDependentComponent { get; }
    public static string ErrorUninstallMSIExtension { get; }
    public static string ErrorUninstallOrphanedComponentRequiresElevation { get; }
    public static string ErrorUninstallRequiresElevation { get; }
    public static string ErrorUnknownProtocol { get; }
    public static string ErrorUnlistedPart { get; }
    public static string ErrorUnsignedCatalog { get; }
    public static string ErrorUnsupportedProduct { get; }
    public static string ErrorUpgradeInProgress { get; }
    public static string ErrorVsixVersionOutOfRange { get; }
    public static string InstalledByMultipleText { get; }
    public static string InvalidReleaseNotesText { get; }
    public static string OnlineRatingToolTipFormatString { get; }
    public static string OnlineVotesMultiple { get; }
    public static string OnlineVotesSingle { get; }
    public static string OnlineVotesStringFormat { get; }
    public static string ProductUpdatesNodeText { get; }
    public static string ReleaseNotesDialogTitle { get; }
    public static string SetupInstanceNotLaunchable { get; }
    public static string SetupLogEmitted { get; }
    public static string Sharepoint_ListNotFoundOnServer { get; }
    public static string StreamNotSeekable { get; }
    public static string TaskCreatedSuccessfully { get; }
    public static string TaskDoesNotExist { get; }
    public static string TaskExists { get; }
    public static string TaskNotRegistered { get; }
    public static string TaskServiceNotConnected { get; }
    public static string ToolsOptions_InvalidName { get; }
    public static string ToolsOptions_InvalidURL { get; }
    public static string UnlistedPartLogHeader { get; }
    public static string UnscheduleDowngradeExtension { get; }
    public static string UnscheduleExtension { get; }
    public static string UnscheduleInstallExtension { get; }
    public static string UnscheduleUninstallExtension { get; }
    public static string UnscheduleUpdateExtension { get; }
    public static string ValidateError_InvalidOperation { get; }
    public static string ValidateError_StringEmpty { get; }
    public static string VisualStudioGalleryNodeText { get; }
    public static string VisualStudioUpdateDescription { get; }
    public static string VisualStudioUpdateTitle { get; }
    public static Byte[] VSIXLanguagePackSchema { get; }
    public static Byte[] VSIXManifestSchema { get; }
    public static ResourceManager get_ResourceManager();
    public static CultureInfo get_Culture();
    public static void set_Culture(CultureInfo value);
    public static string get_ErrorAlreadyInstalled();
    public static string get_ErrorBadAllUserExtension();
    public static string get_ErrorBlockedOnProcesses();
    public static string get_ErrorBreaksExistingExtensions();
    public static string get_ErrorCannotDisablePackComponent();
    public static string get_ErrorCannotEnableDependency();
    public static string get_ErrorCertCheckFailed();
    public static string get_ErrorCertFileNotFound();
    public static string get_ErrorCertificateFieldsNotFound();
    public static string get_ErrorCertificateFieldsNotFoundInUpdate();
    public static string get_ErrorCertPackagePathNotFound();
    public static string get_ErrorDirectoryInUse();
    public static string get_ErrorDisallowedPackageTypesInCatalog();
    public static string get_ErrorExtensionAndPlatformSigned();
    public static string get_ErrorFilesInUse();
    public static string get_ErrorFilesInUseAdditional();
    public static string get_ErrorInconsistentManifestValues();
    public static string get_ErrorInstallByMSI();
    public static string get_ErrorInstallExtensionSDKDirectoryExists();
    public static string get_ErrorInstallRequiresElevation();
    public static string get_ErrorInvalidAttributeValue();
    public static string get_ErrorInvalidAttributeValueLength();
    public static string get_ErrorInvalidCount();
    public static string get_ErrorInvalidElementValue();
    public static string get_ErrorInvalidElementValueLength();
    public static string get_ErrorInvalidInstallationTargetPlatformArchitecture();
    public static string get_ErrorInvalidJsonManifest();
    public static string get_ErrorInvalidLanguagePackManifestRootElement();
    public static string get_ErrorInvalidManifest();
    public static string get_ErrorInvalidManifestFileExtension();
    public static string get_ErrorInvalidManifestRootElement();
    public static string get_ErrorInvalidMinimumCount();
    public static string get_ErrorInvalidPath();
    public static string get_ErrorInvalidPath_Args2();
    public static string get_ErrorInvalidVSIX();
    public static string get_ErrorInvalidVsixIdInCatalog_Args1();
    public static string get_ErrorLowerPackage_Args1();
    public static string get_ErrorMissingComponent();
    public static string get_ErrorMissingEula();
    public static string get_ErrorMissingInstallationTargetPlatformArchitecture();
    public static string get_ErrorMissingLocalizedResources_Args2();
    public static string get_ErrorMissingManifest();
    public static string get_ErrorMissingNameOrAuthor();
    public static string get_ErrorMissingPackage_Args1();
    public static string get_ErrorMissingPackage1_Args1();
    public static string get_ErrorMissingReferences();
    public static string get_ErrorMissingRequiredAttribute();
    public static string get_ErrorMissingRequiredElement();
    public static string get_ErrorMissingTargetFramework();
    public static string get_ErrorNestedExtensionFailed();
    public static string get_ErrorNestedExtensionInitialization();
    public static string get_ErrorNestedExtensionReferenceIdMismatch();
    public static string get_ErrorNestedVsixBrokenInternalDependency();
    public static string get_ErrorNoPerUserOutOfConeFiles();
    public static string get_ErrorNotValidSignedAllUserExtension();
    public static string get_ErrorNotValidSignedPerUserExtension();
    public static string get_ErrorOutOfDiskSpaceExceptionBody();
    public static string get_ErrorOutOfDiskSpaceExceptionTitle();
    public static string get_ErrorPerUserExperimentPartialManifestType();
    public static string get_ErrorReferenceConstraint();
    public static string get_ErrorUninstallDependencyException();
    public static string get_ErrorUninstallDependentComponent();
    public static string get_ErrorUninstallMSIExtension();
    public static string get_ErrorUninstallOrphanedComponentRequiresElevation();
    public static string get_ErrorUninstallRequiresElevation();
    public static string get_ErrorUnknownProtocol();
    public static string get_ErrorUnlistedPart();
    public static string get_ErrorUnsignedCatalog();
    public static string get_ErrorUnsupportedProduct();
    public static string get_ErrorUpgradeInProgress();
    public static string get_ErrorVsixVersionOutOfRange();
    public static string get_InstalledByMultipleText();
    public static string get_InvalidReleaseNotesText();
    public static string get_OnlineRatingToolTipFormatString();
    public static string get_OnlineVotesMultiple();
    public static string get_OnlineVotesSingle();
    public static string get_OnlineVotesStringFormat();
    public static string get_ProductUpdatesNodeText();
    public static string get_ReleaseNotesDialogTitle();
    public static string get_SetupInstanceNotLaunchable();
    public static string get_SetupLogEmitted();
    public static string get_Sharepoint_ListNotFoundOnServer();
    public static string get_StreamNotSeekable();
    public static string get_TaskCreatedSuccessfully();
    public static string get_TaskDoesNotExist();
    public static string get_TaskExists();
    public static string get_TaskNotRegistered();
    public static string get_TaskServiceNotConnected();
    public static string get_ToolsOptions_InvalidName();
    public static string get_ToolsOptions_InvalidURL();
    public static string get_UnlistedPartLogHeader();
    public static string get_UnscheduleDowngradeExtension();
    public static string get_UnscheduleExtension();
    public static string get_UnscheduleInstallExtension();
    public static string get_UnscheduleUninstallExtension();
    public static string get_UnscheduleUpdateExtension();
    public static string get_ValidateError_InvalidOperation();
    public static string get_ValidateError_StringEmpty();
    public static string get_VisualStudioGalleryNodeText();
    public static string get_VisualStudioUpdateDescription();
    public static string get_VisualStudioUpdateTitle();
    public static Byte[] get_VSIXLanguagePackSchema();
    public static Byte[] get_VSIXManifestSchema();
}
internal class Microsoft.VisualStudio.ExtensionManager.Impl.Settings.ExtensionCacheRefreshEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
private ExtensionCacheRefreshType <RefreshType>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<IInstalledExtension> <UpdatedExtensions>k__BackingField;
    internal ExtensionCacheRefreshType RefreshType { get; internal set; }
    internal IEnumerable`1<IInstalledExtension> UpdatedExtensions { get; internal set; }
    internal ExtensionCacheRefreshEventArgs(ExtensionCacheRefreshType refreshType, IInstalledExtension[] updatedExtensions);
    [CompilerGeneratedAttribute]
internal ExtensionCacheRefreshType get_RefreshType();
    [CompilerGeneratedAttribute]
internal void set_RefreshType(ExtensionCacheRefreshType value);
    [CompilerGeneratedAttribute]
internal IEnumerable`1<IInstalledExtension> get_UpdatedExtensions();
    [CompilerGeneratedAttribute]
internal void set_UpdatedExtensions(IEnumerable`1<IInstalledExtension> value);
}
internal enum Microsoft.VisualStudio.ExtensionManager.Impl.Settings.ExtensionCacheRefreshType : Enum {
    public int value__;
    public static ExtensionCacheRefreshType None;
    public static ExtensionCacheRefreshType Full;
    public static ExtensionCacheRefreshType Partial;
}
internal class Microsoft.VisualStudio.ExtensionManager.Impl.Settings.ExtensionSettingsCache : object {
    private static int CacheVersion;
    private object syncRoot;
    private Lazy`1<IVsFeatureFlags> featureFlags;
    private AsyncSemaphore metadataSemaphore;
    private EngineMode engineMode;
    private AsyncLazy`1<Dictionary`2<string, ExtensionFromStorageImpl>> extensionMetadataMapLazy;
    [CompilerGeneratedAttribute]
private ReloadCacheEventHandler ReloadCacheEvent;
    [CompilerGeneratedAttribute]
private List`1<IInstalledExtension> <ExtensionsToDelete>k__BackingField;
    [CompilerGeneratedAttribute]
private ConcurrentDictionary`2<IInstalledExtension, ExtensionLocations> <ExtensionLocationMap>k__BackingField;
    [CompilerGeneratedAttribute]
private HashSet`1<string> <InstallPathHashSet>k__BackingField;
    [CompilerGeneratedAttribute]
private ConcurrentDictionary`2<ExtensionLocations, List`1<IInstalledExtension>> <LocationExtensionMap>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <HasMessagePackBeenRecreated>k__BackingField;
    [CompilerGeneratedAttribute]
private ManualResetEvent <CacheLoaded>k__BackingField;
    [CompilerGeneratedAttribute]
private HostProperties <HostProperties>k__BackingField;
    [CompilerGeneratedAttribute]
private ConcurrentDictionary`2<string, IInstalledExtension> <installedExtensions>k__BackingField;
    [CompilerGeneratedAttribute]
private long <LastRefresh>k__BackingField;
    [CompilerGeneratedAttribute]
private InstalledExtensionLocationManager <LocationManager>k__BackingField;
    [CompilerGeneratedAttribute]
private ISettingsStore <ReadableSettingsStore>k__BackingField;
    private bool deleteMessagePack;
    private bool skipMessagePack;
    private IEngineHost engineHost;
    private CancellationToken disposalToken;
    [CompilerGeneratedAttribute]
private ISettingsManager <SettingsManager>k__BackingField;
    [CompilerGeneratedAttribute]
private IWritableSettingsStore <WritableSettingsStore>k__BackingField;
    public List`1<IInstalledExtension> ExtensionsToDelete { get; }
    public ImmutableDictionary`2<string, IInstalledExtension> CachedInstalledExtensions { get; }
    public ConcurrentDictionary`2<IInstalledExtension, ExtensionLocations> ExtensionLocationMap { get; }
    public HashSet`1<string> InstallPathHashSet { get; private set; }
    public ConcurrentDictionary`2<ExtensionLocations, List`1<IInstalledExtension>> LocationExtensionMap { get; }
    private bool HasMessagePackBeenRecreated { get; private set; }
    private ManualResetEvent CacheLoaded { get; }
    private HostProperties HostProperties { get; }
    private ConcurrentDictionary`2<string, IInstalledExtension> installedExtensions { get; }
    private long LastRefresh { get; private set; }
    private InstalledExtensionLocationManager LocationManager { get; }
    private ISettingsStore ReadableSettingsStore { get; }
    private ISettingsManager SettingsManager { get; }
    private IWritableSettingsStore WritableSettingsStore { get; }
    private bool ShouldDeleteExtensionMetadata { get; }
    internal ExtensionSettingsCache(ISettingsManager settingsManager, IEngineHost engineHost, IExtensionEngine engine, CancellationToken cancellationToken);
    [CompilerGeneratedAttribute]
public sealed virtual void add_ReloadCacheEvent(ReloadCacheEventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_ReloadCacheEvent(ReloadCacheEventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual List`1<IInstalledExtension> get_ExtensionsToDelete();
    public sealed virtual ImmutableDictionary`2<string, IInstalledExtension> get_CachedInstalledExtensions();
    [CompilerGeneratedAttribute]
public sealed virtual ConcurrentDictionary`2<IInstalledExtension, ExtensionLocations> get_ExtensionLocationMap();
    [CompilerGeneratedAttribute]
public sealed virtual HashSet`1<string> get_InstallPathHashSet();
    [CompilerGeneratedAttribute]
private void set_InstallPathHashSet(HashSet`1<string> value);
    [CompilerGeneratedAttribute]
public sealed virtual ConcurrentDictionary`2<ExtensionLocations, List`1<IInstalledExtension>> get_LocationExtensionMap();
    [CompilerGeneratedAttribute]
private bool get_HasMessagePackBeenRecreated();
    [CompilerGeneratedAttribute]
private void set_HasMessagePackBeenRecreated(bool value);
    [CompilerGeneratedAttribute]
private ManualResetEvent get_CacheLoaded();
    [CompilerGeneratedAttribute]
private HostProperties get_HostProperties();
    [CompilerGeneratedAttribute]
private ConcurrentDictionary`2<string, IInstalledExtension> get_installedExtensions();
    [CompilerGeneratedAttribute]
private long get_LastRefresh();
    [CompilerGeneratedAttribute]
private void set_LastRefresh(long value);
    [CompilerGeneratedAttribute]
private InstalledExtensionLocationManager get_LocationManager();
    [CompilerGeneratedAttribute]
private ISettingsStore get_ReadableSettingsStore();
    [CompilerGeneratedAttribute]
private ISettingsManager get_SettingsManager();
    [CompilerGeneratedAttribute]
private IWritableSettingsStore get_WritableSettingsStore();
    private bool get_ShouldDeleteExtensionMetadata();
    private IVsFeatureFlags GetFeatureFlags(EngineHostId hostId);
    private static string GetHotloadTimestampName(bool perMachine);
    private static bool IsExtensionNew(InstalledExtensionStored fromStorage, IInstalledExtension fromMemory);
    public sealed virtual void AddOrUpdate(IInstalledExtension extension, CacheMode updateMode);
    public sealed virtual bool CacheHasItems();
    public sealed virtual void SetLastCompleteScanTime(DateTimeOffset dateTime);
    public sealed virtual bool HasFullScanRun();
    public sealed virtual long GetLastScanTime();
    public sealed virtual bool IsMessagePackRecreated();
    public sealed virtual long GetLastHotloadTime(bool perMachine);
    public sealed virtual void SetLastHotloadTime(DateTimeOffset dateTime, bool perMachine);
    public sealed virtual long GetCacheLastUpdated(bool canBypassCacheVersionCheck);
    [AsyncStateMachineAttribute("Microsoft.VisualStudio.ExtensionManager.Impl.Settings.ExtensionSettingsCache/<GetInstalledExtensionsAsync>d__73")]
public sealed virtual Task`1<IEnumerable`1<IInstalledExtension>> GetInstalledExtensionsAsync(bool forceRefresh, CacheMode updateMode, CancellationToken cancellationToken, Nullable`1<bool> isCacheVersionValid);
    public sealed virtual bool IsCacheVersionValid();
    public sealed virtual bool IsVsVersionUpToDate();
    public sealed virtual void RemoveFromCache(IInstalledExtension extension, CacheMode updateMode);
    [AsyncStateMachineAttribute("Microsoft.VisualStudio.ExtensionManager.Impl.Settings.ExtensionSettingsCache/<SynchronizeCacheWithExtensionListAsync>d__77")]
public sealed virtual Task`1<ExtensionChangedState> SynchronizeCacheWithExtensionListAsync(IEnumerable`1<IInstalledExtension> extensions, CacheMode updateMode, Nullable`1<bool> isCacheVersionValid, CancellationToken cancellationToken);
    public sealed virtual void UpdateCacheLastUpdated(CacheMode updateMode);
    public sealed virtual void UpdateCacheVersion(CacheMode updateMode);
    public sealed virtual void Dispose();
    internal void UpdateCacheLastUpdated(long dateTime, CacheMode updateMode);
    private void RemoveExtensionFromCacheIfIncomingExtensionHasHigherVersion(IInstalledExtension extension, CacheMode updateMode);
    private void RemoveFromCachePrivate(IInstalledExtension extension, CacheMode updateMode);
    [AsyncStateMachineAttribute("Microsoft.VisualStudio.ExtensionManager.Impl.Settings.ExtensionSettingsCache/<WriteExtensionMetadataAsync>d__84")]
private Task`1<ExtensionChangedState> WriteExtensionMetadataAsync(bool extensionUpdated, CancellationToken cancellationToken);
    private void AddExtensionToLocationExtensionMap(ExtensionLocations location, IInstalledExtension extension);
    private void AddToEnabledList(IInstalledExtension extension, CacheMode updateMode);
    private bool CanUninstallBasedOnRemoveOldPerUserExtension(IInstalledExtension extensionToInstall, IInstalledExtension& extensionToUninstall);
    private bool CanUpdateCacheBasedOnUpdateAndEngineMode(CacheMode updateMode);
    private void RemoveExtensionFromCache(InstalledExtensionStored installedExtensionStored, CacheMode updateMode);
    private void DeleteExtensionData(IInstalledExtension extension, CacheMode updateMode);
    private void DeleteExtensionList(List`1<InstalledExtensionStored> extensionsToRemove, CacheMode updateMode);
    private bool EnsureAllExtensionsAreInCache(IEnumerable`1<IInstalledExtension> extensions, CacheMode updateMode);
    private string GetCacheVersionStored();
    private string GetExpectedCacheVersion();
    private bool IsCacheReadUpToDate();
    private bool IsExtensionStillInstalledOnDisk(InstalledExtensionStored extensionStored);
    [AsyncStateMachineAttribute("Microsoft.VisualStudio.ExtensionManager.Impl.Settings.ExtensionSettingsCache/<LoadInstalledExtensionsFromCacheAsync>d__97")]
private Task LoadInstalledExtensionsFromCacheAsync(CacheMode updateMode, CancellationToken cancellationToken, Nullable`1<bool> isCacheVersionValid, int attempt);
    [AsyncStateMachineAttribute("Microsoft.VisualStudio.ExtensionManager.Impl.Settings.ExtensionSettingsCache/<LoadExtensionMetadataAsync>d__98")]
private Task`1<Dictionary`2<string, ExtensionFromStorageImpl>> LoadExtensionMetadataAsync();
    private void MergeEnabledExtensionEntryWithCacheEntry(InstalledExtensionImpl extension, CacheMode updateMode);
    private void MigrateEnabledExtensionsListFromPackageDefManagement(CacheMode updateMode);
    private bool ProcessAndSaveExtension(IInstalledExtension extension, CacheMode updateMode);
    private void ProcessExtension(IInstalledExtension extension, InstalledExtensionStored installedExtensionFromStorage, CacheMode updateMode);
    [AsyncStateMachineAttribute("Microsoft.VisualStudio.ExtensionManager.Impl.Settings.ExtensionSettingsCache/<ProcessExtensionAsync>d__103")]
private Task ProcessExtensionAsync(InstalledExtensionStored installedExtensionStored, CacheMode updateMode);
    [AsyncStateMachineAttribute("Microsoft.VisualStudio.ExtensionManager.Impl.Settings.ExtensionSettingsCache/<ReadExtensionsAndMarkMissingExtensionsForDeletionAsync>d__104")]
private Task ReadExtensionsAndMarkMissingExtensionsForDeletionAsync(ISettingsStore readableStore, List`1<InstalledExtensionStored> extensionsToRemove, CacheMode updateMode, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.VisualStudio.ExtensionManager.Impl.Settings.ExtensionSettingsCache/<ReadExtensionOrMarkForDeletionIfMissingAsync>d__105")]
private Task ReadExtensionOrMarkForDeletionIfMissingAsync(ISettingsStore readableStore, List`1<InstalledExtensionStored> extensionsToRemove, CacheMode updateMode, string extensionEntry, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.VisualStudio.ExtensionManager.Impl.Settings.ExtensionSettingsCache/<ReadExtensionOrMarkForDeletionIfMissingSingleTryAsync>d__106")]
private Task ReadExtensionOrMarkForDeletionIfMissingSingleTryAsync(ISettingsStore readableStore, List`1<InstalledExtensionStored> extensionsToRemove, CacheMode updateMode, string extensionEntry);
    private bool RemoveExtensionFromLists(IInstalledExtension extension);
    private void RemoveExtensionFromLocationExtensionMap(ExtensionLocations location, IInstalledExtension extension);
    private void RemoveFromEnabledList(IInstalledExtension extension, CacheMode updateMode);
    private void ResetCache(CacheMode updateMode);
    private void ResetLists();
    private bool SaveExtensionToCache(IInstalledExtension extension, CacheMode updateMode);
    private ValueTuple`2<bool, InstalledExtensionStored> ShouldSaveToCache(IInstalledExtension extension);
    private void SetupExtensionIfNewUserExtension(InstalledExtensionImpl extension, InstalledExtensionStored extensionStored, CacheMode updateMode);
    private bool ShouldReadFromCache(bool forceRefresh);
    private void SynchronizeExtensionWithEnabledListForPackageDefManagement(IInstalledExtension extension, CacheMode updateMode);
    private void UpdateCacheLastUpdated(IWritableSettingsStore writableSettings, long dateTime, CacheMode updateMode);
    private void UpdateCacheVersion(IWritableSettingsStore writableSettings, CacheMode updateMode);
}
public class Microsoft.VisualStudio.ExtensionManager.Impl.Settings.ExtensionSettingsStoreList : object {
    private string collectionPath;
    private ISettingsManager settings;
    private HashSet`1<ExtensionSettingsStoreListEntry> entries;
    private object settingsLock;
    private Dictionary`2<string, IInstalledExtension> extensions;
    private bool inBatchOperation;
    private bool batchEntriesInitialized;
    private bool updateTypes;
    private bool valueIsPath;
    private IEqualityComparer`1<ExtensionSettingsStoreListEntry> entryComparer;
    private IEnumerable`1<ExtensionSettingsStoreListEntry> ListEntries { get; }
    public int Count { get; }
    public IEnumerable`1<ExtensionSettingsStoreListEntry> Entries { get; }
    public IEnumerable`1<IInstalledExtension> Extensions { get; }
    public ExtensionSettingsStoreList(ListType listType, ISettingsManager settings);
    private bool GetUpdateTypesValue(ListType listType);
    private bool GetValueIsPathValue(ListType listType);
    private string GetCollectionPath(ListType listType);
    public IDisposable BeginBatch();
    private void ReadEntriesFromSettingsStore(ISettingsStore2 store);
    private void ReadEntriesFromSettingsStoreLegacy(ISettingsStore store);
    private void SetPropertyValueForEntry(string propertyValue, ExtensionSettingsStoreListEntry& entry);
    private void ReadEntriesFrompublicSettingsStore(ISettingsStore store, SettingsType type);
    private IEnumerable`1<ExtensionSettingsStoreListEntry> get_ListEntries();
    public int get_Count();
    public IEnumerable`1<ExtensionSettingsStoreListEntry> get_Entries();
    public IEnumerable`1<IInstalledExtension> get_Extensions();
    public bool TryGetValue(string identifier, IInstalledExtension& extension);
    public void Add(IInstalledExtension extension);
    public void Add(string identifier);
    public void Add(ExtensionSettingsStoreListKey key, string value);
    public void Remove(string identifier);
    public void Remove(ExtensionSettingsStoreListEntry entry);
    public void Remove(IInstalledExtension extension);
    public void Remove(ExtensionSettingsStoreListEntry entry, IInstalledExtension extension);
    public void RemoveAllEntriesForExtensionPath(IInstalledExtension extension);
    public bool Contains(string identifier);
    public bool Contains(IInstalledExtension extension);
    public bool EntryEquals(ExtensionSettingsStoreListEntry x, ExtensionSettingsStoreListEntry y);
    private ExtensionSettingsStoreListEntry CreateEntry(IInstalledExtension extension);
    private ExtensionSettingsStoreListEntry CreateEntry(string identifier);
    private void LoadExtensionListFromStore(ISettingsStore store);
    [CompilerGeneratedAttribute]
private void <BeginBatch>b__14_0();
}
[NullableContextAttribute("1")]
public interface Microsoft.VisualStudio.ExtensionManager.Impl.Settings.IExtensionSettingsCache {
    public ImmutableDictionary`2<string, IInstalledExtension> CachedInstalledExtensions { get; }
    public ConcurrentDictionary`2<IInstalledExtension, ExtensionLocations> ExtensionLocationMap { get; }
    public List`1<IInstalledExtension> ExtensionsToDelete { get; }
    public HashSet`1<string> InstallPathHashSet { get; }
    public ConcurrentDictionary`2<ExtensionLocations, List`1<IInstalledExtension>> LocationExtensionMap { get; }
    [CompilerGeneratedAttribute]
internal abstract virtual void add_ReloadCacheEvent(ReloadCacheEventHandler value);
    [CompilerGeneratedAttribute]
internal abstract virtual void remove_ReloadCacheEvent(ReloadCacheEventHandler value);
    public abstract virtual ImmutableDictionary`2<string, IInstalledExtension> get_CachedInstalledExtensions();
    public abstract virtual ConcurrentDictionary`2<IInstalledExtension, ExtensionLocations> get_ExtensionLocationMap();
    public abstract virtual List`1<IInstalledExtension> get_ExtensionsToDelete();
    public abstract virtual HashSet`1<string> get_InstallPathHashSet();
    public abstract virtual ConcurrentDictionary`2<ExtensionLocations, List`1<IInstalledExtension>> get_LocationExtensionMap();
    public abstract virtual void AddOrUpdate(IInstalledExtension extension, CacheMode updateMode);
    public abstract virtual bool CacheHasItems();
    public abstract virtual long GetCacheLastUpdated(bool canBypassCacheVersionCheck);
    public abstract virtual Task`1<IEnumerable`1<IInstalledExtension>> GetInstalledExtensionsAsync(bool forceRefresh, CacheMode updateMode, CancellationToken cancellationToken, Nullable`1<bool> isCacheVersionValid);
    public abstract virtual long GetLastScanTime();
    public abstract virtual bool HasFullScanRun();
    public abstract virtual bool IsCacheVersionValid();
    public abstract virtual bool IsMessagePackRecreated();
    public abstract virtual bool IsVsVersionUpToDate();
    public abstract virtual void RemoveFromCache(IInstalledExtension extension, CacheMode updateMode);
    public abstract virtual void SetLastCompleteScanTime(DateTimeOffset dateTime);
    public abstract virtual Task`1<ExtensionChangedState> SynchronizeCacheWithExtensionListAsync(IEnumerable`1<IInstalledExtension> extensions, CacheMode updateMode, Nullable`1<bool> isCacheVersionValid, CancellationToken cancellationToken);
    public abstract virtual void UpdateCacheLastUpdated(CacheMode updateMode);
    public abstract virtual void UpdateCacheVersion(CacheMode updateMode);
    public abstract virtual long GetLastHotloadTime(bool perMachine);
    public abstract virtual void SetLastHotloadTime(DateTimeOffset dateTime, bool perMachine);
}
public class Microsoft.VisualStudio.ExtensionManager.Impl.Settings.InstalledExtensionLocationManager : object {
    private static string DirectoryForPlatformSDKs;
    private static string DirectoryForSDKs;
    private static string NuGetPackagesDirectory;
    private string SearchFolderLogMessage;
    [CompilerGeneratedAttribute]
private IExtensionEngine <Engine>k__BackingField;
    [CompilerGeneratedAttribute]
private string <CurrentUserExtensionsRoot>k__BackingField;
    [CompilerGeneratedAttribute]
private IEngineHost <EngineHost>k__BackingField;
    [CompilerGeneratedAttribute]
private Dictionary`2<ExtensionLocations, List`1<string>> <ExtensionLocationRootMap>k__BackingField;
    [CompilerGeneratedAttribute]
private Dictionary`2<string, ExtensionLocations> <ExtensionRootToLocationTypeMap>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<string> <PerMachineExtensionsRoots>k__BackingField;
    public IExtensionEngine Engine { get; }
    private string CurrentUserExtensionsRoot { get; }
    private IEngineHost EngineHost { get; }
    private Dictionary`2<ExtensionLocations, List`1<string>> ExtensionLocationRootMap { get; }
    private Dictionary`2<string, ExtensionLocations> ExtensionRootToLocationTypeMap { get; }
    private string PerMachineExtensionSDKInstallRoot { get; }
    private string PerMachineX86ExtensionSDKInstallRoot { get; }
    private IEnumerable`1<string> PerMachineExtensionsRoots { get; }
    private string PerMachinePlatformSDKInstallRoot { get; }
    private string PerMachineX86PlatformSDKInstallRoot { get; }
    private string PerUserExtensionSDKInstallRoot { get; }
    public InstalledExtensionLocationManager(IEngineHost host, IExtensionEngine engine);
    [CompilerGeneratedAttribute]
public IExtensionEngine get_Engine();
    [CompilerGeneratedAttribute]
private string get_CurrentUserExtensionsRoot();
    [CompilerGeneratedAttribute]
private IEngineHost get_EngineHost();
    [CompilerGeneratedAttribute]
private Dictionary`2<ExtensionLocations, List`1<string>> get_ExtensionLocationRootMap();
    [CompilerGeneratedAttribute]
private Dictionary`2<string, ExtensionLocations> get_ExtensionRootToLocationTypeMap();
    private string get_PerMachineExtensionSDKInstallRoot();
    private string get_PerMachineX86ExtensionSDKInstallRoot();
    [CompilerGeneratedAttribute]
private IEnumerable`1<string> get_PerMachineExtensionsRoots();
    private string get_PerMachinePlatformSDKInstallRoot();
    private string get_PerMachineX86PlatformSDKInstallRoot();
    private string get_PerUserExtensionSDKInstallRoot();
    public IEnumerable`1<string> GetExtensionPathRootsForLocation(ExtensionLocations location);
    internal bool IsValidExtensionLocation(string installPath);
    internal ExtensionLocations GetLocationFromPath(string installPath);
    internal void InitializeRootMaps();
    private bool CreateRootPathOrLogError(string extensionRootPath);
    private bool EnsureRootPathExists(string extensionRootPath);
    [IteratorStateMachineAttribute("Microsoft.VisualStudio.ExtensionManager.Impl.Settings.InstalledExtensionLocationManager/<GetPerMachineExtensionPaths>d__39")]
private IEnumerable`1<string> GetPerMachineExtensionPaths();
    private string GetVsExtensibilityPerMachinePath();
    private string GetVsExtensibilityPerUserPath();
    private IEnumerable`1<string> GetPerMachinePlatformSDKRoots();
    private IEnumerable`1<string> GetPerMachineSDKRoots();
    [IteratorStateMachineAttribute("Microsoft.VisualStudio.ExtensionManager.Impl.Settings.InstalledExtensionLocationManager/<GetPerUserExtensionRoot>d__44")]
private IEnumerable`1<string> GetPerUserExtensionRoot();
    [IteratorStateMachineAttribute("Microsoft.VisualStudio.ExtensionManager.Impl.Settings.InstalledExtensionLocationManager/<GetPerUserSDKRoots>d__45")]
private IEnumerable`1<string> GetPerUserSDKRoots();
    [CompilerGeneratedAttribute]
private bool <GetPerMachineSDKRoots>b__43_0(string d);
}
public class Microsoft.VisualStudio.ExtensionManager.Impl.Settings.InstalledExtensionSettingsList : object {
    [CompilerGeneratedAttribute]
private ManualResetEvent <ExtensionsLoaded>k__BackingField;
    [CompilerGeneratedAttribute]
private IEngineHost <engineHost>k__BackingField;
    private EngineMode engineMode;
    [CompilerGeneratedAttribute]
private IInstalledExtensionList <InstalledExtensionList>k__BackingField;
    [CompilerGeneratedAttribute]
private ScanModule <scanner>k__BackingField;
    [CompilerGeneratedAttribute]
private IExtensionSettingsCache <settingsCache>k__BackingField;
    [CompilerGeneratedAttribute]
private StateManagerModule <stateManager>k__BackingField;
    [CompilerGeneratedAttribute]
private ITelemetryLogger <telemetryLogger>k__BackingField;
    public ConcurrentDictionary`2<IInstalledExtension, ExtensionLocations> ExtensionLocationMap { get; }
    public ManualResetEvent ExtensionsLoaded { get; private set; }
    public List`1<IInstalledExtension> ExtensionsToDelete { get; }
    public HashSet`1<string> InstallPathHashSet { get; }
    public ConcurrentDictionary`2<ExtensionLocations, List`1<IInstalledExtension>> LocationExtensionMap { get; }
    public RestartReason RestartRequired { get; }
    private IEngineHost engineHost { get; }
    private IInstalledExtensionList InstalledExtensionList { get; }
    private ScanModule scanner { get; }
    private IExtensionSettingsCache settingsCache { get; }
    private StateManagerModule stateManager { get; }
    private ITelemetryLogger telemetryLogger { get; }
    public InstalledExtensionSettingsList(IEngineHost engineHost, IExtensionEngine engine, IExtensionSettingsCache extensionSettingsCache, CancellationToken cancellationToken);
    public ConcurrentDictionary`2<IInstalledExtension, ExtensionLocations> get_ExtensionLocationMap();
    [CompilerGeneratedAttribute]
public ManualResetEvent get_ExtensionsLoaded();
    [CompilerGeneratedAttribute]
private void set_ExtensionsLoaded(ManualResetEvent value);
    public sealed virtual List`1<IInstalledExtension> get_ExtensionsToDelete();
    public HashSet`1<string> get_InstallPathHashSet();
    public ConcurrentDictionary`2<ExtensionLocations, List`1<IInstalledExtension>> get_LocationExtensionMap();
    public sealed virtual RestartReason get_RestartRequired();
    [CompilerGeneratedAttribute]
private IEngineHost get_engineHost();
    [CompilerGeneratedAttribute]
private IInstalledExtensionList get_InstalledExtensionList();
    [CompilerGeneratedAttribute]
private ScanModule get_scanner();
    [CompilerGeneratedAttribute]
private IExtensionSettingsCache get_settingsCache();
    [CompilerGeneratedAttribute]
private StateManagerModule get_stateManager();
    [CompilerGeneratedAttribute]
private ITelemetryLogger get_telemetryLogger();
    public sealed virtual void Add(IInstalledExtension extension, CacheMode updateMode);
    [AsyncStateMachineAttribute("Microsoft.VisualStudio.ExtensionManager.Impl.Settings.InstalledExtensionSettingsList/<AddToInstalledListAndMergeWithCacheAsync>d__35")]
private Task`1<ExtensionChangedState> AddToInstalledListAndMergeWithCacheAsync(IEnumerable`1<IInstalledExtension> extensions, CancellationToken cancellationToken, CacheMode updateMode, Nullable`1<bool> isCacheVersionValid);
    public sealed virtual IReadOnlyInstalledExtensionList AsReadOnly();
    public sealed virtual bool CanBypassScan(long extensionsChangedTimestamp, long cacheTimestamp, bool canBypassCacheVersionCheck);
    public sealed virtual long GetLastScanTime();
    public sealed virtual bool Contains(string identifier);
    public sealed virtual void DoneLoading();
    public sealed virtual void EnsureCacheVersionUpToDate(CacheMode updateMode);
    public sealed virtual IList`1<string> GetAssetLocations(Func`2<EnabledState, bool> extensionFilter, string assetTypeName, IDictionary`2<string, string> attributes, IList`1<string> uniqueStrings, IList`1<string> extensionNames);
    public sealed virtual void GetAssetProperties(string assetTypeName, IList`1<string> assetNames, IList`1<string> versions, IList`1<string> authors, IList`1<string> extensionIDs);
    public sealed virtual long GetCacheLastUpdated(bool canBypassCacheVersionCheck);
    public sealed virtual bool IsCacheVersionCompatible();
    public sealed virtual string GetContentLocation(string installPath, IExtensionContent content);
    [IteratorStateMachineAttribute("Microsoft.VisualStudio.ExtensionManager.Impl.Settings.InstalledExtensionSettingsList/<GetEnabledAssetLocations>d__47")]
public sealed virtual IEnumerable`1<string> GetEnabledAssetLocations(string assetTypeName);
    public sealed virtual IEnumerator`1<IInstalledExtension> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    public sealed virtual IInstalledExtension GetExtensionContainingPackageGuid(Guid packageGuid);
    public sealed virtual IInstalledExtension GetExtensionFromInstallPath(string installPath);
    [IteratorStateMachineAttribute("Microsoft.VisualStudio.ExtensionManager.Impl.Settings.InstalledExtensionSettingsList/<GetExtensionPacks>d__52")]
public sealed virtual IEnumerable`1<IInstalledExtension> GetExtensionPacks(IInstalledExtension extension);
    public sealed virtual void GetExtensionProperties(IList`1<string> extensionNames, IList`1<string> versions, IList`1<string> authors, IList`1<string> contentLocations, IList`1<string> extensionIDs);
    public sealed virtual IEnumerable`1<IInstalledExtension> GetExtensions(Func`2<EnabledState, bool> enabledFilter, string assetTypeName, bool includeOtherExtensionAssetTypes);
    public sealed virtual IEnumerable`1<IInstalledExtension> GetImmediateDependents(IInstalledExtension extension, bool nestedOnly);
    public sealed virtual IInstalledExtensionList GetInMemoryList();
    [AsyncStateMachineAttribute("Microsoft.VisualStudio.ExtensionManager.Impl.Settings.InstalledExtensionSettingsList/<GetLoadableAndEnableExtensionsFromScanResultAsync>d__57")]
public sealed virtual Task`1<ValueTuple`3<IEnumerable`1<IInstalledExtension>, ExtensionChangedState, bool>> GetLoadableAndEnableExtensionsFromScanResultAsync(ScanResult scanResult, CancellationToken cancellationToken, CacheMode updateMode, Nullable`1<bool> isCacheVersionValid, bool updateOnChangesDetectedOnly);
    public sealed virtual bool HasDependentExtensions(IInstalledExtension extension);
    [AsyncStateMachineAttribute("Microsoft.VisualStudio.ExtensionManager.Impl.Settings.InstalledExtensionSettingsList/<LoadExtensionsFromCacheAsync>d__59")]
public sealed virtual Task`1<ExtensionChangedState> LoadExtensionsFromCacheAsync(Nullable`1<bool> isCacheVersionValid, CancellationToken cancellationToken, bool forceRefresh, CacheMode updateMode);
    public sealed virtual void Remove(IInstalledExtension extension, CacheMode updateMode);
    [AsyncStateMachineAttribute("Microsoft.VisualStudio.ExtensionManager.Impl.Settings.InstalledExtensionSettingsList/<ScanInstalledExtensionsAsync>d__61")]
public sealed virtual Task`1<ScanResult> ScanInstalledExtensionsAsync(bool safeMode, bool isSdkList, ITelemetryLogger telemetryLogger, object telemetryObject);
    public sealed virtual void SetAutoUpdateState(IInstalledExtension extension, AutoUpdateState autoUpdate, CacheMode updateMode);
    public sealed virtual void SetEnabledState(IInstalledExtension extension, EnabledState state, CacheMode updateMode);
    public sealed virtual void SetPackComponent(IInstalledExtension extension, bool isPackComponent, CacheMode updateMode);
    public sealed virtual bool TryGetDependentExtensions(string identifier, IEnumerable`1& listOfDependantExtensions);
    public sealed virtual bool TryGetValue(string identifier, IInstalledExtension& result);
    internal void SetEnabledStateInternal(IInstalledExtension extension, EnabledState state, CacheMode updateMode);
    private bool AreAllDependenciesOfExtensionMarkedForDeletion(IInstalledExtension extension, ExtensionSettingsStoreList pendingDeletionList);
    private bool AreNestedExtensionsRemoved(IInstalledExtension extension, IEnumerable`1<IInstalledExtension> extensionList);
    private bool CanBypassScanBasedOnTimeStamp(long extensionsChangedTimestamp, long cacheTimestamp);
    private bool IsExtensionWithVersionInCache(IInstalledExtension extension);
    private bool IsExtensionWithVersionRangeInCache(string identifier, VersionRange range);
    private ExtensionChangedState MarkExtensionForDeletionIfUpgradedAndNotSystemOrPerMachine(IInstalledExtension extension, CacheMode updateMode);
    private void RemovePrivate(IInstalledExtension extension, CacheMode updateMode);
    [AsyncStateMachineAttribute("Microsoft.VisualStudio.ExtensionManager.Impl.Settings.InstalledExtensionSettingsList/<SettingsCacheReloadCacheEventAsync>d__75")]
private Task SettingsCacheReloadCacheEventAsync(ExtensionSettingsCache sender, ExtensionCacheRefreshEventArgs e);
    public sealed virtual IInstalledExtension GetExtensionById(string vsixIdentifier);
    public sealed virtual void Dispose();
    [IteratorStateMachineAttribute("Microsoft.VisualStudio.ExtensionManager.Impl.Settings.InstalledExtensionSettingsList/<GetHotloadableExtensions>d__78")]
public sealed virtual IEnumerable`1<IInstalledExtension> GetHotloadableExtensions(bool perMachine);
    public sealed virtual long GetLastHotloadTime(bool perMachine);
    public sealed virtual void SetLastHotloadTime(DateTimeOffset dateTime, bool perMachine);
    public sealed virtual bool IsMessagePackRecreated();
}
internal class Microsoft.VisualStudio.ExtensionManager.Impl.Settings.InstalledExtensionStored : object {
    private object syncRoot;
    private static HashSet`1<char> IllegalPathCharsHash;
    [CompilerGeneratedAttribute]
private AutoUpdateState <AutoUpdateState>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ExtensionName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ExtensionNameInRegistry>k__BackingField;
    [CompilerGeneratedAttribute]
private string <FullRegistryPath>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Identifier>k__BackingField;
    [CompilerGeneratedAttribute]
private long <InstalledOn>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <InstalledPerMachine>k__BackingField;
    [CompilerGeneratedAttribute]
private string <InstallPath>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsPackComponent>k__BackingField;
    [CompilerGeneratedAttribute]
private string <IncompatibleReason>k__BackingField;
    [CompilerGeneratedAttribute]
private ExtensionType <ExtensionType>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<Guid> <PackageGuids>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<string> <PackedVsixIds>k__BackingField;
    [CompilerGeneratedAttribute]
private InstalledExtensionStoredReadMode <ReadMode>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ReadSuccess>k__BackingField;
    [CompilerGeneratedAttribute]
private EnabledState <State>k__BackingField;
    internal AutoUpdateState AutoUpdateState { get; internal set; }
    internal string ExtensionName { get; private set; }
    internal string ExtensionNameInRegistry { get; private set; }
    internal string FullRegistryPath { get; private set; }
    internal string Identifier { get; private set; }
    internal long InstalledOn { get; private set; }
    internal bool InstalledPerMachine { get; private set; }
    internal string InstallPath { get; private set; }
    internal bool IsPackComponent { get; internal set; }
    internal string IncompatibleReason { get; internal set; }
    internal ExtensionType ExtensionType { get; private set; }
    internal string Name { get; private set; }
    internal IList`1<Guid> PackageGuids { get; private set; }
    internal IList`1<string> PackedVsixIds { get; private set; }
    public InstalledExtensionStoredReadMode ReadMode { get; }
    internal bool ReadSuccess { get; private set; }
    internal EnabledState State { get; internal set; }
    internal InstalledExtensionStored(IInstalledExtension extension);
    internal InstalledExtensionStored(ISettingsStore readableSettingsStore, IInstalledExtension extension, InstalledExtensionStoredReadMode readMode);
    internal InstalledExtensionStored(ISettingsStore readableSettingsStore, string registryPath, string extensionName, InstalledExtensionStoredReadMode readMode);
    private static InstalledExtensionStored();
    internal static string GetExtensionNameInRegistry(IInstalledExtension extension);
    internal static string GetExtensionNameInRegistry(string name, string identifier);
    private ValueTuple`2<string, string> GetExtensionNameIdFromRegistryName();
    [CompilerGeneratedAttribute]
internal AutoUpdateState get_AutoUpdateState();
    [CompilerGeneratedAttribute]
internal void set_AutoUpdateState(AutoUpdateState value);
    [CompilerGeneratedAttribute]
internal string get_ExtensionName();
    [CompilerGeneratedAttribute]
private void set_ExtensionName(string value);
    [CompilerGeneratedAttribute]
internal string get_ExtensionNameInRegistry();
    [CompilerGeneratedAttribute]
private void set_ExtensionNameInRegistry(string value);
    [CompilerGeneratedAttribute]
internal string get_FullRegistryPath();
    [CompilerGeneratedAttribute]
private void set_FullRegistryPath(string value);
    [CompilerGeneratedAttribute]
internal string get_Identifier();
    [CompilerGeneratedAttribute]
private void set_Identifier(string value);
    [CompilerGeneratedAttribute]
internal long get_InstalledOn();
    [CompilerGeneratedAttribute]
private void set_InstalledOn(long value);
    [CompilerGeneratedAttribute]
internal bool get_InstalledPerMachine();
    [CompilerGeneratedAttribute]
private void set_InstalledPerMachine(bool value);
    [CompilerGeneratedAttribute]
internal string get_InstallPath();
    [CompilerGeneratedAttribute]
private void set_InstallPath(string value);
    [CompilerGeneratedAttribute]
internal bool get_IsPackComponent();
    [CompilerGeneratedAttribute]
internal void set_IsPackComponent(bool value);
    [CompilerGeneratedAttribute]
internal string get_IncompatibleReason();
    [CompilerGeneratedAttribute]
internal void set_IncompatibleReason(string value);
    [CompilerGeneratedAttribute]
internal ExtensionType get_ExtensionType();
    [CompilerGeneratedAttribute]
private void set_ExtensionType(ExtensionType value);
    [CompilerGeneratedAttribute]
internal string get_Name();
    [CompilerGeneratedAttribute]
private void set_Name(string value);
    [CompilerGeneratedAttribute]
internal IList`1<Guid> get_PackageGuids();
    [CompilerGeneratedAttribute]
private void set_PackageGuids(IList`1<Guid> value);
    [CompilerGeneratedAttribute]
internal IList`1<string> get_PackedVsixIds();
    [CompilerGeneratedAttribute]
private void set_PackedVsixIds(IList`1<string> value);
    [CompilerGeneratedAttribute]
public InstalledExtensionStoredReadMode get_ReadMode();
    [CompilerGeneratedAttribute]
internal bool get_ReadSuccess();
    [CompilerGeneratedAttribute]
private void set_ReadSuccess(bool value);
    [CompilerGeneratedAttribute]
internal EnabledState get_State();
    [CompilerGeneratedAttribute]
internal void set_State(EnabledState value);
    public static void SaveExtensionData(IInstalledExtension extension, IWritableSettingsStore store);
    internal void DeleteExtensionData(IWritableSettingsStore writableSettings);
    internal IInstalledExtension GetInstalledExtension(IEngineHost host);
    internal IInstalledExtension GetInstalledExtension(ExtensionFromStorageImpl fromMetadataStore, IEngineHost host);
    private void CreateCacheEntryIfNotExists(IWritableSettingsStore writableSettings);
    private string GetPackageGuidsPath();
    private string GetPackedVsixIdsPath();
    private void ParseAutoUpdateState(ISettingsStore readableSettingsStore);
    private void ParseExtensionType(ISettingsStore readableSettingsStore);
    private void ParseEnabledState(ISettingsStore readableSettingsStore);
    private void ParseExtensionName(ISettingsStore readableSettingsStore);
    private void ParseInstalledOnDateTime(ISettingsStore readableSettingsStore);
    private void ParseInstalledPerMachine(ISettingsStore readableSettingsStore);
    private void ParseInstallPath(ISettingsStore readableSettingsStore);
    private void ParseIsPackComponent(ISettingsStore readableSettingsStore);
    private void ParsePackageGuids(ISettingsStore readableSettingsStore);
    private void ParsePackedVsixIds(ISettingsStore readableSettingsStore);
    private void ParseIncompatibleReason(ISettingsStore readableSettingsStore);
    private void ParseStatePropertiesOnly(ISettingsStore readableSettingsStore);
    private void ParseProperties(ISettingsStore readableSettingsStore);
    private void SaveAutoUpdateState(IWritableSettingsStore writableSettings);
    private void SaveExtensionType(IWritableSettingsStore writableSettings);
    private void SaveIncompatibleReason(IWritableSettingsStore writableSettings);
    internal void SaveExtensionData(IWritableSettingsStore writableSettings);
    private void SaveExtensionName(IWritableSettingsStore writableSettings);
    private void SaveInstalledOn(IWritableSettingsStore writableSettings);
    private void SaveInstalledPerMachine(IWritableSettingsStore writableSettings);
    private void SaveInstallPath(IWritableSettingsStore writableSettings);
    private void SaveIsPackComponent(IWritableSettingsStore writableSettings);
    private void SavePackageGuids(IWritableSettingsStore writableSettings);
    private void SavePackedVsixIds(IWritableSettingsStore writableSettings);
    private void SaveState(IWritableSettingsStore writableSettings);
    private void SetupRegistryPath(IInstalledExtension extension);
}
internal enum Microsoft.VisualStudio.ExtensionManager.Impl.Settings.InstalledExtensionStoredReadMode : Enum {
    public int value__;
    public static InstalledExtensionStoredReadMode None;
    public static InstalledExtensionStoredReadMode Full;
    public static InstalledExtensionStoredReadMode OnlyStateItems;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.VisualStudio.ExtensionManager.InfoBarPrompt : object {
    [CompilerGeneratedAttribute]
private IServiceProvider <serviceProvider>P;
    [NullableAttribute("2")]
private IVsInfoBarHost infoBarHost;
    [CompilerGeneratedAttribute]
private List`1<IVsInfoBarTextSpan> <TextSpans>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<IVsInfoBarActionItem> <DismissingActions>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<IVsInfoBarActionItem> <MoreInfoActions>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private Action`1<IVsInfoBarActionItem> <MoreInfoActionHandler>k__BackingField;
    [CompilerGeneratedAttribute]
private ImageMoniker <ImageMoniker>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsCloseButtonVisible>k__BackingField;
    internal List`1<IVsInfoBarTextSpan> TextSpans { get; }
    internal List`1<IVsInfoBarActionItem> DismissingActions { get; }
    internal List`1<IVsInfoBarActionItem> MoreInfoActions { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal Action`1<IVsInfoBarActionItem> MoreInfoActionHandler { get; internal set; }
    internal ImageMoniker ImageMoniker { get; internal set; }
    internal bool IsCloseButtonVisible { get; internal set; }
    public InfoBarPrompt(IServiceProvider serviceProvider);
    [CompilerGeneratedAttribute]
internal List`1<IVsInfoBarTextSpan> get_TextSpans();
    [CompilerGeneratedAttribute]
internal List`1<IVsInfoBarActionItem> get_DismissingActions();
    [CompilerGeneratedAttribute]
internal List`1<IVsInfoBarActionItem> get_MoreInfoActions();
    [CompilerGeneratedAttribute]
internal Action`1<IVsInfoBarActionItem> get_MoreInfoActionHandler();
    [CompilerGeneratedAttribute]
internal Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_MoreInfoActionHandler(Action`1<IVsInfoBarActionItem> value);
    [CompilerGeneratedAttribute]
internal ImageMoniker get_ImageMoniker();
    [CompilerGeneratedAttribute]
internal Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_ImageMoniker(ImageMoniker value);
    [CompilerGeneratedAttribute]
internal bool get_IsCloseButtonVisible();
    [CompilerGeneratedAttribute]
internal Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_IsCloseButtonVisible(bool value);
    [AsyncStateMachineAttribute("Microsoft.VisualStudio.ExtensionManager.InfoBarPrompt/<PromptUserAsync>d__24")]
internal Task`1<IVsInfoBarActionItem> PromptUserAsync(CancellationToken cancellationToken);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.VisualStudio.ExtensionManager.InstallableExtensionImpl : ExtensionImpl {
    [NullableAttribute("2")]
private string vsixPackagePath;
    [NullableAttribute("2")]
private Stream vsixStream;
    private Uri vsixManifestInsidePackage;
    private Uri vsixManifestJsonInsidePackage;
    private ExtensionDigitalSignature signature;
    [NullableAttribute("2")]
private X509Certificate2 certificate;
    private CultureInfo preferredCulture;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private List`1<Tuple`2<IExtensionReference, InstallableExtensionImpl>> nestedExtensions;
    [NullableAttribute("2")]
private IEnumerable`1<X509ChainStatus> certInfo;
    private ulong uncompressedSize;
    private bool checkedCertificate;
    private Nullable`1<bool> isExtensionManifestVersionV2;
    public bool IsExtensionManifestVersionV2 { get; public set; }
    [NullableAttribute("2")]
public string PackagePath { get; }
    [NullableAttribute("2")]
public ExtensionDigitalSignature Signature { get; }
    [NullableAttribute("2")]
public string SignedBy { get; }
    [NullableAttribute("2")]
public X509Certificate2 SignatureCertificate { get; }
    public IEnumerable`1<X509ChainStatus> InvalidCertificateInformation { get; }
    public Stream PackageStream { get; }
    public bool HasEmbeddedExtensions { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public IEnumerable`1<Tuple`2<IExtensionReference, InstallableExtensionImpl>> NestedExtensions { get; }
    internal ulong UncompressedSize { get; }
    public InstallableExtensionImpl(string path, CultureInfo preferredCulture);
    public InstallableExtensionImpl(Stream vsixPackageStream, CultureInfo preferredCulture);
    public InstallableExtensionImpl(IInstallableExtension extension, CultureInfo preferredCulture);
    public sealed virtual bool get_IsExtensionManifestVersionV2();
    public void set_IsExtensionManifestVersionV2(bool value);
    private void ReadVSIXManifestFromPackage(Stream stream, CultureInfo preferredCulture);
    private void ReadPackedExtensionData(ZipPackage vsixPackage);
    internal static ExtensionPack ReadExtensionPackInfo(Stream extensionPackReader, string extensionPackFilePath);
    [NullableContextAttribute("2")]
public sealed virtual string get_PackagePath();
    [NullableContextAttribute("2")]
public sealed virtual ExtensionDigitalSignature get_Signature();
    [NullableContextAttribute("2")]
public sealed virtual string get_SignedBy();
    [NullableContextAttribute("2")]
public sealed virtual X509Certificate2 get_SignatureCertificate();
    public sealed virtual IEnumerable`1<X509ChainStatus> get_InvalidCertificateInformation();
    private bool ValidateTimestamp(PackageDigitalSignature signature, DateTime& timeStamp);
    private Version GetExtensionSDKMinmumSupportedVersion(ZipPackage vsixPackage);
    private void GetSignatureState(ZipPackage vsixPackage);
    [NullableContextAttribute("2")]
private bool IsSignatureAlgorithmSHA256(PackageDigitalSignature packageSignature);
    private void GetSignatureCertificate(ZipPackage vsixPackage);
    public Stream get_PackageStream();
    private ExtensionDigitalSignatureState VerifySignaturePolicy(ZipPackage vsixPackage, PackageDigitalSignature& packageSignature);
    public sealed virtual bool get_HasEmbeddedExtensions();
    public IEnumerable`1<Tuple`2<IExtensionReference, InstallableExtensionImpl>> get_NestedExtensions();
    internal ulong get_UncompressedSize();
    private void InitializeNestedExtensions();
    private ulong GetUncompressedSize(ZipPackage package);
    public void RefreshPackageStream(ZipPackage parentVSIX, IExtensionReference reference);
    internal void RefreshExtractedPackageStream(IInstalledExtension parentExtension, IExtensionReference reference);
    internal void RefreshExtractedPackageStream(string nestedVsixPath, IExtensionReference reference);
    private InstallableExtensionImpl InitializeNestedExtension(ZipPackage parentVSIX, IExtensionReference reference, Func`2<Stream, InstallableExtensionImpl> initialize);
    public sealed virtual void Dispose();
    protected void Dispose(bool disposing);
    protected virtual override void Finalize();
    [CompilerGeneratedAttribute]
private InstallableExtensionImpl <InitializeNestedExtensions>b__45_1(Stream stream);
    [CompilerGeneratedAttribute]
private InstallableExtensionImpl <RefreshPackageStream>b__47_0(Stream stream);
}
[GeneratedCodeAttribute("xsd", "4.6.81.0")]
[DebuggerStepThroughAttribute]
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
public class Microsoft.VisualStudio.ExtensionManager.Installation : object {
    private InstallationTarget[] installationTargetField;
    private bool installedByMsiField;
    private bool installedByMsiFieldSpecified;
    private bool systemComponentField;
    private bool systemComponentFieldSpecified;
    private bool allUsersField;
    private bool allUsersFieldSpecified;
    private bool experimentalField;
    private bool experimentalFieldSpecified;
    private string scopeField;
    private InstallationPartialManifestType partialManifestTypeField;
    private bool partialManifestTypeFieldSpecified;
    [CompilerGeneratedAttribute]
private string <ExtensionType>k__BackingField;
    [XmlElementAttribute("InstallationTarget")]
public InstallationTarget[] InstallationTarget { get; public set; }
    [XmlAttributeAttribute]
public bool InstalledByMsi { get; public set; }
    [XmlIgnoreAttribute]
public bool InstalledByMsiSpecified { get; public set; }
    [XmlAttributeAttribute]
public bool SystemComponent { get; public set; }
    [XmlIgnoreAttribute]
public bool SystemComponentSpecified { get; public set; }
    [XmlAttributeAttribute]
public bool AllUsers { get; public set; }
    [XmlIgnoreAttribute]
public bool AllUsersSpecified { get; public set; }
    [XmlAttributeAttribute]
public bool Experimental { get; public set; }
    [XmlIgnoreAttribute]
public bool ExperimentalSpecified { get; public set; }
    [XmlAttributeAttribute]
public string Scope { get; public set; }
    [XmlAttributeAttribute]
public InstallationPartialManifestType PartialManifestType { get; public set; }
    [XmlIgnoreAttribute]
public bool PartialManifestTypeSpecified { get; public set; }
    [XmlAttributeAttribute]
public string ExtensionType { get; public set; }
    public InstallationTarget[] get_InstallationTarget();
    public void set_InstallationTarget(InstallationTarget[] value);
    public bool get_InstalledByMsi();
    public void set_InstalledByMsi(bool value);
    public bool get_InstalledByMsiSpecified();
    public void set_InstalledByMsiSpecified(bool value);
    public bool get_SystemComponent();
    public void set_SystemComponent(bool value);
    public bool get_SystemComponentSpecified();
    public void set_SystemComponentSpecified(bool value);
    public bool get_AllUsers();
    public void set_AllUsers(bool value);
    public bool get_AllUsersSpecified();
    public void set_AllUsersSpecified(bool value);
    public bool get_Experimental();
    public void set_Experimental(bool value);
    public bool get_ExperimentalSpecified();
    public void set_ExperimentalSpecified(bool value);
    public string get_Scope();
    public void set_Scope(string value);
    public InstallationPartialManifestType get_PartialManifestType();
    public void set_PartialManifestType(InstallationPartialManifestType value);
    public bool get_PartialManifestTypeSpecified();
    public void set_PartialManifestTypeSpecified(bool value);
    [CompilerGeneratedAttribute]
public string get_ExtensionType();
    [CompilerGeneratedAttribute]
public void set_ExtensionType(string value);
}
[GeneratedCodeAttribute("xsd", "4.6.81.0")]
[DebuggerStepThroughAttribute]
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
public class Microsoft.VisualStudio.ExtensionManager.InstallationTarget : object {
    private string idField;
    private string versionField;
    private string targetPlatformIdentifierField;
    private string targetPlatformVersionField;
    private string sdkNameField;
    private string sdkVersionField;
    private XmlAttribute[] anyAttrField;
    private string productArchitecture;
    [XmlAttributeAttribute]
public string Id { get; public set; }
    [XmlAttributeAttribute]
public string Version { get; public set; }
    [XmlAttributeAttribute]
public string TargetPlatformIdentifier { get; public set; }
    [XmlAttributeAttribute]
public string TargetPlatformVersion { get; public set; }
    [XmlAttributeAttribute]
public string SdkName { get; public set; }
    [XmlAttributeAttribute]
public string SdkVersion { get; public set; }
    [XmlAnyAttributeAttribute]
public XmlAttribute[] AnyAttr { get; public set; }
    [XmlElementAttribute]
public string ProductArchitecture { get; public set; }
    public string get_Id();
    public void set_Id(string value);
    public string get_Version();
    public void set_Version(string value);
    public string get_TargetPlatformIdentifier();
    public void set_TargetPlatformIdentifier(string value);
    public string get_TargetPlatformVersion();
    public void set_TargetPlatformVersion(string value);
    public string get_SdkName();
    public void set_SdkName(string value);
    public string get_SdkVersion();
    public void set_SdkVersion(string value);
    public XmlAttribute[] get_AnyAttr();
    public void set_AnyAttr(XmlAttribute[] value);
    public string get_ProductArchitecture();
    public void set_ProductArchitecture(string value);
}
internal class Microsoft.VisualStudio.ExtensionManager.InstalledExtensionBatch : object {
    private IInstalledExtensionList _addedExtensionsList;
    private IInstalledExtensionList _deletedExtensionsList;
    private IReadOnlyInstalledExtensionList _backingExtensionList;
    private IEngineHost _engineHost;
    internal InstalledExtensionBatch(IReadOnlyInstalledExtensionList backingExtensionList, IEnumerable`1<IInstalledExtension> candidateInstalledExtensions, IEngineHost engineHost);
    internal InstalledExtensionBatch(IReadOnlyInstalledExtensionList backingExtensionList, IEngineHost engineHost);
    public sealed virtual void Add(IInstalledExtension extension);
    public sealed virtual bool Contains(string identifier);
    public sealed virtual IEnumerable`1<IInstalledExtension> GetImmediateDependents(IInstalledExtension extension, bool nestedOnly);
    public sealed virtual bool HasDependentExtensions(IInstalledExtension extension);
    public sealed virtual void Remove(IInstalledExtension extension);
    public sealed virtual void SetEnabledState(IInstalledExtension extension, EnabledState state);
    public sealed virtual void SetAutoUpdateState(IInstalledExtension extension, AutoUpdateState state);
    public sealed virtual void SetPackComponent(IInstalledExtension extension, bool isPackComponent);
    public sealed virtual bool TryGetDependentExtensions(string identifier, IEnumerable`1& listOfDependantExtensions);
    public sealed virtual bool TryGetValue(string identifier, IInstalledExtension& result);
    [IteratorStateMachineAttribute("Microsoft.VisualStudio.ExtensionManager.InstalledExtensionBatch/<GetEnumerator>d__16")]
public sealed virtual IEnumerator`1<IInstalledExtension> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    internal static bool TryUpgrade(IInstalledExtensionList list, IInstalledExtension extension);
    private IInstalledExtension GetTemporaryModifiableExtension(IInstalledExtension extension);
    [IteratorStateMachineAttribute("Microsoft.VisualStudio.ExtensionManager.InstalledExtensionBatch/<GetUnchangedExtensions>d__20")]
internal IEnumerable`1<IInstalledExtension> GetUnchangedExtensions(IEnumerable`1<IInstalledExtension> extensionsFromBackingList);
    internal IEnumerable`1<ValueTuple`2<string, bool>> GetPackComponentChanges();
    public sealed virtual IReadOnlyInstalledExtensionList AsReadOnly();
}
internal class Microsoft.VisualStudio.ExtensionManager.InstalledExtensionComparer : object {
    public sealed virtual bool Equals(IInstalledExtension x, IInstalledExtension y);
    public sealed virtual int GetHashCode(IInstalledExtension obj);
    public sealed virtual int Compare(IInstalledExtension x, IInstalledExtension y);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.VisualStudio.ExtensionManager.InstalledExtensionImpl : ExtensionImpl {
    internal static int GuidStringLength;
    private static string PackComponentFileName;
    internal static string RootKeyPackage;
    internal static string EndBrackets;
    internal static string Space;
    internal static string Tab;
    private static ConcurrentDictionary`2<string, IEnumerable`1<string>> ExtensionPackVsixIdsCache;
    private EnabledState state;
    private Nullable`1<ulong> sizeInBytes;
    private AutoUpdateState autoUpdate;
    [NullableAttribute("2")]
private Version vsVersion;
    private Lazy`1<HashSet`1<Guid>> packageGuidLazy;
    [CompilerGeneratedAttribute]
private string <InstallPath>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <InstalledPerMachine>k__BackingField;
    private Nullable`1<bool> isPackComponent;
    [CompilerGeneratedAttribute]
private string <IncompatibleReason>k__BackingField;
    [CompilerGeneratedAttribute]
private IEngineHost <EngineHost>k__BackingField;
    public string InstallPath { get; public set; }
    public EnabledState State { get; public set; }
    public Nullable`1<DateTimeOffset> InstalledOn { get; }
    public ulong SizeInBytes { get; }
    public bool InstalledPerMachine { get; public set; }
    public bool IsPackComponent { get; internal set; }
    public bool IsProductUpdate { get; }
    public string IncompatibleReason { get; public set; }
    public AutoUpdateState AutoUpdateState { get; public set; }
    public IEngineHost EngineHost { get; private set; }
    [NullableAttribute("2")]
private Version VsVersion { get; }
    public string IconFullPath { get; }
    public string PreviewImageFullPath { get; }
    public HashSet`1<Guid> PackageGuids { get; }
    public InstalledExtensionImpl(string vsixManifestPath, IEngineHost engineHost, bool installedPerMachine, CultureInfo preferredCulture, IList`1<string> extensionPackVsixIds, IList`1<Guid> packageGuids);
    public InstalledExtensionImpl(string vsixManifestPath, IEngineHost engineHost, bool installedPerMachine, CultureInfo preferredCulture, IList`1<Guid> packageGuids);
    public InstalledExtensionImpl(ExtensionFromStorageImpl extensionFromStorage, IEngineHost engineHost);
    public InstalledExtensionImpl(string vsixManifestPath, IEngineHost engineHost, bool installedPerMachine);
    public InstalledExtensionImpl(IExtension extension, string installPath, IEngineHost engineHost, bool installedPerMachine, IList`1<Guid> packageGuids, IList`1<string> extensionPackVsixIds, CultureInfo preferredCulture);
    public InstalledExtensionImpl(IInstalledExtension extension, IEngineHost engineHost);
    private static InstalledExtensionImpl();
    private void UpdatePackedVsixCache();
    [NullableContextAttribute("2")]
private CultureInfo SetupCulture(CultureInfo preferredCulture);
    [NullableContextAttribute("2")]
private void ResetCultureIfNoCultureFoundAndCultureNotNull(bool cultureFound, CultureInfo culture);
    private HashSet`1<Guid> InitializePackageGuids(IList`1<Guid> packageGuids);
    [IteratorStateMachineAttribute("Microsoft.VisualStudio.ExtensionManager.InstalledExtensionImpl/<PopulatePackageGuids>d__21")]
private IEnumerable`1<Guid> PopulatePackageGuids();
    private Dictionary`2<string, string> GetPackageGuidsAndNames(string pkgdefPath);
    private static void ReadPackageDefDetails(string pkgdefPath, List`1<ValueTuple`2<int, string>> packageList);
    [NullableContextAttribute("0")]
internal static ValueTuple`2<bool, int> FindIfPackageAndGuidStart(ReadOnlySpan`1<char> line);
    [NullableContextAttribute("0")]
private static bool MatchHexChars(ReadOnlySpan`1& line, int count);
    private bool TryGetPackageName(string packageInfo, String& packageName);
    private String[] GetPackageDefPaths();
    [CompilerGeneratedAttribute]
public sealed virtual string get_InstallPath();
    [CompilerGeneratedAttribute]
public void set_InstallPath(string value);
    public sealed virtual EnabledState get_State();
    public void set_State(EnabledState value);
    public sealed virtual Nullable`1<DateTimeOffset> get_InstalledOn();
    public sealed virtual ulong get_SizeInBytes();
    [CompilerGeneratedAttribute]
public sealed virtual bool get_InstalledPerMachine();
    [CompilerGeneratedAttribute]
public void set_InstalledPerMachine(bool value);
    public virtual bool get_IsPackComponent();
    internal virtual void set_IsPackComponent(bool value);
    public sealed virtual bool get_IsProductUpdate();
    [CompilerGeneratedAttribute]
public sealed virtual string get_IncompatibleReason();
    [CompilerGeneratedAttribute]
public sealed virtual void set_IncompatibleReason(string value);
    public sealed virtual string GetContentLocation(IExtensionContent content);
    public sealed virtual AutoUpdateState get_AutoUpdateState();
    public void set_AutoUpdateState(AutoUpdateState value);
    public sealed virtual void add_UpdateInstallCompletedAsync(AsyncEventHandler`1<InstallCompletedEventArgs> value);
    public sealed virtual void remove_UpdateInstallCompletedAsync(AsyncEventHandler`1<InstallCompletedEventArgs> value);
    [AsyncStateMachineAttribute("Microsoft.VisualStudio.ExtensionManager.InstalledExtensionImpl/<InvokeUpdateInstallCompletedAsync>d__61")]
public sealed virtual Task InvokeUpdateInstallCompletedAsync(InstallCompletedEventArgs e);
    [CompilerGeneratedAttribute]
public IEngineHost get_EngineHost();
    [CompilerGeneratedAttribute]
private void set_EngineHost(IEngineHost value);
    [NullableContextAttribute("2")]
private Version get_VsVersion();
    private void RemoveInapplicableAssets();
    private bool AssetTargetsVsVersion(IDictionary`2<string, string> attributes);
    [AsyncStateMachineAttribute("Microsoft.VisualStudio.ExtensionManager.InstalledExtensionImpl/<CalculateSizeInBytesAsync>d__70")]
public sealed virtual Task`1<ulong> CalculateSizeInBytesAsync();
    public string get_IconFullPath();
    public string get_PreviewImageFullPath();
    public sealed virtual HashSet`1<Guid> get_PackageGuids();
    public static bool PackComponentFileExists(string installPath);
    public static void SetPackComponentFileExists(string installPath, bool isPackComponent);
    private IEnumerable`1<string> InitializeExtensionPackInfo();
    private IEnumerable`1<string> ReadExtensionPackInfo(string extensionPackFilePath);
    [CompilerGeneratedAttribute]
private IEnumerable`1<string> <.ctor>b__13_0();
    [CompilerGeneratedAttribute]
private IEnumerable`1<string> <UpdatePackedVsixCache>b__17_0(string key, IEnumerable`1<string> currentValue);
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
private string <GetPackageDefPaths>b__27_1(IExtensionContent x);
}
internal class Microsoft.VisualStudio.ExtensionManager.InstalledExtensionList : object {
    private ConcurrentDictionary`2<string, IInstalledExtension> installedExtensions;
    private Dictionary`2<string, List`1<ExtensionDependency>> dependentExtensions;
    internal InstalledExtensionList(InstalledExtensionList copy);
    public sealed virtual void Add(IInstalledExtension extension);
    public sealed virtual bool Contains(string identifier);
    public sealed virtual IEnumerable`1<IInstalledExtension> GetImmediateDependents(IInstalledExtension extension, bool nestedOnly);
    public sealed virtual bool HasDependentExtensions(IInstalledExtension extension);
    public sealed virtual void Remove(IInstalledExtension extension);
    public sealed virtual void SetEnabledState(IInstalledExtension extension, EnabledState state);
    public sealed virtual void SetAutoUpdateState(IInstalledExtension extension, AutoUpdateState state);
    public sealed virtual void SetPackComponent(IInstalledExtension extension, bool isPackComponent);
    public sealed virtual bool TryGetValue(string identifier, IInstalledExtension& result);
    private void AddToDependentExtensionsMap(IInstalledExtension extension);
    private bool IsNestedDependency(IExtensionReference reference);
    private void RemoveFromDependentExtensionsMap(IInstalledExtension extension);
    internal IEnumerable`1<IInstalledExtension> GetIInstalledExtensionList();
    public sealed virtual IEnumerator`1<IInstalledExtension> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    public sealed virtual bool TryGetDependentExtensions(string identifier, IEnumerable`1& listOfDependantExtensions);
    public sealed virtual IReadOnlyInstalledExtensionList AsReadOnly();
    [CompilerGeneratedAttribute]
private bool <RemoveFromDependentExtensionsMap>b__15_0(IExtensionReference r);
}
internal class Microsoft.VisualStudio.ExtensionManager.InstalledExtensionListData : object {
    private AsyncLazy`1<IInstalledExtensionSettingsList> extensionListInitializer;
    private ExtensionEngineImpl engine;
    [CompilerGeneratedAttribute]
private Func`2<IInstalledExtension, bool> <ExtensionFilter>k__BackingField;
    [CompilerGeneratedAttribute]
private Func`2<string, bool> <AssetTypeFilter>k__BackingField;
    private IInstalledExtensionSettingsList list;
    internal Func`2<IInstalledExtension, bool> ExtensionFilter { get; private set; }
    internal Func`2<string, bool> AssetTypeFilter { get; private set; }
    internal IInstalledExtensionSettingsList List { get; private set; }
    private InstalledExtensionListData(ExtensionEngineImpl engine, AsyncLazy`1<IInstalledExtensionSettingsList> extensionListInitializer);
    [CompilerGeneratedAttribute]
internal Func`2<IInstalledExtension, bool> get_ExtensionFilter();
    [CompilerGeneratedAttribute]
private void set_ExtensionFilter(Func`2<IInstalledExtension, bool> value);
    [CompilerGeneratedAttribute]
internal Func`2<string, bool> get_AssetTypeFilter();
    [CompilerGeneratedAttribute]
private void set_AssetTypeFilter(Func`2<string, bool> value);
    internal IInstalledExtensionSettingsList get_List();
    private void set_List(IInstalledExtensionSettingsList value);
}
[GeneratedCodeAttribute("xsd", "4.6.1055.0")]
[DebuggerStepThroughAttribute]
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
public class Microsoft.VisualStudio.ExtensionManager.Installer : object {
    private Action[] actionsField;
    private Dependency[] setupDependenciesField;
    private string chipField;
    private string sizeField;
    private string licenseField;
    [XmlArrayItemAttribute]
public Action[] Actions { get; public set; }
    [XmlArrayItemAttribute("SetupDependency")]
public Dependency[] SetupDependencies { get; public set; }
    [XmlAttributeAttribute]
public string Chip { get; public set; }
    [XmlAttributeAttribute]
public string Size { get; public set; }
    [XmlAttributeAttribute]
public string License { get; public set; }
    public Action[] get_Actions();
    public void set_Actions(Action[] value);
    public Dependency[] get_SetupDependencies();
    public void set_SetupDependencies(Dependency[] value);
    public string get_Chip();
    public void set_Chip(string value);
    public string get_Size();
    public void set_Size(string value);
    public string get_License();
    public void set_License(string value);
}
internal class Microsoft.VisualStudio.ExtensionManager.InstallerData : object {
    [CompilerGeneratedAttribute]
private bool <InstallPerMachine>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ShouldSkipCertCheck>k__BackingField;
    [CompilerGeneratedAttribute]
private string <InstallationDirectory>k__BackingField;
    [CompilerGeneratedAttribute]
private ILogger <Logger>k__BackingField;
    [CompilerGeneratedAttribute]
private InstallableExtensionImpl <Extension>k__BackingField;
    [CompilerGeneratedAttribute]
private Engine <Engine>k__BackingField;
    [CompilerGeneratedAttribute]
private Catalog <Catalog>k__BackingField;
    [CompilerGeneratedAttribute]
private VsixPackage <SetupPackage>k__BackingField;
    [CompilerGeneratedAttribute]
private ServiceProvider <ServiceProvider>k__BackingField;
    public bool InstallPerMachine { get; private set; }
    public bool ShouldSkipCertCheck { get; private set; }
    public string InstallationDirectory { get; private set; }
    public ILogger Logger { get; private set; }
    public InstallableExtensionImpl Extension { get; private set; }
    public Engine Engine { get; private set; }
    public Catalog Catalog { get; private set; }
    public VsixPackage SetupPackage { get; private set; }
    public ServiceProvider ServiceProvider { get; private set; }
    public InstallerData(InstallableExtensionImpl extension, bool installPerMachine, bool shouldSkipCertCheck, string installationDirectory, ILogger logger, Engine setupEngine, Catalog catalog, VsixPackage setupPackage, ServiceProvider serviceProvider);
    [CompilerGeneratedAttribute]
public bool get_InstallPerMachine();
    [CompilerGeneratedAttribute]
private void set_InstallPerMachine(bool value);
    [CompilerGeneratedAttribute]
public bool get_ShouldSkipCertCheck();
    [CompilerGeneratedAttribute]
private void set_ShouldSkipCertCheck(bool value);
    [CompilerGeneratedAttribute]
public string get_InstallationDirectory();
    [CompilerGeneratedAttribute]
private void set_InstallationDirectory(string value);
    [CompilerGeneratedAttribute]
public ILogger get_Logger();
    [CompilerGeneratedAttribute]
private void set_Logger(ILogger value);
    [CompilerGeneratedAttribute]
public InstallableExtensionImpl get_Extension();
    [CompilerGeneratedAttribute]
private void set_Extension(InstallableExtensionImpl value);
    [CompilerGeneratedAttribute]
public Engine get_Engine();
    [CompilerGeneratedAttribute]
private void set_Engine(Engine value);
    [CompilerGeneratedAttribute]
public Catalog get_Catalog();
    [CompilerGeneratedAttribute]
private void set_Catalog(Catalog value);
    [CompilerGeneratedAttribute]
public VsixPackage get_SetupPackage();
    [CompilerGeneratedAttribute]
private void set_SetupPackage(VsixPackage value);
    [CompilerGeneratedAttribute]
public ServiceProvider get_ServiceProvider();
    [CompilerGeneratedAttribute]
private void set_ServiceProvider(ServiceProvider value);
}
public class Microsoft.VisualStudio.ExtensionManager.InstallModule : object {
    private static string DirectoryForExtensionSDKs;
    private static String[] MicrosoftCertSubject;
    private IEnumerable`1<string> perMachineExtensionsRoots;
    private Func`3<IInstallableExtension, bool, string> getInstallPathOverride;
    private SendOrPostCallback onInstallCompletedDelegate;
    private SendOrPostCallback onInstallProgressChangedDelegate;
    private HybridDictionary userStateToLifetime;
    [CompilerGeneratedAttribute]
private IEngineHost <EngineHost>k__BackingField;
    [CompilerGeneratedAttribute]
private ExtensionEngineImpl <ExtensionEngine>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ApplicationExtensionsRoot>k__BackingField;
    [CompilerGeneratedAttribute]
private string <CurrentUserExtensionsRoot>k__BackingField;
    public IEngineHost EngineHost { get; }
    public ExtensionEngineImpl ExtensionEngine { get; }
    private string ApplicationExtensionsRoot { get; }
    private string CurrentUserExtensionsRoot { get; }
    public InstallModule(IEngineHost engineHost, IExtensionEngine engine);
    private static InstallModule();
    [CompilerGeneratedAttribute]
public IEngineHost get_EngineHost();
    [CompilerGeneratedAttribute]
public ExtensionEngineImpl get_ExtensionEngine();
    [CompilerGeneratedAttribute]
private string get_ApplicationExtensionsRoot();
    [CompilerGeneratedAttribute]
private string get_CurrentUserExtensionsRoot();
    public bool CommitExternalInstall(string dataPath, bool perMachine);
    public void InitializeDelegates();
    public void InstallAsync(IInstallableExtension extension, InstallFlags installFlags, object userState);
    public void InstallAsyncCancel(object userState);
    public bool InstallInternal(InstallableExtensionImpl extension, InstallFlags installFlags, IDictionary`2<IInstalledExtension, Dictionary`2<string, bool>> extensionsInstalledSoFar, List`1<IInstalledExtension> extensionsUninstalledSoFar, IInstalledExtensionList modifiedInstalledExtensionsList, AsyncOperation asyncOp, IProgress`1<InstallProgressData> progress, Version targetedVsVersion);
    public bool InstallSynchronously(IInstallableExtension extension, InstallFlags installFlags, Version targetedVsVersion);
    public bool PerformLegacyInstall(InstallableExtensionImpl extension, IDictionary`2<IInstalledExtension, Dictionary`2<string, bool>> extensionsInstalledSoFar, List`1<IInstalledExtension> extensionsUninstalledSoFar, IInstalledExtensionList modifiedInstalledExtensionsList, IProgress`1<InstallProgressData> progress, InstallFlags installFlags, AsyncOperation asyncOp, bool isPackComponent, Version targetedVsVersion, IInstalledExtension& newExtension);
    private bool BeginInstall(IInstallableExtension installableExtension, InstallFlags installFlags, AsyncOperation asyncOp, Version targetedVsVersion);
    private bool CheckIfExtensionRequiresAdditionalOperationForInstall(IExtension extension, IInstalledExtensionList modifiedInstalledExtensionsList, bool installingAsNestedExtension, bool allowReplace, Boolean& performExtensionUpdate);
    internal bool CommitInstalledAndUninstalledExtensions(IEnumerable`1<IInstalledExtension> installedExtensions, IEnumerable`1<IInstalledExtension> uninstalledExtensions, IEnumerable`1<ValueTuple`2<string, bool>> packComponentChanges, Version targetedVSVersion, InstallFlags installFlags);
    private void ScheduleDeleteExistingExtensionIfReplaced(IInstalledExtension existingExtension, bool incomingConflictsWithExisting, bool removeIncomingExtensionFromDisk);
    private void ProcessIncomingExtension(List`1<IInstalledExtension> extensionsToEnable, bool autoUpdateFeatureEnabled, IInstalledExtension incomingExtension, bool removeIncomingExtensionFromDisk);
    private bool ShouldScheduleIncomingExtensionForRemoval(Dictionary`2<string, Version> highVersionIdMap, IInstalledExtension incomingExtension);
    private bool IncomingExtensionConflictsWithExistingExtension(IInstalledExtension incomingExtension, IInstalledExtension& existingExtension);
    private bool ExtensionRequiresAdditionalOperationForInstall(InstallableExtensionImpl extension, IInstalledExtensionList modifiedInstalledExtensionsList, bool isNestedExtension, InstallFlags flags, Boolean& performExtensionUpdate);
    private void FindInstallConflicts(InstallableExtensionImpl extension, IInstalledExtensionList modifiedInstalledExtensionsList, List`1<IExtension> impactedExtensions);
    private void FindRecursiveInstallConflicts(InstallableExtensionImpl extension, IInstalledExtensionList modifiedInstalledExtensionsList, List`1<IExtension> impactedExtensions, bool isNested);
    private void InstallCompletionMethod(IInstalledExtension extension, InstallState finalState, bool restartRequired, Exception exception, bool canceled, AsyncOperation asyncOp);
    private bool InstallNestedExtensions(InstallableExtensionImpl parentExtension, IInstalledExtension installedParentExtension, ZipPackage parentVSIX, InstallFlags installFlags, IDictionary`2<IInstalledExtension, Dictionary`2<string, bool>> extensionsInstalledSoFar, List`1<IInstalledExtension> extensionsUninstalledSoFar, IInstalledExtensionList modifiedInstalledExtensionsList, AsyncOperation asyncOp, IProgress`1<InstallProgressData> progress, Version targetedVsVersion);
    private void InstallWorker(IInstallableExtension extension, InstallFlags installFlags, AsyncOperation asyncOp);
    private bool PerformSetupEngineInstall(InstallableExtensionImpl extensionToInstall, bool installPerMachine, bool isPackComponent, IDictionary`2<IInstalledExtension, Dictionary`2<string, bool>> extensionsInstalledSoFar, List`1<IInstalledExtension> extensionsUninstalledSoFar, IInstalledExtensionList modifiedInstalledExtensionsList, IProgress`1<InstallProgressData> progress, InstallFlags installFlags, AsyncOperation asyncOp, Version targetedVsVersion, IInstalledExtension& newExtension);
    private void RollBackInstallation(IDictionary`2<IInstalledExtension, Dictionary`2<string, bool>> installedExtensions, IEnumerable`1<IInstalledExtension> uninstalledExtensions, Version targetVSVersion, InstallFlags installFlags);
    private void RollBackUpdatedExtension(Dictionary`2<string, bool> writtenFiles);
    private bool TaskCanceled(object userState);
    public void SetGetInstallPathOverride(Func`3<IInstallableExtension, bool, string> getInstallPathOverride);
    private static Version GetTargetedVersionFromUserState(object state);
    private static bool IsCertFromMicrosoft(string certKey, String& revisedCertKey);
    private bool CanPerformExtensionUpdate(IInstalledExtension installedExtension, IExtension extensionToInstall);
    private void CheckCertificateBeforeUpgrade(InstallableExtensionImpl extension, IInstalledExtension installedVersion, bool enforceCertificateCheckForUpgrade);
    private void CheckIfProductSupported(IExtension extension);
    private ulong GetExtensionInstallationSize(InstallableExtensionImpl extension, IInstalledExtensionList modifiedInstalledExtensionsList);
    private IEnumerable`1<InstallableExtensionImpl> GetInstallableNestedExtensions(InstallableExtensionImpl parentExtension, IInstalledExtensionList modifiedInstalledExtensionsList);
    private string GetInstallPath(bool perMachine, IInstallableExtension extension);
    private void PreviewInstalledExtensions(InstallableExtensionImpl extension, bool perMachine, List`1<IInstalledExtension> previewedInstalledExtensions, IInstalledExtensionList modifiedInstalledExtensionsList);
    private IInstalledExtension ToInstalledExtension(InstallableExtensionImpl extension, bool perMachine);
    private bool TrySetAutoUpdateState(IInstalledExtension extension, AutoUpdateState autoUpdateState);
}
internal interface Microsoft.VisualStudio.ExtensionManager.IPackageManifestSchema {
    public Dependency[] Dependencies { get; }
    public Installation Installation { get; }
    public abstract virtual Dependency[] get_Dependencies();
    public abstract virtual Installation get_Installation();
}
internal interface Microsoft.VisualStudio.ExtensionManager.ISetupEngineService {
    public IDependencyGraph GetProductDependencyGraph { get; }
    public string InstallPath { get; }
    public IInstance Instance { get; }
    public Engine Engine { get; }
    public abstract virtual Engine CreateEngine(IEngineHost engineHost, IServiceProvider serviceProvider, InstallFlags installFlags);
    public abstract virtual void Install();
    public abstract virtual void LoadPartialJson(string catalogJson);
    public abstract virtual IDependencyGraph get_GetProductDependencyGraph();
    public abstract virtual string get_InstallPath();
    public abstract virtual IInstance get_Instance();
    public abstract virtual Engine get_Engine();
}
[GeneratedCodeAttribute("xsd", "4.0.30319.34209")]
[XmlTypeAttribute]
public enum Microsoft.VisualStudio.ExtensionManager.ItemsChoiceType : Enum {
    public int value__;
    public static ItemsChoiceType Assembly;
    public static ItemsChoiceType CustomExtension;
    public static ItemsChoiceType ItemTemplate;
    public static ItemsChoiceType MefComponent;
    public static ItemsChoiceType ProjectTemplate;
    public static ItemsChoiceType Sample;
    public static ItemsChoiceType ToolboxControl;
    public static ItemsChoiceType VsPackage;
}
internal class Microsoft.VisualStudio.ExtensionManager.LazyWeakReference`1 : object {
    private Func`1<T> _instanceFactory;
    private WeakReference`1<T> _weakReference;
    private UInt32 _activeHandleCount;
    private T _localValueWhenHandleActive;
    private bool AreHandlesActive { get; }
    internal T Target { get; internal set; }
    internal LazyWeakReference`1(Func`1<T> instanceFactory);
    private bool get_AreHandlesActive();
    internal T get_Target();
    internal void set_Target(T value);
    internal void Reset();
    internal IDisposable GetHandle();
    [CompilerGeneratedAttribute]
private void <GetHandle>b__11_0();
}
public enum Microsoft.VisualStudio.ExtensionManager.ListType : Enum {
    public int value__;
    public static ListType LoadableExtensions;
    public static ListType PendingDeletions;
    public static ListType PermanentDisabledExtensions;
    public static ListType WarningExtensions;
    public static ListType ExtensionAutoUpdateStates;
    public static ListType InstalledExtensions;
}
internal class Microsoft.VisualStudio.ExtensionManager.MapList`2 : ReadOnlyCollection`1<V> {
    private static IList`1<V> Empty;
    private IList`1<T> _inner;
    private Func`2<T, V> _mapFunction;
    private int System.Collections.Generic.ICollection<V>.Count { get; }
    private V System.Collections.Generic.IList<V>.Item { get; private set; }
    internal MapList`2(IList`1<T> items, Func`2<T, V> mapFunction);
    private static MapList`2();
    private sealed virtual override int System.Collections.Generic.IList<V>.IndexOf(V item);
    private sealed virtual override int System.Collections.Generic.ICollection<V>.get_Count();
    private sealed virtual override V System.Collections.Generic.IList<V>.get_Item(int index);
    private sealed virtual override void System.Collections.Generic.IList<V>.set_Item(int index, V value);
    private sealed virtual override IEnumerator`1<V> System.Collections.Generic.IEnumerable<V>.GetEnumerator();
    [IteratorStateMachineAttribute("Microsoft.VisualStudio.ExtensionManager.MapList`2/<GetEnumerable>d__11")]
private IEnumerable`1<V> GetEnumerable();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    private V MapValue(T item);
}
[GeneratedCodeAttribute("xsd", "4.6.81.0")]
[DebuggerStepThroughAttribute]
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
public class Microsoft.VisualStudio.ExtensionManager.Metadata : object {
    private MetadataIdentity identityField;
    private string displayNameField;
    private string descriptionField;
    private string moreInfoField;
    private string licenseField;
    private string gettingStartedGuideField;
    private string releaseNotesField;
    private string iconField;
    private string previewImageField;
    private string tagsField;
    private bool previewField;
    private string vsixManifestVersionField;
    private XmlElement[] anyField;
    private bool removeOldPerUserExtension;
    private bool allowClientRole;
    public MetadataIdentity Identity { get; public set; }
    public string DisplayName { get; public set; }
    public string Description { get; public set; }
    public string Version { get; public set; }
    public string MoreInfo { get; public set; }
    public string License { get; public set; }
    public string GettingStartedGuide { get; public set; }
    public string ReleaseNotes { get; public set; }
    public string Icon { get; public set; }
    public string PreviewImage { get; public set; }
    public string Tags { get; public set; }
    public bool Preview { get; public set; }
    public bool RemoveOldPerUserExtension { get; public set; }
    public bool AllowClientRole { get; public set; }
    [XmlAnyElementAttribute]
public XmlElement[] Any { get; public set; }
    public MetadataIdentity get_Identity();
    public void set_Identity(MetadataIdentity value);
    public sealed virtual string get_DisplayName();
    public void set_DisplayName(string value);
    public sealed virtual string get_Description();
    public void set_Description(string value);
    public sealed virtual string get_Version();
    public void set_Version(string value);
    public sealed virtual string get_MoreInfo();
    public void set_MoreInfo(string value);
    public sealed virtual string get_License();
    public void set_License(string value);
    public sealed virtual string get_GettingStartedGuide();
    public void set_GettingStartedGuide(string value);
    public sealed virtual string get_ReleaseNotes();
    public void set_ReleaseNotes(string value);
    public sealed virtual string get_Icon();
    public void set_Icon(string value);
    public sealed virtual string get_PreviewImage();
    public void set_PreviewImage(string value);
    public sealed virtual string get_Tags();
    public void set_Tags(string value);
    public sealed virtual bool get_Preview();
    public void set_Preview(bool value);
    public sealed virtual bool get_RemoveOldPerUserExtension();
    public void set_RemoveOldPerUserExtension(bool value);
    public sealed virtual bool get_AllowClientRole();
    public void set_AllowClientRole(bool value);
    public sealed virtual XmlElement[] get_Any();
    public void set_Any(XmlElement[] value);
}
[GeneratedCodeAttribute("xsd", "4.6.81.0")]
[DebuggerStepThroughAttribute]
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
public class Microsoft.VisualStudio.ExtensionManager.MetadataIdentity : object {
    private string idField;
    private string versionField;
    private string languageField;
    private string publisherField;
    [XmlAttributeAttribute]
public string Id { get; public set; }
    [XmlAttributeAttribute]
public string Version { get; public set; }
    [XmlAttributeAttribute]
public string Language { get; public set; }
    [XmlAttributeAttribute]
public string Publisher { get; public set; }
    public string get_Id();
    public void set_Id(string value);
    public string get_Version();
    public void set_Version(string value);
    public string get_Language();
    public void set_Language(string value);
    public string get_Publisher();
    public void set_Publisher(string value);
}
[GeneratedCodeAttribute("xsd", "4.6.81.0")]
[DebuggerStepThroughAttribute]
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
public class Microsoft.VisualStudio.ExtensionManager.MetadataInfo : object {
    private string displayNameField;
    private string descriptionField;
    private string moreInfoField;
    private string licenseField;
    private string gettingStartedGuideField;
    private string releaseNotesField;
    private string iconField;
    private string previewImageField;
    private string tagsField;
    private bool previewField;
    private XmlElement[] anyField;
    private bool removeOldPerUserExtension;
    private string vsixManifestVersionField;
    private bool allowClientRole;
    public string DisplayName { get; public set; }
    public string Description { get; public set; }
    public string MoreInfo { get; public set; }
    public string License { get; public set; }
    public string GettingStartedGuide { get; public set; }
    public string ReleaseNotes { get; public set; }
    public string Icon { get; public set; }
    public string PreviewImage { get; public set; }
    public string Tags { get; public set; }
    public bool Preview { get; public set; }
    public bool RemoveOldPerUserExtension { get; public set; }
    public string Version { get; public set; }
    public bool AllowClientRole { get; public set; }
    [XmlAnyElementAttribute]
public XmlElement[] Any { get; public set; }
    public sealed virtual string get_DisplayName();
    public void set_DisplayName(string value);
    public sealed virtual string get_Description();
    public void set_Description(string value);
    public sealed virtual string get_MoreInfo();
    public void set_MoreInfo(string value);
    public sealed virtual string get_License();
    public void set_License(string value);
    public sealed virtual string get_GettingStartedGuide();
    public void set_GettingStartedGuide(string value);
    public sealed virtual string get_ReleaseNotes();
    public void set_ReleaseNotes(string value);
    public sealed virtual string get_Icon();
    public void set_Icon(string value);
    public sealed virtual string get_PreviewImage();
    public void set_PreviewImage(string value);
    public sealed virtual string get_Tags();
    public void set_Tags(string value);
    public sealed virtual bool get_Preview();
    public void set_Preview(bool value);
    public sealed virtual bool get_RemoveOldPerUserExtension();
    public void set_RemoveOldPerUserExtension(bool value);
    public sealed virtual string get_Version();
    public void set_Version(string value);
    public sealed virtual bool get_AllowClientRole();
    public void set_AllowClientRole(bool value);
    public sealed virtual XmlElement[] get_Any();
    public void set_Any(XmlElement[] value);
}
[DataContractAttribute]
public class Microsoft.VisualStudio.ExtensionManager.MetadataItem : object {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Count>k__BackingField;
    [DataMemberAttribute]
public string Name { get; public set; }
    [DataMemberAttribute]
public string Count { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public string get_Count();
    [CompilerGeneratedAttribute]
public void set_Count(string value);
}
internal static class Microsoft.VisualStudio.ExtensionManager.NativeMethods : object {
    private static int MAX_PATH;
    private static int ERROR_MORE_DATA;
    private static int ERROR_SUCCESS;
    private static int RmRebootReasonNone;
    private static int CCH_RM_MAX_APP_NAME;
    private static int CCH_RM_MAX_SVC_NAME;
    public static bool IsArm64BitProcess { get; }
    internal static bool CryptVerifyTimeStampSignature(Byte[] pbTSContentInfo, UInt32 cbTSContentInfo, Byte[] pbData, UInt32 cbData, IntPtr hAdditionalStore, IntPtr& ppTsContext, IntPtr& ppTsSigner, IntPtr& phStore);
    internal static void CryptMemFree(IntPtr pv);
    internal static bool CertFreeCertificateContext(IntPtr pCertContext);
    internal static bool CertCloseStore(IntPtr hCertStore, UInt32 dwFlags);
    private static int RmStartSession(UInt32& pSessionHandle, int dwSessionFlags, string strSessionKey);
    private static int RmEndSession(UInt32 pSessionHandle);
    private static int RmRegisterResources(UInt32 pSessionHandle, UInt32 nFiles, String[] rgsFilenames, UInt32 nApplications, RM_UNIQUE_PROCESS[] rgApplications, UInt32 nServices, String[] rgsServiceNames);
    private static int RmGetList(UInt32 dwSessionHandle, UInt32& pnProcInfoNeeded, UInt32& pnProcInfo, RM_PROCESS_INFO[] rgAffectedApps, UInt32& lpdwRebootReasons);
    internal static IEnumerable`1<Process> GetProcessesUsingFiles(IEnumerable`1<string> filePaths);
    private static UInt32 GetModuleFileName(IntPtr hModule, StringBuilder lpFilename, UInt32 nSize);
    internal static string GetExecutableFileName();
    internal static bool IsWow64Process2(IntPtr process, UInt16& processMachine, UInt16& nativeMachine);
    public static bool get_IsArm64BitProcess();
}
internal class Microsoft.VisualStudio.ExtensionManager.NgenManager : object {
    private static string NgenActionType;
    private static string ChipAttribute;
    private static string DefaultExeConfigFile;
    private static NgenManager instance;
    private NgenTool ngenX86;
    private NgenTool ngenX64;
    private string exeConfig;
    private static NgenManager Instance { get; }
    private string ExeConfig { get; }
    public static void Install(IInstalledExtension extension);
    public static void Uninstall(IInstalledExtension extension);
    private static IEnumerable`1<IExtensionInstallerAction> GetNgenActions(IInstalledExtension extension);
    private static bool GetIsArchX86(IExtensionInstallerAction ngenAction, string packageArchitecture);
    private void QueueBinaryForNgen(string assemblyPath, bool isArchX86);
    private void UninstallNgenedImageOfBinary(string assemblyPath, bool isArchX86);
    private NgenTool GetNgenTool(bool isArchX86);
    private static NgenManager get_Instance();
    private string get_ExeConfig();
}
internal class Microsoft.VisualStudio.ExtensionManager.NgenTool : object {
    private string ngenPath;
    public NgenTool(bool isArchX86);
    public int Run(string arguments);
}
internal abstract class Microsoft.VisualStudio.ExtensionManager.PackageInstaller : object {
    [CompilerGeneratedAttribute]
private InstallerData <Data>k__BackingField;
    private static string InstallDirVar;
    private static string ExtensionDirRoot;
    private static string CommonExtensionDirRoot;
    private static String[] ValidOutOfConeRoots;
    private TempDir tempDir;
    protected InstallerData Data { get; private set; }
    public PackageInstaller(InstallerData data);
    private static PackageInstaller();
    [CompilerGeneratedAttribute]
protected InstallerData get_Data();
    [CompilerGeneratedAttribute]
private void set_Data(InstallerData value);
    internal virtual string PrepareLayout(ZipPackage packageContainer);
    internal virtual void Validate(ZipPackage packageContainer, IEngineHost engineHost);
    internal virtual Component LoadComponent(IDependencyGraph dGraph, Boolean& isProductComponent);
    internal virtual bool PrepareEngineInstall(IDependencyGraph dGraph, IDependencyComparisonSeed seed, Component vsixComponent, bool isProductComponent, Int32& totalInstallationSteps);
    internal virtual void ValidateComponent(Component component);
    internal virtual void CloseLayout();
    private IEnumerable`1<IDependencyNode> GetDependentComponentNodes(string packageId, IDependencyGraph dGraph);
    private IEnumerable`1<string> GetAllDependentPackageNames(string packageId, CultureInfo currentCulture, IDependencyGraph dGraph);
    private static bool ProcessDependency(Dictionary`2<string, List`1<IPackage>> packageIndex, List`1<IExtensionReference> missingRefs, DependencyComparer comparer, Dependency depRef);
    private static IPackage MatchDependency(DependencyComparer comparer, Dependency dependency, Dictionary`2<string, List`1<IPackage>> packageIndex);
    private static PartialManifestType ToSetupPartialManifestType(InstallationPartialManifestType partialManifestType);
    internal static void ValidatePackage(VsixPackage vsixPackage, string installDir, bool installPerMachine, string sourceFile);
    private static void ValidateManifestConsistency(VsixPackage catalogPackage, VsixPackage embeddedPackage, InstallableExtensionImpl extension, ILogger logger);
    private static string ResolvePath(string encodedPath, string installDir, string sourceFile);
    private static bool ValidateFolderMappingsConsistency(VsixPackage catalogPackage, VsixPackage embeddedPackage, ILogger logger);
    private static void LogFolderMappingsToError(VsixPackage catalogPackage, VsixPackage embeddedPackage, ILogger logger);
    private static string FolderMappingsToString(IDictionary`2<string, string> folderMappings);
    [CompilerGeneratedAttribute]
private bool <LoadComponent>b__7_3(IDependencyNode x);
    [CompilerGeneratedAttribute]
private bool <LoadComponent>b__7_4(IDependencyNode x);
}
internal class Microsoft.VisualStudio.ExtensionManager.PackageInstallerFactory : object {
    public static PackageInstaller CreatePackageInstaller(InstallerData data);
}
[GeneratedCodeAttribute("xsd", "4.6.81.0")]
[DebuggerStepThroughAttribute]
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
[XmlRootAttribute]
public class Microsoft.VisualStudio.ExtensionManager.PackageLanguagePackManifest : object {
    private MetadataInfo metadataField;
    private Installation installationField;
    private DependencyInfo[] dependenciesField;
    private Asset[] assetsField;
    private Prerequisites prerequisitesField;
    private XmlElement[] anyField;
    private string versionField;
    public MetadataInfo Metadata { get; public set; }
    public Installation Installation { get; public set; }
    [XmlArrayItemAttribute("Dependency")]
public DependencyInfo[] Dependencies { get; public set; }
    [XmlArrayItemAttribute]
public Asset[] Assets { get; public set; }
    public Prerequisites Prerequisites { get; public set; }
    [XmlAnyElementAttribute]
public XmlElement[] Any { get; public set; }
    [XmlAttributeAttribute]
public string Version { get; public set; }
    public IMetadataSchema MetadataSchema { get; }
    public MetadataInfo get_Metadata();
    public void set_Metadata(MetadataInfo value);
    public Installation get_Installation();
    public void set_Installation(Installation value);
    public sealed virtual DependencyInfo[] get_Dependencies();
    public void set_Dependencies(DependencyInfo[] value);
    public sealed virtual Asset[] get_Assets();
    public void set_Assets(Asset[] value);
    public Prerequisites get_Prerequisites();
    public void set_Prerequisites(Prerequisites value);
    public sealed virtual XmlElement[] get_Any();
    public void set_Any(XmlElement[] value);
    public sealed virtual string get_Version();
    public void set_Version(string value);
    public sealed virtual IMetadataSchema get_MetadataSchema();
}
[GeneratedCodeAttribute("xsd", "4.6.81.0")]
[DebuggerStepThroughAttribute]
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
[XmlRootAttribute]
public class Microsoft.VisualStudio.ExtensionManager.PackageManifest : object {
    private Metadata metadataField;
    private Installation installationField;
    private Dependency[] dependenciesField;
    private Asset[] assetsField;
    private Prerequisites prerequisitesField;
    private Installer installerField;
    private XmlElement[] anyField;
    private string versionField;
    public Metadata Metadata { get; public set; }
    public Installation Installation { get; public set; }
    [XmlArrayItemAttribute]
public Dependency[] Dependencies { get; public set; }
    [XmlArrayItemAttribute]
public Asset[] Assets { get; public set; }
    public Prerequisites Prerequisites { get; public set; }
    public Installer Installer { get; public set; }
    [XmlAnyElementAttribute]
public XmlElement[] Any { get; public set; }
    [XmlAttributeAttribute]
public string Version { get; public set; }
    private DependencyInfo[] Microsoft.VisualStudio.ExtensionManager.ILanguagePackManifestSchema.Dependencies { get; }
    public IMetadataSchema MetadataSchema { get; }
    public Metadata get_Metadata();
    public void set_Metadata(Metadata value);
    public sealed virtual Installation get_Installation();
    public void set_Installation(Installation value);
    public sealed virtual Dependency[] get_Dependencies();
    public void set_Dependencies(Dependency[] value);
    public sealed virtual Asset[] get_Assets();
    public void set_Assets(Asset[] value);
    public Prerequisites get_Prerequisites();
    public void set_Prerequisites(Prerequisites value);
    public Installer get_Installer();
    public void set_Installer(Installer value);
    public sealed virtual XmlElement[] get_Any();
    public void set_Any(XmlElement[] value);
    public sealed virtual string get_Version();
    public void set_Version(string value);
    private sealed virtual override DependencyInfo[] Microsoft.VisualStudio.ExtensionManager.ILanguagePackManifestSchema.get_Dependencies();
    public sealed virtual IMetadataSchema get_MetadataSchema();
}
[DataContractAttribute]
public class Microsoft.VisualStudio.ExtensionManager.PackedExtension : object {
    [CompilerGeneratedAttribute]
private string <VsixId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [DataMemberAttribute]
public string VsixId { get; public set; }
    [DataMemberAttribute]
public string Name { get; public set; }
    [CompilerGeneratedAttribute]
public string get_VsixId();
    [CompilerGeneratedAttribute]
public void set_VsixId(string value);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
}
[ExtensionAttribute]
internal static class Microsoft.VisualStudio.ExtensionManager.PolyfillExtensions : object {
    [ExtensionAttribute]
internal static void Append(StringBuilder builder, ReadOnlySpan`1<char> span);
}
[GeneratedCodeAttribute("xsd", "4.6.81.0")]
[DebuggerStepThroughAttribute]
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
public class Microsoft.VisualStudio.ExtensionManager.Prerequisites : object {
    private Dependency[] prerequisiteField;
    private XmlAttribute[] anyAttrField;
    [XmlElementAttribute("Prerequisite")]
public Dependency[] Prerequisite { get; public set; }
    [XmlAnyAttributeAttribute]
public XmlAttribute[] AnyAttr { get; public set; }
    public Dependency[] get_Prerequisite();
    public void set_Prerequisite(Dependency[] value);
    public XmlAttribute[] get_AnyAttr();
    public void set_AnyAttr(XmlAttribute[] value);
}
[DataContractAttribute]
public class Microsoft.VisualStudio.ExtensionManager.Property : object {
    [CompilerGeneratedAttribute]
private string <Key>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Value>k__BackingField;
    [DataMemberAttribute]
public string Key { get; public set; }
    [DataMemberAttribute]
public string Value { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Key();
    [CompilerGeneratedAttribute]
public void set_Key(string value);
    [CompilerGeneratedAttribute]
public string get_Value();
    [CompilerGeneratedAttribute]
public void set_Value(string value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.VisualStudio.ExtensionManager.ReferencedApiScanner : object {
    private static FrozenSet`1<string> FrameworkAssemblies;
    [CompilerGeneratedAttribute]
private FrozenSet`1<string> <ReferenceAssemblies>k__BackingField;
    internal FrozenSet`1<string> ReferenceAssemblies { get; internal set; }
    private static ReferencedApiScanner();
    [CompilerGeneratedAttribute]
internal FrozenSet`1<string> get_ReferenceAssemblies();
    [CompilerGeneratedAttribute]
internal Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_ReferenceAssemblies(FrozenSet`1<string> value);
    internal ExtensionsApiUsage ScanExtensions(IEnumerable`1<ValueTuple`2<ExtensionMoniker, string>> extensionPathsById, CancellationToken cancellationToken);
    internal ExtensionApiUsage ScanExtension(ExtensionMoniker moniker, string extensionPath, CancellationToken cancellationToken);
    internal AssemblyApiUsage ScanAssembly(string assemblyPath, CancellationToken cancellationToken);
    private ImmutableArray`1<string> ScanFile(MetadataReader reader, CancellationToken cancellationToken);
}
[GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "4.0.0.0")]
[DebuggerNonUserCodeAttribute]
[CompilerGeneratedAttribute]
internal class Microsoft.VisualStudio.ExtensionManager.Resources_Resources_Designer_cs : object {
    private static ResourceManager resourceMan;
    private static CultureInfo resourceCulture;
    [EditorBrowsableAttribute("2")]
internal static ResourceManager ResourceManager { get; }
    [EditorBrowsableAttribute("2")]
internal static CultureInfo Culture { get; internal set; }
    internal static string ErrorAlreadyInstalled { get; }
    internal static string ErrorBadAllUserExtension { get; }
    internal static string ErrorBreaksExistingExtensions { get; }
    internal static string ErrorCannotDisablePackComponent { get; }
    internal static string ErrorCannotEnableDependency { get; }
    internal static string ErrorCertCheckFailed { get; }
    internal static string ErrorCertFileNotFound { get; }
    internal static string ErrorCertificateFieldsNotFound { get; }
    internal static string ErrorDirectoryInUse { get; }
    internal static string ErrorExtensionAndPlatformSigned { get; }
    internal static string ErrorFilesInUse { get; }
    internal static string ErrorFilesInUseAdditional { get; }
    internal static string ErrorInstallByMSI { get; }
    internal static string ErrorInstallExtensionSDKDirectoryExists { get; }
    internal static string ErrorInstallRequiresElevation { get; }
    internal static string ErrorInvalidAttributeValue { get; }
    internal static string ErrorInvalidAttributeValueLength { get; }
    internal static string ErrorInvalidCount { get; }
    internal static string ErrorInvalidElementValue { get; }
    internal static string ErrorInvalidElementValueLength { get; }
    internal static string ErrorInvalidLanguagePackManifestRootElement { get; }
    internal static string ErrorInvalidManifest { get; }
    internal static string ErrorInvalidManifestFileExtension { get; }
    internal static string ErrorInvalidManifestRootElement { get; }
    internal static string ErrorInvalidMinimumCount { get; }
    internal static string ErrorInvalidVSIX { get; }
    internal static string ErrorMissingEula { get; }
    internal static string ErrorMissingManifest { get; }
    internal static string ErrorMissingNameOrAuthor { get; }
    internal static string ErrorMissingReferences { get; }
    internal static string ErrorMissingRequiredAttribute { get; }
    internal static string ErrorMissingRequiredElement { get; }
    internal static string ErrorMissingTargetFramework { get; }
    internal static string ErrorNestedExtensionFailed { get; }
    internal static string ErrorNestedExtensionInitialization { get; }
    internal static string ErrorNestedExtensionReferenceIdMismatch { get; }
    internal static string ErrorNotValidSignedAllUserExtension { get; }
    internal static string ErrorReferenceConstraint { get; }
    internal static string ErrorUninstallDependencyException { get; }
    internal static string ErrorUninstallMSIExtension { get; }
    internal static string ErrorUninstallOrphanedComponentRequiresElevation { get; }
    internal static string ErrorUninstallRequiresElevation { get; }
    internal static string ErrorUnsupportedProduct { get; }
    internal static string InvalidReleaseNotesText { get; }
    internal static string ReleaseNotesDialogTitle { get; }
    internal static string TaskCreatedSuccessfully { get; }
    internal static string TaskDoesNotExist { get; }
    internal static string TaskExists { get; }
    internal static string TaskNotRegistered { get; }
    internal static string TaskServiceNotConnected { get; }
    internal static Byte[] VSIXLanguagePackSchema { get; }
    internal static Byte[] VSIXManifestSchema { get; }
    internal static ResourceManager get_ResourceManager();
    internal static CultureInfo get_Culture();
    internal static void set_Culture(CultureInfo value);
    internal static string get_ErrorAlreadyInstalled();
    internal static string get_ErrorBadAllUserExtension();
    internal static string get_ErrorBreaksExistingExtensions();
    internal static string get_ErrorCannotDisablePackComponent();
    internal static string get_ErrorCannotEnableDependency();
    internal static string get_ErrorCertCheckFailed();
    internal static string get_ErrorCertFileNotFound();
    internal static string get_ErrorCertificateFieldsNotFound();
    internal static string get_ErrorDirectoryInUse();
    internal static string get_ErrorExtensionAndPlatformSigned();
    internal static string get_ErrorFilesInUse();
    internal static string get_ErrorFilesInUseAdditional();
    internal static string get_ErrorInstallByMSI();
    internal static string get_ErrorInstallExtensionSDKDirectoryExists();
    internal static string get_ErrorInstallRequiresElevation();
    internal static string get_ErrorInvalidAttributeValue();
    internal static string get_ErrorInvalidAttributeValueLength();
    internal static string get_ErrorInvalidCount();
    internal static string get_ErrorInvalidElementValue();
    internal static string get_ErrorInvalidElementValueLength();
    internal static string get_ErrorInvalidLanguagePackManifestRootElement();
    internal static string get_ErrorInvalidManifest();
    internal static string get_ErrorInvalidManifestFileExtension();
    internal static string get_ErrorInvalidManifestRootElement();
    internal static string get_ErrorInvalidMinimumCount();
    internal static string get_ErrorInvalidVSIX();
    internal static string get_ErrorMissingEula();
    internal static string get_ErrorMissingManifest();
    internal static string get_ErrorMissingNameOrAuthor();
    internal static string get_ErrorMissingReferences();
    internal static string get_ErrorMissingRequiredAttribute();
    internal static string get_ErrorMissingRequiredElement();
    internal static string get_ErrorMissingTargetFramework();
    internal static string get_ErrorNestedExtensionFailed();
    internal static string get_ErrorNestedExtensionInitialization();
    internal static string get_ErrorNestedExtensionReferenceIdMismatch();
    internal static string get_ErrorNotValidSignedAllUserExtension();
    internal static string get_ErrorReferenceConstraint();
    internal static string get_ErrorUninstallDependencyException();
    internal static string get_ErrorUninstallMSIExtension();
    internal static string get_ErrorUninstallOrphanedComponentRequiresElevation();
    internal static string get_ErrorUninstallRequiresElevation();
    internal static string get_ErrorUnsupportedProduct();
    internal static string get_InvalidReleaseNotesText();
    internal static string get_ReleaseNotesDialogTitle();
    internal static string get_TaskCreatedSuccessfully();
    internal static string get_TaskDoesNotExist();
    internal static string get_TaskExists();
    internal static string get_TaskNotRegistered();
    internal static string get_TaskServiceNotConnected();
    internal static Byte[] get_VSIXLanguagePackSchema();
    internal static Byte[] get_VSIXManifestSchema();
}
[DataContractAttribute]
public class Microsoft.VisualStudio.ExtensionManager.Result : object {
    [CompilerGeneratedAttribute]
private IList`1<Extension> <Extensions>k__BackingField;
    [CompilerGeneratedAttribute]
private string <PagingToken>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<ResultMetadata> <ResultMetadata>k__BackingField;
    [DataMemberAttribute]
public IList`1<Extension> Extensions { get; public set; }
    [DataMemberAttribute]
public string PagingToken { get; public set; }
    [DataMemberAttribute]
public IList`1<ResultMetadata> ResultMetadata { get; public set; }
    [CompilerGeneratedAttribute]
public IList`1<Extension> get_Extensions();
    [CompilerGeneratedAttribute]
public void set_Extensions(IList`1<Extension> value);
    [CompilerGeneratedAttribute]
public string get_PagingToken();
    [CompilerGeneratedAttribute]
public void set_PagingToken(string value);
    [CompilerGeneratedAttribute]
public IList`1<ResultMetadata> get_ResultMetadata();
    [CompilerGeneratedAttribute]
public void set_ResultMetadata(IList`1<ResultMetadata> value);
}
[DataContractAttribute]
public class Microsoft.VisualStudio.ExtensionManager.ResultMetadata : object {
    [CompilerGeneratedAttribute]
private string <MetadataType>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<MetadataItem> <MetadataItems>k__BackingField;
    [DataMemberAttribute]
public string MetadataType { get; public set; }
    [DataMemberAttribute]
public IList`1<MetadataItem> MetadataItems { get; public set; }
    [CompilerGeneratedAttribute]
public string get_MetadataType();
    [CompilerGeneratedAttribute]
public void set_MetadataType(string value);
    [CompilerGeneratedAttribute]
public IList`1<MetadataItem> get_MetadataItems();
    [CompilerGeneratedAttribute]
public void set_MetadataItems(IList`1<MetadataItem> value);
}
public class Microsoft.VisualStudio.ExtensionManager.ScanModule : object {
    private static string AssetScanDepthSetting;
    private static int DefaultExtensionManifestScanDepth;
    internal static int DefaultSDKExtensionManifestScanDepth;
    private Lazy`1<HashSet`1<string>> ExtensionManifestExcludedDirectories;
    [CompilerGeneratedAttribute]
private IEngineHost <EngineHost>k__BackingField;
    [CompilerGeneratedAttribute]
private ExtensionEngineImpl <ExtensionEngine>k__BackingField;
    [CompilerGeneratedAttribute]
private InstalledExtensionLocationManager <LocationManager>k__BackingField;
    public IEngineHost EngineHost { get; }
    public ExtensionEngineImpl ExtensionEngine { get; }
    internal InstalledExtensionLocationManager LocationManager { get; }
    public ScanModule(IEngineHost engineHost, IExtensionEngine engine);
    [CompilerGeneratedAttribute]
public IEngineHost get_EngineHost();
    [CompilerGeneratedAttribute]
public ExtensionEngineImpl get_ExtensionEngine();
    [CompilerGeneratedAttribute]
internal InstalledExtensionLocationManager get_LocationManager();
    [AsyncStateMachineAttribute("Microsoft.VisualStudio.ExtensionManager.ScanModule/<LoadAndEnableExtensionsAsync>d__14")]
public Task`1<IEnumerable`1<IInstalledExtension>> LoadAndEnableExtensionsAsync(ScanResult scanResult);
    private IInstalledExtension LoadExtension(ExtensionLocations location, string fullPath);
    [AsyncStateMachineAttribute("Microsoft.VisualStudio.ExtensionManager.ScanModule/<ScanInstalledExtensionsAsync>d__16")]
public Task`1<ScanResult> ScanInstalledExtensionsAsync(bool safeMode, bool isSdkList, ITelemetryLogger telemetryLogger, object telemetryObject);
    public bool ShouldEnableOnScan(string path, ExtensionLocations location);
    private static void HandleLoadExtensionFailure(string fullPath, IOException ex);
    private static bool IsPerMachineExtension(ExtensionLocations location);
    [AsyncStateMachineAttribute("Microsoft.VisualStudio.ExtensionManager.ScanModule/<FindExtensionManifests>d__20")]
private Task`1<IEnumerable`1<string>> FindExtensionManifests(DirectoryInfo rootDirectory, int depthOverride);
    private static bool ShouldRecurseDirectory(FileSystemEntry& entry, HashSet`1<string> extensionManifestExcludedDirectories);
    private static bool FileNameMatchesManifestName(FileSystemEntry& entry);
    private IInstalledExtension LoadAndEnableExtensionIfNeeded(ExtensionLocations location, string fullPath, string normalizedPath);
    private InstalledExtensionImpl LoadExtensionFromPathOrThrow(ExtensionLocations location, string fullPath, string normalizedPath);
    [AsyncStateMachineAttribute("Microsoft.VisualStudio.ExtensionManager.ScanModule/<ScanAllSdkExtensionLocationsAsync>d__25")]
private Task`1<ScanResult> ScanAllSdkExtensionLocationsAsync(bool safeMode, ITelemetryLogger telemetryLogger, object telemetryObject);
    [AsyncStateMachineAttribute("Microsoft.VisualStudio.ExtensionManager.ScanModule/<ScanInstalledExtensionsInLocationAsync>d__26")]
private Task`1<ScanResult> ScanInstalledExtensionsInLocationAsync(ExtensionLocations location, bool safeMode);
    [AsyncStateMachineAttribute("Microsoft.VisualStudio.ExtensionManager.ScanModule/<ScanExtensionsAsync>d__27")]
private Task`1<ScanResult> ScanExtensionsAsync(ExtensionLocations location, DirectoryInfo directory, bool isSdkLocation, int depthOverride);
    [AsyncStateMachineAttribute("Microsoft.VisualStudio.ExtensionManager.ScanModule/<ScanPathForLocationAsync>d__28")]
private Task`1<ScanResult> ScanPathForLocationAsync(ExtensionLocations location, string path);
    private Task`1<ScanResult> ScanSdkExtensionsAsync(ExtensionLocations location, DirectoryInfo directory);
    private Task`1<ScanResult> ScanNonSdkExtensionsAsync(ExtensionLocations location, DirectoryInfo directory);
    [AsyncStateMachineAttribute("Microsoft.VisualStudio.ExtensionManager.ScanModule/<ScanPerMachineAndPerUserExtensionLocationsAsync>d__31")]
private Task`1<ScanResult> ScanPerMachineAndPerUserExtensionLocationsAsync(bool safeMode, ITelemetryLogger telemetryLogger, object telemetryObject);
    private HashSet`1<string> InitializeDirectoryNamesToSkip();
    private static void AddTemplateLocationsToFilter(HashSet`1<string> namesHashSet);
    private static void AddBinaryLocationsToFilter(HashSet`1<string> namesHashSet);
    private static void AddCultureNamesToFilter(HashSet`1<string> namesHashSet);
    private bool TryLoadExtension(ExtensionLocations location, string fullPath, string normalizedPath, InstalledExtensionImpl& installedExtension, int retryCount, int retryDelay, int attempts);
    private InstalledExtensionImpl TryLoadExtensionFromDisk(ExtensionLocations location, string fullPath, string normalizedPath);
    private InstalledExtensionImpl TryLoadExtensionWithRetries(ExtensionLocations location, string fullPath, string normalizedPath, int retryCount, int retryDelay);
}
public class Microsoft.VisualStudio.ExtensionManager.ScheduledExtension : object {
    [CompilerGeneratedAttribute]
private bool <IsSDK>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Identifier>k__BackingField;
    [CompilerGeneratedAttribute]
private ExtensionStatusChangeType <ExtensionStatusChangeType>k__BackingField;
    [CompilerGeneratedAttribute]
private int <VsixHash>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DownloadPath>k__BackingField;
    public bool IsSDK { get; }
    public string Name { get; }
    public string Identifier { get; }
    public ExtensionStatusChangeType ExtensionStatusChangeType { get; }
    public int VsixHash { get; }
    public string DownloadPath { get; }
    public string UnscheduleButtonAutomationPropertyHelp { get; }
    public string UnscheduleButtonAutomationPropertyName { get; }
    public ScheduledExtension(string name, string identifier, string downloadPath, bool isSDK, ExtensionStatusChangeType extensionStatusChangeType, int vsixHash);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_IsSDK();
    [CompilerGeneratedAttribute]
public sealed virtual string get_Name();
    [CompilerGeneratedAttribute]
public sealed virtual string get_Identifier();
    [CompilerGeneratedAttribute]
public sealed virtual ExtensionStatusChangeType get_ExtensionStatusChangeType();
    [CompilerGeneratedAttribute]
public sealed virtual int get_VsixHash();
    [CompilerGeneratedAttribute]
public sealed virtual string get_DownloadPath();
    public sealed virtual string get_UnscheduleButtonAutomationPropertyHelp();
    public sealed virtual string get_UnscheduleButtonAutomationPropertyName();
}
[DataContractAttribute]
public class Microsoft.VisualStudio.ExtensionManager.SearchQuery : object {
    private static string defaultFlags;
    private static string autoUpdateFlags;
    [CompilerGeneratedAttribute]
private string <Flags>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<Criteria> <Filters>k__BackingField;
    [DataMemberAttribute]
public string Flags { get; public set; }
    [DataMemberAttribute]
public IList`1<Criteria> Filters { get; public set; }
    public SearchQuery(IList`1<Filter> filters, bool forAutoupdate);
    public SearchQuery(IList`1<Filter> filters, string sortBy, string sortOrder, string pageSize, string pageNumber);
    [CompilerGeneratedAttribute]
public string get_Flags();
    [CompilerGeneratedAttribute]
public void set_Flags(string value);
    [CompilerGeneratedAttribute]
public IList`1<Criteria> get_Filters();
    [CompilerGeneratedAttribute]
public void set_Filters(IList`1<Criteria> value);
}
[ExtensionAttribute]
public static class Microsoft.VisualStudio.ExtensionManager.SettingsStorage.SettingsStoreExtensions : object {
    [ExtensionAttribute]
public static void SetStringWithDefaultValue(IWritableSettingsStore store, string collectionPath, string propertyName, string value, string defaultValue);
    [ExtensionAttribute]
public static void SetString(IWritableSettingsStore store, string collectionPath, string propertyName, string value, object syncRoot);
    [ExtensionAttribute]
public static void SetInt64(IWritableSettingsStore store, string collectionPath, string propertyName, long value, object syncRoot);
    [ExtensionAttribute]
public static long GetInt64(ISettingsStore store, string collectionPath, string propertyName, object syncRoot, long defaultValue);
    [ExtensionAttribute]
public static string GetString(ISettingsStore store, string collectionPath, string propertyName, object syncRoot, string defaultValue);
    [ExtensionAttribute]
public static string GetStringDefaultEmpty(ISettingsStore store, string collectionPath, string propertyName);
    [ExtensionAttribute]
public static void SetBoolean(IWritableSettingsStore store, string collectionPath, string propertyName, bool value, object syncRoot);
    [ExtensionAttribute]
public static bool GetBoolean(ISettingsStore store, string collectionPath, string propertyName, object syncRoot, bool defaultValue);
    [ExtensionAttribute]
public static IDictionary`2<string, object> GetPropertyNamesAndValues(ISettingsStore store, string collectionPath, SettingsType settingsType, object syncRoot);
    [ExtensionAttribute]
public static IEnumerable`1<string> GetPropertyNames(ISettingsStore store, string collectionPath, object syncRoot);
    [ExtensionAttribute]
public static bool CollectionExists(ISettingsStore store, string collectionPath, object syncRoot);
    [ExtensionAttribute]
public static void CreateCollection(IWritableSettingsStore store, string collectionPath, object syncRoot);
    [ExtensionAttribute]
public static void DeleteCollection(IWritableSettingsStore store, string collectionPath, object syncRoot);
    [ExtensionAttribute]
public static void DeleteProperty(IWritableSettingsStore store, string collectionPath, string propertyName, object syncRoot);
    [ExtensionAttribute]
public static void SetUint32AndCreateCollectionIfNeeded(IWritableSettingsStore store, string collectionPath, string propertyName, UInt32 value);
    [ExtensionAttribute]
public static void EnsureCollectionExists(IWritableSettingsStore store, string collectionPath);
}
internal class Microsoft.VisualStudio.ExtensionManager.SetupEngineService : object {
    private Product product;
    [CompilerGeneratedAttribute]
private string <InstallPath>k__BackingField;
    [CompilerGeneratedAttribute]
private IInstance <Instance>k__BackingField;
    [CompilerGeneratedAttribute]
private Engine <Engine>k__BackingField;
    public string InstallPath { get; private set; }
    public IInstance Instance { get; private set; }
    public Engine Engine { get; private set; }
    public IDependencyGraph GetProductDependencyGraph { get; }
    public sealed virtual Engine CreateEngine(IEngineHost engineHost, IServiceProvider serviceProvider, InstallFlags installFlags);
    [CompilerGeneratedAttribute]
public sealed virtual string get_InstallPath();
    [CompilerGeneratedAttribute]
private void set_InstallPath(string value);
    [CompilerGeneratedAttribute]
public sealed virtual IInstance get_Instance();
    [CompilerGeneratedAttribute]
private void set_Instance(IInstance value);
    [CompilerGeneratedAttribute]
public sealed virtual Engine get_Engine();
    [CompilerGeneratedAttribute]
private void set_Engine(Engine value);
    public sealed virtual void Install();
    public sealed virtual void LoadPartialJson(string catalogJson);
    public sealed virtual IDependencyGraph get_GetProductDependencyGraph();
    [CompilerGeneratedAttribute]
private IInstance <Install>b__14_0();
}
internal static class Microsoft.VisualStudio.ExtensionManager.SetupEngineUtility : object {
    internal static ISetupInstance2 GetCurrentSetupInstance(IEngineHost engineHost);
    internal static IInstance GetInstanceForSetupInstance(ISetupInstance2 currentSetupInstance, IServiceProvider setupServiceProvider);
    internal static void ApplyRequestedPackageState(IEnumerable`1<ISelectablePackageReference> selectedPackages, IDependencyGraph productGraph);
}
[DataContractAttribute]
public class Microsoft.VisualStudio.ExtensionManager.Shared.AutoUpdateMachineSettings : object {
    private static string MachineSettingsReadFailedEventName;
    private static string MachineSettingsWriteFailedEventName;
    private static string MachineSettingsFindFailedEventName;
    private static string StateFile_RelativePath;
    private static object MachineSettingsFileLock;
    [DataMemberAttribute]
public bool ShouldCheckForUpdates;
    [DataMemberAttribute]
public Dictionary`2<string, AutoUpdateExtensionSettings> Extensions;
    [DataMemberAttribute]
public bool ShouldAutoUpdate;
    private static string StateFile_FullPath { get; }
    public static AutoUpdateMachineSettings Current { get; public set; }
    private static AutoUpdateMachineSettings();
    private static string get_StateFile_FullPath();
    public static AutoUpdateMachineSettings get_Current();
    public static void set_Current(AutoUpdateMachineSettings value);
    private bool TryWriteToFile(string filePath);
    private static bool TryReadFromFile(string filePath, bool deleteOnFailure, AutoUpdateMachineSettings& settings);
}
public class Microsoft.VisualStudio.ExtensionManager.Shared.AutoUpdateManager : object {
    private ISettingsManager settingsManager;
    private bool isAutoUpdateFeatureEnabled;
    public bool IsAutoUpdateFeatureEnabled { get; }
    public AutoUpdateManager(ISettingsManager settingsManager, bool isAutoUpdateFeatureEnabled);
    public sealed virtual bool get_IsAutoUpdateFeatureEnabled();
    public sealed virtual void RemovePerMachineExtensionAutoUpdateState(string extensionIdentifier);
    public sealed virtual void RemoveAutoUpdateState(INotifyUpdateInstallCompleted extension);
    public sealed virtual bool TrySetAutoUpdateState(IInstalledExtension extension, AutoUpdateState autoUpdateState);
}
internal class Microsoft.VisualStudio.ExtensionManager.SharepointOnlineExtension : BaseOnlineExtensionWithPropertyChange {
}
public class Microsoft.VisualStudio.ExtensionManager.SharepointRepository : BaseExtensionRepository {
    private static XNamespace rowsetNS;
    private string listId;
    private string listWebFullUrl;
    private string listName;
    private Uri webUri;
    private string ListId { get; }
    private string ListWebFullUrl { get; }
    public string ListName { get; }
    private Uri WebUri { get; }
    public SharepointRepository(IExtensionRepositoryConfig serverConfig);
    private static SharepointRepository();
    public virtual IList`1<IOnlineExtension> ExecuteQuery(bool recursive, string folderPath);
    private XElement BuildSearchTermsQuery(IEnumerable`1<XElement> containsElements);
    private IList`1<IOnlineExtension> ExecuteQuery(bool recursive, string folderPath, IList`1<QueryClause> searchClauses);
    public IList`1<string> GetFolders();
    private XElement CallListItemsWebService(string viewName, XElement query, XElement viewFields, string rowLimit, XElement queryOptions, string webID);
    private string get_ListId();
    private string get_ListWebFullUrl();
    private void GetListInfo();
    public string get_ListName();
    private ListsSoapClient CreateListClient();
    private static Binding CreateBasicHttpBinding();
    private Uri get_WebUri();
    protected virtual IEnumerable`1<IOnlineExtension> SearchImpl(string searchTerms);
    protected virtual IEnumerable`1<IOnlineExtensionUpdate> GetUpdatesImpl(IEnumerable`1<IInstalledExtension> extensionsToCheck, bool forAutoupdate);
    protected virtual Task`1<IEnumerable`1<IOnlineExtensionUpdate>> GetUpdatesImplAsync(IEnumerable`1<IInstalledExtension> extensionsToCheck, bool forAutoupdate);
    public virtual IEnumerable`1<T> GetExtensions(List`1<string> extensionIds, int lcid, bool forAutoupdate);
    [CompilerGeneratedAttribute]
private SharepointOnlineExtension <ExecuteQuery>b__5_0(XElement x);
    [CompilerGeneratedAttribute]
private string <GetFolders>b__6_1(XElement x);
}
[ExportAttribute("Microsoft.VisualStudio.ExtensionManager.IExtensionRepositoryFactory")]
[ExportMetadataAttribute("RepositoryProtocol", "Mono.Cecil.CustomAttributeArgument")]
public class Microsoft.VisualStudio.ExtensionManager.SharepointRepositoryFactory : object {
    public sealed virtual IExtensionRepository CreateRepository(IExtensionRepositoryConfig serverConfig, Func`3<string, Func`1<Task>, Task> proxyResolver);
    public sealed virtual IExtensionRepository CreateRepository(IExtensionRepositoryConfig serverConfig);
    public sealed virtual bool IsProtocolMatch(WebResponse response, Stream responseStream);
}
internal static class Microsoft.VisualStudio.ExtensionManager.ShortcutManager : object {
    internal static int LINK_IS_DIRECTORY;
    private static string LogFilePath;
    private static ShortcutManager();
    private static bool CreateSymbolicLink(string lpSymlinkFileName, string lpTargetFileName, UInt32 dwFlags);
    private static bool ShortcutsEnabledForExtension(IExtension extension);
    private static string GetLinkNameForExtension(IExtension extension, string installRoot);
    private static void EnsureDirectory(string directoryName);
    private static bool ShortcutPointsToDeletedExtension(IExtension extension, string installRoot);
    private static void Log(string logMessage);
    internal static bool TryCreateSymbolicLink(IInstalledExtension extension, string installRoot);
    internal static void RemoveSymbolicLinkIfPresent(IInstalledExtension extension, string installRoot, bool checkDeleteMe);
}
public class Microsoft.VisualStudio.ExtensionManager.StateManagerModule : object {
    public HashSet`1<string> excludeFromEnabling;
    [CompilerGeneratedAttribute]
private IEngineHost <EngineHost>k__BackingField;
    [CompilerGeneratedAttribute]
private ExtensionEngineImpl <ExtensionEngine>k__BackingField;
    public IEngineHost EngineHost { get; }
    public ExtensionEngineImpl ExtensionEngine { get; }
    public StateManagerModule(IEngineHost engineHost, IExtensionEngine engine);
    [CompilerGeneratedAttribute]
public IEngineHost get_EngineHost();
    [CompilerGeneratedAttribute]
public ExtensionEngineImpl get_ExtensionEngine();
    public RestartReason Disable(IInstalledExtension extension, IInstalledExtensionSettingsList listOverride);
    public RestartReason DisableChildComponents(IInstalledExtension parentExtension, IEnumerable`1<IInstalledExtension> extensionsToEnable, IInstalledExtensionSettingsList listOverride);
    public RestartReason DisableInternal(IInstalledExtension extension, bool recursive, bool isPermanentDisabled, IInstalledExtensionSettingsList listOverride);
    public RestartReason Enable(IInstalledExtension extension, IInstalledExtensionSettingsList listOverride);
    public RestartReason EnableInternal(IInstalledExtension extension, bool isInstalling, bool recursive, IInstalledExtensionSettingsList listOverride);
    public void InitializeDisableExtensions(IInstalledExtensionSettingsList installedExtensions);
    public void InitializeEnabledUserExtensions(IEnumerable`1<string> enabledExtensions, IInstalledExtensionSettingsList installedExtensions);
    public RestartReason PermanentDisable(IInstalledExtension extension, IInstalledExtensionSettingsList listOverride);
    public void UpdateLastConfigurationChange(IInstalledExtension extension, Nullable`1<DateTime> lastUpdate);
    public void UpdateLastConfigurationChangeFromCacheTime(IInstalledExtension extension, IInstalledExtensionSettingsList listOverride);
    internal void DisableAllButGivenListForRestrictedMode(IEnumerable`1<string> restrictedModeEnabledExtensionIdList, IInstalledExtensionSettingsList installedExtensions);
    internal void DisableAllUserExtensions(IInstalledExtensionSettingsList installedExtensions);
    internal void InitializeEnabledMachineExtensions(IInstalledExtensionSettingsList installedExtensions);
    internal void MovePendingStatesToFinalStates(IInstalledExtensionSettingsList installedExtensions);
    private static bool FilterDisabled(IInstalledExtension extension);
    private static bool FilterEnabled(IInstalledExtension extension);
    private static bool ShouldMarkAsPendingEnable(IInstalledExtension extension, bool isInstalling, bool enablingRequiresRestart);
    private void DisableUserExtensionsInMemoryIfNotInList(IEnumerable`1<string> enableOnly, IEnumerable`1<IInstalledExtension> userExtensions, IInstalledExtensionSettingsList installedExtensions);
    private RestartReason EnableChildComponents(IInstalledExtension parentExtension, IInstalledExtensionSettingsList listOverride);
}
[DataContractAttribute]
public class Microsoft.VisualStudio.ExtensionManager.Statistic : object {
    [CompilerGeneratedAttribute]
private string <StatisticName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Value>k__BackingField;
    [DataMemberAttribute]
public string StatisticName { get; public set; }
    [DataMemberAttribute]
public string Value { get; public set; }
    [CompilerGeneratedAttribute]
public string get_StatisticName();
    [CompilerGeneratedAttribute]
public void set_StatisticName(string value);
    [CompilerGeneratedAttribute]
public string get_Value();
    [CompilerGeneratedAttribute]
public void set_Value(string value);
}
[DebuggerDisplayAttribute("{FolderPath,nq}")]
public class Microsoft.VisualStudio.ExtensionManager.TempDir : object {
    [CompilerGeneratedAttribute]
private string <FolderPath>k__BackingField;
    protected string FolderPath { get; protected set; }
    [CompilerGeneratedAttribute]
protected string get_FolderPath();
    [CompilerGeneratedAttribute]
protected void set_FolderPath(string value);
    public string GetFile(string relativePath);
    public sealed virtual void Dispose();
}
public class Microsoft.VisualStudio.ExtensionManager.UninstallModule : object {
    public static string PendingDirectoryDeletionPattern;
    public static string ScanExtensionSDKsAtStartupRegistryKey;
    private EnumerationOptions EnumerationOptions;
    private IEnumerable`1<string> perMachineExtensionsRoots;
    [CompilerGeneratedAttribute]
private IEngineHost <EngineHost>k__BackingField;
    [CompilerGeneratedAttribute]
private ExtensionEngineImpl <ExtensionEngine>k__BackingField;
    [CompilerGeneratedAttribute]
private int <UninstalledRestartRequiredExtensionsCount>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ApplicationExtensionsRoot>k__BackingField;
    [CompilerGeneratedAttribute]
private Lazy`1<ExtensionSettingsStoreList> <PendingDeletionsLazy>k__BackingField;
    [CompilerGeneratedAttribute]
private string <CurrentUserExtensionsRoot>k__BackingField;
    public ExtensionSettingsStoreList PendingDeletionsList { get; }
    public IEngineHost EngineHost { get; }
    public ExtensionEngineImpl ExtensionEngine { get; }
    public int UninstalledRestartRequiredExtensionsCount { get; private set; }
    private string ApplicationExtensionsRoot { get; }
    private Lazy`1<ExtensionSettingsStoreList> PendingDeletionsLazy { get; }
    private string CurrentUserExtensionsRoot { get; }
    public UninstallModule(IEngineHost engineHost, IExtensionEngine engine);
    public ExtensionSettingsStoreList get_PendingDeletionsList();
    [CompilerGeneratedAttribute]
public IEngineHost get_EngineHost();
    [CompilerGeneratedAttribute]
public ExtensionEngineImpl get_ExtensionEngine();
    [CompilerGeneratedAttribute]
public int get_UninstalledRestartRequiredExtensionsCount();
    [CompilerGeneratedAttribute]
private void set_UninstalledRestartRequiredExtensionsCount(int value);
    [CompilerGeneratedAttribute]
private string get_ApplicationExtensionsRoot();
    [CompilerGeneratedAttribute]
private Lazy`1<ExtensionSettingsStoreList> get_PendingDeletionsLazy();
    [CompilerGeneratedAttribute]
private string get_CurrentUserExtensionsRoot();
    public static bool MustBeUninstalledThroughInstaller(IDependencyNode initialNode);
    public bool CommitExternalUninstall(IInstalledExtension extension);
    [AsyncStateMachineAttribute("Microsoft.VisualStudio.ExtensionManager.UninstallModule/<DeletePendingUninstallsAsync>d__29")]
public Task DeletePendingUninstallsAsync();
    public void MarkInstallPathForDeletion(IInstalledExtension extension, bool checkForNewPath);
    public void MarkPendingUninstalls(IEnumerable`1<ExtensionSettingsStoreListEntry> entries);
    public void PerformSetupEngineUnInstall(IInstalledExtension extension, InstallFlags installFlags, String& downgradePackageInstallPath, bool downgrade);
    public void RemoveOrphanedComponents(IInstalledExtension parentExtension);
    public void RestoreDeletableInstallPath(IInstalledExtension extension);
    public void RevertUninstall(IInstalledExtension extension);
    public void Uninstall(IInstalledExtension extension, InstallFlags installFlags, Version targetedVSVersion, bool forceDelete);
    public void UninstallInternal(IInstalledExtension extension, bool forceDelete, Version targetedVSVersion, InstallFlags installFlags, bool downgrade);
    public IEnumerable`1<IInstalledExtension> UninstallOrphanedComponents(IInstalledExtension parentExtension, InstallFlags installFlags, bool forceDelete);
    private void AtomicallyDeleteFiles(IEnumerable`1<string> filePaths, bool justMarkForDeletion);
    private bool CanDeletePendingUninstalls();
    private bool CanMarkPendingUninstalls();
    private void CleanupExtensionParentDirectories(string extensionInstallPath);
    private bool Delete(string path);
    private bool DeleteAllFilesInDirectory(string directory);
    private void DeleteDiscoverableFiles(IInstalledExtension extension);
    private void DeletePendingExtensionSdks(bool isStartup);
    private void DeletePendingUninstalls(IEnumerable`1<ExtensionSettingsStoreListEntry> entries);
    private IEnumerable`1<string> FindFilesInUse(string directory);
    private void GetDeletablePaths(IInstalledExtension extension, String& installPath, String& newInstallPath);
    private IEnumerable`1<string> GetInstalledDependentPackageNamesForExtension(string packageId, CultureInfo currentCulture, IDependencyGraph dGraph);
    private IEnumerable`1<FileStream> LockFiles(IEnumerable`1<string> filePaths, IList`1<string> inUse, bool ignoreFilesMarkedForDeletion);
    private void MarkForUninstall(string path);
    private bool MarkPkgdefsInDirectory(string directory);
    private bool MustBeUninstalledThroughInstaller(string packageId, IDependencyGraph dGraph);
    private void PerformLegacyUninstall(IInstalledExtension extension, bool markAsPackComponent);
    private void RegisterStartUpForCleanUp(IWritableSettingsStore settingsStore);
    private void RestoreDiscoverableFiles(IInstalledExtension extension);
    [AsyncStateMachineAttribute("Microsoft.VisualStudio.ExtensionManager.UninstallModule/<ScheduleDeletionWorkerAsync>d__58")]
private Task ScheduleDeletionWorkerAsync(List`1<DeletionWorkerEventHandler> deletionWorkerList);
    private bool ShouldScanInstallPath(ISettingsStore settingsStore);
    private void ThrowIfCannotUninstallOrphanedComponents(IInstalledExtension parentExtension);
    private void ThrowIfFilesInUse(IInstalledExtension extension);
    private bool TryMoveFile(string originalFileName, string destinationFileName);
    [CompilerGeneratedAttribute]
private void <DeletePendingUninstallsAsync>b__29_0();
    [CompilerGeneratedAttribute]
private bool <DeletePendingExtensionSdks>b__46_0(string dir);
    [CompilerGeneratedAttribute]
private IEnumerable`1<string> <DeletePendingExtensionSdks>b__46_1(string dir);
}
public class Microsoft.VisualStudio.ExtensionManager.UnknownRepository : BaseExtensionRepository {
    private IEnumerable`1<Lazy`2<IExtensionRepositoryFactory, IDictionary`2<string, object>>> extensionRepositoryFactories;
    private Task`1<IExtensionRepository> createResolvedRepositoryTask;
    public string RepositoryUri { get; }
    public UnknownRepository(IExtensionRepositoryConfig repositoryConfig, IEnumerable`1<Lazy`2<IExtensionRepositoryFactory, IDictionary`2<string, object>>> extensionRepositoryFactories);
    private IExtensionRepository CreateResolvedRepository();
    private Lazy`2<IExtensionRepositoryFactory, IDictionary`2<string, object>> MatchProtocol();
    public virtual void ResetStateForGetUpdates();
    protected virtual IEnumerable`1<IOnlineExtension> SearchImpl(string searchTerms);
    protected virtual IEnumerable`1<IOnlineExtensionUpdate> GetUpdatesImpl(IEnumerable`1<IInstalledExtension> extensionsToCheck, bool forAutoupdate);
    protected virtual Task`1<IEnumerable`1<IOnlineExtensionUpdate>> GetUpdatesImplAsync(IEnumerable`1<IInstalledExtension> extensionsToCheck, bool forAutoupdate);
    private void CreateCreateResolvedRepositoryTask();
    public void ResetCreateResolvedRepositoryTask();
    public Task`1<IExtensionRepository> GetCreateResolvedRepositoryTask();
    public virtual IEnumerable`1<T> GetExtensions(List`1<string> extensionIds, int lcid, bool forAutoupdate);
    public string get_RepositoryUri();
}
internal class Microsoft.VisualStudio.ExtensionManager.UnknownRepositoryException : Exception {
    public UnknownRepositoryException(string message);
    public UnknownRepositoryException(string message, Exception inner);
}
[ExportAttribute("Microsoft.VisualStudio.ExtensionManager.IExtensionRepositoryFactory")]
[ExportMetadataAttribute("RepositoryProtocol", "Mono.Cecil.CustomAttributeArgument")]
public class Microsoft.VisualStudio.ExtensionManager.UnknownRepositoryFactory : object {
    [CompilerGeneratedAttribute]
private IEnumerable`1<Lazy`2<IExtensionRepositoryFactory, IDictionary`2<string, object>>> <ExtensionRepositoryFactories>k__BackingField;
    [ImportManyAttribute]
private IEnumerable`1<Lazy`2<IExtensionRepositoryFactory, IDictionary`2<string, object>>> ExtensionRepositoryFactories { get; private set; }
    public UnknownRepositoryFactory(IEnumerable`1<Lazy`2<IExtensionRepositoryFactory, IDictionary`2<string, object>>> extensionRepositoryFactories);
    [CompilerGeneratedAttribute]
private IEnumerable`1<Lazy`2<IExtensionRepositoryFactory, IDictionary`2<string, object>>> get_ExtensionRepositoryFactories();
    [CompilerGeneratedAttribute]
private void set_ExtensionRepositoryFactories(IEnumerable`1<Lazy`2<IExtensionRepositoryFactory, IDictionary`2<string, object>>> value);
    public sealed virtual IExtensionRepository CreateRepository(IExtensionRepositoryConfig serverConfig, Func`3<string, Func`1<Task>, Task> proxyResolver);
    public sealed virtual IExtensionRepository CreateRepository(IExtensionRepositoryConfig serverConfig);
    public sealed virtual bool IsProtocolMatch(WebResponse response, Stream responseStream);
}
public class Microsoft.VisualStudio.ExtensionManager.UpdateManager : object {
    public static IEnumerable`1<Lazy`2<IExtensionRepositoryFactory, IDictionary`2<string, object>>> ExtensionRepositoryFactoriesStatic;
    public IEnumerable`1<Lazy`2<IExtensionRepositoryFactory, IDictionary`2<string, object>>> ExtensionRepositoryFactories { get; }
    private static UpdateManager();
    public sealed virtual IEnumerable`1<Lazy`2<IExtensionRepositoryFactory, IDictionary`2<string, object>>> get_ExtensionRepositoryFactories();
}
public class Microsoft.VisualStudio.ExtensionManager.VSEditionIdentifiers : object {
    public static string VSIdentifierPrefix;
    public static string Pro;
    public static string VWDExpress;
    public static string VCSExpress;
    public static string VBExpress;
    public static string VCExpress;
    public static string VSWinExpress;
    public static string VSWinDesktopExpress;
    public static string Express_All;
    public static string Enterprise;
    public static string Ultimate;
    public static string Premium;
    public static string Community;
    public static string IntegratedShell;
    public static string VPDExpress;
    public static string VSLS;
}
public class Microsoft.VisualStudio.ExtensionManager.VsGalleryEntry : BaseOnlineExtensionWithPropertyChange {
    [CompilerGeneratedAttribute]
private Guid <CategoryID>k__BackingField;
    [CompilerGeneratedAttribute]
private long <SizeInBytes>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Ranking>k__BackingField;
    [CompilerGeneratedAttribute]
private object <Relevance>k__BackingField;
    public Guid CategoryID { get; public set; }
    public long SizeInBytes { get; public set; }
    public int Ranking { get; public set; }
    public object Relevance { get; public set; }
    [CompilerGeneratedAttribute]
public sealed virtual Guid get_CategoryID();
    [CompilerGeneratedAttribute]
public sealed virtual void set_CategoryID(Guid value);
    [CompilerGeneratedAttribute]
public sealed virtual long get_SizeInBytes();
    [CompilerGeneratedAttribute]
public sealed virtual void set_SizeInBytes(long value);
    [CompilerGeneratedAttribute]
public sealed virtual int get_Ranking();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Ranking(int value);
    [CompilerGeneratedAttribute]
public sealed virtual object get_Relevance();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Relevance(object value);
    private sealed virtual override bool Microsoft.VisualStudio.ExtensionManager.IOnlineExtension.get_IsReportLinkVisible();
    private sealed virtual override string Microsoft.VisualStudio.ExtensionManager.IOnlineExtension.get_SetupCommandLine();
    private sealed virtual override string Microsoft.VisualStudio.ExtensionManager.IOnlineExtension.get_ApplicableSKUs();
    private sealed virtual override bool Microsoft.VisualStudio.ExtensionManager.IOnlineExtension.get_IsRatingVisible();
    private sealed virtual override VersionRange Microsoft.VisualStudio.ExtensionManager.IOnlineExtension.get_OSVersionRange();
    private sealed virtual override IEnumerable`1<IOnlineExtension> Microsoft.VisualStudio.ExtensionManager.IOnlineExtension.get_PackedExtensions();
}
[DataContractAttribute]
public class Microsoft.VisualStudio.ExtensionManager.VSGalleryExtensionQuery : object {
    [CompilerGeneratedAttribute]
private IList`1<Result> <Results>k__BackingField;
    [DataMemberAttribute]
public IList`1<Result> Results { get; public set; }
    public int Count { get; }
    [CompilerGeneratedAttribute]
public IList`1<Result> get_Results();
    [CompilerGeneratedAttribute]
public void set_Results(IList`1<Result> value);
    public int get_Count();
    public IEnumerable`1<T> GetExtensions();
}
internal class Microsoft.VisualStudio.ExtensionManager.VSGalleryExtensionUpdate : BaseOnlineExtensionUpdate {
    public VSGalleryExtensionUpdate(IInstalledExtension installedExtension, VsGalleryEntry updateEntry, IExtensionScheduleLists extensionScheduleLists);
}
public class Microsoft.VisualStudio.ExtensionManager.VSGalleryRepository : BaseExtensionRepository {
    private static string extensionQueryUri;
    private Func`3<string, Func`1<Task>, Task> proxyResolver;
    private Nullable`1<bool> _isExtensionsRepository;
    public bool SupportsUpdatesForExtensionsInstalledByMsi { get; }
    private bool IsExtensionsRepository { get; }
    public VSGalleryRepository(IExtensionRepositoryConfig serverConfig, Func`3<string, Func`1<Task>, Task> proxyResolver);
    public VSGalleryRepository(string repositoryUri, Func`3<string, Func`1<Task>, Task> proxyResolver);
    protected virtual IEnumerable`1<IOnlineExtension> SearchImpl(string searchTerms);
    public virtual bool get_SupportsUpdatesForExtensionsInstalledByMsi();
    private bool get_IsExtensionsRepository();
    [AsyncStateMachineAttribute("Microsoft.VisualStudio.ExtensionManager.VSGalleryRepository/<GetUpdatesImplAsync>d__10")]
protected virtual Task`1<IEnumerable`1<IOnlineExtensionUpdate>> GetUpdatesImplAsync(IEnumerable`1<IInstalledExtension> extensionsToCheck, bool forAutoupdate);
    protected virtual IEnumerable`1<IOnlineExtensionUpdate> GetUpdatesImpl(IEnumerable`1<IInstalledExtension> extensionsToCheck, bool forAutoupdate);
    public virtual IEnumerable`1<T> GetExtensions(List`1<string> extensionIds, int lcid, bool forAutoupdate);
    [AsyncStateMachineAttribute("Microsoft.VisualStudio.ExtensionManager.VSGalleryRepository/<GetExtensionsAsync>d__13`1")]
private Task`1<IEnumerable`1<T>> GetExtensionsAsync(List`1<string> extensionIds, int lcid, bool forAutoupdate);
    [AsyncStateMachineAttribute("Microsoft.VisualStudio.ExtensionManager.VSGalleryRepository/<GetExtensionsOrCategoriesAsync>d__14`1")]
internal Task`1<T> GetExtensionsOrCategoriesAsync(string url, HttpMethod httpMethod, string content);
    private void PostTelemetry(string eventName, Dictionary`2<string, object> propertiesToSend);
    [CompilerGeneratedAttribute]
private IVsGalleryExtension <GetUpdatesImplAsync>b__10_1(VsGalleryEntry x);
    [CompilerGeneratedAttribute]
private IEnumerable`1<IVsGalleryExtension> <GetUpdatesImplAsync>b__10_2(List`1<string> vsixIds);
}
[ExportAttribute("Microsoft.VisualStudio.ExtensionManager.IExtensionRepositoryFactory")]
[ExportMetadataAttribute("RepositoryProtocol", "Mono.Cecil.CustomAttributeArgument")]
public class Microsoft.VisualStudio.ExtensionManager.VSGalleryRepositoryFactory : object {
    public virtual IExtensionRepository CreateRepository(IExtensionRepositoryConfig serverConfig, Func`3<string, Func`1<Task>, Task> proxyResolver);
    public sealed virtual IExtensionRepository CreateRepository(IExtensionRepositoryConfig serverConfig);
    public sealed virtual bool IsProtocolMatch(WebResponse response, Stream responseStream);
}
public static class Microsoft.VisualStudio.ExtensionManager.VSGalleryRepositoryHelper : object {
    public static string HeaderUserAgent;
    public static string HeaderUserAgentValue;
    public static string HeaderUserId;
    private static string headerAccept;
    private static string headerAcceptValue;
    private static string headerContentMediaType;
    private static string headerAcceptEncoding;
    private static string headerAcceptEncodingValue;
    private static Guid telemetrySessionUserId;
    public static Guid TelemetrySessionUserId { get; }
    [AsyncStateMachineAttribute("Microsoft.VisualStudio.ExtensionManager.VSGalleryRepositoryHelper/<PostAndGetResponseAsync>d__9`1")]
public static Task`1<T> PostAndGetResponseAsync(HttpMethod httpMethod, Uri requestUri, string vsVersion, string content, Action`1<ValueTuple`2<string, string>> extractResponseCode, CancellationToken cancellationToken);
    public static Guid get_TelemetrySessionUserId();
}
[GeneratedCodeAttribute("xsd", "4.0.30319.34209")]
[DebuggerStepThroughAttribute]
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
[XmlRootAttribute]
public class Microsoft.VisualStudio.ExtensionManager.Vsix : object {
    private VsixIdentifier identifierField;
    private VsixReference[] referencesField;
    private VsixContent contentField;
    private string versionField;
    public VsixIdentifier Identifier { get; public set; }
    [XmlArrayItemAttribute("Reference")]
public VsixReference[] References { get; public set; }
    public VsixContent Content { get; public set; }
    [XmlAttributeAttribute]
public string Version { get; public set; }
    public VsixIdentifier get_Identifier();
    public void set_Identifier(VsixIdentifier value);
    public VsixReference[] get_References();
    public void set_References(VsixReference[] value);
    public VsixContent get_Content();
    public void set_Content(VsixContent value);
    public string get_Version();
    public void set_Version(string value);
}
[GeneratedCodeAttribute("xsd", "4.0.30319.34209")]
[DebuggerStepThroughAttribute]
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
public class Microsoft.VisualStudio.ExtensionManager.VsixAssembly : object {
    private string assemblyNameField;
    private string valueField;
    [XmlAttributeAttribute]
public string AssemblyName { get; public set; }
    [XmlTextAttribute]
public string Value { get; public set; }
    public string get_AssemblyName();
    public void set_AssemblyName(string value);
    public string get_Value();
    public void set_Value(string value);
}
[GeneratedCodeAttribute("xsd", "4.0.30319.34209")]
[DebuggerStepThroughAttribute]
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
public class Microsoft.VisualStudio.ExtensionManager.VsixContent : object {
    private Object[] itemsField;
    private ItemsChoiceType[] itemsElementNameField;
    [XmlElementAttribute("Assembly", "Microsoft.VisualStudio.ExtensionManager.VsixAssembly")]
[XmlElementAttribute("CustomExtension", "Microsoft.VisualStudio.ExtensionManager.VsixCustomExtension")]
[XmlElementAttribute("ItemTemplate", "System.Object")]
[XmlElementAttribute("MefComponent", "System.Object")]
[XmlElementAttribute("ProjectTemplate", "System.Object")]
[XmlElementAttribute("Sample", "Microsoft.VisualStudio.ExtensionManager.VsixSample")]
[XmlElementAttribute("ToolboxControl", "System.Object")]
[XmlElementAttribute("VsPackage", "System.Object")]
[XmlChoiceIdentifierAttribute("ItemsElementName")]
public Object[] Items { get; public set; }
    [XmlElementAttribute("ItemsElementName")]
[XmlIgnoreAttribute]
public ItemsChoiceType[] ItemsElementName { get; public set; }
    public Object[] get_Items();
    public void set_Items(Object[] value);
    public ItemsChoiceType[] get_ItemsElementName();
    public void set_ItemsElementName(ItemsChoiceType[] value);
}
[GeneratedCodeAttribute("xsd", "4.0.30319.34209")]
[DebuggerStepThroughAttribute]
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
public class Microsoft.VisualStudio.ExtensionManager.VsixCustomExtension : object {
    private string typeField;
    private XmlAttribute[] anyAttrField;
    private string valueField;
    [XmlAttributeAttribute]
public string Type { get; public set; }
    [XmlAnyAttributeAttribute]
public XmlAttribute[] AnyAttr { get; public set; }
    [XmlTextAttribute]
public string Value { get; public set; }
    public string get_Type();
    public void set_Type(string value);
    public XmlAttribute[] get_AnyAttr();
    public void set_AnyAttr(XmlAttribute[] value);
    public string get_Value();
    public void set_Value(string value);
}
internal static class Microsoft.VisualStudio.ExtensionManager.VsixExtractor : object {
    internal static string TemporaryPath(string parentName, string packagefileName, string installPath);
    internal static void ExtractEmbeddedExtension(InstallableExtensionImpl extension, string fileDestinationDirectory, ILogger logger, IFileSystem fileSystem);
}
[GeneratedCodeAttribute("xsd", "4.0.30319.34209")]
[DebuggerStepThroughAttribute]
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
public class Microsoft.VisualStudio.ExtensionManager.VsixIdentifier : object {
    private string nameField;
    private string authorField;
    private string versionField;
    private string descriptionField;
    private ushort localeField;
    private string moreInfoUrlField;
    private string licenseField;
    private string gettingStartedGuideField;
    private string releaseNotesField;
    private string iconField;
    private string previewImageField;
    private bool installedByMsiField;
    private bool installedByMsiFieldSpecified;
    private Object[] supportedProductsField;
    private VsixIdentifierSupportedFrameworkRuntimeEdition supportedFrameworkRuntimeEditionField;
    private bool systemComponentField;
    private bool systemComponentFieldSpecified;
    private bool allUsersField;
    private bool allUsersFieldSpecified;
    private bool allowClientRoleFieldSpecified;
    private bool experimentalField;
    private bool experimentalFieldSpecified;
    private string idField;
    private bool allowClientRole;
    public string Name { get; public set; }
    public string Author { get; public set; }
    public string Version { get; public set; }
    public string Description { get; public set; }
    public ushort Locale { get; public set; }
    public string MoreInfoUrl { get; public set; }
    public string License { get; public set; }
    public string GettingStartedGuide { get; public set; }
    public string ReleaseNotes { get; public set; }
    public string Icon { get; public set; }
    public string PreviewImage { get; public set; }
    public bool InstalledByMsi { get; public set; }
    [XmlIgnoreAttribute]
public bool InstalledByMsiSpecified { get; public set; }
    [XmlArrayItemAttribute("IsolatedShell", "Microsoft.VisualStudio.ExtensionManager.VsixIdentifierIsolatedShell")]
[XmlArrayItemAttribute("VisualStudio", "Microsoft.VisualStudio.ExtensionManager.VsixIdentifierVisualStudio")]
public Object[] SupportedProducts { get; public set; }
    public VsixIdentifierSupportedFrameworkRuntimeEdition SupportedFrameworkRuntimeEdition { get; public set; }
    public bool SystemComponent { get; public set; }
    [XmlIgnoreAttribute]
public bool SystemComponentSpecified { get; public set; }
    public bool AllUsers { get; public set; }
    [XmlIgnoreAttribute]
public bool AllUsersSpecified { get; public set; }
    public bool Experimental { get; public set; }
    [XmlIgnoreAttribute]
public bool ExperimentalSpecified { get; public set; }
    [XmlAttributeAttribute]
public string Id { get; public set; }
    [XmlIgnoreAttribute]
public bool AllowClientRoleSpecified { get; public set; }
    public bool AllowClientRole { get; public set; }
    public string get_Name();
    public void set_Name(string value);
    public string get_Author();
    public void set_Author(string value);
    public string get_Version();
    public void set_Version(string value);
    public string get_Description();
    public void set_Description(string value);
    public ushort get_Locale();
    public void set_Locale(ushort value);
    public string get_MoreInfoUrl();
    public void set_MoreInfoUrl(string value);
    public string get_License();
    public void set_License(string value);
    public string get_GettingStartedGuide();
    public void set_GettingStartedGuide(string value);
    public string get_ReleaseNotes();
    public void set_ReleaseNotes(string value);
    public string get_Icon();
    public void set_Icon(string value);
    public string get_PreviewImage();
    public void set_PreviewImage(string value);
    public bool get_InstalledByMsi();
    public void set_InstalledByMsi(bool value);
    public bool get_InstalledByMsiSpecified();
    public void set_InstalledByMsiSpecified(bool value);
    public Object[] get_SupportedProducts();
    public void set_SupportedProducts(Object[] value);
    public VsixIdentifierSupportedFrameworkRuntimeEdition get_SupportedFrameworkRuntimeEdition();
    public void set_SupportedFrameworkRuntimeEdition(VsixIdentifierSupportedFrameworkRuntimeEdition value);
    public bool get_SystemComponent();
    public void set_SystemComponent(bool value);
    public bool get_SystemComponentSpecified();
    public void set_SystemComponentSpecified(bool value);
    public bool get_AllUsers();
    public void set_AllUsers(bool value);
    public bool get_AllUsersSpecified();
    public void set_AllUsersSpecified(bool value);
    public bool get_Experimental();
    public void set_Experimental(bool value);
    public bool get_ExperimentalSpecified();
    public void set_ExperimentalSpecified(bool value);
    public string get_Id();
    public void set_Id(string value);
    public bool get_AllowClientRoleSpecified();
    public void set_AllowClientRoleSpecified(bool value);
    public bool get_AllowClientRole();
    public void set_AllowClientRole(bool value);
}
[GeneratedCodeAttribute("xsd", "4.0.30319.34209")]
[DebuggerStepThroughAttribute]
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
public class Microsoft.VisualStudio.ExtensionManager.VsixIdentifierIsolatedShell : object {
    private string versionField;
    private string valueField;
    [XmlAttributeAttribute]
public string Version { get; public set; }
    [XmlTextAttribute]
public string Value { get; public set; }
    public string get_Version();
    public void set_Version(string value);
    public string get_Value();
    public void set_Value(string value);
}
[GeneratedCodeAttribute("xsd", "4.0.30319.34209")]
[DebuggerStepThroughAttribute]
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
public class Microsoft.VisualStudio.ExtensionManager.VsixIdentifierSupportedFrameworkRuntimeEdition : object {
    private string minVersionField;
    private string maxVersionField;
    [XmlAttributeAttribute]
public string MinVersion { get; public set; }
    [XmlAttributeAttribute]
public string MaxVersion { get; public set; }
    public string get_MinVersion();
    public void set_MinVersion(string value);
    public string get_MaxVersion();
    public void set_MaxVersion(string value);
}
[GeneratedCodeAttribute("xsd", "4.0.30319.34209")]
[DebuggerStepThroughAttribute]
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
public class Microsoft.VisualStudio.ExtensionManager.VsixIdentifierVisualStudio : object {
    private String[] editionField;
    private string versionField;
    private string productArchitecture;
    [XmlElementAttribute("Edition")]
public String[] Edition { get; public set; }
    [XmlAttributeAttribute]
public string Version { get; public set; }
    [XmlElementAttribute]
public string ProductArchitecture { get; public set; }
    public String[] get_Edition();
    public void set_Edition(String[] value);
    public string get_Version();
    public void set_Version(string value);
    public string get_ProductArchitecture();
    public void set_ProductArchitecture(string value);
}
[GeneratedCodeAttribute("xsd", "4.6.1055.0")]
[DebuggerStepThroughAttribute]
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
[XmlRootAttribute]
public class Microsoft.VisualStudio.ExtensionManager.VsixLanguagePack : object {
    private string localizedNameField;
    private string localizedDescriptionField;
    private string moreInfoUrlField;
    private string releaseNotesField;
    private string licenseField;
    private string versionField;
    public string LocalizedName { get; public set; }
    public string LocalizedDescription { get; public set; }
    public string MoreInfoUrl { get; public set; }
    public string ReleaseNotes { get; public set; }
    public string License { get; public set; }
    [XmlAttributeAttribute]
public string Version { get; public set; }
    public string get_LocalizedName();
    public void set_LocalizedName(string value);
    public string get_LocalizedDescription();
    public void set_LocalizedDescription(string value);
    public string get_MoreInfoUrl();
    public void set_MoreInfoUrl(string value);
    public string get_ReleaseNotes();
    public void set_ReleaseNotes(string value);
    public string get_License();
    public void set_License(string value);
    public string get_Version();
    public void set_Version(string value);
}
public class Microsoft.VisualStudio.ExtensionManager.VsixLanguagePackSerializer : XmlSerializer {
    public virtual bool CanDeserialize(XmlReader xmlReader);
    protected virtual void Serialize(object objectToSerialize, XmlSerializationWriter writer);
    protected virtual object Deserialize(XmlSerializationReader reader);
    protected virtual XmlSerializationReader CreateReader();
    protected virtual XmlSerializationWriter CreateWriter();
}
[GeneratedCodeAttribute("xsd", "4.0.30319.34209")]
[DebuggerStepThroughAttribute]
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
public class Microsoft.VisualStudio.ExtensionManager.VsixReference : object {
    private string nameField;
    private string moreInfoUrlField;
    private string vsixPathField;
    private string idField;
    private string minVersionField;
    private string maxVersionField;
    public string Name { get; public set; }
    public string MoreInfoUrl { get; public set; }
    public string VsixPath { get; public set; }
    [XmlAttributeAttribute]
public string Id { get; public set; }
    [XmlAttributeAttribute]
public string MinVersion { get; public set; }
    [XmlAttributeAttribute]
public string MaxVersion { get; public set; }
    public string get_Name();
    public void set_Name(string value);
    public string get_MoreInfoUrl();
    public void set_MoreInfoUrl(string value);
    public string get_VsixPath();
    public void set_VsixPath(string value);
    public string get_Id();
    public void set_Id(string value);
    public string get_MinVersion();
    public void set_MinVersion(string value);
    public string get_MaxVersion();
    public void set_MaxVersion(string value);
}
[GeneratedCodeAttribute("xsd", "4.0.30319.34209")]
[DebuggerStepThroughAttribute]
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
public class Microsoft.VisualStudio.ExtensionManager.VsixSample : object {
    private string programmingLanguagesField;
    private string targetFrameworksField;
    private string categorizationPathField;
    private string startupFilesField;
    private string defaultNameField;
    private string solutionPathField;
    private string valueField;
    [XmlAttributeAttribute]
public string ProgrammingLanguages { get; public set; }
    [XmlAttributeAttribute]
public string TargetFrameworks { get; public set; }
    [XmlAttributeAttribute]
public string CategorizationPath { get; public set; }
    [XmlAttributeAttribute]
public string StartupFiles { get; public set; }
    [XmlAttributeAttribute]
public string DefaultName { get; public set; }
    [XmlAttributeAttribute]
public string SolutionPath { get; public set; }
    [XmlTextAttribute]
public string Value { get; public set; }
    public string get_ProgrammingLanguages();
    public void set_ProgrammingLanguages(string value);
    public string get_TargetFrameworks();
    public void set_TargetFrameworks(string value);
    public string get_CategorizationPath();
    public void set_CategorizationPath(string value);
    public string get_StartupFiles();
    public void set_StartupFiles(string value);
    public string get_DefaultName();
    public void set_DefaultName(string value);
    public string get_SolutionPath();
    public void set_SolutionPath(string value);
    public string get_Value();
    public void set_Value(string value);
}
public class Microsoft.VisualStudio.ExtensionManager.VsixSerializer : XmlSerializer {
    protected virtual XmlSerializationReader CreateReader();
    protected virtual XmlSerializationWriter CreateWriter();
    public virtual bool CanDeserialize(XmlReader xmlReader);
    protected virtual void Serialize(object objectToSerialize, XmlSerializationWriter writer);
    protected virtual object Deserialize(XmlSerializationReader reader);
}
public class Microsoft.VisualStudio.ExtensionManager.XmlSerializationReaderAtomVsixMetadata : XmlSerializationReader {
    private string id1_Vsix;
    private string id10_PackedExtensionIDs;
    private string id11_Installations;
    private string id12_AtomVsixInstallationItem;
    private string id13_Identifier;
    private string id14_VersionRange;
    private string id15_ProductArchitecture;
    private string id2_Item;
    private string id3_AtomVsixMetadata;
    private string id4_Id;
    private string id5_Version;
    private string id6_References;
    private string id7_Rating;
    private string id8_RatingCount;
    private string id9_DownloadCount;
    public object Read6_Vsix();
    protected virtual void InitCallbacks();
    protected virtual void InitIDs();
    private Nullable`1<decimal> Read1_NullableOfDecimal(bool checkType);
    private Nullable`1<UInt32> Read2_NullableOfUInt32(bool checkType);
    private AtomVsixInstallationItem Read4_AtomVsixInstallationItem(bool isNullable, bool checkType);
    private AtomVsixMetadata Read5_AtomVsixMetadata(bool isNullable, bool checkType);
}
internal class Microsoft.VisualStudio.ExtensionManager.XmlSerializationReaderVsix : XmlSerializationReader {
    private string id40_License;
    private string id19_IsolatedShell;
    private string id27_VsixPath;
    private string id18_VisualStudio;
    private string id37_Author;
    private string id6_References;
    private string id13_Sample;
    private string id45_InstalledByMsi;
    private string id31_CategorizationPath;
    private string id32_StartupFiles;
    private string id23_MinVersion;
    private string id42_ReleaseNotes;
    private string id21_ItemsChoiceType;
    private string id34_SolutionPath;
    private string id4_Version;
    private string id8_Content;
    private string id47_Item;
    private string id17_ArrayOfChoice1;
    private string id44_PreviewImage;
    private string id7_Reference;
    private string id28_Edition;
    private string id43_Icon;
    private string id26_MoreInfoUrl;
    private string id3_Item;
    private string id46_SupportedProducts;
    private string id41_GettingStartedGuide;
    private string id20_ArrayOfVsixReference;
    private string id12_CustomExtension;
    private string id10_MefComponent;
    private string id35_Type;
    private string id15_ToolboxControl;
    private string id25_Name;
    private string id11_Assembly;
    private string id1_Vsix;
    private string id39_Locale;
    private string id30_TargetFrameworks;
    private string id2_Item;
    private string id33_DefaultName;
    private string id38_Description;
    private string id22_Id;
    private string id49_AllUsers;
    private string id9_ItemTemplate;
    private string id5_Identifier;
    private string id48_SystemComponent;
    private string id36_AssemblyName;
    private string id14_ProjectTemplate;
    private string id16_VsPackage;
    private string id29_ProgrammingLanguages;
    private string id24_MaxVersion;
    private string id51_AllowClientRole;
    internal object Read13_Vsix();
    private Vsix Read12_Vsix(bool isNullable, bool checkType);
    private VsixContent Read11_VsixContent(bool isNullable, bool checkType);
    private object Read1_Object(bool isNullable, bool checkType);
    private ItemsChoiceType Read7_ItemsChoiceType(string s);
    private VsixReference Read6_VsixReference(bool isNullable, bool checkType);
    private VsixIdentifierIsolatedShell Read2_VsixIdentifierIsolatedShell(bool isNullable, bool checkType);
    private VsixIdentifierVisualStudio Read3_VsixIdentifierVisualStudio(bool isNullable, bool checkType);
    private VsixSample Read10_VsixSample(bool isNullable, bool checkType);
    private VsixCustomExtension Read9_VsixCustomExtension(bool isNullable, bool checkType);
    private VsixAssembly Read8_VsixAssembly(bool isNullable, bool checkType);
    private VsixIdentifier Read5_VsixIdentifier(bool isNullable, bool checkType);
    private VsixIdentifierSupportedFrameworkRuntimeEdition Read4_Item(bool isNullable, bool checkType);
    protected virtual void InitCallbacks();
    protected virtual void InitIDs();
}
internal class Microsoft.VisualStudio.ExtensionManager.XmlSerializationReaderVsixLanguagePack : XmlSerializationReader {
    private string id2_Item;
    private string id8_ReleaseNotes;
    private string id7_MoreInfoUrl;
    private string id9_License;
    private string id1_VsixLanguagePack;
    private string id5_LocalizedName;
    private string id6_LocalizedDescription;
    private string id3_Item;
    private string id4_Version;
    internal object Read3_VsixLanguagePack();
    private VsixLanguagePack Read2_VsixLanguagePack(bool isNullable, bool checkType);
    protected virtual void InitCallbacks();
    protected virtual void InitIDs();
}
public class Microsoft.VisualStudio.ExtensionManager.XmlSerializationWriterAtomVsixMetadata : XmlSerializationWriter {
    public void Write4_Vsix(object o);
    protected virtual void InitCallbacks();
    private void Write2_AtomVsixInstallationItem(string n, string ns, AtomVsixInstallationItem o, bool isNullable, bool needType);
    private void Write3_AtomVsixMetadata(string n, string ns, AtomVsixMetadata o, bool isNullable, bool needType);
}
internal class Microsoft.VisualStudio.ExtensionManager.XmlSerializationWriterVsix : XmlSerializationWriter {
    internal void Write13_Vsix(object o);
    private void Write12_Vsix(string n, string ns, Vsix o, bool isNullable, bool needType);
    private void Write11_VsixContent(string n, string ns, VsixContent o, bool isNullable, bool needType);
    private void Write1_Object(string n, string ns, object o, bool isNullable, bool needType);
    private string Write7_ItemsChoiceType(ItemsChoiceType v);
    private void Write6_VsixReference(string n, string ns, VsixReference o, bool isNullable, bool needType);
    private void Write3_VsixIdentifierVisualStudio(string n, string ns, VsixIdentifierVisualStudio o, bool isNullable, bool needType);
    private void Write2_VsixIdentifierIsolatedShell(string n, string ns, VsixIdentifierIsolatedShell o, bool isNullable, bool needType);
    private void Write9_VsixCustomExtension(string n, string ns, VsixCustomExtension o, bool isNullable, bool needType);
    private void Write10_VsixSample(string n, string ns, VsixSample o, bool isNullable, bool needType);
    private void Write8_VsixAssembly(string n, string ns, VsixAssembly o, bool isNullable, bool needType);
    private void Write5_VsixIdentifier(string n, string ns, VsixIdentifier o, bool isNullable, bool needType);
    private void Write4_Item(string n, string ns, VsixIdentifierSupportedFrameworkRuntimeEdition o, bool isNullable, bool needType);
    protected virtual void InitCallbacks();
}
internal class Microsoft.VisualStudio.ExtensionManager.XmlSerializationWriterVsixLanguagePack : XmlSerializationWriter {
    internal void Write3_VsixLanguagePack(object o);
    private void Write2_VsixLanguagePack(string n, string ns, VsixLanguagePack o, bool isNullable, bool needType);
    protected virtual void InitCallbacks();
}
[CompilerGeneratedAttribute]
[GuidAttribute("6380BCFF-41D3-4B2E-8B2E-BF8A6810C848")]
[InterfaceTypeAttribute("1")]
[TypeIdentifierAttribute]
public interface Microsoft.VisualStudio.Setup.Configuration.IEnumSetupInstances {
    public abstract virtual void Next(int celt, ISetupInstance[] rgelt, Int32& pceltFetched);
}
[CompilerGeneratedAttribute]
[GuidAttribute("42843719-DB4C-46C2-8E7C-64F1816EFD5B")]
[InterfaceTypeAttribute("1")]
[TypeIdentifierAttribute]
public interface Microsoft.VisualStudio.Setup.Configuration.ISetupConfiguration {
}
[CompilerGeneratedAttribute]
[GuidAttribute("26AAB78C-4A60-49D6-AF3B-3C35BC93365D")]
[InterfaceTypeAttribute("1")]
[TypeIdentifierAttribute]
public interface Microsoft.VisualStudio.Setup.Configuration.ISetupConfiguration2 {
    public void _VtblGap1_3();
    public abstract virtual IEnumSetupInstances EnumAllInstances();
}
[CompilerGeneratedAttribute]
[GuidAttribute("B41463C3-8866-43B5-BC33-2B0676F7F42E")]
[InterfaceTypeAttribute("1")]
[TypeIdentifierAttribute]
public interface Microsoft.VisualStudio.Setup.Configuration.ISetupInstance {
}
[CompilerGeneratedAttribute]
[GuidAttribute("89143C9A-05AF-49B0-B717-72E218A2185C")]
[InterfaceTypeAttribute("1")]
[TypeIdentifierAttribute]
public interface Microsoft.VisualStudio.Setup.Configuration.ISetupInstance2 {
    public abstract virtual string GetInstanceId();
    public void _VtblGap1_2();
    public abstract virtual string GetInstallationPath();
    public void _VtblGap2_9();
    public abstract virtual bool IsLaunchable();
}
[CompilerGeneratedAttribute]
[GuidAttribute("42843719-DB4C-46C2-8E7C-64F1816EFD5B")]
[CoClassAttribute("System.Object")]
[TypeIdentifierAttribute]
public interface Microsoft.VisualStudio.Setup.Configuration.SetupConfiguration {
}
[DebuggerStepThroughAttribute]
[GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
[EditorBrowsableAttribute("2")]
[MessageContractAttribute]
internal class SharepointLists.AddAttachmentRequest : object {
    [MessageBodyMemberAttribute]
public AddAttachmentRequestBody Body;
    public AddAttachmentRequest(AddAttachmentRequestBody Body);
}
[DebuggerStepThroughAttribute]
[GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
[EditorBrowsableAttribute("2")]
[DataContractAttribute]
internal class SharepointLists.AddAttachmentRequestBody : object {
    [DataMemberAttribute]
public string listName;
    [DataMemberAttribute]
public string listItemID;
    [DataMemberAttribute]
public string fileName;
    [DataMemberAttribute]
public Byte[] attachment;
    public AddAttachmentRequestBody(string listName, string listItemID, string fileName, Byte[] attachment);
}
[DebuggerStepThroughAttribute]
[GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
[EditorBrowsableAttribute("2")]
[MessageContractAttribute]
internal class SharepointLists.AddAttachmentResponse : object {
    [MessageBodyMemberAttribute]
public AddAttachmentResponseBody Body;
    public AddAttachmentResponse(AddAttachmentResponseBody Body);
}
[DebuggerStepThroughAttribute]
[GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
[EditorBrowsableAttribute("2")]
[DataContractAttribute]
internal class SharepointLists.AddAttachmentResponseBody : object {
    [DataMemberAttribute]
public string AddAttachmentResult;
    public AddAttachmentResponseBody(string AddAttachmentResult);
}
[DebuggerStepThroughAttribute]
[GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
[EditorBrowsableAttribute("2")]
[MessageContractAttribute]
internal class SharepointLists.AddDiscussionBoardItemRequest : object {
    [MessageBodyMemberAttribute]
public AddDiscussionBoardItemRequestBody Body;
    public AddDiscussionBoardItemRequest(AddDiscussionBoardItemRequestBody Body);
}
[DebuggerStepThroughAttribute]
[GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
[EditorBrowsableAttribute("2")]
[DataContractAttribute]
internal class SharepointLists.AddDiscussionBoardItemRequestBody : object {
    [DataMemberAttribute]
public string listName;
    [DataMemberAttribute]
public Byte[] message;
    public AddDiscussionBoardItemRequestBody(string listName, Byte[] message);
}
[DebuggerStepThroughAttribute]
[GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
[EditorBrowsableAttribute("2")]
[MessageContractAttribute]
internal class SharepointLists.AddDiscussionBoardItemResponse : object {
    [MessageBodyMemberAttribute]
public AddDiscussionBoardItemResponseBody Body;
    public AddDiscussionBoardItemResponse(AddDiscussionBoardItemResponseBody Body);
}
[DebuggerStepThroughAttribute]
[GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
[EditorBrowsableAttribute("2")]
[DataContractAttribute]
internal class SharepointLists.AddDiscussionBoardItemResponseBody : object {
    [DataMemberAttribute]
public XElement AddDiscussionBoardItemResult;
    public AddDiscussionBoardItemResponseBody(XElement AddDiscussionBoardItemResult);
}
[DebuggerStepThroughAttribute]
[GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
[EditorBrowsableAttribute("2")]
[MessageContractAttribute]
internal class SharepointLists.AddListFromFeatureRequest : object {
    [MessageBodyMemberAttribute]
public AddListFromFeatureRequestBody Body;
    public AddListFromFeatureRequest(AddListFromFeatureRequestBody Body);
}
[DebuggerStepThroughAttribute]
[GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
[EditorBrowsableAttribute("2")]
[DataContractAttribute]
internal class SharepointLists.AddListFromFeatureRequestBody : object {
    [DataMemberAttribute]
public string listName;
    [DataMemberAttribute]
public string description;
    [DataMemberAttribute]
public Guid featureID;
    [DataMemberAttribute]
public int templateID;
    public AddListFromFeatureRequestBody(string listName, string description, Guid featureID, int templateID);
}
[DebuggerStepThroughAttribute]
[GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
[EditorBrowsableAttribute("2")]
[MessageContractAttribute]
internal class SharepointLists.AddListFromFeatureResponse : object {
    [MessageBodyMemberAttribute]
public AddListFromFeatureResponseBody Body;
    public AddListFromFeatureResponse(AddListFromFeatureResponseBody Body);
}
[DebuggerStepThroughAttribute]
[GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
[EditorBrowsableAttribute("2")]
[DataContractAttribute]
internal class SharepointLists.AddListFromFeatureResponseBody : object {
    [DataMemberAttribute]
public XElement AddListFromFeatureResult;
    public AddListFromFeatureResponseBody(XElement AddListFromFeatureResult);
}
[DebuggerStepThroughAttribute]
[GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
[EditorBrowsableAttribute("2")]
[MessageContractAttribute]
internal class SharepointLists.AddListRequest : object {
    [MessageBodyMemberAttribute]
public AddListRequestBody Body;
    public AddListRequest(AddListRequestBody Body);
}
[DebuggerStepThroughAttribute]
[GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
[EditorBrowsableAttribute("2")]
[DataContractAttribute]
internal class SharepointLists.AddListRequestBody : object {
    [DataMemberAttribute]
public string listName;
    [DataMemberAttribute]
public string description;
    [DataMemberAttribute]
public int templateID;
    public AddListRequestBody(string listName, string description, int templateID);
}
[DebuggerStepThroughAttribute]
[GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
[EditorBrowsableAttribute("2")]
[MessageContractAttribute]
internal class SharepointLists.AddListResponse : object {
    [MessageBodyMemberAttribute]
public AddListResponseBody Body;
    public AddListResponse(AddListResponseBody Body);
}
[DebuggerStepThroughAttribute]
[GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
[EditorBrowsableAttribute("2")]
[DataContractAttribute]
internal class SharepointLists.AddListResponseBody : object {
    [DataMemberAttribute]
public XElement AddListResult;
    public AddListResponseBody(XElement AddListResult);
}
[DebuggerStepThroughAttribute]
[GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
[EditorBrowsableAttribute("2")]
[MessageContractAttribute]
internal class SharepointLists.AddWikiPageRequest : object {
    [MessageBodyMemberAttribute]
public AddWikiPageRequestBody Body;
    public AddWikiPageRequest(AddWikiPageRequestBody Body);
}
[DebuggerStepThroughAttribute]
[GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
[EditorBrowsableAttribute("2")]
[DataContractAttribute]
internal class SharepointLists.AddWikiPageRequestBody : object {
    [DataMemberAttribute]
public string strListName;
    [DataMemberAttribute]
public string listRelPageUrl;
    [DataMemberAttribute]
public string wikiContent;
    public AddWikiPageRequestBody(string strListName, string listRelPageUrl, string wikiContent);
}
[DebuggerStepThroughAttribute]
[GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
[EditorBrowsableAttribute("2")]
[MessageContractAttribute]
internal class SharepointLists.AddWikiPageResponse : object {
    [MessageBodyMemberAttribute]
public AddWikiPageResponseBody Body;
    public AddWikiPageResponse(AddWikiPageResponseBody Body);
}
[DebuggerStepThroughAttribute]
[GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
[EditorBrowsableAttribute("2")]
[DataContractAttribute]
internal class SharepointLists.AddWikiPageResponseBody : object {
    [DataMemberAttribute]
public XElement AddWikiPageResult;
    public AddWikiPageResponseBody(XElement AddWikiPageResult);
}
[DebuggerStepThroughAttribute]
[GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
[EditorBrowsableAttribute("2")]
[MessageContractAttribute]
internal class SharepointLists.ApplyContentTypeToListRequest : object {
    [MessageBodyMemberAttribute]
public ApplyContentTypeToListRequestBody Body;
    public ApplyContentTypeToListRequest(ApplyContentTypeToListRequestBody Body);
}
[DebuggerStepThroughAttribute]
[GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
[EditorBrowsableAttribute("2")]
[DataContractAttribute]
internal class SharepointLists.ApplyContentTypeToListRequestBody : object {
    [DataMemberAttribute]
public string webUrl;
    [DataMemberAttribute]
public string contentTypeId;
    [DataMemberAttribute]
public string listName;
    public ApplyContentTypeToListRequestBody(string webUrl, string contentTypeId, string listName);
}
[DebuggerStepThroughAttribute]
[GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
[EditorBrowsableAttribute("2")]
[MessageContractAttribute]
internal class SharepointLists.ApplyContentTypeToListResponse : object {
    [MessageBodyMemberAttribute]
public ApplyContentTypeToListResponseBody Body;
    public ApplyContentTypeToListResponse(ApplyContentTypeToListResponseBody Body);
}
[DebuggerStepThroughAttribute]
[GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
[EditorBrowsableAttribute("2")]
[DataContractAttribute]
internal class SharepointLists.ApplyContentTypeToListResponseBody : object {
    [DataMemberAttribute]
public XElement ApplyContentTypeToListResult;
    public ApplyContentTypeToListResponseBody(XElement ApplyContentTypeToListResult);
}
[DebuggerStepThroughAttribute]
[GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
[EditorBrowsableAttribute("2")]
[MessageContractAttribute]
internal class SharepointLists.CheckInFileRequest : object {
    [MessageBodyMemberAttribute]
public CheckInFileRequestBody Body;
    public CheckInFileRequest(CheckInFileRequestBody Body);
}
[DebuggerStepThroughAttribute]
[GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
[EditorBrowsableAttribute("2")]
[DataContractAttribute]
internal class SharepointLists.CheckInFileRequestBody : object {
    [DataMemberAttribute]
public string pageUrl;
    [DataMemberAttribute]
public string comment;
    [DataMemberAttribute]
public string CheckinType;
    public CheckInFileRequestBody(string pageUrl, string comment, string CheckinType);
}
[DebuggerStepThroughAttribute]
[GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
[EditorBrowsableAttribute("2")]
[MessageContractAttribute]
internal class SharepointLists.CheckInFileResponse : object {
    [MessageBodyMemberAttribute]
public CheckInFileResponseBody Body;
    public CheckInFileResponse(CheckInFileResponseBody Body);
}
[DebuggerStepThroughAttribute]
[GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
[EditorBrowsableAttribute("2")]
[DataContractAttribute]
internal class SharepointLists.CheckInFileResponseBody : object {
    [DataMemberAttribute]
public bool CheckInFileResult;
    public CheckInFileResponseBody(bool CheckInFileResult);
}
[DebuggerStepThroughAttribute]
[GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
[EditorBrowsableAttribute("2")]
[MessageContractAttribute]
internal class SharepointLists.CheckOutFileRequest : object {
    [MessageBodyMemberAttribute]
public CheckOutFileRequestBody Body;
    public CheckOutFileRequest(CheckOutFileRequestBody Body);
}
[DebuggerStepThroughAttribute]
[GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
[EditorBrowsableAttribute("2")]
[DataContractAttribute]
internal class SharepointLists.CheckOutFileRequestBody : object {
    [DataMemberAttribute]
public string pageUrl;
    [DataMemberAttribute]
public string checkoutToLocal;
    [DataMemberAttribute]
public string lastmodified;
    public CheckOutFileRequestBody(string pageUrl, string checkoutToLocal, string lastmodified);
}
[DebuggerStepThroughAttribute]
[GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
[EditorBrowsableAttribute("2")]
[MessageContractAttribute]
internal class SharepointLists.CheckOutFileResponse : object {
    [MessageBodyMemberAttribute]
public CheckOutFileResponseBody Body;
    public CheckOutFileResponse(CheckOutFileResponseBody Body);
}
[DebuggerStepThroughAttribute]
[GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
[EditorBrowsableAttribute("2")]
[DataContractAttribute]
internal class SharepointLists.CheckOutFileResponseBody : object {
    [DataMemberAttribute]
public bool CheckOutFileResult;
    public CheckOutFileResponseBody(bool CheckOutFileResult);
}
[DebuggerStepThroughAttribute]
[GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
[EditorBrowsableAttribute("2")]
[MessageContractAttribute]
internal class SharepointLists.CreateContentTypeRequest : object {
    [MessageBodyMemberAttribute]
public CreateContentTypeRequestBody Body;
    public CreateContentTypeRequest(CreateContentTypeRequestBody Body);
}
[DebuggerStepThroughAttribute]
[GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
[EditorBrowsableAttribute("2")]
[DataContractAttribute]
internal class SharepointLists.CreateContentTypeRequestBody : object {
    [DataMemberAttribute]
public string listName;
    [DataMemberAttribute]
public string displayName;
    [DataMemberAttribute]
public string parentType;
    [DataMemberAttribute]
public XElement fields;
    [DataMemberAttribute]
public XElement contentTypeProperties;
    [DataMemberAttribute]
public string addToView;
    public CreateContentTypeRequestBody(string listName, string displayName, string parentType, XElement fields, XElement contentTypeProperties, string addToView);
}
[DebuggerStepThroughAttribute]
[GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
[EditorBrowsableAttribute("2")]
[MessageContractAttribute]
internal class SharepointLists.CreateContentTypeResponse : object {
    [MessageBodyMemberAttribute]
public CreateContentTypeResponseBody Body;
    public CreateContentTypeResponse(CreateContentTypeResponseBody Body);
}
[DebuggerStepThroughAttribute]
[GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
[EditorBrowsableAttribute("2")]
[DataContractAttribute]
internal class SharepointLists.CreateContentTypeResponseBody : object {
    [DataMemberAttribute]
public string CreateContentTypeResult;
    public CreateContentTypeResponseBody(string CreateContentTypeResult);
}
[DebuggerStepThroughAttribute]
[GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
[EditorBrowsableAttribute("2")]
[MessageContractAttribute]
internal class SharepointLists.DeleteAttachmentRequest : object {
    [MessageBodyMemberAttribute]
public DeleteAttachmentRequestBody Body;
    public DeleteAttachmentRequest(DeleteAttachmentRequestBody Body);
}
[DebuggerStepThroughAttribute]
[GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
[EditorBrowsableAttribute("2")]
[DataContractAttribute]
internal class SharepointLists.DeleteAttachmentRequestBody : object {
    [DataMemberAttribute]
public string listName;
    [DataMemberAttribute]
public string listItemID;
    [DataMemberAttribute]
public string url;
    public DeleteAttachmentRequestBody(string listName, string listItemID, string url);
}
[DebuggerStepThroughAttribute]
[GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
[EditorBrowsableAttribute("2")]
[MessageContractAttribute]
internal class SharepointLists.DeleteAttachmentResponse : object {
    [MessageBodyMemberAttribute]
public DeleteAttachmentResponseBody Body;
    public DeleteAttachmentResponse(DeleteAttachmentResponseBody Body);
}
[DebuggerStepThroughAttribute]
[GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
[EditorBrowsableAttribute("2")]
[DataContractAttribute]
internal class SharepointLists.DeleteAttachmentResponseBody : object {
}
[DebuggerStepThroughAttribute]
[GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
[EditorBrowsableAttribute("2")]
[MessageContractAttribute]
internal class SharepointLists.DeleteContentTypeRequest : object {
    [MessageBodyMemberAttribute]
public DeleteContentTypeRequestBody Body;
    public DeleteContentTypeRequest(DeleteContentTypeRequestBody Body);
}
[DebuggerStepThroughAttribute]
[GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
[EditorBrowsableAttribute("2")]
[DataContractAttribute]
internal class SharepointLists.DeleteContentTypeRequestBody : object {
    [DataMemberAttribute]
public string listName;
    [DataMemberAttribute]
public string contentTypeId;
    public DeleteContentTypeRequestBody(string listName, string contentTypeId);
}
[DebuggerStepThroughAttribute]
[GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
[EditorBrowsableAttribute("2")]
[MessageContractAttribute]
internal class SharepointLists.DeleteContentTypeResponse : object {
    [MessageBodyMemberAttribute]
public DeleteContentTypeResponseBody Body;
    public DeleteContentTypeResponse(DeleteContentTypeResponseBody Body);
}
[DebuggerStepThroughAttribute]
[GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
[EditorBrowsableAttribute("2")]
[DataContractAttribute]
internal class SharepointLists.DeleteContentTypeResponseBody : object {
    [DataMemberAttribute]
public XElement DeleteContentTypeResult;
    public DeleteContentTypeResponseBody(XElement DeleteContentTypeResult);
}
[DebuggerStepThroughAttribute]
[GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
[EditorBrowsableAttribute("2")]
[MessageContractAttribute]
internal class SharepointLists.DeleteContentTypeXmlDocumentRequest : object {
    [MessageBodyMemberAttribute]
public DeleteContentTypeXmlDocumentRequestBody Body;
    public DeleteContentTypeXmlDocumentRequest(DeleteContentTypeXmlDocumentRequestBody Body);
}
[DebuggerStepThroughAttribute]
[GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
[EditorBrowsableAttribute("2")]
[DataContractAttribute]
internal class SharepointLists.DeleteContentTypeXmlDocumentRequestBody : object {
    [DataMemberAttribute]
public string listName;
    [DataMemberAttribute]
public string contentTypeId;
    [DataMemberAttribute]
public string documentUri;
    public DeleteContentTypeXmlDocumentRequestBody(string listName, string contentTypeId, string documentUri);
}
[DebuggerStepThroughAttribute]
[GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
[EditorBrowsableAttribute("2")]
[MessageContractAttribute]
internal class SharepointLists.DeleteContentTypeXmlDocumentResponse : object {
    [MessageBodyMemberAttribute]
public DeleteContentTypeXmlDocumentResponseBody Body;
    public DeleteContentTypeXmlDocumentResponse(DeleteContentTypeXmlDocumentResponseBody Body);
}
[DebuggerStepThroughAttribute]
[GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
[EditorBrowsableAttribute("2")]
[DataContractAttribute]
internal class SharepointLists.DeleteContentTypeXmlDocumentResponseBody : object {
    [DataMemberAttribute]
public XElement DeleteContentTypeXmlDocumentResult;
    public DeleteContentTypeXmlDocumentResponseBody(XElement DeleteContentTypeXmlDocumentResult);
}
[DebuggerStepThroughAttribute]
[GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
[EditorBrowsableAttribute("2")]
[MessageContractAttribute]
internal class SharepointLists.DeleteListRequest : object {
    [MessageBodyMemberAttribute]
public DeleteListRequestBody Body;
    public DeleteListRequest(DeleteListRequestBody Body);
}
[DebuggerStepThroughAttribute]
[GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
[EditorBrowsableAttribute("2")]
[DataContractAttribute]
internal class SharepointLists.DeleteListRequestBody : object {
    [DataMemberAttribute]
public string listName;
    public DeleteListRequestBody(string listName);
}
[DebuggerStepThroughAttribute]
[GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
[EditorBrowsableAttribute("2")]
[MessageContractAttribute]
internal class SharepointLists.DeleteListResponse : object {
    [MessageBodyMemberAttribute]
public DeleteListResponseBody Body;
    public DeleteListResponse(DeleteListResponseBody Body);
}
[DebuggerStepThroughAttribute]
[GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
[EditorBrowsableAttribute("2")]
[DataContractAttribute]
internal class SharepointLists.DeleteListResponseBody : object {
}
[DebuggerStepThroughAttribute]
[GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
[EditorBrowsableAttribute("2")]
[MessageContractAttribute]
internal class SharepointLists.GetAttachmentCollectionRequest : object {
    [MessageBodyMemberAttribute]
public GetAttachmentCollectionRequestBody Body;
    public GetAttachmentCollectionRequest(GetAttachmentCollectionRequestBody Body);
}
[DebuggerStepThroughAttribute]
[GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
[EditorBrowsableAttribute("2")]
[DataContractAttribute]
internal class SharepointLists.GetAttachmentCollectionRequestBody : object {
    [DataMemberAttribute]
public string listName;
    [DataMemberAttribute]
public string listItemID;
    public GetAttachmentCollectionRequestBody(string listName, string listItemID);
}
[DebuggerStepThroughAttribute]
[GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
[EditorBrowsableAttribute("2")]
[MessageContractAttribute]
internal class SharepointLists.GetAttachmentCollectionResponse : object {
    [MessageBodyMemberAttribute]
public GetAttachmentCollectionResponseBody Body;
    public GetAttachmentCollectionResponse(GetAttachmentCollectionResponseBody Body);
}
[DebuggerStepThroughAttribute]
[GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
[EditorBrowsableAttribute("2")]
[DataContractAttribute]
internal class SharepointLists.GetAttachmentCollectionResponseBody : object {
    [DataMemberAttribute]
public XElement GetAttachmentCollectionResult;
    public GetAttachmentCollectionResponseBody(XElement GetAttachmentCollectionResult);
}
[DebuggerStepThroughAttribute]
[GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
[EditorBrowsableAttribute("2")]
[MessageContractAttribute]
internal class SharepointLists.GetListAndViewRequest : object {
    [MessageBodyMemberAttribute]
public GetListAndViewRequestBody Body;
    public GetListAndViewRequest(GetListAndViewRequestBody Body);
}
[DebuggerStepThroughAttribute]
[GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
[EditorBrowsableAttribute("2")]
[DataContractAttribute]
internal class SharepointLists.GetListAndViewRequestBody : object {
    [DataMemberAttribute]
public string listName;
    [DataMemberAttribute]
public string viewName;
    public GetListAndViewRequestBody(string listName, string viewName);
}
[DebuggerStepThroughAttribute]
[GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
[EditorBrowsableAttribute("2")]
[MessageContractAttribute]
internal class SharepointLists.GetListAndViewResponse : object {
    [MessageBodyMemberAttribute]
public GetListAndViewResponseBody Body;
    public GetListAndViewResponse(GetListAndViewResponseBody Body);
}
[DebuggerStepThroughAttribute]
[GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
[EditorBrowsableAttribute("2")]
[DataContractAttribute]
internal class SharepointLists.GetListAndViewResponseBody : object {
    [DataMemberAttribute]
public XElement GetListAndViewResult;
    public GetListAndViewResponseBody(XElement GetListAndViewResult);
}
[DebuggerStepThroughAttribute]
[GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
[EditorBrowsableAttribute("2")]
[MessageContractAttribute]
internal class SharepointLists.GetListCollectionRequest : object {
    [MessageBodyMemberAttribute]
public GetListCollectionRequestBody Body;
    public GetListCollectionRequest(GetListCollectionRequestBody Body);
}
[DebuggerStepThroughAttribute]
[GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
[EditorBrowsableAttribute("2")]
[DataContractAttribute]
internal class SharepointLists.GetListCollectionRequestBody : object {
}
[DebuggerStepThroughAttribute]
[GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
[EditorBrowsableAttribute("2")]
[MessageContractAttribute]
internal class SharepointLists.GetListCollectionResponse : object {
    [MessageBodyMemberAttribute]
public GetListCollectionResponseBody Body;
    public GetListCollectionResponse(GetListCollectionResponseBody Body);
}
[DebuggerStepThroughAttribute]
[GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
[EditorBrowsableAttribute("2")]
[DataContractAttribute]
internal class SharepointLists.GetListCollectionResponseBody : object {
    [DataMemberAttribute]
public XElement GetListCollectionResult;
    public GetListCollectionResponseBody(XElement GetListCollectionResult);
}
[DebuggerStepThroughAttribute]
[GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
[EditorBrowsableAttribute("2")]
[MessageContractAttribute]
internal class SharepointLists.GetListContentTypeRequest : object {
    [MessageBodyMemberAttribute]
public GetListContentTypeRequestBody Body;
    public GetListContentTypeRequest(GetListContentTypeRequestBody Body);
}
[DebuggerStepThroughAttribute]
[GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
[EditorBrowsableAttribute("2")]
[DataContractAttribute]
internal class SharepointLists.GetListContentTypeRequestBody : object {
    [DataMemberAttribute]
public string listName;
    [DataMemberAttribute]
public string contentTypeId;
    public GetListContentTypeRequestBody(string listName, string contentTypeId);
}
[DebuggerStepThroughAttribute]
[GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
[EditorBrowsableAttribute("2")]
[MessageContractAttribute]
internal class SharepointLists.GetListContentTypeResponse : object {
    [MessageBodyMemberAttribute]
public GetListContentTypeResponseBody Body;
    public GetListContentTypeResponse(GetListContentTypeResponseBody Body);
}
[DebuggerStepThroughAttribute]
[GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
[EditorBrowsableAttribute("2")]
[DataContractAttribute]
internal class SharepointLists.GetListContentTypeResponseBody : object {
    [DataMemberAttribute]
public XElement GetListContentTypeResult;
    public GetListContentTypeResponseBody(XElement GetListContentTypeResult);
}
[DebuggerStepThroughAttribute]
[GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
[EditorBrowsableAttribute("2")]
[MessageContractAttribute]
internal class SharepointLists.GetListContentTypesAndPropertiesRequest : object {
    [MessageBodyMemberAttribute]
public GetListContentTypesAndPropertiesRequestBody Body;
    public GetListContentTypesAndPropertiesRequest(GetListContentTypesAndPropertiesRequestBody Body);
}
[DebuggerStepThroughAttribute]
[GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
[EditorBrowsableAttribute("2")]
[DataContractAttribute]
internal class SharepointLists.GetListContentTypesAndPropertiesRequestBody : object {
    [DataMemberAttribute]
public string listName;
    [DataMemberAttribute]
public string contentTypeId;
    [DataMemberAttribute]
public string propertyPrefix;
    [DataMemberAttribute]
public bool includeWebProperties;
    public GetListContentTypesAndPropertiesRequestBody(string listName, string contentTypeId, string propertyPrefix, bool includeWebProperties);
}
[DebuggerStepThroughAttribute]
[GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
[EditorBrowsableAttribute("2")]
[MessageContractAttribute]
internal class SharepointLists.GetListContentTypesAndPropertiesResponse : object {
    [MessageBodyMemberAttribute]
public GetListContentTypesAndPropertiesResponseBody Body;
    public GetListContentTypesAndPropertiesResponse(GetListContentTypesAndPropertiesResponseBody Body);
}
[DebuggerStepThroughAttribute]
[GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
[EditorBrowsableAttribute("2")]
[DataContractAttribute]
internal class SharepointLists.GetListContentTypesAndPropertiesResponseBody : object {
    [DataMemberAttribute]
public XElement GetListContentTypesAndPropertiesResult;
    public GetListContentTypesAndPropertiesResponseBody(XElement GetListContentTypesAndPropertiesResult);
}
[DebuggerStepThroughAttribute]
[GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
[EditorBrowsableAttribute("2")]
[MessageContractAttribute]
internal class SharepointLists.GetListContentTypesRequest : object {
    [MessageBodyMemberAttribute]
public GetListContentTypesRequestBody Body;
    public GetListContentTypesRequest(GetListContentTypesRequestBody Body);
}
[DebuggerStepThroughAttribute]
[GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
[EditorBrowsableAttribute("2")]
[DataContractAttribute]
internal class SharepointLists.GetListContentTypesRequestBody : object {
    [DataMemberAttribute]
public string listName;
    [DataMemberAttribute]
public string contentTypeId;
    public GetListContentTypesRequestBody(string listName, string contentTypeId);
}
[DebuggerStepThroughAttribute]
[GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
[EditorBrowsableAttribute("2")]
[MessageContractAttribute]
internal class SharepointLists.GetListContentTypesResponse : object {
    [MessageBodyMemberAttribute]
public GetListContentTypesResponseBody Body;
    public GetListContentTypesResponse(GetListContentTypesResponseBody Body);
}
[DebuggerStepThroughAttribute]
[GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
[EditorBrowsableAttribute("2")]
[DataContractAttribute]
internal class SharepointLists.GetListContentTypesResponseBody : object {
    [DataMemberAttribute]
public XElement GetListContentTypesResult;
    public GetListContentTypesResponseBody(XElement GetListContentTypesResult);
}
[DebuggerStepThroughAttribute]
[GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
[EditorBrowsableAttribute("2")]
[MessageContractAttribute]
internal class SharepointLists.GetListItemChangesRequest : object {
    [MessageBodyMemberAttribute]
public GetListItemChangesRequestBody Body;
    public GetListItemChangesRequest(GetListItemChangesRequestBody Body);
}
[DebuggerStepThroughAttribute]
[GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
[EditorBrowsableAttribute("2")]
[DataContractAttribute]
internal class SharepointLists.GetListItemChangesRequestBody : object {
    [DataMemberAttribute]
public string listName;
    [DataMemberAttribute]
public XElement viewFields;
    [DataMemberAttribute]
public string since;
    [DataMemberAttribute]
public XElement contains;
    public GetListItemChangesRequestBody(string listName, XElement viewFields, string since, XElement contains);
}
[DebuggerStepThroughAttribute]
[GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
[EditorBrowsableAttribute("2")]
[MessageContractAttribute]
internal class SharepointLists.GetListItemChangesResponse : object {
    [MessageBodyMemberAttribute]
public GetListItemChangesResponseBody Body;
    public GetListItemChangesResponse(GetListItemChangesResponseBody Body);
}
[DebuggerStepThroughAttribute]
[GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
[EditorBrowsableAttribute("2")]
[DataContractAttribute]
internal class SharepointLists.GetListItemChangesResponseBody : object {
    [DataMemberAttribute]
public XElement GetListItemChangesResult;
    public GetListItemChangesResponseBody(XElement GetListItemChangesResult);
}
[DebuggerStepThroughAttribute]
[GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
[EditorBrowsableAttribute("2")]
[MessageContractAttribute]
internal class SharepointLists.GetListItemChangesSinceTokenRequest : object {
    [MessageBodyMemberAttribute]
public GetListItemChangesSinceTokenRequestBody Body;
    public GetListItemChangesSinceTokenRequest(GetListItemChangesSinceTokenRequestBody Body);
}
[DebuggerStepThroughAttribute]
[GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
[EditorBrowsableAttribute("2")]
[DataContractAttribute]
internal class SharepointLists.GetListItemChangesSinceTokenRequestBody : object {
    [DataMemberAttribute]
public string listName;
    [DataMemberAttribute]
public string viewName;
    [DataMemberAttribute]
public XElement query;
    [DataMemberAttribute]
public XElement viewFields;
    [DataMemberAttribute]
public string rowLimit;
    [DataMemberAttribute]
public XElement queryOptions;
    [DataMemberAttribute]
public string changeToken;
    [DataMemberAttribute]
public XElement contains;
    public GetListItemChangesSinceTokenRequestBody(string listName, string viewName, XElement query, XElement viewFields, string rowLimit, XElement queryOptions, string changeToken, XElement contains);
}
[DebuggerStepThroughAttribute]
[GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
[EditorBrowsableAttribute("2")]
[MessageContractAttribute]
internal class SharepointLists.GetListItemChangesSinceTokenResponse : object {
    [MessageBodyMemberAttribute]
public GetListItemChangesSinceTokenResponseBody Body;
    public GetListItemChangesSinceTokenResponse(GetListItemChangesSinceTokenResponseBody Body);
}
[DebuggerStepThroughAttribute]
[GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
[EditorBrowsableAttribute("2")]
[DataContractAttribute]
internal class SharepointLists.GetListItemChangesSinceTokenResponseBody : object {
    [DataMemberAttribute]
public XElement GetListItemChangesSinceTokenResult;
    public GetListItemChangesSinceTokenResponseBody(XElement GetListItemChangesSinceTokenResult);
}
[DebuggerStepThroughAttribute]
[GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
[EditorBrowsableAttribute("2")]
[MessageContractAttribute]
internal class SharepointLists.GetListItemChangesWithKnowledgeRequest : object {
    [MessageBodyMemberAttribute]
public GetListItemChangesWithKnowledgeRequestBody Body;
    public GetListItemChangesWithKnowledgeRequest(GetListItemChangesWithKnowledgeRequestBody Body);
}
[DebuggerStepThroughAttribute]
[GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
[EditorBrowsableAttribute("2")]
[DataContractAttribute]
internal class SharepointLists.GetListItemChangesWithKnowledgeRequestBody : object {
    [DataMemberAttribute]
public string listName;
    [DataMemberAttribute]
public string viewName;
    [DataMemberAttribute]
public XElement query;
    [DataMemberAttribute]
public XElement viewFields;
    [DataMemberAttribute]
public string rowLimit;
    [DataMemberAttribute]
public XElement queryOptions;
    [DataMemberAttribute]
public string syncScope;
    [DataMemberAttribute]
public XElement knowledge;
    [DataMemberAttribute]
public XElement contains;
    public GetListItemChangesWithKnowledgeRequestBody(string listName, string viewName, XElement query, XElement viewFields, string rowLimit, XElement queryOptions, string syncScope, XElement knowledge, XElement contains);
}
[DebuggerStepThroughAttribute]
[GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
[EditorBrowsableAttribute("2")]
[MessageContractAttribute]
internal class SharepointLists.GetListItemChangesWithKnowledgeResponse : object {
    [MessageBodyMemberAttribute]
public GetListItemChangesWithKnowledgeResponseBody Body;
    public GetListItemChangesWithKnowledgeResponse(GetListItemChangesWithKnowledgeResponseBody Body);
}
[DebuggerStepThroughAttribute]
[GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
[EditorBrowsableAttribute("2")]
[DataContractAttribute]
internal class SharepointLists.GetListItemChangesWithKnowledgeResponseBody : object {
    [DataMemberAttribute]
public XElement GetListItemChangesWithKnowledgeResult;
    public GetListItemChangesWithKnowledgeResponseBody(XElement GetListItemChangesWithKnowledgeResult);
}
[DebuggerStepThroughAttribute]
[GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
[EditorBrowsableAttribute("2")]
[MessageContractAttribute]
internal class SharepointLists.GetListItemsRequest : object {
    [MessageBodyMemberAttribute]
public GetListItemsRequestBody Body;
    public GetListItemsRequest(GetListItemsRequestBody Body);
}
[DebuggerStepThroughAttribute]
[GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
[EditorBrowsableAttribute("2")]
[DataContractAttribute]
internal class SharepointLists.GetListItemsRequestBody : object {
    [DataMemberAttribute]
public string listName;
    [DataMemberAttribute]
public string viewName;
    [DataMemberAttribute]
public XElement query;
    [DataMemberAttribute]
public XElement viewFields;
    [DataMemberAttribute]
public string rowLimit;
    [DataMemberAttribute]
public XElement queryOptions;
    [DataMemberAttribute]
public string webID;
    public GetListItemsRequestBody(string listName, string viewName, XElement query, XElement viewFields, string rowLimit, XElement queryOptions, string webID);
}
[DebuggerStepThroughAttribute]
[GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
[EditorBrowsableAttribute("2")]
[MessageContractAttribute]
internal class SharepointLists.GetListItemsResponse : object {
    [MessageBodyMemberAttribute]
public GetListItemsResponseBody Body;
    public GetListItemsResponse(GetListItemsResponseBody Body);
}
[DebuggerStepThroughAttribute]
[GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
[EditorBrowsableAttribute("2")]
[DataContractAttribute]
internal class SharepointLists.GetListItemsResponseBody : object {
    [DataMemberAttribute]
public XElement GetListItemsResult;
    public GetListItemsResponseBody(XElement GetListItemsResult);
}
[DebuggerStepThroughAttribute]
[GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
[EditorBrowsableAttribute("2")]
[MessageContractAttribute]
internal class SharepointLists.GetListRequest : object {
    [MessageBodyMemberAttribute]
public GetListRequestBody Body;
    public GetListRequest(GetListRequestBody Body);
}
[DebuggerStepThroughAttribute]
[GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
[EditorBrowsableAttribute("2")]
[DataContractAttribute]
internal class SharepointLists.GetListRequestBody : object {
    [DataMemberAttribute]
public string listName;
    public GetListRequestBody(string listName);
}
[DebuggerStepThroughAttribute]
[GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
[EditorBrowsableAttribute("2")]
[MessageContractAttribute]
internal class SharepointLists.GetListResponse : object {
    [MessageBodyMemberAttribute]
public GetListResponseBody Body;
    public GetListResponse(GetListResponseBody Body);
}
[DebuggerStepThroughAttribute]
[GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
[EditorBrowsableAttribute("2")]
[DataContractAttribute]
internal class SharepointLists.GetListResponseBody : object {
    [DataMemberAttribute]
public XElement GetListResult;
    public GetListResponseBody(XElement GetListResult);
}
[DebuggerStepThroughAttribute]
[GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
[EditorBrowsableAttribute("2")]
[MessageContractAttribute]
internal class SharepointLists.GetVersionCollectionRequest : object {
    [MessageBodyMemberAttribute]
public GetVersionCollectionRequestBody Body;
    public GetVersionCollectionRequest(GetVersionCollectionRequestBody Body);
}
[DebuggerStepThroughAttribute]
[GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
[EditorBrowsableAttribute("2")]
[DataContractAttribute]
internal class SharepointLists.GetVersionCollectionRequestBody : object {
    [DataMemberAttribute]
public string strlistID;
    [DataMemberAttribute]
public string strlistItemID;
    [DataMemberAttribute]
public string strFieldName;
    public GetVersionCollectionRequestBody(string strlistID, string strlistItemID, string strFieldName);
}
[DebuggerStepThroughAttribute]
[GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
[EditorBrowsableAttribute("2")]
[MessageContractAttribute]
internal class SharepointLists.GetVersionCollectionResponse : object {
    [MessageBodyMemberAttribute]
public GetVersionCollectionResponseBody Body;
    public GetVersionCollectionResponse(GetVersionCollectionResponseBody Body);
}
[DebuggerStepThroughAttribute]
[GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
[EditorBrowsableAttribute("2")]
[DataContractAttribute]
internal class SharepointLists.GetVersionCollectionResponseBody : object {
    [DataMemberAttribute]
public XElement GetVersionCollectionResult;
    public GetVersionCollectionResponseBody(XElement GetVersionCollectionResult);
}
[GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
[ServiceContractAttribute]
internal interface SharepointLists.ListsSoap {
    [OperationContractAttribute]
public abstract virtual GetListResponse GetList(GetListRequest request);
    [OperationContractAttribute]
public abstract virtual GetListAndViewResponse GetListAndView(GetListAndViewRequest request);
    [OperationContractAttribute]
public abstract virtual DeleteListResponse DeleteList(DeleteListRequest request);
    [OperationContractAttribute]
public abstract virtual AddListResponse AddList(AddListRequest request);
    [OperationContractAttribute]
public abstract virtual AddListFromFeatureResponse AddListFromFeature(AddListFromFeatureRequest request);
    [OperationContractAttribute]
public abstract virtual UpdateListResponse UpdateList(UpdateListRequest request);
    [OperationContractAttribute]
public abstract virtual GetListCollectionResponse GetListCollection(GetListCollectionRequest request);
    [OperationContractAttribute]
public abstract virtual GetListItemsResponse GetListItems(GetListItemsRequest request);
    [OperationContractAttribute]
public abstract virtual GetListItemChangesResponse GetListItemChanges(GetListItemChangesRequest request);
    [OperationContractAttribute]
public abstract virtual GetListItemChangesWithKnowledgeResponse GetListItemChangesWithKnowledge(GetListItemChangesWithKnowledgeRequest request);
    [OperationContractAttribute]
public abstract virtual GetListItemChangesSinceTokenResponse GetListItemChangesSinceToken(GetListItemChangesSinceTokenRequest request);
    [OperationContractAttribute]
public abstract virtual UpdateListItemsResponse UpdateListItems(UpdateListItemsRequest request);
    [OperationContractAttribute]
public abstract virtual UpdateListItemsWithKnowledgeResponse UpdateListItemsWithKnowledge(UpdateListItemsWithKnowledgeRequest request);
    [OperationContractAttribute]
public abstract virtual AddDiscussionBoardItemResponse AddDiscussionBoardItem(AddDiscussionBoardItemRequest request);
    [OperationContractAttribute]
public abstract virtual AddWikiPageResponse AddWikiPage(AddWikiPageRequest request);
    [OperationContractAttribute]
public abstract virtual GetVersionCollectionResponse GetVersionCollection(GetVersionCollectionRequest request);
    [OperationContractAttribute]
public abstract virtual AddAttachmentResponse AddAttachment(AddAttachmentRequest request);
    [OperationContractAttribute]
public abstract virtual GetAttachmentCollectionResponse GetAttachmentCollection(GetAttachmentCollectionRequest request);
    [OperationContractAttribute]
public abstract virtual DeleteAttachmentResponse DeleteAttachment(DeleteAttachmentRequest request);
    [OperationContractAttribute]
public abstract virtual CheckOutFileResponse CheckOutFile(CheckOutFileRequest request);
    [OperationContractAttribute]
public abstract virtual UndoCheckOutResponse UndoCheckOut(UndoCheckOutRequest request);
    [OperationContractAttribute]
public abstract virtual CheckInFileResponse CheckInFile(CheckInFileRequest request);
    [OperationContractAttribute]
public abstract virtual GetListContentTypesResponse GetListContentTypes(GetListContentTypesRequest request);
    [OperationContractAttribute]
public abstract virtual GetListContentTypesAndPropertiesResponse GetListContentTypesAndProperties(GetListContentTypesAndPropertiesRequest request);
    [OperationContractAttribute]
public abstract virtual GetListContentTypeResponse GetListContentType(GetListContentTypeRequest request);
    [OperationContractAttribute]
public abstract virtual CreateContentTypeResponse CreateContentType(CreateContentTypeRequest request);
    [OperationContractAttribute]
public abstract virtual UpdateContentTypeResponse UpdateContentType(UpdateContentTypeRequest request);
    [OperationContractAttribute]
public abstract virtual DeleteContentTypeResponse DeleteContentType(DeleteContentTypeRequest request);
    [OperationContractAttribute]
public abstract virtual UpdateContentTypeXmlDocumentResponse UpdateContentTypeXmlDocument(UpdateContentTypeXmlDocumentRequest request);
    [OperationContractAttribute]
public abstract virtual UpdateContentTypesXmlDocumentResponse UpdateContentTypesXmlDocument(UpdateContentTypesXmlDocumentRequest request);
    [OperationContractAttribute]
public abstract virtual DeleteContentTypeXmlDocumentResponse DeleteContentTypeXmlDocument(DeleteContentTypeXmlDocumentRequest request);
    [OperationContractAttribute]
public abstract virtual ApplyContentTypeToListResponse ApplyContentTypeToList(ApplyContentTypeToListRequest request);
}
[GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
internal interface SharepointLists.ListsSoapChannel {
}
[DebuggerStepThroughAttribute]
[GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
internal class SharepointLists.ListsSoapClient : ClientBase`1<ListsSoap> {
    public ListsSoapClient(string endpointConfigurationName);
    public ListsSoapClient(string endpointConfigurationName, string remoteAddress);
    public ListsSoapClient(string endpointConfigurationName, EndpointAddress remoteAddress);
    public ListsSoapClient(Binding binding, EndpointAddress remoteAddress);
    [EditorBrowsableAttribute("2")]
private sealed virtual override GetListResponse SharepointLists.ListsSoap.GetList(GetListRequest request);
    public XElement GetList(string listName);
    [EditorBrowsableAttribute("2")]
private sealed virtual override GetListAndViewResponse SharepointLists.ListsSoap.GetListAndView(GetListAndViewRequest request);
    public XElement GetListAndView(string listName, string viewName);
    [EditorBrowsableAttribute("2")]
private sealed virtual override DeleteListResponse SharepointLists.ListsSoap.DeleteList(DeleteListRequest request);
    public void DeleteList(string listName);
    [EditorBrowsableAttribute("2")]
private sealed virtual override AddListResponse SharepointLists.ListsSoap.AddList(AddListRequest request);
    public XElement AddList(string listName, string description, int templateID);
    [EditorBrowsableAttribute("2")]
private sealed virtual override AddListFromFeatureResponse SharepointLists.ListsSoap.AddListFromFeature(AddListFromFeatureRequest request);
    public XElement AddListFromFeature(string listName, string description, Guid featureID, int templateID);
    [EditorBrowsableAttribute("2")]
private sealed virtual override UpdateListResponse SharepointLists.ListsSoap.UpdateList(UpdateListRequest request);
    public XElement UpdateList(string listName, XElement listProperties, XElement newFields, XElement updateFields, XElement deleteFields, string listVersion);
    [EditorBrowsableAttribute("2")]
private sealed virtual override GetListCollectionResponse SharepointLists.ListsSoap.GetListCollection(GetListCollectionRequest request);
    public XElement GetListCollection();
    [EditorBrowsableAttribute("2")]
private sealed virtual override GetListItemsResponse SharepointLists.ListsSoap.GetListItems(GetListItemsRequest request);
    public XElement GetListItems(string listName, string viewName, XElement query, XElement viewFields, string rowLimit, XElement queryOptions, string webID);
    [EditorBrowsableAttribute("2")]
private sealed virtual override GetListItemChangesResponse SharepointLists.ListsSoap.GetListItemChanges(GetListItemChangesRequest request);
    public XElement GetListItemChanges(string listName, XElement viewFields, string since, XElement contains);
    [EditorBrowsableAttribute("2")]
private sealed virtual override GetListItemChangesWithKnowledgeResponse SharepointLists.ListsSoap.GetListItemChangesWithKnowledge(GetListItemChangesWithKnowledgeRequest request);
    public XElement GetListItemChangesWithKnowledge(string listName, string viewName, XElement query, XElement viewFields, string rowLimit, XElement queryOptions, string syncScope, XElement knowledge, XElement contains);
    [EditorBrowsableAttribute("2")]
private sealed virtual override GetListItemChangesSinceTokenResponse SharepointLists.ListsSoap.GetListItemChangesSinceToken(GetListItemChangesSinceTokenRequest request);
    public XElement GetListItemChangesSinceToken(string listName, string viewName, XElement query, XElement viewFields, string rowLimit, XElement queryOptions, string changeToken, XElement contains);
    [EditorBrowsableAttribute("2")]
private sealed virtual override UpdateListItemsResponse SharepointLists.ListsSoap.UpdateListItems(UpdateListItemsRequest request);
    public XElement UpdateListItems(string listName, XElement updates);
    [EditorBrowsableAttribute("2")]
private sealed virtual override UpdateListItemsWithKnowledgeResponse SharepointLists.ListsSoap.UpdateListItemsWithKnowledge(UpdateListItemsWithKnowledgeRequest request);
    public XElement UpdateListItemsWithKnowledge(string listName, XElement updates, string syncScope, XElement knowledge);
    [EditorBrowsableAttribute("2")]
private sealed virtual override AddDiscussionBoardItemResponse SharepointLists.ListsSoap.AddDiscussionBoardItem(AddDiscussionBoardItemRequest request);
    public XElement AddDiscussionBoardItem(string listName, Byte[] message);
    [EditorBrowsableAttribute("2")]
private sealed virtual override AddWikiPageResponse SharepointLists.ListsSoap.AddWikiPage(AddWikiPageRequest request);
    public XElement AddWikiPage(string strListName, string listRelPageUrl, string wikiContent);
    [EditorBrowsableAttribute("2")]
private sealed virtual override GetVersionCollectionResponse SharepointLists.ListsSoap.GetVersionCollection(GetVersionCollectionRequest request);
    public XElement GetVersionCollection(string strlistID, string strlistItemID, string strFieldName);
    [EditorBrowsableAttribute("2")]
private sealed virtual override AddAttachmentResponse SharepointLists.ListsSoap.AddAttachment(AddAttachmentRequest request);
    public string AddAttachment(string listName, string listItemID, string fileName, Byte[] attachment);
    [EditorBrowsableAttribute("2")]
private sealed virtual override GetAttachmentCollectionResponse SharepointLists.ListsSoap.GetAttachmentCollection(GetAttachmentCollectionRequest request);
    public XElement GetAttachmentCollection(string listName, string listItemID);
    [EditorBrowsableAttribute("2")]
private sealed virtual override DeleteAttachmentResponse SharepointLists.ListsSoap.DeleteAttachment(DeleteAttachmentRequest request);
    public void DeleteAttachment(string listName, string listItemID, string url);
    [EditorBrowsableAttribute("2")]
private sealed virtual override CheckOutFileResponse SharepointLists.ListsSoap.CheckOutFile(CheckOutFileRequest request);
    public bool CheckOutFile(string pageUrl, string checkoutToLocal, string lastmodified);
    [EditorBrowsableAttribute("2")]
private sealed virtual override UndoCheckOutResponse SharepointLists.ListsSoap.UndoCheckOut(UndoCheckOutRequest request);
    public bool UndoCheckOut(string pageUrl);
    [EditorBrowsableAttribute("2")]
private sealed virtual override CheckInFileResponse SharepointLists.ListsSoap.CheckInFile(CheckInFileRequest request);
    public bool CheckInFile(string pageUrl, string comment, string CheckinType);
    [EditorBrowsableAttribute("2")]
private sealed virtual override GetListContentTypesResponse SharepointLists.ListsSoap.GetListContentTypes(GetListContentTypesRequest request);
    public XElement GetListContentTypes(string listName, string contentTypeId);
    [EditorBrowsableAttribute("2")]
private sealed virtual override GetListContentTypesAndPropertiesResponse SharepointLists.ListsSoap.GetListContentTypesAndProperties(GetListContentTypesAndPropertiesRequest request);
    public XElement GetListContentTypesAndProperties(string listName, string contentTypeId, string propertyPrefix, bool includeWebProperties);
    [EditorBrowsableAttribute("2")]
private sealed virtual override GetListContentTypeResponse SharepointLists.ListsSoap.GetListContentType(GetListContentTypeRequest request);
    public XElement GetListContentType(string listName, string contentTypeId);
    [EditorBrowsableAttribute("2")]
private sealed virtual override CreateContentTypeResponse SharepointLists.ListsSoap.CreateContentType(CreateContentTypeRequest request);
    public string CreateContentType(string listName, string displayName, string parentType, XElement fields, XElement contentTypeProperties, string addToView);
    [EditorBrowsableAttribute("2")]
private sealed virtual override UpdateContentTypeResponse SharepointLists.ListsSoap.UpdateContentType(UpdateContentTypeRequest request);
    public XElement UpdateContentType(string listName, string contentTypeId, XElement contentTypeProperties, XElement newFields, XElement updateFields, XElement deleteFields, string addToView);
    [EditorBrowsableAttribute("2")]
private sealed virtual override DeleteContentTypeResponse SharepointLists.ListsSoap.DeleteContentType(DeleteContentTypeRequest request);
    public XElement DeleteContentType(string listName, string contentTypeId);
    [EditorBrowsableAttribute("2")]
private sealed virtual override UpdateContentTypeXmlDocumentResponse SharepointLists.ListsSoap.UpdateContentTypeXmlDocument(UpdateContentTypeXmlDocumentRequest request);
    public XElement UpdateContentTypeXmlDocument(string listName, string contentTypeId, XElement newDocument);
    [EditorBrowsableAttribute("2")]
private sealed virtual override UpdateContentTypesXmlDocumentResponse SharepointLists.ListsSoap.UpdateContentTypesXmlDocument(UpdateContentTypesXmlDocumentRequest request);
    public XElement UpdateContentTypesXmlDocument(string listName, XElement newDocument);
    [EditorBrowsableAttribute("2")]
private sealed virtual override DeleteContentTypeXmlDocumentResponse SharepointLists.ListsSoap.DeleteContentTypeXmlDocument(DeleteContentTypeXmlDocumentRequest request);
    public XElement DeleteContentTypeXmlDocument(string listName, string contentTypeId, string documentUri);
    [EditorBrowsableAttribute("2")]
private sealed virtual override ApplyContentTypeToListResponse SharepointLists.ListsSoap.ApplyContentTypeToList(ApplyContentTypeToListRequest request);
    public XElement ApplyContentTypeToList(string webUrl, string contentTypeId, string listName);
}
[DebuggerStepThroughAttribute]
[GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
[EditorBrowsableAttribute("2")]
[MessageContractAttribute]
internal class SharepointLists.UndoCheckOutRequest : object {
    [MessageBodyMemberAttribute]
public UndoCheckOutRequestBody Body;
    public UndoCheckOutRequest(UndoCheckOutRequestBody Body);
}
[DebuggerStepThroughAttribute]
[GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
[EditorBrowsableAttribute("2")]
[DataContractAttribute]
internal class SharepointLists.UndoCheckOutRequestBody : object {
    [DataMemberAttribute]
public string pageUrl;
    public UndoCheckOutRequestBody(string pageUrl);
}
[DebuggerStepThroughAttribute]
[GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
[EditorBrowsableAttribute("2")]
[MessageContractAttribute]
internal class SharepointLists.UndoCheckOutResponse : object {
    [MessageBodyMemberAttribute]
public UndoCheckOutResponseBody Body;
    public UndoCheckOutResponse(UndoCheckOutResponseBody Body);
}
[DebuggerStepThroughAttribute]
[GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
[EditorBrowsableAttribute("2")]
[DataContractAttribute]
internal class SharepointLists.UndoCheckOutResponseBody : object {
    [DataMemberAttribute]
public bool UndoCheckOutResult;
    public UndoCheckOutResponseBody(bool UndoCheckOutResult);
}
[DebuggerStepThroughAttribute]
[GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
[EditorBrowsableAttribute("2")]
[MessageContractAttribute]
internal class SharepointLists.UpdateContentTypeRequest : object {
    [MessageBodyMemberAttribute]
public UpdateContentTypeRequestBody Body;
    public UpdateContentTypeRequest(UpdateContentTypeRequestBody Body);
}
[DebuggerStepThroughAttribute]
[GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
[EditorBrowsableAttribute("2")]
[DataContractAttribute]
internal class SharepointLists.UpdateContentTypeRequestBody : object {
    [DataMemberAttribute]
public string listName;
    [DataMemberAttribute]
public string contentTypeId;
    [DataMemberAttribute]
public XElement contentTypeProperties;
    [DataMemberAttribute]
public XElement newFields;
    [DataMemberAttribute]
public XElement updateFields;
    [DataMemberAttribute]
public XElement deleteFields;
    [DataMemberAttribute]
public string addToView;
    public UpdateContentTypeRequestBody(string listName, string contentTypeId, XElement contentTypeProperties, XElement newFields, XElement updateFields, XElement deleteFields, string addToView);
}
[DebuggerStepThroughAttribute]
[GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
[EditorBrowsableAttribute("2")]
[MessageContractAttribute]
internal class SharepointLists.UpdateContentTypeResponse : object {
    [MessageBodyMemberAttribute]
public UpdateContentTypeResponseBody Body;
    public UpdateContentTypeResponse(UpdateContentTypeResponseBody Body);
}
[DebuggerStepThroughAttribute]
[GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
[EditorBrowsableAttribute("2")]
[DataContractAttribute]
internal class SharepointLists.UpdateContentTypeResponseBody : object {
    [DataMemberAttribute]
public XElement UpdateContentTypeResult;
    public UpdateContentTypeResponseBody(XElement UpdateContentTypeResult);
}
[DebuggerStepThroughAttribute]
[GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
[EditorBrowsableAttribute("2")]
[MessageContractAttribute]
internal class SharepointLists.UpdateContentTypesXmlDocumentRequest : object {
    [MessageBodyMemberAttribute]
public UpdateContentTypesXmlDocumentRequestBody Body;
    public UpdateContentTypesXmlDocumentRequest(UpdateContentTypesXmlDocumentRequestBody Body);
}
[DebuggerStepThroughAttribute]
[GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
[EditorBrowsableAttribute("2")]
[DataContractAttribute]
internal class SharepointLists.UpdateContentTypesXmlDocumentRequestBody : object {
    [DataMemberAttribute]
public string listName;
    [DataMemberAttribute]
public XElement newDocument;
    public UpdateContentTypesXmlDocumentRequestBody(string listName, XElement newDocument);
}
[DebuggerStepThroughAttribute]
[GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
[EditorBrowsableAttribute("2")]
[MessageContractAttribute]
internal class SharepointLists.UpdateContentTypesXmlDocumentResponse : object {
    [MessageBodyMemberAttribute]
public UpdateContentTypesXmlDocumentResponseBody Body;
    public UpdateContentTypesXmlDocumentResponse(UpdateContentTypesXmlDocumentResponseBody Body);
}
[DebuggerStepThroughAttribute]
[GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
[EditorBrowsableAttribute("2")]
[DataContractAttribute]
internal class SharepointLists.UpdateContentTypesXmlDocumentResponseBody : object {
    [DataMemberAttribute]
public XElement UpdateContentTypesXmlDocumentResult;
    public UpdateContentTypesXmlDocumentResponseBody(XElement UpdateContentTypesXmlDocumentResult);
}
[DebuggerStepThroughAttribute]
[GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
[EditorBrowsableAttribute("2")]
[MessageContractAttribute]
internal class SharepointLists.UpdateContentTypeXmlDocumentRequest : object {
    [MessageBodyMemberAttribute]
public UpdateContentTypeXmlDocumentRequestBody Body;
    public UpdateContentTypeXmlDocumentRequest(UpdateContentTypeXmlDocumentRequestBody Body);
}
[DebuggerStepThroughAttribute]
[GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
[EditorBrowsableAttribute("2")]
[DataContractAttribute]
internal class SharepointLists.UpdateContentTypeXmlDocumentRequestBody : object {
    [DataMemberAttribute]
public string listName;
    [DataMemberAttribute]
public string contentTypeId;
    [DataMemberAttribute]
public XElement newDocument;
    public UpdateContentTypeXmlDocumentRequestBody(string listName, string contentTypeId, XElement newDocument);
}
[DebuggerStepThroughAttribute]
[GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
[EditorBrowsableAttribute("2")]
[MessageContractAttribute]
internal class SharepointLists.UpdateContentTypeXmlDocumentResponse : object {
    [MessageBodyMemberAttribute]
public UpdateContentTypeXmlDocumentResponseBody Body;
    public UpdateContentTypeXmlDocumentResponse(UpdateContentTypeXmlDocumentResponseBody Body);
}
[DebuggerStepThroughAttribute]
[GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
[EditorBrowsableAttribute("2")]
[DataContractAttribute]
internal class SharepointLists.UpdateContentTypeXmlDocumentResponseBody : object {
    [DataMemberAttribute]
public XElement UpdateContentTypeXmlDocumentResult;
    public UpdateContentTypeXmlDocumentResponseBody(XElement UpdateContentTypeXmlDocumentResult);
}
[DebuggerStepThroughAttribute]
[GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
[EditorBrowsableAttribute("2")]
[MessageContractAttribute]
internal class SharepointLists.UpdateListItemsRequest : object {
    [MessageBodyMemberAttribute]
public UpdateListItemsRequestBody Body;
    public UpdateListItemsRequest(UpdateListItemsRequestBody Body);
}
[DebuggerStepThroughAttribute]
[GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
[EditorBrowsableAttribute("2")]
[DataContractAttribute]
internal class SharepointLists.UpdateListItemsRequestBody : object {
    [DataMemberAttribute]
public string listName;
    [DataMemberAttribute]
public XElement updates;
    public UpdateListItemsRequestBody(string listName, XElement updates);
}
[DebuggerStepThroughAttribute]
[GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
[EditorBrowsableAttribute("2")]
[MessageContractAttribute]
internal class SharepointLists.UpdateListItemsResponse : object {
    [MessageBodyMemberAttribute]
public UpdateListItemsResponseBody Body;
    public UpdateListItemsResponse(UpdateListItemsResponseBody Body);
}
[DebuggerStepThroughAttribute]
[GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
[EditorBrowsableAttribute("2")]
[DataContractAttribute]
internal class SharepointLists.UpdateListItemsResponseBody : object {
    [DataMemberAttribute]
public XElement UpdateListItemsResult;
    public UpdateListItemsResponseBody(XElement UpdateListItemsResult);
}
[DebuggerStepThroughAttribute]
[GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
[EditorBrowsableAttribute("2")]
[MessageContractAttribute]
internal class SharepointLists.UpdateListItemsWithKnowledgeRequest : object {
    [MessageBodyMemberAttribute]
public UpdateListItemsWithKnowledgeRequestBody Body;
    public UpdateListItemsWithKnowledgeRequest(UpdateListItemsWithKnowledgeRequestBody Body);
}
[DebuggerStepThroughAttribute]
[GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
[EditorBrowsableAttribute("2")]
[DataContractAttribute]
internal class SharepointLists.UpdateListItemsWithKnowledgeRequestBody : object {
    [DataMemberAttribute]
public string listName;
    [DataMemberAttribute]
public XElement updates;
    [DataMemberAttribute]
public string syncScope;
    [DataMemberAttribute]
public XElement knowledge;
    public UpdateListItemsWithKnowledgeRequestBody(string listName, XElement updates, string syncScope, XElement knowledge);
}
[DebuggerStepThroughAttribute]
[GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
[EditorBrowsableAttribute("2")]
[MessageContractAttribute]
internal class SharepointLists.UpdateListItemsWithKnowledgeResponse : object {
    [MessageBodyMemberAttribute]
public UpdateListItemsWithKnowledgeResponseBody Body;
    public UpdateListItemsWithKnowledgeResponse(UpdateListItemsWithKnowledgeResponseBody Body);
}
[DebuggerStepThroughAttribute]
[GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
[EditorBrowsableAttribute("2")]
[DataContractAttribute]
internal class SharepointLists.UpdateListItemsWithKnowledgeResponseBody : object {
    [DataMemberAttribute]
public XElement UpdateListItemsWithKnowledgeResult;
    public UpdateListItemsWithKnowledgeResponseBody(XElement UpdateListItemsWithKnowledgeResult);
}
[DebuggerStepThroughAttribute]
[GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
[EditorBrowsableAttribute("2")]
[MessageContractAttribute]
internal class SharepointLists.UpdateListRequest : object {
    [MessageBodyMemberAttribute]
public UpdateListRequestBody Body;
    public UpdateListRequest(UpdateListRequestBody Body);
}
[DebuggerStepThroughAttribute]
[GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
[EditorBrowsableAttribute("2")]
[DataContractAttribute]
internal class SharepointLists.UpdateListRequestBody : object {
    [DataMemberAttribute]
public string listName;
    [DataMemberAttribute]
public XElement listProperties;
    [DataMemberAttribute]
public XElement newFields;
    [DataMemberAttribute]
public XElement updateFields;
    [DataMemberAttribute]
public XElement deleteFields;
    [DataMemberAttribute]
public string listVersion;
    public UpdateListRequestBody(string listName, XElement listProperties, XElement newFields, XElement updateFields, XElement deleteFields, string listVersion);
}
[DebuggerStepThroughAttribute]
[GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
[EditorBrowsableAttribute("2")]
[MessageContractAttribute]
internal class SharepointLists.UpdateListResponse : object {
    [MessageBodyMemberAttribute]
public UpdateListResponseBody Body;
    public UpdateListResponse(UpdateListResponseBody Body);
}
[DebuggerStepThroughAttribute]
[GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
[EditorBrowsableAttribute("2")]
[DataContractAttribute]
internal class SharepointLists.UpdateListResponseBody : object {
    [DataMemberAttribute]
public XElement UpdateListResult;
    public UpdateListResponseBody(XElement UpdateListResult);
}
[DebuggerStepThroughAttribute]
[GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
[EditorBrowsableAttribute("2")]
[MessageContractAttribute]
public class SharepointWebs.CreateContentTypeRequest : object {
    [MessageBodyMemberAttribute]
public CreateContentTypeRequestBody Body;
    public CreateContentTypeRequest(CreateContentTypeRequestBody Body);
}
[DebuggerStepThroughAttribute]
[GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
[EditorBrowsableAttribute("2")]
[DataContractAttribute]
public class SharepointWebs.CreateContentTypeRequestBody : object {
    [DataMemberAttribute]
public string displayName;
    [DataMemberAttribute]
public string parentType;
    [DataMemberAttribute]
public XElement newFields;
    [DataMemberAttribute]
public XElement contentTypeProperties;
    public CreateContentTypeRequestBody(string displayName, string parentType, XElement newFields, XElement contentTypeProperties);
}
[DebuggerStepThroughAttribute]
[GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
[EditorBrowsableAttribute("2")]
[MessageContractAttribute]
public class SharepointWebs.CreateContentTypeResponse : object {
    [MessageBodyMemberAttribute]
public CreateContentTypeResponseBody Body;
    public CreateContentTypeResponse(CreateContentTypeResponseBody Body);
}
[DebuggerStepThroughAttribute]
[GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
[EditorBrowsableAttribute("2")]
[DataContractAttribute]
public class SharepointWebs.CreateContentTypeResponseBody : object {
    [DataMemberAttribute]
public string CreateContentTypeResult;
    public CreateContentTypeResponseBody(string CreateContentTypeResult);
}
[DebuggerStepThroughAttribute]
[GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
[EditorBrowsableAttribute("2")]
[MessageContractAttribute]
public class SharepointWebs.CustomizeCssRequest : object {
    [MessageBodyMemberAttribute]
public CustomizeCssRequestBody Body;
    public CustomizeCssRequest(CustomizeCssRequestBody Body);
}
[DebuggerStepThroughAttribute]
[GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
[EditorBrowsableAttribute("2")]
[DataContractAttribute]
public class SharepointWebs.CustomizeCssRequestBody : object {
    [DataMemberAttribute]
public string cssFile;
    public CustomizeCssRequestBody(string cssFile);
}
[DebuggerStepThroughAttribute]
[GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
[EditorBrowsableAttribute("2")]
[MessageContractAttribute]
public class SharepointWebs.CustomizeCssResponse : object {
    [MessageBodyMemberAttribute]
public CustomizeCssResponseBody Body;
    public CustomizeCssResponse(CustomizeCssResponseBody Body);
}
[DebuggerStepThroughAttribute]
[GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
[EditorBrowsableAttribute("2")]
[DataContractAttribute]
public class SharepointWebs.CustomizeCssResponseBody : object {
}
[GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
[DataContractAttribute]
public enum SharepointWebs.CustomizedPageStatus : Enum {
    public int value__;
    [EnumMemberAttribute]
public static CustomizedPageStatus None;
    [EnumMemberAttribute]
public static CustomizedPageStatus Uncustomized;
    [EnumMemberAttribute]
public static CustomizedPageStatus Customized;
}
[DebuggerStepThroughAttribute]
[GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
[EditorBrowsableAttribute("2")]
[MessageContractAttribute]
public class SharepointWebs.DeleteContentTypeRequest : object {
    [MessageBodyMemberAttribute]
public DeleteContentTypeRequestBody Body;
    public DeleteContentTypeRequest(DeleteContentTypeRequestBody Body);
}
[DebuggerStepThroughAttribute]
[GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
[EditorBrowsableAttribute("2")]
[DataContractAttribute]
public class SharepointWebs.DeleteContentTypeRequestBody : object {
    [DataMemberAttribute]
public string contentTypeId;
    public DeleteContentTypeRequestBody(string contentTypeId);
}
[DebuggerStepThroughAttribute]
[GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
[EditorBrowsableAttribute("2")]
[MessageContractAttribute]
public class SharepointWebs.DeleteContentTypeResponse : object {
    [MessageBodyMemberAttribute]
public DeleteContentTypeResponseBody Body;
    public DeleteContentTypeResponse(DeleteContentTypeResponseBody Body);
}
[DebuggerStepThroughAttribute]
[GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
[EditorBrowsableAttribute("2")]
[DataContractAttribute]
public class SharepointWebs.DeleteContentTypeResponseBody : object {
    [DataMemberAttribute]
public XElement DeleteContentTypeResult;
    public DeleteContentTypeResponseBody(XElement DeleteContentTypeResult);
}
[DebuggerStepThroughAttribute]
[GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
[EditorBrowsableAttribute("2")]
[MessageContractAttribute]
public class SharepointWebs.GetActivatedFeaturesRequest : object {
    [MessageBodyMemberAttribute]
public GetActivatedFeaturesRequestBody Body;
    public GetActivatedFeaturesRequest(GetActivatedFeaturesRequestBody Body);
}
[DebuggerStepThroughAttribute]
[GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
[EditorBrowsableAttribute("2")]
[DataContractAttribute]
public class SharepointWebs.GetActivatedFeaturesRequestBody : object {
}
[DebuggerStepThroughAttribute]
[GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
[EditorBrowsableAttribute("2")]
[MessageContractAttribute]
public class SharepointWebs.GetActivatedFeaturesResponse : object {
    [MessageBodyMemberAttribute]
public GetActivatedFeaturesResponseBody Body;
    public GetActivatedFeaturesResponse(GetActivatedFeaturesResponseBody Body);
}
[DebuggerStepThroughAttribute]
[GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
[EditorBrowsableAttribute("2")]
[DataContractAttribute]
public class SharepointWebs.GetActivatedFeaturesResponseBody : object {
    [DataMemberAttribute]
public string GetActivatedFeaturesResult;
    public GetActivatedFeaturesResponseBody(string GetActivatedFeaturesResult);
}
[DebuggerStepThroughAttribute]
[GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
[EditorBrowsableAttribute("2")]
[MessageContractAttribute]
public class SharepointWebs.GetAllSubWebCollectionRequest : object {
    [MessageBodyMemberAttribute]
public GetAllSubWebCollectionRequestBody Body;
    public GetAllSubWebCollectionRequest(GetAllSubWebCollectionRequestBody Body);
}
[DebuggerStepThroughAttribute]
[GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
[EditorBrowsableAttribute("2")]
[DataContractAttribute]
public class SharepointWebs.GetAllSubWebCollectionRequestBody : object {
}
[DebuggerStepThroughAttribute]
[GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
[EditorBrowsableAttribute("2")]
[MessageContractAttribute]
public class SharepointWebs.GetAllSubWebCollectionResponse : object {
    [MessageBodyMemberAttribute]
public GetAllSubWebCollectionResponseBody Body;
    public GetAllSubWebCollectionResponse(GetAllSubWebCollectionResponseBody Body);
}
[DebuggerStepThroughAttribute]
[GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
[EditorBrowsableAttribute("2")]
[DataContractAttribute]
public class SharepointWebs.GetAllSubWebCollectionResponseBody : object {
    [DataMemberAttribute]
public XElement GetAllSubWebCollectionResult;
    public GetAllSubWebCollectionResponseBody(XElement GetAllSubWebCollectionResult);
}
[DebuggerStepThroughAttribute]
[GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
[EditorBrowsableAttribute("2")]
[MessageContractAttribute]
public class SharepointWebs.GetColumnsRequest : object {
    [MessageBodyMemberAttribute]
public GetColumnsRequestBody Body;
    public GetColumnsRequest(GetColumnsRequestBody Body);
}
[DebuggerStepThroughAttribute]
[GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
[EditorBrowsableAttribute("2")]
[DataContractAttribute]
public class SharepointWebs.GetColumnsRequestBody : object {
}
[DebuggerStepThroughAttribute]
[GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
[EditorBrowsableAttribute("2")]
[MessageContractAttribute]
public class SharepointWebs.GetColumnsResponse : object {
    [MessageBodyMemberAttribute]
public GetColumnsResponseBody Body;
    public GetColumnsResponse(GetColumnsResponseBody Body);
}
[DebuggerStepThroughAttribute]
[GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
[EditorBrowsableAttribute("2")]
[DataContractAttribute]
public class SharepointWebs.GetColumnsResponseBody : object {
    [DataMemberAttribute]
public XElement GetColumnsResult;
    public GetColumnsResponseBody(XElement GetColumnsResult);
}
[DebuggerStepThroughAttribute]
[GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
[EditorBrowsableAttribute("2")]
[MessageContractAttribute]
public class SharepointWebs.GetContentTypeRequest : object {
    [MessageBodyMemberAttribute]
public GetContentTypeRequestBody Body;
    public GetContentTypeRequest(GetContentTypeRequestBody Body);
}
[DebuggerStepThroughAttribute]
[GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
[EditorBrowsableAttribute("2")]
[DataContractAttribute]
public class SharepointWebs.GetContentTypeRequestBody : object {
    [DataMemberAttribute]
public string contentTypeId;
    public GetContentTypeRequestBody(string contentTypeId);
}
[DebuggerStepThroughAttribute]
[GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
[EditorBrowsableAttribute("2")]
[MessageContractAttribute]
public class SharepointWebs.GetContentTypeResponse : object {
    [MessageBodyMemberAttribute]
public GetContentTypeResponseBody Body;
    public GetContentTypeResponse(GetContentTypeResponseBody Body);
}
[DebuggerStepThroughAttribute]
[GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
[EditorBrowsableAttribute("2")]
[DataContractAttribute]
public class SharepointWebs.GetContentTypeResponseBody : object {
    [DataMemberAttribute]
public XElement GetContentTypeResult;
    public GetContentTypeResponseBody(XElement GetContentTypeResult);
}
[DebuggerStepThroughAttribute]
[GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
[EditorBrowsableAttribute("2")]
[MessageContractAttribute]
public class SharepointWebs.GetContentTypesRequest : object {
    [MessageBodyMemberAttribute]
public GetContentTypesRequestBody Body;
    public GetContentTypesRequest(GetContentTypesRequestBody Body);
}
[DebuggerStepThroughAttribute]
[GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
[EditorBrowsableAttribute("2")]
[DataContractAttribute]
public class SharepointWebs.GetContentTypesRequestBody : object {
}
[DebuggerStepThroughAttribute]
[GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
[EditorBrowsableAttribute("2")]
[MessageContractAttribute]
public class SharepointWebs.GetContentTypesResponse : object {
    [MessageBodyMemberAttribute]
public GetContentTypesResponseBody Body;
    public GetContentTypesResponse(GetContentTypesResponseBody Body);
}
[DebuggerStepThroughAttribute]
[GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
[EditorBrowsableAttribute("2")]
[DataContractAttribute]
public class SharepointWebs.GetContentTypesResponseBody : object {
    [DataMemberAttribute]
public XElement GetContentTypesResult;
    public GetContentTypesResponseBody(XElement GetContentTypesResult);
}
[DebuggerStepThroughAttribute]
[GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
[EditorBrowsableAttribute("2")]
[MessageContractAttribute]
public class SharepointWebs.GetCustomizedPageStatusRequest : object {
    [MessageBodyMemberAttribute]
public GetCustomizedPageStatusRequestBody Body;
    public GetCustomizedPageStatusRequest(GetCustomizedPageStatusRequestBody Body);
}
[DebuggerStepThroughAttribute]
[GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
[EditorBrowsableAttribute("2")]
[DataContractAttribute]
public class SharepointWebs.GetCustomizedPageStatusRequestBody : object {
    [DataMemberAttribute]
public string fileUrl;
    public GetCustomizedPageStatusRequestBody(string fileUrl);
}
[DebuggerStepThroughAttribute]
[GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
[EditorBrowsableAttribute("2")]
[MessageContractAttribute]
public class SharepointWebs.GetCustomizedPageStatusResponse : object {
    [MessageBodyMemberAttribute]
public GetCustomizedPageStatusResponseBody Body;
    public GetCustomizedPageStatusResponse(GetCustomizedPageStatusResponseBody Body);
}
[DebuggerStepThroughAttribute]
[GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
[EditorBrowsableAttribute("2")]
[DataContractAttribute]
public class SharepointWebs.GetCustomizedPageStatusResponseBody : object {
    [DataMemberAttribute]
public CustomizedPageStatus GetCustomizedPageStatusResult;
    public GetCustomizedPageStatusResponseBody(CustomizedPageStatus GetCustomizedPageStatusResult);
}
[DebuggerStepThroughAttribute]
[GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
[EditorBrowsableAttribute("2")]
[MessageContractAttribute]
public class SharepointWebs.GetListTemplatesRequest : object {
    [MessageBodyMemberAttribute]
public GetListTemplatesRequestBody Body;
    public GetListTemplatesRequest(GetListTemplatesRequestBody Body);
}
[DebuggerStepThroughAttribute]
[GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
[EditorBrowsableAttribute("2")]
[DataContractAttribute]
public class SharepointWebs.GetListTemplatesRequestBody : object {
}
[DebuggerStepThroughAttribute]
[GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
[EditorBrowsableAttribute("2")]
[MessageContractAttribute]
public class SharepointWebs.GetListTemplatesResponse : object {
    [MessageBodyMemberAttribute]
public GetListTemplatesResponseBody Body;
    public GetListTemplatesResponse(GetListTemplatesResponseBody Body);
}
[DebuggerStepThroughAttribute]
[GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
[EditorBrowsableAttribute("2")]
[DataContractAttribute]
public class SharepointWebs.GetListTemplatesResponseBody : object {
    [DataMemberAttribute]
public XElement GetListTemplatesResult;
    public GetListTemplatesResponseBody(XElement GetListTemplatesResult);
}
[DebuggerStepThroughAttribute]
[GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
[EditorBrowsableAttribute("2")]
[MessageContractAttribute]
public class SharepointWebs.GetObjectIdFromUrlRequest : object {
    [MessageBodyMemberAttribute]
public GetObjectIdFromUrlRequestBody Body;
    public GetObjectIdFromUrlRequest(GetObjectIdFromUrlRequestBody Body);
}
[DebuggerStepThroughAttribute]
[GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
[EditorBrowsableAttribute("2")]
[DataContractAttribute]
public class SharepointWebs.GetObjectIdFromUrlRequestBody : object {
    [DataMemberAttribute]
public string objectUrl;
    public GetObjectIdFromUrlRequestBody(string objectUrl);
}
[DebuggerStepThroughAttribute]
[GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
[EditorBrowsableAttribute("2")]
[MessageContractAttribute]
public class SharepointWebs.GetObjectIdFromUrlResponse : object {
    [MessageBodyMemberAttribute]
public GetObjectIdFromUrlResponseBody Body;
    public GetObjectIdFromUrlResponse(GetObjectIdFromUrlResponseBody Body);
}
[DebuggerStepThroughAttribute]
[GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
[EditorBrowsableAttribute("2")]
[DataContractAttribute]
public class SharepointWebs.GetObjectIdFromUrlResponseBody : object {
    [DataMemberAttribute]
public XElement GetObjectIdFromUrlResult;
    public GetObjectIdFromUrlResponseBody(XElement GetObjectIdFromUrlResult);
}
[DebuggerStepThroughAttribute]
[GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
[EditorBrowsableAttribute("2")]
[MessageContractAttribute]
public class SharepointWebs.GetWebCollectionRequest : object {
    [MessageBodyMemberAttribute]
public GetWebCollectionRequestBody Body;
    public GetWebCollectionRequest(GetWebCollectionRequestBody Body);
}
[DebuggerStepThroughAttribute]
[GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
[EditorBrowsableAttribute("2")]
[DataContractAttribute]
public class SharepointWebs.GetWebCollectionRequestBody : object {
}
[DebuggerStepThroughAttribute]
[GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
[EditorBrowsableAttribute("2")]
[MessageContractAttribute]
public class SharepointWebs.GetWebCollectionResponse : object {
    [MessageBodyMemberAttribute]
public GetWebCollectionResponseBody Body;
    public GetWebCollectionResponse(GetWebCollectionResponseBody Body);
}
[DebuggerStepThroughAttribute]
[GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
[EditorBrowsableAttribute("2")]
[DataContractAttribute]
public class SharepointWebs.GetWebCollectionResponseBody : object {
    [DataMemberAttribute]
public XElement GetWebCollectionResult;
    public GetWebCollectionResponseBody(XElement GetWebCollectionResult);
}
[DebuggerStepThroughAttribute]
[GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
[EditorBrowsableAttribute("2")]
[MessageContractAttribute]
public class SharepointWebs.GetWebRequest : object {
    [MessageBodyMemberAttribute]
public GetWebRequestBody Body;
    public GetWebRequest(GetWebRequestBody Body);
}
[DebuggerStepThroughAttribute]
[GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
[EditorBrowsableAttribute("2")]
[DataContractAttribute]
public class SharepointWebs.GetWebRequestBody : object {
    [DataMemberAttribute]
public string webUrl;
    public GetWebRequestBody(string webUrl);
}
[DebuggerStepThroughAttribute]
[GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
[EditorBrowsableAttribute("2")]
[MessageContractAttribute]
public class SharepointWebs.GetWebResponse : object {
    [MessageBodyMemberAttribute]
public GetWebResponseBody Body;
    public GetWebResponse(GetWebResponseBody Body);
}
[DebuggerStepThroughAttribute]
[GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
[EditorBrowsableAttribute("2")]
[DataContractAttribute]
public class SharepointWebs.GetWebResponseBody : object {
    [DataMemberAttribute]
public XElement GetWebResult;
    public GetWebResponseBody(XElement GetWebResult);
}
[DebuggerStepThroughAttribute]
[GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
[EditorBrowsableAttribute("2")]
[MessageContractAttribute]
public class SharepointWebs.RemoveContentTypeXmlDocumentRequest : object {
    [MessageBodyMemberAttribute]
public RemoveContentTypeXmlDocumentRequestBody Body;
    public RemoveContentTypeXmlDocumentRequest(RemoveContentTypeXmlDocumentRequestBody Body);
}
[DebuggerStepThroughAttribute]
[GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
[EditorBrowsableAttribute("2")]
[DataContractAttribute]
public class SharepointWebs.RemoveContentTypeXmlDocumentRequestBody : object {
    [DataMemberAttribute]
public string contentTypeId;
    [DataMemberAttribute]
public string documentUri;
    public RemoveContentTypeXmlDocumentRequestBody(string contentTypeId, string documentUri);
}
[DebuggerStepThroughAttribute]
[GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
[EditorBrowsableAttribute("2")]
[MessageContractAttribute]
public class SharepointWebs.RemoveContentTypeXmlDocumentResponse : object {
    [MessageBodyMemberAttribute]
public RemoveContentTypeXmlDocumentResponseBody Body;
    public RemoveContentTypeXmlDocumentResponse(RemoveContentTypeXmlDocumentResponseBody Body);
}
[DebuggerStepThroughAttribute]
[GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
[EditorBrowsableAttribute("2")]
[DataContractAttribute]
public class SharepointWebs.RemoveContentTypeXmlDocumentResponseBody : object {
    [DataMemberAttribute]
public XElement RemoveContentTypeXmlDocumentResult;
    public RemoveContentTypeXmlDocumentResponseBody(XElement RemoveContentTypeXmlDocumentResult);
}
[DebuggerStepThroughAttribute]
[GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
[EditorBrowsableAttribute("2")]
[MessageContractAttribute]
public class SharepointWebs.RevertCssRequest : object {
    [MessageBodyMemberAttribute]
public RevertCssRequestBody Body;
    public RevertCssRequest(RevertCssRequestBody Body);
}
[DebuggerStepThroughAttribute]
[GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
[EditorBrowsableAttribute("2")]
[DataContractAttribute]
public class SharepointWebs.RevertCssRequestBody : object {
    [DataMemberAttribute]
public string cssFile;
    public RevertCssRequestBody(string cssFile);
}
[DebuggerStepThroughAttribute]
[GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
[EditorBrowsableAttribute("2")]
[MessageContractAttribute]
public class SharepointWebs.RevertCssResponse : object {
    [MessageBodyMemberAttribute]
public RevertCssResponseBody Body;
    public RevertCssResponse(RevertCssResponseBody Body);
}
[DebuggerStepThroughAttribute]
[GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
[EditorBrowsableAttribute("2")]
[DataContractAttribute]
public class SharepointWebs.RevertCssResponseBody : object {
}
[DebuggerStepThroughAttribute]
[GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
[EditorBrowsableAttribute("2")]
[MessageContractAttribute]
public class SharepointWebs.RevertFileContentStreamRequest : object {
    [MessageBodyMemberAttribute]
public RevertFileContentStreamRequestBody Body;
    public RevertFileContentStreamRequest(RevertFileContentStreamRequestBody Body);
}
[DebuggerStepThroughAttribute]
[GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
[EditorBrowsableAttribute("2")]
[DataContractAttribute]
public class SharepointWebs.RevertFileContentStreamRequestBody : object {
    [DataMemberAttribute]
public string fileUrl;
    public RevertFileContentStreamRequestBody(string fileUrl);
}
[DebuggerStepThroughAttribute]
[GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
[EditorBrowsableAttribute("2")]
[MessageContractAttribute]
public class SharepointWebs.RevertFileContentStreamResponse : object {
    [MessageBodyMemberAttribute]
public RevertFileContentStreamResponseBody Body;
    public RevertFileContentStreamResponse(RevertFileContentStreamResponseBody Body);
}
[DebuggerStepThroughAttribute]
[GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
[EditorBrowsableAttribute("2")]
[DataContractAttribute]
public class SharepointWebs.RevertFileContentStreamResponseBody : object {
}
[DebuggerStepThroughAttribute]
[GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
[EditorBrowsableAttribute("2")]
[MessageContractAttribute]
public class SharepointWebs.UpdateColumnsRequest : object {
    [MessageBodyMemberAttribute]
public UpdateColumnsRequestBody Body;
    public UpdateColumnsRequest(UpdateColumnsRequestBody Body);
}
[DebuggerStepThroughAttribute]
[GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
[EditorBrowsableAttribute("2")]
[DataContractAttribute]
public class SharepointWebs.UpdateColumnsRequestBody : object {
    [DataMemberAttribute]
public XElement newFields;
    [DataMemberAttribute]
public XElement updateFields;
    [DataMemberAttribute]
public XElement deleteFields;
    public UpdateColumnsRequestBody(XElement newFields, XElement updateFields, XElement deleteFields);
}
[DebuggerStepThroughAttribute]
[GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
[EditorBrowsableAttribute("2")]
[MessageContractAttribute]
public class SharepointWebs.UpdateColumnsResponse : object {
    [MessageBodyMemberAttribute]
public UpdateColumnsResponseBody Body;
    public UpdateColumnsResponse(UpdateColumnsResponseBody Body);
}
[DebuggerStepThroughAttribute]
[GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
[EditorBrowsableAttribute("2")]
[DataContractAttribute]
public class SharepointWebs.UpdateColumnsResponseBody : object {
    [DataMemberAttribute]
public XElement UpdateColumnsResult;
    public UpdateColumnsResponseBody(XElement UpdateColumnsResult);
}
[DebuggerStepThroughAttribute]
[GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
[EditorBrowsableAttribute("2")]
[MessageContractAttribute]
public class SharepointWebs.UpdateContentTypeRequest : object {
    [MessageBodyMemberAttribute]
public UpdateContentTypeRequestBody Body;
    public UpdateContentTypeRequest(UpdateContentTypeRequestBody Body);
}
[DebuggerStepThroughAttribute]
[GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
[EditorBrowsableAttribute("2")]
[DataContractAttribute]
public class SharepointWebs.UpdateContentTypeRequestBody : object {
    [DataMemberAttribute]
public string contentTypeId;
    [DataMemberAttribute]
public XElement contentTypeProperties;
    [DataMemberAttribute]
public XElement newFields;
    [DataMemberAttribute]
public XElement updateFields;
    [DataMemberAttribute]
public XElement deleteFields;
    public UpdateContentTypeRequestBody(string contentTypeId, XElement contentTypeProperties, XElement newFields, XElement updateFields, XElement deleteFields);
}
[DebuggerStepThroughAttribute]
[GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
[EditorBrowsableAttribute("2")]
[MessageContractAttribute]
public class SharepointWebs.UpdateContentTypeResponse : object {
    [MessageBodyMemberAttribute]
public UpdateContentTypeResponseBody Body;
    public UpdateContentTypeResponse(UpdateContentTypeResponseBody Body);
}
[DebuggerStepThroughAttribute]
[GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
[EditorBrowsableAttribute("2")]
[DataContractAttribute]
public class SharepointWebs.UpdateContentTypeResponseBody : object {
    [DataMemberAttribute]
public XElement UpdateContentTypeResult;
    public UpdateContentTypeResponseBody(XElement UpdateContentTypeResult);
}
[DebuggerStepThroughAttribute]
[GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
[EditorBrowsableAttribute("2")]
[MessageContractAttribute]
public class SharepointWebs.UpdateContentTypeXmlDocumentRequest : object {
    [MessageBodyMemberAttribute]
public UpdateContentTypeXmlDocumentRequestBody Body;
    public UpdateContentTypeXmlDocumentRequest(UpdateContentTypeXmlDocumentRequestBody Body);
}
[DebuggerStepThroughAttribute]
[GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
[EditorBrowsableAttribute("2")]
[DataContractAttribute]
public class SharepointWebs.UpdateContentTypeXmlDocumentRequestBody : object {
    [DataMemberAttribute]
public string contentTypeId;
    [DataMemberAttribute]
public XElement newDocument;
    public UpdateContentTypeXmlDocumentRequestBody(string contentTypeId, XElement newDocument);
}
[DebuggerStepThroughAttribute]
[GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
[EditorBrowsableAttribute("2")]
[MessageContractAttribute]
public class SharepointWebs.UpdateContentTypeXmlDocumentResponse : object {
    [MessageBodyMemberAttribute]
public UpdateContentTypeXmlDocumentResponseBody Body;
    public UpdateContentTypeXmlDocumentResponse(UpdateContentTypeXmlDocumentResponseBody Body);
}
[DebuggerStepThroughAttribute]
[GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
[EditorBrowsableAttribute("2")]
[DataContractAttribute]
public class SharepointWebs.UpdateContentTypeXmlDocumentResponseBody : object {
    [DataMemberAttribute]
public XElement UpdateContentTypeXmlDocumentResult;
    public UpdateContentTypeXmlDocumentResponseBody(XElement UpdateContentTypeXmlDocumentResult);
}
[GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
[ServiceContractAttribute]
public interface SharepointWebs.WebsSoap {
    [OperationContractAttribute]
public abstract virtual GetWebCollectionResponse GetWebCollection(GetWebCollectionRequest request);
    [OperationContractAttribute]
public abstract virtual GetWebResponse GetWeb(GetWebRequest request);
    [OperationContractAttribute]
public abstract virtual GetListTemplatesResponse GetListTemplates(GetListTemplatesRequest request);
    [OperationContractAttribute]
public abstract virtual GetAllSubWebCollectionResponse GetAllSubWebCollection(GetAllSubWebCollectionRequest request);
    [OperationContractAttribute]
public abstract virtual WebUrlFromPageUrlResponse WebUrlFromPageUrl(WebUrlFromPageUrlRequest request);
    [OperationContractAttribute]
public abstract virtual GetContentTypesResponse GetContentTypes(GetContentTypesRequest request);
    [OperationContractAttribute]
public abstract virtual GetContentTypeResponse GetContentType(GetContentTypeRequest request);
    [OperationContractAttribute]
public abstract virtual CreateContentTypeResponse CreateContentType(CreateContentTypeRequest request);
    [OperationContractAttribute]
public abstract virtual UpdateContentTypeResponse UpdateContentType(UpdateContentTypeRequest request);
    [OperationContractAttribute]
public abstract virtual DeleteContentTypeResponse DeleteContentType(DeleteContentTypeRequest request);
    [OperationContractAttribute]
public abstract virtual UpdateContentTypeXmlDocumentResponse UpdateContentTypeXmlDocument(UpdateContentTypeXmlDocumentRequest request);
    [OperationContractAttribute]
public abstract virtual RemoveContentTypeXmlDocumentResponse RemoveContentTypeXmlDocument(RemoveContentTypeXmlDocumentRequest request);
    [OperationContractAttribute]
public abstract virtual GetColumnsResponse GetColumns(GetColumnsRequest request);
    [OperationContractAttribute]
public abstract virtual UpdateColumnsResponse UpdateColumns(UpdateColumnsRequest request);
    [OperationContractAttribute]
public abstract virtual GetCustomizedPageStatusResponse GetCustomizedPageStatus(GetCustomizedPageStatusRequest request);
    [OperationContractAttribute]
public abstract virtual RevertFileContentStreamResponse RevertFileContentStream(RevertFileContentStreamRequest request);
    [OperationContractAttribute]
public abstract virtual void RevertAllFileContentStreams();
    [OperationContractAttribute]
public abstract virtual CustomizeCssResponse CustomizeCss(CustomizeCssRequest request);
    [OperationContractAttribute]
public abstract virtual RevertCssResponse RevertCss(RevertCssRequest request);
    [OperationContractAttribute]
public abstract virtual GetActivatedFeaturesResponse GetActivatedFeatures(GetActivatedFeaturesRequest request);
    [OperationContractAttribute]
public abstract virtual GetObjectIdFromUrlResponse GetObjectIdFromUrl(GetObjectIdFromUrlRequest request);
}
[GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
public interface SharepointWebs.WebsSoapChannel {
}
[DebuggerStepThroughAttribute]
[GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
public class SharepointWebs.WebsSoapClient : ClientBase`1<WebsSoap> {
    public WebsSoapClient(string endpointConfigurationName);
    public WebsSoapClient(string endpointConfigurationName, string remoteAddress);
    public WebsSoapClient(string endpointConfigurationName, EndpointAddress remoteAddress);
    public WebsSoapClient(Binding binding, EndpointAddress remoteAddress);
    [EditorBrowsableAttribute("2")]
private sealed virtual override GetWebCollectionResponse SharepointWebs.WebsSoap.GetWebCollection(GetWebCollectionRequest request);
    public XElement GetWebCollection();
    [EditorBrowsableAttribute("2")]
private sealed virtual override GetWebResponse SharepointWebs.WebsSoap.GetWeb(GetWebRequest request);
    public XElement GetWeb(string webUrl);
    [EditorBrowsableAttribute("2")]
private sealed virtual override GetListTemplatesResponse SharepointWebs.WebsSoap.GetListTemplates(GetListTemplatesRequest request);
    public XElement GetListTemplates();
    [EditorBrowsableAttribute("2")]
private sealed virtual override GetAllSubWebCollectionResponse SharepointWebs.WebsSoap.GetAllSubWebCollection(GetAllSubWebCollectionRequest request);
    public XElement GetAllSubWebCollection();
    [EditorBrowsableAttribute("2")]
private sealed virtual override WebUrlFromPageUrlResponse SharepointWebs.WebsSoap.WebUrlFromPageUrl(WebUrlFromPageUrlRequest request);
    public string WebUrlFromPageUrl(string pageUrl);
    [EditorBrowsableAttribute("2")]
private sealed virtual override GetContentTypesResponse SharepointWebs.WebsSoap.GetContentTypes(GetContentTypesRequest request);
    public XElement GetContentTypes();
    [EditorBrowsableAttribute("2")]
private sealed virtual override GetContentTypeResponse SharepointWebs.WebsSoap.GetContentType(GetContentTypeRequest request);
    public XElement GetContentType(string contentTypeId);
    [EditorBrowsableAttribute("2")]
private sealed virtual override CreateContentTypeResponse SharepointWebs.WebsSoap.CreateContentType(CreateContentTypeRequest request);
    public string CreateContentType(string displayName, string parentType, XElement newFields, XElement contentTypeProperties);
    [EditorBrowsableAttribute("2")]
private sealed virtual override UpdateContentTypeResponse SharepointWebs.WebsSoap.UpdateContentType(UpdateContentTypeRequest request);
    public XElement UpdateContentType(string contentTypeId, XElement contentTypeProperties, XElement newFields, XElement updateFields, XElement deleteFields);
    [EditorBrowsableAttribute("2")]
private sealed virtual override DeleteContentTypeResponse SharepointWebs.WebsSoap.DeleteContentType(DeleteContentTypeRequest request);
    public XElement DeleteContentType(string contentTypeId);
    [EditorBrowsableAttribute("2")]
private sealed virtual override UpdateContentTypeXmlDocumentResponse SharepointWebs.WebsSoap.UpdateContentTypeXmlDocument(UpdateContentTypeXmlDocumentRequest request);
    public XElement UpdateContentTypeXmlDocument(string contentTypeId, XElement newDocument);
    [EditorBrowsableAttribute("2")]
private sealed virtual override RemoveContentTypeXmlDocumentResponse SharepointWebs.WebsSoap.RemoveContentTypeXmlDocument(RemoveContentTypeXmlDocumentRequest request);
    public XElement RemoveContentTypeXmlDocument(string contentTypeId, string documentUri);
    [EditorBrowsableAttribute("2")]
private sealed virtual override GetColumnsResponse SharepointWebs.WebsSoap.GetColumns(GetColumnsRequest request);
    public XElement GetColumns();
    [EditorBrowsableAttribute("2")]
private sealed virtual override UpdateColumnsResponse SharepointWebs.WebsSoap.UpdateColumns(UpdateColumnsRequest request);
    public XElement UpdateColumns(XElement newFields, XElement updateFields, XElement deleteFields);
    [EditorBrowsableAttribute("2")]
private sealed virtual override GetCustomizedPageStatusResponse SharepointWebs.WebsSoap.GetCustomizedPageStatus(GetCustomizedPageStatusRequest request);
    public CustomizedPageStatus GetCustomizedPageStatus(string fileUrl);
    [EditorBrowsableAttribute("2")]
private sealed virtual override RevertFileContentStreamResponse SharepointWebs.WebsSoap.RevertFileContentStream(RevertFileContentStreamRequest request);
    public void RevertFileContentStream(string fileUrl);
    public sealed virtual void RevertAllFileContentStreams();
    [EditorBrowsableAttribute("2")]
private sealed virtual override CustomizeCssResponse SharepointWebs.WebsSoap.CustomizeCss(CustomizeCssRequest request);
    public void CustomizeCss(string cssFile);
    [EditorBrowsableAttribute("2")]
private sealed virtual override RevertCssResponse SharepointWebs.WebsSoap.RevertCss(RevertCssRequest request);
    public void RevertCss(string cssFile);
    [EditorBrowsableAttribute("2")]
private sealed virtual override GetActivatedFeaturesResponse SharepointWebs.WebsSoap.GetActivatedFeatures(GetActivatedFeaturesRequest request);
    public string GetActivatedFeatures();
    [EditorBrowsableAttribute("2")]
private sealed virtual override GetObjectIdFromUrlResponse SharepointWebs.WebsSoap.GetObjectIdFromUrl(GetObjectIdFromUrlRequest request);
    public XElement GetObjectIdFromUrl(string objectUrl);
}
[DebuggerStepThroughAttribute]
[GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
[EditorBrowsableAttribute("2")]
[MessageContractAttribute]
public class SharepointWebs.WebUrlFromPageUrlRequest : object {
    [MessageBodyMemberAttribute]
public WebUrlFromPageUrlRequestBody Body;
    public WebUrlFromPageUrlRequest(WebUrlFromPageUrlRequestBody Body);
}
[DebuggerStepThroughAttribute]
[GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
[EditorBrowsableAttribute("2")]
[DataContractAttribute]
public class SharepointWebs.WebUrlFromPageUrlRequestBody : object {
    [DataMemberAttribute]
public string pageUrl;
    public WebUrlFromPageUrlRequestBody(string pageUrl);
}
[DebuggerStepThroughAttribute]
[GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
[EditorBrowsableAttribute("2")]
[MessageContractAttribute]
public class SharepointWebs.WebUrlFromPageUrlResponse : object {
    [MessageBodyMemberAttribute]
public WebUrlFromPageUrlResponseBody Body;
    public WebUrlFromPageUrlResponse(WebUrlFromPageUrlResponseBody Body);
}
[DebuggerStepThroughAttribute]
[GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
[EditorBrowsableAttribute("2")]
[DataContractAttribute]
public class SharepointWebs.WebUrlFromPageUrlResponseBody : object {
    [DataMemberAttribute]
public string WebUrlFromPageUrlResult;
    public WebUrlFromPageUrlResponseBody(string WebUrlFromPageUrlResult);
}
internal class System.Diagnostics.CodeAnalysis.SetsRequiredMembersAttribute : Attribute {
}
internal class System.Runtime.CompilerServices.CompilerFeatureRequiredAttribute : Attribute {
    [NullableContextAttribute("1")]
public CompilerFeatureRequiredAttribute(string feature);
}
[ExcludeFromCodeCoverageAttribute]
[DebuggerNonUserCodeAttribute]
internal static class System.Runtime.CompilerServices.IsExternalInit : object {
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("27524")]
internal class System.Runtime.CompilerServices.NullableAttribute : Attribute {
    public Byte[] NullableFlags;
    public NullableAttribute(byte );
    public NullableAttribute(Byte[] );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("5196")]
internal class System.Runtime.CompilerServices.NullableContextAttribute : Attribute {
    public byte Flag;
    public NullableContextAttribute(byte );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("2")]
internal class System.Runtime.CompilerServices.RefSafetyRulesAttribute : Attribute {
    public int Version;
    public RefSafetyRulesAttribute(int );
}
internal class System.Runtime.CompilerServices.RequiredMemberAttribute : Attribute {
}
[GeneratedCodeAttribute("Nerdbank.GitVersioning.Tasks", "3.6.128.36433")]
[ExcludeFromCodeCoverageAttribute]
internal static class ThisAssembly : object {
    internal static string AssemblyConfiguration;
    internal static string AssemblyFileVersion;
    internal static string AssemblyInformationalVersion;
    internal static string AssemblyName;
    internal static string AssemblyTitle;
    internal static string AssemblyVersion;
    internal static DateTime GitCommitDate;
    internal static string GitCommitId;
    internal static bool IsPrerelease;
    internal static bool IsPublicRelease;
    internal static string PublicKey;
    internal static string PublicKeyToken;
    internal static string RootNamespace;
    private static ThisAssembly();
}
