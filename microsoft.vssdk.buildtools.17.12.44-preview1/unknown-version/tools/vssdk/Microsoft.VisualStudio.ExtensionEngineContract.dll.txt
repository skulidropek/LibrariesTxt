[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
internal class Microsoft.Internal.Performance.CodeMarkerExStartEnd : ValueType {
    private int _end;
    private Byte[] _aBuff;
    internal CodeMarkerExStartEnd(int begin, int end, Byte[] aBuff, bool correlated);
    internal CodeMarkerExStartEnd(int begin, int end, Guid guidData, bool correlated);
    internal CodeMarkerExStartEnd(int begin, int end, string stringData, bool correlated);
    internal CodeMarkerExStartEnd(int begin, int end, UInt32 uintData, bool correlated);
    internal CodeMarkerExStartEnd(int begin, int end, ulong ulongData, bool correlated);
    public sealed virtual void Dispose();
}
internal class Microsoft.Internal.Performance.CodeMarkers : object {
    public static CodeMarkers Instance;
    private static string AtomName;
    private static string TestDllName;
    private static string ProductDllName;
    private State state;
    private RegistryView registryView;
    private string regroot;
    private Nullable`1<bool> shouldUseTestDll;
    private static Byte[] CorrelationMarkBytes;
    public bool IsEnabled { get; }
    public bool ShouldUseTestDll { get; }
    private static CodeMarkers();
    public bool get_IsEnabled();
    public bool get_ShouldUseTestDll();
    public bool CodeMarker(int nTimerID);
    public bool CodeMarkerEx(int nTimerID, Byte[] aBuff);
    public void SetStateDLLException();
    public bool CodeMarkerEx(int nTimerID, Guid guidData);
    public bool CodeMarkerEx(int nTimerID, string stringData);
    internal static Byte[] StringToBytesZeroTerminated(string stringData);
    public static Byte[] AttachCorrelationId(Byte[] buffer, Guid correlationId);
    public bool CodeMarkerEx(int nTimerID, UInt32 uintData);
    public bool CodeMarkerEx(int nTimerID, ulong ulongData);
    private static bool UsePrivateCodeMarkers(string regRoot, RegistryView registryView);
}
internal class Microsoft.Internal.Performance.CodeMarkerStartEnd : ValueType {
    private int _end;
    private Byte[] _buffer;
    internal CodeMarkerStartEnd(int begin, int end, bool correlated);
    public sealed virtual void Dispose();
    private void CodeMarker(int id);
}
internal class Microsoft.VisualStudio.ExtensionEngine.COM.ExternComCalls : object {
    public static UInt32 CoCreateInstance(Guid& clsid, IntPtr punkOuter, int context, Guid& iid, Object& o);
}
[CompilerGeneratedAttribute]
[TypeIdentifierAttribute("e34cb9f1-c7f7-424c-be29-027dcc09363a", "TaskScheduler._TASK_ACTION_TYPE")]
public enum Microsoft.VisualStudio.ExtensionEngine.COM.TaskScheduler._TASK_ACTION_TYPE : Enum {
    public int value__;
    public static _TASK_ACTION_TYPE TASK_ACTION_EXEC;
    public static _TASK_ACTION_TYPE TASK_ACTION_COM_HANDLER;
    public static _TASK_ACTION_TYPE TASK_ACTION_SEND_EMAIL;
    public static _TASK_ACTION_TYPE TASK_ACTION_SHOW_MESSAGE;
}
[CompilerGeneratedAttribute]
[TypeIdentifierAttribute("e34cb9f1-c7f7-424c-be29-027dcc09363a", "TaskScheduler._TASK_CREATION")]
public enum Microsoft.VisualStudio.ExtensionEngine.COM.TaskScheduler._TASK_CREATION : Enum {
    public int value__;
    public static _TASK_CREATION TASK_VALIDATE_ONLY;
    public static _TASK_CREATION TASK_CREATE;
    public static _TASK_CREATION TASK_UPDATE;
    public static _TASK_CREATION TASK_CREATE_OR_UPDATE;
    public static _TASK_CREATION TASK_DISABLE;
    public static _TASK_CREATION TASK_DONT_ADD_PRINCIPAL_ACE;
    public static _TASK_CREATION TASK_IGNORE_REGISTRATION_TRIGGERS;
}
[CompilerGeneratedAttribute]
[TypeIdentifierAttribute("e34cb9f1-c7f7-424c-be29-027dcc09363a", "TaskScheduler._TASK_ENUM_FLAGS")]
public enum Microsoft.VisualStudio.ExtensionEngine.COM.TaskScheduler._TASK_ENUM_FLAGS : Enum {
    public int value__;
    public static _TASK_ENUM_FLAGS TASK_ENUM_HIDDEN;
}
[CompilerGeneratedAttribute]
[TypeIdentifierAttribute("e34cb9f1-c7f7-424c-be29-027dcc09363a", "TaskScheduler._TASK_INSTANCES_POLICY")]
public enum Microsoft.VisualStudio.ExtensionEngine.COM.TaskScheduler._TASK_INSTANCES_POLICY : Enum {
    public int value__;
    public static _TASK_INSTANCES_POLICY TASK_INSTANCES_PARALLEL;
    public static _TASK_INSTANCES_POLICY TASK_INSTANCES_QUEUE;
    public static _TASK_INSTANCES_POLICY TASK_INSTANCES_IGNORE_NEW;
    public static _TASK_INSTANCES_POLICY TASK_INSTANCES_STOP_EXISTING;
}
[CompilerGeneratedAttribute]
[TypeIdentifierAttribute("e34cb9f1-c7f7-424c-be29-027dcc09363a", "TaskScheduler._TASK_LOGON_TYPE")]
public enum Microsoft.VisualStudio.ExtensionEngine.COM.TaskScheduler._TASK_LOGON_TYPE : Enum {
    public int value__;
    public static _TASK_LOGON_TYPE TASK_LOGON_NONE;
    public static _TASK_LOGON_TYPE TASK_LOGON_PASSWORD;
    public static _TASK_LOGON_TYPE TASK_LOGON_S4U;
    public static _TASK_LOGON_TYPE TASK_LOGON_INTERACTIVE_TOKEN;
    public static _TASK_LOGON_TYPE TASK_LOGON_GROUP;
    public static _TASK_LOGON_TYPE TASK_LOGON_SERVICE_ACCOUNT;
    public static _TASK_LOGON_TYPE TASK_LOGON_INTERACTIVE_TOKEN_OR_PASSWORD;
}
[CompilerGeneratedAttribute]
[TypeIdentifierAttribute("e34cb9f1-c7f7-424c-be29-027dcc09363a", "TaskScheduler._TASK_TRIGGER_TYPE2")]
public enum Microsoft.VisualStudio.ExtensionEngine.COM.TaskScheduler._TASK_TRIGGER_TYPE2 : Enum {
    public int value__;
    public static _TASK_TRIGGER_TYPE2 TASK_TRIGGER_EVENT;
    public static _TASK_TRIGGER_TYPE2 TASK_TRIGGER_TIME;
    public static _TASK_TRIGGER_TYPE2 TASK_TRIGGER_DAILY;
    public static _TASK_TRIGGER_TYPE2 TASK_TRIGGER_WEEKLY;
    public static _TASK_TRIGGER_TYPE2 TASK_TRIGGER_MONTHLY;
    public static _TASK_TRIGGER_TYPE2 TASK_TRIGGER_MONTHLYDOW;
    public static _TASK_TRIGGER_TYPE2 TASK_TRIGGER_IDLE;
    public static _TASK_TRIGGER_TYPE2 TASK_TRIGGER_REGISTRATION;
    public static _TASK_TRIGGER_TYPE2 TASK_TRIGGER_BOOT;
    public static _TASK_TRIGGER_TYPE2 TASK_TRIGGER_LOGON;
    public static _TASK_TRIGGER_TYPE2 TASK_TRIGGER_SESSION_STATE_CHANGE;
    public static _TASK_TRIGGER_TYPE2 TASK_TRIGGER_CUSTOM_TRIGGER_01;
}
[GuidAttribute("BAE54997-48B1-4CBE-9965-D6BE263EBEA4")]
[TypeIdentifierAttribute]
[InterfaceTypeAttribute("2")]
public interface Microsoft.VisualStudio.ExtensionEngine.COM.TaskScheduler.IAction {
}
[CompilerGeneratedAttribute]
[DefaultMemberAttribute("Item")]
[GuidAttribute("02820E19-7B98-4ED2-B2E8-FDCCCEFF619B")]
[TypeIdentifierAttribute]
[InterfaceTypeAttribute("2")]
public interface Microsoft.VisualStudio.ExtensionEngine.COM.TaskScheduler.IActionCollection {
    public abstract virtual void _VtblGap1_2();
    [DispIdAttribute("-4")]
public abstract virtual IEnumerator GetEnumerator();
    public abstract virtual void _VtblGap2_2();
    [DispIdAttribute("3")]
public abstract virtual IAction Create(_TASK_ACTION_TYPE Type);
}
[CompilerGeneratedAttribute]
[GuidAttribute("126C5CD8-B288-41D5-8DBF-E491446ADC5C")]
[TypeIdentifierAttribute]
[InterfaceTypeAttribute("2")]
public interface Microsoft.VisualStudio.ExtensionEngine.COM.TaskScheduler.IDailyTrigger {
    [DispIdAttribute("5")]
public string StartBoundary { get; public set; }
    [DispIdAttribute("25")]
public short DaysInterval { get; public set; }
    public abstract virtual void _VtblGap1_7();
    [DispIdAttribute("5")]
public abstract virtual string get_StartBoundary();
    [DispIdAttribute("5")]
public abstract virtual void set_StartBoundary(string value);
    public abstract virtual void _VtblGap2_4();
    [DispIdAttribute("25")]
public abstract virtual short get_DaysInterval();
    [DispIdAttribute("25")]
public abstract virtual void set_DaysInterval(short value);
}
[CompilerGeneratedAttribute]
[GuidAttribute("4C3D624D-FD6B-49A3-B9B7-09CB3CD3F047")]
[TypeIdentifierAttribute]
[InterfaceTypeAttribute("2")]
public interface Microsoft.VisualStudio.ExtensionEngine.COM.TaskScheduler.IExecAction {
    [DispIdAttribute("10")]
public string Path { get; public set; }
    public abstract virtual void _VtblGap1_3();
    [DispIdAttribute("10")]
public abstract virtual string get_Path();
    [DispIdAttribute("10")]
public abstract virtual void set_Path(string value);
}
[CompilerGeneratedAttribute]
[GuidAttribute("D98D51E5-C9B4-496A-A9C1-18980261CF0F")]
[TypeIdentifierAttribute]
[InterfaceTypeAttribute("2")]
public interface Microsoft.VisualStudio.ExtensionEngine.COM.TaskScheduler.IPrincipal {
    [DispIdAttribute("3")]
public string UserId { get; public set; }
    [DispIdAttribute("4")]
public _TASK_LOGON_TYPE LogonType { get; public set; }
    public abstract virtual void _VtblGap1_4();
    [DispIdAttribute("3")]
public abstract virtual string get_UserId();
    [DispIdAttribute("3")]
public abstract virtual void set_UserId(string value);
    [DispIdAttribute("4")]
public abstract virtual _TASK_LOGON_TYPE get_LogonType();
    [DispIdAttribute("4")]
public abstract virtual void set_LogonType(_TASK_LOGON_TYPE value);
}
[CompilerGeneratedAttribute]
[GuidAttribute("9C86F320-DEE3-4DD1-B972-A303F26B061E")]
[DefaultMemberAttribute("Path")]
[TypeIdentifierAttribute]
[InterfaceTypeAttribute("2")]
public interface Microsoft.VisualStudio.ExtensionEngine.COM.TaskScheduler.IRegisteredTask {
    [DispIdAttribute("1")]
public string Name { get; }
    [DispIdAttribute("0")]
public string Path { get; }
    [DispIdAttribute("13")]
public ITaskDefinition Definition { get; }
    [DispIdAttribute("1")]
public abstract virtual string get_Name();
    [DispIdAttribute("0")]
public abstract virtual string get_Path();
    public abstract virtual void _VtblGap1_10();
    [DispIdAttribute("13")]
public abstract virtual ITaskDefinition get_Definition();
}
[CompilerGeneratedAttribute]
[DefaultMemberAttribute("Item")]
[GuidAttribute("86627EB4-42A7-41E4-A4D9-AC33A72F2D52")]
[TypeIdentifierAttribute]
[InterfaceTypeAttribute("2")]
public interface Microsoft.VisualStudio.ExtensionEngine.COM.TaskScheduler.IRegisteredTaskCollection {
    public abstract virtual void _VtblGap1_2();
    [DispIdAttribute("-4")]
public abstract virtual IEnumerator GetEnumerator();
}
[CompilerGeneratedAttribute]
[GuidAttribute("416D8B73-CB41-4EA1-805C-9BE9A5AC4A74")]
[TypeIdentifierAttribute]
[InterfaceTypeAttribute("2")]
public interface Microsoft.VisualStudio.ExtensionEngine.COM.TaskScheduler.IRegistrationInfo {
    [DispIdAttribute("2")]
public string Author { get; public set; }
    public abstract virtual void _VtblGap1_2();
    [DispIdAttribute("2")]
public abstract virtual string get_Author();
    [DispIdAttribute("2")]
public abstract virtual void set_Author(string value);
}
[CompilerGeneratedAttribute]
[GuidAttribute("F5BC8FC5-536D-4F77-B852-FBC1356FDEB6")]
[TypeIdentifierAttribute]
[InterfaceTypeAttribute("2")]
public interface Microsoft.VisualStudio.ExtensionEngine.COM.TaskScheduler.ITaskDefinition {
    [DispIdAttribute("1")]
public IRegistrationInfo RegistrationInfo { get; public set; }
    [DispIdAttribute("2")]
public ITriggerCollection Triggers { get; public set; }
    [DispIdAttribute("7")]
public ITaskSettings Settings { get; public set; }
    [DispIdAttribute("12")]
public IPrincipal Principal { get; public set; }
    [DispIdAttribute("13")]
public IActionCollection Actions { get; public set; }
    [DispIdAttribute("1")]
public abstract virtual IRegistrationInfo get_RegistrationInfo();
    [DispIdAttribute("1")]
public abstract virtual void set_RegistrationInfo(IRegistrationInfo value);
    [DispIdAttribute("2")]
public abstract virtual ITriggerCollection get_Triggers();
    [DispIdAttribute("2")]
public abstract virtual void set_Triggers(ITriggerCollection value);
    [DispIdAttribute("7")]
public abstract virtual ITaskSettings get_Settings();
    [DispIdAttribute("7")]
public abstract virtual void set_Settings(ITaskSettings value);
    public abstract virtual void _VtblGap1_2();
    [DispIdAttribute("12")]
public abstract virtual IPrincipal get_Principal();
    [DispIdAttribute("12")]
public abstract virtual void set_Principal(IPrincipal value);
    [DispIdAttribute("13")]
public abstract virtual IActionCollection get_Actions();
    [DispIdAttribute("13")]
public abstract virtual void set_Actions(IActionCollection value);
}
[CompilerGeneratedAttribute]
[DefaultMemberAttribute("Path")]
[GuidAttribute("8CFAC062-A080-4C15-9A88-AA7C2AF80DFC")]
[TypeIdentifierAttribute]
[InterfaceTypeAttribute("2")]
public interface Microsoft.VisualStudio.ExtensionEngine.COM.TaskScheduler.ITaskFolder {
    [DispIdAttribute("0")]
public string Path { get; }
    public abstract virtual void _VtblGap1_1();
    [DispIdAttribute("0")]
public abstract virtual string get_Path();
    public abstract virtual void _VtblGap2_2();
    [DispIdAttribute("5")]
public abstract virtual ITaskFolder CreateFolder(string subFolderName, object sddl);
    public abstract virtual void _VtblGap3_2();
    [DispIdAttribute("8")]
public abstract virtual IRegisteredTaskCollection GetTasks(int flags);
    [DispIdAttribute("9")]
public abstract virtual void DeleteTask(string Name, int flags);
    public abstract virtual void _VtblGap4_1();
    [DispIdAttribute("11")]
public abstract virtual IRegisteredTask RegisterTaskDefinition(string Path, ITaskDefinition pDefinition, int flags, object UserId, object password, _TASK_LOGON_TYPE LogonType, object sddl);
}
[CompilerGeneratedAttribute]
[DefaultMemberAttribute("TargetServer")]
[GuidAttribute("2FABA4C7-4DA9-4013-9697-20CC3FD40F85")]
[TypeIdentifierAttribute]
[InterfaceTypeAttribute("2")]
public interface Microsoft.VisualStudio.ExtensionEngine.COM.TaskScheduler.ITaskService {
    [DispIdAttribute("5")]
public bool Connected { get; }
    [DispIdAttribute("0")]
public string TargetServer { get; }
    [DispIdAttribute("1")]
public abstract virtual ITaskFolder GetFolder(string Path);
    public abstract virtual void _VtblGap1_1();
    [DispIdAttribute("3")]
public abstract virtual ITaskDefinition NewTask(UInt32 flags);
    [DispIdAttribute("4")]
public abstract virtual void Connect(object serverName, object user, object domain, object password);
    [DispIdAttribute("5")]
public abstract virtual bool get_Connected();
    [DispIdAttribute("0")]
public abstract virtual string get_TargetServer();
}
[CompilerGeneratedAttribute]
[GuidAttribute("8FD4711D-2D02-4C8C-87E3-EFF699DE127E")]
[TypeIdentifierAttribute]
[InterfaceTypeAttribute("2")]
public interface Microsoft.VisualStudio.ExtensionEngine.COM.TaskScheduler.ITaskSettings {
    [DispIdAttribute("6")]
public _TASK_INSTANCES_POLICY MultipleInstances { get; public set; }
    [DispIdAttribute("8")]
public bool DisallowStartIfOnBatteries { get; public set; }
    [DispIdAttribute("10")]
public bool StartWhenAvailable { get; public set; }
    [DispIdAttribute("18")]
public bool Hidden { get; public set; }
    public abstract virtual void _VtblGap1_6();
    [DispIdAttribute("6")]
public abstract virtual _TASK_INSTANCES_POLICY get_MultipleInstances();
    [DispIdAttribute("6")]
public abstract virtual void set_MultipleInstances(_TASK_INSTANCES_POLICY value);
    public abstract virtual void _VtblGap2_2();
    [DispIdAttribute("8")]
public abstract virtual bool get_DisallowStartIfOnBatteries();
    [DispIdAttribute("8")]
public abstract virtual void set_DisallowStartIfOnBatteries(bool value);
    public abstract virtual void _VtblGap3_2();
    [DispIdAttribute("10")]
public abstract virtual bool get_StartWhenAvailable();
    [DispIdAttribute("10")]
public abstract virtual void set_StartWhenAvailable(bool value);
    public abstract virtual void _VtblGap4_14();
    [DispIdAttribute("18")]
public abstract virtual bool get_Hidden();
    [DispIdAttribute("18")]
public abstract virtual void set_Hidden(bool value);
}
[CompilerGeneratedAttribute]
[GuidAttribute("09941815-EA89-4B5B-89E0-2A773801FAC3")]
[TypeIdentifierAttribute]
[InterfaceTypeAttribute("2")]
public interface Microsoft.VisualStudio.ExtensionEngine.COM.TaskScheduler.ITrigger {
}
[CompilerGeneratedAttribute]
[DefaultMemberAttribute("Item")]
[GuidAttribute("85DF5081-1B24-4F32-878A-D9D14DF4CB77")]
[TypeIdentifierAttribute]
[InterfaceTypeAttribute("2")]
public interface Microsoft.VisualStudio.ExtensionEngine.COM.TaskScheduler.ITriggerCollection {
    public abstract virtual void _VtblGap1_3();
    [DispIdAttribute("2")]
public abstract virtual ITrigger Create(_TASK_TRIGGER_TYPE2 Type);
}
public static class Microsoft.VisualStudio.ExtensionEngine.COM.TaskScheduler.TaskSchedulerFactory : object {
    public static string TaskServiceClsId;
    public static string ITaskServiceIid;
    public static ITaskService CreateTaskScheduler();
}
[ExtensionAttribute]
public static class Microsoft.VisualStudio.ExtensionEngine.Common.ExtensionUtils : object {
    [ExtensionAttribute]
public static string GetInstalledExtensionName(IExtensionEngine engine, string identifier);
    public static bool TryGetInstalledExtension(IExtensionEngine engine, string identifier, IInstalledExtension& result);
    public static IInstalledExtension GetInstalledExtension(IExtensionEngine engine, string identifier);
    public static string NormalizeInstallPath(string installPath);
}
[ExtensionAttribute]
public static class Microsoft.VisualStudio.ExtensionEngineContract.Common.LinqExtensions : object {
    [ExtensionAttribute]
public static IDictionary`2<TKey, TValue> ToDictionaryMax(IEnumerable`1<TInput> input, Func`2<TInput, TKey> keySelector, Func`2<TInput, TValue> valueSelector, Func`2<TValue, TMax> maxSelector);
    [ExtensionAttribute]
public static IDictionary`2<TKey, IEnumerable`1<TValue>> ToDictionaryDupes(IEnumerable`1<TInput> input, Func`2<TInput, TKey> keySelector, Func`2<TInput, TValue> valueSelector);
}
public abstract class Microsoft.VisualStudio.ExtensionEngineContract.Def.ExtensionReferenceBase : ExtensionRequirementBase {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private Uri <MoreInfoUrl>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <CanAutoDownload>k__BackingField;
    [CompilerGeneratedAttribute]
private string <NestedExtensionPath>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsRequired>k__BackingField;
    public string Name { get; public set; }
    public Uri MoreInfoUrl { get; public set; }
    public bool CanAutoDownload { get; public set; }
    public string NestedExtensionPath { get; public set; }
    public bool IsRequired { get; public set; }
    public ExtensionReferenceBase(IExtensionRequirement reference);
    [CompilerGeneratedAttribute]
public sealed virtual string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public sealed virtual Uri get_MoreInfoUrl();
    [CompilerGeneratedAttribute]
public void set_MoreInfoUrl(Uri value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_CanAutoDownload();
    [CompilerGeneratedAttribute]
public void set_CanAutoDownload(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_NestedExtensionPath();
    [CompilerGeneratedAttribute]
public void set_NestedExtensionPath(string value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_IsRequired();
    [CompilerGeneratedAttribute]
public void set_IsRequired(bool value);
}
public class Microsoft.VisualStudio.ExtensionEngineContract.Def.ExtensionRequirementBase : object {
    private VersionRange _version;
    private IDictionary`2<string, string> _attributes;
    [CompilerGeneratedAttribute]
private string <Identifier>k__BackingField;
    [CompilerGeneratedAttribute]
private ProductArchitecture <ProductArchitecture>k__BackingField;
    public string Identifier { get; public set; }
    public VersionRange VersionRange { get; public set; }
    public ProductArchitecture ProductArchitecture { get; public set; }
    public IDictionary`2<string, string> Attributes { get; public set; }
    public ExtensionRequirementBase(IExtensionRequirement requirement);
    [CompilerGeneratedAttribute]
public sealed virtual string get_Identifier();
    [CompilerGeneratedAttribute]
public void set_Identifier(string value);
    public sealed virtual VersionRange get_VersionRange();
    public void set_VersionRange(VersionRange value);
    [CompilerGeneratedAttribute]
public sealed virtual ProductArchitecture get_ProductArchitecture();
    [CompilerGeneratedAttribute]
public void set_ProductArchitecture(ProductArchitecture value);
    public sealed virtual IDictionary`2<string, string> get_Attributes();
    public void set_Attributes(IDictionary`2<string, string> value);
}
public interface Microsoft.VisualStudio.ExtensionEngineContract.Def.IEngineSettings {
    public IEnumerable`1<IExtensionRepositoryConfig> AllRepositories { get; }
    public int ConfigurationRepositoryLimit { get; }
    public IExtensionRepository GetVSGalleryRepo { get; }
    public bool IsUseRestAPIForMarketPlaceFeatureEnabled { get; }
    public bool ShouldAutoUpdatePerMachine { get; public set; }
    public string TestMarketPlaceUri { get; }
    public ExtensionRepositoryConfigList UserRepositories { get; public set; }
    public int UserSettingsRepositoryLimit { get; }
    public string VSMarketPlaceUri { get; }
    public abstract virtual IEnumerable`1<IExtensionRepositoryConfig> get_AllRepositories();
    public abstract virtual int get_ConfigurationRepositoryLimit();
    public abstract virtual IExtensionRepository get_GetVSGalleryRepo();
    public abstract virtual bool get_IsUseRestAPIForMarketPlaceFeatureEnabled();
    public abstract virtual bool get_ShouldAutoUpdatePerMachine();
    public abstract virtual void set_ShouldAutoUpdatePerMachine(bool value);
    public abstract virtual string get_TestMarketPlaceUri();
    public abstract virtual ExtensionRepositoryConfigList get_UserRepositories();
    public abstract virtual void set_UserRepositories(ExtensionRepositoryConfigList value);
    public abstract virtual int get_UserSettingsRepositoryLimit();
    public abstract virtual string get_VSMarketPlaceUri();
    public abstract virtual bool GetExtensionAutoUpdateEnabled(string extensionIdentifier);
    public abstract virtual bool IsMicrosoftGallery(IExtensionRepositoryConfig config);
    public abstract virtual void SetExtensionAutoUpdateEnabled(string extensionIdentifier, bool shouldAutoUpdate);
}
public interface Microsoft.VisualStudio.ExtensionEngineContract.Def.IUpdateManager {
    public IEnumerable`1<Lazy`2<IExtensionRepositoryFactory, IDictionary`2<string, object>>> ExtensionRepositoryFactories { get; }
    public abstract virtual IEnumerable`1<Lazy`2<IExtensionRepositoryFactory, IDictionary`2<string, object>>> get_ExtensionRepositoryFactories();
}
public static class Microsoft.VisualStudio.ExtensionEngineContract.Def.RetrievableEngineTypes : object {
    public static string ExtensionEngineDllName;
    public static string EngineSettings;
    public static string UpdateManager;
    public static string ExtensionEngine;
    public static string ClientEnabledSettings;
    public static string ExtensionEngineDll;
    public static string InstallableExtension;
    public static string AutoUpdateManager;
}
public class Microsoft.VisualStudio.ExtensionEngineContract.DisposalWrapper`1 : object {
    private Action`1<TObject> cleanup;
    private bool disposed;
    private TObject value;
    public DisposalWrapper`1(TObject value, Action`1<TObject> setup, Action`1<TObject> cleanup);
    public sealed virtual void Dispose();
    public TObject GetValue();
}
internal class Microsoft.VisualStudio.ExtensionEngineContract.Dotnet.Stubs.CodeMarkerEvent : object {
    public static int perfExtensionManagerTryGetInstalledExtensionStart;
    public static int perfExtensionManagerTryGetInstalledExtensionEnd;
    private static CodeMarkerEvent();
}
internal class Microsoft.VisualStudio.ExtensionEngineContract.Dotnet.Stubs.CodeMarkerStartEnd : object {
    public CodeMarkerStartEnd(int arg1, int arg2);
    public sealed virtual void Dispose();
}
[ExtensionAttribute]
public static class Microsoft.VisualStudio.ExtensionEngineContract.ExtensionExtensionMethods : object {
    [ExtensionAttribute]
public static bool IsVsExtensibilityExtension(IExtension extension);
}
public static class Microsoft.VisualStudio.ExtensionEngineContract.Impl.EngineContractUtilities : object {
    public static Version VersionCutOffForSetupEngineInstaller;
    public static string DependencyGraphContructionErrorHelpFwLink;
    private static SemaphoreSlim ExcludedDirsSemaphore;
    private static string ExcludedDirectoriesFileName;
    private static string baseRunUpdateConfigMutexName;
    private static string baseQueueUpdateConfigMutexName;
    private static int shutdownPollingInterval;
    public static long LastAllUserExtensionsAutoUpdatedTime { get; public set; }
    private static RegistryKey LocalRegKey { get; }
    private static EngineContractUtilities();
    public static bool IsIOException(Exception e);
    private static string GetUserAppDataFolder(ISettingsManager settingsManager);
    public static string GetPathForExclusionListFile(ISettingsManager settingsManager);
    private static DisposalWrapper`1<SemaphoreSlim> GetExclusionListSemaphoreWrapper();
    public static IEnumerable`1<string> GetExclusionList(ISettingsManager settingsManager);
    public static void DeleteFile(string path);
    public static string TrimPathEnd(string path);
    public static void WriteExclusionList(ISettingsManager settingsManager, IEnumerable`1<string> exclusionList);
    [AsyncStateMachineAttribute("Microsoft.VisualStudio.ExtensionEngineContract.Impl.EngineContractUtilities/<CleanupExcludedDirectoriesAsync>d__12")]
public static Task CleanupExcludedDirectoriesAsync(ISettingsManager settingsManager, CancellationToken cancellationToken);
    public static bool PathsAreEqual(string path, string other);
    public static bool TryGetProductVersionFromPathPinnedMinor(string path, Version& productVersion);
    public static Version PinMinorVersion(Version version);
    public static bool TryGetProductVersionFromPath(string path, Version& productVersion);
    public static bool TryGetProductVersion(string productVersionString, Version& productVersion);
    private static string GetMutexNameForCurrentInstance(string baseMutexName, string appidPath);
    [AsyncStateMachineAttribute("Microsoft.VisualStudio.ExtensionEngineContract.Impl.EngineContractUtilities/<RunUpdateConfigurationAsync>d__22")]
public static Task RunUpdateConfigurationAsync(string appidPath, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.VisualStudio.ExtensionEngineContract.Impl.EngineContractUtilities/<RunUpdateConfigurationCoreAsync>d__23")]
private static Task RunUpdateConfigurationCoreAsync(string appidPath, bool isClientUpdate, CancellationToken cancellationToken);
    public static long get_LastAllUserExtensionsAutoUpdatedTime();
    public static void set_LastAllUserExtensionsAutoUpdatedTime(long value);
    private static RegistryKey GetExtensionsAutoUpdatedRegistryKey(bool writable);
    private static RegistryKey get_LocalRegKey();
    private static string ExtensionsAutoUpdatedRegKeyPath();
    public static bool ContainsPath(string fullPath, string path);
    private static string NormalizePath(string path, bool addBackslash);
    private static string RemoveAdjacentChars(string value, char ch, int startIndex);
    public static bool ListContainsPathOrParentPath(IEnumerable`1<string> directories, string path);
    public static void NavigateToUri(Uri targetUri);
    public static string GetFullExceptionMessage(Exception exception, string errorTitle);
    public static string GetFullExceptionMessageForAggregate(AggregateException aggregate, string errorTitle);
}
public class Microsoft.VisualStudio.ExtensionEngineContract.Impl.LinearRetryPolicy : RetryPolicy {
    private UInt32 maxAttempts;
    private UInt32 backoffFactor;
    public LinearRetryPolicy(UInt32 maxAttempts, UInt32 backoffFactor);
    [AsyncStateMachineAttribute("Microsoft.VisualStudio.ExtensionEngineContract.Impl.LinearRetryPolicy/<ExecuteRetryOperationAsync>d__3`1")]
public virtual Task`1<TOutput> ExecuteRetryOperationAsync(Func`1<TOutput> operation, CancellationToken cancellationToken);
}
public abstract class Microsoft.VisualStudio.ExtensionEngineContract.Impl.RetryPolicy : object {
    public abstract virtual Task`1<TOutput> ExecuteRetryOperationAsync(Func`1<TOutput> operation, CancellationToken cancellationToken);
    public Task`1<FileStream> OpenFileWithRetriesAsync(string filePath, FileMode fileMode, FileAccess access, CancellationToken cancellationToken);
}
[ExtensionAttribute]
public static class Microsoft.VisualStudio.ExtensionEngineContract.TaskExtensions : object {
    [ExtensionAttribute]
public static void FileAndForget(JoinableTask task, string faultEventName, string faultDescription, JoinableTaskFactory joinableTaskFactory, Func`2<Exception, bool> fileOnlyIf);
    [ExtensionAttribute]
public static void FileAndForget(Task task, string faultEventName, string faultDescription, JoinableTaskFactory joinableTaskFactory, Func`2<Exception, bool> fileOnlyIf);
}
public class Microsoft.VisualStudio.ExtensionManager.AlreadyInstalledException : ExtensionException {
    public int ErrorCode { get; }
    public AlreadyInstalledException(string message);
    public AlreadyInstalledException(string message, Exception inner);
    protected AlreadyInstalledException(SerializationInfo info, StreamingContext context);
    public virtual int get_ErrorCode();
}
public enum Microsoft.VisualStudio.ExtensionManager.AutoUpdateProgress : Enum {
    public int value__;
    public static AutoUpdateProgress NotStarted;
    public static AutoUpdateProgress Downloading;
    public static AutoUpdateProgress Downloaded;
    public static AutoUpdateProgress Installing;
    public static AutoUpdateProgress Installed;
    public static AutoUpdateProgress DownloadCancelled;
    public static AutoUpdateProgress DownloadFailed;
    public static AutoUpdateProgress InstallCancelled;
    public static AutoUpdateProgress InstallFailed;
    public static AutoUpdateProgress InstallCancelledPrerequisitesMissing;
    public static AutoUpdateProgress InstallCancelledPrerequisitesUnsatisfiable;
}
public enum Microsoft.VisualStudio.ExtensionManager.AutoUpdateState : Enum {
    public int value__;
    public static AutoUpdateState Disabled;
    public static AutoUpdateState MinValue;
    public static AutoUpdateState Enabled;
    public static AutoUpdateState NotApplicable;
    public static AutoUpdateState MaxValue;
    public static AutoUpdateState Unknown;
}
public class Microsoft.VisualStudio.ExtensionManager.BreaksExistingExtensionsException : ExtensionException {
    [CompilerGeneratedAttribute]
private IEnumerable`1<IExtension> <ImpactedExtensions>k__BackingField;
    public int ErrorCode { get; }
    public IEnumerable`1<IExtension> ImpactedExtensions { get; }
    public BreaksExistingExtensionsException(string message);
    public BreaksExistingExtensionsException(string message, IEnumerable`1<IExtension> impactedExtensions);
    public BreaksExistingExtensionsException(IEnumerable`1<IExtension> impactedExtensions);
    public BreaksExistingExtensionsException(string message, Exception inner);
    public virtual int get_ErrorCode();
    [CompilerGeneratedAttribute]
public IEnumerable`1<IExtension> get_ImpactedExtensions();
}
public class Microsoft.VisualStudio.ExtensionManager.CannotUninstallOrphanedComponentsException : ExtensionException {
    public int ErrorCode { get; }
    public CannotUninstallOrphanedComponentsException(string message);
    public CannotUninstallOrphanedComponentsException(string message, Exception inner);
    protected CannotUninstallOrphanedComponentsException(SerializationInfo info, StreamingContext context);
    public virtual int get_ErrorCode();
}
public class Microsoft.VisualStudio.ExtensionManager.CorruptInstanceException : ExtensionException {
    public int ErrorCode { get; }
    public CorruptInstanceException(string message);
    public CorruptInstanceException(string message, Exception inner);
    public virtual int get_ErrorCode();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.VisualStudio.ExtensionManager.Def.ExtensionManagerSessionAction : object {
    [CompilerGeneratedAttribute]
private ExtensionManagerSessionActionType <ActionType>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTimeOffset <TimeStamp>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Identifier>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private object <OptionalDetail>k__BackingField;
    public ExtensionManagerSessionActionType ActionType { get; }
    public DateTimeOffset TimeStamp { get; }
    public string Identifier { get; }
    [NullableAttribute("2")]
public object OptionalDetail { get; }
    public ExtensionManagerSessionAction(ExtensionManagerSessionActionType actionType, string identifier, object optionalDetail);
    [CompilerGeneratedAttribute]
public ExtensionManagerSessionActionType get_ActionType();
    [CompilerGeneratedAttribute]
public DateTimeOffset get_TimeStamp();
    [CompilerGeneratedAttribute]
public string get_Identifier();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public object get_OptionalDetail();
}
public enum Microsoft.VisualStudio.ExtensionManager.Def.ExtensionManagerSessionActionType : Enum {
    public int value__;
    public static ExtensionManagerSessionActionType InstallOrDownload;
    public static ExtensionManagerSessionActionType Uninstall;
    public static ExtensionManagerSessionActionType Update;
    public static ExtensionManagerSessionActionType Enable;
    public static ExtensionManagerSessionActionType Disable;
    public static ExtensionManagerSessionActionType CancelPendingOperations;
    public static ExtensionManagerSessionActionType UpdateSort;
    public static ExtensionManagerSessionActionType CancelInstall;
    public static ExtensionManagerSessionActionType CancelDownload;
    public static ExtensionManagerSessionActionType CancelUninstall;
    public static ExtensionManagerSessionActionType CancelUpdate;
    public static ExtensionManagerSessionActionType FilterCategory;
    public static ExtensionManagerSessionActionType FilterSubCategory;
    public static ExtensionManagerSessionActionType FilterPreviewExtensions;
    public static ExtensionManagerSessionActionType Search;
    public static ExtensionManagerSessionActionType OpenHyperlink;
    public static ExtensionManagerSessionActionType LoadExtensionPage;
    public static ExtensionManagerSessionActionType OpenRoaming;
    public static ExtensionManagerSessionActionType StartRoaming;
    public static ExtensionManagerSessionActionType StopRoaming;
    public static ExtensionManagerSessionActionType InstallRoaming;
}
[NullableContextAttribute("2")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class Microsoft.VisualStudio.ExtensionManager.Def.ExtensionManagerSessionData : List`1<ExtensionManagerSessionAction> {
    [CompilerGeneratedAttribute]
private bool <FromSuggestedExtension>k__BackingField;
    [CompilerGeneratedAttribute]
private Guid <SessionGuid>k__BackingField;
    public bool FromSuggestedExtension { get; public set; }
    public Guid SessionGuid { get; public set; }
    public ExtensionManagerSessionData(string defaultSearchTerm);
    [CompilerGeneratedAttribute]
public bool get_FromSuggestedExtension();
    [CompilerGeneratedAttribute]
public void set_FromSuggestedExtension(bool value);
    [CompilerGeneratedAttribute]
public Guid get_SessionGuid();
    [CompilerGeneratedAttribute]
public void set_SessionGuid(Guid value);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
[RequiredMemberAttribute]
public class Microsoft.VisualStudio.ExtensionManager.Def.Settings.AssemblyApiUsage : object {
    [NullableAttribute("1")]
[CompilerGeneratedAttribute]
private string <AssemblyName>k__BackingField;
    [CompilerGeneratedAttribute]
private Version <AssemblyVersion>k__BackingField;
    [CompilerGeneratedAttribute]
private Version <AssemblyFileVersion>k__BackingField;
    [CompilerGeneratedAttribute]
private long <FileSize>k__BackingField;
    [CompilerGeneratedAttribute]
private string <PublicKeyToken>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private ImmutableArray`1<string> <DocIds>k__BackingField;
    [CompilerGeneratedAttribute]
private Exception <ScanFailure>k__BackingField;
    [NullableAttribute("1")]
[RequiredMemberAttribute]
public string AssemblyName { get; public set; }
    public Version AssemblyVersion { get; public set; }
    public Version AssemblyFileVersion { get; public set; }
    [RequiredMemberAttribute]
public long FileSize { get; public set; }
    public string PublicKeyToken { get; public set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[RequiredMemberAttribute]
public ImmutableArray`1<string> DocIds { get; public set; }
    public Exception ScanFailure { get; public set; }
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public string get_AssemblyName();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_AssemblyName(string value);
    [CompilerGeneratedAttribute]
public Version get_AssemblyVersion();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_AssemblyVersion(Version value);
    [CompilerGeneratedAttribute]
public Version get_AssemblyFileVersion();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_AssemblyFileVersion(Version value);
    [CompilerGeneratedAttribute]
public long get_FileSize();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_FileSize(long value);
    [CompilerGeneratedAttribute]
public string get_PublicKeyToken();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_PublicKeyToken(string value);
    [CompilerGeneratedAttribute]
public ImmutableArray`1<string> get_DocIds();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_DocIds(ImmutableArray`1<string> value);
    [CompilerGeneratedAttribute]
public Exception get_ScanFailure();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_ScanFailure(Exception value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[RequiredMemberAttribute]
public class Microsoft.VisualStudio.ExtensionManager.Def.Settings.ExtensionApiUsage : object {
    [CompilerGeneratedAttribute]
private ExtensionMoniker <Moniker>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyCollection`1<AssemblyApiUsage> <Assemblies>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<TimeSpan> <ScanCost>k__BackingField;
    [RequiredMemberAttribute]
public ExtensionMoniker Moniker { get; public set; }
    [RequiredMemberAttribute]
public IReadOnlyCollection`1<AssemblyApiUsage> Assemblies { get; public set; }
    public Nullable`1<TimeSpan> ScanCost { get; public set; }
    [CompilerGeneratedAttribute]
public ExtensionMoniker get_Moniker();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_Moniker(ExtensionMoniker value);
    [CompilerGeneratedAttribute]
public IReadOnlyCollection`1<AssemblyApiUsage> get_Assemblies();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_Assemblies(IReadOnlyCollection`1<AssemblyApiUsage> value);
    [CompilerGeneratedAttribute]
public Nullable`1<TimeSpan> get_ScanCost();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_ScanCost(Nullable`1<TimeSpan> value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[RequiredMemberAttribute]
public class Microsoft.VisualStudio.ExtensionManager.Def.Settings.ExtensionsApiUsage : object {
    [CompilerGeneratedAttribute]
private IReadOnlyCollection`1<ExtensionApiUsage> <Extensions>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private ImmutableArray`1<string> <ApiUsageScopes>k__BackingField;
    [RequiredMemberAttribute]
public IReadOnlyCollection`1<ExtensionApiUsage> Extensions { get; public set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[RequiredMemberAttribute]
public ImmutableArray`1<string> ApiUsageScopes { get; public set; }
    [CompilerGeneratedAttribute]
public IReadOnlyCollection`1<ExtensionApiUsage> get_Extensions();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_Extensions(IReadOnlyCollection`1<ExtensionApiUsage> value);
    [CompilerGeneratedAttribute]
public ImmutableArray`1<string> get_ApiUsageScopes();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_ApiUsageScopes(ImmutableArray`1<string> value);
}
public interface Microsoft.VisualStudio.ExtensionManager.Def.Settings.IInstalledExtensionList {
    public abstract virtual void Add(IInstalledExtension extension);
    public abstract virtual void Remove(IInstalledExtension extension);
    public abstract virtual void SetEnabledState(IInstalledExtension extension, EnabledState state);
    public abstract virtual void SetAutoUpdateState(IInstalledExtension extension, AutoUpdateState autoUpdate);
    public abstract virtual void SetPackComponent(IInstalledExtension extension, bool isPackComponent);
}
public interface Microsoft.VisualStudio.ExtensionManager.Def.Settings.IInstalledExtensionSettingsList {
    public List`1<IInstalledExtension> ExtensionsToDelete { get; }
    public RestartReason RestartRequired { get; }
    public abstract virtual List`1<IInstalledExtension> get_ExtensionsToDelete();
    public abstract virtual RestartReason get_RestartRequired();
    public abstract virtual void Add(IInstalledExtension extension, CacheMode updateMode);
    public abstract virtual bool CanBypassScan(long extensionsChangedTimestamp, long cacheTimestamp, bool canBypassCacheVersionCheck);
    public abstract virtual void DoneLoading();
    public abstract virtual void EnsureCacheVersionUpToDate(CacheMode updateMode);
    public abstract virtual IList`1<string> GetAssetLocations(Func`2<EnabledState, bool> extensionFilter, string assetTypeName, IDictionary`2<string, string> attributes, IList`1<string> uniqueStrings, IList`1<string> extensionNames);
    public abstract virtual void GetAssetProperties(string assetTypeName, IList`1<string> assetNames, IList`1<string> versions, IList`1<string> authors, IList`1<string> extensionIDs);
    public abstract virtual long GetCacheLastUpdated(bool canBypassCacheVersionCheck);
    public abstract virtual bool IsCacheVersionCompatible();
    public abstract virtual bool IsMessagePackRecreated();
    public abstract virtual string GetContentLocation(string installPath, IExtensionContent content);
    public abstract virtual IEnumerable`1<string> GetEnabledAssetLocations(string assetTypeName);
    public abstract virtual IInstalledExtension GetExtensionContainingPackageGuid(Guid packageGuid);
    public abstract virtual IInstalledExtension GetExtensionFromInstallPath(string installPath);
    public abstract virtual IInstalledExtension GetExtensionById(string vsixIdentifier);
    public abstract virtual IEnumerable`1<IInstalledExtension> GetExtensionPacks(IInstalledExtension extension);
    public abstract virtual void GetExtensionProperties(IList`1<string> extensionNames, IList`1<string> versions, IList`1<string> authors, IList`1<string> contentLocations, IList`1<string> extensionIDs);
    public abstract virtual IEnumerable`1<IInstalledExtension> GetExtensions(Func`2<EnabledState, bool> enabledFilter, string assetTypeName, bool includeOtherExtensionAssetTypes);
    public abstract virtual IInstalledExtensionList GetInMemoryList();
    public abstract virtual long GetLastScanTime();
    public abstract virtual Task`1<ValueTuple`3<IEnumerable`1<IInstalledExtension>, ExtensionChangedState, bool>> GetLoadableAndEnableExtensionsFromScanResultAsync(ScanResult scanResult, CancellationToken cancellationToken, CacheMode updateMode, Nullable`1<bool> isCacheVersionValid, bool updateOnChangesDetectedOnly);
    public abstract virtual Task`1<ExtensionChangedState> LoadExtensionsFromCacheAsync(Nullable`1<bool> isCacheVersionValid, CancellationToken cancellationToken, bool forceRefresh, CacheMode updateMode);
    public abstract virtual void Remove(IInstalledExtension extension, CacheMode updateMode);
    public abstract virtual Task`1<ScanResult> ScanInstalledExtensionsAsync(bool safeMode, bool isSdkList, ITelemetryLogger telemetryLogger, object telemetryObject);
    public abstract virtual void SetAutoUpdateState(IInstalledExtension extension, AutoUpdateState autoUpdate, CacheMode updateMode);
    public abstract virtual void SetEnabledState(IInstalledExtension extension, EnabledState state, CacheMode updateMode);
    public abstract virtual void SetPackComponent(IInstalledExtension extension, bool isPackComponent, CacheMode updateMode);
    public abstract virtual IEnumerable`1<IInstalledExtension> GetHotloadableExtensions(bool perMachine);
    public abstract virtual long GetLastHotloadTime(bool perMachine);
    public abstract virtual void SetLastHotloadTime(DateTimeOffset dateTime, bool perMachine);
}
public interface Microsoft.VisualStudio.ExtensionManager.Def.Settings.IReadOnlyInstalledExtensionList {
    public abstract virtual IEnumerable`1<IInstalledExtension> GetImmediateDependents(IInstalledExtension extension, bool nestedOnly);
    public abstract virtual bool HasDependentExtensions(IInstalledExtension extension);
    public abstract virtual bool TryGetValue(string identifier, IInstalledExtension& result);
    public abstract virtual bool TryGetDependentExtensions(string identifier, IEnumerable`1& listOfDependantExtensions);
    public abstract virtual bool Contains(string identifier);
    public abstract virtual IReadOnlyInstalledExtensionList AsReadOnly();
}
public class Microsoft.VisualStudio.ExtensionManager.DependencyException : ExtensionException {
    public int ErrorCode { get; }
    public DependencyException(string message);
    public DependencyException(string message, Exception inner);
    protected DependencyException(SerializationInfo info, StreamingContext context);
    public virtual int get_ErrorCode();
}
public class Microsoft.VisualStudio.ExtensionManager.DirectoryExistsException : ExtensionException {
    public int ErrorCode { get; }
    public DirectoryExistsException(string message);
    public DirectoryExistsException(string message, Exception inner);
    public virtual int get_ErrorCode();
}
public class Microsoft.VisualStudio.ExtensionManager.DisposeAction : object {
    private Action[] _exitActions;
    public DisposeAction(IDisposable[] disposables);
    public DisposeAction(Action[] exitActions);
    public void SetDisposeAction(Action action);
    public sealed virtual void Dispose();
}
public class Microsoft.VisualStudio.ExtensionManager.DownloadCompletedEventArgs : AsyncCompletedEventArgs {
    private IInstallableExtension payload;
    public IInstallableExtension Payload { get; }
    public DownloadCompletedEventArgs(IInstallableExtension payload, Exception exception, bool canceled, Guid jobId);
    public IInstallableExtension get_Payload();
}
public class Microsoft.VisualStudio.ExtensionManager.DownloadProgressChangedEventArgs : ProgressChangedEventArgs {
    private long _bytesReceived;
    private long _totalBytesToReceive;
    public long BytesReceived { get; }
    public long TotalBytesToReceive { get; }
    public DownloadProgressChangedEventArgs(long bytesReceived, long totalBytesToReceive, int progressPercentage, object userState);
    public long get_BytesReceived();
    public long get_TotalBytesToReceive();
}
public enum Microsoft.VisualStudio.ExtensionManager.EnabledState : Enum {
    public int value__;
    public static EnabledState Disabled;
    public static EnabledState Enabled;
    public static EnabledState PendingDisable;
    public static EnabledState PendingEnable;
    public static EnabledState PermanentDisable;
    public static EnabledState Unknown;
}
public static class Microsoft.VisualStudio.ExtensionManager.EngineConstants : object {
    public static string VSIdentifierPrefix;
    public static Version VsixManifestSchemaVersion;
    public static string ExtensionsChangedKey;
    public static string ConfigurationChangedKey;
    public static string ConfigurationChangedReasonKey;
    public static string VSIXManifestFilenameWithoutExtension;
    public static string VSIXLanguagePackManifestExtension;
    public static string VSIXExtensionPackFileExtension;
    public static string VSIXPkgDefFileExtension;
    public static string VSIXManifestExtension;
    public static string VSIXManifestFilename;
    public static string VSIXManifestJsonFilename;
    public static string VSIXManifestJsonUri;
    public static string VSIXClientenabledPkgFileExtension;
    public static string CatalogJsonFilename;
    public static string CatalogJsonUri;
    public static string VSIXLanguagePackManifestFilename;
    public static string SDKManifestFilename;
    public static string AssetVersionTargetAttribute;
    public static string VSGalleryId;
    public static Guid VSGalleryGuid;
    public static string VSMarketPlaceUriDefault;
    public static string EscapedChars;
    public static Version PackageManifestSchemaVersion;
    public static string DotNetFrameworkIdentifier;
    public static string DotNetFrameworkName;
    public static string MPFDependencyStartsWith;
    public static IList`1<XmlElement> EmptyElements;
    public static IDictionary`2<string, string> EmptyAttributes;
    public static string SHA256SignatureMethod;
    public static Version MinimumVersionSupportedForSHA256Verification;
    public static Version DefaultVSVersionForExtensionSDKs;
    public static string SettingsStoreRoot;
    public static string PendingDeletionsCollection;
    public static string ReasonConfigSettingsTime;
    public static string ReasonUserSettingsTime;
    public static string ReasonFileWriteTime;
    public static string ReasonExtensionsChangedTime;
    public static string ReasonIOExceptionUpdatingCache;
    public static string ReasonFileFormatExceptionReadingCache;
    public static string ReasonMissingExtensionManifest;
    public static string ReasonManifestUnauthorizedAccess;
    public static string ReasonCacheScanEmpty;
    public static string ReasonUnknown;
    public static string ConfigurationChangedReasonEngine;
    public static string RepositoriesCollection;
    public static string ExtensionsCacheHashCollection;
    public static string ExtensionsCacheHashKeyBase;
    public static string ExtensionsAutoUpdatedKeyPathFormat;
    public static string ExtensionsAutoUpdatedKey;
    public static string RepositoryProtocol;
    public static string RepositoryProtocol_VSGallery;
    public static string RepositoryProtocol_Sharepoint;
    public static string RepositoryProtocol_AtomFeed;
    public static string RepositoryProtocol_Unknown;
    public static string LoadableExtensionsCollection;
    public static string ExtensionTypesCollection;
    public static string PermanentDisabledExtensionCollection;
    public static string WarningExtensionCollection;
    public static string ExtensionAutoUpdateStateCollection;
    public static string InstalledExtensionsCollection;
    public static string LastUpdatedKey;
    public static string CacheVersionKey;
    public static string LastScanTime;
    public static string LastHotloadTime;
    public static string PerMachine;
    public static string PerUser;
    public static string CertificateInformationFileName;
    public static string MicrosoftAuthorName;
    public static string MicrosoftDevLabsAuthorName;
    public static string VSExtensibilityExtensionRootName;
    public static Dictionary`2<string, ExtensionType> ExtensionTypeMap;
    public static string ExtensionManifestFileName;
    public static IEnumerable`1<string> RestrictedModeEnabledExtensionIdList;
    private static EngineConstants();
}
[ExtensionAttribute]
public static class Microsoft.VisualStudio.ExtensionManager.EngineContractExtensionMethods : object {
    public static string VisualStudioCodeIdentifier;
    private static EngineContractExtensionMethods();
    [ExtensionAttribute]
public static V GetOrAdd(IDictionary`2<K, V> dictionary, K key, Func`2<K, V> valueFactory);
    [IteratorStateMachineAttribute("Microsoft.VisualStudio.ExtensionManager.EngineContractExtensionMethods/<Walk>d__2`1")]
[ExtensionAttribute]
public static IEnumerable`1<N> Walk(N rootNode, Func`2<N, IEnumerable`1<N>> childNodeSelector);
    [ExtensionAttribute]
public static bool IsExtensionSdk(IExtension extension);
    [ExtensionAttribute]
public static bool IsPlatformSdk(IExtension extension);
    [ExtensionAttribute]
public static IInstalledExtension GetInstalledExtension(IExtensionEngine engine, string identifier);
    [ExtensionAttribute]
public static bool NormalizedEquals(Version version1, Version version2);
    [ExtensionAttribute]
public static Version GetNormalizedVersion(Version version);
    [ExtensionAttribute]
public static bool IsVSCodeExtension(IExtension extension);
}
public enum Microsoft.VisualStudio.ExtensionManager.EngineHostId : Enum {
    public int value__;
    public static EngineHostId Unknown;
    public static EngineHostId VSIXInstaller;
    public static EngineHostId VisualStudio;
}
[FlagsAttribute]
public enum Microsoft.VisualStudio.ExtensionManager.EngineMode : Enum {
    public int value__;
    public static EngineMode Default;
    public static EngineMode SafeMode;
    public static EngineMode DoNotLoadUserExtensions;
    public static EngineMode ScanAlways;
    public static EngineMode DoNotScanSdkDirectories;
    public static EngineMode RestrictedMode;
    public static EngineMode SkipMessagePack;
    public static EngineMode SafeScanAlways;
}
[ExtensionAttribute]
public static class Microsoft.VisualStudio.ExtensionManager.EngineModeExtensions : object {
    [ExtensionAttribute]
public static bool IsSafeMode(EngineMode mode);
    [ExtensionAttribute]
public static bool IsRestrictedMode(EngineMode mode);
    [ExtensionAttribute]
public static bool IsSafeOrRestrictedMode(EngineMode mode);
    [ExtensionAttribute]
public static bool IsSafeScanAlwaysMode(EngineMode mode);
    [ExtensionAttribute]
public static bool IsScanAlwaysMode(EngineMode mode);
    [ExtensionAttribute]
public static bool IsNotScanAlwaysMode(EngineMode mode);
    [ExtensionAttribute]
public static bool IsNotSafeScanAlwaysMode(EngineMode mode);
}
public class Microsoft.VisualStudio.ExtensionManager.ExtensionChangedState : object {
    [CompilerGeneratedAttribute]
private bool <WasExtensionModified>k__BackingField;
    [CompilerGeneratedAttribute]
private UpdateReason <UpdateReasons>k__BackingField;
    public bool WasExtensionModified { get; public set; }
    public UpdateReason UpdateReasons { get; public set; }
    public static ExtensionChangedState Default { get; }
    public ExtensionChangedState(bool wasExtensionModified, UpdateReason updateReason);
    [CompilerGeneratedAttribute]
public bool get_WasExtensionModified();
    [CompilerGeneratedAttribute]
public void set_WasExtensionModified(bool value);
    [CompilerGeneratedAttribute]
public UpdateReason get_UpdateReasons();
    [CompilerGeneratedAttribute]
public void set_UpdateReasons(UpdateReason value);
    public static ExtensionChangedState get_Default();
    public void AddUpdateReason(UpdateReason updateReason, bool wasExtensionModified);
}
public class Microsoft.VisualStudio.ExtensionManager.ExtensionContentTypes : object {
    public static string Tool;
    public static string Template;
    public static string Assembly;
    public static string ProjectTemplate;
    public static string ItemTemplate;
    public static string MefComponent;
    public static string VsPackage;
    public static string ToolboxControl;
    public static string Sample;
    public static string ExtensionSdk;
    public static string PlatformSdk;
    public static string LightSwitchPkg;
    public static string MvcTemplate;
    public static string Snippets;
    private static string AssemblyV1;
    private static string ProjectTemplateV1;
    private static string ItemTemplateV1;
    private static string MefComponentV1;
    private static string VsPackageV1;
    private static string ToolboxControlV1;
    private static string SampleV1;
    private static string LightSwitchPkgV1;
    private static List`1<string> supportedContentTypes;
    private static ExtensionContentTypes();
    public static string GetContentType(string contentType);
    public static bool IsExtensionSdkAssetType(string assetTypeName);
    public static string ComputeExtensionType(IEnumerable`1<string> contentTypes);
    public static string GetExtensionTypeFromCode(ExtensionTypeCode typeCode);
    public static ExtensionTypeCode GetExtensionTypeCode(string type);
    public static string GetExtensionType(string type);
    public static ExtensionTypeCode ComputeExtensionTypeCode(IEnumerable`1<string> contentTypes);
    public static ExtensionTypeCode Combine(ExtensionTypeCode typeCode1, ExtensionTypeCode typeCode2);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class Microsoft.VisualStudio.ExtensionManager.ExtensionDigitalSignature : object {
    [CompilerGeneratedAttribute]
private Nullable`1<ExtensionDigitalSignatureState> <State>k__BackingField;
    [CompilerGeneratedAttribute]
private Exception <Exception>k__BackingField;
    public Nullable`1<ExtensionDigitalSignatureState> State { get; public set; }
    public Exception Exception { get; public set; }
    [CompilerGeneratedAttribute]
public Nullable`1<ExtensionDigitalSignatureState> get_State();
    [CompilerGeneratedAttribute]
public void set_State(Nullable`1<ExtensionDigitalSignatureState> value);
    [CompilerGeneratedAttribute]
public Exception get_Exception();
    [CompilerGeneratedAttribute]
public void set_Exception(Exception value);
}
public enum Microsoft.VisualStudio.ExtensionManager.ExtensionDigitalSignatureState : Enum {
    public int value__;
    public static ExtensionDigitalSignatureState Unsigned;
    public static ExtensionDigitalSignatureState ValidSignature;
    public static ExtensionDigitalSignatureState InvalidSignature;
    public static ExtensionDigitalSignatureState InvalidCertificate;
    public static ExtensionDigitalSignatureState InvalidTimestamp;
    public static ExtensionDigitalSignatureState ObsoleteCryptographicAlgorithm;
    public static ExtensionDigitalSignatureState UnSupportedCryptographicAlgorithm;
}
public class Microsoft.VisualStudio.ExtensionManager.ExtensionEngineOptions : object {
    [CompilerGeneratedAttribute]
private EngineMode <EngineMode>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <UseUpdateOnDetectionMode>k__BackingField;
    public EngineMode EngineMode { get; public set; }
    public bool UseUpdateOnDetectionMode { get; public set; }
    [CompilerGeneratedAttribute]
public EngineMode get_EngineMode();
    [CompilerGeneratedAttribute]
public void set_EngineMode(EngineMode value);
    [CompilerGeneratedAttribute]
public bool get_UseUpdateOnDetectionMode();
    [CompilerGeneratedAttribute]
public void set_UseUpdateOnDetectionMode(bool value);
}
public abstract class Microsoft.VisualStudio.ExtensionManager.ExtensionException : Exception {
    public int ErrorCode { get; }
    public ExtensionException(string message);
    public ExtensionException(string message, Exception inner);
    protected ExtensionException(SerializationInfo info, StreamingContext context);
    public abstract virtual int get_ErrorCode();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.VisualStudio.ExtensionManager.ExtensionHotloadCompletedEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
private IInstalledExtension <Extension>k__BackingField;
    [CompilerGeneratedAttribute]
private InstallState <InstallState>k__BackingField;
    public IInstalledExtension Extension { get; }
    public InstallState InstallState { get; }
    public ExtensionHotloadCompletedEventArgs(IInstalledExtension extension, InstallState state);
    [CompilerGeneratedAttribute]
public IInstalledExtension get_Extension();
    [CompilerGeneratedAttribute]
public InstallState get_InstallState();
}
public class Microsoft.VisualStudio.ExtensionManager.ExtensionHotloadCompletedEventHandler : MulticastDelegate {
    public ExtensionHotloadCompletedEventHandler(object object, IntPtr method);
    [NullableContextAttribute("1")]
public virtual void Invoke(object sender, ExtensionHotloadCompletedEventArgs args);
    public virtual IAsyncResult BeginInvoke(object sender, ExtensionHotloadCompletedEventArgs args, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class Microsoft.VisualStudio.ExtensionManager.ExtensionInstallData : object {
    [CompilerGeneratedAttribute]
private static string <InstallDataSavePath>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Initialized>k__BackingField;
    private List`1<string> _uninstalledExtensionIdentifiers;
    private List`1<string> _installedExtensionPaths;
    [TupleElementNamesAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private List`1<ValueTuple`2<string, bool>> _packComponentChanges;
    public static string InstallDataSavePath { get; public set; }
    public static bool ShouldSave { get; }
    public bool Initialized { get; private set; }
    public IReadOnlyList`1<string> UninstalledExtensionIdentifiers { get; }
    public IReadOnlyList`1<string> InstalledExtensionPaths { get; }
    [TupleElementNamesAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public IReadOnlyList`1<ValueTuple`2<string, bool>> PackComponentChanges { get; }
    public ExtensionInstallData(IEnumerable`1<string> uninstalledExtensionIdentifiers, IEnumerable`1<string> installedExtensionPaths, IEnumerable`1<ValueTuple`2<string, bool>> packComponentChanges);
    [CompilerGeneratedAttribute]
public static string get_InstallDataSavePath();
    [CompilerGeneratedAttribute]
public static void set_InstallDataSavePath(string value);
    public static bool get_ShouldSave();
    [CompilerGeneratedAttribute]
public bool get_Initialized();
    [CompilerGeneratedAttribute]
private void set_Initialized(bool value);
    public IReadOnlyList`1<string> get_UninstalledExtensionIdentifiers();
    public IReadOnlyList`1<string> get_InstalledExtensionPaths();
    public IReadOnlyList`1<ValueTuple`2<string, bool>> get_PackComponentChanges();
    private void Write(BinaryWriter writer);
    private void Read(BinaryReader reader);
    public static bool Save(ExtensionInstallData data);
    public static ExtensionInstallData Load(string path);
}
public enum Microsoft.VisualStudio.ExtensionManager.ExtensionLocations : Enum {
    public int value__;
    public static ExtensionLocations PerMachineExtensions;
    public static ExtensionLocations PerUserExtensions;
    public static ExtensionLocations PerMachineSDKs;
    public static ExtensionLocations PerUserSDKs;
    public static ExtensionLocations PerMachinePlatformSDKs;
    public static ExtensionLocations PerMachineVsExtensibilityExtensions;
    public static ExtensionLocations PeruserVsExtensibilityExtensions;
}
public class Microsoft.VisualStudio.ExtensionManager.ExtensionManagerConstants : object {
    public static string SettingsStoreRoot;
    public static string ExtensionsChangedKey;
    public static string ConfigurationChangedKey;
    public static string ConfigurationChangedReasonKey;
    public static string StartupFingerprintKey;
    public static string RepositoriesCollection;
    public static string PendingDeletionsCollection;
    public static string LastConfigurationChangedTimestampKey;
    public static string ShowWarningMessageKey;
    public static string LastCrashModulePathKey;
    public static string LastCompatibilityListCheckKey;
    public static string LoadableExtensionsCollection;
    public static string ExtensionTypesCollection;
    public static string PermanentDisabledExtensionCollection;
    public static string WarningExtensionCollection;
    public static string ExtensionAutoUpdateStateCollection;
    public static string VSIXManifestFilenameWithoutExtension;
    public static string VSIXManifestExtension;
    public static string VSIXLanguagePackManifestExtension;
    public static string VSIXManifestFilename;
    public static string VSIXManifestJsonFilename;
    public static string VSIXLanguagePackManifestFilename;
    public static string SDKManifestFilename;
    public static string CompatibilityListPath;
    public static string EscapedChars;
    public static string ExtensionFlagPreview;
    public static string ExtensionFlagPricingPaid;
    public static string ExtensionFlagPricingTrial;
    public static string ExtensionFlagPricingFree;
    public static float SortOrder_InstalledProvider;
    public static float SortOrder_OnlineProvider;
    public static float SortOrder_UpdateProvider;
    public static string CertificateInformationFileName;
    public static int DefaultCategoriesLevelSpecifier;
    public static int ExtendedCategoriesLevelSpecifier;
    public static Guid AllCategoryId;
    public static string DotNetFrameworkIdentifier;
    public static string DotNetFrameworkName;
    public static string VSIdentifierPrefix;
    public static IList`1<XmlElement> EmptyElements;
    public static IDictionary`2<string, string> EmptyAttributes;
    public static Version VsixManifestSchemaVersion;
    public static Version PackageManifestSchemaVersion;
    public static string SQLServerDataToolsSetupDetectionKey;
    public static string SearchExtensionManager;
    public static string SearchExtensionManagerUpdate;
    public static string SHA256SignatureMethod;
    public static Version MinimumVersionSupportedForSHA256Verification;
    public static Version DefaultVSVersionForExtensionSDKs;
    public static string MicrosoftAuthorName;
    public static string MicrosoftDevLabsAuthorName;
    private static ExtensionManagerConstants();
}
public class Microsoft.VisualStudio.ExtensionManager.ExtensionRepositoryConfigList : List`1<IExtensionRepositoryConfig> {
    public ExtensionRepositoryConfigList(IEnumerable`1<IExtensionRepositoryConfig> collection);
}
public enum Microsoft.VisualStudio.ExtensionManager.ExtensionStatusChangeType : Enum {
    public int value__;
    public static ExtensionStatusChangeType Install;
    public static ExtensionStatusChangeType Update;
    public static ExtensionStatusChangeType Uninstall;
    public static ExtensionStatusChangeType Downgrade;
}
public class Microsoft.VisualStudio.ExtensionManager.ExtensionTelemetryInfo : object {
    [CompilerGeneratedAttribute]
private bool <IsEnabled>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Version>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsAlphaPack>k__BackingField;
    [CompilerGeneratedAttribute]
private string <VSIXIdentifier>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsNested>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <InstalledByMsi>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <InstalledPerMachine>k__BackingField;
    public bool IsEnabled { get; private set; }
    public string Name { get; private set; }
    public string Version { get; private set; }
    public bool IsAlphaPack { get; private set; }
    public string VSIXIdentifier { get; private set; }
    public bool IsNested { get; private set; }
    public bool InstalledByMsi { get; private set; }
    public bool InstalledPerMachine { get; }
    public ExtensionTelemetryInfo(IInstalledExtension extension);
    [CompilerGeneratedAttribute]
public bool get_IsEnabled();
    [CompilerGeneratedAttribute]
private void set_IsEnabled(bool value);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
private void set_Name(string value);
    [CompilerGeneratedAttribute]
public string get_Version();
    [CompilerGeneratedAttribute]
private void set_Version(string value);
    [CompilerGeneratedAttribute]
public bool get_IsAlphaPack();
    [CompilerGeneratedAttribute]
private void set_IsAlphaPack(bool value);
    [CompilerGeneratedAttribute]
public string get_VSIXIdentifier();
    [CompilerGeneratedAttribute]
private void set_VSIXIdentifier(string value);
    [CompilerGeneratedAttribute]
public bool get_IsNested();
    [CompilerGeneratedAttribute]
private void set_IsNested(bool value);
    [CompilerGeneratedAttribute]
public bool get_InstalledByMsi();
    [CompilerGeneratedAttribute]
private void set_InstalledByMsi(bool value);
    [CompilerGeneratedAttribute]
public bool get_InstalledPerMachine();
    public Dictionary`2<string, object> GetBasicTelemetryInfoAsDictionary();
}
public class Microsoft.VisualStudio.ExtensionManager.ExtensionTelemetryInfoExtended : ExtensionTelemetryInfo {
    [CompilerGeneratedAttribute]
private IEnumerable`1<PackageTelemetryInfo> <Packages>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<string> <ParentExtensions>k__BackingField;
    public IEnumerable`1<PackageTelemetryInfo> Packages { get; private set; }
    public List`1<string> ParentExtensions { get; private set; }
    public ExtensionTelemetryInfoExtended(IInstalledExtension extension, IInstalledExtensionSettingsList installedExtensions);
    private PackageTelemetryInfo GetPackageTelemetryInfoForGuid(Guid packageGuid, IInstalledExtensionSettingsList installedExtensions);
    [CompilerGeneratedAttribute]
public IEnumerable`1<PackageTelemetryInfo> get_Packages();
    [CompilerGeneratedAttribute]
private void set_Packages(IEnumerable`1<PackageTelemetryInfo> value);
    [CompilerGeneratedAttribute]
public List`1<string> get_ParentExtensions();
    [CompilerGeneratedAttribute]
private void set_ParentExtensions(List`1<string> value);
}
public enum Microsoft.VisualStudio.ExtensionManager.ExtensionType : Enum {
    public int value__;
    public static ExtensionType None;
    public static ExtensionType VSSDK;
    public static ExtensionType VisualStudioExtensibility;
    public static ExtensionType VisualStudioExtensibilityVSSDK;
}
public enum Microsoft.VisualStudio.ExtensionManager.ExtensionTypeCode : Enum {
    public byte value__;
    public static ExtensionTypeCode None;
    public static ExtensionTypeCode Tool;
    public static ExtensionTypeCode Assembly;
    public static ExtensionTypeCode ProjectTemplate;
    public static ExtensionTypeCode ItemTemplate;
    public static ExtensionTypeCode MefComponent;
    public static ExtensionTypeCode VsPackage;
    public static ExtensionTypeCode ToolboxControl;
    public static ExtensionTypeCode Sample;
    public static ExtensionTypeCode ExtensionSdk;
    public static ExtensionTypeCode Template;
    public static ExtensionTypeCode PlatformSdk;
    public static ExtensionTypeCode MvcTemplate;
    public static ExtensionTypeCode Snippets;
}
public class Microsoft.VisualStudio.ExtensionManager.FilesInUseException : ExtensionException {
    public static int FilesInUseError;
    public int ErrorCode { get; }
    public FilesInUseException(string message);
    public FilesInUseException(string message, Exception inner);
    protected FilesInUseException(SerializationInfo info, StreamingContext context);
    public virtual int get_ErrorCode();
}
public abstract class Microsoft.VisualStudio.ExtensionManager.GalleryOnlineExtension : object {
    public string Id { get; }
    public string VsixID { get; public set; }
    public string Version { get; public set; }
    public string VsixVersion { get; public set; }
    public DateTime LastModified { get; public set; }
    public DateTime PublishedDate { get; public set; }
    public string PublisherDomain { get; public set; }
    public bool IsPublisherDomainVerified { get; public set; }
    public string Author { get; public set; }
    public string Icon { get; public set; }
    public string MoreInfoURL { get; public set; }
    public string ReferralUrl { get; public set; }
    public string ReportAbuseUrl { get; public set; }
    public double Rating { get; public set; }
    public int RatingsCount { get; public set; }
    public int DownloadCount { get; public set; }
    public string Name { get; public set; }
    public string Description { get; public set; }
    public Func`2<CancellationToken, Task`1<string>> FetchMarkdownDescriptionAsync { get; public set; }
    public string MarkdownAssetBaseURL { get; public set; }
    public string MarkdownUrl { get; public set; }
    public float Priority { get; }
    public bool IsSelected { get; public set; }
    public string DownloadUrl { get; public set; }
    public string DownloadUpdateUrl { get; public set; }
    public string VsixReferences { get; public set; }
    public string Type { get; public set; }
    public string ProjectTypeFriendly { get; public set; }
    public bool SupportsCodeSeparation { get; public set; }
    public bool SupportsMasterPage { get; public set; }
    public string OnlinePreviewImage { get; public set; }
    public string DefaultName { get; public set; }
    public virtual string get_Id();
    public abstract virtual string get_VsixID();
    public abstract virtual void set_VsixID(string value);
    public abstract virtual string get_Version();
    public abstract virtual void set_Version(string value);
    public abstract virtual string get_VsixVersion();
    public abstract virtual void set_VsixVersion(string value);
    public abstract virtual DateTime get_LastModified();
    public abstract virtual void set_LastModified(DateTime value);
    public abstract virtual DateTime get_PublishedDate();
    public abstract virtual void set_PublishedDate(DateTime value);
    public abstract virtual string get_PublisherDomain();
    public abstract virtual void set_PublisherDomain(string value);
    public abstract virtual bool get_IsPublisherDomainVerified();
    public abstract virtual void set_IsPublisherDomainVerified(bool value);
    public abstract virtual string get_Author();
    public abstract virtual void set_Author(string value);
    public abstract virtual string get_Icon();
    public abstract virtual void set_Icon(string value);
    public abstract virtual string get_MoreInfoURL();
    public abstract virtual void set_MoreInfoURL(string value);
    public abstract virtual string get_ReferralUrl();
    public abstract virtual void set_ReferralUrl(string value);
    public abstract virtual string get_ReportAbuseUrl();
    public abstract virtual void set_ReportAbuseUrl(string value);
    public abstract virtual double get_Rating();
    public abstract virtual void set_Rating(double value);
    public abstract virtual int get_RatingsCount();
    public abstract virtual void set_RatingsCount(int value);
    public abstract virtual int get_DownloadCount();
    public abstract virtual void set_DownloadCount(int value);
    public abstract virtual string get_Name();
    public abstract virtual void set_Name(string value);
    public abstract virtual string get_Description();
    public abstract virtual void set_Description(string value);
    public abstract virtual Func`2<CancellationToken, Task`1<string>> get_FetchMarkdownDescriptionAsync();
    public abstract virtual void set_FetchMarkdownDescriptionAsync(Func`2<CancellationToken, Task`1<string>> value);
    public abstract virtual string get_MarkdownAssetBaseURL();
    public abstract virtual void set_MarkdownAssetBaseURL(string value);
    public abstract virtual string get_MarkdownUrl();
    public abstract virtual void set_MarkdownUrl(string value);
    public abstract virtual float get_Priority();
    public abstract virtual bool get_IsSelected();
    public abstract virtual void set_IsSelected(bool value);
    public abstract virtual string get_DownloadUrl();
    public abstract virtual void set_DownloadUrl(string value);
    public abstract virtual string get_DownloadUpdateUrl();
    public abstract virtual void set_DownloadUpdateUrl(string value);
    public abstract virtual string get_VsixReferences();
    public abstract virtual void set_VsixReferences(string value);
    public abstract virtual string get_Type();
    public abstract virtual void set_Type(string value);
    public abstract virtual string get_ProjectTypeFriendly();
    public abstract virtual void set_ProjectTypeFriendly(string value);
    public abstract virtual bool get_SupportsCodeSeparation();
    public abstract virtual void set_SupportsCodeSeparation(bool value);
    public abstract virtual bool get_SupportsMasterPage();
    public abstract virtual void set_SupportsMasterPage(bool value);
    public abstract virtual string get_OnlinePreviewImage();
    public abstract virtual void set_OnlinePreviewImage(string value);
    public abstract virtual string get_DefaultName();
    public abstract virtual void set_DefaultName(string value);
}
public class Microsoft.VisualStudio.ExtensionManager.HostProperties : object {
    [CompilerGeneratedAttribute]
private string <Version>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Edition>k__BackingField;
    [CompilerGeneratedAttribute]
private ProductArchitecture <ProductArchitecture>k__BackingField;
    [CompilerGeneratedAttribute]
private IDictionary`2<string, string> <AdditionalProperties>k__BackingField;
    public string Version { get; private set; }
    public string Edition { get; private set; }
    public ProductArchitecture ProductArchitecture { get; private set; }
    public IDictionary`2<string, string> AdditionalProperties { get; private set; }
    public HostProperties(string version, string edition, ProductArchitecture productArchitecture, IDictionary`2<string, string> additionalProperties);
    [CompilerGeneratedAttribute]
public string get_Version();
    [CompilerGeneratedAttribute]
private void set_Version(string value);
    [CompilerGeneratedAttribute]
public string get_Edition();
    [CompilerGeneratedAttribute]
private void set_Edition(string value);
    [CompilerGeneratedAttribute]
public ProductArchitecture get_ProductArchitecture();
    [CompilerGeneratedAttribute]
private void set_ProductArchitecture(ProductArchitecture value);
    [CompilerGeneratedAttribute]
public IDictionary`2<string, string> get_AdditionalProperties();
    [CompilerGeneratedAttribute]
private void set_AdditionalProperties(IDictionary`2<string, string> value);
    public virtual string ToString();
}
public interface Microsoft.VisualStudio.ExtensionManager.IAutoUpdateManager {
    public bool IsAutoUpdateFeatureEnabled { get; }
    public abstract virtual bool get_IsAutoUpdateFeatureEnabled();
    public abstract virtual void RemovePerMachineExtensionAutoUpdateState(string extensionIdentifier);
    public abstract virtual void RemoveAutoUpdateState(INotifyUpdateInstallCompleted extension);
    public abstract virtual bool TrySetAutoUpdateState(IInstalledExtension extension, AutoUpdateState autoUpdateState);
}
public interface Microsoft.VisualStudio.ExtensionManager.IClientEnabledSettings {
    public bool IsClientMode { get; }
    public string ClientAppPath { get; }
    public ISettingsManager SettingsManager { get; }
    public abstract virtual bool get_IsClientMode();
    public abstract virtual string get_ClientAppPath();
    public abstract virtual ISettingsManager get_SettingsManager();
}
public interface Microsoft.VisualStudio.ExtensionManager.ICommonExtensionInfo {
    public string Name { get; }
    public string Id { get; }
    public string Description { get; }
    public float Priority { get; }
    public bool IsSelected { get; public set; }
    public abstract virtual string get_Name();
    public abstract virtual string get_Id();
    public abstract virtual string get_Description();
    public abstract virtual float get_Priority();
    public abstract virtual bool get_IsSelected();
    public abstract virtual void set_IsSelected(bool value);
}
public class Microsoft.VisualStudio.ExtensionManager.IdentifierConflictException : ExtensionException {
    public int ErrorCode { get; }
    public IdentifierConflictException(string message);
    public IdentifierConflictException(string message, Exception inner);
    protected IdentifierConflictException(SerializationInfo info, StreamingContext context);
    public virtual int get_ErrorCode();
}
public interface Microsoft.VisualStudio.ExtensionManager.IEngineHost {
    public ISettingsManager SettingsManager { get; }
    public IAutoUpdateManager AutoUpdateManager { get; }
    public ITelemetryLogger TelemetryLogger { get; }
    public ILogger Logger { get; }
    public IAsyncServiceProvider AsyncServiceProvider { get; }
    public IServiceProvider ServiceProvider { get; }
    public CultureInfo PreferredCulture { get; }
    public string RootFolder { get; }
    public string InstallDir { get; }
    public string ShellFolder { get; }
    public string ProductName { get; }
    public JoinableTaskFactory JoinableTaskFactory { get; }
    public bool ShouldDeletePendingUninstalls { get; }
    public bool ShouldMarkPendingUninstalls { get; }
    public EngineHostId HostId { get; }
    public HostProperties HostProperties { get; }
    public string AppName { get; }
    public bool IsRemoteEnvironment { get; }
    public IEnumerable`1<string> ExcludedLocations { get; }
    public IClientEnabledSettings ClientEnabledSettings { get; }
    public abstract virtual ISettingsManager get_SettingsManager();
    public abstract virtual IAutoUpdateManager get_AutoUpdateManager();
    public abstract virtual ITelemetryLogger get_TelemetryLogger();
    public abstract virtual ILogger get_Logger();
    public abstract virtual IAsyncServiceProvider get_AsyncServiceProvider();
    public abstract virtual IServiceProvider get_ServiceProvider();
    public abstract virtual CultureInfo get_PreferredCulture();
    public abstract virtual string get_RootFolder();
    public abstract virtual string get_InstallDir();
    public abstract virtual string get_ShellFolder();
    public abstract virtual string get_ProductName();
    public abstract virtual JoinableTaskFactory get_JoinableTaskFactory();
    public abstract virtual bool get_ShouldDeletePendingUninstalls();
    public abstract virtual bool get_ShouldMarkPendingUninstalls();
    public abstract virtual EngineHostId get_HostId();
    public abstract virtual HostProperties get_HostProperties();
    public abstract virtual string get_AppName();
    public abstract virtual bool get_IsRemoteEnvironment();
    public abstract virtual Task RunUIThreadBackgroundPriority(Func`1<Task> func);
    public abstract virtual void WaitOnHostTask(Task toWait);
    public abstract virtual void OnBeforeInstall(IInstallableExtension extension);
    public abstract virtual void OnBeforeInstall(IInstallableExtension extension, bool perMachine);
    public abstract virtual void DisablePerMachineExtension(IInstalledExtension extension);
    public abstract virtual void EnablePerMachineExtension(IInstalledExtension extension);
    public abstract virtual bool LocationIsExcluded(string path);
    public abstract virtual IEnumerable`1<string> get_ExcludedLocations();
    public abstract virtual IClientEnabledSettings get_ClientEnabledSettings();
}
public interface Microsoft.VisualStudio.ExtensionManager.IExtension {
    public IList`1<XmlElement> AdditionalElements { get; }
    public IEnumerable`1<IExtensionContent> Content { get; }
    public IExtensionHeader Header { get; }
    public IExtensionInstallerInformation InstallerInformation { get; }
    public IList`1<XmlElement> LocalizedAdditionalElements { get; }
    public VsixType PackageType { get; }
    public IEnumerable`1<string> PackedExtensionsVsixIDs { get; }
    public IEnumerable`1<IExtensionReference> References { get; }
    public Version SchemaVersion { get; }
    public IEnumerable`1<IExtensionRequirement> Targets { get; }
    public string Type { get; }
    public abstract virtual IList`1<XmlElement> get_AdditionalElements();
    public abstract virtual IEnumerable`1<IExtensionContent> get_Content();
    public abstract virtual IExtensionHeader get_Header();
    public abstract virtual IExtensionInstallerInformation get_InstallerInformation();
    public abstract virtual IList`1<XmlElement> get_LocalizedAdditionalElements();
    public abstract virtual VsixType get_PackageType();
    public abstract virtual IEnumerable`1<string> get_PackedExtensionsVsixIDs();
    public abstract virtual IEnumerable`1<IExtensionReference> get_References();
    public abstract virtual Version get_SchemaVersion();
    public abstract virtual IEnumerable`1<IExtensionRequirement> get_Targets();
    public abstract virtual string get_Type();
    public abstract virtual bool IsProductSupported(string productId, Version version, ProductArchitecture productArchitecture, IDictionary`2<string, string> additionalProperties);
    public abstract virtual bool CanHotload();
}
public interface Microsoft.VisualStudio.ExtensionManager.IExtensionContent {
    public string ContentTypeName { get; }
    public IDictionary`2<string, string> Attributes { get; }
    public string RelativePath { get; }
    public IList`1<XmlElement> AdditionalElements { get; }
    public abstract virtual string get_ContentTypeName();
    public abstract virtual IDictionary`2<string, string> get_Attributes();
    public abstract virtual string get_RelativePath();
    public abstract virtual IList`1<XmlElement> get_AdditionalElements();
}
public interface Microsoft.VisualStudio.ExtensionManager.IExtensionEngine {
    public string ApplicationExtensionsRoot { get; }
    public string CurrentUserExtensionsRoot { get; }
    public bool DidLoadUserExtensions { get; public set; }
    public EngineMode EngineModeFlags { get; }
    public IEngineHost EngineHost { get; }
    public IInstalledExtensionSettingsList InstalledExtensions { get; }
    public int UninstalledRestartRequiredExtensionsCount { get; }
    [CompilerGeneratedAttribute]
public abstract virtual void add_InstallCompleted(EventHandler`1<InstallCompletedEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_InstallCompleted(EventHandler`1<InstallCompletedEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_InstallProgressChanged(EventHandler`1<InstallProgressChangedEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_InstallProgressChanged(EventHandler`1<InstallProgressChangedEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_ExtensionHotloadComplete(ExtensionHotloadCompletedEventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_ExtensionHotloadComplete(ExtensionHotloadCompletedEventHandler value);
    public abstract virtual string get_ApplicationExtensionsRoot();
    public abstract virtual string get_CurrentUserExtensionsRoot();
    public abstract virtual bool get_DidLoadUserExtensions();
    public abstract virtual void set_DidLoadUserExtensions(bool value);
    public abstract virtual EngineMode get_EngineModeFlags();
    public abstract virtual IEngineHost get_EngineHost();
    public abstract virtual IInstalledExtensionSettingsList get_InstalledExtensions();
    public abstract virtual int get_UninstalledRestartRequiredExtensionsCount();
    public abstract virtual List`1<IInstalledExtension> BatchEngineInstall(List`1<IInstallableExtension> installableExtensions, InstallFlags installFlags, Version targetVsVersion);
    public abstract virtual bool CommitChanges(IEnumerable`1<IInstalledExtension> installedExtensions, IEnumerable`1<IInstalledExtension> uninstalledExtensions, IEnumerable`1<ValueTuple`2<string, bool>> packComponentChanges, Version targetedVSVersion, InstallFlags installFlags);
    public abstract virtual bool CommitExternalInstall(string dataPath, bool perMachine);
    public abstract virtual bool CommitExternalUninstall(IInstalledExtension extension);
    public abstract virtual RestartReason Disable(IInstalledExtension extension);
    public abstract virtual RestartReason PermanentDisable(IInstalledExtension extension);
    public abstract virtual void Downgrade(IInstalledExtension extension, InstallFlags installFlags);
    public abstract virtual RestartReason Enable(IInstalledExtension extension);
    public abstract virtual IEnumerable`1<IExtensionReference> FindMissingReferences(IExtension extension);
    public abstract virtual IEnumerable`1<IInstalledExtension> GetExtensionPacks(IInstalledExtension extension);
    public abstract virtual IEnumerable`1<IInstalledExtension> GetImmediateDependants(IInstalledExtension extension);
    public abstract virtual long GetLastExtensionsChangedTimestamp();
    public abstract virtual void GetPrerequisites(IInstallableExtension extension, IEnumerable`1& installedPackages, IEnumerable`1& installablePackages, IEnumerable`1& unresolvedReferences);
    public abstract virtual bool Install(IInstallableExtension installableExtension, InstallFlags installFlags, Version targetVsVersion);
    public abstract virtual void InstallAsync(IInstallableExtension extension, InstallFlags installFlags, object userState);
    public abstract virtual void InstallAsyncCancel(object userState);
    public abstract virtual bool IsDowngradable(IInstalledExtension extension);
    public abstract virtual void RemoveOrphanedComponents(IInstalledExtension parentExtension);
    public abstract virtual void RevertUninstall(IInstalledExtension extension);
    public abstract virtual Task SchedulePendingUninstallDeletion();
    public abstract virtual bool TryGetExtensionVersionFromCatalog(string identifier, Version& version);
    public abstract virtual void Uninstall(IInstalledExtension extension, InstallFlags installFlags, Version targetedVSVersion);
    public abstract virtual void UpdateLastExtensionsChange(bool updateClient);
    public abstract virtual long UpdateLastExtensionsChangedTimestamp(bool alsoUpdateConfigurationChangedTimestamp, Nullable`1<DateTime> lastConfigChange);
    public abstract virtual bool ValidReferenceSpecialCase(IExtensionReference reference);
    public abstract virtual IInstallableExtension CreateInstallableExtension(string vsixPath);
    public abstract virtual Version GetLatestSchemaVersion(IInstallableExtension installableExtension);
    public abstract virtual void RaiseExtensionHotloadCompleted(IInstalledExtension extension, InstallState installState);
    public abstract virtual Task ForceHotloadRefreshAsync(CancellationToken cancellationToken);
    public abstract virtual Task`1<IInstalledExtensionSettingsList> GetInstalledExtensionsAsync(CancellationToken cancellationToken);
}
public interface Microsoft.VisualStudio.ExtensionManager.IExtensionHeader {
    public string Author { get; }
    public string Description { get; }
    public string LocalizedDescription { get; }
    public Uri GettingStartedGuide { get; }
    public Uri ReleaseNotes { get; }
    public Byte[] ReleaseNotesContent { get; }
    public string ReleaseNotesFormat { get; }
    public string Identifier { get; }
    public string License { get; }
    public string LicenseFormat { get; }
    public bool LicenseClickThrough { get; }
    public CultureInfo Locale { get; }
    public Uri MoreInfoUrl { get; }
    public string Icon { get; }
    public string PreviewImage { get; }
    public bool InstalledByMsi { get; }
    public string Name { get; }
    public string LocalizedName { get; }
    public Version Version { get; }
    public string VsixManifestVersion { get; }
    public VersionRange SupportedFrameworkVersionRange { get; }
    public bool SystemComponent { get; }
    public bool AllUsers { get; }
    public bool IsExperimental { get; }
    public bool GlobalScope { get; }
    public InstallationPartialManifestType PartialManifestType { get; }
    public IEnumerable`1<string> Tags { get; }
    public bool Preview { get; }
    public IList`1<XmlElement> AdditionalElements { get; }
    public IList`1<XmlElement> LocalizedAdditionalElements { get; }
    public string ShortcutPath { get; }
    public bool RemoveOldPerUserExtension { get; }
    public bool AllowClientRole { get; }
    public ExtensionType ExtensionType { get; }
    public abstract virtual string get_Author();
    public abstract virtual string get_Description();
    public abstract virtual string get_LocalizedDescription();
    public abstract virtual Uri get_GettingStartedGuide();
    public abstract virtual Uri get_ReleaseNotes();
    public abstract virtual Byte[] get_ReleaseNotesContent();
    public abstract virtual string get_ReleaseNotesFormat();
    public abstract virtual string get_Identifier();
    public abstract virtual string get_License();
    public abstract virtual string get_LicenseFormat();
    public abstract virtual bool get_LicenseClickThrough();
    public abstract virtual CultureInfo get_Locale();
    public abstract virtual Uri get_MoreInfoUrl();
    public abstract virtual string get_Icon();
    public abstract virtual string get_PreviewImage();
    public abstract virtual bool get_InstalledByMsi();
    public abstract virtual string get_Name();
    public abstract virtual string get_LocalizedName();
    public abstract virtual Version get_Version();
    public abstract virtual string get_VsixManifestVersion();
    public abstract virtual VersionRange get_SupportedFrameworkVersionRange();
    public abstract virtual bool get_SystemComponent();
    public abstract virtual bool get_AllUsers();
    public abstract virtual bool get_IsExperimental();
    public abstract virtual bool get_GlobalScope();
    public abstract virtual InstallationPartialManifestType get_PartialManifestType();
    public abstract virtual IEnumerable`1<string> get_Tags();
    public abstract virtual bool get_Preview();
    public abstract virtual IList`1<XmlElement> get_AdditionalElements();
    public abstract virtual IList`1<XmlElement> get_LocalizedAdditionalElements();
    public abstract virtual string get_ShortcutPath();
    public abstract virtual bool get_RemoveOldPerUserExtension();
    public abstract virtual bool get_AllowClientRole();
    public abstract virtual ExtensionType get_ExtensionType();
}
public interface Microsoft.VisualStudio.ExtensionManager.IExtensionInstallerAction {
    public string ActionTypeName { get; }
    public IList`1<XmlElement> AdditionalElements { get; }
    public IDictionary`2<string, string> Attributes { get; }
    public string RelativePath { get; }
    public abstract virtual string get_ActionTypeName();
    public abstract virtual IList`1<XmlElement> get_AdditionalElements();
    public abstract virtual IDictionary`2<string, string> get_Attributes();
    public abstract virtual string get_RelativePath();
}
public interface Microsoft.VisualStudio.ExtensionManager.IExtensionInstallerInformation {
    public IEnumerable`1<IExtensionInstallerAction> Actions { get; }
    public IEnumerable`1<IExtensionReference> References { get; }
    public string Chip { get; }
    public abstract virtual IEnumerable`1<IExtensionInstallerAction> get_Actions();
    public abstract virtual IEnumerable`1<IExtensionReference> get_References();
    public abstract virtual string get_Chip();
}
public interface Microsoft.VisualStudio.ExtensionManager.IExtensionManagerWebClient {
    [CompilerGeneratedAttribute]
public abstract virtual void add_DownloadFileCompleted(AsyncCompletedEventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_DownloadFileCompleted(AsyncCompletedEventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_DownloadProgressChanged(DownloadProgressChangedEventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_DownloadProgressChanged(DownloadProgressChangedEventHandler value);
    public abstract virtual void DownloadFile(Uri address, string fileName);
    public abstract virtual void DownloadFileAsync(Uri address, string fileName, object userToken);
    public abstract virtual void CancelAsync();
}
public interface Microsoft.VisualStudio.ExtensionManager.IExtensionReference {
    public string Name { get; }
    public Uri MoreInfoUrl { get; }
    public bool CanAutoDownload { get; }
    public string NestedExtensionPath { get; }
    public bool IsRequired { get; }
    public abstract virtual string get_Name();
    public abstract virtual Uri get_MoreInfoUrl();
    public abstract virtual bool get_CanAutoDownload();
    public abstract virtual string get_NestedExtensionPath();
    public abstract virtual bool get_IsRequired();
}
public interface Microsoft.VisualStudio.ExtensionManager.IExtensionRepository {
    public string LocDisplayName { get; }
    public Guid RepositoryId { get; }
    public bool VisibleAsOnline { get; }
    public ILogger RepositoryLogger { get; }
    public IExtensionScheduleLists ExtensionScheduleLists { get; }
    public abstract virtual IEnumerable`1<IOnlineExtension> Search(string searchTerms);
    public abstract virtual void ResetStateForGetUpdates();
    public abstract virtual IEnumerable`1<IOnlineExtensionUpdate> GetUpdates(IEnumerable`1<IInstalledExtension> extensionsToCheck, bool forAutoupdate);
    public abstract virtual Task`1<IEnumerable`1<IOnlineExtensionUpdate>> GetUpdatesAsync(IEnumerable`1<IInstalledExtension> extensionsToCheck, bool forAutoupdate);
    public abstract virtual IEnumerable`1<T> GetExtensions(List`1<string> extensionIds, int lcid, bool forAutoupdate);
    public abstract virtual IInstallableExtension Download(IRepositoryEntry extensionDetails);
    public abstract virtual Guid DownloadAsync(IRepositoryEntry extensionDetails);
    public abstract virtual void DownloadAsyncCancel(Guid jobId);
    [CompilerGeneratedAttribute]
public abstract virtual void add_DownloadCompleted(EventHandler`1<DownloadCompletedEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_DownloadCompleted(EventHandler`1<DownloadCompletedEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_DownloadProgressChanged(EventHandler`1<DownloadProgressChangedEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_DownloadProgressChanged(EventHandler`1<DownloadProgressChangedEventArgs> value);
    public abstract virtual string get_LocDisplayName();
    public abstract virtual Guid get_RepositoryId();
    public abstract virtual bool get_VisibleAsOnline();
    public abstract virtual ILogger get_RepositoryLogger();
    public abstract virtual IExtensionScheduleLists get_ExtensionScheduleLists();
    public abstract virtual string GetResolvedRepositoryServiceUri(Func`2<Uri, Uri> resolver);
}
public interface Microsoft.VisualStudio.ExtensionManager.IExtensionRepositoryConfig {
    public string DisplayName { get; public set; }
    public Guid DisplayNamePackageGuid { get; public set; }
    public string DisplayNameResourceID { get; public set; }
    public bool Enabled { get; public set; }
    public Guid Id { get; public set; }
    public string LocDisplayName { get; }
    public UInt32 Priority { get; public set; }
    public string Protocol { get; public set; }
    public string Uri { get; public set; }
    public bool UserConfigured { get; public set; }
    public abstract virtual string get_DisplayName();
    public abstract virtual void set_DisplayName(string value);
    public abstract virtual Guid get_DisplayNamePackageGuid();
    public abstract virtual void set_DisplayNamePackageGuid(Guid value);
    public abstract virtual string get_DisplayNameResourceID();
    public abstract virtual void set_DisplayNameResourceID(string value);
    public abstract virtual bool get_Enabled();
    public abstract virtual void set_Enabled(bool value);
    public abstract virtual Guid get_Id();
    public abstract virtual void set_Id(Guid value);
    public abstract virtual string get_LocDisplayName();
    public abstract virtual UInt32 get_Priority();
    public abstract virtual void set_Priority(UInt32 value);
    public abstract virtual string get_Protocol();
    public abstract virtual void set_Protocol(string value);
    public abstract virtual string get_Uri();
    public abstract virtual void set_Uri(string value);
    public abstract virtual bool get_UserConfigured();
    public abstract virtual void set_UserConfigured(bool value);
}
public interface Microsoft.VisualStudio.ExtensionManager.IExtensionRepositoryFactory {
    public abstract virtual IExtensionRepository CreateRepository(IExtensionRepositoryConfig serverConfig, Func`3<string, Func`1<Task>, Task> proxyResolver);
    public abstract virtual IExtensionRepository CreateRepository(IExtensionRepositoryConfig serverConfig);
    public abstract virtual bool IsProtocolMatch(WebResponse response, Stream responseStream);
}
public interface Microsoft.VisualStudio.ExtensionManager.IExtensionRequirement {
    public string Identifier { get; }
    public VersionRange VersionRange { get; }
    public ProductArchitecture ProductArchitecture { get; }
    public IDictionary`2<string, string> Attributes { get; }
    public abstract virtual string get_Identifier();
    public abstract virtual VersionRange get_VersionRange();
    public abstract virtual ProductArchitecture get_ProductArchitecture();
    public abstract virtual IDictionary`2<string, string> get_Attributes();
}
public interface Microsoft.VisualStudio.ExtensionManager.IExtensionScheduleLists {
    public IEnumerable`1<IScheduledExtension> AllScheduledExtensions { get; }
    public bool AnyExtensionsScheduled { get; }
    public bool ExtensionSdksAreScheduled { get; }
    public bool RegularExtensionAreScheduled { get; }
    public ObservableCollection`1<IScheduledExtension> ScheduledExtensionDowngrades { get; }
    public ObservableCollection`1<IScheduledExtension> ScheduledExtensionInstalls { get; }
    public ObservableCollection`1<IScheduledExtension> ScheduledExtensionUninstalls { get; }
    public ObservableCollection`1<IScheduledExtension> ScheduledExtensionUpdates { get; }
    public abstract virtual IEnumerable`1<IScheduledExtension> get_AllScheduledExtensions();
    public abstract virtual bool get_AnyExtensionsScheduled();
    public abstract virtual bool get_ExtensionSdksAreScheduled();
    public abstract virtual bool get_RegularExtensionAreScheduled();
    public abstract virtual ObservableCollection`1<IScheduledExtension> get_ScheduledExtensionDowngrades();
    public abstract virtual ObservableCollection`1<IScheduledExtension> get_ScheduledExtensionInstalls();
    public abstract virtual ObservableCollection`1<IScheduledExtension> get_ScheduledExtensionUninstalls();
    public abstract virtual ObservableCollection`1<IScheduledExtension> get_ScheduledExtensionUpdates();
    public abstract virtual bool CanScheduleDowngrade(string id);
    public abstract virtual bool CanScheduleInstall(string id);
    public abstract virtual bool CanScheduleUninstall(string id);
    public abstract virtual bool CanScheduleUpdate(string id);
    public abstract virtual void Clear();
    public abstract virtual void ScheduleDowngrade(IScheduledExtension extension);
    public abstract virtual void ScheduleInstall(IScheduledExtension extension);
    public abstract virtual void ScheduleUninstall(IScheduledExtension extension);
    public abstract virtual void ScheduleUpdate(IScheduledExtension extension);
    public abstract virtual void UnscheduleDowngrade(string id);
    public abstract virtual void UnscheduleInstall(string id);
    public abstract virtual void UnscheduleUninstall(string id);
    public abstract virtual void UnscheduleUpdate(string id);
    public abstract virtual void Update(IExtensionScheduleLists updatedList);
}
public interface Microsoft.VisualStudio.ExtensionManager.IExtensionSdk {
    public string TargetPlatformIdentifier { get; }
    public string TargetPlatformVersion { get; }
    public string SdkName { get; }
    public string SdkVersion { get; }
    public abstract virtual string get_TargetPlatformIdentifier();
    public abstract virtual string get_TargetPlatformVersion();
    public abstract virtual string get_SdkName();
    public abstract virtual string get_SdkVersion();
}
public interface Microsoft.VisualStudio.ExtensionManager.IGalleryOnlineExtension {
    public string VsixID { get; }
    public string VsixVersion { get; }
    public DateTime LastModified { get; }
    public string Author { get; }
    public string Icon { get; }
    public string MoreInfoURL { get; }
    public string ReferralUrl { get; }
    public string ReportAbuseUrl { get; }
    public double Rating { get; }
    public int RatingsCount { get; }
    public int DownloadCount { get; }
    public string DefaultName { get; }
    public string Type { get; }
    public string ProjectTypeFriendly { get; }
    public bool SupportsCodeSeparation { get; }
    public bool SupportsMasterPage { get; }
    public string OnlinePreviewImage { get; }
    public abstract virtual string get_VsixID();
    public abstract virtual string get_VsixVersion();
    public abstract virtual DateTime get_LastModified();
    public abstract virtual string get_Author();
    public abstract virtual string get_Icon();
    public abstract virtual string get_MoreInfoURL();
    public abstract virtual string get_ReferralUrl();
    public abstract virtual string get_ReportAbuseUrl();
    public abstract virtual double get_Rating();
    public abstract virtual int get_RatingsCount();
    public abstract virtual int get_DownloadCount();
    public abstract virtual string get_DefaultName();
    public abstract virtual string get_Type();
    public abstract virtual string get_ProjectTypeFriendly();
    public abstract virtual bool get_SupportsCodeSeparation();
    public abstract virtual bool get_SupportsMasterPage();
    public abstract virtual string get_OnlinePreviewImage();
}
[NullableContextAttribute("2")]
public interface Microsoft.VisualStudio.ExtensionManager.IInstallableExtension {
    public string PackagePath { get; }
    public ExtensionDigitalSignature Signature { get; }
    public string SignedBy { get; }
    public X509Certificate2 SignatureCertificate { get; }
    [NullableAttribute("1")]
public IEnumerable`1<X509ChainStatus> InvalidCertificateInformation { get; }
    public bool IsExtensionManifestVersionV2 { get; }
    public bool HasEmbeddedExtensions { get; }
    public abstract virtual string get_PackagePath();
    public abstract virtual ExtensionDigitalSignature get_Signature();
    public abstract virtual string get_SignedBy();
    public abstract virtual X509Certificate2 get_SignatureCertificate();
    [NullableContextAttribute("1")]
public abstract virtual IEnumerable`1<X509ChainStatus> get_InvalidCertificateInformation();
    public abstract virtual bool get_IsExtensionManifestVersionV2();
    public abstract virtual bool get_HasEmbeddedExtensions();
}
public interface Microsoft.VisualStudio.ExtensionManager.IInstalledExtension {
    public string InstallPath { get; }
    public EnabledState State { get; }
    public AutoUpdateState AutoUpdateState { get; }
    public Nullable`1<DateTimeOffset> InstalledOn { get; }
    [ObsoleteAttribute("This property is deprecated and will be removed in a future release. Use CalculateSizeInBytesAsync", "True")]
public ulong SizeInBytes { get; }
    public bool InstalledPerMachine { get; }
    public bool IsPackComponent { get; }
    public HashSet`1<Guid> PackageGuids { get; }
    public bool IsProductUpdate { get; }
    public string IncompatibleReason { get; public set; }
    public abstract virtual string get_InstallPath();
    public abstract virtual EnabledState get_State();
    public abstract virtual AutoUpdateState get_AutoUpdateState();
    public abstract virtual Nullable`1<DateTimeOffset> get_InstalledOn();
    public abstract virtual ulong get_SizeInBytes();
    public abstract virtual bool get_InstalledPerMachine();
    public abstract virtual bool get_IsPackComponent();
    public abstract virtual string GetContentLocation(IExtensionContent content);
    public abstract virtual HashSet`1<Guid> get_PackageGuids();
    public abstract virtual bool get_IsProductUpdate();
    public abstract virtual string get_IncompatibleReason();
    public abstract virtual void set_IncompatibleReason(string value);
    public abstract virtual Task`1<ulong> CalculateSizeInBytesAsync();
}
public interface Microsoft.VisualStudio.ExtensionManager.ILogger {
    public abstract virtual void LogInformation(string message);
    public abstract virtual void LogInformation(string message, string path);
    public abstract virtual void LogWarning(string message);
    public abstract virtual void LogWarning(string message, string path);
    public abstract virtual void LogError(string message);
    public abstract virtual void LogError(string errorMessage, string path);
    public abstract virtual void LogException(Exception exception, string additionalMessage);
}
[GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "17.0.0.0")]
[DebuggerNonUserCodeAttribute]
[CompilerGeneratedAttribute]
public class Microsoft.VisualStudio.ExtensionManager.Impl.ExtensionEngineContractResources : object {
    private static ResourceManager resourceMan;
    private static CultureInfo resourceCulture;
    [EditorBrowsableAttribute("2")]
public static ResourceManager ResourceManager { get; }
    [EditorBrowsableAttribute("2")]
public static CultureInfo Culture { get; public set; }
    public static string ErrorAlreadyInstalled { get; }
    public static string ErrorBadAllUserExtension { get; }
    public static string ErrorBlockedOnProcesses { get; }
    public static string ErrorBreaksExistingExtensions { get; }
    public static string ErrorCannotDisablePackComponent { get; }
    public static string ErrorCannotEnableDependency { get; }
    public static string ErrorCertCheckFailed { get; }
    public static string ErrorCertFileNotFound { get; }
    public static string ErrorCertificateFieldsNotFound { get; }
    public static string ErrorCertificateFieldsNotFoundInUpdate { get; }
    public static string ErrorCertPackagePathNotFound { get; }
    public static string ErrorDirectoryInUse { get; }
    public static string ErrorDisallowedPackageTypesInCatalog { get; }
    public static string ErrorExtensionAndPlatformSigned { get; }
    public static string ErrorFilesInUse { get; }
    public static string ErrorFilesInUseAdditional { get; }
    public static string ErrorInconsistentManifestValues { get; }
    public static string ErrorInstallByMSI { get; }
    public static string ErrorInstallExtensionSDKDirectoryExists { get; }
    public static string ErrorInstallRequiresElevation { get; }
    public static string ErrorInvalidAttributeValue { get; }
    public static string ErrorInvalidAttributeValueLength { get; }
    public static string ErrorInvalidCount { get; }
    public static string ErrorInvalidElementValue { get; }
    public static string ErrorInvalidElementValueLength { get; }
    public static string ErrorInvalidInstallationTargetPlatformArchitecture { get; }
    public static string ErrorInvalidJsonManifest { get; }
    public static string ErrorInvalidLanguagePackManifestRootElement { get; }
    public static string ErrorInvalidManifest { get; }
    public static string ErrorInvalidManifestFileExtension { get; }
    public static string ErrorInvalidManifestRootElement { get; }
    public static string ErrorInvalidMinimumCount { get; }
    public static string ErrorInvalidPath { get; }
    public static string ErrorInvalidPath_Args2 { get; }
    public static string ErrorInvalidVSIX { get; }
    public static string ErrorInvalidVsixIdInCatalog_Args1 { get; }
    public static string ErrorLowerPackage_Args1 { get; }
    public static string ErrorMissingComponent { get; }
    public static string ErrorMissingEula { get; }
    public static string ErrorMissingInstallationTargetPlatformArchitecture { get; }
    public static string ErrorMissingLocalizedResources_Args2 { get; }
    public static string ErrorMissingManifest { get; }
    public static string ErrorMissingNameOrAuthor { get; }
    public static string ErrorMissingPackage_Args1 { get; }
    public static string ErrorMissingPackage1_Args1 { get; }
    public static string ErrorMissingReferences { get; }
    public static string ErrorMissingRequiredAttribute { get; }
    public static string ErrorMissingRequiredElement { get; }
    public static string ErrorMissingTargetFramework { get; }
    public static string ErrorNestedExtensionFailed { get; }
    public static string ErrorNestedExtensionInitialization { get; }
    public static string ErrorNestedExtensionReferenceIdMismatch { get; }
    public static string ErrorNestedVsixBrokenInternalDependency { get; }
    public static string ErrorNoPerUserOutOfConeFiles { get; }
    public static string ErrorNotValidSignedAllUserExtension { get; }
    public static string ErrorNotValidSignedPerUserExtension { get; }
    public static string ErrorOutOfDiskSpaceExceptionBody { get; }
    public static string ErrorOutOfDiskSpaceExceptionTitle { get; }
    public static string ErrorPerUserExperimentPartialManifestType { get; }
    public static string ErrorReferenceConstraint { get; }
    public static string ErrorUninstallDependencyException { get; }
    public static string ErrorUninstallDependentComponent { get; }
    public static string ErrorUninstallMSIExtension { get; }
    public static string ErrorUninstallOrphanedComponentRequiresElevation { get; }
    public static string ErrorUninstallRequiresElevation { get; }
    public static string ErrorUnknownProtocol { get; }
    public static string ErrorUnlistedPart { get; }
    public static string ErrorUnsignedCatalog { get; }
    public static string ErrorUnsupportedProduct { get; }
    public static string ErrorUpgradeInProgress { get; }
    public static string ErrorVsixVersionOutOfRange { get; }
    public static string InstalledByMultipleText { get; }
    public static string InvalidReleaseNotesText { get; }
    public static string OnlineRatingToolTipFormatString { get; }
    public static string OnlineVotesMultiple { get; }
    public static string OnlineVotesSingle { get; }
    public static string OnlineVotesStringFormat { get; }
    public static string ProductUpdatesNodeText { get; }
    public static string ReleaseNotesDialogTitle { get; }
    public static string SetupInstanceNotLaunchable { get; }
    public static string SetupLogEmitted { get; }
    public static string Sharepoint_ListNotFoundOnServer { get; }
    public static string StreamNotSeekable { get; }
    public static string TaskCreatedSuccessfully { get; }
    public static string TaskDoesNotExist { get; }
    public static string TaskExists { get; }
    public static string TaskNotRegistered { get; }
    public static string TaskServiceNotConnected { get; }
    public static string ToolsOptions_InvalidName { get; }
    public static string ToolsOptions_InvalidURL { get; }
    public static string UnlistedPartLogHeader { get; }
    public static string UnscheduleDowngradeExtension { get; }
    public static string UnscheduleExtension { get; }
    public static string UnscheduleInstallExtension { get; }
    public static string UnscheduleUninstallExtension { get; }
    public static string UnscheduleUpdateExtension { get; }
    public static string ValidateError_InvalidOperation { get; }
    public static string ValidateError_StringEmpty { get; }
    public static string VisualStudioGalleryNodeText { get; }
    public static string VisualStudioUpdateDescription { get; }
    public static string VisualStudioUpdateTitle { get; }
    public static Byte[] VSIXLanguagePackSchema { get; }
    public static Byte[] VSIXManifestSchema { get; }
    public static ResourceManager get_ResourceManager();
    public static CultureInfo get_Culture();
    public static void set_Culture(CultureInfo value);
    public static string get_ErrorAlreadyInstalled();
    public static string get_ErrorBadAllUserExtension();
    public static string get_ErrorBlockedOnProcesses();
    public static string get_ErrorBreaksExistingExtensions();
    public static string get_ErrorCannotDisablePackComponent();
    public static string get_ErrorCannotEnableDependency();
    public static string get_ErrorCertCheckFailed();
    public static string get_ErrorCertFileNotFound();
    public static string get_ErrorCertificateFieldsNotFound();
    public static string get_ErrorCertificateFieldsNotFoundInUpdate();
    public static string get_ErrorCertPackagePathNotFound();
    public static string get_ErrorDirectoryInUse();
    public static string get_ErrorDisallowedPackageTypesInCatalog();
    public static string get_ErrorExtensionAndPlatformSigned();
    public static string get_ErrorFilesInUse();
    public static string get_ErrorFilesInUseAdditional();
    public static string get_ErrorInconsistentManifestValues();
    public static string get_ErrorInstallByMSI();
    public static string get_ErrorInstallExtensionSDKDirectoryExists();
    public static string get_ErrorInstallRequiresElevation();
    public static string get_ErrorInvalidAttributeValue();
    public static string get_ErrorInvalidAttributeValueLength();
    public static string get_ErrorInvalidCount();
    public static string get_ErrorInvalidElementValue();
    public static string get_ErrorInvalidElementValueLength();
    public static string get_ErrorInvalidInstallationTargetPlatformArchitecture();
    public static string get_ErrorInvalidJsonManifest();
    public static string get_ErrorInvalidLanguagePackManifestRootElement();
    public static string get_ErrorInvalidManifest();
    public static string get_ErrorInvalidManifestFileExtension();
    public static string get_ErrorInvalidManifestRootElement();
    public static string get_ErrorInvalidMinimumCount();
    public static string get_ErrorInvalidPath();
    public static string get_ErrorInvalidPath_Args2();
    public static string get_ErrorInvalidVSIX();
    public static string get_ErrorInvalidVsixIdInCatalog_Args1();
    public static string get_ErrorLowerPackage_Args1();
    public static string get_ErrorMissingComponent();
    public static string get_ErrorMissingEula();
    public static string get_ErrorMissingInstallationTargetPlatformArchitecture();
    public static string get_ErrorMissingLocalizedResources_Args2();
    public static string get_ErrorMissingManifest();
    public static string get_ErrorMissingNameOrAuthor();
    public static string get_ErrorMissingPackage_Args1();
    public static string get_ErrorMissingPackage1_Args1();
    public static string get_ErrorMissingReferences();
    public static string get_ErrorMissingRequiredAttribute();
    public static string get_ErrorMissingRequiredElement();
    public static string get_ErrorMissingTargetFramework();
    public static string get_ErrorNestedExtensionFailed();
    public static string get_ErrorNestedExtensionInitialization();
    public static string get_ErrorNestedExtensionReferenceIdMismatch();
    public static string get_ErrorNestedVsixBrokenInternalDependency();
    public static string get_ErrorNoPerUserOutOfConeFiles();
    public static string get_ErrorNotValidSignedAllUserExtension();
    public static string get_ErrorNotValidSignedPerUserExtension();
    public static string get_ErrorOutOfDiskSpaceExceptionBody();
    public static string get_ErrorOutOfDiskSpaceExceptionTitle();
    public static string get_ErrorPerUserExperimentPartialManifestType();
    public static string get_ErrorReferenceConstraint();
    public static string get_ErrorUninstallDependencyException();
    public static string get_ErrorUninstallDependentComponent();
    public static string get_ErrorUninstallMSIExtension();
    public static string get_ErrorUninstallOrphanedComponentRequiresElevation();
    public static string get_ErrorUninstallRequiresElevation();
    public static string get_ErrorUnknownProtocol();
    public static string get_ErrorUnlistedPart();
    public static string get_ErrorUnsignedCatalog();
    public static string get_ErrorUnsupportedProduct();
    public static string get_ErrorUpgradeInProgress();
    public static string get_ErrorVsixVersionOutOfRange();
    public static string get_InstalledByMultipleText();
    public static string get_InvalidReleaseNotesText();
    public static string get_OnlineRatingToolTipFormatString();
    public static string get_OnlineVotesMultiple();
    public static string get_OnlineVotesSingle();
    public static string get_OnlineVotesStringFormat();
    public static string get_ProductUpdatesNodeText();
    public static string get_ReleaseNotesDialogTitle();
    public static string get_SetupInstanceNotLaunchable();
    public static string get_SetupLogEmitted();
    public static string get_Sharepoint_ListNotFoundOnServer();
    public static string get_StreamNotSeekable();
    public static string get_TaskCreatedSuccessfully();
    public static string get_TaskDoesNotExist();
    public static string get_TaskExists();
    public static string get_TaskNotRegistered();
    public static string get_TaskServiceNotConnected();
    public static string get_ToolsOptions_InvalidName();
    public static string get_ToolsOptions_InvalidURL();
    public static string get_UnlistedPartLogHeader();
    public static string get_UnscheduleDowngradeExtension();
    public static string get_UnscheduleExtension();
    public static string get_UnscheduleInstallExtension();
    public static string get_UnscheduleUninstallExtension();
    public static string get_UnscheduleUpdateExtension();
    public static string get_ValidateError_InvalidOperation();
    public static string get_ValidateError_StringEmpty();
    public static string get_VisualStudioGalleryNodeText();
    public static string get_VisualStudioUpdateDescription();
    public static string get_VisualStudioUpdateTitle();
    public static Byte[] get_VSIXLanguagePackSchema();
    public static Byte[] get_VSIXManifestSchema();
}
public enum Microsoft.VisualStudio.ExtensionManager.Impl.Settings.CacheMode : Enum {
    public int value__;
    public static CacheMode WriteToDisk;
    public static CacheMode MemoryOnly;
    public static CacheMode UnitTestMode;
}
[TupleElementNamesAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class Microsoft.VisualStudio.ExtensionManager.Impl.Settings.ScanResult : List`1<ValueTuple`2<ExtensionLocations, string>> {
    [CompilerGeneratedAttribute]
private bool <PerformedExtensionScan>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <PerformedSDKScan>k__BackingField;
    public bool PerformedExtensionScan { get; public set; }
    public bool PerformedSDKScan { get; public set; }
    [CompilerGeneratedAttribute]
public bool get_PerformedExtensionScan();
    [CompilerGeneratedAttribute]
public void set_PerformedExtensionScan(bool value);
    [CompilerGeneratedAttribute]
public bool get_PerformedSDKScan();
    [CompilerGeneratedAttribute]
public void set_PerformedSDKScan(bool value);
}
public class Microsoft.VisualStudio.ExtensionManager.InconsistentNestedReferenceIdException : ExtensionException {
    public int ErrorCode { get; }
    public InconsistentNestedReferenceIdException(string message);
    public InconsistentNestedReferenceIdException(string message, Exception inner);
    protected InconsistentNestedReferenceIdException(SerializationInfo info, StreamingContext context);
    public virtual int get_ErrorCode();
}
public interface Microsoft.VisualStudio.ExtensionManager.INotifyUpdateInstallCompleted {
    [CompilerGeneratedAttribute]
public abstract virtual void add_UpdateInstallCompletedAsync(AsyncEventHandler`1<InstallCompletedEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_UpdateInstallCompletedAsync(AsyncEventHandler`1<InstallCompletedEventArgs> value);
    public abstract virtual Task InvokeUpdateInstallCompletedAsync(InstallCompletedEventArgs e);
}
[GeneratedCodeAttribute("xsd", "4.6.81.0")]
[XmlTypeAttribute]
public enum Microsoft.VisualStudio.ExtensionManager.InstallationPartialManifestType : Enum {
    public int value__;
    public static InstallationPartialManifestType Default;
    public static InstallationPartialManifestType Experiment;
}
public class Microsoft.VisualStudio.ExtensionManager.InstallByMsiException : ExtensionException {
    public int ErrorCode { get; }
    public InstallByMsiException(string message);
    public InstallByMsiException(string message, Exception inner);
    protected InstallByMsiException(SerializationInfo info, StreamingContext context);
    public virtual int get_ErrorCode();
}
public class Microsoft.VisualStudio.ExtensionManager.InstallCompletedEventArgs : AsyncCompletedEventArgs {
    private IInstalledExtension _extension;
    private InstallState _state;
    private bool _restartRequired;
    public IInstalledExtension Extension { get; }
    public InstallState State { get; }
    public bool RestartRequired { get; }
    public InstallCompletedEventArgs(IInstalledExtension extension, InstallState state, bool restartRequired, Exception exception, bool canceled, object userState);
    public IInstalledExtension get_Extension();
    public InstallState get_State();
    public bool get_RestartRequired();
}
public class Microsoft.VisualStudio.ExtensionManager.InstallerExtensionTelemetryInfo : object {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Version>k__BackingField;
    [CompilerGeneratedAttribute]
private string <VSIXIdentifier>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TargetSku>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TargetVsVersion>k__BackingField;
    [CompilerGeneratedAttribute]
private string <OperationType>k__BackingField;
    public string Name { get; private set; }
    public string Version { get; private set; }
    public string VSIXIdentifier { get; private set; }
    public string TargetSku { get; private set; }
    public string TargetVsVersion { get; private set; }
    public string OperationType { get; private set; }
    public InstallerExtensionTelemetryInfo(string name, string version, string vsixIdentifier, string targetSku, string targetVsVersion, VsixInstallerOperationType operationType);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
private void set_Name(string value);
    [CompilerGeneratedAttribute]
public string get_Version();
    [CompilerGeneratedAttribute]
private void set_Version(string value);
    [CompilerGeneratedAttribute]
public string get_VSIXIdentifier();
    [CompilerGeneratedAttribute]
private void set_VSIXIdentifier(string value);
    [CompilerGeneratedAttribute]
public string get_TargetSku();
    [CompilerGeneratedAttribute]
private void set_TargetSku(string value);
    [CompilerGeneratedAttribute]
public string get_TargetVsVersion();
    [CompilerGeneratedAttribute]
private void set_TargetVsVersion(string value);
    [CompilerGeneratedAttribute]
public string get_OperationType();
    [CompilerGeneratedAttribute]
private void set_OperationType(string value);
}
[FlagsAttribute]
public enum Microsoft.VisualStudio.ExtensionManager.InstallFlags : Enum {
    public int value__;
    public static InstallFlags None;
    public static InstallFlags PerMachine;
    public static InstallFlags EnforceCertificateCheckForUpgrade;
    public static InstallFlags NestedExtension;
    public static InstallFlags SkipDotNetFrameworkCheck;
    public static InstallFlags Replace;
    public static InstallFlags CanOverwriteFiles;
    public static InstallFlags ShutdownBlockingProcesses;
    public static InstallFlags SkipCertCheck;
    public static InstallFlags IsSilent;
}
public class Microsoft.VisualStudio.ExtensionManager.InstallProgressChangedEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
private InstallProgressData <Data>k__BackingField;
    [CompilerGeneratedAttribute]
private object <UserState>k__BackingField;
    public InstallProgressData Data { get; }
    public object UserState { get; }
    public InstallProgressChangedEventArgs(InstallProgressData data, object userState);
    [CompilerGeneratedAttribute]
public InstallProgressData get_Data();
    [CompilerGeneratedAttribute]
public object get_UserState();
}
public class Microsoft.VisualStudio.ExtensionManager.InstallProgressData : object {
    [CompilerGeneratedAttribute]
private bool <IsFullMessage>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsStepComplete>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private double <Progress>k__BackingField;
    [CompilerGeneratedAttribute]
private InstallProgressType <Type>k__BackingField;
    public bool IsFullMessage { get; }
    public bool IsStepComplete { get; }
    public string Name { get; }
    public double Progress { get; }
    public InstallProgressType Type { get; }
    public InstallProgressData(string name, double progress, InstallProgressType type, bool isComplete, bool fullMessage);
    public InstallProgressData(string name, double progress, InstallProgressType type, bool fullMessage);
    [CompilerGeneratedAttribute]
public bool get_IsFullMessage();
    [CompilerGeneratedAttribute]
public bool get_IsStepComplete();
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public double get_Progress();
    [CompilerGeneratedAttribute]
public InstallProgressType get_Type();
}
public enum Microsoft.VisualStudio.ExtensionManager.InstallProgressType : Enum {
    public int value__;
    public static InstallProgressType Unknown;
    public static InstallProgressType Download;
    public static InstallProgressType Install;
    public static InstallProgressType Uninstall;
    public static InstallProgressType Downgrade;
    public static InstallProgressType UpdateSKU;
}
public enum Microsoft.VisualStudio.ExtensionManager.InstallState : Enum {
    public int value__;
    public static InstallState Installed;
    public static InstallState Uninstalled;
}
public class Microsoft.VisualStudio.ExtensionManager.InvalidExtensionManifestException : ExtensionException {
    public int ErrorCode { get; }
    public InvalidExtensionManifestException(string message);
    public InvalidExtensionManifestException(string message, Exception inner);
    protected InvalidExtensionManifestException(SerializationInfo info, StreamingContext context);
    public virtual int get_ErrorCode();
}
public class Microsoft.VisualStudio.ExtensionManager.InvalidExtensionPackageException : ExtensionException {
    public int ErrorCode { get; }
    public InvalidExtensionPackageException(string message);
    public InvalidExtensionPackageException(string message, Exception inner);
    protected InvalidExtensionPackageException(SerializationInfo info, StreamingContext context);
    public virtual int get_ErrorCode();
}
public class Microsoft.VisualStudio.ExtensionManager.InvalidPerMachineOperationException : ExtensionException {
    public int ErrorCode { get; }
    public InvalidPerMachineOperationException(string message);
    public InvalidPerMachineOperationException(string message, Exception inner);
    protected InvalidPerMachineOperationException(SerializationInfo info, StreamingContext context);
    public virtual int get_ErrorCode();
}
public interface Microsoft.VisualStudio.ExtensionManager.IOnlineExtension {
    public bool ExtensionIsInstalled { get; }
    public bool IsReferenceLink { get; }
    public bool IsMoreInfoLinkVisible { get; }
    public bool IsReleaseNotesLinkVisible { get; }
    public bool IsReportLinkVisible { get; }
    public bool IsBadgeVisible { get; }
    public string SetupCommandLine { get; }
    public string ApplicableSKUs { get; }
    public bool IsRatingVisible { get; }
    public string RatingToolTip { get; }
    public string Version { get; }
    public Version NonNullVsixVersion { get; }
    public string RatingsCountFormatted { get; }
    public object PreviewImageNonNull { get; }
    public object IconNonNull { get; }
    public string ReleaseNotes { get; }
    public string InstalledBy { get; }
    public bool HasParentExtensions { get; }
    public VersionRange OSVersionRange { get; }
    public IEnumerable`1<IOnlineExtension> PackedExtensions { get; }
    public DateTime PublishedDate { get; }
    public string PublisherDomain { get; }
    public bool IsPublisherDomainVerified { get; }
    public Func`2<CancellationToken, Task`1<string>> FetchMarkdownDescriptionAsync { get; }
    public string MarkdownAssetBaseURL { get; }
    public string PricingCategory { get; }
    public abstract virtual void RefreshInstalledStatus();
    public abstract virtual bool get_ExtensionIsInstalled();
    public abstract virtual bool get_IsReferenceLink();
    public abstract virtual bool get_IsMoreInfoLinkVisible();
    public abstract virtual bool get_IsReleaseNotesLinkVisible();
    public abstract virtual bool get_IsReportLinkVisible();
    public abstract virtual bool get_IsBadgeVisible();
    public abstract virtual string get_SetupCommandLine();
    public abstract virtual string get_ApplicableSKUs();
    public abstract virtual bool get_IsRatingVisible();
    public abstract virtual string get_RatingToolTip();
    public abstract virtual string get_Version();
    public abstract virtual Version get_NonNullVsixVersion();
    public abstract virtual string get_RatingsCountFormatted();
    public abstract virtual object get_PreviewImageNonNull();
    public abstract virtual object get_IconNonNull();
    public abstract virtual string get_ReleaseNotes();
    public abstract virtual string get_InstalledBy();
    public abstract virtual bool get_HasParentExtensions();
    public abstract virtual VersionRange get_OSVersionRange();
    public abstract virtual IEnumerable`1<IOnlineExtension> get_PackedExtensions();
    public abstract virtual DateTime get_PublishedDate();
    public abstract virtual string get_PublisherDomain();
    public abstract virtual bool get_IsPublisherDomainVerified();
    public abstract virtual Func`2<CancellationToken, Task`1<string>> get_FetchMarkdownDescriptionAsync();
    public abstract virtual string get_MarkdownAssetBaseURL();
    public abstract virtual string get_PricingCategory();
}
public interface Microsoft.VisualStudio.ExtensionManager.IOnlineExtensionUpdate {
    public IInstalledExtension InstalledExtension { get; }
    public IOnlineExtension UpdateEntry { get; }
    public bool UpdateIsInstalled { get; }
    public abstract virtual IInstalledExtension get_InstalledExtension();
    public abstract virtual IOnlineExtension get_UpdateEntry();
    public abstract virtual void RefreshUpdateStatus();
    public abstract virtual bool get_UpdateIsInstalled();
}
public interface Microsoft.VisualStudio.ExtensionManager.IRepositoryEntry {
    public string DownloadUrl { get; public set; }
    public string DownloadUpdateUrl { get; public set; }
    public string VsixReferences { get; public set; }
    public abstract virtual string get_DownloadUrl();
    public abstract virtual void set_DownloadUrl(string value);
    public abstract virtual string get_DownloadUpdateUrl();
    public abstract virtual void set_DownloadUpdateUrl(string value);
    public abstract virtual string get_VsixReferences();
    public abstract virtual void set_VsixReferences(string value);
}
public interface Microsoft.VisualStudio.ExtensionManager.ISchedulableExtension {
    public IExtensionScheduleLists ExtensionScheduleLists { get; }
    public bool IsScheduled { get; }
    public abstract virtual IExtensionScheduleLists get_ExtensionScheduleLists();
    public abstract virtual bool get_IsScheduled();
    public abstract virtual void RefreshScheduledStatus();
}
public interface Microsoft.VisualStudio.ExtensionManager.IScheduledExtension {
    public string DownloadPath { get; }
    public ExtensionStatusChangeType ExtensionStatusChangeType { get; }
    public string Identifier { get; }
    public bool IsSDK { get; }
    public string Name { get; }
    public string UnscheduleButtonAutomationPropertyHelp { get; }
    public string UnscheduleButtonAutomationPropertyName { get; }
    public int VsixHash { get; }
    public abstract virtual string get_DownloadPath();
    public abstract virtual ExtensionStatusChangeType get_ExtensionStatusChangeType();
    public abstract virtual string get_Identifier();
    public abstract virtual bool get_IsSDK();
    public abstract virtual string get_Name();
    public abstract virtual string get_UnscheduleButtonAutomationPropertyHelp();
    public abstract virtual string get_UnscheduleButtonAutomationPropertyName();
    public abstract virtual int get_VsixHash();
}
public interface Microsoft.VisualStudio.ExtensionManager.ITelemetryLogger {
    public abstract virtual void LogExtensionManagerSessionEndTelemetry(ExtensionManagerSessionData sessionData);
    public abstract virtual Guid LogExtensionManagerSessionStartTelemetry(bool fromSuggestedExtension);
    public abstract virtual void LogInstallTelemetry(IEnumerable`1<IInstalledExtension> installedExtensions);
    public abstract virtual void LogUninstallTelemetry(IEnumerable`1<IInstalledExtension> installedExtensions);
    public abstract virtual void LogEnableDisableTelemetry(IInstalledExtension extension);
    public abstract virtual void LogInstalledExtensions(IInstalledExtensionSettingsList installedExtensions);
    public abstract virtual void LogExtensionApiUsage(ExtensionsApiUsage apiUsage);
    public abstract virtual void LogExtensionApiUsageOptOut();
    public abstract virtual void LogAtomicAsset(string eventName, Dictionary`2<string, object> propertiesToSend, string assetId, int assetVersion);
    public abstract virtual object CreateTelemetryActivity(string id);
    public abstract virtual object CreateTelemetryEvent(string id);
    public abstract virtual object CreateFaultEvent(string id, Exception ex);
    public abstract virtual void SetTelemetryProperty(object telemetryObject, string id, T value);
    public abstract virtual void Post(object telemetryObject);
    public abstract virtual void PostFault(string eventName, string description, Exception exceptionObject, String[] errorInformation);
    public abstract virtual void LogSdkExtensionFoundTelemetry(string extensionPath, string rootPath, ExtensionLocations location);
}
public interface Microsoft.VisualStudio.ExtensionManager.IVsGalleryExtension {
    public Guid CategoryID { get; public set; }
    public int Ranking { get; public set; }
    public object Relevance { get; public set; }
    public long SizeInBytes { get; public set; }
    public IEnumerable`1<IOnlineExtension> PackedExtensions { get; public set; }
    public abstract virtual Guid get_CategoryID();
    public abstract virtual void set_CategoryID(Guid value);
    public abstract virtual int get_Ranking();
    public abstract virtual void set_Ranking(int value);
    public abstract virtual object get_Relevance();
    public abstract virtual void set_Relevance(object value);
    public abstract virtual long get_SizeInBytes();
    public abstract virtual void set_SizeInBytes(long value);
    public abstract virtual IEnumerable`1<IOnlineExtension> get_PackedExtensions();
    public abstract virtual void set_PackedExtensions(IEnumerable`1<IOnlineExtension> value);
}
public interface Microsoft.VisualStudio.ExtensionManager.IVsGalleryOnlineExtension {
    public List`1<string> PackedExtensionsVsixIDs { get; }
    public List`1<string> Flags { get; }
    public abstract virtual List`1<string> get_PackedExtensionsVsixIDs();
    public abstract virtual List`1<string> get_Flags();
}
public class Microsoft.VisualStudio.ExtensionManager.MissingPackagePartException : ExtensionException {
    [CompilerGeneratedAttribute]
private Uri <PartUri>k__BackingField;
    public int ErrorCode { get; }
    public Uri PartUri { get; private set; }
    public MissingPackagePartException(string message);
    public MissingPackagePartException(Uri partUri);
    public MissingPackagePartException(string message, Exception inner);
    protected MissingPackagePartException(SerializationInfo info, StreamingContext context);
    public virtual int get_ErrorCode();
    [CompilerGeneratedAttribute]
public Uri get_PartUri();
    [CompilerGeneratedAttribute]
private void set_PartUri(Uri value);
    public virtual void GetObjectData(SerializationInfo info, StreamingContext context);
}
public class Microsoft.VisualStudio.ExtensionManager.MissingReferenceInformation : object {
    [CompilerGeneratedAttribute]
private string <Identifier>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private Uri <MoreInfoUrl>k__BackingField;
    public string Identifier { get; }
    public string Name { get; }
    public Uri MoreInfoUrl { get; }
    public MissingReferenceInformation(string identifier, string name, Uri moreInfoUrl);
    protected MissingReferenceInformation(SerializationInfo info, StreamingContext context);
    [CompilerGeneratedAttribute]
public string get_Identifier();
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public Uri get_MoreInfoUrl();
    public virtual void GetObjectData(SerializationInfo info, StreamingContext context);
}
public class Microsoft.VisualStudio.ExtensionManager.MissingReferencesException : ExtensionException {
    private MissingReferenceInformation[] missingReferences;
    public int ErrorCode { get; }
    public IEnumerable`1<MissingReferenceInformation> MissingReferences { get; }
    public MissingReferencesException(string message);
    public MissingReferencesException(string message, IEnumerable`1<IExtensionReference> missingReferences);
    public MissingReferencesException(string message, Exception inner);
    protected MissingReferencesException(SerializationInfo info, StreamingContext context);
    public virtual void GetObjectData(SerializationInfo info, StreamingContext context);
    public virtual int get_ErrorCode();
    public IEnumerable`1<MissingReferenceInformation> get_MissingReferences();
}
public class Microsoft.VisualStudio.ExtensionManager.MissingTargetFrameworkException : ExtensionException {
    public int ErrorCode { get; }
    public MissingTargetFrameworkException(string message);
    public MissingTargetFrameworkException(string message, Exception inner);
    protected MissingTargetFrameworkException(SerializationInfo info, StreamingContext context);
    public virtual int get_ErrorCode();
}
public class Microsoft.VisualStudio.ExtensionManager.NestedExtensionInstallException : ExtensionException {
    public int ErrorCode { get; }
    public NestedExtensionInstallException(string message);
    public NestedExtensionInstallException(string message, Exception inner);
    protected NestedExtensionInstallException(SerializationInfo info, StreamingContext context);
    public virtual int get_ErrorCode();
}
public class Microsoft.VisualStudio.ExtensionManager.NotInstalledException : ExtensionException {
    public int ErrorCode { get; }
    public NotInstalledException(string message);
    public NotInstalledException(string message, Exception inner);
    protected NotInstalledException(SerializationInfo info, StreamingContext context);
    public virtual int get_ErrorCode();
}
public class Microsoft.VisualStudio.ExtensionManager.NotPendingDeletionException : ExtensionException {
    public int ErrorCode { get; }
    public NotPendingDeletionException(string message);
    public NotPendingDeletionException(string message, Exception inner);
    protected NotPendingDeletionException(SerializationInfo info, StreamingContext context);
    public virtual int get_ErrorCode();
}
public abstract class Microsoft.VisualStudio.ExtensionManager.OnlineExtensionBase : VSGalleryOnlineExtension {
    [CompilerGeneratedAttribute]
private PropertyChangedEventHandler PropertyChanged;
    [CompilerGeneratedAttribute]
private float <Priority>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ExtensionIsInstalled>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsReferenceLink>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsMoreInfoLinkVisible>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsReleaseNotesLinkVisible>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsReportLinkVisible>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsBadgeVisible>k__BackingField;
    [CompilerGeneratedAttribute]
private string <SetupCommandLine>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ApplicableSKUs>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsRatingVisible>k__BackingField;
    [CompilerGeneratedAttribute]
private string <RatingToolTip>k__BackingField;
    [CompilerGeneratedAttribute]
private Version <NonNullVsixVersion>k__BackingField;
    [CompilerGeneratedAttribute]
private string <RatingsCountFormatted>k__BackingField;
    [CompilerGeneratedAttribute]
private object <PreviewImageNonNull>k__BackingField;
    [CompilerGeneratedAttribute]
private object <IconNonNull>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ReleaseNotes>k__BackingField;
    [CompilerGeneratedAttribute]
private string <InstalledBy>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <HasParentExtensions>k__BackingField;
    [CompilerGeneratedAttribute]
private VersionRange <OSVersionRange>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<IOnlineExtension> <PackedExtensions>k__BackingField;
    [CompilerGeneratedAttribute]
private IExtensionScheduleLists <ExtensionScheduleLists>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsScheduled>k__BackingField;
    [CompilerGeneratedAttribute]
private string <PricingCategory>k__BackingField;
    public float Priority { get; }
    public bool ExtensionIsInstalled { get; protected set; }
    public bool IsReferenceLink { get; protected set; }
    public bool IsMoreInfoLinkVisible { get; protected set; }
    public bool IsReleaseNotesLinkVisible { get; protected set; }
    public bool IsReportLinkVisible { get; protected set; }
    public bool IsBadgeVisible { get; protected set; }
    public string SetupCommandLine { get; protected set; }
    public string ApplicableSKUs { get; protected set; }
    public bool IsRatingVisible { get; protected set; }
    public string RatingToolTip { get; protected set; }
    public Version NonNullVsixVersion { get; protected set; }
    public string RatingsCountFormatted { get; protected set; }
    public object PreviewImageNonNull { get; protected set; }
    public object IconNonNull { get; protected set; }
    public string ReleaseNotes { get; public set; }
    public string InstalledBy { get; protected set; }
    public bool HasParentExtensions { get; protected set; }
    public VersionRange OSVersionRange { get; protected set; }
    public IEnumerable`1<IOnlineExtension> PackedExtensions { get; protected set; }
    public IExtensionScheduleLists ExtensionScheduleLists { get; protected set; }
    public bool IsScheduled { get; protected set; }
    public string PricingCategory { get; public set; }
    [CompilerGeneratedAttribute]
public sealed virtual void add_PropertyChanged(PropertyChangedEventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_PropertyChanged(PropertyChangedEventHandler value);
    [CompilerGeneratedAttribute]
public virtual float get_Priority();
    [CompilerGeneratedAttribute]
public virtual bool get_ExtensionIsInstalled();
    [CompilerGeneratedAttribute]
protected virtual void set_ExtensionIsInstalled(bool value);
    [CompilerGeneratedAttribute]
public virtual bool get_IsReferenceLink();
    [CompilerGeneratedAttribute]
protected virtual void set_IsReferenceLink(bool value);
    [CompilerGeneratedAttribute]
public virtual bool get_IsMoreInfoLinkVisible();
    [CompilerGeneratedAttribute]
protected virtual void set_IsMoreInfoLinkVisible(bool value);
    [CompilerGeneratedAttribute]
public virtual bool get_IsReleaseNotesLinkVisible();
    [CompilerGeneratedAttribute]
protected virtual void set_IsReleaseNotesLinkVisible(bool value);
    [CompilerGeneratedAttribute]
public virtual bool get_IsReportLinkVisible();
    [CompilerGeneratedAttribute]
protected virtual void set_IsReportLinkVisible(bool value);
    [CompilerGeneratedAttribute]
public virtual bool get_IsBadgeVisible();
    [CompilerGeneratedAttribute]
protected virtual void set_IsBadgeVisible(bool value);
    [CompilerGeneratedAttribute]
public virtual string get_SetupCommandLine();
    [CompilerGeneratedAttribute]
protected virtual void set_SetupCommandLine(string value);
    [CompilerGeneratedAttribute]
public virtual string get_ApplicableSKUs();
    [CompilerGeneratedAttribute]
protected virtual void set_ApplicableSKUs(string value);
    [CompilerGeneratedAttribute]
public virtual bool get_IsRatingVisible();
    [CompilerGeneratedAttribute]
protected virtual void set_IsRatingVisible(bool value);
    [CompilerGeneratedAttribute]
public virtual string get_RatingToolTip();
    [CompilerGeneratedAttribute]
protected virtual void set_RatingToolTip(string value);
    [CompilerGeneratedAttribute]
public virtual Version get_NonNullVsixVersion();
    [CompilerGeneratedAttribute]
protected virtual void set_NonNullVsixVersion(Version value);
    [CompilerGeneratedAttribute]
public virtual string get_RatingsCountFormatted();
    [CompilerGeneratedAttribute]
protected virtual void set_RatingsCountFormatted(string value);
    [CompilerGeneratedAttribute]
public virtual object get_PreviewImageNonNull();
    [CompilerGeneratedAttribute]
protected virtual void set_PreviewImageNonNull(object value);
    [CompilerGeneratedAttribute]
public virtual object get_IconNonNull();
    [CompilerGeneratedAttribute]
protected virtual void set_IconNonNull(object value);
    [CompilerGeneratedAttribute]
public virtual string get_ReleaseNotes();
    [CompilerGeneratedAttribute]
public virtual void set_ReleaseNotes(string value);
    [CompilerGeneratedAttribute]
public virtual string get_InstalledBy();
    [CompilerGeneratedAttribute]
protected virtual void set_InstalledBy(string value);
    [CompilerGeneratedAttribute]
public virtual bool get_HasParentExtensions();
    [CompilerGeneratedAttribute]
protected virtual void set_HasParentExtensions(bool value);
    [CompilerGeneratedAttribute]
public virtual VersionRange get_OSVersionRange();
    [CompilerGeneratedAttribute]
protected virtual void set_OSVersionRange(VersionRange value);
    [CompilerGeneratedAttribute]
public virtual IEnumerable`1<IOnlineExtension> get_PackedExtensions();
    [CompilerGeneratedAttribute]
protected virtual void set_PackedExtensions(IEnumerable`1<IOnlineExtension> value);
    [CompilerGeneratedAttribute]
public virtual IExtensionScheduleLists get_ExtensionScheduleLists();
    [CompilerGeneratedAttribute]
protected virtual void set_ExtensionScheduleLists(IExtensionScheduleLists value);
    [CompilerGeneratedAttribute]
public virtual bool get_IsScheduled();
    [CompilerGeneratedAttribute]
protected virtual void set_IsScheduled(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_PricingCategory();
    [CompilerGeneratedAttribute]
public void set_PricingCategory(string value);
    public virtual void RefreshInstalledStatus();
    public virtual void RefreshScheduledStatus();
    protected void OnPropertyChanged(string propertyName);
}
public class Microsoft.VisualStudio.ExtensionManager.PackageTelemetryInfo : object {
    [CompilerGeneratedAttribute]
private string <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    public string Id { get; public set; }
    public string Name { get; public set; }
    public PackageTelemetryInfo(string id, string name);
    [CompilerGeneratedAttribute]
public string get_Id();
    [CompilerGeneratedAttribute]
public void set_Id(string value);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
}
public class Microsoft.VisualStudio.ExtensionManager.PartialProgress : object {
    private double baseline;
    private double interval;
    private IProgress`1<InstallProgressData> progress;
    private PartialProgress(IProgress`1<InstallProgressData> progress, double baseline, double interval);
    private sealed virtual override void System.IProgress<Microsoft.VisualStudio.ExtensionManager.InstallProgressData>.Report(InstallProgressData value);
    public static IProgress`1<InstallProgressData> CreateForStep(IProgress`1<InstallProgressData> progress, int totalSteps, int currentStep);
    public static IProgress`1<InstallProgressData> CreateForFinalStep(IProgress`1<InstallProgressData> progress, int totalSteps);
}
public enum Microsoft.VisualStudio.ExtensionManager.ProductArchitecture : Enum {
    public int value__;
    public static ProductArchitecture notSpecified;
    public static ProductArchitecture x86;
    public static ProductArchitecture amd64;
    public static ProductArchitecture arm64;
}
[ExtensionAttribute]
public static class Microsoft.VisualStudio.ExtensionManager.ProductArchitectureExtensions : object {
    [ExtensionAttribute]
public static bool CompatibleWith(ProductArchitecture targetArch, ProductArchitecture testArch);
    [ExtensionAttribute]
public static ProductArchitecture ToProductArchitecture(string productArchitecture);
}
public class Microsoft.VisualStudio.ExtensionManager.ProxyCredentialsRequiredException : ExtensionException {
    [CompilerGeneratedAttribute]
private string <Url>k__BackingField;
    public string Url { get; private set; }
    public int ErrorCode { get; }
    public ProxyCredentialsRequiredException(string url);
    public ProxyCredentialsRequiredException(string url, string message);
    public ProxyCredentialsRequiredException(string url, string message, Exception inner);
    protected ProxyCredentialsRequiredException(SerializationInfo info, StreamingContext context);
    [CompilerGeneratedAttribute]
public string get_Url();
    [CompilerGeneratedAttribute]
private void set_Url(string value);
    public virtual int get_ErrorCode();
    public virtual void GetObjectData(SerializationInfo info, StreamingContext context);
}
[DefaultMemberAttribute("Item")]
public class Microsoft.VisualStudio.ExtensionManager.ReadOnlyDictionary`2 : object {
    private IDictionary`2<TKey, TValue> m_wrappedDictionary;
    public ICollection`1<TKey> Keys { get; }
    public ICollection`1<TValue> Values { get; }
    public TValue Item { get; public set; }
    public int Count { get; }
    public bool IsReadOnly { get; }
    public ReadOnlyDictionary`2(IDictionary`2<TKey, TValue> wrappedDictionary);
    public sealed virtual void Add(TKey key, TValue value);
    public sealed virtual bool ContainsKey(TKey key);
    public sealed virtual ICollection`1<TKey> get_Keys();
    public sealed virtual bool Remove(TKey key);
    public sealed virtual bool TryGetValue(TKey key, TValue& value);
    public sealed virtual ICollection`1<TValue> get_Values();
    public sealed virtual TValue get_Item(TKey key);
    public sealed virtual void set_Item(TKey key, TValue value);
    public sealed virtual void Add(KeyValuePair`2<TKey, TValue> item);
    public sealed virtual void Clear();
    public sealed virtual bool Contains(KeyValuePair`2<TKey, TValue> item);
    public sealed virtual void CopyTo(KeyValuePair`2[] array, int arrayIndex);
    public sealed virtual int get_Count();
    public sealed virtual bool get_IsReadOnly();
    public sealed virtual bool Remove(KeyValuePair`2<TKey, TValue> item);
    public sealed virtual IEnumerator`1<KeyValuePair`2<TKey, TValue>> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
}
public class Microsoft.VisualStudio.ExtensionManager.ReferenceConstraintException : ExtensionException {
    public int ErrorCode { get; }
    public ReferenceConstraintException(string message);
    public ReferenceConstraintException(string message, Exception inner);
    protected ReferenceConstraintException(SerializationInfo info, StreamingContext context);
    public virtual int get_ErrorCode();
}
public class Microsoft.VisualStudio.ExtensionManager.RequiresAdminRightsException : RequiresRestartException {
    public int ErrorCode { get; }
    public RequiresAdminRightsException(string message);
    public RequiresAdminRightsException(string message, Exception inner);
    protected RequiresAdminRightsException(SerializationInfo info, StreamingContext context);
    public virtual int get_ErrorCode();
}
public class Microsoft.VisualStudio.ExtensionManager.RequiresInstallerException : RequiresRestartException {
    public int ErrorCode { get; }
    public RequiresInstallerException(string message);
    public RequiresInstallerException(string message, Exception inner);
    protected RequiresInstallerException(SerializationInfo info, StreamingContext context);
    public virtual int get_ErrorCode();
}
public abstract class Microsoft.VisualStudio.ExtensionManager.RequiresRestartException : ExtensionException {
    public RequiresRestartException(string message);
    public RequiresRestartException(string message, Exception inner);
    protected RequiresRestartException(SerializationInfo info, StreamingContext context);
}
[FlagsAttribute]
public enum Microsoft.VisualStudio.ExtensionManager.RestartReason : Enum {
    public int value__;
    public static RestartReason None;
    public static RestartReason PendingEnable;
    public static RestartReason PendingDisable;
    public static RestartReason PendingUninstall;
    public static RestartReason AutoUpdate;
    public static RestartReason PendingModification;
}
public class Microsoft.VisualStudio.ExtensionManager.RunFromEnginePathLocationException : RequiresRestartException {
    public int ErrorCode { get; }
    public RunFromEnginePathLocationException(string message);
    public RunFromEnginePathLocationException(string message, Exception inner);
    protected RunFromEnginePathLocationException(SerializationInfo info, StreamingContext context);
    public virtual int get_ErrorCode();
}
public enum Microsoft.VisualStudio.ExtensionManager.SettingsStorage.ApplicationDataFolder : Enum {
    public int value__;
    public static ApplicationDataFolder LocalSettings;
    public static ApplicationDataFolder RoamingSettings;
    public static ApplicationDataFolder Configuration;
    public static ApplicationDataFolder Documents;
    public static ApplicationDataFolder UserExtensions;
    public static ApplicationDataFolder ApplicationExtensions;
}
public interface Microsoft.VisualStudio.ExtensionManager.SettingsStorage.ISettingsManager {
    public string InstallPath { get; }
    public abstract virtual ISettingsStore GetReadOnlySettingsStore(SettingsScope scope);
    public abstract virtual IWritableSettingsStore GetWritableSettingsStore(SettingsScope scope);
    public abstract virtual string GetApplicationDataFolder(ApplicationDataFolder folder);
    public abstract virtual IEnumerable`1<string> GetCommonExtensionsSearchPaths();
    public abstract virtual string get_InstallPath();
}
public interface Microsoft.VisualStudio.ExtensionManager.SettingsStorage.ISettingsStore {
    public abstract virtual bool CollectionExists(string collectionPath);
    public abstract virtual bool PropertyExists(string collectionPath, string propertyName);
    public abstract virtual bool GetBoolean(string collectionPath, string propertyName);
    public abstract virtual bool GetBoolean(string collectionPath, string propertyName, bool defaultValue);
    public abstract virtual int GetInt32(string collectionPath, string propertyName);
    public abstract virtual int GetInt32(string collectionPath, string propertyName, int defaultValue);
    public abstract virtual UInt32 GetUInt32(string collectionPath, string propertyName);
    public abstract virtual long GetInt64(string collectionPath, string propertyName, long defaultValue);
    public abstract virtual int GetPropertyCount(string collectionPath);
    public abstract virtual IEnumerable`1<string> GetPropertyNames(string collectionPath);
    public abstract virtual IDictionary`2<string, object> GetPropertyNamesAndValues(string collectionPath, SettingsType type);
    public abstract virtual string GetString(string collectionPath, string propertyName);
    public abstract virtual string GetString(string collectionPath, string propertyName, string defaultValue);
    public abstract virtual IEnumerable`1<string> GetSubCollectionNames(string collectionPath);
}
public interface Microsoft.VisualStudio.ExtensionManager.SettingsStorage.ISettingsStore2 {
    public abstract virtual IDictionary`2<string, object> GetPropertyNamesAndValues(string collectionPath);
}
public interface Microsoft.VisualStudio.ExtensionManager.SettingsStorage.IWritableSettingsStore {
    public abstract virtual void SetBoolean(string collectionPath, string propertyName, bool value);
    public abstract virtual void SetUInt32(string collectionPath, string propertyName, UInt32 value);
    public abstract virtual void SetInt32(string collectionPath, string propertyName, int value);
    public abstract virtual void SetInt64(string collectionPath, string propertyName, long value);
    public abstract virtual void SetString(string collectionPath, string propertyName, string value);
    public abstract virtual void CreateCollection(string collectionPath);
    public abstract virtual bool DeleteCollection(string collectionPath);
    public abstract virtual bool DeleteProperty(string collectionPath, string propertyName);
}
public enum Microsoft.VisualStudio.ExtensionManager.SettingsStorage.SettingsScope : Enum {
    public int value__;
    public static SettingsScope Configuration;
    public static SettingsScope UserSettings;
}
public enum Microsoft.VisualStudio.ExtensionManager.SettingsStorage.SettingsType : Enum {
    public int value__;
    public static SettingsType Invalid;
    public static SettingsType Int32;
    public static SettingsType Int64;
    public static SettingsType String;
    public static SettingsType Binary;
    public static SettingsType UInt;
}
public class Microsoft.VisualStudio.ExtensionManager.SetupEngineLogger : object {
    public List`1<SetupError> Errors;
    private int SequenceNumber;
    protected ILogger Logger;
    public SetupEngineLogger(ILogger logger);
    public sealed virtual string GenerateLogFileName(string packageId);
    public sealed virtual void WriteError(Exception ex, string format, Object[] args);
    public sealed virtual void WriteMessage(string format, Object[] args);
    public sealed virtual void WriteVerbose(string format, Object[] args);
    public sealed virtual void WriteWarning(string format, Object[] args);
}
[ExtensionAttribute]
public static class Microsoft.VisualStudio.ExtensionManager.SetupHelper : object {
    private static string instanceInstallationPath;
    private static string instanceEnginePath;
    public static string EnginePath { get; }
    public static bool RunningFromInstanceLocation();
    private static void Initialize(string path);
    public static string get_EnginePath();
    [ExtensionAttribute]
public static bool FileExistsInEnginePath(string fileName);
    public static ISetupInstance2 GetInstanceForPath(string appIdPath);
    public static string BuildCommandLineForExtensibility(string instancePath, IList`1<string> installableVsixPaths, IList`1<string> uninstallableVsixIds, bool isSilent, bool allowUnsignedExtensions);
}
public enum Microsoft.VisualStudio.ExtensionManager.Shared.AutoUpdateType : Enum {
    public int value__;
    public static AutoUpdateType PerUser;
    public static AutoUpdateType PerMachine;
}
public static class Microsoft.VisualStudio.ExtensionManager.Shared.FeatureFlags : object {
    public static string IsTimestampOptimizationEnabled;
}
public static class Microsoft.VisualStudio.ExtensionManager.Shared.TelemetryConstants : object {
    public static string EventRoot;
    public static string PropertyRoot;
    public static string ExtensionPropertyRoot;
    public static string VSIXInstallerEventRoot;
    public static string VSIXInstallerPropertyRoot;
    public static string ExtensionInstallEvent;
    public static string ExtensionUninstallEvent;
    public static string ExtensionDisabledEvent;
    public static string ExtensionEnabledEvent;
    public static string InstalledExtensionSingleComplexProperty;
    public static string InstalledExtensionsFaultEvent;
    public static string NestedExtensionInstall;
    public static string ExtensionAssetEvent;
    public static string AggregateExtensionAssetEvent;
    public static string VsixInstallerTerminateProcessesEvent;
    public static string InstalledExtensionInitializatioFailure;
    public static string PerformSearchInExtensionPkgdefsExceptionsEvent;
    public static string PerformSearchInExtensionPkgdefsNullRefMessage;
    public static string PerformSearchInExtensionPkgdefsEvent;
    public static string PerformSearchInExtensionPkgdefsExtensionsNullProperty;
    public static string PerformSearchInExtensionPkgdefsExtMgrServiceProperty;
    public static string VSVersionByProcessSetupFailure;
    public static string VSVersionByPathSetupFailure;
    public static string ExtensionMetadataReadFailure;
    public static string ExtensionMetadataWriteFailure;
    public static string ExtensionMetadataDeleteFailure;
    public static string InstalledExtensionIDsProperty;
    public static string ExtensionIDProperty;
    public static string InstalledExtensionsComplexProperty;
    public static string AreAlphaPacksInstalledContextProperty;
    public static string ProcessesTerminatedProperty;
    public static string UserTerminatedProcessesProperty;
    public static string VsixInstallerSuccessfulModificationsEvent;
    public static string VsixInstallerSuccessfulModificationsProperty;
    public static string VsixInstallerAppRunEvent;
    public static string VsixInstallerEngineVersionProperty;
    public static string VsixInstallerOnlyOneExtensionProvidedProperty;
    public static string VsixInstallerChangeTypeProperty;
    public static string VsixInstallerExitCodeProperty;
    public static string VsixInstallerInstallCountProperty;
    public static string VsixInstallerUninstallCountProperty;
    public static string VsixInstallerDowngradeCountProperty;
    public static string VsixInstallerIsBatchInstallProperty;
    public static string VsixInstallerTargetSkuProperty;
    public static string VsixInstallerBlockerProperty;
    public static string VsixInstallerCancelPageProperty;
    public static string VsixInstallerErrorMessageProperty;
    public static string VsixInstallerStackTraceProperty;
    public static string VsixInstallerSuccessfulVsixProperty;
    public static string VsixInstallerFailureVsixProperty;
    public static string VsixInstallerLaunchElevatedProcessProperty;
    public static string VsixInstallerCommandLineProperty;
    public static string VsixInstallerAppidCultureProperty;
    public static string VsixInstallerAppidNameProperty;
    public static string VsixInstallerCallingProcessIdProperty;
    public static string VsixInstallerCanOverwriteFilesProperty;
    public static string VsixInstallerDowngradableVsixIdsProperty;
    public static string VsixInstallerInstallableVsixPathsProperty;
    public static string VsixInstallerInstallIdsProperty;
    public static string VsixInstallerInstallInstanceIdsProperty;
    public static string VsixInstallerIsAdminInstallProperty;
    public static string VsixInstallerIsRepairOverriddenProperty;
    public static string VsixInstallerIsSilentProperty;
    public static string VsixInstallerPrerequisitesRequiredProperty;
    public static string VsixInstallerRootSuffixProperty;
    public static string VsixInstallerShouldExpandExtensionPackProperty;
    public static string VsixInstallerSkipDotNetCheckProperty;
    public static string VsixInstallerSkipCertCheckProperty;
    public static string VsixInstallerShutdownBlockingProcessProperty;
    public static string VsixInstallerTargetSKUNameProperty;
    public static string VsixInstallerTargetSKUVersionProperty;
    public static string VsixInstallerUninstallableVsixIdsProperty;
    public static string VsixInstallerIsSingleIntanceIdInstallProperty;
    public static string VsixInstallerIsInstanceIdInstallProperty;
    public static string VsixInstallerIsGettingInstallPathsFromSKUNameAndVersionProperty;
    public static string VsixInstallerIsGettingInstallPathsFromAppIdInstallPathProperty;
    public static string VsixInstallerIsGettingInstallPathsFromInstallIDsProperty;
    public static string VsixInstallerIsGettingInstallPathsFromVSIXProperty;
    public static string VsixInstallerFaultEvent;
    public static string VsixInstallerExtensionNameEvent;
    public static string VsixInstallerAlphaPackInstallEventName;
    public static string VsixInstallerAlphaPackUninstallEventName;
    public static string VsixInstallerIdentifierProperty;
    public static string VsixInstallerExperimentSuccessProperty;
    public static string VSManifestIdProperty;
    public static string VSChannelManifestIdProperty;
    public static string InvokeUpdateConfigurationTasksFailedEvent;
    public static string UpdateConfigurationFailedEvent;
    public static string UpdateConfigurationFailedPropertyPrefix;
    public static string UpdateConfigurationFailedSourceProperty;
    public static string UpdateConfigurationFailedInstalledExtensionsProperty;
    public static string UpdateConfigurationFailedUninstalledExtensionsProperty;
    public static string UpdateConfigurationFailedDowngradedExtensionsProperty;
    public static string UpdateConfigurationFailedUpdatedExtensionsProperty;
    public static string AutoUpdateEventPrefix;
    public static string AutoUpdatePropertyPrefix;
    public static string AutoUpdateExtensionEventName;
    public static string AutoUpdateExtensionPerSKUEventName;
    public static string AutoUpdateExtensionPropertyPrefix;
    public static string AutoUpdateExtensionNameProperty;
    public static string AutoUpdateExtensionIdentifierProperty;
    public static string AutoUpdateExtensionVersionProperty;
    public static string AutoUpdateExtensionVSVersionProperty;
    public static string AutoUpdateExtensionStateProperty;
    public static string AutoUpdateExtensionTypeProperty;
    public static string AutoUpdateExtensionErrorProperty;
    public static string AutoUpdateExtensionSessionIdProperty;
    public static string AutoUpdateIdProperty;
    public static string AutoUpdateSuccessProperty;
    public static string AutoUpdateTurnOffProperty;
    public static string AutoUpdateExtensionUpdateVersionTriedProperty;
    public static string AutoUpdateExtensionTypeName;
    public static string AutoUpdateExtensionMachineSettingProperty;
    public static string AutoUpdateRefreshTimestampFailedEventName;
    public static string AutoUpdateExtensionScheduledEventName;
    public static string AutoUpdateExtensionScheduledPropertyPrefix;
    public static string AutoUpdateExtensionScheduledTypeProperty;
    public static string AutoUpdateExtensionScheduledUpdatesFoundProperty;
    public static string AutoUpdateExtensionScheduledErrorProperty;
    public static string AutoUpdateErrorBlockedProcessesProperty;
    public static string AutoUpdateExtensionScheduledSessionIdProperty;
    public static string AutoUpdateExtensionsUpdatedProperty;
    public static string AutoUpdateExtensionsNotUpdatedProperty;
    public static string AutoUpdateEnabledProperty;
    public static string AutoUpdateVSProductsOnMachineProperty;
    public static string AutoUpdateVSSupportedProductsProperty;
    public static string AutoUpdateInstalledProductNameProperty;
    public static string AutoUpdateCompatListExtensionVersionProperty;
    public static string AutoUpdateCompatListProductVersionProperty;
    public static string AutoUpdateInstalledProductVersionProperty;
    public static string AutoUpdateExtensionUpdatedVersionProperty;
    public static string AutoUpdateGetPrerequisitesFailed;
    public static string MarketplaceQueryEventPrefix;
    public static string AtomFeedEventPrefix;
    public static string AtomFeedTelemetryPropertyPrefix;
    public static string AtomFeedInitializeExtensionsEventName;
    public static string AtomFeedPropertyEnvironmentValue;
    public static string AsyncCategoryTreeWrapperValueTransferErrorEventName;
    public static string AsyncCategoryTreeWrapperValueGetTaskResultEventName;
    public static string QueryExtensionsValueErrorGetTaskResultEventName;
    public static string QueryExtensionsValueGetTaskResultEventName;
    public static string ServiceDisposeLockEventRoot;
    public static string ServiceDisposeLockPropertyRoot;
    public static string ServiceDisposeLockClassNameProperty;
    public static string ServiceDisposeLockDisposeDelayEventName;
    public static string ServiceDisposeLockBlockingMethodsProperty;
    public static string ExtensionManagerServiceDoubleCloseEventName;
    public static string ServiceDisposeLockUseAfterDisposeEventName;
    public static string RunUpdateConfigurationEventRoot;
    public static string RunUpdateConfigurationOnExtensionEnableDisableStateChange;
    public static string RunUpdateConfigurationOnPerUserAutoUpdate;
    public static string GlobalPolicyOptedInRegistryPath;
    public static string OptedInRegistryKeyName;
    public static int UserIsOptedInValue;
    public static string RunInitializeExtensionListEventRoot;
    public static string RunRetryCacheBuildEventRoot;
    public static string RunExceptionDuringScanEventRoot;
    public static string RunConfigurationChangedEventRoot;
    public static string RunDuplicateAssetsInAddNewAssetDataEventRoot;
    public static string RunCacheExceptionEventRoot;
    public static string RunInvalidPathFormatEventRoot;
    public static string ConfigChangeEventRoot;
    public static string ExtensionChangedEventRoot;
    public static string ConfigChangeEventPropertyPrefix;
    public static string ExtensionChangedEventPropertyPrefix;
    public static string TelemetryPropertyExceptionMessageId;
    public static string TelemetryPropertyExceptionTypeId;
    public static string TelemetryPropertyIsSDKListId;
    public static string TelemetryConfigurationChangedPropertiesPrefix;
    public static string TelemetryConfigurationChangedPropertyExtensionsDeleted;
    public static string TelemetryConfigurationChangedPropertyExtensionsAdded;
    public static string TelemetryConfigurationChangedPropertyExtensionsEnabledStateUpdated;
    public static string TelemetryConfigurationChangedPropertyExtensionsUpdated;
    public static string TelemetryConfigurationChangedPropertyExtensionsAutoUpdated;
    public static string TelemetryConfigurationChangedPropertyExtensionsAutoUpdateStateUpdated;
    public static string TelemetryConfigurationChangedPropertyUpdatedTimestamp;
    public static string TelemetryConfigurationChangedPropertyUpdatedTimestampReason;
    public static string RepositoryCreatedEventName;
    public static string RepositoryCreatedProperty;
    public static string RepositoryCreatedId;
    public static string RepositoryCreatedProtocol;
    public static string ExtensionManagerSessionStartEventName;
    public static string ExtensionManagerSessionGuidProperty;
    public static string ExtensionManagerSessionEndEventName;
    public static string ExtensionManagerSessionDataComplexProperty;
    public static string ExtensionManagerSessionFromSuggestedExtensionProperty;
    public static string SdkextensionscannedEventName;
    public static string ExtensionPath;
    public static string ExcludedDirectoriesCleanupFailureEventName;
    public static string CacheVersionLookupErrorEventName;
    public static string LoadExtensionMetadataEventName;
    public static string LoadExtensionMetadataPropertyPrefix;
    public static string LoadExtensionMetadataPropertyExtensionDataFileStatus;
    public static string LoadExtensionMetadataPropertyShouldSkipMessagePack;
    public static string LoadExtensionMetadataPropertyShouldDeleteMessagePack;
    public static string LoadExtensionMetadataPropertyIsExtensionDataStale;
    public static string ExtensionManagerFeatureFlagPropertyPrefix;
    public static string ExtensionManagerFeatureFlagPropertyMessagepackChanges;
    public static string WriteExtensionMetadataEventName;
    public static string WriteExtensionMetadataPropertyPrefix;
    public static string WriteExtensionMetadataPropertySkipMessagePack;
    public static string WriteExtensionMetadataPropertyFinalWrite;
    public static string WriteExtensionMetadataPropertyShouldWrite;
    public static string WriteExtensionMetadataPropertyIsExtensionDataStale;
    public static string WriteExtensionMetadataPropertyChangeReason;
    public static string WriteExtensionMetadataPropertyExtensionUpdated;
    public static string ExtensionManagerConfigChangeEventName;
    public static string ExtensionManagerConfigChangeProperty;
    public static string ExtensionManagerConfigChangePropertyLastConfigTimeStamp;
    public static string ExtensionManagerConfigChangePropertyConfigTimeStamp;
    public static string ExtensionManagerConfigChangePropertyFileConfigTimeStamp;
    public static string ExtensionManagerConfigChangePropertyFileCreated;
    public static string ExtensionManagerConfigChangePropertyShouldUpdateFileConfigTimeStamp;
    public static string ExtensionManagerExtensionChangedEventName;
    public static string ExtensionManagerExtensionChangedProperty;
    public static string ExtensionManagerExtensionChangedPropertyStackTrace;
    public static string ExtensionManagerExtensionChangedPropertyLastConfigChange;
    public static string ExtensionManagerConfigUpdateEventName;
    public static string ExtensionManagerConfigUpdateProperty;
    public static string ExtensionManagerConfigUpdatePropertyRequestedBy;
    public static string ExtensionManagerConfigRequestReadEventName;
    public static string ExtensionManagerConfigRequestReadProperty;
    public static string ExtensionManagerConfigRequestPropertyTimestamp;
    public static string ExtensionManagerConfigRequestPropertyFileTimestamp;
    public static string ExtensionManagerConfigRequestPropertyFilePath;
    public static string ExtensionManagerConfigRequestPropertySettingTimestamp;
    public static string ExtensionManagerConfigRequestPropertyNewTimeStampReason;
    public static string ExtensionManagerConfigRequestPropertyConfigChangedSettingTimestamp;
    public static string ExtensionManagerConfigRequestPropertyConfigChangedReason;
    public static string ExtensionHotloadEventName;
    public static string ExtensionHotloadRegistrationSuccessEventName;
    public static string ExtensionHotloadRemoveRegistrationSuccessEventName;
    public static string ExtensionHotloadStartupFailureEventName;
    public static string ExtensionHotloadFileError;
    public static string ExtensionHotloadDebounceError;
    public static string ErrorAfterDownloadCompleteEventName;
    public static string InitializeCacheEventName;
    public static string InitializeCacheEventPropertyPrefix;
    public static string InitializeCacheEventPropertyEngineHostId;
    public static string InitializeCacheEventPropertyEngineMode;
    public static string InitializeCacheEventPropertyExtensionsChangedTimestamp;
    public static string InitializeCacheEventPropertyUpdatedExtensionCacheTimestamp;
    public static string InitializeCacheEventPropertyInitialExtensionCacheTimestamp;
    public static string InitializeCacheEventPropertyScanAlways;
    public static string InitializeCacheEventPropertySafeScanAlways;
    public static string InitializeCacheEventPropertyCanBypassScan;
    public static string InitializeCacheEventPropertyIsCacheVersionValid;
    public static string InitializeCacheEventPropertyIncomingEngineMode;
    public static string InitializeCacheEventPropertyUpdatedEngineMode;
    public static string InitializeCacheEventPropertyTimestampOptimizationEnabled;
    public static string InitializeCacheEventPropertyExtensionMetadataCacheUpdated;
    public static string InitializeCacheEventPropertyExtensionMetadataCacheUpdatedReason;
    public static string InitializeCacheEventPropertyExtensionUpdated;
    public static string InitializeCacheEventPropertyExtensionUpdatedReason;
    public static string InitializeCacheEventPropertyCacheTimeUpdated;
    public static string InitializeCacheEventPropertyShouldUpdateCacheTimestamp;
    public static string InitializeCacheEventPropertyCacheUpdatedAfterCoreTimestamp;
    public static string InitializeCacheEventPropertyCacheUpdatedAfterScanning;
    public static string InitializeCacheEventPropertyMessagepackRecreated;
    public static string InstalledExtensionSettingsEventName;
    public static string InstalledExtensionSettingsEventPropertyPrefix;
    public static string InstalledExtensionSettingsEventPropertyCanBypassScanReason;
    public static string InstalledExtensionSettingsEventPropertyCanBypassScan;
    public static string ExtensionDisabledDuringUpdateConfigurationEventName;
    public static string ExtensionDisabledDuringUpdateConfigurationComplexProperty;
    public static string IncompatibleExtensionMessageBoxEventName;
    public static string IncompatibleExtensionMessageBoxVsixNameComplexProperty;
    public static string IncompatibleExtensionMessageBoxRequiresRestart;
}
public class Microsoft.VisualStudio.ExtensionManager.Shared.TelemetryLogger : object {
    public sealed virtual void LogInstallTelemetry(IEnumerable`1<IInstalledExtension> installedExtensions);
    public sealed virtual void LogUninstallTelemetry(IEnumerable`1<IInstalledExtension> installedExtensions);
    public sealed virtual void LogEnableDisableTelemetry(IInstalledExtension extension);
    private void LogNestedExtensionInstalled(IEnumerable`1<string> extensionIDs);
    private void LogAtomicAsset(string eventName, string propertyName, string propertyValue, string assetId, int assetVersion);
    public sealed virtual void LogAtomicAsset(string eventName, Dictionary`2<string, object> propertiesToSend, string assetId, int assetVersion);
    private static void LogAtomicOperation(string eventName, Dictionary`2<string, object> propertiesToSend);
    public sealed virtual object CreateTelemetryEvent(string id);
    public sealed virtual object CreateFaultEvent(string id, Exception ex);
    public sealed virtual object CreateTelemetryActivity(string id);
    public sealed virtual void SetTelemetryProperty(object telemetryObject, string id, T value);
    public sealed virtual void Post(object telemetryObject);
    private static void PostTelemetry(object telemetryObject);
    public sealed virtual void PostFault(string eventName, string description, Exception exceptionObject, String[] errorInformation);
    public static void PostFault(string eventName, string failureSumary, Exception ex);
    public sealed virtual void LogInstalledExtensions(IInstalledExtensionSettingsList installedExtensions);
    private IEnumerable`1<ExtensionTelemetryInfoExtended> GetExtensionTelemetryInfos(IInstalledExtensionSettingsList installedExtensions);
    public sealed virtual void LogExtensionApiUsage(ExtensionsApiUsage apiUsage);
    public sealed virtual void LogExtensionApiUsageOptOut();
    public static void LogInstallAlphaPack(string vsixId, string manifestId, string channelManifestId, bool success);
    public static void LogUninstallAlphaPack(string vsixId, string manifestId, string channelManifestId, bool success);
    public static void LogSuccessfulExtensionModifications(IEnumerable`1<InstallerExtensionTelemetryInfo> extensions);
    public static void EndBlockingProcessTelemetry(bool userTerminated, IEnumerable`1<string> terminatedProcesses);
    public static void ServiceDisposeLockDisposeDelay(string className, IEnumerable`1<string> activeMethods);
    public static void ServiceDisposeLockUseAfterDispose(string className, Exception ex);
    public static void ExtensionManagerServiceDoubleClose(string firstDisposeCallStack, Exception ex);
    public Dictionary`2<string, object> GetBasicTelemetryInfoProperty(IInstalledExtension extension);
    public sealed virtual void LogExtensionManagerSessionEndTelemetry(ExtensionManagerSessionData sessionData);
    public sealed virtual Guid LogExtensionManagerSessionStartTelemetry(bool fromSuggestedExtension);
    public sealed virtual void LogSdkExtensionFoundTelemetry(string extensionPath, string rootPath, ExtensionLocations location);
    [CompilerGeneratedAttribute]
internal static void <LogExtensionApiUsage>g__AddAssemblyMetadataProperties|17_0(TelemetryEvent assemblyEvent, <>c__DisplayClass17_0& );
}
public static class Microsoft.VisualStudio.ExtensionManager.Shared.TelemetryUtilities : object {
    public static string GetSdkExtensionPathWithoutPii(string extensionPath, string rootPath, ExtensionLocations location);
}
public class Microsoft.VisualStudio.ExtensionManager.Shared.VSIXTaskScheduler : object {
    private IEngineHost engineHost;
    private ITaskService taskService;
    private ITaskDefinition taskDefinition;
    private IDailyTrigger taskTrigger;
    private IExecAction taskAction;
    private ITaskFolder rootFolder;
    private ITaskFolder vsFolder;
    private IRegisteredTask registeredTask;
    private static string vsixAutoUpdateExe;
    private static string taskName;
    private static string folderMicrosoft;
    private static string folderVisualStudio;
    private static string logHeaderMessage;
    private static string logTaskName;
    private static string UpdateConfigurationTaskName;
    public VSIXTaskScheduler(IEngineHost engineHost);
    public void CreateTask();
    public void CreateUpdateConfigurationTask(IServiceProvider serviceProvider);
    private bool ShouldRun();
    private void RegisterTaskDefinition();
    private void CreateTaskDefinition();
    private void SetTaskSettings();
    private void CreateTaskTrigger();
    private void CreateTaskAction();
    private void RegisterTask();
    private void CleanUpDuplicateTasks();
    private void CleanUpTask();
    private string TaskName();
    private bool TaskExists();
}
[GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "17.0.0.0")]
[DebuggerNonUserCodeAttribute]
[CompilerGeneratedAttribute]
internal class Microsoft.VisualStudio.ExtensionManager.Shared.VSIXTaskSchedulerResources : object {
    private static ResourceManager resourceMan;
    private static CultureInfo resourceCulture;
    [EditorBrowsableAttribute("2")]
internal static ResourceManager ResourceManager { get; }
    [EditorBrowsableAttribute("2")]
internal static CultureInfo Culture { get; internal set; }
    internal static string TaskCreatedSuccessfully { get; }
    internal static string TaskDoesNotExist { get; }
    internal static string TaskExists { get; }
    internal static string TaskNotRegistered { get; }
    internal static string TaskServiceNotConnected { get; }
    internal static ResourceManager get_ResourceManager();
    internal static CultureInfo get_Culture();
    internal static void set_Culture(CultureInfo value);
    internal static string get_TaskCreatedSuccessfully();
    internal static string get_TaskDoesNotExist();
    internal static string get_TaskExists();
    internal static string get_TaskNotRegistered();
    internal static string get_TaskServiceNotConnected();
}
public class Microsoft.VisualStudio.ExtensionManager.UnresolvedExtensionReference : ExtensionReferenceBase {
    [CompilerGeneratedAttribute]
private UnresolvedReason <UnresolvedReason>k__BackingField;
    public UnresolvedReason UnresolvedReason { get; }
    public UnresolvedExtensionReference(IExtensionReference reference, UnresolvedReason reason);
    [CompilerGeneratedAttribute]
public UnresolvedReason get_UnresolvedReason();
}
public enum Microsoft.VisualStudio.ExtensionManager.UnresolvedReason : Enum {
    public int value__;
    public static UnresolvedReason ReferenceDoesNotExist;
    public static UnresolvedReason ReferenceVersionDoesNotMatch;
    public static UnresolvedReason ReferenceVersionIsInvalid;
}
public class Microsoft.VisualStudio.ExtensionManager.UnsupportedProductException : ExtensionException {
    public int ErrorCode { get; }
    public UnsupportedProductException(string message);
    public UnsupportedProductException(string message, Exception inner);
    protected UnsupportedProductException(SerializationInfo info, StreamingContext context);
    public virtual int get_ErrorCode();
}
[MessagePackObjectAttribute("False")]
public class Microsoft.VisualStudio.ExtensionManager.VersionRange : object {
    [CompilerGeneratedAttribute]
private Version <MinimumCore>k__BackingField;
    [CompilerGeneratedAttribute]
private Version <MaximumCore>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsMinimumInclusive>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsMaximumInclusive>k__BackingField;
    [CompilerGeneratedAttribute]
private Version <Minimum>k__BackingField;
    [CompilerGeneratedAttribute]
private Version <Maximum>k__BackingField;
    private Version MinimumCore { get; private set; }
    private Version MaximumCore { get; private set; }
    [IgnoreMemberAttribute]
public bool IsMinimumInclusive { get; private set; }
    [IgnoreMemberAttribute]
public bool IsMaximumInclusive { get; private set; }
    [IgnoreMemberAttribute]
public Version Minimum { get; private set; }
    [IgnoreMemberAttribute]
public Version Maximum { get; private set; }
    public VersionRange(Version min, bool isMinInclusive, Version max, bool isMaxInclusive);
    public VersionRange(Version value);
    [CompilerGeneratedAttribute]
private Version get_MinimumCore();
    [CompilerGeneratedAttribute]
private void set_MinimumCore(Version value);
    [CompilerGeneratedAttribute]
private Version get_MaximumCore();
    [CompilerGeneratedAttribute]
private void set_MaximumCore(Version value);
    [CompilerGeneratedAttribute]
public bool get_IsMinimumInclusive();
    [CompilerGeneratedAttribute]
private void set_IsMinimumInclusive(bool value);
    [CompilerGeneratedAttribute]
public bool get_IsMaximumInclusive();
    [CompilerGeneratedAttribute]
private void set_IsMaximumInclusive(bool value);
    [CompilerGeneratedAttribute]
public Version get_Minimum();
    [CompilerGeneratedAttribute]
private void set_Minimum(Version value);
    [CompilerGeneratedAttribute]
public Version get_Maximum();
    [CompilerGeneratedAttribute]
private void set_Maximum(Version value);
    private static Version NormalizeVersion(Version input, int num);
    public bool Contains(Version value);
    public static VersionRange Parse(string version);
    public static bool TryParse(string version, VersionRange& versionRange);
    private static Version GetVersion(string version);
    public virtual string ToString();
    private static string GetVersionString(Version version, int num);
}
public class Microsoft.VisualStudio.ExtensionManager.VistaHelper : object {
    private static Nullable`1<bool> processIsElevated;
    public static bool RunningOnVista();
    public static bool ProcessIsElevated();
    private static bool ProcessIsElevatedInternal();
}
public class Microsoft.VisualStudio.ExtensionManager.VSEdition : object {
    public static string LightSwitch;
    public static string Pro;
    public static string VWDExpress;
    public static string VCSExpress;
    public static string VBExpress;
    public static string VCExpress;
    public static string VSWinExpress;
    public static string VSWinDesktopExpress;
    public static string Express_All;
    public static string Enterprise;
    public static string Ultimate;
    public static string Premium;
    public static string Community;
    public static string IntegratedShell;
    public static string VPDExpress;
    public static string SQL;
    public static string TeamExplorer;
    public static string SSMS;
    public static string None;
}
public static class Microsoft.VisualStudio.ExtensionManager.VSGalleryEntryHelper : object {
    public static IVsGalleryExtension UpdatePackedExtensionsIncludingNested(IVsGalleryExtension rootEntry, Func`2<List`1<string>, IEnumerable`1<IVsGalleryExtension>> fetchExtensionsByVsixId);
    private static IVsGalleryExtension UpdatePackedExtensionsIncludingNested(IVsGalleryExtension vsGalleryEntry, Func`2<List`1<string>, IEnumerable`1<IVsGalleryExtension>> fetchExtensionsByVsixId, HashSet`1<string> seenVsixIds);
}
public abstract class Microsoft.VisualStudio.ExtensionManager.VSGalleryOnlineExtension : GalleryOnlineExtension {
    public List`1<string> PackedExtensionsVsixIDs { get; public set; }
    public List`1<string> Flags { get; public set; }
    public abstract virtual List`1<string> get_PackedExtensionsVsixIDs();
    public abstract virtual void set_PackedExtensionsVsixIDs(List`1<string> value);
    public abstract virtual List`1<string> get_Flags();
    public abstract virtual void set_Flags(List`1<string> value);
}
public enum Microsoft.VisualStudio.ExtensionManager.VsixInstallerOperationType : Enum {
    public int value__;
    public static VsixInstallerOperationType Install;
    public static VsixInstallerOperationType Update;
    public static VsixInstallerOperationType Uninstall;
    public static VsixInstallerOperationType Downgrade;
    public static VsixInstallerOperationType Replace;
}
public enum Microsoft.VisualStudio.ExtensionManager.VsixType : Enum {
    public int value__;
    public static VsixType Invalid;
    public static VsixType VsixV1;
    public static VsixType VsixV2;
    public static VsixType VsixV3;
    public static VsixType Fopx;
}
public interface Microsoft.VisualStudio.Sdk.Deploy.IVsixDeployEngine {
    public abstract virtual Task DeployVsixAsync(IVisualStudioInstance targetInstance, string rootSuffix, string pathToVsix, TextWriter outputPaneWriter);
}
[CompilerGeneratedAttribute]
[GuidAttribute("6380BCFF-41D3-4B2E-8B2E-BF8A6810C848")]
[InterfaceTypeAttribute("1")]
[TypeIdentifierAttribute]
public interface Microsoft.VisualStudio.Setup.Configuration.IEnumSetupInstances {
    public abstract virtual void Next(int celt, ISetupInstance[] rgelt, Int32& pceltFetched);
}
[CompilerGeneratedAttribute]
[GuidAttribute("42843719-DB4C-46C2-8E7C-64F1816EFD5B")]
[InterfaceTypeAttribute("1")]
[TypeIdentifierAttribute]
public interface Microsoft.VisualStudio.Setup.Configuration.ISetupConfiguration {
}
[CompilerGeneratedAttribute]
[GuidAttribute("26AAB78C-4A60-49D6-AF3B-3C35BC93365D")]
[InterfaceTypeAttribute("1")]
[TypeIdentifierAttribute]
public interface Microsoft.VisualStudio.Setup.Configuration.ISetupConfiguration2 {
    public void _VtblGap1_2();
    public abstract virtual ISetupInstance GetInstanceForPath(string path);
    public abstract virtual IEnumSetupInstances EnumAllInstances();
}
[CompilerGeneratedAttribute]
[GuidAttribute("B41463C3-8866-43B5-BC33-2B0676F7F42E")]
[InterfaceTypeAttribute("1")]
[TypeIdentifierAttribute]
public interface Microsoft.VisualStudio.Setup.Configuration.ISetupInstance {
}
[CompilerGeneratedAttribute]
[GuidAttribute("89143C9A-05AF-49B0-B717-72E218A2185C")]
[InterfaceTypeAttribute("1")]
[TypeIdentifierAttribute]
public interface Microsoft.VisualStudio.Setup.Configuration.ISetupInstance2 {
    public void _VtblGap1_3();
    public abstract virtual string GetInstallationPath();
    public void _VtblGap2_1();
    public abstract virtual string GetDisplayName(int lcid);
    public void _VtblGap3_3();
    public abstract virtual ISetupPackageReference[] GetPackages();
    public void _VtblGap4_3();
    public abstract virtual bool IsLaunchable();
    public void _VtblGap5_2();
    public abstract virtual string GetEnginePath();
}
[CompilerGeneratedAttribute]
[GuidAttribute("DA8D8A16-B2B6-4487-A2F1-594CCCCD6BF5")]
[InterfaceTypeAttribute("1")]
[TypeIdentifierAttribute]
public interface Microsoft.VisualStudio.Setup.Configuration.ISetupPackageReference {
    public abstract virtual string GetId();
    public void _VtblGap1_4();
    public abstract virtual string GetType();
}
[CompilerGeneratedAttribute]
[GuidAttribute("42843719-DB4C-46C2-8E7C-64F1816EFD5B")]
[CoClassAttribute("System.Object")]
[TypeIdentifierAttribute]
public interface Microsoft.VisualStudio.Setup.Configuration.SetupConfiguration {
}
public interface Microsoft.VisualStudio.Setup.IVisualStudioInstance {
    public string DisplayName { get; }
    public string InstallationPath { get; }
    public string InstanceId { get; }
    public string ProductArchitecture { get; }
    public string ProductId { get; }
    public string ProductPath { get; }
    public Version InstallationVersion { get; }
    public abstract virtual string get_DisplayName();
    public abstract virtual string get_InstallationPath();
    public abstract virtual string get_InstanceId();
    public abstract virtual string get_ProductArchitecture();
    public abstract virtual string get_ProductId();
    public abstract virtual string get_ProductPath();
    public abstract virtual Version get_InstallationVersion();
}
public interface Microsoft.VisualStudio.Setup.IVisualStudioInstanceService {
    public IVisualStudioInstance CurrentInstance { get; }
    public IReadOnlyCollection`1<IVisualStudioInstance> LaunchableInstances { get; }
    public abstract virtual IVisualStudioInstance get_CurrentInstance();
    public abstract virtual IReadOnlyCollection`1<IVisualStudioInstance> get_LaunchableInstances();
    public abstract virtual IVisualStudioInstance GetInstanceByInstallId(string installId);
}
internal static class Microsoft.VSSDK.Constants : object {
    internal static string VisualStudioMajorVersion;
    internal static string VisualStudioMinorVersion;
    internal static string VisualStudioGeneralVersion;
}
internal class Microsoft.VSSDK.Utilities.SetupHelpers : object {
    private static string VsSetupPackageTypeComponent;
    public static IVsSetupPackageInfo[] GetSetupPackagesInfo();
    public static bool IsSetupPackageInstalled(string packageName);
    public static IEnumerable`1<IVsSetupPackageInfo> GetSetupPackagesInstalled();
}
internal class System.Diagnostics.CodeAnalysis.SetsRequiredMembersAttribute : Attribute {
}
internal class System.Runtime.CompilerServices.CompilerFeatureRequiredAttribute : Attribute {
    [NullableContextAttribute("1")]
public CompilerFeatureRequiredAttribute(string feature);
}
[ExcludeFromCodeCoverageAttribute]
[DebuggerNonUserCodeAttribute]
internal static class System.Runtime.CompilerServices.IsExternalInit : object {
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("27524")]
internal class System.Runtime.CompilerServices.NullableAttribute : Attribute {
    public Byte[] NullableFlags;
    public NullableAttribute(byte );
    public NullableAttribute(Byte[] );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("5196")]
internal class System.Runtime.CompilerServices.NullableContextAttribute : Attribute {
    public byte Flag;
    public NullableContextAttribute(byte );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("2")]
internal class System.Runtime.CompilerServices.RefSafetyRulesAttribute : Attribute {
    public int Version;
    public RefSafetyRulesAttribute(int );
}
internal class System.Runtime.CompilerServices.RequiredMemberAttribute : Attribute {
}
[GeneratedCodeAttribute("Nerdbank.GitVersioning.Tasks", "3.6.128.36433")]
[ExcludeFromCodeCoverageAttribute]
internal static class ThisAssembly : object {
    internal static string AssemblyConfiguration;
    internal static string AssemblyFileVersion;
    internal static string AssemblyInformationalVersion;
    internal static string AssemblyName;
    internal static string AssemblyTitle;
    internal static string AssemblyVersion;
    internal static DateTime GitCommitDate;
    internal static string GitCommitId;
    internal static bool IsPrerelease;
    internal static bool IsPublicRelease;
    internal static string PublicKey;
    internal static string PublicKeyToken;
    internal static string RootNamespace;
    private static ThisAssembly();
}
[ExtensionAttribute]
public static class VSExtensibility.Setup.Shared.SetupEngineHelpers : object {
    public static string PackageType_Product;
    public static string ProductPackageId_Community;
    public static string ProductPackageId_Enterprise;
    public static string ProductPackageId_Professional;
    public static string ProductPackageId_CommunityX86;
    public static string ProductPackageId_EnterpriseX86;
    public static string ProductPackageId_ProfessionalX86;
    [ExtensionAttribute]
public static IEnumerable`1<ISetupInstance2> GetLaunchableInstances(ISetupConfiguration2 configuration);
    [ExtensionAttribute]
public static string GetProductId(ISetupInstance2 instance);
    [ExtensionAttribute]
public static string GetApplicationName(ISetupInstance2 instance, int lcid, IInstance cachedInstance);
    [ExtensionAttribute]
public static string GetApplicationName(IInstance instance, CultureInfo culture, IInstance cachedInstance);
    public static IInstance GetCacheInstance(string installationPath);
    public static ProductArchitecture GetInstanceProductArchitecture(IInstance instance);
}
public class VSIXInstaller.ProcessInfo : object {
    [CompilerGeneratedAttribute]
private string <ExecutablePath>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Title>k__BackingField;
    public string ExecutablePath { get; }
    public int Id { get; }
    public string Title { get; }
    public string TitleOrExecutableName { get; }
    private ProcessInfo(int id, string executablePath, string title);
    private static string GetExecutablePath(Process process);
    public static bool TryCreate(Process process, ProcessInfo& info);
    public static bool TryCreateFreeThread(Process process, ProcessInfo& info);
    private static bool CloseHandle(IntPtr hObject);
    private static IntPtr OpenProcess(ProcessAccess dwDesiredAccess, bool bInheritHandle, int dwProcessId);
    private static bool QueryFullProcessImageName(IntPtr hProcess, int dwFlags, StringBuilder lpExeName, Int32& lpdwSize);
    [CompilerGeneratedAttribute]
public string get_ExecutablePath();
    [CompilerGeneratedAttribute]
public int get_Id();
    [CompilerGeneratedAttribute]
public string get_Title();
    public string get_TitleOrExecutableName();
}
