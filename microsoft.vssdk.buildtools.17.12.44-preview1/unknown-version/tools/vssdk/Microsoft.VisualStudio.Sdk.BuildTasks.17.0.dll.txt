[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
internal static class Microsoft.VisualStudio.ExtensionManager.SettingsManagement.ErrorHandler : object {
    private static HashSet`1<Type> criticalExceptions;
    private static ErrorHandler();
    internal static bool IsCriticalException(Exception ex);
    internal static void ThrowOnFailure(int hr);
}
internal class Microsoft.VisualStudio.ExtensionManager.SettingsManagement.ImpersonationScope : object {
    public static T RunImpersonated(IntPtr userToken, Func`1<T> func);
    public static void RunImpersonated(IntPtr userToken, Action action);
}
internal static class Microsoft.VisualStudio.ExtensionManager.SettingsManagement.NativeMethods : object {
    internal static UInt32 TOKEN_ADJUST_PRIVILEGES;
    internal static UInt32 TOKEN_QUERY;
    internal static UInt32 TOKEN_DUPLICATE;
    internal static UInt32 TOKEN_IMPERSONATE;
    internal static UInt32 SHGFP_TYPE_CURRENT;
    internal static UInt32 PROCESS_DUPE_HANDLE;
    internal static UInt32 PROCESS_QUERY_INFORMATION;
    internal static UInt32 DUPLICATE_SAME_ACCESS;
    internal static UInt32 MAXIMUM_ALLOWED;
    internal static UInt32 SE_PRIVILEGE_ENABLED;
    internal static UInt32 ERROR_NO_TOKEN;
    internal static string SeDebugPrivilegeName;
    internal static IntPtr InvalidHandleValue;
    internal static IntPtr InvalidHKeyValue;
    private static NativeMethods();
    internal static IntPtr GetCurrentProcess();
    internal static bool OpenProcessToken(IntPtr processHandle, UInt32 desiredAccess, IntPtr& tokenHandle);
    internal static IntPtr OpenProcess(UInt32 desiredAccess, bool inheritHandle, UInt32 processId);
    internal static bool DuplicateTokenEx(IntPtr token, UInt32 desiredAccess, IntPtr tokenAttributes, SECURITY_IMPERSONATION_LEVEL impersonationLevel, TOKEN_TYPE tokenType, IntPtr& newToken);
    internal static bool ImpersonateLoggedOnUser(IntPtr token);
    internal static bool DuplicateHandle(IntPtr sourceProcessHandle, IntPtr sourceHandle, IntPtr targetProcessHandle, IntPtr& targetHandle, UInt32 desiredAccess, bool inheritHandle, UInt32 options);
    internal static IntPtr GetCurrentThread();
    internal static bool CloseHandle(IntPtr handle);
}
[FlagsAttribute]
public enum Microsoft.VisualStudio.ExtensionManager.SettingsManagement.PkgDefManagementFlags : Enum {
    public int value__;
    public static PkgDefManagementFlags Default;
    public static PkgDefManagementFlags Logging;
    public static PkgDefManagementFlags DisableCacheCheck;
    public static PkgDefManagementFlags ZeroImpact;
    public static PkgDefManagementFlags ZeroImpactFlexible;
    public static PkgDefManagementFlags ImportUserSettings;
    public static PkgDefManagementFlags ExportUserSettings;
    public static PkgDefManagementFlags ForceCacheRefresh;
    public static PkgDefManagementFlags ResetUserSettings;
    public static PkgDefManagementFlags AllowGlobal;
    public static PkgDefManagementFlags DelayCacheCheck;
    public static PkgDefManagementFlags UseFastCheck;
    public static PkgDefManagementFlags UseLogcalReg;
    public static PkgDefManagementFlags ManualMergeConfig;
    public static PkgDefManagementFlags ShutdownHive;
}
public class Microsoft.VisualStudio.ExtensionManager.SettingsManagement.SettingsManager : object {
    private static int MAX_PATH;
    private IntPtr pkgDefManager;
    private IntPtr userToken;
    private SafeRegistryHandle regRootHive;
    private string configRegPath;
    private string userSettingsRegPath;
    private string installPath;
    [CompilerGeneratedAttribute]
private bool <IsDisposed>k__BackingField;
    public string InstallPath { get; }
    public bool IsDisposed { get; private set; }
    private string ConfigRegPath { get; }
    private string UserSettingsRegPath { get; }
    private SafeRegistryHandle RegRootHive { get; }
    private SettingsManager(string devenvPath, IntPtr pkgDefManager, IntPtr userToken);
    private static IntPtr CreatePkgDefManagerForIsolatedApp(string devenvPath, string appName, string vsVersion, PkgDefManagementFlags flags);
    private static IntPtr CreatePkgDefManagerForIsolatedAppWithAlternateUser(string devenvPath, string appName, string vsVersion, PkgDefManagementFlags flags, IntPtr userToken);
    private static int HrCreatePkgDefManagerForIsolatedAppWithAlternateUser(string devenvPath, string appName, string vsVersion, PkgDefManagementFlags flags, IntPtr userToken, IntPtr& pkgdefManager);
    private static IntPtr CreatePkgDefManagerForApplication(string devenvPath, string rootSuffix, PkgDefManagementFlags flags);
    private static IntPtr CreatePkgDefManagerForApplicationWithAlternateUserAndRegRoot(string devenvPath, string rootSuffix, PkgDefManagementFlags flags, IntPtr userToken, IntPtr regRootHiveOverride);
    private static int HrCreatePkgDefManagerForApplicationWithAlternateUserAndRegRoot(string devenvPath, string rootSuffix, PkgDefManagementFlags flags, IntPtr userToken, IntPtr regRootHiveOverride, IntPtr& pkgdefManager);
    private static void DestroyPkgDefManager(IntPtr manager);
    private static IntPtr GetRegRootFromManager(IntPtr manager);
    private static int GetConfigurationRootFromManager(IntPtr manager, StringBuilder buffer, UInt32 bufferSize);
    private static int GetUserSettingsRootFromManager(IntPtr manager, StringBuilder buffer, UInt32 bufferSize);
    private static int GetCommonExtensionsSearchPathsFromManager(IntPtr manager, String[]& searchPaths);
    private static int GetAppDataFolderFromManager(IntPtr manager, int folderType, StringBuilder buffer, UInt32 bufferSize);
    private static int GetApplicationExtensionsFolderFromManager(IntPtr manager, String& appExtensionFolder);
    private static int GetUserExtensionsFolderFromManager(IntPtr manager, String& userExtensionFolder);
    internal static SettingsManager CreateForIsolatedApplication(string devenvPath, string appName, string vsVersion, PkgDefManagementFlags flags, IntPtr userToken);
    public static SettingsManager CreateForApplication(string devenvPath, string rootSuffix, PkgDefManagementFlags flags, IntPtr userToken, IntPtr regRootHiveOverride);
    public virtual ISettingsStore GetReadOnlySettingsStore(SettingsScope scope);
    public virtual IWritableSettingsStore GetWritableSettingsStore(SettingsScope scope);
    public virtual string get_InstallPath();
    public virtual string GetApplicationDataFolder(ApplicationDataFolder folder);
    public virtual IEnumerable`1<string> GetCommonExtensionsSearchPaths();
    [CompilerGeneratedAttribute]
public sealed virtual bool get_IsDisposed();
    [CompilerGeneratedAttribute]
private void set_IsDisposed(bool value);
    public sealed virtual void Dispose();
    protected virtual void Dispose(bool disposing);
    private string get_ConfigRegPath();
    private string get_UserSettingsRegPath();
    private string GetRegistryRoot(SettingsScope scope);
    private SafeRegistryHandle get_RegRootHive();
}
internal class Microsoft.VisualStudio.ExtensionManager.SettingsManagement.SettingsStore : object {
    protected RegistryKey rootKey;
    protected string rootPath;
    protected IntPtr userToken;
    internal SettingsStore(RegistryKey rootKey, string rootPath, IntPtr userToken);
    public virtual bool CollectionExists(string collectionPath);
    public virtual bool PropertyExists(string collectionPath, string propertyName);
    public virtual bool GetBoolean(string collectionPath, string propertyName);
    public virtual bool GetBoolean(string collectionPath, string propertyName, bool defaultValue);
    public virtual int GetInt32(string collectionPath, string propertyName);
    public virtual int GetInt32(string collectionPath, string propertyName, int defaultValue);
    public virtual UInt32 GetUInt32(string collectionPath, string propertyName);
    public virtual long GetInt64(string collectionPath, string propertyName);
    public virtual long GetInt64(string collectionPath, string propertyName, long defaultValue);
    public virtual int GetPropertyCount(string collectionPath);
    public virtual IEnumerable`1<string> GetPropertyNames(string collectionPath);
    public virtual string GetString(string collectionPath, string propertyName);
    public virtual string GetString(string collectionPath, string propertyName, string defaultValue);
    public virtual IEnumerable`1<string> GetSubCollectionNames(string collectionPath);
    public void Dispose();
    protected virtual void Dispose(bool disposing);
    protected RegistryKey OpenCollection(string collectionPath, bool writable);
    protected T GetValue(string collectionPath, string propertyName);
    public sealed virtual IDictionary`2<string, object> GetPropertyNamesAndValues(string collectionPath, SettingsType type);
}
internal class Microsoft.VisualStudio.ExtensionManager.SettingsManagement.WritableSettingsStore : SettingsStore {
    internal WritableSettingsStore(RegistryKey rootKey, string rootPath, IntPtr userToken);
    public virtual void SetBoolean(string collectionPath, string propertyName, bool value);
    public virtual void SetUInt32(string collectionPath, string propertyName, UInt32 value);
    public virtual void SetInt32(string collectionPath, string propertyName, int value);
    public virtual void SetInt64(string collectionPath, string propertyName, long value);
    public virtual void SetString(string collectionPath, string propertyName, string value);
    public virtual void CreateCollection(string collectionPath);
    public virtual bool DeleteProperty(string collectionPath, string propertyName);
    public sealed virtual bool DeleteCollection(string collectionPath);
    private bool TryGetCollectionNameAndParentPath(string fullPath, String& collectionName, String& parentPath);
    private RegistryKey CreateOrOpenWritableCollection(string collectionPath);
}
public class Microsoft.VisualStudio.Sdk.BuildTasks.CreatePkgDef : CreatePkgDefBase {
    protected virtual string GenerateFullPathToTool();
}
public class Microsoft.VisualStudio.Sdk.BuildTasks.EnableExtension : VsSettingsManagerTask {
    [CompilerGeneratedAttribute]
private string <VsixIdentifier>k__BackingField;
    [CompilerGeneratedAttribute]
private string <VsixVersion>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <FailIfNotInstalled>k__BackingField;
    [RequiredAttribute]
public string VsixIdentifier { get; public set; }
    [RequiredAttribute]
public string VsixVersion { get; public set; }
    public bool FailIfNotInstalled { get; public set; }
    [CompilerGeneratedAttribute]
public string get_VsixIdentifier();
    [CompilerGeneratedAttribute]
public void set_VsixIdentifier(string value);
    [CompilerGeneratedAttribute]
public string get_VsixVersion();
    [CompilerGeneratedAttribute]
public void set_VsixVersion(string value);
    [CompilerGeneratedAttribute]
public bool get_FailIfNotInstalled();
    [CompilerGeneratedAttribute]
public void set_FailIfNotInstalled(bool value);
    public virtual bool Execute();
}
public class Microsoft.VisualStudio.Sdk.BuildTasks.EnableLoadingAllExtensions : VsSettingsManagerTask {
    private static string ExtensionManagerCollectionPath;
    private static string EnableAdminExtensions;
    public virtual bool Execute();
    private static void EnableLoadingAllExtensionsForSettingsManager(ISettingsManager settingsManager, TaskLoggingHelper log);
    private static void LogMessage(TaskLoggingHelper log, MessageImportance messageImportance, string message);
}
internal static class Microsoft.VisualStudio.Sdk.BuildTasks.ExtensionManagerUtilities : object {
    private static string DevenvExe;
    internal static object ExclusionLock;
    private static ExtensionManagerUtilities();
    internal static string GetPathToDevenv();
    internal static IExtensionEngine GetExtensionEngine(ISettingsManager manager);
    internal static IExtension CreateExtension(string pathToVsixManifest);
    internal static string GenerateExceptionMessage(Exception e);
}
public class Microsoft.VisualStudio.Sdk.BuildTasks.FindInstalledExtension : VsSettingsManagerTask {
    [CompilerGeneratedAttribute]
private string <VsixIdentifier>k__BackingField;
    [CompilerGeneratedAttribute]
private string <InstallableExtensionVersion>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <FailIfNotInstalled>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <VersionCompatibilityOff>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DeploymentPath>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <AllUsers>k__BackingField;
    [RequiredAttribute]
public string VsixIdentifier { get; public set; }
    [RequiredAttribute]
public string InstallableExtensionVersion { get; public set; }
    public bool FailIfNotInstalled { get; public set; }
    public bool VersionCompatibilityOff { get; public set; }
    [OutputAttribute]
public string DeploymentPath { get; public set; }
    [OutputAttribute]
public bool AllUsers { get; public set; }
    [CompilerGeneratedAttribute]
public string get_VsixIdentifier();
    [CompilerGeneratedAttribute]
public void set_VsixIdentifier(string value);
    [CompilerGeneratedAttribute]
public string get_InstallableExtensionVersion();
    [CompilerGeneratedAttribute]
public void set_InstallableExtensionVersion(string value);
    [CompilerGeneratedAttribute]
public bool get_FailIfNotInstalled();
    [CompilerGeneratedAttribute]
public void set_FailIfNotInstalled(bool value);
    [CompilerGeneratedAttribute]
public bool get_VersionCompatibilityOff();
    [CompilerGeneratedAttribute]
public void set_VersionCompatibilityOff(bool value);
    [CompilerGeneratedAttribute]
public string get_DeploymentPath();
    [CompilerGeneratedAttribute]
public void set_DeploymentPath(string value);
    [CompilerGeneratedAttribute]
public bool get_AllUsers();
    [CompilerGeneratedAttribute]
public void set_AllUsers(bool value);
    public virtual bool Execute();
}
public class Microsoft.VisualStudio.Sdk.BuildTasks.FindVsSDKInstallation : Task {
    [CompilerGeneratedAttribute]
private string <IncludesPath>k__BackingField;
    [CompilerGeneratedAttribute]
private string <InstallationPath>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ToolsPath>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ToolsPathX86>k__BackingField;
    [OutputAttribute]
public string IncludesPath { get; public set; }
    [OutputAttribute]
public string InstallationPath { get; public set; }
    [OutputAttribute]
public string ToolsPath { get; public set; }
    [OutputAttribute]
public string ToolsPathX86 { get; public set; }
    [CompilerGeneratedAttribute]
public string get_IncludesPath();
    [CompilerGeneratedAttribute]
public void set_IncludesPath(string value);
    [CompilerGeneratedAttribute]
public string get_InstallationPath();
    [CompilerGeneratedAttribute]
public void set_InstallationPath(string value);
    [CompilerGeneratedAttribute]
public string get_ToolsPath();
    [CompilerGeneratedAttribute]
public void set_ToolsPath(string value);
    [CompilerGeneratedAttribute]
public string get_ToolsPathX86();
    [CompilerGeneratedAttribute]
public void set_ToolsPathX86(string value);
    public virtual bool Execute();
}
internal static class Microsoft.VisualStudio.Sdk.BuildTasks.FolderLocator : object {
    private static string vssdkToolsSubpath;
    private static string vssdkX86ToolsSubpath;
    private static string vssdkARM64ToolsSubpath;
    private static string DevEnvRelativePath;
    private static string SDKRelativePath;
    private static string sdkInstallationDir;
    private static string devEnvDirectory;
    private static string instanceInstallationPath;
    public static string DevEnvDirectory { get; internal set; }
    public static string InstanceInstallationPath { get; internal set; }
    public static string get_DevEnvDirectory();
    internal static void set_DevEnvDirectory(string value);
    public static string AppendDevEnvDirectory(string basePath);
    public static string UnappendDevEnvDirectory(string devenvPath);
    public static string get_InstanceInstallationPath();
    internal static void set_InstanceInstallationPath(string value);
    public static string GetSDKInstallationPath();
    public static string GetSDKToolsPath(string installationPath, bool platformAnyCPU);
    public static string GetSDKToolsPath2(string arch, string installationPath);
}
public class Microsoft.VisualStudio.Sdk.BuildTasks.GetDeploymentPathFromVsixManifest : VsSettingsManagerTask {
    [CompilerGeneratedAttribute]
private ITaskItem <VsixManifest>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ExtensionsPath>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DeploymentPath>k__BackingField;
    [CompilerGeneratedAttribute]
private string <VsixID>k__BackingField;
    [CompilerGeneratedAttribute]
private string <VsixVersion>k__BackingField;
    [RequiredAttribute]
public ITaskItem VsixManifest { get; public set; }
    [RequiredAttribute]
public string ExtensionsPath { get; public set; }
    [OutputAttribute]
public string DeploymentPath { get; private set; }
    [OutputAttribute]
public string VsixID { get; private set; }
    [OutputAttribute]
public string VsixVersion { get; private set; }
    [CompilerGeneratedAttribute]
public ITaskItem get_VsixManifest();
    [CompilerGeneratedAttribute]
public void set_VsixManifest(ITaskItem value);
    [CompilerGeneratedAttribute]
public string get_ExtensionsPath();
    [CompilerGeneratedAttribute]
public void set_ExtensionsPath(string value);
    [CompilerGeneratedAttribute]
public string get_DeploymentPath();
    [CompilerGeneratedAttribute]
private void set_DeploymentPath(string value);
    [CompilerGeneratedAttribute]
public string get_VsixID();
    [CompilerGeneratedAttribute]
private void set_VsixID(string value);
    [CompilerGeneratedAttribute]
public string get_VsixVersion();
    [CompilerGeneratedAttribute]
private void set_VsixVersion(string value);
    public virtual bool Execute();
}
public class Microsoft.VisualStudio.Sdk.BuildTasks.GetExtensionsPath : VsSettingsManagerTask {
    [CompilerGeneratedAttribute]
private string <LocalExtensionsPath>k__BackingField;
    [OutputAttribute]
public string LocalExtensionsPath { get; private set; }
    [CompilerGeneratedAttribute]
public string get_LocalExtensionsPath();
    [CompilerGeneratedAttribute]
private void set_LocalExtensionsPath(string value);
    public virtual bool Execute();
    private object GetCacheKey();
    private string TryGetCachedPath(object cacheKey);
    private void CachePath(object cacheKey, string path);
}
public class Microsoft.VisualStudio.Sdk.BuildTasks.GetInstallationDirectoryForInstance : VsSDKTask {
    [CompilerGeneratedAttribute]
private string <InstanceId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <InstallationDirectory>k__BackingField;
    public string InstanceId { get; public set; }
    [OutputAttribute]
public string InstallationDirectory { get; private set; }
    [CompilerGeneratedAttribute]
public string get_InstanceId();
    [CompilerGeneratedAttribute]
public void set_InstanceId(string value);
    [CompilerGeneratedAttribute]
public string get_InstallationDirectory();
    [CompilerGeneratedAttribute]
private void set_InstallationDirectory(string value);
    public virtual bool Execute();
    [CompilerGeneratedAttribute]
private bool <Execute>b__8_0(ISetupInstance2 i);
}
internal static class Microsoft.VisualStudio.Sdk.BuildTasks.HostPropertiesProvider : object {
    private static ISetupConfiguration setupConfiguration;
    internal static ISetupConfiguration SetupConfiguration { get; internal set; }
    internal static ISetupConfiguration get_SetupConfiguration();
    internal static void set_SetupConfiguration(ISetupConfiguration value);
    public static HostProperties Create(string rootFolder);
}
internal static class Microsoft.VisualStudio.Sdk.BuildTasks.PublishCheckSum : object {
    private static ulong CRCPOLYNOMIAL;
    private static UInt64[] CRCTable;
    private static PublishCheckSum();
    public static ulong Generate(Stream stream);
}
public class Microsoft.VisualStudio.Sdk.BuildTasks.RegisterStub : VsSDKTask {
    [CompilerGeneratedAttribute]
private string <InstallDir>k__BackingField;
    [CompilerGeneratedAttribute]
private string <AppName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <StubDTEGuid>k__BackingField;
    [RequiredAttribute]
public string InstallDir { get; public set; }
    [RequiredAttribute]
public string AppName { get; public set; }
    [RequiredAttribute]
public string StubDTEGuid { get; public set; }
    [CompilerGeneratedAttribute]
public string get_InstallDir();
    [CompilerGeneratedAttribute]
public void set_InstallDir(string value);
    [CompilerGeneratedAttribute]
public string get_AppName();
    [CompilerGeneratedAttribute]
public void set_AppName(string value);
    [CompilerGeneratedAttribute]
public string get_StubDTEGuid();
    [CompilerGeneratedAttribute]
public void set_StubDTEGuid(string value);
    public virtual bool Execute();
    private void UpdateRegistryValue(string proposedValue, string keyRoot, string valueName);
    private void UpdateRegistryValue(long proposedValue, string keyRoot, string valueName);
    private string RemoveTrailingPathSeperator(string path);
    private string GetPkgDefValue(string pkgDefPath, string key);
    private Dictionary`2<string, string> ParsePkgDef(string pkgDefPath);
    private bool ParsePkgDefLine(string line, String& name, String& value);
    private string ParsePkgDefToken(string text, String& token);
    private bool IsTokenDelimiter(char ch, bool matchQuote);
}
[GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "16.0.0.0")]
[DebuggerNonUserCodeAttribute]
[CompilerGeneratedAttribute]
internal class Microsoft.VisualStudio.Sdk.BuildTasks.TasksResources : object {
    private static ResourceManager resourceMan;
    private static CultureInfo resourceCulture;
    [EditorBrowsableAttribute("2")]
internal static ResourceManager ResourceManager { get; }
    [EditorBrowsableAttribute("2")]
internal static CultureInfo Culture { get; internal set; }
    internal static string CheckProfileSetup_ProblemCheckingProfileSetup { get; }
    internal static string Component_InvalidId { get; }
    internal static string EnabledExtension_EnabledExtension { get; }
    internal static string EnabledExtension_ProblemEnablingExtension { get; }
    internal static string EnabledLoadingAllExtensions_EnabledLoadingAllExtensions { get; }
    internal static string EnabledLoadingAllExtensions_EnabledLoadingAllExtensionsNotNeeded { get; }
    internal static string EnableLoadingAllExtensions_ProblemEnablingAllExtensions { get; }
    internal static string FindInstalledExtension_FoundExtension { get; }
    internal static string FindInstalledExtension_ProblemFindingExtension { get; }
    internal static string FindVSSDKInstallation_NoSDKInstallation { get; }
    internal static string General_ExtensionNotInstalled { get; }
    internal static string General_ExtensionVersionError { get; }
    internal static string General_NoSDKTools { get; }
    internal static string General_NoX86SDKTools { get; }
    internal static string General_ParameterCannotBeNull { get; }
    internal static string General_ParameterCannotHaveZeroLength { get; }
    internal static string General_PropertyError { get; }
    internal static string General_VersionParsingError { get; }
    internal static string GetDeploymentPathFromVsixManifest_InvalidPathCharInVSIXManifest { get; }
    internal static string GetExtensionsPath_UnableToGetExtensionsDirectory { get; }
    internal static string RegisterStub_ProblemRegisteringStub { get; }
    internal static string UninstallExtension_ProblemUnInstallingExtension { get; }
    internal static string UninstallExtension_UninstalledExtension { get; }
    internal static string VsTemplatePath_MissingLocaleID { get; }
    internal static string VsTemplatePaths_FailedToRetrievePath { get; }
    internal static string VsTemplatePaths_InvalidRegistryHive { get; }
    internal static string VsTemplatePaths_ProblemRetrievingPath { get; }
    internal static string General_Error { get; }
    internal static ResourceManager get_ResourceManager();
    internal static CultureInfo get_Culture();
    internal static void set_Culture(CultureInfo value);
    internal static string get_CheckProfileSetup_ProblemCheckingProfileSetup();
    internal static string get_Component_InvalidId();
    internal static string get_EnabledExtension_EnabledExtension();
    internal static string get_EnabledExtension_ProblemEnablingExtension();
    internal static string get_EnabledLoadingAllExtensions_EnabledLoadingAllExtensions();
    internal static string get_EnabledLoadingAllExtensions_EnabledLoadingAllExtensionsNotNeeded();
    internal static string get_EnableLoadingAllExtensions_ProblemEnablingAllExtensions();
    internal static string get_FindInstalledExtension_FoundExtension();
    internal static string get_FindInstalledExtension_ProblemFindingExtension();
    internal static string get_FindVSSDKInstallation_NoSDKInstallation();
    internal static string get_General_ExtensionNotInstalled();
    internal static string get_General_ExtensionVersionError();
    internal static string get_General_NoSDKTools();
    internal static string get_General_NoX86SDKTools();
    internal static string get_General_ParameterCannotBeNull();
    internal static string get_General_ParameterCannotHaveZeroLength();
    internal static string get_General_PropertyError();
    internal static string get_General_VersionParsingError();
    internal static string get_GetDeploymentPathFromVsixManifest_InvalidPathCharInVSIXManifest();
    internal static string get_GetExtensionsPath_UnableToGetExtensionsDirectory();
    internal static string get_RegisterStub_ProblemRegisteringStub();
    internal static string get_UninstallExtension_ProblemUnInstallingExtension();
    internal static string get_UninstallExtension_UninstalledExtension();
    internal static string get_VsTemplatePath_MissingLocaleID();
    internal static string get_VsTemplatePaths_FailedToRetrievePath();
    internal static string get_VsTemplatePaths_InvalidRegistryHive();
    internal static string get_VsTemplatePaths_ProblemRetrievingPath();
    internal static string get_General_Error();
}
internal static class Microsoft.VisualStudio.Sdk.BuildTasks.ToolTaskHelper : object {
    public static string GenerateFullPathToTool(string toolName, bool platformAnyCPU, TaskLoggingHelper log);
}
public class Microsoft.VisualStudio.Sdk.BuildTasks.UninstallExtension : VsSettingsManagerTask {
    [CompilerGeneratedAttribute]
private string <VsixIdentifier>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <FailIfNotInstalled>k__BackingField;
    [RequiredAttribute]
public string VsixIdentifier { get; public set; }
    public bool FailIfNotInstalled { get; public set; }
    [CompilerGeneratedAttribute]
public string get_VsixIdentifier();
    [CompilerGeneratedAttribute]
public void set_VsixIdentifier(string value);
    [CompilerGeneratedAttribute]
public bool get_FailIfNotInstalled();
    [CompilerGeneratedAttribute]
public void set_FailIfNotInstalled(bool value);
    public virtual bool Execute();
}
public class Microsoft.VisualStudio.Sdk.BuildTasks.UpdateVSIXSourceItem : VsSDKTask {
    [CompilerGeneratedAttribute]
private ITaskItem[] <VSIXSourceItem>k__BackingField;
    [CompilerGeneratedAttribute]
private ITaskItem[] <VSIXSourceItemToUpdate>k__BackingField;
    [CompilerGeneratedAttribute]
private ITaskItem[] <SourceItemToRemove>k__BackingField;
    [RequiredAttribute]
public ITaskItem[] VSIXSourceItem { get; public set; }
    [RequiredAttribute]
public ITaskItem[] VSIXSourceItemToUpdate { get; public set; }
    [OutputAttribute]
public ITaskItem[] SourceItemToRemove { get; public set; }
    [CompilerGeneratedAttribute]
public ITaskItem[] get_VSIXSourceItem();
    [CompilerGeneratedAttribute]
public void set_VSIXSourceItem(ITaskItem[] value);
    [CompilerGeneratedAttribute]
public ITaskItem[] get_VSIXSourceItemToUpdate();
    [CompilerGeneratedAttribute]
public void set_VSIXSourceItemToUpdate(ITaskItem[] value);
    [CompilerGeneratedAttribute]
public ITaskItem[] get_SourceItemToRemove();
    [CompilerGeneratedAttribute]
public void set_SourceItemToRemove(ITaskItem[] value);
    public virtual bool Execute();
    [CompilerGeneratedAttribute]
private bool <Execute>b__12_0(ITaskItem item);
}
public class Microsoft.VisualStudio.Sdk.BuildTasks.VSCTCompiler : VSCTCompilerBase {
    protected virtual string GenerateFullPathToTool();
}
public class Microsoft.VisualStudio.Sdk.BuildTasks.VsixUtil : VsixUtilBase {
    protected virtual string GenerateFullPathToTool();
}
public abstract class Microsoft.VisualStudio.Sdk.BuildTasks.VsSDKTask : VsSDKTaskBase {
    public IEnumerable`1<string> VSProbingPaths { get; }
    public VsSDKTask(ResourceManager resourceManager);
    public VsSDKTask(ResourceManager resourceManager, string helpKeywordPrefix);
    public virtual IEnumerable`1<string> get_VSProbingPaths();
    [IteratorStateMachineAttribute("Microsoft.VisualStudio.Sdk.BuildTasks.VsSDKTask/<GetVSProbingPaths>d__5")]
internal static IEnumerable`1<string> GetVSProbingPaths();
}
public abstract class Microsoft.VisualStudio.Sdk.BuildTasks.VsSettingsManagerTask : VsSDKTask {
    [CompilerGeneratedAttribute]
private string <DevenvInstallationDirectory>k__BackingField;
    [CompilerGeneratedAttribute]
private string <RootSuffix>k__BackingField;
    private ISettingsManager settingsManager;
    public string DevenvInstallationDirectory { get; public set; }
    public string RootSuffix { get; public set; }
    internal ISettingsManager SettingsManager { get; }
    public VsSettingsManagerTask(ResourceManager resourceManager);
    public VsSettingsManagerTask(ResourceManager resourceManager, string helpKeywordPrefix);
    [CompilerGeneratedAttribute]
public string get_DevenvInstallationDirectory();
    [CompilerGeneratedAttribute]
public void set_DevenvInstallationDirectory(string value);
    [CompilerGeneratedAttribute]
public string get_RootSuffix();
    [CompilerGeneratedAttribute]
public void set_RootSuffix(string value);
    internal ISettingsManager get_SettingsManager();
}
public class Microsoft.VisualStudio.Sdk.BuildTasks.VsTemplatePaths : VsSDKTask {
    private static string ProjectTemplatesDirectory;
    private static string ItemTemplatesDirectory;
    private static string PathToVSAppDataFolder;
    [CompilerGeneratedAttribute]
private string <RegistryHive>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ProjectTemplates>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ItemTemplates>k__BackingField;
    public string RegistryHive { get; public set; }
    [OutputAttribute]
public string ProjectTemplates { get; private set; }
    [OutputAttribute]
public string ItemTemplates { get; private set; }
    [CompilerGeneratedAttribute]
public string get_RegistryHive();
    [CompilerGeneratedAttribute]
public void set_RegistryHive(string value);
    [CompilerGeneratedAttribute]
public string get_ProjectTemplates();
    [CompilerGeneratedAttribute]
private void set_ProjectTemplates(string value);
    [CompilerGeneratedAttribute]
public string get_ItemTemplates();
    [CompilerGeneratedAttribute]
private void set_ItemTemplates(string value);
    private IRegistryKey OpenTemplateKey();
    public virtual bool Execute();
}
internal static class Microsoft.VisualStudio.Sdk.Deploy.DeployUtilities : object {
    private static string PendingDeletionsCollectionConstant { get; }
    private static string ExtensionManagerSettingsStoreRoot { get; }
    private static string ExtensionsChangedKey { get; }
    private static string ConfigurationChangedReasonKey { get; }
    private static string get_PendingDeletionsCollectionConstant();
    private static string get_ExtensionManagerSettingsStoreRoot();
    private static string get_ExtensionsChangedKey();
    private static string get_ConfigurationChangedReasonKey();
    internal static ISettingsManager GetSettingsManagerForDevenv(string devenvPath, string rootSuffix);
    internal static ExtensionEngineImpl GetExtensionEngine(IEngineHost host);
    internal static IInstalledExtension GetInstalledExtension(IExtensionEngine extensionEngine, string VsixIdentifier);
    internal static void UpdateLastExtensionsChange(ISettingsManager settingsManager);
    internal static void RemoveExtensionFromPendingDeletions(ISettingsManager settingsManager, string vsixIdentifierAndVersion);
}
internal class Microsoft.VisualStudio.Sdk.Deploy.ExtensionEngineHost : object {
    private ISettingsManager settingsManager;
    private string rootFolder;
    private HostProperties hostProperties;
    private JoinableTaskContext taskContext;
    private EngineHostId engineHostId;
    [CompilerGeneratedAttribute]
private IAsyncServiceProvider <AsyncServiceProvider>k__BackingField;
    [CompilerGeneratedAttribute]
private IServiceProvider <ServiceProvider>k__BackingField;
    public ISettingsManager SettingsManager { get; }
    public IAutoUpdateManager AutoUpdateManager { get; }
    public ITelemetryLogger TelemetryLogger { get; }
    public ILogger Logger { get; }
    public CultureInfo PreferredCulture { get; }
    public string RootFolder { get; }
    public string InstallDir { get; }
    public string ShellFolder { get; }
    public string ProductName { get; }
    public JoinableTaskFactory JoinableTaskFactory { get; }
    public bool ShouldDeletePendingUninstalls { get; }
    public bool ShouldMarkPendingUninstalls { get; }
    public EngineHostId HostId { get; }
    public HostProperties HostProperties { get; }
    public bool IsRemoteEnvironment { get; }
    public IEnumerable`1<string> ExcludedLocations { get; }
    public string AppName { get; }
    public IClientEnabledSettings ClientEnabledSettings { get; }
    public IAsyncServiceProvider AsyncServiceProvider { get; public set; }
    public IServiceProvider ServiceProvider { get; public set; }
    internal ExtensionEngineHost(ISettingsManager settingsManager, string rootFolder, HostProperties hostProperties);
    internal ExtensionEngineHost(ISettingsManager settingsManager, string rootFolder, HostProperties hostProperties, EngineHostId engineHostId);
    public sealed virtual ISettingsManager get_SettingsManager();
    public sealed virtual IAutoUpdateManager get_AutoUpdateManager();
    public sealed virtual ITelemetryLogger get_TelemetryLogger();
    public sealed virtual ILogger get_Logger();
    public sealed virtual CultureInfo get_PreferredCulture();
    public sealed virtual string get_RootFolder();
    public sealed virtual string get_InstallDir();
    public sealed virtual string get_ShellFolder();
    public sealed virtual string get_ProductName();
    public sealed virtual JoinableTaskFactory get_JoinableTaskFactory();
    public sealed virtual bool get_ShouldDeletePendingUninstalls();
    public sealed virtual bool get_ShouldMarkPendingUninstalls();
    public sealed virtual EngineHostId get_HostId();
    public sealed virtual HostProperties get_HostProperties();
    public sealed virtual bool get_IsRemoteEnvironment();
    public sealed virtual IEnumerable`1<string> get_ExcludedLocations();
    public sealed virtual string get_AppName();
    public sealed virtual IClientEnabledSettings get_ClientEnabledSettings();
    [CompilerGeneratedAttribute]
public sealed virtual IAsyncServiceProvider get_AsyncServiceProvider();
    [CompilerGeneratedAttribute]
public void set_AsyncServiceProvider(IAsyncServiceProvider value);
    [CompilerGeneratedAttribute]
public sealed virtual IServiceProvider get_ServiceProvider();
    [CompilerGeneratedAttribute]
public void set_ServiceProvider(IServiceProvider value);
    public sealed virtual void DisablePerMachineExtension(IInstalledExtension extension);
    public sealed virtual void EnablePerMachineExtension(IInstalledExtension extension);
    public sealed virtual bool LocationIsExcluded(string path);
    public sealed virtual void OnBeforeInstall(IInstallableExtension extension);
    public sealed virtual void OnBeforeInstall(IInstallableExtension extension, bool perMachine);
    public sealed virtual Task RunUIThreadBackgroundPriority(Func`1<Task> func);
    public sealed virtual void WaitOnHostTask(Task toWait);
}
[CompilerGeneratedAttribute]
[GuidAttribute("42843719-DB4C-46C2-8E7C-64F1816EFD5B")]
[InterfaceTypeAttribute("1")]
[TypeIdentifierAttribute]
public interface Microsoft.VisualStudio.Setup.Configuration.ISetupConfiguration {
}
[CompilerGeneratedAttribute]
[GuidAttribute("26AAB78C-4A60-49D6-AF3B-3C35BC93365D")]
[InterfaceTypeAttribute("1")]
[TypeIdentifierAttribute]
public interface Microsoft.VisualStudio.Setup.Configuration.ISetupConfiguration2 {
}
[CompilerGeneratedAttribute]
[GuidAttribute("B41463C3-8866-43B5-BC33-2B0676F7F42E")]
[InterfaceTypeAttribute("1")]
[TypeIdentifierAttribute]
public interface Microsoft.VisualStudio.Setup.Configuration.ISetupInstance {
}
[CompilerGeneratedAttribute]
[GuidAttribute("89143C9A-05AF-49B0-B717-72E218A2185C")]
[InterfaceTypeAttribute("1")]
[TypeIdentifierAttribute]
public interface Microsoft.VisualStudio.Setup.Configuration.ISetupInstance2 {
    public abstract virtual string GetInstanceId();
    public void _VtblGap1_2();
    public abstract virtual string GetInstallationPath();
}
[CompilerGeneratedAttribute]
[GuidAttribute("42843719-DB4C-46C2-8E7C-64F1816EFD5B")]
[CoClassAttribute("System.Object")]
[TypeIdentifierAttribute]
public interface Microsoft.VisualStudio.Setup.Configuration.SetupConfiguration {
}
internal static class Microsoft.VSSDK.Constants : object {
    internal static string VisualStudioMajorVersion;
    internal static string VisualStudioMinorVersion;
    internal static string VisualStudioGeneralVersion;
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("2")]
internal class System.Runtime.CompilerServices.RefSafetyRulesAttribute : Attribute {
    public int Version;
    public RefSafetyRulesAttribute(int );
}
[GeneratedCodeAttribute("Nerdbank.GitVersioning.Tasks", "3.6.128.36433")]
[ExcludeFromCodeCoverageAttribute]
internal static class ThisAssembly : object {
    internal static string AssemblyConfiguration;
    internal static string AssemblyFileVersion;
    internal static string AssemblyInformationalVersion;
    internal static string AssemblyName;
    internal static string AssemblyTitle;
    internal static string AssemblyVersion;
    internal static DateTime GitCommitDate;
    internal static string GitCommitId;
    internal static bool IsPrerelease;
    internal static bool IsPublicRelease;
    internal static string PublicKey;
    internal static string PublicKeyToken;
    internal static string RootNamespace;
    private static ThisAssembly();
}
