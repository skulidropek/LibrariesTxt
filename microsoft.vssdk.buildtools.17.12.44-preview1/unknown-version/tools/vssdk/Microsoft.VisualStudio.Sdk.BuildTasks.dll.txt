[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
[GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "4.0.0.0")]
[DebuggerNonUserCodeAttribute]
[CompilerGeneratedAttribute]
internal class Microsoft.VisualStudio.CommandTable.CommandTableSharedResources : object {
    private static ResourceManager resourceMan;
    private static CultureInfo resourceCulture;
    [EditorBrowsableAttribute("2")]
internal static ResourceManager ResourceManager { get; }
    [EditorBrowsableAttribute("2")]
internal static CultureInfo Culture { get; internal set; }
    internal static string SkipTaskExecution { get; }
    internal static string SourceFileOutOfDate { get; }
    internal static string TargetFileNotFound { get; }
    internal static string TargetFileOutOfDate { get; }
    internal static ResourceManager get_ResourceManager();
    internal static CultureInfo get_Culture();
    internal static void set_Culture(CultureInfo value);
    internal static string get_SkipTaskExecution();
    internal static string get_SourceFileOutOfDate();
    internal static string get_TargetFileNotFound();
    internal static string get_TargetFileOutOfDate();
}
internal interface Microsoft.VisualStudio.CommandTable.IMessageWriter {
    public abstract virtual void WriteLine(string message);
}
internal class Microsoft.VisualStudio.CommandTable.VSCTDependencyLogger : object {
    private static string ReadLogFileName;
    private static string WriteLogFileName;
    [CompilerGeneratedAttribute]
private string <IntermediateDirectory>k__BackingField;
    private Dictionary`2<string, StringCollection> readLogs;
    private Dictionary`2<string, StringCollection> writeLogs;
    private IMessageWriter messageWriter;
    public string IntermediateDirectory { get; }
    public string ReadLogPath { get; }
    public string WriteLogPath { get; }
    public VSCTDependencyLogger(string intermediateDirectory, IMessageWriter messageWriter);
    [CompilerGeneratedAttribute]
public string get_IntermediateDirectory();
    public string get_ReadLogPath();
    public string get_WriteLogPath();
    public bool IsCurrent(string sourceFile, string targetFile);
    internal void ReadDependencyLogs();
    private static void ReadFromFile(Dictionary`2<string, StringCollection> log, string file);
    public void Save();
    private static void WriteLogToFile(Dictionary`2<string, StringCollection> logs, string fileName);
    private void FormatAndLogMessage(string unformattedMessage, Object[] args);
    public void AddReadDependency(string file, string dependency);
    public void AddWriteDependency(string file, string dependency);
    private static void AddDependency(Dictionary`2<string, StringCollection> logs, string file, string dependency);
    private static string Normalize(string fileName);
}
public class Microsoft.VisualStudio.Sdk.BuildTasks.CalculateZipItems : Task {
    private ITaskItem[] files;
    private string projectPath;
    private string targetPath;
    private string zipName;
    private string zipFile;
    [OutputAttribute]
public ITaskItem[] Files { get; public set; }
    [RequiredAttribute]
public string ProjectPath { get; public set; }
    public string TargetPath { get; public set; }
    [RequiredAttribute]
public string ZipName { get; public set; }
    private string TargetZipName { get; }
    public ITaskItem[] get_Files();
    public void set_Files(ITaskItem[] value);
    public string get_ProjectPath();
    public void set_ProjectPath(string value);
    public string get_TargetPath();
    public void set_TargetPath(string value);
    public string get_ZipName();
    public void set_ZipName(string value);
    private string get_TargetZipName();
    public virtual bool Execute();
    private bool PropertiesAreValid();
}
[GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "16.0.0.0")]
[DebuggerNonUserCodeAttribute]
[CompilerGeneratedAttribute]
internal class Microsoft.VisualStudio.Sdk.BuildTasks.CommonTasksResources : object {
    private static ResourceManager resourceMan;
    private static CultureInfo resourceCulture;
    [EditorBrowsableAttribute("2")]
internal static ResourceManager ResourceManager { get; }
    [EditorBrowsableAttribute("2")]
internal static CultureInfo Culture { get; internal set; }
    internal static string CalculateZipItems_CouldNotGenerateTargetPath { get; }
    internal static string CalculateZipItems_CouldNotGenerateZipFileName { get; }
    internal static string CheckProfileSetup_ProblemCheckingProfileSetup { get; }
    internal static string Component_InvalidId { get; }
    internal static string CopyIfChanged_CopyingFile { get; }
    internal static string CopyIfChanged_CouldNotCopyFile { get; }
    internal static string CreateMenuPkgDef_ProblemCreatingMenuPkgDef { get; }
    internal static string CreatePkgDef_AssemblyToProcessNotFound { get; }
    internal static string CreatePkgDef_CreatePkgDefUpToDate { get; }
    internal static string CreatePkgDef_MissingAssemblyToProcess { get; }
    internal static string CreatePkgDef_MissingOutputPkgDefFile { get; }
    internal static string CreateTemplatesManifest_CouldNotCreateTemplatesManifest { get; }
    internal static string CreateVsixSourceItemFromReferences_AddingItemMessage { get; }
    internal static string CreateVsixSourceItemFromReferences_SkippingItemMessage { get; }
    internal static string CtoResourceMerger_CouldNotCheckUpToDate { get; }
    internal static string CtoResourceMerger_CouldNotMoveResourceFile { get; }
    internal static string CtoResourceMerger_CouldNotReadCTOData { get; }
    internal static string CtoResourceMerger_CTOConflictWithExistingResource { get; }
    internal static string CtoResourceMerger_CtoFileWithNoValidCulture { get; }
    internal static string CtoResourceMerger_CtoMergeCompleted { get; }
    internal static string CtoResourceMerger_CTOResourceNameConflict { get; }
    internal static string CtoResourceMerger_CtoWithNoResourceName { get; }
    internal static string CtoResourceMerger_EndCtoMerge { get; }
    internal static string CtoResourceMerger_NoCtoFiles { get; }
    internal static string CtoResourceMerger_NoCtoResourcesMerged { get; }
    internal static string CtoResourceMerger_NoResourcesToMerge { get; }
    internal static string CtoResourceMerger_ProblemMergingCTOResources { get; }
    internal static string CtoResourceMerger_SkipCTOMerge { get; }
    internal static string CtoResourceMerger_StartCtoMerge { get; }
    internal static string DetokenizeVsixManifestSource_CouldNotGetAssemblyName { get; }
    internal static string FindVsixManifest_NoVsixManifestFileInProject { get; }
    internal static string FindVSSDKInstallation_NoSDKInstallation { get; }
    internal static string General_NoSDKTools { get; }
    internal static string General_ParameterCannotBeNull { get; }
    internal static string General_ParameterCannotHaveZeroLength { get; }
    internal static string General_PropertyError { get; }
    internal static string General_VersionParsingError { get; }
    internal static string GenerateManifest_IOErrorOutputtingManifest { get; }
    internal static string GenerateManifest_MissingOutputManifest { get; }
    internal static string GenerateManifest_SkippingRedundantItem { get; }
    internal static string GenerateResourceManifest_EncounteredErrorWhenWritingCtoManifest { get; }
    internal static string GenerateResourceManifest_EncounteredExceptionWritingResourceManifest { get; }
    internal static string GenerateResourceManifest_NoCtoFilesToMerge { get; }
    internal static string GenerateResourceManifest_NoResourcesToMergeInto { get; }
    internal static string GetVSTemplateItems_CultureNotFound { get; }
    internal static string GetVSTemplateItems_ProblemWithTemplateItem { get; }
    internal static string GetVSTemplateItems_UnrecognizedVSTemplateType { get; }
    internal static string GetVSTemplateItems_WarningFileDoesNotExist { get; }
    internal static string ReadInfoFromManifest_EncountedExceptionReadingVsixManifest { get; }
    internal static string ReadInfoFromManifest_InvalidManifestFormat { get; }
    internal static string ReadInfoFromManifest_MissingElement { get; }
    internal static string ReadReferencesFromVsixManifest_UnresolvedProjectReferenceError { get; }
    internal static string Unzip_ProblemUnzippingContents { get; }
    internal static string Unzip_ZipFileDoesNotExist { get; }
    internal static string VSCT_AssemblyLoadFailure { get; }
    internal static string VSCT_InstanceCreationFailed { get; }
    internal static string VSCT_TypeNotFound { get; }
    internal static string VsixUtil_ErrorWritingCtoCacheFile { get; }
    internal static string VsixUtil_MissingRequiredArgumentForCommand { get; }
    internal static string VsixUtil_NoCommandSpecified { get; }
    internal static string VsixUtil_UnknownCommand { get; }
    internal static string VsixValidation_ManifestIncorrectVersion { get; }
    internal static string VsixValidation_ManifestMissingRoot { get; }
    internal static string VsixValidation_VsixManifestReadError { get; }
    internal static string ZipItems_CouldNotGetRelativePathForFile { get; }
    internal static string ZipItems_CurrentlyZipping { get; }
    internal static string ZipItems_FailedZipFileCreation { get; }
    internal static string ZipItems_InvalidAction { get; }
    internal static string ZipItems_ItemsNotUnderRootPath { get; }
    internal static string ZipItems_SkipZipping { get; }
    internal static ResourceManager get_ResourceManager();
    internal static CultureInfo get_Culture();
    internal static void set_Culture(CultureInfo value);
    internal static string get_CalculateZipItems_CouldNotGenerateTargetPath();
    internal static string get_CalculateZipItems_CouldNotGenerateZipFileName();
    internal static string get_CheckProfileSetup_ProblemCheckingProfileSetup();
    internal static string get_Component_InvalidId();
    internal static string get_CopyIfChanged_CopyingFile();
    internal static string get_CopyIfChanged_CouldNotCopyFile();
    internal static string get_CreateMenuPkgDef_ProblemCreatingMenuPkgDef();
    internal static string get_CreatePkgDef_AssemblyToProcessNotFound();
    internal static string get_CreatePkgDef_CreatePkgDefUpToDate();
    internal static string get_CreatePkgDef_MissingAssemblyToProcess();
    internal static string get_CreatePkgDef_MissingOutputPkgDefFile();
    internal static string get_CreateTemplatesManifest_CouldNotCreateTemplatesManifest();
    internal static string get_CreateVsixSourceItemFromReferences_AddingItemMessage();
    internal static string get_CreateVsixSourceItemFromReferences_SkippingItemMessage();
    internal static string get_CtoResourceMerger_CouldNotCheckUpToDate();
    internal static string get_CtoResourceMerger_CouldNotMoveResourceFile();
    internal static string get_CtoResourceMerger_CouldNotReadCTOData();
    internal static string get_CtoResourceMerger_CTOConflictWithExistingResource();
    internal static string get_CtoResourceMerger_CtoFileWithNoValidCulture();
    internal static string get_CtoResourceMerger_CtoMergeCompleted();
    internal static string get_CtoResourceMerger_CTOResourceNameConflict();
    internal static string get_CtoResourceMerger_CtoWithNoResourceName();
    internal static string get_CtoResourceMerger_EndCtoMerge();
    internal static string get_CtoResourceMerger_NoCtoFiles();
    internal static string get_CtoResourceMerger_NoCtoResourcesMerged();
    internal static string get_CtoResourceMerger_NoResourcesToMerge();
    internal static string get_CtoResourceMerger_ProblemMergingCTOResources();
    internal static string get_CtoResourceMerger_SkipCTOMerge();
    internal static string get_CtoResourceMerger_StartCtoMerge();
    internal static string get_DetokenizeVsixManifestSource_CouldNotGetAssemblyName();
    internal static string get_FindVsixManifest_NoVsixManifestFileInProject();
    internal static string get_FindVSSDKInstallation_NoSDKInstallation();
    internal static string get_General_NoSDKTools();
    internal static string get_General_ParameterCannotBeNull();
    internal static string get_General_ParameterCannotHaveZeroLength();
    internal static string get_General_PropertyError();
    internal static string get_General_VersionParsingError();
    internal static string get_GenerateManifest_IOErrorOutputtingManifest();
    internal static string get_GenerateManifest_MissingOutputManifest();
    internal static string get_GenerateManifest_SkippingRedundantItem();
    internal static string get_GenerateResourceManifest_EncounteredErrorWhenWritingCtoManifest();
    internal static string get_GenerateResourceManifest_EncounteredExceptionWritingResourceManifest();
    internal static string get_GenerateResourceManifest_NoCtoFilesToMerge();
    internal static string get_GenerateResourceManifest_NoResourcesToMergeInto();
    internal static string get_GetVSTemplateItems_CultureNotFound();
    internal static string get_GetVSTemplateItems_ProblemWithTemplateItem();
    internal static string get_GetVSTemplateItems_UnrecognizedVSTemplateType();
    internal static string get_GetVSTemplateItems_WarningFileDoesNotExist();
    internal static string get_ReadInfoFromManifest_EncountedExceptionReadingVsixManifest();
    internal static string get_ReadInfoFromManifest_InvalidManifestFormat();
    internal static string get_ReadInfoFromManifest_MissingElement();
    internal static string get_ReadReferencesFromVsixManifest_UnresolvedProjectReferenceError();
    internal static string get_Unzip_ProblemUnzippingContents();
    internal static string get_Unzip_ZipFileDoesNotExist();
    internal static string get_VSCT_AssemblyLoadFailure();
    internal static string get_VSCT_InstanceCreationFailed();
    internal static string get_VSCT_TypeNotFound();
    internal static string get_VsixUtil_ErrorWritingCtoCacheFile();
    internal static string get_VsixUtil_MissingRequiredArgumentForCommand();
    internal static string get_VsixUtil_NoCommandSpecified();
    internal static string get_VsixUtil_UnknownCommand();
    internal static string get_VsixValidation_ManifestIncorrectVersion();
    internal static string get_VsixValidation_ManifestMissingRoot();
    internal static string get_VsixValidation_VsixManifestReadError();
    internal static string get_ZipItems_CouldNotGetRelativePathForFile();
    internal static string get_ZipItems_CurrentlyZipping();
    internal static string get_ZipItems_FailedZipFileCreation();
    internal static string get_ZipItems_InvalidAction();
    internal static string get_ZipItems_ItemsNotUnderRootPath();
    internal static string get_ZipItems_SkipZipping();
}
public class Microsoft.VisualStudio.Sdk.BuildTasks.CopyIfChanged : Task {
    private ITaskItem sourceFile;
    private ITaskItem destinationFile;
    [RequiredAttribute]
public ITaskItem SourceFile { get; public set; }
    [RequiredAttribute]
[OutputAttribute]
public ITaskItem DestinationFile { get; public set; }
    public ITaskItem get_SourceFile();
    public void set_SourceFile(ITaskItem value);
    public ITaskItem get_DestinationFile();
    public void set_DestinationFile(ITaskItem value);
    public virtual bool Execute();
    private bool ShouldCopy();
}
public class Microsoft.VisualStudio.Sdk.BuildTasks.CopyMetadataByLookup : Task {
    [CompilerGeneratedAttribute]
private ITaskItem[] <MetadataSource>k__BackingField;
    [CompilerGeneratedAttribute]
private ITaskItem[] <SourceItems>k__BackingField;
    [CompilerGeneratedAttribute]
private string <SourceItemLookupMetadataName>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <MetadataToCopy>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private ITaskItem[] <MergedItems>k__BackingField;
    [RequiredAttribute]
public ITaskItem[] MetadataSource { get; public set; }
    [RequiredAttribute]
public ITaskItem[] SourceItems { get; public set; }
    [RequiredAttribute]
public string SourceItemLookupMetadataName { get; public set; }
    [RequiredAttribute]
public String[] MetadataToCopy { get; public set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[OutputAttribute]
public ITaskItem[] MergedItems { get; public set; }
    [CompilerGeneratedAttribute]
public ITaskItem[] get_MetadataSource();
    [CompilerGeneratedAttribute]
public void set_MetadataSource(ITaskItem[] value);
    [CompilerGeneratedAttribute]
public ITaskItem[] get_SourceItems();
    [CompilerGeneratedAttribute]
public void set_SourceItems(ITaskItem[] value);
    [CompilerGeneratedAttribute]
public string get_SourceItemLookupMetadataName();
    [CompilerGeneratedAttribute]
public void set_SourceItemLookupMetadataName(string value);
    [CompilerGeneratedAttribute]
public String[] get_MetadataToCopy();
    [CompilerGeneratedAttribute]
public void set_MetadataToCopy(String[] value);
    [CompilerGeneratedAttribute]
public ITaskItem[] get_MergedItems();
    [CompilerGeneratedAttribute]
public void set_MergedItems(ITaskItem[] value);
    public virtual bool Execute();
}
public class Microsoft.VisualStudio.Sdk.BuildTasks.CreateMenuPkgDef : Task {
    private string pkgdefFile;
    private string vsctFile;
    [RequiredAttribute]
public string PkgdefFile { get; public set; }
    [RequiredAttribute]
public string VsctFile { get; public set; }
    public string get_PkgdefFile();
    public void set_PkgdefFile(string value);
    public string get_VsctFile();
    public void set_VsctFile(string value);
    public virtual bool Execute();
}
public abstract class Microsoft.VisualStudio.Sdk.BuildTasks.CreatePkgDefBase : ToolTask {
    private static string ExceptionMessageStart;
    private static string ExceptionMessageEnd;
    private bool receivingErrorMessage;
    private StringBuilder errorMessageFromCreatePkgdefBuilder;
    private string productVersion;
    [CompilerGeneratedAttribute]
private ITaskItem <AssemblyToProcess>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Is64BitBuild>k__BackingField;
    [CompilerGeneratedAttribute]
private string <RequiredArchitecture>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <UseCodebase>k__BackingField;
    [CompilerGeneratedAttribute]
private ITaskItem[] <ReferencedAssemblies>k__BackingField;
    [CompilerGeneratedAttribute]
private string <OutputFile>k__BackingField;
    public string ProductVersion { get; public set; }
    public ITaskItem AssemblyToProcess { get; public set; }
    public bool Is64BitBuild { get; public set; }
    public string RequiredArchitecture { get; public set; }
    public bool UseCodebase { get; public set; }
    public ITaskItem[] ReferencedAssemblies { get; public set; }
    public string OutputFile { get; public set; }
    protected string ToolName { get; }
    public string get_ProductVersion();
    public void set_ProductVersion(string value);
    [CompilerGeneratedAttribute]
public ITaskItem get_AssemblyToProcess();
    [CompilerGeneratedAttribute]
public void set_AssemblyToProcess(ITaskItem value);
    [CompilerGeneratedAttribute]
public bool get_Is64BitBuild();
    [CompilerGeneratedAttribute]
public void set_Is64BitBuild(bool value);
    [CompilerGeneratedAttribute]
public string get_RequiredArchitecture();
    [CompilerGeneratedAttribute]
public void set_RequiredArchitecture(string value);
    [CompilerGeneratedAttribute]
public bool get_UseCodebase();
    [CompilerGeneratedAttribute]
public void set_UseCodebase(bool value);
    [CompilerGeneratedAttribute]
public ITaskItem[] get_ReferencedAssemblies();
    [CompilerGeneratedAttribute]
public void set_ReferencedAssemblies(ITaskItem[] value);
    [CompilerGeneratedAttribute]
public string get_OutputFile();
    [CompilerGeneratedAttribute]
public void set_OutputFile(string value);
    protected virtual int ExecuteTool(string pathToTool, string responseFileCommands, string commandLineCommands);
    protected virtual string GenerateResponseFileCommands();
    protected virtual bool SkipTaskExecution();
    protected virtual string get_ToolName();
    protected virtual bool ValidateParameters();
    protected virtual void LogEventsFromTextOutput(string singleLine, MessageImportance messageImportance);
}
internal class Microsoft.VisualStudio.Sdk.BuildTasks.CreateTemplateManifestsCommand : VsixUtilCommandBase {
    public string CommandName { get; }
    protected CreateTemplateManifestsCommand(VsixUtilBase vsixUtilTask);
    public virtual string get_CommandName();
    internal static CreateTemplateManifestsCommand Create(VsixUtilBase vsixUtilTask);
    public virtual string GenerateCommandLineCommands();
    public virtual bool SkipExecution();
    private bool SkipExecutionCore();
    public virtual bool ValidateParameters();
    public virtual int PostExecution(int toolResult);
}
public class Microsoft.VisualStudio.Sdk.BuildTasks.CreateVsixSourceItemFromReferences : Task {
    [CompilerGeneratedAttribute]
private ITaskItem[] <ReferencedVSIXSourceItems>k__BackingField;
    [CompilerGeneratedAttribute]
private ITaskItem[] <VsixSourceItems>k__BackingField;
    [CompilerGeneratedAttribute]
private ITaskItem[] <SuppressedVSIXSourceItems>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IgnoreFileExtension>k__BackingField;
    [RequiredAttribute]
public ITaskItem[] ReferencedVSIXSourceItems { get; public set; }
    [OutputAttribute]
public ITaskItem[] VsixSourceItems { get; private set; }
    public ITaskItem[] SuppressedVSIXSourceItems { get; public set; }
    public bool IgnoreFileExtension { get; public set; }
    public virtual bool Execute();
    private string GetSuppressedFileName(string fileName);
    private static bool IsFileSuppressed(string fileName, HashSet`1<string> suppressedFileNames);
    [CompilerGeneratedAttribute]
public ITaskItem[] get_ReferencedVSIXSourceItems();
    [CompilerGeneratedAttribute]
public void set_ReferencedVSIXSourceItems(ITaskItem[] value);
    [CompilerGeneratedAttribute]
public ITaskItem[] get_VsixSourceItems();
    [CompilerGeneratedAttribute]
private void set_VsixSourceItems(ITaskItem[] value);
    [CompilerGeneratedAttribute]
public ITaskItem[] get_SuppressedVSIXSourceItems();
    [CompilerGeneratedAttribute]
public void set_SuppressedVSIXSourceItems(ITaskItem[] value);
    [CompilerGeneratedAttribute]
public bool get_IgnoreFileExtension();
    [CompilerGeneratedAttribute]
public void set_IgnoreFileExtension(bool value);
    [CompilerGeneratedAttribute]
private string <Execute>b__0_0(ITaskItem x);
}
public class Microsoft.VisualStudio.Sdk.BuildTasks.DetokenizeVsixManifestSource : Task {
    [CompilerGeneratedAttribute]
private ITaskItem <InputFile>k__BackingField;
    [CompilerGeneratedAttribute]
private ITaskItem <OutputFile>k__BackingField;
    [CompilerGeneratedAttribute]
private ITaskItem[] <ResolvedReferences>k__BackingField;
    [RequiredAttribute]
public ITaskItem InputFile { get; public set; }
    [RequiredAttribute]
[OutputAttribute]
public ITaskItem OutputFile { get; public set; }
    public ITaskItem[] ResolvedReferences { get; public set; }
    public virtual bool Execute();
    protected virtual string ReadAllText(string path);
    protected virtual void WriteAllText(string path, string contents);
    protected virtual string RemoveDesignData(string contents);
    [CompilerGeneratedAttribute]
public ITaskItem get_InputFile();
    [CompilerGeneratedAttribute]
public void set_InputFile(ITaskItem value);
    [CompilerGeneratedAttribute]
public ITaskItem get_OutputFile();
    [CompilerGeneratedAttribute]
public void set_OutputFile(ITaskItem value);
    [CompilerGeneratedAttribute]
public ITaskItem[] get_ResolvedReferences();
    [CompilerGeneratedAttribute]
public void set_ResolvedReferences(ITaskItem[] value);
}
public abstract class Microsoft.VisualStudio.Sdk.BuildTasks.DevenvBase : ToolTask {
    [CompilerGeneratedAttribute]
private string <RootSuffix>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ResetSettingProfile>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsEmbedded>k__BackingField;
    public string RootSuffix { get; public set; }
    public string ResetSettingProfile { get; public set; }
    public bool IsEmbedded { get; public set; }
    protected string ToolName { get; }
    [CompilerGeneratedAttribute]
public string get_RootSuffix();
    [CompilerGeneratedAttribute]
public void set_RootSuffix(string value);
    [CompilerGeneratedAttribute]
public string get_ResetSettingProfile();
    [CompilerGeneratedAttribute]
public void set_ResetSettingProfile(string value);
    [CompilerGeneratedAttribute]
public bool get_IsEmbedded();
    [CompilerGeneratedAttribute]
public void set_IsEmbedded(bool value);
    protected virtual string GenerateCommandLineCommands();
    protected virtual string get_ToolName();
}
[ExtensionAttribute]
internal static class Microsoft.VisualStudio.Sdk.BuildTasks.ExtensionMethods : object {
    [ExtensionAttribute]
public static bool NormalizedEquals(Version version1, Version version2);
    private static Version GetNormalizedVersion(Version version);
    [ExtensionAttribute]
public static ManifestType GetManifestType(XDocument xdoc, TaskLoggingHelper log);
    [ExtensionAttribute]
public static bool IsMetadataTrue(ITaskItem item, string metadataName);
}
public class Microsoft.VisualStudio.Sdk.BuildTasks.FindVsixManifest : Task {
    [CompilerGeneratedAttribute]
private ITaskItem[] <ItemsToConsider>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ProjectName>k__BackingField;
    [CompilerGeneratedAttribute]
private ITaskItem <VsixManifest>k__BackingField;
    private static string VsixManifestName;
    [RequiredAttribute]
public ITaskItem[] ItemsToConsider { get; public set; }
    [RequiredAttribute]
public string ProjectName { get; public set; }
    [OutputAttribute]
public ITaskItem VsixManifest { get; private set; }
    [CompilerGeneratedAttribute]
public ITaskItem[] get_ItemsToConsider();
    [CompilerGeneratedAttribute]
public void set_ItemsToConsider(ITaskItem[] value);
    [CompilerGeneratedAttribute]
public string get_ProjectName();
    [CompilerGeneratedAttribute]
public void set_ProjectName(string value);
    [CompilerGeneratedAttribute]
public ITaskItem get_VsixManifest();
    [CompilerGeneratedAttribute]
private void set_VsixManifest(ITaskItem value);
    public virtual bool Execute();
}
public class Microsoft.VisualStudio.Sdk.BuildTasks.GenerateFileManifest : Task {
    private static string CultureMetadataName;
    private static string InstallRootMetadataName;
    private static string NgenMetadataName;
    private static string NgenApplicationMetadataName;
    private static string NgenArchitectureMetadataName;
    private static string NgenPriorityMetadataName;
    private static string TargetPathMetadataName;
    private static string VsixSubPathMetadataName;
    private static string ResourcesDll;
    [CompilerGeneratedAttribute]
private bool <NgenLocalized>k__BackingField;
    [CompilerGeneratedAttribute]
private ITaskItem[] <FileItems>k__BackingField;
    [CompilerGeneratedAttribute]
private ITaskItem <FileManifest>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <LegacyMode>k__BackingField;
    public bool NgenLocalized { get; public set; }
    [RequiredAttribute]
public ITaskItem[] FileItems { get; public set; }
    [RequiredAttribute]
[OutputAttribute]
public ITaskItem FileManifest { get; public set; }
    public bool LegacyMode { get; public set; }
    [CompilerGeneratedAttribute]
public bool get_NgenLocalized();
    [CompilerGeneratedAttribute]
public void set_NgenLocalized(bool value);
    [CompilerGeneratedAttribute]
public ITaskItem[] get_FileItems();
    [CompilerGeneratedAttribute]
public void set_FileItems(ITaskItem[] value);
    [CompilerGeneratedAttribute]
public ITaskItem get_FileManifest();
    [CompilerGeneratedAttribute]
public void set_FileManifest(ITaskItem value);
    [CompilerGeneratedAttribute]
public bool get_LegacyMode();
    [CompilerGeneratedAttribute]
public void set_LegacyMode(bool value);
    public virtual bool Execute();
    private bool checkIfResourceDLLShouldBeNgen(string fileItemSepc);
    protected virtual void DeleteFileManifest();
    protected virtual void WriteFileManifest(string jsonString);
    protected virtual bool IsAssembly(string filePath);
    private static string NormalizeRelativePath(string path);
}
public class Microsoft.VisualStudio.Sdk.BuildTasks.GenerateResourcePackagesManifest : Task {
    private static string CultureMetadataName;
    private static string FallbackCultureMetadataName;
    [CompilerGeneratedAttribute]
private string <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Version>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DependencyVersionRange>k__BackingField;
    [CompilerGeneratedAttribute]
private ITaskItem[] <ResourceItems>k__BackingField;
    [CompilerGeneratedAttribute]
private ITaskItem <ResourcePackagesManifest>k__BackingField;
    [RequiredAttribute]
public string Id { get; public set; }
    [RequiredAttribute]
public string Version { get; public set; }
    public string DependencyVersionRange { get; public set; }
    [RequiredAttribute]
public ITaskItem[] ResourceItems { get; public set; }
    [RequiredAttribute]
[OutputAttribute]
public ITaskItem ResourcePackagesManifest { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Id();
    [CompilerGeneratedAttribute]
public void set_Id(string value);
    [CompilerGeneratedAttribute]
public string get_Version();
    [CompilerGeneratedAttribute]
public void set_Version(string value);
    [CompilerGeneratedAttribute]
public string get_DependencyVersionRange();
    [CompilerGeneratedAttribute]
public void set_DependencyVersionRange(string value);
    [CompilerGeneratedAttribute]
public ITaskItem[] get_ResourceItems();
    [CompilerGeneratedAttribute]
public void set_ResourceItems(ITaskItem[] value);
    [CompilerGeneratedAttribute]
public ITaskItem get_ResourcePackagesManifest();
    [CompilerGeneratedAttribute]
public void set_ResourcePackagesManifest(ITaskItem value);
    public virtual bool Execute();
    protected virtual void DeleteResourcePackagesManifest();
    protected virtual void WriteResourcePackagesManifest(string jsonString);
}
public class Microsoft.VisualStudio.Sdk.BuildTasks.GetVSTemplateItems : Task {
    private static XNamespace VSTemplateNamespace;
    private static XNamespace VSTemplateSdkNamespace;
    [CompilerGeneratedAttribute]
private ITaskItem[] <TemplateFiles>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TargetPath>k__BackingField;
    private List`1<ITaskItem> zipItems;
    private List`1<ITaskItem> zipProjects;
    [RequiredAttribute]
public ITaskItem[] TemplateFiles { get; public set; }
    [RequiredAttribute]
public string TargetPath { get; public set; }
    [OutputAttribute]
public ITaskItem[] ZipItems { get; }
    [OutputAttribute]
public ITaskItem[] ZipProjects { get; }
    private static GetVSTemplateItems();
    [CompilerGeneratedAttribute]
public ITaskItem[] get_TemplateFiles();
    [CompilerGeneratedAttribute]
public void set_TemplateFiles(ITaskItem[] value);
    [CompilerGeneratedAttribute]
public string get_TargetPath();
    [CompilerGeneratedAttribute]
public void set_TargetPath(string value);
    public ITaskItem[] get_ZipItems();
    public ITaskItem[] get_ZipProjects();
    public virtual bool Execute();
    private List`1<ITaskItem> ProcessVSTemplateFile(XDocument vsTemplate, List`1<ITaskItem> filesInVSTemplate, string subPath);
    protected internal virtual XDocument LoadXDocument(string document);
    private void RecurseTemplateContent(XElement root, List`1& filesInVSTemplate, string subPath);
}
internal interface Microsoft.VisualStudio.Sdk.BuildTasks.IRegistryKey {
    public abstract virtual IRegistryKey OpenSubKey(string name);
    public abstract virtual object GetValue(string name);
}
public interface Microsoft.VisualStudio.Sdk.BuildTasks.IVsixUtilCommand {
    public string CommandName { get; }
    public VsixUtilBase VsixUtilTask { get; }
    public abstract virtual string get_CommandName();
    public abstract virtual VsixUtilBase get_VsixUtilTask();
    public abstract virtual string GenerateCommandLineCommands();
    public abstract virtual int PostExecution(int toolResult);
    public abstract virtual bool SkipExecution();
    public abstract virtual bool ValidateParameters();
}
internal static class Microsoft.VisualStudio.Sdk.BuildTasks.KnownFileExtensions : object {
    internal static string VsixManifest;
    internal static string Xml;
    internal static string Txt;
    internal static string Json;
    internal static string Pkgdef;
    internal static string Pdf;
    internal static string Htm;
    internal static string Html;
    internal static string Rtf;
    internal static string Vsix;
    internal static string Zip;
    internal static string Jpg;
    internal static string Jpeg;
    internal static string Gif;
    internal static string Tiff;
}
internal enum Microsoft.VisualStudio.Sdk.BuildTasks.ManifestType : Enum {
    public int value__;
    public static ManifestType Unknown;
    public static ManifestType Vsix;
    public static ManifestType VsixLangPack;
    public static ManifestType PackageManifest;
    public static ManifestType PackageLanguagePackManifest;
}
internal class Microsoft.VisualStudio.Sdk.BuildTasks.MergeCtoCommand : VsixUtilCommandBase {
    internal static string ResourceBackupFileExtension;
    public string CommandName { get; }
    protected MergeCtoCommand(VsixUtilBase vsixUtilTask);
    public virtual string get_CommandName();
    internal static MergeCtoCommand Create(VsixUtilBase vsixUtilTask);
    public virtual string GenerateCommandLineCommands();
    public virtual bool SkipExecution();
    public virtual bool ValidateParameters();
    public virtual int PostExecution(int toolResult);
    private void UpdateTemporaryFilesCreatedByCommand();
    private bool SkipExecutionCore();
}
internal class Microsoft.VisualStudio.Sdk.BuildTasks.PackageCommand : VsixUtilCommandBase {
    private static string CultureMetadataName;
    public string CommandName { get; }
    protected PackageCommand(VsixUtilBase vsixUtilTask);
    public virtual string get_CommandName();
    internal static PackageCommand Create(VsixUtilBase vsixUtilTask);
    public virtual string GenerateCommandLineCommands();
    public virtual int PostExecution(int toolResult);
    public virtual bool SkipExecution();
    public virtual bool ValidateParameters();
    private DateTime GetLatestOutputWriteTime();
    private bool TryLoadResourcePackagesManifest(ResourcePackageOptions& resourcePackageOptions);
}
public class Microsoft.VisualStudio.Sdk.BuildTasks.ReadInfoFromVsixManifest : Task {
    [CompilerGeneratedAttribute]
private ITaskItem <VsixManifest>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ProjectName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <VsixName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <VsixId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <VsixVersion>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <PackagePaths>k__BackingField;
    [CompilerGeneratedAttribute]
private ITaskItem[] <TargetVersions>k__BackingField;
    [RequiredAttribute]
public ITaskItem VsixManifest { get; public set; }
    [RequiredAttribute]
public string ProjectName { get; public set; }
    [OutputAttribute]
public string VsixName { get; private set; }
    [OutputAttribute]
public string VsixId { get; private set; }
    [OutputAttribute]
public string VsixVersion { get; private set; }
    [OutputAttribute]
public String[] PackagePaths { get; private set; }
    [OutputAttribute]
public ITaskItem[] TargetVersions { get; private set; }
    [CompilerGeneratedAttribute]
public ITaskItem get_VsixManifest();
    [CompilerGeneratedAttribute]
public void set_VsixManifest(ITaskItem value);
    [CompilerGeneratedAttribute]
public string get_ProjectName();
    [CompilerGeneratedAttribute]
public void set_ProjectName(string value);
    [CompilerGeneratedAttribute]
public string get_VsixName();
    [CompilerGeneratedAttribute]
private void set_VsixName(string value);
    [CompilerGeneratedAttribute]
public string get_VsixId();
    [CompilerGeneratedAttribute]
private void set_VsixId(string value);
    [CompilerGeneratedAttribute]
public string get_VsixVersion();
    [CompilerGeneratedAttribute]
private void set_VsixVersion(string value);
    [CompilerGeneratedAttribute]
public String[] get_PackagePaths();
    [CompilerGeneratedAttribute]
private void set_PackagePaths(String[] value);
    [CompilerGeneratedAttribute]
public ITaskItem[] get_TargetVersions();
    [CompilerGeneratedAttribute]
private void set_TargetVersions(ITaskItem[] value);
    public virtual bool Execute();
    protected virtual XDocument DeserializeManifest(string manifestPath);
    private void ParseVsixManifestType(XDocument xdoc);
    private void ParsePackageManifestType(XDocument xdoc);
}
public class Microsoft.VisualStudio.Sdk.BuildTasks.ReadReferencesFromVsixManifest : Task {
    private static string DebugTaskEnvVar;
    [CompilerGeneratedAttribute]
private ITaskItem <InputFile>k__BackingField;
    [CompilerGeneratedAttribute]
private string <CurrentProjectName>k__BackingField;
    [CompilerGeneratedAttribute]
private ITaskItem[] <ProjectReferences>k__BackingField;
    [CompilerGeneratedAttribute]
private ITaskItem[] <ProjectReferencesToResolve>k__BackingField;
    [RequiredAttribute]
public ITaskItem InputFile { get; public set; }
    [RequiredAttribute]
public string CurrentProjectName { get; public set; }
    [RequiredAttribute]
public ITaskItem[] ProjectReferences { get; public set; }
    [OutputAttribute]
public ITaskItem[] ProjectReferencesToResolve { get; private set; }
    public virtual bool Execute();
    protected virtual XDocument XDocumentLoad(string path);
    internal static void PromptForAttachIfNecessary();
    [CompilerGeneratedAttribute]
public ITaskItem get_InputFile();
    [CompilerGeneratedAttribute]
public void set_InputFile(ITaskItem value);
    [CompilerGeneratedAttribute]
public string get_CurrentProjectName();
    [CompilerGeneratedAttribute]
public void set_CurrentProjectName(string value);
    [CompilerGeneratedAttribute]
public ITaskItem[] get_ProjectReferences();
    [CompilerGeneratedAttribute]
public void set_ProjectReferences(ITaskItem[] value);
    [CompilerGeneratedAttribute]
public ITaskItem[] get_ProjectReferencesToResolve();
    [CompilerGeneratedAttribute]
private void set_ProjectReferencesToResolve(ITaskItem[] value);
}
internal class Microsoft.VisualStudio.Sdk.BuildTasks.RegistryKeyWrapper : object {
    private RegistryKey realKey;
    internal static IRegistryKey MachineDefaultLocalMachine;
    internal static IRegistryKey MachineDefaultCurrentUser;
    internal static IRegistryKey LocalMachine;
    internal static IRegistryKey CurrentUser;
    private bool disposed;
    private RegistryKeyWrapper(RegistryKey realKey);
    private static RegistryKeyWrapper();
    public sealed virtual IRegistryKey OpenSubKey(string name);
    public sealed virtual object GetValue(string name);
    public sealed virtual void Dispose();
    protected virtual void Dispose(bool disposing);
}
internal static class Microsoft.VisualStudio.Sdk.BuildTasks.SharedConstants : object {
    public static string ReferenceStringMetadataName;
    public static string UseAssemblyNameMetadataName;
    public static string UseLiteralNameMetadataName;
    public static string VsixSubPathMetadataName;
    public static string VsPackageTypeName;
    public static string ToolboxControlTypeName;
    public static string TargetPathMetadataName;
    public static string ExtensionManifestFileName;
    public static string ExtensionLangPackFileName;
}
public class Microsoft.VisualStudio.Sdk.BuildTasks.SplitIncludeOutputGroupsInVSIX : Task {
    [CompilerGeneratedAttribute]
private string <OutputGroupFilter>k__BackingField;
    [CompilerGeneratedAttribute]
private ITaskItem[] <ProjectReferences>k__BackingField;
    [CompilerGeneratedAttribute]
private ITaskItem[] <FilteredGroups>k__BackingField;
    [CompilerGeneratedAttribute]
private ITaskItem[] <UnfilteredGroups>k__BackingField;
    [RequiredAttribute]
public string OutputGroupFilter { get; public set; }
    [RequiredAttribute]
public ITaskItem[] ProjectReferences { get; public set; }
    [OutputAttribute]
public ITaskItem[] FilteredGroups { get; private set; }
    [OutputAttribute]
public ITaskItem[] UnfilteredGroups { get; private set; }
    [CompilerGeneratedAttribute]
public string get_OutputGroupFilter();
    [CompilerGeneratedAttribute]
public void set_OutputGroupFilter(string value);
    [CompilerGeneratedAttribute]
public ITaskItem[] get_ProjectReferences();
    [CompilerGeneratedAttribute]
public void set_ProjectReferences(ITaskItem[] value);
    [CompilerGeneratedAttribute]
public ITaskItem[] get_FilteredGroups();
    [CompilerGeneratedAttribute]
private void set_FilteredGroups(ITaskItem[] value);
    [CompilerGeneratedAttribute]
public ITaskItem[] get_UnfilteredGroups();
    [CompilerGeneratedAttribute]
private void set_UnfilteredGroups(ITaskItem[] value);
    public virtual bool Execute();
}
public class Microsoft.VisualStudio.Sdk.BuildTasks.Tasks.GenerateResourceAndCtoFileManifests : Task {
    [CompilerGeneratedAttribute]
private ITaskItem <CtoCacheFile>k__BackingField;
    [CompilerGeneratedAttribute]
private ITaskItem <CtoFileManifest>k__BackingField;
    [CompilerGeneratedAttribute]
private ITaskItem[] <CtoFilesWithCulture>k__BackingField;
    [CompilerGeneratedAttribute]
private ITaskItem[] <CtoFilesWithNoCulture>k__BackingField;
    [CompilerGeneratedAttribute]
private ITaskItem <ResourceManifest>k__BackingField;
    [CompilerGeneratedAttribute]
private ITaskItem[] <ResourcesToMerge>k__BackingField;
    [RequiredAttribute]
public ITaskItem CtoCacheFile { get; public set; }
    [RequiredAttribute]
[OutputAttribute]
public ITaskItem CtoFileManifest { get; public set; }
    [RequiredAttribute]
public ITaskItem[] CtoFilesWithCulture { get; public set; }
    [RequiredAttribute]
public ITaskItem[] CtoFilesWithNoCulture { get; public set; }
    [RequiredAttribute]
[OutputAttribute]
public ITaskItem ResourceManifest { get; public set; }
    [RequiredAttribute]
public ITaskItem[] ResourcesToMerge { get; public set; }
    [CompilerGeneratedAttribute]
public ITaskItem get_CtoCacheFile();
    [CompilerGeneratedAttribute]
public void set_CtoCacheFile(ITaskItem value);
    [CompilerGeneratedAttribute]
public ITaskItem get_CtoFileManifest();
    [CompilerGeneratedAttribute]
public void set_CtoFileManifest(ITaskItem value);
    [CompilerGeneratedAttribute]
public ITaskItem[] get_CtoFilesWithCulture();
    [CompilerGeneratedAttribute]
public void set_CtoFilesWithCulture(ITaskItem[] value);
    [CompilerGeneratedAttribute]
public ITaskItem[] get_CtoFilesWithNoCulture();
    [CompilerGeneratedAttribute]
public void set_CtoFilesWithNoCulture(ITaskItem[] value);
    [CompilerGeneratedAttribute]
public ITaskItem get_ResourceManifest();
    [CompilerGeneratedAttribute]
public void set_ResourceManifest(ITaskItem value);
    [CompilerGeneratedAttribute]
public ITaskItem[] get_ResourcesToMerge();
    [CompilerGeneratedAttribute]
public void set_ResourcesToMerge(ITaskItem[] value);
    public virtual bool Execute();
    internal ResourceList GenerateResourceList();
    internal CtoFileList GenerateCtoFileList();
    protected virtual bool IsResourceListUpToDate(ResourceList resources);
    protected virtual bool IsCtoFileListUpToDate(CtoFileList ctoFileList);
    protected virtual void WriteResourceList(string jsonString);
    protected virtual void WriteCtoFileList(string jsonString);
}
public class Microsoft.VisualStudio.Sdk.BuildTasks.Unzip : Task {
    private static string ContentTypesFilename;
    private static string ExtensionManifestFilename;
    [CompilerGeneratedAttribute]
private string <ZipFile>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TargetDirectory>k__BackingField;
    [RequiredAttribute]
public string ZipFile { get; public set; }
    [RequiredAttribute]
public string TargetDirectory { get; public set; }
    internal Unzip(string zipFile, string targetDirectory);
    [CompilerGeneratedAttribute]
public string get_ZipFile();
    [CompilerGeneratedAttribute]
public void set_ZipFile(string value);
    [CompilerGeneratedAttribute]
public string get_TargetDirectory();
    [CompilerGeneratedAttribute]
public void set_TargetDirectory(string value);
    public virtual bool Execute();
}
[ExtensionAttribute]
internal static class Microsoft.VisualStudio.Sdk.BuildTasks.Utilities : object {
    internal static string HelpKeywordPrefix;
    [ExtensionAttribute]
public static XPathElement Element(XPathNavigator nav);
    [IteratorStateMachineAttribute("Microsoft.VisualStudio.Sdk.BuildTasks.Utilities/<ElementEx>d__2")]
[ExtensionAttribute]
public static IEnumerable`1<XElement> ElementEx(XContainer container, XName name);
    [IteratorStateMachineAttribute("Microsoft.VisualStudio.Sdk.BuildTasks.Utilities/<ElementEx>d__3")]
[ExtensionAttribute]
public static IEnumerable`1<XElement> ElementEx(IEnumerable`1<XElement> elements, XName name);
    [ExtensionAttribute]
public static string GetAttributeValue(XElement element, XName attributeName);
    internal static bool IsIOException(Exception e);
    [ExtensionAttribute]
internal static void LogVSSDKErrorWithCode(TaskLoggingHelper log, string resourceName, string unformattedMessage, Object[] args);
    internal static string GetPropertyName(Expression`1<Func`1<T>> expression);
    [ExtensionAttribute]
internal static void LogVSSDKWarningWithCode(TaskLoggingHelper log, string resourceName, string unformattedMessage, Object[] args);
    internal static bool IsCriticalException(Exception e);
    internal static void CopyStream(Stream input, Stream output);
    public static string RemoveMultiplePathSeparators(string vsixSubPath);
    internal static string GenerateExceptionMessage(Exception e);
    internal static bool AreAnyFilesTemplateFiles(FileList files);
    internal static DateTime MaxDateTime(DateTime dateTimeA, DateTime dateTimeB);
    internal static string SafeDirectoryPath(string path);
    internal static string EnsureTrailingSlash(string path);
}
public abstract class Microsoft.VisualStudio.Sdk.BuildTasks.VSCTCompilerBase : ToolTask {
    [CompilerGeneratedAttribute]
private ITaskItem <Source>k__BackingField;
    [CompilerGeneratedAttribute]
private string <OutputFile>k__BackingField;
    [CompilerGeneratedAttribute]
private string <IntermediateDirectory>k__BackingField;
    [CompilerGeneratedAttribute]
private int <CodePage>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <AdditionalIncludeDirectories>k__BackingField;
    [CompilerGeneratedAttribute]
private CultureInfo <CultureInfo>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <Definitions>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <EmitCS>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <EmitHeader>k__BackingField;
    [CompilerGeneratedAttribute]
private string <PreProcessor>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <NoLogo>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Verbose>k__BackingField;
    [CompilerGeneratedAttribute]
private ITaskItem[] <TemporaryFiles>k__BackingField;
    private VSCTDependencyLogger dependencyLogger;
    [RequiredAttribute]
public ITaskItem Source { get; public set; }
    [RequiredAttribute]
public string OutputFile { get; public set; }
    [RequiredAttribute]
public string IntermediateDirectory { get; public set; }
    public int CodePage { get; public set; }
    public string Culture { get; public set; }
    public String[] AdditionalIncludeDirectories { get; public set; }
    public CultureInfo CultureInfo { get; public set; }
    public String[] Definitions { get; public set; }
    public bool EmitCS { get; public set; }
    public bool EmitHeader { get; public set; }
    public string PreProcessor { get; public set; }
    public bool NoLogo { get; public set; }
    public bool Verbose { get; public set; }
    [OutputAttribute]
public ITaskItem[] TemporaryFiles { get; public set; }
    protected string ToolName { get; }
    protected MessageImportance StandardErrorLoggingImportance { get; }
    protected MessageImportance StandardOutputLoggingImportance { get; }
    [CompilerGeneratedAttribute]
public ITaskItem get_Source();
    [CompilerGeneratedAttribute]
public void set_Source(ITaskItem value);
    [CompilerGeneratedAttribute]
public string get_OutputFile();
    [CompilerGeneratedAttribute]
public void set_OutputFile(string value);
    [CompilerGeneratedAttribute]
public string get_IntermediateDirectory();
    [CompilerGeneratedAttribute]
public void set_IntermediateDirectory(string value);
    [CompilerGeneratedAttribute]
public int get_CodePage();
    [CompilerGeneratedAttribute]
public void set_CodePage(int value);
    public string get_Culture();
    public void set_Culture(string value);
    [CompilerGeneratedAttribute]
public String[] get_AdditionalIncludeDirectories();
    [CompilerGeneratedAttribute]
public void set_AdditionalIncludeDirectories(String[] value);
    [CompilerGeneratedAttribute]
public CultureInfo get_CultureInfo();
    [CompilerGeneratedAttribute]
public void set_CultureInfo(CultureInfo value);
    [CompilerGeneratedAttribute]
public String[] get_Definitions();
    [CompilerGeneratedAttribute]
public void set_Definitions(String[] value);
    [CompilerGeneratedAttribute]
public bool get_EmitCS();
    [CompilerGeneratedAttribute]
public void set_EmitCS(bool value);
    [CompilerGeneratedAttribute]
public bool get_EmitHeader();
    [CompilerGeneratedAttribute]
public void set_EmitHeader(bool value);
    [CompilerGeneratedAttribute]
public string get_PreProcessor();
    [CompilerGeneratedAttribute]
public void set_PreProcessor(string value);
    [CompilerGeneratedAttribute]
public bool get_NoLogo();
    [CompilerGeneratedAttribute]
public void set_NoLogo(bool value);
    [CompilerGeneratedAttribute]
public bool get_Verbose();
    [CompilerGeneratedAttribute]
public void set_Verbose(bool value);
    [CompilerGeneratedAttribute]
public ITaskItem[] get_TemporaryFiles();
    [CompilerGeneratedAttribute]
public void set_TemporaryFiles(ITaskItem[] value);
    protected virtual int ExecuteTool(string pathToTool, string responseFileCommands, string commandLineCommands);
    protected virtual string GenerateResponseFileCommands();
    protected virtual bool SkipTaskExecution();
    protected virtual string get_ToolName();
    protected virtual MessageImportance get_StandardErrorLoggingImportance();
    protected virtual MessageImportance get_StandardOutputLoggingImportance();
    protected virtual void LogEventsFromTextOutput(string singleLine, MessageImportance messageImportance);
    private void EnsureDependencyLogger();
    private static void AddArgumentToResponseFile(StringBuilder commandBuilder, string arg);
    private static void AddArgumentToResponseFile(StringBuilder commandBuilder, string name, string value);
    private static void AddArgumentsToResponseFile(StringBuilder commandBuilder, string name, String[] values);
    public sealed virtual void WriteLine(string message);
}
public abstract class Microsoft.VisualStudio.Sdk.BuildTasks.VsixUtilBase : ToolTask {
    internal static string ResourceBackupFileExtension;
    private VsixUtilCommandFactory vsixUtilCommandFactory;
    private IVsixUtilCommand vsixUtilCommand;
    [CompilerGeneratedAttribute]
private bool <AreDependenciesSetOnPackage>k__BackingField;
    [CompilerGeneratedAttribute]
private ITaskItem <CacheFile>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Command>k__BackingField;
    [CompilerGeneratedAttribute]
private ITaskItem <ComponentJson>k__BackingField;
    [CompilerGeneratedAttribute]
private ITaskItem <ComponentManifest>k__BackingField;
    [CompilerGeneratedAttribute]
private string <CompressionLevel>k__BackingField;
    [CompilerGeneratedAttribute]
private ITaskItem <CtoFileManifest>k__BackingField;
    [CompilerGeneratedAttribute]
private ITaskItem <ContentManifest>k__BackingField;
    [CompilerGeneratedAttribute]
private ITaskItem <FilesManifest>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Is64BitBuild>k__BackingField;
    [CompilerGeneratedAttribute]
private string <SetupProductArch>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <GenerateSBOMContentList>k__BackingField;
    [CompilerGeneratedAttribute]
private ITaskItem[] <GeneratedResourcePackages>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <GeneratedTemplateFilesManifest>k__BackingField;
    [CompilerGeneratedAttribute]
private string <InstallationFolder>k__BackingField;
    [CompilerGeneratedAttribute]
private string <InstallationRoot>k__BackingField;
    [CompilerGeneratedAttribute]
private string <IntermediateDirectory>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsProductComponent>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Legacy>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <NoValidate>k__BackingField;
    [CompilerGeneratedAttribute]
private ITaskItem <ResourceManifest>k__BackingField;
    [CompilerGeneratedAttribute]
private ITaskItem <ResourcePackagesManifest>k__BackingField;
    [CompilerGeneratedAttribute]
private ITaskItem <SourceManifest>k__BackingField;
    [CompilerGeneratedAttribute]
private ITaskItem <TemplateOutputDirectory>k__BackingField;
    [CompilerGeneratedAttribute]
private ITaskItem <TemplateOutputFileManifest>k__BackingField;
    [CompilerGeneratedAttribute]
private ITaskItem[] <TemporaryFilesCreatedByCommand>k__BackingField;
    [CompilerGeneratedAttribute]
private string <VsixSchemaPath>k__BackingField;
    [CompilerGeneratedAttribute]
private ITaskItem <ZipPackage>k__BackingField;
    protected string ToolName { get; }
    protected MessageImportance StandardErrorLoggingImportance { get; }
    protected MessageImportance StandardOutputLoggingImportance { get; }
    public bool AreDependenciesSetOnPackage { get; public set; }
    [OutputAttribute]
public ITaskItem CacheFile { get; public set; }
    [RequiredAttribute]
public string Command { get; public set; }
    public ITaskItem ComponentJson { get; public set; }
    public ITaskItem ComponentManifest { get; public set; }
    public string CompressionLevel { get; public set; }
    public ITaskItem CtoFileManifest { get; public set; }
    public ITaskItem ContentManifest { get; public set; }
    public ITaskItem FilesManifest { get; public set; }
    public bool Is64BitBuild { get; public set; }
    public string SetupProductArch { get; public set; }
    public bool GenerateSBOMContentList { get; public set; }
    [OutputAttribute]
public ITaskItem[] GeneratedResourcePackages { get; public set; }
    [OutputAttribute]
public bool GeneratedTemplateFilesManifest { get; public set; }
    public string InstallationFolder { get; public set; }
    public string InstallationRoot { get; public set; }
    public string IntermediateDirectory { get; public set; }
    public bool IsProductComponent { get; public set; }
    public bool Legacy { get; public set; }
    public bool NoValidate { get; public set; }
    public ITaskItem ResourceManifest { get; public set; }
    public ITaskItem ResourcePackagesManifest { get; public set; }
    public ITaskItem SourceManifest { get; public set; }
    public ITaskItem TemplateOutputDirectory { get; public set; }
    [OutputAttribute]
public ITaskItem TemplateOutputFileManifest { get; public set; }
    [OutputAttribute]
public ITaskItem[] TemporaryFilesCreatedByCommand { get; public set; }
    public string VsixSchemaPath { get; public set; }
    [OutputAttribute]
public ITaskItem ZipPackage { get; public set; }
    protected IVsixUtilCommand VsixUtilCommand { get; }
    internal VsixUtilBase(VsixUtilCommandFactory factory);
    protected virtual string get_ToolName();
    protected virtual MessageImportance get_StandardErrorLoggingImportance();
    protected virtual MessageImportance get_StandardOutputLoggingImportance();
    [CompilerGeneratedAttribute]
public bool get_AreDependenciesSetOnPackage();
    [CompilerGeneratedAttribute]
public void set_AreDependenciesSetOnPackage(bool value);
    [CompilerGeneratedAttribute]
public ITaskItem get_CacheFile();
    [CompilerGeneratedAttribute]
public void set_CacheFile(ITaskItem value);
    [CompilerGeneratedAttribute]
public string get_Command();
    [CompilerGeneratedAttribute]
public void set_Command(string value);
    [CompilerGeneratedAttribute]
public ITaskItem get_ComponentJson();
    [CompilerGeneratedAttribute]
public void set_ComponentJson(ITaskItem value);
    [CompilerGeneratedAttribute]
public ITaskItem get_ComponentManifest();
    [CompilerGeneratedAttribute]
public void set_ComponentManifest(ITaskItem value);
    [CompilerGeneratedAttribute]
public string get_CompressionLevel();
    [CompilerGeneratedAttribute]
public void set_CompressionLevel(string value);
    [CompilerGeneratedAttribute]
public ITaskItem get_CtoFileManifest();
    [CompilerGeneratedAttribute]
public void set_CtoFileManifest(ITaskItem value);
    [CompilerGeneratedAttribute]
public ITaskItem get_ContentManifest();
    [CompilerGeneratedAttribute]
public void set_ContentManifest(ITaskItem value);
    [CompilerGeneratedAttribute]
public ITaskItem get_FilesManifest();
    [CompilerGeneratedAttribute]
public void set_FilesManifest(ITaskItem value);
    [CompilerGeneratedAttribute]
public bool get_Is64BitBuild();
    [CompilerGeneratedAttribute]
public void set_Is64BitBuild(bool value);
    [CompilerGeneratedAttribute]
public string get_SetupProductArch();
    [CompilerGeneratedAttribute]
public void set_SetupProductArch(string value);
    [CompilerGeneratedAttribute]
public bool get_GenerateSBOMContentList();
    [CompilerGeneratedAttribute]
public void set_GenerateSBOMContentList(bool value);
    [CompilerGeneratedAttribute]
public ITaskItem[] get_GeneratedResourcePackages();
    [CompilerGeneratedAttribute]
public void set_GeneratedResourcePackages(ITaskItem[] value);
    [CompilerGeneratedAttribute]
public bool get_GeneratedTemplateFilesManifest();
    [CompilerGeneratedAttribute]
public void set_GeneratedTemplateFilesManifest(bool value);
    [CompilerGeneratedAttribute]
public string get_InstallationFolder();
    [CompilerGeneratedAttribute]
public void set_InstallationFolder(string value);
    [CompilerGeneratedAttribute]
public string get_InstallationRoot();
    [CompilerGeneratedAttribute]
public void set_InstallationRoot(string value);
    [CompilerGeneratedAttribute]
public string get_IntermediateDirectory();
    [CompilerGeneratedAttribute]
public void set_IntermediateDirectory(string value);
    [CompilerGeneratedAttribute]
public bool get_IsProductComponent();
    [CompilerGeneratedAttribute]
public void set_IsProductComponent(bool value);
    [CompilerGeneratedAttribute]
public bool get_Legacy();
    [CompilerGeneratedAttribute]
public void set_Legacy(bool value);
    [CompilerGeneratedAttribute]
public bool get_NoValidate();
    [CompilerGeneratedAttribute]
public void set_NoValidate(bool value);
    [CompilerGeneratedAttribute]
public ITaskItem get_ResourceManifest();
    [CompilerGeneratedAttribute]
public void set_ResourceManifest(ITaskItem value);
    [CompilerGeneratedAttribute]
public ITaskItem get_ResourcePackagesManifest();
    [CompilerGeneratedAttribute]
public void set_ResourcePackagesManifest(ITaskItem value);
    [CompilerGeneratedAttribute]
public ITaskItem get_SourceManifest();
    [CompilerGeneratedAttribute]
public void set_SourceManifest(ITaskItem value);
    [CompilerGeneratedAttribute]
public ITaskItem get_TemplateOutputDirectory();
    [CompilerGeneratedAttribute]
public void set_TemplateOutputDirectory(ITaskItem value);
    [CompilerGeneratedAttribute]
public ITaskItem get_TemplateOutputFileManifest();
    [CompilerGeneratedAttribute]
public void set_TemplateOutputFileManifest(ITaskItem value);
    [CompilerGeneratedAttribute]
public ITaskItem[] get_TemporaryFilesCreatedByCommand();
    [CompilerGeneratedAttribute]
public void set_TemporaryFilesCreatedByCommand(ITaskItem[] value);
    [CompilerGeneratedAttribute]
public string get_VsixSchemaPath();
    [CompilerGeneratedAttribute]
public void set_VsixSchemaPath(string value);
    [CompilerGeneratedAttribute]
public ITaskItem get_ZipPackage();
    [CompilerGeneratedAttribute]
public void set_ZipPackage(ITaskItem value);
    protected IVsixUtilCommand get_VsixUtilCommand();
    internal virtual void FileCreate(string filePath);
    internal virtual bool FileExists(string filePath);
    internal virtual DateTime GetLastWriteTimeUtc(string filePath);
    internal virtual string ReadFile(string filePath);
    internal virtual void SetLastWriteTimeUtc(string filePath, DateTime dateTime);
    protected virtual int ExecuteTool(string pathToTool, string responseFileCommands, string commandLineCommands);
    protected virtual string GenerateCommandLineCommands();
    protected virtual bool SkipTaskExecution();
    protected virtual bool ValidateParameters();
    protected virtual int ExecuteToolCore(string pathToTool, string responseFileCommands, string commandLineCommands);
}
internal abstract class Microsoft.VisualStudio.Sdk.BuildTasks.VsixUtilCommandBase : object {
    [CompilerGeneratedAttribute]
private VsixUtilBase <VsixUtilTask>k__BackingField;
    public VsixUtilBase VsixUtilTask { get; }
    public string CommandName { get; }
    public VsixUtilCommandBase(VsixUtilBase vsixUtilTask);
    [CompilerGeneratedAttribute]
public sealed virtual VsixUtilBase get_VsixUtilTask();
    public abstract virtual string get_CommandName();
    public abstract virtual string GenerateCommandLineCommands();
    public virtual int PostExecution(int toolResult);
    public abstract virtual bool SkipExecution();
    public abstract virtual bool ValidateParameters();
    protected virtual bool TryUpdateCacheFile();
}
internal class Microsoft.VisualStudio.Sdk.BuildTasks.VsixUtilCommandFactory : object {
    private static Dictionary`2<string, Func`2<VsixUtilBase, IVsixUtilCommand>> DefaultCommands;
    private Dictionary`2<string, Func`2<VsixUtilBase, IVsixUtilCommand>> commands;
    internal VsixUtilCommandFactory(Dictionary`2<string, Func`2<VsixUtilBase, IVsixUtilCommand>> commands);
    private static VsixUtilCommandFactory();
    internal IVsixUtilCommand GetCommand(string commandName, VsixUtilBase vsixUtilBase);
}
public abstract class Microsoft.VisualStudio.Sdk.BuildTasks.VsSDKTaskBase : Task {
    private static string DebugTaskEnvVar;
    private static bool CreatedAssemblyResolver;
    public IEnumerable`1<string> VSProbingPaths { get; }
    public VsSDKTaskBase(ResourceManager taskResources);
    public VsSDKTaskBase(ResourceManager taskResources, string helpKeywordPrefix);
    public abstract virtual IEnumerable`1<string> get_VSProbingPaths();
    internal static int MessageBox(IntPtr parent, string text, string caption, UInt32 flags);
    internal static void PromptForAttachIfNecessary();
    private Assembly TryResolveVSAssemblies(object sender, ResolveEventArgs args);
}
public class Microsoft.VisualStudio.Sdk.BuildTasks.XPathElement : XElement {
    public XPathElement(XName name, Object[] content);
    protected XPathElement(XPathElement element);
    public virtual bool Match(XPathNavigator navigator);
    public virtual XPathElement Clone();
}
public class Microsoft.VisualStudio.Sdk.BuildTasks.ZipItems : Task {
    private string action;
    private String[] files;
    private string outputSubPath;
    private string projectPath;
    private string rootPath;
    private string culture;
    private string zipLanguage;
    private string zipDefaultLanguage;
    private ITaskItem zipFile;
    public string Action { get; public set; }
    public String[] Files { get; public set; }
    public string Culture { get; public set; }
    public string OutputSubPath { get; public set; }
    [RequiredAttribute]
public string ProjectPath { get; public set; }
    public string RootPath { get; public set; }
    public string ZipLanguage { get; public set; }
    public string ZipDefaultLanguage { get; public set; }
    [RequiredAttribute]
[OutputAttribute]
public ITaskItem ZipFile { get; public set; }
    public string get_Action();
    public void set_Action(string value);
    public String[] get_Files();
    public void set_Files(String[] value);
    public string get_Culture();
    public void set_Culture(string value);
    public string get_OutputSubPath();
    public void set_OutputSubPath(string value);
    public string get_ProjectPath();
    public void set_ProjectPath(string value);
    public string get_RootPath();
    public void set_RootPath(string value);
    public string get_ZipLanguage();
    public void set_ZipLanguage(string value);
    public string get_ZipDefaultLanguage();
    public void set_ZipDefaultLanguage(string value);
    public ITaskItem get_ZipFile();
    public void set_ZipFile(ITaskItem value);
    public virtual bool Execute();
    private bool PropertiesAreValid();
    private bool ZipFileIsOutOfDate();
    private bool AddFiles(bool deleteIfOutputExists);
    private List`1<ZipItem> GetRelativePaths();
    private bool TryGetRelativePath(string filePath, string expectedRootPath, String& relativePath);
}
internal static class Microsoft.VisualStudio.Sdk.CommonUtilities : object {
    internal static string DefaultInstallRoot;
    internal static string InstallRootDelimeter;
    internal static string VSTemplateExtension;
    internal static string VSTDirExtension;
    internal static string ZipExtension;
    internal static bool ContentFileIsATemplateFile(ContentFile contentFile);
    internal static bool ContentFileIsATemplateZip(ContentFile contentFile);
    internal static bool IsZipTemplate(string vsixSubPath);
    internal static string GetPackagePathForContentFile(ContentFile contentFile, bool legacyMode, IAllowedInstallationFolders installationFolders, string targetExtensionDir);
    internal static string PrependDelimeterToInstallRoot(string installRoot);
    internal static bool UsesFolderMapping(ContentFile contentFile);
    internal static bool IsValidFolderMapping(ContentFile contentFile, IAllowedInstallationFolders installationFolders);
    internal static bool UsesValidFolderMapping(ContentFile contentFile, IAllowedInstallationFolders installationFolders);
}
public class Microsoft.VisualStudio.Sdk.ContentFile : object {
    [CompilerGeneratedAttribute]
private string <Culture>k__BackingField;
    [CompilerGeneratedAttribute]
private string <InstallRoot>k__BackingField;
    [CompilerGeneratedAttribute]
private NgenData <Ngen>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Path>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TargetPath>k__BackingField;
    [CompilerGeneratedAttribute]
private string <VsixSubPath>k__BackingField;
    [JsonPropertyAttribute("culture")]
public string Culture { get; public set; }
    [JsonPropertyAttribute("installRoot")]
public string InstallRoot { get; public set; }
    [JsonPropertyAttribute("ngen")]
public NgenData Ngen { get; public set; }
    [JsonPropertyAttribute("path")]
public string Path { get; public set; }
    [JsonPropertyAttribute("targetPath")]
public string TargetPath { get; public set; }
    [JsonPropertyAttribute("vsixSubPath")]
public string VsixSubPath { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Culture();
    [CompilerGeneratedAttribute]
public void set_Culture(string value);
    [CompilerGeneratedAttribute]
public string get_InstallRoot();
    [CompilerGeneratedAttribute]
public void set_InstallRoot(string value);
    [CompilerGeneratedAttribute]
public NgenData get_Ngen();
    [CompilerGeneratedAttribute]
public void set_Ngen(NgenData value);
    [CompilerGeneratedAttribute]
public string get_Path();
    [CompilerGeneratedAttribute]
public void set_Path(string value);
    [CompilerGeneratedAttribute]
public string get_TargetPath();
    [CompilerGeneratedAttribute]
public void set_TargetPath(string value);
    [CompilerGeneratedAttribute]
public string get_VsixSubPath();
    [CompilerGeneratedAttribute]
public void set_VsixSubPath(string value);
    public virtual bool Equals(object obj);
    public sealed virtual bool Equals(ContentFile other);
    public virtual int GetHashCode();
}
public class Microsoft.VisualStudio.Sdk.CtoFile : object {
    [CompilerGeneratedAttribute]
private string <Path>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Culture>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ResourceName>k__BackingField;
    [JsonPropertyAttribute("path")]
public string Path { get; public set; }
    [JsonPropertyAttribute("culture")]
public string Culture { get; public set; }
    [JsonPropertyAttribute("resourceName")]
public string ResourceName { get; public set; }
    public CtoFile(string path, string culture, string resourceName);
    [CompilerGeneratedAttribute]
public string get_Path();
    [CompilerGeneratedAttribute]
public void set_Path(string value);
    [CompilerGeneratedAttribute]
public string get_Culture();
    [CompilerGeneratedAttribute]
public void set_Culture(string value);
    [CompilerGeneratedAttribute]
public string get_ResourceName();
    [CompilerGeneratedAttribute]
public void set_ResourceName(string value);
}
public class Microsoft.VisualStudio.Sdk.CtoFileList : object {
    [CompilerGeneratedAttribute]
private CtoFile[] <CtoFiles>k__BackingField;
    [JsonPropertyAttribute("ctoFiles")]
public CtoFile[] CtoFiles { get; public set; }
    [CompilerGeneratedAttribute]
public CtoFile[] get_CtoFiles();
    [CompilerGeneratedAttribute]
public void set_CtoFiles(CtoFile[] value);
}
public class Microsoft.VisualStudio.Sdk.FileList : object {
    [CompilerGeneratedAttribute]
private ContentFile[] <Files>k__BackingField;
    [JsonPropertyAttribute("files")]
public ContentFile[] Files { get; public set; }
    [CompilerGeneratedAttribute]
public ContentFile[] get_Files();
    [CompilerGeneratedAttribute]
public void set_Files(ContentFile[] value);
    public virtual bool Equals(object obj);
    public sealed virtual bool Equals(FileList other);
    public virtual int GetHashCode();
}
internal interface Microsoft.VisualStudio.Sdk.IAllowedInstallationFolders {
    public IReadOnlyDictionary`2<string, string> Mappings { get; }
    public IEnumerable`1<string> Names { get; }
    public abstract virtual IReadOnlyDictionary`2<string, string> get_Mappings();
    public abstract virtual IEnumerable`1<string> get_Names();
}
internal class Microsoft.VisualStudio.Sdk.KnownInstallationFolders : object {
    internal static string Default;
    internal static string Licenses;
    internal static string MSBuild;
    internal static string PublicAssemblies;
    internal static string ReferenceAssemblies;
    internal static string RemoteDebugger;
    internal static string Schemas;
    internal static string VCTargets;
    internal static KnownInstallationFolders AllInstallationFolders;
    internal static KnownInstallationFolders CurrentInstallationFolders;
    [CompilerGeneratedAttribute]
private IReadOnlyDictionary`2<string, string> <Mappings>k__BackingField;
    public IReadOnlyDictionary`2<string, string> Mappings { get; private set; }
    public IEnumerable`1<string> Names { get; }
    private KnownInstallationFolders(Dictionary`2<string, string> mappings);
    private static KnownInstallationFolders();
    [CompilerGeneratedAttribute]
public sealed virtual IReadOnlyDictionary`2<string, string> get_Mappings();
    [CompilerGeneratedAttribute]
private void set_Mappings(IReadOnlyDictionary`2<string, string> value);
    public sealed virtual IEnumerable`1<string> get_Names();
}
public class Microsoft.VisualStudio.Sdk.LocalizedDirectory : object {
    [CompilerGeneratedAttribute]
private string <DirectoryPath>k__BackingField;
    [CompilerGeneratedAttribute]
private string <LocaleString>k__BackingField;
    public string DirectoryPath { get; private set; }
    public string LocaleString { get; private set; }
    [CompilerGeneratedAttribute]
public string get_DirectoryPath();
    [CompilerGeneratedAttribute]
private void set_DirectoryPath(string value);
    [CompilerGeneratedAttribute]
public string get_LocaleString();
    [CompilerGeneratedAttribute]
private void set_LocaleString(string value);
    public static LocalizedDirectory Create(string path);
    public virtual bool Equals(object obj);
    public sealed virtual bool Equals(LocalizedDirectory other);
    public virtual int GetHashCode();
}
[ExtensionAttribute]
internal static class Microsoft.VisualStudio.Sdk.LoggerExtensions : object {
    [ExtensionAttribute]
internal static void LogErrorWithCode(TaskLoggingHelper log, Expression`1<Func`1<T>> resourceNameExpression, string unformattedMessage, string helpKeywordPrefix, Object[] args);
    [ExtensionAttribute]
internal static void LogVSSDKErrorWithCode2(TaskLoggingHelper log, string resourceName, string unformattedMessage, string helpKeywordPrefix, Object[] args);
    [ExtensionAttribute]
internal static void LogVSSDKWarningWithCode2(TaskLoggingHelper log, string resourceName, string unformattedMessage, string helpKeywordPrefix, Object[] args);
    [ExtensionAttribute]
internal static void LogWarningWithCode(TaskLoggingHelper log, Expression`1<Func`1<T>> resourceNameExpression, string unformattedMessage, string helpKeywordPrefix, Object[] args);
}
internal static class Microsoft.VisualStudio.Sdk.Names : object {
    internal static XNamespace ManifestNamespace;
    internal static XNamespace ManifestDesignNamespace;
    internal static XName PackageManifest;
    internal static XName PackageLanguagePackManifest;
    internal static XName Metadata;
    internal static XName Installation;
    internal static XName Dependencies;
    internal static XName Assets;
    internal static XName Identity;
    internal static XName PkgId;
    internal static XName ComponentId;
    internal static XName DisplayName;
    internal static XName Description;
    internal static XName MoreInfo;
    internal static XName License;
    internal static XName GettingStartedGuide;
    internal static XName Icon;
    internal static XName PreviewImage;
    internal static XName Tags;
    internal static XName ReleaseNotes;
    internal static XName Asset;
    internal static XName Dependency;
    internal static XName InstallationTarget;
    internal static XName Id;
    internal static XName Installer;
    internal static XName Actions;
    internal static XName Action;
    internal static XName Prerequisites;
    internal static XName Prerequisite;
    internal static XName Path;
    internal static XName Version;
    internal static XName Language;
    internal static XName AllowClientRole;
    internal static XName ProductArchitecture;
    internal static XNamespace VsixLanguagePackNamespace;
    internal static XName VsixLanguagePack;
    internal static XNamespace VsixManifestNamespace;
    internal static XName Vsix;
    internal static XName VsixIdentifier;
    internal static XName VsixId;
    internal static XName VsixName;
    internal static XName VsixVersion;
    internal static XName AllUsers;
    internal static XName TargetVersion;
    internal static XName Type;
    internal static XName PartialManifestType;
    private static Names();
}
public class Microsoft.VisualStudio.Sdk.NgenArchitectureConverter : JsonConverter {
    public virtual bool CanConvert(Type objectType);
    public virtual object ReadJson(JsonReader reader, Type objectType, object existingValue, JsonSerializer serializer);
    public virtual void WriteJson(JsonWriter writer, object value, JsonSerializer serializer);
}
public class Microsoft.VisualStudio.Sdk.NgenData : object {
    [CompilerGeneratedAttribute]
private string <NgenApplication>k__BackingField;
    [CompilerGeneratedAttribute]
private NgenArchitecture <NgenArchitecture>k__BackingField;
    [CompilerGeneratedAttribute]
private int <NgenPriority>k__BackingField;
    [JsonPropertyAttribute("ngenApplication")]
public string NgenApplication { get; public set; }
    [JsonPropertyAttribute("ngenArchitecture")]
public NgenArchitecture NgenArchitecture { get; public set; }
    [JsonPropertyAttribute("ngenPriority")]
public int NgenPriority { get; public set; }
    public NgenData(string ngenApplication, NgenArchitecture ngenArchitecture, int ngenPriority);
    [CompilerGeneratedAttribute]
public string get_NgenApplication();
    [CompilerGeneratedAttribute]
public void set_NgenApplication(string value);
    [CompilerGeneratedAttribute]
public NgenArchitecture get_NgenArchitecture();
    [CompilerGeneratedAttribute]
public void set_NgenArchitecture(NgenArchitecture value);
    [CompilerGeneratedAttribute]
public int get_NgenPriority();
    [CompilerGeneratedAttribute]
public void set_NgenPriority(int value);
    public virtual bool Equals(object obj);
    public sealed virtual bool Equals(NgenData other);
    public virtual int GetHashCode();
}
public class Microsoft.VisualStudio.Sdk.Resource : object {
    [CompilerGeneratedAttribute]
private string <Path>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Culture>k__BackingField;
    [JsonPropertyAttribute("path")]
public string Path { get; public set; }
    [JsonPropertyAttribute("Culture")]
public string Culture { get; public set; }
    public Resource(string path, string culture);
    [CompilerGeneratedAttribute]
public string get_Path();
    [CompilerGeneratedAttribute]
public void set_Path(string value);
    [CompilerGeneratedAttribute]
public string get_Culture();
    [CompilerGeneratedAttribute]
public void set_Culture(string value);
}
public class Microsoft.VisualStudio.Sdk.ResourceList : object {
    [CompilerGeneratedAttribute]
private Resource[] <Resources>k__BackingField;
    [JsonPropertyAttribute("resources")]
public Resource[] Resources { get; public set; }
    [CompilerGeneratedAttribute]
public Resource[] get_Resources();
    [CompilerGeneratedAttribute]
public void set_Resources(Resource[] value);
}
public class Microsoft.VisualStudio.Sdk.ResourcePackageOptions : object {
    [CompilerGeneratedAttribute]
private string <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Version>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DependencyVersionRange>k__BackingField;
    [CompilerGeneratedAttribute]
private ResourcePackageState[] <ResourcePackages>k__BackingField;
    [JsonPropertyAttribute("id")]
public string Id { get; public set; }
    [JsonPropertyAttribute("version")]
public string Version { get; public set; }
    [JsonPropertyAttribute("dependencyVersionRange")]
public string DependencyVersionRange { get; public set; }
    [JsonPropertyAttribute("resourcePackages")]
public ResourcePackageState[] ResourcePackages { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Id();
    [CompilerGeneratedAttribute]
public void set_Id(string value);
    [CompilerGeneratedAttribute]
public string get_Version();
    [CompilerGeneratedAttribute]
public void set_Version(string value);
    [CompilerGeneratedAttribute]
public string get_DependencyVersionRange();
    [CompilerGeneratedAttribute]
public void set_DependencyVersionRange(string value);
    [CompilerGeneratedAttribute]
public ResourcePackageState[] get_ResourcePackages();
    [CompilerGeneratedAttribute]
public void set_ResourcePackages(ResourcePackageState[] value);
}
public class Microsoft.VisualStudio.Sdk.ResourcePackageState : object {
    [CompilerGeneratedAttribute]
private string <Culture>k__BackingField;
    [CompilerGeneratedAttribute]
private string <OutputPath>k__BackingField;
    [CompilerGeneratedAttribute]
private string <FallbackCulture>k__BackingField;
    [JsonPropertyAttribute("culture")]
public string Culture { get; public set; }
    [JsonPropertyAttribute("outputPath")]
public string OutputPath { get; public set; }
    [JsonPropertyAttribute("fallbackCulture")]
[DefaultValueAttribute("")]
public string FallbackCulture { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Culture();
    [CompilerGeneratedAttribute]
public void set_Culture(string value);
    [CompilerGeneratedAttribute]
public string get_OutputPath();
    [CompilerGeneratedAttribute]
public void set_OutputPath(string value);
    [CompilerGeneratedAttribute]
public string get_FallbackCulture();
    [CompilerGeneratedAttribute]
public void set_FallbackCulture(string value);
    public virtual bool Equals(object obj);
    public sealed virtual bool Equals(ResourcePackageState other);
    public virtual int GetHashCode();
}
[GuidAttribute("6380BCFF-41D3-4B2E-8B2E-BF8A6810C848")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.Setup.Interop.IEnumSetupInstances {
    public abstract virtual void Next(int celt, ISetupInstance& rgelt, Int32& pceltFetched);
    public abstract virtual void Skip(int celt);
    public abstract virtual void Reset();
    public abstract virtual IEnumSetupInstances Clone();
}
[GuidAttribute("42843719-DB4C-46C2-8E7C-64F1816EFD5B")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.Setup.Interop.ISetupConfiguration {
    public abstract virtual IEnumSetupInstances EnumInstances();
    public abstract virtual ISetupInstance GetInstanceForCurrentProcess();
    public abstract virtual ISetupInstance GetInstanceForPath(string wzPath);
}
[GuidAttribute("B41463C3-8866-43B5-BC33-2B0676F7F42E")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.Setup.Interop.ISetupInstance {
    public abstract virtual string GetInstanceId();
    public abstract virtual FILETIME GetInstallDate();
    public abstract virtual string GetInstallationName();
    public abstract virtual string GetInstallationPath();
    public abstract virtual string GetInstallationVersion();
    public abstract virtual string GetDisplayName(int lcid);
    public abstract virtual string GetDescription(int lcid);
    public abstract virtual string ResolvePath(string relativePath);
}
[GuidAttribute("177F0C4A-1CD3-4DE7-A32C-71DBBB9FA36D")]
public class Microsoft.VisualStudio.Setup.Interop.SetupConfiguration : object {
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("27524")]
internal class System.Runtime.CompilerServices.NullableAttribute : Attribute {
    public Byte[] NullableFlags;
    public NullableAttribute(byte );
    public NullableAttribute(Byte[] );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("2")]
internal class System.Runtime.CompilerServices.RefSafetyRulesAttribute : Attribute {
    public int Version;
    public RefSafetyRulesAttribute(int );
}
[GeneratedCodeAttribute("Nerdbank.GitVersioning.Tasks", "3.6.128.36433")]
[ExcludeFromCodeCoverageAttribute]
internal static class ThisAssembly : object {
    internal static string AssemblyConfiguration;
    internal static string AssemblyFileVersion;
    internal static string AssemblyInformationalVersion;
    internal static string AssemblyName;
    internal static string AssemblyTitle;
    internal static string AssemblyVersion;
    internal static DateTime GitCommitDate;
    internal static string GitCommitId;
    internal static bool IsPrerelease;
    internal static bool IsPublicRelease;
    internal static string PublicKey;
    internal static string PublicKeyToken;
    internal static string RootNamespace;
    private static ThisAssembly();
}
