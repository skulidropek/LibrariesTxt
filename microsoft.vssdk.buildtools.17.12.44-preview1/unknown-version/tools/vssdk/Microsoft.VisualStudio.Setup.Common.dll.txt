[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
[DataContractAttribute]
public class Microsoft.VisualStudio.Setup.AdvertisedPackage : object {
    [CompilerGeneratedAttribute]
private IList`1<AdvertisedPackageResources> <Resources>k__BackingField;
    [DataMemberAttribute]
public IList`1<AdvertisedPackageResources> Resources { get; }
    [CompilerGeneratedAttribute]
public IList`1<AdvertisedPackageResources> get_Resources();
}
[DataContractAttribute]
public class Microsoft.VisualStudio.Setup.AdvertisedPackageResources : object {
    [CompilerGeneratedAttribute]
private string <Language>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Title>k__BackingField;
    [DataMemberAttribute]
public string Language { get; public set; }
    [DataMemberAttribute]
public string Title { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Language();
    [CompilerGeneratedAttribute]
public void set_Language(string value);
    [CompilerGeneratedAttribute]
public string get_Title();
    [CompilerGeneratedAttribute]
public void set_Title(string value);
}
public class Microsoft.VisualStudio.Setup.ApplicabilityMessage : object {
    [CompilerGeneratedAttribute]
private string <Message>k__BackingField;
    [CompilerGeneratedAttribute]
private PackageErrorType <Type>k__BackingField;
    public string Message { get; }
    public PackageErrorType Type { get; }
    public ApplicabilityMessage(string message, PackageErrorType type);
    [CompilerGeneratedAttribute]
public string get_Message();
    [CompilerGeneratedAttribute]
public PackageErrorType get_Type();
    public sealed virtual bool Equals(ApplicabilityMessage other);
    public virtual int GetHashCode();
    public virtual string ToString();
}
public class Microsoft.VisualStudio.Setup.ApplicabilityState : object {
    [CompilerGeneratedAttribute]
private bool <UpdateSelectionRequested>k__BackingField;
    private List`1<ApplicabilityMessage> distinctMessages;
    public bool IsValid { get; }
    public bool UpdateSelectionRequested { get; public set; }
    public IEnumerable`1<ApplicabilityMessage> InvalidMessages { get; }
    public bool get_IsValid();
    [CompilerGeneratedAttribute]
public bool get_UpdateSelectionRequested();
    [CompilerGeneratedAttribute]
public void set_UpdateSelectionRequested(bool value);
    public IEnumerable`1<ApplicabilityMessage> get_InvalidMessages();
    public void AddInvalidMessage(string message, PackageErrorType type);
    public void Merge(ApplicabilityState other, bool inPackage);
    public void Clear();
    private void RemoveDuplicates();
}
[DataContractAttribute]
[JsonConverterAttribute("Microsoft.VisualStudio.Setup.Serialization.AppliesToConverter")]
public class Microsoft.VisualStudio.Setup.AppliesTo : object {
    private static StringComparer Comparer;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private VersionRange <Version>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Branch>k__BackingField;
    [DataMemberAttribute]
public string Name { get; public set; }
    [DataMemberAttribute]
public VersionRange Version { get; public set; }
    [DataMemberAttribute]
public string Branch { get; public set; }
    [IgnoreDataMemberAttribute]
internal bool IsSimple { get; }
    private static AppliesTo();
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public VersionRange get_Version();
    [CompilerGeneratedAttribute]
public void set_Version(VersionRange value);
    [CompilerGeneratedAttribute]
public string get_Branch();
    [CompilerGeneratedAttribute]
public void set_Branch(string value);
    public bool IsApplicable(IApplicabilityInfo info);
    internal bool get_IsSimple();
}
[EmptyAsNullAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[DictionaryMemberAttribute]
public class Microsoft.VisualStudio.Setup.AppliesToCollection : KeyedValueCollection`2<string, AppliesTo> {
    public virtual string ToString();
    protected virtual string GetKeyForItem(AppliesTo item);
    protected virtual void SetKeyForItem(string key, AppliesTo item);
}
[DataContractAttribute]
public class Microsoft.VisualStudio.Setup.BreadcrumbTemplate : object {
    [CompilerGeneratedAttribute]
private IList`1<Template> <Templates>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<LocalizedResourceTemplate> <LocalizedResources>k__BackingField;
    [DataMemberAttribute]
public IList`1<Template> Templates { get; private set; }
    [DataMemberAttribute]
public IList`1<LocalizedResourceTemplate> LocalizedResources { get; private set; }
    [CompilerGeneratedAttribute]
public IList`1<Template> get_Templates();
    [CompilerGeneratedAttribute]
private void set_Templates(IList`1<Template> value);
    [CompilerGeneratedAttribute]
public IList`1<LocalizedResourceTemplate> get_LocalizedResources();
    [CompilerGeneratedAttribute]
private void set_LocalizedResources(IList`1<LocalizedResourceTemplate> value);
}
public class Microsoft.VisualStudio.Setup.BucketParameters : object {
    [CompilerGeneratedAttribute]
private string <EventTypeName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Param0>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Param1>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Param2>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Param3>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Param4>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Param5>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Param6>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Param7>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Param8>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Param9>k__BackingField;
    public string EventTypeName { get; public set; }
    public string Param0 { get; public set; }
    public string Param1 { get; public set; }
    public string Param2 { get; public set; }
    public string Param3 { get; public set; }
    public string Param4 { get; public set; }
    public string Param5 { get; public set; }
    public string Param6 { get; public set; }
    public string Param7 { get; public set; }
    public string Param8 { get; public set; }
    public string Param9 { get; public set; }
    [CompilerGeneratedAttribute]
public string get_EventTypeName();
    [CompilerGeneratedAttribute]
public void set_EventTypeName(string value);
    [CompilerGeneratedAttribute]
public string get_Param0();
    [CompilerGeneratedAttribute]
public void set_Param0(string value);
    [CompilerGeneratedAttribute]
public string get_Param1();
    [CompilerGeneratedAttribute]
public void set_Param1(string value);
    [CompilerGeneratedAttribute]
public string get_Param2();
    [CompilerGeneratedAttribute]
public void set_Param2(string value);
    [CompilerGeneratedAttribute]
public string get_Param3();
    [CompilerGeneratedAttribute]
public void set_Param3(string value);
    [CompilerGeneratedAttribute]
public string get_Param4();
    [CompilerGeneratedAttribute]
public void set_Param4(string value);
    [CompilerGeneratedAttribute]
public string get_Param5();
    [CompilerGeneratedAttribute]
public void set_Param5(string value);
    [CompilerGeneratedAttribute]
public string get_Param6();
    [CompilerGeneratedAttribute]
public void set_Param6(string value);
    [CompilerGeneratedAttribute]
public string get_Param7();
    [CompilerGeneratedAttribute]
public void set_Param7(string value);
    [CompilerGeneratedAttribute]
public string get_Param8();
    [CompilerGeneratedAttribute]
public void set_Param8(string value);
    [CompilerGeneratedAttribute]
public string get_Param9();
    [CompilerGeneratedAttribute]
public void set_Param9(string value);
    public virtual string ToString();
}
[DataContractAttribute]
public abstract class Microsoft.VisualStudio.Setup.BuildInformation : ExtensibleObject {
}
[FlagsAttribute]
public enum Microsoft.VisualStudio.Setup.Cache.CacheState : Enum {
    public int value__;
    public static CacheState None;
    public static CacheState Manifest;
    public static CacheState Payloads;
    public static CacheState Installed;
}
[ExtensionAttribute]
public static class Microsoft.VisualStudio.Setup.Cache.CommonExtensions : object {
    public static string Nickname;
    private static CommonExtensions();
    [ExtensionAttribute]
public static bool IsCached(ICacheManager manager, IPackageIdentity identity, bool all, bool layout);
    [ExtensionAttribute]
public static bool IsInstalled(ICacheManager manager, IPackageIdentity identity);
    [ExtensionAttribute]
public static IEnumerable`1<Payload> GetExistingPayloads(ICacheManager manager, IPackage package);
    [ExtensionAttribute]
public static bool IsComplete(IInstance instance);
    [ExtensionAttribute]
public static bool IsCorrupt(IInstance instance);
    [ExtensionAttribute]
public static void SetCorrupt(Instance instance, Exception exception);
    [ExtensionAttribute]
public static void ClearPackageErrors(Instance instance);
    [ExtensionAttribute]
public static bool IsLaunchable(IInstance instance);
    [ExtensionAttribute]
public static bool ContainsPath(IInstance instance, string path);
    [ExtensionAttribute]
public static IPackageIdentity GetProduct(IInstance instance, bool installedOnly);
    [ExtensionAttribute]
public static string GetProductPath(IInstance instance);
    [ExtensionAttribute]
public static IEnumerable`1<IPackageReference> GetExtensions(IInstance instance);
    [ExtensionAttribute]
public static bool IsRequiredEngineVersion(IInstance instance, Version version);
    [ExtensionAttribute]
public static string ResolvePath(IInstance instance, string relativePath);
    [ExtensionAttribute]
public static string GetFullDisplayName(IInstance instance);
}
[DataContractAttribute]
public class Microsoft.VisualStudio.Setup.Cache.ErrorState : object {
    private string logFilePath;
    private string errorLogFilePath;
    private Exception runtimeError;
    [CompilerGeneratedAttribute]
private PropertyChangedEventHandler PropertyChanged;
    [CompilerGeneratedAttribute]
private FailedPackageReferenceCollection <FailedPackages>k__BackingField;
    [CompilerGeneratedAttribute]
private PackageReferenceCollection <SkippedPackages>k__BackingField;
    [DataMemberAttribute]
public string LogFilePath { get; public set; }
    [DataMemberAttribute]
public string ErrorLogFilePath { get; public set; }
    [DataMemberAttribute]
public Exception RuntimeError { get; public set; }
    [DataMemberAttribute]
public FailedPackageReferenceCollection FailedPackages { get; }
    [DataMemberAttribute]
public PackageReferenceCollection SkippedPackages { get; }
    private IReadOnlyCollection`1<IFailedPackageReference> Microsoft.VisualStudio.Setup.Cache.IErrorState.FailedPackages { get; }
    private IReadOnlyCollection`1<IPackageReference> Microsoft.VisualStudio.Setup.Cache.IErrorState.SkippedPackages { get; }
    [CompilerGeneratedAttribute]
public sealed virtual void add_PropertyChanged(PropertyChangedEventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_PropertyChanged(PropertyChangedEventHandler value);
    public sealed virtual string get_LogFilePath();
    public void set_LogFilePath(string value);
    public sealed virtual string get_ErrorLogFilePath();
    public void set_ErrorLogFilePath(string value);
    public sealed virtual Exception get_RuntimeError();
    public void set_RuntimeError(Exception value);
    [CompilerGeneratedAttribute]
public FailedPackageReferenceCollection get_FailedPackages();
    [CompilerGeneratedAttribute]
public PackageReferenceCollection get_SkippedPackages();
    private sealed virtual override IReadOnlyCollection`1<IFailedPackageReference> Microsoft.VisualStudio.Setup.Cache.IErrorState.get_FailedPackages();
    private sealed virtual override IReadOnlyCollection`1<IPackageReference> Microsoft.VisualStudio.Setup.Cache.IErrorState.get_SkippedPackages();
    internal void AddPackageFailure(FailedPackageReference failedPackageReference);
    internal void AddSkippedPackage(IPackage package);
    private void OnPropertyChanged(string propertyName);
    private void SetProperty(T& field, T value, string propertyName);
    [CompilerGeneratedAttribute]
private void <.ctor>b__3_0(object source, NotifyCollectionChangedEventArgs`1<FailedPackageReference> args);
    [CompilerGeneratedAttribute]
private void <.ctor>b__3_1(object source, NotifyCollectionChangedEventArgs`1<PackageReference> args);
}
[DataContractAttribute]
[DebuggerDisplayAttribute("{GetUniqueId(),nq},Type={Type}")]
public class Microsoft.VisualStudio.Setup.Cache.FailedPackageReference : PackageReference {
    private List`1<string> details;
    [CompilerGeneratedAttribute]
private string <Action>k__BackingField;
    [CompilerGeneratedAttribute]
private string <LogFilePath>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Description>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ReturnCode>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Signature>k__BackingField;
    [CompilerGeneratedAttribute]
private PackageReferenceCollection <AffectedPackages>k__BackingField;
    [DataMemberAttribute]
public string Action { get; public set; }
    [DataMemberAttribute]
public string LogFilePath { get; public set; }
    [DataMemberAttribute]
public string Description { get; public set; }
    [DataMemberAttribute]
public string ReturnCode { get; public set; }
    [DataMemberAttribute]
public string Signature { get; public set; }
    [DataMemberAttribute]
public IList`1<string> Details { get; }
    [DataMemberAttribute]
public PackageReferenceCollection AffectedPackages { get; }
    private IReadOnlyCollection`1<string> Microsoft.VisualStudio.Setup.Cache.IFailedPackageReference.Details { get; }
    private IReadOnlyCollection`1<IPackageReference> Microsoft.VisualStudio.Setup.Cache.IFailedPackageReference.AffectedPackages { get; }
    public FailedPackageReference(IPackage package, string description, IEnumerable`1<string> details, string logFilePath, string signature);
    [CompilerGeneratedAttribute]
public sealed virtual string get_Action();
    [CompilerGeneratedAttribute]
public void set_Action(string value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_LogFilePath();
    [CompilerGeneratedAttribute]
public void set_LogFilePath(string value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_Description();
    [CompilerGeneratedAttribute]
public void set_Description(string value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_ReturnCode();
    [CompilerGeneratedAttribute]
public void set_ReturnCode(string value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_Signature();
    [CompilerGeneratedAttribute]
public void set_Signature(string value);
    public IList`1<string> get_Details();
    [CompilerGeneratedAttribute]
public PackageReferenceCollection get_AffectedPackages();
    private sealed virtual override IReadOnlyCollection`1<string> Microsoft.VisualStudio.Setup.Cache.IFailedPackageReference.get_Details();
    private sealed virtual override IReadOnlyCollection`1<IPackageReference> Microsoft.VisualStudio.Setup.Cache.IFailedPackageReference.get_AffectedPackages();
    private void AddAffectedPackages(IPackage package);
}
public class Microsoft.VisualStudio.Setup.Cache.FailedPackageReferenceCollection : IndexedCollection`1<FailedPackageReference> {
    public FailedPackageReferenceCollection(IEqualityComparer`1<FailedPackageReference> comparer);
}
public interface Microsoft.VisualStudio.Setup.Cache.ICacheManager {
    public abstract virtual CacheState GetCacheState(IPackageIdentity identity, bool layout);
    public abstract virtual IEnumerable`1<Payload> GetRequiredPayloads(IPackage package, bool layout);
    public abstract virtual IEnumerable`1<Payload> GetPayloads(IPackage package);
    public abstract virtual void CachePackage(IInstallablePackage package, bool layout);
    public abstract virtual void AddPackage(IPackage package);
    public abstract virtual IEnumerable`1<IPackage> GetPackages(bool allPackages);
    public abstract virtual IEnumerable`1<IPackage> GetAllCachedPackages();
    public abstract virtual IPackage GetPackage(IPackageIdentity identity);
    public abstract virtual void RemovePackage(IPackage package);
    public abstract virtual void PrunePackageCache(IEnumerable`1<IPackage> packages);
    public abstract virtual bool SetLayoutDirectory(string path, bool override, bool create);
    public abstract virtual void AddPreviousLayoutPath(string path);
    public abstract virtual string GetPackageCacheDirectory(IPackageIdentity identity, bool layout);
    public abstract virtual string GetPackageTemporaryDirectory(IPackageIdentity identity);
    public abstract virtual void SetTemporaryCacheDirectory(string temporaryCacheDirectory);
    public abstract virtual string GetTemporaryCacheDirectory();
    public abstract virtual Instance GetInstance();
    public abstract virtual IEnumerable`1<Instance> GetInstances(bool all);
    public abstract virtual string GetInstanceDirectory();
    public abstract virtual string GetInstanceUserDirectory();
    public abstract virtual void AddExtensionCatalog(Catalog catalog);
    public abstract virtual IEnumerable`1<Catalog> GetExtensionCatalogs();
    public abstract virtual void RemoveExtensionCatalog(string id);
    public abstract virtual bool SetExtensionsDirectory(string path, bool override);
}
public interface Microsoft.VisualStudio.Setup.Cache.IErrorState {
    public string LogFilePath { get; }
    public string ErrorLogFilePath { get; }
    public Exception RuntimeError { get; }
    public IReadOnlyCollection`1<IFailedPackageReference> FailedPackages { get; }
    public IReadOnlyCollection`1<IPackageReference> SkippedPackages { get; }
    public abstract virtual string get_LogFilePath();
    public abstract virtual string get_ErrorLogFilePath();
    public abstract virtual Exception get_RuntimeError();
    public abstract virtual IReadOnlyCollection`1<IFailedPackageReference> get_FailedPackages();
    public abstract virtual IReadOnlyCollection`1<IPackageReference> get_SkippedPackages();
}
public interface Microsoft.VisualStudio.Setup.Cache.IFailedPackageReference {
    public string LogFilePath { get; }
    public string Description { get; }
    public string Signature { get; }
    public string Action { get; }
    public string ReturnCode { get; }
    public IReadOnlyCollection`1<string> Details { get; }
    public IReadOnlyCollection`1<IPackageReference> AffectedPackages { get; }
    public abstract virtual string get_LogFilePath();
    public abstract virtual string get_Description();
    public abstract virtual string get_Signature();
    public abstract virtual string get_Action();
    public abstract virtual string get_ReturnCode();
    public abstract virtual IReadOnlyCollection`1<string> get_Details();
    public abstract virtual IReadOnlyCollection`1<IPackageReference> get_AffectedPackages();
}
public interface Microsoft.VisualStudio.Setup.Cache.IInstance {
    public Icon Icon { get; }
    public string InstanceId { get; }
    public bool IsCorrupt { get; }
    public bool IsPaused { get; }
    public DateTime UpdateDate { get; }
    public DateTime InstallDate { get; }
    public string EnginePath { get; }
    public string InstallationName { get; }
    public string InstallationPath { get; }
    public string ResolvedInstallationPath { get; }
    public CommandParameter LaunchParams { get; }
    public string InstallationVersion { get; }
    public string LayoutPath { get; public set; }
    public string TemporaryCache { get; public set; }
    public string ChannelId { get; }
    public string InstalledChannelId { get; }
    public string ChannelPath { get; }
    public Uri ChannelUri { get; }
    public Uri InstallChannelUri { get; }
    public Uri InstalledChannelUri { get; }
    public CatalogInfo CatalogInfo { get; }
    public CatalogInfo PreviousCatalogInfo { get; }
    public DependencyComparisonSeed Seed { get; }
    public IPackageReference Product { get; }
    public IReadOnlyCollection`1<IPackageReference> Packages { get; }
    public IReadOnlyCollection`1<ISelectablePackageReference> SelectedPackages { get; }
    public IErrorState Errors { get; }
    public InstanceState State { get; }
    public IReadOnlyDictionary`2<string, string> Properties { get; }
    public IReadOnlyDictionary`2<string, string> UserProperties { get; }
    public IReadOnlyDictionary`2<string, string> TemporaryProperties { get; }
    public Uri ReleaseNotes { get; }
    public Uri ThirdPartyNotices { get; }
    public bool SupportsExtensions { get; }
    public ISet`1<string> PreviousLayoutPaths { get; }
    public Uri LayoutUri { get; public set; }
    public abstract virtual Icon get_Icon();
    public abstract virtual string get_InstanceId();
    public abstract virtual bool get_IsCorrupt();
    public abstract virtual bool get_IsPaused();
    public abstract virtual DateTime get_UpdateDate();
    public abstract virtual DateTime get_InstallDate();
    public abstract virtual string get_EnginePath();
    public abstract virtual string get_InstallationName();
    public abstract virtual string get_InstallationPath();
    public abstract virtual string get_ResolvedInstallationPath();
    public abstract virtual CommandParameter get_LaunchParams();
    public abstract virtual string get_InstallationVersion();
    public abstract virtual string get_LayoutPath();
    public abstract virtual void set_LayoutPath(string value);
    public abstract virtual string get_TemporaryCache();
    public abstract virtual void set_TemporaryCache(string value);
    public abstract virtual string get_ChannelId();
    public abstract virtual string get_InstalledChannelId();
    public abstract virtual string get_ChannelPath();
    public abstract virtual Uri get_ChannelUri();
    public abstract virtual Uri get_InstallChannelUri();
    public abstract virtual Uri get_InstalledChannelUri();
    public abstract virtual CatalogInfo get_CatalogInfo();
    public abstract virtual CatalogInfo get_PreviousCatalogInfo();
    public abstract virtual DependencyComparisonSeed get_Seed();
    public abstract virtual IPackageReference get_Product();
    public abstract virtual IReadOnlyCollection`1<IPackageReference> get_Packages();
    public abstract virtual IReadOnlyCollection`1<ISelectablePackageReference> get_SelectedPackages();
    public abstract virtual IErrorState get_Errors();
    public abstract virtual InstanceState get_State();
    public abstract virtual IReadOnlyDictionary`2<string, string> get_Properties();
    public abstract virtual IReadOnlyDictionary`2<string, string> get_UserProperties();
    public abstract virtual IReadOnlyDictionary`2<string, string> get_TemporaryProperties();
    public abstract virtual Uri get_ReleaseNotes();
    public abstract virtual Uri get_ThirdPartyNotices();
    public abstract virtual bool get_SupportsExtensions();
    public abstract virtual ISet`1<string> get_PreviousLayoutPaths();
    public abstract virtual Uri get_LayoutUri();
    public abstract virtual void set_LayoutUri(Uri value);
    public abstract virtual string GetDisplayName(CultureInfo culture);
    public abstract virtual string GetDisplayName(CultureInfo culture, LocalizedResourceFallback languageFallback);
    public abstract virtual string GetDescription(CultureInfo culture);
    public abstract virtual string GetDescription(CultureInfo culture, LocalizedResourceFallback languageFallback);
    public abstract virtual string GetLongDescription(CultureInfo culture);
    public abstract virtual string GetLongDescription(CultureInfo culture, LocalizedResourceFallback languageFallback);
    public abstract virtual string GetChannelName(CultureInfo culture, LocalizedResourceFallback languageFallback);
    public abstract virtual string GetChannelDescription(CultureInfo culture, LocalizedResourceFallback languageFallback);
    public abstract virtual string GetChannelSuffix(CultureInfo culture, LocalizedResourceFallback languageFallback);
    public abstract virtual ICollection`1<string> GetKeywords(CultureInfo culture);
    public abstract virtual ICollection`1<string> GetKeywords(CultureInfo culture, LocalizedResourceFallback languageFallback);
    public abstract virtual Uri GetLicense();
    public abstract virtual Uri GetLicense(CultureInfo culture, LocalizedResourceFallback languageFallback);
}
public class Microsoft.VisualStudio.Setup.Cache.IndexedCollection`1 : object {
    private HashSet`1<T> container;
    [CompilerGeneratedAttribute]
private EventHandler`1<NotifyCollectionChangedEventArgs`1<T>> CollectionChanged;
    public IEqualityComparer`1<T> Comparer { get; }
    public int Count { get; }
    public bool IsReadOnly { get; }
    public IndexedCollection`1(IEqualityComparer`1<T> comparer);
    [CompilerGeneratedAttribute]
public sealed virtual void add_CollectionChanged(EventHandler`1<NotifyCollectionChangedEventArgs`1<T>> value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_CollectionChanged(EventHandler`1<NotifyCollectionChangedEventArgs`1<T>> value);
    public IEqualityComparer`1<T> get_Comparer();
    public sealed virtual int get_Count();
    public sealed virtual bool get_IsReadOnly();
    public sealed virtual bool Add(T item);
    public void AddRange(IEnumerable`1<T> items);
    public sealed virtual void Clear();
    public sealed virtual bool Contains(T item);
    public sealed virtual void CopyTo(T[] array, int arrayIndex);
    public sealed virtual void ExceptWith(IEnumerable`1<T> other);
    public sealed virtual IEnumerator`1<T> GetEnumerator();
    public sealed virtual void IntersectWith(IEnumerable`1<T> other);
    public sealed virtual bool IsProperSubsetOf(IEnumerable`1<T> other);
    public sealed virtual bool IsProperSupersetOf(IEnumerable`1<T> other);
    public sealed virtual bool IsSubsetOf(IEnumerable`1<T> other);
    public sealed virtual bool IsSupersetOf(IEnumerable`1<T> other);
    public sealed virtual bool Overlaps(IEnumerable`1<T> other);
    public sealed virtual bool Remove(T item);
    public sealed virtual bool SetEquals(IEnumerable`1<T> other);
    public sealed virtual void SymmetricExceptWith(IEnumerable`1<T> other);
    public sealed virtual void UnionWith(IEnumerable`1<T> other);
    private sealed virtual override void System.Collections.Generic.ICollection<T>.Add(T item);
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    private void OnCollectionChanged(NotifyCollectionChangedAction action);
    private void OnCollectionChanged(NotifyCollectionChangedAction action, T item);
    private void OnCollectionChanged(NotifyCollectionChangedAction action, IEnumerable`1<T> items);
}
[DataContractAttribute]
public class Microsoft.VisualStudio.Setup.Cache.Instance : object {
    internal static InstanceState SupportedState;
    private static string Paused;
    internal static InstanceState LaunchableState;
    private static StringComparer Comparer;
    private static UriStrictEqualityComparer UriComparer;
    private object syncRoot;
    private IReadOnlyDictionary`2<string, string> propertiesRO;
    private IReadOnlyDictionary`2<string, string> userPropertiesRO;
    private IReadOnlyDictionary`2<string, string> temporaryPropertiesRO;
    private IDictionary`2<CultureInfo, LocalizedResource> cachedProductResources;
    private IDictionary`2<CultureInfo, LocalizedResource> cachedChannelResources;
    private IObservableDictionary`2<string, string> properties;
    private IObservableDictionary`2<string, string> userProperties;
    private IObservableDictionary`2<string, string> temporaryProperties;
    private ObservableCollection`1<LocalizedResource> localizedResources;
    private ObservableCollection`1<LocalizedResource> channelResources;
    private IndexedCollection`1<string> previousLayoutPaths;
    private Icon icon;
    private DateTime updateDate;
    private DateTime installDate;
    private string enginePath;
    private string installationName;
    private CatalogInfo catalogInfo;
    private CatalogInfo previousCatalogInfo;
    private string installationPath;
    private string layoutPath;
    private string temporaryCache;
    private CommandParameter launchParams;
    private string installationVersion;
    private string channelId;
    private string installedChannelId;
    private string channelPath;
    private Uri channelUri;
    private Uri installChannelUri;
    private Uri installedChannelUri;
    private DependencyComparisonSeed seed;
    private ProductReference product;
    private Uri releaseNotes;
    private Uri thirdPartyNotices;
    private Nullable`1<bool> supportsExtensions;
    private Uri layoutUri;
    private bool baseChanged;
    private bool packagesChanged;
    private bool errorsChanged;
    private InstanceState state;
    private ErrorState errors;
    private string resolvedInstallationPath;
    [CompilerGeneratedAttribute]
private PropertyChangedEventHandler PropertyChanged;
    [CompilerGeneratedAttribute]
private string <InstanceId>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsCorrupt>k__BackingField;
    [CompilerGeneratedAttribute]
private PackageReferenceCollection <Packages>k__BackingField;
    [CompilerGeneratedAttribute]
private SelectablePackageReferenceCollection <SelectedPackages>k__BackingField;
    [DataMemberAttribute]
public Icon Icon { get; public set; }
    [IgnoreDataMemberAttribute]
public bool SupportsExtensions { get; }
    [IgnoreDataMemberAttribute]
public string InstanceId { get; public set; }
    [IgnoreDataMemberAttribute]
public bool IsCorrupt { get; public set; }
    [IgnoreDataMemberAttribute]
public bool IsPaused { get; }
    [DataMemberAttribute]
public DateTime UpdateDate { get; public set; }
    [DataMemberAttribute]
public DateTime InstallDate { get; public set; }
    [DataMemberAttribute]
public string EnginePath { get; public set; }
    [DataMemberAttribute]
public string InstallationName { get; public set; }
    [DataMemberAttribute]
public CatalogInfo CatalogInfo { get; public set; }
    [DataMemberAttribute]
public CatalogInfo PreviousCatalogInfo { get; public set; }
    [DataMemberAttribute]
public string InstallationPath { get; public set; }
    [DataMemberAttribute]
public string ResolvedInstallationPath { get; public set; }
    [DataMemberAttribute]
public string LayoutPath { get; public set; }
    [DataMemberAttribute]
[EmptyAsNullAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public ISet`1<string> PreviousLayoutPaths { get; }
    [DataMemberAttribute]
[SerializationContextAttribute("8")]
public string TemporaryCache { get; public set; }
    [DataMemberAttribute]
public CommandParameter LaunchParams { get; public set; }
    [DataMemberAttribute]
public string InstallationVersion { get; public set; }
    [DataMemberAttribute]
public string ChannelId { get; public set; }
    [DataMemberAttribute]
public string InstalledChannelId { get; public set; }
    [DataMemberAttribute]
public string ChannelPath { get; public set; }
    [DataMemberAttribute]
public Uri ChannelUri { get; public set; }
    [DataMemberAttribute]
public Uri InstallChannelUri { get; public set; }
    [DataMemberAttribute]
public Uri InstalledChannelUri { get; public set; }
    [DataMemberAttribute]
public DependencyComparisonSeed Seed { get; public set; }
    [DataMemberAttribute]
public ICollection`1<LocalizedResource> LocalizedResources { get; }
    [DataMemberAttribute]
[EmptyAsNullAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public ICollection`1<LocalizedResource> ChannelResources { get; }
    [DataMemberAttribute]
public ProductReference Product { get; public set; }
    [DataMemberAttribute]
[SerializationContextAttribute("2")]
public PackageReferenceCollection Packages { get; }
    [IgnoreDataMemberAttribute]
public InstanceState State { get; public set; }
    [DataMemberAttribute]
[EmptyAsNullAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public IDictionary`2<string, string> Properties { get; }
    [IgnoreDataMemberAttribute]
private IReadOnlyDictionary`2<string, string> Microsoft.VisualStudio.Setup.Cache.IInstance.Properties { get; }
    [DataMemberAttribute]
[EmptyAsNullAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[SerializationContextAttribute("8")]
public IDictionary`2<string, string> UserProperties { get; }
    [IgnoreDataMemberAttribute]
private IReadOnlyDictionary`2<string, string> Microsoft.VisualStudio.Setup.Cache.IInstance.UserProperties { get; }
    [DataMemberAttribute]
[EmptyAsNullAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public IDictionary`2<string, string> TemporaryProperties { get; }
    [IgnoreDataMemberAttribute]
private IReadOnlyDictionary`2<string, string> Microsoft.VisualStudio.Setup.Cache.IInstance.TemporaryProperties { get; }
    [DataMemberAttribute]
public SelectablePackageReferenceCollection SelectedPackages { get; }
    [DataMemberAttribute]
[SerializationContextAttribute("4")]
public ErrorState Errors { get; public set; }
    [DataMemberAttribute]
public Uri ReleaseNotes { get; public set; }
    [DataMemberAttribute]
public Uri ThirdPartyNotices { get; public set; }
    [DataMemberAttribute]
public Uri LayoutUri { get; public set; }
    private IPackageReference Microsoft.VisualStudio.Setup.Cache.IInstance.Product { get; }
    private IReadOnlyCollection`1<IPackageReference> Microsoft.VisualStudio.Setup.Cache.IInstance.Packages { get; }
    private IReadOnlyCollection`1<ISelectablePackageReference> Microsoft.VisualStudio.Setup.Cache.IInstance.SelectedPackages { get; }
    private IErrorState Microsoft.VisualStudio.Setup.Cache.IInstance.Errors { get; }
    private string Microsoft.VisualStudio.Setup.IApplicabilityInfo.Name { get; }
    private Version Microsoft.VisualStudio.Setup.IApplicabilityInfo.Version { get; }
    private string Microsoft.VisualStudio.Setup.IApplicabilityInfo.Branch { get; }
    private static Instance();
    [CompilerGeneratedAttribute]
public sealed virtual void add_PropertyChanged(PropertyChangedEventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_PropertyChanged(PropertyChangedEventHandler value);
    public sealed virtual Icon get_Icon();
    public void set_Icon(Icon value);
    public sealed virtual bool get_SupportsExtensions();
    [CompilerGeneratedAttribute]
public sealed virtual string get_InstanceId();
    [CompilerGeneratedAttribute]
public void set_InstanceId(string value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_IsCorrupt();
    [CompilerGeneratedAttribute]
public void set_IsCorrupt(bool value);
    public sealed virtual bool get_IsPaused();
    public sealed virtual DateTime get_UpdateDate();
    public void set_UpdateDate(DateTime value);
    public sealed virtual DateTime get_InstallDate();
    public void set_InstallDate(DateTime value);
    public sealed virtual string get_EnginePath();
    public void set_EnginePath(string value);
    public sealed virtual string get_InstallationName();
    public void set_InstallationName(string value);
    public sealed virtual CatalogInfo get_CatalogInfo();
    public void set_CatalogInfo(CatalogInfo value);
    public sealed virtual CatalogInfo get_PreviousCatalogInfo();
    public void set_PreviousCatalogInfo(CatalogInfo value);
    public sealed virtual string get_InstallationPath();
    public void set_InstallationPath(string value);
    public sealed virtual string get_ResolvedInstallationPath();
    public void set_ResolvedInstallationPath(string value);
    public sealed virtual string get_LayoutPath();
    public sealed virtual void set_LayoutPath(string value);
    public sealed virtual ISet`1<string> get_PreviousLayoutPaths();
    public sealed virtual string get_TemporaryCache();
    public sealed virtual void set_TemporaryCache(string value);
    public sealed virtual CommandParameter get_LaunchParams();
    public void set_LaunchParams(CommandParameter value);
    public sealed virtual string get_InstallationVersion();
    public void set_InstallationVersion(string value);
    public sealed virtual string get_ChannelId();
    public void set_ChannelId(string value);
    public sealed virtual string get_InstalledChannelId();
    public void set_InstalledChannelId(string value);
    public sealed virtual string get_ChannelPath();
    public void set_ChannelPath(string value);
    public sealed virtual Uri get_ChannelUri();
    public void set_ChannelUri(Uri value);
    public sealed virtual Uri get_InstallChannelUri();
    public void set_InstallChannelUri(Uri value);
    public sealed virtual Uri get_InstalledChannelUri();
    public void set_InstalledChannelUri(Uri value);
    public sealed virtual DependencyComparisonSeed get_Seed();
    public void set_Seed(DependencyComparisonSeed value);
    public ICollection`1<LocalizedResource> get_LocalizedResources();
    public ICollection`1<LocalizedResource> get_ChannelResources();
    public ProductReference get_Product();
    public void set_Product(ProductReference value);
    [CompilerGeneratedAttribute]
public PackageReferenceCollection get_Packages();
    public sealed virtual InstanceState get_State();
    public void set_State(InstanceState value);
    public IDictionary`2<string, string> get_Properties();
    private sealed virtual override IReadOnlyDictionary`2<string, string> Microsoft.VisualStudio.Setup.Cache.IInstance.get_Properties();
    public IDictionary`2<string, string> get_UserProperties();
    private sealed virtual override IReadOnlyDictionary`2<string, string> Microsoft.VisualStudio.Setup.Cache.IInstance.get_UserProperties();
    public IDictionary`2<string, string> get_TemporaryProperties();
    private sealed virtual override IReadOnlyDictionary`2<string, string> Microsoft.VisualStudio.Setup.Cache.IInstance.get_TemporaryProperties();
    [CompilerGeneratedAttribute]
public SelectablePackageReferenceCollection get_SelectedPackages();
    public ErrorState get_Errors();
    public void set_Errors(ErrorState value);
    public sealed virtual Uri get_ReleaseNotes();
    public void set_ReleaseNotes(Uri value);
    public sealed virtual Uri get_ThirdPartyNotices();
    public void set_ThirdPartyNotices(Uri value);
    public sealed virtual Uri get_LayoutUri();
    public sealed virtual void set_LayoutUri(Uri value);
    public sealed virtual string GetDisplayName(CultureInfo culture);
    public sealed virtual string GetDescription(CultureInfo culture);
    public sealed virtual string GetLongDescription(CultureInfo culture);
    public sealed virtual ICollection`1<string> GetKeywords(CultureInfo culture);
    public sealed virtual string GetDisplayName(CultureInfo culture, LocalizedResourceFallback fallback);
    public sealed virtual string GetDescription(CultureInfo culture, LocalizedResourceFallback fallback);
    public sealed virtual string GetLongDescription(CultureInfo culture, LocalizedResourceFallback fallback);
    public sealed virtual string GetChannelName(CultureInfo culture, LocalizedResourceFallback fallback);
    public sealed virtual string GetChannelDescription(CultureInfo culture, LocalizedResourceFallback fallback);
    public sealed virtual string GetChannelSuffix(CultureInfo culture, LocalizedResourceFallback fallback);
    public sealed virtual ICollection`1<string> GetKeywords(CultureInfo culture, LocalizedResourceFallback fallback);
    public sealed virtual Uri GetLicense();
    public sealed virtual Uri GetLicense(CultureInfo culture, LocalizedResourceFallback languageFallback);
    public void AddFailedPackage(FailedPackageReference failedPackageReference);
    public void SetRuntimeError(Exception exception);
    public bool HasChanged(SerializationContext context);
    public void ResetChanged();
    public void AddSkippedPackage(IPackage package);
    private sealed virtual override IPackageReference Microsoft.VisualStudio.Setup.Cache.IInstance.get_Product();
    private sealed virtual override IReadOnlyCollection`1<IPackageReference> Microsoft.VisualStudio.Setup.Cache.IInstance.get_Packages();
    private sealed virtual override IReadOnlyCollection`1<ISelectablePackageReference> Microsoft.VisualStudio.Setup.Cache.IInstance.get_SelectedPackages();
    private sealed virtual override IErrorState Microsoft.VisualStudio.Setup.Cache.IInstance.get_Errors();
    private sealed virtual override string Microsoft.VisualStudio.Setup.IApplicabilityInfo.get_Name();
    private sealed virtual override Version Microsoft.VisualStudio.Setup.IApplicabilityInfo.get_Version();
    private sealed virtual override string Microsoft.VisualStudio.Setup.IApplicabilityInfo.get_Branch();
    private LocalizedResource GetResource(ICollection`1<LocalizedResource> source, CultureInfo culture, LocalizedResourceFallback fallback, IDictionary`2<CultureInfo, LocalizedResource> cache);
    private LocalizedResource GetProductResource(CultureInfo culture, LocalizedResourceFallback fallback);
    private LocalizedResource GetChannelResource(CultureInfo culture, LocalizedResourceFallback fallback);
    private void EnsureErrorStateInitialized();
    private void OnErrorsChanged(object source, PropertyChangedEventArgs args);
    private void OnPropertyChanged(string propertyName);
    private void OnPropertyChanged(Boolean& field, string propertyName);
    private void SetProperty(T& field, T value, string propertyName, IEqualityComparer`1<T> comparer);
    [OnDeserializedAttribute]
private void OnDeserialized(StreamingContext context);
    [CompilerGeneratedAttribute]
private void <.ctor>b__47_0(object source, NotifyCollectionChangedEventArgs args);
    [CompilerGeneratedAttribute]
private void <.ctor>b__47_1(object source, NotifyCollectionChangedEventArgs args);
    [CompilerGeneratedAttribute]
private void <.ctor>b__47_2(object source, NotifyCollectionChangedEventArgs`1<PackageReference> args);
    [CompilerGeneratedAttribute]
private void <.ctor>b__47_3(object source, NotifyCollectionChangedEventArgs`1<SelectablePackageReference> args);
    [CompilerGeneratedAttribute]
private void <.ctor>b__47_4(object source, NotifyCollectionChangedEventArgs`1<KeyValuePair`2<string, string>> args);
    [CompilerGeneratedAttribute]
private void <.ctor>b__47_5(object source, NotifyCollectionChangedEventArgs`1<KeyValuePair`2<string, string>> args);
    [CompilerGeneratedAttribute]
private void <.ctor>b__47_6(object source, NotifyCollectionChangedEventArgs`1<KeyValuePair`2<string, string>> args);
    [CompilerGeneratedAttribute]
private void <.ctor>b__47_7(object source, NotifyCollectionChangedEventArgs`1<string> args);
}
public class Microsoft.VisualStudio.Setup.Cache.InstanceMonitor : object {
    private IServiceProvider services;
    private IFileSystem fileSystem;
    private ILogger logger;
    private IRestartManager restartManager;
    private Instance instance;
    public InstanceMonitor(IServiceProvider services, Instance instance);
    public void Initialize();
    public void OnAddPackage(IPackage package);
    public void OnRemovePackage(IPackage package);
    private bool HasProduct();
    private void OnRebootRequired(object source, EventArgs args);
    private void SetLocalState();
}
[FlagsAttribute]
public enum Microsoft.VisualStudio.Setup.Cache.InstanceState : Enum {
    public UInt32 value__;
    public static InstanceState None;
    public static InstanceState Local;
    public static InstanceState Registered;
    public static InstanceState NoRebootRequired;
    public static InstanceState NoErrors;
    public static InstanceState Complete;
}
public interface Microsoft.VisualStudio.Setup.Cache.IObservableDictionary`2 {
    public IEqualityComparer`1<TKey> Comparer { get; }
    public abstract virtual IEqualityComparer`1<TKey> get_Comparer();
    public abstract virtual void AddRange(IEnumerable`1<KeyValuePair`2<TKey, TValue>> items);
}
public interface Microsoft.VisualStudio.Setup.Cache.IPackageReference {
    public PackageType Type { get; }
    public bool IsExtension { get; }
    public abstract virtual PackageType get_Type();
    public abstract virtual bool get_IsExtension();
}
public interface Microsoft.VisualStudio.Setup.Cache.ISelectablePackageReference {
    public SelectedState SelectedState { get; public set; }
    public UserSelectedState UserSelectedState { get; public set; }
    public abstract virtual SelectedState get_SelectedState();
    public abstract virtual void set_SelectedState(SelectedState value);
    public abstract virtual UserSelectedState get_UserSelectedState();
    public abstract virtual void set_UserSelectedState(UserSelectedState value);
}
[DefaultMemberAttribute("Item")]
public class Microsoft.VisualStudio.Setup.Cache.ObservableDictionary`2 : object {
    private IDictionary`2<TKey, TValue> store;
    [CompilerGeneratedAttribute]
private EventHandler`1<NotifyCollectionChangedEventArgs`1<KeyValuePair`2<TKey, TValue>>> CollectionChanged;
    [CompilerGeneratedAttribute]
private IEqualityComparer`1<TKey> <Comparer>k__BackingField;
    public IEqualityComparer`1<TKey> Comparer { get; }
    public TValue Item { get; public set; }
    public ICollection`1<TKey> Keys { get; }
    public ICollection`1<TValue> Values { get; }
    public int Count { get; }
    public bool IsReadOnly { get; }
    public ObservableDictionary`2(IEqualityComparer`1<TKey> comparer);
    [CompilerGeneratedAttribute]
public sealed virtual void add_CollectionChanged(EventHandler`1<NotifyCollectionChangedEventArgs`1<KeyValuePair`2<TKey, TValue>>> value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_CollectionChanged(EventHandler`1<NotifyCollectionChangedEventArgs`1<KeyValuePair`2<TKey, TValue>>> value);
    [CompilerGeneratedAttribute]
public sealed virtual IEqualityComparer`1<TKey> get_Comparer();
    public sealed virtual TValue get_Item(TKey key);
    public sealed virtual void set_Item(TKey key, TValue value);
    public sealed virtual ICollection`1<TKey> get_Keys();
    public sealed virtual ICollection`1<TValue> get_Values();
    public sealed virtual int get_Count();
    public sealed virtual bool get_IsReadOnly();
    public sealed virtual void Add(TKey key, TValue value);
    public sealed virtual void Add(KeyValuePair`2<TKey, TValue> item);
    public sealed virtual void AddRange(IEnumerable`1<KeyValuePair`2<TKey, TValue>> items);
    public sealed virtual void Clear();
    public sealed virtual bool Contains(KeyValuePair`2<TKey, TValue> item);
    public sealed virtual bool ContainsKey(TKey key);
    public sealed virtual void CopyTo(KeyValuePair`2[] array, int arrayIndex);
    public sealed virtual IEnumerator`1<KeyValuePair`2<TKey, TValue>> GetEnumerator();
    public sealed virtual bool Remove(TKey key);
    public sealed virtual bool Remove(KeyValuePair`2<TKey, TValue> item);
    public sealed virtual bool TryGetValue(TKey key, TValue& value);
    [ExcludeFromCodeCoverageAttribute]
private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    private void OnCollectionChanged(NotifyCollectionChangedAction action);
    private void OnCollectionChanged(NotifyCollectionChangedAction action, TKey key, TValue value);
    private void OnCollectionChanged(NotifyCollectionChangedAction action, KeyValuePair`2<TKey, TValue> item);
    private void OnCollectionChanged(NotifyCollectionChangedAction action, IEnumerable`1<KeyValuePair`2<TKey, TValue>> items);
}
[DataContractAttribute]
public class Microsoft.VisualStudio.Setup.Cache.PackageReference : object {
    [CompilerGeneratedAttribute]
private string <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private Version <Version>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Chip>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Language>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Branch>k__BackingField;
    [CompilerGeneratedAttribute]
private PackageType <Type>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsExtension>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ProductArch>k__BackingField;
    [CompilerGeneratedAttribute]
private string <MachineArch>k__BackingField;
    [DataMemberAttribute]
public string Id { get; public set; }
    [DataMemberAttribute]
[JsonConverterAttribute("Newtonsoft.Json.Converters.VersionConverter")]
public Version Version { get; public set; }
    [DataMemberAttribute]
public string Chip { get; public set; }
    [DataMemberAttribute]
public string Language { get; public set; }
    [DataMemberAttribute]
public string Branch { get; public set; }
    [DataMemberAttribute]
[JsonConverterAttribute("Newtonsoft.Json.Converters.StringEnumConverter")]
public PackageType Type { get; public set; }
    [DataMemberAttribute]
public bool IsExtension { get; public set; }
    [DataMemberAttribute]
public string ProductArch { get; public set; }
    [DataMemberAttribute]
public string MachineArch { get; public set; }
    public static PackageReference FromIdentity(IPackageIdentity identity);
    protected static void InitializePackageReference(PackageReference reference, IPackageIdentity identity);
    [CompilerGeneratedAttribute]
public sealed virtual string get_Id();
    [CompilerGeneratedAttribute]
public void set_Id(string value);
    [CompilerGeneratedAttribute]
public sealed virtual Version get_Version();
    [CompilerGeneratedAttribute]
public void set_Version(Version value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_Chip();
    [CompilerGeneratedAttribute]
public void set_Chip(string value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_Language();
    [CompilerGeneratedAttribute]
public void set_Language(string value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_Branch();
    [CompilerGeneratedAttribute]
public void set_Branch(string value);
    [CompilerGeneratedAttribute]
public sealed virtual PackageType get_Type();
    [CompilerGeneratedAttribute]
public void set_Type(PackageType value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_IsExtension();
    [CompilerGeneratedAttribute]
public void set_IsExtension(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_ProductArch();
    [CompilerGeneratedAttribute]
public void set_ProductArch(string value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_MachineArch();
    [CompilerGeneratedAttribute]
public void set_MachineArch(string value);
    public sealed virtual string GetUniqueId();
    public virtual string ToString();
    protected static bool Equals(IPackageReference x, IPackageReference y);
    private sealed virtual override bool System.IEquatable<Microsoft.VisualStudio.Setup.IPackageIdentity>.Equals(IPackageIdentity other);
    private sealed virtual override bool System.IEquatable<Microsoft.VisualStudio.Setup.Cache.IPackageReference>.Equals(IPackageReference other);
}
public class Microsoft.VisualStudio.Setup.Cache.PackageReferenceCollection : IndexedCollection`1<PackageReference> {
    public PackageReferenceCollection(IEqualityComparer`1<PackageReference> comparer);
    public bool Contains(IPackageIdentity identity);
}
[DataContractAttribute]
public class Microsoft.VisualStudio.Setup.Cache.ProductReference : PackageReference {
    private Nullable`1<bool> isInstalled;
    private Nullable`1<bool> supportsExtensions;
    [CompilerGeneratedAttribute]
private PropertyChangedEventHandler PropertyChanged;
    [DataMemberAttribute]
public Nullable`1<bool> IsInstalled { get; public set; }
    [DataMemberAttribute]
public Nullable`1<bool> SupportsExtensions { get; public set; }
    public static ProductReference FromIdentity(IPackageIdentity identity, bool installed);
    private static void InitializeProductReference(ProductReference reference, IPackageIdentity identity);
    [CompilerGeneratedAttribute]
public sealed virtual void add_PropertyChanged(PropertyChangedEventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_PropertyChanged(PropertyChangedEventHandler value);
    public sealed virtual Nullable`1<bool> get_IsInstalled();
    public sealed virtual void set_IsInstalled(Nullable`1<bool> value);
    public sealed virtual Nullable`1<bool> get_SupportsExtensions();
    public sealed virtual void set_SupportsExtensions(Nullable`1<bool> value);
    public sealed virtual bool Equals(IProductReference other);
    private void SetProperty(T& field, T value, string propertyName);
}
[DataContractAttribute]
public class Microsoft.VisualStudio.Setup.Cache.SelectablePackageReference : PackageReference {
    [CompilerGeneratedAttribute]
private SelectedState <SelectedState>k__BackingField;
    [CompilerGeneratedAttribute]
private UserSelectedState <UserSelectedState>k__BackingField;
    [DataMemberAttribute]
public SelectedState SelectedState { get; public set; }
    [DataMemberAttribute]
public UserSelectedState UserSelectedState { get; public set; }
    public static SelectablePackageReference FromSelectablePackage(ISelectablePackage package);
    [CompilerGeneratedAttribute]
public sealed virtual SelectedState get_SelectedState();
    [CompilerGeneratedAttribute]
public sealed virtual void set_SelectedState(SelectedState value);
    [CompilerGeneratedAttribute]
public sealed virtual UserSelectedState get_UserSelectedState();
    [CompilerGeneratedAttribute]
public sealed virtual void set_UserSelectedState(UserSelectedState value);
    public virtual string ToString();
    protected static bool Equals(ISelectablePackageReference x, ISelectablePackageReference y);
    private sealed virtual override bool System.IEquatable<Microsoft.VisualStudio.Setup.Cache.ISelectablePackageReference>.Equals(ISelectablePackageReference other);
}
public class Microsoft.VisualStudio.Setup.Cache.SelectablePackageReferenceCollection : IndexedCollection`1<SelectablePackageReference> {
    public SelectablePackageReferenceCollection(IEqualityComparer`1<SelectablePackageReference> comparer);
}
[ManifestVersionAttribute("1.1")]
[DataContractAttribute]
public class Microsoft.VisualStudio.Setup.Catalog : Manifest`1<IPackage> {
    public static Version HashOnlyCheckVersion;
    private static string VersionString;
    public static Version CurrentVersion;
    [CompilerGeneratedAttribute]
private AppliesToCollection <AppliesTo>k__BackingField;
    [CompilerGeneratedAttribute]
private DependencyCollection <Deprecate>k__BackingField;
    [DataMemberAttribute]
public AppliesToCollection AppliesTo { get; public set; }
    [DataMemberAttribute]
[SerializationContextAttribute("1")]
public IList`1<IPackage> Packages { get; }
    [DataMemberAttribute]
[SerializationContextAttribute("1")]
public DependencyCollection Deprecate { get; public set; }
    private string Microsoft.VisualStudio.Setup.IApplicabilityInfo.Name { get; }
    private Version Microsoft.VisualStudio.Setup.IApplicabilityInfo.Version { get; }
    private string Microsoft.VisualStudio.Setup.IApplicabilityInfo.Branch { get; }
    private static Catalog();
    [CompilerGeneratedAttribute]
public AppliesToCollection get_AppliesTo();
    [CompilerGeneratedAttribute]
public void set_AppliesTo(AppliesToCollection value);
    public IList`1<IPackage> get_Packages();
    [CompilerGeneratedAttribute]
public DependencyCollection get_Deprecate();
    [CompilerGeneratedAttribute]
public void set_Deprecate(DependencyCollection value);
    private sealed virtual override string Microsoft.VisualStudio.Setup.IApplicabilityInfo.get_Name();
    private sealed virtual override Version Microsoft.VisualStudio.Setup.IApplicabilityInfo.get_Version();
    private sealed virtual override string Microsoft.VisualStudio.Setup.IApplicabilityInfo.get_Branch();
    public static Catalog Parse(IServiceProvider services, string path);
    public static Catalog Parse(IServiceProvider services, string path, PartialManifestType defaultType);
    [AsyncStateMachineAttribute("Microsoft.VisualStudio.Setup.Catalog/<ParseAsync>d__21")]
public static Task`1<Catalog> ParseAsync(IServiceProvider services, string path, CancellationToken token);
    [AsyncStateMachineAttribute("Microsoft.VisualStudio.Setup.Catalog/<ParseAsync>d__22")]
public static Task`1<Catalog> ParseAsync(IServiceProvider services, string path, PartialManifestType defaultType, CancellationToken token);
    public static Catalog ParseJson(IServiceProvider services, string catalogJson);
    public static Catalog ParseJson(IServiceProvider services, string catalogJson, PartialManifestType defaultType);
    public static string WriteToJson(IServiceProvider services, Catalog catalog);
    public void SetOrigin(PartialManifestType defaultType);
    private void SetPayloadIsDynamicEndPoint(PartialManifestType defaultType);
    public bool IsApplicable(IApplicabilityInfo catalog);
}
[DataContractAttribute]
public class Microsoft.VisualStudio.Setup.CatalogBuildInformation : BuildInformation {
}
[DataContractAttribute]
public class Microsoft.VisualStudio.Setup.CatalogInfo : ExtensibleObject {
    internal static string IsRetiredPropertyName;
    internal static string ExpirationDatePropertyName;
    [CompilerGeneratedAttribute]
private bool <UseExternalVersionFormat>k__BackingField;
    public string Id { get; public set; }
    public string ManifestName { get; public set; }
    public string ManifestType { get; public set; }
    public string ProductName { get; public set; }
    public string CommunityOrLowerFlightId { get; public set; }
    public string ProfessionalOrGreaterFlightId { get; public set; }
    public string ProductLine { get; public set; }
    public string ProductLineVersion { get; public set; }
    public string ProductRelease { get; public set; }
    public string ProductMilestone { get; public set; }
    public Nullable`1<bool> ProductMilestoneIsPreRelease { get; public set; }
    public int ProductPatchVersion { get; public set; }
    public string ProductDisplayVersion { get; public set; }
    public string ProductSemanticVersion { get; public set; }
    public string BuildBranch { get; public set; }
    [ObsoleteAttribute("'BuildNumber' has been superseded by 'BuildVersion'. For compatibility, use the GetManifestBuildNumber extension method.", "False")]
public string BuildNumber { get; public set; }
    public Version BuildVersion { get; public set; }
    public string ProductReleaseNameSuffix { get; public set; }
    public string ProductPreReleaseMilestoneSuffix { get; public set; }
    public Version RequiredEngineVersion { get; public set; }
    public string LocalBuild { get; public set; }
    [IgnoreDataMemberAttribute]
public bool UseExternalVersionFormat { get; public set; }
    [IgnoreDataMemberAttribute]
private string Microsoft.VisualStudio.Setup.IManifestIdentityInfo.ProductPreReleaseMilestone { get; private set; }
    [IgnoreDataMemberAttribute]
public bool IsRetired { get; }
    [IgnoreDataMemberAttribute]
public DateTimeOffset ExpirationDate { get; }
    [ObsoleteAttribute("'ProductFamily' has been renamed to 'ProductLine'", "False")]
[EditorBrowsableAttribute("1")]
public string ProductFamily { get; public set; }
    [ObsoleteAttribute("'ProductFamilyVersion' has been renamed to 'ProductLineVersion'", "False")]
[EditorBrowsableAttribute("1")]
public string ProductFamilyVersion { get; public set; }
    private static CatalogInfo();
    internal static CatalogInfo ExtractFromManifest(IFileSystem fileSystem, string filePath);
    public sealed virtual string get_Id();
    public sealed virtual void set_Id(string value);
    public sealed virtual string get_ManifestName();
    public sealed virtual void set_ManifestName(string value);
    public string get_ManifestType();
    public void set_ManifestType(string value);
    public string get_ProductName();
    public void set_ProductName(string value);
    public string get_CommunityOrLowerFlightId();
    public void set_CommunityOrLowerFlightId(string value);
    public string get_ProfessionalOrGreaterFlightId();
    public void set_ProfessionalOrGreaterFlightId(string value);
    public string get_ProductLine();
    public void set_ProductLine(string value);
    public string get_ProductLineVersion();
    public void set_ProductLineVersion(string value);
    public string get_ProductRelease();
    public void set_ProductRelease(string value);
    public string get_ProductMilestone();
    public void set_ProductMilestone(string value);
    public Nullable`1<bool> get_ProductMilestoneIsPreRelease();
    public void set_ProductMilestoneIsPreRelease(Nullable`1<bool> value);
    public sealed virtual int get_ProductPatchVersion();
    public sealed virtual void set_ProductPatchVersion(int value);
    public sealed virtual string get_ProductDisplayVersion();
    public sealed virtual void set_ProductDisplayVersion(string value);
    public sealed virtual string get_ProductSemanticVersion();
    public sealed virtual void set_ProductSemanticVersion(string value);
    public sealed virtual string get_BuildBranch();
    public sealed virtual void set_BuildBranch(string value);
    public string get_BuildNumber();
    public void set_BuildNumber(string value);
    public sealed virtual Version get_BuildVersion();
    public sealed virtual void set_BuildVersion(Version value);
    public sealed virtual string get_ProductReleaseNameSuffix();
    public sealed virtual void set_ProductReleaseNameSuffix(string value);
    public sealed virtual string get_ProductPreReleaseMilestoneSuffix();
    public sealed virtual void set_ProductPreReleaseMilestoneSuffix(string value);
    public sealed virtual Version get_RequiredEngineVersion();
    public sealed virtual void set_RequiredEngineVersion(Version value);
    internal static Version ParseVersionOrNull(string value);
    public string get_LocalBuild();
    public void set_LocalBuild(string value);
    public virtual string ToString();
    [CompilerGeneratedAttribute]
public sealed virtual bool get_UseExternalVersionFormat();
    [CompilerGeneratedAttribute]
public sealed virtual void set_UseExternalVersionFormat(bool value);
    private sealed virtual override string Microsoft.VisualStudio.Setup.IManifestIdentityInfo.get_ProductPreReleaseMilestone();
    private sealed virtual override void Microsoft.VisualStudio.Setup.IManifestIdentityInfo.set_ProductPreReleaseMilestone(string value);
    public bool get_IsRetired();
    public DateTimeOffset get_ExpirationDate();
    public string get_ProductFamily();
    public void set_ProductFamily(string value);
    public string get_ProductFamilyVersion();
    public void set_ProductFamilyVersion(string value);
}
public class Microsoft.VisualStudio.Setup.ChannelItemFactory : object {
    public static IChannelItemFactory Default;
    private static Dictionary`2<ChannelItemType, Func`1<IChannelItem>> ItemConstrutors;
    private static ChannelItemFactory();
    public sealed virtual IChannelItem Create(ChannelItemType type);
    public sealed virtual ChannelItemType GetChannelItemType(string type);
}
public class Microsoft.VisualStudio.Setup.ChannelSets.BootstrapperItem : ChannelItemWithPayloads {
    [CompilerGeneratedAttribute]
private ChannelItemType <Type>k__BackingField;
    [CompilerGeneratedAttribute]
private Version <InstallerVersion>k__BackingField;
    public ChannelItemType Type { get; }
    [DataMemberAttribute]
public Version InstallerVersion { get; public set; }
    [CompilerGeneratedAttribute]
public virtual ChannelItemType get_Type();
    [CompilerGeneratedAttribute]
public sealed virtual Version get_InstallerVersion();
    [CompilerGeneratedAttribute]
public void set_InstallerVersion(Version value);
}
public class Microsoft.VisualStudio.Setup.ChannelSets.Channel : object {
    private static IList`1<LocalizedResource> EmptyLocalizedResources;
    [CompilerGeneratedAttribute]
private IChannelManifest <ChannelManifest>k__BackingField;
    [CompilerGeneratedAttribute]
private ChannelNode`1<IChannelHeaderItem> <ChannelHeader>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<ChannelNode`1<IProductSummaryItem>> <ProductSummaries>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<ChannelNode`1<IBootstrapperItem>> <Bootstrappers>k__BackingField;
    [CompilerGeneratedAttribute]
private ChannelNode`1<IManifestItem> <ProductManifest>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<ChannelNode`1<ISetupPackageItem>> <SetupPackages>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<ChannelNode`1<ISetupManifestItem>> <SetupManifests>k__BackingField;
    public IChannelManifest ChannelManifest { get; }
    public ChannelNode`1<IChannelHeaderItem> ChannelHeader { get; }
    public IEnumerable`1<ChannelNode`1<IProductSummaryItem>> ProductSummaries { get; }
    public IEnumerable`1<ChannelNode`1<IBootstrapperItem>> Bootstrappers { get; }
    public ChannelNode`1<IManifestItem> ProductManifest { get; }
    public IEnumerable`1<ChannelNode`1<ISetupPackageItem>> SetupPackages { get; }
    public IEnumerable`1<ChannelNode`1<ISetupManifestItem>> SetupManifests { get; }
    public string Id { get; }
    public Version Version { get; }
    public string Chip { get; }
    public string Language { get; }
    public string Branch { get; }
    public string ProductArch { get; }
    public string MachineArch { get; }
    public IList`1<LocalizedResource> LocalizedResources { get; }
    public Channel(IChannelManifest channelManfiest, bool validate);
    private static Channel();
    [CompilerGeneratedAttribute]
public sealed virtual IChannelManifest get_ChannelManifest();
    [CompilerGeneratedAttribute]
public sealed virtual ChannelNode`1<IChannelHeaderItem> get_ChannelHeader();
    [CompilerGeneratedAttribute]
public sealed virtual IEnumerable`1<ChannelNode`1<IProductSummaryItem>> get_ProductSummaries();
    [CompilerGeneratedAttribute]
public sealed virtual IEnumerable`1<ChannelNode`1<IBootstrapperItem>> get_Bootstrappers();
    [CompilerGeneratedAttribute]
public sealed virtual ChannelNode`1<IManifestItem> get_ProductManifest();
    [CompilerGeneratedAttribute]
public sealed virtual IEnumerable`1<ChannelNode`1<ISetupPackageItem>> get_SetupPackages();
    [CompilerGeneratedAttribute]
public sealed virtual IEnumerable`1<ChannelNode`1<ISetupManifestItem>> get_SetupManifests();
    public sealed virtual string get_Id();
    public sealed virtual Version get_Version();
    public sealed virtual string get_Chip();
    public sealed virtual string get_Language();
    public sealed virtual string get_Branch();
    public sealed virtual string get_ProductArch();
    public sealed virtual string get_MachineArch();
    public sealed virtual IList`1<LocalizedResource> get_LocalizedResources();
    public sealed virtual string GetUniqueId();
    public sealed virtual bool Equals(IPackageIdentity other);
    public virtual string ToString();
    private ChannelNode`1<T> GetSingleItem(bool required);
    private IEnumerable`1<ChannelNode`1<T>> GetMultipleItems(bool required);
    [CompilerGeneratedAttribute]
private ChannelNode`1<T> <GetMultipleItems>b__43_0(T i);
}
public class Microsoft.VisualStudio.Setup.ChannelSets.ChannelCompositionException : InvalidOperationException {
    public ChannelCompositionException(string message);
    public ChannelCompositionException(string message, Exception inner);
    protected ChannelCompositionException(SerializationInfo info, StreamingContext context);
}
[DataContractAttribute]
public class Microsoft.VisualStudio.Setup.ChannelSets.ChannelFeed : object {
    private static ChannelFeedSerializer ChannelFeedSerializer;
    [CompilerGeneratedAttribute]
private Version <Version>k__BackingField;
    [CompilerGeneratedAttribute]
private ICollection`1<ChannelSummary> <Channels>k__BackingField;
    [CompilerGeneratedAttribute]
private object <Signature>k__BackingField;
    [CompilerGeneratedAttribute]
private Uri <UpdateUri>k__BackingField;
    [DataMemberAttribute]
public Version Version { get; public set; }
    [DataMemberAttribute]
public ICollection`1<ChannelSummary> Channels { get; }
    [DataMemberAttribute]
public object Signature { get; public set; }
    [IgnoreDataMemberAttribute]
public Uri UpdateUri { get; public set; }
    private static ChannelFeed();
    [CompilerGeneratedAttribute]
public Version get_Version();
    [CompilerGeneratedAttribute]
public void set_Version(Version value);
    [CompilerGeneratedAttribute]
public ICollection`1<ChannelSummary> get_Channels();
    [CompilerGeneratedAttribute]
public object get_Signature();
    [CompilerGeneratedAttribute]
public void set_Signature(object value);
    [CompilerGeneratedAttribute]
public Uri get_UpdateUri();
    [CompilerGeneratedAttribute]
public void set_UpdateUri(Uri value);
    public static ChannelFeed Parse(IServiceProvider services, string path, bool verifySignature);
}
public class Microsoft.VisualStudio.Setup.ChannelSets.ChannelHeaderItem : ChannelItem {
    [CompilerGeneratedAttribute]
private ChannelItemType <Type>k__BackingField;
    public ChannelItemType Type { get; }
    [CompilerGeneratedAttribute]
public virtual ChannelItemType get_Type();
}
[DataContractAttribute]
public abstract class Microsoft.VisualStudio.Setup.ChannelSets.ChannelItem : object {
    private string id;
    private Version version;
    private string chip;
    private string language;
    private string branch;
    private string productArch;
    private string machineArch;
    private string uniqueId;
    [CompilerGeneratedAttribute]
private IList`1<LocalizedResource> <LocalizedResources>k__BackingField;
    [CompilerGeneratedAttribute]
private ItemBuildInformation <Microsoft.VisualStudio.Setup.IItemBuildInformation.BuildInformation>k__BackingField;
    [CompilerGeneratedAttribute]
private IDictionary`2<string, JToken> <ExtensionData>k__BackingField;
    [DataMemberAttribute]
public string Id { get; public set; }
    [DataMemberAttribute]
[JsonConverterAttribute("Newtonsoft.Json.Converters.VersionConverter")]
public Version Version { get; public set; }
    [DataMemberAttribute]
[JsonConverterAttribute("Newtonsoft.Json.Converters.StringEnumConverter")]
public ChannelItemType Type { get; }
    [DataMemberAttribute]
public string Chip { get; public set; }
    [DataMemberAttribute]
public string Language { get; public set; }
    [DataMemberAttribute]
public string Branch { get; public set; }
    [DataMemberAttribute]
public string ProductArch { get; public set; }
    [DataMemberAttribute]
public string MachineArch { get; public set; }
    [DataMemberAttribute]
public IList`1<LocalizedResource> LocalizedResources { get; internal set; }
    [DataMemberAttribute]
private ItemBuildInformation Microsoft.VisualStudio.Setup.IItemBuildInformation.BuildInformation { get; private set; }
    internal IDictionary`2<string, JToken> ExtensionData { get; private set; }
    public sealed virtual string get_Id();
    public void set_Id(string value);
    public sealed virtual Version get_Version();
    public void set_Version(Version value);
    public abstract virtual ChannelItemType get_Type();
    public sealed virtual string get_Chip();
    public void set_Chip(string value);
    public sealed virtual string get_Language();
    public void set_Language(string value);
    public sealed virtual string get_Branch();
    public void set_Branch(string value);
    public sealed virtual string get_ProductArch();
    public void set_ProductArch(string value);
    public sealed virtual string get_MachineArch();
    public void set_MachineArch(string value);
    [CompilerGeneratedAttribute]
public sealed virtual IList`1<LocalizedResource> get_LocalizedResources();
    [CompilerGeneratedAttribute]
internal void set_LocalizedResources(IList`1<LocalizedResource> value);
    [CompilerGeneratedAttribute]
private sealed virtual override ItemBuildInformation Microsoft.VisualStudio.Setup.IItemBuildInformation.get_BuildInformation();
    [CompilerGeneratedAttribute]
private sealed virtual override void Microsoft.VisualStudio.Setup.IItemBuildInformation.set_BuildInformation(ItemBuildInformation value);
    public sealed virtual string GetUniqueId();
    public sealed virtual bool Equals(IPackageIdentity other);
    public virtual string ToString();
    [CompilerGeneratedAttribute]
internal IDictionary`2<string, JToken> get_ExtensionData();
    [CompilerGeneratedAttribute]
private void set_ExtensionData(IDictionary`2<string, JToken> value);
    private void SetToken(T& token, T value);
}
public enum Microsoft.VisualStudio.Setup.ChannelSets.ChannelItemType : Enum {
    public int value__;
    public static ChannelItemType ChannelProduct;
    public static ChannelItemType Channel;
    public static ChannelItemType Manifest;
    public static ChannelItemType SetupPackage;
    public static ChannelItemType Bootstrapper;
    public static ChannelItemType SetupManifest;
}
[DataContractAttribute]
public abstract class Microsoft.VisualStudio.Setup.ChannelSets.ChannelItemWithPayloads : ChannelItem {
    [CompilerGeneratedAttribute]
private InstallSize <InstallSizes>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<Payload> <Payloads>k__BackingField;
    [DataMemberAttribute]
public InstallSize InstallSizes { get; public set; }
    [DataMemberAttribute]
public IList`1<Payload> Payloads { get; private set; }
    [CompilerGeneratedAttribute]
public sealed virtual InstallSize get_InstallSizes();
    [CompilerGeneratedAttribute]
public void set_InstallSizes(InstallSize value);
    [CompilerGeneratedAttribute]
public sealed virtual IList`1<Payload> get_Payloads();
    [CompilerGeneratedAttribute]
private void set_Payloads(IList`1<Payload> value);
}
[ManifestVersionAttribute("1.1")]
[DataContractAttribute]
public class Microsoft.VisualStudio.Setup.ChannelSets.ChannelManifest : Manifest`1<IChannelItem> {
    private static string VersionString;
    public static Version CurrentVersion;
    [CompilerGeneratedAttribute]
private Uri <UpdateUri>k__BackingField;
    [CompilerGeneratedAttribute]
private Uri <InstallCatalogUri>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <CanUpdate>k__BackingField;
    [DataMemberAttribute]
public Uri UpdateUri { get; public set; }
    [DataMemberAttribute]
public Uri InstallCatalogUri { get; public set; }
    [DataMemberAttribute]
public bool CanUpdate { get; public set; }
    [DataMemberAttribute]
public IList`1<IChannelItem> ChannelItems { get; }
    [IgnoreDataMemberAttribute]
public bool IsRetired { get; }
    [IgnoreDataMemberAttribute]
public bool IsExpired { get; }
    [IgnoreDataMemberAttribute]
public DateTimeOffset ExpirationDate { get; }
    private static ChannelManifest();
    public static ChannelManifest Parse(IServiceProvider services, string path);
    [AsyncStateMachineAttribute("Microsoft.VisualStudio.Setup.ChannelSets.ChannelManifest/<ParseAsync>d__3")]
public static Task`1<ChannelManifest> ParseAsync(IServiceProvider services, string path, CancellationToken token);
    public static ChannelManifest ParseJson(IServiceProvider services, string catalogJson);
    [CompilerGeneratedAttribute]
public sealed virtual Uri get_UpdateUri();
    [CompilerGeneratedAttribute]
public sealed virtual void set_UpdateUri(Uri value);
    [CompilerGeneratedAttribute]
public sealed virtual Uri get_InstallCatalogUri();
    [CompilerGeneratedAttribute]
public sealed virtual void set_InstallCatalogUri(Uri value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_CanUpdate();
    [CompilerGeneratedAttribute]
public sealed virtual void set_CanUpdate(bool value);
    public sealed virtual IList`1<IChannelItem> get_ChannelItems();
    public sealed virtual bool get_IsRetired();
    public sealed virtual bool get_IsExpired();
    public sealed virtual DateTimeOffset get_ExpirationDate();
    public sealed virtual IChannel GetChannel(bool validate);
}
public class Microsoft.VisualStudio.Setup.ChannelSets.ChannelManifestPair : object {
    [CompilerGeneratedAttribute]
private IChannelManifest <ChannelManifest>k__BackingField;
    [CompilerGeneratedAttribute]
private IChannelManifest <InstallChannelManifest>k__BackingField;
    public IChannelManifest ChannelManifest { get; private set; }
    public IChannelManifest InstallChannelManifest { get; private set; }
    public ChannelManifestPair(IChannelManifest channelManifest, IChannelManifest installChannelManifest);
    [CompilerGeneratedAttribute]
public IChannelManifest get_ChannelManifest();
    [CompilerGeneratedAttribute]
private void set_ChannelManifest(IChannelManifest value);
    [CompilerGeneratedAttribute]
public IChannelManifest get_InstallChannelManifest();
    [CompilerGeneratedAttribute]
private void set_InstallChannelManifest(IChannelManifest value);
}
public class Microsoft.VisualStudio.Setup.ChannelSets.ChannelNode`1 : object {
    [CompilerGeneratedAttribute]
private T <Item>k__BackingField;
    [CompilerGeneratedAttribute]
private IChannel <Channel>k__BackingField;
    public T Item { get; }
    public IChannel Channel { get; }
    public ChannelNode`1(IChannel channel, T item);
    [CompilerGeneratedAttribute]
public T get_Item();
    [CompilerGeneratedAttribute]
public IChannel get_Channel();
}
public enum Microsoft.VisualStudio.Setup.ChannelSets.ChannelStatus : Enum {
    public int value__;
    public static ChannelStatus None;
    public static ChannelStatus Cached;
    public static ChannelStatus CheckingForUpdates;
    public static ChannelStatus Online;
    public static ChannelStatus Offline;
    public static ChannelStatus EngineUpdateRequired;
    public static ChannelStatus Retired;
    public static ChannelStatus Expired;
}
[DataContractAttribute]
public class Microsoft.VisualStudio.Setup.ChannelSets.ChannelSummary : object {
    private bool isRetired;
    [CompilerGeneratedAttribute]
private Uri <ChannelUri>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ChannelId>k__BackingField;
    [CompilerGeneratedAttribute]
private ChannelSummaryType <Type>k__BackingField;
    [CompilerGeneratedAttribute]
private Version <Version>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DisplayVersion>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTimeOffset <ExpirationDate>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsAdvertised>k__BackingField;
    [CompilerGeneratedAttribute]
private ICollection`1<ChannelSummaryProduct> <Products>k__BackingField;
    [CompilerGeneratedAttribute]
private ICollection`1<LocalizedResource> <LocalizedResources>k__BackingField;
    [DataMemberAttribute]
public Uri ChannelUri { get; public set; }
    [DataMemberAttribute]
public string ChannelId { get; public set; }
    [DataMemberAttribute]
public ChannelSummaryType Type { get; public set; }
    [DataMemberAttribute]
public Version Version { get; public set; }
    [DataMemberAttribute]
public string DisplayVersion { get; public set; }
    [DataMemberAttribute]
public DateTimeOffset ExpirationDate { get; public set; }
    [DataMemberAttribute]
public bool IsAdvertised { get; public set; }
    [DataMemberAttribute]
public bool IsRetired { get; public set; }
    [IgnoreDataMemberAttribute]
public bool IsExpired { get; }
    [DataMemberAttribute]
public ICollection`1<ChannelSummaryProduct> Products { get; }
    [DataMemberAttribute]
public ICollection`1<LocalizedResource> LocalizedResources { get; }
    [CompilerGeneratedAttribute]
public Uri get_ChannelUri();
    [CompilerGeneratedAttribute]
public void set_ChannelUri(Uri value);
    [CompilerGeneratedAttribute]
public string get_ChannelId();
    [CompilerGeneratedAttribute]
public void set_ChannelId(string value);
    [CompilerGeneratedAttribute]
public ChannelSummaryType get_Type();
    [CompilerGeneratedAttribute]
public void set_Type(ChannelSummaryType value);
    [CompilerGeneratedAttribute]
public Version get_Version();
    [CompilerGeneratedAttribute]
public void set_Version(Version value);
    [CompilerGeneratedAttribute]
public string get_DisplayVersion();
    [CompilerGeneratedAttribute]
public void set_DisplayVersion(string value);
    [CompilerGeneratedAttribute]
public DateTimeOffset get_ExpirationDate();
    [CompilerGeneratedAttribute]
public void set_ExpirationDate(DateTimeOffset value);
    [CompilerGeneratedAttribute]
public bool get_IsAdvertised();
    [CompilerGeneratedAttribute]
public void set_IsAdvertised(bool value);
    public bool get_IsRetired();
    public void set_IsRetired(bool value);
    public bool get_IsExpired();
    [CompilerGeneratedAttribute]
public ICollection`1<ChannelSummaryProduct> get_Products();
    [CompilerGeneratedAttribute]
public ICollection`1<LocalizedResource> get_LocalizedResources();
    public bool IsSupportedProduct(string productId, string productArch);
    public void OverlayChannel(IChannelManifest channelManifest);
}
public class Microsoft.VisualStudio.Setup.ChannelSets.ChannelSummaryComparer : object {
    public static ChannelSummaryComparer Default;
    private static ChannelSummaryComparer();
    public sealed virtual bool Equals(ChannelSummary x, ChannelSummary y);
    public sealed virtual int GetHashCode(ChannelSummary obj);
}
[DataContractAttribute]
public class Microsoft.VisualStudio.Setup.ChannelSets.ChannelSummaryProduct : object {
    [CompilerGeneratedAttribute]
private string <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private Uri <ReleaseNotes>k__BackingField;
    [CompilerGeneratedAttribute]
private Uri <License>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Supported>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ProductArch>k__BackingField;
    [DataMemberAttribute]
public string Id { get; public set; }
    [DataMemberAttribute]
public Uri ReleaseNotes { get; public set; }
    [DataMemberAttribute]
public Uri License { get; public set; }
    [DataMemberAttribute]
public bool Supported { get; public set; }
    [DataMemberAttribute]
public string ProductArch { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Id();
    [CompilerGeneratedAttribute]
public void set_Id(string value);
    [CompilerGeneratedAttribute]
public Uri get_ReleaseNotes();
    [CompilerGeneratedAttribute]
public void set_ReleaseNotes(Uri value);
    [CompilerGeneratedAttribute]
public Uri get_License();
    [CompilerGeneratedAttribute]
public void set_License(Uri value);
    [CompilerGeneratedAttribute]
public bool get_Supported();
    [CompilerGeneratedAttribute]
public void set_Supported(bool value);
    [CompilerGeneratedAttribute]
public string get_ProductArch();
    [CompilerGeneratedAttribute]
public void set_ProductArch(string value);
}
public enum Microsoft.VisualStudio.Setup.ChannelSets.ChannelSummaryType : Enum {
    public int value__;
    public static ChannelSummaryType None;
    public static ChannelSummaryType Local;
    public static ChannelSummaryType Universal;
    public static ChannelSummaryType Layout;
}
public interface Microsoft.VisualStudio.Setup.ChannelSets.IBootstrapperItem {
    public Version InstallerVersion { get; }
    public abstract virtual Version get_InstallerVersion();
}
public interface Microsoft.VisualStudio.Setup.ChannelSets.IChannel {
    public IChannelManifest ChannelManifest { get; }
    public ChannelNode`1<IChannelHeaderItem> ChannelHeader { get; }
    public IEnumerable`1<ChannelNode`1<IProductSummaryItem>> ProductSummaries { get; }
    public IEnumerable`1<ChannelNode`1<IBootstrapperItem>> Bootstrappers { get; }
    public ChannelNode`1<IManifestItem> ProductManifest { get; }
    public IEnumerable`1<ChannelNode`1<ISetupPackageItem>> SetupPackages { get; }
    public IEnumerable`1<ChannelNode`1<ISetupManifestItem>> SetupManifests { get; }
    public abstract virtual IChannelManifest get_ChannelManifest();
    public abstract virtual ChannelNode`1<IChannelHeaderItem> get_ChannelHeader();
    public abstract virtual IEnumerable`1<ChannelNode`1<IProductSummaryItem>> get_ProductSummaries();
    public abstract virtual IEnumerable`1<ChannelNode`1<IBootstrapperItem>> get_Bootstrappers();
    public abstract virtual ChannelNode`1<IManifestItem> get_ProductManifest();
    public abstract virtual IEnumerable`1<ChannelNode`1<ISetupPackageItem>> get_SetupPackages();
    public abstract virtual IEnumerable`1<ChannelNode`1<ISetupManifestItem>> get_SetupManifests();
}
public interface Microsoft.VisualStudio.Setup.ChannelSets.IChannelHeaderItem {
}
public interface Microsoft.VisualStudio.Setup.ChannelSets.IChannelItem {
    public ChannelItemType Type { get; }
    public abstract virtual ChannelItemType get_Type();
}
public interface Microsoft.VisualStudio.Setup.ChannelSets.IChannelItemFactory {
    public abstract virtual IChannelItem Create(ChannelItemType channelItemType);
    public abstract virtual ChannelItemType GetChannelItemType(string type);
}
public interface Microsoft.VisualStudio.Setup.ChannelSets.IChannelItemWithPayloads {
}
public interface Microsoft.VisualStudio.Setup.ChannelSets.IChannelManifest {
    public Uri UpdateUri { get; public set; }
    public Uri InstallCatalogUri { get; public set; }
    public bool CanUpdate { get; public set; }
    public IList`1<IChannelItem> ChannelItems { get; }
    public bool IsRetired { get; }
    public bool IsExpired { get; }
    public DateTimeOffset ExpirationDate { get; }
    public abstract virtual Uri get_UpdateUri();
    public abstract virtual void set_UpdateUri(Uri value);
    public abstract virtual Uri get_InstallCatalogUri();
    public abstract virtual void set_InstallCatalogUri(Uri value);
    public abstract virtual bool get_CanUpdate();
    public abstract virtual void set_CanUpdate(bool value);
    public abstract virtual IList`1<IChannelItem> get_ChannelItems();
    public abstract virtual bool get_IsRetired();
    public abstract virtual bool get_IsExpired();
    public abstract virtual DateTimeOffset get_ExpirationDate();
    public abstract virtual IChannel GetChannel(bool validate);
}
public interface Microsoft.VisualStudio.Setup.ChannelSets.IManifestItem {
}
public interface Microsoft.VisualStudio.Setup.ChannelSets.IProductSummaryItem {
    public Icon Icon { get; }
    public bool IsHidden { get; }
    public Uri ReleaseNotes { get; }
    public bool SupportsDownloadThenUpdate { get; }
    public abstract virtual Icon get_Icon();
    public abstract virtual bool get_IsHidden();
    public abstract virtual Uri get_ReleaseNotes();
    public abstract virtual bool get_SupportsDownloadThenUpdate();
}
public interface Microsoft.VisualStudio.Setup.ChannelSets.ISetupManifestItem {
    public string ClientId { get; public set; }
    public abstract virtual string get_ClientId();
    public abstract virtual void set_ClientId(string value);
}
public interface Microsoft.VisualStudio.Setup.ChannelSets.ISetupPackageItem {
    public string ClientId { get; public set; }
    public abstract virtual string get_ClientId();
    public abstract virtual void set_ClientId(string value);
}
[DataContractAttribute]
public class Microsoft.VisualStudio.Setup.ChannelSets.LatestInstallerFeed : object {
    private static ModelSerializer`1<LatestInstallerFeed> LatestInstallerSerializer;
    [CompilerGeneratedAttribute]
private Version <InstallerVersion>k__BackingField;
    [CompilerGeneratedAttribute]
private Version <SetupPackageVersion>k__BackingField;
    [CompilerGeneratedAttribute]
private Uri <InstallerUrl>k__BackingField;
    [CompilerGeneratedAttribute]
private Uri <BootstrapperUrl>k__BackingField;
    [CompilerGeneratedAttribute]
private object <Signature>k__BackingField;
    [DataMemberAttribute]
public Version InstallerVersion { get; public set; }
    [DataMemberAttribute]
public Version SetupPackageVersion { get; public set; }
    [DataMemberAttribute]
public Uri InstallerUrl { get; public set; }
    [DataMemberAttribute]
public Uri BootstrapperUrl { get; public set; }
    [DataMemberAttribute]
public object Signature { get; public set; }
    private static LatestInstallerFeed();
    [CompilerGeneratedAttribute]
public Version get_InstallerVersion();
    [CompilerGeneratedAttribute]
public void set_InstallerVersion(Version value);
    [CompilerGeneratedAttribute]
public Version get_SetupPackageVersion();
    [CompilerGeneratedAttribute]
public void set_SetupPackageVersion(Version value);
    [CompilerGeneratedAttribute]
public Uri get_InstallerUrl();
    [CompilerGeneratedAttribute]
public void set_InstallerUrl(Uri value);
    [CompilerGeneratedAttribute]
public Uri get_BootstrapperUrl();
    [CompilerGeneratedAttribute]
public void set_BootstrapperUrl(Uri value);
    [CompilerGeneratedAttribute]
public object get_Signature();
    [CompilerGeneratedAttribute]
public void set_Signature(object value);
    public static LatestInstallerFeed Parse(IServiceProvider services, string path, bool verifySignature);
    public static LatestInstallerFeed Parse(Stream stream);
}
public class Microsoft.VisualStudio.Setup.ChannelSets.ManifestItem : ChannelItemWithPayloads {
    [CompilerGeneratedAttribute]
private ChannelItemType <Type>k__BackingField;
    public ChannelItemType Type { get; }
    [CompilerGeneratedAttribute]
public virtual ChannelItemType get_Type();
}
public class Microsoft.VisualStudio.Setup.ChannelSets.ProductSummaryItem : ChannelItem {
    [CompilerGeneratedAttribute]
private ChannelItemType <Type>k__BackingField;
    [CompilerGeneratedAttribute]
private Icon <Icon>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsHidden>k__BackingField;
    [CompilerGeneratedAttribute]
private Uri <ReleaseNotes>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <SupportsDownloadThenUpdate>k__BackingField;
    [CompilerGeneratedAttribute]
private Requirement <Requirements>k__BackingField;
    [CompilerGeneratedAttribute]
private ApplicabilityState <ApplicabilityState>k__BackingField;
    public ChannelItemType Type { get; }
    [DataMemberAttribute]
public Icon Icon { get; public set; }
    [DataMemberAttribute]
public bool IsHidden { get; public set; }
    [DataMemberAttribute]
public Uri ReleaseNotes { get; public set; }
    [DataMemberAttribute]
public bool SupportsDownloadThenUpdate { get; public set; }
    [DataMemberAttribute]
public Requirement Requirements { get; public set; }
    [IgnoreDataMemberAttribute]
public ApplicabilityState ApplicabilityState { get; public set; }
    [CompilerGeneratedAttribute]
public virtual ChannelItemType get_Type();
    [CompilerGeneratedAttribute]
public sealed virtual Icon get_Icon();
    [CompilerGeneratedAttribute]
public void set_Icon(Icon value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_IsHidden();
    [CompilerGeneratedAttribute]
public void set_IsHidden(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual Uri get_ReleaseNotes();
    [CompilerGeneratedAttribute]
public void set_ReleaseNotes(Uri value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_SupportsDownloadThenUpdate();
    [CompilerGeneratedAttribute]
public void set_SupportsDownloadThenUpdate(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual Requirement get_Requirements();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Requirements(Requirement value);
    [CompilerGeneratedAttribute]
public sealed virtual ApplicabilityState get_ApplicabilityState();
    [CompilerGeneratedAttribute]
public sealed virtual void set_ApplicabilityState(ApplicabilityState value);
}
public class Microsoft.VisualStudio.Setup.ChannelSets.SetupManifestItem : ChannelItemWithPayloads {
    [CompilerGeneratedAttribute]
private string <ClientId>k__BackingField;
    [CompilerGeneratedAttribute]
private ChannelItemType <Type>k__BackingField;
    [DataMemberAttribute]
public string ClientId { get; public set; }
    public ChannelItemType Type { get; }
    [CompilerGeneratedAttribute]
public sealed virtual string get_ClientId();
    [CompilerGeneratedAttribute]
public sealed virtual void set_ClientId(string value);
    [CompilerGeneratedAttribute]
public virtual ChannelItemType get_Type();
}
public class Microsoft.VisualStudio.Setup.ChannelSets.SetupPackageItem : ChannelItemWithPayloads {
    [CompilerGeneratedAttribute]
private string <ClientId>k__BackingField;
    [CompilerGeneratedAttribute]
private ChannelItemType <Type>k__BackingField;
    [DataMemberAttribute]
public string ClientId { get; public set; }
    public ChannelItemType Type { get; }
    [CompilerGeneratedAttribute]
public sealed virtual string get_ClientId();
    [CompilerGeneratedAttribute]
public sealed virtual void set_ClientId(string value);
    [CompilerGeneratedAttribute]
public virtual ChannelItemType get_Type();
}
[DataContractAttribute]
public class Microsoft.VisualStudio.Setup.CommandParameter : object {
    [CompilerGeneratedAttribute]
private string <FileName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Parameters>k__BackingField;
    [DataMemberAttribute]
public string FileName { get; public set; }
    [DataMemberAttribute]
public string Parameters { get; public set; }
    [CompilerGeneratedAttribute]
public string get_FileName();
    [CompilerGeneratedAttribute]
public void set_FileName(string value);
    [CompilerGeneratedAttribute]
public string get_Parameters();
    [CompilerGeneratedAttribute]
public void set_Parameters(string value);
}
[GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "17.0.0.0")]
[DebuggerNonUserCodeAttribute]
[CompilerGeneratedAttribute]
public class Microsoft.VisualStudio.Setup.CommonResources : object {
    private static ResourceManager resourceMan;
    private static CultureInfo resourceCulture;
    [EditorBrowsableAttribute("2")]
public static ResourceManager ResourceManager { get; }
    [EditorBrowsableAttribute("2")]
public static CultureInfo Culture { get; public set; }
    public static string CatalogError_NotLoaded { get; }
    public static string CleaningDisplayText { get; }
    public static string CommandExecuted_Args1 { get; }
    public static string ConflictingDependencyError_Arg1 { get; }
    public static string CyclicDependencyError_Args1 { get; }
    public static string DependentPackageNotFound_Args1 { get; }
    public static string DismUnknownFeature { get; }
    public static string DisplayNameWithChannelSuffix_Args2 { get; }
    public static string DisplayNameWithChannelSuffixAndNickName_Args3 { get; }
    public static string DisplayNameWithNickname_Args2 { get; }
    public static string DowngradeRequestedForUnsupportedPackageTypeError { get; }
    public static string DownloadDisplayText { get; }
    public static string DownloadedChannelIsOlderThanExistingOne_Args1 { get; }
    public static string EmptyFilePath { get; }
    public static string InstallationConfigurationMissingProperty_Args1 { get; }
    public static string InstallationConfigurationUnsupportedVersionError_Args1 { get; }
    public static string InstallationFailed { get; }
    public static string InstallingDisplayText { get; }
    public static string InvalidExtensionDir { get; }
    public static string InvalidInputPaths { get; }
    public static string InvalidLayoutOperationModeError_Args1 { get; }
    public static string LanguageIdUnknown_Args1 { get; }
    public static string LowerPackageError_Args5 { get; }
    public static string MSIFile_Args2 { get; }
    public static string MSIProductCode_Args2 { get; }
    public static string NullError_Args1 { get; }
    public static string OlderExtensionPackages_Args1 { get; }
    public static string OverlappingExperimentError_Args3 { get; }
    public static string PackageIdUnknown_Args1 { get; }
    public static string PackageNoInstall { get; }
    public static string PackageNoRepair { get; }
    public static string PackageNoUninstall { get; }
    public static string SetupCannotRunConcurrently { get; }
    public static string StreamNotReadable { get; }
    public static string StreamNotSeekable { get; }
    public static string UninstallingDisplayText { get; }
    public static string UnknownError_Args1 { get; }
    public static string UnsupportedManifestType_Args1 { get; }
    public static string ValidateError_InvalidDirectoryPath_Args1 { get; }
    public static string ValidateError_InvalidFilePath_Args1 { get; }
    public static string ValidateError_NotEnum { get; }
    public static string ValidateError_OutofRange { get; }
    public static string ValidateError_StringEmpty { get; }
    public static string VerifyingDisplayText { get; }
    public static string VerifyingExistingPackages { get; }
    public static string VsixBreakingExistingExtensionsError { get; }
    public static string VsixCannotUninstallOrphanedComponentsError { get; }
    public static string VsixDependencyError { get; }
    public static string VsixExtensionAlreadyInstalledError { get; }
    public static string VsixFileInUseError { get; }
    public static string VsixIdentifierConflictError { get; }
    public static string VsixInconsistentNestedReferenceIdError { get; }
    public static string VsixInstallByMSIError { get; }
    public static string VsixInstallerNotFoundError { get; }
    public static string VsixInstallExtensionDirectoryExistsError { get; }
    public static string VsixInvalidCatalog { get; }
    public static string VsixInvalidCommandlineArgumentsError { get; }
    public static string VsixInvalidExtensionPackageError { get; }
    public static string VsixInvalidLicenseFormatError { get; }
    public static string VsixInvalidPerMachineOperationError { get; }
    public static string VsixMissingInCache { get; }
    public static string VsixMissingInCache_Args1 { get; }
    public static string VsixMissingManifestError { get; }
    public static string VsixMissingReferenceError { get; }
    public static string VsixMissingTargetFrameworkError { get; }
    public static string VsixNestedExtensionFailedError { get; }
    public static string VsixNonAdminError { get; }
    public static string VsixNotInstalledError { get; }
    public static string VsixNotPendingDeletionError { get; }
    public static string VsixProxyCredentialsRequiredError { get; }
    public static string VsixReferenceConstraintError { get; }
    public static string VsixSKUNotFoundError { get; }
    public static string VsixUnknownError { get; }
    public static string VsixUnsupportedManifestFormatError { get; }
    public static string VsixUnsupportedProductError { get; }
    public static ResourceManager get_ResourceManager();
    public static CultureInfo get_Culture();
    public static void set_Culture(CultureInfo value);
    public static string get_CatalogError_NotLoaded();
    public static string get_CleaningDisplayText();
    public static string get_CommandExecuted_Args1();
    public static string get_ConflictingDependencyError_Arg1();
    public static string get_CyclicDependencyError_Args1();
    public static string get_DependentPackageNotFound_Args1();
    public static string get_DismUnknownFeature();
    public static string get_DisplayNameWithChannelSuffix_Args2();
    public static string get_DisplayNameWithChannelSuffixAndNickName_Args3();
    public static string get_DisplayNameWithNickname_Args2();
    public static string get_DowngradeRequestedForUnsupportedPackageTypeError();
    public static string get_DownloadDisplayText();
    public static string get_DownloadedChannelIsOlderThanExistingOne_Args1();
    public static string get_EmptyFilePath();
    public static string get_InstallationConfigurationMissingProperty_Args1();
    public static string get_InstallationConfigurationUnsupportedVersionError_Args1();
    public static string get_InstallationFailed();
    public static string get_InstallingDisplayText();
    public static string get_InvalidExtensionDir();
    public static string get_InvalidInputPaths();
    public static string get_InvalidLayoutOperationModeError_Args1();
    public static string get_LanguageIdUnknown_Args1();
    public static string get_LowerPackageError_Args5();
    public static string get_MSIFile_Args2();
    public static string get_MSIProductCode_Args2();
    public static string get_NullError_Args1();
    public static string get_OlderExtensionPackages_Args1();
    public static string get_OverlappingExperimentError_Args3();
    public static string get_PackageIdUnknown_Args1();
    public static string get_PackageNoInstall();
    public static string get_PackageNoRepair();
    public static string get_PackageNoUninstall();
    public static string get_SetupCannotRunConcurrently();
    public static string get_StreamNotReadable();
    public static string get_StreamNotSeekable();
    public static string get_UninstallingDisplayText();
    public static string get_UnknownError_Args1();
    public static string get_UnsupportedManifestType_Args1();
    public static string get_ValidateError_InvalidDirectoryPath_Args1();
    public static string get_ValidateError_InvalidFilePath_Args1();
    public static string get_ValidateError_NotEnum();
    public static string get_ValidateError_OutofRange();
    public static string get_ValidateError_StringEmpty();
    public static string get_VerifyingDisplayText();
    public static string get_VerifyingExistingPackages();
    public static string get_VsixBreakingExistingExtensionsError();
    public static string get_VsixCannotUninstallOrphanedComponentsError();
    public static string get_VsixDependencyError();
    public static string get_VsixExtensionAlreadyInstalledError();
    public static string get_VsixFileInUseError();
    public static string get_VsixIdentifierConflictError();
    public static string get_VsixInconsistentNestedReferenceIdError();
    public static string get_VsixInstallByMSIError();
    public static string get_VsixInstallerNotFoundError();
    public static string get_VsixInstallExtensionDirectoryExistsError();
    public static string get_VsixInvalidCatalog();
    public static string get_VsixInvalidCommandlineArgumentsError();
    public static string get_VsixInvalidExtensionPackageError();
    public static string get_VsixInvalidLicenseFormatError();
    public static string get_VsixInvalidPerMachineOperationError();
    public static string get_VsixMissingInCache();
    public static string get_VsixMissingInCache_Args1();
    public static string get_VsixMissingManifestError();
    public static string get_VsixMissingReferenceError();
    public static string get_VsixMissingTargetFrameworkError();
    public static string get_VsixNestedExtensionFailedError();
    public static string get_VsixNonAdminError();
    public static string get_VsixNotInstalledError();
    public static string get_VsixNotPendingDeletionError();
    public static string get_VsixProxyCredentialsRequiredError();
    public static string get_VsixReferenceConstraintError();
    public static string get_VsixSKUNotFoundError();
    public static string get_VsixUnknownError();
    public static string get_VsixUnsupportedManifestFormatError();
    public static string get_VsixUnsupportedProductError();
}
public enum Microsoft.VisualStudio.Setup.CompatiblePresent : Enum {
    public int value__;
    public static CompatiblePresent NotApplicable;
    public static CompatiblePresent Yes;
    public static CompatiblePresent No;
}
public class Microsoft.VisualStudio.Setup.Component : SelectableGroup {
    [CompilerGeneratedAttribute]
private bool <IsExtension>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsEmbedded>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsUiGroup>k__BackingField;
    [CompilerGeneratedAttribute]
private UIProperties <UI>k__BackingField;
    public PackageType Type { get; }
    [DataMemberAttribute]
public bool IsExtension { get; public set; }
    [DataMemberAttribute]
public bool IsEmbedded { get; public set; }
    [DataMemberAttribute]
[SerializationContextAttribute("1")]
public bool IsUiGroup { get; public set; }
    private bool Microsoft.VisualStudio.Setup.IRootPackage.IsRoot { get; }
    [DataMemberAttribute]
public UIProperties UI { get; public set; }
    public virtual PackageType get_Type();
    [CompilerGeneratedAttribute]
public sealed virtual bool get_IsExtension();
    [CompilerGeneratedAttribute]
public void set_IsExtension(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_IsEmbedded();
    [CompilerGeneratedAttribute]
public void set_IsEmbedded(bool value);
    [CompilerGeneratedAttribute]
public bool get_IsUiGroup();
    [CompilerGeneratedAttribute]
public void set_IsUiGroup(bool value);
    private sealed virtual override bool Microsoft.VisualStudio.Setup.IRootPackage.get_IsRoot();
    [CompilerGeneratedAttribute]
public UIProperties get_UI();
    [CompilerGeneratedAttribute]
public void set_UI(UIProperties value);
}
[DataContractAttribute]
[JsonConverterAttribute("Microsoft.VisualStudio.Setup.Serialization.ConditionConverter")]
public abstract class Microsoft.VisualStudio.Setup.Condition : object {
    [CompilerGeneratedAttribute]
private string <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Join>k__BackingField;
    [IgnoreDataMemberAttribute]
public ConditionType Type { get; }
    [DataMemberAttribute]
public string Id { get; public set; }
    [DataMemberAttribute]
public string Join { get; public set; }
    public abstract virtual ConditionType get_Type();
    [CompilerGeneratedAttribute]
public string get_Id();
    [CompilerGeneratedAttribute]
public void set_Id(string value);
    [CompilerGeneratedAttribute]
public string get_Join();
    [CompilerGeneratedAttribute]
public void set_Join(string value);
}
[DataContractAttribute]
[JsonConverterAttribute("Microsoft.VisualStudio.Setup.Serialization.ConditionGroupConverter")]
public class Microsoft.VisualStudio.Setup.ConditionGroup : object {
    [CompilerGeneratedAttribute]
private string <Expression>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<Condition> <Conditions>k__BackingField;
    [DataMemberAttribute]
public string Expression { get; public set; }
    [DataMemberAttribute]
[EmptyAsNullAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public IList`1<Condition> Conditions { get; internal set; }
    [CompilerGeneratedAttribute]
public string get_Expression();
    [CompilerGeneratedAttribute]
public void set_Expression(string value);
    [CompilerGeneratedAttribute]
public IList`1<Condition> get_Conditions();
    [CompilerGeneratedAttribute]
internal void set_Conditions(IList`1<Condition> value);
}
public enum Microsoft.VisualStudio.Setup.ConditionType : Enum {
    public int value__;
    public static ConditionType File;
    public static ConditionType Product;
    public static ConditionType Registry;
}
public class Microsoft.VisualStudio.Setup.ConsoleWriter : TextWriter {
    private bool initialized;
    public Encoding Encoding { get; }
    public virtual Encoding get_Encoding();
    public virtual void Write(string value);
    public virtual void WriteLine(string value);
    private void Initialize();
}
[DataContractAttribute]
public class Microsoft.VisualStudio.Setup.Cookie : object {
    [CompilerGeneratedAttribute]
private string <Url>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Value>k__BackingField;
    [DataMemberAttribute]
public string Url { get; public set; }
    [DataMemberAttribute]
public string Value { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Url();
    [CompilerGeneratedAttribute]
public void set_Url(string value);
    [CompilerGeneratedAttribute]
public string get_Value();
    [CompilerGeneratedAttribute]
public void set_Value(string value);
}
public enum Microsoft.VisualStudio.Setup.CurrentState : Enum {
    public int value__;
    public static CurrentState None;
    public static CurrentState Absent;
    public static CurrentState Superseded;
    public static CurrentState Present;
}
[DataContractAttribute]
public class Microsoft.VisualStudio.Setup.DefaultProgram : object {
    [CompilerGeneratedAttribute]
private string <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private string <RegistrationPath>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DescriptionPath>k__BackingField;
    [CompilerGeneratedAttribute]
private int <DescriptionPosition>k__BackingField;
    [DataMemberAttribute]
public string Id { get; public set; }
    [DataMemberAttribute]
public string RegistrationPath { get; public set; }
    [DataMemberAttribute]
public string Name { get; public set; }
    [DataMemberAttribute]
public string DescriptionPath { get; public set; }
    [DataMemberAttribute]
public int DescriptionPosition { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Id();
    [CompilerGeneratedAttribute]
public void set_Id(string value);
    [CompilerGeneratedAttribute]
public string get_RegistrationPath();
    [CompilerGeneratedAttribute]
public void set_RegistrationPath(string value);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public string get_DescriptionPath();
    [CompilerGeneratedAttribute]
public void set_DescriptionPath(string value);
    [CompilerGeneratedAttribute]
public int get_DescriptionPosition();
    [CompilerGeneratedAttribute]
public void set_DescriptionPosition(int value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.VisualStudio.Setup.Dependencies.DependencyArc : object {
    [CompilerGeneratedAttribute]
private IDependencyNode <Node>k__BackingField;
    [CompilerGeneratedAttribute]
private DependencyType <Type>k__BackingField;
    [CompilerGeneratedAttribute]
private DependencyBehaviors <Behaviors>k__BackingField;
    [CompilerGeneratedAttribute]
private ISet`1<string> <When>k__BackingField;
    public IDependencyNode Node { get; }
    public DependencyType Type { get; }
    public DependencyBehaviors Behaviors { get; }
    public ISet`1<string> When { get; internal set; }
    public DependencyArc(IDependencyNode node, DependencyType type, DependencyBehaviors behaviors);
    [CompilerGeneratedAttribute]
public sealed virtual IDependencyNode get_Node();
    [CompilerGeneratedAttribute]
public sealed virtual DependencyType get_Type();
    [CompilerGeneratedAttribute]
public sealed virtual DependencyBehaviors get_Behaviors();
    [CompilerGeneratedAttribute]
public sealed virtual ISet`1<string> get_When();
    [CompilerGeneratedAttribute]
internal void set_When(ISet`1<string> value);
    public virtual string ToString();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.VisualStudio.Setup.Dependencies.DependencyComparer : object {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private IEqualityComparer`1<string> stringComparer;
    [NullableAttribute("2")]
private string productArch;
    [NullableAttribute("2")]
private IServiceProvider services;
    private bool strictVersionRanges;
    [CompilerGeneratedAttribute]
private IDependencyComparisonSeed <Seed>k__BackingField;
    public IDependencyComparisonSeed Seed { get; }
    public DependencyComparer(IDependencyComparisonSeed seed, IEqualityComparer`1<string> stringComparer, IServiceProvider services);
    public DependencyComparer(IDependencyComparisonSeed seed, IEqualityComparer`1<string> stringComparer, DependencyValidationLevels validationLevels, IServiceProvider services);
    public DependencyComparer(DependencyComparerOptions options);
    [NullableContextAttribute("2")]
private DependencyComparer(IDependencyComparisonSeed seed, IEqualityComparer`1<string> stringComparer, string productArch, DependencyValidationLevels validationLevels, IServiceProvider services);
    [CompilerGeneratedAttribute]
public IDependencyComparisonSeed get_Seed();
    public DependencyMatchResult PackageSatisfiesDependency(IPackageIdentity package, IPackageDependency dependency);
    public DependencyMatchResult PackageSatisfiesDependency(IPackageIdentity targetPackage, IPackageDependency dependency, IPackage sourcePackage);
    private void LogDependencyWarning(string message);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.VisualStudio.Setup.Dependencies.DependencyComparerOptions : object {
    [CompilerGeneratedAttribute]
private IDependencyComparisonSeed <Seed>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private string <ProductArch>k__BackingField;
    [CompilerGeneratedAttribute]
private IEqualityComparer`1<string> <StringComparer>k__BackingField;
    [CompilerGeneratedAttribute]
private DependencyValidationLevels <ValidationLevels>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private IServiceProvider <Services>k__BackingField;
    public IDependencyComparisonSeed Seed { get; }
    [NullableAttribute("2")]
public string ProductArch { get; }
    public IEqualityComparer`1<string> StringComparer { get; }
    public DependencyValidationLevels ValidationLevels { get; }
    [NullableAttribute("2")]
public IServiceProvider Services { get; }
    private DependencyComparerOptions(IDependencyComparisonSeed seed, IEqualityComparer`1<string> stringComparer, string productArch, DependencyValidationLevels validationLevels, IServiceProvider services);
    public static DependencyComparerOptions Create(IPackage root, IDependencyComparisonSeed seed, IEqualityComparer`1<string> stringComparer, DependencyValidationLevels validationLevels, IServiceProvider services);
    [NullableContextAttribute("2")]
private static string GetArch(IPackage root);
    [CompilerGeneratedAttribute]
public IDependencyComparisonSeed get_Seed();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public string get_ProductArch();
    [CompilerGeneratedAttribute]
public IEqualityComparer`1<string> get_StringComparer();
    [CompilerGeneratedAttribute]
public DependencyValidationLevels get_ValidationLevels();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public IServiceProvider get_Services();
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
[DataContractAttribute]
public class Microsoft.VisualStudio.Setup.Dependencies.DependencyComparisonSeed : object {
    [NullableAttribute("1")]
[IgnoreDataMemberAttribute]
public static IDependencyComparisonSeed Default;
    [NullableAttribute("1")]
[CompilerGeneratedAttribute]
private ISet`1<string> <Languages>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Chip>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Branch>k__BackingField;
    [CompilerGeneratedAttribute]
private string <MachineArch>k__BackingField;
    [NullableAttribute("1")]
[DataMemberAttribute]
[EmptyAsNullAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public ISet`1<string> Languages { get; }
    [IgnoreDataMemberAttribute]
public string Chip { get; public set; }
    [IgnoreDataMemberAttribute]
public string Branch { get; public set; }
    [IgnoreDataMemberAttribute]
public string MachineArch { get; public set; }
    private static DependencyComparisonSeed();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public sealed virtual ISet`1<string> get_Languages();
    [CompilerGeneratedAttribute]
public sealed virtual string get_Chip();
    [CompilerGeneratedAttribute]
public void set_Chip(string value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_Branch();
    [CompilerGeneratedAttribute]
public void set_Branch(string value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_MachineArch();
    [CompilerGeneratedAttribute]
public void set_MachineArch(string value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.VisualStudio.Setup.Dependencies.DependencyGraph : object {
    private static Version DefaultVersion;
    [NullableAttribute("2")]
private IServiceProvider services;
    private ISet`1<string> catalogsToUninstall;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private ISet`1<IDependencyNode> initialUnselectedSet;
    private IList`1<Exception> nonFatalExceptions;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private ReadOnlyCollection`1<Exception> nonFatalExceptionsRO;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Dictionary`2<string, IDependencyNode> dependencyNodes;
    public static double InstallSizeBuffer;
    [CompilerGeneratedAttribute]
private IDependencyNode <Root>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<IDependencyNode> <InstallOrder>k__BackingField;
    public IDependencyNode Root { get; }
    public IEnumerable`1<IDependencyNode> InstallOrder { get; }
    public IEnumerable`1<string> CatalogsToUninstall { get; }
    public IReadOnlyCollection`1<Exception> NonFatalExceptions { get; }
    public IReadOnlyDictionary`2<string, IDependencyNode> DependencyNodes { get; }
    public DependencyGraph(IDependencyNode root, bool isUpdate, IServiceProvider services);
    private static DependencyGraph();
    [CompilerGeneratedAttribute]
public sealed virtual IDependencyNode get_Root();
    [CompilerGeneratedAttribute]
public sealed virtual IEnumerable`1<IDependencyNode> get_InstallOrder();
    public sealed virtual IEnumerable`1<string> get_CatalogsToUninstall();
    public sealed virtual IReadOnlyCollection`1<Exception> get_NonFatalExceptions();
    public sealed virtual IReadOnlyDictionary`2<string, IDependencyNode> get_DependencyNodes();
    public sealed virtual InstallSize GetInstallSize();
    public sealed virtual InstallSize GetInstallSize(bool checkMachineState);
    private static void AddCustomSizes(IDictionary`2<string, long> customSizesTotal, IDictionary`2<string, long> customSizes, bool shouldAdd);
    public sealed virtual void UpdateSelection();
    private void AdjustUnselectedNodeSet(IDependencyNode node);
    private void AdjustNodesSelectedState(IDependencyNode node);
    internal void UpdatePartialSelection(IDependencyNode subRoot);
    public sealed virtual void UpdateApplicability();
    public sealed virtual ISelectionPlan PlanSelection(IDependencyNode node, ISelectionOptions options);
    private void EnqueueNodesForSelection(Queue`1<IDependencyNode> queue, IDependencyNode node, SelectedState selectedState, bool includeRec, bool includeOpt, bool useReducedSet);
    private bool ShouldQueueChild(SelectedState selectedState);
    public sealed virtual void CommitSelection(ISelectionPlan plan);
    private static RequestedState GetCurrentState(IDependencyNode node, IServiceProvider services);
    private static DetectedState GetDetectedState(IServiceProvider services, IDependencyNode node);
    private ISelectionState GetUpdatedSelectedState(IDependencyNode node, SelectedState selectedState, UserSelectedState userSelectedState, IReadOnlyDictionary`2<IPackageIdentity, ISelectionState> updatedSelections, bool useReducedSet);
    private bool AreDependenciesMet(IDependencyNode node, IReadOnlyDictionary`2<IPackageIdentity, ISelectionState> updatedSelections);
    private bool HasSelectedParentOnDeselection(IDependencyNode node, IReadOnlyDictionary`2<IPackageIdentity, ISelectionState> updatedSelections, bool useReducedSet);
    private bool HasSelectedRequiredParent(IDependencyNode node, IReadOnlyDictionary`2<IPackageIdentity, ISelectionState> updatedSelections);
    private IEnumerable`1<IDependencyNode> BuildUpdateOrder(IDependencyNode root);
    private IDependencyNode FindNode(IDependencyNode node, IPackage package);
    private IEnumerable`1<IDependencyNode> SortByInstallOrder(IDependencyNode root);
    public sealed virtual ISet`1<IDependencyNode> GetRequiredDependencies(IDependencyNode root);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.VisualStudio.Setup.Dependencies.DependencyGraphConstructionException : LocalizedException {
    public DependencyGraphConstructionException(string resourceId, Object[] args);
    protected DependencyGraphConstructionException(SerializationInfo info, StreamingContext context);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.VisualStudio.Setup.Dependencies.DependencyManager : object {
    private static StringComparer IdentityStringComparer;
    [NullableAttribute("2")]
private IServiceProvider services;
    [NullableAttribute("2")]
private IMissingDependencyTracker missingDependencyTracker;
    [NullableContextAttribute("2")]
public DependencyManager(IServiceProvider services);
    private static DependencyManager();
    private static Dictionary`2<string, List`1<DependencyNode>> MakeNodeIndex();
    [NullableContextAttribute("2")]
private static DependencyComparer MakeDependencyComparer(IDependencyComparisonSeed seed, IPackage root, IServiceProvider services, DependencyValidationLevels validationLevels);
    public sealed virtual IDependencyGraph BuildGraph(IPackage root, IEnumerable`1<IPackage> packages, bool isUpdate, IDependencyComparisonSeed seed, DependencyCollection deprecated);
    public sealed virtual IDependencyGraph BuildDowngradeGraph(IPackage root, IEnumerable`1<IPackage> packages, bool isUpdate, IDependencyComparisonSeed seed, DependencyCollection deprecated);
    public sealed virtual IDependencyGraph BuildGraph(IPackage root, IEnumerable`1<IPackage> packages, DependencyValidationLevels validationLevels, bool isUpdate, IDependencyComparisonSeed seed, DependencyCollection deprecated);
    private IDependencyGraph BuildGraph(IPackage root, IEnumerable`1<IPackage> packages, DependencyComparer comparer, bool useDowngradeDependencies, bool isUpdate, DependencyCollection deprecated, bool splitNodes);
    public sealed virtual IDependencyGraph BuildGraphCandidatePackages(IPackage root, IEnumerable`1<IPackage> packages, bool isUpdate, DependencyCollection deprecated);
    public sealed virtual IDependencyGraph BuildDowngradeGraphCandidatePackages(IPackage root, IEnumerable`1<IPackage> packages, bool isUpdate, DependencyCollection deprecated);
    private IDependencyGraph BuildGraphCandidatePackages(IPackage root, IEnumerable`1<IPackage> packages, bool useDowngradeDependencies, bool isUpdate, DependencyCollection deprecated);
    public sealed virtual ISet`1<IPackageIdentity> GetDeprecatedPackages(IEnumerable`1<IPackageIdentity> packages, DependencyCollection deprecated, IDependencyComparisonSeed seed, IEqualityComparer`1<IPackageIdentity> packageComparer);
    private IDependencyNode BuildGraphCore(IPackage root, IEnumerable`1<IPackage> packages, DependencyComparer comparer, IDictionary`2<string, List`1<IPackage>> packageIndex, Dictionary`2<string, List`1<DependencyNode>> nodeIndex, bool useDowngradeDependencies, bool splitNodes, DependencyCollection deprecated);
    private void BuildGraphRecursive(IPackage graphRoot, DependencyNode node, DependencyComparer comparer, IDictionary`2<string, List`1<IPackage>> packageIndex, Dictionary`2<string, List`1<DependencyNode>> nodeIndex, bool useDowngradeDependencies, bool splitNodes);
    [ConditionalAttribute("DEBUG")]
private void CheckIfNodeIndexContainNode(Dictionary`2<string, List`1<DependencyNode>> nodeIndex, IDependencyNode node);
    private List`1<T> FindDependentPackages(Dependency dependency, DependencyComparer comparer, IDictionary`2<string, List`1<T>> packageIndex, IPackage holder);
    private IDictionary`2<string, List`1<IPackage>> IndexPackages(IEnumerable`1<IPackage> packages);
    [CompilerGeneratedAttribute]
internal static string <BuildGraphRecursive>g__languageVersionSelector|15_1(IPackageIdentity d);
    [CompilerGeneratedAttribute]
internal static string <BuildGraphRecursive>g__chipLanguageBranchArchSelector|15_2(IPackageIdentity d);
}
public enum Microsoft.VisualStudio.Setup.Dependencies.DependencyMatchResult : Enum {
    public int value__;
    public static DependencyMatchResult NoMatch;
    public static DependencyMatchResult SeedMisMatch;
    public static DependencyMatchResult Match;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.VisualStudio.Setup.Dependencies.DependencyNode : object {
    private static int DefaultCandidateCapacity;
    private static PackageVersionSorter Comparer;
    private OrderedList`1<IPackage> candidates;
    private ReadOnlyCollection`1<IPackage> candidatesROId;
    private ReadOnlyCollection`1<IDependencyArc> parentsRO;
    private ReadOnlyCollection`1<IDependencyArc> childrenRO;
    [CompilerGeneratedAttribute]
private string <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<IDependencyArc> <Parents>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<IDependencyArc> <Children>k__BackingField;
    public string Id { get; }
    public IPackage Package { get; }
    private IReadOnlyList`1<IPackage> Microsoft.VisualStudio.Setup.Dependencies.IDependencyNode.CandidatePackageIds { get; }
    public IList`1<IDependencyArc> Parents { get; }
    private IReadOnlyList`1<IDependencyArc> Microsoft.VisualStudio.Setup.Dependencies.IDependencyNode.Parents { get; }
    public IList`1<IDependencyArc> Children { get; }
    private IReadOnlyList`1<IDependencyArc> Microsoft.VisualStudio.Setup.Dependencies.IDependencyNode.Children { get; }
    private DependencyNode(string id, int candidateCapacity);
    public DependencyNode(string id, IPackage package);
    public DependencyNode(string id, IEnumerable`1<IPackage> packages);
    private static DependencyNode();
    [CompilerGeneratedAttribute]
public sealed virtual string get_Id();
    public sealed virtual IPackage get_Package();
    public void AddCandidate(IPackage candidate);
    private sealed virtual override IReadOnlyList`1<IPackage> Microsoft.VisualStudio.Setup.Dependencies.IDependencyNode.get_CandidatePackageIds();
    [CompilerGeneratedAttribute]
public IList`1<IDependencyArc> get_Parents();
    private sealed virtual override IReadOnlyList`1<IDependencyArc> Microsoft.VisualStudio.Setup.Dependencies.IDependencyNode.get_Parents();
    [CompilerGeneratedAttribute]
public IList`1<IDependencyArc> get_Children();
    private sealed virtual override IReadOnlyList`1<IDependencyArc> Microsoft.VisualStudio.Setup.Dependencies.IDependencyNode.get_Children();
    public virtual string ToString();
    public void FilterCandidates(IEnumerable`1<IPackage> additionalCandidates);
    public sealed virtual bool Equals(IDependencyNode other);
    private void ValidateCandidates();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.VisualStudio.Setup.Dependencies.DependencyNodeComparer : object {
    public static DependencyNodeComparer Default;
    private static PackageIdentityComparer PackageComparer;
    private static DependencyNodeComparer();
    [NullableContextAttribute("2")]
public sealed virtual bool Equals(IDependencyNode lNode, IDependencyNode rNode);
    [NullableContextAttribute("2")]
public sealed virtual int GetHashCode(IDependencyNode obj);
}
[FlagsAttribute]
public enum Microsoft.VisualStudio.Setup.Dependencies.DependencyValidationLevels : Enum {
    public int value__;
    public static DependencyValidationLevels None;
    public static DependencyValidationLevels StrictVersionRange;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class Microsoft.VisualStudio.Setup.Dependencies.Extensions : object {
    [ExtensionAttribute]
public static IEnumerable`1<IPackage> GetCandidates(IDependencyNode node, Func`2<IPackage, bool> predicate);
    [ExtensionAttribute]
internal static RequestedState GetRequestedState(IDependencyNode node, IServiceProvider services);
    private static RequestedState GetRequestedState(CurrentState currentState);
}
[NullableContextAttribute("1")]
public interface Microsoft.VisualStudio.Setup.Dependencies.IDependencyArc {
    public IDependencyNode Node { get; }
    public DependencyType Type { get; }
    public DependencyBehaviors Behaviors { get; }
    public ISet`1<string> When { get; }
    public abstract virtual IDependencyNode get_Node();
    public abstract virtual DependencyType get_Type();
    public abstract virtual DependencyBehaviors get_Behaviors();
    public abstract virtual ISet`1<string> get_When();
}
[NullableContextAttribute("2")]
public interface Microsoft.VisualStudio.Setup.Dependencies.IDependencyComparisonSeed {
    [NullableAttribute("1")]
public ISet`1<string> Languages { get; }
    public string Chip { get; }
    public string Branch { get; }
    public string MachineArch { get; }
    [NullableContextAttribute("1")]
public abstract virtual ISet`1<string> get_Languages();
    public abstract virtual string get_Chip();
    public abstract virtual string get_Branch();
    public abstract virtual string get_MachineArch();
}
[NullableContextAttribute("1")]
public interface Microsoft.VisualStudio.Setup.Dependencies.IDependencyGraph {
    public IDependencyNode Root { get; }
    public IEnumerable`1<IDependencyNode> InstallOrder { get; }
    public IEnumerable`1<string> CatalogsToUninstall { get; }
    public IReadOnlyCollection`1<Exception> NonFatalExceptions { get; }
    public IReadOnlyDictionary`2<string, IDependencyNode> DependencyNodes { get; }
    public abstract virtual IDependencyNode get_Root();
    public abstract virtual IEnumerable`1<IDependencyNode> get_InstallOrder();
    public abstract virtual IEnumerable`1<string> get_CatalogsToUninstall();
    public abstract virtual IReadOnlyCollection`1<Exception> get_NonFatalExceptions();
    public abstract virtual InstallSize GetInstallSize();
    public abstract virtual InstallSize GetInstallSize(bool checkMachineState);
    public abstract virtual void UpdateSelection();
    public abstract virtual void UpdateApplicability();
    public abstract virtual ISet`1<IDependencyNode> GetRequiredDependencies(IDependencyNode root);
    public abstract virtual ISelectionPlan PlanSelection(IDependencyNode node, ISelectionOptions options);
    public abstract virtual void CommitSelection(ISelectionPlan plan);
    public abstract virtual IReadOnlyDictionary`2<string, IDependencyNode> get_DependencyNodes();
}
[NullableContextAttribute("1")]
public interface Microsoft.VisualStudio.Setup.Dependencies.IDependencyManager {
    public abstract virtual IDependencyGraph BuildGraph(IPackage root, IEnumerable`1<IPackage> packages, bool isUpdate, IDependencyComparisonSeed seed, DependencyCollection deprecated);
    public abstract virtual IDependencyGraph BuildDowngradeGraph(IPackage root, IEnumerable`1<IPackage> packages, bool isUpdate, IDependencyComparisonSeed seed, DependencyCollection deprecated);
    public abstract virtual IDependencyGraph BuildGraph(IPackage root, IEnumerable`1<IPackage> packages, DependencyValidationLevels validationLevels, bool isUpdate, IDependencyComparisonSeed seed, DependencyCollection deprecated);
    public abstract virtual IDependencyGraph BuildGraphCandidatePackages(IPackage root, IEnumerable`1<IPackage> packages, bool isUpdate, DependencyCollection deprecated);
    public abstract virtual IDependencyGraph BuildDowngradeGraphCandidatePackages(IPackage root, IEnumerable`1<IPackage> packages, bool isUpdate, DependencyCollection deprecated);
    public abstract virtual ISet`1<IPackageIdentity> GetDeprecatedPackages(IEnumerable`1<IPackageIdentity> packages, DependencyCollection deprecated, IDependencyComparisonSeed seed, IEqualityComparer`1<IPackageIdentity> packageComparer);
}
[NullableContextAttribute("1")]
public interface Microsoft.VisualStudio.Setup.Dependencies.IDependencyNode {
    public string Id { get; }
    public IPackage Package { get; }
    public IReadOnlyList`1<IPackage> CandidatePackageIds { get; }
    public IReadOnlyList`1<IDependencyArc> Parents { get; }
    public IReadOnlyList`1<IDependencyArc> Children { get; }
    public abstract virtual string get_Id();
    public abstract virtual IPackage get_Package();
    public abstract virtual IReadOnlyList`1<IPackage> get_CandidatePackageIds();
    public abstract virtual IReadOnlyList`1<IDependencyArc> get_Parents();
    public abstract virtual IReadOnlyList`1<IDependencyArc> get_Children();
}
[NullableContextAttribute("1")]
public interface Microsoft.VisualStudio.Setup.Dependencies.ISelectionPlan {
    public IReadOnlyDictionary`2<IPackageIdentity, ISelectionState> UpdatedSelections { get; }
    public abstract virtual IReadOnlyDictionary`2<IPackageIdentity, ISelectionState> get_UpdatedSelections();
}
public class Microsoft.VisualStudio.Setup.Dependencies.SelectionOptions : object {
    [CompilerGeneratedAttribute]
private SelectedState <SelectedState>k__BackingField;
    [CompilerGeneratedAttribute]
private UserSelectedState <UserSelectedState>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IncludeRecommended>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IncludeOptional>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <UseReducedSet>k__BackingField;
    public SelectedState SelectedState { get; }
    public UserSelectedState UserSelectedState { get; }
    public bool IncludeRecommended { get; }
    public bool IncludeOptional { get; }
    public bool UseReducedSet { get; }
    public SelectionOptions(SelectedState selectedState, UserSelectedState userSelectedState, bool includeRecommended, bool includeOptional, bool useReducedSet);
    [CompilerGeneratedAttribute]
public sealed virtual SelectedState get_SelectedState();
    [CompilerGeneratedAttribute]
public sealed virtual UserSelectedState get_UserSelectedState();
    [CompilerGeneratedAttribute]
public sealed virtual bool get_IncludeRecommended();
    [CompilerGeneratedAttribute]
public sealed virtual bool get_IncludeOptional();
    [CompilerGeneratedAttribute]
public sealed virtual bool get_UseReducedSet();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.VisualStudio.Setup.Dependencies.SelectionPlan : object {
    [CompilerGeneratedAttribute]
private IReadOnlyDictionary`2<IPackageIdentity, ISelectionState> <UpdatedSelections>k__BackingField;
    public IReadOnlyDictionary`2<IPackageIdentity, ISelectionState> UpdatedSelections { get; }
    public SelectionPlan(IReadOnlyDictionary`2<IPackageIdentity, ISelectionState> updatedSelections);
    [CompilerGeneratedAttribute]
public sealed virtual IReadOnlyDictionary`2<IPackageIdentity, ISelectionState> get_UpdatedSelections();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.VisualStudio.Setup.Dependencies.Visitors.ApplicabilityVisitor : InstallOrderVisitor {
    [NullableAttribute("2")]
private IApplicabilityService applicabilityService;
    [NullableAttribute("2")]
private IServiceProvider services;
    [CompilerGeneratedAttribute]
private IList`1<IDependencyNode> <PackagesToUpdateSelection>k__BackingField;
    public IList`1<IDependencyNode> PackagesToUpdateSelection { get; }
    public ApplicabilityVisitor(IDependencyNode rootNode, IServiceProvider services);
    [CompilerGeneratedAttribute]
public IList`1<IDependencyNode> get_PackagesToUpdateSelection();
    protected virtual void PostNodeVisit(IDependencyNode node);
}
internal class Microsoft.VisualStudio.Setup.Dependencies.Visitors.DependencyVisitor : GraphVisitorBase {
    private DependencyType dependencyType;
    private IDependencyNode root;
    [CompilerGeneratedAttribute]
private ISet`1<IDependencyNode> <Dependencies>k__BackingField;
    public ISet`1<IDependencyNode> Dependencies { get; }
    public DependencyVisitor(IDependencyNode root, DependencyType dependencyType);
    [CompilerGeneratedAttribute]
public ISet`1<IDependencyNode> get_Dependencies();
    protected virtual void VisitNode(IDependencyNode node);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal abstract class Microsoft.VisualStudio.Setup.Dependencies.Visitors.GraphVisitorBase : object {
    private ISet`1<IDependencyNode> seen;
    private Queue`1<IDependencyNode> toVisit;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private IServiceProvider <Services>k__BackingField;
    [NullableAttribute("2")]
protected IServiceProvider Services { get; }
    [NullableContextAttribute("2")]
public GraphVisitorBase(IServiceProvider services);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
protected IServiceProvider get_Services();
    public void Visit(IDependencyNode root);
    protected abstract virtual void VisitNode(IDependencyNode node);
    protected void EnqueueChildren(IDependencyNode node, bool revisit);
    protected void EnqueueChildren(IDependencyNode node, DependencyType type, bool revisit);
    private void EnqueueNode(IDependencyNode node, bool revisit);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.VisualStudio.Setup.Dependencies.Visitors.InstallOrderVisitor : object {
    private static int AdditionalCapacity;
    [NullableAttribute("2")]
private ILogger logger;
    [NullableAttribute("2")]
private IPackageDetectionService packageDetection;
    private Dictionary`2<IDependencyNode, VisitationRecord> visitationLog;
    private IDependencyNode rootNode;
    private int index;
    private bool shouldDowngrade;
    [CompilerGeneratedAttribute]
private IList`1<IDependencyNode> <VisitedOrder>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private ICacheManager <Cache>k__BackingField;
    [CompilerGeneratedAttribute]
private ISet`1<string> <CatalogsToUninstall>k__BackingField;
    public IList`1<IDependencyNode> VisitedOrder { get; private set; }
    [NullableAttribute("2")]
protected ICacheManager Cache { get; }
    protected ISet`1<string> CatalogsToUninstall { get; }
    protected bool ShouldDowngrade { get; }
    public InstallOrderVisitor(IDependencyNode rootNode, IServiceProvider services, ISet`1<string> catalogsToUninstall);
    [CompilerGeneratedAttribute]
public IList`1<IDependencyNode> get_VisitedOrder();
    [CompilerGeneratedAttribute]
private void set_VisitedOrder(IList`1<IDependencyNode> value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
protected ICacheManager get_Cache();
    [CompilerGeneratedAttribute]
protected ISet`1<string> get_CatalogsToUninstall();
    protected bool get_ShouldDowngrade();
    public void Visit();
    protected virtual void PostRootVisit(IDependencyNode root);
    protected virtual void PostNodeVisit(IDependencyNode node);
    private void ValidateCandidates(IDependencyNode node);
    private void VisitHelper(IDependencyNode node);
    protected void Downgrade(IPackage package);
    private IDependencyNode DowngradeNode(IDependencyNode node);
    private bool ShouldVisitNode(IDependencyNode node);
    private string BuildCyclicDependencyExceptionMessage(IDependencyNode node);
    private void ProcessDowngrades();
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
private bool <VisitHelper>b__24_0(IDependencyArc arc);
    [CompilerGeneratedAttribute]
internal static bool <ProcessDowngrades>g__isAbsentNodeRequiredToDowngrade|29_0(IDependencyNode x);
    [CompilerGeneratedAttribute]
private void <ProcessDowngrades>g__processDowngrade|29_1(IDependencyNode node, bool inPlaceInsertion, <>c__DisplayClass29_0& );
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
internal class Microsoft.VisualStudio.Setup.Dependencies.Visitors.SelectionVisitor : GraphVisitorBase {
    private ILogger logger;
    public SelectionVisitor(IServiceProvider services);
    [NullableContextAttribute("1")]
protected virtual void VisitNode(IDependencyNode node);
}
internal class Microsoft.VisualStudio.Setup.Dependencies.Visitors.UpdateVisitor : InstallOrderVisitor {
    private IList`1<IDependencyNode> uninstalls;
    private Version defaultVersion;
    private IList`1<Exception> nonFatalExceptions;
    public UpdateVisitor(IDependencyNode rootNode, Version defaultVersion, IServiceProvider services, ISet`1<string> catalogsToUninstall, IList`1& nonFatalExceptions);
    protected virtual void PostRootVisit(IDependencyNode root);
    protected virtual void PostNodeVisit(IDependencyNode node);
    private void VersionCheck(IDependencyNode node);
    private bool IsLowerVersionInNewerOrigin(IPackage newestPackage, IPackage olderPackage);
}
[DataContractAttribute]
[JsonConverterAttribute("Microsoft.VisualStudio.Setup.Serialization.DependencyConverter")]
public class Microsoft.VisualStudio.Setup.Dependency : object {
    [CompilerGeneratedAttribute]
private string <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private VersionRange <Version>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Language>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Chip>k__BackingField;
    [CompilerGeneratedAttribute]
private string <MachineArch>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Branch>k__BackingField;
    [CompilerGeneratedAttribute]
private DependencyType <Type>k__BackingField;
    [CompilerGeneratedAttribute]
private DependencyBehaviors <Behaviors>k__BackingField;
    [CompilerGeneratedAttribute]
private ISet`1<string> <When>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsExtension>k__BackingField;
    [DataMemberAttribute]
public string Id { get; public set; }
    [DataMemberAttribute]
public VersionRange Version { get; public set; }
    [DataMemberAttribute]
public string Language { get; public set; }
    [DataMemberAttribute]
public string Chip { get; public set; }
    [DataMemberAttribute]
public string MachineArch { get; public set; }
    [DataMemberAttribute]
public string Branch { get; public set; }
    [DataMemberAttribute]
[JsonConverterAttribute("Newtonsoft.Json.Converters.StringEnumConverter")]
public DependencyType Type { get; public set; }
    [DataMemberAttribute]
[JsonConverterAttribute("Newtonsoft.Json.Converters.StringEnumConverter")]
public DependencyBehaviors Behaviors { get; public set; }
    [DataMemberAttribute]
public ISet`1<string> When { get; public set; }
    [IgnoreDataMemberAttribute]
public bool IsExtension { get; internal set; }
    [IgnoreDataMemberAttribute]
internal bool IsSimple { get; }
    [CompilerGeneratedAttribute]
public sealed virtual string get_Id();
    [CompilerGeneratedAttribute]
public void set_Id(string value);
    [CompilerGeneratedAttribute]
public sealed virtual VersionRange get_Version();
    [CompilerGeneratedAttribute]
public void set_Version(VersionRange value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_Language();
    [CompilerGeneratedAttribute]
public void set_Language(string value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_Chip();
    [CompilerGeneratedAttribute]
public void set_Chip(string value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_MachineArch();
    [CompilerGeneratedAttribute]
public void set_MachineArch(string value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_Branch();
    [CompilerGeneratedAttribute]
public void set_Branch(string value);
    [CompilerGeneratedAttribute]
public DependencyType get_Type();
    [CompilerGeneratedAttribute]
public void set_Type(DependencyType value);
    [CompilerGeneratedAttribute]
public DependencyBehaviors get_Behaviors();
    [CompilerGeneratedAttribute]
public void set_Behaviors(DependencyBehaviors value);
    [CompilerGeneratedAttribute]
public ISet`1<string> get_When();
    [CompilerGeneratedAttribute]
public void set_When(ISet`1<string> value);
    [CompilerGeneratedAttribute]
public bool get_IsExtension();
    [CompilerGeneratedAttribute]
internal void set_IsExtension(bool value);
    internal bool get_IsSimple();
    public virtual string ToString();
}
[FlagsAttribute]
public enum Microsoft.VisualStudio.Setup.DependencyBehaviors : Enum {
    public int value__;
    public static DependencyBehaviors None;
    public static DependencyBehaviors IgnoreApplicabilityFailures;
}
[EmptyAsNullAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class Microsoft.VisualStudio.Setup.DependencyCollection : object {
    private IDictionary`2<string, Dependency> store;
    public int Count { get; }
    private bool System.Collections.Generic.ICollection<Microsoft.VisualStudio.Setup.Dependency>.IsReadOnly { get; }
    internal static bool HasIdentityKey(Dependency item);
    private static string GetKeyForItem(Dependency item);
    private static string GetKey(string dependencyId, ICollection`1<string> when);
    public sealed virtual int get_Count();
    private sealed virtual override bool System.Collections.Generic.ICollection<Microsoft.VisualStudio.Setup.Dependency>.get_IsReadOnly();
    public sealed virtual void Add(Dependency item);
    public sealed virtual bool Remove(Dependency item);
    public sealed virtual void Clear();
    public sealed virtual bool Contains(Dependency item);
    public bool Contains(IDependencyArc dependencyArc);
    public sealed virtual IEnumerator`1<Dependency> GetEnumerator();
    public virtual string ToString();
    public void AddExtensions(IEnumerable`1<IPackageIdentity> extensions, IServiceProvider services, DependencyCollection deprecatedPackages, IDependencyComparisonSeed seed);
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    private sealed virtual override void System.Collections.Generic.ICollection<Microsoft.VisualStudio.Setup.Dependency>.CopyTo(Dependency[] array, int arrayIndex);
    private sealed virtual override IEnumerator`1<KeyValuePair`2<string, Dependency>> System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<System.String,Microsoft.VisualStudio.Setup.Dependency>>.GetEnumerator();
    private bool Contains(IPackageIdentity package);
    [CompilerGeneratedAttribute]
internal static string <GetKey>g__getHashCode|2_0(string id, IEnumerable`1<string> when);
}
public enum Microsoft.VisualStudio.Setup.DependencyType : Enum {
    public int value__;
    public static DependencyType Required;
    public static DependencyType Recommended;
    public static DependencyType Optional;
}
public enum Microsoft.VisualStudio.Setup.DetectedState : Enum {
    public int value__;
    public static DetectedState None;
    public static DetectedState Absent;
    public static DetectedState Present;
}
[DataContractAttribute]
public abstract class Microsoft.VisualStudio.Setup.DismPackage : InstallablePackage {
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.VisualStudio.Setup.DowngradeCandidatePicker : object {
    private IEqualityComparer`1<IPackageIdentity> comparer;
    private IDictionary`2<string, IList`1<IPackage>> packageIds;
    [NullableAttribute("2")]
private ITelemetry telemetry;
    [NullableAttribute("2")]
private ILogger logger;
    public DowngradeCandidatePicker(IEqualityComparer`1<IPackageIdentity> comparer, IEnumerable`1<IPackage> catalogPackages, ITelemetry telemetry, ILogger logger);
    public IPackage Pick(IPackage downgradable);
    private IPackage GetPreferredDowngradingPackage(IEnumerable`1<IPackage> candidates, IPackage downgradable);
    private bool IsValidCandidate(IPackage downgradable, IPackage candidate);
    private bool ChipEqualsProductArch(IPackage original, IPackage comparison);
    private bool MachineArchEqualsProductArch(IPackage original, IPackage comparison);
    private string Normalize(string attribute);
    private IDictionary`2<string, IList`1<IPackage>> GetPackageIdsForDowngradables(IEnumerable`1<IPackage> packages);
    private bool IsCandidateVersionLower(IPackage candidate, IPackage downgradable);
    private void WriteUnusualCandidatesCountEvent(string id, int candidatesCount);
}
public static class Microsoft.VisualStudio.Setup.EmptyArray`1 : object {
    public static T[] Instance;
    private static EmptyArray`1();
}
public class Microsoft.VisualStudio.Setup.EngineException : LocalizedException {
    [CompilerGeneratedAttribute]
private bool <ShouldLog>k__BackingField;
    public bool ShouldLog { get; public set; }
    public EngineException(ResourceManager resourceManager, string resourceId, Object[] args);
    public EngineException(Exception innerException, ResourceManager resourceManager, string resourceId, Object[] args);
    protected EngineException(SerializationInfo info, StreamingContext context);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_ShouldLog();
    [CompilerGeneratedAttribute]
public sealed virtual void set_ShouldLog(bool value);
    public virtual void GetObjectData(SerializationInfo info, StreamingContext context);
}
public class Microsoft.VisualStudio.Setup.ErrorCode : object {
    public static int SUCCESS;
    public static int ERROR_FILE_NOT_FOUND;
    public static int ERROR_PATH_NOT_FOUND;
    public static int ERROR_ACCESS_DENIED;
    public static int FACILITY_WIN32;
    public static int ERROR_SHARING_VIOLATION;
    public static int ERROR_INVALID_PARAMETER;
    public static int ERROR_MORE_DATA;
    public static int ERROR_NO_MORE_ITEMS;
    public static int ERROR_ELEVATION;
    public static int ERROR_USER_CANCELED;
    public static int ERROR_INSTALL_SERVICE_FAILURE;
    public static int ERROR_INSTALL_USEREXIT;
    public static int ERROR_INSTALL_FAILURE;
    public static int ERROR_UNKNOWN_PRODUCT;
    public static int ERROR_UNKNOWN_PROPERTY;
    public static int ERROR_BAD_CONFIGURATION;
    public static int ERROR_INSTALL_SOURCE_ABSENT;
    public static int ERROR_INSTALL_PACKAGE_INVALID;
    public static int ERROR_SUCCESS_REBOOT_INITIATED;
    public static int ERROR_ANOTHER_INSTALLATION_RUNNING;
    public static int ERROR_NO_VALID_SOURCE;
    public static int ERROR_REBOOTREQUIRED;
    public static int ERROR_BLOCKER_EXIT_CODE;
    public static int ERROR_ARM_MACHINE_CHECK;
    public static int ERROR_BACKGROUND_DOWNLOAD_PRECHECK;
    public static int ERROR_OUTOFSUPPORT_SELECTABLES_CHECK;
    public static int ERROR_TARGET_DIRECTORY_CHECK;
    public static int ERROR_VERIFY_SOURCE_PAYLOADS;
    public static int ERROR_VS_PROCESSES_RUNNING;
    public static int ERROR_UNSUPPORTED_OS_CHECK;
    public static int ERROR_GPOPOLICY_PREVENTS_WEBVIEW2_INSTALL_CHECK;
    public static int ERROR_ARM_SSU_CHECK;
    public static int ERROR_BLOCKED_OS_CHECK;
    public static int ERROR_DRIVE_ACCESSIBILITY_CHECK;
    public static int ERROR_TESTING_MSI_CHECK;
    public static int ERROR_SOFTREBOOT_BLOCK_CHECK;
    public static int ERROR_REBOOTRECOMMENDED;
    public static int ERROR_LAYOUTPACKAGEFAILURE;
    public static int E_DISKFULL;
    public static int ERROR_INVALID_SIGNATURE;
    public static int CRYPT_E_NO_MATCH;
    public static int ERROR_OPERATIONCANCELED;
    public static int HTTP_NOT_MODIFIED;
    public static int BG_E_HTTP_ERROR_401;
    public static int AUTHENTICATION_CANCELLED;
    public static int COR_E_TIMEOUT;
    public static int ERROR_CONNECTIVITY;
    private int error;
    [CompilerGeneratedAttribute]
private int <HResult>k__BackingField;
    public int HResult { get; }
    public ErrorCode(int error);
    [CompilerGeneratedAttribute]
public int get_HResult();
    public static int op_Implicit(ErrorCode code);
    public static int MakeHResult(int error);
    public static bool TryGetWin32Error(int hresult, Int32& error);
    public virtual string ToString();
    public sealed virtual string ToString(string format, IFormatProvider provider);
}
public enum Microsoft.VisualStudio.Setup.ExecuteAction : Enum {
    public int value__;
    public static ExecuteAction None;
    public static ExecuteAction Install;
    public static ExecuteAction Repair;
    public static ExecuteAction Uninstall;
}
[DataContractAttribute]
public class Microsoft.VisualStudio.Setup.ExePackage : InstallablePackage {
    [CompilerGeneratedAttribute]
private CommandParameter <InstallParams>k__BackingField;
    [CompilerGeneratedAttribute]
private CommandParameter <RepairParams>k__BackingField;
    [CompilerGeneratedAttribute]
private CommandParameter <UninstallParams>k__BackingField;
    [CompilerGeneratedAttribute]
private CommandParameter <LayoutParams>k__BackingField;
    [CompilerGeneratedAttribute]
private CommandParameter <LayoutInstallParams>k__BackingField;
    [CompilerGeneratedAttribute]
private ExeProtocol <Protocol>k__BackingField;
    public PackageType Type { get; }
    [DataMemberAttribute]
public CommandParameter InstallParams { get; public set; }
    [DataMemberAttribute]
public CommandParameter RepairParams { get; public set; }
    [DataMemberAttribute]
public CommandParameter UninstallParams { get; public set; }
    [DataMemberAttribute]
public CommandParameter LayoutParams { get; public set; }
    [DataMemberAttribute]
public CommandParameter LayoutInstallParams { get; public set; }
    [DataMemberAttribute]
public InstallResultCollection ReturnCodes { get; }
    [DataMemberAttribute]
public ExeProtocol Protocol { get; public set; }
    public virtual PackageType get_Type();
    [CompilerGeneratedAttribute]
public sealed virtual CommandParameter get_InstallParams();
    [CompilerGeneratedAttribute]
public void set_InstallParams(CommandParameter value);
    [CompilerGeneratedAttribute]
public sealed virtual CommandParameter get_RepairParams();
    [CompilerGeneratedAttribute]
public void set_RepairParams(CommandParameter value);
    [CompilerGeneratedAttribute]
public sealed virtual CommandParameter get_UninstallParams();
    [CompilerGeneratedAttribute]
public void set_UninstallParams(CommandParameter value);
    [CompilerGeneratedAttribute]
public CommandParameter get_LayoutParams();
    [CompilerGeneratedAttribute]
public void set_LayoutParams(CommandParameter value);
    [CompilerGeneratedAttribute]
public CommandParameter get_LayoutInstallParams();
    [CompilerGeneratedAttribute]
public void set_LayoutInstallParams(CommandParameter value);
    public InstallResultCollection get_ReturnCodes();
    [CompilerGeneratedAttribute]
public ExeProtocol get_Protocol();
    [CompilerGeneratedAttribute]
public void set_Protocol(ExeProtocol value);
}
public enum Microsoft.VisualStudio.Setup.ExeProtocol : Enum {
    public int value__;
    public static ExeProtocol None;
    public static ExeProtocol Burn;
}
[DefaultMemberAttribute("Item")]
[DataContractAttribute]
public abstract class Microsoft.VisualStudio.Setup.ExtensibleObject : SortedDictionary`2<string, string> {
    public string Item { get; public set; }
    public ExtensibleObject(IComparer`1<string> comparer);
    public string get_Item(string key);
    public void set_Item(string key, string value);
}
public enum Microsoft.VisualStudio.Setup.ExtensionOrigin : Enum {
    public int value__;
    public static ExtensionOrigin Unknown;
    public static ExtensionOrigin FromCommandLine;
    public static ExtensionOrigin FromConfig;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.VisualStudio.Setup.ExtensionRecords : object {
    [CompilerGeneratedAttribute]
private IDictionary`2<string, ExtensionOrigin> <Uris>k__BackingField;
    [CompilerGeneratedAttribute]
private IDictionary`2<string, ExtensionOrigin> <MarketPlaceItemNames>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyDictionary`2<string, ExtensionOrigin> <UnknownExtensions>k__BackingField;
    [CompilerGeneratedAttribute]
protected Type EqualityContract { get; }
    public IDictionary`2<string, ExtensionOrigin> Uris { get; public set; }
    public IDictionary`2<string, ExtensionOrigin> MarketPlaceItemNames { get; public set; }
    public IReadOnlyDictionary`2<string, ExtensionOrigin> UnknownExtensions { get; public set; }
    public ExtensionRecords(IDictionary`2<string, ExtensionOrigin> Uris, IDictionary`2<string, ExtensionOrigin> MarketPlaceItemNames);
    [CompilerGeneratedAttribute]
protected ExtensionRecords(ExtensionRecords original);
    [CompilerGeneratedAttribute]
protected virtual Type get_EqualityContract();
    [CompilerGeneratedAttribute]
public IDictionary`2<string, ExtensionOrigin> get_Uris();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_Uris(IDictionary`2<string, ExtensionOrigin> value);
    [CompilerGeneratedAttribute]
public IDictionary`2<string, ExtensionOrigin> get_MarketPlaceItemNames();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_MarketPlaceItemNames(IDictionary`2<string, ExtensionOrigin> value);
    public static ExtensionRecords FromStrings(ILogger logger, IDictionary`2<string, ExtensionOrigin> extensions);
    private static bool TryGetItemName(Uri uri, String& itemName);
    public static ExtensionRecords Merge(ExtensionRecords[] records);
    public static ExtensionRecords RemovePrivateExtensions(ExtensionRecords record);
    private static bool IsExtensionFilePath(string extension);
    [CompilerGeneratedAttribute]
public IReadOnlyDictionary`2<string, ExtensionOrigin> get_UnknownExtensions();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_UnknownExtensions(IReadOnlyDictionary`2<string, ExtensionOrigin> value);
    [CompilerGeneratedAttribute]
public virtual string ToString();
    [CompilerGeneratedAttribute]
protected virtual bool PrintMembers(StringBuilder builder);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static bool op_Inequality(ExtensionRecords left, ExtensionRecords right);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static bool op_Equality(ExtensionRecords left, ExtensionRecords right);
    [CompilerGeneratedAttribute]
public virtual int GetHashCode();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual bool Equals(object obj);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual bool Equals(ExtensionRecords other);
    [CompilerGeneratedAttribute]
public virtual ExtensionRecords <Clone>$();
    [CompilerGeneratedAttribute]
public void Deconstruct(IDictionary`2& Uris, IDictionary`2& MarketPlaceItemNames);
}
internal class Microsoft.VisualStudio.Setup.ExtensionRecordsEqualityComparer : object {
    public static ExtensionRecordsEqualityComparer Default;
    private static ExtensionRecordsEqualityComparer();
    public sealed virtual bool Equals(ExtensionRecords x, ExtensionRecords y);
    public sealed virtual int GetHashCode(ExtensionRecords obj);
    private bool DictionaryEqual(IDictionary`2<TKey, TValue> first, IDictionary`2<TKey, TValue> second);
}
[ExtensionAttribute]
public static class Microsoft.VisualStudio.Setup.Extensions : object {
    private static CultureInfo NeutralCulture;
    private static IEnumerable`1<PackageType> InstanceDowngradablePackageTypes;
    private static Extensions();
    [ExtensionAttribute]
public static void AddRange(ICollection`1<T> source, IEnumerable`1<T> items);
    [ExtensionAttribute]
public static void RemoveRange(ICollection`1<T> source, IEnumerable`1<T> items);
    [NullableContextAttribute("1")]
[ExtensionAttribute]
public static IDictionary`2<TKey, TItem> ToSafeDictionary(IEnumerable`1<TEnumItem> source, Func`2<TEnumItem, TKey> keySelector, Func`2<TEnumItem, TItem> valueSelector, IEqualityComparer`1<TKey> comparer);
    [ExtensionAttribute]
public static void Merge(IDictionary`2<TKey, TValue> source, IDictionary`2<TKey, TValue> items);
    [ExtensionAttribute]
public static void Merge(IDictionary`2<TKey, TValue> source, IReadOnlyDictionary`2<TKey, TValue> items);
    private static void MergeImpl(IDictionary`2<TKey, TValue> source, IEnumerable`1<KeyValuePair`2<TKey, TValue>> items);
    [ExtensionAttribute]
public static LocalizedResource FindResource(IEnumerable`1<LocalizedResource> source, CultureInfo culture, LocalizedResourceFallback fallback);
    [ExtensionAttribute]
public static string GetDisplayName(IPackage package, CultureInfo culture, LocalizedResourceFallback fallback);
    [ExtensionAttribute]
public static string GetUniqueIdHash(IPackageIdentity packageIdentity, IHashingService hashingService);
    [ExtensionAttribute]
public static string CreateUniqueFolder(IFileSystem fileSystem, string root, int length, int attempts);
    [ExtensionAttribute]
public static string GetDefaultPackageDirectoryName(IPackageIdentity identity);
    [ExtensionAttribute]
public static void CompressSigners(IPackageIdentity item, IDictionary`2<string, Signer> lookup);
    [ExtensionAttribute]
public static IEnumerable`1<Payload> GetPayloads(IPackage package);
    [ExtensionAttribute]
public static bool IsExperimentRoot(IPackage package);
    [ExtensionAttribute]
public static bool IsRoot(IPackage package);
    [ExtensionAttribute]
public static bool IsExtension(IPackage package);
    [ExtensionAttribute]
public static bool IsExternal(IPackage package);
    [ExtensionAttribute]
public static bool IsSelectable(IPackage package);
    [ExtensionAttribute]
public static bool IsSuccess(InstallResult result);
    [ExtensionAttribute]
public static bool IsFailure(InstallResult result);
    [ExtensionAttribute]
public static SelectedState GetSelectedState(IPackage package);
    [ExtensionAttribute]
public static bool IsRebootRequired(RebootType rebootType);
    [ExtensionAttribute]
public static bool IsRebootRecommended(RebootType rebootType);
    [ExtensionAttribute]
public static ISelectionState GetSelectionState(IPackage package);
    [ExtensionAttribute]
public static Version Normalize(Version version);
    [ExtensionAttribute]
public static string TryJoin(IEnumerable`1<string> source, string separator);
    [ExtensionAttribute]
public static ISet`1<TKey> ToSet(IEnumerable`1<TSource> source, Func`2<TSource, TKey> keySelector, IEqualityComparer`1<TKey> comparer);
    [ExtensionAttribute]
public static string ToHexString(Byte[] buffer, int maxBytes);
    [ExtensionAttribute]
public static ProductSummaryItem ToChannelProductItem(Product product);
    [ExtensionAttribute]
public static Uri GetPayloadUri(IChannelItemWithPayloads channelItem);
    [ExtensionAttribute]
public static Uri GetLayoutArtifactPath(Uri updateUri, Uri originalArtifactUri, string layoutArtifactFileName, ILogger logger, IFileSystem fileSystem);
    [ExtensionAttribute]
public static bool Matches(Uri source, Uri target);
    [ExtensionAttribute]
public static bool Matches(IChannelManifest source, IChannelManifest target);
    [ExtensionAttribute]
public static void MarkVitalFailure(IPackage package);
    [ExtensionAttribute]
public static bool IsVitalToInstallOperation(IPackage package);
    [ExtensionAttribute]
public static bool ShouldSkip(IPackage package);
    [ExtensionAttribute]
public static bool IgnoreNoCachePayloads(IPackage package);
    [ExtensionAttribute]
public static Version GetManifestBuildVersion(IManifest manifest);
    [ExtensionAttribute]
public static bool IgnoreDependents(IPackage package);
    [ExtensionAttribute]
public static bool IsDowngradable(IPackage package);
    [ExtensionAttribute]
public static bool IsInstanceDowngradableType(IPackage package);
    [ExtensionAttribute]
public static IEnumerable`1<IRootPackage> GetRootPackages(IManifest`1<T> manifest);
    [ExtensionAttribute]
public static Version GetManifestBuildVersion(CatalogInfo info);
    [ExtensionAttribute]
public static string GetManifestId(IManifest manifest);
    [ExtensionAttribute]
public static string GetManifestId(IPackage package);
    [ExtensionAttribute]
public static Nullable`1<PartialManifestType> GetManifestType(IPackage package);
    [ExtensionAttribute]
public static string GetManifestName(IManifest manifest);
    [ExtensionAttribute]
public static string GetManifestName(IPackage package);
    [ExtensionAttribute]
public static T GetManifestType(IManifest manifest, T defaultValue);
    [ExtensionAttribute]
public static void SetManifestType(IManifest manifest, T manifestType);
    [ExtensionAttribute]
public static bool IsAlphaPack(IPackage package);
    [ExtensionAttribute]
public static bool DoesNotContain(ISet`1<IPackageIdentity> set, IPackageIdentity package);
    [ExtensionAttribute]
public static string GetParentLocalPath(Uri uri);
    [ExtensionAttribute]
public static bool IsDriveFixed(IFileSystem fileSystem, string filePath);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static bool IsNullOrEmpty(string source);
    [ExtensionAttribute]
public static bool IsNullOrEmpty(IEnumerable`1<T> source);
    [ExtensionAttribute]
public static IEnumerable`1<T> EmptyIfNull(IEnumerable`1<T> source);
    [ExtensionAttribute]
public static int LastIndexOf(IEnumerable`1<T> source, T element, IEqualityComparer`1<T> comparer);
    [ExtensionAttribute]
public static int FindLastIndex(IEnumerable`1<T> source, Predicate`1<T> match);
    [ExtensionAttribute]
public static ErrorCode FromException(Exception ex);
    [ExtensionAttribute]
public static T ToEnum(string enumeration);
    [ExtensionAttribute]
public static bool Contains(string source, string value, StringComparison comparisonType);
    [ExtensionAttribute]
public static DependencyComparisonSeed Clone(IDependencyComparisonSeed seed);
    [ExtensionAttribute]
public static ISet`1<string> GetLocalPaths(ShortcutInformation shortcut);
    [ExtensionAttribute]
public static void SetLocalPaths(ShortcutInformation shortcut, IEnumerable`1<string> localPaths);
    [ExtensionAttribute]
public static void AddLocalPath(ShortcutInformation shortcut, string localPath);
    [ExtensionAttribute]
public static Uri GetLicense(IProductSummaryItem summary);
    [ExtensionAttribute]
internal static bool IsPastDate(DateTimeOffset date);
    private static bool FastAny(IEnumerable`1<T> source);
    [CompilerGeneratedAttribute]
internal static bool <CreateUniqueFolder>g__tryGetUniqueDirectory|11_0(Random random, String& name, <>c__DisplayClass11_0& );
}
[FlagsAttribute]
public enum Microsoft.VisualStudio.Setup.FileAccess : Enum {
    public int value__;
    public static FileAccess Read;
    public static FileAccess Write;
    public static FileAccess ReadWrite;
}
[DataContractAttribute]
public class Microsoft.VisualStudio.Setup.FileAssociation : object {
    [CompilerGeneratedAttribute]
private string <Extension>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ProgId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DefaultProgramRegistrationPath>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ContentType>k__BackingField;
    [CompilerGeneratedAttribute]
private string <PerceivedType>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsIconOnly>k__BackingField;
    [DataMemberAttribute]
public string Extension { get; public set; }
    [DataMemberAttribute]
public string ProgId { get; public set; }
    [DataMemberAttribute]
public string DefaultProgramRegistrationPath { get; public set; }
    [DataMemberAttribute]
public string ContentType { get; public set; }
    [DataMemberAttribute]
public string PerceivedType { get; public set; }
    [DataMemberAttribute]
public bool IsIconOnly { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Extension();
    [CompilerGeneratedAttribute]
public void set_Extension(string value);
    [CompilerGeneratedAttribute]
public string get_ProgId();
    [CompilerGeneratedAttribute]
public void set_ProgId(string value);
    [CompilerGeneratedAttribute]
public string get_DefaultProgramRegistrationPath();
    [CompilerGeneratedAttribute]
public void set_DefaultProgramRegistrationPath(string value);
    [CompilerGeneratedAttribute]
public string get_ContentType();
    [CompilerGeneratedAttribute]
public void set_ContentType(string value);
    [CompilerGeneratedAttribute]
public string get_PerceivedType();
    [CompilerGeneratedAttribute]
public void set_PerceivedType(string value);
    [CompilerGeneratedAttribute]
public bool get_IsIconOnly();
    [CompilerGeneratedAttribute]
public void set_IsIconOnly(bool value);
}
public class Microsoft.VisualStudio.Setup.FileCondition : Condition {
    internal static string RequiredProperty;
    [CompilerGeneratedAttribute]
private string <FilePath>k__BackingField;
    [CompilerGeneratedAttribute]
private string <FileHash256>k__BackingField;
    [CompilerGeneratedAttribute]
private VersionRange <FileVersionRange>k__BackingField;
    public ConditionType Type { get; }
    [DataMemberAttribute]
public string FilePath { get; public set; }
    [DataMemberAttribute]
public string FileHash256 { get; public set; }
    [DataMemberAttribute]
[JsonConverterAttribute("Microsoft.VisualStudio.Setup.Serialization.VersionRangeConverter")]
public VersionRange FileVersionRange { get; public set; }
    private static FileCondition();
    public virtual ConditionType get_Type();
    [CompilerGeneratedAttribute]
public string get_FilePath();
    [CompilerGeneratedAttribute]
public void set_FilePath(string value);
    [CompilerGeneratedAttribute]
public string get_FileHash256();
    [CompilerGeneratedAttribute]
public void set_FileHash256(string value);
    [CompilerGeneratedAttribute]
public VersionRange get_FileVersionRange();
    [CompilerGeneratedAttribute]
public void set_FileVersionRange(VersionRange value);
}
[DataContractAttribute]
public class Microsoft.VisualStudio.Setup.FileItem : object {
    [CompilerGeneratedAttribute]
private string <FileName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Sha256>k__BackingField;
    [DataMemberAttribute]
public string FileName { get; public set; }
    [DataMemberAttribute]
public string Sha256 { get; public set; }
    [CompilerGeneratedAttribute]
public string get_FileName();
    [CompilerGeneratedAttribute]
public void set_FileName(string value);
    [CompilerGeneratedAttribute]
public string get_Sha256();
    [CompilerGeneratedAttribute]
public void set_Sha256(string value);
}
public enum Microsoft.VisualStudio.Setup.FileMode : Enum {
    public int value__;
    public static FileMode CreateNew;
    public static FileMode Create;
    public static FileMode Open;
    public static FileMode OpenOrCreate;
    public static FileMode Truncate;
    public static FileMode Append;
}
[DataContractAttribute]
public abstract class Microsoft.VisualStudio.Setup.FilePackage`1 : InstallablePackage {
    [CompilerGeneratedAttribute]
private IList`1<T> <Files>k__BackingField;
    [DataMemberAttribute]
[EmptyAsNullAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public IList`1<T> Files { get; internal set; }
    [CompilerGeneratedAttribute]
public IList`1<T> get_Files();
    [CompilerGeneratedAttribute]
internal void set_Files(IList`1<T> value);
}
public class Microsoft.VisualStudio.Setup.FilePropertyInitializer : PropertyInitializer {
    internal static string RequiredProperty;
    [CompilerGeneratedAttribute]
private string <Path>k__BackingField;
    [CompilerGeneratedAttribute]
private string <PathExistsValue>k__BackingField;
    [CompilerGeneratedAttribute]
private FilePropertyInitializerType <PropertyInitializerType>k__BackingField;
    [DataMemberAttribute]
public string Path { get; public set; }
    [DataMemberAttribute]
public string PathExistsValue { get; public set; }
    [DataMemberAttribute]
public FilePropertyInitializerType PropertyInitializerType { get; public set; }
    private static FilePropertyInitializer();
    [CompilerGeneratedAttribute]
public string get_Path();
    [CompilerGeneratedAttribute]
public void set_Path(string value);
    [CompilerGeneratedAttribute]
public string get_PathExistsValue();
    [CompilerGeneratedAttribute]
public void set_PathExistsValue(string value);
    [CompilerGeneratedAttribute]
public FilePropertyInitializerType get_PropertyInitializerType();
    [CompilerGeneratedAttribute]
public void set_PropertyInitializerType(FilePropertyInitializerType value);
}
[FlagsAttribute]
public enum Microsoft.VisualStudio.Setup.FileShare : Enum {
    public int value__;
    public static FileShare None;
    public static FileShare Read;
    public static FileShare Write;
    public static FileShare ReadWrite;
    public static FileShare Delete;
    public static FileShare Inheritable;
}
public class Microsoft.VisualStudio.Setup.Group : Package {
    public PackageType Type { get; }
    public virtual PackageType get_Type();
}
public interface Microsoft.VisualStudio.Setup.IApplicabilityInfo {
    public string Name { get; }
    public Version Version { get; }
    public string Branch { get; }
    public abstract virtual string get_Name();
    public abstract virtual Version get_Version();
    public abstract virtual string get_Branch();
}
[DataContractAttribute]
public class Microsoft.VisualStudio.Setup.Icon : object {
    [CompilerGeneratedAttribute]
private string <MimeType>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Base64>k__BackingField;
    [CompilerGeneratedAttribute]
private string <FileName>k__BackingField;
    [DataMemberAttribute]
public string MimeType { get; public set; }
    [DataMemberAttribute]
public string Base64 { get; public set; }
    [DataMemberAttribute]
public string FileName { get; public set; }
    [CompilerGeneratedAttribute]
public string get_MimeType();
    [CompilerGeneratedAttribute]
public void set_MimeType(string value);
    [CompilerGeneratedAttribute]
public string get_Base64();
    [CompilerGeneratedAttribute]
public void set_Base64(string value);
    [CompilerGeneratedAttribute]
public string get_FileName();
    [CompilerGeneratedAttribute]
public void set_FileName(string value);
}
public interface Microsoft.VisualStudio.Setup.IExtensionPackage {
    public bool IsExtension { get; }
    public bool IsEmbedded { get; }
    public abstract virtual bool get_IsExtension();
    public abstract virtual bool get_IsEmbedded();
}
public interface Microsoft.VisualStudio.Setup.IInstallablePackage {
    public long DownloadSize { get; }
    public string ProviderKey { get; }
    public ConditionGroup InstallConditions { get; }
    public IList`1<PropertyInitializer> PropertyInitializers { get; }
    public IList`1<LogFile> LogFiles { get; }
    public IList`1<Shortcut> Shortcuts { get; }
    public Nullable`1<CacheState> CacheState { get; public set; }
    public abstract virtual long get_DownloadSize();
    public abstract virtual string get_ProviderKey();
    public abstract virtual ConditionGroup get_InstallConditions();
    public abstract virtual IList`1<PropertyInitializer> get_PropertyInitializers();
    public abstract virtual IList`1<LogFile> get_LogFiles();
    public abstract virtual IList`1<Shortcut> get_Shortcuts();
    public abstract virtual Nullable`1<CacheState> get_CacheState();
    public abstract virtual void set_CacheState(Nullable`1<CacheState> value);
}
public interface Microsoft.VisualStudio.Setup.IInstallationConfiguration {
    public Version Version { get; }
    public IEnumerable`1<string> Components { get; }
    public ExtensionRecords Extensions { get; }
    public abstract virtual Version get_Version();
    public abstract virtual IEnumerable`1<string> get_Components();
    public abstract virtual ExtensionRecords get_Extensions();
}
public interface Microsoft.VisualStudio.Setup.IItemBuildInformation {
    public ItemBuildInformation BuildInformation { get; public set; }
    public abstract virtual ItemBuildInformation get_BuildInformation();
    public abstract virtual void set_BuildInformation(ItemBuildInformation value);
}
internal interface Microsoft.VisualStudio.Setup.IListAdapter`2 {
}
public interface Microsoft.VisualStudio.Setup.ILocalizedResources {
    public IList`1<LocalizedResource> LocalizedResources { get; }
    public abstract virtual IList`1<LocalizedResource> get_LocalizedResources();
}
public interface Microsoft.VisualStudio.Setup.ILoggableException {
    public bool ShouldLog { get; public set; }
    public abstract virtual bool get_ShouldLog();
    public abstract virtual void set_ShouldLog(bool value);
}
public interface Microsoft.VisualStudio.Setup.IManifest {
    public Version ManifestVersion { get; public set; }
    public Version EngineVersion { get; public set; }
    public CatalogInfo Info { get; public set; }
    public IList`1<Signer> Signers { get; public set; }
    public IList`1<IPackageIdentity> Items { get; }
    public object Signature { get; public set; }
    public abstract virtual Version get_ManifestVersion();
    public abstract virtual void set_ManifestVersion(Version value);
    public abstract virtual Version get_EngineVersion();
    public abstract virtual void set_EngineVersion(Version value);
    public abstract virtual CatalogInfo get_Info();
    public abstract virtual void set_Info(CatalogInfo value);
    public abstract virtual IList`1<Signer> get_Signers();
    public abstract virtual void set_Signers(IList`1<Signer> value);
    public abstract virtual IList`1<IPackageIdentity> get_Items();
    public abstract virtual object get_Signature();
    public abstract virtual void set_Signature(object value);
}
public interface Microsoft.VisualStudio.Setup.IManifest`1 {
    public IList`1<T> Items { get; }
    public abstract virtual IList`1<T> get_Items();
}
public interface Microsoft.VisualStudio.Setup.IManifestBuildInfo {
    public CatalogBuildInformation BuildInformation { get; public set; }
    public abstract virtual CatalogBuildInformation get_BuildInformation();
    public abstract virtual void set_BuildInformation(CatalogBuildInformation value);
}
public interface Microsoft.VisualStudio.Setup.IManifestIdentityInfo {
    public string Id { get; public set; }
    public string ProductDisplayVersion { get; public set; }
    public string ProductSemanticVersion { get; public set; }
    public string ManifestName { get; public set; }
    public Version BuildVersion { get; public set; }
    public int ProductPatchVersion { get; public set; }
    public string BuildBranch { get; public set; }
    public string ProductPreReleaseMilestone { get; public set; }
    public string ProductPreReleaseMilestoneSuffix { get; public set; }
    public string ProductReleaseNameSuffix { get; public set; }
    public Version RequiredEngineVersion { get; public set; }
    public bool UseExternalVersionFormat { get; public set; }
    public abstract virtual string get_Id();
    public abstract virtual void set_Id(string value);
    public abstract virtual string get_ProductDisplayVersion();
    public abstract virtual void set_ProductDisplayVersion(string value);
    public abstract virtual string get_ProductSemanticVersion();
    public abstract virtual void set_ProductSemanticVersion(string value);
    public abstract virtual string get_ManifestName();
    public abstract virtual void set_ManifestName(string value);
    public abstract virtual Version get_BuildVersion();
    public abstract virtual void set_BuildVersion(Version value);
    public abstract virtual int get_ProductPatchVersion();
    public abstract virtual void set_ProductPatchVersion(int value);
    public abstract virtual string get_BuildBranch();
    public abstract virtual void set_BuildBranch(string value);
    public abstract virtual string get_ProductPreReleaseMilestone();
    public abstract virtual void set_ProductPreReleaseMilestone(string value);
    public abstract virtual string get_ProductPreReleaseMilestoneSuffix();
    public abstract virtual void set_ProductPreReleaseMilestoneSuffix(string value);
    public abstract virtual string get_ProductReleaseNameSuffix();
    public abstract virtual void set_ProductReleaseNameSuffix(string value);
    public abstract virtual Version get_RequiredEngineVersion();
    public abstract virtual void set_RequiredEngineVersion(Version value);
    public abstract virtual bool get_UseExternalVersionFormat();
    public abstract virtual void set_UseExternalVersionFormat(bool value);
}
public interface Microsoft.VisualStudio.Setup.INotifyCollectionChanged`1 {
    [CompilerGeneratedAttribute]
public abstract virtual void add_CollectionChanged(EventHandler`1<NotifyCollectionChangedEventArgs`1<T>> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_CollectionChanged(EventHandler`1<NotifyCollectionChangedEventArgs`1<T>> value);
}
[DataContractAttribute]
public abstract class Microsoft.VisualStudio.Setup.InstallablePackage : Package {
    private List`1<FileAssociation> fileAssociations;
    private List`1<UrlAssociation> urlAssociations;
    private List`1<ProgId> progIds;
    private List`1<Shortcut> shortcuts;
    private List`1<LogFile> logFiles;
    private List`1<string> relatedProcessDirectories;
    private List`1<string> relatedProcessFiles;
    private List`1<string> relatedServices;
    private List`1<string> nonCriticalProcesses;
    private InstallResultCollection returnCodes;
    [CompilerGeneratedAttribute]
private string <ProviderKey>k__BackingField;
    [CompilerGeneratedAttribute]
private ConditionGroup <InstallConditions>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<PropertyInitializer> <PropertyInitializers>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<Payload> <Payloads>k__BackingField;
    [CompilerGeneratedAttribute]
private InstallSize <InstallSizes>k__BackingField;
    [CompilerGeneratedAttribute]
private string <LogFileName>k__BackingField;
    [CompilerGeneratedAttribute]
private DefaultProgram <DefaultProgram>k__BackingField;
    [CompilerGeneratedAttribute]
private string <WatsonLogFile>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<CacheState> <CacheState>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsPermanent>k__BackingField;
    [CompilerGeneratedAttribute]
private ConditionGroup <DetectConditions>k__BackingField;
    [DataMemberAttribute]
public string ProviderKey { get; public set; }
    [DataMemberAttribute]
public ConditionGroup InstallConditions { get; public set; }
    [DataMemberAttribute]
public IList`1<PropertyInitializer> PropertyInitializers { get; public set; }
    [IgnoreDataMemberAttribute]
public long DownloadSize { get; }
    [DataMemberAttribute]
public IList`1<Payload> Payloads { get; internal set; }
    [DataMemberAttribute]
public InstallSize InstallSizes { get; public set; }
    [DataMemberAttribute]
public long InstallSize { get; public set; }
    [DataMemberAttribute]
public string LogFileName { get; public set; }
    [DataMemberAttribute]
[EmptyAsNullAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public IList`1<FileAssociation> FileAssociations { get; }
    [DataMemberAttribute]
[EmptyAsNullAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public IList`1<UrlAssociation> UrlAssociations { get; }
    [DataMemberAttribute]
[EmptyAsNullAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public IList`1<ProgId> ProgIds { get; }
    [DataMemberAttribute]
public DefaultProgram DefaultProgram { get; public set; }
    [DataMemberAttribute]
[EmptyAsNullAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public IList`1<Shortcut> Shortcuts { get; }
    [DataMemberAttribute]
[EmptyAsNullAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public IList`1<LogFile> LogFiles { get; }
    [IgnoreDataMemberAttribute]
public string WatsonLogFile { get; public set; }
    [IgnoreDataMemberAttribute]
public Nullable`1<CacheState> CacheState { get; public set; }
    [DataMemberAttribute]
public bool IsPermanent { get; public set; }
    [DataMemberAttribute]
[EmptyAsNullAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public IList`1<string> RelatedProcessDirectories { get; }
    [DataMemberAttribute]
[EmptyAsNullAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public IList`1<string> RelatedProcessFiles { get; }
    [DataMemberAttribute]
[EmptyAsNullAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public IList`1<string> RelatedServices { get; }
    [DataMemberAttribute]
[EmptyAsNullAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public IList`1<string> NonCriticalProcesses { get; }
    [DataMemberAttribute]
public ConditionGroup DetectConditions { get; public set; }
    [DataMemberAttribute]
public InstallResultCollection ReturnCodes { get; }
    [CompilerGeneratedAttribute]
public sealed virtual string get_ProviderKey();
    [CompilerGeneratedAttribute]
public void set_ProviderKey(string value);
    [CompilerGeneratedAttribute]
public sealed virtual ConditionGroup get_InstallConditions();
    [CompilerGeneratedAttribute]
public void set_InstallConditions(ConditionGroup value);
    [CompilerGeneratedAttribute]
public sealed virtual IList`1<PropertyInitializer> get_PropertyInitializers();
    [CompilerGeneratedAttribute]
public void set_PropertyInitializers(IList`1<PropertyInitializer> value);
    public sealed virtual long get_DownloadSize();
    [CompilerGeneratedAttribute]
public sealed virtual IList`1<Payload> get_Payloads();
    [CompilerGeneratedAttribute]
internal void set_Payloads(IList`1<Payload> value);
    [CompilerGeneratedAttribute]
public sealed virtual InstallSize get_InstallSizes();
    [CompilerGeneratedAttribute]
public void set_InstallSizes(InstallSize value);
    public long get_InstallSize();
    public void set_InstallSize(long value);
    [CompilerGeneratedAttribute]
public string get_LogFileName();
    [CompilerGeneratedAttribute]
public void set_LogFileName(string value);
    public IList`1<FileAssociation> get_FileAssociations();
    public IList`1<UrlAssociation> get_UrlAssociations();
    public IList`1<ProgId> get_ProgIds();
    [CompilerGeneratedAttribute]
public DefaultProgram get_DefaultProgram();
    [CompilerGeneratedAttribute]
public void set_DefaultProgram(DefaultProgram value);
    public sealed virtual IList`1<Shortcut> get_Shortcuts();
    public sealed virtual IList`1<LogFile> get_LogFiles();
    [CompilerGeneratedAttribute]
public string get_WatsonLogFile();
    [CompilerGeneratedAttribute]
public void set_WatsonLogFile(string value);
    [CompilerGeneratedAttribute]
public sealed virtual Nullable`1<CacheState> get_CacheState();
    [CompilerGeneratedAttribute]
public sealed virtual void set_CacheState(Nullable`1<CacheState> value);
    [CompilerGeneratedAttribute]
public bool get_IsPermanent();
    [CompilerGeneratedAttribute]
public void set_IsPermanent(bool value);
    public IList`1<string> get_RelatedProcessDirectories();
    public IList`1<string> get_RelatedProcessFiles();
    public IList`1<string> get_RelatedServices();
    public IList`1<string> get_NonCriticalProcesses();
    [CompilerGeneratedAttribute]
public ConditionGroup get_DetectConditions();
    [CompilerGeneratedAttribute]
public void set_DetectConditions(ConditionGroup value);
    public InstallResultCollection get_ReturnCodes();
}
[DataContractAttribute]
public class Microsoft.VisualStudio.Setup.InstallationConfiguration : object {
    public static Version SupportedVersion;
    [CompilerGeneratedAttribute]
private Version <Version>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<string> <Components>k__BackingField;
    [CompilerGeneratedAttribute]
private ExtensionRecords <Extensions>k__BackingField;
    [DataMemberAttribute]
public Version Version { get; }
    [DataMemberAttribute]
public IEnumerable`1<string> Components { get; }
    [DataMemberAttribute]
public ExtensionRecords Extensions { get; }
    public InstallationConfiguration(Version version, IEnumerable`1<string> components);
    [JsonConstructorAttribute]
public InstallationConfiguration(Version version, IEnumerable`1<string> components, ExtensionRecords extensions);
    private static InstallationConfiguration();
    [CompilerGeneratedAttribute]
public sealed virtual Version get_Version();
    [CompilerGeneratedAttribute]
public sealed virtual IEnumerable`1<string> get_Components();
    [CompilerGeneratedAttribute]
public sealed virtual ExtensionRecords get_Extensions();
}
public class Microsoft.VisualStudio.Setup.InstallationConfigurationException : LocalizedException {
    public InstallationConfigurationException(ResourceManager resourceManager, string resourceId, Object[] args);
}
[DataContractAttribute]
public class Microsoft.VisualStudio.Setup.InstallResult : object {
    public static InstallResult Success;
    private static CultureInfo Enu;
    private string details;
    [CompilerGeneratedAttribute]
private int <ReturnCode>k__BackingField;
    [CompilerGeneratedAttribute]
private InstallResultType <Type>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Watson>k__BackingField;
    [CompilerGeneratedAttribute]
private ExecuteAction <ExecuteAction>k__BackingField;
    [CompilerGeneratedAttribute]
private int <MessageId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Message>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ResourceId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <OperationContextResourceId>k__BackingField;
    [CompilerGeneratedAttribute]
private Object[] <OperationContextArgs>k__BackingField;
    [DataMemberAttribute]
public int ReturnCode { get; public set; }
    [DataMemberAttribute]
public InstallResultType Type { get; public set; }
    [DataMemberAttribute]
public string Details { get; public set; }
    [DataMemberAttribute]
public string Watson { get; public set; }
    [DataMemberAttribute]
public ExecuteAction ExecuteAction { get; public set; }
    [DataMemberAttribute]
public int MessageId { get; public set; }
    [DataMemberAttribute]
public string Message { get; public set; }
    [IgnoreDataMemberAttribute]
public string ResourceId { get; public set; }
    [IgnoreDataMemberAttribute]
public string DiagnosticDetails { get; }
    [IgnoreDataMemberAttribute]
public string OperationContextResourceId { get; public set; }
    [IgnoreDataMemberAttribute]
public Object[] OperationContextArgs { get; public set; }
    [IgnoreDataMemberAttribute]
public string OperationContext { get; }
    [IgnoreDataMemberAttribute]
public string DiagnosticOperationContext { get; }
    public InstallResult(InstallResultType type, int returnCode, string resourceId);
    private static InstallResult();
    [CompilerGeneratedAttribute]
public int get_ReturnCode();
    [CompilerGeneratedAttribute]
public void set_ReturnCode(int value);
    [CompilerGeneratedAttribute]
public InstallResultType get_Type();
    [CompilerGeneratedAttribute]
public void set_Type(InstallResultType value);
    public string get_Details();
    public void set_Details(string value);
    [CompilerGeneratedAttribute]
public string get_Watson();
    [CompilerGeneratedAttribute]
public void set_Watson(string value);
    [CompilerGeneratedAttribute]
public ExecuteAction get_ExecuteAction();
    [CompilerGeneratedAttribute]
public void set_ExecuteAction(ExecuteAction value);
    [CompilerGeneratedAttribute]
public int get_MessageId();
    [CompilerGeneratedAttribute]
public void set_MessageId(int value);
    [CompilerGeneratedAttribute]
public string get_Message();
    [CompilerGeneratedAttribute]
public void set_Message(string value);
    [CompilerGeneratedAttribute]
public string get_ResourceId();
    [CompilerGeneratedAttribute]
public void set_ResourceId(string value);
    public string get_DiagnosticDetails();
    private string GetDetails(CultureInfo cultureInfo);
    private string GetOperationContext(CultureInfo cultureInfo);
    [CompilerGeneratedAttribute]
public string get_OperationContextResourceId();
    [CompilerGeneratedAttribute]
public void set_OperationContextResourceId(string value);
    [CompilerGeneratedAttribute]
public Object[] get_OperationContextArgs();
    [CompilerGeneratedAttribute]
public void set_OperationContextArgs(Object[] value);
    public string get_OperationContext();
    public string get_DiagnosticOperationContext();
    public void AddTelemetryProperties(string propertyPrefix, IDictionary`2<string, object> telemetryProperties);
}
[EmptyAsNullAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class Microsoft.VisualStudio.Setup.InstallResultCollection : KeyedValueCollection`2<int, InstallResult> {
    public InstallResult Get(int returnCode, bool assumeFailure);
    public InstallResult Get(int returnCode, ExecuteAction action, bool assumeFailure);
    public void Union(InstallResultCollection results);
    protected virtual int GetKeyForItem(InstallResult item);
    protected virtual void SetKeyForItem(int key, InstallResult item);
}
public class Microsoft.VisualStudio.Setup.InstallResultComparer : object {
    public static InstallResultComparer ReturnCode;
    public static InstallResultComparer ReturnCodeAndMessageId;
    public static InstallResultComparer ReturnCodeAndMessageIdHResultCompatible;
    private Comparisons comparison;
    private bool hResultCompatible;
    private InstallResultComparer(Comparisons comparison, bool hResultCompatible);
    private static InstallResultComparer();
    public sealed virtual int Compare(InstallResult x, InstallResult y);
    public sealed virtual bool Equals(InstallResult x, InstallResult y);
    public sealed virtual int GetHashCode(InstallResult obj);
    private static int Compare(int x, int y);
}
public enum Microsoft.VisualStudio.Setup.InstallResultType : Enum {
    public int value__;
    public static InstallResultType None;
    public static InstallResultType Success;
    public static InstallResultType SuccessRebootRequired;
    public static InstallResultType SuccessDelayedRebootRequired;
    public static InstallResultType Failure;
    public static InstallResultType FailureRebootRequired;
    public static InstallResultType FailureException;
    public static InstallResultType Cancel;
    [ObsoleteAttribute("Finalizer reboots are not supported.", "False")]
public static InstallResultType FinalizerRebootRequired;
    public static InstallResultType SuccessRebootRecommended;
}
[DefaultMemberAttribute("Item")]
[DataContractAttribute]
[DictionaryMemberAttribute]
[JsonConverterAttribute("Microsoft.VisualStudio.Setup.Serialization.InstallSizeConverter")]
public class Microsoft.VisualStudio.Setup.InstallSize : Dictionary`2<string, long> {
    private static string SharedToken;
    private static string SystemToken;
    private static string TargetToken;
    private static string CacheToken;
    [CompilerGeneratedAttribute]
private long <CacheSize>k__BackingField;
    [CompilerGeneratedAttribute]
private Dictionary`2<string, long> <RequestedSizes>k__BackingField;
    [IgnoreDataMemberAttribute]
public long TargetDrive { get; public set; }
    [IgnoreDataMemberAttribute]
public long SystemDrive { get; public set; }
    [IgnoreDataMemberAttribute]
public long CacheSize { get; public set; }
    [IgnoreDataMemberAttribute]
public long SharedDrive { get; public set; }
    public long Item { get; public set; }
    [IgnoreDataMemberAttribute]
public Dictionary`2<string, long> RequestedSizes { get; }
    [IgnoreDataMemberAttribute]
public long RequestedDeltaTarget { get; }
    [IgnoreDataMemberAttribute]
public long RequestedCacheDelta { get; }
    [IgnoreDataMemberAttribute]
public long RequestedSystemDelta { get; }
    [IgnoreDataMemberAttribute]
public long RequestedSharedDelta { get; }
    public InstallSize(long installedTarget, long installSystem, long installShared, long requestedDeltaTargetDrive, long requestedDeltaSystemDrive, long requestedDeltaSharedDrive);
    public InstallSize(long installedTarget, long installSystem, long installShared, long cacheSize, long requestedDeltaTargetDrive, long requestedDeltaSystemDrive, long requestedDeltaSharedDrive, long requestedCacheSize);
    public long get_TargetDrive();
    public void set_TargetDrive(long value);
    public long get_SystemDrive();
    public void set_SystemDrive(long value);
    [CompilerGeneratedAttribute]
public long get_CacheSize();
    [CompilerGeneratedAttribute]
public void set_CacheSize(long value);
    public long get_SharedDrive();
    public void set_SharedDrive(long value);
    public long get_Item(string key);
    public void set_Item(string key, long value);
    public long GetTotalSize();
    [CompilerGeneratedAttribute]
public Dictionary`2<string, long> get_RequestedSizes();
    public long get_RequestedDeltaTarget();
    public long get_RequestedCacheDelta();
    public long get_RequestedSystemDelta();
    public long get_RequestedSharedDelta();
    public IDictionary`2<string, long> GetCustomSizes();
    public long GetTotalNonCacheInstallSize();
    public IDictionary`2<string, InstallSizePerDrive> GetCustomActualAndRequestedSizes();
    private bool IsCustomFilter(string tokenName);
    [CompilerGeneratedAttribute]
private bool <GetCustomSizes>b__35_0(KeyValuePair`2<string, long> x);
}
public class Microsoft.VisualStudio.Setup.InstallSizePerDrive : ValueType {
    [CompilerGeneratedAttribute]
private long <Actual>k__BackingField;
    [CompilerGeneratedAttribute]
private long <Requested>k__BackingField;
    public long Actual { get; public set; }
    public long Requested { get; public set; }
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public long get_Actual();
    [CompilerGeneratedAttribute]
public void set_Actual(long value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public long get_Requested();
    [CompilerGeneratedAttribute]
public void set_Requested(long value);
}
public class Microsoft.VisualStudio.Setup.InvalidEnumArgumentException : ArgumentException {
    public InvalidEnumArgumentException(string paramName, Type enumType);
    protected InvalidEnumArgumentException(SerializationInfo info, StreamingContext context);
    private static string FormatMessage(Type enumType);
}
public interface Microsoft.VisualStudio.Setup.IPackage {
    public PackageType Type { get; }
    public Uri License { get; }
    public DependencyCollection Dependencies { get; }
    public BreadcrumbTemplate BreadcrumbTemplate { get; }
    public CurrentState CurrentState { get; public set; }
    public RequestedState RequestedState { get; public set; }
    public DetectedState DetectedState { get; public set; }
    public IList`1<string> TelemetryCorrelatedParents { get; }
    public IList`1<string> AncestorWorkloads { get; }
    public IList`1<ProjectClassifier> ProjectClassifiers { get; }
    public ApplicabilityState ApplicabilityState { get; public set; }
    public bool HasVitalFailure { get; public set; }
    public bool OutOfSupport { get; public set; }
    public ISet`1<IPackage> SelectedParents { get; }
    public ISet`1<IPackage> SelectedRequiredChildren { get; }
    public VisualStudioInformation VisualStudioInformation { get; public set; }
    public IPackage SupersedingPackage { get; public set; }
    public bool Replace { get; public set; }
    public IPackage DowngradingPackage { get; public set; }
    public IPackage PackageToDowngrade { get; public set; }
    public OriginInfo Origin { get; public set; }
    public abstract virtual PackageType get_Type();
    public abstract virtual Uri get_License();
    public abstract virtual DependencyCollection get_Dependencies();
    public abstract virtual BreadcrumbTemplate get_BreadcrumbTemplate();
    public abstract virtual CurrentState get_CurrentState();
    public abstract virtual void set_CurrentState(CurrentState value);
    public abstract virtual RequestedState get_RequestedState();
    public abstract virtual void set_RequestedState(RequestedState value);
    public abstract virtual DetectedState get_DetectedState();
    public abstract virtual void set_DetectedState(DetectedState value);
    public abstract virtual IList`1<string> get_TelemetryCorrelatedParents();
    public abstract virtual IList`1<string> get_AncestorWorkloads();
    public abstract virtual IList`1<ProjectClassifier> get_ProjectClassifiers();
    public abstract virtual ApplicabilityState get_ApplicabilityState();
    public abstract virtual void set_ApplicabilityState(ApplicabilityState value);
    public abstract virtual bool get_HasVitalFailure();
    public abstract virtual void set_HasVitalFailure(bool value);
    public abstract virtual bool get_OutOfSupport();
    public abstract virtual void set_OutOfSupport(bool value);
    public abstract virtual ISet`1<IPackage> get_SelectedParents();
    public abstract virtual ISet`1<IPackage> get_SelectedRequiredChildren();
    public abstract virtual VisualStudioInformation get_VisualStudioInformation();
    public abstract virtual void set_VisualStudioInformation(VisualStudioInformation value);
    public abstract virtual IPackage get_SupersedingPackage();
    public abstract virtual void set_SupersedingPackage(IPackage value);
    public abstract virtual bool get_Replace();
    public abstract virtual void set_Replace(bool value);
    public abstract virtual IPackage get_DowngradingPackage();
    public abstract virtual void set_DowngradingPackage(IPackage value);
    public abstract virtual IPackage get_PackageToDowngrade();
    public abstract virtual void set_PackageToDowngrade(IPackage value);
    public abstract virtual OriginInfo get_Origin();
    public abstract virtual void set_Origin(OriginInfo value);
}
public interface Microsoft.VisualStudio.Setup.IPackageCommands {
    public CommandParameter InstallParams { get; }
    public CommandParameter RepairParams { get; }
    public CommandParameter UninstallParams { get; }
    public abstract virtual CommandParameter get_InstallParams();
    public abstract virtual CommandParameter get_RepairParams();
    public abstract virtual CommandParameter get_UninstallParams();
}
public interface Microsoft.VisualStudio.Setup.IPackageDependency {
    public string Id { get; }
    public VersionRange Version { get; }
    public string Chip { get; }
    public string MachineArch { get; }
    public string Language { get; }
    public string Branch { get; }
    public abstract virtual string get_Id();
    public abstract virtual VersionRange get_Version();
    public abstract virtual string get_Chip();
    public abstract virtual string get_MachineArch();
    public abstract virtual string get_Language();
    public abstract virtual string get_Branch();
}
public interface Microsoft.VisualStudio.Setup.IPackageFactory {
    public abstract virtual IPackage Create(PackageType packageType);
    public abstract virtual PackageType GetPackageType(string type);
}
public interface Microsoft.VisualStudio.Setup.IPackageIdentity {
    public string Id { get; }
    public Version Version { get; }
    public string Chip { get; }
    public string Language { get; }
    public string Branch { get; }
    public string ProductArch { get; }
    public string MachineArch { get; }
    public abstract virtual string get_Id();
    public abstract virtual Version get_Version();
    public abstract virtual string get_Chip();
    public abstract virtual string get_Language();
    public abstract virtual string get_Branch();
    public abstract virtual string get_ProductArch();
    public abstract virtual string get_MachineArch();
    public abstract virtual string GetUniqueId();
}
public interface Microsoft.VisualStudio.Setup.IPayloads {
    public IList`1<Payload> Payloads { get; }
    public InstallSize InstallSizes { get; }
    public abstract virtual IList`1<Payload> get_Payloads();
    public abstract virtual InstallSize get_InstallSizes();
}
public interface Microsoft.VisualStudio.Setup.IProductReference {
    public Nullable`1<bool> IsInstalled { get; public set; }
    public Nullable`1<bool> SupportsExtensions { get; public set; }
    public abstract virtual Nullable`1<bool> get_IsInstalled();
    public abstract virtual void set_IsInstalled(Nullable`1<bool> value);
    public abstract virtual Nullable`1<bool> get_SupportsExtensions();
    public abstract virtual void set_SupportsExtensions(Nullable`1<bool> value);
}
public interface Microsoft.VisualStudio.Setup.IRequirements {
    public Requirement Requirements { get; public set; }
    public ApplicabilityState ApplicabilityState { get; public set; }
    public abstract virtual Requirement get_Requirements();
    public abstract virtual void set_Requirements(Requirement value);
    public abstract virtual ApplicabilityState get_ApplicabilityState();
    public abstract virtual void set_ApplicabilityState(ApplicabilityState value);
}
public interface Microsoft.VisualStudio.Setup.IRootPackage {
    public bool IsRoot { get; }
    public abstract virtual bool get_IsRoot();
}
public interface Microsoft.VisualStudio.Setup.ISelectablePackage {
    public SelectedState SelectedState { get; public set; }
    public UserSelectedState UserSelectedState { get; public set; }
    public abstract virtual SelectedState get_SelectedState();
    public abstract virtual void set_SelectedState(SelectedState value);
    public abstract virtual UserSelectedState get_UserSelectedState();
    public abstract virtual void set_UserSelectedState(UserSelectedState value);
}
public interface Microsoft.VisualStudio.Setup.ISelectionOptions {
    public SelectedState SelectedState { get; }
    public UserSelectedState UserSelectedState { get; }
    public bool IncludeRecommended { get; }
    public bool IncludeOptional { get; }
    public bool UseReducedSet { get; }
    public abstract virtual SelectedState get_SelectedState();
    public abstract virtual UserSelectedState get_UserSelectedState();
    public abstract virtual bool get_IncludeRecommended();
    public abstract virtual bool get_IncludeOptional();
    public abstract virtual bool get_UseReducedSet();
}
public interface Microsoft.VisualStudio.Setup.ISelectionState {
    public SelectedState SelectedState { get; }
    public UserSelectedState UserSelectedState { get; }
    public abstract virtual SelectedState get_SelectedState();
    public abstract virtual UserSelectedState get_UserSelectedState();
}
[DataContractAttribute]
public class Microsoft.VisualStudio.Setup.ItemBuildInformation : BuildInformation {
}
internal enum Microsoft.VisualStudio.Setup.KnownOperation : Enum {
    public int value__;
    public static KnownOperation Install;
    public static KnownOperation Update;
    public static KnownOperation Rollback;
    public static KnownOperation Modify;
    public static KnownOperation Repair;
    public static KnownOperation Uninstall;
    public static KnownOperation Resume;
}
[DefaultMemberAttribute("Item")]
internal class Microsoft.VisualStudio.Setup.ListAdapter`2 : object {
    private IList`1<TDerived> list;
    public TBase Item { get; public set; }
    public int Count { get; }
    public bool IsReadOnly { get; }
    public ListAdapter`2(IList`1<TDerived> list);
    public sealed virtual TBase get_Item(int index);
    public sealed virtual void set_Item(int index, TBase value);
    public sealed virtual int get_Count();
    public sealed virtual bool get_IsReadOnly();
    public sealed virtual void Add(TBase item);
    public sealed virtual void Clear();
    public sealed virtual bool Contains(TBase item);
    public sealed virtual void CopyTo(TBase[] array, int arrayIndex);
    public sealed virtual IEnumerator`1<TBase> GetEnumerator();
    public sealed virtual int IndexOf(TBase item);
    public sealed virtual void Insert(int index, TBase item);
    public sealed virtual bool Remove(TBase item);
    public sealed virtual void RemoveAt(int index);
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    private TDerived AsDerived(TBase value);
}
public class Microsoft.VisualStudio.Setup.LocalizedException : Exception {
    private ResourceManager resources;
    private string resourceId;
    private Object[] args;
    private string neutralMessage;
    [CompilerGeneratedAttribute]
private string <LocalizedMessage>k__BackingField;
    public string NeutralMessage { get; }
    public string Message { get; }
    private string LocalizedMessage { get; private set; }
    public LocalizedException(ResourceManager resources, string resourceId, Object[] args);
    public LocalizedException(Exception innerException, ResourceManager resources, string resourceId, Object[] args);
    protected LocalizedException(SerializationInfo info, StreamingContext context);
    public virtual string get_NeutralMessage();
    public virtual string get_Message();
    public virtual void GetObjectData(SerializationInfo info, StreamingContext context);
    [CompilerGeneratedAttribute]
private string get_LocalizedMessage();
    [CompilerGeneratedAttribute]
private void set_LocalizedMessage(string value);
    private bool TryGetString(CultureInfo culture, String& message);
    [ConditionalAttribute("DEBUG")]
private void VerifyResourceExists(ResourceManager resources, string resourceId);
}
[DataContractAttribute]
public class Microsoft.VisualStudio.Setup.LocalizedResource : object {
    private List`1<string> keywords;
    [CompilerGeneratedAttribute]
private string <Language>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Title>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Description>k__BackingField;
    [CompilerGeneratedAttribute]
private string <LongDescription>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Category>k__BackingField;
    [CompilerGeneratedAttribute]
private string <License>k__BackingField;
    [CompilerGeneratedAttribute]
private string <BadgeText>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ChannelSuffix>k__BackingField;
    [DataMemberAttribute]
public string Language { get; public set; }
    [DataMemberAttribute]
public string Title { get; public set; }
    [DataMemberAttribute]
public string Description { get; public set; }
    [DataMemberAttribute]
public string LongDescription { get; public set; }
    [DataMemberAttribute]
public string Category { get; public set; }
    [DataMemberAttribute]
public string License { get; public set; }
    [DataMemberAttribute]
public string BadgeText { get; public set; }
    [DataMemberAttribute]
[EmptyAsNullAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public IList`1<string> Keywords { get; }
    [DataMemberAttribute]
public string ChannelSuffix { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Language();
    [CompilerGeneratedAttribute]
public void set_Language(string value);
    [CompilerGeneratedAttribute]
public string get_Title();
    [CompilerGeneratedAttribute]
public void set_Title(string value);
    [CompilerGeneratedAttribute]
public string get_Description();
    [CompilerGeneratedAttribute]
public void set_Description(string value);
    [CompilerGeneratedAttribute]
public string get_LongDescription();
    [CompilerGeneratedAttribute]
public void set_LongDescription(string value);
    [CompilerGeneratedAttribute]
public string get_Category();
    [CompilerGeneratedAttribute]
public void set_Category(string value);
    [CompilerGeneratedAttribute]
public string get_License();
    [CompilerGeneratedAttribute]
public void set_License(string value);
    [CompilerGeneratedAttribute]
public string get_BadgeText();
    [CompilerGeneratedAttribute]
public void set_BadgeText(string value);
    public IList`1<string> get_Keywords();
    [CompilerGeneratedAttribute]
public string get_ChannelSuffix();
    [CompilerGeneratedAttribute]
public void set_ChannelSuffix(string value);
}
[FlagsAttribute]
public enum Microsoft.VisualStudio.Setup.LocalizedResourceFallback : Enum {
    public int value__;
    public static LocalizedResourceFallback None;
    public static LocalizedResourceFallback NeutralCulture;
    public static LocalizedResourceFallback NeutralLanguage;
    public static LocalizedResourceFallback All;
}
[DataContractAttribute]
public class Microsoft.VisualStudio.Setup.LocalizedResourceTemplate : LocalizedResource {
    [CompilerGeneratedAttribute]
private string <TemplateId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ProjectTypeDisplayName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ProjectSubTypeDisplayName>k__BackingField;
    [DataMemberAttribute]
public string TemplateId { get; public set; }
    [DataMemberAttribute]
public string ProjectTypeDisplayName { get; public set; }
    [DataMemberAttribute]
public string ProjectSubTypeDisplayName { get; public set; }
    [CompilerGeneratedAttribute]
public string get_TemplateId();
    [CompilerGeneratedAttribute]
public void set_TemplateId(string value);
    [CompilerGeneratedAttribute]
public string get_ProjectTypeDisplayName();
    [CompilerGeneratedAttribute]
public void set_ProjectTypeDisplayName(string value);
    [CompilerGeneratedAttribute]
public string get_ProjectSubTypeDisplayName();
    [CompilerGeneratedAttribute]
public void set_ProjectSubTypeDisplayName(string value);
}
[DataContractAttribute]
public class Microsoft.VisualStudio.Setup.LogFile : object {
    [CompilerGeneratedAttribute]
private string <Directory>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Pattern>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Recursive>k__BackingField;
    [DataMemberAttribute]
public string Directory { get; public set; }
    [DataMemberAttribute]
public string Pattern { get; public set; }
    [DataMemberAttribute]
public bool Recursive { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Directory();
    [CompilerGeneratedAttribute]
public void set_Directory(string value);
    [CompilerGeneratedAttribute]
public string get_Pattern();
    [CompilerGeneratedAttribute]
public void set_Pattern(string value);
    [CompilerGeneratedAttribute]
public bool get_Recursive();
    [CompilerGeneratedAttribute]
public void set_Recursive(bool value);
}
[DataContractAttribute]
public abstract class Microsoft.VisualStudio.Setup.Manifest`1 : object {
    protected static int StartOrder;
    protected static int ItemsOrder;
    private IList`1<T> items;
    private IList`1<IPackageIdentity> wrappedItems;
    private IList`1<Signer> signers;
    [CompilerGeneratedAttribute]
private Version <ManifestVersion>k__BackingField;
    [CompilerGeneratedAttribute]
private Version <EngineVersion>k__BackingField;
    [CompilerGeneratedAttribute]
private CatalogInfo <Info>k__BackingField;
    [CompilerGeneratedAttribute]
private CatalogBuildInformation <BuildInformation>k__BackingField;
    [CompilerGeneratedAttribute]
private object <Signature>k__BackingField;
    [DataMemberAttribute]
[JsonConverterAttribute("Newtonsoft.Json.Converters.VersionConverter")]
[SerializationContextAttribute("0")]
public Version ManifestVersion { get; public set; }
    [DataMemberAttribute]
[JsonConverterAttribute("Newtonsoft.Json.Converters.VersionConverter")]
public Version EngineVersion { get; public set; }
    [DataMemberAttribute]
public CatalogInfo Info { get; public set; }
    [DataMemberAttribute]
public CatalogBuildInformation BuildInformation { get; public set; }
    [DataMemberAttribute]
public IList`1<Signer> Signers { get; public set; }
    private IList`1<IPackageIdentity> Microsoft.VisualStudio.Setup.IManifest.Items { get; }
    [DataMemberAttribute]
public object Signature { get; public set; }
    [IgnoreDataMemberAttribute]
protected IList`1<T> Items { get; private set; }
    private IList`1<T> Microsoft.VisualStudio.Setup.IManifest<T>.Items { get; }
    [CompilerGeneratedAttribute]
public sealed virtual Version get_ManifestVersion();
    [CompilerGeneratedAttribute]
public sealed virtual void set_ManifestVersion(Version value);
    [CompilerGeneratedAttribute]
public sealed virtual Version get_EngineVersion();
    [CompilerGeneratedAttribute]
public sealed virtual void set_EngineVersion(Version value);
    [CompilerGeneratedAttribute]
public sealed virtual CatalogInfo get_Info();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Info(CatalogInfo value);
    [CompilerGeneratedAttribute]
public sealed virtual CatalogBuildInformation get_BuildInformation();
    [CompilerGeneratedAttribute]
public sealed virtual void set_BuildInformation(CatalogBuildInformation value);
    public sealed virtual IList`1<Signer> get_Signers();
    public sealed virtual void set_Signers(IList`1<Signer> value);
    private sealed virtual override IList`1<IPackageIdentity> Microsoft.VisualStudio.Setup.IManifest.get_Items();
    [CompilerGeneratedAttribute]
public sealed virtual object get_Signature();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Signature(object value);
    protected IList`1<T> get_Items();
    private void set_Items(IList`1<T> value);
    private sealed virtual override IList`1<T> Microsoft.VisualStudio.Setup.IManifest<T>.get_Items();
    protected static M Parse(IServiceProvider services, string path, ModelSerializer`1<M> serializer);
    [AsyncStateMachineAttribute("Microsoft.VisualStudio.Setup.Manifest`1/<ParseAsync>d__37`1")]
protected static Task`1<M> ParseAsync(IServiceProvider services, string path, ModelSerializer`1<M> serializer, CancellationToken token);
    protected static M ParseJson(string catalogJson, ModelSerializer`1<M> serializer);
    protected static string WriteToJson(M catalog, ModelSerializer`1<M> serializer);
    private void CompressSigners();
}
public class Microsoft.VisualStudio.Setup.ManifestIdentityComparer : object {
    public static ManifestIdentityComparer Default;
    public static StringComparer StringComparer;
    private static ManifestIdentityComparer();
    public sealed virtual bool Equals(IManifest x, IManifest y);
    public sealed virtual int GetHashCode(IManifest obj);
}
[AttributeUsageAttribute("4")]
public class Microsoft.VisualStudio.Setup.ManifestVersionAttribute : Attribute {
    [CompilerGeneratedAttribute]
private Version <Version>k__BackingField;
    public Version Version { get; }
    public ManifestVersionAttribute(string version);
    [CompilerGeneratedAttribute]
public Version get_Version();
}
[DataContractAttribute]
public class Microsoft.VisualStudio.Setup.MatcherData : object {
    [CompilerGeneratedAttribute]
private string <Type>k__BackingField;
    [CompilerGeneratedAttribute]
private string <CapabilityType>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ProjectPropertyId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <RegExMatchSource>k__BackingField;
    [DataMemberAttribute]
public string Type { get; public set; }
    [DataMemberAttribute]
public string CapabilityType { get; public set; }
    [DataMemberAttribute]
public string ProjectPropertyId { get; public set; }
    [DataMemberAttribute]
public string RegExMatchSource { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Type();
    [CompilerGeneratedAttribute]
public void set_Type(string value);
    [CompilerGeneratedAttribute]
public string get_CapabilityType();
    [CompilerGeneratedAttribute]
public void set_CapabilityType(string value);
    [CompilerGeneratedAttribute]
public string get_ProjectPropertyId();
    [CompilerGeneratedAttribute]
public void set_ProjectPropertyId(string value);
    [CompilerGeneratedAttribute]
public string get_RegExMatchSource();
    [CompilerGeneratedAttribute]
public void set_RegExMatchSource(string value);
}
public enum Microsoft.VisualStudio.Setup.MatcherDataType : Enum {
    public int value__;
    public static MatcherDataType Property;
    public static MatcherDataType Import;
    public static MatcherDataType Item;
    public static MatcherDataType Sdk;
}
public enum Microsoft.VisualStudio.Setup.Message.ActivityType : Enum {
    public int value__;
    public static ActivityType None;
    public static ActivityType Initialize;
    public static ActivityType Plan;
    public static ActivityType Download;
    public static ActivityType Install;
    public static ActivityType Finalize;
    public static ActivityType Layout;
    public static ActivityType VerifyLayout;
    public static ActivityType CleanLayout;
}
[ExtensionAttribute]
public static class Microsoft.VisualStudio.Setup.Message.Extensions : object {
    [ExtensionAttribute]
public static bool ValidateMessageResult(Message message, MessageResult result);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.VisualStudio.Setup.Message.Message : ValueType {
    public MessageType Type;
    public Nullable`1<ActivityType> Activity;
    public MessageResultTypes AcceptsResultTypes;
    public MessageResultTypes DefaultResultType;
    public string LocalizedString;
    [NullableAttribute("2")]
public object Context;
    public string NeutralString;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.VisualStudio.Setup.Message.MessageContext : object {
    [CompilerGeneratedAttribute]
private object <Context>k__BackingField;
    public object Context { get; }
    public MessageContext(object context);
    [CompilerGeneratedAttribute]
public object get_Context();
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class Microsoft.VisualStudio.Setup.Message.MessageResult : ValueType {
    [CompilerGeneratedAttribute]
private MessageResultTypes <Type>k__BackingField;
    [CompilerGeneratedAttribute]
private object <Result>k__BackingField;
    public MessageResultTypes Type { get; public set; }
    public object Result { get; public set; }
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public MessageResultTypes get_Type();
    [CompilerGeneratedAttribute]
public void set_Type(MessageResultTypes value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public object get_Result();
    [CompilerGeneratedAttribute]
public void set_Result(object value);
}
[FlagsAttribute]
public enum Microsoft.VisualStudio.Setup.Message.MessageResultTypes : Enum {
    public int value__;
    public static MessageResultTypes None;
    public static MessageResultTypes OK;
    public static MessageResultTypes Cancel;
    public static MessageResultTypes Retry;
    public static MessageResultTypes Ignore;
    public static MessageResultTypes Context;
}
public enum Microsoft.VisualStudio.Setup.Message.MessageType : Enum {
    public int value__;
    public static MessageType None;
    public static MessageType Verbose;
    public static MessageType Warning;
    public static MessageType Error;
    public static MessageType StartAction;
    public static MessageType EndAction;
    public static MessageType RebootRequired;
    public static MessageType SourceRequired;
}
public class Microsoft.VisualStudio.Setup.Message.RetryMessageContext : MessageContext {
    [CompilerGeneratedAttribute]
private int <RetriesRemaining>k__BackingField;
    public int RetriesRemaining { get; public set; }
    [NullableContextAttribute("1")]
public RetryMessageContext(int retriesRemaining, object context);
    [CompilerGeneratedAttribute]
public int get_RetriesRemaining();
    [CompilerGeneratedAttribute]
public void set_RetriesRemaining(int value);
}
[DataContractAttribute]
public class Microsoft.VisualStudio.Setup.MsiPackage : InstallablePackage {
    private CaseSensitiveStringDictionary msiProperties;
    private List`1<RelatedPackage> relatedPackages;
    [CompilerGeneratedAttribute]
private string <ProductCode>k__BackingField;
    [CompilerGeneratedAttribute]
private string <UpgradeCode>k__BackingField;
    [CompilerGeneratedAttribute]
private Version <ProductVersion>k__BackingField;
    [CompilerGeneratedAttribute]
private int <ProductLanguage>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Visible>k__BackingField;
    [CompilerGeneratedAttribute]
private string <InstalledProductCode>k__BackingField;
    [CompilerGeneratedAttribute]
private Version <InstalledVersion>k__BackingField;
    [CompilerGeneratedAttribute]
private IPackageIdentity <InstalledPackage>k__BackingField;
    public PackageType Type { get; }
    [DataMemberAttribute]
public IDictionary`2<string, string> MsiProperties { get; }
    [DataMemberAttribute]
public IList`1<RelatedPackage> RelatedPackages { get; }
    [DataMemberAttribute]
public string ProductCode { get; public set; }
    [DataMemberAttribute]
public string UpgradeCode { get; public set; }
    [DataMemberAttribute]
[JsonConverterAttribute("Newtonsoft.Json.Converters.VersionConverter")]
public Version ProductVersion { get; public set; }
    [DataMemberAttribute]
public int ProductLanguage { get; public set; }
    [DataMemberAttribute]
public bool Visible { get; public set; }
    [IgnoreDataMemberAttribute]
public string InstalledProductCode { get; public set; }
    [IgnoreDataMemberAttribute]
public Version InstalledVersion { get; public set; }
    [IgnoreDataMemberAttribute]
public IPackageIdentity InstalledPackage { get; public set; }
    public virtual PackageType get_Type();
    public IDictionary`2<string, string> get_MsiProperties();
    public IList`1<RelatedPackage> get_RelatedPackages();
    [CompilerGeneratedAttribute]
public string get_ProductCode();
    [CompilerGeneratedAttribute]
public void set_ProductCode(string value);
    [CompilerGeneratedAttribute]
public string get_UpgradeCode();
    [CompilerGeneratedAttribute]
public void set_UpgradeCode(string value);
    [CompilerGeneratedAttribute]
public Version get_ProductVersion();
    [CompilerGeneratedAttribute]
public void set_ProductVersion(Version value);
    [CompilerGeneratedAttribute]
public int get_ProductLanguage();
    [CompilerGeneratedAttribute]
public void set_ProductLanguage(int value);
    [CompilerGeneratedAttribute]
public bool get_Visible();
    [CompilerGeneratedAttribute]
public void set_Visible(bool value);
    [CompilerGeneratedAttribute]
public string get_InstalledProductCode();
    [CompilerGeneratedAttribute]
public void set_InstalledProductCode(string value);
    [CompilerGeneratedAttribute]
public Version get_InstalledVersion();
    [CompilerGeneratedAttribute]
public void set_InstalledVersion(Version value);
    [CompilerGeneratedAttribute]
public IPackageIdentity get_InstalledPackage();
    [CompilerGeneratedAttribute]
public void set_InstalledPackage(IPackageIdentity value);
}
[DataContractAttribute]
public class Microsoft.VisualStudio.Setup.MsuPackage : DismPackage {
    public PackageType Type { get; }
    [IgnoreDataMemberAttribute]
public string FileName { get; }
    public virtual PackageType get_Type();
    public string get_FileName();
}
public enum Microsoft.VisualStudio.Setup.NgenArchitecture : Enum {
    public int value__;
    public static NgenArchitecture NotSpecified;
    public static NgenArchitecture X86;
    public static NgenArchitecture X64;
    public static NgenArchitecture All;
    public static NgenArchitecture Arm64;
}
public class Microsoft.VisualStudio.Setup.NotifyCollectionChangedEventArgs`1 : EventArgs {
    private T item;
    private IReadOnlyCollection`1<T> items;
    [CompilerGeneratedAttribute]
private NotifyCollectionChangedAction <Action>k__BackingField;
    public NotifyCollectionChangedAction Action { get; }
    public T Item { get; }
    public IReadOnlyCollection`1<T> Items { get; }
    public NotifyCollectionChangedEventArgs`1(NotifyCollectionChangedAction action);
    public NotifyCollectionChangedEventArgs`1(NotifyCollectionChangedAction action, T item);
    public NotifyCollectionChangedEventArgs`1(NotifyCollectionChangedAction action, IEnumerable`1<T> items);
    [CompilerGeneratedAttribute]
public NotifyCollectionChangedAction get_Action();
    public T get_Item();
    public IReadOnlyCollection`1<T> get_Items();
}
[DataContractAttribute]
public class Microsoft.VisualStudio.Setup.NuGetPackage : FilePackage`1<FileItem> {
    private List`1<string> directories;
    [CompilerGeneratedAttribute]
private string <NuGetPackageId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <NuGetPackageVersion>k__BackingField;
    [CompilerGeneratedAttribute]
private string <RelativePath>k__BackingField;
    public PackageType Type { get; }
    [DataMemberAttribute]
public string NuGetPackageId { get; public set; }
    [DataMemberAttribute]
public string NuGetPackageVersion { get; public set; }
    [DataMemberAttribute]
public string RelativePath { get; public set; }
    [DataMemberAttribute]
[EmptyAsNullAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public IList`1<string> Directories { get; }
    public virtual PackageType get_Type();
    [CompilerGeneratedAttribute]
public string get_NuGetPackageId();
    [CompilerGeneratedAttribute]
public void set_NuGetPackageId(string value);
    [CompilerGeneratedAttribute]
public string get_NuGetPackageVersion();
    [CompilerGeneratedAttribute]
public void set_NuGetPackageVersion(string value);
    [CompilerGeneratedAttribute]
public string get_RelativePath();
    [CompilerGeneratedAttribute]
public void set_RelativePath(string value);
    public IList`1<string> get_Directories();
}
[DefaultMemberAttribute("Item")]
[DebuggerDisplayAttribute("Count = {Count}")]
public class Microsoft.VisualStudio.Setup.OrderedList`1 : object {
    private static int DefaultCapacity;
    private IComparer`1<T> comparer;
    private T[] items;
    private int version;
    [CompilerGeneratedAttribute]
private int <Count>k__BackingField;
    public T Item { get; public set; }
    public int Capacity { get; public set; }
    public int Count { get; private set; }
    public bool IsReadOnly { get; }
    public OrderedList`1(IComparer`1<T> comparer);
    public OrderedList`1(int capacity);
    public OrderedList`1(int capacity, IComparer`1<T> comparer);
    public sealed virtual T get_Item(int index);
    public sealed virtual void set_Item(int index, T value);
    public int get_Capacity();
    public void set_Capacity(int value);
    [CompilerGeneratedAttribute]
public sealed virtual int get_Count();
    [CompilerGeneratedAttribute]
private void set_Count(int value);
    public sealed virtual bool get_IsReadOnly();
    public sealed virtual void Add(T item);
    public void AddRange(IEnumerable`1<T> items);
    public sealed virtual void Clear();
    public sealed virtual bool Contains(T item);
    public sealed virtual void CopyTo(T[] array, int arrayIndex);
    public T First();
    public sealed virtual IEnumerator`1<T> GetEnumerator();
    public sealed virtual int IndexOf(T item);
    public sealed virtual void Insert(int index, T item);
    public T Last();
    public sealed virtual bool Remove(T item);
    public sealed virtual void RemoveAt(int index);
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    private void EnsureCapacity(int min);
}
public class Microsoft.VisualStudio.Setup.OriginInfo : object {
    [CompilerGeneratedAttribute]
private string <ManifestId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ManifestName>k__BackingField;
    [CompilerGeneratedAttribute]
private PartialManifestType <ManifestType>k__BackingField;
    [CompilerGeneratedAttribute]
private Version <ManifestBuildVersion>k__BackingField;
    public string ManifestId { get; internal set; }
    public string ManifestName { get; internal set; }
    public PartialManifestType ManifestType { get; internal set; }
    public Version ManifestBuildVersion { get; internal set; }
    [CompilerGeneratedAttribute]
public string get_ManifestId();
    [CompilerGeneratedAttribute]
internal void set_ManifestId(string value);
    [CompilerGeneratedAttribute]
public string get_ManifestName();
    [CompilerGeneratedAttribute]
internal void set_ManifestName(string value);
    [CompilerGeneratedAttribute]
public PartialManifestType get_ManifestType();
    [CompilerGeneratedAttribute]
internal void set_ManifestType(PartialManifestType value);
    [CompilerGeneratedAttribute]
public Version get_ManifestBuildVersion();
    [CompilerGeneratedAttribute]
internal void set_ManifestBuildVersion(Version value);
    public static OriginInfo FromManifest(IManifest manifest);
    public static OriginInfo FromManifest(IManifest manifest, PartialManifestType defaultType);
}
[DataContractAttribute]
public abstract class Microsoft.VisualStudio.Setup.Package : object {
    private string id;
    private Version version;
    private string chip;
    private string language;
    private string branch;
    private string productArch;
    private string machineArch;
    private string uniqueId;
    private CurrentState currentState;
    private RequestedState requestedState;
    private IPackage downgradingPackage;
    private List`1<string> telemetryCorrelatedParents;
    private List`1<string> ancestorWorkloads;
    private DependencyCollection dependencies;
    private List`1<LocalizedResource> localizedResources;
    private List`1<ProjectClassifier> projectClassifiers;
    private HashSet`1<IPackage> selectedParents;
    private HashSet`1<IPackage> selectedRequiredChildren;
    [CompilerGeneratedAttribute]
private bool <Vital>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <OutOfSupport>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <RebootCheckBeforeInstall>k__BackingField;
    [CompilerGeneratedAttribute]
private VisualStudioInformation <VisualStudioInformation>k__BackingField;
    [CompilerGeneratedAttribute]
private Uri <License>k__BackingField;
    [CompilerGeneratedAttribute]
private BreadcrumbTemplate <BreadcrumbTemplate>k__BackingField;
    [CompilerGeneratedAttribute]
private DetectedState <DetectedState>k__BackingField;
    [CompilerGeneratedAttribute]
private Requirement <Requirements>k__BackingField;
    [CompilerGeneratedAttribute]
private ApplicabilityState <ApplicabilityState>k__BackingField;
    [CompilerGeneratedAttribute]
private ItemBuildInformation <BuildInformation>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <HasVitalFailure>k__BackingField;
    [CompilerGeneratedAttribute]
private IPackage <SupersedingPackage>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Replace>k__BackingField;
    [CompilerGeneratedAttribute]
private IPackage <PackageToDowngrade>k__BackingField;
    [CompilerGeneratedAttribute]
private OriginInfo <Origin>k__BackingField;
    [CompilerGeneratedAttribute]
private IDictionary`2<string, JToken> <ExtensionData>k__BackingField;
    [DataMemberAttribute]
[SerializationContextAttribute("0")]
public string Id { get; public set; }
    [DataMemberAttribute]
[JsonConverterAttribute("Newtonsoft.Json.Converters.VersionConverter")]
[SerializationContextAttribute("0")]
public Version Version { get; public set; }
    [DataMemberAttribute]
[JsonConverterAttribute("Newtonsoft.Json.Converters.StringEnumConverter")]
[SerializationContextAttribute("0")]
public PackageType Type { get; }
    [DataMemberAttribute]
[SerializationContextAttribute("0")]
public string Chip { get; public set; }
    [DataMemberAttribute]
[SerializationContextAttribute("0")]
public string Language { get; public set; }
    [DataMemberAttribute]
[SerializationContextAttribute("0")]
public string Branch { get; public set; }
    [DataMemberAttribute]
[SerializationContextAttribute("0")]
public string ProductArch { get; public set; }
    [DataMemberAttribute]
[SerializationContextAttribute("0")]
public string MachineArch { get; public set; }
    [DataMemberAttribute]
public bool Vital { get; public set; }
    [DataMemberAttribute]
public bool OutOfSupport { get; public set; }
    [DataMemberAttribute]
public bool RebootCheckBeforeInstall { get; public set; }
    [DataMemberAttribute]
[SerializationContextAttribute("1")]
public VisualStudioInformation VisualStudioInformation { get; public set; }
    [DataMemberAttribute]
public Uri License { get; public set; }
    [DataMemberAttribute]
public DependencyCollection Dependencies { get; }
    [DataMemberAttribute]
[SerializationContextAttribute("1")]
public IList`1<ProjectClassifier> ProjectClassifiers { get; }
    [DataMemberAttribute]
[SerializationContextAttribute("1")]
public BreadcrumbTemplate BreadcrumbTemplate { get; public set; }
    [IgnoreDataMemberAttribute]
public CurrentState CurrentState { get; public set; }
    [IgnoreDataMemberAttribute]
public RequestedState RequestedState { get; public set; }
    [IgnoreDataMemberAttribute]
public DetectedState DetectedState { get; public set; }
    [IgnoreDataMemberAttribute]
public IList`1<string> TelemetryCorrelatedParents { get; }
    [IgnoreDataMemberAttribute]
public IList`1<string> AncestorWorkloads { get; }
    [DataMemberAttribute]
public Requirement Requirements { get; public set; }
    [DataMemberAttribute]
[SerializationContextAttribute("1")]
public IList`1<LocalizedResource> LocalizedResources { get; }
    [IgnoreDataMemberAttribute]
public ApplicabilityState ApplicabilityState { get; public set; }
    [DataMemberAttribute]
public ItemBuildInformation BuildInformation { get; public set; }
    [IgnoreDataMemberAttribute]
public bool HasVitalFailure { get; public set; }
    [IgnoreDataMemberAttribute]
public ISet`1<IPackage> SelectedParents { get; }
    [IgnoreDataMemberAttribute]
public ISet`1<IPackage> SelectedRequiredChildren { get; }
    [IgnoreDataMemberAttribute]
public IPackage SupersedingPackage { get; public set; }
    [IgnoreDataMemberAttribute]
public bool Replace { get; public set; }
    [IgnoreDataMemberAttribute]
public IPackage DowngradingPackage { get; public set; }
    [IgnoreDataMemberAttribute]
public IPackage PackageToDowngrade { get; public set; }
    [IgnoreDataMemberAttribute]
public OriginInfo Origin { get; public set; }
    internal IDictionary`2<string, JToken> ExtensionData { get; private set; }
    internal bool HasDependencies { get; }
    public sealed virtual string get_Id();
    public void set_Id(string value);
    public sealed virtual Version get_Version();
    public void set_Version(Version value);
    public abstract virtual PackageType get_Type();
    public sealed virtual string get_Chip();
    public void set_Chip(string value);
    public sealed virtual string get_Language();
    public void set_Language(string value);
    public sealed virtual string get_Branch();
    public void set_Branch(string value);
    public sealed virtual string get_ProductArch();
    public void set_ProductArch(string value);
    public sealed virtual string get_MachineArch();
    public void set_MachineArch(string value);
    [CompilerGeneratedAttribute]
public bool get_Vital();
    [CompilerGeneratedAttribute]
public void set_Vital(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_OutOfSupport();
    [CompilerGeneratedAttribute]
public sealed virtual void set_OutOfSupport(bool value);
    [CompilerGeneratedAttribute]
public bool get_RebootCheckBeforeInstall();
    [CompilerGeneratedAttribute]
public void set_RebootCheckBeforeInstall(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual VisualStudioInformation get_VisualStudioInformation();
    [CompilerGeneratedAttribute]
public sealed virtual void set_VisualStudioInformation(VisualStudioInformation value);
    [CompilerGeneratedAttribute]
public sealed virtual Uri get_License();
    [CompilerGeneratedAttribute]
public void set_License(Uri value);
    public sealed virtual DependencyCollection get_Dependencies();
    public sealed virtual IList`1<ProjectClassifier> get_ProjectClassifiers();
    [CompilerGeneratedAttribute]
public sealed virtual BreadcrumbTemplate get_BreadcrumbTemplate();
    [CompilerGeneratedAttribute]
public void set_BreadcrumbTemplate(BreadcrumbTemplate value);
    public sealed virtual CurrentState get_CurrentState();
    public sealed virtual void set_CurrentState(CurrentState value);
    public sealed virtual RequestedState get_RequestedState();
    public sealed virtual void set_RequestedState(RequestedState value);
    [CompilerGeneratedAttribute]
public sealed virtual DetectedState get_DetectedState();
    [CompilerGeneratedAttribute]
public sealed virtual void set_DetectedState(DetectedState value);
    public sealed virtual IList`1<string> get_TelemetryCorrelatedParents();
    public sealed virtual IList`1<string> get_AncestorWorkloads();
    [CompilerGeneratedAttribute]
public sealed virtual Requirement get_Requirements();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Requirements(Requirement value);
    public sealed virtual IList`1<LocalizedResource> get_LocalizedResources();
    [CompilerGeneratedAttribute]
public sealed virtual ApplicabilityState get_ApplicabilityState();
    [CompilerGeneratedAttribute]
public sealed virtual void set_ApplicabilityState(ApplicabilityState value);
    [CompilerGeneratedAttribute]
public sealed virtual ItemBuildInformation get_BuildInformation();
    [CompilerGeneratedAttribute]
public sealed virtual void set_BuildInformation(ItemBuildInformation value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_HasVitalFailure();
    [CompilerGeneratedAttribute]
public sealed virtual void set_HasVitalFailure(bool value);
    public sealed virtual ISet`1<IPackage> get_SelectedParents();
    public sealed virtual ISet`1<IPackage> get_SelectedRequiredChildren();
    [CompilerGeneratedAttribute]
public sealed virtual IPackage get_SupersedingPackage();
    [CompilerGeneratedAttribute]
public sealed virtual void set_SupersedingPackage(IPackage value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_Replace();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Replace(bool value);
    public sealed virtual IPackage get_DowngradingPackage();
    public sealed virtual void set_DowngradingPackage(IPackage value);
    [CompilerGeneratedAttribute]
public sealed virtual IPackage get_PackageToDowngrade();
    [CompilerGeneratedAttribute]
public sealed virtual void set_PackageToDowngrade(IPackage value);
    [CompilerGeneratedAttribute]
public sealed virtual OriginInfo get_Origin();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Origin(OriginInfo value);
    public sealed virtual string GetUniqueId();
    public sealed virtual bool Equals(IPackageIdentity other);
    public virtual string ToString();
    [CompilerGeneratedAttribute]
internal IDictionary`2<string, JToken> get_ExtensionData();
    [CompilerGeneratedAttribute]
private void set_ExtensionData(IDictionary`2<string, JToken> value);
    internal bool get_HasDependencies();
    private void SetToken(T& token, T value);
    private void SetToken(String& token, string value, bool emptyAsNull);
}
public enum Microsoft.VisualStudio.Setup.PackageErrorType : Enum {
    public int value__;
    public static PackageErrorType Fatal;
    public static PackageErrorType NonFatal;
}
public class Microsoft.VisualStudio.Setup.PackageFactory : object {
    public static IPackageFactory Default;
    private static PackageFactory();
    public sealed virtual IPackage Create(PackageType packageType);
    public sealed virtual PackageType GetPackageType(string type);
}
public class Microsoft.VisualStudio.Setup.PackageIdentity : object {
    private string chip;
    private string language;
    private string branch;
    private string productArch;
    private string machineArch;
    [CompilerGeneratedAttribute]
private string <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private Version <Version>k__BackingField;
    public string Id { get; private set; }
    public Version Version { get; public set; }
    public string Chip { get; public set; }
    public string Language { get; public set; }
    public string Branch { get; public set; }
    public string ProductArch { get; public set; }
    public string MachineArch { get; public set; }
    public PackageIdentity(string id);
    public static string Format(IPackageIdentity identity, bool excludeVersion);
    public static IPackageIdentity Parse(string value);
    public static bool TryParse(string value, IPackageIdentity& identity);
    [CompilerGeneratedAttribute]
public sealed virtual string get_Id();
    [CompilerGeneratedAttribute]
private void set_Id(string value);
    [CompilerGeneratedAttribute]
public sealed virtual Version get_Version();
    [CompilerGeneratedAttribute]
public void set_Version(Version value);
    public sealed virtual string get_Chip();
    public void set_Chip(string value);
    public sealed virtual string get_Language();
    public void set_Language(string value);
    public sealed virtual string get_Branch();
    public void set_Branch(string value);
    public sealed virtual string get_ProductArch();
    public void set_ProductArch(string value);
    public sealed virtual string get_MachineArch();
    public void set_MachineArch(string value);
    public sealed virtual string GetUniqueId();
    public string GetUniqueId(bool excludeVersion);
    public sealed virtual bool Equals(IPackageIdentity other);
    public virtual string ToString();
}
public class Microsoft.VisualStudio.Setup.PackageIdentityComparer : object {
    public static PackageIdentityComparer Default;
    public static PackageIdentityComparer VersionIndependent;
    public static PackageIdentityComparer VersionAndBranchIndependent;
    private StringComparison comparisonType;
    private bool excludeVersion;
    private bool excludeBranch;
    private StringComparer comparer;
    public PackageIdentityComparer(bool excludeVersion, StringComparison comparisonType, bool excludeBranch);
    private static PackageIdentityComparer();
    private static int CompareVersions(Version x, Version y);
    private static bool AreVersionsEqual(Version x, Version y);
    private static bool IsEqualComparisonResult(int result);
    private static bool IsEqualEqualityResult(bool result);
    private TResult CompareCore(IPackageIdentity x, IPackageIdentity y, Func`4<string, string, StringComparison, TResult> compareStrings, Func`3<Version, Version, TResult> compareVersions, Func`2<TResult, bool> isEqualResult, TResult equalResult, TResult lessThanResult, TResult greaterThanResult);
    public sealed virtual int Compare(IPackageIdentity x, IPackageIdentity y);
    public sealed virtual bool Equals(IPackageIdentity x, IPackageIdentity y);
    public sealed virtual int GetHashCode(IPackageIdentity obj);
}
internal class Microsoft.VisualStudio.Setup.PackageIdentityFuzzyChipComparer : object {
    public static PackageIdentityFuzzyChipComparer VersionIndependent;
    private PackageIdentityComparer identityComparerImpl;
    private PackageIdentityFuzzyChipComparer(PackageIdentityComparer identityComparerImpl);
    private static PackageIdentityFuzzyChipComparer();
    public sealed virtual bool Equals(IPackageIdentity x, IPackageIdentity y);
    public sealed virtual int GetHashCode(IPackageIdentity obj);
    public sealed virtual int Compare(IPackageIdentity x, IPackageIdentity y);
    [CompilerGeneratedAttribute]
internal static string <Compare>g__normalize|5_0(string attr);
    [CompilerGeneratedAttribute]
internal static bool <Compare>g__compareChipsAndMachineArchs|5_1(string chip1, string chip2, string mArch1, string mArch2, <>c__DisplayClass5_0& );
}
public enum Microsoft.VisualStudio.Setup.PackageState : Enum {
    public int value__;
    public static PackageState Present;
    public static PackageState Absent;
    public static PackageState Superseded;
    public static PackageState Obsolete;
    public static PackageState Error;
}
public enum Microsoft.VisualStudio.Setup.PackageType : Enum {
    public int value__;
    public static PackageType None;
    public static PackageType Vsix;
    public static PackageType Msi;
    public static PackageType Msu;
    public static PackageType Exe;
    public static PackageType WindowsFeature;
    public static PackageType Product;
    public static PackageType Workload;
    public static PackageType Component;
    public static PackageType Group;
    public static PackageType Zip;
    public static PackageType Nupkg;
}
public enum Microsoft.VisualStudio.Setup.PartialManifestType : Enum {
    public int value__;
    public static PartialManifestType Extension;
    public static PartialManifestType Experiment;
    public static PartialManifestType Installer;
}
[DataContractAttribute]
public class Microsoft.VisualStudio.Setup.Payload : object {
    [CompilerGeneratedAttribute]
private string <FileName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Sha256>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<string> <Hashes>k__BackingField;
    [CompilerGeneratedAttribute]
private long <Size>k__BackingField;
    [CompilerGeneratedAttribute]
private Uri <Url>k__BackingField;
    [CompilerGeneratedAttribute]
private Cookie <Cookie>k__BackingField;
    [CompilerGeneratedAttribute]
private PayloadBuildInformation <BuildInformation>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Cache>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsDynamicEndpoint>k__BackingField;
    [CompilerGeneratedAttribute]
private Signer <Signer>k__BackingField;
    [CompilerGeneratedAttribute]
private string <LocalPath>k__BackingField;
    [DataMemberAttribute]
public string FileName { get; public set; }
    [DataMemberAttribute]
public string Sha256 { get; public set; }
    [DataMemberAttribute]
[EmptyAsNullAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public IList`1<string> Hashes { get; public set; }
    [DataMemberAttribute]
public long Size { get; public set; }
    [DataMemberAttribute]
public Uri Url { get; public set; }
    [DataMemberAttribute]
public Cookie Cookie { get; public set; }
    [DataMemberAttribute]
public PayloadBuildInformation BuildInformation { get; public set; }
    [DataMemberAttribute]
[DefaultValueAttribute("True")]
public bool Cache { get; public set; }
    [DataMemberAttribute]
[DefaultValueAttribute("False")]
public bool IsDynamicEndpoint { get; public set; }
    [DataMemberAttribute]
public Signer Signer { get; public set; }
    [IgnoreDataMemberAttribute]
public string LocalPath { get; public set; }
    [CompilerGeneratedAttribute]
public string get_FileName();
    [CompilerGeneratedAttribute]
public void set_FileName(string value);
    [CompilerGeneratedAttribute]
public string get_Sha256();
    [CompilerGeneratedAttribute]
public void set_Sha256(string value);
    [CompilerGeneratedAttribute]
public IList`1<string> get_Hashes();
    [CompilerGeneratedAttribute]
public void set_Hashes(IList`1<string> value);
    [CompilerGeneratedAttribute]
public long get_Size();
    [CompilerGeneratedAttribute]
public void set_Size(long value);
    [CompilerGeneratedAttribute]
public Uri get_Url();
    [CompilerGeneratedAttribute]
public void set_Url(Uri value);
    [CompilerGeneratedAttribute]
public Cookie get_Cookie();
    [CompilerGeneratedAttribute]
public void set_Cookie(Cookie value);
    [CompilerGeneratedAttribute]
public PayloadBuildInformation get_BuildInformation();
    [CompilerGeneratedAttribute]
public void set_BuildInformation(PayloadBuildInformation value);
    [CompilerGeneratedAttribute]
public bool get_Cache();
    [CompilerGeneratedAttribute]
public void set_Cache(bool value);
    [CompilerGeneratedAttribute]
public bool get_IsDynamicEndpoint();
    [CompilerGeneratedAttribute]
public void set_IsDynamicEndpoint(bool value);
    [CompilerGeneratedAttribute]
public Signer get_Signer();
    [CompilerGeneratedAttribute]
public void set_Signer(Signer value);
    [CompilerGeneratedAttribute]
public string get_LocalPath();
    [CompilerGeneratedAttribute]
public void set_LocalPath(string value);
}
[DataContractAttribute]
public class Microsoft.VisualStudio.Setup.PayloadBuildInformation : BuildInformation {
    public static string LocalPathProperty;
    public static string RelativeUrlProperty;
    public static string CRCProperty;
    public string LocalPath { get; public set; }
    public string RelativeUrl { get; public set; }
    public ulong CRC { get; public set; }
    public string get_LocalPath();
    public void set_LocalPath(string value);
    public string get_RelativeUrl();
    public void set_RelativeUrl(string value);
    public ulong get_CRC();
    public void set_CRC(ulong value);
}
[DataContractAttribute]
public class Microsoft.VisualStudio.Setup.Product : SelectableGroup {
    private bool supportsExtensions;
    [CompilerGeneratedAttribute]
private CommandParameter <InstallParams>k__BackingField;
    [CompilerGeneratedAttribute]
private CommandParameter <RepairParams>k__BackingField;
    [CompilerGeneratedAttribute]
private CommandParameter <UninstallParams>k__BackingField;
    [CompilerGeneratedAttribute]
private CommandParameter <InitializerInstallParams>k__BackingField;
    [CompilerGeneratedAttribute]
private CommandParameter <InitializerRepairParams>k__BackingField;
    [CompilerGeneratedAttribute]
private CommandParameter <InitializerUninstallParams>k__BackingField;
    [CompilerGeneratedAttribute]
private CommandParameter <LaunchParams>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DefaultNgenApplication>k__BackingField;
    [CompilerGeneratedAttribute]
private Icon <Icon>k__BackingField;
    [CompilerGeneratedAttribute]
private string <IconPath>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DefaultInstallDirectory>k__BackingField;
    [CompilerGeneratedAttribute]
private Uri <ReleaseNotes>k__BackingField;
    [CompilerGeneratedAttribute]
private Uri <ThirdPartyNotices>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <RecommendSelection>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <SupportsDownloadThenInstall>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <SupportsDownloadThenUpdate>k__BackingField;
    [CompilerGeneratedAttribute]
private CommandParameter <ExtensibilityFinalizerInstallParams>k__BackingField;
    public PackageType Type { get; }
    [DataMemberAttribute]
public CommandParameter InstallParams { get; public set; }
    [DataMemberAttribute]
public CommandParameter RepairParams { get; public set; }
    [DataMemberAttribute]
public CommandParameter UninstallParams { get; public set; }
    [DataMemberAttribute]
public CommandParameter InitializerInstallParams { get; public set; }
    [DataMemberAttribute]
public CommandParameter InitializerRepairParams { get; public set; }
    [DataMemberAttribute]
public CommandParameter InitializerUninstallParams { get; public set; }
    [DataMemberAttribute]
public CommandParameter LaunchParams { get; public set; }
    [DataMemberAttribute]
public string DefaultNgenApplication { get; public set; }
    [DataMemberAttribute]
public Icon Icon { get; public set; }
    [DataMemberAttribute]
public string IconPath { get; public set; }
    [DataMemberAttribute]
public string DefaultInstallDirectory { get; public set; }
    [DataMemberAttribute]
public Uri ReleaseNotes { get; public set; }
    [DataMemberAttribute]
public Uri ThirdPartyNotices { get; public set; }
    private bool Microsoft.VisualStudio.Setup.IRootPackage.IsRoot { get; }
    [DataMemberAttribute]
public bool RecommendSelection { get; public set; }
    [DataMemberAttribute]
public bool SupportsDownloadThenInstall { get; public set; }
    [DataMemberAttribute]
public bool SupportsDownloadThenUpdate { get; public set; }
    [DataMemberAttribute]
public bool SupportsExtensions { get; public set; }
    [DataMemberAttribute]
public CommandParameter ExtensibilityFinalizerInstallParams { get; public set; }
    public virtual PackageType get_Type();
    [CompilerGeneratedAttribute]
public sealed virtual CommandParameter get_InstallParams();
    [CompilerGeneratedAttribute]
public void set_InstallParams(CommandParameter value);
    [CompilerGeneratedAttribute]
public sealed virtual CommandParameter get_RepairParams();
    [CompilerGeneratedAttribute]
public void set_RepairParams(CommandParameter value);
    [CompilerGeneratedAttribute]
public sealed virtual CommandParameter get_UninstallParams();
    [CompilerGeneratedAttribute]
public void set_UninstallParams(CommandParameter value);
    [CompilerGeneratedAttribute]
public CommandParameter get_InitializerInstallParams();
    [CompilerGeneratedAttribute]
public void set_InitializerInstallParams(CommandParameter value);
    [CompilerGeneratedAttribute]
public CommandParameter get_InitializerRepairParams();
    [CompilerGeneratedAttribute]
public void set_InitializerRepairParams(CommandParameter value);
    [CompilerGeneratedAttribute]
public CommandParameter get_InitializerUninstallParams();
    [CompilerGeneratedAttribute]
public void set_InitializerUninstallParams(CommandParameter value);
    [CompilerGeneratedAttribute]
public CommandParameter get_LaunchParams();
    [CompilerGeneratedAttribute]
public void set_LaunchParams(CommandParameter value);
    [CompilerGeneratedAttribute]
public string get_DefaultNgenApplication();
    [CompilerGeneratedAttribute]
public void set_DefaultNgenApplication(string value);
    [CompilerGeneratedAttribute]
public Icon get_Icon();
    [CompilerGeneratedAttribute]
public void set_Icon(Icon value);
    [CompilerGeneratedAttribute]
public string get_IconPath();
    [CompilerGeneratedAttribute]
public void set_IconPath(string value);
    [CompilerGeneratedAttribute]
public string get_DefaultInstallDirectory();
    [CompilerGeneratedAttribute]
public void set_DefaultInstallDirectory(string value);
    [CompilerGeneratedAttribute]
public Uri get_ReleaseNotes();
    [CompilerGeneratedAttribute]
public void set_ReleaseNotes(Uri value);
    [CompilerGeneratedAttribute]
public Uri get_ThirdPartyNotices();
    [CompilerGeneratedAttribute]
public void set_ThirdPartyNotices(Uri value);
    private sealed virtual override bool Microsoft.VisualStudio.Setup.IRootPackage.get_IsRoot();
    [CompilerGeneratedAttribute]
public bool get_RecommendSelection();
    [CompilerGeneratedAttribute]
public void set_RecommendSelection(bool value);
    [CompilerGeneratedAttribute]
public bool get_SupportsDownloadThenInstall();
    [CompilerGeneratedAttribute]
public void set_SupportsDownloadThenInstall(bool value);
    [CompilerGeneratedAttribute]
public bool get_SupportsDownloadThenUpdate();
    [CompilerGeneratedAttribute]
public void set_SupportsDownloadThenUpdate(bool value);
    public bool get_SupportsExtensions();
    public void set_SupportsExtensions(bool value);
    [CompilerGeneratedAttribute]
public CommandParameter get_ExtensibilityFinalizerInstallParams();
    [CompilerGeneratedAttribute]
public void set_ExtensibilityFinalizerInstallParams(CommandParameter value);
}
public class Microsoft.VisualStudio.Setup.ProductCondition : Condition {
    internal static string RequiredProperty;
    [CompilerGeneratedAttribute]
private string <ProductCode>k__BackingField;
    [CompilerGeneratedAttribute]
private VersionRange <ProductVersion>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <ProductLanguage>k__BackingField;
    [CompilerGeneratedAttribute]
private string <UpgradeCode>k__BackingField;
    public ConditionType Type { get; }
    [DataMemberAttribute]
public string ProductCode { get; public set; }
    [DataMemberAttribute]
[JsonConverterAttribute("Microsoft.VisualStudio.Setup.Serialization.VersionRangeConverter")]
public VersionRange ProductVersion { get; public set; }
    [DataMemberAttribute]
public Nullable`1<int> ProductLanguage { get; public set; }
    [DataMemberAttribute]
public string UpgradeCode { get; public set; }
    private static ProductCondition();
    public virtual ConditionType get_Type();
    [CompilerGeneratedAttribute]
public string get_ProductCode();
    [CompilerGeneratedAttribute]
public void set_ProductCode(string value);
    [CompilerGeneratedAttribute]
public VersionRange get_ProductVersion();
    [CompilerGeneratedAttribute]
public void set_ProductVersion(VersionRange value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_ProductLanguage();
    [CompilerGeneratedAttribute]
public void set_ProductLanguage(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public string get_UpgradeCode();
    [CompilerGeneratedAttribute]
public void set_UpgradeCode(string value);
}
[DataContractAttribute]
public class Microsoft.VisualStudio.Setup.ProgId : object {
    [CompilerGeneratedAttribute]
private string <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DisplayName>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <AlwaysShowExtension>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Path>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Arguments>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Clsid>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DefaultIconPath>k__BackingField;
    [CompilerGeneratedAttribute]
private int <DefaultIconPosition>k__BackingField;
    [CompilerGeneratedAttribute]
private string <IconHandler>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Dde>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DdeApplication>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DdeTopic>k__BackingField;
    [CompilerGeneratedAttribute]
private string <AppUserModelId>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <AllowSilentDefaultTakeOver>k__BackingField;
    [DataMemberAttribute]
public string Id { get; public set; }
    [DataMemberAttribute]
public string DisplayName { get; public set; }
    [DataMemberAttribute]
public bool AlwaysShowExtension { get; public set; }
    [DataMemberAttribute]
public string Path { get; public set; }
    [DataMemberAttribute]
public string Arguments { get; public set; }
    [DataMemberAttribute]
public string Clsid { get; public set; }
    [DataMemberAttribute]
public string DefaultIconPath { get; public set; }
    [DataMemberAttribute]
public int DefaultIconPosition { get; public set; }
    [DataMemberAttribute]
public string IconHandler { get; public set; }
    [DataMemberAttribute]
public bool Dde { get; public set; }
    [DataMemberAttribute]
public string DdeApplication { get; public set; }
    [DataMemberAttribute]
public string DdeTopic { get; public set; }
    [DataMemberAttribute]
public string AppUserModelId { get; public set; }
    [DataMemberAttribute]
public bool AllowSilentDefaultTakeOver { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Id();
    [CompilerGeneratedAttribute]
public void set_Id(string value);
    [CompilerGeneratedAttribute]
public string get_DisplayName();
    [CompilerGeneratedAttribute]
public void set_DisplayName(string value);
    [CompilerGeneratedAttribute]
public bool get_AlwaysShowExtension();
    [CompilerGeneratedAttribute]
public void set_AlwaysShowExtension(bool value);
    [CompilerGeneratedAttribute]
public string get_Path();
    [CompilerGeneratedAttribute]
public void set_Path(string value);
    [CompilerGeneratedAttribute]
public string get_Arguments();
    [CompilerGeneratedAttribute]
public void set_Arguments(string value);
    [CompilerGeneratedAttribute]
public string get_Clsid();
    [CompilerGeneratedAttribute]
public void set_Clsid(string value);
    [CompilerGeneratedAttribute]
public string get_DefaultIconPath();
    [CompilerGeneratedAttribute]
public void set_DefaultIconPath(string value);
    [CompilerGeneratedAttribute]
public int get_DefaultIconPosition();
    [CompilerGeneratedAttribute]
public void set_DefaultIconPosition(int value);
    [CompilerGeneratedAttribute]
public string get_IconHandler();
    [CompilerGeneratedAttribute]
public void set_IconHandler(string value);
    [CompilerGeneratedAttribute]
public bool get_Dde();
    [CompilerGeneratedAttribute]
public void set_Dde(bool value);
    [CompilerGeneratedAttribute]
public string get_DdeApplication();
    [CompilerGeneratedAttribute]
public void set_DdeApplication(string value);
    [CompilerGeneratedAttribute]
public string get_DdeTopic();
    [CompilerGeneratedAttribute]
public void set_DdeTopic(string value);
    [CompilerGeneratedAttribute]
public string get_AppUserModelId();
    [CompilerGeneratedAttribute]
public void set_AppUserModelId(string value);
    [CompilerGeneratedAttribute]
public bool get_AllowSilentDefaultTakeOver();
    [CompilerGeneratedAttribute]
public void set_AllowSilentDefaultTakeOver(bool value);
}
[DataContractAttribute]
public class Microsoft.VisualStudio.Setup.ProjectClassifier : object {
    [CompilerGeneratedAttribute]
private string <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Extension>k__BackingField;
    [CompilerGeneratedAttribute]
private string <FactoryGuid>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<MatcherData> <MatcherData>k__BackingField;
    [CompilerGeneratedAttribute]
private string <MatcherId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <AppliesTo>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Priority>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<string> <Selects>k__BackingField;
    [DataMemberAttribute]
public string Id { get; public set; }
    [DataMemberAttribute]
public string Extension { get; public set; }
    [DataMemberAttribute]
public string FactoryGuid { get; public set; }
    [DataMemberAttribute]
[EmptyAsNullAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public IList`1<MatcherData> MatcherData { get; public set; }
    [DataMemberAttribute]
public string MatcherId { get; public set; }
    [DataMemberAttribute]
public string AppliesTo { get; public set; }
    [DataMemberAttribute]
public int Priority { get; public set; }
    [DataMemberAttribute]
public IList`1<string> Selects { get; internal set; }
    [CompilerGeneratedAttribute]
public string get_Id();
    [CompilerGeneratedAttribute]
public void set_Id(string value);
    [CompilerGeneratedAttribute]
public string get_Extension();
    [CompilerGeneratedAttribute]
public void set_Extension(string value);
    [CompilerGeneratedAttribute]
public string get_FactoryGuid();
    [CompilerGeneratedAttribute]
public void set_FactoryGuid(string value);
    [CompilerGeneratedAttribute]
public IList`1<MatcherData> get_MatcherData();
    [CompilerGeneratedAttribute]
public void set_MatcherData(IList`1<MatcherData> value);
    [CompilerGeneratedAttribute]
public string get_MatcherId();
    [CompilerGeneratedAttribute]
public void set_MatcherId(string value);
    [CompilerGeneratedAttribute]
public string get_AppliesTo();
    [CompilerGeneratedAttribute]
public void set_AppliesTo(string value);
    [CompilerGeneratedAttribute]
public int get_Priority();
    [CompilerGeneratedAttribute]
public void set_Priority(int value);
    [CompilerGeneratedAttribute]
public IList`1<string> get_Selects();
    [CompilerGeneratedAttribute]
internal void set_Selects(IList`1<string> value);
}
[DataContractAttribute]
[JsonConverterAttribute("Microsoft.VisualStudio.Setup.Serialization.PropertyInitializerConverter")]
public abstract class Microsoft.VisualStudio.Setup.PropertyInitializer : object {
    [CompilerGeneratedAttribute]
private string <Property>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DefaultValue>k__BackingField;
    [DataMemberAttribute]
public string Property { get; public set; }
    [DataMemberAttribute]
public string DefaultValue { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Property();
    [CompilerGeneratedAttribute]
public void set_Property(string value);
    [CompilerGeneratedAttribute]
public string get_DefaultValue();
    [CompilerGeneratedAttribute]
public void set_DefaultValue(string value);
}
public class Microsoft.VisualStudio.Setup.RegistryCondition : Condition {
    internal static string RequiredProperty;
    [CompilerGeneratedAttribute]
private string <RegistryKey>k__BackingField;
    [CompilerGeneratedAttribute]
private string <RegistryValue>k__BackingField;
    [CompilerGeneratedAttribute]
private RegistryType <RegistryType>k__BackingField;
    [CompilerGeneratedAttribute]
private string <RegistryData>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Chip>k__BackingField;
    public ConditionType Type { get; }
    [DataMemberAttribute]
public string RegistryKey { get; public set; }
    [DataMemberAttribute]
public string RegistryValue { get; public set; }
    [DataMemberAttribute]
[JsonConverterAttribute("Newtonsoft.Json.Converters.StringEnumConverter")]
public RegistryType RegistryType { get; public set; }
    [DataMemberAttribute]
public string RegistryData { get; public set; }
    [DataMemberAttribute]
public string Chip { get; public set; }
    private static RegistryCondition();
    public virtual ConditionType get_Type();
    [CompilerGeneratedAttribute]
public string get_RegistryKey();
    [CompilerGeneratedAttribute]
public void set_RegistryKey(string value);
    [CompilerGeneratedAttribute]
public string get_RegistryValue();
    [CompilerGeneratedAttribute]
public void set_RegistryValue(string value);
    [CompilerGeneratedAttribute]
public RegistryType get_RegistryType();
    [CompilerGeneratedAttribute]
public void set_RegistryType(RegistryType value);
    [CompilerGeneratedAttribute]
public string get_RegistryData();
    [CompilerGeneratedAttribute]
public void set_RegistryData(string value);
    [CompilerGeneratedAttribute]
public string get_Chip();
    [CompilerGeneratedAttribute]
public void set_Chip(string value);
}
public class Microsoft.VisualStudio.Setup.RegistryPropertyInitializer : PropertyInitializer {
    internal static string RequiredProperty;
    [CompilerGeneratedAttribute]
private string <Key>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Value>k__BackingField;
    [DataMemberAttribute]
public string Key { get; public set; }
    [DataMemberAttribute]
public string Value { get; public set; }
    private static RegistryPropertyInitializer();
    [CompilerGeneratedAttribute]
public string get_Key();
    [CompilerGeneratedAttribute]
public void set_Key(string value);
    [CompilerGeneratedAttribute]
public string get_Value();
    [CompilerGeneratedAttribute]
public void set_Value(string value);
}
public enum Microsoft.VisualStudio.Setup.RegistryType : Enum {
    public int value__;
    public static RegistryType String;
    public static RegistryType Integer;
    public static RegistryType Binary;
    public static RegistryType Expandable;
}
[DataContractAttribute]
public class Microsoft.VisualStudio.Setup.RelatedPackage : object {
    private List`1<int> languageIds;
    [CompilerGeneratedAttribute]
private string <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private VersionRange <Version>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <OnlyDetect>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <LanguageInclusive>k__BackingField;
    [DataMemberAttribute]
public string Id { get; public set; }
    [DataMemberAttribute]
public VersionRange Version { get; public set; }
    [DataMemberAttribute]
public bool OnlyDetect { get; public set; }
    [DataMemberAttribute]
public bool LanguageInclusive { get; public set; }
    [DataMemberAttribute]
public IList`1<int> LanguageIds { get; }
    [CompilerGeneratedAttribute]
public string get_Id();
    [CompilerGeneratedAttribute]
public void set_Id(string value);
    [CompilerGeneratedAttribute]
public VersionRange get_Version();
    [CompilerGeneratedAttribute]
public void set_Version(VersionRange value);
    [CompilerGeneratedAttribute]
public bool get_OnlyDetect();
    [CompilerGeneratedAttribute]
public void set_OnlyDetect(bool value);
    [CompilerGeneratedAttribute]
public bool get_LanguageInclusive();
    [CompilerGeneratedAttribute]
public void set_LanguageInclusive(bool value);
    public IList`1<int> get_LanguageIds();
}
public static class Microsoft.VisualStudio.Setup.RemoteSettingsConstants : object {
    public static string RemoteSettingsFileName;
    public static string EngineExeName;
    public static string FeaturesPath;
    public static string VariablesPath;
    public static string BackgroundDownload;
    public static string BatteryPercentage;
    public static string DiskSpacePercentageRemaining;
    public static string DiskSpaceSizeRemaining;
    public static string SuccessLogLimit;
    public static string ErrorLogLimit;
    public static string CancelLogLimit;
    public static string PrecheckFailureLogLimit;
    public static string UpdateCheckOnlyFailureLogLimit;
    public static string ConcurrentDownloads;
    public static string NotEnoughSpaceErrorBytes;
    public static string NotEnoughSpaceErrorPercent;
    public static string SynchronousNgenForP1Activities;
    public static string TelemetrySamplingPercentage;
    public static string IfModifiedSinceKey;
    public static string AuthenticationKey;
    public static string DisableElevationService;
    public static string ConfigExtensions;
    private static RemoteSettingsConstants();
}
public enum Microsoft.VisualStudio.Setup.RequestedState : Enum {
    public int value__;
    public static RequestedState None;
    public static RequestedState Absent;
    public static RequestedState Superseded;
    public static RequestedState Present;
    public static RequestedState Downgrade;
}
[DataContractAttribute]
public class Microsoft.VisualStudio.Setup.Requirement : object {
    private IDictionary`2<string, string> functors;
    [CompilerGeneratedAttribute]
private VersionRange <SupportedOS>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <HyperVRequired>k__BackingField;
    [CompilerGeneratedAttribute]
private ConditionGroup <Conditions>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ContainerApplicable>k__BackingField;
    [DataMemberAttribute]
[JsonConverterAttribute("Microsoft.VisualStudio.Setup.Serialization.VersionRangeConverter")]
public VersionRange SupportedOS { get; public set; }
    [DataMemberAttribute]
public bool HyperVRequired { get; public set; }
    [DataMemberAttribute]
public IDictionary`2<string, string> Functors { get; }
    [DataMemberAttribute]
public ConditionGroup Conditions { get; public set; }
    [DataMemberAttribute]
[DefaultValueAttribute("True")]
public bool ContainerApplicable { get; public set; }
    [CompilerGeneratedAttribute]
public VersionRange get_SupportedOS();
    [CompilerGeneratedAttribute]
public void set_SupportedOS(VersionRange value);
    [CompilerGeneratedAttribute]
public bool get_HyperVRequired();
    [CompilerGeneratedAttribute]
public void set_HyperVRequired(bool value);
    public IDictionary`2<string, string> get_Functors();
    [CompilerGeneratedAttribute]
public ConditionGroup get_Conditions();
    [CompilerGeneratedAttribute]
public void set_Conditions(ConditionGroup value);
    [CompilerGeneratedAttribute]
public bool get_ContainerApplicable();
    [CompilerGeneratedAttribute]
public void set_ContainerApplicable(bool value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.VisualStudio.Setup.Security.InvalidSignatureException : EngineException {
    [CompilerGeneratedAttribute]
private VerificationResult <Result>k__BackingField;
    public VerificationResult Result { get; private set; }
    public InvalidSignatureException(VerificationResult result, ResourceManager resourceManager, string resourceId, Object[] args);
    protected InvalidSignatureException(SerializationInfo info, StreamingContext context);
    [NullableContextAttribute("2")]
public static InvalidSignatureException TryCreate(VerificationInformation information);
    [CompilerGeneratedAttribute]
public VerificationResult get_Result();
    [CompilerGeneratedAttribute]
private void set_Result(VerificationResult value);
    public virtual void GetObjectData(SerializationInfo info, StreamingContext context);
}
[NullableContextAttribute("1")]
public interface Microsoft.VisualStudio.Setup.Security.ISignatureVerifier {
    public abstract virtual VerificationInformation Verify(FileStream file, string path, string layoutPath);
    public abstract virtual Signer GetSigner(FileStream file, string path);
}
[NullableContextAttribute("2")]
public interface Microsoft.VisualStudio.Setup.Security.ISignatureVerifierManager {
    [NullableContextAttribute("1")]
public abstract virtual void SetFallbackIndicator(Version version);
    [NullableContextAttribute("1")]
public abstract virtual VerificationInformation Verify(Stream file, string path, VerificationContext verificationContext);
    [NullableContextAttribute("1")]
public abstract virtual VerificationInformation Verify(string path, VerificationContext verificationContext, string layoutCertPath);
    public abstract virtual Signer GetSigner(Stream file, string path);
    public abstract virtual bool VerifySigner(string expectedSignerStr, string actualSignerStr);
    public abstract virtual bool IsMicrosoftSubjectName(string subjectName);
    public abstract virtual bool IsGitHubSubjectName(string subjectName);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class Microsoft.VisualStudio.Setup.Security.VerificationInformation : object {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Object[] telemetryResourceArgs;
    [CompilerGeneratedAttribute]
private VerificationResult <Result>k__BackingField;
    [NullableAttribute("1")]
[CompilerGeneratedAttribute]
private IList`1<string> <Signers>k__BackingField;
    [CompilerGeneratedAttribute]
private X509Certificate2 <Certificate>k__BackingField;
    [CompilerGeneratedAttribute]
private ResourceManager <ResourceManager>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ResourceId>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private Object[] <ResourceArgs>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Message>k__BackingField;
    public VerificationResult Result { get; public set; }
    [NullableAttribute("1")]
public IList`1<string> Signers { get; internal set; }
    public X509Certificate2 Certificate { get; internal set; }
    public ResourceManager ResourceManager { get; internal set; }
    public string ResourceId { get; internal set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public Object[] ResourceArgs { get; internal set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public Object[] TelemetryResourceArgs { get; internal set; }
    public string Message { get; internal set; }
    public bool HasResources { get; }
    public VerificationInformation(IList`1<string> signers);
    [CompilerGeneratedAttribute]
public VerificationResult get_Result();
    [CompilerGeneratedAttribute]
public void set_Result(VerificationResult value);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public IList`1<string> get_Signers();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
internal void set_Signers(IList`1<string> value);
    [CompilerGeneratedAttribute]
public X509Certificate2 get_Certificate();
    [CompilerGeneratedAttribute]
internal void set_Certificate(X509Certificate2 value);
    [CompilerGeneratedAttribute]
public ResourceManager get_ResourceManager();
    [CompilerGeneratedAttribute]
internal void set_ResourceManager(ResourceManager value);
    [CompilerGeneratedAttribute]
public string get_ResourceId();
    [CompilerGeneratedAttribute]
internal void set_ResourceId(string value);
    [CompilerGeneratedAttribute]
public Object[] get_ResourceArgs();
    [CompilerGeneratedAttribute]
internal void set_ResourceArgs(Object[] value);
    public Object[] get_TelemetryResourceArgs();
    internal void set_TelemetryResourceArgs(Object[] value);
    [CompilerGeneratedAttribute]
public string get_Message();
    [CompilerGeneratedAttribute]
internal void set_Message(string value);
    public bool get_HasResources();
}
public enum Microsoft.VisualStudio.Setup.Security.VerificationResult : Enum {
    public int value__;
    public static VerificationResult Success;
    public static VerificationResult NotSigned;
    public static VerificationResult InvalidSignature;
    public static VerificationResult InvalidCertificate;
    public static VerificationResult InvalidTestCertificate;
    public static VerificationResult NotSupported;
    public static VerificationResult Exception;
    public static VerificationResult HashMismatch;
}
[DataContractAttribute]
public abstract class Microsoft.VisualStudio.Setup.SelectableGroup : Group {
    [CompilerGeneratedAttribute]
private SelectedState <SelectedState>k__BackingField;
    [CompilerGeneratedAttribute]
private UserSelectedState <UserSelectedState>k__BackingField;
    public SelectedState SelectedState { get; public set; }
    public UserSelectedState UserSelectedState { get; public set; }
    [CompilerGeneratedAttribute]
public sealed virtual SelectedState get_SelectedState();
    [CompilerGeneratedAttribute]
public sealed virtual void set_SelectedState(SelectedState value);
    [CompilerGeneratedAttribute]
public sealed virtual UserSelectedState get_UserSelectedState();
    [CompilerGeneratedAttribute]
public sealed virtual void set_UserSelectedState(UserSelectedState value);
}
public enum Microsoft.VisualStudio.Setup.SelectedState : Enum {
    public int value__;
    public static SelectedState NotSelected;
    public static SelectedState IndividuallySelected;
    public static SelectedState GroupSelected;
}
public class Microsoft.VisualStudio.Setup.SelectionState : object {
    [CompilerGeneratedAttribute]
private SelectedState <SelectedState>k__BackingField;
    [CompilerGeneratedAttribute]
private UserSelectedState <UserSelectedState>k__BackingField;
    public SelectedState SelectedState { get; }
    public UserSelectedState UserSelectedState { get; }
    public SelectionState(SelectedState selectedState, UserSelectedState userSelectedState);
    [CompilerGeneratedAttribute]
public sealed virtual SelectedState get_SelectedState();
    [CompilerGeneratedAttribute]
public sealed virtual UserSelectedState get_UserSelectedState();
    public sealed virtual bool Equals(ISelectionState other);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.VisualStudio.Setup.Serialization.AppliesToConverter : JsonConverter {
    private static object EmptyObject;
    private static AppliesToConverter();
    public virtual bool CanConvert(Type objectType);
    public virtual object ReadJson(JsonReader reader, Type objectType, object existingValue, JsonSerializer serializer);
    public virtual void WriteJson(JsonWriter writer, object value, JsonSerializer serializer);
}
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[DictionaryMemberAttribute]
public class Microsoft.VisualStudio.Setup.Serialization.CaseSensitiveStringDictionary : Dictionary`2<string, string> {
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.VisualStudio.Setup.Serialization.CatalogConverter : JsonConverter {
    [NullableAttribute("2")]
private IServiceProvider services;
    public bool CanWrite { get; }
    [NullableContextAttribute("2")]
public CatalogConverter(IServiceProvider services);
    public virtual bool get_CanWrite();
    public virtual bool CanConvert(Type objectType);
    public virtual object ReadJson(JsonReader reader, Type objectType, object existingValue, JsonSerializer serializer);
    public virtual void WriteJson(JsonWriter writer, object value, JsonSerializer serializer);
    private static bool TryReadPropertyName(JsonReader reader, String& propertyName);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.VisualStudio.Setup.Serialization.CatalogInfoExtractor : object {
    private static string CatalogInfoKey;
    private IFileSystem fileSystem;
    public CatalogInfoExtractor(IFileSystem fileSystem);
    private static CatalogInfoExtractor();
    public sealed virtual CatalogInfo ExtractFromManifest(string manifestPath);
    private bool FindCatalogInfo(JsonTextReader reader);
}
[NullableContextAttribute("2")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[ComVisibleAttribute("False")]
public class Microsoft.VisualStudio.Setup.Serialization.CatalogSerializer : ModelSerializer`1<Catalog> {
    public CatalogSerializer(IServiceProvider services);
}
[NullableContextAttribute("2")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class Microsoft.VisualStudio.Setup.Serialization.ChannelFeedSerializer : ModelSerializer`1<ChannelFeed> {
    public ChannelFeedSerializer(IServiceProvider services);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.VisualStudio.Setup.Serialization.ChannelItemConverter : JsonConverter {
    private static TypeInfo ItemTypeInfo;
    private IChannelItemFactory factory;
    public bool CanWrite { get; }
    [NullableContextAttribute("2")]
public ChannelItemConverter(IServiceProvider services);
    private static ChannelItemConverter();
    public virtual bool get_CanWrite();
    public virtual bool CanConvert(Type objectType);
    public virtual object ReadJson(JsonReader reader, Type objectType, object existingValue, JsonSerializer serializer);
    public virtual void WriteJson(JsonWriter writer, object value, JsonSerializer serializer);
}
[NullableContextAttribute("2")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class Microsoft.VisualStudio.Setup.Serialization.ChannelItemSerializer : ModelSerializer`1<IChannelItem> {
    public ChannelItemSerializer(IServiceProvider services);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.VisualStudio.Setup.Serialization.ChannelManifestConverter : JsonConverter {
    [NullableAttribute("2")]
private IServiceProvider services;
    public bool CanWrite { get; }
    [NullableContextAttribute("2")]
public ChannelManifestConverter(IServiceProvider services);
    public virtual bool get_CanWrite();
    public virtual bool CanConvert(Type objectType);
    public virtual object ReadJson(JsonReader reader, Type objectType, object existingValue, JsonSerializer serializer);
    public virtual void WriteJson(JsonWriter writer, object value, JsonSerializer serializer);
    private static bool TryReadPropertyName(JsonReader reader, String& propertyName);
}
[NullableContextAttribute("2")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[ComVisibleAttribute("False")]
public class Microsoft.VisualStudio.Setup.Serialization.ChannelManifestSerializer : ModelSerializer`1<ChannelManifest> {
    public ChannelManifestSerializer(IServiceProvider services);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public static class Microsoft.VisualStudio.Setup.Serialization.ComponentCache : object {
    public static bool IsSupported(IPackageReference package);
    public static bool IsSupported(IPackage package);
    private static bool IsSupported(PackageType packageType);
}
public class Microsoft.VisualStudio.Setup.Serialization.ComponentCacheSerializer : CatalogSerializer {
    [CompilerGeneratedAttribute]
private SerializationContext <Context>k__BackingField;
    protected SerializationContext Context { get; }
    [NullableContextAttribute("2")]
public ComponentCacheSerializer(IServiceProvider services, IEnumerable`1<IPackageIdentity> packages);
    [CompilerGeneratedAttribute]
protected virtual SerializationContext get_Context();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.VisualStudio.Setup.Serialization.ConditionConverter : JsonConverter {
    public bool CanRead { get; }
    public bool CanWrite { get; }
    public virtual bool get_CanRead();
    public virtual bool get_CanWrite();
    public virtual bool CanConvert(Type objectType);
    public virtual object ReadJson(JsonReader reader, Type objectType, object existingValue, JsonSerializer serializer);
    public virtual void WriteJson(JsonWriter writer, object value, JsonSerializer serializer);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.VisualStudio.Setup.Serialization.ConditionGroupConverter : JsonConverter {
    public bool CanWrite { get; }
    public virtual bool get_CanWrite();
    public virtual bool CanConvert(Type objectType);
    public virtual object ReadJson(JsonReader reader, Type objectType, object existingValue, JsonSerializer serializer);
    public virtual void WriteJson(JsonWriter writer, object value, JsonSerializer serializer);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.VisualStudio.Setup.Serialization.ConverterProvider : object {
    private Dictionary`2<Type, IList`1<JsonConverter>> converterList;
    public sealed virtual IEnumerable`1<JsonConverter> GetConverters();
    public sealed virtual void AddConverter(JsonConverter converter);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.VisualStudio.Setup.Serialization.DependencyCollectionConverter : JsonConverter {
    private static string MinShellId;
    private bool skipExtensions;
    public bool CanRead { get; }
    public DependencyCollectionConverter(bool skipExtensions);
    private static DependencyCollectionConverter();
    public virtual bool CanConvert(Type objectType);
    public virtual bool get_CanRead();
    public virtual object ReadJson(JsonReader reader, Type objectType, object existingValue, JsonSerializer serializer);
    public virtual void WriteJson(JsonWriter writer, object value, JsonSerializer serializer);
    private void WriteJson(JsonWriter writer, DependencyCollection dependencies, JsonSerializer serializer);
    private void PopulateDependencies(JsonReader reader, JsonSerializer serializer, DependencyCollection collection);
    private void HandleMinShellVersioning(Dependency dependency, StreamingContext context);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.VisualStudio.Setup.Serialization.DependencyConverter : JsonConverter {
    private static object EmptyObject;
    private static DependencyConverter();
    public virtual bool CanConvert(Type objectType);
    public virtual object ReadJson(JsonReader reader, Type objectType, object existingValue, JsonSerializer serializer);
    public virtual void WriteJson(JsonWriter writer, object value, JsonSerializer serializer);
}
[AttributeUsageAttribute("132")]
public class Microsoft.VisualStudio.Setup.Serialization.DictionaryMemberAttribute : Attribute {
    [CompilerGeneratedAttribute]
private bool <KeyPreserveCase>k__BackingField;
    public bool KeyPreserveCase { get; public set; }
    [CompilerGeneratedAttribute]
public bool get_KeyPreserveCase();
    [CompilerGeneratedAttribute]
public void set_KeyPreserveCase(bool value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public static class Microsoft.VisualStudio.Setup.Serialization.EmptyAsNull : object {
    private static TypeInfo ICollectionTypeInfo;
    private static TypeInfo ICollectionTTypeInfo;
    private static TypeInfo IEnumerableTypeInfo;
    private static TypeInfo KeyValuePairTypeInfo;
    private static EmptyAsNull();
    [NullableContextAttribute("2")]
public static Nullable`1<bool> IsNullOrEmpty(object object);
    internal static bool IsEnumerable(Type type, Predicate`1& isNullOrEmpty);
    private static Predicate`1<object> GetNullOrEmptyPredicate(TypeInfo typeInfo, Type[] typeArguments);
    [NullableContextAttribute("2")]
private static bool IsNullOrEmptyEnumerable(IEnumerable source);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[AttributeUsageAttribute("132")]
public class Microsoft.VisualStudio.Setup.Serialization.EmptyAsNullAttribute : Attribute {
    [CompilerGeneratedAttribute]
private Type[] <GenericTypeArguments>k__BackingField;
    public Type[] GenericTypeArguments { get; }
    public EmptyAsNullAttribute(Type[] genericTypeArguments);
    [CompilerGeneratedAttribute]
public Type[] get_GenericTypeArguments();
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal class Microsoft.VisualStudio.Setup.Serialization.ExtensionRecordsConverter : JsonConverter`1<ExtensionRecords> {
    [NullableAttribute("2")]
private ILogger logger;
    [NullableContextAttribute("2")]
public ExtensionRecordsConverter(ILogger logger);
    public virtual ExtensionRecords ReadJson(JsonReader reader, Type objectType, ExtensionRecords existingValue, bool hasExistingValue, JsonSerializer serializer);
    public virtual void WriteJson(JsonWriter writer, ExtensionRecords value, JsonSerializer serializer);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class Microsoft.VisualStudio.Setup.Serialization.Extensions : object {
    [ExtensionAttribute]
public static string ToJson(Package package, IServiceProvider services);
    [ExtensionAttribute]
public static bool IsNullable(Type type);
}
internal static class Microsoft.VisualStudio.Setup.Serialization.FeedParser`1 : object {
    internal static T Parse(IServiceProvider services, ModelSerializer`1<T> serializer, string path, bool verifySignature);
    internal static T Parse(ModelSerializer`1<T> serializer, Stream stream);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.VisualStudio.Setup.Serialization.FilterLocalizeResourceConverter : JsonConverter {
    private static TypeInfo TypeInfo;
    private string filterLanguage;
    public bool CanRead { get; }
    public bool CanWrite { get; }
    public FilterLocalizeResourceConverter(string filterLanguage);
    private static FilterLocalizeResourceConverter();
    public virtual bool CanConvert(Type objectType);
    public virtual bool get_CanRead();
    public virtual object ReadJson(JsonReader reader, Type objectType, object existingValue, JsonSerializer serializer);
    public virtual bool get_CanWrite();
    public virtual void WriteJson(JsonWriter writer, object value, JsonSerializer serializer);
}
[NullableContextAttribute("1")]
internal interface Microsoft.VisualStudio.Setup.Serialization.ICatalogInfoExtractor {
    public abstract virtual CatalogInfo ExtractFromManifest(string manifestPath);
}
[NullableContextAttribute("1")]
public interface Microsoft.VisualStudio.Setup.Serialization.IConverterProvider {
    public abstract virtual IEnumerable`1<JsonConverter> GetConverters();
    public abstract virtual void AddConverter(JsonConverter converter);
}
[NullableContextAttribute("2")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class Microsoft.VisualStudio.Setup.Serialization.InstallationConfigurationSerializer : ModelSerializer`1<InstallationConfiguration> {
    public InstallationConfigurationSerializer(IServiceProvider services);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.VisualStudio.Setup.Serialization.InstallSizeConverter : JsonConverter {
    public bool CanRead { get; }
    public bool CanWrite { get; }
    public virtual bool CanConvert(Type objectType);
    public virtual bool get_CanRead();
    public virtual bool get_CanWrite();
    public virtual object ReadJson(JsonReader reader, Type objectType, object existingValue, JsonSerializer serializer);
    public virtual void WriteJson(JsonWriter writer, object value, JsonSerializer serializer);
}
[NullableContextAttribute("2")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class Microsoft.VisualStudio.Setup.Serialization.InstanceSerializer : ModelSerializer`1<Instance> {
    [CompilerGeneratedAttribute]
private SerializationContext <Context>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsExclusive>k__BackingField;
    protected SerializationContext Context { get; }
    protected bool IsExclusive { get; }
    public InstanceSerializer(IServiceProvider services);
    public InstanceSerializer(IServiceProvider services, SerializationContext context);
    [CompilerGeneratedAttribute]
protected virtual SerializationContext get_Context();
    [CompilerGeneratedAttribute]
protected virtual bool get_IsExclusive();
}
[NullableContextAttribute("1")]
public interface Microsoft.VisualStudio.Setup.Serialization.ISerializer`1 {
    public abstract virtual T Deserialize(Stream stream);
    public abstract virtual void Serialize(T object, Stream stream);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class Microsoft.VisualStudio.Setup.Serialization.KeyedValueCollection`2 : object {
    private IDictionary`2<TKey, TValue> store;
    private bool isNullable;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private EventHandler`1<NotifyCollectionChangedEventArgs`1<TValue>> CollectionChanged;
    public int Count { get; }
    public bool IsReadOnly { get; }
    [ExcludeFromCodeCoverageAttribute]
private TValue System.Collections.Generic.IDictionary<TKey,TValue>.Item { get; private set; }
    [ExcludeFromCodeCoverageAttribute]
private ICollection`1<TKey> System.Collections.Generic.IDictionary<TKey,TValue>.Keys { get; }
    [ExcludeFromCodeCoverageAttribute]
private ICollection`1<TValue> System.Collections.Generic.IDictionary<TKey,TValue>.Values { get; }
    public KeyedValueCollection`2(IEqualityComparer`1<TKey> comparer);
    [CompilerGeneratedAttribute]
public sealed virtual void add_CollectionChanged(EventHandler`1<NotifyCollectionChangedEventArgs`1<TValue>> value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_CollectionChanged(EventHandler`1<NotifyCollectionChangedEventArgs`1<TValue>> value);
    public sealed virtual int get_Count();
    public sealed virtual bool get_IsReadOnly();
    public sealed virtual void Add(TValue item);
    public void AddRange(IEnumerable`1<TValue> items);
    public sealed virtual void Clear();
    public sealed virtual bool Contains(TValue item);
    public sealed virtual bool ContainsKey(TKey key);
    public sealed virtual IEnumerator`1<TValue> GetEnumerator();
    public sealed virtual bool Remove(TKey key);
    public sealed virtual bool Remove(TValue item);
    public sealed virtual bool TryGetValue(TKey key, TValue& item);
    protected abstract virtual TKey GetKeyForItem(TValue item);
    protected abstract virtual void SetKeyForItem(TKey key, TValue item);
    private sealed virtual override TValue System.Collections.Generic.IDictionary<TKey,TValue>.get_Item(TKey key);
    private sealed virtual override void System.Collections.Generic.IDictionary<TKey,TValue>.set_Item(TKey key, TValue value);
    private sealed virtual override ICollection`1<TKey> System.Collections.Generic.IDictionary<TKey,TValue>.get_Keys();
    private sealed virtual override ICollection`1<TValue> System.Collections.Generic.IDictionary<TKey,TValue>.get_Values();
    [ExcludeFromCodeCoverageAttribute]
private sealed virtual override void System.Collections.Generic.IDictionary<TKey,TValue>.Add(TKey key, TValue value);
    [ExcludeFromCodeCoverageAttribute]
private sealed virtual override void System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.Add(KeyValuePair`2<TKey, TValue> item);
    [ExcludeFromCodeCoverageAttribute]
private sealed virtual override bool System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.Contains(KeyValuePair`2<TKey, TValue> item);
    [ExcludeFromCodeCoverageAttribute]
private sealed virtual override void System.Collections.Generic.ICollection<TValue>.CopyTo(TValue[] array, int arrayIndex);
    [ExcludeFromCodeCoverageAttribute]
private sealed virtual override void System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.CopyTo(KeyValuePair`2[] array, int arrayIndex);
    [ExcludeFromCodeCoverageAttribute]
private sealed virtual override IEnumerator`1<KeyValuePair`2<TKey, TValue>> System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<TKey,TValue>>.GetEnumerator();
    [ExcludeFromCodeCoverageAttribute]
private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    [ExcludeFromCodeCoverageAttribute]
private sealed virtual override bool System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.Remove(KeyValuePair`2<TKey, TValue> item);
    [ExcludeFromCodeCoverageAttribute]
private TKey GetKeyForItem(TValue item, string paramName);
    [ExcludeFromCodeCoverageAttribute]
private KeyValuePair`2<TKey, TValue> Wrap(TValue item, string paramName);
    private void OnCollectionChanged(NotifyCollectionChangedAction action);
    [NullableContextAttribute("2")]
private void OnCollectionChanged(NotifyCollectionChangedAction action, TValue item);
    private void OnCollectionChanged(NotifyCollectionChangedAction action, IEnumerable`1<TValue> items);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class Microsoft.VisualStudio.Setup.Serialization.ModelContext : object {
    [CompilerGeneratedAttribute]
private ILogger <Logger>k__BackingField;
    [CompilerGeneratedAttribute]
private IServiceProvider <Services>k__BackingField;
    public ILogger Logger { get; }
    public IServiceProvider Services { get; }
    public ModelContext(IServiceProvider services);
    [CompilerGeneratedAttribute]
public ILogger get_Logger();
    [CompilerGeneratedAttribute]
public IServiceProvider get_Services();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.VisualStudio.Setup.Serialization.ModelSerializer`1 : object {
    private static Tuple`3<SerializationContext, bool, bool> DefaultResolverCacheKey;
    private static ConcurrentDictionary`2<Tuple`3<SerializationContext, bool, bool>, WeakReference`1<SetupContractResolver>> ResolverCache;
    internal static int DefaultIndentation;
    internal static char DefaultQuoteChar;
    private static char DefaultIndentChar;
    [NullableAttribute("2")]
private IServiceProvider services;
    [NullableAttribute("2")]
private ILogger logger;
    [CompilerGeneratedAttribute]
private bool <ContinueOnError>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Indent>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Indentation>k__BackingField;
    [CompilerGeneratedAttribute]
private char <QuoteChar>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private string <Location>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<JsonConverter> <Converters>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Sort>k__BackingField;
    public bool ContinueOnError { get; public set; }
    public bool Indent { get; public set; }
    public int Indentation { get; public set; }
    public char QuoteChar { get; public set; }
    [NullableAttribute("2")]
public string Location { get; public set; }
    protected SerializationContext Context { get; }
    protected bool IsExclusive { get; }
    protected IList`1<JsonConverter> Converters { get; private set; }
    protected bool Sort { get; }
    [NullableContextAttribute("2")]
public ModelSerializer`1(IServiceProvider services);
    [NullableContextAttribute("2")]
protected ModelSerializer`1(IServiceProvider services, bool useCamelCase);
    private static ModelSerializer`1();
    [CompilerGeneratedAttribute]
public bool get_ContinueOnError();
    [CompilerGeneratedAttribute]
public void set_ContinueOnError(bool value);
    [CompilerGeneratedAttribute]
public bool get_Indent();
    [CompilerGeneratedAttribute]
public void set_Indent(bool value);
    [CompilerGeneratedAttribute]
public int get_Indentation();
    [CompilerGeneratedAttribute]
public void set_Indentation(int value);
    [CompilerGeneratedAttribute]
public char get_QuoteChar();
    [CompilerGeneratedAttribute]
public void set_QuoteChar(char value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public string get_Location();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public void set_Location(string value);
    protected virtual SerializationContext get_Context();
    protected virtual bool get_IsExclusive();
    [CompilerGeneratedAttribute]
protected IList`1<JsonConverter> get_Converters();
    [CompilerGeneratedAttribute]
private void set_Converters(IList`1<JsonConverter> value);
    [CompilerGeneratedAttribute]
protected virtual bool get_Sort();
    public T Deserialize(string text);
    public T Deserialize(TextReader reader);
    public T Deserialize(JsonTextReader reader);
    public Task`1<T> DeserializeAsync(string text, CancellationToken token);
    public Task`1<T> DeserializeAsync(TextReader reader, CancellationToken token);
    public string Serialize(T object);
    public void Serialize(TextWriter writer, T object);
    public Task`1<string> SerializeAsync(T object, CancellationToken token);
    public Task SerializeAsync(TextWriter writer, T object, CancellationToken token);
    protected virtual ModelContext GetContext();
    private SetupContractResolver GetContractResolver(bool default);
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
private void <Deserialize>b__42_0(object sender, ErrorEventArgs args);
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
private void <Serialize>b__46_0(object sender, ErrorEventArgs args);
    [CompilerGeneratedAttribute]
internal static SetupContractResolver <GetContractResolver>g__creator|50_0(Tuple`3<SerializationContext, bool, bool> key);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.VisualStudio.Setup.Serialization.ModelSerializerAdapter`1 : object {
    private ModelSerializer`1<T> serializer;
    public ModelSerializerAdapter`1(ModelSerializer`1<T> serializer);
    public sealed virtual T Deserialize(Stream stream);
    public sealed virtual void Serialize(T object, Stream stream);
}
internal class Microsoft.VisualStudio.Setup.Serialization.OptimizedJsonTextReader : JsonTextReader {
    [NullableContextAttribute("1")]
public OptimizedJsonTextReader(TextReader reader);
    private sealed virtual override bool Newtonsoft.Json.IJsonLineInfo.HasLineInfo();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.VisualStudio.Setup.Serialization.PackageCollectionConverter : JsonConverter {
    private static TypeInfo ICollectionOfIPackageTypeInfo;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private Predicate`1<IPackage> <Filter>k__BackingField;
    public bool CanRead { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public Predicate`1<IPackage> Filter { get; public set; }
    private static PackageCollectionConverter();
    public virtual bool get_CanRead();
    [CompilerGeneratedAttribute]
public Predicate`1<IPackage> get_Filter();
    [CompilerGeneratedAttribute]
public void set_Filter(Predicate`1<IPackage> value);
    public virtual bool CanConvert(Type objectType);
    public virtual object ReadJson(JsonReader reader, Type objectType, object existingValue, JsonSerializer serializer);
    public virtual void WriteJson(JsonWriter writer, object value, JsonSerializer serializer);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.VisualStudio.Setup.Serialization.PackageConverter : JsonConverter {
    private static TypeInfo PackageTypeInfo;
    private IPackageFactory factory;
    public bool CanWrite { get; }
    [NullableContextAttribute("2")]
public PackageConverter(IServiceProvider services);
    private static PackageConverter();
    public virtual bool get_CanWrite();
    public virtual bool CanConvert(Type objectType);
    public virtual object ReadJson(JsonReader reader, Type objectType, object existingValue, JsonSerializer serializer);
    public virtual void WriteJson(JsonWriter writer, object value, JsonSerializer serializer);
}
[NullableContextAttribute("2")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class Microsoft.VisualStudio.Setup.Serialization.PackageSerializer : ModelSerializer`1<IPackage> {
    public PackageSerializer(IServiceProvider services);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.VisualStudio.Setup.Serialization.PropertyInitializerConverter : JsonConverter {
    public bool CanRead { get; }
    public bool CanWrite { get; }
    public virtual bool get_CanRead();
    public virtual bool get_CanWrite();
    public virtual bool CanConvert(Type objectType);
    public virtual object ReadJson(JsonReader reader, Type objectType, object existingValue, JsonSerializer serializer);
    public virtual void WriteJson(JsonWriter writer, object value, JsonSerializer serializer);
}
[FlagsAttribute]
public enum Microsoft.VisualStudio.Setup.Serialization.SerializationContext : Enum {
    public int value__;
    public static SerializationContext All;
    public static SerializationContext ComponentCache;
    public static SerializationContext Packages;
    public static SerializationContext Errors;
    public static SerializationContext User;
}
[AttributeUsageAttribute("128")]
public class Microsoft.VisualStudio.Setup.Serialization.SerializationContextAttribute : Attribute {
    [NullableAttribute("1")]
public static SerializationContextAttribute Default;
    [CompilerGeneratedAttribute]
private SerializationContext <Context>k__BackingField;
    public SerializationContext Context { get; }
    public bool IsDefault { get; }
    public SerializationContextAttribute(SerializationContext context);
    private static SerializationContextAttribute();
    [CompilerGeneratedAttribute]
public SerializationContext get_Context();
    public bool get_IsDefault();
    public bool ShouldSerialize(SerializationContext context);
    public bool ShouldSerialize(SerializationContext context, bool exclusive);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.VisualStudio.Setup.Serialization.SetupContractResolver : DefaultContractResolver {
    [CompilerGeneratedAttribute]
private SerializationContext <Context>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsExclusive>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Sort>k__BackingField;
    public SerializationContext Context { get; public set; }
    public bool IsExclusive { get; public set; }
    public bool Sort { get; public set; }
    [CompilerGeneratedAttribute]
public SerializationContext get_Context();
    [CompilerGeneratedAttribute]
public void set_Context(SerializationContext value);
    [CompilerGeneratedAttribute]
public bool get_IsExclusive();
    [CompilerGeneratedAttribute]
public void set_IsExclusive(bool value);
    [CompilerGeneratedAttribute]
public bool get_Sort();
    [CompilerGeneratedAttribute]
public void set_Sort(bool value);
    protected virtual JsonDictionaryContract CreateDictionaryContract(Type objectType);
    protected virtual JsonProperty CreateProperty(MemberInfo member, MemberSerialization memberSerialization);
    protected virtual IList`1<JsonProperty> CreateProperties(Type type, MemberSerialization memberSerialization);
    protected virtual string ResolvePropertyName(string propertyName);
    private static string ToCamelCase(string value);
}
public static class Microsoft.VisualStudio.Setup.Serialization.TokenMapper : object {
    [NullableAttribute("1")]
private static String[] MatchAnythingTokens;
    private static TokenMapper();
    [NullableContextAttribute("2")]
public static string MapMatchAnythingToken(string value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.VisualStudio.Setup.Serialization.VersionRangeConverter : JsonConverter {
    public virtual bool CanConvert(Type objectType);
    public virtual object ReadJson(JsonReader reader, Type objectType, object existingValue, JsonSerializer serializer);
    public virtual void WriteJson(JsonWriter writer, object value, JsonSerializer serializer);
}
public class Microsoft.VisualStudio.Setup.Services.DataReceivedEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
private string <Data>k__BackingField;
    public string Data { get; }
    public DataReceivedEventArgs(string data);
    [CompilerGeneratedAttribute]
public string get_Data();
}
[ExtensionAttribute]
public static class Microsoft.VisualStudio.Setup.Services.Extensions : object {
    private static RegistryView[] RegistryViews;
    private static UTF8Encoding UTF8NoBOM;
    private static Extensions();
    [ExtensionAttribute]
public static void Complete(TextWriter writer);
    [ExtensionAttribute]
public static TextWriter CreateText(IFileSystem fileSystem, string path, Encoding encoding);
    [ExtensionAttribute]
public static void Flush(Stream stream, bool flushToDisk);
    [ExtensionAttribute]
public static void Flush(TextWriter writer, bool flushToDisk);
    [ExtensionAttribute]
public static IRegistryKey OpenKey(IRegistry registry, string registryKey, RegistryView view, bool writable);
    [ExtensionAttribute]
public static IEnumerable`1<IRegistryKey> OpenKeys(IRegistry registry, string registryKey, bool writable);
    [ExtensionAttribute]
public static T GetValue(IRegistryKey key, string name, T defaultValue);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static bool TryStartProcess(IProcessService processService, IChildProcess& process, string fileName, string arguments, bool showWindow, string workingDirectory);
    private static void FlushImpl(Stream stream, bool flushToDisk);
    [ExtensionAttribute]
public static T GetService(IServiceProvider provider, bool throwIfNotDefined);
    [ExtensionAttribute]
public static void TryWriteVerbose(ILogger logger, string format, Object[] args);
    [ExtensionAttribute]
public static string ConvertToBase64(Stream stream);
    [ExtensionAttribute]
public static void WriteBase64(Stream stream, string base64Data);
}
public enum Microsoft.VisualStudio.Setup.Services.FileAttributes : Enum {
    public int value__;
    public static FileAttributes None;
    public static FileAttributes ReadOnly;
    public static FileAttributes Hidden;
    public static FileAttributes Directory;
}
public class Microsoft.VisualStudio.Setup.Services.FileTime : ValueType {
    public DateTimeOffset CreationTime;
    public DateTimeOffset LastWriteTime;
}
public enum Microsoft.VisualStudio.Setup.Services.HashAlgorithms : Enum {
    public int value__;
    public static HashAlgorithms SHA256;
}
public interface Microsoft.VisualStudio.Setup.Services.IAccessControl {
    public object NativeObject { get; }
    public string StringForm { get; }
    public abstract virtual object get_NativeObject();
    public abstract virtual string get_StringForm();
    public abstract virtual IAccessControl Clone();
}
public interface Microsoft.VisualStudio.Setup.Services.IApplicabilityService {
    public abstract virtual void ComputeApplicability(IDependencyNode node, IServiceProvider services);
    public abstract virtual void ComputeApplicability(IRequirements item, IServiceProvider services);
}
public interface Microsoft.VisualStudio.Setup.Services.IChildProcess {
    public IProcessStartInfo StartInfo { get; }
    public abstract virtual IProcessStartInfo get_StartInfo();
}
public interface Microsoft.VisualStudio.Setup.Services.IFileSystem {
    public string UserDirectory { get; }
    public string LocalUserDirectory { get; }
    public string CurrentDirectory { get; }
    public string SharedDirectory { get; }
    public string TemporaryDirectory { get; }
    public string SharedProgramsDirectory { get; }
    public string SharedPrograms64Directory { get; }
    public string SystemDirectory { get; }
    public string UserDocumentsDirectory { get; }
    public string CommonProgramsDirectory { get; }
    public string CommonStartMenuDirectory { get; }
    public string OperatingSystemDirectory { get; }
    public abstract virtual string get_UserDirectory();
    public abstract virtual string get_LocalUserDirectory();
    public abstract virtual string get_CurrentDirectory();
    public abstract virtual string get_SharedDirectory();
    public abstract virtual string get_TemporaryDirectory();
    public abstract virtual string get_SharedProgramsDirectory();
    public abstract virtual string get_SharedPrograms64Directory();
    public abstract virtual string get_SystemDirectory();
    public abstract virtual string get_UserDocumentsDirectory();
    public abstract virtual string get_CommonProgramsDirectory();
    public abstract virtual string get_CommonStartMenuDirectory();
    public abstract virtual string get_OperatingSystemDirectory();
    public abstract virtual string GetTempFileName();
    public abstract virtual string GetRandomFileName(string path, string extension);
    public abstract virtual bool DirectoryExists(string path);
    public abstract virtual FileAttributes GetDirectoryAttributes(string path);
    public abstract virtual void SetDirectoryAttributes(string path, FileAttributes attributeValues, FileAttributes attributeMask);
    public abstract virtual IEnumerable`1<string> GetDirectories(string path, bool recursive);
    public abstract virtual void CreateDirectory(string path);
    public abstract virtual void DeleteDirectory(string path, bool recursive);
    public abstract virtual bool ForceDeleteDirectoryOnReboot(string source);
    public abstract virtual bool FileExists(string path);
    public abstract virtual FileAttributes GetFileAttributes(string path);
    public abstract virtual void SetFileAttributes(string path, FileAttributes attributeValues, FileAttributes attributeMask);
    public abstract virtual void DeleteFile(string path);
    public abstract virtual Stream OpenFile(string path);
    public abstract virtual void CopyFile(string source, string destination);
    public abstract virtual bool MoveFile(string source, string destination, bool afterReboot, bool replace);
    public abstract virtual TextReader OpenText(string path);
    public abstract virtual TextWriter CreateText(string path, bool buffer);
    public abstract virtual Stream CreateFile(string path, FileMode mode, FileAccess access, FileShare share);
    public abstract virtual String[] GetFiles(string path, string pattern, bool recursive);
    public abstract virtual String[] GetFileSystemEntries(string path, string pattern, bool recursive);
    public abstract virtual string ResolveFilePath(string path);
    public abstract virtual IAccessControl GetDirectorySecurity(string path);
    public abstract virtual void SetDirectorySecurity(string path, IAccessControl security);
    public abstract virtual long GetFileSize(string path);
    public abstract virtual void SetFileTime(string path, Nullable`1<DateTimeOffset> creationTime, Nullable`1<DateTimeOffset> lastWriteTime);
    public abstract virtual long GetDriveFreeSpace(string path);
    public abstract virtual long GetDriveTotalSpace(string path);
    public abstract virtual DriveType GetDriveType(string path);
    public abstract virtual FileTime GetFileTime(string path);
    public abstract virtual Version GetVersionInfo(string path);
    public abstract virtual Version GetFileProductVersion(string path);
    public abstract virtual string GetDirectoryName(string path);
    public abstract virtual string GetFullPath(string path);
    public abstract virtual bool IsDirectoryEmpty(string path);
}
public interface Microsoft.VisualStudio.Setup.Services.IHashingService {
    public abstract virtual string GetHashOfString(string value, HashAlgorithms algorithm);
    public abstract virtual string GetHashOfFile(string path, HashAlgorithms algorithm);
    public abstract virtual string GetHashOfStream(Stream stream, HashAlgorithms algorithm);
}
public interface Microsoft.VisualStudio.Setup.Services.ILogger {
    public abstract virtual void WriteVerbose(string format, Object[] args);
    public abstract virtual void WriteMessage(string format, Object[] args);
    public abstract virtual void WriteWarning(string format, Object[] args);
    public abstract virtual void WriteError(Exception ex, string format, Object[] args);
    public abstract virtual string GenerateLogFileName(string packageId);
}
[NullableContextAttribute("1")]
public interface Microsoft.VisualStudio.Setup.Services.IMessageBus {
    public abstract virtual Task NotifyMessageAsync(Message message);
    public abstract virtual Task`1<MessageResult> SendMessageAsync(Message message);
}
[NullableContextAttribute("1")]
public interface Microsoft.VisualStudio.Setup.Services.IMissingDependencyTracker {
    public IReadOnlyCollection`1<MissingDependency> MissingDependencies { get; }
    public abstract virtual void Add(Dependency dependency, bool isFatal);
    public abstract virtual IReadOnlyCollection`1<MissingDependency> get_MissingDependencies();
}
public interface Microsoft.VisualStudio.Setup.Services.IPackageDetectionService {
    public abstract virtual bool IsInstalled(IPackage package);
}
public interface Microsoft.VisualStudio.Setup.Services.IProcess {
    public DateTime StartTime { get; }
    public IntPtr MainWindowHandle { get; }
    public string MainModuleFileName { get; }
    public string MainWindowTitle { get; }
    public int Id { get; }
    public string Description { get; }
    public string ProcessName { get; }
    public bool HasExited { get; }
    public IntPtr Handle { get; }
    public int ExitCode { get; }
    public abstract virtual DateTime get_StartTime();
    public abstract virtual IntPtr get_MainWindowHandle();
    public abstract virtual string get_MainModuleFileName();
    public abstract virtual string get_MainWindowTitle();
    public abstract virtual int get_Id();
    public abstract virtual string get_Description();
    public abstract virtual string get_ProcessName();
    public abstract virtual bool get_HasExited();
    public abstract virtual IntPtr get_Handle();
    [CompilerGeneratedAttribute]
public abstract virtual void add_OutputDataReceived(EventHandler`1<DataReceivedEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_OutputDataReceived(EventHandler`1<DataReceivedEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_ErrorDataReceived(EventHandler`1<DataReceivedEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_ErrorDataReceived(EventHandler`1<DataReceivedEventArgs> value);
    public abstract virtual bool Start();
    public abstract virtual void BeginOutputReadLine();
    public abstract virtual void BeginErrorReadLine();
    public abstract virtual bool WaitForExit(int milliseconds);
    public abstract virtual void WaitForExit();
    public abstract virtual int get_ExitCode();
    public abstract virtual void Kill();
    public abstract virtual void Close();
}
public interface Microsoft.VisualStudio.Setup.Services.IProcessService {
    public abstract virtual bool IsElevated();
    public abstract virtual IChildProcess CreateProcess();
    public abstract virtual IProcess GetCurrentProcess();
    public abstract virtual IEnumerable`1<IProcess> GetProcesses();
    public abstract virtual IEnumerable`1<IProcess> GetAllProcessesFromFolders(IEnumerable`1<string> folders);
    public abstract virtual IEnumerable`1<IProcess> GetProcessesByName(string name);
    public abstract virtual IProcess GetProcessById(int id);
    public abstract virtual IProcessInfo GetProcessInfo(int id);
    public abstract virtual void RunAsLoggedOnUser(string filePath, string arguments);
}
public interface Microsoft.VisualStudio.Setup.Services.IProcessStartInfo {
    public string Arguments { get; public set; }
    public bool CreateNoWindow { get; public set; }
    public bool RedirectStandardOutput { get; public set; }
    public bool RedirectStandardError { get; public set; }
    public bool UseShellExecute { get; public set; }
    public string FileName { get; public set; }
    public string WorkingDirectory { get; public set; }
    public string Verb { get; public set; }
    public ProcessWindowStyle WindowStyle { get; public set; }
    public IDictionary`2<string, string> EnvironmentVariables { get; }
    public abstract virtual string get_Arguments();
    public abstract virtual void set_Arguments(string value);
    public abstract virtual bool get_CreateNoWindow();
    public abstract virtual void set_CreateNoWindow(bool value);
    public abstract virtual bool get_RedirectStandardOutput();
    public abstract virtual void set_RedirectStandardOutput(bool value);
    public abstract virtual bool get_RedirectStandardError();
    public abstract virtual void set_RedirectStandardError(bool value);
    public abstract virtual bool get_UseShellExecute();
    public abstract virtual void set_UseShellExecute(bool value);
    public abstract virtual string get_FileName();
    public abstract virtual void set_FileName(string value);
    public abstract virtual string get_WorkingDirectory();
    public abstract virtual void set_WorkingDirectory(string value);
    public abstract virtual string get_Verb();
    public abstract virtual void set_Verb(string value);
    public abstract virtual ProcessWindowStyle get_WindowStyle();
    public abstract virtual void set_WindowStyle(ProcessWindowStyle value);
    public abstract virtual IDictionary`2<string, string> get_EnvironmentVariables();
}
public interface Microsoft.VisualStudio.Setup.Services.IRegistry {
    public abstract virtual IRegistryKey OpenBaseKey(RegistryHive hive, RegistryView view);
    public abstract virtual RegistryHive ExtractBaseHive(string registryKey, String& keyWithoutBaseHive);
}
public interface Microsoft.VisualStudio.Setup.Services.IRegistryKey {
    public abstract virtual object GetValue(string valueName);
    public abstract virtual IEnumerable`1<string> GetValueNames();
    public abstract virtual void SetValue(string valueName, object value, RegistryValueKind valueKind);
    public abstract virtual IRegistryKey CreateSubKey(string path, RegistryOptions options);
    public abstract virtual IRegistryKey OpenSubKey(string path, bool writable);
    public abstract virtual String[] GetSubKeyNames();
    public abstract virtual void DeleteSubKeyTree(string subkey, bool throwOnMissingSubKey);
    public abstract virtual void DeleteValue(string name, bool throwOnMissingValue);
}
public interface Microsoft.VisualStudio.Setup.Services.IRemoteSettingsService {
    public abstract virtual T GetValue(string collectionPath, string key, T defaultValue);
    public abstract virtual Task`1<T> GetValueAsync(string collectionPath, string key, T defaultValue, CancellationToken cancellationToken);
}
[NullableContextAttribute("1")]
public interface Microsoft.VisualStudio.Setup.Services.IReparseAwareFileSystem {
    public abstract virtual void CreateDirectory(string path, DirectorySecurity accessControl);
    public abstract virtual bool DirectoryHasReparsePoint(string path);
    public abstract virtual string ResolveDirectory(string path);
}
public interface Microsoft.VisualStudio.Setup.Services.IRestartManager {
    public RebootType RebootRequiredType { get; public set; }
    [CompilerGeneratedAttribute]
public abstract virtual void add_RebootRequired(EventHandler`1<EventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_RebootRequired(EventHandler`1<EventArgs> value);
    public abstract virtual RebootType get_RebootRequiredType();
    public abstract virtual void set_RebootRequiredType(RebootType value);
    public abstract virtual bool CheckSystemPendingReboot(string installDir);
    public abstract virtual void CreateRebootRequiredSemaphore(IInstance instance);
    public abstract virtual void CreateRebootRecommendedSemaphore(IInstance instance);
    public abstract virtual bool RebootRequiredSemaphoreExists(IInstance instance);
    public abstract virtual bool RebootRecommendedSemaphoreExists(IInstance instance);
}
public interface Microsoft.VisualStudio.Setup.Services.ISettingsService {
    public bool DeepDetectionEnabled { get; public set; }
    public bool NoWeb { get; public set; }
    public bool Force { get; public set; }
    public bool UpdateFromVS { get; public set; }
    public Nullable`1<int> ClientProcessId { get; public set; }
    public abstract virtual bool get_DeepDetectionEnabled();
    public abstract virtual void set_DeepDetectionEnabled(bool value);
    public abstract virtual bool get_NoWeb();
    public abstract virtual void set_NoWeb(bool value);
    public abstract virtual bool get_Force();
    public abstract virtual void set_Force(bool value);
    public abstract virtual bool get_UpdateFromVS();
    public abstract virtual void set_UpdateFromVS(bool value);
    public abstract virtual Nullable`1<int> get_ClientProcessId();
    public abstract virtual void set_ClientProcessId(Nullable`1<int> value);
}
public interface Microsoft.VisualStudio.Setup.Services.ITelemetry {
    public ICollection`1<ITelemetryEventCorrelation> SerializedCorrelations { get; }
    public string TelemetrySessionID { get; }
    public bool IsOptedIn { get; }
    public bool IsUserMicrosoftInternal { get; }
    public Nullable`1<Guid> UserId { get; }
    public Nullable`1<Guid> MachineId { get; }
    public string UserAlias { get; }
    public abstract virtual ICollection`1<ITelemetryEventCorrelation> get_SerializedCorrelations();
    public abstract virtual string get_TelemetrySessionID();
    public abstract virtual void SetSharedProperties(object telemetryContext, IServiceProvider services);
    public abstract virtual void SetSharedProperties(IDictionary`2<string, object> properties);
    public abstract virtual void SetSharedProperty(string propertyName, object propertyValue);
    public abstract virtual void RemoveSharedProperty(string propertyName);
    public abstract virtual string SerializeSettings();
    public abstract virtual void WriteEvent(string eventName, IDictionary`2<string, object> properties, object objCorrelation, bool overrideCEIP);
    public abstract virtual void WriteProperty(string propertyName, IDictionary`2<string, object> properties, string values);
    public abstract virtual void WriteFault(string eventName, string description, IDictionary`2<string, object> properties, Exception ex, object objCorrelatedWith, bool overrideCEIP, BucketParameters bucketParameters, bool addLogs, IEnumerable`1<string> logFiles, bool createDump);
    public abstract virtual ITelemetryOperation StartOperation(string eventName, IDictionary`2<string, object> properties, bool overrideCEIP, bool reportStatistics);
    public abstract virtual object GetCorrelation(object objOperationScope);
    public abstract virtual void GetContextProperties(IPackageIdentity packageIdentity, IDictionary`2<string, object> properties);
    public abstract virtual void FlushTelemetrySession(bool shouldRecreate);
    public abstract virtual bool get_IsOptedIn();
    public abstract virtual bool get_IsUserMicrosoftInternal();
    public abstract virtual Nullable`1<Guid> get_UserId();
    public abstract virtual Nullable`1<Guid> get_MachineId();
    public abstract virtual string get_UserAlias();
}
public interface Microsoft.VisualStudio.Setup.Services.ITelemetryEventCorrelation {
    public abstract virtual string Serialize();
}
public interface Microsoft.VisualStudio.Setup.Services.ITelemetryOperation {
    public IDictionary`2<string, object> Properties { get; }
    public IList`1<string> LogFiles { get; }
    public string OperationCorrelation { get; }
    public Result Result { get; }
    public abstract virtual IDictionary`2<string, object> get_Properties();
    public abstract virtual IList`1<string> get_LogFiles();
    public abstract virtual string get_OperationCorrelation();
    public abstract virtual Result get_Result();
    public abstract virtual void RecordFailure(string message);
    public abstract virtual void RecordException(string errorMessage, Exception exception, string message, bool sendFault);
    public abstract virtual void RecordCancel(string message);
    public abstract virtual void RecordSuccess(string message);
}
public interface Microsoft.VisualStudio.Setup.Services.ITransactional {
    public abstract virtual void Complete();
}
public interface Microsoft.VisualStudio.Setup.Services.IWindowsInstallerService {
    public abstract virtual PackageState GetPackageInstallState(string productCode, string upgradeCode, VersionRange productVersionRange, Nullable`1<int> productLanguage, Version& installedVersion);
    public abstract virtual int GetProductInfo(string productCode, String& propertyValue, string propertyName);
    public abstract virtual int ConfigureProduct(string productCode, int installLevel, int installState, string commandLine);
    public abstract virtual int InstallProduct(string packagePath, string commandLine);
    public abstract virtual void EnableLog(string logFile);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.VisualStudio.Setup.Services.MissingDependency : object {
    [CompilerGeneratedAttribute]
private Dependency <Dependency>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsFatal>k__BackingField;
    [CompilerGeneratedAttribute]
protected Type EqualityContract { get; }
    public Dependency Dependency { get; public set; }
    public bool IsFatal { get; public set; }
    public MissingDependency(Dependency Dependency, bool IsFatal);
    [CompilerGeneratedAttribute]
protected MissingDependency(MissingDependency original);
    [CompilerGeneratedAttribute]
protected virtual Type get_EqualityContract();
    [CompilerGeneratedAttribute]
public Dependency get_Dependency();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_Dependency(Dependency value);
    [CompilerGeneratedAttribute]
public bool get_IsFatal();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_IsFatal(bool value);
    [CompilerGeneratedAttribute]
public virtual string ToString();
    [CompilerGeneratedAttribute]
protected virtual bool PrintMembers(StringBuilder builder);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static bool op_Inequality(MissingDependency left, MissingDependency right);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static bool op_Equality(MissingDependency left, MissingDependency right);
    [CompilerGeneratedAttribute]
public virtual int GetHashCode();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual bool Equals(object obj);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual bool Equals(MissingDependency other);
    [CompilerGeneratedAttribute]
public virtual MissingDependency <Clone>$();
    [CompilerGeneratedAttribute]
public void Deconstruct(Dependency& Dependency, Boolean& IsFatal);
}
internal class Microsoft.VisualStudio.Setup.Services.NullTelemetryOperation : object {
    public IDictionary`2<string, object> Properties { get; }
    public IList`1<string> LogFiles { get; }
    public string OperationCorrelation { get; }
    public Result Result { get; }
    public sealed virtual IDictionary`2<string, object> get_Properties();
    public sealed virtual IList`1<string> get_LogFiles();
    public sealed virtual string get_OperationCorrelation();
    public sealed virtual Result get_Result();
    public sealed virtual void Dispose();
    public sealed virtual void RecordCancel(string message);
    public sealed virtual void RecordException(string errorMessage, Exception exception, string message, bool sendFault);
    public sealed virtual void RecordFailure(string message);
    public sealed virtual void RecordSuccess(string message);
}
public interface Microsoft.VisualStudio.Setup.Services.Process.IProcessInfo {
    public int ProcessId { get; }
    public string Description { get; }
    public int ExitCode { get; }
    public bool HasExited { get; }
    public bool IsElevated { get; }
    public string MainModuleFileName { get; }
    public SecurityIdentifier User { get; }
    public abstract virtual int get_ProcessId();
    public abstract virtual string get_Description();
    public abstract virtual int get_ExitCode();
    public abstract virtual bool get_HasExited();
    public abstract virtual bool get_IsElevated();
    public abstract virtual string get_MainModuleFileName();
    public abstract virtual SecurityIdentifier get_User();
}
public enum Microsoft.VisualStudio.Setup.Services.RebootType : Enum {
    public int value__;
    public static RebootType None;
    public static RebootType FinalReboot;
    [ObsoleteAttribute("Finalizer reboots are not supported.", "False")]
public static RebootType FinalizerReboot;
    public static RebootType IntermediateReboot;
    public static RebootType RecommendedReboot;
}
public enum Microsoft.VisualStudio.Setup.Services.RegistryHive : Enum {
    public int value__;
    public static RegistryHive None;
    public static RegistryHive ClassesRoot;
    public static RegistryHive LocalMachine;
    public static RegistryHive CurrentUser;
}
[FlagsAttribute]
public enum Microsoft.VisualStudio.Setup.Services.RegistryOptions : Enum {
    public int value__;
    public static RegistryOptions None;
    public static RegistryOptions Volatile;
}
public enum Microsoft.VisualStudio.Setup.Services.RegistryValueKind : Enum {
    public int value__;
    public static RegistryValueKind Unknown;
    public static RegistryValueKind String;
    public static RegistryValueKind DWord;
    public static RegistryValueKind QWord;
}
public enum Microsoft.VisualStudio.Setup.Services.RegistryView : Enum {
    public int value__;
    public static RegistryView Default;
    public static RegistryView Registry32;
    public static RegistryView Registry64;
    public static RegistryView DefaultOperatingSystem;
}
public class Microsoft.VisualStudio.Setup.Services.TelemetryConstants : object {
    public static string EVENTPREFIX;
    public static string PROPERTYPREFIX;
    public static string WILLOWEVENTPREFIX;
    public static string WILLOWPROPERTYPREFIX;
    public static string WARNINGPROPERTY;
    public static string FAULTLOCATIONPROPERTY;
    public static string FAULTTYPEPROPERTY;
    public static string FAULTDESCRIPTIONPROPERTY;
    public static string PERFORMANCEPROPERTY;
    public static string SESSIONUPDATEDOWNLOADCOMPLETEPROPERTY;
    public static string SESSIONUPDATEDOWNLOADTOTALSIZEPROPERTY;
    public static string SESSIONUPDATEDOWNLOADSIZEPROPERTY;
    public static string SESSIONUPDATEDOWNLOADVERSIONPROPERTY;
    public static string SESSIONDOWNLOADFAILPROPERTY;
    public static string SESSIONINSTALLFAILPROPERTY;
    public static string SESSIONUNINSTALLFAILPROPERTY;
    public static string SESSIONSKIPPEDFAILPROPERTY;
    public static string SESSIONFAILEDWORKLOADSPROPERTY;
    public static string SESSIONALPHAPACKSCOUNT;
    public static string SESSIONINCONTAINER;
    public static string INSTALLATIONPATHCHANGED;
    public static string CONNECTIONCOST;
    public static string SESSIONOPERATIONMODE;
    public static string SESSIONCONCURRENTDOWNLOADS;
    public static string SESSIONAGGREGATEDOWNLOADWAITTIME;
    public static string SHAREDID;
    public static string SHAREDBRANCH;
    public static string SHAREDENGINEVERSION;
    public static string SHAREDENGINEASSEMBLY;
    public static string SHAREDBUILDNUMBER;
    public static string SHAREDPRODUCTVERSION;
    public static string SHAREDWORKLOADS;
    public static string SHAREDCHANNELSPATH;
    public static string SHAREDCHANNELSID;
    public static string SHAREDCHANNELSURI;
    public static string SHAREDCOMPONENTID;
    public static string SHAREDPRODUCTID;
    public static string SHAREDINSTALLID;
    public static string SHAREDOPERATION;
    public static string PARENTSPROPERTY;
    public static string ANCESTORWORKLOADSPROPERTY;
    public static string REBOOTREQUESTED;
    public static string NOWEB;
    public static string FORCE;
    public static string UPDATEFROMVS;
    public static string KEEPDOWNLOADEDPAYLOADS;
    public static string USERREQUESTEDOPERATION;
    public static string SHAREDWILLOWINSTALLSESSIONID;
    public static string INSTANCEOPERATIONEVENT;
    public static string CHANNELOPERATIONEVENT;
    public static string PACKAGEOPERATIONEVENT;
    public static string AUTHENTICATIONOPERATIONEVENT;
    public static string RECORDAUTHENTICATIONSTATEEVENT;
    public static string CREATEPUBLICCLIENTAPPBUILDER;
    public static string BUILDDEPENDENCYGRAPHEVENT;
    public static string LOADCATALOGEVENT;
    public static string VSCURRENTINSTANCERUNNINGEVENT;
    public static string VSRELATEDPROCESSRUNNINGEVENT;
    public static string REBOOTREQUIREDEVENT;
    public static string NGENACTIVITIESRUNNINGEVENT;
    public static string ADDREMOTECHANNELOPERATIONEVENT;
    public static string REPORTWINDOWSUPDATEPROGRESSEVENT;
    public static string BACKGROUNDDOWNLOADEVENT;
    public static string BACKGROUNDDOWNLOADPERINSTANCEEVENT;
    public static string BACKGROUNDDOWNLOADUNHANDLEDEXCEPTIONTHROWNEVENT;
    public static string BACKGROUNDDOWNLOADHASUPDATE;
    public static string BACKGROUNDDOWNLOADACTIVITYID;
    public static string BACKGROUNDDOWNLOADISCHILD;
    public static string BACKGROUNDDOWNLOADNOCANCEL;
    public static string BACKGROUNDDOWNLOADISUPDATECHECKONLY;
    public static string BACKGROUNDDOWNLOADEXITERRORCODE;
    public static string BACKGROUNDDOWNLOADINSTANCEINSTANCEID;
    public static string BACKGROUNDDOWNLOADINSTANCECHANNELID;
    public static string BACKGROUNDDOWNLOADINSTANCEPRODUCTID;
    public static string BACKGROUNDDOWNLOADINSTANCECURRENTVERSION;
    public static string BACKGROUNDDOWNLOADINSTANCEUPDATEVERSION;
    public static string BACKGROUNDDOWNLOADINSTANCEPREVIOUSDLSIZE;
    public static string UPDATECONFIGURATIONEVENT;
    public static string UPDATECONFIGURATIONPERINSTANCEEVENT;
    public static string VERIFYFAILUREEVENT;
    public static string VERIFYPACKAGEMESSAGE;
    public static string VERIFYPACKAGERESULT;
    public static string PACKAGEFAILUREEVENT;
    public static string FAULTEVENT;
    public static string CHANNELMANAGERFAILURE;
    public static string OUTOFDISKSPACEEVENT;
    public static string ENGINEOPERATIONTYPE;
    public static string ENGINEPACKAGEFAILURETYPE;
    public static string INSTANCECANCELLEDPROPERTY;
    public static string CANCELLEDDUETOPRECHECKPROPERTY;
    public static string CATALOGURIPROPERTY;
    public static string UNHANDLEDEXCEPTIONEVENT;
    public static string GRAPHCONSTRUCTIONERRORS;
    public static string NGENEQILEVELPROPERTY;
    public static string CHANNELDOWNLOADEDPROPERTY;
    public static string NEWCHANNELMANIFESTVERSION;
    public static string OLDCHANNELMANIFESTVERSION;
    public static string ENGINEDOWNLOADED;
    public static string ENGINEUPDATEREQUIRED;
    public static string INSTALLCHANNELURIPROPERTY;
    public static string INSTALLCHANNELDOWNLOADEDPROPERTY;
    public static string INSTALLCHANNELMANIFESTVERSION;
    public static string INSTALLCATALOGURI;
    public static string CHANNELUPDATEDISABLEDPROPERTY;
    public static string MANIFESTUPDATE;
    public static string READYFORMANIFESTDOWNLOAD;
    public static string FINISHEDMANIFESTDOWNLOAD;
    public static string WASMANIFESTMODIFIED;
    public static string PACKAGEUNIQUEIDPROPERTY;
    public static string PACKAGEIDPROPERTY;
    public static string PACKAGESTATEPROPERTY;
    public static string PACKAGEREQUESTEDSTATEPROPERTY;
    public static string PACKAGECHIPPROPERTY;
    public static string PACKAGELANGUAGEPROPERTY;
    public static string PACKAGEPRODUCTARCHPROPERTY;
    public static string PACKAGEMACHINEARCHPROPERTY;
    public static string PACKAGEVERSIONPROPERTY;
    public static string PACKAGETYPEPROPERTY;
    public static string PACKAGEDOWNLOADWAITTIME;
    public static string LOADCATALOGMANIFESTTYPEPROPERTY;
    public static string LOADCATALOGMANIFESTVERSIONPROPERTY;
    public static string LOADCATALOGBUILDVERSIONPROPERTY;
    public static string LOADCATALOGPROPERTY;
    public static string INSTALLPROPERTYPREFIX;
    public static string INSTALLPACKAGEPROPERTY;
    public static string MSIZAPPROPERTY;
    public static string VSIXIDPROPERTY;
    public static string VSIXTYPEPROPERTY;
    public static string INSTALLRESULTPROPERTY;
    public static string SIZEPROPERTYPREFIX;
    public static string INSTALLSIZETARGETDELTA;
    public static string INSTALLSIZESYSTEMDELTA;
    public static string INSTALLSIZESHAREDDELTA;
    public static string INSTALLSIZETARGETESTIMATE;
    public static string INSTALLSIZESYSTEMESTIMATE;
    public static string INSTALLSIZESHAREDESTIMATE;
    public static string INSTALLSIZETARGETBEFORE;
    public static string INSTALLSIZESYSTEMBEFORE;
    public static string INSTALLSIZESHAREDBEFORE;
    public static string INSTALLSIZETARGETAFTER;
    public static string INSTALLSIZESYSTEMAFTER;
    public static string INSTALLSIZESHAREDAFTER;
    public static string OUTOFDISKSPACEPROPERTYPREFIX;
    public static string OUTOFDISKSPACEPACKAGEIDPROPERTY;
    public static string OUTOFDISKSPACEDRIVEPROPERTY;
    public static string OUTOFDISKSPACEAVAILABLESPACEPROPERTY;
    public static string OUTOFDISKSPACEREQUIREDSPACEPROPERTY;
    public static string DOWNLOADPROPERTYPREFIX;
    public static string DOWNLOADIDPROPERTY;
    public static string DOWNLOADTIMEPROPERTY;
    public static string DOWNLOADSIZEPROPERTY;
    public static string DOWNLOADENGINETIME;
    public static string DOWNLOADENGINESTRIED;
    public static string DOWNLOADENGINESUSED;
    public static string DOWNLOADPROXYSETTING;
    public static string DOWNLOADPFINALURI;
    public static string DOWNLOADNOTMODIFIEDSINCE;
    public static string DOWNLOADFAILURE;
    public static string DOWNLOADWEBCLIENTRESPONSERECEIVED;
    public static string DOWNLOADWEBCLIENTRESPONSESTREAMERECEIVED;
    public static string DOWNLOADWEBCLIENTDOWNLOADCOMPLETED;
    public static string DOWNLOADWEBCLIENTNOTMODIFIED;
    public static string DOWNLOADHTTPSTATUSCODEPROPERTY;
    public static string DOWNLOADUNAUTHORIZEDHOSTNAME;
    public static string DOWNLOADIPADDRESS;
    public static string AUTHENTICATIONPROPERTYPREFIX;
    public static string AUTHENTICATIONAPICALLEDPROPERTY;
    public static string AUTHENTICATIONPROVIDERPROPERTY;
    public static string AUTHENTICATIONBEARERTOKENNULLPROPERTY;
    public static string AUTHENTICATIONEXCEPTIONERRORCODEPROPERTY;
    public static string WAMPROPERTY;
    public static string OSVERSIONPROPERTY;
    public static string ISSERVERPROPERTY;
    public static string DOTNETRELEASEVERSIONPROPERTY;
    public static string AUTHENTICATIONENABLEDPROPERTY;
    public static string AUTHENTICATIONLOGINUSERNAMEPROPERTY;
    public static string BACKGROUNDDOWNLOADPROPERTYPREFIX;
    public static string BACKGROUNDDOWNLOADUSERPROFILESTATE;
    public static string POLICYPROPERTYPREFIX;
    public static string POLICYKEEPDOWNLOADEDPAYLOADS;
    public static string BUILDDEPENDENCYGRAPHPROPERTYPREFIX;
    public static string BUILDDEPENDENCYGRAPHBUILTWITHDEEPDETECTION;
    public static string VERIFYLAYOUTPROPERTYPREFIX;
    public static string CLEANLAYOUTPROPERTYPREFIX;
    public static string VERIFYLAYOUTTOTALPAYLOADCOUNTPPROPERTY;
    public static string VERIFYLAYOUTMISSINGPAYLOADCOUNTPROPERTY;
    public static string VERIFYLAYOUTINVALIDPAYLOADCOUNTPPROPERTY;
    public static string CLEANLAYOUTOTALPACKAGECOUNTPPROPERTY;
    public static string CLEANLAYOUTFAILEDPACKAGECOUNTPPROPERTY;
    public static string DETECTHYPERVEVENT;
    public static string DETECTHYPERVPROPERTYPREFIX;
    public static string DETECTHYPERVRESULTPROPERTY;
    public static string CHECKHOSTTIMEPROPERTY;
    public static string CHECKVIRTUALIZATIONTIMEPROPERTY;
    public static string CHECKDEPTIMEPROPERTY;
    public static string CHECKFEATURETIMEPROPERTY;
    public static string WINDOWSUPDATESTOPFAILEDPROPERTY;
    public static string WINDOWSUPDATESTARTFAILEDPROPERTY;
    public static string ISINTERMEDIATEREBOOTPROPERTY;
    public static string REBOOTTYPEPROPERTY;
    public static string HASFUNCTIONALWMIPROVIDERPROPERTY;
    public static string USERPROMPTED;
    public static string DOWNLOADPROMPT;
    public static string INSTALLBUSYPROMPT;
    public static string ERRORMESSAGE;
    public static string WEBHANDLEREVENT;
    public static string WEBHANDLERPROPERTYPREFIX;
    public static string WEBHANDLERACTIVITYPROPERTY;
    public static string WEBHANDLERACTIONPROPERTY;
    public static string WEBHANDLERCAMPAIGNPROPERTY;
    public static string WEBHANDLERMODEPROPERTY;
    public static string WEBHANDLERRELEASEPROPERTY;
    public static string WEBHANDLERCHANNELPROPERTY;
    public static string WEBHANDLERPRODUCTPROPERTY;
    public static string WEBHANDLERADDPROPERTY;
    public static string WEBHANDLERRIDPROPERTY;
    public static string WEBHANDLERUXPROPERTY;
    public static string WEBHANDLERSOURCEPROPERTY;
    public static string WEBHANDLERDOWNLOADPROPERTY;
    public static string WEBHANDLERRESPONSEPROPERTY;
    public static string WEBHANDLERVERIFYPROPERTY;
    public static string WEBHANDLERDOWNLOADRESULTPROPERTY;
    public static string WEBHANDLERSELECTIONSTATEPROPERTY;
    public static string INSTALLERLOADUNHANDLEDEXCEPTIONTHROWNEVENT;
    public static string INSTALLERACTION;
    public static string INSTALLERACTIVITYID;
    public static string INSTALLERAPPRUNEVENT;
    public static string INSTALLERCAMPAIGN;
    public static string INSTALLERISCHANNELID;
    public static string INSTALLERCOMPONENTADDED;
    public static string INSTALLERCOMPONENTINSTALLED;
    public static string INSTALLERDOWNLOADTHENINSTALL;
    public static string INSTALLERFORCE;
    public static string INSTALLERINSTALLSESSIONID;
    public static string INSTALLERINSTALLWHILEDOWNLOADING;
    public static string INSTALLERISFOCUSEDUI;
    public static string INSTALLERLOCALE;
    public static string INSTALLERNOCACHE;
    public static string INSTALLERNOUPDATEINSTALLER;
    public static string INSTALLERNOWEB;
    public static string INSTALLERSOURCE;
    public static string INSTALLERPASSIVE;
    public static string INSTALLERPREVIEWUPDATE;
    public static string INSTALLERISPRODUCTID;
    public static string INSTALLERQUIET;
    public static string INSTALLERUPDATEFROMVS;
    public static string INSTALLERUSERREQUESTEDOPERATION;
    public static string INSTALLERWORKLOADADDED;
    public static string INSTALLERWORKLOADINSTALLED;
    public static string INSTALLERINSTALLPRODUCTEVENT;
    public static string INSTALLERELEVATEDINSTALLPRODUCTEVENT;
    public static string VERIFYPACKAGESACTIVITY;
    public static string DELETEPACKAGESFROMCACHEACTIVITY;
    public static string SUCCESSDELETEDCOUNTPROPERTY;
    public static string FAILEDDELETEDCOUNTPROPERTY;
    public static string DELETEINSTALLERSHORTCUTFAILEDEVENT;
    public static string CREATEINSTALLERSHORTCUTFAILEDEVENT;
    public static string USERDATAWRITEFAILEDEVENT;
    public static string TELEMETRYSAMPLINGEVENT;
    public static string TELEMETRYSAMPLEDPERCENTAGEPROPERTY;
    public static string TELEMETRYSAMPLEDEVENTSPROPERTY;
    public static string TELEMETRYISBEINGSAMPLEDPROPERTY;
    public static string DOWNGRADECANDIDATEPICKERUNUSUALEVENT;
    public static string DOWNGRADECANDIDATEPICKERPACKAGEID;
    public static string DOWNGRADECANDIDATEPICKERCANDIDATECOUNT;
    public static string LATESTINSTALLERFEEDDOWNLOADFAULTEVENT;
    public static string TESTMSIERROREVENT;
    public static string INSTALLATIONCONFIGURATIONEXPORTEVENT;
    public static string INSTALLATIONCONFIGURATIONEXPORTEDCOMPONENTSCOUNT;
    public static string INSTALLATIONCONFIGURATIONEXPORTEDEXTENSIONSCOUNT;
    public static string INSTALLATIONCONFIGURATIONEXPORTEDEXTENSIONS;
    public static string INSTALLATIONCONFIGURATIONEXPORTEDFAILEDEXTENSIONSCOUNT;
    private static TelemetryConstants();
}
public class Microsoft.VisualStudio.Setup.Services.TelemetryEnums : object {
}
[DataContractAttribute]
public class Microsoft.VisualStudio.Setup.Shortcut : ShortcutInformation {
    private IDictionary`2<string, string> shellProperties;
    [CompilerGeneratedAttribute]
private string <Description>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TargetPath>k__BackingField;
    [CompilerGeneratedAttribute]
private string <WorkingDirectory>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Arguments>k__BackingField;
    [CompilerGeneratedAttribute]
private string <AppUserModelId>k__BackingField;
    [DataMemberAttribute]
public string Description { get; public set; }
    [DataMemberAttribute]
public string TargetPath { get; public set; }
    [DataMemberAttribute]
public string WorkingDirectory { get; public set; }
    [DataMemberAttribute]
public string Arguments { get; public set; }
    [DataMemberAttribute]
public string AppUserModelId { get; public set; }
    [DataMemberAttribute]
public IDictionary`2<string, string> ShellProperties { get; }
    [CompilerGeneratedAttribute]
public string get_Description();
    [CompilerGeneratedAttribute]
public void set_Description(string value);
    [CompilerGeneratedAttribute]
public string get_TargetPath();
    [CompilerGeneratedAttribute]
public void set_TargetPath(string value);
    [CompilerGeneratedAttribute]
public string get_WorkingDirectory();
    [CompilerGeneratedAttribute]
public void set_WorkingDirectory(string value);
    [CompilerGeneratedAttribute]
public string get_Arguments();
    [CompilerGeneratedAttribute]
public void set_Arguments(string value);
    [CompilerGeneratedAttribute]
public string get_AppUserModelId();
    [CompilerGeneratedAttribute]
public void set_AppUserModelId(string value);
    public IDictionary`2<string, string> get_ShellProperties();
}
[DataContractAttribute]
public abstract class Microsoft.VisualStudio.Setup.ShortcutInformation : object {
    [CompilerGeneratedAttribute]
private string <DisplayName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Folder>k__BackingField;
    [CompilerGeneratedAttribute]
private string <LocalPath>k__BackingField;
    [CompilerGeneratedAttribute]
private ISet`1<string> <LocalPaths>k__BackingField;
    [DataMemberAttribute]
public string DisplayName { get; public set; }
    [DataMemberAttribute]
public string Folder { get; public set; }
    [ObsoleteAttribute]
[DataMemberAttribute]
public string LocalPath { get; public set; }
    [ObsoleteAttribute]
[DataMemberAttribute]
[EmptyAsNullAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public ISet`1<string> LocalPaths { get; }
    [CompilerGeneratedAttribute]
public string get_DisplayName();
    [CompilerGeneratedAttribute]
public void set_DisplayName(string value);
    [CompilerGeneratedAttribute]
public string get_Folder();
    [CompilerGeneratedAttribute]
public void set_Folder(string value);
    [CompilerGeneratedAttribute]
public string get_LocalPath();
    [CompilerGeneratedAttribute]
public void set_LocalPath(string value);
    [CompilerGeneratedAttribute]
public ISet`1<string> get_LocalPaths();
}
[JsonObjectAttribute]
public class Microsoft.VisualStudio.Setup.Signer : object {
    public static IEqualityComparer`1<string> Comparer;
    [CompilerGeneratedAttribute]
private string <SubjectName>k__BackingField;
    public string SubjectName { get; public set; }
    private static Signer();
    [CompilerGeneratedAttribute]
public string get_SubjectName();
    [CompilerGeneratedAttribute]
public void set_SubjectName(string value);
    public sealed virtual bool Equals(Signer other);
    public virtual int GetHashCode();
}
internal static class Microsoft.VisualStudio.Setup.SkusSupportingExtensions : object {
    public static HashSet`1<string> List;
    private static SkusSupportingExtensions();
}
[DataContractAttribute]
public class Microsoft.VisualStudio.Setup.Template : object {
    [CompilerGeneratedAttribute]
private string <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ProjectSubTypeSortOrder>k__BackingField;
    [CompilerGeneratedAttribute]
private int <ProjectSortOrder>k__BackingField;
    [CompilerGeneratedAttribute]
private string <AppIdFilter>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ProjectType>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ProjectSubType>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<string> <Selects>k__BackingField;
    [DataMemberAttribute]
public string Id { get; public set; }
    [DataMemberAttribute]
public string ProjectSubTypeSortOrder { get; public set; }
    [DataMemberAttribute]
public int ProjectSortOrder { get; public set; }
    [DataMemberAttribute]
public string AppIdFilter { get; public set; }
    [DataMemberAttribute]
public string ProjectType { get; public set; }
    [DataMemberAttribute]
public string ProjectSubType { get; public set; }
    [DataMemberAttribute]
public IList`1<string> Selects { get; internal set; }
    [CompilerGeneratedAttribute]
public string get_Id();
    [CompilerGeneratedAttribute]
public void set_Id(string value);
    [CompilerGeneratedAttribute]
public string get_ProjectSubTypeSortOrder();
    [CompilerGeneratedAttribute]
public void set_ProjectSubTypeSortOrder(string value);
    [CompilerGeneratedAttribute]
public int get_ProjectSortOrder();
    [CompilerGeneratedAttribute]
public void set_ProjectSortOrder(int value);
    [CompilerGeneratedAttribute]
public string get_AppIdFilter();
    [CompilerGeneratedAttribute]
public void set_AppIdFilter(string value);
    [CompilerGeneratedAttribute]
public string get_ProjectType();
    [CompilerGeneratedAttribute]
public void set_ProjectType(string value);
    [CompilerGeneratedAttribute]
public string get_ProjectSubType();
    [CompilerGeneratedAttribute]
public void set_ProjectSubType(string value);
    [CompilerGeneratedAttribute]
public IList`1<string> get_Selects();
    [CompilerGeneratedAttribute]
internal void set_Selects(IList`1<string> value);
}
public class Microsoft.VisualStudio.Setup.UIProperties : object {
    [CompilerGeneratedAttribute]
private bool <IsAdvertisedPackage>k__BackingField;
    public bool IsAdvertisedPackage { get; public set; }
    [CompilerGeneratedAttribute]
public bool get_IsAdvertisedPackage();
    [CompilerGeneratedAttribute]
public void set_IsAdvertisedPackage(bool value);
}
public class Microsoft.VisualStudio.Setup.UriComparer : object {
    public static IEqualityComparer`1<Uri> IgnoreCase;
    private bool ignoreCase;
    private UriComparer(bool ignoreCase);
    private static UriComparer();
    public sealed virtual bool Equals(Uri x, Uri y);
    public sealed virtual int GetHashCode(Uri obj);
}
internal class Microsoft.VisualStudio.Setup.UriStrictEqualityComparer : object {
    public static UriStrictEqualityComparer StrictComparer;
    private static UriStrictEqualityComparer();
    public sealed virtual bool Equals(Uri x, Uri y);
    public sealed virtual int GetHashCode(Uri obj);
}
[DataContractAttribute]
public class Microsoft.VisualStudio.Setup.UrlAssociation : object {
    [CompilerGeneratedAttribute]
private string <Protocol>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DisplayName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ProgId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DefaultProgramRegistrationPath>k__BackingField;
    [DataMemberAttribute]
public string Protocol { get; public set; }
    [DataMemberAttribute]
public string DisplayName { get; public set; }
    [DataMemberAttribute]
public string ProgId { get; public set; }
    [DataMemberAttribute]
public string DefaultProgramRegistrationPath { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Protocol();
    [CompilerGeneratedAttribute]
public void set_Protocol(string value);
    [CompilerGeneratedAttribute]
public string get_DisplayName();
    [CompilerGeneratedAttribute]
public void set_DisplayName(string value);
    [CompilerGeneratedAttribute]
public string get_ProgId();
    [CompilerGeneratedAttribute]
public void set_ProgId(string value);
    [CompilerGeneratedAttribute]
public string get_DefaultProgramRegistrationPath();
    [CompilerGeneratedAttribute]
public void set_DefaultProgramRegistrationPath(string value);
}
public enum Microsoft.VisualStudio.Setup.UserSelectedState : Enum {
    public int value__;
    public static UserSelectedState None;
    public static UserSelectedState Implicit;
    public static UserSelectedState Explicit;
}
internal static class Microsoft.VisualStudio.Setup.Utilities : object {
    internal static Version DefaultManifestVersion;
    private static Utilities();
    public static string FormatIdentityString(string id, object version, string chip, string language, string branch, string productArch, string machineArch);
    public static string NormalizeIdentityToken(string token);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public static class Microsoft.VisualStudio.Setup.Utility.Io : object {
    private static char AltDirectorySeparatorChar;
    private static char DirectorySeparatorChar;
    private static char VolumeSeparatorChar;
    private static string QuoteString;
    private static Io();
    [NullableContextAttribute("2")]
public static bool ContainsPath(string fullPath, string path);
    [NullableContextAttribute("2")]
public static bool ContainsPath(string fullPath, string path, bool excludeSame);
    [NullableContextAttribute("2")]
public static bool IsValidDirectoryPath(string path);
    [NullableContextAttribute("2")]
public static bool IsValidFilePath(string path);
    [NullableContextAttribute("2")]
public static bool IsPathRooted(string path);
    public static string GetExistingAncestor(IServiceProvider services, string path);
    public static string GetExistingAncestor(IFileSystem fileSystem, string path);
    public static string NormalizePath(string path, bool addBackslash);
    public static string QuotePath(string path, bool always);
    public static string StripPath(string fullPath);
    [NullableContextAttribute("2")]
public static string AddBackslashIfNotPresent(string path);
    public static bool IsEngineDirectory(string directoryPath);
    private static string GetExistingAncestorInternal(IFileSystem fileSystem, string path);
    [NullableContextAttribute("2")]
public static string RemoveTrailingBackslash(string path);
    private static string RemoveAdjacentChars(string value, char ch, int startIndex);
}
public static class Microsoft.VisualStudio.Setup.Utility.Windows : object {
    private static int NeutralLang;
    private static int EnglishLang;
    [NullableContextAttribute("1")]
public static string GetMessage(int error, bool englishOnly);
    [NullableContextAttribute("2")]
private static bool TryGetMessage(int error, Int32& languageId, UInt32 bufferSize, String& message);
}
public static class Microsoft.VisualStudio.Setup.Validate : object {
    [ExcludeFromCodeCoverageAttribute]
public static void IsNotNull(object o, string paramName);
    [ExcludeFromCodeCoverageAttribute]
public static void IsNotEmpty(string s, string paramName);
    [ExcludeFromCodeCoverageAttribute]
public static void IsNotNullOrEmpty(string s, string paramName);
    [ExcludeFromCodeCoverageAttribute]
public static void IsEnumDefined(T value, string paramName);
    [ExcludeFromCodeCoverageAttribute]
public static void IsValidDirectoryPath(string path, string paramName);
    [ExcludeFromCodeCoverageAttribute]
public static void IsValidFilePath(string path, string paramName);
    [ExcludeFromCodeCoverageAttribute]
public static void IsWithinRange(double newValue, int minValue, int maxValue, string paramName);
}
[NullableContextAttribute("1")]
public interface Microsoft.VisualStudio.Setup.Validation.IManifestValidator {
    public abstract virtual IEnumerable`1<IValidationResult> Validate(Stream stream);
    public abstract virtual IEnumerable`1<IValidationResult> Validate(string content);
}
[NullableContextAttribute("1")]
public interface Microsoft.VisualStudio.Setup.Validation.IManifestValidatorFactory {
    public abstract virtual IManifestValidator Create(Catalog catalog, PartialManifestType& manifestType, PartialManifestType defaultValue);
}
[NullableContextAttribute("2")]
public interface Microsoft.VisualStudio.Setup.Validation.IValidationResult {
    public string Message { get; }
    public string NeutralMessage { get; }
    [NullableAttribute("1")]
public string TelemetryErrorMessage { get; }
    public bool IsWarning { get; }
    public WarningLevel WarningLevel { get; }
    public Exception Error { get; }
    public IManifest Manifest { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public IEnumerable`1<IPackageIdentity> Items { get; }
    public int ErrorCode { get; }
    public bool SupportsRetry { get; }
    public abstract virtual string get_Message();
    public abstract virtual string get_NeutralMessage();
    [NullableContextAttribute("1")]
public abstract virtual string get_TelemetryErrorMessage();
    public abstract virtual bool get_IsWarning();
    public abstract virtual WarningLevel get_WarningLevel();
    public abstract virtual Exception get_Error();
    public abstract virtual IManifest get_Manifest();
    public abstract virtual IEnumerable`1<IPackageIdentity> get_Items();
    public abstract virtual int get_ErrorCode();
    public abstract virtual bool get_SupportsRetry();
}
public class Microsoft.VisualStudio.Setup.Validation.NullValidator : object {
    [NullableContextAttribute("1")]
public sealed virtual IEnumerable`1<IValidationResult> Validate(Stream stream);
    [NullableContextAttribute("1")]
public sealed virtual IEnumerable`1<IValidationResult> Validate(string content);
}
public enum Microsoft.VisualStudio.Setup.Validation.WarningLevel : Enum {
    public int value__;
    public static WarningLevel Low;
    public static WarningLevel Medium;
    public static WarningLevel High;
}
public class Microsoft.VisualStudio.Setup.VerificationContext : object {
    [CompilerGeneratedAttribute]
private IPackageIdentity <PackageIdentity>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TelemetryParentCorrelation>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TelemetryAncestorWorkloads>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Sha256>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Signer>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsDynamicEndpoint>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<string> <Hashes>k__BackingField;
    public IPackageIdentity PackageIdentity { get; public set; }
    public IPackage Package { get; }
    public string TelemetryParentCorrelation { get; public set; }
    public string TelemetryAncestorWorkloads { get; public set; }
    public string Sha256 { get; public set; }
    public string Signer { get; public set; }
    public bool IsDynamicEndpoint { get; public set; }
    public IList`1<string> Hashes { get; public set; }
    public VerificationContext(IPackageIdentity package, Payload payload);
    [CompilerGeneratedAttribute]
public IPackageIdentity get_PackageIdentity();
    [CompilerGeneratedAttribute]
public void set_PackageIdentity(IPackageIdentity value);
    public IPackage get_Package();
    [CompilerGeneratedAttribute]
public string get_TelemetryParentCorrelation();
    [CompilerGeneratedAttribute]
public void set_TelemetryParentCorrelation(string value);
    [CompilerGeneratedAttribute]
public string get_TelemetryAncestorWorkloads();
    [CompilerGeneratedAttribute]
public void set_TelemetryAncestorWorkloads(string value);
    [CompilerGeneratedAttribute]
public string get_Sha256();
    [CompilerGeneratedAttribute]
public void set_Sha256(string value);
    [CompilerGeneratedAttribute]
public string get_Signer();
    [CompilerGeneratedAttribute]
public void set_Signer(string value);
    [CompilerGeneratedAttribute]
public bool get_IsDynamicEndpoint();
    [CompilerGeneratedAttribute]
public void set_IsDynamicEndpoint(bool value);
    [CompilerGeneratedAttribute]
public IList`1<string> get_Hashes();
    [CompilerGeneratedAttribute]
public void set_Hashes(IList`1<string> value);
}
[JsonConverterAttribute("Microsoft.VisualStudio.Setup.Serialization.VersionRangeConverter")]
public class Microsoft.VisualStudio.Setup.VersionRange : object {
    public static VersionRange Any;
    [CompilerGeneratedAttribute]
private Version <Minimum>k__BackingField;
    [CompilerGeneratedAttribute]
private Version <Maximum>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsMinimumInclusive>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsMaximumInclusive>k__BackingField;
    [CompilerGeneratedAttribute]
private Version <MinimumCore>k__BackingField;
    [CompilerGeneratedAttribute]
private Version <MaximumCore>k__BackingField;
    public Version Minimum { get; private set; }
    public Version Maximum { get; private set; }
    public bool IsMinimumInclusive { get; private set; }
    public bool IsMaximumInclusive { get; private set; }
    private Version MinimumCore { get; private set; }
    private Version MaximumCore { get; private set; }
    public VersionRange(Version minimum, bool isMinimumInclusive, Version maximum, bool isMaximumInclusive);
    public VersionRange(Version value);
    private static VersionRange();
    [CompilerGeneratedAttribute]
public Version get_Minimum();
    [CompilerGeneratedAttribute]
private void set_Minimum(Version value);
    [CompilerGeneratedAttribute]
public Version get_Maximum();
    [CompilerGeneratedAttribute]
private void set_Maximum(Version value);
    [CompilerGeneratedAttribute]
public bool get_IsMinimumInclusive();
    [CompilerGeneratedAttribute]
private void set_IsMinimumInclusive(bool value);
    [CompilerGeneratedAttribute]
public bool get_IsMaximumInclusive();
    [CompilerGeneratedAttribute]
private void set_IsMaximumInclusive(bool value);
    [CompilerGeneratedAttribute]
private Version get_MinimumCore();
    [CompilerGeneratedAttribute]
private void set_MinimumCore(Version value);
    [CompilerGeneratedAttribute]
private Version get_MaximumCore();
    [CompilerGeneratedAttribute]
private void set_MaximumCore(Version value);
    public static VersionRange Parse(string version);
    public static VersionRange Parse(string version, bool singleVersionAllowed);
    public static bool TryParse(string version, VersionRange& versionRange);
    public static bool TryParse(string version, bool singleVersionAllowed, VersionRange& versionRange);
    public bool Contains(Version value);
    public sealed virtual bool Equals(VersionRange other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public VersionRange Normalize();
    public virtual string ToString();
    private static Version CreateVersion(int major, int minor, int build, int revision);
    private static Version NormalizeVersion(Version version, int num);
    private static bool TryGetVersion(string version, Version& outVersion);
    private static string GetVersionString(Version version, int num);
}
[DataContractAttribute]
public class Microsoft.VisualStudio.Setup.VisualStudioInformation : object {
    [CompilerGeneratedAttribute]
private bool <IgnoreChanges>k__BackingField;
    [DataMemberAttribute]
public bool IgnoreChanges { get; public set; }
    [IgnoreDataMemberAttribute]
public bool IsDefault { get; }
    [CompilerGeneratedAttribute]
public bool get_IgnoreChanges();
    [CompilerGeneratedAttribute]
public void set_IgnoreChanges(bool value);
    public bool get_IsDefault();
}
[DataContractAttribute]
public class Microsoft.VisualStudio.Setup.VsixFile : FileItem {
    [CompilerGeneratedAttribute]
private bool <Ngen>k__BackingField;
    [CompilerGeneratedAttribute]
private NgenArchitecture <NgenArchitecture>k__BackingField;
    [CompilerGeneratedAttribute]
private string <NgenApplication>k__BackingField;
    [CompilerGeneratedAttribute]
private ICollection`1<string> <NgenApplications>k__BackingField;
    [CompilerGeneratedAttribute]
private int <NgenPriority>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <NgenDependencies>k__BackingField;
    [DataMemberAttribute]
public bool Ngen { get; public set; }
    [DataMemberAttribute]
public NgenArchitecture NgenArchitecture { get; public set; }
    [DataMemberAttribute]
public string NgenApplication { get; public set; }
    [DataMemberAttribute]
[EmptyAsNullAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public ICollection`1<string> NgenApplications { get; public set; }
    [DataMemberAttribute]
public int NgenPriority { get; public set; }
    [DataMemberAttribute]
public bool NgenDependencies { get; public set; }
    [CompilerGeneratedAttribute]
public bool get_Ngen();
    [CompilerGeneratedAttribute]
public void set_Ngen(bool value);
    [CompilerGeneratedAttribute]
public NgenArchitecture get_NgenArchitecture();
    [CompilerGeneratedAttribute]
public void set_NgenArchitecture(NgenArchitecture value);
    [CompilerGeneratedAttribute]
public string get_NgenApplication();
    [CompilerGeneratedAttribute]
public void set_NgenApplication(string value);
    [CompilerGeneratedAttribute]
public ICollection`1<string> get_NgenApplications();
    [CompilerGeneratedAttribute]
public void set_NgenApplications(ICollection`1<string> value);
    [CompilerGeneratedAttribute]
public int get_NgenPriority();
    [CompilerGeneratedAttribute]
public void set_NgenPriority(int value);
    [CompilerGeneratedAttribute]
public bool get_NgenDependencies();
    [CompilerGeneratedAttribute]
public void set_NgenDependencies(bool value);
}
[DataContractAttribute]
public class Microsoft.VisualStudio.Setup.VsixPackage : FilePackage`1<VsixFile> {
    private IDictionary`2<string, string> folderMappings;
    private List`1<WebShortcut> webShortcuts;
    [CompilerGeneratedAttribute]
private string <VsixId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DefaultNgenApplication>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ExtensionDir>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <HotLoadable>k__BackingField;
    public PackageType Type { get; }
    [DataMemberAttribute]
public string VsixId { get; public set; }
    [DataMemberAttribute]
public string DefaultNgenApplication { get; public set; }
    [DataMemberAttribute]
public string ExtensionDir { get; public set; }
    [DataMemberAttribute]
public IDictionary`2<string, string> FolderMappings { get; }
    [DataMemberAttribute]
[EmptyAsNullAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public IList`1<WebShortcut> WebShortcuts { get; }
    [DataMemberAttribute]
public bool HotLoadable { get; public set; }
    public virtual PackageType get_Type();
    [CompilerGeneratedAttribute]
public string get_VsixId();
    [CompilerGeneratedAttribute]
public void set_VsixId(string value);
    [CompilerGeneratedAttribute]
public string get_DefaultNgenApplication();
    [CompilerGeneratedAttribute]
public void set_DefaultNgenApplication(string value);
    [CompilerGeneratedAttribute]
public string get_ExtensionDir();
    [CompilerGeneratedAttribute]
public void set_ExtensionDir(string value);
    public IDictionary`2<string, string> get_FolderMappings();
    public IList`1<WebShortcut> get_WebShortcuts();
    [CompilerGeneratedAttribute]
public bool get_HotLoadable();
    [CompilerGeneratedAttribute]
public void set_HotLoadable(bool value);
}
[DataContractAttribute]
public class Microsoft.VisualStudio.Setup.WebShortcut : ShortcutInformation {
    [CompilerGeneratedAttribute]
private Uri <Target>k__BackingField;
    [DataMemberAttribute]
public Uri Target { get; public set; }
    [CompilerGeneratedAttribute]
public Uri get_Target();
    [CompilerGeneratedAttribute]
public void set_Target(Uri value);
}
[DataContractAttribute]
public class Microsoft.VisualStudio.Setup.WindowsFeature : DismPackage {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    public PackageType Type { get; }
    [DataMemberAttribute]
public string Name { get; public set; }
    public virtual PackageType get_Type();
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
}
[DataContractAttribute]
public class Microsoft.VisualStudio.Setup.Workload : SelectableGroup {
    [CompilerGeneratedAttribute]
private Icon <Icon>k__BackingField;
    [CompilerGeneratedAttribute]
private Uri <BadgeUri>k__BackingField;
    [DataMemberAttribute]
public Icon Icon { get; public set; }
    [DataMemberAttribute]
public Uri BadgeUri { get; public set; }
    public PackageType Type { get; }
    [CompilerGeneratedAttribute]
public Icon get_Icon();
    [CompilerGeneratedAttribute]
public void set_Icon(Icon value);
    [CompilerGeneratedAttribute]
public Uri get_BadgeUri();
    [CompilerGeneratedAttribute]
public void set_BadgeUri(Uri value);
    public virtual PackageType get_Type();
}
[DataContractAttribute]
public class Microsoft.VisualStudio.Setup.ZipPackage : FilePackage`1<FileItem> {
    private List`1<string> exclusionPatterns;
    private List`1<string> directories;
    [CompilerGeneratedAttribute]
private string <RelativePath>k__BackingField;
    public PackageType Type { get; }
    [DataMemberAttribute]
public string RelativePath { get; public set; }
    [DataMemberAttribute]
[EmptyAsNullAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public IList`1<string> ExclusionPatterns { get; }
    [DataMemberAttribute]
[EmptyAsNullAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public IList`1<string> Directories { get; }
    public virtual PackageType get_Type();
    [CompilerGeneratedAttribute]
public string get_RelativePath();
    [CompilerGeneratedAttribute]
public void set_RelativePath(string value);
    public IList`1<string> get_ExclusionPatterns();
    public IList`1<string> get_Directories();
}
[AttributeUsageAttribute("10624")]
internal class System.Diagnostics.CodeAnalysis.MaybeNullAttribute : Attribute {
}
[AttributeUsageAttribute("192")]
internal class System.Diagnostics.CodeAnalysis.MemberNotNullAttribute : Attribute {
    [CompilerGeneratedAttribute]
private String[] <Members>k__BackingField;
    public String[] Members { get; }
    public MemberNotNullAttribute(string member);
    public MemberNotNullAttribute(String[] members);
    [CompilerGeneratedAttribute]
public String[] get_Members();
}
[AttributeUsageAttribute("10624")]
internal class System.Diagnostics.CodeAnalysis.NotNullAttribute : Attribute {
}
[AttributeUsageAttribute("10368")]
internal class System.Diagnostics.CodeAnalysis.NotNullIfNotNullAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <ParameterName>k__BackingField;
    public string ParameterName { get; }
    public NotNullIfNotNullAttribute(string parameterName);
    [CompilerGeneratedAttribute]
public string get_ParameterName();
}
[AttributeUsageAttribute("2048")]
internal class System.Diagnostics.CodeAnalysis.NotNullWhenAttribute : Attribute {
    [CompilerGeneratedAttribute]
private bool <ReturnValue>k__BackingField;
    public bool ReturnValue { get; }
    public NotNullWhenAttribute(bool returnValue);
    [CompilerGeneratedAttribute]
public bool get_ReturnValue();
}
internal static class System.Runtime.CompilerServices.IsExternalInit : object {
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("27524")]
internal class System.Runtime.CompilerServices.NullableAttribute : Attribute {
    public Byte[] NullableFlags;
    public NullableAttribute(byte );
    public NullableAttribute(Byte[] );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("5196")]
internal class System.Runtime.CompilerServices.NullableContextAttribute : Attribute {
    public byte Flag;
    public NullableContextAttribute(byte );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("2")]
internal class System.Runtime.CompilerServices.RefSafetyRulesAttribute : Attribute {
    public int Version;
    public RefSafetyRulesAttribute(int );
}
[GeneratedCodeAttribute("Nerdbank.GitVersioning.Tasks", "3.2.31.56335")]
[ExcludeFromCodeCoverageAttribute]
internal static class ThisAssembly : object {
    internal static string AssemblyVersion;
    internal static string AssemblyFileVersion;
    internal static string AssemblyInformationalVersion;
    internal static string AssemblyName;
    internal static string AssemblyTitle;
    internal static string AssemblyConfiguration;
    internal static string GitCommitId;
    internal static string PublicKey;
    internal static string PublicKeyToken;
    internal static bool IsPublicRelease;
    internal static bool IsPrerelease;
    internal static DateTime GitCommitDate;
    internal static string RootNamespace;
    private static ThisAssembly();
}
[IsReadOnlyAttribute]
[DebuggerDisplayAttribute("{Value}")]
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.3.46-beta+dd815b2b9b")]
internal class Windows.Win32.Foundation.BOOL : ValueType {
    internal int Value;
    internal BOOL(int value);
    internal BOOL(bool value);
    public static int op_Implicit(BOOL value);
    public static BOOL op_Explicit(int value);
    public static bool op_Equality(BOOL left, BOOL right);
    public static bool op_Inequality(BOOL left, BOOL right);
    public sealed virtual bool Equals(BOOL other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public virtual string ToString();
    public static bool op_Implicit(BOOL value);
    public static BOOL op_Implicit(bool value);
}
[IsReadOnlyAttribute]
[DebuggerDisplayAttribute("{Value}")]
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.3.46-beta+dd815b2b9b")]
internal class Windows.Win32.Foundation.HANDLE : ValueType {
    internal IntPtr Value;
    internal static HANDLE Null { get; }
    internal bool IsNull { get; }
    internal HANDLE(IntPtr value);
    internal static HANDLE get_Null();
    internal bool get_IsNull();
    public static IntPtr op_Implicit(HANDLE value);
    public static HANDLE op_Explicit(IntPtr value);
    public static bool op_Equality(HANDLE left, HANDLE right);
    public static bool op_Inequality(HANDLE left, HANDLE right);
    public sealed virtual bool Equals(HANDLE other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public virtual string ToString();
}
[IsReadOnlyAttribute]
[DebuggerDisplayAttribute("{Value}")]
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.3.46-beta+dd815b2b9b")]
internal class Windows.Win32.Foundation.HRESULT : ValueType {
    internal int Value;
    [DebuggerBrowsableAttribute("0")]
internal bool Succeeded { get; }
    [DebuggerBrowsableAttribute("0")]
internal bool Failed { get; }
    internal HRESULT(int value);
    public static int op_Implicit(HRESULT value);
    public static HRESULT op_Explicit(int value);
    public static bool op_Equality(HRESULT left, HRESULT right);
    public static bool op_Inequality(HRESULT left, HRESULT right);
    public sealed virtual bool Equals(HRESULT other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public virtual string ToString();
    public static UInt32 op_Implicit(HRESULT value);
    public static HRESULT op_Explicit(UInt32 value);
    internal bool get_Succeeded();
    internal bool get_Failed();
    internal HRESULT ThrowOnFailure(IntPtr errorInfo);
    internal string ToString(string format, IFormatProvider formatProvider);
}
[IsReadOnlyAttribute]
[DebuggerDisplayAttribute("{Value}")]
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.3.46-beta+dd815b2b9b")]
internal class Windows.Win32.Foundation.HWND : ValueType {
    internal IntPtr Value;
    internal static HWND Null { get; }
    internal bool IsNull { get; }
    internal HWND(IntPtr value);
    internal static HWND get_Null();
    internal bool get_IsNull();
    public static IntPtr op_Implicit(HWND value);
    public static HWND op_Explicit(IntPtr value);
    public static bool op_Equality(HWND left, HWND right);
    public static bool op_Inequality(HWND left, HWND right);
    public sealed virtual bool Equals(HWND other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public virtual string ToString();
    public static HANDLE op_Implicit(HWND value);
}
[IsReadOnlyAttribute]
[DebuggerDisplayAttribute("{DebuggerDisplay}")]
internal class Windows.Win32.Foundation.PCWSTR : ValueType {
    internal Char* Value;
    internal int Length { get; }
    private string DebuggerDisplay { get; }
    internal PCWSTR(Char* value);
    public static Char* op_Explicit(PCWSTR value);
    public static PCWSTR op_Implicit(Char* value);
    public sealed virtual bool Equals(PCWSTR other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    internal int get_Length();
    public virtual string ToString();
    internal ReadOnlySpan`1<char> AsSpan();
    private string get_DebuggerDisplay();
}
[IsReadOnlyAttribute]
[DebuggerDisplayAttribute("{Value}")]
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.3.46-beta+dd815b2b9b")]
internal class Windows.Win32.Foundation.PWSTR : ValueType {
    internal Char* Value;
    internal int Length { get; }
    private string DebuggerDisplay { get; }
    internal PWSTR(Char* value);
    public static Char* op_Implicit(PWSTR value);
    public static PWSTR op_Implicit(Char* value);
    public static bool op_Equality(PWSTR left, PWSTR right);
    public static bool op_Inequality(PWSTR left, PWSTR right);
    public sealed virtual bool Equals(PWSTR other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public virtual string ToString();
    public static PCWSTR op_Implicit(PWSTR value);
    internal int get_Length();
    internal Span`1<char> AsSpan();
    private string get_DebuggerDisplay();
}
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.3.46-beta+dd815b2b9b")]
internal enum Windows.Win32.Foundation.WIN32_ERROR : Enum {
    public UInt32 value__;
    public static WIN32_ERROR NO_ERROR;
    public static WIN32_ERROR ERROR_SUCCESS;
    public static WIN32_ERROR ERROR_INVALID_FUNCTION;
    public static WIN32_ERROR ERROR_FILE_NOT_FOUND;
    public static WIN32_ERROR ERROR_PATH_NOT_FOUND;
    public static WIN32_ERROR ERROR_TOO_MANY_OPEN_FILES;
    public static WIN32_ERROR ERROR_ACCESS_DENIED;
    public static WIN32_ERROR ERROR_INVALID_HANDLE;
    public static WIN32_ERROR ERROR_ARENA_TRASHED;
    public static WIN32_ERROR ERROR_NOT_ENOUGH_MEMORY;
    public static WIN32_ERROR ERROR_INVALID_BLOCK;
    public static WIN32_ERROR ERROR_BAD_ENVIRONMENT;
    public static WIN32_ERROR ERROR_BAD_FORMAT;
    public static WIN32_ERROR ERROR_INVALID_ACCESS;
    public static WIN32_ERROR ERROR_INVALID_DATA;
    public static WIN32_ERROR ERROR_OUTOFMEMORY;
    public static WIN32_ERROR ERROR_INVALID_DRIVE;
    public static WIN32_ERROR ERROR_CURRENT_DIRECTORY;
    public static WIN32_ERROR ERROR_NOT_SAME_DEVICE;
    public static WIN32_ERROR ERROR_NO_MORE_FILES;
    public static WIN32_ERROR ERROR_WRITE_PROTECT;
    public static WIN32_ERROR ERROR_BAD_UNIT;
    public static WIN32_ERROR ERROR_NOT_READY;
    public static WIN32_ERROR ERROR_BAD_COMMAND;
    public static WIN32_ERROR ERROR_CRC;
    public static WIN32_ERROR ERROR_BAD_LENGTH;
    public static WIN32_ERROR ERROR_SEEK;
    public static WIN32_ERROR ERROR_NOT_DOS_DISK;
    public static WIN32_ERROR ERROR_SECTOR_NOT_FOUND;
    public static WIN32_ERROR ERROR_OUT_OF_PAPER;
    public static WIN32_ERROR ERROR_WRITE_FAULT;
    public static WIN32_ERROR ERROR_READ_FAULT;
    public static WIN32_ERROR ERROR_GEN_FAILURE;
    public static WIN32_ERROR ERROR_SHARING_VIOLATION;
    public static WIN32_ERROR ERROR_LOCK_VIOLATION;
    public static WIN32_ERROR ERROR_WRONG_DISK;
    public static WIN32_ERROR ERROR_SHARING_BUFFER_EXCEEDED;
    public static WIN32_ERROR ERROR_HANDLE_EOF;
    public static WIN32_ERROR ERROR_HANDLE_DISK_FULL;
    public static WIN32_ERROR ERROR_NOT_SUPPORTED;
    public static WIN32_ERROR ERROR_REM_NOT_LIST;
    public static WIN32_ERROR ERROR_DUP_NAME;
    public static WIN32_ERROR ERROR_BAD_NETPATH;
    public static WIN32_ERROR ERROR_NETWORK_BUSY;
    public static WIN32_ERROR ERROR_DEV_NOT_EXIST;
    public static WIN32_ERROR ERROR_TOO_MANY_CMDS;
    public static WIN32_ERROR ERROR_ADAP_HDW_ERR;
    public static WIN32_ERROR ERROR_BAD_NET_RESP;
    public static WIN32_ERROR ERROR_UNEXP_NET_ERR;
    public static WIN32_ERROR ERROR_BAD_REM_ADAP;
    public static WIN32_ERROR ERROR_PRINTQ_FULL;
    public static WIN32_ERROR ERROR_NO_SPOOL_SPACE;
    public static WIN32_ERROR ERROR_PRINT_CANCELLED;
    public static WIN32_ERROR ERROR_NETNAME_DELETED;
    public static WIN32_ERROR ERROR_NETWORK_ACCESS_DENIED;
    public static WIN32_ERROR ERROR_BAD_DEV_TYPE;
    public static WIN32_ERROR ERROR_BAD_NET_NAME;
    public static WIN32_ERROR ERROR_TOO_MANY_NAMES;
    public static WIN32_ERROR ERROR_TOO_MANY_SESS;
    public static WIN32_ERROR ERROR_SHARING_PAUSED;
    public static WIN32_ERROR ERROR_REQ_NOT_ACCEP;
    public static WIN32_ERROR ERROR_REDIR_PAUSED;
    public static WIN32_ERROR ERROR_FILE_EXISTS;
    public static WIN32_ERROR ERROR_CANNOT_MAKE;
    public static WIN32_ERROR ERROR_FAIL_I24;
    public static WIN32_ERROR ERROR_OUT_OF_STRUCTURES;
    public static WIN32_ERROR ERROR_ALREADY_ASSIGNED;
    public static WIN32_ERROR ERROR_INVALID_PASSWORD;
    public static WIN32_ERROR ERROR_INVALID_PARAMETER;
    public static WIN32_ERROR ERROR_NET_WRITE_FAULT;
    public static WIN32_ERROR ERROR_NO_PROC_SLOTS;
    public static WIN32_ERROR ERROR_TOO_MANY_SEMAPHORES;
    public static WIN32_ERROR ERROR_EXCL_SEM_ALREADY_OWNED;
    public static WIN32_ERROR ERROR_SEM_IS_SET;
    public static WIN32_ERROR ERROR_TOO_MANY_SEM_REQUESTS;
    public static WIN32_ERROR ERROR_INVALID_AT_INTERRUPT_TIME;
    public static WIN32_ERROR ERROR_SEM_OWNER_DIED;
    public static WIN32_ERROR ERROR_SEM_USER_LIMIT;
    public static WIN32_ERROR ERROR_DISK_CHANGE;
    public static WIN32_ERROR ERROR_DRIVE_LOCKED;
    public static WIN32_ERROR ERROR_BROKEN_PIPE;
    public static WIN32_ERROR ERROR_OPEN_FAILED;
    public static WIN32_ERROR ERROR_BUFFER_OVERFLOW;
    public static WIN32_ERROR ERROR_DISK_FULL;
    public static WIN32_ERROR ERROR_NO_MORE_SEARCH_HANDLES;
    public static WIN32_ERROR ERROR_INVALID_TARGET_HANDLE;
    public static WIN32_ERROR ERROR_INVALID_CATEGORY;
    public static WIN32_ERROR ERROR_INVALID_VERIFY_SWITCH;
    public static WIN32_ERROR ERROR_BAD_DRIVER_LEVEL;
    public static WIN32_ERROR ERROR_CALL_NOT_IMPLEMENTED;
    public static WIN32_ERROR ERROR_SEM_TIMEOUT;
    public static WIN32_ERROR ERROR_INSUFFICIENT_BUFFER;
    public static WIN32_ERROR ERROR_INVALID_NAME;
    public static WIN32_ERROR ERROR_INVALID_LEVEL;
    public static WIN32_ERROR ERROR_NO_VOLUME_LABEL;
    public static WIN32_ERROR ERROR_MOD_NOT_FOUND;
    public static WIN32_ERROR ERROR_PROC_NOT_FOUND;
    public static WIN32_ERROR ERROR_WAIT_NO_CHILDREN;
    public static WIN32_ERROR ERROR_CHILD_NOT_COMPLETE;
    public static WIN32_ERROR ERROR_DIRECT_ACCESS_HANDLE;
    public static WIN32_ERROR ERROR_NEGATIVE_SEEK;
    public static WIN32_ERROR ERROR_SEEK_ON_DEVICE;
    public static WIN32_ERROR ERROR_IS_JOIN_TARGET;
    public static WIN32_ERROR ERROR_IS_JOINED;
    public static WIN32_ERROR ERROR_IS_SUBSTED;
    public static WIN32_ERROR ERROR_NOT_JOINED;
    public static WIN32_ERROR ERROR_NOT_SUBSTED;
    public static WIN32_ERROR ERROR_JOIN_TO_JOIN;
    public static WIN32_ERROR ERROR_SUBST_TO_SUBST;
    public static WIN32_ERROR ERROR_JOIN_TO_SUBST;
    public static WIN32_ERROR ERROR_SUBST_TO_JOIN;
    public static WIN32_ERROR ERROR_BUSY_DRIVE;
    public static WIN32_ERROR ERROR_SAME_DRIVE;
    public static WIN32_ERROR ERROR_DIR_NOT_ROOT;
    public static WIN32_ERROR ERROR_DIR_NOT_EMPTY;
    public static WIN32_ERROR ERROR_IS_SUBST_PATH;
    public static WIN32_ERROR ERROR_IS_JOIN_PATH;
    public static WIN32_ERROR ERROR_PATH_BUSY;
    public static WIN32_ERROR ERROR_IS_SUBST_TARGET;
    public static WIN32_ERROR ERROR_SYSTEM_TRACE;
    public static WIN32_ERROR ERROR_INVALID_EVENT_COUNT;
    public static WIN32_ERROR ERROR_TOO_MANY_MUXWAITERS;
    public static WIN32_ERROR ERROR_INVALID_LIST_FORMAT;
    public static WIN32_ERROR ERROR_LABEL_TOO_LONG;
    public static WIN32_ERROR ERROR_TOO_MANY_TCBS;
    public static WIN32_ERROR ERROR_SIGNAL_REFUSED;
    public static WIN32_ERROR ERROR_DISCARDED;
    public static WIN32_ERROR ERROR_NOT_LOCKED;
    public static WIN32_ERROR ERROR_BAD_THREADID_ADDR;
    public static WIN32_ERROR ERROR_BAD_ARGUMENTS;
    public static WIN32_ERROR ERROR_BAD_PATHNAME;
    public static WIN32_ERROR ERROR_SIGNAL_PENDING;
    public static WIN32_ERROR ERROR_MAX_THRDS_REACHED;
    public static WIN32_ERROR ERROR_LOCK_FAILED;
    public static WIN32_ERROR ERROR_BUSY;
    public static WIN32_ERROR ERROR_DEVICE_SUPPORT_IN_PROGRESS;
    public static WIN32_ERROR ERROR_CANCEL_VIOLATION;
    public static WIN32_ERROR ERROR_ATOMIC_LOCKS_NOT_SUPPORTED;
    public static WIN32_ERROR ERROR_INVALID_SEGMENT_NUMBER;
    public static WIN32_ERROR ERROR_INVALID_ORDINAL;
    public static WIN32_ERROR ERROR_ALREADY_EXISTS;
    public static WIN32_ERROR ERROR_INVALID_FLAG_NUMBER;
    public static WIN32_ERROR ERROR_SEM_NOT_FOUND;
    public static WIN32_ERROR ERROR_INVALID_STARTING_CODESEG;
    public static WIN32_ERROR ERROR_INVALID_STACKSEG;
    public static WIN32_ERROR ERROR_INVALID_MODULETYPE;
    public static WIN32_ERROR ERROR_INVALID_EXE_SIGNATURE;
    public static WIN32_ERROR ERROR_EXE_MARKED_INVALID;
    public static WIN32_ERROR ERROR_BAD_EXE_FORMAT;
    public static WIN32_ERROR ERROR_ITERATED_DATA_EXCEEDS_64k;
    public static WIN32_ERROR ERROR_INVALID_MINALLOCSIZE;
    public static WIN32_ERROR ERROR_DYNLINK_FROM_INVALID_RING;
    public static WIN32_ERROR ERROR_IOPL_NOT_ENABLED;
    public static WIN32_ERROR ERROR_INVALID_SEGDPL;
    public static WIN32_ERROR ERROR_AUTODATASEG_EXCEEDS_64k;
    public static WIN32_ERROR ERROR_RING2SEG_MUST_BE_MOVABLE;
    public static WIN32_ERROR ERROR_RELOC_CHAIN_XEEDS_SEGLIM;
    public static WIN32_ERROR ERROR_INFLOOP_IN_RELOC_CHAIN;
    public static WIN32_ERROR ERROR_ENVVAR_NOT_FOUND;
    public static WIN32_ERROR ERROR_NO_SIGNAL_SENT;
    public static WIN32_ERROR ERROR_FILENAME_EXCED_RANGE;
    public static WIN32_ERROR ERROR_RING2_STACK_IN_USE;
    public static WIN32_ERROR ERROR_META_EXPANSION_TOO_LONG;
    public static WIN32_ERROR ERROR_INVALID_SIGNAL_NUMBER;
    public static WIN32_ERROR ERROR_THREAD_1_INACTIVE;
    public static WIN32_ERROR ERROR_LOCKED;
    public static WIN32_ERROR ERROR_TOO_MANY_MODULES;
    public static WIN32_ERROR ERROR_NESTING_NOT_ALLOWED;
    public static WIN32_ERROR ERROR_EXE_MACHINE_TYPE_MISMATCH;
    public static WIN32_ERROR ERROR_EXE_CANNOT_MODIFY_SIGNED_BINARY;
    public static WIN32_ERROR ERROR_EXE_CANNOT_MODIFY_STRONG_SIGNED_BINARY;
    public static WIN32_ERROR ERROR_FILE_CHECKED_OUT;
    public static WIN32_ERROR ERROR_CHECKOUT_REQUIRED;
    public static WIN32_ERROR ERROR_BAD_FILE_TYPE;
    public static WIN32_ERROR ERROR_FILE_TOO_LARGE;
    public static WIN32_ERROR ERROR_FORMS_AUTH_REQUIRED;
    public static WIN32_ERROR ERROR_VIRUS_INFECTED;
    public static WIN32_ERROR ERROR_VIRUS_DELETED;
    public static WIN32_ERROR ERROR_PIPE_LOCAL;
    public static WIN32_ERROR ERROR_BAD_PIPE;
    public static WIN32_ERROR ERROR_PIPE_BUSY;
    public static WIN32_ERROR ERROR_NO_DATA;
    public static WIN32_ERROR ERROR_PIPE_NOT_CONNECTED;
    public static WIN32_ERROR ERROR_MORE_DATA;
    public static WIN32_ERROR ERROR_NO_WORK_DONE;
    public static WIN32_ERROR ERROR_VC_DISCONNECTED;
    public static WIN32_ERROR ERROR_INVALID_EA_NAME;
    public static WIN32_ERROR ERROR_EA_LIST_INCONSISTENT;
    public static WIN32_ERROR ERROR_NO_MORE_ITEMS;
    public static WIN32_ERROR ERROR_CANNOT_COPY;
    public static WIN32_ERROR ERROR_DIRECTORY;
    public static WIN32_ERROR ERROR_EAS_DIDNT_FIT;
    public static WIN32_ERROR ERROR_EA_FILE_CORRUPT;
    public static WIN32_ERROR ERROR_EA_TABLE_FULL;
    public static WIN32_ERROR ERROR_INVALID_EA_HANDLE;
    public static WIN32_ERROR ERROR_EAS_NOT_SUPPORTED;
    public static WIN32_ERROR ERROR_NOT_OWNER;
    public static WIN32_ERROR ERROR_TOO_MANY_POSTS;
    public static WIN32_ERROR ERROR_PARTIAL_COPY;
    public static WIN32_ERROR ERROR_OPLOCK_NOT_GRANTED;
    public static WIN32_ERROR ERROR_INVALID_OPLOCK_PROTOCOL;
    public static WIN32_ERROR ERROR_DISK_TOO_FRAGMENTED;
    public static WIN32_ERROR ERROR_DELETE_PENDING;
    public static WIN32_ERROR ERROR_INCOMPATIBLE_WITH_GLOBAL_SHORT_NAME_REGISTRY_SETTING;
    public static WIN32_ERROR ERROR_SHORT_NAMES_NOT_ENABLED_ON_VOLUME;
    public static WIN32_ERROR ERROR_SECURITY_STREAM_IS_INCONSISTENT;
    public static WIN32_ERROR ERROR_INVALID_LOCK_RANGE;
    public static WIN32_ERROR ERROR_IMAGE_SUBSYSTEM_NOT_PRESENT;
    public static WIN32_ERROR ERROR_NOTIFICATION_GUID_ALREADY_DEFINED;
    public static WIN32_ERROR ERROR_INVALID_EXCEPTION_HANDLER;
    public static WIN32_ERROR ERROR_DUPLICATE_PRIVILEGES;
    public static WIN32_ERROR ERROR_NO_RANGES_PROCESSED;
    public static WIN32_ERROR ERROR_NOT_ALLOWED_ON_SYSTEM_FILE;
    public static WIN32_ERROR ERROR_DISK_RESOURCES_EXHAUSTED;
    public static WIN32_ERROR ERROR_INVALID_TOKEN;
    public static WIN32_ERROR ERROR_DEVICE_FEATURE_NOT_SUPPORTED;
    public static WIN32_ERROR ERROR_MR_MID_NOT_FOUND;
    public static WIN32_ERROR ERROR_SCOPE_NOT_FOUND;
    public static WIN32_ERROR ERROR_UNDEFINED_SCOPE;
    public static WIN32_ERROR ERROR_INVALID_CAP;
    public static WIN32_ERROR ERROR_DEVICE_UNREACHABLE;
    public static WIN32_ERROR ERROR_DEVICE_NO_RESOURCES;
    public static WIN32_ERROR ERROR_DATA_CHECKSUM_ERROR;
    public static WIN32_ERROR ERROR_INTERMIXED_KERNEL_EA_OPERATION;
    public static WIN32_ERROR ERROR_FILE_LEVEL_TRIM_NOT_SUPPORTED;
    public static WIN32_ERROR ERROR_OFFSET_ALIGNMENT_VIOLATION;
    public static WIN32_ERROR ERROR_INVALID_FIELD_IN_PARAMETER_LIST;
    public static WIN32_ERROR ERROR_OPERATION_IN_PROGRESS;
    public static WIN32_ERROR ERROR_BAD_DEVICE_PATH;
    public static WIN32_ERROR ERROR_TOO_MANY_DESCRIPTORS;
    public static WIN32_ERROR ERROR_SCRUB_DATA_DISABLED;
    public static WIN32_ERROR ERROR_NOT_REDUNDANT_STORAGE;
    public static WIN32_ERROR ERROR_RESIDENT_FILE_NOT_SUPPORTED;
    public static WIN32_ERROR ERROR_COMPRESSED_FILE_NOT_SUPPORTED;
    public static WIN32_ERROR ERROR_DIRECTORY_NOT_SUPPORTED;
    public static WIN32_ERROR ERROR_NOT_READ_FROM_COPY;
    public static WIN32_ERROR ERROR_FT_WRITE_FAILURE;
    public static WIN32_ERROR ERROR_FT_DI_SCAN_REQUIRED;
    public static WIN32_ERROR ERROR_INVALID_KERNEL_INFO_VERSION;
    public static WIN32_ERROR ERROR_INVALID_PEP_INFO_VERSION;
    public static WIN32_ERROR ERROR_OBJECT_NOT_EXTERNALLY_BACKED;
    public static WIN32_ERROR ERROR_EXTERNAL_BACKING_PROVIDER_UNKNOWN;
    public static WIN32_ERROR ERROR_COMPRESSION_NOT_BENEFICIAL;
    public static WIN32_ERROR ERROR_STORAGE_TOPOLOGY_ID_MISMATCH;
    public static WIN32_ERROR ERROR_BLOCKED_BY_PARENTAL_CONTROLS;
    public static WIN32_ERROR ERROR_BLOCK_TOO_MANY_REFERENCES;
    public static WIN32_ERROR ERROR_MARKED_TO_DISALLOW_WRITES;
    public static WIN32_ERROR ERROR_ENCLAVE_FAILURE;
    public static WIN32_ERROR ERROR_FAIL_NOACTION_REBOOT;
    public static WIN32_ERROR ERROR_FAIL_SHUTDOWN;
    public static WIN32_ERROR ERROR_FAIL_RESTART;
    public static WIN32_ERROR ERROR_MAX_SESSIONS_REACHED;
    public static WIN32_ERROR ERROR_NETWORK_ACCESS_DENIED_EDP;
    public static WIN32_ERROR ERROR_DEVICE_HINT_NAME_BUFFER_TOO_SMALL;
    public static WIN32_ERROR ERROR_EDP_POLICY_DENIES_OPERATION;
    public static WIN32_ERROR ERROR_EDP_DPL_POLICY_CANT_BE_SATISFIED;
    public static WIN32_ERROR ERROR_CLOUD_FILE_SYNC_ROOT_METADATA_CORRUPT;
    public static WIN32_ERROR ERROR_DEVICE_IN_MAINTENANCE;
    public static WIN32_ERROR ERROR_NOT_SUPPORTED_ON_DAX;
    public static WIN32_ERROR ERROR_DAX_MAPPING_EXISTS;
    public static WIN32_ERROR ERROR_CLOUD_FILE_PROVIDER_NOT_RUNNING;
    public static WIN32_ERROR ERROR_CLOUD_FILE_METADATA_CORRUPT;
    public static WIN32_ERROR ERROR_CLOUD_FILE_METADATA_TOO_LARGE;
    public static WIN32_ERROR ERROR_CLOUD_FILE_PROPERTY_BLOB_TOO_LARGE;
    public static WIN32_ERROR ERROR_CLOUD_FILE_PROPERTY_BLOB_CHECKSUM_MISMATCH;
    public static WIN32_ERROR ERROR_CHILD_PROCESS_BLOCKED;
    public static WIN32_ERROR ERROR_STORAGE_LOST_DATA_PERSISTENCE;
    public static WIN32_ERROR ERROR_FILE_SYSTEM_VIRTUALIZATION_UNAVAILABLE;
    public static WIN32_ERROR ERROR_FILE_SYSTEM_VIRTUALIZATION_METADATA_CORRUPT;
    public static WIN32_ERROR ERROR_FILE_SYSTEM_VIRTUALIZATION_BUSY;
    public static WIN32_ERROR ERROR_FILE_SYSTEM_VIRTUALIZATION_PROVIDER_UNKNOWN;
    public static WIN32_ERROR ERROR_GDI_HANDLE_LEAK;
    public static WIN32_ERROR ERROR_CLOUD_FILE_TOO_MANY_PROPERTY_BLOBS;
    public static WIN32_ERROR ERROR_CLOUD_FILE_PROPERTY_VERSION_NOT_SUPPORTED;
    public static WIN32_ERROR ERROR_NOT_A_CLOUD_FILE;
    public static WIN32_ERROR ERROR_CLOUD_FILE_NOT_IN_SYNC;
    public static WIN32_ERROR ERROR_CLOUD_FILE_ALREADY_CONNECTED;
    public static WIN32_ERROR ERROR_CLOUD_FILE_NOT_SUPPORTED;
    public static WIN32_ERROR ERROR_CLOUD_FILE_INVALID_REQUEST;
    public static WIN32_ERROR ERROR_CLOUD_FILE_READ_ONLY_VOLUME;
    public static WIN32_ERROR ERROR_CLOUD_FILE_CONNECTED_PROVIDER_ONLY;
    public static WIN32_ERROR ERROR_CLOUD_FILE_VALIDATION_FAILED;
    public static WIN32_ERROR ERROR_SMB1_NOT_AVAILABLE;
    public static WIN32_ERROR ERROR_FILE_SYSTEM_VIRTUALIZATION_INVALID_OPERATION;
    public static WIN32_ERROR ERROR_CLOUD_FILE_AUTHENTICATION_FAILED;
    public static WIN32_ERROR ERROR_CLOUD_FILE_INSUFFICIENT_RESOURCES;
    public static WIN32_ERROR ERROR_CLOUD_FILE_NETWORK_UNAVAILABLE;
    public static WIN32_ERROR ERROR_CLOUD_FILE_UNSUCCESSFUL;
    public static WIN32_ERROR ERROR_CLOUD_FILE_NOT_UNDER_SYNC_ROOT;
    public static WIN32_ERROR ERROR_CLOUD_FILE_IN_USE;
    public static WIN32_ERROR ERROR_CLOUD_FILE_PINNED;
    public static WIN32_ERROR ERROR_CLOUD_FILE_REQUEST_ABORTED;
    public static WIN32_ERROR ERROR_CLOUD_FILE_PROPERTY_CORRUPT;
    public static WIN32_ERROR ERROR_CLOUD_FILE_ACCESS_DENIED;
    public static WIN32_ERROR ERROR_CLOUD_FILE_INCOMPATIBLE_HARDLINKS;
    public static WIN32_ERROR ERROR_CLOUD_FILE_PROPERTY_LOCK_CONFLICT;
    public static WIN32_ERROR ERROR_CLOUD_FILE_REQUEST_CANCELED;
    public static WIN32_ERROR ERROR_EXTERNAL_SYSKEY_NOT_SUPPORTED;
    public static WIN32_ERROR ERROR_THREAD_MODE_ALREADY_BACKGROUND;
    public static WIN32_ERROR ERROR_THREAD_MODE_NOT_BACKGROUND;
    public static WIN32_ERROR ERROR_PROCESS_MODE_ALREADY_BACKGROUND;
    public static WIN32_ERROR ERROR_PROCESS_MODE_NOT_BACKGROUND;
    public static WIN32_ERROR ERROR_CLOUD_FILE_PROVIDER_TERMINATED;
    public static WIN32_ERROR ERROR_NOT_A_CLOUD_SYNC_ROOT;
    public static WIN32_ERROR ERROR_FILE_PROTECTED_UNDER_DPL;
    public static WIN32_ERROR ERROR_VOLUME_NOT_CLUSTER_ALIGNED;
    public static WIN32_ERROR ERROR_NO_PHYSICALLY_ALIGNED_FREE_SPACE_FOUND;
    public static WIN32_ERROR ERROR_APPX_FILE_NOT_ENCRYPTED;
    public static WIN32_ERROR ERROR_RWRAW_ENCRYPTED_FILE_NOT_ENCRYPTED;
    public static WIN32_ERROR ERROR_RWRAW_ENCRYPTED_INVALID_EDATAINFO_FILEOFFSET;
    public static WIN32_ERROR ERROR_RWRAW_ENCRYPTED_INVALID_EDATAINFO_FILERANGE;
    public static WIN32_ERROR ERROR_RWRAW_ENCRYPTED_INVALID_EDATAINFO_PARAMETER;
    public static WIN32_ERROR ERROR_LINUX_SUBSYSTEM_NOT_PRESENT;
    public static WIN32_ERROR ERROR_FT_READ_FAILURE;
    public static WIN32_ERROR ERROR_STORAGE_RESERVE_ID_INVALID;
    public static WIN32_ERROR ERROR_STORAGE_RESERVE_DOES_NOT_EXIST;
    public static WIN32_ERROR ERROR_STORAGE_RESERVE_ALREADY_EXISTS;
    public static WIN32_ERROR ERROR_STORAGE_RESERVE_NOT_EMPTY;
    public static WIN32_ERROR ERROR_NOT_A_DAX_VOLUME;
    public static WIN32_ERROR ERROR_NOT_DAX_MAPPABLE;
    public static WIN32_ERROR ERROR_TIME_SENSITIVE_THREAD;
    public static WIN32_ERROR ERROR_DPL_NOT_SUPPORTED_FOR_USER;
    public static WIN32_ERROR ERROR_CASE_DIFFERING_NAMES_IN_DIR;
    public static WIN32_ERROR ERROR_FILE_NOT_SUPPORTED;
    public static WIN32_ERROR ERROR_CLOUD_FILE_REQUEST_TIMEOUT;
    public static WIN32_ERROR ERROR_NO_TASK_QUEUE;
    public static WIN32_ERROR ERROR_SRC_SRV_DLL_LOAD_FAILED;
    public static WIN32_ERROR ERROR_NOT_SUPPORTED_WITH_BTT;
    public static WIN32_ERROR ERROR_ENCRYPTION_DISABLED;
    public static WIN32_ERROR ERROR_ENCRYPTING_METADATA_DISALLOWED;
    public static WIN32_ERROR ERROR_CANT_CLEAR_ENCRYPTION_FLAG;
    public static WIN32_ERROR ERROR_NO_SUCH_DEVICE;
    public static WIN32_ERROR ERROR_CLOUD_FILE_DEHYDRATION_DISALLOWED;
    public static WIN32_ERROR ERROR_FILE_SNAP_IN_PROGRESS;
    public static WIN32_ERROR ERROR_FILE_SNAP_USER_SECTION_NOT_SUPPORTED;
    public static WIN32_ERROR ERROR_FILE_SNAP_MODIFY_NOT_SUPPORTED;
    public static WIN32_ERROR ERROR_FILE_SNAP_IO_NOT_COORDINATED;
    public static WIN32_ERROR ERROR_FILE_SNAP_UNEXPECTED_ERROR;
    public static WIN32_ERROR ERROR_FILE_SNAP_INVALID_PARAMETER;
    public static WIN32_ERROR ERROR_UNSATISFIED_DEPENDENCIES;
    public static WIN32_ERROR ERROR_CASE_SENSITIVE_PATH;
    public static WIN32_ERROR ERROR_UNEXPECTED_NTCACHEMANAGER_ERROR;
    public static WIN32_ERROR ERROR_LINUX_SUBSYSTEM_UPDATE_REQUIRED;
    public static WIN32_ERROR ERROR_DLP_POLICY_WARNS_AGAINST_OPERATION;
    public static WIN32_ERROR ERROR_DLP_POLICY_DENIES_OPERATION;
    public static WIN32_ERROR ERROR_SECURITY_DENIES_OPERATION;
    public static WIN32_ERROR ERROR_UNTRUSTED_MOUNT_POINT;
    public static WIN32_ERROR ERROR_DLP_POLICY_SILENTLY_FAIL;
    public static WIN32_ERROR ERROR_CAPAUTHZ_NOT_DEVUNLOCKED;
    public static WIN32_ERROR ERROR_CAPAUTHZ_CHANGE_TYPE;
    public static WIN32_ERROR ERROR_CAPAUTHZ_NOT_PROVISIONED;
    public static WIN32_ERROR ERROR_CAPAUTHZ_NOT_AUTHORIZED;
    public static WIN32_ERROR ERROR_CAPAUTHZ_NO_POLICY;
    public static WIN32_ERROR ERROR_CAPAUTHZ_DB_CORRUPTED;
    public static WIN32_ERROR ERROR_CAPAUTHZ_SCCD_INVALID_CATALOG;
    public static WIN32_ERROR ERROR_CAPAUTHZ_SCCD_NO_AUTH_ENTITY;
    public static WIN32_ERROR ERROR_CAPAUTHZ_SCCD_PARSE_ERROR;
    public static WIN32_ERROR ERROR_CAPAUTHZ_SCCD_DEV_MODE_REQUIRED;
    public static WIN32_ERROR ERROR_CAPAUTHZ_SCCD_NO_CAPABILITY_MATCH;
    public static WIN32_ERROR ERROR_CIMFS_IMAGE_CORRUPT;
    public static WIN32_ERROR ERROR_CIMFS_IMAGE_VERSION_NOT_SUPPORTED;
    public static WIN32_ERROR ERROR_STORAGE_STACK_ACCESS_DENIED;
    public static WIN32_ERROR ERROR_INSUFFICIENT_VIRTUAL_ADDR_RESOURCES;
    public static WIN32_ERROR ERROR_INDEX_OUT_OF_BOUNDS;
    public static WIN32_ERROR ERROR_CLOUD_FILE_US_MESSAGE_TIMEOUT;
    public static WIN32_ERROR ERROR_PNP_QUERY_REMOVE_DEVICE_TIMEOUT;
    public static WIN32_ERROR ERROR_PNP_QUERY_REMOVE_RELATED_DEVICE_TIMEOUT;
    public static WIN32_ERROR ERROR_PNP_QUERY_REMOVE_UNRELATED_DEVICE_TIMEOUT;
    public static WIN32_ERROR ERROR_DEVICE_HARDWARE_ERROR;
    public static WIN32_ERROR ERROR_INVALID_ADDRESS;
    public static WIN32_ERROR ERROR_HAS_SYSTEM_CRITICAL_FILES;
    public static WIN32_ERROR ERROR_ENCRYPTED_FILE_NOT_SUPPORTED;
    public static WIN32_ERROR ERROR_SPARSE_FILE_NOT_SUPPORTED;
    public static WIN32_ERROR ERROR_PAGEFILE_NOT_SUPPORTED;
    public static WIN32_ERROR ERROR_VOLUME_NOT_SUPPORTED;
    public static WIN32_ERROR ERROR_NOT_SUPPORTED_WITH_BYPASSIO;
    public static WIN32_ERROR ERROR_NO_BYPASSIO_DRIVER_SUPPORT;
    public static WIN32_ERROR ERROR_NOT_SUPPORTED_WITH_ENCRYPTION;
    public static WIN32_ERROR ERROR_NOT_SUPPORTED_WITH_COMPRESSION;
    public static WIN32_ERROR ERROR_NOT_SUPPORTED_WITH_REPLICATION;
    public static WIN32_ERROR ERROR_NOT_SUPPORTED_WITH_DEDUPLICATION;
    public static WIN32_ERROR ERROR_NOT_SUPPORTED_WITH_AUDITING;
    public static WIN32_ERROR ERROR_USER_PROFILE_LOAD;
    public static WIN32_ERROR ERROR_SESSION_KEY_TOO_SHORT;
    public static WIN32_ERROR ERROR_ACCESS_DENIED_APPDATA;
    public static WIN32_ERROR ERROR_NOT_SUPPORTED_WITH_MONITORING;
    public static WIN32_ERROR ERROR_NOT_SUPPORTED_WITH_SNAPSHOT;
    public static WIN32_ERROR ERROR_NOT_SUPPORTED_WITH_VIRTUALIZATION;
    public static WIN32_ERROR ERROR_BYPASSIO_FLT_NOT_SUPPORTED;
    public static WIN32_ERROR ERROR_DEVICE_RESET_REQUIRED;
    public static WIN32_ERROR ERROR_VOLUME_WRITE_ACCESS_DENIED;
    public static WIN32_ERROR ERROR_NOT_SUPPORTED_WITH_CACHED_HANDLE;
    public static WIN32_ERROR ERROR_FS_METADATA_INCONSISTENT;
    public static WIN32_ERROR ERROR_BLOCK_WEAK_REFERENCE_INVALID;
    public static WIN32_ERROR ERROR_BLOCK_SOURCE_WEAK_REFERENCE_INVALID;
    public static WIN32_ERROR ERROR_BLOCK_TARGET_WEAK_REFERENCE_INVALID;
    public static WIN32_ERROR ERROR_BLOCK_SHARED;
    public static WIN32_ERROR ERROR_ARITHMETIC_OVERFLOW;
    public static WIN32_ERROR ERROR_PIPE_CONNECTED;
    public static WIN32_ERROR ERROR_PIPE_LISTENING;
    public static WIN32_ERROR ERROR_VERIFIER_STOP;
    public static WIN32_ERROR ERROR_ABIOS_ERROR;
    public static WIN32_ERROR ERROR_WX86_WARNING;
    public static WIN32_ERROR ERROR_WX86_ERROR;
    public static WIN32_ERROR ERROR_TIMER_NOT_CANCELED;
    public static WIN32_ERROR ERROR_UNWIND;
    public static WIN32_ERROR ERROR_BAD_STACK;
    public static WIN32_ERROR ERROR_INVALID_UNWIND_TARGET;
    public static WIN32_ERROR ERROR_INVALID_PORT_ATTRIBUTES;
    public static WIN32_ERROR ERROR_PORT_MESSAGE_TOO_LONG;
    public static WIN32_ERROR ERROR_INVALID_QUOTA_LOWER;
    public static WIN32_ERROR ERROR_DEVICE_ALREADY_ATTACHED;
    public static WIN32_ERROR ERROR_INSTRUCTION_MISALIGNMENT;
    public static WIN32_ERROR ERROR_PROFILING_NOT_STARTED;
    public static WIN32_ERROR ERROR_PROFILING_NOT_STOPPED;
    public static WIN32_ERROR ERROR_COULD_NOT_INTERPRET;
    public static WIN32_ERROR ERROR_PROFILING_AT_LIMIT;
    public static WIN32_ERROR ERROR_CANT_WAIT;
    public static WIN32_ERROR ERROR_CANT_TERMINATE_SELF;
    public static WIN32_ERROR ERROR_UNEXPECTED_MM_CREATE_ERR;
    public static WIN32_ERROR ERROR_UNEXPECTED_MM_MAP_ERROR;
    public static WIN32_ERROR ERROR_UNEXPECTED_MM_EXTEND_ERR;
    public static WIN32_ERROR ERROR_BAD_FUNCTION_TABLE;
    public static WIN32_ERROR ERROR_NO_GUID_TRANSLATION;
    public static WIN32_ERROR ERROR_INVALID_LDT_SIZE;
    public static WIN32_ERROR ERROR_INVALID_LDT_OFFSET;
    public static WIN32_ERROR ERROR_INVALID_LDT_DESCRIPTOR;
    public static WIN32_ERROR ERROR_TOO_MANY_THREADS;
    public static WIN32_ERROR ERROR_THREAD_NOT_IN_PROCESS;
    public static WIN32_ERROR ERROR_PAGEFILE_QUOTA_EXCEEDED;
    public static WIN32_ERROR ERROR_LOGON_SERVER_CONFLICT;
    public static WIN32_ERROR ERROR_SYNCHRONIZATION_REQUIRED;
    public static WIN32_ERROR ERROR_NET_OPEN_FAILED;
    public static WIN32_ERROR ERROR_IO_PRIVILEGE_FAILED;
    public static WIN32_ERROR ERROR_CONTROL_C_EXIT;
    public static WIN32_ERROR ERROR_MISSING_SYSTEMFILE;
    public static WIN32_ERROR ERROR_UNHANDLED_EXCEPTION;
    public static WIN32_ERROR ERROR_APP_INIT_FAILURE;
    public static WIN32_ERROR ERROR_PAGEFILE_CREATE_FAILED;
    public static WIN32_ERROR ERROR_INVALID_IMAGE_HASH;
    public static WIN32_ERROR ERROR_NO_PAGEFILE;
    public static WIN32_ERROR ERROR_ILLEGAL_FLOAT_CONTEXT;
    public static WIN32_ERROR ERROR_NO_EVENT_PAIR;
    public static WIN32_ERROR ERROR_DOMAIN_CTRLR_CONFIG_ERROR;
    public static WIN32_ERROR ERROR_ILLEGAL_CHARACTER;
    public static WIN32_ERROR ERROR_UNDEFINED_CHARACTER;
    public static WIN32_ERROR ERROR_FLOPPY_VOLUME;
    public static WIN32_ERROR ERROR_BIOS_FAILED_TO_CONNECT_INTERRUPT;
    public static WIN32_ERROR ERROR_BACKUP_CONTROLLER;
    public static WIN32_ERROR ERROR_MUTANT_LIMIT_EXCEEDED;
    public static WIN32_ERROR ERROR_FS_DRIVER_REQUIRED;
    public static WIN32_ERROR ERROR_CANNOT_LOAD_REGISTRY_FILE;
    public static WIN32_ERROR ERROR_DEBUG_ATTACH_FAILED;
    public static WIN32_ERROR ERROR_SYSTEM_PROCESS_TERMINATED;
    public static WIN32_ERROR ERROR_DATA_NOT_ACCEPTED;
    public static WIN32_ERROR ERROR_VDM_HARD_ERROR;
    public static WIN32_ERROR ERROR_DRIVER_CANCEL_TIMEOUT;
    public static WIN32_ERROR ERROR_REPLY_MESSAGE_MISMATCH;
    public static WIN32_ERROR ERROR_LOST_WRITEBEHIND_DATA;
    public static WIN32_ERROR ERROR_CLIENT_SERVER_PARAMETERS_INVALID;
    public static WIN32_ERROR ERROR_NOT_TINY_STREAM;
    public static WIN32_ERROR ERROR_STACK_OVERFLOW_READ;
    public static WIN32_ERROR ERROR_CONVERT_TO_LARGE;
    public static WIN32_ERROR ERROR_FOUND_OUT_OF_SCOPE;
    public static WIN32_ERROR ERROR_ALLOCATE_BUCKET;
    public static WIN32_ERROR ERROR_MARSHALL_OVERFLOW;
    public static WIN32_ERROR ERROR_INVALID_VARIANT;
    public static WIN32_ERROR ERROR_BAD_COMPRESSION_BUFFER;
    public static WIN32_ERROR ERROR_AUDIT_FAILED;
    public static WIN32_ERROR ERROR_TIMER_RESOLUTION_NOT_SET;
    public static WIN32_ERROR ERROR_INSUFFICIENT_LOGON_INFO;
    public static WIN32_ERROR ERROR_BAD_DLL_ENTRYPOINT;
    public static WIN32_ERROR ERROR_BAD_SERVICE_ENTRYPOINT;
    public static WIN32_ERROR ERROR_IP_ADDRESS_CONFLICT1;
    public static WIN32_ERROR ERROR_IP_ADDRESS_CONFLICT2;
    public static WIN32_ERROR ERROR_REGISTRY_QUOTA_LIMIT;
    public static WIN32_ERROR ERROR_NO_CALLBACK_ACTIVE;
    public static WIN32_ERROR ERROR_PWD_TOO_SHORT;
    public static WIN32_ERROR ERROR_PWD_TOO_RECENT;
    public static WIN32_ERROR ERROR_PWD_HISTORY_CONFLICT;
    public static WIN32_ERROR ERROR_UNSUPPORTED_COMPRESSION;
    public static WIN32_ERROR ERROR_INVALID_HW_PROFILE;
    public static WIN32_ERROR ERROR_INVALID_PLUGPLAY_DEVICE_PATH;
    public static WIN32_ERROR ERROR_QUOTA_LIST_INCONSISTENT;
    public static WIN32_ERROR ERROR_EVALUATION_EXPIRATION;
    public static WIN32_ERROR ERROR_ILLEGAL_DLL_RELOCATION;
    public static WIN32_ERROR ERROR_DLL_INIT_FAILED_LOGOFF;
    public static WIN32_ERROR ERROR_VALIDATE_CONTINUE;
    public static WIN32_ERROR ERROR_NO_MORE_MATCHES;
    public static WIN32_ERROR ERROR_RANGE_LIST_CONFLICT;
    public static WIN32_ERROR ERROR_SERVER_SID_MISMATCH;
    public static WIN32_ERROR ERROR_CANT_ENABLE_DENY_ONLY;
    public static WIN32_ERROR ERROR_FLOAT_MULTIPLE_FAULTS;
    public static WIN32_ERROR ERROR_FLOAT_MULTIPLE_TRAPS;
    public static WIN32_ERROR ERROR_NOINTERFACE;
    public static WIN32_ERROR ERROR_DRIVER_FAILED_SLEEP;
    public static WIN32_ERROR ERROR_CORRUPT_SYSTEM_FILE;
    public static WIN32_ERROR ERROR_COMMITMENT_MINIMUM;
    public static WIN32_ERROR ERROR_PNP_RESTART_ENUMERATION;
    public static WIN32_ERROR ERROR_SYSTEM_IMAGE_BAD_SIGNATURE;
    public static WIN32_ERROR ERROR_PNP_REBOOT_REQUIRED;
    public static WIN32_ERROR ERROR_INSUFFICIENT_POWER;
    public static WIN32_ERROR ERROR_MULTIPLE_FAULT_VIOLATION;
    public static WIN32_ERROR ERROR_SYSTEM_SHUTDOWN;
    public static WIN32_ERROR ERROR_PORT_NOT_SET;
    public static WIN32_ERROR ERROR_DS_VERSION_CHECK_FAILURE;
    public static WIN32_ERROR ERROR_RANGE_NOT_FOUND;
    public static WIN32_ERROR ERROR_NOT_SAFE_MODE_DRIVER;
    public static WIN32_ERROR ERROR_FAILED_DRIVER_ENTRY;
    public static WIN32_ERROR ERROR_DEVICE_ENUMERATION_ERROR;
    public static WIN32_ERROR ERROR_MOUNT_POINT_NOT_RESOLVED;
    public static WIN32_ERROR ERROR_INVALID_DEVICE_OBJECT_PARAMETER;
    public static WIN32_ERROR ERROR_MCA_OCCURED;
    public static WIN32_ERROR ERROR_DRIVER_DATABASE_ERROR;
    public static WIN32_ERROR ERROR_SYSTEM_HIVE_TOO_LARGE;
    public static WIN32_ERROR ERROR_DRIVER_FAILED_PRIOR_UNLOAD;
    public static WIN32_ERROR ERROR_VOLSNAP_PREPARE_HIBERNATE;
    public static WIN32_ERROR ERROR_HIBERNATION_FAILURE;
    public static WIN32_ERROR ERROR_PWD_TOO_LONG;
    public static WIN32_ERROR ERROR_FILE_SYSTEM_LIMITATION;
    public static WIN32_ERROR ERROR_ASSERTION_FAILURE;
    public static WIN32_ERROR ERROR_ACPI_ERROR;
    public static WIN32_ERROR ERROR_WOW_ASSERTION;
    public static WIN32_ERROR ERROR_PNP_BAD_MPS_TABLE;
    public static WIN32_ERROR ERROR_PNP_TRANSLATION_FAILED;
    public static WIN32_ERROR ERROR_PNP_IRQ_TRANSLATION_FAILED;
    public static WIN32_ERROR ERROR_PNP_INVALID_ID;
    public static WIN32_ERROR ERROR_WAKE_SYSTEM_DEBUGGER;
    public static WIN32_ERROR ERROR_HANDLES_CLOSED;
    public static WIN32_ERROR ERROR_EXTRANEOUS_INFORMATION;
    public static WIN32_ERROR ERROR_RXACT_COMMIT_NECESSARY;
    public static WIN32_ERROR ERROR_MEDIA_CHECK;
    public static WIN32_ERROR ERROR_GUID_SUBSTITUTION_MADE;
    public static WIN32_ERROR ERROR_STOPPED_ON_SYMLINK;
    public static WIN32_ERROR ERROR_LONGJUMP;
    public static WIN32_ERROR ERROR_PLUGPLAY_QUERY_VETOED;
    public static WIN32_ERROR ERROR_UNWIND_CONSOLIDATE;
    public static WIN32_ERROR ERROR_REGISTRY_HIVE_RECOVERED;
    public static WIN32_ERROR ERROR_DLL_MIGHT_BE_INSECURE;
    public static WIN32_ERROR ERROR_DLL_MIGHT_BE_INCOMPATIBLE;
    public static WIN32_ERROR ERROR_DBG_EXCEPTION_NOT_HANDLED;
    public static WIN32_ERROR ERROR_DBG_REPLY_LATER;
    public static WIN32_ERROR ERROR_DBG_UNABLE_TO_PROVIDE_HANDLE;
    public static WIN32_ERROR ERROR_DBG_TERMINATE_THREAD;
    public static WIN32_ERROR ERROR_DBG_TERMINATE_PROCESS;
    public static WIN32_ERROR ERROR_DBG_CONTROL_C;
    public static WIN32_ERROR ERROR_DBG_PRINTEXCEPTION_C;
    public static WIN32_ERROR ERROR_DBG_RIPEXCEPTION;
    public static WIN32_ERROR ERROR_DBG_CONTROL_BREAK;
    public static WIN32_ERROR ERROR_DBG_COMMAND_EXCEPTION;
    public static WIN32_ERROR ERROR_OBJECT_NAME_EXISTS;
    public static WIN32_ERROR ERROR_THREAD_WAS_SUSPENDED;
    public static WIN32_ERROR ERROR_IMAGE_NOT_AT_BASE;
    public static WIN32_ERROR ERROR_RXACT_STATE_CREATED;
    public static WIN32_ERROR ERROR_SEGMENT_NOTIFICATION;
    public static WIN32_ERROR ERROR_BAD_CURRENT_DIRECTORY;
    public static WIN32_ERROR ERROR_FT_READ_RECOVERY_FROM_BACKUP;
    public static WIN32_ERROR ERROR_FT_WRITE_RECOVERY;
    public static WIN32_ERROR ERROR_IMAGE_MACHINE_TYPE_MISMATCH;
    public static WIN32_ERROR ERROR_RECEIVE_PARTIAL;
    public static WIN32_ERROR ERROR_RECEIVE_EXPEDITED;
    public static WIN32_ERROR ERROR_RECEIVE_PARTIAL_EXPEDITED;
    public static WIN32_ERROR ERROR_EVENT_DONE;
    public static WIN32_ERROR ERROR_EVENT_PENDING;
    public static WIN32_ERROR ERROR_CHECKING_FILE_SYSTEM;
    public static WIN32_ERROR ERROR_FATAL_APP_EXIT;
    public static WIN32_ERROR ERROR_PREDEFINED_HANDLE;
    public static WIN32_ERROR ERROR_WAS_UNLOCKED;
    public static WIN32_ERROR ERROR_SERVICE_NOTIFICATION;
    public static WIN32_ERROR ERROR_WAS_LOCKED;
    public static WIN32_ERROR ERROR_LOG_HARD_ERROR;
    public static WIN32_ERROR ERROR_ALREADY_WIN32;
    public static WIN32_ERROR ERROR_IMAGE_MACHINE_TYPE_MISMATCH_EXE;
    public static WIN32_ERROR ERROR_NO_YIELD_PERFORMED;
    public static WIN32_ERROR ERROR_TIMER_RESUME_IGNORED;
    public static WIN32_ERROR ERROR_ARBITRATION_UNHANDLED;
    public static WIN32_ERROR ERROR_CARDBUS_NOT_SUPPORTED;
    public static WIN32_ERROR ERROR_MP_PROCESSOR_MISMATCH;
    public static WIN32_ERROR ERROR_HIBERNATED;
    public static WIN32_ERROR ERROR_RESUME_HIBERNATION;
    public static WIN32_ERROR ERROR_FIRMWARE_UPDATED;
    public static WIN32_ERROR ERROR_DRIVERS_LEAKING_LOCKED_PAGES;
    public static WIN32_ERROR ERROR_WAKE_SYSTEM;
    public static WIN32_ERROR ERROR_WAIT_1;
    public static WIN32_ERROR ERROR_WAIT_2;
    public static WIN32_ERROR ERROR_WAIT_3;
    public static WIN32_ERROR ERROR_WAIT_63;
    public static WIN32_ERROR ERROR_ABANDONED_WAIT_0;
    public static WIN32_ERROR ERROR_ABANDONED_WAIT_63;
    public static WIN32_ERROR ERROR_USER_APC;
    public static WIN32_ERROR ERROR_KERNEL_APC;
    public static WIN32_ERROR ERROR_ALERTED;
    public static WIN32_ERROR ERROR_ELEVATION_REQUIRED;
    public static WIN32_ERROR ERROR_REPARSE;
    public static WIN32_ERROR ERROR_OPLOCK_BREAK_IN_PROGRESS;
    public static WIN32_ERROR ERROR_VOLUME_MOUNTED;
    public static WIN32_ERROR ERROR_RXACT_COMMITTED;
    public static WIN32_ERROR ERROR_NOTIFY_CLEANUP;
    public static WIN32_ERROR ERROR_PRIMARY_TRANSPORT_CONNECT_FAILED;
    public static WIN32_ERROR ERROR_PAGE_FAULT_TRANSITION;
    public static WIN32_ERROR ERROR_PAGE_FAULT_DEMAND_ZERO;
    public static WIN32_ERROR ERROR_PAGE_FAULT_COPY_ON_WRITE;
    public static WIN32_ERROR ERROR_PAGE_FAULT_GUARD_PAGE;
    public static WIN32_ERROR ERROR_PAGE_FAULT_PAGING_FILE;
    public static WIN32_ERROR ERROR_CACHE_PAGE_LOCKED;
    public static WIN32_ERROR ERROR_CRASH_DUMP;
    public static WIN32_ERROR ERROR_BUFFER_ALL_ZEROS;
    public static WIN32_ERROR ERROR_REPARSE_OBJECT;
    public static WIN32_ERROR ERROR_RESOURCE_REQUIREMENTS_CHANGED;
    public static WIN32_ERROR ERROR_TRANSLATION_COMPLETE;
    public static WIN32_ERROR ERROR_NOTHING_TO_TERMINATE;
    public static WIN32_ERROR ERROR_PROCESS_NOT_IN_JOB;
    public static WIN32_ERROR ERROR_PROCESS_IN_JOB;
    public static WIN32_ERROR ERROR_VOLSNAP_HIBERNATE_READY;
    public static WIN32_ERROR ERROR_FSFILTER_OP_COMPLETED_SUCCESSFULLY;
    public static WIN32_ERROR ERROR_INTERRUPT_VECTOR_ALREADY_CONNECTED;
    public static WIN32_ERROR ERROR_INTERRUPT_STILL_CONNECTED;
    public static WIN32_ERROR ERROR_WAIT_FOR_OPLOCK;
    public static WIN32_ERROR ERROR_DBG_EXCEPTION_HANDLED;
    public static WIN32_ERROR ERROR_DBG_CONTINUE;
    public static WIN32_ERROR ERROR_CALLBACK_POP_STACK;
    public static WIN32_ERROR ERROR_COMPRESSION_DISABLED;
    public static WIN32_ERROR ERROR_CANTFETCHBACKWARDS;
    public static WIN32_ERROR ERROR_CANTSCROLLBACKWARDS;
    public static WIN32_ERROR ERROR_ROWSNOTRELEASED;
    public static WIN32_ERROR ERROR_BAD_ACCESSOR_FLAGS;
    public static WIN32_ERROR ERROR_ERRORS_ENCOUNTERED;
    public static WIN32_ERROR ERROR_NOT_CAPABLE;
    public static WIN32_ERROR ERROR_REQUEST_OUT_OF_SEQUENCE;
    public static WIN32_ERROR ERROR_VERSION_PARSE_ERROR;
    public static WIN32_ERROR ERROR_BADSTARTPOSITION;
    public static WIN32_ERROR ERROR_MEMORY_HARDWARE;
    public static WIN32_ERROR ERROR_DISK_REPAIR_DISABLED;
    public static WIN32_ERROR ERROR_INSUFFICIENT_RESOURCE_FOR_SPECIFIED_SHARED_SECTION_SIZE;
    public static WIN32_ERROR ERROR_SYSTEM_POWERSTATE_TRANSITION;
    public static WIN32_ERROR ERROR_SYSTEM_POWERSTATE_COMPLEX_TRANSITION;
    public static WIN32_ERROR ERROR_MCA_EXCEPTION;
    public static WIN32_ERROR ERROR_ACCESS_AUDIT_BY_POLICY;
    public static WIN32_ERROR ERROR_ACCESS_DISABLED_NO_SAFER_UI_BY_POLICY;
    public static WIN32_ERROR ERROR_ABANDON_HIBERFILE;
    public static WIN32_ERROR ERROR_LOST_WRITEBEHIND_DATA_NETWORK_DISCONNECTED;
    public static WIN32_ERROR ERROR_LOST_WRITEBEHIND_DATA_NETWORK_SERVER_ERROR;
    public static WIN32_ERROR ERROR_LOST_WRITEBEHIND_DATA_LOCAL_DISK_ERROR;
    public static WIN32_ERROR ERROR_BAD_MCFG_TABLE;
    public static WIN32_ERROR ERROR_DISK_REPAIR_REDIRECTED;
    public static WIN32_ERROR ERROR_DISK_REPAIR_UNSUCCESSFUL;
    public static WIN32_ERROR ERROR_CORRUPT_LOG_OVERFULL;
    public static WIN32_ERROR ERROR_CORRUPT_LOG_CORRUPTED;
    public static WIN32_ERROR ERROR_CORRUPT_LOG_UNAVAILABLE;
    public static WIN32_ERROR ERROR_CORRUPT_LOG_DELETED_FULL;
    public static WIN32_ERROR ERROR_CORRUPT_LOG_CLEARED;
    public static WIN32_ERROR ERROR_ORPHAN_NAME_EXHAUSTED;
    public static WIN32_ERROR ERROR_OPLOCK_SWITCHED_TO_NEW_HANDLE;
    public static WIN32_ERROR ERROR_CANNOT_GRANT_REQUESTED_OPLOCK;
    public static WIN32_ERROR ERROR_CANNOT_BREAK_OPLOCK;
    public static WIN32_ERROR ERROR_OPLOCK_HANDLE_CLOSED;
    public static WIN32_ERROR ERROR_NO_ACE_CONDITION;
    public static WIN32_ERROR ERROR_INVALID_ACE_CONDITION;
    public static WIN32_ERROR ERROR_FILE_HANDLE_REVOKED;
    public static WIN32_ERROR ERROR_IMAGE_AT_DIFFERENT_BASE;
    public static WIN32_ERROR ERROR_ENCRYPTED_IO_NOT_POSSIBLE;
    public static WIN32_ERROR ERROR_FILE_METADATA_OPTIMIZATION_IN_PROGRESS;
    public static WIN32_ERROR ERROR_QUOTA_ACTIVITY;
    public static WIN32_ERROR ERROR_HANDLE_REVOKED;
    public static WIN32_ERROR ERROR_CALLBACK_INVOKE_INLINE;
    public static WIN32_ERROR ERROR_CPU_SET_INVALID;
    public static WIN32_ERROR ERROR_ENCLAVE_NOT_TERMINATED;
    public static WIN32_ERROR ERROR_ENCLAVE_VIOLATION;
    public static WIN32_ERROR ERROR_SERVER_TRANSPORT_CONFLICT;
    public static WIN32_ERROR ERROR_CERTIFICATE_VALIDATION_PREFERENCE_CONFLICT;
    public static WIN32_ERROR ERROR_FT_READ_FROM_COPY_FAILURE;
    public static WIN32_ERROR ERROR_SECTION_DIRECT_MAP_ONLY;
    public static WIN32_ERROR ERROR_EA_ACCESS_DENIED;
    public static WIN32_ERROR ERROR_OPERATION_ABORTED;
    public static WIN32_ERROR ERROR_IO_INCOMPLETE;
    public static WIN32_ERROR ERROR_IO_PENDING;
    public static WIN32_ERROR ERROR_NOACCESS;
    public static WIN32_ERROR ERROR_SWAPERROR;
    public static WIN32_ERROR ERROR_STACK_OVERFLOW;
    public static WIN32_ERROR ERROR_INVALID_MESSAGE;
    public static WIN32_ERROR ERROR_CAN_NOT_COMPLETE;
    public static WIN32_ERROR ERROR_INVALID_FLAGS;
    public static WIN32_ERROR ERROR_UNRECOGNIZED_VOLUME;
    public static WIN32_ERROR ERROR_FILE_INVALID;
    public static WIN32_ERROR ERROR_FULLSCREEN_MODE;
    public static WIN32_ERROR ERROR_NO_TOKEN;
    public static WIN32_ERROR ERROR_BADDB;
    public static WIN32_ERROR ERROR_BADKEY;
    public static WIN32_ERROR ERROR_CANTOPEN;
    public static WIN32_ERROR ERROR_CANTREAD;
    public static WIN32_ERROR ERROR_CANTWRITE;
    public static WIN32_ERROR ERROR_REGISTRY_RECOVERED;
    public static WIN32_ERROR ERROR_REGISTRY_CORRUPT;
    public static WIN32_ERROR ERROR_REGISTRY_IO_FAILED;
    public static WIN32_ERROR ERROR_NOT_REGISTRY_FILE;
    public static WIN32_ERROR ERROR_KEY_DELETED;
    public static WIN32_ERROR ERROR_NO_LOG_SPACE;
    public static WIN32_ERROR ERROR_KEY_HAS_CHILDREN;
    public static WIN32_ERROR ERROR_CHILD_MUST_BE_VOLATILE;
    public static WIN32_ERROR ERROR_NOTIFY_ENUM_DIR;
    public static WIN32_ERROR ERROR_DEPENDENT_SERVICES_RUNNING;
    public static WIN32_ERROR ERROR_INVALID_SERVICE_CONTROL;
    public static WIN32_ERROR ERROR_SERVICE_REQUEST_TIMEOUT;
    public static WIN32_ERROR ERROR_SERVICE_NO_THREAD;
    public static WIN32_ERROR ERROR_SERVICE_DATABASE_LOCKED;
    public static WIN32_ERROR ERROR_SERVICE_ALREADY_RUNNING;
    public static WIN32_ERROR ERROR_INVALID_SERVICE_ACCOUNT;
    public static WIN32_ERROR ERROR_SERVICE_DISABLED;
    public static WIN32_ERROR ERROR_CIRCULAR_DEPENDENCY;
    public static WIN32_ERROR ERROR_SERVICE_DOES_NOT_EXIST;
    public static WIN32_ERROR ERROR_SERVICE_CANNOT_ACCEPT_CTRL;
    public static WIN32_ERROR ERROR_SERVICE_NOT_ACTIVE;
    public static WIN32_ERROR ERROR_FAILED_SERVICE_CONTROLLER_CONNECT;
    public static WIN32_ERROR ERROR_EXCEPTION_IN_SERVICE;
    public static WIN32_ERROR ERROR_DATABASE_DOES_NOT_EXIST;
    public static WIN32_ERROR ERROR_SERVICE_SPECIFIC_ERROR;
    public static WIN32_ERROR ERROR_PROCESS_ABORTED;
    public static WIN32_ERROR ERROR_SERVICE_DEPENDENCY_FAIL;
    public static WIN32_ERROR ERROR_SERVICE_LOGON_FAILED;
    public static WIN32_ERROR ERROR_SERVICE_START_HANG;
    public static WIN32_ERROR ERROR_INVALID_SERVICE_LOCK;
    public static WIN32_ERROR ERROR_SERVICE_MARKED_FOR_DELETE;
    public static WIN32_ERROR ERROR_SERVICE_EXISTS;
    public static WIN32_ERROR ERROR_ALREADY_RUNNING_LKG;
    public static WIN32_ERROR ERROR_SERVICE_DEPENDENCY_DELETED;
    public static WIN32_ERROR ERROR_BOOT_ALREADY_ACCEPTED;
    public static WIN32_ERROR ERROR_SERVICE_NEVER_STARTED;
    public static WIN32_ERROR ERROR_DUPLICATE_SERVICE_NAME;
    public static WIN32_ERROR ERROR_DIFFERENT_SERVICE_ACCOUNT;
    public static WIN32_ERROR ERROR_CANNOT_DETECT_DRIVER_FAILURE;
    public static WIN32_ERROR ERROR_CANNOT_DETECT_PROCESS_ABORT;
    public static WIN32_ERROR ERROR_NO_RECOVERY_PROGRAM;
    public static WIN32_ERROR ERROR_SERVICE_NOT_IN_EXE;
    public static WIN32_ERROR ERROR_NOT_SAFEBOOT_SERVICE;
    public static WIN32_ERROR ERROR_END_OF_MEDIA;
    public static WIN32_ERROR ERROR_FILEMARK_DETECTED;
    public static WIN32_ERROR ERROR_BEGINNING_OF_MEDIA;
    public static WIN32_ERROR ERROR_SETMARK_DETECTED;
    public static WIN32_ERROR ERROR_NO_DATA_DETECTED;
    public static WIN32_ERROR ERROR_PARTITION_FAILURE;
    public static WIN32_ERROR ERROR_INVALID_BLOCK_LENGTH;
    public static WIN32_ERROR ERROR_DEVICE_NOT_PARTITIONED;
    public static WIN32_ERROR ERROR_UNABLE_TO_LOCK_MEDIA;
    public static WIN32_ERROR ERROR_UNABLE_TO_UNLOAD_MEDIA;
    public static WIN32_ERROR ERROR_MEDIA_CHANGED;
    public static WIN32_ERROR ERROR_BUS_RESET;
    public static WIN32_ERROR ERROR_NO_MEDIA_IN_DRIVE;
    public static WIN32_ERROR ERROR_NO_UNICODE_TRANSLATION;
    public static WIN32_ERROR ERROR_DLL_INIT_FAILED;
    public static WIN32_ERROR ERROR_SHUTDOWN_IN_PROGRESS;
    public static WIN32_ERROR ERROR_NO_SHUTDOWN_IN_PROGRESS;
    public static WIN32_ERROR ERROR_IO_DEVICE;
    public static WIN32_ERROR ERROR_SERIAL_NO_DEVICE;
    public static WIN32_ERROR ERROR_IRQ_BUSY;
    public static WIN32_ERROR ERROR_MORE_WRITES;
    public static WIN32_ERROR ERROR_COUNTER_TIMEOUT;
    public static WIN32_ERROR ERROR_FLOPPY_ID_MARK_NOT_FOUND;
    public static WIN32_ERROR ERROR_FLOPPY_WRONG_CYLINDER;
    public static WIN32_ERROR ERROR_FLOPPY_UNKNOWN_ERROR;
    public static WIN32_ERROR ERROR_FLOPPY_BAD_REGISTERS;
    public static WIN32_ERROR ERROR_DISK_RECALIBRATE_FAILED;
    public static WIN32_ERROR ERROR_DISK_OPERATION_FAILED;
    public static WIN32_ERROR ERROR_DISK_RESET_FAILED;
    public static WIN32_ERROR ERROR_EOM_OVERFLOW;
    public static WIN32_ERROR ERROR_NOT_ENOUGH_SERVER_MEMORY;
    public static WIN32_ERROR ERROR_POSSIBLE_DEADLOCK;
    public static WIN32_ERROR ERROR_MAPPED_ALIGNMENT;
    public static WIN32_ERROR ERROR_SET_POWER_STATE_VETOED;
    public static WIN32_ERROR ERROR_SET_POWER_STATE_FAILED;
    public static WIN32_ERROR ERROR_TOO_MANY_LINKS;
    public static WIN32_ERROR ERROR_OLD_WIN_VERSION;
    public static WIN32_ERROR ERROR_APP_WRONG_OS;
    public static WIN32_ERROR ERROR_SINGLE_INSTANCE_APP;
    public static WIN32_ERROR ERROR_RMODE_APP;
    public static WIN32_ERROR ERROR_INVALID_DLL;
    public static WIN32_ERROR ERROR_NO_ASSOCIATION;
    public static WIN32_ERROR ERROR_DDE_FAIL;
    public static WIN32_ERROR ERROR_DLL_NOT_FOUND;
    public static WIN32_ERROR ERROR_NO_MORE_USER_HANDLES;
    public static WIN32_ERROR ERROR_MESSAGE_SYNC_ONLY;
    public static WIN32_ERROR ERROR_SOURCE_ELEMENT_EMPTY;
    public static WIN32_ERROR ERROR_DESTINATION_ELEMENT_FULL;
    public static WIN32_ERROR ERROR_ILLEGAL_ELEMENT_ADDRESS;
    public static WIN32_ERROR ERROR_MAGAZINE_NOT_PRESENT;
    public static WIN32_ERROR ERROR_DEVICE_REINITIALIZATION_NEEDED;
    public static WIN32_ERROR ERROR_DEVICE_REQUIRES_CLEANING;
    public static WIN32_ERROR ERROR_DEVICE_DOOR_OPEN;
    public static WIN32_ERROR ERROR_DEVICE_NOT_CONNECTED;
    public static WIN32_ERROR ERROR_NOT_FOUND;
    public static WIN32_ERROR ERROR_NO_MATCH;
    public static WIN32_ERROR ERROR_SET_NOT_FOUND;
    public static WIN32_ERROR ERROR_POINT_NOT_FOUND;
    public static WIN32_ERROR ERROR_NO_TRACKING_SERVICE;
    public static WIN32_ERROR ERROR_NO_VOLUME_ID;
    public static WIN32_ERROR ERROR_UNABLE_TO_REMOVE_REPLACED;
    public static WIN32_ERROR ERROR_UNABLE_TO_MOVE_REPLACEMENT;
    public static WIN32_ERROR ERROR_UNABLE_TO_MOVE_REPLACEMENT_2;
    public static WIN32_ERROR ERROR_JOURNAL_DELETE_IN_PROGRESS;
    public static WIN32_ERROR ERROR_JOURNAL_NOT_ACTIVE;
    public static WIN32_ERROR ERROR_POTENTIAL_FILE_FOUND;
    public static WIN32_ERROR ERROR_JOURNAL_ENTRY_DELETED;
    public static WIN32_ERROR ERROR_PARTITION_TERMINATING;
    public static WIN32_ERROR ERROR_SHUTDOWN_IS_SCHEDULED;
    public static WIN32_ERROR ERROR_SHUTDOWN_USERS_LOGGED_ON;
    public static WIN32_ERROR ERROR_SHUTDOWN_DISKS_NOT_IN_MAINTENANCE_MODE;
    public static WIN32_ERROR ERROR_BAD_DEVICE;
    public static WIN32_ERROR ERROR_CONNECTION_UNAVAIL;
    public static WIN32_ERROR ERROR_DEVICE_ALREADY_REMEMBERED;
    public static WIN32_ERROR ERROR_NO_NET_OR_BAD_PATH;
    public static WIN32_ERROR ERROR_BAD_PROVIDER;
    public static WIN32_ERROR ERROR_CANNOT_OPEN_PROFILE;
    public static WIN32_ERROR ERROR_BAD_PROFILE;
    public static WIN32_ERROR ERROR_NOT_CONTAINER;
    public static WIN32_ERROR ERROR_EXTENDED_ERROR;
    public static WIN32_ERROR ERROR_INVALID_GROUPNAME;
    public static WIN32_ERROR ERROR_INVALID_COMPUTERNAME;
    public static WIN32_ERROR ERROR_INVALID_EVENTNAME;
    public static WIN32_ERROR ERROR_INVALID_DOMAINNAME;
    public static WIN32_ERROR ERROR_INVALID_SERVICENAME;
    public static WIN32_ERROR ERROR_INVALID_NETNAME;
    public static WIN32_ERROR ERROR_INVALID_SHARENAME;
    public static WIN32_ERROR ERROR_INVALID_PASSWORDNAME;
    public static WIN32_ERROR ERROR_INVALID_MESSAGENAME;
    public static WIN32_ERROR ERROR_INVALID_MESSAGEDEST;
    public static WIN32_ERROR ERROR_SESSION_CREDENTIAL_CONFLICT;
    public static WIN32_ERROR ERROR_REMOTE_SESSION_LIMIT_EXCEEDED;
    public static WIN32_ERROR ERROR_DUP_DOMAINNAME;
    public static WIN32_ERROR ERROR_NO_NETWORK;
    public static WIN32_ERROR ERROR_CANCELLED;
    public static WIN32_ERROR ERROR_USER_MAPPED_FILE;
    public static WIN32_ERROR ERROR_CONNECTION_REFUSED;
    public static WIN32_ERROR ERROR_GRACEFUL_DISCONNECT;
    public static WIN32_ERROR ERROR_ADDRESS_ALREADY_ASSOCIATED;
    public static WIN32_ERROR ERROR_ADDRESS_NOT_ASSOCIATED;
    public static WIN32_ERROR ERROR_CONNECTION_INVALID;
    public static WIN32_ERROR ERROR_CONNECTION_ACTIVE;
    public static WIN32_ERROR ERROR_NETWORK_UNREACHABLE;
    public static WIN32_ERROR ERROR_HOST_UNREACHABLE;
    public static WIN32_ERROR ERROR_PROTOCOL_UNREACHABLE;
    public static WIN32_ERROR ERROR_PORT_UNREACHABLE;
    public static WIN32_ERROR ERROR_REQUEST_ABORTED;
    public static WIN32_ERROR ERROR_CONNECTION_ABORTED;
    public static WIN32_ERROR ERROR_RETRY;
    public static WIN32_ERROR ERROR_CONNECTION_COUNT_LIMIT;
    public static WIN32_ERROR ERROR_LOGIN_TIME_RESTRICTION;
    public static WIN32_ERROR ERROR_LOGIN_WKSTA_RESTRICTION;
    public static WIN32_ERROR ERROR_INCORRECT_ADDRESS;
    public static WIN32_ERROR ERROR_ALREADY_REGISTERED;
    public static WIN32_ERROR ERROR_SERVICE_NOT_FOUND;
    public static WIN32_ERROR ERROR_NOT_AUTHENTICATED;
    public static WIN32_ERROR ERROR_NOT_LOGGED_ON;
    public static WIN32_ERROR ERROR_CONTINUE;
    public static WIN32_ERROR ERROR_ALREADY_INITIALIZED;
    public static WIN32_ERROR ERROR_NO_MORE_DEVICES;
    public static WIN32_ERROR ERROR_NO_SUCH_SITE;
    public static WIN32_ERROR ERROR_DOMAIN_CONTROLLER_EXISTS;
    public static WIN32_ERROR ERROR_ONLY_IF_CONNECTED;
    public static WIN32_ERROR ERROR_OVERRIDE_NOCHANGES;
    public static WIN32_ERROR ERROR_BAD_USER_PROFILE;
    public static WIN32_ERROR ERROR_NOT_SUPPORTED_ON_SBS;
    public static WIN32_ERROR ERROR_SERVER_SHUTDOWN_IN_PROGRESS;
    public static WIN32_ERROR ERROR_HOST_DOWN;
    public static WIN32_ERROR ERROR_NON_ACCOUNT_SID;
    public static WIN32_ERROR ERROR_NON_DOMAIN_SID;
    public static WIN32_ERROR ERROR_APPHELP_BLOCK;
    public static WIN32_ERROR ERROR_ACCESS_DISABLED_BY_POLICY;
    public static WIN32_ERROR ERROR_REG_NAT_CONSUMPTION;
    public static WIN32_ERROR ERROR_CSCSHARE_OFFLINE;
    public static WIN32_ERROR ERROR_PKINIT_FAILURE;
    public static WIN32_ERROR ERROR_SMARTCARD_SUBSYSTEM_FAILURE;
    public static WIN32_ERROR ERROR_DOWNGRADE_DETECTED;
    public static WIN32_ERROR ERROR_MACHINE_LOCKED;
    public static WIN32_ERROR ERROR_SMB_GUEST_LOGON_BLOCKED;
    public static WIN32_ERROR ERROR_CALLBACK_SUPPLIED_INVALID_DATA;
    public static WIN32_ERROR ERROR_SYNC_FOREGROUND_REFRESH_REQUIRED;
    public static WIN32_ERROR ERROR_DRIVER_BLOCKED;
    public static WIN32_ERROR ERROR_INVALID_IMPORT_OF_NON_DLL;
    public static WIN32_ERROR ERROR_ACCESS_DISABLED_WEBBLADE;
    public static WIN32_ERROR ERROR_ACCESS_DISABLED_WEBBLADE_TAMPER;
    public static WIN32_ERROR ERROR_RECOVERY_FAILURE;
    public static WIN32_ERROR ERROR_ALREADY_FIBER;
    public static WIN32_ERROR ERROR_ALREADY_THREAD;
    public static WIN32_ERROR ERROR_STACK_BUFFER_OVERRUN;
    public static WIN32_ERROR ERROR_PARAMETER_QUOTA_EXCEEDED;
    public static WIN32_ERROR ERROR_DEBUGGER_INACTIVE;
    public static WIN32_ERROR ERROR_DELAY_LOAD_FAILED;
    public static WIN32_ERROR ERROR_VDM_DISALLOWED;
    public static WIN32_ERROR ERROR_UNIDENTIFIED_ERROR;
    public static WIN32_ERROR ERROR_INVALID_CRUNTIME_PARAMETER;
    public static WIN32_ERROR ERROR_BEYOND_VDL;
    public static WIN32_ERROR ERROR_INCOMPATIBLE_SERVICE_SID_TYPE;
    public static WIN32_ERROR ERROR_DRIVER_PROCESS_TERMINATED;
    public static WIN32_ERROR ERROR_IMPLEMENTATION_LIMIT;
    public static WIN32_ERROR ERROR_PROCESS_IS_PROTECTED;
    public static WIN32_ERROR ERROR_SERVICE_NOTIFY_CLIENT_LAGGING;
    public static WIN32_ERROR ERROR_DISK_QUOTA_EXCEEDED;
    public static WIN32_ERROR ERROR_CONTENT_BLOCKED;
    public static WIN32_ERROR ERROR_INCOMPATIBLE_SERVICE_PRIVILEGE;
    public static WIN32_ERROR ERROR_APP_HANG;
    public static WIN32_ERROR ERROR_INVALID_LABEL;
    public static WIN32_ERROR ERROR_NOT_ALL_ASSIGNED;
    public static WIN32_ERROR ERROR_SOME_NOT_MAPPED;
    public static WIN32_ERROR ERROR_NO_QUOTAS_FOR_ACCOUNT;
    public static WIN32_ERROR ERROR_LOCAL_USER_SESSION_KEY;
    public static WIN32_ERROR ERROR_NULL_LM_PASSWORD;
    public static WIN32_ERROR ERROR_UNKNOWN_REVISION;
    public static WIN32_ERROR ERROR_REVISION_MISMATCH;
    public static WIN32_ERROR ERROR_INVALID_OWNER;
    public static WIN32_ERROR ERROR_INVALID_PRIMARY_GROUP;
    public static WIN32_ERROR ERROR_NO_IMPERSONATION_TOKEN;
    public static WIN32_ERROR ERROR_CANT_DISABLE_MANDATORY;
    public static WIN32_ERROR ERROR_NO_LOGON_SERVERS;
    public static WIN32_ERROR ERROR_NO_SUCH_LOGON_SESSION;
    public static WIN32_ERROR ERROR_NO_SUCH_PRIVILEGE;
    public static WIN32_ERROR ERROR_PRIVILEGE_NOT_HELD;
    public static WIN32_ERROR ERROR_INVALID_ACCOUNT_NAME;
    public static WIN32_ERROR ERROR_USER_EXISTS;
    public static WIN32_ERROR ERROR_NO_SUCH_USER;
    public static WIN32_ERROR ERROR_GROUP_EXISTS;
    public static WIN32_ERROR ERROR_NO_SUCH_GROUP;
    public static WIN32_ERROR ERROR_MEMBER_IN_GROUP;
    public static WIN32_ERROR ERROR_MEMBER_NOT_IN_GROUP;
    public static WIN32_ERROR ERROR_LAST_ADMIN;
    public static WIN32_ERROR ERROR_WRONG_PASSWORD;
    public static WIN32_ERROR ERROR_ILL_FORMED_PASSWORD;
    public static WIN32_ERROR ERROR_PASSWORD_RESTRICTION;
    public static WIN32_ERROR ERROR_LOGON_FAILURE;
    public static WIN32_ERROR ERROR_ACCOUNT_RESTRICTION;
    public static WIN32_ERROR ERROR_INVALID_LOGON_HOURS;
    public static WIN32_ERROR ERROR_INVALID_WORKSTATION;
    public static WIN32_ERROR ERROR_PASSWORD_EXPIRED;
    public static WIN32_ERROR ERROR_ACCOUNT_DISABLED;
    public static WIN32_ERROR ERROR_NONE_MAPPED;
    public static WIN32_ERROR ERROR_TOO_MANY_LUIDS_REQUESTED;
    public static WIN32_ERROR ERROR_LUIDS_EXHAUSTED;
    public static WIN32_ERROR ERROR_INVALID_SUB_AUTHORITY;
    public static WIN32_ERROR ERROR_INVALID_ACL;
    public static WIN32_ERROR ERROR_INVALID_SID;
    public static WIN32_ERROR ERROR_INVALID_SECURITY_DESCR;
    public static WIN32_ERROR ERROR_BAD_INHERITANCE_ACL;
    public static WIN32_ERROR ERROR_SERVER_DISABLED;
    public static WIN32_ERROR ERROR_SERVER_NOT_DISABLED;
    public static WIN32_ERROR ERROR_INVALID_ID_AUTHORITY;
    public static WIN32_ERROR ERROR_ALLOTTED_SPACE_EXCEEDED;
    public static WIN32_ERROR ERROR_INVALID_GROUP_ATTRIBUTES;
    public static WIN32_ERROR ERROR_BAD_IMPERSONATION_LEVEL;
    public static WIN32_ERROR ERROR_CANT_OPEN_ANONYMOUS;
    public static WIN32_ERROR ERROR_BAD_VALIDATION_CLASS;
    public static WIN32_ERROR ERROR_BAD_TOKEN_TYPE;
    public static WIN32_ERROR ERROR_NO_SECURITY_ON_OBJECT;
    public static WIN32_ERROR ERROR_CANT_ACCESS_DOMAIN_INFO;
    public static WIN32_ERROR ERROR_INVALID_SERVER_STATE;
    public static WIN32_ERROR ERROR_INVALID_DOMAIN_STATE;
    public static WIN32_ERROR ERROR_INVALID_DOMAIN_ROLE;
    public static WIN32_ERROR ERROR_NO_SUCH_DOMAIN;
    public static WIN32_ERROR ERROR_DOMAIN_EXISTS;
    public static WIN32_ERROR ERROR_DOMAIN_LIMIT_EXCEEDED;
    public static WIN32_ERROR ERROR_INTERNAL_DB_CORRUPTION;
    public static WIN32_ERROR ERROR_INTERNAL_ERROR;
    public static WIN32_ERROR ERROR_GENERIC_NOT_MAPPED;
    public static WIN32_ERROR ERROR_BAD_DESCRIPTOR_FORMAT;
    public static WIN32_ERROR ERROR_NOT_LOGON_PROCESS;
    public static WIN32_ERROR ERROR_LOGON_SESSION_EXISTS;
    public static WIN32_ERROR ERROR_NO_SUCH_PACKAGE;
    public static WIN32_ERROR ERROR_BAD_LOGON_SESSION_STATE;
    public static WIN32_ERROR ERROR_LOGON_SESSION_COLLISION;
    public static WIN32_ERROR ERROR_INVALID_LOGON_TYPE;
    public static WIN32_ERROR ERROR_CANNOT_IMPERSONATE;
    public static WIN32_ERROR ERROR_RXACT_INVALID_STATE;
    public static WIN32_ERROR ERROR_RXACT_COMMIT_FAILURE;
    public static WIN32_ERROR ERROR_SPECIAL_ACCOUNT;
    public static WIN32_ERROR ERROR_SPECIAL_GROUP;
    public static WIN32_ERROR ERROR_SPECIAL_USER;
    public static WIN32_ERROR ERROR_MEMBERS_PRIMARY_GROUP;
    public static WIN32_ERROR ERROR_TOKEN_ALREADY_IN_USE;
    public static WIN32_ERROR ERROR_NO_SUCH_ALIAS;
    public static WIN32_ERROR ERROR_MEMBER_NOT_IN_ALIAS;
    public static WIN32_ERROR ERROR_MEMBER_IN_ALIAS;
    public static WIN32_ERROR ERROR_ALIAS_EXISTS;
    public static WIN32_ERROR ERROR_LOGON_NOT_GRANTED;
    public static WIN32_ERROR ERROR_TOO_MANY_SECRETS;
    public static WIN32_ERROR ERROR_SECRET_TOO_LONG;
    public static WIN32_ERROR ERROR_INTERNAL_DB_ERROR;
    public static WIN32_ERROR ERROR_TOO_MANY_CONTEXT_IDS;
    public static WIN32_ERROR ERROR_LOGON_TYPE_NOT_GRANTED;
    public static WIN32_ERROR ERROR_NT_CROSS_ENCRYPTION_REQUIRED;
    public static WIN32_ERROR ERROR_NO_SUCH_MEMBER;
    public static WIN32_ERROR ERROR_INVALID_MEMBER;
    public static WIN32_ERROR ERROR_TOO_MANY_SIDS;
    public static WIN32_ERROR ERROR_LM_CROSS_ENCRYPTION_REQUIRED;
    public static WIN32_ERROR ERROR_NO_INHERITANCE;
    public static WIN32_ERROR ERROR_FILE_CORRUPT;
    public static WIN32_ERROR ERROR_DISK_CORRUPT;
    public static WIN32_ERROR ERROR_NO_USER_SESSION_KEY;
    public static WIN32_ERROR ERROR_LICENSE_QUOTA_EXCEEDED;
    public static WIN32_ERROR ERROR_WRONG_TARGET_NAME;
    public static WIN32_ERROR ERROR_MUTUAL_AUTH_FAILED;
    public static WIN32_ERROR ERROR_TIME_SKEW;
    public static WIN32_ERROR ERROR_CURRENT_DOMAIN_NOT_ALLOWED;
    public static WIN32_ERROR ERROR_INVALID_WINDOW_HANDLE;
    public static WIN32_ERROR ERROR_INVALID_MENU_HANDLE;
    public static WIN32_ERROR ERROR_INVALID_CURSOR_HANDLE;
    public static WIN32_ERROR ERROR_INVALID_ACCEL_HANDLE;
    public static WIN32_ERROR ERROR_INVALID_HOOK_HANDLE;
    public static WIN32_ERROR ERROR_INVALID_DWP_HANDLE;
    public static WIN32_ERROR ERROR_TLW_WITH_WSCHILD;
    public static WIN32_ERROR ERROR_CANNOT_FIND_WND_CLASS;
    public static WIN32_ERROR ERROR_WINDOW_OF_OTHER_THREAD;
    public static WIN32_ERROR ERROR_HOTKEY_ALREADY_REGISTERED;
    public static WIN32_ERROR ERROR_CLASS_ALREADY_EXISTS;
    public static WIN32_ERROR ERROR_CLASS_DOES_NOT_EXIST;
    public static WIN32_ERROR ERROR_CLASS_HAS_WINDOWS;
    public static WIN32_ERROR ERROR_INVALID_INDEX;
    public static WIN32_ERROR ERROR_INVALID_ICON_HANDLE;
    public static WIN32_ERROR ERROR_PRIVATE_DIALOG_INDEX;
    public static WIN32_ERROR ERROR_LISTBOX_ID_NOT_FOUND;
    public static WIN32_ERROR ERROR_NO_WILDCARD_CHARACTERS;
    public static WIN32_ERROR ERROR_CLIPBOARD_NOT_OPEN;
    public static WIN32_ERROR ERROR_HOTKEY_NOT_REGISTERED;
    public static WIN32_ERROR ERROR_WINDOW_NOT_DIALOG;
    public static WIN32_ERROR ERROR_CONTROL_ID_NOT_FOUND;
    public static WIN32_ERROR ERROR_INVALID_COMBOBOX_MESSAGE;
    public static WIN32_ERROR ERROR_WINDOW_NOT_COMBOBOX;
    public static WIN32_ERROR ERROR_INVALID_EDIT_HEIGHT;
    public static WIN32_ERROR ERROR_DC_NOT_FOUND;
    public static WIN32_ERROR ERROR_INVALID_HOOK_FILTER;
    public static WIN32_ERROR ERROR_INVALID_FILTER_PROC;
    public static WIN32_ERROR ERROR_HOOK_NEEDS_HMOD;
    public static WIN32_ERROR ERROR_GLOBAL_ONLY_HOOK;
    public static WIN32_ERROR ERROR_JOURNAL_HOOK_SET;
    public static WIN32_ERROR ERROR_HOOK_NOT_INSTALLED;
    public static WIN32_ERROR ERROR_INVALID_LB_MESSAGE;
    public static WIN32_ERROR ERROR_SETCOUNT_ON_BAD_LB;
    public static WIN32_ERROR ERROR_LB_WITHOUT_TABSTOPS;
    public static WIN32_ERROR ERROR_DESTROY_OBJECT_OF_OTHER_THREAD;
    public static WIN32_ERROR ERROR_CHILD_WINDOW_MENU;
    public static WIN32_ERROR ERROR_NO_SYSTEM_MENU;
    public static WIN32_ERROR ERROR_INVALID_MSGBOX_STYLE;
    public static WIN32_ERROR ERROR_INVALID_SPI_VALUE;
    public static WIN32_ERROR ERROR_SCREEN_ALREADY_LOCKED;
    public static WIN32_ERROR ERROR_HWNDS_HAVE_DIFF_PARENT;
    public static WIN32_ERROR ERROR_NOT_CHILD_WINDOW;
    public static WIN32_ERROR ERROR_INVALID_GW_COMMAND;
    public static WIN32_ERROR ERROR_INVALID_THREAD_ID;
    public static WIN32_ERROR ERROR_NON_MDICHILD_WINDOW;
    public static WIN32_ERROR ERROR_POPUP_ALREADY_ACTIVE;
    public static WIN32_ERROR ERROR_NO_SCROLLBARS;
    public static WIN32_ERROR ERROR_INVALID_SCROLLBAR_RANGE;
    public static WIN32_ERROR ERROR_INVALID_SHOWWIN_COMMAND;
    public static WIN32_ERROR ERROR_NO_SYSTEM_RESOURCES;
    public static WIN32_ERROR ERROR_NONPAGED_SYSTEM_RESOURCES;
    public static WIN32_ERROR ERROR_PAGED_SYSTEM_RESOURCES;
    public static WIN32_ERROR ERROR_WORKING_SET_QUOTA;
    public static WIN32_ERROR ERROR_PAGEFILE_QUOTA;
    public static WIN32_ERROR ERROR_COMMITMENT_LIMIT;
    public static WIN32_ERROR ERROR_MENU_ITEM_NOT_FOUND;
    public static WIN32_ERROR ERROR_INVALID_KEYBOARD_HANDLE;
    public static WIN32_ERROR ERROR_HOOK_TYPE_NOT_ALLOWED;
    public static WIN32_ERROR ERROR_REQUIRES_INTERACTIVE_WINDOWSTATION;
    public static WIN32_ERROR ERROR_TIMEOUT;
    public static WIN32_ERROR ERROR_INVALID_MONITOR_HANDLE;
    public static WIN32_ERROR ERROR_INCORRECT_SIZE;
    public static WIN32_ERROR ERROR_SYMLINK_CLASS_DISABLED;
    public static WIN32_ERROR ERROR_SYMLINK_NOT_SUPPORTED;
    public static WIN32_ERROR ERROR_XML_PARSE_ERROR;
    public static WIN32_ERROR ERROR_XMLDSIG_ERROR;
    public static WIN32_ERROR ERROR_RESTART_APPLICATION;
    public static WIN32_ERROR ERROR_WRONG_COMPARTMENT;
    public static WIN32_ERROR ERROR_AUTHIP_FAILURE;
    public static WIN32_ERROR ERROR_NO_NVRAM_RESOURCES;
    public static WIN32_ERROR ERROR_NOT_GUI_PROCESS;
    public static WIN32_ERROR ERROR_EVENTLOG_FILE_CORRUPT;
    public static WIN32_ERROR ERROR_EVENTLOG_CANT_START;
    public static WIN32_ERROR ERROR_LOG_FILE_FULL;
    public static WIN32_ERROR ERROR_EVENTLOG_FILE_CHANGED;
    public static WIN32_ERROR ERROR_CONTAINER_ASSIGNED;
    public static WIN32_ERROR ERROR_JOB_NO_CONTAINER;
    public static WIN32_ERROR ERROR_INVALID_TASK_NAME;
    public static WIN32_ERROR ERROR_INVALID_TASK_INDEX;
    public static WIN32_ERROR ERROR_THREAD_ALREADY_IN_TASK;
    public static WIN32_ERROR ERROR_INSTALL_SERVICE_FAILURE;
    public static WIN32_ERROR ERROR_INSTALL_USEREXIT;
    public static WIN32_ERROR ERROR_INSTALL_FAILURE;
    public static WIN32_ERROR ERROR_INSTALL_SUSPEND;
    public static WIN32_ERROR ERROR_UNKNOWN_PRODUCT;
    public static WIN32_ERROR ERROR_UNKNOWN_FEATURE;
    public static WIN32_ERROR ERROR_UNKNOWN_COMPONENT;
    public static WIN32_ERROR ERROR_UNKNOWN_PROPERTY;
    public static WIN32_ERROR ERROR_INVALID_HANDLE_STATE;
    public static WIN32_ERROR ERROR_BAD_CONFIGURATION;
    public static WIN32_ERROR ERROR_INDEX_ABSENT;
    public static WIN32_ERROR ERROR_INSTALL_SOURCE_ABSENT;
    public static WIN32_ERROR ERROR_INSTALL_PACKAGE_VERSION;
    public static WIN32_ERROR ERROR_PRODUCT_UNINSTALLED;
    public static WIN32_ERROR ERROR_BAD_QUERY_SYNTAX;
    public static WIN32_ERROR ERROR_INVALID_FIELD;
    public static WIN32_ERROR ERROR_DEVICE_REMOVED;
    public static WIN32_ERROR ERROR_INSTALL_ALREADY_RUNNING;
    public static WIN32_ERROR ERROR_INSTALL_PACKAGE_OPEN_FAILED;
    public static WIN32_ERROR ERROR_INSTALL_PACKAGE_INVALID;
    public static WIN32_ERROR ERROR_INSTALL_UI_FAILURE;
    public static WIN32_ERROR ERROR_INSTALL_LOG_FAILURE;
    public static WIN32_ERROR ERROR_INSTALL_LANGUAGE_UNSUPPORTED;
    public static WIN32_ERROR ERROR_INSTALL_TRANSFORM_FAILURE;
    public static WIN32_ERROR ERROR_INSTALL_PACKAGE_REJECTED;
    public static WIN32_ERROR ERROR_FUNCTION_NOT_CALLED;
    public static WIN32_ERROR ERROR_FUNCTION_FAILED;
    public static WIN32_ERROR ERROR_INVALID_TABLE;
    public static WIN32_ERROR ERROR_DATATYPE_MISMATCH;
    public static WIN32_ERROR ERROR_UNSUPPORTED_TYPE;
    public static WIN32_ERROR ERROR_CREATE_FAILED;
    public static WIN32_ERROR ERROR_INSTALL_TEMP_UNWRITABLE;
    public static WIN32_ERROR ERROR_INSTALL_PLATFORM_UNSUPPORTED;
    public static WIN32_ERROR ERROR_INSTALL_NOTUSED;
    public static WIN32_ERROR ERROR_PATCH_PACKAGE_OPEN_FAILED;
    public static WIN32_ERROR ERROR_PATCH_PACKAGE_INVALID;
    public static WIN32_ERROR ERROR_PATCH_PACKAGE_UNSUPPORTED;
    public static WIN32_ERROR ERROR_PRODUCT_VERSION;
    public static WIN32_ERROR ERROR_INVALID_COMMAND_LINE;
    public static WIN32_ERROR ERROR_INSTALL_REMOTE_DISALLOWED;
    public static WIN32_ERROR ERROR_SUCCESS_REBOOT_INITIATED;
    public static WIN32_ERROR ERROR_PATCH_TARGET_NOT_FOUND;
    public static WIN32_ERROR ERROR_PATCH_PACKAGE_REJECTED;
    public static WIN32_ERROR ERROR_INSTALL_TRANSFORM_REJECTED;
    public static WIN32_ERROR ERROR_INSTALL_REMOTE_PROHIBITED;
    public static WIN32_ERROR ERROR_PATCH_REMOVAL_UNSUPPORTED;
    public static WIN32_ERROR ERROR_UNKNOWN_PATCH;
    public static WIN32_ERROR ERROR_PATCH_NO_SEQUENCE;
    public static WIN32_ERROR ERROR_PATCH_REMOVAL_DISALLOWED;
    public static WIN32_ERROR ERROR_INVALID_PATCH_XML;
    public static WIN32_ERROR ERROR_PATCH_MANAGED_ADVERTISED_PRODUCT;
    public static WIN32_ERROR ERROR_INSTALL_SERVICE_SAFEBOOT;
    public static WIN32_ERROR ERROR_FAIL_FAST_EXCEPTION;
    public static WIN32_ERROR ERROR_INSTALL_REJECTED;
    public static WIN32_ERROR ERROR_DYNAMIC_CODE_BLOCKED;
    public static WIN32_ERROR ERROR_NOT_SAME_OBJECT;
    public static WIN32_ERROR ERROR_STRICT_CFG_VIOLATION;
    public static WIN32_ERROR ERROR_SET_CONTEXT_DENIED;
    public static WIN32_ERROR ERROR_CROSS_PARTITION_VIOLATION;
    public static WIN32_ERROR ERROR_RETURN_ADDRESS_HIJACK_ATTEMPT;
    public static WIN32_ERROR ERROR_INVALID_USER_BUFFER;
    public static WIN32_ERROR ERROR_UNRECOGNIZED_MEDIA;
    public static WIN32_ERROR ERROR_NO_TRUST_LSA_SECRET;
    public static WIN32_ERROR ERROR_NO_TRUST_SAM_ACCOUNT;
    public static WIN32_ERROR ERROR_TRUSTED_DOMAIN_FAILURE;
    public static WIN32_ERROR ERROR_TRUSTED_RELATIONSHIP_FAILURE;
    public static WIN32_ERROR ERROR_TRUST_FAILURE;
    public static WIN32_ERROR ERROR_NETLOGON_NOT_STARTED;
    public static WIN32_ERROR ERROR_ACCOUNT_EXPIRED;
    public static WIN32_ERROR ERROR_REDIRECTOR_HAS_OPEN_HANDLES;
    public static WIN32_ERROR ERROR_PRINTER_DRIVER_ALREADY_INSTALLED;
    public static WIN32_ERROR ERROR_UNKNOWN_PORT;
    public static WIN32_ERROR ERROR_UNKNOWN_PRINTER_DRIVER;
    public static WIN32_ERROR ERROR_UNKNOWN_PRINTPROCESSOR;
    public static WIN32_ERROR ERROR_INVALID_SEPARATOR_FILE;
    public static WIN32_ERROR ERROR_INVALID_PRIORITY;
    public static WIN32_ERROR ERROR_INVALID_PRINTER_NAME;
    public static WIN32_ERROR ERROR_PRINTER_ALREADY_EXISTS;
    public static WIN32_ERROR ERROR_INVALID_PRINTER_COMMAND;
    public static WIN32_ERROR ERROR_INVALID_DATATYPE;
    public static WIN32_ERROR ERROR_INVALID_ENVIRONMENT;
    public static WIN32_ERROR ERROR_NOLOGON_INTERDOMAIN_TRUST_ACCOUNT;
    public static WIN32_ERROR ERROR_NOLOGON_WORKSTATION_TRUST_ACCOUNT;
    public static WIN32_ERROR ERROR_NOLOGON_SERVER_TRUST_ACCOUNT;
    public static WIN32_ERROR ERROR_DOMAIN_TRUST_INCONSISTENT;
    public static WIN32_ERROR ERROR_SERVER_HAS_OPEN_HANDLES;
    public static WIN32_ERROR ERROR_RESOURCE_DATA_NOT_FOUND;
    public static WIN32_ERROR ERROR_RESOURCE_TYPE_NOT_FOUND;
    public static WIN32_ERROR ERROR_RESOURCE_NAME_NOT_FOUND;
    public static WIN32_ERROR ERROR_RESOURCE_LANG_NOT_FOUND;
    public static WIN32_ERROR ERROR_NOT_ENOUGH_QUOTA;
    public static WIN32_ERROR ERROR_INVALID_TIME;
    public static WIN32_ERROR ERROR_INVALID_FORM_NAME;
    public static WIN32_ERROR ERROR_INVALID_FORM_SIZE;
    public static WIN32_ERROR ERROR_ALREADY_WAITING;
    public static WIN32_ERROR ERROR_PRINTER_DELETED;
    public static WIN32_ERROR ERROR_INVALID_PRINTER_STATE;
    public static WIN32_ERROR ERROR_PASSWORD_MUST_CHANGE;
    public static WIN32_ERROR ERROR_DOMAIN_CONTROLLER_NOT_FOUND;
    public static WIN32_ERROR ERROR_ACCOUNT_LOCKED_OUT;
    public static WIN32_ERROR ERROR_NO_SITENAME;
    public static WIN32_ERROR ERROR_CANT_ACCESS_FILE;
    public static WIN32_ERROR ERROR_CANT_RESOLVE_FILENAME;
    public static WIN32_ERROR ERROR_KM_DRIVER_BLOCKED;
    public static WIN32_ERROR ERROR_CONTEXT_EXPIRED;
    public static WIN32_ERROR ERROR_PER_USER_TRUST_QUOTA_EXCEEDED;
    public static WIN32_ERROR ERROR_ALL_USER_TRUST_QUOTA_EXCEEDED;
    public static WIN32_ERROR ERROR_USER_DELETE_TRUST_QUOTA_EXCEEDED;
    public static WIN32_ERROR ERROR_AUTHENTICATION_FIREWALL_FAILED;
    public static WIN32_ERROR ERROR_REMOTE_PRINT_CONNECTIONS_BLOCKED;
    public static WIN32_ERROR ERROR_NTLM_BLOCKED;
    public static WIN32_ERROR ERROR_PASSWORD_CHANGE_REQUIRED;
    public static WIN32_ERROR ERROR_LOST_MODE_LOGON_RESTRICTION;
    public static WIN32_ERROR ERROR_INVALID_PIXEL_FORMAT;
    public static WIN32_ERROR ERROR_BAD_DRIVER;
    public static WIN32_ERROR ERROR_INVALID_WINDOW_STYLE;
    public static WIN32_ERROR ERROR_METAFILE_NOT_SUPPORTED;
    public static WIN32_ERROR ERROR_TRANSFORM_NOT_SUPPORTED;
    public static WIN32_ERROR ERROR_CLIPPING_NOT_SUPPORTED;
    public static WIN32_ERROR ERROR_INVALID_CMM;
    public static WIN32_ERROR ERROR_INVALID_PROFILE;
    public static WIN32_ERROR ERROR_TAG_NOT_FOUND;
    public static WIN32_ERROR ERROR_TAG_NOT_PRESENT;
    public static WIN32_ERROR ERROR_DUPLICATE_TAG;
    public static WIN32_ERROR ERROR_PROFILE_NOT_ASSOCIATED_WITH_DEVICE;
    public static WIN32_ERROR ERROR_PROFILE_NOT_FOUND;
    public static WIN32_ERROR ERROR_INVALID_COLORSPACE;
    public static WIN32_ERROR ERROR_ICM_NOT_ENABLED;
    public static WIN32_ERROR ERROR_DELETING_ICM_XFORM;
    public static WIN32_ERROR ERROR_INVALID_TRANSFORM;
    public static WIN32_ERROR ERROR_COLORSPACE_MISMATCH;
    public static WIN32_ERROR ERROR_INVALID_COLORINDEX;
    public static WIN32_ERROR ERROR_PROFILE_DOES_NOT_MATCH_DEVICE;
    public static WIN32_ERROR ERROR_CONNECTED_OTHER_PASSWORD;
    public static WIN32_ERROR ERROR_CONNECTED_OTHER_PASSWORD_DEFAULT;
    public static WIN32_ERROR ERROR_BAD_USERNAME;
    public static WIN32_ERROR ERROR_NOT_CONNECTED;
    public static WIN32_ERROR ERROR_OPEN_FILES;
    public static WIN32_ERROR ERROR_ACTIVE_CONNECTIONS;
    public static WIN32_ERROR ERROR_DEVICE_IN_USE;
    public static WIN32_ERROR ERROR_UNKNOWN_PRINT_MONITOR;
    public static WIN32_ERROR ERROR_PRINTER_DRIVER_IN_USE;
    public static WIN32_ERROR ERROR_SPOOL_FILE_NOT_FOUND;
    public static WIN32_ERROR ERROR_SPL_NO_STARTDOC;
    public static WIN32_ERROR ERROR_SPL_NO_ADDJOB;
    public static WIN32_ERROR ERROR_PRINT_PROCESSOR_ALREADY_INSTALLED;
    public static WIN32_ERROR ERROR_PRINT_MONITOR_ALREADY_INSTALLED;
    public static WIN32_ERROR ERROR_INVALID_PRINT_MONITOR;
    public static WIN32_ERROR ERROR_PRINT_MONITOR_IN_USE;
    public static WIN32_ERROR ERROR_PRINTER_HAS_JOBS_QUEUED;
    public static WIN32_ERROR ERROR_SUCCESS_REBOOT_REQUIRED;
    public static WIN32_ERROR ERROR_SUCCESS_RESTART_REQUIRED;
    public static WIN32_ERROR ERROR_PRINTER_NOT_FOUND;
    public static WIN32_ERROR ERROR_PRINTER_DRIVER_WARNED;
    public static WIN32_ERROR ERROR_PRINTER_DRIVER_BLOCKED;
    public static WIN32_ERROR ERROR_PRINTER_DRIVER_PACKAGE_IN_USE;
    public static WIN32_ERROR ERROR_CORE_DRIVER_PACKAGE_NOT_FOUND;
    public static WIN32_ERROR ERROR_FAIL_REBOOT_REQUIRED;
    public static WIN32_ERROR ERROR_FAIL_REBOOT_INITIATED;
    public static WIN32_ERROR ERROR_PRINTER_DRIVER_DOWNLOAD_NEEDED;
    public static WIN32_ERROR ERROR_PRINT_JOB_RESTART_REQUIRED;
    public static WIN32_ERROR ERROR_INVALID_PRINTER_DRIVER_MANIFEST;
    public static WIN32_ERROR ERROR_PRINTER_NOT_SHAREABLE;
    public static WIN32_ERROR ERROR_SERVER_SERVICE_CALL_REQUIRES_SMB1;
    public static WIN32_ERROR ERROR_NETWORK_AUTHENTICATION_PROMPT_CANCELED;
    public static WIN32_ERROR ERROR_REQUEST_PAUSED;
    public static WIN32_ERROR ERROR_APPEXEC_CONDITION_NOT_SATISFIED;
    public static WIN32_ERROR ERROR_APPEXEC_HANDLE_INVALIDATED;
    public static WIN32_ERROR ERROR_APPEXEC_INVALID_HOST_GENERATION;
    public static WIN32_ERROR ERROR_APPEXEC_UNEXPECTED_PROCESS_REGISTRATION;
    public static WIN32_ERROR ERROR_APPEXEC_INVALID_HOST_STATE;
    public static WIN32_ERROR ERROR_APPEXEC_NO_DONOR;
    public static WIN32_ERROR ERROR_APPEXEC_HOST_ID_MISMATCH;
    public static WIN32_ERROR ERROR_APPEXEC_UNKNOWN_USER;
    public static WIN32_ERROR ERROR_APPEXEC_APP_COMPAT_BLOCK;
    public static WIN32_ERROR ERROR_APPEXEC_CALLER_WAIT_TIMEOUT;
    public static WIN32_ERROR ERROR_APPEXEC_CALLER_WAIT_TIMEOUT_TERMINATION;
    public static WIN32_ERROR ERROR_APPEXEC_CALLER_WAIT_TIMEOUT_LICENSING;
    public static WIN32_ERROR ERROR_APPEXEC_CALLER_WAIT_TIMEOUT_RESOURCES;
    public static WIN32_ERROR ERROR_VRF_VOLATILE_CFG_AND_IO_ENABLED;
    public static WIN32_ERROR ERROR_VRF_VOLATILE_NOT_STOPPABLE;
    public static WIN32_ERROR ERROR_VRF_VOLATILE_SAFE_MODE;
    public static WIN32_ERROR ERROR_VRF_VOLATILE_NOT_RUNNABLE_SYSTEM;
    public static WIN32_ERROR ERROR_VRF_VOLATILE_NOT_SUPPORTED_RULECLASS;
    public static WIN32_ERROR ERROR_VRF_VOLATILE_PROTECTED_DRIVER;
    public static WIN32_ERROR ERROR_VRF_VOLATILE_NMI_REGISTERED;
    public static WIN32_ERROR ERROR_VRF_VOLATILE_SETTINGS_CONFLICT;
    public static WIN32_ERROR ERROR_DIF_IOCALLBACK_NOT_REPLACED;
    public static WIN32_ERROR ERROR_DIF_LIVEDUMP_LIMIT_EXCEEDED;
    public static WIN32_ERROR ERROR_DIF_VOLATILE_SECTION_NOT_LOCKED;
    public static WIN32_ERROR ERROR_DIF_VOLATILE_DRIVER_HOTPATCHED;
    public static WIN32_ERROR ERROR_DIF_VOLATILE_INVALID_INFO;
    public static WIN32_ERROR ERROR_DIF_VOLATILE_DRIVER_IS_NOT_RUNNING;
    public static WIN32_ERROR ERROR_DIF_VOLATILE_PLUGIN_IS_NOT_RUNNING;
    public static WIN32_ERROR ERROR_DIF_VOLATILE_PLUGIN_CHANGE_NOT_ALLOWED;
    public static WIN32_ERROR ERROR_DIF_VOLATILE_NOT_ALLOWED;
    public static WIN32_ERROR ERROR_DIF_BINDING_API_NOT_FOUND;
    public static WIN32_ERROR ERROR_IO_REISSUE_AS_CACHED;
    public static WIN32_ERROR ERROR_WINS_INTERNAL;
    public static WIN32_ERROR ERROR_CAN_NOT_DEL_LOCAL_WINS;
    public static WIN32_ERROR ERROR_STATIC_INIT;
    public static WIN32_ERROR ERROR_INC_BACKUP;
    public static WIN32_ERROR ERROR_FULL_BACKUP;
    public static WIN32_ERROR ERROR_REC_NON_EXISTENT;
    public static WIN32_ERROR ERROR_RPL_NOT_ALLOWED;
    public static WIN32_ERROR ERROR_DHCP_ADDRESS_CONFLICT;
    public static WIN32_ERROR ERROR_WMI_GUID_NOT_FOUND;
    public static WIN32_ERROR ERROR_WMI_INSTANCE_NOT_FOUND;
    public static WIN32_ERROR ERROR_WMI_ITEMID_NOT_FOUND;
    public static WIN32_ERROR ERROR_WMI_TRY_AGAIN;
    public static WIN32_ERROR ERROR_WMI_DP_NOT_FOUND;
    public static WIN32_ERROR ERROR_WMI_UNRESOLVED_INSTANCE_REF;
    public static WIN32_ERROR ERROR_WMI_ALREADY_ENABLED;
    public static WIN32_ERROR ERROR_WMI_GUID_DISCONNECTED;
    public static WIN32_ERROR ERROR_WMI_SERVER_UNAVAILABLE;
    public static WIN32_ERROR ERROR_WMI_DP_FAILED;
    public static WIN32_ERROR ERROR_WMI_INVALID_MOF;
    public static WIN32_ERROR ERROR_WMI_INVALID_REGINFO;
    public static WIN32_ERROR ERROR_WMI_ALREADY_DISABLED;
    public static WIN32_ERROR ERROR_WMI_READ_ONLY;
    public static WIN32_ERROR ERROR_WMI_SET_FAILURE;
    public static WIN32_ERROR ERROR_NOT_APPCONTAINER;
    public static WIN32_ERROR ERROR_APPCONTAINER_REQUIRED;
    public static WIN32_ERROR ERROR_NOT_SUPPORTED_IN_APPCONTAINER;
    public static WIN32_ERROR ERROR_INVALID_PACKAGE_SID_LENGTH;
    public static WIN32_ERROR ERROR_INVALID_MEDIA;
    public static WIN32_ERROR ERROR_INVALID_LIBRARY;
    public static WIN32_ERROR ERROR_INVALID_MEDIA_POOL;
    public static WIN32_ERROR ERROR_DRIVE_MEDIA_MISMATCH;
    public static WIN32_ERROR ERROR_MEDIA_OFFLINE;
    public static WIN32_ERROR ERROR_LIBRARY_OFFLINE;
    public static WIN32_ERROR ERROR_EMPTY;
    public static WIN32_ERROR ERROR_NOT_EMPTY;
    public static WIN32_ERROR ERROR_MEDIA_UNAVAILABLE;
    public static WIN32_ERROR ERROR_RESOURCE_DISABLED;
    public static WIN32_ERROR ERROR_INVALID_CLEANER;
    public static WIN32_ERROR ERROR_UNABLE_TO_CLEAN;
    public static WIN32_ERROR ERROR_OBJECT_NOT_FOUND;
    public static WIN32_ERROR ERROR_DATABASE_FAILURE;
    public static WIN32_ERROR ERROR_DATABASE_FULL;
    public static WIN32_ERROR ERROR_MEDIA_INCOMPATIBLE;
    public static WIN32_ERROR ERROR_RESOURCE_NOT_PRESENT;
    public static WIN32_ERROR ERROR_INVALID_OPERATION;
    public static WIN32_ERROR ERROR_MEDIA_NOT_AVAILABLE;
    public static WIN32_ERROR ERROR_DEVICE_NOT_AVAILABLE;
    public static WIN32_ERROR ERROR_REQUEST_REFUSED;
    public static WIN32_ERROR ERROR_INVALID_DRIVE_OBJECT;
    public static WIN32_ERROR ERROR_LIBRARY_FULL;
    public static WIN32_ERROR ERROR_MEDIUM_NOT_ACCESSIBLE;
    public static WIN32_ERROR ERROR_UNABLE_TO_LOAD_MEDIUM;
    public static WIN32_ERROR ERROR_UNABLE_TO_INVENTORY_DRIVE;
    public static WIN32_ERROR ERROR_UNABLE_TO_INVENTORY_SLOT;
    public static WIN32_ERROR ERROR_UNABLE_TO_INVENTORY_TRANSPORT;
    public static WIN32_ERROR ERROR_TRANSPORT_FULL;
    public static WIN32_ERROR ERROR_CONTROLLING_IEPORT;
    public static WIN32_ERROR ERROR_UNABLE_TO_EJECT_MOUNTED_MEDIA;
    public static WIN32_ERROR ERROR_CLEANER_SLOT_SET;
    public static WIN32_ERROR ERROR_CLEANER_SLOT_NOT_SET;
    public static WIN32_ERROR ERROR_CLEANER_CARTRIDGE_SPENT;
    public static WIN32_ERROR ERROR_UNEXPECTED_OMID;
    public static WIN32_ERROR ERROR_CANT_DELETE_LAST_ITEM;
    public static WIN32_ERROR ERROR_MESSAGE_EXCEEDS_MAX_SIZE;
    public static WIN32_ERROR ERROR_VOLUME_CONTAINS_SYS_FILES;
    public static WIN32_ERROR ERROR_INDIGENOUS_TYPE;
    public static WIN32_ERROR ERROR_NO_SUPPORTING_DRIVES;
    public static WIN32_ERROR ERROR_CLEANER_CARTRIDGE_INSTALLED;
    public static WIN32_ERROR ERROR_IEPORT_FULL;
    public static WIN32_ERROR ERROR_FILE_OFFLINE;
    public static WIN32_ERROR ERROR_REMOTE_STORAGE_NOT_ACTIVE;
    public static WIN32_ERROR ERROR_REMOTE_STORAGE_MEDIA_ERROR;
    public static WIN32_ERROR ERROR_NOT_A_REPARSE_POINT;
    public static WIN32_ERROR ERROR_REPARSE_ATTRIBUTE_CONFLICT;
    public static WIN32_ERROR ERROR_INVALID_REPARSE_DATA;
    public static WIN32_ERROR ERROR_REPARSE_TAG_INVALID;
    public static WIN32_ERROR ERROR_REPARSE_TAG_MISMATCH;
    public static WIN32_ERROR ERROR_REPARSE_POINT_ENCOUNTERED;
    public static WIN32_ERROR ERROR_APP_DATA_NOT_FOUND;
    public static WIN32_ERROR ERROR_APP_DATA_EXPIRED;
    public static WIN32_ERROR ERROR_APP_DATA_CORRUPT;
    public static WIN32_ERROR ERROR_APP_DATA_LIMIT_EXCEEDED;
    public static WIN32_ERROR ERROR_APP_DATA_REBOOT_REQUIRED;
    public static WIN32_ERROR ERROR_SECUREBOOT_ROLLBACK_DETECTED;
    public static WIN32_ERROR ERROR_SECUREBOOT_POLICY_VIOLATION;
    public static WIN32_ERROR ERROR_SECUREBOOT_INVALID_POLICY;
    public static WIN32_ERROR ERROR_SECUREBOOT_POLICY_PUBLISHER_NOT_FOUND;
    public static WIN32_ERROR ERROR_SECUREBOOT_POLICY_NOT_SIGNED;
    public static WIN32_ERROR ERROR_SECUREBOOT_NOT_ENABLED;
    public static WIN32_ERROR ERROR_SECUREBOOT_FILE_REPLACED;
    public static WIN32_ERROR ERROR_SECUREBOOT_POLICY_NOT_AUTHORIZED;
    public static WIN32_ERROR ERROR_SECUREBOOT_POLICY_UNKNOWN;
    public static WIN32_ERROR ERROR_SECUREBOOT_POLICY_MISSING_ANTIROLLBACKVERSION;
    public static WIN32_ERROR ERROR_SECUREBOOT_PLATFORM_ID_MISMATCH;
    public static WIN32_ERROR ERROR_SECUREBOOT_POLICY_ROLLBACK_DETECTED;
    public static WIN32_ERROR ERROR_SECUREBOOT_POLICY_UPGRADE_MISMATCH;
    public static WIN32_ERROR ERROR_SECUREBOOT_REQUIRED_POLICY_FILE_MISSING;
    public static WIN32_ERROR ERROR_SECUREBOOT_NOT_BASE_POLICY;
    public static WIN32_ERROR ERROR_SECUREBOOT_NOT_SUPPLEMENTAL_POLICY;
    public static WIN32_ERROR ERROR_OFFLOAD_READ_FLT_NOT_SUPPORTED;
    public static WIN32_ERROR ERROR_OFFLOAD_WRITE_FLT_NOT_SUPPORTED;
    public static WIN32_ERROR ERROR_OFFLOAD_READ_FILE_NOT_SUPPORTED;
    public static WIN32_ERROR ERROR_OFFLOAD_WRITE_FILE_NOT_SUPPORTED;
    public static WIN32_ERROR ERROR_ALREADY_HAS_STREAM_ID;
    public static WIN32_ERROR ERROR_SMR_GARBAGE_COLLECTION_REQUIRED;
    public static WIN32_ERROR ERROR_WOF_WIM_HEADER_CORRUPT;
    public static WIN32_ERROR ERROR_WOF_WIM_RESOURCE_TABLE_CORRUPT;
    public static WIN32_ERROR ERROR_WOF_FILE_RESOURCE_TABLE_CORRUPT;
    public static WIN32_ERROR ERROR_OBJECT_IS_IMMUTABLE;
    public static WIN32_ERROR ERROR_VOLUME_NOT_SIS_ENABLED;
    public static WIN32_ERROR ERROR_SYSTEM_INTEGRITY_ROLLBACK_DETECTED;
    public static WIN32_ERROR ERROR_SYSTEM_INTEGRITY_POLICY_VIOLATION;
    public static WIN32_ERROR ERROR_SYSTEM_INTEGRITY_INVALID_POLICY;
    public static WIN32_ERROR ERROR_SYSTEM_INTEGRITY_POLICY_NOT_SIGNED;
    public static WIN32_ERROR ERROR_SYSTEM_INTEGRITY_TOO_MANY_POLICIES;
    public static WIN32_ERROR ERROR_SYSTEM_INTEGRITY_SUPPLEMENTAL_POLICY_NOT_AUTHORIZED;
    public static WIN32_ERROR ERROR_SYSTEM_INTEGRITY_REPUTATION_MALICIOUS;
    public static WIN32_ERROR ERROR_SYSTEM_INTEGRITY_REPUTATION_PUA;
    public static WIN32_ERROR ERROR_SYSTEM_INTEGRITY_REPUTATION_DANGEROUS_EXT;
    public static WIN32_ERROR ERROR_SYSTEM_INTEGRITY_REPUTATION_OFFLINE;
    public static WIN32_ERROR ERROR_VSM_NOT_INITIALIZED;
    public static WIN32_ERROR ERROR_VSM_DMA_PROTECTION_NOT_IN_USE;
    public static WIN32_ERROR ERROR_PLATFORM_MANIFEST_NOT_AUTHORIZED;
    public static WIN32_ERROR ERROR_PLATFORM_MANIFEST_INVALID;
    public static WIN32_ERROR ERROR_PLATFORM_MANIFEST_FILE_NOT_AUTHORIZED;
    public static WIN32_ERROR ERROR_PLATFORM_MANIFEST_CATALOG_NOT_AUTHORIZED;
    public static WIN32_ERROR ERROR_PLATFORM_MANIFEST_BINARY_ID_NOT_FOUND;
    public static WIN32_ERROR ERROR_PLATFORM_MANIFEST_NOT_ACTIVE;
    public static WIN32_ERROR ERROR_PLATFORM_MANIFEST_NOT_SIGNED;
    public static WIN32_ERROR ERROR_SYSTEM_INTEGRITY_REPUTATION_UNFRIENDLY_FILE;
    public static WIN32_ERROR ERROR_SYSTEM_INTEGRITY_REPUTATION_UNATTAINABLE;
    public static WIN32_ERROR ERROR_DEPENDENT_RESOURCE_EXISTS;
    public static WIN32_ERROR ERROR_DEPENDENCY_NOT_FOUND;
    public static WIN32_ERROR ERROR_DEPENDENCY_ALREADY_EXISTS;
    public static WIN32_ERROR ERROR_RESOURCE_NOT_ONLINE;
    public static WIN32_ERROR ERROR_HOST_NODE_NOT_AVAILABLE;
    public static WIN32_ERROR ERROR_RESOURCE_NOT_AVAILABLE;
    public static WIN32_ERROR ERROR_RESOURCE_NOT_FOUND;
    public static WIN32_ERROR ERROR_SHUTDOWN_CLUSTER;
    public static WIN32_ERROR ERROR_CANT_EVICT_ACTIVE_NODE;
    public static WIN32_ERROR ERROR_OBJECT_ALREADY_EXISTS;
    public static WIN32_ERROR ERROR_OBJECT_IN_LIST;
    public static WIN32_ERROR ERROR_GROUP_NOT_AVAILABLE;
    public static WIN32_ERROR ERROR_GROUP_NOT_FOUND;
    public static WIN32_ERROR ERROR_GROUP_NOT_ONLINE;
    public static WIN32_ERROR ERROR_HOST_NODE_NOT_RESOURCE_OWNER;
    public static WIN32_ERROR ERROR_HOST_NODE_NOT_GROUP_OWNER;
    public static WIN32_ERROR ERROR_RESMON_CREATE_FAILED;
    public static WIN32_ERROR ERROR_RESMON_ONLINE_FAILED;
    public static WIN32_ERROR ERROR_RESOURCE_ONLINE;
    public static WIN32_ERROR ERROR_QUORUM_RESOURCE;
    public static WIN32_ERROR ERROR_NOT_QUORUM_CAPABLE;
    public static WIN32_ERROR ERROR_CLUSTER_SHUTTING_DOWN;
    public static WIN32_ERROR ERROR_INVALID_STATE;
    public static WIN32_ERROR ERROR_RESOURCE_PROPERTIES_STORED;
    public static WIN32_ERROR ERROR_NOT_QUORUM_CLASS;
    public static WIN32_ERROR ERROR_CORE_RESOURCE;
    public static WIN32_ERROR ERROR_QUORUM_RESOURCE_ONLINE_FAILED;
    public static WIN32_ERROR ERROR_QUORUMLOG_OPEN_FAILED;
    public static WIN32_ERROR ERROR_CLUSTERLOG_CORRUPT;
    public static WIN32_ERROR ERROR_CLUSTERLOG_RECORD_EXCEEDS_MAXSIZE;
    public static WIN32_ERROR ERROR_CLUSTERLOG_EXCEEDS_MAXSIZE;
    public static WIN32_ERROR ERROR_CLUSTERLOG_CHKPOINT_NOT_FOUND;
    public static WIN32_ERROR ERROR_CLUSTERLOG_NOT_ENOUGH_SPACE;
    public static WIN32_ERROR ERROR_QUORUM_OWNER_ALIVE;
    public static WIN32_ERROR ERROR_NETWORK_NOT_AVAILABLE;
    public static WIN32_ERROR ERROR_NODE_NOT_AVAILABLE;
    public static WIN32_ERROR ERROR_ALL_NODES_NOT_AVAILABLE;
    public static WIN32_ERROR ERROR_RESOURCE_FAILED;
    public static WIN32_ERROR ERROR_CLUSTER_INVALID_NODE;
    public static WIN32_ERROR ERROR_CLUSTER_NODE_EXISTS;
    public static WIN32_ERROR ERROR_CLUSTER_JOIN_IN_PROGRESS;
    public static WIN32_ERROR ERROR_CLUSTER_NODE_NOT_FOUND;
    public static WIN32_ERROR ERROR_CLUSTER_LOCAL_NODE_NOT_FOUND;
    public static WIN32_ERROR ERROR_CLUSTER_NETWORK_EXISTS;
    public static WIN32_ERROR ERROR_CLUSTER_NETWORK_NOT_FOUND;
    public static WIN32_ERROR ERROR_CLUSTER_NETINTERFACE_EXISTS;
    public static WIN32_ERROR ERROR_CLUSTER_NETINTERFACE_NOT_FOUND;
    public static WIN32_ERROR ERROR_CLUSTER_INVALID_REQUEST;
    public static WIN32_ERROR ERROR_CLUSTER_INVALID_NETWORK_PROVIDER;
    public static WIN32_ERROR ERROR_CLUSTER_NODE_DOWN;
    public static WIN32_ERROR ERROR_CLUSTER_NODE_UNREACHABLE;
    public static WIN32_ERROR ERROR_CLUSTER_NODE_NOT_MEMBER;
    public static WIN32_ERROR ERROR_CLUSTER_JOIN_NOT_IN_PROGRESS;
    public static WIN32_ERROR ERROR_CLUSTER_INVALID_NETWORK;
    public static WIN32_ERROR ERROR_CLUSTER_NODE_UP;
    public static WIN32_ERROR ERROR_CLUSTER_IPADDR_IN_USE;
    public static WIN32_ERROR ERROR_CLUSTER_NODE_NOT_PAUSED;
    public static WIN32_ERROR ERROR_CLUSTER_NO_SECURITY_CONTEXT;
    public static WIN32_ERROR ERROR_CLUSTER_NETWORK_NOT_INTERNAL;
    public static WIN32_ERROR ERROR_CLUSTER_NODE_ALREADY_UP;
    public static WIN32_ERROR ERROR_CLUSTER_NODE_ALREADY_DOWN;
    public static WIN32_ERROR ERROR_CLUSTER_NETWORK_ALREADY_ONLINE;
    public static WIN32_ERROR ERROR_CLUSTER_NETWORK_ALREADY_OFFLINE;
    public static WIN32_ERROR ERROR_CLUSTER_NODE_ALREADY_MEMBER;
    public static WIN32_ERROR ERROR_CLUSTER_LAST_INTERNAL_NETWORK;
    public static WIN32_ERROR ERROR_CLUSTER_NETWORK_HAS_DEPENDENTS;
    public static WIN32_ERROR ERROR_INVALID_OPERATION_ON_QUORUM;
    public static WIN32_ERROR ERROR_DEPENDENCY_NOT_ALLOWED;
    public static WIN32_ERROR ERROR_CLUSTER_NODE_PAUSED;
    public static WIN32_ERROR ERROR_NODE_CANT_HOST_RESOURCE;
    public static WIN32_ERROR ERROR_CLUSTER_NODE_NOT_READY;
    public static WIN32_ERROR ERROR_CLUSTER_NODE_SHUTTING_DOWN;
    public static WIN32_ERROR ERROR_CLUSTER_JOIN_ABORTED;
    public static WIN32_ERROR ERROR_CLUSTER_INCOMPATIBLE_VERSIONS;
    public static WIN32_ERROR ERROR_CLUSTER_MAXNUM_OF_RESOURCES_EXCEEDED;
    public static WIN32_ERROR ERROR_CLUSTER_SYSTEM_CONFIG_CHANGED;
    public static WIN32_ERROR ERROR_CLUSTER_RESOURCE_TYPE_NOT_FOUND;
    public static WIN32_ERROR ERROR_CLUSTER_RESTYPE_NOT_SUPPORTED;
    public static WIN32_ERROR ERROR_CLUSTER_RESNAME_NOT_FOUND;
    public static WIN32_ERROR ERROR_CLUSTER_NO_RPC_PACKAGES_REGISTERED;
    public static WIN32_ERROR ERROR_CLUSTER_OWNER_NOT_IN_PREFLIST;
    public static WIN32_ERROR ERROR_CLUSTER_DATABASE_SEQMISMATCH;
    public static WIN32_ERROR ERROR_RESMON_INVALID_STATE;
    public static WIN32_ERROR ERROR_CLUSTER_GUM_NOT_LOCKER;
    public static WIN32_ERROR ERROR_QUORUM_DISK_NOT_FOUND;
    public static WIN32_ERROR ERROR_DATABASE_BACKUP_CORRUPT;
    public static WIN32_ERROR ERROR_CLUSTER_NODE_ALREADY_HAS_DFS_ROOT;
    public static WIN32_ERROR ERROR_RESOURCE_PROPERTY_UNCHANGEABLE;
    public static WIN32_ERROR ERROR_NO_ADMIN_ACCESS_POINT;
    public static WIN32_ERROR ERROR_CLUSTER_MEMBERSHIP_INVALID_STATE;
    public static WIN32_ERROR ERROR_CLUSTER_QUORUMLOG_NOT_FOUND;
    public static WIN32_ERROR ERROR_CLUSTER_MEMBERSHIP_HALT;
    public static WIN32_ERROR ERROR_CLUSTER_INSTANCE_ID_MISMATCH;
    public static WIN32_ERROR ERROR_CLUSTER_NETWORK_NOT_FOUND_FOR_IP;
    public static WIN32_ERROR ERROR_CLUSTER_PROPERTY_DATA_TYPE_MISMATCH;
    public static WIN32_ERROR ERROR_CLUSTER_EVICT_WITHOUT_CLEANUP;
    public static WIN32_ERROR ERROR_CLUSTER_PARAMETER_MISMATCH;
    public static WIN32_ERROR ERROR_NODE_CANNOT_BE_CLUSTERED;
    public static WIN32_ERROR ERROR_CLUSTER_WRONG_OS_VERSION;
    public static WIN32_ERROR ERROR_CLUSTER_CANT_CREATE_DUP_CLUSTER_NAME;
    public static WIN32_ERROR ERROR_CLUSCFG_ALREADY_COMMITTED;
    public static WIN32_ERROR ERROR_CLUSCFG_ROLLBACK_FAILED;
    public static WIN32_ERROR ERROR_CLUSCFG_SYSTEM_DISK_DRIVE_LETTER_CONFLICT;
    public static WIN32_ERROR ERROR_CLUSTER_OLD_VERSION;
    public static WIN32_ERROR ERROR_CLUSTER_MISMATCHED_COMPUTER_ACCT_NAME;
    public static WIN32_ERROR ERROR_CLUSTER_NO_NET_ADAPTERS;
    public static WIN32_ERROR ERROR_CLUSTER_POISONED;
    public static WIN32_ERROR ERROR_CLUSTER_GROUP_MOVING;
    public static WIN32_ERROR ERROR_CLUSTER_RESOURCE_TYPE_BUSY;
    public static WIN32_ERROR ERROR_RESOURCE_CALL_TIMED_OUT;
    public static WIN32_ERROR ERROR_INVALID_CLUSTER_IPV6_ADDRESS;
    public static WIN32_ERROR ERROR_CLUSTER_INTERNAL_INVALID_FUNCTION;
    public static WIN32_ERROR ERROR_CLUSTER_PARAMETER_OUT_OF_BOUNDS;
    public static WIN32_ERROR ERROR_CLUSTER_PARTIAL_SEND;
    public static WIN32_ERROR ERROR_CLUSTER_REGISTRY_INVALID_FUNCTION;
    public static WIN32_ERROR ERROR_CLUSTER_INVALID_STRING_TERMINATION;
    public static WIN32_ERROR ERROR_CLUSTER_INVALID_STRING_FORMAT;
    public static WIN32_ERROR ERROR_CLUSTER_DATABASE_TRANSACTION_IN_PROGRESS;
    public static WIN32_ERROR ERROR_CLUSTER_DATABASE_TRANSACTION_NOT_IN_PROGRESS;
    public static WIN32_ERROR ERROR_CLUSTER_NULL_DATA;
    public static WIN32_ERROR ERROR_CLUSTER_PARTIAL_READ;
    public static WIN32_ERROR ERROR_CLUSTER_PARTIAL_WRITE;
    public static WIN32_ERROR ERROR_CLUSTER_CANT_DESERIALIZE_DATA;
    public static WIN32_ERROR ERROR_DEPENDENT_RESOURCE_PROPERTY_CONFLICT;
    public static WIN32_ERROR ERROR_CLUSTER_NO_QUORUM;
    public static WIN32_ERROR ERROR_CLUSTER_INVALID_IPV6_NETWORK;
    public static WIN32_ERROR ERROR_CLUSTER_INVALID_IPV6_TUNNEL_NETWORK;
    public static WIN32_ERROR ERROR_QUORUM_NOT_ALLOWED_IN_THIS_GROUP;
    public static WIN32_ERROR ERROR_DEPENDENCY_TREE_TOO_COMPLEX;
    public static WIN32_ERROR ERROR_EXCEPTION_IN_RESOURCE_CALL;
    public static WIN32_ERROR ERROR_CLUSTER_RHS_FAILED_INITIALIZATION;
    public static WIN32_ERROR ERROR_CLUSTER_NOT_INSTALLED;
    public static WIN32_ERROR ERROR_CLUSTER_RESOURCES_MUST_BE_ONLINE_ON_THE_SAME_NODE;
    public static WIN32_ERROR ERROR_CLUSTER_MAX_NODES_IN_CLUSTER;
    public static WIN32_ERROR ERROR_CLUSTER_TOO_MANY_NODES;
    public static WIN32_ERROR ERROR_CLUSTER_OBJECT_ALREADY_USED;
    public static WIN32_ERROR ERROR_NONCORE_GROUPS_FOUND;
    public static WIN32_ERROR ERROR_FILE_SHARE_RESOURCE_CONFLICT;
    public static WIN32_ERROR ERROR_CLUSTER_EVICT_INVALID_REQUEST;
    public static WIN32_ERROR ERROR_CLUSTER_SINGLETON_RESOURCE;
    public static WIN32_ERROR ERROR_CLUSTER_GROUP_SINGLETON_RESOURCE;
    public static WIN32_ERROR ERROR_CLUSTER_RESOURCE_PROVIDER_FAILED;
    public static WIN32_ERROR ERROR_CLUSTER_RESOURCE_CONFIGURATION_ERROR;
    public static WIN32_ERROR ERROR_CLUSTER_GROUP_BUSY;
    public static WIN32_ERROR ERROR_CLUSTER_NOT_SHARED_VOLUME;
    public static WIN32_ERROR ERROR_CLUSTER_INVALID_SECURITY_DESCRIPTOR;
    public static WIN32_ERROR ERROR_CLUSTER_SHARED_VOLUMES_IN_USE;
    public static WIN32_ERROR ERROR_CLUSTER_USE_SHARED_VOLUMES_API;
    public static WIN32_ERROR ERROR_CLUSTER_BACKUP_IN_PROGRESS;
    public static WIN32_ERROR ERROR_NON_CSV_PATH;
    public static WIN32_ERROR ERROR_CSV_VOLUME_NOT_LOCAL;
    public static WIN32_ERROR ERROR_CLUSTER_WATCHDOG_TERMINATING;
    public static WIN32_ERROR ERROR_CLUSTER_RESOURCE_VETOED_MOVE_INCOMPATIBLE_NODES;
    public static WIN32_ERROR ERROR_CLUSTER_INVALID_NODE_WEIGHT;
    public static WIN32_ERROR ERROR_CLUSTER_RESOURCE_VETOED_CALL;
    public static WIN32_ERROR ERROR_RESMON_SYSTEM_RESOURCES_LACKING;
    public static WIN32_ERROR ERROR_CLUSTER_RESOURCE_VETOED_MOVE_NOT_ENOUGH_RESOURCES_ON_DESTINATION;
    public static WIN32_ERROR ERROR_CLUSTER_RESOURCE_VETOED_MOVE_NOT_ENOUGH_RESOURCES_ON_SOURCE;
    public static WIN32_ERROR ERROR_CLUSTER_GROUP_QUEUED;
    public static WIN32_ERROR ERROR_CLUSTER_RESOURCE_LOCKED_STATUS;
    public static WIN32_ERROR ERROR_CLUSTER_SHARED_VOLUME_FAILOVER_NOT_ALLOWED;
    public static WIN32_ERROR ERROR_CLUSTER_NODE_DRAIN_IN_PROGRESS;
    public static WIN32_ERROR ERROR_CLUSTER_DISK_NOT_CONNECTED;
    public static WIN32_ERROR ERROR_DISK_NOT_CSV_CAPABLE;
    public static WIN32_ERROR ERROR_RESOURCE_NOT_IN_AVAILABLE_STORAGE;
    public static WIN32_ERROR ERROR_CLUSTER_SHARED_VOLUME_REDIRECTED;
    public static WIN32_ERROR ERROR_CLUSTER_SHARED_VOLUME_NOT_REDIRECTED;
    public static WIN32_ERROR ERROR_CLUSTER_CANNOT_RETURN_PROPERTIES;
    public static WIN32_ERROR ERROR_CLUSTER_RESOURCE_CONTAINS_UNSUPPORTED_DIFF_AREA_FOR_SHARED_VOLUMES;
    public static WIN32_ERROR ERROR_CLUSTER_RESOURCE_IS_IN_MAINTENANCE_MODE;
    public static WIN32_ERROR ERROR_CLUSTER_AFFINITY_CONFLICT;
    public static WIN32_ERROR ERROR_CLUSTER_RESOURCE_IS_REPLICA_VIRTUAL_MACHINE;
    public static WIN32_ERROR ERROR_CLUSTER_UPGRADE_INCOMPATIBLE_VERSIONS;
    public static WIN32_ERROR ERROR_CLUSTER_UPGRADE_FIX_QUORUM_NOT_SUPPORTED;
    public static WIN32_ERROR ERROR_CLUSTER_UPGRADE_RESTART_REQUIRED;
    public static WIN32_ERROR ERROR_CLUSTER_UPGRADE_IN_PROGRESS;
    public static WIN32_ERROR ERROR_CLUSTER_UPGRADE_INCOMPLETE;
    public static WIN32_ERROR ERROR_CLUSTER_NODE_IN_GRACE_PERIOD;
    public static WIN32_ERROR ERROR_CLUSTER_CSV_IO_PAUSE_TIMEOUT;
    public static WIN32_ERROR ERROR_NODE_NOT_ACTIVE_CLUSTER_MEMBER;
    public static WIN32_ERROR ERROR_CLUSTER_RESOURCE_NOT_MONITORED;
    public static WIN32_ERROR ERROR_CLUSTER_RESOURCE_DOES_NOT_SUPPORT_UNMONITORED;
    public static WIN32_ERROR ERROR_CLUSTER_RESOURCE_IS_REPLICATED;
    public static WIN32_ERROR ERROR_CLUSTER_NODE_ISOLATED;
    public static WIN32_ERROR ERROR_CLUSTER_NODE_QUARANTINED;
    public static WIN32_ERROR ERROR_CLUSTER_DATABASE_UPDATE_CONDITION_FAILED;
    public static WIN32_ERROR ERROR_CLUSTER_SPACE_DEGRADED;
    public static WIN32_ERROR ERROR_CLUSTER_TOKEN_DELEGATION_NOT_SUPPORTED;
    public static WIN32_ERROR ERROR_CLUSTER_CSV_INVALID_HANDLE;
    public static WIN32_ERROR ERROR_CLUSTER_CSV_SUPPORTED_ONLY_ON_COORDINATOR;
    public static WIN32_ERROR ERROR_GROUPSET_NOT_AVAILABLE;
    public static WIN32_ERROR ERROR_GROUPSET_NOT_FOUND;
    public static WIN32_ERROR ERROR_GROUPSET_CANT_PROVIDE;
    public static WIN32_ERROR ERROR_CLUSTER_FAULT_DOMAIN_PARENT_NOT_FOUND;
    public static WIN32_ERROR ERROR_CLUSTER_FAULT_DOMAIN_INVALID_HIERARCHY;
    public static WIN32_ERROR ERROR_CLUSTER_FAULT_DOMAIN_FAILED_S2D_VALIDATION;
    public static WIN32_ERROR ERROR_CLUSTER_FAULT_DOMAIN_S2D_CONNECTIVITY_LOSS;
    public static WIN32_ERROR ERROR_CLUSTER_INVALID_INFRASTRUCTURE_FILESERVER_NAME;
    public static WIN32_ERROR ERROR_CLUSTERSET_MANAGEMENT_CLUSTER_UNREACHABLE;
    public static WIN32_ERROR ERROR_ENCRYPTION_FAILED;
    public static WIN32_ERROR ERROR_DECRYPTION_FAILED;
    public static WIN32_ERROR ERROR_FILE_ENCRYPTED;
    public static WIN32_ERROR ERROR_NO_RECOVERY_POLICY;
    public static WIN32_ERROR ERROR_NO_EFS;
    public static WIN32_ERROR ERROR_WRONG_EFS;
    public static WIN32_ERROR ERROR_NO_USER_KEYS;
    public static WIN32_ERROR ERROR_FILE_NOT_ENCRYPTED;
    public static WIN32_ERROR ERROR_NOT_EXPORT_FORMAT;
    public static WIN32_ERROR ERROR_FILE_READ_ONLY;
    public static WIN32_ERROR ERROR_DIR_EFS_DISALLOWED;
    public static WIN32_ERROR ERROR_EFS_SERVER_NOT_TRUSTED;
    public static WIN32_ERROR ERROR_BAD_RECOVERY_POLICY;
    public static WIN32_ERROR ERROR_EFS_ALG_BLOB_TOO_BIG;
    public static WIN32_ERROR ERROR_VOLUME_NOT_SUPPORT_EFS;
    public static WIN32_ERROR ERROR_EFS_DISABLED;
    public static WIN32_ERROR ERROR_EFS_VERSION_NOT_SUPPORT;
    public static WIN32_ERROR ERROR_CS_ENCRYPTION_INVALID_SERVER_RESPONSE;
    public static WIN32_ERROR ERROR_CS_ENCRYPTION_UNSUPPORTED_SERVER;
    public static WIN32_ERROR ERROR_CS_ENCRYPTION_EXISTING_ENCRYPTED_FILE;
    public static WIN32_ERROR ERROR_CS_ENCRYPTION_NEW_ENCRYPTED_FILE;
    public static WIN32_ERROR ERROR_CS_ENCRYPTION_FILE_NOT_CSE;
    public static WIN32_ERROR ERROR_ENCRYPTION_POLICY_DENIES_OPERATION;
    public static WIN32_ERROR ERROR_WIP_ENCRYPTION_FAILED;
    public static WIN32_ERROR ERROR_NO_BROWSER_SERVERS_FOUND;
    public static WIN32_ERROR ERROR_CLUSTER_OBJECT_IS_CLUSTER_SET_VM;
    public static WIN32_ERROR ERROR_LOG_SECTOR_INVALID;
    public static WIN32_ERROR ERROR_LOG_SECTOR_PARITY_INVALID;
    public static WIN32_ERROR ERROR_LOG_SECTOR_REMAPPED;
    public static WIN32_ERROR ERROR_LOG_BLOCK_INCOMPLETE;
    public static WIN32_ERROR ERROR_LOG_INVALID_RANGE;
    public static WIN32_ERROR ERROR_LOG_BLOCKS_EXHAUSTED;
    public static WIN32_ERROR ERROR_LOG_READ_CONTEXT_INVALID;
    public static WIN32_ERROR ERROR_LOG_RESTART_INVALID;
    public static WIN32_ERROR ERROR_LOG_BLOCK_VERSION;
    public static WIN32_ERROR ERROR_LOG_BLOCK_INVALID;
    public static WIN32_ERROR ERROR_LOG_READ_MODE_INVALID;
    public static WIN32_ERROR ERROR_LOG_NO_RESTART;
    public static WIN32_ERROR ERROR_LOG_METADATA_CORRUPT;
    public static WIN32_ERROR ERROR_LOG_METADATA_INVALID;
    public static WIN32_ERROR ERROR_LOG_METADATA_INCONSISTENT;
    public static WIN32_ERROR ERROR_LOG_RESERVATION_INVALID;
    public static WIN32_ERROR ERROR_LOG_CANT_DELETE;
    public static WIN32_ERROR ERROR_LOG_CONTAINER_LIMIT_EXCEEDED;
    public static WIN32_ERROR ERROR_LOG_START_OF_LOG;
    public static WIN32_ERROR ERROR_LOG_POLICY_ALREADY_INSTALLED;
    public static WIN32_ERROR ERROR_LOG_POLICY_NOT_INSTALLED;
    public static WIN32_ERROR ERROR_LOG_POLICY_INVALID;
    public static WIN32_ERROR ERROR_LOG_POLICY_CONFLICT;
    public static WIN32_ERROR ERROR_LOG_PINNED_ARCHIVE_TAIL;
    public static WIN32_ERROR ERROR_LOG_RECORD_NONEXISTENT;
    public static WIN32_ERROR ERROR_LOG_RECORDS_RESERVED_INVALID;
    public static WIN32_ERROR ERROR_LOG_SPACE_RESERVED_INVALID;
    public static WIN32_ERROR ERROR_LOG_TAIL_INVALID;
    public static WIN32_ERROR ERROR_LOG_FULL;
    public static WIN32_ERROR ERROR_COULD_NOT_RESIZE_LOG;
    public static WIN32_ERROR ERROR_LOG_MULTIPLEXED;
    public static WIN32_ERROR ERROR_LOG_DEDICATED;
    public static WIN32_ERROR ERROR_LOG_ARCHIVE_NOT_IN_PROGRESS;
    public static WIN32_ERROR ERROR_LOG_ARCHIVE_IN_PROGRESS;
    public static WIN32_ERROR ERROR_LOG_EPHEMERAL;
    public static WIN32_ERROR ERROR_LOG_NOT_ENOUGH_CONTAINERS;
    public static WIN32_ERROR ERROR_LOG_CLIENT_ALREADY_REGISTERED;
    public static WIN32_ERROR ERROR_LOG_CLIENT_NOT_REGISTERED;
    public static WIN32_ERROR ERROR_LOG_FULL_HANDLER_IN_PROGRESS;
    public static WIN32_ERROR ERROR_LOG_CONTAINER_READ_FAILED;
    public static WIN32_ERROR ERROR_LOG_CONTAINER_WRITE_FAILED;
    public static WIN32_ERROR ERROR_LOG_CONTAINER_OPEN_FAILED;
    public static WIN32_ERROR ERROR_LOG_CONTAINER_STATE_INVALID;
    public static WIN32_ERROR ERROR_LOG_STATE_INVALID;
    public static WIN32_ERROR ERROR_LOG_PINNED;
    public static WIN32_ERROR ERROR_LOG_METADATA_FLUSH_FAILED;
    public static WIN32_ERROR ERROR_LOG_INCONSISTENT_SECURITY;
    public static WIN32_ERROR ERROR_LOG_APPENDED_FLUSH_FAILED;
    public static WIN32_ERROR ERROR_LOG_PINNED_RESERVATION;
    public static WIN32_ERROR ERROR_INVALID_TRANSACTION;
    public static WIN32_ERROR ERROR_TRANSACTION_NOT_ACTIVE;
    public static WIN32_ERROR ERROR_TRANSACTION_REQUEST_NOT_VALID;
    public static WIN32_ERROR ERROR_TRANSACTION_NOT_REQUESTED;
    public static WIN32_ERROR ERROR_TRANSACTION_ALREADY_ABORTED;
    public static WIN32_ERROR ERROR_TRANSACTION_ALREADY_COMMITTED;
    public static WIN32_ERROR ERROR_TM_INITIALIZATION_FAILED;
    public static WIN32_ERROR ERROR_RESOURCEMANAGER_READ_ONLY;
    public static WIN32_ERROR ERROR_TRANSACTION_NOT_JOINED;
    public static WIN32_ERROR ERROR_TRANSACTION_SUPERIOR_EXISTS;
    public static WIN32_ERROR ERROR_CRM_PROTOCOL_ALREADY_EXISTS;
    public static WIN32_ERROR ERROR_TRANSACTION_PROPAGATION_FAILED;
    public static WIN32_ERROR ERROR_CRM_PROTOCOL_NOT_FOUND;
    public static WIN32_ERROR ERROR_TRANSACTION_INVALID_MARSHALL_BUFFER;
    public static WIN32_ERROR ERROR_CURRENT_TRANSACTION_NOT_VALID;
    public static WIN32_ERROR ERROR_TRANSACTION_NOT_FOUND;
    public static WIN32_ERROR ERROR_RESOURCEMANAGER_NOT_FOUND;
    public static WIN32_ERROR ERROR_ENLISTMENT_NOT_FOUND;
    public static WIN32_ERROR ERROR_TRANSACTIONMANAGER_NOT_FOUND;
    public static WIN32_ERROR ERROR_TRANSACTIONMANAGER_NOT_ONLINE;
    public static WIN32_ERROR ERROR_TRANSACTIONMANAGER_RECOVERY_NAME_COLLISION;
    public static WIN32_ERROR ERROR_TRANSACTION_NOT_ROOT;
    public static WIN32_ERROR ERROR_TRANSACTION_OBJECT_EXPIRED;
    public static WIN32_ERROR ERROR_TRANSACTION_RESPONSE_NOT_ENLISTED;
    public static WIN32_ERROR ERROR_TRANSACTION_RECORD_TOO_LONG;
    public static WIN32_ERROR ERROR_IMPLICIT_TRANSACTION_NOT_SUPPORTED;
    public static WIN32_ERROR ERROR_TRANSACTION_INTEGRITY_VIOLATED;
    public static WIN32_ERROR ERROR_TRANSACTIONMANAGER_IDENTITY_MISMATCH;
    public static WIN32_ERROR ERROR_RM_CANNOT_BE_FROZEN_FOR_SNAPSHOT;
    public static WIN32_ERROR ERROR_TRANSACTION_MUST_WRITETHROUGH;
    public static WIN32_ERROR ERROR_TRANSACTION_NO_SUPERIOR;
    public static WIN32_ERROR ERROR_HEURISTIC_DAMAGE_POSSIBLE;
    public static WIN32_ERROR ERROR_TRANSACTIONAL_CONFLICT;
    public static WIN32_ERROR ERROR_RM_NOT_ACTIVE;
    public static WIN32_ERROR ERROR_RM_METADATA_CORRUPT;
    public static WIN32_ERROR ERROR_DIRECTORY_NOT_RM;
    public static WIN32_ERROR ERROR_TRANSACTIONS_UNSUPPORTED_REMOTE;
    public static WIN32_ERROR ERROR_LOG_RESIZE_INVALID_SIZE;
    public static WIN32_ERROR ERROR_OBJECT_NO_LONGER_EXISTS;
    public static WIN32_ERROR ERROR_STREAM_MINIVERSION_NOT_FOUND;
    public static WIN32_ERROR ERROR_STREAM_MINIVERSION_NOT_VALID;
    public static WIN32_ERROR ERROR_MINIVERSION_INACCESSIBLE_FROM_SPECIFIED_TRANSACTION;
    public static WIN32_ERROR ERROR_CANT_OPEN_MINIVERSION_WITH_MODIFY_INTENT;
    public static WIN32_ERROR ERROR_CANT_CREATE_MORE_STREAM_MINIVERSIONS;
    public static WIN32_ERROR ERROR_REMOTE_FILE_VERSION_MISMATCH;
    public static WIN32_ERROR ERROR_HANDLE_NO_LONGER_VALID;
    public static WIN32_ERROR ERROR_NO_TXF_METADATA;
    public static WIN32_ERROR ERROR_LOG_CORRUPTION_DETECTED;
    public static WIN32_ERROR ERROR_CANT_RECOVER_WITH_HANDLE_OPEN;
    public static WIN32_ERROR ERROR_RM_DISCONNECTED;
    public static WIN32_ERROR ERROR_ENLISTMENT_NOT_SUPERIOR;
    public static WIN32_ERROR ERROR_RECOVERY_NOT_NEEDED;
    public static WIN32_ERROR ERROR_RM_ALREADY_STARTED;
    public static WIN32_ERROR ERROR_FILE_IDENTITY_NOT_PERSISTENT;
    public static WIN32_ERROR ERROR_CANT_BREAK_TRANSACTIONAL_DEPENDENCY;
    public static WIN32_ERROR ERROR_CANT_CROSS_RM_BOUNDARY;
    public static WIN32_ERROR ERROR_TXF_DIR_NOT_EMPTY;
    public static WIN32_ERROR ERROR_INDOUBT_TRANSACTIONS_EXIST;
    public static WIN32_ERROR ERROR_TM_VOLATILE;
    public static WIN32_ERROR ERROR_ROLLBACK_TIMER_EXPIRED;
    public static WIN32_ERROR ERROR_TXF_ATTRIBUTE_CORRUPT;
    public static WIN32_ERROR ERROR_EFS_NOT_ALLOWED_IN_TRANSACTION;
    public static WIN32_ERROR ERROR_TRANSACTIONAL_OPEN_NOT_ALLOWED;
    public static WIN32_ERROR ERROR_LOG_GROWTH_FAILED;
    public static WIN32_ERROR ERROR_TRANSACTED_MAPPING_UNSUPPORTED_REMOTE;
    public static WIN32_ERROR ERROR_TXF_METADATA_ALREADY_PRESENT;
    public static WIN32_ERROR ERROR_TRANSACTION_SCOPE_CALLBACKS_NOT_SET;
    public static WIN32_ERROR ERROR_TRANSACTION_REQUIRED_PROMOTION;
    public static WIN32_ERROR ERROR_CANNOT_EXECUTE_FILE_IN_TRANSACTION;
    public static WIN32_ERROR ERROR_TRANSACTIONS_NOT_FROZEN;
    public static WIN32_ERROR ERROR_TRANSACTION_FREEZE_IN_PROGRESS;
    public static WIN32_ERROR ERROR_NOT_SNAPSHOT_VOLUME;
    public static WIN32_ERROR ERROR_NO_SAVEPOINT_WITH_OPEN_FILES;
    public static WIN32_ERROR ERROR_DATA_LOST_REPAIR;
    public static WIN32_ERROR ERROR_SPARSE_NOT_ALLOWED_IN_TRANSACTION;
    public static WIN32_ERROR ERROR_TM_IDENTITY_MISMATCH;
    public static WIN32_ERROR ERROR_FLOATED_SECTION;
    public static WIN32_ERROR ERROR_CANNOT_ACCEPT_TRANSACTED_WORK;
    public static WIN32_ERROR ERROR_CANNOT_ABORT_TRANSACTIONS;
    public static WIN32_ERROR ERROR_BAD_CLUSTERS;
    public static WIN32_ERROR ERROR_COMPRESSION_NOT_ALLOWED_IN_TRANSACTION;
    public static WIN32_ERROR ERROR_VOLUME_DIRTY;
    public static WIN32_ERROR ERROR_NO_LINK_TRACKING_IN_TRANSACTION;
    public static WIN32_ERROR ERROR_OPERATION_NOT_SUPPORTED_IN_TRANSACTION;
    public static WIN32_ERROR ERROR_EXPIRED_HANDLE;
    public static WIN32_ERROR ERROR_TRANSACTION_NOT_ENLISTED;
    public static WIN32_ERROR ERROR_CTX_WINSTATION_NAME_INVALID;
    public static WIN32_ERROR ERROR_CTX_INVALID_PD;
    public static WIN32_ERROR ERROR_CTX_PD_NOT_FOUND;
    public static WIN32_ERROR ERROR_CTX_WD_NOT_FOUND;
    public static WIN32_ERROR ERROR_CTX_CANNOT_MAKE_EVENTLOG_ENTRY;
    public static WIN32_ERROR ERROR_CTX_SERVICE_NAME_COLLISION;
    public static WIN32_ERROR ERROR_CTX_CLOSE_PENDING;
    public static WIN32_ERROR ERROR_CTX_NO_OUTBUF;
    public static WIN32_ERROR ERROR_CTX_MODEM_INF_NOT_FOUND;
    public static WIN32_ERROR ERROR_CTX_INVALID_MODEMNAME;
    public static WIN32_ERROR ERROR_CTX_MODEM_RESPONSE_ERROR;
    public static WIN32_ERROR ERROR_CTX_MODEM_RESPONSE_TIMEOUT;
    public static WIN32_ERROR ERROR_CTX_MODEM_RESPONSE_NO_CARRIER;
    public static WIN32_ERROR ERROR_CTX_MODEM_RESPONSE_NO_DIALTONE;
    public static WIN32_ERROR ERROR_CTX_MODEM_RESPONSE_BUSY;
    public static WIN32_ERROR ERROR_CTX_MODEM_RESPONSE_VOICE;
    public static WIN32_ERROR ERROR_CTX_TD_ERROR;
    public static WIN32_ERROR ERROR_CTX_WINSTATION_NOT_FOUND;
    public static WIN32_ERROR ERROR_CTX_WINSTATION_ALREADY_EXISTS;
    public static WIN32_ERROR ERROR_CTX_WINSTATION_BUSY;
    public static WIN32_ERROR ERROR_CTX_BAD_VIDEO_MODE;
    public static WIN32_ERROR ERROR_CTX_GRAPHICS_INVALID;
    public static WIN32_ERROR ERROR_CTX_LOGON_DISABLED;
    public static WIN32_ERROR ERROR_CTX_NOT_CONSOLE;
    public static WIN32_ERROR ERROR_CTX_CLIENT_QUERY_TIMEOUT;
    public static WIN32_ERROR ERROR_CTX_CONSOLE_DISCONNECT;
    public static WIN32_ERROR ERROR_CTX_CONSOLE_CONNECT;
    public static WIN32_ERROR ERROR_CTX_SHADOW_DENIED;
    public static WIN32_ERROR ERROR_CTX_WINSTATION_ACCESS_DENIED;
    public static WIN32_ERROR ERROR_CTX_INVALID_WD;
    public static WIN32_ERROR ERROR_CTX_SHADOW_INVALID;
    public static WIN32_ERROR ERROR_CTX_SHADOW_DISABLED;
    public static WIN32_ERROR ERROR_CTX_CLIENT_LICENSE_IN_USE;
    public static WIN32_ERROR ERROR_CTX_CLIENT_LICENSE_NOT_SET;
    public static WIN32_ERROR ERROR_CTX_LICENSE_NOT_AVAILABLE;
    public static WIN32_ERROR ERROR_CTX_LICENSE_CLIENT_INVALID;
    public static WIN32_ERROR ERROR_CTX_LICENSE_EXPIRED;
    public static WIN32_ERROR ERROR_CTX_SHADOW_NOT_RUNNING;
    public static WIN32_ERROR ERROR_CTX_SHADOW_ENDED_BY_MODE_CHANGE;
    public static WIN32_ERROR ERROR_ACTIVATION_COUNT_EXCEEDED;
    public static WIN32_ERROR ERROR_CTX_WINSTATIONS_DISABLED;
    public static WIN32_ERROR ERROR_CTX_ENCRYPTION_LEVEL_REQUIRED;
    public static WIN32_ERROR ERROR_CTX_SESSION_IN_USE;
    public static WIN32_ERROR ERROR_CTX_NO_FORCE_LOGOFF;
    public static WIN32_ERROR ERROR_CTX_ACCOUNT_RESTRICTION;
    public static WIN32_ERROR ERROR_RDP_PROTOCOL_ERROR;
    public static WIN32_ERROR ERROR_CTX_CDM_CONNECT;
    public static WIN32_ERROR ERROR_CTX_CDM_DISCONNECT;
    public static WIN32_ERROR ERROR_CTX_SECURITY_LAYER_ERROR;
    public static WIN32_ERROR ERROR_TS_INCOMPATIBLE_SESSIONS;
    public static WIN32_ERROR ERROR_TS_VIDEO_SUBSYSTEM_ERROR;
    public static WIN32_ERROR ERROR_DS_NOT_INSTALLED;
    public static WIN32_ERROR ERROR_DS_MEMBERSHIP_EVALUATED_LOCALLY;
    public static WIN32_ERROR ERROR_DS_NO_ATTRIBUTE_OR_VALUE;
    public static WIN32_ERROR ERROR_DS_INVALID_ATTRIBUTE_SYNTAX;
    public static WIN32_ERROR ERROR_DS_ATTRIBUTE_TYPE_UNDEFINED;
    public static WIN32_ERROR ERROR_DS_ATTRIBUTE_OR_VALUE_EXISTS;
    public static WIN32_ERROR ERROR_DS_BUSY;
    public static WIN32_ERROR ERROR_DS_UNAVAILABLE;
    public static WIN32_ERROR ERROR_DS_NO_RIDS_ALLOCATED;
    public static WIN32_ERROR ERROR_DS_NO_MORE_RIDS;
    public static WIN32_ERROR ERROR_DS_INCORRECT_ROLE_OWNER;
    public static WIN32_ERROR ERROR_DS_RIDMGR_INIT_ERROR;
    public static WIN32_ERROR ERROR_DS_OBJ_CLASS_VIOLATION;
    public static WIN32_ERROR ERROR_DS_CANT_ON_NON_LEAF;
    public static WIN32_ERROR ERROR_DS_CANT_ON_RDN;
    public static WIN32_ERROR ERROR_DS_CANT_MOD_OBJ_CLASS;
    public static WIN32_ERROR ERROR_DS_CROSS_DOM_MOVE_ERROR;
    public static WIN32_ERROR ERROR_DS_GC_NOT_AVAILABLE;
    public static WIN32_ERROR ERROR_SHARED_POLICY;
    public static WIN32_ERROR ERROR_POLICY_OBJECT_NOT_FOUND;
    public static WIN32_ERROR ERROR_POLICY_ONLY_IN_DS;
    public static WIN32_ERROR ERROR_PROMOTION_ACTIVE;
    public static WIN32_ERROR ERROR_NO_PROMOTION_ACTIVE;
    public static WIN32_ERROR ERROR_DS_OPERATIONS_ERROR;
    public static WIN32_ERROR ERROR_DS_PROTOCOL_ERROR;
    public static WIN32_ERROR ERROR_DS_TIMELIMIT_EXCEEDED;
    public static WIN32_ERROR ERROR_DS_SIZELIMIT_EXCEEDED;
    public static WIN32_ERROR ERROR_DS_ADMIN_LIMIT_EXCEEDED;
    public static WIN32_ERROR ERROR_DS_COMPARE_FALSE;
    public static WIN32_ERROR ERROR_DS_COMPARE_TRUE;
    public static WIN32_ERROR ERROR_DS_AUTH_METHOD_NOT_SUPPORTED;
    public static WIN32_ERROR ERROR_DS_STRONG_AUTH_REQUIRED;
    public static WIN32_ERROR ERROR_DS_INAPPROPRIATE_AUTH;
    public static WIN32_ERROR ERROR_DS_AUTH_UNKNOWN;
    public static WIN32_ERROR ERROR_DS_REFERRAL;
    public static WIN32_ERROR ERROR_DS_UNAVAILABLE_CRIT_EXTENSION;
    public static WIN32_ERROR ERROR_DS_CONFIDENTIALITY_REQUIRED;
    public static WIN32_ERROR ERROR_DS_INAPPROPRIATE_MATCHING;
    public static WIN32_ERROR ERROR_DS_CONSTRAINT_VIOLATION;
    public static WIN32_ERROR ERROR_DS_NO_SUCH_OBJECT;
    public static WIN32_ERROR ERROR_DS_ALIAS_PROBLEM;
    public static WIN32_ERROR ERROR_DS_INVALID_DN_SYNTAX;
    public static WIN32_ERROR ERROR_DS_IS_LEAF;
    public static WIN32_ERROR ERROR_DS_ALIAS_DEREF_PROBLEM;
    public static WIN32_ERROR ERROR_DS_UNWILLING_TO_PERFORM;
    public static WIN32_ERROR ERROR_DS_LOOP_DETECT;
    public static WIN32_ERROR ERROR_DS_NAMING_VIOLATION;
    public static WIN32_ERROR ERROR_DS_OBJECT_RESULTS_TOO_LARGE;
    public static WIN32_ERROR ERROR_DS_AFFECTS_MULTIPLE_DSAS;
    public static WIN32_ERROR ERROR_DS_SERVER_DOWN;
    public static WIN32_ERROR ERROR_DS_LOCAL_ERROR;
    public static WIN32_ERROR ERROR_DS_ENCODING_ERROR;
    public static WIN32_ERROR ERROR_DS_DECODING_ERROR;
    public static WIN32_ERROR ERROR_DS_FILTER_UNKNOWN;
    public static WIN32_ERROR ERROR_DS_PARAM_ERROR;
    public static WIN32_ERROR ERROR_DS_NOT_SUPPORTED;
    public static WIN32_ERROR ERROR_DS_NO_RESULTS_RETURNED;
    public static WIN32_ERROR ERROR_DS_CONTROL_NOT_FOUND;
    public static WIN32_ERROR ERROR_DS_CLIENT_LOOP;
    public static WIN32_ERROR ERROR_DS_REFERRAL_LIMIT_EXCEEDED;
    public static WIN32_ERROR ERROR_DS_SORT_CONTROL_MISSING;
    public static WIN32_ERROR ERROR_DS_OFFSET_RANGE_ERROR;
    public static WIN32_ERROR ERROR_DS_RIDMGR_DISABLED;
    public static WIN32_ERROR ERROR_DS_ROOT_MUST_BE_NC;
    public static WIN32_ERROR ERROR_DS_ADD_REPLICA_INHIBITED;
    public static WIN32_ERROR ERROR_DS_ATT_NOT_DEF_IN_SCHEMA;
    public static WIN32_ERROR ERROR_DS_MAX_OBJ_SIZE_EXCEEDED;
    public static WIN32_ERROR ERROR_DS_OBJ_STRING_NAME_EXISTS;
    public static WIN32_ERROR ERROR_DS_NO_RDN_DEFINED_IN_SCHEMA;
    public static WIN32_ERROR ERROR_DS_RDN_DOESNT_MATCH_SCHEMA;
    public static WIN32_ERROR ERROR_DS_NO_REQUESTED_ATTS_FOUND;
    public static WIN32_ERROR ERROR_DS_USER_BUFFER_TO_SMALL;
    public static WIN32_ERROR ERROR_DS_ATT_IS_NOT_ON_OBJ;
    public static WIN32_ERROR ERROR_DS_ILLEGAL_MOD_OPERATION;
    public static WIN32_ERROR ERROR_DS_OBJ_TOO_LARGE;
    public static WIN32_ERROR ERROR_DS_BAD_INSTANCE_TYPE;
    public static WIN32_ERROR ERROR_DS_MASTERDSA_REQUIRED;
    public static WIN32_ERROR ERROR_DS_OBJECT_CLASS_REQUIRED;
    public static WIN32_ERROR ERROR_DS_MISSING_REQUIRED_ATT;
    public static WIN32_ERROR ERROR_DS_ATT_NOT_DEF_FOR_CLASS;
    public static WIN32_ERROR ERROR_DS_ATT_ALREADY_EXISTS;
    public static WIN32_ERROR ERROR_DS_CANT_ADD_ATT_VALUES;
    public static WIN32_ERROR ERROR_DS_SINGLE_VALUE_CONSTRAINT;
    public static WIN32_ERROR ERROR_DS_RANGE_CONSTRAINT;
    public static WIN32_ERROR ERROR_DS_ATT_VAL_ALREADY_EXISTS;
    public static WIN32_ERROR ERROR_DS_CANT_REM_MISSING_ATT;
    public static WIN32_ERROR ERROR_DS_CANT_REM_MISSING_ATT_VAL;
    public static WIN32_ERROR ERROR_DS_ROOT_CANT_BE_SUBREF;
    public static WIN32_ERROR ERROR_DS_NO_CHAINING;
    public static WIN32_ERROR ERROR_DS_NO_CHAINED_EVAL;
    public static WIN32_ERROR ERROR_DS_NO_PARENT_OBJECT;
    public static WIN32_ERROR ERROR_DS_PARENT_IS_AN_ALIAS;
    public static WIN32_ERROR ERROR_DS_CANT_MIX_MASTER_AND_REPS;
    public static WIN32_ERROR ERROR_DS_CHILDREN_EXIST;
    public static WIN32_ERROR ERROR_DS_OBJ_NOT_FOUND;
    public static WIN32_ERROR ERROR_DS_ALIASED_OBJ_MISSING;
    public static WIN32_ERROR ERROR_DS_BAD_NAME_SYNTAX;
    public static WIN32_ERROR ERROR_DS_ALIAS_POINTS_TO_ALIAS;
    public static WIN32_ERROR ERROR_DS_CANT_DEREF_ALIAS;
    public static WIN32_ERROR ERROR_DS_OUT_OF_SCOPE;
    public static WIN32_ERROR ERROR_DS_OBJECT_BEING_REMOVED;
    public static WIN32_ERROR ERROR_DS_CANT_DELETE_DSA_OBJ;
    public static WIN32_ERROR ERROR_DS_GENERIC_ERROR;
    public static WIN32_ERROR ERROR_DS_DSA_MUST_BE_INT_MASTER;
    public static WIN32_ERROR ERROR_DS_CLASS_NOT_DSA;
    public static WIN32_ERROR ERROR_DS_INSUFF_ACCESS_RIGHTS;
    public static WIN32_ERROR ERROR_DS_ILLEGAL_SUPERIOR;
    public static WIN32_ERROR ERROR_DS_ATTRIBUTE_OWNED_BY_SAM;
    public static WIN32_ERROR ERROR_DS_NAME_TOO_MANY_PARTS;
    public static WIN32_ERROR ERROR_DS_NAME_TOO_LONG;
    public static WIN32_ERROR ERROR_DS_NAME_VALUE_TOO_LONG;
    public static WIN32_ERROR ERROR_DS_NAME_UNPARSEABLE;
    public static WIN32_ERROR ERROR_DS_NAME_TYPE_UNKNOWN;
    public static WIN32_ERROR ERROR_DS_NOT_AN_OBJECT;
    public static WIN32_ERROR ERROR_DS_SEC_DESC_TOO_SHORT;
    public static WIN32_ERROR ERROR_DS_SEC_DESC_INVALID;
    public static WIN32_ERROR ERROR_DS_NO_DELETED_NAME;
    public static WIN32_ERROR ERROR_DS_SUBREF_MUST_HAVE_PARENT;
    public static WIN32_ERROR ERROR_DS_NCNAME_MUST_BE_NC;
    public static WIN32_ERROR ERROR_DS_CANT_ADD_SYSTEM_ONLY;
    public static WIN32_ERROR ERROR_DS_CLASS_MUST_BE_CONCRETE;
    public static WIN32_ERROR ERROR_DS_INVALID_DMD;
    public static WIN32_ERROR ERROR_DS_OBJ_GUID_EXISTS;
    public static WIN32_ERROR ERROR_DS_NOT_ON_BACKLINK;
    public static WIN32_ERROR ERROR_DS_NO_CROSSREF_FOR_NC;
    public static WIN32_ERROR ERROR_DS_SHUTTING_DOWN;
    public static WIN32_ERROR ERROR_DS_UNKNOWN_OPERATION;
    public static WIN32_ERROR ERROR_DS_INVALID_ROLE_OWNER;
    public static WIN32_ERROR ERROR_DS_COULDNT_CONTACT_FSMO;
    public static WIN32_ERROR ERROR_DS_CROSS_NC_DN_RENAME;
    public static WIN32_ERROR ERROR_DS_CANT_MOD_SYSTEM_ONLY;
    public static WIN32_ERROR ERROR_DS_REPLICATOR_ONLY;
    public static WIN32_ERROR ERROR_DS_OBJ_CLASS_NOT_DEFINED;
    public static WIN32_ERROR ERROR_DS_OBJ_CLASS_NOT_SUBCLASS;
    public static WIN32_ERROR ERROR_DS_NAME_REFERENCE_INVALID;
    public static WIN32_ERROR ERROR_DS_CROSS_REF_EXISTS;
    public static WIN32_ERROR ERROR_DS_CANT_DEL_MASTER_CROSSREF;
    public static WIN32_ERROR ERROR_DS_SUBTREE_NOTIFY_NOT_NC_HEAD;
    public static WIN32_ERROR ERROR_DS_NOTIFY_FILTER_TOO_COMPLEX;
    public static WIN32_ERROR ERROR_DS_DUP_RDN;
    public static WIN32_ERROR ERROR_DS_DUP_OID;
    public static WIN32_ERROR ERROR_DS_DUP_MAPI_ID;
    public static WIN32_ERROR ERROR_DS_DUP_SCHEMA_ID_GUID;
    public static WIN32_ERROR ERROR_DS_DUP_LDAP_DISPLAY_NAME;
    public static WIN32_ERROR ERROR_DS_SEMANTIC_ATT_TEST;
    public static WIN32_ERROR ERROR_DS_SYNTAX_MISMATCH;
    public static WIN32_ERROR ERROR_DS_EXISTS_IN_MUST_HAVE;
    public static WIN32_ERROR ERROR_DS_EXISTS_IN_MAY_HAVE;
    public static WIN32_ERROR ERROR_DS_NONEXISTENT_MAY_HAVE;
    public static WIN32_ERROR ERROR_DS_NONEXISTENT_MUST_HAVE;
    public static WIN32_ERROR ERROR_DS_AUX_CLS_TEST_FAIL;
    public static WIN32_ERROR ERROR_DS_NONEXISTENT_POSS_SUP;
    public static WIN32_ERROR ERROR_DS_SUB_CLS_TEST_FAIL;
    public static WIN32_ERROR ERROR_DS_BAD_RDN_ATT_ID_SYNTAX;
    public static WIN32_ERROR ERROR_DS_EXISTS_IN_AUX_CLS;
    public static WIN32_ERROR ERROR_DS_EXISTS_IN_SUB_CLS;
    public static WIN32_ERROR ERROR_DS_EXISTS_IN_POSS_SUP;
    public static WIN32_ERROR ERROR_DS_RECALCSCHEMA_FAILED;
    public static WIN32_ERROR ERROR_DS_TREE_DELETE_NOT_FINISHED;
    public static WIN32_ERROR ERROR_DS_CANT_DELETE;
    public static WIN32_ERROR ERROR_DS_ATT_SCHEMA_REQ_ID;
    public static WIN32_ERROR ERROR_DS_BAD_ATT_SCHEMA_SYNTAX;
    public static WIN32_ERROR ERROR_DS_CANT_CACHE_ATT;
    public static WIN32_ERROR ERROR_DS_CANT_CACHE_CLASS;
    public static WIN32_ERROR ERROR_DS_CANT_REMOVE_ATT_CACHE;
    public static WIN32_ERROR ERROR_DS_CANT_REMOVE_CLASS_CACHE;
    public static WIN32_ERROR ERROR_DS_CANT_RETRIEVE_DN;
    public static WIN32_ERROR ERROR_DS_MISSING_SUPREF;
    public static WIN32_ERROR ERROR_DS_CANT_RETRIEVE_INSTANCE;
    public static WIN32_ERROR ERROR_DS_CODE_INCONSISTENCY;
    public static WIN32_ERROR ERROR_DS_DATABASE_ERROR;
    public static WIN32_ERROR ERROR_DS_GOVERNSID_MISSING;
    public static WIN32_ERROR ERROR_DS_MISSING_EXPECTED_ATT;
    public static WIN32_ERROR ERROR_DS_NCNAME_MISSING_CR_REF;
    public static WIN32_ERROR ERROR_DS_SECURITY_CHECKING_ERROR;
    public static WIN32_ERROR ERROR_DS_SCHEMA_NOT_LOADED;
    public static WIN32_ERROR ERROR_DS_SCHEMA_ALLOC_FAILED;
    public static WIN32_ERROR ERROR_DS_ATT_SCHEMA_REQ_SYNTAX;
    public static WIN32_ERROR ERROR_DS_GCVERIFY_ERROR;
    public static WIN32_ERROR ERROR_DS_DRA_SCHEMA_MISMATCH;
    public static WIN32_ERROR ERROR_DS_CANT_FIND_DSA_OBJ;
    public static WIN32_ERROR ERROR_DS_CANT_FIND_EXPECTED_NC;
    public static WIN32_ERROR ERROR_DS_CANT_FIND_NC_IN_CACHE;
    public static WIN32_ERROR ERROR_DS_CANT_RETRIEVE_CHILD;
    public static WIN32_ERROR ERROR_DS_SECURITY_ILLEGAL_MODIFY;
    public static WIN32_ERROR ERROR_DS_CANT_REPLACE_HIDDEN_REC;
    public static WIN32_ERROR ERROR_DS_BAD_HIERARCHY_FILE;
    public static WIN32_ERROR ERROR_DS_BUILD_HIERARCHY_TABLE_FAILED;
    public static WIN32_ERROR ERROR_DS_CONFIG_PARAM_MISSING;
    public static WIN32_ERROR ERROR_DS_COUNTING_AB_INDICES_FAILED;
    public static WIN32_ERROR ERROR_DS_HIERARCHY_TABLE_MALLOC_FAILED;
    public static WIN32_ERROR ERROR_DS_INTERNAL_FAILURE;
    public static WIN32_ERROR ERROR_DS_UNKNOWN_ERROR;
    public static WIN32_ERROR ERROR_DS_ROOT_REQUIRES_CLASS_TOP;
    public static WIN32_ERROR ERROR_DS_REFUSING_FSMO_ROLES;
    public static WIN32_ERROR ERROR_DS_MISSING_FSMO_SETTINGS;
    public static WIN32_ERROR ERROR_DS_UNABLE_TO_SURRENDER_ROLES;
    public static WIN32_ERROR ERROR_DS_DRA_GENERIC;
    public static WIN32_ERROR ERROR_DS_DRA_INVALID_PARAMETER;
    public static WIN32_ERROR ERROR_DS_DRA_BUSY;
    public static WIN32_ERROR ERROR_DS_DRA_BAD_DN;
    public static WIN32_ERROR ERROR_DS_DRA_BAD_NC;
    public static WIN32_ERROR ERROR_DS_DRA_DN_EXISTS;
    public static WIN32_ERROR ERROR_DS_DRA_INTERNAL_ERROR;
    public static WIN32_ERROR ERROR_DS_DRA_INCONSISTENT_DIT;
    public static WIN32_ERROR ERROR_DS_DRA_CONNECTION_FAILED;
    public static WIN32_ERROR ERROR_DS_DRA_BAD_INSTANCE_TYPE;
    public static WIN32_ERROR ERROR_DS_DRA_OUT_OF_MEM;
    public static WIN32_ERROR ERROR_DS_DRA_MAIL_PROBLEM;
    public static WIN32_ERROR ERROR_DS_DRA_REF_ALREADY_EXISTS;
    public static WIN32_ERROR ERROR_DS_DRA_REF_NOT_FOUND;
    public static WIN32_ERROR ERROR_DS_DRA_OBJ_IS_REP_SOURCE;
    public static WIN32_ERROR ERROR_DS_DRA_DB_ERROR;
    public static WIN32_ERROR ERROR_DS_DRA_NO_REPLICA;
    public static WIN32_ERROR ERROR_DS_DRA_ACCESS_DENIED;
    public static WIN32_ERROR ERROR_DS_DRA_NOT_SUPPORTED;
    public static WIN32_ERROR ERROR_DS_DRA_RPC_CANCELLED;
    public static WIN32_ERROR ERROR_DS_DRA_SOURCE_DISABLED;
    public static WIN32_ERROR ERROR_DS_DRA_SINK_DISABLED;
    public static WIN32_ERROR ERROR_DS_DRA_NAME_COLLISION;
    public static WIN32_ERROR ERROR_DS_DRA_SOURCE_REINSTALLED;
    public static WIN32_ERROR ERROR_DS_DRA_MISSING_PARENT;
    public static WIN32_ERROR ERROR_DS_DRA_PREEMPTED;
    public static WIN32_ERROR ERROR_DS_DRA_ABANDON_SYNC;
    public static WIN32_ERROR ERROR_DS_DRA_SHUTDOWN;
    public static WIN32_ERROR ERROR_DS_DRA_INCOMPATIBLE_PARTIAL_SET;
    public static WIN32_ERROR ERROR_DS_DRA_SOURCE_IS_PARTIAL_REPLICA;
    public static WIN32_ERROR ERROR_DS_DRA_EXTN_CONNECTION_FAILED;
    public static WIN32_ERROR ERROR_DS_INSTALL_SCHEMA_MISMATCH;
    public static WIN32_ERROR ERROR_DS_DUP_LINK_ID;
    public static WIN32_ERROR ERROR_DS_NAME_ERROR_RESOLVING;
    public static WIN32_ERROR ERROR_DS_NAME_ERROR_NOT_FOUND;
    public static WIN32_ERROR ERROR_DS_NAME_ERROR_NOT_UNIQUE;
    public static WIN32_ERROR ERROR_DS_NAME_ERROR_NO_MAPPING;
    public static WIN32_ERROR ERROR_DS_NAME_ERROR_DOMAIN_ONLY;
    public static WIN32_ERROR ERROR_DS_NAME_ERROR_NO_SYNTACTICAL_MAPPING;
    public static WIN32_ERROR ERROR_DS_CONSTRUCTED_ATT_MOD;
    public static WIN32_ERROR ERROR_DS_WRONG_OM_OBJ_CLASS;
    public static WIN32_ERROR ERROR_DS_DRA_REPL_PENDING;
    public static WIN32_ERROR ERROR_DS_DS_REQUIRED;
    public static WIN32_ERROR ERROR_DS_INVALID_LDAP_DISPLAY_NAME;
    public static WIN32_ERROR ERROR_DS_NON_BASE_SEARCH;
    public static WIN32_ERROR ERROR_DS_CANT_RETRIEVE_ATTS;
    public static WIN32_ERROR ERROR_DS_BACKLINK_WITHOUT_LINK;
    public static WIN32_ERROR ERROR_DS_EPOCH_MISMATCH;
    public static WIN32_ERROR ERROR_DS_SRC_NAME_MISMATCH;
    public static WIN32_ERROR ERROR_DS_SRC_AND_DST_NC_IDENTICAL;
    public static WIN32_ERROR ERROR_DS_DST_NC_MISMATCH;
    public static WIN32_ERROR ERROR_DS_NOT_AUTHORITIVE_FOR_DST_NC;
    public static WIN32_ERROR ERROR_DS_SRC_GUID_MISMATCH;
    public static WIN32_ERROR ERROR_DS_CANT_MOVE_DELETED_OBJECT;
    public static WIN32_ERROR ERROR_DS_PDC_OPERATION_IN_PROGRESS;
    public static WIN32_ERROR ERROR_DS_CROSS_DOMAIN_CLEANUP_REQD;
    public static WIN32_ERROR ERROR_DS_ILLEGAL_XDOM_MOVE_OPERATION;
    public static WIN32_ERROR ERROR_DS_CANT_WITH_ACCT_GROUP_MEMBERSHPS;
    public static WIN32_ERROR ERROR_DS_NC_MUST_HAVE_NC_PARENT;
    public static WIN32_ERROR ERROR_DS_CR_IMPOSSIBLE_TO_VALIDATE;
    public static WIN32_ERROR ERROR_DS_DST_DOMAIN_NOT_NATIVE;
    public static WIN32_ERROR ERROR_DS_MISSING_INFRASTRUCTURE_CONTAINER;
    public static WIN32_ERROR ERROR_DS_CANT_MOVE_ACCOUNT_GROUP;
    public static WIN32_ERROR ERROR_DS_CANT_MOVE_RESOURCE_GROUP;
    public static WIN32_ERROR ERROR_DS_INVALID_SEARCH_FLAG;
    public static WIN32_ERROR ERROR_DS_NO_TREE_DELETE_ABOVE_NC;
    public static WIN32_ERROR ERROR_DS_COULDNT_LOCK_TREE_FOR_DELETE;
    public static WIN32_ERROR ERROR_DS_COULDNT_IDENTIFY_OBJECTS_FOR_TREE_DELETE;
    public static WIN32_ERROR ERROR_DS_SAM_INIT_FAILURE;
    public static WIN32_ERROR ERROR_DS_SENSITIVE_GROUP_VIOLATION;
    public static WIN32_ERROR ERROR_DS_CANT_MOD_PRIMARYGROUPID;
    public static WIN32_ERROR ERROR_DS_ILLEGAL_BASE_SCHEMA_MOD;
    public static WIN32_ERROR ERROR_DS_NONSAFE_SCHEMA_CHANGE;
    public static WIN32_ERROR ERROR_DS_SCHEMA_UPDATE_DISALLOWED;
    public static WIN32_ERROR ERROR_DS_CANT_CREATE_UNDER_SCHEMA;
    public static WIN32_ERROR ERROR_DS_INSTALL_NO_SRC_SCH_VERSION;
    public static WIN32_ERROR ERROR_DS_INSTALL_NO_SCH_VERSION_IN_INIFILE;
    public static WIN32_ERROR ERROR_DS_INVALID_GROUP_TYPE;
    public static WIN32_ERROR ERROR_DS_NO_NEST_GLOBALGROUP_IN_MIXEDDOMAIN;
    public static WIN32_ERROR ERROR_DS_NO_NEST_LOCALGROUP_IN_MIXEDDOMAIN;
    public static WIN32_ERROR ERROR_DS_GLOBAL_CANT_HAVE_LOCAL_MEMBER;
    public static WIN32_ERROR ERROR_DS_GLOBAL_CANT_HAVE_UNIVERSAL_MEMBER;
    public static WIN32_ERROR ERROR_DS_UNIVERSAL_CANT_HAVE_LOCAL_MEMBER;
    public static WIN32_ERROR ERROR_DS_GLOBAL_CANT_HAVE_CROSSDOMAIN_MEMBER;
    public static WIN32_ERROR ERROR_DS_LOCAL_CANT_HAVE_CROSSDOMAIN_LOCAL_MEMBER;
    public static WIN32_ERROR ERROR_DS_HAVE_PRIMARY_MEMBERS;
    public static WIN32_ERROR ERROR_DS_STRING_SD_CONVERSION_FAILED;
    public static WIN32_ERROR ERROR_DS_NAMING_MASTER_GC;
    public static WIN32_ERROR ERROR_DS_DNS_LOOKUP_FAILURE;
    public static WIN32_ERROR ERROR_DS_COULDNT_UPDATE_SPNS;
    public static WIN32_ERROR ERROR_DS_CANT_RETRIEVE_SD;
    public static WIN32_ERROR ERROR_DS_KEY_NOT_UNIQUE;
    public static WIN32_ERROR ERROR_DS_WRONG_LINKED_ATT_SYNTAX;
    public static WIN32_ERROR ERROR_DS_SAM_NEED_BOOTKEY_PASSWORD;
    public static WIN32_ERROR ERROR_DS_SAM_NEED_BOOTKEY_FLOPPY;
    public static WIN32_ERROR ERROR_DS_CANT_START;
    public static WIN32_ERROR ERROR_DS_INIT_FAILURE;
    public static WIN32_ERROR ERROR_DS_NO_PKT_PRIVACY_ON_CONNECTION;
    public static WIN32_ERROR ERROR_DS_SOURCE_DOMAIN_IN_FOREST;
    public static WIN32_ERROR ERROR_DS_DESTINATION_DOMAIN_NOT_IN_FOREST;
    public static WIN32_ERROR ERROR_DS_DESTINATION_AUDITING_NOT_ENABLED;
    public static WIN32_ERROR ERROR_DS_CANT_FIND_DC_FOR_SRC_DOMAIN;
    public static WIN32_ERROR ERROR_DS_SRC_OBJ_NOT_GROUP_OR_USER;
    public static WIN32_ERROR ERROR_DS_SRC_SID_EXISTS_IN_FOREST;
    public static WIN32_ERROR ERROR_DS_SRC_AND_DST_OBJECT_CLASS_MISMATCH;
    public static WIN32_ERROR ERROR_SAM_INIT_FAILURE;
    public static WIN32_ERROR ERROR_DS_DRA_SCHEMA_INFO_SHIP;
    public static WIN32_ERROR ERROR_DS_DRA_SCHEMA_CONFLICT;
    public static WIN32_ERROR ERROR_DS_DRA_EARLIER_SCHEMA_CONFLICT;
    public static WIN32_ERROR ERROR_DS_DRA_OBJ_NC_MISMATCH;
    public static WIN32_ERROR ERROR_DS_NC_STILL_HAS_DSAS;
    public static WIN32_ERROR ERROR_DS_GC_REQUIRED;
    public static WIN32_ERROR ERROR_DS_LOCAL_MEMBER_OF_LOCAL_ONLY;
    public static WIN32_ERROR ERROR_DS_NO_FPO_IN_UNIVERSAL_GROUPS;
    public static WIN32_ERROR ERROR_DS_CANT_ADD_TO_GC;
    public static WIN32_ERROR ERROR_DS_NO_CHECKPOINT_WITH_PDC;
    public static WIN32_ERROR ERROR_DS_SOURCE_AUDITING_NOT_ENABLED;
    public static WIN32_ERROR ERROR_DS_CANT_CREATE_IN_NONDOMAIN_NC;
    public static WIN32_ERROR ERROR_DS_INVALID_NAME_FOR_SPN;
    public static WIN32_ERROR ERROR_DS_FILTER_USES_CONTRUCTED_ATTRS;
    public static WIN32_ERROR ERROR_DS_UNICODEPWD_NOT_IN_QUOTES;
    public static WIN32_ERROR ERROR_DS_MACHINE_ACCOUNT_QUOTA_EXCEEDED;
    public static WIN32_ERROR ERROR_DS_MUST_BE_RUN_ON_DST_DC;
    public static WIN32_ERROR ERROR_DS_SRC_DC_MUST_BE_SP4_OR_GREATER;
    public static WIN32_ERROR ERROR_DS_CANT_TREE_DELETE_CRITICAL_OBJ;
    public static WIN32_ERROR ERROR_DS_INIT_FAILURE_CONSOLE;
    public static WIN32_ERROR ERROR_DS_SAM_INIT_FAILURE_CONSOLE;
    public static WIN32_ERROR ERROR_DS_FOREST_VERSION_TOO_HIGH;
    public static WIN32_ERROR ERROR_DS_DOMAIN_VERSION_TOO_HIGH;
    public static WIN32_ERROR ERROR_DS_FOREST_VERSION_TOO_LOW;
    public static WIN32_ERROR ERROR_DS_DOMAIN_VERSION_TOO_LOW;
    public static WIN32_ERROR ERROR_DS_INCOMPATIBLE_VERSION;
    public static WIN32_ERROR ERROR_DS_LOW_DSA_VERSION;
    public static WIN32_ERROR ERROR_DS_NO_BEHAVIOR_VERSION_IN_MIXEDDOMAIN;
    public static WIN32_ERROR ERROR_DS_NOT_SUPPORTED_SORT_ORDER;
    public static WIN32_ERROR ERROR_DS_NAME_NOT_UNIQUE;
    public static WIN32_ERROR ERROR_DS_MACHINE_ACCOUNT_CREATED_PRENT4;
    public static WIN32_ERROR ERROR_DS_OUT_OF_VERSION_STORE;
    public static WIN32_ERROR ERROR_DS_INCOMPATIBLE_CONTROLS_USED;
    public static WIN32_ERROR ERROR_DS_NO_REF_DOMAIN;
    public static WIN32_ERROR ERROR_DS_RESERVED_LINK_ID;
    public static WIN32_ERROR ERROR_DS_LINK_ID_NOT_AVAILABLE;
    public static WIN32_ERROR ERROR_DS_AG_CANT_HAVE_UNIVERSAL_MEMBER;
    public static WIN32_ERROR ERROR_DS_MODIFYDN_DISALLOWED_BY_INSTANCE_TYPE;
    public static WIN32_ERROR ERROR_DS_NO_OBJECT_MOVE_IN_SCHEMA_NC;
    public static WIN32_ERROR ERROR_DS_MODIFYDN_DISALLOWED_BY_FLAG;
    public static WIN32_ERROR ERROR_DS_MODIFYDN_WRONG_GRANDPARENT;
    public static WIN32_ERROR ERROR_DS_NAME_ERROR_TRUST_REFERRAL;
    public static WIN32_ERROR ERROR_NOT_SUPPORTED_ON_STANDARD_SERVER;
    public static WIN32_ERROR ERROR_DS_CANT_ACCESS_REMOTE_PART_OF_AD;
    public static WIN32_ERROR ERROR_DS_CR_IMPOSSIBLE_TO_VALIDATE_V2;
    public static WIN32_ERROR ERROR_DS_THREAD_LIMIT_EXCEEDED;
    public static WIN32_ERROR ERROR_DS_NOT_CLOSEST;
    public static WIN32_ERROR ERROR_DS_CANT_DERIVE_SPN_WITHOUT_SERVER_REF;
    public static WIN32_ERROR ERROR_DS_SINGLE_USER_MODE_FAILED;
    public static WIN32_ERROR ERROR_DS_NTDSCRIPT_SYNTAX_ERROR;
    public static WIN32_ERROR ERROR_DS_NTDSCRIPT_PROCESS_ERROR;
    public static WIN32_ERROR ERROR_DS_DIFFERENT_REPL_EPOCHS;
    public static WIN32_ERROR ERROR_DS_DRS_EXTENSIONS_CHANGED;
    public static WIN32_ERROR ERROR_DS_REPLICA_SET_CHANGE_NOT_ALLOWED_ON_DISABLED_CR;
    public static WIN32_ERROR ERROR_DS_NO_MSDS_INTID;
    public static WIN32_ERROR ERROR_DS_DUP_MSDS_INTID;
    public static WIN32_ERROR ERROR_DS_EXISTS_IN_RDNATTID;
    public static WIN32_ERROR ERROR_DS_AUTHORIZATION_FAILED;
    public static WIN32_ERROR ERROR_DS_INVALID_SCRIPT;
    public static WIN32_ERROR ERROR_DS_REMOTE_CROSSREF_OP_FAILED;
    public static WIN32_ERROR ERROR_DS_CROSS_REF_BUSY;
    public static WIN32_ERROR ERROR_DS_CANT_DERIVE_SPN_FOR_DELETED_DOMAIN;
    public static WIN32_ERROR ERROR_DS_CANT_DEMOTE_WITH_WRITEABLE_NC;
    public static WIN32_ERROR ERROR_DS_DUPLICATE_ID_FOUND;
    public static WIN32_ERROR ERROR_DS_INSUFFICIENT_ATTR_TO_CREATE_OBJECT;
    public static WIN32_ERROR ERROR_DS_GROUP_CONVERSION_ERROR;
    public static WIN32_ERROR ERROR_DS_CANT_MOVE_APP_BASIC_GROUP;
    public static WIN32_ERROR ERROR_DS_CANT_MOVE_APP_QUERY_GROUP;
    public static WIN32_ERROR ERROR_DS_ROLE_NOT_VERIFIED;
    public static WIN32_ERROR ERROR_DS_WKO_CONTAINER_CANNOT_BE_SPECIAL;
    public static WIN32_ERROR ERROR_DS_DOMAIN_RENAME_IN_PROGRESS;
    public static WIN32_ERROR ERROR_DS_EXISTING_AD_CHILD_NC;
    public static WIN32_ERROR ERROR_DS_REPL_LIFETIME_EXCEEDED;
    public static WIN32_ERROR ERROR_DS_DISALLOWED_IN_SYSTEM_CONTAINER;
    public static WIN32_ERROR ERROR_DS_LDAP_SEND_QUEUE_FULL;
    public static WIN32_ERROR ERROR_DS_DRA_OUT_SCHEDULE_WINDOW;
    public static WIN32_ERROR ERROR_DS_POLICY_NOT_KNOWN;
    public static WIN32_ERROR ERROR_NO_SITE_SETTINGS_OBJECT;
    public static WIN32_ERROR ERROR_NO_SECRETS;
    public static WIN32_ERROR ERROR_NO_WRITABLE_DC_FOUND;
    public static WIN32_ERROR ERROR_DS_NO_SERVER_OBJECT;
    public static WIN32_ERROR ERROR_DS_NO_NTDSA_OBJECT;
    public static WIN32_ERROR ERROR_DS_NON_ASQ_SEARCH;
    public static WIN32_ERROR ERROR_DS_AUDIT_FAILURE;
    public static WIN32_ERROR ERROR_DS_INVALID_SEARCH_FLAG_SUBTREE;
    public static WIN32_ERROR ERROR_DS_INVALID_SEARCH_FLAG_TUPLE;
    public static WIN32_ERROR ERROR_DS_HIERARCHY_TABLE_TOO_DEEP;
    public static WIN32_ERROR ERROR_DS_DRA_CORRUPT_UTD_VECTOR;
    public static WIN32_ERROR ERROR_DS_DRA_SECRETS_DENIED;
    public static WIN32_ERROR ERROR_DS_RESERVED_MAPI_ID;
    public static WIN32_ERROR ERROR_DS_MAPI_ID_NOT_AVAILABLE;
    public static WIN32_ERROR ERROR_DS_DRA_MISSING_KRBTGT_SECRET;
    public static WIN32_ERROR ERROR_DS_DOMAIN_NAME_EXISTS_IN_FOREST;
    public static WIN32_ERROR ERROR_DS_FLAT_NAME_EXISTS_IN_FOREST;
    public static WIN32_ERROR ERROR_INVALID_USER_PRINCIPAL_NAME;
    public static WIN32_ERROR ERROR_DS_OID_MAPPED_GROUP_CANT_HAVE_MEMBERS;
    public static WIN32_ERROR ERROR_DS_OID_NOT_FOUND;
    public static WIN32_ERROR ERROR_DS_DRA_RECYCLED_TARGET;
    public static WIN32_ERROR ERROR_DS_DISALLOWED_NC_REDIRECT;
    public static WIN32_ERROR ERROR_DS_HIGH_ADLDS_FFL;
    public static WIN32_ERROR ERROR_DS_HIGH_DSA_VERSION;
    public static WIN32_ERROR ERROR_DS_LOW_ADLDS_FFL;
    public static WIN32_ERROR ERROR_DOMAIN_SID_SAME_AS_LOCAL_WORKSTATION;
    public static WIN32_ERROR ERROR_DS_UNDELETE_SAM_VALIDATION_FAILED;
    public static WIN32_ERROR ERROR_INCORRECT_ACCOUNT_TYPE;
    public static WIN32_ERROR ERROR_DS_SPN_VALUE_NOT_UNIQUE_IN_FOREST;
    public static WIN32_ERROR ERROR_DS_UPN_VALUE_NOT_UNIQUE_IN_FOREST;
    public static WIN32_ERROR ERROR_DS_MISSING_FOREST_TRUST;
    public static WIN32_ERROR ERROR_DS_VALUE_KEY_NOT_UNIQUE;
    public static WIN32_ERROR ERROR_WEAK_WHFBKEY_BLOCKED;
    public static WIN32_ERROR ERROR_DS_PER_ATTRIBUTE_AUTHZ_FAILED_DURING_ADD;
    public static WIN32_ERROR ERROR_LOCAL_POLICY_MODIFICATION_NOT_SUPPORTED;
    public static WIN32_ERROR DNS_ERROR_RESPONSE_CODES_BASE;
    public static WIN32_ERROR DNS_ERROR_RCODE_NO_ERROR;
    public static WIN32_ERROR DNS_ERROR_MASK;
    public static WIN32_ERROR DNS_ERROR_RCODE_FORMAT_ERROR;
    public static WIN32_ERROR DNS_ERROR_RCODE_SERVER_FAILURE;
    public static WIN32_ERROR DNS_ERROR_RCODE_NAME_ERROR;
    public static WIN32_ERROR DNS_ERROR_RCODE_NOT_IMPLEMENTED;
    public static WIN32_ERROR DNS_ERROR_RCODE_REFUSED;
    public static WIN32_ERROR DNS_ERROR_RCODE_YXDOMAIN;
    public static WIN32_ERROR DNS_ERROR_RCODE_YXRRSET;
    public static WIN32_ERROR DNS_ERROR_RCODE_NXRRSET;
    public static WIN32_ERROR DNS_ERROR_RCODE_NOTAUTH;
    public static WIN32_ERROR DNS_ERROR_RCODE_NOTZONE;
    public static WIN32_ERROR DNS_ERROR_RCODE_BADSIG;
    public static WIN32_ERROR DNS_ERROR_RCODE_BADKEY;
    public static WIN32_ERROR DNS_ERROR_RCODE_BADTIME;
    public static WIN32_ERROR DNS_ERROR_RCODE_LAST;
    public static WIN32_ERROR DNS_ERROR_DNSSEC_BASE;
    public static WIN32_ERROR DNS_ERROR_KEYMASTER_REQUIRED;
    public static WIN32_ERROR DNS_ERROR_NOT_ALLOWED_ON_SIGNED_ZONE;
    public static WIN32_ERROR DNS_ERROR_NSEC3_INCOMPATIBLE_WITH_RSA_SHA1;
    public static WIN32_ERROR DNS_ERROR_NOT_ENOUGH_SIGNING_KEY_DESCRIPTORS;
    public static WIN32_ERROR DNS_ERROR_UNSUPPORTED_ALGORITHM;
    public static WIN32_ERROR DNS_ERROR_INVALID_KEY_SIZE;
    public static WIN32_ERROR DNS_ERROR_SIGNING_KEY_NOT_ACCESSIBLE;
    public static WIN32_ERROR DNS_ERROR_KSP_DOES_NOT_SUPPORT_PROTECTION;
    public static WIN32_ERROR DNS_ERROR_UNEXPECTED_DATA_PROTECTION_ERROR;
    public static WIN32_ERROR DNS_ERROR_UNEXPECTED_CNG_ERROR;
    public static WIN32_ERROR DNS_ERROR_UNKNOWN_SIGNING_PARAMETER_VERSION;
    public static WIN32_ERROR DNS_ERROR_KSP_NOT_ACCESSIBLE;
    public static WIN32_ERROR DNS_ERROR_TOO_MANY_SKDS;
    public static WIN32_ERROR DNS_ERROR_INVALID_ROLLOVER_PERIOD;
    public static WIN32_ERROR DNS_ERROR_INVALID_INITIAL_ROLLOVER_OFFSET;
    public static WIN32_ERROR DNS_ERROR_ROLLOVER_IN_PROGRESS;
    public static WIN32_ERROR DNS_ERROR_STANDBY_KEY_NOT_PRESENT;
    public static WIN32_ERROR DNS_ERROR_NOT_ALLOWED_ON_ZSK;
    public static WIN32_ERROR DNS_ERROR_NOT_ALLOWED_ON_ACTIVE_SKD;
    public static WIN32_ERROR DNS_ERROR_ROLLOVER_ALREADY_QUEUED;
    public static WIN32_ERROR DNS_ERROR_NOT_ALLOWED_ON_UNSIGNED_ZONE;
    public static WIN32_ERROR DNS_ERROR_BAD_KEYMASTER;
    public static WIN32_ERROR DNS_ERROR_INVALID_SIGNATURE_VALIDITY_PERIOD;
    public static WIN32_ERROR DNS_ERROR_INVALID_NSEC3_ITERATION_COUNT;
    public static WIN32_ERROR DNS_ERROR_DNSSEC_IS_DISABLED;
    public static WIN32_ERROR DNS_ERROR_INVALID_XML;
    public static WIN32_ERROR DNS_ERROR_NO_VALID_TRUST_ANCHORS;
    public static WIN32_ERROR DNS_ERROR_ROLLOVER_NOT_POKEABLE;
    public static WIN32_ERROR DNS_ERROR_NSEC3_NAME_COLLISION;
    public static WIN32_ERROR DNS_ERROR_NSEC_INCOMPATIBLE_WITH_NSEC3_RSA_SHA1;
    public static WIN32_ERROR DNS_ERROR_PACKET_FMT_BASE;
    public static WIN32_ERROR DNS_ERROR_BAD_PACKET;
    public static WIN32_ERROR DNS_ERROR_NO_PACKET;
    public static WIN32_ERROR DNS_ERROR_RCODE;
    public static WIN32_ERROR DNS_ERROR_UNSECURE_PACKET;
    public static WIN32_ERROR DNS_ERROR_NO_MEMORY;
    public static WIN32_ERROR DNS_ERROR_INVALID_NAME;
    public static WIN32_ERROR DNS_ERROR_INVALID_DATA;
    public static WIN32_ERROR DNS_ERROR_GENERAL_API_BASE;
    public static WIN32_ERROR DNS_ERROR_INVALID_TYPE;
    public static WIN32_ERROR DNS_ERROR_INVALID_IP_ADDRESS;
    public static WIN32_ERROR DNS_ERROR_INVALID_PROPERTY;
    public static WIN32_ERROR DNS_ERROR_TRY_AGAIN_LATER;
    public static WIN32_ERROR DNS_ERROR_NOT_UNIQUE;
    public static WIN32_ERROR DNS_ERROR_NON_RFC_NAME;
    public static WIN32_ERROR DNS_ERROR_INVALID_NAME_CHAR;
    public static WIN32_ERROR DNS_ERROR_NUMERIC_NAME;
    public static WIN32_ERROR DNS_ERROR_NOT_ALLOWED_ON_ROOT_SERVER;
    public static WIN32_ERROR DNS_ERROR_NOT_ALLOWED_UNDER_DELEGATION;
    public static WIN32_ERROR DNS_ERROR_CANNOT_FIND_ROOT_HINTS;
    public static WIN32_ERROR DNS_ERROR_INCONSISTENT_ROOT_HINTS;
    public static WIN32_ERROR DNS_ERROR_DWORD_VALUE_TOO_SMALL;
    public static WIN32_ERROR DNS_ERROR_DWORD_VALUE_TOO_LARGE;
    public static WIN32_ERROR DNS_ERROR_BACKGROUND_LOADING;
    public static WIN32_ERROR DNS_ERROR_NOT_ALLOWED_ON_RODC;
    public static WIN32_ERROR DNS_ERROR_NOT_ALLOWED_UNDER_DNAME;
    public static WIN32_ERROR DNS_ERROR_DELEGATION_REQUIRED;
    public static WIN32_ERROR DNS_ERROR_INVALID_POLICY_TABLE;
    public static WIN32_ERROR DNS_ERROR_ADDRESS_REQUIRED;
    public static WIN32_ERROR DNS_ERROR_ZONE_BASE;
    public static WIN32_ERROR DNS_ERROR_ZONE_DOES_NOT_EXIST;
    public static WIN32_ERROR DNS_ERROR_NO_ZONE_INFO;
    public static WIN32_ERROR DNS_ERROR_INVALID_ZONE_OPERATION;
    public static WIN32_ERROR DNS_ERROR_ZONE_CONFIGURATION_ERROR;
    public static WIN32_ERROR DNS_ERROR_ZONE_HAS_NO_SOA_RECORD;
    public static WIN32_ERROR DNS_ERROR_ZONE_HAS_NO_NS_RECORDS;
    public static WIN32_ERROR DNS_ERROR_ZONE_LOCKED;
    public static WIN32_ERROR DNS_ERROR_ZONE_CREATION_FAILED;
    public static WIN32_ERROR DNS_ERROR_ZONE_ALREADY_EXISTS;
    public static WIN32_ERROR DNS_ERROR_AUTOZONE_ALREADY_EXISTS;
    public static WIN32_ERROR DNS_ERROR_INVALID_ZONE_TYPE;
    public static WIN32_ERROR DNS_ERROR_SECONDARY_REQUIRES_MASTER_IP;
    public static WIN32_ERROR DNS_ERROR_ZONE_NOT_SECONDARY;
    public static WIN32_ERROR DNS_ERROR_NEED_SECONDARY_ADDRESSES;
    public static WIN32_ERROR DNS_ERROR_WINS_INIT_FAILED;
    public static WIN32_ERROR DNS_ERROR_NEED_WINS_SERVERS;
    public static WIN32_ERROR DNS_ERROR_NBSTAT_INIT_FAILED;
    public static WIN32_ERROR DNS_ERROR_SOA_DELETE_INVALID;
    public static WIN32_ERROR DNS_ERROR_FORWARDER_ALREADY_EXISTS;
    public static WIN32_ERROR DNS_ERROR_ZONE_REQUIRES_MASTER_IP;
    public static WIN32_ERROR DNS_ERROR_ZONE_IS_SHUTDOWN;
    public static WIN32_ERROR DNS_ERROR_ZONE_LOCKED_FOR_SIGNING;
    public static WIN32_ERROR DNS_ERROR_DATAFILE_BASE;
    public static WIN32_ERROR DNS_ERROR_PRIMARY_REQUIRES_DATAFILE;
    public static WIN32_ERROR DNS_ERROR_INVALID_DATAFILE_NAME;
    public static WIN32_ERROR DNS_ERROR_DATAFILE_OPEN_FAILURE;
    public static WIN32_ERROR DNS_ERROR_FILE_WRITEBACK_FAILED;
    public static WIN32_ERROR DNS_ERROR_DATAFILE_PARSING;
    public static WIN32_ERROR DNS_ERROR_DATABASE_BASE;
    public static WIN32_ERROR DNS_ERROR_RECORD_DOES_NOT_EXIST;
    public static WIN32_ERROR DNS_ERROR_RECORD_FORMAT;
    public static WIN32_ERROR DNS_ERROR_NODE_CREATION_FAILED;
    public static WIN32_ERROR DNS_ERROR_UNKNOWN_RECORD_TYPE;
    public static WIN32_ERROR DNS_ERROR_RECORD_TIMED_OUT;
    public static WIN32_ERROR DNS_ERROR_NAME_NOT_IN_ZONE;
    public static WIN32_ERROR DNS_ERROR_CNAME_LOOP;
    public static WIN32_ERROR DNS_ERROR_NODE_IS_CNAME;
    public static WIN32_ERROR DNS_ERROR_CNAME_COLLISION;
    public static WIN32_ERROR DNS_ERROR_RECORD_ONLY_AT_ZONE_ROOT;
    public static WIN32_ERROR DNS_ERROR_RECORD_ALREADY_EXISTS;
    public static WIN32_ERROR DNS_ERROR_SECONDARY_DATA;
    public static WIN32_ERROR DNS_ERROR_NO_CREATE_CACHE_DATA;
    public static WIN32_ERROR DNS_ERROR_NAME_DOES_NOT_EXIST;
    public static WIN32_ERROR DNS_ERROR_DS_UNAVAILABLE;
    public static WIN32_ERROR DNS_ERROR_DS_ZONE_ALREADY_EXISTS;
    public static WIN32_ERROR DNS_ERROR_NO_BOOTFILE_IF_DS_ZONE;
    public static WIN32_ERROR DNS_ERROR_NODE_IS_DNAME;
    public static WIN32_ERROR DNS_ERROR_DNAME_COLLISION;
    public static WIN32_ERROR DNS_ERROR_ALIAS_LOOP;
    public static WIN32_ERROR DNS_ERROR_OPERATION_BASE;
    public static WIN32_ERROR DNS_ERROR_AXFR;
    public static WIN32_ERROR DNS_ERROR_SECURE_BASE;
    public static WIN32_ERROR DNS_ERROR_SETUP_BASE;
    public static WIN32_ERROR DNS_ERROR_NO_TCPIP;
    public static WIN32_ERROR DNS_ERROR_NO_DNS_SERVERS;
    public static WIN32_ERROR DNS_ERROR_DP_BASE;
    public static WIN32_ERROR DNS_ERROR_DP_DOES_NOT_EXIST;
    public static WIN32_ERROR DNS_ERROR_DP_ALREADY_EXISTS;
    public static WIN32_ERROR DNS_ERROR_DP_NOT_ENLISTED;
    public static WIN32_ERROR DNS_ERROR_DP_ALREADY_ENLISTED;
    public static WIN32_ERROR DNS_ERROR_DP_NOT_AVAILABLE;
    public static WIN32_ERROR DNS_ERROR_DP_FSMO_ERROR;
    public static WIN32_ERROR DNS_ERROR_RRL_NOT_ENABLED;
    public static WIN32_ERROR DNS_ERROR_RRL_INVALID_WINDOW_SIZE;
    public static WIN32_ERROR DNS_ERROR_RRL_INVALID_IPV4_PREFIX;
    public static WIN32_ERROR DNS_ERROR_RRL_INVALID_IPV6_PREFIX;
    public static WIN32_ERROR DNS_ERROR_RRL_INVALID_TC_RATE;
    public static WIN32_ERROR DNS_ERROR_RRL_INVALID_LEAK_RATE;
    public static WIN32_ERROR DNS_ERROR_RRL_LEAK_RATE_LESSTHAN_TC_RATE;
    public static WIN32_ERROR DNS_ERROR_VIRTUALIZATION_INSTANCE_ALREADY_EXISTS;
    public static WIN32_ERROR DNS_ERROR_VIRTUALIZATION_INSTANCE_DOES_NOT_EXIST;
    public static WIN32_ERROR DNS_ERROR_VIRTUALIZATION_TREE_LOCKED;
    public static WIN32_ERROR DNS_ERROR_INVAILD_VIRTUALIZATION_INSTANCE_NAME;
    public static WIN32_ERROR DNS_ERROR_DEFAULT_VIRTUALIZATION_INSTANCE;
    public static WIN32_ERROR DNS_ERROR_ZONESCOPE_ALREADY_EXISTS;
    public static WIN32_ERROR DNS_ERROR_ZONESCOPE_DOES_NOT_EXIST;
    public static WIN32_ERROR DNS_ERROR_DEFAULT_ZONESCOPE;
    public static WIN32_ERROR DNS_ERROR_INVALID_ZONESCOPE_NAME;
    public static WIN32_ERROR DNS_ERROR_NOT_ALLOWED_WITH_ZONESCOPES;
    public static WIN32_ERROR DNS_ERROR_LOAD_ZONESCOPE_FAILED;
    public static WIN32_ERROR DNS_ERROR_ZONESCOPE_FILE_WRITEBACK_FAILED;
    public static WIN32_ERROR DNS_ERROR_INVALID_SCOPE_NAME;
    public static WIN32_ERROR DNS_ERROR_SCOPE_DOES_NOT_EXIST;
    public static WIN32_ERROR DNS_ERROR_DEFAULT_SCOPE;
    public static WIN32_ERROR DNS_ERROR_INVALID_SCOPE_OPERATION;
    public static WIN32_ERROR DNS_ERROR_SCOPE_LOCKED;
    public static WIN32_ERROR DNS_ERROR_SCOPE_ALREADY_EXISTS;
    public static WIN32_ERROR DNS_ERROR_POLICY_ALREADY_EXISTS;
    public static WIN32_ERROR DNS_ERROR_POLICY_DOES_NOT_EXIST;
    public static WIN32_ERROR DNS_ERROR_POLICY_INVALID_CRITERIA;
    public static WIN32_ERROR DNS_ERROR_POLICY_INVALID_SETTINGS;
    public static WIN32_ERROR DNS_ERROR_CLIENT_SUBNET_IS_ACCESSED;
    public static WIN32_ERROR DNS_ERROR_CLIENT_SUBNET_DOES_NOT_EXIST;
    public static WIN32_ERROR DNS_ERROR_CLIENT_SUBNET_ALREADY_EXISTS;
    public static WIN32_ERROR DNS_ERROR_SUBNET_DOES_NOT_EXIST;
    public static WIN32_ERROR DNS_ERROR_SUBNET_ALREADY_EXISTS;
    public static WIN32_ERROR DNS_ERROR_POLICY_LOCKED;
    public static WIN32_ERROR DNS_ERROR_POLICY_INVALID_WEIGHT;
    public static WIN32_ERROR DNS_ERROR_POLICY_INVALID_NAME;
    public static WIN32_ERROR DNS_ERROR_POLICY_MISSING_CRITERIA;
    public static WIN32_ERROR DNS_ERROR_INVALID_CLIENT_SUBNET_NAME;
    public static WIN32_ERROR DNS_ERROR_POLICY_PROCESSING_ORDER_INVALID;
    public static WIN32_ERROR DNS_ERROR_POLICY_SCOPE_MISSING;
    public static WIN32_ERROR DNS_ERROR_POLICY_SCOPE_NOT_ALLOWED;
    public static WIN32_ERROR DNS_ERROR_SERVERSCOPE_IS_REFERENCED;
    public static WIN32_ERROR DNS_ERROR_ZONESCOPE_IS_REFERENCED;
    public static WIN32_ERROR DNS_ERROR_POLICY_INVALID_CRITERIA_CLIENT_SUBNET;
    public static WIN32_ERROR DNS_ERROR_POLICY_INVALID_CRITERIA_TRANSPORT_PROTOCOL;
    public static WIN32_ERROR DNS_ERROR_POLICY_INVALID_CRITERIA_NETWORK_PROTOCOL;
    public static WIN32_ERROR DNS_ERROR_POLICY_INVALID_CRITERIA_INTERFACE;
    public static WIN32_ERROR DNS_ERROR_POLICY_INVALID_CRITERIA_FQDN;
    public static WIN32_ERROR DNS_ERROR_POLICY_INVALID_CRITERIA_QUERY_TYPE;
    public static WIN32_ERROR DNS_ERROR_POLICY_INVALID_CRITERIA_TIME_OF_DAY;
    public static WIN32_ERROR ERROR_IPSEC_QM_POLICY_EXISTS;
    public static WIN32_ERROR ERROR_IPSEC_QM_POLICY_NOT_FOUND;
    public static WIN32_ERROR ERROR_IPSEC_QM_POLICY_IN_USE;
    public static WIN32_ERROR ERROR_IPSEC_MM_POLICY_EXISTS;
    public static WIN32_ERROR ERROR_IPSEC_MM_POLICY_NOT_FOUND;
    public static WIN32_ERROR ERROR_IPSEC_MM_POLICY_IN_USE;
    public static WIN32_ERROR ERROR_IPSEC_MM_FILTER_EXISTS;
    public static WIN32_ERROR ERROR_IPSEC_MM_FILTER_NOT_FOUND;
    public static WIN32_ERROR ERROR_IPSEC_TRANSPORT_FILTER_EXISTS;
    public static WIN32_ERROR ERROR_IPSEC_TRANSPORT_FILTER_NOT_FOUND;
    public static WIN32_ERROR ERROR_IPSEC_MM_AUTH_EXISTS;
    public static WIN32_ERROR ERROR_IPSEC_MM_AUTH_NOT_FOUND;
    public static WIN32_ERROR ERROR_IPSEC_MM_AUTH_IN_USE;
    public static WIN32_ERROR ERROR_IPSEC_DEFAULT_MM_POLICY_NOT_FOUND;
    public static WIN32_ERROR ERROR_IPSEC_DEFAULT_MM_AUTH_NOT_FOUND;
    public static WIN32_ERROR ERROR_IPSEC_DEFAULT_QM_POLICY_NOT_FOUND;
    public static WIN32_ERROR ERROR_IPSEC_TUNNEL_FILTER_EXISTS;
    public static WIN32_ERROR ERROR_IPSEC_TUNNEL_FILTER_NOT_FOUND;
    public static WIN32_ERROR ERROR_IPSEC_MM_FILTER_PENDING_DELETION;
    public static WIN32_ERROR ERROR_IPSEC_TRANSPORT_FILTER_PENDING_DELETION;
    public static WIN32_ERROR ERROR_IPSEC_TUNNEL_FILTER_PENDING_DELETION;
    public static WIN32_ERROR ERROR_IPSEC_MM_POLICY_PENDING_DELETION;
    public static WIN32_ERROR ERROR_IPSEC_MM_AUTH_PENDING_DELETION;
    public static WIN32_ERROR ERROR_IPSEC_QM_POLICY_PENDING_DELETION;
    public static WIN32_ERROR ERROR_IPSEC_IKE_NEG_STATUS_BEGIN;
    public static WIN32_ERROR ERROR_IPSEC_IKE_AUTH_FAIL;
    public static WIN32_ERROR ERROR_IPSEC_IKE_ATTRIB_FAIL;
    public static WIN32_ERROR ERROR_IPSEC_IKE_NEGOTIATION_PENDING;
    public static WIN32_ERROR ERROR_IPSEC_IKE_GENERAL_PROCESSING_ERROR;
    public static WIN32_ERROR ERROR_IPSEC_IKE_TIMED_OUT;
    public static WIN32_ERROR ERROR_IPSEC_IKE_NO_CERT;
    public static WIN32_ERROR ERROR_IPSEC_IKE_SA_DELETED;
    public static WIN32_ERROR ERROR_IPSEC_IKE_SA_REAPED;
    public static WIN32_ERROR ERROR_IPSEC_IKE_MM_ACQUIRE_DROP;
    public static WIN32_ERROR ERROR_IPSEC_IKE_QM_ACQUIRE_DROP;
    public static WIN32_ERROR ERROR_IPSEC_IKE_QUEUE_DROP_MM;
    public static WIN32_ERROR ERROR_IPSEC_IKE_QUEUE_DROP_NO_MM;
    public static WIN32_ERROR ERROR_IPSEC_IKE_DROP_NO_RESPONSE;
    public static WIN32_ERROR ERROR_IPSEC_IKE_MM_DELAY_DROP;
    public static WIN32_ERROR ERROR_IPSEC_IKE_QM_DELAY_DROP;
    public static WIN32_ERROR ERROR_IPSEC_IKE_ERROR;
    public static WIN32_ERROR ERROR_IPSEC_IKE_CRL_FAILED;
    public static WIN32_ERROR ERROR_IPSEC_IKE_INVALID_KEY_USAGE;
    public static WIN32_ERROR ERROR_IPSEC_IKE_INVALID_CERT_TYPE;
    public static WIN32_ERROR ERROR_IPSEC_IKE_NO_PRIVATE_KEY;
    public static WIN32_ERROR ERROR_IPSEC_IKE_SIMULTANEOUS_REKEY;
    public static WIN32_ERROR ERROR_IPSEC_IKE_DH_FAIL;
    public static WIN32_ERROR ERROR_IPSEC_IKE_CRITICAL_PAYLOAD_NOT_RECOGNIZED;
    public static WIN32_ERROR ERROR_IPSEC_IKE_INVALID_HEADER;
    public static WIN32_ERROR ERROR_IPSEC_IKE_NO_POLICY;
    public static WIN32_ERROR ERROR_IPSEC_IKE_INVALID_SIGNATURE;
    public static WIN32_ERROR ERROR_IPSEC_IKE_KERBEROS_ERROR;
    public static WIN32_ERROR ERROR_IPSEC_IKE_NO_PUBLIC_KEY;
    public static WIN32_ERROR ERROR_IPSEC_IKE_PROCESS_ERR;
    public static WIN32_ERROR ERROR_IPSEC_IKE_PROCESS_ERR_SA;
    public static WIN32_ERROR ERROR_IPSEC_IKE_PROCESS_ERR_PROP;
    public static WIN32_ERROR ERROR_IPSEC_IKE_PROCESS_ERR_TRANS;
    public static WIN32_ERROR ERROR_IPSEC_IKE_PROCESS_ERR_KE;
    public static WIN32_ERROR ERROR_IPSEC_IKE_PROCESS_ERR_ID;
    public static WIN32_ERROR ERROR_IPSEC_IKE_PROCESS_ERR_CERT;
    public static WIN32_ERROR ERROR_IPSEC_IKE_PROCESS_ERR_CERT_REQ;
    public static WIN32_ERROR ERROR_IPSEC_IKE_PROCESS_ERR_HASH;
    public static WIN32_ERROR ERROR_IPSEC_IKE_PROCESS_ERR_SIG;
    public static WIN32_ERROR ERROR_IPSEC_IKE_PROCESS_ERR_NONCE;
    public static WIN32_ERROR ERROR_IPSEC_IKE_PROCESS_ERR_NOTIFY;
    public static WIN32_ERROR ERROR_IPSEC_IKE_PROCESS_ERR_DELETE;
    public static WIN32_ERROR ERROR_IPSEC_IKE_PROCESS_ERR_VENDOR;
    public static WIN32_ERROR ERROR_IPSEC_IKE_INVALID_PAYLOAD;
    public static WIN32_ERROR ERROR_IPSEC_IKE_LOAD_SOFT_SA;
    public static WIN32_ERROR ERROR_IPSEC_IKE_SOFT_SA_TORN_DOWN;
    public static WIN32_ERROR ERROR_IPSEC_IKE_INVALID_COOKIE;
    public static WIN32_ERROR ERROR_IPSEC_IKE_NO_PEER_CERT;
    public static WIN32_ERROR ERROR_IPSEC_IKE_PEER_CRL_FAILED;
    public static WIN32_ERROR ERROR_IPSEC_IKE_POLICY_CHANGE;
    public static WIN32_ERROR ERROR_IPSEC_IKE_NO_MM_POLICY;
    public static WIN32_ERROR ERROR_IPSEC_IKE_NOTCBPRIV;
    public static WIN32_ERROR ERROR_IPSEC_IKE_SECLOADFAIL;
    public static WIN32_ERROR ERROR_IPSEC_IKE_FAILSSPINIT;
    public static WIN32_ERROR ERROR_IPSEC_IKE_FAILQUERYSSP;
    public static WIN32_ERROR ERROR_IPSEC_IKE_SRVACQFAIL;
    public static WIN32_ERROR ERROR_IPSEC_IKE_SRVQUERYCRED;
    public static WIN32_ERROR ERROR_IPSEC_IKE_GETSPIFAIL;
    public static WIN32_ERROR ERROR_IPSEC_IKE_INVALID_FILTER;
    public static WIN32_ERROR ERROR_IPSEC_IKE_OUT_OF_MEMORY;
    public static WIN32_ERROR ERROR_IPSEC_IKE_ADD_UPDATE_KEY_FAILED;
    public static WIN32_ERROR ERROR_IPSEC_IKE_INVALID_POLICY;
    public static WIN32_ERROR ERROR_IPSEC_IKE_UNKNOWN_DOI;
    public static WIN32_ERROR ERROR_IPSEC_IKE_INVALID_SITUATION;
    public static WIN32_ERROR ERROR_IPSEC_IKE_DH_FAILURE;
    public static WIN32_ERROR ERROR_IPSEC_IKE_INVALID_GROUP;
    public static WIN32_ERROR ERROR_IPSEC_IKE_ENCRYPT;
    public static WIN32_ERROR ERROR_IPSEC_IKE_DECRYPT;
    public static WIN32_ERROR ERROR_IPSEC_IKE_POLICY_MATCH;
    public static WIN32_ERROR ERROR_IPSEC_IKE_UNSUPPORTED_ID;
    public static WIN32_ERROR ERROR_IPSEC_IKE_INVALID_HASH;
    public static WIN32_ERROR ERROR_IPSEC_IKE_INVALID_HASH_ALG;
    public static WIN32_ERROR ERROR_IPSEC_IKE_INVALID_HASH_SIZE;
    public static WIN32_ERROR ERROR_IPSEC_IKE_INVALID_ENCRYPT_ALG;
    public static WIN32_ERROR ERROR_IPSEC_IKE_INVALID_AUTH_ALG;
    public static WIN32_ERROR ERROR_IPSEC_IKE_INVALID_SIG;
    public static WIN32_ERROR ERROR_IPSEC_IKE_LOAD_FAILED;
    public static WIN32_ERROR ERROR_IPSEC_IKE_RPC_DELETE;
    public static WIN32_ERROR ERROR_IPSEC_IKE_BENIGN_REINIT;
    public static WIN32_ERROR ERROR_IPSEC_IKE_INVALID_RESPONDER_LIFETIME_NOTIFY;
    public static WIN32_ERROR ERROR_IPSEC_IKE_INVALID_MAJOR_VERSION;
    public static WIN32_ERROR ERROR_IPSEC_IKE_INVALID_CERT_KEYLEN;
    public static WIN32_ERROR ERROR_IPSEC_IKE_MM_LIMIT;
    public static WIN32_ERROR ERROR_IPSEC_IKE_NEGOTIATION_DISABLED;
    public static WIN32_ERROR ERROR_IPSEC_IKE_QM_LIMIT;
    public static WIN32_ERROR ERROR_IPSEC_IKE_MM_EXPIRED;
    public static WIN32_ERROR ERROR_IPSEC_IKE_PEER_MM_ASSUMED_INVALID;
    public static WIN32_ERROR ERROR_IPSEC_IKE_CERT_CHAIN_POLICY_MISMATCH;
    public static WIN32_ERROR ERROR_IPSEC_IKE_UNEXPECTED_MESSAGE_ID;
    public static WIN32_ERROR ERROR_IPSEC_IKE_INVALID_AUTH_PAYLOAD;
    public static WIN32_ERROR ERROR_IPSEC_IKE_DOS_COOKIE_SENT;
    public static WIN32_ERROR ERROR_IPSEC_IKE_SHUTTING_DOWN;
    public static WIN32_ERROR ERROR_IPSEC_IKE_CGA_AUTH_FAILED;
    public static WIN32_ERROR ERROR_IPSEC_IKE_PROCESS_ERR_NATOA;
    public static WIN32_ERROR ERROR_IPSEC_IKE_INVALID_MM_FOR_QM;
    public static WIN32_ERROR ERROR_IPSEC_IKE_QM_EXPIRED;
    public static WIN32_ERROR ERROR_IPSEC_IKE_TOO_MANY_FILTERS;
    public static WIN32_ERROR ERROR_IPSEC_IKE_NEG_STATUS_END;
    public static WIN32_ERROR ERROR_IPSEC_IKE_KILL_DUMMY_NAP_TUNNEL;
    public static WIN32_ERROR ERROR_IPSEC_IKE_INNER_IP_ASSIGNMENT_FAILURE;
    public static WIN32_ERROR ERROR_IPSEC_IKE_REQUIRE_CP_PAYLOAD_MISSING;
    public static WIN32_ERROR ERROR_IPSEC_KEY_MODULE_IMPERSONATION_NEGOTIATION_PENDING;
    public static WIN32_ERROR ERROR_IPSEC_IKE_COEXISTENCE_SUPPRESS;
    public static WIN32_ERROR ERROR_IPSEC_IKE_RATELIMIT_DROP;
    public static WIN32_ERROR ERROR_IPSEC_IKE_PEER_DOESNT_SUPPORT_MOBIKE;
    public static WIN32_ERROR ERROR_IPSEC_IKE_AUTHORIZATION_FAILURE;
    public static WIN32_ERROR ERROR_IPSEC_IKE_STRONG_CRED_AUTHORIZATION_FAILURE;
    public static WIN32_ERROR ERROR_IPSEC_IKE_AUTHORIZATION_FAILURE_WITH_OPTIONAL_RETRY;
    public static WIN32_ERROR ERROR_IPSEC_IKE_STRONG_CRED_AUTHORIZATION_AND_CERTMAP_FAILURE;
    public static WIN32_ERROR ERROR_IPSEC_IKE_NEG_STATUS_EXTENDED_END;
    public static WIN32_ERROR ERROR_IPSEC_BAD_SPI;
    public static WIN32_ERROR ERROR_IPSEC_SA_LIFETIME_EXPIRED;
    public static WIN32_ERROR ERROR_IPSEC_WRONG_SA;
    public static WIN32_ERROR ERROR_IPSEC_REPLAY_CHECK_FAILED;
    public static WIN32_ERROR ERROR_IPSEC_INVALID_PACKET;
    public static WIN32_ERROR ERROR_IPSEC_INTEGRITY_CHECK_FAILED;
    public static WIN32_ERROR ERROR_IPSEC_CLEAR_TEXT_DROP;
    public static WIN32_ERROR ERROR_IPSEC_AUTH_FIREWALL_DROP;
    public static WIN32_ERROR ERROR_IPSEC_THROTTLE_DROP;
    public static WIN32_ERROR ERROR_IPSEC_DOSP_BLOCK;
    public static WIN32_ERROR ERROR_IPSEC_DOSP_RECEIVED_MULTICAST;
    public static WIN32_ERROR ERROR_IPSEC_DOSP_INVALID_PACKET;
    public static WIN32_ERROR ERROR_IPSEC_DOSP_STATE_LOOKUP_FAILED;
    public static WIN32_ERROR ERROR_IPSEC_DOSP_MAX_ENTRIES;
    public static WIN32_ERROR ERROR_IPSEC_DOSP_KEYMOD_NOT_ALLOWED;
    public static WIN32_ERROR ERROR_IPSEC_DOSP_NOT_INSTALLED;
    public static WIN32_ERROR ERROR_IPSEC_DOSP_MAX_PER_IP_RATELIMIT_QUEUES;
    public static WIN32_ERROR ERROR_SXS_SECTION_NOT_FOUND;
    public static WIN32_ERROR ERROR_SXS_CANT_GEN_ACTCTX;
    public static WIN32_ERROR ERROR_SXS_INVALID_ACTCTXDATA_FORMAT;
    public static WIN32_ERROR ERROR_SXS_ASSEMBLY_NOT_FOUND;
    public static WIN32_ERROR ERROR_SXS_MANIFEST_FORMAT_ERROR;
    public static WIN32_ERROR ERROR_SXS_MANIFEST_PARSE_ERROR;
    public static WIN32_ERROR ERROR_SXS_ACTIVATION_CONTEXT_DISABLED;
    public static WIN32_ERROR ERROR_SXS_KEY_NOT_FOUND;
    public static WIN32_ERROR ERROR_SXS_VERSION_CONFLICT;
    public static WIN32_ERROR ERROR_SXS_WRONG_SECTION_TYPE;
    public static WIN32_ERROR ERROR_SXS_THREAD_QUERIES_DISABLED;
    public static WIN32_ERROR ERROR_SXS_PROCESS_DEFAULT_ALREADY_SET;
    public static WIN32_ERROR ERROR_SXS_UNKNOWN_ENCODING_GROUP;
    public static WIN32_ERROR ERROR_SXS_UNKNOWN_ENCODING;
    public static WIN32_ERROR ERROR_SXS_INVALID_XML_NAMESPACE_URI;
    public static WIN32_ERROR ERROR_SXS_ROOT_MANIFEST_DEPENDENCY_NOT_INSTALLED;
    public static WIN32_ERROR ERROR_SXS_LEAF_MANIFEST_DEPENDENCY_NOT_INSTALLED;
    public static WIN32_ERROR ERROR_SXS_INVALID_ASSEMBLY_IDENTITY_ATTRIBUTE;
    public static WIN32_ERROR ERROR_SXS_MANIFEST_MISSING_REQUIRED_DEFAULT_NAMESPACE;
    public static WIN32_ERROR ERROR_SXS_MANIFEST_INVALID_REQUIRED_DEFAULT_NAMESPACE;
    public static WIN32_ERROR ERROR_SXS_PRIVATE_MANIFEST_CROSS_PATH_WITH_REPARSE_POINT;
    public static WIN32_ERROR ERROR_SXS_DUPLICATE_DLL_NAME;
    public static WIN32_ERROR ERROR_SXS_DUPLICATE_WINDOWCLASS_NAME;
    public static WIN32_ERROR ERROR_SXS_DUPLICATE_CLSID;
    public static WIN32_ERROR ERROR_SXS_DUPLICATE_IID;
    public static WIN32_ERROR ERROR_SXS_DUPLICATE_TLBID;
    public static WIN32_ERROR ERROR_SXS_DUPLICATE_PROGID;
    public static WIN32_ERROR ERROR_SXS_DUPLICATE_ASSEMBLY_NAME;
    public static WIN32_ERROR ERROR_SXS_FILE_HASH_MISMATCH;
    public static WIN32_ERROR ERROR_SXS_POLICY_PARSE_ERROR;
    public static WIN32_ERROR ERROR_SXS_XML_E_MISSINGQUOTE;
    public static WIN32_ERROR ERROR_SXS_XML_E_COMMENTSYNTAX;
    public static WIN32_ERROR ERROR_SXS_XML_E_BADSTARTNAMECHAR;
    public static WIN32_ERROR ERROR_SXS_XML_E_BADNAMECHAR;
    public static WIN32_ERROR ERROR_SXS_XML_E_BADCHARINSTRING;
    public static WIN32_ERROR ERROR_SXS_XML_E_XMLDECLSYNTAX;
    public static WIN32_ERROR ERROR_SXS_XML_E_BADCHARDATA;
    public static WIN32_ERROR ERROR_SXS_XML_E_MISSINGWHITESPACE;
    public static WIN32_ERROR ERROR_SXS_XML_E_EXPECTINGTAGEND;
    public static WIN32_ERROR ERROR_SXS_XML_E_MISSINGSEMICOLON;
    public static WIN32_ERROR ERROR_SXS_XML_E_UNBALANCEDPAREN;
    public static WIN32_ERROR ERROR_SXS_XML_E_INTERNALERROR;
    public static WIN32_ERROR ERROR_SXS_XML_E_UNEXPECTED_WHITESPACE;
    public static WIN32_ERROR ERROR_SXS_XML_E_INCOMPLETE_ENCODING;
    public static WIN32_ERROR ERROR_SXS_XML_E_MISSING_PAREN;
    public static WIN32_ERROR ERROR_SXS_XML_E_EXPECTINGCLOSEQUOTE;
    public static WIN32_ERROR ERROR_SXS_XML_E_MULTIPLE_COLONS;
    public static WIN32_ERROR ERROR_SXS_XML_E_INVALID_DECIMAL;
    public static WIN32_ERROR ERROR_SXS_XML_E_INVALID_HEXIDECIMAL;
    public static WIN32_ERROR ERROR_SXS_XML_E_INVALID_UNICODE;
    public static WIN32_ERROR ERROR_SXS_XML_E_WHITESPACEORQUESTIONMARK;
    public static WIN32_ERROR ERROR_SXS_XML_E_UNEXPECTEDENDTAG;
    public static WIN32_ERROR ERROR_SXS_XML_E_UNCLOSEDTAG;
    public static WIN32_ERROR ERROR_SXS_XML_E_DUPLICATEATTRIBUTE;
    public static WIN32_ERROR ERROR_SXS_XML_E_MULTIPLEROOTS;
    public static WIN32_ERROR ERROR_SXS_XML_E_INVALIDATROOTLEVEL;
    public static WIN32_ERROR ERROR_SXS_XML_E_BADXMLDECL;
    public static WIN32_ERROR ERROR_SXS_XML_E_MISSINGROOT;
    public static WIN32_ERROR ERROR_SXS_XML_E_UNEXPECTEDEOF;
    public static WIN32_ERROR ERROR_SXS_XML_E_BADPEREFINSUBSET;
    public static WIN32_ERROR ERROR_SXS_XML_E_UNCLOSEDSTARTTAG;
    public static WIN32_ERROR ERROR_SXS_XML_E_UNCLOSEDENDTAG;
    public static WIN32_ERROR ERROR_SXS_XML_E_UNCLOSEDSTRING;
    public static WIN32_ERROR ERROR_SXS_XML_E_UNCLOSEDCOMMENT;
    public static WIN32_ERROR ERROR_SXS_XML_E_UNCLOSEDDECL;
    public static WIN32_ERROR ERROR_SXS_XML_E_UNCLOSEDCDATA;
    public static WIN32_ERROR ERROR_SXS_XML_E_RESERVEDNAMESPACE;
    public static WIN32_ERROR ERROR_SXS_XML_E_INVALIDENCODING;
    public static WIN32_ERROR ERROR_SXS_XML_E_INVALIDSWITCH;
    public static WIN32_ERROR ERROR_SXS_XML_E_BADXMLCASE;
    public static WIN32_ERROR ERROR_SXS_XML_E_INVALID_STANDALONE;
    public static WIN32_ERROR ERROR_SXS_XML_E_UNEXPECTED_STANDALONE;
    public static WIN32_ERROR ERROR_SXS_XML_E_INVALID_VERSION;
    public static WIN32_ERROR ERROR_SXS_XML_E_MISSINGEQUALS;
    public static WIN32_ERROR ERROR_SXS_PROTECTION_RECOVERY_FAILED;
    public static WIN32_ERROR ERROR_SXS_PROTECTION_PUBLIC_KEY_TOO_SHORT;
    public static WIN32_ERROR ERROR_SXS_PROTECTION_CATALOG_NOT_VALID;
    public static WIN32_ERROR ERROR_SXS_UNTRANSLATABLE_HRESULT;
    public static WIN32_ERROR ERROR_SXS_PROTECTION_CATALOG_FILE_MISSING;
    public static WIN32_ERROR ERROR_SXS_MISSING_ASSEMBLY_IDENTITY_ATTRIBUTE;
    public static WIN32_ERROR ERROR_SXS_INVALID_ASSEMBLY_IDENTITY_ATTRIBUTE_NAME;
    public static WIN32_ERROR ERROR_SXS_ASSEMBLY_MISSING;
    public static WIN32_ERROR ERROR_SXS_CORRUPT_ACTIVATION_STACK;
    public static WIN32_ERROR ERROR_SXS_CORRUPTION;
    public static WIN32_ERROR ERROR_SXS_EARLY_DEACTIVATION;
    public static WIN32_ERROR ERROR_SXS_INVALID_DEACTIVATION;
    public static WIN32_ERROR ERROR_SXS_MULTIPLE_DEACTIVATION;
    public static WIN32_ERROR ERROR_SXS_PROCESS_TERMINATION_REQUESTED;
    public static WIN32_ERROR ERROR_SXS_RELEASE_ACTIVATION_CONTEXT;
    public static WIN32_ERROR ERROR_SXS_SYSTEM_DEFAULT_ACTIVATION_CONTEXT_EMPTY;
    public static WIN32_ERROR ERROR_SXS_INVALID_IDENTITY_ATTRIBUTE_VALUE;
    public static WIN32_ERROR ERROR_SXS_INVALID_IDENTITY_ATTRIBUTE_NAME;
    public static WIN32_ERROR ERROR_SXS_IDENTITY_DUPLICATE_ATTRIBUTE;
    public static WIN32_ERROR ERROR_SXS_IDENTITY_PARSE_ERROR;
    public static WIN32_ERROR ERROR_MALFORMED_SUBSTITUTION_STRING;
    public static WIN32_ERROR ERROR_SXS_INCORRECT_PUBLIC_KEY_TOKEN;
    public static WIN32_ERROR ERROR_UNMAPPED_SUBSTITUTION_STRING;
    public static WIN32_ERROR ERROR_SXS_ASSEMBLY_NOT_LOCKED;
    public static WIN32_ERROR ERROR_SXS_COMPONENT_STORE_CORRUPT;
    public static WIN32_ERROR ERROR_ADVANCED_INSTALLER_FAILED;
    public static WIN32_ERROR ERROR_XML_ENCODING_MISMATCH;
    public static WIN32_ERROR ERROR_SXS_MANIFEST_IDENTITY_SAME_BUT_CONTENTS_DIFFERENT;
    public static WIN32_ERROR ERROR_SXS_IDENTITIES_DIFFERENT;
    public static WIN32_ERROR ERROR_SXS_ASSEMBLY_IS_NOT_A_DEPLOYMENT;
    public static WIN32_ERROR ERROR_SXS_FILE_NOT_PART_OF_ASSEMBLY;
    public static WIN32_ERROR ERROR_SXS_MANIFEST_TOO_BIG;
    public static WIN32_ERROR ERROR_SXS_SETTING_NOT_REGISTERED;
    public static WIN32_ERROR ERROR_SXS_TRANSACTION_CLOSURE_INCOMPLETE;
    public static WIN32_ERROR ERROR_SMI_PRIMITIVE_INSTALLER_FAILED;
    public static WIN32_ERROR ERROR_GENERIC_COMMAND_FAILED;
    public static WIN32_ERROR ERROR_SXS_FILE_HASH_MISSING;
    public static WIN32_ERROR ERROR_SXS_DUPLICATE_ACTIVATABLE_CLASS;
    public static WIN32_ERROR ERROR_EVT_INVALID_CHANNEL_PATH;
    public static WIN32_ERROR ERROR_EVT_INVALID_QUERY;
    public static WIN32_ERROR ERROR_EVT_PUBLISHER_METADATA_NOT_FOUND;
    public static WIN32_ERROR ERROR_EVT_EVENT_TEMPLATE_NOT_FOUND;
    public static WIN32_ERROR ERROR_EVT_INVALID_PUBLISHER_NAME;
    public static WIN32_ERROR ERROR_EVT_INVALID_EVENT_DATA;
    public static WIN32_ERROR ERROR_EVT_CHANNEL_NOT_FOUND;
    public static WIN32_ERROR ERROR_EVT_MALFORMED_XML_TEXT;
    public static WIN32_ERROR ERROR_EVT_SUBSCRIPTION_TO_DIRECT_CHANNEL;
    public static WIN32_ERROR ERROR_EVT_CONFIGURATION_ERROR;
    public static WIN32_ERROR ERROR_EVT_QUERY_RESULT_STALE;
    public static WIN32_ERROR ERROR_EVT_QUERY_RESULT_INVALID_POSITION;
    public static WIN32_ERROR ERROR_EVT_NON_VALIDATING_MSXML;
    public static WIN32_ERROR ERROR_EVT_FILTER_ALREADYSCOPED;
    public static WIN32_ERROR ERROR_EVT_FILTER_NOTELTSET;
    public static WIN32_ERROR ERROR_EVT_FILTER_INVARG;
    public static WIN32_ERROR ERROR_EVT_FILTER_INVTEST;
    public static WIN32_ERROR ERROR_EVT_FILTER_INVTYPE;
    public static WIN32_ERROR ERROR_EVT_FILTER_PARSEERR;
    public static WIN32_ERROR ERROR_EVT_FILTER_UNSUPPORTEDOP;
    public static WIN32_ERROR ERROR_EVT_FILTER_UNEXPECTEDTOKEN;
    public static WIN32_ERROR ERROR_EVT_INVALID_OPERATION_OVER_ENABLED_DIRECT_CHANNEL;
    public static WIN32_ERROR ERROR_EVT_INVALID_CHANNEL_PROPERTY_VALUE;
    public static WIN32_ERROR ERROR_EVT_INVALID_PUBLISHER_PROPERTY_VALUE;
    public static WIN32_ERROR ERROR_EVT_CHANNEL_CANNOT_ACTIVATE;
    public static WIN32_ERROR ERROR_EVT_FILTER_TOO_COMPLEX;
    public static WIN32_ERROR ERROR_EVT_MESSAGE_NOT_FOUND;
    public static WIN32_ERROR ERROR_EVT_MESSAGE_ID_NOT_FOUND;
    public static WIN32_ERROR ERROR_EVT_UNRESOLVED_VALUE_INSERT;
    public static WIN32_ERROR ERROR_EVT_UNRESOLVED_PARAMETER_INSERT;
    public static WIN32_ERROR ERROR_EVT_MAX_INSERTS_REACHED;
    public static WIN32_ERROR ERROR_EVT_EVENT_DEFINITION_NOT_FOUND;
    public static WIN32_ERROR ERROR_EVT_MESSAGE_LOCALE_NOT_FOUND;
    public static WIN32_ERROR ERROR_EVT_VERSION_TOO_OLD;
    public static WIN32_ERROR ERROR_EVT_VERSION_TOO_NEW;
    public static WIN32_ERROR ERROR_EVT_CANNOT_OPEN_CHANNEL_OF_QUERY;
    public static WIN32_ERROR ERROR_EVT_PUBLISHER_DISABLED;
    public static WIN32_ERROR ERROR_EVT_FILTER_OUT_OF_RANGE;
    public static WIN32_ERROR ERROR_EC_SUBSCRIPTION_CANNOT_ACTIVATE;
    public static WIN32_ERROR ERROR_EC_LOG_DISABLED;
    public static WIN32_ERROR ERROR_EC_CIRCULAR_FORWARDING;
    public static WIN32_ERROR ERROR_EC_CREDSTORE_FULL;
    public static WIN32_ERROR ERROR_EC_CRED_NOT_FOUND;
    public static WIN32_ERROR ERROR_EC_NO_ACTIVE_CHANNEL;
    public static WIN32_ERROR ERROR_MUI_FILE_NOT_FOUND;
    public static WIN32_ERROR ERROR_MUI_INVALID_FILE;
    public static WIN32_ERROR ERROR_MUI_INVALID_RC_CONFIG;
    public static WIN32_ERROR ERROR_MUI_INVALID_LOCALE_NAME;
    public static WIN32_ERROR ERROR_MUI_INVALID_ULTIMATEFALLBACK_NAME;
    public static WIN32_ERROR ERROR_MUI_FILE_NOT_LOADED;
    public static WIN32_ERROR ERROR_RESOURCE_ENUM_USER_STOP;
    public static WIN32_ERROR ERROR_MUI_INTLSETTINGS_UILANG_NOT_INSTALLED;
    public static WIN32_ERROR ERROR_MUI_INTLSETTINGS_INVALID_LOCALE_NAME;
    public static WIN32_ERROR ERROR_MRM_RUNTIME_NO_DEFAULT_OR_NEUTRAL_RESOURCE;
    public static WIN32_ERROR ERROR_MRM_INVALID_PRICONFIG;
    public static WIN32_ERROR ERROR_MRM_INVALID_FILE_TYPE;
    public static WIN32_ERROR ERROR_MRM_UNKNOWN_QUALIFIER;
    public static WIN32_ERROR ERROR_MRM_INVALID_QUALIFIER_VALUE;
    public static WIN32_ERROR ERROR_MRM_NO_CANDIDATE;
    public static WIN32_ERROR ERROR_MRM_NO_MATCH_OR_DEFAULT_CANDIDATE;
    public static WIN32_ERROR ERROR_MRM_RESOURCE_TYPE_MISMATCH;
    public static WIN32_ERROR ERROR_MRM_DUPLICATE_MAP_NAME;
    public static WIN32_ERROR ERROR_MRM_DUPLICATE_ENTRY;
    public static WIN32_ERROR ERROR_MRM_INVALID_RESOURCE_IDENTIFIER;
    public static WIN32_ERROR ERROR_MRM_FILEPATH_TOO_LONG;
    public static WIN32_ERROR ERROR_MRM_UNSUPPORTED_DIRECTORY_TYPE;
    public static WIN32_ERROR ERROR_MRM_INVALID_PRI_FILE;
    public static WIN32_ERROR ERROR_MRM_NAMED_RESOURCE_NOT_FOUND;
    public static WIN32_ERROR ERROR_MRM_MAP_NOT_FOUND;
    public static WIN32_ERROR ERROR_MRM_UNSUPPORTED_PROFILE_TYPE;
    public static WIN32_ERROR ERROR_MRM_INVALID_QUALIFIER_OPERATOR;
    public static WIN32_ERROR ERROR_MRM_INDETERMINATE_QUALIFIER_VALUE;
    public static WIN32_ERROR ERROR_MRM_AUTOMERGE_ENABLED;
    public static WIN32_ERROR ERROR_MRM_TOO_MANY_RESOURCES;
    public static WIN32_ERROR ERROR_MRM_UNSUPPORTED_FILE_TYPE_FOR_MERGE;
    public static WIN32_ERROR ERROR_MRM_UNSUPPORTED_FILE_TYPE_FOR_LOAD_UNLOAD_PRI_FILE;
    public static WIN32_ERROR ERROR_MRM_NO_CURRENT_VIEW_ON_THREAD;
    public static WIN32_ERROR ERROR_DIFFERENT_PROFILE_RESOURCE_MANAGER_EXIST;
    public static WIN32_ERROR ERROR_OPERATION_NOT_ALLOWED_FROM_SYSTEM_COMPONENT;
    public static WIN32_ERROR ERROR_MRM_DIRECT_REF_TO_NON_DEFAULT_RESOURCE;
    public static WIN32_ERROR ERROR_MRM_GENERATION_COUNT_MISMATCH;
    public static WIN32_ERROR ERROR_PRI_MERGE_VERSION_MISMATCH;
    public static WIN32_ERROR ERROR_PRI_MERGE_MISSING_SCHEMA;
    public static WIN32_ERROR ERROR_PRI_MERGE_LOAD_FILE_FAILED;
    public static WIN32_ERROR ERROR_PRI_MERGE_ADD_FILE_FAILED;
    public static WIN32_ERROR ERROR_PRI_MERGE_WRITE_FILE_FAILED;
    public static WIN32_ERROR ERROR_PRI_MERGE_MULTIPLE_PACKAGE_FAMILIES_NOT_ALLOWED;
    public static WIN32_ERROR ERROR_PRI_MERGE_MULTIPLE_MAIN_PACKAGES_NOT_ALLOWED;
    public static WIN32_ERROR ERROR_PRI_MERGE_BUNDLE_PACKAGES_NOT_ALLOWED;
    public static WIN32_ERROR ERROR_PRI_MERGE_MAIN_PACKAGE_REQUIRED;
    public static WIN32_ERROR ERROR_PRI_MERGE_RESOURCE_PACKAGE_REQUIRED;
    public static WIN32_ERROR ERROR_PRI_MERGE_INVALID_FILE_NAME;
    public static WIN32_ERROR ERROR_MRM_PACKAGE_NOT_FOUND;
    public static WIN32_ERROR ERROR_MRM_MISSING_DEFAULT_LANGUAGE;
    public static WIN32_ERROR ERROR_MRM_SCOPE_ITEM_CONFLICT;
    public static WIN32_ERROR ERROR_MCA_INVALID_CAPABILITIES_STRING;
    public static WIN32_ERROR ERROR_MCA_INVALID_VCP_VERSION;
    public static WIN32_ERROR ERROR_MCA_MONITOR_VIOLATES_MCCS_SPECIFICATION;
    public static WIN32_ERROR ERROR_MCA_MCCS_VERSION_MISMATCH;
    public static WIN32_ERROR ERROR_MCA_UNSUPPORTED_MCCS_VERSION;
    public static WIN32_ERROR ERROR_MCA_INTERNAL_ERROR;
    public static WIN32_ERROR ERROR_MCA_INVALID_TECHNOLOGY_TYPE_RETURNED;
    public static WIN32_ERROR ERROR_MCA_UNSUPPORTED_COLOR_TEMPERATURE;
    public static WIN32_ERROR ERROR_AMBIGUOUS_SYSTEM_DEVICE;
    public static WIN32_ERROR ERROR_SYSTEM_DEVICE_NOT_FOUND;
    public static WIN32_ERROR ERROR_HASH_NOT_SUPPORTED;
    public static WIN32_ERROR ERROR_HASH_NOT_PRESENT;
    public static WIN32_ERROR ERROR_SECONDARY_IC_PROVIDER_NOT_REGISTERED;
    public static WIN32_ERROR ERROR_GPIO_CLIENT_INFORMATION_INVALID;
    public static WIN32_ERROR ERROR_GPIO_VERSION_NOT_SUPPORTED;
    public static WIN32_ERROR ERROR_GPIO_INVALID_REGISTRATION_PACKET;
    public static WIN32_ERROR ERROR_GPIO_OPERATION_DENIED;
    public static WIN32_ERROR ERROR_GPIO_INCOMPATIBLE_CONNECT_MODE;
    public static WIN32_ERROR ERROR_GPIO_INTERRUPT_ALREADY_UNMASKED;
    public static WIN32_ERROR ERROR_CANNOT_SWITCH_RUNLEVEL;
    public static WIN32_ERROR ERROR_INVALID_RUNLEVEL_SETTING;
    public static WIN32_ERROR ERROR_RUNLEVEL_SWITCH_TIMEOUT;
    public static WIN32_ERROR ERROR_RUNLEVEL_SWITCH_AGENT_TIMEOUT;
    public static WIN32_ERROR ERROR_RUNLEVEL_SWITCH_IN_PROGRESS;
    public static WIN32_ERROR ERROR_SERVICES_FAILED_AUTOSTART;
    public static WIN32_ERROR ERROR_COM_TASK_STOP_PENDING;
    public static WIN32_ERROR ERROR_INSTALL_OPEN_PACKAGE_FAILED;
    public static WIN32_ERROR ERROR_INSTALL_PACKAGE_NOT_FOUND;
    public static WIN32_ERROR ERROR_INSTALL_INVALID_PACKAGE;
    public static WIN32_ERROR ERROR_INSTALL_RESOLVE_DEPENDENCY_FAILED;
    public static WIN32_ERROR ERROR_INSTALL_OUT_OF_DISK_SPACE;
    public static WIN32_ERROR ERROR_INSTALL_NETWORK_FAILURE;
    public static WIN32_ERROR ERROR_INSTALL_REGISTRATION_FAILURE;
    public static WIN32_ERROR ERROR_INSTALL_DEREGISTRATION_FAILURE;
    public static WIN32_ERROR ERROR_INSTALL_CANCEL;
    public static WIN32_ERROR ERROR_INSTALL_FAILED;
    public static WIN32_ERROR ERROR_REMOVE_FAILED;
    public static WIN32_ERROR ERROR_PACKAGE_ALREADY_EXISTS;
    public static WIN32_ERROR ERROR_NEEDS_REMEDIATION;
    public static WIN32_ERROR ERROR_INSTALL_PREREQUISITE_FAILED;
    public static WIN32_ERROR ERROR_PACKAGE_REPOSITORY_CORRUPTED;
    public static WIN32_ERROR ERROR_INSTALL_POLICY_FAILURE;
    public static WIN32_ERROR ERROR_PACKAGE_UPDATING;
    public static WIN32_ERROR ERROR_DEPLOYMENT_BLOCKED_BY_POLICY;
    public static WIN32_ERROR ERROR_PACKAGES_IN_USE;
    public static WIN32_ERROR ERROR_RECOVERY_FILE_CORRUPT;
    public static WIN32_ERROR ERROR_INVALID_STAGED_SIGNATURE;
    public static WIN32_ERROR ERROR_DELETING_EXISTING_APPLICATIONDATA_STORE_FAILED;
    public static WIN32_ERROR ERROR_INSTALL_PACKAGE_DOWNGRADE;
    public static WIN32_ERROR ERROR_SYSTEM_NEEDS_REMEDIATION;
    public static WIN32_ERROR ERROR_APPX_INTEGRITY_FAILURE_CLR_NGEN;
    public static WIN32_ERROR ERROR_RESILIENCY_FILE_CORRUPT;
    public static WIN32_ERROR ERROR_INSTALL_FIREWALL_SERVICE_NOT_RUNNING;
    public static WIN32_ERROR ERROR_PACKAGE_MOVE_FAILED;
    public static WIN32_ERROR ERROR_INSTALL_VOLUME_NOT_EMPTY;
    public static WIN32_ERROR ERROR_INSTALL_VOLUME_OFFLINE;
    public static WIN32_ERROR ERROR_INSTALL_VOLUME_CORRUPT;
    public static WIN32_ERROR ERROR_NEEDS_REGISTRATION;
    public static WIN32_ERROR ERROR_INSTALL_WRONG_PROCESSOR_ARCHITECTURE;
    public static WIN32_ERROR ERROR_DEV_SIDELOAD_LIMIT_EXCEEDED;
    public static WIN32_ERROR ERROR_INSTALL_OPTIONAL_PACKAGE_REQUIRES_MAIN_PACKAGE;
    public static WIN32_ERROR ERROR_PACKAGE_NOT_SUPPORTED_ON_FILESYSTEM;
    public static WIN32_ERROR ERROR_PACKAGE_MOVE_BLOCKED_BY_STREAMING;
    public static WIN32_ERROR ERROR_INSTALL_OPTIONAL_PACKAGE_APPLICATIONID_NOT_UNIQUE;
    public static WIN32_ERROR ERROR_PACKAGE_STAGING_ONHOLD;
    public static WIN32_ERROR ERROR_INSTALL_INVALID_RELATED_SET_UPDATE;
    public static WIN32_ERROR ERROR_INSTALL_OPTIONAL_PACKAGE_REQUIRES_MAIN_PACKAGE_FULLTRUST_CAPABILITY;
    public static WIN32_ERROR ERROR_DEPLOYMENT_BLOCKED_BY_USER_LOG_OFF;
    public static WIN32_ERROR ERROR_PROVISION_OPTIONAL_PACKAGE_REQUIRES_MAIN_PACKAGE_PROVISIONED;
    public static WIN32_ERROR ERROR_PACKAGES_REPUTATION_CHECK_FAILED;
    public static WIN32_ERROR ERROR_PACKAGES_REPUTATION_CHECK_TIMEDOUT;
    public static WIN32_ERROR ERROR_DEPLOYMENT_OPTION_NOT_SUPPORTED;
    public static WIN32_ERROR ERROR_APPINSTALLER_ACTIVATION_BLOCKED;
    public static WIN32_ERROR ERROR_REGISTRATION_FROM_REMOTE_DRIVE_NOT_SUPPORTED;
    public static WIN32_ERROR ERROR_APPX_RAW_DATA_WRITE_FAILED;
    public static WIN32_ERROR ERROR_DEPLOYMENT_BLOCKED_BY_VOLUME_POLICY_PACKAGE;
    public static WIN32_ERROR ERROR_DEPLOYMENT_BLOCKED_BY_VOLUME_POLICY_MACHINE;
    public static WIN32_ERROR ERROR_DEPLOYMENT_BLOCKED_BY_PROFILE_POLICY;
    public static WIN32_ERROR ERROR_DEPLOYMENT_FAILED_CONFLICTING_MUTABLE_PACKAGE_DIRECTORY;
    public static WIN32_ERROR ERROR_SINGLETON_RESOURCE_INSTALLED_IN_ACTIVE_USER;
    public static WIN32_ERROR ERROR_DIFFERENT_VERSION_OF_PACKAGED_SERVICE_INSTALLED;
    public static WIN32_ERROR ERROR_SERVICE_EXISTS_AS_NON_PACKAGED_SERVICE;
    public static WIN32_ERROR ERROR_PACKAGED_SERVICE_REQUIRES_ADMIN_PRIVILEGES;
    public static WIN32_ERROR ERROR_REDIRECTION_TO_DEFAULT_ACCOUNT_NOT_ALLOWED;
    public static WIN32_ERROR ERROR_PACKAGE_LACKS_CAPABILITY_TO_DEPLOY_ON_HOST;
    public static WIN32_ERROR ERROR_UNSIGNED_PACKAGE_INVALID_CONTENT;
    public static WIN32_ERROR ERROR_UNSIGNED_PACKAGE_INVALID_PUBLISHER_NAMESPACE;
    public static WIN32_ERROR ERROR_SIGNED_PACKAGE_INVALID_PUBLISHER_NAMESPACE;
    public static WIN32_ERROR ERROR_PACKAGE_EXTERNAL_LOCATION_NOT_ALLOWED;
    public static WIN32_ERROR ERROR_INSTALL_FULLTRUST_HOSTRUNTIME_REQUIRES_MAIN_PACKAGE_FULLTRUST_CAPABILITY;
    public static WIN32_ERROR ERROR_PACKAGE_LACKS_CAPABILITY_FOR_MANDATORY_STARTUPTASKS;
    public static WIN32_ERROR ERROR_INSTALL_RESOLVE_HOSTRUNTIME_DEPENDENCY_FAILED;
    public static WIN32_ERROR ERROR_MACHINE_SCOPE_NOT_ALLOWED;
    public static WIN32_ERROR ERROR_CLASSIC_COMPAT_MODE_NOT_ALLOWED;
    public static WIN32_ERROR ERROR_STAGEFROMUPDATEAGENT_PACKAGE_NOT_APPLICABLE;
    public static WIN32_ERROR ERROR_PACKAGE_NOT_REGISTERED_FOR_USER;
    public static WIN32_ERROR ERROR_PACKAGE_NAME_MISMATCH;
    public static WIN32_ERROR ERROR_APPINSTALLER_URI_IN_USE;
    public static WIN32_ERROR ERROR_APPINSTALLER_IS_MANAGED_BY_SYSTEM;
    public static WIN32_ERROR APPMODEL_ERROR_NO_PACKAGE;
    public static WIN32_ERROR APPMODEL_ERROR_PACKAGE_RUNTIME_CORRUPT;
    public static WIN32_ERROR APPMODEL_ERROR_PACKAGE_IDENTITY_CORRUPT;
    public static WIN32_ERROR APPMODEL_ERROR_NO_APPLICATION;
    public static WIN32_ERROR APPMODEL_ERROR_DYNAMIC_PROPERTY_READ_FAILED;
    public static WIN32_ERROR APPMODEL_ERROR_DYNAMIC_PROPERTY_INVALID;
    public static WIN32_ERROR APPMODEL_ERROR_PACKAGE_NOT_AVAILABLE;
    public static WIN32_ERROR APPMODEL_ERROR_NO_MUTABLE_DIRECTORY;
    public static WIN32_ERROR ERROR_STATE_LOAD_STORE_FAILED;
    public static WIN32_ERROR ERROR_STATE_GET_VERSION_FAILED;
    public static WIN32_ERROR ERROR_STATE_SET_VERSION_FAILED;
    public static WIN32_ERROR ERROR_STATE_STRUCTURED_RESET_FAILED;
    public static WIN32_ERROR ERROR_STATE_OPEN_CONTAINER_FAILED;
    public static WIN32_ERROR ERROR_STATE_CREATE_CONTAINER_FAILED;
    public static WIN32_ERROR ERROR_STATE_DELETE_CONTAINER_FAILED;
    public static WIN32_ERROR ERROR_STATE_READ_SETTING_FAILED;
    public static WIN32_ERROR ERROR_STATE_WRITE_SETTING_FAILED;
    public static WIN32_ERROR ERROR_STATE_DELETE_SETTING_FAILED;
    public static WIN32_ERROR ERROR_STATE_QUERY_SETTING_FAILED;
    public static WIN32_ERROR ERROR_STATE_READ_COMPOSITE_SETTING_FAILED;
    public static WIN32_ERROR ERROR_STATE_WRITE_COMPOSITE_SETTING_FAILED;
    public static WIN32_ERROR ERROR_STATE_ENUMERATE_CONTAINER_FAILED;
    public static WIN32_ERROR ERROR_STATE_ENUMERATE_SETTINGS_FAILED;
    public static WIN32_ERROR ERROR_STATE_COMPOSITE_SETTING_VALUE_SIZE_LIMIT_EXCEEDED;
    public static WIN32_ERROR ERROR_STATE_SETTING_VALUE_SIZE_LIMIT_EXCEEDED;
    public static WIN32_ERROR ERROR_STATE_SETTING_NAME_SIZE_LIMIT_EXCEEDED;
    public static WIN32_ERROR ERROR_STATE_CONTAINER_NAME_SIZE_LIMIT_EXCEEDED;
    public static WIN32_ERROR ERROR_API_UNAVAILABLE;
    public static WIN32_ERROR ERROR_NDIS_INTERFACE_CLOSING;
    public static WIN32_ERROR ERROR_NDIS_BAD_VERSION;
    public static WIN32_ERROR ERROR_NDIS_BAD_CHARACTERISTICS;
    public static WIN32_ERROR ERROR_NDIS_ADAPTER_NOT_FOUND;
    public static WIN32_ERROR ERROR_NDIS_OPEN_FAILED;
    public static WIN32_ERROR ERROR_NDIS_DEVICE_FAILED;
    public static WIN32_ERROR ERROR_NDIS_MULTICAST_FULL;
    public static WIN32_ERROR ERROR_NDIS_MULTICAST_EXISTS;
    public static WIN32_ERROR ERROR_NDIS_MULTICAST_NOT_FOUND;
    public static WIN32_ERROR ERROR_NDIS_REQUEST_ABORTED;
    public static WIN32_ERROR ERROR_NDIS_RESET_IN_PROGRESS;
    public static WIN32_ERROR ERROR_NDIS_NOT_SUPPORTED;
    public static WIN32_ERROR ERROR_NDIS_INVALID_PACKET;
    public static WIN32_ERROR ERROR_NDIS_ADAPTER_NOT_READY;
    public static WIN32_ERROR ERROR_NDIS_INVALID_LENGTH;
    public static WIN32_ERROR ERROR_NDIS_INVALID_DATA;
    public static WIN32_ERROR ERROR_NDIS_BUFFER_TOO_SHORT;
    public static WIN32_ERROR ERROR_NDIS_INVALID_OID;
    public static WIN32_ERROR ERROR_NDIS_ADAPTER_REMOVED;
    public static WIN32_ERROR ERROR_NDIS_UNSUPPORTED_MEDIA;
    public static WIN32_ERROR ERROR_NDIS_GROUP_ADDRESS_IN_USE;
    public static WIN32_ERROR ERROR_NDIS_FILE_NOT_FOUND;
    public static WIN32_ERROR ERROR_NDIS_ERROR_READING_FILE;
    public static WIN32_ERROR ERROR_NDIS_ALREADY_MAPPED;
    public static WIN32_ERROR ERROR_NDIS_RESOURCE_CONFLICT;
    public static WIN32_ERROR ERROR_NDIS_MEDIA_DISCONNECTED;
    public static WIN32_ERROR ERROR_NDIS_INVALID_ADDRESS;
    public static WIN32_ERROR ERROR_NDIS_INVALID_DEVICE_REQUEST;
    public static WIN32_ERROR ERROR_NDIS_PAUSED;
    public static WIN32_ERROR ERROR_NDIS_INTERFACE_NOT_FOUND;
    public static WIN32_ERROR ERROR_NDIS_UNSUPPORTED_REVISION;
    public static WIN32_ERROR ERROR_NDIS_INVALID_PORT;
    public static WIN32_ERROR ERROR_NDIS_INVALID_PORT_STATE;
    public static WIN32_ERROR ERROR_NDIS_LOW_POWER_STATE;
    public static WIN32_ERROR ERROR_NDIS_REINIT_REQUIRED;
    public static WIN32_ERROR ERROR_NDIS_NO_QUEUES;
    public static WIN32_ERROR ERROR_NDIS_DOT11_AUTO_CONFIG_ENABLED;
    public static WIN32_ERROR ERROR_NDIS_DOT11_MEDIA_IN_USE;
    public static WIN32_ERROR ERROR_NDIS_DOT11_POWER_STATE_INVALID;
    public static WIN32_ERROR ERROR_NDIS_PM_WOL_PATTERN_LIST_FULL;
    public static WIN32_ERROR ERROR_NDIS_PM_PROTOCOL_OFFLOAD_LIST_FULL;
    public static WIN32_ERROR ERROR_NDIS_DOT11_AP_CHANNEL_CURRENTLY_NOT_AVAILABLE;
    public static WIN32_ERROR ERROR_NDIS_DOT11_AP_BAND_CURRENTLY_NOT_AVAILABLE;
    public static WIN32_ERROR ERROR_NDIS_DOT11_AP_CHANNEL_NOT_ALLOWED;
    public static WIN32_ERROR ERROR_NDIS_DOT11_AP_BAND_NOT_ALLOWED;
    public static WIN32_ERROR ERROR_NDIS_INDICATION_REQUIRED;
    public static WIN32_ERROR ERROR_NDIS_OFFLOAD_POLICY;
    public static WIN32_ERROR ERROR_NDIS_OFFLOAD_CONNECTION_REJECTED;
    public static WIN32_ERROR ERROR_NDIS_OFFLOAD_PATH_REJECTED;
    public static WIN32_ERROR ERROR_HV_INVALID_HYPERCALL_CODE;
    public static WIN32_ERROR ERROR_HV_INVALID_HYPERCALL_INPUT;
    public static WIN32_ERROR ERROR_HV_INVALID_ALIGNMENT;
    public static WIN32_ERROR ERROR_HV_INVALID_PARAMETER;
    public static WIN32_ERROR ERROR_HV_ACCESS_DENIED;
    public static WIN32_ERROR ERROR_HV_INVALID_PARTITION_STATE;
    public static WIN32_ERROR ERROR_HV_OPERATION_DENIED;
    public static WIN32_ERROR ERROR_HV_UNKNOWN_PROPERTY;
    public static WIN32_ERROR ERROR_HV_PROPERTY_VALUE_OUT_OF_RANGE;
    public static WIN32_ERROR ERROR_HV_INSUFFICIENT_MEMORY;
    public static WIN32_ERROR ERROR_HV_PARTITION_TOO_DEEP;
    public static WIN32_ERROR ERROR_HV_INVALID_PARTITION_ID;
    public static WIN32_ERROR ERROR_HV_INVALID_VP_INDEX;
    public static WIN32_ERROR ERROR_HV_INVALID_PORT_ID;
    public static WIN32_ERROR ERROR_HV_INVALID_CONNECTION_ID;
    public static WIN32_ERROR ERROR_HV_INSUFFICIENT_BUFFERS;
    public static WIN32_ERROR ERROR_HV_NOT_ACKNOWLEDGED;
    public static WIN32_ERROR ERROR_HV_INVALID_VP_STATE;
    public static WIN32_ERROR ERROR_HV_ACKNOWLEDGED;
    public static WIN32_ERROR ERROR_HV_INVALID_SAVE_RESTORE_STATE;
    public static WIN32_ERROR ERROR_HV_INVALID_SYNIC_STATE;
    public static WIN32_ERROR ERROR_HV_OBJECT_IN_USE;
    public static WIN32_ERROR ERROR_HV_INVALID_PROXIMITY_DOMAIN_INFO;
    public static WIN32_ERROR ERROR_HV_NO_DATA;
    public static WIN32_ERROR ERROR_HV_INACTIVE;
    public static WIN32_ERROR ERROR_HV_NO_RESOURCES;
    public static WIN32_ERROR ERROR_HV_FEATURE_UNAVAILABLE;
    public static WIN32_ERROR ERROR_HV_INSUFFICIENT_BUFFER;
    public static WIN32_ERROR ERROR_HV_INSUFFICIENT_DEVICE_DOMAINS;
    public static WIN32_ERROR ERROR_HV_CPUID_FEATURE_VALIDATION;
    public static WIN32_ERROR ERROR_HV_CPUID_XSAVE_FEATURE_VALIDATION;
    public static WIN32_ERROR ERROR_HV_PROCESSOR_STARTUP_TIMEOUT;
    public static WIN32_ERROR ERROR_HV_SMX_ENABLED;
    public static WIN32_ERROR ERROR_HV_INVALID_LP_INDEX;
    public static WIN32_ERROR ERROR_HV_INVALID_REGISTER_VALUE;
    public static WIN32_ERROR ERROR_HV_INVALID_VTL_STATE;
    public static WIN32_ERROR ERROR_HV_NX_NOT_DETECTED;
    public static WIN32_ERROR ERROR_HV_INVALID_DEVICE_ID;
    public static WIN32_ERROR ERROR_HV_INVALID_DEVICE_STATE;
    public static WIN32_ERROR ERROR_HV_PENDING_PAGE_REQUESTS;
    public static WIN32_ERROR ERROR_HV_PAGE_REQUEST_INVALID;
    public static WIN32_ERROR ERROR_HV_INVALID_CPU_GROUP_ID;
    public static WIN32_ERROR ERROR_HV_INVALID_CPU_GROUP_STATE;
    public static WIN32_ERROR ERROR_HV_OPERATION_FAILED;
    public static WIN32_ERROR ERROR_HV_NOT_ALLOWED_WITH_NESTED_VIRT_ACTIVE;
    public static WIN32_ERROR ERROR_HV_INSUFFICIENT_ROOT_MEMORY;
    public static WIN32_ERROR ERROR_HV_EVENT_BUFFER_ALREADY_FREED;
    public static WIN32_ERROR ERROR_HV_INSUFFICIENT_CONTIGUOUS_MEMORY;
    public static WIN32_ERROR ERROR_HV_DEVICE_NOT_IN_DOMAIN;
    public static WIN32_ERROR ERROR_HV_NESTED_VM_EXIT;
    public static WIN32_ERROR ERROR_HV_MSR_ACCESS_FAILED;
    public static WIN32_ERROR ERROR_HV_INSUFFICIENT_MEMORY_MIRRORING;
    public static WIN32_ERROR ERROR_HV_INSUFFICIENT_CONTIGUOUS_MEMORY_MIRRORING;
    public static WIN32_ERROR ERROR_HV_INSUFFICIENT_CONTIGUOUS_ROOT_MEMORY;
    public static WIN32_ERROR ERROR_HV_INSUFFICIENT_ROOT_MEMORY_MIRRORING;
    public static WIN32_ERROR ERROR_HV_INSUFFICIENT_CONTIGUOUS_ROOT_MEMORY_MIRRORING;
    public static WIN32_ERROR ERROR_HV_NOT_PRESENT;
    public static WIN32_ERROR ERROR_VID_DUPLICATE_HANDLER;
    public static WIN32_ERROR ERROR_VID_TOO_MANY_HANDLERS;
    public static WIN32_ERROR ERROR_VID_QUEUE_FULL;
    public static WIN32_ERROR ERROR_VID_HANDLER_NOT_PRESENT;
    public static WIN32_ERROR ERROR_VID_INVALID_OBJECT_NAME;
    public static WIN32_ERROR ERROR_VID_PARTITION_NAME_TOO_LONG;
    public static WIN32_ERROR ERROR_VID_MESSAGE_QUEUE_NAME_TOO_LONG;
    public static WIN32_ERROR ERROR_VID_PARTITION_ALREADY_EXISTS;
    public static WIN32_ERROR ERROR_VID_PARTITION_DOES_NOT_EXIST;
    public static WIN32_ERROR ERROR_VID_PARTITION_NAME_NOT_FOUND;
    public static WIN32_ERROR ERROR_VID_MESSAGE_QUEUE_ALREADY_EXISTS;
    public static WIN32_ERROR ERROR_VID_EXCEEDED_MBP_ENTRY_MAP_LIMIT;
    public static WIN32_ERROR ERROR_VID_MB_STILL_REFERENCED;
    public static WIN32_ERROR ERROR_VID_CHILD_GPA_PAGE_SET_CORRUPTED;
    public static WIN32_ERROR ERROR_VID_INVALID_NUMA_SETTINGS;
    public static WIN32_ERROR ERROR_VID_INVALID_NUMA_NODE_INDEX;
    public static WIN32_ERROR ERROR_VID_NOTIFICATION_QUEUE_ALREADY_ASSOCIATED;
    public static WIN32_ERROR ERROR_VID_INVALID_MEMORY_BLOCK_HANDLE;
    public static WIN32_ERROR ERROR_VID_PAGE_RANGE_OVERFLOW;
    public static WIN32_ERROR ERROR_VID_INVALID_MESSAGE_QUEUE_HANDLE;
    public static WIN32_ERROR ERROR_VID_INVALID_GPA_RANGE_HANDLE;
    public static WIN32_ERROR ERROR_VID_NO_MEMORY_BLOCK_NOTIFICATION_QUEUE;
    public static WIN32_ERROR ERROR_VID_MEMORY_BLOCK_LOCK_COUNT_EXCEEDED;
    public static WIN32_ERROR ERROR_VID_INVALID_PPM_HANDLE;
    public static WIN32_ERROR ERROR_VID_MBPS_ARE_LOCKED;
    public static WIN32_ERROR ERROR_VID_MESSAGE_QUEUE_CLOSED;
    public static WIN32_ERROR ERROR_VID_VIRTUAL_PROCESSOR_LIMIT_EXCEEDED;
    public static WIN32_ERROR ERROR_VID_STOP_PENDING;
    public static WIN32_ERROR ERROR_VID_INVALID_PROCESSOR_STATE;
    public static WIN32_ERROR ERROR_VID_EXCEEDED_KM_CONTEXT_COUNT_LIMIT;
    public static WIN32_ERROR ERROR_VID_KM_INTERFACE_ALREADY_INITIALIZED;
    public static WIN32_ERROR ERROR_VID_MB_PROPERTY_ALREADY_SET_RESET;
    public static WIN32_ERROR ERROR_VID_MMIO_RANGE_DESTROYED;
    public static WIN32_ERROR ERROR_VID_INVALID_CHILD_GPA_PAGE_SET;
    public static WIN32_ERROR ERROR_VID_RESERVE_PAGE_SET_IS_BEING_USED;
    public static WIN32_ERROR ERROR_VID_RESERVE_PAGE_SET_TOO_SMALL;
    public static WIN32_ERROR ERROR_VID_MBP_ALREADY_LOCKED_USING_RESERVED_PAGE;
    public static WIN32_ERROR ERROR_VID_MBP_COUNT_EXCEEDED_LIMIT;
    public static WIN32_ERROR ERROR_VID_SAVED_STATE_CORRUPT;
    public static WIN32_ERROR ERROR_VID_SAVED_STATE_UNRECOGNIZED_ITEM;
    public static WIN32_ERROR ERROR_VID_SAVED_STATE_INCOMPATIBLE;
    public static WIN32_ERROR ERROR_VID_VTL_ACCESS_DENIED;
    public static WIN32_ERROR ERROR_VID_INSUFFICIENT_RESOURCES_RESERVE;
    public static WIN32_ERROR ERROR_VID_INSUFFICIENT_RESOURCES_PHYSICAL_BUFFER;
    public static WIN32_ERROR ERROR_VID_INSUFFICIENT_RESOURCES_HV_DEPOSIT;
    public static WIN32_ERROR ERROR_VID_MEMORY_TYPE_NOT_SUPPORTED;
    public static WIN32_ERROR ERROR_VID_INSUFFICIENT_RESOURCES_WITHDRAW;
    public static WIN32_ERROR ERROR_VID_PROCESS_ALREADY_SET;
    public static WIN32_ERROR ERROR_VMCOMPUTE_TERMINATED_DURING_START;
    public static WIN32_ERROR ERROR_VMCOMPUTE_IMAGE_MISMATCH;
    public static WIN32_ERROR ERROR_VMCOMPUTE_HYPERV_NOT_INSTALLED;
    public static WIN32_ERROR ERROR_VMCOMPUTE_OPERATION_PENDING;
    public static WIN32_ERROR ERROR_VMCOMPUTE_TOO_MANY_NOTIFICATIONS;
    public static WIN32_ERROR ERROR_VMCOMPUTE_INVALID_STATE;
    public static WIN32_ERROR ERROR_VMCOMPUTE_UNEXPECTED_EXIT;
    public static WIN32_ERROR ERROR_VMCOMPUTE_TERMINATED;
    public static WIN32_ERROR ERROR_VMCOMPUTE_CONNECT_FAILED;
    public static WIN32_ERROR ERROR_VMCOMPUTE_TIMEOUT;
    public static WIN32_ERROR ERROR_VMCOMPUTE_CONNECTION_CLOSED;
    public static WIN32_ERROR ERROR_VMCOMPUTE_UNKNOWN_MESSAGE;
    public static WIN32_ERROR ERROR_VMCOMPUTE_UNSUPPORTED_PROTOCOL_VERSION;
    public static WIN32_ERROR ERROR_VMCOMPUTE_INVALID_JSON;
    public static WIN32_ERROR ERROR_VMCOMPUTE_SYSTEM_NOT_FOUND;
    public static WIN32_ERROR ERROR_VMCOMPUTE_SYSTEM_ALREADY_EXISTS;
    public static WIN32_ERROR ERROR_VMCOMPUTE_SYSTEM_ALREADY_STOPPED;
    public static WIN32_ERROR ERROR_VMCOMPUTE_PROTOCOL_ERROR;
    public static WIN32_ERROR ERROR_VMCOMPUTE_INVALID_LAYER;
    public static WIN32_ERROR ERROR_VMCOMPUTE_WINDOWS_INSIDER_REQUIRED;
    public static WIN32_ERROR ERROR_VNET_VIRTUAL_SWITCH_NAME_NOT_FOUND;
    public static WIN32_ERROR ERROR_VID_REMOTE_NODE_PARENT_GPA_PAGES_USED;
    public static WIN32_ERROR ERROR_VSMB_SAVED_STATE_FILE_NOT_FOUND;
    public static WIN32_ERROR ERROR_VSMB_SAVED_STATE_CORRUPT;
    public static WIN32_ERROR ERROR_VOLMGR_INCOMPLETE_REGENERATION;
    public static WIN32_ERROR ERROR_VOLMGR_INCOMPLETE_DISK_MIGRATION;
    public static WIN32_ERROR ERROR_VOLMGR_DATABASE_FULL;
    public static WIN32_ERROR ERROR_VOLMGR_DISK_CONFIGURATION_CORRUPTED;
    public static WIN32_ERROR ERROR_VOLMGR_DISK_CONFIGURATION_NOT_IN_SYNC;
    public static WIN32_ERROR ERROR_VOLMGR_PACK_CONFIG_UPDATE_FAILED;
    public static WIN32_ERROR ERROR_VOLMGR_DISK_CONTAINS_NON_SIMPLE_VOLUME;
    public static WIN32_ERROR ERROR_VOLMGR_DISK_DUPLICATE;
    public static WIN32_ERROR ERROR_VOLMGR_DISK_DYNAMIC;
    public static WIN32_ERROR ERROR_VOLMGR_DISK_ID_INVALID;
    public static WIN32_ERROR ERROR_VOLMGR_DISK_INVALID;
    public static WIN32_ERROR ERROR_VOLMGR_DISK_LAST_VOTER;
    public static WIN32_ERROR ERROR_VOLMGR_DISK_LAYOUT_INVALID;
    public static WIN32_ERROR ERROR_VOLMGR_DISK_LAYOUT_NON_BASIC_BETWEEN_BASIC_PARTITIONS;
    public static WIN32_ERROR ERROR_VOLMGR_DISK_LAYOUT_NOT_CYLINDER_ALIGNED;
    public static WIN32_ERROR ERROR_VOLMGR_DISK_LAYOUT_PARTITIONS_TOO_SMALL;
    public static WIN32_ERROR ERROR_VOLMGR_DISK_LAYOUT_PRIMARY_BETWEEN_LOGICAL_PARTITIONS;
    public static WIN32_ERROR ERROR_VOLMGR_DISK_LAYOUT_TOO_MANY_PARTITIONS;
    public static WIN32_ERROR ERROR_VOLMGR_DISK_MISSING;
    public static WIN32_ERROR ERROR_VOLMGR_DISK_NOT_EMPTY;
    public static WIN32_ERROR ERROR_VOLMGR_DISK_NOT_ENOUGH_SPACE;
    public static WIN32_ERROR ERROR_VOLMGR_DISK_REVECTORING_FAILED;
    public static WIN32_ERROR ERROR_VOLMGR_DISK_SECTOR_SIZE_INVALID;
    public static WIN32_ERROR ERROR_VOLMGR_DISK_SET_NOT_CONTAINED;
    public static WIN32_ERROR ERROR_VOLMGR_DISK_USED_BY_MULTIPLE_MEMBERS;
    public static WIN32_ERROR ERROR_VOLMGR_DISK_USED_BY_MULTIPLE_PLEXES;
    public static WIN32_ERROR ERROR_VOLMGR_DYNAMIC_DISK_NOT_SUPPORTED;
    public static WIN32_ERROR ERROR_VOLMGR_EXTENT_ALREADY_USED;
    public static WIN32_ERROR ERROR_VOLMGR_EXTENT_NOT_CONTIGUOUS;
    public static WIN32_ERROR ERROR_VOLMGR_EXTENT_NOT_IN_PUBLIC_REGION;
    public static WIN32_ERROR ERROR_VOLMGR_EXTENT_NOT_SECTOR_ALIGNED;
    public static WIN32_ERROR ERROR_VOLMGR_EXTENT_OVERLAPS_EBR_PARTITION;
    public static WIN32_ERROR ERROR_VOLMGR_EXTENT_VOLUME_LENGTHS_DO_NOT_MATCH;
    public static WIN32_ERROR ERROR_VOLMGR_FAULT_TOLERANT_NOT_SUPPORTED;
    public static WIN32_ERROR ERROR_VOLMGR_INTERLEAVE_LENGTH_INVALID;
    public static WIN32_ERROR ERROR_VOLMGR_MAXIMUM_REGISTERED_USERS;
    public static WIN32_ERROR ERROR_VOLMGR_MEMBER_IN_SYNC;
    public static WIN32_ERROR ERROR_VOLMGR_MEMBER_INDEX_DUPLICATE;
    public static WIN32_ERROR ERROR_VOLMGR_MEMBER_INDEX_INVALID;
    public static WIN32_ERROR ERROR_VOLMGR_MEMBER_MISSING;
    public static WIN32_ERROR ERROR_VOLMGR_MEMBER_NOT_DETACHED;
    public static WIN32_ERROR ERROR_VOLMGR_MEMBER_REGENERATING;
    public static WIN32_ERROR ERROR_VOLMGR_ALL_DISKS_FAILED;
    public static WIN32_ERROR ERROR_VOLMGR_NO_REGISTERED_USERS;
    public static WIN32_ERROR ERROR_VOLMGR_NO_SUCH_USER;
    public static WIN32_ERROR ERROR_VOLMGR_NOTIFICATION_RESET;
    public static WIN32_ERROR ERROR_VOLMGR_NUMBER_OF_MEMBERS_INVALID;
    public static WIN32_ERROR ERROR_VOLMGR_NUMBER_OF_PLEXES_INVALID;
    public static WIN32_ERROR ERROR_VOLMGR_PACK_DUPLICATE;
    public static WIN32_ERROR ERROR_VOLMGR_PACK_ID_INVALID;
    public static WIN32_ERROR ERROR_VOLMGR_PACK_INVALID;
    public static WIN32_ERROR ERROR_VOLMGR_PACK_NAME_INVALID;
    public static WIN32_ERROR ERROR_VOLMGR_PACK_OFFLINE;
    public static WIN32_ERROR ERROR_VOLMGR_PACK_HAS_QUORUM;
    public static WIN32_ERROR ERROR_VOLMGR_PACK_WITHOUT_QUORUM;
    public static WIN32_ERROR ERROR_VOLMGR_PARTITION_STYLE_INVALID;
    public static WIN32_ERROR ERROR_VOLMGR_PARTITION_UPDATE_FAILED;
    public static WIN32_ERROR ERROR_VOLMGR_PLEX_IN_SYNC;
    public static WIN32_ERROR ERROR_VOLMGR_PLEX_INDEX_DUPLICATE;
    public static WIN32_ERROR ERROR_VOLMGR_PLEX_INDEX_INVALID;
    public static WIN32_ERROR ERROR_VOLMGR_PLEX_LAST_ACTIVE;
    public static WIN32_ERROR ERROR_VOLMGR_PLEX_MISSING;
    public static WIN32_ERROR ERROR_VOLMGR_PLEX_REGENERATING;
    public static WIN32_ERROR ERROR_VOLMGR_PLEX_TYPE_INVALID;
    public static WIN32_ERROR ERROR_VOLMGR_PLEX_NOT_RAID5;
    public static WIN32_ERROR ERROR_VOLMGR_PLEX_NOT_SIMPLE;
    public static WIN32_ERROR ERROR_VOLMGR_STRUCTURE_SIZE_INVALID;
    public static WIN32_ERROR ERROR_VOLMGR_TOO_MANY_NOTIFICATION_REQUESTS;
    public static WIN32_ERROR ERROR_VOLMGR_TRANSACTION_IN_PROGRESS;
    public static WIN32_ERROR ERROR_VOLMGR_UNEXPECTED_DISK_LAYOUT_CHANGE;
    public static WIN32_ERROR ERROR_VOLMGR_VOLUME_CONTAINS_MISSING_DISK;
    public static WIN32_ERROR ERROR_VOLMGR_VOLUME_ID_INVALID;
    public static WIN32_ERROR ERROR_VOLMGR_VOLUME_LENGTH_INVALID;
    public static WIN32_ERROR ERROR_VOLMGR_VOLUME_LENGTH_NOT_SECTOR_SIZE_MULTIPLE;
    public static WIN32_ERROR ERROR_VOLMGR_VOLUME_NOT_MIRRORED;
    public static WIN32_ERROR ERROR_VOLMGR_VOLUME_NOT_RETAINED;
    public static WIN32_ERROR ERROR_VOLMGR_VOLUME_OFFLINE;
    public static WIN32_ERROR ERROR_VOLMGR_VOLUME_RETAINED;
    public static WIN32_ERROR ERROR_VOLMGR_NUMBER_OF_EXTENTS_INVALID;
    public static WIN32_ERROR ERROR_VOLMGR_DIFFERENT_SECTOR_SIZE;
    public static WIN32_ERROR ERROR_VOLMGR_BAD_BOOT_DISK;
    public static WIN32_ERROR ERROR_VOLMGR_PACK_CONFIG_OFFLINE;
    public static WIN32_ERROR ERROR_VOLMGR_PACK_CONFIG_ONLINE;
    public static WIN32_ERROR ERROR_VOLMGR_NOT_PRIMARY_PACK;
    public static WIN32_ERROR ERROR_VOLMGR_PACK_LOG_UPDATE_FAILED;
    public static WIN32_ERROR ERROR_VOLMGR_NUMBER_OF_DISKS_IN_PLEX_INVALID;
    public static WIN32_ERROR ERROR_VOLMGR_NUMBER_OF_DISKS_IN_MEMBER_INVALID;
    public static WIN32_ERROR ERROR_VOLMGR_VOLUME_MIRRORED;
    public static WIN32_ERROR ERROR_VOLMGR_PLEX_NOT_SIMPLE_SPANNED;
    public static WIN32_ERROR ERROR_VOLMGR_NO_VALID_LOG_COPIES;
    public static WIN32_ERROR ERROR_VOLMGR_PRIMARY_PACK_PRESENT;
    public static WIN32_ERROR ERROR_VOLMGR_NUMBER_OF_DISKS_INVALID;
    public static WIN32_ERROR ERROR_VOLMGR_MIRROR_NOT_SUPPORTED;
    public static WIN32_ERROR ERROR_VOLMGR_RAID5_NOT_SUPPORTED;
    public static WIN32_ERROR ERROR_BCD_NOT_ALL_ENTRIES_IMPORTED;
    public static WIN32_ERROR ERROR_BCD_TOO_MANY_ELEMENTS;
    public static WIN32_ERROR ERROR_BCD_NOT_ALL_ENTRIES_SYNCHRONIZED;
    public static WIN32_ERROR ERROR_VHD_DRIVE_FOOTER_MISSING;
    public static WIN32_ERROR ERROR_VHD_DRIVE_FOOTER_CHECKSUM_MISMATCH;
    public static WIN32_ERROR ERROR_VHD_DRIVE_FOOTER_CORRUPT;
    public static WIN32_ERROR ERROR_VHD_FORMAT_UNKNOWN;
    public static WIN32_ERROR ERROR_VHD_FORMAT_UNSUPPORTED_VERSION;
    public static WIN32_ERROR ERROR_VHD_SPARSE_HEADER_CHECKSUM_MISMATCH;
    public static WIN32_ERROR ERROR_VHD_SPARSE_HEADER_UNSUPPORTED_VERSION;
    public static WIN32_ERROR ERROR_VHD_SPARSE_HEADER_CORRUPT;
    public static WIN32_ERROR ERROR_VHD_BLOCK_ALLOCATION_FAILURE;
    public static WIN32_ERROR ERROR_VHD_BLOCK_ALLOCATION_TABLE_CORRUPT;
    public static WIN32_ERROR ERROR_VHD_INVALID_BLOCK_SIZE;
    public static WIN32_ERROR ERROR_VHD_BITMAP_MISMATCH;
    public static WIN32_ERROR ERROR_VHD_PARENT_VHD_NOT_FOUND;
    public static WIN32_ERROR ERROR_VHD_CHILD_PARENT_ID_MISMATCH;
    public static WIN32_ERROR ERROR_VHD_CHILD_PARENT_TIMESTAMP_MISMATCH;
    public static WIN32_ERROR ERROR_VHD_METADATA_READ_FAILURE;
    public static WIN32_ERROR ERROR_VHD_METADATA_WRITE_FAILURE;
    public static WIN32_ERROR ERROR_VHD_INVALID_SIZE;
    public static WIN32_ERROR ERROR_VHD_INVALID_FILE_SIZE;
    public static WIN32_ERROR ERROR_VIRTDISK_PROVIDER_NOT_FOUND;
    public static WIN32_ERROR ERROR_VIRTDISK_NOT_VIRTUAL_DISK;
    public static WIN32_ERROR ERROR_VHD_PARENT_VHD_ACCESS_DENIED;
    public static WIN32_ERROR ERROR_VHD_CHILD_PARENT_SIZE_MISMATCH;
    public static WIN32_ERROR ERROR_VHD_DIFFERENCING_CHAIN_CYCLE_DETECTED;
    public static WIN32_ERROR ERROR_VHD_DIFFERENCING_CHAIN_ERROR_IN_PARENT;
    public static WIN32_ERROR ERROR_VIRTUAL_DISK_LIMITATION;
    public static WIN32_ERROR ERROR_VHD_INVALID_TYPE;
    public static WIN32_ERROR ERROR_VHD_INVALID_STATE;
    public static WIN32_ERROR ERROR_VIRTDISK_UNSUPPORTED_DISK_SECTOR_SIZE;
    public static WIN32_ERROR ERROR_VIRTDISK_DISK_ALREADY_OWNED;
    public static WIN32_ERROR ERROR_VIRTDISK_DISK_ONLINE_AND_WRITABLE;
    public static WIN32_ERROR ERROR_CTLOG_TRACKING_NOT_INITIALIZED;
    public static WIN32_ERROR ERROR_CTLOG_LOGFILE_SIZE_EXCEEDED_MAXSIZE;
    public static WIN32_ERROR ERROR_CTLOG_VHD_CHANGED_OFFLINE;
    public static WIN32_ERROR ERROR_CTLOG_INVALID_TRACKING_STATE;
    public static WIN32_ERROR ERROR_CTLOG_INCONSISTENT_TRACKING_FILE;
    public static WIN32_ERROR ERROR_VHD_RESIZE_WOULD_TRUNCATE_DATA;
    public static WIN32_ERROR ERROR_VHD_COULD_NOT_COMPUTE_MINIMUM_VIRTUAL_SIZE;
    public static WIN32_ERROR ERROR_VHD_ALREADY_AT_OR_BELOW_MINIMUM_VIRTUAL_SIZE;
    public static WIN32_ERROR ERROR_VHD_METADATA_FULL;
    public static WIN32_ERROR ERROR_VHD_INVALID_CHANGE_TRACKING_ID;
    public static WIN32_ERROR ERROR_VHD_CHANGE_TRACKING_DISABLED;
    public static WIN32_ERROR ERROR_VHD_MISSING_CHANGE_TRACKING_INFORMATION;
    public static WIN32_ERROR ERROR_QUERY_STORAGE_ERROR;
}
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.3.46-beta+dd815b2b9b")]
internal static class Windows.Win32.SetupCommonPInvoke : object {
    internal static UInt32 ATTACH_PARENT_PROCESS;
    [DefaultDllImportSearchPathsAttribute("2048")]
internal static BOOL AttachConsole(UInt32 dwProcessId);
    [DefaultDllImportSearchPathsAttribute("2048")]
internal static BOOL CloseHandle(HANDLE hObject);
    [DefaultDllImportSearchPathsAttribute("2048")]
internal static UInt32 FormatMessage(FORMAT_MESSAGE_OPTIONS dwFlags, Void* lpSource, UInt32 dwMessageId, UInt32 dwLanguageId, PWSTR lpBuffer, UInt32 nSize, SByte** Arguments);
    internal static HRESULT HRESULT_FROM_WIN32(WIN32_ERROR error);
    [DefaultDllImportSearchPathsAttribute("2048")]
internal static BOOL SetForegroundWindow(HWND hWnd);
}
[FlagsAttribute]
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.3.46-beta+dd815b2b9b")]
internal enum Windows.Win32.System.Diagnostics.Debug.FORMAT_MESSAGE_OPTIONS : Enum {
    public UInt32 value__;
    public static FORMAT_MESSAGE_OPTIONS FORMAT_MESSAGE_ALLOCATE_BUFFER;
    public static FORMAT_MESSAGE_OPTIONS FORMAT_MESSAGE_ARGUMENT_ARRAY;
    public static FORMAT_MESSAGE_OPTIONS FORMAT_MESSAGE_FROM_HMODULE;
    public static FORMAT_MESSAGE_OPTIONS FORMAT_MESSAGE_FROM_STRING;
    public static FORMAT_MESSAGE_OPTIONS FORMAT_MESSAGE_FROM_SYSTEM;
    public static FORMAT_MESSAGE_OPTIONS FORMAT_MESSAGE_IGNORE_INSERTS;
}
