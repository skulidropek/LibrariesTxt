[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
[FlagsAttribute]
public enum Microsoft.Internal.VisualStudio.PlatformUI.DirectionalDropArea : Enum {
    public int value__;
    public static DirectionalDropArea None;
    public static DirectionalDropArea On;
    public static DirectionalDropArea Above;
    public static DirectionalDropArea Below;
}
public interface Microsoft.Internal.VisualStudio.PlatformUI.IBatchInitializationScopeProvider {
    public abstract virtual IDisposable CreateBatchInitializationScope();
}
public interface Microsoft.Internal.VisualStudio.PlatformUI.IBrowsablePattern {
    public abstract virtual object GetBrowseObject();
}
public interface Microsoft.Internal.VisualStudio.PlatformUI.IContextMenuController {
    public abstract virtual bool ShowContextMenu(IEnumerable`1<object> items, Point location);
}
public interface Microsoft.Internal.VisualStudio.PlatformUI.IContextMenuPattern {
    public IContextMenuController ContextMenuController { get; }
    public abstract virtual IContextMenuController get_ContextMenuController();
}
public interface Microsoft.Internal.VisualStudio.PlatformUI.IDragDropSourceController {
    public abstract virtual bool DoDragDrop(IEnumerable`1<object> items);
}
public interface Microsoft.Internal.VisualStudio.PlatformUI.IDragDropSourcePattern {
    public IDragDropSourceController DragDropSourceController { get; }
    public abstract virtual IDragDropSourceController get_DragDropSourceController();
}
public interface Microsoft.Internal.VisualStudio.PlatformUI.IDragDropTargetPattern {
    public DirectionalDropArea SupportedAreas { get; }
    public abstract virtual DirectionalDropArea get_SupportedAreas();
    public abstract virtual void OnDragEnter(DirectionalDropArea dropArea, DragEventArgs e);
    public abstract virtual void OnDragOver(DirectionalDropArea dropArea, DragEventArgs e);
    public abstract virtual void OnDragLeave(DirectionalDropArea dropArea, DragEventArgs e);
    public abstract virtual void OnDrop(DirectionalDropArea dropArea, DragEventArgs e);
}
public interface Microsoft.Internal.VisualStudio.PlatformUI.IInteractionPatternProvider {
    public abstract virtual TPattern GetPattern();
}
public interface Microsoft.Internal.VisualStudio.PlatformUI.IInvocationController {
    public abstract virtual bool Invoke(IEnumerable`1<object> items, InputSource inputSource, bool preview);
}
public interface Microsoft.Internal.VisualStudio.PlatformUI.IInvocationPattern {
    public bool CanPreview { get; }
    public IInvocationController InvocationController { get; }
    public abstract virtual bool get_CanPreview();
    public abstract virtual IInvocationController get_InvocationController();
}
public interface Microsoft.Internal.VisualStudio.PlatformUI.IInvocationPatternEx {
    public __VSPROVISIONALVIEWINGSTATUS ProvisionalViewingStatus { get; }
    public abstract virtual __VSPROVISIONALVIEWINGSTATUS get_ProvisionalViewingStatus();
}
public enum Microsoft.Internal.VisualStudio.PlatformUI.InputSource : Enum {
    public int value__;
    public static InputSource Mouse;
    public static InputSource Keyboard;
    public static InputSource None;
}
public interface Microsoft.Internal.VisualStudio.PlatformUI.IPivotItemProviderPattern {
    public abstract virtual object CreatePivotRootItem(IAttachedRelationship relationship);
}
public interface Microsoft.Internal.VisualStudio.PlatformUI.IPrioritizedComparable {
    public int Priority { get; }
    public abstract virtual int get_Priority();
}
public interface Microsoft.Internal.VisualStudio.PlatformUI.IRefreshPattern {
    public abstract virtual Task RefreshAsync();
    public abstract virtual void CancelLoad();
}
public interface Microsoft.Internal.VisualStudio.PlatformUI.IRelationshipSearchParameters {
    public CancellationToken CancellationToken { get; }
    public IEnumerable SourceItemHints { get; }
    public string RelationshipHint { get; }
    public abstract virtual CancellationToken get_CancellationToken();
    public abstract virtual IEnumerable get_SourceItemHints();
    public abstract virtual string get_RelationshipHint();
}
public interface Microsoft.Internal.VisualStudio.PlatformUI.IRenameItemTransaction {
    public RenameItemCompletionFocusBehavior CompletionFocusBehavior { get; }
    public object ContainerItem { get; }
    public IRenamePattern Item { get; }
    public string RenameLabel { get; public set; }
    public RenameItemCompletionResult Result { get; }
    public RenameItemCompletionState State { get; }
    public int DefaultSelectionStart { get; }
    public int DefaultSelectionLength { get; }
    public abstract virtual void Cancel(RenameItemCompletionFocusBehavior trigger);
    public abstract virtual void Commit(RenameItemCompletionFocusBehavior trigger);
    [CompilerGeneratedAttribute]
public abstract virtual void add_Completed(EventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_Completed(EventHandler value);
    public abstract virtual RenameItemCompletionFocusBehavior get_CompletionFocusBehavior();
    public abstract virtual object get_ContainerItem();
    public abstract virtual IRenamePattern get_Item();
    public abstract virtual string get_RenameLabel();
    public abstract virtual void set_RenameLabel(string value);
    public abstract virtual RenameItemCompletionResult get_Result();
    public abstract virtual RenameItemCompletionState get_State();
    public abstract virtual IRenameItemValidationResult ValidateRename();
    public abstract virtual int get_DefaultSelectionStart();
    public abstract virtual int get_DefaultSelectionLength();
}
public interface Microsoft.Internal.VisualStudio.PlatformUI.IRenameItemValidationResult {
    public bool IsValid { get; }
    public string Feedback { get; }
    public string PreviousValue { get; }
    public string ProposedValue { get; }
    public abstract virtual bool get_IsValid();
    public abstract virtual string get_Feedback();
    public abstract virtual string get_PreviousValue();
    public abstract virtual string get_ProposedValue();
}
public interface Microsoft.Internal.VisualStudio.PlatformUI.IRenamePattern {
    public bool CanRename { get; }
    public abstract virtual bool get_CanRename();
    public abstract virtual IRenameItemTransaction BeginRename(object container, Func`2<IRenameItemTransaction, IRenameItemValidationResult> validator);
}
public interface Microsoft.Internal.VisualStudio.PlatformUI.IResurrectableObject {
    public bool IsResurrected { get; }
    public object ResurrectedObject { get; }
    public abstract virtual IResurrectionScope BeginResurrectionTracking();
    public abstract virtual bool get_IsResurrected();
    public abstract virtual object get_ResurrectedObject();
}
public interface Microsoft.Internal.VisualStudio.PlatformUI.IResurrectionScope {
    [CompilerGeneratedAttribute]
public abstract virtual void add_Resurrected(EventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_Resurrected(EventHandler value);
}
public interface Microsoft.Internal.VisualStudio.PlatformUI.ISearchProvider {
    public abstract virtual void Search(IRelationshipSearchParameters parameters, Action`1<ISearchResult> resultAccumulator);
}
public interface Microsoft.Internal.VisualStudio.PlatformUI.ISearchResult {
    public abstract virtual object GetDisplayItem();
}
public interface Microsoft.Internal.VisualStudio.PlatformUI.ISolutionAttachedCollectionService {
    public abstract virtual Lazy`1<ISolutionTreeFilterProvider> TryGetFilterProvider(Guid commandGroup, UInt32 commandId);
    public abstract virtual IDisposable CreateBatchInitializationScope();
}
public interface Microsoft.Internal.VisualStudio.PlatformUI.ISolutionAttachedCollectionService2 {
    public abstract virtual Object[] GetItemsForPath(string filePath);
}
[NullableContextAttribute("1")]
public interface Microsoft.Internal.VisualStudio.PlatformUI.ISolutionSearchService {
    public abstract virtual IEnumerable`1<ISearchProvider> GetSearchProviders();
}
public interface Microsoft.Internal.VisualStudio.PlatformUI.ISupportExpansionEvents {
    public abstract virtual void BeforeExpand();
    public abstract virtual void AfterCollapse();
}
public interface Microsoft.Internal.VisualStudio.PlatformUI.ISupportExpansionState {
    public bool IsDefaultExpanded { get; }
    public abstract virtual bool get_IsDefaultExpanded();
}
public interface Microsoft.Internal.VisualStudio.PlatformUI.ITreeDisplayItem {
    public string Text { get; }
    public string ToolTipText { get; }
    public string StateToolTipText { get; }
    public object ToolTipContent { get; }
    public FontWeight FontWeight { get; }
    public FontStyle FontStyle { get; }
    public bool IsCut { get; }
    public abstract virtual string get_Text();
    public abstract virtual string get_ToolTipText();
    public abstract virtual string get_StateToolTipText();
    public abstract virtual object get_ToolTipContent();
    public abstract virtual FontWeight get_FontWeight();
    public abstract virtual FontStyle get_FontStyle();
    public abstract virtual bool get_IsCut();
}
public interface Microsoft.Internal.VisualStudio.PlatformUI.ITreeDisplayItemWithImages {
    public ImageMoniker IconMoniker { get; }
    public ImageMoniker ExpandedIconMoniker { get; }
    public ImageMoniker OverlayIconMoniker { get; }
    public ImageMoniker StateIconMoniker { get; }
    public abstract virtual ImageMoniker get_IconMoniker();
    public abstract virtual ImageMoniker get_ExpandedIconMoniker();
    public abstract virtual ImageMoniker get_OverlayIconMoniker();
    public abstract virtual ImageMoniker get_StateIconMoniker();
}
public enum Microsoft.Internal.VisualStudio.PlatformUI.RenameItemCompletionFocusBehavior : Enum {
    public int value__;
    public static RenameItemCompletionFocusBehavior Refocus;
    public static RenameItemCompletionFocusBehavior None;
}
public enum Microsoft.Internal.VisualStudio.PlatformUI.RenameItemCompletionResult : Enum {
    public int value__;
    public static RenameItemCompletionResult Renamed;
    public static RenameItemCompletionResult Canceled;
    public static RenameItemCompletionResult Invalid;
}
public enum Microsoft.Internal.VisualStudio.PlatformUI.RenameItemCompletionState : Enum {
    public int value__;
    public static RenameItemCompletionState Incomplete;
    public static RenameItemCompletionState Completing;
    public static RenameItemCompletionState Completed;
}
[EditorBrowsableAttribute("1")]
public static class Microsoft.Internal.VisualStudio.Shell.MpfHelpers : object {
    private static bool shellServiceObtainedOnce;
    private static IVsExecutionContextTracker vsExecutionContextTracker;
    private static bool shellIsShuttingDown;
    private static CancellationTokenSource shuttingDownTokenSource;
    private static ShuttingDownTokenSourceWiringStates modreq(System.Runtime.CompilerServices.IsVolatile) shuttingDownTokenSourceWiringState;
    private static IVsTaskSchedulerService vsTaskSchedulerService;
    public static bool ShellServiceObtainedOnce { get; public set; }
    public static IVsExecutionContextTracker VsExecutionContextTracker { get; }
    public static bool ShellIsShuttingDown { get; }
    public static IVsTaskSchedulerService VsTaskSchedulerService { get; }
    public static CancellationToken ShutdownToken { get; }
    private static MpfHelpers();
    public static bool get_ShellServiceObtainedOnce();
    public static void set_ShellServiceObtainedOnce(bool value);
    public static IVsExecutionContextTracker get_VsExecutionContextTracker();
    public static bool get_ShellIsShuttingDown();
    public static IVsTaskSchedulerService get_VsTaskSchedulerService();
    public static CancellationToken get_ShutdownToken();
    public static IDisposable WhenPropertyChanged(IVsShell shell, int propid, Action`1<object> callback);
    public static IDisposable OnPropertyChanged(IVsShell shell, int propid, Action`1<object> callback);
    internal static void SnapCriticalServices();
    [CompilerGeneratedAttribute]
internal static void <get_ShutdownToken>g__Initialize|17_0();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[EditorBrowsableAttribute("1")]
public class Microsoft.Internal.VisualStudio.Shell.ProjectSystem.AfterCloseSolutionArgs : object {
    [CompilerGeneratedAttribute]
protected Type EqualityContract { get; }
    [CompilerGeneratedAttribute]
protected AfterCloseSolutionArgs(AfterCloseSolutionArgs original);
    [CompilerGeneratedAttribute]
protected virtual Type get_EqualityContract();
    [CompilerGeneratedAttribute]
public virtual string ToString();
    [CompilerGeneratedAttribute]
protected virtual bool PrintMembers(StringBuilder builder);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static bool op_Inequality(AfterCloseSolutionArgs left, AfterCloseSolutionArgs right);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static bool op_Equality(AfterCloseSolutionArgs left, AfterCloseSolutionArgs right);
    [CompilerGeneratedAttribute]
public virtual int GetHashCode();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual bool Equals(object obj);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual bool Equals(AfterCloseSolutionArgs other);
    [CompilerGeneratedAttribute]
public virtual AfterCloseSolutionArgs <Clone>$();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[EditorBrowsableAttribute("1")]
public class Microsoft.Internal.VisualStudio.Shell.ProjectSystem.AfterLoadProjectArgs : object {
    [CompilerGeneratedAttribute]
private Guid <ProjectId>k__BackingField;
    [CompilerGeneratedAttribute]
protected Type EqualityContract { get; }
    public Guid ProjectId { get; public set; }
    public AfterLoadProjectArgs(Guid ProjectId);
    [CompilerGeneratedAttribute]
protected AfterLoadProjectArgs(AfterLoadProjectArgs original);
    [CompilerGeneratedAttribute]
protected virtual Type get_EqualityContract();
    [CompilerGeneratedAttribute]
public Guid get_ProjectId();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_ProjectId(Guid value);
    [CompilerGeneratedAttribute]
public virtual string ToString();
    [CompilerGeneratedAttribute]
protected virtual bool PrintMembers(StringBuilder builder);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static bool op_Inequality(AfterLoadProjectArgs left, AfterLoadProjectArgs right);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static bool op_Equality(AfterLoadProjectArgs left, AfterLoadProjectArgs right);
    [CompilerGeneratedAttribute]
public virtual int GetHashCode();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual bool Equals(object obj);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual bool Equals(AfterLoadProjectArgs other);
    [CompilerGeneratedAttribute]
public virtual AfterLoadProjectArgs <Clone>$();
    [CompilerGeneratedAttribute]
public void Deconstruct(Guid& ProjectId);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[EditorBrowsableAttribute("1")]
public class Microsoft.Internal.VisualStudio.Shell.ProjectSystem.AfterOpenProjectArgs : object {
    [CompilerGeneratedAttribute]
private Guid <ProjectId>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsAdded>k__BackingField;
    [CompilerGeneratedAttribute]
protected Type EqualityContract { get; }
    public Guid ProjectId { get; public set; }
    public bool IsAdded { get; public set; }
    public AfterOpenProjectArgs(Guid ProjectId, bool IsAdded);
    [CompilerGeneratedAttribute]
protected AfterOpenProjectArgs(AfterOpenProjectArgs original);
    [CompilerGeneratedAttribute]
protected virtual Type get_EqualityContract();
    [CompilerGeneratedAttribute]
public Guid get_ProjectId();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_ProjectId(Guid value);
    [CompilerGeneratedAttribute]
public bool get_IsAdded();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_IsAdded(bool value);
    [CompilerGeneratedAttribute]
public virtual string ToString();
    [CompilerGeneratedAttribute]
protected virtual bool PrintMembers(StringBuilder builder);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static bool op_Inequality(AfterOpenProjectArgs left, AfterOpenProjectArgs right);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static bool op_Equality(AfterOpenProjectArgs left, AfterOpenProjectArgs right);
    [CompilerGeneratedAttribute]
public virtual int GetHashCode();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual bool Equals(object obj);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual bool Equals(AfterOpenProjectArgs other);
    [CompilerGeneratedAttribute]
public virtual AfterOpenProjectArgs <Clone>$();
    [CompilerGeneratedAttribute]
public void Deconstruct(Guid& ProjectId, Boolean& IsAdded);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[EditorBrowsableAttribute("1")]
public class Microsoft.Internal.VisualStudio.Shell.ProjectSystem.AfterOpenSolutionArgs : object {
    [CompilerGeneratedAttribute]
private bool <IsNewSolution>k__BackingField;
    [CompilerGeneratedAttribute]
protected Type EqualityContract { get; }
    public bool IsNewSolution { get; public set; }
    public AfterOpenSolutionArgs(bool IsNewSolution);
    [CompilerGeneratedAttribute]
protected AfterOpenSolutionArgs(AfterOpenSolutionArgs original);
    [CompilerGeneratedAttribute]
protected virtual Type get_EqualityContract();
    [CompilerGeneratedAttribute]
public bool get_IsNewSolution();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_IsNewSolution(bool value);
    [CompilerGeneratedAttribute]
public virtual string ToString();
    [CompilerGeneratedAttribute]
protected virtual bool PrintMembers(StringBuilder builder);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static bool op_Inequality(AfterOpenSolutionArgs left, AfterOpenSolutionArgs right);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static bool op_Equality(AfterOpenSolutionArgs left, AfterOpenSolutionArgs right);
    [CompilerGeneratedAttribute]
public virtual int GetHashCode();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual bool Equals(object obj);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual bool Equals(AfterOpenSolutionArgs other);
    [CompilerGeneratedAttribute]
public virtual AfterOpenSolutionArgs <Clone>$();
    [CompilerGeneratedAttribute]
public void Deconstruct(Boolean& IsNewSolution);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[EditorBrowsableAttribute("1")]
public class Microsoft.Internal.VisualStudio.Shell.ProjectSystem.AfterRenameProjectArgs : object {
    [CompilerGeneratedAttribute]
private Guid <ProjectId>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private string <PreviousName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
protected Type EqualityContract { get; }
    public Guid ProjectId { get; public set; }
    [NullableAttribute("2")]
public string PreviousName { get; public set; }
    public string Name { get; public set; }
    public AfterRenameProjectArgs(Guid ProjectId, string PreviousName, string Name);
    [CompilerGeneratedAttribute]
protected AfterRenameProjectArgs(AfterRenameProjectArgs original);
    [CompilerGeneratedAttribute]
protected virtual Type get_EqualityContract();
    [CompilerGeneratedAttribute]
public Guid get_ProjectId();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_ProjectId(Guid value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public string get_PreviousName();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_PreviousName(string value);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_Name(string value);
    [CompilerGeneratedAttribute]
public virtual string ToString();
    [CompilerGeneratedAttribute]
protected virtual bool PrintMembers(StringBuilder builder);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static bool op_Inequality(AfterRenameProjectArgs left, AfterRenameProjectArgs right);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static bool op_Equality(AfterRenameProjectArgs left, AfterRenameProjectArgs right);
    [CompilerGeneratedAttribute]
public virtual int GetHashCode();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual bool Equals(object obj);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual bool Equals(AfterRenameProjectArgs other);
    [CompilerGeneratedAttribute]
public virtual AfterRenameProjectArgs <Clone>$();
    [CompilerGeneratedAttribute]
public void Deconstruct(Guid& ProjectId, String& PreviousName, String& Name);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[EditorBrowsableAttribute("1")]
public class Microsoft.Internal.VisualStudio.Shell.ProjectSystem.AfterRenameSolutionArgs : object {
    [CompilerGeneratedAttribute]
private string <PreviousName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
protected Type EqualityContract { get; }
    public string PreviousName { get; public set; }
    public string Name { get; public set; }
    public AfterRenameSolutionArgs(string PreviousName, string Name);
    [CompilerGeneratedAttribute]
protected AfterRenameSolutionArgs(AfterRenameSolutionArgs original);
    [CompilerGeneratedAttribute]
protected virtual Type get_EqualityContract();
    [CompilerGeneratedAttribute]
public string get_PreviousName();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_PreviousName(string value);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_Name(string value);
    [CompilerGeneratedAttribute]
public virtual string ToString();
    [CompilerGeneratedAttribute]
protected virtual bool PrintMembers(StringBuilder builder);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static bool op_Inequality(AfterRenameSolutionArgs left, AfterRenameSolutionArgs right);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static bool op_Equality(AfterRenameSolutionArgs left, AfterRenameSolutionArgs right);
    [CompilerGeneratedAttribute]
public virtual int GetHashCode();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual bool Equals(object obj);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual bool Equals(AfterRenameSolutionArgs other);
    [CompilerGeneratedAttribute]
public virtual AfterRenameSolutionArgs <Clone>$();
    [CompilerGeneratedAttribute]
public void Deconstruct(String& PreviousName, String& Name);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[EditorBrowsableAttribute("1")]
public class Microsoft.Internal.VisualStudio.Shell.ProjectSystem.BeforeCloseProjectArgs : object {
    [CompilerGeneratedAttribute]
private Guid <ProjectId>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsRemoved>k__BackingField;
    [CompilerGeneratedAttribute]
protected Type EqualityContract { get; }
    public Guid ProjectId { get; public set; }
    public bool IsRemoved { get; public set; }
    public BeforeCloseProjectArgs(Guid ProjectId, bool IsRemoved);
    [CompilerGeneratedAttribute]
protected BeforeCloseProjectArgs(BeforeCloseProjectArgs original);
    [CompilerGeneratedAttribute]
protected virtual Type get_EqualityContract();
    [CompilerGeneratedAttribute]
public Guid get_ProjectId();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_ProjectId(Guid value);
    [CompilerGeneratedAttribute]
public bool get_IsRemoved();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_IsRemoved(bool value);
    [CompilerGeneratedAttribute]
public virtual string ToString();
    [CompilerGeneratedAttribute]
protected virtual bool PrintMembers(StringBuilder builder);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static bool op_Inequality(BeforeCloseProjectArgs left, BeforeCloseProjectArgs right);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static bool op_Equality(BeforeCloseProjectArgs left, BeforeCloseProjectArgs right);
    [CompilerGeneratedAttribute]
public virtual int GetHashCode();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual bool Equals(object obj);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual bool Equals(BeforeCloseProjectArgs other);
    [CompilerGeneratedAttribute]
public virtual BeforeCloseProjectArgs <Clone>$();
    [CompilerGeneratedAttribute]
public void Deconstruct(Guid& ProjectId, Boolean& IsRemoved);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[EditorBrowsableAttribute("1")]
public class Microsoft.Internal.VisualStudio.Shell.ProjectSystem.BeforeCloseSolutionArgs : object {
    [CompilerGeneratedAttribute]
protected Type EqualityContract { get; }
    [CompilerGeneratedAttribute]
protected BeforeCloseSolutionArgs(BeforeCloseSolutionArgs original);
    [CompilerGeneratedAttribute]
protected virtual Type get_EqualityContract();
    [CompilerGeneratedAttribute]
public virtual string ToString();
    [CompilerGeneratedAttribute]
protected virtual bool PrintMembers(StringBuilder builder);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static bool op_Inequality(BeforeCloseSolutionArgs left, BeforeCloseSolutionArgs right);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static bool op_Equality(BeforeCloseSolutionArgs left, BeforeCloseSolutionArgs right);
    [CompilerGeneratedAttribute]
public virtual int GetHashCode();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual bool Equals(object obj);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual bool Equals(BeforeCloseSolutionArgs other);
    [CompilerGeneratedAttribute]
public virtual BeforeCloseSolutionArgs <Clone>$();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[EditorBrowsableAttribute("1")]
public class Microsoft.Internal.VisualStudio.Shell.ProjectSystem.BeforeOpenSolutionArgs : object {
    [CompilerGeneratedAttribute]
private string <SolutionFilename>k__BackingField;
    [CompilerGeneratedAttribute]
protected Type EqualityContract { get; }
    public string SolutionFilename { get; public set; }
    public BeforeOpenSolutionArgs(string SolutionFilename);
    [CompilerGeneratedAttribute]
protected BeforeOpenSolutionArgs(BeforeOpenSolutionArgs original);
    [CompilerGeneratedAttribute]
protected virtual Type get_EqualityContract();
    [CompilerGeneratedAttribute]
public string get_SolutionFilename();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_SolutionFilename(string value);
    [CompilerGeneratedAttribute]
public virtual string ToString();
    [CompilerGeneratedAttribute]
protected virtual bool PrintMembers(StringBuilder builder);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static bool op_Inequality(BeforeOpenSolutionArgs left, BeforeOpenSolutionArgs right);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static bool op_Equality(BeforeOpenSolutionArgs left, BeforeOpenSolutionArgs right);
    [CompilerGeneratedAttribute]
public virtual int GetHashCode();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual bool Equals(object obj);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual bool Equals(BeforeOpenSolutionArgs other);
    [CompilerGeneratedAttribute]
public virtual BeforeOpenSolutionArgs <Clone>$();
    [CompilerGeneratedAttribute]
public void Deconstruct(String& SolutionFilename);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[EditorBrowsableAttribute("1")]
public class Microsoft.Internal.VisualStudio.Shell.ProjectSystem.BeforeUnloadProjectArgs : object {
    [CompilerGeneratedAttribute]
private Guid <ProjectId>k__BackingField;
    [CompilerGeneratedAttribute]
protected Type EqualityContract { get; }
    public Guid ProjectId { get; public set; }
    public BeforeUnloadProjectArgs(Guid ProjectId);
    [CompilerGeneratedAttribute]
protected BeforeUnloadProjectArgs(BeforeUnloadProjectArgs original);
    [CompilerGeneratedAttribute]
protected virtual Type get_EqualityContract();
    [CompilerGeneratedAttribute]
public Guid get_ProjectId();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_ProjectId(Guid value);
    [CompilerGeneratedAttribute]
public virtual string ToString();
    [CompilerGeneratedAttribute]
protected virtual bool PrintMembers(StringBuilder builder);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static bool op_Inequality(BeforeUnloadProjectArgs left, BeforeUnloadProjectArgs right);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static bool op_Equality(BeforeUnloadProjectArgs left, BeforeUnloadProjectArgs right);
    [CompilerGeneratedAttribute]
public virtual int GetHashCode();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual bool Equals(object obj);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual bool Equals(BeforeUnloadProjectArgs other);
    [CompilerGeneratedAttribute]
public virtual BeforeUnloadProjectArgs <Clone>$();
    [CompilerGeneratedAttribute]
public void Deconstruct(Guid& ProjectId);
}
[NullableContextAttribute("1")]
[EditorBrowsableAttribute("1")]
public interface Microsoft.Internal.VisualStudio.Shell.ProjectSystem.IVsAsyncEventListener {
    public abstract virtual void OnUnhandledException(Exception exception);
}
[NullableContextAttribute("1")]
[EditorBrowsableAttribute("1")]
public interface Microsoft.Internal.VisualStudio.Shell.ProjectSystem.IVsAsyncProject {
    public Guid Id { get; }
    public abstract virtual Guid get_Id();
    public abstract virtual ValueTask`1<T> GetInterfaceAsync(CancellationToken cancellationToken);
}
[NullableContextAttribute("1")]
[EditorBrowsableAttribute("1")]
public interface Microsoft.Internal.VisualStudio.Shell.ProjectSystem.IVsAsyncProjectEventListener {
    public abstract virtual ValueTask OnAfterOpenProjectAsync(AfterOpenProjectArgs args, CancellationToken cancellationToken);
    public abstract virtual ValueTask OnBeforeCloseProjectAsync(BeforeCloseProjectArgs args, CancellationToken cancellationToken);
    public abstract virtual ValueTask OnAfterLoadProjectAsync(AfterLoadProjectArgs args, CancellationToken cancellationToken);
    public abstract virtual ValueTask OnBeforeUnloadProjectAsync(BeforeUnloadProjectArgs args, CancellationToken cancellationToken);
    public abstract virtual ValueTask OnAfterRenameProjectAsync(AfterRenameProjectArgs args, CancellationToken cancellationToken);
}
[NullableContextAttribute("1")]
[EditorBrowsableAttribute("1")]
public interface Microsoft.Internal.VisualStudio.Shell.ProjectSystem.IVsAsyncProjectFactory {
    public abstract virtual Task`1<IVsAsyncProject> OpenProjectAsync(string fileName, Guid projectId, CancellationToken cancellationToken);
}
[NullableContextAttribute("1")]
[EditorBrowsableAttribute("1")]
public interface Microsoft.Internal.VisualStudio.Shell.ProjectSystem.IVsAsyncSolutionEventListener {
    public abstract virtual ValueTask OnBeforeOpenSolutionAsync(BeforeOpenSolutionArgs args, CancellationToken cancellationToken);
    public abstract virtual ValueTask OnAfterOpenSolutionAsync(AfterOpenSolutionArgs args, CancellationToken cancellationToken);
    public abstract virtual ValueTask OnBeforeCloseSolutionAsync(BeforeCloseSolutionArgs args, CancellationToken cancellationToken);
    public abstract virtual ValueTask OnAfterCloseSolutionAsync(AfterCloseSolutionArgs args, CancellationToken cancellationToken);
    public abstract virtual ValueTask OnAfterRenameSolutionAsync(AfterRenameSolutionArgs args, CancellationToken cancellationToken);
}
[NullableContextAttribute("1")]
[EditorBrowsableAttribute("1")]
public interface Microsoft.Internal.VisualStudio.Shell.ProjectSystem.IVsAsyncSolutionService {
    public abstract virtual Task OpenSolutionAsync(string path, CancellationToken cancellationToken);
}
public class Microsoft.Internal.VisualStudio.Shell.UIContextImpl : object {
    public static UIContextImpl Instance;
    private static UIContext DummyContext;
    private Lazy`1<IVsUIContextManager> uiContextManager;
    private Dictionary`2<Guid, UIContext> registeredContexts;
    private static UIContextImpl();
    public UIContext Register(Guid contextGuid, bool isKnown);
    internal void SetContext(UIContext context);
    internal static void Reset();
    internal static void Reset(IVsUIContextManager uiContextManager);
    private void CreateLazyServiceHolders(IVsUIContextManager uiContextManager);
}
public class Microsoft.Internal.VisualStudio.Shell.VsTaskAwaiter : object {
    private IVsTask taskToWaitOn;
    private VsTaskRunContext contextToUse;
    public bool IsCompleted { get; }
    public VsTaskAwaiter(IVsTask task);
    public VsTaskAwaiter(IVsTask task, VsTaskRunContext context);
    public bool get_IsCompleted();
    public sealed virtual void OnCompleted(Action continuation);
    public object GetResult();
}
public class Microsoft.Internal.VisualStudio.Shell.YieldAwaiter : ValueType {
    private IVsTaskCompletionSource ownerTaskCompletionSource;
    private VsTaskRunContext contextToUse;
    private IVsTaskSchedulerService taskScheduler;
    public bool IsCompleted { get; }
    public YieldAwaiter(IVsTaskSchedulerService scheduler, IVsTaskCompletionSource taskCompletionSource, VsTaskRunContext context);
    public bool get_IsCompleted();
    public sealed virtual void OnCompleted(Action continuation);
    public object GetResult();
    public YieldAwaiter GetAwaiter();
}
public class Microsoft.VisualStudio.ErrorHandler : object {
    private static HashSet`1<Type> criticalExceptions;
    private static ErrorHandler();
    public static bool Succeeded(int hr);
    public static bool Failed(int hr);
    public static int ThrowOnFailure(int hr);
    public static int ThrowOnFailure(int hr, Int32[] expectedHRFailure);
    public static bool IsRejectedRpcCall(int hr);
    public static bool IsCriticalException(Exception ex);
    public static bool ContainsCriticalException(AggregateException ex);
    public static int CallWithCOMConvention(Func`1<int> method, bool reportError);
    internal static int CallWithCOMConvention(Func`1<int> method, bool reportError, bool setShellErrorInfo);
    public static int CallWithCOMConvention(Action method, bool reportError);
    public static int ExceptionToHResult(Exception ex, bool reportError);
    internal static int ExceptionToHResult(Exception ex, bool reportError, bool setShellErrorInfo);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("9BDA66AE-CA28-4e22-AA27-8A7218A0E3FA")]
public interface Microsoft.VisualStudio.IEventHandler {
    public abstract virtual int AddHandler(string bstrEventName);
    public abstract virtual int RemoveHandler(string bstrEventName);
    public abstract virtual IVsEnumBSTR GetHandledEvents();
    public abstract virtual bool HandlesEvent(string bstrEventName);
}
public class Microsoft.VisualStudio.OperationProgress.CommonOperationProgressStageIds : object {
    public static string Intellisense;
    public static string Extensions;
    public static string UpdatingProjects;
}
public interface Microsoft.VisualStudio.OperationProgress.IOperationProgressStageAccess {
    public UInt32 EstimatedTaskCount { get; public set; }
    public abstract virtual void RegisterTask(OperationProgressTask operationProgressTask);
    public abstract virtual UInt32 get_EstimatedTaskCount();
    public abstract virtual void set_EstimatedTaskCount(UInt32 value);
}
public interface Microsoft.VisualStudio.OperationProgress.IVsOperationProgress {
    [ObsoleteAttribute("Use IVsOperationProgress2.RegisterStageOperationTasksAsync to avoid potential deadlocks when using the old API.")]
public abstract virtual IOperationProgressStageAccess AccessStage(string operationProgressStageId, string name, UInt32 estimatedTaskCount);
    public abstract virtual void RegisterStageId(string operationProgressStageId, OperationProgressStageOptions operationProgressStageOptions);
}
public interface Microsoft.VisualStudio.OperationProgress.IVsOperationProgress2 {
    public abstract virtual Task RegisterStageOperationTasksAsync(string operationProgressStageId, string name, UInt32 estimatedTaskCount, Func`2<IOperationProgressStageAccess, Task> taskRegistrationActionAsync);
}
[NullableContextAttribute("1")]
public interface Microsoft.VisualStudio.OperationProgress.IVsOperationProgressProjectStageStatus {
    public ProjectStageStatus Status { get; }
    public abstract virtual ProjectStageStatus get_Status();
    [CompilerGeneratedAttribute]
public abstract virtual void add_InProgressChanged(EventHandler`1<ProjectStatusChangedEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_InProgressChanged(EventHandler`1<ProjectStatusChangedEventArgs> value);
    public abstract virtual Task`1<long> WaitForCompletionAsync();
}
public interface Microsoft.VisualStudio.OperationProgress.IVsOperationProgressStageStatus {
    public OperationProgressStageStatus Status { get; }
    public abstract virtual OperationProgressStageStatus get_Status();
    [CompilerGeneratedAttribute]
public abstract virtual void add_InProgressChanged(EventHandler`1<OperationProgressStatusChangedEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_InProgressChanged(EventHandler`1<OperationProgressStatusChangedEventArgs> value);
    public abstract virtual Task`1<long> WaitForCompletionAsync();
}
public interface Microsoft.VisualStudio.OperationProgress.IVsOperationProgressStageStatusForSolutionLoad {
    public bool IsInProgress { get; }
    public abstract virtual bool get_IsInProgress();
    public abstract virtual Task WaitForCompletionAsync();
}
public interface Microsoft.VisualStudio.OperationProgress.IVsOperationProgressStatusService {
    public abstract virtual IVsOperationProgressStageStatus GetStageStatus(string operationProgressStageId);
    [EditorBrowsableAttribute("2")]
public abstract virtual IVsOperationProgressStageStatusForSolutionLoad GetStageStatusForSolutionLoad(string operationProgressStageId);
}
public interface Microsoft.VisualStudio.OperationProgress.IVsOperationProgressStatusService2 {
    public abstract virtual IVsOperationProgressProjectStageStatus GetProjectStageStatus(Guid projectId, string operationProgressStageId, bool includeDependencies);
}
public class Microsoft.VisualStudio.OperationProgress.OperationProgressStageOptions : object {
    [CompilerGeneratedAttribute]
private string <DisplayName>k__BackingField;
    public string DisplayName { get; private set; }
    public OperationProgressStageOptions(string displayName);
    [CompilerGeneratedAttribute]
public string get_DisplayName();
    [CompilerGeneratedAttribute]
private void set_DisplayName(string value);
}
public class Microsoft.VisualStudio.OperationProgress.OperationProgressStageStatus : ValueType {
    [CompilerGeneratedAttribute]
private bool <IsInProgress>k__BackingField;
    [CompilerGeneratedAttribute]
private long <Version>k__BackingField;
    public bool IsInProgress { get; public set; }
    public long Version { get; public set; }
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public bool get_IsInProgress();
    [CompilerGeneratedAttribute]
public void set_IsInProgress(bool value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public long get_Version();
    [CompilerGeneratedAttribute]
public void set_Version(long value);
}
public class Microsoft.VisualStudio.OperationProgress.OperationProgressStatusChangedEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
private OperationProgressStageStatus <Status>k__BackingField;
    public OperationProgressStageStatus Status { get; }
    public OperationProgressStatusChangedEventArgs(OperationProgressStageStatus status);
    [CompilerGeneratedAttribute]
public OperationProgressStageStatus get_Status();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.VisualStudio.OperationProgress.OperationProgressTask : object {
    [NullableAttribute("2")]
private Task task;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private JoinableTask <JoinableTask>k__BackingField;
    [CompilerGeneratedAttribute]
private Func`1<Task`1<string>> <DisplayName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<Guid> <ProjectId>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsRegistrationTask>k__BackingField;
    [NullableAttribute("2")]
public Task Task { get; }
    [NullableAttribute("2")]
public JoinableTask JoinableTask { get; }
    public Func`1<Task`1<string>> DisplayName { get; private set; }
    public string Name { get; private set; }
    public Nullable`1<Guid> ProjectId { get; public set; }
    internal bool IsRegistrationTask { get; internal set; }
    public OperationProgressTask(JoinableTask joinableTask, string name, Func`1<Task`1<string>> displayName);
    public OperationProgressTask(JoinableTask joinableTask, string name, Func`1<Task`1<string>> displayName, Nullable`1<Guid> projectId);
    [EditorBrowsableAttribute("1")]
[ObsoleteAttribute("Use OperationProgressTask.OperationProgressTask(JoinableTask, string, Func{Task{string}}) to avoid potential deadlocks when using the old API.")]
public OperationProgressTask(Task task, string name, Func`1<Task`1<string>> displayName);
    [NullableContextAttribute("2")]
public Task get_Task();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public JoinableTask get_JoinableTask();
    [CompilerGeneratedAttribute]
public Func`1<Task`1<string>> get_DisplayName();
    [CompilerGeneratedAttribute]
private void set_DisplayName(Func`1<Task`1<string>> value);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
private void set_Name(string value);
    [CompilerGeneratedAttribute]
public Nullable`1<Guid> get_ProjectId();
    [CompilerGeneratedAttribute]
public void set_ProjectId(Nullable`1<Guid> value);
    [CompilerGeneratedAttribute]
internal bool get_IsRegistrationTask();
    [CompilerGeneratedAttribute]
internal void set_IsRegistrationTask(bool value);
}
public class Microsoft.VisualStudio.OperationProgress.ProjectStageStatus : object {
    [CompilerGeneratedAttribute]
private bool <IsInProgress>k__BackingField;
    [CompilerGeneratedAttribute]
private long <Version>k__BackingField;
    public bool IsInProgress { get; }
    public long Version { get; }
    public ProjectStageStatus(bool isInProgress, long version);
    [CompilerGeneratedAttribute]
public bool get_IsInProgress();
    [CompilerGeneratedAttribute]
public long get_Version();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.VisualStudio.OperationProgress.ProjectStatusChangedEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
private ProjectStageStatus <Status>k__BackingField;
    public ProjectStageStatus Status { get; }
    public ProjectStatusChangedEventArgs(ProjectStageStatus status);
    [CompilerGeneratedAttribute]
public ProjectStageStatus get_Status();
}
[GuidAttribute("780DF070-FADB-4440-865B-13E606093D8C")]
public interface Microsoft.VisualStudio.OperationProgress.SVsOperationProgress {
}
[GuidAttribute("A2BC2D08-3484-499C-93FD-CC86EDE626B8")]
public interface Microsoft.VisualStudio.OperationProgress.SVsOperationProgressStatusService {
}
public interface Microsoft.VisualStudio.Services.IVsCodeContainerProviderService {
    public abstract virtual bool IsCodeContainerProviderInstalled(Guid provider);
    public abstract virtual Task`1<bool> AcquireAndTryOpenCodeContainerAsync(Guid provider, RemoteCodeContainer onlineCodeContainer);
}
public interface Microsoft.VisualStudio.Services.RemoteSettings.IVsRemoteSettingsProvider {
    public abstract virtual T GetValue(string collectionPath, string key, T defaultValue);
    public abstract virtual Task`1<T> GetValueAsync(string collectionPath, string key, T defaultValue);
    public abstract virtual Task`1<IEnumerable`1<ActionWrapper`1<T>>> GetActionsAsync(string actionPath);
}
public interface Microsoft.VisualStudio.Services.RemoteSettings.IVsRemoteSettingsProvider2 {
    public abstract virtual void SubscribeActions(string actionPath, Action`1<ActionWrapper`1<T>> callback);
    public abstract virtual void UnsubscribeActions(string actionPath);
}
[GuidAttribute("CF6E3973-C064-4FB5-8E24-E084244BDA03")]
public interface Microsoft.VisualStudio.Services.RemoteSettings.SVsRemoteSettingsProvider {
}
[GuidAttribute("92B31380-D928-4BEC-87AE-242829A57570")]
public interface Microsoft.VisualStudio.Services.SVsCodeContainerProviderService {
}
public class Microsoft.VisualStudio.Shell.AccountPickerOptions : object {
    [CompilerGeneratedAttribute]
private IntPtr <ParentWindowHandle>k__BackingField;
    [CompilerGeneratedAttribute]
private Window <ParentWindow>k__BackingField;
    [CompilerGeneratedAttribute]
private Func`2<object, bool> <CustomFilter>k__BackingField;
    [CompilerGeneratedAttribute]
private string <HostId>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsCompactHeight>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsAuthenticationStateUIEnabled>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <UseWindowsPresentationFoundationStyle>k__BackingField;
    public IntPtr ParentWindowHandle { get; private set; }
    public Window ParentWindow { get; private set; }
    public Func`2<object, bool> CustomFilter { get; public set; }
    public string HostId { get; private set; }
    public bool IsCompactHeight { get; public set; }
    public bool IsAuthenticationStateUIEnabled { get; public set; }
    public bool UseWindowsPresentationFoundationStyle { get; public set; }
    public AccountPickerOptions(Window parentWindow, string hostId);
    public AccountPickerOptions(IntPtr parentWindow, string hostId);
    [CompilerGeneratedAttribute]
public IntPtr get_ParentWindowHandle();
    [CompilerGeneratedAttribute]
private void set_ParentWindowHandle(IntPtr value);
    [CompilerGeneratedAttribute]
public Window get_ParentWindow();
    [CompilerGeneratedAttribute]
private void set_ParentWindow(Window value);
    [CompilerGeneratedAttribute]
public Func`2<object, bool> get_CustomFilter();
    [CompilerGeneratedAttribute]
public void set_CustomFilter(Func`2<object, bool> value);
    [CompilerGeneratedAttribute]
public string get_HostId();
    [CompilerGeneratedAttribute]
private void set_HostId(string value);
    [CompilerGeneratedAttribute]
public bool get_IsCompactHeight();
    [CompilerGeneratedAttribute]
public void set_IsCompactHeight(bool value);
    [CompilerGeneratedAttribute]
public bool get_IsAuthenticationStateUIEnabled();
    [CompilerGeneratedAttribute]
public void set_IsAuthenticationStateUIEnabled(bool value);
    [CompilerGeneratedAttribute]
public bool get_UseWindowsPresentationFoundationStyle();
    [CompilerGeneratedAttribute]
public void set_UseWindowsPresentationFoundationStyle(bool value);
}
public class Microsoft.VisualStudio.Shell.AccountPickerOptions2 : AccountPickerOptions {
    [CompilerGeneratedAttribute]
private Func`3<Guid, object, bool> <AddProviderFilter>k__BackingField;
    public Func`3<Guid, object, bool> AddProviderFilter { get; public set; }
    public AccountPickerOptions2(Window parentWindow, string hostId);
    public AccountPickerOptions2(IntPtr parentWindow, string hostId);
    [CompilerGeneratedAttribute]
public Func`3<Guid, object, bool> get_AddProviderFilter();
    [CompilerGeneratedAttribute]
public void set_AddProviderFilter(Func`3<Guid, object, bool> value);
}
public static class Microsoft.VisualStudio.Shell.ActivityLog : object {
    private static IVsActivityLog logService;
    public static string LogFilePath { get; }
    private static IVsActivityLog Log { get; }
    private static IVsShell Shell { get; }
    public static string get_LogFilePath();
    public static void LogError(string source, string message);
    public static void LogWarning(string source, string message);
    public static void LogInformation(string source, string message);
    private static int LogEntry(__ACTIVITYLOG_ENTRYTYPE type, string source, string message);
    public static bool TryLogError(string source, string message);
    public static bool TryLogWarning(string source, string message);
    public static bool TryLogInformation(string source, string message);
    private static IVsActivityLog get_Log();
    private static IVsShell get_Shell();
}
public class Microsoft.VisualStudio.Shell.AsyncServiceCreatorCallback : MulticastDelegate {
    public AsyncServiceCreatorCallback(object object, IntPtr method);
    [NullableContextAttribute("1")]
public virtual Task`1<object> Invoke(IAsyncServiceContainer container, CancellationToken cancellationToken, Type serviceType);
    public virtual IAsyncResult BeginInvoke(IAsyncServiceContainer container, CancellationToken cancellationToken, Type serviceType, AsyncCallback callback, object object);
    public virtual Task`1<object> EndInvoke(IAsyncResult result);
}
public class Microsoft.VisualStudio.Shell.AsyncServiceCreatorWithProgressCallback : MulticastDelegate {
    public AsyncServiceCreatorWithProgressCallback(object object, IntPtr method);
    [NullableContextAttribute("1")]
public virtual Task`1<object> Invoke(IAsyncServiceContainer container, CancellationToken cancellationToken, Type serviceType, IProgress`1<ServiceProgressData> progress);
    public virtual IAsyncResult BeginInvoke(IAsyncServiceContainer container, CancellationToken cancellationToken, Type serviceType, IProgress`1<ServiceProgressData> progress, AsyncCallback callback, object object);
    public virtual Task`1<object> EndInvoke(IAsyncResult result);
}
[ComVisibleAttribute("True")]
public class Microsoft.VisualStudio.Shell.AsyncServiceProvider : object {
    private static IAsyncServiceProvider globalProvider;
    private bool defaultServices;
    private bool disposed;
    private IAsyncServiceProvider serviceProvider;
    public static IAsyncServiceProvider GlobalProvider { get; }
    public AsyncServiceProvider(IAsyncServiceProvider serviceProvider);
    public AsyncServiceProvider(IAsyncServiceProvider serviceProvider, bool defaultServices);
    public static AsyncServiceProvider CreateFromSetSite(IAsyncServiceProvider asyncServiceProvider);
    public sealed virtual Task`1<object> GetServiceAsync(Type serviceType);
    public sealed virtual Task`1<object> GetServiceAsync(Type serviceType, bool swallowExceptions);
    public sealed virtual void Dispose();
    private sealed virtual override void Microsoft.VisualStudio.OLE.Interop.IObjectWithSite.GetSite(Guid& riid, IntPtr& ppvSite);
    private sealed virtual override void Microsoft.VisualStudio.OLE.Interop.IObjectWithSite.SetSite(object pUnkSite);
    public Task`1<object> QueryServiceAsync(Guid serviceId);
    public Task`1<object> QueryServiceAsync(Type serviceType);
    public static IAsyncServiceProvider get_GlobalProvider();
    private static bool IsNullOrUnsited(AsyncServiceProvider asyncServiceProvider);
    private Task`1<object> QueryServiceAsync(Guid serviceId, Type serviceType, bool swallowExceptions);
}
public enum Microsoft.VisualStudio.Shell.AuthenticationState : Enum {
    public int value__;
    public static AuthenticationState Unknown;
    public static AuthenticationState Unauthenticated;
    public static AuthenticationState Authenticated;
}
public class Microsoft.VisualStudio.Shell.BlockingTaskEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
private IVsTask <BlockedTask>k__BackingField;
    [CompilerGeneratedAttribute]
private IVsTask <BlockingTask>k__BackingField;
    public IVsTask BlockedTask { get; private set; }
    public IVsTask BlockingTask { get; private set; }
    public BlockingTaskEventArgs(IVsTask blockingTask, IVsTask blockedTask);
    [CompilerGeneratedAttribute]
public IVsTask get_BlockedTask();
    [CompilerGeneratedAttribute]
private void set_BlockedTask(IVsTask value);
    [CompilerGeneratedAttribute]
public IVsTask get_BlockingTask();
    [CompilerGeneratedAttribute]
private void set_BlockingTask(IVsTask value);
}
[FlagsAttribute]
public enum Microsoft.VisualStudio.Shell.BuildLogging.BuildLoggerEvents : Enum {
    public int value__;
    public static BuildLoggerEvents None;
    public static BuildLoggerEvents BuildStartedEvent;
    public static BuildLoggerEvents BuildFinishedEvent;
    public static BuildLoggerEvents ProjectStartedEvent;
    public static BuildLoggerEvents ProjectFinishedEvent;
    public static BuildLoggerEvents ProjectEvaluationStartedEvent;
    public static BuildLoggerEvents ProjectEvaluationFinishedEvent;
    public static BuildLoggerEvents TargetStartedEvent;
    public static BuildLoggerEvents TargetFinishedEvent;
    public static BuildLoggerEvents TaskStartedEvent;
    public static BuildLoggerEvents TaskFinishedEvent;
    public static BuildLoggerEvents ErrorEvent;
    public static BuildLoggerEvents WarningEvent;
    public static BuildLoggerEvents HighMessageEvent;
    public static BuildLoggerEvents NormalMessageEvent;
    public static BuildLoggerEvents LowMessageEvent;
    public static BuildLoggerEvents CustomEvent;
    public static BuildLoggerEvents CommandLine;
    public static BuildLoggerEvents PerformanceSummary;
    public static BuildLoggerEvents NoSummary;
    public static BuildLoggerEvents ShowCommandLine;
    public static BuildLoggerEvents IncludeEvaluationProfile;
    public static BuildLoggerEvents IncludeTaskInputs;
}
public interface Microsoft.VisualStudio.Shell.BuildLogging.IVsBuildLoggerProvider {
    public LoggerVerbosity Verbosity { get; }
    public BuildLoggerEvents Events { get; }
    public abstract virtual LoggerVerbosity get_Verbosity();
    public abstract virtual BuildLoggerEvents get_Events();
    public abstract virtual ILogger GetLogger(string projectPath, IEnumerable`1<string> targets, IDictionary`2<string, string> properties, bool isDesignTimeBuild);
}
public class Microsoft.VisualStudio.Shell.CircularTaskDependencyException : Exception {
    public static int VS_E_CIRCULARTASKDEPENDENCY;
    public CircularTaskDependencyException(string message);
    [ObsoleteAttribute]
protected CircularTaskDependencyException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.VisualStudio.Shell.CodeContainer : object {
    [CompilerGeneratedAttribute]
private string <LocalPath>k__BackingField;
    [CompilerGeneratedAttribute]
private Guid <Provider>k__BackingField;
    public string LocalPath { get; public set; }
    public Guid Provider { get; public set; }
    [CompilerGeneratedAttribute]
public string get_LocalPath();
    [CompilerGeneratedAttribute]
public void set_LocalPath(string value);
    [CompilerGeneratedAttribute]
public Guid get_Provider();
    [CompilerGeneratedAttribute]
public void set_Provider(Guid value);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class Microsoft.VisualStudio.Shell.CodeContainerManagement.CodeContainer : object {
    [CompilerGeneratedAttribute]
private CodeContainerLocalProperties <LocalProperties>k__BackingField;
    [CompilerGeneratedAttribute]
private RemoteCodeContainer <Remote>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsFavorite>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTimeOffset <LastAccessed>k__BackingField;
    public CodeContainerLocalProperties LocalProperties { get; }
    public RemoteCodeContainer Remote { get; }
    public bool IsFavorite { get; }
    public DateTimeOffset LastAccessed { get; }
    public bool IsLocal { get; }
    public bool HasRemote { get; }
    public bool IsSourceControlled { get; }
    public CodeContainer(CodeContainerLocalProperties localProperties, RemoteCodeContainer remote, bool isFavorite, DateTimeOffset lastAccessed);
    [CompilerGeneratedAttribute]
public CodeContainerLocalProperties get_LocalProperties();
    [CompilerGeneratedAttribute]
public RemoteCodeContainer get_Remote();
    [CompilerGeneratedAttribute]
public bool get_IsFavorite();
    [CompilerGeneratedAttribute]
public DateTimeOffset get_LastAccessed();
    public bool get_IsLocal();
    public bool get_HasRemote();
    public bool get_IsSourceControlled();
    public CodeContainerStatus GetStatus();
    [NullableContextAttribute("1")]
public CodeContainer WithLocalProperties(CodeContainerLocalProperties localProperties);
    [NullableContextAttribute("1")]
public CodeContainer WithRemote(RemoteCodeContainer remote);
    [NullableContextAttribute("1")]
public CodeContainer WithIsFavorite(bool isFavorite);
    [NullableContextAttribute("1")]
public CodeContainer WithLastAccessed(DateTimeOffset lastAccessed);
    public sealed virtual int CompareTo(CodeContainer other);
}
public class Microsoft.VisualStudio.Shell.CodeContainerManagement.CodeContainerEqualityComparer : EqualityComparer`1<CodeContainer> {
    [CompilerGeneratedAttribute]
private static CodeContainerEqualityComparer <Instance>k__BackingField;
    public static CodeContainerEqualityComparer Instance { get; }
    private static CodeContainerEqualityComparer();
    [CompilerGeneratedAttribute]
public static CodeContainerEqualityComparer get_Instance();
    public virtual bool Equals(CodeContainer x, CodeContainer y);
    public virtual int GetHashCode(CodeContainer obj);
}
public class Microsoft.VisualStudio.Shell.CodeContainerManagement.CodeContainerLocalProperties : object {
    [CompilerGeneratedAttribute]
private string <FullPath>k__BackingField;
    [CompilerGeneratedAttribute]
private CodeContainerType <Type>k__BackingField;
    [CompilerGeneratedAttribute]
private CodeContainerSourceControlProperties <SourceControl>k__BackingField;
    public string FullPath { get; }
    public CodeContainerType Type { get; }
    public CodeContainerSourceControlProperties SourceControl { get; }
    public CodeContainerLocalProperties(string fullPath, CodeContainerType type, CodeContainerSourceControlProperties sourceControlProperties);
    [CompilerGeneratedAttribute]
public string get_FullPath();
    [CompilerGeneratedAttribute]
public CodeContainerType get_Type();
    [CompilerGeneratedAttribute]
public CodeContainerSourceControlProperties get_SourceControl();
    public CodeContainerLocalProperties WithFullPath(string fullPath);
    public CodeContainerLocalProperties WithType(CodeContainerType type);
    public CodeContainerLocalProperties WithSourceControl(CodeContainerSourceControlProperties sourceControlProperties);
}
public class Microsoft.VisualStudio.Shell.CodeContainerManagement.CodeContainerLocalPropertiesEqualityComparer : EqualityComparer`1<CodeContainerLocalProperties> {
    [CompilerGeneratedAttribute]
private static CodeContainerLocalPropertiesEqualityComparer <Instance>k__BackingField;
    public static CodeContainerLocalPropertiesEqualityComparer Instance { get; }
    private static CodeContainerLocalPropertiesEqualityComparer();
    [CompilerGeneratedAttribute]
public static CodeContainerLocalPropertiesEqualityComparer get_Instance();
    public virtual bool Equals(CodeContainerLocalProperties x, CodeContainerLocalProperties y);
    public virtual int GetHashCode(CodeContainerLocalProperties obj);
}
public class Microsoft.VisualStudio.Shell.CodeContainerManagement.CodeContainerSourceControlProperties : object {
    [CompilerGeneratedAttribute]
private string <RepositoryRootFullPath>k__BackingField;
    [CompilerGeneratedAttribute]
private Guid <SccProvider>k__BackingField;
    [CompilerGeneratedAttribute]
private string <RepositoryName>k__BackingField;
    public string RepositoryRootFullPath { get; }
    public Guid SccProvider { get; }
    public string RepositoryName { get; }
    public CodeContainerSourceControlProperties(string repositoryName, string repositoryRootFullPath, Guid sccProvider);
    [CompilerGeneratedAttribute]
public string get_RepositoryRootFullPath();
    [CompilerGeneratedAttribute]
public Guid get_SccProvider();
    [CompilerGeneratedAttribute]
public string get_RepositoryName();
    public CodeContainerSourceControlProperties WithRepositoryName(string repositoryName);
    public CodeContainerSourceControlProperties WithRepositoryRootFullPath(string repositoryRootFullPath);
    public CodeContainerSourceControlProperties WithSccProvider(Guid sccProvider);
}
public class Microsoft.VisualStudio.Shell.CodeContainerManagement.CodeContainerSourceControlPropertiesEqualityComparer : EqualityComparer`1<CodeContainerSourceControlProperties> {
    [CompilerGeneratedAttribute]
private static CodeContainerSourceControlPropertiesEqualityComparer <Instance>k__BackingField;
    public static CodeContainerSourceControlPropertiesEqualityComparer Instance { get; }
    private static CodeContainerSourceControlPropertiesEqualityComparer();
    [CompilerGeneratedAttribute]
public static CodeContainerSourceControlPropertiesEqualityComparer get_Instance();
    public virtual bool Equals(CodeContainerSourceControlProperties x, CodeContainerSourceControlProperties y);
    public virtual int GetHashCode(CodeContainerSourceControlProperties obj);
}
[FlagsAttribute]
public enum Microsoft.VisualStudio.Shell.CodeContainerManagement.CodeContainerStatus : Enum {
    public int value__;
    public static CodeContainerStatus None;
    public static CodeContainerStatus IsLocal;
    public static CodeContainerStatus IsSourceControlled;
    public static CodeContainerStatus HasRemote;
    public static CodeContainerStatus IsFaulty;
}
public enum Microsoft.VisualStudio.Shell.CodeContainerManagement.CodeContainerType : Enum {
    public int value__;
    public static CodeContainerType Project;
    public static CodeContainerType Folder;
}
[GuidAttribute("F4AF82CC-F00D-4EB0-9FAD-C82FF1BFE56D")]
public interface Microsoft.VisualStudio.Shell.CodeContainerManagement.ICodeContainerProvider {
    public abstract virtual Task`1<CodeContainer> AcquireCodeContainerAsync(IProgress`1<ServiceProgressData> downloadProgress, CancellationToken cancellationToken);
    public abstract virtual Task`1<CodeContainer> AcquireCodeContainerAsync(RemoteCodeContainer onlineCodeContainer, IProgress`1<ServiceProgressData> downloadProgress, CancellationToken cancellationToken);
}
public interface Microsoft.VisualStudio.Shell.CodeContainerManagement.ICodeContainerStorageManager {
    public abstract virtual Task`1<CodeContainer> GetAsync(string fullPath, CancellationToken cancellationToken);
    public abstract virtual Task`1<int> AddOrUpdateAsync(CodeContainer codeContainer, CancellationToken cancellationToken);
    public abstract virtual Task`1<int> RemoveAsync(CodeContainer codeContainer, CancellationToken cancellationToken);
    public abstract virtual Task`1<int> ClearAsync(CancellationToken cancellationToken);
    public abstract virtual Task`1<IDisposable> SubscribeAsync(ITargetBlock`1<StatefulReadOnlyList`2<CodeContainer, Nullable`1<int>>> targetBlock, CancellationToken cancellationToken);
}
public interface Microsoft.VisualStudio.Shell.CodeContainerManagement.ICodeContainerStorageManagerFactory {
    [ObsoleteAttribute("Use ICodeContainerStorageManagerFactory2.CreateAsync instead.")]
public abstract virtual ICodeContainerStorageManager Create();
}
public interface Microsoft.VisualStudio.Shell.CodeContainerManagement.ICodeContainerStorageManagerFactory2 {
    public abstract virtual Task`1<ICodeContainerStorageManager> CreateAsync();
}
public class Microsoft.VisualStudio.Shell.CodeContainerManagement.RemoteCodeContainer : object {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private Guid <CodeContainerProvider>k__BackingField;
    [CompilerGeneratedAttribute]
private Uri <DisplayUrl>k__BackingField;
    [CompilerGeneratedAttribute]
private Uri <BrowseOnlineUrl>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTimeOffset <LastAccessed>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<KeyValuePair`2<string, string>> <ExtraProperties>k__BackingField;
    public string Name { get; }
    public Guid CodeContainerProvider { get; }
    public Uri DisplayUrl { get; }
    public Uri BrowseOnlineUrl { get; }
    public DateTimeOffset LastAccessed { get; }
    public IEnumerable`1<KeyValuePair`2<string, string>> ExtraProperties { get; }
    public RemoteCodeContainer(string name, Guid codeContainerProvider, Uri displayUrl, Uri browseOnlineUrl, DateTimeOffset lastAccessed, IEnumerable`1<KeyValuePair`2<string, string>> extraProperties);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public Guid get_CodeContainerProvider();
    [CompilerGeneratedAttribute]
public Uri get_DisplayUrl();
    [CompilerGeneratedAttribute]
public Uri get_BrowseOnlineUrl();
    [CompilerGeneratedAttribute]
public DateTimeOffset get_LastAccessed();
    [CompilerGeneratedAttribute]
public IEnumerable`1<KeyValuePair`2<string, string>> get_ExtraProperties();
    public RemoteCodeContainer WithName(string name);
    public RemoteCodeContainer WithCodeContainerProvider(Guid codeContainerProvider);
    public RemoteCodeContainer WithDisplayUrl(Uri displayUrl);
    public RemoteCodeContainer WithBrowseOnlineUrl(Uri browseOnlineUrl);
    public RemoteCodeContainer WithLastAccessed(DateTimeOffset lastAccessed);
    public RemoteCodeContainer WithExtraProperties(IEnumerable`1<KeyValuePair`2<string, string>> extraProperties);
    public sealed virtual int CompareTo(RemoteCodeContainer other);
}
public class Microsoft.VisualStudio.Shell.CodeContainerManagement.RemoteCodeContainerEqualityComparer : EqualityComparer`1<RemoteCodeContainer> {
    [CompilerGeneratedAttribute]
private static RemoteCodeContainerEqualityComparer <Instance>k__BackingField;
    [CompilerGeneratedAttribute]
private static RemoteCodeContainerEqualityComparer <IgnoreLastAccessedUtcInstance>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IncludeLastAccessedUtc>k__BackingField;
    public static RemoteCodeContainerEqualityComparer Instance { get; }
    public static RemoteCodeContainerEqualityComparer IgnoreLastAccessedUtcInstance { get; }
    private bool IncludeLastAccessedUtc { get; }
    private RemoteCodeContainerEqualityComparer(bool includeLastAccessedUtc);
    private static RemoteCodeContainerEqualityComparer();
    [CompilerGeneratedAttribute]
public static RemoteCodeContainerEqualityComparer get_Instance();
    [CompilerGeneratedAttribute]
public static RemoteCodeContainerEqualityComparer get_IgnoreLastAccessedUtcInstance();
    [CompilerGeneratedAttribute]
private bool get_IncludeLastAccessedUtc();
    public virtual bool Equals(RemoteCodeContainer x, RemoteCodeContainer y);
    public virtual int GetHashCode(RemoteCodeContainer obj);
}
public static class Microsoft.VisualStudio.Shell.CommandNavigationHelper : object {
    public static DependencyProperty CommandFocusModeProperty;
    [CompilerGeneratedAttribute]
private static PropertyChangedCallback CommandFocusModePropertyChanged;
    public static DependencyProperty IsCommandNavigableProperty;
    public static DependencyProperty CommandNavigationOrderProperty;
    private static WeakCollection`1<UIElement> navigableControls;
    [CompilerGeneratedAttribute]
private static bool <IsCommandNavigationOrderDirty>k__BackingField;
    private static bool IsCommandNavigationOrderDirty { get; private set; }
    private static CommandNavigationHelper();
    public static CommandFocusMode GetCommandFocusMode(DependencyObject element);
    public static void SetCommandFocusMode(DependencyObject element, CommandFocusMode value);
    [CompilerGeneratedAttribute]
public static void add_CommandFocusModePropertyChanged(PropertyChangedCallback value);
    [CompilerGeneratedAttribute]
public static void remove_CommandFocusModePropertyChanged(PropertyChangedCallback value);
    private static void OnCommandFocusModePropertyChanged(DependencyObject obj, DependencyPropertyChangedEventArgs e);
    public static bool GetIsCommandNavigable(DependencyObject element);
    public static void SetIsCommandNavigable(DependencyObject element, bool value);
    private static void OnIsCommandNavigablePropertyChanged(DependencyObject obj, DependencyPropertyChangedEventArgs e);
    public static int GetCommandNavigationOrder(DependencyObject element);
    public static void SetCommandNavigationOrder(DependencyObject element, int value);
    private static void OnCommandNavigationOrderPropertyChanged(DependencyObject obj, DependencyPropertyChangedEventArgs e);
    [CompilerGeneratedAttribute]
private static bool get_IsCommandNavigationOrderDirty();
    [CompilerGeneratedAttribute]
private static void set_IsCommandNavigationOrderDirty(bool value);
    private static void RegisterNavigableControl(UIElement control);
    private static void UnregisterNavigableControl(UIElement control);
    internal static IEnumerable`1<UIElement> GetSortedNavigableControls();
}
public enum Microsoft.VisualStudio.Shell.CommentTaskPriority : Enum {
    public int value__;
    public static CommentTaskPriority High;
    public static CommentTaskPriority Normal;
    public static CommentTaskPriority Low;
}
public interface Microsoft.VisualStudio.Shell.Connected.CredentialStorage.IVsCredential {
    public string TokenValue { get; }
    public abstract virtual string get_TokenValue();
    public abstract virtual bool RefreshTokenValue();
    public abstract virtual void SetTokenValue(string tokenValue);
    public abstract virtual string GetProperty(string name);
    public abstract virtual bool SetProperty(string name, string value);
}
public interface Microsoft.VisualStudio.Shell.Connected.CredentialStorage.IVsCredentialKey {
    public string FeatureName { get; }
    public string Resource { get; }
    public string UserName { get; }
    public string Type { get; }
    public abstract virtual string get_FeatureName();
    public abstract virtual string get_Resource();
    public abstract virtual string get_UserName();
    public abstract virtual string get_Type();
}
public interface Microsoft.VisualStudio.Shell.Connected.CredentialStorage.IVsCredentialStorageService {
    public abstract virtual IVsCredential Add(IVsCredentialKey credentialKey, string credentialValue);
    public abstract virtual IVsCredential Retrieve(IVsCredentialKey credentialKey);
    public abstract virtual IEnumerable`1<IVsCredential> RetrieveAll(string featureName);
    public abstract virtual bool Remove(IVsCredentialKey credentialKey);
    public abstract virtual IVsCredentialKey CreateCredentialKey(string featureName, string resource, string userName, string type);
}
[GuidAttribute("7D8217EC-77D2-4ffa-BD70-01BC18D6906A")]
public interface Microsoft.VisualStudio.Shell.Connected.CredentialStorage.SVsCredentialStorageService {
}
public class Microsoft.VisualStudio.Shell.Connected.CredentialStorage.VsCredentialStorageException : Exception {
    public VsCredentialStorageException(string message);
    public VsCredentialStorageException(string message, Exception e);
    [ObsoleteAttribute]
protected VsCredentialStorageException(SerializationInfo info, StreamingContext context);
}
[ExtensionAttribute]
public static class Microsoft.VisualStudio.Shell.ExceptionExtensions : object {
    [NullableContextAttribute("1")]
[ExtensionAttribute]
public static bool IsCancellationException(Exception ex);
}
public enum Microsoft.VisualStudio.Shell.FilterDescendantBehavior : Enum {
    public int value__;
    public static FilterDescendantBehavior ExcludeDescendantsByDefault;
    public static FilterDescendantBehavior IncludeDescendantsByDefault;
}
public interface Microsoft.VisualStudio.Shell.FindAllReferences.IFindAllReferencesService {
    public abstract virtual IFindAllReferencesWindow StartSearch(string label);
}
public interface Microsoft.VisualStudio.Shell.FindAllReferences.IFindAllReferencesWindow {
    public IWpfTableControl TableControl { get; }
    public ITableManager Manager { get; }
    public string Title { get; public set; }
    public abstract virtual IWpfTableControl get_TableControl();
    public abstract virtual ITableManager get_Manager();
    public abstract virtual string get_Title();
    public abstract virtual void set_Title(string value);
    public abstract virtual void AddCommandTarget(IOleCommandTarget target, IOleCommandTarget& next);
    public abstract virtual void SetProgress(double progress);
    public abstract virtual void SetProgress(int completed, int maximum);
    [CompilerGeneratedAttribute]
public abstract virtual void add_Closed(EventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_Closed(EventHandler value);
}
[GuidAttribute("F0B519C7-AA71-4C77-BDD0-349E65623BA1")]
public class Microsoft.VisualStudio.Shell.FindAllReferences.SVsFindAllReferences : object {
}
public class Microsoft.VisualStudio.Shell.FindResults.FindResult : ValueType {
    public string Code;
    public int Line;
    public int Column;
    public Span Match;
    public FindResult(string code, int line, int column, Span match);
}
public interface Microsoft.VisualStudio.Shell.FindResults.IFindResultsService {
    public abstract virtual IFindResultsWindow StartSearch(string label, string description);
    public abstract virtual IFindResultsWindow2 StartSearch(string label, string description, string identifier);
}
public interface Microsoft.VisualStudio.Shell.FindResults.IFindResultsSnapshotGenerator {
    public abstract virtual IWpfTableEntriesSnapshot CreateSnapshot(string path, string displayPath, ITextSnapshot snapshot, IReadOnlyList`1<FindResult> results);
}
public interface Microsoft.VisualStudio.Shell.FindResults.IFindResultsSnapshotGenerator2 {
    public abstract virtual IWpfTableEntriesSnapshot CreateSnapshot(string path, string displayPath, ITextSnapshot snapshot, IReadOnlyList`1<FindResult> results, string header, int resultIndex);
}
public interface Microsoft.VisualStudio.Shell.FindResults.IFindResultsWindow {
    public IWpfTableControl TableControl { get; }
    public ITableManager Manager { get; }
    public string Title { get; public set; }
    public string Description { get; public set; }
    public string Summary { get; public set; }
    public abstract virtual IWpfTableControl get_TableControl();
    public abstract virtual ITableManager get_Manager();
    public abstract virtual string get_Title();
    public abstract virtual void set_Title(string value);
    public abstract virtual string get_Description();
    public abstract virtual void set_Description(string value);
    public abstract virtual string get_Summary();
    public abstract virtual void set_Summary(string value);
    public abstract virtual void AddCommandTarget(IOleCommandTarget target, IOleCommandTarget& next);
    public abstract virtual void SetProgress(double progress);
    public abstract virtual void SetProgress(int completed, int maximum);
    [CompilerGeneratedAttribute]
public abstract virtual void add_Closed(EventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_Closed(EventHandler value);
}
public interface Microsoft.VisualStudio.Shell.FindResults.IFindResultsWindow2 {
    public bool IsClosed { get; }
    public abstract virtual bool get_IsClosed();
    public abstract virtual void Complete();
    public abstract virtual void AddSnapshot(IWpfTableEntriesSnapshot snapshot);
    public abstract virtual void AddResults(string path, string displayPath, ITextSnapshot snapshot, IReadOnlyList`1<FindResult> results);
}
public interface Microsoft.VisualStudio.Shell.FindResults.IFindResultsWindow3 {
    public IVsWindowFrame Frame { get; }
    public abstract virtual IVsWindowFrame get_Frame();
}
public interface Microsoft.VisualStudio.Shell.FindResults.IFindResultsWindow4 {
    public Action`1<bool> RepeatFindAction { get; public set; }
    public bool Locked { get; public set; }
    public abstract virtual Action`1<bool> get_RepeatFindAction();
    public abstract virtual void set_RepeatFindAction(Action`1<bool> value);
    public abstract virtual bool get_Locked();
    public abstract virtual void set_Locked(bool value);
}
[GuidAttribute("8C762D6C-A671-4436-9F0E-DBE925F4D0EA")]
public class Microsoft.VisualStudio.Shell.FindResults.SVsFindResults : object {
}
public class Microsoft.VisualStudio.Shell.FocusChangeForCrossThreadClientEventArgs : RoutedEventArgs {
    public static RoutedEvent FocusChangeForCrossThreadClientEvent;
    [CompilerGeneratedAttribute]
private IntPtr <HwndGainingFocus>k__BackingField;
    public IntPtr HwndGainingFocus { get; private set; }
    public FocusChangeForCrossThreadClientEventArgs(IntPtr hwndGainingFocus);
    public FocusChangeForCrossThreadClientEventArgs(IntPtr hwndGainingFocus, object source);
    private static FocusChangeForCrossThreadClientEventArgs();
    [CompilerGeneratedAttribute]
public IntPtr get_HwndGainingFocus();
    [CompilerGeneratedAttribute]
private void set_HwndGainingFocus(IntPtr value);
}
[GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "17.0.0.0")]
[DebuggerNonUserCodeAttribute]
[CompilerGeneratedAttribute]
internal class Microsoft.VisualStudio.Shell.Framework.Resources : object {
    private static ResourceManager resourceMan;
    private static CultureInfo resourceCulture;
    [EditorBrowsableAttribute("2")]
internal static ResourceManager ResourceManager { get; }
    [EditorBrowsableAttribute("2")]
internal static CultureInfo Culture { get; internal set; }
    internal static string Error_DateTimeKindMustBeUtc { get; }
    internal static string Error_UriMustBeAbsolute { get; }
    internal static string General_MissingService { get; }
    internal static string General_MissingServiceWithHR { get; }
    internal static string General_NoServiceInterface { get; }
    internal static string RunContextNotSafeForJoinableTasks { get; }
    internal static string ServiceProvider_OnlySetErrorInfoFromUIThread { get; }
    internal static string Services_InvokedOnWrongThread { get; }
    internal static string ThreadHelper_UIThreadDispatcherUnavailable { get; }
    internal static string UIContext_SetIsActiveNotAllowed { get; }
    internal static string UIContext_ZombiedInstance { get; }
    internal static string UIContext_AwaitDuringShutdown { get; }
    internal static ResourceManager get_ResourceManager();
    internal static CultureInfo get_Culture();
    internal static void set_Culture(CultureInfo value);
    internal static string get_Error_DateTimeKindMustBeUtc();
    internal static string get_Error_UriMustBeAbsolute();
    internal static string get_General_MissingService();
    internal static string get_General_MissingServiceWithHR();
    internal static string get_General_NoServiceInterface();
    internal static string get_RunContextNotSafeForJoinableTasks();
    internal static string get_ServiceProvider_OnlySetErrorInfoFromUIThread();
    internal static string get_Services_InvokedOnWrongThread();
    internal static string get_ThreadHelper_UIThreadDispatcherUnavailable();
    internal static string get_UIContext_SetIsActiveNotAllowed();
    internal static string get_UIContext_ZombiedInstance();
    internal static string get_UIContext_AwaitDuringShutdown();
}
internal class Microsoft.VisualStudio.Shell.Framework.VsManagedTaskBody : object {
    private VsTaskBodyCallback taskBody;
    public VsManagedTaskBody(VsTaskBodyCallback action);
    public sealed virtual void DoWork(IVsTask pTask, UInt32 dwCount, IVsTask[] pParentTasks, Object& pResult);
}
[ExtensionAttribute]
internal static class Microsoft.VisualStudio.Shell.Framework.VsTaskLibraryHelper : object {
    private static TimeSpan DefaultWaitDialogDelay;
    public static IVsTaskSchedulerService ServiceInstance { get; }
    private static VsTaskLibraryHelper();
    public static IVsTaskSchedulerService get_ServiceInstance();
    public static IVsTaskBody CreateTaskBody(VsTaskBodyCallback action);
    public static IVsTaskBody CreateTaskBody(Action`1<T> action);
    public static IVsTaskBody CreateTaskBody(Func`2<T, object> action);
    public static IVsTaskBody CreateTaskBody(Func`1<object> action);
    public static IVsTaskBody CreateTaskBody(Action action);
    public static IVsTask CreateAndStartTask(IVsTaskSchedulerService scheduler, VsTaskRunContext context, Action action);
    public static IVsTask CreateAndStartTask(IVsTaskSchedulerService scheduler, VsTaskRunContext context, VsTaskBodyCallback action);
    public static IVsTask CreateAndStartTask(IVsTaskSchedulerService scheduler, VsTaskRunContext context, IVsTaskBody pTaskBody);
    public static IVsTask CreateAndStartTaskEx(IVsTaskSchedulerService scheduler, VsTaskRunContext context, VsTaskCreationOptions options, IVsTaskBody pTaskBody, object pAsyncState);
    private static IVsTask GetSingleParent(IVsTask[] parentTasks);
    private static T GetParentResult(IVsTask[] parentTasks);
    public static IVsTask Delay(IVsTaskSchedulerService scheduler, TimeSpan delay);
    [ExtensionAttribute]
public static YieldAwaiter Yield(IVsTaskSchedulerService scheduler, VsTaskRunContext context, IVsTaskCompletionSource taskCompletionSource);
    public static YieldAwaiter Yield(VsTaskRunContext context, IVsTaskCompletionSource taskCompletionSource);
    [ExtensionAttribute]
public static void CompleteAfterTask(IVsTaskCompletionSource taskCompletionSource, Task`1<T> task);
    private static bool CopyTaskResultIfCompleted(Task`1<T> task, IVsTaskCompletionSource taskCompletionSource);
    [ExtensionAttribute]
public static IVsTask InvokeAsync(IVsTaskSchedulerService scheduler, VsInvokableAsyncFunction`1<T> asyncFunction);
    public static IVsTask Delay(IVsTaskSchedulerService scheduler, double delayMilliseconds);
    [ExtensionAttribute]
public static JoinableTask`1<T> RunAsync(JoinableTaskFactory joinableTaskFactory, VsTaskRunContext priority, Func`1<Task`1<T>> asyncMethod);
    [ExtensionAttribute]
public static JoinableTask RunAsync(JoinableTaskFactory joinableTaskFactory, VsTaskRunContext priority, Func`1<Task> asyncMethod);
    [ExtensionAttribute]
public static IVsTask RunAsyncAsVsTask(JoinableTaskFactory joinableTaskFactory, VsTaskRunContext priority, Func`2<CancellationToken, Task`1<T>> asyncMethod);
    [ExtensionAttribute]
public static void Run(JoinableTaskFactory joinableTaskFactory, string waitCaption, Func`3<IProgress`1<ThreadedWaitDialogProgressData>, CancellationToken, Task> asyncMethod, Nullable`1<TimeSpan> delayToShowDialog);
    [ExtensionAttribute]
public static T Run(JoinableTaskFactory joinableTaskFactory, string waitCaption, Func`3<IProgress`1<ThreadedWaitDialogProgressData>, CancellationToken, Task`1<T>> asyncMethod, Nullable`1<TimeSpan> delayToShowDialog);
    [ExtensionAttribute]
public static void Run(JoinableTaskFactory joinableTaskFactory, string waitCaption, Func`2<IProgress`1<ThreadedWaitDialogProgressData>, Task> asyncMethod, Nullable`1<TimeSpan> delayToShowDialog);
    [ExtensionAttribute]
public static T Run(JoinableTaskFactory joinableTaskFactory, string waitCaption, Func`2<IProgress`1<ThreadedWaitDialogProgressData>, Task`1<T>> asyncMethod, Nullable`1<TimeSpan> delayToShowDialog);
    [ExtensionAttribute]
public static void Run(JoinableTaskFactory joinableTaskFactory, string waitCaption, string waitMessage, Func`3<IProgress`1<ThreadedWaitDialogProgressData>, CancellationToken, Task> asyncMethod, Nullable`1<TimeSpan> delayToShowDialog);
    [ExtensionAttribute]
public static T Run(JoinableTaskFactory joinableTaskFactory, string waitCaption, string waitMessage, Func`3<IProgress`1<ThreadedWaitDialogProgressData>, CancellationToken, Task`1<T>> asyncMethod, Nullable`1<TimeSpan> delayToShowDialog);
    [ExtensionAttribute]
public static void Run(JoinableTaskFactory joinableTaskFactory, string waitCaption, string waitMessage, Func`2<IProgress`1<ThreadedWaitDialogProgressData>, Task> asyncMethod, Nullable`1<TimeSpan> delayToShowDialog);
    [ExtensionAttribute]
public static T Run(JoinableTaskFactory joinableTaskFactory, string waitCaption, string waitMessage, Func`2<IProgress`1<ThreadedWaitDialogProgressData>, Task`1<T>> asyncMethod, Nullable`1<TimeSpan> delayToShowDialog);
    [ExtensionAttribute]
public static JoinableTask StartOnIdle(JoinableTaskFactory joinableTaskFactory, Func`1<Task> asyncMethod, VsTaskRunContext priority);
    [ExtensionAttribute]
public static JoinableTask StartOnIdle(JoinableTaskFactory joinableTaskFactory, Action action, VsTaskRunContext priority);
    [ExtensionAttribute]
public static void FileAndForget(JoinableTask joinableTask, string faultEventName, string faultDescription, Func`2<Exception, bool> fileOnlyIf);
    [ExtensionAttribute]
public static void FileAndForget(Task task, string faultEventName, string faultDescription, Func`2<Exception, bool> fileOnlyIf);
    [ExtensionAttribute]
public static IVsTask AsVsTask(JoinableTask`1<T> joinableTask);
    [ExtensionAttribute]
public static JoinableTaskFactory WithPriority(JoinableTaskFactory joinableTaskFactory, VsTaskRunContext priority);
    [ExtensionAttribute]
public static VsTaskAwaiter GetAwaiter(IVsTask task);
    [ExtensionAttribute]
public static VsTaskAwaiter GetAwaiter(VsTaskAwaiter awaiter);
    [ExtensionAttribute]
public static TaskSchedulerAwaiter GetAwaiter(VsTaskRunContext context);
    public static TaskScheduler GetTaskScheduler(VsTaskRunContext context);
    [ExtensionAttribute]
public static VsTaskAwaiter ResumeWith(IVsTask task, VsTaskRunContext context);
    [ExtensionAttribute]
public static IVsTask ContinueWith(IVsTask task, VsTaskRunContext context, IVsTaskBody body);
    [ExtensionAttribute]
public static IVsTask ContinueWith(IVsTask task, VsTaskRunContext context, VsTaskContinuationOptions options, IVsTaskBody taskBody, object asyncState);
    [ExtensionAttribute]
public static bool Wait(IVsTask task, int millisecondsTimeout, VsTaskWaitOptions options);
    [ExtensionAttribute]
public static bool Wait(IVsTask task, int millisecondsTimeout);
    [ExtensionAttribute]
public static IVsTask CreateTask(IVsTaskSchedulerService service, VsTaskRunContext context, IVsTaskBody taskBody);
    [ExtensionAttribute]
public static IVsTask CreateTask(IVsTaskSchedulerService service, VsTaskRunContext context, VsTaskCreationOptions options, IVsTaskBody taskBody, object asyncState);
    [ExtensionAttribute]
public static IVsTaskCompletionSource CreateTaskCompletionSource(IVsTaskSchedulerService service, VsTaskCreationOptions options, object asyncState);
    [ExtensionAttribute]
public static IVsTask ContinueWhenAllCompleted(IVsTaskSchedulerService service, VsTaskRunContext context, IVsTask[] dependentTasks, IVsTaskBody taskBody);
    [ExtensionAttribute]
public static IVsTask ContinueWhenAllCompleted(IVsTaskSchedulerService service, VsTaskRunContext context, IVsTask[] dependentTasks, VsTaskContinuationOptions options, IVsTaskBody taskBody, object asyncState);
    [ExtensionAttribute]
public static void ApplyCancellationToken(IVsTask task, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static void CancelWhenCancellationRequested(IVsTask task, JoinableTaskFactory jtf, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static bool IsUIThreadContext(VsTaskRunContext context);
    [ExtensionAttribute]
private static bool IsUIThreadJoinableTaskSafeContext(VsTaskRunContext context);
}
public enum Microsoft.VisualStudio.Shell.Generators.GeneratorResult : Enum {
    public int value__;
    public static GeneratorResult Success;
    public static GeneratorResult Fail;
    public static GeneratorResult NotSupported;
}
[GuidAttribute("B18D1F9D-58B9-45D4-BC56-44A8C4CDB76B")]
public interface Microsoft.VisualStudio.Shell.Generators.IVsGeneratorRunningService {
    public abstract virtual Task RunGeneratorAsync(string filePath, CancellationToken cancellationToken);
    public abstract virtual Task RunGeneratorAsync(IEnumerable`1<string> filePaths, CancellationToken cancellationToken);
}
public interface Microsoft.VisualStudio.Shell.Generators.IVsSingleFileGeneratorAsync {
    public abstract virtual Task`1<string> GetDefaultExtensionAsync(CancellationToken cancellationToken);
    public abstract virtual Task`1<GeneratorResult> GenerateAsync(string inputFilePath, string inputFileContents, string defaultNamespace, Stream outputStream, IVsGeneratorProgress generatorProgress, CancellationToken cancellationToken);
}
internal class Microsoft.VisualStudio.Shell.GenericThreadHelper : ThreadHelper {
    protected virtual IDisposable GetInvocationWrapper();
}
public static class Microsoft.VisualStudio.Shell.HierarchyGraphNodeProperties : object {
    public static GraphProperty HierarchyItem;
    private static HierarchyGraphNodeProperties();
}
public class Microsoft.VisualStudio.Shell.HierarchyItemCollectionChangedEventArgs : NotifyCollectionChangedEventArgs {
    private UInt32 _hierarchyManipulationState;
    public UInt32 HierarchyManipulationState { get; }
    public HierarchyItemCollectionChangedEventArgs(UInt32 hierarchyManipulationState, NotifyCollectionChangedAction action);
    public HierarchyItemCollectionChangedEventArgs(UInt32 hierarchyManipulationState, NotifyCollectionChangedAction action, IList changedItems);
    public HierarchyItemCollectionChangedEventArgs(UInt32 hierarchyManipulationState, NotifyCollectionChangedAction action, object changedItem);
    public HierarchyItemCollectionChangedEventArgs(UInt32 hierarchyManipulationState, NotifyCollectionChangedAction action, IList newItems, IList oldItems);
    public HierarchyItemCollectionChangedEventArgs(UInt32 hierarchyManipulationState, NotifyCollectionChangedAction action, IList changedItems, int startingIndex);
    public HierarchyItemCollectionChangedEventArgs(UInt32 hierarchyManipulationState, NotifyCollectionChangedAction action, object changedItem, int index);
    public HierarchyItemCollectionChangedEventArgs(UInt32 hierarchyManipulationState, NotifyCollectionChangedAction action, object newItem, object oldItem);
    public HierarchyItemCollectionChangedEventArgs(UInt32 hierarchyManipulationState, NotifyCollectionChangedAction action, IList newItems, IList oldItems, int startingIndex);
    public HierarchyItemCollectionChangedEventArgs(UInt32 hierarchyManipulationState, NotifyCollectionChangedAction action, IList changedItems, int index, int oldIndex);
    public HierarchyItemCollectionChangedEventArgs(UInt32 hierarchyManipulationState, NotifyCollectionChangedAction action, object changedItem, int index, int oldIndex);
    public HierarchyItemCollectionChangedEventArgs(UInt32 hierarchyManipulationState, NotifyCollectionChangedAction action, object newItem, object oldItem, int index);
    public UInt32 get_HierarchyManipulationState();
}
public class Microsoft.VisualStudio.Shell.HierarchyItemEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
private IVsHierarchyItem <Item>k__BackingField;
    public IVsHierarchyItem Item { get; private set; }
    public HierarchyItemEventArgs(IVsHierarchyItem item);
    [CompilerGeneratedAttribute]
public IVsHierarchyItem get_Item();
    [CompilerGeneratedAttribute]
private void set_Item(IVsHierarchyItem value);
}
public interface Microsoft.VisualStudio.Shell.IAsyncAttachedCollectionSource {
    public bool IsUpdatingHasItems { get; }
    public abstract virtual bool get_IsUpdatingHasItems();
}
[NullableContextAttribute("1")]
public interface Microsoft.VisualStudio.Shell.IAsyncDocView {
    public abstract virtual Task`1<LoadDocViewResult> LoadDocViewAsync(IProgress`1<LoadDocViewProgress> progress, LoadDocumentViewContext context, CancellationToken cancellationToken);
}
[NullableContextAttribute("1")]
public interface Microsoft.VisualStudio.Shell.IAsyncServiceContainer {
    public abstract virtual void AddService(Type serviceType, AsyncServiceCreatorCallback callback);
    public abstract virtual void AddService(Type serviceType, AsyncServiceCreatorCallback callback, bool promote);
    public abstract virtual void AddService(Type serviceType, AsyncServiceCreatorWithProgressCallback callback);
    public abstract virtual void AddService(Type serviceType, AsyncServiceCreatorWithProgressCallback callback, bool promote);
    public abstract virtual void RemoveService(Type serviceType);
    public abstract virtual void RemoveService(Type serviceType, bool promote);
}
[NullableContextAttribute("1")]
public interface Microsoft.VisualStudio.Shell.IAsyncServiceProvider {
    public abstract virtual Task`1<object> GetServiceAsync(Type serviceType);
}
public interface Microsoft.VisualStudio.Shell.IAsyncServiceProvider2 {
    [NullableContextAttribute("1")]
public abstract virtual Task`1<object> GetServiceAsync(Type serviceType, bool swallowExceptions);
}
public interface Microsoft.VisualStudio.Shell.IAsyncServiceProvider3 {
    [NullableContextAttribute("1")]
public abstract virtual Task`1<TInterface> GetServiceAsync(bool throwOnFailure, CancellationToken cancellationToken);
}
public interface Microsoft.VisualStudio.Shell.IAttachedCollectionService {
    public abstract virtual IAttachedRelationship GetRelationship(object item, string relationshipName);
    public abstract virtual IEnumerable`1<IAttachedRelationship> GetRelationships(object item);
    public abstract virtual IAttachedCollectionSource GetOrCreateCollectionSource(object item, string relationshipName);
}
public interface Microsoft.VisualStudio.Shell.IAttachedCollectionSource {
    public object SourceItem { get; }
    public bool HasItems { get; }
    public IEnumerable Items { get; }
    public abstract virtual object get_SourceItem();
    public abstract virtual bool get_HasItems();
    public abstract virtual IEnumerable get_Items();
}
public interface Microsoft.VisualStudio.Shell.IAttachedCollectionSourceProvider {
    public abstract virtual IAttachedCollectionSource CreateCollectionSource(object item, string relationshipName);
    public abstract virtual IEnumerable`1<IAttachedRelationship> GetRelationships(object item);
}
public interface Microsoft.VisualStudio.Shell.IAttachedCollectionSourceProvider2 {
    public abstract virtual Object[] GetItemsForPath(string filePath);
}
public interface Microsoft.VisualStudio.Shell.IAttachedRelationship {
    public string Name { get; }
    public string DisplayName { get; }
    public abstract virtual string get_Name();
    public abstract virtual string get_DisplayName();
}
public interface Microsoft.VisualStudio.Shell.IBuildCancellationAwareHostObject {
    public abstract virtual void SetCancellationToken(CancellationToken cancellationToken);
}
public interface Microsoft.VisualStudio.Shell.ICacheableAttachedCollectionSource {
    public bool CanCache { get; }
    public abstract virtual bool get_CanCache();
}
public interface Microsoft.VisualStudio.Shell.IClientRightsAdditionalMetadata {
    public IReadOnlyDictionary`2<string, object> ClientRightsMetadata { get; }
    public abstract virtual IReadOnlyDictionary`2<string, object> get_ClientRightsMetadata();
}
[GuidAttribute("2DA0FCD8-5684-4EB6-8A6D-2F2621B85018")]
public interface Microsoft.VisualStudio.Shell.ICodeContainerProvider {
    public abstract virtual Task`1<CodeContainer> AcquireCodeContainerAsync(IProgress`1<ServiceProgressData> downloadProgress, CancellationToken cancellationToken);
    public abstract virtual Task`1<CodeContainer> AcquireCodeContainerAsync(CodeContainer onlineCodeContainer, IProgress`1<ServiceProgressData> downloadProgress, CancellationToken cancellationToken);
}
public interface Microsoft.VisualStudio.Shell.ICommentTaskToken {
    public CommentTaskPriority Priority { get; }
    public string Text { get; }
    public abstract virtual CommentTaskPriority get_Priority();
    public abstract virtual string get_Text();
}
public interface Microsoft.VisualStudio.Shell.IErrorList {
    public bool AreOtherErrorSourceEntriesShown { get; public set; }
    public bool AreBuildErrorSourceEntriesShown { get; public set; }
    public bool AreErrorsShown { get; public set; }
    public bool AreWarningsShown { get; public set; }
    public bool AreMessagesShown { get; public set; }
    public IWpfTableControl TableControl { get; }
    public abstract virtual bool get_AreOtherErrorSourceEntriesShown();
    public abstract virtual void set_AreOtherErrorSourceEntriesShown(bool value);
    public abstract virtual bool get_AreBuildErrorSourceEntriesShown();
    public abstract virtual void set_AreBuildErrorSourceEntriesShown(bool value);
    public abstract virtual bool get_AreErrorsShown();
    public abstract virtual void set_AreErrorsShown(bool value);
    public abstract virtual bool get_AreWarningsShown();
    public abstract virtual void set_AreWarningsShown(bool value);
    public abstract virtual bool get_AreMessagesShown();
    public abstract virtual void set_AreMessagesShown(bool value);
    public abstract virtual IWpfTableControl get_TableControl();
}
public interface Microsoft.VisualStudio.Shell.IFilteredHierarchyItemSet {
}
public interface Microsoft.VisualStudio.Shell.IInstalledToolboxItemInfo {
    public string TypeName { get; }
    public AssemblyName AssemblyName { get; }
    public IEnumerable`1<KeyValuePair`2<string, string>> CustomProperties { get; }
    public abstract virtual string get_TypeName();
    public abstract virtual AssemblyName get_AssemblyName();
    public abstract virtual IEnumerable`1<KeyValuePair`2<string, string>> get_CustomProperties();
}
public interface Microsoft.VisualStudio.Shell.IJoinableTaskFactoryAwareHostObject {
    public abstract virtual void SetContext(JoinableTaskFactory factory);
}
[NullableContextAttribute("1")]
public interface Microsoft.VisualStudio.Shell.IMaintenanceTask {
    public abstract virtual Task PerformMaintenanceAsync(CancellationToken cancellationToken);
}
public interface Microsoft.VisualStudio.Shell.IMSDNChannel {
    public string SubscriptionChannel { get; }
    public abstract virtual string get_SubscriptionChannel();
}
public interface Microsoft.VisualStudio.Shell.INonClientArea {
    public abstract virtual int HitTest(Point point);
}
[FlagsAttribute]
public enum Microsoft.VisualStudio.Shell.Internal.ClientFeatures : Enum {
    public int value__;
    public static ClientFeatures None;
    public static ClientFeatures All;
}
[NullableContextAttribute("1")]
[GuidAttribute("4fe99374-ef22-4a9d-9ab3-4dae20ef16b0")]
public interface Microsoft.VisualStudio.Shell.Internal.IVsClientFeatureCallbackTargetFactory {
    public abstract virtual object CreateInstance(ServiceMoniker moniker);
}
[NullableContextAttribute("1")]
public interface Microsoft.VisualStudio.Shell.Internal.IVsClientTargetsService {
    public abstract virtual Task`1<ServiceRpcDescriptor> CreateDescriptorAsync(ServiceMoniker moniker, ClientFeatures features, Type clientInterface, CancellationToken cancellationToken);
    public abstract virtual Task`1<ServiceRpcDescriptor> CreateDescriptorAsync(ServiceJsonRpcDescriptor descriptor, ClientFeatures features, CancellationToken cancellationToken);
}
[GuidAttribute("2a011bd3-11c6-4131-8623-20db06daba30")]
public interface Microsoft.VisualStudio.Shell.Internal.SVsClientTargetsService {
}
[ExtensionAttribute]
[EditorBrowsableAttribute("1")]
public static class Microsoft.VisualStudio.Shell.Internal.UIInternalHelpers : object {
    [ExtensionAttribute]
public static bool IsRegistrationTask(OperationProgressTask task);
    [ExtensionAttribute]
public static void SetIsRegistrationTask(OperationProgressTask task, bool value);
    [ExtensionAttribute]
[ObsoleteAttribute]
public static void SetIsInProgress(OperationProgressStageStatus& status, bool value);
    public static IEnumerable`1<UIElement> GetSortedNavigableControls();
}
internal class Microsoft.VisualStudio.Shell.InvokableAction : InvokableBase {
    private Action a;
    private CapturedContext context;
    public InvokableAction(Action a, bool captureContext);
    protected virtual void InvokeMethod();
}
internal abstract class Microsoft.VisualStudio.Shell.InvokableBase : object {
    [CompilerGeneratedAttribute]
private Exception <Exception>k__BackingField;
    public Exception Exception { get; private set; }
    protected abstract virtual void InvokeMethod();
    public sealed virtual int Invoke();
    [CompilerGeneratedAttribute]
public Exception get_Exception();
    [CompilerGeneratedAttribute]
private void set_Exception(Exception value);
    private void VerifyAccess();
}
internal class Microsoft.VisualStudio.Shell.InvokableFunction`1 : InvokableBase {
    private Func`1<TResult> fn;
    [CompilerGeneratedAttribute]
private TResult <Result>k__BackingField;
    public TResult Result { get; private set; }
    public InvokableFunction`1(Func`1<TResult> fn);
    [CompilerGeneratedAttribute]
public TResult get_Result();
    [CompilerGeneratedAttribute]
private void set_Result(TResult value);
    protected virtual void InvokeMethod();
}
public interface Microsoft.VisualStudio.Shell.IReadOnlyObservableSet {
    public int Count { get; }
    public abstract virtual int get_Count();
    public abstract virtual bool Contains(object item);
}
public interface Microsoft.VisualStudio.Shell.IReadOnlyObservableSet`1 {
    public abstract virtual bool Contains(T item);
}
[GuidAttribute("DEA1AAA9-8552-4619-8186-2B8B62D618DF")]
public interface Microsoft.VisualStudio.Shell.ISccUIClickedEventArgs {
    public Rect ClickedElementPosition { get; }
    public abstract virtual Rect get_ClickedElementPosition();
}
[GuidAttribute("934E68B2-9E4E-4B57-BD0B-E66544927CFF")]
public interface Microsoft.VisualStudio.Shell.ISccUIClickedEventArgs2 {
    public UIElement ClickedElement { get; }
    public abstract virtual UIElement get_ClickedElement();
}
public interface Microsoft.VisualStudio.Shell.ISelectedGraphNode {
    public GraphNode Node { get; }
    public abstract virtual GraphNode get_Node();
}
public interface Microsoft.VisualStudio.Shell.ISettingsMachineLocalityEvaluator {
    public abstract virtual bool IsMachineLocal(string name, object value);
}
[GuidAttribute("C3B7CD23-FCDE-4309-B559-5EF4B2B2E305")]
public interface Microsoft.VisualStudio.Shell.ISolutionSearchOptions {
    public bool SearchFileContents { get; }
    public bool SearchExternalItems { get; }
    public abstract virtual bool get_SearchFileContents();
    public abstract virtual bool get_SearchExternalItems();
}
[GuidAttribute("2D07C2D6-FF04-46BC-88DE-C2528CB8A145")]
public interface Microsoft.VisualStudio.Shell.ISolutionSearchParameters {
    public IVsSearchQuery SearchQuery { get; }
    public ISolutionSearchOptions Options { get; }
    public UInt32 MaximumResults { get; }
    public abstract virtual IVsSearchQuery get_SearchQuery();
    public abstract virtual ISolutionSearchOptions get_Options();
    public abstract virtual UInt32 get_MaximumResults();
    public abstract virtual void OnMaximumResultsExceeded();
}
public interface Microsoft.VisualStudio.Shell.ISolutionTreeFilter {
    public IReadOnlyObservableSet IncludedItems { get; }
    public abstract virtual IReadOnlyObservableSet get_IncludedItems();
    public abstract virtual FilterDescendantBehavior GetFilterDescendantsBehavior(object item);
}
public interface Microsoft.VisualStudio.Shell.ISolutionTreeFilterProvider {
    public abstract virtual bool IsFilteringSupported(IEnumerable rootItems);
    public abstract virtual ISolutionTreeFilter CreateFilter(IEnumerable rootItems);
}
public interface Microsoft.VisualStudio.Shell.ISupportDisposalNotification {
    public bool IsDisposed { get; }
    public abstract virtual bool get_IsDisposed();
}
public interface Microsoft.VisualStudio.Shell.ITaskList {
    public IReadOnlyList`1<ICommentTaskToken> CommentTokens { get; }
    public IWpfTableControl TableControl { get; }
    public abstract virtual IReadOnlyList`1<ICommentTaskToken> get_CommentTokens();
    public abstract virtual IWpfTableControl get_TableControl();
}
public interface Microsoft.VisualStudio.Shell.IToolboxAppDomainControl {
    public abstract virtual AppDomain CreateAppDomain();
    public abstract virtual void UnloadAppDomain(AppDomain appDomain);
}
public interface Microsoft.VisualStudio.Shell.IToolboxAssemblyInfo {
    public string OriginalPath { get; }
    public abstract virtual string get_OriginalPath();
}
public interface Microsoft.VisualStudio.Shell.IToolboxExtensionsSdkInfo {
    public string AppliesTo { get; }
    public string Id { get; }
    public string Path { get; }
    public string DisplayName { get; }
    public Version MinVSVersion { get; }
    public string TargetFramework { get; }
    public IToolboxPlatformInfo TargetPlatform { get; }
    public abstract virtual string get_AppliesTo();
    public abstract virtual string get_Id();
    public abstract virtual string get_Path();
    public abstract virtual string get_DisplayName();
    public abstract virtual Version get_MinVSVersion();
    public abstract virtual string get_TargetFramework();
    public abstract virtual IToolboxPlatformInfo get_TargetPlatform();
}
public interface Microsoft.VisualStudio.Shell.IToolboxExtensionsSdkInfo2 {
    public abstract virtual string GetAttributeValue(string attributeName);
}
public interface Microsoft.VisualStudio.Shell.IToolboxExtensionsSdkType {
    public IToolboxExtensionsSdkInfo SdkInfo { get; }
    public abstract virtual IToolboxExtensionsSdkInfo get_SdkInfo();
}
public interface Microsoft.VisualStudio.Shell.IToolboxExtensionsSdkTypeByName {
    public IToolboxExtensionsSdkInfo SdkInfo { get; }
    public abstract virtual IToolboxExtensionsSdkInfo get_SdkInfo();
}
public interface Microsoft.VisualStudio.Shell.IToolboxItemCreator {
    public abstract virtual IInstalledToolboxItemInfo GetItemInfo(IDataObject toolboxItem);
    public abstract virtual IDataObject CreateToolboxItem(string typeName, AssemblyName assemblyName, IEnumerable`1<KeyValuePair`2<string, string>> itemProperties, IEnumerable`1<KeyValuePair`2<string, string>> extraInfo);
}
public interface Microsoft.VisualStudio.Shell.IToolboxItemDiscovery {
    public IEnumerable`1<string> AdditionalAssemblyPaths { get; }
    public abstract virtual IEnumerable`1<string> get_AdditionalAssemblyPaths();
    public abstract virtual IToolboxItemInfo GetItemInfo(IToolboxType type);
}
public interface Microsoft.VisualStudio.Shell.IToolboxItemDiscoveryByName {
    public abstract virtual IToolboxItemInfo GetItemInfo(IToolboxTypeByName type, ToolboxItemDiscoveryContext context);
}
public interface Microsoft.VisualStudio.Shell.IToolboxItemDiscoveryFactory {
    public IToolboxAppDomainControl AppDomainCreator { get; }
    public IToolboxItemCreator ItemCreator { get; }
    public abstract virtual ObjectHandle CreateItemDiscovery(AppDomain domain);
    public abstract virtual IToolboxAppDomainControl get_AppDomainCreator();
    public abstract virtual IToolboxItemCreator get_ItemCreator();
}
public interface Microsoft.VisualStudio.Shell.IToolboxItemDiscoveryWithContext {
    public IEnumerable`1<string> AdditionalAssemblyPaths { get; }
    public abstract virtual IEnumerable`1<string> get_AdditionalAssemblyPaths();
    public abstract virtual IToolboxItemInfo GetItemInfo(IToolboxType type, ToolboxItemDiscoveryContext context);
}
public interface Microsoft.VisualStudio.Shell.IToolboxItemInfo {
    public string DisplayName { get; }
    public object Icon { get; }
    public object TransparentColor { get; }
    public IEnumerable`1<KeyValuePair`2<string, string>> ExtraInfo { get; }
    public abstract virtual string get_DisplayName();
    public abstract virtual object get_Icon();
    public abstract virtual object get_TransparentColor();
    public abstract virtual string GetPropertyValue(string name);
    public abstract virtual IEnumerable`1<KeyValuePair`2<string, string>> get_ExtraInfo();
}
public interface Microsoft.VisualStudio.Shell.IToolboxPlatformInfo {
    public string Identifier { get; }
    public Version Version { get; }
    public abstract virtual string get_Identifier();
    public abstract virtual Version get_Version();
}
public interface Microsoft.VisualStudio.Shell.IToolboxPlatformType {
    public IToolboxPlatformInfo TargetPlatform { get; }
    public abstract virtual IToolboxPlatformInfo get_TargetPlatform();
}
public interface Microsoft.VisualStudio.Shell.IToolboxPlatformTypeByName {
    public IToolboxPlatformInfo TargetPlatform { get; }
    public abstract virtual IToolboxPlatformInfo get_TargetPlatform();
}
public interface Microsoft.VisualStudio.Shell.IToolboxType {
    public Type Type { get; }
    public IToolboxAssemblyInfo AssemblyInfo { get; }
    public abstract virtual Type get_Type();
    public abstract virtual IToolboxAssemblyInfo get_AssemblyInfo();
}
public interface Microsoft.VisualStudio.Shell.IToolboxTypeByName {
    public string TypeFullName { get; }
    public IToolboxAssemblyInfo AssemblyInfo { get; }
    public abstract virtual string get_TypeFullName();
    public abstract virtual IToolboxAssemblyInfo get_AssemblyInfo();
}
public interface Microsoft.VisualStudio.Shell.IVsAccountManagementService {
    public abstract virtual Task`1<IWpfAccountPicker> CreateWpfAccountPickerAsync(AccountPickerOptions options);
}
public interface Microsoft.VisualStudio.Shell.IVsAsyncFileChangeEx {
    public abstract virtual Task`1<UInt32> AdviseFileChangeAsync(string filename, _VSFILECHANGEFLAGS filter, IVsFreeThreadedFileChangeEvents2 sink, CancellationToken cancellationToken);
    public abstract virtual Task`1<string> UnadviseFileChangeAsync(UInt32 cookie, CancellationToken cancellationToken);
    public abstract virtual Task`1<String[]> UnadviseFileChangesAsync(IReadOnlyCollection`1<UInt32> cookies, CancellationToken cancellationToken);
    public abstract virtual Task`1<UInt32> AdviseDirChangeAsync(string directory, bool watchSubdirectories, IVsFreeThreadedFileChangeEvents2 sink, CancellationToken cancellationToken);
    public abstract virtual Task`1<string> UnadviseDirChangeAsync(UInt32 cookie, CancellationToken cancellationToken);
    public abstract virtual Task`1<String[]> UnadviseDirChangesAsync(IReadOnlyCollection`1<UInt32> cookies, CancellationToken cancellationToken);
    public abstract virtual Task SyncFileAsync(string filename, CancellationToken cancellationToken);
    public abstract virtual Task IgnoreFileAsync(UInt32 cookie, string filename, bool ignore, CancellationToken cancellationToken);
    public abstract virtual Task IgnoreDirAsync(string directory, bool ignore, CancellationToken cancellationToken);
    public abstract virtual Task FilterDirectoryChangesAsync(UInt32 cookie, String[] extensions, CancellationToken cancellationToken);
}
public interface Microsoft.VisualStudio.Shell.IVsAsyncFileChangeEx2 {
    [NullableContextAttribute("1")]
public abstract virtual Task`1<UInt32[]> AdviseFileChangesAsync(IReadOnlyCollection`1<string> filenames, _VSFILECHANGEFLAGS filter, IVsFreeThreadedFileChangeEvents2 sink, CancellationToken cancellationToken);
}
public interface Microsoft.VisualStudio.Shell.IVsHierarchyItem {
    public IVsHierarchyItemIdentity HierarchyIdentity { get; }
    public IVsHierarchyItem Parent { get; }
    public IEnumerable`1<IVsHierarchyItem> Children { get; }
    public bool AreChildrenRealized { get; }
    public string Text { get; }
    public string CanonicalName { get; }
    public bool IsBold { get; public set; }
    public bool IsCut { get; public set; }
    public abstract virtual IVsHierarchyItemIdentity get_HierarchyIdentity();
    public abstract virtual IVsHierarchyItem get_Parent();
    public abstract virtual IEnumerable`1<IVsHierarchyItem> get_Children();
    public abstract virtual bool get_AreChildrenRealized();
    public abstract virtual string get_Text();
    public abstract virtual string get_CanonicalName();
    public abstract virtual bool get_IsBold();
    public abstract virtual void set_IsBold(bool value);
    public abstract virtual bool get_IsCut();
    public abstract virtual void set_IsCut(bool value);
}
public interface Microsoft.VisualStudio.Shell.IVsHierarchyItemCollectionProvider {
    public abstract virtual Task`1<IReadOnlyObservableSet`1<IVsHierarchyItem>> GetDescendantsAsync(IVsHierarchy hierarchy, CancellationToken cancellationToken);
    public abstract virtual Task`1<IFilteredHierarchyItemSet> GetFilteredHierarchyItemsAsync(IReadOnlyObservableSet`1<IVsHierarchyItem> sourceCollection, Predicate`1<IVsHierarchyItem> includeInFilter, CancellationToken cancellationToken, Int32[] dependentProperties);
}
public interface Microsoft.VisualStudio.Shell.IVsHierarchyItemIdentity {
    public bool IsNestedItem { get; }
    public IVsHierarchy Hierarchy { get; }
    public UInt32 ItemID { get; }
    public IVsHierarchy NestedHierarchy { get; }
    public UInt32 NestedItemID { get; }
    public bool IsRoot { get; }
    public abstract virtual bool get_IsNestedItem();
    public abstract virtual IVsHierarchy get_Hierarchy();
    public abstract virtual UInt32 get_ItemID();
    public abstract virtual IVsHierarchy get_NestedHierarchy();
    public abstract virtual UInt32 get_NestedItemID();
    public abstract virtual bool get_IsRoot();
}
public interface Microsoft.VisualStudio.Shell.IVsHierarchyItemManager {
    public bool IsChangingItems { get; }
    public abstract virtual bool TryGetHierarchyItemIdentity(IVsHierarchy hierarchy, UInt32 itemid, IVsHierarchyItemIdentity& identity);
    public abstract virtual IVsHierarchyItem GetHierarchyItem(IVsHierarchy hierarchy, UInt32 itemid);
    public abstract virtual bool TryGetHierarchyItem(IVsHierarchy hierarchy, UInt32 itemid, IVsHierarchyItem& item);
    public abstract virtual bool get_IsChangingItems();
    [CompilerGeneratedAttribute]
public abstract virtual void add_AfterInvalidateItems(EventHandler`1<HierarchyItemEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_AfterInvalidateItems(EventHandler`1<HierarchyItemEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_OnItemAdded(EventHandler`1<HierarchyItemEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_OnItemAdded(EventHandler`1<HierarchyItemEventArgs> value);
}
public interface Microsoft.VisualStudio.Shell.IVsManagedImageService {
    public abstract virtual IImageHandle AddCustomImage(ImageSource image, bool canTheme);
}
public interface Microsoft.VisualStudio.Shell.IVsManagedSettingsChangeEventSource {
    [CompilerGeneratedAttribute]
public abstract virtual void add_SettingChanged(Action`1<IVsManagedSettingsChangeEventSource> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_SettingChanged(Action`1<IVsManagedSettingsChangeEventSource> value);
}
[NullableContextAttribute("1")]
[GuidAttribute("d94ae402-a4e1-4bc1-a436-a1a27768cabc")]
public interface Microsoft.VisualStudio.Shell.IVsProjectSecrets {
    public abstract virtual string SanitizeName(string name);
    public abstract virtual IReadOnlyCollection`1<char> GetInvalidCharactersFrom(string name);
    public abstract virtual Task AddSecretAsync(string name, string value, CancellationToken cancellationToken);
    public abstract virtual Task SetSecretAsync(string name, string value, CancellationToken cancellationToken);
    public abstract virtual Task`1<string> GetSecretAsync(string name, CancellationToken cancellationToken);
    public abstract virtual Task`1<IReadOnlyCollection`1<string>> GetSecretNamesAsync(CancellationToken cancellationToken);
    public abstract virtual Task`1<IReadOnlyDictionary`2<string, string>> GetSecretsAsync(CancellationToken cancellationToken);
    public abstract virtual Task`1<bool> RemoveSecretAsync(string name, CancellationToken cancellationToken);
}
[GuidAttribute("6BC10021-397B-4C9D-B26F-B279F6662EFD")]
public interface Microsoft.VisualStudio.Shell.IVsSccChanges {
    public abstract virtual Task PendingChangesUIClickedAsync(ISccUIClickedEventArgs args, CancellationToken cancellationToken);
}
[GuidAttribute("6D906B70-89FB-4550-A915-D768C52205E9")]
public interface Microsoft.VisualStudio.Shell.IVsSccChangesDisplayInformation {
    public int PendingChangeCount { get; }
    public string PendingChangeLabel { get; }
    public string PendingChangeDetail { get; }
    public abstract virtual int get_PendingChangeCount();
    public abstract virtual string get_PendingChangeLabel();
    public abstract virtual string get_PendingChangeDetail();
}
[GuidAttribute("6C21A69B-E6C5-42EF-AFE8-CA8CE747BD0E")]
public interface Microsoft.VisualStudio.Shell.IVsSccChangesDisplayInformation2 {
    public bool IsPendingChangeVisible { get; }
    public bool DisplayUpArrowOnPendingChange { get; }
    public ImageMoniker PendingChangeIcon { get; }
    public abstract virtual bool get_IsPendingChangeVisible();
    public abstract virtual bool get_DisplayUpArrowOnPendingChange();
    public abstract virtual ImageMoniker get_PendingChangeIcon();
}
[GuidAttribute("8B0C3D49-09EA-4A24-8292-C09389A59CDF")]
public interface Microsoft.VisualStudio.Shell.IVsSccCommitPendingChangesPrompt {
    public string CommitPendingChangesPromptMessage { get; }
    public abstract virtual string get_CommitPendingChangesPromptMessage();
}
[GuidAttribute("1A91E3C1-D0C5-4B48-BF91-95FCF1617D6F")]
public interface Microsoft.VisualStudio.Shell.IVsSccCurrentBranch {
    public abstract virtual Task BranchUIClickedAsync(ISccUIClickedEventArgs args, CancellationToken cancellationToken);
}
[GuidAttribute("7B0A0CBD-0E08-41F1-9C04-E85831763159")]
public interface Microsoft.VisualStudio.Shell.IVsSccCurrentBranchDisplayInformation {
    public string BranchName { get; }
    public ImageMoniker BranchIcon { get; }
    public string BranchDetail { get; }
    public abstract virtual string get_BranchName();
    public abstract virtual ImageMoniker get_BranchIcon();
    public abstract virtual string get_BranchDetail();
}
[GuidAttribute("051BD7CF-6616-4818-9D8C-AD321AE33EB5")]
public interface Microsoft.VisualStudio.Shell.IVsSccCurrentBranchDisplayInformation2 {
    public bool IsBranchVisible { get; }
    public bool DisplayUpArrowOnBranch { get; }
    public abstract virtual bool get_IsBranchVisible();
    public abstract virtual bool get_DisplayUpArrowOnBranch();
}
[GuidAttribute("5717601A-9C55-4D80-B8BD-8DEC87552D82")]
public interface Microsoft.VisualStudio.Shell.IVsSccCurrentRepository {
    public abstract virtual Task RepositoryUIClickedAsync(ISccUIClickedEventArgs args, CancellationToken cancellationToken);
}
[GuidAttribute("0E2F7740-995B-4BD1-B97B-F5A093D1C14B")]
public interface Microsoft.VisualStudio.Shell.IVsSccCurrentRepositoryDisplayInformation {
    public string RepositoryName { get; }
    public ImageMoniker RepositoryIcon { get; }
    public string RepositoryDetail { get; }
    public abstract virtual string get_RepositoryName();
    public abstract virtual ImageMoniker get_RepositoryIcon();
    public abstract virtual string get_RepositoryDetail();
}
[GuidAttribute("F316025C-F4B5-4683-9CC6-05CC9A768B04")]
public interface Microsoft.VisualStudio.Shell.IVsSccCurrentRepositoryDisplayInformation2 {
    public bool IsRepositoryVisible { get; }
    public bool DisplayUpArrowOnRepository { get; }
    public abstract virtual bool get_IsRepositoryVisible();
    public abstract virtual bool get_DisplayUpArrowOnRepository();
}
[NullableContextAttribute("1")]
[GuidAttribute("F3352A43-0AA9-47BA-940C-59D418E89061")]
public interface Microsoft.VisualStudio.Shell.IVsSccPublish {
    public abstract virtual Task BeginPublishWorkflowAsync(CancellationToken cancellationToken);
}
[NullableContextAttribute("1")]
[GuidAttribute("AA0F7296-88B4-4666-96B8-284D8C63404A")]
public interface Microsoft.VisualStudio.Shell.IVsSccSolution {
    [CompilerGeneratedAttribute]
public abstract virtual void add_AddedToSourceControl(EventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_AddedToSourceControl(EventHandler value);
}
[GuidAttribute("4A5B290E-B45E-46A8-991B-5E978FA9879D")]
public interface Microsoft.VisualStudio.Shell.IVsSccUnpublishedCommits {
    public abstract virtual Task UnpublishedCommitsUIClickedAsync(ISccUIClickedEventArgs args, CancellationToken cancellationToken);
    [CompilerGeneratedAttribute]
public abstract virtual void add_AdvertisePublish(EventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_AdvertisePublish(EventHandler value);
}
[GuidAttribute("A3E1F5F8-227B-4669-8DA3-3774668A8EE3")]
public interface Microsoft.VisualStudio.Shell.IVsSccUnpublishedCommitsDisplayInformation {
    public int UnpublishedCommitCount { get; }
    public string UnpublishedCommitLabel { get; }
    public string UnpublishedCommitDetail { get; }
    public abstract virtual int get_UnpublishedCommitCount();
    public abstract virtual string get_UnpublishedCommitLabel();
    public abstract virtual string get_UnpublishedCommitDetail();
}
[GuidAttribute("AB232174-43AB-4BE1-BFE6-5D5F8F4170EB")]
public interface Microsoft.VisualStudio.Shell.IVsSccUnpublishedCommitsDisplayInformation2 {
    public bool IsUnpublishedCommitVisible { get; }
    public bool DisplayUpArrowOnUnpublishedCommit { get; }
    public ImageMoniker UnpublishedCommitIcon { get; }
    public abstract virtual bool get_IsUnpublishedCommitVisible();
    public abstract virtual bool get_DisplayUpArrowOnUnpublishedCommit();
    public abstract virtual ImageMoniker get_UnpublishedCommitIcon();
}
public interface Microsoft.VisualStudio.Shell.IVsTaskEvents {
    [CompilerGeneratedAttribute]
public abstract virtual void add_OnBlockingWaitBegin(EventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_OnBlockingWaitBegin(EventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_OnBlockingWaitEnd(EventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_OnBlockingWaitEnd(EventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_OnMarkedAsBlocking(EventHandler`1<BlockingTaskEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_OnMarkedAsBlocking(EventHandler`1<BlockingTaskEventArgs> value);
}
public interface Microsoft.VisualStudio.Shell.IVsTaskJoinableTask {
    public CancellationToken CancellationToken { get; }
    public abstract virtual CancellationToken get_CancellationToken();
    public abstract virtual void AssociateJoinableTask(object joinableTask);
}
[GuidAttribute("8F0D4E82-FB37-4433-8296-736A43D6FC4C")]
public interface Microsoft.VisualStudio.Shell.IVsToolboxItemDiscoveryRegistrar {
    public abstract virtual void RegisterItemDiscovery(Type itemType, IToolboxItemDiscoveryFactory factory);
}
public interface Microsoft.VisualStudio.Shell.IWpfAccountPicker {
    public FrameworkElement Control { get; }
    public object SelectedAccount { get; public set; }
    public AuthenticationState SelectedAccountAuthenticationState { get; }
    public abstract virtual FrameworkElement get_Control();
    public abstract virtual object get_SelectedAccount();
    public abstract virtual void set_SelectedAccount(object value);
    public abstract virtual AuthenticationState get_SelectedAccountAuthenticationState();
}
public interface Microsoft.VisualStudio.Shell.IWpfAccountPicker2 {
    public abstract virtual void UpdateParentWindow(object parentWindow);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.VisualStudio.Shell.LoadDocumentViewContext : object {
    [CompilerGeneratedAttribute]
private object <DocData>k__BackingField;
    [CompilerGeneratedAttribute]
private Guid <CommandUIContext>k__BackingField;
    [CompilerGeneratedAttribute]
private IVsHierarchy <VsHierarchy>k__BackingField;
    [CompilerGeneratedAttribute]
protected Type EqualityContract { get; }
    public object DocData { get; public set; }
    public Guid CommandUIContext { get; public set; }
    public IVsHierarchy VsHierarchy { get; public set; }
    public LoadDocumentViewContext(object DocData, Guid CommandUIContext, IVsHierarchy VsHierarchy);
    [CompilerGeneratedAttribute]
protected LoadDocumentViewContext(LoadDocumentViewContext original);
    [CompilerGeneratedAttribute]
protected virtual Type get_EqualityContract();
    [CompilerGeneratedAttribute]
public object get_DocData();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_DocData(object value);
    [CompilerGeneratedAttribute]
public Guid get_CommandUIContext();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_CommandUIContext(Guid value);
    [CompilerGeneratedAttribute]
public IVsHierarchy get_VsHierarchy();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_VsHierarchy(IVsHierarchy value);
    [CompilerGeneratedAttribute]
public virtual string ToString();
    [CompilerGeneratedAttribute]
protected virtual bool PrintMembers(StringBuilder builder);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static bool op_Inequality(LoadDocumentViewContext left, LoadDocumentViewContext right);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static bool op_Equality(LoadDocumentViewContext left, LoadDocumentViewContext right);
    [CompilerGeneratedAttribute]
public virtual int GetHashCode();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual bool Equals(object obj);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual bool Equals(LoadDocumentViewContext other);
    [CompilerGeneratedAttribute]
public virtual LoadDocumentViewContext <Clone>$();
    [CompilerGeneratedAttribute]
public void Deconstruct(Object& DocData, Guid& CommandUIContext, IVsHierarchy& VsHierarchy);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.VisualStudio.Shell.LoadDocViewProgress : object {
    [CompilerGeneratedAttribute]
private string <Message>k__BackingField;
    [CompilerGeneratedAttribute]
private string <SubMessage>k__BackingField;
    [CompilerGeneratedAttribute]
protected Type EqualityContract { get; }
    public string Message { get; public set; }
    public string SubMessage { get; public set; }
    public LoadDocViewProgress(string message);
    public LoadDocViewProgress(string message, string subMessage);
    [CompilerGeneratedAttribute]
protected LoadDocViewProgress(LoadDocViewProgress original);
    [CompilerGeneratedAttribute]
protected virtual Type get_EqualityContract();
    [CompilerGeneratedAttribute]
public string get_Message();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_Message(string value);
    [CompilerGeneratedAttribute]
public string get_SubMessage();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_SubMessage(string value);
    [CompilerGeneratedAttribute]
public virtual string ToString();
    [CompilerGeneratedAttribute]
protected virtual bool PrintMembers(StringBuilder builder);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static bool op_Inequality(LoadDocViewProgress left, LoadDocViewProgress right);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static bool op_Equality(LoadDocViewProgress left, LoadDocViewProgress right);
    [CompilerGeneratedAttribute]
public virtual int GetHashCode();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual bool Equals(object obj);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual bool Equals(LoadDocViewProgress other);
    [CompilerGeneratedAttribute]
public virtual LoadDocViewProgress <Clone>$();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.VisualStudio.Shell.LoadDocViewResult : object {
    [CompilerGeneratedAttribute]
private object <LoadedDocView>k__BackingField;
    [CompilerGeneratedAttribute]
private Guid <CommandUIContext>k__BackingField;
    [CompilerGeneratedAttribute]
protected Type EqualityContract { get; }
    public object LoadedDocView { get; public set; }
    public Guid CommandUIContext { get; public set; }
    public LoadDocViewResult(object LoadedDocView, Guid CommandUIContext);
    [CompilerGeneratedAttribute]
protected LoadDocViewResult(LoadDocViewResult original);
    [CompilerGeneratedAttribute]
protected virtual Type get_EqualityContract();
    [CompilerGeneratedAttribute]
public object get_LoadedDocView();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_LoadedDocView(object value);
    [CompilerGeneratedAttribute]
public Guid get_CommandUIContext();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_CommandUIContext(Guid value);
    [CompilerGeneratedAttribute]
public virtual string ToString();
    [CompilerGeneratedAttribute]
protected virtual bool PrintMembers(StringBuilder builder);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static bool op_Inequality(LoadDocViewResult left, LoadDocViewResult right);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static bool op_Equality(LoadDocViewResult left, LoadDocViewResult right);
    [CompilerGeneratedAttribute]
public virtual int GetHashCode();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual bool Equals(object obj);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual bool Equals(LoadDocViewResult other);
    [CompilerGeneratedAttribute]
public virtual LoadDocViewResult <Clone>$();
    [CompilerGeneratedAttribute]
public void Deconstruct(Object& LoadedDocView, Guid& CommandUIContext);
}
internal static class Microsoft.VisualStudio.Shell.NativeMethods : object {
    public static Guid IID_IServiceProvider;
    public static Guid IID_IObjectWithSite;
    public static Guid IID_IUnknown;
    private static NativeMethods();
    internal static int CoRegisterMessageFilter(HandleRef newFilter, IntPtr& oldMsgFilter);
}
internal static class Microsoft.VisualStudio.Shell.OleServiceProvider : object {
    [ThreadStaticAttribute]
private static IServiceProvider globalProvider;
    private static HandleRef nullHandleRef;
    public static IServiceProvider GlobalProvider { get; public set; }
    private static OleServiceProvider();
    public static IServiceProvider get_GlobalProvider();
    public static void set_GlobalProvider(IServiceProvider value);
    private static IServiceProvider GetGlobalProviderFromMessageFilter();
    private static object GetOleMessageFilterForCallingThread();
}
[AttributeUsageAttribute("4")]
public abstract class Microsoft.VisualStudio.Shell.RegistrationAttribute : Attribute {
    public object TypeId { get; }
    public virtual object get_TypeId();
    public abstract virtual void Register(RegistrationContext context);
    public abstract virtual void Unregister(RegistrationContext context);
    protected string GetPackageRegKeyPath(Guid package);
}
public enum Microsoft.VisualStudio.Shell.RegistrationMethod : Enum {
    public int value__;
    public static RegistrationMethod Default;
    public static RegistrationMethod CodeBase;
    public static RegistrationMethod Assembly;
}
public static class Microsoft.VisualStudio.Shell.RssCommands : object {
    public static RoutedCommand EnableDownload;
    public static RoutedCommand PromptForCredentials;
    public static RoutedCommand SetUrl;
    private static RssCommands();
}
public interface Microsoft.VisualStudio.Shell.SccIntegration.IVsSccFolderManager {
    [CompilerGeneratedAttribute]
public abstract virtual void add_SccStatusChanged(EventHandler`1<SccStatusChangedEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_SccStatusChanged(EventHandler`1<SccStatusChangedEventArgs> value);
    public abstract virtual void OpenFolder(string absolutePath);
    public abstract virtual void CloseFolder(string absolutePath);
    public abstract virtual Task`1<SccItemStatus> GetSccStatusAsync(string absolutePath, CancellationToken cancellationToken);
}
public interface Microsoft.VisualStudio.Shell.SccIntegration.IVsSccFolderProvider {
    public string RootFolder { get; }
    public abstract virtual string get_RootFolder();
    public abstract virtual Task`1<SccItemStatus> GetSccStatusAsync(string absolutePath, CancellationToken cancellationToken);
}
public interface Microsoft.VisualStudio.Shell.SccIntegration.IVsSccFolderProviderBinder {
    public abstract virtual Task`1<IEnumerable`1<IVsSccFolderProvider>> BindAsync(string rootFolder, CancellationToken cancellationToken);
    [CompilerGeneratedAttribute]
public abstract virtual void add_SccBindingsChanged(EventHandler`1<SccBindingChangedEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_SccBindingsChanged(EventHandler`1<SccBindingChangedEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_SccStatusChanged(EventHandler`1<SccStatusChangedEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_SccStatusChanged(EventHandler`1<SccStatusChangedEventArgs> value);
}
public class Microsoft.VisualStudio.Shell.SccIntegration.SccBindingChangedEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
private IReadOnlyCollection`1<string> <ChangedBindings>k__BackingField;
    public IReadOnlyCollection`1<string> ChangedBindings { get; }
    public SccBindingChangedEventArgs(IReadOnlyCollection`1<string> changedBindings);
    [CompilerGeneratedAttribute]
public IReadOnlyCollection`1<string> get_ChangedBindings();
}
public class Microsoft.VisualStudio.Shell.SccIntegration.SccItemStatus : ValueType {
    [CompilerGeneratedAttribute]
private __SccStatus <Status>k__BackingField;
    [CompilerGeneratedAttribute]
private VsStateIcon <StateIcon>k__BackingField;
    public __SccStatus Status { get; }
    public VsStateIcon StateIcon { get; }
    public SccItemStatus(__SccStatus status, VsStateIcon stateIcon);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public __SccStatus get_Status();
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public VsStateIcon get_StateIcon();
}
public class Microsoft.VisualStudio.Shell.SccIntegration.SccStatusChangedEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
private string <ChangeRoot>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyCollection`1<string> <ChangedItems>k__BackingField;
    public string ChangeRoot { get; }
    public IReadOnlyCollection`1<string> ChangedItems { get; }
    public SccStatusChangedEventArgs(string changeRoot, IReadOnlyCollection`1<string> changedItems);
    [CompilerGeneratedAttribute]
public string get_ChangeRoot();
    [CompilerGeneratedAttribute]
public IReadOnlyCollection`1<string> get_ChangedItems();
}
public class Microsoft.VisualStudio.Shell.ServiceProgressData : object {
    [CompilerGeneratedAttribute]
private string <WaitMessage>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ProgressText>k__BackingField;
    [CompilerGeneratedAttribute]
private int <CurrentStep>k__BackingField;
    [CompilerGeneratedAttribute]
private int <TotalSteps>k__BackingField;
    public string WaitMessage { get; }
    public string ProgressText { get; }
    public int CurrentStep { get; }
    public int TotalSteps { get; }
    public ServiceProgressData(string waitMessage, string progressText);
    public ServiceProgressData(string waitMessage, string progressText, int currentStep, int totalSteps);
    [CompilerGeneratedAttribute]
public string get_WaitMessage();
    [CompilerGeneratedAttribute]
public string get_ProgressText();
    [CompilerGeneratedAttribute]
public int get_CurrentStep();
    [CompilerGeneratedAttribute]
public int get_TotalSteps();
}
[ComVisibleAttribute("True")]
public class Microsoft.VisualStudio.Shell.ServiceProvider : object {
    internal static TraceSwitch TRACESERVICE;
    private IServiceProvider serviceProvider;
    private bool defaultServices;
    private static ServiceProvider globalProvider;
    public static ServiceProvider GlobalProvider { get; }
    public ServiceProvider(IServiceProvider sp);
    public ServiceProvider(IServiceProvider sp, bool defaultServices);
    private static ServiceProvider();
    public sealed virtual void Dispose();
    public sealed virtual object GetService(Type serviceType);
    public object GetService(Type serviceType, bool setShellErrorInfo);
    public int QueryService(Type serviceType, Object& service);
    private int QueryService(Type serviceType, bool setShellErrorInfo, Object& service);
    public object GetService(Guid guid);
    public int QueryService(Guid guid, Object& service);
    private int QueryService(Guid guid, Type serviceType, Object& service);
    private int QueryService(Guid guid, Type serviceType, bool setShellErrorInfo, Object& service);
    internal TInterfaceType GetService(Type serviceType);
    internal TInterfaceType TryGetService(Type serviceType);
    private sealed virtual override void Microsoft.VisualStudio.OLE.Interop.IObjectWithSite.GetSite(Guid& riid, IntPtr& ppv);
    private sealed virtual override void Microsoft.VisualStudio.OLE.Interop.IObjectWithSite.SetSite(object pUnkSite);
    internal static void SetGlobalProvider(ServiceProvider sp);
    private static bool IsNullOrUnsited(ServiceProvider sp);
    public static ServiceProvider get_GlobalProvider();
    [NullableContextAttribute("1")]
public static Task`1<object> GetGlobalServiceAsync(Type serviceType);
    [NullableContextAttribute("1")]
public static Task`1<object> GetGlobalServiceAsync(Type serviceType, bool swallowExceptions);
    [NullableContextAttribute("1")]
public static Task`1<TInterface> GetGlobalServiceAsync();
    [NullableContextAttribute("1")]
public static Task`1<TInterface> GetGlobalServiceAsync(bool throwOnFailure);
    [NullableContextAttribute("1")]
public static Task`1<TInterface> GetGlobalServiceAsync(CancellationToken cancellationToken);
    [NullableContextAttribute("1")]
public static Task`1<TInterface> GetGlobalServiceAsync(bool throwOnFailure, CancellationToken cancellationToken);
    private static InvalidOperationException MissingInterface(string missingInterface);
    public static ServiceProvider CreateFromSetSite(IServiceProvider sp);
}
public class Microsoft.VisualStudio.Shell.Services.BulletinHandler : MulticastDelegate {
    public BulletinHandler(object object, IntPtr method);
    public virtual void Invoke(object bulletin);
    public virtual IAsyncResult BeginInvoke(object bulletin, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
[GuidAttribute("68852308-3589-46F9-88B6-594150BBF562")]
public interface Microsoft.VisualStudio.Shell.Services.IProjectItemDesignerTypeUpdateService {
    public abstract virtual Task SetProjectItemDesignerTypeAsync(string projectItemPath, string designerType);
    public abstract virtual Task SetProjectItemsDesignerTypeAsync(IEnumerable`1<KeyValuePair`2<string, string>> itemPathAndDesignerTypes);
}
public interface Microsoft.VisualStudio.Shell.Services.IVsPublishSubscribeService {
    public abstract virtual void Publish(object bulletin);
    public abstract virtual void Publish(Type bulletinType, object bulletin);
    public abstract virtual void Subscribe(Type bulletinType, BulletinHandler handler);
    public abstract virtual void Unsubscribe(Type bulletinType, BulletinHandler handler);
}
[GuidAttribute("612585EF-D13C-44CE-A7B7-96FE3F3673BF")]
public interface Microsoft.VisualStudio.Shell.Services.SVsPublishSubscribeService {
}
[MetadataAttributeAttribute]
[AttributeUsageAttribute("452")]
public class Microsoft.VisualStudio.Shell.SolutionTreeFilterProviderAttribute : ExportAttribute {
    [CompilerGeneratedAttribute]
private string <FilterCommandGroup>k__BackingField;
    [CompilerGeneratedAttribute]
private UInt32 <FilterCommandID>k__BackingField;
    public string FilterCommandGroup { get; private set; }
    public UInt32 FilterCommandID { get; private set; }
    public SolutionTreeFilterProviderAttribute(string filterCommandGroup, UInt32 filterCommandID);
    [CompilerGeneratedAttribute]
public string get_FilterCommandGroup();
    [CompilerGeneratedAttribute]
private void set_FilterCommandGroup(string value);
    [CompilerGeneratedAttribute]
public UInt32 get_FilterCommandID();
    [CompilerGeneratedAttribute]
private void set_FilterCommandID(UInt32 value);
}
public class Microsoft.VisualStudio.Shell.StatefulReadOnlyList`2 : ValueType {
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<TItem> <List>k__BackingField;
    [CompilerGeneratedAttribute]
private TState <State>k__BackingField;
    public IReadOnlyList`1<TItem> List { get; }
    public TState State { get; }
    public StatefulReadOnlyList`2(IReadOnlyList`1<TItem> list, TState state);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public IReadOnlyList`1<TItem> get_List();
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public TState get_State();
}
[GuidAttribute("a9e9d599-759a-4661-91f6-c69ce52fbc64")]
public interface Microsoft.VisualStudio.Shell.SVsProjectLocalSecrets {
}
[GuidAttribute("9065BCEB-BD16-471C-A60B-863DD1E7FFA8")]
public interface Microsoft.VisualStudio.Shell.SVsSccDisplayInformationService {
}
public interface Microsoft.VisualStudio.Shell.SVsServiceProvider {
}
[GuidAttribute("084BAB35-B0D7-4B4D-8AAF-DBE52D4BBA90")]
public interface Microsoft.VisualStudio.Shell.SVsToolboxItemDiscoveryRegistrar {
}
public class Microsoft.VisualStudio.Shell.TableControl.ColumnHashSetFilter : object {
    public ITableColumnDefinition Column;
    private ITableColumnDefinition2 _column2;
    private HashSet`1<string> _excluded;
    public IEqualityComparer`1<string> Comparer { get; }
    public IEnumerable`1<string> Excluded { get; }
    public int ExcludedCount { get; }
    public ColumnHashSetFilter(ITableColumnDefinition column, IEnumerable`1<string> excluded);
    public ColumnHashSetFilter(ITableColumnDefinition column, String[] excluded);
    private ColumnHashSetFilter(ITableColumnDefinition column, IEnumerable`1<string> excluded, string additionalItem);
    public ColumnHashSetFilter CloneAndAdd(string newItem);
    public ColumnHashSetFilter CloneAndRemove(string removedItem);
    public IEqualityComparer`1<string> get_Comparer();
    public IEnumerable`1<string> get_Excluded();
    public int get_ExcludedCount();
    public bool ExcludedContains(string value);
    public sealed virtual bool Match(ITableEntryHandle entry);
}
public class Microsoft.VisualStudio.Shell.TableControl.ColumnState : object {
    public string Name;
    public bool IsVisible;
    public double Width;
    public int SortPriority;
    public bool DescendingSort;
    public ColumnState(string name, bool isVisible, double width, int sortPriority, bool descendingSort);
}
public class Microsoft.VisualStudio.Shell.TableControl.ColumnState2 : ColumnState {
    public int GroupingPriority;
    public ColumnState2(string name, bool isVisible, double width, int sortPriority, bool descendingSort, int groupingPriority);
}
[MetadataAttributeAttribute]
[AttributeUsageAttribute("452")]
public class Microsoft.VisualStudio.Shell.TableControl.DataSourceAttribute : Attribute {
    private string _dataSources;
    public string DataSources { get; }
    public DataSourceAttribute(string dataSources);
    public string get_DataSources();
}
[MetadataAttributeAttribute]
[AttributeUsageAttribute("452")]
public class Microsoft.VisualStudio.Shell.TableControl.DataSourceTypeAttribute : Attribute {
    private string _dataSourceTypes;
    [DefaultValueAttribute("")]
public string DataSourceTypes { get; }
    public DataSourceTypeAttribute(string dataSourceTypes);
    public string get_DataSourceTypes();
}
public abstract class Microsoft.VisualStudio.Shell.TableControl.EntriesChangedEventArgs : EventArgs {
    public int VersionNumber;
    public IReadOnlyCollection`1<ITableEntryHandle> AllEntries { get; }
    public IReadOnlyCollection`1<ITableEntryHandle> FilteredAndSortedEntries { get; }
    protected EntriesChangedEventArgs(int versionNumber);
    public abstract virtual IReadOnlyCollection`1<ITableEntryHandle> get_AllEntries();
    public abstract virtual IReadOnlyCollection`1<ITableEntryHandle> get_FilteredAndSortedEntries();
}
public class Microsoft.VisualStudio.Shell.TableControl.FiltersChangedEventArgs : EventArgs {
    public string Key;
    public IEntryFilter OldFilter;
    public IEntryFilter NewFilter;
    public FiltersChangedEventArgs(string key, IEntryFilter oldFilter, IEntryFilter newFilter);
}
[MetadataAttributeAttribute]
[AttributeUsageAttribute("452")]
public class Microsoft.VisualStudio.Shell.TableControl.GroupColumnsAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <Columns>k__BackingField;
    public string Columns { get; }
    public GroupColumnsAttribute(string columns);
    [CompilerGeneratedAttribute]
public string get_Columns();
}
public interface Microsoft.VisualStudio.Shell.TableControl.IDefaultColumnGroup {
}
public interface Microsoft.VisualStudio.Shell.TableControl.IEntryBucket {
    public bool IsExpandedByDefault { get; }
    public bool PersistExpansionState { get; }
    public abstract virtual bool TryCreateImageContent(ImageMoniker& content);
    public abstract virtual bool TryCreateStringContent(String& content);
    public abstract virtual bool TryCreateColumnContent(FrameworkElement& content);
    public abstract virtual bool TryCreateToolTip(Object& toolTip);
    public abstract virtual bool get_IsExpandedByDefault();
    public abstract virtual bool get_PersistExpansionState();
}
public interface Microsoft.VisualStudio.Shell.TableControl.IEntryBucket2 {
    public string Identifier { get; }
    public string SourceTypeIdentifier { get; }
    public bool ShowCount { get; public set; }
    public abstract virtual IEnumerable`1<IEntryBucket> Split();
    public abstract virtual IEntryBucket Merge(IEntryBucket child);
    public abstract virtual string get_Identifier();
    public abstract virtual string get_SourceTypeIdentifier();
    public abstract virtual bool get_ShowCount();
    public abstract virtual void set_ShowCount(bool value);
    public abstract virtual bool TryGetValue(string key, Object& content);
}
public interface Microsoft.VisualStudio.Shell.TableControl.IEntryFilter {
    public abstract virtual bool Match(ITableEntryHandle entry);
}
public interface Microsoft.VisualStudio.Shell.TableControl.ISinkToTableControlService {
    public abstract virtual bool TryGetTableControl(ITableDataSink sink, IWpfTableControl4& tableControl);
}
public interface Microsoft.VisualStudio.Shell.TableControl.ITableColumnDefinition {
    public string Name { get; }
    public bool IsFilterable { get; }
    public StringComparer Comparer { get; }
    public bool IsSortable { get; }
    public bool DefaultVisible { get; }
    public bool IsHideable { get; }
    public bool IsResizable { get; }
    public bool IsMovable { get; }
    public bool IsCopyable { get; }
    public IEnumerable`1<string> FilterPresets { get; }
    public string DisplayName { get; }
    public string HeaderName { get; }
    public ImageMoniker DisplayImage { get; }
    public double MinWidth { get; }
    public double MaxWidth { get; }
    public GridLength ColumnDefinition { get; }
    public TextWrapping TextWrapping { get; }
    public abstract virtual string get_Name();
    public abstract virtual bool TryCreateImageContent(ITableEntryHandle entry, bool singleColumnView, ImageMoniker& content);
    public abstract virtual bool TryCreateStringContent(ITableEntryHandle entry, bool truncatedText, bool singleColumnView, String& content);
    public abstract virtual bool TryCreateColumnContent(ITableEntryHandle entry, bool singleColumnView, FrameworkElement& content);
    public abstract virtual bool TryCreateToolTip(ITableEntryHandle entry, Object& toolTip);
    public abstract virtual int CompareContent(ITableEntryHandle leftEntry, ITableEntryHandle rightEntry);
    public abstract virtual IEntryBucket CreateBucketForEntry(ITableEntryHandle entry);
    public abstract virtual bool get_IsFilterable();
    public abstract virtual StringComparer get_Comparer();
    public abstract virtual bool get_IsSortable();
    public abstract virtual bool get_DefaultVisible();
    public abstract virtual bool get_IsHideable();
    public abstract virtual bool get_IsResizable();
    public abstract virtual bool get_IsMovable();
    public abstract virtual bool get_IsCopyable();
    public abstract virtual IEnumerable`1<string> get_FilterPresets();
    public abstract virtual string get_DisplayName();
    public abstract virtual string get_HeaderName();
    public abstract virtual ImageMoniker get_DisplayImage();
    public abstract virtual double get_MinWidth();
    public abstract virtual double get_MaxWidth();
    public abstract virtual GridLength get_ColumnDefinition();
    public abstract virtual TextWrapping get_TextWrapping();
}
public interface Microsoft.VisualStudio.Shell.TableControl.ITableColumnDefinition2 {
    public double DefaultWidth { get; }
    public abstract virtual bool TryGetFilterItems(ITableEntryHandle entry, IEnumerable`1& filterItems);
    public abstract virtual double get_DefaultWidth();
}
public interface Microsoft.VisualStudio.Shell.TableControl.ITableColumnDefinitionManager {
    public abstract virtual ITableColumnDefinition GetColumnDefinition(string columnName);
    public abstract virtual bool AddColumnDefinition(ITableColumnDefinition newDefinition);
    public abstract virtual bool RemoveColumnDefinition(string definitionToRemove);
}
public interface Microsoft.VisualStudio.Shell.TableControl.ITableControlEventProcessor {
    public abstract virtual void PreprocessMouseLeftButtonDown(ITableEntryHandle entry, MouseButtonEventArgs e);
    public abstract virtual void PostprocessMouseLeftButtonDown(ITableEntryHandle entry, MouseButtonEventArgs e);
    public abstract virtual void PreprocessMouseRightButtonDown(ITableEntryHandle entry, MouseButtonEventArgs e);
    public abstract virtual void PostprocessMouseRightButtonDown(ITableEntryHandle entry, MouseButtonEventArgs e);
    public abstract virtual void PreprocessMouseLeftButtonUp(ITableEntryHandle entry, MouseButtonEventArgs e);
    public abstract virtual void PostprocessMouseLeftButtonUp(ITableEntryHandle entry, MouseButtonEventArgs e);
    public abstract virtual void PreprocessMouseRightButtonUp(ITableEntryHandle entry, MouseButtonEventArgs e);
    public abstract virtual void PostprocessMouseRightButtonUp(ITableEntryHandle entry, MouseButtonEventArgs e);
    public abstract virtual void PreprocessMouseUp(ITableEntryHandle entry, MouseButtonEventArgs e);
    public abstract virtual void PostprocessMouseUp(ITableEntryHandle entry, MouseButtonEventArgs e);
    public abstract virtual void PreprocessMouseDown(ITableEntryHandle entry, MouseButtonEventArgs e);
    public abstract virtual void PostprocessMouseDown(ITableEntryHandle entry, MouseButtonEventArgs e);
    public abstract virtual void PreprocessMouseMove(ITableEntryHandle entry, MouseEventArgs e);
    public abstract virtual void PostprocessMouseMove(ITableEntryHandle entry, MouseEventArgs e);
    public abstract virtual void PreprocessMouseWheel(ITableEntryHandle entry, MouseWheelEventArgs e);
    public abstract virtual void PostprocessMouseWheel(ITableEntryHandle entry, MouseWheelEventArgs e);
    public abstract virtual void PreprocessMouseEnter(ITableEntryHandle entry, MouseEventArgs e);
    public abstract virtual void PostprocessMouseEnter(ITableEntryHandle entry, MouseEventArgs e);
    public abstract virtual void PreprocessMouseLeave(ITableEntryHandle entry, MouseEventArgs e);
    public abstract virtual void PostprocessMouseLeave(ITableEntryHandle entry, MouseEventArgs e);
    public abstract virtual void PreprocessDragLeave(ITableEntryHandle entry, DragEventArgs e);
    public abstract virtual void PostprocessDragLeave(ITableEntryHandle entry, DragEventArgs e);
    public abstract virtual void PreprocessDragOver(ITableEntryHandle entry, DragEventArgs e);
    public abstract virtual void PostprocessDragOver(ITableEntryHandle entry, DragEventArgs e);
    public abstract virtual void PreprocessDragEnter(ITableEntryHandle entry, DragEventArgs e);
    public abstract virtual void PostprocessDragEnter(ITableEntryHandle entry, DragEventArgs e);
    public abstract virtual void PreprocessDrop(ITableEntryHandle entry, DragEventArgs e);
    public abstract virtual void PostprocessDrop(ITableEntryHandle entry, DragEventArgs e);
    public abstract virtual void PreprocessQueryContinueDrag(ITableEntryHandle entry, QueryContinueDragEventArgs e);
    public abstract virtual void PostprocessQueryContinueDrag(ITableEntryHandle entry, QueryContinueDragEventArgs e);
    public abstract virtual void PreprocessGiveFeedback(ITableEntryHandle entry, GiveFeedbackEventArgs e);
    public abstract virtual void PostprocessGiveFeedback(ITableEntryHandle entry, GiveFeedbackEventArgs e);
    public abstract virtual void PreprocessNavigate(ITableEntryHandle entry, TableEntryNavigateEventArgs e);
    public abstract virtual void PostprocessNavigate(ITableEntryHandle entry, TableEntryNavigateEventArgs e);
    public abstract virtual void PreprocessNavigateToHelp(ITableEntryHandle entry, TableEntryEventArgs e);
    public abstract virtual void PostprocessNavigateToHelp(ITableEntryHandle entry, TableEntryEventArgs e);
    public abstract virtual void PreprocessSelectionChanged(TableSelectionChangedEventArgs e);
    public abstract virtual void PostprocessSelectionChanged(TableSelectionChangedEventArgs e);
    public abstract virtual void PreviewKeyDown(KeyEventArgs args);
    public abstract virtual void KeyDown(KeyEventArgs args);
    public abstract virtual void PreviewKeyUp(KeyEventArgs args);
    public abstract virtual void KeyUp(KeyEventArgs args);
}
public interface Microsoft.VisualStudio.Shell.TableControl.ITableControlEventProcessorProvider {
    public abstract virtual ITableControlEventProcessor GetAssociatedEventProcessor(IWpfTableControl tableControl);
}
public interface Microsoft.VisualStudio.Shell.TableControl.ITableEntryHandle {
    public bool IsSelected { get; public set; }
    public bool AreDetailsShown { get; public set; }
    public bool CanShowDetails { get; }
    public bool HasVerticalContent { get; }
    public bool IsVisible { get; }
    public abstract virtual bool TryGetEntry(ITableEntry& tableEntry);
    public abstract virtual bool TryGetSnapshot(ITableEntriesSnapshot& snapshot, Int32& index);
    public abstract virtual bool TryGetFactory(ITableEntriesSnapshotFactory& factory, Int32& versionNumber, Int32& index);
    public abstract virtual ITableEntriesSnapshot PinSnapshot();
    public abstract virtual void UnpinSnapshot();
    public abstract virtual void EnsureVisible();
    public abstract virtual bool get_IsSelected();
    public abstract virtual void set_IsSelected(bool value);
    public abstract virtual bool get_AreDetailsShown();
    public abstract virtual void set_AreDetailsShown(bool value);
    public abstract virtual bool get_CanShowDetails();
    public abstract virtual bool get_HasVerticalContent();
    public abstract virtual bool NavigateTo(bool isPreview);
    public abstract virtual bool NavigateToHelp();
    public abstract virtual bool get_IsVisible();
}
public interface Microsoft.VisualStudio.Shell.TableControl.ITableEntryHandle2 {
    public abstract virtual bool NavigateTo(bool isPreview, bool shouldActivate);
}
public interface Microsoft.VisualStudio.Shell.TableControl.IWpfTableControl {
    public ITableManager Manager { get; }
    public FrameworkElement Control { get; }
    public bool AutoSubscribe { get; }
    public Comparison`1<ITableEntryHandle> SortFunction { get; public set; }
    public IReadOnlyList`1<ColumnState> ColumnStates { get; }
    public SelectionMode SelectionMode { get; public set; }
    public ITableColumnDefinitionManager ColumnDefinitionManager { get; }
    public IEnumerable`1<ITableEntryHandle> Entries { get; }
    public IEnumerable`1<ITableEntryHandle> SelectedEntries { get; public set; }
    public ITableEntryHandle SelectedEntry { get; }
    public ITableEntryHandle SelectedOrFirstEntry { get; }
    public abstract virtual ITableManager get_Manager();
    public abstract virtual FrameworkElement get_Control();
    public abstract virtual void SubscribeToDataSource(ITableDataSource source);
    public abstract virtual bool UnsubscribeFromDataSource(ITableDataSource source);
    public abstract virtual bool get_AutoSubscribe();
    public abstract virtual IEntryFilter SetFilter(string key, IEntryFilter newFilter);
    public abstract virtual IEntryFilter GetFilter(string key);
    [CompilerGeneratedAttribute]
public abstract virtual void add_FiltersChanged(EventHandler`1<FiltersChangedEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_FiltersChanged(EventHandler`1<FiltersChangedEventArgs> value);
    public abstract virtual Comparison`1<ITableEntryHandle> get_SortFunction();
    public abstract virtual void set_SortFunction(Comparison`1<ITableEntryHandle> value);
    public abstract virtual IReadOnlyList`1<ColumnState> get_ColumnStates();
    public abstract virtual SelectionMode get_SelectionMode();
    public abstract virtual void set_SelectionMode(SelectionMode value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_PreEntriesChanged(EventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_PreEntriesChanged(EventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_EntriesChanged(EventHandler`1<EntriesChangedEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_EntriesChanged(EventHandler`1<EntriesChangedEventArgs> value);
    public abstract virtual ITableColumnDefinitionManager get_ColumnDefinitionManager();
    public abstract virtual IEnumerable`1<ITableEntryHandle> get_Entries();
    public abstract virtual IEnumerable`1<ITableEntryHandle> get_SelectedEntries();
    public abstract virtual void set_SelectedEntries(IEnumerable`1<ITableEntryHandle> value);
    public abstract virtual ITableEntryHandle get_SelectedEntry();
    public abstract virtual ITableEntryHandle get_SelectedOrFirstEntry();
    public abstract virtual void SelectAll();
    public abstract virtual void UnselectAll();
    public abstract virtual void RefreshUI();
    public abstract virtual Task`1<EntriesChangedEventArgs> ForceUpdateAsync();
}
public interface Microsoft.VisualStudio.Shell.TableControl.IWpfTableControl2 {
    public bool IsDataStable { get; }
    public TableEntryNavigationBehavior NavigationBehavior { get; public set; }
    public bool KeepSelectionInView { get; public set; }
    public bool ShowGroupingLine { get; public set; }
    public TimeSpan RaiseDataUnstableChangeDelay { get; public set; }
    public Brush SelectedItemActiveBackground { get; public set; }
    public Brush SelectedItemActiveForeground { get; public set; }
    public Brush SelectedItemInactiveBackground { get; public set; }
    public Brush SelectedItemInactiveForeground { get; public set; }
    public abstract virtual bool get_IsDataStable();
    public abstract virtual TableEntryNavigationBehavior get_NavigationBehavior();
    public abstract virtual void set_NavigationBehavior(TableEntryNavigationBehavior value);
    public abstract virtual bool get_KeepSelectionInView();
    public abstract virtual void set_KeepSelectionInView(bool value);
    public abstract virtual bool get_ShowGroupingLine();
    public abstract virtual void set_ShowGroupingLine(bool value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_DataStabilityChanged(EventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_DataStabilityChanged(EventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_GroupingsChanged(EventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_GroupingsChanged(EventHandler value);
    public abstract virtual TimeSpan get_RaiseDataUnstableChangeDelay();
    public abstract virtual void set_RaiseDataUnstableChangeDelay(TimeSpan value);
    public abstract virtual IEnumerable`1<Tuple`2<string, IEntryFilter>> GetAllFilters();
    public abstract virtual void SetColumnStates(IEnumerable`1<ColumnState> states);
    public abstract virtual Brush get_SelectedItemActiveBackground();
    public abstract virtual void set_SelectedItemActiveBackground(Brush value);
    public abstract virtual Brush get_SelectedItemActiveForeground();
    public abstract virtual void set_SelectedItemActiveForeground(Brush value);
    public abstract virtual Brush get_SelectedItemInactiveBackground();
    public abstract virtual void set_SelectedItemInactiveBackground(Brush value);
    public abstract virtual Brush get_SelectedItemInactiveForeground();
    public abstract virtual void set_SelectedItemInactiveForeground(Brush value);
}
public interface Microsoft.VisualStudio.Shell.TableControl.IWpfTableControl3 {
    public Brush TableControlBackground { get; public set; }
    public Brush TableControlForeground { get; public set; }
    public abstract virtual Brush get_TableControlBackground();
    public abstract virtual void set_TableControlBackground(Brush value);
    public abstract virtual Brush get_TableControlForeground();
    public abstract virtual void set_TableControlForeground(Brush value);
}
public interface Microsoft.VisualStudio.Shell.TableControl.IWpfTableControl4 {
    public bool DoColumnsAutoAdjust { get; public set; }
    public bool DoSortingAndGroupingWhileUnstable { get; public set; }
    public TimeSpan UpdateDelayWhileStable { get; public set; }
    public TimeSpan UpdateDelayWhileUnstable { get; public set; }
    public abstract virtual bool get_DoColumnsAutoAdjust();
    public abstract virtual void set_DoColumnsAutoAdjust(bool value);
    public abstract virtual bool get_DoSortingAndGroupingWhileUnstable();
    public abstract virtual void set_DoSortingAndGroupingWhileUnstable(bool value);
    public abstract virtual TimeSpan get_UpdateDelayWhileStable();
    public abstract virtual void set_UpdateDelayWhileStable(TimeSpan value);
    public abstract virtual TimeSpan get_UpdateDelayWhileUnstable();
    public abstract virtual void set_UpdateDelayWhileUnstable(TimeSpan value);
}
public interface Microsoft.VisualStudio.Shell.TableControl.IWpfTableEntriesSnapshot {
    public abstract virtual bool TryCreateImageContent(int index, string columnName, bool singleColumnView, ImageMoniker& content);
    public abstract virtual bool TryCreateStringContent(int index, string columnName, bool truncatedText, bool singleColumnView, String& content);
    public abstract virtual bool TryCreateColumnContent(int index, string columnName, bool singleColumnView, FrameworkElement& content);
    public abstract virtual bool CanCreateDetailsContent(int index);
    public abstract virtual bool TryCreateDetailsContent(int index, FrameworkElement& expandedContent);
    public abstract virtual bool TryCreateDetailsStringContent(int index, String& content);
    public abstract virtual bool TryCreateToolTip(int index, string columnName, Object& toolTip);
}
public interface Microsoft.VisualStudio.Shell.TableControl.IWpfTableEntry {
    public abstract virtual bool TryCreateImageContent(string columnName, bool singleColumnView, ImageMoniker& content);
    public abstract virtual bool TryCreateStringContent(string columnName, bool truncatedText, bool singleColumnView, String& content);
    public abstract virtual bool TryCreateColumnContent(string columnName, bool singleColumnView, FrameworkElement& content);
    public abstract virtual bool CanCreateDetailsContent();
    public abstract virtual bool TryCreateDetailsContent(FrameworkElement& expandedContent);
    public abstract virtual bool TryCreateDetailsStringContent(String& content);
    public abstract virtual bool TryCreateToolTip(string columnName, Object& toolTip);
}
[MetadataAttributeAttribute]
[AttributeUsageAttribute("452")]
public class Microsoft.VisualStudio.Shell.TableControl.ManagerTypeAttribute : Attribute {
    private string _managerTypes;
    public string ManagerIdentifiers { get; }
    public ManagerTypeAttribute(string managerTypes);
    public string get_ManagerIdentifiers();
}
public static class Microsoft.VisualStudio.Shell.TableControl.StandardTableColumnDefinitions : object {
    public static string Line;
    public static string Column;
    public static string DocumentName;
    public static string Text;
    public static string DetailsExpander;
    public static string ErrorCode;
    public static string ErrorCategory;
    public static string ErrorSource;
    public static string BuildTool;
    public static string ErrorSeverity;
    public static string Priority;
    public static string ProjectName;
    public static string ProjectRank;
    public static string ErrorRank;
    public static string SuppressionState;
    public static string ItemOrigin;
    public static string Repository;
    public static string Branch;
}
public static class Microsoft.VisualStudio.Shell.TableControl.StandardTableColumnDefinitions2 : object {
    public static string Path;
    public static string Definition;
    public static string NameSpace;
    public static string LineText;
    public static string Extension;
    public static string SymbolKind;
}
public static class Microsoft.VisualStudio.Shell.TableControl.StandardTableControlEventProcessors : object {
    public static string Default;
    public static string ErrorList;
}
public static class Microsoft.VisualStudio.Shell.TableControl.StandardTableDataSources2 : object {
    public static string FindAllReferencesTableDataSource;
    public static string BucketTableDataSource;
}
public static class Microsoft.VisualStudio.Shell.TableControl.StandardTableKeyNames2 : object {
    public static string Path;
    public static string NameSpace;
    public static string LineText;
    public static string TextInlines;
    public static string Definition;
    public static string DefinitionIcon;
    public static string ProjectNames;
    public static string HelpText;
    public static string DisplayPath;
    public static string SymbolKind;
}
public static class Microsoft.VisualStudio.Shell.TableControl.StandardTables2 : object {
    public static string FindAllReferences;
}
public class Microsoft.VisualStudio.Shell.TableControl.StringEntryBucket : object {
    public string Name;
    public object ToolTip;
    public StringComparer Comparer;
    private int _hashCode;
    [CompilerGeneratedAttribute]
private bool <IsExpandedByDefault>k__BackingField;
    public bool IsExpandedByDefault { get; }
    public bool PersistExpansionState { get; }
    public StringEntryBucket(string name, object tooltip, StringComparer comparer, bool expandedByDefault);
    public virtual bool TryCreateImageContent(ImageMoniker& content);
    public virtual bool TryCreateStringContent(String& content);
    public virtual bool TryCreateColumnContent(FrameworkElement& content);
    public virtual bool TryCreateToolTip(Object& toolTip);
    [CompilerGeneratedAttribute]
public virtual bool get_IsExpandedByDefault();
    public virtual bool get_PersistExpansionState();
    public sealed virtual int CompareTo(IEntryBucket other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
[MetadataAttributeAttribute]
[AttributeUsageAttribute("452")]
public class Microsoft.VisualStudio.Shell.TableControl.TableColumnAttribute : Attribute {
    [CompilerGeneratedAttribute]
private bool <IsDominant>k__BackingField;
    public bool IsDominant { get; public set; }
    [CompilerGeneratedAttribute]
public bool get_IsDominant();
    [CompilerGeneratedAttribute]
public void set_IsDominant(bool value);
}
public class Microsoft.VisualStudio.Shell.TableControl.TableEntryEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
private bool <Handled>k__BackingField;
    public bool Handled { get; public set; }
    [CompilerGeneratedAttribute]
public bool get_Handled();
    [CompilerGeneratedAttribute]
public void set_Handled(bool value);
}
[ExtensionAttribute]
public static class Microsoft.VisualStudio.Shell.TableControl.TableEntryHandle2Helper : object {
    [ExtensionAttribute]
public static bool NavigateTo(ITableEntryHandle handle, bool isPreview, bool shouldActivate);
}
[ExtensionAttribute]
public static class Microsoft.VisualStudio.Shell.TableControl.TableEntryHandleExtensions : object {
    [ExtensionAttribute]
public static bool TryCreateImageContent(ITableEntryHandle entry, ITableColumnDefinition column, bool singleColumnView, ImageMoniker& content);
    [ExtensionAttribute]
public static bool TryCreateStringContent(ITableEntryHandle entry, ITableColumnDefinition column, bool truncatedText, bool singleColumnView, String& content);
    [ExtensionAttribute]
public static bool TryCreateColumnContent(ITableEntryHandle entry, ITableColumnDefinition column, bool singleColumnView, FrameworkElement& content);
    [ExtensionAttribute]
public static bool TryCreateToolTip(ITableEntryHandle entry, ITableColumnDefinition column, Object& toolTip);
}
public class Microsoft.VisualStudio.Shell.TableControl.TableEntryNavigateEventArgs : TableEntryEventArgs {
    [CompilerGeneratedAttribute]
private bool <IsPreview>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ShouldActivate>k__BackingField;
    public bool IsPreview { get; private set; }
    public bool ShouldActivate { get; }
    public TableEntryNavigateEventArgs(bool isPreview);
    public TableEntryNavigateEventArgs(bool isPreview, bool shouldActivate);
    [CompilerGeneratedAttribute]
public bool get_IsPreview();
    [CompilerGeneratedAttribute]
private void set_IsPreview(bool value);
    [CompilerGeneratedAttribute]
public bool get_ShouldActivate();
}
[FlagsAttribute]
public enum Microsoft.VisualStudio.Shell.TableControl.TableEntryNavigationBehavior : Enum {
    public int value__;
    public static TableEntryNavigationBehavior PreferPreview;
    public static TableEntryNavigationBehavior AcceptsSingleClick;
    public static TableEntryNavigationBehavior AcceptsDoubleClick;
    public static TableEntryNavigationBehavior AcceptsEnter;
    public static TableEntryNavigationBehavior AcceptsUpDownKeys;
}
public class Microsoft.VisualStudio.Shell.TableControl.TableSelectionChangedEventArgs : EventArgs {
    public SelectionChangedEventArgs SelectionChangedEventArgs;
    public IEnumerable`1<ITableEntryHandle> AddedEntries { get; }
    public IEnumerable`1<ITableEntryHandle> RemovedEntries { get; }
    public TableSelectionChangedEventArgs(SelectionChangedEventArgs e);
    public IEnumerable`1<ITableEntryHandle> get_AddedEntries();
    public IEnumerable`1<ITableEntryHandle> get_RemovedEntries();
    [IteratorStateMachineAttribute("Microsoft.VisualStudio.Shell.TableControl.TableSelectionChangedEventArgs/<Unwrap>d__6")]
private static IEnumerable`1<ITableEntryHandle> Unwrap(IList items);
}
public enum Microsoft.VisualStudio.Shell.TableManager.ErrorRank : Enum {
    public int value__;
    public static ErrorRank Lexical;
    public static ErrorRank Syntactic;
    public static ErrorRank Declaration;
    public static ErrorRank Semantic;
    public static ErrorRank Emit;
    public static ErrorRank PostBuild;
    public static ErrorRank Other;
}
[FlagsAttribute]
public enum Microsoft.VisualStudio.Shell.TableManager.ErrorSource : Enum {
    public int value__;
    public static ErrorSource Build;
    public static ErrorSource Other;
}
public interface Microsoft.VisualStudio.Shell.TableManager.ITableDataSink {
    public bool IsStable { get; public set; }
    public abstract virtual bool get_IsStable();
    public abstract virtual void set_IsStable(bool value);
    public abstract virtual void AddEntries(IReadOnlyList`1<ITableEntry> newEntries, bool removeAllEntries);
    public abstract virtual void RemoveEntries(IReadOnlyList`1<ITableEntry> oldEntries);
    public abstract virtual void ReplaceEntries(IReadOnlyList`1<ITableEntry> oldEntries, IReadOnlyList`1<ITableEntry> newEntries);
    public abstract virtual void RemoveAllEntries();
    public abstract virtual void AddSnapshot(ITableEntriesSnapshot newSnapshot, bool removeAllSnapshots);
    public abstract virtual void RemoveSnapshot(ITableEntriesSnapshot oldSnapshot);
    public abstract virtual void RemoveAllSnapshots();
    public abstract virtual void ReplaceSnapshot(ITableEntriesSnapshot oldSnapshot, ITableEntriesSnapshot newSnapshot);
    public abstract virtual void AddFactory(ITableEntriesSnapshotFactory newFactory, bool removeAllFactories);
    public abstract virtual void RemoveFactory(ITableEntriesSnapshotFactory oldFactory);
    public abstract virtual void ReplaceFactory(ITableEntriesSnapshotFactory oldFactory, ITableEntriesSnapshotFactory newFactory);
    public abstract virtual void FactorySnapshotChanged(ITableEntriesSnapshotFactory factory);
    public abstract virtual void RemoveAllFactories();
}
public interface Microsoft.VisualStudio.Shell.TableManager.ITableDataSource {
    public string SourceTypeIdentifier { get; }
    public string Identifier { get; }
    public string DisplayName { get; }
    public abstract virtual string get_SourceTypeIdentifier();
    public abstract virtual string get_Identifier();
    public abstract virtual string get_DisplayName();
    public abstract virtual IDisposable Subscribe(ITableDataSink sink);
}
public interface Microsoft.VisualStudio.Shell.TableManager.ITableEntriesSnapshot {
    public int Count { get; }
    public int VersionNumber { get; }
    public abstract virtual int get_Count();
    public abstract virtual int get_VersionNumber();
    public abstract virtual void StartCaching();
    public abstract virtual void StopCaching();
    public abstract virtual bool TryGetValue(int index, string keyName, Object& content);
    public abstract virtual int IndexOf(int currentIndex, ITableEntriesSnapshot newSnapshot);
}
public interface Microsoft.VisualStudio.Shell.TableManager.ITableEntriesSnapshotFactory {
    public int CurrentVersionNumber { get; }
    public abstract virtual ITableEntriesSnapshot GetCurrentSnapshot();
    public abstract virtual int get_CurrentVersionNumber();
    public abstract virtual ITableEntriesSnapshot GetSnapshot(int versionNumber);
}
public interface Microsoft.VisualStudio.Shell.TableManager.ITableEntry {
    public object Identity { get; }
    public abstract virtual bool TryGetValue(string keyName, Object& content);
    public abstract virtual bool TrySetValue(string keyName, object content);
    public abstract virtual bool CanSetValue(string keyName);
    public abstract virtual object get_Identity();
}
public interface Microsoft.VisualStudio.Shell.TableManager.ITableManager {
    public string Identifier { get; }
    public IReadOnlyList`1<ITableDataSource> Sources { get; }
    public abstract virtual string get_Identifier();
    public abstract virtual bool AddSource(ITableDataSource source, IReadOnlyCollection`1<string> columns);
    public abstract virtual bool AddSource(ITableDataSource source, String[] columns);
    public abstract virtual bool RemoveSource(ITableDataSource source);
    public abstract virtual IReadOnlyList`1<ITableDataSource> get_Sources();
    public abstract virtual IReadOnlyList`1<string> GetColumnsForSources(IEnumerable`1<ITableDataSource> sources);
    [CompilerGeneratedAttribute]
public abstract virtual void add_SourcesChanged(EventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_SourcesChanged(EventHandler value);
}
public interface Microsoft.VisualStudio.Shell.TableManager.ITableManagerProvider {
    public abstract virtual ITableManager GetTableManager(string identifier);
}
public enum Microsoft.VisualStudio.Shell.TableManager.ItemOrigin : Enum {
    public int value__;
    public static ItemOrigin Exact;
    public static ItemOrigin ExactMetadata;
    public static ItemOrigin Indexed;
    public static ItemOrigin IndexedInRepo;
    public static ItemOrigin IndexedInOrganization;
    public static ItemOrigin IndexedInThirdParty;
    public static ItemOrigin Other;
}
public static class Microsoft.VisualStudio.Shell.TableManager.StandardTableDataSources : object {
    public static string ErrorTableDataSource;
    public static string CommentTableDataSource;
    public static string ShortcutTableDataSource;
    public static string UserTableDataSource;
    public static string FindAddReferencesDataSource;
    public static string FindResultsDataSource;
    public static string AnyDataSource;
}
public static class Microsoft.VisualStudio.Shell.TableManager.StandardTableKeyNames : object {
    public static string Line;
    public static string Column;
    public static string DocumentName;
    public static string Text;
    public static string FullText;
    public static string DetailsExpander;
    public static string HasVerticalContent;
    public static string HelpKeyword;
    public static string HelpLink;
    public static string ErrorCategory;
    public static string ErrorSource;
    public static string BuildTool;
    public static string ErrorSeverity;
    public static string IsActiveContext;
    public static string Priority;
    public static string ProjectName;
    public static string ProjectGuid;
    public static string ImageIndex;
    public static string ErrorSeverityImage;
    public static string TaskCategory;
    public static string PriorityImage;
    public static string ErrorCode;
    public static string ErrorCodeToolTip;
    public static string ErrorRank;
    public static string OutputWindowMessageProvider;
    public static string OutputWindowMessageId;
    public static string SuppressionState;
    public static string Path;
    public static string NameSpace;
    public static string LineText;
    public static string TextInlines;
    public static string Definition;
    public static string DefinitionIcon;
    public static string ProjectGuids;
    public static string ProjectNames;
    public static string HelpText;
    public static string DisplayPath;
    public static string SymbolKind;
    public static string ItemOrigin;
    public static string Repository;
    public static string Branch;
    public static string PersistentSpan;
}
public static class Microsoft.VisualStudio.Shell.TableManager.StandardTables : object {
    public static string ErrorsTable;
    public static string TasksTable;
}
public enum Microsoft.VisualStudio.Shell.TableManager.SuppressionState : Enum {
    public int value__;
    public static SuppressionState Active;
    public static SuppressionState Suppressed;
    public static SuppressionState NotApplicable;
}
[FlagsAttribute]
public enum Microsoft.VisualStudio.Shell.TableManager.SymbolReferenceKinds : Enum {
    public int value__;
    public static SymbolReferenceKinds None;
    public static SymbolReferenceKinds Read;
    public static SymbolReferenceKinds Write;
    public static SymbolReferenceKinds Reference;
    public static SymbolReferenceKinds Name;
    public static SymbolReferenceKinds Qualified;
    public static SymbolReferenceKinds TypeArgument;
    public static SymbolReferenceKinds TypeConstraint;
    public static SymbolReferenceKinds BaseType;
    public static SymbolReferenceKinds Construct;
    public static SymbolReferenceKinds Import;
    public static SymbolReferenceKinds Declare;
    public static SymbolReferenceKinds AddressOf;
    public static SymbolReferenceKinds Other;
    public static SymbolReferenceKinds Unknown;
    public static SymbolReferenceKinds Destructor;
    public static SymbolReferenceKinds Inactive;
    public static SymbolReferenceKinds Comment;
    public static SymbolReferenceKinds String;
    public static SymbolReferenceKinds NotReference;
}
[ExtensionAttribute]
public static class Microsoft.VisualStudio.Shell.TableManager.TableEntryExtensions : object {
    [ExtensionAttribute]
public static bool TryGetValue(ITableEntry entry, string keyName, T& content);
    [ExtensionAttribute]
public static bool TryGetValue(ITableEntry entry, string keyName, T& content, T defaultValue);
    [ExtensionAttribute]
public static bool TryGetValue(ITableEntry entry, string keyName, T& content, Func`1<T> defaultValue);
}
public class Microsoft.VisualStudio.Shell.TaskSchedulingException : Exception {
    public static int VS_E_TASKSCHEDULERFAIL;
    public TaskSchedulingException(string message);
    [ObsoleteAttribute]
protected TaskSchedulingException(SerializationInfo info, StreamingContext context);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class Microsoft.VisualStudio.Shell.TelemetryExtensions : object {
    [ExtensionAttribute]
public static void PostCorrelatedFaultEvent(TelemetrySession session, TelemetryScope`1<OperationEvent> operation, string faultEventName, string faultDescription, Exception exceptionObject, Func`2<IFaultUtility, int> gatherEventDetails);
    [ExtensionAttribute]
public static void PostCorrelatedFaultEvent(TelemetrySession session, TelemetryScope`1<OperationEvent> operation, string faultEventName, string faultDescription, FaultSeverity faultSeverity, Exception exceptionObject, Func`2<IFaultUtility, int> gatherEventDetails);
}
public class Microsoft.VisualStudio.Shell.ThemeResourceKey : object {
    private Guid _category;
    private string _name;
    private ThemeResourceKeyType _keyType;
    public Guid Category { get; }
    public string Name { get; }
    public ThemeResourceKeyType KeyType { get; }
    public ThemeResourceKey(Guid category, string name, ThemeResourceKeyType keyType);
    public Guid get_Category();
    public string get_Name();
    public ThemeResourceKeyType get_KeyType();
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public virtual string ToString();
}
public enum Microsoft.VisualStudio.Shell.ThemeResourceKeyType : Enum {
    public int value__;
    public static ThemeResourceKeyType ForegroundColor;
    public static ThemeResourceKeyType BackgroundColor;
    public static ThemeResourceKeyType ForegroundBrush;
    public static ThemeResourceKeyType BackgroundBrush;
}
[ExtensionAttribute]
public static class Microsoft.VisualStudio.Shell.ThreadedWaitDialogHelper : object {
    [ExtensionAttribute]
public static IVsThreadedWaitDialog4 CreateInstance(IVsThreadedWaitDialogFactory factory);
    [ExtensionAttribute]
public static Session StartWaitDialog(IVsThreadedWaitDialogFactory dialogFactory, string waitCaption, ThreadedWaitDialogProgressData initialProgress, TimeSpan delayToShowDialog);
    [ExtensionAttribute]
public static bool EndWaitDialog(IVsThreadedWaitDialog2 dialog);
}
public class Microsoft.VisualStudio.Shell.ThreadedWaitDialogProgressData : object {
    [CompilerGeneratedAttribute]
private string <WaitMessage>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ProgressText>k__BackingField;
    [CompilerGeneratedAttribute]
private string <StatusBarText>k__BackingField;
    [CompilerGeneratedAttribute]
private int <CurrentStep>k__BackingField;
    [CompilerGeneratedAttribute]
private int <TotalSteps>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsCancelable>k__BackingField;
    public string WaitMessage { get; }
    public string ProgressText { get; }
    public string StatusBarText { get; }
    public int CurrentStep { get; }
    public int TotalSteps { get; }
    public bool IsCancelable { get; }
    public ThreadedWaitDialogProgressData(string waitMessage, string progressText, string statusBarText, bool isCancelable);
    public ThreadedWaitDialogProgressData(string waitMessage, string progressText, string statusBarText, bool isCancelable, int currentStep, int totalSteps);
    [CompilerGeneratedAttribute]
public string get_WaitMessage();
    [CompilerGeneratedAttribute]
public string get_ProgressText();
    [CompilerGeneratedAttribute]
public string get_StatusBarText();
    [CompilerGeneratedAttribute]
public int get_CurrentStep();
    [CompilerGeneratedAttribute]
public int get_TotalSteps();
    [CompilerGeneratedAttribute]
public bool get_IsCancelable();
    public ThreadedWaitDialogProgressData NextStep();
}
public abstract class Microsoft.VisualStudio.Shell.ThreadHelper : object {
    private static ThreadHelper _generic;
    private static JoinableTaskContext _joinableTaskContextCache;
    private static Dispatcher uiThreadDispatcher;
    public static ThreadHelper Generic { get; }
    public static JoinableTaskContext JoinableTaskContext { get; }
    public static JoinableTaskFactory JoinableTaskFactory { get; }
    private static Dispatcher DispatcherForUIThread { get; }
    public static ThreadHelper get_Generic();
    public static JoinableTaskContext get_JoinableTaskContext();
    public static JoinableTaskFactory get_JoinableTaskFactory();
    [ConditionalAttribute("DEBUG")]
private static void ValidateDispatcherSanity();
    internal static void SetUIThread();
    private static Dispatcher get_DispatcherForUIThread();
    protected abstract virtual IDisposable GetInvocationWrapper();
    private static IVsInvokerPrivate GetInvoker();
    public static bool CheckAccess();
    public static void ThrowIfOnUIThread(string callerMemberName);
    public static void ThrowIfNotOnUIThread(string callerMemberName);
    private static Exception WrapException(Exception inner);
    private void InvokeOnUIThread(InvokableBase invokable, bool fromInvokeAsync);
    [DebuggerStepThroughAttribute]
[ObsoleteAttribute("Use JoinableTaskFactory instead.")]
[EditorBrowsableAttribute("1")]
public void Invoke(Action action);
    [DebuggerStepThroughAttribute]
[ObsoleteAttribute("Use JoinableTaskFactory instead.")]
[EditorBrowsableAttribute("1")]
public TResult Invoke(Func`1<TResult> method);
    public void BeginInvoke(Action action);
    public void BeginInvoke(DispatcherPriority priority, Action action);
    [ObsoleteAttribute("Use JoinableTaskFactory instead.")]
[EditorBrowsableAttribute("1")]
public Task InvokeAsync(Action executeAction, Func`1<bool> onRpcCallFailed);
    [AsyncStateMachineAttribute("Microsoft.VisualStudio.Shell.ThreadHelper/<InvokeWithRpcAsync>d__25")]
[ObsoleteAttribute("Use JoinableTaskFactory instead.")]
[EditorBrowsableAttribute("1")]
public Task InvokeWithRpcAsync(Action executeAction, Func`1<bool> onRpcCallFailed, bool isTaskSchedulerRequest);
    private void InvokeInternal(Action action, bool fromInvokeAsync);
}
public enum Microsoft.VisualStudio.Shell.ToolboxItemDiscoveryContext : Enum {
    public int value__;
    public static ToolboxItemDiscoveryContext AutoAddingToToolbox;
    public static ToolboxItemDiscoveryContext ListingAddableItems;
}
public enum Microsoft.VisualStudio.Shell.ToolWindowOrientation : Enum {
    public int value__;
    public static ToolWindowOrientation none;
    public static ToolWindowOrientation Top;
    public static ToolWindowOrientation Left;
    public static ToolWindowOrientation Right;
    public static ToolWindowOrientation Bottom;
}
public class Microsoft.VisualStudio.Shell.UIContext : object {
    private static int ShellInitializedIndex;
    private object _stateProtectionLock;
    private UInt32 _uiContextEventsCookie;
    private UInt32 _shellShuttingDownCookie;
    private List`1<TaskCompletionSource`1<bool>> _uiContextActivationTaskCompletionSourceSet;
    private IVsUIContextManager _uiContextManager;
    private int ourUIContextStateIndex;
    [CompilerGeneratedAttribute]
private EventHandler`1<UIContextChangedEventArgs> UIContextChanged;
    [CompilerGeneratedAttribute]
private PropertyChangedEventHandler PropertyChanged;
    private bool isKnown;
    private bool isActive;
    private static PropertyChangedEventArgs IsActivePropertyChangedEventArgs;
    [CompilerGeneratedAttribute]
private Guid <Guid>k__BackingField;
    private Guid[] _lockoutGuids;
    public bool IsZombie { get; }
    public bool IsActive { get; public set; }
    public Guid Guid { get; private set; }
    internal UIContext(Guid contextGuid, bool isActive, bool isKnown, IVsUIContextManager uiContextManager);
    private static UIContext();
    [CompilerGeneratedAttribute]
public void add_UIContextChanged(EventHandler`1<UIContextChangedEventArgs> value);
    [CompilerGeneratedAttribute]
public void remove_UIContextChanged(EventHandler`1<UIContextChangedEventArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_PropertyChanged(PropertyChangedEventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_PropertyChanged(PropertyChangedEventHandler value);
    public static UIContext FromUIContextGuid(Guid contextGuid);
    public bool get_IsZombie();
    public bool get_IsActive();
    public void set_IsActive(bool value);
    public void WhenActivated(Action action);
    public TaskAwaiter GetAwaiter();
    [CompilerGeneratedAttribute]
public Guid get_Guid();
    [CompilerGeneratedAttribute]
private void set_Guid(Guid value);
    private sealed virtual override void Microsoft.VisualStudio.Shell.Interop.IVsUIContextEvents.OnContextChanged(Guid uiContext, bool active);
    private UIContextState GetCurrentTriState();
    private Task GetTaskForAwait();
    private void InvokeOrScheduleCallback(Action action);
    private void InvokeOrScheduleCallback(Action action, UIContextState currentState);
    private void ScheduleAwait(TaskCompletionSource`1<bool> uiContextActivationTaskCompletionSource);
    private void ScheduleAwait(TaskCompletionSource`1<bool> uiContextActivationTaskCompletionSource, UIContextState currentState);
    private Guid[] GetLockoutGuids();
}
public class Microsoft.VisualStudio.Shell.UIContextChangedEventArgs : EventArgs {
    private static UIContextChangedEventArgs UIContextActivated;
    private static UIContextChangedEventArgs UIContextDeactivated;
    [CompilerGeneratedAttribute]
private bool <Activated>k__BackingField;
    public bool Activated { get; private set; }
    public UIContextChangedEventArgs(bool activated);
    private static UIContextChangedEventArgs();
    public static UIContextChangedEventArgs From(bool activated);
    [CompilerGeneratedAttribute]
public bool get_Activated();
    [CompilerGeneratedAttribute]
private void set_Activated(bool value);
}
public static class Microsoft.VisualStudio.Shell.UIThreadReentrancyScope : object {
    private static object _lockObj;
    private static Queue`1<PendingRequest> _queue;
    private static TaskCompletionSource`1<object> _queueHasElement;
    private static Task RequestWaiter { get; }
    private static UIThreadReentrancyScope();
    private static bool ExecuteOne();
    private static void Flush();
    private static void ClearQueue();
    private static Task`1<bool> DequeueAsync(PendingRequest pr);
    private static Task get_RequestWaiter();
    [AsyncStateMachineAttribute("Microsoft.VisualStudio.Shell.UIThreadReentrancyScope/<EnqueueActionAsync>d__10")]
[EditorBrowsableAttribute("1")]
public static Task EnqueueActionAsync(Action action);
    [AsyncStateMachineAttribute("Microsoft.VisualStudio.Shell.UIThreadReentrancyScope/<TryExecuteActionAsync>d__11")]
internal static Task`1<bool> TryExecuteActionAsync(InvokableBase action, int timeout);
    public static bool WaitOnTaskComplete(Task task, CancellationToken cancel, int ms);
    private static bool WaitOnTaskCompleteInternal(Task task, CancellationToken cancel, int ms);
}
public static class Microsoft.VisualStudio.Shell.VSCommands : object {
    public static RoutedCommand ExecuteCommand;
    public static RoutedCommand Browse;
    private static VSCommands();
}
public enum Microsoft.VisualStudio.Shell.VsDockStyle : Enum {
    public int value__;
    public static VsDockStyle none;
    public static VsDockStyle MDI;
    public static VsDockStyle Float;
    public static VsDockStyle Linked;
    public static VsDockStyle Tabbed;
    public static VsDockStyle AlwaysFloat;
}
internal static class Microsoft.VisualStudio.Shell.VsExecutionContextTrackerHelper : object {
    internal static IVsExecutionContextTracker Instance { get; }
    internal static IVsExecutionContextTracker get_Instance();
    internal static UInt32 GetCurrentContext();
    internal static CapturedContext CaptureCurrentContext();
}
public static class Microsoft.VisualStudio.Shell.VsExecutionContextTypes : object {
    public static Guid PackageExecutionContext;
    public static Guid ToolWindowExecutionContext;
    private static VsExecutionContextTypes();
}
public class Microsoft.VisualStudio.Shell.VsInvokableAsyncFunction`1 : MulticastDelegate {
    public VsInvokableAsyncFunction`1(object object, IntPtr method);
    public virtual Task`1<T> Invoke(IVsTaskCompletionSource tcs);
    public virtual IAsyncResult BeginInvoke(IVsTaskCompletionSource tcs, AsyncCallback callback, object object);
    public virtual Task`1<T> EndInvoke(IAsyncResult result);
}
public class Microsoft.VisualStudio.Shell.VsTaskBodyCallback : MulticastDelegate {
    public VsTaskBodyCallback(object object, IntPtr method);
    public virtual object Invoke(IVsTask task, IVsTask[] parentTasks);
    public virtual IAsyncResult BeginInvoke(IVsTask task, IVsTask[] parentTasks, AsyncCallback callback, object object);
    public virtual object EndInvoke(IAsyncResult result);
}
[FlagsAttribute]
public enum Microsoft.VisualStudio.Shell.VsTaskContinuationOptions : Enum {
    public int value__;
    public static VsTaskContinuationOptions None;
    public static VsTaskContinuationOptions PreferFairness;
    public static VsTaskContinuationOptions LongRunning;
    public static VsTaskContinuationOptions AttachedToParent;
    public static VsTaskContinuationOptions DenyChildAttach;
    public static VsTaskContinuationOptions LazyCancelation;
    public static VsTaskContinuationOptions NotOnRanToCompletion;
    public static VsTaskContinuationOptions NotOnFaulted;
    public static VsTaskContinuationOptions NotOnCanceled;
    public static VsTaskContinuationOptions OnlyOnCanceled;
    public static VsTaskContinuationOptions OnlyOnFaulted;
    public static VsTaskContinuationOptions OnlyOnRanToCompletion;
    public static VsTaskContinuationOptions ExecuteSynchronously;
    public static VsTaskContinuationOptions CancelWithParent;
    public static VsTaskContinuationOptions IndependentlyCanceled;
    public static VsTaskContinuationOptions NotCancelable;
    public static VsTaskContinuationOptions Default;
}
[FlagsAttribute]
public enum Microsoft.VisualStudio.Shell.VsTaskCreationOptions : Enum {
    public int value__;
    public static VsTaskCreationOptions None;
    public static VsTaskCreationOptions PreferFairness;
    public static VsTaskCreationOptions LongRunning;
    public static VsTaskCreationOptions AttachedToParent;
    public static VsTaskCreationOptions DenyChildAttach;
    public static VsTaskCreationOptions CancelWithParent;
    public static VsTaskCreationOptions NotCancelable;
}
public enum Microsoft.VisualStudio.Shell.VsTaskRunContext : Enum {
    public int value__;
    public static VsTaskRunContext BackgroundThread;
    public static VsTaskRunContext UIThreadSend;
    public static VsTaskRunContext UIThreadBackgroundPriority;
    public static VsTaskRunContext UIThreadIdlePriority;
    public static VsTaskRunContext CurrentContext;
    public static VsTaskRunContext BackgroundThreadLowIOPriority;
    public static VsTaskRunContext UIThreadNormalPriority;
}
[FlagsAttribute]
public enum Microsoft.VisualStudio.Shell.VsTaskWaitOptions : Enum {
    public int value__;
    public static VsTaskWaitOptions None;
    public static VsTaskWaitOptions AbortOnTaskCancellation;
}
[FlagsAttribute]
public enum Microsoft.VisualStudio.TaskStatusCenter.CompletionActions : Enum {
    public int value__;
    public static CompletionActions None;
    public static CompletionActions RetainOnRanToCompletion;
    public static CompletionActions RetainOnFaulted;
    public static CompletionActions RetainAndNotifyOnRanToCompletion;
    public static CompletionActions RetainAndNotifyOnFaulted;
}
[GuidAttribute("C9AF130E-73DB-461B-A011-2AC4E99F2FFD")]
public interface Microsoft.VisualStudio.TaskStatusCenter.ITaskHandler {
    public TaskHandlerOptions Options { get; }
    public CancellationToken UserCancellation { get; }
    public IProgress`1<TaskProgressData> Progress { get; }
    public abstract virtual TaskHandlerOptions get_Options();
    public abstract virtual CancellationToken get_UserCancellation();
    public abstract virtual IProgress`1<TaskProgressData> get_Progress();
    public abstract virtual void RegisterTask(Task task);
}
public interface Microsoft.VisualStudio.TaskStatusCenter.ITaskHandler2 {
    public abstract virtual void Dismiss();
}
public interface Microsoft.VisualStudio.TaskStatusCenter.IVsProgressStreamConverter {
    public abstract virtual TaskDisplayItem ConvertToDisplayFormat(Stream progressStream);
}
[NullableContextAttribute("1")]
public interface Microsoft.VisualStudio.TaskStatusCenter.IVsTaskProgress {
    public TaskProgressOptions Options { get; }
    public CancellationToken UserCancellation { get; }
    public IProgress`1<TaskProgressData> Progress { get; }
    public Nullable`1<TaskStatus> Status { get; }
    public bool CanRunInBackground { get; public set; }
    public bool CanBeCanceled { get; }
    [NullableAttribute("2")]
public string ProgressText { get; }
    public Nullable`1<int> PercentComplete { get; }
    [NullableAttribute("2")]
public Task Task { get; }
    public abstract virtual TaskProgressOptions get_Options();
    public abstract virtual CancellationToken get_UserCancellation();
    public abstract virtual IProgress`1<TaskProgressData> get_Progress();
    public abstract virtual Nullable`1<TaskStatus> get_Status();
    public abstract virtual bool get_CanRunInBackground();
    public abstract virtual void set_CanRunInBackground(bool value);
    public abstract virtual bool get_CanBeCanceled();
    [NullableContextAttribute("2")]
public abstract virtual string get_ProgressText();
    public abstract virtual Nullable`1<int> get_PercentComplete();
    [NullableContextAttribute("2")]
public abstract virtual Task get_Task();
    public abstract virtual void RegisterTask(Task task);
}
[NullableContextAttribute("1")]
public interface Microsoft.VisualStudio.TaskStatusCenter.IVsTaskProgressCollection {
    public string Title { get; }
    public string Id { get; }
    public bool AutoUpdateStatus { get; public set; }
    public TaskProgressCollectionStatus Status { get; public set; }
    [NullableAttribute("2")]
public IVsTaskProgress CurrentTask { get; }
    public IReadOnlyList`1<IVsTaskProgress> Tasks { get; }
    public int CumulativePercentComplete { get; }
    public bool AllowUserCancellation { get; public set; }
    public bool CanBeCanceled { get; }
    public bool CanRunInBackground { get; }
    public bool AllowRunInBackground { get; public set; }
    public abstract virtual string get_Title();
    public abstract virtual string get_Id();
    public abstract virtual bool get_AutoUpdateStatus();
    public abstract virtual void set_AutoUpdateStatus(bool value);
    public abstract virtual TaskProgressCollectionStatus get_Status();
    public abstract virtual void set_Status(TaskProgressCollectionStatus value);
    [NullableContextAttribute("2")]
public abstract virtual IVsTaskProgress get_CurrentTask();
    public abstract virtual IReadOnlyList`1<IVsTaskProgress> get_Tasks();
    public abstract virtual int get_CumulativePercentComplete();
    public abstract virtual bool get_AllowUserCancellation();
    public abstract virtual void set_AllowUserCancellation(bool value);
    public abstract virtual bool get_CanBeCanceled();
    public abstract virtual bool get_CanRunInBackground();
    public abstract virtual bool get_AllowRunInBackground();
    public abstract virtual void set_AllowRunInBackground(bool value);
    public abstract virtual Task`1<IVsTaskProgress> AddTaskAsync(TaskProgressOptions options, TaskProgressData progressData, CancellationToken cancellationToken);
    public abstract virtual ShowProgressResult ShowProgress(bool modal);
}
[NullableContextAttribute("1")]
public interface Microsoft.VisualStudio.TaskStatusCenter.IVsTaskProgressService {
    public abstract virtual Task`1<IVsTaskProgressCollection> CreateTaskCollectionAsync(TaskProgressCollectionOptions options, CancellationToken cancellationToken);
    public abstract virtual bool TryGetTaskCollection(string taskCollectionId, IVsTaskProgressCollection& taskCollection);
}
[GuidAttribute("7E8B9601-5D91-4E4C-B856-EC1199F8399C")]
public interface Microsoft.VisualStudio.TaskStatusCenter.IVsTaskStatusCenterService {
    public abstract virtual ITaskHandler PreRegister(TaskHandlerOptions options, TaskProgressData data);
}
[GuidAttribute("EE54B400-5D43-42D8-8E87-AD5BB9237DC1")]
public interface Microsoft.VisualStudio.TaskStatusCenter.IVsTaskStatusCenterViewFactory {
    public ImageMoniker CurrentIcon { get; }
    public string ToolTipText { get; }
    public abstract virtual ImageMoniker get_CurrentIcon();
    public abstract virtual string get_ToolTipText();
    public abstract virtual Control NewView();
}
public enum Microsoft.VisualStudio.TaskStatusCenter.LogDisplayType : Enum {
    public int value__;
    public static LogDisplayType None;
    public static LogDisplayType OutputWindow;
}
public enum Microsoft.VisualStudio.TaskStatusCenter.ShowProgressResult : Enum {
    public int value__;
    public static ShowProgressResult Completed;
    public static ShowProgressResult Canceled;
    public static ShowProgressResult MovedToBackground;
}
[GuidAttribute("61547C99-7F2B-4153-BDA1-18D7D21C30FF")]
public interface Microsoft.VisualStudio.TaskStatusCenter.SVsTaskProgressService {
}
[GuidAttribute("9E52DF26-D330-4536-ABBC-E1E7DA24A0AB")]
public interface Microsoft.VisualStudio.TaskStatusCenter.SVsTaskStatusCenterService {
}
[GuidAttribute("7C68E656-1BCD-45EB-86DE-87BD9BCCAF43")]
public interface Microsoft.VisualStudio.TaskStatusCenter.SVsTaskStatusCenterViewFactory {
}
public class Microsoft.VisualStudio.TaskStatusCenter.TaskDisplayItem : ObservableObject {
    private string title;
    private string description;
    public string Title { get; public set; }
    public string Description { get; public set; }
    public TaskDisplayItem(string title, string description);
    public string get_Title();
    public void set_Title(string value);
    public string get_Description();
    public void set_Description(string value);
}
public class Microsoft.VisualStudio.TaskStatusCenter.TaskHandlerOptions : ValueType {
    public string Title;
    public CompletionActions ActionsAfterCompletion;
    public Action`1<Task> DisplayTaskDetails;
    public string TaskSuccessMessage;
    public Guid ClientId;
    public Guid StartTipCalloutId;
    public Guid EndTipCalloutId;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.VisualStudio.TaskStatusCenter.TaskProgressCollectionOptions : object {
    [CompilerGeneratedAttribute]
private string <Title>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Id>k__BackingField;
    public string Title { get; }
    public string Id { get; }
    public TaskProgressCollectionOptions(string title, string id);
    [CompilerGeneratedAttribute]
public string get_Title();
    [CompilerGeneratedAttribute]
public string get_Id();
}
[FlagsAttribute]
public enum Microsoft.VisualStudio.TaskStatusCenter.TaskProgressCollectionStatus : Enum {
    public int value__;
    public static TaskProgressCollectionStatus WaitingToRun;
    public static TaskProgressCollectionStatus Running;
    public static TaskProgressCollectionStatus Completed;
    public static TaskProgressCollectionStatus Faulted;
    public static TaskProgressCollectionStatus Canceled;
}
public class Microsoft.VisualStudio.TaskStatusCenter.TaskProgressData : ValueType {
    public string ProgressText;
    public bool CanBeCanceled;
    public Nullable`1<int> PercentComplete;
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class Microsoft.VisualStudio.TaskStatusCenter.TaskProgressOptions : object {
    [ObsoleteAttribute("Progress indicator no longer supports progress streams.")]
public Stream ProgressStream;
    [ObsoleteAttribute("Progress indicator no longer supports progress streams.")]
public IVsProgressStreamConverter StreamConverter;
    [NullableAttribute("1")]
[CompilerGeneratedAttribute]
private string <Title>k__BackingField;
    [CompilerGeneratedAttribute]
private CompletionActions <CompletionActions>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private Action`1<Task> <DisplayTaskDetails>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<LogDisplayType> <DisplayType>k__BackingField;
    [CompilerGeneratedAttribute]
private object <Display>k__BackingField;
    [NullableAttribute("1")]
public string Title { get; }
    public CompletionActions CompletionActions { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public Action`1<Task> DisplayTaskDetails { get; }
    [ObsoleteAttribute("Progress indicator no longer supports progress streams.")]
public Nullable`1<LogDisplayType> DisplayType { get; }
    [ObsoleteAttribute("Progress indicator no longer supports progress streams.")]
public object Display { get; }
    [NullableContextAttribute("1")]
public TaskProgressOptions(string title);
    [NullableContextAttribute("1")]
public TaskProgressOptions(string title, CompletionActions completionActions, Action`1<Task> displayTaskDetails);
    [ObsoleteAttribute("Progress indicator no longer supports progress streams.")]
public TaskProgressOptions(string title, Stream progressStream, IVsProgressStreamConverter streamConverter, CompletionActions completionActions, Action`1<Task> displayTaskDetails, LogDisplayType displayType, object display);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public string get_Title();
    [CompilerGeneratedAttribute]
public CompletionActions get_CompletionActions();
    [CompilerGeneratedAttribute]
public Action`1<Task> get_DisplayTaskDetails();
    [CompilerGeneratedAttribute]
public Nullable`1<LogDisplayType> get_DisplayType();
    [CompilerGeneratedAttribute]
public object get_Display();
}
public class Microsoft.VisualStudio.VSConstants : object {
    public static int cmdidToolsOptions;
    public static Guid IID_IUnknown;
    public static Guid GUID_AppCommand;
    public static Guid GUID_VSStandardCommandSet97;
    [EditorBrowsableAttribute("1")]
public static Guid VSStd2K;
    [EditorBrowsableAttribute("1")]
public static Guid VsStd2010;
    [EditorBrowsableAttribute("1")]
public static Guid VsStd11;
    [EditorBrowsableAttribute("1")]
public static Guid VsStd12;
    [EditorBrowsableAttribute("1")]
public static Guid VsStd14;
    [EditorBrowsableAttribute("1")]
public static Guid VsStd15;
    [EditorBrowsableAttribute("1")]
public static Guid VsStd16;
    [EditorBrowsableAttribute("1")]
public static Guid VsStd17;
    [EditorBrowsableAttribute("1")]
public static UInt32 CEF_CLONEFILE;
    [EditorBrowsableAttribute("1")]
public static UInt32 CEF_OPENFILE;
    [EditorBrowsableAttribute("1")]
public static UInt32 CEF_SILENT;
    [EditorBrowsableAttribute("1")]
public static UInt32 CEF_OPENASNEW;
    [EditorBrowsableAttribute("1")]
public static Guid GUID_VsUIHierarchyWindowCmds;
    public static IntPtr HIERARCHY_DONTCHANGE;
    public static IntPtr SELCONTAINER_DONTCHANGE;
    public static IntPtr HIERARCHY_DONTPROPAGATE;
    public static IntPtr SELCONTAINER_DONTPROPAGATE;
    public static string MiscFilesProjectUniqueName;
    public static string SolutionItemsProjectUniqueName;
    [EditorBrowsableAttribute("1")]
public static Guid CLSID_HtmDocData;
    [EditorBrowsableAttribute("1")]
public static Guid CLSID_HtmedPackage;
    [EditorBrowsableAttribute("1")]
public static Guid CLSID_HtmlLanguageService;
    [EditorBrowsableAttribute("1")]
public static Guid GUID_HtmlEditorFactory;
    [EditorBrowsableAttribute("1")]
public static Guid GUID_TextEditorFactory;
    [EditorBrowsableAttribute("1")]
public static Guid GUID_HTMEDAllowExistingDocData;
    [EditorBrowsableAttribute("1")]
public static Guid CLSID_VsEnvironmentPackage;
    public static Guid GUID_VsNewProjectPseudoFolder;
    [EditorBrowsableAttribute("1")]
public static Guid CLSID_MiscellaneousFilesProject;
    [EditorBrowsableAttribute("1")]
public static Guid CLSID_SolutionItemsProject;
    public static Guid SID_SVsGeneralOutputWindowPane;
    public static Guid SID_SUIHostCommandDispatcher;
    [EditorBrowsableAttribute("1")]
public static Guid CLSID_VsUIHierarchyWindow;
    [EditorBrowsableAttribute("1")]
public static Guid GUID_DefaultEditor;
    [EditorBrowsableAttribute("1")]
public static Guid GUID_ExternalEditor;
    [EditorBrowsableAttribute("1")]
public static Guid GUID_BuildOutputWindowPane;
    [EditorBrowsableAttribute("1")]
public static Guid GUID_OutWindowDebugPane;
    [EditorBrowsableAttribute("1")]
public static Guid GUID_OutWindowGeneralPane;
    [EditorBrowsableAttribute("1")]
public static Guid BuildOrder;
    [EditorBrowsableAttribute("1")]
public static Guid BuildOutput;
    [EditorBrowsableAttribute("1")]
public static Guid DebugOutput;
    [EditorBrowsableAttribute("1")]
public static Guid GUID_ItemType_PhysicalFile;
    [EditorBrowsableAttribute("1")]
public static Guid GUID_ItemType_PhysicalFolder;
    [EditorBrowsableAttribute("1")]
public static Guid GUID_ItemType_VirtualFolder;
    [EditorBrowsableAttribute("1")]
public static Guid GUID_ItemType_SubProject;
    public static Guid GUID_BrowseFilePage;
    public static Guid guidCOMPLUSLibrary;
    [EditorBrowsableAttribute("1")]
public static Guid CLSID_ComPlusOnlyDebugEngine;
    [EditorBrowsableAttribute("1")]
public static Guid GUID_ItemType_SharedProjectReference;
    [EditorBrowsableAttribute("1")]
public static Guid GUID_VS_DEPTYPE_BUILD_PROJECT;
    [EditorBrowsableAttribute("1")]
public static Guid GUID_ProjectDesignerEditor;
    public static UInt32 VS_BUILDABLEPROJECTCFGOPTS_REBUILD;
    public static UInt32 VS_BUILDABLEPROJECTCFGOPTS_BUILD_SELECTION_ONLY;
    public static UInt32 VS_BUILDABLEPROJECTCFGOPTS_BUILD_ACTIVE_DOCUMENT_ONLY;
    public static UInt32 VS_BUILDABLEPROJECTCFGOPTS_PACKAGE;
    public static UInt32 VS_BUILDABLEPROJECTCFGOPTS_PRIVATE;
    public static UInt32 VSUTDCF_DTEEONLY;
    public static UInt32 VSUTDCF_REBUILD;
    public static UInt32 VSUTDCF_PACKAGE;
    public static UInt32 VSUTDCF_PRIVATE;
    [EditorBrowsableAttribute("1")]
public static Guid UICONTEXT_SolutionBuilding;
    [EditorBrowsableAttribute("1")]
public static Guid UICONTEXT_Debugging;
    [EditorBrowsableAttribute("1")]
public static Guid UICONTEXT_Dragging;
    [EditorBrowsableAttribute("1")]
public static Guid UICONTEXT_FullScreenMode;
    [EditorBrowsableAttribute("1")]
public static Guid UICONTEXT_DesignMode;
    [EditorBrowsableAttribute("1")]
public static Guid UICONTEXT_NoSolution;
    [EditorBrowsableAttribute("1")]
public static Guid UICONTEXT_SolutionExists;
    [EditorBrowsableAttribute("1")]
public static Guid UICONTEXT_EmptySolution;
    [EditorBrowsableAttribute("1")]
public static Guid UICONTEXT_SolutionHasSingleProject;
    [EditorBrowsableAttribute("1")]
public static Guid UICONTEXT_SolutionHasMultipleProjects;
    [EditorBrowsableAttribute("1")]
public static Guid UICONTEXT_CodeWindow;
    [EditorBrowsableAttribute("1")]
public static Guid UICONTEXT_SolutionHasAppContainerProject;
    [EditorBrowsableAttribute("1")]
public static Guid UIContext_SolutionClosing;
    [EditorBrowsableAttribute("1")]
public static Guid GUID_VsTaskListViewAll;
    [EditorBrowsableAttribute("1")]
public static Guid GUID_VsTaskListViewUserTasks;
    [EditorBrowsableAttribute("1")]
public static Guid GUID_VsTaskListViewShortcutTasks;
    [EditorBrowsableAttribute("1")]
public static Guid GUID_VsTaskListViewHTMLTasks;
    [EditorBrowsableAttribute("1")]
public static Guid GUID_VsTaskListViewCompilerTasks;
    [EditorBrowsableAttribute("1")]
public static Guid GUID_VsTaskListViewCommentTasks;
    [EditorBrowsableAttribute("1")]
public static Guid GUID_VsTaskListViewCurrentFileTasks;
    [EditorBrowsableAttribute("1")]
public static Guid GUID_VsTaskListViewCheckedTasks;
    [EditorBrowsableAttribute("1")]
public static Guid GUID_VsTaskListViewUncheckedTasks;
    [EditorBrowsableAttribute("1")]
public static Guid CLSID_VsTaskList;
    [EditorBrowsableAttribute("1")]
public static Guid CLSID_VsTaskListPackage;
    public static Guid SID_SVsToolboxActiveXDataProvider;
    [EditorBrowsableAttribute("1")]
public static Guid CLSID_VsDocOutlinePackage;
    [EditorBrowsableAttribute("1")]
public static Guid CLSID_VsCfgProviderEventsHelper;
    [EditorBrowsableAttribute("1")]
public static Guid GUID_COMPlusPage;
    [EditorBrowsableAttribute("1")]
public static Guid GUID_COMClassicPage;
    [EditorBrowsableAttribute("1")]
public static Guid GUID_SolutionPage;
    public static string AssemblyReferenceProvider_string;
    public static Guid AssemblyReferenceProvider_Guid;
    public static string ProjectReferenceProvider_string;
    public static Guid ProjectReferenceProvider_Guid;
    public static string ComReferenceProvider_string;
    public static Guid ComReferenceProvider_Guid;
    public static string PlatformReferenceProvider_string;
    public static Guid PlatformReferenceProvider_Guid;
    public static string FileReferenceProvider_string;
    public static Guid FileReferenceProvider_Guid;
    public static string ConnectedServiceInstanceReferenceProvider_string;
    public static Guid ConnectedServiceInstanceReferenceProvider_Guid;
    public static string SharedProjectReferenceProvider_string;
    public static Guid SharedProjectReferenceProvider_Guid;
    [EditorBrowsableAttribute("1")]
public static Guid LOGVIEWID_Any;
    [EditorBrowsableAttribute("1")]
public static Guid LOGVIEWID_Primary;
    [EditorBrowsableAttribute("1")]
public static Guid LOGVIEWID_Debugging;
    [EditorBrowsableAttribute("1")]
public static Guid LOGVIEWID_Code;
    [EditorBrowsableAttribute("1")]
public static Guid LOGVIEWID_Designer;
    [EditorBrowsableAttribute("1")]
public static Guid LOGVIEWID_TextView;
    [EditorBrowsableAttribute("1")]
public static Guid LOGVIEWID_UserChooseView;
    [EditorBrowsableAttribute("1")]
public static UInt32 VSITEMID_NIL;
    [EditorBrowsableAttribute("1")]
public static UInt32 VSITEMID_ROOT;
    [EditorBrowsableAttribute("1")]
public static UInt32 VSITEMID_SELECTION;
    public static UInt32 VSCOOKIE_NIL;
    [EditorBrowsableAttribute("1")]
public static UInt32 UndoManager;
    [EditorBrowsableAttribute("1")]
public static UInt32 WindowFrame;
    [EditorBrowsableAttribute("1")]
public static UInt32 DocumentFrame;
    [EditorBrowsableAttribute("1")]
public static UInt32 StartupProject;
    [EditorBrowsableAttribute("1")]
public static UInt32 PropertyBrowserSID;
    [EditorBrowsableAttribute("1")]
public static UInt32 UserContext;
    public static int VS_E_PROJECTALREADYEXISTS;
    public static int VS_E_PACKAGENOTLOADED;
    public static int VS_E_PROJECTNOTLOADED;
    public static int VS_E_SOLUTIONNOTOPEN;
    public static int VS_E_SOLUTIONALREADYOPEN;
    public static int VS_E_PROJECTMIGRATIONFAILED;
    public static int VS_E_INCOMPATIBLEDOCDATA;
    public static int VS_E_UNSUPPORTEDFORMAT;
    public static int VS_E_WIZARDBACKBUTTONPRESS;
    public static int VS_E_EDITORDISABLED;
    public static int VS_S_PROJECTFORWARDED;
    public static int VS_S_TBXMARKER;
    public static int VS_E_INCOMPATIBLEPROJECT;
    public static int VS_E_INCOMPATIBLECLASSICPROJECT;
    public static int VS_E_INCOMPATIBLEPROJECT_UNSUPPORTED_OS;
    public static int VS_E_PROMPTREQUIRED;
    public static int VS_E_CIRCULARTASKDEPENDENCY;
    public static int VS_S_PROJECT_SAFEREPAIRREQUIRED;
    public static int VS_S_PROJECT_UNSAFEREPAIRREQUIRED;
    public static int VS_S_PROJECT_ONEWAYUPGRADEREQUIRED;
    public static int VS_S_INCOMPATIBLEPROJECT;
    public static UInt32 ALL;
    public static UInt32 SELECTED;
    public static int OLE_E_OLEVERB;
    public static int OLE_E_ADVF;
    public static int OLE_E_ENUM_NOMORE;
    public static int OLE_E_ADVISENOTSUPPORTED;
    public static int OLE_E_NOCONNECTION;
    public static int OLE_E_NOTRUNNING;
    public static int OLE_E_NOCACHE;
    public static int OLE_E_BLANK;
    public static int OLE_E_CLASSDIFF;
    public static int OLE_E_CANT_GETMONIKER;
    public static int OLE_E_CANT_BINDTOSOURCE;
    public static int OLE_E_STATIC;
    public static int OLE_E_PROMPTSAVECANCELLED;
    public static int OLE_E_INVALIDRECT;
    public static int OLE_E_WRONGCOMPOBJ;
    public static int OLE_E_INVALIDHWND;
    public static int OLE_E_NOT_INPLACEACTIVE;
    public static int OLE_E_CANTCONVERT;
    public static int OLE_E_NOSTORAGE;
    public static int DISP_E_UNKNOWNINTERFACE;
    public static int DISP_E_MEMBERNOTFOUND;
    public static int DISP_E_PARAMNOTFOUND;
    public static int DISP_E_TYPEMISMATCH;
    public static int DISP_E_UNKNOWNNAME;
    public static int DISP_E_NONAMEDARGS;
    public static int DISP_E_BADVARTYPE;
    public static int DISP_E_EXCEPTION;
    public static int DISP_E_OVERFLOW;
    public static int DISP_E_BADINDEX;
    public static int DISP_E_UNKNOWNLCID;
    public static int DISP_E_ARRAYISLOCKED;
    public static int DISP_E_BADPARAMCOUNT;
    public static int DISP_E_PARAMNOTOPTIONAL;
    public static int DISP_E_BADCALLEE;
    public static int DISP_E_NOTACOLLECTION;
    public static int DISP_E_DIVBYZERO;
    public static int DISP_E_BUFFERTOOSMALL;
    public static int RPC_E_CALL_REJECTED;
    public static int RPC_E_CALL_CANCELED;
    public static int RPC_E_CANTPOST_INSENDCALL;
    public static int RPC_E_CANTCALLOUT_INASYNCCALL;
    public static int RPC_E_CANTCALLOUT_INEXTERNALCALL;
    public static int RPC_E_CONNECTION_TERMINATED;
    public static int RPC_E_SERVER_DIED;
    public static int RPC_E_CLIENT_DIED;
    public static int RPC_E_INVALID_DATAPACKET;
    public static int RPC_E_CANTTRANSMIT_CALL;
    public static int RPC_E_CLIENT_CANTMARSHAL_DATA;
    public static int RPC_E_CLIENT_CANTUNMARSHAL_DATA;
    public static int RPC_E_SERVER_CANTMARSHAL_DATA;
    public static int RPC_E_SERVER_CANTUNMARSHAL_DATA;
    public static int RPC_E_INVALID_DATA;
    public static int RPC_E_INVALID_PARAMETER;
    public static int RPC_E_CANTCALLOUT_AGAIN;
    public static int RPC_E_SERVER_DIED_DNE;
    public static int RPC_E_SYS_CALL_FAILED;
    public static int RPC_E_OUT_OF_RESOURCES;
    public static int RPC_E_ATTEMPTED_MULTITHREAD;
    public static int RPC_E_NOT_REGISTERED;
    public static int RPC_E_FAULT;
    public static int RPC_E_SERVERFAULT;
    public static int RPC_E_CHANGED_MODE;
    public static int RPC_E_INVALIDMETHOD;
    public static int RPC_E_DISCONNECTED;
    public static int RPC_E_RETRY;
    public static int RPC_E_SERVERCALL_RETRYLATER;
    public static int RPC_E_SERVERCALL_REJECTED;
    public static int RPC_E_INVALID_CALLDATA;
    public static int RPC_E_CANTCALLOUT_ININPUTSYNCCALL;
    public static int RPC_E_WRONG_THREAD;
    public static int RPC_E_THREAD_NOT_INIT;
    public static int RPC_E_VERSION_MISMATCH;
    public static int RPC_E_INVALID_HEADER;
    public static int RPC_E_INVALID_EXTENSION;
    public static int RPC_E_INVALID_IPID;
    public static int RPC_E_INVALID_OBJECT;
    public static int RPC_S_CALLPENDING;
    public static int RPC_S_WAITONTIMER;
    public static int RPC_E_CALL_COMPLETE;
    public static int RPC_E_UNSECURE_CALL;
    public static int RPC_E_TOO_LATE;
    public static int RPC_E_NO_GOOD_SECURITY_PACKAGES;
    public static int RPC_E_ACCESS_DENIED;
    public static int RPC_E_REMOTE_DISABLED;
    public static int RPC_E_INVALID_OBJREF;
    public static int RPC_E_NO_CONTEXT;
    public static int RPC_E_TIMEOUT;
    public static int RPC_E_NO_SYNC;
    public static int RPC_E_FULLSIC_REQUIRED;
    public static int RPC_E_INVALID_STD_NAME;
    public static int CO_E_FAILEDTOIMPERSONATE;
    public static int CO_E_FAILEDTOGETSECCTX;
    public static int CO_E_FAILEDTOOPENTHREADTOKEN;
    public static int CO_E_FAILEDTOGETTOKENINFO;
    public static int CO_E_TRUSTEEDOESNTMATCHCLIENT;
    public static int CO_E_FAILEDTOQUERYCLIENTBLANKET;
    public static int CO_E_FAILEDTOSETDACL;
    public static int CO_E_ACCESSCHECKFAILED;
    public static int CO_E_NETACCESSAPIFAILED;
    public static int CO_E_WRONGTRUSTEENAMESYNTAX;
    public static int CO_E_INVALIDSID;
    public static int CO_E_CONVERSIONFAILED;
    public static int CO_E_NOMATCHINGSIDFOUND;
    public static int CO_E_LOOKUPACCSIDFAILED;
    public static int CO_E_NOMATCHINGNAMEFOUND;
    public static int CO_E_LOOKUPACCNAMEFAILED;
    public static int CO_E_SETSERLHNDLFAILED;
    public static int CO_E_FAILEDTOGETWINDIR;
    public static int CO_E_PATHTOOLONG;
    public static int CO_E_FAILEDTOGENUUID;
    public static int CO_E_FAILEDTOCREATEFILE;
    public static int CO_E_FAILEDTOCLOSEHANDLE;
    public static int CO_E_EXCEEDSYSACLLIMIT;
    public static int CO_E_ACESINWRONGORDER;
    public static int CO_E_INCOMPATIBLESTREAMVERSION;
    public static int CO_E_FAILEDTOOPENPROCESSTOKEN;
    public static int CO_E_DECODEFAILED;
    public static int CO_E_ACNOTINITIALIZED;
    public static int CO_E_CANCEL_DISABLED;
    public static int COR_E_DIRECTORYNOTFOUND;
    public static int COR_E_FILENOTFOUND;
    public static int RPC_E_UNEXPECTED;
    public static int VS_E_BUSY;
    public static int VS_E_SPECIFYING_OUTPUT_UNSUPPORTED;
    public static int S_FALSE;
    public static int S_OK;
    public static int UNDO_E_CLIENTABORT;
    public static int E_OUTOFMEMORY;
    public static int E_INVALIDARG;
    public static int E_FAIL;
    public static int E_NOINTERFACE;
    public static int E_NOTIMPL;
    public static int E_UNEXPECTED;
    public static int E_POINTER;
    public static int E_HANDLE;
    public static int E_ABORT;
    public static int E_ACCESSDENIED;
    public static int E_PENDING;
    internal static int WM_USER;
    public static int VSM_TOOLBARMETRICSCHANGE;
    public static int VSM_ENTERMODAL;
    public static int VSM_EXITMODAL;
    public static int VSM_VIRTUALMEMORYLOW;
    public static int VSM_VIRTUALMEMORYCRITICAL;
    public static int VSM_MEMORYHIGH;
    public static int VSM_MEMORYEXCESSIVE;
    public static int CPDN_SELCHANGED;
    public static int CPDN_SELDBLCLICK;
    public static int CPPM_INITIALIZELIST;
    public static int CPPM_QUERYCANSELECT;
    public static int CPPM_GETSELECTION;
    public static int CPPM_INITIALIZETAB;
    public static int CPPM_SETMULTISELECT;
    public static int CPPM_CLEARSELECTION;
    public static IntPtr DOCDATAEXISTING_UNKNOWN;
    private static VSConstants();
}
public class Microsoft.VisualStudio.Win32Methods : object {
    public static IntPtr SetParent(IntPtr hWnd, IntPtr hWndParent);
    public static bool IsDialogMessageA(IntPtr hDlg, MSG& msg);
}
[ExcludeFromCodeCoverageAttribute]
[DebuggerNonUserCodeAttribute]
internal static class System.Runtime.CompilerServices.IsExternalInit : object {
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("27524")]
internal class System.Runtime.CompilerServices.NativeIntegerAttribute : Attribute {
    public Boolean[] TransformFlags;
    public NativeIntegerAttribute(Boolean[] );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("27524")]
internal class System.Runtime.CompilerServices.NullableAttribute : Attribute {
    public Byte[] NullableFlags;
    public NullableAttribute(byte );
    public NullableAttribute(Byte[] );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("5196")]
internal class System.Runtime.CompilerServices.NullableContextAttribute : Attribute {
    public byte Flag;
    public NullableContextAttribute(byte );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("2")]
internal class System.Runtime.CompilerServices.RefSafetyRulesAttribute : Attribute {
    public int Version;
    public RefSafetyRulesAttribute(int );
}
[GeneratedCodeAttribute("Nerdbank.GitVersioning.Tasks", "3.6.133.12845")]
[ExcludeFromCodeCoverageAttribute]
internal static class ThisAssembly : object {
    internal static string AssemblyConfiguration;
    internal static string AssemblyFileVersion;
    internal static string AssemblyInformationalVersion;
    internal static string AssemblyName;
    internal static string AssemblyTitle;
    internal static string AssemblyVersion;
    internal static DateTime GitCommitDate;
    internal static string GitCommitId;
    internal static bool IsPrerelease;
    internal static bool IsPublicRelease;
    internal static string RootNamespace;
    private static ThisAssembly();
}
[IsReadOnlyAttribute]
[DebuggerDisplayAttribute("{Value}")]
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.3.49-beta+91f5c15987")]
internal class Windows.Win32.Foundation.BOOL : ValueType {
    internal int Value;
    internal BOOL(int value);
    internal BOOL(bool value);
    public static int op_Implicit(BOOL value);
    public static BOOL op_Explicit(int value);
    public static bool op_Equality(BOOL left, BOOL right);
    public static bool op_Inequality(BOOL left, BOOL right);
    public sealed virtual bool Equals(BOOL other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public virtual string ToString();
    public static bool op_Implicit(BOOL value);
    public static BOOL op_Implicit(bool value);
}
[IsReadOnlyAttribute]
[DebuggerDisplayAttribute("{Value}")]
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.3.49-beta+91f5c15987")]
internal class Windows.Win32.Foundation.HANDLE : ValueType {
    internal IntPtr Value;
    internal static HANDLE Null { get; }
    internal bool IsNull { get; }
    internal HANDLE(IntPtr value);
    internal static HANDLE get_Null();
    internal bool get_IsNull();
    public static IntPtr op_Implicit(HANDLE value);
    public static HANDLE op_Explicit(IntPtr value);
    public static bool op_Equality(HANDLE left, HANDLE right);
    public static bool op_Inequality(HANDLE left, HANDLE right);
    public sealed virtual bool Equals(HANDLE other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public virtual string ToString();
}
[IsReadOnlyAttribute]
[DebuggerDisplayAttribute("{Value}")]
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.3.49-beta+91f5c15987")]
internal class Windows.Win32.Foundation.HRESULT : ValueType {
    internal int Value;
    internal static HRESULT E_NOINTERFACE;
    internal static HRESULT RPC_E_DISCONNECTED;
    internal static HRESULT RPC_E_RETRY;
    internal static HRESULT RPC_E_SERVERCALL_REJECTED;
    internal static HRESULT RPC_E_SERVERCALL_RETRYLATER;
    internal static HRESULT RPC_E_SYS_CALL_FAILED;
    [DebuggerBrowsableAttribute("0")]
internal bool Succeeded { get; }
    [DebuggerBrowsableAttribute("0")]
internal bool Failed { get; }
    internal HRESULT(int value);
    private static HRESULT();
    public static int op_Implicit(HRESULT value);
    public static HRESULT op_Explicit(int value);
    public static bool op_Equality(HRESULT left, HRESULT right);
    public static bool op_Inequality(HRESULT left, HRESULT right);
    public sealed virtual bool Equals(HRESULT other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public virtual string ToString();
    public static UInt32 op_Implicit(HRESULT value);
    public static HRESULT op_Explicit(UInt32 value);
    internal bool get_Succeeded();
    internal bool get_Failed();
    internal HRESULT ThrowOnFailure(IntPtr errorInfo);
    internal string ToString(string format, IFormatProvider formatProvider);
}
[IsReadOnlyAttribute]
[DebuggerDisplayAttribute("{Value}")]
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.3.49-beta+91f5c15987")]
internal class Windows.Win32.Foundation.HWND : ValueType {
    internal IntPtr Value;
    internal static HWND Null { get; }
    internal bool IsNull { get; }
    internal HWND(IntPtr value);
    internal static HWND get_Null();
    internal bool get_IsNull();
    public static IntPtr op_Implicit(HWND value);
    public static HWND op_Explicit(IntPtr value);
    public static bool op_Equality(HWND left, HWND right);
    public static bool op_Inequality(HWND left, HWND right);
    public sealed virtual bool Equals(HWND other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public virtual string ToString();
    public static HANDLE op_Implicit(HWND value);
}
[IsReadOnlyAttribute]
[DebuggerDisplayAttribute("{Value}")]
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.3.49-beta+91f5c15987")]
internal class Windows.Win32.Foundation.LPARAM : ValueType {
    [NativeIntegerAttribute]
internal IntPtr Value;
    internal LPARAM(IntPtr value);
    public static IntPtr op_Implicit(LPARAM value);
    public static LPARAM op_Implicit(IntPtr value);
    public static bool op_Equality(LPARAM left, LPARAM right);
    public static bool op_Inequality(LPARAM left, LPARAM right);
    public sealed virtual bool Equals(LPARAM other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public virtual string ToString();
}
[IsReadOnlyAttribute]
[DebuggerDisplayAttribute("{Value}")]
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.3.49-beta+91f5c15987")]
internal class Windows.Win32.Foundation.WPARAM : ValueType {
    [NativeIntegerAttribute]
internal UIntPtr Value;
    internal WPARAM(UIntPtr value);
    public static UIntPtr op_Implicit(WPARAM value);
    public static WPARAM op_Implicit(UIntPtr value);
    public static bool op_Equality(WPARAM left, WPARAM right);
    public static bool op_Inequality(WPARAM left, WPARAM right);
    public sealed virtual bool Equals(WPARAM other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public virtual string ToString();
}
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.3.49-beta+91f5c15987")]
internal static class Windows.Win32.PInvoke : object {
    [DefaultDllImportSearchPathsAttribute("2048")]
internal static BOOL CloseHandle(HANDLE hObject);
    [DefaultDllImportSearchPathsAttribute("2048")]
internal static HWND SetParent(HWND hWndChild, HWND hWndNewParent);
    internal static BOOL IsDialogMessageA(HWND hDlg, MSG& lpMsg);
    [DefaultDllImportSearchPathsAttribute("2048")]
internal static BOOL IsDialogMessageA(HWND hDlg, MSG* lpMsg);
}
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.3.49-beta+91f5c15987")]
internal class Windows.Win32.UI.WindowsAndMessaging.MSG : ValueType {
    internal HWND hwnd;
    internal UInt32 message;
    internal WPARAM wParam;
    internal LPARAM lParam;
    internal UInt32 time;
    internal Point pt;
}
