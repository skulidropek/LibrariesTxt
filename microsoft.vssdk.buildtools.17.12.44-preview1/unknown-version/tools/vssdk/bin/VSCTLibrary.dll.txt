[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
public class Microsoft.VisualStudio.CommandTable.Annotation : object {
    internal static string annotationElementTag;
    internal static string documentationElementTag;
    internal static string appinfoElenentTag;
    private string annotationXml;
    public string Documentation { get; public set; }
    public string AppInfo { get; public set; }
    public string AnnotationXml { get; }
    private Annotation(Annotation other);
    public Annotation(XmlNode node);
    private static Annotation();
    public static Annotation Read(XmlNode parentNode);
    public void Write(XmlNode parentNode);
    internal XmlElement _getElement(string elementName);
    public string get_Documentation();
    public void set_Documentation(string value);
    public string get_AppInfo();
    public void set_AppInfo(string value);
    public string get_AnnotationXml();
    public sealed virtual object Clone();
}
internal static class Microsoft.VisualStudio.CommandTable.AssemblyResources : object {
    private static ResourceManager resources;
    private static AssemblyResources();
    internal static string GetString(string name);
}
internal class Microsoft.VisualStudio.CommandTable.BinaryReadCTCStream : object {
    private BinaryReader dataReader;
    private string resourcesFile;
    private FileHeader fileHeader;
    private CommandTableCompression compressor;
    private string tempFileName;
    private IMessageProcessor messages;
    private CultureInfo culture;
    private GuidTable localGuidTable;
    private GuidTable globalGuidTable;
    private bool oldSymbolFormat;
    internal int sourceID;
    internal IMessageProcessor ErrorOut { get; internal set; }
    internal FormatVersion Version { get; internal set; }
    internal FileSignature Signature { get; internal set; }
    internal CultureInfo Culture { get; internal set; }
    internal bool CTM { get; internal set; }
    internal GuidTable LocalGuidTable { get; internal set; }
    internal GuidTable GlobalGuidTable { get; internal set; }
    internal bool OldSymbolFormat { get; internal set; }
    public string filename { get; }
    public bool eof { get; }
    public BinaryReadCTCStream(Byte[] rawData, string resourceFile);
    public BinaryReadCTCStream(string ctcFileName);
    internal IMessageProcessor get_ErrorOut();
    internal void set_ErrorOut(IMessageProcessor value);
    internal FormatVersion get_Version();
    internal void set_Version(FormatVersion value);
    internal FileSignature get_Signature();
    internal void set_Signature(FileSignature value);
    internal CultureInfo get_Culture();
    internal void set_Culture(CultureInfo value);
    internal bool get_CTM();
    internal void set_CTM(bool value);
    internal GuidTable get_LocalGuidTable();
    internal void set_LocalGuidTable(GuidTable value);
    internal GuidTable get_GlobalGuidTable();
    internal void set_GlobalGuidTable(GuidTable value);
    internal bool get_OldSymbolFormat();
    internal void set_OldSymbolFormat(bool value);
    public string get_filename();
    internal static bool IsCommandTableBinary(Byte[] rawData);
    public sealed virtual void Dispose();
    public void Open(Byte[] rawData, string resourcesFile);
    public void Open(string ctcFileName);
    public void Close();
    public bool get_eof();
    public void ReadAlign(int align);
    public void ReadBytes(Byte[] rg);
    public void ReadChars(Char[] rg);
    public Char[] ReadWChars(int nChars);
    public byte ReadByte();
    public ushort TranslateGID(ushort gid);
    public ushort ReadUInt16();
    public UInt32 ReadUInt32();
    public string ReadString();
    public string ReadString(UInt32 nBytes);
    public String[] ReadStringSet(UInt32 nBytes);
    public Guid ReadGuid();
}
internal class Microsoft.VisualStudio.CommandTable.BinaryWriteCTCStream : object {
    private BinaryWriter data;
    private FileStream stream;
    private FileHeader fileHeader;
    private long origin;
    private CommandTableCompression compressor;
    private IMessageProcessor messages;
    private CultureInfo culture;
    private bool insideChunk;
    private MemoryStream tempChunk;
    private BinaryWriter tempChunkWriter;
    internal IMessageProcessor ErrorOut { get; internal set; }
    internal FormatVersion Version { get; internal set; }
    internal FileSignature Signature { get; internal set; }
    internal UInt32 HashCode { get; internal set; }
    internal CultureInfo Culture { get; internal set; }
    internal bool CTM { get; internal set; }
    internal FileHeader FileHeader { get; }
    public long Position { get; }
    public BinaryWriteCTCStream(string ctcFileName);
    public BinaryWriteCTCStream(string ctcFileName, UInt32 hashcode);
    internal IMessageProcessor get_ErrorOut();
    internal void set_ErrorOut(IMessageProcessor value);
    internal FormatVersion get_Version();
    internal void set_Version(FormatVersion value);
    internal FileSignature get_Signature();
    internal void set_Signature(FileSignature value);
    internal UInt32 get_HashCode();
    internal void set_HashCode(UInt32 value);
    internal CultureInfo get_Culture();
    internal void set_Culture(CultureInfo value);
    internal bool get_CTM();
    internal void set_CTM(bool value);
    internal FileHeader get_FileHeader();
    internal void BeginChunk();
    internal void EndChunk();
    public void Open(string ctcFileName);
    public void Close();
    public long get_Position();
    public void Seek(long position);
    public void Flush();
    public void WriteAlign(int align);
    public void WriteBytes(Byte[] rg);
    internal void WriteBytes(Byte[] rg, int length);
    public void WriteChars(Char[] chars);
    public void WriteByte(byte b);
    public void WriteUInt16(ushort i);
    public void WriteUInt32(UInt32 i);
    public static ushort CalcStringSetSize(String[] stringList);
    public void WriteString(string s);
    public void WriteStringSet(String[] stringList);
    public void WriteGuid(Guid g);
    private sealed virtual override void System.IDisposable.Dispose();
}
internal class Microsoft.VisualStudio.CommandTable.BITMAPFILEHEADER : object {
    public ushort bfType;
    public UInt32 bfSize;
    public ushort bfReserved1;
    public ushort bfReserved2;
    public UInt32 bfOffBits;
}
internal class Microsoft.VisualStudio.CommandTable.BITMAPINFOHEADER : object {
    public UInt32 biSize;
    public int biWidth;
    public int biHeight;
    public ushort biPlanes;
    public ushort biBitCount;
    public UInt32 biCompression;
    public UInt32 biSizeImage;
    public int biYPelsPerMeter;
    public int biXPelsPerMeter;
    public UInt32 biClrUsed;
    public UInt32 biClrImportant;
}
public class Microsoft.VisualStudio.CommandTable.BitmapItem : Item {
    private static ArrayList defaultColors;
    internal ushort gidPackage;
    internal ushort gidResource;
    internal UInt32 idResource;
    internal UInt32[] slotsUsed;
    internal string filename;
    internal string sourceFile;
    internal ArrayList bitmapList;
    private static Regex itemExp;
    public ushort GID { get; }
    public UInt32 IDResource { get; }
    public UInt32[] UsedSlots { get; }
    internal Regex Expression { get; }
    internal string ItemTagXML { get; }
    public ushort gidPackageContext { get; }
    public UInt32 Count { get; }
    public BitmapItem(ushort gidBitmap, UInt32 idResource);
    public BitmapItem(ushort gidBitmap, string href);
    private static BitmapItem();
    public ushort get_GID();
    public UInt32 get_IDResource();
    public UInt32[] get_UsedSlots();
    internal virtual Regex get_Expression();
    internal virtual string get_ItemTagXML();
    public virtual ushort get_gidPackageContext();
    public UInt32 get_Count();
    private void Init();
    internal virtual void FormatXML(TextWriteVSCTCStream s, XmlElement xmlParentElement);
    internal virtual bool Read(TextReadVSCTCStream s, XmlElement itemNode);
    private PixelFormat ParsePixelFormat(string format);
    internal virtual string Format(ItemFormatter fp);
    internal virtual void Write(BinaryWriteCTCStream s);
    internal virtual bool Read(BinaryReadCTCStream s);
    private bool IsResourceNamePresent(Assembly asm, string resourceName);
    [IteratorStateMachineAttribute("Microsoft.VisualStudio.CommandTable.BitmapItem/<GetResourceManagerSearchList>d__34")]
private IEnumerable`1<ResourceManager> GetResourceManagerSearchList(Assembly assemblyForResources);
    public virtual int CompareTo(object obj);
    internal virtual void Translate(CommandTable ctFrom, CommandTable ctTo);
    internal virtual void Copy(Item other);
    public virtual bool Merge(Item other);
}
public class Microsoft.VisualStudio.CommandTable.BitmapItemList : ItemList {
    internal static TableSignature tableSignature;
    internal TableSignature TableSignature { get; }
    private static BitmapItemList();
    internal virtual TableSignature get_TableSignature();
    protected virtual Item ConstructItem();
    public BitmapItem Item(int nIndex);
    public Bitmap GetBitmap(ushort gidBitmap, UInt32 slot);
}
internal class Microsoft.VisualStudio.CommandTable.BSTRIP : object {
    public UInt32 olb;
    public UInt32 cbmp;
    public UInt32 dx;
    public UInt32 dy;
    public UInt32 dxsub;
    public UInt32 dysub;
}
public class Microsoft.VisualStudio.CommandTable.ButtonList : ItemList {
    internal static TableSignature tableSignature;
    internal static IndexTableType indexType;
    internal TableSignature TableSignature { get; }
    internal IndexTableType IndexTableType { get; }
    private static ButtonList();
    internal virtual TableSignature get_TableSignature();
    internal virtual IndexTableType get_IndexTableType();
    protected virtual Item ConstructItem();
    public CommandButton Item(int nIndex);
    internal virtual void WriteAdditionalFlags(BinaryWriteCTCStream s);
    internal virtual bool ReadAdditionalFlags(BinaryReadCTCStream s, UInt32 count);
}
public class Microsoft.VisualStudio.CommandTable.ComboList : ItemList {
    internal static TableSignature tableSignature;
    internal static IndexTableType indexType;
    internal TableSignature TableSignature { get; }
    internal IndexTableType IndexTableType { get; }
    private static ComboList();
    internal virtual TableSignature get_TableSignature();
    internal virtual IndexTableType get_IndexTableType();
    protected virtual Item ConstructItem();
    public CommandCombo Item(int nIndex);
    internal virtual void WriteAdditionalFlags(BinaryWriteCTCStream s);
    internal virtual bool ReadAdditionalFlags(BinaryReadCTCStream s, UInt32 count);
}
public class Microsoft.VisualStudio.CommandTable.CommandButton : CommandItem {
    internal UInt32 idIcon;
    internal ushort gidIcon;
    internal static Regex itemExp;
    public ulong FlagMask { get; }
    public UInt32 TypeMask { get; }
    internal Regex Expression { get; }
    internal string ItemTagXML { get; }
    public bool Shared { get; }
    public bool Appid { get; }
    public ushort IconGID { get; public set; }
    public UInt32 IconIndex { get; public set; }
    internal CommandButton(ushort gidPackage, ushort gidItem, UInt32 idItem, ushort gidParent, UInt32 idParent, UInt32 priority);
    private static CommandButton();
    public virtual ulong get_FlagMask();
    public virtual UInt32 get_TypeMask();
    internal virtual Regex get_Expression();
    internal virtual string get_ItemTagXML();
    public virtual bool get_Shared();
    public virtual bool get_Appid();
    public ushort get_IconGID();
    public void set_IconGID(ushort value);
    public UInt32 get_IconIndex();
    public void set_IconIndex(UInt32 value);
    internal virtual void FormatXML(TextWriteVSCTCStream s, XmlElement xmlParentElement);
    internal virtual bool Read(TextReadVSCTCStream s, XmlElement itemNode);
    internal virtual string Format(ItemFormatter fp);
    internal virtual bool Read(BinaryReadCTCStream s);
    internal virtual void Write(BinaryWriteCTCStream s);
    internal virtual void Translate(CommandTable ctFrom, CommandTable ctTo);
    internal virtual void Copy(Item other);
}
public class Microsoft.VisualStudio.CommandTable.CommandCombo : CommandItem {
    internal UInt32 idCommandList;
    internal UInt32 defaultWidth;
    internal static Regex itemExp;
    private static String[] expectedFields;
    internal ushort gidCommandList { get; }
    public ulong FlagMask { get; }
    public UInt32 TypeMask { get; }
    internal Regex Expression { get; }
    internal string ItemTagXML { get; }
    public bool Shared { get; }
    public bool Appid { get; }
    public UInt32 CommandListID { get; public set; }
    public UInt32 DefaultWidth { get; public set; }
    internal CommandCombo(ushort gidPackage, ushort gidItem, UInt32 idItem, ushort gidParent, UInt32 idParent, UInt32 priority);
    private static CommandCombo();
    internal ushort get_gidCommandList();
    public virtual ulong get_FlagMask();
    public virtual UInt32 get_TypeMask();
    internal virtual Regex get_Expression();
    internal virtual string get_ItemTagXML();
    public virtual bool get_Shared();
    public virtual bool get_Appid();
    public UInt32 get_CommandListID();
    public void set_CommandListID(UInt32 value);
    public UInt32 get_DefaultWidth();
    public void set_DefaultWidth(UInt32 value);
    internal virtual void FormatXML(TextWriteVSCTCStream s, XmlElement xmlParentElement);
    internal virtual bool Read(TextReadVSCTCStream s, XmlElement itemNode);
    internal virtual string Format(ItemFormatter fp);
    internal virtual bool Read(BinaryReadCTCStream s);
    internal virtual void Write(BinaryWriteCTCStream s);
    internal virtual void Translate(CommandTable ctFrom, CommandTable ctTo);
    internal virtual void Copy(Item other);
}
[FlagsAttribute]
public enum Microsoft.VisualStudio.CommandTable.CommandFlag : Enum {
    public ulong value__;
    public static CommandFlag NoKeyCustomize;
    public static CommandFlag NoButtonCustomize;
    public static CommandFlag NoCustomize;
    public static CommandFlag TextContextUseBtn;
    public static CommandFlag TextChanges;
    public static CommandFlag DefaultDisabled;
    public static CommandFlag DefaultInvisible;
    public static CommandFlag DynamicVisibility;
    public static CommandFlag ComboCommitsOnDrop;
    public static CommandFlag DynamicItemStart;
    public static CommandFlag CommandWellOnly;
    public static CommandFlag Pict;
    public static CommandFlag Text;
    public static CommandFlag IconAndText;
    public static CommandFlag AllowParams;
    public static CommandFlag FilterKeys;
    public static CommandFlag PostExec;
    public static CommandFlag DontCache;
    public static CommandFlag FixMenuController;
    public static CommandFlag NoShowOnMenuController;
    public static CommandFlag RouteToDocuments;
    public static CommandFlag NoAutoComplete;
    public static CommandFlag TextMenuUseBtn;
    public static CommandFlag TextMenuCtrlUseMnu;
    public static CommandFlag TextCascadeUseBtn;
    public static CommandFlag CaseSensitive;
    public static CommandFlag DefaultDocked;
    public static CommandFlag AllowVisibilityChangeOnToolBar;
    public static CommandFlag NoToolbarClose;
    public static CommandFlag AllowClientRole;
    public static CommandFlag NotInTbList;
    public static CommandFlag AlwaysCreate;
    public static CommandFlag ProfferedCmd;
    public static CommandFlag TextIsAnchorCommand;
    public static CommandFlag StretchHorizontally;
    public static CommandFlag IconIsMoniker;
    public static CommandFlag TogglePatternAvailable;
    public static CommandFlag SelectionPatternAvailable;
    public static CommandFlag DynamicAutomationName;
    public static CommandFlag RemoteCommandOverride;
    public static CommandFlag AsyncFromUIInvocation;
}
public class Microsoft.VisualStudio.CommandTable.CommandGroup : CommandItem {
    internal CommandGroupFlag groupFlags;
    internal static Regex itemExp;
    internal Regex Expression { get; }
    internal string ItemTagXML { get; }
    public CommandGroupFlag GroupFlags { get; public set; }
    internal CommandGroup(ushort gidItem, UInt32 idItem, ushort gidParent, UInt32 idParent, UInt32 priority);
    private static CommandGroup();
    internal virtual Regex get_Expression();
    internal virtual string get_ItemTagXML();
    public CommandGroupFlag get_GroupFlags();
    public void set_GroupFlags(CommandGroupFlag value);
    internal virtual void FormatXML(TextWriteVSCTCStream s, XmlElement xmlParentElement);
    internal virtual bool Read(TextReadVSCTCStream s, XmlElement itemNode);
    internal virtual string Format(ItemFormatter fp);
    internal virtual bool Read(BinaryReadCTCStream s);
    internal virtual void Write(BinaryWriteCTCStream s);
    internal virtual void Copy(Item other);
}
[FlagsAttribute]
public enum Microsoft.VisualStudio.CommandTable.CommandGroupFlag : Enum {
    public UInt32 value__;
    public static CommandGroupFlag Dynamic;
}
public abstract class Microsoft.VisualStudio.CommandTable.CommandItem : Item {
    internal ushort gidPackage;
    internal ushort gidItem;
    internal ushort gidParent;
    internal UInt32 idItem;
    internal UInt32 idParent;
    internal UInt32 priority;
    private Hashtable stringListSet;
    protected CommandType type;
    protected CommandFlag flags;
    public ushort GID { get; }
    public ushort ParentGID { get; }
    public UInt32 ID { get; }
    public UInt32 ParentID { get; }
    public UInt32 Priority { get; public set; }
    public string ButtonText { get; }
    public string CanonicalName { get; }
    public string CommandWellText { get; }
    public string LocalizedCanonicalName { get; }
    public string MenuText { get; }
    public string ToolTipText { get; }
    public UInt32 TypeMask { get; }
    public ulong FlagMask { get; }
    public CommandFlag Flags { get; public set; }
    public CommandType Type { get; public set; }
    public ushort gidPackageContext { get; }
    public ushort get_GID();
    public ushort get_ParentGID();
    public UInt32 get_ID();
    public UInt32 get_ParentID();
    public UInt32 get_Priority();
    public void set_Priority(UInt32 value);
    public string get_ButtonText();
    public string get_CanonicalName();
    public string get_CommandWellText();
    public string get_LocalizedCanonicalName();
    public string get_MenuText();
    public string get_ToolTipText();
    public virtual UInt32 get_TypeMask();
    public virtual ulong get_FlagMask();
    public CommandFlag get_Flags();
    public void set_Flags(CommandFlag value);
    public CommandType get_Type();
    public void set_Type(CommandType value);
    internal virtual void SetStringList(CultureInfo culture, String[] strings);
    private CultureInfo CultureMatch(CultureInfo culture);
    internal CultureInfo GetBestCultureMatch(CultureInfo culture);
    internal virtual String[] GetStringList(CultureInfo culture);
    internal virtual String[] CreateStringList(CultureInfo culture);
    public string GetMenuText(int nIndexItem, CultureInfo culture);
    public virtual string GetText(StringSetIndices nIndexItem, CultureInfo culture);
    public void SetMenuText(int nIndexItem, string text, CultureInfo culture);
    public virtual void SetText(StringSetIndices nIndexItem, string text, CultureInfo culture);
    public virtual ushort get_gidPackageContext();
    public virtual int ItemCompare(object other);
    internal int CommandItemCompare(object other);
    internal int ParentCompare(object other);
    public bool IsMyParent(object otheritem);
    internal virtual bool Read(BinaryReadCTCStream s);
    internal virtual void Write(BinaryWriteCTCStream s);
    internal void WriteAdditionalFlags(BinaryWriteCTCStream s);
    internal bool ReadAdditionalFlags(BinaryReadCTCStream s);
    public virtual int CompareTo(object obj);
    internal virtual void FormatXML(TextWriteVSCTCStream s, XmlElement xmlParentElement);
    internal bool WriteType(TextWriteVSCTCStream s, XmlElement itemNode);
    internal bool WriteFlags(TextWriteVSCTCStream s, XmlElement itemNode);
    internal bool WriteStrings(TextWriteVSCTCStream s, XmlElement itemNode);
    internal CommandType ReadType(TextReadVSCTCStream s, XmlElement itemNode);
    internal CommandFlag ReadFlags(TextReadVSCTCStream s, XmlElement itemNode);
    internal bool ReadStrings(TextReadVSCTCStream s, XmlElement itemNode);
    internal virtual bool Read(TextReadVSCTCStream s, XmlElement itemNode);
    internal virtual string Format(ItemFormatter fp);
    internal virtual void Translate(CommandTable ctFrom, CommandTable ctTo);
    internal virtual void Copy(Item other);
}
public class Microsoft.VisualStudio.CommandTable.CommandKeyBinding : CommandItem {
    internal ushort gidEmulation;
    internal ushort sortIndex;
    internal byte bKey1;
    internal KeyModifier bModifier1;
    internal byte bKey2;
    internal KeyModifier bModifier2;
    private static Regex itemExp;
    public ushort EmulationGID { get; }
    public ushort EditorGID { get; }
    public byte Key1 { get; public set; }
    public byte Key2 { get; public set; }
    public KeyModifier Modifier1 { get; public set; }
    public KeyModifier Modifier2 { get; public set; }
    internal Regex Expression { get; }
    internal string ItemTagXML { get; }
    public CommandKeyBinding(ushort gidItem, UInt32 idItem, ushort gidEditor, ushort gidEmulator);
    private static CommandKeyBinding();
    public ushort get_EmulationGID();
    public ushort get_EditorGID();
    public byte get_Key1();
    public void set_Key1(byte value);
    public byte get_Key2();
    public void set_Key2(byte value);
    public KeyModifier get_Modifier1();
    public void set_Modifier1(KeyModifier value);
    public KeyModifier get_Modifier2();
    public void set_Modifier2(KeyModifier value);
    internal virtual Regex get_Expression();
    internal virtual string get_ItemTagXML();
    internal void SetKeyChord(XmlElement itemNode);
    internal void SetKeyChord(string chord);
    internal virtual bool Read(BinaryReadCTCStream s);
    internal virtual void Write(BinaryWriteCTCStream s);
    internal int _CompareKeyCommands(CommandKeyBinding other);
    public virtual int CompareTo(object obj);
    internal virtual void FormatXML(TextWriteVSCTCStream s, XmlElement xmlParentElement);
    internal virtual bool Read(TextReadVSCTCStream s, XmlElement itemNode);
    internal virtual string Format(ItemFormatter fp);
    internal virtual void Translate(CommandTable ctFrom, CommandTable ctTo);
    internal virtual void Copy(Item other);
}
public class Microsoft.VisualStudio.CommandTable.CommandMenu : CommandItem {
    internal ushort stringBytes;
    internal static Regex itemExp;
    internal static string formatText;
    public ulong FlagMask { get; }
    public UInt32 TypeMask { get; }
    unknown CommandType typeorflags {public set; }
    internal Regex Expression { get; }
    internal string ItemTagXML { get; }
    internal CommandMenu(ushort gidPackage, ushort gidItem, UInt32 idItem, ushort gidParent, UInt32 idParent, UInt32 priority);
    private static CommandMenu();
    public virtual ulong get_FlagMask();
    public virtual UInt32 get_TypeMask();
    public void set_typeorflags(CommandType value);
    internal virtual Regex get_Expression();
    internal virtual string get_ItemTagXML();
    internal virtual void FormatXML(TextWriteVSCTCStream s, XmlElement xmlParentElement);
    internal virtual bool Read(TextReadVSCTCStream s, XmlElement itemNode);
    internal virtual string Format(ItemFormatter fp);
    internal virtual bool Read(BinaryReadCTCStream s);
    internal virtual void Write(BinaryWriteCTCStream s);
    internal virtual void Copy(Item other);
}
public class Microsoft.VisualStudio.CommandTable.CommandPlacement : CommandItem {
    internal static Regex itemExp;
    internal static string placementElementTag;
    internal Regex Expression { get; }
    internal string ItemTagXML { get; }
    internal CommandPlacement(ushort gidItem, UInt32 idItem, ushort gidParent, UInt32 idParent, UInt32 priority);
    private static CommandPlacement();
    internal virtual Regex get_Expression();
    internal virtual string get_ItemTagXML();
    public virtual void Notify(UpdateHint hint);
}
public class Microsoft.VisualStudio.CommandTable.CommandTable : object {
    internal static Guid guidGroupUndefined;
    internal static Guid guidPkgUndefined;
    internal static Guid guidOfficeIcon;
    internal static UInt32 msotcidNoIcon;
    internal static Guid guidNoScope;
    internal StringCollection includePaths;
    internal Hashtable preprocessorDefines;
    internal string preprocessorPath;
    internal int codePage;
    internal CultureInfo culture;
    internal int nextMergedTableID;
    private Hashtable commandTableInfo;
    internal bool symbolsSupplied;
    private FileHeader fileHeader;
    protected GuidTable guidTable;
    protected MenuList menuList;
    protected ButtonList buttonList;
    protected ComboList comboList;
    protected GroupList groupList;
    protected BitmapItemList bitmapList;
    protected PlacementList placementList;
    protected VisibilityList visibilityList;
    protected KeyBindingList keybindingList;
    protected UsedCommandList usedcommandList;
    protected SymbolicNameTableList symbolsList;
    protected IndexList indexList;
    private bool dirtyIndex;
    private bool dirtyCommandTable;
    private bool readOnly;
    public CultureInfo Culture { get; public set; }
    public FormatVersion Version { get; }
    public FileSignature Signature { get; }
    public bool ContainsSymbols { get; }
    public bool IndexRebuildNeeded { get; }
    public bool Dirty { get; public set; }
    public bool ReadOnly { get; public set; }
    unknown string PreprocessorPath {public set; }
    unknown int CodePage {public set; }
    private static CommandTable();
    public CultureInfo get_Culture();
    public void set_Culture(CultureInfo value);
    public CommandTableInfo GetCommandTableInfo(int sourceID);
    public FormatVersion get_Version();
    public FileSignature get_Signature();
    public bool get_ContainsSymbols();
    internal List`1<ItemList> GetItemLists();
    public bool get_IndexRebuildNeeded();
    public bool get_Dirty();
    public void set_Dirty(bool value);
    public bool get_ReadOnly();
    public void set_ReadOnly(bool value);
    public string GetKeyModifierString(KeyModifier flags);
    public string GetFlagsString(CommandItem item);
    public string GetTypeString(CommandType type);
    internal GuidTable GetGuidTable();
    internal SymbolicNameTableList GetSymbolsList();
    public KeyBindingList GetKeyBindingList();
    public PlacementList GetPlacementList();
    public VisibilityList GetVisibilityList();
    public MenuList GetMenuList();
    public GroupList GetGroupList();
    public ButtonList GetButtonList();
    public BitmapItemList GetBitmapList();
    public ComboList GetComboList();
    public UsedCommandList GetUsedCommandList();
    public IndexList GetIndex();
    public void BuildIndex();
    private ItemList GetIndexedList(IndexTableType type);
    public bool Save(string fileName, SaveOptions so, IMessageProcessor errorProcessor);
    public void AddAdditionalIncludes(String[] additionalIncludes);
    private void AddAdditionalPreprocessorDefines(Hashtable defines);
    public void AddAdditionalPreprocessorDefines(StringCollection additionalDefines);
    internal void AddPreprocessorDefine(string name, string value);
    public void set_PreprocessorPath(string value);
    public void set_CodePage(int value);
    public bool Read(Byte[] data, string source, IMessageProcessor errorProcessor);
    public bool Read(Byte[] data, string source, ReadOptions ro, IMessageProcessor errorProcessor);
    public bool Read(Assembly assembly, IMessageProcessor errorProcessor);
    public bool Read(Assembly assembly, ReadOptions ro, IMessageProcessor errorProcessor);
    public bool Read(string fileName, IMessageProcessor errorProcessor, string resouceID);
    public bool Read(string fileName, IMessageProcessor errorProcessor);
    public bool Read(string fileName, string resourceName, IMessageProcessor errorProcessor);
    public bool Read(string fileName, ReadOptions ro, IMessageProcessor errorProcessor);
    internal bool Read(TextReadVSCTCStream s);
    private bool ReadCMDSSection(TextReadVSCTCStream s, XmlElement listNode);
    internal bool Read(TextReadCTCStream s);
    private bool ReadCMDSSection(TextReadCTCStream s);
    internal virtual bool Read(BinaryReadCTCStream s);
    public virtual bool MergeCommandTable(CommandTable ct, bool symbolsOnly);
    internal virtual bool Write(ICTCTextFormat s);
    internal virtual void Write(BinaryWriteCTCStream s);
    private void Sort();
    private void Validate(IMessageProcessor error);
    public bool ImportSymbols(string symbolsFile, StringCollection includePaths, IMessageProcessor error);
    public void EmitSymbols(string symbolsFile, string outputFile, string namespaceName, CodeDomProvider codeProvider);
    public void EmitSymbols(string outputFile, string namespaceName, CodeDomProvider codeProvider);
    private void GenerateCommandIdClasses(CodeNamespace codeNamespace);
    public void EmitCSSymbols(string fileName, string namespaceName);
    public void EmitHeaderSymbols(string symbolsFile, string outputHeaderName);
    public string CreateItemSnippet(Item item);
    public CommandItem GetIndexedItem(ushort gidItem, UInt32 idItem);
    private bool GetCommandPackage(ushort gidCommand, UInt32 idCommand, Guid& guidPackage);
    public CommandItem GetParent(ushort gidItem, UInt32 idItem);
    public CommandItem[] GetPlacements(ushort gidItem, UInt32 idItem);
    public CommandItem[] GetChildren(ushort gidItem, UInt32 idItem);
    public CommandKeyBinding[] GetKeyBindings(ushort gidItem, UInt32 idItem);
    public VisibilityItem[] GetVisibilities(ushort gidItem, UInt32 idItem);
    public UsedCommandItem[] GetUsed(ushort gidItem, UInt32 idItem);
    public ushort GetIDFromGuid(Guid guid);
    public Guid GetGuidFromID(ushort id);
    public string FindGuidSymbol(Guid guid);
    public bool RenameGuidSymbol(Guid guid, string newname);
    public string FindIDSymbol(Guid guid, UInt32 id);
    public String[] GetGuidSymbols();
    public String[] GetIDSymbols(Guid guid);
    public Guid FindSymbolGuid(string symbol);
    public bool FindSymbolID(Guid guid, string symbol, UInt32& id);
    public ushort AddGuidSymbol(Guid guid, string symbol);
    public ushort TranslateID(CommandTable ctSource, ushort importGID, UInt32 importID);
    public bool AddIDSymbol(Guid guid, UInt32 id, string symbol);
    public bool RenameIDSymbol(Guid guid, UInt32 id, string symbol);
    public CommandButton CreateButton(ushort gidPackage, ushort gidItem, UInt32 idItem, ushort gidParent, UInt32 idParent, UInt32 priority);
    public CommandCombo CreateCombo(ushort gidPackage, ushort gidItem, UInt32 idItem, ushort gidParent, UInt32 idParent, UInt32 priority);
    public CommandMenu CreateMenu(ushort gidPackage, ushort gidItem, UInt32 idItem, ushort gidParent, UInt32 idParent, UInt32 priority);
    public CommandGroup CreateGroup(ushort gidItem, UInt32 idItem, ushort gidParent, UInt32 idParent, UInt32 priority);
    public CommandPlacement CreatePlacement(ushort gidItem, UInt32 idItem, ushort gidParent, UInt32 idParent, UInt32 priority);
    public BitmapItem CreateBitmap(ushort gidBitmap, UInt32 idResource);
    public BitmapItem CreateBitmap(ushort gidBitmap, string href);
    public CommandKeyBinding CreateKeyBinding(ushort gidItem, UInt32 idItem, ushort gidEditor, ushort gidEmulator);
    public VisibilityItem CreateVisibility(ushort gidCommand, UInt32 idCommand, ushort gidContext);
    public Item ImportExternalItem(CommandTable ctExternal, Item itemExternal);
}
public class Microsoft.VisualStudio.CommandTable.CommandTableCompiler : object {
    private StringCollection searchPath;
    private StringCollection additionalDefines;
    private string objectFileName;
    private string initialDirectory;
    private IMessageProcessor messages;
    private Process procCompiler;
    private Thread threadErrors;
    public IMessageProcessor ErrorOut { get; public set; }
    public IMessageProcessor get_ErrorOut();
    public void set_ErrorOut(IMessageProcessor value);
    private void fnErrorPump();
    public CommandTable Compile(string fileNameIn, int codePage, string fileNameOut, string cppCommand, StringCollection includePaths, StringCollection preprocessorDefines, string fileNameSymbols);
}
public abstract class Microsoft.VisualStudio.CommandTable.CommandTableCompression : object {
    public bool Chunky { get; }
    public bool EOF { get; }
    public abstract virtual bool get_Chunky();
    public abstract virtual bool get_EOF();
    public abstract virtual void Close();
    public abstract virtual void Write(Byte[] bytes, int length);
    public abstract virtual void ReadBytes(Byte[] bytes);
    public abstract virtual void Write(Byte[] bytes);
    public abstract virtual void ReadChars(Char[] chars);
    public abstract virtual void Write(Char[] chars);
    public abstract virtual Char[] ReadChars(int length);
    public abstract virtual ushort ReadUInt16();
    public abstract virtual void Write(ushort value);
    public abstract virtual UInt32 ReadUInt32();
    public abstract virtual void Write(UInt32 value);
    public abstract virtual byte ReadByte();
    public abstract virtual void Write(byte value);
    public sealed virtual void Dispose();
}
public enum Microsoft.VisualStudio.CommandTable.CommandType : Enum {
    public UInt32 value__;
    public static CommandType Separator;
    public static CommandType Button;
    public static CommandType MenuButton;
    public static CommandType Swatch;
    public static CommandType SplitDropDown;
    public static CommandType DropDownCombo;
    public static CommandType MRUCombo;
    public static CommandType DynamicCombo;
    public static CommandType OwnerDropDownCombo;
    public static CommandType IndexCombo;
    public static CommandType Menu;
    public static CommandType MenuController;
    public static CommandType MenuToolbar;
    public static CommandType MenuContext;
    public static CommandType MenuToolWindowToolbar;
    public static CommandType MenuControllerLatched;
    public static CommandType Shared;
    public static CommandType AppID;
}
[FlagsAttribute]
public enum Microsoft.VisualStudio.CommandTable.CommandTypeMask : Enum {
    public UInt32 value__;
    public static CommandTypeMask Combos;
    public static CommandTypeMask Buttons;
    public static CommandTypeMask Controls;
    public static CommandTypeMask Menus;
    public static CommandTypeMask ClientRoleAllowed;
    public static CommandTypeMask MenuFlags;
    public static CommandTypeMask Shared;
}
public enum Microsoft.VisualStudio.CommandTable.CommandVisibility : Enum {
    public int value__;
    public static CommandVisibility NotVisible;
    public static CommandVisibility Visible;
    public static CommandVisibility NotInTable;
}
internal class Microsoft.VisualStudio.CommandTable.Condition : object {
    private string conditionText;
    internal string Expression { get; }
    internal Condition(string expression);
    private Condition(Condition other);
    internal string get_Expression();
    internal static Condition Combine(Condition condition1, Condition condition2);
    public virtual string ToString();
    internal bool Evaluate(Hashtable definitions);
    internal static Condition Read(TextReadVSCTCStream s, XmlNode parentNode);
    internal void Write(XmlNode parentNode);
    public sealed virtual int CompareTo(object obj);
    public sealed virtual object Clone();
}
internal class Microsoft.VisualStudio.CommandTable.Conditionals.AndExpressionNode : GenericExpressionNode {
    private ExpressionTree expressionTree;
    internal AndExpressionNode(ExpressionTree expressionTree);
    internal virtual void DumpNode(int depth);
    internal virtual bool BoolEvaluate(Boolean& value);
    internal virtual bool NumericEvaluate(Single& value);
    internal virtual bool CanBoolEvaluate();
    internal virtual bool CanNumericEvaluate();
}
internal class Microsoft.VisualStudio.CommandTable.Conditionals.CharacterUtilities : object {
    internal static bool IsNumberStart(char candidate);
    internal static bool IsSimpleStringStart(char candidate);
    internal static bool IsSimpleStringChar(char candidate);
    internal static bool IsHexAlphabetic(char candidate);
    internal static bool IsHexDigit(char candidate);
}
internal class Microsoft.VisualStudio.CommandTable.Conditionals.ConditionError : object {
    internal static TextReadVSCTCStream stream;
    internal static XmlNode node;
    internal static void ReportInvalidCondition(XmlAttribute conditionAttribute, string resourceName, Object[] args);
}
internal static class Microsoft.VisualStudio.CommandTable.Conditionals.ConversionUtilities : object {
    internal static bool ConvertStringToBool(string parameterValue);
    internal static bool CanConvertStringToBool(string parameterValue);
    internal static bool ValidBooleanTrue(string parameterValue);
    internal static bool ValidBooleanFalse(string parameterValue);
    internal static float ConvertDecimalToFloat(string number, NumberFormatInfo numberFormat);
    internal static float ConvertHexToFloat(string number, NumberFormatInfo numberFormat);
    internal static bool ValidHexNumber(string number, NumberFormatInfo numberFormat);
    internal static bool ValidDecimalNumber(string number, NumberFormatInfo numberFormat);
}
internal class Microsoft.VisualStudio.CommandTable.Conditionals.EqualExpressionNode : GenericExpressionNode {
    private bool conditionedPropertiesUpdated;
    private ExpressionTree parentTree;
    internal EqualExpressionNode(ExpressionTree parentTree);
    internal virtual void DumpNode(int depth);
    internal virtual bool BoolEvaluate(Boolean& value);
    internal virtual bool NumericEvaluate(Single& value);
    internal virtual bool CanBoolEvaluate();
    internal virtual bool CanNumericEvaluate();
}
internal static class Microsoft.VisualStudio.CommandTable.Conditionals.ErrorUtilities : object {
    private static void ThrowInternalError(bool showAssert, string unformattedMessage, Object[] args);
    internal static void VerifyThrowNoAssert(bool condition, string unformattedMessage);
    internal static void VerifyThrow(bool condition, string unformattedMessage);
    internal static void VerifyThrow(bool condition, string unformattedMessage, object arg0);
    internal static void VerifyThrow(bool condition, string unformattedMessage, object arg0, object arg1);
    internal static void VerifyThrow(bool condition, string unformattedMessage, object arg0, object arg1, object arg2);
    internal static void VerifyThrow(bool condition, string unformattedMessage, object arg0, object arg1, object arg2, object arg3);
    private static void ThrowInvalidOperation(string resourceName, Object[] args);
    internal static void VerifyThrowInvalidOperation(bool condition, string resourceName);
    internal static void VerifyThrowInvalidOperation(bool condition, string resourceName, object arg0);
    internal static void VerifyThrowInvalidOperation(bool condition, string resourceName, object arg0, object arg1);
    internal static void VerifyThrowInvalidOperation(bool condition, string resourceName, object arg0, object arg1, object arg2);
    private static void ThrowArgument(Exception innerException, string resourceName, Object[] args);
    internal static void VerifyThrowArgument(bool condition, string resourceName);
    internal static void VerifyThrowArgument(bool condition, string resourceName, object arg0);
    internal static void VerifyThrowArgument(bool condition, string resourceName, object arg0, object arg1);
    internal static void VerifyThrowArgument(bool condition, Exception innerException, string resourceName);
    internal static void VerifyThrowArgument(bool condition, Exception innerException, string resourceName, object arg0);
    internal static void VerifyThrowArgument(bool condition, Exception innerException, string resourceName, object arg0, object arg1);
    internal static void VerifyThrowArgumentOutOfRange(bool condition, string parameterName);
    internal static void VerifyThrowArgumentLength(string parameter, string parameterName);
    internal static void VerifyThrowArgumentNull(object parameter, string parameterName);
}
internal static class Microsoft.VisualStudio.CommandTable.Conditionals.EscapingUtilities : object {
    private static Char[] charsToEscape;
    private static EscapingUtilities();
    internal static string UnescapeAll(string escapedString);
    internal static string UnescapeAll(string escapedString, Boolean& escapingWasNecessary);
    internal static string Escape(string unescapedString);
    private static bool ContainsReservedCharacters(string unescapedString);
    internal static bool ContainsEscapedWildcards(string escapedString);
}
internal class Microsoft.VisualStudio.CommandTable.Conditionals.Expander : object {
    private Hashtable primaryItemsByName;
    private Hashtable secondaryItemsByName;
    private Hashtable itemMetadata;
    internal Hashtable PrimaryItemsByName { get; }
    internal Hashtable SecondaryItemsByName { get; }
    internal Hashtable ItemMetadata { get; }
    internal Expander(Hashtable primaryItemsByName);
    internal Expander(Hashtable primaryItemsByName, Hashtable secondaryItemsByName, Hashtable itemMetadata);
    internal Hashtable get_PrimaryItemsByName();
    internal Hashtable get_SecondaryItemsByName();
    internal Hashtable get_ItemMetadata();
    internal string ExpandAllIntoString(XmlAttribute expressionAttribute);
    internal string ExpandAllIntoString(string expression, XmlNode expressionNode);
    internal string ExpandAllIntoStringLeaveEscaped(XmlAttribute expressionAttribute);
    internal string ExpandAllIntoStringLeaveEscaped(string expression, XmlNode expressionNode);
    internal List`1<string> ExpandAllIntoStringList(string expression, XmlNode expressionNode);
    internal List`1<string> ExpandAllIntoStringList(XmlAttribute expressionAttribute);
    internal List`1<string> ExpandAllIntoStringListLeaveEscaped(string expression, XmlNode expressionNode);
    internal List`1<string> ExpandAllIntoStringListLeaveEscaped(XmlAttribute expressionAttribute);
    private string ExpandMetadataLeaveEscaped(string expression);
    private string ExpandSingleMetadata(Match itemMetadataMatch);
    internal static List`1<string> SplitSemiColonSeparatedList_ForUnitTestsOnly(string expression);
    private static List`1<string> SplitSemiColonSeparatedList(string expression);
}
internal class Microsoft.VisualStudio.CommandTable.Conditionals.ExpressionTree : object {
    private GenericExpressionNode rootNode;
    private Expander expander;
    private Hashtable conditionedPropertiesTable;
    private XmlAttribute conditionAttribute;
    private string parsedCondition;
    private static Regex singlePropertyRegex;
    internal Expander Expander { get; }
    internal Hashtable ConditionedProperties { get; }
    internal XmlAttribute ConditionAttribute { get; }
    internal string ParsedCondition { get; }
    unknown GenericExpressionNode Root {internal set; }
    internal ExpressionTree(XmlAttribute conditionAttribute, string parsedCondition);
    private static ExpressionTree();
    internal bool Evaluate(Boolean& value, Expander expanderToUse, Hashtable conditionedPropertiesInProject);
    internal Expander get_Expander();
    internal Hashtable get_ConditionedProperties();
    internal XmlAttribute get_ConditionAttribute();
    internal string get_ParsedCondition();
    internal int Depth();
    internal int ChildCount();
    internal void DumpTree();
    internal void set_Root(GenericExpressionNode value);
    internal static void UpdateConditionedPropertiesTable(Hashtable conditionedPropertiesTable, string leftValue, string rightValueExpanded);
}
internal class Microsoft.VisualStudio.CommandTable.Conditionals.FunctionCallExpressionNode : GenericExpressionNode {
    private ArrayList arglist;
    private string functionName;
    private ExpressionTree parentTree;
    internal FunctionCallExpressionNode(string fcnname, ArrayList args, ExpressionTree tree);
    internal virtual void DumpNode(int depth);
    internal virtual bool BoolEvaluate(Boolean& value);
    private string ExpandArgumentForScalarParameter(string function, GenericExpressionNode argumentNode);
    private void VerifyArgumentCount(int expected);
    internal virtual bool NumericEvaluate(Single& value);
    internal virtual bool CanBoolEvaluate();
    internal virtual bool CanNumericEvaluate();
}
internal abstract class Microsoft.VisualStudio.CommandTable.Conditionals.GenericExpressionNode : object {
    protected GenericExpressionNode leftChild;
    protected GenericExpressionNode rightChild;
    internal GenericExpressionNode LeftChild { get; internal set; }
    internal GenericExpressionNode RightChild { get; internal set; }
    internal abstract virtual bool BoolEvaluate(Boolean& value);
    internal abstract virtual bool NumericEvaluate(Single& value);
    internal abstract virtual bool CanBoolEvaluate();
    internal abstract virtual bool CanNumericEvaluate();
    internal abstract virtual void DumpNode(int depth);
    protected void DumpNodeHelper(string type, int depth, bool recurse);
    protected void PrintWhite(int count);
    internal int Depth();
    internal int ChildCount();
    internal virtual string GetExpandedValue();
    internal virtual string GetUnexpandedValue();
    internal void set_LeftChild(GenericExpressionNode value);
    internal GenericExpressionNode get_LeftChild();
    internal void set_RightChild(GenericExpressionNode value);
    internal GenericExpressionNode get_RightChild();
}
internal class Microsoft.VisualStudio.CommandTable.Conditionals.GreaterThanExpressionNode : GenericExpressionNode {
    private ExpressionTree expressionTree;
    internal GreaterThanExpressionNode(ExpressionTree expressionTree);
    internal virtual void DumpNode(int depth);
    internal virtual bool BoolEvaluate(Boolean& value);
    internal virtual bool NumericEvaluate(Single& value);
    internal virtual bool CanBoolEvaluate();
    internal virtual bool CanNumericEvaluate();
}
internal class Microsoft.VisualStudio.CommandTable.Conditionals.GreaterThanOrEqualExpressionNode : GenericExpressionNode {
    private ExpressionTree expressionTree;
    internal GreaterThanOrEqualExpressionNode(ExpressionTree expressionTree);
    internal virtual void DumpNode(int depth);
    internal virtual bool BoolEvaluate(Boolean& value);
    internal virtual bool NumericEvaluate(Single& value);
    internal virtual bool CanBoolEvaluate();
    internal virtual bool CanNumericEvaluate();
}
internal class Microsoft.VisualStudio.CommandTable.Conditionals.InternalErrorException : Exception {
    internal InternalErrorException(string message);
    internal InternalErrorException(string message, bool showAssert);
    internal InternalErrorException(string message, Exception innerException);
    private void ShowAssertDialog(bool showAssert);
}
internal class Microsoft.VisualStudio.CommandTable.Conditionals.ItemExpander : object {
    internal static string itemVectorPrefix;
    internal static string itemTypeOrMetadataNameSpecification;
    private static string itemVectorSpecification;
    private static string itemVectorWithoutSeparatorSpecification;
    internal static Regex itemVectorPattern;
    internal static Regex listOfItemVectorsWithoutSeparatorsPattern;
    internal static string itemMetadataPrefix;
    private static string itemMetadataSpecification;
    internal static Regex itemMetadataPattern;
    private static string itemVectorWithTransformLHS;
    private static string itemVectorWithTransformRHS;
    internal static Regex nonTransformItemMetadataPattern;
    private Hashtable itemGroupsByType;
    private bool ignoreUnknownItemTypes;
    private XmlNode parentNode;
    private ItemExpander(XmlNode parentNode, Hashtable itemGroupsByType);
    private ItemExpander(XmlNode parentNode, Hashtable itemGroupsByType, bool ignoreUnknownItemTypes);
    private static ItemExpander();
}
internal class Microsoft.VisualStudio.CommandTable.Conditionals.LessThanExpressionNode : GenericExpressionNode {
    private ExpressionTree expressionTree;
    internal LessThanExpressionNode(ExpressionTree expressionTree);
    internal virtual void DumpNode(int depth);
    internal virtual bool BoolEvaluate(Boolean& value);
    internal virtual bool NumericEvaluate(Single& value);
    internal virtual bool CanBoolEvaluate();
    internal virtual bool CanNumericEvaluate();
}
internal class Microsoft.VisualStudio.CommandTable.Conditionals.LessThanOrEqualExpressionNode : GenericExpressionNode {
    private ExpressionTree expressionTree;
    internal LessThanOrEqualExpressionNode(ExpressionTree expressionTree);
    internal virtual void DumpNode(int depth);
    internal virtual bool BoolEvaluate(Boolean& value);
    internal virtual bool NumericEvaluate(Single& value);
    internal virtual bool CanBoolEvaluate();
    internal virtual bool CanNumericEvaluate();
}
internal class Microsoft.VisualStudio.CommandTable.Conditionals.NotEqualExpressionNode : GenericExpressionNode {
    private bool conditionedPropertiesUpdated;
    private ExpressionTree parentTree;
    internal NotEqualExpressionNode(ExpressionTree pt);
    internal virtual void DumpNode(int depth);
    internal virtual bool BoolEvaluate(Boolean& value);
    internal virtual bool NumericEvaluate(Single& value);
    internal virtual bool CanBoolEvaluate();
    internal virtual bool CanNumericEvaluate();
}
internal class Microsoft.VisualStudio.CommandTable.Conditionals.NotExpressionNode : GenericExpressionNode {
    private ExpressionTree expressionTree;
    internal NotExpressionNode(ExpressionTree expressionTree);
    internal virtual void DumpNode(int depth);
    internal virtual bool BoolEvaluate(Boolean& value);
    internal virtual bool NumericEvaluate(Single& value);
    internal virtual bool CanBoolEvaluate();
    internal virtual bool CanNumericEvaluate();
    internal virtual string GetUnexpandedValue();
    internal virtual string GetExpandedValue();
}
internal class Microsoft.VisualStudio.CommandTable.Conditionals.NumericExpressionNode : GenericExpressionNode {
    private string stringValue;
    internal NumericExpressionNode(string value);
    internal virtual void DumpNode(int depth);
    internal virtual bool BoolEvaluate(Boolean& value);
    internal virtual bool NumericEvaluate(Single& value);
    internal virtual bool CanBoolEvaluate();
    internal virtual bool CanNumericEvaluate();
    internal virtual string GetUnexpandedValue();
    internal virtual string GetExpandedValue();
}
internal class Microsoft.VisualStudio.CommandTable.Conditionals.OrExpressionNode : GenericExpressionNode {
    private ExpressionTree expressionTree;
    internal OrExpressionNode(ExpressionTree expressionTree);
    internal virtual void DumpNode(int depth);
    internal virtual bool BoolEvaluate(Boolean& value);
    internal virtual bool NumericEvaluate(Single& value);
    internal virtual bool CanBoolEvaluate();
    internal virtual bool CanNumericEvaluate();
}
internal class Microsoft.VisualStudio.CommandTable.Conditionals.Parser : object {
    private Scanner lexer;
    private ExpressionTree tree;
    private XmlAttribute conditionAttribute;
    private ParserOptions options;
    internal int errorPosition;
    internal ExpressionTree Parse(string expression, XmlAttribute conditionAttributeRef, ParserOptions optionSettings);
    private GenericExpressionNode Expr(string expression);
    private GenericExpressionNode ExprPrime(string expression, GenericExpressionNode lhs);
    private GenericExpressionNode BooleanTerm(string expression);
    private GenericExpressionNode BooleanTermPrime(string expression, GenericExpressionNode lhs);
    private GenericExpressionNode RelationalExpr(string expression);
    private GenericExpressionNode RelationalOperation(string expression);
    private GenericExpressionNode Factor(string expression);
    private void Arglist(string expression, ArrayList arglist);
    private void Args(string expression, ArrayList arglist);
    private GenericExpressionNode Arg(string expression);
    private bool Same(string expression, TokenType token);
}
[FlagsAttribute]
internal enum Microsoft.VisualStudio.CommandTable.Conditionals.ParserOptions : Enum {
    public int value__;
    public static ParserOptions None;
    public static ParserOptions AllowProperties;
    public static ParserOptions AllowItemLists;
    public static ParserOptions AllowItemMetadata;
    public static ParserOptions AllowAll;
}
internal static class Microsoft.VisualStudio.CommandTable.Conditionals.ResourceUtilities : object {
    private static Regex msbuildMessageCodePattern;
    private static ResourceUtilities();
    internal static string ExtractMessageCode(Regex messageCodePattern, string messageWithCode, String& code);
    private static string GetHelpKeyword(string resourceName);
    internal static string FormatResourceString(String& code, String& helpKeyword, string resourceName, Object[] args);
    internal static string FormatResourceString(string resourceName, Object[] args);
    internal static string FormatString(string unformatted, Object[] args);
}
internal class Microsoft.VisualStudio.CommandTable.Conditionals.Scanner : object {
    private string expression;
    private int parsePoint;
    private Token lookahead;
    private bool errorState;
    private int errorPosition;
    private string unexpectedlyFound;
    private ParserOptions options;
    private string errorResource;
    internal Token CurrentToken { get; }
    internal string UnexpectedlyFound { get; }
    internal Scanner(string expressionToParse, ParserOptions options);
    internal string GetErrorResource();
    internal bool IsNext(TokenType type);
    internal string IsNextString();
    internal Token get_CurrentToken();
    internal int GetErrorPosition();
    internal string get_UnexpectedlyFound();
    internal bool Advance();
    private string ParsePropertyOrItemMetadata();
    private bool ParseProperty();
    private bool ParseItemMetadata();
    private bool ParseInternalItemList();
    private bool ParseItemList();
    private bool ParseQuotedString();
    private bool ParseRemaining();
    private bool ParseSimpleStringOrFunction(int start);
    private bool ParseNumeric(int start);
    private void SkipWhiteSpace();
    private void SkipDigits();
    private void SkipHexDigits();
    private void SkipSimpleStringChars();
}
internal class Microsoft.VisualStudio.CommandTable.Conditionals.StringExpressionNode : GenericExpressionNode {
    private string stringValue;
    private ExpressionTree parentTree;
    internal StringExpressionNode(string value, ExpressionTree tree);
    internal virtual void DumpNode(int depth);
    internal virtual bool BoolEvaluate(Boolean& value);
    internal virtual bool NumericEvaluate(Single& value);
    internal virtual bool CanBoolEvaluate();
    internal virtual bool CanNumericEvaluate();
    internal virtual string GetUnexpandedValue();
    internal virtual string GetExpandedValue();
}
internal class Microsoft.VisualStudio.CommandTable.Conditionals.Token : object {
    private TokenType tokenType;
    private string tokenString;
    internal TokenType Type { get; }
    internal string String { get; }
    internal Token(TokenType type, string tokenString);
    internal bool IsToken(TokenType type);
    internal TokenType get_Type();
    internal string get_String();
}
internal class Microsoft.VisualStudio.CommandTable.CTCStreamChunkHolder : object {
    private BinaryWriteCTCStream writer;
    public CTCStreamChunkHolder(BinaryWriteCTCStream ctcWriter);
    public void Close();
    public sealed virtual void Dispose();
}
public static class Microsoft.VisualStudio.CommandTable.CTMenuResourceExtractor : object {
    private static int nativeResourceID;
    private static ResourceManager GetVSPackageResources(Assembly assemblyForResources);
    [IteratorStateMachineAttribute("Microsoft.VisualStudio.CommandTable.CTMenuResourceExtractor/<AllCommandTablesInAssembly>d__2")]
public static IEnumerable`1<Byte[]> AllCommandTablesInAssembly(Assembly assemblyForResources, CultureInfo culture);
    private static Byte[] ExtractCommandTableFromResources(ResourceManager resMgr, string resourceName, CultureInfo culture);
    public static Byte[] ExtractCommandTable(Assembly assemblyForResources, string resourceName, CultureInfo culture, IMessageProcessor errorProcessor);
    public static IEnumerable`1<Byte[]> AllCommandTablesInNativeResources(string filename, IMessageProcessor errorProcessor);
    public static Byte[] ExtractCommandTable(string filename, int idRes, IMessageProcessor errorProcessor);
}
internal class Microsoft.VisualStudio.CommandTable.DeflateCompressor : CommandTableCompression {
    private DeflateStream compressor;
    private MemoryStream writeBuffer;
    private BinaryWriter bufferedWriter;
    private BinaryReader reader;
    public bool Chunky { get; }
    public bool EOF { get; }
    public DeflateCompressor(Stream destination, CompressionMode mode);
    public virtual bool get_Chunky();
    public virtual bool get_EOF();
    private void ForceFlush();
    private void Flush();
    public virtual void Close();
    public virtual byte ReadByte();
    public virtual void Write(byte value);
    public virtual void ReadBytes(Byte[] bytes);
    public virtual void Write(Byte[] bytes, int length);
    public virtual void Write(Byte[] bytes);
    public virtual void ReadChars(Char[] chars);
    public virtual Char[] ReadChars(int length);
    public virtual void Write(Char[] chars);
    public virtual ushort ReadUInt16();
    public virtual void Write(ushort value);
    public virtual UInt32 ReadUInt32();
    public virtual void Write(UInt32 value);
}
internal class Microsoft.VisualStudio.CommandTable.FileHeader : object {
    internal FileSignature signature;
    internal FormatVersion version;
    internal UInt32 hashorsize;
    internal UInt32 nextOffset;
    internal UInt32 totalStringSize;
    internal bool CTM;
    public UInt32 Size { get; }
    public UInt32 Hash { get; internal set; }
    public UInt32 get_Size();
    public UInt32 get_Hash();
    internal void set_Hash(UInt32 value);
    internal bool Read(BinaryReadCTCStream s);
    internal bool Write(BinaryWriteCTCStream s);
}
public enum Microsoft.VisualStudio.CommandTable.FileSignature : Enum {
    public UInt32 value__;
    public static FileSignature OldSignature;
    public static FileSignature NewSignature;
}
public class Microsoft.VisualStudio.CommandTable.FlagMap : object {
    private static Hashtable map;
    private static Hashtable mapReverse;
    public static String[] Values { get; }
    private static void Init();
    private static void InitReverseMap();
    private static void InitMap();
    public static String[] get_Values();
    public static CommandFlag Convert(string flags);
    public static CommandFlag Convert(string flags, ulong mask, String& unknown);
    public static string Convert(CommandItem item);
}
public enum Microsoft.VisualStudio.CommandTable.FormatVersion : Enum {
    public UInt32 value__;
    public static FormatVersion CurrentVersion;
    public static FormatVersion VSKVS2005Version;
    public static FormatVersion VSKVSCurrentVersion;
}
public class Microsoft.VisualStudio.CommandTable.GroupFlagMap : object {
    private static Hashtable map;
    private static Hashtable mapReverse;
    public static String[] Values { get; }
    private static void Init();
    private static void InitReverseMap();
    private static void InitMap();
    public static String[] get_Values();
    public static CommandGroupFlag Convert(string flags);
    public static string Convert(CommandGroupFlag flags);
}
public class Microsoft.VisualStudio.CommandTable.GroupList : ItemList {
    internal static TableSignature tableSignature;
    internal static IndexTableType indexType;
    internal TableSignature TableSignature { get; }
    internal IndexTableType IndexTableType { get; }
    private static GroupList();
    internal virtual TableSignature get_TableSignature();
    internal virtual IndexTableType get_IndexTableType();
    protected virtual Item ConstructItem();
    public CommandGroup Item(int nIndex);
}
public enum Microsoft.VisualStudio.CommandTable.GUID_ID : Enum {
    public ushort value__;
}
internal class Microsoft.VisualStudio.CommandTable.GuidFormats : object {
    internal static Regex guidExpression1;
    internal static Regex guidExpression2;
    private static GuidFormats();
}
public class Microsoft.VisualStudio.CommandTable.GuidTable : object {
    protected Hashtable guidList;
    protected Guid guidVersionID;
    internal Guid[] GetGuidArray();
    internal void MergeTable(GuidTable table);
    internal ushort Add(Guid g);
    public ushort GetIDFromGuid(Guid g);
    public Guid GetGuidFromID(ushort idFind);
    internal virtual bool Read(BinaryReadCTCStream s);
    internal virtual void Write(BinaryWriteCTCStream s);
}
public class Microsoft.VisualStudio.CommandTable.HRESULT : object {
    public static int S_OK;
    public static int E_FAIL;
}
public interface Microsoft.VisualStudio.CommandTable.ICommandItemObserver {
    public abstract virtual void Update(UpdateHint hint);
}
internal interface Microsoft.VisualStudio.CommandTable.ICTCTextFormat {
    public string CommandSectionTag { get; }
    public string CommandTableTag { get; }
    public string AppIDPrefix { get; }
    public string SharedPrefix { get; }
    public abstract virtual void Open(string folderName);
    public abstract virtual void Close();
    public abstract virtual void BeginHeaderFile();
    public abstract virtual void EndHeaderFile();
    public abstract virtual void BeginCTCFile();
    public abstract virtual void EndCTCFile();
    public abstract virtual void BeginSection(string sectionName, Guid guidContext);
    public abstract virtual void EndSection();
    public abstract virtual void BeginSubSection(string subsectionName);
    public abstract virtual void EndSubSection();
    public abstract virtual void WriteItem(Item item);
    public abstract virtual void BeginGuidDefinitions();
    public abstract virtual void EndGuidDefinitions();
    public abstract virtual void WriteGuidDefinition(string symbol, Guid guid);
    public abstract virtual void BeginIDDefinitions();
    public abstract virtual void EndIDDefinitions();
    public abstract virtual void WriteIDDefinition(string symbol, UInt32 id);
    public abstract virtual string get_CommandSectionTag();
    public abstract virtual string get_CommandTableTag();
    public abstract virtual string SectionTag(TableSignature ts);
    public abstract virtual string get_AppIDPrefix();
    public abstract virtual string get_SharedPrefix();
}
public interface Microsoft.VisualStudio.CommandTable.IMessageProcessor {
    public abstract virtual void Error(int error, string file, int line, int pos, string message);
    public abstract virtual void Warning(int error, string file, int line, int pos, string message);
    public abstract virtual void Dependency(string file);
    public abstract virtual void WriteLine(string format, Object[] arg);
    public abstract virtual bool VerboseOutput();
}
public class Microsoft.VisualStudio.CommandTable.IndexItem : Item {
    public ushort gidCommand;
    public UInt32 idCommand;
    public IndexTableType tableType;
    public int tableIndex;
    internal Regex Expression { get; }
    internal string ItemTagXML { get; }
    internal IndexItem(ushort gidCommand, UInt32 idCommand, IndexTableType tableType, int tableIndex);
    internal virtual Regex get_Expression();
    internal virtual string get_ItemTagXML();
    internal virtual bool Read(BinaryReadCTCStream s);
    internal virtual void Write(BinaryWriteCTCStream s);
    internal virtual void Translate(CommandTable ctFrom, CommandTable ctTo);
    public virtual int CompareTo(object obj);
}
public class Microsoft.VisualStudio.CommandTable.IndexList : ItemList {
    internal static TableSignature tableSignature;
    internal TableSignature TableSignature { get; }
    private ArrayList indexCommands { get; }
    private static IndexList();
    internal virtual TableSignature get_TableSignature();
    protected virtual Item ConstructItem();
    public IndexItem Item(int nIndex);
    private ArrayList get_indexCommands();
    public void BuildIndex(ItemList[] itemListArray);
    internal virtual void Sort();
    public virtual int FindFirst(ushort gidCommand, UInt32 idCommand);
}
public enum Microsoft.VisualStudio.CommandTable.IndexTableType : Enum {
    public int value__;
    public static IndexTableType Generic;
    public static IndexTableType Buttons;
    public static IndexTableType Combos;
    public static IndexTableType Menus;
    public static IndexTableType Groups;
    public static IndexTableType Placements;
}
public abstract class Microsoft.VisualStudio.CommandTable.Item : object {
    internal int sourceID;
    private ArrayList observerList;
    internal Annotation annotation;
    internal Condition condition;
    internal bool enabled;
    public int SourceID { get; }
    internal Regex Expression { get; }
    internal string ItemTagXML { get; }
    public ushort gidPackageContext { get; }
    public bool Shared { get; }
    public bool Appid { get; }
    public int get_SourceID();
    internal abstract virtual Regex get_Expression();
    internal abstract virtual string get_ItemTagXML();
    public void AddObserver(ICommandItemObserver observer);
    public void RemoveObserver(ICommandItemObserver observer);
    public virtual void Notify(UpdateHint hint);
    public virtual ushort get_gidPackageContext();
    public virtual bool get_Shared();
    public virtual bool get_Appid();
    protected internal static int _Compare(ushort o1, ushort o2);
    protected internal static int _Compare(UInt32 o1, UInt32 o2);
    internal virtual void FormatXML(TextWriteVSCTCStream s, XmlElement xmlParentElement);
    internal virtual bool Read(TextReadVSCTCStream s, XmlElement itemNode);
    internal virtual string Format(ItemFormatter fp);
    internal virtual void Write(ICTCTextFormat s);
    internal virtual bool Read(BinaryReadCTCStream s);
    internal abstract virtual void Write(BinaryWriteCTCStream s);
    public abstract virtual int CompareTo(object obj);
    public virtual int ItemCompare(object obj);
    internal virtual void Translate(CommandTable ctFrom, CommandTable ctTo);
    internal virtual void Copy(Item other);
    public sealed virtual object Clone();
    public virtual bool Merge(Item other);
}
public class Microsoft.VisualStudio.CommandTable.ItemFormatter : object {
    private CommandTable commandTable;
    public string GuidFormat { get; }
    public string NumberFormat { get; }
    public GuidTable CommandGuids { get; }
    public CultureInfo Culture { get; }
    public SymbolicNameTableList CommandSymbols { get; }
    public ItemFormatter(CommandTable ct);
    public string get_GuidFormat();
    public string get_NumberFormat();
    public CommandTableInfo GetCommandTableInfo(int sourceID);
    public GuidTable get_CommandGuids();
    public CultureInfo get_Culture();
    public SymbolicNameTableList get_CommandSymbols();
    public sealed virtual string Format(string format, object arg, IFormatProvider formatProvider);
    public sealed virtual object GetFormat(Type formatType);
}
public abstract class Microsoft.VisualStudio.CommandTable.ItemList : object {
    private Item dummyItem;
    protected ArrayList list;
    internal Annotation annotation;
    internal Condition condition;
    internal TableSignature TableSignature { get; }
    internal IndexTableType IndexTableType { get; }
    public int Count { get; }
    public int CountEnabled { get; }
    public sealed virtual IEnumerator GetEnumerator();
    internal abstract virtual TableSignature get_TableSignature();
    internal virtual IndexTableType get_IndexTableType();
    internal bool TypeCompatible(Item child);
    protected abstract virtual Item ConstructItem();
    public Item Items(int nItem);
    public void Add(Item item);
    public int get_Count();
    public int get_CountEnabled();
    public void CopyTo(int index, Array array, int arrayIndex, int count);
    public void CopyTo(Array array, int arrayIndex);
    public void CopyTo(Array array);
    internal virtual bool Read(TextReadVSCTCStream s, XmlElement listNode);
    internal virtual bool Read(TextReadCTCStream s);
    internal virtual void Write(ICTCTextFormat s);
    internal virtual void Write(BinaryWriteCTCStream s);
    internal virtual bool Read(BinaryReadCTCStream s);
    internal virtual bool ReadAdditionalFlags(BinaryReadCTCStream s, UInt32 count);
    internal virtual void WriteAdditionalFlags(BinaryWriteCTCStream s);
    internal virtual void Validate(CommandTable ct, IMessageProcessor error);
    internal virtual void Sort();
    public virtual int FindFirst(ushort gidParent, UInt32 idParent);
}
public class Microsoft.VisualStudio.CommandTable.KeyBindingList : ItemList {
    internal static TableSignature tableSignature;
    internal TableSignature TableSignature { get; }
    private static KeyBindingList();
    internal virtual TableSignature get_TableSignature();
    protected virtual Item ConstructItem();
    public CommandKeyBinding Item(int nIndex);
    internal virtual void Sort();
}
[FlagsAttribute]
public enum Microsoft.VisualStudio.CommandTable.KeyModifier : Enum {
    public UInt32 value__;
    public static KeyModifier Alt;
    public static KeyModifier Shift;
    public static KeyModifier Control;
}
public class Microsoft.VisualStudio.CommandTable.MenuList : ItemList {
    internal static TableSignature tableSignature;
    internal static IndexTableType indexType;
    internal TableSignature TableSignature { get; }
    internal IndexTableType IndexTableType { get; }
    private static MenuList();
    internal virtual TableSignature get_TableSignature();
    internal virtual IndexTableType get_IndexTableType();
    protected virtual Item ConstructItem();
    public CommandMenu Item(int nIndex);
    internal virtual void WriteAdditionalFlags(BinaryWriteCTCStream s);
    internal virtual bool ReadAdditionalFlags(BinaryReadCTCStream s, UInt32 count);
}
public class Microsoft.VisualStudio.CommandTable.PlacementList : ItemList {
    internal static TableSignature tableSignature;
    internal static IndexTableType indexType;
    internal TableSignature TableSignature { get; }
    internal IndexTableType IndexTableType { get; }
    private static PlacementList();
    internal virtual TableSignature get_TableSignature();
    internal virtual IndexTableType get_IndexTableType();
    protected virtual Item ConstructItem();
    public CommandPlacement Item(int nIndex);
}
public class Microsoft.VisualStudio.CommandTable.ReadOptions : object {
    private CultureInfo culture;
    private ReadFormat format;
    [CompilerGeneratedAttribute]
private string <ResourceName>k__BackingField;
    public CultureInfo Culture { get; public set; }
    public string ResourceName { get; public set; }
    public int ResourceID { get; }
    public ReadFormat Format { get; }
    public ReadOptions(ReadFormat format);
    public ReadOptions(ReadFormat format, CultureInfo culture);
    public ReadOptions(ReadFormat format, string resourceName);
    public ReadOptions(ReadFormat format, int resourceID);
    public CultureInfo get_Culture();
    public void set_Culture(CultureInfo value);
    [CompilerGeneratedAttribute]
public string get_ResourceName();
    [CompilerGeneratedAttribute]
public void set_ResourceName(string value);
    public int get_ResourceID();
    public ReadFormat get_Format();
}
public class Microsoft.VisualStudio.CommandTable.SaveOptions : object {
    private CultureInfo culture;
    private string namespaceName;
    private SaveFormat format;
    [CompilerGeneratedAttribute]
private UInt32 <HashCode>k__BackingField;
    public UInt32 HashCode { get; public set; }
    public CultureInfo Culture { get; }
    public string Namespace { get; }
    public SaveFormat Format { get; }
    public SaveOptions(SaveFormat format);
    public SaveOptions(SaveFormat format, CultureInfo culture);
    public SaveOptions(SaveFormat format, string namespaceName);
    [CompilerGeneratedAttribute]
public UInt32 get_HashCode();
    [CompilerGeneratedAttribute]
public void set_HashCode(UInt32 value);
    public CultureInfo get_Culture();
    public string get_Namespace();
    public SaveFormat get_Format();
}
public enum Microsoft.VisualStudio.CommandTable.StringSetIndices : Enum {
    public UInt32 value__;
    public static StringSetIndices Button;
    public static StringSetIndices Menu;
    public static StringSetIndices ToolTip;
    public static StringSetIndices CommandWell;
    public static StringSetIndices Canonical;
    public static StringSetIndices LocalizedCanonical;
}
public class Microsoft.VisualStudio.CommandTable.SymbolicNameTable : object {
    internal bool inverted;
    internal Hashtable idMap;
    private List`1<string> names;
    private Guid context;
    public string Name { get; }
    public Guid Context { get; }
    public SymbolicNameTable(Guid context, string name);
    public bool IsEmpty();
    public void Rename(string newname);
    public void AddName(string newname);
    public bool HasName(string name);
    public bool ContainsID(UInt32 id);
    public void AddID(UInt32 id, string name);
    public void RenameID(UInt32 id, string idSymbol);
    public string FindSymbolForID(UInt32 id);
    public bool FindIdForSymbol(string symbol, UInt32& idRet);
    public String[] GetSymbols();
    public string get_Name();
    public Guid get_Context();
    internal UInt32 CalcSize();
    internal void Write(BinaryWriteCTCStream s);
    internal void Read(BinaryReadCTCStream s);
}
public class Microsoft.VisualStudio.CommandTable.SymbolicNameTableList : object {
    private Hashtable map;
    internal SymbolicNameTableList externalSymbols;
    internal StringCollection importedFiles;
    internal StringCollection ignoreableHeaders;
    internal Hashtable markers;
    internal static string idSymbolicNameElementTag;
    internal static string externElementTag;
    internal static string includeElementTag;
    internal static string guidSymbolicNameElementTag;
    internal static string symbolsElementTag;
    internal static string refAttributeTag;
    internal static string nameAttributeTag;
    internal static string valueAttributeTag;
    internal static string externAttributeValue;
    private SymbolicNameTableList(SymbolicNameTableList internalSymbols);
    private static SymbolicNameTableList();
    public void CompileSymbols(string inputName, string outputSymbolsName, string cppCommand, StringCollection includePaths, StringCollection preprocessorDefines);
    internal bool ImportSymbolsXML(TextReadVSCTCStream s);
    public bool ImportSymbols(string fileName, StringCollection includePaths, IMessageProcessor error);
    internal bool ImportSymbolsHeader(string fileName, StringCollection includePaths, IMessageProcessor error);
    private bool EvalueateIfExpression(string expression);
    internal bool ImportSymbolsText(string fileName, StringCollection includePaths, IMessageProcessor error);
    internal void Write(ICTCTextFormat s);
    internal UInt32 CalcSize();
    internal void Write(BinaryWriteCTCStream s);
    internal bool Read(BinaryReadCTCStream s);
    public bool MergeSymbols(SymbolicNameTableList symbols);
    public void AddGuidSymbol(Guid guidContext, string sContext);
    public bool RenameGuidSymbol(Guid guidContext, string sContext);
    public void AddIDSymbol(Guid guidContext, string sContext, UInt32 id, string sId);
    public bool RenameIDSymbol(Guid guidContext, UInt32 id, string sId);
    public string FindGuidSymbol(Guid guidContext);
    public Guid FindSymbolGuid(string sContext);
    public string FindIDSymbol(Guid guidContext, UInt32 id);
    public bool FindSymbolID(Guid guidContext, string sId, UInt32& idRet);
    public String[] GetGuidSymbols();
    public String[] GetIDSymbols(Guid guidContext);
    private string ChopComment(string line, Boolean& commentBlock);
}
public class Microsoft.VisualStudio.CommandTable.SymbolTableCompiler : object {
    public StringCollection searchPath;
    public StringCollection additionalDefines;
    public string fileName;
    public string symbolsFileName;
    public Hashtable symbolMap;
    public Hashtable includeMap;
    public string initialDirectory;
    private IMessageProcessor messages;
    private Process procCompiler;
    private Thread threadErrors;
    public IMessageProcessor ErrorOut { get; public set; }
    public IMessageProcessor get_ErrorOut();
    public void set_ErrorOut(IMessageProcessor value);
    private void fnErrorPump();
    public void Compile(string fileNameIn, string fileNameOut, string cppCommand, StringCollection includePaths, StringCollection preprocessorDefines);
    private StreamReader OpenFile(string filename);
    private void Read(string sFile);
}
internal enum Microsoft.VisualStudio.CommandTable.TableSignature : Enum {
    public UInt32 value__;
    public static TableSignature Menus;
    public static TableSignature Groups;
    public static TableSignature Placements;
    public static TableSignature Visibilities;
    public static TableSignature Buttons;
    public static TableSignature Combos;
    public static TableSignature KeyBindings;
    public static TableSignature Editors;
    public static TableSignature Emulations;
    public static TableSignature CommandIndex;
    public static TableSignature Bitmaps;
    public static TableSignature UsedCommands;
    public static TableSignature SymbolicNames;
    public static TableSignature AdditionalFlags;
}
internal class Microsoft.VisualStudio.CommandTable.TextCTCStreamBase : object {
    protected Guid guidPackageContext;
    protected IMessageProcessor messages;
    protected GuidTable guidTable;
    protected SymbolicNameTableList symbolTable;
    protected Hashtable preprocessorDefines;
    protected CultureInfo culture;
    public string CurrentNamespace;
    internal int sourceID;
    public IMessageProcessor ErrorOut { get; public set; }
    public GuidTable GuidTable { get; public set; }
    public SymbolicNameTableList SymbolTable { get; public set; }
    public Hashtable PreprocessorDefines { get; public set; }
    public CultureInfo Culture { get; public set; }
    public Guid PackageGontext { get; public set; }
    public IMessageProcessor get_ErrorOut();
    public void set_ErrorOut(IMessageProcessor value);
    public GuidTable get_GuidTable();
    public void set_GuidTable(GuidTable value);
    public SymbolicNameTableList get_SymbolTable();
    public void set_SymbolTable(SymbolicNameTableList value);
    public Hashtable get_PreprocessorDefines();
    public void set_PreprocessorDefines(Hashtable value);
    public CultureInfo get_Culture();
    public void set_Culture(CultureInfo value);
    internal static string ResolveFileReference(string filename, StringCollection includePaths);
    internal static byte ExtractKeystroke(string key);
    internal static KeyModifier ExtractKeyModifier(string mod);
    public static string GetModString(KeyModifier mod);
    public static string GetModString2(KeyModifier mod);
    public static string GetKeyChord(byte ch1, KeyModifier mod1, byte ch2, KeyModifier mod2);
    public Guid get_PackageGontext();
    public void set_PackageGontext(Guid value);
}
internal class Microsoft.VisualStudio.CommandTable.TextReadCTCStream : TextCTCStreamBase {
    private int codePage;
    private StringCollection includePaths;
    private string preprocessorPath;
    private FileStream file;
    private StreamReader stream;
    private CommandType sectionTypeFlags;
    internal CommandType SectionType { get; internal set; }
    public string SharedPrefix { get; }
    public string AppidPrefix { get; }
    public string CommandSectionTag { get; }
    public string CommandTableTag { get; }
    public int CodePage { get; public set; }
    public StringCollection IncludePaths { get; public set; }
    public string PreprocessorPath { get; public set; }
    public bool eof { get; }
    public TextReadCTCStream(string fileName);
    internal CommandType get_SectionType();
    internal void set_SectionType(CommandType value);
    public string get_SharedPrefix();
    public string get_AppidPrefix();
    public string get_CommandSectionTag();
    public string get_CommandTableTag();
    public string EndSectionTag(TableSignature ts);
    public string BeginSectionTag(TableSignature ts);
    public string SectionTag(TableSignature ts);
    public void Error(int n, string message, string context);
    public void Warning(int n, string message, string context);
    public int get_CodePage();
    public void set_CodePage(int value);
    public StringCollection get_IncludePaths();
    public void set_IncludePaths(StringCollection value);
    public string get_PreprocessorPath();
    public void set_PreprocessorPath(string value);
    internal string ResolveFileReference(string filename);
    public bool Open(string fileName);
    public bool get_eof();
    public void Close();
    public string ReadLine();
    private sealed virtual override void System.IDisposable.Dispose();
}
internal class Microsoft.VisualStudio.CommandTable.TextReadVSCTCStream : TextCTCStreamBase {
    private StringCollection includePaths;
    private string filename;
    private string condition;
    private bool ignoreConditionals;
    private StringCollection cultureNamesUsed;
    private XmlDocument document;
    private Dictionary`2<XmlNode, IXmlLineInfo> lineTable;
    private XmlReader reader;
    private CommandType sectionTypeFlags;
    internal CommandType SectionType { get; internal set; }
    internal string CurrentCondition { get; internal set; }
    internal bool IgnoreConditionals { get; internal set; }
    public string SharedPrefix { get; }
    public string AppidPrefix { get; }
    public string CommandSectionTag { get; }
    public string CommandTableTag { get; }
    public XmlDocument Document { get; }
    public StringCollection IncludePaths { get; public set; }
    public bool eof { get; }
    public TextReadVSCTCStream(string fileName);
    internal CommandType get_SectionType();
    internal void set_SectionType(CommandType value);
    internal string get_CurrentCondition();
    internal void set_CurrentCondition(string value);
    internal bool get_IgnoreConditionals();
    internal void set_IgnoreConditionals(bool value);
    public string get_SharedPrefix();
    public string get_AppidPrefix();
    public string get_CommandSectionTag();
    public string get_CommandTableTag();
    public string SectionTag(TableSignature ts);
    public XmlDocument get_Document();
    public bool ReadHeaders();
    public void ErrorUndefinedAttributeValue(string value, string attribute, string element, XmlAttribute node);
    public void ErrorUndefinedAttributeValue(XmlAttribute attribute);
    public void MissingAttributeError(string attribute, XmlElement node);
    public void Error(int n, string message, XmlNode node);
    public void Warning(int n, string message, XmlNode node);
    internal void VerifyAttributeExistence(XmlElement itemNode, string field);
    internal void VerifyAttributeExistence(XmlElement itemNode, String[] fields);
    public StringCollection get_IncludePaths();
    public void set_IncludePaths(StringCollection value);
    internal string ResolveFileReference(string filename);
    public bool Open(string fileName);
    public bool get_eof();
    public void Close();
    private void AddToTable(XmlNode node);
    public IXmlLineInfo GetLineInfo(XmlNode node);
    private void LoadDocument();
    private XmlAttribute LoadAttributeNode();
    private XmlDeclaration LoadDeclarationNode();
    private void UnexpectedNodeType(XmlNodeType type);
    private sealed virtual override void System.IDisposable.Dispose();
}
internal enum Microsoft.VisualStudio.CommandTable.TextSection : Enum {
    public int value__;
    public static TextSection Commands;
    public static TextSection Placement;
    public static TextSection Visibility;
    public static TextSection KeyBindings;
    public static TextSection Editors;
    public static TextSection Emulations;
    public static TextSection UsedCommands;
    public static TextSection Invalid;
}
internal enum Microsoft.VisualStudio.CommandTable.TextSubSection : Enum {
    public int value__;
    public static TextSubSection Menus;
    public static TextSubSection Groups;
    public static TextSubSection Buttons;
    public static TextSubSection Combos;
    public static TextSubSection Bitmaps;
    public static TextSubSection SharedButtons;
    public static TextSubSection SharedCombos;
    public static TextSubSection AppIDButtons;
    public static TextSubSection AppIDCombos;
    public static TextSubSection Invalid;
}
internal class Microsoft.VisualStudio.CommandTable.TextWriteCTCStream : TextCTCStreamBase {
    private string headerFileName;
    private string ctcFileName;
    private StreamWriter streamHeaderFile;
    private StreamWriter streamCTCFile;
    private string currentSectionName;
    private string currentSubsectionName;
    private ItemFormatter formatProvider;
    public ItemFormatter Formatter { get; }
    public string SharedPrefix { get; }
    public string AppIDPrefix { get; }
    public string CommandSectionTag { get; }
    public string CommandTableTag { get; }
    public TextWriteCTCStream(ItemFormatter fp);
    public TextWriteCTCStream(string filename, ItemFormatter fp);
    public ItemFormatter get_Formatter();
    public sealed virtual string get_SharedPrefix();
    public sealed virtual string get_AppIDPrefix();
    public sealed virtual string get_CommandSectionTag();
    public sealed virtual string get_CommandTableTag();
    public sealed virtual string SectionTag(TableSignature ts);
    public sealed virtual void Open(string filename);
    public void Open(string headerFilePath, string ctcFilePath);
    public sealed virtual void Close();
    public sealed virtual void BeginHeaderFile();
    public sealed virtual void EndHeaderFile();
    public sealed virtual void BeginCTCFile();
    public sealed virtual void EndCTCFile();
    public sealed virtual void BeginSection(string sectionName, Guid guidContext);
    public sealed virtual void EndSection();
    public sealed virtual void BeginSubSection(string subsectionName);
    public sealed virtual void EndSubSection();
    public sealed virtual void WriteItem(Item item);
    public sealed virtual void BeginGuidDefinitions();
    public sealed virtual void EndGuidDefinitions();
    public sealed virtual void WriteGuidDefinition(string symbol, Guid guid);
    public sealed virtual void BeginIDDefinitions();
    public sealed virtual void EndIDDefinitions();
    public sealed virtual void WriteIDDefinition(string symbol, UInt32 id);
    private sealed virtual override void System.IDisposable.Dispose();
}
internal class Microsoft.VisualStudio.CommandTable.TextWriteVSCTCStream : TextCTCStreamBase {
    private string headerFileName;
    private string vsctFileName;
    private StreamWriter streamHeaderFile;
    private XmlDocument vsctDocument;
    private XmlElement xmlCurrentSectionNode;
    private XmlElement xmlCurrentSubSectionNode;
    private XmlElement xmlCurrentItemNode;
    private XmlElement xmlSymbolsElement;
    private XmlElement xmlCurrentGuidSymbol;
    private string currentSectionName;
    private string currentSubsectionName;
    private ItemFormatter formatProvider;
    public ItemFormatter Formatter { get; }
    public XmlElement CurrentSection { get; }
    public XmlElement CurrentSubSection { get; }
    public XmlElement CurrentItem { get; }
    public XmlDocument Document { get; }
    public string SharedPrefix { get; }
    public string AppIDPrefix { get; }
    public string CommandSectionTag { get; }
    public string CommandTableTag { get; }
    public TextWriteVSCTCStream(ItemFormatter fp);
    public TextWriteVSCTCStream(string filename, ItemFormatter fp);
    public ItemFormatter get_Formatter();
    public XmlElement get_CurrentSection();
    public XmlElement get_CurrentSubSection();
    public XmlElement get_CurrentItem();
    public XmlDocument get_Document();
    public sealed virtual string get_SharedPrefix();
    public sealed virtual string get_AppIDPrefix();
    public sealed virtual string get_CommandSectionTag();
    public sealed virtual string get_CommandTableTag();
    public sealed virtual string SectionTag(TableSignature ts);
    public sealed virtual void Open(string filename);
    public sealed virtual void Close();
    public sealed virtual void BeginHeaderFile();
    public sealed virtual void EndHeaderFile();
    public sealed virtual void BeginCTCFile();
    public sealed virtual void EndCTCFile();
    public sealed virtual void BeginSection(string sectionName, Guid guidContext);
    public sealed virtual void EndSection();
    public sealed virtual void BeginSubSection(string subsectionName);
    public sealed virtual void EndSubSection();
    public sealed virtual void WriteItem(Item item);
    private void BeginSymbols();
    public sealed virtual void BeginGuidDefinitions();
    public sealed virtual void EndGuidDefinitions();
    public sealed virtual void WriteGuidDefinition(string symbol, Guid guid);
    public sealed virtual void BeginIDDefinitions();
    public sealed virtual void EndIDDefinitions();
    public sealed virtual void WriteIDDefinition(string symbol, UInt32 id);
    private sealed virtual override void System.IDisposable.Dispose();
}
public class Microsoft.VisualStudio.CommandTable.TypeMap : object {
    private static Hashtable map;
    private static Hashtable mapReverse;
    private static Hashtable maskedKeys;
    private static void Init();
    public static String[] Keys(CommandTypeMask mask);
    private static void InitReverseMap();
    private static void InitMap();
    public static CommandType Convert(string types);
    public static CommandType Convert(string types, UInt32 mask, String& unknown);
    public static string Convert(CommandType type);
}
internal static class Microsoft.VisualStudio.CommandTable.UnsafeNativeMethods : object {
    internal static IntPtr LoadLibrary(string libname);
    internal static bool FreeLibrary(IntPtr hModule);
    internal static IntPtr FindResource(IntPtr hModule, IntPtr sResourceName, string sResourceType);
    internal static IntPtr FindResource(IntPtr hModule, IntPtr sResourceName, IntPtr sResourceType);
    internal static IntPtr LoadBitmap(IntPtr hModule, IntPtr hResource);
    internal static int SizeofResource(IntPtr hModule, IntPtr hResInfo);
    internal static IntPtr LoadResource(IntPtr hModule, IntPtr hResInfo);
    internal static IntPtr LockResource(IntPtr hResData);
    internal static bool DeleteObject(IntPtr hGDIResource);
    internal static IntPtr GlobalSize(IntPtr hGlobal);
    internal static IntPtr GlobalLock(IntPtr hGlobal);
    internal static bool GlobalUnlock(IntPtr hGlobal);
    public static int EnumResourceNames(IntPtr hModule, IntPtr pType, EnumResNameProc enumFunc, IntPtr param);
}
[FlagsAttribute]
public enum Microsoft.VisualStudio.CommandTable.UpdateHint : Enum {
    public int value__;
    public static UpdateHint Text;
    public static UpdateHint Parent;
    public static UpdateHint Priority;
    public static UpdateHint Package;
    public static UpdateHint Flags;
    public static UpdateHint Type;
    public static UpdateHint Icon;
    public static UpdateHint ListID;
    public static UpdateHint DefaultWidth;
    public static UpdateHint Condition;
    public static UpdateHint KeyBinding;
    public static UpdateHint Visibility;
    public static UpdateHint All;
}
public class Microsoft.VisualStudio.CommandTable.UsedCommandItem : CommandItem {
    private static Regex itemExp;
    private static String[] expectedFields;
    internal Regex Expression { get; }
    internal string ItemTagXML { get; }
    private static UsedCommandItem();
    internal virtual Regex get_Expression();
    internal virtual string get_ItemTagXML();
    internal virtual bool Read(BinaryReadCTCStream s);
    internal virtual void Write(BinaryWriteCTCStream s);
    internal virtual void FormatXML(TextWriteVSCTCStream s, XmlElement xmlParentElement);
    internal virtual bool Read(TextReadVSCTCStream s, XmlElement itemNode);
    internal virtual string Format(ItemFormatter fp);
}
public class Microsoft.VisualStudio.CommandTable.UsedCommandList : ItemList {
    internal static TableSignature tableSignature;
    internal TableSignature TableSignature { get; }
    private static UsedCommandList();
    internal virtual TableSignature get_TableSignature();
    protected virtual Item ConstructItem();
    public UsedCommandItem Item(int nIndex);
}
public class Microsoft.VisualStudio.CommandTable.VisibilityItem : Item {
    internal ushort gidContext;
    internal ushort gidCommand;
    internal UInt32 idCommand;
    private static Regex itemExp;
    private static string visibilityElementTag;
    private static string contextAttributeTag;
    internal Regex Expression { get; }
    internal string ItemTagXML { get; }
    public ushort GID { get; }
    public UInt32 ID { get; }
    public ushort ContextGID { get; }
    public VisibilityItem(ushort gidCommand, UInt32 idCommand, ushort gidContext);
    private static VisibilityItem();
    internal virtual Regex get_Expression();
    internal virtual string get_ItemTagXML();
    public ushort get_GID();
    public UInt32 get_ID();
    public ushort get_ContextGID();
    internal virtual bool Read(BinaryReadCTCStream s);
    internal virtual void Write(BinaryWriteCTCStream s);
    public virtual int CompareTo(object obj);
    internal virtual void FormatXML(TextWriteVSCTCStream s, XmlElement xmlParentElement);
    internal virtual bool Read(TextReadVSCTCStream s, XmlElement itemNode);
    internal virtual string Format(ItemFormatter fp);
    internal virtual void Translate(CommandTable ctFrom, CommandTable ctTo);
    internal virtual void Copy(Item other);
}
public class Microsoft.VisualStudio.CommandTable.VisibilityList : ItemList {
    internal static TableSignature tableSignature;
    internal TableSignature TableSignature { get; }
    private static VisibilityList();
    internal virtual TableSignature get_TableSignature();
    protected virtual Item ConstructItem();
    public VisibilityItem Item(int nIndex);
}
public class Microsoft.VisualStudio.CommandTable.VKMap : object {
    private static Hashtable map;
    private static Hashtable mapReverse;
    public static String[] Keys { get; }
    private static void Init();
    public static String[] get_Keys();
    private static void InitReverseMap();
    private static void InitMap();
    public static string Convert(byte b);
    public static byte Convert(string str);
}
internal class Microsoft.VisualStudio.CommandTable.VSCTTags : object {
    internal static string conditionAttributeTag;
    internal static string symbolsElementTag;
    internal static string xmlnsAttributeTag;
    internal static string languageAttributeTag;
    internal static string externElementTag;
    internal static string includeElementTag;
    internal static string defineElementTag;
    internal static string defineNameAttributeTag;
    internal static string defineValueAttributeTag;
    internal static string packageAttributeTag;
    internal static string parentElementTag;
    internal static string guidAttributeTag;
    internal static string idAttributeTag;
    internal static string priorityAttributeTag;
    internal static string depricatedLowPriorityAttributeTag;
    internal static string deprecatedLowPriorityAttributeTag;
    internal static string toolbarPriorityInBandAttributeTag;
    internal static string stringsElementTag;
    internal static string buttontextElementTag;
    internal static string tooltiptextElementTag;
    internal static string menutextElementTag;
    internal static string commandnameElementTag;
    internal static string canonicalnameElementTag;
    internal static string loccanonicalnameElementTag;
    internal static string typeAttributeTag;
    internal static string flagsElementTag;
    internal static string iconElementTag;
    internal static string buttonElementTag;
    internal static string comboElementTag;
    internal static string defaultWidthAttributeTag;
    internal static string idCommandListAttributeTag;
    internal static string menuElementTag;
    internal static string groupElementTag;
    internal static string groupFlagElementTag;
    internal static string placementElementTag;
    internal static string editorElementTag;
    internal static string emulatorElementTag;
    internal static string bitmapElementTag;
    internal static string residAttributeTag;
    internal static string usedlistAttributeTag;
    internal static string hrefAttributeString;
    internal static string imageElementTag;
    internal static string widthAttributeTag;
    internal static string heightAttributeTag;
    internal static string pixelFormatAttributeTag;
    internal static string keyBindingElementTag;
    internal static string editorAttributeTag;
    internal static string emulatorAttributeTag;
    internal static string key1AttributeTag;
    internal static string mod1AttributeTag;
    internal static string key2AttributeTag;
    internal static string mod2AttributeTag;
    internal static string keyChordAttributeTag;
    internal static string usedCommandElementTag;
    internal static string visibilityElementTag;
    internal static string contextAttributeTag;
    private static VSCTTags();
}
public class Microsoft.VisualStudio.CommandTable.VSKBinding : CommandKeyBinding {
    internal virtual bool Read(BinaryReadCTCStream s);
    internal virtual void Write(BinaryWriteCTCStream s);
}
public class Microsoft.VisualStudio.CommandTable.VSKBindingList : KeyBindingList {
    protected virtual Item ConstructItem();
    internal virtual void Write(BinaryWriteCTCStream s);
    internal virtual bool Read(BinaryReadCTCStream s);
    internal virtual void Sort();
}
public class Microsoft.VisualStudio.CommandTable.VSKCommandTable : CommandTable {
    private Hashtable navMap;
    internal virtual bool Read(BinaryReadCTCStream s);
    internal virtual void Write(BinaryWriteCTCStream s);
}
public class Microsoft.VisualStudio.CommandTable.VSKGuidTable : GuidTable {
    internal void Add(ushort id, Guid g);
    internal virtual bool Read(BinaryReadCTCStream s);
    internal virtual void Write(BinaryWriteCTCStream s);
}
internal class Microsoft.VisualStudio.CommandTable.XPressNativeCompressor : CommandTableCompression {
    private IntPtr hFile;
    public bool Chunky { get; }
    public bool EOF { get; }
    public XPressNativeCompressor(string path, UInt32 hashcode);
    public XPressNativeCompressor(string path);
    internal static IntPtr VSCTCompressionOpen(string filename);
    internal static IntPtr VSCTCompressionCreate(string filename, UInt32 dwHash);
    internal static int VSCTCompressionClose(IntPtr hFile);
    internal static int VSCTCompressionEOF(IntPtr hFile);
    internal static int VSCTCompressionReadBytes(IntPtr hFile, IntPtr hGlobal);
    internal static int VSCTCompressionReadByte(IntPtr hFile, Byte& value);
    internal static int VSCTCompressionReadUInt32(IntPtr hFile, UInt32& value);
    internal static int VSCTCompressionReadUInt16(IntPtr hFile, UInt16& value);
    internal static int VSCTCompressionWriteBytes(IntPtr hFile, IntPtr hGlobal);
    internal static int VSCTCompressionWriteByte(IntPtr hFile, byte value);
    internal static int VSCTCompressionWriteUInt32(IntPtr hFile, UInt32 value);
    internal static int VSCTCompressionWriteUInt16(IntPtr hFile, ushort value);
    public virtual bool get_Chunky();
    public virtual bool get_EOF();
    public virtual void Close();
    public virtual byte ReadByte();
    public virtual void Write(byte value);
    public virtual void ReadBytes(Byte[] bytes);
    public virtual void Write(Byte[] bytes);
    public virtual void ReadChars(Char[] chars);
    public virtual Char[] ReadChars(int count);
    public virtual void Write(Char[] chars);
    public virtual void Write(Byte[] bytes, int length);
    public virtual ushort ReadUInt16();
    public virtual void Write(ushort value);
    public virtual UInt32 ReadUInt32();
    public virtual void Write(UInt32 value);
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("2")]
internal class System.Runtime.CompilerServices.RefSafetyRulesAttribute : Attribute {
    public int Version;
    public RefSafetyRulesAttribute(int );
}
[GeneratedCodeAttribute("Nerdbank.GitVersioning.Tasks", "3.6.128.36433")]
[ExcludeFromCodeCoverageAttribute]
internal static class ThisAssembly : object {
    internal static string AssemblyConfiguration;
    internal static string AssemblyFileVersion;
    internal static string AssemblyInformationalVersion;
    internal static string AssemblyName;
    internal static string AssemblyTitle;
    internal static string AssemblyVersion;
    internal static DateTime GitCommitDate;
    internal static string GitCommitId;
    internal static bool IsPrerelease;
    internal static bool IsPublicRelease;
    internal static string PublicKey;
    internal static string PublicKeyToken;
    internal static string RootNamespace;
    private static ThisAssembly();
}
