[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
public class Microsoft.VisualStudio.Sdk.Argument : object {
    [CompilerGeneratedAttribute]
private string <ArgumentName>k__BackingField;
    [CompilerGeneratedAttribute]
private ArgumentType <ArgumentType>k__BackingField;
    [CompilerGeneratedAttribute]
private Func`2<string, object> <EvaluationFunction>k__BackingField;
    [CompilerGeneratedAttribute]
private string <HelpText>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Required>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Hidden>k__BackingField;
    [CompilerGeneratedAttribute]
private Predicate`1<string> <Validator>k__BackingField;
    public string ArgumentName { get; }
    public ArgumentType ArgumentType { get; }
    public Func`2<string, object> EvaluationFunction { get; }
    public string HelpText { get; }
    public bool Required { get; }
    public bool Hidden { get; }
    public Predicate`1<string> Validator { get; }
    public Argument(string argumentName, ArgumentType argumentType, string helpText, bool required, bool hidden, Predicate`1<string> validator, Func`2<string, object> evalFunc);
    [CompilerGeneratedAttribute]
public string get_ArgumentName();
    [CompilerGeneratedAttribute]
public ArgumentType get_ArgumentType();
    [CompilerGeneratedAttribute]
public Func`2<string, object> get_EvaluationFunction();
    [CompilerGeneratedAttribute]
public string get_HelpText();
    [CompilerGeneratedAttribute]
public bool get_Required();
    [CompilerGeneratedAttribute]
public bool get_Hidden();
    [CompilerGeneratedAttribute]
public Predicate`1<string> get_Validator();
}
public class Microsoft.VisualStudio.Sdk.ArgumentComparer : object {
    public static ArgumentComparer Default;
    public static ArgumentComparer ByRequiredField;
    private bool sortByRequiredField;
    private ArgumentComparer(bool sortByRequiredField);
    private static ArgumentComparer();
    public sealed virtual int Compare(Argument x, Argument y);
    public sealed virtual bool Equals(Argument x, Argument y);
    public sealed virtual int GetHashCode(Argument obj);
}
public enum Microsoft.VisualStudio.Sdk.ArgumentType : Enum {
    public int value__;
    public static ArgumentType Boolean;
    public static ArgumentType NonBoolean;
}
public abstract class Microsoft.VisualStudio.Sdk.CommandBase : object {
    [CompilerGeneratedAttribute]
private IFileSystem <FileSystem>k__BackingField;
    [CompilerGeneratedAttribute]
private ILogger <Logger>k__BackingField;
    public IFileSystem FileSystem { get; }
    public ILogger Logger { get; }
    public IEnumerable`1<Argument> Arguments { get; }
    public string HelpText { get; }
    public CommandBase(IFileSystem fileSystem, ILogger logger);
    [CompilerGeneratedAttribute]
public sealed virtual IFileSystem get_FileSystem();
    [CompilerGeneratedAttribute]
public sealed virtual ILogger get_Logger();
    public abstract virtual IEnumerable`1<Argument> get_Arguments();
    public abstract virtual string get_HelpText();
    public abstract virtual int Execute(IReadOnlyDictionary`2<string, object> selectedArguments);
    public abstract virtual int Validate(IReadOnlyDictionary`2<string, object> selectedArguments);
}
internal static class Microsoft.VisualStudio.Sdk.CommandLineConstants : object {
    internal static string CopyrightText;
}
public class Microsoft.VisualStudio.Sdk.CommandLineParser : object {
    private string toolName;
    private ILogger logger;
    [CompilerGeneratedAttribute]
private Dictionary`2<string, ICommand> <SupportedCommands>k__BackingField;
    public Dictionary`2<string, ICommand> SupportedCommands { get; }
    public CommandLineParser(string toolName, ILogger logger);
    [CompilerGeneratedAttribute]
public Dictionary`2<string, ICommand> get_SupportedCommands();
    public void AddCommand(string commandName, ICommand command);
    public Dictionary`2<string, object> Parse(String[] args, ICommand& selectedCommand);
    public string GenerateUsageString(ICommand selectedCommand, string error);
    private Dictionary`2<string, object> ParseArgumentsForCommand(String[] args, ICommand command);
    private void InitializeDefaultCommands();
}
internal static class Microsoft.VisualStudio.Sdk.CommandLineUtilities : object {
    internal static string GetProductVersionString(string programLocation, string toolName, bool includeTitle);
}
public class Microsoft.VisualStudio.Sdk.FileSystem : object {
    public static FileSystem Instance;
    public string CurrentWorkingDirectory { get; public set; }
    private static FileSystem();
    public sealed virtual string get_CurrentWorkingDirectory();
    public sealed virtual void set_CurrentWorkingDirectory(string value);
    public sealed virtual void CreateDirectory(string directory);
    public sealed virtual void Delete(string file);
    public sealed virtual void DeleteDirectory(string directory);
    public sealed virtual bool DirectoryExists(string directory);
    public sealed virtual bool FileExists(string file);
    public sealed virtual long GetFileLength(string file);
    public sealed virtual void Move(string originalFile, string destinationFile);
    public sealed virtual Stream Open(string file, FileMode fileMode);
    public sealed virtual Stream Open(string file, FileMode fileMode, FileAccess fileAccess, FileShare fileShare);
    public sealed virtual Package OpenPackage(string file, FileMode packageMode);
    public sealed virtual Stream OpenRead(string file);
    public sealed virtual string ReadAllText(string file);
    public sealed virtual void SetLastWriteTime(string file, DateTime lastWriteTime);
    public sealed virtual void WriteAllText(string file, string text);
}
internal class Microsoft.VisualStudio.Sdk.HelpCommand : object {
    internal static string CommandName;
    private CommandLineParser commandLineParser;
    [CompilerGeneratedAttribute]
private ILogger <Logger>k__BackingField;
    public IEnumerable`1<Argument> Arguments { get; }
    public string HelpText { get; }
    public IFileSystem FileSystem { get; }
    public ILogger Logger { get; }
    internal HelpCommand(ILogger logger, CommandLineParser commandLineParser);
    public sealed virtual IEnumerable`1<Argument> get_Arguments();
    public sealed virtual string get_HelpText();
    public sealed virtual IFileSystem get_FileSystem();
    [CompilerGeneratedAttribute]
public sealed virtual ILogger get_Logger();
    public sealed virtual int Execute(IReadOnlyDictionary`2<string, object> selectedArguments);
    public sealed virtual int Validate(IReadOnlyDictionary`2<string, object> selectedArguments);
}
public interface Microsoft.VisualStudio.Sdk.ICommand {
    public IEnumerable`1<Argument> Arguments { get; }
    public IFileSystem FileSystem { get; }
    public ILogger Logger { get; }
    public string HelpText { get; }
    public abstract virtual IEnumerable`1<Argument> get_Arguments();
    public abstract virtual int Execute(IReadOnlyDictionary`2<string, object> selectedArguments);
    public abstract virtual IFileSystem get_FileSystem();
    public abstract virtual ILogger get_Logger();
    public abstract virtual string get_HelpText();
    public abstract virtual int Validate(IReadOnlyDictionary`2<string, object> selectedArguments);
}
public interface Microsoft.VisualStudio.Sdk.IFileSystem {
    public string CurrentWorkingDirectory { get; public set; }
    public abstract virtual string get_CurrentWorkingDirectory();
    public abstract virtual void set_CurrentWorkingDirectory(string value);
    public abstract virtual void CreateDirectory(string directory);
    public abstract virtual void Delete(string file);
    public abstract virtual void DeleteDirectory(string directory);
    public abstract virtual bool DirectoryExists(string directory);
    public abstract virtual bool FileExists(string file);
    public abstract virtual long GetFileLength(string file);
    public abstract virtual void Move(string originalFile, string destinationFile);
    public abstract virtual Stream Open(string file, FileMode fileMode);
    public abstract virtual Stream Open(string file, FileMode fileMode, FileAccess fileAccess, FileShare fileShare);
    public abstract virtual Package OpenPackage(string file, FileMode packageMode);
    public abstract virtual Stream OpenRead(string file);
    public abstract virtual string ReadAllText(string file);
    public abstract virtual void SetLastWriteTime(string file, DateTime lastWriteTime);
    public abstract virtual void WriteAllText(string file, string text);
}
public interface Microsoft.VisualStudio.Sdk.ILogger {
    public OutputMessage LastError { get; }
    public abstract virtual OutputMessage get_LastError();
    public abstract virtual void LogError(OutputMessage outputMessage);
    public abstract virtual void LogError(OutputMessage outputMessage, Object[] args);
    public abstract virtual void LogInfo(OutputMessage outputMessage);
    public abstract virtual void LogInfo(OutputMessage outputMessage, Object[] args);
    public abstract virtual void LogMessage(string message);
    public abstract virtual void LogMessage(string message, Object[] args);
}
public class Microsoft.VisualStudio.Sdk.Logger : object {
    private StreamWriter errorStreamWriter;
    private StreamWriter infoStreamWriter;
    private bool disposedValue;
    private object locker;
    [CompilerGeneratedAttribute]
private OutputMessage <LastError>k__BackingField;
    public OutputMessage LastError { get; private set; }
    public Logger(Stream errorStream, Stream outStream);
    [CompilerGeneratedAttribute]
public sealed virtual OutputMessage get_LastError();
    [CompilerGeneratedAttribute]
private void set_LastError(OutputMessage value);
    public sealed virtual void Dispose();
    public sealed virtual void LogError(OutputMessage outputMessage);
    public sealed virtual void LogError(OutputMessage outputMessage, Object[] args);
    public sealed virtual void LogInfo(OutputMessage outputMessage);
    public sealed virtual void LogInfo(OutputMessage outputMessage, Object[] args);
    public sealed virtual void LogMessage(string message);
    public sealed virtual void LogMessage(string message, Object[] args);
    private void LogMessage(string message, TextWriter writer);
    private void Dispose(bool disposing);
    private void ExecuteWithLock(Action action);
}
public enum Microsoft.VisualStudio.Sdk.MessageType : Enum {
    public int value__;
    public static MessageType Error;
    public static MessageType Warning;
    public static MessageType Information;
}
public class Microsoft.VisualStudio.Sdk.OutputMessage : object {
    private static string Origin;
    private string text;
    private MessageType type;
    [CompilerGeneratedAttribute]
private string <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private int <ErrorCode>k__BackingField;
    public string Id { get; }
    public int ErrorCode { get; }
    public OutputMessage(string text, string id, MessageType type);
    [CompilerGeneratedAttribute]
public string get_Id();
    [CompilerGeneratedAttribute]
public int get_ErrorCode();
    public string GetOutputText(Object[] args);
    public virtual string ToString();
    public virtual bool Equals(object obj);
    public sealed virtual bool Equals(OutputMessage other);
    public virtual int GetHashCode();
}
public class Microsoft.VisualStudio.Sdk.ParseException : Exception {
    public ParseException(string message);
    public ParseException(string message, Exception inner);
    protected ParseException(SerializationInfo info, StreamingContext context);
}
[GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "15.0.0.0")]
[DebuggerNonUserCodeAttribute]
[CompilerGeneratedAttribute]
internal class Microsoft.VisualStudio.Sdk.Resources : object {
    private static ResourceManager resourceMan;
    private static CultureInfo resourceCulture;
    [EditorBrowsableAttribute("2")]
internal static ResourceManager ResourceManager { get; }
    [EditorBrowsableAttribute("2")]
internal static CultureInfo Culture { get; internal set; }
    internal static string ArgumentMissingValueErrorMessageFormat { get; }
    internal static string InvalidArgumentErrorMessageFormat { get; }
    internal static string InvalidCommandErrorMessageFormat { get; }
    internal static string InvalidValueForArgumentErrorMessageFormat { get; }
    internal static string MissingCommandErrorMessage { get; }
    internal static string MissingRequiredArgumentErrorMessageFormat { get; }
    internal static string RequiredArgumentMessageFormat { get; }
    internal static ResourceManager get_ResourceManager();
    internal static CultureInfo get_Culture();
    internal static void set_Culture(CultureInfo value);
    internal static string get_ArgumentMissingValueErrorMessageFormat();
    internal static string get_InvalidArgumentErrorMessageFormat();
    internal static string get_InvalidCommandErrorMessageFormat();
    internal static string get_InvalidValueForArgumentErrorMessageFormat();
    internal static string get_MissingCommandErrorMessage();
    internal static string get_MissingRequiredArgumentErrorMessageFormat();
    internal static string get_RequiredArgumentMessageFormat();
}
public class Microsoft.VisualStudio.Sdk.Runner : object {
    private CommandLineParser parser;
    public Runner(CommandLineParser parser);
    public int Run(String[] args, Stream outStream, Stream errorStream);
}
internal class Microsoft.VisualStudio.Sdk.VersionCommand : object {
    internal static string CommandName;
    private string toolName;
    [CompilerGeneratedAttribute]
private ILogger <Logger>k__BackingField;
    public IEnumerable`1<Argument> Arguments { get; }
    public string HelpText { get; }
    public IFileSystem FileSystem { get; }
    public ILogger Logger { get; }
    internal VersionCommand(string toolName, ILogger logger);
    public sealed virtual IEnumerable`1<Argument> get_Arguments();
    public sealed virtual string get_HelpText();
    public sealed virtual IFileSystem get_FileSystem();
    [CompilerGeneratedAttribute]
public sealed virtual ILogger get_Logger();
    public sealed virtual int Execute(IReadOnlyDictionary`2<string, object> selectedArguments);
    public sealed virtual int Validate(IReadOnlyDictionary`2<string, object> selectedArguments);
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("2")]
internal class System.Runtime.CompilerServices.RefSafetyRulesAttribute : Attribute {
    public int Version;
    public RefSafetyRulesAttribute(int );
}
[GeneratedCodeAttribute("Nerdbank.GitVersioning.Tasks", "3.6.128.36433")]
[ExcludeFromCodeCoverageAttribute]
internal static class ThisAssembly : object {
    internal static string AssemblyConfiguration;
    internal static string AssemblyFileVersion;
    internal static string AssemblyInformationalVersion;
    internal static string AssemblyName;
    internal static string AssemblyTitle;
    internal static string AssemblyVersion;
    internal static DateTime GitCommitDate;
    internal static string GitCommitId;
    internal static bool IsPrerelease;
    internal static bool IsPublicRelease;
    internal static string PublicKey;
    internal static string PublicKeyToken;
    internal static string RootNamespace;
    private static ThisAssembly();
}
