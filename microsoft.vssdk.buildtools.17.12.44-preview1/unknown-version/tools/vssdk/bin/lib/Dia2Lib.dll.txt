public class Dia2Lib._FILETIME : ValueType {
    public UInt32 dwLowDateTime;
    public UInt32 dwHighDateTime;
}
public class Dia2Lib._LARGE_INTEGER : ValueType {
    public long QuadPart;
}
public class Dia2Lib._ULARGE_INTEGER : ValueType {
    public ulong QuadPart;
}
public enum Dia2Lib.CV_CPU_TYPE_e : Enum {
    public int value__;
    public static CV_CPU_TYPE_e CV_CFL_8080;
    public static CV_CPU_TYPE_e CV_CFL_8086;
    public static CV_CPU_TYPE_e CV_CFL_80286;
    public static CV_CPU_TYPE_e CV_CFL_80386;
    public static CV_CPU_TYPE_e CV_CFL_80486;
    public static CV_CPU_TYPE_e CV_CFL_PENTIUM;
    public static CV_CPU_TYPE_e CV_CFL_PENTIUMII;
    public static CV_CPU_TYPE_e CV_CFL_PENTIUMPRO;
    public static CV_CPU_TYPE_e CV_CFL_PENTIUMIII;
    public static CV_CPU_TYPE_e CV_CFL_MIPS;
    public static CV_CPU_TYPE_e CV_CFL_MIPSR4000;
    public static CV_CPU_TYPE_e CV_CFL_MIPS16;
    public static CV_CPU_TYPE_e CV_CFL_MIPS32;
    public static CV_CPU_TYPE_e CV_CFL_MIPS64;
    public static CV_CPU_TYPE_e CV_CFL_MIPSI;
    public static CV_CPU_TYPE_e CV_CFL_MIPSII;
    public static CV_CPU_TYPE_e CV_CFL_MIPSIII;
    public static CV_CPU_TYPE_e CV_CFL_MIPSIV;
    public static CV_CPU_TYPE_e CV_CFL_MIPSV;
    public static CV_CPU_TYPE_e CV_CFL_M68000;
    public static CV_CPU_TYPE_e CV_CFL_M68010;
    public static CV_CPU_TYPE_e CV_CFL_M68020;
    public static CV_CPU_TYPE_e CV_CFL_M68030;
    public static CV_CPU_TYPE_e CV_CFL_M68040;
    public static CV_CPU_TYPE_e CV_CFL_ALPHA;
    public static CV_CPU_TYPE_e CV_CFL_ALPHA_21064;
    public static CV_CPU_TYPE_e CV_CFL_ALPHA_21164;
    public static CV_CPU_TYPE_e CV_CFL_ALPHA_21164A;
    public static CV_CPU_TYPE_e CV_CFL_ALPHA_21264;
    public static CV_CPU_TYPE_e CV_CFL_ALPHA_21364;
    public static CV_CPU_TYPE_e CV_CFL_PPC601;
    public static CV_CPU_TYPE_e CV_CFL_PPC603;
    public static CV_CPU_TYPE_e CV_CFL_PPC604;
    public static CV_CPU_TYPE_e CV_CFL_PPC620;
    public static CV_CPU_TYPE_e CV_CFL_PPCFP;
    public static CV_CPU_TYPE_e CV_CFL_PPCBE;
    public static CV_CPU_TYPE_e CV_CFL_SH3;
    public static CV_CPU_TYPE_e CV_CFL_SH3E;
    public static CV_CPU_TYPE_e CV_CFL_SH3DSP;
    public static CV_CPU_TYPE_e CV_CFL_SH4;
    public static CV_CPU_TYPE_e CV_CFL_SHMEDIA;
    public static CV_CPU_TYPE_e CV_CFL_ARM3;
    public static CV_CPU_TYPE_e CV_CFL_ARM4;
    public static CV_CPU_TYPE_e CV_CFL_ARM4T;
    public static CV_CPU_TYPE_e CV_CFL_ARM5;
    public static CV_CPU_TYPE_e CV_CFL_ARM5T;
    public static CV_CPU_TYPE_e CV_CFL_ARM6;
    public static CV_CPU_TYPE_e CV_CFL_ARM_XMAC;
    public static CV_CPU_TYPE_e CV_CFL_ARM_WMMX;
    public static CV_CPU_TYPE_e CV_CFL_ARM7;
    public static CV_CPU_TYPE_e CV_CFL_OMNI;
    public static CV_CPU_TYPE_e CV_CFL_IA64;
    public static CV_CPU_TYPE_e CV_CFL_IA64_1;
    public static CV_CPU_TYPE_e CV_CFL_IA64_2;
    public static CV_CPU_TYPE_e CV_CFL_CEE;
    public static CV_CPU_TYPE_e CV_CFL_AM33;
    public static CV_CPU_TYPE_e CV_CFL_M32R;
    public static CV_CPU_TYPE_e CV_CFL_TRICORE;
    public static CV_CPU_TYPE_e CV_CFL_X64;
    public static CV_CPU_TYPE_e CV_CFL_AMD64;
    public static CV_CPU_TYPE_e CV_CFL_EBC;
    public static CV_CPU_TYPE_e CV_CFL_THUMB;
    public static CV_CPU_TYPE_e CV_CFL_ARMNT;
    public static CV_CPU_TYPE_e CV_CFL_ARM64;
    public static CV_CPU_TYPE_e CV_CFL_D3D11_SHADER;
}
[CoClassAttribute("Dia2Lib.DiaSourceClass")]
[GuidAttribute("79F1BB5F-B66E-48E5-B6A9-1545C323CA3D")]
public interface Dia2Lib.DiaSource {
}
[CoClassAttribute("Dia2Lib.DiaSourceAltClass")]
[GuidAttribute("79F1BB5F-B66E-48E5-B6A9-1545C323CA3D")]
public interface Dia2Lib.DiaSourceAlt {
}
[TypeLibTypeAttribute]
[GuidAttribute("91904831-49CA-4766-B95C-25397E2DD6DC")]
[ClassInterfaceAttribute("0")]
public class Dia2Lib.DiaSourceAltClass : object {
    [DispIdAttribute("1")]
public string lastError { get; }
    public virtual override string get_lastError();
    public virtual override void loadDataFromPdb(string pdbPath);
    public virtual override void loadAndValidateDataFromPdb(string pdbPath, Guid& pcsig70, UInt32 sig, UInt32 age);
    public virtual override void loadDataForExe(string executable, string searchPath, object pCallback);
    public virtual override void loadDataFromIStream(IStream pIStream);
    public virtual override void openSession(IDiaSession& ppSession);
    public virtual override void loadDataFromCodeViewInfo(string executable, string searchPath, UInt32 cbCvInfo, Byte& pbCvInfo, object pCallback);
    public virtual override void loadDataFromMiscInfo(string executable, string searchPath, UInt32 timeStampExe, UInt32 timeStampDbg, UInt32 sizeOfExe, UInt32 cbMiscInfo, Byte& pbMiscInfo, object pCallback);
}
[TypeLibTypeAttribute]
[GuidAttribute("E6756135-1E65-4D17-8576-610761398C3C")]
[ClassInterfaceAttribute("0")]
public class Dia2Lib.DiaSourceClass : object {
    [DispIdAttribute("1")]
public string lastError { get; }
    public string IDiaDataSource3_lastError { get; }
    public virtual override string get_lastError();
    public virtual override void loadDataFromPdb(string pdbPath);
    public virtual override void loadAndValidateDataFromPdb(string pdbPath, Guid& pcsig70, UInt32 sig, UInt32 age);
    public virtual override void loadDataForExe(string executable, string searchPath, object pCallback);
    public virtual override void loadDataFromIStream(IStream pIStream);
    public virtual override void openSession(IDiaSession& ppSession);
    public virtual override void loadDataFromCodeViewInfo(string executable, string searchPath, UInt32 cbCvInfo, Byte& pbCvInfo, object pCallback);
    public virtual override void loadDataFromMiscInfo(string executable, string searchPath, UInt32 timeStampExe, UInt32 timeStampDbg, UInt32 sizeOfExe, UInt32 cbMiscInfo, Byte& pbMiscInfo, object pCallback);
    public virtual override string IDiaDataSource3_get_lastError();
    public virtual override void IDiaDataSource3_loadDataFromPdb(string pdbPath);
    public virtual override void IDiaDataSource3_loadAndValidateDataFromPdb(string pdbPath, Guid& pcsig70, UInt32 sig, UInt32 age);
    public virtual override void IDiaDataSource3_loadDataForExe(string executable, string searchPath, object pCallback);
    public virtual override void IDiaDataSource3_loadDataFromIStream(IStream pIStream);
    public virtual override void IDiaDataSource3_openSession(IDiaSession& ppSession);
    public virtual override void IDiaDataSource3_loadDataFromCodeViewInfo(string executable, string searchPath, UInt32 cbCvInfo, Byte& pbCvInfo, object pCallback);
    public virtual override void IDiaDataSource3_loadDataFromMiscInfo(string executable, string searchPath, UInt32 timeStampExe, UInt32 timeStampDbg, UInt32 sizeOfExe, UInt32 cbMiscInfo, Byte& pbMiscInfo, object pCallback);
    public virtual override void getRawPDBPtr(IntPtr& pppdb);
    public virtual override void loadDataFromRawPDBPtr(IntPtr ppdb);
    public virtual override void getStreamSize(string stream, UInt32& pcb);
    public virtual override void getStreamRawData(string stream, UInt32 cbRead, Byte& pbData);
}
[CoClassAttribute("Dia2Lib.DiaStackWalkerClass")]
[GuidAttribute("5485216B-A54C-469F-9670-52B24D5229BB")]
public interface Dia2Lib.DiaStackWalker {
}
[GuidAttribute("CE4A85DB-5768-475B-A4E1-C0BCA2112A6B")]
[TypeLibTypeAttribute]
[ClassInterfaceAttribute("0")]
public class Dia2Lib.DiaStackWalkerClass : object {
    public virtual override void getEnumFrames(IDiaStackWalkHelper pHelper, IDiaEnumStackFrames& ppenum);
    public virtual override void getEnumFrames2(CV_CPU_TYPE_e cpuid, IDiaStackWalkHelper pHelper, IDiaEnumStackFrames& ppenum);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("79F1BB5F-B66E-48E5-B6A9-1545C323CA3D")]
public interface Dia2Lib.IDiaDataSource {
    [DispIdAttribute("1")]
public string lastError { get; }
    public abstract virtual string get_lastError();
    public abstract virtual void loadDataFromPdb(string pdbPath);
    public abstract virtual void loadAndValidateDataFromPdb(string pdbPath, Guid& pcsig70, UInt32 sig, UInt32 age);
    public abstract virtual void loadDataForExe(string executable, string searchPath, object pCallback);
    public abstract virtual void loadDataFromIStream(IStream pIStream);
    public abstract virtual void openSession(IDiaSession& ppSession);
    public abstract virtual void loadDataFromCodeViewInfo(string executable, string searchPath, UInt32 cbCvInfo, Byte& pbCvInfo, object pCallback);
    public abstract virtual void loadDataFromMiscInfo(string executable, string searchPath, UInt32 timeStampExe, UInt32 timeStampDbg, UInt32 sizeOfExe, UInt32 cbMiscInfo, Byte& pbMiscInfo, object pCallback);
}
[GuidAttribute("6D31CB3B-EDD4-4C3E-AB44-12B9F7A3828E")]
[InterfaceTypeAttribute("1")]
public interface Dia2Lib.IDiaDataSource2 {
    [DispIdAttribute("1")]
public string lastError { get; }
    public abstract virtual string get_lastError();
    public abstract virtual void loadDataFromPdb(string pdbPath);
    public abstract virtual void loadAndValidateDataFromPdb(string pdbPath, Guid& pcsig70, UInt32 sig, UInt32 age);
    public abstract virtual void loadDataForExe(string executable, string searchPath, object pCallback);
    public abstract virtual void loadDataFromIStream(IStream pIStream);
    public abstract virtual void openSession(IDiaSession& ppSession);
    public abstract virtual void loadDataFromCodeViewInfo(string executable, string searchPath, UInt32 cbCvInfo, Byte& pbCvInfo, object pCallback);
    public abstract virtual void loadDataFromMiscInfo(string executable, string searchPath, UInt32 timeStampExe, UInt32 timeStampDbg, UInt32 sizeOfExe, UInt32 cbMiscInfo, Byte& pbMiscInfo, object pCallback);
    public abstract virtual void getRawPDBPtr(IntPtr& pppdb);
    public abstract virtual void loadDataFromRawPDBPtr(IntPtr ppdb);
}
[GuidAttribute("65A23C15-BAB3-45DA-8639-F06DE86B9EA8")]
[InterfaceTypeAttribute("1")]
public interface Dia2Lib.IDiaDataSource3 {
    [DispIdAttribute("1")]
public string lastError { get; }
    public abstract virtual string get_lastError();
    public abstract virtual void loadDataFromPdb(string pdbPath);
    public abstract virtual void loadAndValidateDataFromPdb(string pdbPath, Guid& pcsig70, UInt32 sig, UInt32 age);
    public abstract virtual void loadDataForExe(string executable, string searchPath, object pCallback);
    public abstract virtual void loadDataFromIStream(IStream pIStream);
    public abstract virtual void openSession(IDiaSession& ppSession);
    public abstract virtual void loadDataFromCodeViewInfo(string executable, string searchPath, UInt32 cbCvInfo, Byte& pbCvInfo, object pCallback);
    public abstract virtual void loadDataFromMiscInfo(string executable, string searchPath, UInt32 timeStampExe, UInt32 timeStampDbg, UInt32 sizeOfExe, UInt32 cbMiscInfo, Byte& pbMiscInfo, object pCallback);
    public abstract virtual void getRawPDBPtr(IntPtr& pppdb);
    public abstract virtual void loadDataFromRawPDBPtr(IntPtr ppdb);
    public abstract virtual void getStreamSize(string stream, UInt32& pcb);
    public abstract virtual void getStreamRawData(string stream, UInt32 cbRead, Byte& pbData);
}
[GuidAttribute("486943E8-D187-4A6B-A3C4-291259FFF60D")]
[DefaultMemberAttribute("Item")]
[InterfaceTypeAttribute("1")]
public interface Dia2Lib.IDiaEnumDebugStreamData {
    [DispIdAttribute("1")]
public int count { get; }
    [DispIdAttribute("2")]
public string name { get; }
    public abstract virtual IEnumerator GetEnumerator();
    public abstract virtual int get_count();
    public abstract virtual string get_name();
    public abstract virtual void Item(UInt32 index, UInt32 cbData, UInt32& pcbData, Byte& pbData);
    public abstract virtual void Next(UInt32 celt, UInt32 cbData, UInt32& pcbData, Byte& pbData, UInt32& pceltFetched);
    public abstract virtual void Skip(UInt32 celt);
    public abstract virtual void Reset();
    public abstract virtual void Clone(IDiaEnumDebugStreamData& ppenum);
}
[GuidAttribute("08CBB41E-47A6-4F87-92F1-1C9C87CED044")]
[InterfaceTypeAttribute("1")]
[DefaultMemberAttribute("Item")]
public interface Dia2Lib.IDiaEnumDebugStreams {
    [DispIdAttribute("1")]
public int count { get; }
    public abstract virtual IEnumerator GetEnumerator();
    public abstract virtual int get_count();
    public abstract virtual IDiaEnumDebugStreamData Item(object index);
    public abstract virtual void Next(UInt32 celt, IDiaEnumDebugStreamData& rgelt, UInt32& pceltFetched);
    public abstract virtual void Skip(UInt32 celt);
    public abstract virtual void Reset();
    public abstract virtual void Clone(IDiaEnumDebugStreams& ppenum);
}
[GuidAttribute("D5612573-6925-4468-8883-98CDEC8C384A")]
[InterfaceTypeAttribute("1")]
[DefaultMemberAttribute("Item")]
public interface Dia2Lib.IDiaEnumInjectedSources {
    [DispIdAttribute("1")]
public int count { get; }
    public abstract virtual IEnumerator GetEnumerator();
    public abstract virtual int get_count();
    public abstract virtual IDiaInjectedSource Item(UInt32 index);
    public abstract virtual void Next(UInt32 celt, IDiaInjectedSource& rgelt, UInt32& pceltFetched);
    public abstract virtual void Skip(UInt32 celt);
    public abstract virtual void Reset();
    public abstract virtual void Clone(IDiaEnumInjectedSources& ppenum);
}
[DefaultMemberAttribute("Item")]
[InterfaceTypeAttribute("1")]
[GuidAttribute("1C7FF653-51F7-457E-8419-B20F57EF7E4D")]
public interface Dia2Lib.IDiaEnumInputAssemblyFiles {
    [DispIdAttribute("1")]
public int count { get; }
    public abstract virtual IEnumerator GetEnumerator();
    public abstract virtual int get_count();
    public abstract virtual IDiaInputAssemblyFile Item(UInt32 index);
    public abstract virtual void Next(UInt32 celt, IDiaInputAssemblyFile& rgelt, UInt32& pceltFetched);
    public abstract virtual void Skip(UInt32 celt);
    public abstract virtual void Reset();
    public abstract virtual void Clone(IDiaEnumInputAssemblyFiles& ppenum);
}
[InterfaceTypeAttribute("1")]
[DefaultMemberAttribute("Item")]
[GuidAttribute("FE30E878-54AC-44F1-81BA-39DE940F6052")]
public interface Dia2Lib.IDiaEnumLineNumbers {
    [DispIdAttribute("1")]
public int count { get; }
    public abstract virtual IEnumerator GetEnumerator();
    public abstract virtual int get_count();
    public abstract virtual IDiaLineNumber Item(UInt32 index);
    public abstract virtual void Next(UInt32 celt, IDiaLineNumber& rgelt, UInt32& pceltFetched);
    public abstract virtual void Skip(UInt32 celt);
    public abstract virtual void Reset();
    public abstract virtual void Clone(IDiaEnumLineNumbers& ppenum);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("10F3DBD9-664F-4469-B808-9471C7A50538")]
[DefaultMemberAttribute("Item")]
public interface Dia2Lib.IDiaEnumSourceFiles {
    [DispIdAttribute("1")]
public int count { get; }
    public abstract virtual IEnumerator GetEnumerator();
    public abstract virtual int get_count();
    public abstract virtual IDiaSourceFile Item(UInt32 index);
    public abstract virtual void Next(UInt32 celt, IDiaSourceFile& rgelt, UInt32& pceltFetched);
    public abstract virtual void Skip(UInt32 celt);
    public abstract virtual void Reset();
    public abstract virtual void Clone(IDiaEnumSourceFiles& ppenum);
}
[GuidAttribute("EC9D461D-CE74-4711-A020-7D8F9A1DD255")]
[InterfaceTypeAttribute("1")]
public interface Dia2Lib.IDiaEnumStackFrames {
    public abstract virtual void Next(UInt32 celt, IDiaStackFrame& rgelt, UInt32& pceltFetched);
    public abstract virtual void Reset();
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("CAB72C48-443B-48F5-9B0B-42F0820AB29A")]
[DefaultMemberAttribute("Item")]
public interface Dia2Lib.IDiaEnumSymbols {
    [DispIdAttribute("1")]
public int count { get; }
    public abstract virtual IEnumerator GetEnumerator();
    public abstract virtual int get_count();
    public abstract virtual IDiaSymbol Item(UInt32 index);
    public abstract virtual void Next(UInt32 celt, IDiaSymbol& rgelt, UInt32& pceltFetched);
    public abstract virtual void Skip(UInt32 celt);
    public abstract virtual void Reset();
    public abstract virtual void Clone(IDiaEnumSymbols& ppenum);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("624B7D9C-24EA-4421-9D06-3B577471C1FA")]
public interface Dia2Lib.IDiaEnumSymbolsByAddr {
    public abstract virtual IDiaSymbol symbolByAddr(UInt32 isect, UInt32 offset);
    public abstract virtual IDiaSymbol symbolByRVA(UInt32 relativeVirtualAddress);
    public abstract virtual IDiaSymbol symbolByVA(ulong virtualAddress);
    public abstract virtual void Next(UInt32 celt, IDiaSymbol& rgelt, UInt32& pceltFetched);
    public abstract virtual void Prev(UInt32 celt, IDiaSymbol& rgelt, UInt32& pceltFetched);
    public abstract virtual void Clone(IDiaEnumSymbolsByAddr& ppenum);
}
[InterfaceTypeAttribute("1")]
[DefaultMemberAttribute("Item")]
[GuidAttribute("C65C2B0A-1150-4D7A-AFCC-E05BF3DEE81E")]
public interface Dia2Lib.IDiaEnumTables {
    [DispIdAttribute("1")]
public int count { get; }
    public abstract virtual IEnumerator GetEnumerator();
    public abstract virtual int get_count();
    public abstract virtual IDiaTable Item(object index);
    public abstract virtual void Next(UInt32 celt, IDiaTable& rgelt, UInt32& pceltFetched);
    public abstract virtual void Skip(UInt32 celt);
    public abstract virtual void Reset();
    public abstract virtual void Clone(IDiaEnumTables& ppenum);
}
[GuidAttribute("A39184B7-6A36-42DE-8EEC-7DF9F3F59F33")]
[InterfaceTypeAttribute("1")]
public interface Dia2Lib.IDiaFrameData {
    [DispIdAttribute("2")]
public UInt32 addressSection { get; }
    [DispIdAttribute("3")]
public UInt32 addressOffset { get; }
    [DispIdAttribute("4")]
public UInt32 relativeVirtualAddress { get; }
    [DispIdAttribute("5")]
public ulong virtualAddress { get; }
    [DispIdAttribute("6")]
public UInt32 lengthBlock { get; }
    [DispIdAttribute("7")]
public UInt32 lengthLocals { get; }
    [DispIdAttribute("8")]
public UInt32 lengthParams { get; }
    [DispIdAttribute("9")]
public UInt32 maxStack { get; }
    [DispIdAttribute("10")]
public UInt32 lengthProlog { get; }
    [DispIdAttribute("11")]
public UInt32 lengthSavedRegisters { get; }
    [DispIdAttribute("12")]
public string program { get; }
    [DispIdAttribute("13")]
public int systemExceptionHandling { get; }
    [DispIdAttribute("14")]
public int cplusplusExceptionHandling { get; }
    [DispIdAttribute("15")]
public int functionStart { get; }
    [DispIdAttribute("16")]
public int allocatesBasePointer { get; }
    [DispIdAttribute("17")]
public UInt32 type { get; }
    [DispIdAttribute("18")]
public IDiaFrameData functionParent { get; }
    public abstract virtual UInt32 get_addressSection();
    public abstract virtual UInt32 get_addressOffset();
    public abstract virtual UInt32 get_relativeVirtualAddress();
    public abstract virtual ulong get_virtualAddress();
    public abstract virtual UInt32 get_lengthBlock();
    public abstract virtual UInt32 get_lengthLocals();
    public abstract virtual UInt32 get_lengthParams();
    public abstract virtual UInt32 get_maxStack();
    public abstract virtual UInt32 get_lengthProlog();
    public abstract virtual UInt32 get_lengthSavedRegisters();
    public abstract virtual string get_program();
    public abstract virtual int get_systemExceptionHandling();
    public abstract virtual int get_cplusplusExceptionHandling();
    public abstract virtual int get_functionStart();
    public abstract virtual int get_allocatesBasePointer();
    public abstract virtual UInt32 get_type();
    public abstract virtual IDiaFrameData get_functionParent();
    public abstract virtual void execute(IDiaStackWalkFrame frame);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("AE605CDC-8105-4A23-B710-3259F1E26112")]
public interface Dia2Lib.IDiaInjectedSource {
    [DispIdAttribute("1")]
public UInt32 crc { get; }
    [DispIdAttribute("2")]
public ulong length { get; }
    [DispIdAttribute("3")]
public string fileName { get; }
    [DispIdAttribute("4")]
public string objectFileName { get; }
    [DispIdAttribute("5")]
public string virtualFilename { get; }
    [DispIdAttribute("6")]
public UInt32 sourceCompression { get; }
    public abstract virtual UInt32 get_crc();
    public abstract virtual ulong get_length();
    public abstract virtual string get_fileName();
    public abstract virtual string get_objectFileName();
    public abstract virtual string get_virtualFilename();
    public abstract virtual UInt32 get_sourceCompression();
    public abstract virtual void get_source(UInt32 cbData, UInt32& pcbData, Byte& pbData);
}
[GuidAttribute("3BFE56B0-390C-4863-9430-1F3D083B7684")]
[InterfaceTypeAttribute("1")]
public interface Dia2Lib.IDiaInputAssemblyFile {
    [DispIdAttribute("1")]
public UInt32 uniqueId { get; }
    [DispIdAttribute("2")]
public UInt32 index { get; }
    [DispIdAttribute("3")]
public UInt32 timeStamp { get; }
    [DispIdAttribute("4")]
public int pdbAvailableAtILMerge { get; }
    [DispIdAttribute("5")]
public string fileName { get; }
    public abstract virtual UInt32 get_uniqueId();
    public abstract virtual UInt32 get_index();
    public abstract virtual UInt32 get_timeStamp();
    public abstract virtual int get_pdbAvailableAtILMerge();
    public abstract virtual string get_fileName();
    public abstract virtual void get_version(UInt32 cbData, UInt32& pcbData, Byte& pbData);
}
[GuidAttribute("B388EB14-BE4D-421D-A8A1-6CF7AB057086")]
[InterfaceTypeAttribute("1")]
public interface Dia2Lib.IDiaLineNumber {
    [DispIdAttribute("1")]
public IDiaSymbol compiland { get; }
    [DispIdAttribute("2")]
public IDiaSourceFile sourceFile { get; }
    [DispIdAttribute("3")]
public UInt32 lineNumber { get; }
    [DispIdAttribute("4")]
public UInt32 lineNumberEnd { get; }
    [DispIdAttribute("5")]
public UInt32 columnNumber { get; }
    [DispIdAttribute("6")]
public UInt32 columnNumberEnd { get; }
    [DispIdAttribute("7")]
public UInt32 addressSection { get; }
    [DispIdAttribute("8")]
public UInt32 addressOffset { get; }
    [DispIdAttribute("9")]
public UInt32 relativeVirtualAddress { get; }
    [DispIdAttribute("10")]
public ulong virtualAddress { get; }
    [DispIdAttribute("11")]
public UInt32 length { get; }
    [DispIdAttribute("12")]
public UInt32 sourceFileId { get; }
    [DispIdAttribute("13")]
public int statement { get; }
    [DispIdAttribute("14")]
public UInt32 compilandId { get; }
    public abstract virtual IDiaSymbol get_compiland();
    public abstract virtual IDiaSourceFile get_sourceFile();
    public abstract virtual UInt32 get_lineNumber();
    public abstract virtual UInt32 get_lineNumberEnd();
    public abstract virtual UInt32 get_columnNumber();
    public abstract virtual UInt32 get_columnNumberEnd();
    public abstract virtual UInt32 get_addressSection();
    public abstract virtual UInt32 get_addressOffset();
    public abstract virtual UInt32 get_relativeVirtualAddress();
    public abstract virtual ulong get_virtualAddress();
    public abstract virtual UInt32 get_length();
    public abstract virtual UInt32 get_sourceFileId();
    public abstract virtual int get_statement();
    public abstract virtual UInt32 get_compilandId();
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("2F609EE1-D1C8-4E24-8288-3326BADCD211")]
public interface Dia2Lib.IDiaSession {
    [DispIdAttribute("1")]
public ulong loadAddress { get; public set; }
    [DispIdAttribute("2")]
public IDiaSymbol globalScope { get; }
    public abstract virtual ulong get_loadAddress();
    public abstract virtual void set_loadAddress(ulong pRetVal);
    public abstract virtual IDiaSymbol get_globalScope();
    public abstract virtual void getEnumTables(IDiaEnumTables& ppEnumTables);
    public abstract virtual void getSymbolsByAddr(IDiaEnumSymbolsByAddr& ppEnumbyAddr);
    public abstract virtual void findChildren(IDiaSymbol parent, SymTagEnum symTag, string name, UInt32 compareFlags, IDiaEnumSymbols& ppResult);
    public abstract virtual void findChildrenEx(IDiaSymbol parent, SymTagEnum symTag, string name, UInt32 compareFlags, IDiaEnumSymbols& ppResult);
    public abstract virtual void findChildrenExByAddr(IDiaSymbol parent, SymTagEnum symTag, string name, UInt32 compareFlags, UInt32 isect, UInt32 offset, IDiaEnumSymbols& ppResult);
    public abstract virtual void findChildrenExByVA(IDiaSymbol parent, SymTagEnum symTag, string name, UInt32 compareFlags, ulong va, IDiaEnumSymbols& ppResult);
    public abstract virtual void findChildrenExByRVA(IDiaSymbol parent, SymTagEnum symTag, string name, UInt32 compareFlags, UInt32 rva, IDiaEnumSymbols& ppResult);
    public abstract virtual void findSymbolByAddr(UInt32 isect, UInt32 offset, SymTagEnum symTag, IDiaSymbol& ppSymbol);
    public abstract virtual void findSymbolByRVA(UInt32 rva, SymTagEnum symTag, IDiaSymbol& ppSymbol);
    public abstract virtual void findSymbolByVA(ulong va, SymTagEnum symTag, IDiaSymbol& ppSymbol);
    public abstract virtual void findSymbolByToken(UInt32 token, SymTagEnum symTag, IDiaSymbol& ppSymbol);
    public abstract virtual void symsAreEquiv(IDiaSymbol symbolA, IDiaSymbol symbolB);
    public abstract virtual void symbolById(UInt32 id, IDiaSymbol& ppSymbol);
    public abstract virtual void findSymbolByRVAEx(UInt32 rva, SymTagEnum symTag, IDiaSymbol& ppSymbol, Int32& displacement);
    public abstract virtual void findSymbolByVAEx(ulong va, SymTagEnum symTag, IDiaSymbol& ppSymbol, Int32& displacement);
    public abstract virtual void findFile(IDiaSymbol pCompiland, string name, UInt32 compareFlags, IDiaEnumSourceFiles& ppResult);
    public abstract virtual void findFileById(UInt32 uniqueId, IDiaSourceFile& ppResult);
    public abstract virtual void findLines(IDiaSymbol compiland, IDiaSourceFile file, IDiaEnumLineNumbers& ppResult);
    public abstract virtual void findLinesByAddr(UInt32 seg, UInt32 offset, UInt32 length, IDiaEnumLineNumbers& ppResult);
    public abstract virtual void findLinesByRVA(UInt32 rva, UInt32 length, IDiaEnumLineNumbers& ppResult);
    public abstract virtual void findLinesByVA(ulong va, UInt32 length, IDiaEnumLineNumbers& ppResult);
    public abstract virtual void findLinesByLinenum(IDiaSymbol compiland, IDiaSourceFile file, UInt32 linenum, UInt32 column, IDiaEnumLineNumbers& ppResult);
    public abstract virtual void findInjectedSource(string srcFile, IDiaEnumInjectedSources& ppResult);
    public abstract virtual void getEnumDebugStreams(IDiaEnumDebugStreams& ppEnumDebugStreams);
    public abstract virtual void findInlineFramesByAddr(IDiaSymbol parent, UInt32 isect, UInt32 offset, IDiaEnumSymbols& ppResult);
    public abstract virtual void findInlineFramesByRVA(IDiaSymbol parent, UInt32 rva, IDiaEnumSymbols& ppResult);
    public abstract virtual void findInlineFramesByVA(IDiaSymbol parent, ulong va, IDiaEnumSymbols& ppResult);
    public abstract virtual void findInlineeLines(IDiaSymbol parent, IDiaEnumLineNumbers& ppResult);
    public abstract virtual void findInlineeLinesByAddr(IDiaSymbol parent, UInt32 isect, UInt32 offset, UInt32 length, IDiaEnumLineNumbers& ppResult);
    public abstract virtual void findInlineeLinesByRVA(IDiaSymbol parent, UInt32 rva, UInt32 length, IDiaEnumLineNumbers& ppResult);
    public abstract virtual void findInlineeLinesByVA(IDiaSymbol parent, ulong va, UInt32 length, IDiaEnumLineNumbers& ppResult);
    public abstract virtual void findInlineeLinesByLinenum(IDiaSymbol compiland, IDiaSourceFile file, UInt32 linenum, UInt32 column, IDiaEnumLineNumbers& ppResult);
    public abstract virtual void findInlineesByName(string name, UInt32 option, IDiaEnumSymbols& ppResult);
    public abstract virtual void findAcceleratorInlineeLinesByLinenum(IDiaSymbol parent, IDiaSourceFile file, UInt32 linenum, UInt32 column, IDiaEnumLineNumbers& ppResult);
    public abstract virtual void findSymbolsForAcceleratorPointerTag(IDiaSymbol parent, UInt32 tagValue, IDiaEnumSymbols& ppResult);
    public abstract virtual void findSymbolsByRVAForAcceleratorPointerTag(IDiaSymbol parent, UInt32 tagValue, UInt32 rva, IDiaEnumSymbols& ppResult);
    public abstract virtual void findAcceleratorInlineesByName(string name, UInt32 option, IDiaEnumSymbols& ppResult);
    public abstract virtual void addressForVA(ulong va, UInt32& pISect, UInt32& pOffset);
    public abstract virtual void addressForRVA(UInt32 rva, UInt32& pISect, UInt32& pOffset);
    public abstract virtual void findILOffsetsByAddr(UInt32 isect, UInt32 offset, UInt32 length, IDiaEnumLineNumbers& ppResult);
    public abstract virtual void findILOffsetsByRVA(UInt32 rva, UInt32 length, IDiaEnumLineNumbers& ppResult);
    public abstract virtual void findILOffsetsByVA(ulong va, UInt32 length, IDiaEnumLineNumbers& ppResult);
    public abstract virtual void findInputAssemblyFiles(IDiaEnumInputAssemblyFiles& ppResult);
    public abstract virtual void findInputAssembly(UInt32 index, IDiaInputAssemblyFile& ppResult);
    public abstract virtual void findInputAssemblyById(UInt32 uniqueId, IDiaInputAssemblyFile& ppResult);
    public abstract virtual void getFuncMDTokenMapSize(UInt32& pcb);
    public abstract virtual void getFuncMDTokenMap(UInt32 cb, UInt32& pcb, Byte& pb);
    public abstract virtual void getTypeMDTokenMapSize(UInt32& pcb);
    public abstract virtual void getTypeMDTokenMap(UInt32 cb, UInt32& pcb, Byte& pb);
    public abstract virtual void getNumberOfFunctionFragments_VA(ulong vaFunc, UInt32 cbFunc, UInt32& pNumFragments);
    public abstract virtual void getNumberOfFunctionFragments_RVA(UInt32 rvaFunc, UInt32 cbFunc, UInt32& pNumFragments);
    public abstract virtual void getFunctionFragments_VA(ulong vaFunc, UInt32 cbFunc, UInt32 cFragments, UInt64& pVaFragment, UInt32& pLenFragment);
    public abstract virtual void getFunctionFragments_RVA(UInt32 rvaFunc, UInt32 cbFunc, UInt32 cFragments, UInt32& pRvaFragment, UInt32& pLenFragment);
    public abstract virtual void getExports(IDiaEnumSymbols& ppResult);
    public abstract virtual void getHeapAllocationSites(IDiaEnumSymbols& ppResult);
    public abstract virtual void findInputAssemblyFile(IDiaSymbol pSymbol, IDiaInputAssemblyFile& ppResult);
}
[GuidAttribute("A2EF5353-F5A8-4EB3-90D2-CB526ACB3CDD")]
[InterfaceTypeAttribute("1")]
public interface Dia2Lib.IDiaSourceFile {
    [DispIdAttribute("2")]
public UInt32 uniqueId { get; }
    [DispIdAttribute("3")]
public string fileName { get; }
    [DispIdAttribute("4")]
public UInt32 checksumType { get; }
    [DispIdAttribute("5")]
public IDiaEnumSymbols compilands { get; }
    public abstract virtual UInt32 get_uniqueId();
    public abstract virtual string get_fileName();
    public abstract virtual UInt32 get_checksumType();
    public abstract virtual IDiaEnumSymbols get_compilands();
    public abstract virtual void get_checksum(UInt32 cbData, UInt32& pcbData, Byte& pbData);
}
[GuidAttribute("5EDBC96D-CDD6-4792-AFBE-CC89007D9610")]
[InterfaceTypeAttribute("1")]
public interface Dia2Lib.IDiaStackFrame {
    [DispIdAttribute("1")]
public UInt32 type { get; }
    [DispIdAttribute("2")]
public ulong base { get; }
    [DispIdAttribute("3")]
public UInt32 size { get; }
    [DispIdAttribute("4")]
public ulong returnAddress { get; }
    [DispIdAttribute("5")]
public ulong localsBase { get; }
    [DispIdAttribute("6")]
public UInt32 lengthLocals { get; }
    [DispIdAttribute("7")]
public UInt32 lengthParams { get; }
    [DispIdAttribute("8")]
public UInt32 lengthProlog { get; }
    [DispIdAttribute("9")]
public UInt32 lengthSavedRegisters { get; }
    [DispIdAttribute("10")]
public int systemExceptionHandling { get; }
    [DispIdAttribute("11")]
public int cplusplusExceptionHandling { get; }
    [DispIdAttribute("12")]
public int functionStart { get; }
    [DispIdAttribute("13")]
public int allocatesBasePointer { get; }
    [DispIdAttribute("14")]
public UInt32 maxStack { get; }
    [DispIdAttribute("15")]
public ulong registerValue { get; }
    public abstract virtual UInt32 get_type();
    public abstract virtual ulong get_base();
    public abstract virtual UInt32 get_size();
    public abstract virtual ulong get_returnAddress();
    public abstract virtual ulong get_localsBase();
    public abstract virtual UInt32 get_lengthLocals();
    public abstract virtual UInt32 get_lengthParams();
    public abstract virtual UInt32 get_lengthProlog();
    public abstract virtual UInt32 get_lengthSavedRegisters();
    public abstract virtual int get_systemExceptionHandling();
    public abstract virtual int get_cplusplusExceptionHandling();
    public abstract virtual int get_functionStart();
    public abstract virtual int get_allocatesBasePointer();
    public abstract virtual UInt32 get_maxStack();
    public abstract virtual ulong get_registerValue(UInt32 index);
}
[GuidAttribute("5485216B-A54C-469F-9670-52B24D5229BB")]
[InterfaceTypeAttribute("1")]
public interface Dia2Lib.IDiaStackWalker {
    public abstract virtual void getEnumFrames(IDiaStackWalkHelper pHelper, IDiaEnumStackFrames& ppenum);
    public abstract virtual void getEnumFrames2(CV_CPU_TYPE_e cpuid, IDiaStackWalkHelper pHelper, IDiaEnumStackFrames& ppenum);
}
[GuidAttribute("07C590C1-438D-4F47-BDCD-4397BC81AD75")]
[InterfaceTypeAttribute("1")]
public interface Dia2Lib.IDiaStackWalkFrame {
    [DispIdAttribute("1")]
public ulong registerValue { get; public set; }
    public abstract virtual ulong get_registerValue(UInt32 index);
    public abstract virtual void set_registerValue(UInt32 index, ulong pRetVal);
    public abstract virtual void readMemory(MemoryTypeEnum type, ulong va, UInt32 cbData, UInt32& pcbData, Byte& pbData);
    public abstract virtual void searchForReturnAddress(IDiaFrameData frame, UInt64& returnAddress);
    public abstract virtual void searchForReturnAddressStart(IDiaFrameData frame, ulong startAddress, UInt64& returnAddress);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("21F81B1B-C5BB-42A3-BC4F-CCBAA75B9F19")]
public interface Dia2Lib.IDiaStackWalkHelper {
    [DispIdAttribute("1")]
public ulong registerValue { get; public set; }
    public abstract virtual ulong get_registerValue(UInt32 index);
    public abstract virtual void set_registerValue(UInt32 index, ulong pRetVal);
    public abstract virtual void readMemory(MemoryTypeEnum type, ulong va, UInt32 cbData, UInt32& pcbData, Byte& pbData);
    public abstract virtual void searchForReturnAddress(IDiaFrameData frame, UInt64& returnAddress);
    public abstract virtual void searchForReturnAddressStart(IDiaFrameData frame, ulong startAddress, UInt64& returnAddress);
    public abstract virtual void frameForVA(ulong va, IDiaFrameData& ppFrame);
    public abstract virtual void symbolForVA(ulong va, IDiaSymbol& ppSymbol);
    public abstract virtual void pdataForVA(ulong va, UInt32 cbData, UInt32& pcbData, Byte& pbData);
    public abstract virtual void imageForVA(ulong vaContext, UInt64& pvaImageStart);
    public abstract virtual void addressForVA(ulong va, UInt32& pISect, UInt32& pOffset);
    public abstract virtual void numberOfFunctionFragmentsForVA(ulong vaFunc, UInt32 cbFunc, UInt32& pNumFragments);
    public abstract virtual void functionFragmentsForVA(ulong vaFunc, UInt32 cbFunc, UInt32 cFragments, UInt64& pVaFragment, UInt32& pLenFragment);
}
[GuidAttribute("CB787B2F-BD6C-4635-BA52-933126BD2DCD")]
[DefaultMemberAttribute("symIndexId")]
[InterfaceTypeAttribute("1")]
public interface Dia2Lib.IDiaSymbol {
    [DispIdAttribute("0")]
public UInt32 symIndexId { get; }
    [DispIdAttribute("1")]
public UInt32 symTag { get; }
    [DispIdAttribute("2")]
public string name { get; }
    [DispIdAttribute("3")]
public IDiaSymbol lexicalParent { get; }
    [DispIdAttribute("4")]
public IDiaSymbol classParent { get; }
    [DispIdAttribute("5")]
public IDiaSymbol type { get; }
    [DispIdAttribute("6")]
public UInt32 dataKind { get; }
    [DispIdAttribute("7")]
public UInt32 locationType { get; }
    [DispIdAttribute("8")]
public UInt32 addressSection { get; }
    [DispIdAttribute("9")]
public UInt32 addressOffset { get; }
    [DispIdAttribute("10")]
public UInt32 relativeVirtualAddress { get; }
    [DispIdAttribute("11")]
public ulong virtualAddress { get; }
    [DispIdAttribute("12")]
public UInt32 registerId { get; }
    [DispIdAttribute("13")]
public int offset { get; }
    [DispIdAttribute("14")]
public ulong length { get; }
    [DispIdAttribute("15")]
public UInt32 slot { get; }
    [DispIdAttribute("16")]
public int volatileType { get; }
    [DispIdAttribute("17")]
public int constType { get; }
    [DispIdAttribute("18")]
public int unalignedType { get; }
    [DispIdAttribute("19")]
public UInt32 access { get; }
    [DispIdAttribute("20")]
public string libraryName { get; }
    [DispIdAttribute("21")]
public UInt32 platform { get; }
    [DispIdAttribute("22")]
public UInt32 language { get; }
    [DispIdAttribute("23")]
public int editAndContinueEnabled { get; }
    [DispIdAttribute("24")]
public UInt32 frontEndMajor { get; }
    [DispIdAttribute("25")]
public UInt32 frontEndMinor { get; }
    [DispIdAttribute("26")]
public UInt32 frontEndBuild { get; }
    [DispIdAttribute("27")]
public UInt32 backEndMajor { get; }
    [DispIdAttribute("28")]
public UInt32 backEndMinor { get; }
    [DispIdAttribute("29")]
public UInt32 backEndBuild { get; }
    [DispIdAttribute("30")]
public string sourceFileName { get; }
    [DispIdAttribute("31")]
public string unused { get; }
    [DispIdAttribute("32")]
public UInt32 thunkOrdinal { get; }
    [DispIdAttribute("33")]
public int thisAdjust { get; }
    [DispIdAttribute("34")]
public UInt32 virtualBaseOffset { get; }
    [DispIdAttribute("35")]
public int virtual { get; }
    [DispIdAttribute("36")]
public int intro { get; }
    [DispIdAttribute("37")]
public int pure { get; }
    [DispIdAttribute("38")]
public UInt32 callingConvention { get; }
    [DispIdAttribute("39")]
public object value { get; }
    [DispIdAttribute("40")]
public UInt32 baseType { get; }
    [DispIdAttribute("41")]
public UInt32 token { get; }
    [DispIdAttribute("42")]
public UInt32 timeStamp { get; }
    [DispIdAttribute("43")]
public Guid guid { get; }
    [DispIdAttribute("44")]
public string symbolsFileName { get; }
    [DispIdAttribute("46")]
public int reference { get; }
    [DispIdAttribute("47")]
public UInt32 count { get; }
    [DispIdAttribute("49")]
public UInt32 bitPosition { get; }
    [DispIdAttribute("50")]
public IDiaSymbol arrayIndexType { get; }
    [DispIdAttribute("51")]
public int packed { get; }
    [DispIdAttribute("52")]
public int constructor { get; }
    [DispIdAttribute("53")]
public int overloadedOperator { get; }
    [DispIdAttribute("54")]
public int nested { get; }
    [DispIdAttribute("55")]
public int hasNestedTypes { get; }
    [DispIdAttribute("56")]
public int hasAssignmentOperator { get; }
    [DispIdAttribute("57")]
public int hasCastOperator { get; }
    [DispIdAttribute("58")]
public int scoped { get; }
    [DispIdAttribute("59")]
public int virtualBaseClass { get; }
    [DispIdAttribute("60")]
public int indirectVirtualBaseClass { get; }
    [DispIdAttribute("61")]
public int virtualBasePointerOffset { get; }
    [DispIdAttribute("62")]
public IDiaSymbol virtualTableShape { get; }
    [DispIdAttribute("64")]
public UInt32 lexicalParentId { get; }
    [DispIdAttribute("65")]
public UInt32 classParentId { get; }
    [DispIdAttribute("66")]
public UInt32 typeId { get; }
    [DispIdAttribute("67")]
public UInt32 arrayIndexTypeId { get; }
    [DispIdAttribute("68")]
public UInt32 virtualTableShapeId { get; }
    [DispIdAttribute("69")]
public int code { get; }
    [DispIdAttribute("70")]
public int function { get; }
    [DispIdAttribute("71")]
public int managed { get; }
    [DispIdAttribute("72")]
public int msil { get; }
    [DispIdAttribute("73")]
public UInt32 virtualBaseDispIndex { get; }
    [DispIdAttribute("74")]
public string undecoratedName { get; }
    [DispIdAttribute("75")]
public UInt32 age { get; }
    [DispIdAttribute("76")]
public UInt32 signature { get; }
    [DispIdAttribute("77")]
public int compilerGenerated { get; }
    [DispIdAttribute("78")]
public int addressTaken { get; }
    [DispIdAttribute("79")]
public UInt32 rank { get; }
    [DispIdAttribute("80")]
public IDiaSymbol lowerBound { get; }
    [DispIdAttribute("81")]
public IDiaSymbol upperBound { get; }
    [DispIdAttribute("82")]
public UInt32 lowerBoundId { get; }
    [DispIdAttribute("83")]
public UInt32 upperBoundId { get; }
    [DispIdAttribute("84")]
public UInt32 targetSection { get; }
    [DispIdAttribute("85")]
public UInt32 targetOffset { get; }
    [DispIdAttribute("86")]
public UInt32 targetRelativeVirtualAddress { get; }
    [DispIdAttribute("87")]
public ulong targetVirtualAddress { get; }
    [DispIdAttribute("88")]
public UInt32 machineType { get; }
    [DispIdAttribute("89")]
public UInt32 oemId { get; }
    [DispIdAttribute("90")]
public UInt32 oemSymbolId { get; }
    [DispIdAttribute("91")]
public IDiaSymbol objectPointerType { get; }
    [DispIdAttribute("92")]
public UInt32 udtKind { get; }
    [DispIdAttribute("93")]
public int noReturn { get; }
    [DispIdAttribute("94")]
public int customCallingConvention { get; }
    [DispIdAttribute("95")]
public int noInline { get; }
    [DispIdAttribute("96")]
public int optimizedCodeDebugInfo { get; }
    [DispIdAttribute("97")]
public int notReached { get; }
    [DispIdAttribute("98")]
public int interruptReturn { get; }
    [DispIdAttribute("99")]
public int farReturn { get; }
    [DispIdAttribute("100")]
public int isStatic { get; }
    [DispIdAttribute("101")]
public int hasDebugInfo { get; }
    [DispIdAttribute("102")]
public int isLTCG { get; }
    [DispIdAttribute("103")]
public int isDataAligned { get; }
    [DispIdAttribute("104")]
public int hasSecurityChecks { get; }
    [DispIdAttribute("105")]
public string compilerName { get; }
    [DispIdAttribute("106")]
public int hasAlloca { get; }
    [DispIdAttribute("107")]
public int hasSetJump { get; }
    [DispIdAttribute("108")]
public int hasLongJump { get; }
    [DispIdAttribute("109")]
public int hasInlAsm { get; }
    [DispIdAttribute("110")]
public int hasEH { get; }
    [DispIdAttribute("111")]
public int hasSEH { get; }
    [DispIdAttribute("112")]
public int hasEHa { get; }
    [DispIdAttribute("113")]
public int isNaked { get; }
    [DispIdAttribute("114")]
public int isAggregated { get; }
    [DispIdAttribute("115")]
public int isSplitted { get; }
    [DispIdAttribute("116")]
public IDiaSymbol container { get; }
    [DispIdAttribute("117")]
public int inlSpec { get; }
    [DispIdAttribute("118")]
public int noStackOrdering { get; }
    [DispIdAttribute("119")]
public IDiaSymbol virtualBaseTableType { get; }
    [DispIdAttribute("120")]
public int hasManagedCode { get; }
    [DispIdAttribute("121")]
public int isHotpatchable { get; }
    [DispIdAttribute("122")]
public int isCVTCIL { get; }
    [DispIdAttribute("123")]
public int isMSILNetmodule { get; }
    [DispIdAttribute("124")]
public int isCTypes { get; }
    [DispIdAttribute("125")]
public int isStripped { get; }
    [DispIdAttribute("126")]
public UInt32 frontEndQFE { get; }
    [DispIdAttribute("127")]
public UInt32 backEndQFE { get; }
    [DispIdAttribute("128")]
public int wasInlined { get; }
    [DispIdAttribute("129")]
public int strictGSCheck { get; }
    [DispIdAttribute("130")]
public int isCxxReturnUdt { get; }
    [DispIdAttribute("131")]
public int isConstructorVirtualBase { get; }
    [DispIdAttribute("132")]
public int RValueReference { get; }
    [DispIdAttribute("133")]
public IDiaSymbol unmodifiedType { get; }
    [DispIdAttribute("134")]
public int framePointerPresent { get; }
    [DispIdAttribute("135")]
public int isSafeBuffers { get; }
    [DispIdAttribute("136")]
public int intrinsic { get; }
    [DispIdAttribute("137")]
public int sealed { get; }
    [DispIdAttribute("138")]
public int hfaFloat { get; }
    [DispIdAttribute("139")]
public int hfaDouble { get; }
    [DispIdAttribute("140")]
public UInt32 liveRangeStartAddressSection { get; }
    [DispIdAttribute("141")]
public UInt32 liveRangeStartAddressOffset { get; }
    [DispIdAttribute("142")]
public UInt32 liveRangeStartRelativeVirtualAddress { get; }
    [DispIdAttribute("143")]
public UInt32 countLiveRanges { get; }
    [DispIdAttribute("144")]
public ulong liveRangeLength { get; }
    [DispIdAttribute("145")]
public UInt32 offsetInUdt { get; }
    [DispIdAttribute("146")]
public UInt32 paramBasePointerRegisterId { get; }
    [DispIdAttribute("147")]
public UInt32 localBasePointerRegisterId { get; }
    [DispIdAttribute("148")]
public int isLocationControlFlowDependent { get; }
    [DispIdAttribute("149")]
public UInt32 stride { get; }
    [DispIdAttribute("150")]
public UInt32 numberOfRows { get; }
    [DispIdAttribute("151")]
public UInt32 numberOfColumns { get; }
    [DispIdAttribute("152")]
public int isMatrixRowMajor { get; }
    [DispIdAttribute("153")]
public int isReturnValue { get; }
    [DispIdAttribute("154")]
public int isOptimizedAway { get; }
    [DispIdAttribute("155")]
public UInt32 builtInKind { get; }
    [DispIdAttribute("156")]
public UInt32 registerType { get; }
    [DispIdAttribute("157")]
public UInt32 baseDataSlot { get; }
    [DispIdAttribute("158")]
public UInt32 baseDataOffset { get; }
    [DispIdAttribute("159")]
public UInt32 textureSlot { get; }
    [DispIdAttribute("160")]
public UInt32 samplerSlot { get; }
    [DispIdAttribute("161")]
public UInt32 uavSlot { get; }
    [DispIdAttribute("162")]
public UInt32 sizeInUdt { get; }
    [DispIdAttribute("163")]
public UInt32 memorySpaceKind { get; }
    [DispIdAttribute("164")]
public UInt32 unmodifiedTypeId { get; }
    [DispIdAttribute("165")]
public UInt32 subTypeId { get; }
    [DispIdAttribute("166")]
public IDiaSymbol subType { get; }
    [DispIdAttribute("167")]
public UInt32 numberOfModifiers { get; }
    [DispIdAttribute("168")]
public UInt32 numberOfRegisterIndices { get; }
    [DispIdAttribute("169")]
public int isHLSLData { get; }
    [DispIdAttribute("170")]
public int isPointerToDataMember { get; }
    [DispIdAttribute("171")]
public int isPointerToMemberFunction { get; }
    [DispIdAttribute("172")]
public int isSingleInheritance { get; }
    [DispIdAttribute("173")]
public int isMultipleInheritance { get; }
    [DispIdAttribute("174")]
public int isVirtualInheritance { get; }
    [DispIdAttribute("175")]
public int restrictedType { get; }
    [DispIdAttribute("176")]
public int isPointerBasedOnSymbolValue { get; }
    [DispIdAttribute("177")]
public IDiaSymbol baseSymbol { get; }
    [DispIdAttribute("178")]
public UInt32 baseSymbolId { get; }
    [DispIdAttribute("179")]
public string objectFileName { get; }
    [DispIdAttribute("180")]
public int isAcceleratorGroupSharedLocal { get; }
    [DispIdAttribute("181")]
public int isAcceleratorPointerTagLiveRange { get; }
    [DispIdAttribute("182")]
public int isAcceleratorStubFunction { get; }
    [DispIdAttribute("183")]
public UInt32 numberOfAcceleratorPointerTags { get; }
    [DispIdAttribute("184")]
public int isSdl { get; }
    [DispIdAttribute("185")]
public int isWinRTPointer { get; }
    [DispIdAttribute("186")]
public int isRefUdt { get; }
    [DispIdAttribute("187")]
public int isValueUdt { get; }
    [DispIdAttribute("188")]
public int isInterfaceUdt { get; }
    [DispIdAttribute("189")]
public int isPGO { get; }
    [DispIdAttribute("190")]
public int hasValidPGOCounts { get; }
    [DispIdAttribute("191")]
public int isOptimizedForSpeed { get; }
    [DispIdAttribute("192")]
public UInt32 PGOEntryCount { get; }
    [DispIdAttribute("193")]
public UInt32 PGOEdgeCount { get; }
    [DispIdAttribute("194")]
public ulong PGODynamicInstructionCount { get; }
    [DispIdAttribute("195")]
public UInt32 staticSize { get; }
    [DispIdAttribute("196")]
public UInt32 finalLiveStaticSize { get; }
    [DispIdAttribute("197")]
public string phaseName { get; }
    [DispIdAttribute("198")]
public int hasControlFlowCheck { get; }
    [DispIdAttribute("199")]
public int constantExport { get; }
    [DispIdAttribute("200")]
public int dataExport { get; }
    [DispIdAttribute("201")]
public int privateExport { get; }
    [DispIdAttribute("202")]
public int noNameExport { get; }
    [DispIdAttribute("203")]
public int exportHasExplicitlyAssignedOrdinal { get; }
    [DispIdAttribute("204")]
public int exportIsForwarder { get; }
    [DispIdAttribute("205")]
public UInt32 ordinal { get; }
    [DispIdAttribute("206")]
public UInt32 frameSize { get; }
    [DispIdAttribute("207")]
public UInt32 exceptionHandlerAddressSection { get; }
    [DispIdAttribute("208")]
public UInt32 exceptionHandlerAddressOffset { get; }
    [DispIdAttribute("209")]
public UInt32 exceptionHandlerRelativeVirtualAddress { get; }
    [DispIdAttribute("210")]
public ulong exceptionHandlerVirtualAddress { get; }
    [DispIdAttribute("211")]
public UInt32 characteristics { get; }
    [DispIdAttribute("212")]
public IDiaSymbol coffGroup { get; }
    public abstract virtual UInt32 get_symIndexId();
    public abstract virtual UInt32 get_symTag();
    public abstract virtual string get_name();
    public abstract virtual IDiaSymbol get_lexicalParent();
    public abstract virtual IDiaSymbol get_classParent();
    public abstract virtual IDiaSymbol get_type();
    public abstract virtual UInt32 get_dataKind();
    public abstract virtual UInt32 get_locationType();
    public abstract virtual UInt32 get_addressSection();
    public abstract virtual UInt32 get_addressOffset();
    public abstract virtual UInt32 get_relativeVirtualAddress();
    public abstract virtual ulong get_virtualAddress();
    public abstract virtual UInt32 get_registerId();
    public abstract virtual int get_offset();
    public abstract virtual ulong get_length();
    public abstract virtual UInt32 get_slot();
    public abstract virtual int get_volatileType();
    public abstract virtual int get_constType();
    public abstract virtual int get_unalignedType();
    public abstract virtual UInt32 get_access();
    public abstract virtual string get_libraryName();
    public abstract virtual UInt32 get_platform();
    public abstract virtual UInt32 get_language();
    public abstract virtual int get_editAndContinueEnabled();
    public abstract virtual UInt32 get_frontEndMajor();
    public abstract virtual UInt32 get_frontEndMinor();
    public abstract virtual UInt32 get_frontEndBuild();
    public abstract virtual UInt32 get_backEndMajor();
    public abstract virtual UInt32 get_backEndMinor();
    public abstract virtual UInt32 get_backEndBuild();
    public abstract virtual string get_sourceFileName();
    public abstract virtual string get_unused();
    public abstract virtual UInt32 get_thunkOrdinal();
    public abstract virtual int get_thisAdjust();
    public abstract virtual UInt32 get_virtualBaseOffset();
    public abstract virtual int get_virtual();
    public abstract virtual int get_intro();
    public abstract virtual int get_pure();
    public abstract virtual UInt32 get_callingConvention();
    public abstract virtual object get_value();
    public abstract virtual UInt32 get_baseType();
    public abstract virtual UInt32 get_token();
    public abstract virtual UInt32 get_timeStamp();
    public abstract virtual Guid get_guid();
    public abstract virtual string get_symbolsFileName();
    public abstract virtual int get_reference();
    public abstract virtual UInt32 get_count();
    public abstract virtual UInt32 get_bitPosition();
    public abstract virtual IDiaSymbol get_arrayIndexType();
    public abstract virtual int get_packed();
    public abstract virtual int get_constructor();
    public abstract virtual int get_overloadedOperator();
    public abstract virtual int get_nested();
    public abstract virtual int get_hasNestedTypes();
    public abstract virtual int get_hasAssignmentOperator();
    public abstract virtual int get_hasCastOperator();
    public abstract virtual int get_scoped();
    public abstract virtual int get_virtualBaseClass();
    public abstract virtual int get_indirectVirtualBaseClass();
    public abstract virtual int get_virtualBasePointerOffset();
    public abstract virtual IDiaSymbol get_virtualTableShape();
    public abstract virtual UInt32 get_lexicalParentId();
    public abstract virtual UInt32 get_classParentId();
    public abstract virtual UInt32 get_typeId();
    public abstract virtual UInt32 get_arrayIndexTypeId();
    public abstract virtual UInt32 get_virtualTableShapeId();
    public abstract virtual int get_code();
    public abstract virtual int get_function();
    public abstract virtual int get_managed();
    public abstract virtual int get_msil();
    public abstract virtual UInt32 get_virtualBaseDispIndex();
    public abstract virtual string get_undecoratedName();
    public abstract virtual UInt32 get_age();
    public abstract virtual UInt32 get_signature();
    public abstract virtual int get_compilerGenerated();
    public abstract virtual int get_addressTaken();
    public abstract virtual UInt32 get_rank();
    public abstract virtual IDiaSymbol get_lowerBound();
    public abstract virtual IDiaSymbol get_upperBound();
    public abstract virtual UInt32 get_lowerBoundId();
    public abstract virtual UInt32 get_upperBoundId();
    public abstract virtual void get_dataBytes(UInt32 cbData, UInt32& pcbData, Byte& pbData);
    public abstract virtual void findChildren(SymTagEnum symTag, string name, UInt32 compareFlags, IDiaEnumSymbols& ppResult);
    public abstract virtual void findChildrenEx(SymTagEnum symTag, string name, UInt32 compareFlags, IDiaEnumSymbols& ppResult);
    public abstract virtual void findChildrenExByAddr(SymTagEnum symTag, string name, UInt32 compareFlags, UInt32 isect, UInt32 offset, IDiaEnumSymbols& ppResult);
    public abstract virtual void findChildrenExByVA(SymTagEnum symTag, string name, UInt32 compareFlags, ulong va, IDiaEnumSymbols& ppResult);
    public abstract virtual void findChildrenExByRVA(SymTagEnum symTag, string name, UInt32 compareFlags, UInt32 rva, IDiaEnumSymbols& ppResult);
    public abstract virtual UInt32 get_targetSection();
    public abstract virtual UInt32 get_targetOffset();
    public abstract virtual UInt32 get_targetRelativeVirtualAddress();
    public abstract virtual ulong get_targetVirtualAddress();
    public abstract virtual UInt32 get_machineType();
    public abstract virtual UInt32 get_oemId();
    public abstract virtual UInt32 get_oemSymbolId();
    public abstract virtual void get_types(UInt32 cTypes, UInt32& pcTypes, IDiaSymbol& pTypes);
    public abstract virtual void get_typeIds(UInt32 cTypeIds, UInt32& pcTypeIds, UInt32& pdwTypeIds);
    public abstract virtual IDiaSymbol get_objectPointerType();
    public abstract virtual UInt32 get_udtKind();
    public abstract virtual void get_undecoratedNameEx(UInt32 undecorateOptions, String& name);
    public abstract virtual int get_noReturn();
    public abstract virtual int get_customCallingConvention();
    public abstract virtual int get_noInline();
    public abstract virtual int get_optimizedCodeDebugInfo();
    public abstract virtual int get_notReached();
    public abstract virtual int get_interruptReturn();
    public abstract virtual int get_farReturn();
    public abstract virtual int get_isStatic();
    public abstract virtual int get_hasDebugInfo();
    public abstract virtual int get_isLTCG();
    public abstract virtual int get_isDataAligned();
    public abstract virtual int get_hasSecurityChecks();
    public abstract virtual string get_compilerName();
    public abstract virtual int get_hasAlloca();
    public abstract virtual int get_hasSetJump();
    public abstract virtual int get_hasLongJump();
    public abstract virtual int get_hasInlAsm();
    public abstract virtual int get_hasEH();
    public abstract virtual int get_hasSEH();
    public abstract virtual int get_hasEHa();
    public abstract virtual int get_isNaked();
    public abstract virtual int get_isAggregated();
    public abstract virtual int get_isSplitted();
    public abstract virtual IDiaSymbol get_container();
    public abstract virtual int get_inlSpec();
    public abstract virtual int get_noStackOrdering();
    public abstract virtual IDiaSymbol get_virtualBaseTableType();
    public abstract virtual int get_hasManagedCode();
    public abstract virtual int get_isHotpatchable();
    public abstract virtual int get_isCVTCIL();
    public abstract virtual int get_isMSILNetmodule();
    public abstract virtual int get_isCTypes();
    public abstract virtual int get_isStripped();
    public abstract virtual UInt32 get_frontEndQFE();
    public abstract virtual UInt32 get_backEndQFE();
    public abstract virtual int get_wasInlined();
    public abstract virtual int get_strictGSCheck();
    public abstract virtual int get_isCxxReturnUdt();
    public abstract virtual int get_isConstructorVirtualBase();
    public abstract virtual int get_RValueReference();
    public abstract virtual IDiaSymbol get_unmodifiedType();
    public abstract virtual int get_framePointerPresent();
    public abstract virtual int get_isSafeBuffers();
    public abstract virtual int get_intrinsic();
    public abstract virtual int get_sealed();
    public abstract virtual int get_hfaFloat();
    public abstract virtual int get_hfaDouble();
    public abstract virtual UInt32 get_liveRangeStartAddressSection();
    public abstract virtual UInt32 get_liveRangeStartAddressOffset();
    public abstract virtual UInt32 get_liveRangeStartRelativeVirtualAddress();
    public abstract virtual UInt32 get_countLiveRanges();
    public abstract virtual ulong get_liveRangeLength();
    public abstract virtual UInt32 get_offsetInUdt();
    public abstract virtual UInt32 get_paramBasePointerRegisterId();
    public abstract virtual UInt32 get_localBasePointerRegisterId();
    public abstract virtual int get_isLocationControlFlowDependent();
    public abstract virtual UInt32 get_stride();
    public abstract virtual UInt32 get_numberOfRows();
    public abstract virtual UInt32 get_numberOfColumns();
    public abstract virtual int get_isMatrixRowMajor();
    public abstract virtual void get_numericProperties(UInt32 cnt, UInt32& pcnt, UInt32& pProperties);
    public abstract virtual void get_modifierValues(UInt32 cnt, UInt32& pcnt, UInt16& pModifiers);
    public abstract virtual int get_isReturnValue();
    public abstract virtual int get_isOptimizedAway();
    public abstract virtual UInt32 get_builtInKind();
    public abstract virtual UInt32 get_registerType();
    public abstract virtual UInt32 get_baseDataSlot();
    public abstract virtual UInt32 get_baseDataOffset();
    public abstract virtual UInt32 get_textureSlot();
    public abstract virtual UInt32 get_samplerSlot();
    public abstract virtual UInt32 get_uavSlot();
    public abstract virtual UInt32 get_sizeInUdt();
    public abstract virtual UInt32 get_memorySpaceKind();
    public abstract virtual UInt32 get_unmodifiedTypeId();
    public abstract virtual UInt32 get_subTypeId();
    public abstract virtual IDiaSymbol get_subType();
    public abstract virtual UInt32 get_numberOfModifiers();
    public abstract virtual UInt32 get_numberOfRegisterIndices();
    public abstract virtual int get_isHLSLData();
    public abstract virtual int get_isPointerToDataMember();
    public abstract virtual int get_isPointerToMemberFunction();
    public abstract virtual int get_isSingleInheritance();
    public abstract virtual int get_isMultipleInheritance();
    public abstract virtual int get_isVirtualInheritance();
    public abstract virtual int get_restrictedType();
    public abstract virtual int get_isPointerBasedOnSymbolValue();
    public abstract virtual IDiaSymbol get_baseSymbol();
    public abstract virtual UInt32 get_baseSymbolId();
    public abstract virtual string get_objectFileName();
    public abstract virtual int get_isAcceleratorGroupSharedLocal();
    public abstract virtual int get_isAcceleratorPointerTagLiveRange();
    public abstract virtual int get_isAcceleratorStubFunction();
    public abstract virtual UInt32 get_numberOfAcceleratorPointerTags();
    public abstract virtual int get_isSdl();
    public abstract virtual int get_isWinRTPointer();
    public abstract virtual int get_isRefUdt();
    public abstract virtual int get_isValueUdt();
    public abstract virtual int get_isInterfaceUdt();
    public abstract virtual void findInlineFramesByAddr(UInt32 isect, UInt32 offset, IDiaEnumSymbols& ppResult);
    public abstract virtual void findInlineFramesByRVA(UInt32 rva, IDiaEnumSymbols& ppResult);
    public abstract virtual void findInlineFramesByVA(ulong va, IDiaEnumSymbols& ppResult);
    public abstract virtual void findInlineeLines(IDiaEnumLineNumbers& ppResult);
    public abstract virtual void findInlineeLinesByAddr(UInt32 isect, UInt32 offset, UInt32 length, IDiaEnumLineNumbers& ppResult);
    public abstract virtual void findInlineeLinesByRVA(UInt32 rva, UInt32 length, IDiaEnumLineNumbers& ppResult);
    public abstract virtual void findInlineeLinesByVA(ulong va, UInt32 length, IDiaEnumLineNumbers& ppResult);
    public abstract virtual void findSymbolsForAcceleratorPointerTag(UInt32 tagValue, IDiaEnumSymbols& ppResult);
    public abstract virtual void findSymbolsByRVAForAcceleratorPointerTag(UInt32 tagValue, UInt32 rva, IDiaEnumSymbols& ppResult);
    public abstract virtual void get_acceleratorPointerTags(UInt32 cnt, UInt32& pcnt, UInt32& pPointerTags);
    public abstract virtual void getSrcLineOnTypeDefn(IDiaLineNumber& ppResult);
    public abstract virtual int get_isPGO();
    public abstract virtual int get_hasValidPGOCounts();
    public abstract virtual int get_isOptimizedForSpeed();
    public abstract virtual UInt32 get_PGOEntryCount();
    public abstract virtual UInt32 get_PGOEdgeCount();
    public abstract virtual ulong get_PGODynamicInstructionCount();
    public abstract virtual UInt32 get_staticSize();
    public abstract virtual UInt32 get_finalLiveStaticSize();
    public abstract virtual string get_phaseName();
    public abstract virtual int get_hasControlFlowCheck();
    public abstract virtual int get_constantExport();
    public abstract virtual int get_dataExport();
    public abstract virtual int get_privateExport();
    public abstract virtual int get_noNameExport();
    public abstract virtual int get_exportHasExplicitlyAssignedOrdinal();
    public abstract virtual int get_exportIsForwarder();
    public abstract virtual UInt32 get_ordinal();
    public abstract virtual UInt32 get_frameSize();
    public abstract virtual UInt32 get_exceptionHandlerAddressSection();
    public abstract virtual UInt32 get_exceptionHandlerAddressOffset();
    public abstract virtual UInt32 get_exceptionHandlerRelativeVirtualAddress();
    public abstract virtual ulong get_exceptionHandlerVirtualAddress();
    public abstract virtual void findInputAssemblyFile(IDiaInputAssemblyFile& ppResult);
    public abstract virtual UInt32 get_characteristics();
    public abstract virtual IDiaSymbol get_coffGroup();
}
[DefaultMemberAttribute("Item")]
[InterfaceTypeAttribute("1")]
[GuidAttribute("4A59FB77-ABAC-469B-A30B-9ECC85BFEF14")]
public interface Dia2Lib.IDiaTable {
    [DispIdAttribute("1")]
public string name { get; }
    [DispIdAttribute("2")]
public int count { get; }
    public abstract virtual void RemoteNext(UInt32 celt, Object& rgelt, UInt32& pceltFetched);
    public abstract virtual void Skip(UInt32 celt);
    public abstract virtual void Reset();
    public abstract virtual void Clone(IEnumUnknown& ppenum);
    public abstract virtual IEnumerator GetEnumerator();
    public abstract virtual string get_name();
    public abstract virtual int get_count();
    public abstract virtual object Item(UInt32 index);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("00000100-0000-0000-C000-000000000046")]
public interface Dia2Lib.IEnumUnknown {
    public abstract virtual void RemoteNext(UInt32 celt, Object& rgelt, UInt32& pceltFetched);
    public abstract virtual void Skip(UInt32 celt);
    public abstract virtual void Reset();
    public abstract virtual void Clone(IEnumUnknown& ppenum);
}
[GuidAttribute("0C733A30-2A1C-11CE-ADE5-00AA0044773D")]
[InterfaceTypeAttribute("1")]
public interface Dia2Lib.ISequentialStream {
    public abstract virtual void RemoteRead(Byte& pv, UInt32 cb, UInt32& pcbRead);
    public abstract virtual void RemoteWrite(Byte& pv, UInt32 cb, UInt32& pcbWritten);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("0000000C-0000-0000-C000-000000000046")]
public interface Dia2Lib.IStream {
    public abstract virtual void RemoteRead(Byte& pv, UInt32 cb, UInt32& pcbRead);
    public abstract virtual void RemoteWrite(Byte& pv, UInt32 cb, UInt32& pcbWritten);
    public abstract virtual void RemoteSeek(_LARGE_INTEGER dlibMove, UInt32 dwOrigin, _ULARGE_INTEGER& plibNewPosition);
    public abstract virtual void SetSize(_ULARGE_INTEGER libNewSize);
    public abstract virtual void RemoteCopyTo(IStream pstm, _ULARGE_INTEGER cb, _ULARGE_INTEGER& pcbRead, _ULARGE_INTEGER& pcbWritten);
    public abstract virtual void Commit(UInt32 grfCommitFlags);
    public abstract virtual void Revert();
    public abstract virtual void LockRegion(_ULARGE_INTEGER libOffset, _ULARGE_INTEGER cb, UInt32 dwLockType);
    public abstract virtual void UnlockRegion(_ULARGE_INTEGER libOffset, _ULARGE_INTEGER cb, UInt32 dwLockType);
    public abstract virtual void Stat(tagSTATSTG& pstatstg, UInt32 grfStatFlag);
    public abstract virtual void Clone(IStream& ppstm);
}
public enum Dia2Lib.MemoryTypeEnum : Enum {
    public int value__;
    public static MemoryTypeEnum MemTypeCode;
    public static MemoryTypeEnum MemTypeData;
    public static MemoryTypeEnum MemTypeStack;
    public static MemoryTypeEnum MemTypeCodeOnHeap;
    public static MemoryTypeEnum MemTypeAny;
}
public enum Dia2Lib.SymTagEnum : Enum {
    public int value__;
    public static SymTagEnum SymTagNull;
    public static SymTagEnum SymTagExe;
    public static SymTagEnum SymTagCompiland;
    public static SymTagEnum SymTagCompilandDetails;
    public static SymTagEnum SymTagCompilandEnv;
    public static SymTagEnum SymTagFunction;
    public static SymTagEnum SymTagBlock;
    public static SymTagEnum SymTagData;
    public static SymTagEnum SymTagAnnotation;
    public static SymTagEnum SymTagLabel;
    public static SymTagEnum SymTagPublicSymbol;
    public static SymTagEnum SymTagUDT;
    public static SymTagEnum SymTagEnum;
    public static SymTagEnum SymTagFunctionType;
    public static SymTagEnum SymTagPointerType;
    public static SymTagEnum SymTagArrayType;
    public static SymTagEnum SymTagBaseType;
    public static SymTagEnum SymTagTypedef;
    public static SymTagEnum SymTagBaseClass;
    public static SymTagEnum SymTagFriend;
    public static SymTagEnum SymTagFunctionArgType;
    public static SymTagEnum SymTagFuncDebugStart;
    public static SymTagEnum SymTagFuncDebugEnd;
    public static SymTagEnum SymTagUsingNamespace;
    public static SymTagEnum SymTagVTableShape;
    public static SymTagEnum SymTagVTable;
    public static SymTagEnum SymTagCustom;
    public static SymTagEnum SymTagThunk;
    public static SymTagEnum SymTagCustomType;
    public static SymTagEnum SymTagManagedType;
    public static SymTagEnum SymTagDimension;
    public static SymTagEnum SymTagCallSite;
    public static SymTagEnum SymTagInlineSite;
    public static SymTagEnum SymTagBaseInterface;
    public static SymTagEnum SymTagVectorType;
    public static SymTagEnum SymTagMatrixType;
    public static SymTagEnum SymTagHLSLType;
    public static SymTagEnum SymTagCaller;
    public static SymTagEnum SymTagCallee;
    public static SymTagEnum SymTagExport;
    public static SymTagEnum SymTagHeapAllocationSite;
    public static SymTagEnum SymTagCoffGroup;
    public static SymTagEnum SymTagMax;
}
public class Dia2Lib.tagSTATSTG : ValueType {
    public string pwcsName;
    public UInt32 type;
    public _ULARGE_INTEGER cbSize;
    public _FILETIME mtime;
    public _FILETIME ctime;
    public _FILETIME atime;
    public UInt32 grfMode;
    public UInt32 grfLocksSupported;
    public Guid clsid;
    public UInt32 grfStateBits;
    public UInt32 reserved;
}
