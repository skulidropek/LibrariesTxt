[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
[ExtensionAttribute]
public static class Microsoft.Identity.Client.Broker.BrokerExtension : object {
    [ExtensionAttribute]
[EditorBrowsableAttribute("1")]
[ObsoleteAttribute("This broker implementation is generally available. Use WithBroker(BrokerOptions) in Microsoft.Identity.Client.Broker package instead. See https://aka.ms/msal-net-wam for details.", "False")]
public static PublicClientApplicationBuilder WithBrokerPreview(PublicClientApplicationBuilder builder, bool enableBroker);
    [ExtensionAttribute]
public static PublicClientApplicationBuilder WithBroker(PublicClientApplicationBuilder builder, BrokerOptions brokerOptions);
    [ExtensionAttribute]
public static PublicClientApplicationBuilder WithSsoPolicy(PublicClientApplicationBuilder builder);
    private static void AddRuntimeSupport(PublicClientApplicationBuilder builder);
}
internal class Microsoft.Identity.Client.Platforms.Features.RuntimeBroker.RuntimeBroker : object {
    private ILoggerAdapter _logger;
    private IntPtr _parentHandle;
    internal static string ErrorMessageSuffix;
    private BrokerOptions _wamOptions;
    private static Exception s_initException;
    private static Dictionary`2<LogLevel, LogLevel> LogLevelMap;
    private static Lazy`1<Core> s_lazyCore;
    public bool IsPopSupported { get; }
    public RuntimeBroker(CoreUIParent uiParent, ApplicationConfiguration appConfig, ILoggerAdapter logger);
    private static RuntimeBroker();
    public sealed virtual bool get_IsPopSupported();
    private static void OnProcessExit(object sender, EventArgs e);
    private void LogEventRaised(Core sender, LogEventArgs args);
    [AsyncStateMachineAttribute("Microsoft.Identity.Client.Platforms.Features.RuntimeBroker.RuntimeBroker/<AcquireTokenInteractiveAsync>d__12")]
public sealed virtual Task`1<MsalTokenResponse> AcquireTokenInteractiveAsync(AuthenticationRequestParameters authenticationRequestParameters, AcquireTokenInteractiveParameters acquireTokenInteractiveParameters);
    [AsyncStateMachineAttribute("Microsoft.Identity.Client.Platforms.Features.RuntimeBroker.RuntimeBroker/<SignInInteractivelyAsync>d__13")]
private Task`1<MsalTokenResponse> SignInInteractivelyAsync(AuthenticationRequestParameters authenticationRequestParameters);
    [AsyncStateMachineAttribute("Microsoft.Identity.Client.Platforms.Features.RuntimeBroker.RuntimeBroker/<AcquireTokenInteractiveDefaultUserAsync>d__14")]
private Task`1<MsalTokenResponse> AcquireTokenInteractiveDefaultUserAsync(AuthenticationRequestParameters authenticationRequestParameters);
    private static IntPtr GetParentWindow(CoreUIParent uiParent);
    [AsyncStateMachineAttribute("Microsoft.Identity.Client.Platforms.Features.RuntimeBroker.RuntimeBroker/<AcquireTokenSilentAsync>d__16")]
public sealed virtual Task`1<MsalTokenResponse> AcquireTokenSilentAsync(AuthenticationRequestParameters authenticationRequestParameters, AcquireTokenSilentParameters acquireTokenSilentParameters);
    [AsyncStateMachineAttribute("Microsoft.Identity.Client.Platforms.Features.RuntimeBroker.RuntimeBroker/<AcquireTokenSilentDefaultUserAsync>d__17")]
public sealed virtual Task`1<MsalTokenResponse> AcquireTokenSilentDefaultUserAsync(AuthenticationRequestParameters authenticationRequestParameters, AcquireTokenSilentParameters acquireTokenSilentParameters);
    [AsyncStateMachineAttribute("Microsoft.Identity.Client.Platforms.Features.RuntimeBroker.RuntimeBroker/<AcquireTokenByUsernamePasswordAsync>d__18")]
public sealed virtual Task`1<MsalTokenResponse> AcquireTokenByUsernamePasswordAsync(AuthenticationRequestParameters authenticationRequestParameters, AcquireTokenByUsernamePasswordParameters acquireTokenByUsernamePasswordParameters);
    [AsyncStateMachineAttribute("Microsoft.Identity.Client.Platforms.Features.RuntimeBroker.RuntimeBroker/<RemoveAccountAsync>d__19")]
public sealed virtual Task RemoveAccountAsync(ApplicationConfiguration appConfig, IAccount account);
    [AsyncStateMachineAttribute("Microsoft.Identity.Client.Platforms.Features.RuntimeBroker.RuntimeBroker/<GetAccountsAsync>d__20")]
public sealed virtual Task`1<IReadOnlyList`1<IAccount>> GetAccountsAsync(string clientID, string redirectUri, AuthorityInfo authorityInfo, ICacheSessionManager cacheSessionManager, IInstanceDiscoveryManager instanceDiscoveryManager);
    public sealed virtual IReadOnlyDictionary`2<string, string> GetSsoPolicyHeaders();
    public sealed virtual void HandleInstallUrl(string appLink);
    public sealed virtual bool IsBrokerInstalledAndInvokable(AuthorityType authorityType);
}
internal class Microsoft.Identity.Client.Platforms.Features.RuntimeBroker.WamAdapters : object {
    private static string WamErrorPrefix;
    private static string NativeInteropMsalRequestType;
    private static string ConsumersPassthroughRequest;
    private static string MsalIdentityProvider;
    private static string IdentityProviderTypeMSA;
    private static string IdentityProviderTypeAAD;
    private static string WamHeaderTitle;
    private static MsalException CreateExceptionFromWamError(AuthResult authResult, AuthenticationRequestParameters authenticationRequestParameters, ILoggerAdapter logger);
    public static AuthParameters GetCommonAuthParameters(AuthenticationRequestParameters authenticationRequestParameters, BrokerOptions brokerOptions, ILoggerAdapter logger);
    private static MsalException DecorateExceptionWithRuntimeErrorProperties(MsalException exception, AuthResult runtimeAuthResult);
    private static void AddPopParams(AuthenticationRequestParameters authenticationRequestParameters, AuthParameters authParams);
    private static void SetMSALIdentityProvider(AuthenticationRequestParameters authenticationRequestParameters, AuthParameters authParams, ILoggerAdapter logger);
    public static MsalTokenResponse HandleResponse(AuthResult authResult, AuthenticationRequestParameters authenticationRequestParameters, ILoggerAdapter logger, string errorMessage);
    private static bool TokenReceivedFromWam(AuthResult authResult, ILoggerAdapter logger);
    private static MsalTokenResponse ParseRuntimeResponse(AuthResult authResult, AuthenticationRequestParameters authenticationRequestParameters, ILoggerAdapter logger);
    private static string GetExpectedRedirectUri(string clientId);
    public static bool TryConvertToMsalAccount(Account nativeAccount, string clientId, ILoggerAdapter logger, IAccount& msalAccount);
    private static void ToLogMessage(Account wamAccount, ILoggerAdapter logger);
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("2")]
internal class System.Runtime.CompilerServices.RefSafetyRulesAttribute : Attribute {
    public int Version;
    public RefSafetyRulesAttribute(int );
}
