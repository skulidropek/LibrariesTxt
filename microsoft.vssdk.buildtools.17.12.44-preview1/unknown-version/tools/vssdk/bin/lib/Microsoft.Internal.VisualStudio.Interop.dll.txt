[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
[ExcludeFromIDLAttribute]
public enum Microsoft.Internal.VisualStudio.AppId.Interop.__VSAPROPID10 : Enum {
    public int value__;
    public static __VSAPROPID10 VSAPROPID_ProductArch;
    public static __VSAPROPID10 VSAPROPID_GeneralOutputWindowPaneName;
    public static __VSAPROPID10 VSAPROPID_IsInCommandLineMode;
    public static __VSAPROPID10 VSAPROPID_IsInteractive;
    public static __VSAPROPID10 VSAPROPID_InstallDirectory;
    public static __VSAPROPID10 VSAPROPID_FIRST10;
}
public enum Microsoft.Internal.VisualStudio.Appid.Interop.__VSAPROPID4 : Enum {
    public int value__;
    public static __VSAPROPID4 VSAPROPID_AppDataDir;
    public static __VSAPROPID4 VSAPROPID_LocalAppDataDir;
    public static __VSAPROPID4 VSAPROPID_CommonAppDataDir;
    public static __VSAPROPID4 VSAPROPID_ConfigurationTimestampUtc;
    public static __VSAPROPID4 VSAPROPID_CommonExtensionSearchPath;
    public static __VSAPROPID4 VSAPROPID_UserExtensionsRootFolder;
    public static __VSAPROPID4 VSAPROPID_LoadUserExtensions;
    public static __VSAPROPID4 VSAPROPID_LoadedUserExtensions;
    public static __VSAPROPID4 VSAPROPID_AllowLoadingAllPackages;
    public static __VSAPROPID4 VSAPROPID_RunningInSafeMode;
    public static __VSAPROPID4 VSAPROPID_ProductFamily;
    public static __VSAPROPID4 VSAPROPID_SplashScreenTheme;
    public static __VSAPROPID4 VSAPROPID_RequiresElevation;
    public static __VSAPROPID4 VSAPROPID_ApplicationRootFolder;
    public static __VSAPROPID4 VSAPROPID_ApplicationExtensionsFolder;
    public static __VSAPROPID4 VSAPROPID_GenericTheme;
    public static __VSAPROPID4 VSAPROPID_ActivityLogPath;
    public static __VSAPROPID4 VSAPROPID_FIRST4;
}
public enum Microsoft.Internal.VisualStudio.Appid.Interop.__VSAPROPID5 : Enum {
    public int value__;
    public static __VSAPROPID5 VSAPROPID_ReleaseVersion;
    public static __VSAPROPID5 VSAPROPID_EnableSamples;
    public static __VSAPROPID5 VSAPROPID_EnableMicrosoftGalleries;
    public static __VSAPROPID5 VSAPROPID_EnablePrivateGalleries;
    public static __VSAPROPID5 VSAPROPID_AppVectorIcon;
    public static __VSAPROPID5 VSAPROPID_AppBrandName;
    public static __VSAPROPID5 VSAPROPID_AppShortBrandName;
    public static __VSAPROPID5 VSAPROPID_SKUInfo;
    public static __VSAPROPID5 VSAPROPID_GuidDefaultColorTheme;
    public static __VSAPROPID5 VSAPROPID_FIRST5;
}
public enum Microsoft.Internal.VisualStudio.Appid.Interop.__VSAPROPID6 : Enum {
    public int value__;
    public static __VSAPROPID6 VSAPROPID_ActivityLogServiceObject;
    public static __VSAPROPID6 VSAPROPID_AppUpdateIcon;
    public static __VSAPROPID6 VSAPROPID_AppUpdateSmallIcon;
    public static __VSAPROPID6 VSAPROPID_AppUpdate64Icon;
    public static __VSAPROPID6 VSAPROPID_IsSubscriptionAware;
    public static __VSAPROPID6 VSAPROPID_SubscriptionLicenseId;
    public static __VSAPROPID6 VSAPROPID_SubscriptionRightsName;
    public static __VSAPROPID6 VSAPROPID_SupportsConnectedUser;
    public static __VSAPROPID6 VSAPROPID_SettingsRegistryRoots;
    public static __VSAPROPID6 VSAPROPID_EnableOfflineHelpNotification;
    public static __VSAPROPID6 VSAPROPID_DefaultProfile;
    public static __VSAPROPID6 VSAPROPID_ThemeThumbnailProvider;
    public static __VSAPROPID6 VSAPROPID_CommunityEdition;
    public static __VSAPROPID6 VSAPROPID_FIRST6;
}
public enum Microsoft.Internal.VisualStudio.AppId.Interop.__VSAPROPID7 : Enum {
    public int value__;
    public static __VSAPROPID7 VSAPROPID_LicenseURL;
    public static __VSAPROPID7 VSAPROPID_EditionName;
    public static __VSAPROPID7 VSAPROPID_AppQueryLoadServiceObject;
    public static __VSAPROPID7 VSAPROPID_IsVSTelemetryEnabled;
    public static __VSAPROPID7 VSAPROPID_WorkingFodersRootExt;
    public static __VSAPROPID7 VSAPROPID_UnlocalizedReleaseString_Short;
    public static __VSAPROPID7 VSAPROPID_EnableNoToolWinMode;
    public static __VSAPROPID7 VSAPROPID_FIRST7;
}
public enum Microsoft.Internal.VisualStudio.AppId.Interop.__VSAPROPID8 : Enum {
    public int value__;
    public static __VSAPROPID8 VSAPROPID_InIsolationMode;
    public static __VSAPROPID8 VSAPROPID_IsolationInstallationName;
    public static __VSAPROPID8 VSAPROPID_IsolationInstallationId;
    public static __VSAPROPID8 VSAPROPID_IsolationInstallationVersion;
    public static __VSAPROPID8 VSAPROPID_IsolationInstallationWorkloads;
    public static __VSAPROPID8 VSAPROPID_IsolationInstallationPackages;
    public static __VSAPROPID8 VSAPROPID_IsolationInstallationUserDataFilePath;
    public static __VSAPROPID8 VSAPROPID_IsolationInstallationLogsDirectory;
    public static __VSAPROPID8 VSAPROPID_SetupEngineFilePath;
    public static __VSAPROPID8 VSAPROPID_LegacyCompatDirectory;
    public static __VSAPROPID8 VSAPROPID_CommonExtensionExclusionList;
    public static __VSAPROPID8 VSAPROPID_SetupIsValid;
    public static __VSAPROPID8 VSAPROPID_ChannelId;
    public static __VSAPROPID8 VSAPROPID_ChannelManifestId;
    public static __VSAPROPID8 VSAPROPID_InstallationNickname;
    public static __VSAPROPID8 VSAPROPID_ProductDisplayVersion;
    public static __VSAPROPID8 VSAPROPID_ProductSemanticVersion;
    public static __VSAPROPID8 VSAPROPID_ChannelTitle;
    public static __VSAPROPID8 VSAPROPID_ChannelSuffix;
    public static __VSAPROPID8 VSAPROPID_AlphaPacksCount;
    public static __VSAPROPID8 VSAPROPID_CampaignId;
    public static __VSAPROPID8 VSAPROPID_AppHostVersion;
    public static __VSAPROPID8 VSAPROPID_SKUName;
    public static __VSAPROPID8 VSAPROPID_BranchName;
    public static __VSAPROPID8 VSAPROPID_FIRST8;
}
public enum Microsoft.Internal.VisualStudio.AppId.Interop.__VSAPROPID9 : Enum {
    public int value__;
    public static __VSAPROPID9 VSAPROPID_CanShowGetToCodeDialog;
    public static __VSAPROPID9 VSAPROPID_CanShowGetToCodeDialogOnLaunch;
    public static __VSAPROPID9 VSAPROPID_HasValidDpiAwarenessMode;
    public static __VSAPROPID9 VSAPROPID_EnablePerMonitorAwareness;
    public static __VSAPROPID9 VSAPROPID_CanEnablePerMonitorAwareness;
    public static __VSAPROPID9 VSAPROPID_GuidFallbackColorTheme;
    public static __VSAPROPID9 VSAPROPID_SupportCloudEnvironment;
    public static __VSAPROPID9 VSAPROPID_RootSuffix;
    public static __VSAPROPID9 VSAPROPID_FIRST9;
}
public enum Microsoft.Internal.VisualStudio.AppId.Interop.__VSASKUEdition3 : Enum {
    public int value__;
    public static __VSASKUEdition3 VSASKUEdition_Community;
}
public enum Microsoft.Internal.VisualStudio.AppId.Interop.__VSASKUEdition4 : Enum {
    public int value__;
    public static __VSASKUEdition4 VSASKUEdition_TeamExplorer;
    public static __VSASKUEdition4 VSASKUEdition_SQL;
}
public enum Microsoft.Internal.VisualStudio.Appid.Interop.__VSASubSKUEdition4 : Enum {
    public int value__;
    public static __VSASubSKUEdition4 VSASubSKUEdition_VSLS;
    public static __VSASubSKUEdition4 VSASubSKUEdition_Phone;
}
public enum Microsoft.Internal.VisualStudio.Appid.Interop.__VSASubSKUEdition5 : Enum {
    public int value__;
    public static __VSASubSKUEdition5 VSASubSKUEdition_SQLTools;
    public static __VSASubSKUEdition5 VSASubSKUEdition_VSWin;
    public static __VSASubSKUEdition5 VSASubSKUEdition_VSWinDesktop;
}
public enum Microsoft.Internal.VisualStudio.AppId.Interop.__VSASubSKUEdition6 : Enum {
    public int value__;
    public static __VSASubSKUEdition6 VSASubSKUEdition_Blend;
}
public enum Microsoft.Internal.VisualStudio.AppId.Interop.__VSASubSKUEdition7 : Enum {
    public int value__;
    public static __VSASubSKUEdition7 VSASubSKUEdition_Ssms;
}
[GuidAttribute("BD0A261A-857A-4AAD-BBDE-9C021ACF4C38")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.Internal.VisualStudio.Appid.Interop.IVsAppIdSplashScreen {
    public abstract virtual int DisplaySplash();
    public abstract virtual int DestroySplash();
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("C27FC917-EAE2-4725-865C-837694A18EDC")]
public interface Microsoft.Internal.VisualStudio.Appid.Interop.IVsAppQueryLoad2 {
    public abstract virtual int ResetSkipLoading(Guid& guidPackage);
    public abstract virtual int IsPreApprovedPackage(Guid& guidPackage);
    public abstract virtual int QueryLoadComponentAssemblies(UInt32 cAssemblies, String[] prgAssemblyPaths, Boolean[] rgCanLoad);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("98EDB878-D323-4AFE-A3B0-473B37B123C0")]
public interface Microsoft.Internal.VisualStudio.AppId.Interop.IVsAppQueryUnload {
    public abstract virtual int QueryDeferredUnloadPackage(Guid& guidPackage);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("206AD954-D230-4BF7-8931-E6BDD9B102EA")]
public interface Microsoft.Internal.VisualStudio.Appid.Interop.IVsBrandingData {
    public abstract virtual void GetBrandingData(IntPtr& data);
}
public class Microsoft.Internal.VisualStudio.Appid.Interop.ThemeBitmap : ValueType {
    public UInt32 idResource;
    public IntPtr hBitmap;
}
public class Microsoft.Internal.VisualStudio.Appid.Interop.ThemeString : ValueType {
    public UInt32 idResource;
    public IntPtr pszValue;
}
public class Microsoft.Internal.VisualStudio.Appid.Interop.VSABOUTBOXTHEME2 : ValueType {
    public UInt32 lStructSize;
    public UInt32 clrLicenceTextColor;
    public ThemeBitmap tbBackground;
}
public class Microsoft.Internal.VisualStudio.AppId.Interop.VSABOUTBOXTHEME3 : ValueType {
    [ComAliasNameAttribute("OLE.DWORD")]
public UInt32 lStructSize;
}
public class Microsoft.Internal.VisualStudio.Appid.Interop.VSFILEASSOCIATIONTHEME : ValueType {
}
public class Microsoft.Internal.VisualStudio.Appid.Interop.VSGENERICTHEME : ValueType {
    public ThemeBitmap tbBanner;
}
public class Microsoft.Internal.VisualStudio.Appid.Interop.VSSPLASHSCREENTHEME : ValueType {
    public ThemeBitmap tbBackground;
    public UInt32 crLicenseText;
    [ComAliasNameAttribute("OLE.RECT")]
public RECT rcLicenseText;
    public UInt32 crLegalText;
    [ComAliasNameAttribute("OLE.RECT")]
public RECT rcLegalText;
    public UInt32 crVSIPText;
    [ComAliasNameAttribute("OLE.POINT")]
public POINT ptVSIPText;
    public UInt32 crReleaseText;
    [ComAliasNameAttribute("OLE.POINT")]
public POINT ptReleaseText;
}
public class Microsoft.Internal.VisualStudio.Appid.Interop.VSSPLASHSCREENTHEME2 : ValueType {
}
public class Microsoft.Internal.VisualStudio.Appid.Interop.VSSPLASHSCREENTHEME3 : ValueType {
}
public class Microsoft.Internal.VisualStudio.AppId.Interop.VSSPLASHSCREENTHEME4 : ValueType {
}
public class Microsoft.Internal.VisualStudio.AppId.Interop.VSSPLASHSCREENTHEME5 : ValueType {
    public ThemeBitmap tbBackground;
    public UInt32 crLicenseText;
    [ComAliasNameAttribute("OLE.RECT")]
public RECT rcLicenseText;
    public UInt32 crLegalText;
    [ComAliasNameAttribute("OLE.RECT")]
public RECT rcLegalText;
    public UInt32 crVSIPText;
    [ComAliasNameAttribute("OLE.POINT")]
public POINT ptVSIPText;
    public UInt32 crReleaseText;
    [ComAliasNameAttribute("OLE.POINT")]
public POINT ptReleaseText;
    public ThemeString tsSKUInfoText;
    public UInt32 crSKUInfoText;
    [ComAliasNameAttribute("OLE.RECT")]
public RECT rcSKUInfoText;
    public ThemeBitmap tbBackgroundLarge;
    public ThemeString tsBackgroundMoniker;
    public ThemeBitmap tbBackgroundMedium;
}
public class Microsoft.Internal.VisualStudio.Appid.Interop.VSSTARTPAGETHEME2 : ValueType {
    public ThemeString tsLogo;
    public ThemeString tsLinks;
    public ThemeString tsUri;
}
[FlagsAttribute]
public enum Microsoft.Internal.VisualStudio.Shell.Interop.__ADDITIONALEXTENDEDVSCOMMANDFLAGS : Enum {
    public int value__;
    public static __ADDITIONALEXTENDEDVSCOMMANDFLAGS cCommandFlagSelectionPatternAvailable;
    public static __ADDITIONALEXTENDEDVSCOMMANDFLAGS cCommandFlagDynamicAutomationName;
    public static __ADDITIONALEXTENDEDVSCOMMANDFLAGS ValidExtendedFlags;
}
[FlagsAttribute]
public enum Microsoft.Internal.VisualStudio.Shell.Interop.__ADDITIONALEXTENDEDVSCOMMANDFLAGS2 : Enum {
    public int value__;
    public static __ADDITIONALEXTENDEDVSCOMMANDFLAGS2 cCommandFlagAsyncFromUIInvocation;
    public static __ADDITIONALEXTENDEDVSCOMMANDFLAGS2 ValidExtendedFlags2;
}
[FlagsAttribute]
public enum Microsoft.Internal.VisualStudio.Shell.Interop.__ADDITIONALVSCOMMANDFLAGS : Enum {
    public int value__;
    public static __ADDITIONALVSCOMMANDFLAGS cCommandFlagTogglePatternAvailable;
    public static __ADDITIONALVSCOMMANDFLAGS ValidFlags3;
}
public enum Microsoft.Internal.VisualStudio.Shell.Interop.__DOCUMENTDOCKPREF : Enum {
    public int value__;
    public static __DOCUMENTDOCKPREF DOCUMENTDOCKPREF_DockAtBeginning;
    public static __DOCUMENTDOCKPREF DOCUMENTDOCKPREF_DockAtEnd;
}
[FlagsAttribute]
public enum Microsoft.Internal.VisualStudio.Shell.Interop.__DPFLAG : Enum {
    public int value__;
    public static __DPFLAG DPFLAG_HIERARCHY;
    public static __DPFLAG DPFLAG_SELCONTAINER;
    public static __DPFLAG DPFLAG_ITEMID;
}
[FlagsAttribute]
public enum Microsoft.Internal.VisualStudio.Shell.Interop.__FINDFRAMEFLAGS : Enum {
    public int value__;
    public static __FINDFRAMEFLAGS FINDFRAMEFLAGS_Default;
    public static __FINDFRAMEFLAGS FINDFRAMEFLAGS_AnyInstance;
}
public enum Microsoft.Internal.VisualStudio.Shell.Interop.__GlobalSearchActivationType : Enum {
    public int value__;
    public static __GlobalSearchActivationType ShellCommand;
    public static __GlobalSearchActivationType FunctionCall;
}
public enum Microsoft.Internal.VisualStudio.Shell.Interop.__PixelFormatPrivate : Enum {
    public int value__;
    public static __PixelFormatPrivate PixelFormatPrivate4bppIndexed;
    public static __PixelFormatPrivate PixelFormatPrivate8bppIndexed;
    public static __PixelFormatPrivate PixelFormatPrivate24bppRGB;
    public static __PixelFormatPrivate PixelFormatPrivate32bppARGB;
}
public enum Microsoft.Internal.VisualStudio.Shell.Interop.__RETARGET_UNLOAD_REASON : Enum {
    public int value__;
    public static __RETARGET_UNLOAD_REASON RUR_CANCELED;
    public static __RETARGET_UNLOAD_REASON RUR_RETARGET_ERROR;
    public static __RETARGET_UNLOAD_REASON RUR_GET_FILES_TOCHECKOUT_ERROR;
}
[FlagsAttribute]
public enum Microsoft.Internal.VisualStudio.Shell.Interop.__SearchCandidateProcessingFlags : Enum {
    public int value__;
    public static __SearchCandidateProcessingFlags ConsiderOnlyEnabledCommands;
    public static __SearchCandidateProcessingFlags ConsiderOnlyVisibleCommands;
    public static __SearchCandidateProcessingFlags ConsiderDynamicText;
    public static __SearchCandidateProcessingFlags ConsiderCommandWellOnlyCommands;
    public static __SearchCandidateProcessingFlags ExpandDynamicItemStartCommands;
}
public enum Microsoft.Internal.VisualStudio.Shell.Interop.__SearchResultDataRequirements : Enum {
    public int value__;
    public static __SearchResultDataRequirements NeedKeybindingText;
    public static __SearchResultDataRequirements NeedFullParentPlacementChain;
    public static __SearchResultDataRequirements NeedRootPlacementOnly;
}
public enum Microsoft.Internal.VisualStudio.Shell.Interop.__SELCTXTYPE : Enum {
    public int value__;
    public static __SELCTXTYPE SELCTXTYPE_EMPTY;
    public static __SELCTXTYPE SELCTXTYPE_FRAME;
}
public enum Microsoft.Internal.VisualStudio.Shell.Interop.__SolutionWorkingFolder : Enum {
    public int value__;
    public static __SolutionWorkingFolder SlnWF_All;
    public static __SolutionWorkingFolder SlnWF_StatePersistence;
}
public enum Microsoft.Internal.VisualStudio.Shell.Interop.__STATUSBAR_VISIBILITY : Enum {
    public int value__;
    public static __STATUSBAR_VISIBILITY STATUSBAR_USER_PREFERENCE;
    public static __STATUSBAR_VISIBILITY STATUSBAR_HIDDEN;
    public static __STATUSBAR_VISIBILITY STATUSBAR_VISIBLE;
}
public enum Microsoft.Internal.VisualStudio.Shell.Interop.__TextRecordsToSearch : Enum {
    public int value__;
    public static __TextRecordsToSearch ButtonText;
    public static __TextRecordsToSearch CommandWell;
    public static __TextRecordsToSearch CustomizationRecord;
    public static __TextRecordsToSearch FullPlacementPathText;
}
public enum Microsoft.Internal.VisualStudio.Shell.Interop.__TOOLBARDOCKLOCATIONS : Enum {
    public int value__;
    public static __TOOLBARDOCKLOCATIONS ToolBarDockInvalid;
    public static __TOOLBARDOCKLOCATIONS ToolBarDockTop;
    public static __TOOLBARDOCKLOCATIONS ToolBarDockRight;
    public static __TOOLBARDOCKLOCATIONS ToolBarDockBottom;
    public static __TOOLBARDOCKLOCATIONS ToolBarDockLeft;
    public static __TOOLBARDOCKLOCATIONS ToolBarDockFloating;
}
public enum Microsoft.Internal.VisualStudio.Shell.Interop.__VISIBILITY : Enum {
    public int value__;
    public static __VISIBILITY cCommandNotVisible;
    public static __VISIBILITY cCommandVisible;
    public static __VISIBILITY cCommandNotInTable;
}
[FlagsAttribute]
public enum Microsoft.Internal.VisualStudio.Shell.Interop.__VSCOMMANDFLAGS : Enum {
    public int value__;
    public static __VSCOMMANDFLAGS cCommandFlagNone;
    public static __VSCOMMANDFLAGS cCommandFlagNoKeyCustomize;
    public static __VSCOMMANDFLAGS cCommandFlagNoButtonCustomize;
    public static __VSCOMMANDFLAGS cCommandFlagNoCustomize;
    public static __VSCOMMANDFLAGS cCommandFlagTextContextUseBtn;
    public static __VSCOMMANDFLAGS cCommandFlagTextChanges;
    public static __VSCOMMANDFLAGS cCommandFlagDefaultDisabled;
    public static __VSCOMMANDFLAGS cCommandFlagDefaultInvisible;
    public static __VSCOMMANDFLAGS cCommandFlagDynamicVisibility;
    public static __VSCOMMANDFLAGS cCommandFlagComboCommitsOnDrop;
    public static __VSCOMMANDFLAGS cCommandFlagDynamicItemStart;
    public static __VSCOMMANDFLAGS cCommandFlagCommandWellOnly;
    public static __VSCOMMANDFLAGS cCommandFlagPict;
    public static __VSCOMMANDFLAGS cCommandFlagText;
    public static __VSCOMMANDFLAGS cCommandFlagPictAndText;
    public static __VSCOMMANDFLAGS cCommandFlagAllowParams;
    public static __VSCOMMANDFLAGS cCommandFlagFilterKeys;
    public static __VSCOMMANDFLAGS cCommandFlagPostExec;
    public static __VSCOMMANDFLAGS cCommandFlagDontCache;
    public static __VSCOMMANDFLAGS cCommandFlagFixMenuController;
    public static __VSCOMMANDFLAGS cCommandFlagNoShowOnMenuController;
    public static __VSCOMMANDFLAGS cCommandFlagRouteToDocuments;
    public static __VSCOMMANDFLAGS cCommandFlagNoAutoComplete;
    public static __VSCOMMANDFLAGS cCommandFlagTextMenuUseBtn;
    public static __VSCOMMANDFLAGS cCommandFlagTextMenuCtrlUseMnu;
    public static __VSCOMMANDFLAGS cCommandFlagTextCascadeUseBtn;
    public static __VSCOMMANDFLAGS cCommandFlagCaseSensitive;
    public static __VSCOMMANDFLAGS cCommandMenuDefaultDocked;
    public static __VSCOMMANDFLAGS cCommandMenuNoToolbarClose;
    public static __VSCOMMANDFLAGS cCommandMenuNotInTbList;
    public static __VSCOMMANDFLAGS cCommandMenuAlwaysCreate;
    public static __VSCOMMANDFLAGS cCommandFlagProfferedCmd;
    public static __VSCOMMANDFLAGS cCommandFlagTextIsAnchor;
    public static __VSCOMMANDFLAGS cCommandFlagStretchHorizontally;
    public static __VSCOMMANDFLAGS ValidFlags;
}
[FlagsAttribute]
public enum Microsoft.Internal.VisualStudio.Shell.Interop.__VSCOMMANDFLAGS2 : Enum {
    public int value__;
    public static __VSCOMMANDFLAGS2 cCommandFlagAllowVisibilityChangeOnToolBar;
    public static __VSCOMMANDFLAGS2 cCommandFlagIconIsMoniker;
    public static __VSCOMMANDFLAGS2 ValidFlags2;
}
[FlagsAttribute]
public enum Microsoft.Internal.VisualStudio.Shell.Interop.__VSCOMMANDFLAGS3 : Enum {
    public int value__;
    public static __VSCOMMANDFLAGS3 cCommandFlagAllowClientRole_dw;
}
public enum Microsoft.Internal.VisualStudio.Shell.Interop.__VSCOMMANDTYPES : Enum {
    public int value__;
    public static __VSCOMMANDTYPES cCommandTypeSeparator;
    public static __VSCOMMANDTYPES cCommandTypeButton;
    public static __VSCOMMANDTYPES cCommandTypeMenuButton;
    public static __VSCOMMANDTYPES cCommandTypeSwatch;
    public static __VSCOMMANDTYPES cCommandTypeSplitDropDown;
    public static __VSCOMMANDTYPES cCommandTypeDropDownCombo;
    public static __VSCOMMANDTYPES cCommandTypeMRUCombo;
    public static __VSCOMMANDTYPES cCommandTypeDynamicCombo;
    public static __VSCOMMANDTYPES cCommandTypeOwnerDropDownCombo;
    public static __VSCOMMANDTYPES cCommandTypeIndexCombo;
    public static __VSCOMMANDTYPES cCommandTypeComboMask;
    public static __VSCOMMANDTYPES cCommandTypeControlMask;
    public static __VSCOMMANDTYPES cCommandTypeMenu;
    public static __VSCOMMANDTYPES cCommandTypeMenuController;
    public static __VSCOMMANDTYPES cCommandTypeMenuToolbar;
    public static __VSCOMMANDTYPES cCommandTypeMenuContext;
    public static __VSCOMMANDTYPES cCommandTypeMenuToolWindowToolbar;
    public static __VSCOMMANDTYPES cCommandTypeMenuControllerLatched;
    public static __VSCOMMANDTYPES cCommandTypeMenuMask;
    public static __VSCOMMANDTYPES cCommandTypeShared;
    public static __VSCOMMANDTYPES cCommandTypeAppId;
    public static __VSCOMMANDTYPES cCommandTypeSharedMask;
    public static __VSCOMMANDTYPES cCommandTypeInvalid;
}
[FlagsAttribute]
public enum Microsoft.Internal.VisualStudio.Shell.Interop.__VsCoreTelemetryFlags : Enum {
    public int value__;
    public static __VsCoreTelemetryFlags VsCoreTelemetryFlagNone;
    public static __VsCoreTelemetryFlags VsCoreTelemetryFlagInstalledWithProduct;
}
public enum Microsoft.Internal.VisualStudio.Shell.Interop.__VSCREATEDOCWIN2 : Enum {
    public int value__;
    public static __VSCREATEDOCWIN2 CDW_REPLACE_WAIT_WINDOW;
}
public enum Microsoft.Internal.VisualStudio.Shell.Interop.__VsEventListenerPriority : Enum {
    public int value__;
    public static __VsEventListenerPriority VSELP_High;
    public static __VsEventListenerPriority VSELP_Normal;
    public static __VsEventListenerPriority VSELP_Low;
}
public enum Microsoft.Internal.VisualStudio.Shell.Interop.__VSFPROPID8 : Enum {
    public int value__;
    public static __VSFPROPID8 VSFPROPID_IsWaitFrame;
    public static __VSFPROPID8 VSFPROPID8_FIRST;
}
public enum Microsoft.Internal.VisualStudio.Shell.Interop.__VsGlobalDplOption : Enum {
    public int value__;
    public static __VsGlobalDplOption VSGLOBALDPL_AUTOMATIC;
    public static __VsGlobalDplOption VSGLOBALDPL_ENABLE;
    public static __VsGlobalDplOption VSGLOBALDPL_DISABLE;
}
public enum Microsoft.Internal.VisualStudio.Shell.Interop.__vsHelpF1Result2 : Enum {
    public int value__;
    public static __vsHelpF1Result2 HF1R_ProxyUserAbort;
}
public enum Microsoft.Internal.VisualStudio.Shell.Interop.__VsHelpGetPropertyState : Enum {
    public int value__;
    public static __VsHelpGetPropertyState VsHelpGetPropertyState_NoError;
    public static __VsHelpGetPropertyState VsHelpGetPropertyState_UserAbort;
    public static __VsHelpGetPropertyState VsHelpGetPropertyState_Failed;
}
public enum Microsoft.Internal.VisualStudio.Shell.Interop.__vsHelpGuidNavigationResult2 : Enum {
    public int value__;
    public static __vsHelpGuidNavigationResult2 HGNR_ProxyUserAbort;
}
public enum Microsoft.Internal.VisualStudio.Shell.Interop.__VsHelpLanguageDownloadState : Enum {
    public int value__;
    public static __VsHelpLanguageDownloadState VsHelpLanguageDownloadState_NoError;
    public static __VsHelpLanguageDownloadState VsHelpLanguageDownloadState_UserAbort;
    public static __VsHelpLanguageDownloadState VsHelpLanguageDownloadState_Failed;
}
public enum Microsoft.Internal.VisualStudio.Shell.Interop.__VSIDOFLAGSINTERNAL : Enum {
    public UInt32 value__;
    public static __VSIDOFLAGSINTERNAL IDO_IncludeDeferredFrames;
}
public enum Microsoft.Internal.VisualStudio.Shell.Interop.__VSRDTATTRIB4 : Enum {
    public int value__;
    public static __VSRDTATTRIB4 RDTA_InitializationFailed;
}
[FlagsAttribute]
public enum Microsoft.Internal.VisualStudio.Shell.Interop.__VSRDTSAVEOPTIONS_INTERNAL : Enum {
    public UInt32 value__;
    public static __VSRDTSAVEOPTIONS_INTERNAL RDTSAVEOPT_Internal;
    public static __VSRDTSAVEOPTIONS_INTERNAL RDTSAVEOPT_ClosingMask;
    public static __VSRDTSAVEOPTIONS_INTERNAL RDTSAVEOPT_ClosingProject;
    public static __VSRDTSAVEOPTIONS_INTERNAL RDTSAVEOPT_ClosingSolution;
    public static __VSRDTSAVEOPTIONS_INTERNAL RDTSAVEOPT_ClosingApplication;
    public static __VSRDTSAVEOPTIONS_INTERNAL RDTSAVEOPT_WaitForAllSaves;
    public static __VSRDTSAVEOPTIONS_INTERNAL RDTSAVEOPT_AutoSave;
    public static __VSRDTSAVEOPTIONS_INTERNAL RDTSAVEOPT_NoSave;
    public static __VSRDTSAVEOPTIONS_INTERNAL RDTSAVEOPT_Save;
    public static __VSRDTSAVEOPTIONS_INTERNAL RDTSAVEOPT_SaveAs;
    public static __VSRDTSAVEOPTIONS_INTERNAL RDTSAVEOPT_SkipVirtualDocs;
    public static __VSRDTSAVEOPTIONS_INTERNAL RDTSAVEOPT_SkipBuildFromMemory;
}
[ObsoleteAttribute("This API is will be removed in a future Visual Studio version.")]
public enum Microsoft.Internal.VisualStudio.Shell.Interop.__VsRemoteControlBehaviorOnStale : Enum {
    public int value__;
    public static __VsRemoteControlBehaviorOnStale ReturnsStale;
    public static __VsRemoteControlBehaviorOnStale ReturnsNull;
}
public enum Microsoft.Internal.VisualStudio.Shell.Interop.__VsRemoteSettingsBehaviorOnStale : Enum {
    public int value__;
    public static __VsRemoteSettingsBehaviorOnStale ReturnStale;
    public static __VsRemoteSettingsBehaviorOnStale ReturnNull;
}
public enum Microsoft.Internal.VisualStudio.Shell.Interop.__VSSAVELAYOUTOPTS : Enum {
    public int value__;
    public static __VSSAVELAYOUTOPTS SAVELAYOUT_DEFAULT;
    public static __VSSAVELAYOUTOPTS SAVELAYOUT_EXCLUDEOPTIONAL;
    public static __VSSAVELAYOUTOPTS SAVELAYOUT_EXCLUDELOCALIZABLE;
}
[FlagsAttribute]
public enum Microsoft.Internal.VisualStudio.Shell.Interop.__VSSetSelectionContextFlags : Enum {
    public int value__;
    public static __VSSetSelectionContextFlags SSCF_Hierarchy;
    public static __VSSetSelectionContextFlags SSCF_SelectionContainer;
}
public enum Microsoft.Internal.VisualStudio.Shell.Interop.__VsSharedMSBuildFileUserOptions : Enum {
    public int value__;
    public static __VsSharedMSBuildFileUserOptions SFUSEROPT_None;
    public static __VsSharedMSBuildFileUserOptions SFUSEROPT_ProjectAffinity;
    public static __VsSharedMSBuildFileUserOptions SFUSEROPT_InMemoryReload;
    public static __VsSharedMSBuildFileUserOptions SFUSEROPT_EnableSccSupport;
    public static __VsSharedMSBuildFileUserOptions SFUSEROPT_SharedMSBuildFileOwnerProject;
}
public enum Microsoft.Internal.VisualStudio.Shell.Interop.__VsShutdownReasons : Enum {
    public int value__;
    public static __VsShutdownReasons VsShutdownReasonNormalUserInitiated;
    public static __VsShutdownReasons VsShutdownReasonCrash;
    public static __VsShutdownReasons VsShutdownReasonHang;
    public static __VsShutdownReasons VsShutdownReasonUnknown;
    public static __VsShutdownReasons VsShutdownReasonNormalNonUserInitiated;
    public static __VsShutdownReasons VsShutdownReasonAppRestart;
    public static __VsShutdownReasons VsShutdownReasonAutomation;
    public static __VsShutdownReasons VsShutdownReasonOSRequest;
    public static __VsShutdownReasons VsShutdownReasonLicenseValidationFailed;
}
public enum Microsoft.Internal.VisualStudio.Shell.Interop.__VsShutdownReasons2 : Enum {
    public int value__;
    public static __VsShutdownReasons2 VsShutdownReasonDefaultIdentityConfigurationBlocked;
}
public enum Microsoft.Internal.VisualStudio.Shell.Interop.__VSSOLUTIONUICONTENTCAPTUREPROPID : Enum {
    public int value__;
    public static __VSSOLUTIONUICONTENTCAPTUREPROPID VSSOLUTIONUICONTENTCAPTUREPROPID_ContentPresenter;
    public static __VSSOLUTIONUICONTENTCAPTUREPROPID VSSOLUTIONUICONTENTCAPTUREPROPID_ToolBar;
    public static __VSSOLUTIONUICONTENTCAPTUREPROPID VSSOLUTIONUICONTENTCAPTUREPROPID_CommandRouting;
    public static __VSSOLUTIONUICONTENTCAPTUREPROPID VSSOLUTIONUICONTENTCAPTUREPROPID_SearchHandler;
    public static __VSSOLUTIONUICONTENTCAPTUREPROPID VSSOLUTIONUICONTENTCAPTUREPROPID_SearchQuery;
    public static __VSSOLUTIONUICONTENTCAPTUREPROPID VSSOLUTIONUICONTENTCAPTUREPROPID_ExplorerCaption;
}
public enum Microsoft.Internal.VisualStudio.Shell.Interop.__VSSOLUTIONUIHPROPID : Enum {
    public int value__;
    public static __VSSOLUTIONUIHPROPID VSSOLUTIONUIHPROPID_SolutionConcept;
    public static __VSSOLUTIONUIHPROPID VSSOLUTIONUIHPROPID_TrackSelection;
    public static __VSSOLUTIONUIHPROPID VSSOLUTIONUIHPROPID_Caption;
}
public enum Microsoft.Internal.VisualStudio.Shell.Interop.__VSSOLUTIONUIHPROPID2 : Enum {
    public int value__;
    public static __VSSOLUTIONUIHPROPID2 VSSOLUTIONUIHPROPID_ContentCapture;
}
public enum Microsoft.Internal.VisualStudio.Shell.Interop.__VsStartPageDownloadState : Enum {
    public int value__;
    public static __VsStartPageDownloadState VsStartPageDownloadState_Initializing;
    public static __VsStartPageDownloadState VsStartPageDownloadState_Downloading;
    public static __VsStartPageDownloadState VsStartPageDownloadState_Success;
    public static __VsStartPageDownloadState VsStartPageDownloadState_Failed;
    public static __VsStartPageDownloadState VsStartPageDownloadState_ProxyAuthenticationRequired;
}
public enum Microsoft.Internal.VisualStudio.Shell.Interop.__VsStartupOption : Enum {
    public int value__;
    public static __VsStartupOption VsStartupOption_Min;
    public static __VsStartupOption VsStartupOption_EmptyEnvironment;
    public static __VsStartupOption VsStartupOption_LoadMostRecentSolution;
    public static __VsStartupOption VsStartupOption_StartPage;
    public static __VsStartupOption VsStartupOption_QuickStartWindow;
    public static __VsStartupOption VsStartupOption_Max;
}
public enum Microsoft.Internal.VisualStudio.Shell.Interop.__VSTEMPLATEPROPID : Enum {
    public int value__;
    public static __VSTEMPLATEPROPID VSTEMPLATEPROPID_None;
    public static __VSTEMPLATEPROPID VSTEMPLATEPROPID_Name;
    public static __VSTEMPLATEPROPID VSTEMPLATEPROPID_Description;
    public static __VSTEMPLATEPROPID VSTEMPLATEPROPID_FullPath;
    public static __VSTEMPLATEPROPID VSTEMPLATEPROPID_Icon;
    public static __VSTEMPLATEPROPID VSTEMPLATEPROPID_UnlocName;
    public static __VSTEMPLATEPROPID VSTEMPLATEPROPID_BaseName;
    public static __VSTEMPLATEPROPID VSTEMPLATEPROPID_MRUPrefix;
    public static __VSTEMPLATEPROPID VSTEMPLATEPROPID_Category;
    public static __VSTEMPLATEPROPID VSTEMPLATEPROPID_CustomData;
    public static __VSTEMPLATEPROPID VSTEMPLATEPROPID_CustomDataSignature;
    public static __VSTEMPLATEPROPID VSTEMPLATEPROPID_Priority;
    public static __VSTEMPLATEPROPID VSTEMPLATEPROPID_TemplateID;
    public static __VSTEMPLATEPROPID VSTEMPLATEPROPID_TemplateLCID;
    public static __VSTEMPLATEPROPID VSTEMPLATEPROPID_TemplateFramework;
    public static __VSTEMPLATEPROPID VSTEMPLATEPROPID_IsHidden;
    public static __VSTEMPLATEPROPID VSTEMPLATEPROPID_AddNewOnlineTemplate;
    public static __VSTEMPLATEPROPID VSTEMPLATEPROPID_NonLocalTemplate;
    public static __VSTEMPLATEPROPID VSTEMPLATEPROPID_BlankSolution;
    public static __VSTEMPLATEPROPID VSTEMPLATEPROPID_DisableBrowseButton;
    public static __VSTEMPLATEPROPID VSTEMPLATEPROPID_DontAddDefExtension;
    public static __VSTEMPLATEPROPID VSTEMPLATEPROPID_RequiresNewFolder;
    public static __VSTEMPLATEPROPID VSTEMPLATEPROPID_DisableLocationField;
    public static __VSTEMPLATEPROPID VSTEMPLATEPROPID_SolutionTemplate;
    public static __VSTEMPLATEPROPID VSTEMPLATEPROPID_DeferredSaveProject;
    public static __VSTEMPLATEPROPID VSTEMPLATEPROPID_DontInitNameField;
    public static __VSTEMPLATEPROPID VSTEMPLATEPROPID_DisableNameField;
    public static __VSTEMPLATEPROPID VSTEMPLATEPROPID_DontShowNameLocInfo;
    public static __VSTEMPLATEPROPID VSTEMPLATEPROPID_EnableMasterPage;
    public static __VSTEMPLATEPROPID VSTEMPLATEPROPID_EnableCodeSeparation;
    public static __VSTEMPLATEPROPID VSTEMPLATEPROPID_EnableLangDropdown;
    public static __VSTEMPLATEPROPID VSTEMPLATEPROPID_IsTrusted;
    public static __VSTEMPLATEPROPID VSTEMPLATEPROPID_IsUserTemplate;
    public static __VSTEMPLATEPROPID VSTEMPLATEPROPID_TemplateType;
    public static __VSTEMPLATEPROPID VSTEMPLATEPROPID_ThumbnailImage;
    public static __VSTEMPLATEPROPID VSTEMPLATEPROPID_PreviewImage;
    public static __VSTEMPLATEPROPID VSTEMPLATEPROPID_UnlocCategoryName;
    public static __VSTEMPLATEPROPID VSTEMPLATEPROPID_SmallIcon;
    public static __VSTEMPLATEPROPID VSTEMPLATEPROPID_LAST;
}
public enum Microsoft.Internal.VisualStudio.Shell.Interop.__VSTEMPLATEPROPID2 : Enum {
    public int value__;
    public static __VSTEMPLATEPROPID2 VSTEMPLATEPROPID_IsBreadcrumbTemplate;
    public static __VSTEMPLATEPROPID2 VSTEMPLATEPROPID_InstallationMoniker;
}
public enum Microsoft.Internal.VisualStudio.Shell.Interop.__VSTEMPLATEPROPID3 : Enum {
    public int value__;
    public static __VSTEMPLATEPROPID3 VSTEMPLATEPROPID_MaxTemplateFramework;
    public static __VSTEMPLATEPROPID3 VSTEMPLATEPROPID_LAST3;
}
public enum Microsoft.Internal.VisualStudio.Shell.Interop.__VSWMPROPID : Enum {
    public int value__;
    public static __VSWMPROPID VSWMPROPID_LAST;
    public static __VSWMPROPID VSWMPROPID_HideOnlyActiveFrame;
    public static __VSWMPROPID VSWMPROPID_AutoHideOnlyActiveFrame;
    public static __VSWMPROPID VSWMPROPID_DocumentDockPreference;
    public static __VSWMPROPID VSWMPROPID_FIRST;
}
public enum Microsoft.Internal.VisualStudio.Shell.Interop.__VsXRayEventId : Enum {
    public int value__;
    public static __VsXRayEventId VsXRay_SE_OnAfterOpenProject;
    public static __VsXRayEventId VsXRay_SE_OnQueryCloseProject;
    public static __VsXRayEventId VsXRay_SE_OnBeforeCloseProject;
    public static __VsXRayEventId VsXRay_SE_OnAfterLoadProject;
    public static __VsXRayEventId VsXRay_SE_OnQueryUnloadProject;
    public static __VsXRayEventId VsXRay_SE_OnBeforeUnloadProject;
    public static __VsXRayEventId VsXRay_SE_OnAfterOpenSolution;
    public static __VsXRayEventId VsXRay_SE_OnQueryCloseSolution;
    public static __VsXRayEventId VsXRay_SE_OnBeforeCloseSolution;
    public static __VsXRayEventId VsXRay_SE_OnAfterCloseSolution;
    public static __VsXRayEventId VsXRay_SE2_OnAfterMergeSolution;
    public static __VsXRayEventId VsXRay_SE3_OnBeforeOpeningChildren;
    public static __VsXRayEventId VsXRay_SE3_OnAfterOpeningChildren;
    public static __VsXRayEventId VsXRay_SE3_OnBeforeClosingChildren;
    public static __VsXRayEventId VsXRay_SE3_OnAfterClosingChildren;
    public static __VsXRayEventId VsXRay_SE4_OnAfterRenameProject;
    public static __VsXRayEventId VsXRay_SE4_OnQueryChangeProjectParent;
    public static __VsXRayEventId VsXRay_SE4_OnAfterChangeProjectParent;
    public static __VsXRayEventId VsXRay_SE4_OnAfterAsynchOpenProject;
    public static __VsXRayEventId VsXRay_SE5_OnBeforeOpenProject;
    public static __VsXRayEventId VsXRay_SLE_OnBeforeOpenSolution;
    public static __VsXRayEventId VsXRay_SLE_OnBeforeBackgroundSolutionLoadBegins;
    public static __VsXRayEventId VsXRay_SLE_OnQueryBackgroundLoadProjectBatch;
    public static __VsXRayEventId VsXRay_SLE_OnBeforeLoadProjectBatch;
    public static __VsXRayEventId VsXRay_SLE_OnAfterLoadProjectBatch;
    public static __VsXRayEventId VsXRay_SLE_OnAfterBackgroundSolutionLoadComplete;
    public static __VsXRayEventId VsXRay_PSE_PrioritizedOnAfterOpenProject;
    public static __VsXRayEventId VsXRay_PSE_PrioritizedOnBeforeCloseProject;
    public static __VsXRayEventId VsXRay_PSE_PrioritizedOnAfterLoadProject;
    public static __VsXRayEventId VsXRay_PSE_PrioritizedOnBeforeUnloadProject;
    public static __VsXRayEventId VsXRay_PSE_PrioritizedOnAfterOpenSolution;
    public static __VsXRayEventId VsXRay_PSE_PrioritizedOnBeforeCloseSolution;
    public static __VsXRayEventId VsXRay_PSE_PrioritizedOnAfterCloseSolution;
    public static __VsXRayEventId VsXRay_PSE_PrioritizedOnAfterMergeSolution;
    public static __VsXRayEventId VsXRay_PSE_PrioritizedOnBeforeOpeningChildren;
    public static __VsXRayEventId VsXRay_PSE_PrioritizedOnAfterOpeningChildren;
    public static __VsXRayEventId VsXRay_PSE_PrioritizedOnBeforeClosingChildren;
    public static __VsXRayEventId VsXRay_PSE_PrioritizedOnAfterClosingChildren;
    public static __VsXRayEventId VsXRay_PSE_PrioritizedOnAfterRenameProject;
    public static __VsXRayEventId VsXRay_PSE_PrioritizedOnAfterChangeProjectParent;
    public static __VsXRayEventId VsXRay_PSE_PrioritizedOnAfterAsynchOpenProject;
    public static __VsXRayEventId VsXRay_SelE_OnSelectionChanged;
    public static __VsXRayEventId VsXRay_SelE_OnElementValueChanged;
    public static __VsXRayEventId VsXRay_SelE_OnCmdUIContextChanged;
    public static __VsXRayEventId VsXRay_ConPoint_SendEvent;
    public static __VsXRayEventId VsXRay_HierE_OnItemAdded;
    public static __VsXRayEventId VsXRay_HierE_OnItemsAppended;
    public static __VsXRayEventId VsXRay_HierE_OnItemDeleted;
    public static __VsXRayEventId VsXRay_HierE_OnPropertyChanged;
    public static __VsXRayEventId VsXRay_HierE_OnInvalidateItems;
    public static __VsXRayEventId VsXRay_HierE_OnInvalidateIcon;
    public static __VsXRayEventId VsXRay_RDTE_OnAfterFirstDocumentLock;
    public static __VsXRayEventId VsXRay_RDTE_OnBeforeLastDocumentUnlock;
    public static __VsXRayEventId VsXRay_RDTE_OnAfterSave;
    public static __VsXRayEventId VsXRay_RDTE_OnAfterAttributeChange;
    public static __VsXRayEventId VsXRay_RDTE_OnBeforeDocumentWindowShow;
    public static __VsXRayEventId VsXRay_RDTE_OnAfterDocumentWindowHide;
    public static __VsXRayEventId VsXRay_RDTE2_OnAfterAttributeChangeEx;
    public static __VsXRayEventId VsXRay_RDTE3_OnBeforeSave;
    public static __VsXRayEventId VsXRay_RDTE4_OnBeforeFirstDocumentLock;
    public static __VsXRayEventId VsXRay_RDTE4_OnAfterSaveAll;
    public static __VsXRayEventId VsXRay_RDTE4_OnAfterLastDocumentUnlock;
    public static __VsXRayEventId VsXRay_RDTE5_OnAfterDocumentLockCountChanged;
    public static __VsXRayEventId VsXRay_BrdcastME_OnBroadcastMessage;
    public static __VsXRayEventId VsXRay_ShellPE_OnShellPropertyChange;
    public static __VsXRayEventId VsXRay_WpfHP2_DispatcherEvents;
    public static __VsXRayEventId VsXRay_WFTC_WinFormsThreadCallback;
    public static __VsXRayEventId VsXRay_SEP_OnAfterOpenProjectInUI;
}
public enum Microsoft.Internal.VisualStudio.Shell.Interop.__VsXRayProperty : Enum {
    public int value__;
    public static __VsXRayProperty VsXRayProperty_TotalSolutionLoad;
    public static __VsXRayProperty VsXRayProperty_ThresholdExceeded;
}
public enum Microsoft.Internal.VisualStudio.Shell.Interop._ArtificialDelayType : Enum {
    public int value__;
    public static _ArtificialDelayType DelayType_None;
    public static _ArtificialDelayType DelayType_AsyncSave;
    public static _ArtificialDelayType DelayType_LoadEditorFactory;
    public static _ArtificialDelayType DelayType_CreateDocData;
    public static _ArtificialDelayType DelayType_LoadDocData;
    public static _ArtificialDelayType DelayType_CreateEditorView;
    public static _ArtificialDelayType DelayType_CreateEditorViewBackground;
    public static _ArtificialDelayType DelayType_InitializeEditorView;
    public static _ArtificialDelayType DelayType_InitializeEditorViewBackground;
    public static _ArtificialDelayType DelayType_LoadDocumentAsync;
}
public enum Microsoft.Internal.VisualStudio.Shell.Interop._FaultReason : Enum {
    public int value__;
    public static _FaultReason FaultReason_Unknown;
    public static _FaultReason FaultReason_Crash;
    public static _FaultReason FaultReason_Hang;
}
public enum Microsoft.Internal.VisualStudio.Shell.Interop._OneAppTemplateType : Enum {
    public int value__;
    public static _OneAppTemplateType OATT_Unknown;
    public static _OneAppTemplateType OATT_SharedProject;
    public static _OneAppTemplateType OATT_HeadProject;
}
public enum Microsoft.Internal.VisualStudio.Shell.Interop._SolutionReloadBatchStage : Enum {
    public int value__;
    public static _SolutionReloadBatchStage SRBS_Collecting;
    public static _SolutionReloadBatchStage SRBS_Computing;
    public static _SolutionReloadBatchStage SRBS_Executing;
    public static _SolutionReloadBatchStage SRBS_Completed;
    public static _SolutionReloadBatchStage SRBS_Canceled;
}
public enum Microsoft.Internal.VisualStudio.Shell.Interop._ToggleButtonState : Enum {
    public int value__;
    public static _ToggleButtonState ToggleButtonState_Off;
    public static _ToggleButtonState ToggleButtonState_On;
    public static _ToggleButtonState ToggleButtonState_Undefined;
}
public enum Microsoft.Internal.VisualStudio.Shell.Interop._USER_ENGAGEMENT_LEVEL : Enum {
    public int value__;
    public static _USER_ENGAGEMENT_LEVEL UEL_DISENGAGED;
    public static _USER_ENGAGEMENT_LEVEL UEL_ENGAGED;
}
public enum Microsoft.Internal.VisualStudio.Shell.Interop._VSEnsureLoadedResult : Enum {
    public int value__;
    public static _VSEnsureLoadedResult ELR_Failed;
    public static _VSEnsureLoadedResult ELR_FileNotFound;
    public static _VSEnsureLoadedResult ELR_InProgress;
    public static _VSEnsureLoadedResult ELR_Succeeded;
}
public enum Microsoft.Internal.VisualStudio.Shell.Interop._VsOwnerChangeReason : Enum {
    public int value__;
    public static _VsOwnerChangeReason VSOCR_NoChange;
    public static _VsOwnerChangeReason VSOCR_OwnerAssigned;
    public static _VsOwnerChangeReason VSOCR_OwnerUnloaded;
    public static _VsOwnerChangeReason VSOCR_OwnerRemovedFromSolution;
    public static _VsOwnerChangeReason VSOCR_OwnerUnassignedMultipleRegistered;
}
public enum Microsoft.Internal.VisualStudio.Shell.Interop._VsProjectCloseReason : Enum {
    public int value__;
    public static _VsProjectCloseReason VSPCR_Unknown;
    public static _VsProjectCloseReason VSPCR_SolutionClosing;
    public static _VsProjectCloseReason VSPCR_ProjectUnloading;
    public static _VsProjectCloseReason VSPCR_ProjectRemovedFromSolution;
}
public enum Microsoft.Internal.VisualStudio.Shell.Interop._VSRoamingDisabledReason : Enum {
    public int value__;
    public static _VSRoamingDisabledReason RDR_NoConflict;
    public static _VSRoamingDisabledReason RDR_Mismatch;
    public static _VSRoamingDisabledReason RDR_OnlineProfileDoesNotExist;
    public static _VSRoamingDisabledReason RDR_Reset;
    public static _VSRoamingDisabledReason RDR_Crash;
}
public enum Microsoft.Internal.VisualStudio.Shell.Interop._VsTelemetryFaultSeverity : Enum {
    public int value__;
    public static _VsTelemetryFaultSeverity VsTelemetryFaultSeverity_Uncategorized;
    public static _VsTelemetryFaultSeverity VsTelemetryFaultSeverity_Diagnostic;
    public static _VsTelemetryFaultSeverity VsTelemetryFaultSeverity_General;
    public static _VsTelemetryFaultSeverity VsTelemetryFaultSeverity_Critical;
}
public enum Microsoft.Internal.VisualStudio.Shell.Interop._VsTelemetryResult : Enum {
    public int value__;
    public static _VsTelemetryResult VsTelemetryResult_None;
    public static _VsTelemetryResult VsTelemetryResult_Success;
    public static _VsTelemetryResult VsTelemetryResult_Failure;
    public static _VsTelemetryResult VsTelemetryResult_UserFault;
    public static _VsTelemetryResult VsTelemetryResult_UserCancel;
}
public enum Microsoft.Internal.VisualStudio.Shell.Interop._VsTelemetrySeverity : Enum {
    public int value__;
    public static _VsTelemetrySeverity VsTelemetrySeverity_High;
    public static _VsTelemetrySeverity VsTelemetrySeverity_Normal;
    public static _VsTelemetrySeverity VsTelemetrySeverity_Low;
}
public static class Microsoft.Internal.VisualStudio.Shell.Interop.AutoMetricsNames : object {
    [NullableAttribute("1")]
public static string Responsive;
}
public class Microsoft.Internal.VisualStudio.Shell.Interop.BitmapData : ValueType {
    [ComAliasNameAttribute("StringId")]
public UInt32 bitmapInfoId;
    public int bitmapIndex;
}
public class Microsoft.Internal.VisualStudio.Shell.Interop.CloseSolutionProjectFileTypeTelemetryData : ValueType {
    [NullableAttribute("1")]
public string FileExtension;
    public UInt32 FilesCount;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.Internal.VisualStudio.Shell.Interop.CloseSolutionProjectTelemetryData : ValueType {
    public UInt32 ProjOutputType;
    public UInt32 ProjOutputTypeV2;
    public UInt32 ProjNumTotalFiles;
    public UInt32 ProjNumReferences;
    public UInt32 ProjWebServerType;
    public UInt32 ProjTargetRuntime;
    public string ProjIdGuidStr;
    public string ProjKindGuidRawStr;
    public string ProjFlavorRawStr;
    public string ProjTargetFrameworkRawStr;
    public string ProjTargetPlatformRawStr;
    public string ProjTargetPlatformMonikersRawStr;
    public string ProjTargetPlatformMonikers2;
    public string ProjTargetPlatformVersionRawStr;
    public string ProjTargetPlatformMinVersionRawStr;
    public string ProjCppPlatformToolsetRawStr;
    public string ProjCppKeywordRawStr;
    public string ProjApplicationTypeRawStr;
    public string ProjApplicationTypeRevisionRawStr;
    public string ProjVisualStudioCMakeGeneratedProjectRawStr;
    public string ProjCapabilities;
    public string ProjExtension;
    public bool ClickOncePublishEnabled;
}
public class Microsoft.Internal.VisualStudio.Shell.Interop.CommandData : ValueType {
    [ComAliasNameAttribute("CommandTableId")]
public CommandTableId IconId;
    [ComAliasNameAttribute("VSCommandTypes")]
public UInt32 type;
    [ComAliasNameAttribute("VSCommandFlags")]
public long flags;
    [ComAliasNameAttribute("DWORD")]
public UInt32 Priority;
}
public class Microsoft.Internal.VisualStudio.Shell.Interop.CommandKeyBinding : ValueType {
    public ushort GuidId;
    public UInt32 DWordId;
    public UInt32 ScopeGid;
    public byte bKey1;
    public byte bMod1;
    public byte bKey2;
    public byte bMod2;
}
public class Microsoft.Internal.VisualStudio.Shell.Interop.CommandMetadata : ValueType {
    [ComAliasNameAttribute("VsShellInterop160.VSCommandId")]
public VSCommandId CommandId;
    [ComAliasNameAttribute("ImageParameters140.ImageMoniker")]
public ImageMoniker Icon;
    public UInt32 DiscoveryOrder;
    public string CommandPlacementText;
    public string CommandKeyBinding;
}
public class Microsoft.Internal.VisualStudio.Shell.Interop.CommandTableId : ValueType {
    [ComAliasNameAttribute("GUID_ID")]
public ushort GuidId;
    [ComAliasNameAttribute("DWORD")]
public UInt32 DWordId;
}
public class Microsoft.Internal.VisualStudio.Shell.Interop.CommandTextData : ValueType {
    [ComAliasNameAttribute("StringId")]
public UInt32 ButtonTextId;
    [ComAliasNameAttribute("StringId")]
public UInt32 MenuTextId;
    [ComAliasNameAttribute("StringId")]
public UInt32 ToolTipId;
    [ComAliasNameAttribute("StringId")]
public UInt32 CommandWellTextId;
    [ComAliasNameAttribute("StringId")]
public UInt32 CanonicalNameId;
    [ComAliasNameAttribute("StringId")]
public UInt32 LocalizedCanonicalNameId;
}
public enum Microsoft.Internal.VisualStudio.Shell.Interop.ConfigurationCapability : Enum {
    public int value__;
    public static ConfigurationCapability ConfigurationCapability_None;
    public static ConfigurationCapability ConfigurationCapability_ConfigAdd;
    public static ConfigurationCapability ConfigurationCapability_ConfigDelete;
    public static ConfigurationCapability ConfigurationCapability_ConfigRename;
    public static ConfigurationCapability ConfigurationCapability_PlatformAdd;
    public static ConfigurationCapability ConfigurationCapability_PlatformDelete;
    public static ConfigurationCapability ConfigurationCapability_Build;
    public static ConfigurationCapability ConfigurationCapability_Deploy;
}
public class Microsoft.Internal.VisualStudio.Shell.Interop.ContextStateInfo : ValueType {
    public Guid Context;
    public UIContextState State;
}
[GuidAttribute("EE948AF3-8BD1-45CF-889F-71E68D5D4C60")]
public class Microsoft.Internal.VisualStudio.Shell.Interop.DocumentRange : object {
    public int StartLine;
    public int StartColumn;
    public int EndLine;
    public int EndColumn;
}
public enum Microsoft.Internal.VisualStudio.Shell.Interop.DOMNodeType : Enum {
    public int value__;
    public static DOMNodeType NODE_INVALID;
    public static DOMNodeType NODE_ELEMENT;
    public static DOMNodeType NODE_ATTRIBUTE;
    public static DOMNodeType NODE_TEXT;
    public static DOMNodeType NODE_CDATA_SECTION;
    public static DOMNodeType NODE_ENTITY_REFERENCE;
    public static DOMNodeType NODE_ENTITY;
    public static DOMNodeType NODE_PROCESSING_INSTRUCTION;
    public static DOMNodeType NODE_COMMENT;
    public static DOMNodeType NODE_DOCUMENT;
    public static DOMNodeType NODE_DOCUMENT_TYPE;
    public static DOMNodeType NODE_DOCUMENT_FRAGMENT;
    public static DOMNodeType NODE_NOTATION;
}
[GuidAttribute("8B07214A-9D5E-49DE-A400-924C3AC0496A")]
public enum Microsoft.Internal.VisualStudio.Shell.Interop.EnsureRangeVisibleOptions : Enum {
    public int value__;
    public static EnsureRangeVisibleOptions ShowStart;
    public static EnsureRangeVisibleOptions MinimumScroll;
    public static EnsureRangeVisibleOptions AlwaysCenter;
    public static EnsureRangeVisibleOptions None;
}
public class Microsoft.Internal.VisualStudio.Shell.Interop.FeatureFlagMetadata : ValueType {
    public string Name;
    public string Title;
    public string PreviewPaneChannels;
    public string LearnMoreUrl;
    public string Description;
    public int IsEnabled;
    public string RequiredAction;
    public string FeedbackUrl;
    public string PackageGuid;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.Internal.VisualStudio.Shell.Interop.FeatureFlagMetadata2 : ValueType {
    public string Name;
    public string Title;
    public string PreviewPaneChannels;
    public string LearnMoreUrl;
    public string Description;
    public bool IsEnabled;
    public string RequiredAction;
    public string FeedbackUrl;
    public string PackageGuid;
    public string VisibleToInternalUsersOnlyChannels;
    public string VisibleToExperiments;
}
public class Microsoft.Internal.VisualStudio.Shell.Interop.FullCommandAddress : ValueType {
    [ComAliasNameAttribute("VsShellPrivate100.GroupItemData")]
public GroupItemData ItemData;
    [ComAliasNameAttribute("VsShellPrivate100.CommandTableId")]
public CommandTableId ParentGroupId;
}
public class Microsoft.Internal.VisualStudio.Shell.Interop.FullGroupAddress : ValueType {
    [ComAliasNameAttribute("VsShellPrivate100.CommandTableId")]
public CommandTableId GroupId;
    [ComAliasNameAttribute("VsShellPrivate100.CommandTableId")]
public CommandTableId ParentMenuId;
    public UInt32 GroupPriority;
}
public class Microsoft.Internal.VisualStudio.Shell.Interop.GroupItemData : ValueType {
    [ComAliasNameAttribute("CommandTableId")]
public CommandTableId itemID;
    [ComAliasNameAttribute("CommandTableId")]
public CommandTableId IconId;
    [ComAliasNameAttribute("VSCommandTypes")]
public UInt32 type;
    [ComAliasNameAttribute("VSCommandFlags")]
public long flags;
    [ComAliasNameAttribute("DWORD")]
public UInt32 ItemPriority;
}
[GuidAttribute("5A97059F-C5FB-44CF-888F-2AF4E236E192")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.Internal.VisualStudio.Shell.Interop.IBackgroundInitializationSafetyChecker {
    public abstract virtual bool IsBackgroundInitializationSafe(IVsPackage pPackage);
}
[GuidAttribute("6398E62F-5519-4900-B7AC-91CBC713BC3B")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.Internal.VisualStudio.Shell.Interop.ICloneableDataSource {
    public abstract virtual void Clone(IVsUIDataSource& ppDataSource);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("655049EE-9D8D-4AC6-93F0-80D3E55002BE")]
public interface Microsoft.Internal.VisualStudio.Shell.Interop.IControlledModel {
    public abstract virtual void GetController(Object& ppController);
    public abstract virtual void SetController(object pController);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("686EE857-841F-4791-AAB9-20E1EB12EDED")]
public interface Microsoft.Internal.VisualStudio.Shell.Interop.IDocumentFactory {
    public abstract virtual int CreateTextDocument(IVsTextLines pTextLines, object pUnkSite, TextDocument& ppTextDoc, object pOwner);
    public abstract virtual int CreateDocument(IVsTextLines pTextLines, UInt32 docCookie, object pUnkSite, Document& ppDoc, object pOwner);
    public abstract virtual int CreateTextPane(IVsTextView pView, TextPanes pCollection, object pUnkSite, TextPane& ppPane, object pOwner);
    public abstract virtual int CreateTextWindow(IVsTextLines pTextLines, Window pParent, object pUnkSite, TextWindow& ppwindow, object pOwner);
    public abstract virtual int CreateTextPoint(int iLine, int iIndex, TextDocument pDoc, IVsTextLines pBuf, object pUnkSite, object pOwner, TextPoint& lppaReturn);
    public abstract virtual int CreateEditPoint(int iLine, int iIndex, TextDocument pDoc, IVsTextLines pBuf, object pUnkSite, object pOwner, EditPoint& lppaReturn);
}
[GuidAttribute("DA85094C-66F0-4E0B-842D-873C30794F1E")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.Internal.VisualStudio.Shell.Interop.IGCHandleManager {
    public abstract virtual void FreeGCHandle(IntPtr value);
}
[GuidAttribute("3F2A41D1-125C-49C1-9773-1E0ECD311F00")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.Internal.VisualStudio.Shell.Interop.IMutableComWrapper {
    [DispIdAttribute("1610678272")]
[ComAliasNameAttribute("VsShell.INT_PTR")]
public IntPtr GCHandlePtr { get; }
    public abstract virtual IntPtr get_GCHandlePtr();
    public abstract virtual void SetInnerObject(object pInnerObject, IGCHandleManager pGCHandleManager, IntPtr gcHandle);
}
[GuidAttribute("81E90E35-D23D-4240-A3FB-71F710942E4C")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.Internal.VisualStudio.Shell.Interop.IRemotableDataSource {
    public abstract virtual void GetIsRemotable(Boolean& pIsRemotable);
    public abstract virtual void GetIsDisposed(Boolean& pIsDisposed);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("C940AB22-D8C0-4FD3-A52A-BA2AF635289B")]
public interface Microsoft.Internal.VisualStudio.Shell.Interop.IResetEventsPrivate {
    public abstract virtual int OnBeforeItemsReset();
    public abstract virtual int OnAfterItemsReset();
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("B711018C-4BFF-428C-9C3D-C781F30EB785")]
public interface Microsoft.Internal.VisualStudio.Shell.Interop.IServiceProfferingEvents {
    public abstract virtual void OnServiceProffered(Guid serviceId);
    public abstract virtual void OnServiceRevoked(Guid serviceId);
}
[GuidAttribute("641299D2-2595-4A72-9F3D-6B18D027ED55")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.Internal.VisualStudio.Shell.Interop.IServiceProfferingEventSink {
    public abstract virtual UInt32 AdviseServiceProfferingEvents(IServiceProfferingEvents pCallback);
    public abstract virtual void UnadviseServiceProfferingEvents(UInt32 dwCookie);
}
[GuidAttribute("4F111D70-F291-428D-8E40-CB1D4B1A7BDE")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.Internal.VisualStudio.Shell.Interop.IVsActivityLogDumper {
    public abstract virtual string GetActivityLogBuffer();
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("34691398-EF43-46B3-821F-20020F229881")]
public interface Microsoft.Internal.VisualStudio.Shell.Interop.IVsAggregateProjectContextPrivate {
    public abstract virtual void GetOuter(Object& ppOuter);
    public abstract virtual void LinkBaseProject(object pBaseInner);
    public abstract virtual void FinalizePrefetch(string pszFilename, string pszLocation, string pszName, Object& ppAggregatedProject);
    public abstract virtual void Cancel();
}
[NullableContextAttribute("1")]
[GuidAttribute("63563ed6-d21c-45fe-8210-1b21ce0e24d4")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.Internal.VisualStudio.Shell.Interop.IVsArtificialDelay {
    public abstract virtual IVsTask DelayAsync(UInt32 delayType);
}
[NullableContextAttribute("1")]
[GuidAttribute("0177778A-C255-449F-B5D4-B2C6FBAEF13A")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.Internal.VisualStudio.Shell.Interop.IVsAsyncOpenProjectFactory {
    public abstract virtual IVsTask OpenProjectAsync(string pwszFileName, Guid& modreq(System.Runtime.InteropServices.InAttribute) rguidProjectId);
}
[NullableContextAttribute("2")]
[GuidAttribute("9BAD7C0C-D7CE-40A3-995D-018EB5263466")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.Internal.VisualStudio.Shell.Interop.IVsAsyncProject {
    public abstract virtual object GetObject(Guid& modreq(System.Runtime.InteropServices.InAttribute) rguidIid);
}
[NullableContextAttribute("2")]
[GuidAttribute("91A50A02-5E20-4219-9894-61B2CCD8F6B9")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.Internal.VisualStudio.Shell.Interop.IVsAsyncShellOpenDocumentPrivate {
    public abstract virtual bool IsEditorSupported(Guid editorGuid, string physicalView);
    public abstract virtual bool IsAsyncDocView(object docView);
}
[GuidAttribute("C0AADBDC-2C4A-4266-A83D-15BD6148D9B9")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.Internal.VisualStudio.Shell.Interop.IVsAutoLoadManager {
    public abstract virtual void AutoLoadPackages(Guid& guidCmdUIContext);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("AC73AD65-6D91-4E10-AF2B-A413325B4435")]
public interface Microsoft.Internal.VisualStudio.Shell.Interop.IVsAutoloadRestrictionServicePrivate {
    public abstract virtual void AddUIContextAllowedSyncAutoload(Guid& pguidUIContext);
    public abstract virtual void RemoveUIContextAllowedSyncAutoload(Guid& pguidUIContext);
}
[NullableContextAttribute("1")]
[GuidAttribute("45dbe1c3-226a-4b9f-bc60-42b0a1289658")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.Internal.VisualStudio.Shell.Interop.IVsAutoMetrics {
    public abstract virtual int CreateOrOverwriteSnapshot(string snapShotName, string autoMetricsName);
    public abstract virtual int RemoveSnapshot(string snapShotName);
    public abstract virtual int AddValuesToEvent(string autoMetricsName, object telemetryEvent);
    public abstract virtual int AddDeltaValuesToEvent(string snapShotName, object telemetryEvent);
}
[NullableContextAttribute("1")]
[GuidAttribute("d7f42d48-d68f-422b-ad0f-5d98e1e8755c")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.Internal.VisualStudio.Shell.Interop.IVsAutoMetricsPublish {
    public abstract virtual int PublishAutoMetricsSource(string autoMetricsName, IVsAutoMetricsSource metricSource);
}
[NullableContextAttribute("1")]
[GuidAttribute("55a778b8-54d8-43a5-ae8d-3da8447adc63")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.Internal.VisualStudio.Shell.Interop.IVsAutoMetricsSnapshot {
    public abstract virtual int AddDeltaValuesToEvent(IVsTelemetryEvent telemetryEvent);
}
[NullableContextAttribute("1")]
[GuidAttribute("e2ea83c1-4372-4668-ae20-a67b31a02f3f")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.Internal.VisualStudio.Shell.Interop.IVsAutoMetricsSource {
    public abstract virtual IVsAutoMetricsSnapshot GetSnapshot(string snapShotName);
    public abstract virtual int AddValuesToEvent(IVsTelemetryEvent telemetryEvent);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("D07EAD38-E8A1-4A5D-8040-5CD48F3F009F")]
public interface Microsoft.Internal.VisualStudio.Shell.Interop.IVsBackForwardNavigationEx {
    public abstract virtual int GetCurrentBFNavigationItem(IVsWindowFrame& ppWindowFrame, String& pbstrData, Object& ppunk);
    public abstract virtual int AddNewBFNavigationItem(IVsWindowFrame pWindowFrame, string bstrData, object punk, int fReplaceCurrent);
    public abstract virtual int GetPreviousBFNavigationItem(IVsWindowFrame& ppWindowFrame, String& pbstrData, Object& ppunk);
    public abstract virtual int GetNextBFNavigationItem(IVsWindowFrame& ppWindowFrame, String& pbstrData, Object& ppunk);
    public abstract virtual int RemoveAdjacentBFNavigationItem(RemoveBFDirection rdDir);
    public abstract virtual int RemoveCurrentNavigationDupes(RemoveBFDirection rdDir);
    public abstract virtual int GoForward();
    public abstract virtual int GoBack();
    public abstract virtual int CanGoForward(Int32& fCanGoForward);
    public abstract virtual int CanGoBack(Int32& fCanGoBack);
    public abstract virtual int GetCaption(int fWindowCaption, int fCascadeMenu, int iIndexMenu, int iIndexItem, String& pbstrCaption);
    public abstract virtual int NavigateTo(int fCascade, int iIndexMenu, int iIndexItem);
    public abstract virtual int RemoveWindowFrame(IVsWindowFrame pWindowFrame);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("33236F03-BD4A-4421-8E1D-89575BA5AE03")]
public interface Microsoft.Internal.VisualStudio.Shell.Interop.IVsBackForwardNavigationPrivate {
    public int ItemCount { get; }
    public int CurrentIndex { get; }
    public bool CanGoForward { get; }
    public bool CanGoBack { get; }
    public abstract virtual void AddNewBFNavigationItem(IVsWindowFrame frame, string caption, object context, bool fReplaceCurrent);
    public abstract virtual bool TryGetCurrentBFNavigationItem(IVsWindowFrame& frame, String& caption, Object& context);
    public abstract virtual bool TryGetPreviousBFNavigationItem(IVsWindowFrame& frame, String& caption, Object& context);
    public abstract virtual bool TryGetNextBFNavigationItem(IVsWindowFrame& frame, String& caption, Object& context);
    public abstract virtual void RemoveAdjacentBFNavigationItem(RemoveBFDirection direction);
    public abstract virtual void RemoveCurrentNavigationDupes(RemoveBFDirection direction);
    public abstract virtual void GoForward();
    public abstract virtual void GoBack();
    public abstract virtual string GetCaption(int index);
    public abstract virtual void NavigateTo(int index);
    public abstract virtual int get_ItemCount();
    public abstract virtual int get_CurrentIndex();
    public abstract virtual bool get_CanGoForward();
    public abstract virtual bool get_CanGoBack();
}
[GuidAttribute("C33737A8-7F22-40B4-A953-120D13384A08")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.Internal.VisualStudio.Shell.Interop.IVsBackForwardNavigationPrivate2 {
    [DispIdAttribute("1610678282")]
public int ItemCount { get; }
    [DispIdAttribute("1610678283")]
public int CurrentIndex { get; }
    [DispIdAttribute("1610678284")]
public bool CanGoForward { get; }
    [DispIdAttribute("1610678285")]
public bool CanGoBack { get; }
    public abstract virtual void AddNewBFNavigationItem(IVsWindowFrame frame, string caption, object context, bool fReplaceCurrent);
    public abstract virtual bool TryGetCurrentBFNavigationItem(IVsWindowFrame& frame, String& caption, Object& context);
    public abstract virtual bool TryGetPreviousBFNavigationItem(IVsWindowFrame& frame, String& caption, Object& context);
    public abstract virtual bool TryGetNextBFNavigationItem(IVsWindowFrame& frame, String& caption, Object& context);
    public abstract virtual void RemoveAdjacentBFNavigationItem(RemoveBFDirection direction);
    public abstract virtual void RemoveCurrentNavigationDupes(RemoveBFDirection direction);
    public abstract virtual void GoForward();
    public abstract virtual void GoBack();
    public abstract virtual string GetCaption(int index);
    public abstract virtual void NavigateTo(int index);
    public abstract virtual int get_ItemCount();
    public abstract virtual int get_CurrentIndex();
    public abstract virtual bool get_CanGoForward();
    public abstract virtual bool get_CanGoBack();
    public abstract virtual IVsPreventAddNavigationItemsScopePrivate PreventAddNavigationItems();
}
[GuidAttribute("D15905E1-127F-4AC5-B474-F4B47259F2E9")]
[InterfaceTypeAttribute("1")]
[ExcludeFromProxyBuildAttribute]
public interface Microsoft.Internal.VisualStudio.Shell.Interop.IVsBackgroundDisposable {
    public abstract virtual void Dispose();
}
[NullableContextAttribute("2")]
[GuidAttribute("E21C078C-FD4E-46B2-8D97-F30D48F4532D")]
[InterfaceTypeAttribute("1")]
[ExcludeFromProxyBuildAttribute]
public interface Microsoft.Internal.VisualStudio.Shell.Interop.IVsBackgroundSolution {
    public long RevisionHandle { get; }
    public Guid SolutionGuid { get; }
    public string SolutionName { get; }
    public string SolutionFileName { get; }
    public string SolutionDirectory { get; }
    public string UserOptionsFileName { get; }
    public bool IsInOpenFolderMode { get; }
    public string OpenFolderPath { get; }
    public bool IsSolutionFilterOpen { get; }
    public string SolutionFilterFilePath { get; }
    public bool IsSolutionOpen { get; }
    public bool IsSolutionOpening { get; }
    public abstract virtual long get_RevisionHandle();
    public abstract virtual bool IsRevisionHandleValid(long revisionHandle);
    public abstract virtual Guid get_SolutionGuid();
    public abstract virtual string get_SolutionName();
    public abstract virtual string get_SolutionFileName();
    public abstract virtual string get_SolutionDirectory();
    public abstract virtual string get_UserOptionsFileName();
    public abstract virtual bool get_IsInOpenFolderMode();
    public abstract virtual string get_OpenFolderPath();
    public abstract virtual bool get_IsSolutionFilterOpen();
    public abstract virtual string get_SolutionFilterFilePath();
    public abstract virtual void GetSolutionInfo(String& solutionDirectory, String& solutionFileName, String& userOptionsFileName);
    public abstract virtual void GetSolutionFilterInfo(Boolean& isSolutionFilterOpen, String& solutionFilterFilePath, String& solutionDirectory, String& solutionFileName, String& userOptionsFileName);
    public abstract virtual void GetOpenFolderInfo(Boolean& isInOpenFolderMode, String& openFolderPath);
    public abstract virtual string GetProjectPathFromGuid(Guid& modreq(System.Runtime.InteropServices.InAttribute) projectGuid);
    [NullableContextAttribute("1")]
public abstract virtual Guid GetProjectGuidFromAbsolutePath(string projectPath);
    public abstract virtual bool get_IsSolutionOpen();
    public abstract virtual bool get_IsSolutionOpening();
    [NullableContextAttribute("1")]
public abstract virtual IVsBackgroundDisposable SubscribeListener(object listener);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("BDCE47DA-A080-472E-A543-503D9C41EDFC")]
public interface Microsoft.Internal.VisualStudio.Shell.Interop.IVsBatchedInitializationPrivateCallback {
    public abstract virtual void BuildCompleted(Guid projectId, bool success, UInt32 dwResultSize, Byte[] pResultInfo);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("B6766617-6132-4C46-BC07-491C11812812")]
public interface Microsoft.Internal.VisualStudio.Shell.Interop.IVsBatchedInitializationPrivateCallback157 {
    public abstract virtual void BuildCompleted(Guid projectId, bool success, UInt32 dwResultSize, Byte[] pResultInfo);
    public abstract virtual void GetDataForUpToDateCheck(Guid projectId, Array& pbsaFilePaths, Array& pbsaValidConfigs);
}
[GuidAttribute("870AA263-C57D-452F-B5D1-4C2F57A5D9FD")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.Internal.VisualStudio.Shell.Interop.IVsBatchedInitializationPrivateCallback16 {
    public abstract virtual void BuildCompleted(Guid projectId, bool success, UInt32 dwResultSize, Byte[] pResultInfo);
    public abstract virtual void GetDataForUpToDateCheck(Guid projectId, Array& pbsaFilePaths, Array& pbsaValidConfigs);
}
[GuidAttribute("8568B6C4-2BBA-423B-8F31-CB5F31F605D4")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.Internal.VisualStudio.Shell.Interop.IVsBuildAccelTable {
    public abstract virtual int GetHACCEL(IntPtr& phaccel);
    public abstract virtual int BuildAccTable(int fRebuildTable);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("097AC31F-06AB-4BE1-99F0-EE5DB4E44594")]
public interface Microsoft.Internal.VisualStudio.Shell.Interop.IVsBuildAvailabilityServicePrivate {
    public abstract virtual void GetBuildAvailabilityForProjectsInSolution(Array& psaProjects, Array& psaBuildable, Array& psaDeployable, Array& psaPublishable, Array& pfCleanable);
    public abstract virtual void GetBuildAvailabilityForProject(IVsHierarchy pHierarchy, Boolean& psaBuildable, Boolean& psaDeployable, Boolean& psaPublishable, Boolean& pfCleanable);
}
[NullableContextAttribute("1")]
[GuidAttribute("4409C122-B21A-4AF0-A5C6-897C0EF4C513")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.Internal.VisualStudio.Shell.Interop.IVsBuildDependenciesProviderPrivate {
    public abstract virtual String[] GetBuildDependencies(bool ensureUpToDate, Boolean& wasUpToDate);
}
[GuidAttribute("6EC6F1E4-1C16-419E-858B-5364A6F1B603")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.Internal.VisualStudio.Shell.Interop.IVsBuildStatusUpdateEvents {
    public abstract virtual void OnBuildProgressUpdated(UInt32 dwBuildAction, int cProjectsBuilt, int cTotalProjectsInBuild);
    public abstract virtual void OnSolutionBuildOutputUpdated(string pszBuildOutput);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("40A18E35-C7AC-453F-BA82-59892EC8DDAE")]
public interface Microsoft.Internal.VisualStudio.Shell.Interop.IVsBuildStatusUpdateServicePrivate {
    public abstract virtual UInt32 AdviseBuildStatusUpdateEvents(IVsBuildStatusUpdateEvents pCallback);
    public abstract virtual void UnadviseBuildStatusUpdateEvents(UInt32 dwCookie);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("8D6985CA-5EB2-41C4-8C29-CFC34BD07D4E")]
public interface Microsoft.Internal.VisualStudio.Shell.Interop.IVsButtonEventsPrivate {
    public abstract virtual int RaiseClick(Boolean& pfCancel);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("3111B1BF-A6FD-40DC-9265-5CCB703ACC91")]
public interface Microsoft.Internal.VisualStudio.Shell.Interop.IVsCacheCleanupPrivate {
    public abstract virtual void CleanupComNativeDescriptorCache();
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("C24B973E-A232-4382-92D4-B2C47E31006F")]
public interface Microsoft.Internal.VisualStudio.Shell.Interop.IVsChooseToolboxItems {
    public abstract virtual void ShowChooseItemsDialog(Guid& preferredPage);
}
[GuidAttribute("F2AEE148-8F84-4E05-941D-745CA031CC3D")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.Internal.VisualStudio.Shell.Interop.IVsChooseToolboxItemsPage {
    public string Title { get; }
    public string HelpKeyword { get; }
    public Guid Guid { get; }
    public int Order { get; }
    public abstract virtual string get_Title();
    public abstract virtual string get_HelpKeyword();
    public abstract virtual Guid get_Guid();
    public abstract virtual int get_Order();
    public abstract virtual IntPtr CreateHwnd(IntPtr parent);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("337BB20C-1F6A-494A-B5E6-CCC2F3919B6A")]
public interface Microsoft.Internal.VisualStudio.Shell.Interop.IVsCloseRemoteWorkspaceServicePrivate {
    public abstract virtual void CloseWorkspace();
}
[NullableContextAttribute("1")]
[GuidAttribute("E3F5CF82-CBA2-43CF-BF44-92436EE55C7E")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.Internal.VisualStudio.Shell.Interop.IVsCloseSolutionProjectTelemetryService {
    public abstract virtual int SetCachedProjectTelemetryData(Guid guidProjectId, CloseSolutionProjectTelemetryData projectTelemetryData);
    public abstract virtual int SetCachedProjectReferencesData(Guid guidProjectId, UInt32 projectReferenceCount, String[] projectReferenceNameRawStr, UInt32[] projectReferenceTypes);
    public abstract virtual int SetCachedProjectSharedAssetData(Guid guidProjectId, bool isSet, UInt32 importsCount, String[] imports, UInt32 importHash, string importHashSHA256);
    public abstract virtual int SetCachedProjectFileTypeInfo(Guid guidProjectId, UInt32 projectFileTypeInfoCount, CloseSolutionProjectFileTypeTelemetryData[] projectFileTypeInfo);
    public abstract virtual int NotifyTelemetryDataNeeded();
    public abstract virtual int AdviseTelemetryDataNeededEvents(IVsSolutionCloseTelemetryDataNeededEvents pEvents, UInt32& pdwCookie);
    public abstract virtual int UnadviseTelemetryDataNeededEvents(UInt32 dwCookie);
}
[GuidAttribute("4565BC56-949A-4D8D-9B61-ED37A4D28164")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.Internal.VisualStudio.Shell.Interop.IVsCloudEnvironmentProperties {
    public abstract virtual IVsTask GetNameAsync();
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("5BEEC9C0-DA42-42C7-B7AC-02BD1EC89EA6")]
public interface Microsoft.Internal.VisualStudio.Shell.Interop.IVsColorThemeService2 {
    [DispIdAttribute("1610678276")]
public IVsColorThemes Themes { get; }
    [DispIdAttribute("1610678277")]
public IVsColorNames ColorNames { get; }
    [DispIdAttribute("1610678278")]
public IVsColorTheme CurrentTheme { get; }
    public abstract virtual void NotifyExternalThemeChanged();
    public abstract virtual UInt32 GetCurrentVsColorValue(int vsSysColor);
    public abstract virtual UInt32 GetCurrentColorValue(Guid& rguidColorCategory, string pszColorName, UInt32 dwColorType);
    public abstract virtual UInt32 GetCurrentEncodedColor(Guid& rguidColorCategory, string pszColorName, UInt32 dwColorType);
    public abstract virtual IVsColorThemes get_Themes();
    public abstract virtual IVsColorNames get_ColorNames();
    public abstract virtual IVsColorTheme get_CurrentTheme();
    public abstract virtual UInt32 AdviseThemeChangeEvents(IVsThemeChangeEvents eventSink);
    public abstract virtual void UnadviseThemeChangeEvents(UInt32 cookie);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("2CCF8538-3550-4BA4-8D09-B80B99F42504")]
public interface Microsoft.Internal.VisualStudio.Shell.Interop.IVsComboBoxEventsPrivate {
    public abstract virtual int RaiseChange();
}
[GuidAttribute("D604735B-77E8-459B-ABFB-5AEAD59E5830")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.Internal.VisualStudio.Shell.Interop.IVsCommandBarCustomizerCollectionEventsPrivate {
    public abstract virtual int OnAfterCommandBarAdded(IVsCommandBarCustomizerPrivate pAddedCommandBar, UInt32 nItem);
    public abstract virtual int OnAfterCommandBarRemoved(IVsCommandBarCustomizerPrivate pRemovedCommandBar, UInt32 nItem);
    public abstract virtual int OnBeforeCollectionReset();
    public abstract virtual int OnAfterCollectionReset();
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("832D167D-9F26-4FEF-B40B-FB187D4C8603")]
public interface Microsoft.Internal.VisualStudio.Shell.Interop.IVsCommandBarCustomizerCollectionPrivate {
    public abstract virtual int GetCount(UInt32& pCount);
    public abstract virtual int GetItem(UInt32 index, IVsCommandBarCustomizerPrivate& ppCommandBar);
    public abstract virtual int Add(string Name, int position, UInt32 type, long flags, bool temporary, int protection, bool visible, IVsCommandBarCustomizerPrivate& ppCommandBar);
    public abstract virtual int AddWithId(string Name, CommandTableId id, int position, UInt32 type, long flags, bool temporary, int protection, bool visible, IVsCommandBarCustomizerPrivate& ppCommandBar);
    public abstract virtual int Remove(IVsCommandBarCustomizerPrivate pCommandBar);
    public abstract virtual int RemoveById(CommandTableId id);
    public abstract virtual int AdviseCollectionEvents(IVsCommandBarCustomizerCollectionEventsPrivate pListener, UInt32& pdwCookie);
    public abstract virtual int UnadviseCollectionEvents(UInt32 dwCookie);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("03D726E9-29F5-4D3C-923C-1034319220B2")]
public interface Microsoft.Internal.VisualStudio.Shell.Interop.IVsCommandBarCustomizerPrivate {
    public abstract virtual int GetDataSource(IVsUIDataSource& ppDataSource);
    public abstract virtual int GetController(Object& ppunkController);
    public abstract virtual int GetControls(IVsControlCustomizerCollectionPrivate& ppCollection);
    public abstract virtual int Add(UInt32 uiType, long flags, int indexBefore, bool persist, IVsControlCustomizerPrivate& ppControl);
    public abstract virtual int AddWithId(UInt32 uiType, long flags, CommandTableId id, int indexBefore, bool persist, IVsControlCustomizerPrivate& ppControl);
    public abstract virtual int CopyControl(IVsControlCustomizerPrivate pExistingControl, int indexBefore, bool persist, IVsControlCustomizerPrivate& ppNewControl);
    public abstract virtual int MoveControl(IVsCommandBarCustomizerPrivate pExistingCommandBar, IVsControlCustomizerPrivate pExistingControl, int indexBefore, bool persist, IVsControlCustomizerPrivate& ppNewControl);
    public abstract virtual int Remove(IVsControlCustomizerPrivate pControl);
    public abstract virtual int Reset();
    public abstract virtual int ShowPopup(int x, int y);
    public abstract virtual int SetText(string pszText);
    public abstract virtual int AdviseResetEvents(IResetEventsPrivate pResetEvents, UInt32& pCookie);
    public abstract virtual int UnadviseResetEvents(UInt32 cookie);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("B2859E38-8BA4-4134-AD65-D5650CB65CA2")]
public interface Microsoft.Internal.VisualStudio.Shell.Interop.IVsCommandBarsCustomizerPrivate {
    public abstract virtual int GetCommandBars(IVsCommandBarCustomizerCollectionPrivate& ppCollection);
    public abstract virtual int GetCommandBarsForCollection(IVsUICollection pCommandBars, IVsCommandBarCustomizerCollectionPrivate& ppCollection);
    public abstract virtual int GetUniqueNewCommandBarName(String& pbstrName);
    public abstract virtual int EnableUserCustomizations(bool enabled);
    public abstract virtual int AreUserCustomizationsEnabled(Boolean& pEnabled);
    public abstract virtual int GetHasSessionCustomizations(Boolean& pHasSessionCustomizations);
    public abstract virtual int SetHasSessionCustomizations(bool fHasSessionCustomizations);
    public abstract virtual int IsCommandBarTemporary(CommandTableId id, Boolean& pIsTemporary);
    public abstract virtual int RegisterTemporaryCommandBar(CommandTableId id);
    public abstract virtual int IsItemTemporary(CommandTableId parentId, CommandTableId itemID, Boolean& pIsTemporary);
    public abstract virtual int RegisterTemporaryItem(CommandTableId parentId, CommandTableId itemID);
    public abstract virtual int GetDataSource(IVsUIDataSource& ppDataSource);
    public abstract virtual int Reset();
}
[GuidAttribute("6644771B-8235-4CEC-A56E-CBAD7D89506B")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.Internal.VisualStudio.Shell.Interop.IVsCommandInfoDisplayServicePrivate {
    public abstract virtual int DisplayMenuInfoPopup(IVsUIDataSource pDataSource);
}
[GuidAttribute("d629c6f4-7838-4d9c-a74d-06529ebe4d7f")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.Internal.VisualStudio.Shell.Interop.IVsCommandInfoQueryService {
    public abstract virtual int IsCommandAutoVisible(CommandTableId CommandId, UInt32 cContexts, UInt16[] pgidContexts, UInt32& pdwVisibility);
    public abstract virtual int GetCommandData(CommandTableId CommandId, CommandData[] pCommandData);
    public abstract virtual int GetCommandControlItems(CommandTableId CommandId, UInt32& pdwWidth, UInt32& pdwCommandListId);
    public abstract virtual int GetCommandTextData(CommandTableId CommandId, CommandTextData[] pCommandTextData);
    public abstract virtual int GetCommandPackage(CommandTableId CommandId, UInt16& pgidPackageId);
}
[GuidAttribute("24EE0DA8-B5FB-43F1-A563-A1802DCD1588")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.Internal.VisualStudio.Shell.Interop.IVsCommandSearchPrivate {
    public abstract virtual IVsUICollection Search(UInt32 tokenCount, String[] textToMatch, UInt32 TextRecordsToSearch, UInt32 SearchResultDataRequirements, UInt32 SearchCandidateProcessingFlags, UInt32 searchId);
    public abstract virtual IVsUICollection ScopedSearch(UInt32 tokenCount, String[] textToMatch, UInt32 TextRecordsToSearch, UInt32 SearchResultDataRequirements, UInt32 SearchCandidateProcessingFlags, UInt32 searchId, UInt32 scopeCount, ScopeLocation[] scopeLocations);
    public abstract virtual void CancelSearch(UInt32 searchIdCookie);
    public abstract virtual string CreatePersistenceTokenFromResult(IVsUIDataSource searchResult, bool commandWellOnlyItemsIncludedInSearch);
    public abstract virtual IVsUIDataSource CreateResultFromPersistenceToken(string persistenceToken);
    public abstract virtual bool UpdateResult(IVsUIDataSource searchResult);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("C9F76D82-C91D-471D-9BDA-DD4685D14BAB")]
public interface Microsoft.Internal.VisualStudio.Shell.Interop.IVsCommandTable {
    public abstract virtual int Sort();
    public abstract virtual int Validate();
    public abstract virtual int GetMenuData(UInt32 dwStartItem, UInt32 dwItemCount, MenuData[] pMenuData, UInt32& pdwNumItemsReturned);
    public abstract virtual int GetButtonCount(UInt32& pdwButtonCount);
    public abstract virtual int GetComboCount(UInt32& pdwComboCount);
    public abstract virtual int GetCommandCount(UInt32& pdwCommandCount);
    public abstract virtual int GetMenuCount(UInt32& pdwMenuCount);
    public abstract virtual int GetKeyBindingCount(UInt32& pdwKeyBindingCount);
    public abstract virtual int GetBitmapData(CommandTableId bitmapId, BitmapData[] pBitmapData);
    public abstract virtual int GetCommandIdAt(UInt32 dwIndex, CommandTableId[] pCommandId);
    public abstract virtual int GetKeyBindingData(UInt32 dwStartItem, UInt32 dwItemCount, KeyBindingId KeyBindingId, KeyBindingData[] pKeyBindingData, UInt32& pdwNumItemsReturned);
    public abstract virtual int StartMenuGroupsEnum(CommandTableId MenuId, IVsMenuGroupsEnumerator& ppMenuGroupsEnumerator);
    public abstract virtual int StartGroupItemsEnum(CommandTableId GroupId, IVsGroupItemsEnumerator& ppGroupItemsEnumerator);
    public abstract virtual int StartMenuItemsEnum(CommandTableId MenuId, IVsMenuItemsEnumerator& ppMenuItemsEnumerator);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("52749101-eaf5-4fa4-a3ae-4a1a254e2f23")]
public interface Microsoft.Internal.VisualStudio.Shell.Interop.IVsCommandTable3 {
    public abstract virtual int Sort();
    public abstract virtual int Validate();
    public abstract virtual int GetMenuData(UInt32 dwStartItem, UInt32 dwItemCount, MenuData[] pMenuData, UInt32& pdwNumItemsReturned);
    public abstract virtual int GetButtonCount(UInt32& pdwButtonCount);
    public abstract virtual int GetComboCount(UInt32& pdwComboCount);
    public abstract virtual int GetCommandCount(UInt32& pdwCommandCount);
    public abstract virtual int GetMenuCount(UInt32& pdwMenuCount);
    public abstract virtual int GetKeyBindingCount(UInt32& pdwKeyBindingCount);
    public abstract virtual int GetBitmapData(CommandTableId bitmapId, BitmapData[] pBitmapData);
    public abstract virtual int GetCommandIdAt(UInt32 dwIndex, CommandTableId[] pCommandId);
    public abstract virtual int GetKeyBindingData(UInt32 dwStartItem, UInt32 dwItemCount, KeyBindingId KeyBindingId, KeyBindingData[] pKeyBindingData, UInt32& pdwNumItemsReturned);
    public abstract virtual int StartMenuGroupsEnum(CommandTableId MenuId, IVsMenuGroupsEnumerator& ppMenuGroupsEnumerator);
    public abstract virtual int StartGroupItemsEnum(CommandTableId GroupId, IVsGroupItemsEnumerator& ppGroupItemsEnumerator);
    public abstract virtual int StartMenuItemsEnum(CommandTableId MenuId, IVsMenuItemsEnumerator& ppMenuItemsEnumerator);
    public abstract virtual void GetGroupParent(CommandTableId GroupId, CommandTableId[] parentId);
}
[NullableContextAttribute("1")]
[InterfaceTypeAttribute("1")]
[GuidAttribute("C7647F1C-B613-48BA-BF47-4FB5D5EBC8FA")]
public interface Microsoft.Internal.VisualStudio.Shell.Interop.IVsCommandTable4 {
    public abstract virtual Array GetGroupParents(CommandTableId groupId);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("CB35ACB5-D019-466C-B5AF-56D8B3865B84")]
public interface Microsoft.Internal.VisualStudio.Shell.Interop.IVsCommandTableCommandLine {
    public abstract virtual int ReadTextual(string pszSource, UInt32 iSize, UInt32& iOffset);
    public abstract virtual int ImportSymbols(string pszSymbolsFile);
}
[GuidAttribute("A3870B14-F267-4E44-ABC7-5373A4EA2E7E")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.Internal.VisualStudio.Shell.Interop.IVsCommandTableLocStudio {
    public abstract virtual int GetButtonIdAt(int iIndex, CommandTableId[] pButtonId);
    public abstract virtual int GetComboIdAt(int iIndex, CommandTableId[] pComboId);
    public abstract virtual int SetMenuText(CommandTableId MenuId, string lpszMenuText);
    public abstract virtual int SetCommandText(CommandTableId CommandId, CommandTextData textData);
    public abstract virtual int SetKeyBinding(UInt32 iKeybinding, byte bKey1, byte bModifer1, byte bKey2, byte bModifier2);
}
[GuidAttribute("53f3cea9-10d7-4729-b216-8ff3e291d48e")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.Internal.VisualStudio.Shell.Interop.IVsCommandTablePersist {
    public abstract virtual int ReadBinary(Byte& pbSource, UInt32 iSize, string lpszFilename, int fReadUsed, int fCheckUsed, int hadToRemapGuidIds);
    public abstract virtual int WriteBinary(IntPtr hFileDestination, int fWriteUsed);
}
[GuidAttribute("efba95de-d72c-45b0-aa3c-080a9d077ef6")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.Internal.VisualStudio.Shell.Interop.IVsCommandTableService {
    public abstract virtual int GetMasterCommandTable(IVsCommandTable& ppVsCommandTable);
    public abstract virtual int DeleteMasterCommandTable();
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("821BD79A-F1EC-4A8E-B480-42AC740D42BD")]
public interface Microsoft.Internal.VisualStudio.Shell.Interop.IVsCommandTableService2 {
    public abstract virtual int GetMasterCommandTable(IVsCommandTable& ppVsCommandTable);
    public abstract virtual int DeleteMasterCommandTable();
    public abstract virtual void LoadCommandTable();
}
[GuidAttribute("F04245D6-3F3B-4494-BF0E-DB3693F332DD")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.Internal.VisualStudio.Shell.Interop.IVsCommandTableStringMap {
    public abstract virtual int GetLocalString(UInt32 id, IntPtr& ppString);
    public abstract virtual int GetRemotableString(UInt32 id, String& pbstrString);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("7553F91B-AD0B-4549-BE04-E3FAAE82E768")]
public interface Microsoft.Internal.VisualStudio.Shell.Interop.IVsCommonUIAutomationRelayPrivate {
    public abstract virtual int GetCommandBars(Object& ppCommandBars);
    public abstract virtual int GetImageBits(object pImage, int width, int height, IStream pStream);
}
[GuidAttribute("373BB245-B7B9-40B0-9B92-4FC880463517")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.Internal.VisualStudio.Shell.Interop.IVsComponentSelectorDlgPageViewDataProviderPrivate {
    public abstract virtual int GetReferencePathsInComponentPageView(Guid guidComponentSelDlgPage, Array& psaReferencePathList);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("D12E6874-3C49-4D70-AA34-BE9CBB293644")]
public interface Microsoft.Internal.VisualStudio.Shell.Interop.IVsCompressionPrivate {
    public abstract virtual int Compress(Byte[] pInput, UInt32 cInput, bool fIncludeSignature, Array& pOutput);
    public abstract virtual int Decompress(Byte[] pInput, UInt32 cInput, Array& pOutput);
    public abstract virtual int IsCompressed(Byte[] pInput, UInt32 cInput, Boolean& pfCompressed);
}
[GuidAttribute("C0FFEED6-F0D2-4381-B557-370A6A3CB749")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.Internal.VisualStudio.Shell.Interop.IVsConfigurationProvider {
    [DispIdAttribute("1610678272")]
[ComAliasNameAttribute("Microsoft.Internal.VisualStudio.Shell.Interop.ConfigurationCapability")]
public ConfigurationCapability Capabilities { get; }
    [DispIdAttribute("1610678273")]
public Array AvailableConfigs { get; }
    [DispIdAttribute("1610678274")]
public Array AvailablePlatforms { get; }
    [DispIdAttribute("1610678275")]
public Array SupportedPlatforms { get; }
    public abstract virtual ConfigurationCapability get_Capabilities();
    public abstract virtual Array get_AvailableConfigs();
    public abstract virtual Array get_AvailablePlatforms();
    public abstract virtual Array get_SupportedPlatforms();
    public abstract virtual void AddConfig(string Name, string itemTemplate, bool propagate);
    public abstract virtual void AddPlatform(string Name, string itemTemplate, bool propagate);
    public abstract virtual void RemoveConfig(string Name);
    public abstract virtual void RemovePlatform(string Name);
    public abstract virtual void RenameConfig(string oldName, string newName);
}
[GuidAttribute("9076E908-E039-4783-8785-B4D18FE72648")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.Internal.VisualStudio.Shell.Interop.IVsControlCustomizerCollectionEventsPrivate {
    public abstract virtual int OnAfterControlAdded(IVsControlCustomizerPrivate pAddedControl, UInt32 nItem);
    public abstract virtual int OnAfterControlRemoved(IVsControlCustomizerPrivate pRemovedControl, UInt32 nItem);
    public abstract virtual int OnAfterCollectionCleared();
}
[GuidAttribute("BF009608-AE9E-419F-8192-BFA23ABB0FF0")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.Internal.VisualStudio.Shell.Interop.IVsControlCustomizerCollectionPrivate {
    public abstract virtual int GetCount(UInt32& pCount);
    public abstract virtual int GetItem(UInt32 index, IVsControlCustomizerPrivate& ppControl);
    public abstract virtual int AdviseCollectionEvents(IVsControlCustomizerCollectionEventsPrivate pListener, UInt32& pdwCookie);
    public abstract virtual int UnadviseCollectionEvents(UInt32 dwCookie);
}
[GuidAttribute("90070406-6F35-4418-97B0-CF15205EE854")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.Internal.VisualStudio.Shell.Interop.IVsControlCustomizerPrivate {
    public abstract virtual int GetDataSource(IVsUIDataSource& ppDataSource);
    public abstract virtual int GetController(Object& ppunkController);
    public abstract virtual int GetCommandBar(IVsCommandBarCustomizerPrivate& ppCommandBar);
    public abstract virtual int Reset();
    public abstract virtual int Enable(bool enabled, bool preserve);
    public abstract virtual int Show(bool visible, bool preserve);
    public abstract virtual int SetText(string pszText, bool preserve);
    public abstract virtual int SetTooltip(string pszTooltip, bool preserve);
    public abstract virtual int SetShortcutText(string pszShortcutText);
    public abstract virtual int SetStyle(UInt32 styleFlags, bool preserve);
    public abstract virtual int SaveImageOnShutdown(bool save);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("80053DF4-210F-4D6A-8B37-FA48676CEBBC")]
public interface Microsoft.Internal.VisualStudio.Shell.Interop.IVsCoreTelemetry {
    public abstract virtual void RecordCommandData(Guid& pguidCmdGroup, UInt32 dwCmdId, UInt32 dwExt);
    public abstract virtual void RecordExtensionDataInstall(UInt32 dwType, string strName, string strVersion, string strIdentifier, UInt32 sqmId, UInt32 flags);
    public abstract virtual void RecordExtensionDataUsage(UInt32 dwType, string strName, string strVersion, string strIdentifier, UInt32 flags);
    public abstract virtual void RecordExtensionDataLoad(UInt32 dwType, string strName, string strVersion, string strIdentifier, UInt32 flags);
    public abstract virtual void RecordCommandExtensionUsageData(Guid& pguidCmdGroup, UInt32 dwCmdId, UInt32 dwExt, UInt32 dwType, string strName, string strVersion, string strIdentifier, UInt32 flags);
    public abstract virtual void SetShutdownReasonForCurrentSession(UInt32 reason);
}
[GuidAttribute("0F857D81-ED67-43D5-B80D-FBF72C1A24ED")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.Internal.VisualStudio.Shell.Interop.IVsCoreTelemetry2 {
    public abstract virtual void RecordToggledCommandData(Guid& pguidCmdGroup, UInt32 dwCmdId, UInt32 dwExt, UInt32 tbsCurrentState);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("EF2DD389-763D-4E12-96D0-6266CA3AA592")]
public interface Microsoft.Internal.VisualStudio.Shell.Interop.IVsCoreTelemetry3 {
    public abstract virtual void RecordCommandDataWithKeystroke(Guid& pguidCmdGroup, UInt32 dwCmdId, UInt32 dwExt, string szKeystroke);
    public abstract virtual void RecordCommandExtensionUsageDataWithKeystroke(Guid& pguidCmdGroup, UInt32 dwCmdId, UInt32 dwExt, UInt32 dwType, string strName, string strVersion, string strIdentifier, UInt32 flags, string szKeystroke);
}
[GuidAttribute("0371049c-090b-4d0a-8f32-b854f4ec9fd2")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.Internal.VisualStudio.Shell.Interop.IVsCoreTelemetry4 {
    public abstract virtual __VsShutdownReasons GetShutdownReasonForCurrentSession();
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("35D89588-588C-4C2B-BD1E-91AF8E827B24")]
public interface Microsoft.Internal.VisualStudio.Shell.Interop.IVsCrashHistory {
    public abstract virtual void QueryCrashHistory(int pId, string exeName, FILETIME processStartTime, IVsCrashHistoryCallBack pCrashCallBack, object vtContext);
}
[GuidAttribute("5FB3AAA4-7601-4DDA-AC46-E243ADFA0F9A")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.Internal.VisualStudio.Shell.Interop.IVsCrashHistoryCallBack {
    public abstract virtual void GotCrash(int pId, object vtContext, string exeName, string faultingModule, string moduleVersion, string moduleTimeStamp, string modulePath, int FaultReason);
}
[GuidAttribute("52C116A5-9EB8-482B-B5BA-3819933F920F")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.Internal.VisualStudio.Shell.Interop.IVsCriticalShutdownAction {
    public abstract virtual void Invoke();
}
[GuidAttribute("B1EAF686-9B60-4394-BE58-8B169EA97948")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.Internal.VisualStudio.Shell.Interop.IVsCurrentCfg {
    public abstract virtual void GetCurrentConfigPlatform(String& pbstrCurrentConfig, String& pbstrCurrentPlatform);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("FC1BE09E-523D-44B0-B472-CCB0F73B1A01")]
public interface Microsoft.Internal.VisualStudio.Shell.Interop.IVsCustomizableObjectPrivate {
    public abstract virtual int GetCustomizer(Object& ppunkCustomizer);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("E23AAB6D-A1D3-4FCB-B584-CC629A7DE4B8")]
public interface Microsoft.Internal.VisualStudio.Shell.Interop.IVsCustomTelemetryService {
    public abstract virtual IVsTelemetrySession GetDefaultSession();
    public abstract virtual IVsTelemetryEvent CreateEvent(string szEventName);
    public abstract virtual IVsTelemetryActivity CreateActivity(string szActivityName);
    public abstract virtual IVsTelemetryActivity CreateActivityWithParentCorrelationId(string szActivityName, Guid& parentCorrelationId);
    public abstract virtual IVsTelemetryPropertyBag CreatePropertyBag();
    public abstract virtual IVsTelemetrySession CreateAndGetDefaultSession(bool optedIn, string hostName, UInt32 appId, string appInsightsIKey, string asimovIKey);
}
[NullableContextAttribute("2")]
[GuidAttribute("E952CF02-F120-4119-8F94-5D66F0C38BF0")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.Internal.VisualStudio.Shell.Interop.IVsDeferredDocData {
    [ComAliasNameAttribute("VSCOOKIE")]
public UInt32 DocumentCookie { get; public set; }
    public bool DidInitializationFail { get; }
    public bool IsCreatingEditorInstance { get; }
    public object InitializedDocData { get; public set; }
    public abstract virtual UInt32 get_DocumentCookie();
    public abstract virtual void set_DocumentCookie(UInt32 value);
    public abstract virtual bool get_DidInitializationFail();
    public abstract virtual bool get_IsCreatingEditorInstance();
    public abstract virtual object get_InitializedDocData();
    public abstract virtual void set_InitializedDocData(object value);
    public abstract virtual void EnsureInitialized();
    [NullableContextAttribute("1")]
public abstract virtual IVsTask GetDocDataAsync();
}
[GuidAttribute("CE520FE3-E3EC-4AA1-8E87-CF980C18EDEA")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.Internal.VisualStudio.Shell.Interop.IVsDeferredProjectRestoreService {
    public abstract virtual void AddProjectExpansionRestored(Guid bstrProjectGuid);
    public abstract virtual bool IsProjectExpansionRestored(Guid bstrProjectGuid);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("C1094158-A73D-449F-80AA-1D33D092A527")]
public interface Microsoft.Internal.VisualStudio.Shell.Interop.IVsDeferredSolutionBuildEvents {
    public abstract virtual bool OnProjectBuildBegin(string bstrProject);
    public abstract virtual void OnProjectBuildEnd(string bstrProject, bool fWasUpToDate, bool fSucceeded, bool fCancel);
    public abstract virtual void OnDeferredBuildBegin(int cProjectCount);
}
[GuidAttribute("858FB62B-DFB3-4A65-A8A4-AD632196D215")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.Internal.VisualStudio.Shell.Interop.IVsDeferredSolutionBuildEvents2 {
    public abstract virtual bool OnProjectBuildBegin(string bstrProject, string buildConfiguration);
    public abstract virtual void OnProjectBuildEnd(string bstrProject, string buildConfiguration, bool fWasUpToDate, bool fSucceeded, bool fCancel);
    public abstract virtual IVsTask OnDeferredBuildBegin(int cProjectCount, int cProjectsToBuild);
}
[GuidAttribute("598F81D0-9D02-4C6E-B88C-1F0457C33515")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.Internal.VisualStudio.Shell.Interop.IVsDeferredSolutionEventProvider {
    public abstract virtual void AdviseBuildEvents(IVsDeferredSolutionBuildEvents pEventSink, UInt32& pdwCookie);
    public abstract virtual void UnadviseBuildEvents(UInt32 dwCookie);
    public abstract virtual void AdviseIndexEvents(IVsDeferredSolutionIndexEvents pEventSink, UInt32& pdwCookie);
    public abstract virtual void UnadviseIndexEvents(UInt32 dwCookie);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("A11C0353-3750-40F6-825D-919A95DE7273")]
public interface Microsoft.Internal.VisualStudio.Shell.Interop.IVsDeferredSolutionEventProvider2 {
    public abstract virtual void AdviseBuildEvents2(IVsDeferredSolutionBuildEvents2 pEventSink, UInt32& pdwCookie);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("DB9FFFC5-F66F-4324-B2B6-CA3F19519AAE")]
public interface Microsoft.Internal.VisualStudio.Shell.Interop.IVsDeferredSolutionIndexEvents {
    public abstract virtual void OnProjectFlavorsChanged(int cProjects, String[] rgbstrProjects);
}
[GuidAttribute("F7A34C1C-5887-4C73-AB36-727808219020")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.Internal.VisualStudio.Shell.Interop.IVsDeferredSolutionLoadService {
    public abstract virtual void OpenWorkspace(string bstrSolutionPath);
    public abstract virtual void CloseWorkspace();
    public abstract virtual Array GetFileDependants(string bstrFileName);
    public abstract virtual IVsTask BuildProject(string bstrProjectName, string bstrCfgName, UInt32 buildOption);
    public abstract virtual IVsTask BuildProjects(Array& pbstrProjectsNameList, string bstrCfgName, UInt32 buildOption);
    public abstract virtual IVsTask BuildSolution(string bstrCfgName, UInt32 buildOption);
    public abstract virtual Array GetProjectFlavors(string bstrProjectFullPath);
    public abstract virtual void InitializeSolutionScopeEnumString();
    public abstract virtual void DisposeSolutionScopeEnumString();
    public abstract virtual void SolutionScopeNext(String& pbstrNext);
    public abstract virtual void SolutionScopeSkip(UInt32 celt);
    public abstract virtual void SolutionScopeReset();
}
[GuidAttribute("4313289C-3485-4489-961B-413386D8FF31")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.Internal.VisualStudio.Shell.Interop.IVsDeferredSolutionLoadService2 {
    public abstract virtual void InitializeSolutionScopeEnumStringEx(bool fIncludeExternalItems);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("A3384C87-154F-41E6-B5F8-364BAEB2B3FB")]
public interface Microsoft.Internal.VisualStudio.Shell.Interop.IVsDeferredSolutionLoadService3 {
    public abstract virtual void GetManagedIntellisenseBlob(string bstrProjectName, FILETIME[] pValidationTimeStamp, Array& pResult);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("23AF8C33-07FD-4542-B624-E9C2B1768666")]
public interface Microsoft.Internal.VisualStudio.Shell.Interop.IVsDelayAttributionServicePrivate {
    public abstract virtual UInt32 Set(string friendlyName);
    public abstract virtual void Clear(UInt32 cookie);
    public abstract virtual UInt32 Reset(string friendlyName, UInt32 cookie);
}
[GuidAttribute("6FA59274-C447-4F28-98D8-E7920CA4B6E4")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.Internal.VisualStudio.Shell.Interop.IVsDesignTimeBuild {
    public abstract virtual void Cancel();
}
[GuidAttribute("C2ECF72C-C9B2-4FE7-BEEB-9CCE1EF2C88F")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.Internal.VisualStudio.Shell.Interop.IVsDesignTimeBuildCallback {
    [DispIdAttribute("1610678272")]
public bool ShouldCallBackOnMainThread { get; }
    public abstract virtual bool get_ShouldCallBackOnMainThread();
    public abstract virtual void BuildCompleted(string pszProjectConfig, bool success, UInt32 dwResultSize, Byte[] pResultInfo);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("E7769BB0-F2EA-4365-BEC4-38D786981545")]
public interface Microsoft.Internal.VisualStudio.Shell.Interop.IVsDesignTimeBuildCallback2 {
    public abstract virtual void BuildCompleted(string pszProjectConfig, bool success, UInt32 dwResultSize, Byte[] pResultInfo);
}
[GuidAttribute("80D3DE2A-8C02-4C0A-AB5F-5E70B6EB333D")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.Internal.VisualStudio.Shell.Interop.IVsDesignTimeBuildGlobalPropertyOverrides {
    public abstract virtual void AddOverride(string pszName, string pszValue);
}
[GuidAttribute("65C1BB62-8852-41CA-9403-FEC4AA00CAC6")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.Internal.VisualStudio.Shell.Interop.IVsDesignTimeBuildGroup {
    public abstract virtual void EnsureAllBuildsComplete();
}
[GuidAttribute("0967989A-E2EE-496A-B920-4611C7CFE5BE")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.Internal.VisualStudio.Shell.Interop.IVsDesignTimeBuildManager {
    public abstract virtual IVsDesignTimeBuildGroup CreateBuildGroup(string pszDescription);
    public abstract virtual IVsDesignTimeBuild BuildIntellisenseAsync(string pszProject, string pszSolutionConfig, string pszProjectConfig, Guid buildId, IVsDesignTimeBuildCallback pOnComplete, IVsDesignTimeBuildGroup pGroup);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("CA29B2D3-EA1C-4DFE-B35E-3F4B005AA5C2")]
public interface Microsoft.Internal.VisualStudio.Shell.Interop.IVsDesignTimeBuildManager2 {
    public abstract virtual IVsDesignTimeBuildGroup CreateBuildGroup(string pszDescription);
    public abstract virtual IVsDesignTimeBuildGlobalPropertyOverrides CreateGlobalPropertyOverrides();
    public abstract virtual void BuildIntellisense(string pszProject, Guid guidProjectId, object pProjectShim, string pszProjectConfig, IVsDesignTimeBuildCallback2 pOnComplete);
    public abstract virtual IVsDesignTimeBuild BuildIntellisenseOverridesAsync(string pszProject, Guid guidProjectId, object pProjectShim, string pszSolutionConfig, string pszProjectConfig, Guid buildId, IVsDesignTimeBuildCallback2 pOnComplete, IVsDesignTimeBuildGroup pGroup, IVsDesignTimeBuildGlobalPropertyOverrides pOverrides, bool fCallBackOnMainThread);
}
[NullableContextAttribute("1")]
[GuidAttribute("D241D609-E21A-4EAE-9445-AC0420987419")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.Internal.VisualStudio.Shell.Interop.IVsDevDriveProjectPathUtilities {
    public bool IsDevDrivePathSuggested { get; public set; }
    public bool IsDevDriveAvailable { get; }
    public abstract virtual bool get_IsDevDrivePathSuggested();
    public abstract virtual void set_IsDevDrivePathSuggested(bool value);
    public abstract virtual bool get_IsDevDriveAvailable();
    [NullableContextAttribute("2")]
public abstract virtual string GetDevDriveProjectPath();
    public abstract virtual bool IsDevDrive(string filePath);
    public abstract virtual int GetDevDriveCount();
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("1F169E31-FC54-456C-BB85-987EA03DED0F")]
public interface Microsoft.Internal.VisualStudio.Shell.Interop.IVsDiagnosticNotificationService {
    public abstract virtual void RaiseNotification(Guid& identifier, string title, string description, string hyperlink);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("BD6B2145-6F2A-4B08-918C-561331D4C62D")]
public interface Microsoft.Internal.VisualStudio.Shell.Interop.IVsDialogService {
    public abstract virtual int InvokeDialog(VSNEWPROJECTDLGINFO dlgInfo, String& bstrLocation);
    public abstract virtual int SaveDefaultProjectPath(string bstrPath);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("90866B65-6B9A-4A46-BDC6-16A02046B6CC")]
public interface Microsoft.Internal.VisualStudio.Shell.Interop.IVsDialogService2 {
    public abstract virtual void CreateNewProject(VsNewProjectData newProjectData);
}
[GuidAttribute("B027ED4C-90D4-4329-A460-6C28426C117C")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.Internal.VisualStudio.Shell.Interop.IVsDialogService3 {
    public abstract virtual void InvokeDialogRemotable(VSNEWPROJECTDLGINFO dlgInfo, Guid projectId);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("F5F8D7BB-0954-41FD-AC27-DCF31E517EDB")]
public interface Microsoft.Internal.VisualStudio.Shell.Interop.IVsDisasterRecovery {
    public abstract virtual void AdviseDisasterRecoveryEvents(IVsDisasterRecoveryEvents pSink, UInt32& pdwCookie);
    public abstract virtual void UnadviseDisasterRecoveryEvents(UInt32 dwCookie);
}
[GuidAttribute("56532DF2-E531-46A4-B73A-AB6514BCCE77")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.Internal.VisualStudio.Shell.Interop.IVsDisasterRecoveryEvents {
    public abstract virtual void OnDisasterRecoveryShown();
    public abstract virtual void OnDisasterRecoveryClosed(bool result);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("F52E4A2B-99FE-4672-B5C5-F403ECAC8D04")]
public interface Microsoft.Internal.VisualStudio.Shell.Interop.IVsDisposable {
    public abstract virtual void Dispose();
}
[GuidAttribute("BBC5CE16-855F-4068-A3D2-DB91FEE30F67")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.Internal.VisualStudio.Shell.Interop.IVsDoNotLoadProjectsOperationsPrivate {
    public abstract virtual bool IsSolutionOpenedWithDoNotLoadProjectsSet();
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("BF846FAD-262A-44A5-B54E-FA1CD5E4AF79")]
public interface Microsoft.Internal.VisualStudio.Shell.Interop.IVsDotNetReflectionPrivate {
    public abstract virtual int GetSerializablePropertiesOfObject(object pDotNetObject, Array& psaSerializablePropertyNames);
    public abstract virtual int GetNumIndicesOfProperty(object pDotNetObject, string szPropertyName, Int32& pNumIndices);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("6405EFA0-B8AC-4E85-9919-932AD50115F4")]
public interface Microsoft.Internal.VisualStudio.Shell.Interop.IVsDotNetTypeInfoPrivate {
    public abstract virtual string get_ShortTypeName(object obj);
    public abstract virtual string get_FullTypeName(object obj);
    public abstract virtual string get_AssemblyQualifiedTypeName(object obj);
    public abstract virtual string get_AssemblyLocation(object obj);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("18EBBBCC-1357-4C33-9C7C-77B282CA2B6F")]
public interface Microsoft.Internal.VisualStudio.Shell.Interop.IVsDteBackChannel {
    public abstract virtual int CreateContextAttributesForWindow(Window pwindow, IVsUserContext pUserCtx, ContextAttributes& ppCtxAttrs);
    public abstract virtual int NotifyShellPropertyChanged(int propid, object var);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("179A98BF-60B3-445B-B10E-9F5E304FEDEA")]
public interface Microsoft.Internal.VisualStudio.Shell.Interop.IVsEnumerablePropertyBag {
    public Array Keys { get; }
    public abstract virtual object GetValue(string szName);
    public abstract virtual void SetValue(string szName, Object& pVarValue);
    public abstract virtual Array get_Keys();
}
[DefaultMemberAttribute("Item")]
[GuidAttribute("94900546-C09C-426C-8C30-FB7BB303BEA6")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.Internal.VisualStudio.Shell.Interop.IVsEnumMSBuildProjectImports {
    [DispIdAttribute("0")]
public IVsMSbuildProjectImport Item { get; }
    [DispIdAttribute("10")]
public int Count { get; }
    public abstract virtual IEnumerator GetEnumerator();
    public abstract virtual IVsMSbuildProjectImport get_Item(int index);
    public abstract virtual int get_Count();
}
[GuidAttribute("C0FFEE89-E35B-472A-A374-5A4C5C91970D")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.Internal.VisualStudio.Shell.Interop.IVsEnumProjectConfigurations {
    [DispIdAttribute("1610678274")]
public IVsProjectConfiguration Current { get; }
    public abstract virtual void Reset();
    public abstract virtual bool MoveNext();
    public abstract virtual IVsProjectConfiguration get_Current();
}
[GuidAttribute("D3409A06-1AB9-4CAB-9028-CE85675C2B44")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.Internal.VisualStudio.Shell.Interop.IVsEnumProjectInfo {
    [DispIdAttribute("1610678274")]
public IVsProjectInfo Current { get; }
    [DispIdAttribute("1610678275")]
public int ItemCount { get; }
    public abstract virtual void Reset();
    public abstract virtual bool MoveNext();
    public abstract virtual IVsProjectInfo get_Current();
    public abstract virtual int get_ItemCount();
}
[DefaultMemberAttribute("Item")]
[GuidAttribute("8513326C-C5D1-45E6-996E-F9F230A2BF3B")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.Internal.VisualStudio.Shell.Interop.IVsEnumSharedMSBuildFileUserInfo {
    [DispIdAttribute("0")]
public IVsSharedMSBuildFileUserInfo Item { get; }
    [DispIdAttribute("10")]
public int Count { get; }
    public abstract virtual IEnumerator GetEnumerator();
    public abstract virtual IVsSharedMSBuildFileUserInfo get_Item(int index);
    public abstract virtual int get_Count();
}
[DefaultMemberAttribute("Item")]
[InterfaceTypeAttribute("1")]
[GuidAttribute("49AE91E7-9468-4C95-8546-BF02AFCD5972")]
public interface Microsoft.Internal.VisualStudio.Shell.Interop.IVsEnumSynthesizedProjectTypes {
    [DispIdAttribute("0")]
public IVsSynthesizedProjectType Item { get; }
    [DispIdAttribute("10")]
public int Count { get; }
    public abstract virtual IEnumerator GetEnumerator();
    public abstract virtual IVsSynthesizedProjectType get_Item(int index);
    public abstract virtual int get_Count();
}
[DefaultMemberAttribute("Item")]
[InterfaceTypeAttribute("1")]
[GuidAttribute("9A4A7688-18CD-4196-A367-92BBF7359715")]
public interface Microsoft.Internal.VisualStudio.Shell.Interop.IVsEnumSynthesizedTemplateProviders {
    [DispIdAttribute("0")]
public IVsSynthesizedTemplateProvider Item { get; }
    [DispIdAttribute("10")]
public int Count { get; }
    public abstract virtual IEnumerator GetEnumerator();
    public abstract virtual IVsSynthesizedTemplateProvider get_Item(int index);
    public abstract virtual int get_Count();
}
[DefaultMemberAttribute("Item")]
[GuidAttribute("0356483B-B813-41E5-B0C9-B9CBE2D245C5")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.Internal.VisualStudio.Shell.Interop.IVsEnumTargetPlatforms {
    [DispIdAttribute("0")]
public IVsTargetPlatform Item { get; }
    [DispIdAttribute("10")]
public int Count { get; }
    public abstract virtual IEnumerator GetEnumerator();
    public abstract virtual IVsTargetPlatform get_Item(int index);
    public abstract virtual int get_Count();
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("B325805F-83AC-45AA-9B39-431F2E3E2CAD")]
public interface Microsoft.Internal.VisualStudio.Shell.Interop.IVsErrorItemPrivate {
    public bool IsVisible { get; }
    public abstract virtual bool get_IsVisible();
}
[GuidAttribute("6F294BF3-7C93-487E-9066-A5039D71ACE3")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.Internal.VisualStudio.Shell.Interop.IVsErrorList2 {
    public abstract virtual void ShowIfErrors(bool showErrorList);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("8763D96A-F468-4C09-A95C-E495F0A26C2E")]
public interface Microsoft.Internal.VisualStudio.Shell.Interop.IVsErrorListPrivate {
    [ComAliasNameAttribute("ErrorListFilterScope")]
public UInt32 FilterScope { get; public set; }
    public abstract virtual UInt32 get_FilterScope();
    public abstract virtual void set_FilterScope(UInt32 value);
}
[GuidAttribute("4F79C0AF-D286-4F6A-A9B0-DBA9BD104D08")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.Internal.VisualStudio.Shell.Interop.IVsErrorReporterService {
    public abstract virtual void ReportError(string pszErrorText);
}
[GuidAttribute("0838C140-33E6-40B9-8B9C-9AC7490BDBCA")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.Internal.VisualStudio.Shell.Interop.IVsEventListener {
    [ComAliasNameAttribute("Microsoft.Internal.VisualStudio.Shell.Interop.VsEventListenerPriority")]
[DispIdAttribute("1610678272")]
public int Priority { get; }
    public abstract virtual int get_Priority();
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("7C9111C8-1BAC-439A-B072-B490A617D12F")]
public interface Microsoft.Internal.VisualStudio.Shell.Interop.IVsExperimentationStatusService {
    public abstract virtual bool QueryCachedFlightStatus(string flightName);
    public abstract virtual IVsTask QueryFlightStatusAsync(string flightName);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("D2657620-5AEE-46A5-BAEC-BF5FF3DB545B")]
public interface Microsoft.Internal.VisualStudio.Shell.Interop.IVsExplicitProjectProperties {
    [DispIdAttribute("1610678272")]
public string ProjectName { get; }
    public abstract virtual string get_ProjectName();
}
[GuidAttribute("753E55C6-E779-4A7A-BCD1-FD87181D52C0")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.Internal.VisualStudio.Shell.Interop.IVsExtensionManagerPrivate {
    public abstract virtual int GetEnabledExtensionContentLocations(string szContentTypeName, UInt32 cContentLocations, String[] rgbstrContentLocations, String[] rgbstrUniqueExtensionStrings, UInt32& pcContentLocations);
    public abstract virtual int GetEnabledExtensionContentLocationsWithNames(string szContentTypeName, UInt32 cContentLocations, String[] rgbstrContentLocations, String[] rgbstrUniqueExtensionStrings, String[] rgbstrExtensionNames, UInt32& pcContentLocations);
    public abstract virtual int GetDisabledExtensionContentLocations(string szContentTypeName, UInt32 cContentLocations, String[] rgbstrContentLocations, String[] rgbstrUniqueExtensionStrings, UInt32& pcContentLocations);
    public abstract virtual int GetLastConfigurationChange(DateTime[] pTimestamp);
    public abstract virtual int LogAllInstalledExtensions();
    public abstract virtual int GetUniqueExtensionString(string szExtensionIdentifier, String& pbstrUniqueString);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("6B741746-E3C9-434A-9E20-6E330D88C7F6")]
public interface Microsoft.Internal.VisualStudio.Shell.Interop.IVsExtensionManagerPrivate2 {
    public abstract virtual void GetAssetProperties(string szAssetTypeName, Array& prgsaNames, Array& prgsaVersions, Array& prgsaAuthors, Array& prgsaExtensionIDs);
    public abstract virtual void GetExtensionProperties(Array& prgsaNames, Array& prgsaVersions, Array& prgsaAuthors, Array& prgsaContentLocations, Array& prgsaExtensionIDs);
    public abstract virtual ulong GetLastWriteTime(string szContentTypeName);
}
[GuidAttribute("80DA8762-67CF-4343-9C11-0E2F90623847")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.Internal.VisualStudio.Shell.Interop.IVsExtensionManagerPrivate3 {
    public abstract virtual void DisableIncompatibleExtensions();
    public abstract virtual void InitializeCompatibilityList();
}
[GuidAttribute("391CF3F6-7E01-43EE-A33E-CD7202212117")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.Internal.VisualStudio.Shell.Interop.IVsExtensionManagerServicePrivate {
}
[GuidAttribute("78789DC6-FFBE-4E26-BE7E-B4F64BB80F0B")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.Internal.VisualStudio.Shell.Interop.IVsFastFetchCommands {
    public abstract virtual IVsFastFetchCommandsResult GetCommandEnumerator(UInt32 searchCandidateProcessingFlags, UInt32 scopeCount, ScopeLocation2[] scopeLocations);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("61A675A4-5FC0-453B-B509-31625242A139")]
public interface Microsoft.Internal.VisualStudio.Shell.Interop.IVsFastFetchCommandsResult {
    [DispIdAttribute("1610678272")]
public int Count { get; }
    public abstract virtual int get_Count();
    public abstract virtual void GetCommands(int offset, int Count, CommandMetadata[] commandsInfo);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("E4FFA42F-D5D6-47DD-82B3-0642A1655595")]
public interface Microsoft.Internal.VisualStudio.Shell.Interop.IVsFaultEvent {
    public Array AllPropertyNames { get; }
    public abstract virtual string GetName();
    public abstract virtual object GetProperty(string szPropertyName);
    public abstract virtual void SetProperty(string szPropertyName, object varValue);
    public abstract virtual void SetBoolProperty(string szPropertyName, bool value);
    public abstract virtual void SetDoubleProperty(string szPropertyName, double value);
    public abstract virtual void SetIntProperty(string szPropertyName, int value);
    public abstract virtual void SetLongProperty(string szPropertyName, long value);
    public abstract virtual void SetShortProperty(string szPropertyName, short value);
    public abstract virtual void SetStringProperty(string szPropertyName, string szValue);
    public abstract virtual bool ContainsProperty(string szPropertyName);
    public abstract virtual Array get_AllPropertyNames();
    public abstract virtual void SetOptOutFriendlyFlag(bool bOptOutFriendly);
    public abstract virtual void AddPropertyBag(IVsTelemetryPropertyBag pPropertyBag);
    public abstract virtual void RemovePropertyBag(IVsTelemetryPropertyBag pPropertyBag);
    public abstract virtual void SetPiiProperty(string szPropertyName, object varValue);
    public abstract virtual void SetIntPiiProperty(string szPropertyName, int varValue);
    public abstract virtual void SetLongPiiProperty(string szPropertyName, long varValue);
    public abstract virtual void SetDoublePiiProperty(string szPropertyName, double varValue);
    public abstract virtual void SetStringPiiProperty(string szPropertyName, string varValue);
    public abstract virtual void AddErrorInformation(string errorInfo);
    public abstract virtual void AddProcessDump(int pidProcessToDump);
    public abstract virtual void AddFile(string fileToAdd);
    public abstract virtual string GetBucketParameter(int nBucket);
    public abstract virtual void SetBucketParameter(int nBucket, string strValue);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("D2406877-2C4F-426A-8A04-4FE3E896CF18")]
public interface Microsoft.Internal.VisualStudio.Shell.Interop.IVsFaultEventCallBack {
    public abstract virtual int ExecuteCallback(IVsFaultEvent punkFaultEventNative);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("EA82C359-EE88-4132-B37E-8E463F2B9B82")]
public interface Microsoft.Internal.VisualStudio.Shell.Interop.IVsFeatureFlagEvents {
    public abstract virtual void OnFeatureFlagStateChanged(string featureFlagName, bool value);
}
[GuidAttribute("AD44B8B9-B646-4B18-8847-150695AEC480")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.Internal.VisualStudio.Shell.Interop.IVsFeatureFlags {
    public abstract virtual bool IsFeatureEnabled(string featureName, bool defaultValue);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("A09F35DE-4FCF-48A3-A79A-552852CFF1C0")]
public interface Microsoft.Internal.VisualStudio.Shell.Interop.IVsFeatureFlags2 {
    public abstract virtual Array GetAllFeatureFlagsMetadata();
    public abstract virtual void EnableFeatureFlag(string featureFlagName, bool value);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("4195C419-75AF-4EDF-8DB5-D63E0632FA09")]
public interface Microsoft.Internal.VisualStudio.Shell.Interop.IVsFeatureFlags3 {
    public abstract virtual bool IsFeatureEnabledWithoutCustomization(string featureFlagName, bool currentValue);
}
[NullableContextAttribute("1")]
[InterfaceTypeAttribute("1")]
[GuidAttribute("94DED88A-A10E-4923-9B1A-AE796210EFFF")]
public interface Microsoft.Internal.VisualStudio.Shell.Interop.IVsFeatureFlags4 {
    public abstract virtual Array GetAllFeatureFlagsMetadata2(bool previewFeaturesOnly);
}
[NullableContextAttribute("1")]
[GuidAttribute("C177BE7B-42F2-49BE-884A-50502AE12BAD")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.Internal.VisualStudio.Shell.Interop.IVsFeatureFlags5 {
    public abstract virtual bool IsFeatureVisible(string channel, FeatureFlagMetadata2 featureFlagInfo);
    public abstract virtual bool TryGetFeatureFlagMetadata(string featureFlagName, FeatureFlagMetadata2& featureFlagMetadata2);
    public abstract virtual bool IsFeatureVisibleByName(string channel, string featureFlagName);
}
[GuidAttribute("F792F727-33ED-487F-974F-F527EE92068F")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.Internal.VisualStudio.Shell.Interop.IVsFeatureFlagStateChanged {
    public abstract virtual UInt32 AdviseFeatureFlagStateChangedEvent(IVsFeatureFlagEvents eventSink, string featureFlagName);
    public abstract virtual void UnadviseFeatureFlagStateChangedEvent(UInt32 cookie);
}
[GuidAttribute("07980EA1-9516-4C7C-93AD-8DBF33842CDE")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.Internal.VisualStudio.Shell.Interop.IVsFileChangeExPrivate {
    public abstract virtual void IgnoreDir(string pszDir, bool fIgnore);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("0AE584C5-A83D-40F6-84F7-4EFAA9973AB7")]
public interface Microsoft.Internal.VisualStudio.Shell.Interop.IVsFileChangeExPrivate2 {
    public abstract virtual IVsTask GetChangedFilesAsync();
}
[GuidAttribute("4D36D37F-776F-46C1-BDF6-96779D60DA9D")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.Internal.VisualStudio.Shell.Interop.IVsFilteredSearchHierarchyPrivate {
    public abstract virtual bool IsSearchFiltered(UInt32 itemId);
}
[GuidAttribute("7FE226CA-CF5D-4C86-8041-2CC74159CDC2")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.Internal.VisualStudio.Shell.Interop.IVsFingerprinting {
    [DispIdAttribute("1610678272")]
public bool ShouldWriteData { get; }
    public abstract virtual bool get_ShouldWriteData();
    public abstract virtual void WriteData(VsFpDataID dataID, UInt32 nDataCount, VsFpDataItem[] pFpData);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("1550C254-D883-4BEF-B554-EFDB1E329F19")]
public interface Microsoft.Internal.VisualStudio.Shell.Interop.IVsFrameworkRetargetingDlgDataProviderPrivate {
    public abstract virtual int GetSourceProjectName(Guid projectGuid, String& pbstrProjectName);
    public abstract virtual int GetSourceProjectType(Guid projectGuid, String& pbstrProjectType);
    public abstract virtual int GetSourceTargetFramework(Guid projectGuid, String& pbstrTargetFrameworkMoniker);
    public abstract virtual int GetDestinationTargetFramework(Guid projectGuid, String& pbstrTargetFrameworkMoniker);
    public abstract virtual int GetFxDownloadUrl(Guid projectGuid, String& pbstrFxDownloadUrl);
    public abstract virtual int SetSourceProjectName(Guid projectGuid, string bstrProjectName);
    public abstract virtual int SetSourceProjectType(Guid projectGuid, string bstrProjectType);
    public abstract virtual int SetSourceTargetFramework(Guid projectGuid, string bstrTargetFrameworkMoniker);
    public abstract virtual int SetDestinationTargetFramework(Guid projectGuid, string bstrTargetFrameworkMoniker);
    public abstract virtual int SetFxDownloadUrl(Guid projectGuid);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("9ACC491D-79C6-4C08-BE4A-D5F443B1C8BD")]
public interface Microsoft.Internal.VisualStudio.Shell.Interop.IVsGcService {
    public abstract virtual void RequestFullGCAndCleanup();
}
[GuidAttribute("9A3CC1BF-ED7E-481D-9BB0-ED61F8FE00C6")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.Internal.VisualStudio.Shell.Interop.IVsGcService2 {
    public abstract virtual void RequestFullGCAndCleanup();
    public abstract virtual void RequestFullGCAndCleanupEx(string reason);
    public abstract virtual long RunFullGCAndCleanup(int maxIterations, string reason);
    public abstract virtual long RunFullGCAndCleanupWithCustomThreshold(int maxIterations, int pctHeapChangeThreshold, string reason);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("9AF6987E-4A24-425B-8D02-29A60BDC1DFC")]
public interface Microsoft.Internal.VisualStudio.Shell.Interop.IVsGlobalSearchUIPrivate {
    public object ResultsListPopup { get; }
    public abstract virtual int TranslateAccelerator(MSG& msg);
    public abstract virtual void Activate(UInt32 howActivated);
    public abstract virtual void ActivateBack(UInt32 howActivated);
    public abstract virtual object get_ResultsListPopup();
}
[GuidAttribute("6C20174F-BFF9-451F-A28C-E8D983EEBC35")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.Internal.VisualStudio.Shell.Interop.IVsGroupItemsEnumerator {
    public abstract virtual int GetNextGroupItem(GroupItemData[] pGroupItemData, Int32& pfAreMoreItems);
    public abstract virtual int get_GroupCommandTableId(CommandTableId[] pGroupId);
    public abstract virtual int Init(CommandTableId GroupId);
}
[GuidAttribute("1E114AA4-CBA6-4E81-A2C4-2ED59FB20E87")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.Internal.VisualStudio.Shell.Interop.IVsGuidParserPrivate {
    public abstract virtual int TryParseGuid(object guidObject, Guid& pGuid);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("6864cbbf-e722-430f-a6c6-6bde5f98e3b5")]
public interface Microsoft.Internal.VisualStudio.Shell.Interop.IVsGuidTable {
    public abstract virtual UInt32 GetIDFromGuid(Guid& modreq(System.Runtime.InteropServices.InAttribute) guid);
    public abstract virtual Guid GetGuidFromID(UInt32 dwId);
}
[GuidAttribute("6A638140-845B-48F4-A0E7-EEDFE86E8F34")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.Internal.VisualStudio.Shell.Interop.IVsHelpPrivate2 {
    public abstract virtual int GetHelpLanguages(Array& pLanguages, UInt32& pVsHLDState, int fUserInitiated);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("63343EFC-E66A-4333-94DB-BC2B99C288EC")]
public interface Microsoft.Internal.VisualStudio.Shell.Interop.IVsHelpUserSettings2 {
    public abstract virtual int GetProperty(UInt32 propid, Object& pvarSetting, UInt32& pVSHGPState, int fUserInitiated);
}
[GuidAttribute("AC6334CD-A87D-4162-851A-49DE8FCFC32B")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.Internal.VisualStudio.Shell.Interop.IVsHostExecutionContextEvents {
    public abstract virtual void OnSetHostExecutionContext();
    public abstract virtual void OnRevert();
}
[NullableContextAttribute("1")]
[GuidAttribute("AF9B732F-9E4B-4C55-9DB4-81E45B16E132")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.Internal.VisualStudio.Shell.Interop.IVsHostExecutionContextService {
    public abstract virtual void AdviseEvents(IVsHostExecutionContextEvents pListener);
    public abstract virtual void UnadviseEvents();
}
[GuidAttribute("5606E3BF-2A9C-4F50-8A5D-81F23EB78FE5")]
[InterfaceTypeAttribute("1")]
[ExcludeFromProxyBuildAttribute]
public interface Microsoft.Internal.VisualStudio.Shell.Interop.IVsHotReloadProcessStartNotification {
    public abstract virtual int OnProcessStarted(int processId, ulong startTime);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("00A74A3E-DE63-40B2-99C9-307078D72568")]
public interface Microsoft.Internal.VisualStudio.Shell.Interop.IVsIconMappingsPrivate {
    public abstract virtual void AddIconMapping(Guid& iconGuid, UInt32 iconId, Guid& monikerGuid, UInt32 monikerId);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("C34EF5B4-5B5B-49F8-B38F-A47A15AD6928")]
public interface Microsoft.Internal.VisualStudio.Shell.Interop.IVsImageServicePrivate {
    public abstract virtual void ConvertRGBtoHSL(byte r, byte g, byte b, Double& h, Double& s, Double& l);
    public abstract virtual void ConvertHSLtoRGB(double h, double s, double l, Byte& r, Byte& g, Byte& b);
    public abstract virtual bool IsOptOutPixelSet(IntPtr bits, int width, int height, bool isTopDownBitmap);
    public abstract virtual void ThemePixel(UInt32& pixel, double backgroundHue, double backgroundSaturation, double backgroundLuminosity);
    public abstract virtual IImageHandle AddMemorySectionBitmap(IVsUIMemorySectionBitmapPrivate section);
    public abstract virtual void ParseIconMappings(IStream stream, IVsIconMappingsPrivate mappings);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("82389263-6DE1-415D-BE5C-9D5A81E16811")]
public interface Microsoft.Internal.VisualStudio.Shell.Interop.IVsInstallBundleInfo {
    [DispIdAttribute("1610678272")]
public string Moniker { get; }
    [DispIdAttribute("1610678273")]
public string DisplayName { get; }
    [DispIdAttribute("1610678274")]
public string description { get; }
    [DispIdAttribute("1610678275")]
public object SetupParameters { get; }
    [DispIdAttribute("1610678276")]
[ComAliasNameAttribute("Microsoft.Internal.VisualStudio.Shell.Interop.VsInstallBundleState")]
public VsInstallBundleState Status { get; }
    public abstract virtual string get_Moniker();
    public abstract virtual string get_DisplayName();
    public abstract virtual string get_description();
    public abstract virtual object get_SetupParameters();
    public abstract virtual VsInstallBundleState get_Status();
    public abstract virtual string GetProperty(string szPropName);
}
[GuidAttribute("618CA430-B1C6-4E51-943F-94D34DF70C2B")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.Internal.VisualStudio.Shell.Interop.IVsInternalOleInPlaceFrame {
    public abstract virtual int GetActiveObject(IOleInPlaceActiveObject& ppObject);
    public abstract virtual int Resize(int x, int y, int cx, int cy);
}
[GuidAttribute("4147429E-39F2-4BE0-BD9D-21BA15E8F84F")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.Internal.VisualStudio.Shell.Interop.IVsInternalTemplate {
    public abstract virtual int GetProperty(UInt32 propid, Object& pvar);
    public abstract virtual int EnsureTemplateExtracted();
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("E18C5AC1-4C34-4907-8D51-2AE4678F6839")]
public interface Microsoft.Internal.VisualStudio.Shell.Interop.IVsInternalTemplate2 {
    public abstract virtual void GetTags(Array& ppsaLanguageTags, Array& ppsaPlatformTags, Array& ppsaProjectTypeTags);
}
[NullableContextAttribute("1")]
[GuidAttribute("08e9e078-e979-495b-a62e-7d276de5721a")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.Internal.VisualStudio.Shell.Interop.IVsInternalTemplate3 {
    public abstract virtual IVsTask GetPropertyAsync(UInt32 propid);
}
[GuidAttribute("94AC4FF9-35C1-4E5B-9EA4-CD1F23E7F65B")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.Internal.VisualStudio.Shell.Interop.IVsInternalTemplateCollection {
    public abstract virtual int Item(int index, IVsInternalTemplate& ppItem);
    public abstract virtual int Count(Int32& pCount);
}
[GuidAttribute("7D7C1C3C-6F86-4D0A-A998-00A6477B5EE7")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.Internal.VisualStudio.Shell.Interop.IVsInternalTemplateTreeNode {
    public abstract virtual int Name(String& pbstr);
    public abstract virtual int IsPseudoFolder(Boolean& pVal);
    public abstract virtual int ChildNodes(IVsInternalTemplateTreeNodeCollection& ppChildNodes);
    public abstract virtual int GetTemplates(UInt32 fx, IVsInternalTemplateCollection& ppTemplates);
}
[GuidAttribute("BFBDEB37-D1B6-45BC-A33D-048F83DC0BCC")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.Internal.VisualStudio.Shell.Interop.IVsInternalTemplateTreeNodeCollection {
    public abstract virtual int Item(int index, IVsInternalTemplateTreeNode& ppItem);
    public abstract virtual int Count(Int32& pCount);
}
[NullableContextAttribute("1")]
[GuidAttribute("c9deae93-734b-4838-84f7-3da5dc63a0fe")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.Internal.VisualStudio.Shell.Interop.IVsJumpListHelper {
    public abstract virtual IVsTask RemoveJumpListItemsWithRetriesAsync(IVsJumpListPrimitives primitives, int retryIntervalMilliseconds);
}
[GuidAttribute("8076160b-310d-45f0-ab79-e621aaee9b5b")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.Internal.VisualStudio.Shell.Interop.IVsJumpListPrimitives {
    public abstract virtual bool TryRemoveJumpListItems();
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("42AECE6B-F19D-405B-BD56-D97A100EE0FB")]
public interface Microsoft.Internal.VisualStudio.Shell.Interop.IVsLegacyProjectSystemBackgroundLoadPrivate {
    public abstract virtual void OpenProject(VsProjectInfo2[] pProject, int cLoadWarningsCount, VsProjectLoadWarning[] rgLoadWarnings);
    public abstract virtual void AfterAggregateProjectInit(Guid& guidProjectId);
    public abstract virtual void Preload(Guid& guidProjectId, Boolean& pCacheInitialized);
    public abstract virtual void InitCompilerCache(Guid& guidProjectId, bool fSuccess, UInt32 dwResultSize, Byte[] pResultInfo);
}
[GuidAttribute("E5FE8DBD-0C34-4C2F-B9C8-A340E4537715")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.Internal.VisualStudio.Shell.Interop.IVsLegacyProjectSystemBackgroundLoadPrivate157 {
    public abstract virtual void OpenProject(VsProjectOpen[] pProject, int cLoadWarningsCount, VsProjectLoadWarning157[] rgLoadWarnings);
    public abstract virtual void AfterAggregateProjectInit(Guid& guidProjectId);
    public abstract virtual void Preload(Guid& guidProjectId, Boolean& pCacheInitialized);
    public abstract virtual void BuildNativeModel(Guid& guidProjectId, VsProjectFileSection[] pFileSection);
    public abstract virtual void InitCompilerCache(Guid& guidProjectId, bool fSuccess, UInt32 dwResultSize, Byte[] pResultInfo);
}
[NullableContextAttribute("1")]
[GuidAttribute("0AD105F1-06FB-474E-9751-21718D89E469")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.Internal.VisualStudio.Shell.Interop.IVsLegacyProjectSystemBackgroundLoadPrivate17 {
    public abstract virtual void OpenProject(VsProjectOpen2[] pProject, int cLoadWarningsCount, VsProjectLoadWarning157[] rgLoadWarnings);
    public abstract virtual void AfterAggregateProjectInit(Guid& guidProjectId);
    public abstract virtual void Preload(Guid& guidProjectId, Boolean& pCacheInitialized);
    public abstract virtual void BuildNativeModel(Guid& guidProjectId, VsProjectFileSection[] pFileSection);
    public abstract virtual void InitCompilerCache(Guid& guidProjectId, bool fSuccess, UInt32 dwResultSize, Byte[] pResultInfo);
}
[GuidAttribute("FF34B259-82EF-496E-AB96-76AF8A98C64D")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.Internal.VisualStudio.Shell.Interop.IVsLegacyProjectSystemDiagnostic {
    public abstract virtual void GetDTBBBuildInfo(IVsBatchedInitializationPrivateCallback157& pOnCompleteCallback, Guid& pBuildId);
    public abstract virtual void DoInprocDTBuild(UInt32& pResultHr, IStream& ppStream);
}
[GuidAttribute("1A0D277C-D234-4F27-A892-00F0DF560011")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.Internal.VisualStudio.Shell.Interop.IVsLegacyProjectSystemHelperNativeSite158 {
    public abstract virtual void OnBeginBatchOperation();
    public abstract virtual void OnEndBatchOperation();
}
[GuidAttribute("27E11356-5A6F-445A-9AA0-424F58C704DB")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.Internal.VisualStudio.Shell.Interop.IVsLegacyProjectSystemHelperPrivate {
    public abstract virtual void StartInitializationDT(string pszProject, string pszProjectConfig, IVsBatchedInitializationPrivateCallback pOnComplete, Guid buildId);
    public abstract virtual void RegisterProjectReady(Guid projectGuid, string pszProject);
    public abstract virtual void EnsureAllCompleted();
    public abstract virtual void GetProjectLoadInfo(string pszProject, Guid& pProjectGuid, String& pbstrProjectActiveCfg);
}
[GuidAttribute("D15B0256-D2E0-4700-8C79-EA9FFD5AB41D")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.Internal.VisualStudio.Shell.Interop.IVsLegacyProjectSystemHelperPrivate157 {
    public abstract virtual void StartInitializationDT(string pszProject, string pszProjectConfig, IVsBatchedInitializationPrivateCallback157 pCallback, Guid buildId);
    public abstract virtual void RegisterProjectReady(Guid projectGuid, string pszProject);
    public abstract virtual void EnsureAllCompleted();
    public abstract virtual void GetProjectLoadInfo(string pszProject, Guid& pProjectGuid, String& pbstrProjectActiveCfg);
    public abstract virtual void GetPropertyValues(object pProjectShim, int cEvaluatedProps, String[] rgEvaluatedPropNames, String[] rgEvaluatedPropValues, int cUnEvaluatedProps, String[] rgUnEvaluatedPropNames, String[] rgUnEvaluatedPropValues);
    public abstract virtual void GetFileSection(object pProjectShim, VsProjectFileSection[] rgFileSectionData);
    public abstract virtual string NormalizePath(string pszProject);
}
[GuidAttribute("D7E9D398-67E0-4096-9A4A-AEE4F61E7A33")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.Internal.VisualStudio.Shell.Interop.IVsLegacyProjectSystemHelperPrivate158 {
    public abstract virtual void RegisterNativeSite(IVsLegacyProjectSystemHelperNativeSite158 pNativeSite);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("ECBF4DB1-8765-4880-A05F-98AC21BDA875")]
public interface Microsoft.Internal.VisualStudio.Shell.Interop.IVsLegacyProjectSystemHelperPrivate16 {
    public abstract virtual void StartInitializationDTWithShim(string pszProject, object pProjectShim, string pszProjectConfig, IVsBatchedInitializationPrivateCallback16 pCallback, Guid buildId);
}
[GuidAttribute("D9B1A979-9627-4B13-AB34-1140B1A4C5FE")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.Internal.VisualStudio.Shell.Interop.IVsLegacyProjectSystemHelperPrivate160 {
    public abstract virtual void StartBuildProject(int projectId, string pszFullPath, string pszTargetName, int fRealBuild, object callback);
    public abstract virtual void RegisterHostFeedbackLogger(int projectId, int verbosity, object hostFeedbackObject);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("8E284065-DF24-4FDB-8665-8A07233AE75A")]
public interface Microsoft.Internal.VisualStudio.Shell.Interop.IVsLegacyProjectSystemPrefetchPrivate {
    public abstract virtual void InitPrefetch(string szSolutionConfig, int cProjects, VsProjectInfo1[] rgProjects, IVsLegacyProjectSystemBackgroundLoadPrivate& ppBackgroundStep);
    public abstract virtual void InitAggregatedProject(Guid& guidProjectId, string bstrFlavorGuids);
    public abstract virtual void FinalizeProject(Guid& guidProjectId, Object& ppHierarchy);
    public abstract virtual void PreInitLanguageService(Guid& guidProjectId);
    public abstract virtual void EndPrefetch(int cProjects, VsProjectInfo3[] rgPrefetchedProjects);
    public abstract virtual void ClearPrefetch();
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("9F686331-FFA7-4151-BCB7-B63A8E883AEC")]
public interface Microsoft.Internal.VisualStudio.Shell.Interop.IVsLegacyProjectSystemPrefetchPrivate157 {
    public abstract virtual void InitPrefetch(string szSolutionConfig, int cProjects, VsProjectInit[] rgProjects, IVsLegacyProjectSystemBackgroundLoadPrivate157& ppBackgroundStep);
    public abstract virtual void InitAggregatedProject(Guid& guidProjectId, string bstrFlavorGuids);
    public abstract virtual void UICreateProjectRootObjects(Guid& guidProjectId);
    public abstract virtual void FinalizeProject(Guid& guidProjectId, Object& ppHierarchy);
    public abstract virtual void PreInitLanguageService(Guid& guidProjectId);
    public abstract virtual void EndPrefetch(int cProjects, VsProjectEndPrefetch[] rgPrefetchedProjects);
    public abstract virtual void ClearPrefetch();
}
[NullableContextAttribute("1")]
[InterfaceTypeAttribute("1")]
[GuidAttribute("367E580C-04EF-487C-BE9C-E709A7F8D7E7")]
public interface Microsoft.Internal.VisualStudio.Shell.Interop.IVsLegacyProjectSystemPrefetchPrivate17 {
    public abstract virtual void InitPrefetch(string szSolutionConfig, int cProjects, VsProjectInit[] rgProjects, IVsLegacyProjectSystemBackgroundLoadPrivate17& ppBackgroundStep);
    public abstract virtual void InitAggregatedProject(Guid& guidProjectId, string bstrFlavorGuids);
    public abstract virtual void UICreateProjectRootObjects(Guid& guidProjectId);
    public abstract virtual void FinalizeProject(Guid& guidProjectId, Object& ppHierarchy);
    public abstract virtual void PreInitLanguageService(Guid& guidProjectId);
    public abstract virtual void EndPrefetch(int cProjects, VsProjectEndPrefetch[] rgPrefetchedProjects);
    public abstract virtual void ClearPrefetch();
}
[GuidAttribute("3E22A2AD-5790-41BA-B902-65E088E1CCFC")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.Internal.VisualStudio.Shell.Interop.IVsLightWeightTelemetryServicePrivate {
    public abstract virtual int GetUniqueID();
    public abstract virtual int GetGlobalCategory(string categoryName);
    public abstract virtual void LogCategoryStart(int categoryId, string categoryName);
    public abstract virtual void LogNestedCategoryStart(int categoryId, int parentCategoryId, string categoryName);
    public abstract virtual void LogCategoryEnd(int categoryId);
    public abstract virtual void LogCorrelatedEvent(int categoryId, int eventCorrelationId, string key);
    public abstract virtual void LogCorrelatedEventString(int categoryId, int eventCorrelationId, string key, string value, bool isPii);
    public abstract virtual void LogCorrelatedEventLong(int categoryId, int eventCorrelationId, string key, long value, bool isPii);
    public abstract virtual void LogCorrelatedEventBool(int categoryId, int eventCorrelationId, string key, bool value);
    public abstract virtual void LogCorrelatedEventInt(int categoryId, int eventCorrelationId, string key, int value, bool isPii);
    public abstract virtual void LogCorrelatedEventStringArray(int categoryId, int eventCorrelationId, string key, int cKeyValuePairs, String[] keys, String[] values, bool containsPii);
    public abstract virtual void LogEvent(int categoryId, string key);
    public abstract virtual void LogEventString(int categoryId, string key, string value, bool isPii);
    public abstract virtual void LogEventLong(int categoryId, string key, long value, bool isPii);
    public abstract virtual void LogEventBool(int categoryId, string key, bool value);
    public abstract virtual void LogEventInt(int categoryId, string key, int value, bool isPii);
    public abstract virtual void LogEventStringArray(int categoryId, string key, int cKeyValuePairs, String[] keys, String[] values, bool containsPii);
    public abstract virtual void Flush();
    public abstract virtual string GetProviderProperty(string propertyName);
}
[GuidAttribute("871094E3-49A5-43F7-8D9F-6990206E69BE")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.Internal.VisualStudio.Shell.Interop.IVsMainThreadBlockageInfoService {
    public abstract virtual int GetBlockingThreadId();
    public abstract virtual bool IsThreadBlockingMainThread(int threadId);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("DBFB17DB-D2A7-4C74-96BB-666AF8AB9E4B")]
public interface Microsoft.Internal.VisualStudio.Shell.Interop.IVsMainThreadConfiguration {
    public abstract virtual void InstallSynchronizationContext();
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("7E6B77AD-5886-4869-8A73-D2BC79472C54")]
public interface Microsoft.Internal.VisualStudio.Shell.Interop.IVsManagedObjectAggregatorPrivate {
    public abstract virtual int CreateAggregatedObject(object pOuterUnknown, string assemblyName, string typeName, IntPtr& pAggregatedObject);
    public abstract virtual int CreateAggregatedObjectFrom(object pOuterUnknown, string assemblyFile, string typeName, IntPtr& pAggregatedObject);
}
[NullableContextAttribute("1")]
[GuidAttribute("dca58be7-e770-4cd7-b94b-9b568be0756a")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.Internal.VisualStudio.Shell.Interop.IVsManagedRunningDocumentTable {
    public bool IsAutosaveEnabled { get; public set; }
    public abstract virtual void SaveDocuments(UInt32 saveOpts, IVsHierarchy hierarchy, UInt32 itemid, UInt32 docCookie, IVsSavePrimitives primitives);
    public abstract virtual IVsTask SaveDocumentsAsync(UInt32 saveOpts, IVsHierarchy hierarchy, UInt32 itemid, UInt32 docCookie, IVsSavePrimitives primitives, IVsProgress progress);
    [NullableContextAttribute("2")]
public abstract virtual void NotifyOnBeforeSave(UInt32 cookie, UInt32 flags, IVsTask saveTask);
    public abstract virtual void NotifyOnAfterSave(UInt32 cookie, UInt32 flags);
    public abstract virtual void AdviseRunningDocTableEvents(UInt32 cookie, IVsRunningDocTableEvents sink);
    public abstract virtual void UnadviseRunningDocTableEvents(UInt32 cookie);
    public abstract virtual object GetAsyncSaveState(IVsProvideAsyncSaveState provider);
    public abstract virtual void UpdateAsyncSaveState(IVsProvideAsyncSaveState provider, object saveState);
    public abstract virtual void PromptSaveSpecificItems(int count, VSSAVETREEITEM[] items, bool addToRoot, IVsSavePrimitives primitives);
    public abstract virtual IVsTask PromptSaveSpecificItemsAsync(int count, VSSAVETREEITEM[] items, bool addToRoot, IVsSavePrimitives primitives, IVsProgress progress);
    public abstract virtual bool get_IsAutosaveEnabled();
    public abstract virtual void set_IsAutosaveEnabled(bool value);
    [ObsoleteAttribute("Use IVsArtificialDelay.DelayAsync instead", "True")]
public abstract virtual IVsTask DelayAsync(UInt32 delayType);
    public abstract virtual bool IsDocumentBeingSaved(string moniker);
}
[NullableContextAttribute("1")]
[GuidAttribute("b32b4c94-71d9-4a19-9bef-8b3e6dfc8dc5")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.Internal.VisualStudio.Shell.Interop.IVsManagedShellService {
    public abstract virtual int SaveDocDataToFile(VSSAVEFLAGS flags, object persistFile, string untitledPath, IVsSavePrimitives primitives, String& newDocumentName, Boolean& canceled);
    public abstract virtual IVsTask SaveDocDataToFileAsync(VSSAVEFLAGS flags, object persistFile, string untitledPath, IVsSavePrimitives primitives, IVsProgress progress);
}
[GuidAttribute("007CA446-8571-4733-B4AD-52CB9F9E1F48")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.Internal.VisualStudio.Shell.Interop.IVsMenuEventsServiceHelperPrivate {
    public abstract virtual void NotifyOnBeforeSpecificMenuDisplayed(Guid& pguidCmdGroup, UInt32 dwCmdId);
    public abstract virtual void NotifyOnBeforeMenuDisplayed(IVsUIDataSource pDataSource);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("57C5F049-C185-4C79-A393-E1FEB432A520")]
public interface Microsoft.Internal.VisualStudio.Shell.Interop.IVsMenuGroupsEnumerator {
    public abstract virtual int GetNextMenuGroup(MenuGroupData[] pMenuGroupData, Int32& pfAreMoreItems);
    public abstract virtual int get_MenuCommandTableId(CommandTableId[] pMenuId);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("13FAD76D-6BCA-440E-A69E-B5E57DC17BFD")]
public interface Microsoft.Internal.VisualStudio.Shell.Interop.IVsMenuItemsEnumerator {
    public abstract virtual int GetNextGroupItem(GroupItemData[] pGroupItemData, Int32& pfAreMoreItems);
    public abstract virtual int GetNextGroupItemAndMenuGroup(GroupItemData[] pGroupItemData, MenuGroupData[] pMenuGroupData, Int32& pfGroupChanged, Int32& pfAreMoreItems);
    public abstract virtual int get_MenuCommandTableId(CommandTableId[] pMenuId);
    public abstract virtual int get_GroupCommandTableId(CommandTableId[] pGroupId);
    public abstract virtual int Init(CommandTableId GroupId);
}
[GuidAttribute("DDB6BC47-A898-412B-B9B8-1B79C379836E")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.Internal.VisualStudio.Shell.Interop.IVsMonitorSelectionExPrivate {
    public abstract virtual int RegisterSelCtx(IVsTrackSelectionEx pVsSelCtx);
    public abstract virtual int NotifySelCtxChange(IVsTrackSelectionEx pVsSelCtx);
    public abstract virtual int NotifySelElemChange(IVsTrackSelectionEx pVsSelCtx, UInt32 elementid);
    public abstract virtual int RevokeSelCtx(IVsTrackSelectionEx pVsSelCtx);
    public abstract virtual int IsHierarchyCurrent(IVsTrackSelectionEx pVsSelCtx, Int32& pfCurrent);
    [ObsoleteAttribute("This method is deprecated and will fail. There is no replacement API as it was intended to support a feature that was never implemented.")]
public abstract virtual int GetCmdUICtxs(UInt32[] pContexts, UInt32 uNumContextsAllocated, UInt32& puNumContextsAvailable);
    [ObsoleteAttribute("This method is deprecated and will fail. UI context changes should be done via IVsUIContextManager.SetUIContextState.")]
public abstract virtual int NotifyCmdUICtxChange(UInt32 contextId, int fActive);
    [ObsoleteAttribute("This method is deprecated and will fail. To determine if a UI context is active call IVsUIContextManager.GetUIContextState.")]
public abstract virtual int IsCmdUICtxActiveLocally(UInt32 contextId, Int32& pfActive);
    public abstract virtual int GetSelElemCounts(UInt32& puNumDefaultElems, UInt32& puNumCustomElems);
    [ObsoleteAttribute("This method is deprecated and will fail. There is no replacement API as it was intended to support a feature that was never implemented.")]
public abstract virtual int GetSurfaceSelCtx(IVsTrackSelectionEx& ppSurfaceSelCtx);
    public abstract virtual int GetFrameSelCtx(IVsTrackSelectionEx& ppSurfaceSelCtx);
    public abstract virtual int InvalidateSelCtx(IVsTrackSelectionEx pVsSelCtx);
    public abstract virtual int UpdateSelCtx(IVsTrackSelectionEx pVsSelCtx);
    public abstract virtual int GetContextOfElement(UInt32 elementid, IVsTrackSelectionEx& ppVsSelCtx);
    public abstract virtual int GetContextOfSelection(IVsTrackSelectionEx& ppHierarchyCtx, IVsTrackSelectionEx& ppSelectionContainerCtx);
    public abstract virtual int SetContextOfSelection(IVsTrackSelectionEx pHierarchyCtx, IVsTrackSelectionEx pSelectionContainerCtx, UInt32 flags);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("599BEA40-736E-4C74-971E-7E8CAC7611F1")]
public interface Microsoft.Internal.VisualStudio.Shell.Interop.IVsMSBuildImportsStorage {
    public abstract virtual IVsTask EnumImportsAsync();
    public abstract virtual IVsTask AddImportAsync(string szFullPath, string szLabel);
    public abstract virtual IVsTask RemoveImportAsync(string szFullPath);
}
[GuidAttribute("C8AE1E22-5CAB-4A27-A130-C6944CCDE6F7")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.Internal.VisualStudio.Shell.Interop.IVsMSbuildProjectImport {
    [DispIdAttribute("1610678272")]
public string Label { get; }
    [DispIdAttribute("1610678273")]
public string UnevaluatedInclude { get; }
    public abstract virtual string get_Label();
    public abstract virtual string get_UnevaluatedInclude();
    public abstract virtual IVsTask GetEvaluatedFullPathAsync(string szConfigurationCanonicalName);
}
[GuidAttribute("DEC0DE52-3D05-480F-8843-AADA03C4D41E")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.Internal.VisualStudio.Shell.Interop.IVsNamedItem {
    [DispIdAttribute("1610678272")]
public string DisplayName { get; }
    public abstract virtual string get_DisplayName();
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("CC78B515-9CAB-4FCF-B9DD-45D8F248AFEC")]
public interface Microsoft.Internal.VisualStudio.Shell.Interop.IVsNotifyProjectCreatingPrivate {
    public abstract virtual void OnBeginProjectCreating();
    public abstract virtual void OnEndProjectCreating();
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("8B7B74A3-D830-48D6-BEE8-B4369A51D5BE")]
public interface Microsoft.Internal.VisualStudio.Shell.Interop.IVsOOBFeedManager {
    public abstract virtual void LockFeed();
    public abstract virtual string GetOOBfeedFile();
    public abstract virtual void UnlockFeed();
    public abstract virtual UInt32 Advise(IVsOOBFeedManagerEvents pSync);
    public abstract virtual void Unadvise(UInt32 cookie);
}
[GuidAttribute("10ECBF2A-D3F9-4904-BC61-B9D2C1262E3A")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.Internal.VisualStudio.Shell.Interop.IVsOOBFeedManagerEvents {
    public abstract virtual void OnFeedChanged();
}
[NullableContextAttribute("1")]
[GuidAttribute("F1DBFF27-A729-44B4-BE75-F45DAF5658EA")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.Internal.VisualStudio.Shell.Interop.IVsOpenDocument {
    public abstract virtual int OpenDocumentAsync(DocumentRange selection, DocumentRange ensureVisible, EnsureRangeVisibleOptions ensureVisibleOptions, string bstrMkDocument, bool isPreview, bool activate, Guid viewKind, Guid projectId, Guid editorType, IVsTask& ppTask);
}
[GuidAttribute("5DB2C588-87FD-4EF0-853A-FF1827C6C02A")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.Internal.VisualStudio.Shell.Interop.IVsOpenProjectOrSolutionWithDialogOperation {
    public abstract virtual int BrowseProjectOrSolution();
    public abstract virtual int LoadProjectOrSolution();
}
[GuidAttribute("41BAC964-E0D2-4144-A84E-196F6D41DEDB")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.Internal.VisualStudio.Shell.Interop.IVsOpenRemoteDocument {
    [DispIdAttribute("1610678272")]
public bool ShouldOpenFilesRemotely { get; }
    public abstract virtual bool get_ShouldOpenFilesRemotely();
    public abstract virtual void BeginAsyncOpenFile(string szPath);
}
[GuidAttribute("FAA12D5A-F830-407A-BE85-CFC95FB8ACDD")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.Internal.VisualStudio.Shell.Interop.IVsOperationProgressStatusPrivate {
    public abstract virtual bool GetStageStatus(string pszOperationProgressStageId, Int64& pVersion);
    public abstract virtual bool GetProjectStageStatus(string pszOperationProgressStageId, Guid& guidProjectId, Int64& pVersion);
}
[GuidAttribute("95B2772C-5446-4D4E-BA2B-6AFF0347ACC4")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.Internal.VisualStudio.Shell.Interop.IVsOutputWindowPanePrivate {
    public abstract virtual void ShowNoActivate();
}
[GuidAttribute("7D9A377D-293E-4401-B6D3-CAA0C7368EBC")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.Internal.VisualStudio.Shell.Interop.IVsPackageManagerPrivate {
    public abstract virtual IVsPackage LoadPackageWithContext(Guid& packageGuid, int reason, Guid& context);
    public abstract virtual IVsTask LoadPackageWithContextAsync(Guid& packageGuid, int reason, Guid& context);
}
[GuidAttribute("e7ad7c84-0509-48bd-a5a0-f10c794afcc9")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.Internal.VisualStudio.Shell.Interop.IVsPackageManagerPrivate2 {
    public bool ClosingAllPackages { get; }
    public abstract virtual bool get_ClosingAllPackages();
    public abstract virtual bool IsPackageOfServiceLoaded(Guid service);
    public abstract virtual bool IsPackageInstalled(Guid package);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("8B9E21B6-843F-4CC2-8736-2D3E7B961C38")]
public interface Microsoft.Internal.VisualStudio.Shell.Interop.IVsParentProject3 {
    public abstract virtual UInt32 SetNestedProject(Guid ProjectGUID, UInt32 solutionProjectItemId);
    public abstract virtual void RemoveNestedProject(Guid ProjectGUID);
    public abstract virtual void DeleteNestedProject(Guid ProjectGUID);
    public abstract virtual void NotifyOnInvalidateItems(UInt32 itemidParent, bool fSaveExpansionState);
    public abstract virtual void NotifyOnItemAdded(UInt32 itemidParent, UInt32 itemidSiblingPrev, UInt32 itemidAdded);
    public abstract virtual void NotifyOnItemDeleted(UInt32 itemid);
    public abstract virtual void NotifyOnPropertyChanged(UInt32 itemid, int propid, UInt32 flags);
    public abstract virtual void NestedProjectReloaded(Guid ProjectGUID, IVsHierarchy pVsNewHier);
    public abstract virtual IVsTask OnAfterAddedToSolutionAsync();
    public abstract virtual UInt32 PrepareNestedProjectCreationInfo(string szProjectFullPath, UInt32 solutionProjectItemId);
    public abstract virtual void CleanupNestedProjectCreationInfo(bool fSuccess, UInt32 solutionProjectItemId, UInt32 pParentItemID, Guid ProjectGUID);
    public abstract virtual bool OnQueryRenameNestedProject(Guid ProjectGUID, string szOldProjectFullPath, string szNewProjectFullPath);
    public abstract virtual void OnAfterRenameNestedProject(Guid ProjectGUID, string szOldProjectFullPath, string szNewProjectFullPath);
    public abstract virtual void NestedProjectClosed(UInt32 itemid);
}
[GuidAttribute("D7DC0B60-4316-42D0-AEF9-DDC561700F0B")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.Internal.VisualStudio.Shell.Interop.IVsPathTrustVerifier {
    public abstract virtual IVsTask CheckPathAsync(string szPathToCheck, bool showSecurityDialog);
}
[NullableContextAttribute("1")]
[GuidAttribute("6aa892c4-aa52-4e81-8986-eb1b20e405a3")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.Internal.VisualStudio.Shell.Interop.IVsPathTrustVerifier2 {
    public abstract virtual IVsTask CheckPathAsync(string szPathToCheck, bool showSecurityDialog);
    public abstract virtual void AddTrustedFolder(string pszFolderLocation);
}
[NullableContextAttribute("1")]
[GuidAttribute("a81dd873-5bd9-4e51-8c0f-11b551c29e4f")]
[InterfaceTypeAttribute("1")]
[ExcludeFromProxyBuildAttribute]
public interface Microsoft.Internal.VisualStudio.Shell.Interop.IVsPathTrustVerifier3 {
    public abstract virtual IVsTask CheckPathAsync(string szPathToCheck, bool showSecurityDialog);
    public abstract virtual void AddTrustedFolder(string pszFolderLocation);
    public abstract virtual IVsTask IsTrustFullyEnabledAsync();
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("0239A90C-0BAD-407C-A1A3-8082060D68B2")]
public interface Microsoft.Internal.VisualStudio.Shell.Interop.IVsPerfNotificationProvider {
    public abstract virtual void OnNotificationShown();
    public abstract virtual void OnNotificationClosed();
    public abstract virtual string OnNeverShowAgainActionSelected();
    public abstract virtual string OnCustomActionSelected(string strActionName);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("F1459CB6-602D-4EEC-8BD0-6A24FAA51754")]
public interface Microsoft.Internal.VisualStudio.Shell.Interop.IVsPerfNotificationService {
    public abstract virtual Guid InitializeNotification(Guid& rguidPackageId, string strNotificationText, string strNotificationName, string strLearnMoreUrl);
    public abstract virtual void AddNotificationAction(Guid& rguidNotificationId, string strActionText, string strActionName);
    public abstract virtual void AddNotificationTelemetryProperty(Guid& rguidNotificationId, string strPropertyName, string strPropertyValue);
    public abstract virtual void SetNotificationTelemetryRootPaths(Guid& rguidNotificationId, string strEventRootPath, string strPropertyRootPath);
    public abstract virtual void SetNotificationActivityLogSource(Guid& rguidNotificationId, string strActivityLogSource);
    public abstract virtual bool FinalizeNotification(Guid& rguidNotificationId);
    public abstract virtual void DoTestHooks();
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("42317207-32A1-4D0B-A065-27C65413F3A0")]
public interface Microsoft.Internal.VisualStudio.Shell.Interop.IVsPlaceExtensionInternal {
    [DispIdAttribute("1610678272")]
public bool IsRemovable { get; }
    public abstract virtual bool get_IsRemovable();
}
[GuidAttribute("14318563-B784-4FCA-91A7-06EBF8C6BCF8")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.Internal.VisualStudio.Shell.Interop.IVsPostFaultEvent {
    public abstract virtual IVsFaultEvent CreateFault(string eventName, string eventDescription, string methodName, IVsFaultEventCallBack pfuncCallBack);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("FEE9CA21-0AC4-4338-963A-FEDF00B5F16E")]
public interface Microsoft.Internal.VisualStudio.Shell.Interop.IVsPostFaultEvent2 {
    public abstract virtual IVsFaultEvent CreateFault(string eventName, string eventDescription, int faultSeverity, string methodName, IVsFaultEventCallBack pfuncCallBack);
}
[GuidAttribute("97FCAB5F-F7A0-4323-8783-7A85C400BB02")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.Internal.VisualStudio.Shell.Interop.IVsPrefetchAggregateProjectPrivate {
    public abstract virtual void PreCreateFlavors(string pszFilename, string lpstrGuids, IVsAggregateProjectContextPrivate& ppContext);
}
[GuidAttribute("80121FFD-2231-460A-9BB9-D48E56611B21")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.Internal.VisualStudio.Shell.Interop.IVsPrerequisiteDetection {
    public abstract virtual IVsInstallBundleInfo GetInstallBundleInfo(string szMoniker);
    public abstract virtual VsInstallBundleState GetInstallBundleStatus(string szMoniker);
    public abstract virtual string DetectProjectRequirements(Guid& ProjectId, string szPath, Guid& factoryGuid);
    public abstract virtual void GetDetectableProjectExtensions(Array& extensionList);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("97F9D5D0-521D-457A-96A3-BD2E88DED2A7")]
public interface Microsoft.Internal.VisualStudio.Shell.Interop.IVsPreventAddNavigationItemsScopePrivate {
    public abstract virtual void Restore();
}
[GuidAttribute("73C0D4A6-DBC5-4423-945B-D7A64DBF8B01")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.Internal.VisualStudio.Shell.Interop.IVsProductKeyDialogLauncher {
    public abstract virtual void LaunchProductKeyDialog(IVsProductKeyDialogLauncherCallback pLauncherCallback);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("F652144A-E89C-4689-8644-4B47A7F0BB40")]
public interface Microsoft.Internal.VisualStudio.Shell.Interop.IVsProductKeyDialogLauncherCallback {
    public abstract virtual void DialogShown(object pWindow);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("46DD73D0-6AC0-4EE8-8394-794ED6747435")]
public interface Microsoft.Internal.VisualStudio.Shell.Interop.IVsProfileDataManagerPrivate {
    public abstract virtual IXMLDOMDocument ExportSettingsSilent(IVsProfileSettingsTree pSettingsTree, SETTINGSSCOPE SETTINGSSCOPE, IVsStorageContainerFactoryPrivate pStorageContainerFactory, IVsSettingsErrorInformation& ppsettingsErrorInformation, Object& changeToken);
    public abstract virtual void ImportSettingsSilent(IVsProfileSettingsTree pSettingsTree, SETTINGSSCOPE SETTINGSSCOPE, IVsStorageContainerFactoryPrivate pStorageContainerFactory, IVsSettingsErrorInformation& ppsettingsErrorInformation);
    public abstract virtual IVsProfileSettingsFileCollection GetSettingsFilesWithSortOption(UInt32 fileLocations, bool sort);
    public abstract virtual void ResetSelectedSettings(IVsProfileSettingsTree pSettingsTree, IVsSettingsErrorInformation& ppsettingsErrorInformation);
    public abstract virtual IVsTask ApplySettingsAsync(IVsProfileSettingsFileInfo settingsFileInfo);
    public abstract virtual void DestroySplashScreen();
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("346FD2CE-4824-4D1E-BDD7-F5BA4DBF508D")]
public interface Microsoft.Internal.VisualStudio.Shell.Interop.IVsProfileSettingsFileInfoInternal2 {
    public abstract virtual IVsProfileSettingsTree GetSettingsForRoamingImport();
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("DC31DF46-2E10-44D4-9B87-AD39DC0B4A34")]
public interface Microsoft.Internal.VisualStudio.Shell.Interop.IVsProfileSettingsTreePrivate {
    public abstract virtual bool StateHasChangedSince(object changeToken);
    public abstract virtual string GetDisplayNameEx(bool ensureResourcesLoaded);
    public abstract virtual string GetDescriptionEx(bool ensureResourcesLoaded);
}
[GuidAttribute("83D207D7-7B6D-4EE5-B679-DA0561DC0D7B")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.Internal.VisualStudio.Shell.Interop.IVsProjectAcquisitionSetupDriverPrivate {
    public abstract virtual IVsTask RunInstaller(string operation, string installerPath, string additionalParameters, Guid activityId, string offlineBootstrapperPath, string offlineInstallerPath, bool wait);
}
[NullableContextAttribute("1")]
[GuidAttribute("0D526A5B-AE3A-4BA0-8286-0D520FDBF35C")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.Internal.VisualStudio.Shell.Interop.IVsProjectAcquisitionSetupDriverPrivate2 {
    public abstract virtual IVsTask RunInstaller(string operation, string installerPath, string additionalParameters, Guid activityId, string offlineBootstrapperPath, string offlineInstallerPath, bool wait, bool elevate);
}
[GuidAttribute("DFA9B76C-69EC-4FF3-B09F-8CC394E18949")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.Internal.VisualStudio.Shell.Interop.IVsProjectCompatibilityDialogDataSourceEventPrivate {
    public abstract virtual void OnProjectCompatibilityDialogActivated(IVsProjectCompatibilityDialogDataSourcePrivate pProjectCompatibilityDialogDataSource);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("F3AEE1C9-AC45-4D8B-B342-F8684DFB5696")]
public interface Microsoft.Internal.VisualStudio.Shell.Interop.IVsProjectCompatibilityDialogDataSourcePrivate {
    public bool ConvertAll { get; public set; }
    public Array ProjectDetailDataSources { get; }
    public Array FilteredProjectDetailDataSources { get; }
    public string InfoText { get; }
    public string ConvertAllText { get; }
    public Guid HelpGuid { get; }
    public abstract virtual bool get_ConvertAll();
    public abstract virtual void set_ConvertAll(bool value);
    public abstract virtual Array get_ProjectDetailDataSources();
    public abstract virtual Array get_FilteredProjectDetailDataSources();
    public abstract virtual string get_InfoText();
    public abstract virtual string get_ConvertAllText();
    public abstract virtual Guid get_HelpGuid();
    public abstract virtual void CommandContinue();
    public abstract virtual void CommandCancel();
    public abstract virtual void CommandClose();
    public abstract virtual void CommandToggleDisplayAll();
}
[GuidAttribute("3B605EB1-B7BD-4EFC-A542-5D092BEBDC86")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.Internal.VisualStudio.Shell.Interop.IVsProjectCompatibilityDlg {
    public abstract virtual void ShowProjectCompatibilityDlg(string solutionFullPath, UInt32 cProjectDetails, VsProjectCompatDlgProjectDetail[] prgProjectDetails, Boolean[] pbStatus);
}
[GuidAttribute("9CA49BB6-8F06-4640-A2BF-A0377CCFC16B")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.Internal.VisualStudio.Shell.Interop.IVsProjectCompatibilityDlgPrivate {
    public abstract virtual UInt32 Advise(IVsProjectCompatibilityDialogDataSourceEventPrivate pSink);
    public abstract virtual void Unadvise(UInt32 dwCookie);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("C0FFEEEB-A363-46E2-B6BE-02E8181BE79E")]
public interface Microsoft.Internal.VisualStudio.Shell.Interop.IVsProjectConfiguration {
    [DispIdAttribute("1610678272")]
public IVsConfigurationProvider ConfigurationProvider { get; }
    [DispIdAttribute("1610678273")]
public string ProjectName { get; }
    [DispIdAttribute("1610678274")]
public Guid ProjectGuid { get; }
    [DispIdAttribute("1610678277")]
public string SolutionConfigurationName { get; }
    [DispIdAttribute("1610678278")]
public bool Build { get; public set; }
    [DispIdAttribute("1610678280")]
public bool Deploy { get; public set; }
    public abstract virtual IVsConfigurationProvider get_ConfigurationProvider();
    public abstract virtual string get_ProjectName();
    public abstract virtual Guid get_ProjectGuid();
    public abstract virtual void GetCurrentConfigPlatform(String& config, String& platform);
    public abstract virtual void SetCurrentConfigPlatform(string config, string platform);
    public abstract virtual string get_SolutionConfigurationName();
    public abstract virtual bool get_Build();
    public abstract virtual void set_Build(bool value);
    public abstract virtual bool get_Deploy();
    public abstract virtual void set_Deploy(bool value);
}
[NullableContextAttribute("1")]
[GuidAttribute("684B02E9-C162-47B4-853E-91651139310A")]
[InterfaceTypeAttribute("1")]
[ExcludeFromProxyBuildAttribute]
public interface Microsoft.Internal.VisualStudio.Shell.Interop.IVsProjectDefinitionInSolution {
    public Guid ProjectType { get; }
    public string Name { get; }
    public string Moniker { get; }
    public Guid Id { get; }
    public Guid Parent { get; }
    public abstract virtual Guid get_ProjectType();
    public abstract virtual string get_Name();
    public abstract virtual string get_Moniker();
    public abstract virtual Guid get_Id();
    public abstract virtual Guid get_Parent();
    public abstract virtual bool TryGetProjectConfiguration(string solutionConfiguration, String& projectConfiguration, Boolean& build, Boolean& deploy);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("75159C08-EFA3-454D-BBD1-80C1467C8ABD")]
public interface Microsoft.Internal.VisualStudio.Shell.Interop.IVsProjectDetailDataSourcePrivate {
    public string Details { get; }
    public string ProjectName { get; }
    public bool Convert { get; public set; }
    public string StatusText { get; }
    [ComAliasNameAttribute("PROJECTCOMPATIBILITYSTATUSKIND")]
public PROJECTCOMPATIBILITYSTATUSKIND statusKind { get; }
    public string ProjectDisplayPath { get; }
    public string ProjectFullPath { get; }
    public abstract virtual string get_Details();
    public abstract virtual string get_ProjectName();
    public abstract virtual bool get_Convert();
    public abstract virtual void set_Convert(bool value);
    public abstract virtual string get_StatusText();
    public abstract virtual PROJECTCOMPATIBILITYSTATUSKIND get_statusKind();
    public abstract virtual string get_ProjectDisplayPath();
    public abstract virtual string get_ProjectFullPath();
}
[GuidAttribute("3E8EEED7-802C-4C8E-AA0E-85F54E24C4BC")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.Internal.VisualStudio.Shell.Interop.IVsProjectExpansionService {
    public abstract virtual Array GetExpandedProjects();
}
[GuidAttribute("FDFD5BE5-A51B-42D6-932C-CF95686EA4DB")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.Internal.VisualStudio.Shell.Interop.IVsProjectGenerator {
    public abstract virtual void RunGenerator(string szSourceFileMoniker, Boolean& pfProjectIsGenerated, String& pbstrGeneratedFile, Guid& pGuidProjType);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("6E71FE11-D672-4A4E-A4A8-94A0388F8574")]
public interface Microsoft.Internal.VisualStudio.Shell.Interop.IVsProjectInfo {
    [DispIdAttribute("1610678272")]
public string ProjectName { get; }
    [DispIdAttribute("1610678273")]
public Guid ProjectGuid { get; }
    [DispIdAttribute("1610678274")]
[ComAliasNameAttribute("Microsoft.Internal.VisualStudio.Shell.Interop.ProjectStartupMode")]
public ProjectStartupMode StartupMode { get; }
    [DispIdAttribute("1610678275")]
public ushort StartupOrder { get; }
    public abstract virtual string get_ProjectName();
    public abstract virtual Guid get_ProjectGuid();
    public abstract virtual ProjectStartupMode get_StartupMode();
    public abstract virtual ushort get_StartupOrder();
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("EDD432B2-2750-4D2D-9C1C-BB701143B00E")]
public interface Microsoft.Internal.VisualStudio.Shell.Interop.IVsProjectLoadProgressTracker {
    public abstract virtual UInt32 AdviseProjectLoadProgressUpdated(IVsProjectLoadStatusUpdateEvents pCallback);
    public abstract virtual void UnadviseProjectLoadProgressUpdated(UInt32 dwCookie);
    public abstract virtual void ProjectLoadProgressUpdated(string currentProjectDisplayName, int cProjectsLoaded, int cTotalProjectsInSolution);
}
[GuidAttribute("AC712AE8-2C04-424A-9E91-0463CACCDEED")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.Internal.VisualStudio.Shell.Interop.IVsProjectLoadStatusUpdateEvents {
    public abstract virtual void OnProjectLoadProgressUpdated(string currentProjectDisplayName, int cProjectsLoaded, int cTotalProjectsInSolution);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("E38F9B69-A31C-4096-913E-1D117339673C")]
public interface Microsoft.Internal.VisualStudio.Shell.Interop.IVsPropertyChangeEvents {
    public abstract virtual IVsTask OnPropertyChangedAsync(string name);
}
[GuidAttribute("15319442-2CDD-4E37-8344-DDAEFBE62D9B")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.Internal.VisualStudio.Shell.Interop.IVsPropertyInfo {
    [DispIdAttribute("1610678272")]
public bool IsTransmittable { get; }
    public abstract virtual bool get_IsTransmittable();
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("C3728A9D-2A95-4AA8-8130-ABE1E4E7B81F")]
public interface Microsoft.Internal.VisualStudio.Shell.Interop.IVsPropertyPageFramePrivate {
    public abstract virtual int ShowFrameIgnoreUpdates(IVsHierarchy pHierarchy, Guid clsidPage);
    public abstract virtual IPropertyPageSite GetActivePageSite();
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("4E451853-8E13-473D-A68A-D9CC166DEE7D")]
public interface Microsoft.Internal.VisualStudio.Shell.Interop.IVsPropertyPagePrivate {
    public abstract virtual object GetPropertyPageImpl();
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("45FA6A2F-192A-4F96-A122-760B6E319F48")]
public interface Microsoft.Internal.VisualStudio.Shell.Interop.IVsPropertyPageSitePrivate {
    public abstract virtual IPropertyPage GetPropertyPage();
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("C637A7B9-F65F-4EF5-BA69-58DC98BCD5B9")]
public interface Microsoft.Internal.VisualStudio.Shell.Interop.IVsProvideClientControlledChooseToolboxItemsPages {
    public abstract virtual Array GetPages();
}
[GuidAttribute("9E098491-6F5E-4CB6-9F63-DD6229358CB5")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.Internal.VisualStudio.Shell.Interop.IVsRCWCleanupPrivate {
    public abstract virtual int DisableComObjectEagerCleanup();
    public abstract virtual int CleanUpUnReachableRCWs();
    public abstract virtual int InvokeFullGarbageCollection();
    public abstract virtual int InvokeGarbageCollection(int generation);
    public abstract virtual int InvokeFullGCandRCWCleanupForShutdown();
}
[NullableContextAttribute("1")]
[GuidAttribute("ee523285-49d7-44d8-8d31-18ad813e45ed")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.Internal.VisualStudio.Shell.Interop.IVsRdtBackChannel {
    public bool IsDeferredSaveSolution { get; }
    public bool ShouldHideSolutionNode { get; }
    public abstract virtual UInt32 CookieFromItem(IVsHierarchy hierarchy, UInt32 itemid);
    public abstract virtual Array GetDirtyDocs(UInt32 saveOpts, IVsHierarchy hierarchy, UInt32 itemid);
    public abstract virtual string GetErrorInfoString(int hr);
    public abstract virtual void SetErrorInfo(int hr, string errorMessage);
    public abstract virtual bool get_IsDeferredSaveSolution();
    public abstract virtual bool get_ShouldHideSolutionNode();
    public abstract virtual void SaveHiddenSolution();
    public abstract virtual void UpdateCommandUI();
    public abstract virtual void ManagedRdtDisposed();
}
[GuidAttribute("C9C7CEEB-5143-49EC-BE15-318B08C50EA6")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.Internal.VisualStudio.Shell.Interop.IVsRegisterCriticalShutdownAction {
    public abstract virtual void RegisterCriticalShutdownAction(IVsCriticalShutdownAction pAction);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("9FDECA99-9A9D-44A8-98AF-C5A285EEFB47")]
public interface Microsoft.Internal.VisualStudio.Shell.Interop.IVsRegisterProjectGenerators {
    public abstract virtual void RegisterProjectGenerator(Guid& rguidProjGenerator, IVsProjectGenerator pProjectGenerator, UInt32& pdwCookie);
    public abstract virtual void UnregisterProjectGenerator(UInt32 dwCookie);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("CA11A1DC-0FD4-4AC0-990A-882864E9CA69")]
public interface Microsoft.Internal.VisualStudio.Shell.Interop.IVsRemotableCommandHelper {
    public abstract virtual void CreateCommandDataSource(CommandTableId id, IVsUIDataSource pOwnerDataSource, IVsUIDataSource& ppDataSource);
    public abstract virtual void OnRemoteCommandsChanged(CommandTableId[] pControlsToReset, int controlsCount, CommandTableId[] pGroupsToReset, int groupsCount);
}
[NullableContextAttribute("1")]
[GuidAttribute("C254A514-0BFB-4CF3-8E1F-84264AB2AC35")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.Internal.VisualStudio.Shell.Interop.IVsRemotableCommandHelper2 {
    public abstract virtual void CreateCommandDataSource(CommandTableId id, IVsUIDataSource pOwnerDataSource, IVsUIDataSource& ppDataSource);
    public abstract virtual void OnRemoteCommandsChanged(CommandTableId[] pControlsToReset, int controlsCount, CommandTableId[] pGroupsToReset, int groupsCount);
    public abstract virtual int OnRemoteCommandsKeyBindingsChanged(CommandKeyBinding[] pKeyBindingsAdded, int keyBindingsAddedCount, CommandKeyBinding[] pKeyBindingsRemoved, int keyBindingsRemovedCount);
    [NullableContextAttribute("2")]
public abstract virtual int GetCommandText(CommandTableId id, String& text);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("CA11AB1E-3093-40E6-AE5A-91F07903C266")]
public interface Microsoft.Internal.VisualStudio.Shell.Interop.IVsRemotableCommandInteropService {
    public abstract virtual int SetHelper(IVsRemotableCommandHelper pRemotableCommandHelper);
    public abstract virtual int GetControlDataSource(UInt32 type, CommandTableId id, IVsUIDataSource& ppDataSource);
    public abstract virtual int GetControlData(CommandTableId id, CommandData[] commandData);
    public abstract virtual int GetGroupDataCount(CommandTableId parentId, Int32& pRemoteGroupDataCount);
    public abstract virtual int GetGroupData(CommandTableId parentId, int countExpected, FullGroupAddress[] remoteGroupData);
    public abstract virtual int GetCommandDataCount(CommandTableId parentId, Int32& pRemoteCommandDataCount);
    public abstract virtual int GetCommandData(CommandTableId parentId, int countExpected, FullCommandAddress[] remoteCommandData);
    public abstract virtual int GetCommandDataOfTypeCount(UInt32 type, Int32& pRemoteCommandDataCount);
    public abstract virtual int GetCommandDataOfType(UInt32 type, int countExpected, FullCommandAddress[] remoteCommandData);
}
[NullableContextAttribute("1")]
[GuidAttribute("AF13D49A-1A07-4B0E-BDE8-C67BBC639F74")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.Internal.VisualStudio.Shell.Interop.IVsRemotableCommandInteropService2 {
    public abstract virtual int SetHelper(IVsRemotableCommandHelper pRemotableCommandHelper);
    public abstract virtual int GetControlDataSource(UInt32 type, CommandTableId id, IVsUIDataSource& ppDataSource);
    public abstract virtual int GetControlData(CommandTableId id, CommandData[] commandData);
    public abstract virtual int GetGroupDataCount(CommandTableId parentId, Int32& pRemoteGroupDataCount);
    public abstract virtual int GetGroupData(CommandTableId parentId, int countExpected, FullGroupAddress[] remoteGroupData);
    public abstract virtual int GetCommandDataCount(CommandTableId parentId, Int32& pRemoteCommandDataCount);
    public abstract virtual int GetCommandData(CommandTableId parentId, int countExpected, FullCommandAddress[] remoteCommandData);
    public abstract virtual int GetCommandDataOfTypeCount(UInt32 type, Int32& pRemoteCommandDataCount);
    public abstract virtual int GetCommandDataOfType(UInt32 type, int countExpected, FullCommandAddress[] remoteCommandData);
    [NullableContextAttribute("2")]
public abstract virtual int GetControlName(CommandTableId id, String& name);
    public abstract virtual int GetControlId(string commandName, CommandTableId& id);
    public abstract virtual int GetControlDataSourceAsync(UInt32 type, string commandName, int timeout, IVsTask& task);
    [NullableContextAttribute("2")]
public abstract virtual int GetGroupName(CommandTableId id, String& name);
    public abstract virtual int LogMessage(string message);
    public abstract virtual int LogError(string error);
}
[ObsoleteAttribute("This API is will be removed in a future Visual Studio version.")]
[InterfaceTypeAttribute("1")]
[GuidAttribute("2DB673B1-8643-4236-A7DD-CD063D074BB1")]
public interface Microsoft.Internal.VisualStudio.Shell.Interop.IVsRemoteControlClient {
    [DispIdAttribute("1610678272")]
public string FileUrl { get; }
    public abstract virtual string get_FileUrl();
    public abstract virtual ISequentialStream ReadFile(int staleBehavior);
    public abstract virtual void Close();
}
[ObsoleteAttribute("This API is will be removed in a future Visual Studio version.")]
[GuidAttribute("84C6751B-0B11-4A7B-98D2-DD1061111EA0")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.Internal.VisualStudio.Shell.Interop.IVsRemoteControlService {
    public abstract virtual IVsRemoteControlClient CreateClient(string szHostId, string szRelativeFilePath, int pollingIntervalMinutes);
}
[GuidAttribute("C834E0F6-3FA6-423D-A7E1-4EC37C711319")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.Internal.VisualStudio.Shell.Interop.IVsRemoteSettings {
    public abstract virtual UInt32 AdviseRemoteSettingsEvents(IVsRemoteSettingsEvents handler);
    public abstract virtual void UnadviseRemoteSettingsEvents(UInt32 cookie);
}
[GuidAttribute("8036D565-9F14-4C95-8E73-6C521E27609F")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.Internal.VisualStudio.Shell.Interop.IVsRemoteSettingsClient {
    [DispIdAttribute("1610678272")]
public string FileUrl { get; }
    public abstract virtual string get_FileUrl();
    public abstract virtual ISequentialStream ReadFile(int staleBehavior);
    public abstract virtual void Close();
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("BE969305-5A17-479F-9844-C3B5C7C5B2C1")]
public interface Microsoft.Internal.VisualStudio.Shell.Interop.IVsRemoteSettingsEvents {
    public abstract virtual void OnRemoteSettingsApplied();
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("7AFE2DFA-C69B-4E1E-A27B-8A75B5F0FA9A")]
public interface Microsoft.Internal.VisualStudio.Shell.Interop.IVsRemoteSettingsService {
    public abstract virtual IVsRemoteSettingsClient CreateClient(string szHostId, string szRelativeFilePath, int pollingIntervalMinutes);
}
[GuidAttribute("F243088D-4D54-4F09-A0C6-3F7F46F538B5")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.Internal.VisualStudio.Shell.Interop.IVsResourceManagerCacheControl {
    public abstract virtual int Create(ushort wLangID, int fEraseExisting);
    public abstract virtual int Commit();
    public abstract virtual int DenyReadsThisSession();
    public abstract virtual int IgnorePackage(Guid& guid);
}
[GuidAttribute("918C9893-6D91-477F-9398-09A18668574B")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.Internal.VisualStudio.Shell.Interop.IVsResponseTime {
    public abstract virtual void StartWatching();
    public abstract virtual void StopWatching();
    public abstract virtual UInt32 GetElapsedTime();
    public abstract virtual UInt32 GetMaxElapsedTime();
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("DF3F379B-869F-4F6F-B5B0-9070F21CA113")]
public interface Microsoft.Internal.VisualStudio.Shell.Interop.IVsResponseTime2 {
    public abstract virtual void StartWatching();
    public abstract virtual void StopWatching();
    public abstract virtual UInt32 GetElapsedTime();
    public abstract virtual UInt32 GetMaxElapsedTime();
    public abstract virtual void LogSessionMetrics();
}
[GuidAttribute("86771512-0219-48EE-9A67-39937B67FD0A")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.Internal.VisualStudio.Shell.Interop.IVsResponseTime3 {
    public bool UserInputState { get; public set; }
    public abstract virtual void StartWatching();
    public abstract virtual void StopWatching();
    public abstract virtual UInt32 GetElapsedTime();
    public abstract virtual UInt32 GetMaxElapsedTime();
    public abstract virtual void LogSessionMetrics();
    public abstract virtual bool get_UserInputState();
    public abstract virtual void set_UserInputState(bool value);
}
[NullableContextAttribute("1")]
[GuidAttribute("acffde84-4c2f-41c8-8161-014ff5a8d924")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.Internal.VisualStudio.Shell.Interop.IVsResponsivenessMonitor {
    public abstract virtual void EnableProcessMonitoring(UInt32 pid);
    public abstract virtual void DisableProcessMonitoring(UInt32 pid);
    public abstract virtual void EnableProcessNameMonitoring(string processName);
    public abstract virtual void DisableProcessNameMonitoring(string processName);
}
[GuidAttribute("BDA1844E-EF53-4475-AA0B-53CAAF92DDCE")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.Internal.VisualStudio.Shell.Interop.IVsRoamingClient {
    public abstract virtual IVsTask GetStateAsync();
    public abstract virtual IVsTask ApplyAsync(string newState);
    public abstract virtual void SetEnabled(bool enabled);
    public abstract virtual void ForgetPriorChanges();
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("27C1FDBB-5C36-4622-9812-ECF5F61C54B5")]
public interface Microsoft.Internal.VisualStudio.Shell.Interop.IVsRoamingClientCollection {
    public abstract virtual Array GetClientIds();
    public abstract virtual Guid GetClientPackage(string id);
    public abstract virtual string GetClientConfigurationCategory(string id);
    public abstract virtual IVsRoamingClient GetClient(string id);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("F300EA0E-3107-4932-99BE-0911384A4A4C")]
public interface Microsoft.Internal.VisualStudio.Shell.Interop.IVsRoamingClientCollectionFactory {
    public abstract virtual IVsRoamingClientCollection GetRoamingClientCollection(Guid clientId);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("37ED9971-2DD8-41C5-9C11-E4CD98A5BC52")]
public interface Microsoft.Internal.VisualStudio.Shell.Interop.IVsRoamingClientFactory {
    public abstract virtual IVsRoamingClient GetRoamingClient(Guid clientId);
}
[GuidAttribute("E21161EF-D7CB-49F3-A826-8BCBBA87E11A")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.Internal.VisualStudio.Shell.Interop.IVsRoamingManagerFirstLaunchSupport {
    public abstract virtual IVsTask DownloadRoamingProfileOnFirstLaunchAsync();
    public abstract virtual IVsTask ApplyRoamingProfileAsync(string profile);
}
[GuidAttribute("7197BF30-9495-4F85-B944-C14885F6E0D8")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.Internal.VisualStudio.Shell.Interop.IVsRoamingManagerPrivate {
    [DispIdAttribute("1610678272")]
public bool IsEnabled { get; public set; }
    [ComAliasNameAttribute("Microsoft.Internal.VisualStudio.Shell.Interop.VSRoamingDisabledReason")]
[DispIdAttribute("1610678274")]
public UInt32 RoamingDisabledReason { get; public set; }
    public abstract virtual void set_IsEnabled(bool value);
    public abstract virtual bool get_IsEnabled();
    public abstract virtual void set_RoamingDisabledReason(UInt32 value);
    public abstract virtual UInt32 get_RoamingDisabledReason();
    public abstract virtual void Sync();
    public abstract virtual void ResolveConflictKeepRoamingDisabled();
    public abstract virtual void ResolveConflictDownloadServerSettings();
    public abstract virtual void ResolveConflictUploadLocalSettings();
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("C57BDA1F-BCCC-480D-86D7-EC672519523F")]
public interface Microsoft.Internal.VisualStudio.Shell.Interop.IVsRunningDocumentTablePrivate {
    public abstract virtual int NotifyOnBeforeShow(UInt32 docCookie, int fFirstShow, IVsWindowFrame pFrame);
    public abstract virtual int NotifyOnAfterHide(UInt32 docCookie, IVsWindowFrame pFrame);
    public abstract virtual int OnIdle();
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("C94C759D-87FC-4CA3-8257-FA084A9BD17B")]
public interface Microsoft.Internal.VisualStudio.Shell.Interop.IVsRunningDocumentTablePrivate2 {
    public abstract virtual void UpdateDocData(UInt32 cookie, IntPtr punkDocData);
}
[NullableContextAttribute("1")]
[GuidAttribute("3B463F02-EF20-4019-BE94-FB7BB5C5D45C")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.Internal.VisualStudio.Shell.Interop.IVsRunningDocumentTablePrivate3 {
    public abstract virtual void NotifyOnBeforeLoadingDocumentWindowShow(UInt32 documentCookie, bool isFirstShow, IVsWindowFrame documentFrame);
}
[NullableContextAttribute("1")]
[GuidAttribute("c337cbd5-1db9-429d-960e-3eb283f592a2")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.Internal.VisualStudio.Shell.Interop.IVsSavePrimitives {
    public bool IsInteractiveSave { get; }
    public bool ShouldClearDirtyBeforeSave { get; }
    public bool ShouldDoCustomSave { get; }
    public bool ShouldSaveRelatedItems { get; }
    public abstract virtual bool DoCustomSave(UInt32 docCookie, IVsAsyncSaveResult& result);
    public abstract virtual bool get_IsInteractiveSave();
    [NullableContextAttribute("2")]
public abstract virtual bool NotifyOnBeforeSaveInternal(UInt32 docCookie, UInt32 notificationFlags, IVsTask saveTask);
    public abstract virtual bool NotifyOnAfterSaveInternal(UInt32 docCookie, UInt32 saveOpts, UInt32 notificationFlags);
    public abstract virtual void NotifyOnAfterSaveAll();
    public abstract virtual void OnSaveAs(string docMoniker);
    public abstract virtual IVsAsyncSaveResult SaveToFileAs(bool saveCopyAs, IPersistFileFormat persistFileFmt, IPersistFile persistFile, string originalFilename);
    public abstract virtual bool get_ShouldClearDirtyBeforeSave();
    public abstract virtual bool get_ShouldDoCustomSave();
    public abstract virtual bool get_ShouldSaveRelatedItems();
    public abstract virtual bool UpdateFileMru(string docMoniker, UInt32 rdtFlags);
}
[GuidAttribute("D23BC5CF-D29B-4AAF-B0D6-2A88592678C7")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.Internal.VisualStudio.Shell.Interop.IVsScreenUtilitiesPrivate {
    public abstract virtual int AbsoluteRectToRelativeRect(RECT absoluteRect, UInt32& display, RECT& relativeRect);
    public abstract virtual int RelativeRectToAbsoluteRect(UInt32 display, RECT relativeRect, RECT& absoluteRect);
}
[GuidAttribute("CC274488-B6FB-4DC4-BC5E-3262DD76C1AD")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.Internal.VisualStudio.Shell.Interop.IVsSearchProviderPrivate {
    [ComAliasNameAttribute("DWORD")]
public UInt32 ProviderPriority { get; }
    public abstract virtual UInt32 get_ProviderPriority();
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("BC5F2D65-80EA-481B-B887-94541BD3F014")]
public interface Microsoft.Internal.VisualStudio.Shell.Interop.IVsSearchProviderPrivate2 {
    [ComAliasNameAttribute("OLE.DWORD")]
[DispIdAttribute("1610678272")]
public UInt32 ProviderPriority { get; }
    [DispIdAttribute("1610743808")]
public bool IsExcludedFromMRU { get; }
    public abstract virtual UInt32 get_ProviderPriority();
    public abstract virtual bool get_IsExcludedFromMRU();
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("65C5CF57-C443-4AD5-9EF5-8F521A4C391A")]
public interface Microsoft.Internal.VisualStudio.Shell.Interop.IVsSearchService2 {
    public abstract virtual int GetHelpLanguages(Array& pLanguages, UInt32& pVsHLDState, int fUserInitiated);
}
[GuidAttribute("49E4D603-7C60-489B-A0C3-934061BF4B27")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.Internal.VisualStudio.Shell.Interop.IVsSettingsChangeBroker {
    public abstract virtual void NotifySettingsChanged(Guid guidContainer);
    public abstract virtual UInt32 AdviseSettingsChangeEvents(IVsSettingsChangeEvents sink);
    public abstract virtual void UnadviseSettingsChangeEvents(UInt32 cookie);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("6A8592E0-2624-4ADE-993E-88A26A2FEF0C")]
public interface Microsoft.Internal.VisualStudio.Shell.Interop.IVsSettingsChangeEvents {
    public abstract virtual void OnSettingsChanged(Guid guidContainer);
}
[NullableContextAttribute("1")]
[GuidAttribute("fa71b7e9-dde5-4b7c-bc94-b6c095b70baf")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.Internal.VisualStudio.Shell.Interop.IVsSettingsChangeSuppressor {
    public string CurrentSettingsVersion { get; }
    public abstract virtual string get_CurrentSettingsVersion();
    public abstract virtual IVsDisposable SuppressChangesToSettingsNewerThan(string version);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("3D2B2495-EEAD-4421-A282-7DEB7F84CBED")]
public interface Microsoft.Internal.VisualStudio.Shell.Interop.IVsSettingsList {
    public abstract virtual object GetValue(string key);
    public abstract virtual IVsTask AddToFrontAsync(string key, Object& pValue, object state);
    public abstract virtual IVsTask ClearAsync(object state);
    public abstract virtual IVsTask RemoveAsync(string key, object state);
    public abstract virtual UInt32 AdviseListChangeEvents(IVsSettingsListChangeEvents handler);
    public abstract virtual void UnadviseListChangeEvents(UInt32 cookie);
    public abstract virtual IVsEnumerablePropertyBag GetEnum();
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("06555531-1D72-4557-8A17-EA665F57966B")]
public interface Microsoft.Internal.VisualStudio.Shell.Interop.IVsSettingsListChangeEvents {
    public abstract virtual IVsTask OnItemAddedToFrontAsync(string listName, string key, object value, object state);
    public abstract virtual IVsTask OnItemsRemovedAsync(string listName, IVsEnumerablePropertyBag pItemsRemoved, object state);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("564D55C5-C2FF-443E-8573-1D8D4B44BB65")]
public interface Microsoft.Internal.VisualStudio.Shell.Interop.IVsSettingsManagerLoggingContext {
    public abstract virtual IVsDisposable SetSource(string szSource);
}
[GuidAttribute("69ACD7E3-6A12-4AB5-A31E-C674C4BA2DA6")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.Internal.VisualStudio.Shell.Interop.IVsSettingsPersistenceManager {
    public abstract virtual IVsTask SetValueAsync(string name, Object& pValue, int isMachineLocal);
    public abstract virtual object GetValue(string name);
    public abstract virtual IVsSettingsList GetOrCreateList(string name, int isMachineLocal);
    public abstract virtual Array GetNamesStartingWithPrefix(string prefix);
    public abstract virtual UInt32 AdvisePropertyChangeEvents(IVsPropertyChangeEvents handler, string namePattern);
    public abstract virtual void UnadvisePropertyChangeEvents(UInt32 cookie);
}
[GuidAttribute("9A20DB8C-2250-460D-8113-185A0D1460BD")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.Internal.VisualStudio.Shell.Interop.IVsSetupCompositionServicePrivate {
    public abstract virtual void HasMissingComponents(string projectMoniker, Boolean& pMissingRequiredComponents, Boolean& pMissingConfigFileComponents);
    public abstract virtual void InstallMissingComponents(string projectMoniker, Guid activityId);
    public abstract virtual bool HasMissingConfigFileComponents(IVsSolution pSolution);
    public abstract virtual void InstallComponents(Guid activityId, UInt32 componentsCount, String[] components);
}
[GuidAttribute("35A39BBB-7D16-4F28-AD5A-3ED207563FE8")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.Internal.VisualStudio.Shell.Interop.IVsSharedImportsHelperInternal {
    public abstract virtual void AddSharedImport(IVsHierarchy importingProject, string szImportFullPath);
    public abstract virtual void RemoveSharedImport(IVsHierarchy importingProject, string szImportFullPath);
}
[GuidAttribute("8F549D35-B4F2-4398-8B10-6B8368221E19")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.Internal.VisualStudio.Shell.Interop.IVsSharedMSBuildFilesEvents {
    public abstract virtual int OnAfterSharedMSBuildFileUserAdded(string sharedFileFullPath, IVsSharedMSBuildFileUserInfo sharedFileUserInfo);
    public abstract virtual int OnAfterSharedMSBuildFileUserRemoved(string sharedFileFullPath, IVsSharedMSBuildFileUserInfo sharedFileUserInfo);
    public abstract virtual int OnAfterSharedMSBuildFileUserClosed(string sharedFileFullPath, IVsSharedMSBuildFileUserInfo sharedFileUserInfo, int closingKind);
    public abstract virtual int OnAfterSharedMSBuildFileUserLoaded(string sharedFileFullPath, IVsSharedMSBuildFileUserInfo sharedFileUserInfo);
    public abstract virtual int OnAfterAllSharedMSBuildFileUsersLoaded(string sharedFileFullPath);
    public abstract virtual int OnAfterActiveContextForSharedMSBuildFileChanged(string sharedFileFullPath, IVsHierarchy oldActiveContextHierarchy, IVsHierarchy newActiveContextHierarchy);
    public abstract virtual int OnAfterOwnerProjectForSharedMSBuildFileChanged(string sharedFileFullPath, IVsHierarchy ownerProjectHierarchy, Guid ownerProjectID, bool isOwnerProjectLoaded, Guid removedOwnerProjectID, int ownerChangeKind);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("258EBB26-DF9E-4722-9CF1-25504D7CA96F")]
public interface Microsoft.Internal.VisualStudio.Shell.Interop.IVsSharedMSBuildFilesManager {
    public abstract virtual IVsSharedMSBuildFilesManagerHierarchy GetSharedMSBuildFilesManagerHierarchy(bool createIfNecessary);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("4879A2EA-EE18-4C8D-BC7C-3909A635431F")]
public interface Microsoft.Internal.VisualStudio.Shell.Interop.IVsSharedMSBuildFilesManagerHierarchy {
    public abstract virtual void RegisterSharedMSBuildFiles(int cFiles, String[] sharedFileFullPaths, IVsHierarchy sharedFileUserHierarchy, UInt32 options, string categoryName);
    public abstract virtual void UnregisterAnySharedMSBuildFiles(IVsHierarchy sharedFileUser);
    public abstract virtual void RegisterSharedMSBuildFileCategories(IVsHierarchy sharedFileUser, int cCategories, String[] allPossibleProjectFileCategories);
    public abstract virtual void GetOwnerProjectForSharedMSBuildFile(string sharedFileFullPath, IVsHierarchy& ownerProjectHierarchy, Guid& ownerProjectID, Boolean& isOwnerProjectLoaded);
    public abstract virtual IVsEnumSharedMSBuildFileUserInfo EnumUsersOfSharedMSBuildFile(string sharedFileFullPath);
    public abstract virtual Array EnumSharedMSBuildFilesOfUser(Guid sharedFileUserProjectID, string categoryName);
    public abstract virtual void EnsureUsersOfSharedMSBuildFileAreLoaded(string sharedFileFullPath);
    public abstract virtual IVsTask ReloadSharedMSBuildFileAsync(string sharedFileFullPath);
    public abstract virtual IVsHierarchy GetActiveContextForSharedMSBuildFile(string sharedFileFullPath);
    public abstract virtual void SetActiveContextForSharedMSBuildFile(string sharedFileFullPath, IVsHierarchy activeContextHierarchy);
    public abstract virtual UInt32 AdviseSharedMSBuildFilesEvents(string sharedFileFullPath, IVsSharedMSBuildFilesEvents pEvents);
    public abstract virtual void UnadviseSharedMSBuildFilesEvents(string sharedFileFullPath, UInt32 cookie);
}
[GuidAttribute("C68B3F0F-3BD9-45A1-A98F-2B23DB3FB536")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.Internal.VisualStudio.Shell.Interop.IVsSharedMSBuildFileUserInfo {
    [DispIdAttribute("1610678272")]
[ComAliasNameAttribute("Microsoft.Internal.VisualStudio.Shell.Interop.VsSharedMSBuildFileUserOptions")]
public UInt32 UserOptions { get; }
    [DispIdAttribute("1610678273")]
public Guid ProjectID { get; }
    public abstract virtual UInt32 get_UserOptions();
    public abstract virtual Guid get_ProjectID();
}
[GuidAttribute("B4C91A83-6489-11D2-BA74-00C04F79F802")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.Internal.VisualStudio.Shell.Interop.IVsShellMacroHelper {
    public abstract virtual int SetWindowsContextHwnd(IntPtr hwnd);
    public abstract virtual int SetWindowsContextWindow(object pwindow);
    public abstract virtual int RecordDocumentWindowClose();
    public abstract virtual int RecordToolWindowClose(int fCloseLinkedTabsIfApplicable);
    public abstract virtual int RecordWindowActivate(int fCoalescePrevious, int fAllowLaterCoalescing);
    public abstract virtual int RecordToolWindowAutoHide(Guid& guidPersistenceSlot, int fPin);
    public abstract virtual int RecordDocumentClose();
    public abstract virtual int PermitDocumentSave(int fPermitted);
    public abstract virtual int RecordDocumentSave(string pwszFileName);
    public abstract virtual int PermitOpenDocument(int fPermitted);
    public abstract virtual int RecordOpenDocument(string pwszFileName);
    public abstract virtual int GetActiveWindowForMacro(Object& ppwindow);
    public abstract virtual int SetActiveWindowForMacro(object pVsWindowFrame);
    public abstract virtual int RecordSpecificToolWindowClose(Guid& guidPersistenceSlot);
}
[GuidAttribute("BC53EE79-F9B4-4670-9579-C28E82702CEF")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.Internal.VisualStudio.Shell.Interop.IVsSignInInvitationDialogLauncher {
    public abstract virtual void LaunchSignInInvitationDialog(IVsProductKeyDialogLauncherCallback pLauncherCallback);
}
[NullableContextAttribute("1")]
[GuidAttribute("58E864B9-5AAB-4830-9384-0E3A48F976DC")]
[InterfaceTypeAttribute("1")]
[ExcludeFromProxyBuildAttribute]
public interface Microsoft.Internal.VisualStudio.Shell.Interop.IVsSolutionBatch {
    public abstract virtual int BatchProjectActionWithProjectDefinitions(UInt32 action, UInt32 flags, UInt32 numProjects, Guid[] projectGuids, IVsProjectDefinitionInSolution[] projectDefinitions, UInt32[] projectIndex, IVsBatchProjectActionContext& context);
}
[NullableContextAttribute("1")]
[InterfaceTypeAttribute("1")]
[GuidAttribute("CFA82F61-C8B0-49AC-B4F4-7CB30E4347F5")]
[ExcludeFromProxyBuildAttribute]
public interface Microsoft.Internal.VisualStudio.Shell.Interop.IVsSolutionBatchProjectActionEvents2 {
    public abstract virtual int OnBeforeBatchProjectReload(IVsBatchProjectActionContext pContext);
    public abstract virtual int OnBeforeBatchProjectUnload(IVsBatchProjectActionContext pContext);
    public abstract virtual int OnEndBatchProjectUnload(IVsBatchProjectActionContext pContext);
    public abstract virtual int OnBeforeBatchProjectLoad(IVsBatchProjectActionContext pContext);
    public abstract virtual int OnEndBatchProjectLoad(IVsBatchProjectActionContext pContext);
    public abstract virtual int OnEndBatchProjectReload(IVsBatchProjectActionContext pContext);
    public abstract virtual int OnBeforeBatchProjectRemove(IVsBatchProjectActionContext pContext);
    public abstract virtual int OnEndBatchProjectRemove(IVsBatchProjectActionContext pContext);
    public abstract virtual int OnBeforeBatchProjectAdd(IVsBatchProjectActionContext pContext);
    public abstract virtual int OnEndBatchProjectAdd(IVsBatchProjectActionContext pContext);
    public abstract virtual int OnBeforeBatchProjectParentUpdate(IVsBatchProjectActionContext pContext);
    public abstract virtual int OnEndBatchProjectParentUpdate(IVsBatchProjectActionContext pContext);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("71F69689-99E1-46C1-9A70-D8673679F810")]
public interface Microsoft.Internal.VisualStudio.Shell.Interop.IVsSolutionBuildManagerPrivate {
    public abstract virtual int GetNextBuildItemForUIThread(IVsHierarchy& ppIVsHierarchy);
}
[GuidAttribute("9F38FFF7-DCBE-47CE-BF3D-9EDCB2CF9CCE")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.Internal.VisualStudio.Shell.Interop.IVsSolutionBuildManagerPrivate2 {
    public abstract virtual UInt32 GetDebugLaunchFlags();
}
[GuidAttribute("26680A79-3896-4B57-BFD6-19A7BCF1B7CA")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.Internal.VisualStudio.Shell.Interop.IVsSolutionBuildOrderPrivate {
    public abstract virtual bool IsValid(UInt32& pValidationId);
    public abstract virtual UInt32 GetBuildOrderList(bool fForceRecalculation, UInt32 cProjects, VsProjectBuildOrder[] pBuildOrder, UInt32& pValidationId);
    public abstract virtual UInt32 GetBuildOrderForProject(bool fForceRecalculation, Guid& ProjectId, UInt32& pValidationId);
}
[GuidAttribute("8492F137-93B9-43B9-A391-F856DCF8C084")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.Internal.VisualStudio.Shell.Interop.IVsSolutionCloseTelemetryDataNeededEvents {
    public abstract virtual int OnTelemetryDataNeeded();
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("2844D2E6-AC0C-4FEE-A97A-F26C250BDB60")]
public interface Microsoft.Internal.VisualStudio.Shell.Interop.IVsSolutionConfigPlatformServicePrivate {
    public abstract virtual void SetCurrentSolutionConfig(string pszConfig);
    public abstract virtual void SetCurrentSolutionPlatform(string pszPlatform);
    public abstract virtual void GetSolutionConfigPlatformList(Array& psaConfigs, Array& psaPlatforms);
    public abstract virtual void GetCurrentSolutionConfigPlatform(String& pbstrCurrentConfig, String& pbstrCurrentPlatform);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("C0FFEEED-C037-428A-A799-DB3368D15531")]
public interface Microsoft.Internal.VisualStudio.Shell.Interop.IVsSolutionConfiguration {
    [DispIdAttribute("1610678272")]
public IVsConfigurationProvider ConfigurationProvider { get; }
    [DispIdAttribute("1610678274")]
public string CurrentConfig { get; public set; }
    [DispIdAttribute("1610678276")]
public string CurrentPlatform { get; public set; }
    public abstract virtual IVsConfigurationProvider get_ConfigurationProvider();
    public abstract virtual IVsEnumProjectConfigurations GetProjectConfigurations(Array solutionConfigurations);
    public abstract virtual string get_CurrentConfig();
    public abstract virtual void set_CurrentConfig(string value);
    public abstract virtual string get_CurrentPlatform();
    public abstract virtual void set_CurrentPlatform(string value);
    public abstract virtual void RenamePlatform(string oldName, string newName);
}
[GuidAttribute("AAB050B9-8E05-438C-9698-6736DF7A1DA9")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.Internal.VisualStudio.Shell.Interop.IVsSolutionDependencyManager {
    public abstract virtual void NotifyProjectDependencies(Guid guidProjectId, string pszProjectName, int cProjectDependenciesCount, Guid[] rgProjectDependenciesIds, int cUnknownProjectDependenciesCount, String[] rgpszUnknownProjectDependenciesPaths);
    public abstract virtual void NotifyProjectDependenciesAdded(Guid guidProjectId, string pszProjectName, int cProjectDependenciesCount, Guid[] rgProjectDependenciesIds, int cUnknownProjectDependenciesCount, String[] rgpszUnknownProjectDependenciesPaths);
    public abstract virtual void NotifyProjectDependenciesRemoved(Guid guidProjectId, string pszProjectName, int cProjectDependenciesCount, Guid[] rgProjectDependenciesIds, int cUnknownProjectDependenciesCount, String[] rgpszUnknownProjectDependenciesPaths);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("40D4A043-0ADB-402E-9E55-F763D3C651BD")]
public interface Microsoft.Internal.VisualStudio.Shell.Interop.IVsSolutionEventsPrivate {
    public abstract virtual int OnAfterOpenProjectInUI(IVsHierarchy pHierarchy, int fAdded);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("9E806018-E8B9-4760-8BA5-54F6112D530A")]
public interface Microsoft.Internal.VisualStudio.Shell.Interop.IVsSolutionExplorerActiveViewEvents {
    public abstract virtual void OnActiveViewChanged(string newActiveViewName);
}
[GuidAttribute("40B8E894-627D-47B2-9941-497FA35E9255")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.Internal.VisualStudio.Shell.Interop.IVsSolutionExplorerActiveViewServicePrivate {
    public abstract virtual UInt32 AdviseActiveViewChangedEvent(IVsSolutionExplorerActiveViewEvents pSink);
    public abstract virtual void UnadviseActiveViewChangedEvent(UInt32 cookie);
    public abstract virtual string GetActiveViewName();
    public abstract virtual bool IsSolutionViewActive();
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("FBC331F7-F08B-4DBD-9329-1019C68A7D22")]
public interface Microsoft.Internal.VisualStudio.Shell.Interop.IVsSolutionFiltersOperationsPrivate {
    public abstract virtual bool IsSolutionFilterOpen();
    public abstract virtual bool IsShowingUnloadedProjects();
    public abstract virtual string GetSolutionFilterFilePath();
    public abstract virtual void WriteSolutionFilterFile();
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("28B6CA5D-EE0D-4495-B1A1-861A2E8ED3E9")]
public interface Microsoft.Internal.VisualStudio.Shell.Interop.IVsSolutionFiltersPrivate {
    public abstract virtual Array GetProjectList(string pszFilterFilePath, String& pbstrSolutionPath);
    public abstract virtual void WriteFilterFile(string pszSolutionPath, string pszFilterFilePath, Array saLoadedProjects);
    public abstract virtual void WriteFilterFileToCustomLocation(string pszSolutionPath, string pszDefaultDirectory, Array saLoadedProjects, String& pbstrFilterFilePath);
    public abstract virtual bool ShowFilterDialog();
}
[NullableContextAttribute("1")]
[GuidAttribute("517bac19-cc03-4231-b731-b82faf9ee0c2")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.Internal.VisualStudio.Shell.Interop.IVsSolutionFolderModeHelper {
    public abstract virtual int OpenSolutionFileInternal(UInt32 grfOpenOpts, string solutionName, string folderName, string workingFolderName, bool isViewPickerOnlyMode);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("E591A150-93D5-45C4-B67E-5E455A2F88C8")]
public interface Microsoft.Internal.VisualStudio.Shell.Interop.IVsSolutionLoadPrefetchEvents {
    public abstract virtual void OnBeforeSolutionLoadBegins();
    public abstract virtual void OnBeforeSolutionInitialization();
    public abstract virtual void OnSolutionLoadComplete();
}
[GuidAttribute("5F9EF002-28D1-451D-A38C-C3D72FD66AA8")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.Internal.VisualStudio.Shell.Interop.IVsSolutionPrefetchPrivate {
    public abstract virtual void GetProjectLoadInfo(Array& psaProjectIds, Array& psaProjectFactoyIds, Array& psaProjectFiles);
    public abstract virtual void GetGlobalSection(string pszSectionName, Array& pbsaPropertyNames, Array& psaPropertyValues);
    public abstract virtual string GetActiveSolutionConfiguration();
}
[GuidAttribute("BCF80104-8C1A-4ABB-9859-CC8E90848926")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.Internal.VisualStudio.Shell.Interop.IVsSolutionPrivate2 {
    public abstract virtual int CreateOpenProjectOrSolutionWithDialogOperation(IVsOpenProjectOrSolutionWithDialogOperation& ppOpenOperation);
}
[GuidAttribute("4EABEC1F-465C-433E-B83F-76DADAC90343")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.Internal.VisualStudio.Shell.Interop.IVsSolutionPrivate3 {
    public abstract virtual IVsTask LoadSolutionOptionsAsync(bool fPreLoad, UInt32 grfLoadOpts);
    public abstract virtual IVsTask CloseSolutionElementAsync(UInt32 grfCloseOpts, IVsHierarchy pHier, UInt32 docCookie);
    public abstract virtual IVsTask CloseAsync();
}
[GuidAttribute("DB384F11-5C2E-424E-88D0-61BF9AEF094D")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.Internal.VisualStudio.Shell.Interop.IVsSolutionPrivateEvents {
    public abstract virtual void OnTemplateCreateBegin(string pszTemplatePath);
    public abstract virtual void OnTemplateCreateEnd(string pszTemplatePath);
    public abstract virtual void OnCreateProject(Guid& pguidProject, string pszProjectLocation);
}
[NullableContextAttribute("1")]
[GuidAttribute("F2A08192-B6FE-40BE-9223-488D3DDB2CC2")]
[InterfaceTypeAttribute("1")]
[ExcludeFromProxyBuildAttribute]
public interface Microsoft.Internal.VisualStudio.Shell.Interop.IVsSolutionReloadBatch2 {
    public UInt32 BatchId { get; }
    public UInt32 LastChangeId { get; }
    [ComAliasNameAttribute("SolutionReloadBatchStage")]
public UInt32 Stage { get; }
    public string HandlerId { get; }
    public bool HasSolutionReload { get; }
    public IVsTask BatchTask { get; }
    public bool RequestComplete { get; public set; }
    public bool RequestCancel { get; public set; }
    public abstract virtual UInt32 get_BatchId();
    public abstract virtual UInt32 get_LastChangeId();
    public abstract virtual UInt32 get_Stage();
    public abstract virtual string get_HandlerId();
    public abstract virtual bool get_HasSolutionReload();
    public abstract virtual IVsTask get_BatchTask();
    public abstract virtual bool get_RequestComplete();
    public abstract virtual void set_RequestComplete(bool value);
    public abstract virtual bool get_RequestCancel();
    public abstract virtual void set_RequestCancel(bool value);
    public abstract virtual void DisableChangeNotifications();
    public abstract virtual void IsFilesChanged(UInt32 dwFilesToCheck, String[] rgszFullFilePaths, Boolean[] rgIsChanged);
    public abstract virtual void GetProjectsAction(UInt32 dwProjectsToCheck, Guid[] rgGuidProjects, UInt32[] rgReloadAction);
    public abstract virtual bool TryAddSolutionReload();
    public abstract virtual bool TryAddProjectsReload(UInt32 reloadAction, UInt32 dwProjectsCount, Guid[] rgGuidProjects);
    public abstract virtual bool TryAddChangedFiles(UInt32 dwFileCount, String[] rgszFullFilePaths);
    public abstract virtual bool TryAddProjectsWithProjectDefinitions(UInt32 reloadAction, UInt32 numProjects, Guid[] projectGuids, IVsProjectDefinitionInSolution[] projectDefinitions);
}
[NullableContextAttribute("1")]
[GuidAttribute("53D9C819-07AF-41A7-B9C4-4A269C5A44A9")]
[InterfaceTypeAttribute("1")]
[ExcludeFromProxyBuildAttribute]
public interface Microsoft.Internal.VisualStudio.Shell.Interop.IVsSolutionReloadBatchHandler2 {
    public string HandlerId { get; }
    public abstract virtual string get_HandlerId();
    public abstract virtual bool CanGiveControl(IVsSolutionReloadBatchHandler pOther);
    public abstract virtual bool CanTakeControl(IVsSolutionReloadBatchHandler pCurrent);
    public abstract virtual bool CanJoin(IVsSolutionReloadBatchHandler pCurrent);
    public abstract virtual bool CanCommitBatch(IVsSolutionReloadBatch pBatch, UInt32 dwElapsedSinceFirstChange, UInt32 dwElapsedSinceLastChange, UInt32& pdwAskAgainTimeout);
    public abstract virtual bool CanCommitBatchUI(IVsSolutionReloadBatch pBatch, UInt32 dwElapsedSinceFirstChange, UInt32 dwElapsedSinceLastChange, UInt32& pdwAskAgainTimeout);
    public abstract virtual void ExecuteReloadUI(IVsSolutionReloadBatch pBatch, UInt32 dwProjectsToReload, Guid[] rgGuidProjects, UInt32[] rgReloadAction);
    public abstract virtual void ExecuteReloadWithProjectDefinitionsUI(IVsSolutionReloadBatch batch, UInt32 numProjects, Guid[] projectGuids, IVsProjectDefinitionInSolution[] projectDefinitions, UInt32[] reloadAction);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("3C5A5698-2FAC-40D3-99BA-D1E0EE5EDCD5")]
public interface Microsoft.Internal.VisualStudio.Shell.Interop.IVsSolutionReloadManagerEvents {
    public abstract virtual bool SyncAlreadyInProgress(IVsSolutionReloadBatch pBatch);
    public abstract virtual void BeginBatch(IVsSolutionReloadBatch pBatch);
    public abstract virtual void OnBatchHandlerChanged(IVsSolutionReloadBatch pBatch);
    public abstract virtual void OnComputeReload(IVsSolutionReloadBatch pBatch, UInt32 dwComputeLoop);
    public abstract virtual void OnBeforeBatchCommit(IVsSolutionReloadBatch pBatch);
    public abstract virtual void OnBatchCompleted(IVsSolutionReloadBatch pBatch);
}
[GuidAttribute("F0A6561B-8DD3-414A-8BFC-C023D8A99BB7")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.Internal.VisualStudio.Shell.Interop.IVsSolutionReloadManagerSupportPrivate {
    [DispIdAttribute("1610678272")]
public IVsSolutionReloadBatchHandler ExternalChangesTracker { get; }
    public abstract virtual IVsSolutionReloadBatchHandler get_ExternalChangesTracker();
    public abstract virtual void DisableChangeNotifications(bool fDisable);
}
[GuidAttribute("C0FFEEE0-2B7C-4DEF-BF14-3E5F92ED1C15")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.Internal.VisualStudio.Shell.Interop.IVsSolutionServicesProxy {
    [DispIdAttribute("1610678272")]
public IVsSolutionConfiguration SolutionConfiguration { get; }
    [DispIdAttribute("1610678273")]
public IVsSolutionStartupService SolutionStartupService { get; }
    public abstract virtual IVsSolutionConfiguration get_SolutionConfiguration();
    public abstract virtual IVsSolutionStartupService get_SolutionStartupService();
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("9C8369E4-CEFF-44FE-B5E0-93CC111B5712")]
public interface Microsoft.Internal.VisualStudio.Shell.Interop.IVsSolutionStartupService {
    [DispIdAttribute("1610678272")]
public IVsEnumProjectInfo AvailableStartupProjects { get; }
    [DispIdAttribute("1610678273")]
[ComAliasNameAttribute("Microsoft.Internal.VisualStudio.Shell.Interop.STARTUP_PROJECT_SETTING")]
public STARTUP_PROJECT_SETTING StartupMode { get; public set; }
    [DispIdAttribute("1610678275")]
public IVsProjectInfo DefaultStartupProject { get; }
    public abstract virtual IVsEnumProjectInfo get_AvailableStartupProjects();
    public abstract virtual STARTUP_PROJECT_SETTING get_StartupMode();
    public abstract virtual void set_StartupMode(STARTUP_PROJECT_SETTING value);
    public abstract virtual IVsProjectInfo get_DefaultStartupProject();
    public abstract virtual void SetDefaultStartupProject(Guid guid);
    public abstract virtual void SetProjectStartupSettings(Guid guid, ProjectStartupMode mode, ushort order);
    public abstract virtual void CommitChanges();
}
[GuidAttribute("A56FE542-E131-4804-AD30-B1BD4441314E")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.Internal.VisualStudio.Shell.Interop.IVsSolutionUIHierarchyWindowPrivate {
    public abstract virtual int GetProperty(int propid, Object& pvar);
    public abstract virtual int SetProperty(int propid, object var);
    public abstract virtual int StoreExpansionState(string pszStateName, IVsHierarchy pHier);
    public abstract virtual int RestoreExpansionState(string pszStateName, IVsHierarchy pHier);
}
[GuidAttribute("774FAAAD-4311-4E92-8B8B-D2759666D9C6")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.Internal.VisualStudio.Shell.Interop.IVsSolutionWorkingFolders {
    public abstract virtual void GetFolder(UInt32 location, Guid guidProject, bool fVersionSpecific, bool fEnsureCreated, Boolean& pfIsTemporary, String& pszBstrFullPath);
    public abstract virtual void GetMigrationFolder(UInt32 location, Guid guidProject, UInt32& pdwOldMajorVersion, String& pszOldLocation);
    public abstract virtual void ClearOldWorkingFolder(UInt32 location);
    public abstract virtual void ClearWorkingFolder(UInt32 location, bool fSaveAll, bool fReloadSolution);
}
[GuidAttribute("3584678F-DA35-4F62-AB2A-8092B281C1FA")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.Internal.VisualStudio.Shell.Interop.IVsSolutionWorkingFoldersEvents {
    public abstract virtual void OnQueryLocationChange(UInt32 location, Boolean& pfCanMoveContent);
    public abstract virtual void OnAfterLocationChange(UInt32 location, bool contentMoved);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("9E4BF44C-D592-418F-AD82-97A42C462D98")]
public interface Microsoft.Internal.VisualStudio.Shell.Interop.IVsStandardTemplateChangeDiscovery {
    public abstract virtual ulong GetStandardTemplateCacheLastWriteTime();
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("67335DF7-77E7-4520-AEDA-F374729356FB")]
public interface Microsoft.Internal.VisualStudio.Shell.Interop.IVsStartPagePrivate {
    public abstract virtual int GetDownloadState(UInt32& pVsSPDState);
    public abstract virtual int SetMarketingRssFeed(string pszMarketingRssFeed);
}
[NullableContextAttribute("1")]
[InterfaceTypeAttribute("1")]
[ExcludeFromProxyBuildAttribute]
[GuidAttribute("B60A40C1-2252-4C24-928C-EDDD4DDBB6E1")]
public interface Microsoft.Internal.VisualStudio.Shell.Interop.IVsStartupProjectPropertyPageProvider {
    public abstract virtual IPropertyPage GetPropertyPage();
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("2BF400F0-3BFB-4722-BDD7-C5335AB28452")]
public interface Microsoft.Internal.VisualStudio.Shell.Interop.IVsStatusbarPrivate {
    public abstract virtual int GetVisibility(Boolean& pfVisibility);
    public abstract virtual int SetVisibility(UInt32 dwVisibility);
    public abstract virtual int GetLineColChar(Int32[] piLine, Int32[] piCol, Int32[] piChar);
    public abstract virtual int SetReadyText(Boolean[] pbUpdated);
}
[GuidAttribute("9221B837-4DCF-4C38-B27C-8134135EA8D0")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.Internal.VisualStudio.Shell.Interop.IVsStorageContainerFactoryPrivate {
    public abstract virtual IVsSettingsStorageContainer GetStorageContainer(string categoryPath);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("70B69A2F-6D45-41C8-9185-904DEDD4A17B")]
public interface Microsoft.Internal.VisualStudio.Shell.Interop.IVsStubHierarchyPrivate {
    [DispIdAttribute("1610678272")]
public Guid ProjectGuid { get; }
    [DispIdAttribute("1610678273")]
public Guid ProjectFactoryGuid { get; }
    public abstract virtual Guid get_ProjectGuid();
    public abstract virtual Guid get_ProjectFactoryGuid();
}
[GuidAttribute("266E178E-46B9-4E95-910C-43AF54E3023C")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.Internal.VisualStudio.Shell.Interop.IVsStubWindowPrivate {
    [DispIdAttribute("1610678273")]
public Guid ProjectGuid { get; }
    public abstract virtual UInt32 EnsureLoaded();
    public abstract virtual Guid get_ProjectGuid();
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("54F5CB3F-8F96-4D4B-AFC9-F23672EE46FA")]
public interface Microsoft.Internal.VisualStudio.Shell.Interop.IVsSynthesizedProjectType {
    [DispIdAttribute("1610678272")]
public string ID { get; }
    [DispIdAttribute("1610678273")]
public string DisplayName { get; }
    [DispIdAttribute("1610678274")]
public int SortPriority { get; }
    public abstract virtual string get_ID();
    public abstract virtual string get_DisplayName();
    public abstract virtual int get_SortPriority();
}
[GuidAttribute("95A37C19-AE26-42AF-A040-5942893F0D76")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.Internal.VisualStudio.Shell.Interop.IVsSynthesizedTemplateProvider {
    [DispIdAttribute("1610678272")]
public Guid UniqueID { get; }
    [DispIdAttribute("1610678273")]
public string TemplatesDirectory { get; }
    [DispIdAttribute("1610678274")]
public bool NeedsRefresh { get; }
    [DispIdAttribute("1610678275")]
public IVsEnumSynthesizedProjectTypes EnumSynthesizedProjectTypes { get; }
    public abstract virtual Guid get_UniqueID();
    public abstract virtual string get_TemplatesDirectory();
    public abstract virtual bool get_NeedsRefresh();
    public abstract virtual IVsEnumSynthesizedProjectTypes get_EnumSynthesizedProjectTypes();
    public abstract virtual void RefreshIfNecessary();
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("4362B161-8F8E-4797-9929-FDE760924F17")]
public interface Microsoft.Internal.VisualStudio.Shell.Interop.IVsSynthesizedTemplateProviderManager {
    [DispIdAttribute("1610678272")]
public string TemplatesRootDirectory { get; }
    [DispIdAttribute("1610678273")]
public IVsEnumSynthesizedTemplateProviders ProjectTemplateProviders { get; }
    public abstract virtual string get_TemplatesRootDirectory();
    public abstract virtual IVsEnumSynthesizedTemplateProviders get_ProjectTemplateProviders();
}
[GuidAttribute("BFF1F22C-8DD2-4B32-922B-C491B44C82A8")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.Internal.VisualStudio.Shell.Interop.IVsTargetPlatform {
    [DispIdAttribute("1610678272")]
public string Name { get; }
    [DispIdAttribute("1610678273")]
public string DisplayName { get; }
    [DispIdAttribute("1610678274")]
public string Version { get; }
    [DispIdAttribute("1610678275")]
public string ProjectNameSuffix { get; }
    public abstract virtual string get_Name();
    public abstract virtual string get_DisplayName();
    public abstract virtual string get_Version();
    public abstract virtual string get_ProjectNameSuffix();
    public abstract virtual string GetSpecialProjectTemplate(UInt32 type, string szLanguage, string szOneAppCapabilities);
}
[GuidAttribute("51FB89D5-B272-4721-8268-F003B8823CE1")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.Internal.VisualStudio.Shell.Interop.IVsTargetPlatformCatalog {
    public abstract virtual IVsTargetPlatform GetTargetPlatform(string szName, string szVersion);
    public abstract virtual IVsEnumTargetPlatforms EnumTargetPlatforms();
    public abstract virtual IVsEnumTargetPlatforms GetCompatibleTargetPlatforms(IVsTargetPlatform pTargetPlatform);
    public abstract virtual void RegisterSpecialProjectTemplate(string szPlatformName, string szPlatformVersion, string szSpecialTemplatesType, string szLanguage, string szAppliesTo, UInt32 templateLocale, string szTemplatePath);
}
[GuidAttribute("B5694DBF-D6F8-4D10-A224-DBF3EB8EE2EA")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.Internal.VisualStudio.Shell.Interop.IVsTaskCoroutineHost {
    public abstract virtual void GetCoroutineContext(IVsTaskSchedulerService& ppScheduler, UInt32& pTaskCreationOptions, Boolean& pfAllowBackgroundContext);
}
[NullableContextAttribute("1")]
[GuidAttribute("15c32802-6cc9-4581-a952-70febcc2190e")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.Internal.VisualStudio.Shell.Interop.IVsTelemetryAdapter {
    public abstract virtual IVsTelemetryEvent WrapEvent(object telemetryEvent);
}
[GuidAttribute("7AD42DD3-22E0-4552-B940-95814657CA17")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.Internal.VisualStudio.Shell.Interop.IVsTelemetryAssetProvider {
    public abstract virtual bool PostAsset(string szAssetId, IVsTelemetryEventCorrelation Correlation);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("3BE60E5E-C48F-43BE-A927-67CE640F24BB")]
public interface Microsoft.Internal.VisualStudio.Shell.Interop.IVsTelemetryContext2 {
    [DispIdAttribute("1610678272")]
public string ContextName { get; }
    public abstract virtual string get_ContextName();
    public abstract virtual object GetProperty(string szPropertyName);
    public abstract virtual void PostProperty(string szPropertyName, object varValue);
    public abstract virtual void PostBoolProperty(string szPropertyName, bool value);
    public abstract virtual void PostDoubleProperty(string szPropertyName, double value);
    public abstract virtual void PostIntProperty(string szPropertyName, int value);
    public abstract virtual void PostLongProperty(string szPropertyName, long value);
    public abstract virtual void PostShortProperty(string szPropertyName, short value);
    public abstract virtual void PostStringProperty(string szPropertyName, string szValue);
    public abstract virtual void SetSharedProperty(string szPropertyName, object varValue);
    public abstract virtual void SetSharedBoolProperty(string szPropertyName, bool value);
    public abstract virtual void SetSharedDoubleProperty(string szPropertyName, double value);
    public abstract virtual void SetSharedIntProperty(string szPropertyName, int value);
    public abstract virtual void SetSharedLongProperty(string szPropertyName, long value);
    public abstract virtual void SetSharedShortProperty(string szPropertyName, short value);
    public abstract virtual void SetSharedStringProperty(string szPropertyName, string szValue);
    public abstract virtual void RemoveSharedProperty(string szPropertyName);
    public abstract virtual void Close();
    public abstract virtual void PostPiiProperty(string szPropertyName, object varValue);
    public abstract virtual void PostIntPiiProperty(string szPropertyName, int varValue);
    public abstract virtual void PostLongPiiProperty(string szPropertyName, long varValue);
    public abstract virtual void PostDoublePiiProperty(string szPropertyName, double varValue);
    public abstract virtual void PostStringPiiProperty(string szPropertyName, string varValue);
    public abstract virtual void SetSharedPiiProperty(string szPropertyName, object varValue);
    public abstract virtual void SetSharedIntPiiProperty(string szPropertyName, int varValue);
    public abstract virtual void SetSharedLongPiiProperty(string szPropertyName, long varValue);
    public abstract virtual void SetSharedDoublePiiProperty(string szPropertyName, double varValue);
    public abstract virtual void SetSharedStringPiiProperty(string szPropertyName, string varValue);
    public abstract virtual void PostMetricProperty(string szPropertyName, double value);
    public abstract virtual void SetSharedMetricProperty(string szPropertyName, double value);
    public abstract virtual void PostSettingProperty(string szPropertyName, object varValue);
    public abstract virtual void PostBoolSettingProperty(string szPropertyName, bool value);
    public abstract virtual void PostIntSettingProperty(string szPropertyName, int varValue);
    public abstract virtual void PostLongSettingProperty(string szPropertyName, long varValue);
    public abstract virtual void PostDoubleSettingProperty(string szPropertyName, double varValue);
    public abstract virtual void PostStringSettingProperty(string szPropertyName, string varValue);
    public abstract virtual void SetSharedSettingProperty(string szPropertyName, object varValue);
    public abstract virtual void SetSharedBoolSettingProperty(string szPropertyName, bool value);
    public abstract virtual void SetSharedIntSettingProperty(string szPropertyName, int varValue);
    public abstract virtual void SetSharedLongSettingProperty(string szPropertyName, long varValue);
    public abstract virtual void SetSharedDoubleSettingProperty(string szPropertyName, double varValue);
    public abstract virtual void SetSharedStringSettingProperty(string szPropertyName, string varValue);
}
[GuidAttribute("FA822E3B-A634-4BC6-9EB4-1020A574962B")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.Internal.VisualStudio.Shell.Interop.IVsTelemetryDiagnostics {
    public abstract virtual void AttachTestChannel(IVsTelemetryTestChannel testChannelObject);
    public abstract virtual void DetachTestChannel(IVsTelemetryTestChannel testChannelObject);
}
[NullableContextAttribute("1")]
[GuidAttribute("5AAA1EC2-7E0C-4162-8C53-34A45014AB46")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.Internal.VisualStudio.Shell.Interop.IVsTelemetryHasherService {
    public abstract virtual string EncodeUTF8HashSHA256AsHex(string data);
}
[GuidAttribute("AFAD8E50-87BC-4BA3-A16E-1284D276C94B")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.Internal.VisualStudio.Shell.Interop.IVsTelemetryOptInManager {
    public abstract virtual bool GetOptInStatus(Boolean& hasChosenUserPreference);
    public abstract virtual void SetOptInStatus(bool isOptedIn);
    public abstract virtual bool GetGroupPolicyOptInSet();
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("A5CF49DB-B89F-4623-A3C4-B4309BADECB9")]
public interface Microsoft.Internal.VisualStudio.Shell.Interop.IVsTelemetrySession3 {
    public abstract virtual long GetTimeSinceSessionStart();
}
[GuidAttribute("30E48091-E674-45C4-BBC3-7A1D34649BAF")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.Internal.VisualStudio.Shell.Interop.IVsTelemetryTestChannel {
    public abstract virtual void OnPostedEvent(IVsTelemetryEvent eventObject);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("288E2BBF-C817-4ADF-81F1-E2E16E8FFE2D")]
public interface Microsoft.Internal.VisualStudio.Shell.Interop.IVsTemplateDiscovery {
    public abstract virtual int GetTemplateTree(IVsInternalTemplateTreeNode& ppNode);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("E9A9810A-C254-4502-A527-7962EBC1BE89")]
public interface Microsoft.Internal.VisualStudio.Shell.Interop.IVsTemplateDiscoveryFactory {
    public abstract virtual int GetProjectDiscovery(int fAddNewProjectDialog, string pszTemplateDir, UInt32 cnpvdeFlags, IVsTemplateDiscovery& ppTemplateDiscovery);
    public abstract virtual int GetItemDiscovery(Guid& guidProject, UInt32 dwFlags, int fUseNewWebItemDlg, UInt32 newWebItemOptions, IVsTemplateDiscovery& ppTemplateDiscovery);
    public abstract virtual int UpdateExtensionManagerTemplates(int bProject);
    public abstract virtual int GetExtensionTemplateCacheDir(int bProject, string pszTemplateDir, string pszUniqueId, String& pCacheDir);
    public abstract virtual int SetSuppressNextWindowActivationMacro(int bFlag);
    public abstract virtual int CanCreateProjectAtLocation(int bCreateNewProject, string pszMoniker, string pszProjectPath, string pszProjectName, UInt32 fCreateFlags);
    public abstract virtual int GetOpenWithEditorInfo(int fMultiFileOpen, int fAllowCodePageEditors, string pwzFileName, string pwzEditorName, IVsProjectSpecificEditorMap2 pProjectSpecificEditorMap, Guid& pguidEditor, String& pbstrPhysicalView, Guid& pguidLogicalView);
}
[GuidAttribute("c3c0d321-821f-4c3e-9d72-56c1e23159a0")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.Internal.VisualStudio.Shell.Interop.IVsTemplateDiscoveryInternal {
    public abstract virtual void PrepareLoad();
}
[GuidAttribute("AC648A93-3D0A-4431-AC86-85C2D704D99D")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.Internal.VisualStudio.Shell.Interop.IVsTemplateSetupService {
    public abstract virtual void RefreshSetupData();
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("35165EF3-3C41-4BDC-8C0D-A8BFC6250395")]
public interface Microsoft.Internal.VisualStudio.Shell.Interop.IVsTestContract {
    public abstract virtual void Initialize();
    public abstract virtual void Terminate();
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("274B37B4-72B5-4A8C-B755-4BACF70C78E0")]
public interface Microsoft.Internal.VisualStudio.Shell.Interop.IVsTestContractsService {
    public abstract virtual void InitializeContracts();
    public abstract virtual void TerminateContracts();
}
[GuidAttribute("D6D5F04C-9D73-429B-BA3F-2EF4AB2B1692")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.Internal.VisualStudio.Shell.Interop.IVsThemeChangeEvents {
    public abstract virtual void OnThemeChanged(IVsColorTheme theme);
}
[GuidAttribute("756F1DC9-47FA-42C5-9C06-252B54148EB8")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.Internal.VisualStudio.Shell.Interop.IVsTippingService {
    public abstract virtual void RequestCalloutDisplay(Guid clientId, Guid calloutId, string title, string message, bool isPermanentlyDismissible, POINT anchor, Guid vsCommandGroupId, UInt32 vsCommandId);
}
[GuidAttribute("F1C587C8-8681-4B92-8401-A19A4707BBCC")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.Internal.VisualStudio.Shell.Interop.IVsToolbarSetPrivate {
    public abstract virtual int GetToolbars(IVsUICollection& ppToolbars);
    public abstract virtual int GetPackedModelId(Guid& rGuid, UInt32 dwId, UInt64& pID);
    public abstract virtual int GetToolbar(ulong id, IVsUIDataSource& ppToolbar);
    public abstract virtual int AddToolbar(ulong id, VSTWT_LOCATION dwLocation, bool copyToolbarData);
    public abstract virtual int RemoveToolbar(ulong id);
    public abstract virtual int Reset();
    public abstract virtual int Clear();
    public abstract virtual int Update();
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("325FBC20-F80A-4422-B7B6-97798682E91D")]
public interface Microsoft.Internal.VisualStudio.Shell.Interop.IVsToolbarSetPrivate2 {
    public abstract virtual int GetToolbars(IVsUICollection& ppToolbars);
    public abstract virtual int GetPackedModelId(Guid& rGuid, UInt32 dwId, UInt64& pID);
    public abstract virtual int GetToolbar(ulong id, IVsUIDataSource& ppToolbar);
    public abstract virtual int AddToolbar(ulong id, VSTWT_LOCATION dwLocation, bool copyToolbarData);
    public abstract virtual int RemoveToolbar(ulong id);
    public abstract virtual int Reset();
    public abstract virtual int Clear();
    public abstract virtual int Update();
    public abstract virtual int AddToolbar2(ulong ID, VSTWT_LOCATION dwLocation, bool copyToolbarData, IOleCommandTarget commandTarget);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("3F5AA68D-62DC-4854-A907-2EF769CD287D")]
public interface Microsoft.Internal.VisualStudio.Shell.Interop.IVsToolbarSetProviderPrivate {
    public abstract virtual int CreateAndRegisterToolbarSet(IOleCommandTarget pCommandTarget, IVsToolbarSetPrivate& ppToolbarSet);
    public abstract virtual int UnregisterToolbarSet(IVsToolbarSetPrivate pToolbarSet);
    public abstract virtual int Reset();
}
[GuidAttribute("265CF9ED-6AFC-410F-BC1D-8952D27236D1")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.Internal.VisualStudio.Shell.Interop.IVsToolboxContentLoader2 {
    public abstract virtual void LoadAllContentAsync(Guid& package, IVsTask& ppTask);
}
[GuidAttribute("F2ADA484-267B-4222-A64E-0D894392C619")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.Internal.VisualStudio.Shell.Interop.IVsToolboxCustomizePrivate {
    public bool ShouldShowSelectionTool { get; }
    public abstract virtual bool get_ShouldShowSelectionTool();
}
[GuidAttribute("CD377764-B2EA-4CC3-A243-A37664A0EA57")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.Internal.VisualStudio.Shell.Interop.IVsToolboxCustomizePrivate2 {
    [DispIdAttribute("1610678272")]
public bool ShouldEnableInDebugMode { get; }
    public abstract virtual bool get_ShouldEnableInDebugMode();
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("54CE78AF-603D-463D-BE17-50DBBB766A1C")]
public interface Microsoft.Internal.VisualStudio.Shell.Interop.IVsToolboxPackageInitPrivate {
    public abstract virtual IVsTask UpdateToolboxAsync(bool fFirstTimeInit);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("95EA4B2F-530C-47B0-AB18-DAE79B888570")]
public interface Microsoft.Internal.VisualStudio.Shell.Interop.IVsToolboxPrivate2 {
    public abstract virtual void ReloadCacheFile();
    public abstract virtual void InsertItem(IDataObject pDO, TBXITEMINFO[] ptif, string pszTab, Guid& guidPkg, int index);
    public abstract virtual void InsertTab(string lpszTab, VSTBXTABVIEW tv, Guid& guidPkg, int index, Boolean& pfSuccess);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("40BBD04C-B9F3-43A2-9DFE-7FC3A331639B")]
public interface Microsoft.Internal.VisualStudio.Shell.Interop.IVsToolboxPrivate3 {
    public abstract virtual IVsTask InsertItemAsync(IDataObject pDO, TBXITEMINFO[] ptif, string pszTab, Guid& guidPkg, int index);
    public abstract virtual IVsTask LazyInitDataFormatAsync(IDataObject pDataObj, FORMATETC[] pFormat);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("7FD343B5-3EEF-4E21-BADB-593519F496B9")]
public interface Microsoft.Internal.VisualStudio.Shell.Interop.IVsToolsOptionsPrivate {
    [DispIdAttribute("1610678272")]
public IVsWindowSearchHost WindowSearchHost { get; }
    [DispIdAttribute("1610678273")]
public bool ShowAllSettingsAvailable { get; }
    [DispIdAttribute("1610678274")]
public bool ShowAllSettings { get; public set; }
    public abstract virtual IVsWindowSearchHost get_WindowSearchHost();
    public abstract virtual bool get_ShowAllSettingsAvailable();
    public abstract virtual bool get_ShowAllSettings();
    public abstract virtual void set_ShowAllSettings(bool value);
    public abstract virtual void CloseToolsOptions();
}
[GuidAttribute("55DFA52D-5CDD-4998-99A8-FD06EF9FACD2")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.Internal.VisualStudio.Shell.Interop.IVsToolsOptionsPrivate2 {
    public abstract virtual void CloseToolsOptions(bool applyChanges);
    public abstract virtual int GetHierarchyNodeCount();
    public abstract virtual ToolsOptionsHierarchyNode GetHierarchyNode(int index);
    public abstract virtual void ShowToolsOptions(Guid selectedPageId);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("3D58BEF4-B46B-40DB-9999-C337910D5B66")]
public interface Microsoft.Internal.VisualStudio.Shell.Interop.IVsTrackProjectRetargetingDialogDataSourcePrivate {
    [DispIdAttribute("1610678272")]
public Array GroupDataSources { get; }
    [DispIdAttribute("1610678273")]
public bool IsBackupChecked { get; public set; }
    public abstract virtual Array get_GroupDataSources();
    public abstract virtual bool get_IsBackupChecked();
    public abstract virtual void set_IsBackupChecked(bool value);
    public abstract virtual void CommandContinue();
    public abstract virtual void CommandCancel();
    public abstract virtual void CommandClose();
}
[GuidAttribute("5D5710C1-E5E6-40D0-A7B3-E0C65FED09E6")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.Internal.VisualStudio.Shell.Interop.IVsTrackProjectRetargetingGroupDataSourcePrivate {
    [DispIdAttribute("1610678272")]
public string Title { get; }
    [DispIdAttribute("1610678273")]
public string Description { get; }
    [DispIdAttribute("1610678274")]
public Array ProjectDataSources { get; }
    public abstract virtual string get_Title();
    public abstract virtual string get_Description();
    public abstract virtual Array get_ProjectDataSources();
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("DFDDB4B2-458B-4011-8DED-EA19F8D79D4F")]
public interface Microsoft.Internal.VisualStudio.Shell.Interop.IVsTrackProjectRetargetingGroupDataSourcePrivate2 {
    [DispIdAttribute("1610678272")]
public string Title { get; }
    [DispIdAttribute("1610678273")]
public string Description { get; }
    [DispIdAttribute("1610678274")]
public Array ProjectDataSources { get; }
    public abstract virtual string get_Title();
    public abstract virtual string get_Description();
    public abstract virtual Array get_ProjectDataSources();
    public abstract virtual Array GetRetargetParameters();
    public abstract virtual string GetRetargetParameterDisplayName(string parameter);
    public abstract virtual Array GetPossibleParameterValues(string parameter);
    public abstract virtual string GetParameterValue(string parameter);
    public abstract virtual void PutParameterValue(string parameter, string pValue);
    public abstract virtual string GetValueDisplayName(string parameter, string pValue);
    public abstract virtual bool IsControlEnabled();
    public abstract virtual int NumPropertiesInDialog();
    public abstract virtual int NumValuesInProperty(string parameter);
}
[GuidAttribute("F9839F5A-3AB3-487E-A915-7E5ABB1DADA7")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.Internal.VisualStudio.Shell.Interop.IVsTrackProjectRetargetingInternal {
    public abstract virtual int OnSetTargetFramework(IVsHierarchy pHier, string currentTargetFramework, string newTargetFramework, IVsSetTargetFrameworkWorkerCallback pWorkerCallback, bool ReloadProject);
    public abstract virtual int AdviseTrackProjectRetargetingEvents(IVsTrackProjectRetargetingEvents pEventSink, UInt32& pdwCookie);
    public abstract virtual int UnadviseTrackProjectRetargetingEvents(UInt32 dwCookie);
    public abstract virtual int AdviseTrackBatchRetargetingEvents(IVsTrackBatchRetargetingEvents pEventSink, UInt32& pdwCookie);
    public abstract virtual int UnadviseTrackBatchRetargetingEvents(UInt32 dwCookie);
    public abstract virtual int BeginRetargetingBatch();
    public abstract virtual int BatchRetargetProject(IVsHierarchy pHier, string newTargetFramework, bool unloadProjectIfErrorOrCancel);
    public abstract virtual int EndRetargetingBatch();
    public abstract virtual int RegisterProjectTarget(IVsProjectTargetDescription pTarget);
    public abstract virtual int UnregisterProjectTarget(Guid TargetId);
    public abstract virtual int GetProjectTarget(Guid TargetId, IVsProjectTargetDescription& pTarget);
    public abstract virtual int BeginRetargetingBatchEx(UInt32 dwFlags);
    public abstract virtual int CheckSolutionForRetarget(UInt32 dwFlags);
    public abstract virtual int CheckForProjectRetarget(UInt32 dwFlags, IVsHierarchy pHier);
    public abstract virtual int PromptForProjectRetarget(IVsHierarchy pHier, IVsProjectTargetChange pTarget, string szDescription);
    public abstract virtual int RegisterSetupDriver(Guid driverId, IVsProjectAcquisitionSetupDriver pDriver);
    public abstract virtual int GetSetupDriver(Guid driverId, IVsProjectAcquisitionSetupDriver& pDriver);
    public abstract virtual int UnregisterSetupDriver(Guid driverId);
    public abstract virtual int PromptForUnknownProject(string szFile, Guid ProjectId, IVsInstallBundleInfo pInstallBundle);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("5CFED15E-A681-4673-B5BD-C2AA044C8CB4")]
public interface Microsoft.Internal.VisualStudio.Shell.Interop.IVsTrackProjectRetargetingPrivate {
    [DispIdAttribute("1610678272")]
public IVsTrackProjectRetargetingTestHook TestHook { get; public set; }
    public abstract virtual IVsTrackProjectRetargetingTestHook get_TestHook();
    public abstract virtual void set_TestHook(IVsTrackProjectRetargetingTestHook value);
}
[GuidAttribute("5CEB6DB5-D8B9-4D3F-AF8B-A7A8A13BEFEC")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.Internal.VisualStudio.Shell.Interop.IVsTrackProjectRetargetingProjectDataSourcePrivate {
    [DispIdAttribute("1610678272")]
public bool IsChecked { get; public set; }
    [DispIdAttribute("1610678274")]
public bool IsCheckable { get; }
    [DispIdAttribute("1610678275")]
public string ProjectDisplayName { get; }
    [DispIdAttribute("1610678276")]
public string ProjectFullPath { get; }
    [DispIdAttribute("1610678277")]
public bool IsVisible { get; }
    public abstract virtual bool get_IsChecked();
    public abstract virtual void set_IsChecked(bool value);
    public abstract virtual bool get_IsCheckable();
    public abstract virtual string get_ProjectDisplayName();
    public abstract virtual string get_ProjectFullPath();
    public abstract virtual bool get_IsVisible();
}
[GuidAttribute("C7639EFA-C388-4846-8276-4915B9F32982")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.Internal.VisualStudio.Shell.Interop.IVsTrackProjectRetargetingTestHook {
    public abstract virtual void OnTopLevelRetargetBatchStart(UInt32& pFlags);
    public abstract virtual void OnCheckSolutionForRetarget(UInt32 flags);
    public abstract virtual void OnCheckForProjectRetarget(UInt32 flags, IVsHierarchy pHier);
    public abstract virtual void OnPromptForProjectRetarget(IVsHierarchy pHier, IVsProjectTargetChange& ppTarget, String& szDescription);
    public abstract virtual void OnAcquireRetargetingInterface(IVsHierarchy pHier, Object& pRetargetProject);
    public abstract virtual void OnQueryProjectForRetarget(IVsHierarchy pHier, IVsProjectTargetChange& ppTarget);
    public abstract virtual void OnTopLevelRetargetBatchEnd(UInt32 flags, UInt32 ProjectsToRetarget, UInt32 ProjectsToChangeFramework);
    public abstract virtual void OnProjectRetargetingDialogActivated(IVsTrackProjectRetargetingDialogDataSourcePrivate pProjectRetargetingDialogDataSource);
    public abstract virtual void OnQueryAffectedFiles(IVsHierarchy pHier, Array MkDocuments);
    public abstract virtual void OnCheckoutFiles(Array MkDocuments, bool canceled);
    public abstract virtual void OnProjectUnloaded(string szUniqueName, UInt32 unloadReason);
    public abstract virtual void OnProjectRetargetBegin(string szUniqueName, UInt32& dwOptions, String& backupLocation, Boolean& cancel);
    public abstract virtual void OnProjectRetargetEnd(string szUniqueName, bool succeed);
    public abstract virtual void OnProjectReloaded(string szUniqueName);
    public abstract virtual void OnAllRetargetingCompleted(UInt32 retargetdSuccessfuly, UInt32 retargetdFailed, UInt32 retargetdCanceled);
}
[GuidAttribute("FA54CD7A-0D8D-4045-A636-983979E6ADB4")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.Internal.VisualStudio.Shell.Interop.IVsTrackSelectionExPrivate {
    public abstract virtual int SetSelectionMonitor(IVsMonitorSelection pLocalSelMon);
    public abstract virtual int SetParentContext(IVsTrackSelectionExPrivate pParentContext);
    public abstract virtual int SetUserContext(IVsUserContext pUC);
    public abstract virtual int GetFlags(UInt32& pdwFlags);
    public abstract virtual int SetFlags(UInt32 dwFlags);
    public abstract virtual int GetSelElem(UInt32 elementid, Object& varValue, Int32& fDontPropagate, IVsTrackSelectionEx& ppActualContext);
    public abstract virtual int Register();
    public abstract virtual int Revoke();
    public abstract virtual int Invalidate();
    public abstract virtual int Update();
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("B957E62C-A5E4-4C0A-B33F-51EDEABFF367")]
public interface Microsoft.Internal.VisualStudio.Shell.Interop.IVsUIBoundCollectionProperty {
    public bool CanReset { get; }
    public bool CanWrite { get; }
    public string Name { get; }
    public string Type { get; }
    public abstract virtual void ResetValue(object owner);
    public abstract virtual bool get_CanReset();
    public abstract virtual bool get_CanWrite();
    public abstract virtual string get_Name();
    public abstract virtual string get_Type();
    public abstract virtual IVsUICollection GetValue(object owner);
    public abstract virtual void SetValue(object owner, IVsUICollection collectionVal);
}
[GuidAttribute("B47682C3-726D-48F0-BCC9-247C8D1C4E1F")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.Internal.VisualStudio.Shell.Interop.IVsUIBoundDataSourceProperty {
    public bool CanReset { get; }
    public bool CanWrite { get; }
    public string Name { get; }
    public string Type { get; }
    public abstract virtual void ResetValue(object owner);
    public abstract virtual bool get_CanReset();
    public abstract virtual bool get_CanWrite();
    public abstract virtual string get_Name();
    public abstract virtual string get_Type();
    public abstract virtual IVsUIDataSource GetValue(object owner);
    public abstract virtual void SetValue(object owner, IVsUIDataSource dataSourceVal);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("6E4A81AA-6694-4261-940D-837D8991DBA4")]
public interface Microsoft.Internal.VisualStudio.Shell.Interop.IVsUIBoundFormattedProperty {
    public bool CanReset { get; }
    public bool CanWrite { get; }
    public string Name { get; }
    public string Type { get; }
    public abstract virtual void ResetValue(object owner);
    public abstract virtual bool get_CanReset();
    public abstract virtual bool get_CanWrite();
    public abstract virtual string get_Name();
    public abstract virtual string get_Type();
    public abstract virtual IVsUIObject GetValue(object owner);
    public abstract virtual void SetValue(object owner, IVsUIObject pValue);
}
[NullableContextAttribute("1")]
[InterfaceTypeAttribute("1")]
[GuidAttribute("331b3e9c-127d-4c0a-b6e3-34684ea95eee")]
[ExcludeFromIDLAttribute]
public interface Microsoft.Internal.VisualStudio.Shell.Interop.IVsUIContextManagerPrivate {
    public abstract virtual void InvokeCallbackUnderLock(Guid[] contextsToLock, UnderLockCallback callback);
}
[GuidAttribute("16AA2B8B-4EB9-485F-BA4E-D6148C29FB19")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.Internal.VisualStudio.Shell.Interop.IVsUIHierarchyEventsPrivate {
    public abstract virtual void DemandLoadHierarchy();
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("89205FFC-0407-4ED1-AA7B-58872E4BAE47")]
public interface Microsoft.Internal.VisualStudio.Shell.Interop.IVsUIMemorySectionBitmapPrivate {
    public abstract virtual int GetMemorySectionInfo(MemorySectionInfoPrivate[] pInfo);
}
[NullableContextAttribute("1")]
[GuidAttribute("71F26281-9841-43EC-A730-36D39AD0AC56")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.Internal.VisualStudio.Shell.Interop.IVsUIShellOpenDocumentPrivate2 {
    public abstract virtual int OpenStandardEditorAsync(__VSOSEFLAGS grfOpenStandard, string pszMkDocument, Guid guidLogicalView, string pszOwnerCaption, IVsUIHierarchy pHier, UInt32 itemid, IntPtr punkDocDataExisting, IServiceProvider pSP, IVsTask& windowFrame);
    public abstract virtual int GetStandardEditorFactoryAsync(UInt32 dwReserved, Guid& pguidEditorType, string pszMkDocument, Guid guidLogicalView, bool fShouldReturnPhysicalView, IVsTask& ppTask);
}
[NullableContextAttribute("1")]
[GuidAttribute("8F00BD47-6A8B-4F55-944E-8558229942E5")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.Internal.VisualStudio.Shell.Interop.IVsUIShellOpenDocumentPrivateShim {
    public UInt32 g_dwDocWinIdShim { get; }
    [ComAliasNameAttribute("VSNEWDOCUMENTSTATE")]
public UInt32 NewDocumentState { get; public set; }
    public abstract virtual bool IsReadableFileShim(string filePath);
    public abstract virtual int ExecProgramShim(string pwzExecutable, string pwzParam, UInt32& ppid, bool fAddQuotes);
    public abstract virtual int GetExternalEditorFactoryShim(IVsEditorFactory& res);
    public abstract virtual int GetChosenEditorFactoryShim(IVsEditorFactory pEF, Guid& modreq(System.Runtime.InteropServices.InAttribute) rguidEditorType, string pszMkDocument, object punkDocDataExisting, string pszPhysicalView, Guid& modreq(System.Runtime.InteropServices.InAttribute) rguidLogicalView, IVsHierarchy pvHier, UInt32 itemid, Guid& pguidEditorTypeActual, String& pbstrPhysicalViewActual, Guid& pguidLogicalViewActual, IVsEditorFactory& ppEFActual);
    public abstract virtual int GetEditorFactoryIfIntellisenseIsNotAvailableShim(IVsEditorFactory pEF, UInt32 grfEditorFlags, string pszMkDocument, Guid& modreq(System.Runtime.InteropServices.InAttribute) pguidEditorTypeActual, String& pbstrEditorCaption, Guid& pguidcmdUI, string pszPhysicalViewActual, Guid& modreq(System.Runtime.InteropServices.InAttribute) rguidLogicalViewActual, Guid& modreq(System.Runtime.InteropServices.InAttribute) rguidProjectId, IVsEditorFactory& ppEFActual, Boolean& pIsIntellisenseInProgress, Int64& pIntellisenseVersion);
    public abstract virtual int GetEditorOfGuidShim(Guid& modreq(System.Runtime.InteropServices.InAttribute) rguidEditorType, IVsEditorFactory& res);
    public abstract virtual int CheckTrustLevelOfWizardShim(string pszMkDocument, Guid& modreq(System.Runtime.InteropServices.InAttribute) rguidEditorType, Guid& modreq(System.Runtime.InteropServices.InAttribute) rguidLogicalView);
    public abstract virtual int GetOpenEditorTelemetryActivityShim(IVsTelemetryActivity& IVsTelemetryActivity);
    public abstract virtual UInt32 get_g_dwDocWinIdShim();
    public abstract virtual UInt32 get_NewDocumentState();
    public abstract virtual void set_NewDocumentState(UInt32 value);
}
[GuidAttribute("472DA35D-30E4-4254-87C0-735A1C8F11E0")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.Internal.VisualStudio.Shell.Interop.IVsUIWPFElementContainerPrivate {
    public abstract virtual int GetHandle(IntPtr& pHandle);
    public abstract virtual int ShowWindow();
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("5B074157-F1C7-4A1B-BD32-66666F4E4B3B")]
public interface Microsoft.Internal.VisualStudio.Shell.Interop.IVsUIWpfHostPrivate {
    public abstract virtual int RaiseThreadMessage(MSG& msg, Boolean& pResult);
    public abstract virtual int RaiseIdle();
    public abstract virtual int VerifySynchronizationContext();
    public abstract virtual int InvokeShutdown();
    public abstract virtual int EnableUnhandledExceptionDisplay();
    public abstract virtual int RegisterComponentForModalTracking(IOleComponentManager pComponentManager, UInt32 dwComponentId);
    public abstract virtual int CreateWPFUIElementContainer(string szWindowType, IntPtr hWndParent, IVsUIElement pElement, IVsUIDataSource pDataSource, object pSite, IVsUIWPFElementContainerPrivate& ppElementContainer);
    public abstract virtual int InvokeRender();
}
[NullableContextAttribute("2")]
[GuidAttribute("44d27aa1-e608-40e8-8127-5d860f235ae8")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.Internal.VisualStudio.Shell.Interop.IVsUnifiedSettingChangeResult {
    public UnifiedSettingsChangeOutcome Outcome { get; }
    public string Message { get; }
    public abstract virtual UnifiedSettingsChangeOutcome get_Outcome();
    public abstract virtual string get_Message();
}
[NullableContextAttribute("2")]
[GuidAttribute("ef191801-bb6a-4cb2-852c-c48ae6047e71")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.Internal.VisualStudio.Shell.Interop.IVsUnifiedSettingCommitResult {
    public UnifiedSettingsCommitOutcome Outcome { get; }
    public string Message { get; }
    public abstract virtual UnifiedSettingsCommitOutcome get_Outcome();
    public abstract virtual string get_Message();
}
[NullableContextAttribute("2")]
[GuidAttribute("6bc61f9a-9d1c-428d-ae25-a00bd33802b7")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.Internal.VisualStudio.Shell.Interop.IVsUnifiedSettingRetrievalError {
    public UnifiedSettingsRetrievalErrorKind ErrorKind { get; }
    public string Message { get; }
    public abstract virtual UnifiedSettingsRetrievalErrorKind get_ErrorKind();
    public abstract virtual string get_Message();
}
[NullableContextAttribute("1")]
[GuidAttribute("4513614a-4dd8-4604-ab8a-4cf79c304cc0")]
[InterfaceTypeAttribute("1")]
[ExcludeFromProxyBuildAttribute]
public interface Microsoft.Internal.VisualStudio.Shell.Interop.IVsUnifiedSettingsBulkOperations {
    public abstract virtual IVsUnifiedSettingsSnapshot GetSnapshot();
}
[NullableContextAttribute("1")]
[GuidAttribute("91ad6668-12e9-42fd-b0d4-b5840150cae8")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.Internal.VisualStudio.Shell.Interop.IVsUnifiedSettingsChangeEvents {
    public abstract virtual void SettingsUpdated(Guid eventSource, UInt32 changedSettingMonikerCount, String[] changedSettingMonikers);
}
[NullableContextAttribute("1")]
[GuidAttribute("a8df4889-3887-4bbe-b1a1-e5549e0a8d5b")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.Internal.VisualStudio.Shell.Interop.IVsUnifiedSettingsManager {
    public abstract virtual IVsUnifiedSettingsReader GetReader();
    public abstract virtual IVsUnifiedSettingsWriter GetWriter(string callerName);
    public abstract virtual IVsUnifiedSettingsWriter GetWriter(string callerName, Guid eventSource);
}
[NullableContextAttribute("1")]
[GuidAttribute("b9a1ec8b-793d-4307-bc2f-922ee35b4b1f")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.Internal.VisualStudio.Shell.Interop.IVsUnifiedSettingsMetadata {
    public abstract virtual String[] GetMonikersMatchingPattern(string monikerPattern);
    public abstract virtual String[] GetMonikersMatchingPatterns(String[] monikerPatterns);
}
[NullableContextAttribute("1")]
[GuidAttribute("98804e39-e359-4fbc-97c9-35ca89e7c66c")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.Internal.VisualStudio.Shell.Interop.IVsUnifiedSettingsReader {
    public abstract virtual IVsDisposable SubscribeToChanges(IVsUnifiedSettingsChangeEvents handler, string monikerPattern, bool callOnMainThread);
    public abstract virtual object GetValue(string moniker, UnifiedSettingsValueType valueType, UnifiedSettingReadOptions readOptions);
}
[GuidAttribute("ab43803f-6573-47c2-92d6-8b7d256f1202")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.Internal.VisualStudio.Shell.Interop.IVsUnifiedSettingsRefresh {
    public abstract virtual void RefreshDynamicData();
}
[GuidAttribute("bc5b8523-0181-4df4-ba14-8e5ad7271ff0")]
[InterfaceTypeAttribute("1")]
[ExcludeFromProxyBuildAttribute]
public interface Microsoft.Internal.VisualStudio.Shell.Interop.IVsUnifiedSettingsResourceLoader {
    public abstract virtual void LoadExternalResources();
}
[GuidAttribute("679f7553-e9ee-445a-a588-678b430d184d")]
[InterfaceTypeAttribute("1")]
[ExcludeFromProxyBuildAttribute]
public interface Microsoft.Internal.VisualStudio.Shell.Interop.IVsUnifiedSettingsSnapshot {
    public abstract virtual void Restore();
}
[NullableContextAttribute("1")]
[GuidAttribute("6452577f-e000-4e2a-b5d6-4b7ebf65218b")]
[InterfaceTypeAttribute("1")]
[ExcludeFromProxyBuildAttribute]
public interface Microsoft.Internal.VisualStudio.Shell.Interop.IVsUnifiedSettingsUiController {
    public abstract virtual void RefreshCommandStates(string monikerPattern);
}
[NullableContextAttribute("1")]
[GuidAttribute("5062506c-e72d-4bd8-94c4-6a9a19d26cd6")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.Internal.VisualStudio.Shell.Interop.IVsUnifiedSettingsWriter {
    public abstract virtual IVsDisposable SubscribeToChanges(IVsUnifiedSettingsChangeEvents handler, string monikerPattern, bool callOnMainThread);
    public abstract virtual object GetValue(string moniker, UnifiedSettingsValueType valueType, UnifiedSettingReadOptions readOptions);
    public abstract virtual IVsUnifiedSettingChangeResult EnqueueChange(string moniker, object value);
    public abstract virtual IVsUnifiedSettingChangeResult EnqueueChangeWithOptions(string moniker, object value, UnifiedSettingWriteOptions options);
    public abstract virtual IVsUnifiedSettingCommitResult Commit(string changeDescription);
}
[NullableContextAttribute("1")]
[GuidAttribute("6d0f2775-494b-426f-a311-05c63d204c30")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.Internal.VisualStudio.Shell.Interop.IVsUnifiedSettingValue {
    public object Value { get; }
    public abstract virtual object get_Value();
}
[NullableContextAttribute("1")]
[GuidAttribute("2296B62D-8530-473C-84F5-B8A336DEACBC")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.Internal.VisualStudio.Shell.Interop.IVsUnzipService {
    public abstract virtual void ExtractAll(string sourceArchiveFileName, string destinationDirectoryName);
    public abstract virtual String[] GetZipFileEntries(string sourceArchiveFileName);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("E2FD6169-488E-494A-A54E-5996415EE43F")]
public interface Microsoft.Internal.VisualStudio.Shell.Interop.IVsUpdateSolutionPrefetchEvents {
    public abstract virtual void OnBeforeActiveSolutionConfigurationChangeBegins(string pszOldSolutionConfig, string pszNewSolutionConfig);
    public abstract virtual void OnBeforeActiveProjectConfigurationChangeNotify(Guid guidProject, string pszpOldProjectConfig, string pszNewProjectConfig);
    public abstract virtual void OnBeforeActiveSolutionConfigurationChangeNotify();
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("70243038-EEFC-4257-9308-ACF31476E6A7")]
public interface Microsoft.Internal.VisualStudio.Shell.Interop.IVsUserEngagement2 {
    [DispIdAttribute("1610678275")]
public bool ComplexEdit { get; public set; }
    [DispIdAttribute("1610678277")]
public bool IntellisenseActiveAfterEdit { get; public set; }
    [DispIdAttribute("1610678279")]
public bool IntellisenseActiveBeforeEdit { get; public set; }
    [ComAliasNameAttribute("VsShellPrivate155.USER_ENGAGEMENT_LEVEL")]
[DispIdAttribute("1610678281")]
public UInt32 UserEngagementLevel { get; }
    [DispIdAttribute("1610678282")]
public bool EditorTarget { get; public set; }
    [DispIdAttribute("1610743808")]
public bool ExcludedDelay { get; public set; }
    public string ContentType { get; public set; }
    public abstract virtual void ResetState();
    public abstract virtual UInt32 AdviseUserEngagementEvents(IVsUserEngagementEvents pEventSink);
    public abstract virtual void UnadviseUserEngagementEvents(UInt32 dwCookie);
    public abstract virtual bool get_ComplexEdit();
    public abstract virtual void set_ComplexEdit(bool value);
    public abstract virtual bool get_IntellisenseActiveAfterEdit();
    public abstract virtual void set_IntellisenseActiveAfterEdit(bool value);
    public abstract virtual bool get_IntellisenseActiveBeforeEdit();
    public abstract virtual void set_IntellisenseActiveBeforeEdit(bool value);
    public abstract virtual UInt32 get_UserEngagementLevel();
    public abstract virtual bool get_EditorTarget();
    public abstract virtual void set_EditorTarget(bool value);
    public abstract virtual bool get_ExcludedDelay();
    public abstract virtual void set_ExcludedDelay(bool value);
    public abstract virtual string get_ContentType();
    public abstract virtual void set_ContentType(string value);
}
[GuidAttribute("B583CC4E-C5AB-438E-ACBF-9C768E6706AB")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.Internal.VisualStudio.Shell.Interop.IVsWebProxy2 {
    public abstract virtual IVsTask PrepareWebProxyAsync(string webCallUrl, UInt32 oldProxyState, bool okToPrompt);
}
[GuidAttribute("24BA738B-8168-49FE-9072-5424B7D49E17")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.Internal.VisualStudio.Shell.Interop.IVsWindowFramePrivate {
    public abstract virtual void ConnectSelectionContext();
    public abstract virtual void BringToFront();
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("200e6dca-0164-441a-9b12-3afbcb7b96e3")]
public interface Microsoft.Internal.VisualStudio.Shell.Interop.IVsWindowManager {
    public abstract virtual int Initialize(Object& ppunk);
    public abstract virtual int Terminate();
    public abstract virtual int DestroyAddInFrames(string AddInProgID);
    public abstract virtual int LoadFrameLayout(string szLayoutName, string szLayoutMode, string szLayoutSubMode, string szAlternatePath);
    public abstract virtual int LoadFrameLayoutBeforeContextChange(string szLayoutName, string szLayoutMode, string szLayoutSubMode, string szAlternatePath, UInt32 cModifiedContexts, UInt32[] rgdwModifiedContexts);
    public abstract virtual int SaveActiveFrameLayout();
    public abstract virtual int FindFrame(string szMoniker, UInt32 instanceID, UInt32 options, IVsWindowFrame& ppFrame);
    public abstract virtual int CreateFrame(string szMoniker, UInt32 instanceID, IVsWindowFrame& ppFrame);
    public abstract virtual int CreateContentPane(string pszName, int fDockViewOn, int fDocument, string lpstrMkDoc, UInt32 eCreateWindowFlags, UInt32 dwToolWinId, object punkView, object punkData, IServiceProvider pSP, IVsUIHierarchy pUIH, UInt32 vsid, Int32& pfDefaultPosition, Guid& rguidCmdUI, IVsWindowFrame& ppWindowFrame);
    public abstract virtual int GetWindowFrameEnumerator(UInt32 type, IEnumWindowFrames& ppenum);
    public abstract virtual int GetHierarchyItemEnum(IVsHierarchy pHier, UInt32 itemID, IEnumWindowFrames& ppenum);
    public abstract virtual int CloseFramesOfHierarchy(IVsHierarchy pHier);
    public abstract virtual int CloseFramesOfDocCookie(UInt32 docCookie);
    public abstract virtual int GetTopDocumentFrame(IVsWindowFrame& ppFrame);
    public abstract virtual int GetTopToolFrame(IVsWindowFrame& ppFrame);
    public abstract virtual int GetTopWindowFrame(IVsWindowFrame& ppFrame);
    public abstract virtual int GetAutoHideFrame(IVsWindowFrame& ppFrame);
    public abstract virtual int SaveDocumentStates(IStream pStream, IVsHierarchy pRootHierarchy);
    public abstract virtual int LoadDocumentStates(IStream pStream, int fExternal);
    public abstract virtual int ExportSettings(Guid& guidCategoryGUID, IVsSettingsWriter pSettings);
    public abstract virtual int ImportSettings(Guid& guidCategoryGUID, IVsSettingsReader pSettings, UInt32 flags, Int32& pfRestartRequired);
    public abstract virtual int ImportRequiresReload(Int32& pbReload);
    public abstract virtual int ReloadUI();
    public abstract virtual int GetFrameForHwnd(IntPtr hwnd, IVsWindowFrame& ppFrame);
    public abstract virtual int TranslateAccelerator(MSG& msg);
    public abstract virtual int PreTranslateInput(MSG& msg, bool fHandled);
    public abstract virtual int ProcessForAccessKeyHandling(MSG& msg);
    public abstract virtual int ProcessForDialogAccessKeyHandling(IntPtr pDlg, MSG& msg);
    public abstract virtual int AttachToolbarHost(IVsWindowFrame pFrame, IVsToolWindowToolbarHost& ppToolbarHost);
    public abstract virtual int InsertToolbarHost(IntPtr hwnd, IVsToolWindowToolbar ptwt, IOleCommandTarget pCommandTarget, IVsToolWindowToolbarHost& ppToolbarHost);
    public abstract virtual int CreateToolbarHost(IOleCommandTarget pCommandTarget, IVsToolbarTrayHost& ppToolbarTrayHost);
    public abstract virtual int PushMessageLoopOnContextMenuTrackingComponent();
    public abstract virtual int GetProperty(int propid, Object& pvar);
    public abstract virtual int SetProperty(int propid, object var);
}
[GuidAttribute("4DF525B0-1B9F-400F-9F24-76F7F29274DD")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.Internal.VisualStudio.Shell.Interop.IVsWindowManager3 {
    public abstract virtual void SaveActiveFrameLayoutEx(UInt32 grfOptions);
    public abstract virtual IntPtr GetDialogOwnerHwnd();
    public abstract virtual void OnFrameAndDocDataInitialized(IVsWindowFrame pWindowFrame);
    public abstract virtual object GetResourceKeyReferenceType(object requestedResource);
    public abstract virtual bool IsInitializingDocument(string filename);
    public abstract virtual bool IsInitializingLogicalViewForDocument(string filename, Guid& logicalView);
    public abstract virtual bool IsInitializingPhysicalViewForDocument(string filename, Guid& editorType, string physicalView);
    public abstract virtual bool GetPrimaryDocumentWellScreenRect(Int32& screenLeft, Int32& screenTop, Int32& screenWidth, Int32& screenHeight);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("1EF0253F-4C6C-4F92-B61B-03EFCAB3B820")]
public interface Microsoft.Internal.VisualStudio.Shell.Interop.IVsWindowManager4 {
    public abstract virtual void SaveActiveFrameLayoutEx(UInt32 grfOptions);
    public abstract virtual IntPtr GetDialogOwnerHwnd();
    public abstract virtual void OnFrameAndDocDataInitialized(IVsWindowFrame pWindowFrame);
    public abstract virtual object GetResourceKeyReferenceType(object requestedResource);
    public abstract virtual bool IsInitializingDocument(string filename);
    public abstract virtual bool IsInitializingLogicalViewForDocument(string filename, Guid& logicalView);
    public abstract virtual bool IsInitializingPhysicalViewForDocument(string filename, Guid& editorType, string physicalView);
    public abstract virtual bool GetPrimaryDocumentWellScreenRect(Int32& screenLeft, Int32& screenTop, Int32& screenWidth, Int32& screenHeight);
    public abstract virtual void SaveFrameLayoutCollection(IStream stream, UInt32 options);
    public abstract virtual void RestoreFrameLayoutCollection(IStream stream);
    public abstract virtual UInt32 AdviseWindowFrameEvents(IVsWindowFrameEvents eventSink);
    public abstract virtual void UnadviseWindowFrameEvents(UInt32 cookie);
}
[GuidAttribute("EE2ABAF2-E6DF-4BEE-93DD-44279B091432")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.Internal.VisualStudio.Shell.Interop.IVsWindowManager5 {
    public abstract virtual void SaveActiveFrameLayoutEx(UInt32 grfOptions);
    public abstract virtual IntPtr GetDialogOwnerHwnd();
    public abstract virtual void OnFrameAndDocDataInitialized(IVsWindowFrame pWindowFrame);
    public abstract virtual object GetResourceKeyReferenceType(object requestedResource);
    public abstract virtual bool IsInitializingDocument(string filename);
    public abstract virtual bool IsInitializingLogicalViewForDocument(string filename, Guid& logicalView);
    public abstract virtual bool IsInitializingPhysicalViewForDocument(string filename, Guid& editorType, string physicalView);
    public abstract virtual bool GetPrimaryDocumentWellScreenRect(Int32& screenLeft, Int32& screenTop, Int32& screenWidth, Int32& screenHeight);
    public abstract virtual void SaveFrameLayoutCollection(IStream stream, UInt32 options);
    public abstract virtual void RestoreFrameLayoutCollection(IStream stream);
    public abstract virtual UInt32 AdviseWindowFrameEvents(IVsWindowFrameEvents eventSink);
    public abstract virtual void UnadviseWindowFrameEvents(UInt32 cookie);
    public abstract virtual IVsTask ExportSettingsAsync(Guid& category, IVsSettingsWriter settingsWriter, IVsSettingsStorageContainer storageContainer);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("491F83DB-8408-40F1-8A40-E5446546323A")]
public interface Microsoft.Internal.VisualStudio.Shell.Interop.IVsWindowManager6 {
    public abstract virtual void ReplaceFrameViewOnIntellisenseAvailable(IVsWindowFrame pFrame, long currentVersion, string bstrWindowID, UInt32 grfOpenSpecific, string pszMkDocument, Guid& rguidEditorType, string pszPhysicalView, Guid& rguidLogicalView, string pszOwnerCaption, IVsUIHierarchy pHier, UInt32 itemid, IntPtr punkDocDataExisting, IServiceProvider pSPHierContext);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("245DAD8F-B44F-4834-84E8-3360EDBB29C3")]
public interface Microsoft.Internal.VisualStudio.Shell.Interop.IVsWindowManagerDTESupport {
    public abstract virtual int get_WindowConfigurations(WindowConfigurations& ppWindowsConfigurations);
    public abstract virtual int get_Windows(Windows& ppWindows);
    public abstract virtual int get_MainWindow(Window& ppMainWindow);
    public abstract virtual int get_WindowEvents(Window pFilterWindow, WindowEvents& ppWindowEvents);
    public abstract virtual int get_WindowVisibilityEvents(Window pFilterWindow, WindowVisibilityEvents& ppWindowEvents);
    public abstract virtual int get_DocumentWindows(Document pDocument, Windows& ppWindows);
    public abstract virtual int get_OutstandingWindowEventCount(Int32& pOutstandingWindowEventCount);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("AA7BC5CA-C538-4C9B-83AE-120CF7732ADF")]
public interface Microsoft.Internal.VisualStudio.Shell.Interop.IVsWindowSearchHostPrivate {
    public object SearchControl { get; }
    public abstract virtual object get_SearchControl();
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("F71565F6-7B79-43C5-89E3-A7F9757F3AB2")]
public interface Microsoft.Internal.VisualStudio.Shell.Interop.IVsWorkingFoldersManagerPrivate {
    public abstract virtual void GetAlternateLocation(UInt32 uintFolderKind, string pszPath, String& pbstrAlternatePath, Boolean& pfIsSettingEnabled);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("4C484365-803A-42EB-9B18-7691394D80B7")]
public interface Microsoft.Internal.VisualStudio.Shell.Interop.IVsWorkspaceLaunchServicePrivate {
    public abstract virtual bool GetSelectedStartupItemCanBeLaunched();
    public abstract virtual void LaunchSelectedStartupItem(bool noDebug, bool stepInto);
}
[GuidAttribute("237CF7E6-1985-4868-80EB-75B0246BC60E")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.Internal.VisualStudio.Shell.Interop.IVsWorkspaceLaunchServicePrivate2 {
    public abstract virtual bool GetSelectedStartupItemCanBeLaunched();
    public abstract virtual void LaunchSelectedStartupItem(bool noDebug, bool stepInto);
    [NullableContextAttribute("1")]
public abstract virtual void LaunchSelectedStartupItemWithConfiguration(bool noDebug, bool stepInto, UInt32 launchConfigurationValuesCount, String[] launchConfigurationKeys, Object[] launchConfigurationValues);
}
[GuidAttribute("DCE32AC9-2A63-4DFC-A323-CAC9CFBF1C5C")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.Internal.VisualStudio.Shell.Interop.IVsWorkspaceManager {
    public abstract virtual string GetEntryPoint();
    public abstract virtual string GetSolutionScopeFindQuery();
}
[GuidAttribute("6CF6EA12-3442-40A8-ACE0-75BD85DDDDE5")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.Internal.VisualStudio.Shell.Interop.IVsXRayEventsPrivate {
    public abstract virtual void OnStateChange(VsXRayState newState);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("71CE2038-6209-4651-B542-0FCB331262DF")]
public interface Microsoft.Internal.VisualStudio.Shell.Interop.IVsXRayPrivate {
    public abstract virtual UInt32 AdviseVsXRayEvents(IVsXRayEventsPrivate pSink);
    public abstract virtual void UnAdviseVsXRayEvents(UInt32 dwCookie);
    public abstract virtual object GetProperty(UInt32 propid);
    public abstract virtual void GetEvents(UInt32 cEvents, VsXRayEventsData[] eventsData, UInt32& pcActualEvents, Array& pModuleNames, Array& pVsixIds);
    public abstract virtual VsXRayState GetState();
}
[GuidAttribute("2933BF85-7B36-11D2-B20E-00C04F983E60")]
public interface Microsoft.Internal.VisualStudio.Shell.Interop.IXMLDOMAttribute {
    [DispIdAttribute("2")]
public string nodeName { get; }
    [DispIdAttribute("3")]
public object nodeValue { get; public set; }
    [ComAliasNameAttribute("Microsoft.Internal.VisualStudio.Shell.Interop.DOMNodeType")]
[DispIdAttribute("4")]
public DOMNodeType nodeType { get; }
    [DispIdAttribute("6")]
public IXMLDOMNode parentNode { get; }
    [DispIdAttribute("7")]
public IXMLDOMNodeList childNodes { get; }
    [DispIdAttribute("8")]
public IXMLDOMNode firstChild { get; }
    [DispIdAttribute("9")]
public IXMLDOMNode lastChild { get; }
    [DispIdAttribute("10")]
public IXMLDOMNode previousSibling { get; }
    [DispIdAttribute("11")]
public IXMLDOMNode nextSibling { get; }
    [DispIdAttribute("12")]
public IXMLDOMNamedNodeMap attributes { get; }
    [DispIdAttribute("18")]
public IXMLDOMDocument ownerDocument { get; }
    [DispIdAttribute("21")]
public string nodeTypeString { get; }
    [DispIdAttribute("24")]
public string text { get; public set; }
    [DispIdAttribute("22")]
public bool specified { get; }
    [DispIdAttribute("23")]
public IXMLDOMNode definition { get; }
    [DispIdAttribute("25")]
public object nodeTypedValue { get; public set; }
    [DispIdAttribute("26")]
public object dataType { get; public set; }
    [DispIdAttribute("27")]
public string xml { get; }
    [DispIdAttribute("31")]
public bool parsed { get; }
    [DispIdAttribute("32")]
public string namespaceURI { get; }
    [DispIdAttribute("33")]
public string prefix { get; }
    [DispIdAttribute("34")]
public string baseName { get; }
    [DispIdAttribute("118")]
public string name { get; }
    [DispIdAttribute("120")]
public object value { get; public set; }
    [DispIdAttribute("2")]
public abstract virtual string get_nodeName();
    [DispIdAttribute("3")]
public abstract virtual object get_nodeValue();
    [DispIdAttribute("3")]
public abstract virtual void set_nodeValue(object value);
    [DispIdAttribute("4")]
public abstract virtual DOMNodeType get_nodeType();
    [DispIdAttribute("6")]
public abstract virtual IXMLDOMNode get_parentNode();
    [DispIdAttribute("7")]
public abstract virtual IXMLDOMNodeList get_childNodes();
    [DispIdAttribute("8")]
public abstract virtual IXMLDOMNode get_firstChild();
    [DispIdAttribute("9")]
public abstract virtual IXMLDOMNode get_lastChild();
    [DispIdAttribute("10")]
public abstract virtual IXMLDOMNode get_previousSibling();
    [DispIdAttribute("11")]
public abstract virtual IXMLDOMNode get_nextSibling();
    [DispIdAttribute("12")]
public abstract virtual IXMLDOMNamedNodeMap get_attributes();
    [DispIdAttribute("13")]
public abstract virtual IXMLDOMNode insertBefore(IXMLDOMNode newChild, object refChild);
    [DispIdAttribute("14")]
public abstract virtual IXMLDOMNode replaceChild(IXMLDOMNode newChild, IXMLDOMNode oldChild);
    [DispIdAttribute("15")]
public abstract virtual IXMLDOMNode removeChild(IXMLDOMNode childNode);
    [DispIdAttribute("16")]
public abstract virtual IXMLDOMNode appendChild(IXMLDOMNode newChild);
    [DispIdAttribute("17")]
public abstract virtual bool hasChildNodes();
    [DispIdAttribute("18")]
public abstract virtual IXMLDOMDocument get_ownerDocument();
    [DispIdAttribute("19")]
public abstract virtual IXMLDOMNode cloneNode(bool deep);
    [DispIdAttribute("21")]
public abstract virtual string get_nodeTypeString();
    [DispIdAttribute("24")]
public abstract virtual string get_text();
    [DispIdAttribute("24")]
public abstract virtual void set_text(string value);
    [DispIdAttribute("22")]
public abstract virtual bool get_specified();
    [DispIdAttribute("23")]
public abstract virtual IXMLDOMNode get_definition();
    [DispIdAttribute("25")]
public abstract virtual object get_nodeTypedValue();
    [DispIdAttribute("25")]
public abstract virtual void set_nodeTypedValue(object value);
    [DispIdAttribute("26")]
public abstract virtual object get_dataType();
    [DispIdAttribute("26")]
public abstract virtual void set_dataType(object value);
    [DispIdAttribute("27")]
public abstract virtual string get_xml();
    [DispIdAttribute("28")]
public abstract virtual string transformNode(IXMLDOMNode stylesheet);
    [DispIdAttribute("29")]
public abstract virtual IXMLDOMNodeList selectNodes(string queryString);
    [DispIdAttribute("30")]
public abstract virtual IXMLDOMNode selectSingleNode(string queryString);
    [DispIdAttribute("31")]
public abstract virtual bool get_parsed();
    [DispIdAttribute("32")]
public abstract virtual string get_namespaceURI();
    [DispIdAttribute("33")]
public abstract virtual string get_prefix();
    [DispIdAttribute("34")]
public abstract virtual string get_baseName();
    [DispIdAttribute("35")]
public abstract virtual void transformNodeToObject(IXMLDOMNode stylesheet, object outputObject);
    [DispIdAttribute("118")]
public abstract virtual string get_name();
    [DispIdAttribute("120")]
public abstract virtual object get_value();
    [DispIdAttribute("120")]
public abstract virtual void set_value(object value);
}
[GuidAttribute("2933BF8A-7B36-11D2-B20E-00C04F983E60")]
public interface Microsoft.Internal.VisualStudio.Shell.Interop.IXMLDOMCDATASection {
    [DispIdAttribute("2")]
public string nodeName { get; }
    [DispIdAttribute("3")]
public object nodeValue { get; public set; }
    [ComAliasNameAttribute("Microsoft.Internal.VisualStudio.Shell.Interop.DOMNodeType")]
[DispIdAttribute("4")]
public DOMNodeType nodeType { get; }
    [DispIdAttribute("6")]
public IXMLDOMNode parentNode { get; }
    [DispIdAttribute("7")]
public IXMLDOMNodeList childNodes { get; }
    [DispIdAttribute("8")]
public IXMLDOMNode firstChild { get; }
    [DispIdAttribute("9")]
public IXMLDOMNode lastChild { get; }
    [DispIdAttribute("10")]
public IXMLDOMNode previousSibling { get; }
    [DispIdAttribute("11")]
public IXMLDOMNode nextSibling { get; }
    [DispIdAttribute("12")]
public IXMLDOMNamedNodeMap attributes { get; }
    [DispIdAttribute("18")]
public IXMLDOMDocument ownerDocument { get; }
    [DispIdAttribute("21")]
public string nodeTypeString { get; }
    [DispIdAttribute("24")]
public string text { get; public set; }
    [DispIdAttribute("22")]
public bool specified { get; }
    [DispIdAttribute("23")]
public IXMLDOMNode definition { get; }
    [DispIdAttribute("25")]
public object nodeTypedValue { get; public set; }
    [DispIdAttribute("26")]
public object dataType { get; public set; }
    [DispIdAttribute("27")]
public string xml { get; }
    [DispIdAttribute("31")]
public bool parsed { get; }
    [DispIdAttribute("32")]
public string namespaceURI { get; }
    [DispIdAttribute("33")]
public string prefix { get; }
    [DispIdAttribute("34")]
public string baseName { get; }
    [DispIdAttribute("109")]
public string data { get; public set; }
    [DispIdAttribute("110")]
public int length { get; }
    [DispIdAttribute("2")]
public abstract virtual string get_nodeName();
    [DispIdAttribute("3")]
public abstract virtual object get_nodeValue();
    [DispIdAttribute("3")]
public abstract virtual void set_nodeValue(object value);
    [DispIdAttribute("4")]
public abstract virtual DOMNodeType get_nodeType();
    [DispIdAttribute("6")]
public abstract virtual IXMLDOMNode get_parentNode();
    [DispIdAttribute("7")]
public abstract virtual IXMLDOMNodeList get_childNodes();
    [DispIdAttribute("8")]
public abstract virtual IXMLDOMNode get_firstChild();
    [DispIdAttribute("9")]
public abstract virtual IXMLDOMNode get_lastChild();
    [DispIdAttribute("10")]
public abstract virtual IXMLDOMNode get_previousSibling();
    [DispIdAttribute("11")]
public abstract virtual IXMLDOMNode get_nextSibling();
    [DispIdAttribute("12")]
public abstract virtual IXMLDOMNamedNodeMap get_attributes();
    [DispIdAttribute("13")]
public abstract virtual IXMLDOMNode insertBefore(IXMLDOMNode newChild, object refChild);
    [DispIdAttribute("14")]
public abstract virtual IXMLDOMNode replaceChild(IXMLDOMNode newChild, IXMLDOMNode oldChild);
    [DispIdAttribute("15")]
public abstract virtual IXMLDOMNode removeChild(IXMLDOMNode childNode);
    [DispIdAttribute("16")]
public abstract virtual IXMLDOMNode appendChild(IXMLDOMNode newChild);
    [DispIdAttribute("17")]
public abstract virtual bool hasChildNodes();
    [DispIdAttribute("18")]
public abstract virtual IXMLDOMDocument get_ownerDocument();
    [DispIdAttribute("19")]
public abstract virtual IXMLDOMNode cloneNode(bool deep);
    [DispIdAttribute("21")]
public abstract virtual string get_nodeTypeString();
    [DispIdAttribute("24")]
public abstract virtual string get_text();
    [DispIdAttribute("24")]
public abstract virtual void set_text(string value);
    [DispIdAttribute("22")]
public abstract virtual bool get_specified();
    [DispIdAttribute("23")]
public abstract virtual IXMLDOMNode get_definition();
    [DispIdAttribute("25")]
public abstract virtual object get_nodeTypedValue();
    [DispIdAttribute("25")]
public abstract virtual void set_nodeTypedValue(object value);
    [DispIdAttribute("26")]
public abstract virtual object get_dataType();
    [DispIdAttribute("26")]
public abstract virtual void set_dataType(object value);
    [DispIdAttribute("27")]
public abstract virtual string get_xml();
    [DispIdAttribute("28")]
public abstract virtual string transformNode(IXMLDOMNode stylesheet);
    [DispIdAttribute("29")]
public abstract virtual IXMLDOMNodeList selectNodes(string queryString);
    [DispIdAttribute("30")]
public abstract virtual IXMLDOMNode selectSingleNode(string queryString);
    [DispIdAttribute("31")]
public abstract virtual bool get_parsed();
    [DispIdAttribute("32")]
public abstract virtual string get_namespaceURI();
    [DispIdAttribute("33")]
public abstract virtual string get_prefix();
    [DispIdAttribute("34")]
public abstract virtual string get_baseName();
    [DispIdAttribute("35")]
public abstract virtual void transformNodeToObject(IXMLDOMNode stylesheet, object outputObject);
    [DispIdAttribute("109")]
public abstract virtual string get_data();
    [DispIdAttribute("109")]
public abstract virtual void set_data(string value);
    [DispIdAttribute("110")]
public abstract virtual int get_length();
    [DispIdAttribute("111")]
public abstract virtual string substringData(int offset, int count);
    [DispIdAttribute("112")]
public abstract virtual void appendData(string data);
    [DispIdAttribute("113")]
public abstract virtual void insertData(int offset, string data);
    [DispIdAttribute("114")]
public abstract virtual void deleteData(int offset, int count);
    [DispIdAttribute("115")]
public abstract virtual void replaceData(int offset, int count, string data);
    [DispIdAttribute("123")]
public abstract virtual IXMLDOMText splitText(int offset);
}
[GuidAttribute("2933BF84-7B36-11D2-B20E-00C04F983E60")]
public interface Microsoft.Internal.VisualStudio.Shell.Interop.IXMLDOMCharacterData {
    [DispIdAttribute("2")]
public string nodeName { get; }
    [DispIdAttribute("3")]
public object nodeValue { get; public set; }
    [DispIdAttribute("4")]
[ComAliasNameAttribute("Microsoft.Internal.VisualStudio.Shell.Interop.DOMNodeType")]
public DOMNodeType nodeType { get; }
    [DispIdAttribute("6")]
public IXMLDOMNode parentNode { get; }
    [DispIdAttribute("7")]
public IXMLDOMNodeList childNodes { get; }
    [DispIdAttribute("8")]
public IXMLDOMNode firstChild { get; }
    [DispIdAttribute("9")]
public IXMLDOMNode lastChild { get; }
    [DispIdAttribute("10")]
public IXMLDOMNode previousSibling { get; }
    [DispIdAttribute("11")]
public IXMLDOMNode nextSibling { get; }
    [DispIdAttribute("12")]
public IXMLDOMNamedNodeMap attributes { get; }
    [DispIdAttribute("18")]
public IXMLDOMDocument ownerDocument { get; }
    [DispIdAttribute("21")]
public string nodeTypeString { get; }
    [DispIdAttribute("24")]
public string text { get; public set; }
    [DispIdAttribute("22")]
public bool specified { get; }
    [DispIdAttribute("23")]
public IXMLDOMNode definition { get; }
    [DispIdAttribute("25")]
public object nodeTypedValue { get; public set; }
    [DispIdAttribute("26")]
public object dataType { get; public set; }
    [DispIdAttribute("27")]
public string xml { get; }
    [DispIdAttribute("31")]
public bool parsed { get; }
    [DispIdAttribute("32")]
public string namespaceURI { get; }
    [DispIdAttribute("33")]
public string prefix { get; }
    [DispIdAttribute("34")]
public string baseName { get; }
    [DispIdAttribute("109")]
public string data { get; public set; }
    [DispIdAttribute("110")]
public int length { get; }
    [DispIdAttribute("2")]
public abstract virtual string get_nodeName();
    [DispIdAttribute("3")]
public abstract virtual object get_nodeValue();
    [DispIdAttribute("3")]
public abstract virtual void set_nodeValue(object value);
    [DispIdAttribute("4")]
public abstract virtual DOMNodeType get_nodeType();
    [DispIdAttribute("6")]
public abstract virtual IXMLDOMNode get_parentNode();
    [DispIdAttribute("7")]
public abstract virtual IXMLDOMNodeList get_childNodes();
    [DispIdAttribute("8")]
public abstract virtual IXMLDOMNode get_firstChild();
    [DispIdAttribute("9")]
public abstract virtual IXMLDOMNode get_lastChild();
    [DispIdAttribute("10")]
public abstract virtual IXMLDOMNode get_previousSibling();
    [DispIdAttribute("11")]
public abstract virtual IXMLDOMNode get_nextSibling();
    [DispIdAttribute("12")]
public abstract virtual IXMLDOMNamedNodeMap get_attributes();
    [DispIdAttribute("13")]
public abstract virtual IXMLDOMNode insertBefore(IXMLDOMNode newChild, object refChild);
    [DispIdAttribute("14")]
public abstract virtual IXMLDOMNode replaceChild(IXMLDOMNode newChild, IXMLDOMNode oldChild);
    [DispIdAttribute("15")]
public abstract virtual IXMLDOMNode removeChild(IXMLDOMNode childNode);
    [DispIdAttribute("16")]
public abstract virtual IXMLDOMNode appendChild(IXMLDOMNode newChild);
    [DispIdAttribute("17")]
public abstract virtual bool hasChildNodes();
    [DispIdAttribute("18")]
public abstract virtual IXMLDOMDocument get_ownerDocument();
    [DispIdAttribute("19")]
public abstract virtual IXMLDOMNode cloneNode(bool deep);
    [DispIdAttribute("21")]
public abstract virtual string get_nodeTypeString();
    [DispIdAttribute("24")]
public abstract virtual string get_text();
    [DispIdAttribute("24")]
public abstract virtual void set_text(string value);
    [DispIdAttribute("22")]
public abstract virtual bool get_specified();
    [DispIdAttribute("23")]
public abstract virtual IXMLDOMNode get_definition();
    [DispIdAttribute("25")]
public abstract virtual object get_nodeTypedValue();
    [DispIdAttribute("25")]
public abstract virtual void set_nodeTypedValue(object value);
    [DispIdAttribute("26")]
public abstract virtual object get_dataType();
    [DispIdAttribute("26")]
public abstract virtual void set_dataType(object value);
    [DispIdAttribute("27")]
public abstract virtual string get_xml();
    [DispIdAttribute("28")]
public abstract virtual string transformNode(IXMLDOMNode stylesheet);
    [DispIdAttribute("29")]
public abstract virtual IXMLDOMNodeList selectNodes(string queryString);
    [DispIdAttribute("30")]
public abstract virtual IXMLDOMNode selectSingleNode(string queryString);
    [DispIdAttribute("31")]
public abstract virtual bool get_parsed();
    [DispIdAttribute("32")]
public abstract virtual string get_namespaceURI();
    [DispIdAttribute("33")]
public abstract virtual string get_prefix();
    [DispIdAttribute("34")]
public abstract virtual string get_baseName();
    [DispIdAttribute("35")]
public abstract virtual void transformNodeToObject(IXMLDOMNode stylesheet, object outputObject);
    [DispIdAttribute("109")]
public abstract virtual string get_data();
    [DispIdAttribute("109")]
public abstract virtual void set_data(string value);
    [DispIdAttribute("110")]
public abstract virtual int get_length();
    [DispIdAttribute("111")]
public abstract virtual string substringData(int offset, int count);
    [DispIdAttribute("112")]
public abstract virtual void appendData(string data);
    [DispIdAttribute("113")]
public abstract virtual void insertData(int offset, string data);
    [DispIdAttribute("114")]
public abstract virtual void deleteData(int offset, int count);
    [DispIdAttribute("115")]
public abstract virtual void replaceData(int offset, int count, string data);
}
[GuidAttribute("2933BF88-7B36-11D2-B20E-00C04F983E60")]
public interface Microsoft.Internal.VisualStudio.Shell.Interop.IXMLDOMComment {
    [DispIdAttribute("2")]
public string nodeName { get; }
    [DispIdAttribute("3")]
public object nodeValue { get; public set; }
    [DispIdAttribute("4")]
[ComAliasNameAttribute("Microsoft.Internal.VisualStudio.Shell.Interop.DOMNodeType")]
public DOMNodeType nodeType { get; }
    [DispIdAttribute("6")]
public IXMLDOMNode parentNode { get; }
    [DispIdAttribute("7")]
public IXMLDOMNodeList childNodes { get; }
    [DispIdAttribute("8")]
public IXMLDOMNode firstChild { get; }
    [DispIdAttribute("9")]
public IXMLDOMNode lastChild { get; }
    [DispIdAttribute("10")]
public IXMLDOMNode previousSibling { get; }
    [DispIdAttribute("11")]
public IXMLDOMNode nextSibling { get; }
    [DispIdAttribute("12")]
public IXMLDOMNamedNodeMap attributes { get; }
    [DispIdAttribute("18")]
public IXMLDOMDocument ownerDocument { get; }
    [DispIdAttribute("21")]
public string nodeTypeString { get; }
    [DispIdAttribute("24")]
public string text { get; public set; }
    [DispIdAttribute("22")]
public bool specified { get; }
    [DispIdAttribute("23")]
public IXMLDOMNode definition { get; }
    [DispIdAttribute("25")]
public object nodeTypedValue { get; public set; }
    [DispIdAttribute("26")]
public object dataType { get; public set; }
    [DispIdAttribute("27")]
public string xml { get; }
    [DispIdAttribute("31")]
public bool parsed { get; }
    [DispIdAttribute("32")]
public string namespaceURI { get; }
    [DispIdAttribute("33")]
public string prefix { get; }
    [DispIdAttribute("34")]
public string baseName { get; }
    [DispIdAttribute("109")]
public string data { get; public set; }
    [DispIdAttribute("110")]
public int length { get; }
    [DispIdAttribute("2")]
public abstract virtual string get_nodeName();
    [DispIdAttribute("3")]
public abstract virtual object get_nodeValue();
    [DispIdAttribute("3")]
public abstract virtual void set_nodeValue(object value);
    [DispIdAttribute("4")]
public abstract virtual DOMNodeType get_nodeType();
    [DispIdAttribute("6")]
public abstract virtual IXMLDOMNode get_parentNode();
    [DispIdAttribute("7")]
public abstract virtual IXMLDOMNodeList get_childNodes();
    [DispIdAttribute("8")]
public abstract virtual IXMLDOMNode get_firstChild();
    [DispIdAttribute("9")]
public abstract virtual IXMLDOMNode get_lastChild();
    [DispIdAttribute("10")]
public abstract virtual IXMLDOMNode get_previousSibling();
    [DispIdAttribute("11")]
public abstract virtual IXMLDOMNode get_nextSibling();
    [DispIdAttribute("12")]
public abstract virtual IXMLDOMNamedNodeMap get_attributes();
    [DispIdAttribute("13")]
public abstract virtual IXMLDOMNode insertBefore(IXMLDOMNode newChild, object refChild);
    [DispIdAttribute("14")]
public abstract virtual IXMLDOMNode replaceChild(IXMLDOMNode newChild, IXMLDOMNode oldChild);
    [DispIdAttribute("15")]
public abstract virtual IXMLDOMNode removeChild(IXMLDOMNode childNode);
    [DispIdAttribute("16")]
public abstract virtual IXMLDOMNode appendChild(IXMLDOMNode newChild);
    [DispIdAttribute("17")]
public abstract virtual bool hasChildNodes();
    [DispIdAttribute("18")]
public abstract virtual IXMLDOMDocument get_ownerDocument();
    [DispIdAttribute("19")]
public abstract virtual IXMLDOMNode cloneNode(bool deep);
    [DispIdAttribute("21")]
public abstract virtual string get_nodeTypeString();
    [DispIdAttribute("24")]
public abstract virtual string get_text();
    [DispIdAttribute("24")]
public abstract virtual void set_text(string value);
    [DispIdAttribute("22")]
public abstract virtual bool get_specified();
    [DispIdAttribute("23")]
public abstract virtual IXMLDOMNode get_definition();
    [DispIdAttribute("25")]
public abstract virtual object get_nodeTypedValue();
    [DispIdAttribute("25")]
public abstract virtual void set_nodeTypedValue(object value);
    [DispIdAttribute("26")]
public abstract virtual object get_dataType();
    [DispIdAttribute("26")]
public abstract virtual void set_dataType(object value);
    [DispIdAttribute("27")]
public abstract virtual string get_xml();
    [DispIdAttribute("28")]
public abstract virtual string transformNode(IXMLDOMNode stylesheet);
    [DispIdAttribute("29")]
public abstract virtual IXMLDOMNodeList selectNodes(string queryString);
    [DispIdAttribute("30")]
public abstract virtual IXMLDOMNode selectSingleNode(string queryString);
    [DispIdAttribute("31")]
public abstract virtual bool get_parsed();
    [DispIdAttribute("32")]
public abstract virtual string get_namespaceURI();
    [DispIdAttribute("33")]
public abstract virtual string get_prefix();
    [DispIdAttribute("34")]
public abstract virtual string get_baseName();
    [DispIdAttribute("35")]
public abstract virtual void transformNodeToObject(IXMLDOMNode stylesheet, object outputObject);
    [DispIdAttribute("109")]
public abstract virtual string get_data();
    [DispIdAttribute("109")]
public abstract virtual void set_data(string value);
    [DispIdAttribute("110")]
public abstract virtual int get_length();
    [DispIdAttribute("111")]
public abstract virtual string substringData(int offset, int count);
    [DispIdAttribute("112")]
public abstract virtual void appendData(string data);
    [DispIdAttribute("113")]
public abstract virtual void insertData(int offset, string data);
    [DispIdAttribute("114")]
public abstract virtual void deleteData(int offset, int count);
    [DispIdAttribute("115")]
public abstract virtual void replaceData(int offset, int count, string data);
}
[GuidAttribute("2933BF81-7B36-11D2-B20E-00C04F983E60")]
public interface Microsoft.Internal.VisualStudio.Shell.Interop.IXMLDOMDocument {
    [DispIdAttribute("2")]
public string nodeName { get; }
    [DispIdAttribute("3")]
public object nodeValue { get; public set; }
    [ComAliasNameAttribute("Microsoft.Internal.VisualStudio.Shell.Interop.DOMNodeType")]
[DispIdAttribute("4")]
public DOMNodeType nodeType { get; }
    [DispIdAttribute("6")]
public IXMLDOMNode parentNode { get; }
    [DispIdAttribute("7")]
public IXMLDOMNodeList childNodes { get; }
    [DispIdAttribute("8")]
public IXMLDOMNode firstChild { get; }
    [DispIdAttribute("9")]
public IXMLDOMNode lastChild { get; }
    [DispIdAttribute("10")]
public IXMLDOMNode previousSibling { get; }
    [DispIdAttribute("11")]
public IXMLDOMNode nextSibling { get; }
    [DispIdAttribute("12")]
public IXMLDOMNamedNodeMap attributes { get; }
    [DispIdAttribute("18")]
public IXMLDOMDocument ownerDocument { get; }
    [DispIdAttribute("21")]
public string nodeTypeString { get; }
    [DispIdAttribute("24")]
public string text { get; public set; }
    [DispIdAttribute("22")]
public bool specified { get; }
    [DispIdAttribute("23")]
public IXMLDOMNode definition { get; }
    [DispIdAttribute("25")]
public object nodeTypedValue { get; public set; }
    [DispIdAttribute("26")]
public object dataType { get; public set; }
    [DispIdAttribute("27")]
public string xml { get; }
    [DispIdAttribute("31")]
public bool parsed { get; }
    [DispIdAttribute("32")]
public string namespaceURI { get; }
    [DispIdAttribute("33")]
public string prefix { get; }
    [DispIdAttribute("34")]
public string baseName { get; }
    [DispIdAttribute("38")]
public IXMLDOMDocumentType doctype { get; }
    [DispIdAttribute("39")]
public IXMLDOMImplementation implementation { get; }
    [DispIdAttribute("40")]
public IXMLDOMElement documentElement { get; public set; }
    [DispIdAttribute("-525")]
public int readyState { get; }
    [DispIdAttribute("59")]
public IXMLDOMParseError parseError { get; }
    [DispIdAttribute("60")]
public string url { get; }
    [DispIdAttribute("61")]
public bool async { get; public set; }
    [DispIdAttribute("65")]
public bool validateOnParse { get; public set; }
    [DispIdAttribute("66")]
public bool resolveExternals { get; public set; }
    [DispIdAttribute("67")]
public bool preserveWhiteSpace { get; public set; }
    [DispIdAttribute("68")]
unknown object onreadystatechange {public set; }
    [DispIdAttribute("69")]
unknown object ondataavailable {public set; }
    [DispIdAttribute("70")]
unknown object ontransformnode {public set; }
    [DispIdAttribute("2")]
public abstract virtual string get_nodeName();
    [DispIdAttribute("3")]
public abstract virtual object get_nodeValue();
    [DispIdAttribute("3")]
public abstract virtual void set_nodeValue(object value);
    [DispIdAttribute("4")]
public abstract virtual DOMNodeType get_nodeType();
    [DispIdAttribute("6")]
public abstract virtual IXMLDOMNode get_parentNode();
    [DispIdAttribute("7")]
public abstract virtual IXMLDOMNodeList get_childNodes();
    [DispIdAttribute("8")]
public abstract virtual IXMLDOMNode get_firstChild();
    [DispIdAttribute("9")]
public abstract virtual IXMLDOMNode get_lastChild();
    [DispIdAttribute("10")]
public abstract virtual IXMLDOMNode get_previousSibling();
    [DispIdAttribute("11")]
public abstract virtual IXMLDOMNode get_nextSibling();
    [DispIdAttribute("12")]
public abstract virtual IXMLDOMNamedNodeMap get_attributes();
    [DispIdAttribute("13")]
public abstract virtual IXMLDOMNode insertBefore(IXMLDOMNode newChild, object refChild);
    [DispIdAttribute("14")]
public abstract virtual IXMLDOMNode replaceChild(IXMLDOMNode newChild, IXMLDOMNode oldChild);
    [DispIdAttribute("15")]
public abstract virtual IXMLDOMNode removeChild(IXMLDOMNode childNode);
    [DispIdAttribute("16")]
public abstract virtual IXMLDOMNode appendChild(IXMLDOMNode newChild);
    [DispIdAttribute("17")]
public abstract virtual bool hasChildNodes();
    [DispIdAttribute("18")]
public abstract virtual IXMLDOMDocument get_ownerDocument();
    [DispIdAttribute("19")]
public abstract virtual IXMLDOMNode cloneNode(bool deep);
    [DispIdAttribute("21")]
public abstract virtual string get_nodeTypeString();
    [DispIdAttribute("24")]
public abstract virtual string get_text();
    [DispIdAttribute("24")]
public abstract virtual void set_text(string value);
    [DispIdAttribute("22")]
public abstract virtual bool get_specified();
    [DispIdAttribute("23")]
public abstract virtual IXMLDOMNode get_definition();
    [DispIdAttribute("25")]
public abstract virtual object get_nodeTypedValue();
    [DispIdAttribute("25")]
public abstract virtual void set_nodeTypedValue(object value);
    [DispIdAttribute("26")]
public abstract virtual object get_dataType();
    [DispIdAttribute("26")]
public abstract virtual void set_dataType(object value);
    [DispIdAttribute("27")]
public abstract virtual string get_xml();
    [DispIdAttribute("28")]
public abstract virtual string transformNode(IXMLDOMNode stylesheet);
    [DispIdAttribute("29")]
public abstract virtual IXMLDOMNodeList selectNodes(string queryString);
    [DispIdAttribute("30")]
public abstract virtual IXMLDOMNode selectSingleNode(string queryString);
    [DispIdAttribute("31")]
public abstract virtual bool get_parsed();
    [DispIdAttribute("32")]
public abstract virtual string get_namespaceURI();
    [DispIdAttribute("33")]
public abstract virtual string get_prefix();
    [DispIdAttribute("34")]
public abstract virtual string get_baseName();
    [DispIdAttribute("35")]
public abstract virtual void transformNodeToObject(IXMLDOMNode stylesheet, object outputObject);
    [DispIdAttribute("38")]
public abstract virtual IXMLDOMDocumentType get_doctype();
    [DispIdAttribute("39")]
public abstract virtual IXMLDOMImplementation get_implementation();
    [DispIdAttribute("40")]
public abstract virtual IXMLDOMElement get_documentElement();
    [DispIdAttribute("40")]
public abstract virtual void set_documentElement(IXMLDOMElement value);
    [DispIdAttribute("41")]
public abstract virtual IXMLDOMElement createElement(string tagName);
    [DispIdAttribute("42")]
public abstract virtual IXMLDOMDocumentFragment createDocumentFragment();
    [DispIdAttribute("43")]
public abstract virtual IXMLDOMText createTextNode(string data);
    [DispIdAttribute("44")]
public abstract virtual IXMLDOMComment createComment(string data);
    [DispIdAttribute("45")]
public abstract virtual IXMLDOMCDATASection createCDATASection(string data);
    [DispIdAttribute("46")]
public abstract virtual IXMLDOMProcessingInstruction createProcessingInstruction(string target, string data);
    [DispIdAttribute("47")]
public abstract virtual IXMLDOMAttribute createAttribute(string name);
    [DispIdAttribute("49")]
public abstract virtual IXMLDOMEntityReference createEntityReference(string name);
    [DispIdAttribute("50")]
public abstract virtual IXMLDOMNodeList getElementsByTagName(string tagName);
    [DispIdAttribute("54")]
public abstract virtual IXMLDOMNode createNode(object type, string name, string namespaceURI);
    [DispIdAttribute("56")]
public abstract virtual IXMLDOMNode nodeFromID(string idString);
    [DispIdAttribute("58")]
public abstract virtual bool load(object xmlSource);
    [DispIdAttribute("-525")]
public abstract virtual int get_readyState();
    [DispIdAttribute("59")]
public abstract virtual IXMLDOMParseError get_parseError();
    [DispIdAttribute("60")]
public abstract virtual string get_url();
    [DispIdAttribute("61")]
public abstract virtual bool get_async();
    [DispIdAttribute("61")]
public abstract virtual void set_async(bool value);
    [DispIdAttribute("62")]
public abstract virtual void abort();
    [DispIdAttribute("63")]
public abstract virtual bool loadXML(string bstrXML);
    [DispIdAttribute("64")]
public abstract virtual void save(object desination);
    [DispIdAttribute("65")]
public abstract virtual bool get_validateOnParse();
    [DispIdAttribute("65")]
public abstract virtual void set_validateOnParse(bool value);
    [DispIdAttribute("66")]
public abstract virtual bool get_resolveExternals();
    [DispIdAttribute("66")]
public abstract virtual void set_resolveExternals(bool value);
    [DispIdAttribute("67")]
public abstract virtual bool get_preserveWhiteSpace();
    [DispIdAttribute("67")]
public abstract virtual void set_preserveWhiteSpace(bool value);
    [DispIdAttribute("68")]
public abstract virtual void set_onreadystatechange(object value);
    [DispIdAttribute("69")]
public abstract virtual void set_ondataavailable(object value);
    [DispIdAttribute("70")]
public abstract virtual void set_ontransformnode(object value);
}
[GuidAttribute("3EFAA413-272F-11D2-836F-0000F87A7782")]
public interface Microsoft.Internal.VisualStudio.Shell.Interop.IXMLDOMDocumentFragment {
    [DispIdAttribute("2")]
public string nodeName { get; }
    [DispIdAttribute("3")]
public object nodeValue { get; public set; }
    [DispIdAttribute("4")]
[ComAliasNameAttribute("Microsoft.Internal.VisualStudio.Shell.Interop.DOMNodeType")]
public DOMNodeType nodeType { get; }
    [DispIdAttribute("6")]
public IXMLDOMNode parentNode { get; }
    [DispIdAttribute("7")]
public IXMLDOMNodeList childNodes { get; }
    [DispIdAttribute("8")]
public IXMLDOMNode firstChild { get; }
    [DispIdAttribute("9")]
public IXMLDOMNode lastChild { get; }
    [DispIdAttribute("10")]
public IXMLDOMNode previousSibling { get; }
    [DispIdAttribute("11")]
public IXMLDOMNode nextSibling { get; }
    [DispIdAttribute("12")]
public IXMLDOMNamedNodeMap attributes { get; }
    [DispIdAttribute("18")]
public IXMLDOMDocument ownerDocument { get; }
    [DispIdAttribute("21")]
public string nodeTypeString { get; }
    [DispIdAttribute("24")]
public string text { get; public set; }
    [DispIdAttribute("22")]
public bool specified { get; }
    [DispIdAttribute("23")]
public IXMLDOMNode definition { get; }
    [DispIdAttribute("25")]
public object nodeTypedValue { get; public set; }
    [DispIdAttribute("26")]
public object dataType { get; public set; }
    [DispIdAttribute("27")]
public string xml { get; }
    [DispIdAttribute("31")]
public bool parsed { get; }
    [DispIdAttribute("32")]
public string namespaceURI { get; }
    [DispIdAttribute("33")]
public string prefix { get; }
    [DispIdAttribute("34")]
public string baseName { get; }
    [DispIdAttribute("2")]
public abstract virtual string get_nodeName();
    [DispIdAttribute("3")]
public abstract virtual object get_nodeValue();
    [DispIdAttribute("3")]
public abstract virtual void set_nodeValue(object value);
    [DispIdAttribute("4")]
public abstract virtual DOMNodeType get_nodeType();
    [DispIdAttribute("6")]
public abstract virtual IXMLDOMNode get_parentNode();
    [DispIdAttribute("7")]
public abstract virtual IXMLDOMNodeList get_childNodes();
    [DispIdAttribute("8")]
public abstract virtual IXMLDOMNode get_firstChild();
    [DispIdAttribute("9")]
public abstract virtual IXMLDOMNode get_lastChild();
    [DispIdAttribute("10")]
public abstract virtual IXMLDOMNode get_previousSibling();
    [DispIdAttribute("11")]
public abstract virtual IXMLDOMNode get_nextSibling();
    [DispIdAttribute("12")]
public abstract virtual IXMLDOMNamedNodeMap get_attributes();
    [DispIdAttribute("13")]
public abstract virtual IXMLDOMNode insertBefore(IXMLDOMNode newChild, object refChild);
    [DispIdAttribute("14")]
public abstract virtual IXMLDOMNode replaceChild(IXMLDOMNode newChild, IXMLDOMNode oldChild);
    [DispIdAttribute("15")]
public abstract virtual IXMLDOMNode removeChild(IXMLDOMNode childNode);
    [DispIdAttribute("16")]
public abstract virtual IXMLDOMNode appendChild(IXMLDOMNode newChild);
    [DispIdAttribute("17")]
public abstract virtual bool hasChildNodes();
    [DispIdAttribute("18")]
public abstract virtual IXMLDOMDocument get_ownerDocument();
    [DispIdAttribute("19")]
public abstract virtual IXMLDOMNode cloneNode(bool deep);
    [DispIdAttribute("21")]
public abstract virtual string get_nodeTypeString();
    [DispIdAttribute("24")]
public abstract virtual string get_text();
    [DispIdAttribute("24")]
public abstract virtual void set_text(string value);
    [DispIdAttribute("22")]
public abstract virtual bool get_specified();
    [DispIdAttribute("23")]
public abstract virtual IXMLDOMNode get_definition();
    [DispIdAttribute("25")]
public abstract virtual object get_nodeTypedValue();
    [DispIdAttribute("25")]
public abstract virtual void set_nodeTypedValue(object value);
    [DispIdAttribute("26")]
public abstract virtual object get_dataType();
    [DispIdAttribute("26")]
public abstract virtual void set_dataType(object value);
    [DispIdAttribute("27")]
public abstract virtual string get_xml();
    [DispIdAttribute("28")]
public abstract virtual string transformNode(IXMLDOMNode stylesheet);
    [DispIdAttribute("29")]
public abstract virtual IXMLDOMNodeList selectNodes(string queryString);
    [DispIdAttribute("30")]
public abstract virtual IXMLDOMNode selectSingleNode(string queryString);
    [DispIdAttribute("31")]
public abstract virtual bool get_parsed();
    [DispIdAttribute("32")]
public abstract virtual string get_namespaceURI();
    [DispIdAttribute("33")]
public abstract virtual string get_prefix();
    [DispIdAttribute("34")]
public abstract virtual string get_baseName();
    [DispIdAttribute("35")]
public abstract virtual void transformNodeToObject(IXMLDOMNode stylesheet, object outputObject);
}
[GuidAttribute("2933BF8B-7B36-11D2-B20E-00C04F983E60")]
public interface Microsoft.Internal.VisualStudio.Shell.Interop.IXMLDOMDocumentType {
    [DispIdAttribute("2")]
public string nodeName { get; }
    [DispIdAttribute("3")]
public object nodeValue { get; public set; }
    [DispIdAttribute("4")]
[ComAliasNameAttribute("Microsoft.Internal.VisualStudio.Shell.Interop.DOMNodeType")]
public DOMNodeType nodeType { get; }
    [DispIdAttribute("6")]
public IXMLDOMNode parentNode { get; }
    [DispIdAttribute("7")]
public IXMLDOMNodeList childNodes { get; }
    [DispIdAttribute("8")]
public IXMLDOMNode firstChild { get; }
    [DispIdAttribute("9")]
public IXMLDOMNode lastChild { get; }
    [DispIdAttribute("10")]
public IXMLDOMNode previousSibling { get; }
    [DispIdAttribute("11")]
public IXMLDOMNode nextSibling { get; }
    [DispIdAttribute("12")]
public IXMLDOMNamedNodeMap attributes { get; }
    [DispIdAttribute("18")]
public IXMLDOMDocument ownerDocument { get; }
    [DispIdAttribute("21")]
public string nodeTypeString { get; }
    [DispIdAttribute("24")]
public string text { get; public set; }
    [DispIdAttribute("22")]
public bool specified { get; }
    [DispIdAttribute("23")]
public IXMLDOMNode definition { get; }
    [DispIdAttribute("25")]
public object nodeTypedValue { get; public set; }
    [DispIdAttribute("26")]
public object dataType { get; public set; }
    [DispIdAttribute("27")]
public string xml { get; }
    [DispIdAttribute("31")]
public bool parsed { get; }
    [DispIdAttribute("32")]
public string namespaceURI { get; }
    [DispIdAttribute("33")]
public string prefix { get; }
    [DispIdAttribute("34")]
public string baseName { get; }
    [DispIdAttribute("131")]
public string name { get; }
    [DispIdAttribute("132")]
public IXMLDOMNamedNodeMap entities { get; }
    [DispIdAttribute("133")]
public IXMLDOMNamedNodeMap notations { get; }
    [DispIdAttribute("2")]
public abstract virtual string get_nodeName();
    [DispIdAttribute("3")]
public abstract virtual object get_nodeValue();
    [DispIdAttribute("3")]
public abstract virtual void set_nodeValue(object value);
    [DispIdAttribute("4")]
public abstract virtual DOMNodeType get_nodeType();
    [DispIdAttribute("6")]
public abstract virtual IXMLDOMNode get_parentNode();
    [DispIdAttribute("7")]
public abstract virtual IXMLDOMNodeList get_childNodes();
    [DispIdAttribute("8")]
public abstract virtual IXMLDOMNode get_firstChild();
    [DispIdAttribute("9")]
public abstract virtual IXMLDOMNode get_lastChild();
    [DispIdAttribute("10")]
public abstract virtual IXMLDOMNode get_previousSibling();
    [DispIdAttribute("11")]
public abstract virtual IXMLDOMNode get_nextSibling();
    [DispIdAttribute("12")]
public abstract virtual IXMLDOMNamedNodeMap get_attributes();
    [DispIdAttribute("13")]
public abstract virtual IXMLDOMNode insertBefore(IXMLDOMNode newChild, object refChild);
    [DispIdAttribute("14")]
public abstract virtual IXMLDOMNode replaceChild(IXMLDOMNode newChild, IXMLDOMNode oldChild);
    [DispIdAttribute("15")]
public abstract virtual IXMLDOMNode removeChild(IXMLDOMNode childNode);
    [DispIdAttribute("16")]
public abstract virtual IXMLDOMNode appendChild(IXMLDOMNode newChild);
    [DispIdAttribute("17")]
public abstract virtual bool hasChildNodes();
    [DispIdAttribute("18")]
public abstract virtual IXMLDOMDocument get_ownerDocument();
    [DispIdAttribute("19")]
public abstract virtual IXMLDOMNode cloneNode(bool deep);
    [DispIdAttribute("21")]
public abstract virtual string get_nodeTypeString();
    [DispIdAttribute("24")]
public abstract virtual string get_text();
    [DispIdAttribute("24")]
public abstract virtual void set_text(string value);
    [DispIdAttribute("22")]
public abstract virtual bool get_specified();
    [DispIdAttribute("23")]
public abstract virtual IXMLDOMNode get_definition();
    [DispIdAttribute("25")]
public abstract virtual object get_nodeTypedValue();
    [DispIdAttribute("25")]
public abstract virtual void set_nodeTypedValue(object value);
    [DispIdAttribute("26")]
public abstract virtual object get_dataType();
    [DispIdAttribute("26")]
public abstract virtual void set_dataType(object value);
    [DispIdAttribute("27")]
public abstract virtual string get_xml();
    [DispIdAttribute("28")]
public abstract virtual string transformNode(IXMLDOMNode stylesheet);
    [DispIdAttribute("29")]
public abstract virtual IXMLDOMNodeList selectNodes(string queryString);
    [DispIdAttribute("30")]
public abstract virtual IXMLDOMNode selectSingleNode(string queryString);
    [DispIdAttribute("31")]
public abstract virtual bool get_parsed();
    [DispIdAttribute("32")]
public abstract virtual string get_namespaceURI();
    [DispIdAttribute("33")]
public abstract virtual string get_prefix();
    [DispIdAttribute("34")]
public abstract virtual string get_baseName();
    [DispIdAttribute("35")]
public abstract virtual void transformNodeToObject(IXMLDOMNode stylesheet, object outputObject);
    [DispIdAttribute("131")]
public abstract virtual string get_name();
    [DispIdAttribute("132")]
public abstract virtual IXMLDOMNamedNodeMap get_entities();
    [DispIdAttribute("133")]
public abstract virtual IXMLDOMNamedNodeMap get_notations();
}
[GuidAttribute("2933BF86-7B36-11D2-B20E-00C04F983E60")]
public interface Microsoft.Internal.VisualStudio.Shell.Interop.IXMLDOMElement {
    [DispIdAttribute("2")]
public string nodeName { get; }
    [DispIdAttribute("3")]
public object nodeValue { get; public set; }
    [ComAliasNameAttribute("Microsoft.Internal.VisualStudio.Shell.Interop.DOMNodeType")]
[DispIdAttribute("4")]
public DOMNodeType nodeType { get; }
    [DispIdAttribute("6")]
public IXMLDOMNode parentNode { get; }
    [DispIdAttribute("7")]
public IXMLDOMNodeList childNodes { get; }
    [DispIdAttribute("8")]
public IXMLDOMNode firstChild { get; }
    [DispIdAttribute("9")]
public IXMLDOMNode lastChild { get; }
    [DispIdAttribute("10")]
public IXMLDOMNode previousSibling { get; }
    [DispIdAttribute("11")]
public IXMLDOMNode nextSibling { get; }
    [DispIdAttribute("12")]
public IXMLDOMNamedNodeMap attributes { get; }
    [DispIdAttribute("18")]
public IXMLDOMDocument ownerDocument { get; }
    [DispIdAttribute("21")]
public string nodeTypeString { get; }
    [DispIdAttribute("24")]
public string text { get; public set; }
    [DispIdAttribute("22")]
public bool specified { get; }
    [DispIdAttribute("23")]
public IXMLDOMNode definition { get; }
    [DispIdAttribute("25")]
public object nodeTypedValue { get; public set; }
    [DispIdAttribute("26")]
public object dataType { get; public set; }
    [DispIdAttribute("27")]
public string xml { get; }
    [DispIdAttribute("31")]
public bool parsed { get; }
    [DispIdAttribute("32")]
public string namespaceURI { get; }
    [DispIdAttribute("33")]
public string prefix { get; }
    [DispIdAttribute("34")]
public string baseName { get; }
    [DispIdAttribute("97")]
public string tagName { get; }
    [DispIdAttribute("2")]
public abstract virtual string get_nodeName();
    [DispIdAttribute("3")]
public abstract virtual object get_nodeValue();
    [DispIdAttribute("3")]
public abstract virtual void set_nodeValue(object value);
    [DispIdAttribute("4")]
public abstract virtual DOMNodeType get_nodeType();
    [DispIdAttribute("6")]
public abstract virtual IXMLDOMNode get_parentNode();
    [DispIdAttribute("7")]
public abstract virtual IXMLDOMNodeList get_childNodes();
    [DispIdAttribute("8")]
public abstract virtual IXMLDOMNode get_firstChild();
    [DispIdAttribute("9")]
public abstract virtual IXMLDOMNode get_lastChild();
    [DispIdAttribute("10")]
public abstract virtual IXMLDOMNode get_previousSibling();
    [DispIdAttribute("11")]
public abstract virtual IXMLDOMNode get_nextSibling();
    [DispIdAttribute("12")]
public abstract virtual IXMLDOMNamedNodeMap get_attributes();
    [DispIdAttribute("13")]
public abstract virtual IXMLDOMNode insertBefore(IXMLDOMNode newChild, object refChild);
    [DispIdAttribute("14")]
public abstract virtual IXMLDOMNode replaceChild(IXMLDOMNode newChild, IXMLDOMNode oldChild);
    [DispIdAttribute("15")]
public abstract virtual IXMLDOMNode removeChild(IXMLDOMNode childNode);
    [DispIdAttribute("16")]
public abstract virtual IXMLDOMNode appendChild(IXMLDOMNode newChild);
    [DispIdAttribute("17")]
public abstract virtual bool hasChildNodes();
    [DispIdAttribute("18")]
public abstract virtual IXMLDOMDocument get_ownerDocument();
    [DispIdAttribute("19")]
public abstract virtual IXMLDOMNode cloneNode(bool deep);
    [DispIdAttribute("21")]
public abstract virtual string get_nodeTypeString();
    [DispIdAttribute("24")]
public abstract virtual string get_text();
    [DispIdAttribute("24")]
public abstract virtual void set_text(string value);
    [DispIdAttribute("22")]
public abstract virtual bool get_specified();
    [DispIdAttribute("23")]
public abstract virtual IXMLDOMNode get_definition();
    [DispIdAttribute("25")]
public abstract virtual object get_nodeTypedValue();
    [DispIdAttribute("25")]
public abstract virtual void set_nodeTypedValue(object value);
    [DispIdAttribute("26")]
public abstract virtual object get_dataType();
    [DispIdAttribute("26")]
public abstract virtual void set_dataType(object value);
    [DispIdAttribute("27")]
public abstract virtual string get_xml();
    [DispIdAttribute("28")]
public abstract virtual string transformNode(IXMLDOMNode stylesheet);
    [DispIdAttribute("29")]
public abstract virtual IXMLDOMNodeList selectNodes(string queryString);
    [DispIdAttribute("30")]
public abstract virtual IXMLDOMNode selectSingleNode(string queryString);
    [DispIdAttribute("31")]
public abstract virtual bool get_parsed();
    [DispIdAttribute("32")]
public abstract virtual string get_namespaceURI();
    [DispIdAttribute("33")]
public abstract virtual string get_prefix();
    [DispIdAttribute("34")]
public abstract virtual string get_baseName();
    [DispIdAttribute("35")]
public abstract virtual void transformNodeToObject(IXMLDOMNode stylesheet, object outputObject);
    [DispIdAttribute("97")]
public abstract virtual string get_tagName();
    [DispIdAttribute("99")]
public abstract virtual object getAttribute(string name);
    [DispIdAttribute("100")]
public abstract virtual void setAttribute(string name, object value);
    [DispIdAttribute("101")]
public abstract virtual void removeAttribute(string name);
    [DispIdAttribute("102")]
public abstract virtual IXMLDOMAttribute getAttributeNode(string name);
    [DispIdAttribute("103")]
public abstract virtual IXMLDOMAttribute setAttributeNode(IXMLDOMAttribute DOMAttribute);
    [DispIdAttribute("104")]
public abstract virtual IXMLDOMAttribute removeAttributeNode(IXMLDOMAttribute DOMAttribute);
    [DispIdAttribute("105")]
public abstract virtual IXMLDOMNodeList getElementsByTagName(string tagName);
    [DispIdAttribute("106")]
public abstract virtual void normalize();
}
[GuidAttribute("2933BF8E-7B36-11D2-B20E-00C04F983E60")]
public interface Microsoft.Internal.VisualStudio.Shell.Interop.IXMLDOMEntityReference {
    [DispIdAttribute("2")]
public string nodeName { get; }
    [DispIdAttribute("3")]
public object nodeValue { get; public set; }
    [ComAliasNameAttribute("Microsoft.Internal.VisualStudio.Shell.Interop.DOMNodeType")]
[DispIdAttribute("4")]
public DOMNodeType nodeType { get; }
    [DispIdAttribute("6")]
public IXMLDOMNode parentNode { get; }
    [DispIdAttribute("7")]
public IXMLDOMNodeList childNodes { get; }
    [DispIdAttribute("8")]
public IXMLDOMNode firstChild { get; }
    [DispIdAttribute("9")]
public IXMLDOMNode lastChild { get; }
    [DispIdAttribute("10")]
public IXMLDOMNode previousSibling { get; }
    [DispIdAttribute("11")]
public IXMLDOMNode nextSibling { get; }
    [DispIdAttribute("12")]
public IXMLDOMNamedNodeMap attributes { get; }
    [DispIdAttribute("18")]
public IXMLDOMDocument ownerDocument { get; }
    [DispIdAttribute("21")]
public string nodeTypeString { get; }
    [DispIdAttribute("24")]
public string text { get; public set; }
    [DispIdAttribute("22")]
public bool specified { get; }
    [DispIdAttribute("23")]
public IXMLDOMNode definition { get; }
    [DispIdAttribute("25")]
public object nodeTypedValue { get; public set; }
    [DispIdAttribute("26")]
public object dataType { get; public set; }
    [DispIdAttribute("27")]
public string xml { get; }
    [DispIdAttribute("31")]
public bool parsed { get; }
    [DispIdAttribute("32")]
public string namespaceURI { get; }
    [DispIdAttribute("33")]
public string prefix { get; }
    [DispIdAttribute("34")]
public string baseName { get; }
    [DispIdAttribute("2")]
public abstract virtual string get_nodeName();
    [DispIdAttribute("3")]
public abstract virtual object get_nodeValue();
    [DispIdAttribute("3")]
public abstract virtual void set_nodeValue(object value);
    [DispIdAttribute("4")]
public abstract virtual DOMNodeType get_nodeType();
    [DispIdAttribute("6")]
public abstract virtual IXMLDOMNode get_parentNode();
    [DispIdAttribute("7")]
public abstract virtual IXMLDOMNodeList get_childNodes();
    [DispIdAttribute("8")]
public abstract virtual IXMLDOMNode get_firstChild();
    [DispIdAttribute("9")]
public abstract virtual IXMLDOMNode get_lastChild();
    [DispIdAttribute("10")]
public abstract virtual IXMLDOMNode get_previousSibling();
    [DispIdAttribute("11")]
public abstract virtual IXMLDOMNode get_nextSibling();
    [DispIdAttribute("12")]
public abstract virtual IXMLDOMNamedNodeMap get_attributes();
    [DispIdAttribute("13")]
public abstract virtual IXMLDOMNode insertBefore(IXMLDOMNode newChild, object refChild);
    [DispIdAttribute("14")]
public abstract virtual IXMLDOMNode replaceChild(IXMLDOMNode newChild, IXMLDOMNode oldChild);
    [DispIdAttribute("15")]
public abstract virtual IXMLDOMNode removeChild(IXMLDOMNode childNode);
    [DispIdAttribute("16")]
public abstract virtual IXMLDOMNode appendChild(IXMLDOMNode newChild);
    [DispIdAttribute("17")]
public abstract virtual bool hasChildNodes();
    [DispIdAttribute("18")]
public abstract virtual IXMLDOMDocument get_ownerDocument();
    [DispIdAttribute("19")]
public abstract virtual IXMLDOMNode cloneNode(bool deep);
    [DispIdAttribute("21")]
public abstract virtual string get_nodeTypeString();
    [DispIdAttribute("24")]
public abstract virtual string get_text();
    [DispIdAttribute("24")]
public abstract virtual void set_text(string value);
    [DispIdAttribute("22")]
public abstract virtual bool get_specified();
    [DispIdAttribute("23")]
public abstract virtual IXMLDOMNode get_definition();
    [DispIdAttribute("25")]
public abstract virtual object get_nodeTypedValue();
    [DispIdAttribute("25")]
public abstract virtual void set_nodeTypedValue(object value);
    [DispIdAttribute("26")]
public abstract virtual object get_dataType();
    [DispIdAttribute("26")]
public abstract virtual void set_dataType(object value);
    [DispIdAttribute("27")]
public abstract virtual string get_xml();
    [DispIdAttribute("28")]
public abstract virtual string transformNode(IXMLDOMNode stylesheet);
    [DispIdAttribute("29")]
public abstract virtual IXMLDOMNodeList selectNodes(string queryString);
    [DispIdAttribute("30")]
public abstract virtual IXMLDOMNode selectSingleNode(string queryString);
    [DispIdAttribute("31")]
public abstract virtual bool get_parsed();
    [DispIdAttribute("32")]
public abstract virtual string get_namespaceURI();
    [DispIdAttribute("33")]
public abstract virtual string get_prefix();
    [DispIdAttribute("34")]
public abstract virtual string get_baseName();
    [DispIdAttribute("35")]
public abstract virtual void transformNodeToObject(IXMLDOMNode stylesheet, object outputObject);
}
[GuidAttribute("2933BF8F-7B36-11D2-B20E-00C04F983E60")]
public interface Microsoft.Internal.VisualStudio.Shell.Interop.IXMLDOMImplementation {
    [DispIdAttribute("145")]
public abstract virtual bool hasFeature(string feature, string version);
}
[DefaultMemberAttribute("item")]
[GuidAttribute("2933BF83-7B36-11D2-B20E-00C04F983E60")]
public interface Microsoft.Internal.VisualStudio.Shell.Interop.IXMLDOMNamedNodeMap {
    [DispIdAttribute("0")]
public IXMLDOMNode item { get; }
    [DispIdAttribute("74")]
public int length { get; }
    [DispIdAttribute("83")]
public abstract virtual IXMLDOMNode getNamedItem(string name);
    [DispIdAttribute("84")]
public abstract virtual IXMLDOMNode setNamedItem(IXMLDOMNode newItem);
    [DispIdAttribute("85")]
public abstract virtual IXMLDOMNode removeNamedItem(string name);
    [DispIdAttribute("0")]
public abstract virtual IXMLDOMNode get_item(int index);
    [DispIdAttribute("74")]
public abstract virtual int get_length();
    [DispIdAttribute("87")]
public abstract virtual IXMLDOMNode getQualifiedItem(string baseName, string namespaceURI);
    [DispIdAttribute("88")]
public abstract virtual IXMLDOMNode removeQualifiedItem(string baseName, string namespaceURI);
    [DispIdAttribute("89")]
public abstract virtual IXMLDOMNode nextNode();
    [DispIdAttribute("90")]
public abstract virtual void reset();
    [DispIdAttribute("-4")]
public abstract virtual IEnumerator GetEnumerator();
}
[GuidAttribute("2933BF80-7B36-11D2-B20E-00C04F983E60")]
public interface Microsoft.Internal.VisualStudio.Shell.Interop.IXMLDOMNode {
    [DispIdAttribute("2")]
public string nodeName { get; }
    [DispIdAttribute("3")]
public object nodeValue { get; public set; }
    [ComAliasNameAttribute("Microsoft.Internal.VisualStudio.Shell.Interop.DOMNodeType")]
[DispIdAttribute("4")]
public DOMNodeType nodeType { get; }
    [DispIdAttribute("6")]
public IXMLDOMNode parentNode { get; }
    [DispIdAttribute("7")]
public IXMLDOMNodeList childNodes { get; }
    [DispIdAttribute("8")]
public IXMLDOMNode firstChild { get; }
    [DispIdAttribute("9")]
public IXMLDOMNode lastChild { get; }
    [DispIdAttribute("10")]
public IXMLDOMNode previousSibling { get; }
    [DispIdAttribute("11")]
public IXMLDOMNode nextSibling { get; }
    [DispIdAttribute("12")]
public IXMLDOMNamedNodeMap attributes { get; }
    [DispIdAttribute("18")]
public IXMLDOMDocument ownerDocument { get; }
    [DispIdAttribute("21")]
public string nodeTypeString { get; }
    [DispIdAttribute("24")]
public string text { get; public set; }
    [DispIdAttribute("22")]
public bool specified { get; }
    [DispIdAttribute("23")]
public IXMLDOMNode definition { get; }
    [DispIdAttribute("25")]
public object nodeTypedValue { get; public set; }
    [DispIdAttribute("26")]
public object dataType { get; public set; }
    [DispIdAttribute("27")]
public string xml { get; }
    [DispIdAttribute("31")]
public bool parsed { get; }
    [DispIdAttribute("32")]
public string namespaceURI { get; }
    [DispIdAttribute("33")]
public string prefix { get; }
    [DispIdAttribute("34")]
public string baseName { get; }
    [DispIdAttribute("2")]
public abstract virtual string get_nodeName();
    [DispIdAttribute("3")]
public abstract virtual object get_nodeValue();
    [DispIdAttribute("3")]
public abstract virtual void set_nodeValue(object value);
    [DispIdAttribute("4")]
public abstract virtual DOMNodeType get_nodeType();
    [DispIdAttribute("6")]
public abstract virtual IXMLDOMNode get_parentNode();
    [DispIdAttribute("7")]
public abstract virtual IXMLDOMNodeList get_childNodes();
    [DispIdAttribute("8")]
public abstract virtual IXMLDOMNode get_firstChild();
    [DispIdAttribute("9")]
public abstract virtual IXMLDOMNode get_lastChild();
    [DispIdAttribute("10")]
public abstract virtual IXMLDOMNode get_previousSibling();
    [DispIdAttribute("11")]
public abstract virtual IXMLDOMNode get_nextSibling();
    [DispIdAttribute("12")]
public abstract virtual IXMLDOMNamedNodeMap get_attributes();
    [DispIdAttribute("13")]
public abstract virtual IXMLDOMNode insertBefore(IXMLDOMNode newChild, object refChild);
    [DispIdAttribute("14")]
public abstract virtual IXMLDOMNode replaceChild(IXMLDOMNode newChild, IXMLDOMNode oldChild);
    [DispIdAttribute("15")]
public abstract virtual IXMLDOMNode removeChild(IXMLDOMNode childNode);
    [DispIdAttribute("16")]
public abstract virtual IXMLDOMNode appendChild(IXMLDOMNode newChild);
    [DispIdAttribute("17")]
public abstract virtual bool hasChildNodes();
    [DispIdAttribute("18")]
public abstract virtual IXMLDOMDocument get_ownerDocument();
    [DispIdAttribute("19")]
public abstract virtual IXMLDOMNode cloneNode(bool deep);
    [DispIdAttribute("21")]
public abstract virtual string get_nodeTypeString();
    [DispIdAttribute("24")]
public abstract virtual string get_text();
    [DispIdAttribute("24")]
public abstract virtual void set_text(string value);
    [DispIdAttribute("22")]
public abstract virtual bool get_specified();
    [DispIdAttribute("23")]
public abstract virtual IXMLDOMNode get_definition();
    [DispIdAttribute("25")]
public abstract virtual object get_nodeTypedValue();
    [DispIdAttribute("25")]
public abstract virtual void set_nodeTypedValue(object value);
    [DispIdAttribute("26")]
public abstract virtual object get_dataType();
    [DispIdAttribute("26")]
public abstract virtual void set_dataType(object value);
    [DispIdAttribute("27")]
public abstract virtual string get_xml();
    [DispIdAttribute("28")]
public abstract virtual string transformNode(IXMLDOMNode stylesheet);
    [DispIdAttribute("29")]
public abstract virtual IXMLDOMNodeList selectNodes(string queryString);
    [DispIdAttribute("30")]
public abstract virtual IXMLDOMNode selectSingleNode(string queryString);
    [DispIdAttribute("31")]
public abstract virtual bool get_parsed();
    [DispIdAttribute("32")]
public abstract virtual string get_namespaceURI();
    [DispIdAttribute("33")]
public abstract virtual string get_prefix();
    [DispIdAttribute("34")]
public abstract virtual string get_baseName();
    [DispIdAttribute("35")]
public abstract virtual void transformNodeToObject(IXMLDOMNode stylesheet, object outputObject);
}
[DefaultMemberAttribute("item")]
[GuidAttribute("2933BF82-7B36-11D2-B20E-00C04F983E60")]
public interface Microsoft.Internal.VisualStudio.Shell.Interop.IXMLDOMNodeList {
    [DispIdAttribute("0")]
public IXMLDOMNode item { get; }
    [DispIdAttribute("74")]
public int length { get; }
    [DispIdAttribute("0")]
public abstract virtual IXMLDOMNode get_item(int index);
    [DispIdAttribute("74")]
public abstract virtual int get_length();
    [DispIdAttribute("76")]
public abstract virtual IXMLDOMNode nextNode();
    [DispIdAttribute("77")]
public abstract virtual void reset();
    [DispIdAttribute("-4")]
public abstract virtual IEnumerator GetEnumerator();
}
[DefaultMemberAttribute("errorCode")]
[GuidAttribute("3EFAA426-272F-11D2-836F-0000F87A7782")]
public interface Microsoft.Internal.VisualStudio.Shell.Interop.IXMLDOMParseError {
    [DispIdAttribute("0")]
public int errorCode { get; }
    [DispIdAttribute("179")]
public string url { get; }
    [DispIdAttribute("180")]
public string reason { get; }
    [DispIdAttribute("181")]
public string srcText { get; }
    [DispIdAttribute("182")]
public int line { get; }
    [DispIdAttribute("183")]
public int linepos { get; }
    [DispIdAttribute("184")]
public int filepos { get; }
    [DispIdAttribute("0")]
public abstract virtual int get_errorCode();
    [DispIdAttribute("179")]
public abstract virtual string get_url();
    [DispIdAttribute("180")]
public abstract virtual string get_reason();
    [DispIdAttribute("181")]
public abstract virtual string get_srcText();
    [DispIdAttribute("182")]
public abstract virtual int get_line();
    [DispIdAttribute("183")]
public abstract virtual int get_linepos();
    [DispIdAttribute("184")]
public abstract virtual int get_filepos();
}
[GuidAttribute("2933BF89-7B36-11D2-B20E-00C04F983E60")]
public interface Microsoft.Internal.VisualStudio.Shell.Interop.IXMLDOMProcessingInstruction {
    [DispIdAttribute("2")]
public string nodeName { get; }
    [DispIdAttribute("3")]
public object nodeValue { get; public set; }
    [ComAliasNameAttribute("Microsoft.Internal.VisualStudio.Shell.Interop.DOMNodeType")]
[DispIdAttribute("4")]
public DOMNodeType nodeType { get; }
    [DispIdAttribute("6")]
public IXMLDOMNode parentNode { get; }
    [DispIdAttribute("7")]
public IXMLDOMNodeList childNodes { get; }
    [DispIdAttribute("8")]
public IXMLDOMNode firstChild { get; }
    [DispIdAttribute("9")]
public IXMLDOMNode lastChild { get; }
    [DispIdAttribute("10")]
public IXMLDOMNode previousSibling { get; }
    [DispIdAttribute("11")]
public IXMLDOMNode nextSibling { get; }
    [DispIdAttribute("12")]
public IXMLDOMNamedNodeMap attributes { get; }
    [DispIdAttribute("18")]
public IXMLDOMDocument ownerDocument { get; }
    [DispIdAttribute("21")]
public string nodeTypeString { get; }
    [DispIdAttribute("24")]
public string text { get; public set; }
    [DispIdAttribute("22")]
public bool specified { get; }
    [DispIdAttribute("23")]
public IXMLDOMNode definition { get; }
    [DispIdAttribute("25")]
public object nodeTypedValue { get; public set; }
    [DispIdAttribute("26")]
public object dataType { get; public set; }
    [DispIdAttribute("27")]
public string xml { get; }
    [DispIdAttribute("31")]
public bool parsed { get; }
    [DispIdAttribute("32")]
public string namespaceURI { get; }
    [DispIdAttribute("33")]
public string prefix { get; }
    [DispIdAttribute("34")]
public string baseName { get; }
    [DispIdAttribute("127")]
public string target { get; }
    [DispIdAttribute("128")]
public string data { get; public set; }
    [DispIdAttribute("2")]
public abstract virtual string get_nodeName();
    [DispIdAttribute("3")]
public abstract virtual object get_nodeValue();
    [DispIdAttribute("3")]
public abstract virtual void set_nodeValue(object value);
    [DispIdAttribute("4")]
public abstract virtual DOMNodeType get_nodeType();
    [DispIdAttribute("6")]
public abstract virtual IXMLDOMNode get_parentNode();
    [DispIdAttribute("7")]
public abstract virtual IXMLDOMNodeList get_childNodes();
    [DispIdAttribute("8")]
public abstract virtual IXMLDOMNode get_firstChild();
    [DispIdAttribute("9")]
public abstract virtual IXMLDOMNode get_lastChild();
    [DispIdAttribute("10")]
public abstract virtual IXMLDOMNode get_previousSibling();
    [DispIdAttribute("11")]
public abstract virtual IXMLDOMNode get_nextSibling();
    [DispIdAttribute("12")]
public abstract virtual IXMLDOMNamedNodeMap get_attributes();
    [DispIdAttribute("13")]
public abstract virtual IXMLDOMNode insertBefore(IXMLDOMNode newChild, object refChild);
    [DispIdAttribute("14")]
public abstract virtual IXMLDOMNode replaceChild(IXMLDOMNode newChild, IXMLDOMNode oldChild);
    [DispIdAttribute("15")]
public abstract virtual IXMLDOMNode removeChild(IXMLDOMNode childNode);
    [DispIdAttribute("16")]
public abstract virtual IXMLDOMNode appendChild(IXMLDOMNode newChild);
    [DispIdAttribute("17")]
public abstract virtual bool hasChildNodes();
    [DispIdAttribute("18")]
public abstract virtual IXMLDOMDocument get_ownerDocument();
    [DispIdAttribute("19")]
public abstract virtual IXMLDOMNode cloneNode(bool deep);
    [DispIdAttribute("21")]
public abstract virtual string get_nodeTypeString();
    [DispIdAttribute("24")]
public abstract virtual string get_text();
    [DispIdAttribute("24")]
public abstract virtual void set_text(string value);
    [DispIdAttribute("22")]
public abstract virtual bool get_specified();
    [DispIdAttribute("23")]
public abstract virtual IXMLDOMNode get_definition();
    [DispIdAttribute("25")]
public abstract virtual object get_nodeTypedValue();
    [DispIdAttribute("25")]
public abstract virtual void set_nodeTypedValue(object value);
    [DispIdAttribute("26")]
public abstract virtual object get_dataType();
    [DispIdAttribute("26")]
public abstract virtual void set_dataType(object value);
    [DispIdAttribute("27")]
public abstract virtual string get_xml();
    [DispIdAttribute("28")]
public abstract virtual string transformNode(IXMLDOMNode stylesheet);
    [DispIdAttribute("29")]
public abstract virtual IXMLDOMNodeList selectNodes(string queryString);
    [DispIdAttribute("30")]
public abstract virtual IXMLDOMNode selectSingleNode(string queryString);
    [DispIdAttribute("31")]
public abstract virtual bool get_parsed();
    [DispIdAttribute("32")]
public abstract virtual string get_namespaceURI();
    [DispIdAttribute("33")]
public abstract virtual string get_prefix();
    [DispIdAttribute("34")]
public abstract virtual string get_baseName();
    [DispIdAttribute("35")]
public abstract virtual void transformNodeToObject(IXMLDOMNode stylesheet, object outputObject);
    [DispIdAttribute("127")]
public abstract virtual string get_target();
    [DispIdAttribute("128")]
public abstract virtual string get_data();
    [DispIdAttribute("128")]
public abstract virtual void set_data(string value);
}
[GuidAttribute("2933BF87-7B36-11D2-B20E-00C04F983E60")]
public interface Microsoft.Internal.VisualStudio.Shell.Interop.IXMLDOMText {
    [DispIdAttribute("2")]
public string nodeName { get; }
    [DispIdAttribute("3")]
public object nodeValue { get; public set; }
    [ComAliasNameAttribute("Microsoft.Internal.VisualStudio.Shell.Interop.DOMNodeType")]
[DispIdAttribute("4")]
public DOMNodeType nodeType { get; }
    [DispIdAttribute("6")]
public IXMLDOMNode parentNode { get; }
    [DispIdAttribute("7")]
public IXMLDOMNodeList childNodes { get; }
    [DispIdAttribute("8")]
public IXMLDOMNode firstChild { get; }
    [DispIdAttribute("9")]
public IXMLDOMNode lastChild { get; }
    [DispIdAttribute("10")]
public IXMLDOMNode previousSibling { get; }
    [DispIdAttribute("11")]
public IXMLDOMNode nextSibling { get; }
    [DispIdAttribute("12")]
public IXMLDOMNamedNodeMap attributes { get; }
    [DispIdAttribute("18")]
public IXMLDOMDocument ownerDocument { get; }
    [DispIdAttribute("21")]
public string nodeTypeString { get; }
    [DispIdAttribute("24")]
public string text { get; public set; }
    [DispIdAttribute("22")]
public bool specified { get; }
    [DispIdAttribute("23")]
public IXMLDOMNode definition { get; }
    [DispIdAttribute("25")]
public object nodeTypedValue { get; public set; }
    [DispIdAttribute("26")]
public object dataType { get; public set; }
    [DispIdAttribute("27")]
public string xml { get; }
    [DispIdAttribute("31")]
public bool parsed { get; }
    [DispIdAttribute("32")]
public string namespaceURI { get; }
    [DispIdAttribute("33")]
public string prefix { get; }
    [DispIdAttribute("34")]
public string baseName { get; }
    [DispIdAttribute("109")]
public string data { get; public set; }
    [DispIdAttribute("110")]
public int length { get; }
    [DispIdAttribute("2")]
public abstract virtual string get_nodeName();
    [DispIdAttribute("3")]
public abstract virtual object get_nodeValue();
    [DispIdAttribute("3")]
public abstract virtual void set_nodeValue(object value);
    [DispIdAttribute("4")]
public abstract virtual DOMNodeType get_nodeType();
    [DispIdAttribute("6")]
public abstract virtual IXMLDOMNode get_parentNode();
    [DispIdAttribute("7")]
public abstract virtual IXMLDOMNodeList get_childNodes();
    [DispIdAttribute("8")]
public abstract virtual IXMLDOMNode get_firstChild();
    [DispIdAttribute("9")]
public abstract virtual IXMLDOMNode get_lastChild();
    [DispIdAttribute("10")]
public abstract virtual IXMLDOMNode get_previousSibling();
    [DispIdAttribute("11")]
public abstract virtual IXMLDOMNode get_nextSibling();
    [DispIdAttribute("12")]
public abstract virtual IXMLDOMNamedNodeMap get_attributes();
    [DispIdAttribute("13")]
public abstract virtual IXMLDOMNode insertBefore(IXMLDOMNode newChild, object refChild);
    [DispIdAttribute("14")]
public abstract virtual IXMLDOMNode replaceChild(IXMLDOMNode newChild, IXMLDOMNode oldChild);
    [DispIdAttribute("15")]
public abstract virtual IXMLDOMNode removeChild(IXMLDOMNode childNode);
    [DispIdAttribute("16")]
public abstract virtual IXMLDOMNode appendChild(IXMLDOMNode newChild);
    [DispIdAttribute("17")]
public abstract virtual bool hasChildNodes();
    [DispIdAttribute("18")]
public abstract virtual IXMLDOMDocument get_ownerDocument();
    [DispIdAttribute("19")]
public abstract virtual IXMLDOMNode cloneNode(bool deep);
    [DispIdAttribute("21")]
public abstract virtual string get_nodeTypeString();
    [DispIdAttribute("24")]
public abstract virtual string get_text();
    [DispIdAttribute("24")]
public abstract virtual void set_text(string value);
    [DispIdAttribute("22")]
public abstract virtual bool get_specified();
    [DispIdAttribute("23")]
public abstract virtual IXMLDOMNode get_definition();
    [DispIdAttribute("25")]
public abstract virtual object get_nodeTypedValue();
    [DispIdAttribute("25")]
public abstract virtual void set_nodeTypedValue(object value);
    [DispIdAttribute("26")]
public abstract virtual object get_dataType();
    [DispIdAttribute("26")]
public abstract virtual void set_dataType(object value);
    [DispIdAttribute("27")]
public abstract virtual string get_xml();
    [DispIdAttribute("28")]
public abstract virtual string transformNode(IXMLDOMNode stylesheet);
    [DispIdAttribute("29")]
public abstract virtual IXMLDOMNodeList selectNodes(string queryString);
    [DispIdAttribute("30")]
public abstract virtual IXMLDOMNode selectSingleNode(string queryString);
    [DispIdAttribute("31")]
public abstract virtual bool get_parsed();
    [DispIdAttribute("32")]
public abstract virtual string get_namespaceURI();
    [DispIdAttribute("33")]
public abstract virtual string get_prefix();
    [DispIdAttribute("34")]
public abstract virtual string get_baseName();
    [DispIdAttribute("35")]
public abstract virtual void transformNodeToObject(IXMLDOMNode stylesheet, object outputObject);
    [DispIdAttribute("109")]
public abstract virtual string get_data();
    [DispIdAttribute("109")]
public abstract virtual void set_data(string value);
    [DispIdAttribute("110")]
public abstract virtual int get_length();
    [DispIdAttribute("111")]
public abstract virtual string substringData(int offset, int count);
    [DispIdAttribute("112")]
public abstract virtual void appendData(string data);
    [DispIdAttribute("113")]
public abstract virtual void insertData(int offset, string data);
    [DispIdAttribute("114")]
public abstract virtual void deleteData(int offset, int count);
    [DispIdAttribute("115")]
public abstract virtual void replaceData(int offset, int count, string data);
    [DispIdAttribute("123")]
public abstract virtual IXMLDOMText splitText(int offset);
}
public class Microsoft.Internal.VisualStudio.Shell.Interop.KeyBindingData : ValueType {
    [ComAliasNameAttribute("KeyBindingId")]
public KeyBindingId KeyBindingId;
    [ComAliasNameAttribute("BYTE")]
public byte Key1;
    [ComAliasNameAttribute("BYTE")]
public byte Modifier1;
    [ComAliasNameAttribute("BYTE")]
public byte Key2;
    [ComAliasNameAttribute("BYTE")]
public byte Modifier2;
}
public class Microsoft.Internal.VisualStudio.Shell.Interop.KeyBindingId : ValueType {
    [ComAliasNameAttribute("GUID_ID")]
public ushort EmulationGuidId;
    [ComAliasNameAttribute("GUID_ID")]
public ushort EditorGuidId;
    [ComAliasNameAttribute("CommandTableId")]
public CommandTableId CommandId;
}
public enum Microsoft.Internal.VisualStudio.Shell.Interop.LoadPackageReasonPrivate : Enum {
    public int value__;
    public static LoadPackageReasonPrivate LR_Unknown;
    public static LoadPackageReasonPrivate LR_Preload;
    public static LoadPackageReasonPrivate LR_Autoload;
    public static LoadPackageReasonPrivate LR_QueryService;
    public static LoadPackageReasonPrivate LR_EditorFactory;
    public static LoadPackageReasonPrivate LR_ProjectFactory;
    public static LoadPackageReasonPrivate LR_Toolwindow;
    public static LoadPackageReasonPrivate LR_ExecCmd;
    public static LoadPackageReasonPrivate LR_ExtensionPoint;
    public static LoadPackageReasonPrivate LR_UIFactory;
    public static LoadPackageReasonPrivate LR_DataSourceFactory;
    public static LoadPackageReasonPrivate LR_Toolbox;
    public static LoadPackageReasonPrivate LR_Automation;
    public static LoadPackageReasonPrivate LR_HelpAbout;
    public static LoadPackageReasonPrivate LR_AddStandardPreviewer;
    public static LoadPackageReasonPrivate LR_ComponentPicker;
    public static LoadPackageReasonPrivate LR_SolutionPersistence;
    public static LoadPackageReasonPrivate LR_FontsAndColors;
    public static LoadPackageReasonPrivate LR_CommandLineSwitch;
    public static LoadPackageReasonPrivate LR_DataConverter;
    public static LoadPackageReasonPrivate LR_ToolsOptions;
    public static LoadPackageReasonPrivate LR_ImportExportSettings;
}
[GuidAttribute("1AC00CBF-1B7B-4513-B868-9B27DC7587F0")]
public enum Microsoft.Internal.VisualStudio.Shell.Interop.LogicalViewKind : Enum {
    public int value__;
    public static LogicalViewKind Primary;
    public static LogicalViewKind Any;
    public static LogicalViewKind Debugging;
    public static LogicalViewKind Code;
    public static LogicalViewKind Designer;
    public static LogicalViewKind Text;
    public static LogicalViewKind UserChoose;
    public static LogicalViewKind ProjectSpecific;
}
[ComConversionLossAttribute]
public class Microsoft.Internal.VisualStudio.Shell.Interop.MemorySectionInfoPrivate : ValueType {
    [ComAliasNameAttribute("BYTE")]
[ComConversionLossAttribute]
public IntPtr m_pSection;
    [ComAliasNameAttribute("INT")]
public int m_pixelWidth;
    [ComAliasNameAttribute("INT")]
public int m_pixelHeight;
    [ComAliasNameAttribute("PixelFormatPrivate")]
public int m_pixelFormat;
    [ComAliasNameAttribute("INT")]
public int m_stride;
    [ComAliasNameAttribute("INT")]
public int m_offset;
    [ComAliasNameAttribute("COLORREF")]
public UInt32 m_crTransparent;
}
public class Microsoft.Internal.VisualStudio.Shell.Interop.MenuData : ValueType {
    [ComAliasNameAttribute("CommandTableId")]
public CommandTableId MenuId;
    [ComAliasNameAttribute("StringId")]
public UInt32 MenuTextId;
    [ComAliasNameAttribute("StringId")]
public UInt32 CommandNameId;
    [ComAliasNameAttribute("VSCommandTypes")]
public UInt32 type;
    [ComAliasNameAttribute("VSCommandFlags")]
public long flags;
}
public class Microsoft.Internal.VisualStudio.Shell.Interop.MenuGroupData : ValueType {
    [ComAliasNameAttribute("CommandTableId")]
public CommandTableId GroupId;
    [ComAliasNameAttribute("DWORD")]
public UInt32 GroupPriority;
}
public enum Microsoft.Internal.VisualStudio.Shell.Interop.OLECMDTEXTFEXT : Enum {
    public int value__;
    public static OLECMDTEXTFEXT OLECMDTEXTFEXT_NONE;
    public static OLECMDTEXTFEXT OLECMDTEXTFEXT_NAME;
    public static OLECMDTEXTFEXT OLECMDTEXTFEXT_STATUS;
    public static OLECMDTEXTFEXT OLECMDTEXTFEXT_AUTOMATIONNAME;
}
public enum Microsoft.Internal.VisualStudio.Shell.Interop.PROJECTCOMPATIBILITYSTATUSKIND : Enum {
    public int value__;
    public static PROJECTCOMPATIBILITYSTATUSKIND PROJECTCOMPATIBILITYSTATUSKIND_OKTOOPEN;
    public static PROJECTCOMPATIBILITYSTATUSKIND PROJECTCOMPATIBILITYSTATUSKIND_DEPRECATED;
    public static PROJECTCOMPATIBILITYSTATUSKIND PROJECTCOMPATIBILITYSTATUSKIND_NEEDSSAFEREPAIR;
    public static PROJECTCOMPATIBILITYSTATUSKIND PROJECTCOMPATIBILITYSTATUSKIND_NEEDSUNSAFEREPAIR;
    public static PROJECTCOMPATIBILITYSTATUSKIND PROJECTCOMPATIBILITYSTATUSKIND_NEEDSONEWAYUPGRADE;
    public static PROJECTCOMPATIBILITYSTATUSKIND PROJECTCOMPATIBILITYSTATUSKIND_INCOMPATIBLE;
}
public enum Microsoft.Internal.VisualStudio.Shell.Interop.ProjectStartupMode : Enum {
    public int value__;
    public static ProjectStartupMode ProjectStartupMode_None;
    public static ProjectStartupMode ProjectStartupMode_Run;
    public static ProjectStartupMode ProjectStartupMode_RunAndDebug;
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("089E07BE-826A-4748-9B86-162E0E0DFCBC")]
public interface Microsoft.Internal.VisualStudio.Shell.Interop.SBackgroundInitializationSafetyChecker {
}
public class Microsoft.Internal.VisualStudio.Shell.Interop.ScopeLocation : ValueType {
    [ComAliasNameAttribute("WellKnownScopeId")]
public UInt32 ScopeIds;
    public Guid ScopeGuid;
    [ComAliasNameAttribute("DWORD")]
public UInt32 ScopeDWord;
}
public class Microsoft.Internal.VisualStudio.Shell.Interop.ScopeLocation2 : ValueType {
    [ComAliasNameAttribute("VsShellPrivate110.WellKnownScopeId")]
public UInt32 ScopeIds;
    public Guid ScopeGuid;
    public UInt32 ScopeDWord;
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("5D6908D1-E25B-4E09-B1F9-C8242D11B99E")]
public interface Microsoft.Internal.VisualStudio.Shell.Interop.SDocumentFactory {
}
public enum Microsoft.Internal.VisualStudio.Shell.Interop.SETTINGSSCOPE : Enum {
    public int value__;
    public static SETTINGSSCOPE SS_LOCAL;
    public static SETTINGSSCOPE SS_TRANSMITTABLE;
    public static SETTINGSSCOPE SS_ALL;
}
[GuidAttribute("9D51CEF6-110B-402F-9861-6ED775EC67F0")]
public static class Microsoft.Internal.VisualStudio.Shell.Interop.ShellPrivateGuids : object {
    public static string CLSID_VsManagedObjectAggregatorPrivate;
}
public enum Microsoft.Internal.VisualStudio.Shell.Interop.STARTUP_PROJECT_SETTING : Enum {
    public int value__;
    public static STARTUP_PROJECT_SETTING SPS_SINGLE;
    public static STARTUP_PROJECT_SETTING SPS_MULTIPLE;
    public static STARTUP_PROJECT_SETTING SPS_CURRENTSELECTION;
    public static STARTUP_PROJECT_SETTING SPS_UNINITIALIZED;
}
[GuidAttribute("2ed04951-c74b-4361-93bf-9b4201da0cd8")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.Internal.VisualStudio.Shell.Interop.SVsArtificialDelay {
}
[GuidAttribute("9D16E5D4-202F-42AE-85C7-D8259F607F54")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.Internal.VisualStudio.Shell.Interop.SVsAutoLoadManager {
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("BDF63C89-B9D4-4FB9-976A-1CD68648DDE7")]
public interface Microsoft.Internal.VisualStudio.Shell.Interop.SVsAutoloadRestrictionServicePrivate {
}
[GuidAttribute("7db44426-4965-48d8-9b03-d56569592903")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.Internal.VisualStudio.Shell.Interop.SVsAutoMetricsService {
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("3003D0A9-831A-4FE8-A647-CFD09F43E771")]
public interface Microsoft.Internal.VisualStudio.Shell.Interop.SVsBackForwardNavigation {
}
[GuidAttribute("E21CDA6C-BC51-4C34-ABB7-167D7539FAC9")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.Internal.VisualStudio.Shell.Interop.SVsBackgroundSolution {
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("5D2B8A5A-042B-4378-BBD0-7D2D8D644644")]
public interface Microsoft.Internal.VisualStudio.Shell.Interop.SVsBuildAccelTable {
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("445DD361-6742-4170-BB5F-11AF57F09DAA")]
public interface Microsoft.Internal.VisualStudio.Shell.Interop.SVsBuildAvailabilityServicePrivate {
}
[GuidAttribute("E0E07011-E584-4D8D-9C92-9B3FECCBFB08")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.Internal.VisualStudio.Shell.Interop.SVsBuildStatusUpdateServicePrivate {
}
[GuidAttribute("0EB7B18C-6295-46E0-A88A-01C49368A9C8")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.Internal.VisualStudio.Shell.Interop.SVsCachingResourceManager {
}
[GuidAttribute("E5653D1B-CEBA-45DF-9068-4C8254D61CA6")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.Internal.VisualStudio.Shell.Interop.SVsChooseToolboxItems {
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("83FA880D-6427-483A-875B-61291B1E2549")]
public interface Microsoft.Internal.VisualStudio.Shell.Interop.SVsCloseRemoteWorkspaceServicePrivate {
}
[GuidAttribute("AB2E4463-8907-4EF4-A899-96D2B321EBCA")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.Internal.VisualStudio.Shell.Interop.SVsCloseSolutionProjectTelemetryService {
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("0E7CC8F6-5899-4CE7-9EDE-8A483DA5DC57")]
public interface Microsoft.Internal.VisualStudio.Shell.Interop.SVsCloudEnvironmentProperties {
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("217F303E-0BB5-4375-A431-8A0202C9F9AF")]
public interface Microsoft.Internal.VisualStudio.Shell.Interop.SVsCodespaceClientSolutionPersistence {
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("6452C067-A2F1-418A-A911-15E195AB077B")]
public interface Microsoft.Internal.VisualStudio.Shell.Interop.SVsCodespaceServerSolutionPersistence {
}
[GuidAttribute("B80CBABA-DFF9-446E-9EBA-25F983FCF0DF")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.Internal.VisualStudio.Shell.Interop.SVsCommandBarsCustomizerPrivate {
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("0503FE56-5A8A-4685-9661-2A3058471DC8")]
public interface Microsoft.Internal.VisualStudio.Shell.Interop.SVsCommandInfoDisplayServicePrivate {
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("3411987D-3CB3-49D4-82D5-5364D1207B08")]
public interface Microsoft.Internal.VisualStudio.Shell.Interop.SVsCommandSearchPrivate {
}
[GuidAttribute("34327116-5104-4CA6-AFEF-9316B6E1E892")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.Internal.VisualStudio.Shell.Interop.SVsCommonUIAutomationRelayPrivate {
}
[GuidAttribute("DACC14E1-EE78-4D57-8777-190CFE555380")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.Internal.VisualStudio.Shell.Interop.SVsCompressionPrivate {
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("9E3EE7F5-F761-4077-A0DF-E402A8D8C102")]
public interface Microsoft.Internal.VisualStudio.Shell.Interop.SVsCrashHistory {
}
[GuidAttribute("766DBC3E-6DFC-41D7-AF67-B90C54261DE8")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.Internal.VisualStudio.Shell.Interop.SVsDeferredSolutionLoadService {
}
[GuidAttribute("6EFB3601-1E85-4535-BC3F-D2698495DC23")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.Internal.VisualStudio.Shell.Interop.SVsDelayAttributionServicePrivate {
}
[GuidAttribute("BF177C0B-2778-42ED-B449-D07934801BDD")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.Internal.VisualStudio.Shell.Interop.SVsDesignTimeBuildManager {
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("FEEF0AF8-DDBB-4E3F-99C5-682E6582202A")]
public interface Microsoft.Internal.VisualStudio.Shell.Interop.SVsDevDriveProjectPathUtilities {
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("459AFB36-D66F-413C-8CB9-952CDB00006B")]
public interface Microsoft.Internal.VisualStudio.Shell.Interop.SVsDiagnosticNotificationService {
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("E85B2A12-255D-4ACC-A3F5-337B0887F283")]
public interface Microsoft.Internal.VisualStudio.Shell.Interop.SVsDialogService {
}
[GuidAttribute("2DD408C3-5D2C-469B-A40A-349B9ED5355F")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.Internal.VisualStudio.Shell.Interop.SVsDteBackChannel {
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("C85E9F2A-A21A-428B-880D-D365429DBEB5")]
public interface Microsoft.Internal.VisualStudio.Shell.Interop.SVsErrorReporterService {
}
[GuidAttribute("316F4DE6-3CA4-4F0D-B003-962D28F65238")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.Internal.VisualStudio.Shell.Interop.SVsExtensionManager {
}
[GuidAttribute("78A67F33-22CF-426C-8C90-B6E18FD35E0F")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.Internal.VisualStudio.Shell.Interop.SVsFeatureFlags {
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("64FF1883-BCDD-41CD-BFDE-0E3143A07F27")]
public interface Microsoft.Internal.VisualStudio.Shell.Interop.SVsFingerprinting {
}
[GuidAttribute("10A8E96B-02B3-4D1C-BB73-DA2501EDAEB8")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.Internal.VisualStudio.Shell.Interop.SVsGcService {
}
[GuidAttribute("ccd5a138-5ca6-442d-af75-e436f581073b")]
public interface Microsoft.Internal.VisualStudio.Shell.Interop.SVsGuidTable {
}
[GuidAttribute("B5E8E694-6FCD-4F4A-A2A2-A30AD7B1881E")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.Internal.VisualStudio.Shell.Interop.SVsHostExecutionContextService {
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("2ff42d65-52cd-49d2-8cda-0ccdddbc84b1")]
public interface Microsoft.Internal.VisualStudio.Shell.Interop.SVsJumpListHelper {
}
[GuidAttribute("30E9AD51-B276-46E0-B6DB-E60AB5DC2D3D")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.Internal.VisualStudio.Shell.Interop.SVsLegacyProjectSystemHelperPrivate {
}
[GuidAttribute("FAFAFBFB-60F3-47E4-B38C-1BAE05B44240")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.Internal.VisualStudio.Shell.Interop.SVsLightWeightTelemetryService {
}
[GuidAttribute("F4D93990-EDAF-4209-8181-60B9CD1A853F")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.Internal.VisualStudio.Shell.Interop.SVsMainThreadBlockageInfoService {
}
[GuidAttribute("a421344b-f096-40ff-ab88-2b2b56c3a7f3")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.Internal.VisualStudio.Shell.Interop.SVsManagedRunningDocumentTable {
}
[GuidAttribute("b10d2661-c958-4f46-b5b4-01eef3167f0f")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.Internal.VisualStudio.Shell.Interop.SVsManagedShellService {
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("80C8F7DA-7DD1-47E0-9CD3-177D6EA085FF")]
public interface Microsoft.Internal.VisualStudio.Shell.Interop.SVsMenuEventsServiceHelperPrivate {
}
[GuidAttribute("01984F41-A20B-4A07-81D0-5774E4D721B7")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.Internal.VisualStudio.Shell.Interop.SVsOleInPlaceFrame {
}
[GuidAttribute("07EB20D3-56FA-4CE4-A14E-56649DE17028")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.Internal.VisualStudio.Shell.Interop.SVsOOBFeedManager {
}
[GuidAttribute("FAE04330-087D-43FC-ABB0-910F62D75CC0")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.Internal.VisualStudio.Shell.Interop.SVsOpenDocument {
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("97093650-6D9E-44BB-89D4-E5A8C65E68BB")]
public interface Microsoft.Internal.VisualStudio.Shell.Interop.SVsOpenRemoteDocument {
}
[GuidAttribute("420383D1-A300-4F2D-86FD-71B996DB9CA0")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.Internal.VisualStudio.Shell.Interop.SVsOperationProgressStatusPrivate {
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("EEFF465A-E517-41FD-8020-F919869B5C2F")]
public interface Microsoft.Internal.VisualStudio.Shell.Interop.SVsPackageManagerPrivate {
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("B8229ECC-AE56-4DD9-ABDE-0C3CA2CCE1FB")]
public interface Microsoft.Internal.VisualStudio.Shell.Interop.SVsPathTrustVerifier {
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("79729E53-8629-4528-B7A7-75AC803B701A")]
public interface Microsoft.Internal.VisualStudio.Shell.Interop.SVsPerfNotificationService {
}
[GuidAttribute("8ECF2C77-EF92-4013-9492-7D12BE3D5B42")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.Internal.VisualStudio.Shell.Interop.SVsPrerequisiteDetection {
}
[GuidAttribute("4BD1CA55-31F0-4FD5-9A82-6E8F20B039BC")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.Internal.VisualStudio.Shell.Interop.SVsProductKeyDialogLauncher {
}
[GuidAttribute("2EEE6DAD-5986-4F91-A805-523AF01DFC4D")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.Internal.VisualStudio.Shell.Interop.SVsProjectCompatibilityDlg {
}
[GuidAttribute("B02505AA-D904-47DF-B0A2-21D8D3082DC3")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.Internal.VisualStudio.Shell.Interop.SVsProjectLoadProgressTracker {
}
[GuidAttribute("65F41BDE-5061-4261-B9E8-FDD3BE9F1BB6")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.Internal.VisualStudio.Shell.Interop.SVsRegisterCriticalShutdownAction {
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("CA11AB1E-7535-43B6-84F9-F639B7445A63")]
public interface Microsoft.Internal.VisualStudio.Shell.Interop.SVsRemotableCommandInteropService {
}
[ObsoleteAttribute("This API is will be removed in a future Visual Studio version.")]
[InterfaceTypeAttribute("1")]
[GuidAttribute("BF443850-E346-44A8-B03C-11B15ACDEEC1")]
public interface Microsoft.Internal.VisualStudio.Shell.Interop.SVsRemoteControlService {
}
[GuidAttribute("10F1ED19-698D-445A-B67B-46BD62A1D17A")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.Internal.VisualStudio.Shell.Interop.SVsRemoteSettings {
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("BDEAB2D1-923A-4D58-A9B9-4338219AB3FD")]
public interface Microsoft.Internal.VisualStudio.Shell.Interop.SVsRemoteSettingsService {
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("48641AEE-990C-4D0A-8E34-F36CC4D5CB1E")]
public interface Microsoft.Internal.VisualStudio.Shell.Interop.SVsResponseTime {
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("99f68795-4b89-411a-a4c4-f65ceba82e25")]
public interface Microsoft.Internal.VisualStudio.Shell.Interop.SVsResponsivenessMonitor {
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("8EE137B5-F516-450C-8237-CBB7E5E26422")]
public interface Microsoft.Internal.VisualStudio.Shell.Interop.SVsRoamingManagerFirstLaunchSupport {
}
[GuidAttribute("711CEB7D-1A55-410F-8067-0D912B04AE2F")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.Internal.VisualStudio.Shell.Interop.SVsSAPCommonExperienceServiceInternal {
}
[GuidAttribute("320bdfae-1d82-4603-b496-c9742efa0105")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.Internal.VisualStudio.Shell.Interop.SVsSettingsChangeSuppressor {
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("DF2687E7-0563-411B-ACBD-5A6742856AD0")]
public interface Microsoft.Internal.VisualStudio.Shell.Interop.SVsSettingsManagerLoggingContext {
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("7748BB73-AF59-4A6A-8EDB-A94326CD9A36")]
public interface Microsoft.Internal.VisualStudio.Shell.Interop.SVsSharedMSBuildFilesManager {
}
[ComVisibleAttribute("False")]
[GuidAttribute("B4C91A83-6489-11D2-BA74-00C04F79F802")]
public interface Microsoft.Internal.VisualStudio.Shell.Interop.SVsShellMacroHelper {
}
[GuidAttribute("1690B855-3A35-44C3-B00C-B5032BEC65A9")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.Internal.VisualStudio.Shell.Interop.SVsShellOpenDocument {
}
[GuidAttribute("552BC6D4-73D2-4A00-84C7-81157143A24B")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.Internal.VisualStudio.Shell.Interop.SVsSolutionConfigPlatformServicePrivate {
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("C58308E8-AE8D-4B5E-8A03-4BBD8A221F96")]
public interface Microsoft.Internal.VisualStudio.Shell.Interop.SVsSolutionDependencyManager {
}
[GuidAttribute("77CD1564-F598-49F5-8153-7C2B066E6609")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.Internal.VisualStudio.Shell.Interop.SVsSolutionExplorerActiveViewServicePrivate {
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("4A78F6A8-0920-43D1-938E-5330268C82D3")]
public interface Microsoft.Internal.VisualStudio.Shell.Interop.SVsSolutionFiltersPrivate {
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("C0FFEEE2-3BEA-4D54-B631-6E7A4D94D72A")]
public interface Microsoft.Internal.VisualStudio.Shell.Interop.SVsSolutionServicesProxy {
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("C57B7C18-7BBB-4BFF-9002-7198C5F6C369")]
public interface Microsoft.Internal.VisualStudio.Shell.Interop.SVsStartupProjectPropertyPageProvider {
}
[GuidAttribute("332C66E1-3E1E-44E0-9818-913F50161DEF")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.Internal.VisualStudio.Shell.Interop.SVsSynthesizedTemplateProviderManager {
}
[GuidAttribute("C6164D85-E897-41C7-9785-A0450D7221B8")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.Internal.VisualStudio.Shell.Interop.SVsTargetPlatformCatalog {
}
[GuidAttribute("856DC4F1-9111-43CE-B6CE-B6D6C6FF67C8")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.Internal.VisualStudio.Shell.Interop.SVsTelemetryHasherService {
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("FAC3A919-3ECD-4E44-803D-864D72CF617B")]
public interface Microsoft.Internal.VisualStudio.Shell.Interop.SVsTemplateSetupService {
}
[GuidAttribute("145D9097-9979-4013-8622-3C23CDDB8255")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.Internal.VisualStudio.Shell.Interop.SVsTestContractsService {
}
[GuidAttribute("DCCC6A2B-F300-4DA1-92E1-8BF4A5BCA795")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.Internal.VisualStudio.Shell.Interop.SVsTippingService {
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("D57042B3-76CF-4E34-8C52-27E6754C2BC2")]
public interface Microsoft.Internal.VisualStudio.Shell.Interop.SVsToolbarSetProviderPrivate {
}
[GuidAttribute("1fa5eb9b-55de-4655-a9f1-3dc6e2154a14")]
[InterfaceTypeAttribute("1")]
[ExcludeFromProxyBuildAttribute]
public interface Microsoft.Internal.VisualStudio.Shell.Interop.SVsUnifiedSettingsBulkOperations {
}
[GuidAttribute("e3684f31-344e-42ea-9047-b620fdc7ac25")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.Internal.VisualStudio.Shell.Interop.SVsUnifiedSettingsManager {
}
[GuidAttribute("294312dd-bcad-42dc-b221-dfc60b2c1ba8")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.Internal.VisualStudio.Shell.Interop.SVsUnifiedSettingsMetadata {
}
[GuidAttribute("f172d912-d479-4286-b66e-811aa5f1d9b7")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.Internal.VisualStudio.Shell.Interop.SVsUnifiedSettingsRefresh {
}
[GuidAttribute("9ff5974a-aeb4-4c80-8b5b-b10e618435cb")]
[InterfaceTypeAttribute("1")]
[ExcludeFromProxyBuildAttribute]
public interface Microsoft.Internal.VisualStudio.Shell.Interop.SVsUnifiedSettingsResourceLoader {
}
[GuidAttribute("800199cf-5b67-48e0-a16b-88eeb0c2e996")]
[InterfaceTypeAttribute("1")]
[ExcludeFromProxyBuildAttribute]
public interface Microsoft.Internal.VisualStudio.Shell.Interop.SVsUnifiedSettingsUiController {
}
[GuidAttribute("7D63CEC4-E6A3-4FD8-9A55-CD2CB5CD52DA")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.Internal.VisualStudio.Shell.Interop.SVsUnzipService {
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("863E0FD1-1623-4458-B554-2A048444045D")]
public interface Microsoft.Internal.VisualStudio.Shell.Interop.SVsWorkingFoldersManagerPrivate {
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("3ECF6B89-4AFD-4DD0-99FA-622AE126A6EA")]
public interface Microsoft.Internal.VisualStudio.Shell.Interop.SVsWorkspaceLaunchServicePrivate {
}
[GuidAttribute("8BA52287-7AD8-4803-BAEE-AE834B8CE675")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.Internal.VisualStudio.Shell.Interop.SVsWorkspaceManager {
}
[GuidAttribute("0DAA85BC-EB00-4204-9EA0-04D16CF2558C")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.Internal.VisualStudio.Shell.Interop.SVsXamlHotReloadProcessStartNotificationService {
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("C5D68665-A957-49D9-8213-3C25D703466D")]
public interface Microsoft.Internal.VisualStudio.Shell.Interop.SVsXRayPrivate {
}
public enum Microsoft.Internal.VisualStudio.Shell.Interop.tagDOMNodeType : Enum {
    public int value__;
    public static tagDOMNodeType NODE_INVALID;
    public static tagDOMNodeType NODE_ELEMENT;
    public static tagDOMNodeType NODE_ATTRIBUTE;
    public static tagDOMNodeType NODE_TEXT;
    public static tagDOMNodeType NODE_CDATA_SECTION;
    public static tagDOMNodeType NODE_ENTITY_REFERENCE;
    public static tagDOMNodeType NODE_ENTITY;
    public static tagDOMNodeType NODE_PROCESSING_INSTRUCTION;
    public static tagDOMNodeType NODE_COMMENT;
    public static tagDOMNodeType NODE_DOCUMENT;
    public static tagDOMNodeType NODE_DOCUMENT_TYPE;
    public static tagDOMNodeType NODE_DOCUMENT_FRAGMENT;
    public static tagDOMNodeType NODE_NOTATION;
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class Microsoft.Internal.VisualStudio.Shell.Interop.ToolsOptionsHierarchyNode : ValueType {
    public string CanonicalName;
    public string Title;
    public string AdditionalSearchText;
    public string VisibilityUiContexts;
    public Guid PageId;
    public int Depth;
    public bool IsInUnifiedSettings;
    public string UnifiedSettingsCategory;
    public int Order;
}
[ExcludeFromIDLAttribute]
[UnmanagedFunctionPointerAttribute("3")]
public class Microsoft.Internal.VisualStudio.Shell.Interop.UnderLockCallback : MulticastDelegate {
    public UnderLockCallback(object object, IntPtr method);
    [NullableContextAttribute("1")]
public virtual void Invoke(ContextStateInfo[] uiContextStates);
    public virtual IAsyncResult BeginInvoke(ContextStateInfo[] uiContextStates, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
[FlagsAttribute]
public enum Microsoft.Internal.VisualStudio.Shell.Interop.UnifiedSettingReadOptions : Enum {
    public int value__;
    public static UnifiedSettingReadOptions NoRequirements;
    public static UnifiedSettingReadOptions RequireRegistration;
    public static UnifiedSettingReadOptions RequireValidation;
    public static UnifiedSettingReadOptions NoFallbackToDefault;
    public static UnifiedSettingReadOptions ApplyMigration;
}
public enum Microsoft.Internal.VisualStudio.Shell.Interop.UnifiedSettingsChangeOutcome : Enum {
    public int value__;
    public static UnifiedSettingsChangeOutcome PendingCommit;
    public static UnifiedSettingsChangeOutcome PendingCommitWithoutValidation;
    public static UnifiedSettingsChangeOutcome Denied;
    public static UnifiedSettingsChangeOutcome InvalidValue;
    public static UnifiedSettingsChangeOutcome NoMigration;
    public static UnifiedSettingsChangeOutcome MigrationFailed;
    public static UnifiedSettingsChangeOutcome InternalError;
}
public enum Microsoft.Internal.VisualStudio.Shell.Interop.UnifiedSettingsCommitOutcome : Enum {
    public int value__;
    public static UnifiedSettingsCommitOutcome NoChangesQueued;
    public static UnifiedSettingsCommitOutcome Success;
    public static UnifiedSettingsCommitOutcome PendingApproval;
    public static UnifiedSettingsCommitOutcome InternalError;
}
public enum Microsoft.Internal.VisualStudio.Shell.Interop.UnifiedSettingsRetrievalErrorKind : Enum {
    public int value__;
    public static UnifiedSettingsRetrievalErrorKind FailedValidation;
    public static UnifiedSettingsRetrievalErrorKind NotRegistered;
    public static UnifiedSettingsRetrievalErrorKind NotPersisted;
    public static UnifiedSettingsRetrievalErrorKind InvalidType;
    public static UnifiedSettingsRetrievalErrorKind NoMigration;
    public static UnifiedSettingsRetrievalErrorKind MigrationFailed;
    public static UnifiedSettingsRetrievalErrorKind InternalError;
}
public enum Microsoft.Internal.VisualStudio.Shell.Interop.UnifiedSettingsValueType : Enum {
    public int value__;
    public static UnifiedSettingsValueType Int32;
    public static UnifiedSettingsValueType Double;
    public static UnifiedSettingsValueType String;
    public static UnifiedSettingsValueType Boolean;
    public static UnifiedSettingsValueType UInt32;
    public static UnifiedSettingsValueType Auto;
}
[FlagsAttribute]
public enum Microsoft.Internal.VisualStudio.Shell.Interop.UnifiedSettingWriteOptions : Enum {
    public int value__;
    public static UnifiedSettingWriteOptions None;
    public static UnifiedSettingWriteOptions ApplyMigration;
}
public enum Microsoft.Internal.VisualStudio.Shell.Interop.VsFpDataID : Enum {
    public int value__;
    public static VsFpDataID FpDataUndefined;
    public static VsFpDataID FpDataSolutionFilePath;
    public static VsFpDataID FpDataSolutionFileSize;
    public static VsFpDataID FpDataSolutionFileReadProject;
    public static VsFpDataID FpDataSolutionClosed;
    public static VsFpDataID FpDataProjectFileReadItem;
    public static VsFpDataID FpDataProjectHierarchyItem;
    public static VsFpDataID FpDataProjectClosed;
    public static VsFpDataID FpDataPerfOverhead;
}
public class Microsoft.Internal.VisualStudio.Shell.Interop.VsFpDataItem : ValueType {
    [ComAliasNameAttribute("OLE.ULONGLONG")]
public ulong Ptr;
    [ComAliasNameAttribute("OLE.ULONG")]
public UInt32 Size;
}
public enum Microsoft.Internal.VisualStudio.Shell.Interop.VsInstallBundleState : Enum {
    public int value__;
    public static VsInstallBundleState INSTALL_BUNDLE_UNKNOWN;
    public static VsInstallBundleState INSTALL_BUNDLE_NOT_INSTALLED;
    public static VsInstallBundleState INSTALL_BUNDLE_INSTALLED;
    public static VsInstallBundleState INSTALL_BUNDLE_NOT_APLICABLE;
}
public static class Microsoft.Internal.VisualStudio.Shell.Interop.VSM : object {
    public static int VSM_SearchTerm;
}
public class Microsoft.Internal.VisualStudio.Shell.Interop.VsNewProjectData : ValueType {
    [ComAliasNameAttribute("LPCOLESTR")]
public string pszProjectName;
    [ComAliasNameAttribute("LPCOLESTR")]
public string pszSolutionName;
    [ComAliasNameAttribute("LPCOLESTR")]
public string pszTemplateId;
    [ComAliasNameAttribute("LPCOLESTR")]
public string pszFrameworkVersion;
    [ComAliasNameAttribute("LPCOLESTR")]
public string pszFrameworkProfile;
    [ComAliasNameAttribute("LPCOLESTR")]
public string pszLocation;
    [ComAliasNameAttribute("LPCOLESTR")]
public string pszProjectPath;
    public short bAddToSourceControl;
    public short bCreateSolutionDirectory;
    public short bIsNewWebSiteProject;
}
public enum Microsoft.Internal.VisualStudio.Shell.Interop.VSNEWPROJECTDLGCTX : Enum {
    public int value__;
    public static VSNEWPROJECTDLGCTX NPDCTX_NEWPROJ;
    public static VSNEWPROJECTDLGCTX NPDCTX_ADDNEWPROJ;
    public static VSNEWPROJECTDLGCTX NPDCTX_NEWWEBSITE;
    public static VSNEWPROJECTDLGCTX NPDCTX_ADDNEWWEBSITE;
    public static VSNEWPROJECTDLGCTX NPDCTX_ADDNEWITEM;
    public static VSNEWPROJECTDLGCTX NPDCTX_ADDNEWWEBITEM;
}
public class Microsoft.Internal.VisualStudio.Shell.Interop.VSNEWPROJECTDLGINFO : ValueType {
    [ComAliasNameAttribute("VSNEWPROJECTDLGCTX")]
public VSNEWPROJECTDLGCTX context;
    [ComAliasNameAttribute("LPCOLESTR")]
public string pwzExpand;
    [ComAliasNameAttribute("LPCOLESTR")]
public string pwzSelect;
    [ComAliasNameAttribute("LPCOLESTR")]
public string pszDlgTitle;
    [ComAliasNameAttribute("LPCOLESTR")]
public string pszTemplateDir;
    [ComAliasNameAttribute("LPCOLESTR")]
public string pszHelpTopic;
    [ComAliasNameAttribute("VSCREATENEWPROJVIADLGEXFLAGS")]
public UInt32 cnpvdeFlags;
    public IVsBrowseProjectLocation pBrowse;
    [ComAliasNameAttribute("BOOL")]
public int fCreateNewSolution;
    [ComAliasNameAttribute("VSITEMID")]
public UInt32 itemidLoc;
    public Guid guidProject;
    public IVsProject pProject;
    [ComAliasNameAttribute("DWORD")]
public UInt32 dwFlags;
    [ComAliasNameAttribute("LPCOLESTR")]
public string pwzTreeViewTitle;
    [ComAliasNameAttribute("LPCOLESTR")]
public string pbstrLocation;
    [ComAliasNameAttribute("BOOL")]
public int bDontShowAgain;
    [ComAliasNameAttribute("VSADDNEWWEBITEMOPTIONS")]
public UInt32 newWebItemOptions;
}
public class Microsoft.Internal.VisualStudio.Shell.Interop.VsProjectBSTRElement : ValueType {
    public string bstrValue;
}
public class Microsoft.Internal.VisualStudio.Shell.Interop.VsProjectBuildOrder : ValueType {
    public Guid ProjectId;
    [ComAliasNameAttribute("OLE.DWORD")]
public UInt32 BuildOrder;
}
public class Microsoft.Internal.VisualStudio.Shell.Interop.VsProjectCompatDlgProjectDetail : ValueType {
    [ComAliasNameAttribute("LPCOLESTR")]
public string pszProjectName;
    [ComAliasNameAttribute("LPCOLESTR")]
public string pszProjectFullPath;
    [ComAliasNameAttribute("PROJECTCOMPATIBILITYSTATUSKIND")]
public PROJECTCOMPATIBILITYSTATUSKIND statusKind;
    public short bStatus;
}
public class Microsoft.Internal.VisualStudio.Shell.Interop.VsProjectConnectedServce : ValueType {
    public object pMsBuildItem;
    public string bstrFinalItemSpec;
}
public class Microsoft.Internal.VisualStudio.Shell.Interop.VsProjectEndPrefetch : ValueType {
    public Guid guidProjectId;
    public object pHierarchy;
    public string bstrOutputPath;
}
public class Microsoft.Internal.VisualStudio.Shell.Interop.VsProjectFileItem : ValueType {
    public object pMsBuildItem;
    public string bstrFinalItemSpec;
    public string bstrItemType;
    public string bstrSubType;
    public string bstrGenerator;
    public string bstrCustomToolNS;
    public string bstrLastGenOutput;
    public string bstrLink;
    public string bstrDependencyParent;
    public string bstrContainingProjectFilePath;
    public int isDesignTime;
    public int isDesignTimeShared;
    public int isAutoGen;
    public UInt32 dwCopyToBinDir;
}
[ComConversionLossAttribute]
public class Microsoft.Internal.VisualStudio.Shell.Interop.VsProjectFileSection : ValueType {
    public short fHasPublishFileItem;
    public int cSharedProjects;
    [ComConversionLossAttribute]
[ComAliasNameAttribute("Microsoft.Internal.VisualStudio.Shell.Interop.VsProjectBSTRElement")]
public IntPtr rgSharedProjects;
    public int cAvailableItemTypes;
    [ComAliasNameAttribute("Microsoft.Internal.VisualStudio.Shell.Interop.VsProjectBSTRElement")]
[ComConversionLossAttribute]
public IntPtr rgAvailableItemTypes;
    public int cFileItems;
    [ComConversionLossAttribute]
[ComAliasNameAttribute("Microsoft.Internal.VisualStudio.Shell.Interop.VsProjectFileItem")]
public IntPtr rgFileItems;
    public int cFolders;
    [ComConversionLossAttribute]
[ComAliasNameAttribute("Microsoft.Internal.VisualStudio.Shell.Interop.VsProjectItemFolder")]
public IntPtr rgFolders;
    public int cWebReferencesFolder;
    [ComAliasNameAttribute("Microsoft.Internal.VisualStudio.Shell.Interop.VsProjectWebReferencesFolder")]
[ComConversionLossAttribute]
public IntPtr rgWebReferencesFolder;
    public int cWebReferences;
    [ComAliasNameAttribute("Microsoft.Internal.VisualStudio.Shell.Interop.VsProjectWebReference")]
[ComConversionLossAttribute]
public IntPtr rgWebReferences;
    public int cServiceReferencesFolder;
    [ComConversionLossAttribute]
[ComAliasNameAttribute("Microsoft.Internal.VisualStudio.Shell.Interop.VsProjectServiceReferencesFolder")]
public IntPtr rgServiceReferencesFolder;
    public int cServiceReferences;
    [ComConversionLossAttribute]
[ComAliasNameAttribute("Microsoft.Internal.VisualStudio.Shell.Interop.VsProjectServiceReference")]
public IntPtr rgServiceReferences;
    public int cConnectedServices;
    [ComConversionLossAttribute]
[ComAliasNameAttribute("Microsoft.Internal.VisualStudio.Shell.Interop.VsProjectConnectedServce")]
public IntPtr rgConnectedService;
}
public class Microsoft.Internal.VisualStudio.Shell.Interop.VsProjectInfo1 : ValueType {
    public Guid guidProjectId;
    public string bstrActiveProjectConfiguration;
    public string bstrProjectFile;
}
public class Microsoft.Internal.VisualStudio.Shell.Interop.VsProjectInfo2 : ValueType {
    public Guid guidProjectId;
    public string bstrFlavors;
    public object pProjectFileShim;
    public UInt32 dwProjectFileFormat;
    public object pUserFileShim;
    public UInt32 dwUserFileFormat;
}
public class Microsoft.Internal.VisualStudio.Shell.Interop.VsProjectInfo3 : ValueType {
    public Guid guidProjectId;
    public object pHierarchy;
    public string bstrOutputPath;
}
public class Microsoft.Internal.VisualStudio.Shell.Interop.VsProjectInit : ValueType {
    public Guid guidProjectId;
    public string bstrActiveProjectConfiguration;
    public string bstrProjectFile;
}
public class Microsoft.Internal.VisualStudio.Shell.Interop.VsProjectItemFolder : ValueType {
    public object pMsBuildItem;
    public string bstrFinalItemSpec;
}
public class Microsoft.Internal.VisualStudio.Shell.Interop.VsProjectLoadWarning : ValueType {
    public string bstrMessage;
    public string bstrHelpKeyword;
}
public class Microsoft.Internal.VisualStudio.Shell.Interop.VsProjectLoadWarning157 : ValueType {
    public string bstrMessage;
    public string bstrHelpKeyword;
}
public class Microsoft.Internal.VisualStudio.Shell.Interop.VsProjectOpen : ValueType {
    public Guid guidProjectId;
    public string bstrFlavors;
    public object pProjectFileShim;
    public UInt32 dwProjectFileFormat;
    public object pUserFileShim;
    public UInt32 dwUserFileFormat;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.Internal.VisualStudio.Shell.Interop.VsProjectOpen2 : ValueType {
    public Guid guidProjectId;
    public string bstrFlavors;
    public object pProjectFileShim;
    public UInt32 dwProjectFileFormat;
    public object pUserFileShim;
    public UInt32 dwUserFileFormat;
    public bool bUseCSProjIntegratedConsole;
}
public class Microsoft.Internal.VisualStudio.Shell.Interop.VsProjectServiceReference : ValueType {
    public object pMsBuildItem;
    public string bstrFinalItemSpec;
    public string bstrStorageType;
}
public class Microsoft.Internal.VisualStudio.Shell.Interop.VsProjectServiceReferencesFolder : ValueType {
    public object pMsBuildItem;
    public string bstrFinalItemSpec;
}
public class Microsoft.Internal.VisualStudio.Shell.Interop.VsProjectWebReference : ValueType {
    public object pMsBuildItem;
    public string bstrFinalItemSpec;
    public string bstrRelPath;
    public string bstrUrlBehavior;
    public string bstrUpdateFromUrl;
    public string bstrServiceLocationUrl;
    public string bstrCachedDynamicPropName;
    public string bstrCachedAppSettingsObjectName;
    public string bstrCachedSettingsPropName;
}
public class Microsoft.Internal.VisualStudio.Shell.Interop.VsProjectWebReferencesFolder : ValueType {
    public object pMsBuildItem;
    public string bstrFinalItemSpec;
}
public enum Microsoft.Internal.VisualStudio.Shell.Interop.VSSPROPIDPrivate : Enum {
    public int value__;
    public static VSSPROPIDPrivate VSSPROPID_EnableSingleClickPreviewInSolutionExplorer;
    public static VSSPROPIDPrivate VSSPROPID_EnableSingleClickPreviewInFindResults;
}
public enum Microsoft.Internal.VisualStudio.Shell.Interop.VSSPROPIDPrivate2 : Enum {
    public int value__;
    public static VSSPROPIDPrivate2 VSSPROPID_EnableSingleClickPreviewInNavigateTo;
}
public enum Microsoft.Internal.VisualStudio.Shell.Interop.VSSPROPIDPrivate3 : Enum {
    public int value__;
    public static VSSPROPIDPrivate3 VSSPROPID_SyncFARandEditorBackground;
}
public enum Microsoft.Internal.VisualStudio.Shell.Interop.VSSPROPIDPrivate4 : Enum {
    public int value__;
    public static VSSPROPIDPrivate4 VSSPROPID_StartupOption;
    public static VSSPROPIDPrivate4 VSSPROPID_AppName;
    public static VSSPROPIDPrivate4 VSSPROPID_ShortAppName;
    public static VSSPROPIDPrivate4 VSSPROPID_IsClientMode;
    public static VSSPROPIDPrivate4 VSSPROPID_ServerHwnd;
    public static VSSPROPIDPrivate4 VSSPROPID_RecentlyInstalledTemplatesListPath;
    public static VSSPROPIDPrivate4 VSSPROPID_InStartWindowOnLaunch;
    public static VSSPROPIDPrivate4 VSSPROPID_AutomaticallyPopulateFindInFilesDialog;
    public static VSSPROPIDPrivate4 VSSPROPID_AutomaticallyLimitFindToSelection;
    public static VSSPROPIDPrivate4 VSSPROPID_DisplayInformationalMessages;
    public static VSSPROPIDPrivate4 VSSPROPID_DisplayWarningMessages;
    public static VSSPROPIDPrivate4 VSSPROPID_KeepFindResultsByDefault;
}
public enum Microsoft.Internal.VisualStudio.Shell.Interop.VSSPROPIDPrivate5 : Enum {
    public int value__;
    public static VSSPROPIDPrivate5 VSSPROPID_EnableSingleClickPreviewInSolutionExplorer_Unshadowed;
    public static VSSPROPIDPrivate5 VSSPROPID_EnableSingleClickPreviewInFindResults_Unshadowed;
    public static VSSPROPIDPrivate5 VSSPROPID_EnableSingleClickPreviewInNavigateTo_Unshadowed;
}
public class Microsoft.Internal.VisualStudio.Shell.Interop.VsXRayEventsData : ValueType {
    public int ModuleNameIndex;
    [ComAliasNameAttribute("BOOL")]
public int IsHidden;
    public int VsixIdIndex;
    public int EventId;
    public ulong StartTime;
    public ulong EndTime;
}
public enum Microsoft.Internal.VisualStudio.Shell.Interop.VsXRayState : Enum {
    public int value__;
    public static VsXRayState VsXRayState_Default;
    public static VsXRayState VsXRayState_Measuring;
    public static VsXRayState VsXRayState_Analyzing;
    public static VsXRayState VsXRayState_Done;
}
public enum Microsoft.VisualStudio.Feedback.Interop._VSSendFeedbackType : Enum {
    public int value__;
    public static _VSSendFeedbackType SFBT_Neutral;
    public static _VSSendFeedbackType SFBT_Negative;
    public static _VSSendFeedbackType SFBT_Positive;
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("26E7ECA7-4DB3-49AD-B478-33FCF05F3995")]
public interface Microsoft.VisualStudio.Feedback.Interop.IVsFeedbackProfile {
    public bool IsMicrosoftInternal { get; }
    public abstract virtual bool get_IsMicrosoftInternal();
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("A81D2937-EC19-4C7C-AAA4-BE43DF32AAB7")]
public interface Microsoft.VisualStudio.Feedback.Interop.IVsSendUserFeedback {
    public bool CanShowFeedbackDialog { get; }
    public abstract virtual bool get_CanShowFeedbackDialog();
    public abstract virtual void ShowFeedbackDialog(IVsSendUserFeedbackOptions options);
}
[GuidAttribute("2AA9F576-78F1-44D3-8A01-D5D89E3A9F78")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.Feedback.Interop.IVsSendUserFeedbackOptions {
    [ComAliasNameAttribute("Microsoft.VisualStudio.Feedback.Interop.VSSendFeedbackType")]
public UInt32 FeedbackType { get; }
    public string PrivacyStatementUrl { get; }
    public string SendButtonLabel { get; }
    public string DialogTitle { get; }
    public string FeatureName { get; }
    public abstract virtual UInt32 get_FeedbackType();
    public abstract virtual string get_PrivacyStatementUrl();
    public abstract virtual string get_SendButtonLabel();
    public abstract virtual string get_DialogTitle();
    public abstract virtual string get_FeatureName();
    public abstract virtual void GetAdditionalTags(String[]& prgTagTypes, String[]& prgTagValues);
}
[GuidAttribute("0BB1FA06-C83E-4EAA-99AF-0B67B2D8F90B")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.Feedback.Interop.SVsFeedbackProfile {
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("A024CF30-99C0-427B-ADEE-E2AD5F8AA1C3")]
public interface Microsoft.VisualStudio.Feedback.Interop.SVsSendUserFeedback {
}
[AttributeUsageAttribute("1024")]
public class Microsoft.VisualStudio.Interop.BaseTypeForIDLAttribute : Attribute {
    [CompilerGeneratedAttribute]
private Type <BaseType>k__BackingField;
    public Type BaseType { get; }
    public BaseTypeForIDLAttribute(Type baseType);
    [CompilerGeneratedAttribute]
public Type get_BaseType();
}
[AttributeUsageAttribute("5404")]
internal class Microsoft.VisualStudio.Interop.ExcludeFromIDLAttribute : Attribute {
}
[AttributeUsageAttribute("5148")]
internal class Microsoft.VisualStudio.Interop.ExcludeFromProxyBuildAttribute : Attribute {
}
[FlagsAttribute]
public enum Microsoft.VisualStudio.LicenseManagement.Interop.__VSClientRightsTokenStatusFlags : Enum {
    public int value__;
    public static __VSClientRightsTokenStatusFlags CRTSTATUS_UNKNOWN;
    public static __VSClientRightsTokenStatusFlags CRTSTATUS_ValidCrtokenAcquired;
    public static __VSClientRightsTokenStatusFlags CRTSTATUS_WaitingForDownloadToComplete;
    public static __VSClientRightsTokenStatusFlags CRTSTATUS_CachingCrtokenFailed;
    public static __VSClientRightsTokenStatusFlags CRTSTATUS_CachedCrtokenMissing;
    public static __VSClientRightsTokenStatusFlags CRTSTATUS_ReadingCachedCrtokenFailed;
    public static __VSClientRightsTokenStatusFlags CRTSTATUS_ParsingCrContainerFailed;
    public static __VSClientRightsTokenStatusFlags CRTSTATUS_CertificateValidationFailed;
    public static __VSClientRightsTokenStatusFlags CRTSTATUS_ParsingCrtokenFailed;
    public static __VSClientRightsTokenStatusFlags CRTSTATUS_PCF_CrtokenNullOrEmpty;
    public static __VSClientRightsTokenStatusFlags CRTSTATUS_PCF_DeserializeCrContainerFailed;
    public static __VSClientRightsTokenStatusFlags CRTSTATUS_PCF_IncompatibleCrEnvelopeVersion;
    public static __VSClientRightsTokenStatusFlags CRTSTATUS_PCF_CrtokenContainedNoRights;
    public static __VSClientRightsTokenStatusFlags CRTSTATUS_PCF_CrtokenNoUserMachineId;
    public static __VSClientRightsTokenStatusFlags CRTSTATUS_PCF_CrtokenBadUserMachineId;
    public static __VSClientRightsTokenStatusFlags CRTSTATUS_PCF_CrtokenUnexpectedUserMachineId;
    public static __VSClientRightsTokenStatusFlags CRTSTATUS_ClientClockOutOfSyncWithServer;
    public static __VSClientRightsTokenStatusFlags CRTSTATUS_CrtokenAcquiredFlagsMask;
    public static __VSClientRightsTokenStatusFlags CRTSTATUS_ErrorFlagsMask;
    public static __VSClientRightsTokenStatusFlags CRTSTATUS_PCF_DetailsMask;
    public static __VSClientRightsTokenStatusFlags CRTSTATUS_OtherInfoFlagsMask;
    public static __VSClientRightsTokenStatusFlags CRTSTATUS_AllFlagsMask;
}
public enum Microsoft.VisualStudio.LicenseManagement.Interop.__VSOnlineOperationLogEntryType : Enum {
    public int value__;
    public static __VSOnlineOperationLogEntryType OOLOGENTRYTYPE_Error;
    public static __VSOnlineOperationLogEntryType OOLOGENTRYTYPE_Warning;
    public static __VSOnlineOperationLogEntryType OOLOGENTRYTYPE_Information;
}
public enum Microsoft.VisualStudio.LicenseManagement.Interop.__VSOnlineOperationResult : Enum {
    public int value__;
    public static __VSOnlineOperationResult OORESULT_UnAssigned;
    public static __VSOnlineOperationResult OORESULT_Success;
    public static __VSOnlineOperationResult OORESULT_Cancel;
    public static __VSOnlineOperationResult OORESULT_Fail;
    public static __VSOnlineOperationResult OORESULT_Exception;
    public static __VSOnlineOperationResult OORESULT_UserFault;
}
public enum Microsoft.VisualStudio.LicenseManagement.Interop.__VSOnlineOperationResultCodes : Enum {
    public int value__;
    public static __VSOnlineOperationResultCodes OORESCODE_UnAssigned;
    public static __VSOnlineOperationResultCodes OORESCODE_HttpResponseBase;
    public static __VSOnlineOperationResultCodes OORESCODE_HttpResponseEnd;
    public static __VSOnlineOperationResultCodes OORESCODE_WexStatusBase;
    public static __VSOnlineOperationResultCodes OORESCODE_WexStatusEnd;
    public static __VSOnlineOperationResultCodes OORESCODE_Silent;
    public static __VSOnlineOperationResultCodes OORESCODE_Noisy;
    public static __VSOnlineOperationResultCodes OORESCODE_Polling;
    public static __VSOnlineOperationResultCodes OORESCODE_ReAuthenticateProfileChanged;
    public static __VSOnlineOperationResultCodes OORESCODE_PollingChanges;
    public static __VSOnlineOperationResultCodes OORESCODE_PollingNoChanges;
    public static __VSOnlineOperationResultCodes OORESCODE_PushingChanges;
    public static __VSOnlineOperationResultCodes OORESCODE_PushingNoChanges;
    public static __VSOnlineOperationResultCodes OORESCODE_CachedCrtokenMissing;
    public static __VSOnlineOperationResultCodes OORESCODE_ReadingCachedCrtokenFailed;
    public static __VSOnlineOperationResultCodes OORESCODE_ParsingCrContainerFailed;
    public static __VSOnlineOperationResultCodes OORESCODE_CertificateInvalidOrCorrupt;
    public static __VSOnlineOperationResultCodes OORESCODE_ParsingCrtokenFailed;
    public static __VSOnlineOperationResultCodes OORESCODE_CachingCrtokenFailed;
    public static __VSOnlineOperationResultCodes OORESCODE_CrCanaryDataMissing;
    public static __VSOnlineOperationResultCodes OORESCODE_CrCanaryDataCorrupt;
    public static __VSOnlineOperationResultCodes OORESCODE_SignInAsyncFailed;
    public static __VSOnlineOperationResultCodes OORESCODE_WaitForLicenseFailed;
    public static __VSOnlineOperationResultCodes OORESCODE_ClientClockOutOfSyncWithServer;
}
public enum Microsoft.VisualStudio.LicenseManagement.Interop.__VSOnlineOperationType : Enum {
    public int value__;
    public static __VSOnlineOperationType OOTYPE_UnAssigned;
    public static __VSOnlineOperationType OOTYPE_ExplicitSignIn;
    public static __VSOnlineOperationType OOTYPE_ImplicitSignIn;
    public static __VSOnlineOperationType OOTYPE_LicenseTransition;
    public static __VSOnlineOperationType OOTYPE_LicenseAtStartup;
    public static __VSOnlineOperationType OOTYPE_SignOut;
    public static __VSOnlineOperationType OOTYPE_Reauthenticate;
    public static __VSOnlineOperationType OOTYPE_SignInConnect;
    public static __VSOnlineOperationType OOTYPE_SignInGetProfile;
    public static __VSOnlineOperationType OOTYPE_GetAttributes;
    public static __VSOnlineOperationType OOTYPE_SetAttributes;
    public static __VSOnlineOperationType OOTYPE_GetClientRights;
    public static __VSOnlineOperationType OOTYPE_GetServiceSetting;
    public static __VSOnlineOperationType OOTYPE_GetProfileUri;
    public static __VSOnlineOperationType OOTYPE_CreateVssTokenStorageHelper;
    public static __VSOnlineOperationType OOTYPE_SubscribeToNotifications;
    public static __VSOnlineOperationType OOTYPE_ReceivedNotification;
    public static __VSOnlineOperationType OOTYPE_CacheCrtoken_IdeUser;
    public static __VSOnlineOperationType OOTYPE_CacheCrtoken_AltLicUser;
    public static __VSOnlineOperationType OOTYPE_ReadCachedCrtoken_IdeUser;
    public static __VSOnlineOperationType OOTYPE_ReadCachedCrtoken_AltLicUser;
    public static __VSOnlineOperationType OOTYPE_GenerateUserCrCanaryData;
    public static __VSOnlineOperationType OOTYPE_ReadUserCrCanaryData;
}
public enum Microsoft.VisualStudio.LicenseManagement.Interop.__VSSignInOptions : Enum {
    public int value__;
    public static __VSSignInOptions VSSIO_None;
    public static __VSSignInOptions VSSIO_WaitForLicense;
    public static __VSSignInOptions VSSIO_WaitForProfile;
    public static __VSSignInOptions VSSIO_FirstLaunch;
    public static __VSSignInOptions VSSIO_Reauthenticate;
}
public enum Microsoft.VisualStudio.LicenseManagement.Interop._VSLicenseSource2 : Enum {
    public int value__;
    public static _VSLicenseSource2 VSLicenseSource_VSOAutoSelectedUser;
}
public enum Microsoft.VisualStudio.LicenseManagement.Interop._VSLicenseType : Enum {
    public int value__;
    public static _VSLicenseType VSLICTYPE_UNKNOWN;
    public static _VSLicenseType VSLICTYPE_UnlimitedPID;
    public static _VSLicenseType VSLICTYPE_TrialPID;
    public static _VSLicenseType VSLICTYPE_PrereleasePID;
    public static _VSLicenseType VSLICTYPE_PrereleaseTrialPID;
    public static _VSLicenseType VSLICTYPE_OnlineLicensingBased;
    public static _VSLicenseType VSLICTYPE_VSOSubscription;
    public static _VSLicenseType VSLICTYPE_MSDN;
    public static _VSLicenseType VSLICTYPE_MSDNMPN;
    public static _VSLicenseType VSLICTYPE_VSExtensionTrial;
    public static _VSLicenseType VSLICTYPE_VSPrerelease;
    public static _VSLicenseType VSLICTYPE_VSExpress;
}
public enum Microsoft.VisualStudio.LicenseManagement.Interop._VSLicenseType2 : Enum {
    public int value__;
    public static _VSLicenseType2 VSLICTYPE_VSCommunity;
}
public enum Microsoft.VisualStudio.LicenseManagement.Interop._VSPIDFamily : Enum {
    public int value__;
    public static _VSPIDFamily VSPID_GROUP_INVALID;
    public static _VSPIDFamily VSPID_GROUP_FREE;
    public static _VSPIDFamily VSPID_GROUP_ISO;
    public static _VSPIDFamily VSPID_GROUP_VS;
    public static _VSPIDFamily VSPID_GROUP_VSWIN;
    public static _VSPIDFamily VSPID_GROUP_VWD;
    public static _VSPIDFamily VSPID_GROUP_VPD;
    public static _VSPIDFamily VSPID_GROUP_TFS;
    public static _VSPIDFamily VSPID_GROUP_TLA;
    public static _VSPIDFamily VSPID_GROUP_TLAC;
    public static _VSPIDFamily VSPID_GROUP_TESTPRO;
    public static _VSPIDFamily VSPID_GROUP_LABAGENT;
    public static _VSPIDFamily VSPID_GROUP_V1;
    public static _VSPIDFamily VSPID_GROUP_WD;
    public static _VSPIDFamily VSPID_GROUP_V2;
    public static _VSPIDFamily VSPID_GROUP_RMS;
    public static _VSPIDFamily VSPID_GROUP_V3;
    public static _VSPIDFamily VSPID_GROUP_V4;
    public static _VSPIDFamily VSPID_GROUP_V5;
    public static _VSPIDFamily VSPID_GROUP_INTERNAL;
    public static _VSPIDFamily VSPID_GROUP_VSUPDATE_1;
    public static _VSPIDFamily VSPID_GROUP_VSUPDATE_2;
    public static _VSPIDFamily VSPID_GROUP_VSUPDATE_3;
    public static _VSPIDFamily VSPID_GROUP_VSUPDATE_4;
    public static _VSPIDFamily VSPID_GROUP_VSUPDATE_5;
    public static _VSPIDFamily VSPID_GROUP_VSUPDATE_6;
    public static _VSPIDFamily VSPID_GROUP_VSUPDATE_7;
    public static _VSPIDFamily VSPID_GROUP_VSUPDATE_8;
    public static _VSPIDFamily VSPID_GROUP_VSUPDATE_9;
    public static _VSPIDFamily VSPID_GROUP_VSUPDATE_10;
    public static _VSPIDFamily VSPID_GROUP_VSUPDATE_11;
    public static _VSPIDFamily VSPID_GROUP_VSUPDATE_12;
    public static _VSPIDFamily VSPID_GROUP_VSUPDATE_13;
    public static _VSPIDFamily VSPID_GROUP_VSUPDATE_14;
    public static _VSPIDFamily VSPID_GROUP_VSUPDATE_15;
    public static _VSPIDFamily VSPID_GROUP_VSUPDATE_16;
    public static _VSPIDFamily VSPID_GROUP_VSUPDATE_17;
    public static _VSPIDFamily VSPID_GROUP_VSUPDATE_18;
    public static _VSPIDFamily VSPID_GROUP_VSUPDATE_19;
    public static _VSPIDFamily VSPID_GROUP_VSUPDATE_20;
    public static _VSPIDFamily VSPID_GROUP_MAX;
}
public enum Microsoft.VisualStudio.LicenseManagement.Interop._VSPIDRange : Enum {
    public int value__;
    public static _VSPIDRange VSPID_RANGE_UNKNOWN;
    public static _VSPIDRange VSPID_RANGE_CTP;
    public static _VSPIDRange VSPID_RANGE_BETA1;
    public static _VSPIDRange VSPID_RANGE_BETA2;
    public static _VSPIDRange VSPID_RANGE_RC;
    public static _VSPIDRange VSPID_RANGE_TRIAL;
    public static _VSPIDRange VSPID_RANGE_UNLIMITED;
    public static _VSPIDRange VSPID_RANGE_ACADEMIC;
    public static _VSPIDRange VSPID_RANGE_WORKGROUP;
    public static _VSPIDRange VSPID_RANGE_STATIC;
    public static _VSPIDRange VSPID_RANGE_OEM;
    public static _VSPIDRange VSPID_RANGE_RETAIL;
    public static _VSPIDRange VSPID_RANGE_VL;
    public static _VSPIDRange VSPID_RANGE_MSDN;
    public static _VSPIDRange VSPID_RANGE_MAX;
}
public enum Microsoft.VisualStudio.LicenseManagement.Interop._VSSignInWizardID : Enum {
    public int value__;
    public static _VSSignInWizardID WIZID_FirstLaunch;
    public static _VSSignInWizardID WIZID_ConnectedFirstLaunch;
    public static _VSSignInWizardID WIZID_SignIn;
    public static _VSSignInWizardID WIZID_AlternateUserSignIn;
    public static _VSSignInWizardID WIZID_CheckForUpdatedLicense;
}
public enum Microsoft.VisualStudio.LicenseManagement.Interop._VSSKUEdition : Enum {
    public int value__;
    public static _VSSKUEdition VSEDITION_UNKNOWN;
    public static _VSSKUEdition VSEDITION_IntShell;
    public static _VSSKUEdition VSEDITION_Professional;
    public static _VSSKUEdition VSEDITION_Premium;
    public static _VSSKUEdition VSEDITION_Ultimate;
}
public enum Microsoft.VisualStudio.LicenseManagement.Interop._VSSKUEdition2 : Enum {
    public int value__;
    public static _VSSKUEdition2 VSEDITION2_UNKNOWN;
    public static _VSSKUEdition2 VSEDITION2_IntShell;
    public static _VSSKUEdition2 VSEDITION2_Community;
    public static _VSSKUEdition2 VSEDITION2_Professional;
    public static _VSSKUEdition2 VSEDITION2_Premium;
    public static _VSSKUEdition2 VSEDITION2_Ultimate;
    public static _VSSKUEdition2 VSEDITION2_Enterprise;
}
[GuidAttribute("23CFF888-0BE0-4D9D-B070-355BE173AB2A")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.LicenseManagement.Interop.CLSID_VsClientRightsTokenCacheManager {
}
[GuidAttribute("ECC74D94-939B-4A34-9844-6E5BE6730DEC")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.LicenseManagement.Interop.IVsAuthorizedVsEdition {
    [ComAliasNameAttribute("Microsoft.VisualStudio.LicenseManagement.Interop.VSSKUEdition2")]
[DispIdAttribute("1610678272")]
public int AuthorizedVsEdition2 { get; }
    public abstract virtual int get_AuthorizedVsEdition2();
}
[GuidAttribute("B4362B84-CED0-4A7D-A9DF-5E4FAAD00D34")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.LicenseManagement.Interop.IVsCheckForUpdatedOnlineLicenseCallback {
    public abstract virtual void OnCheckForUpdatedOnlineLicenseDone(VSLicenseSource signedInLicenseSource, VSOnlineLicenseUpdateResult updateResult);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("E8FAD400-F9CC-41C5-A3C5-8FE77F4BECA8")]
public interface Microsoft.VisualStudio.LicenseManagement.Interop.IVsCheckForUpdatedOnlineLicenseCallback2 {
    public abstract virtual void OnCheckForUpdatedOnlineLicenseDone2(int signedInLicenseSource, int updateResult);
}
[GuidAttribute("49CAB2CD-A065-42D0-8F96-6321B60EFB69")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.LicenseManagement.Interop.IVsClientRights {
    [ComAliasNameAttribute("Microsoft.VisualStudio.LicenseManagement.Interop.VSLicenseSource")]
public VSLicenseSource LicenseSource { get; }
    public bool IsLicenseGood { get; }
    [ComAliasNameAttribute("Microsoft.VisualStudio.LicenseManagement.Interop.VSLicenseStatus")]
public VSLicenseStatus LicenseStatus { get; }
    [ComAliasNameAttribute("Microsoft.VisualStudio.LicenseManagement.Interop.VSLicenseType")]
public int LicenseType { get; }
    [ComAliasNameAttribute("Microsoft.VisualStudio.LicenseManagement.Interop.VSReleaseType")]
public VSReleaseType ReleaseType { get; }
    public int DaysToExpire { get; }
    public int DaysSinceCreation { get; }
    [ComAliasNameAttribute("Microsoft.VisualStudio.LicenseManagement.Interop.VSSKUEdition")]
public int AuthorizedVsEdition { get; }
    public bool MayUplevel { get; }
    public bool IsSubscriptionBased { get; }
    public string LicenseDescription { get; }
    public string LicensedUserName { get; }
    public Guid LicensedUserId { get; }
    public string LicensingAccount { get; }
    public string LicenseUrl { get; }
    public abstract virtual VSLicenseSource get_LicenseSource();
    public abstract virtual bool get_IsLicenseGood();
    public abstract virtual VSLicenseStatus get_LicenseStatus();
    public abstract virtual int get_LicenseType();
    public abstract virtual VSReleaseType get_ReleaseType();
    public abstract virtual int get_DaysToExpire();
    public abstract virtual int get_DaysSinceCreation();
    public abstract virtual int get_AuthorizedVsEdition();
    public abstract virtual bool get_MayUplevel();
    public abstract virtual bool get_IsSubscriptionBased();
    public abstract virtual string get_LicenseDescription();
    public abstract virtual string get_LicensedUserName();
    public abstract virtual Guid get_LicensedUserId();
    public abstract virtual string get_LicensingAccount();
    public abstract virtual string get_LicenseUrl();
    public abstract virtual bool ReValidateClientRights(IVsClientRights& clientRights, IVsValidateClientRightsCallback asyncCallback);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("D682E13F-C9C9-45D5-81F2-A369111CE4BD")]
public interface Microsoft.VisualStudio.LicenseManagement.Interop.IVsClientRights2 {
    [ComAliasNameAttribute("VsLicenseManagement120.VSLicenseSource")]
public VSLicenseSource LicenseSource { get; }
    public bool IsLicenseGood { get; }
    [ComAliasNameAttribute("VsLicenseManagement120.VSLicenseStatus")]
public VSLicenseStatus LicenseStatus { get; }
    [ComAliasNameAttribute("VsLicenseManagement120.VSLicenseType")]
public int LicenseType { get; }
    [ComAliasNameAttribute("VsLicenseManagement120.VSReleaseType")]
public VSReleaseType ReleaseType { get; }
    public int DaysToExpire { get; }
    public int DaysSinceCreation { get; }
    [ComAliasNameAttribute("VsLicenseManagement120.VSSKUEdition")]
public int AuthorizedVsEdition { get; }
    public bool MayUplevel { get; }
    public bool IsSubscriptionBased { get; }
    public string LicenseDescription { get; }
    public string LicensedUserName { get; }
    [DispIdAttribute("1610678284")]
public Guid LicensedUserId { get; }
    public string LicensingAccount { get; }
    public string LicenseUrl { get; }
    [ComAliasNameAttribute("Microsoft.VisualStudio.LicenseManagement.Interop.VSLicenseSource2")]
public int LicenseSource2 { get; }
    public abstract virtual VSLicenseSource get_LicenseSource();
    public abstract virtual bool get_IsLicenseGood();
    public abstract virtual VSLicenseStatus get_LicenseStatus();
    public abstract virtual int get_LicenseType();
    public abstract virtual VSReleaseType get_ReleaseType();
    public abstract virtual int get_DaysToExpire();
    public abstract virtual int get_DaysSinceCreation();
    public abstract virtual int get_AuthorizedVsEdition();
    public abstract virtual bool get_MayUplevel();
    public abstract virtual bool get_IsSubscriptionBased();
    public abstract virtual string get_LicenseDescription();
    public abstract virtual string get_LicensedUserName();
    public abstract virtual Guid get_LicensedUserId();
    public abstract virtual string get_LicensingAccount();
    public abstract virtual string get_LicenseUrl();
    public abstract virtual bool ReValidateClientRights(IVsClientRights& clientRights, IVsValidateClientRightsCallback asyncCallback);
    public abstract virtual int get_LicenseSource2();
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("DB324E6C-F00B-4D1B-A792-83FD6E959E5E")]
public interface Microsoft.VisualStudio.LicenseManagement.Interop.IVsClientRightsDetails {
    [ComAliasNameAttribute("Microsoft.VisualStudio.LicenseManagement.Interop.VSLicenseSource")]
public VSLicenseSource CurrentLicenseSource { get; }
    public IVsClientRights CurrentClientRights { get; }
    public abstract virtual VSLicenseSource get_CurrentLicenseSource();
    public abstract virtual IVsClientRights get_CurrentClientRights();
    public abstract virtual IVsClientRights GetSpecificClientRights(VSLicenseSource desiredLicenseSource);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("AD26F37F-DD61-4D8D-ADB8-047F7A04133E")]
public interface Microsoft.VisualStudio.LicenseManagement.Interop.IVsClientRightsDetails2 {
    [ComAliasNameAttribute("VsLicenseManagement120.VSLicenseSource")]
[DispIdAttribute("1610678272")]
public VSLicenseSource CurrentLicenseSource { get; }
    [DispIdAttribute("1610678273")]
public IVsClientRights CurrentClientRights { get; }
    [DispIdAttribute("1610743808")]
[ComAliasNameAttribute("Microsoft.VisualStudio.LicenseManagement.Interop.VSLicenseSource2")]
public int CurrentLicenseSource2 { get; }
    public abstract virtual VSLicenseSource get_CurrentLicenseSource();
    public abstract virtual IVsClientRights get_CurrentClientRights();
    public abstract virtual IVsClientRights GetSpecificClientRights(VSLicenseSource desiredLicenseSource);
    public abstract virtual int get_CurrentLicenseSource2();
    public abstract virtual IVsClientRights2 GetSpecificClientRights2(int desiredLicenseSource);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("2918BABB-FFFB-4BA5-9B4A-D84F1F2A5FAC")]
public interface Microsoft.VisualStudio.LicenseManagement.Interop.IVsClientRightsProcessingEvents {
    public abstract virtual void OnBeforeComputingClientRights();
    public abstract virtual void OnAfterComputingClientRights(bool clientRightsChanged, IVsClientRightsDetails clientRightsDetails);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("804A405F-3270-4FA2-91E9-3DBDEC9CE514")]
public interface Microsoft.VisualStudio.LicenseManagement.Interop.IVsClientRightsTokenCacheManager {
    public abstract virtual object GetCachedClientRightsToken(VSLicenseSource desiredLicenseSource);
}
[GuidAttribute("7BCCB298-26CA-4F25-98F3-5F789731D30C")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.LicenseManagement.Interop.IVsClientRightsTokenCacheManager2 {
    public abstract virtual object GetCachedClientRightsToken(VSLicenseSource desiredLicenseSource);
    public abstract virtual object GetCachedClientRightsToken2(int desiredLicenseSource);
}
[GuidAttribute("7FD132AA-E884-4E55-884C-5F0233C82888")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.LicenseManagement.Interop.IVsClientRightsTokenCacheManagerInitialize {
    public abstract virtual void Initialize(Guid& SubscriptionLicenseId, string registryRoot);
}
[GuidAttribute("4600263D-42D5-45B3-B6D3-9CBA3DE5420A")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.LicenseManagement.Interop.IVsClientRightsTokenCacheManagerInitialize2 {
    public abstract virtual void Initialize(Guid& SubscriptionLicenseId, string registryRoot);
    public abstract virtual void SetOnlineOperationLogger(IVsOnlineOperationLogger onlineOperationLogger);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("6D2E73EB-7CF8-4051-821B-E4C718FFA6AD")]
public interface Microsoft.VisualStudio.LicenseManagement.Interop.IVsConnectedUserInfo {
    [DispIdAttribute("1610678272")]
public object CachedCredentials { get; }
    public abstract virtual object get_CachedCredentials();
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("422EE31E-C096-48BB-B96C-A9CD36442C2A")]
public interface Microsoft.VisualStudio.LicenseManagement.Interop.IVsCurrentVsEdition {
    [ComAliasNameAttribute("Microsoft.VisualStudio.LicenseManagement.Interop.VSSKUEdition2")]
[DispIdAttribute("1610678272")]
public int CurrentVsEdition { get; }
    public abstract virtual int get_CurrentVsEdition();
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("8ED040C3-43F8-4891-A978-7FDF48C14866")]
public interface Microsoft.VisualStudio.LicenseManagement.Interop.IVsLicensingNotifications {
    public abstract virtual void InitializeNotifications();
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("75E9989A-0090-47AE-8645-E0BF74904CFD")]
public interface Microsoft.VisualStudio.LicenseManagement.Interop.IVsLicensingState {
    [ComAliasNameAttribute("Microsoft.VisualStudio.LicenseManagement.Interop.VSPIDFamily")]
public int ProductFamily { get; }
    public bool IsNoTrialMode { get; }
    public bool IsSubscriptionAware { get; }
    [ComAliasNameAttribute("OLE.REFGUID")]
public Guid SubscriptionLicenseId { get; }
    public string SubscriptionRightsName { get; }
    [ComAliasNameAttribute("Microsoft.VisualStudio.LicenseManagement.Interop.VSReleaseType")]
public VSReleaseType ReleaseType { get; }
    public IVsClientRightsDetails clientRightsDetails { get; }
    public IVsOnlineLicensingManager OnlineLicensingManager { get; }
    public int FamilyMPC { get; }
    public string PIDMap { get; }
    public string ProductId { get; }
    public abstract virtual int get_ProductFamily();
    public abstract virtual bool ValidateClientRights(IVsClientRights& clientRights, IVsValidateClientRightsCallback asyncCallback);
    public abstract virtual void RefreshClientRights();
    public abstract virtual UInt32 AdviseClientRightsProcessingEvents(IVsClientRightsProcessingEvents pEventSink, Boolean& isClientRightsComputationPending);
    public abstract virtual void UnadviseClientRightsProcessingEvents(UInt32 dwCookie);
    public abstract virtual bool get_IsNoTrialMode();
    public abstract virtual bool get_IsSubscriptionAware();
    public abstract virtual Guid get_SubscriptionLicenseId();
    public abstract virtual string get_SubscriptionRightsName();
    public abstract virtual int GetVsEdition();
    public abstract virtual int GetEdition(Int32& featureLevel);
    public abstract virtual VSReleaseType get_ReleaseType();
    public abstract virtual IVsClientRightsDetails get_clientRightsDetails();
    public abstract virtual IVsOnlineLicensingManager get_OnlineLicensingManager();
    public abstract virtual int get_FamilyMPC();
    public abstract virtual int GetObfuscatedSN(string pid, int edition);
    public abstract virtual string get_PIDMap();
    public abstract virtual string get_ProductId();
    public abstract virtual bool IsUpgradable(int mpc);
    public abstract virtual VSPIDAction Validate(string productKey, int mpc, String& ProductId, Int32& range, Int32& featureLevel);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("31D93126-0DFF-42EC-88C8-5839FE7800B3")]
public interface Microsoft.VisualStudio.LicenseManagement.Interop.IVsLicensingStateInitialize {
    public abstract virtual void InitializeForPidAndOnlineLicensing(object joinableTaskContext, int ProductFamily, Guid& SubscriptionLicenseId, string SubscriptionRightsName, string registryRoot, IVsClientRightsTokenCacheManager clientRightsTokenCacheManager, IVsOnlineLicensingManager OnlineLicensingManager);
    public abstract virtual void InitializeForPidLicensingOnly(object joinableTaskContext, int ProductFamily, IVsOnlineLicensingManager OnlineLicensingManager);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("BC1A4433-AB42-48A0-B629-F63878692869")]
public interface Microsoft.VisualStudio.LicenseManagement.Interop.IVsOnlineLicensingClientRights {
    [ComAliasNameAttribute("Microsoft.VisualStudio.LicenseManagement.Interop.VSLicenseSource")]
public VSLicenseSource LicenseSource { get; }
    public bool IsLicenseGood { get; }
    [ComAliasNameAttribute("Microsoft.VisualStudio.LicenseManagement.Interop.VSLicenseStatus")]
public VSLicenseStatus LicenseStatus { get; }
    [ComAliasNameAttribute("Microsoft.VisualStudio.LicenseManagement.Interop.VSLicenseType")]
public int LicenseType { get; }
    [ComAliasNameAttribute("Microsoft.VisualStudio.LicenseManagement.Interop.VSReleaseType")]
public VSReleaseType ReleaseType { get; }
    public int DaysToExpire { get; }
    public int DaysSinceCreation { get; }
    [ComAliasNameAttribute("Microsoft.VisualStudio.LicenseManagement.Interop.VSSKUEdition")]
public int AuthorizedVsEdition { get; }
    public bool MayUplevel { get; }
    public bool IsSubscriptionBased { get; }
    public string LicenseDescription { get; }
    public string LicensedUserName { get; }
    public Guid LicensedUserId { get; }
    public string LicensingAccount { get; }
    public string LicenseUrl { get; }
    public bool IsTrialLicense { get; }
    public Guid ActivityId { get; }
    [ComAliasNameAttribute("Microsoft.VisualStudio.LicenseManagement.Interop.VSLicenseStatus")]
public VSLicenseStatus RightsStatus { get; }
    public int RightsDaysToExpire { get; }
    [ComAliasNameAttribute("Microsoft.VisualStudio.LicenseManagement.Interop.VSLicenseStatus")]
public VSLicenseStatus crtokenStatus { get; }
    public int CrtokenDaysToExpire { get; }
    public abstract virtual VSLicenseSource get_LicenseSource();
    public abstract virtual bool get_IsLicenseGood();
    public abstract virtual VSLicenseStatus get_LicenseStatus();
    public abstract virtual int get_LicenseType();
    public abstract virtual VSReleaseType get_ReleaseType();
    public abstract virtual int get_DaysToExpire();
    public abstract virtual int get_DaysSinceCreation();
    public abstract virtual int get_AuthorizedVsEdition();
    public abstract virtual bool get_MayUplevel();
    public abstract virtual bool get_IsSubscriptionBased();
    public abstract virtual string get_LicenseDescription();
    public abstract virtual string get_LicensedUserName();
    public abstract virtual Guid get_LicensedUserId();
    public abstract virtual string get_LicensingAccount();
    public abstract virtual string get_LicenseUrl();
    public abstract virtual bool ReValidateClientRights(IVsClientRights& clientRights, IVsValidateClientRightsCallback asyncCallback);
    public abstract virtual bool get_IsTrialLicense();
    public abstract virtual Guid get_ActivityId();
    public abstract virtual VSLicenseStatus get_RightsStatus();
    public abstract virtual int get_RightsDaysToExpire();
    public abstract virtual VSLicenseStatus get_crtokenStatus();
    public abstract virtual int get_CrtokenDaysToExpire();
}
[GuidAttribute("F43E1C88-E3CA-4EA8-AD81-7F5C2D0E920F")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.LicenseManagement.Interop.IVsOnlineLicensingManager {
    public string ClientVersion { get; }
    public bool IsLicenseAcquisitionSupported { get; }
    public abstract virtual void CheckForUpdatedOnlineLicenseAsync(bool silent, IVsCheckForUpdatedOnlineLicenseCallback asyncCallback);
    public abstract virtual void SignInAndCheckForUpdatedOnlineLicenseAsync(VSLicenseSource desiredLicenseSource, UInt32 signinOptions, IVsUIDataSource existingSignInWizard, IVsCheckForUpdatedOnlineLicenseCallback asyncCallback);
    public abstract virtual void SignOutUser(VSLicenseSource desiredLicenseSource);
    public abstract virtual string GetUserUniqueName(VSLicenseSource desiredLicenseSource);
    public abstract virtual VSConnectionState GetConnectionState(VSLicenseSource desiredLicenseSource);
    public abstract virtual int GetClientRightsTokenStatus(VSLicenseSource desiredLicenseSource, int flagsMask);
    public abstract virtual string get_ClientVersion();
    public abstract virtual bool get_IsLicenseAcquisitionSupported();
    public abstract virtual UInt32 AdviseOnlineLicensingManagerEvents(IVsOnlineLicensingManagerEvents sink);
    public abstract virtual void UnadviseOnlineLicensingManagerEvents(UInt32 cookie);
}
[GuidAttribute("FBF09CA9-50D0-4641-A148-559C25FEBB7E")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.LicenseManagement.Interop.IVsOnlineLicensingManager2 {
    public string ClientVersion { get; }
    public bool IsLicenseAcquisitionSupported { get; }
    public abstract virtual void CheckForUpdatedOnlineLicenseAsync(bool silent, IVsCheckForUpdatedOnlineLicenseCallback asyncCallback);
    public abstract virtual void SignInAndCheckForUpdatedOnlineLicenseAsync(VSLicenseSource desiredLicenseSource, UInt32 signinOptions, IVsUIDataSource existingSignInWizard, IVsCheckForUpdatedOnlineLicenseCallback asyncCallback);
    public abstract virtual void SignOutUser(VSLicenseSource desiredLicenseSource);
    public abstract virtual string GetUserUniqueName(VSLicenseSource desiredLicenseSource);
    public abstract virtual VSConnectionState GetConnectionState(VSLicenseSource desiredLicenseSource);
    public abstract virtual int GetClientRightsTokenStatus(VSLicenseSource desiredLicenseSource, int flagsMask);
    public abstract virtual string get_ClientVersion();
    public abstract virtual bool get_IsLicenseAcquisitionSupported();
    public abstract virtual UInt32 AdviseOnlineLicensingManagerEvents(IVsOnlineLicensingManagerEvents sink);
    public abstract virtual void UnadviseOnlineLicensingManagerEvents(UInt32 cookie);
    public abstract virtual void CheckForUpdatedOnlineLicenseAsync2(bool silent, IVsCheckForUpdatedOnlineLicenseCallback2 asyncCallback);
    public abstract virtual void SignInAndCheckForUpdatedOnlineLicenseAsync2(int desiredLicenseSource, UInt32 signinOptions, IVsUIDataSource existingSignInWizard, IVsCheckForUpdatedOnlineLicenseCallback2 asyncCallback);
    public abstract virtual void SignOutUser2(int desiredLicenseSource);
    public abstract virtual string GetUserUniqueName2(int desiredLicenseSource);
    public abstract virtual VSConnectionState GetConnectionState2(int desiredLicenseSource);
    public abstract virtual int GetClientRightsTokenStatus2(int desiredLicenseSource, int flagsMask);
    public abstract virtual UInt32 AdviseOnlineLicensingManagerEvents2(IVsOnlineLicensingManagerEvents2 sink);
    public abstract virtual void UnadviseOnlineLicensingManagerEvents2(UInt32 cookie);
}
[GuidAttribute("BF2E70AD-B1A5-4DEE-BD53-9413FABE8DAD")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.LicenseManagement.Interop.IVsOnlineLicensingManagerEvents {
    public abstract virtual void OnConnectionStateChanged(VSLicenseSource LicenseSource);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("BCFFC59E-0438-424D-9B15-71FDF972D8F5")]
public interface Microsoft.VisualStudio.LicenseManagement.Interop.IVsOnlineLicensingManagerEvents2 {
    public abstract virtual void OnConnectionStateChanged2(int licenseSource);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("35FB3F95-1296-40B8-8DF2-E8817A36C74D")]
public interface Microsoft.VisualStudio.LicenseManagement.Interop.IVsOnlineLicensingManagerInitialize {
    public abstract virtual void Initialize(IServiceProvider serviceProvider, string registryRoot, string ClientVersion, bool isLicenseAcquistionSupported, object ideUserConnectionService, object altLicensingUserConnectionService);
    public abstract virtual void EnableLicenseServerPolling(bool isEnabled, IVsLicensingState vsLicensingState);
}
[GuidAttribute("39619599-87AF-4475-A3CC-DDBEACA6B174")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.LicenseManagement.Interop.IVsOnlineLicensingManagerInitialize2 {
    public abstract virtual void Initialize(IServiceProvider serviceProvider, string registryRoot, string ClientVersion, bool isLicenseAcquistionSupported, object ideUserConnectionService, object altLicensingUserConnectionService);
    public abstract virtual void EnableLicenseServerPolling(bool isEnabled, IVsLicensingState vsLicensingState);
    public abstract virtual void Initialize2(IServiceProvider serviceProvider, string registryRoot, string clientVersion, bool isLicenseAcquistionSupported, object ideUserConnectionService, object altLicensingUserConnectionService, object vsoAutoLicensingUserConnectionService);
    public abstract virtual void SetLicenseState(IVsLicensingState vsLicensingState);
}
[GuidAttribute("FC1C3CF6-2CF0-4288-AD84-068217E89716")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.LicenseManagement.Interop.IVsOnlineLicensingManagerInitialize3 {
    public abstract virtual void Initialize(IServiceProvider serviceProvider, string registryRoot, string ClientVersion, bool isLicenseAcquistionSupported, object ideUserConnectionService, object altLicensingUserConnectionService);
    public abstract virtual void EnableLicenseServerPolling(bool isEnabled, IVsLicensingState vsLicensingState);
    public abstract virtual void Initialize2(IServiceProvider serviceProvider, string registryRoot, string clientVersion, bool isLicenseAcquistionSupported, object ideUserConnectionService, object altLicensingUserConnectionService, object vsoAutoLicensingUserConnectionService);
    public abstract virtual void SetLicenseState(IVsLicensingState vsLicensingState);
    public abstract virtual IVsTask EnableLicenseServerPollingAsync(IVsLicensingState vsLicensingState);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("3D10C423-940B-4932-91E5-4F42D91A86DB")]
public interface Microsoft.VisualStudio.LicenseManagement.Interop.IVsOnlineOperationLogger {
    public abstract virtual void LogError(string source, string message);
    public abstract virtual void LogToSQM(int operationType, int operationResult, int resultCode, Guid traceGuid, object exception);
    public abstract virtual void LogMessage(UInt32 logEntryType, string source, string message);
    public abstract virtual void SetClientRightsTokenStatusFlag(VSLicenseSource desiredLicenseSource, int flag);
    public abstract virtual void ClearClientRightsTokenStatusFlag(VSLicenseSource desiredLicenseSource, int flag);
}
[GuidAttribute("325D8E08-18F2-4890-84B3-DAFD53F8C72F")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.LicenseManagement.Interop.IVsOnlineOperationLogger2 {
    public abstract virtual void LogError(string source, string message);
    public abstract virtual void LogToSQM(int operationType, int operationResult, int resultCode, Guid traceGuid, object exception);
    public abstract virtual void LogMessage(UInt32 logEntryType, string source, string message);
    public abstract virtual void SetClientRightsTokenStatusFlag(VSLicenseSource desiredLicenseSource, int flag);
    public abstract virtual void ClearClientRightsTokenStatusFlag(VSLicenseSource desiredLicenseSource, int flag);
    public abstract virtual void LogToSQM2(int operationType, int operationResult, int resultCode, Guid traceGuid, int licenseSource, object exception);
    public abstract virtual void SetClientRightsTokenStatusFlag2(int desiredLicenseSource, int flag);
    public abstract virtual void ClearClientRightsTokenStatusFlag2(int desiredLicenseSource, int flag);
}
[GuidAttribute("24DAC6DE-8698-4FDD-B16C-F695CC7F60DC")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.LicenseManagement.Interop.IVsSignInWizard {
    public abstract virtual IVsUIElement CreateWizard(int id);
    public abstract virtual bool ShowWizard(IVsUIElement element);
}
[GuidAttribute("216077B4-3762-4A4C-9E8A-748BB27979DD")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.LicenseManagement.Interop.IVsValidateClientRightsCallback {
    public abstract virtual void OnClientRightsComputed(IVsClientRights clientRights);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("7C52936D-3910-4151-9073-46EA37AF19C7")]
public interface Microsoft.VisualStudio.LicenseManagement.Interop.SVsAltLicensingUserConnectionService {
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("09446ADE-6B3C-4A4D-9B97-61F49BEB75CE")]
public interface Microsoft.VisualStudio.LicenseManagement.Interop.SVsConnectedUserService {
}
[GuidAttribute("1DFCC05F-B568-458B-B60F-4894281F527A")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.LicenseManagement.Interop.SVsLicensingNotifications {
}
[GuidAttribute("51589EF5-A51B-4B76-A6C4-103F7ED7DEAF")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.LicenseManagement.Interop.SVsLicensingState {
}
[GuidAttribute("A1CD5C77-DE7C-4999-938D-EF5BB235AD95")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.LicenseManagement.Interop.SVsOnlineLicensingManager {
}
[GuidAttribute("A629CB03-6C1B-4106-A27E-36EDE52242FA")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.LicenseManagement.Interop.SVsSignInWizard {
}
[GuidAttribute("227087D2-6537-4A7D-96D9-7C236B1B00CB")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.LicenseManagement.Interop.SVsSignInWizardDataSource {
}
[GuidAttribute("FA99AA0B-0D26-4608-B104-363A3684DE5E")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.LicenseManagement.Interop.SVsVSOAutoUserConnectionService {
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("FE491BAD-9049-4B68-9D92-A340EF8BD49D")]
public interface Microsoft.VisualStudio.LicenseManagement.Interop.UserInformationDataSourceFactoryGuid {
}
public enum Microsoft.VisualStudio.LicenseManagement.Interop.UserInformationDataSourceIDs : Enum {
    public int value__;
    public static UserInformationDataSourceIDs UserInformation;
}
public enum Microsoft.VisualStudio.LicenseManagement.Interop.UserInformationUIElementIDs : Enum {
    public int value__;
    public static UserInformationUIElementIDs UserInformationCard;
    public static UserInformationUIElementIDs UserInformationPane;
    public static UserInformationUIElementIDs FirstLaunchSignIn;
    public static UserInformationUIElementIDs FirstLaunchConnected;
}
[GuidAttribute("63AB3631-5F70-4FD5-9395-4A34028F79BD")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.LicenseManagement.Interop.UserInformationUIFactoryGuid {
}
public enum Microsoft.VisualStudio.LicenseManagement.Interop.VSConnectionState : Enum {
    public int value__;
    public static VSConnectionState ConnectionState_Unassociated;
    public static VSConnectionState ConnectionState_Unauthenticated;
    public static VSConnectionState ConnectionState_Offline;
    public static VSConnectionState ConnectionState_OfflineAndUnauthenticated;
    public static VSConnectionState ConnectionState_Online;
}
public enum Microsoft.VisualStudio.LicenseManagement.Interop.VSLicenseSource : Enum {
    public int value__;
    public static VSLicenseSource VSLicenseSource_None;
    public static VSLicenseSource VSLicenseSource_PID;
    public static VSLicenseSource VSLicenseSource_IDEUser;
    public static VSLicenseSource VSLicenseSource_AltLicensingUser;
}
public enum Microsoft.VisualStudio.LicenseManagement.Interop.VSLicenseStatus : Enum {
    public int value__;
    public static VSLicenseStatus VSLIC_Success_RightsLimited;
    public static VSLicenseStatus VSLIC_Success_RightsAlmostExpired;
    public static VSLicenseStatus VSLIC_Success_CrtokenAlmostExpired;
    public static VSLicenseStatus VSLIC_Success_PidAlmostExpired;
    public static VSLicenseStatus VSLIC_Success_RightsExpiring;
    public static VSLicenseStatus VSLIC_Success_CrtokenExpiring;
    public static VSLicenseStatus VSLIC_Success_CrtokenValid;
    public static VSLicenseStatus VSLIC_Success_RightsNoLimitGiven;
    public static VSLicenseStatus VSLIC_Success_PidExpiring;
    public static VSLicenseStatus VSLIC_Success_PidLimited;
    public static VSLicenseStatus VSLIC_Success_PidUnlimited;
    public static VSLicenseStatus VSLIC_UNKNOWN;
    public static VSLicenseStatus VSLIC_Failure_PidExpired;
    public static VSLicenseStatus VSLIC_Failure_PidCorrupt;
    public static VSLicenseStatus VSLIC_Failure_CrtokenCorrupt;
    public static VSLicenseStatus VSLIC_Failure_RightsNotDetermined;
    public static VSLicenseStatus VSLIC_Failure_CrtokenExpired;
    public static VSLicenseStatus VSLIC_Failure_RightsExpired;
    public static VSLicenseStatus VSLIC_Failure_DownLevelRequired;
    public static VSLicenseStatus VSLIC_Success_CrtokenNoLimitGiven;
    public static VSLicenseStatus VSLIC_Success_CrtokenLimited;
    public static VSLicenseStatus VSLIC_Failure_SubscriptionExpired;
    public static VSLicenseStatus VSLIC_Success_SubscriptionLimited;
    public static VSLicenseStatus VSLIC_Success_SubscriptionAlmostExpired;
    public static VSLicenseStatus VSLIC_Success_SubscriptionExpiring;
}
public enum Microsoft.VisualStudio.LicenseManagement.Interop.VSLicensingErrorCodes120 : Enum {
    public int value__;
    public static VSLicensingErrorCodes120 VSLIC_E_INVALIDLICENSE;
    public static VSLicensingErrorCodes120 VSLIC_E_EVALUATIONEXPIRED;
    public static VSLicensingErrorCodes120 VSLIC_E_CRTOKENCORRUPT;
    public static VSLicensingErrorCodes120 VSLIC_E_CRTOKENEXPIRED;
    public static VSLicensingErrorCodes120 VSLIC_E_SUBSCRIPTIONEXPIRED;
    public static VSLicensingErrorCodes120 VSLIC_E_DOWNLEVELREQUIRED;
}
public enum Microsoft.VisualStudio.LicenseManagement.Interop.VSOnlineLicenseUpdateResult : Enum {
    public int value__;
    public static VSOnlineLicenseUpdateResult UpdateResult_LicenseUnchanged;
    public static VSOnlineLicenseUpdateResult UpdateResult_LicenseChanged;
    public static VSOnlineLicenseUpdateResult UpdateResult_Canceled;
}
public enum Microsoft.VisualStudio.LicenseManagement.Interop.VSPIDAction : Enum {
    public int value__;
    public static VSPIDAction VSPID_ACTION_Success;
    public static VSPIDAction VSPID_ACTION_NotInstalled;
    public static VSPIDAction VSPID_ACTION_Invalid;
    public static VSPIDAction VSPID_ACTION_Expired;
    public static VSPIDAction VSPID_ACTION_InUse;
    public static VSPIDAction VSPID_ACTION_Failure;
    public static VSPIDAction VSPID_ACTION_NoUpgrade;
}
public enum Microsoft.VisualStudio.LicenseManagement.Interop.VSPIDOption : Enum {
    public int value__;
    public static VSPIDOption VSPID_OPT_NOUPGRADE;
    public static VSPIDOption VSPID_OPT_UPGRADEABLE;
    public static VSPIDOption VSPID_OPT_TARGET;
    public static VSPIDOption VSPID_OPT_ALL;
}
public enum Microsoft.VisualStudio.LicenseManagement.Interop.VSPIDTime : Enum {
    public int value__;
    public static VSPIDTime VSPID_TIME_UNLIMITED;
    public static VSPIDTime VSPID_TIME_EXPIRED;
}
public enum Microsoft.VisualStudio.LicenseManagement.Interop.VSReleaseType : Enum {
    public int value__;
    public static VSReleaseType VSRELTYPE_Prerelease;
    public static VSReleaseType VSRELTYPE_Release;
}
[GuidAttribute("250E1E9A-D2FC-410f-99E4-1ABA5B390A9A")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.Services.IVsFileChange {
    public abstract virtual UInt32 AdviseFileChangeEvents(IVsFileChangeEvents sink);
    public abstract virtual void UnadviseFileChangeEvents(UInt32 cookie);
    public abstract virtual void AddFile(UInt32 cookie, string filename, _VSFILECHANGEFLAGS filter);
    public abstract virtual void RemoveFile(UInt32 cookie, string filename);
    public abstract virtual void AddDirectory(UInt32 cookie, string directory, bool includeSubdirectories, _VSFILECHANGEFLAGS filter);
    public abstract virtual void RemoveDirectory(UInt32 cookie, string directory);
    public abstract virtual void SyncFile(string filename);
    public abstract virtual void IgnoreFile(UInt32 cookie, string filename, bool ignore);
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("27524")]
internal class System.Runtime.CompilerServices.NullableAttribute : Attribute {
    public Byte[] NullableFlags;
    public NullableAttribute(byte );
    public NullableAttribute(Byte[] );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("5196")]
internal class System.Runtime.CompilerServices.NullableContextAttribute : Attribute {
    public byte Flag;
    public NullableContextAttribute(byte );
}
