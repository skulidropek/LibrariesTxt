[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
public static class Microsoft.TeamFoundation.ArtifactConstants : object {
    public static string IdString;
}
public static class Microsoft.TeamFoundation.ArtifactLinkIds : object {
    public static string Changeset;
    public static string Commit;
    public static string VersionedItem;
    public static string NoOutboundLink;
    public static string PullRequest;
    public static string Branch;
    public static string FoundInBuild;
    public static string IntegratedInBuild;
    private static ArtifactLinkIds();
}
[EditorBrowsableAttribute("1")]
public static class Microsoft.TeamFoundation.BuildGroupWellKnownSecurityIds : object {
    public static SecurityIdentifier BuildServicesGroup;
    public static SecurityIdentifier BuildAdministratorsGroup;
    private static BuildGroupWellKnownSecurityIds();
}
[EditorBrowsableAttribute("1")]
public static class Microsoft.TeamFoundation.CodeReviewContextKeyNames : object {
    public static string Workspace;
    public static string WorkItem;
    public static string WorkItemId;
    public static string Shelveset;
    public static string ShelvesetName;
    public static string ShelvesetExcludedCount;
    public static string ChangesetId;
    private static CodeReviewContextKeyNames();
}
public static class Microsoft.TeamFoundation.CollectionServicingTokens : object {
    public static string ProvisionCollectionCreate;
    public static string NoAction;
    public static string ReportingActionToken;
    public static string ReportServerToken;
    public static string ReportFolderToken;
    public static string CreateFolderAction;
    public static string UseExistingFolderAction;
    [EditorBrowsableAttribute("1")]
public static ICollection`1<string> ReportingTokens;
    public static string SharePointActionToken;
    public static string SharePointSitePathToken;
    public static string SharePointServerToken;
    public static string SharePointSiteOwnerToken;
    public static string CreateSiteAction;
    public static string UseExistingSiteAction;
    [EditorBrowsableAttribute("1")]
public static ICollection`1<string> SharePointTokens;
    public static string WarehouseActionToken;
    public static string IsHostedCollection;
    public static string HostedIdentityMappings;
    private static CollectionServicingTokens();
}
public class Microsoft.TeamFoundation.Common.AdminTraceLogger : MarshalByRefObject {
    private TraceLevel m_traceLevel;
    private static AdminTraceLogger s_default;
    private static string c_traceFormat;
    public static AdminTraceLogger Default { get; }
    public TraceLevel TraceLevel { get; }
    public AdminTraceLogger(TraceLevel traceLevel);
    public static AdminTraceLogger get_Default();
    public TraceLevel get_TraceLevel();
    public void Verbose(string message);
    public void Verbose(string format, Object[] args);
    public sealed virtual void Info(string message);
    public sealed virtual void Info(string format, Object[] args);
    public sealed virtual void Warning(string message);
    public sealed virtual void Warning(string format, Object[] args);
    public sealed virtual void Warning(Exception exception);
    public sealed virtual void Error(string message);
    public sealed virtual void Error(string format, Object[] args);
    public sealed virtual void Error(Exception exception);
    [ConditionalAttribute("DEBUG")]
public void Debug(string message);
    [ConditionalAttribute("DEBUG")]
public void Debug(string format, Object[] args);
    [ConditionalAttribute("DEBUG")]
public void RegisterPassword(string password);
    protected virtual void WriteLine(TraceLevel level, string message, Object[] args);
    public virtual void WriteLine(TraceLevel traceLevel, string message);
    public void Heading(string message);
    public void Heading2(string message);
    public void Enter(string message);
    public void Exit(string message);
    private void WriteMultipleLines(TraceLevel level, string message);
    private static TraceLevel ReadTraceLevel();
}
public class Microsoft.TeamFoundation.Common.AggregateLogger : object {
    private ITFLogger[] m_loggers;
    public AggregateLogger(ITFLogger[] loggers);
    public sealed virtual void Info(string message);
    public sealed virtual void Info(string message, Object[] args);
    public sealed virtual void Warning(string message);
    public sealed virtual void Warning(string message, Object[] args);
    public sealed virtual void Warning(Exception exception);
    public sealed virtual void Error(string message);
    public sealed virtual void Error(string message, Object[] args);
    public sealed virtual void Error(Exception exception);
    public sealed virtual void Dispose();
}
public static class Microsoft.TeamFoundation.Common.ArrayUtil : object {
    public static bool Equals(Byte[] a1, Byte[] a2);
    public static int GetHashCode(Byte[] array);
    public static bool Equals(Byte[] a1, Byte[] a2, int length);
}
public class Microsoft.TeamFoundation.Common.BaseAsyncResult : object {
    private AsyncCallback m_userCallback;
    private object m_stateObject;
    private ManualResetEvent m_waitHandle;
    private bool m_isCompleted;
    private Exception m_exception;
    public object AsyncState { get; }
    public WaitHandle AsyncWaitHandle { get; }
    public bool CompletedSynchronously { get; }
    public bool IsCompleted { get; }
    public Exception Exception { get; }
    public BaseAsyncResult(AsyncCallback userCallback, object stateObject);
    public sealed virtual object get_AsyncState();
    public sealed virtual WaitHandle get_AsyncWaitHandle();
    public sealed virtual bool get_CompletedSynchronously();
    public sealed virtual bool get_IsCompleted();
    protected internal void Completed(Exception ex);
    public Exception get_Exception();
}
public class Microsoft.TeamFoundation.Common.ByteArrayEqualityComparer : object {
    public sealed virtual bool Equals(Byte[] first, Byte[] second);
    public sealed virtual int GetHashCode(Byte[] array);
}
[EditorBrowsableAttribute("1")]
public static class Microsoft.TeamFoundation.Common.ClrHashUtil : object {
    public static int GetStringHashOrcas32(string str);
    public static int GetStringHashOrcas64(string str);
}
[EditorBrowsableAttribute("1")]
public enum Microsoft.TeamFoundation.Common.CompressionFormat : Enum {
    public short value__;
    public static CompressionFormat None;
    public static CompressionFormat Default;
    public static CompressionFormat LZNT1;
}
public static class Microsoft.TeamFoundation.Common.ComputerInfo : object {
    private static int c_errorBadNetPath;
    private static string s_computerDomain;
    private static string s_injectMachineName;
    public static string ComputerDomain { get; }
    public static string MachineName { get; }
    public static string get_ComputerDomain();
    public static string get_MachineName();
    public static bool IsSameMachine(string hostname1, string hostname2);
    public static bool DnsSafeIsSameMachine(string hostname1, string hostname2);
    public static bool IsLocalMachine(string hostname);
    public static bool IsCNameForLocalMachine(string hostName);
    [BrowsableAttribute("False")]
internal static bool AreHostAddressesLocal(IPAddress[] hostAddresses, IPAddress[] localMachineAddresses);
    public static bool IsLocalMachine(Uri uri);
    public static string GetComputerDomain(string computerNameOrAddress, ITFLogger logger);
    public static string GetComputerAccount(string computerNameOrAddress, ITFLogger logger);
    public static bool IsSqlAzureHost(string hostname);
    private static bool TryGetComputerDomainUsingNetGetJoinInformation(string computerNameOrAddress, String& computerDomain, ITFLogger logger);
    private static string GetComputerAccountUsingDsCrackNames(string computerNameOrAddress, ITFLogger logger);
}
public class Microsoft.TeamFoundation.Common.DirectoryProxy : object {
    public sealed virtual bool Exists(string path);
    public sealed virtual DirectoryInfo CreateDirectory(string path);
    public sealed virtual IEnumerable`1<string> EnumerateFiles(string path);
    public sealed virtual IEnumerable`1<string> EnumerateFiles(string path, string searchPattern);
    public sealed virtual String[] GetFiles(string path);
    public sealed virtual void Delete(string path);
}
public enum Microsoft.TeamFoundation.Common.EditionType : Enum {
    public int value__;
    public static EditionType None;
    public static EditionType Standard;
    public static EditionType Express;
    public static EditionType Hosted;
    public static EditionType Trial;
}
[ObsoleteAttribute("Please use a strongly typed exception.")]
[ExceptionMappingAttribute("0.0", "3.0", "ELeadException", "Microsoft.TeamFoundation.Common.ELeadException, Microsoft.TeamFoundation.Common, Version=14.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
public class Microsoft.TeamFoundation.Common.ELeadException : ApplicationException {
    public ELeadException(string message);
    public ELeadException(string message, Exception innerException);
    protected ELeadException(SerializationInfo info, StreamingContext context);
}
[EditorBrowsableAttribute("1")]
public static class Microsoft.TeamFoundation.Common.EmbeddedResourceUtil : object {
    public static string GetResourceAsString(string resourceName);
    public static string GetResourceAsString(string resourceName, Assembly assembly);
}
public static class Microsoft.TeamFoundation.Common.ExceptionFormatter : object {
    private static bool s_showDetailedExceptions;
    public static bool ShowDetailedExceptions { get; }
    private static ExceptionFormatter();
    public static bool get_ShowDetailedExceptions();
    private static bool ShowDetails();
    public static string FormatExceptionForDisplay(Exception ex);
}
public class Microsoft.TeamFoundation.Common.ExceptionPropertyCollection : object {
    private Dictionary`2<string, object> m_properties;
    public int Count { get; }
    public int get_Count();
    public void Set(string name, bool value);
    public void Set(string name, Boolean[] value);
    public void Set(string name, byte value);
    public void Set(string name, Byte[] value);
    public void Set(string name, char value);
    public void Set(string name, DateTime value);
    public void Set(string name, DateTime[] value);
    public void Set(string name, decimal value);
    public void Set(string name, Decimal[] value);
    public void Set(string name, double value);
    public void Set(string name, Double[] value);
    public void Set(string name, Guid value);
    public void Set(string name, Guid[] value);
    public void Set(string name, short value);
    public void Set(string name, Int16[] value);
    public void Set(string name, int value);
    public void Set(string name, Int32[] value);
    public void Set(string name, long value);
    public void Set(string name, Int64[] value);
    public void Set(string name, float value);
    public void Set(string name, Single[] value);
    public void Set(string name, string value);
    public void Set(string name, String[] value);
    public void Remove(string name);
    public void Copy(ExceptionPropertyCollection properties);
    public void Copy(ExceptionPropertyCollection properties, bool replace);
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    private sealed virtual override IEnumerator`1<KeyValuePair`2<string, object>> System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<System.String,System.Object>>.GetEnumerator();
    internal static IEnumerable`1<KeyValuePair`2<string, object>> FromXml(XmlReader reader);
    [EditorBrowsableAttribute("1")]
public void ToXml(XmlWriter writer, string elementName);
}
public class Microsoft.TeamFoundation.Common.FileLogger : TFLogger {
    [CompilerGeneratedAttribute]
private string <FilePath>k__BackingField;
    public static string DefaultLogPath;
    private object m_lock;
    private bool m_onlyLogToFile;
    private bool m_includeFormatting;
    private Timer m_timer;
    private StreamWriter m_writer;
    private static Char[] s_lineSeparators;
    public string FilePath { get; private set; }
    public FileLogger(Stream stream);
    public FileLogger(string filePath);
    public FileLogger(string filePath, FileMode createMode);
    public FileLogger(string filePath, FileMode createMode, bool onlyLogToFile, bool includeFormatting);
    private static FileLogger();
    public sealed virtual void Dispose();
    protected virtual void Dispose(bool disposing);
    [CompilerGeneratedAttribute]
public string get_FilePath();
    [CompilerGeneratedAttribute]
private void set_FilePath(string value);
    public static string GenerateLogFileName(string logFolder, string commandName);
    public virtual void Info(string message);
    public virtual void Warning(string message);
    public virtual void Error(string message);
    public void Flush();
    private void WriteLine(LogEntryLevel entryType, string message);
    private void OnTimer(object state);
}
public class Microsoft.TeamFoundation.Common.FileProxy : object {
    public sealed virtual string ReadAllText(string path);
    public sealed virtual void WriteAllText(string path, string contents);
    public sealed virtual void Copy(string sourceFileName, string destFileName, bool overwrite);
    public sealed virtual void Delete(string path);
}
[EditorBrowsableAttribute("1")]
public static class Microsoft.TeamFoundation.Common.FileSpec : object {
    private static FileSpecBottomUpComparer s_bottomUpComparer;
    private static FileSpecTopDownComparer s_topDownComparer;
    public static Char[] IllegalNtfsChars;
    public static Char[] IllegalNtfsCharsAndWildcards;
    public static Boolean[] ValidNtfsCharTable;
    public static String[] ReservedNames;
    internal static String[] reservedNamesLength3;
    private static Char[] s_invalidPathChars;
    private static Char[] s_versionControlSeparators;
    private static string s_tempDirectory;
    public static StringComparer FullPathComparer { get; }
    public static StringComparer PartialPathComparer { get; }
    public static FileSpecBottomUpComparer BottomUpComparer { get; }
    public static FileSpecTopDownComparer TopDownComparer { get; }
    public static string CurrentDirectory { get; }
    public static StringComparer StringComparer { get; }
    private static int NextRandomNumber { get; }
    private static FileSpec();
    public static string GetFullPath(string path);
    public static string GetFullPath(string path, bool checkForIllegalDollar);
    public static void CheckForIllegalDollarInPath(string path);
    public static string Combine(string parent, string relative);
    public static string UncanonicalizedCombine(string parent, string relative);
    public static String[] SplitPath(string path);
    public static void Parse(string path, String& folder, String& fileName);
    private static void FindFileNameIndex(string path, Int32& folderEnd, Int32& fileNameStart);
    public static string GetDirectoryName(string path);
    [ConditionalAttribute("DEBUG")]
private static void AssertPathCanonicalized(string parameter, string value);
    public static string GetFileName(string path);
    public static int GetFolderDepth(string item);
    public static string MakeRelative(string path, string folder);
    public static int GetRelativeStartIndex(string path, string folder);
    public static string MakeRelative(string item, string folder, bool recursive);
    public static bool Equals(string item1, string item2);
    public static int Compare(string item1, string item2);
    public static int Compare(string item1, string item2, int item1Length, int item2Length);
    public static int CompareUI(string item1, string item2);
    public static int CompareUI(string item1, string item2, int item1Length, int item2Length);
    public static int CompareCaseSensitive(string item1, string item2);
    public static bool EqualsCaseSensitive(string item1, string item2);
    public static int Compare(string item1, string item2, char slash, StringComparison comparison);
    public static int Compare(string item1, string item2, int item1Length, int item2Length, char slash, StringComparison comparison);
    public static int Compare(string item1, string item2, int item1Length, int item2Length, Int32& item1ComparedLength, Int32& item2ComparedLength, char slash, StringComparison comparison);
    public static StringComparer get_FullPathComparer();
    public static int FullPathDescendingComparison(string x, string y);
    public static StringComparer get_PartialPathComparer();
    public static int CompareTopDown(string item1, string item2);
    public static int CompareTopDownUI(string item1, string item2);
    public static int CompareTopDown(string item1, string item2, char slash, StringComparison comparison);
    public static int CompareBottomUp(string item1, string item2);
    public static int CompareBottomUpUI(string item1, string item2);
    public static int CompareBottomUp(string item1, string item2, char slash, StringComparison comparison);
    public static FileSpecBottomUpComparer get_BottomUpComparer();
    public static FileSpecTopDownComparer get_TopDownComparer();
    public static bool IsSubItem(string item, string parent);
    public static bool IsImmediateChild(string item, string parent);
    public static bool IsWildcard(string path);
    public static bool Match(string item, string matchFolder, string matchPattern, bool recursive);
    public static bool Match(string itemName, string matchPattern);
    internal static bool Match(string itemName, int itemIndex, string matchPattern);
    public static bool MatchFileName(string item, string matchPattern);
    public static string RemoveInvalidFileNameChars(string fileName);
    public static string GetTempFileName();
    public static string GetTempFileNameWithExtension(string extension);
    public static string GetTempDirectory();
    public static string get_CurrentDirectory();
    public static string GetCommonPathPrefix(string path1, string path2);
    public static string GetFilesystemPathCasing(string path);
    public static bool IsReservedName(string name);
    public static bool IsLegalNtfsName(string name, int maxLength);
    public static bool IsLegalNtfsName(string name, int maxLength, bool permitWildcards);
    public static bool IsLegalNtfsName(string name, int maxLength, bool permitWildcards, String& error);
    public static bool IsValidNtfsChar(char c);
    public static bool IsValidPathChar(char c);
    public static void ValidatePath(string path);
    public static bool IsEmptyDirectory(string path);
    public static void CopyFile(string oldPath, string newPath);
    public static void CopyFile(string oldPath, string newPath, bool overwriteExisting);
    private static void ResetAttributes(string fileName);
    private static void ResetFileDACL(string fileName);
    private static bool IsRetryableOperation(int errorCode);
    public static void MoveFile(string oldPath, string newPath);
    public static void MoveFile(string oldPath, string newPath, bool overwriteExisting);
    public static void CreateHardLink(string oldName, string newName, bool overwriteExisting);
    public static string GetLongPathForm(string fileName);
    public static bool IsLongPathForm(string path);
    public static void DeleteFile(string path);
    public static void DeleteFileWithoutException(string path);
    private static void DeleteFile(string path, bool throwExceptionOnFailure);
    private static string NormalizePath(string path, bool throwIfTooLong);
    public static void DeleteDirectory(string path);
    public static void DeleteDirectory(string path, bool recursive);
    public static void DeleteDirectory(string path, bool recursive, bool followJunctionPoints);
    private static void DeleteDirectoryLongPath(string path, bool recursive, bool followJunctionPoints);
    private static string GetFullPathWrapper(string path);
    public static FileAttributes GetAttributes(string path);
    public static CompressionFormat GetCompressionFormat(string path);
    public static void SetCompressionFormat(string path, CompressionFormat compressionFormat);
    public static bool IsVersionControlReservedCharacter(char c);
    public static bool HasVersionControlReservedCharacter(string path, Char& c);
    public static StringComparer get_StringComparer();
    private static int get_NextRandomNumber();
}
[EditorBrowsableAttribute("1")]
public class Microsoft.TeamFoundation.Common.FileSpecBottomUpComparer : object {
    private sealed virtual override int System.Collections.IComparer.Compare(object x, object y);
    private sealed virtual override int System.Collections.Generic.IComparer<System.String>.Compare(string x, string y);
}
[EditorBrowsableAttribute("1")]
public class Microsoft.TeamFoundation.Common.FileSpecTopDownComparer : object {
    private sealed virtual override int System.Collections.IComparer.Compare(object x, object y);
    private sealed virtual override int System.Collections.Generic.IComparer<System.String>.Compare(string x, string y);
}
[CompilerGeneratedAttribute]
internal static class Microsoft.TeamFoundation.Common.GeneratedVersionInfo : object {
    public static string MajorVersion;
    public static string MinorVersion;
    public static string BuildVersion;
    public static string PatchVersion;
    public static string ProductVersion;
    public static string AssemblyMajorVersion;
    public static string AssemblyMinorVersion;
    public static string AssemblyBuildVersion;
    public static string AssemblyPatchVersion;
    public static string AssemblyVersion;
    public static string FileMajorVersion;
    public static string FileMinorVersion;
    public static string FileBuildVersion;
    public static string FilePatchVersion;
    public static string FileVersion;
    public static string VisualStudioMajorVersion;
    public static string VisualStudioVersion;
    public static string TfsMajorVersion;
    public static string TfsMinorVersion;
    public static string TfsProductVersion;
    public static int TfsUpdateNumber;
    public static string TfsInstallDirectory;
}
public interface Microsoft.TeamFoundation.Common.IDirectoryProxy {
    public abstract virtual bool Exists(string path);
    public abstract virtual DirectoryInfo CreateDirectory(string path);
    public abstract virtual IEnumerable`1<string> EnumerateFiles(string path);
    public abstract virtual IEnumerable`1<string> EnumerateFiles(string path, string searchPattern);
    public abstract virtual String[] GetFiles(string path);
    public abstract virtual void Delete(string path);
}
public interface Microsoft.TeamFoundation.Common.IFileProxy {
    public abstract virtual string ReadAllText(string path);
    public abstract virtual void WriteAllText(string path, string contents);
    public abstract virtual void Copy(string sourceFileName, string destFileName, bool overwrite);
    public abstract virtual void Delete(string path);
}
[EditorBrowsableAttribute("1")]
public class Microsoft.TeamFoundation.Common.Internal.BaseDataSource : object {
    [CompilerGeneratedAttribute]
private PropertyChangedEventHandler PropertyChanged;
    [CompilerGeneratedAttribute]
public sealed virtual void add_PropertyChanged(PropertyChangedEventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_PropertyChanged(PropertyChangedEventHandler value);
    protected void OnPropertyChanged(string name);
}
[EditorBrowsableAttribute("1")]
public static class Microsoft.TeamFoundation.Common.Internal.ComUtils : object {
    public static bool Succeeded(int hr);
    public static bool Failed(int hr);
    public static int ThrowOnFailure(int hr);
    public static int ThrowOnFailure(int hr, Int32[] expectedHRFailure);
}
[ExtensionAttribute]
[EditorBrowsableAttribute("1")]
public static class Microsoft.TeamFoundation.Common.Internal.DateTimeExtensions : object {
    private static double s_minuteInSeconds;
    private static double s_hourInSeconds;
    private static double s_dayInSeconds;
    private static double s_weekInSeconds;
    private static double s_monthInSeconds;
    private static double s_yearInSeconds;
    private static AgoFormatSpec[] s_agoFormatSpecs;
    private static DateTimeExtensions();
    [ExtensionAttribute]
public static string Ago(DateTime date);
    [ExtensionAttribute]
public static string Friendly(DateTime date);
    [ExtensionAttribute]
public static string Friendly(DateTime date, DateTime now);
    [ExtensionAttribute]
public static string RelateToPresent(DateTime startDate);
    [ExtensionAttribute]
public static string RelateToPresent(DateTime startDate, DateTime presentTime);
    private static string FormatTimeSpan(TimeSpan difference);
}
[EditorBrowsableAttribute("1")]
public static class Microsoft.TeamFoundation.Common.Internal.DebugUtil : object {
    private static String[] s_breakCategories;
    private static bool s_breakAlways;
    private static bool s_break;
    private static DebugUtil();
    [ConditionalAttribute("DEBUG")]
[DebuggerHiddenAttribute]
public static void Break();
    [ConditionalAttribute("DEBUG")]
[DebuggerHiddenAttribute]
public static void BreakIf(bool condition);
    [ConditionalAttribute("DEBUG")]
[DebuggerHiddenAttribute]
public static void Break(string category);
    [ConditionalAttribute("DEBUG")]
[DebuggerHiddenAttribute]
public static void BreakIf(string category, bool condition);
    private static void EnsurebreakCategoriesLoaded();
}
[EditorBrowsableAttribute("1")]
public static class Microsoft.TeamFoundation.Common.Internal.FileSystemUtil : object {
    public static string GetUniversalName(string localPath);
}
[EditorBrowsableAttribute("1")]
public class Microsoft.TeamFoundation.Common.Internal.HighResTimer : object {
    private long m_startTime;
    private long m_stopTime;
    private double m_conversionFactor;
    private static double s_defaultConversionFactor;
    public static long TimeStamp { get; }
    public double ConversionFactor { get; public set; }
    public long Duration { get; }
    private static HighResTimer();
    public static long get_TimeStamp();
    public double get_ConversionFactor();
    public void set_ConversionFactor(double value);
    public long get_Duration();
    public void Start();
    public void Reset();
    public void Stop();
    public static long ElapsedTime(long stop, long start);
    private static long diffTime(long stop, long start, double conversionFactor);
}
[EditorBrowsableAttribute("1")]
public static class Microsoft.TeamFoundation.Common.Internal.HostingDiagnosticConstants : object {
    public static string MdsMonitoringAgentFeatureName;
    public static string AllIdentifiersFromBinariesFeatureName;
    public static string DiagnosticRegistryPath;
    public static string ConfigurationChangePollInterval;
    public static string OverallQuotaInMB;
    public static string TfsDiagnosticEnabled;
    public static string DiagnosticLogTransferInterval;
    public static string DiagnosticLogFilterLevel;
    public static string TraceLogTransferInterval;
    public static string TraceLogFilterLevel;
    public static string DirectoriesTransferInterval;
    public static string FullCrashDumps;
    public static string PerformanceCounterTransferInterval;
    public static string PerformanceCounterSampleRate;
    public static string PerformanceCounterDefaultCountersEnabled;
    public static string PerformanceCounterPath;
    public static string Counter;
    public static string CounterSampleRate;
    public static string EventLogTransferInterval;
    public static string EventLogFilterLevel;
    public static string EventLogPath;
    public static string EventLogDefaultDataSourcesEnabled;
    public static string EventLogVsoDataSourcesEnabled;
    public static string DataSource;
    public static string FilterLevel;
    public static string MdsUseDevStorageRegistryPath;
    public static string MdsStorageAccountNameRegistryPath;
    public static string MdsStorageKeyEncryptedRegistryPath;
    public static string MdsStorageKeyEncryptThumbprintRegistryPath;
    public static string MdsTenantNameRegistryPath;
    public static string MdsRoleEnvironmentNameRegistryPath;
    public static string MdsConfigVersionRegistryPathRoot;
    public static string MdsAspDisabledFeatures;
    public static string MdsAspFlighting;
}
[EditorBrowsableAttribute("1")]
public static class Microsoft.TeamFoundation.Common.Internal.HResult : object {
    public static int S_OK;
    public static int S_FALSE;
    public static int E_FAIL;
    public static int E_ABORT;
    public static int E_UNEXPECTED;
    public static int E_NOTIMPL;
    public static int E_OUTOFMEMORY;
    public static int E_INVALIDARG;
    public static int E_NOINTERFACE;
    public static int E_POINTER;
    public static int E_HANDLE;
    public static int E_ACCESSDENIED;
    public static int E_PENDING;
    public static int RPC_E_CALL_REJECTED;
    public static int E_WIN32_ERROR_SHARING_VIOLATION;
    public static int E_WIN32_ERROR_LOCK_VIOLATION;
    public static int E_DS_NO_SUCH_OBJECT;
    public static int E_DS_UNWILLING_TO_PERFORM;
    public static int E_DS_SERVER_NOT_OPERATIONAL;
    public static int E_DS_LOGIN_FAILURE;
    public static int E_DISK_FULL;
    public static bool Succeeded(int hr);
    public static bool Failed(int hr);
    public static bool IsFileInUse(int hr);
}
[ExtensionAttribute]
[EditorBrowsableAttribute("1")]
public static class Microsoft.TeamFoundation.Common.Internal.IServiceProviderExtensions : object {
    [ExtensionAttribute]
public static T GetService(IServiceProvider serviceProvider);
    [ExtensionAttribute]
public static V GetService(IServiceProvider serviceProvider);
}
[EditorBrowsableAttribute("1")]
public static class Microsoft.TeamFoundation.Common.Internal.MD5Util : object {
    private static Byte[] s_nullHash;
    private static int s_fipsAlgorithmPolicyEnabled;
    private static int c_enabled;
    private static int c_disabled;
    private static int c_unknown;
    public static bool CanCreateMD5Provider { get; }
    private static MD5Util();
    public static bool get_CanCreateMD5Provider();
    public static Byte[] CalculateMD5(string fileName);
    public static Byte[] CalculateMD5(Byte[] content);
    public static Byte[] CalculateMD5(Stream stream);
    public static Byte[] CalculateMD5(Stream stream, bool rewind);
    public static MD5 TryCreateMD5Provider();
}
[EditorBrowsableAttribute("1")]
[SecurityCriticalAttribute]
[CLSCompliantAttribute("False")]
public static class Microsoft.TeamFoundation.Common.Internal.NativeMethods : object {
    public static int TRUE;
    public static int FALSE;
    public static UInt32 LOAD_LIBRARY_AS_DATAFILE;
    public static int ERROR_SUCCESS;
    public static int ERROR_FILE_NOT_FOUND;
    public static int ERROR_PATH_NOT_FOUND;
    public static int ERROR_ACCESS_DENIED;
    public static int ERROR_INVALID_HANDLE;
    public static int ERROR_NOT_SAME_DEVICE;
    public static int ERROR_NO_MORE_FILES;
    public static int ERROR_SHARING_VIOLATION;
    public static int ERROR_FILE_EXISTS;
    public static int ERROR_CANNOT_MAKE;
    public static int ERROR_INVALID_PARAMETER;
    public static int ERROR_INSUFFICIENT_BUFFER;
    public static int ERROR_ALREADY_EXISTS;
    public static int ERROR_DIRECTORY;
    public static int ERROR_NOT_CAPABLE;
    public static int ERROR_NO_ASSOCIATION;
    public static int ERROR_NOT_FOUND;
    public static int ERROR_NONE_MAPPED;
    public static int ERROR_CLASS_ALREADY_EXISTS;
    public static int WM_DESTROY;
    public static int WM_MOVE;
    public static int WM_SETFOCUS;
    public static int WM_KILLFOCUS;
    public static int WM_NOTIFY;
    public static int WM_MOUSEACTIVATE;
    public static int WM_PARENTNOTIFY;
    public static int WM_HSCROLL;
    public static int WM_VSCROLL;
    public static int WM_WINDOWPOSCHANGING;
    public static int WM_WINDOWPOSCHANGED;
    public static int WM_GETDLGCODE;
    public static int WM_TIMER;
    public static int WM_MOUSEWHEEL;
    public static int WM_SETREDRAW;
    public static int WM_KEYDOWN;
    public static int WM_KEYUP;
    public static int WM_CHAR;
    public static int WM_SYSKEYDOWN;
    public static int WM_SYSKEYUP;
    public static int WM_SYSCHAR;
    public static int WM_CLOSE;
    public static int WM_COMMAND;
    public static int WM_SYSCOMMAND;
    public static int WM_NCMOUSEMOVE;
    public static int WM_NCLBUTTONDOWN;
    public static int WM_NCMBUTTONDBLCLK;
    public static int WM_NCPAINT;
    public static int WM_PAINT;
    public static int WM_STYLECHANGED;
    public static int WM_ENABLE;
    public static int WM_INITDIALOG;
    public static int WM_SIZE;
    public static int WM_ERASEBKGND;
    public static int WM_USER;
    public static int WM_REFLECT;
    public static int WM_SYSCOLORCHANGE;
    public static int WM_CUT;
    public static int WM_COPY;
    public static int WM_PASTE;
    public static int WM_UNDO;
    public static int WM_PALETTECHANGED;
    public static int WM_THEMECHANGED;
    public static int WM_DISPLAYCHANGE;
    public static int WM_SETTEXT;
    public static int WM_UPDATEUISTATE;
    public static int WM_SETTINGCHANGE;
    public static int WM_NEXTDLGCTL;
    public static int WM_KEYFIRST;
    public static int WM_KEYLAST;
    public static int WM_SETFONT;
    public static int WM_QUERYENDSESSION;
    public static int WM_ENDSESSION;
    public static int WM_SETICON;
    public static int ICON_BIG;
    public static int ICON_SMALL;
    public static int WM_CONTEXTMENU;
    public static int WM_HELP;
    public static int WS_OVERLAPPED;
    public static int WS_BORDER;
    public static int WS_POPUP;
    public static int WS_CHILD;
    public static int WS_VISIBLE;
    public static int WS_TABSTOP;
    public static int WS_EX_CLIENTEDGE;
    public static int WS_EX_TOOLWINDOW;
    public static int WS_EX_TOPMOST;
    public static int WS_EX_CONTEXTHELP;
    public static int WS_EX_DLGMODALFRAME;
    public static int WS_EX_CONTROLPARENT;
    public static int WS_MINIMIZEBOX;
    public static int WS_MAXIMIZEBOX;
    public static int WS_CAPTION;
    public static int VK_RETURN;
    public static int VK_SHIFT;
    public static int VK_CONTROL;
    public static int VK_MENU;
    public static int VK_ESCAPE;
    public static int VK_DELETE;
    public static int VK_F2;
    public static int VK_F10;
    public static int VK_TAB;
    public static int VK_LEFT;
    public static int VK_UP;
    public static int VK_RIGHT;
    public static int VK_DOWN;
    public static int SC_CLOSE;
    public static int SC_RESTORE;
    public static int SC_CONTEXTHELP;
    public static int MF_BYCOMMAND;
    public static int MF_ENABLED;
    public static int MF_GRAYED;
    public static int MF_DISABLED;
    public static int CS_DROPSHADOW;
    public static int SB_HORZ;
    public static int SB_VERT;
    public static UInt32 SIF_TRACKPOS;
    public static UInt32 SIF_POS;
    public static int SW_SHOWNORMAL;
    public static int SW_SHOWNOACTIVATE;
    public static int SW_SHOW;
    public static int SW_SHOWNA;
    public static int GWL_HWNDPARENT;
    public static int GWL_STYLE;
    public static int GWL_EXSTYLE;
    public static int GWL_USERDATA;
    public static int SYSTEM_FONT;
    public static int DEFAULT_GUI_FONT;
    public static int HDM_GETITEMRECT;
    public static int HDM_GETITEM;
    public static int HDM_SETITEM;
    public static int HDF_CHECKBOX;
    public static int HDF_CHECKED;
    public static int HDF_SORTDOWN;
    public static int HDF_SORTUP;
    public static int HDF_IMAGE;
    public static int HDF_BITMAP_ON_RIGHT;
    public static int HDF_STRING;
    public static int HDN_BEGINTRACKA;
    public static int HDN_BEGINTRACKW;
    public static int HDN_ITEMCHANGEDA;
    public static int HDN_ITEMCHANGEDW;
    public static int HDN_ITEMCHANGINGA;
    public static int HDN_ITEMCHANGINGW;
    public static int HDN_ITEMSTATEICONCLICK;
    public static int HDM_SETIMAGELIST;
    public static int HDS_HOTTRACK;
    public static int HDS_CHECKBOXES;
    public static int HDI_WIDTH;
    public static int HDI_FORMAT;
    public static int HDI_IMAGE;
    public static int TTM_SETDELAYTIME;
    public static int TTM_POP;
    public static int TTN_GETDISPINFOW;
    public static int TTDT_AUTOPOP;
    public static int EM_SETCHARFORMAT;
    public static int EM_SETTYPOGRAPHYOPTIONS;
    public static int TO_ADVANCEDTYPOGRAPHY;
    public static int CFE_LINK;
    public static int CFM_LINK;
    public static int CFM_COLOR;
    public static int SCF_SELECTION;
    public static int SCF_ALL;
    public static int EN_LINK;
    public static int EM_GETSEL;
    public static int EM_SETSEL;
    public static int EM_SCROLL;
    public static int EM_SCROLLCARET;
    public static int EM_GETMODIFY;
    public static int EM_SETMODIFY;
    public static int EM_GETLINECOUNT;
    public static int EM_REPLACESEL;
    public static int EM_GETLINE;
    public static int EM_LIMITTEXT;
    public static int EM_CANUNDO;
    public static int EM_UNDO;
    public static int EM_SETPASSWORDCHAR;
    public static int EM_GETPASSWORDCHAR;
    public static int EM_EMPTYUNDOBUFFER;
    public static int EM_SETREADONLY;
    public static int EM_SETMARGINS;
    public static int EM_POSFROMCHAR;
    public static int EM_CHARFROMPOS;
    public static int EM_LINEFROMCHAR;
    public static int EM_LINEINDEX;
    public static int LVM_GETHEADER;
    public static int LVM_SETIMAGELIST;
    public static int LVM_GETITEMCOUNT;
    public static int LVM_GETITEMSTATE;
    public static int LVM_GETCOLUMNWIDTH;
    public static int LVM_GETNEXTITEM;
    public static int LVM_INSERTITEMA;
    public static int LVM_INSERTITEMW;
    public static int LVM_DELETEITEM;
    public static int LVM_DELETEALLITEMS;
    public static int LVM_INSERTCOLUMNA;
    public static int LVM_SETITEMSTATE;
    public static int LVM_INSERTCOLUMNW;
    public static int LVM_GETITEMRECT;
    public static int LVM_ENSUREVISIBLE;
    public static int LVM_SETEXTENDEDLISTVIEWSTYLE;
    public static int LVM_GETSELECTIONMARK;
    public static int LVM_SETSELECTIONMARK;
    public static int LVM_GETITEMW;
    public static int LVM_SETCOLUMN;
    public static int LVM_GETTOOLTIPS;
    public static int LVM_HITTEST;
    public static int LVM_GETEDITCONTROL;
    public static int LVS_ILNORMAL;
    public static int LVS_ILSMALL;
    public static int LVCF_WIDTH;
    public static int LVCF_FMT;
    public static int LVCF_IMAGE;
    public static int LVCFMT_LEFT;
    public static int LVCFMT_IMAGE;
    public static int LVCFMT_BITMAP_ON_RIGHT;
    public static int LVIR_BOUNDS;
    public static int LVN_KEYDOWN;
    public static int LVHT_ONITEMICON;
    public static int LVHT_ONITEMLABEL;
    public static int LVHT_ONITEMSTATEICON;
    public static int LVHT_ONITEM;
    public static int LVIF_STATE;
    public static int LVIS_STATEIMAGEMASK;
    public static int LVIS_FOCUSED;
    public static int LVIS_SELECTED;
    public static int LVIS_DROPHILITED;
    public static int LVS_EX_CHECKBOXES;
    public static int LVS_EX_FULLROWSELECT;
    public static int LVS_EX_ONECLICKACTIVATE;
    public static int LVS_EX_TWOCLICKACTIVATE;
    public static int LVS_EX_DOUBLEBUFFER;
    public static int TVSIL_STATE;
    public static int TV_FIRST;
    public static int TVM_GETITEMRECT;
    public static int TVM_GETINDENT;
    public static int TVM_GETIMAGELIST;
    public static int TVM_SETIMAGELIST;
    public static int TVM_SELECTITEM;
    public static int TVM_SETITEM;
    public static int TVM_GETEDITCONTROL;
    public static int TVM_HITTEST;
    public static int TVM_GETTOOLTIPS;
    public static int TVM_GETITEMSTATE;
    public static int TVM_SETEXTENDEDSTYLE;
    public static int TVM_GETEXTENDEDSTYLE;
    public static int TVM_GETITEM;
    public static int TVS_FULLROWSELECT;
    public static int TVS_EX_FADEINOUTEXPANDOS;
    public static int TVS_EX_DOUBLEBUFFER;
    public static int TVIF_HANDLE;
    public static int TVIF_STATE;
    public static int TVIF_CHILDREN;
    public static int TVIS_STATEIMAGEMASK;
    public static int TVIS_EXPANDED;
    public static int TVHitOnItemIcon;
    public static int TVHitOnItemLabel;
    public static int NM_CLICK;
    public static int NM_DBLCLK;
    public static int TVGN_DROPHILITE;
    public static int TVGN_CARET;
    public static int TVHitOnItemStateIcon;
    public static int I_CHILDRENCALLBACK;
    public static int NM_CUSTOMDRAW;
    public static int CDRF_NOTIFYITEMDRAW;
    public static int CDRF_NOTIFYSUBITEMDRAW;
    public static int CDRF_NOTIFYPOSTPAINT;
    public static int CDRF_SKIPDEFAULT;
    public static int CDRF_DODEFAULT;
    public static int CDRF_NEWFONT;
    public static int CDRF_NOTIFYPOSTERASE;
    public static int CDDS_PREPAINT;
    public static int CDDS_POSTPAINT;
    public static int CDDS_ITEM;
    public static int CDDS_ITEMPREPAINT;
    public static int CDDS_ITEMPOSTPAINT;
    public static int CDDS_SUBITEM;
    public static int CDDS_PREERASE;
    public static int CDDS_POSTERASE;
    public static UInt32 CDIS_SELECTED;
    public static UInt32 CDIS_DISABLED;
    public static UInt32 CDIS_FOCUS;
    public static UInt32 CDIS_HOT;
    public static int LB_SETSEL;
    public static int LB_GETANCHORINDEX;
    public static int LB_SETANCHORINDEX;
    public static int SWP_NOACTIVATE;
    public static int SWP_NOSIZE;
    public static int SWP_NOMOVE;
    public static int SWP_NOZORDER;
    public static int SWP_ASYNCWINDOWPOS;
    public static int SWP_DEFERERASE;
    public static int SWP_NOCOPYBITS;
    public static HandleRef HWND_BOTTOM;
    public static int HWND_TOPMOST;
    public static int HTCAPTION;
    public static int PM_NOREMOVE;
    public static int PM_REMOVE;
    public static int PM_NOYIELD;
    public static int SERVERCALL_ISHANDLED;
    public static int PENDINGMSG_WAITDEFPROCESS;
    public static int EC_LEFTMARGIN;
    public static int EC_RIGHTMARGIN;
    public static int WS_EX_RIGHT;
    public static int DT_SINGLELINE;
    public static int DT_CALCRECT;
    public static int DT_PATH_ELLIPSIS;
    public static int DT_END_ELLIPSIS;
    public static int DT_MODIFYSTRING;
    public static int HTSYSMENU;
    public static int HTCLOSE;
    public static int STD_INPUT_HANDLE;
    public static int STD_OUTPUT_HANDLE;
    public static int STD_ERROR_HANDLE;
    public static int FILE_TYPE_CHAR;
    public static int MAX_PATH;
    public static int CSIDL_DESKTOP;
    public static int BFFM_INITIALIZED;
    public static int BFFM_SELCHANGED;
    public static int BFFM_SETSELECTIONA;
    public static int BFFM_SETSELECTIONW;
    public static int BFFM_ENABLEOK;
    internal static int BFFM_SETSELECTION;
    public static IntPtr INVALID_HANDLE_VALUE;
    public static int WM_MOUSEMOVE;
    public static int WM_LBUTTONDOWN;
    public static int WM_LBUTTONUP;
    public static int WM_LBUTTONDBLCLK;
    public static int WM_RBUTTONDOWN;
    public static int WM_RBUTTONUP;
    public static int WM_RBUTTONDBLCLK;
    public static int WM_MBUTTONDOWN;
    public static int WM_MBUTTONUP;
    public static int WM_MBUTTONDBLCLK;
    public static int WM_XBUTTONDOWN;
    public static int WM_XBUTTONUP;
    public static int WM_XBUTTONDBLCLK;
    public static int WM_MOUSELAST;
    public static int WM_CANCELMODE;
    public static int MA_ACTIVATE;
    public static int MA_ACTIVATEANDEAT;
    public static int MA_NOACTIVATE;
    public static int MA_NOACTIVATEANDEAT;
    public static int UIS_SET;
    public static int UIS_CLEAR;
    public static int UIS_INITIALIZE;
    public static int UISF_HIDEFOCUS;
    public static int UISF_HIDEACCEL;
    public static int LOGPIXELSX;
    public static int LOGPIXELSY;
    public static UInt32 FILE_SUPPORTS_HARD_LINKS;
    public static UInt32 INVALID_FILE_ATTRIBUTES;
    internal static UInt32 FILE_ATTRIBUTE_READONLY;
    internal static UInt32 FILE_ATTRIBUTE_NORMAL;
    private static int FSCTL_GET_COMPRESSION;
    private static int FSCTL_SET_COMPRESSION;
    public static UInt32 COPY_FILE_NO_BUFFERING;
    public static int AF_INET;
    public static int AF_INET6;
    private static int FO_MOVE;
    private static int FO_COPY;
    private static int FO_DELETE;
    private static int FO_RENAME;
    private static int FOF_MULTIDESTFILES;
    private static int FOF_CONFIRMMOUSE;
    private static int FOF_SILENT;
    private static int FOF_RENAMEONCOLLISION;
    private static int FOF_NOCONFIRMATION;
    private static int FOF_WANTMAPPINGHANDLE;
    private static int FOF_ALLOWUNDO;
    private static int FOF_FILESONLY;
    private static int FOF_SIMPLEPROGRESS;
    private static int FOF_NOCONFIRMMKDIR;
    private static int FOF_NOERRORUI;
    private static int FOF_NOCOPYSECURITYATTRIBS;
    private static int FOF_NORECURSION;
    private static int FOF_NO_CONNECTED_ELEMENTS;
    private static int FOF_WANTNUKEWARNING;
    private static int FOF_NORECURSEREPARSE;
    public static int SPI_GETFOREGROUNDFLASHCOUNT;
    public static int FLASHW_STOP;
    public static int FLASHW_CAPTION;
    public static int FLASHW_TRAY;
    public static int FLASHW_ALL;
    public static int FLASHW_TIMER;
    public static int FLASHW_TIMERNOFG;
    public static int GW_HWNDFIRST;
    public static int GW_HWNDLAST;
    public static int GW_HWNDNEXT;
    public static int GW_HWNDPREV;
    public static int GW_OWNER;
    public static int GW_CHILD;
    public static int SHACF_FILESYSTEM;
    public static int SHACF_FILESYS_DIRS;
    public static int SHACF_AUTOSUGGEST_FORCE_ON;
    public static int SHACF_USETAB;
    public static int SHACF_AUTOAPPEND_FORCE_ON;
    public static int ShgfiIcon;
    public static int ShgfiLargeIcon;
    public static int ShgfiOpenIcon;
    public static int ShgfiSelected;
    public static int ShgfiShellIconSize;
    public static int ShgfiSmallIcon;
    public static int ShgfiSysIconIndex;
    public static int ShgfiTypeName;
    public static int ShgfiUseFileAttributes;
    public static int SHELL_NO_REGISTERED_APP_FOR_FILE_OR_VERB;
    public static int SE_ERR_NOASSOC;
    public static int SEE_MASK_INVOKEIDLIST;
    public static int SEE_MASK_FLAG_NO_UI;
    public static int ILD_TRANSPARENT;
    private static int FORMAT_MESSAGE_FROM_SYSTEM;
    public static int AUTHZ_RM_FLAG_NO_AUDIT;
    public static int FILE_PERSISTENT_ACLS;
    public static int DWL_MSGRESULT;
    public static int IDOK;
    public static int PSHHELP;
    public static int CDM_FIRST;
    public static int CDM_GETFILEPATH;
    public static int CDM_GETFOLDERPATH;
    public static int CDM_GETFOLDERIDLIST;
    public static int CDM_SETCONTROLTEXT;
    public static int CDM_HIDECONTROL;
    public static int CDM_SETDEFEXT;
    public static int CDN_FIRST;
    public static int CDN_LAST;
    public static int CDN_INITDONE;
    public static int CDN_SELCHANGE;
    public static int CDN_FOLDERCHANGE;
    public static int CDN_SHAREVIOLATION;
    public static int CDN_HELP;
    public static int CDN_FILEOK;
    public static int CDN_TYPECHANGE;
    public static int CDN_INCLUDEITEM;
    public static int CBN_DROPDOWN;
    internal static UInt32 OFN_READONLY;
    internal static UInt32 OFN_OVERWRITEPROMPT;
    internal static UInt32 OFN_HIDEREADONLY;
    internal static UInt32 OFN_NOCHANGEDIR;
    internal static UInt32 OFN_SHOWHELP;
    internal static UInt32 OFN_ENABLEHOOK;
    internal static UInt32 OFN_ENABLETEMPLATE;
    internal static UInt32 OFN_ENABLETEMPLATEHANDLE;
    internal static UInt32 OFN_NOVALIDATE;
    internal static UInt32 OFN_ALLOWMULTISELECT;
    internal static UInt32 OFN_EXTENSIONDIFFERENT;
    internal static UInt32 OFN_PATHMUSTEXIST;
    internal static UInt32 OFN_FILEMUSTEXIST;
    internal static UInt32 OFN_CREATEPROMPT;
    internal static UInt32 OFN_SHAREAWARE;
    internal static UInt32 OFN_NOREADONLYRETURN;
    internal static UInt32 OFN_NOTESTFILECREATE;
    internal static UInt32 OFN_NONETWORKBUTTON;
    internal static UInt32 OFN_NOLONGNAMES;
    internal static UInt32 OFN_EXPLORER;
    internal static UInt32 OFN_NODEREFERENCELINKS;
    internal static UInt32 OFN_LONGNAMES;
    internal static UInt32 OFN_ENABLEINCLUDENOTIFY;
    internal static UInt32 OFN_ENABLESIZING;
    internal static UInt32 OFN_DONTADDTORECENT;
    internal static UInt32 OFN_FORCESHOWHIDDEN;
    internal static UInt32 OFN_EX_NOPLACESBAR;
    public static ushort KeyDownFlag;
    internal static int UNIVERSAL_NAME_INFO_LEVEL;
    public static int CRYPT_ACQUIRE_CACHE_FLAG;
    public static int CRYPT_ACQUIRE_USE_PROV_INFO_FLAG;
    public static int CRYPT_ACQUIRE_COMPARE_KEY_FLAG;
    public static int CRYPT_ACQUIRE_NO_HEALING;
    public static int CRYPT_ACQUIRE_SILENT_FLAG;
    public static int CRYPT_ACQUIRE_WINDOW_HANDLE_FLAG;
    public static int CRYPT_ACQUIRE_NCRYPT_KEY_FLAGS_MASK;
    public static int CRYPT_ACQUIRE_ALLOW_NCRYPT_KEY_FLAG;
    public static int CRYPT_ACQUIRE_PREFER_NCRYPT_KEY_FLAG;
    public static int CRYPT_ACQUIRE_ONLY_NCRYPT_KEY_FLAG;
    public static string NCRYPT_LENGTH_PROPERTY;
    public static int NTE_BAD_KEYSET;
    public static int NTE_SILENT_CONTEXT;
    public static int SCARD_E_NO_SMARTCARD;
    public static string LEGACY_RSAPRIVATE_BLOB;
    public static string LEGACY_RSAPUBLIC_BLOB;
    public static byte PRIVATEKEYBLOB;
    public static byte PUBLICKEYBLOB;
    public static string BCRYPT_RSA_ALGORITHM;
    public static int NTE_BAD_SIGNATURE;
    public static int NTE_BUFFER_TOO_SMALL;
    public static int BCRYPT_PAD_PKCS1;
    public static int BCRYPT_PAD_OAEP;
    public static int ERROR_MORE_DATA;
    public static UInt32 CRED_TYPE_GENERIC;
    public static UInt32 CRED_TYPE_DOMAIN_PASSWORD;
    public static int CREDUI_FLAGS_INCORRECT_PASSWORD;
    public static int CREDUI_FLAGS_DO_NOT_PERSIST;
    public static int CREDUI_FLAGS_REQUEST_ADMINISTRATOR;
    public static int CREDUI_FLAGS_EXCLUDE_CERTIFICATES;
    public static int CREDUI_FLAGS_REQUIRE_CERTIFICATE;
    public static int CREDUI_FLAGS_SHOW_SAVE_CHECK_BOX;
    public static int CREDUI_FLAGS_ALWAYS_SHOW_UI;
    public static int CREDUI_FLAGS_REQUIRE_SMARTCARD;
    public static int CREDUI_FLAGS_PASSWORD_ONLY_OK;
    public static int CREDUI_FLAGS_VALIDATE_USERNAME;
    public static int CREDUI_FLAGS_COMPLETE_USERNAME;
    public static int CREDUI_FLAGS_PERSIST;
    public static int CREDUI_FLAGS_SERVER_CREDENTIAL;
    public static int CREDUI_FLAGS_EXPECT_CONFIRMATION;
    public static int CREDUI_FLAGS_GENERIC_CREDENTIALS;
    public static int CREDUI_FLAGS_USERNAME_TARGET_CREDENTIALS;
    public static int CREDUI_FLAGS_KEEP_USERNAME;
    public static int CRED_PACK_PROTECTED_CREDENTIALS;
    public static int NO_ERROR;
    public static int CREDUI_MAX_USERNAME_LENGTH;
    public static int CREDUI_MAX_PASSWORD_LENGTH;
    public static int CREDUI_MAX_CAPTION_LENGTH;
    public static int CREDUI_MAX_MESSAGE_LENGTH;
    public static int CREDUIWIN_CHECKBOX;
    public static int CREDUIWIN_AUTHPACKAGE_ONLY;
    public static int CRED_PERSIST_LOCAL_MACHINE;
    public static UInt32 SERVICE_NO_CHANGE;
    public static long ERROR_SERVICE_DATABASE_LOCKED;
    public static long ERROR_INVALID_SERVICE_ACCOUNT;
    public static int GENERIC_WRITE;
    public static int SERVICE_WIN32_OWN_PROCESS;
    public static int WRITE_OWNER;
    public static int WRITE_DAC;
    public static int READ_CONTROL;
    public static int DELETE;
    public static int SERVICE_ERROR_NORMAL;
    public static int STANDARD_RIGHTS_REQUIRED;
    public static int SERVICE_AUTO_START;
    public static UInt32 LSA_POLICY_ALL_ACCESS;
    public static UInt32 LOGON32_LOGON_INTERACTIVE;
    public static UInt32 LOGON32_LOGON_NETWORK;
    public static UInt32 LOGON32_LOGON_BATCH;
    public static UInt32 LOGON32_LOGON_SERVICE;
    public static UInt32 LOGON32_LOGON_UNLOCK;
    public static UInt32 LOGON32_PROVIDER_DEFAULT;
    public static UInt32 CREATE_UNICODE_ENVIRONMENT;
    public static UInt32 CREATE_NO_WINDOW;
    public static UInt32 CTRL_C_EVENT;
    public static UInt32 CTRL_BREAK_EVENT;
    public static int STGM_DIRECT;
    public static int STGM_TRANSACTED;
    public static int STGM_SIMPLE;
    public static int STGM_READ;
    public static int STGM_WRITE;
    public static int STGM_READWRITE;
    public static int STGM_SHARE_DENY_NONE;
    public static int STGM_SHARE_DENY_READ;
    public static int STGM_SHARE_DENY_WRITE;
    public static int STGM_SHARE_EXCLUSIVE;
    public static int STGM_PRIORITY;
    public static int STGM_DELETEONRELEASE;
    public static int STGM_CREATE;
    public static int STGM_CONVERT;
    public static int STGM_FAILIFTHERE;
    public static int STGM_NOSCRATCH;
    public static int STGM_NOSNAPSHOT;
    public static int STGM_DIRECT_SWMR;
    public static int FIND_FIRST_EX_CASE_SENSITIVE;
    public static int FIND_FIRST_EX_LARGE_FETCH;
    public static UInt32 STATUS_DELETE_PENDING;
    public static int FILE_ACTION_ADDED;
    public static int FILE_ACTION_REMOVED;
    public static int FILE_ACTION_MODIFIED;
    public static int FILE_ACTION_RENAMED_OLD_NAME;
    public static int FILE_ACTION_RENAMED_NEW_NAME;
    public static int FILE_NOTIFY_CHANGE_FILE_NAME;
    public static int FILE_NOTIFY_CHANGE_DIR_NAME;
    public static int FILE_NOTIFY_CHANGE_ATTRIBUTES;
    public static int FILE_NOTIFY_CHANGE_SIZE;
    public static int FILE_NOTIFY_CHANGE_LAST_WRITE;
    public static int FILE_NOTIFY_CHANGE_SECURITY;
    public static UInt32 DRIVE_REMOVABLE;
    public static UInt32 DRIVE_FIXED;
    public static UInt32 INTERNET_COOKIE_EVALUATE_P3P;
    public static bool IsWow64 { get; }
    private static NativeMethods();
    public static IntPtr GetComboBoxInfo(HandleRef hWnd, COMBOBOXINFO pComboboxInfo);
    public static int GetDeviceCaps(IntPtr hdc, int nIndex);
    public static IntPtr GetLastActivePopup(IntPtr hwnd);
    public static bool ZeroMemory(IntPtr Destination, int Length);
    public static bool IsWow64Process(IntPtr hProcess, Boolean& lpSystemInfo);
    public static bool get_IsWow64();
    public static bool CreateHardLink(string lpFileName, string lpExistingFileName, IntPtr lpSecurityAttributes);
    public static bool GetVolumeInformation(string lpRootPathName, IntPtr lpVolumeNameBuffer, UInt32 nVolumeNameSize, IntPtr lpVolumeSerialNumber, IntPtr lpMaximumComponentLength, UInt32& lpFileSystemFlags, IntPtr lpFileSystemNameBuffer, UInt32 nFileSystemNameSize);
    public static SafeFileHandle CreateFile(string lpFileName, FileAccess dwDesiredAccess, FileShare dwShareMode, IntPtr lpSecurityAttributes, CreationDisposition dwCreationDisposition, FileAttributes dwFlagsAndAttributes, IntPtr hTemplateFile);
    public static bool DeleteFile(string lpFileName);
    internal static bool RemoveDirectory(string lpPathName);
    public static bool FlushFileBuffers(SafeFileHandle hFile);
    public static UInt32 GetFileAttributes(string lpFileName);
    public static bool SetFileAttributes(string lpFileName, UInt32 dwFileAttributes);
    public static bool GetFileAttributesEx(string name, GET_FILEEX_INFO_LEVELS fileInfoLevel, WIN32_FILE_ATTRIBUTE_DATA& lpFileInformation);
    private static bool DeviceIoControl(SafeHandle hDevice, UInt32 dwIoControlCode, IntPtr lpInBuffer, UInt32 nInBufferSize, Int16& lpOutBuffer, UInt32 nOutBufferSize, UInt32& lpBytesReturned, IntPtr lpOverlapped);
    private static bool DeviceIoControl(SafeHandle hDevice, UInt32 dwIoControlCode, Int16& lpInBuffer, UInt32 nInBufferSize, IntPtr lpOutBuffer, UInt32 nOutBufferSize, UInt32& lpBytesReturned, IntPtr lpOverlapped);
    internal static short GetFileCompression(SafeHandle handle);
    internal static void SetFileCompression(SafeHandle handle, short compressionFormat);
    public static bool MoveFile(string src, string dst);
    public static bool MoveFileEx(string src, string dst, int dwFlags);
    public static bool CopyFileEx(string lpExistingFileName, string lpNewFileName, IntPtr lpProgressRoutine, IntPtr lpData, IntPtr pbCancel, UInt32 dwCopyFlags);
    public static UInt32 WSAStartup(short wVersionRequested, WsaData& lpWsaData);
    public static UInt32 WSAStringToAddressW(string addressString, int addressFamily, IntPtr lpProtocolInfo, SOCKADDR_IN6& lpAddress, Int32& lpAddressLength);
    public static UInt32 WSAStringToAddressW(string addressString, int addressFamily, IntPtr lpProtocolInfo, SOCKADDR_IN& lpAddress, Int32& lpAddressLength);
    public static bool SetWindowText(HandleRef hWnd, string text);
    public static bool MoveWindow(HandleRef hWnd, int X, int Y, int Width, int Height, bool repaint);
    public static bool ReleaseCapture();
    public static bool SetWindowPos(IntPtr hWnd, int hWndInsertAfter, int X, int Y, int cx, int cy, int uFlags);
    public static bool ShowScrollBar(IntPtr hWnd, int wBar, bool bShow);
    public static IntPtr GetDlgItem(HandleRef hWndDlg, int Id);
    public static int SHGetSpecialFolderLocation(IntPtr hwnd, int csidl, IntPtr& ppidl);
    public static bool SHGetPathFromIDList(IntPtr pidl, IntPtr pszPath);
    public static IntPtr SHBrowseForFolder(BROWSEINFO& lpbi);
    private static int SHFileOperationW(SHFILEOPSTRUCT& fileOp);
    public static int SHFileOperationDelete(string path);
    public static int SHFileOperationDelete(string path, bool recycle);
    public static int SHFileOperationDelete(String[] paths, bool recycle);
    public static IntPtr GetStockObject(int nIndex);
    public static int FlashWindowEx(FLASHWINFO& fwi);
    public static short RegisterClass(WNDCLASS wc);
    public static bool UnregisterClass(string lpClassName, IntPtr hInstance);
    private static int GetClassName(IntPtr hwnd, StringBuilder lpClassName, int nMaxCount);
    public static string GetClassName(IntPtr hwnd);
    public static IntPtr CreateWindowEx(int dwExStyle, string lpszClassName, string lpszWindowName, int style, int x, int y, int width, int height, IntPtr hWndParent, IntPtr hMenu, IntPtr hInst, object pvParam);
    public static bool DestroyWindow(IntPtr hWnd);
    public static IntPtr SetTimer(HandleRef hWnd, int nIDEvent, int uElapse, IntPtr lpTimerFunc);
    public static bool KillTimer(HandleRef hwnd, int idEvent);
    public static bool SystemParametersInfo(int nAction, int nParam, Int32& value, int ignore);
    public static IntPtr GetForegroundWindow();
    public static bool GetCursorPos(POINT& lpPoint);
    public static IntPtr GetModuleHandle(string modName);
    private static int GetModuleFileName(IntPtr hModule, StringBuilder lpFilename, int nSize);
    public static string GetModuleFileName();
    public static string GetModuleFileName(IntPtr hModule);
    public static bool QueryFullProcessImageName(IntPtr hProcess, int dwFlags, StringBuilder lpFilename, Int32& nSize);
    public static IntPtr GetConsoleWindow();
    public static bool PeekConsoleInput(IntPtr hConsoleInput, IntPtr buffer, UInt32 numInputRecords, UInt32& numEventsRead);
    public static bool WriteConsole(IntPtr hConsoleOutput, Char* text, UInt32 numCharsToWrite, UInt32& numCharsWritten, IntPtr mustBeZero);
    public static bool WriteConsole(IntPtr hConsoleOutput, Char[] chars);
    public static bool WriteConsole(IntPtr hConsoleOutput, Char[] chars, int charsToWrite);
    public static bool WriteConsole(IntPtr hConsoleOutput, Char[] chars, int charsToWrite, UInt32& numCharsWritten);
    public static bool WriteFile(IntPtr handle, Byte* bytes, int numBytesToWrite, UInt32& numBytesWritten, IntPtr mustBeZero);
    public static bool WriteFile(IntPtr handle, Char[] chars);
    public static bool WriteFile(IntPtr handle, Char[] chars, int numCharsToWrite);
    public static bool WriteFile(IntPtr handle, Char[] chars, int numCharsToWrite, UInt32& numCharsWritten);
    public static bool WriteFile(IntPtr handle, Byte[] bytes);
    public static bool WriteFile(IntPtr handle, Byte[] bytes, int numBytesToWrite);
    public static bool WriteFile(IntPtr handle, Byte[] bytes, int numBytesToWrite, UInt32& numBytesWritten);
    public static IntPtr GetSystemMenu(HandleRef hwnd, bool bRevert);
    public static bool EnableMenuItem(HandleRef hMenu, UInt32 uIDEnableItem, UInt32 uEnable);
    public static IntPtr GetStdHandle(int nStdHandle);
    public static int GetFileType(IntPtr handle);
    public static bool CloseHandle(IntPtr handle);
    public static ushort GetSystemDefaultLangID();
    public static IntPtr GetFocus();
    public static IntPtr SetFocus(HandleRef hWnd);
    public static IntPtr SetFocus(IntPtr hWnd);
    public static int SetForegroundWindow(IntPtr hwnd);
    public static bool IsWindow(IntPtr hwnd);
    public static bool IsWindowVisible(IntPtr hwnd);
    public static IntPtr GetActiveWindow();
    public static IntPtr SetActiveWindow(IntPtr hwnd);
    public static int EnumThreadWindows(UInt32 dwThreadId, EnumWindowsProc lpEnumFunc, IntPtr lParam);
    internal static int EnumChildWindows(IntPtr hWndParent, EnumWindowsProc lpEnumFunc, IntPtr lParam);
    public static int EnumWindows(EnumWindowsProc lpEnumFunc, IntPtr lParam);
    public static bool ShowWindow(IntPtr hWnd, int flags);
    public static bool ShowWindow(HandleRef hWnd, int nCmdShow);
    public static bool IsWindowEnabled(IntPtr hWnd);
    public static bool EnableWindow(IntPtr hWnd, bool bEnable);
    internal static bool UpdateWindow(HandleRef hWnd);
    public static IntPtr SendMessage(HandleRef hWnd, int msg, IntPtr wParam, IntPtr lParam);
    public static IntPtr SendMessage(HandleRef hWnd, int msg, IntPtr wParam, HDITEM& lParam);
    public static IntPtr SendMessage(HandleRef hWnd, int msg, IntPtr wParam, RECT& rect);
    public static IntPtr SendMessage(HandleRef hWnd, int msg, IntPtr wparam, StringBuilder lparam);
    public static IntPtr SendMessage(HandleRef hWnd, int msg, IntPtr wParam, LVITEM_NOTEXT& lParam);
    public static IntPtr SendMessage(HandleRef hWnd, int msg, IntPtr wparam, string lparam);
    public static IntPtr SendMessage(HandleRef hWnd, int msg, IntPtr wParam, LVHITTESTINFO& lParam);
    public static IntPtr SendMessage(IntPtr hWnd, int msg, IntPtr wParam, IntPtr lParam);
    public static IntPtr SendMessage(IntPtr hWnd, int msg, int wParam, int lParam);
    public static IntPtr SendMessage(IntPtr hWnd, int msg, IntPtr wParam, LVITEM& lParam);
    public static IntPtr SendMessage(IntPtr hWnd, int msg, IntPtr wParam, TVITEM& lParam);
    public static IntPtr SendMessage(IntPtr hWnd, int msg, IntPtr wParam, TV_HITTESTINFO& lParam);
    public static IntPtr SendMessageW(IntPtr hWnd, int msg, IntPtr wParam, IntPtr lParam);
    public static IntPtr SendMessage(object control, IntPtr handle, int msg, int wParam, int lParam);
    public static int PostMessage(HandleRef hWnd, int msg, IntPtr wParam, IntPtr lParam);
    public static IntPtr GetWindowLong(HandleRef hWnd, int nIndex);
    public static IntPtr GetWindowLong(IntPtr hWnd, int nIndex);
    public static IntPtr SetWindowLong(HandleRef hWnd, int nIndex, HandleRef dwNewLong);
    public static IntPtr SetWindowLong(IntPtr hWnd, int nIndex, IntPtr dwNewLong);
    public static bool SetWindowPos(HandleRef hWnd, HandleRef hWndInsertAfter, int x, int y, int cx, int cy, int flags);
    public static int SetWindowRgn(IntPtr hWnd, IntPtr hRgn, bool bRedraw);
    public static IntPtr CreateRectRgn(int nLeftRect, int nTopRect, int nRightRect, int nBottomRect);
    private static IntPtr _WindowFromPoint(POINTSTRUCT pt);
    public static IntPtr WindowFromPoint(int x, int y);
    public static bool IsChild(IntPtr hWndParent, IntPtr hWnd);
    public static IntPtr GetParent(HandleRef window);
    public static IntPtr GetParent(IntPtr window);
    public static IntPtr GetAncestor(HandleRef window, GetAncestorFlags flags);
    public static IntPtr GetWindowDC(HandleRef hwnd);
    public static int ReleaseDC(HandleRef hwnd, HandleRef hdc);
    public static bool GetWindowRect(HandleRef hwnd, RECT& rect);
    public static bool GetClientRect(HandleRef hwnd, RECT& rect);
    public static int GetClientRect(IntPtr hWnd, RECT& rc);
    public static bool ScreenToClient(HandleRef hWnd, POINT& pt);
    public static int CoRegisterMessageFilter(IOleMessageFilter newFilter, IntPtr& oldMsgFilter);
    public static int CoRegisterMessageFilter(HandleRef handle, IntPtr& oldMsgFilter);
    public static int GetRunningObjectTable(UInt32 reserved, IRunningObjectTable& pprot);
    public static int CreateBindCtx(UInt32 reserved, IBindCtx& pctx);
    public static int ProgIDFromCLSID(Guid& clsid, IntPtr& lplpszProgID);
    public static int RegisterWindowMessage(string msg);
    public static bool DestroyIcon(IntPtr hIcon);
    public static IntPtr SelectObject(IntPtr hdc, IntPtr hObject);
    public static bool DeleteObject(IntPtr hObject);
    public static IntPtr SetParent(IntPtr hWndChild, IntPtr hWndNewParent);
    public static int WaitForInputIdle(IntPtr hProcess, int dwMilliseconds);
    public static IntPtr GetWindow(HandleRef hWnd, int uCmd);
    public static IntPtr GetWindow(IntPtr hWnd, int wCmd);
    public static int GetCaretPos(POINT& lpPoint);
    public static bool InvalidateRect(HandleRef hWnd, RECT& rect, bool erase);
    public static IntPtr SetCursor(HandleRef hcursor);
    public static int DrawTextExW(IntPtr hDC, StringBuilder lpszString, int nCount, RECT& lpRect, int nFormat, DRAWTEXTPARAMS lpDTParams);
    public static IntPtr GetDC(IntPtr hWnd);
    public static int ReleaseDC(IntPtr hWnd, IntPtr hDC);
    public static int GetListViewColumnWidth(HandleRef hwnd, int column);
    public static int SHAutoComplete(IntPtr hwndEdit, int dwFlags);
    public static long StrFormatByteSize(long qdw, StringBuilder pszBuf, int cchBuf);
    private static UInt32 GetTempFileName(string tmpPath, string prefix, UInt32 uniqueIdOrZero, StringBuilder tmpFileName);
    internal static string GetTempFileName(string tmpPath, string prefix, UInt32 uniqueIdOrZero);
    public static IntPtr SHGetFileInfoW(string pszPath, int dwFileAttributes, ShFileInfoW& psfi, int cbSizeFileInfo, int uFlags);
    public static IntPtr ShellExecute(IntPtr hParentWnd, string operation, string file, string parameters, string directory, int showCmd);
    public static bool ShellExecuteEx(ShellExecuteInfo& execInfo);
    public static IntPtr ImageList_GetIcon(IntPtr hImageList, int index, UInt32 flags);
    public static int ImageList_GetIconSize(IntPtr himage, Int32& cx, Int32& cy);
    public static int ImageList_GetImageCount(IntPtr hImageList);
    public static int ImageList_ReplaceIcon(IntPtr hImageList, int index, IntPtr hicon);
    internal static bool ImageList_GetImageInfo(IntPtr hImageList, int index, IMAGEINFO& imageInfo);
    internal static int ImageList_Add(IntPtr hImageList, IntPtr bmImage, IntPtr bmMask);
    public static int ImageList_Destroy(IntPtr hImageList);
    public static bool GetScrollInfo(IntPtr hWnd, int fnBar, SCROLLINFO& si);
    public static bool PeekMessage(MSG& msg, IntPtr hwnd, UInt32 filterMin, UInt32 filterMax, bool removeMsg);
    public static IntPtr DispatchMessage(MSG& msg);
    public static IntPtr ImageList_Duplicate(IntPtr himageListSource);
    public static int LoadString(IntPtr hInstance, UInt32 uID, StringBuilder lpBuffer, int nBufferMax);
    public static bool FreeLibrary(IntPtr hModule);
    public static int GetWindowText(IntPtr hWnd, StringBuilder lpString, int nMaxCount);
    public static bool MessageBeep(UInt32 uType);
    public static int GetCurrentThreadId();
    public static IntPtr GetCurrentThread();
    public static bool SetThreadPriority(IntPtr hThread, int nPriority);
    public static void OutputDebugString(string s);
    private static int FormatMessage(UInt32 dwFlags, IntPtr lpSource, UInt32 dwMessageId, int dwLanguageId, StringBuilder lpBuffer, int nSize, IntPtr Arguments);
    public static string FormatError(int number);
    public static bool PathIsDirectoryEmpty(string path);
    private static UInt32 GetLengthSid(Void* pSid);
    private static bool LookupAccountName(string systemName, string accountName, Void* psid, UInt32& sidSize, StringBuilder domainName, UInt32& domainLength, AccountType& accountType);
    private static bool LookupAccountSid(string systemName, Byte[] psid, StringBuilder accountName, UInt32& nameLength, StringBuilder domainName, UInt32& domainLength, AccountType& accountType);
    private static bool LookupAccountSid(string systemName, IntPtr psid, StringBuilder accountName, UInt32& nameLength, StringBuilder domainName, UInt32& domainLength, AccountType& accountType);
    public static Byte[] NameToSid(string accountName);
    public static Byte[] NameToSid(string accountName, String& domainName, AccountType& accountType);
    public static string SidToName(IntPtr sid, String& domainName, AccountType& accountType);
    public static string SidToName(Byte[] sid, String& domainName, AccountType& accountType);
    public static bool GetVolumeInformation(string lpRootPathName, StringBuilder lpVolumeNameBuffer, int nVolumeNameSize, UInt32& lpVolumeSerialNumber, UInt32& lpMaximumComponentLength, UInt32& lpFileSystemFlags, StringBuilder lpFileSystemNameBuffer, int nFileSystemNameSize);
    public static IntPtr CreateJobObject(SECURITY_ATTRIBUTES& lpJobAttributes, string lpName);
    public static bool AssignProcessToJobObject(SafeHandle hJob, SafeHandle hProcess);
    public static IntPtr OpenProcess(UInt32 dwDesiredAccess, bool bInheritHandle, UInt32 dwProcessId);
    public static bool TerminateJobObject(SafeHandle hJob, UInt32 uExitCode);
    private static int StringFromGUID2(IntPtr pguid, StringBuilder lpsz, int cchMax);
    public static Guid GuidFromNativePtr(IntPtr pguid);
    public static DS_NAME_RESULT_ITEM[] DsCrackNames(IntPtr hDS, DS_NAME_FLAGS flags, DS_NAME_FORMAT formatOffered, DS_NAME_FORMAT formatDesired, String[] names);
    public static UInt32 DsCrackNames(IntPtr hDS, DS_NAME_FLAGS flags, DS_NAME_FORMAT formatOffered, DS_NAME_FORMAT formatDesired, UInt32 cNames, String[] rpNames, IntPtr& ppResult);
    public static UInt32 DsGetSiteName(string ComputerName, String& SiteName);
    public static void DsFreeNameResult(IntPtr pResult);
    public static UInt32 DsBind(string DomainControllerName, string DnsDomainName, IntPtr& phDS);
    public static UInt32 DsUnBind(IntPtr& phDS);
    public static ushort GetKeyState(short key);
    private static bool GetVersionEx(OSVersionInfoEx ver);
    public static bool GetProductInfo(int osMajorVersion, int osMinorVersion, int spMajorVersion, int spMinorVersion, Int32& edition);
    public static int WNetAddConnection2(NETRESOURCE resource, string lpPassword, string lpUserName, int dwFlags);
    public static int WNetGetUniversalName(string lpLocalPath, int dwInfoLevel, IntPtr lpBuffer, Int32& lpBufferSize);
    public static Byte[] AccountToSid(string account);
    public static string SidToAccount(Byte[] sid);
    public static bool CryptAcquireCertificatePrivateKey(IntPtr pCert, int dwFlags, IntPtr pvReserved, SafeNCryptKeyHandle& phCryptProvOrNCryptKey, UInt32& dwKeySpec, Boolean& pfCallerFreeProvOrNCryptKey);
    public static int CryptReleaseContext(IntPtr hProv, int dwFlags);
    public static int NCryptCreatePersistedKey(SafeNCryptProviderHandle hProvider, SafeNCryptKeyHandle& phKey, string pszAlgId, string pszKeyName, int dwLegacyKeySpec, CngKeyCreationOptions dwFlags);
    public static int NCryptGetProperty(SafeNCryptHandle hObject, string pszProperty, Byte[] pbOutput, int cbOutput, Int32& pcbResult, CngPropertyOptions dwFlags);
    public static int NCryptSetProperty(SafeNCryptHandle hObject, string pszProperty, Byte[] pbInput, int cbInput, CngPropertyOptions dwFlags);
    public static int NCryptFinalizeKey(SafeNCryptKeyHandle hKey, int dwFlags);
    public static int NCryptSignHash(SafeNCryptKeyHandle hKey, BCRYPT_PKCS1_PADDING_INFO& pPaddingInfo, Byte[] pbHashValue, int cbHashValue, Byte[] pbSignature, int cbSignature, Int32& pcbResult, int dwFlags);
    public static int NCryptVerifySignature(SafeNCryptKeyHandle hKey, BCRYPT_PKCS1_PADDING_INFO& pPaddingInfo, Byte[] pbHashValue, int cbHashValue, Byte[] pbSignature, int cbSignature, int dwFlags);
    public static int NCryptOpenStorageProvider(SafeNCryptProviderHandle& phProvider, string pszProviderName, int dwFlags);
    public static int NCryptImportKey(SafeNCryptProviderHandle hProvider, IntPtr hImportKey, string pszBlobType, IntPtr pParameterList, SafeNCryptKeyHandle& phKey, Byte[] pbData, int cbData, int dwFlags);
    public static int NCryptEncrypt(SafeNCryptKeyHandle hKey, Byte[] pbInput, int cbInput, BCRYPT_OAEP_PADDING_INFO& pPaddingInfo, Byte[] pbOutput, int cbOutput, Int32& pcbResult, int dwFlags);
    public static int NCryptDecrypt(SafeNCryptKeyHandle hKey, Byte[] pbInput, int cbInput, BCRYPT_OAEP_PADDING_INFO& pPaddingInfo, Byte[] pbOutput, int cbOutput, Int32& pcbResult, int dwFlags);
    public static int GetComputerNameEx(int nameType, StringBuilder nameBuffer, Int32& bufferSize);
    public static string GetComputerNameEx(COMPUTER_NAME_FORMAT format);
    public static int DnsHostnameToComputerName(string hostname, StringBuilder computerName, Int32& size);
    public static string DnsHostnameToComputerName(string hostname);
    private static int NetGetJoinInformation(string server, IntPtr& domain, NetJoinStatus& status);
    public static void NetGetJoinInformation(string server, String& domain, NetJoinStatus& joinStatus);
    public static int NetApiBufferFree(IntPtr bufferPtr);
    public static bool CredRead(string targetName, UInt32 type, UInt32 flags, IntPtr& credential);
    public static bool CredWrite(CREDENTIAL& credential, UInt32 flags);
    public static bool CredDelete(string targetName, UInt32 type, UInt32 flags);
    public static void CredFree(IntPtr buffer);
    public static int CredUIPromptForCredentials(CREDUI_INFO& pUiInfo, string pszTargetName, IntPtr reserved, int dwAuthError, StringBuilder pszUserName, UInt32 ulUserNameMaxChars, StringBuilder pszPassword, UInt32 ulPasswordMaxChars, Boolean& pfSave, int dwFlags);
    public static int CredUIPromptForWindowsCredentials(CREDUI_INFO& pUiInfo, int dwAuthError, UInt32& pulAuthPackage, Byte[] pvInAuthBuffer, UInt32 ulInAuthBufferSize, IntPtr& ppvOutAuthBuffer, UInt32& pulOutAuthBufferSize, Boolean& pfSave, int dwFlags);
    public static bool CredPackAuthenticationBuffer(int dwFlags, string pszUserName, string pszPassword, Byte[] pPackedCredentials, UInt32& pcbPackedCredentials);
    public static bool CredUnPackAuthenticationBuffer(int dwFlags, IntPtr pAuthBuffer, UInt32 cbAuthBuffer, StringBuilder pszUserName, UInt32& pcchMaxUserName, StringBuilder pszDomainName, UInt32& pcchMaxDomainName, StringBuilder pszPassword, UInt32& pcchMaxPassword);
    public static int CredUIParseUserName(string pszUserName, StringBuilder pszUser, UInt32 ulUserMaxChars, StringBuilder pszDomain, UInt32 ulDomainMaxChars);
    public static void ZeroMemory(IntPtr address, UInt32 byteCount);
    public static bool GetGUIThreadInfo(UInt32 idThread, GUITHREADINFO& lpgui);
    public static ServiceHandle OpenSCManager(string machineName, string db, ServiceControlAccessRights desiredAccess);
    public static ServiceHandle OpenService(ServiceHandle serviceControlManagerHandle, string serviceName, ServiceAccessRights desiredAccess);
    public static bool CloseServiceHandle(IntPtr handle);
    public static int ChangeServiceConfig(ServiceHandle serviceHandle, UInt32 type, UInt32 startType, UInt32 errorControl, string binaryPathName, string loadOrderGroup, string tagId, string dependencies, string accountName, string password, string displayName);
    public static int ChangeServiceConfig2(ServiceHandle serviceHandle, ServiceConfig2InfoLevel dwInfoLevel, IntPtr lpInfo);
    public static int QueryServiceConfigW(ServiceHandle serviceHandle, IntPtr serviceConfigHandle, int bufferSize, Int32& bytesNeeded);
    public static IntPtr LockServiceDatabase(IntPtr handle);
    public static bool UnlockServiceDatabase(IntPtr handle);
    public static bool CreateEnvironmentBlock(IntPtr& lpEnvironment, SafeHandle hToken, bool bInherit);
    public static bool DestroyEnvironmentBlock(IntPtr lpEnvironment);
    public static bool CreateProcessAsUser(IntPtr hToken, string lpApplicationName, string lpCommandLine, SECURITY_ATTRIBUTES& lpProcessAttributes, SECURITY_ATTRIBUTES& lpThreadAttributes, bool bInheritHandle, UInt32 dwCreationFlags, IntPtr lpEnvironment, string lpCurrentDirectory, STARTUPINFO& lpStartupInfo, PROCESS_INFORMATION& lpProcessInformation);
    public static bool DuplicateHandle(HandleRef hSourceProcessHandle, SafeHandle hSourceHandle, HandleRef hTargetProcessHandle, IntPtr& lpTargetHandle, UInt32 dwDesiredAccess, bool bInheritHandle, UInt32 dwOptions);
    public static IntPtr GetCurrentProcess();
    public static bool GenerateConsoleCtrlEvent(UInt32 dwCtrlEvent, UInt32 dwProcessGroupId);
    public static bool AttachConsole(UInt32 dwProcessId);
    public static bool FreeConsole();
    public static bool SetConsoleCtrlHandler(ConsoleCtrlEventHandler handlerRoutine, bool add);
    public static bool LoadUserProfile(SafeHandle hToken, PROFILEINFO& lpProfileInfo);
    public static bool UnloadUserProfile(SafeHandle hToken, IntPtr hProfile);
    public static int LogonUser(string userName, string domain, string password, UInt32 logonType, UInt32 logonProvider, IntPtr& tokenHandle);
    public static bool WTSQueryUserToken(UInt32 sessionId, IntPtr& phToken);
    public static IntPtr WTSOpenServer(string name);
    public static void WTSCloseServer(IntPtr hServer);
    public static void WTSFreeMemoryEx(WTS_TYPE_CLASS wsTypeClass, IntPtr pMemory, ulong numberOfEntries);
    public static bool WTSEnumerateSessionsEx(IntPtr hServer, UInt32& pLevel, UInt32 filter, IntPtr& ppSessionInfo, Int32& pCount);
    public static UInt32 LsaOpenPolicy(LSA_UNICODE_STRING& SystemName, LSA_OBJECT_ATTRIBUTES& ObjectAttributes, UInt32 DesiredAccess, IntPtr& PolicyHandle);
    public static UInt32 LsaEnumerateAccountRights(IntPtr PolicyHandle, Byte[] AccountSid, IntPtr& UserRights, UInt32& CountOfRights);
    public static UInt32 LsaAddAccountRights(IntPtr PolicyHandle, Byte[] AccountSid, LSA_UNICODE_STRING[] UserRights, UInt32 CountOfRights);
    public static UInt32 LsaRemoveAccountRights(IntPtr PolicyHandle, Byte[] AccountSid, byte AllRights, LSA_UNICODE_STRING[] UserRights, UInt32 CountOfRights);
    public static UInt32 LsaFreeMemory(IntPtr pBuffer);
    public static int LsaClose(IntPtr ObjectHandle);
    public static UInt32 GetNamedSecurityInfo(string objectName, ResourceType objectType, SecurityInfos securityInfo, IntPtr& sidOwner, IntPtr& sidGroup, IntPtr& dacl, IntPtr& sacl, IntPtr& securityDescriptor);
    public static UInt32 SetNamedSecurityInfo(string objectName, ResourceType objectType, SecurityInfos securityInfo, Byte[] sidOwner, Byte[] sidGroup, Byte[] dacl, Byte[] sacl);
    public static UInt32 GetAclInformation(IntPtr acl, ACL_SIZE_INFORMATION& aclInformation, UInt32 aclInformationLength, ACL_INFORMATION_CLASS aclInformationClass);
    public static IntPtr LocalFree(IntPtr handle);
    public static int SetWindowTheme(IntPtr hWnd, string subAppName, string subIdList);
    public static ILockBytes CreateILockBytesOnHGlobal(IntPtr hGlobal, bool fDeleteOnRelease);
    public static IntPtr GetHGlobalFromILockBytes(ILockBytes pLockBytes);
    public static IStorage StgCreateDocfileOnILockBytes(ILockBytes plkbyt, UInt32 grfMode, UInt32 reserved);
    public static int StgCreateDocfile(string pwcsName, UInt32 grfMode, UInt32 reserved, IStorage& ppstgOpen);
    public static void GetNativeSystemInfo(SYSTEM_INFO& lpSystemInfo);
    public static void VariantInit(IntPtr pvariant);
    public static int VariantClear(IntPtr pvariant);
    public static SafeFindHandle FindFirstFile(string lpFileName, WIN32_FIND_DATA& lpFindFileData);
    public static SafeFindHandle FindFirstFileEx(string lpFileName, FINDEX_INFO_LEVELS fInfoLevelId, WIN32_FIND_DATA& lpFindFileData, FINDEX_SEARCH_OPS fSearchOp, IntPtr lpSearchFilter, UInt32 dwAdditionalFlags);
    public static bool FindNextFile(SafeFindHandle hFindFile, WIN32_FIND_DATA& lpFindfileData);
    public static bool FindClose(IntPtr hFile);
    public static bool ReadDirectoryChangesW(SafeFileHandle hDirectory, IntPtr lpBuffer, UInt32 nBufferLength, bool bWatchSubtree, UInt32 dwNotifyFilter, UInt32& lpBytesReturned, IntPtr overlappedPointer, IntPtr lpCompletionRoutine);
    public static bool CancelIoEx(SafeFileHandle hFile, IntPtr lpOverlapped);
    public static UInt32 GetDriveType(string lpRootPathName);
    public static SafeVolumeMountPointHandle FindFirstVolumeMountPoint(string lpszRootPathName, StringBuilder lpszVolumeMountPoint, UInt32 cchBufferLength);
    public static bool FindVolumeMountPointClose(IntPtr hFindVolumeMountPoint);
    public static bool SetFileInformationByHandle(SafeFileHandle hFile, FILE_INFO_BY_HANDLE_CLASS FileInformationClass, FILE_IO_PRIORITY_HINT_INFO& lpFileInformation, UInt32 dwBufferSize);
    public static bool SetFileInformationByHandle(SafeFileHandle hFile, FILE_INFO_BY_HANDLE_CLASS FileInformationClass, FILE_END_OF_FILE_INFO& lpFileInformation, UInt32 dwBufferSize);
    public static IntPtr LoadLibrary(string lpFileName);
    public static bool GlobalMemoryStatusEx(MEMORYSTATUSEX lpBuffer);
    public static bool DeleteProfile(string lpSidString, string lpProfilePath, string lpComputerName);
    public static bool InternetSetCookieEx(string lpszURL, string lpszCookieName, string lpszCookieData, UInt32 dwFlags, IntPtr dwReserved);
    public static int BCryptGetFipsAlgorithmMode(Boolean& pfEnabled);
    public static NET_API_STATUS NetUserGetInfo(string ServerName, string UserName, int level, IntPtr& BufPtr);
    public static UInt32 GetCurrentProcessId();
}
[EditorBrowsableAttribute("1")]
public enum Microsoft.TeamFoundation.Common.Internal.ProcessGuidanceType : Enum {
    public int value__;
    public static ProcessGuidanceType WssDocumentLibrary;
    public static ProcessGuidanceType WebSite;
}
[EditorBrowsableAttribute("1")]
public enum Microsoft.TeamFoundation.Common.Internal.ProjectPortalType : Enum {
    public int value__;
    public static ProjectPortalType WssSite;
    public static ProjectPortalType WebSite;
}
[EditorBrowsableAttribute("1")]
public class Microsoft.TeamFoundation.Common.Internal.RetrievableCollection`1 : ObservableCollection`1<T> {
    private Exception m_error;
    private string m_infoMessage;
    private RetrievablePropertyState m_state;
    public RetrievablePropertyState State { get; protected set; }
    public Exception Error { get; public set; }
    public string InfoMessage { get; public set; }
    public virtual RetrievablePropertyState get_State();
    protected virtual void set_State(RetrievablePropertyState value);
    public Exception get_Error();
    public void set_Error(Exception value);
    public string get_InfoMessage();
    public void set_InfoMessage(string value);
}
[EditorBrowsableAttribute("1")]
public enum Microsoft.TeamFoundation.Common.Internal.RetrievablePropertyState : Enum {
    public int value__;
    public static RetrievablePropertyState Uninitialized;
    public static RetrievablePropertyState Working;
    public static RetrievablePropertyState Retrieved;
    public static RetrievablePropertyState Info;
    public static RetrievablePropertyState Error;
}
[EditorBrowsableAttribute("1")]
public enum Microsoft.TeamFoundation.Common.Internal.ServerRoleType : Enum {
    public int value__;
    public static ServerRoleType None;
    public static ServerRoleType Unknown;
    public static ServerRoleType Standalone;
    public static ServerRoleType FarmComplete;
    public static ServerRoleType WebFrontEnd;
}
[EditorBrowsableAttribute("1")]
public class Microsoft.TeamFoundation.Common.Internal.ServiceHandle : SafeHandleZeroOrMinusOneIsInvalid {
    protected virtual bool ReleaseHandle();
}
[EditorBrowsableAttribute("1")]
public static class Microsoft.TeamFoundation.Common.Internal.StreamUtil : object {
    private static int c_buffersize;
    public static void Copy(Stream input, Stream output, bool repositionOutputAfterCopy);
}
[ExtensionAttribute]
public static class Microsoft.TeamFoundation.Common.Internal.StringExtensions : object {
    [ExtensionAttribute]
public static int GetStableHashCode(string str);
}
[ExtensionAttribute]
[EditorBrowsableAttribute("1")]
public static class Microsoft.TeamFoundation.Common.Internal.StringUtil : object {
    public static int defaultConsoleWidth;
    private static int s_maxCommentDisplayLength;
    public static string s_ellipsis;
    private static String[] s_lineEndings;
    private static Char[] s_newlineCharacters;
    private static Dictionary`2<int, Dictionary`2<string, string>> s_resourceTokensCache;
    private static object s_resourceTokensLock;
    private static StringUtil();
    public static String[] ParseCommandLine(string cmdLine);
    public static string ParseCommandLineArgument(string cmdLine, Int32& startPos);
    public static string FormatColumnOutput(String[] headers, String[0...,0...] contents, string indent, int lineWidth, Encoding encoding);
    public static string FormatColumnOutput(String[] headers, String[0...,0...] contents, string indent, Int32[] maxWidths, bool padLastColumn, Encoding encoding);
    public static string GetRowFormat(String[] headers, string indent, Encoding encoding);
    public static string GetRowFormat(String[] headers, string indent, string rowTemplate, Encoding encoding);
    public static string GetRowFormat(String[] headers, string indent, string rowTemplate, int headerMaxWidth, Encoding encoding);
    public static string GetSecureStringContent(SecureString sec);
    public static SecureString CreateSecureString(string str);
    public static string Truncate(string text, int maximumCharacters, bool addEllipsis);
    public static string Truncate(string text, int width, Encoding encoding);
    public static string TruncateToFirstLine(string value, int maxLength, Boolean& isTruncated);
    public static string TruncateLeft(string text, int width, Encoding encoding);
    public static Int32[] CalculateColumnsWidth(String[] headers, String[0...,0...] contents, Encoding encoding);
    public static int CalculateWidth(string text, Encoding encoding);
    public static int CalculateWidth(Char[] chars, Encoding encoding);
    public static string Format(string stringFormat, Object[] args);
    public static string FormatInvariant(string format, Object[] args);
    public static String[] SplitOnNewlines(string lines, StringSplitOptions options);
    public static bool HasNewlines(string value);
    public static string FormatCommentForOneLine(string comment);
    public static string FormatCommentForOneLine(string comment, int maxCommentDisplayLength);
    public static bool ContainsIllegalCharacters(string stringToValidate, string validCharacters);
    public static bool ContainsIllegalCharacters(string stringToValidate, HashSet`1<char> validCharacters);
    public static string QuoteName(string text);
    public static string QuoteName(string text, char quoteCharacter);
    public static string ReplaceResources(string text, Boolean& replacedAll);
    public static string ReplaceResources(string text, Func`2<string, string> escapeFunction, Boolean& replacedAll);
    public static string ReplaceTokens(string text, string tokenPrefix, string tokenSuffix, IDictionary`2<string, string> tokens, Boolean& replacedAll);
    public static string ReplaceTokens(string text, string tokenPrefix, string tokenSuffix, IDictionary`2<string, string> tokens, Func`2<string, string> escapeFunction, Boolean& replacedAll);
    public static string ReplaceTokens(string text, string tokenPrefix, string tokenSuffix, Func`2<string, string> tokenProvider, Boolean& replacedAll);
    public static int CountSubstrings(string value, string substring);
    public static string ConvertToHex(Byte[] byteArray);
    public static Byte[] ConvertFromHexString(string hexString);
    [ExtensionAttribute]
public static string ToQuotedStringList(IEnumerable`1<T> values, char quoteCharacter);
    [ExtensionAttribute]
public static string ToQuotedStringListOrNullStringLiteral(IEnumerable`1<T> values, char quoteCharacter);
    public static string ConvertToAlphaNumericString(string input);
    public static bool IsAlphaNumericOnlyString(string input);
    private static string CachingResourceTokenProvider(string fullyQualifiedResource);
    private static string ResourceTokenProvider(string fullyQualifiedResource);
}
[EditorBrowsableAttribute("1")]
public static class Microsoft.TeamFoundation.Common.Internal.TeamFoundationEnvironment : object {
    private static string s_registryKeyPath;
    public static RegistryKey TryGetUserRegistryRoot();
    public static RegistryKey TryGetApplicationRegistryRoot();
    public static RegistryKey OpenRootVisualStudioRegistryKey();
    public static RegistryKey OpenOrCreateRootUserRegistryKey();
    public static string GetVisualStudioApplicationDataPath();
    public static string GetVisualStudioLocalApplicationDataPath();
    public static string GetTfsSharedFilesPath();
    public static string GetTfsSharedFilesPathX86();
}
[EditorBrowsableAttribute("1")]
public class Microsoft.TeamFoundation.Common.Internal.TextLogger : TFLogger {
    [CompilerGeneratedAttribute]
private TextWriter <Writer>k__BackingField;
    [CompilerGeneratedAttribute]
private int <ErrorCount>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IncludeTimestamps>k__BackingField;
    private object m_lock;
    public TextWriter Writer { get; private set; }
    public int ErrorCount { get; private set; }
    public bool IncludeTimestamps { get; private set; }
    public TextLogger(TextWriter writer);
    public TextLogger(TextWriter writer, bool includeTimestamps);
    [CompilerGeneratedAttribute]
public TextWriter get_Writer();
    [CompilerGeneratedAttribute]
private void set_Writer(TextWriter value);
    [CompilerGeneratedAttribute]
public int get_ErrorCount();
    [CompilerGeneratedAttribute]
private void set_ErrorCount(int value);
    [CompilerGeneratedAttribute]
public bool get_IncludeTimestamps();
    [CompilerGeneratedAttribute]
private void set_IncludeTimestamps(bool value);
    public virtual void Info(string message);
    public virtual void Warning(string message);
    public virtual void Error(string message);
}
[EditorBrowsableAttribute("1")]
public static class Microsoft.TeamFoundation.Common.Internal.TFCommonResources : object {
    private static ResourceManager s_resMgr;
    public static ResourceManager Manager { get; }
    private static TFCommonResources();
    public static ResourceManager get_Manager();
    private static string Get(string resourceName);
    private static string Get(string resourceName, CultureInfo culture);
    public static int GetInt(string resourceName);
    public static int GetInt(string resourceName, CultureInfo culture);
    public static bool GetBool(string resourceName);
    public static bool GetBool(string resourceName, CultureInfo culture);
    private static string Format(string resourceName, Object[] args);
    private static string Format(string resourceName, CultureInfo culture, Object[] args);
    public static string AccessToPathDenied(object arg0);
    public static string AccessToPathDenied(object arg0, CultureInfo culture);
    public static string AssertionFailureHeader();
    public static string AssertionFailureHeader(CultureInfo culture);
    public static string CannotDeleteDirectoryWithWritableFile(object arg0);
    public static string CannotDeleteDirectoryWithWritableFile(object arg0, CultureInfo culture);
    public static string CannotDeleteDirectoryWithContents(object arg0);
    public static string CannotDeleteDirectoryWithContents(object arg0, CultureInfo culture);
    public static string Category(object arg0);
    public static string Category(object arg0, CultureInfo culture);
    public static string CommandFailedWithExitCode(object arg0, object arg1);
    public static string CommandFailedWithExitCode(object arg0, object arg1, CultureInfo culture);
    public static string EmptyStringNotAllowed();
    public static string EmptyStringNotAllowed(CultureInfo culture);
    public static string EmptyGuidNotAllowed(object arg0);
    public static string EmptyGuidNotAllowed(object arg0, CultureInfo culture);
    public static string Exception();
    public static string Exception(CultureInfo culture);
    public static string ExceptionDataDictionaryReport(object arg0, object arg1);
    public static string ExceptionDataDictionaryReport(object arg0, object arg1, CultureInfo culture);
    public static string ExceptionReport(object arg0, object arg1, object arg2, object arg3, object arg4, object arg5, object arg6, object arg7, object arg8, object arg9, object arg10);
    public static string ExceptionReport(object arg0, object arg1, object arg2, object arg3, object arg4, object arg5, object arg6, object arg7, object arg8, object arg9, object arg10, CultureInfo culture);
    public static string ExceptionReportNoDetails(object arg0, object arg1, object arg2, object arg3, object arg4, object arg5, object arg6, object arg7, object arg8, object arg9);
    public static string ExceptionReportNoDetails(object arg0, object arg1, object arg2, object arg3, object arg4, object arg5, object arg6, object arg7, object arg8, object arg9, CultureInfo culture);
    public static string ExceptionSource();
    public static string ExceptionSource(CultureInfo culture);
    public static string ExceptionStackTrace(object arg0);
    public static string ExceptionStackTrace(object arg0, CultureInfo culture);
    public static string FileInUse(object arg0);
    public static string FileInUse(object arg0, CultureInfo culture);
    public static string FoundDirectoryExpectedFilePath(object arg0);
    public static string FoundDirectoryExpectedFilePath(object arg0, CultureInfo culture);
    public static string HeadersAndContentsDontMatch(object arg0, object arg1);
    public static string HeadersAndContentsDontMatch(object arg0, object arg1, CultureInfo culture);
    public static string HttpStatusInfo(object arg0, object arg1);
    public static string HttpStatusInfo(object arg0, object arg1, CultureInfo culture);
    public static string IdentityNotFoundException(object arg0);
    public static string IdentityNotFoundException(object arg0, CultureInfo culture);
    public static string InnerException();
    public static string InnerException(CultureInfo culture);
    public static string InvalidComputerName(object arg0);
    public static string InvalidComputerName(object arg0, CultureInfo culture);
    public static string InvalidComputerNameTooLong(object arg0, object arg1);
    public static string InvalidComputerNameTooLong(object arg0, object arg1, CultureInfo culture);
    public static string InvalidComputerNameInvalidCharacters(object arg0);
    public static string InvalidComputerNameInvalidCharacters(object arg0, CultureInfo culture);
    public static string InvalidEnumerationValue(object arg0, object arg1);
    public static string InvalidEnumerationValue(object arg0, object arg1, CultureInfo culture);
    public static string InvalidPath(object arg0);
    public static string InvalidPath(object arg0, CultureInfo culture);
    public static string InvalidPathDollarSign(object arg0);
    public static string InvalidPathDollarSign(object arg0, CultureInfo culture);
    public static string InvalidPathTooLong(object arg0);
    public static string InvalidPathTooLong(object arg0, CultureInfo culture);
    public static string InvalidServerPathTooLong(object arg0);
    public static string InvalidServerPathTooLong(object arg0, CultureInfo culture);
    public static string InvalidPathTooLongVariable(object arg0, object arg1);
    public static string InvalidPathTooLongVariable(object arg0, object arg1, CultureInfo culture);
    public static string InvalidPathInvalidChar(object arg0, object arg1);
    public static string InvalidPathInvalidChar(object arg0, object arg1, CultureInfo culture);
    public static string InvalidPathInvalidCharacters(object arg0);
    public static string InvalidPathInvalidCharacters(object arg0, CultureInfo culture);
    public static string InvalidPathInvalidCharactersAndWildcards(object arg0);
    public static string InvalidPathInvalidCharactersAndWildcards(object arg0, CultureInfo culture);
    public static string InvalidPathTermination(object arg0);
    public static string InvalidPathTermination(object arg0, CultureInfo culture);
    public static string InvalidServerResponse(object arg0);
    public static string InvalidServerResponse(object arg0, CultureInfo culture);
    public static string InvalidTraceFile(object arg0, object arg1);
    public static string InvalidTraceFile(object arg0, object arg1, CultureInfo culture);
    public static string InvalidUserName(object arg0);
    public static string InvalidUserName(object arg0, CultureInfo culture);
    public static string ListenerInitializeError(object arg0);
    public static string ListenerInitializeError(object arg0, CultureInfo culture);
    public static string LogExceptionHeader(object arg0, object arg1);
    public static string LogExceptionHeader(object arg0, object arg1, CultureInfo culture);
    public static string LogExceptionDataDictionary(object arg0);
    public static string LogExceptionDataDictionary(object arg0, CultureInfo culture);
    public static string Method(object arg0);
    public static string Method(object arg0, CultureInfo culture);
    public static string AColonB(object arg0, object arg1);
    public static string AColonB(object arg0, object arg1, CultureInfo culture);
    public static string PathIsNotADirectory(object arg0);
    public static string PathIsNotADirectory(object arg0, CultureInfo culture);
    public static string StackFrameHeader(object arg0, object arg1);
    public static string StackFrameHeader(object arg0, object arg1, CultureInfo culture);
    public static string StackFrameLineFormat(object arg0, object arg1);
    public static string StackFrameLineFormat(object arg0, object arg1, CultureInfo culture);
    public static string SqlExceptionError(object arg0, object arg1, object arg2, object arg3, object arg4, object arg5, object arg6, object arg7, object arg8);
    public static string SqlExceptionError(object arg0, object arg1, object arg2, object arg3, object arg4, object arg5, object arg6, object arg7, object arg8, CultureInfo culture);
    public static string SqlExceptionReport(object arg0, object arg1, object arg2, object arg3, object arg4, object arg5, object arg6);
    public static string SqlExceptionReport(object arg0, object arg1, object arg2, object arg3, object arg4, object arg5, object arg6, CultureInfo culture);
    public static string SoapExceptionReport(object arg0);
    public static string SoapExceptionReport(object arg0, CultureInfo culture);
    public static string WebExceptionReport(object arg0, object arg1, object arg2);
    public static string WebExceptionReport(object arg0, object arg1, object arg2, CultureInfo culture);
    public static string WebExceptionReport_ResponseDisposed(object arg0);
    public static string WebExceptionReport_ResponseDisposed(object arg0, CultureInfo culture);
    public static string StringLengthExceedsLimit();
    public static string StringLengthExceedsLimit(CultureInfo culture);
    public static string StringPatternDidNotMatch(object arg0);
    public static string StringPatternDidNotMatch(object arg0, CultureInfo culture);
    public static string TraceSettingArgumentException(object arg0);
    public static string TraceSettingArgumentException(object arg0, CultureInfo culture);
    public static string TraceStartMessage(object arg0, object arg1);
    public static string TraceStartMessage(object arg0, object arg1, CultureInfo culture);
    public static string TraceStopMessage(object arg0, object arg1);
    public static string TraceStopMessage(object arg0, object arg1, CultureInfo culture);
    public static string TraceToggleException();
    public static string TraceToggleException(CultureInfo culture);
    public static string Unauthorized(object arg0);
    public static string Unauthorized(object arg0, CultureInfo culture);
    public static string UnableToContactService();
    public static string UnableToContactService(CultureInfo culture);
    public static string UnableToRunApp(object arg0);
    public static string UnableToRunApp(object arg0, CultureInfo culture);
    public static string UnableToRetrieveRegistrationInfo(object arg0);
    public static string UnableToRetrieveRegistrationInfo(object arg0, CultureInfo culture);
    public static string UnauthorizedUnknownServer();
    public static string UnauthorizedUnknownServer(CultureInfo culture);
    public static string UserNameAndPasswordRequiredForLoginTypeOAuth();
    public static string UserNameAndPasswordRequiredForLoginTypeOAuth(CultureInfo culture);
    public static string UserNameAndPasswordRequiredForLoginTypeServiceIdentity();
    public static string UserNameAndPasswordRequiredForLoginTypeServiceIdentity(CultureInfo culture);
    public static string WatsonMainPleaRegular();
    public static string WatsonMainPleaRegular(CultureInfo culture);
    public static string WatsonMainIntroBold();
    public static string WatsonMainIntroBold(CultureInfo culture);
    public static string WatsonMainIntroRegular();
    public static string WatsonMainIntroRegular(CultureInfo culture);
    public static string WatsonMainPleaBold();
    public static string WatsonMainPleaBold(CultureInfo culture);
    public static string WatsonEventDescription(object arg0);
    public static string WatsonEventDescription(object arg0, CultureInfo culture);
    public static string WatsonReportBeingPrepared();
    public static string WatsonReportBeingPrepared(CultureInfo culture);
    public static string WatsonReportException();
    public static string WatsonReportException(CultureInfo culture);
    public static string WatsonReportInformation(object arg0);
    public static string WatsonReportInformation(object arg0, CultureInfo culture);
    public static string WatsonReportNotFiled(object arg0);
    public static string WatsonReportNotFiled(object arg0, CultureInfo culture);
    public static string WatsonReportReady();
    public static string WatsonReportReady(CultureInfo culture);
    public static string WildcardsNotAllowed();
    public static string WildcardsNotAllowed(CultureInfo culture);
    public static string VersionCheckFailed(object arg0);
    public static string VersionCheckFailed(object arg0, CultureInfo culture);
    public static string RegistrationDataUnavailable(object arg0);
    public static string RegistrationDataUnavailable(object arg0, CultureInfo culture);
    public static string VersionCheckFailedRange(object arg0, object arg1);
    public static string VersionCheckFailedRange(object arg0, object arg1, CultureInfo culture);
    public static string UnsupportedLinkFilter(object arg0);
    public static string UnsupportedLinkFilter(object arg0, CultureInfo culture);
    public static string ServicesUnavailable(object arg0, object arg1);
    public static string ServicesUnavailable(object arg0, object arg1, CultureInfo culture);
    public static string ServicesUnavailableNoServer(object arg0);
    public static string ServicesUnavailableNoServer(object arg0, CultureInfo culture);
    public static string DatabaseMissingErrorMessages(object arg0);
    public static string DatabaseMissingErrorMessages(object arg0, CultureInfo culture);
    public static string AccessCheckExceptionTokenFormat(object arg0, object arg1, object arg2);
    public static string AccessCheckExceptionTokenFormat(object arg0, object arg1, object arg2, CultureInfo culture);
    public static string InvalidOperationOnNonHierarchicalNamespace();
    public static string InvalidOperationOnNonHierarchicalNamespace(CultureInfo culture);
    public static string InvalidSecurityNamespaceGuid(object arg0);
    public static string InvalidSecurityNamespaceGuid(object arg0, CultureInfo culture);
    public static string ReadOnlySecurityCollectionExceptionMessage();
    public static string ReadOnlySecurityCollectionExceptionMessage(CultureInfo culture);
    public static string InvalidTokenSplitType();
    public static string InvalidTokenSplitType(CultureInfo culture);
    public static string SecurityIdentityNotFoundMessage(object arg0);
    public static string SecurityIdentityNotFoundMessage(object arg0, CultureInfo culture);
    public static string ServiceForFilterNotFoundWithIdentifier(object arg0, object arg1);
    public static string ServiceForFilterNotFoundWithIdentifier(object arg0, object arg1, CultureInfo culture);
    public static string OperationNotSupportedMessage(object arg0, object arg1);
    public static string OperationNotSupportedMessage(object arg0, object arg1, CultureInfo culture);
    public static string ErrorReadingFile(object arg0, object arg1);
    public static string ErrorReadingFile(object arg0, object arg1, CultureInfo culture);
    public static string DuplicateLocationMappingMessage();
    public static string DuplicateLocationMappingMessage(CultureInfo culture);
    public static string InvalidServiceTypeOnRegister(object arg0);
    public static string InvalidServiceTypeOnRegister(object arg0, CultureInfo culture);
    public static string ServiceForFilterNotFound(object arg0);
    public static string ServiceForFilterNotFound(object arg0, CultureInfo culture);
    public static string InvalidServiceDefinitionMissingMapping(object arg0, object arg1);
    public static string InvalidServiceDefinitionMissingMapping(object arg0, object arg1, CultureInfo culture);
    public static string InvalidFullyQualifiedServiceDefinition(object arg0);
    public static string InvalidFullyQualifiedServiceDefinition(object arg0, CultureInfo culture);
    public static string InvalidRelativeServiceDefinition(object arg0);
    public static string InvalidRelativeServiceDefinition(object arg0, CultureInfo culture);
    public static string InvalidIdentifierOnUpdate();
    public static string InvalidIdentifierOnUpdate(CultureInfo culture);
    public static string InvalidLocationServiceUrlRelativePath(object arg0, object arg1);
    public static string InvalidLocationServiceUrlRelativePath(object arg0, object arg1, CultureInfo culture);
    public static string InvalidSecurityNamespaceDescriptionMessage();
    public static string InvalidSecurityNamespaceDescriptionMessage(CultureInfo culture);
    public static string AccessMappingAlreadyRegistered(object arg0);
    public static string AccessMappingAlreadyRegistered(object arg0, CultureInfo culture);
    public static string XmlNodeMissing(object arg0, object arg1);
    public static string XmlNodeMissing(object arg0, object arg1, CultureInfo culture);
    public static string XmlNodeEmpty(object arg0, object arg1);
    public static string XmlNodeEmpty(object arg0, object arg1, CultureInfo culture);
    public static string AccessMappingNotRegistered(object arg0);
    public static string AccessMappingNotRegistered(object arg0, CultureInfo culture);
    public static string ServiceDefinitionWithNoLocations(object arg0);
    public static string ServiceDefinitionWithNoLocations(object arg0, CultureInfo culture);
    public static string FullyQualifiedLocationParameter();
    public static string FullyQualifiedLocationParameter(CultureInfo culture);
    public static string RelativeLocationMappingErrorMessage();
    public static string RelativeLocationMappingErrorMessage(CultureInfo culture);
    public static string XmlAttributeEmpty(object arg0, object arg1);
    public static string XmlAttributeEmpty(object arg0, object arg1, CultureInfo culture);
    public static string XmlAttributeNull(object arg0, object arg1);
    public static string XmlAttributeNull(object arg0, object arg1, CultureInfo culture);
    public static string InvalidServiceDefinitionToolId();
    public static string InvalidServiceDefinitionToolId(CultureInfo culture);
    public static string ConfigFileException();
    public static string ConfigFileException(CultureInfo culture);
    public static string DuplicateRegistrationEntry(object arg0);
    public static string DuplicateRegistrationEntry(object arg0, CultureInfo culture);
    public static string RegistrationEntryTypeMissing();
    public static string RegistrationEntryTypeMissing(CultureInfo culture);
    public static string ServiceInterfacesDepricated();
    public static string ServiceInterfacesDepricated(CultureInfo culture);
    public static string XmlRootNodeMissing(object arg0);
    public static string XmlRootNodeMissing(object arg0, CultureInfo culture);
    public static string CorruptRegistrationData(object arg0, object arg1);
    public static string CorruptRegistrationData(object arg0, object arg1, CultureInfo culture);
    public static string UnableToRetrieveLocationInfo(object arg0);
    public static string UnableToRetrieveLocationInfo(object arg0, CultureInfo culture);
    public static string ServiceDefinitionDoesNotExist(object arg0, object arg1);
    public static string ServiceDefinitionDoesNotExist(object arg0, object arg1, CultureInfo culture);
    public static string ServiceDefinitionWithoutIdentifierDoesNotExist(object arg0);
    public static string ServiceDefinitionWithoutIdentifierDoesNotExist(object arg0, CultureInfo culture);
    public static string InvalidFindServiceByTypeAndToolId(object arg0, object arg1, object arg2);
    public static string InvalidFindServiceByTypeAndToolId(object arg0, object arg1, object arg2, CultureInfo culture);
    public static string InvalidAccessMappingLocationServiceUrl();
    public static string InvalidAccessMappingLocationServiceUrl(CultureInfo culture);
    public static string SingletonServiceDefinitionViolation(object arg0);
    public static string SingletonServiceDefinitionViolation(object arg0, CultureInfo culture);
    public static string LocationMappingDoesNotExist(object arg0, object arg1, object arg2);
    public static string LocationMappingDoesNotExist(object arg0, object arg1, object arg2, CultureInfo culture);
    public static string BAD_ACCOUNT_NAME(object arg0);
    public static string BAD_ACCOUNT_NAME(object arg0, CultureInfo culture);
    public static string BAD_DISPLAY_NAME(object arg0);
    public static string BAD_DISPLAY_NAME(object arg0, CultureInfo culture);
    public static string BAD_GROUP_NAME(object arg0);
    public static string BAD_GROUP_NAME(object arg0, CultureInfo culture);
    public static string BAD_GROUP_DESCRIPTION(object arg0);
    public static string BAD_GROUP_DESCRIPTION(object arg0, CultureInfo culture);
    public static string BAD_GROUP_DESCRIPTION_TOO_LONG(object arg0);
    public static string BAD_GROUP_DESCRIPTION_TOO_LONG(object arg0, CultureInfo culture);
    public static string BAD_SID(object arg0, object arg1);
    public static string BAD_SID(object arg0, object arg1, CultureInfo culture);
    public static string CannotCreateOrphanedResource();
    public static string CannotCreateOrphanedResource(CultureInfo culture);
    public static string CatalogNodeDoesNotExist();
    public static string CatalogNodeDoesNotExist(CultureInfo culture);
    public static string CatalogResourceDoesNotExist(object arg0);
    public static string CatalogResourceDoesNotExist(object arg0, CultureInfo culture);
    public static string CatalogResourceTypeDoesNotExist(object arg0);
    public static string CatalogResourceTypeDoesNotExist(object arg0, CultureInfo culture);
    public static string InvalidUnicodeCharacter(object arg0);
    public static string InvalidUnicodeCharacter(object arg0, CultureInfo culture);
    public static string PropertyArgumentExceededMaximumSizeAllowed(object arg0, object arg1);
    public static string PropertyArgumentExceededMaximumSizeAllowed(object arg0, object arg1, CultureInfo culture);
    public static string InvalidPropertyValueSize(object arg0, object arg1, object arg2);
    public static string InvalidPropertyValueSize(object arg0, object arg1, object arg2, CultureInfo culture);
    public static string PropertyInvalidVersionSpecification(object arg0);
    public static string PropertyInvalidVersionSpecification(object arg0, CultureInfo culture);
    public static string UnsupportedPropertyType(object arg0);
    public static string UnsupportedPropertyType(object arg0, CultureInfo culture);
    public static string MultipleExtensionNames();
    public static string MultipleExtensionNames(CultureInfo culture);
    public static string ExtensionNameNullOrEmpty();
    public static string ExtensionNameNullOrEmpty(CultureInfo culture);
    public static string DuplicateExtensionNameError(object arg0, object arg1, object arg2);
    public static string DuplicateExtensionNameError(object arg0, object arg1, object arg2, CultureInfo culture);
    public static string UnsupportedPropertyValue(object arg0, object arg1, object arg2);
    public static string UnsupportedPropertyValue(object arg0, object arg1, object arg2, CultureInfo culture);
    public static string SharePointServiceAccountsGroupDescription();
    public static string SharePointServiceAccountsGroupDescription(CultureInfo culture);
    public static string FailedToMapPropertyKindToArtifactKind(object arg0);
    public static string FailedToMapPropertyKindToArtifactKind(object arg0, CultureInfo culture);
    public static string SharePointServiceAccountsGroupName();
    public static string SharePointServiceAccountsGroupName(CultureInfo culture);
    public static string IllegalIdentityException(object arg0);
    public static string IllegalIdentityException(object arg0, CultureInfo culture);
    public static string Ellipsis(object arg0);
    public static string Ellipsis(object arg0, CultureInfo culture);
    public static string SparseTreeTokenAlreadyExists();
    public static string SparseTreeTokenAlreadyExists(CultureInfo culture);
    public static string SparseTreeNoEmptyStringToken();
    public static string SparseTreeNoEmptyStringToken(CultureInfo culture);
    public static string InvalidCatalogNodePathAllowWildcard(object arg0);
    public static string InvalidCatalogNodePathAllowWildcard(object arg0, CultureInfo culture);
    public static string InvalidCatalogNodePathNoWildcard(object arg0);
    public static string InvalidCatalogNodePathNoWildcard(object arg0, CultureInfo culture);
    public static string ServicingStepNotExecuted(object arg0, object arg1, object arg2);
    public static string ServicingStepNotExecuted(object arg0, object arg1, object arg2, CultureInfo culture);
    public static string ExecutingServicingStep(object arg0, object arg1, object arg2);
    public static string ExecutingServicingStep(object arg0, object arg1, object arg2, CultureInfo culture);
    public static string ServicingStepFailed(object arg0, object arg1, object arg2);
    public static string ServicingStepFailed(object arg0, object arg1, object arg2, CultureInfo culture);
    public static string ServicingStepPassed(object arg0, object arg1, object arg2);
    public static string ServicingStepPassed(object arg0, object arg1, object arg2, CultureInfo culture);
    public static string ServicingStepPassedWithWarnings(object arg0, object arg1, object arg2);
    public static string ServicingStepPassedWithWarnings(object arg0, object arg1, object arg2, CultureInfo culture);
    public static string ServicingStepPassedWithSkipChildren(object arg0, object arg1, object arg2);
    public static string ServicingStepPassedWithSkipChildren(object arg0, object arg1, object arg2, CultureInfo culture);
    public static string ServicingStepStateChange(object arg0, object arg1, object arg2, object arg3);
    public static string ServicingStepStateChange(object arg0, object arg1, object arg2, object arg3, CultureInfo culture);
    public static string ServicingStepValidated(object arg0, object arg1, object arg2);
    public static string ServicingStepValidated(object arg0, object arg1, object arg2, CultureInfo culture);
    public static string ServicingStepValidatedWithWarnings(object arg0, object arg1, object arg2);
    public static string ServicingStepValidatedWithWarnings(object arg0, object arg1, object arg2, CultureInfo culture);
    public static string ValidatingServicingStep(object arg0, object arg1, object arg2);
    public static string ValidatingServicingStep(object arg0, object arg1, object arg2, CultureInfo culture);
    public static string ServicingStepSkipped(object arg0, object arg1, object arg2);
    public static string ServicingStepSkipped(object arg0, object arg1, object arg2, CultureInfo culture);
    public static string CollectionDoesNotExist(object arg0);
    public static string CollectionDoesNotExist(object arg0, CultureInfo culture);
    public static string InvalidRegistryValue(object arg0, object arg1);
    public static string InvalidRegistryValue(object arg0, object arg1, CultureInfo culture);
    public static string GlobalSecurityAdministerConfigurationPermission();
    public static string GlobalSecurityAdministerConfigurationPermission(CultureInfo culture);
    public static string AccessCheckExceptionPrivilegeFormat(object arg0, object arg1);
    public static string AccessCheckExceptionPrivilegeFormat(object arg0, object arg1, CultureInfo culture);
    public static string SharePointServiceAccountsGroupNotFound(object arg0);
    public static string SharePointServiceAccountsGroupNotFound(object arg0, CultureInfo culture);
    public static string FailedToAddSharePointServiceAccount(object arg0, object arg1);
    public static string FailedToAddSharePointServiceAccount(object arg0, object arg1, CultureInfo culture);
    public static string FailedToAddSharePointServiceAccountWithException(object arg0, object arg1, object arg2);
    public static string FailedToAddSharePointServiceAccountWithException(object arg0, object arg1, object arg2, CultureInfo culture);
    public static string FailedToMapWssBackToTfsWithException(object arg0, object arg1);
    public static string FailedToMapWssBackToTfsWithException(object arg0, object arg1, CultureInfo culture);
    public static string FailedToAutoConfigureSharePointWebApplication(object arg0, object arg1);
    public static string FailedToAutoConfigureSharePointWebApplication(object arg0, object arg1, CultureInfo culture);
    public static string InvalidPathMissingRoot(object arg0);
    public static string InvalidPathMissingRoot(object arg0, CultureInfo culture);
    public static string TeamSystemWebAccessUrlIsMissing(object arg0);
    public static string TeamSystemWebAccessUrlIsMissing(object arg0, CultureInfo culture);
    public static string ApplicationUrlIsNotInitialized();
    public static string ApplicationUrlIsNotInitialized(CultureInfo culture);
    public static string CollectionIdIsNotInitialized();
    public static string CollectionIdIsNotInitialized(CultureInfo culture);
    public static string FrameworkEventingServiceDescription();
    public static string FrameworkEventingServiceDescription(CultureInfo culture);
    public static string FrameworkIdentityServiceDescription();
    public static string FrameworkIdentityServiceDescription(CultureInfo culture);
    public static string FrameworkIdentityService2Description();
    public static string FrameworkIdentityService2Description(CultureInfo culture);
    public static string FrameworkJobServiceDescription();
    public static string FrameworkJobServiceDescription(CultureInfo culture);
    public static string FrameworkLocationServiceDescription();
    public static string FrameworkLocationServiceDescription(CultureInfo culture);
    public static string FrameworkMessageQueueServiceDescription();
    public static string FrameworkMessageQueueServiceDescription(CultureInfo culture);
    public static string FrameworkPropertyServiceDescription();
    public static string FrameworkPropertyServiceDescription(CultureInfo culture);
    public static string FrameworkRegistryServiceDescription();
    public static string FrameworkRegistryServiceDescription(CultureInfo culture);
    public static string FrameworkSecurityServiceDescription();
    public static string FrameworkSecurityServiceDescription(CultureInfo culture);
    public static string FrameworkMethodologyServiceDescription();
    public static string FrameworkMethodologyServiceDescription(CultureInfo culture);
    public static string FrameworkMethodologyUploadServiceDescription();
    public static string FrameworkMethodologyUploadServiceDescription(CultureInfo culture);
    public static string FrameworkProcessTemplateServiceDescription();
    public static string FrameworkProcessTemplateServiceDescription(CultureInfo culture);
    public static string FrameworkStrongBoxServiceDescription();
    public static string FrameworkStrongBoxServiceDescription(CultureInfo culture);
    public static string FrameworkStrongBoxFileUploadServiceDescription();
    public static string FrameworkStrongBoxFileUploadServiceDescription(CultureInfo culture);
    public static string FrameworkStrongBoxFileDownloadServiceDescription();
    public static string FrameworkStrongBoxFileDownloadServiceDescription(CultureInfo culture);
    public static string CatalogServiceDescriptrion();
    public static string CatalogServiceDescriptrion(CultureInfo culture);
    public static string CollectionManagementServiceDescription();
    public static string CollectionManagementServiceDescription(CultureInfo culture);
    public static string FrameworkAdministrationServiceDescription();
    public static string FrameworkAdministrationServiceDescription(CultureInfo culture);
    public static string ServicingResourceUploadServiceDescription();
    public static string ServicingResourceUploadServiceDescription(CultureInfo culture);
    public static string FrameworkAccessControlServiceDescription();
    public static string FrameworkAccessControlServiceDescription(CultureInfo culture);
    public static string AccessMappingIsDefaultMessage(object arg0);
    public static string AccessMappingIsDefaultMessage(object arg0, CultureInfo culture);
    public static string FailedToAutoActivateSharePointWebApplicationFeature(object arg0, object arg1, object arg2, object arg3);
    public static string FailedToAutoActivateSharePointWebApplicationFeature(object arg0, object arg1, object arg2, object arg3, CultureInfo culture);
    public static string NullArtifactUrlInUrlList();
    public static string NullArtifactUrlInUrlList(CultureInfo culture);
    public static string WorkItemOnlyViewUsersGroupName();
    public static string WorkItemOnlyViewUsersGroupName(CultureInfo culture);
    public static string WorkItemOnlyViewUsersGroupDescription();
    public static string WorkItemOnlyViewUsersGroupDescription(CultureInfo culture);
    public static string CannotDetachFailedInitializeCollection(object arg0);
    public static string CannotDetachFailedInitializeCollection(object arg0, CultureInfo culture);
    public static string FailureGetArtifactWithTool(object arg0);
    public static string FailureGetArtifactWithTool(object arg0, CultureInfo culture);
    public static string MemoryCacheListKeyAlreadyPresent();
    public static string MemoryCacheListKeyAlreadyPresent(CultureInfo culture);
    public static string UnableToEstablishConnection();
    public static string UnableToEstablishConnection(CultureInfo culture);
    public static string EntityModel_AccessZoneNotFound(object arg0);
    public static string EntityModel_AccessZoneNotFound(object arg0, CultureInfo culture);
    public static string EntityModel_AdministratorsMessage(object arg0);
    public static string EntityModel_AdministratorsMessage(object arg0, CultureInfo culture);
    public static string EntityModel_CollectionOrganizationalNodeNotFound();
    public static string EntityModel_CollectionOrganizationalNodeNotFound(CultureInfo culture);
    public static string EntityModel_DefaultSiteCreationLocationNotConfigured();
    public static string EntityModel_DefaultSiteCreationLocationNotConfigured(CultureInfo culture);
    public static string EntityModel_DefaultSiteCreationLocationNotConfiguredSubTitle();
    public static string EntityModel_DefaultSiteCreationLocationNotConfiguredSubTitle(CultureInfo culture);
    public static string EntityModel_DefaultZoneRequiresAllPaths(object arg0, object arg1);
    public static string EntityModel_DefaultZoneRequiresAllPaths(object arg0, object arg1, CultureInfo culture);
    public static string EntityModel_HelpLink();
    public static string EntityModel_HelpLink(CultureInfo culture);
    public static string EntityModel_NoUriForCurrentZone(object arg0);
    public static string EntityModel_NoUriForCurrentZone(object arg0, CultureInfo culture);
    public static string EntityModel_PortalOwnerInfo(object arg0, object arg1);
    public static string EntityModel_PortalOwnerInfo(object arg0, object arg1, CultureInfo culture);
    public static string EntityModel_PortalSiteNotConfigured();
    public static string EntityModel_PortalSiteNotConfigured(CultureInfo culture);
    public static string EntityModel_PortalSiteNotConfiguredSubTitle();
    public static string EntityModel_PortalSiteNotConfiguredSubTitle(CultureInfo culture);
    public static string EntityModel_ProcessGuidanceNotConfigured();
    public static string EntityModel_ProcessGuidanceNotConfigured(CultureInfo culture);
    public static string EntityModel_ProcessGuidanceNotConfiguredSubTitle();
    public static string EntityModel_ProcessGuidanceNotConfiguredSubTitle(CultureInfo culture);
    public static string EntityModel_ProjectIdNotFound(object arg0);
    public static string EntityModel_ProjectIdNotFound(object arg0, CultureInfo culture);
    public static string EntityModel_ProjectUriNotFound(object arg0);
    public static string EntityModel_ProjectUriNotFound(object arg0, CultureInfo culture);
    public static string EntityModel_ReadOnly();
    public static string EntityModel_ReadOnly(CultureInfo culture);
    public static string EntityModel_ReportingCubeInvalid();
    public static string EntityModel_ReportingCubeInvalid(CultureInfo culture);
    public static string EntityModel_ReportingNotConfigured();
    public static string EntityModel_ReportingNotConfigured(CultureInfo culture);
    public static string EntityModel_ReportingNotConfiguredSubTitle();
    public static string EntityModel_ReportingNotConfiguredSubTitle(CultureInfo culture);
    public static string EntityModel_ServiceDefinitionNotFound(object arg0);
    public static string EntityModel_ServiceDefinitionNotFound(object arg0, CultureInfo culture);
    public static string EntityModel_WebAccessNotConfigured();
    public static string EntityModel_WebAccessNotConfigured(CultureInfo culture);
    public static string EntityModel_WebAccessNotConfiguredSubTitle();
    public static string EntityModel_WebAccessNotConfiguredSubTitle(CultureInfo culture);
    public static string EntityModel_BadBooleanFormat();
    public static string EntityModel_BadBooleanFormat(CultureInfo culture);
    public static string EntityModel_BadEnumFormat();
    public static string EntityModel_BadEnumFormat(CultureInfo culture);
    public static string EntityModel_BadGuidFormat();
    public static string EntityModel_BadGuidFormat(CultureInfo culture);
    public static string EntityModel_BadInt32Format();
    public static string EntityModel_BadInt32Format(CultureInfo culture);
    public static string EntityModel_DataDefinesUnsupportedSchema();
    public static string EntityModel_DataDefinesUnsupportedSchema(CultureInfo culture);
    public static string EntityModel_DataDoesNotDefineSchema();
    public static string EntityModel_DataDoesNotDefineSchema(CultureInfo culture);
    public static string EntityModel_IncompatibleType();
    public static string EntityModel_IncompatibleType(CultureInfo culture);
    public static string EntityModel_InvalidInstanceId();
    public static string EntityModel_InvalidInstanceId(CultureInfo culture);
    public static string EntityModel_InvalidObjectRefValue_BadFormat();
    public static string EntityModel_InvalidObjectRefValue_BadFormat(CultureInfo culture);
    public static string EntityModel_InvalidObjectRefValue_BadIdentifier();
    public static string EntityModel_InvalidObjectRefValue_BadIdentifier(CultureInfo culture);
    public static string EntityModel_InvalidObjectRefValue_UnknownIdentifier();
    public static string EntityModel_InvalidObjectRefValue_UnknownIdentifier(CultureInfo culture);
    public static string EntityModel_MustDeriveFromTfsObject();
    public static string EntityModel_MustDeriveFromTfsObject(CultureInfo culture);
    public static string EntityModel_SessionMissing();
    public static string EntityModel_SessionMissing(CultureInfo culture);
    public static string EntityModel_TooManyFieldValues();
    public static string EntityModel_TooManyFieldValues(CultureInfo culture);
    public static string EntityModel_UnknownType(object arg0);
    public static string EntityModel_UnknownType(object arg0, CultureInfo culture);
    public static string EntityModel_AlreadyBoundToAnotherSession();
    public static string EntityModel_AlreadyBoundToAnotherSession(CultureInfo culture);
    public static string EntityModel_AlreadyHasParent();
    public static string EntityModel_AlreadyHasParent(CultureInfo culture);
    public static string EntityModel_CannotResolveUriWithoutSession();
    public static string EntityModel_CannotResolveUriWithoutSession(CultureInfo culture);
    public static string EntityModel_FieldFiltersNotSupported();
    public static string EntityModel_FieldFiltersNotSupported(CultureInfo culture);
    public static string EntityModel_ParentCannotChange();
    public static string EntityModel_ParentCannotChange(CultureInfo culture);
    public static string EntityModel_RefreshNotAvailable();
    public static string EntityModel_RefreshNotAvailable(CultureInfo culture);
    public static string EntityModel_SecurityNamespaceNotAvailable();
    public static string EntityModel_SecurityNamespaceNotAvailable(CultureInfo culture);
    public static string EntityModel_UnsupportedDerivedType();
    public static string EntityModel_UnsupportedDerivedType(CultureInfo culture);
    public static string WebAccess_UnSupportedArtifactType(object arg0);
    public static string WebAccess_UnSupportedArtifactType(object arg0, CultureInfo culture);
    public static string InvalidAsynchronousOperationParameter(object arg0);
    public static string InvalidAsynchronousOperationParameter(object arg0, CultureInfo culture);
    public static string DequeueTimeout(object arg0);
    public static string DequeueTimeout(object arg0, CultureInfo culture);
    public static string TeamByIdDoesNotExist(object arg0);
    public static string TeamByIdDoesNotExist(object arg0, CultureInfo culture);
    public static string TeamByNameDoesNotExist(object arg0);
    public static string TeamByNameDoesNotExist(object arg0, CultureInfo culture);
    public static string FrameworkIdentityManagementWebDescription();
    public static string FrameworkIdentityManagementWebDescription(CultureInfo culture);
    public static string FrameworkFileHandlerServiceDescription();
    public static string FrameworkFileHandlerServiceDescription(CultureInfo culture);
    public static string FrameworkDownloadServiceDescription();
    public static string FrameworkDownloadServiceDescription(CultureInfo culture);
    public static string FrameworkSecurityManagementWebDescription();
    public static string FrameworkSecurityManagementWebDescription(CultureInfo culture);
    public static string ProjectCollectionContributorsGroupName();
    public static string ProjectCollectionContributorsGroupName(CultureInfo culture);
    public static string ProjectCollectionContributorsGroupDesc();
    public static string ProjectCollectionContributorsGroupDesc(CultureInfo culture);
    public static string PublicAccessMappingDisplayName();
    public static string PublicAccessMappingDisplayName(CultureInfo culture);
    public static string ServerAccessMappingDisplayName();
    public static string ServerAccessMappingDisplayName(CultureInfo culture);
    public static string AlternateAccessMappingDisplayName();
    public static string AlternateAccessMappingDisplayName(CultureInfo culture);
    public static string TextLoggerInfoLine(object arg0);
    public static string TextLoggerInfoLine(object arg0, CultureInfo culture);
    public static string TextLoggerWarningLine(object arg0);
    public static string TextLoggerWarningLine(object arg0, CultureInfo culture);
    public static string TextLoggerErrorLine(object arg0);
    public static string TextLoggerErrorLine(object arg0, CultureInfo culture);
    public static string IdentityPropertyReadOnly(object arg0);
    public static string IdentityPropertyReadOnly(object arg0, CultureInfo culture);
    public static string ServerIncompatible(object arg0);
    public static string ServerIncompatible(object arg0, CultureInfo culture);
    public static string InvalidPropertyScope();
    public static string InvalidPropertyScope(CultureInfo culture);
    public static string InvalidStringPropertyValueNullAllowed(object arg0, object arg1, object arg2, object arg3, object arg4);
    public static string InvalidStringPropertyValueNullAllowed(object arg0, object arg1, object arg2, object arg3, object arg4, CultureInfo culture);
    public static string InvalidStringPropertyValueNullForbidden(object arg0, object arg1, object arg2, object arg3, object arg4);
    public static string InvalidStringPropertyValueNullForbidden(object arg0, object arg1, object arg2, object arg3, object arg4, CultureInfo culture);
    public static string ValueTypeOutOfRange(object arg0, object arg1, object arg2, object arg3, object arg4);
    public static string ValueTypeOutOfRange(object arg0, object arg1, object arg2, object arg3, object arg4, CultureInfo culture);
    public static string PropertyValueOutOfRange(object arg0, object arg1, object arg2, object arg3);
    public static string PropertyValueOutOfRange(object arg0, object arg1, object arg2, object arg3, CultureInfo culture);
    public static string UnsupportedPropertyValueType(object arg0, object arg1);
    public static string UnsupportedPropertyValueType(object arg0, object arg1, CultureInfo culture);
    public static string DoubleValueOutOfRange(object arg0, object arg1);
    public static string DoubleValueOutOfRange(object arg0, object arg1, CultureInfo culture);
    public static string DateTimeKindMustBeSpecified();
    public static string DateTimeKindMustBeSpecified(CultureInfo culture);
    public static string DateTimeAgoAMinute();
    public static string DateTimeAgoAMinute(CultureInfo culture);
    public static string DateTimeAgoLessThanMinute();
    public static string DateTimeAgoLessThanMinute(CultureInfo culture);
    public static string DateTimeAgoMinutes(object arg0);
    public static string DateTimeAgoMinutes(object arg0, CultureInfo culture);
    public static string DateTimeAgoADay();
    public static string DateTimeAgoADay(CultureInfo culture);
    public static string DateTimeAgoAMonth();
    public static string DateTimeAgoAMonth(CultureInfo culture);
    public static string DateTimeAgoAnHour();
    public static string DateTimeAgoAnHour(CultureInfo culture);
    public static string DateTimeAgoAWeek();
    public static string DateTimeAgoAWeek(CultureInfo culture);
    public static string DateTimeAgoAYear();
    public static string DateTimeAgoAYear(CultureInfo culture);
    public static string DateTimeAgoDays(object arg0);
    public static string DateTimeAgoDays(object arg0, CultureInfo culture);
    public static string DateTimeAgoHours(object arg0);
    public static string DateTimeAgoHours(object arg0, CultureInfo culture);
    public static string DateTimeAgoMonths(object arg0);
    public static string DateTimeAgoMonths(object arg0, CultureInfo culture);
    public static string DateTimeAgoWeeks(object arg0);
    public static string DateTimeAgoWeeks(object arg0, CultureInfo culture);
    public static string DateTimeAgoYears(object arg0);
    public static string DateTimeAgoYears(object arg0, CultureInfo culture);
    public static string TimeStampTodayAt(object arg0);
    public static string TimeStampTodayAt(object arg0, CultureInfo culture);
    public static string TimeStampYesterdayAt(object arg0);
    public static string TimeStampYesterdayAt(object arg0, CultureInfo culture);
    public static string TimeStampDayAt(object arg0, object arg1);
    public static string TimeStampDayAt(object arg0, object arg1, CultureInfo culture);
    public static string TimeStampFullDate(object arg0, object arg1);
    public static string TimeStampFullDate(object arg0, object arg1, CultureInfo culture);
    public static string UnauthorizedUserForReauthentication();
    public static string UnauthorizedUserForReauthentication(CultureInfo culture);
    public static string FrameworkAreasManagementWebDescription();
    public static string FrameworkAreasManagementWebDescription(CultureInfo culture);
    public static string FrameworkIterationsManagementWebDescription();
    public static string FrameworkIterationsManagementWebDescription(CultureInfo culture);
    public static string FrameworkNewTeamProjectWebDescription();
    public static string FrameworkNewTeamProjectWebDescription(CultureInfo culture);
    public static string InvalidPropertyName(object arg0);
    public static string InvalidPropertyName(object arg0, CultureInfo culture);
    public static string PerformanceCounterCategoryNotRegistered(object arg0);
    public static string PerformanceCounterCategoryNotRegistered(object arg0, CultureInfo culture);
    public static string FrameworkProjectAlertsWebDescription();
    public static string FrameworkProjectAlertsWebDescription(CultureInfo culture);
    public static string FrameworkTaskBoardWebDescription();
    public static string FrameworkTaskBoardWebDescription(CultureInfo culture);
    public static string GSS_ARGUMENT_EXCEPTION(object arg0);
    public static string GSS_ARGUMENT_EXCEPTION(object arg0, CultureInfo culture);
    public static string GSS_BAD_ACCOUNT_NAME_ARRAY(object arg0);
    public static string GSS_BAD_ACCOUNT_NAME_ARRAY(object arg0, CultureInfo culture);
    public static string GSS_BAD_ACTIONID(object arg0, object arg1);
    public static string GSS_BAD_ACTIONID(object arg0, object arg1, CultureInfo culture);
    public static string GSS_BAD_ACTIONID_ARRAY(object arg0);
    public static string GSS_BAD_ACTIONID_ARRAY(object arg0, CultureInfo culture);
    public static string GSS_BAD_CLASSID_ACTIONID_PAIR_EXCEPTION(object arg0, object arg1);
    public static string GSS_BAD_CLASSID_ACTIONID_PAIR_EXCEPTION(object arg0, object arg1, CultureInfo culture);
    public static string GSS_BAD_DISTINGUISHED_NAME(object arg0);
    public static string GSS_BAD_DISTINGUISHED_NAME(object arg0, CultureInfo culture);
    public static string GSS_BAD_DISTINGUISHED_NAME_ARRAY(object arg0);
    public static string GSS_BAD_DISTINGUISHED_NAME_ARRAY(object arg0, CultureInfo culture);
    public static string GSS_BAD_OBJECTID(object arg0, object arg1);
    public static string GSS_BAD_OBJECTID(object arg0, object arg1, CultureInfo culture);
    public static string GSS_BAD_OBJECTID_ARRAY(object arg0);
    public static string GSS_BAD_OBJECTID_ARRAY(object arg0, CultureInfo culture);
    public static string GSS_BAD_OBJECT_CLASS_ID(object arg0, object arg1);
    public static string GSS_BAD_OBJECT_CLASS_ID(object arg0, object arg1, CultureInfo culture);
    public static string GSS_BAD_PARENTOBJECTID_SELFPARENT(object arg0, object arg1);
    public static string GSS_BAD_PARENTOBJECTID_SELFPARENT(object arg0, object arg1, CultureInfo culture);
    public static string GSS_BAD_PROJECT_URI(object arg0, object arg1);
    public static string GSS_BAD_PROJECT_URI(object arg0, object arg1, CultureInfo culture);
    public static string GSS_BAD_PROJECT_URI_ARRAY(object arg0);
    public static string GSS_BAD_PROJECT_URI_ARRAY(object arg0, CultureInfo culture);
    public static string GSS_BAD_SID_ARRAY(object arg0);
    public static string GSS_BAD_SID_ARRAY(object arg0, CultureInfo culture);
    public static string NAMESPACE_CREATE_PROJECTS();
    public static string NAMESPACE_CREATE_PROJECTS(CultureInfo culture);
    public static string NAMESPACE_DIAGNOSTIC_TRACE();
    public static string NAMESPACE_DIAGNOSTIC_TRACE(CultureInfo culture);
    public static string NAMESPACE_GENERIC_READ();
    public static string NAMESPACE_GENERIC_READ(CultureInfo culture);
    public static string NAMESPACE_GENERIC_WRITE();
    public static string NAMESPACE_GENERIC_WRITE(CultureInfo culture);
    public static string NAMESPACE_MANAGE_LINK_TYPES();
    public static string NAMESPACE_MANAGE_LINK_TYPES(CultureInfo culture);
    public static string NAMESPACE_MANAGE_TEMPLATE();
    public static string NAMESPACE_MANAGE_TEMPLATE(CultureInfo culture);
    public static string NAMESPACE_MANAGE_TEST_CONTROLLERS();
    public static string NAMESPACE_MANAGE_TEST_CONTROLLERS(CultureInfo culture);
    public static string NAMESPACE_SYNCHRONIZE_READ();
    public static string NAMESPACE_SYNCHRONIZE_READ(CultureInfo culture);
    public static string NAMESPACE_TRIGGER_EVENT();
    public static string NAMESPACE_TRIGGER_EVENT(CultureInfo culture);
    public static string PROJECT_ADMINISTER_BUILD();
    public static string PROJECT_ADMINISTER_BUILD(CultureInfo culture);
    public static string PROJECT_CHECK_IN();
    public static string PROJECT_CHECK_IN(CultureInfo culture);
    public static string PROJECT_DELETE();
    public static string PROJECT_DELETE(CultureInfo culture);
    public static string PROJECT_DELETE_TEST_RESULTS();
    public static string PROJECT_DELETE_TEST_RESULTS(CultureInfo culture);
    public static string PROJECT_EDIT_BUILD_STATUS();
    public static string PROJECT_EDIT_BUILD_STATUS(CultureInfo culture);
    public static string PROJECT_GENERIC_READ();
    public static string PROJECT_GENERIC_READ(CultureInfo culture);
    public static string PROJECT_GENERIC_WRITE();
    public static string PROJECT_GENERIC_WRITE(CultureInfo culture);
    public static string PROJECT_MANAGE_TEST_CONFIGURATIONS();
    public static string PROJECT_MANAGE_TEST_CONFIGURATIONS(CultureInfo culture);
    public static string PROJECT_MANAGE_TEST_ENVIRONMENTS();
    public static string PROJECT_MANAGE_TEST_ENVIRONMENTS(CultureInfo culture);
    public static string PROJECT_OVERRIDE_BUILD_CHECKIN_VALIDATION();
    public static string PROJECT_OVERRIDE_BUILD_CHECKIN_VALIDATION(CultureInfo culture);
    public static string PROJECT_PUBLISH_TEST_RESULTS();
    public static string PROJECT_PUBLISH_TEST_RESULTS(CultureInfo culture);
    public static string PROJECT_START_BUILD();
    public static string PROJECT_START_BUILD(CultureInfo culture);
    public static string PROJECT_UPDATE_BUILD();
    public static string PROJECT_UPDATE_BUILD(CultureInfo culture);
    public static string PROJECT_VIEW_TEST_RESULTS();
    public static string PROJECT_VIEW_TEST_RESULTS(CultureInfo culture);
    public static string CannotResolveServerHostUsingAD(object arg0, object arg1);
    public static string CannotResolveServerHostUsingAD(object arg0, object arg1, CultureInfo culture);
    public static string MultipleIdentitiesFoundMessage(object arg0, object arg1);
    public static string MultipleIdentitiesFoundMessage(object arg0, object arg1, CultureInfo culture);
    public static string InvalidServerRequest(object arg0);
    public static string InvalidServerRequest(object arg0, CultureInfo culture);
    public static string FrameworkConnectedServicesServiceDescription();
    public static string FrameworkConnectedServicesServiceDescription(CultureInfo culture);
    public static string JavaScriptSerializer_JSON_IllegalPrimitive(object arg0);
    public static string JavaScriptSerializer_JSON_IllegalPrimitive(object arg0, CultureInfo culture);
    public static string JavaScriptSerializer_JSON_DepthLimitExceeded();
    public static string JavaScriptSerializer_JSON_DepthLimitExceeded(CultureInfo culture);
    public static string JavaScriptSerializer_JSON_InvalidArrayStart();
    public static string JavaScriptSerializer_JSON_InvalidArrayStart(CultureInfo culture);
    public static string JavaScriptSerializer_JSON_InvalidArrayExpectComma();
    public static string JavaScriptSerializer_JSON_InvalidArrayExpectComma(CultureInfo culture);
    public static string JavaScriptSerializer_JSON_InvalidArrayExtraComma();
    public static string JavaScriptSerializer_JSON_InvalidArrayExtraComma(CultureInfo culture);
    public static string JavaScriptSerializer_JSON_InvalidArrayEnd();
    public static string JavaScriptSerializer_JSON_InvalidArrayEnd(CultureInfo culture);
    public static string JavaScriptSerializer_JSON_ExpectedOpenBrace();
    public static string JavaScriptSerializer_JSON_ExpectedOpenBrace(CultureInfo culture);
    public static string JavaScriptSerializer_JSON_InvalidMemberName();
    public static string JavaScriptSerializer_JSON_InvalidMemberName(CultureInfo culture);
    public static string JavaScriptSerializer_JSON_InvalidObject();
    public static string JavaScriptSerializer_JSON_InvalidObject(CultureInfo culture);
    public static string JavaScriptSerializer_JSON_UnterminatedString();
    public static string JavaScriptSerializer_JSON_UnterminatedString(CultureInfo culture);
    public static string JavaScriptSerializer_JSON_BadEscape();
    public static string JavaScriptSerializer_JSON_BadEscape(CultureInfo culture);
    public static string JavaScriptSerializer_JSON_StringNotQuoted();
    public static string JavaScriptSerializer_JSON_StringNotQuoted(CultureInfo culture);
    public static string FrameworkSignOutWebDescription();
    public static string FrameworkSignOutWebDescription(CultureInfo culture);
    public static string FrameworkFileContainerDescription();
    public static string FrameworkFileContainerDescription(CultureInfo culture);
    public static string InvalidSqlTimestampString(object arg0);
    public static string InvalidSqlTimestampString(object arg0, CultureInfo culture);
    public static string ServiceChangeError(object arg0);
    public static string ServiceChangeError(object arg0, CultureInfo culture);
    public static string ServiceControlManagerOpenError();
    public static string ServiceControlManagerOpenError(CultureInfo culture);
    public static string ServiceOpenError(object arg0);
    public static string ServiceOpenError(object arg0, CultureInfo culture);
    public static string BAD_ALIAS(object arg0);
    public static string BAD_ALIAS(object arg0, CultureInfo culture);
    public static string BAD_ALIAS_NOT_ALPHANUM(object arg0);
    public static string BAD_ALIAS_NOT_ALPHANUM(object arg0, CultureInfo culture);
    public static string FrameworkRoomsHubWebDescription();
    public static string FrameworkRoomsHubWebDescription(CultureInfo culture);
    public static string FrameworkUtilizationUsageSummaryDescription();
    public static string FrameworkUtilizationUsageSummaryDescription(CultureInfo culture);
    public static string FrameworkUtilizationUserUsageSummaryDescription();
    public static string FrameworkUtilizationUserUsageSummaryDescription(CultureInfo culture);
    public static string LocationService();
    public static string LocationService(CultureInfo culture);
    public static string AccountTenantExists();
    public static string AccountTenantExists(CultureInfo culture);
    public static string InvalidInheritLevelServiceDefinition(object arg0);
    public static string InvalidInheritLevelServiceDefinition(object arg0, CultureInfo culture);
    public static string InvalidLocationMappingsServiceDefinition();
    public static string InvalidLocationMappingsServiceDefinition(CultureInfo culture);
    public static string InvalidInheritLevelRelativeServiceDefinition(object arg0, object arg1);
    public static string InvalidInheritLevelRelativeServiceDefinition(object arg0, object arg1, CultureInfo culture);
    public static string InvalidGroupDescriptor(object arg0);
    public static string InvalidGroupDescriptor(object arg0, CultureInfo culture);
    public static string PROCESS_PERMISSION_DELETE();
    public static string PROCESS_PERMISSION_DELETE(CultureInfo culture);
    public static string PROCESS_PERMISSION_EDIT();
    public static string PROCESS_PERMISSION_EDIT(CultureInfo culture);
    public static string PROCESS_PERMISSION_CREATE();
    public static string PROCESS_PERMISSION_CREATE(CultureInfo culture);
    public static string PROCESS_PERMISSIONS_ADMINISTER();
    public static string PROCESS_PERMISSIONS_ADMINISTER(CultureInfo culture);
    public static string PROCESS_PERMISSION_READ_RULES();
    public static string PROCESS_PERMISSION_READ_RULES(CultureInfo culture);
    public static string PROJECT_WORK_ITEM_DELETE();
    public static string PROJECT_WORK_ITEM_DELETE(CultureInfo culture);
    public static string PROJECT_WORK_ITEM_MOVE();
    public static string PROJECT_WORK_ITEM_MOVE(CultureInfo culture);
    public static string PROJECT_WORK_ITEM_PERMANENTLY_DELETE();
    public static string PROJECT_WORK_ITEM_PERMANENTLY_DELETE(CultureInfo culture);
    public static string ErrorCreatingTempFile(object arg0);
    public static string ErrorCreatingTempFile(object arg0, CultureInfo culture);
    public static string PROJECT_RENAME();
    public static string PROJECT_RENAME(CultureInfo culture);
    public static string XML_SCHEMAVALIDATION_READSCHEMAFAILED();
    public static string XML_SCHEMAVALIDATION_READSCHEMAFAILED(CultureInfo culture);
    public static string XML_SCHEMAVALIDATION_FAILED(object arg0, object arg1);
    public static string XML_SCHEMAVALIDATION_FAILED(object arg0, object arg1, CultureInfo culture);
    public static string BAD_DIRECTORY_ALIAS(object arg0);
    public static string BAD_DIRECTORY_ALIAS(object arg0, CultureInfo culture);
    public static string InvalidHexString();
    public static string InvalidHexString(CultureInfo culture);
    public static string PROJECT_MANAGE_PROPERTIES();
    public static string PROJECT_MANAGE_PROPERTIES(CultureInfo culture);
    public static string PROJECT_MANAGE_SYSTEM_PROPERTIES();
    public static string PROJECT_MANAGE_SYSTEM_PROPERTIES(CultureInfo culture);
    public static string PROJECT_BYPASS_PROPERTY_CACHE();
    public static string PROJECT_BYPASS_PROPERTY_CACHE(CultureInfo culture);
    public static string PROJECT_BYPASS_RULES();
    public static string PROJECT_BYPASS_RULES(CultureInfo culture);
    public static string PROJECT_SUPPRESS_NOTIFICATIONS();
    public static string PROJECT_SUPPRESS_NOTIFICATIONS(CultureInfo culture);
    public static string NAMESPACE_DELETE_FIELD();
    public static string NAMESPACE_DELETE_FIELD(CultureInfo culture);
    public static string NAMESPACE_MANAGE_ENTERPRISE_POLICIES();
    public static string NAMESPACE_MANAGE_ENTERPRISE_POLICIES(CultureInfo culture);
    public static string PROJECT_UPDATE_VISIBILITY();
    public static string PROJECT_UPDATE_VISIBILITY(CultureInfo culture);
    public static string PROCESS_PERMISSION_READ();
    public static string PROCESS_PERMISSION_READ(CultureInfo culture);
    public static string MessageQueueAccessMappingDisplayName();
    public static string MessageQueueAccessMappingDisplayName(CultureInfo culture);
    public static string PROJECT_CHANGE_PROCESS();
    public static string PROJECT_CHANGE_PROCESS(CultureInfo culture);
    public static string PROJECT_AGILETOOLS_BACKLOG();
    public static string PROJECT_AGILETOOLS_BACKLOG(CultureInfo culture);
    public static string PROJECT_AGILETOOLS_PLANS();
    public static string PROJECT_AGILETOOLS_PLANS(CultureInfo culture);
}
[EditorBrowsableAttribute("1")]
public class Microsoft.TeamFoundation.Common.Internal.TfsAssemblyResolver : object {
    private object m_lock;
    private Dictionary`2<string, Assembly> m_replacementAssemblies;
    private static AssemblyRedirectInfo[] s_assemblyRedirects;
    private static TfsAssemblyResolver();
    public sealed virtual void Dispose();
    private Assembly OnAssemblyResolve(object sender, ResolveEventArgs args);
}
[EditorBrowsableAttribute("1")]
public class Microsoft.TeamFoundation.Common.Internal.TfsBackgroundWorkerManager : object {
    private static TfsBackgroundWorkerManager s_instance;
    private static int cDefaultMaxWorkers;
    private int m_maxWorkers;
    private bool isShuttingDown;
    private Dictionary`2<object, BackgroundTask> m_allTasks;
    private Dictionary`2<Guid, int> m_groupMaxWorkers;
    private List`1<BackgroundTask> m_runningTasks;
    private List`1<BackgroundTask> m_queuedTasks;
    private List`1<BackgroundWorker> m_freeWorkers;
    private List`1<BackgroundWorker> m_busyWorkers;
    private object m_lock;
    private CultureInfo m_culture;
    private CultureInfo m_uiCulture;
    private static int s_taskCounter;
    public static TfsBackgroundWorkerManager Instance { get; }
    public int FreeWorkersCount { get; }
    public int MaxWorkersCount { get; }
    public static int TaskCounter { get; }
    public TfsBackgroundWorkerManager(int maxWorkers);
    public static TfsBackgroundWorkerManager get_Instance();
    public void Shutdown();
    public bool RegisterWorker(TfsBaseWorker tfsWorker);
    public bool RegisterWorker(TfsBaseWorker tfsWorker, Guid groupId);
    public void SetWorkerGroupThreadLimit(Guid groupId, int maxWorkers);
    public bool RunWorker(object identifier, object argument, TfsBackgroundWorkerPriority priority);
    public TfsWorkerState QueryStatus(object identifier);
    public bool IsQueued(object identifier);
    public bool IsQueuedOrRunning(object identifier);
    public bool TryGetWaitHandle(object identifier, WaitHandle& waitHandle);
    public bool GetArgument(object identifier, Object& argument);
    public bool SetArgument(object identifier, object argument);
    public bool CancelWorker(object identifier);
    public IEnumerable`1<object> GetIdentifiersByGroup(Guid groupId);
    public void CancelAll();
    public void CancelAllQueued();
    public sealed virtual void Dispose();
    public int get_FreeWorkersCount();
    public int get_MaxWorkersCount();
    protected void Dispose(bool disposing);
    private void Initialize();
    private void EnqueueTaskInternal(BackgroundTask task, TfsBackgroundWorkerPriority runFlag);
    private bool IsTaskExceedingThreadLimit(BackgroundTask task);
    private void TryStopAllRunningTasks();
    private void ClearQueue();
    private void PrepareRunWorker(BackgroundTask task, BackgroundWorker worker);
    private void worker_DoWork(object sender, DoWorkEventArgs e);
    private void worker_RunWorkerCompleted(object sender, RunWorkerCompletedEventArgs e);
    private void RunEnqueuedTask();
    public static int get_TaskCounter();
}
[EditorBrowsableAttribute("1")]
public enum Microsoft.TeamFoundation.Common.Internal.TfsBackgroundWorkerPriority : Enum {
    public int value__;
    public static TfsBackgroundWorkerPriority Highest;
    public static TfsBackgroundWorkerPriority Normal;
}
[EditorBrowsableAttribute("1")]
public abstract class Microsoft.TeamFoundation.Common.Internal.TfsBaseWorker : object {
    private object m_identifier;
    private ManualResetEvent m_backgroundWorkCompleted;
    [CompilerGeneratedAttribute]
private bool <PendingCancellation>k__BackingField;
    public object Identifier { get; }
    public ManualResetEvent WaitHandle { get; }
    public bool PendingCancellation { get; public set; }
    public TfsBaseWorker(object identifier);
    public abstract virtual object DoWork(object argument, CancelEventArgs e);
    public abstract virtual void WorkCompleted(object argument, object result, AsyncCompletedEventArgs e);
    public object get_Identifier();
    public ManualResetEvent get_WaitHandle();
    [CompilerGeneratedAttribute]
public virtual bool get_PendingCancellation();
    [CompilerGeneratedAttribute]
public virtual void set_PendingCancellation(bool value);
}
[EditorBrowsableAttribute("1")]
public enum Microsoft.TeamFoundation.Common.Internal.TfsWorkerState : Enum {
    public int value__;
    public static TfsWorkerState Initialized;
    public static TfsWorkerState Queued;
    public static TfsWorkerState Running;
    public static TfsWorkerState Completed;
    public static TfsWorkerState Cancelled;
    public static TfsWorkerState Unknown;
}
[ExtensionAttribute]
[EditorBrowsableAttribute("1")]
public static class Microsoft.TeamFoundation.Common.Internal.TFVersionUtil : object {
    public static string GetProductVersion();
    public static string GetProductVersion(bool includeRevision);
    [ExtensionAttribute]
internal static string GetFileVersion(Assembly assembly);
    [ExtensionAttribute]
internal static string GetFileVersion(Assembly assembly, bool includeRevision);
}
[EditorBrowsableAttribute("1")]
public class Microsoft.TeamFoundation.Common.Internal.Tree`1 : object {
    [CompilerGeneratedAttribute]
private TreeNode`1<T> <HiddenRoot>k__BackingField;
    private TreeNode`1<T> HiddenRoot { get; private set; }
    public TreeNodeCollection`1<T> RootNodes { get; }
    [CompilerGeneratedAttribute]
private TreeNode`1<T> get_HiddenRoot();
    [CompilerGeneratedAttribute]
private void set_HiddenRoot(TreeNode`1<T> value);
    public void Clear();
    public TreeNodeCollection`1<T> get_RootNodes();
    public TreeNode`1<T> Find(string nodePath, string delimiter, StringComparison comparisonType);
    public TreeNodeCollection`1<T> GetSelectedNodes();
    public TreeNodeCollection`1<T> GetCheckedNodes();
}
[EditorBrowsableAttribute("1")]
public class Microsoft.TeamFoundation.Common.Internal.TreeNode`1 : object {
    private T m_value;
    private TreeNode`1<T> m_parent;
    private object m_tag;
    private bool m_isSelected;
    private bool m_isChecked;
    private TreeNodeChildCollection`1<T, T> m_children;
    [CompilerGeneratedAttribute]
private PropertyChangedEventHandler PropertyChanged;
    public T Value { get; public set; }
    public TreeNode`1<T> Parent { get; public set; }
    public bool HasChildren { get; }
    public TreeNodeCollection`1<T> ChildNodes { get; }
    public object Tag { get; public set; }
    public bool IsSelected { get; public set; }
    public bool IsChecked { get; public set; }
    public TreeNode`1(T t);
    public T get_Value();
    public void set_Value(T value);
    public TreeNode`1<T> get_Parent();
    public void set_Parent(TreeNode`1<T> value);
    public virtual string ToString();
    public bool get_HasChildren();
    public TreeNodeCollection`1<T> get_ChildNodes();
    public object get_Tag();
    public void set_Tag(object value);
    public bool get_IsSelected();
    public void set_IsSelected(bool value);
    public TreeNodeCollection`1<T> GetSelectedNodes();
    private void GetSelectedNodes(TreeNodeCollection`1<T> selectedNodes);
    public bool get_IsChecked();
    public void set_IsChecked(bool value);
    public void SetChecked(bool isChecked, bool recursive);
    public TreeNodeCollection`1<T> GetCheckedNodes();
    private void GetCheckedNodes(TreeNodeCollection`1<T> checkedNodes);
    public TreeNode`1<T> Find(string nodePath, string delimiter, StringComparison comparisonType);
    [CompilerGeneratedAttribute]
public sealed virtual void add_PropertyChanged(PropertyChangedEventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_PropertyChanged(PropertyChangedEventHandler value);
    private void FireNotifyPropertyChanged(string propertyName);
}
[EditorBrowsableAttribute("1")]
public class Microsoft.TeamFoundation.Common.Internal.TreeNodeCollection`1 : ObservableCollection`1<TreeNode`1<T>> {
    public TreeNode`1<T> Find(string nodeString, StringComparison comparisonType);
}
[EditorBrowsableAttribute("1")]
public static class Microsoft.TeamFoundation.Common.Internal.UserNameUtil : object {
    public static string AuthenticatedUser;
    private static string s_defaultDomain;
    public static string NetBiosName { get; }
    public static string CurrentMachineAccountName { get; }
    public static string CurrentUserName { get; }
    private static string DefaultDomain { get; }
    private static UserNameUtil();
    public static bool IsComplete(string userName);
    public static string Complete(string userName);
    public static string Complete(string userName, string relative);
    public static String[] Complete(String[] userNames, string relative);
    public static string MakePartial(string userName);
    public static string MakePartial(string userName, string relative);
    public static void Parse(string userName, String& name, String& domain);
    public static string GetDomainName(string userName);
    public static void ParseUniqueUserName(string identityName, String& userName, Int32& uniqueUserId);
    public static bool TryParseUniqueUserName(string identityName, String& userName, Int32& uniqueUserId);
    public static string BuildUniqueUserName(string userName, int uniqueUserId);
    public static void GetIdentityName(string identityType, string displayName, string domainName, string accountName, int uniqueUserId, String& resolvableName, String& displayableName);
    public static int Compare(string user1, string user2);
    public static int CompareUI(string user1, string user2);
    public static SecurityIdentifier GetSecurityIdentifier(string userName);
    public static bool IsWellKnownAccount(string userName, WellKnownSidType wellKnownType);
    public static string NormalizeDomainUserFormat(string account);
    public static string get_NetBiosName();
    public static string get_CurrentMachineAccountName();
    public static string GetMachineAccountName(string hostName);
    public static string TranslateAccountNameIfNetworkService(string userName);
    public static string get_CurrentUserName();
    private static string get_DefaultDomain();
}
[EditorBrowsableAttribute("1")]
public class Microsoft.TeamFoundation.Common.Internal.WatsonReport : object {
    internal static string UnmappedGeneralException;
    public static string UnhandledGeneralException;
    public static string UnhandledDatabaseException;
    public static string ConfigurationException;
    internal static string UnhandledUnknownException;
    private static string m_exceptionEventType;
    private StringCollection m_reportDataFiles;
    private bool m_keepReportFiles;
    private string m_applicationInformation;
    private string m_exceptionCategory;
    private bool m_reportSynchronous;
    private bool m_includeEnvironmentalInformation;
    private bool m_includeHttpRequestInformation;
    private string m_appName;
    private static Dictionary`2<int, int> s_reportsFiled;
    private static object s_cacheLock;
    private StringCollection m_eventParameters;
    private string m_eventType;
    private int m_maxExceptionTypeStringLength;
    private string m_eventLogSource;
    private Exception m_exceptionToReport;
    private WatsonReportType m_reportType;
    private int m_loggingFlags;
    private int m_reportingFlags;
    private int m_userInterfaceFlags;
    private CultureInfo m_uiCulture;
    private WatsonDisplayInformation m_displayInformation;
    private Assembly m_assembly;
    private AppDomain m_appDomain;
    private static int s_maxParameterCount;
    private static string s_dw20Location;
    private String[] s_illegalWords;
    private Version m_tfVersion;
    private static int m_major;
    private static int m_minor;
    private static int m_build;
    private static int m_majRevision;
    private static int m_minRevision;
    private static int m_defaultEventParameterLength;
    private static string FileSeparator;
    private static int s_reportInterval;
    internal WatsonDisplayInformation DisplayInformation { get; }
    unknown bool IncludeEnvironmentalInformation {internal set; }
    unknown AppDomain AppDomain {internal set; }
    internal StringCollection EventParameters { get; }
    unknown string EventType {internal set; }
    public StringCollection ReportDataFiles { get; }
    unknown string ApplicationInformation {public set; }
    unknown bool KeepReportFiles {public set; }
    unknown int LoggingFlags {internal set; }
    unknown int ReportingFlags {internal set; }
    unknown int UserInterfaceFlags {internal set; }
    unknown CultureInfo UserInterfaceCulture {internal set; }
    public string ApplicationName { get; public set; }
    unknown string EventLogSource {internal set; }
    unknown string ExceptionCategory {internal set; }
    unknown Assembly Assembly {internal set; }
    unknown bool ReportSynchronously {internal set; }
    private int ReportSignature { get; }
    private string TeamFoundationVersion { get; }
    private string TeamFoundationComponent { get; }
    private string ReportingAssemblyProductVersion { get; }
    private string ReportingAssemblyVersion { get; }
    private string ExceptionType { get; }
    private string ExceptionSource { get; }
    private string ExceptionTargetSite { get; }
    private WatsonReport(WatsonReportType reportType, string eventCategory, Exception exceptionToReport);
    private static WatsonReport();
    public static bool VerifyConfiguration();
    public static WatsonReport CreateReport(WatsonReportType reportType, string eventType, Exception exceptionToReport);
    public void FileReport();
    private void FileWerReport(List`1<string> filesToKeep, List`1<string> filesToDelete);
    private string GenerateWatsonManifest(List`1<string> filesToKeep, List`1<string> filesToDelete);
    private void WaitForProcess(object parm);
    private void SetServerDefaults();
    private string GetExceptionTypeString(Exception ex);
    private string EventParameterString(string parameter);
    private string EventParameterString(string parameter, int maxParameterLength);
    internal WatsonDisplayInformation get_DisplayInformation();
    internal void set_IncludeEnvironmentalInformation(bool value);
    internal void set_AppDomain(AppDomain value);
    internal StringCollection get_EventParameters();
    internal void set_EventType(string value);
    public StringCollection get_ReportDataFiles();
    public void set_ApplicationInformation(string value);
    public void set_KeepReportFiles(bool value);
    internal void set_LoggingFlags(int value);
    internal void set_ReportingFlags(int value);
    internal void set_UserInterfaceFlags(int value);
    internal void set_UserInterfaceCulture(CultureInfo value);
    public string get_ApplicationName();
    public void set_ApplicationName(string value);
    internal void set_EventLogSource(string value);
    internal void set_ExceptionCategory(string value);
    internal void set_Assembly(Assembly value);
    internal void set_ReportSynchronously(bool value);
    private bool OmitReport(int signature, Int32& occurrences);
    private int get_ReportSignature();
    private string CreateFileString(List`1<string> filenameList);
    private void GatherAssemblyInformation(Assembly assembly, StringBuilder assemblyInfo);
    private void WriteFileData(string filename, StringWriter contents);
    private void WriteFileData(string filename, StringBuilder contents);
    private void GatherEnvironmentData(StringBuilder data);
    private void GatherExceptionData(Exception ex, StringBuilder exContents);
    private string get_TeamFoundationVersion();
    private string get_TeamFoundationComponent();
    private string get_ReportingAssemblyProductVersion();
    private string get_ReportingAssemblyVersion();
    private string get_ExceptionType();
    private string get_ExceptionSource();
    private string get_ExceptionTargetSite();
}
[EditorBrowsableAttribute("1")]
public static class Microsoft.TeamFoundation.Common.Internal.Wildcard : object {
    private static Char[] wildcardChars;
    private static Wildcard();
    public static bool Match(string str, string pattern);
    public static bool Match(string str, string pattern, StringComparison comparer);
    public static bool IsWildcard(string str);
    public static bool IsWildcard(string str, int index, int count);
    public static bool IsWildcard(char c);
    public static bool Match(string itemName, int itemIndex, string matchPattern);
    private static bool Match(string itemName, int itemIndex, string matchPattern, int matchIndex, StringComparison comparer);
}
[EditorBrowsableAttribute("1")]
[SecurityCriticalAttribute]
[CLSCompliantAttribute("False")]
public class Microsoft.TeamFoundation.Common.Internal.WindowsErrorReport : object {
    private bool isDisposed;
    private IntPtr m_reportHandle;
    private IntPtr m_reportInformation;
    public static int WER_DUMP_MASK_START;
    public static int WER_DUMP_MASK_DUMPTYPE;
    public static int WER_DUMP_MASK_ONLY_THISTHREAD;
    public static int WER_DUMP_MASK_THREADFLAGS;
    public static int WER_DUMP_MASK_THREADFLAGS_EX;
    public static int WER_DUMP_MASK_OTHERTHREADFLAGS;
    public static int WER_DUMP_MASK_OTHERTHREADFLAGS_EX;
    public static int WER_DUMP_MASK_PREFERRED_MODULESFLAGS;
    public static int WER_DUMP_MASK_OTHER_MODULESFLAGS;
    public static int WER_DUMP_MASK_PREFERRED_MODULE_LIST;
    public static int WER_DUMP_NOHEAP_ONQUEUE;
    public void WerReportCreate(string eventType, WER_REPORT_TYPE repType, WER_REPORT_INFORMATION reportInformation);
    public void WerReportSetParameter(int paramId, string name, string value);
    public void WerReportAddFile(string path, WER_FILE_TYPE repFileType, WER_FILE_FLAGS fileFlags);
    public WER_SUBMIT_RESULT WerReportSubmit(WER_CONSENT consent, WER_SUBMIT_FLAGS flags);
    private void WerReportCloseHandle();
    public sealed virtual void Dispose();
}
public interface Microsoft.TeamFoundation.Common.ITFLogger {
    public abstract virtual void Info(string message);
    public abstract virtual void Info(string message, Object[] args);
    public abstract virtual void Warning(string message);
    public abstract virtual void Warning(string message, Object[] args);
    public abstract virtual void Warning(Exception exception);
    public abstract virtual void Error(string message);
    public abstract virtual void Error(string message, Object[] args);
    public abstract virtual void Error(Exception exception);
}
[ExtensionAttribute]
public static class Microsoft.TeamFoundation.Common.ITFLoggerExtensions : object {
    [ExtensionAttribute]
public static void Heading(ITFLogger logger, string message);
    [ExtensionAttribute]
public static void Heading(ITFLogger logger, string message, Object[] args);
    [ExtensionAttribute]
public static void Heading2(ITFLogger logger, string message);
    [ExtensionAttribute]
public static void Heading2(ITFLogger logger, string message, Object[] args);
}
[EditorBrowsableAttribute("1")]
public class Microsoft.TeamFoundation.Common.JavaScriptObjectDeserializer : object {
    private static int DefaultRecursionLimit;
    private static string DateTimePrefix;
    private static int DateTimePrefixLength;
    private static string DateTimeSuffix;
    private static int DateTimeSuffixLength;
    private static long DatetimeMinTimeTicks;
    private JavaScriptString _s;
    private int _depthLimit;
    private JavaScriptObjectDeserializer(string input, int depthLimit);
    [EditorBrowsableAttribute("1")]
public static object BasicDeserialize(string input);
    private object DeserializeInternal(int depth);
    private IList DeserializeList(int depth);
    private IDictionary`2<string, object> DeserializeDictionary(int depth);
    private void ThrowIfMaxJsonDeserializerMembersExceeded(int count);
    private string DeserializeMemberName();
    private object DeserializePrimitiveObject();
    private string DeserializePrimitiveToken();
    private string DeserializeString();
    private void AppendCharToBuilder(Nullable`1<char> c, StringBuilder sb);
    private char CheckQuoteChar(Nullable`1<char> c);
    private object DeserializeStringIntoDateTime();
    private static bool IsNextElementArray(Nullable`1<char> c);
    private bool IsNextElementDateTime();
    private static bool IsNextElementObject(Nullable`1<char> c);
    private static bool IsNextElementString(Nullable`1<char> c);
}
public class Microsoft.TeamFoundation.Common.Logging.ConsoleLogger : TFLogger {
    public virtual void Error(string message);
    public virtual void Info(string message);
    public virtual void Warning(string message);
}
public class Microsoft.TeamFoundation.Common.Logging.DebugLogger : TFLogger {
    public virtual void Error(string message);
    public virtual void Info(string message);
    public virtual void Warning(string message);
}
public class Microsoft.TeamFoundation.Common.MarshalByRefLogger : TFLogger {
    private ITFLogger m_logger;
    public MarshalByRefLogger(ITFLogger logger);
    public virtual void Error(string message);
    public virtual void Info(string message);
    public virtual void Warning(string message);
}
public class Microsoft.TeamFoundation.Common.NullLogger : object {
    public virtual void Info(string message);
    public virtual void Info(string message, Object[] args);
    public virtual void Warning(string message);
    public virtual void Warning(string message, Object[] args);
    public virtual void Warning(Exception exception);
    public virtual void Error(string message);
    public virtual void Error(string message, Object[] args);
    public virtual void Error(Exception exception);
}
internal class Microsoft.TeamFoundation.Common.ProcessTemplateSchema : object {
    internal static String[] SchemaNames;
    private static ProcessTemplateSchema();
    internal static Stream GetSchema(Schema schemaType);
    internal static XmlSchemaSet GetSchemaSet(Schema schemaType);
    internal static void Validate(XmlNode baseNode, Schema type, string baseUri);
    private static void ValidationHandler(object sender, ValidationEventArgs args);
}
[EditorBrowsableAttribute("1")]
public static class Microsoft.TeamFoundation.Common.Reporting.ReportingUtilities : object {
    public static Uri GetReportManagerItemUrl(Uri reportManagerUrl, string itemPath);
    public static Uri GetReportViewerUrl(Uri reportWebServiceUrl, string itemPath, bool showToolbar);
    public static Uri RemoveKnownWebServicePaths(Uri input);
}
public class Microsoft.TeamFoundation.Common.RetryManager : object {
    private int m_retryCount;
    private TimeSpan m_delay;
    private Action`1<Exception> m_onException;
    private Func`2<Exception, bool> m_canRetryException;
    public RetryManager(int retryCount);
    public RetryManager(int retryCount, Action`1<Exception> onException);
    public RetryManager(int retryCount, TimeSpan delay);
    public RetryManager(int retryCount, TimeSpan delay, Action`1<Exception> onException);
    public RetryManager(int retryCount, TimeSpan delay, Action`1<Exception> onException, Func`2<Exception, bool> canRetryException);
    public bool Try(Func`1<bool> func);
    public void Invoke(Action action);
    public void Invoke(Action`1<T> action, T op);
    public void Invoke(Action`2<T1, T2> action, T1 op1, T2 op2);
    public void Invoke(Action`3<T1, T2, T3> action, T1 op1, T2 op2, T3 op3);
    public void Invoke(Action`4<T1, T2, T3, T4> action, T1 op1, T2 op2, T3 op3, T4 op4);
    public TResult InvokeFunc(Func`1<TResult> func);
    public TResult InvokeFunc(Func`2<T, TResult> func, T op);
    public TResult InvokeFunc(Func`3<T1, T2, TResult> func, T1 op1, T2 op2);
    public TResult InvokeFunc(Func`4<T1, T2, T3, TResult> func, T1 op1, T2 op2, T3 op3);
    public TResult InvokeFunc(Func`5<T1, T2, T3, T4, TResult> func, T1 op1, T2 op2, T3 op3, T4 op4);
    [AsyncStateMachineAttribute("Microsoft.TeamFoundation.Common.RetryManager/<InvokeAsync>d__16")]
public Task InvokeAsync(Func`1<Task> actionAsync);
    [AsyncStateMachineAttribute("Microsoft.TeamFoundation.Common.RetryManager/<InvokeFuncAsync>d__17`1")]
public Task`1<TResult> InvokeFuncAsync(Func`1<Task`1<TResult>> funcAsync);
    [AsyncStateMachineAttribute("Microsoft.TeamFoundation.Common.RetryManager/<InvokeFuncAsync>d__18`1")]
public Task`1<TResult> InvokeFuncAsync(Func`1<TResult> func);
}
public class Microsoft.TeamFoundation.Common.ServiceControlManagerUtility : object {
    private ServiceHandle m_manager;
    private ServiceHandle OpenService(string serviceName, ServiceAccessRights desiredAccess);
    public void SetRestartsOnFailure(string serviceName, int resetDays, int delayMinutes);
    public void SetRestartsOnFailure(string serviceName, int resetDays, int delayMinutes, bool restartOnNonCrashFailures);
    public void SetRestartsOnFailure(string serviceName, int resetDays, TimeSpan delay, bool restartOnNonCrashFailures);
    public void RemoveRecoveryActions(string serviceName);
    [SecurityCriticalAttribute]
private void SetRestartActions(string serviceName, int restartActionsCount, int resetDays, TimeSpan delay, bool restartOnNonCrashFailures);
    public sealed virtual void Dispose();
}
[EditorBrowsableAttribute("1")]
public static class Microsoft.TeamFoundation.Common.SharePoint.SharePointUtilities : object {
    public static Uri GetWellKnownProcessGuidancePageUrl(ProcessGuidanceType type, Uri baseUrl, string guidanceFileName);
}
public class Microsoft.TeamFoundation.Common.StructureType : ValueType {
    public static string ProjectLifecycle;
    public static string ProjectModelHierarchy;
}
[ExtensionAttribute]
[EditorBrowsableAttribute("1")]
public static class Microsoft.TeamFoundation.Common.TFCommonUtil : object {
    private static Process s_process;
    private static Char[] s_illegalComputerNameChars;
    private static Char[] s_illegalIdentityNameChars;
    private static Char[] s_trimChars;
    private static String[] s_trimStrings;
    private static int MaxGroupNameLength;
    private static int MaxGroupDescriptionLength;
    public static Process CurrentProcess { get; }
    private static TFCommonUtil();
    public static IntPtr GetImageHandle(object obj);
    public static string GetExceptionMessage(Exception e);
    public static bool IsLonghornOrLater();
    public static string GetLocalTimeZoneOffset();
    public static string GetLocalTimeZoneName(DateTime date);
    public static string GetLocalTimeZoneOffset(DateTime dateTime);
    public static bool IsAlphaNumString(string strIn);
    public static bool HasControlCharacters(string strIn);
    public static bool HasControlCharacters(string strIn, bool allowCrLf);
    [ObsoleteAttribute("Use method in Microsft.VisualStudio.Services.Common.ArgumentUtility instead.")]
public static bool HasSurrogates(string strIn);
    [ObsoleteAttribute("Use method in Microsft.VisualStudio.Services.Common.ArgumentUtility instead.")]
public static bool HasMismatchedSurrogates(string strIn);
    [ObsoleteAttribute("Use method in Microsft.VisualStudio.Services.Common.ArgumentUtility instead.")]
public static bool IsInvalidString(string strIn);
    [ObsoleteAttribute("Use method in Microsft.VisualStudio.Services.Common.ArgumentUtility instead.")]
public static bool IsInvalidString(string strIn, bool allowCrLf);
    [ExtensionAttribute]
public static bool IsNullOrEmpty(IEnumerable`1<T> enumerable);
    public static bool IsSafeUrlProtocol(string url);
    public static string RemoveInvalidCharacters(string strIn);
    public static string ReplaceInvalidCharacters(string strIn, string replacement);
    public static string ReplaceInvalidCharacters(string strIn, string replacement, bool allowGB18030);
    public static void ValidateIdentityType(string identityType);
    public static void ValidateIdentifier(string identifier);
    public static string MakeDescriptorSearchFactor(string identityType, string identifier);
    public static void ParseDescriptorSearchFactor(string descriptorValue, String& identityType, String& identifier);
    public static string GetIdentityDomainScope(Guid hostId);
    public static void CheckApplicationGroupPropertyAndValue(GroupProperty property, String& value);
    public static void CheckGroupName(String& groupName);
    public static bool IsValidGroupName(String& groupName);
    public static void CheckGroupDescription(String& groupDescription);
    public static string TruncateGroupDescription(string groupDescription);
    public static void CheckDisplayName(String& name);
    public static void CheckProjectUri(String& projectUri, bool allowNullOrEmpty);
    public static void CheckMembershipQuery(MembershipQuery queryMembership);
    public static void CheckSidNullEmpty(string sid, string paramName);
    public static SecurityIdentifier CheckSid(string sid, string paramName);
    public static void CanonicalizeDacl(NativeObjectSecurity objectSecurity);
    public static string CombinePaths(string path1, string path2);
    public static string RemoveInvalidXmlChars(string strIn, bool allowCrLf);
    [ObsoleteAttribute("Use method in Microsft.VisualStudio.Services.Common.ArgumentUtility instead.")]
public static void CheckForOutOfRange(T var, string varName, T minimum);
    [ObsoleteAttribute("Use method in Microsft.VisualStudio.Services.Common.ArgumentUtility instead.")]
public static void CheckForOutOfRange(T var, string varName, T minimum, T maximum);
    [ObsoleteAttribute("Use method in Microsft.VisualStudio.Services.Common.ArgumentUtility instead.")]
public static void CheckForOutOfRange(int var, string varName, int minimum);
    [ObsoleteAttribute("Use method in Microsft.VisualStudio.Services.Common.ArgumentUtility instead.")]
public static void CheckForOutOfRange(int var, string varName, int minimum, int maximum);
    [ObsoleteAttribute("Use method in Microsft.VisualStudio.Services.Common.ArgumentUtility instead.")]
public static void CheckForOutOfRange(long var, string varName, long minimum);
    [ObsoleteAttribute("Use method in Microsft.VisualStudio.Services.Common.ArgumentUtility instead.")]
public static void CheckForOutOfRange(long var, string varName, long minimum, long maximum);
    [ObsoleteAttribute("Use method in Microsft.VisualStudio.Services.Common.ArgumentUtility instead.")]
public static void CheckForDateTimeRange(DateTime var, string varName, DateTime minimum, DateTime maximum);
    [ObsoleteAttribute("Use method in Microsft.VisualStudio.Services.Common.ArgumentUtility instead.")]
public static void CheckGreaterThanOrEqualToZero(float value, string valueName);
    [ObsoleteAttribute("Use method in Microsft.VisualStudio.Services.Common.ArgumentUtility instead.")]
public static void CheckGreaterThanZero(float value, string valueName);
    [ObsoleteAttribute("Use method in Microsft.VisualStudio.Services.Common.ArgumentUtility instead.")]
public static void CheckForNull(object var, string varName);
    [ObsoleteAttribute("Use method in Microsft.VisualStudio.Services.Common.ArgumentUtility instead.")]
public static void EnsureIsNull(object var, string varName);
    [ObsoleteAttribute("Use method in Microsft.VisualStudio.Services.Common.ArgumentUtility instead.")]
public static void CheckStringCasing(string stringVar, string varName, bool checkForLowercase);
    [ObsoleteAttribute("Use method in Microsft.VisualStudio.Services.Common.ArgumentUtility instead.")]
public static void CheckForEmptyGuid(Guid guid, string varName);
    [ObsoleteAttribute("Use CheckEnumerableForNullOrEmpty method in Microsft.VisualStudio.Services.Common.ArgumentUtility instead.")]
public static void CheckArrayForNullOrEmpty(Object[] array, string arrayName);
    [ObsoleteAttribute("Use CheckEnumerableForNullOrEmpty method in Microsft.VisualStudio.Services.Common.ArgumentUtility instead.")]
public static void CheckArrayForNullOrEmpty(Int32[] array, string arrayName);
    [ObsoleteAttribute("Use CheckEnumerableForNullOrEmpty method in Microsft.VisualStudio.Services.Common.ArgumentUtility instead.")]
public static void CheckArrayForNullOrEmpty(T[] array, string arrayName);
    [ObsoleteAttribute("Use CheckEnumerableForNullOrEmpty method in Microsft.VisualStudio.Services.Common.ArgumentUtility instead.")]
public static void CheckListForNullOrEmpty(IList list, string listName);
    [ObsoleteAttribute("Use method in Microsft.VisualStudio.Services.Common.ArgumentUtility instead.")]
public static void CheckEnumerableForNullOrEmpty(IEnumerable enumerable, string enumerableName);
    [ObsoleteAttribute("Use method in Microsft.VisualStudio.Services.Common.ArgumentUtility instead.")]
public static void CheckEnumerableForEmpty(IEnumerable enumerable, string enumerableName);
    [ObsoleteAttribute("Use method in Microsft.VisualStudio.Services.Common.ArgumentUtility instead.")]
public static void CheckStringForNullOrEmpty(string stringVar, string stringVarName);
    [ObsoleteAttribute("Use method in Microsft.VisualStudio.Services.Common.ArgumentUtility instead.")]
public static void CheckStringForNullOrWhiteSpace(string stringVar, string stringVarName);
    [ObsoleteAttribute("Use method in Microsft.VisualStudio.Services.Common.ArgumentUtility instead.")]
public static void CheckStringExactLength(string stringVar, int length, string stringVarName);
    [ObsoleteAttribute("Use method in Microsft.VisualStudio.Services.Common.ArgumentUtility instead.")]
public static void CheckForBothStringsNullOrEmpty(string var1, string varName1, string var2, string varName2);
    [ObsoleteAttribute("Use method in Microsft.VisualStudio.Services.Common.ArgumentUtility instead.")]
public static void CheckStringForAnyWhiteSpace(string stringVar, string stringVarName);
    [ObsoleteAttribute("Use method in Microsft.VisualStudio.Services.Common.ArgumentUtility instead.")]
public static void CheckType(object var, string varName, string typeName);
    [ObsoleteAttribute("Use method in Microsft.VisualStudio.Services.Common.ArgumentUtility instead.")]
public static void CheckForDefinedEnum(TEnum value, string enumVarName);
    public static bool IsLegalComputerName(string computerName);
    public static bool IsLegalComputerName(string computerName, String& error);
    public static bool IsLegalIdentity(string identity);
    public static bool IsLegalXmlString(string str);
    public static void AddXmlAttribute(XmlNode node, string attrName, string value);
    public static string EnumToString(Enum value);
    public static T EnumFromString(string s);
    public static void RunApp(string appExe, string arguments, EventHandler exitedHandler, bool wait);
    public static void RunApp(string appExe, string arguments, EventHandler exitedHandler, bool wait, bool defaultStartParameters);
    public static void RunApp(string appExe, string arguments, EventHandler exitedHandler, bool wait, bool defaultStartParameters, bool ignoreExitCode);
    public static Process BeginRunApp(string appExe, string arguments);
    public static Process BeginRunApp(string appExe, string arguments, bool defaultStartParameters);
    public static int EndRunApp(Process process);
    private static bool AreByteArraysEqual(Byte[] a1, Byte[] a2);
    private static bool AreByteArraysEquals(Byte[] a1, Byte[] a2, int length);
    public static void ConvertFileEncoding(string sourcePath, string destPath, Encoding sourceEncoding, Encoding destEncoding);
    public static void ConvertFileEncoding(string sourcePath, string destPath, Encoding sourceEncoding, Encoding destEncoding, bool includeBom);
    public static FileStream OpenFile(string path, FileShare sharing, bool saveFile);
    public static XmlDocument OpenXmlFile(FileStream& file, string path, FileShare sharing, bool saveFile);
    private static FileStream OpenFileHelper(string path, FileShare sharing, bool saveFile, bool loadAsXmlDocument, XmlDocument& xmlDocument);
    public static int GetAppSettingAsInt(string key, int defaultValue);
    public static long GetAppSettingAsLong(string key, long defaultValue);
    public static bool GetAppSettingAsBool(string key, bool defaultValue);
    public static string GetAppSetting(string key, string defaultValue);
    public static T[] CombineArrays(T[] first, T[] second);
    public static T[] CopyCollection(ICollection`1<T> original);
    public static T[] CopyCollection(ICollection original);
    public static Process get_CurrentProcess();
    public static void SafeRelease(IntPtr punk);
    public static int TranslateEnum(Type enumClass, String[] array, int allPermissions);
    public static List`1<string> TranslateEnum(Type enumClass, int bits);
    internal static void SafeDispose(IDisposable instance);
    public static Uri StripEnd(Uri uri, String[] stringsToStrip);
    public static string StripEnd(string stringToStrip, String[] stringsToStrip);
    public static string EscapeString(string text, char escapeChar);
    public static string ComputeFullDatabaseName(string databaseLabel, string databaseRootname, string databaseSuffix);
    public static string ComputeFullDatabaseName(string databaseLabel, string databaseRootname, int attemptNumber, string databaseSuffix);
    public static T ReadRegistryValue(RegistryKey hiveRoot, string key, string valueName);
    internal static bool AreTypesEquivalent(Type a, Type b);
    public static Byte[] GetSqlTimestamp(string data);
    public static void Retry(int count, int retryDelay, Action`1<int> action, Func`3<Exception, int, bool> exceptionAction);
    private static string TruncateString(string value, int limitingLength);
}
public abstract class Microsoft.TeamFoundation.Common.TFLogger : MarshalByRefObject {
    public abstract virtual void Info(string message);
    public sealed virtual void Info(string message, Object[] args);
    public abstract virtual void Warning(string message);
    public sealed virtual void Warning(string message, Object[] args);
    public sealed virtual void Warning(Exception exception);
    public abstract virtual void Error(string message);
    public sealed virtual void Error(string message, Object[] args);
    public sealed virtual void Error(Exception exception);
}
public class Microsoft.TeamFoundation.Common.TraceLogger : TFLogger {
    public virtual void Info(string message);
    public virtual void Warning(string message);
    public virtual void Error(string message);
}
public abstract class Microsoft.TeamFoundation.Common.TswaHyperlinkBuilder : object {
    [CompilerGeneratedAttribute]
private Guid <CollectionId>k__BackingField;
    private static string c_PublicAccessMapping;
    private static string c_VersionControlPathRoot;
    private static char c_VersionControlPathSeparator;
    protected Guid CollectionId { get; protected set; }
    [CompilerGeneratedAttribute]
protected Guid get_CollectionId();
    [CompilerGeneratedAttribute]
protected void set_CollectionId(Guid value);
    protected abstract virtual Uri GetUrl(string serviceType, string accessMappingMoniker);
    [EditorBrowsableAttribute("1")]
protected virtual Uri GetUrl(string serviceType, string accessMappingMoniker, bool collectionLevel);
    private Uri GetPageUrl(string accessMappingMoniker, string relativePath, string queryString);
    public Uri GetHomeUrl();
    public Uri GetHomeUrl(string accessMappingMoniker);
    public Uri GetHomeUrl(Uri projectUri);
    public Uri GetTeamHomeUrl(Uri projectUri, string teamName);
    public Uri GetHomeUrl(Uri projectUri, string accessMappingMoniker);
    public Uri GetSourceExplorerUrl(string serverItemPath);
    public Uri GetSourceExplorerUrl(string serverItemPath, string accessMappingMoniker);
    public Uri GetChangesetDetailsUrl(int changesetId);
    public Uri GetChangesetDetailsUrl(int changesetId, string accessMappingMoniker);
    public Uri GetShelvesetDetailsUrl(string shelvesetName, string shelvesetOwner);
    public Uri GetShelvesetDetailsUrl(string shelvesetName, string shelvesetOwner, string accessMappingMoniker);
    public Uri GetViewSourceControlItemUrl(int itemId, string versionSpec);
    public Uri GetViewSourceControlItemUrl(int itemId, string versionSpec, string accessMappingMoniker);
    public Uri GetViewSourceControlItemUrl(string serverItemPath, int changesetId);
    public Uri GetViewSourceControlItemUrl(string serverItemPath, int changesetId, string accessMappingMoniker);
    public Uri GetViewSourceControlItemUrl(string serverItemPath, string versionSpec);
    public Uri GetViewSourceControlItemUrl(string serverItemPath, string versionSpec, string accessMappingMoniker);
    public Uri GetViewSourceControlShelvedItemUrl(string serverItemPath, string shelvesetName, string shelvesetOwner);
    public Uri GetViewSourceControlShelvedItemUrl(string serverItemPath, string shelvesetName, string shelvesetOwner, string accessMappingMoniker);
    public Uri GetHistorySourceControlItemUrl(string serverItemPath, string versionSpec);
    public Uri GetHistorySourceControlItemUrl(string serverItemPath, string versionSpec, string accessMappingMoniker);
    public Uri GetAnnotateSourceControlItemUrl(string serverItemPath, int changesetId);
    public Uri GetAnnotateSourceControlItemUrl(string serverItemPath, int changesetId, string accessMappingMoniker);
    public Uri GetAnnotateSourceControlItemUrl(string serverItemPath, string versionSpec);
    public Uri GetAnnotateSourceControlItemUrl(string serverItemPath, string versionSpec, string accessMappingMoniker);
    public Uri GetDifferenceSourceControlItemsUrl(string originalItemServerPath, int originalItemChangeset, string modifiedItemServerPath, int modifiedItemChangeset);
    public Uri GetDifferenceSourceControlItemsUrl(string originalItemServerPath, int originalItemChangeset, string modifiedItemServerPath, int modifiedItemChangeset, string accessMappingMoniker);
    public Uri GetDifferenceSourceControlItemsUrl(string originalItemServerPath, string originalItemVersionSpec, string modifiedItemServerPath, string modifiedItemVersionSpec);
    public Uri GetDifferenceSourceControlItemsUrl(string originalItemServerPath, string originalItemVersionSpec, string modifiedItemServerPath, string modifiedItemVersionSpec, string accessMappingMoniker);
    public Uri GetDifferenceSourceControlShelvedItemUrl(string originalItemServerPath, int originalItemChangeset, string shelvedItemServerPath, string shelvesetName, string shelvesetOwner);
    public Uri GetDifferenceSourceControlShelvedItemUrl(string originalItemServerPath, string originalItemVersionSpec, string shelvedItemServerPath, string shelvesetName, string shelvesetOwner, string accessMappingMoniker);
    public Uri GetWorkItemEditorUrl(int workItemId);
    public Uri GetWorkItemEditorUrl(Uri projectUri, int workItemId);
    public Uri GetWorkItemEditorUrl(int workItemId, string accessMappingMoniker);
    public Uri GetWorkItemQueryResultsUrl(Uri projectUri, string queryPath);
    public Uri GetWorkItemQueryResultsUrl(Uri projectUri, string queryPath, string accessMappingMoniker);
    public Uri GetWorkItemQueryResultsUrl(Uri projectUri, Guid queryId);
    public Uri GetWorkItemQueryResultsUrl(Uri projectUri, Guid queryId, string accessMappingMoniker);
    public Uri GetViewBuildDetailsUrl(Uri buildUri);
    public Uri GetViewBuildDetailsUrl(Uri buildUri, Guid projectId);
    public Uri GetViewBuildDetailsUrl(Uri buildUri, Guid projectId, string accessMappingMoniker);
    public Uri GetAlertsAdminPageUrl(string teamProject);
    public Uri GetArtifactViewerUrl(Uri artifactUri);
    public Uri GetArtifactViewerUrl(Uri artifactUri, string accessMappingMoniker);
    private Uri FormatUrl(string serviceType, string accessMappingMoniker, String[] args);
    private Uri FormatUrl(string serviceType, string accessMappingMoniker, bool variablePath, String[] args);
    private Uri FormatUrl(string serviceType, string accessMappingMoniker, bool collectionLevel, bool variablePath, String[] args);
    private string FormatQueryString(String[] args);
    private string FormatQueryString(Uri projectUri, String[] args);
    private static void ValidateServerItemPath(string serverItemPath);
    private static void ValidateServerItemPath(string serverItemPath, string parameterName);
    private static string PrependRootIfNeeded(string folder);
    private static Guid ArtifactToolSpecificIdToGuid(Uri artifactUri);
    private static Guid ArtifactToolSpecificIdToGuid(Uri artifactUri, ArtifactId artifactId);
    private static int ArtifactToolSpecificIdToInt(Uri artifactUri, ArtifactId artifactId);
}
[GenerateSpecificConstantsAttribute("")]
public class Microsoft.TeamFoundation.Common.UrlConstants : object {
    [GenerateConstantAttribute("")]
public static String[] SafeUriSchemes;
    public static HashSet`1<string> SafeUriSchemesSet;
    private static UrlConstants();
}
[EditorBrowsableAttribute("1")]
public class Microsoft.TeamFoundation.Common.VssAssemblyResolver : object {
    private int m_disposed;
    private static int s_globalAllocated;
    private static VssAssemblyResolver();
    protected virtual override void Finalize();
    public sealed virtual void Dispose();
    public static Assembly ResolveAssembly(string name);
    public static Assembly ResolveAssembly(object sender, ResolveEventArgs args);
    private static Assembly OnAssemblyResolve(object sender, ResolveEventArgs args);
}
[EditorBrowsableAttribute("1")]
[ObsoleteAttribute("Use Microsoft.TeamFoundation.Services.Common.Internal.XmlElementWriterUtility instead.")]
public class Microsoft.TeamFoundation.Common.XmlElementHelper : XmlElementWriterUtility {
    public XmlElementHelper(string elementName, XmlWriter xmlWriter);
}
[EditorBrowsableAttribute("1")]
[ObsoleteAttribute("Use Microsoft.TeamFoundation.Services.Common.Internal.XmlUtility instead.")]
[CLSCompliantAttribute("False")]
public static class Microsoft.TeamFoundation.Common.XmlHelper : object {
    [ObsoleteAttribute("Use property in Microsoft.TeamFoundation.Services.Common.Internal.XmlUtility instead.")]
public static XmlReaderSettings SecureReaderSettings { get; }
    [ObsoleteAttribute("Use property in Microsoft.TeamFoundation.Services.Common.Internal.XmlUtility instead.")]
public static Byte[] ZeroLengthArrayOfByte { get; }
    public static XmlReaderSettings get_SecureReaderSettings();
    [ObsoleteAttribute("Use method in Microsoft.TeamFoundation.Services.Common.Internal.XmlUtility instead.")]
public static XmlDocument GetDocument(Stream input);
    [ObsoleteAttribute("Use method in Microsoft.TeamFoundation.Services.Common.Internal.XmlUtility instead.")]
public static XmlDocument GetDocument(string xml);
    [ObsoleteAttribute("Use method in Microsoft.TeamFoundation.Services.Common.Internal.XmlUtility instead.")]
public static XmlDocument GetDocumentFromPath(string path);
    [ObsoleteAttribute("Use method in Microsoft.TeamFoundation.Services.Common.Internal.XmlUtility instead.")]
public static DateTime ToDateTime(string s);
    [ObsoleteAttribute("Use method in Microsoft.TeamFoundation.Services.Common.Internal.XmlUtility instead.")]
public static DateTime ToDateOnly(string s);
    [ObsoleteAttribute("Use method in Microsoft.TeamFoundation.Services.Common.Internal.XmlUtility instead.")]
public static string ToStringDateOnly(DateTime d);
    [ObsoleteAttribute("Use method in Microsoft.TeamFoundation.Services.Common.Internal.XmlUtility instead.")]
public static string ToString(DateTime d);
    [ObsoleteAttribute("Use method in Microsoft.TeamFoundation.Services.Common.Internal.XmlUtility instead.")]
public static string ToString(Uri uri);
    [ObsoleteAttribute("Use method in Microsoft.TeamFoundation.Services.Common.Internal.XmlUtility instead.")]
public static Uri ToUri(string s);
    [ObsoleteAttribute("Use method in Microsoft.TeamFoundation.Services.Common.Internal.XmlUtility instead.")]
public static void EnumToXmlAttribute(XmlWriter writer, string attr, T value);
    [ObsoleteAttribute("Use method in Microsoft.TeamFoundation.Services.Common.Internal.XmlUtility instead.")]
public static T EnumFromXmlAttribute(XmlReader reader);
    [ObsoleteAttribute("Use method in Microsoft.TeamFoundation.Services.Common.Internal.XmlUtility instead.")]
public static void EnumToXmlElement(XmlWriter writer, string element, T value);
    [ObsoleteAttribute("Use method in Microsoft.TeamFoundation.Services.Common.Internal.XmlUtility instead.")]
public static T EnumFromXmlElement(XmlReader reader);
    [ObsoleteAttribute("Use method in Microsoft.TeamFoundation.Services.Common.Internal.XmlUtility instead.")]
public static void ObjectToXmlElement(XmlWriter writer, string element, object o);
    [ObsoleteAttribute("Use method in Microsoft.TeamFoundation.Services.Common.Internal.XmlUtility instead.")]
public static object ObjectFromXmlElement(XmlReader reader);
    [ObsoleteAttribute("Use method in Microsoft.TeamFoundation.Services.Common.Internal.XmlUtility instead.")]
public static void ToXml(XmlWriter writer, string element, Object[] array);
    [ObsoleteAttribute("Use method in Microsoft.TeamFoundation.Services.Common.Internal.XmlUtility instead.")]
public static Object[] ArrayOfObjectFromXml(XmlReader reader);
    [ObsoleteAttribute("Use method in Microsoft.TeamFoundation.Services.Common.Internal.XmlUtility instead.")]
public static T[] ArrayOfObjectFromXml(XmlReader reader, string arrayElementName, bool inline, Func`2<XmlReader, T> objectFromXmlElement);
    [ObsoleteAttribute("Use method in Microsoft.TeamFoundation.Services.Common.Internal.XmlUtility instead.")]
public static T[] ArrayOfObjectFromXml(IServiceProvider serviceProvider, XmlReader reader, string arrayElementName, bool inline, Func`3<IServiceProvider, XmlReader, T> objectFromXmlElement);
    [ObsoleteAttribute("Use method in Microsoft.TeamFoundation.Services.Common.Internal.XmlUtility instead.")]
public static void ArrayOfObjectToXml(XmlWriter writer, T[] array, string arrayName, string arrayElementName, bool inline, bool allowEmptyArrays, Action`3<XmlWriter, string, T> objectToXmlElement);
    [ObsoleteAttribute("Use method in Microsoft.TeamFoundation.Services.Common.Internal.XmlUtility instead.")]
public static void EnumerableOfObjectToXml(XmlWriter writer, IEnumerable`1<T> enumerable, string arrayName, string arrayElementName, bool inline, bool allowEmptyArrays, Action`3<XmlWriter, string, T> objectToXmlElement);
    [ObsoleteAttribute("Use method in Microsoft.TeamFoundation.Services.Common.Internal.XmlUtility instead.")]
public static void ToXmlElement(XmlWriter writer, string elementName, XmlNode node);
    [ObsoleteAttribute("Use method in Microsoft.TeamFoundation.Services.Common.Internal.XmlUtility instead.")]
public static XmlNode XmlNodeFromXmlElement(XmlReader reader);
    [ObsoleteAttribute("Use method in Microsoft.TeamFoundation.Services.Common.Internal.XmlUtility instead.")]
public static DateTime DateFromXmlAttribute(XmlReader reader);
    [ObsoleteAttribute("Use method in Microsoft.TeamFoundation.Services.Common.Internal.XmlUtility instead.")]
public static bool BooleanFromXmlElement(XmlReader reader);
    [ObsoleteAttribute("Use method in Microsoft.TeamFoundation.Services.Common.Internal.XmlUtility instead.")]
public static byte ByteFromXmlAttribute(XmlReader reader);
    [ObsoleteAttribute("Use method in Microsoft.TeamFoundation.Services.Common.Internal.XmlUtility instead.")]
public static byte ByteFromXmlElement(XmlReader reader);
    [ObsoleteAttribute("Use method in Microsoft.TeamFoundation.Services.Common.Internal.XmlUtility instead.")]
public static char CharFromXmlAttribute(XmlReader reader);
    [ObsoleteAttribute("Use method in Microsoft.TeamFoundation.Services.Common.Internal.XmlUtility instead.")]
public static char CharFromXmlElement(XmlReader reader);
    [ObsoleteAttribute("Use method in Microsoft.TeamFoundation.Services.Common.Internal.XmlUtility instead.")]
public static DateTime DateFromXmlElement(XmlReader reader);
    [ObsoleteAttribute("Use method in Microsoft.TeamFoundation.Services.Common.Internal.XmlUtility instead.")]
public static void DateToXmlAttribute(XmlWriter writer, string name, DateTime value);
    [ObsoleteAttribute("Use method in Microsoft.TeamFoundation.Services.Common.Internal.XmlUtility instead.")]
public static void DateToXmlElement(XmlWriter writer, string name, DateTime value);
    [ObsoleteAttribute("Use method in Microsoft.TeamFoundation.Services.Common.Internal.XmlUtility instead.")]
public static bool BooleanFromXmlAttribute(XmlReader reader);
    [ObsoleteAttribute("Use method in Microsoft.TeamFoundation.Services.Common.Internal.XmlUtility instead.")]
public static double DoubleFromXmlAttribute(XmlReader reader);
    [ObsoleteAttribute("Use method in Microsoft.TeamFoundation.Services.Common.Internal.XmlUtility instead.")]
public static double DoubleFromXmlElement(XmlReader reader);
    [ObsoleteAttribute("Use method in Microsoft.TeamFoundation.Services.Common.Internal.XmlUtility instead.")]
public static Guid GuidFromXmlAttribute(XmlReader reader);
    [ObsoleteAttribute("Use method in Microsoft.TeamFoundation.Services.Common.Internal.XmlUtility instead.")]
public static Guid GuidFromXmlElement(XmlReader reader);
    [ObsoleteAttribute("Use method in Microsoft.TeamFoundation.Services.Common.Internal.XmlUtility instead.")]
public static short Int16FromXmlAttribute(XmlReader reader);
    [ObsoleteAttribute("Use method in Microsoft.TeamFoundation.Services.Common.Internal.XmlUtility instead.")]
public static short Int16FromXmlElement(XmlReader reader);
    [ObsoleteAttribute("Use method in Microsoft.TeamFoundation.Services.Common.Internal.XmlUtility instead.")]
public static int Int32FromXmlAttribute(XmlReader reader);
    [ObsoleteAttribute("Use method in Microsoft.TeamFoundation.Services.Common.Internal.XmlUtility instead.")]
public static int Int32FromXmlElement(XmlReader reader);
    [ObsoleteAttribute("Use method in Microsoft.TeamFoundation.Services.Common.Internal.XmlUtility instead.")]
public static long Int64FromXmlAttribute(XmlReader reader);
    [ObsoleteAttribute("Use method in Microsoft.TeamFoundation.Services.Common.Internal.XmlUtility instead.")]
public static long Int64FromXmlElement(XmlReader reader);
    [ObsoleteAttribute("Use method in Microsoft.TeamFoundation.Services.Common.Internal.XmlUtility instead.")]
public static DateTime DateTimeFromXmlAttribute(XmlReader reader);
    [ObsoleteAttribute("Use method in Microsoft.TeamFoundation.Services.Common.Internal.XmlUtility instead.")]
public static DateTime DateTimeFromXmlElement(XmlReader reader);
    [ObsoleteAttribute("Use method in Microsoft.TeamFoundation.Services.Common.Internal.XmlUtility instead.")]
public static float SingleFromXmlAttribute(XmlReader reader);
    [ObsoleteAttribute("Use method in Microsoft.TeamFoundation.Services.Common.Internal.XmlUtility instead.")]
public static float SingleFromXmlElement(XmlReader reader);
    [ObsoleteAttribute("Use method in Microsoft.TeamFoundation.Services.Common.Internal.XmlUtility instead.")]
public static string StringFromXmlAttribute(XmlReader reader);
    [ObsoleteAttribute("Use method in Microsoft.TeamFoundation.Services.Common.Internal.XmlUtility instead.")]
public static string StringFromXmlElement(XmlReader reader);
    [ObsoleteAttribute("Use method in Microsoft.TeamFoundation.Services.Common.Internal.XmlUtility instead.")]
public static string StringFromXmlText(XmlReader reader);
    [ObsoleteAttribute("Use method in Microsoft.TeamFoundation.Services.Common.Internal.XmlUtility instead.")]
public static TimeSpan TimeSpanFromXmlAttribute(XmlReader reader);
    [ObsoleteAttribute("Use method in Microsoft.TeamFoundation.Services.Common.Internal.XmlUtility instead.")]
public static TimeSpan TimeSpanFromXmlElement(XmlReader reader);
    [ObsoleteAttribute("Use method in Microsoft.TeamFoundation.Services.Common.Internal.XmlUtility instead.")]
public static ushort UInt16FromXmlAttribute(XmlReader reader);
    [ObsoleteAttribute("Use method in Microsoft.TeamFoundation.Services.Common.Internal.XmlUtility instead.")]
public static ushort UInt16FromXmlElement(XmlReader reader);
    [ObsoleteAttribute("Use method in Microsoft.TeamFoundation.Services.Common.Internal.XmlUtility instead.")]
public static UInt32 UInt32FromXmlAttribute(XmlReader reader);
    [ObsoleteAttribute("Use method in Microsoft.TeamFoundation.Services.Common.Internal.XmlUtility instead.")]
public static UInt32 UInt32FromXmlElement(XmlReader reader);
    [ObsoleteAttribute("Use method in Microsoft.TeamFoundation.Services.Common.Internal.XmlUtility instead.")]
public static ulong UInt64FromXmlAttribute(XmlReader reader);
    [ObsoleteAttribute("Use method in Microsoft.TeamFoundation.Services.Common.Internal.XmlUtility instead.")]
public static ulong UInt64FromXmlElement(XmlReader reader);
    [ObsoleteAttribute("Use method in Microsoft.TeamFoundation.Services.Common.Internal.XmlUtility instead.")]
public static Uri UriFromXmlAttribute(XmlReader reader);
    [ObsoleteAttribute("Use method in Microsoft.TeamFoundation.Services.Common.Internal.XmlUtility instead.")]
public static Uri UriFromXmlElement(XmlReader reader);
    [ObsoleteAttribute("Use method in Microsoft.TeamFoundation.Services.Common.Internal.XmlUtility instead.")]
public static void ToXmlAttribute(XmlWriter writer, string name, bool value);
    [ObsoleteAttribute("Use method in Microsoft.TeamFoundation.Services.Common.Internal.XmlUtility instead.")]
public static void ToXmlAttribute(XmlWriter writer, string name, byte value);
    [ObsoleteAttribute("Use method in Microsoft.TeamFoundation.Services.Common.Internal.XmlUtility instead.")]
public static void ToXmlAttribute(XmlWriter writer, string name, char value);
    [ObsoleteAttribute("Use method in Microsoft.TeamFoundation.Services.Common.Internal.XmlUtility instead.")]
public static void ToXmlAttribute(XmlWriter writer, string name, DateTime value);
    [ObsoleteAttribute("Use method in Microsoft.TeamFoundation.Services.Common.Internal.XmlUtility instead.")]
public static void ToXmlAttribute(XmlWriter writer, string name, double value);
    [ObsoleteAttribute("Use method in Microsoft.TeamFoundation.Services.Common.Internal.XmlUtility instead.")]
public static void ToXmlAttribute(XmlWriter writer, string name, Guid value);
    [ObsoleteAttribute("Use method in Microsoft.TeamFoundation.Services.Common.Internal.XmlUtility instead.")]
public static void ToXmlAttribute(XmlWriter writer, string name, short value);
    [ObsoleteAttribute("Use method in Microsoft.TeamFoundation.Services.Common.Internal.XmlUtility instead.")]
public static void ToXmlAttribute(XmlWriter writer, string name, int value);
    [ObsoleteAttribute("Use method in Microsoft.TeamFoundation.Services.Common.Internal.XmlUtility instead.")]
public static void ToXmlAttribute(XmlWriter writer, string name, long value);
    [ObsoleteAttribute("Use method in Microsoft.TeamFoundation.Services.Common.Internal.XmlUtility instead.")]
public static void ToXmlAttribute(XmlWriter writer, string name, float value);
    [ObsoleteAttribute("Use method in Microsoft.TeamFoundation.Services.Common.Internal.XmlUtility instead.")]
public static void ToXmlAttribute(XmlWriter writer, string name, string value);
    [ObsoleteAttribute("Use method in Microsoft.TeamFoundation.Services.Common.Internal.XmlUtility instead.")]
public static void ToXmlAttribute(XmlWriter writer, string name, TimeSpan value);
    [ObsoleteAttribute("Use method in Microsoft.TeamFoundation.Services.Common.Internal.XmlUtility instead.")]
public static void ToXmlAttribute(XmlWriter writer, string name, ushort value);
    [ObsoleteAttribute("Use method in Microsoft.TeamFoundation.Services.Common.Internal.XmlUtility instead.")]
public static void ToXmlAttribute(XmlWriter writer, string name, UInt32 value);
    [ObsoleteAttribute("Use method in Microsoft.TeamFoundation.Services.Common.Internal.XmlUtility instead.")]
public static void ToXmlAttribute(XmlWriter writer, string name, ulong value);
    [ObsoleteAttribute("Use method in Microsoft.TeamFoundation.Services.Common.Internal.XmlUtility instead.")]
public static void ToXmlAttribute(XmlWriter writer, string name, Uri value);
    [ObsoleteAttribute("Use method in Microsoft.TeamFoundation.Services.Common.Internal.XmlUtility instead.")]
public static void ToXmlElement(XmlWriter writer, string name, bool value);
    [ObsoleteAttribute("Use method in Microsoft.TeamFoundation.Services.Common.Internal.XmlUtility instead.")]
public static void ToXmlElement(XmlWriter writer, string name, byte value);
    [ObsoleteAttribute("Use method in Microsoft.TeamFoundation.Services.Common.Internal.XmlUtility instead.")]
public static void ToXmlElement(XmlWriter writer, string name, char value);
    [ObsoleteAttribute("Use method in Microsoft.TeamFoundation.Services.Common.Internal.XmlUtility instead.")]
public static void ToXmlElement(XmlWriter writer, string name, DateTime value);
    [ObsoleteAttribute("Use method in Microsoft.TeamFoundation.Services.Common.Internal.XmlUtility instead.")]
public static void ToXmlElement(XmlWriter writer, string name, double value);
    [ObsoleteAttribute("Use method in Microsoft.TeamFoundation.Services.Common.Internal.XmlUtility instead.")]
public static void ToXmlElement(XmlWriter writer, string name, Guid value);
    [ObsoleteAttribute("Use method in Microsoft.TeamFoundation.Services.Common.Internal.XmlUtility instead.")]
public static void ToXmlElement(XmlWriter writer, string element, short value);
    [ObsoleteAttribute("Use method in Microsoft.TeamFoundation.Services.Common.Internal.XmlUtility instead.")]
public static void ToXmlElement(XmlWriter writer, string element, int value);
    [ObsoleteAttribute("Use method in Microsoft.TeamFoundation.Services.Common.Internal.XmlUtility instead.")]
public static void ToXmlElement(XmlWriter writer, string element, long value);
    [ObsoleteAttribute("Use method in Microsoft.TeamFoundation.Services.Common.Internal.XmlUtility instead.")]
public static void ToXmlElement(XmlWriter writer, string name, float value);
    [ObsoleteAttribute("Use method in Microsoft.TeamFoundation.Services.Common.Internal.XmlUtility instead.")]
public static void ToXmlElement(XmlWriter writer, string name, string value);
    [ObsoleteAttribute("Use method in Microsoft.TeamFoundation.Services.Common.Internal.XmlUtility instead.")]
public static void ToXmlElement(XmlWriter writer, string name, TimeSpan value);
    [ObsoleteAttribute("Use method in Microsoft.TeamFoundation.Services.Common.Internal.XmlUtility instead.")]
public static void ToXmlElement(XmlWriter writer, string element, ushort value);
    [ObsoleteAttribute("Use method in Microsoft.TeamFoundation.Services.Common.Internal.XmlUtility instead.")]
public static void ToXmlElement(XmlWriter writer, string element, UInt32 value);
    [ObsoleteAttribute("Use method in Microsoft.TeamFoundation.Services.Common.Internal.XmlUtility instead.")]
public static void ToXmlElement(XmlWriter writer, string element, ulong value);
    [ObsoleteAttribute("Use method in Microsoft.TeamFoundation.Services.Common.Internal.XmlUtility instead.")]
public static void ToXmlElement(XmlWriter writer, string name, Uri value);
    [ObsoleteAttribute("Use method in Microsoft.TeamFoundation.Services.Common.Internal.XmlUtility instead.")]
public static void StringToXmlAttribute(XmlWriter writer, string name, string value);
    [ObsoleteAttribute("Use method in Microsoft.TeamFoundation.Services.Common.Internal.XmlUtility instead.")]
public static void StringToXmlElement(XmlWriter writer, string name, string value);
    [ObsoleteAttribute("Use method in Microsoft.TeamFoundation.Services.Common.Internal.XmlUtility instead.")]
public static void StringToXmlText(XmlWriter writer, string str);
    [ObsoleteAttribute("Use method in Microsoft.TeamFoundation.Services.Common.Internal.XmlUtility instead.")]
public static Byte[] ArrayOfByteFromXml(XmlReader reader);
    [ObsoleteAttribute("Use method in Microsoft.TeamFoundation.Services.Common.Internal.XmlUtility instead.")]
public static Byte[] ArrayOfByteFromXmlAttribute(XmlReader reader);
    [ObsoleteAttribute("Use method in Microsoft.TeamFoundation.Services.Common.Internal.XmlUtility instead.")]
public static void ToXml(XmlWriter writer, string element, Byte[] array);
    [ObsoleteAttribute("Use method in Microsoft.TeamFoundation.Services.Common.Internal.XmlUtility instead.")]
public static void ToXmlAttribute(XmlWriter writer, string attr, Byte[] array);
    public static Byte[] get_ZeroLengthArrayOfByte();
    [ObsoleteAttribute("Use method in Microsoft.TeamFoundation.Services.Common.Internal.XmlUtility instead.")]
public static bool CompareXmlDocuments(string xml1, string xml2);
}
[EditorBrowsableAttribute("1")]
public static class Microsoft.TeamFoundation.CommonSqlError : object {
    public static int DateTimeShiftDetected;
    public static int ISleepIfBusyInTransaction;
    public static int SqlFaultInjection;
}
public enum Microsoft.TeamFoundation.CredentialProcurement : Enum {
    public int value__;
    public static CredentialProcurement Failed;
    public static CredentialProcurement Succeeded;
    public static CredentialProcurement Cancelled;
}
public static class Microsoft.TeamFoundation.CredentialsStorageRegistryKeywords : object {
    public static string Proxy;
    public static string Build;
    public static string TestController;
    private static CredentialsStorageRegistryKeywords();
}
public static class Microsoft.TeamFoundation.CurrentVsVersionInformation : object {
    public static string AssemblyVersion;
    public static string Version;
    public static string ProgId;
    internal static string TfsVersion;
    public static string RegistryKeyPath;
    public static string AppDataPath;
    [EditorBrowsableAttribute("1")]
public static string AppId;
    [ObsoleteAttribute("This constant will be removed in TFS 2018.")]
public static string TFSRegistryKeyPath;
    public static string TFSCommonFilesPath;
}
[ExceptionMappingAttribute("0.0", "3.0", "DatetimeShiftDetectedException", "Microsoft.TeamFoundation.DatetimeShiftDetectedException, Microsoft.TeamFoundation.Common, Version=14.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
public class Microsoft.TeamFoundation.DatetimeShiftDetectedException : TeamFoundationServerException {
}
[EditorBrowsableAttribute("1")]
public static class Microsoft.TeamFoundation.DiagnosticConstants : object {
    public static string TraceRegistryPath;
    public static string TraceEnabled;
    public static string TraceNames;
}
[EditorBrowsableAttribute("1")]
public static class Microsoft.TeamFoundation.DragDropConstants : object {
    public static string WorkItemId;
    public static string WorkItemIdList;
}
public static class Microsoft.TeamFoundation.EventLogSourceNames : object {
    public static string CoreServices;
    public static string VersionControl;
    public static string WorkItemTracking;
    public static string Warehouse;
    public static string TeamBuild;
    public static string TeamBuildService;
    public static string ProxyServer;
    public static string TFSScheduler;
    public static string TestManagement;
    public static string CoverAn;
    public static string LabManagement;
    public static string TestRig;
    public static string DeploymentRig;
    public static string WatsonReporting;
    public static string TestToolsAdapter;
    public static string WebAccess;
    public static string SyncJob;
}
[AttributeUsageAttribute("4")]
public class Microsoft.TeamFoundation.ExtensionNameAttribute : Attribute {
    private string m_name;
    public string Name { get; }
    public ExtensionNameAttribute(string name);
    public string get_Name();
}
[EditorBrowsableAttribute("1")]
public static class Microsoft.TeamFoundation.FeatureAvailabilityConstants : object {
    public static string FeatureAvailabilityAdminUsersGroupIdentifier;
    public static string FeatureAvailabilityAccountAdminUsersGroupIdentifier;
    public static string FeatureAvailabilityReadersUsersGroupIdentifier;
    private static FeatureAvailabilityConstants();
}
public enum Microsoft.TeamFoundation.FolderCreateMode : Enum {
    public int value__;
    public static FolderCreateMode None;
    public static FolderCreateMode New;
    public static FolderCreateMode Branch;
    public static FolderCreateMode NewGitRepo;
}
public static class Microsoft.TeamFoundation.Framework.Common.AadSecurity : object {
    public static Guid NamespaceId;
    public static string RootToken;
    public static char PathSeparator;
    public static string GraphToken;
    public static string TenantsToken;
    private static AadSecurity();
}
[EditorBrowsableAttribute("1")]
public static class Microsoft.TeamFoundation.Framework.Common.AccessCheckExceptionProperties : object {
    public static string DisplayName;
    public static string Token;
    public static string RequestedPermissions;
    public static string NamespaceId;
    public static string DescriptorIdentifier;
    public static string DescriptorIdentityType;
    private static AccessCheckExceptionProperties();
}
[EditorBrowsableAttribute("1")]
public class Microsoft.TeamFoundation.Framework.Common.AllValidMemoryCachePolicy`2 : object {
    public sealed virtual bool IsValid(TKey key, TValue value);
}
[EditorBrowsableAttribute("1")]
public static class Microsoft.TeamFoundation.Framework.Common.AnalysisDatabaseCatalogKeys : object {
    public static string InitialCatalogProperty;
    public static string IsOnlineProperty;
    public static string ReportingWarehouseDependency;
}
[EditorBrowsableAttribute("1")]
[ObsoleteAttribute("This field is obsolete because we no longer support this catalog entry. There is no replacement.", "False")]
public static class Microsoft.TeamFoundation.Framework.Common.ApplicationDBCatalogKeys : object {
    public static string InitialCatalogProperty;
}
public static class Microsoft.TeamFoundation.Framework.Common.ArtifactKinds : object {
    public static Guid Generic;
    [EditorBrowsableAttribute("1")]
public static Guid Catalog;
    [EditorBrowsableAttribute("1")]
public static Guid Identity;
    [EditorBrowsableAttribute("1")]
public static Guid InternalIdentity;
    [EditorBrowsableAttribute("1")]
public static Guid LocalIdentity;
    [EditorBrowsableAttribute("1")]
public static Guid Account;
    [EditorBrowsableAttribute("1")]
public static Guid ProcessTemplate;
    [EditorBrowsableAttribute("1")]
public static Guid Location;
    [EditorBrowsableAttribute("1")]
public static Guid ServiceHost;
    private static ArtifactKinds();
}
[EditorBrowsableAttribute("1")]
public abstract class Microsoft.TeamFoundation.Framework.Common.AsyncOperation : object {
    [CompilerGeneratedAttribute]
private object <AsyncState>k__BackingField;
    [CompilerGeneratedAttribute]
private AsyncCallback <Callback>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <CompletedSynchronously>k__BackingField;
    [CompilerGeneratedAttribute]
private Exception <Exception>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsCompleted>k__BackingField;
    private ManualResetEvent m_waitHandle;
    private object m_lockObject;
    public object AsyncState { get; private set; }
    public ManualResetEvent AsyncWaitHandle { get; }
    private WaitHandle System.IAsyncResult.AsyncWaitHandle { get; }
    public AsyncCallback Callback { get; private set; }
    public bool CompletedSynchronously { get; private set; }
    public Exception Exception { get; private set; }
    public bool IsCompleted { get; private set; }
    protected AsyncOperation(AsyncCallback callback, object state);
    [CompilerGeneratedAttribute]
public sealed virtual object get_AsyncState();
    [CompilerGeneratedAttribute]
private void set_AsyncState(object value);
    public ManualResetEvent get_AsyncWaitHandle();
    private sealed virtual override WaitHandle System.IAsyncResult.get_AsyncWaitHandle();
    [CompilerGeneratedAttribute]
public AsyncCallback get_Callback();
    [CompilerGeneratedAttribute]
private void set_Callback(AsyncCallback value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_CompletedSynchronously();
    [CompilerGeneratedAttribute]
private void set_CompletedSynchronously(bool value);
    [CompilerGeneratedAttribute]
public Exception get_Exception();
    [CompilerGeneratedAttribute]
private void set_Exception(Exception value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_IsCompleted();
    [CompilerGeneratedAttribute]
private void set_IsCompleted(bool value);
    protected virtual void Dispose();
    protected void Complete(bool completedSynchronously, Exception exception);
    protected static T End(IAsyncResult result);
    protected static bool TryEnd(IAsyncResult result, T& operation, Exception& error);
}
public static class Microsoft.TeamFoundation.Framework.Common.AsyncPump : object {
    public static T Run(Func`1<Task`1<T>> func);
    public static void Run(Func`1<Task> func);
}
public static class Microsoft.TeamFoundation.Framework.Common.AvailableFeatures : object {
    public static string WorkItemCharting;
}
[EditorBrowsableAttribute("1")]
public class Microsoft.TeamFoundation.Framework.Common.BaseMemoryCacheCapacityPolicy`2 : object {
    private ISizeProvider`2<TKey, TValue> m_sizeProvider;
    private long m_currentSize;
    private Capture`1<long> m_maxSize;
    private int m_currentLength;
    private Capture`1<int> m_maxLength;
    public int Length { get; }
    public long Size { get; }
    public BaseMemoryCacheCapacityPolicy`2(CaptureLength maxLength, CaptureSize maxSize, ISizeProvider`2<TKey, TValue> sizeProvider);
    public sealed virtual int get_Length();
    public sealed virtual long get_Size();
    public sealed virtual bool NeedRoom(TKey key, TValue value);
    public sealed virtual bool NeedRoom(TKey key, TValue previousValue, TValue newValue);
    public sealed virtual long OnEntryAdded(TKey key, TValue value);
    public sealed virtual SizePair OnEntryReplaced(TKey key, TValue previousValue, TValue newValue);
    public sealed virtual long OnEntryRemoved(TKey key, TValue value);
    public sealed virtual void OnCleared();
    private long GetItemSize(TKey key, TValue value);
    private long GetDeltaSize(TKey key, TValue previousValue, TValue newValue);
    private void Update(int deltaLength, long deltaSize);
    private void ValidatePolicyUpdate(int deltaLength, long deltaSize);
    private void Assert(bool condition);
}
public static class Microsoft.TeamFoundation.Framework.Common.Capture : object {
    public static Capture`1<T> Create(T value, Predicate`1<T> valueCheck);
}
public class Microsoft.TeamFoundation.Framework.Common.Capture`1 : object {
    private object m_boxedValue;
    private Predicate`1<T> m_valueCheck;
    public T Value { get; public set; }
    public Capture`1(T value, Predicate`1<T> valueCheck);
    public static T op_Implicit(Capture`1<T> value);
    public T get_Value();
    public void set_Value(T value);
    public virtual string ToString();
    private void Validate(T value);
}
public class Microsoft.TeamFoundation.Framework.Common.CaptureLength : Capture`1<int> {
    public CaptureLength(int value);
    public static CaptureLength Create(int value);
    private static bool IsValueValid(int value);
}
public class Microsoft.TeamFoundation.Framework.Common.CaptureSize : Capture`1<long> {
    public CaptureSize(long value);
    public static CaptureSize Create(long value);
    private static bool IsValueValid(long value);
}
[EditorBrowsableAttribute("1")]
public static class Microsoft.TeamFoundation.Framework.Common.Catalog.Objects.CatalogObjectUtilities : object {
    public static bool TryGetResourceTypeIdentifier(Type catalogObjectType, Guid& id);
    public static Guid GetResourceTypeIdentifier(Type catalogObjectType);
    public static Guid GetResourceTypeIdentifier();
    public static Guid[] GetResourceTypeIdentifierFilter();
    public static ICollection`1<Guid> GetKnownDescendantTypes();
    public static ICollection`1<Guid> GetKnownDescendantTypes(Type catalogObjectType);
    private static IEnumerable`1<Type> GetKnownChildTypes(Type catalogObjectType);
    public static T PropertyValueFromString(string stringValue);
    public static string PropertyValueToString(T value);
}
public enum Microsoft.TeamFoundation.Framework.Common.CatalogChangeType : Enum {
    public int value__;
    public static CatalogChangeType None;
    public static CatalogChangeType CreateOrUpdate;
    public static CatalogChangeType RecursiveDelete;
    public static CatalogChangeType NonRecursiveDelete;
}
[EditorBrowsableAttribute("1")]
public static class Microsoft.TeamFoundation.Framework.Common.CatalogConstants : object {
    public static int MandatoryNodePathLength;
    public static int MaximumPathLength;
    public static int ParentPathLength;
    public static string FullRecurseStars;
    public static string FullRecurseDots;
    public static string SingleRecurseStar;
    public static Char[] PatternMatchingCharacters;
    public static string IconRepositoryServiceType;
    private static CatalogConstants();
}
public static class Microsoft.TeamFoundation.Framework.Common.CatalogPermissions : object {
    public static int Read;
    public static int Create;
    public static int Modify;
    public static int Delete;
    public static int AllPermissions;
}
[FlagsAttribute]
public enum Microsoft.TeamFoundation.Framework.Common.CatalogQueryOptions : Enum {
    public int value__;
    public static CatalogQueryOptions None;
    public static CatalogQueryOptions ExpandDependencies;
    public static CatalogQueryOptions IncludeParents;
}
public static class Microsoft.TeamFoundation.Framework.Common.CatalogResourceTypes : object {
    public static Guid OrganizationalRoot;
    public static Guid InfrastructureRoot;
    public static Guid TeamFoundationServerInstance;
    public static Guid ProjectCollection;
    public static Guid TeamProject;
    public static Guid ResourceFolder;
    public static Guid GenericLink;
    public static Guid Machine;
    public static Guid TeamFoundationWebApplication;
    [ObsoleteAttribute("This field is obsolete because we no longer support this catalog entry. There is no replacement.", "False")]
public static Guid SqlDatabaseInstance;
    public static Guid SqlAnalysisInstance;
    public static Guid SqlReportingInstance;
    [ObsoleteAttribute("This field is obsolete because we no longer support this catalog entry. There is no replacement.", "False")]
public static Guid ApplicationDatabase;
    [ObsoleteAttribute("This field is obsolete because we no longer support this catalog entry. There is no replacement.", "False")]
public static Guid ProjectCollectionDatabase;
    public static Guid ProjectServerMapping;
    public static Guid ProjectServerRegistration;
    public static Guid SharePointWebApplication;
    public static Guid SharePointSiteCreationLocation;
    public static Guid ProjectPortal;
    public static Guid ProcessGuidanceSite;
    public static Guid WarehouseDatabase;
    public static Guid AnalysisDatabase;
    public static Guid ReportingConfiguration;
    public static Guid ReportingServer;
    public static Guid ReportingFolder;
    public static Guid TeamSystemWebAccess;
    public static Guid TestController;
    public static Guid TestEnvironment;
    public static Guid DataCollector;
    private static CatalogResourceTypes();
}
[EditorBrowsableAttribute("1")]
public static class Microsoft.TeamFoundation.Framework.Common.CatalogRoots : object {
    public static string OrganizationalPath;
    public static string InfrastructurePath;
    private static CatalogRoots();
    public static CatalogTree DetermineTree(string path);
    public static string DeterminePath(CatalogTree tree);
}
public enum Microsoft.TeamFoundation.Framework.Common.CatalogTree : Enum {
    public int value__;
    public static CatalogTree Organizational;
    public static CatalogTree Infrastructure;
}
[EditorBrowsableAttribute("1")]
public class Microsoft.TeamFoundation.Framework.Common.ClockHandEvictionPolicy`2 : object {
    private MemoryCacheEntry<TKey, TValue> m_beforeClockHand;
    public sealed virtual IMemoryCacheEntry`2<TKey, TValue> Link(TKey key, TValue value, IMemoryCacheValidityPolicy`2<TKey, TValue> validityPolicy);
    public sealed virtual void Unlink(IMemoryCacheEntry`2<TKey, TValue> entry);
    public sealed virtual void UnlinkAll();
    public sealed virtual IMemoryCacheEntry`2<TKey, TValue> GetEvictionCandidate();
    [IteratorStateMachineAttribute("Microsoft.TeamFoundation.Framework.Common.ClockHandEvictionPolicy`2/<GetInvalidationCandidates>d__4")]
public sealed virtual IEnumerable`1<IMemoryCacheEntry`2<TKey, TValue>> GetInvalidationCandidates();
}
[EditorBrowsableAttribute("1")]
[ObsoleteAttribute("This field is obsolete because we no longer support this catalog entry. There is no replacement.", "False")]
public static class Microsoft.TeamFoundation.Framework.Common.CollectionDBCatalogKeys : object {
    public static string InitialCatalogProperty;
}
[EditorBrowsableAttribute("1")]
public class Microsoft.TeamFoundation.Framework.Common.CollectionDictionary`2 : object {
    private CreateCollectionDelegate<TKey, TElement> m_createCollectionHandler;
    private bool m_removeKeyOnEmpty;
    private Dictionary`2<TKey, ICollection`1<TElement>> m_innerDictionary;
    public int Count { get; }
    public ICollection`1<TKey> Keys { get; }
    public CollectionDictionary`2(CreateCollectionDelegate<TKey, TElement> createCollectionHandler, IEqualityComparer`1<TKey> comparer, bool removeKeyOnEmpty);
    public sealed virtual void AddElement(TKey key, TElement element);
    public sealed virtual bool RemoveElement(TKey key, TElement element);
    public sealed virtual bool Remove(TKey key);
    public sealed virtual void Clear();
    public sealed virtual bool TryGetValue(TKey key, ICollection`1& collection);
    public sealed virtual bool TryGetValue(TKey key, TCollection& collection);
    public sealed virtual bool ContainsElement(TKey key, TElement element);
    public sealed virtual bool ContainsKey(TKey key);
    public sealed virtual int get_Count();
    public sealed virtual ICollection`1<TKey> get_Keys();
}
public static class Microsoft.TeamFoundation.Framework.Common.CollectionManagementPermissions : object {
    public static int CreateCollection;
    public static int DeleteCollection;
    public static int AllPermissions;
}
public class Microsoft.TeamFoundation.Framework.Common.CombinedStream : Stream {
    private Stream[] m_subStreams;
    private bool m_canSeek;
    private bool m_canRead;
    private Int64[] m_subLengths;
    private long m_length;
    private long m_position;
    private int m_idx;
    private bool m_disposed;
    private Byte[] m_buffer;
    private static int s_buffSize;
    public bool CanRead { get; }
    public bool CanSeek { get; }
    public bool CanWrite { get; }
    public long Length { get; }
    public long Position { get; public set; }
    public CombinedStream(Stream[] subStreams);
    public CombinedStream(IEnumerable`1<Stream> subStreams);
    private static CombinedStream();
    public virtual bool get_CanRead();
    public virtual bool get_CanSeek();
    public virtual bool get_CanWrite();
    public virtual long get_Length();
    public virtual long get_Position();
    public virtual void set_Position(long value);
    public virtual void Flush();
    public virtual long Seek(long offset, SeekOrigin origin);
    public virtual void SetLength(long value);
    public virtual int Read(Byte[] buffer, int offset, int count);
    public virtual void Write(Byte[] buffer, int offset, int count);
    protected virtual void Dispose(bool disposing);
    internal static void SetBufferSize(int buffSize);
    private void Init(Stream[] streams);
    private void MakeSeekable();
    private bool IsDuplicate(Stream stream, int n);
    private long SubLength(int idx);
    private Byte[] GetBuffer();
}
[EditorBrowsableAttribute("1")]
public class Microsoft.TeamFoundation.Framework.Common.CompletedOperation : AsyncOperation {
    public CompletedOperation(AsyncCallback callback, object state);
    public static void End(IAsyncResult result);
}
[EditorBrowsableAttribute("1")]
public class Microsoft.TeamFoundation.Framework.Common.CompletedOperation`1 : AsyncOperation {
    private TResult m_result;
    public CompletedOperation`1(TResult result, AsyncCallback callback, object state);
    public static TResult End(IAsyncResult result);
}
[EditorBrowsableAttribute("1")]
public class Microsoft.TeamFoundation.Framework.Common.ConcatenatingStream : Stream {
    private Stream m_input1;
    private Stream m_input2;
    private bool m_leaveInput1Open;
    private bool m_leaveInput2Open;
    private bool m_closed;
    private bool m_drainedInput1;
    private long m_position;
    public bool CanRead { get; }
    public long Length { get; }
    public bool CanSeek { get; }
    public long Position { get; public set; }
    public bool CanWrite { get; }
    public ConcatenatingStream(Stream input1, Stream input2, bool leaveInput1Open, bool leaveInput2Open);
    public virtual void Close();
    public virtual bool get_CanRead();
    public virtual int Read(Byte[] buffer, int offset, int count);
    public virtual long get_Length();
    public virtual bool get_CanSeek();
    public virtual long get_Position();
    public virtual void set_Position(long value);
    public virtual long Seek(long offset, SeekOrigin origin);
    public virtual bool get_CanWrite();
    public virtual void Flush();
    public virtual void SetLength(long value);
    public virtual void Write(Byte[] buffer, int offset, int count);
}
[EditorBrowsableAttribute("1")]
public class Microsoft.TeamFoundation.Framework.Common.ConcurrentCollectionDictionary`2 : object {
    private ReaderWriterLockSlim m_lock;
    private CreateCollectionDelegate<TKey, TElement> m_createCollectionHandler;
    private CopyCollectionDelegate<TKey, TElement> m_copyCollectionHandler;
    private bool m_removeKeyOnEmpty;
    private Dictionary`2<TKey, ICollection`1<TElement>> m_innerDictionary;
    public int Count { get; }
    public ICollection`1<TKey> Keys { get; }
    public ConcurrentCollectionDictionary`2(CreateCollectionDelegate<TKey, TElement> createCollectionHandler, CopyCollectionDelegate<TKey, TElement> copyCollectionHandler, IEqualityComparer`1<TKey> comparer, bool removeKeyOnEmpty);
    public sealed virtual void AddElement(TKey key, TElement element);
    public sealed virtual bool RemoveElement(TKey key, TElement element);
    public sealed virtual bool Remove(TKey key);
    public sealed virtual void Clear();
    public sealed virtual bool TryGetValue(TKey key, ICollection`1& collection);
    public sealed virtual bool TryGetValue(TKey key, TCollection& collection);
    public sealed virtual bool ContainsElement(TKey key, TElement element);
    public sealed virtual bool ContainsKey(TKey key);
    public sealed virtual int get_Count();
    public sealed virtual ICollection`1<TKey> get_Keys();
}
[ExceptionMappingAttribute("0.0", "3.0", "ConfigFileException", "Microsoft.TeamFoundation.Framework.Common.ConfigFileException, Microsoft.TeamFoundation.Common, Version=14.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
public class Microsoft.TeamFoundation.Framework.Common.ConfigFileException : TeamFoundationServerException {
    public ConfigFileException(string message);
    public ConfigFileException(string message, Exception innerException);
}
[FlagsAttribute]
public enum Microsoft.TeamFoundation.Framework.Common.ConnectOptions : Enum {
    public int value__;
    public static ConnectOptions None;
    public static ConnectOptions IncludeServices;
}
[EditorBrowsableAttribute("1")]
public class Microsoft.TeamFoundation.Framework.Common.DefaultTimeProvider : object {
    public DateTime Now { get; }
    public sealed virtual DateTime get_Now();
}
public static class Microsoft.TeamFoundation.Framework.Common.DiagnosticPermissions : object {
    public static int Read;
    public static int Write;
    public static int Troubleshoot;
    public static int AllPermissions;
}
[EditorBrowsableAttribute("1")]
public class Microsoft.TeamFoundation.Framework.Common.DummyMemoryCacheList`2 : object {
    public int Count { get; }
    public sealed virtual int get_Count();
    public sealed virtual bool Add(TKey key, TValue value, bool overwrite, IMemoryCacheValidityPolicy`2<TKey, TValue> validityPolicy);
    public sealed virtual bool TryGetValue(TKey key, TValue& value);
    public sealed virtual bool Remove(TKey key);
    public sealed virtual void Clear();
    public sealed virtual int Sweep();
}
[EditorBrowsableAttribute("1")]
public class Microsoft.TeamFoundation.Framework.Common.EnumeratedSparseTreeNode`1 : ValueType {
    public string Token;
    public X ReferencedObject;
    public bool HasChildren;
    public string NoChildrenBelow;
    public bool IsExactMatch;
    public EnumeratedSparseTreeNode`1(string token, X referencedObject, bool hasChildren, string noChildrenBelow, bool isExactMatch);
}
[FlagsAttribute]
[EditorBrowsableAttribute("1")]
public enum Microsoft.TeamFoundation.Framework.Common.EnumParentsOptions : Enum {
    public int value__;
    public static EnumParentsOptions None;
    public static EnumParentsOptions IncludeSparseNodes;
    public static EnumParentsOptions IncludeAdditionalData;
}
[FlagsAttribute]
[EditorBrowsableAttribute("1")]
public enum Microsoft.TeamFoundation.Framework.Common.EnumSubTreeOptions : Enum {
    public int value__;
    public static EnumSubTreeOptions None;
    public static EnumSubTreeOptions EnumerateSubTreeRoot;
    public static EnumSubTreeOptions IncludeAdditionalData;
}
public static class Microsoft.TeamFoundation.Framework.Common.EventSubscriberPermissions : object {
    public static int GenericRead;
    public static int GenericWrite;
    public static int AllPermissions;
}
public static class Microsoft.TeamFoundation.Framework.Common.EventSubscriptionPermissions : object {
    public static int GenericRead;
    public static int GenericWrite;
    public static int Unsubscribe;
    public static int CreateSoapSubscription;
    public static int AllPermissions;
}
[EditorBrowsableAttribute("1")]
public class Microsoft.TeamFoundation.Framework.Common.ExpirationCache`2 : object {
    private int m_lastSweepTickCount;
    private object m_lock;
    private ConcurrentDictionary`2<TKey, CacheEntry<TKey, TValue>> m_cache;
    private Func`3<TKey, object, TValue> m_valueFactory;
    private UInt32 m_maxAgeInMilliseconds;
    private static UInt32 c_minFalsePositiveDelta;
    public ExpirationCache`2(int expirationTimeInMilliseconds, Func`3<TKey, object, TValue> valueFactory);
    public ExpirationCache`2(int expirationTimeInMilliseconds, Func`3<TKey, object, TValue> valueFactory, IEqualityComparer`1<TKey> comparer);
    public TValue GetOrAdd(TKey key, object userState);
    public bool TryRemove(TKey key, TValue& value);
    public void RefreshExpirationForKey(TKey key);
    private void MaybeSweep(UInt32 tickCount);
    private void Sweep(UInt32 tickCount);
    private static UInt32 GetTickCount();
}
[EditorBrowsableAttribute("1")]
public static class Microsoft.TeamFoundation.Framework.Common.FrameworkConstants : object {
    public static string ResourceNameField;
    public static string HashField;
    public static string ContentField;
    public static string LengthField;
    public static string RangeField;
    public static string ExceptionHeader;
    public static int DestroyedFileId;
}
public static class Microsoft.TeamFoundation.Framework.Common.FrameworkPermissions : object {
    public static int GenericRead;
    public static int GenericWrite;
    public static int Impersonate;
    public static int TriggerEvent;
    public static int AllPermissions;
}
public static class Microsoft.TeamFoundation.Framework.Common.FrameworkSecurity : object {
    public static Guid FrameworkNamespaceId;
    public static Guid EventSubscriptionNamespaceId;
    public static Guid EventSubscriberNamespaceId;
    public static Guid JobNamespaceId;
    public static Guid RegistryNamespaceId;
    public static Guid CollectionManagementNamespaceId;
    public static Guid CatalogNamespaceId;
    public static Guid IdentitiesNamespaceId;
    public static Guid Identities2NamespaceId;
    public static Guid LocationNamespaceId;
    public static Guid StrongBoxNamespaceId;
    public static Guid DiagnosticNamespaceId;
    public static Guid TaggingNamespaceId;
    public static Guid TracingNamespaceId;
    public static Guid ProcessTemplatesNamespaceId;
    public static Guid ProcessNamespaceId;
    public static Guid MessageQueueNamespaceId;
    public static string MessageQueueNamespaceRootToken;
    public static char MessageQueuePathSeparator;
    public static string FrameworkNamespaceToken;
    public static string JobNamespaceToken;
    public static string CollectionManagementNamespaceToken;
    public static char CollectionManagementPathSeparator;
    public static char RegistryPathSeparator;
    public static string RegistryNamespaceRootToken;
    public static char IdentitySecurityPathSeparator;
    public static string IdentitySecurityRootToken;
    public static char LocationPathSeparator;
    public static string LocationNamespaceRootToken;
    public static string ServiceDefinitionsToken;
    public static string AccessMappingsToken;
    public static char StrongBoxSecurityPathSeparator;
    public static string StrongBoxSecurityNamespaceRootToken;
    public static string ProcessTemplateNamespaceToken;
    public static char DiagnosticPathSeparator;
    public static string DiagnosticNamespaceToken;
    public static Guid TeamProjectNamespaceId;
    public static Guid TeamProjectCollectionNamespaceId;
    public static string TeamProjectCollectionNamespaceToken;
    public static string TracingNamespaceToken;
    public static Guid ProxyNamespaceId;
    public static string ProxyNamespaceToken;
    private static FrameworkSecurity();
}
[EditorBrowsableAttribute("1")]
public static class Microsoft.TeamFoundation.Framework.Common.GeneralCatalogKeys : object {
    public static string ReferencedResourceDependency;
    public static string ResourceSubTypeProperty;
}
public enum Microsoft.TeamFoundation.Framework.Common.GetPropertiesOptions : Enum {
    public int value__;
    public static GetPropertiesOptions None;
    public static GetPropertiesOptions AllVersions;
}
public enum Microsoft.TeamFoundation.Framework.Common.GroupProperty : Enum {
    public int value__;
    public static GroupProperty None;
    public static GroupProperty Name;
    public static GroupProperty Description;
}
public enum Microsoft.TeamFoundation.Framework.Common.GroupSpecialType : Enum {
    public int value__;
    public static GroupSpecialType Generic;
    public static GroupSpecialType AdministrativeApplicationGroup;
    public static GroupSpecialType ServiceApplicationGroup;
    public static GroupSpecialType EveryoneApplicationGroup;
    public static GroupSpecialType LicenseesApplicationGroup;
    public static GroupSpecialType AzureActiveDirectoryApplicationGroup;
    public static GroupSpecialType AzureActiveDirectoryRole;
}
[EditorBrowsableAttribute("1")]
public class Microsoft.TeamFoundation.Framework.Common.HashingStream : Stream {
    private Stream m_stream;
    private HashAlgorithm m_hash;
    private bool m_leaveOpen;
    private bool m_closed;
    private bool m_transformedFinalBlock;
    private static Byte[] s_emptyByteArray;
    public Byte[] HashValue { get; }
    public bool CanRead { get; }
    public bool CanSeek { get; }
    public bool CanWrite { get; }
    public long Length { get; }
    public long Position { get; public set; }
    public HashingStream(Stream stream, HashAlgorithm hash, bool leaveOpen);
    private static HashingStream();
    public virtual void Close();
    public Byte[] get_HashValue();
    public virtual bool get_CanRead();
    public virtual bool get_CanSeek();
    public virtual bool get_CanWrite();
    public virtual long get_Length();
    public virtual long get_Position();
    public virtual void set_Position(long value);
    public virtual int Read(Byte[] buffer, int offset, int count);
    public virtual void Flush();
    public virtual long Seek(long offset, SeekOrigin origin);
    public virtual void SetLength(long value);
    public virtual void Write(Byte[] buffer, int offset, int count);
}
[EditorBrowsableAttribute("1")]
public interface Microsoft.TeamFoundation.Framework.Common.ICollectionDictionary`2 {
    public int Count { get; }
    public ICollection`1<TKey> Keys { get; }
    public abstract virtual void AddElement(TKey key, TElement element);
    public abstract virtual bool RemoveElement(TKey key, TElement element);
    public abstract virtual bool Remove(TKey key);
    public abstract virtual void Clear();
    public abstract virtual bool TryGetValue(TKey key, ICollection`1& collection);
    public abstract virtual bool TryGetValue(TKey key, TCollection& collection);
    public abstract virtual bool ContainsElement(TKey key, TElement element);
    public abstract virtual bool ContainsKey(TKey key);
    public abstract virtual int get_Count();
    public abstract virtual ICollection`1<TKey> get_Keys();
}
public static class Microsoft.TeamFoundation.Framework.Common.IdentitiesPermission : object {
    public static int Read;
    public static int Write;
    public static int Delete;
    public static int Impersonate;
    public static int AllPermissions;
}
public static class Microsoft.TeamFoundation.Framework.Common.IdentityPermissions : object {
    public static int Read;
    public static int Write;
    public static int Delete;
    public static int ManageMembership;
    public static int CreateScope;
    public static int RestoreScope;
    public static int ForceDelete;
    public static int AllPermissions;
}
public enum Microsoft.TeamFoundation.Framework.Common.IdentityPropertyScope : Enum {
    public int value__;
    public static IdentityPropertyScope None;
    public static IdentityPropertyScope Global;
    public static IdentityPropertyScope Local;
    public static IdentityPropertyScope Both;
}
public enum Microsoft.TeamFoundation.Framework.Common.IdentitySearchFactor : Enum {
    public int value__;
    public static IdentitySearchFactor AccountName;
    public static IdentitySearchFactor DisplayName;
    public static IdentitySearchFactor AdministratorsGroup;
    public static IdentitySearchFactor Identifier;
    public static IdentitySearchFactor MailAddress;
    public static IdentitySearchFactor General;
    public static IdentitySearchFactor Alias;
    public static IdentitySearchFactor DirectoryAlias;
    public static IdentitySearchFactor LocalGroupName;
}
[EditorBrowsableAttribute("1")]
public interface Microsoft.TeamFoundation.Framework.Common.IExpiryProvider`2 {
    public abstract virtual bool IsExpired(TKey key, TValue value, DateTime modifiedTimestamp, DateTime accesedTimestamp);
}
[EditorBrowsableAttribute("1")]
public interface Microsoft.TeamFoundation.Framework.Common.IMemoryCacheCapacityPolicy`2 {
    public int Length { get; }
    public long Size { get; }
    public abstract virtual int get_Length();
    public abstract virtual long get_Size();
    public abstract virtual bool NeedRoom(TKey key, TValue value);
    public abstract virtual bool NeedRoom(TKey key, TValue previousValue, TValue newValue);
    public abstract virtual long OnEntryAdded(TKey key, TValue value);
    public abstract virtual SizePair OnEntryReplaced(TKey key, TValue previousValue, TValue newValue);
    public abstract virtual long OnEntryRemoved(TKey key, TValue value);
    public abstract virtual void OnCleared();
}
[EditorBrowsableAttribute("1")]
public interface Microsoft.TeamFoundation.Framework.Common.IMemoryCacheEntry`2 {
    public TKey Key { get; }
    public TValue Value { get; public set; }
    public IMemoryCacheValidityPolicy`2<TKey, TValue> ValidityPolicy { get; public set; }
    public abstract virtual TKey get_Key();
    public abstract virtual TValue get_Value();
    public abstract virtual void set_Value(TValue value);
    public abstract virtual IMemoryCacheValidityPolicy`2<TKey, TValue> get_ValidityPolicy();
    public abstract virtual void set_ValidityPolicy(IMemoryCacheValidityPolicy`2<TKey, TValue> value);
    public abstract virtual void OnCacheHit();
}
[EditorBrowsableAttribute("1")]
public interface Microsoft.TeamFoundation.Framework.Common.IMemoryCacheEvictionPolicy`2 {
    public abstract virtual IMemoryCacheEntry`2<TKey, TValue> Link(TKey key, TValue value, IMemoryCacheValidityPolicy`2<TKey, TValue> validityPolicy);
    public abstract virtual void Unlink(IMemoryCacheEntry`2<TKey, TValue> entry);
    public abstract virtual void UnlinkAll();
    public abstract virtual IMemoryCacheEntry`2<TKey, TValue> GetEvictionCandidate();
    public abstract virtual IEnumerable`1<IMemoryCacheEntry`2<TKey, TValue>> GetInvalidationCandidates();
}
[EditorBrowsableAttribute("1")]
public interface Microsoft.TeamFoundation.Framework.Common.IMemoryCacheList`2 {
    public int Count { get; }
    public abstract virtual int get_Count();
    public abstract virtual bool Add(TKey key, TValue value, bool overwrite, IMemoryCacheValidityPolicy`2<TKey, TValue> validityPolicy);
    public abstract virtual bool TryGetValue(TKey key, TValue& value);
    public abstract virtual bool Remove(TKey key);
    public abstract virtual void Clear();
    public abstract virtual int Sweep();
}
[EditorBrowsableAttribute("1")]
public interface Microsoft.TeamFoundation.Framework.Common.IMemoryCacheSubscriber`2 {
    public abstract virtual void OnEntryLookupSucceeded(TKey key, TValue value);
    public abstract virtual void OnEntryLookupFailed(TKey key);
    public abstract virtual void OnEntryReplaced(TKey key, TValue previousValue, TValue newValue, MemoryCacheOperationStatistics stats);
    public abstract virtual void OnEntryEvicted(TKey key, TValue value, MemoryCacheOperationStatistics stats);
    public abstract virtual void OnEntryInvalidated(TKey key, TValue value, MemoryCacheOperationStatistics stats);
    public abstract virtual void OnEntryRemoved(TKey key, TValue value, MemoryCacheOperationStatistics stats);
    public abstract virtual void OnEntryAdded(TKey key, TValue value, MemoryCacheOperationStatistics stats);
    public abstract virtual void OnCleared(MemoryCacheOperationStatistics stats);
}
[EditorBrowsableAttribute("1")]
public interface Microsoft.TeamFoundation.Framework.Common.IMemoryCacheValidityPolicy`2 {
    public abstract virtual bool IsValid(TKey key, TValue value);
}
[EditorBrowsableAttribute("1")]
public class Microsoft.TeamFoundation.Framework.Common.InputQueue`1 : object {
    private State<T> m_state;
    private object m_thisLock;
    private FastItemQueue<T> m_items;
    private List`1<IQueueWaiter<T>> m_waiters;
    private List`1<IQueueReader<T>> m_readers;
    public int Count { get; }
    public int get_Count();
    public void Close();
    private sealed virtual override void System.IDisposable.Dispose();
    public void Enqueue(T item, bool canDispatchOnThisThread);
    public void Enqueue(T item, ItemDequeuedCallback dequeuedCallback, bool canDispatchOnThisThread);
    public void Enqueue(Exception exception, bool canDispatchOnThisThread);
    public void Enqueue(Exception exception, ItemDequeuedCallback dequeuedCallback, bool canDispatchOnThisThread);
    private void EnqueueAndDispatch(Item<T> item, bool canDispatchOnThisThread);
    public bool Dequeue(TimeSpan timeout, T& item);
    public Task`1<T> DequeueAsync();
    public Task`1<T> DequeueAsync(TimeSpan timeout);
    public Task`1<T> DequeueAsync(CancellationToken cancellationToken);
    public Task`1<T> DequeueAsync(TimeSpan timeout, CancellationToken cancellationToken);
    public IAsyncResult BeginDequeue(TimeSpan timeout, AsyncCallback callback, object state);
    public IAsyncResult BeginDequeue(CancellationToken cancellationToken, AsyncCallback callback, object state);
    public IAsyncResult BeginDequeue(TimeSpan timeout, CancellationToken cancellationToken, AsyncCallback callback, object state);
    public T EndDequeue(IAsyncResult result);
    public bool EndDequeue(IAsyncResult result, T& item);
    public bool WaitForItem(TimeSpan timeout);
    public IAsyncResult BeginWaitForItem(TimeSpan timeout, AsyncCallback callback, object state);
    public bool EndWaitForItem(IAsyncResult result);
    public void Shutdown();
    private bool RemoveWaiter(IQueueWaiter<T> waiter);
    private bool RemoveReader(IQueueReader<T> reader);
    private IQueueWaiter[] SnapshotWaiters();
    private static void CompleteReaders(IQueueReader[] readers);
    private static void CompleteReadersLater(IQueueReader[] readers);
    private static void CompleteReadersCallback(object state);
    private static void CompleteWaiters(bool itemAvailable, IQueueWaiter[] waiters);
    private static void CompleteWaitersLater(bool itemAvailable, IQueueWaiter[] waiters);
    private static void CompleteWaitersTrueCallback(object state);
    private static void CompleteWaitersFalseCallback(object state);
    private void Dispatch();
    private static void DispatchLaterCallback(object state);
    private static void InvokeDequeuedCallback(ItemDequeuedCallback dequeuedCallback);
}
public interface Microsoft.TeamFoundation.Framework.Common.IProxyRegistration {
    public abstract virtual string GetCollectionId(Uri tfsUri);
}
[EditorBrowsableAttribute("1")]
public interface Microsoft.TeamFoundation.Framework.Common.ISizeProvider`2 {
    public abstract virtual long GetSize(TKey key, TValue value);
}
[EditorBrowsableAttribute("1")]
public class Microsoft.TeamFoundation.Framework.Common.ItemDequeuedCallback : MulticastDelegate {
    public ItemDequeuedCallback(object object, IntPtr method);
    public virtual void Invoke();
    public virtual IAsyncResult BeginInvoke(AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
[EditorBrowsableAttribute("1")]
public interface Microsoft.TeamFoundation.Framework.Common.ITimeProvider {
    public DateTime Now { get; }
    public abstract virtual DateTime get_Now();
}
public static class Microsoft.TeamFoundation.Framework.Common.JobPermissions : object {
    public static int Read;
    public static int Queue;
    public static int Update;
    public static int AllPermissions;
}
public enum Microsoft.TeamFoundation.Framework.Common.JobPriorityClass : Enum {
    public int value__;
    public static JobPriorityClass None;
    public static JobPriorityClass Idle;
    public static JobPriorityClass Normal;
    public static JobPriorityClass AboveNormal;
    public static JobPriorityClass High;
}
public enum Microsoft.TeamFoundation.Framework.Common.JobPriorityLevel : Enum {
    public int value__;
    public static JobPriorityLevel None;
    public static JobPriorityLevel Idle;
    public static JobPriorityLevel Lowest;
    public static JobPriorityLevel BelowNormal;
    public static JobPriorityLevel Normal;
    public static JobPriorityLevel Highest;
}
[EditorBrowsableAttribute("1")]
public class Microsoft.TeamFoundation.Framework.Common.LengthAndSizeMemoryCachePolicy`2 : BaseMemoryCacheCapacityPolicy`2<TKey, TValue> {
    public LengthAndSizeMemoryCachePolicy`2(CaptureLength maxLength, CaptureSize maxSize, ISizeProvider`2<TKey, TValue> sizeProvider);
}
[EditorBrowsableAttribute("1")]
public class Microsoft.TeamFoundation.Framework.Common.LengthOnlyMemoryCachePolicy`2 : LengthAndSizeMemoryCachePolicy`2<TKey, TValue> {
    public LengthOnlyMemoryCachePolicy`2(CaptureLength maxLength);
}
[EditorBrowsableAttribute("1")]
public static class Microsoft.TeamFoundation.Framework.Common.LocationHelper : object {
    public static string GetRootServerUrl(string locationServiceUrl);
    public static string CreateSecurityToken(string serviceType, Guid identifier);
}
public static class Microsoft.TeamFoundation.Framework.Common.LocationPermissions : object {
    public static int Read;
    public static int Write;
    public static int AllPermissions;
}
public static class Microsoft.TeamFoundation.Framework.Common.LocationServiceConstants : object {
    [EditorBrowsableAttribute("1")]
public static string DataDirEnvVar;
    public static Guid SelfReferenceLocationServiceIdentifier;
    public static Guid ApplicationLocationServiceIdentifier;
    [EditorBrowsableAttribute("1")]
public static Guid InvalidServiceDefinitionIdentifier;
    [EditorBrowsableAttribute("1")]
public static string CollectionLocationServiceRelativePath;
    [EditorBrowsableAttribute("1")]
public static string ApplicationLocationServiceRelativePath;
    [ObsoleteAttribute]
[EditorBrowsableAttribute("1")]
public static string PublicAccessMappingMoniker;
    [ObsoleteAttribute]
[EditorBrowsableAttribute("1")]
public static string ServerAccessMappingMoniker;
    private static LocationServiceConstants();
}
[EditorBrowsableAttribute("1")]
public static class Microsoft.TeamFoundation.Framework.Common.MachineCatalogKeys : object {
    public static string MachineNameProperty;
    public static string ProductVersionProperty;
    public static string ServiceLevelProperty;
    public static string ConnectTimeProperty;
}
internal class Microsoft.TeamFoundation.Framework.Common.MakeConnectionBodyWriter : BodyWriter {
    private string m_id;
    public MakeConnectionBodyWriter(string id);
    protected virtual void OnWriteBodyContents(XmlDictionaryWriter writer);
    public static string Create(XmlDictionaryReader reader);
}
[EditorBrowsableAttribute("1")]
public static class Microsoft.TeamFoundation.Framework.Common.MakeConnectionConstants : object {
    public static string Action;
    public static string Address;
    public static string Name;
    public static string Namespace;
    public static string NamespacePrefix;
    public static string MessagePendingHeader;
    public static string MessagePendingAttribute;
}
public enum Microsoft.TeamFoundation.Framework.Common.MembershipQuery : Enum {
    public int value__;
    public static MembershipQuery None;
    public static MembershipQuery Direct;
    public static MembershipQuery Expanded;
    public static MembershipQuery ExpandedUp;
    public static MembershipQuery ExpandedDown;
}
[EditorBrowsableAttribute("1")]
public class Microsoft.TeamFoundation.Framework.Common.MemoryCacheDummySubscriber`2 : object {
    public sealed virtual void OnEntryLookupSucceeded(TKey key, TValue value);
    public sealed virtual void OnEntryLookupFailed(TKey key);
    public sealed virtual void OnEntryAdded(TKey key, TValue value, MemoryCacheOperationStatistics stats);
    public sealed virtual void OnEntryReplaced(TKey key, TValue previousValue, TValue newValue, MemoryCacheOperationStatistics stats);
    public sealed virtual void OnEntryRemoved(TKey key, TValue value, MemoryCacheOperationStatistics stats);
    public sealed virtual void OnEntryEvicted(TKey key, TValue value, MemoryCacheOperationStatistics stats);
    public sealed virtual void OnEntryInvalidated(TKey key, TValue value, MemoryCacheOperationStatistics stats);
    public sealed virtual void OnCleared(MemoryCacheOperationStatistics stats);
}
[EditorBrowsableAttribute("1")]
public class Microsoft.TeamFoundation.Framework.Common.MemoryCacheList`2 : object {
    [CompilerGeneratedAttribute]
private EventHandler`1<MemoryCacheReplacementEventArgs<TKey, TValue>> EntryReplaced;
    [CompilerGeneratedAttribute]
private EventHandler`1<MemoryCacheEventArgs<TKey, TValue>> EntryEvicted;
    [CompilerGeneratedAttribute]
private EventHandler`1<MemoryCacheEventArgs<TKey, TValue>> EntryInvalidated;
    [CompilerGeneratedAttribute]
private EventHandler`1<MemoryCacheEventArgs<TKey, TValue>> EntryRemoved;
    [CompilerGeneratedAttribute]
private EventHandler`1<MemoryCacheEventArgs<TKey, TValue>> EntryAdded;
    [CompilerGeneratedAttribute]
private EventHandler Cleared;
    private IMemoryCacheList`2<TKey, TValue> m_cache;
    public int Count { get; }
    public MemoryCacheList`2(IMemoryCacheCapacityPolicy`2<TKey, TValue> capacityPolicy, IMemoryCacheEvictionPolicy`2<TKey, TValue> evictionPolicy, IMemoryCacheSubscriber`2<TKey, TValue> subscriber, bool synchronized);
    public MemoryCacheList`2(IEqualityComparer`1<TKey> comparer, IMemoryCacheCapacityPolicy`2<TKey, TValue> capacityPolicy, IMemoryCacheEvictionPolicy`2<TKey, TValue> evictionPolicy, IMemoryCacheSubscriber`2<TKey, TValue> subscriber, bool synchronized);
    [CompilerGeneratedAttribute]
public void add_EntryReplaced(EventHandler`1<MemoryCacheReplacementEventArgs<TKey, TValue>> value);
    [CompilerGeneratedAttribute]
public void remove_EntryReplaced(EventHandler`1<MemoryCacheReplacementEventArgs<TKey, TValue>> value);
    [CompilerGeneratedAttribute]
public void add_EntryEvicted(EventHandler`1<MemoryCacheEventArgs<TKey, TValue>> value);
    [CompilerGeneratedAttribute]
public void remove_EntryEvicted(EventHandler`1<MemoryCacheEventArgs<TKey, TValue>> value);
    [CompilerGeneratedAttribute]
public void add_EntryInvalidated(EventHandler`1<MemoryCacheEventArgs<TKey, TValue>> value);
    [CompilerGeneratedAttribute]
public void remove_EntryInvalidated(EventHandler`1<MemoryCacheEventArgs<TKey, TValue>> value);
    [CompilerGeneratedAttribute]
public void add_EntryRemoved(EventHandler`1<MemoryCacheEventArgs<TKey, TValue>> value);
    [CompilerGeneratedAttribute]
public void remove_EntryRemoved(EventHandler`1<MemoryCacheEventArgs<TKey, TValue>> value);
    [CompilerGeneratedAttribute]
public void add_EntryAdded(EventHandler`1<MemoryCacheEventArgs<TKey, TValue>> value);
    [CompilerGeneratedAttribute]
public void remove_EntryAdded(EventHandler`1<MemoryCacheEventArgs<TKey, TValue>> value);
    [CompilerGeneratedAttribute]
public void add_Cleared(EventHandler value);
    [CompilerGeneratedAttribute]
public void remove_Cleared(EventHandler value);
    public sealed virtual int get_Count();
    public sealed virtual bool Add(TKey key, TValue value, bool overwrite, IMemoryCacheValidityPolicy`2<TKey, TValue> validityPolicy);
    public sealed virtual bool TryGetValue(TKey key, TValue& value);
    public sealed virtual bool Remove(TKey key);
    public sealed virtual void Clear();
    public sealed virtual int Sweep();
}
[EditorBrowsableAttribute("1")]
public class Microsoft.TeamFoundation.Framework.Common.MemoryCacheListSynchronized`2 : MemoryCacheListUnsafe`2<TKey, TValue> {
    private ReaderWriterLockSlim m_readerWriterLock;
    public int Count { get; }
    public MemoryCacheListSynchronized`2(IMemoryCacheCapacityPolicy`2<TKey, TValue> capacityPolicy, IMemoryCacheEvictionPolicy`2<TKey, TValue> evictionPolicy, IMemoryCacheSubscriber`2<TKey, TValue> subscriber);
    public MemoryCacheListSynchronized`2(IEqualityComparer`1<TKey> comparer, IMemoryCacheCapacityPolicy`2<TKey, TValue> capacityPolicy, IMemoryCacheEvictionPolicy`2<TKey, TValue> evictionPolicy, IMemoryCacheSubscriber`2<TKey, TValue> subscriber);
    public sealed virtual void Clear();
    public sealed virtual bool Add(TKey key, TValue value, bool overwrite, IMemoryCacheValidityPolicy`2<TKey, TValue> validityPolicy);
    public sealed virtual bool Remove(TKey key);
    public sealed virtual bool TryGetValue(TKey key, TValue& value);
    public sealed virtual int get_Count();
}
[EditorBrowsableAttribute("1")]
public class Microsoft.TeamFoundation.Framework.Common.MemoryCacheListUnsafe`2 : object {
    private Dictionary`2<TKey, IMemoryCacheEntry`2<TKey, TValue>> m_dictionary;
    private IMemoryCacheCapacityPolicy`2<TKey, TValue> m_capacityPolicy;
    private IMemoryCacheSubscriber`2<TKey, TValue> m_subscriber;
    private IMemoryCacheEvictionPolicy`2<TKey, TValue> m_evictionPolicy;
    public int Count { get; }
    public MemoryCacheListUnsafe`2(IMemoryCacheCapacityPolicy`2<TKey, TValue> capacityPolicy, IMemoryCacheEvictionPolicy`2<TKey, TValue> evictionPolicy, IMemoryCacheSubscriber`2<TKey, TValue> subscriber);
    public MemoryCacheListUnsafe`2(IEqualityComparer`1<TKey> comparer, IMemoryCacheCapacityPolicy`2<TKey, TValue> capacityPolicy, IMemoryCacheEvictionPolicy`2<TKey, TValue> evictionPolicy, IMemoryCacheSubscriber`2<TKey, TValue> subscriber);
    private void NotifyEntryLookupSucceeded(IMemoryCacheEntry`2<TKey, TValue> entry);
    private void NotifyEntryLookupFailed(TKey key);
    private void NotifyEntryAdded(IMemoryCacheEntry`2<TKey, TValue> entry);
    private void NotifyEntryReplaced(IMemoryCacheEntry`2<TKey, TValue> entry, TValue previousValue, bool valueValid);
    private void NotifyEntryEvicted(IMemoryCacheEntry`2<TKey, TValue> entry);
    private void NotifyEntryInvalidated(IMemoryCacheEntry`2<TKey, TValue> entry);
    private void NotifyEntryRemoved(IMemoryCacheEntry`2<TKey, TValue> entry);
    private void NotifyCleared();
    public sealed virtual void Clear();
    public sealed virtual int Sweep();
    public sealed virtual bool Add(TKey key, TValue value, bool overwrite, IMemoryCacheValidityPolicy`2<TKey, TValue> validityPolicy);
    public sealed virtual bool Remove(TKey key);
    public sealed virtual bool TryGetValue(TKey key, TValue& value);
    public sealed virtual int get_Count();
    private bool EnsureSpace(TKey key, TValue value, IMemoryCacheEntry`2& extantEntry);
    private IMemoryCacheEntry`2<TKey, TValue> Evict();
    private bool IsValid(IMemoryCacheEntry`2<TKey, TValue> entry);
}
[EditorBrowsableAttribute("1")]
public static class Microsoft.TeamFoundation.Framework.Common.MemoryCacheMultiSubscriber : object {
    public static IMemoryCacheSubscriber`2<TKey, TValue> Create(IMemoryCacheSubscriber`2<TKey, TValue> inst1, IMemoryCacheSubscriber`2<TKey, TValue> inst2);
}
[EditorBrowsableAttribute("1")]
public class Microsoft.TeamFoundation.Framework.Common.MemoryCacheMultiSubscriber`2 : object {
    private IMemoryCacheSubscriber`2[] m_subscribers;
    public MemoryCacheMultiSubscriber`2(IEnumerable`1<IMemoryCacheSubscriber`2<TKey, TValue>> subscribers);
    public sealed virtual void OnEntryLookupSucceeded(TKey key, TValue value);
    public sealed virtual void OnEntryLookupFailed(TKey key);
    public sealed virtual void OnEntryAdded(TKey key, TValue value, MemoryCacheOperationStatistics stats);
    public sealed virtual void OnEntryReplaced(TKey key, TValue previousValue, TValue newValue, MemoryCacheOperationStatistics stats);
    public sealed virtual void OnEntryRemoved(TKey key, TValue value, MemoryCacheOperationStatistics stats);
    public sealed virtual void OnEntryEvicted(TKey key, TValue value, MemoryCacheOperationStatistics stats);
    public sealed virtual void OnEntryInvalidated(TKey key, TValue value, MemoryCacheOperationStatistics stats);
    public sealed virtual void OnCleared(MemoryCacheOperationStatistics stats);
}
public class Microsoft.TeamFoundation.Framework.Common.MemoryCacheOperationStatistics : ValueType {
    [CompilerGeneratedAttribute]
private int <CountDiff>k__BackingField;
    [CompilerGeneratedAttribute]
private long <SizeDiff>k__BackingField;
    public int CountDiff { get; }
    public long SizeDiff { get; }
    public MemoryCacheOperationStatistics(int countDiff, long sizeDiff);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public int get_CountDiff();
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public long get_SizeDiff();
}
public static class Microsoft.TeamFoundation.Framework.Common.MessageQueuePermissions : object {
    public static int Read;
    public static int Enqueue;
    public static int Dequeue;
    public static int Create;
    public static int Delete;
    public static int AllPermissions;
}
[EditorBrowsableAttribute("1")]
public static class Microsoft.TeamFoundation.Framework.Common.MultipleIdentitiesFoundExceptionProperties : object {
    public static string DisplayNames;
    public static string UniqueNames;
    private static MultipleIdentitiesFoundExceptionProperties();
}
[EditorBrowsableAttribute("1")]
public class Microsoft.TeamFoundation.Framework.Common.NoExpiryProvider`2 : object {
    public sealed virtual bool IsExpired(TKey key, TValue value, DateTime modifiedTimestmap, DateTime accessedTimestamp);
}
[EditorBrowsableAttribute("1")]
public class Microsoft.TeamFoundation.Framework.Common.NoSizeProvider`2 : object {
    public sealed virtual long GetSize(TKey key, TValue value);
}
[ExceptionMappingAttribute("0.0", "3.0", "OperationNotSupportedException", "Microsoft.TeamFoundation.Framework.Common.OperationNotSupportedException, Microsoft.TeamFoundation.Common, Version=14.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
public class Microsoft.TeamFoundation.Framework.Common.OperationNotSupportedException : TeamFoundationServerException {
    public OperationNotSupportedException(string functionName, string serviceName);
}
[DefaultMemberAttribute("Item")]
[EditorBrowsableAttribute("1")]
public class Microsoft.TeamFoundation.Framework.Common.PathTable`1 : object {
    private static EntryCompare<T> s_fullPathCompare;
    private static EntryCompare<T> s_parentPathCompare;
    private char m_tokenSeparator;
    private string m_tokenSeparatorString;
    private StringComparison m_comparison;
    private PathTableRow`1[] m_list;
    private int m_size;
    private bool m_sorted;
    private static PathTableRow`1[] s_emptyArray;
    public T Item { get; public set; }
    public StringComparison Comparison { get; }
    public int Count { get; }
    public PathTable`1(char tokenSeparator, bool caseInsensitive);
    private static PathTable`1();
    public void Reserve(int capacity);
    private void EnsureCapacity(int minimum);
    public void Add(string token, T referencedObject, bool overwrite);
    private void Insert(int index, PathTableRow`1& item);
    public void ModifyInPlace(string token, ModifyInPlaceCallback<T> callback);
    public void AddUnsorted(string token, T referencedObject);
    public void Sort(bool checkForDuplicates);
    private static bool DefaultDuplicateHandler(string token, T value1, T value2);
    public void Sort(Func`4<string, T, T, bool> duplicateHandler);
    private void RemoveAt(int index);
    public bool TryGetByIndex(int index, T& referencedObject);
    public bool TryGetValue(string token, T& referencedObject);
    public bool TryGetValueAndIndex(string token, T& referencedObject, Int32& index);
    public T get_Item(string token);
    public void set_Item(string token, T value);
    public void SetValueAtIndex(int index, string token, T value);
    public StringComparison get_Comparison();
    public int get_Count();
    public void Clear();
    public bool Remove(string token, bool removeChildren);
    private void RemoveRange(int index, int count);
    [IteratorStateMachineAttribute("Microsoft.TeamFoundation.Framework.Common.PathTable`1/<EnumRoots>d__25")]
public IEnumerable`1<PathTableTokenAndValue`1<T>> EnumRoots();
    [IteratorStateMachineAttribute("Microsoft.TeamFoundation.Framework.Common.PathTable`1/<EnumAllDifferences>d__26")]
public static IEnumerable`1<PathTableTokenAndValue`1<T>> EnumAllDifferences(PathTable`1<T> pt1, PathTable`1<T> pt2);
    [IteratorStateMachineAttribute("Microsoft.TeamFoundation.Framework.Common.PathTable`1/<EnumRootsReferencedObjects>d__27")]
public IEnumerable`1<T> EnumRootsReferencedObjects();
    [IteratorStateMachineAttribute("Microsoft.TeamFoundation.Framework.Common.PathTable`1/<EnumParents>d__28")]
public IEnumerable`1<PathTableTokenAndValue`1<T>> EnumParents(string token);
    [IteratorStateMachineAttribute("Microsoft.TeamFoundation.Framework.Common.PathTable`1/<EnumParentsReferencedObjects>d__29")]
public IEnumerable`1<T> EnumParentsReferencedObjects(string token);
    public SimpleSubTreeEnumerable<T> EnumSubTree(string token, bool enumerateSubTreeRoot, PathTableRecursion depth);
    public IEnumerable`1<PathTableTokenAndValue`1<T>> EnumSubTree(string token, bool enumerateSubTreeRoot, PathTableRecursion depth, IEnumerable`1<string> exclusions);
    [IteratorStateMachineAttribute("Microsoft.TeamFoundation.Framework.Common.PathTable`1/<EnumRanges>d__32")]
private IEnumerable`1<PathTableTokenAndValue`1<T>> EnumRanges(PathTableRanges<T> ranges);
    [IteratorStateMachineAttribute("Microsoft.TeamFoundation.Framework.Common.PathTable`1/<EnumSubTreeReferencedObjects>d__33")]
public IEnumerable`1<T> EnumSubTreeReferencedObjects(string token, bool enumerateSubTreeRoot, PathTableRecursion depth, IEnumerable`1<string> exclusions);
    private void SubTreeSeek(string token, bool enumerateSubTreeRoot, PathTableRecursion depth, Int32& rootIndex, PathTableRange& children, int startIndex, int endIndex);
    [IteratorStateMachineAttribute("Microsoft.TeamFoundation.Framework.Common.PathTable`1/<SubTreeSeek>d__35")]
private IEnumerable`1<PathTableRange<T>> SubTreeSeek(string token, bool enumerateSubTreeRoot, PathTableRecursion depth, int startIndex, int endIndex);
    private PathTableRange<T> RangeSeek(string token, PathTableRecursion depth, int startIndex, int endIndex);
    public bool HasSubItem(string token, int startIndex);
    private string CanonicalizeToken(string token);
    private int GetCanonicalTokenLength(string token);
    private void RequireSorted();
    private int GetParentPathLength(string token);
    private int GetParentPathLength(string token, int tokenLength);
    private string EndRange(string token);
    private static PathTableRecursion DepthReduce(PathTableRecursion depth);
    private bool IsSubItem(string item, string parent);
    private int Seek(EntryCompare<T> compare, string token, int compareParam, int compareParam2, int startIndex, int endIndex);
    private static int FullPathCompare(PathTableRow`1& entry, string token, StringComparison comparison, int parentPathLength, int tokenLength);
    private static int ParentPathCompare(PathTableRow`1& entry, string token, StringComparison comparison, int equalityResult, int dummy);
    [CompilerGeneratedAttribute]
internal static void <EnumAllDifferences>g__MoveNextNonDuplicate|26_0(PathTableRow`1[] list, StringComparison listComparison, int listSize, Int32& k);
    [CompilerGeneratedAttribute]
private string <EnumSubTree>b__31_0(string s);
}
[EditorBrowsableAttribute("1")]
public enum Microsoft.TeamFoundation.Framework.Common.PathTableRecursion : Enum {
    public int value__;
    public static PathTableRecursion Full;
    public static PathTableRecursion None;
    public static PathTableRecursion OneLevel;
}
[IsReadOnlyAttribute]
[EditorBrowsableAttribute("1")]
public class Microsoft.TeamFoundation.Framework.Common.PathTableTokenAndValue`1 : ValueType {
    public string Token;
    public T Value;
    public PathTableTokenAndValue`1(string token, T value);
}
[EditorBrowsableAttribute("1")]
public static class Microsoft.TeamFoundation.Framework.Common.ProcessGuidanceSiteCatalogKeys : object {
    public static string RelativePathProperty;
    public static string AsciiNameProperty;
    public static string FullyQualifiedUrlProperty;
}
public static class Microsoft.TeamFoundation.Framework.Common.ProcessPermissions : object {
    public static int Write;
    public static int Edit;
    public static int Delete;
    public static int Create;
    public static int AdministerProcessPermissions;
    public static int Read;
    public static int ReadRules;
    public static int ManageProcess;
    public static int AllPermissions;
}
[EditorBrowsableAttribute("1")]
public static class Microsoft.TeamFoundation.Framework.Common.ProcessTemplateIdPropertyNames : object {
    public static string CurrentProcessTemplateId;
    public static string OriginalProcessTemplateId;
    public static string ProcessTemplateType;
    public static string ProcessTemplateTypeAtCreation;
    private static ProcessTemplateIdPropertyNames();
}
public static class Microsoft.TeamFoundation.Framework.Common.ProcessTemplatePermissions : object {
    public static int GenericRead;
    public static int ReadTemplateContents;
    public static int ManageTemplates;
    public static int AllPermissions;
}
[EditorBrowsableAttribute("1")]
public static class Microsoft.TeamFoundation.Framework.Common.ProcessTemplateVersionPropertyNames : object {
    public static string CreationVersion;
    public static string CurrentVersion;
    public static string IsOptOutOfPromote;
    private static ProcessTemplateVersionPropertyNames();
}
[EditorBrowsableAttribute("1")]
public static class Microsoft.TeamFoundation.Framework.Common.ProjectCollectionCatalogKeys : object {
    public static string LocationServiceReference;
    [ObsoleteAttribute("This field is obsolete because we no longer support this catalog entry. There is no replacement.", "False")]
public static string CollectionDBDependency;
    public static string InstanceIdProperty;
}
[EditorBrowsableAttribute("1")]
public static class Microsoft.TeamFoundation.Framework.Common.ProjectPortalCatalogKeys : object {
    public static string RelativePathProperty;
    public static string OwnedWebIdentifierProperty;
    public static string FullyQualifiedUrlProperty;
}
internal static class Microsoft.TeamFoundation.Framework.Common.ProjectServerResourceCatalogKeys : object {
    public static string PwaSiteLocation;
    public static string SspSiteLocation;
    private static ProjectServerResourceCatalogKeys();
}
[EditorBrowsableAttribute("1")]
public static class Microsoft.TeamFoundation.Framework.Common.ProjectSettingsCatalogHelper : object {
    public static List`1<Guid> GetProjectSettingsResourceTypes(bool includeReportingAndSharePoint);
    public static String[] GetProjectCollectionPathSpecs(string tpcFullPath);
}
[FlagsAttribute]
public enum Microsoft.TeamFoundation.Framework.Common.PropertiesOptions : Enum {
    public int value__;
    public static PropertiesOptions None;
    public static PropertiesOptions AllVersions;
}
[ObsoleteAttribute("Please use Microsoft.VisualStudio.Services.Common.PropertyTypeNotSupportedException instead.")]
[EditorBrowsableAttribute("1")]
[ExceptionMappingAttribute("0.0", "3.0", "PropertyTypeNotSupportedException", "Microsoft.TeamFoundation.Framework.Common.PropertyTypeNotSupportedException, Microsoft.TeamFoundation.Common, Version=14.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
public class Microsoft.TeamFoundation.Framework.Common.PropertyTypeNotSupportedException : TeamFoundationPropertyValidationException {
    public PropertyTypeNotSupportedException(string propertyName, Type type);
}
public static class Microsoft.TeamFoundation.Framework.Common.ProxyPermissions : object {
    public static int Read;
    public static int Manage;
    private static ProxyPermissions();
}
[FlagsAttribute]
public enum Microsoft.TeamFoundation.Framework.Common.ReadIdentityOptions : Enum {
    public int value__;
    public static ReadIdentityOptions None;
    public static ReadIdentityOptions IncludeReadFromSource;
    public static ReadIdentityOptions TrueSid;
    public static ReadIdentityOptions ExtendedProperties;
    public static ReadIdentityOptions DoNotQualifyAccountNames;
}
public enum Microsoft.TeamFoundation.Framework.Common.RegistryChangeType : Enum {
    public int value__;
    public static RegistryChangeType None;
    public static RegistryChangeType Insert;
    public static RegistryChangeType Update;
    public static RegistryChangeType Delete;
}
public static class Microsoft.TeamFoundation.Framework.Common.RegistryServicePermissions : object {
    public static int Read;
    public static int Write;
    public static int AllPermissions;
}
[EditorBrowsableAttribute("1")]
public static class Microsoft.TeamFoundation.Framework.Common.RegistryUtility : object {
    private static Char[] s_singleSlash;
    private static String[] s_depthOneSegments;
    private static String[] s_fullDepthSegments;
    private static RegistryUtility();
    public static string ToString(T value);
    public static T FromString(string value);
    public static T FromString(string value, T defaultValue);
    public static string GetKeyName(string path);
    public static string ToAbsolute(string rootPath, string path);
    public static void Parse(string pathPattern, String& path, String& pattern, Int32& depth);
}
public enum Microsoft.TeamFoundation.Framework.Common.RelativeToSetting : Enum {
    public int value__;
    public static RelativeToSetting Context;
    public static RelativeToSetting WebApplication;
    public static RelativeToSetting FullyQualified;
}
[EditorBrowsableAttribute("1")]
public static class Microsoft.TeamFoundation.Framework.Common.ReportingConfigurationCatalogKeys : object {
    public static string ReportingWarehouseDependency;
    public static string ReportingCubeDependency;
    public static string ReportingServerDependency;
}
internal static class Microsoft.TeamFoundation.Framework.Common.ReportingFolderCatalogKeys : object {
    public static string ItemPathProperty;
}
[EditorBrowsableAttribute("1")]
public static class Microsoft.TeamFoundation.Framework.Common.ReportingServerCatalogKeys : object {
    public static string DefaultItemPathProperty;
    public static string ReportManagerUrlService;
    public static string ReportWebServiceUrlService;
}
[EditorBrowsableAttribute("1")]
public class Microsoft.TeamFoundation.Framework.Common.RestrictedStream : Stream {
    private Stream m_stream;
    private long m_length;
    private bool m_leaveOpen;
    private long m_position;
    private bool m_closed;
    public bool CanRead { get; }
    public bool CanSeek { get; }
    public bool CanWrite { get; }
    public long Length { get; }
    public long Position { get; public set; }
    public RestrictedStream(Stream stream, long offset, long length, bool leaveOpen);
    public virtual void Close();
    public virtual bool get_CanRead();
    public virtual bool get_CanSeek();
    public virtual bool get_CanWrite();
    public virtual long get_Length();
    public virtual long get_Position();
    public virtual void set_Position(long value);
    public virtual int Read(Byte[] buffer, int offset, int count);
    public virtual long Seek(long offset, SeekOrigin origin);
    public virtual void Flush();
    public virtual void SetLength(long value);
    public virtual void Write(Byte[] buffer, int offset, int count);
}
[EditorBrowsableAttribute("1")]
public class Microsoft.TeamFoundation.Framework.Common.SecurityIdentifierInfo : object {
    private Byte[] m_binarySid;
    private Byte[] m_domainBinarySid;
    private SecurityIdentifier m_securityId;
    public SecurityIdentifier SecurityId { get; }
    public SecurityIdentifierInfo(SecurityIdentifier securityId);
    public SecurityIdentifier get_SecurityId();
    public Byte[] GetBinaryForm();
    public Byte[] GetAccountDomainBinaryForm();
}
public enum Microsoft.TeamFoundation.Framework.Common.SecurityNamespaceStructure : Enum {
    public int value__;
    public static SecurityNamespaceStructure Flat;
    public static SecurityNamespaceStructure Hierarchical;
}
[EditorBrowsableAttribute("1")]
public static class Microsoft.TeamFoundation.Framework.Common.SecurityUtility : object {
    public static void MergePermissions(int existingAllow, int existingDeny, int newAllow, int newDeny, int remove, Int32& updatedAllow, Int32& updatedDeny);
}
public enum Microsoft.TeamFoundation.Framework.Common.ServiceHostSubStatus : Enum {
    public int value__;
    [XmlEnumAttribute("-1")]
public static ServiceHostSubStatus Unchanged;
    [XmlEnumAttribute("0")]
public static ServiceHostSubStatus None;
    [XmlEnumAttribute("1")]
public static ServiceHostSubStatus Creating;
    [XmlEnumAttribute("2")]
public static ServiceHostSubStatus Servicing;
    [XmlEnumAttribute("3")]
public static ServiceHostSubStatus Deleting;
    [XmlEnumAttribute("4")]
public static ServiceHostSubStatus Detaching;
    [XmlEnumAttribute("5")]
public static ServiceHostSubStatus Importing;
    [XmlEnumAttribute("6")]
public static ServiceHostSubStatus Reparenting;
    [XmlEnumAttribute("7")]
public static ServiceHostSubStatus Migrating;
    [XmlEnumAttribute("8")]
public static ServiceHostSubStatus Moving;
    [XmlEnumAttribute("9")]
public static ServiceHostSubStatus UserRequested;
    [XmlEnumAttribute("10")]
public static ServiceHostSubStatus Testing;
    [XmlEnumAttribute("11")]
public static ServiceHostSubStatus UpgradeDuringImport;
    [XmlEnumAttribute("12")]
public static ServiceHostSubStatus Idle;
    [XmlEnumAttribute("13")]
public static ServiceHostSubStatus Propagate;
    [XmlEnumAttribute("14")]
public static ServiceHostSubStatus Cloning;
}
public enum Microsoft.TeamFoundation.Framework.Common.ServicingStepLogEntryKind : Enum {
    public int value__;
    public static ServicingStepLogEntryKind Informational;
    public static ServicingStepLogEntryKind Warning;
    public static ServicingStepLogEntryKind Error;
    public static ServicingStepLogEntryKind StepDuration;
    public static ServicingStepLogEntryKind GroupDuration;
    public static ServicingStepLogEntryKind OperationDuration;
    public static ServicingStepLogEntryKind SleepDuration;
}
public enum Microsoft.TeamFoundation.Framework.Common.ServicingStepState : Enum {
    public int value__;
    public static ServicingStepState NotExecuted;
    public static ServicingStepState Validating;
    public static ServicingStepState Validated;
    public static ServicingStepState ValidatedWithWarnings;
    public static ServicingStepState Executing;
    public static ServicingStepState Failed;
    public static ServicingStepState Skipped;
    public static ServicingStepState Passed;
    public static ServicingStepState PassedWithWarnings;
    public static ServicingStepState PassedWithSkipChildren;
}
[EditorBrowsableAttribute("1")]
public static class Microsoft.TeamFoundation.Framework.Common.SharePointSiteCreationLocationCatalogKeys : object {
    public static string RelativePathProperty;
}
[EditorBrowsableAttribute("1")]
public static class Microsoft.TeamFoundation.Framework.Common.SharePointWebApplicationCatalogKeys : object {
    public static string DefaultRelativePathProperty;
    public static string RootUrlService;
    public static string AdminUrlService;
}
public static class Microsoft.TeamFoundation.Framework.Common.SidIdentityHelper : object {
    [CompilerGeneratedAttribute]
private static StringComparer <WellKnownGroupSidComparer>k__BackingField;
    internal static UInt32 s_identifierAuthorityNullAuthority;
    internal static UInt32 s_identifierAuthorityWorldAuthority;
    internal static UInt32 s_identifierAuthorityLocalAuthority;
    internal static UInt32 s_identifierAuthorityCreatorAuthority;
    internal static UInt32 s_identifierAuthorityNonUniqueAuthority;
    internal static UInt32 s_identifierAuthorityNTAuthority;
    internal static UInt32 s_identifierAuthoritySiteServerAuthority;
    internal static UInt32 s_identifierAuthorityInternetSiteAuthority;
    internal static UInt32 s_identifierAuthorityExchangeAuthority;
    internal static UInt32 s_identifierAuthorityResourceManagerAuthority;
    private static UInt32 s_subAuthority0;
    private static UInt32 s_subAuthority1;
    private static UInt32 s_subAuthority2;
    private static UInt32 s_subAuthority3;
    private static string s_teamFoundationSidPrefix;
    private static string s_wellKnownDomainSid;
    private static Guid s_wellKnownDomainId;
    private static string s_wellKnownSidType;
    private static string s_phantomSidType;
    private static string s_aadSidType;
    private static UInt32 c_PhantomSidType;
    private static UInt32 c_AadSidType;
    private static string s_wellKnownSidPrefix;
    private static string s_phantomSidPrefix;
    private static string s_aadSidPrefix;
    private static Regex WellKnownGroupPrefixRegex;
    [EditorBrowsableAttribute("1")]
public static Char[] IllegalNameChars;
    public static StringComparer WellKnownGroupSidComparer { get; }
    [EditorBrowsableAttribute("1")]
public static string TeamFoundationSidPrefix { get; }
    [EditorBrowsableAttribute("1")]
public static string WellKnownDomainSid { get; }
    [EditorBrowsableAttribute("1")]
public static string WellKnownSidPrefix { get; }
    [EditorBrowsableAttribute("1")]
public static string PhantomSidPrefix { get; }
    [EditorBrowsableAttribute("1")]
public static string AadSidPrefix { get; }
    [EditorBrowsableAttribute("1")]
public static string WellKnownSidType { get; }
    private static SidIdentityHelper();
    [EditorBrowsableAttribute("1")]
public static SecurityIdentifier NewSid(Guid domainId);
    public static string ConstructWellKnownSid(UInt32 sidPoolId, UInt32 specificSidNumber);
    [EditorBrowsableAttribute("1")]
public static SecurityIdentifier ConstructPhantomSid(Guid phantomId);
    [EditorBrowsableAttribute("1")]
public static SecurityIdentifier ConstructAadGroupSid(Guid aadGroupId);
    private static SecurityIdentifier ConstructExtendedSid(Guid seed, UInt32 sidType);
    [EditorBrowsableAttribute("1")]
public static Guid DecodePhantomSid(SecurityIdentifierInfo securityIdInfo);
    [EditorBrowsableAttribute("1")]
public static Guid DecodeAadSid(SecurityIdentifierInfo securityIdInfo);
    private static Guid DecodeExtendedSid(SecurityIdentifierInfo securityIdInfo);
    public static SecurityIdentifier GetDomainSid(Guid domainId);
    private static void FillDomainSid(UInt32[] subAuthorities, Guid domainId);
    public static UInt32[] DecodeSid(Byte[] binarySid, Int32& revision, UInt64& authority);
    public static Byte[] EncodeSid(ulong identifierAuthority, UInt32[] subAuthorities);
    public static UInt32 GetSidRid(Byte[] binarySid);
    public static bool IsServiceAccount(Byte[] sid);
    public static bool IsNTAccount(Byte[] sid);
    public static bool IsBuiltInAccount(Byte[] binarySid);
    public static bool IsNTServiceAccount(Byte[] binarySid);
    public static bool IsAadGroupSid(Byte[] sid);
    public static bool IsWellKnownGroup(string sid, string targetGroupSid);
    public static bool IsWellKnownSid(string sid);
    [EditorBrowsableAttribute("1")]
public static void ResolveSid(SecurityIdentifierInfo securityIdInfo, String& domain, String& userName, AccountType& type, Boolean& isDeleted);
    [EditorBrowsableAttribute("1")]
public static void ResolveSid(SecurityIdentifierInfo securityIdInfo, String& domain, String& userName, AccountType& type, Boolean& isDeleted, Boolean& migrated);
    [EditorBrowsableAttribute("1")]
public static bool IsTeamFoundationIdentifier(SecurityIdentifierInfo securityIdInfo);
    [CompilerGeneratedAttribute]
public static StringComparer get_WellKnownGroupSidComparer();
    public static string get_TeamFoundationSidPrefix();
    public static string get_WellKnownDomainSid();
    public static string get_WellKnownSidPrefix();
    public static string get_PhantomSidPrefix();
    public static string get_AadSidPrefix();
    public static string get_WellKnownSidType();
    private static UInt32 ArrayToInt(Byte[] array, int index);
    private static void IntToArray(UInt32 subAuthority, Byte[] array, int index);
}
[EditorBrowsableAttribute("1")]
public class Microsoft.TeamFoundation.Framework.Common.SizeOnlyMemoryCachePolicy`2 : LengthAndSizeMemoryCachePolicy`2<TKey, TValue> {
    public SizeOnlyMemoryCachePolicy`2(CaptureSize maxSize, ISizeProvider`2<TKey, TValue> sizeProvider);
}
public class Microsoft.TeamFoundation.Framework.Common.SizePair : ValueType {
    [CompilerGeneratedAttribute]
private long <PreviousItemSize>k__BackingField;
    [CompilerGeneratedAttribute]
private long <NewItemSize>k__BackingField;
    public long PreviousItemSize { get; }
    public long NewItemSize { get; }
    public SizePair(long previousItemSize, long newItemSize);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public long get_PreviousItemSize();
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public long get_NewItemSize();
}
[DefaultMemberAttribute("Item")]
[EditorBrowsableAttribute("1")]
public class Microsoft.TeamFoundation.Framework.Common.SparseTree`1 : object {
    public StringComparison TokenComparison;
    public char TokenSeparator;
    public int FixedElementLength;
    private SparseTreeNode`1<T, T> m_rootNode;
    private int m_count;
    private bool m_sealed;
    public T Item { get; public set; }
    public int Count { get; }
    public SparseTree`1(char tokenSeparator, StringComparison comparison);
    public SparseTree`1(int fixedElementLength, StringComparison comparison);
    public SparseTree`1(char tokenSeparator, int fixedElementLength, StringComparison comparison);
    public SparseTree`1(SparseTree`1<T> source, bool deepCopy, bool lazyCopy);
    public void Clear();
    public T GetOrAdd(string token, Func`2<X, T> valueFactory, X valueFactoryParameter);
    public void Add(string token, T referencedObject);
    private void Add(string token, T referencedObject, bool overwrite);
    private Int32[] GetTokenIndices(SparseTreeNode`1<T, T> parent, string token);
    private void AddNode(SparseTreeNode`1<T, T> parentNode, SparseTreeNode`1<T, T> childNode, int insertIndex, bool indexIsChild);
    public bool Remove(string token, bool recurse);
    public T get_Item(string token);
    public void set_Item(string token, T value);
    public bool TryGetValue(string token, T& referencedObject);
    public bool TryGetValue(string token, bool exactMatch, T& referencedObject);
    public bool EnumAndEvaluateParents(string token, EnumParentsOptions options, EnumNodeCallback<T> evaluate);
    private bool EnumAndEvaluateParentsHelper(SparseTreeNode`1<T, T> node, string token, EnumParentsOptions options, EnumNodeCallback<T> evaluate, String& noChildrenBelow);
    private bool ChopToken(String& tokenToChop, string stopAtToken);
    public IEnumerable`1<EnumeratedSparseTreeNode`1<T>> EnumParents(string token, EnumParentsOptions options);
    private string GetNoChildrenBelowToken(string token, EnumParentsOptions options, SparseTreeNode`1<T, T> currentNode, bool isExactMatch);
    private int GetNextTokenLength(string token, int length);
    [IteratorStateMachineAttribute("Microsoft.TeamFoundation.Framework.Common.SparseTree`1/<EnumParentsReferencedObjects>d__23")]
public IEnumerable`1<T> EnumParentsReferencedObjects(string token, EnumParentsOptions options);
    [IteratorStateMachineAttribute("Microsoft.TeamFoundation.Framework.Common.SparseTree`1/<EnumSubTree>d__24")]
public IEnumerable`1<EnumeratedSparseTreeNode`1<T>> EnumSubTree(string token, EnumSubTreeOptions options, int depth);
    private int GetDepth(string token, int startIndex);
    [IteratorStateMachineAttribute("Microsoft.TeamFoundation.Framework.Common.SparseTree`1/<EnumSubTreeReferencedObjects>d__26")]
public IEnumerable`1<T> EnumSubTreeReferencedObjects(string token, EnumSubTreeOptions options, int depth);
    private static int CountNode(SparseTreeNode`1<T, T> nodeToCount);
    private string CanonicalizeToken(string token);
    private int GetCanonicalTokenLength(string token);
    private bool IsSubItem(string item, string parent, int startIndex);
    private bool IsSubItem(string item, string parent, int startIndex, int parentLength);
    private bool FindClosestNode(string token, SparseTreeNode`1& closestNode);
    private bool FindClosestNode(string token, SparseTreeNode`1& closestNode, Int32& insertIndex);
    private bool FindClosestNode(string token, SparseTreeNode`1& closestNode, Int32& insertIndex, Boolean& indexIsChild, bool hintEndRange, bool copyPath);
    private bool FindClosestNode(string token, SparseTreeNode`1& closestNode, SparseTreeNode`1& immediateParent, Int32& insertIndex, Int32& indexInParent, Boolean& indexIsChild, bool hintEndRange, bool copyPath);
    private void CheckSealStatus(bool expectedStatus);
    private int Seek(SparseTreeNode`1<T, T> node, string token, int tokenLength, int startIndex, int endIndex);
    private int Seek(SparseTreeNode`1<T, T> node, string token, int tokenLength, Boolean& isExactMatch, Boolean& indexIsChild, int startIndex, int endIndex, bool hintEndRange);
    private int EndRangeSeek(SparseTreeNode`1<T, T> node, string token, int tokenLength, int startIndex, int endIndex);
    private int TokenSeparatorSeek(SparseTreeNode`1<T, T> node, string token, int tokenLength, Boolean& isExactMatch, Boolean& indexIsChild, int startIndex, int endIndex, bool hintEndRange);
    private int TokenSeparatorCompare(SparseTreeNode`1<T, T> node, int elementIndex, int elementCount, string token2, int token2Index, int token2Count, Boolean& outOfParts);
    private int TokenSeparatorEndRangeSeek(SparseTreeNode`1<T, T> node, string token, int tokenLength, int startIndex, int endIndex);
    private int TokenSeparatorEndRangeCompare(SparseTreeNode`1<T, T> node, int elementIndex, int elementCount, string token2, int token2Index, int token2Count);
    private int FixedLengthSeek(SparseTreeNode`1<T, T> node, string token, int tokenLength, Boolean& isExactMatch, Boolean& indexIsChild, int startIndex, int endIndex, bool hintEndRange);
    private int FixedLengthCompare(string token1, int token1Index, int token1Count, string token2, int token2Index, int token2Count, Boolean& outOfParts);
    private int FixedLengthEndRangeSeek(SparseTreeNode`1<T, T> node, string token, int tokenLength, int startIndex, int endIndex);
    private int FixedLengthEndRangeCompare(string token1, int token1Index, int token1Count, string token2, int token2Index, int token2Count);
    public int get_Count();
    public void Seal();
}
[EditorBrowsableAttribute("1")]
public static class Microsoft.TeamFoundation.Framework.Common.SQLAnalysisInstanceCatalogKeys : object {
    public static string IsClusteredProperty;
    public static string InstanceNameProperty;
}
[EditorBrowsableAttribute("1")]
[ObsoleteAttribute("This field is obsolete because we no longer support this catalog entry. There is no replacement.", "False")]
public static class Microsoft.TeamFoundation.Framework.Common.SQLDatabaseInstanceCatalogKeys : object {
    public static string IsClusteredProperty;
    public static string InstanceNameProperty;
}
[EditorBrowsableAttribute("1")]
public static class Microsoft.TeamFoundation.Framework.Common.SQLReportingInstanceCatalogKeys : object {
    public static string IsClusteredProperty;
    public static string InstanceNameProperty;
}
public static class Microsoft.TeamFoundation.Framework.Common.StrongBoxPermissions : object {
    public static int CreateDrawer;
    public static int DeleteDrawer;
    public static int AdministerStrongBox;
    public static int AddItem;
    public static int GetItem;
    public static int DeleteItem;
    public static int AdministerDrawer;
    public static int AllStrongBox;
    public static int AllDrawer;
}
public static class Microsoft.TeamFoundation.Framework.Common.TaggingPermissions : object {
    public static int Enumerate;
    public static int Create;
    public static int Update;
    public static int Delete;
    public static int AllPermissions;
    private static TaggingPermissions();
}
[EditorBrowsableAttribute("1")]
public static class Microsoft.TeamFoundation.Framework.Common.TeamFoundationInstanceCatalogKeys : object {
    public static string LocationServiceReference;
    public static string WebApplicationDependency;
    [ObsoleteAttribute("This field is obsolete because we no longer support this catalog entry. There is no replacement.", "False")]
public static string ApplicationDBDependency;
    public static string TeamSystemWebAccess;
}
public enum Microsoft.TeamFoundation.Framework.Common.TeamFoundationJobEnabledState : Enum {
    public int value__;
    public static TeamFoundationJobEnabledState Enabled;
    public static TeamFoundationJobEnabledState SchedulesDisabled;
    public static TeamFoundationJobEnabledState FullyDisabled;
}
[FlagsAttribute]
public enum Microsoft.TeamFoundation.Framework.Common.TeamFoundationJobQueuedReasons : Enum {
    public int value__;
    public static TeamFoundationJobQueuedReasons None;
    public static TeamFoundationJobQueuedReasons Scheduled;
    public static TeamFoundationJobQueuedReasons Queued;
    public static TeamFoundationJobQueuedReasons QueuedWhileInProgress;
    public static TeamFoundationJobQueuedReasons PreviousExecutionResult;
}
public enum Microsoft.TeamFoundation.Framework.Common.TeamFoundationJobResult : Enum {
    public int value__;
    public static TeamFoundationJobResult None;
    public static TeamFoundationJobResult Succeeded;
    public static TeamFoundationJobResult PartiallySucceeded;
    public static TeamFoundationJobResult Failed;
    public static TeamFoundationJobResult Stopped;
    public static TeamFoundationJobResult Killed;
    public static TeamFoundationJobResult Blocked;
    public static TeamFoundationJobResult ExtensionNotFound;
    public static TeamFoundationJobResult Inactive;
    public static TeamFoundationJobResult Disabled;
    public static TeamFoundationJobResult JobInitializationError;
    public static TeamFoundationJobResult BlockedByUpgrade;
    public static TeamFoundationJobResult HostShutdown;
    public static TeamFoundationJobResult HostNotFound;
    public static TeamFoundationJobResult JobDefinitionNotFound;
    public static TeamFoundationJobResult Last;
}
public enum Microsoft.TeamFoundation.Framework.Common.TeamFoundationJobState : Enum {
    public int value__;
    public static TeamFoundationJobState Dormant;
    public static TeamFoundationJobState QueuedScheduled;
    public static TeamFoundationJobState Running;
    [ObsoleteAttribute("Pausing jobs is no longer supported.")]
public static TeamFoundationJobState Paused;
    [ObsoleteAttribute("Pausing jobs is no longer supported.")]
public static TeamFoundationJobState Pausing;
    [ObsoleteAttribute("Pausing jobs is no longer supported.")]
public static TeamFoundationJobState Resuming;
    public static TeamFoundationJobState Stopping;
}
[ObsoleteAttribute("Please use Microsoft.VisualStudio.Services.Common.VssPropertyValidationException instead.")]
[EditorBrowsableAttribute("1")]
[ExceptionMappingAttribute("0.0", "3.0", "TeamFoundationPropertyValidationException", "Microsoft.TeamFoundation.Framework.Common.TeamFoundationPropertyValidationException, Microsoft.TeamFoundation.Common, Version=14.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
public class Microsoft.TeamFoundation.Framework.Common.TeamFoundationPropertyValidationException : Exception {
    [CompilerGeneratedAttribute]
private string <PropertyName>k__BackingField;
    public string PropertyName { get; public set; }
    public TeamFoundationPropertyValidationException(string propertyName, string message);
    public TeamFoundationPropertyValidationException(string propertyName, string message, Exception innerException);
    [CompilerGeneratedAttribute]
public string get_PropertyName();
    [CompilerGeneratedAttribute]
public void set_PropertyName(string value);
}
public enum Microsoft.TeamFoundation.Framework.Common.TeamFoundationServiceHostStatus : Enum {
    public int value__;
    public static TeamFoundationServiceHostStatus Unchanged;
    public static TeamFoundationServiceHostStatus Starting;
    public static TeamFoundationServiceHostStatus Started;
    public static TeamFoundationServiceHostStatus Stopping;
    public static TeamFoundationServiceHostStatus Stopped;
    public static TeamFoundationServiceHostStatus Pausing;
    public static TeamFoundationServiceHostStatus Paused;
}
[FlagsAttribute]
public enum Microsoft.TeamFoundation.Framework.Common.TeamFoundationSupportedFeatures : Enum {
    public int value__;
    public static TeamFoundationSupportedFeatures None;
    public static TeamFoundationSupportedFeatures IdentityProperties;
    public static TeamFoundationSupportedFeatures All;
}
public static class Microsoft.TeamFoundation.Framework.Common.TeamProjectCollectionPermissions : object {
    public static int GenericRead;
    public static int GenericWrite;
    public static int CreateProjects;
    public static int AdministerWarehouse;
    public static int TriggerEvent;
    public static int ManageTemplate;
    public static int DiagnosticTrace;
    public static int SynchronizeRead;
    public static int ManageTestControllers;
    public static int DeleteField;
    public static int ManageEnterprisePolicies;
    public static int AllPermissions;
    private static TeamProjectCollectionPermissions();
}
public static class Microsoft.TeamFoundation.Framework.Common.TeamProjectPermissions : object {
    public static int GenericRead;
    public static int GenericWrite;
    public static int Delete;
    public static int PublishTestResults;
    public static int AdministerBuild;
    public static int StartBuild;
    public static int EditBuildStatus;
    public static int UpdateBuild;
    public static int DeleteTestResults;
    public static int ViewTestResults;
    public static int ManageTestEnvironments;
    public static int ManageTestConfigurations;
    public static int WorkItemDelete;
    public static int WorkItemMove;
    public static int WorkItemPermanentlyDelete;
    public static int Rename;
    public static int ManageProperties;
    public static int ManageSystemProperties;
    public static int BypassPropertyCache;
    public static int BypassRules;
    public static int SuppressNotifications;
    public static int UpdateVisibility;
    public static int ChangeProjectsProcess;
    public static int AllPermissions;
    private static TeamProjectPermissions();
}
internal static class Microsoft.TeamFoundation.Framework.Common.TeamSystemWebAccessCatalogKeys : object {
    public static string HomeServiceReference;
    public static string WorkItemEditorServiceReference;
    public static string ChangesetDetailServiceReference;
    public static string DifferenceServiceReference;
    public static string ViewItemServiceReference;
    public static string ShelvesetDetailServiceReference;
    public static string QueryResultsServiceReference;
    public static string AnnotateServiceReference;
    public static string SourceExplorerServiceReference;
    public static string OpenWorkItemServiceReference;
    public static string CreateWorkItemServiceReference;
    public static string ViewServerQueryResultsServiceReference;
    public static string ViewWiqlQueryResultsServiceReference;
    public static string ExploreSourceControlPathServiceReference;
    public static string FindShelvesetServiceReference;
    public static string ViewShelvesetDetailsServiceReference;
    public static string FindChangesetServiceReference;
    public static string ViewChangesetDetailsServiceReference;
    public static string ViewSourceControlItemServiceReference;
    public static string DownloadSourceControlItemServiceReference;
    public static string DiffSourceControlItemsServiceReference;
    public static string AnnotateSourceControlItemServiceReference;
    public static string ViewSourceControlItemHistoryServiceReference;
    public static string ViewBuildDetailsServiceReference;
    public static string ViewSourceControlShelvedItemServiceReference;
    public static string DiffSourceControlShelvedItemServiceReference;
}
[EditorBrowsableAttribute("1")]
public static class Microsoft.TeamFoundation.Framework.Common.TestControllerCatalogKeys : object {
    public static string ControllerNameProperty;
    public static string GroupIdProperty;
}
[EditorBrowsableAttribute("1")]
public static class Microsoft.TeamFoundation.Framework.Common.TestEnvironmentCatalogKeys : object {
    public static string ControllerNameProperty;
    public static string ProjectNameProperty;
    public static string EnvironmentNameProperty;
    public static string EnvironmentIdProperty;
    public static string MachineRolesProperty;
}
[EditorBrowsableAttribute("1")]
public static class Microsoft.TeamFoundation.Framework.Common.TfsMessageQueueConstantsV1 : object {
    public static string Namespace;
    public static string MessageId;
    public static string AcknowledgementHeader;
    public static string AcknowledgementLastMessageIdHeader;
}
[EditorBrowsableAttribute("1")]
public static class Microsoft.TeamFoundation.Framework.Common.TfsMessageQueueConstantsV2 : object {
    public static string Namespace;
    public static string Acknowledge;
    public static string AcknowledgeAction;
    public static string AcknowledgeReplyAction;
    public static string Dequeue;
    public static string DequeueAction;
    public static string MessageId;
    public static string LastMessage;
    public static string Acknowledgement;
    public static string AcknowledgementRange;
    public static string AcknowledgementRangeLower;
    public static string AcknowledgementRangeUpper;
}
public enum Microsoft.TeamFoundation.Framework.Common.TfsMessageQueueVersion : Enum {
    public int value__;
    public static TfsMessageQueueVersion V1;
    public static TfsMessageQueueVersion V2;
    public static TfsMessageQueueVersion V3;
}
internal abstract class Microsoft.TeamFoundation.Framework.Common.TfsmqTraceActivity : object {
    protected abstract virtual void OnWriteXml(XmlDictionaryWriter writer, TraceLevel level);
    private sealed virtual override string Microsoft.TeamFoundation.ITeamFoundationTraceable.GetTraceString(TraceLevel traceLevel);
    public virtual string ToString();
}
internal class Microsoft.TeamFoundation.Framework.Common.TfsmqTraceKeywords : TraceKeywords {
    internal static string MessageQueue;
    private static TfsmqTraceKeywords();
}
[EditorBrowsableAttribute("1")]
public class Microsoft.TeamFoundation.Framework.Common.TfsmqTraceKeywordSets : TraceKeywordSets {
    public static String[] MessageQueue;
    private static TfsmqTraceKeywordSets();
}
[EditorBrowsableAttribute("1")]
public class Microsoft.TeamFoundation.Framework.Common.TimeoutHelper : object {
    private TimeSpan m_timeout;
    private Stopwatch m_stopwatch;
    private static TimeSpan s_maxDuration;
    public TimeSpan Value { get; }
    public TimeoutHelper(TimeSpan timeout);
    private static TimeoutHelper();
    public TimeSpan get_Value();
    public void Resume();
    public void Suspend();
    public TimeSpan ElapsedTime();
    public TimeSpan RemainingTime();
    public int RemainingTimeInMilliseconds();
    public static TimeSpan Min(TimeSpan left, TimeSpan right);
    public static TimeSpan Max(TimeSpan left, TimeSpan right);
    public static TimeSpan Trim(TimeSpan timeout);
    public static bool WaitOne(WaitHandle waitHandle, TimeSpan timeout);
}
[EditorBrowsableAttribute("1")]
public class Microsoft.TeamFoundation.Framework.Common.UnlimitedCapacityMemoryCachePolicy`2 : object {
    private int m_currentLength;
    public int Length { get; }
    public long Size { get; }
    public sealed virtual int get_Length();
    public sealed virtual long get_Size();
    public sealed virtual bool NeedRoom(TKey key, TValue value);
    public sealed virtual bool NeedRoom(TKey key, TValue previousValue, TValue newValue);
    public sealed virtual long OnEntryAdded(TKey key, TValue value);
    public sealed virtual SizePair OnEntryReplaced(TKey key, TValue previousValue, TValue newValue);
    public sealed virtual long OnEntryRemoved(TKey key, TValue value);
    public sealed virtual void OnCleared();
}
[EditorBrowsableAttribute("1")]
public static class Microsoft.TeamFoundation.Framework.Common.WarehouseDatabaseCatalogKeys : object {
    public static string InitialCatalogProperty;
    public static string IsOnlineProperty;
}
internal static class Microsoft.TeamFoundation.Framework.Common.WebApplicationCatalogKeys : object {
    public static string ServiceAccountProperty;
    private static WebApplicationCatalogKeys();
}
[EditorBrowsableAttribute("1")]
public static class Microsoft.TeamFoundation.Framework.Common.WitProvisionSecurity : object {
    public static Guid NamespaceId;
    public static string RootToken;
    public static string Separator;
    public static int Admin;
    public static int ManageLinkTypes;
    private static WitProvisionSecurity();
}
public static class Microsoft.TeamFoundation.FrameworkServiceIdentifiers : object {
    [EditorBrowsableAttribute("1")]
public static string CollectionSecurityString;
    [EditorBrowsableAttribute("1")]
public static string ConfigurationSecurityString;
    [EditorBrowsableAttribute("1")]
public static string CollectionJobString;
    [EditorBrowsableAttribute("1")]
public static string ConfigurationJobString;
    [EditorBrowsableAttribute("1")]
public static string CollectionRegistryString;
    [EditorBrowsableAttribute("1")]
public static string ConfigurationRegistryString;
    [EditorBrowsableAttribute("1")]
public static string TeamProjectCollectionString;
    [EditorBrowsableAttribute("1")]
public static string CollectionIdentityManagementString;
    [EditorBrowsableAttribute("1")]
public static string CollectionIdentityManagementString2;
    [EditorBrowsableAttribute("1")]
public static string ConfigurationIdentityManagementString;
    [EditorBrowsableAttribute("1")]
public static string ConfigurationIdentityManagementString2;
    [EditorBrowsableAttribute("1")]
public static string CollectionPropertyString;
    [EditorBrowsableAttribute("1")]
public static string ConfigurationPropertyString;
    [EditorBrowsableAttribute("1")]
public static string CatalogString;
    [EditorBrowsableAttribute("1")]
public static string CollectionEventingString;
    [EditorBrowsableAttribute("1")]
public static string ConfigurationEventingString;
    [EditorBrowsableAttribute("1")]
public static string AdministrationString;
    internal static string ServicingResourceUploadString;
    [EditorBrowsableAttribute("1")]
public static string LocationString;
    [EditorBrowsableAttribute("1")]
public static string AccessControlString;
    internal static string MessageQueueString;
    internal static string MessageQueue2String;
    internal static string IdentityManagementWebString;
    internal static string SecurityManagementWebString;
    [EditorBrowsableAttribute("1")]
public static string FileHandlerString;
    [EditorBrowsableAttribute("1")]
public static string ProcessTemplateString;
    internal static string MethodologyDownloadString;
    internal static string MethodologyUploadString;
    internal static string AreasManagementWebString;
    internal static string IterationsManagementWebString;
    internal static string NewTeamProjectWebString;
    internal static string ProjectAlertsWebString;
    internal static string CommitDetailsWebString;
    internal static string GitRefDetailsWebString;
    internal static string ProjectTaskBoardWebString;
    internal static string NewWorkItemString;
    internal static string OpenWorkItemString;
    internal static string OpenWorkItemWithProjectContextString;
    internal static string OpenWorkItemWithQueryIdString;
    internal static string OpenWorkItemWithQueryContextString;
    internal static string CollectionRoomsHubWebString;
    internal static string NewQueryInWebString;
    internal static string OpenQueryInWebString;
    internal static string OpenTempQueryInWebString;
    internal static string OpenPTMInWebInWebString;
    internal static string WorkItemsHubString;
    internal static string SearchInWebString;
    [EditorBrowsableAttribute("1")]
public static string CollectionStrongBoxString;
    internal static string StrongBoxFileDownloadString;
    internal static string StrongBoxFileUploadString;
    [EditorBrowsableAttribute("1")]
public static string CollectionConnectedServicesString;
    [EditorBrowsableAttribute("1")]
public static string SignOutWebString;
    [EditorBrowsableAttribute("1")]
public static string FileContainersString;
    internal static string PullRequestLandingWebString;
    internal static string PullRequestCreateWebString;
    internal static string PullRequestDetailsWebString;
    internal static string GitRepoWebString;
    internal static string ProjectWebString;
    internal static string GitRepoCloneString;
    public static Guid CollectionSecurity;
    public static Guid ConfigurationSecurity;
    public static Guid CollectionJob;
    public static Guid ConfigurationJob;
    public static Guid CollectionRegistry;
    public static Guid ConfigurationRegistry;
    public static Guid TeamProjectCollection;
    public static Guid CollectionIdentityManagement;
    public static Guid ConfigurationIdentityManagement;
    public static Guid CollectionProperty;
    public static Guid ConfigurationProperty;
    public static Guid Catalog;
    public static Guid CollectionEventing;
    public static Guid ConfigurationEventing;
    public static Guid Administration;
    public static Guid ServicingResourceUpload;
    public static Guid Location;
    public static Guid AccessControl;
    public static Guid MessageQueue;
    public static Guid MessageQueue2;
    public static Guid IdentityManagementWeb;
    public static Guid SecurityManagementWeb;
    public static Guid FileHandler;
    public static Guid ProcessTemplate;
    public static Guid MethodologyDownload;
    public static Guid MethodologyUpload;
    public static Guid AreasManagementWeb;
    public static Guid IterationsManagementWeb;
    public static Guid NewTeamProjectWeb;
    public static Guid ProjectAlertsWeb;
    public static Guid CommitDetailsWeb;
    public static Guid GitRefDetailsWeb;
    public static Guid ProjectTaskBoardWeb;
    public static Guid NewQueryInWeb;
    public static Guid OpenQueryInWeb;
    public static Guid OpenTempQueryInWeb;
    public static Guid NewWorkItem;
    public static Guid OpenWorkItem;
    public static Guid OpenWorkItemWithProjectContext;
    public static Guid OpenWorkItemWithQueryId;
    public static Guid OpenWorkItemWithQueryContext;
    public static Guid OpenPTMInWeb;
    public static Guid WorkItemsHub;
    public static Guid SearchInWeb;
    public static Guid CollectionRoomsHubWeb;
    public static Guid CollectionStrongBox;
    public static Guid StrongBoxFileDownload;
    public static Guid StrongBoxFileUpload;
    public static Guid CollectionConnectedServices;
    public static Guid SignOutWeb;
    public static Guid IdentityService;
    public static Guid FileContainers;
    public static Guid MeteringService;
    public static Guid SecurityService2;
    public static Guid UtilizationUsageSummary;
    public static Guid UtilizationUserUsageSummary;
    public static Guid PullRequestLandingWeb;
    public static Guid PullRequestCreateWeb;
    public static Guid PullRequestDetailsWeb;
    public static Guid GitRepoWeb;
    public static Guid ProjectWeb;
    public static Guid GitRepoClone;
    private static FrameworkServiceIdentifiers();
}
public static class Microsoft.TeamFoundation.GroupWellKnownSecurityIds : object {
    public static SecurityIdentifier NamespaceAdministratorsGroup;
    public static SecurityIdentifier ServiceUsersGroup;
    public static SecurityIdentifier EveryoneGroup;
    public static SecurityIdentifier LicenseesGroup;
    public static SecurityIdentifier SecurityServiceGroup;
    public static SecurityIdentifier AnonymousUsersGroup;
    [ObsoleteAttribute("The host-wide Contributors group is no longer created for project collections, and is removed from existing project collections on upgrade to TFS 2012.")]
public static SecurityIdentifier ContributorsGroup;
    public static SecurityIdentifier AccountCreatorGroup;
    public static SecurityIdentifier ServicePrincipalGroup;
    public static SecurityIdentifier LicensedUsersGroup;
    public static SecurityIdentifier InvitedUsersGroup;
    public static SecurityIdentifier InstanceAllocatorsGroup;
    public static SecurityIdentifier UsersGroup;
    public static SecurityIdentifier ApplicationPrincipalsGroup;
    public static SecurityIdentifier GroupLicenseRulesGroup;
    public static SecurityIdentifier ProjectScopedUsersGroup;
    private static GroupWellKnownSecurityIds();
}
public static class Microsoft.TeamFoundation.GroupWellKnownShortNames : object {
    public static string NamespaceAdministratorsGroup;
    public static string ServiceUsersGroup;
    public static string EveryoneGroup;
    private static GroupWellKnownShortNames();
}
public static class Microsoft.TeamFoundation.GroupWellKnownSidConstants : object {
    public static string NamespaceAdministratorsGroupSid;
    public static string ServiceUsersGroupSid;
    public static string EveryoneGroupSid;
    public static string LicenseesGroupSid;
    public static string SecurityServiceGroupSid;
    public static string AnonymousUsersGroupSid;
    [ObsoleteAttribute("The host-wide Contributors group is no longer created for project collections, and is removed from existing project collections on upgrade to TFS 2012.")]
public static string ContributorsGroupSid;
    public static string ServicePrincipalGroupSid;
    public static string InstanceAllocatorsGroup;
    public static string UsersGroupSid;
    public static string GroupLicenseRulesGroupSid;
    public static string ApplicationPrincipalsGroupSid;
    public static string ProjectScopedUsersGroupSid;
    public static string AccountCreatorGroupSid;
    public static string LicensedUsersGroupSid;
    public static string InvitedUsersGroupSid;
    private static GroupWellKnownSidConstants();
}
public static class Microsoft.TeamFoundation.HttpHeaderExceptions : object {
    public static string InvalidLicenseException;
    public static string UnauthorizedWorkgroupUser;
}
[EditorBrowsableAttribute("1")]
public static class Microsoft.TeamFoundation.HttpSessionCookies : object {
    [EditorBrowsableAttribute("1")]
public static string SessionId;
    [EditorBrowsableAttribute("1")]
public static string SessionActive;
}
public interface Microsoft.TeamFoundation.ILinking {
    public abstract virtual Artifact[] GetReferencingArtifacts(String[] uriList, LinkFilter[] filters);
    public abstract virtual string GetArtifactUrl(string uri);
    public abstract virtual string GetArtifactUrl(ArtifactId artId);
    public abstract virtual string GetArtifactUrlExternal(string uri);
    public abstract virtual string GetArtifactUrlExternal(ArtifactId artId);
}
public interface Microsoft.TeamFoundation.ILinkingConsumer {
    public abstract virtual Artifact[] GetReferencingArtifacts(String[] artifactUriList);
}
public interface Microsoft.TeamFoundation.ILinkingProvider {
    public abstract virtual Artifact[] GetArtifacts(String[] artifactUris);
}
public static class Microsoft.TeamFoundation.IntegrationServiceIdentifiers : object {
    [EditorBrowsableAttribute("1")]
public static string RegistrationString;
    [EditorBrowsableAttribute("1")]
public static string CommonStructureString;
    [EditorBrowsableAttribute("1")]
public static string CommonStructure3String;
    [EditorBrowsableAttribute("1")]
public static string CommonStructure4String;
    internal static string GroupSecurityString;
    [EditorBrowsableAttribute("1")]
public static string GroupSecurity2String;
    [EditorBrowsableAttribute("1")]
public static string AuthorizationString;
    internal static string Authorization3String;
    internal static string Authorization4String;
    internal static string Authorization5String;
    [EditorBrowsableAttribute("1")]
public static string Authorization6String;
    [EditorBrowsableAttribute("1")]
public static string Authorization7String;
    [EditorBrowsableAttribute("1")]
public static string ServerStatusString;
    [EditorBrowsableAttribute("1")]
public static string ProjectMaintenanceString;
    [EditorBrowsableAttribute("1")]
public static string SyncServiceString;
    [EditorBrowsableAttribute("1")]
public static string SyncService4String;
    [EditorBrowsableAttribute("1")]
public static string ProcessConfigurationString;
    [EditorBrowsableAttribute("1")]
public static string ProcessConfiguration2String;
    [EditorBrowsableAttribute("1")]
public static string ProcessConfiguration3String;
    [EditorBrowsableAttribute("1")]
public static string ProcessConfiguration4String;
    [EditorBrowsableAttribute("1")]
public static string TeamConfigurationString;
    public static Guid Registration;
    public static Guid CommonStructure;
    public static Guid CommonStructure3;
    public static Guid CommonStructure4;
    public static Guid GroupSecurity;
    public static Guid GroupSecurity2;
    public static Guid Authorization;
    public static Guid Authorization3;
    public static Guid Authorization4;
    public static Guid Authorization5;
    public static Guid Authorization6;
    public static Guid Authorization7;
    public static Guid ServerStatus;
    public static Guid ProjectMaintenance;
    public static Guid SyncService;
    public static Guid SyncService4;
    public static Guid ProcessConfiguration;
    public static Guid ProcessConfiguration2;
    public static Guid ProcessConfiguration3;
    public static Guid ProcessConfiguration4;
    public static Guid TeamConfiguration;
    private static IntegrationServiceIdentifiers();
}
[EditorBrowsableAttribute("1")]
[ExceptionMappingAttribute("0.0", "3.0", "InvalidPathException", "Microsoft.TeamFoundation.InvalidPathException, Microsoft.TeamFoundation.Common, Version=14.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
public class Microsoft.TeamFoundation.InvalidPathException : ArgumentException {
    public InvalidPathException(string message);
    public InvalidPathException(string message, Exception exception);
    protected InvalidPathException(SerializationInfo info, StreamingContext context);
}
internal interface Microsoft.TeamFoundation.ITeamFoundationTraceable {
    public abstract virtual string GetTraceString(TraceLevel traceLevel);
}
public static class Microsoft.TeamFoundation.LinkingServiceName : object {
    public static string LinkingProviderService;
    public static string LinkingConsumerService;
}
public static class Microsoft.TeamFoundation.LoggingDBReportingNames : object {
    public static string VersionControl;
    public static string WorkItemTracking;
    public static string CoreServices;
    public static string Warehouse;
    public static string TeamBuild;
    public static string LabManagement;
    public static string TestRig;
    public static string DeploymentRig;
    public static string ProxyServer;
    public static string ProjectAnalysis;
    public static string TestManagement;
    public static string TestManagementRest;
    public static string TestResults;
    public static string Account;
    public static string Chat;
    public static string CodeLens;
    public static string Collection;
    public static string Commerce;
    public static string Discussion;
    public static string Framework;
    public static string Graph;
    public static string GraphProfile;
    public static string Identities;
    public static string Membership;
    public static string MachineManagement;
    public static string Organization;
    public static string Profile;
    public static string ProjectDiscovery;
    public static string Reporting;
    public static string Dashboards;
    public static string ServiceHooks;
    public static string Tagging;
    public static string ClientNotification;
    public static string Compliance;
    public static string Invitation;
    public static string Licensing;
    public static string GroupLicensingRule;
    public static string WebFramework;
    public static string Notification;
    public static string DelegatedAuthorization;
    public static string TenantPolicy;
    public static string Token;
    public static string TokenAdmin;
    public static string UserMapping;
    public static string UserAccountMapping;
    public static string OAuthWhitelist;
    public static string PermissionLevelDefinition;
    public static string PermissionLevelAssignment;
    public static string PermissionsReport;
}
[EditorBrowsableAttribute("1")]
public static class Microsoft.TeamFoundation.ObsoleteMessages : object {
    public static string UseTfsConnectionProperty;
    public static string UseTfsTeamProjectCollectionOverload;
    public static string UseTfsTeamProjectCollectionProperty;
}
public static class Microsoft.TeamFoundation.OperationalDatabaseNames : object {
    public static string VersionControl;
    public static string WorkItemTracking;
    public static string WorkItemTrackingAttachments;
    public static string CoreServices;
    public static string Warehouse;
    public static string TeamBuild;
    public static string LabExecution;
    public static string TestRig;
    public static string DeploymentRig;
    public static string AnalysisCube;
}
[ObsoleteAttribute("This class has been deprecated and will be removed from a future release. See System.OperationCanceledException instead.", "False")]
[ExceptionMappingAttribute("0.0", "3.0", "OperationCanceledException", "Microsoft.TeamFoundation.OperationCanceledException, Microsoft.TeamFoundation.Common, Version=14.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
public class Microsoft.TeamFoundation.OperationCanceledException : Exception {
    public OperationCanceledException(string message);
    public OperationCanceledException(string message, Exception innerException);
    protected OperationCanceledException(SerializationInfo info, StreamingContext context);
}
[EditorBrowsableAttribute("1")]
public static class Microsoft.TeamFoundation.PackageGuids : object {
    public static Guid WorkItemTracking;
    public static string WorkItemTrackingGuidString;
    private static PackageGuids();
}
public static class Microsoft.TeamFoundation.PermissionActionIdConstants : object {
    public static string GenericRead;
    public static string GenericWrite;
    public static string Rename;
    public static string Delete;
    public static string CreateProjects;
    public static string AdministerWarehouse;
    public static string TriggerEvent;
    public static string ManageTemplate;
    public static string DiagnosticTrace;
    public static string SynchronizeRead;
    public static string ManageLinkTypes;
    public static string ManageTestControllers;
    public static string CreateChildren;
    public static string WorkItemRead;
    public static string WorkItemWrite;
    public static string ManageTestPlans;
    public static string ManageTestSuites;
    public static string WorkItemSaveComment;
    public static string Unsubscribe;
    public static string AdministerBuild;
    public static string StartBuild;
    public static string EditBuildStatus;
    public static string UpdateBuild;
    public static string ViewTestResults;
    public static string PublishTestResults;
    public static string DeleteTestResults;
    public static string ManageTestEnvironments;
    public static string ManageTestConfigurations;
    public static string ManageProperties;
    public static string ManageSystemProperties;
    public static string BypassPropertyCache;
    public static string UpdateVisibility;
    public static string EditProcess;
    public static string DeleteProcess;
    public static string CreateProcess;
    public static string AdministerProcessPermissions;
}
public static class Microsoft.TeamFoundation.PermissionNamespaces : object {
    public static string Global;
    public static string Project;
    public static string Process;
    private static PermissionNamespaces();
}
public static class Microsoft.TeamFoundation.PermissionObjectClasses : object {
    public static string CssNode;
    public static string IterationNode;
    public static string EventSubscription;
    public static string Namespace;
    public static string Project;
    public static string Process;
    private static PermissionObjectClasses();
}
[EditorBrowsableAttribute("1")]
public static class Microsoft.TeamFoundation.ProcessGuidanceConstants : object {
    public static string FileName;
    public static string FileNameAspx;
    public static string Folder;
    public static string SupportingFilesFolder;
}
public static class Microsoft.TeamFoundation.ProcessTemplateTypeIdentifiers : object {
    public static Guid MsfAgileSoftwareDevelopment;
    public static Guid MsfCmmiProcessImprovement;
    public static Guid VisualStudioScrum;
    public static Guid MsfHydroProcess;
    public static Guid DefaultPreCreateProcess;
    private static ProcessTemplateTypeIdentifiers();
}
public static class Microsoft.TeamFoundation.PropertyCacheServiceConstants : object {
    public static string RedirectUri;
    private static PropertyCacheServiceConstants();
}
[EditorBrowsableAttribute("1")]
public static class Microsoft.TeamFoundation.ProxyConstants : object {
    public static string TimestampQueryString;
    public static string RequestedFileIdQueryString;
    public static string SignatureFileIdsQueryString;
    public static string SignatureQueryString;
    public static string RepositoryIdQueryString;
    public static string DownloadTicketType;
    public static string RSATicketType;
    public static string MD5TicketType;
    public static string InstanceIdQueryString;
    public static string CollectionPathQueryString;
    public static string ExceptionHeader;
    public static string ProxyDownloadUrlSuffix;
    public static string DownloadUrlSuffix;
    public static string AppDir;
    public static string ProxyAppDir;
    public static string GenericDownloadService;
    public static string NormalizedSignatureQueryString;
    public static Guid GenericDownloadServiceIdentifier;
    public static Guid ProxySigningKey;
    private static ProxyConstants();
}
public static class Microsoft.TeamFoundation.RedirectCommands : object {
    public static string Authenticate;
    public static string CreateProfile;
    public static string ValidateProfile;
}
[EditorBrowsableAttribute("1")]
public static class Microsoft.TeamFoundation.ReportingConstants : object {
    public static char FolderSeparatorChar;
    public static string RootPath;
    public static string DefaultRootItemPath;
    public static string WebService;
    public static string ObsoleteWebService;
    public static string BrowseItemPathUrlFormat;
    public static string ToolbarQueryParam;
    public static string RegistryWarehouseConnectionString;
    public static string RegistryAnalysisConnectionString;
    public static string RegistryIsReportingEnabled;
    public static int DefaultAnalysisSchemaChangeCommandTimeout;
    public static String[] KnownWebServicePaths;
    private static ReportingConstants();
}
public static class Microsoft.TeamFoundation.ReservedGroupWellKnownNames : object {
    public static SortedSet`1<string> WellKnownGroupNames;
    private static ReservedGroupWellKnownNames();
}
public static class Microsoft.TeamFoundation.SccDataKeys : object {
    public static string CreateType;
    public static string BranchFromPath;
}
public static class Microsoft.TeamFoundation.ServerAttributes : object {
    public static string MachineName;
    [EditorBrowsableAttribute("1")]
public static string NetBIOSName;
    public static string InstanceIdName;
    public static string InstalledUICulture;
}
public static class Microsoft.TeamFoundation.ServiceInterfaces : object {
    public static string AdministrationService;
    public static string AccessControlService;
    public static string CatalogService;
    public static string EventService;
    public static string JobService;
    public static string LocationService;
    public static string RegistryService;
    public static string SecurityService;
    public static string SecurityService2;
    public static string FileHandlerService;
    public static string PropertyService;
    public static string MessageQueueService;
    public static string MessageQueueService2;
    public static string IdentityService;
    public static string IdentityManagementService;
    public static string IdentityManagementService2;
    public static string IdentityManagementWeb;
    public static string SecurityManagementWeb;
    public static string TeamProjectCollectionService;
    public static string UtilizationUsageSummary;
    public static string UtilizationUserUsageSummary;
    public static string VersionControl;
    public static string WorkItem;
    public static string WorkItem2;
    public static string WorkItem3;
    public static string WorkItem4;
    public static string WorkItem5;
    public static string WorkItem6;
    public static string WorkItem7;
    public static string WorkItem8;
    public static string WorkItemAttachmentHandler;
    public static string DataSourceServer;
    public static string MethodologyUpload;
    public static string Methodology;
    public static string TestResultsService;
    public static string ProcessConfigurationService;
    public static string ProcessConfigurationService2;
    public static string ProcessConfigurationService3;
    public static string ProcessConfigurationService4;
    public static string TeamConfigurationService;
    public static string AreasManagementWeb;
    public static string IterationsManagementWeb;
    public static string ProjectAlertsWeb;
    public static string ProjectTaskBoardWeb;
    public static string NewQueryInWeb;
    public static string OpenQueryInWeb;
    public static string OpenTempQueryInWeb;
    public static string NewWorkItem;
    public static string OpenWorkItem;
    public static string OpenWorkItemWithProjectContext;
    public static string OpenWorkItemWithQueryId;
    public static string OpenWorkItemWithQueryContext;
    public static string OpenPTMInWeb;
    public static string WorkItemsHub;
    public static string SearchInWeb;
    public static string CommitDetailsWeb;
    public static string GitRefDetailsWeb;
    public static string CollectionRoomsHubWeb;
    public static string NewTeamProjectWeb;
    public static string MeteringService;
    public static string PullRequestLandingWeb;
    public static string PullRequestCreateWeb;
    public static string PullRequestDetailsWeb;
    public static string GitRepoWeb;
    public static string ProjectWeb;
    public static string GitRepoClone;
    [EditorBrowsableAttribute("1")]
public static string SignOutWeb;
    public static string TestResultsServiceEx;
    public static string TestManagementWebService;
    public static string TestManagementWebService2;
    public static string TestManagementWebService3;
    public static string TestManagementWebService4;
    public static string TestManagementWebAccessService;
    public static string SharedParameterDataSetsService;
    public static string TestManagementAttachmentDownloadHandler;
    public static string TestImpactService;
    public static string ServerStatus;
    public static string DiscussionWebService;
    public static string StrongBoxService;
    public static string StrongBoxFileUpload;
    public static string StrongBoxFileDownload;
    public static string SyncService;
    public static string SyncService4;
    public static string ConnectedServicesService;
    public static string FileContainersResource;
    [EditorBrowsableAttribute("1")]
public static string RegistrationService;
    [EditorBrowsableAttribute("1")]
public static string CommonStructure;
    [EditorBrowsableAttribute("1")]
public static string CommonStructure3;
    [EditorBrowsableAttribute("1")]
public static string CommonStructure4;
    [EditorBrowsableAttribute("1")]
public static string GroupSecurity;
    [EditorBrowsableAttribute("1")]
public static string GroupSecurity2;
    [EditorBrowsableAttribute("1")]
public static string Authorization;
    [EditorBrowsableAttribute("1")]
public static string ProcessTemplate;
    [EditorBrowsableAttribute("1")]
public static string ProjectMaintenance;
    public static string TswaHome;
    public static string TswaWorkItemEditor;
    public static string TswaChangesetDetail;
    public static string TswaDifference;
    public static string TswaViewItem;
    public static string ProjectServerPwaSite;
    public static string ProjectServerSspSite;
    public static string TswaShelvesetDetail;
    public static string TswaQueryResults;
    public static string TswaAnnotate;
    public static string TswaSourceExplorer;
    public static string TswaOpenWorkItem;
    public static string TswaCreateWorkItem;
    public static string TswaViewServerQueryResults;
    public static string TswaViewWiqlQueryResults;
    public static string TswaExploreSourceControlPath;
    public static string TswaFindShelveset;
    public static string TswaViewShelvesetDetails;
    public static string TswaFindChangeset;
    public static string TswaViewChangesetDetails;
    public static string TswaViewSourceControlItem;
    public static string TswaDownloadSourceControlItem;
    public static string TswaDiffSourceControlItems;
    public static string TswaAnnotateSourceControlItem;
    public static string TswaViewSourceControlItemHistory;
    public static string TswaViewBuildDetails;
    public static string TswaViewSourceControlShelvedItem;
    public static string TswaDiffSourceControlShelvedItem;
    public static Guid GuidTswaHome;
    public static Guid GuidTswaWorkItemEditor;
    public static Guid GuidTswaChangesetDetail;
    public static Guid GuidTswaDifference;
    public static Guid GuidTswaShelvesetDetail;
    public static Guid GuidTswaViewItem;
    public static Guid GuidTswaQueryResults;
    public static Guid GuidTswaAnnotate;
    public static Guid GuidTswaSourceExplorer;
    public static Guid GuidTswaOpenWorkItem;
    public static Guid GuidTswaCreateWorkItem;
    public static Guid GuidTswaViewServerQueryResults;
    public static Guid GuidTswaViewWiqlQueryResults;
    public static Guid GuidTswaExploreSourceControlPath;
    public static Guid GuidTswaFindShelveset;
    public static Guid GuidTswaViewShelvesetDetails;
    public static Guid GuidTswaFindChangeset;
    public static Guid GuidTswaViewChangesetDetails;
    public static Guid GuidTswaViewSourceControlItem;
    public static Guid GuidTswaDownloadSourceControlItem;
    public static Guid GuidTswaDiffSourceControlItems;
    public static Guid GuidTswaAnnotateSourceControlItem;
    public static Guid GuidTswaViewSourceControlItemHistory;
    public static Guid GuidTswaViewBuildDetails;
    public static Guid GuidTswaViewSourceControlShelvedItem;
    public static Guid GuidTswaDiffSourceControlShelvedItem;
    public static string BaseSiteUrl;
    public static string BaseSiteUnc;
    public static string BaseServerUrl;
    public static string WssAdminService;
    public static string WssRootUrl;
    public static string WssAdminUrl;
    [EditorBrowsableAttribute("1")]
public static string ProjectPortalUrl;
    [EditorBrowsableAttribute("1")]
public static string ProjectPortalPredefinedType;
    [EditorBrowsableAttribute("1")]
public static string ProjectProcessGuidanceUrl;
    [EditorBrowsableAttribute("1")]
public static string ProjectProcessGuidancePredefinedType;
    [EditorBrowsableAttribute("1")]
public static string ProjectReportFolderPath;
    public static string BaseReportsUrl;
    public static string ReportsService;
    public static string ReportManagerUrl;
    public static string ReportWebServiceUrl;
    private static ServiceInterfaces();
}
[EditorBrowsableAttribute("1")]
public static class Microsoft.TeamFoundation.SharePointConstants : object {
    public static string WssTfsServiceClassName;
    public static string WssTfsServiceAssemblyShortName;
    public static string RegistryPathRoot;
    public static string RegistryPathForCacheTimeout;
    public static string SharePointWebAppDefaultRelativePath;
    public static int MaxSiteAddressLength;
    public static int MinimumSupportedExtensionMajorVersion;
    public static string SiteAdminDirectory;
    public static string SiteAdminPagePath2;
    public static string SiteAdminPagePath3;
    public static string AdminWebServicePath;
    public static string ListsWebServicePath;
    public static string SiteDataWebServicePath;
    public static string SitesWebServicePath;
    public static string WssTfsWebServicePath;
    public static String[] KnownWebServicePaths;
    public static string SharePointServiceAccountsGroupIdentifier;
    public static SecurityIdentifier SharePointServiceAccountsGroup;
    public static string LocalGroupName_Normal;
    public static string LocalGroupName_Admin;
    public static string SolutionName_BaseIntegration;
    public static string SolutionName_WebParts;
    public static string WebAppFeature_WebParts_Name;
    public static Guid WebAppFeature_WebParts_Identifier;
    public static string SolutionName_Dashboards;
    public static string SolutionName_Dashboards15;
    public static string WebAppFeature_DashboardsUpdate_Name;
    public static Guid WebAppFeature_DashboardsUpdate_Identifier;
    public static int SharePoint12MajorVersion;
    public static int SharePoint14MajorVersion;
    public static int SharePoint15MajorVersion;
    private static SharePointConstants();
}
public static class Microsoft.TeamFoundation.SpecialUrls : object {
    public static string BootStrap;
    public static string ServerStatus;
}
public static class Microsoft.TeamFoundation.SqlCommandTimeout : object {
    public static int Infinite;
    public static int FourHours;
    public static int OneHour;
    public static int ThirtyMinutes;
    public static int FifteenMinutes;
    public static int TenMinutes;
    public static int FiveMinutes;
    public static int OneMinute;
    public static int DefaultAnonymousTimeout;
    public static int Max(int timeout1, int timeout2);
}
public static class Microsoft.TeamFoundation.StandardSqlError : object {
    public static int TimeoutOrServerNotResponding;
    public static int ErrorLocatingServerOrInstance;
    public static int SevereError;
    public static int RemoteAccessNotPermitted;
    public static int NetworkOrInstanceError;
    public static int InvalidHandle;
    public static int NotEnoughStorageToCompleteOperation;
    public static int DatabaseDown;
    public static int EncryptionNotSupported;
    public static int SqlFatalError;
    public static int PacketSizeTooLarge;
    public static int NamedPipeConnectionNotPermitted;
    public static int NamedPipeError;
    public static int NamedPipeNotFound;
    public static int BadNetworkResponse;
    public static int NetworkTransportErrorNameNotAvailable;
    public static int ConnectionStringIsNotValid;
    public static int NetworkTransportErrorDuringReceive;
    public static int NetworkTransportErrorSemaphoreTimeout;
    public static int PipeNotAvailable;
    public static int ParameterNotSupplied;
    public static int ParameterTypeMismatch;
    public static int InvalidColumnName;
    public static int MissingObject;
    public static int StoredProcedureAccessDenied;
    public static int ErrorPipeBusy;
    public static int NamedPipeShuttingdown;
    public static int RemoteAccessDisabled;
    public static int WaitTimeout;
    public static int InvalidParameterSpecified2;
    public static int InvalidCollation;
    public static int TableValuedParameterColumnsMismatch;
    public static int ScanWithNoLockFailed;
    public static int LogicalPageFetchFailed;
    public static int OutOfMemory;
    public static int OutOfBufferPoolMemory;
    public static int OSFatalError;
    public static int BufferLatchTimeout;
    public static int DatabaseNotRecovered;
    public static int DatabaseInRecovery;
    public static int DatabaseInRestrictedMode;
    public static int DatabaseInSingleUserMode;
    public static int DatabaseSuspect;
    public static int DatabaseRestoring;
    public static int DatabaseClosed;
    public static int DatabaseOffline;
    public static int DatabaseFutureVersion;
    public static int DatabaseCannotOpen;
    public static int DatabaseOlderVersion;
    public static int DatabaseOlderVersionCannotUpgrade;
    public static int TempDbSkipped;
    public static int DatabaseOlderVersionCannotUpgrade2;
    public static int DatabaseBeingUpgraded;
    public static int DatabaseInTransition;
    public static int HadrDatabaseNotAccessible;
    public static int HadrReadOnlyApplicationIntentRequired;
    public static int HadrDatabaseIsResolving;
    public static int DatabaseFullPageAllocationFailed;
    public static int DatabaseFullIndexAllocationFailed;
    public static int DatabaseFull;
    public static int DatabaseSpaceAllocatorFailed;
    public static int Deadlock;
    public static int NetworkConnectionRefused;
    public static int ConnectionInvalid;
    public static int ConnectionOpenError;
    public static int NetworkConnectionAborted;
    public static int ConnectionOpenError2;
    public static int ServerNotAccessible;
    public static int ConnectionOpenError3;
    public static int TargetNameWrong;
    public static int FailureSendingRequest;
    public static int DatabaseAlreadyExists;
    public static int CouldNotObtainExclusiveLockOnDatabase;
    public static int LogicalFileNameIsAlreadyInUse;
    public static int TheMaximumKeyLengthIs900Bytes;
    public static int TheModuleDependsOnMissingObject;
    public static int StringOrBinaryDataWouldBeTruncatedInTable;
    public static int DataTypeNotFound;
    public static int DefinitionForUserDefinedDataTypeHasChanged;
    public static int ObjectRecompiledDuringExecution;
    public static int StoredProcedureNotFound;
    public static int BackupOrFileManipulationInProgress;
    public static int MediaFamilyOnDeviceIsIncorrectlyFormed;
    public static int ExecutionTimeStatistics;
    public static int ParseAndCompileTimeStatistics;
    public static int TableScanCountAndReadStatistics;
    public static int DatabaseReadOnly;
    public static int DatabaseBypassRecovery;
    public static int BatchAborted;
    public static int InvalidTdsCollation;
    public static int BadDatabaseName;
    public static int DatabaseLoginFailedBoth;
    public static int DatabaseLoginFailedUserMaster;
    public static int DatabaseLoginFailedUserDefault;
    public static int DatabaseLoginFailedUser;
    public static int MissingUDF;
    public static int AlterDatabaseFailed;
    public static int GrowFileOperatingSystemError;
    public static int CannotCreateFileBecauseItAlreadyExists;
    public static int DatabaseShuttingDown;
    public static int InvalidProcessId;
    public static int CannotLoadMsxmlsql;
    public static int DataLengthExceedsMaxForReplication;
    public static int FullTextCrawlManagerNotInitialized;
    public static int TooManyArgumentSpecified;
    public static int InvalidParameterSpecified;
    public static int SprocDoesntSupportArguments;
    public static int StringOrBinaryDataWouldBeTruncated;
    public static int InsufficientResourcesForQueryPlan;
    public static int TimeoutOptimizingQuery;
    public static int TimeoutWaitingMemoryQuery;
    public static int QueryCostExceededConfiguredThreshold;
    public static int DatabaseTempDbAllocation;
    public static int DatabaseLogUnavailable;
    public static int DatabaseTransactionLogFull;
    public static int SocketForbidden;
    public static int SocketOperationEncounteredDeadNetwork;
    public static int ServerNotFound;
    public static int ConnectionAborted;
    public static int ConnectionResetByPeer;
    public static int TcpConnectionFailed;
    public static int TcpConnectionRefused;
    public static int HostDown;
    public static int HostUnreachable;
    public static int HostNotFound;
    public static int TemporaryErrorDuringHostResolution;
    public static int HostNoData;
    public static int UserGroupOrRoleAlreadyExists;
    public static int ServerPrincipalAlreadyExists;
    public static int LoginAlreadyMappedToDifferentUser;
    public static int ServerPaused;
    public static int ServerPaused2;
    public static int ServerShutdown;
    public static int LoginTimeoutError;
    public static int SSPIHandshakeFailed;
    public static int InvalidClientEvent;
    public static int ServerMaximumConnections;
    public static int ServerMaximumAdminConnections;
    public static int ServiceStopped;
    public static int InternalNetworkError1;
    public static int InternalNetworkError2;
    public static int PasswordEncryptionError;
    public static int PreLoginPacketInvalid;
    public static int InternalNetworkError3;
    public static int NetworkTransportError;
    public static int LoginPacketInvalid;
    public static int EncryptionRequiredToConnect;
    public static int InvalidPacketLength;
    public static int LoginFailedDueToTrigger;
    public static int MissingErrorMessages;
    public static int LoginFailureScriptUpdateMode;
    public static int LoginFailureInvalid;
    public static int LoginFailureAdminOnly;
    public static int LoginFailure;
    public static int LoginError;
    public static int LoginFailureLength;
    public static int LoginFailureUserLimit;
    public static int LoginFailureWorkStationLimit;
    public static int LoginFailureUserLimit2;
    public static int LoginFailureSingleUserMode;
    public static int LoginFailureAccountDisabled;
    public static int LoginFailureAccountLocked;
    public static int LoginFailurePasswordExpired;
    public static int LoginFailurePasswordNeedsChanging;
    public static int FullTextMasterMergeFailure;
    public static int FullTextMasterMergeCancelled;
    public static int RlsBlockPredicate;
    public static int DatabaseTemporarilyUnavailable;
    public static int FailoverGroupLoginFailed;
    public static int SSPIShutdownInProgress;
    public static int SSPIIllegalMessage;
    public static int SSPIInvalidHandle;
    public static int HadrDatabaseNoQuorum;
    public static int AzureResourceGovernanceMaxThreads;
    public static int AzureResourceGovernanceMaxThreadsTooBusy;
    public static int AzureInternalConnectionError;
    public static int AzureMissingClusteredIndex;
    public static int AzureOperationNotSupported;
    public static int AzurePartitionFailOver;
    public static int AzureProcessingError;
    public static int AzureServiceTooBusy;
    public static int AzureDeprecatedFeature;
    public static int AzureGlobalTempObject;
    public static int AzureLoginBadUser;
    public static int AzureTransactionAbortDueToReadonlyPartition;
    public static int AzureQuotaReached;
    public static int AzureSessionTerminatedTimeLimit;
    public static int AzureSessionTerminatedLocks;
    public static int AzureSessionTerminatedTempDB;
    public static int AzureSessionTerminatedLogspace;
    public static int AzureSessionTerminatedMemory;
    public static int AzureDatabaseQuotaReached;
    public static int AzureServerUnavailable;
    public static int AzureClientIPRestricted;
    public static int CollationIsNotSupported;
    public static int AzureOperationFailed;
    public static int AzureNotEnoughResourcesToProcessRequest;
}
[EditorBrowsableAttribute("1")]
public static class Microsoft.TeamFoundation.TeamConstants : object {
    public static string TeamPropertyName;
    public static string DefaultTeamPropertyName;
    public static string TeamCountProperty;
    public static string TeamSettingsPropertyName;
    public static string TileZoneTileOrderPropertyName;
    public static string DefaultValueIndexPropertyName;
    public static bool DefaultIncludeChildrenValue;
    public static string TeamFieldSettingsPropertyName;
    public static string TeamFieldDefaultValueIndexPropertyName;
    public static string TeamFieldValuesPropertyName;
    public static string TeamFieldValueFormat;
    public static string BacklogIterationPropertyName;
    public static string TeamIterationPropertyName;
    public static string TeamIterationIdPropertyNameFormat;
    public static string TeamChartCachePropertyName;
    public static string WIPLimitsPropertyName;
    public static string CumulativeFlowDiagramStartDate;
    public static string CumulativeFlowDiagramHideIncoming;
    public static string CalledFromTeamPlatformService;
    private static TeamConstants();
}
public enum Microsoft.TeamFoundation.TeamFoundationAuthenticationError : Enum {
    public int value__;
    public static TeamFoundationAuthenticationError None;
    public static TeamFoundationAuthenticationError Cancelled;
    public static TeamFoundationAuthenticationError GetTokenFailed;
    public static TeamFoundationAuthenticationError InteractiveRequired;
    public static TeamFoundationAuthenticationError TokenUnauthorized;
    public static TeamFoundationAuthenticationError UserMismatched;
}
[ExceptionMappingAttribute("0.0", "3.0", "TeamFoundationClientVersionCheckException", "Microsoft.TeamFoundation.TeamFoundationClientVersionCheckException, Microsoft.TeamFoundation.Common, Version=14.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
[ObsoleteAttribute("This class has been obsolete since we do not support connecting to TFS 2008 servers.")]
public class Microsoft.TeamFoundation.TeamFoundationClientVersionCheckException : TeamFoundationServerException {
    public TeamFoundationClientVersionCheckException(string nameOrUrl);
    protected TeamFoundationClientVersionCheckException(SerializationInfo info, StreamingContext context);
}
public static class Microsoft.TeamFoundation.TeamFoundationExceptionFormatter : object {
    public static string FormatException(Exception exception, bool useBriefFormat);
    private static string formatOneException(Exception exception, bool useBriefFormat);
    internal static string formatSqlErrors(SqlException exception);
    private static string formatDataDictionary(Exception exception);
}
[ExceptionMappingAttribute("0.0", "3.0", "TeamFoundationInvalidAuthenticationException", "Microsoft.TeamFoundation.TeamFoundationInvalidAuthenticationException, Microsoft.TeamFoundation.Common, Version=14.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
public class Microsoft.TeamFoundation.TeamFoundationInvalidAuthenticationException : TeamFoundationServerUnauthorizedException {
    public TeamFoundationInvalidAuthenticationException(string message);
    public TeamFoundationInvalidAuthenticationException(string message, TeamFoundationAuthenticationError error);
    protected TeamFoundationInvalidAuthenticationException(SerializationInfo info, StreamingContext context);
}
[ExceptionMappingAttribute("0.0", "3.0", "TeamFoundationInvalidServerNameException", "Microsoft.TeamFoundation.TeamFoundationInvalidServerNameException, Microsoft.TeamFoundation.Common, Version=14.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
public class Microsoft.TeamFoundation.TeamFoundationInvalidServerNameException : TeamFoundationServerException {
    public TeamFoundationInvalidServerNameException(string nameOrUrl);
    protected TeamFoundationInvalidServerNameException(SerializationInfo info, StreamingContext context);
}
[ExceptionMappingAttribute("0.0", "3.0", "TeamFoundationServerException", "Microsoft.TeamFoundation.TeamFoundationServerException, Microsoft.TeamFoundation.Common, Version=14.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
public class Microsoft.TeamFoundation.TeamFoundationServerException : VssException {
    private Dictionary`2<object, object> m_properties;
    public bool IsRemoteException { get; }
    public IDictionary Data { get; }
    public TeamFoundationServerException(string message);
    public TeamFoundationServerException(string message, Exception innerException);
    protected TeamFoundationServerException(SerializationInfo info, StreamingContext context);
    public bool get_IsRemoteException();
    [EditorBrowsableAttribute("1")]
public T GetProperty(string name);
    public virtual IDictionary get_Data();
}
[ExceptionMappingAttribute("0.0", "3.0", "TeamFoundationServerInvalidRequestException", "Microsoft.TeamFoundation.TeamFoundationServerInvalidRequestException, Microsoft.TeamFoundation.Common, Version=14.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
public class Microsoft.TeamFoundation.TeamFoundationServerInvalidRequestException : TeamFoundationServerException {
    public TeamFoundationServerInvalidRequestException(string message);
    public TeamFoundationServerInvalidRequestException(string message, Exception innerException);
    protected TeamFoundationServerInvalidRequestException(SerializationInfo info, StreamingContext context);
}
[ExceptionMappingAttribute("0.0", "3.0", "TeamFoundationServerInvalidResponseException", "Microsoft.TeamFoundation.TeamFoundationServerInvalidResponseException, Microsoft.TeamFoundation.Common, Version=14.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
public class Microsoft.TeamFoundation.TeamFoundationServerInvalidResponseException : TeamFoundationServerException {
    private static string c_ResponseStatusCode;
    private static string c_ResponseData;
    [EditorBrowsableAttribute("1")]
public HttpStatusCode ResponseStatusCode { get; }
    [EditorBrowsableAttribute("1")]
public string ResponseData { get; }
    public TeamFoundationServerInvalidResponseException(string message, Exception innerException, HttpStatusCode statusCode, string responseData);
    protected TeamFoundationServerInvalidResponseException(SerializationInfo info, StreamingContext context);
    public HttpStatusCode get_ResponseStatusCode();
    public string get_ResponseData();
    public virtual void GetObjectData(SerializationInfo info, StreamingContext context);
    [EditorBrowsableAttribute("1")]
public static string FormatInvalidServerResponseMessage(HttpWebResponse response);
    [EditorBrowsableAttribute("1")]
public static string FormatHttpStatus(HttpWebResponse response);
    [EditorBrowsableAttribute("1")]
public static string GetResponseString(Stream responseStream);
}
public static class Microsoft.TeamFoundation.TeamFoundationServerSetupConstants : object {
    public static string ApplicationTierDefaultPath;
    public static int ApplicationTierDefaultPort;
    public static int ApplicationTierDefaultSslPort;
    public static string WebAccessDefaultPath;
    public static string TpcEnableInheritedProcessCustomizationToken;
}
[ExceptionMappingAttribute("0.0", "3.0", "TeamFoundationServerUnauthorizedException", "Microsoft.TeamFoundation.TeamFoundationServerUnauthorizedException, Microsoft.TeamFoundation.Common, Version=14.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
public class Microsoft.TeamFoundation.TeamFoundationServerUnauthorizedException : TeamFoundationServerException {
    [CompilerGeneratedAttribute]
private TeamFoundationAuthenticationError <AuthenticationError>k__BackingField;
    [CompilerGeneratedAttribute]
private WebException <WebException>k__BackingField;
    [CompilerGeneratedAttribute]
private HttpWebResponse <WebResponse>k__BackingField;
    public TeamFoundationAuthenticationError AuthenticationError { get; private set; }
    public WebException WebException { get; private set; }
    public HttpWebResponse WebResponse { get; private set; }
    public TeamFoundationServerUnauthorizedException(string message);
    public TeamFoundationServerUnauthorizedException(Exception innerException);
    public TeamFoundationServerUnauthorizedException(string message, Exception innerException);
    public TeamFoundationServerUnauthorizedException(string message, Exception innerException, HttpWebResponse webResponse, TeamFoundationAuthenticationError error);
    protected TeamFoundationServerUnauthorizedException(SerializationInfo info, StreamingContext context);
    [CompilerGeneratedAttribute]
public TeamFoundationAuthenticationError get_AuthenticationError();
    [CompilerGeneratedAttribute]
private void set_AuthenticationError(TeamFoundationAuthenticationError value);
    [CompilerGeneratedAttribute]
public WebException get_WebException();
    [CompilerGeneratedAttribute]
private void set_WebException(WebException value);
    [CompilerGeneratedAttribute]
public HttpWebResponse get_WebResponse();
    [CompilerGeneratedAttribute]
private void set_WebResponse(HttpWebResponse value);
}
[ExceptionMappingAttribute("0.0", "3.0", "TeamFoundationServerVersionCheckException", "Microsoft.TeamFoundation.TeamFoundationServerVersionCheckException, Microsoft.TeamFoundation.Common, Version=14.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
public class Microsoft.TeamFoundation.TeamFoundationServerVersionCheckException : TeamFoundationServerException {
    public TeamFoundationServerVersionCheckException(string nameOrUrl);
    public TeamFoundationServerVersionCheckException(string nameOrUrl, string range);
    protected TeamFoundationServerVersionCheckException(SerializationInfo info, StreamingContext context);
}
[ExceptionMappingAttribute("0.0", "3.0", "TeamFoundationServiceUnavailableException", "Microsoft.TeamFoundation.TeamFoundationServiceUnavailableException, Microsoft.TeamFoundation.Common, Version=14.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
public class Microsoft.TeamFoundation.TeamFoundationServiceUnavailableException : TeamFoundationServerException {
    public TeamFoundationServiceUnavailableException(string nameOrUrl, string reason);
    public TeamFoundationServiceUnavailableException(string message, Exception innerException);
    public TeamFoundationServiceUnavailableException(string nameOrUrl, string reason, Exception innerException);
    protected TeamFoundationServiceUnavailableException(SerializationInfo info, StreamingContext context);
    public TeamFoundationServiceUnavailableException(string reason);
}
public class Microsoft.TeamFoundation.TeamFoundationTextWriterTraceListener : TextWriterTraceListener {
    private static string s_fileDateFormat;
    private static string s_traceFileDirectoryName;
    private FileStream m_stream;
    private string m_filename;
    private bool m_startingNewLine;
    public static string TraceFileDirectoryName { get; public set; }
    public string TraceFileName { get; }
    private static string NewTraceLogFilename { get; }
    public TeamFoundationTextWriterTraceListener(string fileName);
    private static TeamFoundationTextWriterTraceListener();
    protected virtual void Dispose(bool disposing);
    public virtual void Write(string message);
    public virtual void WriteLine(string message);
    private void InitializeFile(string filename);
    private void WriteInternal(string message, bool appendNewLine);
    public static string get_TraceFileDirectoryName();
    public static void set_TraceFileDirectoryName(string value);
    public string get_TraceFileName();
    private static string get_NewTraceLogFilename();
    public virtual void Fail(string message, string detailedMessage);
    private static int GetCurrentThreadId();
}
public class Microsoft.TeamFoundation.TeamFoundationTrace : object {
    private static TeamFoundationTraceSettings s_traceSettings;
    private static object s_lock;
    private static LocalDataStoreSlot s_dataStoreSlot;
    public static bool IsTracingEnabled { get; }
    [EditorBrowsableAttribute("1")]
public static bool IsLogging { get; }
    [EditorBrowsableAttribute("1")]
public static string LogFileName { get; }
    private static Stack`1<long> s_traceStack { get; }
    [EditorBrowsableAttribute("1")]
public static TeamFoundationTraceSettings TraceSettings { get; }
    private static TeamFoundationTrace();
    public static bool get_IsTracingEnabled();
    public static bool IsTracing(string keyword);
    public static bool IsTracing(String[] keywords);
    public static bool IsTracing(string keyword, TraceLevel traceLevel);
    public static bool IsTracing(String[] keywords, TraceLevel traceLevel);
    public static bool get_IsLogging();
    public static string get_LogFileName();
    [EditorBrowsableAttribute("1")]
public static void EnableLogging(string path);
    [EditorBrowsableAttribute("1")]
public static void DisableLogging();
    public static void TraceAndDebugFailException(Exception exception);
    public static void TraceAndDebugFailException(String[] keywords, Exception exception);
    public static void TraceException(Exception exception);
    public static void TraceException(String[] keywords, Exception exception);
    public static void TraceException(string message, string method, Exception exception);
    public static void TraceException(String[] keywords, string method, Exception exception);
    public static void TraceCallStack(String[] keywords);
    public static void ErrorIf(bool condition, string info);
    public static void ErrorIf(bool condition, string format, Object[] args);
    public static void ErrorIf(bool condition, String[] keywords, string format, Object[] args);
    public static void Error(string info);
    public static void Error(String[] keywords, string info);
    public static void Error(string format, Object[] args);
    public static void Error(String[] keywords, string format, Object[] args);
    public static void Error(string info, Exception exception);
    public static void Error(String[] keywords, Exception exception);
    public static void Error(String[] keywords, string info, string method, Exception exception);
    public static void WarningIf(bool condition, string info);
    public static void Warning(string info);
    public static void Warning(string format, Object[] args);
    public static void WarningIf(bool condition, string format, Object[] args);
    public static void WarningIf(bool condition, String[] keywords, string format, Object[] args);
    public static void Warning(String[] keywords, string format, Object[] args);
    public static void Warning(String[] keywords, string info);
    public static void InfoIf(bool condition, string info);
    public static void Info(string format, Object[] args);
    public static void InfoIf(bool condition, string format, Object[] args);
    public static void InfoIf(bool condition, String[] keywords, string format, Object[] args);
    public static void Info(string information);
    public static void Info(String[] keywords, string format, Object[] args);
    public static void Info(String[] keywords, string information);
    public static void Verbose(string info);
    public static void VerboseIf(bool condition, string info);
    public static void VerboseIf(bool condition, string format, Object[] args);
    public static void VerboseIf(bool condition, String[] keywords, string format, Object[] args);
    public static void Verbose(string format, Object[] args);
    public static void Verbose(String[] keywords, string format, Object[] args);
    public static void Verbose(String[] keywords, string info);
    private static void WriteLine(String[] keywords, TraceLevel level, string format, Object[] args);
    private static void WriteLine(String[] keywords, TraceLevel level, string info);
    private static void WriteLine(StringBuilder formattedInfo, TraceLevel level);
    private static StringBuilder GetStringBuilder(String[] keywords, TraceLevel level);
    public static void Enter(string info);
    public static void Enter(String[] keywords, string info);
    public static void Enter(String[] keywords, TraceLevel level, string info);
    [EditorBrowsableAttribute("1")]
public static int SafeEnter(String[] keywords, TraceLevel level, string info);
    public static void Exit(string info);
    public static void Exit(String[] keywords, string info);
    public static void Exit(String[] keywords, TraceLevel level, string info);
    [EditorBrowsableAttribute("1")]
public static void SafeExit(int traceToken, String[] keywords, TraceLevel level, string info);
    [ConditionalAttribute("DEBUG")]
public static void MethodEntry(Object[] parameters);
    [ConditionalAttribute("DEBUG")]
public static void MethodEntry(int depth, Object[] parameters);
    [ConditionalAttribute("DEBUG")]
public static void MethodExit();
    [ConditionalAttribute("DEBUG")]
public static void MethodExit(int depth);
    private static string GetMethodSignature(string prefix, MethodBase method);
    private static Stack`1<long> get_s_traceStack();
    private static void ReportErrorCondition(String[] keywords, string info, string method, Exception e);
    public static TeamFoundationTraceSettings get_TraceSettings();
    private static int GetCurrentThreadId();
}
[DefaultMemberAttribute("Item")]
[EditorBrowsableAttribute("1")]
public class Microsoft.TeamFoundation.TeamFoundationTraceSettings : object {
    private Dictionary`2<string, TraceSwitch> m_traceSwitches;
    private Dictionary`2<string, TraceLevel> m_originalTraceLevels;
    private bool m_tracingEnabled;
    private TraceSwitch m_overrideSwitch;
    private ReaderWriterLock m_switchLock;
    private long m_startTicks;
    private string m_globalKeyword;
    private string m_overrideKeyword;
    internal static string AppSettingTracingEnabled;
    internal static string AppSettingTraceDirectory;
    private static Guid m_eventProviderGuid;
    private EventProvider m_eventProvider;
    private TeamFoundationTextWriterTraceListener m_textWriter;
    internal bool IsTracingEnabled { get; private set; }
    [EditorBrowsableAttribute("1")]
public TraceLevel OverrideLevel { get; public set; }
    public TraceLevel Item { get; public set; }
    internal long MillisecondsElapsed { get; }
    internal bool IsLogging { get; }
    internal string LogFileName { get; }
    private bool IsEventProviderSessionActive { get; }
    public EventProvider EventProvider { get; }
    private static TeamFoundationTraceSettings();
    internal bool get_IsTracingEnabled();
    private void set_IsTracingEnabled(bool value);
    internal bool IsOverrideEnabled(TraceLevel traceLevel);
    public TraceLevel get_OverrideLevel();
    public void set_OverrideLevel(TraceLevel value);
    public TraceLevel get_Item(string keyword);
    public void set_Item(string keyword, TraceLevel value);
    public TraceLevel OriginalTraceLevel(string keyword);
    [EditorBrowsableAttribute("1")]
public SortedDictionary`2<string, TraceLevel> GetEnabledKeywords();
    private TraceSwitch GetTraceSwitch(string keyword, bool create);
    private void PopulateOriginalTraceLevel();
    private List`1<string> GetTraceSwitchesFromConfiguration();
    private void UpdateTracingEnabledFlag();
    internal long get_MillisecondsElapsed();
    private void InitializeTraceWriter();
    internal void EnableLogging(string path);
    internal void DisableLogging();
    internal bool get_IsLogging();
    internal string get_LogFileName();
    private bool get_IsEventProviderSessionActive();
    public EventProvider get_EventProvider();
    internal static byte ConvertLevelToETW(TraceLevel traceLevel);
}
public static class Microsoft.TeamFoundation.TeamFoundationVersion : object {
    private static string MinimumTeamFoundationVersion;
    private static string CurrentTeamFoundationVersion;
    internal static Version minimumVersion;
    internal static Version currentVersion;
    public static Version MinimumContractVersion { get; }
    public static Version CurrentContractVersion { get; }
    public static string ContractVersionRange { get; }
    private static TeamFoundationVersion();
    internal static Version CreateVersion(string s);
    public static Version get_MinimumContractVersion();
    public static Version get_CurrentContractVersion();
    public static bool Validate(string version);
    public static bool Validate(Version version);
    public static string get_ContractVersionRange();
}
public static class Microsoft.TeamFoundation.TFConstants : object {
    public static int MaxComputerNameSize;
    public static int MaxIdentityNameSize;
    public static int MaxProfileDisplayNameSize;
    public static int MaxProfilePublicAliasSize;
    public static string DatabasePrefix;
    public static string CollectionDatabaseRootName;
}
public static class Microsoft.TeamFoundation.TfsSecurity : object {
    public static string ServerGlobalScopeName;
}
public static class Microsoft.TeamFoundation.TraceComponentNames : object {
    public static string VersionControl;
    public static string WorkItemTracking;
    public static string CoreServices;
    public static string Warehouse;
    public static string TeamBuild;
    public static string ProxyServer;
    public static string TestManagement;
    public static string LabManagement;
    public static string SyncService;
    public static string TestRig;
    public static string DeploymentRig;
}
public class Microsoft.TeamFoundation.TraceKeywords : object {
    public static string Framework;
    public static string VersionControl;
    public static string WorkItemTracking;
    public static string Warehouse;
    public static string TeamBuild;
    public static string SharePoint;
    public static string TestManagement;
    public static string LabManagement;
    public static string TSWebAccess;
    public static string TeamExplorer;
    public static string TeamNavigator;
    public static string Discussion;
    public static string ConnectDialog;
    public static string API;
    public static string Authentication;
    public static string Authorization;
    public static string Database;
    public static string General;
    public static string BlobStorage;
    public static string Security;
    public static string Urls;
    public static string KeywordPrefix;
    public static string KeywordDelimiter;
    private static TraceKeywords();
    public static string BuildKeyword(String[] keywordFragments);
}
public class Microsoft.TeamFoundation.TraceKeywordSets : object {
    public static String[] API;
    public static String[] Authentication;
    public static String[] Authorization;
    public static String[] Database;
    public static String[] General;
    public static String[] TeamExplorer;
    public static String[] ConnectDialog;
    public static String[] Urls;
    private static TraceKeywordSets();
}
public class Microsoft.TeamFoundation.TraceType : TraceKeywordSets {
}
[ObsoleteAttribute("The anonymous principal has been moved to the system store.")]
public static class Microsoft.TeamFoundation.UserWellKnownSecurityIds : object {
    public static SecurityIdentifier AnonymousPrincipal;
    private static UserWellKnownSecurityIds();
}
[ObsoleteAttribute("The Anonymous principal as been moved to the system store")]
public static class Microsoft.TeamFoundation.UserWellKnownSidConstants : object {
    public static string AnonymousPrincipalSid;
    private static UserWellKnownSidConstants();
}
[EditorBrowsableAttribute("1")]
public static class Microsoft.TeamFoundation.WatsonReportingNames : object {
    public static string VersionControl;
    public static string WorkItemTracking;
    public static string CoreServices;
    public static string Warehouse;
    public static string TeamBuild;
    public static string ProxyServer;
    public static string TestManagement;
    public static string LabManagement;
    public static string SyncService;
    public static string TestRig;
    public static string DeploymentRig;
    public static string AdminOps;
}
[EditorBrowsableAttribute("1")]
public static class Microsoft.TeamFoundation.WebAccessConstants : object {
    public static string CommonDataRelativePath;
    public static string CacheRelativePath;
    public static string WorkItemOnlyViewUsersGroupIdentifier;
    public static SecurityIdentifier WorkItemOnlyViewUsersGroup;
    private static WebAccessConstants();
}
[EditorBrowsableAttribute("1")]
public class Microsoft.TeamFoundation.WebServiceNamespace : ValueType {
    public static string WIT_ClientService;
    public static string WIT_ClientService_Description;
    public static string WIT_SyncEventListener;
    public static string WIT_ExternalServices;
    public static string WIT_ConfigurationSettingsService;
    public static string WIT_FaultCodes;
    public static string WIT_FaultDetail;
    public static string Integration_Linking;
    public static string Integration_Css;
    public static string Integration_Css_Description;
    public static string Integration_Css3;
    public static string Integration_Css3_Description;
    public static string Integration_Css4;
    public static string Integration_Css4_Description;
    public static string Integration_ProcessTemplate;
    public static string Integration_ProcessTemplate_Description;
    public static string Integration_ProcessConfiguration;
    public static string Integration_ProcessConfiguration_Description;
    public static string Integration_ProcessConfiguration2;
    public static string Integration_ProcessConfiguration2_Description;
    public static string Integration_ProcessConfiguration3;
    public static string Integration_ProcessConfiguration3_Description;
    public static string Integration_ProcessConfiguration4;
    public static string Integration_ProcessConfiguration4_Description;
    public static string IProjectMaintenanceBinding;
    public static string DeleteProjectBinding;
    public static string Integration_Admin;
    public static string Integration_Admin_Description;
    public static string Integration_Registration;
    public static string Integration_Registration_Description;
    public static string Integration_Gss;
    public static string Integration_Gss_Description;
    public static string Integration_Gss2;
    public static string Integration_Gss2_Description;
    public static string Integration_Ims;
    public static string Integration_Ims_Description;
    public static string Integration_Auth;
    public static string Integration_Auth_Description;
    public static string Integration_ServerStatus;
    public static string Integration_ServerStatus_Description;
    public static string Integration_Events;
    public static string Integration_Events_Description;
    public static string Integration_DeleteProject;
    public static string Integration_NotificationService;
    public static string Integration_SyncService;
    public static string Integration_SyncService_Description;
    public static string Integration_TeamConfiguration;
    public static string Integration_TeamConfiguration_Description;
    public static string Integration_ProcessManagement_Description;
    public static string Scc_Admin;
    public static string Scc_Admin_Description;
    public static string Scc_Integration_Description;
    public static string Scc_ClientServices;
    public static string Scc_ClientServices_Description;
    public static string Scc_ProxyStats;
    public static string Scc_ProxyStats_Description;
    public static string Tb_Controller;
    public static string Tb_Controller_Description;
    public static string Tb_Store;
    public static string Tb_Store_Description;
    public static string Tb_Integration_Description;
    public static string Tb_Service;
    public static string Tb_Service_Description;
    public static string Tb_Agent;
    public static string Tcm_TestResults;
    public static string Tcm_TestResults_Description;
    public static string Tcm_TestImpact;
    public static string Tcm_TestImpact_Description;
    public static string Tcm_TestManagement;
    public static string Tcm_TestManagement_Description;
}
[EditorBrowsableAttribute("1")]
public static class Microsoft.TeamFoundation.WellKnownSidPoolId : object {
    public static int Framework;
    public static int TeamBuild;
    public static int SharePoint;
    public static int WebAccess;
    public static int TestManagement;
    public static int VersionControl;
    public static int Sync;
    public static int FeatureAvailability;
    public static int DistributedTask;
}
[EditorBrowsableAttribute("1")]
public static class Microsoft.TeamFoundation.WorkItemCategoryNames : object {
    public static string BugCategory;
    public static string TaskCategory;
    public static string CodeReviewCategory;
    public static string CodeReviewRequestCategory;
    public static string CodeReviewResponseCategory;
    public static string ReleaseCategory;
    public static string ReleaseStageCategory;
    public static string StageSignoffTaskCategory;
    public static string RequirementCategory;
    public static string SharedStepCategory;
    public static string TestCaseCategory;
    public static string TestPlanCategory;
    public static string TestSuiteCategory;
    public static string HiddenCategory;
    public static string SharedParameters;
    public static string FeedbackRequestCategory;
    public static string FeedbackResponseCategory;
}
[DataContractAttribute]
[EditorBrowsableAttribute("1")]
public class Microsoft.VisualStudio.Services.HostManagement.ServiceHostProperties : object {
    [CompilerGeneratedAttribute]
private Guid <HostId>k__BackingField;
    [CompilerGeneratedAttribute]
private Guid <ParentHostId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Description>k__BackingField;
    [CompilerGeneratedAttribute]
private ServiceHostType <HostType>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Region>k__BackingField;
    [CompilerGeneratedAttribute]
private TeamFoundationServiceHostStatus <State>k__BackingField;
    [CompilerGeneratedAttribute]
private string <StatusReason>k__BackingField;
    [CompilerGeneratedAttribute]
private ServiceHostSubStatus <SubStatus>k__BackingField;
    [XmlAttributeAttribute("hostId")]
[DataMemberAttribute]
public Guid HostId { get; public set; }
    [XmlAttributeAttribute("parentHostId")]
[DataMemberAttribute]
public Guid ParentHostId { get; public set; }
    [XmlAttributeAttribute("name")]
[DataMemberAttribute]
public string Name { get; public set; }
    [XmlAttributeAttribute("description")]
[DataMemberAttribute]
public string Description { get; public set; }
    [XmlAttributeAttribute("hostType")]
[DataMemberAttribute]
public ServiceHostType HostType { get; public set; }
    [XmlAttributeAttribute("region")]
[DataMemberAttribute]
public string Region { get; public set; }
    [XmlAttributeAttribute("state")]
[DataMemberAttribute]
public TeamFoundationServiceHostStatus State { get; public set; }
    [XmlAttributeAttribute("statusReason")]
[DataMemberAttribute]
public string StatusReason { get; public set; }
    [XmlAttributeAttribute("subStatus")]
[DataMemberAttribute]
public ServiceHostSubStatus SubStatus { get; public set; }
    public ServiceHostProperties(ServiceHostProperties serviceHost);
    [CompilerGeneratedAttribute]
public Guid get_HostId();
    [CompilerGeneratedAttribute]
public void set_HostId(Guid value);
    [CompilerGeneratedAttribute]
public Guid get_ParentHostId();
    [CompilerGeneratedAttribute]
public void set_ParentHostId(Guid value);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public string get_Description();
    [CompilerGeneratedAttribute]
public void set_Description(string value);
    [CompilerGeneratedAttribute]
public ServiceHostType get_HostType();
    [CompilerGeneratedAttribute]
public void set_HostType(ServiceHostType value);
    [CompilerGeneratedAttribute]
public string get_Region();
    [CompilerGeneratedAttribute]
public void set_Region(string value);
    [CompilerGeneratedAttribute]
public TeamFoundationServiceHostStatus get_State();
    [CompilerGeneratedAttribute]
public void set_State(TeamFoundationServiceHostStatus value);
    [CompilerGeneratedAttribute]
public string get_StatusReason();
    [CompilerGeneratedAttribute]
public void set_StatusReason(string value);
    [CompilerGeneratedAttribute]
public ServiceHostSubStatus get_SubStatus();
    [CompilerGeneratedAttribute]
public void set_SubStatus(ServiceHostSubStatus value);
    public ServiceHostProperties Clone();
}
[FlagsAttribute]
[DataContractAttribute]
[EditorBrowsableAttribute("1")]
public enum Microsoft.VisualStudio.Services.HostManagement.ServiceHostType : Enum {
    public byte value__;
    [EnumMemberAttribute]
public static ServiceHostType Unknown;
    [EnumMemberAttribute]
public static ServiceHostType Deployment;
    [EnumMemberAttribute]
public static ServiceHostType Application;
    [EnumMemberAttribute]
public static ServiceHostType Collection;
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("2")]
internal class System.Runtime.CompilerServices.RefSafetyRulesAttribute : Attribute {
    public int Version;
    public RefSafetyRulesAttribute(int );
}
