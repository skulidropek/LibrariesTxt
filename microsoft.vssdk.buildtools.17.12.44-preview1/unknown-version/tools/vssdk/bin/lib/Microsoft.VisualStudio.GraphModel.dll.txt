[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
[ExtensionAttribute]
public static class Microsoft.VisualStudio.Diagnostics.PerformanceProvider.DebugTrace.DebugTracerGraphModelHelper : object {
    private static DebugTracerGraphModelHelper();
    [ConditionalAttribute("DEBUG")]
public static void SetPropertiesToTrace(String[] propertyIds);
    [ConditionalAttribute("DEBUG")]
public static void SetLabelsToTrace(String[] labels);
    public static bool ShouldTraceProperty(string propertyId);
    public static bool ShouldTraceProperty(GraphProperty prop);
    public static bool ShouldTraceObject(object obj);
    [ConditionalAttribute("DEBUG")]
public static void TraceStateIfTrackingGraphElements(GraphObject obj, string propertyId, DebugCategory category, ITraceableIdentifiableObject dbg, bool showDetailedState, bool includeStackTrace, string message, Object[] args);
    [ConditionalAttribute("DEBUG")]
public static void TraceStateIfTrackingGraphElements(GraphObject obj, GraphProperty prop, DebugCategory category, ITraceableIdentifiableObject dbg, bool showDetailedState, bool includeStackTrace, string message, Object[] args);
    [ConditionalAttribute("DEBUG")]
public static void TraceMessageIfTrackingGraphElements(GraphObject obj, GraphProperty prop, DebugCategory category, bool includeStackTrace, string message, Object[] args);
    [ConditionalAttribute("DEBUG")]
public static void TraceMessageIfTrackingGraphElements(GraphObject obj, string propertyId, DebugCategory category, bool includeStackTrace, string message, Object[] args);
    [ExtensionAttribute]
public static string DEBUG_GetLabelOrId(GraphObject obj);
}
public class Microsoft.VisualStudio.GraphModel.ActiveTransactionsChangedEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
private int <CurrentNumberOfTransactions>k__BackingField;
    [CompilerGeneratedAttribute]
private int <ManagedThreadId>k__BackingField;
    public int CurrentNumberOfTransactions { get; private set; }
    public int ManagedThreadId { get; private set; }
    internal ActiveTransactionsChangedEventArgs(int activeTransactions, int threadId);
    [CompilerGeneratedAttribute]
public int get_CurrentNumberOfTransactions();
    [CompilerGeneratedAttribute]
private void set_CurrentNumberOfTransactions(int value);
    [CompilerGeneratedAttribute]
public int get_ManagedThreadId();
    [CompilerGeneratedAttribute]
private void set_ManagedThreadId(int value);
}
public enum Microsoft.VisualStudio.GraphModel.AggregatorKind : Enum {
    public int value__;
    public static AggregatorKind None;
    public static AggregatorKind Or;
}
internal class Microsoft.VisualStudio.GraphModel.Algorithms.StronglyConnectedComponent : object {
    private HashSet`1<GraphNode> _nodes;
    public ISet`1<GraphNode> Nodes { get; }
    public ISet`1<GraphNode> get_Nodes();
}
internal class Microsoft.VisualStudio.GraphModel.Algorithms.StronglyConnectedComponentCollection : object {
    private int _currentIndex;
    private Dictionary`2<GraphNode, NodeData> _nodeDataMap;
    private List`1<StronglyConnectedComponent> _sccs;
    private List`1<NodeData> _visited;
    private Dictionary`2<NodeData, bool> _visitMap;
    private Predicate`1<GraphLink> _outgoingLinkFilter;
    public StronglyConnectedComponentCollection(IEnumerable`1<GraphNode> nodesToConsider, Predicate`1<GraphLink> outgoingLinkFilter);
    private List`1<StronglyConnectedComponent> GetNonEmptyComponents();
    private void DepthFirstTraversal(NodeData data, int visit);
    private void DfsAllNodesCheck();
    private void InitializeNodeData(IEnumerable`1<GraphNode> inputs);
    private void AddToNodeDataMap(GraphNode node);
    public sealed virtual IEnumerator`1<StronglyConnectedComponent> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
}
public enum Microsoft.VisualStudio.GraphModel.CodeSchema.ParamKind : Enum {
    public int value__;
    public static ParamKind Default;
    public static ParamKind Ref;
    public static ParamKind Return;
}
public class Microsoft.VisualStudio.GraphModel.CodeSchema.Position : ValueType {
    private bool _isValid;
    private int _lineIndex;
    private int _charIndex;
    public int Line { get; }
    public int Character { get; }
    public bool IsValid { get; }
    public Position(int lineIndex, int charIndex);
    public int get_Line();
    public int get_Character();
    public bool get_IsValid();
    public virtual bool Equals(object o);
    public sealed virtual bool Equals(Position p2);
    public virtual int GetHashCode();
    public sealed virtual int CompareTo(object other);
    public sealed virtual int CompareTo(Position p);
    public static int Compare(Position p1, Position p2);
    public static bool op_Equality(Position p1, Position p2);
    public static bool op_Inequality(Position p1, Position p2);
    public static bool op_LessThan(Position p1, Position p2);
    public static bool op_GreaterThan(Position p1, Position p2);
    public static bool op_GreaterThanOrEqual(Position p1, Position p2);
    public static bool op_LessThanOrEqual(Position p1, Position p2);
    public virtual string ToString();
}
[TypeConverterAttribute("Microsoft.VisualStudio.GraphModel.CodeSchema.SourceLocationTypeConverter")]
public class Microsoft.VisualStudio.GraphModel.CodeSchema.SourceLocation : ValueType {
    private Uri _fileName;
    private Position _startPosition;
    private Position _endPosition;
    public Uri FileName { get; }
    public Position StartPosition { get; }
    public Position EndPosition { get; }
    public bool IsValid { get; }
    public SourceLocation(Uri fileName, Position position);
    public SourceLocation(string fileName, Position position);
    public SourceLocation(Uri fileName, Position startPosition, Position endPosition);
    public SourceLocation(string fileName, Position startPosition, Position endPosition);
    public Uri get_FileName();
    public Position get_StartPosition();
    public Position get_EndPosition();
    public bool get_IsValid();
    public GraphNodeId CreateGraphNodeId();
    public virtual string ToString();
    public virtual bool Equals(object obj);
    public sealed virtual bool Equals(SourceLocation other);
    public virtual int GetHashCode();
    public static bool op_Equality(SourceLocation l1, SourceLocation l2);
    public static bool op_Inequality(SourceLocation l1, SourceLocation l2);
}
public class Microsoft.VisualStudio.GraphModel.CodeSchema.SourceLocationTypeConverter : TypeConverter {
    public virtual bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType);
    public virtual object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value);
    public virtual object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType);
}
public enum Microsoft.VisualStudio.GraphModel.DelayedDataState : Enum {
    public int value__;
    public static DelayedDataState Unspecified;
    public static DelayedDataState NotFetched;
    public static DelayedDataState Fetched;
    public static DelayedDataState Incomplete;
}
public class Microsoft.VisualStudio.GraphModel.DynamicGraphMetaObject : DynamicMetaObject {
    private GraphObject graphObject;
    public DynamicGraphMetaObject(Expression expression, GraphObject value);
    public virtual DynamicMetaObject BindBinaryOperation(BinaryOperationBinder binder, DynamicMetaObject arg);
    public virtual DynamicMetaObject BindConvert(ConvertBinder binder);
    public virtual DynamicMetaObject BindDeleteIndex(DeleteIndexBinder binder, DynamicMetaObject[] indexes);
    public virtual DynamicMetaObject BindDeleteMember(DeleteMemberBinder binder);
    public virtual DynamicMetaObject BindGetIndex(GetIndexBinder binder, DynamicMetaObject[] indexes);
    public virtual DynamicMetaObject BindInvoke(InvokeBinder binder, DynamicMetaObject[] args);
    public virtual DynamicMetaObject BindInvokeMember(InvokeMemberBinder binder, DynamicMetaObject[] args);
    public virtual DynamicMetaObject BindSetIndex(SetIndexBinder binder, DynamicMetaObject[] indexes, DynamicMetaObject value);
    public virtual DynamicMetaObject BindSetMember(SetMemberBinder binder, DynamicMetaObject value);
    public virtual DynamicMetaObject BindUnaryOperation(UnaryOperationBinder binder);
    [IteratorStateMachineAttribute("Microsoft.VisualStudio.GraphModel.DynamicGraphMetaObject/<GetDynamicMemberNames>d__12")]
public virtual IEnumerable`1<string> GetDynamicMemberNames();
    public virtual DynamicMetaObject BindGetMember(GetMemberBinder binder);
    public virtual DynamicMetaObject BindCreateInstance(CreateInstanceBinder binder, DynamicMetaObject[] args);
}
[GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "4.0.0.0")]
[DebuggerNonUserCodeAttribute]
[CompilerGeneratedAttribute]
internal class Microsoft.VisualStudio.GraphModel.ExtensibilityResources : object {
    private static ResourceManager resourceMan;
    private static CultureInfo resourceCulture;
    [EditorBrowsableAttribute("2")]
internal static ResourceManager ResourceManager { get; }
    [EditorBrowsableAttribute("2")]
internal static CultureInfo Culture { get; internal set; }
    internal static string BaseTypesCommandLabel { get; }
    internal static string CallsCommandLabel { get; }
    internal static string ContainsCommandLabel { get; }
    internal static string DerivedTypesCommandLabel { get; }
    internal static string IsCalledByCommandLabel { get; }
    internal static string IsDefinedByCommandLabel { get; }
    internal static string IsUsedByCommandLabel { get; }
    internal static ResourceManager get_ResourceManager();
    internal static CultureInfo get_Culture();
    internal static void set_Culture(CultureInfo value);
    internal static string get_BaseTypesCommandLabel();
    internal static string get_CallsCommandLabel();
    internal static string get_ContainsCommandLabel();
    internal static string get_DerivedTypesCommandLabel();
    internal static string get_IsCalledByCommandLabel();
    internal static string get_IsDefinedByCommandLabel();
    internal static string get_IsUsedByCommandLabel();
}
internal class Microsoft.VisualStudio.GraphModel.GetAliasedIdentifier : MulticastDelegate {
    public GetAliasedIdentifier(object object, IntPtr method);
    public virtual string Invoke(GraphNodeId parent, GraphNodeId id);
    public virtual IAsyncResult BeginInvoke(GraphNodeId parent, GraphNodeId id, AsyncCallback callback, object object);
    public virtual string EndInvoke(IAsyncResult result);
}
public class Microsoft.VisualStudio.GraphModel.Graph : GraphObject {
    private GraphNodeCollection _nodes;
    private GraphGroupCollection _groups;
    private GraphLinkCollection _links;
    private GraphGroupManager _groupManager;
    private GraphSchema _documentSchema;
    private Dictionary`2<object, GraphMetadata> _metadataForObjects;
    [CompilerGeneratedAttribute]
private EventHandler BeginUndoableTransactionScope;
    [CompilerGeneratedAttribute]
private EventHandler EndUndoableTransactionScope;
    [CompilerGeneratedAttribute]
private EventHandler`1<GraphUpdatedEventArgs> Updated;
    [CompilerGeneratedAttribute]
private EventHandler`1<GraphUpdatedEventArgs> Updating;
    private int _insideUpdateEvent;
    private GraphConditionalStyleCollection _styles;
    [CompilerGeneratedAttribute]
private GraphPathSerializationDictionary <Paths>k__BackingField;
    private Dictionary`2<int, GraphNodeId> deserializedIdentifiers;
    public GraphNodeCollection Nodes { get; }
    public IReadOnlyCollection`1<GraphGroup> Groups { get; }
    public IEnumerable`1<GraphGroup> AllGroups { get; }
    public IEnumerable`1<GraphNode> OrphanNodes { get; }
    public IEnumerable`1<GraphNode> VisibleOrphanNodes { get; }
    public GraphLinkCollection Links { get; }
    internal GraphGroupManager GroupManager { get; }
    [DebuggerBrowsableAttribute("0")]
public GraphSchema DocumentSchema { get; }
    public IEnumerable`1<GraphSchema> AllSchemas { get; }
    public static GraphPathSerializationDictionary CommonPaths { get; }
    public IEnumerable`1<GraphNode> VisibleNodes { get; }
    public IEnumerable`1<GraphGroup> VisibleTopLevelGroups { get; }
    public IEnumerable`1<GraphLink> VisibleLinks { get; }
    public GraphConditionalStyleCollection Styles { get; }
    public GraphPathSerializationDictionary Paths { get; internal set; }
    internal Dictionary`2<int, GraphNodeId> DeserializedIdentifiers { get; internal set; }
    protected Graph(SerializationInfo info, StreamingContext context);
    public void Clear();
    [DebuggerStepThroughAttribute]
public GraphNodeCollection get_Nodes();
    [DebuggerStepThroughAttribute]
public IReadOnlyCollection`1<GraphGroup> get_Groups();
    public IEnumerable`1<GraphGroup> get_AllGroups();
    public IEnumerable`1<GraphNode> get_OrphanNodes();
    public GraphGroup FindGroup(GraphNode node);
    internal GraphGroup InternalFindGroup(GraphNode node);
    public IEnumerable`1<GraphNode> get_VisibleOrphanNodes();
    [DebuggerStepThroughAttribute]
public GraphLinkCollection get_Links();
    internal GraphGroupManager get_GroupManager();
    public virtual GraphSchema get_DocumentSchema();
    public virtual void AddSchema(GraphSchema schema);
    public IEnumerable`1<GraphSchema> get_AllSchemas();
    internal GraphMetadata GetMetadata(object obj);
    internal void SetMetadata(object item, GraphMetadata metadata);
    public Graph Copy();
    public bool CopySchemas(Graph other);
    public static Graph Load(string fileName, GraphSchema[] schemas);
    public static Graph Load(string fileName, EventHandler`1<GraphDeserializationProgressEventArgs> progressHandler, GraphSchema[] schemas);
    public static Graph Load(Stream stream, GraphSchema[] schemas);
    public static Graph Load(Stream stream, EventHandler`1<GraphDeserializationProgressEventArgs> progressHandler, GraphSchema[] schemas);
    public static Graph Load(XmlReader reader, GraphSchema[] schemas);
    [ObsoleteAttribute]
public static Graph Load(XmlReader reader, EventHandler`1<GraphDeserializationProgressEventArgs> progressHandler, GraphSchema[] schemas);
    public static Graph Load(XDocument doc, GraphSchema[] schemas);
    public static Graph Load(XDocument doc, EventHandler`1<GraphDeserializationProgressEventArgs> progressHandler, GraphSchema[] schemas);
    public static Graph Load(TextReader reader, GraphSchema[] schemas);
    public static Graph Load(TextReader reader, EventHandler`1<GraphDeserializationProgressEventArgs> progressHandler, GraphSchema[] schemas);
    public void LoadAndMerge(string filename, GraphSchema[] schemas);
    public void LoadAndMerge(string filename, EventHandler`1<GraphDeserializationProgressEventArgs> progressHandler, GraphSchema[] schemas);
    public void LoadAndMerge(Stream stream, GraphSchema[] schemas);
    public void LoadAndMerge(Stream stream, EventHandler`1<GraphDeserializationProgressEventArgs> progressHandler, GraphSchema[] schemas);
    public void LoadAndMerge(XDocument doc, GraphSchema[] schemas);
    public void LoadAndMerge(XDocument doc, EventHandler`1<GraphDeserializationProgressEventArgs> progressHandler, GraphSchema[] schemas);
    public static Graph Parse(string dgml, GraphSchema[] schemas);
    public static Graph Parse(string dgml, EventHandler`1<GraphDeserializationProgressEventArgs> progressHandler, GraphSchema[] schemas);
    public void Save(string fileName, XmlWriterSettings writerSettings, GraphSerializationSettings settings);
    public void Save(string fileName, GraphSerializationSettings settings);
    [ObsoleteAttribute]
public void Save(XmlWriter writer, GraphSerializationSettings settings);
    public void Save(Stream outputStream, XmlWriterSettings writerSettings, GraphSerializationSettings settings);
    public void Save(Stream outputStream, GraphSerializationSettings settings);
    public GraphNodeId ParseSerializedNodeId(string identifier);
    internal GraphNodeId ResolveIdentifierFromAliasTable(int id);
    public static GraphPathSerializationDictionary get_CommonPaths();
    public GraphLink ImportLink(GraphLink link);
    internal GraphLink InternalImportLink(GraphLink link, bool importSchemas);
    public GraphNode ImportNode(GraphNode node);
    internal GraphNode InternalImportNode(GraphNode node, bool copySchemas);
    public bool Merge(IEnumerable`1<GraphObject> other);
    public bool Merge(Graph other);
    public bool Merge(IEnumerable`1<GraphNode> other);
    public bool Merge(IEnumerable`1<GraphLink> other);
    public bool Merge(IEnumerable`1<GraphConditionalStyle> styles);
    public GraphConditionalStyle ImportStyle(GraphConditionalStyle style);
    public void ImportSubset(IEnumerable`1<GraphNode> nodes, bool hideOtherNodes, int levels);
    public static IEnumerable`1<GraphNode> GetGroupDescendants(IEnumerable`1<GraphObject> graphObjects);
    [IteratorStateMachineAttribute("Microsoft.VisualStudio.GraphModel.Graph/<GetSearchableObjects>d__72")]
public static IEnumerable`1<GraphObject> GetSearchableObjects(Graph graph);
    [IteratorStateMachineAttribute("Microsoft.VisualStudio.GraphModel.Graph/<GetGroupDescendants>d__73")]
public static IEnumerable`1<GraphNode> GetGroupDescendants(IEnumerable`1<GraphObject> graphObjects, Predicate`1<GraphGroup> groupFilter, Predicate`1<GraphNode> nodeFilter);
    public GraphNode ImportSubset(GraphNode node, bool hideOtherNodes, int levels);
    internal GraphNode InternalImportSubset(GraphNode node, bool hideOtherNodes, int levels, bool copySchemas);
    private GraphNode ImportSubsetRecursive(GraphNode node, bool topLevel, bool hideOtherNodes, int levels);
    private GraphNode ImportSubsetRecursive(HashSet`1<GraphNode> visitedNodes, GraphNode node, bool topLevel, bool hideOtherNodes, int levels);
    public IEnumerable`1<GraphNode> get_VisibleNodes();
    public IEnumerable`1<GraphGroup> get_VisibleTopLevelGroups();
    public IEnumerable`1<GraphLink> get_VisibleLinks();
    public GraphNode RenameNode(string originalNodeId, string targetNodeId);
    public GraphNode RenameNode(GraphNodeId originalNodeId, GraphNodeId targetNodeId);
    public GraphNode RenameNode(GraphNode existingNode, GraphNodeId targetNodeId);
    public void HideOrphans();
    public static GraphGroup FindCommonAncestor(IEnumerable`1<GraphNode> nodes);
    internal static GraphGroup FindCommonAncestor(IEnumerable`1<GraphNode> nodes, HashSet`1<GraphGroup> groups);
    internal static GraphGroup FindDeepestGroup(HashSet`1<GraphGroup> commonParents);
    internal static int GetDepth(GraphGroup group, HashSet`1<GraphGroup> visited);
    public GraphTransactionScope BeginUpdate(object undoUnitId, string undoDescription, UndoOption option);
    public GraphTransactionScope BeginUpdate(object undoUnitId, string undoDescription, UndoOption option, bool forceAdd);
    private void OnEndUndoableTransactionScope(object sender, EventArgs e);
    private void OnBeginUndoableTransactionScope();
    [CompilerGeneratedAttribute]
public void add_BeginUndoableTransactionScope(EventHandler value);
    [CompilerGeneratedAttribute]
public void remove_BeginUndoableTransactionScope(EventHandler value);
    [CompilerGeneratedAttribute]
public void add_EndUndoableTransactionScope(EventHandler value);
    [CompilerGeneratedAttribute]
public void remove_EndUndoableTransactionScope(EventHandler value);
    [CompilerGeneratedAttribute]
public void add_Updated(EventHandler`1<GraphUpdatedEventArgs> value);
    [CompilerGeneratedAttribute]
public void remove_Updated(EventHandler`1<GraphUpdatedEventArgs> value);
    [CompilerGeneratedAttribute]
public void add_Updating(EventHandler`1<GraphUpdatedEventArgs> value);
    [CompilerGeneratedAttribute]
public void remove_Updating(EventHandler`1<GraphUpdatedEventArgs> value);
    private void ThrowOnRecursion();
    internal void GraphTransactionEnlistment_BeforeUpdate(GraphTransactionEnlistmentEventArgs evt);
    internal void OnCommitChanges(object source, GraphTransactionEnlistmentEventArgs evt);
    internal void OnBeforeCommit();
    internal void OnCommitComplete();
    internal void OnAfterRollback();
    [DebuggerStepThroughAttribute]
public GraphConditionalStyleCollection get_Styles();
    [CompilerGeneratedAttribute]
public GraphPathSerializationDictionary get_Paths();
    [CompilerGeneratedAttribute]
internal void set_Paths(GraphPathSerializationDictionary value);
    public string ToXml();
    public string ToXml(int graphNodeIdAliasThreshold);
    public virtual void GetObjectData(SerializationInfo info, StreamingContext context);
    internal Dictionary`2<int, GraphNodeId> get_DeserializedIdentifiers();
    internal void set_DeserializedIdentifiers(Dictionary`2<int, GraphNodeId> value);
    [CompilerGeneratedAttribute]
private bool <get_OrphanNodes>b__13_0(GraphNode node);
}
public class Microsoft.VisualStudio.GraphModel.GraphCategory : GraphMetadataContainer {
    private string _id;
    private GraphCategory _basedOn;
    public string Id { get; }
    public GraphCategory BasedOnCategory { get; public set; }
    internal GraphCategory(string id, Func`1<GraphMetadata> callback);
    public string get_Id();
    public GraphCategory get_BasedOnCategory();
    public void set_BasedOnCategory(GraphCategory value);
    public bool IsBasedOnCategory(string category);
    public string GetLabelOrId(Graph schema);
    public virtual string ToString();
    public bool IsBasedOn(GraphCategory baseCategory);
    public virtual int GetHashCode();
    public virtual bool Equals(object obj);
}
public class Microsoft.VisualStudio.GraphModel.GraphCategoryChangedEventArgs : EventArgs {
    private GraphCategory category;
    private GraphCategoryChangeType changeType;
    public GraphCategory Category { get; }
    public GraphCategoryChangeType Change { get; }
    public GraphCategoryChangedEventArgs(GraphCategory category, GraphCategoryChangeType changeType);
    public GraphCategory get_Category();
    public GraphCategoryChangeType get_Change();
}
public enum Microsoft.VisualStudio.GraphModel.GraphCategoryChangeType : Enum {
    public int value__;
    public static GraphCategoryChangeType Added;
    public static GraphCategoryChangeType Removed;
}
public class Microsoft.VisualStudio.GraphModel.GraphCategoryCollection : object {
    private Dictionary`2<string, GraphCategory> _graphCategories;
    [CompilerGeneratedAttribute]
private GraphSchema <Schema>k__BackingField;
    public int Count { get; }
    public bool IsReadOnly { get; }
    public GraphSchema Schema { get; private set; }
    public GraphCategoryCollection(GraphSchema schema);
    private sealed virtual override IEnumerator`1<GraphCategory> System.Collections.Generic.IEnumerable<Microsoft.VisualStudio.GraphModel.GraphCategory>.GetEnumerator();
    public sealed virtual IEnumerator GetEnumerator();
    public sealed virtual int get_Count();
    public sealed virtual bool get_IsReadOnly();
    public sealed virtual void Add(GraphCategory item);
    public sealed virtual void Clear();
    public sealed virtual bool Contains(GraphCategory item);
    public sealed virtual void CopyTo(GraphCategory[] array, int arrayIndex);
    public sealed virtual bool Remove(GraphCategory item);
    public bool Copy(GraphCategoryCollection other, Graph sourceMetadataGraph, Graph destinationMetadataGraph);
    public GraphCategory AddNewCategory(string id);
    public GraphCategory AddNewCategory(string id, Func`1<GraphMetadata> callback);
    internal GraphCategory GetCategoryPrivate(string id);
    [IteratorStateMachineAttribute("Microsoft.VisualStudio.GraphModel.GraphCategoryCollection/<GetCategoriesPrivate>d__17")]
internal IEnumerable`1<GraphCategory> GetCategoriesPrivate(IEnumerable`1<string> idList);
    [IteratorStateMachineAttribute("Microsoft.VisualStudio.GraphModel.GraphCategoryCollection/<GetCategoriesBasedOn>d__18")]
public IEnumerable`1<GraphCategory> GetCategoriesBasedOn(GraphCategory baseCategory);
    [CompilerGeneratedAttribute]
public GraphSchema get_Schema();
    [CompilerGeneratedAttribute]
private void set_Schema(GraphSchema value);
    private void OnCollectionChanged();
}
public enum Microsoft.VisualStudio.GraphModel.GraphCategoryMatchOption : Enum {
    public int value__;
    public static GraphCategoryMatchOption Exact;
    public static GraphCategoryMatchOption Inherited;
}
public class Microsoft.VisualStudio.GraphModel.GraphCommand : object {
    [CompilerGeneratedAttribute]
private GraphCommandDefinition <Definition>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<GraphCategory> <TargetCategories>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<GraphCategory> <LinkCategories>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <TrackChanges>k__BackingField;
    public GraphCommandDefinition Definition { get; private set; }
    public IEnumerable`1<GraphCategory> TargetCategories { get; private set; }
    public IEnumerable`1<GraphCategory> LinkCategories { get; private set; }
    public bool TrackChanges { get; private set; }
    public GraphCommand(GraphCommandDefinition definition, IEnumerable`1<GraphCategory> targetCategories, IEnumerable`1<GraphCategory> linkCategories, bool trackChanges);
    [CompilerGeneratedAttribute]
public GraphCommandDefinition get_Definition();
    [CompilerGeneratedAttribute]
private void set_Definition(GraphCommandDefinition value);
    [CompilerGeneratedAttribute]
public IEnumerable`1<GraphCategory> get_TargetCategories();
    [CompilerGeneratedAttribute]
private void set_TargetCategories(IEnumerable`1<GraphCategory> value);
    [CompilerGeneratedAttribute]
public IEnumerable`1<GraphCategory> get_LinkCategories();
    [CompilerGeneratedAttribute]
private void set_LinkCategories(IEnumerable`1<GraphCategory> value);
    [CompilerGeneratedAttribute]
public bool get_TrackChanges();
    [CompilerGeneratedAttribute]
private void set_TrackChanges(bool value);
}
public class Microsoft.VisualStudio.GraphModel.GraphCommandDefinition : object {
    [CompilerGeneratedAttribute]
private string <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Label>k__BackingField;
    [CompilerGeneratedAttribute]
private GraphContextDirection <Direction>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Priority>k__BackingField;
    private static GraphCommandDefinition _contains;
    private static GraphCommandDefinition _calls;
    private static GraphCommandDefinition _isCalledBy;
    private static GraphCommandDefinition _baseTypes;
    private static GraphCommandDefinition _derivedTypes;
    private static GraphCommandDefinition _isUsedBy;
    private static GraphCommandDefinition _isDefinedBy;
    public string Id { get; private set; }
    public string Label { get; private set; }
    public GraphContextDirection Direction { get; private set; }
    public int Priority { get; private set; }
    public static GraphCommandDefinition Contains { get; }
    public static GraphCommandDefinition Calls { get; }
    public static GraphCommandDefinition IsCalledBy { get; }
    public static GraphCommandDefinition BaseTypes { get; }
    public static GraphCommandDefinition DerivedTypes { get; }
    public static GraphCommandDefinition IsUsedBy { get; }
    public static GraphCommandDefinition IsDefinedBy { get; }
    public GraphCommandDefinition(string id, string label, GraphContextDirection direction, int priority);
    [CompilerGeneratedAttribute]
public string get_Id();
    [CompilerGeneratedAttribute]
private void set_Id(string value);
    [CompilerGeneratedAttribute]
public string get_Label();
    [CompilerGeneratedAttribute]
private void set_Label(string value);
    [CompilerGeneratedAttribute]
public GraphContextDirection get_Direction();
    [CompilerGeneratedAttribute]
private void set_Direction(GraphContextDirection value);
    [CompilerGeneratedAttribute]
public int get_Priority();
    [CompilerGeneratedAttribute]
private void set_Priority(int value);
    public static GraphCommandDefinition get_Contains();
    public static GraphCommandDefinition get_Calls();
    public static GraphCommandDefinition get_IsCalledBy();
    public static GraphCommandDefinition get_BaseTypes();
    public static GraphCommandDefinition get_DerivedTypes();
    public static GraphCommandDefinition get_IsUsedBy();
    public static GraphCommandDefinition get_IsDefinedBy();
}
public static class Microsoft.VisualStudio.GraphModel.GraphCommonSchema : object {
    [CompilerGeneratedAttribute]
private static GraphSchema <Schema>k__BackingField;
    [CompilerGeneratedAttribute]
private static GraphProperty <BaseUri>k__BackingField;
    [CompilerGeneratedAttribute]
private static GraphProperty <DelayedChildNodesState>k__BackingField;
    [CompilerGeneratedAttribute]
private static GraphProperty <DelayedCrossGroupLinksState>k__BackingField;
    [CompilerGeneratedAttribute]
private static GraphProperty <IsDragSource>k__BackingField;
    [CompilerGeneratedAttribute]
private static GraphProperty <IsCursorContainingMethod>k__BackingField;
    [CompilerGeneratedAttribute]
private static GraphProperty <IsEnabled>k__BackingField;
    [CompilerGeneratedAttribute]
private static GraphProperty <Expression>k__BackingField;
    [CompilerGeneratedAttribute]
private static GraphProperty <Property>k__BackingField;
    [CompilerGeneratedAttribute]
private static GraphProperty <TargetType>k__BackingField;
    [CompilerGeneratedAttribute]
private static GraphProperty <Value>k__BackingField;
    [CompilerGeneratedAttribute]
private static GraphProperty <ToolTip>k__BackingField;
    [CompilerGeneratedAttribute]
private static GraphProperty <GroupLabel>k__BackingField;
    [CompilerGeneratedAttribute]
private static GraphProperty <ValueLabel>k__BackingField;
    [CompilerGeneratedAttribute]
private static GraphProperty <Group>k__BackingField;
    [CompilerGeneratedAttribute]
private static GraphProperty <IsContainment>k__BackingField;
    [CompilerGeneratedAttribute]
private static GraphProperty <IsPseudo>k__BackingField;
    [CompilerGeneratedAttribute]
private static GraphProperty <IsTag>k__BackingField;
    [CompilerGeneratedAttribute]
private static GraphProperty <Label>k__BackingField;
    [CompilerGeneratedAttribute]
private static GraphProperty <SourceNode>k__BackingField;
    [CompilerGeneratedAttribute]
private static GraphProperty <TargetNode>k__BackingField;
    [CompilerGeneratedAttribute]
private static GraphProperty <UniqueId>k__BackingField;
    [CompilerGeneratedAttribute]
private static GraphProperty <Visibility>k__BackingField;
    [CompilerGeneratedAttribute]
private static GraphCategory <Contains>k__BackingField;
    [CompilerGeneratedAttribute]
private static GraphProperty <Version>k__BackingField;
    public static GraphSchema Schema { get; private set; }
    public static GraphProperty BaseUri { get; private set; }
    public static GraphProperty DelayedChildNodesState { get; private set; }
    public static GraphProperty DelayedCrossGroupLinksState { get; private set; }
    public static GraphProperty IsDragSource { get; private set; }
    public static GraphProperty IsCursorContainingMethod { get; private set; }
    public static GraphProperty IsEnabled { get; private set; }
    public static GraphProperty Expression { get; private set; }
    public static GraphProperty Property { get; private set; }
    public static GraphProperty TargetType { get; private set; }
    public static GraphProperty Value { get; private set; }
    public static GraphProperty ToolTip { get; private set; }
    public static GraphProperty GroupLabel { get; private set; }
    public static GraphProperty ValueLabel { get; private set; }
    public static GraphProperty Group { get; private set; }
    public static GraphProperty IsContainment { get; private set; }
    public static GraphProperty IsPseudo { get; private set; }
    public static GraphProperty IsTag { get; private set; }
    public static GraphProperty Label { get; private set; }
    public static GraphProperty SourceNode { get; private set; }
    public static GraphProperty TargetNode { get; private set; }
    public static GraphProperty UniqueId { get; private set; }
    public static GraphProperty Visibility { get; private set; }
    public static GraphCategory Contains { get; private set; }
    public static GraphProperty Version { get; private set; }
    private static GraphCommonSchema();
    [CompilerGeneratedAttribute]
public static GraphSchema get_Schema();
    [CompilerGeneratedAttribute]
private static void set_Schema(GraphSchema value);
    [CompilerGeneratedAttribute]
public static GraphProperty get_BaseUri();
    [CompilerGeneratedAttribute]
private static void set_BaseUri(GraphProperty value);
    [CompilerGeneratedAttribute]
public static GraphProperty get_DelayedChildNodesState();
    [CompilerGeneratedAttribute]
private static void set_DelayedChildNodesState(GraphProperty value);
    [CompilerGeneratedAttribute]
public static GraphProperty get_DelayedCrossGroupLinksState();
    [CompilerGeneratedAttribute]
private static void set_DelayedCrossGroupLinksState(GraphProperty value);
    [CompilerGeneratedAttribute]
public static GraphProperty get_IsDragSource();
    [CompilerGeneratedAttribute]
private static void set_IsDragSource(GraphProperty value);
    [CompilerGeneratedAttribute]
public static GraphProperty get_IsCursorContainingMethod();
    [CompilerGeneratedAttribute]
private static void set_IsCursorContainingMethod(GraphProperty value);
    [CompilerGeneratedAttribute]
public static GraphProperty get_IsEnabled();
    [CompilerGeneratedAttribute]
private static void set_IsEnabled(GraphProperty value);
    [CompilerGeneratedAttribute]
public static GraphProperty get_Expression();
    [CompilerGeneratedAttribute]
private static void set_Expression(GraphProperty value);
    [CompilerGeneratedAttribute]
public static GraphProperty get_Property();
    [CompilerGeneratedAttribute]
private static void set_Property(GraphProperty value);
    [CompilerGeneratedAttribute]
public static GraphProperty get_TargetType();
    [CompilerGeneratedAttribute]
private static void set_TargetType(GraphProperty value);
    [CompilerGeneratedAttribute]
public static GraphProperty get_Value();
    [CompilerGeneratedAttribute]
private static void set_Value(GraphProperty value);
    [CompilerGeneratedAttribute]
public static GraphProperty get_ToolTip();
    [CompilerGeneratedAttribute]
private static void set_ToolTip(GraphProperty value);
    [CompilerGeneratedAttribute]
public static GraphProperty get_GroupLabel();
    [CompilerGeneratedAttribute]
private static void set_GroupLabel(GraphProperty value);
    [CompilerGeneratedAttribute]
public static GraphProperty get_ValueLabel();
    [CompilerGeneratedAttribute]
private static void set_ValueLabel(GraphProperty value);
    [CompilerGeneratedAttribute]
public static GraphProperty get_Group();
    [CompilerGeneratedAttribute]
private static void set_Group(GraphProperty value);
    [CompilerGeneratedAttribute]
public static GraphProperty get_IsContainment();
    [CompilerGeneratedAttribute]
private static void set_IsContainment(GraphProperty value);
    [CompilerGeneratedAttribute]
public static GraphProperty get_IsPseudo();
    [CompilerGeneratedAttribute]
private static void set_IsPseudo(GraphProperty value);
    [CompilerGeneratedAttribute]
public static GraphProperty get_IsTag();
    [CompilerGeneratedAttribute]
private static void set_IsTag(GraphProperty value);
    [CompilerGeneratedAttribute]
public static GraphProperty get_Label();
    [CompilerGeneratedAttribute]
private static void set_Label(GraphProperty value);
    [CompilerGeneratedAttribute]
public static GraphProperty get_SourceNode();
    [CompilerGeneratedAttribute]
private static void set_SourceNode(GraphProperty value);
    [CompilerGeneratedAttribute]
public static GraphProperty get_TargetNode();
    [CompilerGeneratedAttribute]
private static void set_TargetNode(GraphProperty value);
    [CompilerGeneratedAttribute]
public static GraphProperty get_UniqueId();
    [CompilerGeneratedAttribute]
private static void set_UniqueId(GraphProperty value);
    [CompilerGeneratedAttribute]
public static GraphProperty get_Visibility();
    [CompilerGeneratedAttribute]
private static void set_Visibility(GraphProperty value);
    [CompilerGeneratedAttribute]
public static GraphCategory get_Contains();
    [CompilerGeneratedAttribute]
private static void set_Contains(GraphCategory value);
    [CompilerGeneratedAttribute]
public static GraphProperty get_Version();
    [CompilerGeneratedAttribute]
private static void set_Version(GraphProperty value);
}
public enum Microsoft.VisualStudio.GraphModel.GraphContextDirection : Enum {
    public int value__;
    public static GraphContextDirection Any;
    public static GraphContextDirection Target;
    public static GraphContextDirection Source;
    public static GraphContextDirection Contains;
    public static GraphContextDirection ContainedBy;
    public static GraphContextDirection Self;
    public static GraphContextDirection Custom;
}
internal class Microsoft.VisualStudio.GraphModel.GraphConverterContext : object {
    private Graph _graph;
    public IContainer Container { get; }
    public object Instance { get; }
    public PropertyDescriptor PropertyDescriptor { get; }
    public GraphConverterContext(GraphObject graphObject);
    public sealed virtual IContainer get_Container();
    public sealed virtual object get_Instance();
    public sealed virtual void OnComponentChanged();
    public sealed virtual bool OnComponentChanging();
    public sealed virtual PropertyDescriptor get_PropertyDescriptor();
    public sealed virtual object GetService(Type serviceType);
}
public class Microsoft.VisualStudio.GraphModel.GraphDataObject : object {
    private Dictionary`2<string, object> _customFormats;
    private HashSet`1<string> _formats;
    private string _dgml;
    private Guid _sourceId;
    private static string DgmlFormatKey;
    private static string XmlFormatKey;
    private static string GraphFormatKey;
    private static string FormatInfoKey;
    private static string SourceGuidKey;
    private static string Namespace;
    private static bool _clipboardIsTimingOut;
    private static long _lastTimeout;
    private Graph _exchanged;
    public static DataFormat[] AllDgmlFormats { get; }
    public static DataFormat GraphFormat { get; }
    public static DataFormat DgmlFormat { get; }
    public Guid GetSourceId { get; }
    private GraphDataObject(string dgml, Guid sourceId);
    public GraphDataObject(string dgml, Guid sourceId, DataFormat[] formats);
    public GraphDataObject(Graph graph, Guid sourceId);
    public static IDataObject Create(IEnumerable`1<GraphNode> selection, Guid sourceGraphId, int levels);
    public static IDataObject Create(IEnumerable`1<GraphNode> selection, Guid sourceGraphId, int levels, IDictionary`2<string, object> optionalAttributes);
    public static IDataObject Create(IEnumerable`1<GraphNode> selection, Guid sourceGraphId, int levels, DataFormat[] formats);
    public static IDataObject Create(IEnumerable`1<GraphNode> selection, Guid sourceGraphId, int levels, DataFormat[] formats, IDictionary`2<string, object> optionalGraphProperties);
    public static DataFormat[] get_AllDgmlFormats();
    public static DataFormat get_GraphFormat();
    public static DataFormat get_DgmlFormat();
    public Guid get_GetSourceId();
    public static string GetClipboardData();
    public static string GetData(IDataObject data);
    public static bool IsClipboardDgml();
    public static bool IsGraphData(IDataObject data);
    public static bool IsDgml(string markup);
    private static bool HasXmlTokens(string markup);
    public static Graph GetSubset(IEnumerable`1<GraphNode> selection, int levels);
    public static Guid GetSourceGuid(IDataObject data);
    public sealed virtual object GetData(string format, bool autoConvert);
    public sealed virtual object GetData(Type format);
    private Graph CreateDataExchangeGraph();
    public sealed virtual object GetData(string format);
    public sealed virtual bool GetDataPresent(string format, bool autoConvert);
    public sealed virtual bool GetDataPresent(Type format);
    private object GetTypedObject(Type type);
    public sealed virtual bool GetDataPresent(string format);
    public sealed virtual String[] GetFormats(bool autoConvert);
    public sealed virtual String[] GetFormats();
    public sealed virtual void SetData(string format, object data, bool autoConvert);
    public sealed virtual void SetData(Type format, object data);
    public sealed virtual void SetData(string format, object data);
    public sealed virtual void SetData(object data);
}
public class Microsoft.VisualStudio.GraphModel.GraphDeserializationProgressEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
private int <Max>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Current>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Message>k__BackingField;
    public int Max { get; public set; }
    public int Current { get; public set; }
    public string Message { get; public set; }
    [CompilerGeneratedAttribute]
public int get_Max();
    [CompilerGeneratedAttribute]
public void set_Max(int value);
    [CompilerGeneratedAttribute]
public int get_Current();
    [CompilerGeneratedAttribute]
public void set_Current(int value);
    [CompilerGeneratedAttribute]
public string get_Message();
    [CompilerGeneratedAttribute]
public void set_Message(string value);
    internal GraphDeserializationProgressEventArgs Copy();
}
[ExtensionAttribute]
public static class Microsoft.VisualStudio.GraphModel.GraphEnumerable : object {
    [IteratorStateMachineAttribute("Microsoft.VisualStudio.GraphModel.GraphEnumerable/<AsNodes>d__0")]
[ExtensionAttribute]
public static IEnumerable`1<GraphNode> AsNodes(IEnumerable`1<GraphObject> objects);
    [IteratorStateMachineAttribute("Microsoft.VisualStudio.GraphModel.GraphEnumerable/<GetGroups>d__1")]
[ExtensionAttribute]
public static IEnumerable`1<GraphGroup> GetGroups(IEnumerable`1<GraphObject> objects);
    [ExtensionAttribute]
public static IEnumerable`1<GraphObject> GetDescendants(IEnumerable`1<GraphObject> objects);
}
public class Microsoft.VisualStudio.GraphModel.GraphException : Exception {
    private Char[] _idString;
    private int _position;
    private string _message;
    public string Message { get; }
    public GraphException(string message);
    public GraphException(string message, Exception innerException);
    protected GraphException(SerializationInfo info, StreamingContext context);
    internal GraphException(Char[] parseBuffer, int position, string message);
    public virtual void GetObjectData(SerializationInfo info, StreamingContext context);
    public virtual string get_Message();
}
[DebuggerDisplayAttribute("Group: {this.Label,nq}  Id: {this.Id.ToString()}")]
public class Microsoft.VisualStudio.GraphModel.GraphGroup : GraphObject {
    internal GraphNodeCollection nodes;
    internal GraphGroupCollection groups;
    private GraphNode groupNode;
    private Dictionary`2<GraphNodeId, int> _containmentLinkCounts;
    private HashSet`1<GraphLink> _containmentLinks;
    public GraphNodeId Id { get; }
    public string Label { get; public set; }
    public IEnumerable`1<GraphLink> ContainmentLinks { get; }
    public GraphNode GroupNode { get; }
    public bool IsEmpty { get; }
    public bool IsExpanded { get; public set; }
    public Visibility ContentVisibility { get; }
    public IReadOnlyCollection`1<GraphNode> ChildNodes { get; }
    public IReadOnlyCollection`1<GraphGroup> ChildGroups { get; }
    public IEnumerable`1<GraphGroup> Parents { get; }
    internal GraphGroup(GraphNode group);
    internal void LazyInitialize();
    private void LazyInitializeChildrenHierarcy();
    public virtual void OnPropertyChanged(string name);
    protected virtual void OnCategoryChanged(GraphCategory category, GraphCategoryChangeType changeType);
    internal void InitializeChildrenHierarchy();
    public GraphNodeId get_Id();
    public string get_Label();
    public void set_Label(string value);
    public IEnumerable`1<GraphLink> get_ContainmentLinks();
    public GraphNode get_GroupNode();
    public bool get_IsEmpty();
    public bool get_IsExpanded();
    public void set_IsExpanded(bool value);
    public Visibility get_ContentVisibility();
    public IReadOnlyCollection`1<GraphNode> get_ChildNodes();
    public IReadOnlyCollection`1<GraphGroup> get_ChildGroups();
    public IEnumerable`1<GraphGroup> get_Parents();
    [IteratorStateMachineAttribute("Microsoft.VisualStudio.GraphModel.GraphGroup/<GetDescendants>d__31")]
public IEnumerable`1<GraphNode> GetDescendants();
    [IteratorStateMachineAttribute("Microsoft.VisualStudio.GraphModel.GraphGroup/<GetDescendantGroups>d__32")]
public IEnumerable`1<GraphGroup> GetDescendantGroups();
    [IteratorStateMachineAttribute("Microsoft.VisualStudio.GraphModel.GraphGroup/<GetAncestors>d__33")]
public IEnumerable`1<GraphGroup> GetAncestors();
    internal void AddContainment(GraphLink graphLink);
    internal void RemoveContainment(GraphLink graphLink);
    internal void OnRemoved();
    private void OnGroupNodePropertyChanged(object sender, PropertyChangedEventArgs e);
    private void OnGroupNodeCategoryChanged(object sender, GraphCategoryChangedEventArgs e);
    internal void InternalRemoveChild(GraphNode node);
    internal void InternalAddChild(GraphNode node);
}
internal class Microsoft.VisualStudio.GraphModel.GraphGroupCollection : object {
    private GraphGroup _parent;
    private TransactedDictionary`2<GraphNodeId, GraphGroup> _groups;
    private Graph _graph;
    public int Count { get; }
    public Graph Graph { get; }
    public Graph Owner { get; }
    public GraphGroup Parent { get; }
    internal GraphGroupCollection(Graph graph, GraphGroup parent);
    private GraphGroup GroupsConflictResolver(GraphGroup currentValue, GraphGroup newValue);
    public sealed virtual int get_Count();
    internal void Add(GraphGroup group);
    public GraphGroup Get(string id);
    public GraphGroup Get(GraphNode node);
    public GraphGroup Get(GraphNodeId id);
    public bool Contains(GraphGroup item);
    public Graph get_Graph();
    public sealed virtual Graph get_Owner();
    public GraphGroup get_Parent();
    internal GraphGroup Remove(GraphNodeId id);
    internal bool Remove(GraphGroup group);
    internal void InternalRemove(GraphGroup group);
    internal void Clear();
    public sealed virtual IEnumerator`1<GraphGroup> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    private sealed virtual override void Microsoft.VisualStudio.GraphModel.IEnlistableNotify.Committed(IIsolatorObject isolationObject);
    private sealed virtual override void Microsoft.VisualStudio.GraphModel.IEnlistableNotify.RolledBack(IIsolatorObject isolationObject);
}
internal class Microsoft.VisualStudio.GraphModel.GraphGroupManager : object {
    private GraphGroupCollection _groups;
    private Graph _owner;
    private Dictionary`2<GraphNodeId, GraphGroup> _groupmap;
    private GraphGroupCollection _allgroups;
    private HashSet`1<GraphLink> _allContainmentLinks;
    private Dictionary`2<GraphNode, GraphGroup> _dirtyGroups;
    private HashSet`1<GraphLink> _dirtyLinks;
    private bool _computed;
    private bool _insideCompute;
    private Dictionary`2<GraphGroup, HashSet`1<GraphNode>> _modifiedToBreakCycles;
    public IEnumerable`1<GraphGroup> AllGroups { get; }
    internal Dictionary`2<GraphNodeId, GraphGroup> GroupMap { get; }
    internal HashSet`1<GraphLink> AllContainmentLinks { get; }
    internal bool InsideComputeGroupHierarchy { get; }
    public GraphGroupManager(GraphGroupCollection groups);
    internal void Clear();
    public IEnumerable`1<GraphGroup> get_AllGroups();
    public GraphGroup FindGroup(GraphNode node);
    internal GraphGroup InternalFindGroup(GraphNode node);
    internal Dictionary`2<GraphNodeId, GraphGroup> get_GroupMap();
    internal HashSet`1<GraphLink> get_AllContainmentLinks();
    private void AddDirtyGroup(GraphGroup group);
    private void AddDirtyLink(GraphLink link);
    internal void OnAddToGroup(GraphNode node, GraphGroup parent);
    internal void OnRemoveFromGroup(GraphNode node, GraphGroup parent);
    internal void OnLinkCategoryChanged(GraphLink graphLink, GraphCategory category);
    internal IEnumerable`1<GraphLink> GetContainmentClosure(GraphLink firstLink, bool ignoreFirstLinkContainment);
    internal static IEnumerable`1<GraphLink> GetContainedByClosure(GraphLink firstLink, bool ignoreFirstLinkContainment);
    [IteratorStateMachineAttribute("Microsoft.VisualStudio.GraphModel.GraphGroupManager/<GetContainingGroups>d__24")]
internal IEnumerable`1<GraphGroup> GetContainingGroups(GraphLink graphLink);
    internal void OnGroupNodePropertyChanged(GraphNode graphNode);
    internal void OnNodeAdded(GraphNode graphNode);
    internal void OnNodeRemoved(GraphNode graphNode);
    internal void OnAddLink(GraphLink graphLink);
    internal void OnRemoveLink(GraphLink graphLink);
    private bool OnContainmentLinkChanged(GraphLink graphLink);
    internal bool get_InsideComputeGroupHierarchy();
    internal void ComputeGroupHierarchy();
    private void CheckTopLevel(IEnumerable`1<GraphGroup> groups, HashSet`1<GraphGroup> visited);
    private HashSet`1<GraphNode> GetModifiedGroups(GraphGroup parent);
    private void BreakCircularContainment(GraphNode child, GraphGroup newParent);
    internal static GraphGroup GetInverseContainmentClosure(ISet`1<GraphNode> nodes);
    private void CheckCircularContainment();
    internal void OnBeforeCommit();
}
public enum Microsoft.VisualStudio.GraphModel.GraphGroupStyle : Enum {
    public int value__;
    public static GraphGroupStyle Expanded;
    public static GraphGroupStyle Compact;
    public static GraphGroupStyle Collapsed;
}
public class Microsoft.VisualStudio.GraphModel.GraphLink : GraphObject {
    private GraphNode _cachedSource;
    private GraphNode _cachedTarget;
    private int _index;
    public string Label { get; public set; }
    public GraphNode Source { get; }
    public GraphNode Target { get; }
    public int Index { get; }
    public bool IsLinkAndNodesVisible { get; }
    public bool IsContainment { get; }
    public bool IsChildLink { get; }
    internal GraphLink(Graph owner, GraphNode source, GraphNode target);
    internal GraphLink(Graph owner, GraphNode source, GraphNode target, string label, GraphCategory category);
    internal GraphLink(Graph owner, GraphNode source, GraphNode target, int index);
    public string get_Label();
    public void set_Label(string value);
    [DebuggerStepThroughAttribute]
public GraphNode get_Source();
    [DebuggerStepThroughAttribute]
public GraphNode get_Target();
    public int get_Index();
    public bool get_IsLinkAndNodesVisible();
    public bool get_IsContainment();
    public virtual string ToString();
    protected virtual void OnCategoryChanged(GraphCategory category, GraphCategoryChangeType changeType);
    internal void OnAdded(Graph graph, bool imported);
    internal void OnRemoved(Graph _graph);
    public IEnumerable`1<GraphLink> FindRelatedLinks(GraphSearchDirection searchDirection, Predicate`1<GraphLink> traverseLink, Predicate`1<GraphLink> acceptLink);
    public bool get_IsChildLink();
    public void Remove();
}
public class Microsoft.VisualStudio.GraphModel.GraphLinkCollection : object {
    private TransactedDictionary`2<LinkKey, GraphLink> _links;
    private Graph _graph;
    [CompilerGeneratedAttribute]
private EventHandler`1<GraphObjectChangedEventArgs> Added;
    [CompilerGeneratedAttribute]
private EventHandler`1<GraphObjectChangedEventArgs> Removed;
    public bool IsReadOnly { get; }
    public int Count { get; }
    public Graph Graph { get; }
    public Graph Owner { get; }
    internal GraphLinkCollection(Graph graph);
    [CompilerGeneratedAttribute]
public void add_Added(EventHandler`1<GraphObjectChangedEventArgs> value);
    [CompilerGeneratedAttribute]
public void remove_Added(EventHandler`1<GraphObjectChangedEventArgs> value);
    [CompilerGeneratedAttribute]
public void add_Removed(EventHandler`1<GraphObjectChangedEventArgs> value);
    [CompilerGeneratedAttribute]
public void remove_Removed(EventHandler`1<GraphObjectChangedEventArgs> value);
    public sealed virtual bool get_IsReadOnly();
    public sealed virtual void CopyTo(GraphLink[] array, int arrayIndex);
    private GraphLink LinksConflictResolver(GraphLink currentValue, GraphLink newValue);
    public sealed virtual int get_Count();
    public sealed virtual void Add(GraphLink item);
    public void Add(GraphLink link, GraphLink& result);
    public void Add(IEnumerable`1<GraphLink> links);
    public GraphLink GetOrCreate(GraphNode source, GraphNode target);
    public GraphLink GetOrCreate(GraphNode source, GraphNode target, string label, GraphCategory category);
    public GraphLink GetOrCreate(string sourceId, string targetId);
    public GraphLink GetOrCreate(GraphNodeId sourceId, string targetId);
    public GraphLink GetOrCreate(string sourceId, GraphNodeId targetId);
    public GraphLink GetOrCreate(string sourceId, string targetId, int index);
    public GraphLink GetOrCreate(GraphNodeId sourceId, GraphNodeId targetId);
    public GraphLink GetOrCreate(GraphNodeId sourceId, GraphNodeId targetId, int index);
    public GraphLink GetOrCreate(string sourceId, string targetId, string label, GraphCategory category);
    public GraphLink GetOrCreate(GraphNodeId sourceId, GraphNodeId targetId, string label, GraphCategory category);
    public GraphLink Get(string sourceId, string targetId);
    public GraphLink Get(string sourceId, string targetId, int index);
    public GraphLink Get(GraphNodeId sourceId, GraphNodeId targetId);
    public GraphLink Get(GraphNodeId sourceId, GraphNodeId targetId, int index);
    public GraphLink Get(GraphNode source, GraphNode target);
    public GraphLink Get(GraphNode source, GraphNode target, int index);
    [IteratorStateMachineAttribute("Microsoft.VisualStudio.GraphModel.GraphLinkCollection/<GetAll>d__35")]
public IEnumerable`1<GraphLink> GetAll(GraphNode source, GraphNode target);
    public sealed virtual bool Contains(GraphLink item);
    public Graph get_Graph();
    public sealed virtual Graph get_Owner();
    public GraphLink Remove(string sourceId, string targetId, GraphCategory category);
    public GraphLink Remove(GraphNodeId sourceId, GraphNodeId targetId, GraphCategory category);
    public sealed virtual bool Remove(GraphLink item);
    public bool Remove(GraphLink link, GraphLink& resultLink);
    public void Remove(IEnumerable`1<GraphLink> links);
    public sealed virtual void Clear();
    [IteratorStateMachineAttribute("Microsoft.VisualStudio.GraphModel.GraphLinkCollection/<GetLinksTo>d__47")]
public IEnumerable`1<GraphLink> GetLinksTo(string nodeId, GraphCategory[] categories);
    [IteratorStateMachineAttribute("Microsoft.VisualStudio.GraphModel.GraphLinkCollection/<GetLinksFrom>d__48")]
public IEnumerable`1<GraphLink> GetLinksFrom(string nodeId, GraphCategory[] categories);
    [IteratorStateMachineAttribute("Microsoft.VisualStudio.GraphModel.GraphLinkCollection/<GetFiltered>d__49")]
public IEnumerable`1<GraphLink> GetFiltered(Func`2<GraphLink, bool> filter);
    [IteratorStateMachineAttribute("Microsoft.VisualStudio.GraphModel.GraphLinkCollection/<GetByCategory>d__50")]
public IEnumerable`1<GraphLink> GetByCategory(GraphCategory[] categories);
    [IteratorStateMachineAttribute("Microsoft.VisualStudio.GraphModel.GraphLinkCollection/<GetByProperty>d__51")]
public IEnumerable`1<GraphLink> GetByProperty(GraphProperty property, object value);
    private void OnAdded(GraphLink link);
    private void OnRemoved(GraphLink link);
    public sealed virtual IEnumerator`1<GraphLink> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
}
public class Microsoft.VisualStudio.GraphModel.GraphMetadata : GraphObject {
    private string _label;
    private string _description;
    private string _group;
    private object _defaultValue;
    private GraphMetadataOptions _options;
    private int _schemaCacheVersion;
    private GraphMetadata _schemaMetadataCache;
    [CompilerGeneratedAttribute]
private GraphMetadataContainer <Container>k__BackingField;
    public string Label { get; public set; }
    public string Description { get; public set; }
    public string Group { get; public set; }
    public object DefaultValue { get; public set; }
    public GraphMetadataOptions Options { get; public set; }
    public GraphMetadataContainer Container { get; internal set; }
    public bool IsRemovable { get; }
    public bool IsSerializable { get; }
    public bool IsSubstitutable { get; }
    public bool IsWriteOnce { get; }
    public bool IsBrowsable { get; }
    public bool IsSharable { get; }
    public bool IsUndoable { get; }
    public GraphMetadata(string label, string description, string group, GraphMetadataOptions options);
    public GraphMetadata(GraphMetadataOptions options);
    public GraphMetadata(object defaultValue, GraphMetadataOptions options);
    public string get_Label();
    public void set_Label(string value);
    public string get_Description();
    public void set_Description(string value);
    public string get_Group();
    public void set_Group(string value);
    public object get_DefaultValue();
    public void set_DefaultValue(object value);
    public GraphMetadataOptions get_Options();
    public void set_Options(GraphMetadataOptions value);
    [CompilerGeneratedAttribute]
public GraphMetadataContainer get_Container();
    [CompilerGeneratedAttribute]
internal void set_Container(GraphMetadataContainer value);
    public GraphMetadata Copy();
    internal virtual bool Merge(GraphObject other);
    public bool get_IsRemovable();
    public bool get_IsSerializable();
    public bool get_IsSubstitutable();
    public bool get_IsWriteOnce();
    public bool get_IsBrowsable();
    public bool get_IsSharable();
    public bool get_IsUndoable();
    internal IEnumerable`1<GraphProperty> GetOverridenProperties();
    protected internal virtual object GetSchemaValue(GraphProperty graphProperty);
    private void UpdateMetadataCache();
}
public abstract class Microsoft.VisualStudio.GraphModel.GraphMetadataContainer : object {
    [CompilerGeneratedAttribute]
private Func`1<GraphMetadata> <DefaultCallback>k__BackingField;
    protected internal Func`1<GraphMetadata> DefaultCallback { get; protected internal set; }
    internal GraphMetadataContainer(Func`1<GraphMetadata> creator);
    [CompilerGeneratedAttribute]
protected internal Func`1<GraphMetadata> get_DefaultCallback();
    [CompilerGeneratedAttribute]
protected internal void set_DefaultCallback(Func`1<GraphMetadata> value);
    public GraphMetadata CreateDefaultMetadata();
    public GraphMetadata GetMetadata(Graph owner);
}
[FlagsAttribute]
public enum Microsoft.VisualStudio.GraphModel.GraphMetadataOptions : Enum {
    public int value__;
    public static GraphMetadataOptions None;
    public static GraphMetadataOptions Immutable;
    public static GraphMetadataOptions Removable;
    public static GraphMetadataOptions Browsable;
    public static GraphMetadataOptions Serializable;
    public static GraphMetadataOptions Substitutable;
    public static GraphMetadataOptions Sharable;
    public static GraphMetadataOptions Undoable;
    public static GraphMetadataOptions Default;
}
public static class Microsoft.VisualStudio.GraphModel.GraphNavigateToItemRanks : object {
    public static int CanNavigateToItem;
    public static int OwnItem;
}
public class Microsoft.VisualStudio.GraphModel.GraphNode : GraphObject {
    private TransactedHashSet`1<GraphLink> _incomingLinks;
    private TransactedHashSet`1<GraphLink> _outgoingLinks;
    private GraphNodeId _id;
    private SmallParentCollection _parents;
    [CompilerGeneratedAttribute]
private static bool <AssertOnNonNestedId>k__BackingField;
    public GraphNodeId Id { get; }
    public string Label { get; public set; }
    public IEnumerable`1<GraphLink> IncomingLinks { get; }
    public int IncomingLinkCount { get; }
    public IEnumerable`1<GraphLink> OutgoingLinks { get; }
    public int OutgoingLinkCount { get; }
    public int LinkCount { get; }
    public IEnumerable`1<GraphLink> AllLinks { get; }
    public bool IsContainer { get; }
    public bool IsContained { get; }
    internal static bool AssertOnNonNestedId { get; internal set; }
    public IEnumerable`1<GraphGroup> ParentGroups { get; }
    public bool HasParentGroups { get; }
    internal GraphNode(Graph owner, string id);
    internal GraphNode(Graph owner, GraphNodeId id);
    internal GraphNode(Graph owner, string id, string label, GraphCategory category);
    internal GraphNode(Graph owner, GraphNodeId id, string label, GraphCategory category);
    [DebuggerStepThroughAttribute]
public GraphNodeId get_Id();
    public string get_Label();
    public void set_Label(string value);
    [IteratorStateMachineAttribute("Microsoft.VisualStudio.GraphModel.GraphNode/<get_IncomingLinks>d__10")]
public IEnumerable`1<GraphLink> get_IncomingLinks();
    [DebuggerStepThroughAttribute]
public int get_IncomingLinkCount();
    [IteratorStateMachineAttribute("Microsoft.VisualStudio.GraphModel.GraphNode/<get_OutgoingLinks>d__14")]
[DebuggerStepThroughAttribute]
public IEnumerable`1<GraphLink> get_OutgoingLinks();
    [DebuggerStepThroughAttribute]
public int get_OutgoingLinkCount();
    [DebuggerStepThroughAttribute]
public int get_LinkCount();
    [IteratorStateMachineAttribute("Microsoft.VisualStudio.GraphModel.GraphNode/<get_AllLinks>d__20")]
public IEnumerable`1<GraphLink> get_AllLinks();
    public bool get_IsContainer();
    public bool get_IsContained();
    [CompilerGeneratedAttribute]
internal static bool get_AssertOnNonNestedId();
    [CompilerGeneratedAttribute]
internal static void set_AssertOnNonNestedId(bool value);
    internal void AddLink(GraphLink link);
    internal void RemoveLink(GraphLink link);
    [IteratorStateMachineAttribute("Microsoft.VisualStudio.GraphModel.GraphNode/<GetTargets>d__35")]
public IEnumerable`1<GraphNode> GetTargets(GraphCategory[] linkCategories);
    [IteratorStateMachineAttribute("Microsoft.VisualStudio.GraphModel.GraphNode/<GetSources>d__36")]
public IEnumerable`1<GraphNode> GetSources(GraphCategory[] linkCategories);
    [IteratorStateMachineAttribute("Microsoft.VisualStudio.GraphModel.GraphNode/<FindRelatedContainmentNodes>d__37")]
public IEnumerable`1<GraphNode> FindRelatedContainmentNodes(GraphSearchDirection searchDirection);
    [IteratorStateMachineAttribute("Microsoft.VisualStudio.GraphModel.GraphNode/<FindRelatedContainmentNodes>d__38")]
public IEnumerable`1<GraphNode> FindRelatedContainmentNodes(GraphSearchDirection searchDirection, GraphSearchOption searchOption, GraphCategory[] searchCategories);
    public IEnumerable`1<GraphNode> FindAncestors();
    internal void FindAncestors(HashSet`1<GraphNode> collectionOfAncestors);
    public IEnumerable`1<GraphNode> FindDescendants();
    private void FindDescendants(HashSet`1<GraphNode> collectionOfDescendants);
    public IEnumerable`1<GraphGroup> FindAncestorGroups();
    internal void FindAllAncestorGroups(HashSet`1<GraphGroup> results);
    [IteratorStateMachineAttribute("Microsoft.VisualStudio.GraphModel.GraphNode/<FindRelatedNodes>d__45")]
public IEnumerable`1<GraphNode> FindRelatedNodes(GraphSearchDirection searchDirection, Predicate`1<GraphLink> traverseLink, Predicate`1<GraphNode> traverseNode, Predicate`1<GraphNode> acceptNode);
    public GraphNode FindFirstRelatedNode(GraphSearchDirection searchDirection, Predicate`1<GraphLink> traverseLink, Predicate`1<GraphNode> traverseNode, Predicate`1<GraphNode> acceptNode);
    public GraphNode Copy(string newNodeId);
    public GraphNode Copy(GraphNodeId newNodeId);
    public virtual string ToString();
    public virtual void OnPropertyChanged(string property);
    internal void OnAdded(Graph graph, bool imported);
    internal void OnRemoved(Graph graph);
    public void Remove();
    private void ComputeGroupHierarchy();
    public IEnumerable`1<GraphGroup> get_ParentGroups();
    internal void AddParentGroup(GraphGroup group);
    internal void RemoveParentGroup(GraphGroup group);
    public bool get_HasParentGroups();
    internal void ClearParentGroups();
    public bool HasParentGroup(GraphGroup parent);
    public bool IsContainedBy(GraphGroup group);
    internal void ClearParents();
}
[DefaultMemberAttribute("Item")]
public class Microsoft.VisualStudio.GraphModel.GraphNodeCollection : object {
    private GraphGroup _parent;
    private TransactedDictionary`2<GraphNodeId, GraphNode> _nodes;
    private Graph _graph;
    [CompilerGeneratedAttribute]
private EventHandler`1<GraphObjectChangedEventArgs> Added;
    [CompilerGeneratedAttribute]
private EventHandler`1<GraphObjectChangedEventArgs> Removed;
    public bool IsReadOnly { get; }
    public int Count { get; }
    public GraphNode Item { get; }
    public Graph Graph { get; }
    public Graph Owner { get; }
    public IEnumerable`1<GraphNode> Containers { get; }
    internal GraphNodeCollection(Graph graph, GraphGroup parent);
    [CompilerGeneratedAttribute]
public void add_Added(EventHandler`1<GraphObjectChangedEventArgs> value);
    [CompilerGeneratedAttribute]
public void remove_Added(EventHandler`1<GraphObjectChangedEventArgs> value);
    [CompilerGeneratedAttribute]
public void add_Removed(EventHandler`1<GraphObjectChangedEventArgs> value);
    [CompilerGeneratedAttribute]
public void remove_Removed(EventHandler`1<GraphObjectChangedEventArgs> value);
    public sealed virtual bool get_IsReadOnly();
    public sealed virtual void CopyTo(GraphNode[] array, int arrayIndex);
    private GraphNode NodesConflictResolver(GraphNode currentValue, GraphNode newValue);
    public sealed virtual int get_Count();
    public sealed virtual void Add(GraphNode item);
    private void OnAdded(GraphNode node);
    private void OnRemoved(GraphNode node);
    public bool Add(GraphNode node, GraphNode& resultNode);
    internal GraphNode InternalAdd(GraphNode node, bool copySchemas);
    public void Add(IEnumerable`1<GraphNode> nodes);
    private string CreateUniqueNodeId(string idFormat);
    public GraphNode CreateNew(string idFormat);
    public GraphNode GetOrCreate(string id);
    public GraphNode GetOrCreate(GraphNodeId id);
    public GraphNode GetOrCreate(string id, string label, GraphCategory category);
    public GraphNode GetOrCreate(GraphNodeId id, string label, GraphCategory category);
    public GraphNode get_Item(string id);
    public GraphNode Get(string id);
    public GraphNode Get(GraphNodeId id);
    public sealed virtual bool Contains(GraphNode item);
    public Graph get_Graph();
    public sealed virtual Graph get_Owner();
    [IteratorStateMachineAttribute("Microsoft.VisualStudio.GraphModel.GraphNodeCollection/<GetFiltered>d__37")]
public IEnumerable`1<GraphNode> GetFiltered(Predicate`1<GraphNode> filter);
    [IteratorStateMachineAttribute("Microsoft.VisualStudio.GraphModel.GraphNodeCollection/<GetByCategory>d__38")]
public IEnumerable`1<GraphNode> GetByCategory(GraphCategory[] categories);
    public IEnumerable`1<GraphNode> GetByCategory(String[] categories);
    [IteratorStateMachineAttribute("Microsoft.VisualStudio.GraphModel.GraphNodeCollection/<GetByProperty>d__40")]
public IEnumerable`1<GraphNode> GetByProperty(GraphProperty property, object value);
    public GraphNode Remove(string id);
    public GraphNode Remove(GraphNodeId id);
    public sealed virtual bool Remove(GraphNode item);
    public bool Remove(GraphNode node, GraphNode& resultNode);
    internal void InternalRemove(GraphNode node);
    public sealed virtual void Clear();
    public void Remove(IEnumerable`1<GraphNode> nodes);
    [IteratorStateMachineAttribute("Microsoft.VisualStudio.GraphModel.GraphNodeCollection/<get_Containers>d__49")]
public IEnumerable`1<GraphNode> get_Containers();
    public sealed virtual IEnumerator`1<GraphNode> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    private sealed virtual override void Microsoft.VisualStudio.GraphModel.IEnlistableNotify.Committed(IIsolatorObject isolationObject);
    private sealed virtual override void Microsoft.VisualStudio.GraphModel.IEnlistableNotify.RolledBack(IIsolatorObject isolationObject);
    [CompilerGeneratedAttribute]
private GraphNodeId <Get>b__30_0(int intID);
}
[TypeConverterAttribute("Microsoft.VisualStudio.GraphModel.GraphNodeIdConverter")]
public class Microsoft.VisualStudio.GraphModel.GraphNodeId : object {
    private static WeakIdDictionary _table;
    private static GraphNodeId _empty;
    private GraphNodeIdName _name;
    private object _value;
    private int _hash;
    private static Char[] endChars;
    public static GraphNodeId Empty { get; }
    public GraphNodeIdName Name { get; }
    public object Value { get; }
    public string LiteralValue { get; }
    private GraphNodeId(GraphNodeIdName name, object value, int hashcode);
    private static GraphNodeId();
    public static GraphNodeId get_Empty();
    public static bool IsNullOrEmpty(GraphNodeId id);
    public static GraphNodeId GetNested(GraphNodeIdName name, object value);
    public static GraphNodeId GetArray(GraphNodeIdName name, object value);
    public static GraphNodeId GetNested(GraphNodeId[] identifiers);
    public GraphNodeId RemovedNestedNames(GraphNodeIdName[] names);
    public static GraphNodeId GetArray(GraphNodeIdName arrayName, GraphNodeId[] identifiers);
    public static GraphNodeId GetPartial(GraphNodeIdName name, object value);
    public sealed virtual GraphNodeIdName get_Name();
    public sealed virtual object get_Value();
    public T GetValue();
    public GraphNodeId GetNestedIdByName(GraphNodeIdName name);
    public T GetNestedValueByName(GraphNodeIdName name);
    public string get_LiteralValue();
    public virtual string ToString();
    internal string ToStringInternal();
    public void AppendToString(StringBuilder buffer);
    internal void AppendToString(StringBuilder sb, GraphNodeId parent, GetAliasedIdentifier aliaser);
    public static GraphNodeId op_Addition(GraphNodeId left, GraphNodeId right);
    public static bool op_Equality(GraphNodeId left, GraphNodeId right);
    public static bool op_Inequality(GraphNodeId left, GraphNodeId right);
    public GraphNodeId Add(GraphNodeId identifier);
    private sealed virtual override bool System.IEquatable<Microsoft.VisualStudio.GraphModel.IGraphNodeIdKey>.Equals(IGraphNodeIdKey key);
    private sealed virtual override bool System.IEquatable<Microsoft.VisualStudio.GraphModel.GraphNodeId>.Equals(GraphNodeId key);
    public sealed virtual int CompareTo(object obj);
    public sealed virtual int CompareTo(GraphNodeId other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public static GraphNodeId Parse(string id);
    public static GraphNodeId GetLiteral(string id);
    public static GraphNodeId Parse(string id, bool throwOnFailure);
    public static GraphNodeId Parse(string id, bool throwOnFailure, Func`2<int, GraphNodeId> resolver);
    private static bool ParseValue(Char[] parseBuffer, Char[] workingBuffer, Int32& position, Object& value, bool throwOnFailure, Func`2<int, GraphNodeId> resolver);
    private static bool ParseAliasedIdentifier(Char[] parseBuffer, Char[] workingBuffer, Int32& position, GraphNodeId& identifier, bool throwOnFailure, Func`2<int, GraphNodeId> resolver);
    private static bool ParseEmbedded(Char[] parseBuffer, Char[] workingBuffer, Int32& position, GraphNodeIdCollection& value, bool throwOnFailure, Func`2<int, GraphNodeId> resolver);
    private static bool ParseGraphNodeIdPart(Char[] parseBuffer, Char[] workingBuffer, Int32& position, GraphNodeId& value, bool throwOnFailure, Func`2<int, GraphNodeId> resolver);
    private static bool ParseNameValuePair(Char[] parseBuffer, Char[] workingBuffer, Int32& position, GraphNodeId& value, bool throwOnFailure, Func`2<int, GraphNodeId> resolver);
    private static bool ParseNameString(Char[] parseBuffer, Int32& position, String& elementName, bool throwOnFailure);
    private static bool ParseNameValueValue(Char[] parseBuffer, Char[] workingBuffer, Int32& position, string elementName, GraphNodeId& value, bool throwOnFailure, Func`2<int, GraphNodeId> resolver);
    private static bool ParseCommaSeparatedList(Char[] parseBuffer, Char[] workingBuffer, Int32& position, GraphNodeIdCollection& value, bool throwOnFailure, Func`2<int, GraphNodeId> resolver);
    private static bool AdvanceToEndOfLiteral(Char[] parseBuffer, Char[] workingString, Int32& position, Int32& workingPosition, bool throwOnFailure);
    private static bool NextNonWhitespace(Char[] parseBuffer, Int32& position, bool throwIfEol);
    private static void AdvanceWhiteSpace(Char[] id, Int32& position);
}
[DefaultMemberAttribute("Item")]
public class Microsoft.VisualStudio.GraphModel.GraphNodeIdCollection : object {
    private GraphNodeId[] _array;
    [CompilerGeneratedAttribute]
private bool <HomogeneousElements>k__BackingField;
    private int _hashCode;
    public bool HomogeneousElements { get; private set; }
    public GraphNodeId Item { get; }
    public int Length { get; }
    public GraphNodeIdCollection(bool homogeneousItems, GraphNodeId[] array);
    [CompilerGeneratedAttribute]
public bool get_HomogeneousElements();
    [CompilerGeneratedAttribute]
private void set_HomogeneousElements(bool value);
    public sealed virtual int CompareTo(object obj);
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    private sealed virtual override IEnumerator`1<GraphNodeId> System.Collections.Generic.IEnumerable<Microsoft.VisualStudio.GraphModel.GraphNodeId>.GetEnumerator();
    public GraphNodeId get_Item(int index);
    public int get_Length();
    public T GetValueByName(GraphNodeIdName name);
    public virtual int GetHashCode();
    public virtual bool Equals(object obj);
    internal void AppendToString(StringBuilder sb, GraphNodeIdFormatter formatter, GraphNodeId parent, GetAliasedIdentifier aliaser);
    internal void AppendToString(StringBuilder sb, GraphNodeId parent, GetAliasedIdentifier aliaser);
    public virtual string ToString();
    internal GraphNodeIdCollection MergeArray(GraphNodeIdCollection array2);
    internal GraphNodeIdCollection AddItemToArray(GraphNodeId item, bool front);
}
public class Microsoft.VisualStudio.GraphModel.GraphNodeIdConverter : ExpandableObjectConverter {
    public virtual bool CanConvertTo(ITypeDescriptorContext context, Type destinationType);
    public virtual bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType);
    public virtual object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType);
    public virtual object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value);
}
internal class Microsoft.VisualStudio.GraphModel.GraphNodeIdEditorConverter : GraphNodeIdConverter {
    public virtual bool GetPropertiesSupported(ITypeDescriptorContext context);
    public virtual PropertyDescriptorCollection GetProperties(ITypeDescriptorContext context, object value, Attribute[] attributes);
}
internal abstract class Microsoft.VisualStudio.GraphModel.GraphNodeIdFormatter : object {
    internal static GraphNodeIdFormatter NameValue;
    internal static GraphNodeIdFormatter NameValueNoEscape;
    internal static GraphNodeIdFormatter None;
    internal static GraphNodeIdFormatter CommaSeparatedList;
    internal static GraphNodeIdFormatter SpaceSeparatedList;
    internal static GraphNodeIdFormatter Nested;
    public bool ShouldAppendName { get; }
    public bool ShouldEscapeValue { get; }
    private static GraphNodeIdFormatter();
    public virtual void AppendPrefix(StringBuilder buffer);
    public virtual void AppendNameValueSeparator(StringBuilder buffer);
    public virtual void AppendListSeparator(StringBuilder buffer);
    public virtual void AppendSuffix(StringBuilder buffer);
    public virtual bool get_ShouldAppendName();
    public virtual bool get_ShouldEscapeValue();
    private static void DoEscape(StringBuilder sb, int position, int length);
    internal static void EscapeIfNeeded(StringBuilder sb, int position);
}
internal class Microsoft.VisualStudio.GraphModel.GraphNodeIdKey : ValueType {
    private GraphNodeIdName _name;
    private object _value;
    private int _hash;
    public GraphNodeIdName Name { get; }
    public object Value { get; }
    internal GraphNodeIdKey(GraphNodeIdName name, object value);
    public sealed virtual GraphNodeIdName get_Name();
    public sealed virtual object get_Value();
    public sealed virtual bool Equals(IGraphNodeIdKey other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
public class Microsoft.VisualStudio.GraphModel.GraphNodeIdName : object {
    private static Dictionary`2<string, GraphNodeIdName> _table;
    public static GraphNodeIdName Literal;
    public static GraphNodeIdName Array;
    public static GraphNodeIdName Nested;
    public static GraphNodeIdName Group;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Label>k__BackingField;
    [CompilerGeneratedAttribute]
private Type <ValueType>k__BackingField;
    [CompilerGeneratedAttribute]
private GraphNodeIdFormatter <Formatter>k__BackingField;
    public static IEnumerable`1<GraphNodeIdName> Values { get; }
    public string Name { get; private set; }
    public string Label { get; private set; }
    public Type ValueType { get; private set; }
    internal GraphNodeIdFormatter Formatter { get; private set; }
    private GraphNodeIdName(string name, string label, Type type, GraphNodeIdFormatter formatter);
    private static GraphNodeIdName();
    public static IEnumerable`1<GraphNodeIdName> get_Values();
    public sealed virtual int CompareTo(GraphNodeIdName other);
    public static GraphNodeIdName Get(string name, string label, Type type);
    public static GraphNodeIdName Get(string name, string label, Type type, bool escapeEmbedded);
    internal static GraphNodeIdName Get(string name, string label, Type type, GraphNodeIdFormatter formatter);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
private void set_Name(string value);
    [CompilerGeneratedAttribute]
public string get_Label();
    [CompilerGeneratedAttribute]
private void set_Label(string value);
    [CompilerGeneratedAttribute]
public Type get_ValueType();
    [CompilerGeneratedAttribute]
private void set_ValueType(Type value);
    [CompilerGeneratedAttribute]
internal GraphNodeIdFormatter get_Formatter();
    [CompilerGeneratedAttribute]
private void set_Formatter(GraphNodeIdFormatter value);
    public virtual string ToString();
}
public class Microsoft.VisualStudio.GraphModel.GraphNodeIdPropertyDescriptor : PropertyDescriptor {
    private GraphNodeId _identifier;
    private string _category;
    public string Category { get; }
    public Type ComponentType { get; }
    public TypeConverter Converter { get; }
    public bool IsLocalizable { get; }
    public bool IsReadOnly { get; }
    public Type PropertyType { get; }
    public bool SupportsChangeEvents { get; }
    public GraphNodeIdPropertyDescriptor(GraphNodeId identifier, string name, string category);
    internal static bool IsLiteral(GraphNodeId id);
    public virtual string get_Category();
    public virtual Type get_ComponentType();
    public virtual TypeConverter get_Converter();
    public virtual bool get_IsLocalizable();
    public virtual bool get_IsReadOnly();
    public virtual Type get_PropertyType();
    public virtual bool get_SupportsChangeEvents();
    public virtual bool CanResetValue(object component);
    protected virtual void FillAttributes(IList attributeList);
    public virtual object GetValue(object component);
    public virtual void ResetValue(object component);
    public virtual void SetValue(object component, object value);
    public virtual bool ShouldSerializeValue(object component);
}
[DefaultMemberAttribute("Item")]
public abstract class Microsoft.VisualStudio.GraphModel.GraphObject : object {
    private IPropertyList`1<object> _properties;
    private TransactedHashSet`1<GraphCategory> _categories;
    private Graph _owner;
    private static Dictionary`2<Type, object> _defaults;
    [CompilerGeneratedAttribute]
private PropertyChangedEventHandler PropertyChanged;
    [CompilerGeneratedAttribute]
private EventHandler`1<GraphCategoryChangedEventArgs> CategoryChanged;
    public int PropertyCount { get; }
    public IEnumerable`1<KeyValuePair`2<GraphProperty, object>> Properties { get; }
    public IEnumerable`1<GraphProperty> PropertyKeys { get; }
    public IEnumerable`1<object> PropertyValues { get; }
    public object Item { get; public set; }
    public GraphSchema DocumentSchema { get; }
    public Graph Owner { get; internal set; }
    public IEnumerable`1<GraphCategory> Categories { get; }
    public int CategoryCount { get; }
    public string DescriptiveCategoryLabel { get; }
    public bool IsGroup { get; public set; }
    public Visibility Visibility { get; public set; }
    public bool IsPseudo { get; public set; }
    protected GraphObject(Graph owner);
    private static GraphObject();
    public int get_PropertyCount();
    [IteratorStateMachineAttribute("Microsoft.VisualStudio.GraphModel.GraphObject/<get_Properties>d__5")]
public IEnumerable`1<KeyValuePair`2<GraphProperty, object>> get_Properties();
    [IteratorStateMachineAttribute("Microsoft.VisualStudio.GraphModel.GraphObject/<get_PropertyKeys>d__7")]
public IEnumerable`1<GraphProperty> get_PropertyKeys();
    [IteratorStateMachineAttribute("Microsoft.VisualStudio.GraphModel.GraphObject/<get_PropertyValues>d__9")]
public virtual IEnumerable`1<object> get_PropertyValues();
    public object get_Item(GraphProperty property);
    public void set_Item(GraphProperty property, object value);
    public virtual GraphSchema get_DocumentSchema();
    public sealed virtual Graph get_Owner();
    internal void set_Owner(Graph value);
    protected internal void WrapGraphObject(GraphObject other);
    public T SetValue(GraphProperty property, T value);
    private void SetValue(GraphProperty property, Type type, object value);
    public object SetValue(string propertyId, object value);
    public bool HasLocalValue(GraphProperty property);
    public bool HasValue(GraphProperty property);
    public bool HasValue(string propertyId);
    private GraphCategory FindInheritedProperty(Graph graph, GraphProperty toFind, GraphMetadata& metadata);
    public object GetValue(GraphProperty property);
    public object GetValue(string propertyId);
    private static object GetDefaultValueType(Type type);
    public T GetValue(string propertyId);
    public T GetValue(GraphProperty property);
    public T GetValue(GraphProperty property, Graph owner);
    public T GetValue(GraphProperty property, T defaultValueIfNotFound);
    public string GetValueAsString(GraphProperty property, CultureInfo culture);
    public T GetValue(GraphProperty property, Graph owner, GraphCategory& category);
    protected internal virtual object GetSchemaValue(GraphProperty graphProperty);
    public object ClearValue(GraphProperty graphProperty);
    public T ClearValue(GraphProperty property);
    public bool AddCategory(GraphCategory category);
    public GraphCategory RemoveCategory(GraphCategory category);
    public bool HasCategory(string category);
    public GraphCategory GetDerivedCategory(string parentCategory);
    public GraphCategory GetDerivedCategory(GraphCategory parentCategory);
    public bool HasCategory(GraphCategory category);
    public bool HasCategory(IEnumerable`1<GraphCategory> categories);
    public bool HasCategoryInSet(HashSet`1<GraphCategory> categorySet, GraphCategoryMatchOption matchOption);
    public IEnumerable`1<GraphCategory> get_Categories();
    public int get_CategoryCount();
    public string get_DescriptiveCategoryLabel();
    public void ClearCategories();
    internal virtual bool Merge(GraphObject other);
    public bool CopyProperties(GraphObject other);
    public bool CopyCategories(GraphObject other);
    public GraphNode AsNode();
    public virtual bool get_IsGroup();
    public virtual void set_IsGroup(bool value);
    public Visibility get_Visibility();
    public void set_Visibility(Visibility value);
    public virtual bool get_IsPseudo();
    public virtual void set_IsPseudo(bool value);
    public sealed virtual DynamicMetaObject GetMetaObject(Expression parameter);
    [CompilerGeneratedAttribute]
public sealed virtual void add_PropertyChanged(PropertyChangedEventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_PropertyChanged(PropertyChangedEventHandler value);
    public virtual void OnPropertyChanged(GraphProperty property);
    public virtual void OnPropertyChanged(string name);
    [CompilerGeneratedAttribute]
public void add_CategoryChanged(EventHandler`1<GraphCategoryChangedEventArgs> value);
    [CompilerGeneratedAttribute]
public void remove_CategoryChanged(EventHandler`1<GraphCategoryChangedEventArgs> value);
    protected virtual void OnCategoryChanged(GraphCategory category, GraphCategoryChangeType changeType);
    internal void RaiseCategoryChanged(GraphCategory category, GraphCategoryChangeType changeType);
    private static HashSet`1<GraphCategory> FindAllAncestorCategories(HashSet`1<GraphCategory> categorySet);
}
public class Microsoft.VisualStudio.GraphModel.GraphObjectChangedEventArgs : EventArgs {
    private GraphObject _changed;
    public GraphObject Changed { get; }
    public GraphObjectChangedEventArgs(GraphObject changed);
    public GraphObject get_Changed();
}
[DefaultMemberAttribute("Item")]
public class Microsoft.VisualStudio.GraphModel.GraphPathSerializationDictionary : object {
    private bool _addedDefaultPaths;
    private Dictionary`2<string, string> _map;
    [CompilerGeneratedAttribute]
private EventHandler CommonPathsAdded;
    public bool IsReadOnly { get; }
    public ICollection`1<string> Keys { get; }
    public ICollection`1<string> Values { get; }
    public string Item { get; public set; }
    public IEnumerable`1<string> Names { get; }
    public int Count { get; }
    public GraphPathSerializationDictionary(GraphPathSerializationDictionary other);
    [CompilerGeneratedAttribute]
public void add_CommonPathsAdded(EventHandler value);
    [CompilerGeneratedAttribute]
public void remove_CommonPathsAdded(EventHandler value);
    public sealed virtual IEnumerator`1<KeyValuePair`2<string, string>> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    public sealed virtual bool get_IsReadOnly();
    public sealed virtual void CopyTo(KeyValuePair`2[] array, int arrayIndex);
    public sealed virtual bool Contains(KeyValuePair`2<string, string> item);
    public sealed virtual void Clear();
    public sealed virtual ICollection`1<string> get_Keys();
    public sealed virtual ICollection`1<string> get_Values();
    public sealed virtual string get_Item(string key);
    public sealed virtual void set_Item(string key, string value);
    public sealed virtual bool TryGetValue(string key, String& value);
    public sealed virtual bool ContainsKey(string key);
    public sealed virtual void Add(KeyValuePair`2<string, string> item);
    public sealed virtual void Add(string key, string value);
    internal void Add(GraphPathSerializationDictionary other);
    public sealed virtual bool Remove(KeyValuePair`2<string, string> item);
    public sealed virtual bool Remove(string key);
    public string GetPath(string name);
    public IEnumerable`1<string> get_Names();
    public sealed virtual int get_Count();
    public string LookupName(string value);
    public void AddDefaultPaths();
    private static string GetEnvironmentFolderPath(SpecialFolder folder);
}
public class Microsoft.VisualStudio.GraphModel.GraphPathSerializer : object {
    private GraphPathSerializationDictionary _used;
    private GraphPathSerializationDictionary _augmented;
    private Dictionary`2<string, string> _uris;
    private StringBuilder _builder;
    private MultiTokenReplacement _multiTokenReplacement;
    private Char[] _special;
    private int _smallestPathLength;
    public GraphPathSerializationDictionary UsedPaths { get; }
    public GraphPathSerializer(GraphPathSerializationDictionary paths);
    public GraphPathSerializationDictionary get_UsedPaths();
    public void Add(GraphPathSerializationDictionary other);
    internal void Add(string key, string value);
    private void AddInternal(string key, string value);
    public string Deserialize(string value);
    private void cachePathSmallestLengthIfSmallest(string pathValue);
    public string SerializeWithSubstitution(string text);
    public string Serialize(string text);
    private string InternalSerialize(string text, bool applySubstitution);
}
[TypeConverterAttribute("Microsoft.VisualStudio.GraphModel.GraphPropertyTypeConverter")]
public class Microsoft.VisualStudio.GraphModel.GraphProperty : GraphMetadataContainer {
    private string _id;
    private Type _dataType;
    public string Id { get; }
    public Type DataType { get; }
    internal GraphProperty(string id, Type dataType, Func`1<GraphMetadata> callback);
    public string get_Id();
    public string GetLabelOrId(Graph graph);
    public Type get_DataType();
    public virtual int GetHashCode();
    public virtual bool Equals(object obj);
    public virtual string ToString();
}
public class Microsoft.VisualStudio.GraphModel.GraphPropertyCollection : object {
    private Dictionary`2<string, GraphProperty> _graphProperties;
    [CompilerGeneratedAttribute]
private GraphSchema <Schema>k__BackingField;
    public int Count { get; }
    public bool IsReadOnly { get; }
    public Dictionary`2<string, GraphProperty> Properties { get; }
    public GraphSchema Schema { get; private set; }
    public GraphPropertyCollection(GraphSchema schema);
    private sealed virtual override IEnumerator`1<GraphProperty> System.Collections.Generic.IEnumerable<Microsoft.VisualStudio.GraphModel.GraphProperty>.GetEnumerator();
    public sealed virtual IEnumerator GetEnumerator();
    public sealed virtual int get_Count();
    public sealed virtual bool get_IsReadOnly();
    public sealed virtual void Add(GraphProperty item);
    public sealed virtual void Clear();
    public sealed virtual bool Contains(GraphProperty item);
    public sealed virtual void CopyTo(GraphProperty[] array, int arrayIndex);
    public sealed virtual bool Remove(GraphProperty item);
    public GraphProperty AddNewProperty(string id, Type dataType);
    public GraphProperty AddNewProperty(string id, Type dataType, Func`1<GraphMetadata> callback);
    internal GraphProperty GetPropertyPrivate(string id);
    [IteratorStateMachineAttribute("Microsoft.VisualStudio.GraphModel.GraphPropertyCollection/<GetPropertiesPrivate>d__16")]
internal IEnumerable`1<GraphProperty> GetPropertiesPrivate(IEnumerable`1<string> idList);
    public Dictionary`2<string, GraphProperty> get_Properties();
    [CompilerGeneratedAttribute]
public GraphSchema get_Schema();
    [CompilerGeneratedAttribute]
private void set_Schema(GraphSchema value);
    private void OnCollectionChanged();
}
internal class Microsoft.VisualStudio.GraphModel.GraphPropertyTypeConverter : TypeConverter {
    public virtual bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType);
    public virtual object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value);
    public virtual object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType);
}
[AttributeUsageAttribute("4")]
[MetadataAttributeAttribute]
public class Microsoft.VisualStudio.GraphModel.GraphProviderAttribute : ExportAttribute {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <IntellisenseType>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ProjectKind>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ProjectCapability>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ActiveUIContext>k__BackingField;
    public string Name { get; public set; }
    public string IntellisenseType { get; public set; }
    public string ProjectKind { get; public set; }
    public string ProjectCapability { get; public set; }
    public string ActiveUIContext { get; public set; }
    public GraphProviderAttribute(Type contractType);
    [CompilerGeneratedAttribute]
public sealed virtual string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_IntellisenseType();
    [CompilerGeneratedAttribute]
public void set_IntellisenseType(string value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_ProjectKind();
    [CompilerGeneratedAttribute]
public void set_ProjectKind(string value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_ProjectCapability();
    [CompilerGeneratedAttribute]
public void set_ProjectCapability(string value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_ActiveUIContext();
    [CompilerGeneratedAttribute]
public void set_ActiveUIContext(string value);
}
public class Microsoft.VisualStudio.GraphModel.GraphSchema : object {
    [CompilerGeneratedAttribute]
private GraphCategoryCollection <Categories>k__BackingField;
    [CompilerGeneratedAttribute]
private GraphPropertyCollection <Properties>k__BackingField;
    [CompilerGeneratedAttribute]
private Graph <Owner>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    internal Dictionary`2<string, GraphSchema> _schemas;
    [CompilerGeneratedAttribute]
private int <VersionNumber>k__BackingField;
    private WeakEventDelegateCollection`1<EventHandler> _versionChanged;
    private Dictionary`2<GraphMetadataContainer, Action`1<GraphMetadata>> _metadataOverrides;
    public GraphCategoryCollection Categories { get; private set; }
    public GraphPropertyCollection Properties { get; private set; }
    public Graph Owner { get; private set; }
    public string Name { get; private set; }
    public bool IsDocumentSchema { get; }
    internal int VersionNumber { get; private set; }
    public IEnumerable`1<GraphSchema> Schemas { get; }
    public GraphSchema(Graph owner, string name);
    public GraphSchema(string name);
    [CompilerGeneratedAttribute]
public GraphCategoryCollection get_Categories();
    [CompilerGeneratedAttribute]
private void set_Categories(GraphCategoryCollection value);
    [CompilerGeneratedAttribute]
public GraphPropertyCollection get_Properties();
    [CompilerGeneratedAttribute]
private void set_Properties(GraphPropertyCollection value);
    [CompilerGeneratedAttribute]
public Graph get_Owner();
    [CompilerGeneratedAttribute]
private void set_Owner(Graph value);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
private void set_Name(string value);
    public bool get_IsDocumentSchema();
    [CompilerGeneratedAttribute]
internal int get_VersionNumber();
    [CompilerGeneratedAttribute]
private void set_VersionNumber(int value);
    internal void add_VersionChanged(EventHandler value);
    internal void remove_VersionChanged(EventHandler value);
    public void AddSchema(GraphSchema schema);
    public bool Contains(GraphSchema schema);
    public IEnumerable`1<GraphSchema> get_Schemas();
    public GraphCategory FindCategory(string id);
    internal bool VisitSchemas(Predicate`1<GraphSchema> terminationCondition);
    public GraphCategory FindCategoryByLabel(string label);
    public IEnumerable`1<GraphCategory> FindCategories(IEnumerable`1<string> idList);
    public GraphProperty FindProperty(string id);
    public GraphProperty FindPropertyByLabel(string label);
    public IEnumerable`1<GraphProperty> FindProperties(IEnumerable`1<string> idList);
    public virtual string ToString();
    private void OnChildVersionChanged(object sender, EventArgs args);
    internal void UpdateVersion();
    public void OverrideMetadata(GraphMetadataContainer container, Action`1<GraphMetadata> additionalSetters);
    internal Action`1<GraphMetadata> GetMetadataOverride(GraphMetadataContainer container);
}
public enum Microsoft.VisualStudio.GraphModel.GraphSearchDirection : Enum {
    public int value__;
    public static GraphSearchDirection Source;
    public static GraphSearchDirection Target;
}
public enum Microsoft.VisualStudio.GraphModel.GraphSearchOption : Enum {
    public int value__;
    public static GraphSearchOption LinkCategory;
    public static GraphSearchOption NodeCategory;
}
public class Microsoft.VisualStudio.GraphModel.GraphSerializationErrorEventArgs : EventArgs {
    private Exception _error;
    public Exception Error { get; }
    public GraphSerializationErrorEventArgs(Exception error);
    public Exception get_Error();
}
public class Microsoft.VisualStudio.GraphModel.GraphSerializationSettings : object {
    [CompilerGeneratedAttribute]
private bool <Sort>k__BackingField;
    [CompilerGeneratedAttribute]
private EventHandler`1<GraphSerializationErrorEventArgs> ErrorHandler;
    [CompilerGeneratedAttribute]
private Func`2<GraphNodeId, GraphNodeId> <GraphNodeIdMapper>k__BackingField;
    public bool Sort { get; public set; }
    public Func`2<GraphNodeId, GraphNodeId> GraphNodeIdMapper { get; public set; }
    [CompilerGeneratedAttribute]
public bool get_Sort();
    [CompilerGeneratedAttribute]
public void set_Sort(bool value);
    [CompilerGeneratedAttribute]
public void add_ErrorHandler(EventHandler`1<GraphSerializationErrorEventArgs> value);
    [CompilerGeneratedAttribute]
public void remove_ErrorHandler(EventHandler`1<GraphSerializationErrorEventArgs> value);
    [CompilerGeneratedAttribute]
public Func`2<GraphNodeId, GraphNodeId> get_GraphNodeIdMapper();
    [CompilerGeneratedAttribute]
public void set_GraphNodeIdMapper(Func`2<GraphNodeId, GraphNodeId> value);
    internal void OnError(Exception error);
}
internal class Microsoft.VisualStudio.GraphModel.GraphSerializer : object {
    private Graph _graph;
    private Dictionary`2<GraphCategory, string> _graphCategoryParents;
    private Dictionary`2<string, bool> _linkExceptions;
    private Dictionary`2<string, bool> _nodeExceptions;
    private Dictionary`2<string, bool> _metadataExceptions;
    private Dictionary`2<string, bool> _setterExceptions;
    private HashSet`1<GraphCategory> _usedCategories;
    private HashSet`1<GraphProperty> _usedProperties;
    private GraphSerializationSettings _settings;
    [CompilerGeneratedAttribute]
private EventHandler`1<GraphDeserializationProgressEventArgs> <ProgressHandler>k__BackingField;
    private GraphDeserializationProgressEventArgs _currentProgress;
    private StringBuilder _working;
    [CompilerGeneratedAttribute]
private int <GraphNodeIdAliasingThreshold>k__BackingField;
    internal static int MinimumProgressReportInterval;
    internal static int MaximumProgressReportCount;
    private Dictionary`2<GraphNodeId, GraphNodeId> _mappedIds;
    public static string Xmlns;
    internal static XNamespace _namespace;
    internal static XName ElementDirectedGraph;
    internal static XName ElementPaths;
    internal static XName ElementPath;
    internal static XName ElementProperties;
    internal static XName ElementProperty;
    internal static XName ElementCategories;
    internal static XName ElementCategory;
    internal static XName ElementNodes;
    internal static XName ElementNode;
    internal static XName ElementLinks;
    internal static XName ElementLink;
    internal static XName ElementStyles;
    internal static XName ElementStyle;
    internal static XName ElementCondition;
    internal static XName ElementSetter;
    internal static XName AttributeTargetType;
    internal static XName AttributePropertyName;
    internal static XName ElementIdentifiers;
    internal static XName ElementIdentifier;
    internal static XName ElementGraphNodeIdNames;
    internal static XName ElementGraphNodeIdName;
    private static GraphPathSerializationDictionary _paths;
    private GraphPathSerializer _pathSub;
    private Dictionary`2<string, bool> _styleAttributeExceptions;
    private int _lastProgressReport;
    private int _progressReportInterval;
    private Dictionary`2<GraphNodeId, GraphSerializedIdentifier> _serializedIdentifiers;
    private int _lastIdentifier;
    private HashSet`1<GraphNodeIdName> _usedGraphNodeIdNames;
    public GraphSerializationSettings Settings { get; }
    internal EventHandler`1<GraphDeserializationProgressEventArgs> ProgressHandler { get; internal set; }
    private int GraphNodeIdAliasingThreshold { get; private set; }
    public static GraphPathSerializationDictionary CommonPaths { get; }
    public Func`2<GraphNodeId, GraphNodeId> GraphNodeIdMapper { get; }
    public GraphSerializer(GraphSerializationSettings settings);
    public GraphSerializer(Graph graph);
    private static GraphSerializer();
    public GraphSerializationSettings get_Settings();
    [CompilerGeneratedAttribute]
internal EventHandler`1<GraphDeserializationProgressEventArgs> get_ProgressHandler();
    [CompilerGeneratedAttribute]
internal void set_ProgressHandler(EventHandler`1<GraphDeserializationProgressEventArgs> value);
    [CompilerGeneratedAttribute]
private int get_GraphNodeIdAliasingThreshold();
    [CompilerGeneratedAttribute]
private void set_GraphNodeIdAliasingThreshold(int value);
    public void AddSchemas(GraphSchema[] schemas);
    public static GraphPathSerializationDictionary get_CommonPaths();
    public Func`2<GraphNodeId, GraphNodeId> get_GraphNodeIdMapper();
    private GraphNodeId CachedGraphNodeIdMapper(GraphNodeId id);
    public static Graph Load(string fileName, EventHandler`1<GraphDeserializationProgressEventArgs> progressHandler, GraphSchema[] schemas);
    public static Graph Load(Stream stream, EventHandler`1<GraphDeserializationProgressEventArgs> progressHandler, GraphSchema[] schemas);
    public static Graph Load(TextReader reader, EventHandler`1<GraphDeserializationProgressEventArgs> progressHandler, GraphSchema[] schemas);
    [ObsoleteAttribute]
public static Graph Load(XmlReader reader, EventHandler`1<GraphDeserializationProgressEventArgs> progressHandler, GraphSchema[] schemas);
    private static Graph LoadFromXmlReader(XmlReader reader, EventHandler`1<GraphDeserializationProgressEventArgs> progressHandler, GraphSchema[] schemas);
    public static Graph Load(XDocument doc, EventHandler`1<GraphDeserializationProgressEventArgs> progressHandler, GraphSchema[] schemas);
    public static Graph Load(XDocument doc, Graph graph, EventHandler`1<GraphDeserializationProgressEventArgs> progressHandler, GraphSchema[] schemas);
    public Graph Deserialize(XDocument doc);
    private Graph Deserialize(XDocument doc, string baseUri);
    private void DeserializePaths(XElement paths);
    private void DeserializeNodes(XElement nodes);
    private void DeserializeNode(XElement element);
    private void DeserializeAttributes(GraphObject container, XElement element, IDictionary`2<string, bool> exceptions);
    private void DeserializeLinks(XElement links);
    private void DeserializeLink(XElement element);
    private void DeserializeCategoryRefs(GraphObject container, XElement element);
    private GraphProperty GetOrRegisterProperty(string id, Type dataType);
    private GraphCategory GetOrRegisterCategory(string id);
    private void FixupCategoryParents();
    private void DeserializeCategories(XElement element);
    private void DeserializeProperties(XElement element);
    private void DeserializeProperty(XElement element);
    private void DeserializePropertyAttributes(XElement element);
    private void DeserializeGraphNodeIdNames(XElement element);
    private static void DeserializeGraphNodeIdName(XElement element);
    private void DeserializeCategory(XElement element);
    internal static string GetCaptionOrLabelAttribute(XElement element);
    internal static string GetAttribute(XElement element, string name);
    internal void DeserializeStyles(XElement styles);
    internal void DeserializeStyle(XElement style);
    internal void DeserializeCondition(GraphConditionalStyle style, XElement condition);
    internal void DeserializeSetter(GraphConditionalStyle style, XElement setter);
    private void InitializeProgress(XDocument doc);
    private void SetProgressMessage(string msg);
    private void IncrementProgress();
    private void SendProgress();
    internal static XmlWriterSettings GetWritterSettings(bool omitXmlDeclaration);
    internal static XmlReaderSettings GetReaderSettings();
    public static void Save(Graph graph, string fileName);
    public static void Save(Graph graph, string fileName, XmlWriterSettings writerSettings);
    public static void Save(Graph graph, string fileName, GraphSerializationSettings settings);
    public static void Save(Graph graph, string fileName, GraphSerializationSettings settings, XmlWriterSettings writerSettings);
    public static void Save(Graph graph, Stream outputStream);
    public static void Save(Graph graph, Stream outputStream, XmlWriterSettings writerSettings);
    public static void Save(Graph graph, Stream outputStream, GraphSerializationSettings settings);
    public static void Save(Graph graph, Stream outputStream, GraphSerializationSettings settings, XmlWriterSettings writerSettings);
    public static void Save(Graph graph, TextWriter textWriter);
    public static void Save(Graph graph, TextWriter textWriter, XmlWriterSettings writerSettings);
    public static void Save(Graph graph, TextWriter textWriter, GraphSerializationSettings settings);
    public static void Save(Graph graph, TextWriter textWriter, GraphSerializationSettings settings, XmlWriterSettings writerSettings);
    public static void Save(Graph graph, TextWriter textWriter, int graphNodeIdAliasThreshold);
    public static void Save(Graph graph, TextWriter textWriter, int graphNodeIdAliasThreshold, XmlWriterSettings writerSettings);
    private static XmlWriterSettings PickXmlWriterSettings(XmlWriterSettings writerSettings, XmlWriterSettings defaultSetttings);
    [ObsoleteAttribute]
public static void Save(Graph graph, XmlWriter xmlWriter);
    private static void SaveWithXmlWriter(Graph graph, XmlWriter xmlWriter, GraphSerializationSettings settings);
    private static void SaveWithXmlWriter(Graph graph, XmlWriter xmlWriter, int graphNodeIdAliasThreshold);
    [ObsoleteAttribute]
public void Serialize(Graph graph, XmlWriter writer);
    internal void SerializeUsingXmlWriter(Graph graph, XmlWriter writer);
    private void SerializePaths(XmlWriter writer);
    private static string GetQIString(StringBuilder sb, Func`2<GraphNodeId, GraphNodeId> mapper, Dictionary`2<GraphNodeId, GraphSerializedIdentifier> serializedIdentifiers, GraphNodeId identifier);
    public string GetGraphNodeIdString(GraphNodeId identifier);
    private void PrepareSerializedIdentifierTable();
    private void StoreSerializedIdentifier(GraphNodeId id, Int32& nextOrder);
    private void SerializeGraphNodeIds(XmlWriter writer);
    private void DeserializeIdentifiers(XElement identifiers);
    private string SubstituteAliases(GraphNodeId parent, GraphNodeId child);
    private string SubstituteChildAliases(GraphNodeId parent, GraphNodeId child);
    private string SubstituteCommonPaths(GraphNodeId parent, GraphNodeId child);
    private void SerializeNodes(XmlWriter writer);
    private void SerializeNode(GraphNode n, XmlWriter writer);
    private void SerializeAttributes(GraphObject graphObject, XmlWriter writer, String[] exclude);
    private void SerializeAttributes(GraphObject graphObject, XmlWriter writer, HashSet`1<string> current);
    private void SerializeLinks(XmlWriter writer);
    private void SerializeLink(GraphLink link, XmlWriter writer);
    private void SerializeFirstCategoryRef(GraphObject container, XmlWriter writer);
    private void SerializeCategoryRefs(GraphObject container, XmlWriter writer);
    private void SerializeCategories(XmlWriter writer);
    private void SerializeProperties(XmlWriter writer);
    private void SerializeGraphNodeIdNames(XmlWriter writer);
    private void SerializeCategory(Graph graph, GraphCategory category, XmlWriter writer);
    private void SerializeProperty(GraphProperty property, XmlWriter writer);
    private void SerializeGraphNodeIdName(GraphNodeIdName name, XmlWriter writer);
    private void SerializeStyles(XmlWriter writer);
    private void FindStyleProperties();
    private void FindStyleProperties(GraphConditionalStyle style);
    private void FindUsedProperties(GraphObject graphObject);
    private void SerializeStyle(GraphConditionalStyle style, XmlWriter writer);
    private void SerializeCondition(GraphCondition condition, XmlWriter writer);
    private void SerializeSetter(GraphSetter setter, XmlWriter writer);
    private string WriteAttributeStringWithSubstitution(XmlWriter writer, string name, string value);
    private void WriteAttributeString(XmlWriter writer, string name, string value);
}
public class Microsoft.VisualStudio.GraphModel.GraphTransactionCanceledException : Exception {
    [CompilerGeneratedAttribute]
private bool <CanceledByUser>k__BackingField;
    public bool CanceledByUser { get; public set; }
    public GraphTransactionCanceledException(string message);
    public GraphTransactionCanceledException(string message, Exception inner);
    [ObsoleteAttribute]
protected GraphTransactionCanceledException(SerializationInfo info, StreamingContext context);
    [CompilerGeneratedAttribute]
public bool get_CanceledByUser();
    [CompilerGeneratedAttribute]
public void set_CanceledByUser(bool value);
    public virtual void GetObjectData(SerializationInfo info, StreamingContext context);
}
internal class Microsoft.VisualStudio.GraphModel.GraphTransactionEnlistment : object {
    private Dictionary`2<IEnlistableObject, IIsolatorObject> _enlistableObjectsAndIsolators;
    private List`1<KeyValuePair`2<IEnlistableObject, IIsolatorObject>> _preparedEnlistableObjectsAndIsolators;
    private static Dictionary`2<Transaction, GraphTransactionEnlistment> _enlistments;
    private static WeakEventDelegateCollection`1<EventHandler`1<GraphTransactionEnlistmentEventArgs>> _preparingEnlistmentListeners;
    private static WeakEventDelegateCollection`1<EventHandler`1<GraphTransactionEnlistmentEventArgs>> _commitChangesListeners;
    [CompilerGeneratedAttribute]
private Dictionary`2<object, object> <Properties>k__BackingField;
    internal static int _numberOfActiveEnlistments;
    internal Transaction _enlistedTransaction;
    public Dictionary`2<object, object> Properties { get; private set; }
    public GraphTransactionScopeOptions Options { get; public set; }
    private GraphTransactionEnlistment(Transaction transaction);
    private static GraphTransactionEnlistment();
    internal static void add_PreparingEnlistment(EventHandler`1<GraphTransactionEnlistmentEventArgs> value);
    internal static void remove_PreparingEnlistment(EventHandler`1<GraphTransactionEnlistmentEventArgs> value);
    internal static void add_CommitChanges(EventHandler`1<GraphTransactionEnlistmentEventArgs> value);
    internal static void remove_CommitChanges(EventHandler`1<GraphTransactionEnlistmentEventArgs> value);
    private void FireGraphCommitListeners(GraphTransactionEnlistmentEventArgs args);
    private static void FireGraphPrepareListeners(GraphTransactionEnlistmentEventArgs args);
    [CompilerGeneratedAttribute]
public sealed virtual Dictionary`2<object, object> get_Properties();
    [CompilerGeneratedAttribute]
private void set_Properties(Dictionary`2<object, object> value);
    private void Dispose(bool disposing);
    public sealed virtual void Dispose();
    internal static object TryGetIsolatorForRead(IEnlistableObject key);
    public GraphTransactionScopeOptions get_Options();
    public void set_Options(GraphTransactionScopeOptions value);
    internal TIsolator GetIsolator(IEnlistableObject key);
    internal TIsolator GetOrCreateIsolator(IEnlistableObject key);
    public static GraphTransactionEnlistment GetOrCreateEnlistment(Transaction transaction, bool createNew);
    private void UnlockEnlistment();
    private void ClearEnlistment();
    private sealed virtual override void System.Transactions.IEnlistmentNotification.Commit(Enlistment enlistment);
    private sealed virtual override void System.Transactions.IEnlistmentNotification.InDoubt(Enlistment enlistment);
    private sealed virtual override void System.Transactions.IEnlistmentNotification.Prepare(PreparingEnlistment preparingEnlistment);
    private sealed virtual override void System.Transactions.IEnlistmentNotification.Rollback(Enlistment enlistment);
    internal void BeforeCommit();
    internal void NotifyGraphs(Action`1<Graph> action);
    private static Graph GetOwningGraph(IEnlistableObject key);
}
internal class Microsoft.VisualStudio.GraphModel.GraphTransactionEnlistmentEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
private List`1<KeyValuePair`2<IEnlistableObject, IIsolatorObject>> <EnlistableObjectsAndIsolators>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Cancel>k__BackingField;
    [CompilerGeneratedAttribute]
private Transaction <Transaction>k__BackingField;
    [CompilerGeneratedAttribute]
private GraphTransactionEnlistment <Enlistment>k__BackingField;
    internal List`1<KeyValuePair`2<IEnlistableObject, IIsolatorObject>> EnlistableObjectsAndIsolators { get; private set; }
    internal bool Cancel { get; internal set; }
    internal Transaction Transaction { get; private set; }
    public GraphTransactionEnlistment Enlistment { get; private set; }
    internal GraphTransactionEnlistmentEventArgs(List`1<KeyValuePair`2<IEnlistableObject, IIsolatorObject>> enlistableObjectsAndIsolators, Transaction transaction, GraphTransactionEnlistment enlistment);
    [CompilerGeneratedAttribute]
internal List`1<KeyValuePair`2<IEnlistableObject, IIsolatorObject>> get_EnlistableObjectsAndIsolators();
    [CompilerGeneratedAttribute]
private void set_EnlistableObjectsAndIsolators(List`1<KeyValuePair`2<IEnlistableObject, IIsolatorObject>> value);
    [CompilerGeneratedAttribute]
internal bool get_Cancel();
    [CompilerGeneratedAttribute]
internal void set_Cancel(bool value);
    [CompilerGeneratedAttribute]
internal Transaction get_Transaction();
    [CompilerGeneratedAttribute]
private void set_Transaction(Transaction value);
    [CompilerGeneratedAttribute]
public GraphTransactionEnlistment get_Enlistment();
    [CompilerGeneratedAttribute]
private void set_Enlistment(GraphTransactionEnlistment value);
    public GraphTransactionEnlistmentEventArgs Subset(Graph g);
    public Dictionary`2<Graph, GraphTransactionEnlistmentEventArgs> GetSubSets();
}
public class Microsoft.VisualStudio.GraphModel.GraphTransactionScope : object {
    private bool _setComplete;
    internal TransactionScope _scope;
    internal ThreadData _scopeThreadData;
    internal static ThreadData _lastAccessedThreadData;
    [ThreadStaticAttribute]
internal static ThreadData _tlsThreadData;
    private static TimeSpan _timeout;
    private Nullable`1<GraphTransactionScopeOptions> _previousOptions;
    protected Dictionary`2<string, object> ExtraData { get; }
    public Dictionary`2<object, object> ScopeProperties { get; }
    internal static int ScopeDepth { get; }
    public GraphTransactionScope(string id);
    public GraphTransactionScope(GraphTransactionScopeOptions options);
    public GraphTransactionScope(Transaction transaction);
    private static GraphTransactionScope();
    protected Dictionary`2<string, object> get_ExtraData();
    internal GraphTransactionEnlistment GetOrCreateEnlistment();
    public Dictionary`2<object, object> get_ScopeProperties();
    internal static int get_ScopeDepth();
    public sealed virtual void Dispose();
    protected virtual void Dispose(bool disposing);
    public void Complete();
}
[FlagsAttribute]
public enum Microsoft.VisualStudio.GraphModel.GraphTransactionScopeOptions : Enum {
    public int value__;
    public static GraphTransactionScopeOptions None;
    public static GraphTransactionScopeOptions DisableEvents;
}
public abstract class Microsoft.VisualStudio.GraphModel.GraphUndoManager : object {
    private MergeDirection _mergeDirection;
    protected IEnumerable`1<IOleUndoUnit> UndoStack { get; }
    protected IEnumerable`1<IOleUndoUnit> RedoStack { get; }
    protected abstract virtual IEnumerable`1<IOleUndoUnit> get_UndoStack();
    protected abstract virtual IEnumerable`1<IOleUndoUnit> get_RedoStack();
    public abstract virtual void Add(IOleUndoUnit unit);
    public bool AddOrMerge(IMergeableUndo undo);
}
public class Microsoft.VisualStudio.GraphModel.GraphUndoUnit : object {
    private Graph _graph;
    private string _undoDescription;
    private GraphTransactionEnlistment _enlistment;
    private bool _redo;
    private List`1<IMergeableUndo> _merged;
    private List`1<GraphNode> _addedNodes;
    private List`1<GraphLink> _addedLinks;
    private List`1<GraphConditionalStyle> _addedStyles;
    private List`1<GraphCondition> _addedConditions;
    private List`1<GraphSetter> _addedSetters;
    private List`1<GraphNode> _removedNodes;
    private List`1<GraphLink> _removedLinks;
    private List`1<GraphConditionalStyle> _removedStyles;
    private List`1<GraphCondition> _removedConditions;
    private List`1<GraphSetter> _removedSetters;
    private Dictionary`2<GraphObject, Dictionary`2<GraphProperty, object>> _addedProperties;
    private Dictionary`2<GraphObject, Dictionary`2<GraphProperty, object>> _removedProperties;
    private Dictionary`2<GraphObject, List`1<GraphCategory>> _addedCategories;
    private Dictionary`2<GraphObject, List`1<GraphCategory>> _removedCategories;
    [CompilerGeneratedAttribute]
private bool <IsUndoUnit>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsRedoUnit>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Disabled>k__BackingField;
    [CompilerGeneratedAttribute]
private object <Causality>k__BackingField;
    public bool IsUndoUnit { get; private set; }
    public bool IsRedoUnit { get; private set; }
    public bool Disabled { get; protected set; }
    public object Causality { get; public set; }
    public IGraphTransactionEnlistment Enlistment { get; }
    public Dictionary`2<object, object> ScopeProperties { get; }
    public string Description { get; }
    public bool IsEmpty { get; }
    private IDictionary`2<GraphObject, List`1<GraphCategory>> Microsoft.VisualStudio.GraphModel.IGraphUndoData.AddedCategories { get; }
    private IEnumerable`1<GraphCondition> Microsoft.VisualStudio.GraphModel.IGraphUndoData.AddedConditions { get; }
    private IEnumerable`1<GraphLink> Microsoft.VisualStudio.GraphModel.IGraphUndoData.AddedLinks { get; }
    private IEnumerable`1<GraphNode> Microsoft.VisualStudio.GraphModel.IGraphUndoData.AddedNodes { get; }
    private IDictionary`2<GraphObject, Dictionary`2<GraphProperty, object>> Microsoft.VisualStudio.GraphModel.IGraphUndoData.AddedProperties { get; }
    private IEnumerable`1<GraphSetter> Microsoft.VisualStudio.GraphModel.IGraphUndoData.AddedSetters { get; }
    private IEnumerable`1<GraphConditionalStyle> Microsoft.VisualStudio.GraphModel.IGraphUndoData.AddedStyles { get; }
    private IDictionary`2<GraphObject, List`1<GraphCategory>> Microsoft.VisualStudio.GraphModel.IGraphUndoData.RemovedCategories { get; }
    private IEnumerable`1<GraphCondition> Microsoft.VisualStudio.GraphModel.IGraphUndoData.RemovedConditions { get; }
    private IEnumerable`1<GraphLink> Microsoft.VisualStudio.GraphModel.IGraphUndoData.RemovedLinks { get; }
    private IEnumerable`1<GraphNode> Microsoft.VisualStudio.GraphModel.IGraphUndoData.RemovedNodes { get; }
    private IDictionary`2<GraphObject, Dictionary`2<GraphProperty, object>> Microsoft.VisualStudio.GraphModel.IGraphUndoData.RemovedProperties { get; }
    private IEnumerable`1<GraphSetter> Microsoft.VisualStudio.GraphModel.IGraphUndoData.RemovedSetters { get; }
    private IEnumerable`1<GraphConditionalStyle> Microsoft.VisualStudio.GraphModel.IGraphUndoData.RemovedStyles { get; }
    private ITraceableIdentifiableObject Microsoft.VisualStudio.Diagnostics.PerformanceProvider.DebugTrace.ITraceableInstance.InstanceTrace { get; }
    public GraphUndoUnit(Graph graph, GraphUpdatedEventArgs changes);
    private static bool CalculateDisabled(object id, Dictionary`2<object, object> scopeProperties);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_IsUndoUnit();
    [CompilerGeneratedAttribute]
private void set_IsUndoUnit(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_IsRedoUnit();
    [CompilerGeneratedAttribute]
private void set_IsRedoUnit(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_Disabled();
    [CompilerGeneratedAttribute]
protected void set_Disabled(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual object get_Causality();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Causality(object value);
    public sealed virtual IGraphTransactionEnlistment get_Enlistment();
    public Dictionary`2<object, object> get_ScopeProperties();
    public string get_Description();
    public virtual bool get_IsEmpty();
    private static void SaveAddedObjects(IList list, IEnumerable additions);
    private void SaveRemovedObjects(IList list, IEnumerable removals, GraphUpdatedEventArgs changeEvent);
    private void SaveChanges(IEnumerable changes, GraphUpdatedEventArgs changeEvent);
    private void SaveAddedCategories(GraphObject parent, IEnumerable`1<GraphCategory> list);
    private void SaveRemovedCategories(GraphObject parent, IEnumerable`1<GraphCategory> list);
    private void SaveAddedProperties(GraphObject parent, IEnumerable`1<GraphProperty> list);
    private void SaveRemovedProperties(GraphObject parent, IEnumerable`1<GraphProperty> list);
    public static bool IsUndoable(GraphObject graphObject, GraphProperty property);
    public sealed virtual void Apply();
    public void ApplyToGraph(Graph graph);
    public void ApplyToNode(GraphNode originalNode, GraphNode node);
    private static void ApplyPropertiesToGraph(Graph graph, Dictionary`2<GraphObject, Dictionary`2<GraphProperty, object>> properties);
    private static GraphObject GetGraphObject(Graph graph, GraphObject otherObject);
    private static void Swap(T& item1, T& item2);
    private static Dictionary`2<GraphObject, Dictionary`2<GraphProperty, object>> UndoProperties(Dictionary`2<GraphObject, Dictionary`2<GraphProperty, object>> properties);
    public static bool IsUndo(Dictionary`2<object, object> scopeProperties);
    public static bool IsRedo(Dictionary`2<object, object> scopeProperties);
    public sealed virtual void Merge(IMergeableUndo undo);
    public sealed virtual void GetDescription(String& description);
    public sealed virtual void GetUnitType(Guid& pClsid, Int32& plID);
    public sealed virtual void OnNextAdd();
    public sealed virtual void Do(IOleUndoManager pUndoManager);
    private sealed virtual override IDictionary`2<GraphObject, List`1<GraphCategory>> Microsoft.VisualStudio.GraphModel.IGraphUndoData.get_AddedCategories();
    private sealed virtual override IEnumerable`1<GraphCondition> Microsoft.VisualStudio.GraphModel.IGraphUndoData.get_AddedConditions();
    private sealed virtual override IEnumerable`1<GraphLink> Microsoft.VisualStudio.GraphModel.IGraphUndoData.get_AddedLinks();
    private sealed virtual override IEnumerable`1<GraphNode> Microsoft.VisualStudio.GraphModel.IGraphUndoData.get_AddedNodes();
    private sealed virtual override IDictionary`2<GraphObject, Dictionary`2<GraphProperty, object>> Microsoft.VisualStudio.GraphModel.IGraphUndoData.get_AddedProperties();
    private sealed virtual override IEnumerable`1<GraphSetter> Microsoft.VisualStudio.GraphModel.IGraphUndoData.get_AddedSetters();
    private sealed virtual override IEnumerable`1<GraphConditionalStyle> Microsoft.VisualStudio.GraphModel.IGraphUndoData.get_AddedStyles();
    private sealed virtual override IDictionary`2<GraphObject, List`1<GraphCategory>> Microsoft.VisualStudio.GraphModel.IGraphUndoData.get_RemovedCategories();
    private sealed virtual override IEnumerable`1<GraphCondition> Microsoft.VisualStudio.GraphModel.IGraphUndoData.get_RemovedConditions();
    private sealed virtual override IEnumerable`1<GraphLink> Microsoft.VisualStudio.GraphModel.IGraphUndoData.get_RemovedLinks();
    private sealed virtual override IEnumerable`1<GraphNode> Microsoft.VisualStudio.GraphModel.IGraphUndoData.get_RemovedNodes();
    private sealed virtual override IDictionary`2<GraphObject, Dictionary`2<GraphProperty, object>> Microsoft.VisualStudio.GraphModel.IGraphUndoData.get_RemovedProperties();
    private sealed virtual override IEnumerable`1<GraphSetter> Microsoft.VisualStudio.GraphModel.IGraphUndoData.get_RemovedSetters();
    private sealed virtual override IEnumerable`1<GraphConditionalStyle> Microsoft.VisualStudio.GraphModel.IGraphUndoData.get_RemovedStyles();
    protected virtual void AddNode(GraphNode node);
    protected virtual void RemoveNode(GraphNode node);
    protected virtual void AddLink(GraphLink link);
    protected virtual void RemoveLink(GraphLink link);
    public virtual void Apply(Action action);
    protected virtual void DoApply(IOleUndoManager pUndoManager);
    protected virtual string DoGetCalculateDescription();
    private sealed virtual override ITraceableIdentifiableObject Microsoft.VisualStudio.Diagnostics.PerformanceProvider.DebugTrace.ITraceableInstance.get_InstanceTrace();
    [ConditionalAttribute("DEBUG")]
private void DEBUGONLY_CreateInstanceTrace(GraphUpdatedEventArgs args);
    [ConditionalAttribute("DEBUG")]
private void DEBUGONLY_DumpDebugInfo(string message, bool showDetails, bool showStackTrack);
}
public class Microsoft.VisualStudio.GraphModel.GraphUpdatedEventArgs : EventArgs {
    private Dictionary`2<GraphObject, ISet`1<GraphProperty>> _addedProperties;
    private Dictionary`2<GraphObject, ISet`1<GraphProperty>> _removedProperties;
    private Dictionary`2<GraphObject, IEnumerable`1<GraphGroup>> _addedGroups;
    private Dictionary`2<GraphObject, IEnumerable`1<GraphGroup>> _removedGroups;
    private Dictionary`2<GraphObject, ISet`1<GraphCategory>> _addedCategories;
    private Dictionary`2<GraphObject, ISet`1<GraphCategory>> _removedCategories;
    [CompilerGeneratedAttribute]
private bool <Cancel>k__BackingField;
    private GraphTransactionEnlistmentEventArgs _event;
    private Graph _graph;
    public IDictionary`2<GraphObject, ISet`1<GraphProperty>> AddedProperties { get; }
    public IDictionary`2<GraphObject, ISet`1<GraphProperty>> RemovedProperties { get; }
    public IDictionary`2<GraphObject, ISet`1<GraphCategory>> AddedCategories { get; }
    public IDictionary`2<GraphObject, ISet`1<GraphCategory>> RemovedCategories { get; }
    private Dictionary`2<LinkKey, GraphLink> InternalAddedLinks { get; }
    private Dictionary`2<LinkKey, GraphLink> InternalRemovedLinks { get; }
    private Dictionary`2<GraphNodeId, GraphNode> InternalAddedNodes { get; }
    private Dictionary`2<GraphNodeId, GraphNode> InternalRemovedNodes { get; }
    public Dictionary`2<GraphObject, IEnumerable`1<GraphGroup>> AddedGroups { get; }
    public Dictionary`2<GraphObject, IEnumerable`1<GraphGroup>> RemovedGroups { get; }
    private IEnumerable`1<GraphConditionalStyle> InternalAddedStyles { get; }
    private IEnumerable`1<GraphConditionalStyle> InternalRemovedStyles { get; }
    private IEnumerable`1<GraphCondition> InternalAddedConditions { get; }
    private IEnumerable`1<GraphCondition> InternalRemovedConditions { get; }
    private Dictionary`2<string, GraphSetter> InternalAddedSetters { get; }
    private Dictionary`2<string, GraphSetter> InternalRemovedSetters { get; }
    public bool Cancel { get; public set; }
    public Graph Graph { get; }
    public Transaction Transaction { get; }
    public object TransactionId { get; }
    internal GraphTransactionEnlistment Enlistment { get; }
    public Dictionary`2<object, object> ScopeProperties { get; }
    public IEnumerable`1<GraphLink> AddedLinks { get; }
    public IEnumerable`1<GraphLink> RemovedLinks { get; }
    public IEnumerable`1<GraphLink> ChangedLinks { get; }
    public IEnumerable`1<GraphNode> AddedNodes { get; }
    public IEnumerable`1<GraphNode> RemovedNodes { get; }
    public IEnumerable`1<GraphNode> ChangedNodes { get; }
    public IEnumerable`1<GraphGroup> ChangedGroups { get; }
    public IEnumerable`1<GraphConditionalStyle> AddedStyles { get; }
    public IEnumerable`1<GraphConditionalStyle> RemovedStyles { get; }
    public IEnumerable`1<GraphConditionalStyle> ChangedStyles { get; }
    public IEnumerable`1<GraphCondition> AddedConditions { get; }
    public IEnumerable`1<GraphCondition> RemovedConditions { get; }
    public IEnumerable`1<GraphCondition> ChangedConditions { get; }
    public IEnumerable`1<GraphSetter> AddedSetters { get; }
    public IEnumerable`1<GraphSetter> RemovedSetters { get; }
    public IEnumerable`1<GraphSetter> ChangedSetters { get; }
    private ITraceableIdentifiableObject Microsoft.VisualStudio.Diagnostics.PerformanceProvider.DebugTrace.ITraceableInstance.InstanceTrace { get; }
    internal GraphUpdatedEventArgs(Graph graph, GraphTransactionEnlistmentEventArgs evt);
    public IDictionary`2<GraphObject, ISet`1<GraphProperty>> get_AddedProperties();
    public IDictionary`2<GraphObject, ISet`1<GraphProperty>> get_RemovedProperties();
    private void ComputeChangedProperties();
    public IDictionary`2<GraphObject, ISet`1<GraphCategory>> get_AddedCategories();
    public IDictionary`2<GraphObject, ISet`1<GraphCategory>> get_RemovedCategories();
    private void ComputeChangedCategories();
    private Dictionary`2<LinkKey, GraphLink> get_InternalAddedLinks();
    private Dictionary`2<LinkKey, GraphLink> get_InternalRemovedLinks();
    private Dictionary`2<GraphNodeId, GraphNode> get_InternalAddedNodes();
    private Dictionary`2<GraphNodeId, GraphNode> get_InternalRemovedNodes();
    public Dictionary`2<GraphObject, IEnumerable`1<GraphGroup>> get_AddedGroups();
    public Dictionary`2<GraphObject, IEnumerable`1<GraphGroup>> get_RemovedGroups();
    private IEnumerable`1<GraphConditionalStyle> get_InternalAddedStyles();
    private IEnumerable`1<GraphConditionalStyle> get_InternalRemovedStyles();
    private IEnumerable`1<GraphCondition> get_InternalAddedConditions();
    private IEnumerable`1<GraphCondition> get_InternalRemovedConditions();
    private Dictionary`2<string, GraphSetter> get_InternalAddedSetters();
    private Dictionary`2<string, GraphSetter> get_InternalRemovedSetters();
    [CompilerGeneratedAttribute]
public bool get_Cancel();
    [CompilerGeneratedAttribute]
public void set_Cancel(bool value);
    public Graph get_Graph();
    public Transaction get_Transaction();
    public object get_TransactionId();
    internal GraphTransactionEnlistment get_Enlistment();
    public Dictionary`2<object, object> get_ScopeProperties();
    public IEnumerable`1<GraphLink> get_AddedLinks();
    public IEnumerable`1<GraphLink> get_RemovedLinks();
    public IEnumerable`1<GraphLink> get_ChangedLinks();
    public IEnumerable`1<GraphNode> get_AddedNodes();
    public IEnumerable`1<GraphNode> get_RemovedNodes();
    public bool IsAdded(GraphNodeId id);
    public bool IsRemoved(GraphNodeId id);
    public IEnumerable`1<GraphNode> get_ChangedNodes();
    public IEnumerable`1<GraphGroup> get_ChangedGroups();
    public IEnumerable`1<GraphConditionalStyle> get_AddedStyles();
    public IEnumerable`1<GraphConditionalStyle> get_RemovedStyles();
    public IEnumerable`1<GraphConditionalStyle> get_ChangedStyles();
    public IEnumerable`1<GraphCondition> get_AddedConditions();
    public IEnumerable`1<GraphCondition> get_RemovedConditions();
    public IEnumerable`1<GraphCondition> get_ChangedConditions();
    public IEnumerable`1<GraphSetter> get_AddedSetters();
    public IEnumerable`1<GraphSetter> get_RemovedSetters();
    public IEnumerable`1<GraphSetter> get_ChangedSetters();
    public IEnumerable`1<GraphProperty> GetAddedProperties(GraphObject parent);
    public IEnumerable`1<GraphProperty> GetRemovedProperties(GraphObject parent);
    public IEnumerable`1<GraphCategory> GetAddedCategories(GraphObject parent);
    public IEnumerable`1<GraphCategory> GetRemovedCategories(GraphObject parent);
    private sealed virtual override ITraceableIdentifiableObject Microsoft.VisualStudio.Diagnostics.PerformanceProvider.DebugTrace.ITraceableInstance.get_InstanceTrace();
    [ConditionalAttribute("DEBUG")]
private void DEBUGONLY_CreateInstanceTrace();
    [ConditionalAttribute("DEBUG")]
private void DEBUGONLY_DumpDebugInfo();
    [CompilerGeneratedAttribute]
private bool <get_InternalAddedLinks>b__17_0(KeyValuePair`2<IEnlistableObject, IIsolatorObject> n);
    [CompilerGeneratedAttribute]
private bool <get_InternalRemovedLinks>b__19_0(KeyValuePair`2<IEnlistableObject, IIsolatorObject> n);
    [CompilerGeneratedAttribute]
private bool <get_InternalAddedNodes>b__21_0(KeyValuePair`2<IEnlistableObject, IIsolatorObject> n);
    [CompilerGeneratedAttribute]
private bool <get_InternalRemovedNodes>b__23_0(KeyValuePair`2<IEnlistableObject, IIsolatorObject> n);
    [CompilerGeneratedAttribute]
private bool <get_AddedGroups>b__25_1(<>f__AnonymousType0`2<KeyValuePair`2<IEnlistableObject, IIsolatorObject>, GraphGroupCollection> <>h__TransparentIdentifier0);
    [CompilerGeneratedAttribute]
private bool <get_RemovedGroups>b__27_1(<>f__AnonymousType0`2<KeyValuePair`2<IEnlistableObject, IIsolatorObject>, GraphGroupCollection> <>h__TransparentIdentifier0);
    [CompilerGeneratedAttribute]
private bool <get_InternalAddedStyles>b__29_0(KeyValuePair`2<IEnlistableObject, IIsolatorObject> n);
    [CompilerGeneratedAttribute]
private bool <get_InternalRemovedStyles>b__31_0(KeyValuePair`2<IEnlistableObject, IIsolatorObject> n);
    [CompilerGeneratedAttribute]
private bool <get_InternalAddedConditions>b__33_1(<>f__AnonymousType1`2<KeyValuePair`2<IEnlistableObject, IIsolatorObject>, GraphConditionCollection> <>h__TransparentIdentifier0);
    [CompilerGeneratedAttribute]
private bool <get_InternalRemovedConditions>b__35_1(<>f__AnonymousType1`2<KeyValuePair`2<IEnlistableObject, IIsolatorObject>, GraphConditionCollection> <>h__TransparentIdentifier0);
    [CompilerGeneratedAttribute]
private bool <get_InternalAddedSetters>b__37_1(<>f__AnonymousType2`2<KeyValuePair`2<IEnlistableObject, IIsolatorObject>, GraphSetterCollection> <>h__TransparentIdentifier0);
    [CompilerGeneratedAttribute]
private bool <get_InternalRemovedSetters>b__39_1(<>f__AnonymousType2`2<KeyValuePair`2<IEnlistableObject, IIsolatorObject>, GraphSetterCollection> <>h__TransparentIdentifier0);
    [CompilerGeneratedAttribute]
private bool <get_ChangedNodes>b__67_1(<>f__AnonymousType5`2<KeyValuePair`2<IEnlistableObject, IIsolatorObject>, GraphNode> <>h__TransparentIdentifier0);
    [CompilerGeneratedAttribute]
private bool <get_ChangedStyles>b__75_1(<>f__AnonymousType2`2<KeyValuePair`2<IEnlistableObject, IIsolatorObject>, GraphConditionalStyle> <>h__TransparentIdentifier0);
    [CompilerGeneratedAttribute]
private bool <get_ChangedConditions>b__81_1(<>f__AnonymousType1`2<KeyValuePair`2<IEnlistableObject, IIsolatorObject>, GraphCondition> <>h__TransparentIdentifier0);
    [CompilerGeneratedAttribute]
private bool <get_ChangedSetters>b__87_1(<>f__AnonymousType2`2<KeyValuePair`2<IEnlistableObject, IIsolatorObject>, GraphSetter> <>h__TransparentIdentifier0);
}
internal static class Microsoft.VisualStudio.GraphModel.Helper : object {
    internal static T ThrowIfArgumentNull(T o, string argumentName);
}
internal interface Microsoft.VisualStudio.GraphModel.IEnlistableNotify {
    public abstract virtual void Committed(IIsolatorObject isolationObject);
    public abstract virtual void RolledBack(IIsolatorObject isolationObject);
}
internal interface Microsoft.VisualStudio.GraphModel.IEnlistableObject {
    public object Parent { get; }
    public abstract virtual object get_Parent();
    public abstract virtual void Lock();
    public abstract virtual void VerifyChanges(IIsolatorObject isolationObject);
    public abstract virtual void CommitChanges(IIsolatorObject isolationObject);
    public abstract virtual void RollbackChanges(IIsolatorObject isolationObject);
    public abstract virtual void Unlock();
}
public interface Microsoft.VisualStudio.GraphModel.IGraphContext {
    public int LinkDepth { get; }
    public IEnumerable`1<GraphCategory> LinkCategories { get; }
    public IEnumerable`1<GraphCategory> NodeCategories { get; }
    public IEnumerable`1<GraphProperty> RequestedProperties { get; }
    public GraphContextDirection Direction { get; }
    public Graph Graph { get; public set; }
    public ISet`1<GraphNode> InputNodes { get; }
    public ISet`1<GraphNode> OutputNodes { get; }
    public bool TrackChanges { get; }
    public CancellationToken CancelToken { get; }
    public IEnumerable`1<Exception> Errors { get; }
    public abstract virtual int get_LinkDepth();
    public abstract virtual IEnumerable`1<GraphCategory> get_LinkCategories();
    public abstract virtual IEnumerable`1<GraphCategory> get_NodeCategories();
    public abstract virtual IEnumerable`1<GraphProperty> get_RequestedProperties();
    public abstract virtual GraphContextDirection get_Direction();
    public abstract virtual void SetValue(string name, T value);
    public abstract virtual T GetValue(string name);
    public abstract virtual bool HasValue(string name);
    public abstract virtual Graph get_Graph();
    public abstract virtual void set_Graph(Graph value);
    public abstract virtual ISet`1<GraphNode> get_InputNodes();
    public abstract virtual ISet`1<GraphNode> get_OutputNodes();
    public abstract virtual bool get_TrackChanges();
    public abstract virtual CancellationToken get_CancelToken();
    public abstract virtual void ReportProgress(int current, int maximum, string message);
    public abstract virtual void ReportError(Exception exception);
    public abstract virtual IEnumerable`1<Exception> get_Errors();
    [CompilerGeneratedAttribute]
public abstract virtual void add_Completed(EventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_Completed(EventHandler value);
    public abstract virtual void OnCompleted();
    [CompilerGeneratedAttribute]
public abstract virtual void add_Canceled(EventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_Canceled(EventHandler value);
}
public interface Microsoft.VisualStudio.GraphModel.IGraphFormattedLabel {
    public abstract virtual string Label(GraphObject graphObject, string graphCommandDefinitionIdentifier);
    public abstract virtual string Description(GraphObject graphObject, string graphCommandDefinitionIdentifier);
}
public interface Microsoft.VisualStudio.GraphModel.IGraphNavigateToItem {
    public abstract virtual void NavigateTo(GraphObject graphObject);
}
public interface Microsoft.VisualStudio.GraphModel.IGraphNodeBrowsablePropertiesProvider {
    public abstract virtual PropertyDescriptorCollection GetBrowsableProperties(GraphNode node);
}
internal interface Microsoft.VisualStudio.GraphModel.IGraphNodeIdKey {
    public GraphNodeIdName Name { get; }
    public object Value { get; }
    public abstract virtual int GetHashCode();
    public abstract virtual GraphNodeIdName get_Name();
    public abstract virtual object get_Value();
}
public interface Microsoft.VisualStudio.GraphModel.IGraphProvider {
    public Graph Schema { get; }
    public abstract virtual Graph get_Schema();
    public abstract virtual void BeginGetGraphData(IGraphContext context);
    public abstract virtual T GetExtension(GraphObject graphObject, T previous);
    public abstract virtual IEnumerable`1<GraphCommand> GetCommands(IEnumerable`1<GraphNode> nodes);
}
public interface Microsoft.VisualStudio.GraphModel.IGraphProviderMetadata {
    public string Name { get; }
    public string IntellisenseType { get; }
    public string ProjectKind { get; }
    public string ProjectCapability { get; }
    public string ActiveUIContext { get; }
    public abstract virtual string get_Name();
    public abstract virtual string get_IntellisenseType();
    public abstract virtual string get_ProjectKind();
    public abstract virtual string get_ProjectCapability();
    public abstract virtual string get_ActiveUIContext();
}
public interface Microsoft.VisualStudio.GraphModel.IGraphProviderRankableExtension {
    public abstract virtual int GetRank(GraphObject graphObject);
}
public interface Microsoft.VisualStudio.GraphModel.IGraphTransactionEnlistment {
    public Dictionary`2<object, object> Properties { get; }
    public abstract virtual Dictionary`2<object, object> get_Properties();
}
public interface Microsoft.VisualStudio.GraphModel.IGraphUndoData {
    public IDictionary`2<GraphObject, List`1<GraphCategory>> AddedCategories { get; }
    public IEnumerable`1<GraphCondition> AddedConditions { get; }
    public IEnumerable`1<GraphLink> AddedLinks { get; }
    public IEnumerable`1<GraphNode> AddedNodes { get; }
    public IDictionary`2<GraphObject, Dictionary`2<GraphProperty, object>> AddedProperties { get; }
    public IEnumerable`1<GraphSetter> AddedSetters { get; }
    public IEnumerable`1<GraphConditionalStyle> AddedStyles { get; }
    public IDictionary`2<GraphObject, List`1<GraphCategory>> RemovedCategories { get; }
    public IEnumerable`1<GraphCondition> RemovedConditions { get; }
    public IEnumerable`1<GraphLink> RemovedLinks { get; }
    public IEnumerable`1<GraphNode> RemovedNodes { get; }
    public IDictionary`2<GraphObject, Dictionary`2<GraphProperty, object>> RemovedProperties { get; }
    public IEnumerable`1<GraphSetter> RemovedSetters { get; }
    public IEnumerable`1<GraphConditionalStyle> RemovedStyles { get; }
    public abstract virtual IDictionary`2<GraphObject, List`1<GraphCategory>> get_AddedCategories();
    public abstract virtual IEnumerable`1<GraphCondition> get_AddedConditions();
    public abstract virtual IEnumerable`1<GraphLink> get_AddedLinks();
    public abstract virtual IEnumerable`1<GraphNode> get_AddedNodes();
    public abstract virtual IDictionary`2<GraphObject, Dictionary`2<GraphProperty, object>> get_AddedProperties();
    public abstract virtual IEnumerable`1<GraphSetter> get_AddedSetters();
    public abstract virtual IEnumerable`1<GraphConditionalStyle> get_AddedStyles();
    public abstract virtual IDictionary`2<GraphObject, List`1<GraphCategory>> get_RemovedCategories();
    public abstract virtual IEnumerable`1<GraphCondition> get_RemovedConditions();
    public abstract virtual IEnumerable`1<GraphLink> get_RemovedLinks();
    public abstract virtual IEnumerable`1<GraphNode> get_RemovedNodes();
    public abstract virtual IDictionary`2<GraphObject, Dictionary`2<GraphProperty, object>> get_RemovedProperties();
    public abstract virtual IEnumerable`1<GraphSetter> get_RemovedSetters();
    public abstract virtual IEnumerable`1<GraphConditionalStyle> get_RemovedStyles();
}
public interface Microsoft.VisualStudio.GraphModel.IHasGraphOwner {
    public Graph Owner { get; }
    public abstract virtual Graph get_Owner();
}
internal interface Microsoft.VisualStudio.GraphModel.IIsolatorObject {
    public IEnumerable AddedObjects { get; }
    public IEnumerable RemovedObjects { get; }
    public abstract virtual IEnumerable get_AddedObjects();
    public abstract virtual IEnumerable get_RemovedObjects();
}
public interface Microsoft.VisualStudio.GraphModel.IMergeableUndo {
    public IGraphTransactionEnlistment Enlistment { get; }
    public bool IsUndoUnit { get; }
    public bool IsRedoUnit { get; }
    public bool Disabled { get; }
    public object Causality { get; public set; }
    public bool IsEmpty { get; }
    public abstract virtual IGraphTransactionEnlistment get_Enlistment();
    public abstract virtual bool get_IsUndoUnit();
    public abstract virtual bool get_IsRedoUnit();
    public abstract virtual bool get_Disabled();
    public abstract virtual object get_Causality();
    public abstract virtual void set_Causality(object value);
    public abstract virtual bool get_IsEmpty();
    public abstract virtual void Merge(IMergeableUndo undo);
    public abstract virtual void Apply();
}
internal interface Microsoft.VisualStudio.GraphModel.IPropertyList`1 {
    public int Count { get; }
    public IEnumerable`1<KeyValuePair`2<GraphProperty, T>> Properties { get; }
    public IEnumerable`1<GraphProperty> PropertyKeys { get; }
    public IEnumerable`1<T> PropertyValues { get; }
    public abstract virtual int get_Count();
    public abstract virtual IEnumerable`1<KeyValuePair`2<GraphProperty, T>> get_Properties();
    public abstract virtual IEnumerable`1<GraphProperty> get_PropertyKeys();
    public abstract virtual IEnumerable`1<T> get_PropertyValues();
    public abstract virtual T Clear(GraphProperty property);
    public abstract virtual bool Contains(GraphProperty property);
    public abstract virtual T GetValue(GraphProperty property);
    public abstract virtual void SetValue(GraphProperty property, Graph metadataGraph, T value);
    public abstract virtual bool TryGetValue(GraphProperty property, T& value);
}
public interface Microsoft.VisualStudio.GraphModel.IReadOnlyCollection`1 {
    public int Count { get; }
    public abstract virtual int get_Count();
}
internal class Microsoft.VisualStudio.GraphModel.MultiTokenReplacement : object {
    private TokenMatcher _rootMatchToStartFrom;
    private HashSet`1<string> _tokensReplaced;
    private List`1<ReplacementTokenFound> _tokensFoundInAscendingPositionOrder;
    private TokenMatcher _rootTokenMatcher;
    private ReplacementTokenFound _longestTokenMatchFound;
    private ReplacementTokenFound _lastTokenMatchFound;
    public HashSet`1<string> TokensReplaced { get; }
    public HashSet`1<string> get_TokensReplaced();
    public void Add(string findThisToken, string replaceWithThisToken);
    public bool ReplaceAllTokens(string input, StringBuilder output);
    private static bool Overlaps(ReplacementTokenFound x, ReplacementTokenFound y);
}
internal class Microsoft.VisualStudio.GraphModel.PropertyList`1 : object {
    private PropertyListNode`1<T, T> _head;
    private int _count;
    private bool _isValueType;
    public int Count { get; }
    public IEnumerable`1<KeyValuePair`2<GraphProperty, T>> Properties { get; }
    public IEnumerable`1<GraphProperty> PropertyKeys { get; }
    public IEnumerable`1<T> PropertyValues { get; }
    private bool FindInList(GraphProperty property, PropertyListNode`1& foundNode, PropertyListNode`1& previousNode);
    public void BulkClear(HashSet`1<GraphProperty> propertiesToClear);
    public sealed virtual int get_Count();
    [IteratorStateMachineAttribute("Microsoft.VisualStudio.GraphModel.PropertyList`1/<get_Properties>d__9")]
public sealed virtual IEnumerable`1<KeyValuePair`2<GraphProperty, T>> get_Properties();
    [IteratorStateMachineAttribute("Microsoft.VisualStudio.GraphModel.PropertyList`1/<get_PropertyKeys>d__11")]
public sealed virtual IEnumerable`1<GraphProperty> get_PropertyKeys();
    [IteratorStateMachineAttribute("Microsoft.VisualStudio.GraphModel.PropertyList`1/<get_PropertyValues>d__13")]
public sealed virtual IEnumerable`1<T> get_PropertyValues();
    public sealed virtual T Clear(GraphProperty property);
    public sealed virtual bool Contains(GraphProperty property);
    public sealed virtual T GetValue(GraphProperty property);
    public sealed virtual void SetValue(GraphProperty property, Graph metadataGraph, T value);
    internal void SetValueNoMetadataCheck(GraphProperty property, T value);
    public sealed virtual bool TryGetValue(GraphProperty property, T& value);
}
[ExtensionAttribute]
internal static class Microsoft.VisualStudio.GraphModel.ReflectionExtensions : object {
    [ExtensionAttribute]
internal static MethodInfo GetNonGenericMethod(Type declaringType, string name, Type[] arguments);
}
[GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "4.0.0.0")]
[DebuggerNonUserCodeAttribute]
[CompilerGeneratedAttribute]
internal class Microsoft.VisualStudio.GraphModel.Resources : object {
    private static ResourceManager resourceMan;
    private static CultureInfo resourceCulture;
    [EditorBrowsableAttribute("2")]
internal static ResourceManager ResourceManager { get; }
    [EditorBrowsableAttribute("2")]
internal static CultureInfo Culture { get; internal set; }
    internal static string CircularCategoryInheritance { get; }
    internal static string CircularSetter { get; }
    internal static string Clear { get; }
    internal static string DescriptiveCategoryLabelDelimiter { get; }
    internal static string DGML_Annotation_DelayedChildNodesState_Desc { get; }
    internal static string DGML_Annotation_DelayedChildNodesState_Label { get; }
    internal static string DGML_Annotation_DelayedChildNodesState_NOLOC_ { get; }
    internal static string DGML_Annotation_DelayedCrossGroupLinksState_Desc { get; }
    internal static string DGML_Annotation_DelayedCrossGroupLinksState_Label { get; }
    internal static string DGML_Annotation_DelayedCrossGroupLinksState_NOLOC_ { get; }
    internal static string DGML_Annotation_ErrorLevel_Desc { get; }
    internal static string DGML_Annotation_ErrorLevel_Group { get; }
    internal static string DGML_Annotation_ErrorLevel_Label { get; }
    internal static string DGML_Annotation_ErrorLevel_NOLOC_ { get; }
    internal static string DGML_Annotation_FilePath_Desc { get; }
    internal static string DGML_Annotation_FilePath_Label { get; }
    internal static string DGML_Annotation_FilePath_NOLOC_ { get; }
    internal static string DGML_Annotation_Group_Desc { get; }
    internal static string DGML_Annotation_Group_Label { get; }
    internal static string DGML_Annotation_Group_NOLOC_ { get; }
    internal static string DGML_Annotation_Label_Desc { get; }
    internal static string DGML_Annotation_Label_Label { get; }
    internal static string DGML_Annotation_Label_NOLOC_ { get; }
    internal static string DGML_Annotation_SourceNode_Desc { get; }
    internal static string DGML_Annotation_SourceNode_Label { get; }
    internal static string DGML_Annotation_SourceNode_NOLOC_ { get; }
    internal static string DGML_Annotation_TargetNode_Desc { get; }
    internal static string DGML_Annotation_TargetNode_Label { get; }
    internal static string DGML_Annotation_TargetNode_NOLOC_ { get; }
    internal static string DGML_Annotation_UniqueId_Desc { get; }
    internal static string DGML_Annotation_UniqueId_Label { get; }
    internal static string DGML_Annotation_UniqueId_NOLOC_ { get; }
    internal static string DGML_Annotation_Visibility_Desc { get; }
    internal static string DGML_Annotation_Visibility_Label { get; }
    internal static string DGML_Annotation_Visibility_NOLOC_ { get; }
    internal static string DGML_Category_Contains_Desc { get; }
    internal static string DGML_Category_Contains_Label { get; }
    internal static string DGML_Category_Contains_NOLOC_ { get; }
    internal static string Error_Missing_Close_Quote { get; }
    internal static string Exception_ArgEmptyStringParam_id_NOLOC_ { get; }
    internal static string Exception_ArgNullParam_dataType_NOLOC_ { get; }
    internal static string Exception_ArgNullParam_id_NOLOC_ { get; }
    internal static string Exception_ArgNullParam_key_NOLOC_ { get; }
    internal static string Exception_ArgNullParam_link_NOLOC_ { get; }
    internal static string Exception_ArgNullParam_node_NOLOC_ { get; }
    internal static string Exception_ArgNullParam_owner_NOLOC_ { get; }
    internal static string Exception_ArgNullParam_source_NOLOC_ { get; }
    internal static string Exception_ArgNullParam_target_NOLOC_ { get; }
    internal static string Exception_ArrayMustHave1OrMoreItems { get; }
    internal static string Exception_ArrayWontFitInDestination { get; }
    internal static string Exception_BasedOn { get; }
    internal static string Exception_CannotChangeTxId { get; }
    internal static string Exception_CanNotRemoveAnnotation { get; }
    internal static string Exception_CanNotWriteToAnnotationMultipleTimes { get; }
    internal static string Exception_DuplicateLink { get; }
    internal static string Exception_GraphNodeIdCollectionNotHomogeneous { get; }
    internal static string Exception_GraphNodeIdNotGraphNodeId { get; }
    internal static string Exception_GraphOwnerMissing { get; }
    internal static string Exception_GraphParsingAliasedIdNotANumber { get; }
    internal static string Exception_GraphParsingAliasedIdNotFound { get; }
    internal static string Exception_GraphParsingEmbeddedError { get; }
    internal static string Exception_GraphParsingEmptyString { get; }
    internal static string Exception_GraphParsingExpectedEmbedded { get; }
    internal static string Exception_GraphParsingExpectedUri { get; }
    internal static string Exception_GraphParsingNoEquFound { get; }
    internal static string Exception_GraphParsingNoNameFound { get; }
    internal static string Exception_GraphParsingNonTerminatedArray { get; }
    internal static string Exception_GraphParsingNonTerminatedList { get; }
    internal static string Exception_GraphParsingNonTerminatedLiteral { get; }
    internal static string Exception_GraphParsingUnexpectedEndOfLine { get; }
    internal static string Exception_GraphSchemaCannotBeAddedToSelf { get; }
    internal static string Exception_GraphSchemaCannotBeCircular { get; }
    internal static string Exception_IncompatibleTypesForValueAndAnnotation { get; }
    internal static string Exception_InvalidSignature { get; }
    internal static string Exception_InvalidTag { get; }
    internal static string Exception_IsAssignableFrom { get; }
    internal static string Exception_LinkConflict { get; }
    internal static string Exception_MismatchingOwner { get; }
    internal static string Exception_NeedGraphForMetadata { get; }
    internal static string Exception_NoAssociatedSchema { get; }
    internal static string Exception_NodeConflict { get; }
    internal static string Exception_NoEnlistmentInTx { get; }
    internal static string Exception_NoTxPresent { get; }
    internal static string Exception_OwnerImmutable { get; }
    internal static string Exception_PropertyNotFound { get; }
    internal static string Exception_RegisteredGraphPropertyHasDifferentDataType { get; }
    internal static string Exception_RequiredGraphOwner { get; }
    internal static string Exception_ThreadAlreadyInvolvedInDifferentTransaction { get; }
    internal static string Exception_TxAbortedByEventHandler { get; }
    internal static string Exception_UniqueNodeIdAlreadyExists { get; }
    internal static string ExpectingIdentifier { get; }
    internal static string GraphEdit { get; }
    internal static string GraphException_Format_NOLOC_ { get; }
    internal static string Group { get; }
    internal static string Identifier { get; }
    internal static string InvalidDelimiter { get; }
    internal static string Link_Name_Spacer_NOLOC_ { get; }
    internal static string MethodNotFound { get; }
    internal static string NoConversionExists { get; }
    internal static string Progress_LoadingLinks { get; }
    internal static string Progress_LoadingMetadata { get; }
    internal static string Progress_LoadingNodes { get; }
    internal static string Progress_LoadingStyles { get; }
    internal static string PropertyNotFound { get; }
    internal static string RecursiveGraphTransactionScopeNotAllowed { get; }
    internal static string SeparatedFromOwner { get; }
    internal static string StaticMemberNotFound { get; }
    internal static string TargetTypeMustBeGraphObject { get; }
    internal static string TypeNotRegistered { get; }
    internal static string UnexpectedToken { get; }
    internal static string UnfinishedExpression { get; }
    internal static string UnmatchedCloseParen { get; }
    internal static string UnsupportedTargetType { get; }
    internal static string WeakEventDelegateError { get; }
    internal static ResourceManager get_ResourceManager();
    internal static CultureInfo get_Culture();
    internal static void set_Culture(CultureInfo value);
    internal static string get_CircularCategoryInheritance();
    internal static string get_CircularSetter();
    internal static string get_Clear();
    internal static string get_DescriptiveCategoryLabelDelimiter();
    internal static string get_DGML_Annotation_DelayedChildNodesState_Desc();
    internal static string get_DGML_Annotation_DelayedChildNodesState_Label();
    internal static string get_DGML_Annotation_DelayedChildNodesState_NOLOC_();
    internal static string get_DGML_Annotation_DelayedCrossGroupLinksState_Desc();
    internal static string get_DGML_Annotation_DelayedCrossGroupLinksState_Label();
    internal static string get_DGML_Annotation_DelayedCrossGroupLinksState_NOLOC_();
    internal static string get_DGML_Annotation_ErrorLevel_Desc();
    internal static string get_DGML_Annotation_ErrorLevel_Group();
    internal static string get_DGML_Annotation_ErrorLevel_Label();
    internal static string get_DGML_Annotation_ErrorLevel_NOLOC_();
    internal static string get_DGML_Annotation_FilePath_Desc();
    internal static string get_DGML_Annotation_FilePath_Label();
    internal static string get_DGML_Annotation_FilePath_NOLOC_();
    internal static string get_DGML_Annotation_Group_Desc();
    internal static string get_DGML_Annotation_Group_Label();
    internal static string get_DGML_Annotation_Group_NOLOC_();
    internal static string get_DGML_Annotation_Label_Desc();
    internal static string get_DGML_Annotation_Label_Label();
    internal static string get_DGML_Annotation_Label_NOLOC_();
    internal static string get_DGML_Annotation_SourceNode_Desc();
    internal static string get_DGML_Annotation_SourceNode_Label();
    internal static string get_DGML_Annotation_SourceNode_NOLOC_();
    internal static string get_DGML_Annotation_TargetNode_Desc();
    internal static string get_DGML_Annotation_TargetNode_Label();
    internal static string get_DGML_Annotation_TargetNode_NOLOC_();
    internal static string get_DGML_Annotation_UniqueId_Desc();
    internal static string get_DGML_Annotation_UniqueId_Label();
    internal static string get_DGML_Annotation_UniqueId_NOLOC_();
    internal static string get_DGML_Annotation_Visibility_Desc();
    internal static string get_DGML_Annotation_Visibility_Label();
    internal static string get_DGML_Annotation_Visibility_NOLOC_();
    internal static string get_DGML_Category_Contains_Desc();
    internal static string get_DGML_Category_Contains_Label();
    internal static string get_DGML_Category_Contains_NOLOC_();
    internal static string get_Error_Missing_Close_Quote();
    internal static string get_Exception_ArgEmptyStringParam_id_NOLOC_();
    internal static string get_Exception_ArgNullParam_dataType_NOLOC_();
    internal static string get_Exception_ArgNullParam_id_NOLOC_();
    internal static string get_Exception_ArgNullParam_key_NOLOC_();
    internal static string get_Exception_ArgNullParam_link_NOLOC_();
    internal static string get_Exception_ArgNullParam_node_NOLOC_();
    internal static string get_Exception_ArgNullParam_owner_NOLOC_();
    internal static string get_Exception_ArgNullParam_source_NOLOC_();
    internal static string get_Exception_ArgNullParam_target_NOLOC_();
    internal static string get_Exception_ArrayMustHave1OrMoreItems();
    internal static string get_Exception_ArrayWontFitInDestination();
    internal static string get_Exception_BasedOn();
    internal static string get_Exception_CannotChangeTxId();
    internal static string get_Exception_CanNotRemoveAnnotation();
    internal static string get_Exception_CanNotWriteToAnnotationMultipleTimes();
    internal static string get_Exception_DuplicateLink();
    internal static string get_Exception_GraphNodeIdCollectionNotHomogeneous();
    internal static string get_Exception_GraphNodeIdNotGraphNodeId();
    internal static string get_Exception_GraphOwnerMissing();
    internal static string get_Exception_GraphParsingAliasedIdNotANumber();
    internal static string get_Exception_GraphParsingAliasedIdNotFound();
    internal static string get_Exception_GraphParsingEmbeddedError();
    internal static string get_Exception_GraphParsingEmptyString();
    internal static string get_Exception_GraphParsingExpectedEmbedded();
    internal static string get_Exception_GraphParsingExpectedUri();
    internal static string get_Exception_GraphParsingNoEquFound();
    internal static string get_Exception_GraphParsingNoNameFound();
    internal static string get_Exception_GraphParsingNonTerminatedArray();
    internal static string get_Exception_GraphParsingNonTerminatedList();
    internal static string get_Exception_GraphParsingNonTerminatedLiteral();
    internal static string get_Exception_GraphParsingUnexpectedEndOfLine();
    internal static string get_Exception_GraphSchemaCannotBeAddedToSelf();
    internal static string get_Exception_GraphSchemaCannotBeCircular();
    internal static string get_Exception_IncompatibleTypesForValueAndAnnotation();
    internal static string get_Exception_InvalidSignature();
    internal static string get_Exception_InvalidTag();
    internal static string get_Exception_IsAssignableFrom();
    internal static string get_Exception_LinkConflict();
    internal static string get_Exception_MismatchingOwner();
    internal static string get_Exception_NeedGraphForMetadata();
    internal static string get_Exception_NoAssociatedSchema();
    internal static string get_Exception_NodeConflict();
    internal static string get_Exception_NoEnlistmentInTx();
    internal static string get_Exception_NoTxPresent();
    internal static string get_Exception_OwnerImmutable();
    internal static string get_Exception_PropertyNotFound();
    internal static string get_Exception_RegisteredGraphPropertyHasDifferentDataType();
    internal static string get_Exception_RequiredGraphOwner();
    internal static string get_Exception_ThreadAlreadyInvolvedInDifferentTransaction();
    internal static string get_Exception_TxAbortedByEventHandler();
    internal static string get_Exception_UniqueNodeIdAlreadyExists();
    internal static string get_ExpectingIdentifier();
    internal static string get_GraphEdit();
    internal static string get_GraphException_Format_NOLOC_();
    internal static string get_Group();
    internal static string get_Identifier();
    internal static string get_InvalidDelimiter();
    internal static string get_Link_Name_Spacer_NOLOC_();
    internal static string get_MethodNotFound();
    internal static string get_NoConversionExists();
    internal static string get_Progress_LoadingLinks();
    internal static string get_Progress_LoadingMetadata();
    internal static string get_Progress_LoadingNodes();
    internal static string get_Progress_LoadingStyles();
    internal static string get_PropertyNotFound();
    internal static string get_RecursiveGraphTransactionScopeNotAllowed();
    internal static string get_SeparatedFromOwner();
    internal static string get_StaticMemberNotFound();
    internal static string get_TargetTypeMustBeGraphObject();
    internal static string get_TypeNotRegistered();
    internal static string get_UnexpectedToken();
    internal static string get_UnfinishedExpression();
    internal static string get_UnmatchedCloseParen();
    internal static string get_UnsupportedTargetType();
    internal static string get_WeakEventDelegateError();
}
public static class Microsoft.VisualStudio.GraphModel.Schemas.CodeGraphNodeIdName : object {
    public static GraphNodeIdName Assembly;
    public static GraphNodeIdName File;
    public static GraphNodeIdName Namespace;
    public static GraphNodeIdName Type;
    public static GraphNodeIdName ParentType;
    public static GraphNodeIdName Member;
    public static GraphNodeIdName GenericParameterCountIdentifier;
    public static GraphNodeIdName GenericArgumentsIdentifier;
    public static GraphNodeIdName OverloadingParameters;
    public static GraphNodeIdName Parameter;
    public static GraphNodeIdName ExplicitInterface;
    public static GraphNodeIdName StartLineNumber;
    public static GraphNodeIdName EndLineNumber;
    public static GraphNodeIdName StartCharacterOffset;
    public static GraphNodeIdName EndCharacterOffset;
    public static GraphNodeIdName ParamKind;
    public static GraphNodeIdName LocalVariable;
    public static GraphNodeIdName LocalVariableIndex;
    private static bool _initialized;
    private static CodeGraphNodeIdName();
    internal static void Initialize();
}
public static class Microsoft.VisualStudio.GraphModel.Schemas.CodeLinkCategories : object {
    [CompilerGeneratedAttribute]
private static GraphCategory <References>k__BackingField;
    [CompilerGeneratedAttribute]
private static GraphCategory <Contains>k__BackingField;
    [CompilerGeneratedAttribute]
private static GraphCategory <Implements>k__BackingField;
    [CompilerGeneratedAttribute]
private static GraphCategory <InheritsFrom>k__BackingField;
    [CompilerGeneratedAttribute]
private static GraphCategory <AddHandlerMethod>k__BackingField;
    [CompilerGeneratedAttribute]
private static GraphCategory <RaiseEventMethod>k__BackingField;
    [CompilerGeneratedAttribute]
private static GraphCategory <RemoveHandlerMethod>k__BackingField;
    [CompilerGeneratedAttribute]
private static GraphCategory <Calls>k__BackingField;
    [CompilerGeneratedAttribute]
private static GraphCategory <GetMethod>k__BackingField;
    [CompilerGeneratedAttribute]
private static GraphCategory <SetMethod>k__BackingField;
    [CompilerGeneratedAttribute]
private static GraphCategory <SourceReferences>k__BackingField;
    [CompilerGeneratedAttribute]
private static GraphCategory <Definitions>k__BackingField;
    private static bool _initialized;
    public static GraphCategory References { get; private set; }
    public static GraphCategory Contains { get; private set; }
    public static GraphCategory Implements { get; private set; }
    public static GraphCategory InheritsFrom { get; private set; }
    public static GraphCategory AddHandlerMethod { get; private set; }
    public static GraphCategory RaiseEventMethod { get; private set; }
    public static GraphCategory RemoveHandlerMethod { get; private set; }
    public static GraphCategory Calls { get; private set; }
    public static GraphCategory GetMethod { get; private set; }
    public static GraphCategory SetMethod { get; private set; }
    public static GraphCategory SourceReferences { get; private set; }
    public static GraphCategory Definitions { get; private set; }
    private static CodeLinkCategories();
    [CompilerGeneratedAttribute]
public static GraphCategory get_References();
    [CompilerGeneratedAttribute]
private static void set_References(GraphCategory value);
    [CompilerGeneratedAttribute]
public static GraphCategory get_Contains();
    [CompilerGeneratedAttribute]
private static void set_Contains(GraphCategory value);
    [CompilerGeneratedAttribute]
public static GraphCategory get_Implements();
    [CompilerGeneratedAttribute]
private static void set_Implements(GraphCategory value);
    [CompilerGeneratedAttribute]
public static GraphCategory get_InheritsFrom();
    [CompilerGeneratedAttribute]
private static void set_InheritsFrom(GraphCategory value);
    [CompilerGeneratedAttribute]
public static GraphCategory get_AddHandlerMethod();
    [CompilerGeneratedAttribute]
private static void set_AddHandlerMethod(GraphCategory value);
    [CompilerGeneratedAttribute]
public static GraphCategory get_RaiseEventMethod();
    [CompilerGeneratedAttribute]
private static void set_RaiseEventMethod(GraphCategory value);
    [CompilerGeneratedAttribute]
public static GraphCategory get_RemoveHandlerMethod();
    [CompilerGeneratedAttribute]
private static void set_RemoveHandlerMethod(GraphCategory value);
    [CompilerGeneratedAttribute]
public static GraphCategory get_Calls();
    [CompilerGeneratedAttribute]
private static void set_Calls(GraphCategory value);
    [CompilerGeneratedAttribute]
public static GraphCategory get_GetMethod();
    [CompilerGeneratedAttribute]
private static void set_GetMethod(GraphCategory value);
    [CompilerGeneratedAttribute]
public static GraphCategory get_SetMethod();
    [CompilerGeneratedAttribute]
private static void set_SetMethod(GraphCategory value);
    [CompilerGeneratedAttribute]
public static GraphCategory get_SourceReferences();
    [CompilerGeneratedAttribute]
private static void set_SourceReferences(GraphCategory value);
    [CompilerGeneratedAttribute]
public static GraphCategory get_Definitions();
    [CompilerGeneratedAttribute]
private static void set_Definitions(GraphCategory value);
    internal static void Initialize();
}
public static class Microsoft.VisualStudio.GraphModel.Schemas.CodeNodeCategories : object {
    [CompilerGeneratedAttribute]
private static GraphCategory <Member>k__BackingField;
    [CompilerGeneratedAttribute]
private static GraphCategory <Field>k__BackingField;
    [CompilerGeneratedAttribute]
private static GraphCategory <Event>k__BackingField;
    [CompilerGeneratedAttribute]
private static GraphCategory <Method>k__BackingField;
    [CompilerGeneratedAttribute]
private static GraphCategory <Parameter>k__BackingField;
    [CompilerGeneratedAttribute]
private static GraphCategory <Property>k__BackingField;
    [CompilerGeneratedAttribute]
private static GraphCategory <Namespace>k__BackingField;
    [CompilerGeneratedAttribute]
private static GraphCategory <Project>k__BackingField;
    [CompilerGeneratedAttribute]
private static GraphCategory <ProjectItem>k__BackingField;
    [CompilerGeneratedAttribute]
private static GraphCategory <Solution>k__BackingField;
    [CompilerGeneratedAttribute]
private static GraphCategory <Type>k__BackingField;
    [CompilerGeneratedAttribute]
private static GraphCategory <Class>k__BackingField;
    [CompilerGeneratedAttribute]
private static GraphCategory <Delegate>k__BackingField;
    [CompilerGeneratedAttribute]
private static GraphCategory <Enum>k__BackingField;
    [CompilerGeneratedAttribute]
private static GraphCategory <Interface>k__BackingField;
    [CompilerGeneratedAttribute]
private static GraphCategory <Module>k__BackingField;
    [CompilerGeneratedAttribute]
private static GraphCategory <Struct>k__BackingField;
    [CompilerGeneratedAttribute]
private static GraphCategory <File>k__BackingField;
    [CompilerGeneratedAttribute]
private static GraphCategory <Assembly>k__BackingField;
    [CompilerGeneratedAttribute]
private static GraphCategory <ProjectFolder>k__BackingField;
    [CompilerGeneratedAttribute]
private static GraphCategory <SourceLocation>k__BackingField;
    private static bool _initialized;
    public static GraphCategory Member { get; private set; }
    public static GraphCategory Field { get; private set; }
    public static GraphCategory Event { get; private set; }
    public static GraphCategory Method { get; private set; }
    public static GraphCategory Parameter { get; private set; }
    public static GraphCategory Property { get; private set; }
    public static GraphCategory Namespace { get; private set; }
    public static GraphCategory Project { get; private set; }
    public static GraphCategory ProjectItem { get; private set; }
    public static GraphCategory Solution { get; private set; }
    public static GraphCategory Type { get; private set; }
    public static GraphCategory Class { get; private set; }
    public static GraphCategory Delegate { get; private set; }
    public static GraphCategory Enum { get; private set; }
    public static GraphCategory Interface { get; private set; }
    public static GraphCategory Module { get; private set; }
    public static GraphCategory Struct { get; private set; }
    public static GraphCategory File { get; private set; }
    public static GraphCategory Assembly { get; private set; }
    public static GraphCategory ProjectFolder { get; private set; }
    public static GraphCategory SourceLocation { get; private set; }
    private static CodeNodeCategories();
    [CompilerGeneratedAttribute]
public static GraphCategory get_Member();
    [CompilerGeneratedAttribute]
private static void set_Member(GraphCategory value);
    [CompilerGeneratedAttribute]
public static GraphCategory get_Field();
    [CompilerGeneratedAttribute]
private static void set_Field(GraphCategory value);
    [CompilerGeneratedAttribute]
public static GraphCategory get_Event();
    [CompilerGeneratedAttribute]
private static void set_Event(GraphCategory value);
    [CompilerGeneratedAttribute]
public static GraphCategory get_Method();
    [CompilerGeneratedAttribute]
private static void set_Method(GraphCategory value);
    [CompilerGeneratedAttribute]
public static GraphCategory get_Parameter();
    [CompilerGeneratedAttribute]
private static void set_Parameter(GraphCategory value);
    [CompilerGeneratedAttribute]
public static GraphCategory get_Property();
    [CompilerGeneratedAttribute]
private static void set_Property(GraphCategory value);
    [CompilerGeneratedAttribute]
public static GraphCategory get_Namespace();
    [CompilerGeneratedAttribute]
private static void set_Namespace(GraphCategory value);
    [CompilerGeneratedAttribute]
public static GraphCategory get_Project();
    [CompilerGeneratedAttribute]
private static void set_Project(GraphCategory value);
    [CompilerGeneratedAttribute]
public static GraphCategory get_ProjectItem();
    [CompilerGeneratedAttribute]
private static void set_ProjectItem(GraphCategory value);
    [CompilerGeneratedAttribute]
public static GraphCategory get_Solution();
    [CompilerGeneratedAttribute]
private static void set_Solution(GraphCategory value);
    [CompilerGeneratedAttribute]
public static GraphCategory get_Type();
    [CompilerGeneratedAttribute]
private static void set_Type(GraphCategory value);
    [CompilerGeneratedAttribute]
public static GraphCategory get_Class();
    [CompilerGeneratedAttribute]
private static void set_Class(GraphCategory value);
    [CompilerGeneratedAttribute]
public static GraphCategory get_Delegate();
    [CompilerGeneratedAttribute]
private static void set_Delegate(GraphCategory value);
    [CompilerGeneratedAttribute]
public static GraphCategory get_Enum();
    [CompilerGeneratedAttribute]
private static void set_Enum(GraphCategory value);
    [CompilerGeneratedAttribute]
public static GraphCategory get_Interface();
    [CompilerGeneratedAttribute]
private static void set_Interface(GraphCategory value);
    [CompilerGeneratedAttribute]
public static GraphCategory get_Module();
    [CompilerGeneratedAttribute]
private static void set_Module(GraphCategory value);
    [CompilerGeneratedAttribute]
public static GraphCategory get_Struct();
    [CompilerGeneratedAttribute]
private static void set_Struct(GraphCategory value);
    [CompilerGeneratedAttribute]
public static GraphCategory get_File();
    [CompilerGeneratedAttribute]
private static void set_File(GraphCategory value);
    [CompilerGeneratedAttribute]
public static GraphCategory get_Assembly();
    [CompilerGeneratedAttribute]
private static void set_Assembly(GraphCategory value);
    [CompilerGeneratedAttribute]
public static GraphCategory get_ProjectFolder();
    [CompilerGeneratedAttribute]
private static void set_ProjectFolder(GraphCategory value);
    [CompilerGeneratedAttribute]
public static GraphCategory get_SourceLocation();
    [CompilerGeneratedAttribute]
private static void set_SourceLocation(GraphCategory value);
    internal static void Initialize();
}
public static class Microsoft.VisualStudio.GraphModel.Schemas.CodeNodeProperties : object {
    [CompilerGeneratedAttribute]
private static GraphProperty <SourceLocation>k__BackingField;
    [CompilerGeneratedAttribute]
private static GraphProperty <IdentifierSourceLocation>k__BackingField;
    [CompilerGeneratedAttribute]
private static GraphProperty <IsCompilerGenerated>k__BackingField;
    private static bool _initialized;
    public static GraphProperty SourceLocation { get; private set; }
    public static GraphProperty IdentifierSourceLocation { get; private set; }
    public static GraphProperty IsCompilerGenerated { get; private set; }
    private static CodeNodeProperties();
    [CompilerGeneratedAttribute]
public static GraphProperty get_SourceLocation();
    [CompilerGeneratedAttribute]
private static void set_SourceLocation(GraphProperty value);
    [CompilerGeneratedAttribute]
public static GraphProperty get_IdentifierSourceLocation();
    [CompilerGeneratedAttribute]
private static void set_IdentifierSourceLocation(GraphProperty value);
    [CompilerGeneratedAttribute]
public static GraphProperty get_IsCompilerGenerated();
    [CompilerGeneratedAttribute]
private static void set_IsCompilerGenerated(GraphProperty value);
    internal static void Initialize();
}
public static class Microsoft.VisualStudio.GraphModel.Schemas.CodeSchema : object {
    public static string Name;
    [CompilerGeneratedAttribute]
private static GraphSchema <Schema>k__BackingField;
    public static GraphSchema Schema { get; private set; }
    private static CodeSchema();
    [CompilerGeneratedAttribute]
public static GraphSchema get_Schema();
    [CompilerGeneratedAttribute]
private static void set_Schema(GraphSchema value);
}
[GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "4.0.0.0")]
[DebuggerNonUserCodeAttribute]
[CompilerGeneratedAttribute]
internal class Microsoft.VisualStudio.GraphModel.Schemas.CodeSchemaResources : object {
    private static ResourceManager resourceMan;
    private static CultureInfo resourceCulture;
    [EditorBrowsableAttribute("2")]
internal static ResourceManager ResourceManager { get; }
    [EditorBrowsableAttribute("2")]
internal static CultureInfo Culture { get; internal set; }
    internal static string CodeSchema_AddHandlerMethod_Label { get; }
    internal static string CodeSchema_Assembly_Label { get; }
    internal static string CodeSchema_Calls_Label { get; }
    internal static string CodeSchema_Class_Label { get; }
    internal static string CodeSchema_ContainsChildren_Label { get; }
    internal static string CodeSchema_Definitions_Label { get; }
    internal static string CodeSchema_Delegate_Label { get; }
    internal static string CodeSchema_EndCharacterOffset_Label { get; }
    internal static string CodeSchema_EndLineNumber_Label { get; }
    internal static string CodeSchema_Enum_Label { get; }
    internal static string CodeSchema_Event_Label { get; }
    internal static string CodeSchema_ExplicitInterfaceName_Label { get; }
    internal static string CodeSchema_Field_Label { get; }
    internal static string CodeSchema_File_Label { get; }
    internal static string CodeSchema_GenericArgumentsName_Label { get; }
    internal static string CodeSchema_GenericParameterCountName_Label { get; }
    internal static string CodeSchema_GetMethod_Label { get; }
    internal static string CodeSchema_IdentifierSourceLocation_Label { get; }
    internal static string CodeSchema_Implements_Label { get; }
    internal static string CodeSchema_InheritsFrom_Label { get; }
    internal static string CodeSchema_Interface_Label { get; }
    internal static string CodeSchema_IsCompilerGenerated_Label { get; }
    internal static string CodeSchema_LocalVariable_Label { get; }
    internal static string CodeSchema_LocalVariableIndex_Label { get; }
    internal static string CodeSchema_Member_Label { get; }
    internal static string CodeSchema_Method_Label { get; }
    internal static string CodeSchema_Module_Label { get; }
    internal static string CodeSchema_Namespace_Label { get; }
    internal static string CodeSchema_NavigateToItem_Label { get; }
    internal static string CodeSchema_Parameter_Label { get; }
    internal static string CodeSchema_ParameterIdentifierName_Label { get; }
    internal static string CodeSchema_ParamKind_Label { get; }
    internal static string CodeSchema_ParentTypeName_Label { get; }
    internal static string CodeSchema_Project_Label { get; }
    internal static string CodeSchema_ProjectFolder_Label { get; }
    internal static string CodeSchema_ProjectItem_Label { get; }
    internal static string CodeSchema_Property_Label { get; }
    internal static string CodeSchema_RaiseEventMethod_Label { get; }
    internal static string CodeSchema_References_Label { get; }
    internal static string CodeSchema_RemoveHandlerMethod_Label { get; }
    internal static string CodeSchema_SetMethod_Label { get; }
    internal static string CodeSchema_Solution_Label { get; }
    internal static string CodeSchema_SourceLocation_Label { get; }
    internal static string CodeSchema_SourceReferences_Label { get; }
    internal static string CodeSchema_StartCharacterOffset_Label { get; }
    internal static string CodeSchema_StartLineNumber_Label { get; }
    internal static string CodeSchema_Struct_Label { get; }
    internal static string CodeSchema_Type_Label { get; }
    internal static ResourceManager get_ResourceManager();
    internal static CultureInfo get_Culture();
    internal static void set_Culture(CultureInfo value);
    internal static string get_CodeSchema_AddHandlerMethod_Label();
    internal static string get_CodeSchema_Assembly_Label();
    internal static string get_CodeSchema_Calls_Label();
    internal static string get_CodeSchema_Class_Label();
    internal static string get_CodeSchema_ContainsChildren_Label();
    internal static string get_CodeSchema_Definitions_Label();
    internal static string get_CodeSchema_Delegate_Label();
    internal static string get_CodeSchema_EndCharacterOffset_Label();
    internal static string get_CodeSchema_EndLineNumber_Label();
    internal static string get_CodeSchema_Enum_Label();
    internal static string get_CodeSchema_Event_Label();
    internal static string get_CodeSchema_ExplicitInterfaceName_Label();
    internal static string get_CodeSchema_Field_Label();
    internal static string get_CodeSchema_File_Label();
    internal static string get_CodeSchema_GenericArgumentsName_Label();
    internal static string get_CodeSchema_GenericParameterCountName_Label();
    internal static string get_CodeSchema_GetMethod_Label();
    internal static string get_CodeSchema_IdentifierSourceLocation_Label();
    internal static string get_CodeSchema_Implements_Label();
    internal static string get_CodeSchema_InheritsFrom_Label();
    internal static string get_CodeSchema_Interface_Label();
    internal static string get_CodeSchema_IsCompilerGenerated_Label();
    internal static string get_CodeSchema_LocalVariable_Label();
    internal static string get_CodeSchema_LocalVariableIndex_Label();
    internal static string get_CodeSchema_Member_Label();
    internal static string get_CodeSchema_Method_Label();
    internal static string get_CodeSchema_Module_Label();
    internal static string get_CodeSchema_Namespace_Label();
    internal static string get_CodeSchema_NavigateToItem_Label();
    internal static string get_CodeSchema_Parameter_Label();
    internal static string get_CodeSchema_ParameterIdentifierName_Label();
    internal static string get_CodeSchema_ParamKind_Label();
    internal static string get_CodeSchema_ParentTypeName_Label();
    internal static string get_CodeSchema_Project_Label();
    internal static string get_CodeSchema_ProjectFolder_Label();
    internal static string get_CodeSchema_ProjectItem_Label();
    internal static string get_CodeSchema_Property_Label();
    internal static string get_CodeSchema_RaiseEventMethod_Label();
    internal static string get_CodeSchema_References_Label();
    internal static string get_CodeSchema_RemoveHandlerMethod_Label();
    internal static string get_CodeSchema_SetMethod_Label();
    internal static string get_CodeSchema_Solution_Label();
    internal static string get_CodeSchema_SourceLocation_Label();
    internal static string get_CodeSchema_SourceReferences_Label();
    internal static string get_CodeSchema_StartCharacterOffset_Label();
    internal static string get_CodeSchema_StartLineNumber_Label();
    internal static string get_CodeSchema_Struct_Label();
    internal static string get_CodeSchema_Type_Label();
}
public static class Microsoft.VisualStudio.GraphModel.Schemas.DgmlCommonSchema : object {
    public static string Name;
    [CompilerGeneratedAttribute]
private static GraphSchema <Schema>k__BackingField;
    public static GraphSchema Schema { get; private set; }
    private static DgmlCommonSchema();
    [CompilerGeneratedAttribute]
public static GraphSchema get_Schema();
    [CompilerGeneratedAttribute]
private static void set_Schema(GraphSchema value);
}
public static class Microsoft.VisualStudio.GraphModel.Schemas.DgmlNodeProperties : object {
    [CompilerGeneratedAttribute]
private static GraphProperty <Icon>k__BackingField;
    [CompilerGeneratedAttribute]
private static GraphProperty <ContainsChildren>k__BackingField;
    [CompilerGeneratedAttribute]
private static GraphProperty <GetCategories>k__BackingField;
    [CompilerGeneratedAttribute]
private static GraphProperty <Aggregator>k__BackingField;
    private static bool _initialized;
    public static GraphProperty Icon { get; private set; }
    public static GraphProperty ContainsChildren { get; private set; }
    public static GraphProperty GetCategories { get; private set; }
    public static GraphProperty Aggregator { get; private set; }
    private static DgmlNodeProperties();
    [CompilerGeneratedAttribute]
public static GraphProperty get_Icon();
    [CompilerGeneratedAttribute]
private static void set_Icon(GraphProperty value);
    [CompilerGeneratedAttribute]
public static GraphProperty get_ContainsChildren();
    [CompilerGeneratedAttribute]
private static void set_ContainsChildren(GraphProperty value);
    [CompilerGeneratedAttribute]
public static GraphProperty get_GetCategories();
    [CompilerGeneratedAttribute]
private static void set_GetCategories(GraphProperty value);
    [CompilerGeneratedAttribute]
public static GraphProperty get_Aggregator();
    [CompilerGeneratedAttribute]
private static void set_Aggregator(GraphProperty value);
    internal static void Initialize();
}
[GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "4.0.0.0")]
[DebuggerNonUserCodeAttribute]
[CompilerGeneratedAttribute]
internal class Microsoft.VisualStudio.GraphModel.Schemas.DgmlSchemaResources : object {
    private static ResourceManager resourceMan;
    private static CultureInfo resourceCulture;
    [EditorBrowsableAttribute("2")]
internal static ResourceManager ResourceManager { get; }
    [EditorBrowsableAttribute("2")]
internal static CultureInfo Culture { get; internal set; }
    internal static string DgmlCommonSchema_ContainsChildren_Label { get; }
    internal static string DgmlCommonSchema_Icon_Label { get; }
    internal static ResourceManager get_ResourceManager();
    internal static CultureInfo get_Culture();
    internal static void set_Culture(CultureInfo value);
    internal static string get_DgmlCommonSchema_ContainsChildren_Label();
    internal static string get_DgmlCommonSchema_Icon_Label();
}
[ExtensionAttribute]
internal static class Microsoft.VisualStudio.GraphModel.Schemas.SchemaHelpers : object {
    [ExtensionAttribute]
internal static GraphCategory RegisterNodeCategory(GraphSchema schema, string id, string label);
    [ExtensionAttribute]
internal static GraphCategory RegisterNodeCategory(GraphSchema schema, string id, string label, GraphCategory basedOn);
    [ExtensionAttribute]
internal static GraphCategory RegisterLinkCategory(GraphSchema schema, string id, string label, bool isContainment);
    [ExtensionAttribute]
internal static GraphProperty RegisterProperty(GraphSchema schema, string id, string label, Type type, GraphMetadataOptions options);
}
internal class Microsoft.VisualStudio.GraphModel.SmallParentCollection : ValueType {
    private object _parents;
    public static IEnumerable`1<GraphGroup> EmptyParents;
    public bool HasParent { get; }
    public IEnumerable`1<GraphGroup> ParentGroups { get; }
    private static SmallParentCollection();
    public bool get_HasParent();
    public IEnumerable`1<GraphGroup> get_ParentGroups();
    internal void AddParentGroup(GraphGroup group);
    internal void RemoveParentGroup(GraphGroup group);
    public void Clear();
    public bool Contains(GraphGroup parent);
}
internal class Microsoft.VisualStudio.GraphModel.Styles.CompiledCondition : object {
    public GraphCondition Condition;
    public CompiledStyle Style;
    public Func`2<object, object> Expression;
    public virtual bool Evaluate(object context);
}
internal class Microsoft.VisualStudio.GraphModel.Styles.CompiledSetter : object {
    public GraphSetter Setter;
    public CompiledStyle Style;
    public string Property;
    public Func`2<object, object> Expression;
}
internal class Microsoft.VisualStudio.GraphModel.Styles.CompiledStyle : object {
    public GraphConditionalStyle Style;
    public Type TargetType;
    public List`1<CompiledCondition> Conditions;
    public List`1<CompiledSetter> Setters;
}
internal class Microsoft.VisualStudio.GraphModel.Styles.CompiledStyleSet : object {
    private Graph _graph;
    private IDictionary`2<Type, IDictionary`2<string, IList`1<GraphConditionalStyle>>> _index;
    private IDictionary`2<GraphProperty, List`1<CompiledSetter>> _propertiesReferencedBySetters;
    private IDictionary`2<GraphProperty, List`1<CompiledCondition>> _propertiesReferencedByConditions;
    private IDictionary`2<GraphCategory, List`1<CompiledCondition>> _categoriesReferencedByConditions;
    private bool _listening;
    private List`1<CompiledStyle> _compiledStyles;
    [CompilerGeneratedAttribute]
private bool <IsCompiled>k__BackingField;
    private EventHandler`1<GraphErrorEventArgs> _compileErrorCallback;
    private Dictionary`2<CompiledStyle, HashSet`1<string>> _notifyList;
    private Dictionary`2<CompiledSetter, HashSet`1<GraphObject>> _objectNotifyList;
    public bool IsCompiled { get; public set; }
    public bool HasPendingPropertyChangeEvents { get; }
    public CompiledStyleSet(Graph graph);
    private void OnGraphUpdated(object sender, GraphUpdatedEventArgs e);
    [CompilerGeneratedAttribute]
public bool get_IsCompiled();
    [CompilerGeneratedAttribute]
public void set_IsCompiled(bool value);
    public void RegisterTargetType(Type t);
    public Type GetRegisteredTargetType(string name);
    private void Clear();
    private void ReportError(GraphObject context, string message);
    public void Compile(EventHandler`1<GraphErrorEventArgs> compileErrorCallback);
    private void CompileCondition(CompiledStyle parent, GraphConditionalStyle style, GraphCondition condition);
    private void CompileSetter(CompiledStyle parent, GraphConditionalStyle style, GraphSetter setter);
    private static Type GetPropertyType(Graph owner, Type targetType, string propertyName);
    internal static object Convert(Type type, string value);
    internal static string ConvertToString(object value);
    public void Reindex();
    public bool HasProperty(object context, string propertyName);
    private bool HasProperty(IDictionary`2<string, IList`1<GraphConditionalStyle>> styles, object context, string propertyName);
    public U GetProperty(object context, string propertyName);
    private T GetProperty(IDictionary`2<string, IList`1<GraphConditionalStyle>> styles, object context, string propertyName, Boolean& found);
    internal void OnUpdate(GraphUpdatedEventArgs args);
    public bool get_HasPendingPropertyChangeEvents();
    public void RaisePendingPropertyChangeEvents(IEnumerable`1<GraphObject> graphObjects);
    private void AddChangedSetter(CompiledSetter setter, CompiledStyle style);
    private void AddAllChangedSetters(CompiledStyle style);
    private void RaisePropertyChangeEvents(GraphObject graphObject);
    private void RaisePropertyChangeEvents(GraphObject graphObject, GraphObject wrapper);
    private void HandleChangedProperties(GraphUpdatedEventArgs args, GraphObject graphObject);
    private void HandleChangedCategories(GraphUpdatedEventArgs args, GraphObject graphObject);
    private void AddChangedSetter(GraphObject scope, CompiledSetter setter);
}
internal class Microsoft.VisualStudio.GraphModel.Styles.ExpressionParser : object {
    private Graph _graph;
    private GraphSchema _schema;
    private IDictionary`2<string, Type> _trustedTypes;
    private IEnumerator`1<TokenInfo> _tokens;
    private Expression _context;
    private Nullable`1<TokenInfo> _lookAhead;
    private int _parentheses;
    private int _methods;
    private HashSet`1<GraphProperty> _usedProperties;
    private HashSet`1<GraphCategory> _usedCategories;
    public HashSet`1<GraphProperty> ReferencedProperties { get; }
    public HashSet`1<GraphCategory> ReferencedCategories { get; }
    public void RegisterTrustedType(Type type);
    public HashSet`1<GraphProperty> get_ReferencedProperties();
    public HashSet`1<GraphCategory> get_ReferencedCategories();
    public Func`2<object, object> Parse(Graph graph, string expression, Type contextType, Type resultType, Expression& body);
    private TokenInfo GetNextToken();
    private TokenInfo PeekNextToken();
    private void Push(TokenInfo info);
    public static string GetConstant(object value);
    private Expression ParseExpression();
    private Expression Reduce(Stack`1<Pair> stack, Expression e, int precedence);
    private Expression ParseUnaryExpression(TokenInfo token, UnaryOperator op);
    private void CoerceExpressions(Expression& left, Expression& right);
    private Expression CreateBinaryExpression(TokenInfo token, Expression left, Expression right);
    private Expression CreateNumericBinaryOperator(Expression left, Expression right, string name, BinaryOperator op);
    private Expression FindOperator(string name, Expression left, Expression right);
    private Expression ConvertToBoolean(Expression expression);
    private Expression ConvertToDouble(Expression expression);
    private Expression FindCategoryExpression(Expression expression);
    private Expression FindPropertyExpression(Expression expression);
    private Expression Convert(Expression expression, Type target);
    private Expression ConvertToType(Expression expression, Type target, bool throwException);
    private Expression Coerce(Expression source, Type target);
    private Nullable`1<int> GetPrecision(Type t);
    private Expression CoerceImplicitly(Expression source, Type target);
    private Expression CoerceExplicitly(Expression source, Type target);
    private Expression FindCastOperator(string name, Expression source, Type target);
    private Expression ParseMemberBinding(Expression context, TokenInfo identifier);
    private Expression ParseMethodCall(Expression context, Type targetType, string methodName);
    private Expression[] ParseArguments();
    private int GetConversionScore(Expression source, Type target, Expression& coersion);
    private MethodInfo FindMatchingMethod(Expression context, Type targetType, string methodName, List`1<Expression> arguments);
    private void TrackUsedCategoriesAndProperties(string methodName, List`1<Expression> arguments);
    private static MethodInfo GetGenericMethod(MethodInfo mi, Type targetType);
    private void Expecting(TokenInfo found, Token[] tokens);
}
public class Microsoft.VisualStudio.GraphModel.Styles.GraphCondition : GraphObject {
    private GraphConditionalStyle _style;
    [CompilerGeneratedAttribute]
private Func`2<object, object> <Compiled>k__BackingField;
    [CompilerGeneratedAttribute]
private Expression <ExpressionTree>k__BackingField;
    public GraphConditionalStyle Style { get; }
    internal Func`2<object, object> Compiled { get; internal set; }
    public string Expression { get; public set; }
    internal Expression ExpressionTree { get; internal set; }
    public GraphCondition(GraphConditionalStyle owner);
    public GraphConditionalStyle get_Style();
    [CompilerGeneratedAttribute]
internal Func`2<object, object> get_Compiled();
    [CompilerGeneratedAttribute]
internal void set_Compiled(Func`2<object, object> value);
    public string get_Expression();
    public void set_Expression(string value);
    [CompilerGeneratedAttribute]
internal Expression get_ExpressionTree();
    [CompilerGeneratedAttribute]
internal void set_ExpressionTree(Expression value);
    public virtual bool Evaluate(object context);
}
public class Microsoft.VisualStudio.GraphModel.Styles.GraphConditionalStyle : GraphObject {
    private GraphConditionCollection _conditions;
    private GraphSetterCollection _setters;
    private int _index;
    [CompilerGeneratedAttribute]
private bool <IsFiltered>k__BackingField;
    private bool _insideMatches;
    public bool IsFiltered { get; public set; }
    public bool IsEnabled { get; public set; }
    public Type TargetType { get; public set; }
    public string GroupLabel { get; public set; }
    public string ValueLabel { get; public set; }
    public string ToolTip { get; public set; }
    public GraphConditionCollection Conditions { get; }
    public int Index { get; internal set; }
    public GraphSetterCollection Setters { get; }
    public GraphConditionalStyle(Graph owner);
    [CompilerGeneratedAttribute]
public bool get_IsFiltered();
    [CompilerGeneratedAttribute]
public void set_IsFiltered(bool value);
    public bool get_IsEnabled();
    public void set_IsEnabled(bool value);
    public Type get_TargetType();
    public void set_TargetType(Type value);
    public string get_GroupLabel();
    public void set_GroupLabel(string value);
    public string get_ValueLabel();
    public void set_ValueLabel(string value);
    public string get_ToolTip();
    public void set_ToolTip(string value);
    public GraphConditionCollection get_Conditions();
    public int get_Index();
    internal void set_Index(int value);
    public GraphSetterCollection get_Setters();
    public bool Matches(object context);
    public void MergeSetters(GraphConditionalStyle other);
}
public class Microsoft.VisualStudio.GraphModel.Styles.GraphConditionalStyleCollection : object {
    private TransactedList`1<GraphConditionalStyle> _styles;
    private Graph _graph;
    private CompiledStyleSet _compiled;
    public int Count { get; }
    public bool IsReadOnly { get; }
    public Graph Graph { get; }
    public Graph Owner { get; }
    internal CompiledStyleSet CompiledStyleSet { get; }
    public bool IsCompiled { get; }
    public bool HasPendingPropertyChangeEvents { get; }
    public GraphConditionalStyleCollection(Graph graph);
    public sealed virtual int get_Count();
    public sealed virtual void Add(GraphConditionalStyle item);
    public sealed virtual bool get_IsReadOnly();
    public sealed virtual void CopyTo(GraphConditionalStyle[] array, int arrayIndex);
    public sealed virtual bool Remove(GraphConditionalStyle item);
    public void MergeOrInsert(GraphConditionalStyle style, int index);
    public sealed virtual bool Contains(GraphConditionalStyle item);
    public GraphConditionalStyle Insert(int index, GraphConditionalStyle style);
    public sealed virtual void Clear();
    public Graph get_Graph();
    public sealed virtual Graph get_Owner();
    public GraphConditionalStyle FindStyle(string groupLabel);
    public sealed virtual IEnumerator`1<GraphConditionalStyle> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    internal CompiledStyleSet get_CompiledStyleSet();
    public void Compile(EventHandler`1<GraphErrorEventArgs> compileErrorCallback);
    public bool get_IsCompiled();
    public bool get_HasPendingPropertyChangeEvents();
    public void RaisePendingPropertyChangeEvents(IEnumerable`1<GraphObject> graphObjects);
}
public class Microsoft.VisualStudio.GraphModel.Styles.GraphConditionCollection : object {
    private TransactedList`1<GraphCondition> _conditions;
    private Graph _graph;
    public Graph Owner { get; }
    public Graph Graph { get; }
    public int Count { get; }
    public bool IsReadOnly { get; }
    public GraphConditionCollection(Graph owner);
    public sealed virtual Graph get_Owner();
    public Graph get_Graph();
    public sealed virtual int get_Count();
    public sealed virtual void Add(GraphCondition item);
    public sealed virtual bool get_IsReadOnly();
    public sealed virtual void CopyTo(GraphCondition[] array, int arrayIndex);
    public sealed virtual bool Remove(GraphCondition item);
    public sealed virtual bool Contains(GraphCondition item);
    public void Insert(int index, GraphCondition condition);
    public sealed virtual void Clear();
    public sealed virtual IEnumerator`1<GraphCondition> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
}
public class Microsoft.VisualStudio.GraphModel.Styles.GraphErrorEventArgs : EventArgs {
    private GraphObject _context;
    private string _message;
    public GraphObject Context { get; }
    public string Message { get; }
    public GraphErrorEventArgs(GraphObject context, string message);
    public GraphObject get_Context();
    public string get_Message();
}
public class Microsoft.VisualStudio.GraphModel.Styles.GraphSetter : GraphObject {
    private object _typedValue;
    private GraphConditionalStyle _style;
    private string _propertyName;
    [CompilerGeneratedAttribute]
private Func`2<object, object> <Compiled>k__BackingField;
    [CompilerGeneratedAttribute]
private Expression <ExpressionTree>k__BackingField;
    public GraphConditionalStyle Style { get; }
    public string Property { get; }
    public string Expression { get; public set; }
    public string Value { get; public set; }
    public object TypedValue { get; public set; }
    internal Func`2<object, object> Compiled { get; internal set; }
    internal Expression ExpressionTree { get; internal set; }
    public GraphSetter(GraphConditionalStyle owner, string propertyName);
    public GraphConditionalStyle get_Style();
    public string get_Property();
    public string get_Expression();
    public void set_Expression(string value);
    public string get_Value();
    public void set_Value(string value);
    public object get_TypedValue();
    public void set_TypedValue(object value);
    [CompilerGeneratedAttribute]
internal Func`2<object, object> get_Compiled();
    [CompilerGeneratedAttribute]
internal void set_Compiled(Func`2<object, object> value);
    [CompilerGeneratedAttribute]
internal Expression get_ExpressionTree();
    [CompilerGeneratedAttribute]
internal void set_ExpressionTree(Expression value);
    public virtual object Evaluate(object context);
}
public class Microsoft.VisualStudio.GraphModel.Styles.GraphSetterCollection : object {
    private TransactedDictionary`2<string, GraphSetter> _setters;
    private Graph _graph;
    public Graph Graph { get; }
    public Graph Owner { get; }
    public int Count { get; }
    public bool IsReadOnly { get; }
    public GraphSetterCollection(Graph owner);
    public Graph get_Graph();
    public sealed virtual Graph get_Owner();
    public sealed virtual int get_Count();
    public sealed virtual void Add(GraphSetter item);
    public sealed virtual bool get_IsReadOnly();
    public sealed virtual void CopyTo(GraphSetter[] array, int arrayIndex);
    public sealed virtual bool Remove(GraphSetter item);
    public sealed virtual bool Contains(GraphSetter item);
    public GraphSetter Get(string propertyName);
    public sealed virtual void Clear();
    public sealed virtual IEnumerator`1<GraphSetter> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
}
[DefaultMemberAttribute("Item")]
internal class Microsoft.VisualStudio.GraphModel.TransactedDictionary`2 : object {
    private Dictionary`2<TKey, TValue> _master;
    private object _parent;
    private WeakReference _cachedEnumerableReference;
    private int _cachedCount;
    private WeakReference _cachedCountEnumerable;
    [CompilerGeneratedAttribute]
private TransactedDictionaryChangeHandler<TKey, TValue> TransactedDictionaryChanges;
    [CompilerGeneratedAttribute]
private ConflictResolver<TKey, TValue> CommitChangesConflictResolver;
    private IEnumerator`1<KeyValuePair`2<TKey, TValue>> EmptyEnumerator { get; }
    internal int Count { get; }
    internal TValue Item { get; internal set; }
    internal IEnumerable`1<TKey> Keys { get; }
    internal IEnumerable`1<TValue> Values { get; }
    private object Microsoft.VisualStudio.GraphModel.IEnlistableObject.Parent { get; }
    public TransactedDictionary`2(object parent);
    [IteratorStateMachineAttribute("Microsoft.VisualStudio.GraphModel.TransactedDictionary`2/<get_EmptyEnumerator>d__2")]
private IEnumerator`1<KeyValuePair`2<TKey, TValue>> get_EmptyEnumerator();
    [CompilerGeneratedAttribute]
internal void add_TransactedDictionaryChanges(TransactedDictionaryChangeHandler<TKey, TValue> value);
    [CompilerGeneratedAttribute]
internal void remove_TransactedDictionaryChanges(TransactedDictionaryChangeHandler<TKey, TValue> value);
    [CompilerGeneratedAttribute]
internal void add_CommitChangesConflictResolver(ConflictResolver<TKey, TValue> value);
    [CompilerGeneratedAttribute]
internal void remove_CommitChangesConflictResolver(ConflictResolver<TKey, TValue> value);
    private IEnumerable`1<KeyValuePair`2<TKey, TValue>> GetCoalescedList(TransactedDictionaryIsolator`2<TKey, TValue> enlistmentData);
    private sealed virtual override IEnumerator`1<KeyValuePair`2<TKey, TValue>> System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<TKey,TValue>>.GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    internal void Add(TKey key, TValue value);
    internal void Remove(TKey key, TValue value);
    internal void Clear();
    internal int get_Count();
    internal TValue get_Item(TKey key);
    internal void set_Item(TKey key, TValue value);
    internal bool TryGetValue(TKey key, TValue& value);
    internal IEnumerable`1<TKey> get_Keys();
    internal IEnumerable`1<TValue> get_Values();
    private sealed virtual override void Microsoft.VisualStudio.GraphModel.IEnlistableObject.Lock();
    private sealed virtual override void Microsoft.VisualStudio.GraphModel.IEnlistableObject.VerifyChanges(IIsolatorObject isolationObject);
    private sealed virtual override void Microsoft.VisualStudio.GraphModel.IEnlistableObject.CommitChanges(IIsolatorObject isolationObject);
    private sealed virtual override void Microsoft.VisualStudio.GraphModel.IEnlistableObject.RollbackChanges(IIsolatorObject isolationObject);
    private sealed virtual override void Microsoft.VisualStudio.GraphModel.IEnlistableObject.Unlock();
    public bool ContainsKey(TKey key);
    private sealed virtual override object Microsoft.VisualStudio.GraphModel.IEnlistableObject.get_Parent();
}
internal class Microsoft.VisualStudio.GraphModel.TransactedDictionaryIsolator`2 : object {
    private Dictionary`2<TKey, T> _addedItems;
    private Dictionary`2<TKey, T> _removedItems;
    public Dictionary`2<TKey, T> AddedItems { get; }
    public Dictionary`2<TKey, T> RemovedItems { get; }
    public IEnumerable AddedObjects { get; }
    public IEnumerable RemovedObjects { get; }
    public void Add(TKey key, T item);
    public void Remove(TKey key, T item);
    public void ForgetItem(TKey key);
    public IEnumerator`1<KeyValuePair`2<TKey, T>> GetEnumerator();
    public T Get(TKey key);
    public bool IsChangedKey(TKey item);
    public Dictionary`2<TKey, T> get_AddedItems();
    public Dictionary`2<TKey, T> get_RemovedItems();
    [IteratorStateMachineAttribute("Microsoft.VisualStudio.GraphModel.TransactedDictionaryIsolator`2/<Coalesce>d__13")]
public IEnumerable`1<KeyValuePair`2<TKey, T>> Coalesce(IDictionary`2<TKey, T> currentList);
    public sealed virtual IEnumerable get_AddedObjects();
    public sealed virtual IEnumerable get_RemovedObjects();
}
internal class Microsoft.VisualStudio.GraphModel.TransactedHashSet`1 : object {
    private HashSet`1<T> _master;
    private object _parent;
    private IEnumerable`1<T> _cachedEnumerator;
    private IEnumerator`1<T> EmptyEnumerator { get; }
    internal int Count { get; }
    private object Microsoft.VisualStudio.GraphModel.IEnlistableObject.Parent { get; }
    public TransactedHashSet`1(object parent);
    [IteratorStateMachineAttribute("Microsoft.VisualStudio.GraphModel.TransactedHashSet`1/<get_EmptyEnumerator>d__2")]
private IEnumerator`1<T> get_EmptyEnumerator();
    private IEnumerable`1<T> GetCoalescedList(TransactedHashSetIsolator`1<T> enlistmentData);
    private sealed virtual override IEnumerator`1<T> System.Collections.Generic.IEnumerable<T>.GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    internal void Add(T key);
    internal void Remove(T key);
    internal void Clear();
    internal int get_Count();
    internal bool Contains(T key);
    private sealed virtual override void Microsoft.VisualStudio.GraphModel.IEnlistableObject.Lock();
    private sealed virtual override void Microsoft.VisualStudio.GraphModel.IEnlistableObject.VerifyChanges(IIsolatorObject isolationObject);
    private sealed virtual override void Microsoft.VisualStudio.GraphModel.IEnlistableObject.CommitChanges(IIsolatorObject isolationObject);
    private sealed virtual override void Microsoft.VisualStudio.GraphModel.IEnlistableObject.RollbackChanges(IIsolatorObject isolationObject);
    private sealed virtual override void Microsoft.VisualStudio.GraphModel.IEnlistableObject.Unlock();
    private sealed virtual override object Microsoft.VisualStudio.GraphModel.IEnlistableObject.get_Parent();
}
internal class Microsoft.VisualStudio.GraphModel.TransactedHashSetIsolator`1 : object {
    private HashSet`1<T> _addedItems;
    private HashSet`1<T> _removedItems;
    internal HashSet`1<T> AddedItems { get; }
    internal HashSet`1<T> RemovedItems { get; }
    public IEnumerable AddedObjects { get; }
    public IEnumerable RemovedObjects { get; }
    internal void Add(T item);
    internal void Remove(T item);
    public IEnumerator`1<T> GetEnumerator();
    internal T Get(T key);
    internal bool IsRemoved(T item);
    public bool IsChangedKey(T item);
    internal HashSet`1<T> get_AddedItems();
    internal HashSet`1<T> get_RemovedItems();
    [IteratorStateMachineAttribute("Microsoft.VisualStudio.GraphModel.TransactedHashSetIsolator`1/<Coalesce>d__13")]
public IEnumerable`1<T> Coalesce(IEnumerable`1<T> currentSet);
    public sealed virtual IEnumerable get_AddedObjects();
    public sealed virtual IEnumerable get_RemovedObjects();
}
[DefaultMemberAttribute("Item")]
internal class Microsoft.VisualStudio.GraphModel.TransactedList`1 : object {
    private List`1<T> _master;
    private object _parent;
    private IList`1<T> _cachedEnumerator;
    internal int Count { get; }
    internal T Item { get; }
    private object Microsoft.VisualStudio.GraphModel.IEnlistableObject.Parent { get; }
    public TransactedList`1(object parent);
    private IList`1<T> GetCoalescedList(TransactedListIsolator`1<T> enlistmentData);
    private sealed virtual override IEnumerator`1<T> System.Collections.Generic.IEnumerable<T>.GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    internal void Add(T key);
    internal void Insert(int index, T key);
    internal void Remove(T key);
    internal void Clear();
    internal int get_Count();
    internal T get_Item(int index);
    internal bool Contains(T key);
    private sealed virtual override void Microsoft.VisualStudio.GraphModel.IEnlistableObject.Lock();
    private sealed virtual override void Microsoft.VisualStudio.GraphModel.IEnlistableObject.VerifyChanges(IIsolatorObject isolationObject);
    private sealed virtual override void Microsoft.VisualStudio.GraphModel.IEnlistableObject.CommitChanges(IIsolatorObject isolationObject);
    private sealed virtual override void Microsoft.VisualStudio.GraphModel.IEnlistableObject.RollbackChanges(IIsolatorObject isolationObject);
    private sealed virtual override void Microsoft.VisualStudio.GraphModel.IEnlistableObject.Unlock();
    private sealed virtual override object Microsoft.VisualStudio.GraphModel.IEnlistableObject.get_Parent();
}
internal class Microsoft.VisualStudio.GraphModel.TransactedListIsolator`1 : object {
    internal Dictionary`2<T, int> _insertPositions;
    internal List`1<T> _addedItems;
    internal List`1<T> _removedItems;
    internal bool HasInsertedItems { get; }
    internal IEnumerable`1<T> AddedItems { get; }
    internal IEnumerable`1<T> RemovedItems { get; }
    public IEnumerable AddedObjects { get; }
    public IEnumerable RemovedObjects { get; }
    internal void Add(T item);
    internal void Insert(int index, T item);
    internal void Remove(T item);
    public bool IsChangedKey(T item);
    internal bool IsRemoved(T item);
    internal bool get_HasInsertedItems();
    internal IEnumerable`1<T> get_AddedItems();
    internal IEnumerable`1<T> get_RemovedItems();
    public IEnumerable`1<T> Coalesce(IEnumerable`1<T> currentSet);
    internal IList`1<T> CoalesceInserts(IEnumerable`1<T> currentSet);
    [IteratorStateMachineAttribute("Microsoft.VisualStudio.GraphModel.TransactedListIsolator`1/<CoaleseSimple>d__17")]
private IEnumerable`1<T> CoaleseSimple(IEnumerable`1<T> currentSet);
    public sealed virtual IEnumerable get_AddedObjects();
    public sealed virtual IEnumerable get_RemovedObjects();
}
internal class Microsoft.VisualStudio.GraphModel.TransactedPropertyList`1 : object {
    private PropertyList`1<T> _master;
    private object _parent;
    private IEnumerable`1<KeyValuePair`2<GraphProperty, T>> _cachedList;
    private int _cachedListCount;
    private bool _isValueType;
    public int Count { get; }
    public IEnumerable`1<KeyValuePair`2<GraphProperty, T>> Properties { get; }
    public IEnumerable`1<GraphProperty> PropertyKeys { get; }
    public IEnumerable`1<T> PropertyValues { get; }
    private object Microsoft.VisualStudio.GraphModel.IEnlistableObject.Parent { get; }
    public TransactedPropertyList`1(object parent);
    private IEnumerable`1<KeyValuePair`2<GraphProperty, T>> CreateCachedEnumerable(TransactedPropertyListIsolator`1<T> enlistmentData);
    public sealed virtual int get_Count();
    public sealed virtual IEnumerable`1<KeyValuePair`2<GraphProperty, T>> get_Properties();
    public sealed virtual IEnumerable`1<GraphProperty> get_PropertyKeys();
    public sealed virtual IEnumerable`1<T> get_PropertyValues();
    public sealed virtual T Clear(GraphProperty property);
    public sealed virtual bool Contains(GraphProperty property);
    public sealed virtual T GetValue(GraphProperty property);
    public sealed virtual void SetValue(GraphProperty property, Graph metadataGraph, T value);
    public sealed virtual bool TryGetValue(GraphProperty property, T& value);
    private sealed virtual override object Microsoft.VisualStudio.GraphModel.IEnlistableObject.get_Parent();
    private sealed virtual override void Microsoft.VisualStudio.GraphModel.IEnlistableObject.Lock();
    private sealed virtual override void Microsoft.VisualStudio.GraphModel.IEnlistableObject.VerifyChanges(IIsolatorObject isolationObject);
    private sealed virtual override void Microsoft.VisualStudio.GraphModel.IEnlistableObject.CommitChanges(IIsolatorObject isolationObject);
    private sealed virtual override void Microsoft.VisualStudio.GraphModel.IEnlistableObject.RollbackChanges(IIsolatorObject isolationObject);
    private sealed virtual override void Microsoft.VisualStudio.GraphModel.IEnlistableObject.Unlock();
    [ConditionalAttribute("DEBUG")]
private void DEBUGONLY_DumpInfo(GraphProperty property, object value);
}
internal class Microsoft.VisualStudio.GraphModel.TransactedPropertyListIsolator`1 : object {
    private PropertyList`1<T> _addedItems;
    private HashSet`1<GraphProperty> _removedItems;
    public PropertyList`1<T> AddedItems { get; }
    public HashSet`1<GraphProperty> RemovedItems { get; }
    public IEnumerable AddedObjects { get; }
    public IEnumerable RemovedObjects { get; }
    public PropertyList`1<T> get_AddedItems();
    public HashSet`1<GraphProperty> get_RemovedItems();
    public void Add(GraphProperty property, Graph metadataGraph, T value);
    public void Remove(GraphProperty property);
    public bool IsChangedKey(GraphProperty property);
    public sealed virtual IEnumerable get_AddedObjects();
    public sealed virtual IEnumerable get_RemovedObjects();
}
public class Microsoft.VisualStudio.GraphModel.UndoableGraphTransactionScope : GraphTransactionScope {
    public static string UndoDescriptionKey;
    public static string UndoOptionKey;
    public static string DisableUndo;
    public static string ForceAddKey;
    public static string NonDisabledTransactionCount;
    [CompilerGeneratedAttribute]
private EventHandler Disposed;
    public static EventHandler`1<ActiveTransactionsChangedEventArgs> ActiveTransactionsChanged;
    public int NonDisabledTransactions { get; private set; }
    private bool IsDisabled { get; }
    public UndoableGraphTransactionScope(string undoDescription);
    public UndoableGraphTransactionScope(UndoOption option);
    public UndoableGraphTransactionScope(object undoUnitId, UndoOption option);
    public UndoableGraphTransactionScope(object undoUnitId, string undoDescription, UndoOption option);
    internal UndoableGraphTransactionScope(object undoUnitId, string undoDescription, UndoOption option, bool forceAdd);
    [CompilerGeneratedAttribute]
public void add_Disposed(EventHandler value);
    [CompilerGeneratedAttribute]
public void remove_Disposed(EventHandler value);
    protected virtual void Dispose(bool disposing);
    public int get_NonDisabledTransactions();
    private void set_NonDisabledTransactions(int value);
    private bool get_IsDisabled();
    protected virtual void OnActiveTransactionsChanged(int currentNumberOfTransactions, int threadId);
    public static UndoOption GetUndoOption(Dictionary`2<object, object> scopeProperties);
    public static string GetUndoDescription(Dictionary`2<object, object> scopeProperties);
    public static object GetUndoId(Dictionary`2<object, object> scopeProperties);
    public static bool IsForceAdd(Dictionary`2<object, object> scopeProperties);
}
public enum Microsoft.VisualStudio.GraphModel.UndoOption : Enum {
    public int value__;
    public static UndoOption Add;
    public static UndoOption Disable;
    public static UndoOption Merge;
}
internal class Microsoft.VisualStudio.GraphModel.WeakEventDelegate`1 : WeakReference {
    private static object _staticObject;
    [CompilerGeneratedAttribute]
private MethodInfo <Method>k__BackingField;
    public bool IsStatic { get; }
    public MethodInfo Method { get; private set; }
    public Delegate Delegate { get; }
    public WeakEventDelegate`1(T target);
    private static WeakEventDelegate`1();
    public bool get_IsStatic();
    [CompilerGeneratedAttribute]
public MethodInfo get_Method();
    [CompilerGeneratedAttribute]
private void set_Method(MethodInfo value);
    public Delegate get_Delegate();
    public bool Matches(T t);
}
internal class Microsoft.VisualStudio.GraphModel.WeakEventDelegateCollection`1 : object {
    private List`1<WeakEventDelegate`1<T>> _list;
    public int Count { get; }
    private IEnumerable`1<Delegate> ActiveList { get; }
    public void Add(T callback);
    public void Remove(T callback);
    public int get_Count();
    public void Fire(Object[] args);
    [IteratorStateMachineAttribute("Microsoft.VisualStudio.GraphModel.WeakEventDelegateCollection`1/<get_ActiveList>d__7")]
private IEnumerable`1<Delegate> get_ActiveList();
    private void CleanupDeadItems();
}
internal class Microsoft.VisualStudio.GraphModel.WeakIdDictionary : object {
    private Dictionary`2<int, List`1<WeakReference>> _table;
    private static int CleanupFrequency;
    private int currentCount;
    private int lastCleanupCount;
    private long lastCleanupTick;
    [CompilerGeneratedAttribute]
private bool <ThrottleCleanup>k__BackingField;
    internal bool ThrottleCleanup { get; internal set; }
    internal int Count { get; }
    public bool TryGetValue(IGraphNodeIdKey key, GraphNodeId& id);
    public void Add(GraphNodeId id);
    [CompilerGeneratedAttribute]
internal bool get_ThrottleCleanup();
    [CompilerGeneratedAttribute]
internal void set_ThrottleCleanup(bool value);
    internal int get_Count();
    private bool ShouldCleanup();
    private void Cleanup();
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("2")]
internal class System.Runtime.CompilerServices.RefSafetyRulesAttribute : Attribute {
    public int Version;
    public RefSafetyRulesAttribute(int );
}
[GeneratedCodeAttribute("Nerdbank.GitVersioning.Tasks", "3.6.133.12845")]
[ExcludeFromCodeCoverageAttribute]
internal static class ThisAssembly : object {
    internal static string AssemblyConfiguration;
    internal static string AssemblyFileVersion;
    internal static string AssemblyInformationalVersion;
    internal static string AssemblyName;
    internal static string AssemblyTitle;
    internal static string AssemblyVersion;
    internal static DateTime GitCommitDate;
    internal static string GitCommitId;
    internal static bool IsPrerelease;
    internal static bool IsPublicRelease;
    internal static string RootNamespace;
    private static ThisAssembly();
}
