[ComVisibleAttribute("False")]
[GuidAttribute("794A2BA5-FFA6-4FC5-BF13-957B2C22EDD7")]
public interface EnvDTE._BuildEvents {
}
[GuidAttribute("9E66FE98-A1C6-421D-8C0C-6DA4E652E770")]
public interface EnvDTE._CommandBarControlEvents {
}
[ComVisibleAttribute("False")]
[GuidAttribute("A79FC678-0D0A-496A-B9DC-0D5B9E1CA9FC")]
public interface EnvDTE._CommandEvents {
}
[GuidAttribute("D4EAE958-0FBA-11D3-B880-00C04F79E479")]
public interface EnvDTE._DebuggerEvents {
}
[GuidAttribute("D4BB39FB-0F0E-11D3-B880-00C04F79E479")]
public interface EnvDTE._DebuggerEventsRoot {
    [DispIdAttribute("1")]
public object DebuggerEvents { get; }
    [DispIdAttribute("1")]
public abstract virtual object get_DebuggerEvents();
}
[InterfaceTypeAttribute("2")]
[GuidAttribute("1926364E-6B90-46CB-A44D-8A80FB11ACD9")]
public interface EnvDTE._dispBuildEvents {
    [DispIdAttribute("3")]
public abstract virtual void OnBuildBegin(vsBuildScope Scope, vsBuildAction Action);
    [DispIdAttribute("4")]
public abstract virtual void OnBuildDone(vsBuildScope Scope, vsBuildAction Action);
    [DispIdAttribute("5")]
public abstract virtual void OnBuildProjConfigBegin(string Project, string ProjectConfig, string Platform, string SolutionConfig);
    [DispIdAttribute("6")]
public abstract virtual void OnBuildProjConfigDone(string Project, string ProjectConfig, string Platform, string SolutionConfig, bool Success);
}
[ComEventInterfaceAttribute("EnvDTE._dispBuildEvents", "EnvDTE._dispBuildEvents_EventProvider")]
[ComVisibleAttribute("False")]
public interface EnvDTE._dispBuildEvents_Event {
    [CompilerGeneratedAttribute]
public abstract virtual void add_OnBuildBegin(_dispBuildEvents_OnBuildBeginEventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_OnBuildBegin(_dispBuildEvents_OnBuildBeginEventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_OnBuildDone(_dispBuildEvents_OnBuildDoneEventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_OnBuildDone(_dispBuildEvents_OnBuildDoneEventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_OnBuildProjConfigBegin(_dispBuildEvents_OnBuildProjConfigBeginEventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_OnBuildProjConfigBegin(_dispBuildEvents_OnBuildProjConfigBeginEventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_OnBuildProjConfigDone(_dispBuildEvents_OnBuildProjConfigDoneEventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_OnBuildProjConfigDone(_dispBuildEvents_OnBuildProjConfigDoneEventHandler value);
}
internal class EnvDTE._dispBuildEvents_EventProvider : object {
    private IConnectionPointContainer m_ConnectionPointContainer;
    private ArrayList m_aEventSinkHelpers;
    private IConnectionPoint m_ConnectionPoint;
    public _dispBuildEvents_EventProvider(object A_1);
    private void Init();
    public sealed virtual void add_OnBuildBegin(_dispBuildEvents_OnBuildBeginEventHandler value);
    public sealed virtual void remove_OnBuildBegin(_dispBuildEvents_OnBuildBeginEventHandler value);
    private void AddOnBuildBegin(_dispBuildEvents_OnBuildBeginEventHandler A_1);
    private void RemoveOnBuildBegin(_dispBuildEvents_OnBuildBeginEventHandler A_1);
    public sealed virtual void add_OnBuildDone(_dispBuildEvents_OnBuildDoneEventHandler value);
    public sealed virtual void remove_OnBuildDone(_dispBuildEvents_OnBuildDoneEventHandler value);
    private void AddOnBuildDone(_dispBuildEvents_OnBuildDoneEventHandler A_1);
    private void RemoveOnBuildDone(_dispBuildEvents_OnBuildDoneEventHandler A_1);
    public sealed virtual void add_OnBuildProjConfigBegin(_dispBuildEvents_OnBuildProjConfigBeginEventHandler value);
    public sealed virtual void remove_OnBuildProjConfigBegin(_dispBuildEvents_OnBuildProjConfigBeginEventHandler value);
    private void AddOnBuildProjConfigBegin(_dispBuildEvents_OnBuildProjConfigBeginEventHandler A_1);
    private void RemoveOnBuildProjConfigBegin(_dispBuildEvents_OnBuildProjConfigBeginEventHandler A_1);
    public sealed virtual void add_OnBuildProjConfigDone(_dispBuildEvents_OnBuildProjConfigDoneEventHandler value);
    public sealed virtual void remove_OnBuildProjConfigDone(_dispBuildEvents_OnBuildProjConfigDoneEventHandler value);
    private void AddOnBuildProjConfigDone(_dispBuildEvents_OnBuildProjConfigDoneEventHandler A_1);
    private void RemoveOnBuildProjConfigDone(_dispBuildEvents_OnBuildProjConfigDoneEventHandler A_1);
    protected virtual override void Finalize();
    public sealed virtual void Dispose();
    private void Dispose(bool disposing);
}
[ComVisibleAttribute("False")]
public class EnvDTE._dispBuildEvents_OnBuildBeginEventHandler : MulticastDelegate {
    public _dispBuildEvents_OnBuildBeginEventHandler(object object, IntPtr method);
    public virtual void Invoke(vsBuildScope Scope, vsBuildAction Action);
    public virtual IAsyncResult BeginInvoke(vsBuildScope Scope, vsBuildAction Action, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
[ComVisibleAttribute("False")]
public class EnvDTE._dispBuildEvents_OnBuildDoneEventHandler : MulticastDelegate {
    public _dispBuildEvents_OnBuildDoneEventHandler(object object, IntPtr method);
    public virtual void Invoke(vsBuildScope Scope, vsBuildAction Action);
    public virtual IAsyncResult BeginInvoke(vsBuildScope Scope, vsBuildAction Action, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
[ComVisibleAttribute("False")]
public class EnvDTE._dispBuildEvents_OnBuildProjConfigBeginEventHandler : MulticastDelegate {
    public _dispBuildEvents_OnBuildProjConfigBeginEventHandler(object object, IntPtr method);
    public virtual void Invoke(string Project, string ProjectConfig, string Platform, string SolutionConfig);
    public virtual IAsyncResult BeginInvoke(string Project, string ProjectConfig, string Platform, string SolutionConfig, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
[ComVisibleAttribute("False")]
public class EnvDTE._dispBuildEvents_OnBuildProjConfigDoneEventHandler : MulticastDelegate {
    public _dispBuildEvents_OnBuildProjConfigDoneEventHandler(object object, IntPtr method);
    public virtual void Invoke(string Project, string ProjectConfig, string Platform, string SolutionConfig, bool Success);
    public virtual IAsyncResult BeginInvoke(string Project, string ProjectConfig, string Platform, string SolutionConfig, bool Success, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
[ClassInterfaceAttribute("0")]
public class EnvDTE._dispBuildEvents_SinkHelper : object {
    public _dispBuildEvents_OnBuildBeginEventHandler m_OnBuildBeginDelegate;
    public _dispBuildEvents_OnBuildDoneEventHandler m_OnBuildDoneDelegate;
    public _dispBuildEvents_OnBuildProjConfigBeginEventHandler m_OnBuildProjConfigBeginDelegate;
    public _dispBuildEvents_OnBuildProjConfigDoneEventHandler m_OnBuildProjConfigDoneDelegate;
    public int m_dwCookie;
    public sealed virtual void OnBuildBegin(vsBuildScope A_1, vsBuildAction A_2);
    public sealed virtual void OnBuildDone(vsBuildScope A_1, vsBuildAction A_2);
    public sealed virtual void OnBuildProjConfigBegin(string A_1, string A_2, string A_3, string A_4);
    public sealed virtual void OnBuildProjConfigDone(string A_1, string A_2, string A_3, string A_4, bool A_5);
}
[InterfaceTypeAttribute("2")]
[GuidAttribute("987FB893-F96D-11D0-BBBB-00A0C90F2744")]
public interface EnvDTE._dispCommandBarControlEvents {
    [DispIdAttribute("1")]
public abstract virtual void Click(object CommandBarControl, Boolean& Handled, Boolean& CancelDefault);
}
[ComVisibleAttribute("False")]
public class EnvDTE._dispCommandBarControlEvents_ClickEventHandler : MulticastDelegate {
    public _dispCommandBarControlEvents_ClickEventHandler(object object, IntPtr method);
    public virtual void Invoke(object CommandBarControl, Boolean& Handled, Boolean& CancelDefault);
    public virtual IAsyncResult BeginInvoke(object CommandBarControl, Boolean& Handled, Boolean& CancelDefault, AsyncCallback callback, object object);
    public virtual void EndInvoke(Boolean& Handled, Boolean& CancelDefault, IAsyncResult result);
}
[ComVisibleAttribute("False")]
[ComEventInterfaceAttribute("EnvDTE._dispCommandBarControlEvents", "EnvDTE._dispCommandBarControlEvents_EventProvider")]
public interface EnvDTE._dispCommandBarControlEvents_Event {
    [CompilerGeneratedAttribute]
public abstract virtual void add_Click(_dispCommandBarControlEvents_ClickEventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_Click(_dispCommandBarControlEvents_ClickEventHandler value);
}
internal class EnvDTE._dispCommandBarControlEvents_EventProvider : object {
    private IConnectionPointContainer m_ConnectionPointContainer;
    private ArrayList m_aEventSinkHelpers;
    private IConnectionPoint m_ConnectionPoint;
    public _dispCommandBarControlEvents_EventProvider(object A_1);
    private void Init();
    public sealed virtual void add_Click(_dispCommandBarControlEvents_ClickEventHandler value);
    public sealed virtual void remove_Click(_dispCommandBarControlEvents_ClickEventHandler value);
    private void AddClick(_dispCommandBarControlEvents_ClickEventHandler A_1);
    private void RemoveClick(_dispCommandBarControlEvents_ClickEventHandler A_1);
    protected virtual override void Finalize();
    public sealed virtual void Dispose();
    private void Dispose(bool disposing);
}
[ClassInterfaceAttribute("0")]
public class EnvDTE._dispCommandBarControlEvents_SinkHelper : object {
    public _dispCommandBarControlEvents_ClickEventHandler m_ClickDelegate;
    public int m_dwCookie;
    public sealed virtual void Click(object A_1, Boolean& A_2, Boolean& A_3);
}
[InterfaceTypeAttribute("2")]
[GuidAttribute("FF2D5C12-FEEA-11D0-BBC8-00A0C90F2744")]
public interface EnvDTE._dispCommandEvents {
    [DispIdAttribute("1")]
public abstract virtual void BeforeExecute(string Guid, int ID, object CustomIn, object CustomOut, Boolean& CancelDefault);
    [DispIdAttribute("2")]
public abstract virtual void AfterExecute(string Guid, int ID, object CustomIn, object CustomOut);
}
[ComVisibleAttribute("False")]
public class EnvDTE._dispCommandEvents_AfterExecuteEventHandler : MulticastDelegate {
    public _dispCommandEvents_AfterExecuteEventHandler(object object, IntPtr method);
    public virtual void Invoke(string Guid, int ID, object CustomIn, object CustomOut);
    public virtual IAsyncResult BeginInvoke(string Guid, int ID, object CustomIn, object CustomOut, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
[ComVisibleAttribute("False")]
public class EnvDTE._dispCommandEvents_BeforeExecuteEventHandler : MulticastDelegate {
    public _dispCommandEvents_BeforeExecuteEventHandler(object object, IntPtr method);
    public virtual void Invoke(string Guid, int ID, object CustomIn, object CustomOut, Boolean& CancelDefault);
    public virtual IAsyncResult BeginInvoke(string Guid, int ID, object CustomIn, object CustomOut, Boolean& CancelDefault, AsyncCallback callback, object object);
    public virtual void EndInvoke(Boolean& CancelDefault, IAsyncResult result);
}
[ComVisibleAttribute("False")]
[ComEventInterfaceAttribute("EnvDTE._dispCommandEvents", "EnvDTE._dispCommandEvents_EventProvider")]
public interface EnvDTE._dispCommandEvents_Event {
    [CompilerGeneratedAttribute]
public abstract virtual void add_BeforeExecute(_dispCommandEvents_BeforeExecuteEventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_BeforeExecute(_dispCommandEvents_BeforeExecuteEventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_AfterExecute(_dispCommandEvents_AfterExecuteEventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_AfterExecute(_dispCommandEvents_AfterExecuteEventHandler value);
}
internal class EnvDTE._dispCommandEvents_EventProvider : object {
    private IConnectionPointContainer m_ConnectionPointContainer;
    private ArrayList m_aEventSinkHelpers;
    private IConnectionPoint m_ConnectionPoint;
    public _dispCommandEvents_EventProvider(object A_1);
    private void Init();
    public sealed virtual void add_BeforeExecute(_dispCommandEvents_BeforeExecuteEventHandler value);
    public sealed virtual void remove_BeforeExecute(_dispCommandEvents_BeforeExecuteEventHandler value);
    private void AddBeforeExecute(_dispCommandEvents_BeforeExecuteEventHandler A_1);
    private void RemoveBeforeExecute(_dispCommandEvents_BeforeExecuteEventHandler A_1);
    public sealed virtual void add_AfterExecute(_dispCommandEvents_AfterExecuteEventHandler value);
    public sealed virtual void remove_AfterExecute(_dispCommandEvents_AfterExecuteEventHandler value);
    private void AddAfterExecute(_dispCommandEvents_AfterExecuteEventHandler A_1);
    private void RemoveAfterExecute(_dispCommandEvents_AfterExecuteEventHandler A_1);
    protected virtual override void Finalize();
    public sealed virtual void Dispose();
    private void Dispose(bool disposing);
}
[ClassInterfaceAttribute("0")]
public class EnvDTE._dispCommandEvents_SinkHelper : object {
    public _dispCommandEvents_BeforeExecuteEventHandler m_BeforeExecuteDelegate;
    public _dispCommandEvents_AfterExecuteEventHandler m_AfterExecuteDelegate;
    public int m_dwCookie;
    public sealed virtual void BeforeExecute(string A_1, int A_2, object A_3, object A_4, Boolean& A_5);
    public sealed virtual void AfterExecute(string A_1, int A_2, object A_3, object A_4);
}
[InterfaceTypeAttribute("2")]
[GuidAttribute("46209330-0FBA-11D3-B880-00C04F79E479")]
public interface EnvDTE._dispDebuggerEvents {
    [DispIdAttribute("1")]
public abstract virtual void OnEnterRunMode(dbgEventReason Reason);
    [DispIdAttribute("2")]
public abstract virtual void OnEnterDesignMode(dbgEventReason Reason);
    [DispIdAttribute("3")]
public abstract virtual void OnEnterBreakMode(dbgEventReason Reason, dbgExecutionAction& ExecutionAction);
    [DispIdAttribute("4")]
public abstract virtual void OnExceptionThrown(string ExceptionType, string Name, int Code, string Description, dbgExceptionAction& ExceptionAction);
    [DispIdAttribute("5")]
public abstract virtual void OnExceptionNotHandled(string ExceptionType, string Name, int Code, string Description, dbgExceptionAction& ExceptionAction);
    [DispIdAttribute("6")]
public abstract virtual void OnContextChanged(Process NewProcess, Program NewProgram, Thread NewThread, StackFrame NewStackFrame);
}
[ComVisibleAttribute("False")]
[ComEventInterfaceAttribute("EnvDTE._dispDebuggerEvents", "EnvDTE._dispDebuggerEvents_EventProvider")]
public interface EnvDTE._dispDebuggerEvents_Event {
    [CompilerGeneratedAttribute]
public abstract virtual void add_OnEnterRunMode(_dispDebuggerEvents_OnEnterRunModeEventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_OnEnterRunMode(_dispDebuggerEvents_OnEnterRunModeEventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_OnEnterDesignMode(_dispDebuggerEvents_OnEnterDesignModeEventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_OnEnterDesignMode(_dispDebuggerEvents_OnEnterDesignModeEventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_OnEnterBreakMode(_dispDebuggerEvents_OnEnterBreakModeEventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_OnEnterBreakMode(_dispDebuggerEvents_OnEnterBreakModeEventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_OnExceptionThrown(_dispDebuggerEvents_OnExceptionThrownEventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_OnExceptionThrown(_dispDebuggerEvents_OnExceptionThrownEventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_OnExceptionNotHandled(_dispDebuggerEvents_OnExceptionNotHandledEventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_OnExceptionNotHandled(_dispDebuggerEvents_OnExceptionNotHandledEventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_OnContextChanged(_dispDebuggerEvents_OnContextChangedEventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_OnContextChanged(_dispDebuggerEvents_OnContextChangedEventHandler value);
}
internal class EnvDTE._dispDebuggerEvents_EventProvider : object {
    private IConnectionPointContainer m_ConnectionPointContainer;
    private ArrayList m_aEventSinkHelpers;
    private IConnectionPoint m_ConnectionPoint;
    public _dispDebuggerEvents_EventProvider(object A_1);
    private void Init();
    public sealed virtual void add_OnEnterRunMode(_dispDebuggerEvents_OnEnterRunModeEventHandler value);
    public sealed virtual void remove_OnEnterRunMode(_dispDebuggerEvents_OnEnterRunModeEventHandler value);
    private void AddOnEnterRunMode(_dispDebuggerEvents_OnEnterRunModeEventHandler A_1);
    private void RemoveOnEnterRunMode(_dispDebuggerEvents_OnEnterRunModeEventHandler A_1);
    public sealed virtual void add_OnEnterDesignMode(_dispDebuggerEvents_OnEnterDesignModeEventHandler value);
    public sealed virtual void remove_OnEnterDesignMode(_dispDebuggerEvents_OnEnterDesignModeEventHandler value);
    private void AddOnEnterDesignMode(_dispDebuggerEvents_OnEnterDesignModeEventHandler A_1);
    private void RemoveOnEnterDesignMode(_dispDebuggerEvents_OnEnterDesignModeEventHandler A_1);
    public sealed virtual void add_OnEnterBreakMode(_dispDebuggerEvents_OnEnterBreakModeEventHandler value);
    public sealed virtual void remove_OnEnterBreakMode(_dispDebuggerEvents_OnEnterBreakModeEventHandler value);
    private void AddOnEnterBreakMode(_dispDebuggerEvents_OnEnterBreakModeEventHandler A_1);
    private void RemoveOnEnterBreakMode(_dispDebuggerEvents_OnEnterBreakModeEventHandler A_1);
    public sealed virtual void add_OnExceptionThrown(_dispDebuggerEvents_OnExceptionThrownEventHandler value);
    public sealed virtual void remove_OnExceptionThrown(_dispDebuggerEvents_OnExceptionThrownEventHandler value);
    private void AddOnExceptionThrown(_dispDebuggerEvents_OnExceptionThrownEventHandler A_1);
    private void RemoveOnExceptionThrown(_dispDebuggerEvents_OnExceptionThrownEventHandler A_1);
    public sealed virtual void add_OnExceptionNotHandled(_dispDebuggerEvents_OnExceptionNotHandledEventHandler value);
    public sealed virtual void remove_OnExceptionNotHandled(_dispDebuggerEvents_OnExceptionNotHandledEventHandler value);
    private void AddOnExceptionNotHandled(_dispDebuggerEvents_OnExceptionNotHandledEventHandler A_1);
    private void RemoveOnExceptionNotHandled(_dispDebuggerEvents_OnExceptionNotHandledEventHandler A_1);
    public sealed virtual void add_OnContextChanged(_dispDebuggerEvents_OnContextChangedEventHandler value);
    public sealed virtual void remove_OnContextChanged(_dispDebuggerEvents_OnContextChangedEventHandler value);
    private void AddOnContextChanged(_dispDebuggerEvents_OnContextChangedEventHandler A_1);
    private void RemoveOnContextChanged(_dispDebuggerEvents_OnContextChangedEventHandler A_1);
    protected virtual override void Finalize();
    public sealed virtual void Dispose();
    private void Dispose(bool disposing);
}
[ComVisibleAttribute("False")]
public class EnvDTE._dispDebuggerEvents_OnContextChangedEventHandler : MulticastDelegate {
    public _dispDebuggerEvents_OnContextChangedEventHandler(object object, IntPtr method);
    public virtual void Invoke(Process NewProcess, Program NewProgram, Thread NewThread, StackFrame NewStackFrame);
    public virtual IAsyncResult BeginInvoke(Process NewProcess, Program NewProgram, Thread NewThread, StackFrame NewStackFrame, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
[ComVisibleAttribute("False")]
public class EnvDTE._dispDebuggerEvents_OnEnterBreakModeEventHandler : MulticastDelegate {
    public _dispDebuggerEvents_OnEnterBreakModeEventHandler(object object, IntPtr method);
    public virtual void Invoke(dbgEventReason Reason, dbgExecutionAction& ExecutionAction);
    public virtual IAsyncResult BeginInvoke(dbgEventReason Reason, dbgExecutionAction& ExecutionAction, AsyncCallback callback, object object);
    public virtual void EndInvoke(dbgExecutionAction& ExecutionAction, IAsyncResult result);
}
[ComVisibleAttribute("False")]
public class EnvDTE._dispDebuggerEvents_OnEnterDesignModeEventHandler : MulticastDelegate {
    public _dispDebuggerEvents_OnEnterDesignModeEventHandler(object object, IntPtr method);
    public virtual void Invoke(dbgEventReason Reason);
    public virtual IAsyncResult BeginInvoke(dbgEventReason Reason, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
[ComVisibleAttribute("False")]
public class EnvDTE._dispDebuggerEvents_OnEnterRunModeEventHandler : MulticastDelegate {
    public _dispDebuggerEvents_OnEnterRunModeEventHandler(object object, IntPtr method);
    public virtual void Invoke(dbgEventReason Reason);
    public virtual IAsyncResult BeginInvoke(dbgEventReason Reason, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
[ComVisibleAttribute("False")]
public class EnvDTE._dispDebuggerEvents_OnExceptionNotHandledEventHandler : MulticastDelegate {
    public _dispDebuggerEvents_OnExceptionNotHandledEventHandler(object object, IntPtr method);
    public virtual void Invoke(string ExceptionType, string Name, int Code, string Description, dbgExceptionAction& ExceptionAction);
    public virtual IAsyncResult BeginInvoke(string ExceptionType, string Name, int Code, string Description, dbgExceptionAction& ExceptionAction, AsyncCallback callback, object object);
    public virtual void EndInvoke(dbgExceptionAction& ExceptionAction, IAsyncResult result);
}
[ComVisibleAttribute("False")]
public class EnvDTE._dispDebuggerEvents_OnExceptionThrownEventHandler : MulticastDelegate {
    public _dispDebuggerEvents_OnExceptionThrownEventHandler(object object, IntPtr method);
    public virtual void Invoke(string ExceptionType, string Name, int Code, string Description, dbgExceptionAction& ExceptionAction);
    public virtual IAsyncResult BeginInvoke(string ExceptionType, string Name, int Code, string Description, dbgExceptionAction& ExceptionAction, AsyncCallback callback, object object);
    public virtual void EndInvoke(dbgExceptionAction& ExceptionAction, IAsyncResult result);
}
[ClassInterfaceAttribute("0")]
public class EnvDTE._dispDebuggerEvents_SinkHelper : object {
    public _dispDebuggerEvents_OnEnterRunModeEventHandler m_OnEnterRunModeDelegate;
    public _dispDebuggerEvents_OnEnterDesignModeEventHandler m_OnEnterDesignModeDelegate;
    public _dispDebuggerEvents_OnEnterBreakModeEventHandler m_OnEnterBreakModeDelegate;
    public _dispDebuggerEvents_OnExceptionThrownEventHandler m_OnExceptionThrownDelegate;
    public _dispDebuggerEvents_OnExceptionNotHandledEventHandler m_OnExceptionNotHandledDelegate;
    public _dispDebuggerEvents_OnContextChangedEventHandler m_OnContextChangedDelegate;
    public int m_dwCookie;
    public sealed virtual void OnEnterRunMode(dbgEventReason A_1);
    public sealed virtual void OnEnterDesignMode(dbgEventReason A_1);
    public sealed virtual void OnEnterBreakMode(dbgEventReason A_1, dbgExecutionAction& A_2);
    public sealed virtual void OnExceptionThrown(string A_1, string A_2, int A_3, string A_4, dbgExceptionAction& A_5);
    public sealed virtual void OnExceptionNotHandled(string A_1, string A_2, int A_3, string A_4, dbgExceptionAction& A_5);
    public sealed virtual void OnContextChanged(Process A_1, Program A_2, Thread A_3, StackFrame A_4);
}
[GuidAttribute("DC5437F6-F114-11D2-AACF-00C04F688DDE")]
[InterfaceTypeAttribute("2")]
public interface EnvDTE._dispDocumentEvents {
    [DispIdAttribute("1")]
public abstract virtual void DocumentSaved(Document Document);
    [DispIdAttribute("2")]
public abstract virtual void DocumentClosing(Document Document);
    [DispIdAttribute("3")]
public abstract virtual void DocumentOpening(string DocumentPath, bool ReadOnly);
    [DispIdAttribute("4")]
public abstract virtual void DocumentOpened(Document Document);
}
[ComVisibleAttribute("False")]
public class EnvDTE._dispDocumentEvents_DocumentClosingEventHandler : MulticastDelegate {
    public _dispDocumentEvents_DocumentClosingEventHandler(object object, IntPtr method);
    public virtual void Invoke(Document Document);
    public virtual IAsyncResult BeginInvoke(Document Document, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
[ComVisibleAttribute("False")]
public class EnvDTE._dispDocumentEvents_DocumentOpenedEventHandler : MulticastDelegate {
    public _dispDocumentEvents_DocumentOpenedEventHandler(object object, IntPtr method);
    public virtual void Invoke(Document Document);
    public virtual IAsyncResult BeginInvoke(Document Document, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
[ComVisibleAttribute("False")]
public class EnvDTE._dispDocumentEvents_DocumentOpeningEventHandler : MulticastDelegate {
    public _dispDocumentEvents_DocumentOpeningEventHandler(object object, IntPtr method);
    public virtual void Invoke(string DocumentPath, bool ReadOnly);
    public virtual IAsyncResult BeginInvoke(string DocumentPath, bool ReadOnly, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
[ComVisibleAttribute("False")]
public class EnvDTE._dispDocumentEvents_DocumentSavedEventHandler : MulticastDelegate {
    public _dispDocumentEvents_DocumentSavedEventHandler(object object, IntPtr method);
    public virtual void Invoke(Document Document);
    public virtual IAsyncResult BeginInvoke(Document Document, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
[ComEventInterfaceAttribute("EnvDTE._dispDocumentEvents", "EnvDTE._dispDocumentEvents_EventProvider")]
public interface EnvDTE._dispDocumentEvents_Event {
    [CompilerGeneratedAttribute]
public abstract virtual void add_DocumentSaved(_dispDocumentEvents_DocumentSavedEventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_DocumentSaved(_dispDocumentEvents_DocumentSavedEventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_DocumentClosing(_dispDocumentEvents_DocumentClosingEventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_DocumentClosing(_dispDocumentEvents_DocumentClosingEventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_DocumentOpening(_dispDocumentEvents_DocumentOpeningEventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_DocumentOpening(_dispDocumentEvents_DocumentOpeningEventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_DocumentOpened(_dispDocumentEvents_DocumentOpenedEventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_DocumentOpened(_dispDocumentEvents_DocumentOpenedEventHandler value);
}
internal class EnvDTE._dispDocumentEvents_EventProvider : object {
    private IConnectionPointContainer m_ConnectionPointContainer;
    private ArrayList m_aEventSinkHelpers;
    private IConnectionPoint m_ConnectionPoint;
    public _dispDocumentEvents_EventProvider(object A_1);
    private void Init();
    public sealed virtual void add_DocumentSaved(_dispDocumentEvents_DocumentSavedEventHandler value);
    public sealed virtual void remove_DocumentSaved(_dispDocumentEvents_DocumentSavedEventHandler value);
    private void AddDocumentSaved(_dispDocumentEvents_DocumentSavedEventHandler A_1);
    private void RemoveDocumentSaved(_dispDocumentEvents_DocumentSavedEventHandler A_1);
    public sealed virtual void add_DocumentClosing(_dispDocumentEvents_DocumentClosingEventHandler value);
    public sealed virtual void remove_DocumentClosing(_dispDocumentEvents_DocumentClosingEventHandler value);
    private void AddDocumentClosing(_dispDocumentEvents_DocumentClosingEventHandler A_1);
    private void RemoveDocumentClosing(_dispDocumentEvents_DocumentClosingEventHandler A_1);
    public sealed virtual void add_DocumentOpening(_dispDocumentEvents_DocumentOpeningEventHandler value);
    public sealed virtual void remove_DocumentOpening(_dispDocumentEvents_DocumentOpeningEventHandler value);
    private void AddDocumentOpening(_dispDocumentEvents_DocumentOpeningEventHandler A_1);
    private void RemoveDocumentOpening(_dispDocumentEvents_DocumentOpeningEventHandler A_1);
    public sealed virtual void add_DocumentOpened(_dispDocumentEvents_DocumentOpenedEventHandler value);
    public sealed virtual void remove_DocumentOpened(_dispDocumentEvents_DocumentOpenedEventHandler value);
    private void AddDocumentOpened(_dispDocumentEvents_DocumentOpenedEventHandler A_1);
    private void RemoveDocumentOpened(_dispDocumentEvents_DocumentOpenedEventHandler A_1);
    protected virtual override void Finalize();
    public sealed virtual void Dispose();
    private void Dispose(bool disposing);
}
[ClassInterfaceAttribute("0")]
public class EnvDTE._dispDocumentEvents_SinkHelper : object {
    public _dispDocumentEvents_DocumentSavedEventHandler m_DocumentSavedDelegate;
    public _dispDocumentEvents_DocumentClosingEventHandler m_DocumentClosingDelegate;
    public _dispDocumentEvents_DocumentOpeningEventHandler m_DocumentOpeningDelegate;
    public _dispDocumentEvents_DocumentOpenedEventHandler m_DocumentOpenedDelegate;
    public int m_dwCookie;
    public sealed virtual void DocumentSaved(Document A_1);
    public sealed virtual void DocumentClosing(Document A_1);
    public sealed virtual void DocumentOpening(string A_1, bool A_2);
    public sealed virtual void DocumentOpened(Document A_1);
}
[InterfaceTypeAttribute("2")]
[GuidAttribute("B50C9708-C909-4B87-A03D-AF6CC4BFB422")]
public interface EnvDTE._dispDTEEvents {
    [DispIdAttribute("1")]
public abstract virtual void OnStartupComplete();
    [DispIdAttribute("2")]
public abstract virtual void OnBeginShutdown();
    [DispIdAttribute("3")]
public abstract virtual void ModeChanged(vsIDEMode LastMode);
    [DispIdAttribute("4")]
public abstract virtual void OnMacrosRuntimeReset();
}
[ComEventInterfaceAttribute("EnvDTE._dispDTEEvents", "EnvDTE._dispDTEEvents_EventProvider")]
[ComVisibleAttribute("False")]
public interface EnvDTE._dispDTEEvents_Event {
    [CompilerGeneratedAttribute]
public abstract virtual void add_OnStartupComplete(_dispDTEEvents_OnStartupCompleteEventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_OnStartupComplete(_dispDTEEvents_OnStartupCompleteEventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_OnBeginShutdown(_dispDTEEvents_OnBeginShutdownEventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_OnBeginShutdown(_dispDTEEvents_OnBeginShutdownEventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_ModeChanged(_dispDTEEvents_ModeChangedEventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_ModeChanged(_dispDTEEvents_ModeChangedEventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_OnMacrosRuntimeReset(_dispDTEEvents_OnMacrosRuntimeResetEventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_OnMacrosRuntimeReset(_dispDTEEvents_OnMacrosRuntimeResetEventHandler value);
}
internal class EnvDTE._dispDTEEvents_EventProvider : object {
    private IConnectionPointContainer m_ConnectionPointContainer;
    private ArrayList m_aEventSinkHelpers;
    private IConnectionPoint m_ConnectionPoint;
    public _dispDTEEvents_EventProvider(object A_1);
    private void Init();
    public sealed virtual void add_OnStartupComplete(_dispDTEEvents_OnStartupCompleteEventHandler value);
    public sealed virtual void remove_OnStartupComplete(_dispDTEEvents_OnStartupCompleteEventHandler value);
    private void AddOnStartupComplete(_dispDTEEvents_OnStartupCompleteEventHandler A_1);
    private void RemoveOnStartupComplete(_dispDTEEvents_OnStartupCompleteEventHandler A_1);
    public sealed virtual void add_OnBeginShutdown(_dispDTEEvents_OnBeginShutdownEventHandler value);
    public sealed virtual void remove_OnBeginShutdown(_dispDTEEvents_OnBeginShutdownEventHandler value);
    private void AddOnBeginShutdown(_dispDTEEvents_OnBeginShutdownEventHandler A_1);
    private void RemoveOnBeginShutdown(_dispDTEEvents_OnBeginShutdownEventHandler A_1);
    public sealed virtual void add_ModeChanged(_dispDTEEvents_ModeChangedEventHandler value);
    public sealed virtual void remove_ModeChanged(_dispDTEEvents_ModeChangedEventHandler value);
    private void AddModeChanged(_dispDTEEvents_ModeChangedEventHandler A_1);
    private void RemoveModeChanged(_dispDTEEvents_ModeChangedEventHandler A_1);
    public sealed virtual void add_OnMacrosRuntimeReset(_dispDTEEvents_OnMacrosRuntimeResetEventHandler value);
    public sealed virtual void remove_OnMacrosRuntimeReset(_dispDTEEvents_OnMacrosRuntimeResetEventHandler value);
    private void AddOnMacrosRuntimeReset(_dispDTEEvents_OnMacrosRuntimeResetEventHandler A_1);
    private void RemoveOnMacrosRuntimeReset(_dispDTEEvents_OnMacrosRuntimeResetEventHandler A_1);
    protected virtual override void Finalize();
    public sealed virtual void Dispose();
    private void Dispose(bool disposing);
}
[ComVisibleAttribute("False")]
public class EnvDTE._dispDTEEvents_ModeChangedEventHandler : MulticastDelegate {
    public _dispDTEEvents_ModeChangedEventHandler(object object, IntPtr method);
    public virtual void Invoke(vsIDEMode LastMode);
    public virtual IAsyncResult BeginInvoke(vsIDEMode LastMode, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
[ComVisibleAttribute("False")]
public class EnvDTE._dispDTEEvents_OnBeginShutdownEventHandler : MulticastDelegate {
    public _dispDTEEvents_OnBeginShutdownEventHandler(object object, IntPtr method);
    public virtual void Invoke();
    public virtual IAsyncResult BeginInvoke(AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
[ComVisibleAttribute("False")]
public class EnvDTE._dispDTEEvents_OnMacrosRuntimeResetEventHandler : MulticastDelegate {
    public _dispDTEEvents_OnMacrosRuntimeResetEventHandler(object object, IntPtr method);
    public virtual void Invoke();
    public virtual IAsyncResult BeginInvoke(AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
[ComVisibleAttribute("False")]
public class EnvDTE._dispDTEEvents_OnStartupCompleteEventHandler : MulticastDelegate {
    public _dispDTEEvents_OnStartupCompleteEventHandler(object object, IntPtr method);
    public virtual void Invoke();
    public virtual IAsyncResult BeginInvoke(AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
[ClassInterfaceAttribute("0")]
public class EnvDTE._dispDTEEvents_SinkHelper : object {
    public _dispDTEEvents_OnStartupCompleteEventHandler m_OnStartupCompleteDelegate;
    public _dispDTEEvents_OnBeginShutdownEventHandler m_OnBeginShutdownDelegate;
    public _dispDTEEvents_ModeChangedEventHandler m_ModeChangedDelegate;
    public _dispDTEEvents_OnMacrosRuntimeResetEventHandler m_OnMacrosRuntimeResetDelegate;
    public int m_dwCookie;
    public sealed virtual void OnStartupComplete();
    public sealed virtual void OnBeginShutdown();
    public sealed virtual void ModeChanged(vsIDEMode A_1);
    public sealed virtual void OnMacrosRuntimeReset();
}
[InterfaceTypeAttribute("2")]
[GuidAttribute("C5331ACE-C5D5-11D2-8598-006097C68E81")]
public interface EnvDTE._dispFindEvents {
    [DispIdAttribute("1")]
public abstract virtual void FindDone(vsFindResult Result, bool Cancelled);
}
[ComVisibleAttribute("False")]
[ComEventInterfaceAttribute("EnvDTE._dispFindEvents", "EnvDTE._dispFindEvents_EventProvider")]
public interface EnvDTE._dispFindEvents_Event {
    [CompilerGeneratedAttribute]
public abstract virtual void add_FindDone(_dispFindEvents_FindDoneEventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_FindDone(_dispFindEvents_FindDoneEventHandler value);
}
internal class EnvDTE._dispFindEvents_EventProvider : object {
    private IConnectionPointContainer m_ConnectionPointContainer;
    private ArrayList m_aEventSinkHelpers;
    private IConnectionPoint m_ConnectionPoint;
    public _dispFindEvents_EventProvider(object A_1);
    private void Init();
    public sealed virtual void add_FindDone(_dispFindEvents_FindDoneEventHandler value);
    public sealed virtual void remove_FindDone(_dispFindEvents_FindDoneEventHandler value);
    private void AddFindDone(_dispFindEvents_FindDoneEventHandler A_1);
    private void RemoveFindDone(_dispFindEvents_FindDoneEventHandler A_1);
    protected virtual override void Finalize();
    public sealed virtual void Dispose();
    private void Dispose(bool disposing);
}
[ComVisibleAttribute("False")]
public class EnvDTE._dispFindEvents_FindDoneEventHandler : MulticastDelegate {
    public _dispFindEvents_FindDoneEventHandler(object object, IntPtr method);
    public virtual void Invoke(vsFindResult Result, bool Cancelled);
    public virtual IAsyncResult BeginInvoke(vsFindResult Result, bool Cancelled, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
[ClassInterfaceAttribute("0")]
public class EnvDTE._dispFindEvents_SinkHelper : object {
    public _dispFindEvents_FindDoneEventHandler m_FindDoneDelegate;
    public int m_dwCookie;
    public sealed virtual void FindDone(vsFindResult A_1, bool A_2);
}
[InterfaceTypeAttribute("2")]
[GuidAttribute("0D3A23AF-67BB-11D2-97C1-00C04FB6C6FF")]
public interface EnvDTE._dispOutputWindowEvents {
    [DispIdAttribute("1")]
public abstract virtual void PaneAdded(OutputWindowPane pPane);
    [DispIdAttribute("2")]
public abstract virtual void PaneUpdated(OutputWindowPane pPane);
    [DispIdAttribute("3")]
public abstract virtual void PaneClearing(OutputWindowPane pPane);
}
[ComEventInterfaceAttribute("EnvDTE._dispOutputWindowEvents", "EnvDTE._dispOutputWindowEvents_EventProvider")]
[ComVisibleAttribute("False")]
public interface EnvDTE._dispOutputWindowEvents_Event {
    [CompilerGeneratedAttribute]
public abstract virtual void add_PaneAdded(_dispOutputWindowEvents_PaneAddedEventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_PaneAdded(_dispOutputWindowEvents_PaneAddedEventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_PaneUpdated(_dispOutputWindowEvents_PaneUpdatedEventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_PaneUpdated(_dispOutputWindowEvents_PaneUpdatedEventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_PaneClearing(_dispOutputWindowEvents_PaneClearingEventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_PaneClearing(_dispOutputWindowEvents_PaneClearingEventHandler value);
}
internal class EnvDTE._dispOutputWindowEvents_EventProvider : object {
    private IConnectionPointContainer m_ConnectionPointContainer;
    private ArrayList m_aEventSinkHelpers;
    private IConnectionPoint m_ConnectionPoint;
    public _dispOutputWindowEvents_EventProvider(object A_1);
    private void Init();
    public sealed virtual void add_PaneAdded(_dispOutputWindowEvents_PaneAddedEventHandler value);
    public sealed virtual void remove_PaneAdded(_dispOutputWindowEvents_PaneAddedEventHandler value);
    private void AddPaneAdded(_dispOutputWindowEvents_PaneAddedEventHandler A_1);
    private void RemovePaneAdded(_dispOutputWindowEvents_PaneAddedEventHandler A_1);
    public sealed virtual void add_PaneUpdated(_dispOutputWindowEvents_PaneUpdatedEventHandler value);
    public sealed virtual void remove_PaneUpdated(_dispOutputWindowEvents_PaneUpdatedEventHandler value);
    private void AddPaneUpdated(_dispOutputWindowEvents_PaneUpdatedEventHandler A_1);
    private void RemovePaneUpdated(_dispOutputWindowEvents_PaneUpdatedEventHandler A_1);
    public sealed virtual void add_PaneClearing(_dispOutputWindowEvents_PaneClearingEventHandler value);
    public sealed virtual void remove_PaneClearing(_dispOutputWindowEvents_PaneClearingEventHandler value);
    private void AddPaneClearing(_dispOutputWindowEvents_PaneClearingEventHandler A_1);
    private void RemovePaneClearing(_dispOutputWindowEvents_PaneClearingEventHandler A_1);
    protected virtual override void Finalize();
    public sealed virtual void Dispose();
    private void Dispose(bool disposing);
}
[ComVisibleAttribute("False")]
public class EnvDTE._dispOutputWindowEvents_PaneAddedEventHandler : MulticastDelegate {
    public _dispOutputWindowEvents_PaneAddedEventHandler(object object, IntPtr method);
    public virtual void Invoke(OutputWindowPane pPane);
    public virtual IAsyncResult BeginInvoke(OutputWindowPane pPane, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
[ComVisibleAttribute("False")]
public class EnvDTE._dispOutputWindowEvents_PaneClearingEventHandler : MulticastDelegate {
    public _dispOutputWindowEvents_PaneClearingEventHandler(object object, IntPtr method);
    public virtual void Invoke(OutputWindowPane pPane);
    public virtual IAsyncResult BeginInvoke(OutputWindowPane pPane, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
[ComVisibleAttribute("False")]
public class EnvDTE._dispOutputWindowEvents_PaneUpdatedEventHandler : MulticastDelegate {
    public _dispOutputWindowEvents_PaneUpdatedEventHandler(object object, IntPtr method);
    public virtual void Invoke(OutputWindowPane pPane);
    public virtual IAsyncResult BeginInvoke(OutputWindowPane pPane, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
[ClassInterfaceAttribute("0")]
public class EnvDTE._dispOutputWindowEvents_SinkHelper : object {
    public _dispOutputWindowEvents_PaneAddedEventHandler m_PaneAddedDelegate;
    public _dispOutputWindowEvents_PaneUpdatedEventHandler m_PaneUpdatedDelegate;
    public _dispOutputWindowEvents_PaneClearingEventHandler m_PaneClearingDelegate;
    public int m_dwCookie;
    public sealed virtual void PaneAdded(OutputWindowPane A_1);
    public sealed virtual void PaneUpdated(OutputWindowPane A_1);
    public sealed virtual void PaneClearing(OutputWindowPane A_1);
}
[InterfaceTypeAttribute("2")]
[GuidAttribute("6962753F-EFD5-41C5-B083-D70687166AEB")]
public interface EnvDTE._dispProjectItemsEvents {
    [DispIdAttribute("1")]
public abstract virtual void ItemAdded(ProjectItem ProjectItem);
    [DispIdAttribute("2")]
public abstract virtual void ItemRemoved(ProjectItem ProjectItem);
    [DispIdAttribute("3")]
public abstract virtual void ItemRenamed(ProjectItem ProjectItem, string OldName);
}
[ComVisibleAttribute("False")]
[ComEventInterfaceAttribute("EnvDTE._dispProjectItemsEvents", "EnvDTE._dispProjectItemsEvents_EventProvider")]
public interface EnvDTE._dispProjectItemsEvents_Event {
    [CompilerGeneratedAttribute]
public abstract virtual void add_ItemAdded(_dispProjectItemsEvents_ItemAddedEventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_ItemAdded(_dispProjectItemsEvents_ItemAddedEventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_ItemRemoved(_dispProjectItemsEvents_ItemRemovedEventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_ItemRemoved(_dispProjectItemsEvents_ItemRemovedEventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_ItemRenamed(_dispProjectItemsEvents_ItemRenamedEventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_ItemRenamed(_dispProjectItemsEvents_ItemRenamedEventHandler value);
}
internal class EnvDTE._dispProjectItemsEvents_EventProvider : object {
    private IConnectionPointContainer m_ConnectionPointContainer;
    private ArrayList m_aEventSinkHelpers;
    private IConnectionPoint m_ConnectionPoint;
    public _dispProjectItemsEvents_EventProvider(object A_1);
    private void Init();
    public sealed virtual void add_ItemAdded(_dispProjectItemsEvents_ItemAddedEventHandler value);
    public sealed virtual void remove_ItemAdded(_dispProjectItemsEvents_ItemAddedEventHandler value);
    private void AddItemAdded(_dispProjectItemsEvents_ItemAddedEventHandler A_1);
    private void RemoveItemAdded(_dispProjectItemsEvents_ItemAddedEventHandler A_1);
    public sealed virtual void add_ItemRemoved(_dispProjectItemsEvents_ItemRemovedEventHandler value);
    public sealed virtual void remove_ItemRemoved(_dispProjectItemsEvents_ItemRemovedEventHandler value);
    private void AddItemRemoved(_dispProjectItemsEvents_ItemRemovedEventHandler A_1);
    private void RemoveItemRemoved(_dispProjectItemsEvents_ItemRemovedEventHandler A_1);
    public sealed virtual void add_ItemRenamed(_dispProjectItemsEvents_ItemRenamedEventHandler value);
    public sealed virtual void remove_ItemRenamed(_dispProjectItemsEvents_ItemRenamedEventHandler value);
    private void AddItemRenamed(_dispProjectItemsEvents_ItemRenamedEventHandler A_1);
    private void RemoveItemRenamed(_dispProjectItemsEvents_ItemRenamedEventHandler A_1);
    protected virtual override void Finalize();
    public sealed virtual void Dispose();
    private void Dispose(bool disposing);
}
[ComVisibleAttribute("False")]
public class EnvDTE._dispProjectItemsEvents_ItemAddedEventHandler : MulticastDelegate {
    public _dispProjectItemsEvents_ItemAddedEventHandler(object object, IntPtr method);
    public virtual void Invoke(ProjectItem ProjectItem);
    public virtual IAsyncResult BeginInvoke(ProjectItem ProjectItem, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
[ComVisibleAttribute("False")]
public class EnvDTE._dispProjectItemsEvents_ItemRemovedEventHandler : MulticastDelegate {
    public _dispProjectItemsEvents_ItemRemovedEventHandler(object object, IntPtr method);
    public virtual void Invoke(ProjectItem ProjectItem);
    public virtual IAsyncResult BeginInvoke(ProjectItem ProjectItem, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
[ComVisibleAttribute("False")]
public class EnvDTE._dispProjectItemsEvents_ItemRenamedEventHandler : MulticastDelegate {
    public _dispProjectItemsEvents_ItemRenamedEventHandler(object object, IntPtr method);
    public virtual void Invoke(ProjectItem ProjectItem, string OldName);
    public virtual IAsyncResult BeginInvoke(ProjectItem ProjectItem, string OldName, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
[ClassInterfaceAttribute("0")]
public class EnvDTE._dispProjectItemsEvents_SinkHelper : object {
    public _dispProjectItemsEvents_ItemAddedEventHandler m_ItemAddedDelegate;
    public _dispProjectItemsEvents_ItemRemovedEventHandler m_ItemRemovedDelegate;
    public _dispProjectItemsEvents_ItemRenamedEventHandler m_ItemRenamedDelegate;
    public int m_dwCookie;
    public sealed virtual void ItemAdded(ProjectItem A_1);
    public sealed virtual void ItemRemoved(ProjectItem A_1);
    public sealed virtual void ItemRenamed(ProjectItem A_1, string A_2);
}
[GuidAttribute("7F508D55-627F-4D7F-BE0B-9E3D829FF0ED")]
[InterfaceTypeAttribute("2")]
public interface EnvDTE._dispProjectsEvents {
    [DispIdAttribute("1")]
public abstract virtual void ItemAdded(Project Project);
    [DispIdAttribute("2")]
public abstract virtual void ItemRemoved(Project Project);
    [DispIdAttribute("3")]
public abstract virtual void ItemRenamed(Project Project, string OldName);
}
[ComVisibleAttribute("False")]
[ComEventInterfaceAttribute("EnvDTE._dispProjectsEvents", "EnvDTE._dispProjectsEvents_EventProvider")]
public interface EnvDTE._dispProjectsEvents_Event {
    [CompilerGeneratedAttribute]
public abstract virtual void add_ItemAdded(_dispProjectsEvents_ItemAddedEventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_ItemAdded(_dispProjectsEvents_ItemAddedEventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_ItemRemoved(_dispProjectsEvents_ItemRemovedEventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_ItemRemoved(_dispProjectsEvents_ItemRemovedEventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_ItemRenamed(_dispProjectsEvents_ItemRenamedEventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_ItemRenamed(_dispProjectsEvents_ItemRenamedEventHandler value);
}
internal class EnvDTE._dispProjectsEvents_EventProvider : object {
    private IConnectionPointContainer m_ConnectionPointContainer;
    private ArrayList m_aEventSinkHelpers;
    private IConnectionPoint m_ConnectionPoint;
    public _dispProjectsEvents_EventProvider(object A_1);
    private void Init();
    public sealed virtual void add_ItemAdded(_dispProjectsEvents_ItemAddedEventHandler value);
    public sealed virtual void remove_ItemAdded(_dispProjectsEvents_ItemAddedEventHandler value);
    private void AddItemAdded(_dispProjectsEvents_ItemAddedEventHandler A_1);
    private void RemoveItemAdded(_dispProjectsEvents_ItemAddedEventHandler A_1);
    public sealed virtual void add_ItemRemoved(_dispProjectsEvents_ItemRemovedEventHandler value);
    public sealed virtual void remove_ItemRemoved(_dispProjectsEvents_ItemRemovedEventHandler value);
    private void AddItemRemoved(_dispProjectsEvents_ItemRemovedEventHandler A_1);
    private void RemoveItemRemoved(_dispProjectsEvents_ItemRemovedEventHandler A_1);
    public sealed virtual void add_ItemRenamed(_dispProjectsEvents_ItemRenamedEventHandler value);
    public sealed virtual void remove_ItemRenamed(_dispProjectsEvents_ItemRenamedEventHandler value);
    private void AddItemRenamed(_dispProjectsEvents_ItemRenamedEventHandler A_1);
    private void RemoveItemRenamed(_dispProjectsEvents_ItemRenamedEventHandler A_1);
    protected virtual override void Finalize();
    public sealed virtual void Dispose();
    private void Dispose(bool disposing);
}
[ComVisibleAttribute("False")]
public class EnvDTE._dispProjectsEvents_ItemAddedEventHandler : MulticastDelegate {
    public _dispProjectsEvents_ItemAddedEventHandler(object object, IntPtr method);
    public virtual void Invoke(Project Project);
    public virtual IAsyncResult BeginInvoke(Project Project, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
[ComVisibleAttribute("False")]
public class EnvDTE._dispProjectsEvents_ItemRemovedEventHandler : MulticastDelegate {
    public _dispProjectsEvents_ItemRemovedEventHandler(object object, IntPtr method);
    public virtual void Invoke(Project Project);
    public virtual IAsyncResult BeginInvoke(Project Project, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
[ComVisibleAttribute("False")]
public class EnvDTE._dispProjectsEvents_ItemRenamedEventHandler : MulticastDelegate {
    public _dispProjectsEvents_ItemRenamedEventHandler(object object, IntPtr method);
    public virtual void Invoke(Project Project, string OldName);
    public virtual IAsyncResult BeginInvoke(Project Project, string OldName, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
[ClassInterfaceAttribute("0")]
public class EnvDTE._dispProjectsEvents_SinkHelper : object {
    public _dispProjectsEvents_ItemAddedEventHandler m_ItemAddedDelegate;
    public _dispProjectsEvents_ItemRemovedEventHandler m_ItemRemovedDelegate;
    public _dispProjectsEvents_ItemRenamedEventHandler m_ItemRenamedDelegate;
    public int m_dwCookie;
    public sealed virtual void ItemAdded(Project A_1);
    public sealed virtual void ItemRemoved(Project A_1);
    public sealed virtual void ItemRenamed(Project A_1, string A_2);
}
[InterfaceTypeAttribute("2")]
[GuidAttribute("DEEB28B3-23E6-11D1-AE5C-00A0C90F26F4")]
public interface EnvDTE._dispSelectionEvents {
    [DispIdAttribute("1")]
public abstract virtual void OnChange();
}
[ComVisibleAttribute("False")]
[ComEventInterfaceAttribute("EnvDTE._dispSelectionEvents", "EnvDTE._dispSelectionEvents_EventProvider")]
public interface EnvDTE._dispSelectionEvents_Event {
    [CompilerGeneratedAttribute]
public abstract virtual void add_OnChange(_dispSelectionEvents_OnChangeEventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_OnChange(_dispSelectionEvents_OnChangeEventHandler value);
}
internal class EnvDTE._dispSelectionEvents_EventProvider : object {
    private IConnectionPointContainer m_ConnectionPointContainer;
    private ArrayList m_aEventSinkHelpers;
    private IConnectionPoint m_ConnectionPoint;
    public _dispSelectionEvents_EventProvider(object A_1);
    private void Init();
    public sealed virtual void add_OnChange(_dispSelectionEvents_OnChangeEventHandler value);
    public sealed virtual void remove_OnChange(_dispSelectionEvents_OnChangeEventHandler value);
    private void AddOnChange(_dispSelectionEvents_OnChangeEventHandler A_1);
    private void RemoveOnChange(_dispSelectionEvents_OnChangeEventHandler A_1);
    protected virtual override void Finalize();
    public sealed virtual void Dispose();
    private void Dispose(bool disposing);
}
[ComVisibleAttribute("False")]
public class EnvDTE._dispSelectionEvents_OnChangeEventHandler : MulticastDelegate {
    public _dispSelectionEvents_OnChangeEventHandler(object object, IntPtr method);
    public virtual void Invoke();
    public virtual IAsyncResult BeginInvoke(AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
[ClassInterfaceAttribute("0")]
public class EnvDTE._dispSelectionEvents_SinkHelper : object {
    public _dispSelectionEvents_OnChangeEventHandler m_OnChangeDelegate;
    public int m_dwCookie;
    public sealed virtual void OnChange();
}
[GuidAttribute("FBCFF1C2-261C-11D1-AE5E-00A0C90F26F4")]
[InterfaceTypeAttribute("2")]
public interface EnvDTE._dispSolutionEvents {
    [DispIdAttribute("1")]
public abstract virtual void Opened();
    [DispIdAttribute("2")]
public abstract virtual void BeforeClosing();
    [DispIdAttribute("3")]
public abstract virtual void AfterClosing();
    [DispIdAttribute("4")]
public abstract virtual void QueryCloseSolution(Boolean& fCancel);
    [DispIdAttribute("5")]
public abstract virtual void Renamed(string OldName);
    [DispIdAttribute("6")]
public abstract virtual void ProjectAdded(Project Project);
    [DispIdAttribute("7")]
public abstract virtual void ProjectRemoved(Project Project);
    [DispIdAttribute("8")]
public abstract virtual void ProjectRenamed(Project Project, string OldName);
}
[ComVisibleAttribute("False")]
public class EnvDTE._dispSolutionEvents_AfterClosingEventHandler : MulticastDelegate {
    public _dispSolutionEvents_AfterClosingEventHandler(object object, IntPtr method);
    public virtual void Invoke();
    public virtual IAsyncResult BeginInvoke(AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
[ComVisibleAttribute("False")]
public class EnvDTE._dispSolutionEvents_BeforeClosingEventHandler : MulticastDelegate {
    public _dispSolutionEvents_BeforeClosingEventHandler(object object, IntPtr method);
    public virtual void Invoke();
    public virtual IAsyncResult BeginInvoke(AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
[ComEventInterfaceAttribute("EnvDTE._dispSolutionEvents", "EnvDTE._dispSolutionEvents_EventProvider")]
[ComVisibleAttribute("False")]
public interface EnvDTE._dispSolutionEvents_Event {
    [CompilerGeneratedAttribute]
public abstract virtual void add_Opened(_dispSolutionEvents_OpenedEventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_Opened(_dispSolutionEvents_OpenedEventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_BeforeClosing(_dispSolutionEvents_BeforeClosingEventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_BeforeClosing(_dispSolutionEvents_BeforeClosingEventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_AfterClosing(_dispSolutionEvents_AfterClosingEventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_AfterClosing(_dispSolutionEvents_AfterClosingEventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_QueryCloseSolution(_dispSolutionEvents_QueryCloseSolutionEventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_QueryCloseSolution(_dispSolutionEvents_QueryCloseSolutionEventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_Renamed(_dispSolutionEvents_RenamedEventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_Renamed(_dispSolutionEvents_RenamedEventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_ProjectAdded(_dispSolutionEvents_ProjectAddedEventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_ProjectAdded(_dispSolutionEvents_ProjectAddedEventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_ProjectRemoved(_dispSolutionEvents_ProjectRemovedEventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_ProjectRemoved(_dispSolutionEvents_ProjectRemovedEventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_ProjectRenamed(_dispSolutionEvents_ProjectRenamedEventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_ProjectRenamed(_dispSolutionEvents_ProjectRenamedEventHandler value);
}
internal class EnvDTE._dispSolutionEvents_EventProvider : object {
    private IConnectionPointContainer m_ConnectionPointContainer;
    private ArrayList m_aEventSinkHelpers;
    private IConnectionPoint m_ConnectionPoint;
    public _dispSolutionEvents_EventProvider(object A_1);
    private void Init();
    public sealed virtual void add_Opened(_dispSolutionEvents_OpenedEventHandler value);
    public sealed virtual void remove_Opened(_dispSolutionEvents_OpenedEventHandler value);
    private void AddOpened(_dispSolutionEvents_OpenedEventHandler A_1);
    private void RemoveOpened(_dispSolutionEvents_OpenedEventHandler A_1);
    public sealed virtual void add_BeforeClosing(_dispSolutionEvents_BeforeClosingEventHandler value);
    public sealed virtual void remove_BeforeClosing(_dispSolutionEvents_BeforeClosingEventHandler value);
    private void AddBeforeClosing(_dispSolutionEvents_BeforeClosingEventHandler A_1);
    private void RemoveBeforeClosing(_dispSolutionEvents_BeforeClosingEventHandler A_1);
    public sealed virtual void add_AfterClosing(_dispSolutionEvents_AfterClosingEventHandler value);
    public sealed virtual void remove_AfterClosing(_dispSolutionEvents_AfterClosingEventHandler value);
    private void AddAfterClosing(_dispSolutionEvents_AfterClosingEventHandler A_1);
    private void RemoveAfterClosing(_dispSolutionEvents_AfterClosingEventHandler A_1);
    public sealed virtual void add_QueryCloseSolution(_dispSolutionEvents_QueryCloseSolutionEventHandler value);
    public sealed virtual void remove_QueryCloseSolution(_dispSolutionEvents_QueryCloseSolutionEventHandler value);
    private void AddQueryCloseSolution(_dispSolutionEvents_QueryCloseSolutionEventHandler A_1);
    private void RemoveQueryCloseSolution(_dispSolutionEvents_QueryCloseSolutionEventHandler A_1);
    public sealed virtual void add_Renamed(_dispSolutionEvents_RenamedEventHandler value);
    public sealed virtual void remove_Renamed(_dispSolutionEvents_RenamedEventHandler value);
    private void AddRenamed(_dispSolutionEvents_RenamedEventHandler A_1);
    private void RemoveRenamed(_dispSolutionEvents_RenamedEventHandler A_1);
    public sealed virtual void add_ProjectAdded(_dispSolutionEvents_ProjectAddedEventHandler value);
    public sealed virtual void remove_ProjectAdded(_dispSolutionEvents_ProjectAddedEventHandler value);
    private void AddProjectAdded(_dispSolutionEvents_ProjectAddedEventHandler A_1);
    private void RemoveProjectAdded(_dispSolutionEvents_ProjectAddedEventHandler A_1);
    public sealed virtual void add_ProjectRemoved(_dispSolutionEvents_ProjectRemovedEventHandler value);
    public sealed virtual void remove_ProjectRemoved(_dispSolutionEvents_ProjectRemovedEventHandler value);
    private void AddProjectRemoved(_dispSolutionEvents_ProjectRemovedEventHandler A_1);
    private void RemoveProjectRemoved(_dispSolutionEvents_ProjectRemovedEventHandler A_1);
    public sealed virtual void add_ProjectRenamed(_dispSolutionEvents_ProjectRenamedEventHandler value);
    public sealed virtual void remove_ProjectRenamed(_dispSolutionEvents_ProjectRenamedEventHandler value);
    private void AddProjectRenamed(_dispSolutionEvents_ProjectRenamedEventHandler A_1);
    private void RemoveProjectRenamed(_dispSolutionEvents_ProjectRenamedEventHandler A_1);
    protected virtual override void Finalize();
    public sealed virtual void Dispose();
    private void Dispose(bool disposing);
}
[ComVisibleAttribute("False")]
public class EnvDTE._dispSolutionEvents_OpenedEventHandler : MulticastDelegate {
    public _dispSolutionEvents_OpenedEventHandler(object object, IntPtr method);
    public virtual void Invoke();
    public virtual IAsyncResult BeginInvoke(AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
[ComVisibleAttribute("False")]
public class EnvDTE._dispSolutionEvents_ProjectAddedEventHandler : MulticastDelegate {
    public _dispSolutionEvents_ProjectAddedEventHandler(object object, IntPtr method);
    public virtual void Invoke(Project Project);
    public virtual IAsyncResult BeginInvoke(Project Project, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
[ComVisibleAttribute("False")]
public class EnvDTE._dispSolutionEvents_ProjectRemovedEventHandler : MulticastDelegate {
    public _dispSolutionEvents_ProjectRemovedEventHandler(object object, IntPtr method);
    public virtual void Invoke(Project Project);
    public virtual IAsyncResult BeginInvoke(Project Project, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
[ComVisibleAttribute("False")]
public class EnvDTE._dispSolutionEvents_ProjectRenamedEventHandler : MulticastDelegate {
    public _dispSolutionEvents_ProjectRenamedEventHandler(object object, IntPtr method);
    public virtual void Invoke(Project Project, string OldName);
    public virtual IAsyncResult BeginInvoke(Project Project, string OldName, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
[ComVisibleAttribute("False")]
public class EnvDTE._dispSolutionEvents_QueryCloseSolutionEventHandler : MulticastDelegate {
    public _dispSolutionEvents_QueryCloseSolutionEventHandler(object object, IntPtr method);
    public virtual void Invoke(Boolean& fCancel);
    public virtual IAsyncResult BeginInvoke(Boolean& fCancel, AsyncCallback callback, object object);
    public virtual void EndInvoke(Boolean& fCancel, IAsyncResult result);
}
[ComVisibleAttribute("False")]
public class EnvDTE._dispSolutionEvents_RenamedEventHandler : MulticastDelegate {
    public _dispSolutionEvents_RenamedEventHandler(object object, IntPtr method);
    public virtual void Invoke(string OldName);
    public virtual IAsyncResult BeginInvoke(string OldName, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
[ClassInterfaceAttribute("0")]
public class EnvDTE._dispSolutionEvents_SinkHelper : object {
    public _dispSolutionEvents_OpenedEventHandler m_OpenedDelegate;
    public _dispSolutionEvents_BeforeClosingEventHandler m_BeforeClosingDelegate;
    public _dispSolutionEvents_AfterClosingEventHandler m_AfterClosingDelegate;
    public _dispSolutionEvents_QueryCloseSolutionEventHandler m_QueryCloseSolutionDelegate;
    public _dispSolutionEvents_RenamedEventHandler m_RenamedDelegate;
    public _dispSolutionEvents_ProjectAddedEventHandler m_ProjectAddedDelegate;
    public _dispSolutionEvents_ProjectRemovedEventHandler m_ProjectRemovedDelegate;
    public _dispSolutionEvents_ProjectRenamedEventHandler m_ProjectRenamedDelegate;
    public int m_dwCookie;
    public sealed virtual void Opened();
    public sealed virtual void BeforeClosing();
    public sealed virtual void AfterClosing();
    public sealed virtual void QueryCloseSolution(Boolean& A_1);
    public sealed virtual void Renamed(string A_1);
    public sealed virtual void ProjectAdded(Project A_1);
    public sealed virtual void ProjectRemoved(Project A_1);
    public sealed virtual void ProjectRenamed(Project A_1, string A_2);
}
[InterfaceTypeAttribute("2")]
[GuidAttribute("1125C423-49BD-11D2-8823-00C04FB6C6FF")]
public interface EnvDTE._dispTaskListEvents {
    [DispIdAttribute("1")]
public abstract virtual void TaskAdded(TaskItem TaskItem);
    [DispIdAttribute("2")]
public abstract virtual void TaskRemoved(TaskItem TaskItem);
    [DispIdAttribute("3")]
public abstract virtual void TaskModified(TaskItem TaskItem, vsTaskListColumn ColumnModified);
    [DispIdAttribute("4")]
public abstract virtual void TaskNavigated(TaskItem TaskItem, Boolean& NavigateHandled);
}
[ComEventInterfaceAttribute("EnvDTE._dispTaskListEvents", "EnvDTE._dispTaskListEvents_EventProvider")]
[ComVisibleAttribute("False")]
public interface EnvDTE._dispTaskListEvents_Event {
    [CompilerGeneratedAttribute]
public abstract virtual void add_TaskAdded(_dispTaskListEvents_TaskAddedEventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_TaskAdded(_dispTaskListEvents_TaskAddedEventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_TaskRemoved(_dispTaskListEvents_TaskRemovedEventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_TaskRemoved(_dispTaskListEvents_TaskRemovedEventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_TaskModified(_dispTaskListEvents_TaskModifiedEventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_TaskModified(_dispTaskListEvents_TaskModifiedEventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_TaskNavigated(_dispTaskListEvents_TaskNavigatedEventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_TaskNavigated(_dispTaskListEvents_TaskNavigatedEventHandler value);
}
internal class EnvDTE._dispTaskListEvents_EventProvider : object {
    private IConnectionPointContainer m_ConnectionPointContainer;
    private ArrayList m_aEventSinkHelpers;
    private IConnectionPoint m_ConnectionPoint;
    public _dispTaskListEvents_EventProvider(object A_1);
    private void Init();
    public sealed virtual void add_TaskAdded(_dispTaskListEvents_TaskAddedEventHandler value);
    public sealed virtual void remove_TaskAdded(_dispTaskListEvents_TaskAddedEventHandler value);
    private void AddTaskAdded(_dispTaskListEvents_TaskAddedEventHandler A_1);
    private void RemoveTaskAdded(_dispTaskListEvents_TaskAddedEventHandler A_1);
    public sealed virtual void add_TaskRemoved(_dispTaskListEvents_TaskRemovedEventHandler value);
    public sealed virtual void remove_TaskRemoved(_dispTaskListEvents_TaskRemovedEventHandler value);
    private void AddTaskRemoved(_dispTaskListEvents_TaskRemovedEventHandler A_1);
    private void RemoveTaskRemoved(_dispTaskListEvents_TaskRemovedEventHandler A_1);
    public sealed virtual void add_TaskModified(_dispTaskListEvents_TaskModifiedEventHandler value);
    public sealed virtual void remove_TaskModified(_dispTaskListEvents_TaskModifiedEventHandler value);
    private void AddTaskModified(_dispTaskListEvents_TaskModifiedEventHandler A_1);
    private void RemoveTaskModified(_dispTaskListEvents_TaskModifiedEventHandler A_1);
    public sealed virtual void add_TaskNavigated(_dispTaskListEvents_TaskNavigatedEventHandler value);
    public sealed virtual void remove_TaskNavigated(_dispTaskListEvents_TaskNavigatedEventHandler value);
    private void AddTaskNavigated(_dispTaskListEvents_TaskNavigatedEventHandler A_1);
    private void RemoveTaskNavigated(_dispTaskListEvents_TaskNavigatedEventHandler A_1);
    protected virtual override void Finalize();
    public sealed virtual void Dispose();
    private void Dispose(bool disposing);
}
[ClassInterfaceAttribute("0")]
public class EnvDTE._dispTaskListEvents_SinkHelper : object {
    public _dispTaskListEvents_TaskAddedEventHandler m_TaskAddedDelegate;
    public _dispTaskListEvents_TaskRemovedEventHandler m_TaskRemovedDelegate;
    public _dispTaskListEvents_TaskModifiedEventHandler m_TaskModifiedDelegate;
    public _dispTaskListEvents_TaskNavigatedEventHandler m_TaskNavigatedDelegate;
    public int m_dwCookie;
    public sealed virtual void TaskAdded(TaskItem A_1);
    public sealed virtual void TaskRemoved(TaskItem A_1);
    public sealed virtual void TaskModified(TaskItem A_1, vsTaskListColumn A_2);
    public sealed virtual void TaskNavigated(TaskItem A_1, Boolean& A_2);
}
[ComVisibleAttribute("False")]
public class EnvDTE._dispTaskListEvents_TaskAddedEventHandler : MulticastDelegate {
    public _dispTaskListEvents_TaskAddedEventHandler(object object, IntPtr method);
    public virtual void Invoke(TaskItem TaskItem);
    public virtual IAsyncResult BeginInvoke(TaskItem TaskItem, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
[ComVisibleAttribute("False")]
public class EnvDTE._dispTaskListEvents_TaskModifiedEventHandler : MulticastDelegate {
    public _dispTaskListEvents_TaskModifiedEventHandler(object object, IntPtr method);
    public virtual void Invoke(TaskItem TaskItem, vsTaskListColumn ColumnModified);
    public virtual IAsyncResult BeginInvoke(TaskItem TaskItem, vsTaskListColumn ColumnModified, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
[ComVisibleAttribute("False")]
public class EnvDTE._dispTaskListEvents_TaskNavigatedEventHandler : MulticastDelegate {
    public _dispTaskListEvents_TaskNavigatedEventHandler(object object, IntPtr method);
    public virtual void Invoke(TaskItem TaskItem, Boolean& NavigateHandled);
    public virtual IAsyncResult BeginInvoke(TaskItem TaskItem, Boolean& NavigateHandled, AsyncCallback callback, object object);
    public virtual void EndInvoke(Boolean& NavigateHandled, IAsyncResult result);
}
[ComVisibleAttribute("False")]
public class EnvDTE._dispTaskListEvents_TaskRemovedEventHandler : MulticastDelegate {
    public _dispTaskListEvents_TaskRemovedEventHandler(object object, IntPtr method);
    public virtual void Invoke(TaskItem TaskItem);
    public virtual IAsyncResult BeginInvoke(TaskItem TaskItem, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
[GuidAttribute("2699DD44-C507-4DA3-AA34-314A6C21DFE2")]
[InterfaceTypeAttribute("2")]
public interface EnvDTE._dispTextEditorEvents {
    [DispIdAttribute("1")]
public abstract virtual void LineChanged(TextPoint StartPoint, TextPoint EndPoint, int Hint);
}
[ComVisibleAttribute("False")]
[ComEventInterfaceAttribute("EnvDTE._dispTextEditorEvents", "EnvDTE._dispTextEditorEvents_EventProvider")]
public interface EnvDTE._dispTextEditorEvents_Event {
    [CompilerGeneratedAttribute]
public abstract virtual void add_LineChanged(_dispTextEditorEvents_LineChangedEventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_LineChanged(_dispTextEditorEvents_LineChangedEventHandler value);
}
internal class EnvDTE._dispTextEditorEvents_EventProvider : object {
    private IConnectionPointContainer m_ConnectionPointContainer;
    private ArrayList m_aEventSinkHelpers;
    private IConnectionPoint m_ConnectionPoint;
    public _dispTextEditorEvents_EventProvider(object A_1);
    private void Init();
    public sealed virtual void add_LineChanged(_dispTextEditorEvents_LineChangedEventHandler value);
    public sealed virtual void remove_LineChanged(_dispTextEditorEvents_LineChangedEventHandler value);
    private void AddLineChanged(_dispTextEditorEvents_LineChangedEventHandler A_1);
    private void RemoveLineChanged(_dispTextEditorEvents_LineChangedEventHandler A_1);
    protected virtual override void Finalize();
    public sealed virtual void Dispose();
    private void Dispose(bool disposing);
}
[ComVisibleAttribute("False")]
public class EnvDTE._dispTextEditorEvents_LineChangedEventHandler : MulticastDelegate {
    public _dispTextEditorEvents_LineChangedEventHandler(object object, IntPtr method);
    public virtual void Invoke(TextPoint StartPoint, TextPoint EndPoint, int Hint);
    public virtual IAsyncResult BeginInvoke(TextPoint StartPoint, TextPoint EndPoint, int Hint, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
[ClassInterfaceAttribute("0")]
public class EnvDTE._dispTextEditorEvents_SinkHelper : object {
    public _dispTextEditorEvents_LineChangedEventHandler m_LineChangedDelegate;
    public int m_dwCookie;
    public sealed virtual void LineChanged(TextPoint A_1, TextPoint A_2, int A_3);
}
[InterfaceTypeAttribute("2")]
[GuidAttribute("0D3A23A9-67BB-11D2-97C1-00C04FB6C6FF")]
public interface EnvDTE._dispWindowEvents {
    [DispIdAttribute("1")]
public abstract virtual void WindowClosing(Window Window);
    [DispIdAttribute("2")]
public abstract virtual void WindowMoved(Window Window, int Top, int Left, int Width, int Height);
    [DispIdAttribute("3")]
public abstract virtual void WindowActivated(Window GotFocus, Window LostFocus);
    [DispIdAttribute("4")]
public abstract virtual void WindowCreated(Window Window);
}
[ComEventInterfaceAttribute("EnvDTE._dispWindowEvents", "EnvDTE._dispWindowEvents_EventProvider")]
[ComVisibleAttribute("False")]
public interface EnvDTE._dispWindowEvents_Event {
    [CompilerGeneratedAttribute]
public abstract virtual void add_WindowClosing(_dispWindowEvents_WindowClosingEventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_WindowClosing(_dispWindowEvents_WindowClosingEventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_WindowMoved(_dispWindowEvents_WindowMovedEventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_WindowMoved(_dispWindowEvents_WindowMovedEventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_WindowActivated(_dispWindowEvents_WindowActivatedEventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_WindowActivated(_dispWindowEvents_WindowActivatedEventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_WindowCreated(_dispWindowEvents_WindowCreatedEventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_WindowCreated(_dispWindowEvents_WindowCreatedEventHandler value);
}
internal class EnvDTE._dispWindowEvents_EventProvider : object {
    private IConnectionPointContainer m_ConnectionPointContainer;
    private ArrayList m_aEventSinkHelpers;
    private IConnectionPoint m_ConnectionPoint;
    public _dispWindowEvents_EventProvider(object A_1);
    private void Init();
    public sealed virtual void add_WindowClosing(_dispWindowEvents_WindowClosingEventHandler value);
    public sealed virtual void remove_WindowClosing(_dispWindowEvents_WindowClosingEventHandler value);
    private void AddWindowClosing(_dispWindowEvents_WindowClosingEventHandler A_1);
    private void RemoveWindowClosing(_dispWindowEvents_WindowClosingEventHandler A_1);
    public sealed virtual void add_WindowMoved(_dispWindowEvents_WindowMovedEventHandler value);
    public sealed virtual void remove_WindowMoved(_dispWindowEvents_WindowMovedEventHandler value);
    private void AddWindowMoved(_dispWindowEvents_WindowMovedEventHandler A_1);
    private void RemoveWindowMoved(_dispWindowEvents_WindowMovedEventHandler A_1);
    public sealed virtual void add_WindowActivated(_dispWindowEvents_WindowActivatedEventHandler value);
    public sealed virtual void remove_WindowActivated(_dispWindowEvents_WindowActivatedEventHandler value);
    private void AddWindowActivated(_dispWindowEvents_WindowActivatedEventHandler A_1);
    private void RemoveWindowActivated(_dispWindowEvents_WindowActivatedEventHandler A_1);
    public sealed virtual void add_WindowCreated(_dispWindowEvents_WindowCreatedEventHandler value);
    public sealed virtual void remove_WindowCreated(_dispWindowEvents_WindowCreatedEventHandler value);
    private void AddWindowCreated(_dispWindowEvents_WindowCreatedEventHandler A_1);
    private void RemoveWindowCreated(_dispWindowEvents_WindowCreatedEventHandler A_1);
    protected virtual override void Finalize();
    public sealed virtual void Dispose();
    private void Dispose(bool disposing);
}
[ClassInterfaceAttribute("0")]
public class EnvDTE._dispWindowEvents_SinkHelper : object {
    public _dispWindowEvents_WindowClosingEventHandler m_WindowClosingDelegate;
    public _dispWindowEvents_WindowMovedEventHandler m_WindowMovedDelegate;
    public _dispWindowEvents_WindowActivatedEventHandler m_WindowActivatedDelegate;
    public _dispWindowEvents_WindowCreatedEventHandler m_WindowCreatedDelegate;
    public int m_dwCookie;
    public sealed virtual void WindowClosing(Window A_1);
    public sealed virtual void WindowMoved(Window A_1, int A_2, int A_3, int A_4, int A_5);
    public sealed virtual void WindowActivated(Window A_1, Window A_2);
    public sealed virtual void WindowCreated(Window A_1);
}
[ComVisibleAttribute("False")]
public class EnvDTE._dispWindowEvents_WindowActivatedEventHandler : MulticastDelegate {
    public _dispWindowEvents_WindowActivatedEventHandler(object object, IntPtr method);
    public virtual void Invoke(Window GotFocus, Window LostFocus);
    public virtual IAsyncResult BeginInvoke(Window GotFocus, Window LostFocus, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
[ComVisibleAttribute("False")]
public class EnvDTE._dispWindowEvents_WindowClosingEventHandler : MulticastDelegate {
    public _dispWindowEvents_WindowClosingEventHandler(object object, IntPtr method);
    public virtual void Invoke(Window Window);
    public virtual IAsyncResult BeginInvoke(Window Window, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
[ComVisibleAttribute("False")]
public class EnvDTE._dispWindowEvents_WindowCreatedEventHandler : MulticastDelegate {
    public _dispWindowEvents_WindowCreatedEventHandler(object object, IntPtr method);
    public virtual void Invoke(Window Window);
    public virtual IAsyncResult BeginInvoke(Window Window, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
[ComVisibleAttribute("False")]
public class EnvDTE._dispWindowEvents_WindowMovedEventHandler : MulticastDelegate {
    public _dispWindowEvents_WindowMovedEventHandler(object object, IntPtr method);
    public virtual void Invoke(Window Window, int Top, int Left, int Width, int Height);
    public virtual IAsyncResult BeginInvoke(Window Window, int Top, int Left, int Width, int Height, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
[GuidAttribute("DC5437F5-F114-11D2-AACF-00C04F688DDE")]
public interface EnvDTE._DocumentEvents {
}
[TypeLibTypeAttribute("4176")]
[GuidAttribute("DC5437F4-F114-11D2-AACF-00C04F688DDE")]
public interface EnvDTE._DocumentEventsRoot {
    [DispIdAttribute("1")]
public object DocumentEvents { get; }
    [TypeLibFuncAttribute("64")]
[DispIdAttribute("1")]
public abstract virtual object get_DocumentEvents(Document WindowFilter);
}
[ComVisibleAttribute("False")]
[CoClassAttribute("EnvDTE.DTEClass")]
[GuidAttribute("04A72314-32E9-48E2-9B87-A63603454F3E")]
[DefaultMemberAttribute("Name")]
public interface EnvDTE._DTE {
}
[GuidAttribute("FA1BB6D7-CA83-11D2-AAB2-00C04F688DDE")]
public interface EnvDTE._DTEEvents {
}
[GuidAttribute("76ED1C48-ED86-4E9E-ACF8-A40E765DAF25")]
public interface EnvDTE._EnvironmentDocuments {
    [DispIdAttribute("1")]
public bool ReuseSavedActiveDocWindow { get; public set; }
    [DispIdAttribute("2")]
public bool DetectFileChangesOutsideIDE { get; public set; }
    [DispIdAttribute("3")]
public bool AutoloadExternalChanges { get; public set; }
    [DispIdAttribute("4")]
public bool InitializeOpenFileFromCurrentDocument { get; public set; }
    [DispIdAttribute("5")]
public int MiscFilesProjectSavesLastNItems { get; public set; }
    [DispIdAttribute("6")]
public bool FindReplaceShowMessageBoxes { get; public set; }
    [DispIdAttribute("7")]
public bool FindReplaceInitializeFromEditor { get; public set; }
    [DispIdAttribute("1")]
public abstract virtual void set_ReuseSavedActiveDocWindow(bool value);
    [DispIdAttribute("1")]
public abstract virtual bool get_ReuseSavedActiveDocWindow();
    [DispIdAttribute("2")]
public abstract virtual void set_DetectFileChangesOutsideIDE(bool value);
    [DispIdAttribute("2")]
public abstract virtual bool get_DetectFileChangesOutsideIDE();
    [DispIdAttribute("3")]
public abstract virtual void set_AutoloadExternalChanges(bool value);
    [DispIdAttribute("3")]
public abstract virtual bool get_AutoloadExternalChanges();
    [DispIdAttribute("4")]
public abstract virtual void set_InitializeOpenFileFromCurrentDocument(bool value);
    [DispIdAttribute("4")]
public abstract virtual bool get_InitializeOpenFileFromCurrentDocument();
    [DispIdAttribute("5")]
public abstract virtual void set_MiscFilesProjectSavesLastNItems(int value);
    [DispIdAttribute("5")]
public abstract virtual int get_MiscFilesProjectSavesLastNItems();
    [DispIdAttribute("6")]
public abstract virtual bool get_FindReplaceShowMessageBoxes();
    [DispIdAttribute("6")]
public abstract virtual void set_FindReplaceShowMessageBoxes(bool value);
    [DispIdAttribute("7")]
public abstract virtual bool get_FindReplaceInitializeFromEditor();
    [DispIdAttribute("7")]
public abstract virtual void set_FindReplaceInitializeFromEditor(bool value);
}
[GuidAttribute("F809CAB6-2C9F-41F2-A5AF-E26FB80E62AD")]
public interface EnvDTE._EnvironmentFontsAndColors {
}
[GuidAttribute("48E61D9C-8C8D-42D3-914B-46D70C8B7A40")]
public interface EnvDTE._EnvironmentGeneral {
    [DispIdAttribute("1")]
public vsStartUp OnStartUp { get; public set; }
    [DispIdAttribute("2")]
public bool ShowStatusBar { get; public set; }
    [DispIdAttribute("3")]
public int WindowMenuContainsNItems { get; public set; }
    [DispIdAttribute("4")]
public int MRUListContainsNItems { get; public set; }
    [DispIdAttribute("5")]
public short AnimationSpeed { get; public set; }
    [DispIdAttribute("6")]
public bool Animations { get; public set; }
    [DispIdAttribute("7")]
public bool ShowCommandWindowCompletion { get; public set; }
    [DispIdAttribute("11")]
public bool CloseButtonActiveTabOnly { get; public set; }
    [DispIdAttribute("12")]
public bool AutohidePinActiveTabOnly { get; public set; }
    [DispIdAttribute("1")]
public abstract virtual void set_OnStartUp(vsStartUp value);
    [DispIdAttribute("1")]
public abstract virtual vsStartUp get_OnStartUp();
    [DispIdAttribute("2")]
public abstract virtual void set_ShowStatusBar(bool value);
    [DispIdAttribute("2")]
public abstract virtual bool get_ShowStatusBar();
    [DispIdAttribute("3")]
public abstract virtual void set_WindowMenuContainsNItems(int value);
    [DispIdAttribute("3")]
public abstract virtual int get_WindowMenuContainsNItems();
    [DispIdAttribute("4")]
public abstract virtual void set_MRUListContainsNItems(int value);
    [DispIdAttribute("4")]
public abstract virtual int get_MRUListContainsNItems();
    [DispIdAttribute("5")]
public abstract virtual short get_AnimationSpeed();
    [DispIdAttribute("5")]
public abstract virtual void set_AnimationSpeed(short value);
    [DispIdAttribute("6")]
public abstract virtual bool get_Animations();
    [DispIdAttribute("6")]
public abstract virtual void set_Animations(bool value);
    [DispIdAttribute("7")]
public abstract virtual bool get_ShowCommandWindowCompletion();
    [DispIdAttribute("7")]
public abstract virtual void set_ShowCommandWindowCompletion(bool value);
    [DispIdAttribute("11")]
public abstract virtual void set_CloseButtonActiveTabOnly(bool value);
    [DispIdAttribute("11")]
public abstract virtual bool get_CloseButtonActiveTabOnly();
    [DispIdAttribute("12")]
public abstract virtual void set_AutohidePinActiveTabOnly(bool value);
    [DispIdAttribute("12")]
public abstract virtual bool get_AutohidePinActiveTabOnly();
}
[DefaultMemberAttribute("PreferredLanguage")]
[GuidAttribute("AEBDED64-A206-11D3-B8B5-00C04F79F802")]
public interface EnvDTE._EnvironmentHelp {
    [DispIdAttribute("0")]
public int PreferredLanguage { get; public set; }
    [DispIdAttribute("1")]
public string PreferredCollection { get; public set; }
    [DispIdAttribute("2")]
public bool External { get; public set; }
    [DispIdAttribute("0")]
public abstract virtual int get_PreferredLanguage();
    [DispIdAttribute("0")]
public abstract virtual void set_PreferredLanguage(int value);
    [DispIdAttribute("1")]
public abstract virtual string get_PreferredCollection();
    [DispIdAttribute("1")]
public abstract virtual void set_PreferredCollection(string value);
    [DispIdAttribute("2")]
public abstract virtual bool get_External();
    [DispIdAttribute("2")]
public abstract virtual void set_External(bool value);
}
[GuidAttribute("9C722678-490D-408F-98AE-B6B9A68AA45D")]
public interface EnvDTE._EnvironmentKeyboard {
    [DispIdAttribute("1")]
public string Scheme { get; public set; }
    [DispIdAttribute("1")]
public abstract virtual void set_Scheme(string value);
    [DispIdAttribute("1")]
public abstract virtual string get_Scheme();
}
[GuidAttribute("478F06D4-5D57-473F-9B74-5F8E88EFA5E7")]
public interface EnvDTE._EnvironmentProjectsAndSolution {
    [DispIdAttribute("1")]
public vsSaveChanges OnRunOrPreview { get; public set; }
    [DispIdAttribute("2")]
public string ProjectsLocation { get; public set; }
    [DispIdAttribute("3")]
public bool ShowOutputWindowBeforeBuild { get; public set; }
    [DispIdAttribute("4")]
public bool ShowTaskListAfterBuild { get; public set; }
    [DispIdAttribute("1")]
public abstract virtual void set_OnRunOrPreview(vsSaveChanges value);
    [DispIdAttribute("1")]
public abstract virtual vsSaveChanges get_OnRunOrPreview();
    [DispIdAttribute("2")]
public abstract virtual void set_ProjectsLocation(string value);
    [DispIdAttribute("2")]
public abstract virtual string get_ProjectsLocation();
    [DispIdAttribute("3")]
public abstract virtual void set_ShowOutputWindowBeforeBuild(bool value);
    [DispIdAttribute("3")]
public abstract virtual bool get_ShowOutputWindowBeforeBuild();
    [DispIdAttribute("4")]
public abstract virtual void set_ShowTaskListAfterBuild(bool value);
    [DispIdAttribute("4")]
public abstract virtual bool get_ShowTaskListAfterBuild();
}
[GuidAttribute("4BC18A5B-DBB6-4AF5-A443-2E3F19365304")]
public interface EnvDTE._EnvironmentTaskList {
    [DispIdAttribute("1")]
public bool ConfirmTaskDeletion { get; public set; }
    [DispIdAttribute("2")]
public bool WarnOnAddingHiddenItem { get; public set; }
    [DispIdAttribute("3")]
public object CommentTokens { get; public set; }
    [DispIdAttribute("1")]
public abstract virtual bool get_ConfirmTaskDeletion();
    [DispIdAttribute("1")]
public abstract virtual void set_ConfirmTaskDeletion(bool value);
    [DispIdAttribute("2")]
public abstract virtual bool get_WarnOnAddingHiddenItem();
    [DispIdAttribute("2")]
public abstract virtual void set_WarnOnAddingHiddenItem(bool value);
    [DispIdAttribute("3")]
public abstract virtual object get_CommentTokens();
    [DispIdAttribute("3")]
public abstract virtual void set_CommentTokens(object value);
}
[GuidAttribute("A3286B03-5AC6-44F0-8CC3-EBED7F1124E5")]
public interface EnvDTE._EnvironmentWebBrowser {
    [DispIdAttribute("1")]
public bool UseDefaultHomePage { get; public set; }
    [DispIdAttribute("2")]
public string HomePage { get; public set; }
    [DispIdAttribute("3")]
public bool UseDefaultSearchPage { get; public set; }
    [DispIdAttribute("4")]
public string SearchPage { get; public set; }
    [DispIdAttribute("5")]
public vsBrowserViewSource ViewSourceIn { get; public set; }
    [DispIdAttribute("6")]
public string ViewSourceExternalProgram { get; public set; }
    [DispIdAttribute("1")]
public abstract virtual void set_UseDefaultHomePage(bool value);
    [DispIdAttribute("1")]
public abstract virtual bool get_UseDefaultHomePage();
    [DispIdAttribute("2")]
public abstract virtual void set_HomePage(string value);
    [DispIdAttribute("2")]
public abstract virtual string get_HomePage();
    [DispIdAttribute("3")]
public abstract virtual void set_UseDefaultSearchPage(bool value);
    [DispIdAttribute("3")]
public abstract virtual bool get_UseDefaultSearchPage();
    [DispIdAttribute("4")]
public abstract virtual void set_SearchPage(string value);
    [DispIdAttribute("4")]
public abstract virtual string get_SearchPage();
    [DispIdAttribute("5")]
public abstract virtual void set_ViewSourceIn(vsBrowserViewSource value);
    [DispIdAttribute("5")]
public abstract virtual vsBrowserViewSource get_ViewSourceIn();
    [DispIdAttribute("6")]
public abstract virtual void set_ViewSourceExternalProgram(string value);
    [DispIdAttribute("6")]
public abstract virtual string get_ViewSourceExternalProgram();
}
[GuidAttribute("C5331ACD-C5D5-11D2-8598-006097C68E81")]
public interface EnvDTE._FindEvents {
}
[GuidAttribute("256068F6-1ADD-4F7B-BA76-571314C413AD")]
public interface EnvDTE._FontsAndColors {
    [DispIdAttribute("1")]
public string FontFamily { get; public set; }
    [DispIdAttribute("2")]
public vsFontCharSet FontCharacterSet { get; public set; }
    [DispIdAttribute("3")]
public short FontSize { get; public set; }
    [DispIdAttribute("4")]
public FontsAndColorsItems FontsAndColorsItems { get; }
    [DispIdAttribute("1")]
public abstract virtual string get_FontFamily();
    [DispIdAttribute("1")]
public abstract virtual void set_FontFamily(string value);
    [DispIdAttribute("2")]
public abstract virtual vsFontCharSet get_FontCharacterSet();
    [DispIdAttribute("2")]
public abstract virtual void set_FontCharacterSet(vsFontCharSet value);
    [DispIdAttribute("3")]
public abstract virtual short get_FontSize();
    [DispIdAttribute("3")]
public abstract virtual void set_FontSize(short value);
    [DispIdAttribute("4")]
public abstract virtual FontsAndColorsItems get_FontsAndColorsItems();
}
[GuidAttribute("7658B944-F37B-11D2-AACF-00C04F688DDE")]
public interface EnvDTE._MiscSlnFilesEventsRoot {
    [DispIdAttribute("1")]
public object SolutionItemsEvents { get; }
    [DispIdAttribute("2")]
public object MiscFilesEvents { get; }
    [DispIdAttribute("1")]
public abstract virtual object get_SolutionItemsEvents();
    [DispIdAttribute("2")]
public abstract virtual object get_MiscFilesEvents();
}
[GuidAttribute("0A3546A8-6840-11D2-97C1-00C04FB6C6FF")]
public interface EnvDTE._OutputWindowEvents {
}
[GuidAttribute("AA6F4085-33B6-4629-B9EA-692101007CC2")]
[TypeLibTypeAttribute("4176")]
public interface EnvDTE._OutputWindowEventsRoot {
    [DispIdAttribute("1")]
public object OutputWindowEvents { get; }
    [TypeLibFuncAttribute("64")]
[DispIdAttribute("1")]
public abstract virtual object get_OutputWindowEvents(string PaneFilter);
}
[GuidAttribute("22800963-2811-410D-BF87-A7808EAC977D")]
public interface EnvDTE._ProjectItemsEvents {
}
[GuidAttribute("85451F83-B5CA-437F-A619-0CB705707420")]
public interface EnvDTE._ProjectsEvents {
}
[ComVisibleAttribute("False")]
[GuidAttribute("EB6783DB-1819-496D-84A4-3CFF883010F6")]
public interface EnvDTE._SelectionEvents {
}
[DefaultMemberAttribute("Item")]
[TypeLibTypeAttribute("4160")]
[GuidAttribute("26F6CC4B-7A48-4E4D-8AF5-9E960232E05F")]
public interface EnvDTE._Solution {
    [DispIdAttribute("10")]
public DTE DTE { get; }
    [DispIdAttribute("11")]
public DTE Parent { get; }
    [DispIdAttribute("12")]
public int Count { get; }
    [DispIdAttribute("13")]
public string FileName { get; }
    [DispIdAttribute("19")]
public Properties Properties { get; }
    [DispIdAttribute("22")]
public bool IsDirty { get; public set; }
    [DispIdAttribute("26")]
public string TemplatePath { get; }
    [DispIdAttribute("28")]
public string FullName { get; }
    [DispIdAttribute("29")]
public bool Saved { get; public set; }
    [DispIdAttribute("31")]
public Globals Globals { get; }
    [ObsoleteAttribute("AddIn related extension points are no longer supported in Visual Studio.")]
[DispIdAttribute("32")]
public AddIns AddIns { get; }
    [DispIdAttribute("33")]
public object Extender { get; }
    [DispIdAttribute("34")]
public object ExtenderNames { get; }
    [DispIdAttribute("35")]
public string ExtenderCATID { get; }
    [DispIdAttribute("36")]
public bool IsOpen { get; }
    [DispIdAttribute("38")]
public SolutionBuild SolutionBuild { get; }
    [DispIdAttribute("41")]
public Projects Projects { get; }
    [DispIdAttribute("0")]
public abstract virtual Project Item(object index);
    [DispIdAttribute("-4")]
[TypeLibFuncAttribute("1")]
public abstract virtual IEnumerator GetEnumerator();
    [DispIdAttribute("10")]
public abstract virtual DTE get_DTE();
    [DispIdAttribute("11")]
public abstract virtual DTE get_Parent();
    [DispIdAttribute("12")]
public abstract virtual int get_Count();
    [TypeLibFuncAttribute("64")]
[DispIdAttribute("13")]
public abstract virtual string get_FileName();
    [DispIdAttribute("14")]
public abstract virtual void SaveAs(string FileName);
    [DispIdAttribute("15")]
public abstract virtual Project AddFromTemplate(string FileName, string Destination, string ProjectName, bool Exclusive);
    [DispIdAttribute("16")]
public abstract virtual Project AddFromFile(string FileName, bool Exclusive);
    [DispIdAttribute("17")]
public abstract virtual void Open(string FileName);
    [DispIdAttribute("18")]
public abstract virtual void Close(bool SaveFirst);
    [DispIdAttribute("19")]
public abstract virtual Properties get_Properties();
    [TypeLibFuncAttribute("64")]
[DispIdAttribute("22")]
public abstract virtual bool get_IsDirty();
    [TypeLibFuncAttribute("64")]
[DispIdAttribute("22")]
public abstract virtual void set_IsDirty(bool lpfReturn);
    [DispIdAttribute("25")]
public abstract virtual void Remove(Project proj);
    [DispIdAttribute("26")]
public abstract virtual string get_TemplatePath(string ProjectType);
    [DispIdAttribute("28")]
public abstract virtual string get_FullName();
    [DispIdAttribute("29")]
public abstract virtual bool get_Saved();
    [DispIdAttribute("29")]
public abstract virtual void set_Saved(bool lpfReturn);
    [DispIdAttribute("31")]
public abstract virtual Globals get_Globals();
    [DispIdAttribute("32")]
[ObsoleteAttribute("AddIn related extension points are no longer supported in Visual Studio.")]
public abstract virtual AddIns get_AddIns();
    [TypeLibFuncAttribute("1024")]
[DispIdAttribute("33")]
public abstract virtual object get_Extender(string ExtenderName);
    [TypeLibFuncAttribute("1024")]
[DispIdAttribute("34")]
public abstract virtual object get_ExtenderNames();
    [TypeLibFuncAttribute("1024")]
[DispIdAttribute("35")]
public abstract virtual string get_ExtenderCATID();
    [DispIdAttribute("36")]
public abstract virtual bool get_IsOpen();
    [DispIdAttribute("38")]
public abstract virtual SolutionBuild get_SolutionBuild();
    [DispIdAttribute("40")]
public abstract virtual void Create(string Destination, string Name);
    [DispIdAttribute("41")]
public abstract virtual Projects get_Projects();
    [DispIdAttribute("42")]
public abstract virtual ProjectItem FindProjectItem(string FileName);
    [DispIdAttribute("43")]
public abstract virtual string ProjectItemsTemplatePath(string ProjectKind);
}
[GuidAttribute("BF8BBF37-5415-46A9-940D-594CAD9DEC26")]
public interface EnvDTE._SolutionEvents {
}
[GuidAttribute("1125C422-49BD-11D2-8823-00C04FB6C6FF")]
public interface EnvDTE._TaskListEvents {
}
[GuidAttribute("6BC8C372-C6F0-4BE6-B255-827AC190BF71")]
public interface EnvDTE._TaskListEventsRoot {
    [DispIdAttribute("1")]
public object TaskListEvents { get; }
    [DispIdAttribute("1")]
public abstract virtual object get_TaskListEvents();
}
[GuidAttribute("23B7A868-6C89-436A-94FA-25D755456A77")]
public interface EnvDTE._TextEditorEvents {
}
[GuidAttribute("B3C38885-B288-44A8-B290-34FE63BF3C76")]
[TypeLibTypeAttribute("4176")]
public interface EnvDTE._TextEditorEventsRoot {
    [DispIdAttribute("1")]
public object TextEditorEvents { get; }
    [TypeLibFuncAttribute("64")]
[DispIdAttribute("1")]
public abstract virtual object get_TextEditorEvents(TextDocument TextDocumentFilter);
}
public enum EnvDTE._vsIndentStyle : Enum {
    public int value__;
    public static _vsIndentStyle vsIndentStyleNone;
    public static _vsIndentStyle vsIndentStyleDefault;
    public static _vsIndentStyle vsIndentStyleSmart;
}
[GuidAttribute("0D3A23A8-67BB-11D2-97C1-00C04FB6C6FF")]
public interface EnvDTE._WindowEvents {
}
[GuidAttribute("17D12026-BA99-403E-A359-71FD1E5A72CD")]
[TypeLibTypeAttribute("4176")]
public interface EnvDTE._WindowEventsRoot {
    [DispIdAttribute("1")]
public object WindowEvents { get; }
    [TypeLibFuncAttribute("64")]
[DispIdAttribute("1")]
public abstract virtual object get_WindowEvents(Window WindowFilter);
}
[ObsoleteAttribute("AddIn related extension points are no longer supported in Visual Studio.")]
[GuidAttribute("53A87FA1-CE93-48BF-958B-C6DA793C5028")]
[DefaultMemberAttribute("Description")]
public interface EnvDTE.AddIn {
    [DispIdAttribute("0")]
public string Description { get; public set; }
    [DispIdAttribute("2")]
public AddIns Collection { get; }
    [DispIdAttribute("3")]
public string ProgID { get; }
    [DispIdAttribute("4")]
public string Guid { get; }
    [DispIdAttribute("6")]
public bool Connected { get; public set; }
    [DispIdAttribute("7")]
public object Object { get; public set; }
    [DispIdAttribute("301")]
public DTE DTE { get; }
    [DispIdAttribute("302")]
public string Name { get; }
    [DispIdAttribute("304")]
public string SatelliteDllPath { get; }
    [DispIdAttribute("0")]
public abstract virtual string get_Description();
    [DispIdAttribute("0")]
public abstract virtual void set_Description(string value);
    [DispIdAttribute("2")]
public abstract virtual AddIns get_Collection();
    [DispIdAttribute("3")]
public abstract virtual string get_ProgID();
    [DispIdAttribute("4")]
public abstract virtual string get_Guid();
    [DispIdAttribute("6")]
public abstract virtual bool get_Connected();
    [DispIdAttribute("6")]
public abstract virtual void set_Connected(bool value);
    [DispIdAttribute("7")]
public abstract virtual object get_Object();
    [DispIdAttribute("7")]
public abstract virtual void set_Object(object value);
    [DispIdAttribute("301")]
public abstract virtual DTE get_DTE();
    [DispIdAttribute("302")]
public abstract virtual string get_Name();
    [DispIdAttribute("303")]
public abstract virtual void Remove();
    [DispIdAttribute("304")]
public abstract virtual string get_SatelliteDllPath();
}
[ObsoleteAttribute("AddIn related extension points are no longer supported in Visual Studio.")]
[GuidAttribute("50590801-D13E-4404-80C2-5CA30A4D0EE8")]
[DefaultMemberAttribute("Item")]
public interface EnvDTE.AddIns {
    [DispIdAttribute("2")]
public object Parent { get; }
    [DispIdAttribute("40")]
public int Count { get; }
    [DispIdAttribute("100")]
public DTE DTE { get; }
    [DispIdAttribute("0")]
public abstract virtual AddIn Item(object index);
    [DispIdAttribute("2")]
public abstract virtual object get_Parent();
    [DispIdAttribute("40")]
public abstract virtual int get_Count();
    [DispIdAttribute("-4")]
public abstract virtual IEnumerator GetEnumerator();
    [DispIdAttribute("41")]
public abstract virtual void Update();
    [DispIdAttribute("100")]
public abstract virtual DTE get_DTE();
    [DispIdAttribute("102")]
public abstract virtual AddIn Add(string ProgID, string Description, string Name, bool Connected);
}
[DefaultMemberAttribute("Name")]
[GuidAttribute("11C5114C-BB00-11D2-8AD1-00C04F79E479")]
public interface EnvDTE.Breakpoint {
    [DispIdAttribute("100")]
public dbgBreakpointType Type { get; }
    [DispIdAttribute("0")]
public string Name { get; public set; }
    [DispIdAttribute("101")]
public dbgBreakpointLocationType LocationType { get; }
    [DispIdAttribute("102")]
public string FunctionName { get; }
    [DispIdAttribute("103")]
public int FunctionLineOffset { get; }
    [DispIdAttribute("104")]
public int FunctionColumnOffset { get; }
    [DispIdAttribute("105")]
public string File { get; }
    [DispIdAttribute("106")]
public int FileLine { get; }
    [DispIdAttribute("107")]
public int FileColumn { get; }
    [DispIdAttribute("108")]
public dbgBreakpointConditionType ConditionType { get; }
    [DispIdAttribute("109")]
public string Condition { get; }
    [DispIdAttribute("110")]
public string Language { get; }
    [DispIdAttribute("111")]
public dbgHitCountType HitCountType { get; }
    [DispIdAttribute("112")]
public int HitCountTarget { get; }
    [DispIdAttribute("113")]
public bool Enabled { get; public set; }
    [DispIdAttribute("114")]
public string Tag { get; public set; }
    [DispIdAttribute("115")]
public int CurrentHits { get; }
    [DispIdAttribute("116")]
public Program Program { get; }
    [DispIdAttribute("200")]
public DTE DTE { get; }
    [DispIdAttribute("201")]
public Breakpoint Parent { get; }
    [DispIdAttribute("202")]
public Breakpoints Collection { get; }
    [DispIdAttribute("203")]
public Breakpoints Children { get; }
    [DispIdAttribute("1")]
public abstract virtual void Delete();
    [DispIdAttribute("100")]
public abstract virtual dbgBreakpointType get_Type();
    [DispIdAttribute("0")]
public abstract virtual string get_Name();
    [DispIdAttribute("0")]
public abstract virtual void set_Name(string value);
    [DispIdAttribute("101")]
public abstract virtual dbgBreakpointLocationType get_LocationType();
    [DispIdAttribute("102")]
public abstract virtual string get_FunctionName();
    [DispIdAttribute("103")]
public abstract virtual int get_FunctionLineOffset();
    [DispIdAttribute("104")]
public abstract virtual int get_FunctionColumnOffset();
    [DispIdAttribute("105")]
public abstract virtual string get_File();
    [DispIdAttribute("106")]
public abstract virtual int get_FileLine();
    [DispIdAttribute("107")]
public abstract virtual int get_FileColumn();
    [DispIdAttribute("108")]
public abstract virtual dbgBreakpointConditionType get_ConditionType();
    [DispIdAttribute("109")]
public abstract virtual string get_Condition();
    [DispIdAttribute("110")]
public abstract virtual string get_Language();
    [DispIdAttribute("111")]
public abstract virtual dbgHitCountType get_HitCountType();
    [DispIdAttribute("112")]
public abstract virtual int get_HitCountTarget();
    [DispIdAttribute("113")]
public abstract virtual bool get_Enabled();
    [DispIdAttribute("113")]
public abstract virtual void set_Enabled(bool value);
    [DispIdAttribute("114")]
public abstract virtual string get_Tag();
    [DispIdAttribute("114")]
public abstract virtual void set_Tag(string value);
    [DispIdAttribute("115")]
public abstract virtual int get_CurrentHits();
    [DispIdAttribute("116")]
public abstract virtual Program get_Program();
    [DispIdAttribute("200")]
public abstract virtual DTE get_DTE();
    [DispIdAttribute("201")]
public abstract virtual Breakpoint get_Parent();
    [DispIdAttribute("202")]
public abstract virtual Breakpoints get_Collection();
    [DispIdAttribute("203")]
public abstract virtual Breakpoints get_Children();
    [DispIdAttribute("300")]
public abstract virtual void ResetHitCount();
}
[DefaultMemberAttribute("Item")]
[GuidAttribute("25968106-BAFB-11D2-8AD1-00C04F79E479")]
public interface EnvDTE.Breakpoints {
    [DispIdAttribute("1")]
public DTE DTE { get; }
    [DispIdAttribute("2")]
public Debugger Parent { get; }
    [DispIdAttribute("3")]
public int Count { get; }
    [DispIdAttribute("0")]
public abstract virtual Breakpoint Item(object index);
    [DispIdAttribute("-4")]
public abstract virtual IEnumerator GetEnumerator();
    [DispIdAttribute("1")]
public abstract virtual DTE get_DTE();
    [DispIdAttribute("2")]
public abstract virtual Debugger get_Parent();
    [DispIdAttribute("3")]
public abstract virtual int get_Count();
    [DispIdAttribute("4")]
public abstract virtual Breakpoints Add(string Function, string File, int Line, int Column, string Condition, dbgBreakpointConditionType ConditionType, string Language, string Data, int DataCount, string Address, int HitCount, dbgHitCountType HitCountType);
}
[DefaultMemberAttribute("Item")]
[GuidAttribute("EAD260EB-1E5B-450A-B628-4CFADA11B4A1")]
public interface EnvDTE.BuildDependencies {
    [DispIdAttribute("1")]
public DTE DTE { get; }
    [DispIdAttribute("2")]
public SolutionBuild Parent { get; }
    [DispIdAttribute("3")]
public int Count { get; }
    [DispIdAttribute("1")]
public abstract virtual DTE get_DTE();
    [DispIdAttribute("2")]
public abstract virtual SolutionBuild get_Parent();
    [DispIdAttribute("-4")]
public abstract virtual IEnumerator GetEnumerator();
    [DispIdAttribute("0")]
public abstract virtual BuildDependency Item(object index);
    [DispIdAttribute("3")]
public abstract virtual int get_Count();
}
[GuidAttribute("9C5CEAAC-062F-4434-A2ED-78AB4D6134FE")]
public interface EnvDTE.BuildDependency {
    [DispIdAttribute("1")]
public DTE DTE { get; }
    [DispIdAttribute("2")]
public BuildDependencies Collection { get; }
    [DispIdAttribute("3")]
public Project Project { get; }
    [DispIdAttribute("4")]
public object RequiredProjects { get; }
    [DispIdAttribute("1")]
public abstract virtual DTE get_DTE();
    [DispIdAttribute("2")]
public abstract virtual BuildDependencies get_Collection();
    [DispIdAttribute("3")]
public abstract virtual Project get_Project();
    [DispIdAttribute("4")]
public abstract virtual object get_RequiredProjects();
    [DispIdAttribute("5")]
public abstract virtual void AddProject(string ProjectUniqueName);
    [DispIdAttribute("6")]
public abstract virtual void RemoveProject(string ProjectUniqueName);
    [DispIdAttribute("7")]
public abstract virtual void RemoveAllProjects();
}
[ComVisibleAttribute("False")]
[GuidAttribute("794A2BA5-FFA6-4FC5-BF13-957B2C22EDD7")]
[CoClassAttribute("EnvDTE.BuildEventsClass")]
public interface EnvDTE.BuildEvents {
}
[ComVisibleAttribute("False")]
[GuidAttribute("D83D60E3-229F-4660-8DD0-28B629EEDCDA")]
[ComSourceInterfacesAttribute("EnvDTE._dispBuildEvents")]
[ClassInterfaceAttribute("0")]
public class EnvDTE.BuildEventsClass : object {
}
[TypeLibTypeAttribute("4160")]
[GuidAttribute("0CFBC2BE-0D4E-11D3-8997-00C04F688DDE")]
[DefaultMemberAttribute("Name")]
public interface EnvDTE.CodeAttribute {
    [DispIdAttribute("1")]
public DTE DTE { get; }
    [DispIdAttribute("2")]
public CodeElements Collection { get; }
    [DispIdAttribute("0")]
public string Name { get; public set; }
    [DispIdAttribute("3")]
public string FullName { get; }
    [DispIdAttribute("4")]
public ProjectItem ProjectItem { get; }
    [DispIdAttribute("5")]
public vsCMElement Kind { get; }
    [DispIdAttribute("6")]
public bool IsCodeType { get; }
    [DispIdAttribute("7")]
public vsCMInfoLocation InfoLocation { get; }
    [DispIdAttribute("8")]
public CodeElements Children { get; }
    [DispIdAttribute("9")]
public string Language { get; }
    [DispIdAttribute("10")]
public TextPoint StartPoint { get; }
    [DispIdAttribute("11")]
public TextPoint EndPoint { get; }
    [DispIdAttribute("12")]
public object ExtenderNames { get; }
    [DispIdAttribute("13")]
public object Extender { get; }
    [DispIdAttribute("14")]
public string ExtenderCATID { get; }
    [DispIdAttribute("31")]
public object Parent { get; }
    [DispIdAttribute("32")]
public string Value { get; public set; }
    [TypeLibFuncAttribute("1024")]
[DispIdAttribute("1")]
public abstract virtual DTE get_DTE();
    [TypeLibFuncAttribute("1024")]
[DispIdAttribute("2")]
public abstract virtual CodeElements get_Collection();
    [DispIdAttribute("0")]
public abstract virtual string get_Name();
    [DispIdAttribute("0")]
public abstract virtual void set_Name(string pVal);
    [DispIdAttribute("3")]
public abstract virtual string get_FullName();
    [DispIdAttribute("4")]
[TypeLibFuncAttribute("1024")]
public abstract virtual ProjectItem get_ProjectItem();
    [DispIdAttribute("5")]
[TypeLibFuncAttribute("1024")]
public abstract virtual vsCMElement get_Kind();
    [DispIdAttribute("6")]
[TypeLibFuncAttribute("1024")]
public abstract virtual bool get_IsCodeType();
    [TypeLibFuncAttribute("1024")]
[DispIdAttribute("7")]
public abstract virtual vsCMInfoLocation get_InfoLocation();
    [DispIdAttribute("8")]
[TypeLibFuncAttribute("1024")]
public abstract virtual CodeElements get_Children();
    [TypeLibFuncAttribute("1024")]
[DispIdAttribute("9")]
public abstract virtual string get_Language();
    [DispIdAttribute("10")]
[TypeLibFuncAttribute("1024")]
public abstract virtual TextPoint get_StartPoint();
    [TypeLibFuncAttribute("1024")]
[DispIdAttribute("11")]
public abstract virtual TextPoint get_EndPoint();
    [TypeLibFuncAttribute("1024")]
[DispIdAttribute("12")]
public abstract virtual object get_ExtenderNames();
    [DispIdAttribute("13")]
[TypeLibFuncAttribute("1024")]
public abstract virtual object get_Extender(string ExtenderName);
    [TypeLibFuncAttribute("1024")]
[DispIdAttribute("14")]
public abstract virtual string get_ExtenderCATID();
    [TypeLibFuncAttribute("1024")]
[DispIdAttribute("15")]
public abstract virtual TextPoint GetStartPoint(vsCMPart Part);
    [TypeLibFuncAttribute("1024")]
[DispIdAttribute("16")]
public abstract virtual TextPoint GetEndPoint(vsCMPart Part);
    [DispIdAttribute("31")]
[TypeLibFuncAttribute("1024")]
public abstract virtual object get_Parent();
    [DispIdAttribute("32")]
public abstract virtual string get_Value();
    [DispIdAttribute("32")]
public abstract virtual void set_Value(string pValue);
    [DispIdAttribute("33")]
public abstract virtual void Delete();
}
[TypeLibTypeAttribute("4160")]
[DefaultMemberAttribute("Name")]
[GuidAttribute("B1F42514-91CD-4D3A-8B25-A317D8032B24")]
public interface EnvDTE.CodeClass {
    [DispIdAttribute("1")]
public DTE DTE { get; }
    [DispIdAttribute("2")]
public CodeElements Collection { get; }
    [DispIdAttribute("0")]
public string Name { get; public set; }
    [DispIdAttribute("3")]
public string FullName { get; }
    [DispIdAttribute("4")]
public ProjectItem ProjectItem { get; }
    [DispIdAttribute("5")]
public vsCMElement Kind { get; }
    [DispIdAttribute("6")]
public bool IsCodeType { get; }
    [DispIdAttribute("7")]
public vsCMInfoLocation InfoLocation { get; }
    [DispIdAttribute("8")]
public CodeElements Children { get; }
    [DispIdAttribute("9")]
public string Language { get; }
    [DispIdAttribute("10")]
public TextPoint StartPoint { get; }
    [DispIdAttribute("11")]
public TextPoint EndPoint { get; }
    [DispIdAttribute("12")]
public object ExtenderNames { get; }
    [DispIdAttribute("13")]
public object Extender { get; }
    [DispIdAttribute("14")]
public string ExtenderCATID { get; }
    [DispIdAttribute("31")]
public object Parent { get; }
    [DispIdAttribute("32")]
public CodeNamespace Namespace { get; }
    [DispIdAttribute("33")]
public CodeElements Bases { get; }
    [DispIdAttribute("34")]
public CodeElements Members { get; }
    [DispIdAttribute("35")]
public vsCMAccess Access { get; public set; }
    [DispIdAttribute("36")]
public CodeElements Attributes { get; }
    [DispIdAttribute("37")]
public string DocComment { get; public set; }
    [DispIdAttribute("38")]
public string Comment { get; public set; }
    [DispIdAttribute("43")]
public bool IsDerivedFrom { get; }
    [DispIdAttribute("44")]
public CodeElements DerivedTypes { get; }
    [DispIdAttribute("61")]
public CodeElements ImplementedInterfaces { get; }
    [DispIdAttribute("62")]
public bool IsAbstract { get; public set; }
    [DispIdAttribute("1")]
[TypeLibFuncAttribute("1024")]
public abstract virtual DTE get_DTE();
    [TypeLibFuncAttribute("1024")]
[DispIdAttribute("2")]
public abstract virtual CodeElements get_Collection();
    [DispIdAttribute("0")]
public abstract virtual string get_Name();
    [DispIdAttribute("0")]
public abstract virtual void set_Name(string pVal);
    [DispIdAttribute("3")]
public abstract virtual string get_FullName();
    [TypeLibFuncAttribute("1024")]
[DispIdAttribute("4")]
public abstract virtual ProjectItem get_ProjectItem();
    [TypeLibFuncAttribute("1024")]
[DispIdAttribute("5")]
public abstract virtual vsCMElement get_Kind();
    [DispIdAttribute("6")]
[TypeLibFuncAttribute("1024")]
public abstract virtual bool get_IsCodeType();
    [DispIdAttribute("7")]
[TypeLibFuncAttribute("1024")]
public abstract virtual vsCMInfoLocation get_InfoLocation();
    [TypeLibFuncAttribute("1024")]
[DispIdAttribute("8")]
public abstract virtual CodeElements get_Children();
    [DispIdAttribute("9")]
[TypeLibFuncAttribute("1024")]
public abstract virtual string get_Language();
    [TypeLibFuncAttribute("1024")]
[DispIdAttribute("10")]
public abstract virtual TextPoint get_StartPoint();
    [TypeLibFuncAttribute("1024")]
[DispIdAttribute("11")]
public abstract virtual TextPoint get_EndPoint();
    [DispIdAttribute("12")]
[TypeLibFuncAttribute("1024")]
public abstract virtual object get_ExtenderNames();
    [TypeLibFuncAttribute("1024")]
[DispIdAttribute("13")]
public abstract virtual object get_Extender(string ExtenderName);
    [TypeLibFuncAttribute("1024")]
[DispIdAttribute("14")]
public abstract virtual string get_ExtenderCATID();
    [TypeLibFuncAttribute("1024")]
[DispIdAttribute("15")]
public abstract virtual TextPoint GetStartPoint(vsCMPart Part);
    [TypeLibFuncAttribute("1024")]
[DispIdAttribute("16")]
public abstract virtual TextPoint GetEndPoint(vsCMPart Part);
    [DispIdAttribute("31")]
[TypeLibFuncAttribute("1024")]
public abstract virtual object get_Parent();
    [TypeLibFuncAttribute("1024")]
[DispIdAttribute("32")]
public abstract virtual CodeNamespace get_Namespace();
    [DispIdAttribute("33")]
[TypeLibFuncAttribute("1024")]
public abstract virtual CodeElements get_Bases();
    [DispIdAttribute("34")]
[TypeLibFuncAttribute("1024")]
public abstract virtual CodeElements get_Members();
    [DispIdAttribute("35")]
public abstract virtual void set_Access(vsCMAccess pAccess);
    [DispIdAttribute("35")]
public abstract virtual vsCMAccess get_Access();
    [DispIdAttribute("36")]
[TypeLibFuncAttribute("1024")]
public abstract virtual CodeElements get_Attributes();
    [TypeLibFuncAttribute("1024")]
[DispIdAttribute("37")]
public abstract virtual string get_DocComment();
    [TypeLibFuncAttribute("1024")]
[DispIdAttribute("37")]
public abstract virtual void set_DocComment(string pDocComment);
    [DispIdAttribute("38")]
[TypeLibFuncAttribute("1024")]
public abstract virtual string get_Comment();
    [TypeLibFuncAttribute("1024")]
[DispIdAttribute("38")]
public abstract virtual void set_Comment(string pComment);
    [DispIdAttribute("39")]
public abstract virtual CodeElement AddBase(object Base, object Position);
    [DispIdAttribute("40")]
public abstract virtual CodeAttribute AddAttribute(string Name, string Value, object Position);
    [DispIdAttribute("41")]
public abstract virtual void RemoveBase(object Element);
    [DispIdAttribute("42")]
public abstract virtual void RemoveMember(object Element);
    [DispIdAttribute("43")]
public abstract virtual bool get_IsDerivedFrom(string FullName);
    [DispIdAttribute("44")]
[TypeLibFuncAttribute("1024")]
public abstract virtual CodeElements get_DerivedTypes();
    [TypeLibFuncAttribute("1024")]
[DispIdAttribute("61")]
public abstract virtual CodeElements get_ImplementedInterfaces();
    [DispIdAttribute("62")]
public abstract virtual bool get_IsAbstract();
    [DispIdAttribute("62")]
public abstract virtual void set_IsAbstract(bool pIsAbstract);
    [DispIdAttribute("63")]
public abstract virtual CodeInterface AddImplementedInterface(object Base, object Position);
    [DispIdAttribute("64")]
public abstract virtual CodeFunction AddFunction(string Name, vsCMFunction Kind, object Type, object Position, vsCMAccess Access, object Location);
    [DispIdAttribute("65")]
public abstract virtual CodeVariable AddVariable(string Name, object Type, object Position, vsCMAccess Access, object Location);
    [DispIdAttribute("66")]
public abstract virtual CodeProperty AddProperty(string GetterName, string PutterName, object Type, object Position, vsCMAccess Access, object Location);
    [DispIdAttribute("67")]
public abstract virtual CodeClass AddClass(string Name, object Position, object Bases, object ImplementedInterfaces, vsCMAccess Access);
    [DispIdAttribute("68")]
public abstract virtual CodeStruct AddStruct(string Name, object Position, object Bases, object ImplementedInterfaces, vsCMAccess Access);
    [DispIdAttribute("69")]
public abstract virtual CodeEnum AddEnum(string Name, object Position, object Bases, vsCMAccess Access);
    [DispIdAttribute("70")]
public abstract virtual CodeDelegate AddDelegate(string Name, object Type, object Position, vsCMAccess Access);
    [DispIdAttribute("71")]
public abstract virtual void RemoveInterface(object Element);
}
[DefaultMemberAttribute("Name")]
[TypeLibTypeAttribute("4160")]
[GuidAttribute("B1F42513-91CD-4D3A-8B25-A317D8032B24")]
public interface EnvDTE.CodeDelegate {
    [DispIdAttribute("1")]
public DTE DTE { get; }
    [DispIdAttribute("2")]
public CodeElements Collection { get; }
    [DispIdAttribute("0")]
public string Name { get; public set; }
    [DispIdAttribute("3")]
public string FullName { get; }
    [DispIdAttribute("4")]
public ProjectItem ProjectItem { get; }
    [DispIdAttribute("5")]
public vsCMElement Kind { get; }
    [DispIdAttribute("6")]
public bool IsCodeType { get; }
    [DispIdAttribute("7")]
public vsCMInfoLocation InfoLocation { get; }
    [DispIdAttribute("8")]
public CodeElements Children { get; }
    [DispIdAttribute("9")]
public string Language { get; }
    [DispIdAttribute("10")]
public TextPoint StartPoint { get; }
    [DispIdAttribute("11")]
public TextPoint EndPoint { get; }
    [DispIdAttribute("12")]
public object ExtenderNames { get; }
    [DispIdAttribute("13")]
public object Extender { get; }
    [DispIdAttribute("14")]
public string ExtenderCATID { get; }
    [DispIdAttribute("31")]
public object Parent { get; }
    [DispIdAttribute("32")]
public CodeNamespace Namespace { get; }
    [DispIdAttribute("33")]
public CodeElements Bases { get; }
    [DispIdAttribute("34")]
public CodeElements Members { get; }
    [DispIdAttribute("35")]
public vsCMAccess Access { get; public set; }
    [DispIdAttribute("36")]
public CodeElements Attributes { get; }
    [DispIdAttribute("37")]
public string DocComment { get; public set; }
    [DispIdAttribute("38")]
public string Comment { get; public set; }
    [DispIdAttribute("43")]
public bool IsDerivedFrom { get; }
    [DispIdAttribute("44")]
public CodeElements DerivedTypes { get; }
    [DispIdAttribute("61")]
public CodeClass BaseClass { get; }
    [DispIdAttribute("62")]
public string Prototype { get; }
    [DispIdAttribute("63")]
public CodeTypeRef Type { get; public set; }
    [DispIdAttribute("64")]
public CodeElements Parameters { get; }
    [TypeLibFuncAttribute("1024")]
[DispIdAttribute("1")]
public abstract virtual DTE get_DTE();
    [TypeLibFuncAttribute("1024")]
[DispIdAttribute("2")]
public abstract virtual CodeElements get_Collection();
    [DispIdAttribute("0")]
public abstract virtual string get_Name();
    [DispIdAttribute("0")]
public abstract virtual void set_Name(string pVal);
    [DispIdAttribute("3")]
public abstract virtual string get_FullName();
    [TypeLibFuncAttribute("1024")]
[DispIdAttribute("4")]
public abstract virtual ProjectItem get_ProjectItem();
    [DispIdAttribute("5")]
[TypeLibFuncAttribute("1024")]
public abstract virtual vsCMElement get_Kind();
    [DispIdAttribute("6")]
[TypeLibFuncAttribute("1024")]
public abstract virtual bool get_IsCodeType();
    [TypeLibFuncAttribute("1024")]
[DispIdAttribute("7")]
public abstract virtual vsCMInfoLocation get_InfoLocation();
    [TypeLibFuncAttribute("1024")]
[DispIdAttribute("8")]
public abstract virtual CodeElements get_Children();
    [DispIdAttribute("9")]
[TypeLibFuncAttribute("1024")]
public abstract virtual string get_Language();
    [DispIdAttribute("10")]
[TypeLibFuncAttribute("1024")]
public abstract virtual TextPoint get_StartPoint();
    [DispIdAttribute("11")]
[TypeLibFuncAttribute("1024")]
public abstract virtual TextPoint get_EndPoint();
    [TypeLibFuncAttribute("1024")]
[DispIdAttribute("12")]
public abstract virtual object get_ExtenderNames();
    [TypeLibFuncAttribute("1024")]
[DispIdAttribute("13")]
public abstract virtual object get_Extender(string ExtenderName);
    [DispIdAttribute("14")]
[TypeLibFuncAttribute("1024")]
public abstract virtual string get_ExtenderCATID();
    [DispIdAttribute("15")]
[TypeLibFuncAttribute("1024")]
public abstract virtual TextPoint GetStartPoint(vsCMPart Part);
    [DispIdAttribute("16")]
[TypeLibFuncAttribute("1024")]
public abstract virtual TextPoint GetEndPoint(vsCMPart Part);
    [DispIdAttribute("31")]
[TypeLibFuncAttribute("1024")]
public abstract virtual object get_Parent();
    [TypeLibFuncAttribute("1024")]
[DispIdAttribute("32")]
public abstract virtual CodeNamespace get_Namespace();
    [DispIdAttribute("33")]
[TypeLibFuncAttribute("1024")]
public abstract virtual CodeElements get_Bases();
    [DispIdAttribute("34")]
[TypeLibFuncAttribute("1024")]
public abstract virtual CodeElements get_Members();
    [DispIdAttribute("35")]
public abstract virtual void set_Access(vsCMAccess pAccess);
    [DispIdAttribute("35")]
public abstract virtual vsCMAccess get_Access();
    [DispIdAttribute("36")]
[TypeLibFuncAttribute("1024")]
public abstract virtual CodeElements get_Attributes();
    [TypeLibFuncAttribute("1024")]
[DispIdAttribute("37")]
public abstract virtual string get_DocComment();
    [DispIdAttribute("37")]
[TypeLibFuncAttribute("1024")]
public abstract virtual void set_DocComment(string pDocComment);
    [TypeLibFuncAttribute("1024")]
[DispIdAttribute("38")]
public abstract virtual string get_Comment();
    [DispIdAttribute("38")]
[TypeLibFuncAttribute("1024")]
public abstract virtual void set_Comment(string pComment);
    [DispIdAttribute("39")]
public abstract virtual CodeElement AddBase(object Base, object Position);
    [DispIdAttribute("40")]
public abstract virtual CodeAttribute AddAttribute(string Name, string Value, object Position);
    [DispIdAttribute("41")]
public abstract virtual void RemoveBase(object Element);
    [DispIdAttribute("42")]
public abstract virtual void RemoveMember(object Element);
    [DispIdAttribute("43")]
public abstract virtual bool get_IsDerivedFrom(string FullName);
    [TypeLibFuncAttribute("1024")]
[DispIdAttribute("44")]
public abstract virtual CodeElements get_DerivedTypes();
    [DispIdAttribute("61")]
[TypeLibFuncAttribute("1024")]
public abstract virtual CodeClass get_BaseClass();
    [TypeLibFuncAttribute("1024")]
[DispIdAttribute("62")]
public abstract virtual string get_Prototype(int Flags);
    [TypeLibFuncAttribute("1024")]
[DispIdAttribute("63")]
public abstract virtual CodeTypeRef get_Type();
    [DispIdAttribute("63")]
[TypeLibFuncAttribute("1024")]
public abstract virtual void set_Type(CodeTypeRef pCodeTypeRef);
    [TypeLibFuncAttribute("1024")]
[DispIdAttribute("64")]
public abstract virtual CodeElements get_Parameters();
    [DispIdAttribute("65")]
public abstract virtual CodeParameter AddParameter(string Name, object Type, object Position);
    [DispIdAttribute("66")]
public abstract virtual void RemoveParameter(object Element);
}
[GuidAttribute("0CFBC2B6-0D4E-11D3-8997-00C04F688DDE")]
[TypeLibTypeAttribute("4160")]
[DefaultMemberAttribute("Name")]
public interface EnvDTE.CodeElement {
    [DispIdAttribute("1")]
public DTE DTE { get; }
    [DispIdAttribute("2")]
public CodeElements Collection { get; }
    [DispIdAttribute("0")]
public string Name { get; public set; }
    [DispIdAttribute("3")]
public string FullName { get; }
    [DispIdAttribute("4")]
public ProjectItem ProjectItem { get; }
    [DispIdAttribute("5")]
public vsCMElement Kind { get; }
    [DispIdAttribute("6")]
public bool IsCodeType { get; }
    [DispIdAttribute("7")]
public vsCMInfoLocation InfoLocation { get; }
    [DispIdAttribute("8")]
public CodeElements Children { get; }
    [DispIdAttribute("9")]
public string Language { get; }
    [DispIdAttribute("10")]
public TextPoint StartPoint { get; }
    [DispIdAttribute("11")]
public TextPoint EndPoint { get; }
    [DispIdAttribute("12")]
public object ExtenderNames { get; }
    [DispIdAttribute("13")]
public object Extender { get; }
    [DispIdAttribute("14")]
public string ExtenderCATID { get; }
    [DispIdAttribute("1")]
[TypeLibFuncAttribute("1024")]
public abstract virtual DTE get_DTE();
    [DispIdAttribute("2")]
[TypeLibFuncAttribute("1024")]
public abstract virtual CodeElements get_Collection();
    [DispIdAttribute("0")]
public abstract virtual string get_Name();
    [DispIdAttribute("0")]
public abstract virtual void set_Name(string pVal);
    [DispIdAttribute("3")]
public abstract virtual string get_FullName();
    [DispIdAttribute("4")]
[TypeLibFuncAttribute("1024")]
public abstract virtual ProjectItem get_ProjectItem();
    [DispIdAttribute("5")]
[TypeLibFuncAttribute("1024")]
public abstract virtual vsCMElement get_Kind();
    [DispIdAttribute("6")]
[TypeLibFuncAttribute("1024")]
public abstract virtual bool get_IsCodeType();
    [DispIdAttribute("7")]
[TypeLibFuncAttribute("1024")]
public abstract virtual vsCMInfoLocation get_InfoLocation();
    [DispIdAttribute("8")]
[TypeLibFuncAttribute("1024")]
public abstract virtual CodeElements get_Children();
    [TypeLibFuncAttribute("1024")]
[DispIdAttribute("9")]
public abstract virtual string get_Language();
    [DispIdAttribute("10")]
[TypeLibFuncAttribute("1024")]
public abstract virtual TextPoint get_StartPoint();
    [TypeLibFuncAttribute("1024")]
[DispIdAttribute("11")]
public abstract virtual TextPoint get_EndPoint();
    [TypeLibFuncAttribute("1024")]
[DispIdAttribute("12")]
public abstract virtual object get_ExtenderNames();
    [TypeLibFuncAttribute("1024")]
[DispIdAttribute("13")]
public abstract virtual object get_Extender(string ExtenderName);
    [DispIdAttribute("14")]
[TypeLibFuncAttribute("1024")]
public abstract virtual string get_ExtenderCATID();
    [DispIdAttribute("15")]
[TypeLibFuncAttribute("1024")]
public abstract virtual TextPoint GetStartPoint(vsCMPart Part);
    [DispIdAttribute("16")]
[TypeLibFuncAttribute("1024")]
public abstract virtual TextPoint GetEndPoint(vsCMPart Part);
}
[GuidAttribute("0CFBC2B5-0D4E-11D3-8997-00C04F688DDE")]
[DefaultMemberAttribute("Item")]
public interface EnvDTE.CodeElements {
    [DispIdAttribute("1")]
public DTE DTE { get; }
    [DispIdAttribute("2")]
public object Parent { get; }
    [DispIdAttribute("3")]
public int Count { get; }
    [DispIdAttribute("-4")]
public abstract virtual IEnumerator GetEnumerator();
    [DispIdAttribute("1")]
public abstract virtual DTE get_DTE();
    [DispIdAttribute("2")]
public abstract virtual object get_Parent();
    [DispIdAttribute("0")]
public abstract virtual CodeElement Item(object index);
    [DispIdAttribute("3")]
public abstract virtual int get_Count();
    [DispIdAttribute("4")]
public abstract virtual void Reserved1(object Element);
    [DispIdAttribute("5")]
public abstract virtual bool CreateUniqueID(string Prefix, String& NewName);
}
[TypeLibTypeAttribute("4160")]
[GuidAttribute("B1F42512-91CD-4D3A-8B25-A317D8032B24")]
[DefaultMemberAttribute("Name")]
public interface EnvDTE.CodeEnum {
    [DispIdAttribute("1")]
public DTE DTE { get; }
    [DispIdAttribute("2")]
public CodeElements Collection { get; }
    [DispIdAttribute("0")]
public string Name { get; public set; }
    [DispIdAttribute("3")]
public string FullName { get; }
    [DispIdAttribute("4")]
public ProjectItem ProjectItem { get; }
    [DispIdAttribute("5")]
public vsCMElement Kind { get; }
    [DispIdAttribute("6")]
public bool IsCodeType { get; }
    [DispIdAttribute("7")]
public vsCMInfoLocation InfoLocation { get; }
    [DispIdAttribute("8")]
public CodeElements Children { get; }
    [DispIdAttribute("9")]
public string Language { get; }
    [DispIdAttribute("10")]
public TextPoint StartPoint { get; }
    [DispIdAttribute("11")]
public TextPoint EndPoint { get; }
    [DispIdAttribute("12")]
public object ExtenderNames { get; }
    [DispIdAttribute("13")]
public object Extender { get; }
    [DispIdAttribute("14")]
public string ExtenderCATID { get; }
    [DispIdAttribute("31")]
public object Parent { get; }
    [DispIdAttribute("32")]
public CodeNamespace Namespace { get; }
    [DispIdAttribute("33")]
public CodeElements Bases { get; }
    [DispIdAttribute("34")]
public CodeElements Members { get; }
    [DispIdAttribute("35")]
public vsCMAccess Access { get; public set; }
    [DispIdAttribute("36")]
public CodeElements Attributes { get; }
    [DispIdAttribute("37")]
public string DocComment { get; public set; }
    [DispIdAttribute("38")]
public string Comment { get; public set; }
    [DispIdAttribute("43")]
public bool IsDerivedFrom { get; }
    [DispIdAttribute("44")]
public CodeElements DerivedTypes { get; }
    [TypeLibFuncAttribute("1024")]
[DispIdAttribute("1")]
public abstract virtual DTE get_DTE();
    [DispIdAttribute("2")]
[TypeLibFuncAttribute("1024")]
public abstract virtual CodeElements get_Collection();
    [DispIdAttribute("0")]
public abstract virtual string get_Name();
    [DispIdAttribute("0")]
public abstract virtual void set_Name(string pVal);
    [DispIdAttribute("3")]
public abstract virtual string get_FullName();
    [DispIdAttribute("4")]
[TypeLibFuncAttribute("1024")]
public abstract virtual ProjectItem get_ProjectItem();
    [TypeLibFuncAttribute("1024")]
[DispIdAttribute("5")]
public abstract virtual vsCMElement get_Kind();
    [TypeLibFuncAttribute("1024")]
[DispIdAttribute("6")]
public abstract virtual bool get_IsCodeType();
    [TypeLibFuncAttribute("1024")]
[DispIdAttribute("7")]
public abstract virtual vsCMInfoLocation get_InfoLocation();
    [TypeLibFuncAttribute("1024")]
[DispIdAttribute("8")]
public abstract virtual CodeElements get_Children();
    [TypeLibFuncAttribute("1024")]
[DispIdAttribute("9")]
public abstract virtual string get_Language();
    [DispIdAttribute("10")]
[TypeLibFuncAttribute("1024")]
public abstract virtual TextPoint get_StartPoint();
    [TypeLibFuncAttribute("1024")]
[DispIdAttribute("11")]
public abstract virtual TextPoint get_EndPoint();
    [TypeLibFuncAttribute("1024")]
[DispIdAttribute("12")]
public abstract virtual object get_ExtenderNames();
    [TypeLibFuncAttribute("1024")]
[DispIdAttribute("13")]
public abstract virtual object get_Extender(string ExtenderName);
    [TypeLibFuncAttribute("1024")]
[DispIdAttribute("14")]
public abstract virtual string get_ExtenderCATID();
    [TypeLibFuncAttribute("1024")]
[DispIdAttribute("15")]
public abstract virtual TextPoint GetStartPoint(vsCMPart Part);
    [DispIdAttribute("16")]
[TypeLibFuncAttribute("1024")]
public abstract virtual TextPoint GetEndPoint(vsCMPart Part);
    [DispIdAttribute("31")]
[TypeLibFuncAttribute("1024")]
public abstract virtual object get_Parent();
    [TypeLibFuncAttribute("1024")]
[DispIdAttribute("32")]
public abstract virtual CodeNamespace get_Namespace();
    [DispIdAttribute("33")]
[TypeLibFuncAttribute("1024")]
public abstract virtual CodeElements get_Bases();
    [DispIdAttribute("34")]
[TypeLibFuncAttribute("1024")]
public abstract virtual CodeElements get_Members();
    [DispIdAttribute("35")]
public abstract virtual void set_Access(vsCMAccess pAccess);
    [DispIdAttribute("35")]
public abstract virtual vsCMAccess get_Access();
    [TypeLibFuncAttribute("1024")]
[DispIdAttribute("36")]
public abstract virtual CodeElements get_Attributes();
    [DispIdAttribute("37")]
[TypeLibFuncAttribute("1024")]
public abstract virtual string get_DocComment();
    [TypeLibFuncAttribute("1024")]
[DispIdAttribute("37")]
public abstract virtual void set_DocComment(string pDocComment);
    [TypeLibFuncAttribute("1024")]
[DispIdAttribute("38")]
public abstract virtual string get_Comment();
    [TypeLibFuncAttribute("1024")]
[DispIdAttribute("38")]
public abstract virtual void set_Comment(string pComment);
    [DispIdAttribute("39")]
public abstract virtual CodeElement AddBase(object Base, object Position);
    [DispIdAttribute("40")]
public abstract virtual CodeAttribute AddAttribute(string Name, string Value, object Position);
    [DispIdAttribute("41")]
public abstract virtual void RemoveBase(object Element);
    [DispIdAttribute("42")]
public abstract virtual void RemoveMember(object Element);
    [DispIdAttribute("43")]
public abstract virtual bool get_IsDerivedFrom(string FullName);
    [DispIdAttribute("44")]
[TypeLibFuncAttribute("1024")]
public abstract virtual CodeElements get_DerivedTypes();
    [DispIdAttribute("61")]
public abstract virtual CodeVariable AddMember(string Name, object Value, object Position);
}
[DefaultMemberAttribute("Name")]
[GuidAttribute("0CFBC2B9-0D4E-11D3-8997-00C04F688DDE")]
[TypeLibTypeAttribute("4160")]
public interface EnvDTE.CodeFunction {
    [DispIdAttribute("1")]
public DTE DTE { get; }
    [DispIdAttribute("2")]
public CodeElements Collection { get; }
    [DispIdAttribute("0")]
public string Name { get; public set; }
    [DispIdAttribute("3")]
public string FullName { get; }
    [DispIdAttribute("4")]
public ProjectItem ProjectItem { get; }
    [DispIdAttribute("5")]
public vsCMElement Kind { get; }
    [DispIdAttribute("6")]
public bool IsCodeType { get; }
    [DispIdAttribute("7")]
public vsCMInfoLocation InfoLocation { get; }
    [DispIdAttribute("8")]
public CodeElements Children { get; }
    [DispIdAttribute("9")]
public string Language { get; }
    [DispIdAttribute("10")]
public TextPoint StartPoint { get; }
    [DispIdAttribute("11")]
public TextPoint EndPoint { get; }
    [DispIdAttribute("12")]
public object ExtenderNames { get; }
    [DispIdAttribute("13")]
public object Extender { get; }
    [DispIdAttribute("14")]
public string ExtenderCATID { get; }
    [DispIdAttribute("31")]
public object Parent { get; }
    [DispIdAttribute("32")]
public vsCMFunction FunctionKind { get; }
    [DispIdAttribute("34")]
public string Prototype { get; }
    [DispIdAttribute("35")]
public CodeTypeRef Type { get; public set; }
    [DispIdAttribute("36")]
public CodeElements Parameters { get; }
    [DispIdAttribute("38")]
public vsCMAccess Access { get; public set; }
    [DispIdAttribute("39")]
public bool IsOverloaded { get; }
    [DispIdAttribute("40")]
public bool IsShared { get; public set; }
    [DispIdAttribute("41")]
public bool MustImplement { get; public set; }
    [DispIdAttribute("42")]
public CodeElements Overloads { get; }
    [DispIdAttribute("43")]
public CodeElements Attributes { get; }
    [DispIdAttribute("44")]
public string DocComment { get; public set; }
    [DispIdAttribute("45")]
public string Comment { get; public set; }
    [DispIdAttribute("50")]
public bool CanOverride { get; public set; }
    [TypeLibFuncAttribute("1024")]
[DispIdAttribute("1")]
public abstract virtual DTE get_DTE();
    [TypeLibFuncAttribute("1024")]
[DispIdAttribute("2")]
public abstract virtual CodeElements get_Collection();
    [DispIdAttribute("0")]
public abstract virtual string get_Name();
    [DispIdAttribute("0")]
public abstract virtual void set_Name(string pVal);
    [DispIdAttribute("3")]
public abstract virtual string get_FullName();
    [TypeLibFuncAttribute("1024")]
[DispIdAttribute("4")]
public abstract virtual ProjectItem get_ProjectItem();
    [TypeLibFuncAttribute("1024")]
[DispIdAttribute("5")]
public abstract virtual vsCMElement get_Kind();
    [TypeLibFuncAttribute("1024")]
[DispIdAttribute("6")]
public abstract virtual bool get_IsCodeType();
    [DispIdAttribute("7")]
[TypeLibFuncAttribute("1024")]
public abstract virtual vsCMInfoLocation get_InfoLocation();
    [DispIdAttribute("8")]
[TypeLibFuncAttribute("1024")]
public abstract virtual CodeElements get_Children();
    [TypeLibFuncAttribute("1024")]
[DispIdAttribute("9")]
public abstract virtual string get_Language();
    [DispIdAttribute("10")]
[TypeLibFuncAttribute("1024")]
public abstract virtual TextPoint get_StartPoint();
    [DispIdAttribute("11")]
[TypeLibFuncAttribute("1024")]
public abstract virtual TextPoint get_EndPoint();
    [TypeLibFuncAttribute("1024")]
[DispIdAttribute("12")]
public abstract virtual object get_ExtenderNames();
    [DispIdAttribute("13")]
[TypeLibFuncAttribute("1024")]
public abstract virtual object get_Extender(string ExtenderName);
    [DispIdAttribute("14")]
[TypeLibFuncAttribute("1024")]
public abstract virtual string get_ExtenderCATID();
    [TypeLibFuncAttribute("1024")]
[DispIdAttribute("15")]
public abstract virtual TextPoint GetStartPoint(vsCMPart Part);
    [DispIdAttribute("16")]
[TypeLibFuncAttribute("1024")]
public abstract virtual TextPoint GetEndPoint(vsCMPart Part);
    [DispIdAttribute("31")]
[TypeLibFuncAttribute("1024")]
public abstract virtual object get_Parent();
    [TypeLibFuncAttribute("1024")]
[DispIdAttribute("32")]
public abstract virtual vsCMFunction get_FunctionKind();
    [DispIdAttribute("34")]
[TypeLibFuncAttribute("1024")]
public abstract virtual string get_Prototype(int Flags);
    [DispIdAttribute("35")]
[TypeLibFuncAttribute("1024")]
public abstract virtual CodeTypeRef get_Type();
    [DispIdAttribute("35")]
[TypeLibFuncAttribute("1024")]
public abstract virtual void set_Type(CodeTypeRef ppCodeTypeRef);
    [DispIdAttribute("36")]
[TypeLibFuncAttribute("1024")]
public abstract virtual CodeElements get_Parameters();
    [DispIdAttribute("38")]
public abstract virtual void set_Access(vsCMAccess Access);
    [DispIdAttribute("38")]
public abstract virtual vsCMAccess get_Access();
    [DispIdAttribute("39")]
public abstract virtual bool get_IsOverloaded();
    [DispIdAttribute("40")]
public abstract virtual bool get_IsShared();
    [DispIdAttribute("40")]
public abstract virtual void set_IsShared(bool Shared);
    [DispIdAttribute("41")]
public abstract virtual bool get_MustImplement();
    [DispIdAttribute("41")]
public abstract virtual void set_MustImplement(bool MustImplement);
    [TypeLibFuncAttribute("1024")]
[DispIdAttribute("42")]
public abstract virtual CodeElements get_Overloads();
    [DispIdAttribute("43")]
[TypeLibFuncAttribute("1024")]
public abstract virtual CodeElements get_Attributes();
    [DispIdAttribute("44")]
[TypeLibFuncAttribute("1024")]
public abstract virtual string get_DocComment();
    [TypeLibFuncAttribute("1024")]
[DispIdAttribute("44")]
public abstract virtual void set_DocComment(string pDocComment);
    [TypeLibFuncAttribute("1024")]
[DispIdAttribute("45")]
public abstract virtual string get_Comment();
    [DispIdAttribute("45")]
[TypeLibFuncAttribute("1024")]
public abstract virtual void set_Comment(string pComment);
    [DispIdAttribute("47")]
public abstract virtual CodeParameter AddParameter(string Name, object Type, object Position);
    [DispIdAttribute("48")]
public abstract virtual CodeAttribute AddAttribute(string Name, string Value, object Position);
    [DispIdAttribute("49")]
public abstract virtual void RemoveParameter(object Element);
    [DispIdAttribute("50")]
public abstract virtual bool get_CanOverride();
    [DispIdAttribute("50")]
public abstract virtual void set_CanOverride(bool pCanOverride);
}
[GuidAttribute("B1F42510-91CD-4D3A-8B25-A317D8032B24")]
[TypeLibTypeAttribute("4160")]
[DefaultMemberAttribute("Name")]
public interface EnvDTE.CodeInterface {
    [DispIdAttribute("1")]
public DTE DTE { get; }
    [DispIdAttribute("2")]
public CodeElements Collection { get; }
    [DispIdAttribute("0")]
public string Name { get; public set; }
    [DispIdAttribute("3")]
public string FullName { get; }
    [DispIdAttribute("4")]
public ProjectItem ProjectItem { get; }
    [DispIdAttribute("5")]
public vsCMElement Kind { get; }
    [DispIdAttribute("6")]
public bool IsCodeType { get; }
    [DispIdAttribute("7")]
public vsCMInfoLocation InfoLocation { get; }
    [DispIdAttribute("8")]
public CodeElements Children { get; }
    [DispIdAttribute("9")]
public string Language { get; }
    [DispIdAttribute("10")]
public TextPoint StartPoint { get; }
    [DispIdAttribute("11")]
public TextPoint EndPoint { get; }
    [DispIdAttribute("12")]
public object ExtenderNames { get; }
    [DispIdAttribute("13")]
public object Extender { get; }
    [DispIdAttribute("14")]
public string ExtenderCATID { get; }
    [DispIdAttribute("31")]
public object Parent { get; }
    [DispIdAttribute("32")]
public CodeNamespace Namespace { get; }
    [DispIdAttribute("33")]
public CodeElements Bases { get; }
    [DispIdAttribute("34")]
public CodeElements Members { get; }
    [DispIdAttribute("35")]
public vsCMAccess Access { get; public set; }
    [DispIdAttribute("36")]
public CodeElements Attributes { get; }
    [DispIdAttribute("37")]
public string DocComment { get; public set; }
    [DispIdAttribute("38")]
public string Comment { get; public set; }
    [DispIdAttribute("43")]
public bool IsDerivedFrom { get; }
    [DispIdAttribute("44")]
public CodeElements DerivedTypes { get; }
    [TypeLibFuncAttribute("1024")]
[DispIdAttribute("1")]
public abstract virtual DTE get_DTE();
    [DispIdAttribute("2")]
[TypeLibFuncAttribute("1024")]
public abstract virtual CodeElements get_Collection();
    [DispIdAttribute("0")]
public abstract virtual string get_Name();
    [DispIdAttribute("0")]
public abstract virtual void set_Name(string pVal);
    [DispIdAttribute("3")]
public abstract virtual string get_FullName();
    [DispIdAttribute("4")]
[TypeLibFuncAttribute("1024")]
public abstract virtual ProjectItem get_ProjectItem();
    [TypeLibFuncAttribute("1024")]
[DispIdAttribute("5")]
public abstract virtual vsCMElement get_Kind();
    [TypeLibFuncAttribute("1024")]
[DispIdAttribute("6")]
public abstract virtual bool get_IsCodeType();
    [DispIdAttribute("7")]
[TypeLibFuncAttribute("1024")]
public abstract virtual vsCMInfoLocation get_InfoLocation();
    [DispIdAttribute("8")]
[TypeLibFuncAttribute("1024")]
public abstract virtual CodeElements get_Children();
    [TypeLibFuncAttribute("1024")]
[DispIdAttribute("9")]
public abstract virtual string get_Language();
    [DispIdAttribute("10")]
[TypeLibFuncAttribute("1024")]
public abstract virtual TextPoint get_StartPoint();
    [DispIdAttribute("11")]
[TypeLibFuncAttribute("1024")]
public abstract virtual TextPoint get_EndPoint();
    [TypeLibFuncAttribute("1024")]
[DispIdAttribute("12")]
public abstract virtual object get_ExtenderNames();
    [DispIdAttribute("13")]
[TypeLibFuncAttribute("1024")]
public abstract virtual object get_Extender(string ExtenderName);
    [TypeLibFuncAttribute("1024")]
[DispIdAttribute("14")]
public abstract virtual string get_ExtenderCATID();
    [DispIdAttribute("15")]
[TypeLibFuncAttribute("1024")]
public abstract virtual TextPoint GetStartPoint(vsCMPart Part);
    [TypeLibFuncAttribute("1024")]
[DispIdAttribute("16")]
public abstract virtual TextPoint GetEndPoint(vsCMPart Part);
    [TypeLibFuncAttribute("1024")]
[DispIdAttribute("31")]
public abstract virtual object get_Parent();
    [TypeLibFuncAttribute("1024")]
[DispIdAttribute("32")]
public abstract virtual CodeNamespace get_Namespace();
    [DispIdAttribute("33")]
[TypeLibFuncAttribute("1024")]
public abstract virtual CodeElements get_Bases();
    [DispIdAttribute("34")]
[TypeLibFuncAttribute("1024")]
public abstract virtual CodeElements get_Members();
    [DispIdAttribute("35")]
public abstract virtual void set_Access(vsCMAccess pAccess);
    [DispIdAttribute("35")]
public abstract virtual vsCMAccess get_Access();
    [DispIdAttribute("36")]
[TypeLibFuncAttribute("1024")]
public abstract virtual CodeElements get_Attributes();
    [TypeLibFuncAttribute("1024")]
[DispIdAttribute("37")]
public abstract virtual string get_DocComment();
    [DispIdAttribute("37")]
[TypeLibFuncAttribute("1024")]
public abstract virtual void set_DocComment(string pDocComment);
    [TypeLibFuncAttribute("1024")]
[DispIdAttribute("38")]
public abstract virtual string get_Comment();
    [TypeLibFuncAttribute("1024")]
[DispIdAttribute("38")]
public abstract virtual void set_Comment(string pComment);
    [DispIdAttribute("39")]
public abstract virtual CodeElement AddBase(object Base, object Position);
    [DispIdAttribute("40")]
public abstract virtual CodeAttribute AddAttribute(string Name, string Value, object Position);
    [DispIdAttribute("41")]
public abstract virtual void RemoveBase(object Element);
    [DispIdAttribute("42")]
public abstract virtual void RemoveMember(object Element);
    [DispIdAttribute("43")]
public abstract virtual bool get_IsDerivedFrom(string FullName);
    [DispIdAttribute("44")]
[TypeLibFuncAttribute("1024")]
public abstract virtual CodeElements get_DerivedTypes();
    [DispIdAttribute("61")]
public abstract virtual CodeFunction AddFunction(string Name, vsCMFunction Kind, object Type, object Position, vsCMAccess Access);
    [DispIdAttribute("62")]
public abstract virtual CodeProperty AddProperty(string GetterName, string PutterName, object Type, object Position, vsCMAccess Access, object Location);
}
[GuidAttribute("0CFBC2B4-0D4E-11D3-8997-00C04F688DDE")]
public interface EnvDTE.CodeModel {
    [DispIdAttribute("1")]
public DTE DTE { get; }
    [DispIdAttribute("2")]
public Project Parent { get; }
    [DispIdAttribute("3")]
public string Language { get; }
    [DispIdAttribute("4")]
public CodeElements CodeElements { get; }
    [DispIdAttribute("17")]
public bool IsCaseSensitive { get; }
    [DispIdAttribute("1")]
public abstract virtual DTE get_DTE();
    [DispIdAttribute("2")]
public abstract virtual Project get_Parent();
    [DispIdAttribute("3")]
public abstract virtual string get_Language();
    [DispIdAttribute("4")]
public abstract virtual CodeElements get_CodeElements();
    [DispIdAttribute("5")]
public abstract virtual CodeType CodeTypeFromFullName(string Name);
    [DispIdAttribute("6")]
public abstract virtual CodeNamespace AddNamespace(string Name, object Location, object Position);
    [DispIdAttribute("7")]
public abstract virtual CodeClass AddClass(string Name, object Location, object Position, object Bases, object ImplementedInterfaces, vsCMAccess Access);
    [DispIdAttribute("8")]
public abstract virtual CodeInterface AddInterface(string Name, object Location, object Position, object Bases, vsCMAccess Access);
    [DispIdAttribute("9")]
public abstract virtual CodeFunction AddFunction(string Name, object Location, vsCMFunction Kind, object Type, object Position, vsCMAccess Access);
    [DispIdAttribute("10")]
public abstract virtual CodeVariable AddVariable(string Name, object Location, object Type, object Position, vsCMAccess Access);
    [DispIdAttribute("11")]
public abstract virtual CodeStruct AddStruct(string Name, object Location, object Position, object Bases, object ImplementedInterfaces, vsCMAccess Access);
    [DispIdAttribute("12")]
public abstract virtual CodeEnum AddEnum(string Name, object Location, object Position, object Bases, vsCMAccess Access);
    [DispIdAttribute("13")]
public abstract virtual CodeDelegate AddDelegate(string Name, object Location, object Type, object Position, vsCMAccess Access);
    [DispIdAttribute("14")]
public abstract virtual CodeAttribute AddAttribute(string Name, object Location, string Value, object Position);
    [DispIdAttribute("15")]
public abstract virtual void Remove(object Element);
    [DispIdAttribute("16")]
public abstract virtual bool IsValidID(string Name);
    [DispIdAttribute("17")]
public abstract virtual bool get_IsCaseSensitive();
    [DispIdAttribute("18")]
public abstract virtual CodeTypeRef CreateCodeTypeRef(object Type);
}
[GuidAttribute("D83C7FAD-BC3A-46BB-9BFC-C0091329626D")]
public abstract class EnvDTE.CodeModelLanguageConstants : object {
    public static string vsCMLanguageVC;
    public static string vsCMLanguageVB;
    public static string vsCMLanguageCSharp;
    public static string vsCMLanguageIDL;
    public static string vsCMLanguageMC;
}
[GuidAttribute("0CFBC2B8-0D4E-11D3-8997-00C04F688DDE")]
[TypeLibTypeAttribute("4160")]
[DefaultMemberAttribute("Name")]
public interface EnvDTE.CodeNamespace {
    [DispIdAttribute("1")]
public DTE DTE { get; }
    [DispIdAttribute("2")]
public CodeElements Collection { get; }
    [DispIdAttribute("0")]
public string Name { get; public set; }
    [DispIdAttribute("3")]
public string FullName { get; }
    [DispIdAttribute("4")]
public ProjectItem ProjectItem { get; }
    [DispIdAttribute("5")]
public vsCMElement Kind { get; }
    [DispIdAttribute("6")]
public bool IsCodeType { get; }
    [DispIdAttribute("7")]
public vsCMInfoLocation InfoLocation { get; }
    [DispIdAttribute("8")]
public CodeElements Children { get; }
    [DispIdAttribute("9")]
public string Language { get; }
    [DispIdAttribute("10")]
public TextPoint StartPoint { get; }
    [DispIdAttribute("11")]
public TextPoint EndPoint { get; }
    [DispIdAttribute("12")]
public object ExtenderNames { get; }
    [DispIdAttribute("13")]
public object Extender { get; }
    [DispIdAttribute("14")]
public string ExtenderCATID { get; }
    [DispIdAttribute("31")]
public object Parent { get; }
    [DispIdAttribute("32")]
public CodeElements Members { get; }
    [DispIdAttribute("35")]
public string DocComment { get; public set; }
    [DispIdAttribute("36")]
public string Comment { get; public set; }
    [TypeLibFuncAttribute("1024")]
[DispIdAttribute("1")]
public abstract virtual DTE get_DTE();
    [DispIdAttribute("2")]
[TypeLibFuncAttribute("1024")]
public abstract virtual CodeElements get_Collection();
    [DispIdAttribute("0")]
public abstract virtual string get_Name();
    [DispIdAttribute("0")]
public abstract virtual void set_Name(string pVal);
    [DispIdAttribute("3")]
public abstract virtual string get_FullName();
    [TypeLibFuncAttribute("1024")]
[DispIdAttribute("4")]
public abstract virtual ProjectItem get_ProjectItem();
    [DispIdAttribute("5")]
[TypeLibFuncAttribute("1024")]
public abstract virtual vsCMElement get_Kind();
    [DispIdAttribute("6")]
[TypeLibFuncAttribute("1024")]
public abstract virtual bool get_IsCodeType();
    [DispIdAttribute("7")]
[TypeLibFuncAttribute("1024")]
public abstract virtual vsCMInfoLocation get_InfoLocation();
    [DispIdAttribute("8")]
[TypeLibFuncAttribute("1024")]
public abstract virtual CodeElements get_Children();
    [DispIdAttribute("9")]
[TypeLibFuncAttribute("1024")]
public abstract virtual string get_Language();
    [DispIdAttribute("10")]
[TypeLibFuncAttribute("1024")]
public abstract virtual TextPoint get_StartPoint();
    [TypeLibFuncAttribute("1024")]
[DispIdAttribute("11")]
public abstract virtual TextPoint get_EndPoint();
    [DispIdAttribute("12")]
[TypeLibFuncAttribute("1024")]
public abstract virtual object get_ExtenderNames();
    [TypeLibFuncAttribute("1024")]
[DispIdAttribute("13")]
public abstract virtual object get_Extender(string ExtenderName);
    [DispIdAttribute("14")]
[TypeLibFuncAttribute("1024")]
public abstract virtual string get_ExtenderCATID();
    [DispIdAttribute("15")]
[TypeLibFuncAttribute("1024")]
public abstract virtual TextPoint GetStartPoint(vsCMPart Part);
    [DispIdAttribute("16")]
[TypeLibFuncAttribute("1024")]
public abstract virtual TextPoint GetEndPoint(vsCMPart Part);
    [DispIdAttribute("31")]
[TypeLibFuncAttribute("1024")]
public abstract virtual object get_Parent();
    [DispIdAttribute("32")]
[TypeLibFuncAttribute("1024")]
public abstract virtual CodeElements get_Members();
    [TypeLibFuncAttribute("1024")]
[DispIdAttribute("35")]
public abstract virtual string get_DocComment();
    [TypeLibFuncAttribute("1024")]
[DispIdAttribute("35")]
public abstract virtual void set_DocComment(string pDocComment);
    [TypeLibFuncAttribute("1024")]
[DispIdAttribute("36")]
public abstract virtual string get_Comment();
    [DispIdAttribute("36")]
[TypeLibFuncAttribute("1024")]
public abstract virtual void set_Comment(string pComment);
    [DispIdAttribute("37")]
public abstract virtual CodeNamespace AddNamespace(string Name, object Position);
    [DispIdAttribute("38")]
public abstract virtual CodeClass AddClass(string Name, object Position, object Bases, object ImplementedInterfaces, vsCMAccess Access);
    [DispIdAttribute("39")]
public abstract virtual CodeInterface AddInterface(string Name, object Position, object Bases, vsCMAccess Access);
    [DispIdAttribute("40")]
public abstract virtual CodeStruct AddStruct(string Name, object Position, object Bases, object ImplementedInterfaces, vsCMAccess Access);
    [DispIdAttribute("41")]
public abstract virtual CodeEnum AddEnum(string Name, object Position, object Bases, vsCMAccess Access);
    [DispIdAttribute("42")]
public abstract virtual CodeDelegate AddDelegate(string Name, object Type, object Position, vsCMAccess Access);
    [DispIdAttribute("43")]
public abstract virtual void Remove(object Element);
}
[GuidAttribute("0CFBC2BD-0D4E-11D3-8997-00C04F688DDE")]
[DefaultMemberAttribute("Name")]
[TypeLibTypeAttribute("4160")]
public interface EnvDTE.CodeParameter {
    [DispIdAttribute("1")]
public DTE DTE { get; }
    [DispIdAttribute("2")]
public CodeElements Collection { get; }
    [DispIdAttribute("0")]
public string Name { get; public set; }
    [DispIdAttribute("3")]
public string FullName { get; }
    [DispIdAttribute("4")]
public ProjectItem ProjectItem { get; }
    [DispIdAttribute("5")]
public vsCMElement Kind { get; }
    [DispIdAttribute("6")]
public bool IsCodeType { get; }
    [DispIdAttribute("7")]
public vsCMInfoLocation InfoLocation { get; }
    [DispIdAttribute("8")]
public CodeElements Children { get; }
    [DispIdAttribute("9")]
public string Language { get; }
    [DispIdAttribute("10")]
public TextPoint StartPoint { get; }
    [DispIdAttribute("11")]
public TextPoint EndPoint { get; }
    [DispIdAttribute("12")]
public object ExtenderNames { get; }
    [DispIdAttribute("13")]
public object Extender { get; }
    [DispIdAttribute("14")]
public string ExtenderCATID { get; }
    [DispIdAttribute("31")]
public CodeElement Parent { get; }
    [DispIdAttribute("32")]
public CodeTypeRef Type { get; public set; }
    [DispIdAttribute("33")]
public CodeElements Attributes { get; }
    [DispIdAttribute("34")]
public string DocComment { get; public set; }
    [DispIdAttribute("1")]
[TypeLibFuncAttribute("1024")]
public abstract virtual DTE get_DTE();
    [DispIdAttribute("2")]
[TypeLibFuncAttribute("1024")]
public abstract virtual CodeElements get_Collection();
    [DispIdAttribute("0")]
public abstract virtual string get_Name();
    [DispIdAttribute("0")]
public abstract virtual void set_Name(string pVal);
    [DispIdAttribute("3")]
public abstract virtual string get_FullName();
    [TypeLibFuncAttribute("1024")]
[DispIdAttribute("4")]
public abstract virtual ProjectItem get_ProjectItem();
    [TypeLibFuncAttribute("1024")]
[DispIdAttribute("5")]
public abstract virtual vsCMElement get_Kind();
    [DispIdAttribute("6")]
[TypeLibFuncAttribute("1024")]
public abstract virtual bool get_IsCodeType();
    [DispIdAttribute("7")]
[TypeLibFuncAttribute("1024")]
public abstract virtual vsCMInfoLocation get_InfoLocation();
    [TypeLibFuncAttribute("1024")]
[DispIdAttribute("8")]
public abstract virtual CodeElements get_Children();
    [TypeLibFuncAttribute("1024")]
[DispIdAttribute("9")]
public abstract virtual string get_Language();
    [TypeLibFuncAttribute("1024")]
[DispIdAttribute("10")]
public abstract virtual TextPoint get_StartPoint();
    [DispIdAttribute("11")]
[TypeLibFuncAttribute("1024")]
public abstract virtual TextPoint get_EndPoint();
    [DispIdAttribute("12")]
[TypeLibFuncAttribute("1024")]
public abstract virtual object get_ExtenderNames();
    [TypeLibFuncAttribute("1024")]
[DispIdAttribute("13")]
public abstract virtual object get_Extender(string ExtenderName);
    [DispIdAttribute("14")]
[TypeLibFuncAttribute("1024")]
public abstract virtual string get_ExtenderCATID();
    [TypeLibFuncAttribute("1024")]
[DispIdAttribute("15")]
public abstract virtual TextPoint GetStartPoint(vsCMPart Part);
    [TypeLibFuncAttribute("1024")]
[DispIdAttribute("16")]
public abstract virtual TextPoint GetEndPoint(vsCMPart Part);
    [DispIdAttribute("31")]
[TypeLibFuncAttribute("1024")]
public abstract virtual CodeElement get_Parent();
    [TypeLibFuncAttribute("1024")]
[DispIdAttribute("32")]
public abstract virtual void set_Type(CodeTypeRef pCodeTypeRef);
    [DispIdAttribute("32")]
[TypeLibFuncAttribute("1024")]
public abstract virtual CodeTypeRef get_Type();
    [TypeLibFuncAttribute("1024")]
[DispIdAttribute("33")]
public abstract virtual CodeElements get_Attributes();
    [TypeLibFuncAttribute("1024")]
[DispIdAttribute("34")]
public abstract virtual string get_DocComment();
    [TypeLibFuncAttribute("1024")]
[DispIdAttribute("34")]
public abstract virtual void set_DocComment(string pDocComment);
    [DispIdAttribute("35")]
public abstract virtual CodeAttribute AddAttribute(string Name, string Value, object Position);
}
[TypeLibTypeAttribute("4160")]
[DefaultMemberAttribute("Name")]
[GuidAttribute("0CFBC2BB-0D4E-11D3-8997-00C04F688DDE")]
public interface EnvDTE.CodeProperty {
    [DispIdAttribute("1")]
public DTE DTE { get; }
    [DispIdAttribute("2")]
public CodeElements Collection { get; }
    [DispIdAttribute("0")]
public string Name { get; public set; }
    [DispIdAttribute("3")]
public string FullName { get; }
    [DispIdAttribute("4")]
public ProjectItem ProjectItem { get; }
    [DispIdAttribute("5")]
public vsCMElement Kind { get; }
    [DispIdAttribute("6")]
public bool IsCodeType { get; }
    [DispIdAttribute("7")]
public vsCMInfoLocation InfoLocation { get; }
    [DispIdAttribute("8")]
public CodeElements Children { get; }
    [DispIdAttribute("9")]
public string Language { get; }
    [DispIdAttribute("10")]
public TextPoint StartPoint { get; }
    [DispIdAttribute("11")]
public TextPoint EndPoint { get; }
    [DispIdAttribute("12")]
public object ExtenderNames { get; }
    [DispIdAttribute("13")]
public object Extender { get; }
    [DispIdAttribute("14")]
public string ExtenderCATID { get; }
    [DispIdAttribute("31")]
public CodeClass Parent { get; }
    [DispIdAttribute("33")]
public string Prototype { get; }
    [DispIdAttribute("34")]
public CodeTypeRef Type { get; public set; }
    [DispIdAttribute("35")]
public CodeFunction Getter { get; public set; }
    [DispIdAttribute("36")]
public CodeFunction Setter { get; public set; }
    [DispIdAttribute("37")]
public vsCMAccess Access { get; public set; }
    [DispIdAttribute("38")]
public CodeElements Attributes { get; }
    [DispIdAttribute("39")]
public string DocComment { get; public set; }
    [DispIdAttribute("40")]
public string Comment { get; public set; }
    [DispIdAttribute("1")]
[TypeLibFuncAttribute("1024")]
public abstract virtual DTE get_DTE();
    [TypeLibFuncAttribute("1024")]
[DispIdAttribute("2")]
public abstract virtual CodeElements get_Collection();
    [DispIdAttribute("0")]
public abstract virtual string get_Name();
    [DispIdAttribute("0")]
public abstract virtual void set_Name(string pVal);
    [DispIdAttribute("3")]
public abstract virtual string get_FullName();
    [DispIdAttribute("4")]
[TypeLibFuncAttribute("1024")]
public abstract virtual ProjectItem get_ProjectItem();
    [TypeLibFuncAttribute("1024")]
[DispIdAttribute("5")]
public abstract virtual vsCMElement get_Kind();
    [DispIdAttribute("6")]
[TypeLibFuncAttribute("1024")]
public abstract virtual bool get_IsCodeType();
    [DispIdAttribute("7")]
[TypeLibFuncAttribute("1024")]
public abstract virtual vsCMInfoLocation get_InfoLocation();
    [TypeLibFuncAttribute("1024")]
[DispIdAttribute("8")]
public abstract virtual CodeElements get_Children();
    [TypeLibFuncAttribute("1024")]
[DispIdAttribute("9")]
public abstract virtual string get_Language();
    [DispIdAttribute("10")]
[TypeLibFuncAttribute("1024")]
public abstract virtual TextPoint get_StartPoint();
    [TypeLibFuncAttribute("1024")]
[DispIdAttribute("11")]
public abstract virtual TextPoint get_EndPoint();
    [TypeLibFuncAttribute("1024")]
[DispIdAttribute("12")]
public abstract virtual object get_ExtenderNames();
    [DispIdAttribute("13")]
[TypeLibFuncAttribute("1024")]
public abstract virtual object get_Extender(string ExtenderName);
    [DispIdAttribute("14")]
[TypeLibFuncAttribute("1024")]
public abstract virtual string get_ExtenderCATID();
    [TypeLibFuncAttribute("1024")]
[DispIdAttribute("15")]
public abstract virtual TextPoint GetStartPoint(vsCMPart Part);
    [DispIdAttribute("16")]
[TypeLibFuncAttribute("1024")]
public abstract virtual TextPoint GetEndPoint(vsCMPart Part);
    [TypeLibFuncAttribute("1024")]
[DispIdAttribute("31")]
public abstract virtual CodeClass get_Parent();
    [TypeLibFuncAttribute("1024")]
[DispIdAttribute("33")]
public abstract virtual string get_Prototype(int Flags);
    [DispIdAttribute("34")]
[TypeLibFuncAttribute("1024")]
public abstract virtual void set_Type(CodeTypeRef pCodeTypeRef);
    [TypeLibFuncAttribute("1024")]
[DispIdAttribute("34")]
public abstract virtual CodeTypeRef get_Type();
    [DispIdAttribute("35")]
[TypeLibFuncAttribute("1024")]
public abstract virtual CodeFunction get_Getter();
    [TypeLibFuncAttribute("1024")]
[DispIdAttribute("35")]
public abstract virtual void set_Getter(CodeFunction ppCodeFunction);
    [TypeLibFuncAttribute("1024")]
[DispIdAttribute("36")]
public abstract virtual CodeFunction get_Setter();
    [TypeLibFuncAttribute("1024")]
[DispIdAttribute("36")]
public abstract virtual void set_Setter(CodeFunction ppCodeFunction);
    [DispIdAttribute("37")]
public abstract virtual void set_Access(vsCMAccess Access);
    [DispIdAttribute("37")]
public abstract virtual vsCMAccess get_Access();
    [DispIdAttribute("38")]
[TypeLibFuncAttribute("1024")]
public abstract virtual CodeElements get_Attributes();
    [DispIdAttribute("39")]
[TypeLibFuncAttribute("1024")]
public abstract virtual string get_DocComment();
    [DispIdAttribute("39")]
[TypeLibFuncAttribute("1024")]
public abstract virtual void set_DocComment(string pDocComment);
    [TypeLibFuncAttribute("1024")]
[DispIdAttribute("40")]
public abstract virtual string get_Comment();
    [DispIdAttribute("40")]
[TypeLibFuncAttribute("1024")]
public abstract virtual void set_Comment(string pComment);
    [DispIdAttribute("42")]
public abstract virtual CodeAttribute AddAttribute(string Name, string Value, object Position);
}
[GuidAttribute("B1F42511-91CD-4D3A-8B25-A317D8032B24")]
[DefaultMemberAttribute("Name")]
[TypeLibTypeAttribute("4160")]
public interface EnvDTE.CodeStruct {
    [DispIdAttribute("1")]
public DTE DTE { get; }
    [DispIdAttribute("2")]
public CodeElements Collection { get; }
    [DispIdAttribute("0")]
public string Name { get; public set; }
    [DispIdAttribute("3")]
public string FullName { get; }
    [DispIdAttribute("4")]
public ProjectItem ProjectItem { get; }
    [DispIdAttribute("5")]
public vsCMElement Kind { get; }
    [DispIdAttribute("6")]
public bool IsCodeType { get; }
    [DispIdAttribute("7")]
public vsCMInfoLocation InfoLocation { get; }
    [DispIdAttribute("8")]
public CodeElements Children { get; }
    [DispIdAttribute("9")]
public string Language { get; }
    [DispIdAttribute("10")]
public TextPoint StartPoint { get; }
    [DispIdAttribute("11")]
public TextPoint EndPoint { get; }
    [DispIdAttribute("12")]
public object ExtenderNames { get; }
    [DispIdAttribute("13")]
public object Extender { get; }
    [DispIdAttribute("14")]
public string ExtenderCATID { get; }
    [DispIdAttribute("31")]
public object Parent { get; }
    [DispIdAttribute("32")]
public CodeNamespace Namespace { get; }
    [DispIdAttribute("33")]
public CodeElements Bases { get; }
    [DispIdAttribute("34")]
public CodeElements Members { get; }
    [DispIdAttribute("35")]
public vsCMAccess Access { get; public set; }
    [DispIdAttribute("36")]
public CodeElements Attributes { get; }
    [DispIdAttribute("37")]
public string DocComment { get; public set; }
    [DispIdAttribute("38")]
public string Comment { get; public set; }
    [DispIdAttribute("43")]
public bool IsDerivedFrom { get; }
    [DispIdAttribute("44")]
public CodeElements DerivedTypes { get; }
    [DispIdAttribute("61")]
public CodeElements ImplementedInterfaces { get; }
    [DispIdAttribute("62")]
public bool IsAbstract { get; public set; }
    [TypeLibFuncAttribute("1024")]
[DispIdAttribute("1")]
public abstract virtual DTE get_DTE();
    [DispIdAttribute("2")]
[TypeLibFuncAttribute("1024")]
public abstract virtual CodeElements get_Collection();
    [DispIdAttribute("0")]
public abstract virtual string get_Name();
    [DispIdAttribute("0")]
public abstract virtual void set_Name(string pVal);
    [DispIdAttribute("3")]
public abstract virtual string get_FullName();
    [TypeLibFuncAttribute("1024")]
[DispIdAttribute("4")]
public abstract virtual ProjectItem get_ProjectItem();
    [TypeLibFuncAttribute("1024")]
[DispIdAttribute("5")]
public abstract virtual vsCMElement get_Kind();
    [TypeLibFuncAttribute("1024")]
[DispIdAttribute("6")]
public abstract virtual bool get_IsCodeType();
    [TypeLibFuncAttribute("1024")]
[DispIdAttribute("7")]
public abstract virtual vsCMInfoLocation get_InfoLocation();
    [TypeLibFuncAttribute("1024")]
[DispIdAttribute("8")]
public abstract virtual CodeElements get_Children();
    [DispIdAttribute("9")]
[TypeLibFuncAttribute("1024")]
public abstract virtual string get_Language();
    [TypeLibFuncAttribute("1024")]
[DispIdAttribute("10")]
public abstract virtual TextPoint get_StartPoint();
    [DispIdAttribute("11")]
[TypeLibFuncAttribute("1024")]
public abstract virtual TextPoint get_EndPoint();
    [DispIdAttribute("12")]
[TypeLibFuncAttribute("1024")]
public abstract virtual object get_ExtenderNames();
    [TypeLibFuncAttribute("1024")]
[DispIdAttribute("13")]
public abstract virtual object get_Extender(string ExtenderName);
    [TypeLibFuncAttribute("1024")]
[DispIdAttribute("14")]
public abstract virtual string get_ExtenderCATID();
    [DispIdAttribute("15")]
[TypeLibFuncAttribute("1024")]
public abstract virtual TextPoint GetStartPoint(vsCMPart Part);
    [DispIdAttribute("16")]
[TypeLibFuncAttribute("1024")]
public abstract virtual TextPoint GetEndPoint(vsCMPart Part);
    [TypeLibFuncAttribute("1024")]
[DispIdAttribute("31")]
public abstract virtual object get_Parent();
    [DispIdAttribute("32")]
[TypeLibFuncAttribute("1024")]
public abstract virtual CodeNamespace get_Namespace();
    [DispIdAttribute("33")]
[TypeLibFuncAttribute("1024")]
public abstract virtual CodeElements get_Bases();
    [DispIdAttribute("34")]
[TypeLibFuncAttribute("1024")]
public abstract virtual CodeElements get_Members();
    [DispIdAttribute("35")]
public abstract virtual void set_Access(vsCMAccess pAccess);
    [DispIdAttribute("35")]
public abstract virtual vsCMAccess get_Access();
    [TypeLibFuncAttribute("1024")]
[DispIdAttribute("36")]
public abstract virtual CodeElements get_Attributes();
    [TypeLibFuncAttribute("1024")]
[DispIdAttribute("37")]
public abstract virtual string get_DocComment();
    [TypeLibFuncAttribute("1024")]
[DispIdAttribute("37")]
public abstract virtual void set_DocComment(string pDocComment);
    [DispIdAttribute("38")]
[TypeLibFuncAttribute("1024")]
public abstract virtual string get_Comment();
    [DispIdAttribute("38")]
[TypeLibFuncAttribute("1024")]
public abstract virtual void set_Comment(string pComment);
    [DispIdAttribute("39")]
public abstract virtual CodeElement AddBase(object Base, object Position);
    [DispIdAttribute("40")]
public abstract virtual CodeAttribute AddAttribute(string Name, string Value, object Position);
    [DispIdAttribute("41")]
public abstract virtual void RemoveBase(object Element);
    [DispIdAttribute("42")]
public abstract virtual void RemoveMember(object Element);
    [DispIdAttribute("43")]
public abstract virtual bool get_IsDerivedFrom(string FullName);
    [TypeLibFuncAttribute("1024")]
[DispIdAttribute("44")]
public abstract virtual CodeElements get_DerivedTypes();
    [DispIdAttribute("61")]
[TypeLibFuncAttribute("1024")]
public abstract virtual CodeElements get_ImplementedInterfaces();
    [DispIdAttribute("62")]
public abstract virtual bool get_IsAbstract();
    [DispIdAttribute("62")]
public abstract virtual void set_IsAbstract(bool pIsAbstract);
    [DispIdAttribute("63")]
public abstract virtual CodeInterface AddImplementedInterface(object Base, object Position);
    [DispIdAttribute("64")]
public abstract virtual CodeFunction AddFunction(string Name, vsCMFunction Kind, object Type, object Position, vsCMAccess Access, object Location);
    [DispIdAttribute("65")]
public abstract virtual CodeVariable AddVariable(string Name, object Type, object Position, vsCMAccess Access, object Location);
    [DispIdAttribute("66")]
public abstract virtual CodeProperty AddProperty(string GetterName, string PutterName, object Type, object Position, vsCMAccess Access, object Location);
    [DispIdAttribute("67")]
public abstract virtual CodeClass AddClass(string Name, object Position, object Bases, object ImplementedInterfaces, vsCMAccess Access);
    [DispIdAttribute("68")]
public abstract virtual CodeStruct AddStruct(string Name, object Position, object Bases, object ImplementedInterfaces, vsCMAccess Access);
    [DispIdAttribute("69")]
public abstract virtual CodeEnum AddEnum(string Name, object Position, object Bases, vsCMAccess Access);
    [DispIdAttribute("70")]
public abstract virtual CodeDelegate AddDelegate(string Name, object Type, object Position, vsCMAccess Access);
    [DispIdAttribute("71")]
public abstract virtual void RemoveInterface(object Element);
}
[DefaultMemberAttribute("Name")]
[TypeLibTypeAttribute("4160")]
[GuidAttribute("0CFBC2B7-0D4E-11D3-8997-00C04F688DDE")]
public interface EnvDTE.CodeType {
    [DispIdAttribute("1")]
public DTE DTE { get; }
    [DispIdAttribute("2")]
public CodeElements Collection { get; }
    [DispIdAttribute("0")]
public string Name { get; public set; }
    [DispIdAttribute("3")]
public string FullName { get; }
    [DispIdAttribute("4")]
public ProjectItem ProjectItem { get; }
    [DispIdAttribute("5")]
public vsCMElement Kind { get; }
    [DispIdAttribute("6")]
public bool IsCodeType { get; }
    [DispIdAttribute("7")]
public vsCMInfoLocation InfoLocation { get; }
    [DispIdAttribute("8")]
public CodeElements Children { get; }
    [DispIdAttribute("9")]
public string Language { get; }
    [DispIdAttribute("10")]
public TextPoint StartPoint { get; }
    [DispIdAttribute("11")]
public TextPoint EndPoint { get; }
    [DispIdAttribute("12")]
public object ExtenderNames { get; }
    [DispIdAttribute("13")]
public object Extender { get; }
    [DispIdAttribute("14")]
public string ExtenderCATID { get; }
    [DispIdAttribute("31")]
public object Parent { get; }
    [DispIdAttribute("32")]
public CodeNamespace Namespace { get; }
    [DispIdAttribute("33")]
public CodeElements Bases { get; }
    [DispIdAttribute("34")]
public CodeElements Members { get; }
    [DispIdAttribute("35")]
public vsCMAccess Access { get; public set; }
    [DispIdAttribute("36")]
public CodeElements Attributes { get; }
    [DispIdAttribute("37")]
public string DocComment { get; public set; }
    [DispIdAttribute("38")]
public string Comment { get; public set; }
    [DispIdAttribute("43")]
public bool IsDerivedFrom { get; }
    [DispIdAttribute("44")]
public CodeElements DerivedTypes { get; }
    [DispIdAttribute("1")]
[TypeLibFuncAttribute("1024")]
public abstract virtual DTE get_DTE();
    [TypeLibFuncAttribute("1024")]
[DispIdAttribute("2")]
public abstract virtual CodeElements get_Collection();
    [DispIdAttribute("0")]
public abstract virtual string get_Name();
    [DispIdAttribute("0")]
public abstract virtual void set_Name(string pVal);
    [DispIdAttribute("3")]
public abstract virtual string get_FullName();
    [DispIdAttribute("4")]
[TypeLibFuncAttribute("1024")]
public abstract virtual ProjectItem get_ProjectItem();
    [TypeLibFuncAttribute("1024")]
[DispIdAttribute("5")]
public abstract virtual vsCMElement get_Kind();
    [DispIdAttribute("6")]
[TypeLibFuncAttribute("1024")]
public abstract virtual bool get_IsCodeType();
    [DispIdAttribute("7")]
[TypeLibFuncAttribute("1024")]
public abstract virtual vsCMInfoLocation get_InfoLocation();
    [DispIdAttribute("8")]
[TypeLibFuncAttribute("1024")]
public abstract virtual CodeElements get_Children();
    [TypeLibFuncAttribute("1024")]
[DispIdAttribute("9")]
public abstract virtual string get_Language();
    [DispIdAttribute("10")]
[TypeLibFuncAttribute("1024")]
public abstract virtual TextPoint get_StartPoint();
    [DispIdAttribute("11")]
[TypeLibFuncAttribute("1024")]
public abstract virtual TextPoint get_EndPoint();
    [DispIdAttribute("12")]
[TypeLibFuncAttribute("1024")]
public abstract virtual object get_ExtenderNames();
    [TypeLibFuncAttribute("1024")]
[DispIdAttribute("13")]
public abstract virtual object get_Extender(string ExtenderName);
    [TypeLibFuncAttribute("1024")]
[DispIdAttribute("14")]
public abstract virtual string get_ExtenderCATID();
    [TypeLibFuncAttribute("1024")]
[DispIdAttribute("15")]
public abstract virtual TextPoint GetStartPoint(vsCMPart Part);
    [DispIdAttribute("16")]
[TypeLibFuncAttribute("1024")]
public abstract virtual TextPoint GetEndPoint(vsCMPart Part);
    [TypeLibFuncAttribute("1024")]
[DispIdAttribute("31")]
public abstract virtual object get_Parent();
    [TypeLibFuncAttribute("1024")]
[DispIdAttribute("32")]
public abstract virtual CodeNamespace get_Namespace();
    [DispIdAttribute("33")]
[TypeLibFuncAttribute("1024")]
public abstract virtual CodeElements get_Bases();
    [DispIdAttribute("34")]
[TypeLibFuncAttribute("1024")]
public abstract virtual CodeElements get_Members();
    [DispIdAttribute("35")]
public abstract virtual void set_Access(vsCMAccess pAccess);
    [DispIdAttribute("35")]
public abstract virtual vsCMAccess get_Access();
    [TypeLibFuncAttribute("1024")]
[DispIdAttribute("36")]
public abstract virtual CodeElements get_Attributes();
    [TypeLibFuncAttribute("1024")]
[DispIdAttribute("37")]
public abstract virtual string get_DocComment();
    [TypeLibFuncAttribute("1024")]
[DispIdAttribute("37")]
public abstract virtual void set_DocComment(string pDocComment);
    [DispIdAttribute("38")]
[TypeLibFuncAttribute("1024")]
public abstract virtual string get_Comment();
    [DispIdAttribute("38")]
[TypeLibFuncAttribute("1024")]
public abstract virtual void set_Comment(string pComment);
    [DispIdAttribute("39")]
public abstract virtual CodeElement AddBase(object Base, object Position);
    [DispIdAttribute("40")]
public abstract virtual CodeAttribute AddAttribute(string Name, string Value, object Position);
    [DispIdAttribute("41")]
public abstract virtual void RemoveBase(object Element);
    [DispIdAttribute("42")]
public abstract virtual void RemoveMember(object Element);
    [DispIdAttribute("43")]
public abstract virtual bool get_IsDerivedFrom(string FullName);
    [DispIdAttribute("44")]
[TypeLibFuncAttribute("1024")]
public abstract virtual CodeElements get_DerivedTypes();
}
[GuidAttribute("0CFBC2BC-0D4E-11D3-8997-00C04F688DDE")]
public interface EnvDTE.CodeTypeRef {
    [DispIdAttribute("1")]
public DTE DTE { get; }
    [DispIdAttribute("2")]
public object Parent { get; }
    [DispIdAttribute("3")]
public vsCMTypeRef TypeKind { get; }
    [DispIdAttribute("4")]
public CodeType CodeType { get; public set; }
    [DispIdAttribute("5")]
public CodeTypeRef ElementType { get; public set; }
    [DispIdAttribute("6")]
public string AsString { get; }
    [DispIdAttribute("7")]
public string AsFullName { get; }
    [DispIdAttribute("8")]
public int Rank { get; public set; }
    [DispIdAttribute("1")]
public abstract virtual DTE get_DTE();
    [DispIdAttribute("2")]
public abstract virtual object get_Parent();
    [DispIdAttribute("3")]
public abstract virtual vsCMTypeRef get_TypeKind();
    [DispIdAttribute("4")]
public abstract virtual CodeType get_CodeType();
    [DispIdAttribute("4")]
public abstract virtual void set_CodeType(CodeType value);
    [DispIdAttribute("5")]
public abstract virtual CodeTypeRef get_ElementType();
    [DispIdAttribute("5")]
public abstract virtual void set_ElementType(CodeTypeRef value);
    [DispIdAttribute("6")]
public abstract virtual string get_AsString();
    [DispIdAttribute("7")]
public abstract virtual string get_AsFullName();
    [DispIdAttribute("8")]
public abstract virtual int get_Rank();
    [DispIdAttribute("8")]
public abstract virtual void set_Rank(int value);
    [DispIdAttribute("9")]
public abstract virtual CodeTypeRef CreateArrayType(int Rank);
}
[GuidAttribute("0CFBC2BA-0D4E-11D3-8997-00C04F688DDE")]
[TypeLibTypeAttribute("4160")]
[DefaultMemberAttribute("Name")]
public interface EnvDTE.CodeVariable {
    [DispIdAttribute("1")]
public DTE DTE { get; }
    [DispIdAttribute("2")]
public CodeElements Collection { get; }
    [DispIdAttribute("0")]
public string Name { get; public set; }
    [DispIdAttribute("3")]
public string FullName { get; }
    [DispIdAttribute("4")]
public ProjectItem ProjectItem { get; }
    [DispIdAttribute("5")]
public vsCMElement Kind { get; }
    [DispIdAttribute("6")]
public bool IsCodeType { get; }
    [DispIdAttribute("7")]
public vsCMInfoLocation InfoLocation { get; }
    [DispIdAttribute("8")]
public CodeElements Children { get; }
    [DispIdAttribute("9")]
public string Language { get; }
    [DispIdAttribute("10")]
public TextPoint StartPoint { get; }
    [DispIdAttribute("11")]
public TextPoint EndPoint { get; }
    [DispIdAttribute("12")]
public object ExtenderNames { get; }
    [DispIdAttribute("13")]
public object Extender { get; }
    [DispIdAttribute("14")]
public string ExtenderCATID { get; }
    [DispIdAttribute("31")]
public object Parent { get; }
    [DispIdAttribute("33")]
public object InitExpression { get; public set; }
    [DispIdAttribute("34")]
public string Prototype { get; }
    [DispIdAttribute("35")]
public CodeTypeRef Type { get; public set; }
    [DispIdAttribute("36")]
public vsCMAccess Access { get; public set; }
    [DispIdAttribute("37")]
public bool IsConstant { get; public set; }
    [DispIdAttribute("38")]
public CodeElements Attributes { get; }
    [DispIdAttribute("39")]
public string DocComment { get; public set; }
    [DispIdAttribute("40")]
public string Comment { get; public set; }
    [DispIdAttribute("42")]
public bool IsShared { get; public set; }
    [DispIdAttribute("1")]
[TypeLibFuncAttribute("1024")]
public abstract virtual DTE get_DTE();
    [TypeLibFuncAttribute("1024")]
[DispIdAttribute("2")]
public abstract virtual CodeElements get_Collection();
    [DispIdAttribute("0")]
public abstract virtual string get_Name();
    [DispIdAttribute("0")]
public abstract virtual void set_Name(string pVal);
    [DispIdAttribute("3")]
public abstract virtual string get_FullName();
    [DispIdAttribute("4")]
[TypeLibFuncAttribute("1024")]
public abstract virtual ProjectItem get_ProjectItem();
    [TypeLibFuncAttribute("1024")]
[DispIdAttribute("5")]
public abstract virtual vsCMElement get_Kind();
    [DispIdAttribute("6")]
[TypeLibFuncAttribute("1024")]
public abstract virtual bool get_IsCodeType();
    [DispIdAttribute("7")]
[TypeLibFuncAttribute("1024")]
public abstract virtual vsCMInfoLocation get_InfoLocation();
    [TypeLibFuncAttribute("1024")]
[DispIdAttribute("8")]
public abstract virtual CodeElements get_Children();
    [DispIdAttribute("9")]
[TypeLibFuncAttribute("1024")]
public abstract virtual string get_Language();
    [TypeLibFuncAttribute("1024")]
[DispIdAttribute("10")]
public abstract virtual TextPoint get_StartPoint();
    [TypeLibFuncAttribute("1024")]
[DispIdAttribute("11")]
public abstract virtual TextPoint get_EndPoint();
    [TypeLibFuncAttribute("1024")]
[DispIdAttribute("12")]
public abstract virtual object get_ExtenderNames();
    [DispIdAttribute("13")]
[TypeLibFuncAttribute("1024")]
public abstract virtual object get_Extender(string ExtenderName);
    [DispIdAttribute("14")]
[TypeLibFuncAttribute("1024")]
public abstract virtual string get_ExtenderCATID();
    [TypeLibFuncAttribute("1024")]
[DispIdAttribute("15")]
public abstract virtual TextPoint GetStartPoint(vsCMPart Part);
    [DispIdAttribute("16")]
[TypeLibFuncAttribute("1024")]
public abstract virtual TextPoint GetEndPoint(vsCMPart Part);
    [DispIdAttribute("31")]
[TypeLibFuncAttribute("1024")]
public abstract virtual object get_Parent();
    [DispIdAttribute("33")]
public abstract virtual object get_InitExpression();
    [DispIdAttribute("33")]
public abstract virtual void set_InitExpression(object pExpr);
    [DispIdAttribute("34")]
[TypeLibFuncAttribute("1024")]
public abstract virtual string get_Prototype(int Flags);
    [DispIdAttribute("35")]
[TypeLibFuncAttribute("1024")]
public abstract virtual void set_Type(CodeTypeRef pCodeTypeRef);
    [DispIdAttribute("35")]
[TypeLibFuncAttribute("1024")]
public abstract virtual CodeTypeRef get_Type();
    [DispIdAttribute("36")]
public abstract virtual void set_Access(vsCMAccess Access);
    [DispIdAttribute("36")]
public abstract virtual vsCMAccess get_Access();
    [DispIdAttribute("37")]
public abstract virtual bool get_IsConstant();
    [DispIdAttribute("37")]
public abstract virtual void set_IsConstant(bool pIsConstant);
    [TypeLibFuncAttribute("1024")]
[DispIdAttribute("38")]
public abstract virtual CodeElements get_Attributes();
    [TypeLibFuncAttribute("1024")]
[DispIdAttribute("39")]
public abstract virtual string get_DocComment();
    [DispIdAttribute("39")]
[TypeLibFuncAttribute("1024")]
public abstract virtual void set_DocComment(string pDocComment);
    [DispIdAttribute("40")]
[TypeLibFuncAttribute("1024")]
public abstract virtual string get_Comment();
    [TypeLibFuncAttribute("1024")]
[DispIdAttribute("40")]
public abstract virtual void set_Comment(string pComment);
    [DispIdAttribute("41")]
public abstract virtual CodeAttribute AddAttribute(string Name, string Value, object Position);
    [DispIdAttribute("42")]
public abstract virtual bool get_IsShared();
    [DispIdAttribute("42")]
public abstract virtual void set_IsShared(bool pShared);
}
[GuidAttribute("E5D17051-D6E5-4DA7-8B3A-CA888617A5E7")]
[DefaultMemberAttribute("Name")]
public interface EnvDTE.ColorableItems {
    [DispIdAttribute("0")]
public string Name { get; }
    [ComAliasNameAttribute("stdole.OLE_COLOR")]
[DispIdAttribute("1")]
public UInt32 Foreground { get; public set; }
    [ComAliasNameAttribute("stdole.OLE_COLOR")]
[DispIdAttribute("2")]
public UInt32 Background { get; public set; }
    [DispIdAttribute("3")]
public bool Bold { get; public set; }
    [DispIdAttribute("0")]
public abstract virtual string get_Name();
    [DispIdAttribute("1")]
public abstract virtual UInt32 get_Foreground();
    [DispIdAttribute("1")]
public abstract virtual void set_Foreground(UInt32 value);
    [DispIdAttribute("2")]
public abstract virtual UInt32 get_Background();
    [DispIdAttribute("2")]
public abstract virtual void set_Background(UInt32 value);
    [DispIdAttribute("3")]
public abstract virtual bool get_Bold();
    [DispIdAttribute("3")]
public abstract virtual void set_Bold(bool value);
}
[DefaultMemberAttribute("Name")]
[GuidAttribute("5FE10FB0-91A1-4E55-BAAA-ECCAE5CCEB94")]
public interface EnvDTE.Command {
    [DispIdAttribute("0")]
public string Name { get; }
    [DispIdAttribute("2")]
public Commands Collection { get; }
    [DispIdAttribute("3")]
public DTE DTE { get; }
    [DispIdAttribute("4")]
public string Guid { get; }
    [DispIdAttribute("5")]
public int ID { get; }
    [DispIdAttribute("6")]
public bool IsAvailable { get; }
    [DispIdAttribute("9")]
public object Bindings { get; public set; }
    [DispIdAttribute("1")]
public string LocalizedName { get; }
    [DispIdAttribute("0")]
public abstract virtual string get_Name();
    [DispIdAttribute("2")]
public abstract virtual Commands get_Collection();
    [DispIdAttribute("3")]
public abstract virtual DTE get_DTE();
    [DispIdAttribute("4")]
public abstract virtual string get_Guid();
    [DispIdAttribute("5")]
public abstract virtual int get_ID();
    [DispIdAttribute("6")]
public abstract virtual bool get_IsAvailable();
    [DispIdAttribute("7")]
public abstract virtual object AddControl(object Owner, int Position);
    [DispIdAttribute("8")]
public abstract virtual void Delete();
    [DispIdAttribute("9")]
public abstract virtual object get_Bindings();
    [DispIdAttribute("9")]
public abstract virtual void set_Bindings(object value);
    [DispIdAttribute("1")]
public abstract virtual string get_LocalizedName();
}
[ComVisibleAttribute("False")]
[CoClassAttribute("EnvDTE.CommandBarEventsClass")]
[GuidAttribute("9E66FE98-A1C6-421D-8C0C-6DA4E652E770")]
public interface EnvDTE.CommandBarEvents {
}
[ComVisibleAttribute("False")]
[ClassInterfaceAttribute("0")]
[GuidAttribute("BFD4B2B2-9EEC-4DB8-ABA0-AC316F4C7328")]
[ComSourceInterfacesAttribute("EnvDTE._dispCommandBarControlEvents")]
public class EnvDTE.CommandBarEventsClass : object {
}
[ComVisibleAttribute("False")]
[GuidAttribute("A79FC678-0D0A-496A-B9DC-0D5B9E1CA9FC")]
[CoClassAttribute("EnvDTE.CommandEventsClass")]
public interface EnvDTE.CommandEvents {
}
[ComVisibleAttribute("False")]
[ClassInterfaceAttribute("0")]
[GuidAttribute("1DED92B5-9A46-4B29-93EF-B5E07016659E")]
[ComSourceInterfacesAttribute("EnvDTE._dispCommandEvents")]
public class EnvDTE.CommandEventsClass : object {
}
[DefaultMemberAttribute("Item")]
[GuidAttribute("E6B96CAC-B8C7-40AE-B705-5C81878C4A9E")]
public interface EnvDTE.Commands {
    [DispIdAttribute("1")]
public DTE DTE { get; }
    [DispIdAttribute("2")]
public DTE Parent { get; }
    [DispIdAttribute("10")]
public int Count { get; }
    [DispIdAttribute("1")]
public abstract virtual DTE get_DTE();
    [DispIdAttribute("2")]
public abstract virtual DTE get_Parent();
    [DispIdAttribute("3")]
public abstract virtual void Add(string Guid, int ID, Object& Control);
    [DispIdAttribute("4")]
public abstract virtual void Raise(string Guid, int ID, Object& CustomIn, Object& CustomOut);
    [DispIdAttribute("5")]
public abstract virtual void CommandInfo(object CommandBarControl, String& Guid, Int32& ID);
    [DispIdAttribute("10")]
public abstract virtual int get_Count();
    [DispIdAttribute("0")]
public abstract virtual Command Item(object index, int ID);
    [DispIdAttribute("-4")]
public abstract virtual IEnumerator GetEnumerator();
    [ObsoleteAttribute("AddIn related extension points are no longer supported in Visual Studio.")]
[DispIdAttribute("11")]
public abstract virtual Command AddNamedCommand(AddIn AddInInstance, string Name, string ButtonText, string Tooltip, bool MSOButton, int Bitmap, Object[]& ContextUIGUIDs, int vsCommandDisabledFlagsValue);
    [DispIdAttribute("12")]
public abstract virtual object AddCommandBar(string Name, vsCommandBarType Type, object CommandBarParent, int Position);
    [DispIdAttribute("13")]
public abstract virtual void RemoveCommandBar(object CommandBar);
}
[GuidAttribute("509B9955-7303-48C9-90D4-E165B974E6BA")]
public interface EnvDTE.CommandWindow {
    [DispIdAttribute("1")]
public DTE DTE { get; }
    [DispIdAttribute("2")]
public Window Parent { get; }
    [DispIdAttribute("6")]
public TextDocument TextDocument { get; }
    [DispIdAttribute("1")]
public abstract virtual DTE get_DTE();
    [DispIdAttribute("2")]
public abstract virtual Window get_Parent();
    [DispIdAttribute("3")]
public abstract virtual void SendInput(string Command, bool Execute);
    [DispIdAttribute("4")]
public abstract virtual void OutputString(string Text);
    [DispIdAttribute("5")]
public abstract virtual void Clear();
    [DispIdAttribute("6")]
public abstract virtual TextDocument get_TextDocument();
}
[GuidAttribute("90813589-FE21-4AA4-A2E5-053FD274E980")]
[TypeLibTypeAttribute("4160")]
public interface EnvDTE.Configuration {
    [DispIdAttribute("1")]
public DTE DTE { get; }
    [DispIdAttribute("2")]
public ConfigurationManager Collection { get; }
    [DispIdAttribute("3")]
public string ConfigurationName { get; }
    [DispIdAttribute("4")]
public string PlatformName { get; }
    [DispIdAttribute("5")]
public vsConfigurationType Type { get; }
    [DispIdAttribute("6")]
public object Owner { get; }
    [DispIdAttribute("7")]
public Properties Properties { get; }
    [DispIdAttribute("8")]
public bool IsBuildable { get; }
    [DispIdAttribute("9")]
public bool IsRunable { get; }
    [DispIdAttribute("10")]
public bool IsDeployable { get; }
    [DispIdAttribute("11")]
public object Object { get; }
    [DispIdAttribute("12")]
public object Extender { get; }
    [DispIdAttribute("13")]
public object ExtenderNames { get; }
    [DispIdAttribute("14")]
public string ExtenderCATID { get; }
    [DispIdAttribute("15")]
public OutputGroups OutputGroups { get; }
    [DispIdAttribute("1")]
public abstract virtual DTE get_DTE();
    [DispIdAttribute("2")]
public abstract virtual ConfigurationManager get_Collection();
    [DispIdAttribute("3")]
public abstract virtual string get_ConfigurationName();
    [DispIdAttribute("4")]
public abstract virtual string get_PlatformName();
    [DispIdAttribute("5")]
public abstract virtual vsConfigurationType get_Type();
    [DispIdAttribute("6")]
public abstract virtual object get_Owner();
    [DispIdAttribute("7")]
public abstract virtual Properties get_Properties();
    [DispIdAttribute("8")]
public abstract virtual bool get_IsBuildable();
    [DispIdAttribute("9")]
public abstract virtual bool get_IsRunable();
    [DispIdAttribute("10")]
public abstract virtual bool get_IsDeployable();
    [DispIdAttribute("11")]
public abstract virtual object get_Object();
    [TypeLibFuncAttribute("1024")]
[DispIdAttribute("12")]
public abstract virtual object get_Extender(string ExtenderName);
    [TypeLibFuncAttribute("1024")]
[DispIdAttribute("13")]
public abstract virtual object get_ExtenderNames();
    [DispIdAttribute("14")]
[TypeLibFuncAttribute("1024")]
public abstract virtual string get_ExtenderCATID();
    [DispIdAttribute("15")]
public abstract virtual OutputGroups get_OutputGroups();
}
[GuidAttribute("9043FDA1-345B-4364-900F-BC8598EB8E4F")]
[DefaultMemberAttribute("Item")]
public interface EnvDTE.ConfigurationManager {
    [DispIdAttribute("1")]
public DTE DTE { get; }
    [DispIdAttribute("2")]
public object Parent { get; }
    [DispIdAttribute("3")]
public int Count { get; }
    [DispIdAttribute("7")]
public object ConfigurationRowNames { get; }
    [DispIdAttribute("11")]
public object PlatformNames { get; }
    [DispIdAttribute("12")]
public object SupportedPlatforms { get; }
    [DispIdAttribute("13")]
public Configuration ActiveConfiguration { get; }
    [DispIdAttribute("1")]
public abstract virtual DTE get_DTE();
    [DispIdAttribute("2")]
public abstract virtual object get_Parent();
    [DispIdAttribute("-4")]
public abstract virtual IEnumerator GetEnumerator();
    [DispIdAttribute("0")]
public abstract virtual Configuration Item(object index, string Platform);
    [DispIdAttribute("3")]
public abstract virtual int get_Count();
    [DispIdAttribute("4")]
public abstract virtual Configurations ConfigurationRow(string Name);
    [DispIdAttribute("5")]
public abstract virtual Configurations AddConfigurationRow(string NewName, string ExistingName, bool Propagate);
    [DispIdAttribute("6")]
public abstract virtual void DeleteConfigurationRow(string Name);
    [DispIdAttribute("7")]
public abstract virtual object get_ConfigurationRowNames();
    [DispIdAttribute("8")]
public abstract virtual Configurations Platform(string Name);
    [DispIdAttribute("9")]
public abstract virtual Configurations AddPlatform(string NewName, string ExistingName, bool Propagate);
    [DispIdAttribute("10")]
public abstract virtual void DeletePlatform(string Name);
    [DispIdAttribute("11")]
public abstract virtual object get_PlatformNames();
    [DispIdAttribute("12")]
public abstract virtual object get_SupportedPlatforms();
    [DispIdAttribute("13")]
public abstract virtual Configuration get_ActiveConfiguration();
}
[DefaultMemberAttribute("Item")]
[GuidAttribute("B6B4C8D6-4D27-43B9-B45C-52BD16B6BA38")]
public interface EnvDTE.Configurations {
    [DispIdAttribute("1")]
public DTE DTE { get; }
    [DispIdAttribute("2")]
public object Parent { get; }
    [DispIdAttribute("3")]
public int Count { get; }
    [DispIdAttribute("4")]
public string Name { get; }
    [DispIdAttribute("5")]
public vsConfigurationType Type { get; }
    [DispIdAttribute("1")]
public abstract virtual DTE get_DTE();
    [DispIdAttribute("2")]
public abstract virtual object get_Parent();
    [DispIdAttribute("-4")]
public abstract virtual IEnumerator GetEnumerator();
    [DispIdAttribute("0")]
public abstract virtual Configuration Item(object index);
    [DispIdAttribute("3")]
public abstract virtual int get_Count();
    [DispIdAttribute("4")]
public abstract virtual string get_Name();
    [DispIdAttribute("5")]
public abstract virtual vsConfigurationType get_Type();
}
[GuidAttribute("B1AB3125-0744-4B46-AA7A-8902E36D2E15")]
public abstract class EnvDTE.Constants : object {
    public static string vsDocumentKindText;
    public static string vsDocumentKindHTML;
    public static string vsDocumentKindResource;
    public static string vsDocumentKindBinary;
    public static string vsViewKindPrimary;
    public static string vsViewKindAny;
    public static string vsViewKindDebugging;
    public static string vsViewKindCode;
    public static string vsViewKindDesigner;
    public static string vsViewKindTextView;
    public static string vsWindowKindTaskList;
    public static string vsWindowKindToolbox;
    public static string vsWindowKindCallStack;
    public static string vsWindowKindThread;
    public static string vsWindowKindLocals;
    public static string vsWindowKindAutoLocals;
    public static string vsWindowKindWatch;
    public static string vsWindowKindProperties;
    public static string vsWindowKindSolutionExplorer;
    public static string vsWindowKindOutput;
    public static string vsWindowKindObjectBrowser;
    public static string vsWindowKindMacroExplorer;
    public static string vsWindowKindDynamicHelp;
    public static string vsWindowKindClassView;
    public static string vsWindowKindResourceView;
    public static string vsWindowKindDocumentOutline;
    public static string vsWindowKindServerExplorer;
    public static string vsWindowKindCommandWindow;
    public static string vsWindowKindFindSymbol;
    public static string vsWindowKindFindSymbolResults;
    public static string vsWindowKindFindReplace;
    public static string vsWindowKindFindResults1;
    public static string vsWindowKindFindResults2;
    public static string vsWindowKindMainWindow;
    public static string vsWindowKindLinkedWindowFrame;
    public static string vsWindowKindWebBrowser;
    public static string vsWizardAddSubProject;
    public static string vsWizardAddItem;
    public static string vsWizardNewProject;
    public static string vsProjectKindMisc;
    public static string vsProjectItemsKindMisc;
    public static string vsProjectItemKindMisc;
    public static string vsProjectKindUnmodeled;
    public static string vsProjectKindSolutionItems;
    public static string vsProjectItemsKindSolutionItems;
    public static string vsProjectItemKindSolutionItems;
    public static string vsProjectsKindSolution;
    public static string vsAddInCmdGroup;
    public static string vsContextSolutionBuilding;
    public static string vsContextDebugging;
    public static string vsContextFullScreenMode;
    public static string vsContextDesignMode;
    public static string vsContextNoSolution;
    public static string vsContextEmptySolution;
    public static string vsContextSolutionHasSingleProject;
    public static string vsContextSolutionHasMultipleProjects;
    public static string vsContextMacroRecording;
    public static string vsContextMacroRecordingToolbar;
    public static string vsMiscFilesProjectUniqueName;
    public static string vsSolutionItemsProjectUniqueName;
    public static string vsProjectItemKindPhysicalFile;
    public static string vsProjectItemKindPhysicalFolder;
    public static string vsProjectItemKindVirtualFolder;
    public static string vsProjectItemKindSubProject;
    public static string vsext_vk_Primary;
    public static string vsext_vk_Debugging;
    public static string vsext_vk_Code;
    public static string vsext_vk_Designer;
    public static string vsext_vk_TextView;
    public static string vsext_wk_TaskList;
    public static string vsext_wk_Toolbox;
    public static string vsext_wk_CallStackWindow;
    public static string vsext_wk_ThreadWindow;
    public static string vsext_wk_LocalsWindow;
    public static string vsext_wk_AutoLocalsWindow;
    public static string vsext_wk_WatchWindow;
    public static string vsext_wk_ImmedWindow;
    public static string vsext_wk_PropertyBrowser;
    public static string vsext_wk_SProjectWindow;
    public static string vsext_wk_OutputWindow;
    public static string vsext_wk_ObjectBrowser;
    public static string vsext_wk_ContextWindow;
    public static string vsext_wk_ClassView;
    public static string vsext_GUID_AddItemWizard;
    public static string vsext_GUID_NewProjectWizard;
    public static string dsCPP;
    public static string dsHTML_IE3;
    public static string dsHTML_RFC1866;
    public static string dsFortran_Fixed;
    public static string dsFortran_Free;
    public static string dsJava;
    public static string dsVBSMacro;
    public static string dsIDL;
    public static string vsCATIDSolution;
    public static string vsCATIDSolutionBrowseObject;
    public static string vsCATIDMiscFilesProject;
    public static string vsCATIDMiscFilesProjectItem;
    public static string vsCATIDGenericProject;
    public static string vsCATIDDocument;
}
[GuidAttribute("1A6E2CB3-B897-42EB-96BE-FF0FDB65DB2F")]
[DefaultMemberAttribute("Name")]
public interface EnvDTE.ContextAttribute {
    [DispIdAttribute("0")]
public string Name { get; }
    [DispIdAttribute("1")]
public DTE DTE { get; }
    [DispIdAttribute("2")]
public ContextAttributes Collection { get; }
    [DispIdAttribute("3")]
public object Values { get; }
    [DispIdAttribute("0")]
public abstract virtual string get_Name();
    [DispIdAttribute("1")]
public abstract virtual DTE get_DTE();
    [DispIdAttribute("2")]
public abstract virtual ContextAttributes get_Collection();
    [DispIdAttribute("3")]
public abstract virtual object get_Values();
    [DispIdAttribute("4")]
public abstract virtual void Remove();
}
[DefaultMemberAttribute("Item")]
[GuidAttribute("33C5EBB8-244E-449D-9CEE-FAD70A774E59")]
public interface EnvDTE.ContextAttributes {
    [DispIdAttribute("1")]
public DTE DTE { get; }
    [DispIdAttribute("2")]
public object Parent { get; }
    [DispIdAttribute("3")]
public int Count { get; }
    [DispIdAttribute("5")]
public vsContextAttributes Type { get; }
    [DispIdAttribute("6")]
public ContextAttributes HighPriorityAttributes { get; }
    [DispIdAttribute("-4")]
public abstract virtual IEnumerator GetEnumerator();
    [DispIdAttribute("0")]
public abstract virtual ContextAttribute Item(object index);
    [DispIdAttribute("1")]
public abstract virtual DTE get_DTE();
    [DispIdAttribute("2")]
public abstract virtual object get_Parent();
    [DispIdAttribute("3")]
public abstract virtual int get_Count();
    [DispIdAttribute("4")]
public abstract virtual ContextAttribute Add(string AttributeName, string AttributeValue, vsContextAttributeType Type);
    [DispIdAttribute("5")]
public abstract virtual vsContextAttributes get_Type();
    [DispIdAttribute("6")]
public abstract virtual ContextAttributes get_HighPriorityAttributes();
    [DispIdAttribute("7")]
public abstract virtual void Refresh();
}
[GuidAttribute("2A594772-C146-11D2-8AD1-00C04F79E479")]
public enum EnvDTE.dbgBreakpointConditionType : Enum {
    public int value__;
    public static dbgBreakpointConditionType dbgBreakpointConditionTypeWhenTrue;
    public static dbgBreakpointConditionType dbgBreakpointConditionTypeWhenChanged;
}
[GuidAttribute("229C054C-C146-11D2-8AD1-00C04F79E479")]
public enum EnvDTE.dbgBreakpointLocationType : Enum {
    public int value__;
    public static dbgBreakpointLocationType dbgBreakpointLocationTypeNone;
    public static dbgBreakpointLocationType dbgBreakpointLocationTypeFunction;
    public static dbgBreakpointLocationType dbgBreakpointLocationTypeFile;
    public static dbgBreakpointLocationType dbgBreakpointLocationTypeData;
    public static dbgBreakpointLocationType dbgBreakpointLocationTypeAddress;
}
[GuidAttribute("75607DDE-2B43-11D3-B88B-00C04F79E479")]
public enum EnvDTE.dbgBreakpointType : Enum {
    public int value__;
    public static dbgBreakpointType dbgBreakpointTypePending;
    public static dbgBreakpointType dbgBreakpointTypeBound;
}
[GuidAttribute("E940C60A-C68F-11D2-8AD6-00C04F79E479")]
public enum EnvDTE.dbgDebugMode : Enum {
    public int value__;
    public static dbgDebugMode dbgDesignMode;
    public static dbgDebugMode dbgBreakMode;
    public static dbgDebugMode dbgRunMode;
}
[GuidAttribute("4106C580-C146-11D2-8AD1-00C04F79E479")]
public enum EnvDTE.dbgEventReason : Enum {
    public int value__;
    public static dbgEventReason dbgEventReasonNone;
    public static dbgEventReason dbgEventReasonGo;
    public static dbgEventReason dbgEventReasonAttachProgram;
    public static dbgEventReason dbgEventReasonDetachProgram;
    public static dbgEventReason dbgEventReasonLaunchProgram;
    public static dbgEventReason dbgEventReasonEndProgram;
    public static dbgEventReason dbgEventReasonStopDebugging;
    public static dbgEventReason dbgEventReasonStep;
    public static dbgEventReason dbgEventReasonBreakpoint;
    public static dbgEventReason dbgEventReasonExceptionThrown;
    public static dbgEventReason dbgEventReasonExceptionNotHandled;
    public static dbgEventReason dbgEventReasonUserBreak;
    public static dbgEventReason dbgEventReasonContextSwitch;
}
[GuidAttribute("ED2FBDD2-1EB1-11D3-B888-00C04F79E479")]
public enum EnvDTE.dbgExceptionAction : Enum {
    public int value__;
    public static dbgExceptionAction dbgExceptionActionDefault;
    public static dbgExceptionAction dbgExceptionActionIgnore;
    public static dbgExceptionAction dbgExceptionActionBreak;
    public static dbgExceptionAction dbgExceptionActionContinue;
}
[GuidAttribute("77940E85-BCE0-443D-8B77-F5BD841A211E")]
public enum EnvDTE.dbgExecutionAction : Enum {
    public int value__;
    public static dbgExecutionAction dbgExecutionActionDefault;
    public static dbgExecutionAction dbgExecutionActionGo;
    public static dbgExecutionAction dbgExecutionActionStopDebugging;
    public static dbgExecutionAction dbgExecutionActionStepInto;
    public static dbgExecutionAction dbgExecutionActionStepOut;
    public static dbgExecutionAction dbgExecutionActionStepOver;
    public static dbgExecutionAction dbgExecutionActionRunToCursor;
}
[GuidAttribute("3A3329CE-C146-11D2-8AD1-00C04F79E479")]
public enum EnvDTE.dbgHitCountType : Enum {
    public int value__;
    public static dbgHitCountType dbgHitCountTypeNone;
    public static dbgHitCountType dbgHitCountTypeEqual;
    public static dbgHitCountType dbgHitCountTypeGreaterOrEqual;
    public static dbgHitCountType dbgHitCountTypeMultiple;
}
[GuidAttribute("338FB9A0-BAE5-11D2-8AD1-00C04F79E479")]
public interface EnvDTE.Debugger {
    [DispIdAttribute("100")]
public Breakpoints Breakpoints { get; }
    [DispIdAttribute("101")]
public Languages Languages { get; }
    [DispIdAttribute("102")]
public dbgDebugMode CurrentMode { get; }
    [DispIdAttribute("103")]
public Process CurrentProcess { get; public set; }
    [DispIdAttribute("104")]
public Program CurrentProgram { get; public set; }
    [DispIdAttribute("105")]
public Thread CurrentThread { get; public set; }
    [DispIdAttribute("106")]
public StackFrame CurrentStackFrame { get; public set; }
    [DispIdAttribute("107")]
public bool HexDisplayMode { get; public set; }
    [DispIdAttribute("108")]
public bool HexInputMode { get; public set; }
    [DispIdAttribute("109")]
public dbgEventReason LastBreakReason { get; }
    [DispIdAttribute("110")]
public Breakpoint BreakpointLastHit { get; }
    [DispIdAttribute("111")]
public Breakpoints AllBreakpointsLastHit { get; }
    [DispIdAttribute("112")]
public Processes DebuggedProcesses { get; }
    [DispIdAttribute("113")]
public Processes LocalProcesses { get; }
    [DispIdAttribute("200")]
public DTE DTE { get; }
    [DispIdAttribute("201")]
public DTE Parent { get; }
    [DispIdAttribute("1")]
public abstract virtual Expression GetExpression(string ExpressionText, bool UseAutoExpandRules, int Timeout);
    [DispIdAttribute("2")]
public abstract virtual void DetachAll();
    [DispIdAttribute("3")]
public abstract virtual void StepInto(bool WaitForBreakOrEnd);
    [DispIdAttribute("4")]
public abstract virtual void StepOver(bool WaitForBreakOrEnd);
    [DispIdAttribute("5")]
public abstract virtual void StepOut(bool WaitForBreakOrEnd);
    [DispIdAttribute("6")]
public abstract virtual void Go(bool WaitForBreakOrEnd);
    [DispIdAttribute("7")]
public abstract virtual void Break(bool WaitForBreakMode);
    [DispIdAttribute("8")]
public abstract virtual void Stop(bool WaitForDesignMode);
    [DispIdAttribute("9")]
public abstract virtual void SetNextStatement();
    [DispIdAttribute("10")]
public abstract virtual void RunToCursor(bool WaitForBreakOrEnd);
    [DispIdAttribute("11")]
public abstract virtual void ExecuteStatement(string Statement, int Timeout, bool TreatAsExpression);
    [DispIdAttribute("100")]
public abstract virtual Breakpoints get_Breakpoints();
    [DispIdAttribute("101")]
public abstract virtual Languages get_Languages();
    [DispIdAttribute("102")]
public abstract virtual dbgDebugMode get_CurrentMode();
    [DispIdAttribute("103")]
public abstract virtual Process get_CurrentProcess();
    [DispIdAttribute("103")]
public abstract virtual void set_CurrentProcess(Process value);
    [DispIdAttribute("104")]
public abstract virtual Program get_CurrentProgram();
    [DispIdAttribute("104")]
public abstract virtual void set_CurrentProgram(Program value);
    [DispIdAttribute("105")]
public abstract virtual Thread get_CurrentThread();
    [DispIdAttribute("105")]
public abstract virtual void set_CurrentThread(Thread value);
    [DispIdAttribute("106")]
public abstract virtual StackFrame get_CurrentStackFrame();
    [DispIdAttribute("106")]
public abstract virtual void set_CurrentStackFrame(StackFrame value);
    [DispIdAttribute("107")]
public abstract virtual bool get_HexDisplayMode();
    [DispIdAttribute("107")]
public abstract virtual void set_HexDisplayMode(bool value);
    [DispIdAttribute("108")]
public abstract virtual bool get_HexInputMode();
    [DispIdAttribute("108")]
public abstract virtual void set_HexInputMode(bool value);
    [DispIdAttribute("109")]
public abstract virtual dbgEventReason get_LastBreakReason();
    [DispIdAttribute("110")]
public abstract virtual Breakpoint get_BreakpointLastHit();
    [DispIdAttribute("111")]
public abstract virtual Breakpoints get_AllBreakpointsLastHit();
    [DispIdAttribute("112")]
public abstract virtual Processes get_DebuggedProcesses();
    [DispIdAttribute("113")]
public abstract virtual Processes get_LocalProcesses();
    [DispIdAttribute("200")]
public abstract virtual DTE get_DTE();
    [DispIdAttribute("201")]
public abstract virtual DTE get_Parent();
    [DispIdAttribute("300")]
public abstract virtual void TerminateAll();
}
[ComVisibleAttribute("False")]
[GuidAttribute("D4EAE958-0FBA-11D3-B880-00C04F79E479")]
[CoClassAttribute("EnvDTE.DebuggerEventsClass")]
public interface EnvDTE.DebuggerEvents {
}
[ComVisibleAttribute("False")]
[GuidAttribute("0C763210-0FBB-11D3-B880-00C04F79E479")]
[ComSourceInterfacesAttribute("EnvDTE._dispDebuggerEvents")]
[ClassInterfaceAttribute("0")]
public class EnvDTE.DebuggerEventsClass : object {
}
[TypeLibTypeAttribute("4160")]
[DefaultMemberAttribute("Name")]
[GuidAttribute("63EB5C39-CA8F-498E-9A66-6DD4A27AC95B")]
public interface EnvDTE.Document {
    [DispIdAttribute("100")]
public DTE DTE { get; }
    [DispIdAttribute("141")]
public string Kind { get; }
    [DispIdAttribute("101")]
public Documents Collection { get; }
    [DispIdAttribute("102")]
public Window ActiveWindow { get; }
    [DispIdAttribute("103")]
public string FullName { get; }
    [DispIdAttribute("0")]
public string Name { get; }
    [DispIdAttribute("105")]
public string Path { get; }
    [DispIdAttribute("106")]
public bool ReadOnly { get; public set; }
    [DispIdAttribute("107")]
public bool Saved { get; public set; }
    [DispIdAttribute("109")]
public Windows Windows { get; }
    [DispIdAttribute("110")]
public ProjectItem ProjectItem { get; }
    [DispIdAttribute("131")]
public object Selection { get; }
    [DispIdAttribute("133")]
public object Extender { get; }
    [DispIdAttribute("134")]
public object ExtenderNames { get; }
    [DispIdAttribute("135")]
public string ExtenderCATID { get; }
    [DispIdAttribute("142")]
public int IndentSize { get; }
    [DispIdAttribute("144")]
public string Language { get; public set; }
    [DispIdAttribute("147")]
public int TabSize { get; }
    [DispIdAttribute("149")]
public string Type { get; }
    [DispIdAttribute("100")]
public abstract virtual DTE get_DTE();
    [DispIdAttribute("141")]
public abstract virtual string get_Kind();
    [DispIdAttribute("101")]
public abstract virtual Documents get_Collection();
    [DispIdAttribute("102")]
public abstract virtual Window get_ActiveWindow();
    [DispIdAttribute("103")]
public abstract virtual string get_FullName();
    [DispIdAttribute("0")]
public abstract virtual string get_Name();
    [DispIdAttribute("105")]
public abstract virtual string get_Path();
    [DispIdAttribute("106")]
public abstract virtual bool get_ReadOnly();
    [DispIdAttribute("107")]
public abstract virtual bool get_Saved();
    [DispIdAttribute("107")]
public abstract virtual void set_Saved(bool pRetval);
    [DispIdAttribute("109")]
public abstract virtual Windows get_Windows();
    [DispIdAttribute("110")]
public abstract virtual ProjectItem get_ProjectItem();
    [DispIdAttribute("121")]
public abstract virtual void Activate();
    [DispIdAttribute("123")]
public abstract virtual void Close(vsSaveChanges Save);
    [DispIdAttribute("125")]
public abstract virtual Window NewWindow();
    [DispIdAttribute("127")]
public abstract virtual bool Redo();
    [DispIdAttribute("128")]
public abstract virtual bool Undo();
    [DispIdAttribute("129")]
public abstract virtual vsSaveStatus Save(string FileName);
    [DispIdAttribute("131")]
public abstract virtual object get_Selection();
    [DispIdAttribute("132")]
public abstract virtual object Object(string ModelKind);
    [TypeLibFuncAttribute("1024")]
[DispIdAttribute("133")]
public abstract virtual object get_Extender(string ExtenderName);
    [DispIdAttribute("134")]
[TypeLibFuncAttribute("1024")]
public abstract virtual object get_ExtenderNames();
    [DispIdAttribute("135")]
[TypeLibFuncAttribute("1024")]
public abstract virtual string get_ExtenderCATID();
    [TypeLibFuncAttribute("64")]
[DispIdAttribute("126")]
public abstract virtual void PrintOut();
    [TypeLibFuncAttribute("64")]
[DispIdAttribute("142")]
public abstract virtual int get_IndentSize();
    [TypeLibFuncAttribute("64")]
[DispIdAttribute("144")]
public abstract virtual string get_Language();
    [DispIdAttribute("144")]
[TypeLibFuncAttribute("64")]
public abstract virtual void set_Language(string pLanguage);
    [DispIdAttribute("106")]
[TypeLibFuncAttribute("64")]
public abstract virtual void set_ReadOnly(bool pRetval);
    [DispIdAttribute("147")]
[TypeLibFuncAttribute("64")]
public abstract virtual int get_TabSize();
    [TypeLibFuncAttribute("64")]
[DispIdAttribute("122")]
public abstract virtual void ClearBookmarks();
    [DispIdAttribute("124")]
[TypeLibFuncAttribute("64")]
public abstract virtual bool MarkText(string Pattern, int Flags);
    [TypeLibFuncAttribute("64")]
[DispIdAttribute("21")]
public abstract virtual bool ReplaceText(string FindText, string ReplaceText, int Flags);
    [DispIdAttribute("149")]
[TypeLibFuncAttribute("64")]
public abstract virtual string get_Type();
}
[ComVisibleAttribute("False")]
[GuidAttribute("DC5437F5-F114-11D2-AACF-00C04F688DDE")]
[CoClassAttribute("EnvDTE.DocumentEventsClass")]
public interface EnvDTE.DocumentEvents {
}
[ComVisibleAttribute("False")]
[GuidAttribute("DC5437F7-F114-11D2-AACF-00C04F688DDE")]
[ClassInterfaceAttribute("0")]
[ComSourceInterfacesAttribute("EnvDTE._dispDocumentEvents")]
public class EnvDTE.DocumentEventsClass : object {
}
[GuidAttribute("9E2CF3EA-140F-413E-BD4B-7D46740CD2F4")]
[DefaultMemberAttribute("Item")]
public interface EnvDTE.Documents {
    [DispIdAttribute("100")]
public DTE DTE { get; }
    [DispIdAttribute("101")]
public DTE Parent { get; }
    [DispIdAttribute("3")]
public int Count { get; }
    [DispIdAttribute("100")]
public abstract virtual DTE get_DTE();
    [DispIdAttribute("101")]
public abstract virtual DTE get_Parent();
    [DispIdAttribute("-4")]
public abstract virtual IEnumerator GetEnumerator();
    [DispIdAttribute("0")]
public abstract virtual Document Item(object index);
    [DispIdAttribute("3")]
public abstract virtual int get_Count();
    [DispIdAttribute("4")]
public abstract virtual Document Add(string Kind);
    [DispIdAttribute("5")]
public abstract virtual void CloseAll(vsSaveChanges Save);
    [DispIdAttribute("6")]
public abstract virtual void SaveAll();
    [DispIdAttribute("7")]
public abstract virtual Document Open(string PathName, string Kind, bool ReadOnly);
}
[GuidAttribute("F7D38518-E803-4462-8FA2-E481642D42FB")]
public enum EnvDTE.DsCaseOptions : Enum {
    public int value__;
    public static DsCaseOptions dsLowercase;
    public static DsCaseOptions dsUppercase;
    public static DsCaseOptions dsCapitalize;
}
[GuidAttribute("6269C78D-5591-40D6-A095-5BAC8BA07478")]
public enum EnvDTE.DsGoToLineOptions : Enum {
    public int value__;
    public static DsGoToLineOptions dsLastLine;
}
[GuidAttribute("4B58F807-6F08-4B41-ABAF-B5BCA4869D2C")]
public enum EnvDTE.DsMovementOptions : Enum {
    public int value__;
    public static DsMovementOptions dsMove;
    public static DsMovementOptions dsExtend;
}
[GuidAttribute("99744EC4-7A72-11D2-ADC9-00C04F7971C3")]
public enum EnvDTE.DsSaveChanges : Enum {
    public int value__;
    public static DsSaveChanges dsSaveChangesYes;
    public static DsSaveChanges dsSaveChangesNo;
    public static DsSaveChanges dsSaveChangesPrompt;
}
[GuidAttribute("8D78B9A9-A3BE-49D0-AA97-BF7FA46D8EA2")]
public enum EnvDTE.dsSaveStatus : Enum {
    public int value__;
    public static dsSaveStatus dsSaveCancelled;
    public static dsSaveStatus dsSaveSucceeded;
}
[GuidAttribute("95751137-AC07-4C76-A219-4BE5D381985D")]
public enum EnvDTE.DsStartOfLineOptions : Enum {
    public int value__;
    public static DsStartOfLineOptions dsFirstColumn;
    public static DsStartOfLineOptions dsFirstText;
}
[GuidAttribute("BDBE10AA-74D3-498A-A464-8074CD5E99CB")]
public enum EnvDTE.DsTextSearchOptions : Enum {
    public int value__;
    public static DsTextSearchOptions dsMatchWord;
    public static DsTextSearchOptions dsMatchCase;
    public static DsTextSearchOptions dsMatchNoRegExp;
    public static DsTextSearchOptions dsMatchRegExp;
    public static DsTextSearchOptions dsMatchRegExpB;
    public static DsTextSearchOptions dsMatchRegExpE;
    public static DsTextSearchOptions dsMatchRegExpCur;
    public static DsTextSearchOptions dsMatchForward;
    public static DsTextSearchOptions dsMatchBackward;
    public static DsTextSearchOptions dsMatchFromStart;
}
[GuidAttribute("31445615-BCAE-4BA0-A99C-246BC660CFE8")]
public enum EnvDTE.DsWhitespaceOptions : Enum {
    public int value__;
    public static DsWhitespaceOptions dsHorizontal;
    public static DsWhitespaceOptions dsVertical;
}
[DefaultMemberAttribute("Name")]
[GuidAttribute("04A72314-32E9-48E2-9B87-A63603454F3E")]
[TypeLibTypeAttribute("4160")]
public interface EnvDTE.DTE {
    [DispIdAttribute("0")]
public string Name { get; }
    [DispIdAttribute("10")]
public string FileName { get; }
    [DispIdAttribute("100")]
public string Version { get; }
    [DispIdAttribute("108")]
public object CommandBars { get; }
    [DispIdAttribute("110")]
public Windows Windows { get; }
    [DispIdAttribute("111")]
public Events Events { get; }
    [ObsoleteAttribute("AddIn related extension points are no longer supported in Visual Studio.")]
[DispIdAttribute("200")]
public AddIns AddIns { get; }
    [DispIdAttribute("204")]
public Window MainWindow { get; }
    [DispIdAttribute("205")]
public Window ActiveWindow { get; }
    [DispIdAttribute("208")]
public vsDisplay DisplayMode { get; public set; }
    [DispIdAttribute("209")]
public Solution Solution { get; }
    [DispIdAttribute("210")]
public Commands Commands { get; }
    [DispIdAttribute("212")]
public Properties Properties { get; }
    [DispIdAttribute("213")]
public SelectedItems SelectedItems { get; }
    [DispIdAttribute("214")]
public string CommandLineArguments { get; }
    [DispIdAttribute("216")]
public bool IsOpenFile { get; }
    [DispIdAttribute("217")]
public DTE DTE { get; }
    [DispIdAttribute("218")]
public int LocaleID { get; }
    [DispIdAttribute("219")]
public WindowConfigurations WindowConfigurations { get; }
    [DispIdAttribute("220")]
public Documents Documents { get; }
    [DispIdAttribute("221")]
public Document ActiveDocument { get; }
    [DispIdAttribute("223")]
public Globals Globals { get; }
    [DispIdAttribute("225")]
public StatusBar StatusBar { get; }
    [DispIdAttribute("226")]
public string FullName { get; }
    [DispIdAttribute("227")]
public bool UserControl { get; public set; }
    [DispIdAttribute("228")]
public ObjectExtenders ObjectExtenders { get; }
    [DispIdAttribute("229")]
public Find Find { get; }
    [DispIdAttribute("230")]
public vsIDEMode Mode { get; }
    [DispIdAttribute("233")]
public ItemOperations ItemOperations { get; }
    [DispIdAttribute("235")]
public UndoContext UndoContext { get; }
    [DispIdAttribute("236")]
public Macros Macros { get; }
    [DispIdAttribute("237")]
public object ActiveSolutionProjects { get; }
    [DispIdAttribute("238")]
public DTE MacrosIDE { get; }
    [DispIdAttribute("239")]
public string RegistryRoot { get; }
    [DispIdAttribute("240")]
public DTE Application { get; }
    [DispIdAttribute("241")]
public ContextAttributes ContextAttributes { get; }
    [DispIdAttribute("242")]
public SourceControl SourceControl { get; }
    [DispIdAttribute("243")]
public bool SuppressUI { get; public set; }
    [DispIdAttribute("244")]
public Debugger Debugger { get; }
    [DispIdAttribute("246")]
public string Edition { get; }
    [DispIdAttribute("0")]
public abstract virtual string get_Name();
    [DispIdAttribute("10")]
[TypeLibFuncAttribute("64")]
public abstract virtual string get_FileName();
    [DispIdAttribute("100")]
public abstract virtual string get_Version();
    [DispIdAttribute("108")]
public abstract virtual object get_CommandBars();
    [DispIdAttribute("110")]
public abstract virtual Windows get_Windows();
    [DispIdAttribute("111")]
public abstract virtual Events get_Events();
    [DispIdAttribute("200")]
[ObsoleteAttribute("AddIn related extension points are no longer supported in Visual Studio.")]
public abstract virtual AddIns get_AddIns();
    [DispIdAttribute("204")]
public abstract virtual Window get_MainWindow();
    [DispIdAttribute("205")]
public abstract virtual Window get_ActiveWindow();
    [DispIdAttribute("207")]
public abstract virtual void Quit();
    [DispIdAttribute("208")]
public abstract virtual vsDisplay get_DisplayMode();
    [DispIdAttribute("208")]
public abstract virtual void set_DisplayMode(vsDisplay lpDispMode);
    [DispIdAttribute("209")]
public abstract virtual Solution get_Solution();
    [DispIdAttribute("210")]
public abstract virtual Commands get_Commands();
    [DispIdAttribute("211")]
public abstract virtual object GetObject(string Name);
    [DispIdAttribute("212")]
public abstract virtual Properties get_Properties(string Category, string Page);
    [DispIdAttribute("213")]
public abstract virtual SelectedItems get_SelectedItems();
    [DispIdAttribute("214")]
public abstract virtual string get_CommandLineArguments();
    [DispIdAttribute("215")]
[TypeLibFuncAttribute("64")]
public abstract virtual Window OpenFile(string ViewKind, string FileName);
    [DispIdAttribute("216")]
[TypeLibFuncAttribute("64")]
public abstract virtual bool get_IsOpenFile(string ViewKind, string FileName);
    [DispIdAttribute("217")]
public abstract virtual DTE get_DTE();
    [DispIdAttribute("218")]
public abstract virtual int get_LocaleID();
    [DispIdAttribute("219")]
public abstract virtual WindowConfigurations get_WindowConfigurations();
    [DispIdAttribute("220")]
public abstract virtual Documents get_Documents();
    [DispIdAttribute("221")]
public abstract virtual Document get_ActiveDocument();
    [DispIdAttribute("222")]
public abstract virtual void ExecuteCommand(string CommandName, string CommandArgs);
    [DispIdAttribute("223")]
public abstract virtual Globals get_Globals();
    [DispIdAttribute("225")]
public abstract virtual StatusBar get_StatusBar();
    [DispIdAttribute("226")]
public abstract virtual string get_FullName();
    [DispIdAttribute("227")]
public abstract virtual bool get_UserControl();
    [DispIdAttribute("227")]
public abstract virtual void set_UserControl(bool UserControl);
    [DispIdAttribute("228")]
public abstract virtual ObjectExtenders get_ObjectExtenders();
    [DispIdAttribute("229")]
public abstract virtual Find get_Find();
    [DispIdAttribute("230")]
public abstract virtual vsIDEMode get_Mode();
    [DispIdAttribute("232")]
public abstract virtual wizardResult LaunchWizard(string VSZFile, Object[]& ContextParams);
    [DispIdAttribute("233")]
public abstract virtual ItemOperations get_ItemOperations();
    [DispIdAttribute("235")]
public abstract virtual UndoContext get_UndoContext();
    [DispIdAttribute("236")]
public abstract virtual Macros get_Macros();
    [DispIdAttribute("237")]
public abstract virtual object get_ActiveSolutionProjects();
    [DispIdAttribute("238")]
public abstract virtual DTE get_MacrosIDE();
    [DispIdAttribute("239")]
public abstract virtual string get_RegistryRoot();
    [TypeLibFuncAttribute("64")]
[DispIdAttribute("240")]
public abstract virtual DTE get_Application();
    [DispIdAttribute("241")]
public abstract virtual ContextAttributes get_ContextAttributes();
    [DispIdAttribute("242")]
public abstract virtual SourceControl get_SourceControl();
    [DispIdAttribute("243")]
public abstract virtual bool get_SuppressUI();
    [DispIdAttribute("243")]
public abstract virtual void set_SuppressUI(bool pVal);
    [DispIdAttribute("244")]
public abstract virtual Debugger get_Debugger();
    [DispIdAttribute("245")]
public abstract virtual string SatelliteDllPath(string Path, string Name);
    [DispIdAttribute("246")]
public abstract virtual string get_Edition();
}
[ComVisibleAttribute("False")]
[ClassInterfaceAttribute("0")]
[GuidAttribute("3C9CFE1E-389F-4118-9FAD-365385190329")]
[DefaultMemberAttribute("Name")]
public class EnvDTE.DTEClass : object {
}
[ComVisibleAttribute("False")]
[CoClassAttribute("EnvDTE.DTEEventsClass")]
[GuidAttribute("FA1BB6D7-CA83-11D2-AAB2-00C04F688DDE")]
public interface EnvDTE.DTEEvents {
}
[GuidAttribute("C6304BAB-6765-4C63-9017-4940AEB6F207")]
[ClassInterfaceAttribute("0")]
[ComVisibleAttribute("False")]
[ComSourceInterfacesAttribute("EnvDTE._dispDTEEvents")]
public class EnvDTE.DTEEventsClass : object {
}
[GuidAttribute("C1FFE800-028B-4475-A907-14F51F19BB7D")]
[TypeLibTypeAttribute("4160")]
public interface EnvDTE.EditPoint {
    [DispIdAttribute("1")]
public DTE DTE { get; }
    [DispIdAttribute("2")]
public TextDocument Parent { get; }
    [DispIdAttribute("11")]
public int Line { get; }
    [DispIdAttribute("12")]
public int LineCharOffset { get; }
    [DispIdAttribute("13")]
public int AbsoluteCharOffset { get; }
    [DispIdAttribute("14")]
public int DisplayColumn { get; }
    [DispIdAttribute("21")]
public bool AtEndOfDocument { get; }
    [DispIdAttribute("22")]
public bool AtStartOfDocument { get; }
    [DispIdAttribute("23")]
public bool AtEndOfLine { get; }
    [DispIdAttribute("24")]
public bool AtStartOfLine { get; }
    [DispIdAttribute("25")]
public int LineLength { get; }
    [DispIdAttribute("51")]
public CodeElement CodeElement { get; }
    [DispIdAttribute("1")]
public abstract virtual DTE get_DTE();
    [DispIdAttribute("2")]
public abstract virtual TextDocument get_Parent();
    [DispIdAttribute("11")]
public abstract virtual int get_Line();
    [DispIdAttribute("12")]
public abstract virtual int get_LineCharOffset();
    [DispIdAttribute("13")]
public abstract virtual int get_AbsoluteCharOffset();
    [DispIdAttribute("14")]
public abstract virtual int get_DisplayColumn();
    [DispIdAttribute("21")]
public abstract virtual bool get_AtEndOfDocument();
    [DispIdAttribute("22")]
public abstract virtual bool get_AtStartOfDocument();
    [DispIdAttribute("23")]
public abstract virtual bool get_AtEndOfLine();
    [DispIdAttribute("24")]
public abstract virtual bool get_AtStartOfLine();
    [DispIdAttribute("25")]
public abstract virtual int get_LineLength();
    [DispIdAttribute("31")]
public abstract virtual bool EqualTo(TextPoint Point);
    [DispIdAttribute("32")]
public abstract virtual bool LessThan(TextPoint Point);
    [DispIdAttribute("33")]
public abstract virtual bool GreaterThan(TextPoint Point);
    [DispIdAttribute("50")]
public abstract virtual bool TryToShow(vsPaneShowHow How, object PointOrCount);
    [DispIdAttribute("51")]
public abstract virtual CodeElement get_CodeElement(vsCMElement Scope);
    [DispIdAttribute("34")]
public abstract virtual EditPoint CreateEditPoint();
    [DispIdAttribute("101")]
public abstract virtual void CharLeft(int Count);
    [DispIdAttribute("102")]
public abstract virtual void CharRight(int Count);
    [DispIdAttribute("103")]
public abstract virtual void EndOfLine();
    [DispIdAttribute("104")]
public abstract virtual void StartOfLine();
    [DispIdAttribute("105")]
public abstract virtual void EndOfDocument();
    [DispIdAttribute("106")]
public abstract virtual void StartOfDocument();
    [DispIdAttribute("107")]
public abstract virtual void WordLeft(int Count);
    [DispIdAttribute("108")]
public abstract virtual void WordRight(int Count);
    [DispIdAttribute("109")]
public abstract virtual void LineUp(int Count);
    [DispIdAttribute("110")]
public abstract virtual void LineDown(int Count);
    [DispIdAttribute("170")]
public abstract virtual void MoveToPoint(TextPoint Point);
    [DispIdAttribute("171")]
public abstract virtual void MoveToLineAndOffset(int Line, int Offset);
    [DispIdAttribute("172")]
public abstract virtual void MoveToAbsoluteOffset(int Offset);
    [DispIdAttribute("121")]
public abstract virtual void SetBookmark();
    [DispIdAttribute("122")]
public abstract virtual void ClearBookmark();
    [DispIdAttribute("123")]
public abstract virtual bool NextBookmark();
    [DispIdAttribute("124")]
public abstract virtual bool PreviousBookmark();
    [DispIdAttribute("131")]
public abstract virtual void PadToColumn(int Column);
    [DispIdAttribute("132")]
public abstract virtual void Insert(string Text);
    [DispIdAttribute("133")]
public abstract virtual void InsertFromFile(string File);
    [DispIdAttribute("134")]
public abstract virtual string GetText(object PointOrCount);
    [DispIdAttribute("173")]
public abstract virtual string GetLines(int Start, int ExclusiveEnd);
    [DispIdAttribute("136")]
public abstract virtual void Copy(object PointOrCount, bool Append);
    [DispIdAttribute("137")]
public abstract virtual void Cut(object PointOrCount, bool Append);
    [DispIdAttribute("135")]
public abstract virtual void Delete(object PointOrCount);
    [DispIdAttribute("138")]
public abstract virtual void Paste();
    [DispIdAttribute("139")]
public abstract virtual bool ReadOnly(object PointOrCount);
    [DispIdAttribute("151")]
public abstract virtual bool FindPattern(string Pattern, int vsFindOptionsValue, EditPoint& EndPoint, TextRanges& Tags);
    [DispIdAttribute("152")]
public abstract virtual bool ReplacePattern(TextPoint Point, string Pattern, string Replace, int vsFindOptionsValue, TextRanges& Tags);
    [DispIdAttribute("161")]
public abstract virtual void Indent(TextPoint Point, int Count);
    [DispIdAttribute("162")]
public abstract virtual void Unindent(TextPoint Point, int Count);
    [DispIdAttribute("163")]
public abstract virtual void SmartFormat(TextPoint Point);
    [DispIdAttribute("167")]
public abstract virtual void OutlineSection(object PointOrCount);
    [DispIdAttribute("164")]
public abstract virtual void ReplaceText(object PointOrCount, string Text, int Flags);
    [DispIdAttribute("165")]
public abstract virtual void ChangeCase(object PointOrCount, vsCaseOptions How);
    [DispIdAttribute("166")]
public abstract virtual void DeleteWhitespace(vsWhitespaceOptions Direction);
}
[GuidAttribute("134170F8-93B1-42DD-9F89-A2AC7010BA07")]
[TypeLibTypeAttribute("4160")]
public interface EnvDTE.Events {
    [DispIdAttribute("205")]
public CommandBarEvents CommandBarEvents { get; }
    [DispIdAttribute("300")]
public CommandEvents CommandEvents { get; }
    [DispIdAttribute("301")]
public SelectionEvents SelectionEvents { get; }
    [DispIdAttribute("302")]
public SolutionEvents SolutionEvents { get; }
    [DispIdAttribute("303")]
public BuildEvents BuildEvents { get; }
    [DispIdAttribute("304")]
public WindowEvents WindowEvents { get; }
    [DispIdAttribute("305")]
public OutputWindowEvents OutputWindowEvents { get; }
    [DispIdAttribute("306")]
public FindEvents FindEvents { get; }
    [DispIdAttribute("307")]
public TaskListEvents TaskListEvents { get; }
    [DispIdAttribute("308")]
public DTEEvents DTEEvents { get; }
    [DispIdAttribute("309")]
public DocumentEvents DocumentEvents { get; }
    [DispIdAttribute("310")]
public ProjectItemsEvents SolutionItemsEvents { get; }
    [DispIdAttribute("311")]
public ProjectItemsEvents MiscFilesEvents { get; }
    [DispIdAttribute("312")]
public DebuggerEvents DebuggerEvents { get; }
    [DispIdAttribute("313")]
public TextEditorEvents TextEditorEvents { get; }
    [DispIdAttribute("205")]
public abstract virtual CommandBarEvents get_CommandBarEvents(object CommandBarControl);
    [DispIdAttribute("300")]
public abstract virtual CommandEvents get_CommandEvents(string Guid, int ID);
    [DispIdAttribute("301")]
public abstract virtual SelectionEvents get_SelectionEvents();
    [DispIdAttribute("302")]
public abstract virtual SolutionEvents get_SolutionEvents();
    [DispIdAttribute("303")]
public abstract virtual BuildEvents get_BuildEvents();
    [DispIdAttribute("304")]
public abstract virtual WindowEvents get_WindowEvents(Window WindowFilter);
    [DispIdAttribute("305")]
public abstract virtual OutputWindowEvents get_OutputWindowEvents(string Pane);
    [DispIdAttribute("306")]
public abstract virtual FindEvents get_FindEvents();
    [DispIdAttribute("307")]
public abstract virtual TaskListEvents get_TaskListEvents(string Filter);
    [DispIdAttribute("308")]
public abstract virtual DTEEvents get_DTEEvents();
    [DispIdAttribute("309")]
public abstract virtual DocumentEvents get_DocumentEvents(Document Document);
    [DispIdAttribute("310")]
public abstract virtual ProjectItemsEvents get_SolutionItemsEvents();
    [DispIdAttribute("311")]
public abstract virtual ProjectItemsEvents get_MiscFilesEvents();
    [DispIdAttribute("312")]
public abstract virtual DebuggerEvents get_DebuggerEvents();
    [DispIdAttribute("313")]
public abstract virtual TextEditorEvents get_TextEditorEvents(TextDocument TextDocumentFilter);
    [DispIdAttribute("314")]
public abstract virtual object GetObject(string Name);
}
[DefaultMemberAttribute("Name")]
[GuidAttribute("27ADC812-BB07-11D2-8AD1-00C04F79E479")]
public interface EnvDTE.Expression {
    [DispIdAttribute("0")]
public string Name { get; }
    [DispIdAttribute("100")]
public string Type { get; }
    [DispIdAttribute("101")]
public Expressions DataMembers { get; }
    [DispIdAttribute("102")]
public string Value { get; public set; }
    [DispIdAttribute("103")]
public bool IsValidValue { get; }
    [DispIdAttribute("200")]
public DTE DTE { get; }
    [DispIdAttribute("201")]
public Debugger Parent { get; }
    [DispIdAttribute("202")]
public Expressions Collection { get; }
    [DispIdAttribute("0")]
public abstract virtual string get_Name();
    [DispIdAttribute("100")]
public abstract virtual string get_Type();
    [DispIdAttribute("101")]
public abstract virtual Expressions get_DataMembers();
    [DispIdAttribute("102")]
public abstract virtual string get_Value();
    [DispIdAttribute("102")]
public abstract virtual void set_Value(string value);
    [DispIdAttribute("103")]
public abstract virtual bool get_IsValidValue();
    [DispIdAttribute("200")]
public abstract virtual DTE get_DTE();
    [DispIdAttribute("201")]
public abstract virtual Debugger get_Parent();
    [DispIdAttribute("202")]
public abstract virtual Expressions get_Collection();
}
[DefaultMemberAttribute("Item")]
[GuidAttribute("2685337A-BB9E-11D2-8AD1-00C04F79E479")]
public interface EnvDTE.Expressions {
    [DispIdAttribute("1")]
public DTE DTE { get; }
    [DispIdAttribute("2")]
public Debugger Parent { get; }
    [DispIdAttribute("3")]
public int Count { get; }
    [DispIdAttribute("0")]
public abstract virtual Expression Item(object index);
    [DispIdAttribute("-4")]
public abstract virtual IEnumerator GetEnumerator();
    [DispIdAttribute("1")]
public abstract virtual DTE get_DTE();
    [DispIdAttribute("2")]
public abstract virtual Debugger get_Parent();
    [DispIdAttribute("3")]
public abstract virtual int get_Count();
}
[GuidAttribute("ED1A3F99-4477-11D3-89BF-00C04F688DDE")]
public interface EnvDTE.FileCodeModel {
    [DispIdAttribute("1")]
public DTE DTE { get; }
    [DispIdAttribute("2")]
public ProjectItem Parent { get; }
    [DispIdAttribute("3")]
public string Language { get; }
    [DispIdAttribute("4")]
public CodeElements CodeElements { get; }
    [DispIdAttribute("1")]
public abstract virtual DTE get_DTE();
    [DispIdAttribute("2")]
public abstract virtual ProjectItem get_Parent();
    [DispIdAttribute("3")]
public abstract virtual string get_Language();
    [DispIdAttribute("4")]
public abstract virtual CodeElements get_CodeElements();
    [DispIdAttribute("5")]
public abstract virtual CodeElement CodeElementFromPoint(TextPoint Point, vsCMElement Scope);
    [DispIdAttribute("7")]
public abstract virtual CodeNamespace AddNamespace(string Name, object Position);
    [DispIdAttribute("8")]
public abstract virtual CodeClass AddClass(string Name, object Position, object Bases, object ImplementedInterfaces, vsCMAccess Access);
    [DispIdAttribute("9")]
public abstract virtual CodeInterface AddInterface(string Name, object Position, object Bases, vsCMAccess Access);
    [DispIdAttribute("10")]
public abstract virtual CodeFunction AddFunction(string Name, vsCMFunction Kind, object Type, object Position, vsCMAccess Access);
    [DispIdAttribute("11")]
public abstract virtual CodeVariable AddVariable(string Name, object Type, object Position, vsCMAccess Access);
    [DispIdAttribute("12")]
public abstract virtual CodeAttribute AddAttribute(string Name, string Value, object Position);
    [DispIdAttribute("13")]
public abstract virtual CodeStruct AddStruct(string Name, object Position, object Bases, object ImplementedInterfaces, vsCMAccess Access);
    [DispIdAttribute("14")]
public abstract virtual CodeEnum AddEnum(string Name, object Position, object Bases, vsCMAccess Access);
    [DispIdAttribute("15")]
public abstract virtual CodeDelegate AddDelegate(string Name, object Type, object Position, vsCMAccess Access);
    [DispIdAttribute("16")]
public abstract virtual void Remove(object Element);
}
[GuidAttribute("40D4B9B6-739B-4965-8D65-692AEC692266")]
[DefaultMemberAttribute("FindReplace")]
public interface EnvDTE.Find {
    [DispIdAttribute("1")]
public DTE DTE { get; }
    [DispIdAttribute("2")]
public DTE Parent { get; }
    [DispIdAttribute("3")]
public vsFindAction Action { get; public set; }
    [DispIdAttribute("4")]
public string FindWhat { get; public set; }
    [DispIdAttribute("5")]
public bool MatchCase { get; public set; }
    [DispIdAttribute("6")]
public bool MatchWholeWord { get; public set; }
    [DispIdAttribute("7")]
public bool MatchInHiddenText { get; public set; }
    [DispIdAttribute("8")]
public bool Backwards { get; public set; }
    [DispIdAttribute("9")]
public bool SearchSubfolders { get; public set; }
    [DispIdAttribute("10")]
public bool KeepModifiedDocumentsOpen { get; public set; }
    [DispIdAttribute("11")]
public vsFindPatternSyntax PatternSyntax { get; public set; }
    [DispIdAttribute("12")]
public string ReplaceWith { get; public set; }
    [DispIdAttribute("13")]
public vsFindTarget Target { get; public set; }
    [DispIdAttribute("14")]
public string SearchPath { get; public set; }
    [DispIdAttribute("15")]
public string FilesOfType { get; public set; }
    [DispIdAttribute("16")]
public vsFindResultsLocation ResultsLocation { get; public set; }
    [DispIdAttribute("1")]
public abstract virtual DTE get_DTE();
    [DispIdAttribute("2")]
public abstract virtual DTE get_Parent();
    [DispIdAttribute("3")]
public abstract virtual vsFindAction get_Action();
    [DispIdAttribute("3")]
public abstract virtual void set_Action(vsFindAction value);
    [DispIdAttribute("4")]
public abstract virtual string get_FindWhat();
    [DispIdAttribute("4")]
public abstract virtual void set_FindWhat(string value);
    [DispIdAttribute("5")]
public abstract virtual bool get_MatchCase();
    [DispIdAttribute("5")]
public abstract virtual void set_MatchCase(bool value);
    [DispIdAttribute("6")]
public abstract virtual bool get_MatchWholeWord();
    [DispIdAttribute("6")]
public abstract virtual void set_MatchWholeWord(bool value);
    [DispIdAttribute("7")]
public abstract virtual bool get_MatchInHiddenText();
    [DispIdAttribute("7")]
public abstract virtual void set_MatchInHiddenText(bool value);
    [DispIdAttribute("8")]
public abstract virtual bool get_Backwards();
    [DispIdAttribute("8")]
public abstract virtual void set_Backwards(bool value);
    [DispIdAttribute("9")]
public abstract virtual bool get_SearchSubfolders();
    [DispIdAttribute("9")]
public abstract virtual void set_SearchSubfolders(bool value);
    [DispIdAttribute("10")]
public abstract virtual bool get_KeepModifiedDocumentsOpen();
    [DispIdAttribute("10")]
public abstract virtual void set_KeepModifiedDocumentsOpen(bool value);
    [DispIdAttribute("11")]
public abstract virtual vsFindPatternSyntax get_PatternSyntax();
    [DispIdAttribute("11")]
public abstract virtual void set_PatternSyntax(vsFindPatternSyntax value);
    [DispIdAttribute("12")]
public abstract virtual string get_ReplaceWith();
    [DispIdAttribute("12")]
public abstract virtual void set_ReplaceWith(string value);
    [DispIdAttribute("13")]
public abstract virtual vsFindTarget get_Target();
    [DispIdAttribute("13")]
public abstract virtual void set_Target(vsFindTarget value);
    [DispIdAttribute("14")]
public abstract virtual string get_SearchPath();
    [DispIdAttribute("14")]
public abstract virtual void set_SearchPath(string value);
    [DispIdAttribute("15")]
public abstract virtual string get_FilesOfType();
    [DispIdAttribute("15")]
public abstract virtual void set_FilesOfType(string value);
    [DispIdAttribute("16")]
public abstract virtual vsFindResultsLocation get_ResultsLocation();
    [DispIdAttribute("16")]
public abstract virtual void set_ResultsLocation(vsFindResultsLocation value);
    [DispIdAttribute("17")]
public abstract virtual vsFindResult Execute();
    [DispIdAttribute("0")]
public abstract virtual vsFindResult FindReplace(vsFindAction Action, string FindWhat, int vsFindOptionsValue, string ReplaceWith, vsFindTarget Target, string SearchPath, string FilesOfType, vsFindResultsLocation ResultsLocation);
}
[ComVisibleAttribute("False")]
[GuidAttribute("C5331ACD-C5D5-11D2-8598-006097C68E81")]
[CoClassAttribute("EnvDTE.FindEventsClass")]
public interface EnvDTE.FindEvents {
}
[ComVisibleAttribute("False")]
[GuidAttribute("811322BC-042D-4828-BFF2-640EF8B7209F")]
[ComSourceInterfacesAttribute("EnvDTE._dispFindEvents")]
[ClassInterfaceAttribute("0")]
public class EnvDTE.FindEventsClass : object {
}
[DefaultMemberAttribute("Item")]
[GuidAttribute("F25AE7E6-1460-4BA4-8E5E-BBBE746DE353")]
public interface EnvDTE.FontsAndColorsItems {
    [DispIdAttribute("1")]
public int Count { get; }
    [DispIdAttribute("-4")]
public abstract virtual IEnumerator GetEnumerator();
    [DispIdAttribute("0")]
public abstract virtual ColorableItems Item(object index);
    [DispIdAttribute("1")]
public abstract virtual int get_Count();
}
[GuidAttribute("E68A3E0E-B435-4DDE-86B7-F5ADEFC19DF2")]
[TypeLibTypeAttribute("4160")]
[DefaultMemberAttribute("VariableValue")]
public interface EnvDTE.Globals {
    [DispIdAttribute("1")]
public DTE DTE { get; }
    [DispIdAttribute("2")]
public object Parent { get; }
    [DispIdAttribute("0")]
public object VariableValue { get; public set; }
    [DispIdAttribute("4")]
public bool VariablePersists { get; public set; }
    [DispIdAttribute("5")]
public bool VariableExists { get; }
    [DispIdAttribute("6")]
public object VariableNames { get; }
    [DispIdAttribute("1")]
public abstract virtual DTE get_DTE();
    [DispIdAttribute("2")]
public abstract virtual object get_Parent();
    [DispIdAttribute("0")]
public abstract virtual object get_VariableValue(string VariableName);
    [DispIdAttribute("0")]
public abstract virtual void set_VariableValue(string VariableName, object pVal);
    [DispIdAttribute("4")]
public abstract virtual void set_VariablePersists(string VariableName, bool pVal);
    [DispIdAttribute("4")]
public abstract virtual bool get_VariablePersists(string VariableName);
    [DispIdAttribute("5")]
public abstract virtual bool get_VariableExists(string Name);
    [DispIdAttribute("6")]
public abstract virtual object get_VariableNames();
}
[GuidAttribute("F6576203-FBCE-477E-A66B-EDA237BB68A7")]
public interface EnvDTE.HTMLWindow {
    [DispIdAttribute("1")]
public DTE DTE { get; }
    [DispIdAttribute("2")]
public Window Parent { get; }
    [DispIdAttribute("4")]
public vsHTMLTabs CurrentTab { get; public set; }
    [DispIdAttribute("5")]
public object CurrentTabObject { get; }
    [DispIdAttribute("1")]
public abstract virtual DTE get_DTE();
    [DispIdAttribute("2")]
public abstract virtual Window get_Parent();
    [DispIdAttribute("4")]
public abstract virtual vsHTMLTabs get_CurrentTab();
    [DispIdAttribute("4")]
public abstract virtual void set_CurrentTab(vsHTMLTabs value);
    [DispIdAttribute("5")]
public abstract virtual object get_CurrentTabObject();
}
[GuidAttribute("7EF39A3E-590D-4879-88D4-C9BE5BCFD92E")]
public interface EnvDTE.IDTCommandTarget {
    [DispIdAttribute("1")]
public abstract virtual void QueryStatus(string CmdName, vsCommandStatusTextWanted NeededText, vsCommandStatus& StatusOption, Object& CommandText);
    [DispIdAttribute("2")]
public abstract virtual void Exec(string CmdName, vsCommandExecOption ExecuteOption, Object& VariantIn, Object& VariantOut, Boolean& Handled);
}
[GuidAttribute("BDCAF240-2692-4713-902A-B110B1D0F100")]
public interface EnvDTE.IDTToolsOptionsPage {
    [DispIdAttribute("1")]
public abstract virtual void OnAfterCreated(DTE DTEObject);
    [DispIdAttribute("2")]
public abstract virtual void GetProperties(Object& PropertiesObject);
    [DispIdAttribute("3")]
public abstract virtual void OnOK();
    [DispIdAttribute("4")]
public abstract virtual void OnCancel();
    [DispIdAttribute("5")]
public abstract virtual void OnHelp();
}
[GuidAttribute("E914BBE1-03A4-11D1-BBCD-00A0C90F2744")]
public interface EnvDTE.IDTWizard {
    [DispIdAttribute("1")]
public abstract virtual void Execute(object Application, IntPtr hwndOwner, Object[]& ContextParams, Object[]& CustomParams, wizardResult& retval);
}
[GuidAttribute("4DB06329-23F4-443B-9ABD-9CF611E8AE07")]
public interface EnvDTE.IExtenderProvider {
    [DispIdAttribute("1")]
public abstract virtual object GetExtender(string ExtenderCATID, string ExtenderName, object ExtendeeObject, IExtenderSite ExtenderSite, int Cookie);
    [DispIdAttribute("2")]
public abstract virtual bool CanExtend(string ExtenderCATID, string ExtenderName, object ExtendeeObject);
}
[GuidAttribute("F69B64A3-9017-4E48-9784-E152B51AA722")]
public interface EnvDTE.IExtenderProviderUnk {
    [DispIdAttribute("1")]
public abstract virtual object GetExtender(string ExtenderCATID, string ExtenderName, object ExtendeeObject, IExtenderSite ExtenderSite, int Cookie);
    [DispIdAttribute("2")]
public abstract virtual bool CanExtend(string ExtenderCATID, string ExtenderName, object ExtendeeObject);
}
[GuidAttribute("E57C510B-968B-4A3C-A467-EE4013157DC9")]
public interface EnvDTE.IExtenderSite {
    [DispIdAttribute("1")]
public abstract virtual void NotifyDelete(int Cookie);
    [DispIdAttribute("2")]
public abstract virtual object GetObject(string Name);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("86C31347-5B52-4715-B454-A6E5FCAB975D")]
public interface EnvDTE.IExtensibleObject {
    public abstract virtual void GetAutomationObject(string Name, IExtensibleObjectSite pParent, Object& ppDisp);
}
[GuidAttribute("EB5BE8A7-E593-4DE6-A923-C2AFECB96336")]
[InterfaceTypeAttribute("1")]
public interface EnvDTE.IExtensibleObjectSite {
    public abstract virtual void NotifyDelete(object punkObj);
}
[GuidAttribute("AADE1F59-6ACE-43D1-8FCA-42AF3A5C4F3C")]
public interface EnvDTE.IFilterProperties {
    [DispIdAttribute("1")]
public abstract virtual vsFilterProperties IsPropertyHidden(string PropertyName);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("6659ED14-2AB6-47F3-A890-00C8ABA43B84")]
public interface EnvDTE.ISupportVSProperties {
    public abstract virtual void NotifyPropertiesDelete();
}
[GuidAttribute("D5DBE57B-C074-4E95-B015-ABEEAA391693")]
public interface EnvDTE.ItemOperations {
    [DispIdAttribute("1")]
public DTE DTE { get; }
    [DispIdAttribute("2")]
public DTE Parent { get; }
    [DispIdAttribute("9")]
public vsPromptResult PromptToSave { get; }
    [DispIdAttribute("1")]
public abstract virtual DTE get_DTE();
    [DispIdAttribute("2")]
public abstract virtual DTE get_Parent();
    [DispIdAttribute("3")]
public abstract virtual Window OpenFile(string FileName, string ViewKind);
    [DispIdAttribute("4")]
public abstract virtual Window NewFile(string Item, string Name, string ViewKind);
    [DispIdAttribute("5")]
public abstract virtual bool IsFileOpen(string FileName, string ViewKind);
    [DispIdAttribute("6")]
public abstract virtual ProjectItem AddExistingItem(string FileName);
    [DispIdAttribute("7")]
public abstract virtual ProjectItem AddNewItem(string Item, string Name);
    [DispIdAttribute("8")]
public abstract virtual Window Navigate(string URL, vsNavigateOptions Options);
    [DispIdAttribute("9")]
public abstract virtual vsPromptResult get_PromptToSave();
}
[GuidAttribute("3C536122-57B1-46DE-AB34-ACC524140093")]
[InterfaceTypeAttribute("1")]
public interface EnvDTE.IVsExtensibility {
    public abstract virtual void get_Properties(ISupportVSProperties pParent, object pdispPropObj, Properties& ppProperties);
    public abstract virtual wizardResult RunWizardFile(string bstrWizFilename, IntPtr hwndOwner, Object[]& vContextParams);
    public abstract virtual TextBuffer Get_TextBuffer(object pVsTextStream, IExtensibleObjectSite pParent);
    public abstract virtual void EnterAutomationFunction();
    public abstract virtual void ExitAutomationFunction();
    public abstract virtual int IsInAutomationFunction();
    public abstract virtual void GetUserControl(Boolean& fUserControl);
    public abstract virtual void SetUserControl(bool fUserControl);
    public abstract virtual void SetUserControlUnlatched(bool fUserControl);
    public abstract virtual void LockServer(bool __MIDL_0010);
    public abstract virtual int GetLockCount();
    public abstract virtual bool TestForShutdown();
    public abstract virtual Globals GetGlobalsObject(object ExtractFrom);
    public abstract virtual ConfigurationManager GetConfigMgr(object pIVsProject, UInt32 itemid);
    public abstract virtual void FireMacroReset();
    public abstract virtual Document GetDocumentFromDocCookie(int lDocCookie);
    public abstract virtual void IsMethodDisabled(Guid& pGUID, int dispid);
    public abstract virtual void SetSuppressUI(bool In);
    public abstract virtual void GetSuppressUI(Boolean& pOut);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("192AC688-E7C6-4F9D-8180-4B37EFBF6F3A")]
public interface EnvDTE.IVsGlobals {
    public abstract virtual void Load();
    public abstract virtual void Save();
    public abstract virtual void Empty();
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("E2CC506A-588B-4F65-A1F0-2244C060ABCB")]
public interface EnvDTE.IVsGlobalsCallback {
    public abstract virtual void WriteVariablesToData(string pVariableName, Object& varData);
    public abstract virtual void ReadData(Globals pGlobals);
    public abstract virtual void ClearVariables();
    public abstract virtual void VariableChanged();
    public abstract virtual void CanModifySource();
    public abstract virtual void GetParent(Object& ppOut);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("8CC0CDE1-C16A-4749-99AF-6F7523C34A57")]
public interface EnvDTE.IVsProfferCommands {
    public abstract virtual void AddNamedCommand(Guid& pguidPackage, Guid& pguidCmdGroup, string pszCmdNameCanonical, UInt32& pdwCmdId, string pszCmdNameLocalized, string pszBtnText, string pszCmdTooltip, string pszSatelliteDLL, UInt32 dwBitmapResourceId, UInt32 dwBitmapImageIndex, UInt32 dwCmdFlagsDefault, UInt32 cUIContexts, Guid& rgguidUIContexts);
    public abstract virtual void RemoveNamedCommand(string pszCmdNameCanonical);
    public abstract virtual void RenameNamedCommand(string pszCmdNameCanonical, string pszCmdNameCanonicalNew, string pszCmdNameLocalizedNew);
    public abstract virtual void AddCommandBarControl(string pszCmdNameCanonical, object pCmdBarParent, UInt32 dwIndex, UInt32 dwCmdType, Object& ppCmdBarCtrl);
    public abstract virtual void RemoveCommandBarControl(object pCmdBarCtrl);
    public abstract virtual void AddCommandBar(string pszCmdBarName, vsCommandBarType dwType, object pCmdBarParent, UInt32 dwIndex, Object& ppCmdBar);
    public abstract virtual void RemoveCommandBar(object pCmdBar);
    public abstract virtual object FindCommandBar(IntPtr pToolbarSet, Guid& pguidCmdGroup, UInt32 dwMenuId);
}
[GuidAttribute("F39AB913-E6C9-4546-A265-1E43F8DE924C")]
public interface EnvDTE.IVsTextEditFonts {
    [DispIdAttribute("1")]
public string FontFamily { get; public set; }
    [DispIdAttribute("2")]
public vsFontCharSet FontCharacterSet { get; public set; }
    [DispIdAttribute("3")]
public short FontSize { get; public set; }
    [DispIdAttribute("1")]
public abstract virtual void set_FontFamily(string value);
    [DispIdAttribute("1")]
public abstract virtual string get_FontFamily();
    [DispIdAttribute("2")]
public abstract virtual void set_FontCharacterSet(vsFontCharSet value);
    [DispIdAttribute("2")]
public abstract virtual vsFontCharSet get_FontCharacterSet();
    [DispIdAttribute("3")]
public abstract virtual void set_FontSize(short value);
    [DispIdAttribute("3")]
public abstract virtual short get_FontSize();
}
[GuidAttribute("2E1BFD1C-5B26-4ACA-B97B-ED9D261BA3E7")]
public interface EnvDTE.IVsTextEditGeneral {
    [DispIdAttribute("1")]
public bool SelectionMargin { get; public set; }
    [DispIdAttribute("2")]
public bool GoToAnchorAfterEscape { get; public set; }
    [DispIdAttribute("3")]
public bool DragNDropTextEditing { get; public set; }
    [DispIdAttribute("4")]
public bool UndoCaretActions { get; public set; }
    [DispIdAttribute("5")]
public bool MarginIndicatorBar { get; public set; }
    [DispIdAttribute("6")]
public bool HorizontalScrollBar { get; public set; }
    [DispIdAttribute("7")]
public bool VerticalScrollBar { get; public set; }
    [DispIdAttribute("8")]
public bool AutoDelimiterHighlighting { get; public set; }
    [DispIdAttribute("1")]
public abstract virtual void set_SelectionMargin(bool value);
    [DispIdAttribute("1")]
public abstract virtual bool get_SelectionMargin();
    [DispIdAttribute("2")]
public abstract virtual void set_GoToAnchorAfterEscape(bool value);
    [DispIdAttribute("2")]
public abstract virtual bool get_GoToAnchorAfterEscape();
    [DispIdAttribute("3")]
public abstract virtual void set_DragNDropTextEditing(bool value);
    [DispIdAttribute("3")]
public abstract virtual bool get_DragNDropTextEditing();
    [DispIdAttribute("4")]
public abstract virtual void set_UndoCaretActions(bool value);
    [DispIdAttribute("4")]
public abstract virtual bool get_UndoCaretActions();
    [DispIdAttribute("5")]
public abstract virtual void set_MarginIndicatorBar(bool value);
    [DispIdAttribute("5")]
public abstract virtual bool get_MarginIndicatorBar();
    [DispIdAttribute("6")]
public abstract virtual void set_HorizontalScrollBar(bool value);
    [DispIdAttribute("6")]
public abstract virtual bool get_HorizontalScrollBar();
    [DispIdAttribute("7")]
public abstract virtual void set_VerticalScrollBar(bool value);
    [DispIdAttribute("7")]
public abstract virtual bool get_VerticalScrollBar();
    [DispIdAttribute("8")]
public abstract virtual void set_AutoDelimiterHighlighting(bool value);
    [DispIdAttribute("8")]
public abstract virtual bool get_AutoDelimiterHighlighting();
}
[GuidAttribute("5943BD7E-D722-42DB-A251-FE2ADD8711EA")]
public interface EnvDTE.IVsTextEditPerLanguage {
    [DispIdAttribute("1")]
public short TabSize { get; public set; }
    [DispIdAttribute("2")]
public short IndentSize { get; public set; }
    [DispIdAttribute("3")]
public bool InsertTabs { get; public set; }
    [DispIdAttribute("4")]
[ComAliasNameAttribute("EnvDTE.vsIndentStyle")]
public vsIndentStyle IndentStyle { get; public set; }
    [DispIdAttribute("5")]
public bool AutoListMembers { get; public set; }
    [DispIdAttribute("6")]
public bool AutoListParams { get; public set; }
    [DispIdAttribute("7")]
public bool VirtualSpace { get; public set; }
    [DispIdAttribute("8")]
public bool EnableLeftClickForURLs { get; public set; }
    [DispIdAttribute("9")]
public bool WordWrap { get; public set; }
    [DispIdAttribute("10")]
public bool ShowLineNumbers { get; public set; }
    [DispIdAttribute("11")]
public bool ShowNavigationBar { get; public set; }
    [DispIdAttribute("13")]
public bool HideAdvancedMembers { get; public set; }
    [DispIdAttribute("1")]
public abstract virtual void set_TabSize(short value);
    [DispIdAttribute("1")]
public abstract virtual short get_TabSize();
    [DispIdAttribute("2")]
public abstract virtual void set_IndentSize(short value);
    [DispIdAttribute("2")]
public abstract virtual short get_IndentSize();
    [DispIdAttribute("3")]
public abstract virtual void set_InsertTabs(bool value);
    [DispIdAttribute("3")]
public abstract virtual bool get_InsertTabs();
    [DispIdAttribute("4")]
public abstract virtual void set_IndentStyle(vsIndentStyle value);
    [DispIdAttribute("4")]
public abstract virtual vsIndentStyle get_IndentStyle();
    [DispIdAttribute("5")]
public abstract virtual void set_AutoListMembers(bool value);
    [DispIdAttribute("5")]
public abstract virtual bool get_AutoListMembers();
    [DispIdAttribute("6")]
public abstract virtual void set_AutoListParams(bool value);
    [DispIdAttribute("6")]
public abstract virtual bool get_AutoListParams();
    [DispIdAttribute("7")]
public abstract virtual void set_VirtualSpace(bool value);
    [DispIdAttribute("7")]
public abstract virtual bool get_VirtualSpace();
    [DispIdAttribute("8")]
public abstract virtual void set_EnableLeftClickForURLs(bool value);
    [DispIdAttribute("8")]
public abstract virtual bool get_EnableLeftClickForURLs();
    [DispIdAttribute("9")]
public abstract virtual void set_WordWrap(bool value);
    [DispIdAttribute("9")]
public abstract virtual bool get_WordWrap();
    [DispIdAttribute("10")]
public abstract virtual void set_ShowLineNumbers(bool value);
    [DispIdAttribute("10")]
public abstract virtual bool get_ShowLineNumbers();
    [DispIdAttribute("11")]
public abstract virtual void set_ShowNavigationBar(bool value);
    [DispIdAttribute("11")]
public abstract virtual bool get_ShowNavigationBar();
    [DispIdAttribute("13")]
public abstract virtual void set_HideAdvancedMembers(bool value);
    [DispIdAttribute("13")]
public abstract virtual bool get_HideAdvancedMembers();
}
[GuidAttribute("B3CCFA68-C145-11D2-8AD1-00C04F79E479")]
[DefaultMemberAttribute("Name")]
public interface EnvDTE.Language {
    [DispIdAttribute("0")]
public string Name { get; }
    [DispIdAttribute("200")]
public DTE DTE { get; }
    [DispIdAttribute("201")]
public Debugger Parent { get; }
    [DispIdAttribute("202")]
public Languages Collection { get; }
    [DispIdAttribute("0")]
public abstract virtual string get_Name();
    [DispIdAttribute("200")]
public abstract virtual DTE get_DTE();
    [DispIdAttribute("201")]
public abstract virtual Debugger get_Parent();
    [DispIdAttribute("202")]
public abstract virtual Languages get_Collection();
}
[GuidAttribute("A4F4246C-C131-11D2-8AD1-00C04F79E479")]
[DefaultMemberAttribute("Item")]
public interface EnvDTE.Languages {
    [DispIdAttribute("1")]
public DTE DTE { get; }
    [DispIdAttribute("2")]
public Debugger Parent { get; }
    [DispIdAttribute("3")]
public int Count { get; }
    [DispIdAttribute("0")]
public abstract virtual Language Item(object index);
    [DispIdAttribute("-4")]
public abstract virtual IEnumerator GetEnumerator();
    [DispIdAttribute("1")]
public abstract virtual DTE get_DTE();
    [DispIdAttribute("2")]
public abstract virtual Debugger get_Parent();
    [DispIdAttribute("3")]
public abstract virtual int get_Count();
}
[GuidAttribute("F00EF34A-A654-4C1B-897A-585D5BCBB35A")]
[DefaultMemberAttribute("Item")]
public interface EnvDTE.LinkedWindows {
    [DispIdAttribute("2")]
public Window Parent { get; }
    [DispIdAttribute("201")]
public int Count { get; }
    [DispIdAttribute("301")]
public DTE DTE { get; }
    [DispIdAttribute("2")]
public abstract virtual Window get_Parent();
    [DispIdAttribute("0")]
public abstract virtual Window Item(object index);
    [DispIdAttribute("201")]
public abstract virtual int get_Count();
    [DispIdAttribute("-4")]
public abstract virtual IEnumerator GetEnumerator();
    [DispIdAttribute("202")]
public abstract virtual void Remove(Window Window);
    [DispIdAttribute("203")]
public abstract virtual void Add(Window Window);
    [DispIdAttribute("301")]
public abstract virtual DTE get_DTE();
}
[GuidAttribute("F9F99155-6D4D-49B1-AD63-C78C3E8A5916")]
public interface EnvDTE.Macros {
    [DispIdAttribute("1")]
public DTE DTE { get; }
    [DispIdAttribute("2")]
public DTE Parent { get; }
    [DispIdAttribute("3")]
public bool IsRecording { get; }
    [DispIdAttribute("1")]
public abstract virtual DTE get_DTE();
    [DispIdAttribute("2")]
public abstract virtual DTE get_Parent();
    [DispIdAttribute("3")]
public abstract virtual bool get_IsRecording();
    [DispIdAttribute("4")]
public abstract virtual void EmitMacroCode(string Code);
    [DispIdAttribute("5")]
public abstract virtual void Pause();
    [DispIdAttribute("6")]
public abstract virtual void Resume();
}
[GuidAttribute("8D0AA9CC-8465-42F3-AD6E-DFDE28CCC75D")]
public interface EnvDTE.ObjectExtenders {
    [DispIdAttribute("1")]
public DTE DTE { get; }
    [DispIdAttribute("2")]
public DTE Parent { get; }
    [DispIdAttribute("1")]
public abstract virtual DTE get_DTE();
    [DispIdAttribute("2")]
public abstract virtual DTE get_Parent();
    [DispIdAttribute("3")]
public abstract virtual int RegisterExtenderProvider(string ExtenderCATID, string ExtenderName, IExtenderProvider ExtenderProvider, string LocalizedName);
    [DispIdAttribute("4")]
public abstract virtual void UnregisterExtenderProvider(int Cookie);
    [DispIdAttribute("5")]
public abstract virtual object GetExtender(string ExtenderCATID, string ExtenderName, object ExtendeeObject);
    [DispIdAttribute("6")]
public abstract virtual object GetExtenderNames(string ExtenderCATID, object ExtendeeObject);
    [DispIdAttribute("7")]
public abstract virtual object GetContextualExtenderCATIDs();
    [DispIdAttribute("8")]
public abstract virtual string GetLocalizedExtenderName(string ExtenderCATID, string ExtenderName);
    [DispIdAttribute("9")]
public abstract virtual int RegisterExtenderProviderUnk(string ExtenderCATID, string ExtenderName, IExtenderProviderUnk ExtenderProvider, string LocalizedName);
}
[GuidAttribute("A3A80783-875F-435B-9639-E5CE888DF737")]
[DefaultMemberAttribute("DisplayName")]
public interface EnvDTE.OutputGroup {
    [DispIdAttribute("1")]
public DTE DTE { get; }
    [DispIdAttribute("2")]
public OutputGroups Collection { get; }
    [DispIdAttribute("3")]
public object FileNames { get; }
    [DispIdAttribute("4")]
public int FileCount { get; }
    [DispIdAttribute("0")]
public string DisplayName { get; }
    [DispIdAttribute("5")]
public string CanonicalName { get; }
    [DispIdAttribute("6")]
public object FileURLs { get; }
    [DispIdAttribute("7")]
public string Description { get; }
    [DispIdAttribute("1")]
public abstract virtual DTE get_DTE();
    [DispIdAttribute("2")]
public abstract virtual OutputGroups get_Collection();
    [DispIdAttribute("3")]
public abstract virtual object get_FileNames();
    [DispIdAttribute("4")]
public abstract virtual int get_FileCount();
    [DispIdAttribute("0")]
public abstract virtual string get_DisplayName();
    [DispIdAttribute("5")]
public abstract virtual string get_CanonicalName();
    [DispIdAttribute("6")]
public abstract virtual object get_FileURLs();
    [DispIdAttribute("7")]
public abstract virtual string get_Description();
}
[DefaultMemberAttribute("Item")]
[GuidAttribute("F9FA748E-E302-44CF-891B-E263189D585E")]
public interface EnvDTE.OutputGroups {
    [DispIdAttribute("1")]
public DTE DTE { get; }
    [DispIdAttribute("2")]
public Configuration Parent { get; }
    [DispIdAttribute("3")]
public int Count { get; }
    [DispIdAttribute("1")]
public abstract virtual DTE get_DTE();
    [DispIdAttribute("2")]
public abstract virtual Configuration get_Parent();
    [DispIdAttribute("-4")]
public abstract virtual IEnumerator GetEnumerator();
    [DispIdAttribute("0")]
public abstract virtual OutputGroup Item(object index);
    [DispIdAttribute("3")]
public abstract virtual int get_Count();
}
[GuidAttribute("EAB0A63D-C3A8-496E-9ACF-A82CEF6A43B3")]
public interface EnvDTE.OutputWindow {
    [DispIdAttribute("2")]
public DTE DTE { get; }
    [DispIdAttribute("3")]
public Window Parent { get; }
    [DispIdAttribute("4")]
public OutputWindowPanes OutputWindowPanes { get; }
    [DispIdAttribute("5")]
public OutputWindowPane ActivePane { get; }
    [DispIdAttribute("2")]
public abstract virtual DTE get_DTE();
    [DispIdAttribute("3")]
public abstract virtual Window get_Parent();
    [DispIdAttribute("4")]
public abstract virtual OutputWindowPanes get_OutputWindowPanes();
    [DispIdAttribute("5")]
public abstract virtual OutputWindowPane get_ActivePane();
}
[ComVisibleAttribute("False")]
[GuidAttribute("0A3546A8-6840-11D2-97C1-00C04FB6C6FF")]
[CoClassAttribute("EnvDTE.OutputWindowEventsClass")]
public interface EnvDTE.OutputWindowEvents {
}
[ComVisibleAttribute("False")]
[ClassInterfaceAttribute("0")]
[ComSourceInterfacesAttribute("EnvDTE._dispOutputWindowEvents")]
[GuidAttribute("3760037F-B012-44F8-9C23-3609D7A16DEF")]
public class EnvDTE.OutputWindowEventsClass : object {
}
[GuidAttribute("FFC9DFC4-61CA-4B0C-83C2-0703A24F5C16")]
[DefaultMemberAttribute("Name")]
public interface EnvDTE.OutputWindowPane {
    [DispIdAttribute("0")]
public string Name { get; }
    [DispIdAttribute("2")]
public DTE DTE { get; }
    [DispIdAttribute("3")]
public OutputWindowPanes Collection { get; }
    [DispIdAttribute("4")]
public string Guid { get; }
    [DispIdAttribute("10")]
public TextDocument TextDocument { get; }
    [DispIdAttribute("0")]
public abstract virtual string get_Name();
    [DispIdAttribute("2")]
public abstract virtual DTE get_DTE();
    [DispIdAttribute("3")]
public abstract virtual OutputWindowPanes get_Collection();
    [DispIdAttribute("4")]
public abstract virtual string get_Guid();
    [DispIdAttribute("5")]
public abstract virtual void OutputString(string Text);
    [DispIdAttribute("6")]
public abstract virtual void ForceItemsToTaskList();
    [DispIdAttribute("7")]
public abstract virtual void Activate();
    [DispIdAttribute("8")]
public abstract virtual void Clear();
    [DispIdAttribute("9")]
public abstract virtual void OutputTaskItemString(string Text, vsTaskPriority Priority, string SubCategory, vsTaskIcon Icon, string FileName, int Line, string Description, bool Force);
    [DispIdAttribute("10")]
public abstract virtual TextDocument get_TextDocument();
}
[GuidAttribute("B02CF62A-9470-4308-A521-9675FBA395AB")]
[DefaultMemberAttribute("Item")]
public interface EnvDTE.OutputWindowPanes {
    [DispIdAttribute("2")]
public DTE DTE { get; }
    [DispIdAttribute("3")]
public OutputWindow Parent { get; }
    [DispIdAttribute("4")]
public int Count { get; }
    [DispIdAttribute("2")]
public abstract virtual DTE get_DTE();
    [DispIdAttribute("3")]
public abstract virtual OutputWindow get_Parent();
    [DispIdAttribute("4")]
public abstract virtual int get_Count();
    [DispIdAttribute("5")]
public abstract virtual OutputWindowPane Add(string Name);
    [DispIdAttribute("0")]
public abstract virtual OutputWindowPane Item(object index);
    [DispIdAttribute("-4")]
public abstract virtual IEnumerator GetEnumerator();
}
[DefaultMemberAttribute("Name")]
[GuidAttribute("5C5A0070-F396-4E37-A82A-1B767E272DF9")]
public interface EnvDTE.Process {
    [DispIdAttribute("0")]
public string Name { get; }
    [DispIdAttribute("100")]
public int ProcessID { get; }
    [DispIdAttribute("101")]
public Programs Programs { get; }
    [DispIdAttribute("200")]
public DTE DTE { get; }
    [DispIdAttribute("201")]
public Debugger Parent { get; }
    [DispIdAttribute("202")]
public Processes Collection { get; }
    [DispIdAttribute("1")]
public abstract virtual void Attach();
    [DispIdAttribute("2")]
public abstract virtual void Detach(bool WaitForBreakOrEnd);
    [DispIdAttribute("3")]
public abstract virtual void Break(bool WaitForBreakMode);
    [DispIdAttribute("4")]
public abstract virtual void Terminate(bool WaitForBreakOrEnd);
    [DispIdAttribute("0")]
public abstract virtual string get_Name();
    [DispIdAttribute("100")]
public abstract virtual int get_ProcessID();
    [DispIdAttribute("101")]
public abstract virtual Programs get_Programs();
    [DispIdAttribute("200")]
public abstract virtual DTE get_DTE();
    [DispIdAttribute("201")]
public abstract virtual Debugger get_Parent();
    [DispIdAttribute("202")]
public abstract virtual Processes get_Collection();
}
[GuidAttribute("9F379969-5EAC-4A54-B2BC-6946CFFB56EF")]
[DefaultMemberAttribute("Item")]
public interface EnvDTE.Processes {
    [DispIdAttribute("1")]
public DTE DTE { get; }
    [DispIdAttribute("2")]
public Debugger Parent { get; }
    [DispIdAttribute("3")]
public int Count { get; }
    [DispIdAttribute("0")]
public abstract virtual Process Item(object index);
    [DispIdAttribute("-4")]
public abstract virtual IEnumerator GetEnumerator();
    [DispIdAttribute("1")]
public abstract virtual DTE get_DTE();
    [DispIdAttribute("2")]
public abstract virtual Debugger get_Parent();
    [DispIdAttribute("3")]
public abstract virtual int get_Count();
}
[GuidAttribute("6A38D87C-BBA0-11D2-8AD1-00C04F79E479")]
[DefaultMemberAttribute("Name")]
public interface EnvDTE.Program {
    [DispIdAttribute("0")]
public string Name { get; }
    [DispIdAttribute("100")]
public Process Process { get; }
    [DispIdAttribute("101")]
public Threads Threads { get; }
    [DispIdAttribute("102")]
public bool IsBeingDebugged { get; }
    [DispIdAttribute("200")]
public DTE DTE { get; }
    [DispIdAttribute("201")]
public Debugger Parent { get; }
    [DispIdAttribute("202")]
public Programs Collection { get; }
    [DispIdAttribute("0")]
public abstract virtual string get_Name();
    [DispIdAttribute("100")]
public abstract virtual Process get_Process();
    [DispIdAttribute("101")]
public abstract virtual Threads get_Threads();
    [DispIdAttribute("102")]
public abstract virtual bool get_IsBeingDebugged();
    [DispIdAttribute("200")]
public abstract virtual DTE get_DTE();
    [DispIdAttribute("201")]
public abstract virtual Debugger get_Parent();
    [DispIdAttribute("202")]
public abstract virtual Programs get_Collection();
}
[GuidAttribute("DC6A118A-BBAB-11D2-8AD1-00C04F79E479")]
[DefaultMemberAttribute("Item")]
public interface EnvDTE.Programs {
    [DispIdAttribute("1")]
public DTE DTE { get; }
    [DispIdAttribute("2")]
public Debugger Parent { get; }
    [DispIdAttribute("3")]
public int Count { get; }
    [DispIdAttribute("0")]
public abstract virtual Program Item(object index);
    [DispIdAttribute("-4")]
public abstract virtual IEnumerator GetEnumerator();
    [DispIdAttribute("1")]
public abstract virtual DTE get_DTE();
    [DispIdAttribute("2")]
public abstract virtual Debugger get_Parent();
    [DispIdAttribute("3")]
public abstract virtual int get_Count();
}
[GuidAttribute("866311E6-C887-4143-9833-645F5B93F6F1")]
[TypeLibTypeAttribute("4160")]
[DefaultMemberAttribute("Name")]
public interface EnvDTE.Project {
    [DispIdAttribute("0")]
public string Name { get; public set; }
    [DispIdAttribute("109")]
public string FileName { get; }
    [DispIdAttribute("110")]
public bool IsDirty { get; public set; }
    [DispIdAttribute("123")]
public Projects Collection { get; }
    [DispIdAttribute("200")]
public DTE DTE { get; }
    [DispIdAttribute("201")]
public string Kind { get; }
    [DispIdAttribute("202")]
public ProjectItems ProjectItems { get; }
    [DispIdAttribute("203")]
public Properties Properties { get; }
    [DispIdAttribute("204")]
public string UniqueName { get; }
    [DispIdAttribute("205")]
public object Object { get; }
    [DispIdAttribute("206")]
public object Extender { get; }
    [DispIdAttribute("207")]
public object ExtenderNames { get; }
    [DispIdAttribute("208")]
public string ExtenderCATID { get; }
    [DispIdAttribute("209")]
public string FullName { get; }
    [DispIdAttribute("210")]
public bool Saved { get; public set; }
    [DispIdAttribute("213")]
public ConfigurationManager ConfigurationManager { get; }
    [DispIdAttribute("214")]
public Globals Globals { get; }
    [DispIdAttribute("216")]
public ProjectItem ParentProjectItem { get; }
    [DispIdAttribute("217")]
public CodeModel CodeModel { get; }
    [DispIdAttribute("0")]
public abstract virtual string get_Name();
    [DispIdAttribute("0")]
public abstract virtual void set_Name(string lpbstrName);
    [TypeLibFuncAttribute("64")]
[DispIdAttribute("109")]
public abstract virtual string get_FileName();
    [DispIdAttribute("110")]
[TypeLibFuncAttribute("64")]
public abstract virtual bool get_IsDirty();
    [DispIdAttribute("110")]
[TypeLibFuncAttribute("64")]
public abstract virtual void set_IsDirty(bool lpfReturn);
    [DispIdAttribute("123")]
public abstract virtual Projects get_Collection();
    [DispIdAttribute("127")]
public abstract virtual void SaveAs(string NewFileName);
    [DispIdAttribute("200")]
public abstract virtual DTE get_DTE();
    [DispIdAttribute("201")]
public abstract virtual string get_Kind();
    [DispIdAttribute("202")]
public abstract virtual ProjectItems get_ProjectItems();
    [DispIdAttribute("203")]
public abstract virtual Properties get_Properties();
    [DispIdAttribute("204")]
public abstract virtual string get_UniqueName();
    [DispIdAttribute("205")]
public abstract virtual object get_Object();
    [DispIdAttribute("206")]
[TypeLibFuncAttribute("1024")]
public abstract virtual object get_Extender(string ExtenderName);
    [TypeLibFuncAttribute("1024")]
[DispIdAttribute("207")]
public abstract virtual object get_ExtenderNames();
    [DispIdAttribute("208")]
[TypeLibFuncAttribute("1024")]
public abstract virtual string get_ExtenderCATID();
    [DispIdAttribute("209")]
public abstract virtual string get_FullName();
    [DispIdAttribute("210")]
public abstract virtual bool get_Saved();
    [DispIdAttribute("210")]
public abstract virtual void set_Saved(bool lpfReturn);
    [DispIdAttribute("213")]
public abstract virtual ConfigurationManager get_ConfigurationManager();
    [DispIdAttribute("214")]
public abstract virtual Globals get_Globals();
    [DispIdAttribute("215")]
public abstract virtual void Save(string FileName);
    [DispIdAttribute("216")]
public abstract virtual ProjectItem get_ParentProjectItem();
    [DispIdAttribute("217")]
public abstract virtual CodeModel get_CodeModel();
    [DispIdAttribute("218")]
public abstract virtual void Delete();
}
[DefaultMemberAttribute("Name")]
[TypeLibTypeAttribute("4160")]
[GuidAttribute("0B48100A-473E-433C-AB8F-66B9739AB620")]
public interface EnvDTE.ProjectItem {
    [DispIdAttribute("10")]
public bool IsDirty { get; public set; }
    [DispIdAttribute("11")]
public string FileNames { get; }
    [DispIdAttribute("13")]
public short FileCount { get; }
    [DispIdAttribute("0")]
public string Name { get; public set; }
    [DispIdAttribute("54")]
public ProjectItems Collection { get; }
    [DispIdAttribute("56")]
public Properties Properties { get; }
    [DispIdAttribute("200")]
public DTE DTE { get; }
    [DispIdAttribute("201")]
public string Kind { get; }
    [DispIdAttribute("203")]
public ProjectItems ProjectItems { get; }
    [DispIdAttribute("204")]
public bool IsOpen { get; }
    [DispIdAttribute("108")]
public object Object { get; }
    [DispIdAttribute("109")]
public object Extender { get; }
    [DispIdAttribute("110")]
public object ExtenderNames { get; }
    [DispIdAttribute("111")]
public string ExtenderCATID { get; }
    [DispIdAttribute("113")]
public bool Saved { get; public set; }
    [DispIdAttribute("116")]
public ConfigurationManager ConfigurationManager { get; }
    [DispIdAttribute("117")]
public FileCodeModel FileCodeModel { get; }
    [DispIdAttribute("119")]
public Document Document { get; }
    [DispIdAttribute("120")]
public Project SubProject { get; }
    [DispIdAttribute("121")]
public Project ContainingProject { get; }
    [DispIdAttribute("10")]
[TypeLibFuncAttribute("64")]
public abstract virtual bool get_IsDirty();
    [DispIdAttribute("10")]
[TypeLibFuncAttribute("64")]
public abstract virtual void set_IsDirty(bool lpfReturn);
    [DispIdAttribute("11")]
public abstract virtual string get_FileNames(short index);
    [DispIdAttribute("12")]
public abstract virtual bool SaveAs(string NewFileName);
    [DispIdAttribute("13")]
public abstract virtual short get_FileCount();
    [DispIdAttribute("0")]
public abstract virtual string get_Name();
    [DispIdAttribute("0")]
public abstract virtual void set_Name(string pbstrReturn);
    [DispIdAttribute("54")]
public abstract virtual ProjectItems get_Collection();
    [DispIdAttribute("56")]
public abstract virtual Properties get_Properties();
    [DispIdAttribute("200")]
public abstract virtual DTE get_DTE();
    [DispIdAttribute("201")]
public abstract virtual string get_Kind();
    [DispIdAttribute("203")]
public abstract virtual ProjectItems get_ProjectItems();
    [DispIdAttribute("204")]
public abstract virtual bool get_IsOpen(string ViewKind);
    [DispIdAttribute("205")]
public abstract virtual Window Open(string ViewKind);
    [DispIdAttribute("206")]
public abstract virtual void Remove();
    [DispIdAttribute("107")]
public abstract virtual void ExpandView();
    [DispIdAttribute("108")]
public abstract virtual object get_Object();
    [TypeLibFuncAttribute("1024")]
[DispIdAttribute("109")]
public abstract virtual object get_Extender(string ExtenderName);
    [TypeLibFuncAttribute("1024")]
[DispIdAttribute("110")]
public abstract virtual object get_ExtenderNames();
    [TypeLibFuncAttribute("1024")]
[DispIdAttribute("111")]
public abstract virtual string get_ExtenderCATID();
    [DispIdAttribute("113")]
public abstract virtual bool get_Saved();
    [DispIdAttribute("113")]
public abstract virtual void set_Saved(bool lpfReturn);
    [DispIdAttribute("116")]
public abstract virtual ConfigurationManager get_ConfigurationManager();
    [DispIdAttribute("117")]
public abstract virtual FileCodeModel get_FileCodeModel();
    [DispIdAttribute("118")]
public abstract virtual void Save(string FileName);
    [DispIdAttribute("119")]
public abstract virtual Document get_Document();
    [DispIdAttribute("120")]
public abstract virtual Project get_SubProject();
    [DispIdAttribute("121")]
public abstract virtual Project get_ContainingProject();
    [DispIdAttribute("122")]
public abstract virtual void Delete();
}
[DefaultMemberAttribute("Item")]
[GuidAttribute("8E2F1269-185E-43C7-8899-950AD2769CCF")]
public interface EnvDTE.ProjectItems {
    [DispIdAttribute("2")]
public object Parent { get; }
    [DispIdAttribute("10")]
public int Count { get; }
    [DispIdAttribute("200")]
public DTE DTE { get; }
    [DispIdAttribute("201")]
public string Kind { get; }
    [DispIdAttribute("205")]
public Project ContainingProject { get; }
    [DispIdAttribute("0")]
public abstract virtual ProjectItem Item(object index);
    [DispIdAttribute("2")]
public abstract virtual object get_Parent();
    [DispIdAttribute("10")]
public abstract virtual int get_Count();
    [DispIdAttribute("-4")]
public abstract virtual IEnumerator GetEnumerator();
    [DispIdAttribute("200")]
public abstract virtual DTE get_DTE();
    [DispIdAttribute("201")]
public abstract virtual string get_Kind();
    [DispIdAttribute("202")]
public abstract virtual ProjectItem AddFromFile(string FileName);
    [DispIdAttribute("203")]
public abstract virtual ProjectItem AddFromTemplate(string FileName, string Name);
    [DispIdAttribute("204")]
public abstract virtual ProjectItem AddFromDirectory(string Directory);
    [DispIdAttribute("205")]
public abstract virtual Project get_ContainingProject();
    [DispIdAttribute("206")]
public abstract virtual ProjectItem AddFolder(string Name, string Kind);
    [DispIdAttribute("207")]
public abstract virtual ProjectItem AddFromFileCopy(string FilePath);
}
[ComVisibleAttribute("False")]
[GuidAttribute("22800963-2811-410D-BF87-A7808EAC977D")]
[CoClassAttribute("EnvDTE.ProjectItemsEventsClass")]
public interface EnvDTE.ProjectItemsEvents {
}
[ComVisibleAttribute("False")]
[ComSourceInterfacesAttribute("EnvDTE._dispProjectItemsEvents")]
[ClassInterfaceAttribute("0")]
[GuidAttribute("DE6C1098-93CA-4F49-BEF0-262A13CA1176")]
public class EnvDTE.ProjectItemsEventsClass : object {
}
[GuidAttribute("E3EC0ADD-31B3-461F-8303-8A5E6931257A")]
[DefaultMemberAttribute("Item")]
public interface EnvDTE.Projects {
    [DispIdAttribute("2")]
public DTE Parent { get; }
    [DispIdAttribute("10")]
public int Count { get; }
    [DispIdAttribute("200")]
public DTE DTE { get; }
    [DispIdAttribute("201")]
public Properties Properties { get; }
    [DispIdAttribute("202")]
public string Kind { get; }
    [DispIdAttribute("0")]
public abstract virtual Project Item(object index);
    [DispIdAttribute("2")]
public abstract virtual DTE get_Parent();
    [DispIdAttribute("10")]
public abstract virtual int get_Count();
    [DispIdAttribute("-4")]
public abstract virtual IEnumerator GetEnumerator();
    [DispIdAttribute("200")]
public abstract virtual DTE get_DTE();
    [DispIdAttribute("201")]
public abstract virtual Properties get_Properties();
    [DispIdAttribute("202")]
public abstract virtual string get_Kind();
}
[ComVisibleAttribute("False")]
[GuidAttribute("85451F83-B5CA-437F-A619-0CB705707420")]
[CoClassAttribute("EnvDTE.ProjectsEventsClass")]
public interface EnvDTE.ProjectsEvents {
}
[ComVisibleAttribute("False")]
[ComSourceInterfacesAttribute("EnvDTE._dispProjectsEvents")]
[GuidAttribute("536A4BE3-A376-408E-954C-471C779E216F")]
[ClassInterfaceAttribute("0")]
public class EnvDTE.ProjectsEventsClass : object {
}
[GuidAttribute("4CC8CCF5-A926-4646-B17F-B4940CAED472")]
[DefaultMemberAttribute("Item")]
public interface EnvDTE.Properties {
    [DispIdAttribute("1")]
public object Application { get; }
    [DispIdAttribute("2")]
public object Parent { get; }
    [DispIdAttribute("40")]
public int Count { get; }
    [DispIdAttribute("100")]
public DTE DTE { get; }
    [DispIdAttribute("0")]
public abstract virtual Property Item(object index);
    [DispIdAttribute("1")]
public abstract virtual object get_Application();
    [DispIdAttribute("2")]
public abstract virtual object get_Parent();
    [DispIdAttribute("40")]
public abstract virtual int get_Count();
    [DispIdAttribute("-4")]
public abstract virtual IEnumerator GetEnumerator();
    [DispIdAttribute("100")]
public abstract virtual DTE get_DTE();
}
[TypeLibTypeAttribute("4160")]
[GuidAttribute("7B988E06-2581-485E-9322-04881E0600D0")]
[DefaultMemberAttribute("Value")]
public interface EnvDTE.Property {
    [DispIdAttribute("0")]
public object Value { get; public set; }
    [DispIdAttribute("3")]
public object IndexedValue { get; public set; }
    [DispIdAttribute("4")]
public short NumIndices { get; }
    [DispIdAttribute("1")]
public object Application { get; }
    [DispIdAttribute("2")]
public Properties Parent { get; }
    [DispIdAttribute("40")]
public string Name { get; }
    [DispIdAttribute("42")]
public Properties Collection { get; }
    [DispIdAttribute("45")]
public object Object { get; public set; }
    [DispIdAttribute("100")]
public DTE DTE { get; }
    [DispIdAttribute("0")]
public abstract virtual object get_Value();
    [DispIdAttribute("0")]
public abstract virtual void let_Value(object lppvReturn);
    [DispIdAttribute("0")]
public abstract virtual void set_Value(object lppvReturn);
    [DispIdAttribute("3")]
public abstract virtual object get_IndexedValue(object Index1, object Index2, object Index3, object Index4);
    [DispIdAttribute("3")]
public abstract virtual void set_IndexedValue(object Index1, object Index2, object Index3, object Index4, object Val);
    [DispIdAttribute("4")]
public abstract virtual short get_NumIndices();
    [DispIdAttribute("1")]
[TypeLibFuncAttribute("65")]
public abstract virtual object get_Application();
    [TypeLibFuncAttribute("65")]
[DispIdAttribute("2")]
public abstract virtual Properties get_Parent();
    [DispIdAttribute("40")]
public abstract virtual string get_Name();
    [DispIdAttribute("42")]
public abstract virtual Properties get_Collection();
    [DispIdAttribute("45")]
public abstract virtual object get_Object();
    [DispIdAttribute("45")]
public abstract virtual void set_Object(object lppunk);
    [DispIdAttribute("100")]
public abstract virtual DTE get_DTE();
}
[TypeLibTypeAttribute("4160")]
[DefaultMemberAttribute("Name")]
[GuidAttribute("049D2CDF-3731-4CB6-A233-BE97BCE922D3")]
public interface EnvDTE.SelectedItem {
    [DispIdAttribute("1")]
public SelectedItems Collection { get; }
    [DispIdAttribute("2")]
public DTE DTE { get; }
    [DispIdAttribute("3")]
public Project Project { get; }
    [DispIdAttribute("4")]
public ProjectItem ProjectItem { get; }
    [DispIdAttribute("0")]
public string Name { get; }
    [DispIdAttribute("8")]
public short InfoCount { get; }
    [DispIdAttribute("9")]
public object Info { get; }
    [DispIdAttribute("1")]
public abstract virtual SelectedItems get_Collection();
    [DispIdAttribute("2")]
public abstract virtual DTE get_DTE();
    [DispIdAttribute("3")]
public abstract virtual Project get_Project();
    [DispIdAttribute("4")]
public abstract virtual ProjectItem get_ProjectItem();
    [DispIdAttribute("0")]
public abstract virtual string get_Name();
    [DispIdAttribute("8")]
[TypeLibFuncAttribute("65")]
public abstract virtual short get_InfoCount();
    [TypeLibFuncAttribute("65")]
[DispIdAttribute("9")]
public abstract virtual object get_Info(short index);
}
[GuidAttribute("6CAA67CF-43AE-4184-AAAB-0200DDF6B240")]
[DefaultMemberAttribute("Item")]
public interface EnvDTE.SelectedItems {
    [DispIdAttribute("1")]
public int Count { get; }
    [DispIdAttribute("2")]
public DTE Parent { get; }
    [DispIdAttribute("3")]
public DTE DTE { get; }
    [DispIdAttribute("4")]
public bool MultiSelect { get; }
    [DispIdAttribute("5")]
public SelectionContainer SelectionContainer { get; }
    [DispIdAttribute("0")]
public abstract virtual SelectedItem Item(object index);
    [DispIdAttribute("-4")]
public abstract virtual IEnumerator GetEnumerator();
    [DispIdAttribute("1")]
public abstract virtual int get_Count();
    [DispIdAttribute("2")]
public abstract virtual DTE get_Parent();
    [DispIdAttribute("3")]
public abstract virtual DTE get_DTE();
    [DispIdAttribute("4")]
public abstract virtual bool get_MultiSelect();
    [DispIdAttribute("5")]
public abstract virtual SelectionContainer get_SelectionContainer();
}
[DefaultMemberAttribute("Item")]
[GuidAttribute("02273422-8DD4-4A9F-8A8B-D70443D510F4")]
public interface EnvDTE.SelectionContainer {
    [DispIdAttribute("1")]
public int Count { get; }
    [DispIdAttribute("2")]
public SelectedItems Parent { get; }
    [DispIdAttribute("3")]
public DTE DTE { get; }
    [DispIdAttribute("0")]
public abstract virtual object Item(object index);
    [DispIdAttribute("-4")]
public abstract virtual IEnumerator GetEnumerator();
    [DispIdAttribute("1")]
public abstract virtual int get_Count();
    [DispIdAttribute("2")]
public abstract virtual SelectedItems get_Parent();
    [DispIdAttribute("3")]
public abstract virtual DTE get_DTE();
}
[ComVisibleAttribute("False")]
[CoClassAttribute("EnvDTE.SelectionEventsClass")]
[GuidAttribute("EB6783DB-1819-496D-84A4-3CFF883010F6")]
public interface EnvDTE.SelectionEvents {
}
[ComVisibleAttribute("False")]
[ComSourceInterfacesAttribute("EnvDTE._dispSelectionEvents")]
[GuidAttribute("AF37511E-9E9D-4234-A5A1-7584D290E061")]
[ClassInterfaceAttribute("0")]
public class EnvDTE.SelectionEventsClass : object {
}
[ComVisibleAttribute("False")]
[CoClassAttribute("EnvDTE.SolutionClass")]
[GuidAttribute("26F6CC4B-7A48-4E4D-8AF5-9E960232E05F")]
public interface EnvDTE.Solution {
}
[GuidAttribute("A3C1C40C-9218-4D4C-9DAA-075F64F6922C")]
public interface EnvDTE.SolutionBuild {
    [DispIdAttribute("1")]
public DTE DTE { get; }
    [DispIdAttribute("2")]
public Solution Parent { get; }
    [DispIdAttribute("3")]
public SolutionConfiguration ActiveConfiguration { get; }
    [DispIdAttribute("4")]
public BuildDependencies BuildDependencies { get; }
    [DispIdAttribute("5")]
public vsBuildState BuildState { get; }
    [DispIdAttribute("6")]
public int LastBuildInfo { get; }
    [DispIdAttribute("7")]
public object StartupProjects { get; public set; }
    [DispIdAttribute("13")]
public SolutionConfigurations SolutionConfigurations { get; }
    [DispIdAttribute("1")]
public abstract virtual DTE get_DTE();
    [DispIdAttribute("2")]
public abstract virtual Solution get_Parent();
    [DispIdAttribute("3")]
public abstract virtual SolutionConfiguration get_ActiveConfiguration();
    [DispIdAttribute("4")]
public abstract virtual BuildDependencies get_BuildDependencies();
    [DispIdAttribute("5")]
public abstract virtual vsBuildState get_BuildState();
    [DispIdAttribute("6")]
public abstract virtual int get_LastBuildInfo();
    [DispIdAttribute("7")]
public abstract virtual void set_StartupProjects(object value);
    [DispIdAttribute("7")]
public abstract virtual object get_StartupProjects();
    [DispIdAttribute("8")]
public abstract virtual void Build(bool WaitForBuildToFinish);
    [DispIdAttribute("9")]
public abstract virtual void Debug();
    [DispIdAttribute("10")]
public abstract virtual void Deploy(bool WaitForDeployToFinish);
    [DispIdAttribute("11")]
public abstract virtual void Clean(bool WaitForCleanToFinish);
    [DispIdAttribute("12")]
public abstract virtual void Run();
    [DispIdAttribute("13")]
public abstract virtual SolutionConfigurations get_SolutionConfigurations();
    [DispIdAttribute("14")]
public abstract virtual void BuildProject(string SolutionConfiguration, string ProjectUniqueName, bool WaitForBuildToFinish);
}
[GuidAttribute("B35CAA8C-77DE-4AB3-8E5A-F038E3FC6056")]
[ClassInterfaceAttribute("0")]
[DefaultMemberAttribute("Item")]
public class EnvDTE.SolutionClass : object {
}
[GuidAttribute("60AAAD75-CB8D-4C62-9959-24D6A6A50DE7")]
[DefaultMemberAttribute("Name")]
public interface EnvDTE.SolutionConfiguration {
    [DispIdAttribute("1")]
public DTE DTE { get; }
    [DispIdAttribute("2")]
public SolutionConfigurations Collection { get; }
    [DispIdAttribute("0")]
public string Name { get; }
    [DispIdAttribute("3")]
public SolutionContexts SolutionContexts { get; }
    [DispIdAttribute("1")]
public abstract virtual DTE get_DTE();
    [DispIdAttribute("2")]
public abstract virtual SolutionConfigurations get_Collection();
    [DispIdAttribute("0")]
public abstract virtual string get_Name();
    [DispIdAttribute("3")]
public abstract virtual SolutionContexts get_SolutionContexts();
    [DispIdAttribute("4")]
public abstract virtual void Delete();
    [DispIdAttribute("5")]
public abstract virtual void Activate();
}
[DefaultMemberAttribute("Item")]
[GuidAttribute("23E78ED7-C9E1-462D-8BC6-366003486ED9")]
public interface EnvDTE.SolutionConfigurations {
    [DispIdAttribute("1")]
public DTE DTE { get; }
    [DispIdAttribute("2")]
public SolutionBuild Parent { get; }
    [DispIdAttribute("4")]
public int Count { get; }
    [DispIdAttribute("-4")]
public abstract virtual IEnumerator GetEnumerator();
    [DispIdAttribute("0")]
public abstract virtual SolutionConfiguration Item(object index);
    [DispIdAttribute("1")]
public abstract virtual DTE get_DTE();
    [DispIdAttribute("2")]
public abstract virtual SolutionBuild get_Parent();
    [DispIdAttribute("3")]
public abstract virtual SolutionConfiguration Add(string NewName, string ExistingName, bool Propagate);
    [DispIdAttribute("4")]
public abstract virtual int get_Count();
}
[GuidAttribute("FC6A1A82-9C8A-47BB-A046-6E965DF5A99B")]
public interface EnvDTE.SolutionContext {
    [DispIdAttribute("1")]
public DTE DTE { get; }
    [DispIdAttribute("2")]
public SolutionContexts Collection { get; }
    [DispIdAttribute("3")]
public string ProjectName { get; }
    [DispIdAttribute("4")]
public string ConfigurationName { get; public set; }
    [DispIdAttribute("5")]
public string PlatformName { get; }
    [DispIdAttribute("6")]
public bool ShouldBuild { get; public set; }
    [DispIdAttribute("7")]
public bool ShouldDeploy { get; public set; }
    [DispIdAttribute("1")]
public abstract virtual DTE get_DTE();
    [DispIdAttribute("2")]
public abstract virtual SolutionContexts get_Collection();
    [DispIdAttribute("3")]
public abstract virtual string get_ProjectName();
    [DispIdAttribute("4")]
public abstract virtual string get_ConfigurationName();
    [DispIdAttribute("4")]
public abstract virtual void set_ConfigurationName(string value);
    [DispIdAttribute("5")]
public abstract virtual string get_PlatformName();
    [DispIdAttribute("6")]
public abstract virtual bool get_ShouldBuild();
    [DispIdAttribute("6")]
public abstract virtual void set_ShouldBuild(bool value);
    [DispIdAttribute("7")]
public abstract virtual bool get_ShouldDeploy();
    [DispIdAttribute("7")]
public abstract virtual void set_ShouldDeploy(bool value);
}
[GuidAttribute("0685B546-FB84-4917-AB98-98D40F892D61")]
[DefaultMemberAttribute("Item")]
public interface EnvDTE.SolutionContexts {
    [DispIdAttribute("1")]
public DTE DTE { get; }
    [DispIdAttribute("2")]
public SolutionConfiguration Parent { get; }
    [DispIdAttribute("3")]
public int Count { get; }
    [DispIdAttribute("1")]
public abstract virtual DTE get_DTE();
    [DispIdAttribute("2")]
public abstract virtual SolutionConfiguration get_Parent();
    [DispIdAttribute("-4")]
public abstract virtual IEnumerator GetEnumerator();
    [DispIdAttribute("0")]
public abstract virtual SolutionContext Item(object index);
    [DispIdAttribute("3")]
public abstract virtual int get_Count();
}
[ComVisibleAttribute("False")]
[GuidAttribute("BF8BBF37-5415-46A9-940D-594CAD9DEC26")]
[CoClassAttribute("EnvDTE.SolutionEventsClass")]
public interface EnvDTE.SolutionEvents {
}
[ComVisibleAttribute("False")]
[ComSourceInterfacesAttribute("EnvDTE._dispSolutionEvents")]
[GuidAttribute("88AC98C7-B38C-404B-BD86-D2A4F2E89DCA")]
[ClassInterfaceAttribute("0")]
public class EnvDTE.SolutionEventsClass : object {
}
[GuidAttribute("F1DDC2C2-DF76-4EBB-9DE8-48AD2557062C")]
public interface EnvDTE.SourceControl {
    [DispIdAttribute("1")]
public DTE DTE { get; }
    [DispIdAttribute("2")]
public DTE Parent { get; }
    [DispIdAttribute("1")]
public abstract virtual DTE get_DTE();
    [DispIdAttribute("2")]
public abstract virtual DTE get_Parent();
    [DispIdAttribute("3")]
public abstract virtual bool IsItemUnderSCC(string ItemName);
    [DispIdAttribute("4")]
public abstract virtual bool IsItemCheckedOut(string ItemName);
    [DispIdAttribute("5")]
public abstract virtual bool CheckOutItem(string ItemName);
    [DispIdAttribute("6")]
public abstract virtual bool CheckOutItems(Object[]& ItemNames);
    [DispIdAttribute("7")]
public abstract virtual void ExcludeItem(string ProjectFile, string ItemName);
    [DispIdAttribute("8")]
public abstract virtual void ExcludeItems(string ProjectFile, Object[]& ItemNames);
}
[DefaultMemberAttribute("FunctionName")]
[GuidAttribute("1342D0D8-BBA3-11D2-8AD1-00C04F79E479")]
public interface EnvDTE.StackFrame {
    [DispIdAttribute("100")]
public string Language { get; }
    [DispIdAttribute("0")]
public string FunctionName { get; }
    [DispIdAttribute("102")]
public string ReturnType { get; }
    [DispIdAttribute("103")]
public Expressions Locals { get; }
    [DispIdAttribute("104")]
public Expressions Arguments { get; }
    [DispIdAttribute("105")]
public string Module { get; }
    [DispIdAttribute("200")]
public DTE DTE { get; }
    [DispIdAttribute("201")]
public Thread Parent { get; }
    [DispIdAttribute("202")]
public StackFrames Collection { get; }
    [DispIdAttribute("100")]
public abstract virtual string get_Language();
    [DispIdAttribute("0")]
public abstract virtual string get_FunctionName();
    [DispIdAttribute("102")]
public abstract virtual string get_ReturnType();
    [DispIdAttribute("103")]
public abstract virtual Expressions get_Locals();
    [DispIdAttribute("104")]
public abstract virtual Expressions get_Arguments();
    [DispIdAttribute("105")]
public abstract virtual string get_Module();
    [DispIdAttribute("200")]
public abstract virtual DTE get_DTE();
    [DispIdAttribute("201")]
public abstract virtual Thread get_Parent();
    [DispIdAttribute("202")]
public abstract virtual StackFrames get_Collection();
}
[DefaultMemberAttribute("Item")]
[GuidAttribute("4ED85664-BBA2-11D2-8AD1-00C04F79E479")]
public interface EnvDTE.StackFrames {
    [DispIdAttribute("1")]
public DTE DTE { get; }
    [DispIdAttribute("2")]
public Debugger Parent { get; }
    [DispIdAttribute("3")]
public int Count { get; }
    [DispIdAttribute("0")]
public abstract virtual StackFrame Item(object index);
    [DispIdAttribute("-4")]
public abstract virtual IEnumerator GetEnumerator();
    [DispIdAttribute("1")]
public abstract virtual DTE get_DTE();
    [DispIdAttribute("2")]
public abstract virtual Debugger get_Parent();
    [DispIdAttribute("3")]
public abstract virtual int get_Count();
}
[GuidAttribute("C34301A1-3EF1-41D8-932A-FEA4A8A8CE0C")]
[DefaultMemberAttribute("Text")]
public interface EnvDTE.StatusBar {
    [DispIdAttribute("1")]
public DTE DTE { get; }
    [DispIdAttribute("2")]
public DTE Parent { get; }
    [DispIdAttribute("0")]
public string Text { get; public set; }
    [DispIdAttribute("1")]
public abstract virtual DTE get_DTE();
    [DispIdAttribute("2")]
public abstract virtual DTE get_Parent();
    [DispIdAttribute("4")]
public abstract virtual void Clear();
    [DispIdAttribute("5")]
public abstract virtual void Animate(bool On, object AnimationType);
    [DispIdAttribute("6")]
public abstract virtual void Progress(bool InProgress, string Label, int AmountCompleted, int Total);
    [DispIdAttribute("7")]
public abstract virtual void SetXYWidthHeight(int X, int Y, int Width, int Height);
    [DispIdAttribute("8")]
public abstract virtual void SetLineColumnCharacter(int Line, int Column, int Character);
    [DispIdAttribute("0")]
public abstract virtual void set_Text(string value);
    [DispIdAttribute("0")]
public abstract virtual string get_Text();
    [DispIdAttribute("9")]
public abstract virtual void Highlight(bool Highlight);
    [DispIdAttribute("10")]
public abstract virtual bool ShowTextUpdates(bool TextUpdates);
}
[TypeLibTypeAttribute("4160")]
[GuidAttribute("58E4D419-6B8C-4C63-92DE-70161CD95890")]
public interface EnvDTE.TaskItem {
    [DispIdAttribute("1")]
public DTE DTE { get; }
    [DispIdAttribute("2")]
public TaskItems Collection { get; }
    [DispIdAttribute("3")]
public string Category { get; }
    [DispIdAttribute("4")]
public string SubCategory { get; }
    [DispIdAttribute("5")]
public vsTaskPriority Priority { get; public set; }
    [DispIdAttribute("6")]
public string Description { get; public set; }
    [DispIdAttribute("7")]
public string FileName { get; public set; }
    [DispIdAttribute("8")]
public bool IsSettable { get; }
    [DispIdAttribute("9")]
public int Line { get; public set; }
    [DispIdAttribute("10")]
public bool Displayed { get; }
    [DispIdAttribute("11")]
public bool Checked { get; public set; }
    [DispIdAttribute("1")]
public abstract virtual DTE get_DTE();
    [DispIdAttribute("2")]
public abstract virtual TaskItems get_Collection();
    [DispIdAttribute("3")]
public abstract virtual string get_Category();
    [DispIdAttribute("4")]
public abstract virtual string get_SubCategory();
    [DispIdAttribute("5")]
public abstract virtual vsTaskPriority get_Priority();
    [DispIdAttribute("5")]
public abstract virtual void set_Priority(vsTaskPriority pPriority);
    [DispIdAttribute("6")]
public abstract virtual string get_Description();
    [DispIdAttribute("6")]
public abstract virtual void set_Description(string pDescription);
    [DispIdAttribute("7")]
public abstract virtual string get_FileName();
    [DispIdAttribute("7")]
public abstract virtual void set_FileName(string pFileName);
    [DispIdAttribute("8")]
public abstract virtual bool get_IsSettable(vsTaskListColumn Column);
    [DispIdAttribute("9")]
public abstract virtual int get_Line();
    [DispIdAttribute("9")]
public abstract virtual void set_Line(int pLine);
    [DispIdAttribute("10")]
public abstract virtual bool get_Displayed();
    [DispIdAttribute("11")]
public abstract virtual bool get_Checked();
    [DispIdAttribute("11")]
public abstract virtual void set_Checked(bool pChecked);
    [DispIdAttribute("12")]
public abstract virtual void Navigate();
    [DispIdAttribute("13")]
public abstract virtual void Delete();
    [DispIdAttribute("14")]
public abstract virtual void Select();
}
[GuidAttribute("4B51103D-513C-4773-B56A-354D0928FD04")]
[DefaultMemberAttribute("Item")]
public interface EnvDTE.TaskItems {
    [DispIdAttribute("1")]
public DTE DTE { get; }
    [DispIdAttribute("2")]
public TaskList Parent { get; }
    [DispIdAttribute("3")]
public int Count { get; }
    [DispIdAttribute("1")]
public abstract virtual DTE get_DTE();
    [DispIdAttribute("2")]
public abstract virtual TaskList get_Parent();
    [DispIdAttribute("0")]
public abstract virtual TaskItem Item(object index);
    [DispIdAttribute("3")]
public abstract virtual int get_Count();
    [DispIdAttribute("4")]
public abstract virtual TaskItem Add(string Category, string SubCategory, string Description, vsTaskPriority Priority, object Icon, bool Checkable, string File, int Line, bool CanUserDelete, bool FlushItem);
    [DispIdAttribute("-4")]
public abstract virtual IEnumerator GetEnumerator();
    [DispIdAttribute("6")]
public abstract virtual void ForceItemsToTaskList();
}
[GuidAttribute("4E4F0569-E16A-4DA1-92DE-10882A4DDD8C")]
public interface EnvDTE.TaskList {
    [DispIdAttribute("1")]
public DTE DTE { get; }
    [DispIdAttribute("2")]
public Window Parent { get; }
    [DispIdAttribute("3")]
public string DefaultCommentToken { get; }
    [DispIdAttribute("5")]
public TaskItems TaskItems { get; }
    [DispIdAttribute("6")]
public object SelectedItems { get; }
    [DispIdAttribute("1")]
public abstract virtual DTE get_DTE();
    [DispIdAttribute("2")]
public abstract virtual Window get_Parent();
    [DispIdAttribute("3")]
public abstract virtual string get_DefaultCommentToken();
    [DispIdAttribute("5")]
public abstract virtual TaskItems get_TaskItems();
    [DispIdAttribute("6")]
public abstract virtual object get_SelectedItems();
}
[ComVisibleAttribute("False")]
[GuidAttribute("1125C422-49BD-11D2-8823-00C04FB6C6FF")]
[CoClassAttribute("EnvDTE.TaskListEventsClass")]
public interface EnvDTE.TaskListEvents {
}
[ComVisibleAttribute("False")]
[ComSourceInterfacesAttribute("EnvDTE._dispTaskListEvents")]
[GuidAttribute("29617ACD-7859-4328-BE09-298F91F48196")]
[ClassInterfaceAttribute("0")]
public class EnvDTE.TaskListEventsClass : object {
}
[GuidAttribute("F47DC7E7-84B6-474F-BB91-631640AA0560")]
public interface EnvDTE.TextBuffer {
    public Window Parent { get; }
    public DTE DTE { get; }
    [DispIdAttribute("4")]
public int CountOfLines { get; }
    public abstract virtual Window get_Parent();
    public abstract virtual DTE get_DTE();
    [DispIdAttribute("1")]
public abstract virtual void AddFromString(string String, int StartLine);
    [DispIdAttribute("2")]
public abstract virtual void AddFromFile(string FileName, int StartLine);
    [DispIdAttribute("3")]
public abstract virtual string get_Lines(int startLine, int count);
    [DispIdAttribute("4")]
public abstract virtual int get_CountOfLines();
    [DispIdAttribute("6")]
public abstract virtual void DeleteLines(int StartLine, int Count);
    [DispIdAttribute("14")]
public abstract virtual bool Find(string Target, Int32& StartLine, Int32& StartColumn, Int32& EndLine, Int32& EndColumn, bool WholeWord, bool MatchCase, bool PatternSearch);
}
[GuidAttribute("CB218890-1382-472B-9118-782700C88115")]
public interface EnvDTE.TextDocument {
    [DispIdAttribute("150")]
public DTE DTE { get; }
    [DispIdAttribute("151")]
public Document Parent { get; }
    [DispIdAttribute("1")]
public TextSelection Selection { get; }
    [DispIdAttribute("132")]
public TextPoint StartPoint { get; }
    [DispIdAttribute("133")]
public TextPoint EndPoint { get; }
    [DispIdAttribute("137")]
public string Language { get; public set; }
    [DispIdAttribute("145")]
public string Type { get; }
    [DispIdAttribute("135")]
public int IndentSize { get; }
    [DispIdAttribute("140")]
public int TabSize { get; }
    [DispIdAttribute("150")]
public abstract virtual DTE get_DTE();
    [DispIdAttribute("151")]
public abstract virtual Document get_Parent();
    [DispIdAttribute("1")]
public abstract virtual TextSelection get_Selection();
    [DispIdAttribute("122")]
public abstract virtual void ClearBookmarks();
    [DispIdAttribute("124")]
public abstract virtual bool MarkText(string Pattern, int vsFindOptionsValue);
    [DispIdAttribute("128")]
public abstract virtual bool ReplacePattern(string Pattern, string Replace, int vsFindOptionsValue, TextRanges& Tags);
    [DispIdAttribute("131")]
public abstract virtual EditPoint CreateEditPoint(TextPoint TextPoint);
    [DispIdAttribute("132")]
public abstract virtual TextPoint get_StartPoint();
    [DispIdAttribute("133")]
public abstract virtual TextPoint get_EndPoint();
    [DispIdAttribute("137")]
public abstract virtual string get_Language();
    [DispIdAttribute("137")]
public abstract virtual void set_Language(string value);
    [DispIdAttribute("145")]
public abstract virtual string get_Type();
    [DispIdAttribute("135")]
public abstract virtual int get_IndentSize();
    [DispIdAttribute("140")]
public abstract virtual int get_TabSize();
    [DispIdAttribute("144")]
public abstract virtual bool ReplaceText(string FindText, string ReplaceText, int vsFindOptionsValue);
    [DispIdAttribute("134")]
public abstract virtual void PrintOut();
}
[GuidAttribute("9FF3DDCA-1795-4191-A5B1-02D1AE35D074")]
public interface EnvDTE.TextEditor {
    [DispIdAttribute("1")]
public DTE Application { get; }
    [DispIdAttribute("2")]
public DTE Parent { get; }
    [DispIdAttribute("3")]
public int Emulation { get; public set; }
    [DispIdAttribute("4")]
public bool Overtype { get; public set; }
    [DispIdAttribute("5")]
public bool VisibleWhitespace { get; public set; }
    [DispIdAttribute("1")]
public abstract virtual DTE get_Application();
    [DispIdAttribute("2")]
public abstract virtual DTE get_Parent();
    [DispIdAttribute("3")]
public abstract virtual int get_Emulation();
    [DispIdAttribute("3")]
public abstract virtual void set_Emulation(int value);
    [DispIdAttribute("4")]
public abstract virtual bool get_Overtype();
    [DispIdAttribute("4")]
public abstract virtual void set_Overtype(bool value);
    [DispIdAttribute("5")]
public abstract virtual bool get_VisibleWhitespace();
    [DispIdAttribute("5")]
public abstract virtual void set_VisibleWhitespace(bool value);
}
[ComVisibleAttribute("False")]
[GuidAttribute("23B7A868-6C89-436A-94FA-25D755456A77")]
[CoClassAttribute("EnvDTE.TextEditorEventsClass")]
public interface EnvDTE.TextEditorEvents {
}
[ComVisibleAttribute("False")]
[GuidAttribute("ADF22C37-0069-4ADF-B12D-D8D47C38FE79")]
[ComSourceInterfacesAttribute("EnvDTE._dispTextEditorEvents")]
[ClassInterfaceAttribute("0")]
public class EnvDTE.TextEditorEventsClass : object {
}
[GuidAttribute("0A3BF283-05F8-4669-9BCB-A84B6423349A")]
public interface EnvDTE.TextPane {
    [DispIdAttribute("1")]
public DTE DTE { get; }
    [DispIdAttribute("2")]
public TextPanes Collection { get; }
    [DispIdAttribute("3")]
public Window Window { get; }
    [DispIdAttribute("4")]
public int Height { get; }
    [DispIdAttribute("5")]
public int Width { get; }
    [DispIdAttribute("8")]
public TextSelection Selection { get; }
    [DispIdAttribute("9")]
public TextPoint StartPoint { get; }
    [DispIdAttribute("1")]
public abstract virtual DTE get_DTE();
    [DispIdAttribute("2")]
public abstract virtual TextPanes get_Collection();
    [DispIdAttribute("3")]
public abstract virtual Window get_Window();
    [DispIdAttribute("4")]
public abstract virtual int get_Height();
    [DispIdAttribute("5")]
public abstract virtual int get_Width();
    [DispIdAttribute("8")]
public abstract virtual TextSelection get_Selection();
    [DispIdAttribute("9")]
public abstract virtual TextPoint get_StartPoint();
    [DispIdAttribute("12")]
public abstract virtual void Activate();
    [DispIdAttribute("10")]
public abstract virtual bool IsVisible(TextPoint Point, object PointOrCount);
    [DispIdAttribute("11")]
public abstract virtual bool TryToShow(TextPoint Point, vsPaneShowHow How, object PointOrCount);
}
[GuidAttribute("D9013D31-3652-46B2-A25A-29A881B9F86B")]
[DefaultMemberAttribute("Item")]
public interface EnvDTE.TextPanes {
    [DispIdAttribute("1")]
public DTE DTE { get; }
    [DispIdAttribute("2")]
public TextWindow Parent { get; }
    [DispIdAttribute("3")]
public int Count { get; }
    [DispIdAttribute("1")]
public abstract virtual DTE get_DTE();
    [DispIdAttribute("2")]
public abstract virtual TextWindow get_Parent();
    [DispIdAttribute("3")]
public abstract virtual int get_Count();
    [DispIdAttribute("0")]
public abstract virtual TextPane Item(object index);
    [DispIdAttribute("-4")]
public abstract virtual IEnumerator GetEnumerator();
}
[GuidAttribute("7F59E94E-4939-40D2-9F7F-B7651C25905D")]
[TypeLibTypeAttribute("4160")]
public interface EnvDTE.TextPoint {
    [DispIdAttribute("1")]
public DTE DTE { get; }
    [DispIdAttribute("2")]
public TextDocument Parent { get; }
    [DispIdAttribute("11")]
public int Line { get; }
    [DispIdAttribute("12")]
public int LineCharOffset { get; }
    [DispIdAttribute("13")]
public int AbsoluteCharOffset { get; }
    [DispIdAttribute("14")]
public int DisplayColumn { get; }
    [DispIdAttribute("21")]
public bool AtEndOfDocument { get; }
    [DispIdAttribute("22")]
public bool AtStartOfDocument { get; }
    [DispIdAttribute("23")]
public bool AtEndOfLine { get; }
    [DispIdAttribute("24")]
public bool AtStartOfLine { get; }
    [DispIdAttribute("25")]
public int LineLength { get; }
    [DispIdAttribute("51")]
public CodeElement CodeElement { get; }
    [DispIdAttribute("1")]
public abstract virtual DTE get_DTE();
    [DispIdAttribute("2")]
public abstract virtual TextDocument get_Parent();
    [DispIdAttribute("11")]
public abstract virtual int get_Line();
    [DispIdAttribute("12")]
public abstract virtual int get_LineCharOffset();
    [DispIdAttribute("13")]
public abstract virtual int get_AbsoluteCharOffset();
    [DispIdAttribute("14")]
public abstract virtual int get_DisplayColumn();
    [DispIdAttribute("21")]
public abstract virtual bool get_AtEndOfDocument();
    [DispIdAttribute("22")]
public abstract virtual bool get_AtStartOfDocument();
    [DispIdAttribute("23")]
public abstract virtual bool get_AtEndOfLine();
    [DispIdAttribute("24")]
public abstract virtual bool get_AtStartOfLine();
    [DispIdAttribute("25")]
public abstract virtual int get_LineLength();
    [DispIdAttribute("31")]
public abstract virtual bool EqualTo(TextPoint Point);
    [DispIdAttribute("32")]
public abstract virtual bool LessThan(TextPoint Point);
    [DispIdAttribute("33")]
public abstract virtual bool GreaterThan(TextPoint Point);
    [DispIdAttribute("50")]
public abstract virtual bool TryToShow(vsPaneShowHow How, object PointOrCount);
    [DispIdAttribute("51")]
public abstract virtual CodeElement get_CodeElement(vsCMElement Scope);
    [DispIdAttribute("34")]
public abstract virtual EditPoint CreateEditPoint();
}
[GuidAttribute("72767524-E3B3-43D0-BB46-BBE1D556A9FF")]
public interface EnvDTE.TextRange {
    [DispIdAttribute("1")]
public DTE DTE { get; }
    [DispIdAttribute("2")]
public TextRanges Collection { get; }
    [DispIdAttribute("3")]
public EditPoint StartPoint { get; }
    [DispIdAttribute("4")]
public EditPoint EndPoint { get; }
    [DispIdAttribute("1")]
public abstract virtual DTE get_DTE();
    [DispIdAttribute("2")]
public abstract virtual TextRanges get_Collection();
    [DispIdAttribute("3")]
public abstract virtual EditPoint get_StartPoint();
    [DispIdAttribute("4")]
public abstract virtual EditPoint get_EndPoint();
}
[GuidAttribute("B6422E9C-9EFD-4F87-BDDC-C7FD8F2FD303")]
[DefaultMemberAttribute("Item")]
public interface EnvDTE.TextRanges {
    [DispIdAttribute("1")]
public DTE DTE { get; }
    [DispIdAttribute("2")]
public TextDocument Parent { get; }
    [DispIdAttribute("3")]
public int Count { get; }
    [DispIdAttribute("1")]
public abstract virtual DTE get_DTE();
    [DispIdAttribute("2")]
public abstract virtual TextDocument get_Parent();
    [DispIdAttribute("3")]
public abstract virtual int get_Count();
    [DispIdAttribute("0")]
public abstract virtual TextRange Item(object index);
    [DispIdAttribute("-4")]
public abstract virtual IEnumerator GetEnumerator();
}
[DefaultMemberAttribute("Text")]
[GuidAttribute("1FA0E135-399A-4D2C-A4FE-D21E2480F921")]
public interface EnvDTE.TextSelection {
    [DispIdAttribute("1")]
public DTE DTE { get; }
    [DispIdAttribute("2")]
public TextDocument Parent { get; }
    [DispIdAttribute("3")]
public VirtualPoint AnchorPoint { get; }
    [DispIdAttribute("4")]
public VirtualPoint ActivePoint { get; }
    [DispIdAttribute("5")]
public int AnchorColumn { get; }
    [DispIdAttribute("6")]
public int BottomLine { get; }
    [DispIdAttribute("7")]
public VirtualPoint BottomPoint { get; }
    [DispIdAttribute("8")]
public int CurrentColumn { get; }
    [DispIdAttribute("9")]
public int CurrentLine { get; }
    [DispIdAttribute("10")]
public bool IsEmpty { get; }
    [DispIdAttribute("11")]
public bool IsActiveEndGreater { get; }
    [DispIdAttribute("0")]
public string Text { get; public set; }
    [DispIdAttribute("13")]
public int TopLine { get; }
    [DispIdAttribute("14")]
public VirtualPoint TopPoint { get; }
    [DispIdAttribute("54")]
public TextPane TextPane { get; }
    [DispIdAttribute("55")]
public vsSelectionMode Mode { get; public set; }
    [DispIdAttribute("56")]
public TextRanges TextRanges { get; }
    [DispIdAttribute("1")]
public abstract virtual DTE get_DTE();
    [DispIdAttribute("2")]
public abstract virtual TextDocument get_Parent();
    [DispIdAttribute("3")]
public abstract virtual VirtualPoint get_AnchorPoint();
    [DispIdAttribute("4")]
public abstract virtual VirtualPoint get_ActivePoint();
    [DispIdAttribute("5")]
public abstract virtual int get_AnchorColumn();
    [DispIdAttribute("6")]
public abstract virtual int get_BottomLine();
    [DispIdAttribute("7")]
public abstract virtual VirtualPoint get_BottomPoint();
    [DispIdAttribute("8")]
public abstract virtual int get_CurrentColumn();
    [DispIdAttribute("9")]
public abstract virtual int get_CurrentLine();
    [DispIdAttribute("10")]
public abstract virtual bool get_IsEmpty();
    [DispIdAttribute("11")]
public abstract virtual bool get_IsActiveEndGreater();
    [DispIdAttribute("0")]
public abstract virtual string get_Text();
    [DispIdAttribute("0")]
public abstract virtual void set_Text(string value);
    [DispIdAttribute("13")]
public abstract virtual int get_TopLine();
    [DispIdAttribute("14")]
public abstract virtual VirtualPoint get_TopPoint();
    [DispIdAttribute("15")]
public abstract virtual void ChangeCase(vsCaseOptions How);
    [DispIdAttribute("16")]
public abstract virtual void CharLeft(bool Extend, int Count);
    [DispIdAttribute("17")]
public abstract virtual void CharRight(bool Extend, int Count);
    [DispIdAttribute("18")]
public abstract virtual void ClearBookmark();
    [DispIdAttribute("19")]
public abstract virtual void Collapse();
    [DispIdAttribute("72")]
public abstract virtual void OutlineSection();
    [DispIdAttribute("20")]
public abstract virtual void Copy();
    [DispIdAttribute("21")]
public abstract virtual void Cut();
    [DispIdAttribute("22")]
public abstract virtual void Paste();
    [DispIdAttribute("23")]
public abstract virtual void Delete(int Count);
    [DispIdAttribute("24")]
public abstract virtual void DeleteLeft(int Count);
    [DispIdAttribute("25")]
public abstract virtual void DeleteWhitespace(vsWhitespaceOptions Direction);
    [DispIdAttribute("26")]
public abstract virtual void EndOfLine(bool Extend);
    [DispIdAttribute("27")]
public abstract virtual void StartOfLine(vsStartOfLineOptions Where, bool Extend);
    [DispIdAttribute("28")]
public abstract virtual void EndOfDocument(bool Extend);
    [DispIdAttribute("29")]
public abstract virtual void StartOfDocument(bool Extend);
    [DispIdAttribute("30")]
public abstract virtual bool FindPattern(string Pattern, int vsFindOptionsValue, TextRanges& Tags);
    [DispIdAttribute("31")]
public abstract virtual bool ReplacePattern(string Pattern, string Replace, int vsFindOptionsValue, TextRanges& Tags);
    [DispIdAttribute("70")]
public abstract virtual bool FindText(string Pattern, int vsFindOptionsValue);
    [DispIdAttribute("71")]
public abstract virtual bool ReplaceText(string Pattern, string Replace, int vsFindOptionsValue);
    [DispIdAttribute("32")]
public abstract virtual void GotoLine(int Line, bool Select);
    [DispIdAttribute("33")]
public abstract virtual void Indent(int Count);
    [DispIdAttribute("34")]
public abstract virtual void Unindent(int Count);
    [DispIdAttribute("35")]
public abstract virtual void Insert(string Text, int vsInsertFlagsCollapseToEndValue);
    [DispIdAttribute("61")]
public abstract virtual void InsertFromFile(string File);
    [DispIdAttribute("36")]
public abstract virtual void LineDown(bool Extend, int Count);
    [DispIdAttribute("37")]
public abstract virtual void LineUp(bool Extend, int Count);
    [DispIdAttribute("38")]
public abstract virtual void MoveToPoint(TextPoint Point, bool Extend);
    [DispIdAttribute("39")]
public abstract virtual void MoveToLineAndOffset(int Line, int Offset, bool Extend);
    [DispIdAttribute("40")]
public abstract virtual void MoveToAbsoluteOffset(int Offset, bool Extend);
    [DispIdAttribute("41")]
public abstract virtual void NewLine(int Count);
    [DispIdAttribute("42")]
public abstract virtual void SetBookmark();
    [DispIdAttribute("43")]
public abstract virtual bool NextBookmark();
    [DispIdAttribute("44")]
public abstract virtual bool PreviousBookmark();
    [DispIdAttribute("45")]
public abstract virtual void PadToColumn(int Column);
    [DispIdAttribute("46")]
public abstract virtual void SmartFormat();
    [DispIdAttribute("47")]
public abstract virtual void SelectAll();
    [DispIdAttribute("48")]
public abstract virtual void SelectLine();
    [DispIdAttribute("49")]
public abstract virtual void SwapAnchor();
    [DispIdAttribute("50")]
public abstract virtual void Tabify();
    [DispIdAttribute("51")]
public abstract virtual void Untabify();
    [DispIdAttribute("52")]
public abstract virtual void WordLeft(bool Extend, int Count);
    [DispIdAttribute("53")]
public abstract virtual void WordRight(bool Extend, int Count);
    [DispIdAttribute("54")]
public abstract virtual TextPane get_TextPane();
    [DispIdAttribute("55")]
public abstract virtual vsSelectionMode get_Mode();
    [DispIdAttribute("55")]
public abstract virtual void set_Mode(vsSelectionMode value);
    [DispIdAttribute("56")]
public abstract virtual TextRanges get_TextRanges();
    [DispIdAttribute("80")]
public abstract virtual void Backspace(int Count);
    [DispIdAttribute("81")]
public abstract virtual void Cancel();
    [DispIdAttribute("57")]
public abstract virtual void DestructiveInsert(string Text);
    [DispIdAttribute("82")]
public abstract virtual void MoveTo(int Line, int Column, bool Extend);
    [DispIdAttribute("58")]
public abstract virtual void MoveToDisplayColumn(int Line, int Column, bool Extend);
    [DispIdAttribute("59")]
public abstract virtual void PageUp(bool Extend, int Count);
    [DispIdAttribute("60")]
public abstract virtual void PageDown(bool Extend, int Count);
}
[GuidAttribute("2FC54DC9-922B-44EB-8CC0-BA182584DC4B")]
public interface EnvDTE.TextWindow {
    [DispIdAttribute("1")]
public DTE DTE { get; }
    [DispIdAttribute("2")]
public Window Parent { get; }
    [DispIdAttribute("3")]
public TextSelection Selection { get; }
    [DispIdAttribute("4")]
public TextPane ActivePane { get; }
    [DispIdAttribute("5")]
public TextPanes Panes { get; }
    [DispIdAttribute("1")]
public abstract virtual DTE get_DTE();
    [DispIdAttribute("2")]
public abstract virtual Window get_Parent();
    [DispIdAttribute("3")]
public abstract virtual TextSelection get_Selection();
    [DispIdAttribute("4")]
public abstract virtual TextPane get_ActivePane();
    [DispIdAttribute("5")]
public abstract virtual TextPanes get_Panes();
}
[DefaultMemberAttribute("Name")]
[GuidAttribute("9407F466-BBA1-11D2-8AD1-00C04F79E479")]
public interface EnvDTE.Thread {
    [DispIdAttribute("0")]
public string Name { get; }
    [DispIdAttribute("100")]
public int SuspendCount { get; }
    [DispIdAttribute("101")]
public int ID { get; }
    [DispIdAttribute("102")]
public StackFrames StackFrames { get; }
    [DispIdAttribute("103")]
public Program Program { get; }
    [DispIdAttribute("104")]
public bool IsAlive { get; }
    [DispIdAttribute("105")]
public string Priority { get; }
    [DispIdAttribute("106")]
public string Location { get; }
    [DispIdAttribute("107")]
public bool IsFrozen { get; }
    [DispIdAttribute("200")]
public DTE DTE { get; }
    [DispIdAttribute("201")]
public Debugger Parent { get; }
    [DispIdAttribute("202")]
public Threads Collection { get; }
    [DispIdAttribute("1")]
public abstract virtual void Freeze();
    [DispIdAttribute("2")]
public abstract virtual void Thaw();
    [DispIdAttribute("0")]
public abstract virtual string get_Name();
    [DispIdAttribute("100")]
public abstract virtual int get_SuspendCount();
    [DispIdAttribute("101")]
public abstract virtual int get_ID();
    [DispIdAttribute("102")]
public abstract virtual StackFrames get_StackFrames();
    [DispIdAttribute("103")]
public abstract virtual Program get_Program();
    [DispIdAttribute("104")]
public abstract virtual bool get_IsAlive();
    [DispIdAttribute("105")]
public abstract virtual string get_Priority();
    [DispIdAttribute("106")]
public abstract virtual string get_Location();
    [DispIdAttribute("107")]
public abstract virtual bool get_IsFrozen();
    [DispIdAttribute("200")]
public abstract virtual DTE get_DTE();
    [DispIdAttribute("201")]
public abstract virtual Debugger get_Parent();
    [DispIdAttribute("202")]
public abstract virtual Threads get_Collection();
}
[DefaultMemberAttribute("Item")]
[GuidAttribute("6AA23FB4-BBA1-11D2-8AD1-00C04F79E479")]
public interface EnvDTE.Threads {
    [DispIdAttribute("1")]
public DTE DTE { get; }
    [DispIdAttribute("2")]
public Debugger Parent { get; }
    [DispIdAttribute("3")]
public int Count { get; }
    [DispIdAttribute("0")]
public abstract virtual Thread Item(object index);
    [DispIdAttribute("-4")]
public abstract virtual IEnumerator GetEnumerator();
    [DispIdAttribute("1")]
public abstract virtual DTE get_DTE();
    [DispIdAttribute("2")]
public abstract virtual Debugger get_Parent();
    [DispIdAttribute("3")]
public abstract virtual int get_Count();
}
[GuidAttribute("56FCD5AF-7F17-4C5C-AA8D-AE2BB2DDBF38")]
public interface EnvDTE.ToolBox {
    [DispIdAttribute("1")]
public DTE DTE { get; }
    [DispIdAttribute("2")]
public Window Parent { get; }
    [DispIdAttribute("3")]
public ToolBoxTab ActiveTab { get; }
    [DispIdAttribute("4")]
public ToolBoxTabs ToolBoxTabs { get; }
    [DispIdAttribute("1")]
public abstract virtual DTE get_DTE();
    [DispIdAttribute("2")]
public abstract virtual Window get_Parent();
    [DispIdAttribute("3")]
public abstract virtual ToolBoxTab get_ActiveTab();
    [DispIdAttribute("4")]
public abstract virtual ToolBoxTabs get_ToolBoxTabs();
}
[DefaultMemberAttribute("Name")]
[GuidAttribute("46538D1B-4D81-4002-8BB4-DBDB65BABB23")]
public interface EnvDTE.ToolBoxItem {
    [DispIdAttribute("0")]
public string Name { get; public set; }
    [DispIdAttribute("1")]
public ToolBoxItems Collection { get; }
    [DispIdAttribute("2")]
public DTE DTE { get; }
    [DispIdAttribute("0")]
public abstract virtual string get_Name();
    [DispIdAttribute("0")]
public abstract virtual void set_Name(string value);
    [DispIdAttribute("1")]
public abstract virtual ToolBoxItems get_Collection();
    [DispIdAttribute("2")]
public abstract virtual DTE get_DTE();
    [DispIdAttribute("3")]
public abstract virtual void Delete();
    [DispIdAttribute("4")]
public abstract virtual void Select();
}
[DefaultMemberAttribute("Item")]
[GuidAttribute("395C7DFB-F158-431C-8F43-DDA83B4EF54E")]
public interface EnvDTE.ToolBoxItems {
    [DispIdAttribute("1")]
public ToolBoxTab Parent { get; }
    [DispIdAttribute("2")]
public DTE DTE { get; }
    [DispIdAttribute("3")]
public int Count { get; }
    [DispIdAttribute("5")]
public ToolBoxItem SelectedItem { get; }
    [DispIdAttribute("-4")]
public abstract virtual IEnumerator GetEnumerator();
    [DispIdAttribute("0")]
public abstract virtual ToolBoxItem Item(object index);
    [DispIdAttribute("1")]
public abstract virtual ToolBoxTab get_Parent();
    [DispIdAttribute("2")]
public abstract virtual DTE get_DTE();
    [DispIdAttribute("3")]
public abstract virtual int get_Count();
    [DispIdAttribute("4")]
public abstract virtual ToolBoxItem Add(string Name, object Data, vsToolBoxItemFormat Format);
    [DispIdAttribute("5")]
public abstract virtual ToolBoxItem get_SelectedItem();
}
[DefaultMemberAttribute("Name")]
[GuidAttribute("CE2DEF9E-3387-4BF2-967B-A1F7F70DF325")]
public interface EnvDTE.ToolBoxTab {
    [DispIdAttribute("0")]
public string Name { get; public set; }
    [DispIdAttribute("1")]
public ToolBoxTabs Collection { get; }
    [DispIdAttribute("2")]
public DTE DTE { get; }
    [DispIdAttribute("6")]
public ToolBoxItems ToolBoxItems { get; }
    [DispIdAttribute("8")]
public bool ListView { get; public set; }
    [DispIdAttribute("0")]
public abstract virtual string get_Name();
    [DispIdAttribute("0")]
public abstract virtual void set_Name(string value);
    [DispIdAttribute("1")]
public abstract virtual ToolBoxTabs get_Collection();
    [DispIdAttribute("2")]
public abstract virtual DTE get_DTE();
    [DispIdAttribute("4")]
public abstract virtual void Activate();
    [DispIdAttribute("5")]
public abstract virtual void Delete();
    [DispIdAttribute("6")]
public abstract virtual ToolBoxItems get_ToolBoxItems();
    [DispIdAttribute("8")]
public abstract virtual bool get_ListView();
    [DispIdAttribute("8")]
public abstract virtual void set_ListView(bool value);
}
[GuidAttribute("CF177B52-4F2F-42A0-8DA3-CE78679A0D2D")]
[DefaultMemberAttribute("Item")]
public interface EnvDTE.ToolBoxTabs {
    [DispIdAttribute("1")]
public DTE DTE { get; }
    [DispIdAttribute("2")]
public ToolBox Parent { get; }
    [DispIdAttribute("3")]
public int Count { get; }
    [DispIdAttribute("-4")]
public abstract virtual IEnumerator GetEnumerator();
    [DispIdAttribute("0")]
public abstract virtual ToolBoxTab Item(object index);
    [DispIdAttribute("1")]
public abstract virtual DTE get_DTE();
    [DispIdAttribute("2")]
public abstract virtual ToolBox get_Parent();
    [DispIdAttribute("3")]
public abstract virtual int get_Count();
    [DispIdAttribute("4")]
public abstract virtual ToolBoxTab Add(string Name);
}
[DefaultMemberAttribute("DoDefaultAction")]
[GuidAttribute("72A2A2EF-C209-408C-A377-76871774ADB7")]
public interface EnvDTE.UIHierarchy {
    [DispIdAttribute("1")]
public DTE DTE { get; }
    [DispIdAttribute("2")]
public Window Parent { get; }
    [DispIdAttribute("3")]
public UIHierarchyItems UIHierarchyItems { get; }
    [DispIdAttribute("4")]
public object SelectedItems { get; }
    [DispIdAttribute("1")]
public abstract virtual DTE get_DTE();
    [DispIdAttribute("2")]
public abstract virtual Window get_Parent();
    [DispIdAttribute("3")]
public abstract virtual UIHierarchyItems get_UIHierarchyItems();
    [DispIdAttribute("4")]
public abstract virtual object get_SelectedItems();
    [DispIdAttribute("5")]
public abstract virtual UIHierarchyItem GetItem(string Names);
    [DispIdAttribute("6")]
public abstract virtual void SelectUp(vsUISelectionType How, int Count);
    [DispIdAttribute("7")]
public abstract virtual void SelectDown(vsUISelectionType How, int Count);
    [DispIdAttribute("0")]
public abstract virtual void DoDefaultAction();
}
[GuidAttribute("FBD0D024-09CD-4D9F-9E2B-CACD628426A5")]
[DefaultMemberAttribute("Name")]
public interface EnvDTE.UIHierarchyItem {
    [DispIdAttribute("1")]
public DTE DTE { get; }
    [DispIdAttribute("2")]
public UIHierarchyItems Collection { get; }
    [DispIdAttribute("0")]
public string Name { get; }
    [DispIdAttribute("3")]
public UIHierarchyItems UIHierarchyItems { get; }
    [DispIdAttribute("4")]
public object Object { get; }
    [DispIdAttribute("6")]
public bool IsSelected { get; }
    [DispIdAttribute("1")]
public abstract virtual DTE get_DTE();
    [DispIdAttribute("2")]
public abstract virtual UIHierarchyItems get_Collection();
    [DispIdAttribute("0")]
public abstract virtual string get_Name();
    [DispIdAttribute("3")]
public abstract virtual UIHierarchyItems get_UIHierarchyItems();
    [DispIdAttribute("4")]
public abstract virtual object get_Object();
    [DispIdAttribute("5")]
public abstract virtual void Select(vsUISelectionType How);
    [DispIdAttribute("6")]
public abstract virtual bool get_IsSelected();
}
[DefaultMemberAttribute("Item")]
[GuidAttribute("DB8406B0-A916-449C-A277-BB04028F4394")]
public interface EnvDTE.UIHierarchyItems {
    [DispIdAttribute("1")]
public DTE DTE { get; }
    [DispIdAttribute("2")]
public object Parent { get; }
    [DispIdAttribute("3")]
public int Count { get; }
    [DispIdAttribute("5")]
public bool Expanded { get; public set; }
    [DispIdAttribute("1")]
public abstract virtual DTE get_DTE();
    [DispIdAttribute("2")]
public abstract virtual object get_Parent();
    [DispIdAttribute("3")]
public abstract virtual int get_Count();
    [DispIdAttribute("0")]
public abstract virtual UIHierarchyItem Item(object index);
    [DispIdAttribute("5")]
public abstract virtual bool get_Expanded();
    [DispIdAttribute("5")]
public abstract virtual void set_Expanded(bool value);
    [DispIdAttribute("-4")]
public abstract virtual IEnumerator GetEnumerator();
}
[GuidAttribute("D8DEC44D-CAF2-4B39-A539-B91AE921BA92")]
public interface EnvDTE.UndoContext {
    [DispIdAttribute("1")]
public DTE DTE { get; }
    [DispIdAttribute("2")]
public DTE Parent { get; }
    [DispIdAttribute("6")]
public bool IsStrict { get; }
    [DispIdAttribute("7")]
public bool IsAborted { get; }
    [DispIdAttribute("8")]
public bool IsOpen { get; }
    [DispIdAttribute("1")]
public abstract virtual DTE get_DTE();
    [DispIdAttribute("2")]
public abstract virtual DTE get_Parent();
    [DispIdAttribute("3")]
public abstract virtual void Open(string Name, bool Strict);
    [DispIdAttribute("4")]
public abstract virtual void Close();
    [DispIdAttribute("5")]
public abstract virtual void SetAborted();
    [DispIdAttribute("6")]
public abstract virtual bool get_IsStrict();
    [DispIdAttribute("7")]
public abstract virtual bool get_IsAborted();
    [DispIdAttribute("8")]
public abstract virtual bool get_IsOpen();
}
[TypeLibTypeAttribute("4160")]
[GuidAttribute("42320454-626C-4DD0-9ECB-357C4F1966D8")]
public interface EnvDTE.VirtualPoint {
    [DispIdAttribute("1")]
public DTE DTE { get; }
    [DispIdAttribute("2")]
public TextDocument Parent { get; }
    [DispIdAttribute("11")]
public int Line { get; }
    [DispIdAttribute("12")]
public int LineCharOffset { get; }
    [DispIdAttribute("13")]
public int AbsoluteCharOffset { get; }
    [DispIdAttribute("14")]
public int DisplayColumn { get; }
    [DispIdAttribute("21")]
public bool AtEndOfDocument { get; }
    [DispIdAttribute("22")]
public bool AtStartOfDocument { get; }
    [DispIdAttribute("23")]
public bool AtEndOfLine { get; }
    [DispIdAttribute("24")]
public bool AtStartOfLine { get; }
    [DispIdAttribute("25")]
public int LineLength { get; }
    [DispIdAttribute("51")]
public CodeElement CodeElement { get; }
    [DispIdAttribute("101")]
public int VirtualCharOffset { get; }
    [DispIdAttribute("102")]
public int VirtualDisplayColumn { get; }
    [DispIdAttribute("1")]
public abstract virtual DTE get_DTE();
    [DispIdAttribute("2")]
public abstract virtual TextDocument get_Parent();
    [DispIdAttribute("11")]
public abstract virtual int get_Line();
    [DispIdAttribute("12")]
public abstract virtual int get_LineCharOffset();
    [DispIdAttribute("13")]
public abstract virtual int get_AbsoluteCharOffset();
    [DispIdAttribute("14")]
public abstract virtual int get_DisplayColumn();
    [DispIdAttribute("21")]
public abstract virtual bool get_AtEndOfDocument();
    [DispIdAttribute("22")]
public abstract virtual bool get_AtStartOfDocument();
    [DispIdAttribute("23")]
public abstract virtual bool get_AtEndOfLine();
    [DispIdAttribute("24")]
public abstract virtual bool get_AtStartOfLine();
    [DispIdAttribute("25")]
public abstract virtual int get_LineLength();
    [DispIdAttribute("31")]
public abstract virtual bool EqualTo(TextPoint Point);
    [DispIdAttribute("32")]
public abstract virtual bool LessThan(TextPoint Point);
    [DispIdAttribute("33")]
public abstract virtual bool GreaterThan(TextPoint Point);
    [DispIdAttribute("50")]
public abstract virtual bool TryToShow(vsPaneShowHow How, object PointOrCount);
    [DispIdAttribute("51")]
public abstract virtual CodeElement get_CodeElement(vsCMElement Scope);
    [DispIdAttribute("34")]
public abstract virtual EditPoint CreateEditPoint();
    [DispIdAttribute("101")]
public abstract virtual int get_VirtualCharOffset();
    [DispIdAttribute("102")]
public abstract virtual int get_VirtualDisplayColumn();
}
[GuidAttribute("CB0066FC-C052-4B24-84E7-045F33E4D6AF")]
public enum EnvDTE.vs_exec_Result : Enum {
    public int value__;
    public static vs_exec_Result RESULT_Success;
    public static vs_exec_Result RESULT_Failure;
    public static vs_exec_Result RESULT_Cancel;
}
[GuidAttribute("947FFC03-8314-4288-BDD7-DFD282DA40D5")]
public enum EnvDTE.vsBrowserViewSource : Enum {
    public int value__;
    public static vsBrowserViewSource vsBrowserViewSourceSource;
    public static vsBrowserViewSource vsBrowserViewSourceDesign;
    public static vsBrowserViewSource vsBrowserViewSourceExternal;
}
[GuidAttribute("FA7FA702-EFAD-4895-A95A-D4ECB383BF7D")]
public enum EnvDTE.vsBuildAction : Enum {
    public int value__;
    public static vsBuildAction vsBuildActionBuild;
    public static vsBuildAction vsBuildActionRebuildAll;
    public static vsBuildAction vsBuildActionClean;
    public static vsBuildAction vsBuildActionDeploy;
}
[GuidAttribute("3982FA28-7BCC-4F14-817C-93EEECE8BEEE")]
public enum EnvDTE.vsBuildKind : Enum {
    public int value__;
    public static vsBuildKind vsBuildKindSolution;
    public static vsBuildKind vsBuildKindProject;
    public static vsBuildKind vsBuildKindProjectItem;
}
[GuidAttribute("FA7FA701-EFAD-4895-A95A-D4ECB383BF7D")]
public enum EnvDTE.vsBuildScope : Enum {
    public int value__;
    public static vsBuildScope vsBuildScopeSolution;
    public static vsBuildScope vsBuildScopeBatch;
    public static vsBuildScope vsBuildScopeProject;
}
[GuidAttribute("16386F0E-4AD2-41B8-8D6F-7FF230AE1D17")]
public enum EnvDTE.vsBuildState : Enum {
    public int value__;
    public static vsBuildState vsBuildStateNotStarted;
    public static vsBuildState vsBuildStateInProgress;
    public static vsBuildState vsBuildStateDone;
}
[GuidAttribute("98A2F403-007B-41F8-9A18-87ADDEF1760F")]
public enum EnvDTE.vsCaseOptions : Enum {
    public int value__;
    public static vsCaseOptions vsCaseOptionsLowercase;
    public static vsCaseOptions vsCaseOptionsUppercase;
    public static vsCaseOptions vsCaseOptionsCapitalize;
}
public enum EnvDTE.vsCMAccess : Enum {
    public int value__;
    public static vsCMAccess vsCMAccessPublic;
    public static vsCMAccess vsCMAccessPrivate;
    public static vsCMAccess vsCMAccessProject;
    public static vsCMAccess vsCMAccessProtected;
    public static vsCMAccess vsCMAccessDefault;
    public static vsCMAccess vsCMAccessAssemblyOrFamily;
    public static vsCMAccess vsCMAccessWithEvents;
    public static vsCMAccess vsCMAccessProjectOrProtected;
}
public enum EnvDTE.vsCMElement : Enum {
    public int value__;
    public static vsCMElement vsCMElementOther;
    public static vsCMElement vsCMElementClass;
    public static vsCMElement vsCMElementFunction;
    public static vsCMElement vsCMElementVariable;
    public static vsCMElement vsCMElementProperty;
    public static vsCMElement vsCMElementNamespace;
    public static vsCMElement vsCMElementParameter;
    public static vsCMElement vsCMElementAttribute;
    public static vsCMElement vsCMElementInterface;
    public static vsCMElement vsCMElementDelegate;
    public static vsCMElement vsCMElementEnum;
    public static vsCMElement vsCMElementStruct;
    public static vsCMElement vsCMElementUnion;
    public static vsCMElement vsCMElementLocalDeclStmt;
    public static vsCMElement vsCMElementFunctionInvokeStmt;
    public static vsCMElement vsCMElementPropertySetStmt;
    public static vsCMElement vsCMElementAssignmentStmt;
    public static vsCMElement vsCMElementInheritsStmt;
    public static vsCMElement vsCMElementImplementsStmt;
    public static vsCMElement vsCMElementOptionStmt;
    public static vsCMElement vsCMElementVBAttributeStmt;
    public static vsCMElement vsCMElementVBAttributeGroup;
    public static vsCMElement vsCMElementEventsDeclaration;
    public static vsCMElement vsCMElementUDTDecl;
    public static vsCMElement vsCMElementDeclareDecl;
    public static vsCMElement vsCMElementDefineStmt;
    public static vsCMElement vsCMElementTypeDef;
    public static vsCMElement vsCMElementIncludeStmt;
    public static vsCMElement vsCMElementUsingStmt;
    public static vsCMElement vsCMElementMacro;
    public static vsCMElement vsCMElementMap;
    public static vsCMElement vsCMElementIDLImport;
    public static vsCMElement vsCMElementIDLImportLib;
    public static vsCMElement vsCMElementIDLCoClass;
    public static vsCMElement vsCMElementIDLLibrary;
    public static vsCMElement vsCMElementImportStmt;
    public static vsCMElement vsCMElementMapEntry;
    public static vsCMElement vsCMElementVCBase;
    public static vsCMElement vsCMElementEvent;
    public static vsCMElement vsCMElementModule;
}
public enum EnvDTE.vsCMFunction : Enum {
    public int value__;
    public static vsCMFunction vsCMFunctionOther;
    public static vsCMFunction vsCMFunctionConstructor;
    public static vsCMFunction vsCMFunctionPropertyGet;
    public static vsCMFunction vsCMFunctionPropertyLet;
    public static vsCMFunction vsCMFunctionPropertySet;
    public static vsCMFunction vsCMFunctionPutRef;
    public static vsCMFunction vsCMFunctionPropertyAssign;
    public static vsCMFunction vsCMFunctionSub;
    public static vsCMFunction vsCMFunctionFunction;
    public static vsCMFunction vsCMFunctionTopLevel;
    public static vsCMFunction vsCMFunctionDestructor;
    public static vsCMFunction vsCMFunctionOperator;
    public static vsCMFunction vsCMFunctionVirtual;
    public static vsCMFunction vsCMFunctionPure;
    public static vsCMFunction vsCMFunctionConstant;
    public static vsCMFunction vsCMFunctionShared;
    public static vsCMFunction vsCMFunctionInline;
    public static vsCMFunction vsCMFunctionComMethod;
}
public enum EnvDTE.vsCMInfoLocation : Enum {
    public int value__;
    public static vsCMInfoLocation vsCMInfoLocationProject;
    public static vsCMInfoLocation vsCMInfoLocationExternal;
    public static vsCMInfoLocation vsCMInfoLocationNone;
    public static vsCMInfoLocation vsCMInfoLocationVirtual;
}
public enum EnvDTE.vsCMPart : Enum {
    public int value__;
    public static vsCMPart vsCMPartName;
    public static vsCMPart vsCMPartAttributes;
    public static vsCMPart vsCMPartHeader;
    public static vsCMPart vsCMPartWhole;
    public static vsCMPart vsCMPartBody;
    public static vsCMPart vsCMPartNavigate;
    public static vsCMPart vsCMPartAttributesWithDelimiter;
    public static vsCMPart vsCMPartBodyWithDelimiter;
    public static vsCMPart vsCMPartHeaderWithAttributes;
    public static vsCMPart vsCMPartWholeWithAttributes;
}
[GuidAttribute("ED1A3F98-4477-11D3-89BF-00C04F688DDE")]
public enum EnvDTE.vsCMPrototype : Enum {
    public int value__;
    public static vsCMPrototype vsCMPrototypeFullname;
    public static vsCMPrototype vsCMPrototypeNoName;
    public static vsCMPrototype vsCMPrototypeClassName;
    public static vsCMPrototype vsCMPrototypeParamTypes;
    public static vsCMPrototype vsCMPrototypeParamNames;
    public static vsCMPrototype vsCMPrototypeParamDefaultValues;
    public static vsCMPrototype vsCMPrototypeUniqueSignature;
    public static vsCMPrototype vsCMPrototypeType;
    public static vsCMPrototype vsCMPrototypeInitExpression;
}
public enum EnvDTE.vsCMTypeRef : Enum {
    public int value__;
    public static vsCMTypeRef vsCMTypeRefOther;
    public static vsCMTypeRef vsCMTypeRefCodeType;
    public static vsCMTypeRef vsCMTypeRefArray;
    public static vsCMTypeRef vsCMTypeRefVoid;
    public static vsCMTypeRef vsCMTypeRefPointer;
    public static vsCMTypeRef vsCMTypeRefString;
    public static vsCMTypeRef vsCMTypeRefObject;
    public static vsCMTypeRef vsCMTypeRefByte;
    public static vsCMTypeRef vsCMTypeRefChar;
    public static vsCMTypeRef vsCMTypeRefShort;
    public static vsCMTypeRef vsCMTypeRefInt;
    public static vsCMTypeRef vsCMTypeRefLong;
    public static vsCMTypeRef vsCMTypeRefFloat;
    public static vsCMTypeRef vsCMTypeRefDouble;
    public static vsCMTypeRef vsCMTypeRefDecimal;
    public static vsCMTypeRef vsCMTypeRefBool;
    public static vsCMTypeRef vsCMTypeRefVariant;
}
[GuidAttribute("79946991-1AE2-4D2D-9768-FD7801BE7DAA")]
public enum EnvDTE.vsCommandBarType : Enum {
    public int value__;
    public static vsCommandBarType vsCommandBarTypePopup;
    public static vsCommandBarType vsCommandBarTypeToolbar;
    public static vsCommandBarType vsCommandBarTypeMenu;
}
[GuidAttribute("947978F5-185B-4366-921E-A14C0ED46702")]
public enum EnvDTE.vsCommandDisabledFlags : Enum {
    public int value__;
    public static vsCommandDisabledFlags vsCommandDisabledFlagsEnabled;
    public static vsCommandDisabledFlags vsCommandDisabledFlagsGrey;
    public static vsCommandDisabledFlags vsCommandDisabledFlagsHidden;
}
[GuidAttribute("3C537E1A-39B8-4FDA-9F22-93D8C030865D")]
public enum EnvDTE.vsCommandExecOption : Enum {
    public int value__;
    public static vsCommandExecOption vsCommandExecOptionDoDefault;
    public static vsCommandExecOption vsCommandExecOptionPromptUser;
    public static vsCommandExecOption vsCommandExecOptionDoPromptUser;
    public static vsCommandExecOption vsCommandExecOptionShowHelp;
}
[GuidAttribute("E0ACE2E3-49C1-4AA3-AC03-A2877A93D77F")]
public enum EnvDTE.vsCommandStatus : Enum {
    public int value__;
    public static vsCommandStatus vsCommandStatusUnsupported;
    public static vsCommandStatus vsCommandStatusSupported;
    public static vsCommandStatus vsCommandStatusEnabled;
    public static vsCommandStatus vsCommandStatusLatched;
    public static vsCommandStatus vsCommandStatusNinched;
    public static vsCommandStatus vsCommandStatusInvisible;
}
[GuidAttribute("D9E97957-B425-4CD6-BB74-9E6F232A342A")]
public enum EnvDTE.vsCommandStatusTextWanted : Enum {
    public int value__;
    public static vsCommandStatusTextWanted vsCommandStatusTextWantedNone;
    public static vsCommandStatusTextWanted vsCommandStatusTextWantedName;
    public static vsCommandStatusTextWanted vsCommandStatusTextWantedStatus;
}
[GuidAttribute("612256BD-7BA2-45C4-B60F-7B2AE42F96C3")]
public enum EnvDTE.vsConfigurationType : Enum {
    public int value__;
    public static vsConfigurationType vsConfigurationTypeProject;
    public static vsConfigurationType vsConfigurationTypeProjectItem;
}
[GuidAttribute("59286EDC-D580-4E22-96C9-44D15B6148CC")]
public enum EnvDTE.vsContextAttributes : Enum {
    public int value__;
    public static vsContextAttributes vsContextAttributesGlobal;
    public static vsContextAttributes vsContextAttributesWindow;
    public static vsContextAttributes vsContextAttributesHighPriority;
}
[GuidAttribute("410202E1-B83A-41DD-AAB0-8C0029FE9435")]
public enum EnvDTE.vsContextAttributeType : Enum {
    public int value__;
    public static vsContextAttributeType vsContextAttributeFilter;
    public static vsContextAttributeType vsContextAttributeLookup;
    public static vsContextAttributeType vsContextAttributeLookupF1;
}
[GuidAttribute("E0E643C3-5410-487A-B64E-2664A5C4AB50")]
public enum EnvDTE.vsDisplay : Enum {
    public int value__;
    public static vsDisplay vsDisplayMDI;
    public static vsDisplay vsDisplayMDITabs;
}
[GuidAttribute("3740DCF8-B8B2-49A9-A1AB-944C84876C3C")]
public enum EnvDTE.vsEPReplaceTextOptions : Enum {
    public int value__;
    public static vsEPReplaceTextOptions vsEPReplaceTextKeepMarkers;
    public static vsEPReplaceTextOptions vsEPReplaceTextNormalizeNewlines;
    public static vsEPReplaceTextOptions vsEPReplaceTextTabsSpaces;
    public static vsEPReplaceTextOptions vsEPReplaceTextAutoformat;
}
public enum EnvDTE.VSEXECRESULT : Enum {
    public int value__;
    public static VSEXECRESULT RESULT_Success;
    public static VSEXECRESULT RESULT_Failure;
    public static VSEXECRESULT RESULT_Cancel;
}
[GuidAttribute("47046891-19F7-11D1-BCAF-000000000000")]
public enum EnvDTE.vsext_Build : Enum {
    public int value__;
    public static vsext_Build vsext_bld_SAVE_CHANGES;
    public static vsext_Build vsext_bld_CONFIRM_SAVE;
    public static vsext_Build vsext_bld_NO_SAVE;
}
[GuidAttribute("91AAB9C3-DA83-473A-8BC9-1A2730865995")]
public enum EnvDTE.vsext_DisplayMode : Enum {
    public int value__;
    public static vsext_DisplayMode vsext_dm_SDI;
    public static vsext_DisplayMode vsext_dm_MDI;
}
[GuidAttribute("C106C8DC-6D0C-11D1-B2C9-00C04FB6C6FF")]
public enum EnvDTE.vsext_FontCharSet : Enum {
    public int value__;
    public static vsext_FontCharSet vsext_fontcs_ANSI;
    public static vsext_FontCharSet vsext_fontcs_DEFAULT;
    public static vsext_FontCharSet vsext_fontcs_SYMBOL;
    public static vsext_FontCharSet vsext_fontcs_SHIFTJIS;
    public static vsext_FontCharSet vsext_fontcs_HANGEUL;
    public static vsext_FontCharSet vsext_fontcs_GB2312;
    public static vsext_FontCharSet vsext_fontcs_CHINESEBIG5;
    public static vsext_FontCharSet vsext_fontcs_OEM;
    public static vsext_FontCharSet vsext_fontcs_JOHAB;
    public static vsext_FontCharSet vsext_fontcs_HEBREW;
    public static vsext_FontCharSet vsext_fontcs_ARABIC;
    public static vsext_FontCharSet vsext_fontcs_GREEK;
    public static vsext_FontCharSet vsext_fontcs_TURKISH;
    public static vsext_FontCharSet vsext_fontcs_VIETNAMESE;
    public static vsext_FontCharSet vsext_fontcs_THAI;
    public static vsext_FontCharSet vsext_fontcs_EASTEUROPE;
    public static vsext_FontCharSet vsext_fontcs_RUSSIAN;
    public static vsext_FontCharSet vsext_fontcs_MAC;
    public static vsext_FontCharSet vsext_fontcs_BALTIC;
}
[GuidAttribute("97653ACF-D869-4EC0-B450-E9842457C729")]
public enum EnvDTE.vsext_LinkedWindowType : Enum {
    public int value__;
    public static vsext_LinkedWindowType vsext_lwt_Docked;
    public static vsext_LinkedWindowType vsext_lwt_Tabbed;
}
[GuidAttribute("A5578594-18E0-11D1-BBDB-00A0C90F2744")]
public enum EnvDTE.vsext_StartUp : Enum {
    public int value__;
    public static vsext_StartUp vsext_su_EMPTY_ENVIRONMENT;
    public static vsext_StartUp vsext_su_NEW_SOLUTION_DIALOG;
    public static vsext_StartUp vsext_su_LOAD_LAST_SOLUTION;
}
[GuidAttribute("E0C72E51-6B99-489B-ACA6-90CEDCE888E7")]
public enum EnvDTE.vsext_WindowState : Enum {
    public int value__;
    public static vsext_WindowState vsext_ws_Normal;
    public static vsext_WindowState vsext_ws_Minimize;
    public static vsext_WindowState vsext_ws_Maximize;
}
[GuidAttribute("E4B9E990-FD59-11D0-BBC6-00A0C90F2744")]
public enum EnvDTE.vsext_WindowType : Enum {
    public int value__;
    public static vsext_WindowType vsext_wt_CodeWindow;
    public static vsext_WindowType vsext_wt_Designer;
    public static vsext_WindowType vsext_wt_Browser;
    public static vsext_WindowType vsext_wt_Watch;
    public static vsext_WindowType vsext_wt_Locals;
    public static vsext_WindowType vsext_wt_Immediate;
    public static vsext_WindowType vsext_wt_ProjectWindow;
    public static vsext_WindowType vsext_wt_PropertyWindow;
    public static vsext_WindowType vsext_wt_Find;
    public static vsext_WindowType vsext_wt_FindReplace;
    public static vsext_WindowType vsext_wt_Toolbox;
    public static vsext_WindowType vsext_wt_LinkedWindowFrame;
    public static vsext_WindowType vsext_wt_MainWindow;
    public static vsext_WindowType vsext_wt_Preview;
    public static vsext_WindowType vsext_wt_ColorPalette;
    public static vsext_WindowType vsext_wt_ToolWindow;
    public static vsext_WindowType vsext_wt_Document;
    public static vsext_WindowType vsext_wt_OutPutWindow;
    public static vsext_WindowType vsext_wt_TaskList;
    public static vsext_WindowType vsext_wt_Autos;
    public static vsext_WindowType vsext_wt_CallStack;
    public static vsext_WindowType vsext_wt_Threads;
    public static vsext_WindowType vsext_wt_DocumentOutline;
    public static vsext_WindowType vsext_wt_RunningDocuments;
}
[GuidAttribute("221AB797-408B-4D69-9DD1-C6F329189414")]
public enum EnvDTE.vsFilterProperties : Enum {
    public int value__;
    public static vsFilterProperties vsFilterPropertiesNone;
    public static vsFilterProperties vsFilterPropertiesAll;
    public static vsFilterProperties vsFilterPropertiesSet;
}
[GuidAttribute("9FB64132-726A-4262-829E-051C6EC7B24F")]
public enum EnvDTE.vsFindAction : Enum {
    public int value__;
    public static vsFindAction vsFindActionFind;
    public static vsFindAction vsFindActionFindAll;
    public static vsFindAction vsFindActionReplace;
    public static vsFindAction vsFindActionReplaceAll;
    public static vsFindAction vsFindActionBookmarkAll;
}
[GuidAttribute("A457303F-D058-4415-A2B4-A81B148C7689")]
public enum EnvDTE.vsFindOptions : Enum {
    public int value__;
    public static vsFindOptions vsFindOptionsNone;
    public static vsFindOptions vsFindOptionsMatchWholeWord;
    public static vsFindOptions vsFindOptionsMatchCase;
    public static vsFindOptions vsFindOptionsRegularExpression;
    public static vsFindOptions vsFindOptionsBackwards;
    public static vsFindOptions vsFindOptionsFromStart;
    public static vsFindOptions vsFindOptionsMatchInHiddenText;
    public static vsFindOptions vsFindOptionsWildcards;
    public static vsFindOptions vsFindOptionsSearchSubfolders;
    public static vsFindOptions vsFindOptionsKeepModifiedDocumentsOpen;
}
[GuidAttribute("530F2D0E-A5F9-4B7A-A379-0A3B99B5E66D")]
public enum EnvDTE.vsFindPatternSyntax : Enum {
    public int value__;
    public static vsFindPatternSyntax vsFindPatternSyntaxLiteral;
    public static vsFindPatternSyntax vsFindPatternSyntaxRegExpr;
    public static vsFindPatternSyntax vsFindPatternSyntaxWildcards;
}
[GuidAttribute("6FA137BE-32A8-4F54-8099-60BB955097A3")]
public enum EnvDTE.vsFindResult : Enum {
    public int value__;
    public static vsFindResult vsFindResultNotFound;
    public static vsFindResult vsFindResultFound;
    public static vsFindResult vsFindResultReplaceAndNotFound;
    public static vsFindResult vsFindResultReplaceAndFound;
    public static vsFindResult vsFindResultReplaced;
    public static vsFindResult vsFindResultPending;
    public static vsFindResult vsFindResultError;
}
[GuidAttribute("EA9142BF-B2AF-48A7-B256-93CCD3350BD8")]
public enum EnvDTE.vsFindResultsLocation : Enum {
    public int value__;
    public static vsFindResultsLocation vsFindResultsNone;
    public static vsFindResultsLocation vsFindResults1;
    public static vsFindResultsLocation vsFindResults2;
}
[GuidAttribute("481899FB-B657-4E45-8C00-0E051052BB13")]
public enum EnvDTE.vsFindTarget : Enum {
    public int value__;
    public static vsFindTarget vsFindTargetCurrentDocument;
    public static vsFindTarget vsFindTargetCurrentDocumentSelection;
    public static vsFindTarget vsFindTargetCurrentDocumentFunction;
    public static vsFindTarget vsFindTargetOpenDocuments;
    public static vsFindTarget vsFindTargetCurrentProject;
    public static vsFindTarget vsFindTargetSolution;
    public static vsFindTarget vsFindTargetFiles;
}
[GuidAttribute("705CD8A4-D29B-11D2-AABD-00C04F688DDE")]
public enum EnvDTE.vsFontCharSet : Enum {
    public int value__;
    public static vsFontCharSet vsFontCharSetANSI;
    public static vsFontCharSet vsFontCharSetDefault;
    public static vsFontCharSet vsFontCharSetSymbol;
    public static vsFontCharSet vsFontCharSetShiftJIS;
    public static vsFontCharSet vsFontCharSetHangeul;
    public static vsFontCharSet vsFontCharSetGB2312;
    public static vsFontCharSet vsFontCharSetChineseBig5;
    public static vsFontCharSet vsFontCharSetOEM;
    public static vsFontCharSet vsFontCharSetJohab;
    public static vsFontCharSet vsFontCharSetHebrew;
    public static vsFontCharSet vsFontCharSetArabic;
    public static vsFontCharSet vsFontCharSetGreek;
    public static vsFontCharSet vsFontCharSetTurkish;
    public static vsFontCharSet vsFontCharSetVietnamese;
    public static vsFontCharSet vsFontCharSetThai;
    public static vsFontCharSet vsFontCharSetEastEurope;
    public static vsFontCharSet vsFontCharSetRussian;
    public static vsFontCharSet vsFontCharSetMac;
    public static vsFontCharSet vsFontCharSetBaltic;
}
[GuidAttribute("11B63A24-6200-48CD-9B8D-FC6A6FB9EFF0")]
public enum EnvDTE.vsGoToLineOptions : Enum {
    public int value__;
    public static vsGoToLineOptions vsGoToLineOptionsLast;
    public static vsGoToLineOptions vsGoToLineOptionsFirst;
}
[GuidAttribute("44160DF5-E305-4D85-B7FE-6B5A1B81B9B0")]
public enum EnvDTE.vsHTMLTabs : Enum {
    public int value__;
    public static vsHTMLTabs vsHTMLTabsSource;
    public static vsHTMLTabs vsHTMLTabsDesign;
}
[GuidAttribute("B638B3E3-C98B-4F59-9D05-105A620529F9")]
public enum EnvDTE.vsIDEMode : Enum {
    public int value__;
    public static vsIDEMode vsIDEModeDesign;
    public static vsIDEMode vsIDEModeDebug;
}
public enum EnvDTE.vsIndentStyle : Enum {
    public int value__;
    public static vsIndentStyle vsIndentStyleNone;
    public static vsIndentStyle vsIndentStyleDefault;
    public static vsIndentStyle vsIndentStyleSmart;
}
[GuidAttribute("9E3C8489-AE44-4FCF-9697-CD3F312BA08C")]
public enum EnvDTE.vsInitializeMode : Enum {
    public int value__;
    public static vsInitializeMode vsInitializeModeStartup;
    public static vsInitializeMode vsInitializeModeReset;
}
[GuidAttribute("79515B53-8294-4F96-AA96-DD16BF126703")]
public enum EnvDTE.vsInsertFlags : Enum {
    public int value__;
    public static vsInsertFlags vsInsertFlagsCollapseToEnd;
    public static vsInsertFlags vsInsertFlagsCollapseToStart;
    public static vsInsertFlags vsInsertFlagsContainNewText;
    public static vsInsertFlags vsInsertFlagsInsertAtEnd;
    public static vsInsertFlags vsInsertFlagsInsertAtStart;
}
[GuidAttribute("539F9C17-DB5F-421D-B02B-07BCF9FAA92F")]
public enum EnvDTE.vsLinkedWindowType : Enum {
    public int value__;
    public static vsLinkedWindowType vsLinkedWindowTypeDocked;
    public static vsLinkedWindowType vsLinkedWindowTypeVertical;
    public static vsLinkedWindowType vsLinkedWindowTypeHorizontal;
    public static vsLinkedWindowType vsLinkedWindowTypeTabbed;
}
[GuidAttribute("29182BD4-48A8-4E4B-81DD-1B742A3A5203")]
public enum EnvDTE.vsMovementOptions : Enum {
    public int value__;
    public static vsMovementOptions vsMovementOptionsMove;
    public static vsMovementOptions vsMovementOptionsExtend;
}
[GuidAttribute("4EB2C04F-8A83-4363-81DB-DBB76CD76812")]
public enum EnvDTE.vsMoveToColumnLine : Enum {
    public int value__;
    public static vsMoveToColumnLine vsMoveToColumnLineFirst;
    public static vsMoveToColumnLine vsMoveToColumnLineLast;
}
[GuidAttribute("178C767A-1963-4BC5-B3F2-E70F3EB441A8")]
public enum EnvDTE.vsNavigateBrowser : Enum {
    public int value__;
    public static vsNavigateBrowser vsNavigateBrowserDefault;
    public static vsNavigateBrowser vsNavigateBrowserHelp;
    public static vsNavigateBrowser vsNavigateBrowserNewWindow;
}
[GuidAttribute("B4CC3E73-0038-47E5-BA52-D1183F8FDBF0")]
public enum EnvDTE.vsNavigateOptions : Enum {
    public int value__;
    public static vsNavigateOptions vsNavigateOptionsDefault;
    public static vsNavigateOptions vsNavigateOptionsNewWindow;
}
[GuidAttribute("B26AC3C2-3981-4A2E-9D6F-559B41CD1CD2")]
public enum EnvDTE.vsPaneShowHow : Enum {
    public int value__;
    public static vsPaneShowHow vsPaneShowCentered;
    public static vsPaneShowHow vsPaneShowTop;
    public static vsPaneShowHow vsPaneShowAsIs;
}
[GuidAttribute("CA3EE5D0-6305-422F-A425-99737956088F")]
public enum EnvDTE.vsPromptResult : Enum {
    public int value__;
    public static vsPromptResult vsPromptResultYes;
    public static vsPromptResult vsPromptResultNo;
    public static vsPromptResult vsPromptResultCancelled;
}
[GuidAttribute("AAE3FAE8-8AFC-11D2-ADEE-00C04F7971C3")]
public enum EnvDTE.vsSaveChanges : Enum {
    public int value__;
    public static vsSaveChanges vsSaveChangesYes;
    public static vsSaveChanges vsSaveChangesNo;
    public static vsSaveChanges vsSaveChangesPrompt;
}
[GuidAttribute("8901FF7A-E6E8-4154-A505-135EE434817E")]
public enum EnvDTE.vsSaveStatus : Enum {
    public int value__;
    public static vsSaveStatus vsSaveCancelled;
    public static vsSaveStatus vsSaveSucceeded;
}
[GuidAttribute("F3128012-B41F-46EC-8794-F716DB9697D0")]
public enum EnvDTE.vsSelectionMode : Enum {
    public int value__;
    public static vsSelectionMode vsSelectionModeStream;
    public static vsSelectionMode vsSelectionModeBox;
}
[GuidAttribute("C512DDE3-A220-4373-8950-E6636F8CC546")]
public enum EnvDTE.vsSmartFormatOptions : Enum {
    public int value__;
    public static vsSmartFormatOptions vsSmartFormatOptionsNone;
    public static vsSmartFormatOptions vsSmartFormatOptionsBlock;
    public static vsSmartFormatOptions vsSmartFormatOptionsSmart;
}
[GuidAttribute("F05EA427-01BA-46DC-8392-FB4AA7E5EB3A")]
public enum EnvDTE.vsStartOfLineOptions : Enum {
    public int value__;
    public static vsStartOfLineOptions vsStartOfLineOptionsFirstColumn;
    public static vsStartOfLineOptions vsStartOfLineOptionsFirstText;
}
[GuidAttribute("705CD8AC-D29B-11D2-AABD-00C04F688DDE")]
public enum EnvDTE.vsStartUp : Enum {
    public int value__;
    public static vsStartUp vsStartUpShowHomePage;
    public static vsStartUp vsStartUpLoadLastSolution;
    public static vsStartUp vsStartUpOpenProjectDialog;
    public static vsStartUp vsStartUpNewProjectDialog;
    public static vsStartUp vsStartUpEmptyEnvironment;
}
[GuidAttribute("F40A5D39-FD39-4F03-8358-4DF3C338B448")]
public enum EnvDTE.vsStatusAnimation : Enum {
    public int value__;
    public static vsStatusAnimation vsStatusAnimationGeneral;
    public static vsStatusAnimation vsStatusAnimationPrint;
    public static vsStatusAnimation vsStatusAnimationSave;
    public static vsStatusAnimation vsStatusAnimationDeploy;
    public static vsStatusAnimation vsStatusAnimationSync;
    public static vsStatusAnimation vsStatusAnimationBuild;
    public static vsStatusAnimation vsStatusAnimationFind;
}
[GuidAttribute("7BC6A78F-28DA-4639-856C-88EA7A3F4CC0")]
public abstract class EnvDTE.vsTaskCategories : object {
    public static string vsTaskCategoryBuildCompile;
    public static string vsTaskCategoryComment;
    public static string vsTaskCategoryShortcut;
    public static string vsTaskCategoryUser;
    public static string vsTaskCategoryMisc;
    public static string vsTaskCategoryHTML;
}
[GuidAttribute("195DAB2E-4854-11D2-8820-00C04FB6C6FF")]
public enum EnvDTE.vsTaskIcon : Enum {
    public int value__;
    public static vsTaskIcon vsTaskIconNone;
    public static vsTaskIcon vsTaskIconCompile;
    public static vsTaskIcon vsTaskIconSquiggle;
    public static vsTaskIcon vsTaskIconComment;
    public static vsTaskIcon vsTaskIconShortcut;
    public static vsTaskIcon vsTaskIconUser;
}
[GuidAttribute("9848C17E-6AA5-11D2-97C3-00C04FB6C6FF")]
public enum EnvDTE.vsTaskListColumn : Enum {
    public int value__;
    public static vsTaskListColumn vsTaskListColumnPriority;
    public static vsTaskListColumn vsTaskListColumnGlyph;
    public static vsTaskListColumn vsTaskListColumnCheck;
    public static vsTaskListColumn vsTaskListColumnDescription;
    public static vsTaskListColumn vsTaskListColumnFile;
    public static vsTaskListColumn vsTaskListColumnLine;
}
[GuidAttribute("36B56DE8-5A17-11D1-B2B6-00C04FB6C6FF")]
public enum EnvDTE.vsTaskPriority : Enum {
    public int value__;
    public static vsTaskPriority vsTaskPriorityLow;
    public static vsTaskPriority vsTaskPriorityMedium;
    public static vsTaskPriority vsTaskPriorityHigh;
}
[GuidAttribute("11F0CB7F-4F63-4E09-B99C-92A6CC5F84CE")]
public enum EnvDTE.vsTextChanged : Enum {
    public int value__;
    public static vsTextChanged vsTextChangedMultiLine;
    public static vsTextChanged vsTextChangedSave;
    public static vsTextChanged vsTextChangedCaretMoved;
    public static vsTextChanged vsTextChangedReplaceAll;
    public static vsTextChanged vsTextChangedNewline;
    public static vsTextChanged vsTextChangedFindStarting;
}
[GuidAttribute("44DF8FDC-7378-11D2-97CA-00C04FB6C6FF")]
public enum EnvDTE.vsToolBoxItemFormat : Enum {
    public int value__;
    public static vsToolBoxItemFormat vsToolBoxItemFormatText;
    public static vsToolBoxItemFormat vsToolBoxItemFormatHTML;
    public static vsToolBoxItemFormat vsToolBoxItemFormatGUID;
    public static vsToolBoxItemFormat vsToolBoxItemFormatDotNETComponent;
}
[GuidAttribute("28362492-B1E3-4998-94C6-0A2CDB5484ED")]
public enum EnvDTE.vsUISelectionType : Enum {
    public int value__;
    public static vsUISelectionType vsUISelectionTypeSelect;
    public static vsUISelectionType vsUISelectionTypeToggle;
    public static vsUISelectionType vsUISelectionTypeExtend;
    public static vsUISelectionType vsUISelectionTypeSetCaret;
}
[GuidAttribute("BBDFCFE4-4C68-4736-B991-F85FA955D585")]
public enum EnvDTE.vsWhitespaceOptions : Enum {
    public int value__;
    public static vsWhitespaceOptions vsWhitespaceOptionsHorizontal;
    public static vsWhitespaceOptions vsWhitespaceOptionsVertical;
}
[GuidAttribute("CD678662-7939-48A0-BF1D-FA1BED56C130")]
public enum EnvDTE.vsWindowState : Enum {
    public int value__;
    public static vsWindowState vsWindowStateNormal;
    public static vsWindowState vsWindowStateMinimize;
    public static vsWindowState vsWindowStateMaximize;
}
[GuidAttribute("705CD8A9-D29B-11D2-AABD-00C04F688DDE")]
public enum EnvDTE.vsWindowType : Enum {
    public int value__;
    public static vsWindowType vsWindowTypeCodeWindow;
    public static vsWindowType vsWindowTypeDesigner;
    public static vsWindowType vsWindowTypeBrowser;
    public static vsWindowType vsWindowTypeWatch;
    public static vsWindowType vsWindowTypeLocals;
    public static vsWindowType vsWindowTypeImmediate;
    public static vsWindowType vsWindowTypeSolutionExplorer;
    public static vsWindowType vsWindowTypeProperties;
    public static vsWindowType vsWindowTypeFind;
    public static vsWindowType vsWindowTypeFindReplace;
    public static vsWindowType vsWindowTypeToolbox;
    public static vsWindowType vsWindowTypeLinkedWindowFrame;
    public static vsWindowType vsWindowTypeMainWindow;
    public static vsWindowType vsWindowTypePreview;
    public static vsWindowType vsWindowTypeColorPalette;
    public static vsWindowType vsWindowTypeToolWindow;
    public static vsWindowType vsWindowTypeDocument;
    public static vsWindowType vsWindowTypeOutput;
    public static vsWindowType vsWindowTypeTaskList;
    public static vsWindowType vsWindowTypeAutos;
    public static vsWindowType vsWindowTypeCallStack;
    public static vsWindowType vsWindowTypeThreads;
    public static vsWindowType vsWindowTypeDocumentOutline;
    public static vsWindowType vsWindowTypeRunningDocuments;
}
[DefaultMemberAttribute("Caption")]
[TypeLibTypeAttribute("4160")]
[GuidAttribute("0BEAB46B-4C07-4F94-A8D7-1626020E4E53")]
public interface EnvDTE.Window {
    [DispIdAttribute("2")]
public Windows Collection { get; }
    [DispIdAttribute("106")]
public bool Visible { get; public set; }
    [DispIdAttribute("101")]
public int Left { get; public set; }
    [DispIdAttribute("103")]
public int Top { get; public set; }
    [DispIdAttribute("105")]
public int Width { get; public set; }
    [DispIdAttribute("107")]
public int Height { get; public set; }
    [DispIdAttribute("109")]
public vsWindowState WindowState { get; public set; }
    [DispIdAttribute("112")]
public vsWindowType Type { get; }
    [DispIdAttribute("116")]
public LinkedWindows LinkedWindows { get; }
    [DispIdAttribute("117")]
public Window LinkedWindowFrame { get; }
    [DispIdAttribute("120")]
public IntPtr HWnd { get; }
    [DispIdAttribute("121")]
public string Kind { get; }
    [DispIdAttribute("122")]
public string ObjectKind { get; }
    [DispIdAttribute("123")]
public object Object { get; }
    [DispIdAttribute("124")]
public object DocumentData { get; }
    [DispIdAttribute("125")]
public ProjectItem ProjectItem { get; }
    [DispIdAttribute("126")]
public Project Project { get; }
    [DispIdAttribute("127")]
public DTE DTE { get; }
    [DispIdAttribute("128")]
public Document Document { get; }
    [DispIdAttribute("129")]
public object Selection { get; }
    [DispIdAttribute("130")]
public bool Linkable { get; public set; }
    [DispIdAttribute("0")]
public string Caption { get; public set; }
    [DispIdAttribute("135")]
public bool IsFloating { get; public set; }
    [DispIdAttribute("136")]
public bool AutoHides { get; public set; }
    [DispIdAttribute("139")]
public ContextAttributes ContextAttributes { get; }
    [DispIdAttribute("2")]
public abstract virtual Windows get_Collection();
    [DispIdAttribute("106")]
public abstract virtual bool get_Visible();
    [DispIdAttribute("106")]
public abstract virtual void set_Visible(bool pfVisible);
    [DispIdAttribute("101")]
public abstract virtual int get_Left();
    [DispIdAttribute("101")]
public abstract virtual void set_Left(int plLeft);
    [DispIdAttribute("103")]
public abstract virtual int get_Top();
    [DispIdAttribute("103")]
public abstract virtual void set_Top(int plTop);
    [DispIdAttribute("105")]
public abstract virtual int get_Width();
    [DispIdAttribute("105")]
public abstract virtual void set_Width(int plWidth);
    [DispIdAttribute("107")]
public abstract virtual int get_Height();
    [DispIdAttribute("107")]
public abstract virtual void set_Height(int plHeight);
    [DispIdAttribute("109")]
public abstract virtual vsWindowState get_WindowState();
    [DispIdAttribute("109")]
public abstract virtual void set_WindowState(vsWindowState plWindowState);
    [DispIdAttribute("111")]
[TypeLibFuncAttribute("64")]
public abstract virtual void SetFocus();
    [TypeLibFuncAttribute("64")]
[DispIdAttribute("112")]
public abstract virtual vsWindowType get_Type();
    [TypeLibFuncAttribute("65")]
[DispIdAttribute("113")]
public abstract virtual void SetKind(vsWindowType eKind);
    [DispIdAttribute("116")]
public abstract virtual LinkedWindows get_LinkedWindows();
    [DispIdAttribute("117")]
public abstract virtual Window get_LinkedWindowFrame();
    [TypeLibFuncAttribute("65")]
[DispIdAttribute("118")]
public abstract virtual void Detach();
    [TypeLibFuncAttribute("65")]
[DispIdAttribute("119")]
public abstract virtual void Attach(IntPtr lWindowHandle);
    [TypeLibFuncAttribute("64")]
[DispIdAttribute("120")]
public abstract virtual IntPtr get_HWnd();
    [DispIdAttribute("121")]
public abstract virtual string get_Kind();
    [DispIdAttribute("122")]
public abstract virtual string get_ObjectKind();
    [DispIdAttribute("123")]
public abstract virtual object get_Object();
    [DispIdAttribute("124")]
[TypeLibFuncAttribute("64")]
public abstract virtual object get_DocumentData(string bstrWhichData);
    [DispIdAttribute("125")]
public abstract virtual ProjectItem get_ProjectItem();
    [DispIdAttribute("126")]
public abstract virtual Project get_Project();
    [DispIdAttribute("127")]
public abstract virtual DTE get_DTE();
    [DispIdAttribute("128")]
public abstract virtual Document get_Document();
    [DispIdAttribute("129")]
public abstract virtual object get_Selection();
    [DispIdAttribute("130")]
public abstract virtual bool get_Linkable();
    [DispIdAttribute("130")]
public abstract virtual void set_Linkable(bool pLinkable);
    [DispIdAttribute("131")]
public abstract virtual void Activate();
    [DispIdAttribute("132")]
public abstract virtual void Close(vsSaveChanges SaveChanges);
    [DispIdAttribute("0")]
public abstract virtual string get_Caption();
    [DispIdAttribute("0")]
public abstract virtual void set_Caption(string pbstrTitle);
    [DispIdAttribute("133")]
public abstract virtual void SetSelectionContainer(Object[]& Objects);
    [DispIdAttribute("135")]
public abstract virtual bool get_IsFloating();
    [DispIdAttribute("135")]
public abstract virtual void set_IsFloating(bool Floating);
    [DispIdAttribute("136")]
public abstract virtual bool get_AutoHides();
    [DispIdAttribute("136")]
public abstract virtual void set_AutoHides(bool Hides);
    [DispIdAttribute("138")]
public abstract virtual void SetTabPicture(object Picture);
    [DispIdAttribute("139")]
public abstract virtual ContextAttributes get_ContextAttributes();
}
[GuidAttribute("41D02413-8A67-4C28-A980-AD7539ED415D")]
[DefaultMemberAttribute("Name")]
public interface EnvDTE.WindowConfiguration {
    [DispIdAttribute("0")]
public string Name { get; }
    [DispIdAttribute("1")]
public DTE DTE { get; }
    [DispIdAttribute("2")]
public WindowConfigurations Collection { get; }
    [DispIdAttribute("0")]
public abstract virtual string get_Name();
    [DispIdAttribute("1")]
public abstract virtual DTE get_DTE();
    [DispIdAttribute("2")]
public abstract virtual WindowConfigurations get_Collection();
    [DispIdAttribute("3")]
public abstract virtual void Apply(bool FromCustomViews);
    [DispIdAttribute("4")]
public abstract virtual void Delete();
    [DispIdAttribute("5")]
public abstract virtual void Update();
}
[GuidAttribute("E577442A-98E1-46C5-BD2E-D25807EC81CE")]
[DefaultMemberAttribute("Item")]
public interface EnvDTE.WindowConfigurations {
    [DispIdAttribute("1")]
public DTE DTE { get; }
    [DispIdAttribute("2")]
public DTE Parent { get; }
    [DispIdAttribute("3")]
public int Count { get; }
    [DispIdAttribute("5")]
public string ActiveConfigurationName { get; }
    [DispIdAttribute("-4")]
public abstract virtual IEnumerator GetEnumerator();
    [DispIdAttribute("0")]
public abstract virtual WindowConfiguration Item(object index);
    [DispIdAttribute("1")]
public abstract virtual DTE get_DTE();
    [DispIdAttribute("2")]
public abstract virtual DTE get_Parent();
    [DispIdAttribute("3")]
public abstract virtual int get_Count();
    [DispIdAttribute("4")]
public abstract virtual WindowConfiguration Add(string Name);
    [DispIdAttribute("5")]
public abstract virtual string get_ActiveConfigurationName();
}
[ComVisibleAttribute("False")]
[CoClassAttribute("EnvDTE.WindowEventsClass")]
[GuidAttribute("0D3A23A8-67BB-11D2-97C1-00C04FB6C6FF")]
public interface EnvDTE.WindowEvents {
}
[ComVisibleAttribute("False")]
[GuidAttribute("2E260FD4-C130-4E6D-8EBC-4A3BFD188181")]
[ClassInterfaceAttribute("0")]
[ComSourceInterfacesAttribute("EnvDTE._dispWindowEvents")]
public class EnvDTE.WindowEventsClass : object {
}
[DefaultMemberAttribute("Item")]
[GuidAttribute("2294311A-B7BC-4789-B365-1C15FF2CD17C")]
public interface EnvDTE.Windows {
    [DispIdAttribute("201")]
public int Count { get; }
    [DispIdAttribute("301")]
public DTE DTE { get; }
    [DispIdAttribute("302")]
public DTE Parent { get; }
    [DispIdAttribute("0")]
public abstract virtual Window Item(object index);
    [DispIdAttribute("201")]
public abstract virtual int get_Count();
    [DispIdAttribute("-4")]
public abstract virtual IEnumerator GetEnumerator();
    [ObsoleteAttribute("AddIn related extension points are no longer supported in Visual Studio.")]
[DispIdAttribute("300")]
public abstract virtual Window CreateToolWindow(AddIn AddInInst, string ProgID, string Caption, string GuidPosition, Object& DocObj);
    [DispIdAttribute("301")]
public abstract virtual DTE get_DTE();
    [DispIdAttribute("302")]
public abstract virtual DTE get_Parent();
    [DispIdAttribute("303")]
public abstract virtual Window CreateLinkedWindowFrame(Window Window1, Window Window2, vsLinkedWindowType Link);
}
[GuidAttribute("D920605A-11DD-4A12-A8DC-10578BB08606")]
public enum EnvDTE.wizardResult : Enum {
    public int value__;
    public static wizardResult wizardResultSuccess;
    public static wizardResult wizardResultFailure;
    public static wizardResult wizardResultCancel;
    public static wizardResult wizardResultBackOut;
}
[GuidAttribute("C8BBAA3A-7E99-4630-942C-570F085141EB")]
public interface EnvDTE100.Debugger5 {
    [DispIdAttribute("100")]
public Breakpoints Breakpoints { get; }
    [DispIdAttribute("101")]
public Languages Languages { get; }
    [DispIdAttribute("102")]
public dbgDebugMode CurrentMode { get; }
    [DispIdAttribute("103")]
public Process CurrentProcess { get; public set; }
    [DispIdAttribute("104")]
public Program CurrentProgram { get; public set; }
    [DispIdAttribute("105")]
public Thread CurrentThread { get; public set; }
    [DispIdAttribute("106")]
public StackFrame CurrentStackFrame { get; public set; }
    [DispIdAttribute("107")]
public bool HexDisplayMode { get; public set; }
    [DispIdAttribute("108")]
public bool HexInputMode { get; public set; }
    [DispIdAttribute("109")]
public dbgEventReason LastBreakReason { get; }
    [DispIdAttribute("110")]
public Breakpoint BreakpointLastHit { get; }
    [DispIdAttribute("111")]
public Breakpoints AllBreakpointsLastHit { get; }
    [DispIdAttribute("112")]
public Processes DebuggedProcesses { get; }
    [DispIdAttribute("113")]
public Processes LocalProcesses { get; }
    [DispIdAttribute("200")]
public DTE DTE { get; }
    [DispIdAttribute("201")]
public DTE Parent { get; }
    [DispIdAttribute("1101")]
public Transports Transports { get; }
    [DispIdAttribute("2100")]
public bool ForceContinue { get; public set; }
    [DispIdAttribute("2101")]
public ExceptionGroups ExceptionGroups { get; }
    [DispIdAttribute("2102")]
public string SymbolPath { get; }
    [DispIdAttribute("2103")]
public string SymbolPathState { get; }
    [DispIdAttribute("2104")]
public string SymbolCachePath { get; }
    [DispIdAttribute("2105")]
public bool OnlyLoadSymbolsManually { get; }
    [DispIdAttribute("1")]
public abstract virtual Expression GetExpression(string ExpressionText, bool UseAutoExpandRules, int Timeout);
    [DispIdAttribute("2")]
public abstract virtual void DetachAll();
    [DispIdAttribute("3")]
public abstract virtual void StepInto(bool WaitForBreakOrEnd);
    [DispIdAttribute("4")]
public abstract virtual void StepOver(bool WaitForBreakOrEnd);
    [DispIdAttribute("5")]
public abstract virtual void StepOut(bool WaitForBreakOrEnd);
    [DispIdAttribute("6")]
public abstract virtual void Go(bool WaitForBreakOrEnd);
    [DispIdAttribute("7")]
public abstract virtual void Break(bool WaitForBreakMode);
    [DispIdAttribute("8")]
public abstract virtual void Stop(bool WaitForDesignMode);
    [DispIdAttribute("9")]
public abstract virtual void SetNextStatement();
    [DispIdAttribute("10")]
public abstract virtual void RunToCursor(bool WaitForBreakOrEnd);
    [DispIdAttribute("11")]
public abstract virtual void ExecuteStatement(string Statement, int Timeout, bool TreatAsExpression);
    [DispIdAttribute("100")]
public abstract virtual Breakpoints get_Breakpoints();
    [DispIdAttribute("101")]
public abstract virtual Languages get_Languages();
    [DispIdAttribute("102")]
public abstract virtual dbgDebugMode get_CurrentMode();
    [DispIdAttribute("103")]
public abstract virtual Process get_CurrentProcess();
    [DispIdAttribute("103")]
public abstract virtual void set_CurrentProcess(Process value);
    [DispIdAttribute("104")]
public abstract virtual Program get_CurrentProgram();
    [DispIdAttribute("104")]
public abstract virtual void set_CurrentProgram(Program value);
    [DispIdAttribute("105")]
public abstract virtual Thread get_CurrentThread();
    [DispIdAttribute("105")]
public abstract virtual void set_CurrentThread(Thread value);
    [DispIdAttribute("106")]
public abstract virtual StackFrame get_CurrentStackFrame();
    [DispIdAttribute("106")]
public abstract virtual void set_CurrentStackFrame(StackFrame value);
    [DispIdAttribute("107")]
public abstract virtual bool get_HexDisplayMode();
    [DispIdAttribute("107")]
public abstract virtual void set_HexDisplayMode(bool value);
    [DispIdAttribute("108")]
public abstract virtual bool get_HexInputMode();
    [DispIdAttribute("108")]
public abstract virtual void set_HexInputMode(bool value);
    [DispIdAttribute("109")]
public abstract virtual dbgEventReason get_LastBreakReason();
    [DispIdAttribute("110")]
public abstract virtual Breakpoint get_BreakpointLastHit();
    [DispIdAttribute("111")]
public abstract virtual Breakpoints get_AllBreakpointsLastHit();
    [DispIdAttribute("112")]
public abstract virtual Processes get_DebuggedProcesses();
    [DispIdAttribute("113")]
public abstract virtual Processes get_LocalProcesses();
    [DispIdAttribute("200")]
public abstract virtual DTE get_DTE();
    [DispIdAttribute("201")]
public abstract virtual DTE get_Parent();
    [DispIdAttribute("300")]
public abstract virtual void TerminateAll();
    [DispIdAttribute("1001")]
public abstract virtual void WriteMinidump(string FileName, dbgMinidumpOption Option);
    [DispIdAttribute("1003")]
public abstract virtual Processes GetProcesses(Transport pTransport, string TransportQualifier);
    [DispIdAttribute("1004")]
public abstract virtual Expression GetExpression2(string ExpressionText, bool UseAutoExpandRules, bool TreatAsStatement, int Timeout);
    [DispIdAttribute("1101")]
public abstract virtual Transports get_Transports();
    [DispIdAttribute("2100")]
public abstract virtual bool get_ForceContinue();
    [DispIdAttribute("2100")]
public abstract virtual void set_ForceContinue(bool value);
    [DispIdAttribute("2101")]
public abstract virtual ExceptionGroups get_ExceptionGroups();
    [DispIdAttribute("2102")]
public abstract virtual string get_SymbolPath();
    [DispIdAttribute("2103")]
public abstract virtual string get_SymbolPathState();
    [DispIdAttribute("2104")]
public abstract virtual string get_SymbolCachePath();
    [DispIdAttribute("2105")]
public abstract virtual bool get_OnlyLoadSymbolsManually();
    [DispIdAttribute("3100")]
public abstract virtual void SetSymbolSettings(string SymbolPath, string SymbolPathState, string SymbolCachePath, bool OnlyLoadSymbolsManually, bool LoadSymbolsNow);
    [DispIdAttribute("3101")]
public abstract virtual Expression GetExpression3(string ExpressionText, StackFrame StackFrame, bool UseAutoExpandRules, bool TreatAsStatement, bool AllowAutoFuncEval, int Timeout);
    [DispIdAttribute("4100")]
public abstract virtual void DeleteObjectID(string ObjectIDExpression);
    [DispIdAttribute("4101")]
public abstract virtual void ExportBreakpoints(string FileName);
    [DispIdAttribute("4102")]
public abstract virtual void ImportBreakpoints(string FileName);
}
[DefaultMemberAttribute("Name")]
[GuidAttribute("F15A2DAD-5C82-4802-BEBC-5431B6ED5557")]
public interface EnvDTE100.Expression2 {
    [DispIdAttribute("0")]
public string Name { get; }
    [DispIdAttribute("100")]
public string Type { get; }
    [DispIdAttribute("101")]
public Expressions DataMembers { get; }
    [DispIdAttribute("102")]
public string Value { get; public set; }
    [DispIdAttribute("103")]
public bool IsValidValue { get; }
    [DispIdAttribute("200")]
public DTE DTE { get; }
    [DispIdAttribute("201")]
public Debugger Parent { get; }
    [DispIdAttribute("202")]
public Expressions Collection { get; }
    [DispIdAttribute("0")]
public abstract virtual string get_Name();
    [DispIdAttribute("100")]
public abstract virtual string get_Type();
    [DispIdAttribute("101")]
public abstract virtual Expressions get_DataMembers();
    [DispIdAttribute("102")]
public abstract virtual string get_Value();
    [DispIdAttribute("102")]
public abstract virtual void set_Value(string value);
    [DispIdAttribute("103")]
public abstract virtual bool get_IsValidValue();
    [DispIdAttribute("200")]
public abstract virtual DTE get_DTE();
    [DispIdAttribute("201")]
public abstract virtual Debugger get_Parent();
    [DispIdAttribute("202")]
public abstract virtual Expressions get_Collection();
    [DispIdAttribute("301")]
public abstract virtual void MakeObjectID();
    [DispIdAttribute("302")]
public abstract virtual void DeleteObjectID();
}
[GuidAttribute("CDA7305C-78B6-4D9D-90AD-93EBE71F9341")]
[DefaultMemberAttribute("Item")]
public interface EnvDTE100.Solution4 {
    [DispIdAttribute("10")]
public DTE DTE { get; }
    [DispIdAttribute("11")]
public DTE Parent { get; }
    [DispIdAttribute("12")]
public int Count { get; }
    [DispIdAttribute("13")]
public string FileName { get; }
    [DispIdAttribute("19")]
public Properties Properties { get; }
    [DispIdAttribute("22")]
public bool IsDirty { get; public set; }
    [DispIdAttribute("28")]
public string FullName { get; }
    [DispIdAttribute("29")]
public bool Saved { get; public set; }
    [DispIdAttribute("31")]
public Globals Globals { get; }
    [ObsoleteAttribute("AddIn related extension points are no longer supported in Visual Studio.")]
[DispIdAttribute("32")]
public AddIns AddIns { get; }
    [DispIdAttribute("34")]
public object ExtenderNames { get; }
    [DispIdAttribute("35")]
public string ExtenderCATID { get; }
    [DispIdAttribute("36")]
public bool IsOpen { get; }
    [DispIdAttribute("38")]
public SolutionBuild SolutionBuild { get; }
    [DispIdAttribute("41")]
public Projects Projects { get; }
    [DispIdAttribute("0")]
public abstract virtual Project Item(object index);
    [DispIdAttribute("-4")]
public abstract virtual IEnumerator GetEnumerator();
    [DispIdAttribute("10")]
public abstract virtual DTE get_DTE();
    [DispIdAttribute("11")]
public abstract virtual DTE get_Parent();
    [DispIdAttribute("12")]
public abstract virtual int get_Count();
    [DispIdAttribute("13")]
public abstract virtual string get_FileName();
    [DispIdAttribute("14")]
public abstract virtual void SaveAs(string FileName);
    [DispIdAttribute("15")]
public abstract virtual Project AddFromTemplate(string FileName, string Destination, string ProjectName, bool Exclusive);
    [DispIdAttribute("16")]
public abstract virtual Project AddFromFile(string FileName, bool Exclusive);
    [DispIdAttribute("17")]
public abstract virtual void Open(string FileName);
    [DispIdAttribute("18")]
public abstract virtual void Close(bool SaveFirst);
    [DispIdAttribute("19")]
public abstract virtual Properties get_Properties();
    [DispIdAttribute("22")]
public abstract virtual bool get_IsDirty();
    [DispIdAttribute("22")]
public abstract virtual void set_IsDirty(bool value);
    [DispIdAttribute("25")]
public abstract virtual void Remove(Project proj);
    [DispIdAttribute("26")]
public abstract virtual string get_TemplatePath(string projectType);
    [DispIdAttribute("28")]
public abstract virtual string get_FullName();
    [DispIdAttribute("29")]
public abstract virtual bool get_Saved();
    [DispIdAttribute("29")]
public abstract virtual void set_Saved(bool value);
    [DispIdAttribute("31")]
public abstract virtual Globals get_Globals();
    [DispIdAttribute("32")]
public abstract virtual AddIns get_AddIns();
    [DispIdAttribute("33")]
public abstract virtual object get_Extender(string extenderName);
    [DispIdAttribute("34")]
public abstract virtual object get_ExtenderNames();
    [DispIdAttribute("35")]
public abstract virtual string get_ExtenderCATID();
    [DispIdAttribute("36")]
public abstract virtual bool get_IsOpen();
    [DispIdAttribute("38")]
public abstract virtual SolutionBuild get_SolutionBuild();
    [DispIdAttribute("40")]
public abstract virtual void Create(string Destination, string Name);
    [DispIdAttribute("41")]
public abstract virtual Projects get_Projects();
    [DispIdAttribute("42")]
public abstract virtual ProjectItem FindProjectItem(string FileName);
    [DispIdAttribute("43")]
public abstract virtual string ProjectItemsTemplatePath(string ProjectKind);
    [DispIdAttribute("102")]
public abstract virtual Project AddSolutionFolder(string Name);
    [DispIdAttribute("103")]
public abstract virtual string GetProjectTemplate(string TemplateName, string Language);
    [DispIdAttribute("104")]
public abstract virtual string GetProjectItemTemplate(string TemplateName, string Language);
    [DispIdAttribute("205")]
public abstract virtual Templates GetProjectItemTemplates(string Language, string CustomDataSignature);
    [DispIdAttribute("300")]
public abstract virtual Project AddFromTemplateEx(string FileName, string Destination, string ProjectName, string SolutionName, bool Exclusive, UInt32 Options);
}
[GuidAttribute("2EB6290C-29AA-4609-871F-E22CAB4F68B6")]
public enum EnvDTE100.vsAddFromTemplateOptions : Enum {
    public int value__;
    public static vsAddFromTemplateOptions vsAddFromTemplateOptionsNone;
    public static vsAddFromTemplateOptions vsAddFromTemplateOptionsShowWizardUI;
    public static vsAddFromTemplateOptions vsAddFromTemplateOptionsLocalSolution;
    public static vsAddFromTemplateOptions vsAddFromTemplateOptionsDeferredSave;
    public static vsAddFromTemplateOptions vsAddFromTemplateOptionsMultiProject;
}
[GuidAttribute("6FADEE12-6296-4E8B-A3EF-A6A0DC32F967")]
public enum EnvDTE100.vsDocumentDockPreferenceOptions : Enum {
    public int value__;
    public static vsDocumentDockPreferenceOptions vsDocumentDockAtBeginning;
    public static vsDocumentDockPreferenceOptions vsDocumentDockAtEnd;
}
[GuidAttribute("C7982CAF-1AFE-4671-858F-D7997D3D8928")]
public enum EnvDTE100.vsRichClientExperienceOptions : Enum {
    public int value__;
    public static vsRichClientExperienceOptions vsRichClientExperienceNone;
    public static vsRichClientExperienceOptions vsRichClientExperienceAll;
    public static vsRichClientExperienceOptions vsRichClientExperienceAnimations;
    public static vsRichClientExperienceOptions vsRichClientExperienceGradients;
}
[GuidAttribute("66ADC510-0CA2-475D-A343-57192BCE38BF")]
public interface EnvDTE80._CodeModelEvents {
}
[TypeLibTypeAttribute("4176")]
[GuidAttribute("C6E28776-B7FF-421F-8C18-57F82E447704")]
public interface EnvDTE80._CodeModelEventsRoot {
    [DispIdAttribute("1")]
public object CodeModelEvents { get; }
    [TypeLibFuncAttribute("64")]
[DispIdAttribute("1")]
public abstract virtual object get_CodeModelEvents(CodeElement CodeElementFilter);
}
[GuidAttribute("6973A466-E09C-4195-9AE8-07B7AAFF7D85")]
public interface EnvDTE80._DebuggerExpressionEvaluationEvents {
}
[GuidAttribute("45AE9835-6090-4CCA-97E0-5EA9A5608FBE")]
public interface EnvDTE80._DebuggerExpressionEvaluationEventsRoot {
    [DispIdAttribute("1")]
public object DebuggerExpressionEvaluationEvents { get; }
    [DispIdAttribute("1")]
public abstract virtual object get_DebuggerExpressionEvaluationEvents();
}
[GuidAttribute("CE9DDBA3-B23B-4C53-BB3E-5471659289D1")]
public interface EnvDTE80._DebuggerProcessEvents {
}
[GuidAttribute("C2EB9070-38B3-404D-BED8-2D5F5D971DF5")]
public interface EnvDTE80._DebuggerProcessEventsRoot {
    [DispIdAttribute("1")]
public object DebuggerProcessEvents { get; }
    [DispIdAttribute("1")]
public abstract virtual object get_DebuggerProcessEvents();
}
[InterfaceTypeAttribute("2")]
[GuidAttribute("4EA8090E-D289-4D56-98CD-C48DD2853B2E")]
public interface EnvDTE80._dispCodeModelEvents {
    [DispIdAttribute("1")]
public abstract virtual void ElementAdded(CodeElement Element);
    [DispIdAttribute("2")]
public abstract virtual void ElementChanged(CodeElement Element, vsCMChangeKind Change);
    [DispIdAttribute("4")]
public abstract virtual void ElementDeleted(object Parent, CodeElement Element);
}
[ComVisibleAttribute("False")]
public class EnvDTE80._dispCodeModelEvents_ElementAddedEventHandler : MulticastDelegate {
    public _dispCodeModelEvents_ElementAddedEventHandler(object object, IntPtr method);
    public virtual void Invoke(CodeElement Element);
    public virtual IAsyncResult BeginInvoke(CodeElement Element, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
[ComVisibleAttribute("False")]
public class EnvDTE80._dispCodeModelEvents_ElementChangedEventHandler : MulticastDelegate {
    public _dispCodeModelEvents_ElementChangedEventHandler(object object, IntPtr method);
    public virtual void Invoke(CodeElement Element, vsCMChangeKind Change);
    public virtual IAsyncResult BeginInvoke(CodeElement Element, vsCMChangeKind Change, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
[ComVisibleAttribute("False")]
public class EnvDTE80._dispCodeModelEvents_ElementDeletedEventHandler : MulticastDelegate {
    public _dispCodeModelEvents_ElementDeletedEventHandler(object object, IntPtr method);
    public virtual void Invoke(object Parent, CodeElement Element);
    public virtual IAsyncResult BeginInvoke(object Parent, CodeElement Element, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
[ComEventInterfaceAttribute("EnvDTE80._dispCodeModelEvents", "EnvDTE80._dispCodeModelEvents_EventProvider")]
[ComVisibleAttribute("False")]
public interface EnvDTE80._dispCodeModelEvents_Event {
    [CompilerGeneratedAttribute]
public abstract virtual void add_ElementAdded(_dispCodeModelEvents_ElementAddedEventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_ElementAdded(_dispCodeModelEvents_ElementAddedEventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_ElementChanged(_dispCodeModelEvents_ElementChangedEventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_ElementChanged(_dispCodeModelEvents_ElementChangedEventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_ElementDeleted(_dispCodeModelEvents_ElementDeletedEventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_ElementDeleted(_dispCodeModelEvents_ElementDeletedEventHandler value);
}
internal class EnvDTE80._dispCodeModelEvents_EventProvider : object {
    private IConnectionPointContainer m_ConnectionPointContainer;
    private ArrayList m_aEventSinkHelpers;
    private IConnectionPoint m_ConnectionPoint;
    public _dispCodeModelEvents_EventProvider(object A_1);
    private void Init();
    public sealed virtual void add_ElementAdded(_dispCodeModelEvents_ElementAddedEventHandler value);
    public sealed virtual void remove_ElementAdded(_dispCodeModelEvents_ElementAddedEventHandler value);
    private void AddElementAdded(_dispCodeModelEvents_ElementAddedEventHandler A_1);
    private void RemoveElementAdded(_dispCodeModelEvents_ElementAddedEventHandler A_1);
    public sealed virtual void add_ElementChanged(_dispCodeModelEvents_ElementChangedEventHandler value);
    public sealed virtual void remove_ElementChanged(_dispCodeModelEvents_ElementChangedEventHandler value);
    private void AddElementChanged(_dispCodeModelEvents_ElementChangedEventHandler A_1);
    private void RemoveElementChanged(_dispCodeModelEvents_ElementChangedEventHandler A_1);
    public sealed virtual void add_ElementDeleted(_dispCodeModelEvents_ElementDeletedEventHandler value);
    public sealed virtual void remove_ElementDeleted(_dispCodeModelEvents_ElementDeletedEventHandler value);
    private void AddElementDeleted(_dispCodeModelEvents_ElementDeletedEventHandler A_1);
    private void RemoveElementDeleted(_dispCodeModelEvents_ElementDeletedEventHandler A_1);
    protected virtual override void Finalize();
    public sealed virtual void Dispose();
    private void Dispose(bool disposing);
}
[ClassInterfaceAttribute("0")]
public class EnvDTE80._dispCodeModelEvents_SinkHelper : object {
    public _dispCodeModelEvents_ElementAddedEventHandler m_ElementAddedDelegate;
    public _dispCodeModelEvents_ElementChangedEventHandler m_ElementChangedDelegate;
    public _dispCodeModelEvents_ElementDeletedEventHandler m_ElementDeletedDelegate;
    public int m_dwCookie;
    public sealed virtual void ElementAdded(CodeElement A_1);
    public sealed virtual void ElementChanged(CodeElement A_1, vsCMChangeKind A_2);
    public sealed virtual void ElementDeleted(object A_1, CodeElement A_2);
}
[GuidAttribute("73FFA13F-AD72-4154-BE77-D4288F2E4FC5")]
[InterfaceTypeAttribute("2")]
public interface EnvDTE80._dispDebuggerExpressionEvaluationEvents {
    [DispIdAttribute("1")]
public abstract virtual void OnExpressionEvaluation(Process pProcess, Thread Thread, dbgExpressionEvaluationState evaluationState);
}
[ComVisibleAttribute("False")]
[ComEventInterfaceAttribute("EnvDTE80._dispDebuggerExpressionEvaluationEvents", "EnvDTE80._dispDebuggerExpressionEvaluationEvents_EventProvider")]
public interface EnvDTE80._dispDebuggerExpressionEvaluationEvents_Event {
    [CompilerGeneratedAttribute]
public abstract virtual void add_OnExpressionEvaluation(_dispDebuggerExpressionEvaluationEvents_OnExpressionEvaluationEventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_OnExpressionEvaluation(_dispDebuggerExpressionEvaluationEvents_OnExpressionEvaluationEventHandler value);
}
internal class EnvDTE80._dispDebuggerExpressionEvaluationEvents_EventProvider : object {
    private IConnectionPointContainer m_ConnectionPointContainer;
    private ArrayList m_aEventSinkHelpers;
    private IConnectionPoint m_ConnectionPoint;
    public _dispDebuggerExpressionEvaluationEvents_EventProvider(object A_1);
    private void Init();
    public sealed virtual void add_OnExpressionEvaluation(_dispDebuggerExpressionEvaluationEvents_OnExpressionEvaluationEventHandler value);
    public sealed virtual void remove_OnExpressionEvaluation(_dispDebuggerExpressionEvaluationEvents_OnExpressionEvaluationEventHandler value);
    private void AddOnExpressionEvaluation(_dispDebuggerExpressionEvaluationEvents_OnExpressionEvaluationEventHandler A_1);
    private void RemoveOnExpressionEvaluation(_dispDebuggerExpressionEvaluationEvents_OnExpressionEvaluationEventHandler A_1);
    protected virtual override void Finalize();
    public sealed virtual void Dispose();
    private void Dispose(bool disposing);
}
[ComVisibleAttribute("False")]
public class EnvDTE80._dispDebuggerExpressionEvaluationEvents_OnExpressionEvaluationEventHandler : MulticastDelegate {
    public _dispDebuggerExpressionEvaluationEvents_OnExpressionEvaluationEventHandler(object object, IntPtr method);
    public virtual void Invoke(Process pProcess, Thread Thread, dbgExpressionEvaluationState evaluationState);
    public virtual IAsyncResult BeginInvoke(Process pProcess, Thread Thread, dbgExpressionEvaluationState evaluationState, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
[ClassInterfaceAttribute("0")]
public class EnvDTE80._dispDebuggerExpressionEvaluationEvents_SinkHelper : object {
    public _dispDebuggerExpressionEvaluationEvents_OnExpressionEvaluationEventHandler m_OnExpressionEvaluationDelegate;
    public int m_dwCookie;
    public sealed virtual void OnExpressionEvaluation(Process A_1, Thread A_2, dbgExpressionEvaluationState A_3);
}
[GuidAttribute("7D04C01D-BB7A-47E8-92EB-E914CD61366B")]
[InterfaceTypeAttribute("2")]
public interface EnvDTE80._dispDebuggerProcessEvents {
    [DispIdAttribute("1")]
public abstract virtual void OnProcessStateChanged(Process NewProcess, dbgProcessState processState);
}
[ComVisibleAttribute("False")]
[ComEventInterfaceAttribute("EnvDTE80._dispDebuggerProcessEvents", "EnvDTE80._dispDebuggerProcessEvents_EventProvider")]
public interface EnvDTE80._dispDebuggerProcessEvents_Event {
    [CompilerGeneratedAttribute]
public abstract virtual void add_OnProcessStateChanged(_dispDebuggerProcessEvents_OnProcessStateChangedEventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_OnProcessStateChanged(_dispDebuggerProcessEvents_OnProcessStateChangedEventHandler value);
}
internal class EnvDTE80._dispDebuggerProcessEvents_EventProvider : object {
    private IConnectionPointContainer m_ConnectionPointContainer;
    private ArrayList m_aEventSinkHelpers;
    private IConnectionPoint m_ConnectionPoint;
    public _dispDebuggerProcessEvents_EventProvider(object A_1);
    private void Init();
    public sealed virtual void add_OnProcessStateChanged(_dispDebuggerProcessEvents_OnProcessStateChangedEventHandler value);
    public sealed virtual void remove_OnProcessStateChanged(_dispDebuggerProcessEvents_OnProcessStateChangedEventHandler value);
    private void AddOnProcessStateChanged(_dispDebuggerProcessEvents_OnProcessStateChangedEventHandler A_1);
    private void RemoveOnProcessStateChanged(_dispDebuggerProcessEvents_OnProcessStateChangedEventHandler A_1);
    protected virtual override void Finalize();
    public sealed virtual void Dispose();
    private void Dispose(bool disposing);
}
[ComVisibleAttribute("False")]
public class EnvDTE80._dispDebuggerProcessEvents_OnProcessStateChangedEventHandler : MulticastDelegate {
    public _dispDebuggerProcessEvents_OnProcessStateChangedEventHandler(object object, IntPtr method);
    public virtual void Invoke(Process NewProcess, dbgProcessState processState);
    public virtual IAsyncResult BeginInvoke(Process NewProcess, dbgProcessState processState, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
[ClassInterfaceAttribute("0")]
public class EnvDTE80._dispDebuggerProcessEvents_SinkHelper : object {
    public _dispDebuggerProcessEvents_OnProcessStateChangedEventHandler m_OnProcessStateChangedDelegate;
    public int m_dwCookie;
    public sealed virtual void OnProcessStateChanged(Process A_1, dbgProcessState A_2);
}
[InterfaceTypeAttribute("2")]
[GuidAttribute("A0B40B93-9311-410F-B210-1F65BAFB0E27")]
public interface EnvDTE80._dispPublishEvents {
    [DispIdAttribute("1")]
public abstract virtual void OnPublishBegin(Boolean& Continue);
    [DispIdAttribute("2")]
public abstract virtual void OnPublishDone(bool Success);
}
[ComVisibleAttribute("False")]
[ComEventInterfaceAttribute("EnvDTE80._dispPublishEvents", "EnvDTE80._dispPublishEvents_EventProvider")]
public interface EnvDTE80._dispPublishEvents_Event {
    [CompilerGeneratedAttribute]
public abstract virtual void add_OnPublishBegin(_dispPublishEvents_OnPublishBeginEventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_OnPublishBegin(_dispPublishEvents_OnPublishBeginEventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_OnPublishDone(_dispPublishEvents_OnPublishDoneEventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_OnPublishDone(_dispPublishEvents_OnPublishDoneEventHandler value);
}
internal class EnvDTE80._dispPublishEvents_EventProvider : object {
    private IConnectionPointContainer m_ConnectionPointContainer;
    private ArrayList m_aEventSinkHelpers;
    private IConnectionPoint m_ConnectionPoint;
    public _dispPublishEvents_EventProvider(object A_1);
    private void Init();
    public sealed virtual void add_OnPublishBegin(_dispPublishEvents_OnPublishBeginEventHandler value);
    public sealed virtual void remove_OnPublishBegin(_dispPublishEvents_OnPublishBeginEventHandler value);
    private void AddOnPublishBegin(_dispPublishEvents_OnPublishBeginEventHandler A_1);
    private void RemoveOnPublishBegin(_dispPublishEvents_OnPublishBeginEventHandler A_1);
    public sealed virtual void add_OnPublishDone(_dispPublishEvents_OnPublishDoneEventHandler value);
    public sealed virtual void remove_OnPublishDone(_dispPublishEvents_OnPublishDoneEventHandler value);
    private void AddOnPublishDone(_dispPublishEvents_OnPublishDoneEventHandler A_1);
    private void RemoveOnPublishDone(_dispPublishEvents_OnPublishDoneEventHandler A_1);
    protected virtual override void Finalize();
    public sealed virtual void Dispose();
    private void Dispose(bool disposing);
}
[ComVisibleAttribute("False")]
public class EnvDTE80._dispPublishEvents_OnPublishBeginEventHandler : MulticastDelegate {
    public _dispPublishEvents_OnPublishBeginEventHandler(object object, IntPtr method);
    public virtual void Invoke(Boolean& Continue);
    public virtual IAsyncResult BeginInvoke(Boolean& Continue, AsyncCallback callback, object object);
    public virtual void EndInvoke(Boolean& Continue, IAsyncResult result);
}
[ComVisibleAttribute("False")]
public class EnvDTE80._dispPublishEvents_OnPublishDoneEventHandler : MulticastDelegate {
    public _dispPublishEvents_OnPublishDoneEventHandler(object object, IntPtr method);
    public virtual void Invoke(bool Success);
    public virtual IAsyncResult BeginInvoke(bool Success, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
[ClassInterfaceAttribute("0")]
public class EnvDTE80._dispPublishEvents_SinkHelper : object {
    public _dispPublishEvents_OnPublishBeginEventHandler m_OnPublishBeginDelegate;
    public _dispPublishEvents_OnPublishDoneEventHandler m_OnPublishDoneDelegate;
    public int m_dwCookie;
    public sealed virtual void OnPublishBegin(Boolean& A_1);
    public sealed virtual void OnPublishDone(bool A_1);
}
[GuidAttribute("4B57C85E-5100-4CAF-9301-4544B85C7945")]
[InterfaceTypeAttribute("2")]
public interface EnvDTE80._dispTextDocumentKeyPressEvents {
    [DispIdAttribute("1")]
public abstract virtual void BeforeKeyPress(string Keypress, TextSelection Selection, bool InStatementCompletion, Boolean& CancelKeypress);
    [DispIdAttribute("2")]
public abstract virtual void AfterKeyPress(string Keypress, TextSelection Selection, bool InStatementCompletion);
}
[ComVisibleAttribute("False")]
public class EnvDTE80._dispTextDocumentKeyPressEvents_AfterKeyPressEventHandler : MulticastDelegate {
    public _dispTextDocumentKeyPressEvents_AfterKeyPressEventHandler(object object, IntPtr method);
    public virtual void Invoke(string Keypress, TextSelection Selection, bool InStatementCompletion);
    public virtual IAsyncResult BeginInvoke(string Keypress, TextSelection Selection, bool InStatementCompletion, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
[ComVisibleAttribute("False")]
public class EnvDTE80._dispTextDocumentKeyPressEvents_BeforeKeyPressEventHandler : MulticastDelegate {
    public _dispTextDocumentKeyPressEvents_BeforeKeyPressEventHandler(object object, IntPtr method);
    public virtual void Invoke(string Keypress, TextSelection Selection, bool InStatementCompletion, Boolean& CancelKeypress);
    public virtual IAsyncResult BeginInvoke(string Keypress, TextSelection Selection, bool InStatementCompletion, Boolean& CancelKeypress, AsyncCallback callback, object object);
    public virtual void EndInvoke(Boolean& CancelKeypress, IAsyncResult result);
}
[ComVisibleAttribute("False")]
[ComEventInterfaceAttribute("EnvDTE80._dispTextDocumentKeyPressEvents", "EnvDTE80._dispTextDocumentKeyPressEvents_EventProvider")]
public interface EnvDTE80._dispTextDocumentKeyPressEvents_Event {
    [CompilerGeneratedAttribute]
public abstract virtual void add_BeforeKeyPress(_dispTextDocumentKeyPressEvents_BeforeKeyPressEventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_BeforeKeyPress(_dispTextDocumentKeyPressEvents_BeforeKeyPressEventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_AfterKeyPress(_dispTextDocumentKeyPressEvents_AfterKeyPressEventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_AfterKeyPress(_dispTextDocumentKeyPressEvents_AfterKeyPressEventHandler value);
}
internal class EnvDTE80._dispTextDocumentKeyPressEvents_EventProvider : object {
    private IConnectionPointContainer m_ConnectionPointContainer;
    private ArrayList m_aEventSinkHelpers;
    private IConnectionPoint m_ConnectionPoint;
    public _dispTextDocumentKeyPressEvents_EventProvider(object A_1);
    private void Init();
    public sealed virtual void add_BeforeKeyPress(_dispTextDocumentKeyPressEvents_BeforeKeyPressEventHandler value);
    public sealed virtual void remove_BeforeKeyPress(_dispTextDocumentKeyPressEvents_BeforeKeyPressEventHandler value);
    private void AddBeforeKeyPress(_dispTextDocumentKeyPressEvents_BeforeKeyPressEventHandler A_1);
    private void RemoveBeforeKeyPress(_dispTextDocumentKeyPressEvents_BeforeKeyPressEventHandler A_1);
    public sealed virtual void add_AfterKeyPress(_dispTextDocumentKeyPressEvents_AfterKeyPressEventHandler value);
    public sealed virtual void remove_AfterKeyPress(_dispTextDocumentKeyPressEvents_AfterKeyPressEventHandler value);
    private void AddAfterKeyPress(_dispTextDocumentKeyPressEvents_AfterKeyPressEventHandler A_1);
    private void RemoveAfterKeyPress(_dispTextDocumentKeyPressEvents_AfterKeyPressEventHandler A_1);
    protected virtual override void Finalize();
    public sealed virtual void Dispose();
    private void Dispose(bool disposing);
}
[ClassInterfaceAttribute("0")]
public class EnvDTE80._dispTextDocumentKeyPressEvents_SinkHelper : object {
    public _dispTextDocumentKeyPressEvents_BeforeKeyPressEventHandler m_BeforeKeyPressDelegate;
    public _dispTextDocumentKeyPressEvents_AfterKeyPressEventHandler m_AfterKeyPressDelegate;
    public int m_dwCookie;
    public sealed virtual void BeforeKeyPress(string A_1, TextSelection A_2, bool A_3, Boolean& A_4);
    public sealed virtual void AfterKeyPress(string A_1, TextSelection A_2, bool A_3);
}
[GuidAttribute("94259E4B-A44A-4B77-B18F-F2CC9A601D03")]
[InterfaceTypeAttribute("2")]
public interface EnvDTE80._dispWindowVisibilityEvents {
    [DispIdAttribute("1")]
public abstract virtual void WindowHiding(Window Window);
    [DispIdAttribute("2")]
public abstract virtual void WindowShowing(Window Window);
}
[ComEventInterfaceAttribute("EnvDTE80._dispWindowVisibilityEvents", "EnvDTE80._dispWindowVisibilityEvents_EventProvider")]
[ComVisibleAttribute("False")]
public interface EnvDTE80._dispWindowVisibilityEvents_Event {
    [CompilerGeneratedAttribute]
public abstract virtual void add_WindowHiding(_dispWindowVisibilityEvents_WindowHidingEventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_WindowHiding(_dispWindowVisibilityEvents_WindowHidingEventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_WindowShowing(_dispWindowVisibilityEvents_WindowShowingEventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_WindowShowing(_dispWindowVisibilityEvents_WindowShowingEventHandler value);
}
internal class EnvDTE80._dispWindowVisibilityEvents_EventProvider : object {
    private IConnectionPointContainer m_ConnectionPointContainer;
    private ArrayList m_aEventSinkHelpers;
    private IConnectionPoint m_ConnectionPoint;
    public _dispWindowVisibilityEvents_EventProvider(object A_1);
    private void Init();
    public sealed virtual void add_WindowHiding(_dispWindowVisibilityEvents_WindowHidingEventHandler value);
    public sealed virtual void remove_WindowHiding(_dispWindowVisibilityEvents_WindowHidingEventHandler value);
    private void AddWindowHiding(_dispWindowVisibilityEvents_WindowHidingEventHandler A_1);
    private void RemoveWindowHiding(_dispWindowVisibilityEvents_WindowHidingEventHandler A_1);
    public sealed virtual void add_WindowShowing(_dispWindowVisibilityEvents_WindowShowingEventHandler value);
    public sealed virtual void remove_WindowShowing(_dispWindowVisibilityEvents_WindowShowingEventHandler value);
    private void AddWindowShowing(_dispWindowVisibilityEvents_WindowShowingEventHandler A_1);
    private void RemoveWindowShowing(_dispWindowVisibilityEvents_WindowShowingEventHandler A_1);
    protected virtual override void Finalize();
    public sealed virtual void Dispose();
    private void Dispose(bool disposing);
}
[ClassInterfaceAttribute("0")]
public class EnvDTE80._dispWindowVisibilityEvents_SinkHelper : object {
    public _dispWindowVisibilityEvents_WindowHidingEventHandler m_WindowHidingDelegate;
    public _dispWindowVisibilityEvents_WindowShowingEventHandler m_WindowShowingDelegate;
    public int m_dwCookie;
    public sealed virtual void WindowHiding(Window A_1);
    public sealed virtual void WindowShowing(Window A_1);
}
[ComVisibleAttribute("False")]
public class EnvDTE80._dispWindowVisibilityEvents_WindowHidingEventHandler : MulticastDelegate {
    public _dispWindowVisibilityEvents_WindowHidingEventHandler(object object, IntPtr method);
    public virtual void Invoke(Window Window);
    public virtual IAsyncResult BeginInvoke(Window Window, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
[ComVisibleAttribute("False")]
public class EnvDTE80._dispWindowVisibilityEvents_WindowShowingEventHandler : MulticastDelegate {
    public _dispWindowVisibilityEvents_WindowShowingEventHandler(object object, IntPtr method);
    public virtual void Invoke(Window Window);
    public virtual IAsyncResult BeginInvoke(Window Window, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
[GuidAttribute("827BE7DC-1817-4171-A8FF-AAB3854913BF")]
public interface EnvDTE80._PublishEvents {
}
[GuidAttribute("505B7600-8FCC-487C-9E4F-C7FD0B5FB690")]
public interface EnvDTE80._TextDocumentKeyPressEvents {
}
[TypeLibTypeAttribute("4176")]
[GuidAttribute("D7EADE3F-BD19-4422-9C4C-85A02535437C")]
public interface EnvDTE80._TextDocumentKeyPressEventsRoot {
    [DispIdAttribute("1")]
public object TextDocumentKeyPressEvents { get; }
    [TypeLibFuncAttribute("64")]
[DispIdAttribute("1")]
public abstract virtual object get_TextDocumentKeyPressEvents(TextDocument TextDocument);
}
[GuidAttribute("84DE07BC-43A2-4275-BCF9-D207D20E49ED")]
public interface EnvDTE80._WindowVisibilityEvents {
}
[DefaultMemberAttribute("Name")]
[GuidAttribute("FBC8D85A-E449-4CB3-B026-F7808DEB7792")]
public interface EnvDTE80.Breakpoint2 {
    [DispIdAttribute("100")]
public dbgBreakpointType Type { get; }
    [DispIdAttribute("0")]
public string Name { get; public set; }
    [DispIdAttribute("101")]
public dbgBreakpointLocationType LocationType { get; }
    [DispIdAttribute("102")]
public string FunctionName { get; }
    [DispIdAttribute("103")]
public int FunctionLineOffset { get; }
    [DispIdAttribute("104")]
public int FunctionColumnOffset { get; }
    [DispIdAttribute("105")]
public string File { get; }
    [DispIdAttribute("106")]
public int FileLine { get; }
    [DispIdAttribute("107")]
public int FileColumn { get; }
    [DispIdAttribute("108")]
public dbgBreakpointConditionType ConditionType { get; }
    [DispIdAttribute("109")]
public string Condition { get; }
    [DispIdAttribute("110")]
public string Language { get; }
    [DispIdAttribute("111")]
public dbgHitCountType HitCountType { get; }
    [DispIdAttribute("112")]
public int HitCountTarget { get; }
    [DispIdAttribute("113")]
public bool Enabled { get; public set; }
    [DispIdAttribute("114")]
public string Tag { get; public set; }
    [DispIdAttribute("115")]
public int CurrentHits { get; }
    [DispIdAttribute("116")]
public Program Program { get; }
    [DispIdAttribute("200")]
public DTE DTE { get; }
    [DispIdAttribute("201")]
public Breakpoint Parent { get; }
    [DispIdAttribute("202")]
public Breakpoints Collection { get; }
    [DispIdAttribute("203")]
public Breakpoints Children { get; }
    [DispIdAttribute("1100")]
public Process2 Process { get; }
    [DispIdAttribute("1102")]
public bool BreakWhenHit { get; public set; }
    [DispIdAttribute("1103")]
public string Message { get; public set; }
    [DispIdAttribute("1105")]
public string Macro { get; public set; }
    [DispIdAttribute("1107")]
public string FilterBy { get; public set; }
    [DispIdAttribute("1")]
public abstract virtual void Delete();
    [DispIdAttribute("100")]
public abstract virtual dbgBreakpointType get_Type();
    [DispIdAttribute("0")]
public abstract virtual string get_Name();
    [DispIdAttribute("0")]
public abstract virtual void set_Name(string value);
    [DispIdAttribute("101")]
public abstract virtual dbgBreakpointLocationType get_LocationType();
    [DispIdAttribute("102")]
public abstract virtual string get_FunctionName();
    [DispIdAttribute("103")]
public abstract virtual int get_FunctionLineOffset();
    [DispIdAttribute("104")]
public abstract virtual int get_FunctionColumnOffset();
    [DispIdAttribute("105")]
public abstract virtual string get_File();
    [DispIdAttribute("106")]
public abstract virtual int get_FileLine();
    [DispIdAttribute("107")]
public abstract virtual int get_FileColumn();
    [DispIdAttribute("108")]
public abstract virtual dbgBreakpointConditionType get_ConditionType();
    [DispIdAttribute("109")]
public abstract virtual string get_Condition();
    [DispIdAttribute("110")]
public abstract virtual string get_Language();
    [DispIdAttribute("111")]
public abstract virtual dbgHitCountType get_HitCountType();
    [DispIdAttribute("112")]
public abstract virtual int get_HitCountTarget();
    [DispIdAttribute("113")]
public abstract virtual bool get_Enabled();
    [DispIdAttribute("113")]
public abstract virtual void set_Enabled(bool value);
    [DispIdAttribute("114")]
public abstract virtual string get_Tag();
    [DispIdAttribute("114")]
public abstract virtual void set_Tag(string value);
    [DispIdAttribute("115")]
public abstract virtual int get_CurrentHits();
    [DispIdAttribute("116")]
public abstract virtual Program get_Program();
    [DispIdAttribute("200")]
public abstract virtual DTE get_DTE();
    [DispIdAttribute("201")]
public abstract virtual Breakpoint get_Parent();
    [DispIdAttribute("202")]
public abstract virtual Breakpoints get_Collection();
    [DispIdAttribute("203")]
public abstract virtual Breakpoints get_Children();
    [DispIdAttribute("300")]
public abstract virtual void ResetHitCount();
    [DispIdAttribute("1100")]
public abstract virtual Process2 get_Process();
    [DispIdAttribute("1102")]
public abstract virtual bool get_BreakWhenHit();
    [DispIdAttribute("1102")]
public abstract virtual void set_BreakWhenHit(bool value);
    [DispIdAttribute("1103")]
public abstract virtual string get_Message();
    [DispIdAttribute("1103")]
public abstract virtual void set_Message(string value);
    [DispIdAttribute("1105")]
public abstract virtual string get_Macro();
    [DispIdAttribute("1105")]
public abstract virtual void set_Macro(string value);
    [DispIdAttribute("1107")]
public abstract virtual string get_FilterBy();
    [DispIdAttribute("1107")]
public abstract virtual void set_FilterBy(string value);
}
[GuidAttribute("35187E2A-E5F6-4F89-A4CE-DA254640855B")]
[DefaultMemberAttribute("Name")]
[TypeLibTypeAttribute("4160")]
public interface EnvDTE80.CodeAttribute2 {
    [DispIdAttribute("1")]
public DTE DTE { get; }
    [DispIdAttribute("2")]
public CodeElements Collection { get; }
    [DispIdAttribute("0")]
public string Name { get; public set; }
    [DispIdAttribute("3")]
public string FullName { get; }
    [DispIdAttribute("4")]
public ProjectItem ProjectItem { get; }
    [DispIdAttribute("5")]
public vsCMElement Kind { get; }
    [DispIdAttribute("6")]
public bool IsCodeType { get; }
    [DispIdAttribute("7")]
public vsCMInfoLocation InfoLocation { get; }
    [DispIdAttribute("8")]
public CodeElements Children { get; }
    [DispIdAttribute("9")]
public string Language { get; }
    [DispIdAttribute("10")]
public TextPoint StartPoint { get; }
    [DispIdAttribute("11")]
public TextPoint EndPoint { get; }
    [DispIdAttribute("12")]
public object ExtenderNames { get; }
    [DispIdAttribute("13")]
public object Extender { get; }
    [DispIdAttribute("14")]
public string ExtenderCATID { get; }
    [DispIdAttribute("31")]
public object Parent { get; }
    [DispIdAttribute("32")]
public string Value { get; public set; }
    [DispIdAttribute("200")]
public string Target { get; public set; }
    [DispIdAttribute("202")]
public CodeElements Arguments { get; }
    [DispIdAttribute("1")]
[TypeLibFuncAttribute("1024")]
public abstract virtual DTE get_DTE();
    [TypeLibFuncAttribute("1024")]
[DispIdAttribute("2")]
public abstract virtual CodeElements get_Collection();
    [DispIdAttribute("0")]
public abstract virtual string get_Name();
    [DispIdAttribute("0")]
public abstract virtual void set_Name(string pVal);
    [DispIdAttribute("3")]
public abstract virtual string get_FullName();
    [DispIdAttribute("4")]
[TypeLibFuncAttribute("1024")]
public abstract virtual ProjectItem get_ProjectItem();
    [DispIdAttribute("5")]
[TypeLibFuncAttribute("1024")]
public abstract virtual vsCMElement get_Kind();
    [TypeLibFuncAttribute("1024")]
[DispIdAttribute("6")]
public abstract virtual bool get_IsCodeType();
    [DispIdAttribute("7")]
[TypeLibFuncAttribute("1024")]
public abstract virtual vsCMInfoLocation get_InfoLocation();
    [TypeLibFuncAttribute("1024")]
[DispIdAttribute("8")]
public abstract virtual CodeElements get_Children();
    [DispIdAttribute("9")]
[TypeLibFuncAttribute("1024")]
public abstract virtual string get_Language();
    [DispIdAttribute("10")]
[TypeLibFuncAttribute("1024")]
public abstract virtual TextPoint get_StartPoint();
    [TypeLibFuncAttribute("1024")]
[DispIdAttribute("11")]
public abstract virtual TextPoint get_EndPoint();
    [TypeLibFuncAttribute("1024")]
[DispIdAttribute("12")]
public abstract virtual object get_ExtenderNames();
    [DispIdAttribute("13")]
[TypeLibFuncAttribute("1024")]
public abstract virtual object get_Extender(string ExtenderName);
    [DispIdAttribute("14")]
[TypeLibFuncAttribute("1024")]
public abstract virtual string get_ExtenderCATID();
    [TypeLibFuncAttribute("1024")]
[DispIdAttribute("15")]
public abstract virtual TextPoint GetStartPoint(vsCMPart Part);
    [TypeLibFuncAttribute("1024")]
[DispIdAttribute("16")]
public abstract virtual TextPoint GetEndPoint(vsCMPart Part);
    [DispIdAttribute("31")]
[TypeLibFuncAttribute("1024")]
public abstract virtual object get_Parent();
    [DispIdAttribute("32")]
public abstract virtual string get_Value();
    [DispIdAttribute("32")]
public abstract virtual void set_Value(string pValue);
    [DispIdAttribute("33")]
public abstract virtual void Delete();
    [DispIdAttribute("200")]
public abstract virtual string get_Target();
    [DispIdAttribute("200")]
public abstract virtual void set_Target(string Target);
    [DispIdAttribute("201")]
public abstract virtual CodeAttributeArgument AddArgument(string Value, object Name, object Position);
    [DispIdAttribute("202")]
public abstract virtual CodeElements get_Arguments();
}
[GuidAttribute("80F4779B-835D-4873-8356-2F34A759A514")]
[TypeLibTypeAttribute("4160")]
[DefaultMemberAttribute("Name")]
public interface EnvDTE80.CodeAttributeArgument {
    [DispIdAttribute("1")]
public DTE DTE { get; }
    [DispIdAttribute("2")]
public CodeElements Collection { get; }
    [DispIdAttribute("0")]
public string Name { get; public set; }
    [DispIdAttribute("3")]
public string FullName { get; }
    [DispIdAttribute("4")]
public ProjectItem ProjectItem { get; }
    [DispIdAttribute("5")]
public vsCMElement Kind { get; }
    [DispIdAttribute("6")]
public bool IsCodeType { get; }
    [DispIdAttribute("7")]
public vsCMInfoLocation InfoLocation { get; }
    [DispIdAttribute("8")]
public CodeElements Children { get; }
    [DispIdAttribute("9")]
public string Language { get; }
    [DispIdAttribute("10")]
public TextPoint StartPoint { get; }
    [DispIdAttribute("11")]
public TextPoint EndPoint { get; }
    [DispIdAttribute("12")]
public object ExtenderNames { get; }
    [DispIdAttribute("13")]
public object Extender { get; }
    [DispIdAttribute("14")]
public string ExtenderCATID { get; }
    [DispIdAttribute("200")]
public string Value { get; public set; }
    [TypeLibFuncAttribute("1024")]
[DispIdAttribute("1")]
public abstract virtual DTE get_DTE();
    [TypeLibFuncAttribute("1024")]
[DispIdAttribute("2")]
public abstract virtual CodeElements get_Collection();
    [DispIdAttribute("0")]
public abstract virtual string get_Name();
    [DispIdAttribute("0")]
public abstract virtual void set_Name(string pVal);
    [DispIdAttribute("3")]
public abstract virtual string get_FullName();
    [TypeLibFuncAttribute("1024")]
[DispIdAttribute("4")]
public abstract virtual ProjectItem get_ProjectItem();
    [TypeLibFuncAttribute("1024")]
[DispIdAttribute("5")]
public abstract virtual vsCMElement get_Kind();
    [TypeLibFuncAttribute("1024")]
[DispIdAttribute("6")]
public abstract virtual bool get_IsCodeType();
    [TypeLibFuncAttribute("1024")]
[DispIdAttribute("7")]
public abstract virtual vsCMInfoLocation get_InfoLocation();
    [TypeLibFuncAttribute("1024")]
[DispIdAttribute("8")]
public abstract virtual CodeElements get_Children();
    [DispIdAttribute("9")]
[TypeLibFuncAttribute("1024")]
public abstract virtual string get_Language();
    [TypeLibFuncAttribute("1024")]
[DispIdAttribute("10")]
public abstract virtual TextPoint get_StartPoint();
    [TypeLibFuncAttribute("1024")]
[DispIdAttribute("11")]
public abstract virtual TextPoint get_EndPoint();
    [TypeLibFuncAttribute("1024")]
[DispIdAttribute("12")]
public abstract virtual object get_ExtenderNames();
    [DispIdAttribute("13")]
[TypeLibFuncAttribute("1024")]
public abstract virtual object get_Extender(string ExtenderName);
    [TypeLibFuncAttribute("1024")]
[DispIdAttribute("14")]
public abstract virtual string get_ExtenderCATID();
    [TypeLibFuncAttribute("1024")]
[DispIdAttribute("15")]
public abstract virtual TextPoint GetStartPoint(vsCMPart Part);
    [TypeLibFuncAttribute("1024")]
[DispIdAttribute("16")]
public abstract virtual TextPoint GetEndPoint(vsCMPart Part);
    [DispIdAttribute("200")]
public abstract virtual string get_Value();
    [DispIdAttribute("200")]
public abstract virtual void set_Value(string Value);
    [DispIdAttribute("201")]
public abstract virtual void Delete();
}
[DefaultMemberAttribute("Name")]
[GuidAttribute("295ADCD4-B052-49EE-934E-C6B36862A7C6")]
[TypeLibTypeAttribute("4160")]
public interface EnvDTE80.CodeClass2 {
    [DispIdAttribute("1")]
public DTE DTE { get; }
    [DispIdAttribute("2")]
public CodeElements Collection { get; }
    [DispIdAttribute("0")]
public string Name { get; public set; }
    [DispIdAttribute("3")]
public string FullName { get; }
    [DispIdAttribute("4")]
public ProjectItem ProjectItem { get; }
    [DispIdAttribute("5")]
public vsCMElement Kind { get; }
    [DispIdAttribute("6")]
public bool IsCodeType { get; }
    [DispIdAttribute("7")]
public vsCMInfoLocation InfoLocation { get; }
    [DispIdAttribute("8")]
public CodeElements Children { get; }
    [DispIdAttribute("9")]
public string Language { get; }
    [DispIdAttribute("10")]
public TextPoint StartPoint { get; }
    [DispIdAttribute("11")]
public TextPoint EndPoint { get; }
    [DispIdAttribute("12")]
public object ExtenderNames { get; }
    [DispIdAttribute("13")]
public object Extender { get; }
    [DispIdAttribute("14")]
public string ExtenderCATID { get; }
    [DispIdAttribute("31")]
public object Parent { get; }
    [DispIdAttribute("32")]
public CodeNamespace Namespace { get; }
    [DispIdAttribute("33")]
public CodeElements Bases { get; }
    [DispIdAttribute("34")]
public CodeElements Members { get; }
    [DispIdAttribute("35")]
public vsCMAccess Access { get; public set; }
    [DispIdAttribute("36")]
public CodeElements Attributes { get; }
    [DispIdAttribute("37")]
public string DocComment { get; public set; }
    [DispIdAttribute("38")]
public string Comment { get; public set; }
    [DispIdAttribute("43")]
public bool IsDerivedFrom { get; }
    [DispIdAttribute("44")]
public CodeElements DerivedTypes { get; }
    [DispIdAttribute("61")]
public CodeElements ImplementedInterfaces { get; }
    [DispIdAttribute("62")]
public bool IsAbstract { get; public set; }
    [DispIdAttribute("200")]
public vsCMClassKind ClassKind { get; public set; }
    [DispIdAttribute("201")]
public CodeElements PartialClasses { get; }
    [DispIdAttribute("205")]
public vsCMDataTypeKind DataTypeKind { get; public set; }
    [DispIdAttribute("206")]
public CodeElements Parts { get; }
    [DispIdAttribute("207")]
public vsCMInheritanceKind InheritanceKind { get; public set; }
    [DispIdAttribute("208")]
public bool IsGeneric { get; }
    [DispIdAttribute("210")]
public bool IsShared { get; public set; }
    [TypeLibFuncAttribute("1024")]
[DispIdAttribute("1")]
public abstract virtual DTE get_DTE();
    [DispIdAttribute("2")]
[TypeLibFuncAttribute("1024")]
public abstract virtual CodeElements get_Collection();
    [DispIdAttribute("0")]
public abstract virtual string get_Name();
    [DispIdAttribute("0")]
public abstract virtual void set_Name(string pVal);
    [DispIdAttribute("3")]
public abstract virtual string get_FullName();
    [DispIdAttribute("4")]
[TypeLibFuncAttribute("1024")]
public abstract virtual ProjectItem get_ProjectItem();
    [DispIdAttribute("5")]
[TypeLibFuncAttribute("1024")]
public abstract virtual vsCMElement get_Kind();
    [TypeLibFuncAttribute("1024")]
[DispIdAttribute("6")]
public abstract virtual bool get_IsCodeType();
    [DispIdAttribute("7")]
[TypeLibFuncAttribute("1024")]
public abstract virtual vsCMInfoLocation get_InfoLocation();
    [TypeLibFuncAttribute("1024")]
[DispIdAttribute("8")]
public abstract virtual CodeElements get_Children();
    [DispIdAttribute("9")]
[TypeLibFuncAttribute("1024")]
public abstract virtual string get_Language();
    [TypeLibFuncAttribute("1024")]
[DispIdAttribute("10")]
public abstract virtual TextPoint get_StartPoint();
    [TypeLibFuncAttribute("1024")]
[DispIdAttribute("11")]
public abstract virtual TextPoint get_EndPoint();
    [DispIdAttribute("12")]
[TypeLibFuncAttribute("1024")]
public abstract virtual object get_ExtenderNames();
    [DispIdAttribute("13")]
[TypeLibFuncAttribute("1024")]
public abstract virtual object get_Extender(string ExtenderName);
    [DispIdAttribute("14")]
[TypeLibFuncAttribute("1024")]
public abstract virtual string get_ExtenderCATID();
    [DispIdAttribute("15")]
[TypeLibFuncAttribute("1024")]
public abstract virtual TextPoint GetStartPoint(vsCMPart Part);
    [TypeLibFuncAttribute("1024")]
[DispIdAttribute("16")]
public abstract virtual TextPoint GetEndPoint(vsCMPart Part);
    [DispIdAttribute("31")]
[TypeLibFuncAttribute("1024")]
public abstract virtual object get_Parent();
    [DispIdAttribute("32")]
[TypeLibFuncAttribute("1024")]
public abstract virtual CodeNamespace get_Namespace();
    [DispIdAttribute("33")]
[TypeLibFuncAttribute("1024")]
public abstract virtual CodeElements get_Bases();
    [DispIdAttribute("34")]
[TypeLibFuncAttribute("1024")]
public abstract virtual CodeElements get_Members();
    [DispIdAttribute("35")]
public abstract virtual void set_Access(vsCMAccess pAccess);
    [DispIdAttribute("35")]
public abstract virtual vsCMAccess get_Access();
    [TypeLibFuncAttribute("1024")]
[DispIdAttribute("36")]
public abstract virtual CodeElements get_Attributes();
    [DispIdAttribute("37")]
[TypeLibFuncAttribute("1024")]
public abstract virtual string get_DocComment();
    [TypeLibFuncAttribute("1024")]
[DispIdAttribute("37")]
public abstract virtual void set_DocComment(string pDocComment);
    [DispIdAttribute("38")]
[TypeLibFuncAttribute("1024")]
public abstract virtual string get_Comment();
    [TypeLibFuncAttribute("1024")]
[DispIdAttribute("38")]
public abstract virtual void set_Comment(string pComment);
    [DispIdAttribute("39")]
public abstract virtual CodeElement AddBase(object Base, object Position);
    [DispIdAttribute("40")]
public abstract virtual CodeAttribute AddAttribute(string Name, string Value, object Position);
    [DispIdAttribute("41")]
public abstract virtual void RemoveBase(object Element);
    [DispIdAttribute("42")]
public abstract virtual void RemoveMember(object Element);
    [DispIdAttribute("43")]
public abstract virtual bool get_IsDerivedFrom(string FullName);
    [TypeLibFuncAttribute("1024")]
[DispIdAttribute("44")]
public abstract virtual CodeElements get_DerivedTypes();
    [DispIdAttribute("61")]
[TypeLibFuncAttribute("1024")]
public abstract virtual CodeElements get_ImplementedInterfaces();
    [DispIdAttribute("62")]
public abstract virtual bool get_IsAbstract();
    [DispIdAttribute("62")]
public abstract virtual void set_IsAbstract(bool pIsAbstract);
    [DispIdAttribute("63")]
public abstract virtual CodeInterface AddImplementedInterface(object Base, object Position);
    [DispIdAttribute("64")]
public abstract virtual CodeFunction AddFunction(string Name, vsCMFunction Kind, object Type, object Position, vsCMAccess Access, object Location);
    [DispIdAttribute("65")]
public abstract virtual CodeVariable AddVariable(string Name, object Type, object Position, vsCMAccess Access, object Location);
    [DispIdAttribute("66")]
public abstract virtual CodeProperty AddProperty(string GetterName, string PutterName, object Type, object Position, vsCMAccess Access, object Location);
    [DispIdAttribute("67")]
public abstract virtual CodeClass AddClass(string Name, object Position, object Bases, object ImplementedInterfaces, vsCMAccess Access);
    [DispIdAttribute("68")]
public abstract virtual CodeStruct AddStruct(string Name, object Position, object Bases, object ImplementedInterfaces, vsCMAccess Access);
    [DispIdAttribute("69")]
public abstract virtual CodeEnum AddEnum(string Name, object Position, object Bases, vsCMAccess Access);
    [DispIdAttribute("70")]
public abstract virtual CodeDelegate AddDelegate(string Name, object Type, object Position, vsCMAccess Access);
    [DispIdAttribute("71")]
public abstract virtual void RemoveInterface(object Element);
    [DispIdAttribute("200")]
[TypeLibFuncAttribute("64")]
public abstract virtual vsCMClassKind get_ClassKind();
    [TypeLibFuncAttribute("64")]
[DispIdAttribute("200")]
public abstract virtual void set_ClassKind(vsCMClassKind Kind);
    [TypeLibFuncAttribute("64")]
[DispIdAttribute("201")]
public abstract virtual CodeElements get_PartialClasses();
    [DispIdAttribute("205")]
public abstract virtual vsCMDataTypeKind get_DataTypeKind();
    [DispIdAttribute("205")]
public abstract virtual void set_DataTypeKind(vsCMDataTypeKind Kind);
    [DispIdAttribute("206")]
public abstract virtual CodeElements get_Parts();
    [DispIdAttribute("207")]
public abstract virtual vsCMInheritanceKind get_InheritanceKind();
    [DispIdAttribute("207")]
public abstract virtual void set_InheritanceKind(vsCMInheritanceKind Kind);
    [DispIdAttribute("208")]
public abstract virtual bool get_IsGeneric();
    [DispIdAttribute("209")]
public abstract virtual CodeEvent AddEvent(string Name, string FullDelegateName, bool CreatePropertyStyleEvent, object Location, vsCMAccess Access);
    [DispIdAttribute("210")]
public abstract virtual bool get_IsShared();
    [DispIdAttribute("210")]
public abstract virtual void set_IsShared(bool pIsShared);
}
[DefaultMemberAttribute("Name")]
[TypeLibTypeAttribute("4160")]
[GuidAttribute("3B1B24EF-DD8E-4C98-8799-4EFAC80080E9")]
public interface EnvDTE80.CodeDelegate2 {
    [DispIdAttribute("1")]
public DTE DTE { get; }
    [DispIdAttribute("2")]
public CodeElements Collection { get; }
    [DispIdAttribute("0")]
public string Name { get; public set; }
    [DispIdAttribute("3")]
public string FullName { get; }
    [DispIdAttribute("4")]
public ProjectItem ProjectItem { get; }
    [DispIdAttribute("5")]
public vsCMElement Kind { get; }
    [DispIdAttribute("6")]
public bool IsCodeType { get; }
    [DispIdAttribute("7")]
public vsCMInfoLocation InfoLocation { get; }
    [DispIdAttribute("8")]
public CodeElements Children { get; }
    [DispIdAttribute("9")]
public string Language { get; }
    [DispIdAttribute("10")]
public TextPoint StartPoint { get; }
    [DispIdAttribute("11")]
public TextPoint EndPoint { get; }
    [DispIdAttribute("12")]
public object ExtenderNames { get; }
    [DispIdAttribute("13")]
public object Extender { get; }
    [DispIdAttribute("14")]
public string ExtenderCATID { get; }
    [DispIdAttribute("31")]
public object Parent { get; }
    [DispIdAttribute("32")]
public CodeNamespace Namespace { get; }
    [DispIdAttribute("33")]
public CodeElements Bases { get; }
    [DispIdAttribute("34")]
public CodeElements Members { get; }
    [DispIdAttribute("35")]
public vsCMAccess Access { get; public set; }
    [DispIdAttribute("36")]
public CodeElements Attributes { get; }
    [DispIdAttribute("37")]
public string DocComment { get; public set; }
    [DispIdAttribute("38")]
public string Comment { get; public set; }
    [DispIdAttribute("43")]
public bool IsDerivedFrom { get; }
    [DispIdAttribute("44")]
public CodeElements DerivedTypes { get; }
    [DispIdAttribute("61")]
public CodeClass BaseClass { get; }
    [DispIdAttribute("62")]
public string Prototype { get; }
    [DispIdAttribute("63")]
public CodeTypeRef Type { get; public set; }
    [DispIdAttribute("64")]
public CodeElements Parameters { get; }
    [DispIdAttribute("200")]
public bool IsGeneric { get; }
    [TypeLibFuncAttribute("1024")]
[DispIdAttribute("1")]
public abstract virtual DTE get_DTE();
    [DispIdAttribute("2")]
[TypeLibFuncAttribute("1024")]
public abstract virtual CodeElements get_Collection();
    [DispIdAttribute("0")]
public abstract virtual string get_Name();
    [DispIdAttribute("0")]
public abstract virtual void set_Name(string pVal);
    [DispIdAttribute("3")]
public abstract virtual string get_FullName();
    [TypeLibFuncAttribute("1024")]
[DispIdAttribute("4")]
public abstract virtual ProjectItem get_ProjectItem();
    [TypeLibFuncAttribute("1024")]
[DispIdAttribute("5")]
public abstract virtual vsCMElement get_Kind();
    [DispIdAttribute("6")]
[TypeLibFuncAttribute("1024")]
public abstract virtual bool get_IsCodeType();
    [DispIdAttribute("7")]
[TypeLibFuncAttribute("1024")]
public abstract virtual vsCMInfoLocation get_InfoLocation();
    [DispIdAttribute("8")]
[TypeLibFuncAttribute("1024")]
public abstract virtual CodeElements get_Children();
    [TypeLibFuncAttribute("1024")]
[DispIdAttribute("9")]
public abstract virtual string get_Language();
    [TypeLibFuncAttribute("1024")]
[DispIdAttribute("10")]
public abstract virtual TextPoint get_StartPoint();
    [TypeLibFuncAttribute("1024")]
[DispIdAttribute("11")]
public abstract virtual TextPoint get_EndPoint();
    [TypeLibFuncAttribute("1024")]
[DispIdAttribute("12")]
public abstract virtual object get_ExtenderNames();
    [TypeLibFuncAttribute("1024")]
[DispIdAttribute("13")]
public abstract virtual object get_Extender(string ExtenderName);
    [DispIdAttribute("14")]
[TypeLibFuncAttribute("1024")]
public abstract virtual string get_ExtenderCATID();
    [DispIdAttribute("15")]
[TypeLibFuncAttribute("1024")]
public abstract virtual TextPoint GetStartPoint(vsCMPart Part);
    [TypeLibFuncAttribute("1024")]
[DispIdAttribute("16")]
public abstract virtual TextPoint GetEndPoint(vsCMPart Part);
    [DispIdAttribute("31")]
[TypeLibFuncAttribute("1024")]
public abstract virtual object get_Parent();
    [DispIdAttribute("32")]
[TypeLibFuncAttribute("1024")]
public abstract virtual CodeNamespace get_Namespace();
    [DispIdAttribute("33")]
[TypeLibFuncAttribute("1024")]
public abstract virtual CodeElements get_Bases();
    [DispIdAttribute("34")]
[TypeLibFuncAttribute("1024")]
public abstract virtual CodeElements get_Members();
    [DispIdAttribute("35")]
public abstract virtual void set_Access(vsCMAccess pAccess);
    [DispIdAttribute("35")]
public abstract virtual vsCMAccess get_Access();
    [DispIdAttribute("36")]
[TypeLibFuncAttribute("1024")]
public abstract virtual CodeElements get_Attributes();
    [DispIdAttribute("37")]
[TypeLibFuncAttribute("1024")]
public abstract virtual string get_DocComment();
    [TypeLibFuncAttribute("1024")]
[DispIdAttribute("37")]
public abstract virtual void set_DocComment(string pDocComment);
    [TypeLibFuncAttribute("1024")]
[DispIdAttribute("38")]
public abstract virtual string get_Comment();
    [DispIdAttribute("38")]
[TypeLibFuncAttribute("1024")]
public abstract virtual void set_Comment(string pComment);
    [DispIdAttribute("39")]
public abstract virtual CodeElement AddBase(object Base, object Position);
    [DispIdAttribute("40")]
public abstract virtual CodeAttribute AddAttribute(string Name, string Value, object Position);
    [DispIdAttribute("41")]
public abstract virtual void RemoveBase(object Element);
    [DispIdAttribute("42")]
public abstract virtual void RemoveMember(object Element);
    [DispIdAttribute("43")]
public abstract virtual bool get_IsDerivedFrom(string FullName);
    [TypeLibFuncAttribute("1024")]
[DispIdAttribute("44")]
public abstract virtual CodeElements get_DerivedTypes();
    [DispIdAttribute("61")]
[TypeLibFuncAttribute("1024")]
public abstract virtual CodeClass get_BaseClass();
    [TypeLibFuncAttribute("1024")]
[DispIdAttribute("62")]
public abstract virtual string get_Prototype(int Flags);
    [DispIdAttribute("63")]
[TypeLibFuncAttribute("1024")]
public abstract virtual CodeTypeRef get_Type();
    [DispIdAttribute("63")]
[TypeLibFuncAttribute("1024")]
public abstract virtual void set_Type(CodeTypeRef pCodeTypeRef);
    [TypeLibFuncAttribute("1024")]
[DispIdAttribute("64")]
public abstract virtual CodeElements get_Parameters();
    [DispIdAttribute("65")]
public abstract virtual CodeParameter AddParameter(string Name, object Type, object Position);
    [DispIdAttribute("66")]
public abstract virtual void RemoveParameter(object Element);
    [DispIdAttribute("200")]
public abstract virtual bool get_IsGeneric();
}
[DefaultMemberAttribute("Name")]
[TypeLibTypeAttribute("4160")]
[GuidAttribute("F03DCCE8-233B-43D7-A66B-A66EFC1F85C3")]
public interface EnvDTE80.CodeElement2 {
    [DispIdAttribute("1")]
public DTE DTE { get; }
    [DispIdAttribute("2")]
public CodeElements Collection { get; }
    [DispIdAttribute("0")]
public string Name { get; public set; }
    [DispIdAttribute("3")]
public string FullName { get; }
    [DispIdAttribute("4")]
public ProjectItem ProjectItem { get; }
    [DispIdAttribute("5")]
public vsCMElement Kind { get; }
    [DispIdAttribute("6")]
public bool IsCodeType { get; }
    [DispIdAttribute("7")]
public vsCMInfoLocation InfoLocation { get; }
    [DispIdAttribute("8")]
public CodeElements Children { get; }
    [DispIdAttribute("9")]
public string Language { get; }
    [DispIdAttribute("10")]
public TextPoint StartPoint { get; }
    [DispIdAttribute("11")]
public TextPoint EndPoint { get; }
    [DispIdAttribute("12")]
public object ExtenderNames { get; }
    [DispIdAttribute("13")]
public object Extender { get; }
    [DispIdAttribute("14")]
public string ExtenderCATID { get; }
    [DispIdAttribute("200")]
public string ElementID { get; }
    [DispIdAttribute("1")]
[TypeLibFuncAttribute("1024")]
public abstract virtual DTE get_DTE();
    [DispIdAttribute("2")]
[TypeLibFuncAttribute("1024")]
public abstract virtual CodeElements get_Collection();
    [DispIdAttribute("0")]
public abstract virtual string get_Name();
    [DispIdAttribute("0")]
public abstract virtual void set_Name(string pVal);
    [DispIdAttribute("3")]
public abstract virtual string get_FullName();
    [TypeLibFuncAttribute("1024")]
[DispIdAttribute("4")]
public abstract virtual ProjectItem get_ProjectItem();
    [DispIdAttribute("5")]
[TypeLibFuncAttribute("1024")]
public abstract virtual vsCMElement get_Kind();
    [TypeLibFuncAttribute("1024")]
[DispIdAttribute("6")]
public abstract virtual bool get_IsCodeType();
    [DispIdAttribute("7")]
[TypeLibFuncAttribute("1024")]
public abstract virtual vsCMInfoLocation get_InfoLocation();
    [DispIdAttribute("8")]
[TypeLibFuncAttribute("1024")]
public abstract virtual CodeElements get_Children();
    [DispIdAttribute("9")]
[TypeLibFuncAttribute("1024")]
public abstract virtual string get_Language();
    [DispIdAttribute("10")]
[TypeLibFuncAttribute("1024")]
public abstract virtual TextPoint get_StartPoint();
    [TypeLibFuncAttribute("1024")]
[DispIdAttribute("11")]
public abstract virtual TextPoint get_EndPoint();
    [DispIdAttribute("12")]
[TypeLibFuncAttribute("1024")]
public abstract virtual object get_ExtenderNames();
    [TypeLibFuncAttribute("1024")]
[DispIdAttribute("13")]
public abstract virtual object get_Extender(string ExtenderName);
    [TypeLibFuncAttribute("1024")]
[DispIdAttribute("14")]
public abstract virtual string get_ExtenderCATID();
    [DispIdAttribute("15")]
[TypeLibFuncAttribute("1024")]
public abstract virtual TextPoint GetStartPoint(vsCMPart Part);
    [DispIdAttribute("16")]
[TypeLibFuncAttribute("1024")]
public abstract virtual TextPoint GetEndPoint(vsCMPart Part);
    [DispIdAttribute("200")]
public abstract virtual string get_ElementID();
    [DispIdAttribute("201")]
public abstract virtual void RenameSymbol(string NewName);
}
[DefaultMemberAttribute("Name")]
[TypeLibTypeAttribute("4160")]
[GuidAttribute("CE615BD2-8ED5-4F0C-A7B6-4A299D8801FD")]
public interface EnvDTE80.CodeEvent {
    [DispIdAttribute("1")]
public DTE DTE { get; }
    [DispIdAttribute("2")]
public CodeElements Collection { get; }
    [DispIdAttribute("0")]
public string Name { get; public set; }
    [DispIdAttribute("3")]
public string FullName { get; }
    [DispIdAttribute("4")]
public ProjectItem ProjectItem { get; }
    [DispIdAttribute("5")]
public vsCMElement Kind { get; }
    [DispIdAttribute("6")]
public bool IsCodeType { get; }
    [DispIdAttribute("7")]
public vsCMInfoLocation InfoLocation { get; }
    [DispIdAttribute("8")]
public CodeElements Children { get; }
    [DispIdAttribute("9")]
public string Language { get; }
    [DispIdAttribute("10")]
public TextPoint StartPoint { get; }
    [DispIdAttribute("11")]
public TextPoint EndPoint { get; }
    [DispIdAttribute("12")]
public object ExtenderNames { get; }
    [DispIdAttribute("13")]
public object Extender { get; }
    [DispIdAttribute("14")]
public string ExtenderCATID { get; }
    [DispIdAttribute("31")]
public object Parent { get; }
    [DispIdAttribute("32")]
public vsCMAccess Access { get; public set; }
    [DispIdAttribute("33")]
public CodeElements Attributes { get; }
    [DispIdAttribute("34")]
public string DocComment { get; public set; }
    [DispIdAttribute("35")]
public string Comment { get; public set; }
    [DispIdAttribute("37")]
public CodeFunction Adder { get; public set; }
    [DispIdAttribute("38")]
public CodeFunction Remover { get; public set; }
    [DispIdAttribute("39")]
public CodeFunction Thrower { get; public set; }
    [DispIdAttribute("40")]
public bool IsPropertyStyleEvent { get; }
    [DispIdAttribute("41")]
public string Prototype { get; }
    [DispIdAttribute("42")]
public CodeTypeRef Type { get; public set; }
    [DispIdAttribute("43")]
public vsCMOverrideKind OverrideKind { get; public set; }
    [DispIdAttribute("44")]
public bool IsShared { get; public set; }
    [TypeLibFuncAttribute("1024")]
[DispIdAttribute("1")]
public abstract virtual DTE get_DTE();
    [DispIdAttribute("2")]
[TypeLibFuncAttribute("1024")]
public abstract virtual CodeElements get_Collection();
    [DispIdAttribute("0")]
public abstract virtual string get_Name();
    [DispIdAttribute("0")]
public abstract virtual void set_Name(string pVal);
    [DispIdAttribute("3")]
public abstract virtual string get_FullName();
    [DispIdAttribute("4")]
[TypeLibFuncAttribute("1024")]
public abstract virtual ProjectItem get_ProjectItem();
    [TypeLibFuncAttribute("1024")]
[DispIdAttribute("5")]
public abstract virtual vsCMElement get_Kind();
    [DispIdAttribute("6")]
[TypeLibFuncAttribute("1024")]
public abstract virtual bool get_IsCodeType();
    [DispIdAttribute("7")]
[TypeLibFuncAttribute("1024")]
public abstract virtual vsCMInfoLocation get_InfoLocation();
    [TypeLibFuncAttribute("1024")]
[DispIdAttribute("8")]
public abstract virtual CodeElements get_Children();
    [TypeLibFuncAttribute("1024")]
[DispIdAttribute("9")]
public abstract virtual string get_Language();
    [TypeLibFuncAttribute("1024")]
[DispIdAttribute("10")]
public abstract virtual TextPoint get_StartPoint();
    [TypeLibFuncAttribute("1024")]
[DispIdAttribute("11")]
public abstract virtual TextPoint get_EndPoint();
    [DispIdAttribute("12")]
[TypeLibFuncAttribute("1024")]
public abstract virtual object get_ExtenderNames();
    [TypeLibFuncAttribute("1024")]
[DispIdAttribute("13")]
public abstract virtual object get_Extender(string ExtenderName);
    [TypeLibFuncAttribute("1024")]
[DispIdAttribute("14")]
public abstract virtual string get_ExtenderCATID();
    [TypeLibFuncAttribute("1024")]
[DispIdAttribute("15")]
public abstract virtual TextPoint GetStartPoint(vsCMPart Part);
    [TypeLibFuncAttribute("1024")]
[DispIdAttribute("16")]
public abstract virtual TextPoint GetEndPoint(vsCMPart Part);
    [DispIdAttribute("31")]
public abstract virtual object get_Parent();
    [DispIdAttribute("32")]
public abstract virtual void set_Access(vsCMAccess Access);
    [DispIdAttribute("32")]
public abstract virtual vsCMAccess get_Access();
    [DispIdAttribute("33")]
public abstract virtual CodeElements get_Attributes();
    [DispIdAttribute("34")]
public abstract virtual string get_DocComment();
    [DispIdAttribute("34")]
public abstract virtual void set_DocComment(string pDocComment);
    [DispIdAttribute("35")]
public abstract virtual string get_Comment();
    [DispIdAttribute("35")]
public abstract virtual void set_Comment(string pComment);
    [DispIdAttribute("36")]
public abstract virtual CodeAttribute AddAttribute(string Name, string Value, object Position);
    [DispIdAttribute("37")]
public abstract virtual CodeFunction get_Adder();
    [DispIdAttribute("37")]
public abstract virtual void set_Adder(CodeFunction ppCodeFunction);
    [DispIdAttribute("38")]
public abstract virtual CodeFunction get_Remover();
    [DispIdAttribute("38")]
public abstract virtual void set_Remover(CodeFunction ppCodeFunction);
    [DispIdAttribute("39")]
public abstract virtual CodeFunction get_Thrower();
    [DispIdAttribute("39")]
public abstract virtual void set_Thrower(CodeFunction ppCodeFunction);
    [DispIdAttribute("40")]
public abstract virtual bool get_IsPropertyStyleEvent();
    [TypeLibFuncAttribute("1024")]
[DispIdAttribute("41")]
public abstract virtual string get_Prototype(int Flags);
    [DispIdAttribute("42")]
[TypeLibFuncAttribute("1024")]
public abstract virtual CodeTypeRef get_Type();
    [TypeLibFuncAttribute("1024")]
[DispIdAttribute("42")]
public abstract virtual void set_Type(CodeTypeRef ppCodeTypeRef);
    [DispIdAttribute("43")]
public abstract virtual vsCMOverrideKind get_OverrideKind();
    [DispIdAttribute("43")]
public abstract virtual void set_OverrideKind(vsCMOverrideKind Kind);
    [DispIdAttribute("44")]
public abstract virtual bool get_IsShared();
    [DispIdAttribute("44")]
public abstract virtual void set_IsShared(bool pIsShared);
}
[TypeLibTypeAttribute("4160")]
[GuidAttribute("7E20CD35-8689-466D-8EA0-A863B7EA5DB9")]
[DefaultMemberAttribute("Name")]
public interface EnvDTE80.CodeFunction2 {
    [DispIdAttribute("1")]
public DTE DTE { get; }
    [DispIdAttribute("2")]
public CodeElements Collection { get; }
    [DispIdAttribute("0")]
public string Name { get; public set; }
    [DispIdAttribute("3")]
public string FullName { get; }
    [DispIdAttribute("4")]
public ProjectItem ProjectItem { get; }
    [DispIdAttribute("5")]
public vsCMElement Kind { get; }
    [DispIdAttribute("6")]
public bool IsCodeType { get; }
    [DispIdAttribute("7")]
public vsCMInfoLocation InfoLocation { get; }
    [DispIdAttribute("8")]
public CodeElements Children { get; }
    [DispIdAttribute("9")]
public string Language { get; }
    [DispIdAttribute("10")]
public TextPoint StartPoint { get; }
    [DispIdAttribute("11")]
public TextPoint EndPoint { get; }
    [DispIdAttribute("12")]
public object ExtenderNames { get; }
    [DispIdAttribute("13")]
public object Extender { get; }
    [DispIdAttribute("14")]
public string ExtenderCATID { get; }
    [DispIdAttribute("31")]
public object Parent { get; }
    [DispIdAttribute("32")]
public vsCMFunction FunctionKind { get; }
    [DispIdAttribute("34")]
public string Prototype { get; }
    [DispIdAttribute("35")]
public CodeTypeRef Type { get; public set; }
    [DispIdAttribute("36")]
public CodeElements Parameters { get; }
    [DispIdAttribute("38")]
public vsCMAccess Access { get; public set; }
    [DispIdAttribute("39")]
public bool IsOverloaded { get; }
    [DispIdAttribute("40")]
public bool IsShared { get; public set; }
    [DispIdAttribute("41")]
public bool MustImplement { get; public set; }
    [DispIdAttribute("42")]
public CodeElements Overloads { get; }
    [DispIdAttribute("43")]
public CodeElements Attributes { get; }
    [DispIdAttribute("44")]
public string DocComment { get; public set; }
    [DispIdAttribute("45")]
public string Comment { get; public set; }
    [DispIdAttribute("50")]
public bool CanOverride { get; public set; }
    [DispIdAttribute("201")]
public vsCMOverrideKind OverrideKind { get; public set; }
    [DispIdAttribute("202")]
public bool IsGeneric { get; }
    [TypeLibFuncAttribute("1024")]
[DispIdAttribute("1")]
public abstract virtual DTE get_DTE();
    [DispIdAttribute("2")]
[TypeLibFuncAttribute("1024")]
public abstract virtual CodeElements get_Collection();
    [DispIdAttribute("0")]
public abstract virtual string get_Name();
    [DispIdAttribute("0")]
public abstract virtual void set_Name(string pVal);
    [DispIdAttribute("3")]
public abstract virtual string get_FullName();
    [DispIdAttribute("4")]
[TypeLibFuncAttribute("1024")]
public abstract virtual ProjectItem get_ProjectItem();
    [TypeLibFuncAttribute("1024")]
[DispIdAttribute("5")]
public abstract virtual vsCMElement get_Kind();
    [TypeLibFuncAttribute("1024")]
[DispIdAttribute("6")]
public abstract virtual bool get_IsCodeType();
    [DispIdAttribute("7")]
[TypeLibFuncAttribute("1024")]
public abstract virtual vsCMInfoLocation get_InfoLocation();
    [DispIdAttribute("8")]
[TypeLibFuncAttribute("1024")]
public abstract virtual CodeElements get_Children();
    [TypeLibFuncAttribute("1024")]
[DispIdAttribute("9")]
public abstract virtual string get_Language();
    [DispIdAttribute("10")]
[TypeLibFuncAttribute("1024")]
public abstract virtual TextPoint get_StartPoint();
    [DispIdAttribute("11")]
[TypeLibFuncAttribute("1024")]
public abstract virtual TextPoint get_EndPoint();
    [TypeLibFuncAttribute("1024")]
[DispIdAttribute("12")]
public abstract virtual object get_ExtenderNames();
    [TypeLibFuncAttribute("1024")]
[DispIdAttribute("13")]
public abstract virtual object get_Extender(string ExtenderName);
    [DispIdAttribute("14")]
[TypeLibFuncAttribute("1024")]
public abstract virtual string get_ExtenderCATID();
    [DispIdAttribute("15")]
[TypeLibFuncAttribute("1024")]
public abstract virtual TextPoint GetStartPoint(vsCMPart Part);
    [TypeLibFuncAttribute("1024")]
[DispIdAttribute("16")]
public abstract virtual TextPoint GetEndPoint(vsCMPart Part);
    [TypeLibFuncAttribute("1024")]
[DispIdAttribute("31")]
public abstract virtual object get_Parent();
    [TypeLibFuncAttribute("1024")]
[DispIdAttribute("32")]
public abstract virtual vsCMFunction get_FunctionKind();
    [DispIdAttribute("34")]
[TypeLibFuncAttribute("1024")]
public abstract virtual string get_Prototype(int Flags);
    [DispIdAttribute("35")]
[TypeLibFuncAttribute("1024")]
public abstract virtual CodeTypeRef get_Type();
    [DispIdAttribute("35")]
[TypeLibFuncAttribute("1024")]
public abstract virtual void set_Type(CodeTypeRef ppCodeTypeRef);
    [TypeLibFuncAttribute("1024")]
[DispIdAttribute("36")]
public abstract virtual CodeElements get_Parameters();
    [DispIdAttribute("38")]
public abstract virtual void set_Access(vsCMAccess Access);
    [DispIdAttribute("38")]
public abstract virtual vsCMAccess get_Access();
    [DispIdAttribute("39")]
public abstract virtual bool get_IsOverloaded();
    [DispIdAttribute("40")]
public abstract virtual bool get_IsShared();
    [DispIdAttribute("40")]
public abstract virtual void set_IsShared(bool Shared);
    [DispIdAttribute("41")]
public abstract virtual bool get_MustImplement();
    [DispIdAttribute("41")]
public abstract virtual void set_MustImplement(bool MustImplement);
    [DispIdAttribute("42")]
[TypeLibFuncAttribute("1024")]
public abstract virtual CodeElements get_Overloads();
    [DispIdAttribute("43")]
[TypeLibFuncAttribute("1024")]
public abstract virtual CodeElements get_Attributes();
    [DispIdAttribute("44")]
[TypeLibFuncAttribute("1024")]
public abstract virtual string get_DocComment();
    [TypeLibFuncAttribute("1024")]
[DispIdAttribute("44")]
public abstract virtual void set_DocComment(string pDocComment);
    [TypeLibFuncAttribute("1024")]
[DispIdAttribute("45")]
public abstract virtual string get_Comment();
    [DispIdAttribute("45")]
[TypeLibFuncAttribute("1024")]
public abstract virtual void set_Comment(string pComment);
    [DispIdAttribute("47")]
public abstract virtual CodeParameter AddParameter(string Name, object Type, object Position);
    [DispIdAttribute("48")]
public abstract virtual CodeAttribute AddAttribute(string Name, string Value, object Position);
    [DispIdAttribute("49")]
public abstract virtual void RemoveParameter(object Element);
    [DispIdAttribute("50")]
public abstract virtual bool get_CanOverride();
    [DispIdAttribute("50")]
public abstract virtual void set_CanOverride(bool pCanOverride);
    [DispIdAttribute("201")]
public abstract virtual vsCMOverrideKind get_OverrideKind();
    [DispIdAttribute("201")]
public abstract virtual void set_OverrideKind(vsCMOverrideKind Kind);
    [DispIdAttribute("202")]
public abstract virtual bool get_IsGeneric();
}
[TypeLibTypeAttribute("4160")]
[DefaultMemberAttribute("Name")]
[GuidAttribute("0C9A256E-0FF9-4D4A-88E6-304ACF78225F")]
public interface EnvDTE80.CodeImport {
    [DispIdAttribute("1")]
public DTE DTE { get; }
    [DispIdAttribute("2")]
public CodeElements Collection { get; }
    [DispIdAttribute("0")]
public string Name { get; public set; }
    [DispIdAttribute("3")]
public string FullName { get; }
    [DispIdAttribute("4")]
public ProjectItem ProjectItem { get; }
    [DispIdAttribute("5")]
public vsCMElement Kind { get; }
    [DispIdAttribute("6")]
public bool IsCodeType { get; }
    [DispIdAttribute("7")]
public vsCMInfoLocation InfoLocation { get; }
    [DispIdAttribute("8")]
public CodeElements Children { get; }
    [DispIdAttribute("9")]
public string Language { get; }
    [DispIdAttribute("10")]
public TextPoint StartPoint { get; }
    [DispIdAttribute("11")]
public TextPoint EndPoint { get; }
    [DispIdAttribute("12")]
public object ExtenderNames { get; }
    [DispIdAttribute("13")]
public object Extender { get; }
    [DispIdAttribute("14")]
public string ExtenderCATID { get; }
    [DispIdAttribute("201")]
public string Namespace { get; public set; }
    [DispIdAttribute("202")]
public string Alias { get; public set; }
    [DispIdAttribute("203")]
public object Parent { get; }
    [DispIdAttribute("1")]
[TypeLibFuncAttribute("1024")]
public abstract virtual DTE get_DTE();
    [TypeLibFuncAttribute("1024")]
[DispIdAttribute("2")]
public abstract virtual CodeElements get_Collection();
    [DispIdAttribute("0")]
public abstract virtual string get_Name();
    [DispIdAttribute("0")]
public abstract virtual void set_Name(string pVal);
    [DispIdAttribute("3")]
public abstract virtual string get_FullName();
    [DispIdAttribute("4")]
[TypeLibFuncAttribute("1024")]
public abstract virtual ProjectItem get_ProjectItem();
    [TypeLibFuncAttribute("1024")]
[DispIdAttribute("5")]
public abstract virtual vsCMElement get_Kind();
    [DispIdAttribute("6")]
[TypeLibFuncAttribute("1024")]
public abstract virtual bool get_IsCodeType();
    [TypeLibFuncAttribute("1024")]
[DispIdAttribute("7")]
public abstract virtual vsCMInfoLocation get_InfoLocation();
    [DispIdAttribute("8")]
[TypeLibFuncAttribute("1024")]
public abstract virtual CodeElements get_Children();
    [TypeLibFuncAttribute("1024")]
[DispIdAttribute("9")]
public abstract virtual string get_Language();
    [TypeLibFuncAttribute("1024")]
[DispIdAttribute("10")]
public abstract virtual TextPoint get_StartPoint();
    [TypeLibFuncAttribute("1024")]
[DispIdAttribute("11")]
public abstract virtual TextPoint get_EndPoint();
    [DispIdAttribute("12")]
[TypeLibFuncAttribute("1024")]
public abstract virtual object get_ExtenderNames();
    [TypeLibFuncAttribute("1024")]
[DispIdAttribute("13")]
public abstract virtual object get_Extender(string ExtenderName);
    [TypeLibFuncAttribute("1024")]
[DispIdAttribute("14")]
public abstract virtual string get_ExtenderCATID();
    [DispIdAttribute("15")]
[TypeLibFuncAttribute("1024")]
public abstract virtual TextPoint GetStartPoint(vsCMPart Part);
    [TypeLibFuncAttribute("1024")]
[DispIdAttribute("16")]
public abstract virtual TextPoint GetEndPoint(vsCMPart Part);
    [DispIdAttribute("201")]
public abstract virtual string get_Namespace();
    [DispIdAttribute("201")]
public abstract virtual void set_Namespace(string Name);
    [DispIdAttribute("202")]
public abstract virtual string get_Alias();
    [DispIdAttribute("202")]
public abstract virtual void set_Alias(string Alias);
    [DispIdAttribute("203")]
public abstract virtual object get_Parent();
}
[DefaultMemberAttribute("Name")]
[GuidAttribute("860AB609-8AF2-4434-B4DD-A43DEE31B017")]
[TypeLibTypeAttribute("4160")]
public interface EnvDTE80.CodeInterface2 {
    [DispIdAttribute("1")]
public DTE DTE { get; }
    [DispIdAttribute("2")]
public CodeElements Collection { get; }
    [DispIdAttribute("0")]
public string Name { get; public set; }
    [DispIdAttribute("3")]
public string FullName { get; }
    [DispIdAttribute("4")]
public ProjectItem ProjectItem { get; }
    [DispIdAttribute("5")]
public vsCMElement Kind { get; }
    [DispIdAttribute("6")]
public bool IsCodeType { get; }
    [DispIdAttribute("7")]
public vsCMInfoLocation InfoLocation { get; }
    [DispIdAttribute("8")]
public CodeElements Children { get; }
    [DispIdAttribute("9")]
public string Language { get; }
    [DispIdAttribute("10")]
public TextPoint StartPoint { get; }
    [DispIdAttribute("11")]
public TextPoint EndPoint { get; }
    [DispIdAttribute("12")]
public object ExtenderNames { get; }
    [DispIdAttribute("13")]
public object Extender { get; }
    [DispIdAttribute("14")]
public string ExtenderCATID { get; }
    [DispIdAttribute("31")]
public object Parent { get; }
    [DispIdAttribute("32")]
public CodeNamespace Namespace { get; }
    [DispIdAttribute("33")]
public CodeElements Bases { get; }
    [DispIdAttribute("34")]
public CodeElements Members { get; }
    [DispIdAttribute("35")]
public vsCMAccess Access { get; public set; }
    [DispIdAttribute("36")]
public CodeElements Attributes { get; }
    [DispIdAttribute("37")]
public string DocComment { get; public set; }
    [DispIdAttribute("38")]
public string Comment { get; public set; }
    [DispIdAttribute("43")]
public bool IsDerivedFrom { get; }
    [DispIdAttribute("44")]
public CodeElements DerivedTypes { get; }
    [DispIdAttribute("200")]
public bool IsGeneric { get; }
    [DispIdAttribute("202")]
public vsCMDataTypeKind DataTypeKind { get; public set; }
    [DispIdAttribute("203")]
public CodeElements Parts { get; }
    [DispIdAttribute("1")]
[TypeLibFuncAttribute("1024")]
public abstract virtual DTE get_DTE();
    [DispIdAttribute("2")]
[TypeLibFuncAttribute("1024")]
public abstract virtual CodeElements get_Collection();
    [DispIdAttribute("0")]
public abstract virtual string get_Name();
    [DispIdAttribute("0")]
public abstract virtual void set_Name(string pVal);
    [DispIdAttribute("3")]
public abstract virtual string get_FullName();
    [DispIdAttribute("4")]
[TypeLibFuncAttribute("1024")]
public abstract virtual ProjectItem get_ProjectItem();
    [TypeLibFuncAttribute("1024")]
[DispIdAttribute("5")]
public abstract virtual vsCMElement get_Kind();
    [TypeLibFuncAttribute("1024")]
[DispIdAttribute("6")]
public abstract virtual bool get_IsCodeType();
    [DispIdAttribute("7")]
[TypeLibFuncAttribute("1024")]
public abstract virtual vsCMInfoLocation get_InfoLocation();
    [DispIdAttribute("8")]
[TypeLibFuncAttribute("1024")]
public abstract virtual CodeElements get_Children();
    [DispIdAttribute("9")]
[TypeLibFuncAttribute("1024")]
public abstract virtual string get_Language();
    [TypeLibFuncAttribute("1024")]
[DispIdAttribute("10")]
public abstract virtual TextPoint get_StartPoint();
    [DispIdAttribute("11")]
[TypeLibFuncAttribute("1024")]
public abstract virtual TextPoint get_EndPoint();
    [DispIdAttribute("12")]
[TypeLibFuncAttribute("1024")]
public abstract virtual object get_ExtenderNames();
    [DispIdAttribute("13")]
[TypeLibFuncAttribute("1024")]
public abstract virtual object get_Extender(string ExtenderName);
    [TypeLibFuncAttribute("1024")]
[DispIdAttribute("14")]
public abstract virtual string get_ExtenderCATID();
    [TypeLibFuncAttribute("1024")]
[DispIdAttribute("15")]
public abstract virtual TextPoint GetStartPoint(vsCMPart Part);
    [TypeLibFuncAttribute("1024")]
[DispIdAttribute("16")]
public abstract virtual TextPoint GetEndPoint(vsCMPart Part);
    [TypeLibFuncAttribute("1024")]
[DispIdAttribute("31")]
public abstract virtual object get_Parent();
    [DispIdAttribute("32")]
[TypeLibFuncAttribute("1024")]
public abstract virtual CodeNamespace get_Namespace();
    [DispIdAttribute("33")]
[TypeLibFuncAttribute("1024")]
public abstract virtual CodeElements get_Bases();
    [DispIdAttribute("34")]
[TypeLibFuncAttribute("1024")]
public abstract virtual CodeElements get_Members();
    [DispIdAttribute("35")]
public abstract virtual void set_Access(vsCMAccess pAccess);
    [DispIdAttribute("35")]
public abstract virtual vsCMAccess get_Access();
    [DispIdAttribute("36")]
[TypeLibFuncAttribute("1024")]
public abstract virtual CodeElements get_Attributes();
    [DispIdAttribute("37")]
[TypeLibFuncAttribute("1024")]
public abstract virtual string get_DocComment();
    [DispIdAttribute("37")]
[TypeLibFuncAttribute("1024")]
public abstract virtual void set_DocComment(string pDocComment);
    [TypeLibFuncAttribute("1024")]
[DispIdAttribute("38")]
public abstract virtual string get_Comment();
    [TypeLibFuncAttribute("1024")]
[DispIdAttribute("38")]
public abstract virtual void set_Comment(string pComment);
    [DispIdAttribute("39")]
public abstract virtual CodeElement AddBase(object Base, object Position);
    [DispIdAttribute("40")]
public abstract virtual CodeAttribute AddAttribute(string Name, string Value, object Position);
    [DispIdAttribute("41")]
public abstract virtual void RemoveBase(object Element);
    [DispIdAttribute("42")]
public abstract virtual void RemoveMember(object Element);
    [DispIdAttribute("43")]
public abstract virtual bool get_IsDerivedFrom(string FullName);
    [DispIdAttribute("44")]
[TypeLibFuncAttribute("1024")]
public abstract virtual CodeElements get_DerivedTypes();
    [DispIdAttribute("61")]
public abstract virtual CodeFunction AddFunction(string Name, vsCMFunction Kind, object Type, object Position, vsCMAccess Access);
    [DispIdAttribute("62")]
public abstract virtual CodeProperty AddProperty(string GetterName, string PutterName, object Type, object Position, vsCMAccess Access, object Location);
    [DispIdAttribute("200")]
public abstract virtual bool get_IsGeneric();
    [DispIdAttribute("201")]
public abstract virtual CodeEvent AddEvent(string Name, string FullDelegateName, bool CreatePropertyStyleEvent, object Position, vsCMAccess Access);
    [DispIdAttribute("202")]
public abstract virtual vsCMDataTypeKind get_DataTypeKind();
    [DispIdAttribute("202")]
public abstract virtual void set_DataTypeKind(vsCMDataTypeKind Kind);
    [DispIdAttribute("203")]
public abstract virtual CodeElements get_Parts();
}
[GuidAttribute("99B9CD0E-6C89-4BC4-BBA2-FFD3529D3ACB")]
public interface EnvDTE80.CodeModel2 {
    [DispIdAttribute("1")]
public DTE DTE { get; }
    [DispIdAttribute("2")]
public Project Parent { get; }
    [DispIdAttribute("3")]
public string Language { get; }
    [DispIdAttribute("4")]
public CodeElements CodeElements { get; }
    [DispIdAttribute("17")]
public bool IsCaseSensitive { get; }
    [DispIdAttribute("1")]
public abstract virtual DTE get_DTE();
    [DispIdAttribute("2")]
public abstract virtual Project get_Parent();
    [DispIdAttribute("3")]
public abstract virtual string get_Language();
    [DispIdAttribute("4")]
public abstract virtual CodeElements get_CodeElements();
    [DispIdAttribute("5")]
public abstract virtual CodeType CodeTypeFromFullName(string Name);
    [DispIdAttribute("6")]
public abstract virtual CodeNamespace AddNamespace(string Name, object Location, object Position);
    [DispIdAttribute("7")]
public abstract virtual CodeClass AddClass(string Name, object Location, object Position, object Bases, object ImplementedInterfaces, vsCMAccess Access);
    [DispIdAttribute("8")]
public abstract virtual CodeInterface AddInterface(string Name, object Location, object Position, object Bases, vsCMAccess Access);
    [DispIdAttribute("9")]
public abstract virtual CodeFunction AddFunction(string Name, object Location, vsCMFunction Kind, object Type, object Position, vsCMAccess Access);
    [DispIdAttribute("10")]
public abstract virtual CodeVariable AddVariable(string Name, object Location, object Type, object Position, vsCMAccess Access);
    [DispIdAttribute("11")]
public abstract virtual CodeStruct AddStruct(string Name, object Location, object Position, object Bases, object ImplementedInterfaces, vsCMAccess Access);
    [DispIdAttribute("12")]
public abstract virtual CodeEnum AddEnum(string Name, object Location, object Position, object Bases, vsCMAccess Access);
    [DispIdAttribute("13")]
public abstract virtual CodeDelegate AddDelegate(string Name, object Location, object Type, object Position, vsCMAccess Access);
    [DispIdAttribute("14")]
public abstract virtual CodeAttribute AddAttribute(string Name, object Location, string Value, object Position);
    [DispIdAttribute("15")]
public abstract virtual void Remove(object Element);
    [DispIdAttribute("16")]
public abstract virtual bool IsValidID(string Name);
    [DispIdAttribute("17")]
public abstract virtual bool get_IsCaseSensitive();
    [DispIdAttribute("18")]
public abstract virtual CodeTypeRef CreateCodeTypeRef(object Type);
    [DispIdAttribute("200")]
public abstract virtual void Synchronize();
    [DispIdAttribute("201")]
public abstract virtual string DotNetNameFromLanguageSpecific(string LanguageName);
    [DispIdAttribute("202")]
public abstract virtual string LanguageSpecificNameFromDotNet(string DotNETName);
    [DispIdAttribute("203")]
public abstract virtual CodeElement ElementFromID(string ID);
}
[ComVisibleAttribute("False")]
[GuidAttribute("66ADC510-0CA2-475D-A343-57192BCE38BF")]
[CoClassAttribute("EnvDTE80.CodeModelEventsClass")]
public interface EnvDTE80.CodeModelEvents {
}
[ComVisibleAttribute("False")]
[ComSourceInterfacesAttribute("EnvDTE80._dispCodeModelEvents")]
[GuidAttribute("B2FA9979-35EB-4CA2-B467-7370152E53B7")]
[ClassInterfaceAttribute("0")]
public class EnvDTE80.CodeModelEventsClass : object {
}
[GuidAttribute("CFA571FB-F9FF-4DC2-92A0-B03C57E7AE2E")]
public abstract class EnvDTE80.CodeModelLanguageConstants2 : object {
    public static string vsCMLanguageJSharp;
}
[GuidAttribute("35CD9E36-7C96-4429-968F-C0C350CB1A47")]
[TypeLibTypeAttribute("4160")]
[DefaultMemberAttribute("Name")]
public interface EnvDTE80.CodeParameter2 {
    [DispIdAttribute("1")]
public DTE DTE { get; }
    [DispIdAttribute("2")]
public CodeElements Collection { get; }
    [DispIdAttribute("0")]
public string Name { get; public set; }
    [DispIdAttribute("3")]
public string FullName { get; }
    [DispIdAttribute("4")]
public ProjectItem ProjectItem { get; }
    [DispIdAttribute("5")]
public vsCMElement Kind { get; }
    [DispIdAttribute("6")]
public bool IsCodeType { get; }
    [DispIdAttribute("7")]
public vsCMInfoLocation InfoLocation { get; }
    [DispIdAttribute("8")]
public CodeElements Children { get; }
    [DispIdAttribute("9")]
public string Language { get; }
    [DispIdAttribute("10")]
public TextPoint StartPoint { get; }
    [DispIdAttribute("11")]
public TextPoint EndPoint { get; }
    [DispIdAttribute("12")]
public object ExtenderNames { get; }
    [DispIdAttribute("13")]
public object Extender { get; }
    [DispIdAttribute("14")]
public string ExtenderCATID { get; }
    [DispIdAttribute("31")]
public CodeElement Parent { get; }
    [DispIdAttribute("32")]
public CodeTypeRef Type { get; public set; }
    [DispIdAttribute("33")]
public CodeElements Attributes { get; }
    [DispIdAttribute("34")]
public string DocComment { get; public set; }
    [DispIdAttribute("200")]
public vsCMParameterKind ParameterKind { get; public set; }
    [DispIdAttribute("201")]
public string DefaultValue { get; public set; }
    [TypeLibFuncAttribute("1024")]
[DispIdAttribute("1")]
public abstract virtual DTE get_DTE();
    [TypeLibFuncAttribute("1024")]
[DispIdAttribute("2")]
public abstract virtual CodeElements get_Collection();
    [DispIdAttribute("0")]
public abstract virtual string get_Name();
    [DispIdAttribute("0")]
public abstract virtual void set_Name(string pVal);
    [DispIdAttribute("3")]
public abstract virtual string get_FullName();
    [DispIdAttribute("4")]
[TypeLibFuncAttribute("1024")]
public abstract virtual ProjectItem get_ProjectItem();
    [DispIdAttribute("5")]
[TypeLibFuncAttribute("1024")]
public abstract virtual vsCMElement get_Kind();
    [TypeLibFuncAttribute("1024")]
[DispIdAttribute("6")]
public abstract virtual bool get_IsCodeType();
    [DispIdAttribute("7")]
[TypeLibFuncAttribute("1024")]
public abstract virtual vsCMInfoLocation get_InfoLocation();
    [TypeLibFuncAttribute("1024")]
[DispIdAttribute("8")]
public abstract virtual CodeElements get_Children();
    [TypeLibFuncAttribute("1024")]
[DispIdAttribute("9")]
public abstract virtual string get_Language();
    [TypeLibFuncAttribute("1024")]
[DispIdAttribute("10")]
public abstract virtual TextPoint get_StartPoint();
    [DispIdAttribute("11")]
[TypeLibFuncAttribute("1024")]
public abstract virtual TextPoint get_EndPoint();
    [TypeLibFuncAttribute("1024")]
[DispIdAttribute("12")]
public abstract virtual object get_ExtenderNames();
    [TypeLibFuncAttribute("1024")]
[DispIdAttribute("13")]
public abstract virtual object get_Extender(string ExtenderName);
    [TypeLibFuncAttribute("1024")]
[DispIdAttribute("14")]
public abstract virtual string get_ExtenderCATID();
    [TypeLibFuncAttribute("1024")]
[DispIdAttribute("15")]
public abstract virtual TextPoint GetStartPoint(vsCMPart Part);
    [TypeLibFuncAttribute("1024")]
[DispIdAttribute("16")]
public abstract virtual TextPoint GetEndPoint(vsCMPart Part);
    [TypeLibFuncAttribute("1024")]
[DispIdAttribute("31")]
public abstract virtual CodeElement get_Parent();
    [DispIdAttribute("32")]
[TypeLibFuncAttribute("1024")]
public abstract virtual void set_Type(CodeTypeRef pCodeTypeRef);
    [TypeLibFuncAttribute("1024")]
[DispIdAttribute("32")]
public abstract virtual CodeTypeRef get_Type();
    [TypeLibFuncAttribute("1024")]
[DispIdAttribute("33")]
public abstract virtual CodeElements get_Attributes();
    [TypeLibFuncAttribute("1024")]
[DispIdAttribute("34")]
public abstract virtual string get_DocComment();
    [DispIdAttribute("34")]
[TypeLibFuncAttribute("1024")]
public abstract virtual void set_DocComment(string pDocComment);
    [DispIdAttribute("35")]
public abstract virtual CodeAttribute AddAttribute(string Name, string Value, object Position);
    [DispIdAttribute("200")]
public abstract virtual vsCMParameterKind get_ParameterKind();
    [DispIdAttribute("200")]
public abstract virtual void set_ParameterKind(vsCMParameterKind Kind);
    [DispIdAttribute("201")]
public abstract virtual string get_DefaultValue();
    [DispIdAttribute("201")]
public abstract virtual void set_DefaultValue(string Value);
}
[TypeLibTypeAttribute("4160")]
[DefaultMemberAttribute("Name")]
[GuidAttribute("33770C02-21B7-4224-A577-6877BDBA60EA")]
public interface EnvDTE80.CodeProperty2 {
    [DispIdAttribute("1")]
public DTE DTE { get; }
    [DispIdAttribute("2")]
public CodeElements Collection { get; }
    [DispIdAttribute("0")]
public string Name { get; public set; }
    [DispIdAttribute("3")]
public string FullName { get; }
    [DispIdAttribute("4")]
public ProjectItem ProjectItem { get; }
    [DispIdAttribute("5")]
public vsCMElement Kind { get; }
    [DispIdAttribute("6")]
public bool IsCodeType { get; }
    [DispIdAttribute("7")]
public vsCMInfoLocation InfoLocation { get; }
    [DispIdAttribute("8")]
public CodeElements Children { get; }
    [DispIdAttribute("9")]
public string Language { get; }
    [DispIdAttribute("10")]
public TextPoint StartPoint { get; }
    [DispIdAttribute("11")]
public TextPoint EndPoint { get; }
    [DispIdAttribute("12")]
public object ExtenderNames { get; }
    [DispIdAttribute("13")]
public object Extender { get; }
    [DispIdAttribute("14")]
public string ExtenderCATID { get; }
    [DispIdAttribute("31")]
public CodeClass Parent { get; }
    [DispIdAttribute("33")]
public string Prototype { get; }
    [DispIdAttribute("34")]
public CodeTypeRef Type { get; public set; }
    [DispIdAttribute("35")]
public CodeFunction Getter { get; public set; }
    [DispIdAttribute("36")]
public CodeFunction Setter { get; public set; }
    [DispIdAttribute("37")]
public vsCMAccess Access { get; public set; }
    [DispIdAttribute("38")]
public CodeElements Attributes { get; }
    [DispIdAttribute("39")]
public string DocComment { get; public set; }
    [DispIdAttribute("40")]
public string Comment { get; public set; }
    [DispIdAttribute("200")]
public CodeElements Parameters { get; }
    [DispIdAttribute("203")]
public bool IsGeneric { get; }
    [DispIdAttribute("204")]
public vsCMOverrideKind OverrideKind { get; public set; }
    [DispIdAttribute("205")]
public bool IsShared { get; public set; }
    [DispIdAttribute("206")]
public bool IsDefault { get; public set; }
    [DispIdAttribute("207")]
public CodeElement Parent2 { get; }
    [DispIdAttribute("209")]
public vsCMPropertyKind ReadWrite { get; }
    [DispIdAttribute("1")]
[TypeLibFuncAttribute("1024")]
public abstract virtual DTE get_DTE();
    [TypeLibFuncAttribute("1024")]
[DispIdAttribute("2")]
public abstract virtual CodeElements get_Collection();
    [DispIdAttribute("0")]
public abstract virtual string get_Name();
    [DispIdAttribute("0")]
public abstract virtual void set_Name(string pVal);
    [DispIdAttribute("3")]
public abstract virtual string get_FullName();
    [TypeLibFuncAttribute("1024")]
[DispIdAttribute("4")]
public abstract virtual ProjectItem get_ProjectItem();
    [DispIdAttribute("5")]
[TypeLibFuncAttribute("1024")]
public abstract virtual vsCMElement get_Kind();
    [TypeLibFuncAttribute("1024")]
[DispIdAttribute("6")]
public abstract virtual bool get_IsCodeType();
    [DispIdAttribute("7")]
[TypeLibFuncAttribute("1024")]
public abstract virtual vsCMInfoLocation get_InfoLocation();
    [DispIdAttribute("8")]
[TypeLibFuncAttribute("1024")]
public abstract virtual CodeElements get_Children();
    [TypeLibFuncAttribute("1024")]
[DispIdAttribute("9")]
public abstract virtual string get_Language();
    [TypeLibFuncAttribute("1024")]
[DispIdAttribute("10")]
public abstract virtual TextPoint get_StartPoint();
    [DispIdAttribute("11")]
[TypeLibFuncAttribute("1024")]
public abstract virtual TextPoint get_EndPoint();
    [DispIdAttribute("12")]
[TypeLibFuncAttribute("1024")]
public abstract virtual object get_ExtenderNames();
    [TypeLibFuncAttribute("1024")]
[DispIdAttribute("13")]
public abstract virtual object get_Extender(string ExtenderName);
    [DispIdAttribute("14")]
[TypeLibFuncAttribute("1024")]
public abstract virtual string get_ExtenderCATID();
    [TypeLibFuncAttribute("1024")]
[DispIdAttribute("15")]
public abstract virtual TextPoint GetStartPoint(vsCMPart Part);
    [DispIdAttribute("16")]
[TypeLibFuncAttribute("1024")]
public abstract virtual TextPoint GetEndPoint(vsCMPart Part);
    [TypeLibFuncAttribute("1024")]
[DispIdAttribute("31")]
public abstract virtual CodeClass get_Parent();
    [DispIdAttribute("33")]
[TypeLibFuncAttribute("1024")]
public abstract virtual string get_Prototype(int Flags);
    [DispIdAttribute("34")]
[TypeLibFuncAttribute("1024")]
public abstract virtual void set_Type(CodeTypeRef pCodeTypeRef);
    [TypeLibFuncAttribute("1024")]
[DispIdAttribute("34")]
public abstract virtual CodeTypeRef get_Type();
    [DispIdAttribute("35")]
[TypeLibFuncAttribute("1024")]
public abstract virtual CodeFunction get_Getter();
    [TypeLibFuncAttribute("1024")]
[DispIdAttribute("35")]
public abstract virtual void set_Getter(CodeFunction ppCodeFunction);
    [TypeLibFuncAttribute("1024")]
[DispIdAttribute("36")]
public abstract virtual CodeFunction get_Setter();
    [DispIdAttribute("36")]
[TypeLibFuncAttribute("1024")]
public abstract virtual void set_Setter(CodeFunction ppCodeFunction);
    [DispIdAttribute("37")]
public abstract virtual void set_Access(vsCMAccess Access);
    [DispIdAttribute("37")]
public abstract virtual vsCMAccess get_Access();
    [TypeLibFuncAttribute("1024")]
[DispIdAttribute("38")]
public abstract virtual CodeElements get_Attributes();
    [DispIdAttribute("39")]
[TypeLibFuncAttribute("1024")]
public abstract virtual string get_DocComment();
    [TypeLibFuncAttribute("1024")]
[DispIdAttribute("39")]
public abstract virtual void set_DocComment(string pDocComment);
    [TypeLibFuncAttribute("1024")]
[DispIdAttribute("40")]
public abstract virtual string get_Comment();
    [TypeLibFuncAttribute("1024")]
[DispIdAttribute("40")]
public abstract virtual void set_Comment(string pComment);
    [DispIdAttribute("42")]
public abstract virtual CodeAttribute AddAttribute(string Name, string Value, object Position);
    [DispIdAttribute("200")]
public abstract virtual CodeElements get_Parameters();
    [DispIdAttribute("201")]
public abstract virtual CodeParameter AddParameter(string Name, object Type, object Position);
    [DispIdAttribute("203")]
public abstract virtual bool get_IsGeneric();
    [DispIdAttribute("204")]
public abstract virtual vsCMOverrideKind get_OverrideKind();
    [DispIdAttribute("204")]
public abstract virtual void set_OverrideKind(vsCMOverrideKind Kind);
    [DispIdAttribute("205")]
public abstract virtual bool get_IsShared();
    [DispIdAttribute("205")]
public abstract virtual void set_IsShared(bool pIsShared);
    [DispIdAttribute("206")]
public abstract virtual bool get_IsDefault();
    [DispIdAttribute("206")]
public abstract virtual void set_IsDefault(bool pIsDefault);
    [DispIdAttribute("207")]
public abstract virtual CodeElement get_Parent2();
    [DispIdAttribute("208")]
public abstract virtual void RemoveParameter(object Element);
    [DispIdAttribute("209")]
public abstract virtual vsCMPropertyKind get_ReadWrite();
}
[DefaultMemberAttribute("Name")]
[GuidAttribute("F6DC1A01-E65A-404B-8B6D-9CDD603DB4ED")]
[TypeLibTypeAttribute("4160")]
public interface EnvDTE80.CodeStruct2 {
    [DispIdAttribute("1")]
public DTE DTE { get; }
    [DispIdAttribute("2")]
public CodeElements Collection { get; }
    [DispIdAttribute("0")]
public string Name { get; public set; }
    [DispIdAttribute("3")]
public string FullName { get; }
    [DispIdAttribute("4")]
public ProjectItem ProjectItem { get; }
    [DispIdAttribute("5")]
public vsCMElement Kind { get; }
    [DispIdAttribute("6")]
public bool IsCodeType { get; }
    [DispIdAttribute("7")]
public vsCMInfoLocation InfoLocation { get; }
    [DispIdAttribute("8")]
public CodeElements Children { get; }
    [DispIdAttribute("9")]
public string Language { get; }
    [DispIdAttribute("10")]
public TextPoint StartPoint { get; }
    [DispIdAttribute("11")]
public TextPoint EndPoint { get; }
    [DispIdAttribute("12")]
public object ExtenderNames { get; }
    [DispIdAttribute("13")]
public object Extender { get; }
    [DispIdAttribute("14")]
public string ExtenderCATID { get; }
    [DispIdAttribute("31")]
public object Parent { get; }
    [DispIdAttribute("32")]
public CodeNamespace Namespace { get; }
    [DispIdAttribute("33")]
public CodeElements Bases { get; }
    [DispIdAttribute("34")]
public CodeElements Members { get; }
    [DispIdAttribute("35")]
public vsCMAccess Access { get; public set; }
    [DispIdAttribute("36")]
public CodeElements Attributes { get; }
    [DispIdAttribute("37")]
public string DocComment { get; public set; }
    [DispIdAttribute("38")]
public string Comment { get; public set; }
    [DispIdAttribute("43")]
public bool IsDerivedFrom { get; }
    [DispIdAttribute("44")]
public CodeElements DerivedTypes { get; }
    [DispIdAttribute("61")]
public CodeElements ImplementedInterfaces { get; }
    [DispIdAttribute("62")]
public bool IsAbstract { get; public set; }
    [DispIdAttribute("200")]
public bool IsGeneric { get; }
    [DispIdAttribute("202")]
public vsCMDataTypeKind DataTypeKind { get; public set; }
    [DispIdAttribute("203")]
public CodeElements Parts { get; }
    [TypeLibFuncAttribute("1024")]
[DispIdAttribute("1")]
public abstract virtual DTE get_DTE();
    [TypeLibFuncAttribute("1024")]
[DispIdAttribute("2")]
public abstract virtual CodeElements get_Collection();
    [DispIdAttribute("0")]
public abstract virtual string get_Name();
    [DispIdAttribute("0")]
public abstract virtual void set_Name(string pVal);
    [DispIdAttribute("3")]
public abstract virtual string get_FullName();
    [TypeLibFuncAttribute("1024")]
[DispIdAttribute("4")]
public abstract virtual ProjectItem get_ProjectItem();
    [DispIdAttribute("5")]
[TypeLibFuncAttribute("1024")]
public abstract virtual vsCMElement get_Kind();
    [TypeLibFuncAttribute("1024")]
[DispIdAttribute("6")]
public abstract virtual bool get_IsCodeType();
    [DispIdAttribute("7")]
[TypeLibFuncAttribute("1024")]
public abstract virtual vsCMInfoLocation get_InfoLocation();
    [DispIdAttribute("8")]
[TypeLibFuncAttribute("1024")]
public abstract virtual CodeElements get_Children();
    [TypeLibFuncAttribute("1024")]
[DispIdAttribute("9")]
public abstract virtual string get_Language();
    [TypeLibFuncAttribute("1024")]
[DispIdAttribute("10")]
public abstract virtual TextPoint get_StartPoint();
    [DispIdAttribute("11")]
[TypeLibFuncAttribute("1024")]
public abstract virtual TextPoint get_EndPoint();
    [TypeLibFuncAttribute("1024")]
[DispIdAttribute("12")]
public abstract virtual object get_ExtenderNames();
    [TypeLibFuncAttribute("1024")]
[DispIdAttribute("13")]
public abstract virtual object get_Extender(string ExtenderName);
    [DispIdAttribute("14")]
[TypeLibFuncAttribute("1024")]
public abstract virtual string get_ExtenderCATID();
    [DispIdAttribute("15")]
[TypeLibFuncAttribute("1024")]
public abstract virtual TextPoint GetStartPoint(vsCMPart Part);
    [DispIdAttribute("16")]
[TypeLibFuncAttribute("1024")]
public abstract virtual TextPoint GetEndPoint(vsCMPart Part);
    [DispIdAttribute("31")]
[TypeLibFuncAttribute("1024")]
public abstract virtual object get_Parent();
    [DispIdAttribute("32")]
[TypeLibFuncAttribute("1024")]
public abstract virtual CodeNamespace get_Namespace();
    [DispIdAttribute("33")]
[TypeLibFuncAttribute("1024")]
public abstract virtual CodeElements get_Bases();
    [TypeLibFuncAttribute("1024")]
[DispIdAttribute("34")]
public abstract virtual CodeElements get_Members();
    [DispIdAttribute("35")]
public abstract virtual void set_Access(vsCMAccess pAccess);
    [DispIdAttribute("35")]
public abstract virtual vsCMAccess get_Access();
    [DispIdAttribute("36")]
[TypeLibFuncAttribute("1024")]
public abstract virtual CodeElements get_Attributes();
    [DispIdAttribute("37")]
[TypeLibFuncAttribute("1024")]
public abstract virtual string get_DocComment();
    [DispIdAttribute("37")]
[TypeLibFuncAttribute("1024")]
public abstract virtual void set_DocComment(string pDocComment);
    [DispIdAttribute("38")]
[TypeLibFuncAttribute("1024")]
public abstract virtual string get_Comment();
    [DispIdAttribute("38")]
[TypeLibFuncAttribute("1024")]
public abstract virtual void set_Comment(string pComment);
    [DispIdAttribute("39")]
public abstract virtual CodeElement AddBase(object Base, object Position);
    [DispIdAttribute("40")]
public abstract virtual CodeAttribute AddAttribute(string Name, string Value, object Position);
    [DispIdAttribute("41")]
public abstract virtual void RemoveBase(object Element);
    [DispIdAttribute("42")]
public abstract virtual void RemoveMember(object Element);
    [DispIdAttribute("43")]
public abstract virtual bool get_IsDerivedFrom(string FullName);
    [DispIdAttribute("44")]
[TypeLibFuncAttribute("1024")]
public abstract virtual CodeElements get_DerivedTypes();
    [DispIdAttribute("61")]
[TypeLibFuncAttribute("1024")]
public abstract virtual CodeElements get_ImplementedInterfaces();
    [DispIdAttribute("62")]
public abstract virtual bool get_IsAbstract();
    [DispIdAttribute("62")]
public abstract virtual void set_IsAbstract(bool pIsAbstract);
    [DispIdAttribute("63")]
public abstract virtual CodeInterface AddImplementedInterface(object Base, object Position);
    [DispIdAttribute("64")]
public abstract virtual CodeFunction AddFunction(string Name, vsCMFunction Kind, object Type, object Position, vsCMAccess Access, object Location);
    [DispIdAttribute("65")]
public abstract virtual CodeVariable AddVariable(string Name, object Type, object Position, vsCMAccess Access, object Location);
    [DispIdAttribute("66")]
public abstract virtual CodeProperty AddProperty(string GetterName, string PutterName, object Type, object Position, vsCMAccess Access, object Location);
    [DispIdAttribute("67")]
public abstract virtual CodeClass AddClass(string Name, object Position, object Bases, object ImplementedInterfaces, vsCMAccess Access);
    [DispIdAttribute("68")]
public abstract virtual CodeStruct AddStruct(string Name, object Position, object Bases, object ImplementedInterfaces, vsCMAccess Access);
    [DispIdAttribute("69")]
public abstract virtual CodeEnum AddEnum(string Name, object Position, object Bases, vsCMAccess Access);
    [DispIdAttribute("70")]
public abstract virtual CodeDelegate AddDelegate(string Name, object Type, object Position, vsCMAccess Access);
    [DispIdAttribute("71")]
public abstract virtual void RemoveInterface(object Element);
    [DispIdAttribute("200")]
public abstract virtual bool get_IsGeneric();
    [DispIdAttribute("201")]
public abstract virtual CodeEvent AddEvent(string Name, string FullDelegateName, bool CreatePropertyStyleEvent, object Position, vsCMAccess Access);
    [DispIdAttribute("202")]
public abstract virtual vsCMDataTypeKind get_DataTypeKind();
    [DispIdAttribute("202")]
public abstract virtual void set_DataTypeKind(vsCMDataTypeKind Kind);
    [DispIdAttribute("203")]
public abstract virtual CodeElements get_Parts();
}
[GuidAttribute("9883C07A-FA07-4CE7-BD8E-01E1A3F3A3F7")]
public interface EnvDTE80.CodeTypeRef2 {
    [DispIdAttribute("1")]
public DTE DTE { get; }
    [DispIdAttribute("2")]
public object Parent { get; }
    [DispIdAttribute("3")]
public vsCMTypeRef TypeKind { get; }
    [DispIdAttribute("4")]
public CodeType CodeType { get; public set; }
    [DispIdAttribute("5")]
public CodeTypeRef ElementType { get; public set; }
    [DispIdAttribute("6")]
public string AsString { get; }
    [DispIdAttribute("7")]
public string AsFullName { get; }
    [DispIdAttribute("8")]
public int Rank { get; public set; }
    [DispIdAttribute("200")]
public bool IsGeneric { get; }
    [DispIdAttribute("1")]
public abstract virtual DTE get_DTE();
    [DispIdAttribute("2")]
public abstract virtual object get_Parent();
    [DispIdAttribute("3")]
public abstract virtual vsCMTypeRef get_TypeKind();
    [DispIdAttribute("4")]
public abstract virtual CodeType get_CodeType();
    [DispIdAttribute("4")]
public abstract virtual void set_CodeType(CodeType value);
    [DispIdAttribute("5")]
public abstract virtual CodeTypeRef get_ElementType();
    [DispIdAttribute("5")]
public abstract virtual void set_ElementType(CodeTypeRef value);
    [DispIdAttribute("6")]
public abstract virtual string get_AsString();
    [DispIdAttribute("7")]
public abstract virtual string get_AsFullName();
    [DispIdAttribute("8")]
public abstract virtual int get_Rank();
    [DispIdAttribute("8")]
public abstract virtual void set_Rank(int value);
    [DispIdAttribute("9")]
public abstract virtual CodeTypeRef CreateArrayType(int Rank);
    [DispIdAttribute("200")]
public abstract virtual bool get_IsGeneric();
}
[TypeLibTypeAttribute("4160")]
[GuidAttribute("F747A8A0-01B1-4DA2-9259-0D5A0CB4C049")]
[DefaultMemberAttribute("Name")]
public interface EnvDTE80.CodeVariable2 {
    [DispIdAttribute("1")]
public DTE DTE { get; }
    [DispIdAttribute("2")]
public CodeElements Collection { get; }
    [DispIdAttribute("0")]
public string Name { get; public set; }
    [DispIdAttribute("3")]
public string FullName { get; }
    [DispIdAttribute("4")]
public ProjectItem ProjectItem { get; }
    [DispIdAttribute("5")]
public vsCMElement Kind { get; }
    [DispIdAttribute("6")]
public bool IsCodeType { get; }
    [DispIdAttribute("7")]
public vsCMInfoLocation InfoLocation { get; }
    [DispIdAttribute("8")]
public CodeElements Children { get; }
    [DispIdAttribute("9")]
public string Language { get; }
    [DispIdAttribute("10")]
public TextPoint StartPoint { get; }
    [DispIdAttribute("11")]
public TextPoint EndPoint { get; }
    [DispIdAttribute("12")]
public object ExtenderNames { get; }
    [DispIdAttribute("13")]
public object Extender { get; }
    [DispIdAttribute("14")]
public string ExtenderCATID { get; }
    [DispIdAttribute("31")]
public object Parent { get; }
    [DispIdAttribute("33")]
public object InitExpression { get; public set; }
    [DispIdAttribute("34")]
public string Prototype { get; }
    [DispIdAttribute("35")]
public CodeTypeRef Type { get; public set; }
    [DispIdAttribute("36")]
public vsCMAccess Access { get; public set; }
    [DispIdAttribute("37")]
public bool IsConstant { get; public set; }
    [DispIdAttribute("38")]
public CodeElements Attributes { get; }
    [DispIdAttribute("39")]
public string DocComment { get; public set; }
    [DispIdAttribute("40")]
public string Comment { get; public set; }
    [DispIdAttribute("42")]
public bool IsShared { get; public set; }
    [DispIdAttribute("200")]
public vsCMConstKind ConstKind { get; public set; }
    [DispIdAttribute("201")]
public bool IsGeneric { get; }
    [DispIdAttribute("1")]
[TypeLibFuncAttribute("1024")]
public abstract virtual DTE get_DTE();
    [TypeLibFuncAttribute("1024")]
[DispIdAttribute("2")]
public abstract virtual CodeElements get_Collection();
    [DispIdAttribute("0")]
public abstract virtual string get_Name();
    [DispIdAttribute("0")]
public abstract virtual void set_Name(string pVal);
    [DispIdAttribute("3")]
public abstract virtual string get_FullName();
    [DispIdAttribute("4")]
[TypeLibFuncAttribute("1024")]
public abstract virtual ProjectItem get_ProjectItem();
    [DispIdAttribute("5")]
[TypeLibFuncAttribute("1024")]
public abstract virtual vsCMElement get_Kind();
    [TypeLibFuncAttribute("1024")]
[DispIdAttribute("6")]
public abstract virtual bool get_IsCodeType();
    [TypeLibFuncAttribute("1024")]
[DispIdAttribute("7")]
public abstract virtual vsCMInfoLocation get_InfoLocation();
    [TypeLibFuncAttribute("1024")]
[DispIdAttribute("8")]
public abstract virtual CodeElements get_Children();
    [DispIdAttribute("9")]
[TypeLibFuncAttribute("1024")]
public abstract virtual string get_Language();
    [DispIdAttribute("10")]
[TypeLibFuncAttribute("1024")]
public abstract virtual TextPoint get_StartPoint();
    [TypeLibFuncAttribute("1024")]
[DispIdAttribute("11")]
public abstract virtual TextPoint get_EndPoint();
    [TypeLibFuncAttribute("1024")]
[DispIdAttribute("12")]
public abstract virtual object get_ExtenderNames();
    [TypeLibFuncAttribute("1024")]
[DispIdAttribute("13")]
public abstract virtual object get_Extender(string ExtenderName);
    [TypeLibFuncAttribute("1024")]
[DispIdAttribute("14")]
public abstract virtual string get_ExtenderCATID();
    [TypeLibFuncAttribute("1024")]
[DispIdAttribute("15")]
public abstract virtual TextPoint GetStartPoint(vsCMPart Part);
    [TypeLibFuncAttribute("1024")]
[DispIdAttribute("16")]
public abstract virtual TextPoint GetEndPoint(vsCMPart Part);
    [DispIdAttribute("31")]
[TypeLibFuncAttribute("1024")]
public abstract virtual object get_Parent();
    [DispIdAttribute("33")]
public abstract virtual object get_InitExpression();
    [DispIdAttribute("33")]
public abstract virtual void set_InitExpression(object pExpr);
    [TypeLibFuncAttribute("1024")]
[DispIdAttribute("34")]
public abstract virtual string get_Prototype(int Flags);
    [DispIdAttribute("35")]
[TypeLibFuncAttribute("1024")]
public abstract virtual void set_Type(CodeTypeRef pCodeTypeRef);
    [DispIdAttribute("35")]
[TypeLibFuncAttribute("1024")]
public abstract virtual CodeTypeRef get_Type();
    [DispIdAttribute("36")]
public abstract virtual void set_Access(vsCMAccess Access);
    [DispIdAttribute("36")]
public abstract virtual vsCMAccess get_Access();
    [DispIdAttribute("37")]
public abstract virtual bool get_IsConstant();
    [DispIdAttribute("37")]
public abstract virtual void set_IsConstant(bool pIsConstant);
    [TypeLibFuncAttribute("1024")]
[DispIdAttribute("38")]
public abstract virtual CodeElements get_Attributes();
    [DispIdAttribute("39")]
[TypeLibFuncAttribute("1024")]
public abstract virtual string get_DocComment();
    [DispIdAttribute("39")]
[TypeLibFuncAttribute("1024")]
public abstract virtual void set_DocComment(string pDocComment);
    [TypeLibFuncAttribute("1024")]
[DispIdAttribute("40")]
public abstract virtual string get_Comment();
    [TypeLibFuncAttribute("1024")]
[DispIdAttribute("40")]
public abstract virtual void set_Comment(string pComment);
    [DispIdAttribute("41")]
public abstract virtual CodeAttribute AddAttribute(string Name, string Value, object Position);
    [DispIdAttribute("42")]
public abstract virtual bool get_IsShared();
    [DispIdAttribute("42")]
public abstract virtual void set_IsShared(bool pShared);
    [DispIdAttribute("200")]
public abstract virtual vsCMConstKind get_ConstKind();
    [DispIdAttribute("200")]
public abstract virtual void set_ConstKind(vsCMConstKind Kind);
    [DispIdAttribute("201")]
public abstract virtual bool get_IsGeneric();
}
[DefaultMemberAttribute("Item")]
[GuidAttribute("7EAA857B-2356-494B-9E13-0F6EEFA86E43")]
public interface EnvDTE80.Commands2 {
    [DispIdAttribute("1")]
public DTE DTE { get; }
    [DispIdAttribute("2")]
public DTE Parent { get; }
    [DispIdAttribute("10")]
public int Count { get; }
    [DispIdAttribute("1")]
public abstract virtual DTE get_DTE();
    [DispIdAttribute("2")]
public abstract virtual DTE get_Parent();
    [DispIdAttribute("3")]
public abstract virtual void Add(string Guid, int ID, Object& Control);
    [DispIdAttribute("4")]
public abstract virtual void Raise(string Guid, int ID, Object& CustomIn, Object& CustomOut);
    [DispIdAttribute("5")]
public abstract virtual void CommandInfo(object CommandBarControl, String& Guid, Int32& ID);
    [DispIdAttribute("10")]
public abstract virtual int get_Count();
    [DispIdAttribute("0")]
public abstract virtual Command Item(object index, int ID);
    [DispIdAttribute("-4")]
public abstract virtual IEnumerator GetEnumerator();
    [ObsoleteAttribute("AddIn related extension points are no longer supported in Visual Studio.")]
[DispIdAttribute("11")]
public abstract virtual Command AddNamedCommand(AddIn AddInInstance, string Name, string ButtonText, string Tooltip, bool MSOButton, int Bitmap, Object[]& ContextUIGUIDs, int vsCommandDisabledFlagsValue);
    [DispIdAttribute("12")]
public abstract virtual object AddCommandBar(string Name, vsCommandBarType Type, object CommandBarParent, int Position);
    [DispIdAttribute("13")]
public abstract virtual void RemoveCommandBar(object CommandBar);
    [ObsoleteAttribute("AddIn related extension points are no longer supported in Visual Studio.")]
[DispIdAttribute("20")]
public abstract virtual Command AddNamedCommand2(AddIn AddInInstance, string Name, string ButtonText, string Tooltip, bool MSOButton, object Bitmap, Object[]& ContextUIGUIDs, int vsCommandStatusValue, int CommandStyleFlags, vsCommandControlType ControlType);
    [DispIdAttribute("21")]
public abstract virtual void UpdateCommandUI(bool PerformImmediately);
}
[GuidAttribute("18CBB358-74CE-454F-AB65-08C83DDF7B3C")]
public abstract class EnvDTE80.ContextGuids : object {
    public static string vsContextGuidSolutionBuilding;
    public static string vsContextGuidDebugging;
    public static string vsContextGuidUIHierarchyDragging;
    public static string vsContextGuidFullScreenMode;
    public static string vsContextGuidDesignMode;
    public static string vsContextGuidNoSolution;
    public static string vsContextGuidSolutionExists;
    public static string vsContextGuidEmptySolution;
    public static string vsContextGuidSolutionHasSingleProject;
    public static string vsContextGuidSolutionHasMultipleProjects;
    public static string vsContextGuidCodeWindow;
    public static string vsContextGuidNotBuildingAndNotDebugging;
    public static string vsContextGuidSolutionOrProjectUpgrading;
    public static string vsContextGuidDataSourceWindowSupported;
    public static string vsContextGuidDataSourceWindowAutoVisible;
    public static string vsContextGuidWindowsFormsDesigner;
    public static string vsContextGuidToolboxInitialized;
    public static string vsContextGuidSolutionExistsAndNotBuildingAndNotDebugging;
    public static string vsContextGuidTextEditor;
    public static string vsContextGuidXMLTextEditor;
    public static string vsContextGuidCSSTextEditor;
    public static string vsContextGuidHTMLSourceEditor;
    public static string vsContextGuidHTMLDesignView;
    public static string vsContextGuidHTMLSourceView;
    public static string vsContextGuidHTMLCodeView;
    public static string vsContextGuidFrames;
    public static string vsContextGuidSchema;
    public static string vsContextGuidData;
    public static string vsContextGuidKindStartPage;
    public static string vsContextGuidCommunityWindow;
    public static string vsContextGuidDeviceExplorer;
    public static string vsContextGuidBookmarks;
    public static string vsContextGuidApplicationBrowser;
    public static string vsContextGuidFavorites;
    public static string vsContextGuidErrorList;
    public static string vsContextGuidHelpSearch;
    public static string vsContextGuidHelpIndex;
    public static string vsContextGuidHelpContents;
    public static string vsContextGuidCallBrowser;
    public static string vsContextGuidCodeDefinition;
    public static string vsContextGuidTaskList;
    public static string vsContextGuidToolbox;
    public static string vsContextGuidCallStack;
    public static string vsContextGuidThread;
    public static string vsContextGuidLocals;
    public static string vsContextGuidAutoLocals;
    public static string vsContextGuidWatch;
    public static string vsContextGuidProperties;
    public static string vsContextGuidSolutionExplorer;
    public static string vsContextGuidOutput;
    public static string vsContextGuidObjectBrowser;
    public static string vsContextGuidMacroExplorer;
    public static string vsContextGuidDynamicHelp;
    public static string vsContextGuidClassView;
    public static string vsContextGuidResourceView;
    public static string vsContextGuidDocumentOutline;
    public static string vsContextGuidServerExplorer;
    public static string vsContextGuidCommandWindow;
    public static string vsContextGuidFindSymbol;
    public static string vsContextGuidFindSymbolResults;
    public static string vsContextGuidFindReplace;
    public static string vsContextGuidFindResults1;
    public static string vsContextGuidFindResults2;
    public static string vsContextGuidMainWindow;
    public static string vsContextGuidLinkedWindowFrame;
    public static string vsContextGuidWebBrowser;
}
[GuidAttribute("ECD94EEC-EBF9-45B2-B072-1624241C7C0B")]
public enum EnvDTE80.dbgEventReason2 : Enum {
    public int value__;
    public static dbgEventReason2 dbgEventReason2None;
    public static dbgEventReason2 dbgEventReason2Go;
    public static dbgEventReason2 dbgEventReason2AttachProgram;
    public static dbgEventReason2 dbgEventReason2DetachProgram;
    public static dbgEventReason2 dbgEventReason2LaunchProgram;
    public static dbgEventReason2 dbgEventReason2EndProgram;
    public static dbgEventReason2 dbgEventReason2StopDebugging;
    public static dbgEventReason2 dbgEventReason2Step;
    public static dbgEventReason2 dbgEventReason2Breakpoint;
    public static dbgEventReason2 dbgEventReason2ExceptionThrown;
    public static dbgEventReason2 dbgEventReason2ExceptionNotHandled;
    public static dbgEventReason2 dbgEventReason2UserBreak;
    public static dbgEventReason2 dbgEventReason2ContextSwitch;
    public static dbgEventReason2 dbgEventReason2Evaluation;
    public static dbgEventReason2 dbgEventReason2UnwindFromException;
}
[GuidAttribute("F8305F32-F656-4353-A49B-6BB20C6FD263")]
public enum EnvDTE80.dbgExpressionEvaluationState : Enum {
    public int value__;
    public static dbgExpressionEvaluationState dbgExpressionEvaluationStateStart;
    public static dbgExpressionEvaluationState dbgExpressionEvaluationStateStop;
}
[GuidAttribute("4232C43A-589B-44BC-8931-ED79C6A7CA2B")]
public enum EnvDTE80.dbgMinidumpOption : Enum {
    public int value__;
    public static dbgMinidumpOption dbgMinidumpNormal;
    public static dbgMinidumpOption dbgMinidumpFull;
}
[GuidAttribute("0C57DFEC-8424-4C1A-A43C-EA7922446232")]
public enum EnvDTE80.dbgProcessState : Enum {
    public int value__;
    public static dbgProcessState dbgProcessStateRun;
    public static dbgProcessState dbgProcessStateStop;
}
[GuidAttribute("8B5E2BFD-4642-4EFE-8AF4-0B2DA9AAA23C")]
public interface EnvDTE80.Debugger2 {
    [DispIdAttribute("100")]
public Breakpoints Breakpoints { get; }
    [DispIdAttribute("101")]
public Languages Languages { get; }
    [DispIdAttribute("102")]
public dbgDebugMode CurrentMode { get; }
    [DispIdAttribute("103")]
public Process CurrentProcess { get; public set; }
    [DispIdAttribute("104")]
public Program CurrentProgram { get; public set; }
    [DispIdAttribute("105")]
public Thread CurrentThread { get; public set; }
    [DispIdAttribute("106")]
public StackFrame CurrentStackFrame { get; public set; }
    [DispIdAttribute("107")]
public bool HexDisplayMode { get; public set; }
    [DispIdAttribute("108")]
public bool HexInputMode { get; public set; }
    [DispIdAttribute("109")]
public dbgEventReason LastBreakReason { get; }
    [DispIdAttribute("110")]
public Breakpoint BreakpointLastHit { get; }
    [DispIdAttribute("111")]
public Breakpoints AllBreakpointsLastHit { get; }
    [DispIdAttribute("112")]
public Processes DebuggedProcesses { get; }
    [DispIdAttribute("113")]
public Processes LocalProcesses { get; }
    [DispIdAttribute("200")]
public DTE DTE { get; }
    [DispIdAttribute("201")]
public DTE Parent { get; }
    [DispIdAttribute("1101")]
public Transports Transports { get; }
    [DispIdAttribute("1")]
public abstract virtual Expression GetExpression(string ExpressionText, bool UseAutoExpandRules, int Timeout);
    [DispIdAttribute("2")]
public abstract virtual void DetachAll();
    [DispIdAttribute("3")]
public abstract virtual void StepInto(bool WaitForBreakOrEnd);
    [DispIdAttribute("4")]
public abstract virtual void StepOver(bool WaitForBreakOrEnd);
    [DispIdAttribute("5")]
public abstract virtual void StepOut(bool WaitForBreakOrEnd);
    [DispIdAttribute("6")]
public abstract virtual void Go(bool WaitForBreakOrEnd);
    [DispIdAttribute("7")]
public abstract virtual void Break(bool WaitForBreakMode);
    [DispIdAttribute("8")]
public abstract virtual void Stop(bool WaitForDesignMode);
    [DispIdAttribute("9")]
public abstract virtual void SetNextStatement();
    [DispIdAttribute("10")]
public abstract virtual void RunToCursor(bool WaitForBreakOrEnd);
    [DispIdAttribute("11")]
public abstract virtual void ExecuteStatement(string Statement, int Timeout, bool TreatAsExpression);
    [DispIdAttribute("100")]
public abstract virtual Breakpoints get_Breakpoints();
    [DispIdAttribute("101")]
public abstract virtual Languages get_Languages();
    [DispIdAttribute("102")]
public abstract virtual dbgDebugMode get_CurrentMode();
    [DispIdAttribute("103")]
public abstract virtual Process get_CurrentProcess();
    [DispIdAttribute("103")]
public abstract virtual void set_CurrentProcess(Process value);
    [DispIdAttribute("104")]
public abstract virtual Program get_CurrentProgram();
    [DispIdAttribute("104")]
public abstract virtual void set_CurrentProgram(Program value);
    [DispIdAttribute("105")]
public abstract virtual Thread get_CurrentThread();
    [DispIdAttribute("105")]
public abstract virtual void set_CurrentThread(Thread value);
    [DispIdAttribute("106")]
public abstract virtual StackFrame get_CurrentStackFrame();
    [DispIdAttribute("106")]
public abstract virtual void set_CurrentStackFrame(StackFrame value);
    [DispIdAttribute("107")]
public abstract virtual bool get_HexDisplayMode();
    [DispIdAttribute("107")]
public abstract virtual void set_HexDisplayMode(bool value);
    [DispIdAttribute("108")]
public abstract virtual bool get_HexInputMode();
    [DispIdAttribute("108")]
public abstract virtual void set_HexInputMode(bool value);
    [DispIdAttribute("109")]
public abstract virtual dbgEventReason get_LastBreakReason();
    [DispIdAttribute("110")]
public abstract virtual Breakpoint get_BreakpointLastHit();
    [DispIdAttribute("111")]
public abstract virtual Breakpoints get_AllBreakpointsLastHit();
    [DispIdAttribute("112")]
public abstract virtual Processes get_DebuggedProcesses();
    [DispIdAttribute("113")]
public abstract virtual Processes get_LocalProcesses();
    [DispIdAttribute("200")]
public abstract virtual DTE get_DTE();
    [DispIdAttribute("201")]
public abstract virtual DTE get_Parent();
    [DispIdAttribute("300")]
public abstract virtual void TerminateAll();
    [DispIdAttribute("1001")]
public abstract virtual void WriteMinidump(string FileName, dbgMinidumpOption Option);
    [DispIdAttribute("1003")]
public abstract virtual Processes GetProcesses(Transport pTransport, string TransportQualifier);
    [DispIdAttribute("1004")]
public abstract virtual Expression GetExpression2(string ExpressionText, bool UseAutoExpandRules, bool TreatAsStatement, int Timeout);
    [DispIdAttribute("1101")]
public abstract virtual Transports get_Transports();
}
[ComVisibleAttribute("False")]
[CoClassAttribute("EnvDTE80.DebuggerExpressionEvaluationEventsClass")]
[GuidAttribute("6973A466-E09C-4195-9AE8-07B7AAFF7D85")]
public interface EnvDTE80.DebuggerExpressionEvaluationEvents {
}
[ComVisibleAttribute("False")]
[GuidAttribute("1AA6B3E4-42F7-4396-80FA-76728D1B824C")]
[ComSourceInterfacesAttribute("EnvDTE80._dispDebuggerExpressionEvaluationEvents")]
[ClassInterfaceAttribute("0")]
public class EnvDTE80.DebuggerExpressionEvaluationEventsClass : object {
}
[ComVisibleAttribute("False")]
[GuidAttribute("CE9DDBA3-B23B-4C53-BB3E-5471659289D1")]
[CoClassAttribute("EnvDTE80.DebuggerProcessEventsClass")]
public interface EnvDTE80.DebuggerProcessEvents {
}
[ComVisibleAttribute("False")]
[GuidAttribute("D14B8B85-E4A8-42F8-B486-8A14DC74ADEB")]
[ClassInterfaceAttribute("0")]
[ComSourceInterfacesAttribute("EnvDTE80._dispDebuggerProcessEvents")]
public class EnvDTE80.DebuggerProcessEventsClass : object {
}
[TypeLibTypeAttribute("4160")]
[GuidAttribute("2EE1E9FA-0AFE-4348-A89F-ED9CB45C99CF")]
[DefaultMemberAttribute("Name")]
public interface EnvDTE80.DTE2 {
    [DispIdAttribute("0")]
public string Name { get; }
    [DispIdAttribute("10")]
public string FileName { get; }
    [DispIdAttribute("100")]
public string Version { get; }
    [DispIdAttribute("108")]
public object CommandBars { get; }
    [DispIdAttribute("110")]
public Windows Windows { get; }
    [DispIdAttribute("111")]
public Events Events { get; }
    [ObsoleteAttribute("AddIn related extension points are no longer supported in Visual Studio.")]
[DispIdAttribute("200")]
public AddIns AddIns { get; }
    [DispIdAttribute("204")]
public Window MainWindow { get; }
    [DispIdAttribute("205")]
public Window ActiveWindow { get; }
    [DispIdAttribute("208")]
public vsDisplay DisplayMode { get; public set; }
    [DispIdAttribute("209")]
public Solution Solution { get; }
    [DispIdAttribute("210")]
public Commands Commands { get; }
    [DispIdAttribute("212")]
public Properties Properties { get; }
    [DispIdAttribute("213")]
public SelectedItems SelectedItems { get; }
    [DispIdAttribute("214")]
public string CommandLineArguments { get; }
    [DispIdAttribute("216")]
public bool IsOpenFile { get; }
    [DispIdAttribute("217")]
public DTE DTE { get; }
    [DispIdAttribute("218")]
public int LocaleID { get; }
    [DispIdAttribute("219")]
public WindowConfigurations WindowConfigurations { get; }
    [DispIdAttribute("220")]
public Documents Documents { get; }
    [DispIdAttribute("221")]
public Document ActiveDocument { get; }
    [DispIdAttribute("223")]
public Globals Globals { get; }
    [DispIdAttribute("225")]
public StatusBar StatusBar { get; }
    [DispIdAttribute("226")]
public string FullName { get; }
    [DispIdAttribute("227")]
public bool UserControl { get; public set; }
    [DispIdAttribute("228")]
public ObjectExtenders ObjectExtenders { get; }
    [DispIdAttribute("229")]
public Find Find { get; }
    [DispIdAttribute("230")]
public vsIDEMode Mode { get; }
    [DispIdAttribute("233")]
public ItemOperations ItemOperations { get; }
    [DispIdAttribute("235")]
public UndoContext UndoContext { get; }
    [DispIdAttribute("236")]
public Macros Macros { get; }
    [DispIdAttribute("237")]
public object ActiveSolutionProjects { get; }
    [DispIdAttribute("238")]
public DTE MacrosIDE { get; }
    [DispIdAttribute("239")]
public string RegistryRoot { get; }
    [DispIdAttribute("240")]
public DTE Application { get; }
    [DispIdAttribute("241")]
public ContextAttributes ContextAttributes { get; }
    [DispIdAttribute("242")]
public SourceControl SourceControl { get; }
    [DispIdAttribute("243")]
public bool SuppressUI { get; public set; }
    [DispIdAttribute("244")]
public Debugger Debugger { get; }
    [DispIdAttribute("246")]
public string Edition { get; }
    [DispIdAttribute("300")]
public ToolWindows ToolWindows { get; }
    [DispIdAttribute("0")]
public abstract virtual string get_Name();
    [DispIdAttribute("10")]
[TypeLibFuncAttribute("64")]
public abstract virtual string get_FileName();
    [DispIdAttribute("100")]
public abstract virtual string get_Version();
    [DispIdAttribute("108")]
public abstract virtual object get_CommandBars();
    [DispIdAttribute("110")]
public abstract virtual Windows get_Windows();
    [DispIdAttribute("111")]
public abstract virtual Events get_Events();
    [ObsoleteAttribute("AddIn related extension points are no longer supported in Visual Studio.")]
[DispIdAttribute("200")]
public abstract virtual AddIns get_AddIns();
    [DispIdAttribute("204")]
public abstract virtual Window get_MainWindow();
    [DispIdAttribute("205")]
public abstract virtual Window get_ActiveWindow();
    [DispIdAttribute("207")]
public abstract virtual void Quit();
    [DispIdAttribute("208")]
public abstract virtual vsDisplay get_DisplayMode();
    [DispIdAttribute("208")]
public abstract virtual void set_DisplayMode(vsDisplay lpDispMode);
    [DispIdAttribute("209")]
public abstract virtual Solution get_Solution();
    [DispIdAttribute("210")]
public abstract virtual Commands get_Commands();
    [DispIdAttribute("211")]
public abstract virtual object GetObject(string Name);
    [DispIdAttribute("212")]
public abstract virtual Properties get_Properties(string Category, string Page);
    [DispIdAttribute("213")]
public abstract virtual SelectedItems get_SelectedItems();
    [DispIdAttribute("214")]
public abstract virtual string get_CommandLineArguments();
    [TypeLibFuncAttribute("64")]
[DispIdAttribute("215")]
public abstract virtual Window OpenFile(string ViewKind, string FileName);
    [DispIdAttribute("216")]
[TypeLibFuncAttribute("64")]
public abstract virtual bool get_IsOpenFile(string ViewKind, string FileName);
    [DispIdAttribute("217")]
public abstract virtual DTE get_DTE();
    [DispIdAttribute("218")]
public abstract virtual int get_LocaleID();
    [DispIdAttribute("219")]
public abstract virtual WindowConfigurations get_WindowConfigurations();
    [DispIdAttribute("220")]
public abstract virtual Documents get_Documents();
    [DispIdAttribute("221")]
public abstract virtual Document get_ActiveDocument();
    [DispIdAttribute("222")]
public abstract virtual void ExecuteCommand(string CommandName, string CommandArgs);
    [DispIdAttribute("223")]
public abstract virtual Globals get_Globals();
    [DispIdAttribute("225")]
public abstract virtual StatusBar get_StatusBar();
    [DispIdAttribute("226")]
public abstract virtual string get_FullName();
    [DispIdAttribute("227")]
public abstract virtual bool get_UserControl();
    [DispIdAttribute("227")]
public abstract virtual void set_UserControl(bool UserControl);
    [DispIdAttribute("228")]
public abstract virtual ObjectExtenders get_ObjectExtenders();
    [DispIdAttribute("229")]
public abstract virtual Find get_Find();
    [DispIdAttribute("230")]
public abstract virtual vsIDEMode get_Mode();
    [DispIdAttribute("232")]
public abstract virtual wizardResult LaunchWizard(string VSZFile, Object[]& ContextParams);
    [DispIdAttribute("233")]
public abstract virtual ItemOperations get_ItemOperations();
    [DispIdAttribute("235")]
public abstract virtual UndoContext get_UndoContext();
    [DispIdAttribute("236")]
public abstract virtual Macros get_Macros();
    [DispIdAttribute("237")]
public abstract virtual object get_ActiveSolutionProjects();
    [DispIdAttribute("238")]
public abstract virtual DTE get_MacrosIDE();
    [DispIdAttribute("239")]
public abstract virtual string get_RegistryRoot();
    [TypeLibFuncAttribute("64")]
[DispIdAttribute("240")]
public abstract virtual DTE get_Application();
    [DispIdAttribute("241")]
public abstract virtual ContextAttributes get_ContextAttributes();
    [DispIdAttribute("242")]
public abstract virtual SourceControl get_SourceControl();
    [DispIdAttribute("243")]
public abstract virtual bool get_SuppressUI();
    [DispIdAttribute("243")]
public abstract virtual void set_SuppressUI(bool pVal);
    [DispIdAttribute("244")]
public abstract virtual Debugger get_Debugger();
    [DispIdAttribute("245")]
public abstract virtual string SatelliteDllPath(string Path, string Name);
    [DispIdAttribute("246")]
public abstract virtual string get_Edition();
    [DispIdAttribute("300")]
public abstract virtual ToolWindows get_ToolWindows();
    [DispIdAttribute("301")]
public abstract virtual UInt32 GetThemeColor(vsThemeColors Element);
}
[GuidAttribute("136AFA9F-F243-4ABB-A8F8-4C2D26C47163")]
public interface EnvDTE80.EditPoint2 {
    [DispIdAttribute("1")]
public DTE DTE { get; }
    [DispIdAttribute("2")]
public TextDocument Parent { get; }
    [DispIdAttribute("11")]
public int Line { get; }
    [DispIdAttribute("12")]
public int LineCharOffset { get; }
    [DispIdAttribute("13")]
public int AbsoluteCharOffset { get; }
    [DispIdAttribute("14")]
public int DisplayColumn { get; }
    [DispIdAttribute("21")]
public bool AtEndOfDocument { get; }
    [DispIdAttribute("22")]
public bool AtStartOfDocument { get; }
    [DispIdAttribute("23")]
public bool AtEndOfLine { get; }
    [DispIdAttribute("24")]
public bool AtStartOfLine { get; }
    [DispIdAttribute("25")]
public int LineLength { get; }
    [DispIdAttribute("1")]
public abstract virtual DTE get_DTE();
    [DispIdAttribute("2")]
public abstract virtual TextDocument get_Parent();
    [DispIdAttribute("11")]
public abstract virtual int get_Line();
    [DispIdAttribute("12")]
public abstract virtual int get_LineCharOffset();
    [DispIdAttribute("13")]
public abstract virtual int get_AbsoluteCharOffset();
    [DispIdAttribute("14")]
public abstract virtual int get_DisplayColumn();
    [DispIdAttribute("21")]
public abstract virtual bool get_AtEndOfDocument();
    [DispIdAttribute("22")]
public abstract virtual bool get_AtStartOfDocument();
    [DispIdAttribute("23")]
public abstract virtual bool get_AtEndOfLine();
    [DispIdAttribute("24")]
public abstract virtual bool get_AtStartOfLine();
    [DispIdAttribute("25")]
public abstract virtual int get_LineLength();
    [DispIdAttribute("31")]
public abstract virtual bool EqualTo(TextPoint Point);
    [DispIdAttribute("32")]
public abstract virtual bool LessThan(TextPoint Point);
    [DispIdAttribute("33")]
public abstract virtual bool GreaterThan(TextPoint Point);
    [DispIdAttribute("50")]
public abstract virtual bool TryToShow(vsPaneShowHow How, object PointOrCount);
    [DispIdAttribute("51")]
public abstract virtual CodeElement get_CodeElement(vsCMElement Scope);
    [DispIdAttribute("34")]
public abstract virtual EditPoint CreateEditPoint();
    [DispIdAttribute("101")]
public abstract virtual void CharLeft(int Count);
    [DispIdAttribute("102")]
public abstract virtual void CharRight(int Count);
    [DispIdAttribute("103")]
public abstract virtual void EndOfLine();
    [DispIdAttribute("104")]
public abstract virtual void StartOfLine();
    [DispIdAttribute("105")]
public abstract virtual void EndOfDocument();
    [DispIdAttribute("106")]
public abstract virtual void StartOfDocument();
    [DispIdAttribute("107")]
public abstract virtual void WordLeft(int Count);
    [DispIdAttribute("108")]
public abstract virtual void WordRight(int Count);
    [DispIdAttribute("109")]
public abstract virtual void LineUp(int Count);
    [DispIdAttribute("110")]
public abstract virtual void LineDown(int Count);
    [DispIdAttribute("170")]
public abstract virtual void MoveToPoint(TextPoint Point);
    [DispIdAttribute("171")]
public abstract virtual void MoveToLineAndOffset(int Line, int Offset);
    [DispIdAttribute("172")]
public abstract virtual void MoveToAbsoluteOffset(int Offset);
    [DispIdAttribute("121")]
public abstract virtual void SetBookmark();
    [DispIdAttribute("122")]
public abstract virtual void ClearBookmark();
    [DispIdAttribute("123")]
public abstract virtual bool NextBookmark();
    [DispIdAttribute("124")]
public abstract virtual bool PreviousBookmark();
    [DispIdAttribute("131")]
public abstract virtual void PadToColumn(int Column);
    [DispIdAttribute("132")]
public abstract virtual void Insert(string Text);
    [DispIdAttribute("133")]
public abstract virtual void InsertFromFile(string File);
    [DispIdAttribute("134")]
public abstract virtual string GetText(object PointOrCount);
    [DispIdAttribute("173")]
public abstract virtual string GetLines(int Start, int ExclusiveEnd);
    [DispIdAttribute("136")]
public abstract virtual void Copy(object PointOrCount, bool Append);
    [DispIdAttribute("137")]
public abstract virtual void Cut(object PointOrCount, bool Append);
    [DispIdAttribute("135")]
public abstract virtual void Delete(object PointOrCount);
    [DispIdAttribute("138")]
public abstract virtual void Paste();
    [DispIdAttribute("139")]
public abstract virtual bool ReadOnly(object PointOrCount);
    [DispIdAttribute("151")]
public abstract virtual bool FindPattern(string Pattern, int vsFindOptionsValue, EditPoint& EndPoint, TextRanges& Tags);
    [DispIdAttribute("152")]
public abstract virtual bool ReplacePattern(TextPoint Point, string Pattern, string Replace, int vsFindOptionsValue, TextRanges& Tags);
    [DispIdAttribute("161")]
public abstract virtual void Indent(TextPoint Point, int Count);
    [DispIdAttribute("162")]
public abstract virtual void Unindent(TextPoint Point, int Count);
    [DispIdAttribute("163")]
public abstract virtual void SmartFormat(TextPoint Point);
    [DispIdAttribute("167")]
public abstract virtual void OutlineSection(object PointOrCount);
    [DispIdAttribute("164")]
public abstract virtual void ReplaceText(object PointOrCount, string Text, int Flags);
    [DispIdAttribute("165")]
public abstract virtual void ChangeCase(object PointOrCount, vsCaseOptions How);
    [DispIdAttribute("166")]
public abstract virtual void DeleteWhitespace(vsWhitespaceOptions Direction);
    [DispIdAttribute("200")]
public abstract virtual void InsertNewLine(int Count);
}
[GuidAttribute("8CEA6D39-EBEE-4DE9-B282-B5CECE9C9861")]
public interface EnvDTE80.Engine {
    [DispIdAttribute("100")]
public string Name { get; }
    [DispIdAttribute("101")]
public string ID { get; }
    [DispIdAttribute("102")]
public int AttachResult { get; }
    [DispIdAttribute("200")]
public DTE DTE { get; }
    [DispIdAttribute("201")]
public Transport Parent { get; }
    [DispIdAttribute("202")]
public Engines Collection { get; }
    [DispIdAttribute("100")]
public abstract virtual string get_Name();
    [DispIdAttribute("101")]
public abstract virtual string get_ID();
    [DispIdAttribute("102")]
public abstract virtual int get_AttachResult();
    [DispIdAttribute("200")]
public abstract virtual DTE get_DTE();
    [DispIdAttribute("201")]
public abstract virtual Transport get_Parent();
    [DispIdAttribute("202")]
public abstract virtual Engines get_Collection();
}
[DefaultMemberAttribute("Item")]
[GuidAttribute("9F998C5E-549E-4C74-9FD8-B3A93D85A248")]
public interface EnvDTE80.Engines {
    [DispIdAttribute("1")]
public DTE DTE { get; }
    [DispIdAttribute("2")]
public Debugger Parent { get; }
    [DispIdAttribute("3")]
public int Count { get; }
    [DispIdAttribute("0")]
public abstract virtual Engine Item(object index);
    [DispIdAttribute("-4")]
public abstract virtual IEnumerator GetEnumerator();
    [DispIdAttribute("1")]
public abstract virtual DTE get_DTE();
    [DispIdAttribute("2")]
public abstract virtual Debugger get_Parent();
    [DispIdAttribute("3")]
public abstract virtual int get_Count();
}
[GuidAttribute("F49A191F-7258-493B-9310-5F7771DDF3D7")]
public interface EnvDTE80.ErrorItem {
    [DispIdAttribute("1")]
public DTE DTE { get; }
    [DispIdAttribute("2")]
public ErrorItems Collection { get; }
    [DispIdAttribute("3")]
public vsBuildErrorLevel ErrorLevel { get; }
    [DispIdAttribute("4")]
public string Description { get; }
    [DispIdAttribute("5")]
public string FileName { get; }
    [DispIdAttribute("6")]
public int Line { get; }
    [DispIdAttribute("7")]
public int Column { get; }
    [DispIdAttribute("8")]
public string Project { get; }
    [DispIdAttribute("1")]
public abstract virtual DTE get_DTE();
    [DispIdAttribute("2")]
public abstract virtual ErrorItems get_Collection();
    [DispIdAttribute("3")]
public abstract virtual vsBuildErrorLevel get_ErrorLevel();
    [DispIdAttribute("4")]
public abstract virtual string get_Description();
    [DispIdAttribute("5")]
public abstract virtual string get_FileName();
    [DispIdAttribute("6")]
public abstract virtual int get_Line();
    [DispIdAttribute("7")]
public abstract virtual int get_Column();
    [DispIdAttribute("8")]
public abstract virtual string get_Project();
    [DispIdAttribute("9")]
public abstract virtual void Navigate();
}
[GuidAttribute("DCF93A30-D013-42F4-8AEE-9F5BA215FB8B")]
public interface EnvDTE80.ErrorItems {
    [DispIdAttribute("1")]
public DTE DTE { get; }
    [DispIdAttribute("2")]
public ErrorList Parent { get; }
    [DispIdAttribute("4")]
public int Count { get; }
    [DispIdAttribute("1")]
public abstract virtual DTE get_DTE();
    [DispIdAttribute("2")]
public abstract virtual ErrorList get_Parent();
    [DispIdAttribute("3")]
public abstract virtual ErrorItem Item(object index);
    [DispIdAttribute("4")]
public abstract virtual int get_Count();
}
[GuidAttribute("7BF84EF1-8246-498A-A127-2EA37824FDA1")]
public interface EnvDTE80.ErrorList {
    [DispIdAttribute("1")]
public DTE DTE { get; }
    [DispIdAttribute("2")]
public Window Parent { get; }
    [DispIdAttribute("3")]
public bool ShowErrors { get; public set; }
    [DispIdAttribute("4")]
public bool ShowWarnings { get; public set; }
    [DispIdAttribute("5")]
public bool ShowMessages { get; public set; }
    [DispIdAttribute("6")]
public ErrorItems ErrorItems { get; }
    [DispIdAttribute("7")]
public object SelectedItems { get; }
    [DispIdAttribute("1")]
public abstract virtual DTE get_DTE();
    [DispIdAttribute("2")]
public abstract virtual Window get_Parent();
    [DispIdAttribute("3")]
public abstract virtual bool get_ShowErrors();
    [DispIdAttribute("3")]
public abstract virtual void set_ShowErrors(bool value);
    [DispIdAttribute("4")]
public abstract virtual bool get_ShowWarnings();
    [DispIdAttribute("4")]
public abstract virtual void set_ShowWarnings(bool value);
    [DispIdAttribute("5")]
public abstract virtual bool get_ShowMessages();
    [DispIdAttribute("5")]
public abstract virtual void set_ShowMessages(bool value);
    [DispIdAttribute("6")]
public abstract virtual ErrorItems get_ErrorItems();
    [DispIdAttribute("7")]
public abstract virtual object get_SelectedItems();
}
[GuidAttribute("BED31E8C-F845-4397-AF13-6B82A6996C0D")]
[TypeLibTypeAttribute("4160")]
public interface EnvDTE80.Events2 {
    [DispIdAttribute("205")]
public object CommandBarEvents { get; }
    [DispIdAttribute("300")]
public CommandEvents CommandEvents { get; }
    [DispIdAttribute("301")]
public SelectionEvents SelectionEvents { get; }
    [DispIdAttribute("302")]
public SolutionEvents SolutionEvents { get; }
    [DispIdAttribute("303")]
public BuildEvents BuildEvents { get; }
    [DispIdAttribute("304")]
public WindowEvents WindowEvents { get; }
    [DispIdAttribute("305")]
public OutputWindowEvents OutputWindowEvents { get; }
    [DispIdAttribute("306")]
public FindEvents FindEvents { get; }
    [DispIdAttribute("307")]
public TaskListEvents TaskListEvents { get; }
    [DispIdAttribute("308")]
public DTEEvents DTEEvents { get; }
    [DispIdAttribute("309")]
public DocumentEvents DocumentEvents { get; }
    [DispIdAttribute("310")]
public ProjectItemsEvents SolutionItemsEvents { get; }
    [DispIdAttribute("311")]
public ProjectItemsEvents MiscFilesEvents { get; }
    [DispIdAttribute("312")]
public DebuggerEvents DebuggerEvents { get; }
    [DispIdAttribute("313")]
public TextEditorEvents TextEditorEvents { get; }
    [DispIdAttribute("400")]
public ProjectItemsEvents ProjectItemsEvents { get; }
    [DispIdAttribute("401")]
public ProjectsEvents ProjectsEvents { get; }
    [DispIdAttribute("402")]
public TextDocumentKeyPressEvents TextDocumentKeyPressEvents { get; }
    [DispIdAttribute("403")]
public CodeModelEvents CodeModelEvents { get; }
    [DispIdAttribute("404")]
public WindowVisibilityEvents WindowVisibilityEvents { get; }
    [DispIdAttribute("405")]
public DebuggerProcessEvents DebuggerProcessEvents { get; }
    [DispIdAttribute("406")]
public DebuggerExpressionEvaluationEvents DebuggerExpressionEvaluationEvents { get; }
    [DispIdAttribute("407")]
public PublishEvents PublishEvents { get; }
    [DispIdAttribute("205")]
public abstract virtual object get_CommandBarEvents(object CommandBarControl);
    [DispIdAttribute("300")]
public abstract virtual CommandEvents get_CommandEvents(string Guid, int ID);
    [DispIdAttribute("301")]
public abstract virtual SelectionEvents get_SelectionEvents();
    [DispIdAttribute("302")]
public abstract virtual SolutionEvents get_SolutionEvents();
    [DispIdAttribute("303")]
public abstract virtual BuildEvents get_BuildEvents();
    [DispIdAttribute("304")]
public abstract virtual WindowEvents get_WindowEvents(Window WindowFilter);
    [DispIdAttribute("305")]
public abstract virtual OutputWindowEvents get_OutputWindowEvents(string Pane);
    [DispIdAttribute("306")]
public abstract virtual FindEvents get_FindEvents();
    [DispIdAttribute("307")]
public abstract virtual TaskListEvents get_TaskListEvents(string Filter);
    [DispIdAttribute("308")]
public abstract virtual DTEEvents get_DTEEvents();
    [DispIdAttribute("309")]
public abstract virtual DocumentEvents get_DocumentEvents(Document Document);
    [DispIdAttribute("310")]
public abstract virtual ProjectItemsEvents get_SolutionItemsEvents();
    [DispIdAttribute("311")]
public abstract virtual ProjectItemsEvents get_MiscFilesEvents();
    [DispIdAttribute("312")]
public abstract virtual DebuggerEvents get_DebuggerEvents();
    [DispIdAttribute("313")]
public abstract virtual TextEditorEvents get_TextEditorEvents(TextDocument TextDocumentFilter);
    [DispIdAttribute("314")]
public abstract virtual object GetObject(string Name);
    [DispIdAttribute("400")]
public abstract virtual ProjectItemsEvents get_ProjectItemsEvents();
    [DispIdAttribute("401")]
public abstract virtual ProjectsEvents get_ProjectsEvents();
    [DispIdAttribute("402")]
public abstract virtual TextDocumentKeyPressEvents get_TextDocumentKeyPressEvents(TextDocument TextDocument);
    [DispIdAttribute("403")]
public abstract virtual CodeModelEvents get_CodeModelEvents(CodeElement Reserved);
    [DispIdAttribute("404")]
public abstract virtual WindowVisibilityEvents get_WindowVisibilityEvents(Window WindowFilter);
    [DispIdAttribute("405")]
public abstract virtual DebuggerProcessEvents get_DebuggerProcessEvents();
    [DispIdAttribute("406")]
public abstract virtual DebuggerExpressionEvaluationEvents get_DebuggerExpressionEvaluationEvents();
    [DispIdAttribute("407")]
public abstract virtual PublishEvents get_PublishEvents();
}
[GuidAttribute("A65964DF-3A07-45EB-882A-DD04602016B9")]
public interface EnvDTE80.FileCodeModel2 {
    [DispIdAttribute("1")]
public DTE DTE { get; }
    [DispIdAttribute("2")]
public ProjectItem Parent { get; }
    [DispIdAttribute("3")]
public string Language { get; }
    [DispIdAttribute("4")]
public CodeElements CodeElements { get; }
    [DispIdAttribute("201")]
public vsCMParseStatus ParseStatus { get; }
    [DispIdAttribute("206")]
public bool IsBatchOpen { get; }
    [DispIdAttribute("1")]
public abstract virtual DTE get_DTE();
    [DispIdAttribute("2")]
public abstract virtual ProjectItem get_Parent();
    [DispIdAttribute("3")]
public abstract virtual string get_Language();
    [DispIdAttribute("4")]
public abstract virtual CodeElements get_CodeElements();
    [DispIdAttribute("5")]
public abstract virtual CodeElement CodeElementFromPoint(TextPoint Point, vsCMElement Scope);
    [DispIdAttribute("7")]
public abstract virtual CodeNamespace AddNamespace(string Name, object Position);
    [DispIdAttribute("8")]
public abstract virtual CodeClass AddClass(string Name, object Position, object Bases, object ImplementedInterfaces, vsCMAccess Access);
    [DispIdAttribute("9")]
public abstract virtual CodeInterface AddInterface(string Name, object Position, object Bases, vsCMAccess Access);
    [DispIdAttribute("10")]
public abstract virtual CodeFunction AddFunction(string Name, vsCMFunction Kind, object Type, object Position, vsCMAccess Access);
    [DispIdAttribute("11")]
public abstract virtual CodeVariable AddVariable(string Name, object Type, object Position, vsCMAccess Access);
    [DispIdAttribute("12")]
public abstract virtual CodeAttribute AddAttribute(string Name, string Value, object Position);
    [DispIdAttribute("13")]
public abstract virtual CodeStruct AddStruct(string Name, object Position, object Bases, object ImplementedInterfaces, vsCMAccess Access);
    [DispIdAttribute("14")]
public abstract virtual CodeEnum AddEnum(string Name, object Position, object Bases, vsCMAccess Access);
    [DispIdAttribute("15")]
public abstract virtual CodeDelegate AddDelegate(string Name, object Type, object Position, vsCMAccess Access);
    [DispIdAttribute("16")]
public abstract virtual void Remove(object Element);
    [DispIdAttribute("200")]
public abstract virtual void Synchronize();
    [DispIdAttribute("201")]
public abstract virtual vsCMParseStatus get_ParseStatus();
    [DispIdAttribute("202")]
public abstract virtual CodeImport AddImport(string Name, object Position, string Alias);
    [DispIdAttribute("203")]
public abstract virtual void BeginBatch();
    [DispIdAttribute("204")]
public abstract virtual void EndBatch();
    [DispIdAttribute("206")]
public abstract virtual bool get_IsBatchOpen();
    [DispIdAttribute("205")]
public abstract virtual CodeElement ElementFromID(string ID);
}
[DefaultMemberAttribute("FindReplace")]
[GuidAttribute("01568308-5B2A-4F30-8D0A-E10EE0F28F4A")]
public interface EnvDTE80.Find2 {
    [DispIdAttribute("1")]
public DTE DTE { get; }
    [DispIdAttribute("2")]
public DTE Parent { get; }
    [DispIdAttribute("3")]
public vsFindAction Action { get; public set; }
    [DispIdAttribute("4")]
public string FindWhat { get; public set; }
    [DispIdAttribute("5")]
public bool MatchCase { get; public set; }
    [DispIdAttribute("6")]
public bool MatchWholeWord { get; public set; }
    [DispIdAttribute("7")]
public bool MatchInHiddenText { get; public set; }
    [DispIdAttribute("8")]
public bool Backwards { get; public set; }
    [DispIdAttribute("9")]
public bool SearchSubfolders { get; public set; }
    [DispIdAttribute("10")]
public bool KeepModifiedDocumentsOpen { get; public set; }
    [DispIdAttribute("11")]
public vsFindPatternSyntax PatternSyntax { get; public set; }
    [DispIdAttribute("12")]
public string ReplaceWith { get; public set; }
    [DispIdAttribute("13")]
public vsFindTarget Target { get; public set; }
    [DispIdAttribute("14")]
public string SearchPath { get; public set; }
    [DispIdAttribute("15")]
public string FilesOfType { get; public set; }
    [DispIdAttribute("16")]
public vsFindResultsLocation ResultsLocation { get; public set; }
    [DispIdAttribute("100")]
public bool WaitForFindToComplete { get; public set; }
    [DispIdAttribute("1")]
public abstract virtual DTE get_DTE();
    [DispIdAttribute("2")]
public abstract virtual DTE get_Parent();
    [DispIdAttribute("3")]
public abstract virtual vsFindAction get_Action();
    [DispIdAttribute("3")]
public abstract virtual void set_Action(vsFindAction value);
    [DispIdAttribute("4")]
public abstract virtual string get_FindWhat();
    [DispIdAttribute("4")]
public abstract virtual void set_FindWhat(string value);
    [DispIdAttribute("5")]
public abstract virtual bool get_MatchCase();
    [DispIdAttribute("5")]
public abstract virtual void set_MatchCase(bool value);
    [DispIdAttribute("6")]
public abstract virtual bool get_MatchWholeWord();
    [DispIdAttribute("6")]
public abstract virtual void set_MatchWholeWord(bool value);
    [DispIdAttribute("7")]
public abstract virtual bool get_MatchInHiddenText();
    [DispIdAttribute("7")]
public abstract virtual void set_MatchInHiddenText(bool value);
    [DispIdAttribute("8")]
public abstract virtual bool get_Backwards();
    [DispIdAttribute("8")]
public abstract virtual void set_Backwards(bool value);
    [DispIdAttribute("9")]
public abstract virtual bool get_SearchSubfolders();
    [DispIdAttribute("9")]
public abstract virtual void set_SearchSubfolders(bool value);
    [DispIdAttribute("10")]
public abstract virtual bool get_KeepModifiedDocumentsOpen();
    [DispIdAttribute("10")]
public abstract virtual void set_KeepModifiedDocumentsOpen(bool value);
    [DispIdAttribute("11")]
public abstract virtual vsFindPatternSyntax get_PatternSyntax();
    [DispIdAttribute("11")]
public abstract virtual void set_PatternSyntax(vsFindPatternSyntax value);
    [DispIdAttribute("12")]
public abstract virtual string get_ReplaceWith();
    [DispIdAttribute("12")]
public abstract virtual void set_ReplaceWith(string value);
    [DispIdAttribute("13")]
public abstract virtual vsFindTarget get_Target();
    [DispIdAttribute("13")]
public abstract virtual void set_Target(vsFindTarget value);
    [DispIdAttribute("14")]
public abstract virtual string get_SearchPath();
    [DispIdAttribute("14")]
public abstract virtual void set_SearchPath(string value);
    [DispIdAttribute("15")]
public abstract virtual string get_FilesOfType();
    [DispIdAttribute("15")]
public abstract virtual void set_FilesOfType(string value);
    [DispIdAttribute("16")]
public abstract virtual vsFindResultsLocation get_ResultsLocation();
    [DispIdAttribute("16")]
public abstract virtual void set_ResultsLocation(vsFindResultsLocation value);
    [DispIdAttribute("17")]
public abstract virtual vsFindResult Execute();
    [DispIdAttribute("0")]
public abstract virtual vsFindResult FindReplace(vsFindAction Action, string FindWhat, int vsFindOptionsValue, string ReplaceWith, vsFindTarget Target, string SearchPath, string FilesOfType, vsFindResultsLocation ResultsLocation);
    [DispIdAttribute("100")]
public abstract virtual bool get_WaitForFindToComplete();
    [DispIdAttribute("100")]
public abstract virtual void set_WaitForFindToComplete(bool value);
}
[GuidAttribute("B85F43C4-C765-4984-AE3D-695E8CD8E992")]
public interface EnvDTE80.IInternalExtenderProvider {
    [DispIdAttribute("1")]
public abstract virtual object GetExtenderNames(string ExtenderCATID, object ExtendeeObject);
    [DispIdAttribute("2")]
public abstract virtual object GetExtender(string ExtenderCATID, string ExtenderName, object ExtendeeObject, IExtenderSite ExtenderSite, int Cookie);
    [DispIdAttribute("3")]
public abstract virtual bool CanExtend(string ExtenderCATID, string ExtenderName, object ExtendeeObject);
}
[GuidAttribute("C5BEE6D8-ED45-4317-96BF-97EB88EA3A07")]
[DefaultMemberAttribute("Pattern")]
public interface EnvDTE80.IncrementalSearch {
    [DispIdAttribute("1")]
public DTE DTE { get; }
    [DispIdAttribute("4")]
public bool IncrementalSearchModeOn { get; }
    [DispIdAttribute("0")]
public string Pattern { get; }
    [DispIdAttribute("1")]
public abstract virtual DTE get_DTE();
    [DispIdAttribute("2")]
public abstract virtual void StartForward();
    [DispIdAttribute("3")]
public abstract virtual void StartBackward();
    [DispIdAttribute("4")]
public abstract virtual bool get_IncrementalSearchModeOn();
    [DispIdAttribute("5")]
public abstract virtual vsIncrementalSearchResult SearchWithLastPattern();
    [DispIdAttribute("0")]
public abstract virtual string get_Pattern();
    [DispIdAttribute("7")]
public abstract virtual vsIncrementalSearchResult AppendCharAndSearch(short Character);
    [DispIdAttribute("8")]
public abstract virtual vsIncrementalSearchResult DeleteCharAndBackup();
    [DispIdAttribute("9")]
public abstract virtual void Exit();
    [DispIdAttribute("10")]
public abstract virtual vsIncrementalSearchResult SearchForward();
    [DispIdAttribute("11")]
public abstract virtual vsIncrementalSearchResult SearchBackward();
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("12133BC2-390A-4B30-AD5B-504C1D1C89E7")]
public interface EnvDTE80.IVsExtensibility2 {
    public abstract virtual void get_Properties(ISupportVSProperties pParent, object pdispPropObj, Properties& ppProperties);
    public abstract virtual wizardResult RunWizardFile(string bstrWizFilename, IntPtr hwndOwner, Object[]& vContextParams);
    public abstract virtual TextBuffer Get_TextBuffer(object pVsTextStream, IExtensibleObjectSite pParent);
    public abstract virtual void EnterAutomationFunction();
    public abstract virtual void ExitAutomationFunction();
    public abstract virtual int IsInAutomationFunction();
    public abstract virtual void GetUserControl(Boolean& fUserControl);
    public abstract virtual void SetUserControl(bool fUserControl);
    public abstract virtual void SetUserControlUnlatched(bool fUserControl);
    public abstract virtual void LockServer(bool __MIDL_0010);
    public abstract virtual int GetLockCount();
    public abstract virtual bool TestForShutdown();
    public abstract virtual Globals GetGlobalsObject(object ExtractFrom);
    public abstract virtual ConfigurationManager GetConfigMgr(object pIVsProject, UInt32 itemid);
    public abstract virtual void FireMacroReset();
    public abstract virtual Document GetDocumentFromDocCookie(int lDocCookie);
    public abstract virtual void IsMethodDisabled(Guid& pGUID, int dispid);
    public abstract virtual void SetSuppressUI(bool In);
    public abstract virtual void GetSuppressUI(Boolean& pOut);
    public abstract virtual void FireProjectsEvent_ItemAdded(Project Project);
    public abstract virtual void FireProjectsEvent_ItemRemoved(Project Project);
    public abstract virtual void FireProjectsEvent_ItemRenamed(Project Project, string OldName);
    public abstract virtual void FireProjectItemsEvent_ItemAdded(ProjectItem ProjectItem);
    public abstract virtual void FireProjectItemsEvent_ItemRemoved(ProjectItem ProjectItem);
    public abstract virtual void FireProjectItemsEvent_ItemRenamed(ProjectItem ProjectItem, string OldName);
    public abstract virtual UIHierarchy BuildUIHierarchyFromTree(IntPtr hwnd, Window pParent);
    public abstract virtual void FireCodeModelEvent(int dispid, CodeElement pElement, vsCMChangeKind changeKind);
    public abstract virtual void IsFireCodeModelEventNeeded(Boolean& vbNeeded);
    public abstract virtual int RunWizardFileEx(string bstrWizFilename, IntPtr hwndOwner, Object[]& vContextParams, Object[]& vCustomParams);
    public abstract virtual void FireCodeModelEvent3(int dispid, object pParent, CodeElement pElement, vsCMChangeKind changeKind);
}
[GuidAttribute("C508B13C-06C5-40C7-B405-D327D4F8E268")]
[InterfaceTypeAttribute("1")]
public interface EnvDTE80.IVsProfferCommands2 {
    public abstract virtual void AddNamedCommand(Guid& pguidPackage, Guid& pguidCmdGroup, string pszCmdNameCanonical, UInt32& pdwCmdId, string pszCmdNameLocalized, string pszBtnText, string pszCmdTooltip, string pszSatelliteDLL, UInt32 dwBitmapResourceId, UInt32 dwBitmapImageIndex, UInt32 dwCmdFlagsDefault, UInt32 cUIContexts, Guid& rgguidUIContexts);
    public abstract virtual void RemoveNamedCommand(string pszCmdNameCanonical);
    public abstract virtual void RenameNamedCommand(string pszCmdNameCanonical, string pszCmdNameCanonicalNew, string pszCmdNameLocalizedNew);
    public abstract virtual void AddCommandBarControl(string pszCmdNameCanonical, object pCmdBarParent, UInt32 dwIndex, UInt32 dwCmdType, Object& ppCmdBarCtrl);
    public abstract virtual void RemoveCommandBarControl(object pCmdBarCtrl);
    public abstract virtual void AddCommandBar(string pszCmdBarName, vsCommandBarType dwType, object pCmdBarParent, UInt32 dwIndex, Object& ppCmdBar);
    public abstract virtual void RemoveCommandBar(object pCmdBar);
    public abstract virtual object FindCommandBar(IntPtr pToolbarSet, Guid& pguidCmdGroup, UInt32 dwMenuId);
    public abstract virtual void AddNamedCommand2(Guid& pguidPackage, Guid& pguidCmdGroup, string pszCmdNameCanonical, UInt32& pdwCmdId, string pszCmdNameLocalized, string pszBtnText, string pszCmdTooltip, string pszSatelliteDLL, UInt32 dwBitmapResourceId, UInt32 dwBitmapImageIndex, UInt32 dwCmdFlagsDefault, UInt32 cUIContexts, Guid& rgguidUIContexts, UInt32 dwUIElementType);
}
[GuidAttribute("C8F4F9CC-B7E5-4458-BCE3-E1542468F26B")]
public interface EnvDTE80.LifetimeInformation {
    [DispIdAttribute("1")]
public bool HasBeenDeleted { get; }
    [DispIdAttribute("1")]
public abstract virtual bool get_HasBeenDeleted();
}
[GuidAttribute("95AC1923-6EAA-427C-B43E-6274A8CA6C95")]
[DefaultMemberAttribute("Name")]
public interface EnvDTE80.Process2 {
    [DispIdAttribute("0")]
public string Name { get; }
    [DispIdAttribute("100")]
public int ProcessID { get; }
    [DispIdAttribute("101")]
public Programs Programs { get; }
    [DispIdAttribute("200")]
public DTE DTE { get; }
    [DispIdAttribute("201")]
public Debugger Parent { get; }
    [DispIdAttribute("202")]
public Processes Collection { get; }
    [DispIdAttribute("1100")]
public Transport Transport { get; }
    [DispIdAttribute("1102")]
public string TransportQualifier { get; }
    [DispIdAttribute("1103")]
public Threads Threads { get; }
    [DispIdAttribute("1104")]
public bool IsBeingDebugged { get; }
    [DispIdAttribute("1105")]
public string UserName { get; }
    [DispIdAttribute("1")]
public abstract virtual void Attach();
    [DispIdAttribute("2")]
public abstract virtual void Detach(bool WaitForBreakOrEnd);
    [DispIdAttribute("3")]
public abstract virtual void Break(bool WaitForBreakMode);
    [DispIdAttribute("4")]
public abstract virtual void Terminate(bool WaitForBreakOrEnd);
    [DispIdAttribute("0")]
public abstract virtual string get_Name();
    [DispIdAttribute("100")]
public abstract virtual int get_ProcessID();
    [DispIdAttribute("101")]
public abstract virtual Programs get_Programs();
    [DispIdAttribute("200")]
public abstract virtual DTE get_DTE();
    [DispIdAttribute("201")]
public abstract virtual Debugger get_Parent();
    [DispIdAttribute("202")]
public abstract virtual Processes get_Collection();
    [DispIdAttribute("1001")]
public abstract virtual void Attach2(object Engines);
    [DispIdAttribute("1100")]
public abstract virtual Transport get_Transport();
    [DispIdAttribute("1102")]
public abstract virtual string get_TransportQualifier();
    [DispIdAttribute("1103")]
public abstract virtual Threads get_Threads();
    [DispIdAttribute("1104")]
public abstract virtual bool get_IsBeingDebugged();
    [DispIdAttribute("1105")]
public abstract virtual string get_UserName();
}
[GuidAttribute("88BFE631-54CD-4FCF-958E-F31187BE32D2")]
public abstract class EnvDTE80.ProjectKinds : object {
    public static string vsProjectKindSolutionFolder;
}
[ComVisibleAttribute("False")]
[GuidAttribute("827BE7DC-1817-4171-A8FF-AAB3854913BF")]
[CoClassAttribute("EnvDTE80.PublishEventsClass")]
public interface EnvDTE80.PublishEvents {
}
[ComVisibleAttribute("False")]
[GuidAttribute("045448EA-E8C1-4122-AC7B-D96D8E5C6E5B")]
[ClassInterfaceAttribute("0")]
[ComSourceInterfacesAttribute("EnvDTE80._dispPublishEvents")]
public class EnvDTE80.PublishEventsClass : object {
}
[GuidAttribute("FA238614-FBB1-4314-A7F7-49AE8BB6C6BA")]
[DefaultMemberAttribute("Item")]
public interface EnvDTE80.Solution2 {
    [DispIdAttribute("10")]
public DTE DTE { get; }
    [DispIdAttribute("11")]
public DTE Parent { get; }
    [DispIdAttribute("12")]
public int Count { get; }
    [DispIdAttribute("13")]
public string FileName { get; }
    [DispIdAttribute("19")]
public Properties Properties { get; }
    [DispIdAttribute("22")]
public bool IsDirty { get; public set; }
    [DispIdAttribute("28")]
public string FullName { get; }
    [DispIdAttribute("29")]
public bool Saved { get; public set; }
    [DispIdAttribute("31")]
public Globals Globals { get; }
    [DispIdAttribute("32")]
[ObsoleteAttribute("AddIn related extension points are no longer supported in Visual Studio.")]
public AddIns AddIns { get; }
    [DispIdAttribute("34")]
public object ExtenderNames { get; }
    [DispIdAttribute("35")]
public string ExtenderCATID { get; }
    [DispIdAttribute("36")]
public bool IsOpen { get; }
    [DispIdAttribute("38")]
public SolutionBuild SolutionBuild { get; }
    [DispIdAttribute("41")]
public Projects Projects { get; }
    [DispIdAttribute("0")]
public abstract virtual Project Item(object index);
    [DispIdAttribute("-4")]
public abstract virtual IEnumerator GetEnumerator();
    [DispIdAttribute("10")]
public abstract virtual DTE get_DTE();
    [DispIdAttribute("11")]
public abstract virtual DTE get_Parent();
    [DispIdAttribute("12")]
public abstract virtual int get_Count();
    [DispIdAttribute("13")]
public abstract virtual string get_FileName();
    [DispIdAttribute("14")]
public abstract virtual void SaveAs(string FileName);
    [DispIdAttribute("15")]
public abstract virtual Project AddFromTemplate(string FileName, string Destination, string ProjectName, bool Exclusive);
    [DispIdAttribute("16")]
public abstract virtual Project AddFromFile(string FileName, bool Exclusive);
    [DispIdAttribute("17")]
public abstract virtual void Open(string FileName);
    [DispIdAttribute("18")]
public abstract virtual void Close(bool SaveFirst);
    [DispIdAttribute("19")]
public abstract virtual Properties get_Properties();
    [DispIdAttribute("22")]
public abstract virtual bool get_IsDirty();
    [DispIdAttribute("22")]
public abstract virtual void set_IsDirty(bool value);
    [DispIdAttribute("25")]
public abstract virtual void Remove(Project proj);
    [DispIdAttribute("26")]
public abstract virtual string get_TemplatePath(string projectType);
    [DispIdAttribute("28")]
public abstract virtual string get_FullName();
    [DispIdAttribute("29")]
public abstract virtual bool get_Saved();
    [DispIdAttribute("29")]
public abstract virtual void set_Saved(bool value);
    [DispIdAttribute("31")]
public abstract virtual Globals get_Globals();
    [DispIdAttribute("32")]
public abstract virtual AddIns get_AddIns();
    [DispIdAttribute("33")]
public abstract virtual object get_Extender(string extenderName);
    [DispIdAttribute("34")]
public abstract virtual object get_ExtenderNames();
    [DispIdAttribute("35")]
public abstract virtual string get_ExtenderCATID();
    [DispIdAttribute("36")]
public abstract virtual bool get_IsOpen();
    [DispIdAttribute("38")]
public abstract virtual SolutionBuild get_SolutionBuild();
    [DispIdAttribute("40")]
public abstract virtual void Create(string Destination, string Name);
    [DispIdAttribute("41")]
public abstract virtual Projects get_Projects();
    [DispIdAttribute("42")]
public abstract virtual ProjectItem FindProjectItem(string FileName);
    [DispIdAttribute("43")]
public abstract virtual string ProjectItemsTemplatePath(string ProjectKind);
    [DispIdAttribute("102")]
public abstract virtual Project AddSolutionFolder(string Name);
    [DispIdAttribute("103")]
public abstract virtual string GetProjectTemplate(string TemplateName, string Language);
    [DispIdAttribute("104")]
public abstract virtual string GetProjectItemTemplate(string TemplateName, string Language);
}
[GuidAttribute("C2516E4B-5D69-459D-B539-C95A71C4FA3D")]
public interface EnvDTE80.SolutionBuild2 {
    [DispIdAttribute("1")]
public DTE DTE { get; }
    [DispIdAttribute("2")]
public Solution Parent { get; }
    [DispIdAttribute("3")]
public SolutionConfiguration ActiveConfiguration { get; }
    [DispIdAttribute("4")]
public BuildDependencies BuildDependencies { get; }
    [DispIdAttribute("5")]
public vsBuildState BuildState { get; }
    [DispIdAttribute("6")]
public int LastBuildInfo { get; }
    [DispIdAttribute("7")]
public object StartupProjects { get; public set; }
    [DispIdAttribute("13")]
public SolutionConfigurations SolutionConfigurations { get; }
    [DispIdAttribute("102")]
public int LastPublishInfo { get; }
    [DispIdAttribute("103")]
public vsPublishState PublishState { get; }
    [DispIdAttribute("1")]
public abstract virtual DTE get_DTE();
    [DispIdAttribute("2")]
public abstract virtual Solution get_Parent();
    [DispIdAttribute("3")]
public abstract virtual SolutionConfiguration get_ActiveConfiguration();
    [DispIdAttribute("4")]
public abstract virtual BuildDependencies get_BuildDependencies();
    [DispIdAttribute("5")]
public abstract virtual vsBuildState get_BuildState();
    [DispIdAttribute("6")]
public abstract virtual int get_LastBuildInfo();
    [DispIdAttribute("7")]
public abstract virtual void set_StartupProjects(object value);
    [DispIdAttribute("7")]
public abstract virtual object get_StartupProjects();
    [DispIdAttribute("8")]
public abstract virtual void Build(bool WaitForBuildToFinish);
    [DispIdAttribute("9")]
public abstract virtual void Debug();
    [DispIdAttribute("10")]
public abstract virtual void Deploy(bool WaitForDeployToFinish);
    [DispIdAttribute("11")]
public abstract virtual void Clean(bool WaitForCleanToFinish);
    [DispIdAttribute("12")]
public abstract virtual void Run();
    [DispIdAttribute("13")]
public abstract virtual SolutionConfigurations get_SolutionConfigurations();
    [DispIdAttribute("14")]
public abstract virtual void BuildProject(string SolutionConfiguration, string ProjectUniqueName, bool WaitForBuildToFinish);
    [DispIdAttribute("100")]
public abstract virtual void Publish(bool WaitForPublishToFinish);
    [DispIdAttribute("101")]
public abstract virtual void PublishProject(string SolutionConfiguration, string ProjectUniqueName, bool WaitForPublishToFinish);
    [DispIdAttribute("102")]
public abstract virtual int get_LastPublishInfo();
    [DispIdAttribute("103")]
public abstract virtual vsPublishState get_PublishState();
    [DispIdAttribute("104")]
public abstract virtual void DeployProject(string SolutionConfiguration, string ProjectUniqueName, bool WaitForDeployToFinish);
}
[GuidAttribute("1099AAA6-4169-430D-9F57-0B4C76624B3B")]
[DefaultMemberAttribute("Name")]
public interface EnvDTE80.SolutionConfiguration2 {
    [DispIdAttribute("1")]
public DTE DTE { get; }
    [DispIdAttribute("2")]
public SolutionConfigurations Collection { get; }
    [DispIdAttribute("0")]
public string Name { get; }
    [DispIdAttribute("3")]
public SolutionContexts SolutionContexts { get; }
    [DispIdAttribute("10")]
public string PlatformName { get; }
    [DispIdAttribute("1")]
public abstract virtual DTE get_DTE();
    [DispIdAttribute("2")]
public abstract virtual SolutionConfigurations get_Collection();
    [DispIdAttribute("0")]
public abstract virtual string get_Name();
    [DispIdAttribute("3")]
public abstract virtual SolutionContexts get_SolutionContexts();
    [DispIdAttribute("4")]
public abstract virtual void Delete();
    [DispIdAttribute("5")]
public abstract virtual void Activate();
    [DispIdAttribute("10")]
public abstract virtual string get_PlatformName();
}
[GuidAttribute("F8F69788-267C-4408-8967-74F26108C438")]
public interface EnvDTE80.SolutionFolder {
    [DispIdAttribute("1")]
public DTE DTE { get; }
    [DispIdAttribute("2")]
public Project Parent { get; }
    [DispIdAttribute("6")]
public bool Hidden { get; public set; }
    [DispIdAttribute("1")]
public abstract virtual DTE get_DTE();
    [DispIdAttribute("2")]
public abstract virtual Project get_Parent();
    [DispIdAttribute("3")]
public abstract virtual Project AddSolutionFolder(string Name);
    [DispIdAttribute("4")]
public abstract virtual Project AddFromFile(string FileName);
    [DispIdAttribute("5")]
public abstract virtual Project AddFromTemplate(string FileName, string Destination, string ProjectName);
    [DispIdAttribute("6")]
public abstract virtual bool get_Hidden();
    [DispIdAttribute("6")]
public abstract virtual void set_Hidden(bool value);
}
[GuidAttribute("111522AB-F439-4D85-9A36-1716DA4DA114")]
public interface EnvDTE80.SourceControl2 {
    [DispIdAttribute("1")]
public DTE DTE { get; }
    [DispIdAttribute("2")]
public DTE Parent { get; }
    [DispIdAttribute("1")]
public abstract virtual DTE get_DTE();
    [DispIdAttribute("2")]
public abstract virtual DTE get_Parent();
    [DispIdAttribute("3")]
public abstract virtual bool IsItemUnderSCC(string ItemName);
    [DispIdAttribute("4")]
public abstract virtual bool IsItemCheckedOut(string ItemName);
    [DispIdAttribute("5")]
public abstract virtual bool CheckOutItem(string ItemName);
    [DispIdAttribute("6")]
public abstract virtual bool CheckOutItems(Object[]& ItemNames);
    [DispIdAttribute("7")]
public abstract virtual void ExcludeItem(string ProjectFile, string ItemName);
    [DispIdAttribute("8")]
public abstract virtual void ExcludeItems(string ProjectFile, Object[]& ItemNames);
    [DispIdAttribute("10")]
public abstract virtual SourceControlBindings GetBindings(string ItemPath);
    [DispIdAttribute("11")]
public abstract virtual bool CheckOutItem2(string ItemName, vsSourceControlCheckOutOptions Flags);
    [DispIdAttribute("12")]
public abstract virtual bool CheckOutItems2(Object[]& ItemNames, vsSourceControlCheckOutOptions Flags);
    [DispIdAttribute("13")]
public abstract virtual void UndoExcludeItem(string ProjectFile, string ItemName);
    [DispIdAttribute("14")]
public abstract virtual void UndoExcludeItems(string ProjectFile, Object[]& ItemNames);
}
[GuidAttribute("544A6477-BE0B-42ED-B47B-553ED8C5F22C")]
public interface EnvDTE80.SourceControlBindings {
    [DispIdAttribute("1")]
public DTE DTE { get; }
    [DispIdAttribute("2")]
public SourceControl Parent { get; }
    [DispIdAttribute("3")]
public string ServerName { get; }
    [DispIdAttribute("4")]
public string LocalBinding { get; }
    [DispIdAttribute("5")]
public string ServerBinding { get; }
    [DispIdAttribute("6")]
public string ProviderName { get; }
    [DispIdAttribute("7")]
public string ProviderRegKey { get; }
    [DispIdAttribute("1")]
public abstract virtual DTE get_DTE();
    [DispIdAttribute("2")]
public abstract virtual SourceControl get_Parent();
    [DispIdAttribute("3")]
public abstract virtual string get_ServerName();
    [DispIdAttribute("4")]
public abstract virtual string get_LocalBinding();
    [DispIdAttribute("5")]
public abstract virtual string get_ServerBinding();
    [DispIdAttribute("6")]
public abstract virtual string get_ProviderName();
    [DispIdAttribute("7")]
public abstract virtual string get_ProviderRegKey();
}
[GuidAttribute("B820F931-645A-473F-8246-922CF069E1FE")]
[DefaultMemberAttribute("Item")]
public interface EnvDTE80.TaskItems2 {
    [DispIdAttribute("1")]
public DTE DTE { get; }
    [DispIdAttribute("2")]
public TaskList Parent { get; }
    [DispIdAttribute("3")]
public int Count { get; }
    [DispIdAttribute("1")]
public abstract virtual DTE get_DTE();
    [DispIdAttribute("2")]
public abstract virtual TaskList get_Parent();
    [DispIdAttribute("0")]
public abstract virtual TaskItem Item(object index);
    [DispIdAttribute("3")]
public abstract virtual int get_Count();
    [DispIdAttribute("4")]
public abstract virtual TaskItem Add(string Category, string SubCategory, string Description, vsTaskPriority Priority, object Icon, bool Checkable, string File, int Line, bool CanUserDelete, bool FlushItem);
    [DispIdAttribute("-4")]
public abstract virtual IEnumerator GetEnumerator();
    [DispIdAttribute("6")]
public abstract virtual void ForceItemsToTaskList();
    [DispIdAttribute("7")]
public abstract virtual TaskItem Add2(string Category, string SubCategory, string Description, vsTaskPriority Priority, object Icon, bool Checkable, string File, int Line, bool CanUserDelete, bool FlushItem, bool AutoNavigate);
}
[ComVisibleAttribute("False")]
[GuidAttribute("505B7600-8FCC-487C-9E4F-C7FD0B5FB690")]
[CoClassAttribute("EnvDTE80.TextDocumentKeyPressEventsClass")]
public interface EnvDTE80.TextDocumentKeyPressEvents {
}
[ClassInterfaceAttribute("0")]
[ComVisibleAttribute("False")]
[GuidAttribute("E7532A4E-AB9E-41DF-BB9A-7C764677E5C3")]
[ComSourceInterfacesAttribute("EnvDTE80._dispTextDocumentKeyPressEvents")]
public class EnvDTE80.TextDocumentKeyPressEventsClass : object {
}
[GuidAttribute("ACE19C7B-A0AC-4089-94FD-749CF4380E1F")]
public interface EnvDTE80.TextPane2 {
    [DispIdAttribute("1")]
public DTE DTE { get; }
    [DispIdAttribute("2")]
public TextPanes Collection { get; }
    [DispIdAttribute("3")]
public Window Window { get; }
    [DispIdAttribute("4")]
public int Height { get; }
    [DispIdAttribute("5")]
public int Width { get; }
    [DispIdAttribute("8")]
public TextSelection Selection { get; }
    [DispIdAttribute("9")]
public TextPoint StartPoint { get; }
    [DispIdAttribute("20")]
public IncrementalSearch IncrementalSearch { get; }
    [DispIdAttribute("1")]
public abstract virtual DTE get_DTE();
    [DispIdAttribute("2")]
public abstract virtual TextPanes get_Collection();
    [DispIdAttribute("3")]
public abstract virtual Window get_Window();
    [DispIdAttribute("4")]
public abstract virtual int get_Height();
    [DispIdAttribute("5")]
public abstract virtual int get_Width();
    [DispIdAttribute("8")]
public abstract virtual TextSelection get_Selection();
    [DispIdAttribute("9")]
public abstract virtual TextPoint get_StartPoint();
    [DispIdAttribute("12")]
public abstract virtual void Activate();
    [DispIdAttribute("10")]
public abstract virtual bool IsVisible(TextPoint Point, object PointOrCount);
    [DispIdAttribute("11")]
public abstract virtual bool TryToShow(TextPoint Point, vsPaneShowHow How, object PointOrCount);
    [DispIdAttribute("20")]
public abstract virtual IncrementalSearch get_IncrementalSearch();
}
[DefaultMemberAttribute("Name")]
[GuidAttribute("82C9DBF2-1DA8-4ED6-A5EC-8B876B46317C")]
public interface EnvDTE80.ToolBoxItem2 {
    [DispIdAttribute("0")]
public string Name { get; public set; }
    [DispIdAttribute("1")]
public ToolBoxItems Collection { get; }
    [DispIdAttribute("2")]
public DTE DTE { get; }
    [DispIdAttribute("10")]
public object Data { get; }
    [DispIdAttribute("0")]
public abstract virtual string get_Name();
    [DispIdAttribute("0")]
public abstract virtual void set_Name(string value);
    [DispIdAttribute("1")]
public abstract virtual ToolBoxItems get_Collection();
    [DispIdAttribute("2")]
public abstract virtual DTE get_DTE();
    [DispIdAttribute("3")]
public abstract virtual void Delete();
    [DispIdAttribute("4")]
public abstract virtual void Select();
    [DispIdAttribute("10")]
public abstract virtual object get_Data();
}
[GuidAttribute("A64715CB-85D7-41C3-8E71-2302D4EEBC34")]
[DefaultMemberAttribute("Name")]
public interface EnvDTE80.ToolBoxTab2 {
    [DispIdAttribute("0")]
public string Name { get; public set; }
    [DispIdAttribute("1")]
public ToolBoxTabs Collection { get; }
    [DispIdAttribute("2")]
public DTE DTE { get; }
    [DispIdAttribute("6")]
public ToolBoxItems ToolBoxItems { get; }
    [DispIdAttribute("8")]
public bool ListView { get; public set; }
    [DispIdAttribute("9")]
public string UniqueID { get; public set; }
    [DispIdAttribute("0")]
public abstract virtual string get_Name();
    [DispIdAttribute("0")]
public abstract virtual void set_Name(string value);
    [DispIdAttribute("1")]
public abstract virtual ToolBoxTabs get_Collection();
    [DispIdAttribute("2")]
public abstract virtual DTE get_DTE();
    [DispIdAttribute("4")]
public abstract virtual void Activate();
    [DispIdAttribute("5")]
public abstract virtual void Delete();
    [DispIdAttribute("6")]
public abstract virtual ToolBoxItems get_ToolBoxItems();
    [DispIdAttribute("8")]
public abstract virtual bool get_ListView();
    [DispIdAttribute("8")]
public abstract virtual void set_ListView(bool value);
    [DispIdAttribute("9")]
public abstract virtual string get_UniqueID();
    [DispIdAttribute("9")]
public abstract virtual void set_UniqueID(string value);
}
[GuidAttribute("19AC6F68-3019-4D65-8D98-404DFB96B8E2")]
[DefaultMemberAttribute("GetToolWindow")]
public interface EnvDTE80.ToolWindows {
    [DispIdAttribute("1")]
public DTE DTE { get; }
    [DispIdAttribute("4")]
public ToolBox ToolBox { get; }
    [DispIdAttribute("5")]
public CommandWindow CommandWindow { get; }
    [DispIdAttribute("7")]
public OutputWindow OutputWindow { get; }
    [DispIdAttribute("8")]
public UIHierarchy SolutionExplorer { get; }
    [DispIdAttribute("9")]
public TaskList TaskList { get; }
    [DispIdAttribute("10")]
public ErrorList ErrorList { get; }
    [DispIdAttribute("1")]
public abstract virtual DTE get_DTE();
    [DispIdAttribute("0")]
public abstract virtual object GetToolWindow(string Name);
    [DispIdAttribute("4")]
public abstract virtual ToolBox get_ToolBox();
    [DispIdAttribute("5")]
public abstract virtual CommandWindow get_CommandWindow();
    [DispIdAttribute("7")]
public abstract virtual OutputWindow get_OutputWindow();
    [DispIdAttribute("8")]
public abstract virtual UIHierarchy get_SolutionExplorer();
    [DispIdAttribute("9")]
public abstract virtual TaskList get_TaskList();
    [DispIdAttribute("10")]
public abstract virtual ErrorList get_ErrorList();
}
[GuidAttribute("C977EAED-9E6C-4122-9D28-9D5EAE2BDC33")]
public interface EnvDTE80.Transport {
    [DispIdAttribute("100")]
public string Name { get; }
    [DispIdAttribute("101")]
public string ID { get; }
    [DispIdAttribute("102")]
public Engines Engines { get; }
    [DispIdAttribute("200")]
public DTE DTE { get; }
    [DispIdAttribute("201")]
public Debugger2 Parent { get; }
    [DispIdAttribute("202")]
public Transports Collection { get; }
    [DispIdAttribute("100")]
public abstract virtual string get_Name();
    [DispIdAttribute("101")]
public abstract virtual string get_ID();
    [DispIdAttribute("102")]
public abstract virtual Engines get_Engines();
    [DispIdAttribute("200")]
public abstract virtual DTE get_DTE();
    [DispIdAttribute("201")]
public abstract virtual Debugger2 get_Parent();
    [DispIdAttribute("202")]
public abstract virtual Transports get_Collection();
}
[DefaultMemberAttribute("Item")]
[GuidAttribute("EA47C3D9-FD41-4402-BDC6-7F07D0C8E3FC")]
public interface EnvDTE80.Transports {
    [DispIdAttribute("1")]
public DTE DTE { get; }
    [DispIdAttribute("2")]
public Debugger Parent { get; }
    [DispIdAttribute("3")]
public int Count { get; }
    [DispIdAttribute("0")]
public abstract virtual Transport Item(object index);
    [DispIdAttribute("-4")]
public abstract virtual IEnumerator GetEnumerator();
    [DispIdAttribute("1")]
public abstract virtual DTE get_DTE();
    [DispIdAttribute("2")]
public abstract virtual Debugger get_Parent();
    [DispIdAttribute("3")]
public abstract virtual int get_Count();
}
[GuidAttribute("E71FE63B-B6D9-47A0-9577-963C84AECCE0")]
public enum EnvDTE80.vsBuildErrorLevel : Enum {
    public int value__;
    public static vsBuildErrorLevel vsBuildErrorLevelLow;
    public static vsBuildErrorLevel vsBuildErrorLevelMedium;
    public static vsBuildErrorLevel vsBuildErrorLevelHigh;
}
[GuidAttribute("81DD2950-B7E7-4D51-BFD7-11B086738F6E")]
public enum EnvDTE80.vsCMChangeKind : Enum {
    public int value__;
    public static vsCMChangeKind vsCMChangeKindRename;
    public static vsCMChangeKind vsCMChangeKindUnknown;
    public static vsCMChangeKind vsCMChangeKindSignatureChange;
    public static vsCMChangeKind vsCMChangeKindTypeRefChange;
    public static vsCMChangeKind vsCMChangeKindBaseChange;
    public static vsCMChangeKind vsCMChangeKindArgumentChange;
}
[GuidAttribute("DBDF9319-8FCC-4950-A50D-1E6FB5490869")]
public enum EnvDTE80.vsCMClassKind : Enum {
    public int value__;
    public static vsCMClassKind vsCMClassKindMainClass;
    public static vsCMClassKind vsCMClassKindBlueprint;
    public static vsCMClassKind vsCMClassKindPartialClass;
    public static vsCMClassKind vsCMClassKindModule;
}
[GuidAttribute("4438EED0-E747-49AC-8D22-00F26B18755D")]
public enum EnvDTE80.vsCMConstKind : Enum {
    public int value__;
    public static vsCMConstKind vsCMConstKindNone;
    public static vsCMConstKind vsCMConstKindConst;
    public static vsCMConstKind vsCMConstKindReadOnly;
}
[GuidAttribute("DBDF931A-8FCC-4950-A50D-1E6FB5490869")]
public enum EnvDTE80.vsCMDataTypeKind : Enum {
    public int value__;
    public static vsCMDataTypeKind vsCMDataTypeKindMain;
    public static vsCMDataTypeKind vsCMDataTypeKindBlueprint;
    public static vsCMDataTypeKind vsCMDataTypeKindPartial;
    public static vsCMDataTypeKind vsCMDataTypeKindModule;
}
[GuidAttribute("7EDBC54F-4B70-4B72-A422-5E57555DBD06")]
public enum EnvDTE80.vsCMElement2 : Enum {
    public int value__;
    public static vsCMElement2 vsCMElementUnknown;
    public static vsCMElement2 vsCMElementAttributeArgument;
}
[GuidAttribute("D3C30B7B-11AD-4693-B1A8-E20A36C1C9F1")]
public enum EnvDTE80.vsCMFunction2 : Enum {
    public int value__;
    public static vsCMFunction2 vsCMFunctionAddHandler;
    public static vsCMFunction2 vsCMFunctionRemoveHandler;
    public static vsCMFunction2 vsCMFunctionRaiseEvent;
}
[GuidAttribute("C4541DAB-D314-452D-9760-30A615F0DC26")]
public enum EnvDTE80.vsCMInheritanceKind : Enum {
    public int value__;
    public static vsCMInheritanceKind vsCMInheritanceKindNone;
    public static vsCMInheritanceKind vsCMInheritanceKindAbstract;
    public static vsCMInheritanceKind vsCMInheritanceKindSealed;
    public static vsCMInheritanceKind vsCMInheritanceKindNew;
}
[GuidAttribute("3E30C32D-9E8D-4919-8CC4-C3D75879BC52")]
public enum EnvDTE80.vsCMOverrideKind : Enum {
    public int value__;
    public static vsCMOverrideKind vsCMOverrideKindNone;
    public static vsCMOverrideKind vsCMOverrideKindAbstract;
    public static vsCMOverrideKind vsCMOverrideKindVirtual;
    public static vsCMOverrideKind vsCMOverrideKindOverride;
    public static vsCMOverrideKind vsCMOverrideKindNew;
    public static vsCMOverrideKind vsCMOverrideKindSealed;
}
[GuidAttribute("2366AEF3-BA49-4A96-B4A1-B8BF1ACB2600")]
public enum EnvDTE80.vsCMParameterKind : Enum {
    public int value__;
    public static vsCMParameterKind vsCMParameterKindNone;
    public static vsCMParameterKind vsCMParameterKindIn;
    public static vsCMParameterKind vsCMParameterKindRef;
    public static vsCMParameterKind vsCMParameterKindOut;
    public static vsCMParameterKind vsCMParameterKindOptional;
    public static vsCMParameterKind vsCMParameterKindParamArray;
}
[GuidAttribute("A49FB892-EE3A-411E-8BD4-BB4AC6AE6608")]
public enum EnvDTE80.vsCMParseStatus : Enum {
    public int value__;
    public static vsCMParseStatus vsCMParseStatusError;
    public static vsCMParseStatus vsCMParseStatusComplete;
}
[GuidAttribute("E24A10BD-9A40-43A3-9DB9-AFAF05D74704")]
public enum EnvDTE80.vsCMPropertyKind : Enum {
    public int value__;
    public static vsCMPropertyKind vsCMPropertyKindReadWrite;
    public static vsCMPropertyKind vsCMPropertyKindReadOnly;
    public static vsCMPropertyKind vsCMPropertyKindWriteOnly;
}
[GuidAttribute("7FB3C569-7FAF-4070-82AA-04B18B8BBAD1")]
public enum EnvDTE80.vsCMTypeRef2 : Enum {
    public int value__;
    public static vsCMTypeRef2 vsCMTypeRefUnsignedChar;
    public static vsCMTypeRef2 vsCMTypeRefUnsignedShort;
    public static vsCMTypeRef2 vsCMTypeRefUnsignedInt;
    public static vsCMTypeRef2 vsCMTypeRefUnsignedLong;
    public static vsCMTypeRef2 vsCMTypeRefReference;
    public static vsCMTypeRef2 vsCMTypeRefMCBoxedReference;
    public static vsCMTypeRef2 vsCMTypeRefSByte;
}
[GuidAttribute("765724FE-DDE5-422A-A008-198376C7B641")]
public enum EnvDTE80.vsCommandControlType : Enum {
    public int value__;
    public static vsCommandControlType vsCommandControlTypeButton;
    public static vsCommandControlType vsCommandControlTypeDropDownCombo;
    public static vsCommandControlType vsCommandControlTypeMRUCombo;
    public static vsCommandControlType vsCommandControlTypeMRUButton;
}
[GuidAttribute("6FB22721-008A-41A0-B4A9-23A7AB2A02B7")]
public enum EnvDTE80.vsCommandStyle : Enum {
    public int value__;
    public static vsCommandStyle vsCommandStylePict;
    public static vsCommandStyle vsCommandStyleText;
    public static vsCommandStyle vsCommandStylePictAndText;
    public static vsCommandStyle vsCommandStyleComboNoAutoComplete;
    public static vsCommandStyle vsCommandStyleComboCaseSensitive;
}
[GuidAttribute("A3ACF727-0590-4467-A9C7-5557B9C0F3F6")]
public enum EnvDTE80.vsFindOptions2 : Enum {
    public int value__;
    public static vsFindOptions2 vsFindOptionsWaitForFindToComplete;
}
[GuidAttribute("FD6530D0-1A2C-4073-AAE9-3C2B3AA8BC4D")]
public enum EnvDTE80.vsIncrementalSearchResult : Enum {
    public int value__;
    public static vsIncrementalSearchResult vsIncrementalSearchResultFound;
    public static vsIncrementalSearchResult vsIncrementalSearchResultPassedEOB;
    public static vsIncrementalSearchResult vsIncrementalSearchResultPassedStart;
    public static vsIncrementalSearchResult vsIncrementalSearchResultFailed;
}
[GuidAttribute("861474E5-DE58-4924-B6D3-8D48BA712944")]
public enum EnvDTE80.vsPublishState : Enum {
    public int value__;
    public static vsPublishState vsPublishStateDone;
    public static vsPublishState vsPublishStateInProgress;
    public static vsPublishState vsPublishStateNotStarted;
}
[GuidAttribute("4EEE3A14-18AA-4244-9745-6E3F35D7FC4B")]
public enum EnvDTE80.vsSourceControlCheckOutOptions : Enum {
    public int value__;
    public static vsSourceControlCheckOutOptions vsSourceControlCheckOutOptionLatestVersion;
    public static vsSourceControlCheckOutOptions vsSourceControlCheckOutOptionLocalVersion;
}
[GuidAttribute("2C23EF05-01A5-4684-AC27-4EFD8D840BA9")]
public enum EnvDTE80.vsThemeColors : Enum {
    public int value__;
    public static vsThemeColors vsThemeColorAccentBorder;
    public static vsThemeColors vsThemeColorAccentDark;
    public static vsThemeColors vsThemeColorAccentLight;
    public static vsThemeColors vsThemeColorAccentMedium;
    public static vsThemeColors vsThemeColorAccentPale;
    public static vsThemeColors vsThemeColorCommandbarBorder;
    public static vsThemeColors vsThemeColorCommandbarDraghandle;
    public static vsThemeColors vsThemeColorCommandbarDraghandleShadow;
    public static vsThemeColors vsThemeColorCommandbarGradientBegin;
    public static vsThemeColors vsThemeColorCommandbarGradientEnd;
    public static vsThemeColors vsThemeColorCommandbarGradientMiddle;
    public static vsThemeColors vsThemeColorCommandbarHover;
    public static vsThemeColors vsThemeColorCommandbarHoveroverSelected;
    public static vsThemeColors vsThemeColorCommandbarHoveroverSelectedicon;
    public static vsThemeColors vsThemeColorCommandbarSelected;
    public static vsThemeColors vsThemeColorCommandbarShadow;
    public static vsThemeColors vsThemeColorCommandbarTextActive;
    public static vsThemeColors vsThemeColorCommandbarTextHover;
    public static vsThemeColors vsThemeColorCommandbarTextInactive;
    public static vsThemeColors vsThemeColorCommandbarTextSelected;
    public static vsThemeColors vsThemeColorControlEditHintText;
    public static vsThemeColors vsThemeColorControlEditRequiredBackground;
    public static vsThemeColors vsThemeColorControlEditRequiredHintText;
    public static vsThemeColors vsThemeColorControlLinkText;
    public static vsThemeColors vsThemeColorControlLinkTextHover;
    public static vsThemeColors vsThemeColorControlLinkTextPressed;
    public static vsThemeColors vsThemeColorControlOutline;
    public static vsThemeColors vsThemeColorDebuggerDatatipActiveBackground;
    public static vsThemeColors vsThemeColorDebuggerDatatipActiveBorder;
    public static vsThemeColors vsThemeColorDebuggerDatatipActiveHighlight;
    public static vsThemeColors vsThemeColorDebuggerDatatipActiveHighlightText;
    public static vsThemeColors vsThemeColorDebuggerDatatipActiveSeparator;
    public static vsThemeColors vsThemeColorDebuggerDatatipActiveText;
    public static vsThemeColors vsThemeColorDebuggerDatatipInactiveBackground;
    public static vsThemeColors vsThemeColorDebuggerDatatipInactiveBorder;
    public static vsThemeColors vsThemeColorDebuggerDatatipInactiveHighlight;
    public static vsThemeColors vsThemeColorDebuggerDatatipInactiveHighlightText;
    public static vsThemeColors vsThemeColorDebuggerDatatipInactiveSeparator;
    public static vsThemeColors vsThemeColorDebuggerDatatipInactiveText;
    public static vsThemeColors vsThemeColorDesignerBackground;
    public static vsThemeColors vsThemeColorDesignerSelectionDots;
    public static vsThemeColors vsThemeColorDesignerTray;
    public static vsThemeColors vsThemeColorDesignerWatermark;
    public static vsThemeColors vsThemeColorEnvironmentBackground;
    public static vsThemeColors vsThemeColorEnvironmentBackgroundGradientBegin;
    public static vsThemeColors vsThemeColorEnvironmentBackgroundGradientEnd;
    public static vsThemeColors vsThemeColorFileTabBorder;
    public static vsThemeColors vsThemeColorFileTabChannelBackground;
    public static vsThemeColors vsThemeColorFileTabGradientDark;
    public static vsThemeColors vsThemeColorFileTabGradientLight;
    public static vsThemeColors vsThemeColorFileTabSelectedBackground;
    public static vsThemeColors vsThemeColorFileTabSelectedBorder;
    public static vsThemeColors vsThemeColorFileTabSelectedText;
    public static vsThemeColors vsThemeColorFileTabText;
    public static vsThemeColors vsThemeColorFormSmartTagActiontagBorder;
    public static vsThemeColors vsThemeColorFormSmartTagActiontagFill;
    public static vsThemeColors vsThemeColorFormSmartTagObjecttagBorder;
    public static vsThemeColors vsThemeColorFormSmartTagObjecttagFill;
    public static vsThemeColors vsThemeColorGridHeadingBackground;
    public static vsThemeColors vsThemeColorGridHeadingText;
    public static vsThemeColors vsThemeColorGridLine;
    public static vsThemeColors vsThemeColorHelpHowDoIPaneBackground;
    public static vsThemeColors vsThemeColorHelpHowDoIPaneBorder;
    public static vsThemeColors vsThemeColorHelpHowDoIPaneLink;
    public static vsThemeColors vsThemeColorHelpHowDoIPaneText;
    public static vsThemeColors vsThemeColorHelpHowDoITaskBackground;
    public static vsThemeColors vsThemeColorHelpHowDoITaskLink;
    public static vsThemeColors vsThemeColorHelpHowDoITaskText;
    public static vsThemeColors vsThemeColorHelpSearchBackground;
    public static vsThemeColors vsThemeColorHelpSearchBorder;
    public static vsThemeColors vsThemeColorHelpSearchFitlerBackground;
    public static vsThemeColors vsThemeColorHelpSearchFitlerBorder;
    public static vsThemeColors vsThemeColorHelpSearchGradientBegin;
    public static vsThemeColors vsThemeColorHelpSearchGradientEnd;
    public static vsThemeColors vsThemeColorHelpSearchNavigationDisabled;
    public static vsThemeColors vsThemeColorHelpSearchNavigationEnabled;
    public static vsThemeColors vsThemeColorHelpSearchPanelRules;
    public static vsThemeColors vsThemeColorHelpSearchProviderBackground;
    public static vsThemeColors vsThemeColorHelpSearchProviderIcon;
    public static vsThemeColors vsThemeColorHelpSearchProviderText;
    public static vsThemeColors vsThemeColorHelpSearchResultLinkSelected;
    public static vsThemeColors vsThemeColorHelpSearchResultLinkUnselected;
    public static vsThemeColors vsThemeColorHelpSearchResultSelectedBackground;
    public static vsThemeColors vsThemeColorHelpSearchResultSelectedText;
    public static vsThemeColors vsThemeColorHelpSearchText;
    public static vsThemeColors vsThemeColorPanelBorder;
    public static vsThemeColors vsThemeColorPanelGradientDark;
    public static vsThemeColors vsThemeColorPanelGradientLight;
    public static vsThemeColors vsThemeColorPanelHoveroverCloseBorder;
    public static vsThemeColors vsThemeColorPanelHoveroverCloseFill;
    public static vsThemeColors vsThemeColorPanelHyperlink;
    public static vsThemeColors vsThemeColorPanelHyperlinkHover;
    public static vsThemeColors vsThemeColorPanelHyperlinkPressed;
    public static vsThemeColors vsThemeColorPanelSeparator;
    public static vsThemeColors vsThemeColorPanelSubGroupSeparator;
    public static vsThemeColors vsThemeColorPanelText;
    public static vsThemeColors vsThemeColorPanelTitlebar;
    public static vsThemeColors vsThemeColorPanelTitlebarText;
    public static vsThemeColors vsThemeColorPanelTitlebarUnselected;
    public static vsThemeColors vsThemeColorProjectDesignerBackgroundGradientBegin;
    public static vsThemeColors vsThemeColorProjectDesignerBackgroundGradientEnd;
    public static vsThemeColors vsThemeColorProjectDesignerBorderOutside;
    public static vsThemeColors vsThemeColorProjectDesignerBorderInside;
    public static vsThemeColors vsThemeColorProjectDesignerContentsBackground;
    public static vsThemeColors vsThemeColorProjectDesignerTabBackgroundGradientBegin;
    public static vsThemeColors vsThemeColorProjectDesignerTabBackgroundGradientEnd;
    public static vsThemeColors vsThemeColorProjectDesignerTabSelectedInsideborder;
    public static vsThemeColors vsThemeColorProjectDesignerTabSelectedBorder;
    public static vsThemeColors vsThemeColorProjectDesignerTabSelectedHighlight1;
    public static vsThemeColors vsThemeColorProjectDesignerTabSelectedHighlight2;
    public static vsThemeColors vsThemeColorProjectDesignerTabSelectedBackground;
    public static vsThemeColors vsThemeColorProjectDesignerTabSepBottomGradientBegin;
    public static vsThemeColors vsThemeColorProjectDesignerTabSepBottomGradientEnd;
    public static vsThemeColors vsThemeColorProjectDesignerTabSepTopGradientBegin;
    public static vsThemeColors vsThemeColorProjectDesignerTabSepTopGradientEnd;
    public static vsThemeColors vsThemeColorScreentipBorder;
    public static vsThemeColors vsThemeColorScreentipBackground;
    public static vsThemeColors vsThemeColorScreentipText;
    public static vsThemeColors vsThemeColorSidebarBackground;
    public static vsThemeColors vsThemeColorSidebarGradientdark;
    public static vsThemeColors vsThemeColorSidebarGradientlight;
    public static vsThemeColors vsThemeColorSidebarText;
    public static vsThemeColors vsThemeColorSmartTagBorder;
    public static vsThemeColors vsThemeColorSmartTagFill;
    public static vsThemeColors vsThemeColorSmartTagHoverBorder;
    public static vsThemeColors vsThemeColorSmartTagHoverFill;
    public static vsThemeColors vsThemeColorSmartTagHoverText;
    public static vsThemeColors vsThemeColorSmartTagText;
    public static vsThemeColors vsThemeColorSnaplines;
    public static vsThemeColors vsThemeColorSnaplinesTextBaseline;
    public static vsThemeColors vsThemeColorTasklistGridlines;
    public static vsThemeColors vsThemeColorTitlebarActive;
    public static vsThemeColors vsThemeColorTitlebarActiveGradientBegin;
    public static vsThemeColors vsThemeColorTitlebarActiveGradientEnd;
    public static vsThemeColors vsThemeColorTitlebarActiveText;
    public static vsThemeColors vsThemeColorTitlebarInactive;
    public static vsThemeColors vsThemeColorTitlebarInactiveGradientBegin;
    public static vsThemeColors vsThemeColorTitlebarInactiveGradientEnd;
    public static vsThemeColors vsThemeColorTitlebarInactiveText;
    public static vsThemeColors vsThemeColorToolboxBackground;
    public static vsThemeColors vsThemeColorToolboxDivider;
    public static vsThemeColors vsThemeColorToolboxGradientDark;
    public static vsThemeColors vsThemeColorToolboxGradientLight;
    public static vsThemeColors vsThemeColorToolboxHeadingAccent;
    public static vsThemeColors vsThemeColorToolboxHeadingBegin;
    public static vsThemeColors vsThemeColorToolboxHeadingEnd;
    public static vsThemeColors vsThemeColorToolboxIconHighlight;
    public static vsThemeColors vsThemeColorToolboxIconShadow;
    public static vsThemeColors vsThemeColorToolWindowBackground;
    public static vsThemeColors vsThemeColorToolWindowBorder;
    public static vsThemeColors vsThemeColorToolWindowTabSelectedtab;
    public static vsThemeColors vsThemeColorToolWindowTabBorder;
    public static vsThemeColors vsThemeColorToolWindowTabGradientBegin;
    public static vsThemeColors vsThemeColorToolWindowTabGradientEnd;
    public static vsThemeColors vsThemeColorToolWindowTabText;
    public static vsThemeColors vsThemeColorToolWindowTabSelectedtext;
    public static vsThemeColors vsThemeColorWizardOrientationPanelBackground;
    public static vsThemeColors vsThemeColorWizardOrientationPanelText;
}
[GuidAttribute("25731932-3283-4AE0-B7CF-F4691B8BE523")]
[DefaultMemberAttribute("Caption")]
[TypeLibTypeAttribute("4160")]
public interface EnvDTE80.Window2 {
    [DispIdAttribute("2")]
public Windows Collection { get; }
    [DispIdAttribute("106")]
public bool Visible { get; public set; }
    [DispIdAttribute("101")]
public int Left { get; public set; }
    [DispIdAttribute("103")]
public int Top { get; public set; }
    [DispIdAttribute("105")]
public int Width { get; public set; }
    [DispIdAttribute("107")]
public int Height { get; public set; }
    [DispIdAttribute("109")]
public vsWindowState WindowState { get; public set; }
    [DispIdAttribute("112")]
public vsWindowType Type { get; }
    [DispIdAttribute("116")]
public LinkedWindows LinkedWindows { get; }
    [DispIdAttribute("117")]
public Window LinkedWindowFrame { get; }
    [DispIdAttribute("120")]
public IntPtr HWnd { get; }
    [DispIdAttribute("121")]
public string Kind { get; }
    [DispIdAttribute("122")]
public string ObjectKind { get; }
    [DispIdAttribute("123")]
public object Object { get; }
    [DispIdAttribute("124")]
public object DocumentData { get; }
    [DispIdAttribute("125")]
public ProjectItem ProjectItem { get; }
    [DispIdAttribute("126")]
public Project Project { get; }
    [DispIdAttribute("127")]
public DTE DTE { get; }
    [DispIdAttribute("128")]
public Document Document { get; }
    [DispIdAttribute("129")]
public object Selection { get; }
    [DispIdAttribute("130")]
public bool Linkable { get; public set; }
    [DispIdAttribute("0")]
public string Caption { get; public set; }
    [DispIdAttribute("135")]
public bool IsFloating { get; public set; }
    [DispIdAttribute("136")]
public bool AutoHides { get; public set; }
    [DispIdAttribute("139")]
public ContextAttributes ContextAttributes { get; }
    [DispIdAttribute("200")]
public object CommandBars { get; }
    [DispIdAttribute("2")]
public abstract virtual Windows get_Collection();
    [DispIdAttribute("106")]
public abstract virtual bool get_Visible();
    [DispIdAttribute("106")]
public abstract virtual void set_Visible(bool pfVisible);
    [DispIdAttribute("101")]
public abstract virtual int get_Left();
    [DispIdAttribute("101")]
public abstract virtual void set_Left(int plLeft);
    [DispIdAttribute("103")]
public abstract virtual int get_Top();
    [DispIdAttribute("103")]
public abstract virtual void set_Top(int plTop);
    [DispIdAttribute("105")]
public abstract virtual int get_Width();
    [DispIdAttribute("105")]
public abstract virtual void set_Width(int plWidth);
    [DispIdAttribute("107")]
public abstract virtual int get_Height();
    [DispIdAttribute("107")]
public abstract virtual void set_Height(int plHeight);
    [DispIdAttribute("109")]
public abstract virtual vsWindowState get_WindowState();
    [DispIdAttribute("109")]
public abstract virtual void set_WindowState(vsWindowState plWindowState);
    [TypeLibFuncAttribute("64")]
[DispIdAttribute("111")]
public abstract virtual void SetFocus();
    [DispIdAttribute("112")]
[TypeLibFuncAttribute("64")]
public abstract virtual vsWindowType get_Type();
    [DispIdAttribute("113")]
[TypeLibFuncAttribute("65")]
public abstract virtual void SetKind(vsWindowType eKind);
    [DispIdAttribute("116")]
public abstract virtual LinkedWindows get_LinkedWindows();
    [DispIdAttribute("117")]
public abstract virtual Window get_LinkedWindowFrame();
    [TypeLibFuncAttribute("65")]
[DispIdAttribute("118")]
public abstract virtual void Detach();
    [DispIdAttribute("119")]
[TypeLibFuncAttribute("65")]
public abstract virtual void Attach(IntPtr lWindowHandle);
    [DispIdAttribute("120")]
[TypeLibFuncAttribute("64")]
public abstract virtual IntPtr get_HWnd();
    [DispIdAttribute("121")]
public abstract virtual string get_Kind();
    [DispIdAttribute("122")]
public abstract virtual string get_ObjectKind();
    [DispIdAttribute("123")]
public abstract virtual object get_Object();
    [TypeLibFuncAttribute("64")]
[DispIdAttribute("124")]
public abstract virtual object get_DocumentData(string bstrWhichData);
    [DispIdAttribute("125")]
public abstract virtual ProjectItem get_ProjectItem();
    [DispIdAttribute("126")]
public abstract virtual Project get_Project();
    [DispIdAttribute("127")]
public abstract virtual DTE get_DTE();
    [DispIdAttribute("128")]
public abstract virtual Document get_Document();
    [DispIdAttribute("129")]
public abstract virtual object get_Selection();
    [DispIdAttribute("130")]
public abstract virtual bool get_Linkable();
    [DispIdAttribute("130")]
public abstract virtual void set_Linkable(bool pLinkable);
    [DispIdAttribute("131")]
public abstract virtual void Activate();
    [DispIdAttribute("132")]
public abstract virtual void Close(vsSaveChanges SaveChanges);
    [DispIdAttribute("0")]
public abstract virtual string get_Caption();
    [DispIdAttribute("0")]
public abstract virtual void set_Caption(string pbstrTitle);
    [DispIdAttribute("133")]
public abstract virtual void SetSelectionContainer(Object[]& Objects);
    [DispIdAttribute("135")]
public abstract virtual bool get_IsFloating();
    [DispIdAttribute("135")]
public abstract virtual void set_IsFloating(bool Floating);
    [DispIdAttribute("136")]
public abstract virtual bool get_AutoHides();
    [DispIdAttribute("136")]
public abstract virtual void set_AutoHides(bool Hides);
    [DispIdAttribute("138")]
public abstract virtual void SetTabPicture(object Picture);
    [DispIdAttribute("139")]
public abstract virtual ContextAttributes get_ContextAttributes();
    [DispIdAttribute("200")]
public abstract virtual object get_CommandBars();
}
[GuidAttribute("2AAE0C73-D8A3-49C0-8070-630DC0F2BE16")]
public abstract class EnvDTE80.WindowKinds : object {
    public static string vsWindowKindKindStartPage;
    public static string vsWindowKindCommunityWindow;
    public static string vsWindowKindDeviceExplorer;
    public static string vsWindowKindBookmarks;
    public static string vsWindowKindApplicationBrowser;
    public static string vsWindowKindFavorites;
    public static string vsWindowKindErrorList;
    public static string vsWindowKindHelpSearch;
    public static string vsWindowKindHelpIndex;
    public static string vsWindowKindHelpContents;
    public static string vsWindowKindCallBrowser;
    public static string vsWindowKindCodeDefinition;
    public static string vsWindowKindImmediate;
}
[GuidAttribute("31EFB5B1-C655-4ADA-BB52-3ED87FB2A4AE")]
[DefaultMemberAttribute("Item")]
public interface EnvDTE80.Windows2 {
    [DispIdAttribute("201")]
public int Count { get; }
    [DispIdAttribute("301")]
public DTE DTE { get; }
    [DispIdAttribute("302")]
public DTE Parent { get; }
    [DispIdAttribute("0")]
public abstract virtual Window Item(object index);
    [DispIdAttribute("201")]
public abstract virtual int get_Count();
    [DispIdAttribute("-4")]
public abstract virtual IEnumerator GetEnumerator();
    [ObsoleteAttribute("AddIn related extension points are no longer supported in Visual Studio.")]
[DispIdAttribute("300")]
public abstract virtual Window CreateToolWindow(AddIn AddInInst, string ProgID, string Caption, string GuidPosition, Object& DocObj);
    [DispIdAttribute("301")]
public abstract virtual DTE get_DTE();
    [DispIdAttribute("302")]
public abstract virtual DTE get_Parent();
    [DispIdAttribute("303")]
public abstract virtual Window CreateLinkedWindowFrame(Window Window1, Window Window2, vsLinkedWindowType Link);
    [ObsoleteAttribute("AddIn related extension points are no longer supported in Visual Studio.")]
[DispIdAttribute("400")]
public abstract virtual Window CreateToolWindow2(AddIn Addin, string Assembly, string Class, string Caption, string GuidPosition, Object& ControlObject);
}
[ComVisibleAttribute("False")]
[GuidAttribute("84DE07BC-43A2-4275-BCF9-D207D20E49ED")]
[CoClassAttribute("EnvDTE80.WindowVisibilityEventsClass")]
public interface EnvDTE80.WindowVisibilityEvents {
}
[ComVisibleAttribute("False")]
[GuidAttribute("8B7E04AD-B109-4B96-8BA3-2F348813F238")]
[ClassInterfaceAttribute("0")]
[ComSourceInterfacesAttribute("EnvDTE80._dispWindowVisibilityEvents")]
public class EnvDTE80.WindowVisibilityEventsClass : object {
}
[TypeLibTypeAttribute("4176")]
[GuidAttribute("C7B4BCC9-E23E-400C-8821-C85B6B31369E")]
public interface EnvDTE80.WindowVisibilityEventsRoot {
    [DispIdAttribute("1")]
public object WindowVisibilityEvents { get; }
    [TypeLibFuncAttribute("64")]
[DispIdAttribute("1")]
public abstract virtual object get_WindowVisibilityEvents(Window WindowFilter);
}
[GuidAttribute("87DFC8DA-67B4-4954-BB89-6A277A50BAFC")]
public interface EnvDTE90.Debugger3 {
    [DispIdAttribute("100")]
public Breakpoints Breakpoints { get; }
    [DispIdAttribute("101")]
public Languages Languages { get; }
    [DispIdAttribute("102")]
public dbgDebugMode CurrentMode { get; }
    [DispIdAttribute("103")]
public Process CurrentProcess { get; public set; }
    [DispIdAttribute("104")]
public Program CurrentProgram { get; public set; }
    [DispIdAttribute("105")]
public Thread CurrentThread { get; public set; }
    [DispIdAttribute("106")]
public StackFrame CurrentStackFrame { get; public set; }
    [DispIdAttribute("107")]
public bool HexDisplayMode { get; public set; }
    [DispIdAttribute("108")]
public bool HexInputMode { get; public set; }
    [DispIdAttribute("109")]
public dbgEventReason LastBreakReason { get; }
    [DispIdAttribute("110")]
public Breakpoint BreakpointLastHit { get; }
    [DispIdAttribute("111")]
public Breakpoints AllBreakpointsLastHit { get; }
    [DispIdAttribute("112")]
public Processes DebuggedProcesses { get; }
    [DispIdAttribute("113")]
public Processes LocalProcesses { get; }
    [DispIdAttribute("200")]
public DTE DTE { get; }
    [DispIdAttribute("201")]
public DTE Parent { get; }
    [DispIdAttribute("1101")]
public Transports Transports { get; }
    [DispIdAttribute("2100")]
public bool ForceContinue { get; public set; }
    [DispIdAttribute("2101")]
public ExceptionGroups ExceptionGroups { get; }
    [DispIdAttribute("2102")]
public string SymbolPath { get; }
    [DispIdAttribute("2103")]
public string SymbolPathState { get; }
    [DispIdAttribute("2104")]
public string SymbolCachePath { get; }
    [DispIdAttribute("2105")]
public bool OnlyLoadSymbolsManually { get; }
    [DispIdAttribute("1")]
public abstract virtual Expression GetExpression(string ExpressionText, bool UseAutoExpandRules, int Timeout);
    [DispIdAttribute("2")]
public abstract virtual void DetachAll();
    [DispIdAttribute("3")]
public abstract virtual void StepInto(bool WaitForBreakOrEnd);
    [DispIdAttribute("4")]
public abstract virtual void StepOver(bool WaitForBreakOrEnd);
    [DispIdAttribute("5")]
public abstract virtual void StepOut(bool WaitForBreakOrEnd);
    [DispIdAttribute("6")]
public abstract virtual void Go(bool WaitForBreakOrEnd);
    [DispIdAttribute("7")]
public abstract virtual void Break(bool WaitForBreakMode);
    [DispIdAttribute("8")]
public abstract virtual void Stop(bool WaitForDesignMode);
    [DispIdAttribute("9")]
public abstract virtual void SetNextStatement();
    [DispIdAttribute("10")]
public abstract virtual void RunToCursor(bool WaitForBreakOrEnd);
    [DispIdAttribute("11")]
public abstract virtual void ExecuteStatement(string Statement, int Timeout, bool TreatAsExpression);
    [DispIdAttribute("100")]
public abstract virtual Breakpoints get_Breakpoints();
    [DispIdAttribute("101")]
public abstract virtual Languages get_Languages();
    [DispIdAttribute("102")]
public abstract virtual dbgDebugMode get_CurrentMode();
    [DispIdAttribute("103")]
public abstract virtual Process get_CurrentProcess();
    [DispIdAttribute("103")]
public abstract virtual void set_CurrentProcess(Process value);
    [DispIdAttribute("104")]
public abstract virtual Program get_CurrentProgram();
    [DispIdAttribute("104")]
public abstract virtual void set_CurrentProgram(Program value);
    [DispIdAttribute("105")]
public abstract virtual Thread get_CurrentThread();
    [DispIdAttribute("105")]
public abstract virtual void set_CurrentThread(Thread value);
    [DispIdAttribute("106")]
public abstract virtual StackFrame get_CurrentStackFrame();
    [DispIdAttribute("106")]
public abstract virtual void set_CurrentStackFrame(StackFrame value);
    [DispIdAttribute("107")]
public abstract virtual bool get_HexDisplayMode();
    [DispIdAttribute("107")]
public abstract virtual void set_HexDisplayMode(bool value);
    [DispIdAttribute("108")]
public abstract virtual bool get_HexInputMode();
    [DispIdAttribute("108")]
public abstract virtual void set_HexInputMode(bool value);
    [DispIdAttribute("109")]
public abstract virtual dbgEventReason get_LastBreakReason();
    [DispIdAttribute("110")]
public abstract virtual Breakpoint get_BreakpointLastHit();
    [DispIdAttribute("111")]
public abstract virtual Breakpoints get_AllBreakpointsLastHit();
    [DispIdAttribute("112")]
public abstract virtual Processes get_DebuggedProcesses();
    [DispIdAttribute("113")]
public abstract virtual Processes get_LocalProcesses();
    [DispIdAttribute("200")]
public abstract virtual DTE get_DTE();
    [DispIdAttribute("201")]
public abstract virtual DTE get_Parent();
    [DispIdAttribute("300")]
public abstract virtual void TerminateAll();
    [DispIdAttribute("1001")]
public abstract virtual void WriteMinidump(string FileName, dbgMinidumpOption Option);
    [DispIdAttribute("1003")]
public abstract virtual Processes GetProcesses(Transport pTransport, string TransportQualifier);
    [DispIdAttribute("1004")]
public abstract virtual Expression GetExpression2(string ExpressionText, bool UseAutoExpandRules, bool TreatAsStatement, int Timeout);
    [DispIdAttribute("1101")]
public abstract virtual Transports get_Transports();
    [DispIdAttribute("2100")]
public abstract virtual bool get_ForceContinue();
    [DispIdAttribute("2100")]
public abstract virtual void set_ForceContinue(bool value);
    [DispIdAttribute("2101")]
public abstract virtual ExceptionGroups get_ExceptionGroups();
    [DispIdAttribute("2102")]
public abstract virtual string get_SymbolPath();
    [DispIdAttribute("2103")]
public abstract virtual string get_SymbolPathState();
    [DispIdAttribute("2104")]
public abstract virtual string get_SymbolCachePath();
    [DispIdAttribute("2105")]
public abstract virtual bool get_OnlyLoadSymbolsManually();
    [DispIdAttribute("3100")]
public abstract virtual void SetSymbolSettings(string SymbolPath, string SymbolPathState, string SymbolCachePath, bool OnlyLoadSymbolsManually, bool LoadSymbolsNow);
}
public enum EnvDTE90.enum_THREADCATEGORY : Enum {
    public int value__;
    public static enum_THREADCATEGORY THREADCATEGORY_Worker;
    public static enum_THREADCATEGORY THREADCATEGORY_UI;
    public static enum_THREADCATEGORY THREADCATEGORY_Main;
    public static enum_THREADCATEGORY THREADCATEGORY_RPC;
    public static enum_THREADCATEGORY THREADCATEGORY_Unknown;
}
[DefaultMemberAttribute("Item")]
[GuidAttribute("21BDC491-F828-4846-9FD8-75C9148AEA24")]
public interface EnvDTE90.ExceptionGroups {
    [DispIdAttribute("1")]
public DTE DTE { get; }
    [DispIdAttribute("2")]
public Debugger Parent { get; }
    [DispIdAttribute("3")]
public int Count { get; }
    [DispIdAttribute("0")]
public abstract virtual ExceptionSettings Item(object Index);
    [DispIdAttribute("-4")]
public abstract virtual IEnumerator GetEnumerator();
    [DispIdAttribute("1")]
public abstract virtual DTE get_DTE();
    [DispIdAttribute("2")]
public abstract virtual Debugger get_Parent();
    [DispIdAttribute("3")]
public abstract virtual int get_Count();
    [DispIdAttribute("300")]
public abstract virtual void ResetAll();
}
[GuidAttribute("115998BF-A603-4848-B5DE-3B250A13D109")]
public interface EnvDTE90.ExceptionSetting {
    [DispIdAttribute("1")]
public DTE DTE { get; }
    [DispIdAttribute("2")]
public Debugger Parent { get; }
    [DispIdAttribute("3")]
public ExceptionSettings Collection { get; }
    [DispIdAttribute("100")]
public string Name { get; }
    [DispIdAttribute("101")]
public bool BreakWhenThrown { get; }
    [DispIdAttribute("102")]
public bool BreakWhenUserUnhandled { get; }
    [DispIdAttribute("103")]
public bool UserDefined { get; }
    [DispIdAttribute("104")]
public UInt32 Code { get; }
    [DispIdAttribute("1")]
public abstract virtual DTE get_DTE();
    [DispIdAttribute("2")]
public abstract virtual Debugger get_Parent();
    [DispIdAttribute("3")]
public abstract virtual ExceptionSettings get_Collection();
    [DispIdAttribute("100")]
public abstract virtual string get_Name();
    [DispIdAttribute("101")]
public abstract virtual bool get_BreakWhenThrown();
    [DispIdAttribute("102")]
public abstract virtual bool get_BreakWhenUserUnhandled();
    [DispIdAttribute("103")]
public abstract virtual bool get_UserDefined();
    [DispIdAttribute("104")]
public abstract virtual UInt32 get_Code();
}
[DefaultMemberAttribute("Item")]
[GuidAttribute("0E1AB53B-4065-4884-A39F-02E16EB57F7D")]
public interface EnvDTE90.ExceptionSettings {
    [DispIdAttribute("1")]
public DTE DTE { get; }
    [DispIdAttribute("2")]
public Debugger Parent { get; }
    [DispIdAttribute("3")]
public int Count { get; }
    [DispIdAttribute("4")]
public string Name { get; }
    [DispIdAttribute("5")]
public bool SupportsExceptionCodes { get; }
    [DispIdAttribute("0")]
public abstract virtual ExceptionSetting Item(object Index);
    [DispIdAttribute("-4")]
public abstract virtual IEnumerator GetEnumerator();
    [DispIdAttribute("1")]
public abstract virtual DTE get_DTE();
    [DispIdAttribute("2")]
public abstract virtual Debugger get_Parent();
    [DispIdAttribute("3")]
public abstract virtual int get_Count();
    [DispIdAttribute("4")]
public abstract virtual string get_Name();
    [DispIdAttribute("5")]
public abstract virtual bool get_SupportsExceptionCodes();
    [DispIdAttribute("6")]
public abstract virtual ExceptionSetting ItemFromCode(UInt32 Code);
    [DispIdAttribute("200")]
public abstract virtual ExceptionSetting NewException(string Name, UInt32 Code);
    [DispIdAttribute("201")]
public abstract virtual void Remove(object Index);
    [DispIdAttribute("202")]
public abstract virtual void RemoveByCode(UInt32 Code);
    [DispIdAttribute("203")]
public abstract virtual void SetBreakWhenThrown(bool BreakWhenThrown, ExceptionSetting ExceptionSetting);
    [DispIdAttribute("204")]
public abstract virtual void SetBreakWhenUserUnhandled(bool BreakWhenUserUnhandled, ExceptionSetting ExceptionSetting);
}
[GuidAttribute("BAD0A3DD-8109-4684-B806-A5282267BFE4")]
public interface EnvDTE90.HTMLWindow3 {
    [DispIdAttribute("1")]
public vsHTMLViews CurrentView { get; public set; }
    [DispIdAttribute("2")]
public vsHTMLPanes CurrentPane { get; public set; }
    [DispIdAttribute("1")]
public abstract virtual vsHTMLViews get_CurrentView();
    [DispIdAttribute("1")]
public abstract virtual void set_CurrentView(vsHTMLViews value);
    [DispIdAttribute("2")]
public abstract virtual vsHTMLPanes get_CurrentPane();
    [DispIdAttribute("2")]
public abstract virtual void set_CurrentPane(vsHTMLPanes value);
    [DispIdAttribute("3")]
public abstract virtual void WaitForBackgroundProcessingComplete(vsHTMLBackgroundTasks Task);
}
[GuidAttribute("72832EE4-5808-433D-83A7-B8F149A79DB4")]
public interface EnvDTE90.Module {
    [DispIdAttribute("2100")]
public string Name { get; }
    [DispIdAttribute("2101")]
public string Path { get; }
    [DispIdAttribute("2102")]
public bool Optimized { get; }
    [DispIdAttribute("2103")]
public bool UserCode { get; }
    [DispIdAttribute("2104")]
public string SymbolFile { get; }
    [DispIdAttribute("2105")]
public UInt32 Order { get; }
    [DispIdAttribute("2106")]
public string Version { get; }
    [DispIdAttribute("2107")]
public ulong LoadAddress { get; }
    [DispIdAttribute("2108")]
public ulong EndAddress { get; }
    [DispIdAttribute("2109")]
public bool Rebased { get; }
    [DispIdAttribute("2110")]
public DTE DTE { get; }
    [DispIdAttribute("2111")]
public Debugger Parent { get; }
    [DispIdAttribute("2112")]
public Modules Collection { get; }
    [DispIdAttribute("2113")]
public Process Process { get; }
    [DispIdAttribute("2114")]
public bool Is64bit { get; }
    [DispIdAttribute("2100")]
public abstract virtual string get_Name();
    [DispIdAttribute("2101")]
public abstract virtual string get_Path();
    [DispIdAttribute("2102")]
public abstract virtual bool get_Optimized();
    [DispIdAttribute("2103")]
public abstract virtual bool get_UserCode();
    [DispIdAttribute("2104")]
public abstract virtual string get_SymbolFile();
    [DispIdAttribute("2105")]
public abstract virtual UInt32 get_Order();
    [DispIdAttribute("2106")]
public abstract virtual string get_Version();
    [DispIdAttribute("2107")]
public abstract virtual ulong get_LoadAddress();
    [DispIdAttribute("2108")]
public abstract virtual ulong get_EndAddress();
    [DispIdAttribute("2109")]
public abstract virtual bool get_Rebased();
    [DispIdAttribute("2110")]
public abstract virtual DTE get_DTE();
    [DispIdAttribute("2111")]
public abstract virtual Debugger get_Parent();
    [DispIdAttribute("2112")]
public abstract virtual Modules get_Collection();
    [DispIdAttribute("2113")]
public abstract virtual Process get_Process();
    [DispIdAttribute("2114")]
public abstract virtual bool get_Is64bit();
    [DispIdAttribute("3100")]
public abstract virtual void LoadSymbols(string SymbolPath);
}
[GuidAttribute("B0F3B256-D962-4319-B7C0-A52486C16CB9")]
[DefaultMemberAttribute("Item")]
public interface EnvDTE90.Modules {
    [DispIdAttribute("1")]
public DTE DTE { get; }
    [DispIdAttribute("2")]
public Debugger Parent { get; }
    [DispIdAttribute("3")]
public int Count { get; }
    [DispIdAttribute("0")]
public abstract virtual Module Item(object Index);
    [DispIdAttribute("-4")]
public abstract virtual IEnumerator GetEnumerator();
    [DispIdAttribute("1")]
public abstract virtual DTE get_DTE();
    [DispIdAttribute("2")]
public abstract virtual Debugger get_Parent();
    [DispIdAttribute("3")]
public abstract virtual int get_Count();
}
[GuidAttribute("D401C665-4EC7-452B-AA91-985D16772D84")]
[DefaultMemberAttribute("Name")]
public interface EnvDTE90.Process3 {
    [DispIdAttribute("0")]
public string Name { get; }
    [DispIdAttribute("100")]
public int ProcessID { get; }
    [DispIdAttribute("101")]
public Programs Programs { get; }
    [DispIdAttribute("200")]
public DTE DTE { get; }
    [DispIdAttribute("201")]
public Debugger Parent { get; }
    [DispIdAttribute("202")]
public Processes Collection { get; }
    [DispIdAttribute("1100")]
public Transport Transport { get; }
    [DispIdAttribute("1102")]
public string TransportQualifier { get; }
    [DispIdAttribute("1103")]
public Threads Threads { get; }
    [DispIdAttribute("1104")]
public bool IsBeingDebugged { get; }
    [DispIdAttribute("1105")]
public string UserName { get; }
    [DispIdAttribute("2100")]
public Modules Modules { get; }
    [DispIdAttribute("1")]
public abstract virtual void Attach();
    [DispIdAttribute("2")]
public abstract virtual void Detach(bool WaitForBreakOrEnd);
    [DispIdAttribute("3")]
public abstract virtual void Break(bool WaitForBreakMode);
    [DispIdAttribute("4")]
public abstract virtual void Terminate(bool WaitForBreakOrEnd);
    [DispIdAttribute("0")]
public abstract virtual string get_Name();
    [DispIdAttribute("100")]
public abstract virtual int get_ProcessID();
    [DispIdAttribute("101")]
public abstract virtual Programs get_Programs();
    [DispIdAttribute("200")]
public abstract virtual DTE get_DTE();
    [DispIdAttribute("201")]
public abstract virtual Debugger get_Parent();
    [DispIdAttribute("202")]
public abstract virtual Processes get_Collection();
    [DispIdAttribute("1001")]
public abstract virtual void Attach2(object Engines);
    [DispIdAttribute("1100")]
public abstract virtual Transport get_Transport();
    [DispIdAttribute("1102")]
public abstract virtual string get_TransportQualifier();
    [DispIdAttribute("1103")]
public abstract virtual Threads get_Threads();
    [DispIdAttribute("1104")]
public abstract virtual bool get_IsBeingDebugged();
    [DispIdAttribute("1105")]
public abstract virtual string get_UserName();
    [DispIdAttribute("2100")]
public abstract virtual Modules get_Modules();
}
[DefaultMemberAttribute("Item")]
[GuidAttribute("DF23915F-FDA3-4DD5-9CAA-2E1372C2BB16")]
public interface EnvDTE90.Solution3 {
    [DispIdAttribute("10")]
public DTE DTE { get; }
    [DispIdAttribute("11")]
public DTE Parent { get; }
    [DispIdAttribute("12")]
public int Count { get; }
    [DispIdAttribute("13")]
public string FileName { get; }
    [DispIdAttribute("19")]
public Properties Properties { get; }
    [DispIdAttribute("22")]
public bool IsDirty { get; public set; }
    [DispIdAttribute("28")]
public string FullName { get; }
    [DispIdAttribute("29")]
public bool Saved { get; public set; }
    [DispIdAttribute("31")]
public Globals Globals { get; }
    [ObsoleteAttribute("AddIn related extension points are no longer supported in Visual Studio.")]
[DispIdAttribute("32")]
public AddIns AddIns { get; }
    [DispIdAttribute("34")]
public object ExtenderNames { get; }
    [DispIdAttribute("35")]
public string ExtenderCATID { get; }
    [DispIdAttribute("36")]
public bool IsOpen { get; }
    [DispIdAttribute("38")]
public SolutionBuild SolutionBuild { get; }
    [DispIdAttribute("41")]
public Projects Projects { get; }
    [DispIdAttribute("0")]
public abstract virtual Project Item(object index);
    [DispIdAttribute("-4")]
public abstract virtual IEnumerator GetEnumerator();
    [DispIdAttribute("10")]
public abstract virtual DTE get_DTE();
    [DispIdAttribute("11")]
public abstract virtual DTE get_Parent();
    [DispIdAttribute("12")]
public abstract virtual int get_Count();
    [DispIdAttribute("13")]
public abstract virtual string get_FileName();
    [DispIdAttribute("14")]
public abstract virtual void SaveAs(string FileName);
    [DispIdAttribute("15")]
public abstract virtual Project AddFromTemplate(string FileName, string Destination, string ProjectName, bool Exclusive);
    [DispIdAttribute("16")]
public abstract virtual Project AddFromFile(string FileName, bool Exclusive);
    [DispIdAttribute("17")]
public abstract virtual void Open(string FileName);
    [DispIdAttribute("18")]
public abstract virtual void Close(bool SaveFirst);
    [DispIdAttribute("19")]
public abstract virtual Properties get_Properties();
    [DispIdAttribute("22")]
public abstract virtual bool get_IsDirty();
    [DispIdAttribute("22")]
public abstract virtual void set_IsDirty(bool value);
    [DispIdAttribute("25")]
public abstract virtual void Remove(Project proj);
    [DispIdAttribute("26")]
public abstract virtual string get_TemplatePath(string projectType);
    [DispIdAttribute("28")]
public abstract virtual string get_FullName();
    [DispIdAttribute("29")]
public abstract virtual bool get_Saved();
    [DispIdAttribute("29")]
public abstract virtual void set_Saved(bool value);
    [DispIdAttribute("31")]
public abstract virtual Globals get_Globals();
    [DispIdAttribute("32")]
public abstract virtual AddIns get_AddIns();
    [DispIdAttribute("33")]
public abstract virtual object get_Extender(string extenderName);
    [DispIdAttribute("34")]
public abstract virtual object get_ExtenderNames();
    [DispIdAttribute("35")]
public abstract virtual string get_ExtenderCATID();
    [DispIdAttribute("36")]
public abstract virtual bool get_IsOpen();
    [DispIdAttribute("38")]
public abstract virtual SolutionBuild get_SolutionBuild();
    [DispIdAttribute("40")]
public abstract virtual void Create(string Destination, string Name);
    [DispIdAttribute("41")]
public abstract virtual Projects get_Projects();
    [DispIdAttribute("42")]
public abstract virtual ProjectItem FindProjectItem(string FileName);
    [DispIdAttribute("43")]
public abstract virtual string ProjectItemsTemplatePath(string ProjectKind);
    [DispIdAttribute("102")]
public abstract virtual Project AddSolutionFolder(string Name);
    [DispIdAttribute("103")]
public abstract virtual string GetProjectTemplate(string TemplateName, string Language);
    [DispIdAttribute("104")]
public abstract virtual string GetProjectItemTemplate(string TemplateName, string Language);
    [DispIdAttribute("205")]
public abstract virtual Templates GetProjectItemTemplates(string Language, string CustomDataSignature);
}
[DefaultMemberAttribute("ID")]
[GuidAttribute("76A0263C-083C-49F1-B312-9DB360FCC9F1")]
public interface EnvDTE90.Template {
    [DispIdAttribute("0")]
public string ID { get; }
    [DispIdAttribute("10")]
public string Name { get; }
    [DispIdAttribute("20")]
public string Description { get; }
    [DispIdAttribute("30")]
public string FilePath { get; }
    [DispIdAttribute("40")]
public string BaseName { get; }
    [DispIdAttribute("50")]
public string CustomDataSignature { get; }
    [DispIdAttribute("60")]
public string CustomData { get; }
    [DispIdAttribute("0")]
public abstract virtual string get_ID();
    [DispIdAttribute("10")]
public abstract virtual string get_Name();
    [DispIdAttribute("20")]
public abstract virtual string get_Description();
    [DispIdAttribute("30")]
public abstract virtual string get_FilePath();
    [DispIdAttribute("40")]
public abstract virtual string get_BaseName();
    [DispIdAttribute("50")]
public abstract virtual string get_CustomDataSignature();
    [DispIdAttribute("60")]
public abstract virtual string get_CustomData();
}
[DefaultMemberAttribute("Item")]
[GuidAttribute("30C96324-A117-4618-A9A9-0B06EC455121")]
public interface EnvDTE90.Templates {
    [DispIdAttribute("0")]
public Template Item { get; }
    [DispIdAttribute("10")]
public int Count { get; }
    [DispIdAttribute("-4")]
public abstract virtual IEnumerator GetEnumerator();
    [DispIdAttribute("0")]
public abstract virtual Template get_Item(int Index);
    [DispIdAttribute("10")]
public abstract virtual int get_Count();
}
[GuidAttribute("86FD0779-FBBE-41CC-B444-6EE8676F4F2C")]
[DefaultMemberAttribute("Name")]
public interface EnvDTE90.Thread2 {
    [DispIdAttribute("0")]
public string Name { get; }
    [DispIdAttribute("100")]
public int SuspendCount { get; }
    [DispIdAttribute("101")]
public int ID { get; }
    [DispIdAttribute("102")]
public StackFrames StackFrames { get; }
    [DispIdAttribute("103")]
public Program Program { get; }
    [DispIdAttribute("104")]
public bool IsAlive { get; }
    [DispIdAttribute("105")]
public string Priority { get; }
    [DispIdAttribute("106")]
public string Location { get; }
    [DispIdAttribute("107")]
public bool IsFrozen { get; }
    [DispIdAttribute("200")]
public DTE DTE { get; }
    [DispIdAttribute("201")]
public Debugger Parent { get; }
    [DispIdAttribute("202")]
public Threads Collection { get; }
    [DispIdAttribute("2100")]
public bool Flag { get; public set; }
    [DispIdAttribute("2101")]
public string DisplayName { get; public set; }
    [DispIdAttribute("2102")]
public enum_THREADCATEGORY Category { get; }
    [DispIdAttribute("1")]
public abstract virtual void Freeze();
    [DispIdAttribute("2")]
public abstract virtual void Thaw();
    [DispIdAttribute("0")]
public abstract virtual string get_Name();
    [DispIdAttribute("100")]
public abstract virtual int get_SuspendCount();
    [DispIdAttribute("101")]
public abstract virtual int get_ID();
    [DispIdAttribute("102")]
public abstract virtual StackFrames get_StackFrames();
    [DispIdAttribute("103")]
public abstract virtual Program get_Program();
    [DispIdAttribute("104")]
public abstract virtual bool get_IsAlive();
    [DispIdAttribute("105")]
public abstract virtual string get_Priority();
    [DispIdAttribute("106")]
public abstract virtual string get_Location();
    [DispIdAttribute("107")]
public abstract virtual bool get_IsFrozen();
    [DispIdAttribute("200")]
public abstract virtual DTE get_DTE();
    [DispIdAttribute("201")]
public abstract virtual Debugger get_Parent();
    [DispIdAttribute("202")]
public abstract virtual Threads get_Collection();
    [DispIdAttribute("2100")]
public abstract virtual bool get_Flag();
    [DispIdAttribute("2100")]
public abstract virtual void set_Flag(bool value);
    [DispIdAttribute("2101")]
public abstract virtual void set_DisplayName(string value);
    [DispIdAttribute("2101")]
public abstract virtual string get_DisplayName();
    [DispIdAttribute("2102")]
public abstract virtual enum_THREADCATEGORY get_Category();
}
[GuidAttribute("09D8476F-E6BF-46FB-A0A9-61C331B90F06")]
[DefaultMemberAttribute("Name")]
public interface EnvDTE90.ToolBoxTab3 {
    [DispIdAttribute("0")]
public string Name { get; public set; }
    [DispIdAttribute("1")]
public ToolBoxTabs Collection { get; }
    [DispIdAttribute("2")]
public DTE DTE { get; }
    [DispIdAttribute("6")]
public ToolBoxItems ToolBoxItems { get; }
    [DispIdAttribute("8")]
public bool ListView { get; public set; }
    [DispIdAttribute("9")]
public string UniqueID { get; public set; }
    [DispIdAttribute("10")]
public bool Expanded { get; public set; }
    [DispIdAttribute("0")]
public abstract virtual string get_Name();
    [DispIdAttribute("0")]
public abstract virtual void set_Name(string value);
    [DispIdAttribute("1")]
public abstract virtual ToolBoxTabs get_Collection();
    [DispIdAttribute("2")]
public abstract virtual DTE get_DTE();
    [DispIdAttribute("4")]
public abstract virtual void Activate();
    [DispIdAttribute("5")]
public abstract virtual void Delete();
    [DispIdAttribute("6")]
public abstract virtual ToolBoxItems get_ToolBoxItems();
    [DispIdAttribute("8")]
public abstract virtual bool get_ListView();
    [DispIdAttribute("8")]
public abstract virtual void set_ListView(bool value);
    [DispIdAttribute("9")]
public abstract virtual string get_UniqueID();
    [DispIdAttribute("9")]
public abstract virtual void set_UniqueID(string value);
    [DispIdAttribute("10")]
public abstract virtual bool get_Expanded();
    [DispIdAttribute("10")]
public abstract virtual void set_Expanded(bool value);
}
public enum EnvDTE90.vsHTMLBackgroundTasks : Enum {
    public int value__;
    public static vsHTMLBackgroundTasks vsHTMLBackgroundCompilation;
    public static vsHTMLBackgroundTasks vsHTMLBackgroundToolboxPopulation;
}
[GuidAttribute("7F27C244-AFD2-4BBA-8193-DAA837CC03DA")]
public enum EnvDTE90.vsHTMLPanes : Enum {
    public int value__;
    public static vsHTMLPanes vsHTMLPaneSource;
    public static vsHTMLPanes vsHTMLPaneDesign;
    public static vsHTMLPanes vsHTMLPaneSplit;
}
[GuidAttribute("FCDF1B34-0781-43C6-BD46-062CAEA1FB05")]
public enum EnvDTE90.vsHTMLViews : Enum {
    public int value__;
    public static vsHTMLViews vsHTMLViewSource;
    public static vsHTMLViews vsHTMLViewDesign;
}
[GuidAttribute("81C189C5-0EF0-459C-B907-A22F6B7B355C")]
[DefaultMemberAttribute("Name")]
public interface EnvDTE90a.Breakpoint3 {
    [DispIdAttribute("100")]
public dbgBreakpointType Type { get; }
    [DispIdAttribute("0")]
public string Name { get; public set; }
    [DispIdAttribute("101")]
public dbgBreakpointLocationType LocationType { get; }
    [DispIdAttribute("102")]
public string FunctionName { get; }
    [DispIdAttribute("103")]
public int FunctionLineOffset { get; }
    [DispIdAttribute("104")]
public int FunctionColumnOffset { get; }
    [DispIdAttribute("105")]
public string File { get; }
    [DispIdAttribute("106")]
public int FileLine { get; }
    [DispIdAttribute("107")]
public int FileColumn { get; }
    [DispIdAttribute("108")]
public dbgBreakpointConditionType ConditionType { get; }
    [DispIdAttribute("109")]
public string Condition { get; }
    [DispIdAttribute("110")]
public string Language { get; }
    [DispIdAttribute("111")]
public dbgHitCountType HitCountType { get; }
    [DispIdAttribute("112")]
public int HitCountTarget { get; }
    [DispIdAttribute("113")]
public bool Enabled { get; public set; }
    [DispIdAttribute("114")]
public string Tag { get; public set; }
    [DispIdAttribute("115")]
public int CurrentHits { get; }
    [DispIdAttribute("116")]
public Program Program { get; }
    [DispIdAttribute("200")]
public DTE DTE { get; }
    [DispIdAttribute("201")]
public Breakpoint Parent { get; }
    [DispIdAttribute("202")]
public Breakpoints Collection { get; }
    [DispIdAttribute("203")]
public Breakpoints Children { get; }
    [DispIdAttribute("1100")]
public Process2 Process { get; }
    [DispIdAttribute("1102")]
public bool BreakWhenHit { get; public set; }
    [DispIdAttribute("1103")]
public string Message { get; public set; }
    [DispIdAttribute("1105")]
public string Macro { get; public set; }
    [DispIdAttribute("1107")]
public string FilterBy { get; public set; }
    [DispIdAttribute("1108")]
public string Address { get; }
    [DispIdAttribute("1")]
public abstract virtual void Delete();
    [DispIdAttribute("100")]
public abstract virtual dbgBreakpointType get_Type();
    [DispIdAttribute("0")]
public abstract virtual string get_Name();
    [DispIdAttribute("0")]
public abstract virtual void set_Name(string value);
    [DispIdAttribute("101")]
public abstract virtual dbgBreakpointLocationType get_LocationType();
    [DispIdAttribute("102")]
public abstract virtual string get_FunctionName();
    [DispIdAttribute("103")]
public abstract virtual int get_FunctionLineOffset();
    [DispIdAttribute("104")]
public abstract virtual int get_FunctionColumnOffset();
    [DispIdAttribute("105")]
public abstract virtual string get_File();
    [DispIdAttribute("106")]
public abstract virtual int get_FileLine();
    [DispIdAttribute("107")]
public abstract virtual int get_FileColumn();
    [DispIdAttribute("108")]
public abstract virtual dbgBreakpointConditionType get_ConditionType();
    [DispIdAttribute("109")]
public abstract virtual string get_Condition();
    [DispIdAttribute("110")]
public abstract virtual string get_Language();
    [DispIdAttribute("111")]
public abstract virtual dbgHitCountType get_HitCountType();
    [DispIdAttribute("112")]
public abstract virtual int get_HitCountTarget();
    [DispIdAttribute("113")]
public abstract virtual bool get_Enabled();
    [DispIdAttribute("113")]
public abstract virtual void set_Enabled(bool value);
    [DispIdAttribute("114")]
public abstract virtual string get_Tag();
    [DispIdAttribute("114")]
public abstract virtual void set_Tag(string value);
    [DispIdAttribute("115")]
public abstract virtual int get_CurrentHits();
    [DispIdAttribute("116")]
public abstract virtual Program get_Program();
    [DispIdAttribute("200")]
public abstract virtual DTE get_DTE();
    [DispIdAttribute("201")]
public abstract virtual Breakpoint get_Parent();
    [DispIdAttribute("202")]
public abstract virtual Breakpoints get_Collection();
    [DispIdAttribute("203")]
public abstract virtual Breakpoints get_Children();
    [DispIdAttribute("300")]
public abstract virtual void ResetHitCount();
    [DispIdAttribute("1100")]
public abstract virtual Process2 get_Process();
    [DispIdAttribute("1102")]
public abstract virtual bool get_BreakWhenHit();
    [DispIdAttribute("1102")]
public abstract virtual void set_BreakWhenHit(bool value);
    [DispIdAttribute("1103")]
public abstract virtual string get_Message();
    [DispIdAttribute("1103")]
public abstract virtual void set_Message(string value);
    [DispIdAttribute("1105")]
public abstract virtual string get_Macro();
    [DispIdAttribute("1105")]
public abstract virtual void set_Macro(string value);
    [DispIdAttribute("1107")]
public abstract virtual string get_FilterBy();
    [DispIdAttribute("1107")]
public abstract virtual void set_FilterBy(string value);
    [DispIdAttribute("1108")]
public abstract virtual string get_Address();
}
[GuidAttribute("133BAD54-8E8D-451B-9DB0-AF38ED9819CC")]
public interface EnvDTE90a.Debugger4 {
    [DispIdAttribute("100")]
public Breakpoints Breakpoints { get; }
    [DispIdAttribute("101")]
public Languages Languages { get; }
    [DispIdAttribute("102")]
public dbgDebugMode CurrentMode { get; }
    [DispIdAttribute("103")]
public Process CurrentProcess { get; public set; }
    [DispIdAttribute("104")]
public Program CurrentProgram { get; public set; }
    [DispIdAttribute("105")]
public Thread CurrentThread { get; public set; }
    [DispIdAttribute("106")]
public StackFrame CurrentStackFrame { get; public set; }
    [DispIdAttribute("107")]
public bool HexDisplayMode { get; public set; }
    [DispIdAttribute("108")]
public bool HexInputMode { get; public set; }
    [DispIdAttribute("109")]
public dbgEventReason LastBreakReason { get; }
    [DispIdAttribute("110")]
public Breakpoint BreakpointLastHit { get; }
    [DispIdAttribute("111")]
public Breakpoints AllBreakpointsLastHit { get; }
    [DispIdAttribute("112")]
public Processes DebuggedProcesses { get; }
    [DispIdAttribute("113")]
public Processes LocalProcesses { get; }
    [DispIdAttribute("200")]
public DTE DTE { get; }
    [DispIdAttribute("201")]
public DTE Parent { get; }
    [DispIdAttribute("1101")]
public Transports Transports { get; }
    [DispIdAttribute("2100")]
public bool ForceContinue { get; public set; }
    [DispIdAttribute("2101")]
public ExceptionGroups ExceptionGroups { get; }
    [DispIdAttribute("2102")]
public string SymbolPath { get; }
    [DispIdAttribute("2103")]
public string SymbolPathState { get; }
    [DispIdAttribute("2104")]
public string SymbolCachePath { get; }
    [DispIdAttribute("2105")]
public bool OnlyLoadSymbolsManually { get; }
    [DispIdAttribute("1")]
public abstract virtual Expression GetExpression(string ExpressionText, bool UseAutoExpandRules, int Timeout);
    [DispIdAttribute("2")]
public abstract virtual void DetachAll();
    [DispIdAttribute("3")]
public abstract virtual void StepInto(bool WaitForBreakOrEnd);
    [DispIdAttribute("4")]
public abstract virtual void StepOver(bool WaitForBreakOrEnd);
    [DispIdAttribute("5")]
public abstract virtual void StepOut(bool WaitForBreakOrEnd);
    [DispIdAttribute("6")]
public abstract virtual void Go(bool WaitForBreakOrEnd);
    [DispIdAttribute("7")]
public abstract virtual void Break(bool WaitForBreakMode);
    [DispIdAttribute("8")]
public abstract virtual void Stop(bool WaitForDesignMode);
    [DispIdAttribute("9")]
public abstract virtual void SetNextStatement();
    [DispIdAttribute("10")]
public abstract virtual void RunToCursor(bool WaitForBreakOrEnd);
    [DispIdAttribute("11")]
public abstract virtual void ExecuteStatement(string Statement, int Timeout, bool TreatAsExpression);
    [DispIdAttribute("100")]
public abstract virtual Breakpoints get_Breakpoints();
    [DispIdAttribute("101")]
public abstract virtual Languages get_Languages();
    [DispIdAttribute("102")]
public abstract virtual dbgDebugMode get_CurrentMode();
    [DispIdAttribute("103")]
public abstract virtual Process get_CurrentProcess();
    [DispIdAttribute("103")]
public abstract virtual void set_CurrentProcess(Process value);
    [DispIdAttribute("104")]
public abstract virtual Program get_CurrentProgram();
    [DispIdAttribute("104")]
public abstract virtual void set_CurrentProgram(Program value);
    [DispIdAttribute("105")]
public abstract virtual Thread get_CurrentThread();
    [DispIdAttribute("105")]
public abstract virtual void set_CurrentThread(Thread value);
    [DispIdAttribute("106")]
public abstract virtual StackFrame get_CurrentStackFrame();
    [DispIdAttribute("106")]
public abstract virtual void set_CurrentStackFrame(StackFrame value);
    [DispIdAttribute("107")]
public abstract virtual bool get_HexDisplayMode();
    [DispIdAttribute("107")]
public abstract virtual void set_HexDisplayMode(bool value);
    [DispIdAttribute("108")]
public abstract virtual bool get_HexInputMode();
    [DispIdAttribute("108")]
public abstract virtual void set_HexInputMode(bool value);
    [DispIdAttribute("109")]
public abstract virtual dbgEventReason get_LastBreakReason();
    [DispIdAttribute("110")]
public abstract virtual Breakpoint get_BreakpointLastHit();
    [DispIdAttribute("111")]
public abstract virtual Breakpoints get_AllBreakpointsLastHit();
    [DispIdAttribute("112")]
public abstract virtual Processes get_DebuggedProcesses();
    [DispIdAttribute("113")]
public abstract virtual Processes get_LocalProcesses();
    [DispIdAttribute("200")]
public abstract virtual DTE get_DTE();
    [DispIdAttribute("201")]
public abstract virtual DTE get_Parent();
    [DispIdAttribute("300")]
public abstract virtual void TerminateAll();
    [DispIdAttribute("1001")]
public abstract virtual void WriteMinidump(string FileName, dbgMinidumpOption Option);
    [DispIdAttribute("1003")]
public abstract virtual Processes GetProcesses(Transport pTransport, string TransportQualifier);
    [DispIdAttribute("1004")]
public abstract virtual Expression GetExpression2(string ExpressionText, bool UseAutoExpandRules, bool TreatAsStatement, int Timeout);
    [DispIdAttribute("1101")]
public abstract virtual Transports get_Transports();
    [DispIdAttribute("2100")]
public abstract virtual bool get_ForceContinue();
    [DispIdAttribute("2100")]
public abstract virtual void set_ForceContinue(bool value);
    [DispIdAttribute("2101")]
public abstract virtual ExceptionGroups get_ExceptionGroups();
    [DispIdAttribute("2102")]
public abstract virtual string get_SymbolPath();
    [DispIdAttribute("2103")]
public abstract virtual string get_SymbolPathState();
    [DispIdAttribute("2104")]
public abstract virtual string get_SymbolCachePath();
    [DispIdAttribute("2105")]
public abstract virtual bool get_OnlyLoadSymbolsManually();
    [DispIdAttribute("3100")]
public abstract virtual void SetSymbolSettings(string SymbolPath, string SymbolPathState, string SymbolCachePath, bool OnlyLoadSymbolsManually, bool LoadSymbolsNow);
    [DispIdAttribute("3101")]
public abstract virtual Expression GetExpression3(string ExpressionText, StackFrame StackFrame, bool UseAutoExpandRules, bool TreatAsStatement, bool AllowAutoFuncEval, int Timeout);
}
[DefaultMemberAttribute("Name")]
[GuidAttribute("49DB35DD-FDD9-43BA-BD3F-2BAF50F5C45E")]
public interface EnvDTE90a.Process4 {
    [DispIdAttribute("0")]
public string Name { get; }
    [DispIdAttribute("100")]
public int ProcessID { get; }
    [DispIdAttribute("101")]
public Programs Programs { get; }
    [DispIdAttribute("200")]
public DTE DTE { get; }
    [DispIdAttribute("201")]
public Debugger Parent { get; }
    [DispIdAttribute("202")]
public Processes Collection { get; }
    [DispIdAttribute("1100")]
public Transport Transport { get; }
    [DispIdAttribute("1102")]
public string TransportQualifier { get; }
    [DispIdAttribute("1103")]
public Threads Threads { get; }
    [DispIdAttribute("1104")]
public bool IsBeingDebugged { get; }
    [DispIdAttribute("1105")]
public string UserName { get; }
    [DispIdAttribute("2100")]
public Modules Modules { get; }
    [DispIdAttribute("2101")]
public Array EnvironmentVariables { get; }
    [DispIdAttribute("2102")]
public string CommandLine { get; }
    [DispIdAttribute("2103")]
public string CurrentDirectory { get; }
    [DispIdAttribute("1")]
public abstract virtual void Attach();
    [DispIdAttribute("2")]
public abstract virtual void Detach(bool WaitForBreakOrEnd);
    [DispIdAttribute("3")]
public abstract virtual void Break(bool WaitForBreakMode);
    [DispIdAttribute("4")]
public abstract virtual void Terminate(bool WaitForBreakOrEnd);
    [DispIdAttribute("0")]
public abstract virtual string get_Name();
    [DispIdAttribute("100")]
public abstract virtual int get_ProcessID();
    [DispIdAttribute("101")]
public abstract virtual Programs get_Programs();
    [DispIdAttribute("200")]
public abstract virtual DTE get_DTE();
    [DispIdAttribute("201")]
public abstract virtual Debugger get_Parent();
    [DispIdAttribute("202")]
public abstract virtual Processes get_Collection();
    [DispIdAttribute("1001")]
public abstract virtual void Attach2(object Engines);
    [DispIdAttribute("1100")]
public abstract virtual Transport get_Transport();
    [DispIdAttribute("1102")]
public abstract virtual string get_TransportQualifier();
    [DispIdAttribute("1103")]
public abstract virtual Threads get_Threads();
    [DispIdAttribute("1104")]
public abstract virtual bool get_IsBeingDebugged();
    [DispIdAttribute("1105")]
public abstract virtual string get_UserName();
    [DispIdAttribute("2100")]
public abstract virtual Modules get_Modules();
    [DispIdAttribute("2101")]
public abstract virtual Array get_EnvironmentVariables();
    [DispIdAttribute("2102")]
public abstract virtual string get_CommandLine();
    [DispIdAttribute("2103")]
public abstract virtual string get_CurrentDirectory();
}
[DefaultMemberAttribute("FunctionName")]
[GuidAttribute("FD76BAF1-20DF-4659-864F-E8AEB46139FB")]
[TypeLibTypeAttribute("4160")]
public interface EnvDTE90a.StackFrame2 {
    [DispIdAttribute("100")]
public string Language { get; }
    [DispIdAttribute("0")]
public string FunctionName { get; }
    [DispIdAttribute("102")]
public string ReturnType { get; }
    [DispIdAttribute("103")]
public Expressions Locals { get; }
    [DispIdAttribute("104")]
public Expressions Arguments { get; }
    [DispIdAttribute("105")]
public string Module { get; }
    [DispIdAttribute("200")]
public DTE DTE { get; }
    [DispIdAttribute("201")]
public Thread Parent { get; }
    [DispIdAttribute("202")]
public StackFrames Collection { get; }
    [DispIdAttribute("106")]
public UInt32 Depth { get; }
    [DispIdAttribute("107")]
public bool UserCode { get; }
    [DispIdAttribute("108")]
public Expressions Locals2 { get; }
    [DispIdAttribute("109")]
public Expressions Arguments2 { get; }
    [DispIdAttribute("110")]
public UInt32 LineNumber { get; }
    [DispIdAttribute("111")]
public string FileName { get; }
    [DispIdAttribute("100")]
public abstract virtual string get_Language();
    [DispIdAttribute("0")]
public abstract virtual string get_FunctionName();
    [DispIdAttribute("102")]
public abstract virtual string get_ReturnType();
    [DispIdAttribute("103")]
public abstract virtual Expressions get_Locals();
    [DispIdAttribute("104")]
public abstract virtual Expressions get_Arguments();
    [DispIdAttribute("105")]
public abstract virtual string get_Module();
    [DispIdAttribute("200")]
public abstract virtual DTE get_DTE();
    [DispIdAttribute("201")]
public abstract virtual Thread get_Parent();
    [DispIdAttribute("202")]
public abstract virtual StackFrames get_Collection();
    [DispIdAttribute("106")]
public abstract virtual UInt32 get_Depth();
    [DispIdAttribute("107")]
public abstract virtual bool get_UserCode();
    [DispIdAttribute("108")]
public abstract virtual Expressions get_Locals2(bool AllowAutoFuncEval);
    [DispIdAttribute("109")]
public abstract virtual Expressions get_Arguments2(bool AllowAutoFuncEval);
    [DispIdAttribute("110")]
public abstract virtual UInt32 get_LineNumber();
    [DispIdAttribute("111")]
public abstract virtual string get_FileName();
}
[GuidAttribute("289E9AF1-4973-11D1-AE81-00A0C90F26F4")]
public enum Extensibility.ext_ConnectMode : Enum {
    public int value__;
    public static ext_ConnectMode ext_cm_AfterStartup;
    public static ext_ConnectMode ext_cm_Startup;
    public static ext_ConnectMode ext_cm_External;
    public static ext_ConnectMode ext_cm_CommandLine;
    public static ext_ConnectMode ext_cm_Solution;
    public static ext_ConnectMode ext_cm_UISetup;
}
[GuidAttribute("289E9AF2-4973-11D1-AE81-00A0C90F26F4")]
public enum Extensibility.ext_DisconnectMode : Enum {
    public int value__;
    public static ext_DisconnectMode ext_dm_HostShutdown;
    public static ext_DisconnectMode ext_dm_UserClosed;
    public static ext_DisconnectMode ext_dm_UISetupComplete;
    public static ext_DisconnectMode ext_dm_SolutionClosed;
}
[GuidAttribute("B65AD801-ABAF-11D0-BB8B-00A0C90F2744")]
public interface Extensibility.IDTExtensibility2 {
    [DispIdAttribute("1")]
public abstract virtual void OnConnection(object Application, ext_ConnectMode ConnectMode, object AddInInst, Array& custom);
    [DispIdAttribute("2")]
public abstract virtual void OnDisconnection(ext_DisconnectMode RemoveMode, Array& custom);
    [DispIdAttribute("3")]
public abstract virtual void OnAddInsUpdate(Array& custom);
    [DispIdAttribute("4")]
public abstract virtual void OnStartupComplete(Array& custom);
    [DispIdAttribute("5")]
public abstract virtual void OnBeginShutdown(Array& custom);
}
[ExcludeFromIDLAttribute]
internal static class MarshalHelper : object {
    internal static void ReleaseComObject(object o);
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
public enum Microsoft.Internal.VisualStudio.Shell.Interop.__ERRORLISTFILTERSCOPE : Enum {
    public int value__;
    public static __ERRORLISTFILTERSCOPE ELFS_EntireSolution;
    public static __ERRORLISTFILTERSCOPE ELFS_CurrentProject;
    public static __ERRORLISTFILTERSCOPE ELFS_CurrentDocument;
    public static __ERRORLISTFILTERSCOPE ELFS_OpenDocuments;
}
public enum Microsoft.Internal.VisualStudio.Shell.Interop._DelayedReloadAction : Enum {
    public int value__;
    public static _DelayedReloadAction DRA_None;
    public static _DelayedReloadAction DRA_ReloadProject;
    public static _DelayedReloadAction DRA_ForceReloadProject;
    public static _DelayedReloadAction DRA_ReloadSolution;
    public static _DelayedReloadAction DRA_AddProject;
    public static _DelayedReloadAction DRA_RemoveProject;
    public static _DelayedReloadAction DRA_RenameProject;
    public static _DelayedReloadAction DRA_UpdateProjectParent;
}
public class Microsoft.Internal.VisualStudio.Shell.Interop.ColorName : ValueType {
    public Guid Category;
    public string Name;
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("BBE70639-7AD9-4365-AE36-9877AF2F973B")]
public interface Microsoft.Internal.VisualStudio.Shell.Interop.IVsColorEntry {
    [ComAliasNameAttribute("Microsoft.Internal.VisualStudio.Shell.Interop.ColorName")]
public ColorName ColorName { get; }
    [ComAliasNameAttribute("TextManager.BYTE")]
public byte BackgroundType { get; }
    [ComAliasNameAttribute("TextManager.BYTE")]
public byte ForegroundType { get; }
    [ComAliasNameAttribute("VsShell.VS_RGBA")]
public UInt32 Background { get; }
    [ComAliasNameAttribute("VsShell.VS_RGBA")]
public UInt32 Foreground { get; }
    [ComAliasNameAttribute("OLE.UINT")]
public UInt32 BackgroundSource { get; }
    [ComAliasNameAttribute("OLE.UINT")]
public UInt32 ForegroundSource { get; }
    public abstract virtual ColorName get_ColorName();
    public abstract virtual byte get_BackgroundType();
    public abstract virtual byte get_ForegroundType();
    public abstract virtual UInt32 get_Background();
    public abstract virtual UInt32 get_Foreground();
    public abstract virtual UInt32 get_BackgroundSource();
    public abstract virtual UInt32 get_ForegroundSource();
}
[DefaultMemberAttribute("Item")]
[InterfaceTypeAttribute("1")]
[GuidAttribute("92144F7A-61DE-439B-AA66-13BE7CDEC857")]
public interface Microsoft.Internal.VisualStudio.Shell.Interop.IVsColorNames {
    [ComAliasNameAttribute("Microsoft.Internal.VisualStudio.Shell.Interop.ColorName")]
[DispIdAttribute("0")]
public ColorName Item { get; }
    public int Count { get; }
    public abstract virtual ColorName GetNameFromVsColor(int vsSysColor);
    public abstract virtual ColorName get_Item(int index);
    public abstract virtual int get_Count();
    public abstract virtual IEnumerator GetEnumerator();
}
[DefaultMemberAttribute("Item")]
[GuidAttribute("413D8344-C0DB-4949-9DBC-69C12BADB6AC")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.Internal.VisualStudio.Shell.Interop.IVsColorTheme {
    [DispIdAttribute("0")]
public IVsColorEntry Item { get; }
    public Guid ThemeId { get; }
    public string Name { get; }
    public bool IsUserVisible { get; }
    public abstract virtual void Apply();
    public abstract virtual IVsColorEntry get_Item(ColorName Name);
    public abstract virtual Guid get_ThemeId();
    public abstract virtual string get_Name();
    public abstract virtual bool get_IsUserVisible();
}
[DefaultMemberAttribute("Item")]
[GuidAttribute("98192AFE-75B9-4347-82EC-FF312C1995D8")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.Internal.VisualStudio.Shell.Interop.IVsColorThemes {
    [DispIdAttribute("0")]
public IVsColorTheme Item { get; }
    public int Count { get; }
    public abstract virtual IVsColorTheme GetThemeFromId(Guid ThemeId);
    public abstract virtual IVsColorTheme get_Item(int index);
    public abstract virtual int get_Count();
    public abstract virtual IEnumerator GetEnumerator();
}
[GuidAttribute("EAB552CF-7858-4F05-8435-62DB6DF60684")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.Internal.VisualStudio.Shell.Interop.IVsColorThemeService {
    public IVsColorThemes Themes { get; }
    public IVsColorNames ColorNames { get; }
    public IVsColorTheme CurrentTheme { get; }
    public abstract virtual void NotifyExternalThemeChanged();
    public abstract virtual UInt32 GetCurrentVsColorValue(int vsSysColor);
    public abstract virtual UInt32 GetCurrentColorValue(Guid& rguidColorCategory, string pszColorName, UInt32 dwColorType);
    public abstract virtual UInt32 GetCurrentEncodedColor(Guid& rguidColorCategory, string pszColorName, UInt32 dwColorType);
    public abstract virtual IVsColorThemes get_Themes();
    public abstract virtual IVsColorNames get_ColorNames();
    public abstract virtual IVsColorTheme get_CurrentTheme();
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("5C7E7029-A00C-4F57-BE15-6AC5D43E78DC")]
public interface Microsoft.Internal.VisualStudio.Shell.Interop.IVsExecutionContextTracker {
    public abstract virtual void SetContextElement(Guid contextTypeGuid, Guid contextElementGuid);
    public abstract virtual Guid SetAndGetContextElement(Guid contextTypeGuid, Guid contextElementGuid);
    public abstract virtual Guid GetContextElement(Guid contextTypeGuid);
    public abstract virtual void PushContext(UInt32 contextCookie);
    public abstract virtual void PopContext(UInt32 contextCookie);
    public abstract virtual UInt32 GetCurrentContext();
    public abstract virtual void ReleaseContext(UInt32 contextCookie);
    public abstract virtual void PushContextEx(UInt32 contextCookie, bool fDontTrackAsyncWork);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("61A8FB20-45DF-11E5-A151-FEFF819CDC9F")]
public interface Microsoft.Internal.VisualStudio.Shell.Interop.IVsExperimentationService {
    [DispIdAttribute("1610678272")]
public Array AllEnabledCachedFlights { get; }
    public abstract virtual Array get_AllEnabledCachedFlights();
    public abstract virtual void Start();
    public abstract virtual bool IsCachedFlightEnabled(string flightName);
    public abstract virtual IVsTask IsFlightEnabledAsync(string flightName);
    public abstract virtual UInt32 AdviseFlightEvents(IVsFlightEvents flightSink);
    public abstract virtual void UnadviseFlightEvents(UInt32 cookie);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("6F05B225-83BF-40A3-A32A-47FA8443E868")]
public interface Microsoft.Internal.VisualStudio.Shell.Interop.IVsFlightEvents {
    public abstract virtual void OnFlightsChanged();
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("7C6EB6D3-7218-406E-BDE4-5E9D9E306781")]
public interface Microsoft.Internal.VisualStudio.Shell.Interop.IVsInfoBarHostPrivate {
    public int InfoBarCount { get; }
    public abstract virtual void AddInfoBar(IVsUIElement uiElement);
    public abstract virtual void RemoveInfoBar(IVsUIElement uiElement);
    public abstract virtual int get_InfoBarCount();
    public abstract virtual IVsUIElement GetInfoBar(int index);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("20E8B039-A51A-40C6-8F16-2A8BB99E046F")]
public interface Microsoft.Internal.VisualStudio.Shell.Interop.IVsInvokablePrivate {
    public abstract virtual int Invoke();
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("20705D94-A39B-4741-B5E1-041C5985EF61")]
public interface Microsoft.Internal.VisualStudio.Shell.Interop.IVsInvokerPrivate {
    public abstract virtual int Invoke(IVsInvokablePrivate pInvokable);
}
[GuidAttribute("FF8740CE-7879-4E8E-9C06-F887608D5E06")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.Internal.VisualStudio.Shell.Interop.IVsSearchControlPrivate {
    public abstract virtual void SetSearchBoxText(string bstrText);
    public abstract virtual void GetSearchBoxSelection(Int32& piSelectionStart, Int32& piSelectionEnd);
    public abstract virtual void SetSearchBoxSelection(int iSelectionStart, int iSelectionEnd);
    public abstract virtual void ClickSearchButton();
    public abstract virtual void ClickDropdownButton();
    public abstract virtual void SelectMRUItem(UInt32 index);
    public abstract virtual void DeleteMRUItem(UInt32 index);
    public abstract virtual void ApplySearchFilter(UInt32 index);
    public abstract virtual void ClickSearchOption(UInt32 index);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("C94B6208-67C2-41C4-B8FC-98163B309954")]
public interface Microsoft.Internal.VisualStudio.Shell.Interop.IVsSearchControlPrivate2 {
    public abstract virtual void RestartSearch();
    public abstract virtual void SetSelectionDelegated(bool value);
}
[GuidAttribute("D92F25A4-FDB9-44DD-A7F4-0862B517B8EF")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.Internal.VisualStudio.Shell.Interop.IVsSolutionReloadBatch {
    [DispIdAttribute("1610678272")]
public UInt32 BatchId { get; }
    [DispIdAttribute("1610678273")]
public UInt32 LastChangeId { get; }
    [DispIdAttribute("1610678274")]
[ComAliasNameAttribute("Microsoft.Internal.VisualStudio.Shell.Interop.SolutionReloadBatchStage")]
public UInt32 Stage { get; }
    [DispIdAttribute("1610678275")]
public string HandlerId { get; }
    [DispIdAttribute("1610678276")]
public bool HasSolutionReload { get; }
    [DispIdAttribute("1610678277")]
public IVsTask BatchTask { get; }
    [DispIdAttribute("1610678278")]
public bool RequestComplete { get; public set; }
    [DispIdAttribute("1610678280")]
public bool RequestCancel { get; public set; }
    public abstract virtual UInt32 get_BatchId();
    public abstract virtual UInt32 get_LastChangeId();
    public abstract virtual UInt32 get_Stage();
    public abstract virtual string get_HandlerId();
    public abstract virtual bool get_HasSolutionReload();
    public abstract virtual IVsTask get_BatchTask();
    public abstract virtual bool get_RequestComplete();
    public abstract virtual void set_RequestComplete(bool value);
    public abstract virtual bool get_RequestCancel();
    public abstract virtual void set_RequestCancel(bool value);
    public abstract virtual void DisableChangeNotifications();
    public abstract virtual void IsFilesChanged(UInt32 dwFilesToCheck, String[] rgszFullFilePaths, Boolean[] rgIsChanged);
    public abstract virtual void GetProjectsAction(UInt32 dwProjectsToCheck, Guid[] rgGuidProjects, UInt32[] rgReloadAction);
    public abstract virtual bool TryAddSolutionReload();
    public abstract virtual bool TryAddProjectsReload(UInt32 reloadAction, UInt32 dwProjectsCount, Guid[] rgGuidProjects);
    public abstract virtual bool TryAddChangedFiles(UInt32 dwFileCount, String[] rgszFullFilePaths);
}
[GuidAttribute("50EF8E74-4763-4AAA-A61D-BE9FC5D1254D")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.Internal.VisualStudio.Shell.Interop.IVsSolutionReloadBatchHandler {
    [DispIdAttribute("1610678272")]
public string HandlerId { get; }
    public abstract virtual string get_HandlerId();
    public abstract virtual bool CanGiveControl(IVsSolutionReloadBatchHandler pOther);
    public abstract virtual bool CanTakeControl(IVsSolutionReloadBatchHandler pCurrent);
    public abstract virtual bool CanJoin(IVsSolutionReloadBatchHandler pCurrent);
    public abstract virtual bool CanCommitBatch(IVsSolutionReloadBatch pBatch, UInt32 dwElapsedSinceFirstChange, UInt32 dwElapsedSinceLastChange, UInt32& pdwAskAgainTimeout);
    public abstract virtual bool CanCommitBatchUI(IVsSolutionReloadBatch pBatch, UInt32 dwElapsedSinceFirstChange, UInt32 dwElapsedSinceLastChange, UInt32& pdwAskAgainTimeout);
    public abstract virtual void ExecuteReloadUI(IVsSolutionReloadBatch pBatch, UInt32 dwProjectsToReload, Guid[] rgGuidProjects, UInt32[] rgReloadAction);
}
[GuidAttribute("096CC5BF-3552-42EE-8C45-DFE58C5D3845")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.Internal.VisualStudio.Shell.Interop.IVsSolutionReloadManager {
    [DispIdAttribute("1610678272")]
public IVsSolutionReloadBatch CurrentBatch { get; }
    public abstract virtual IVsSolutionReloadBatch get_CurrentBatch();
    public abstract virtual UInt32 Advise(Guid& componentId, object pSink);
    public abstract virtual void Unadvise(UInt32 dwEventCookie);
    public abstract virtual IVsSolutionReloadBatch BeginBatch(IVsSolutionReloadBatchHandler pExecutor);
    public abstract virtual IVsSolutionReloadBatch AddSolutionReload();
    public abstract virtual IVsSolutionReloadBatch AddProjectsReload(UInt32 reloadAction, UInt32 dwProjectsCount, Guid[] rgGuidProjects);
    public abstract virtual IVsSolutionReloadBatch AddChangedFiles(UInt32 dwFileCount, String[] rgszFullFilePaths);
}
[GuidAttribute("8F0E37F9-B1F6-4247-9C91-D801F92710A5")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.Internal.VisualStudio.Shell.Interop.IVsTelemetryActivity {
    public Array AllPropertyNames { get; }
    public Guid CorrelationId { get; }
    public abstract virtual string GetName();
    public abstract virtual object GetProperty(string szPropertyName);
    public abstract virtual void SetProperty(string szPropertyName, object varValue);
    public abstract virtual void SetBoolProperty(string szPropertyName, bool value);
    public abstract virtual void SetDoubleProperty(string szPropertyName, double value);
    public abstract virtual void SetIntProperty(string szPropertyName, int value);
    public abstract virtual void SetLongProperty(string szPropertyName, long value);
    public abstract virtual void SetShortProperty(string szPropertyName, short value);
    public abstract virtual void SetStringProperty(string szPropertyName, string szValue);
    public abstract virtual bool ContainsProperty(string szPropertyName);
    public abstract virtual Array get_AllPropertyNames();
    public abstract virtual void SetOptOutFriendlyFlag(bool bOptOutFriendly);
    public abstract virtual void AddPropertyBag(IVsTelemetryPropertyBag pPropertyBag);
    public abstract virtual void RemovePropertyBag(IVsTelemetryPropertyBag pPropertyBag);
    public abstract virtual void SetPiiProperty(string szPropertyName, object varValue);
    public abstract virtual void SetIntPiiProperty(string szPropertyName, int varValue);
    public abstract virtual void SetLongPiiProperty(string szPropertyName, long varValue);
    public abstract virtual void SetDoublePiiProperty(string szPropertyName, double varValue);
    public abstract virtual void SetStringPiiProperty(string szPropertyName, string varValue);
    public abstract virtual void Start();
    public abstract virtual void End();
    public abstract virtual void EndWithDuration(long eventDuration);
    public abstract virtual Guid get_CorrelationId();
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("6CF1EBD6-822B-4662-A9E8-E2B69F798947")]
public interface Microsoft.Internal.VisualStudio.Shell.Interop.IVsTelemetryAssetService {
    public abstract virtual void RegisterCorrelationForStringAssetId(string szAssetTypeName, string szAssetId, IVsTelemetryEventCorrelation Correlation);
    public abstract virtual void RegisterCorrelationForGuidAssetId(string szAssetTypeName, Guid assetIdGuid, IVsTelemetryEventCorrelation Correlation);
    public abstract virtual void UnregisterCorrelationForStringAssetId(string szAssetTypeName, string szAssetId);
    public abstract virtual void UnregisterCorrelationForGuidAssetId(string szAssetTypeName, Guid assetIdGuid);
    public abstract virtual IVsTelemetryEventCorrelation GetCorrelationForStringAssetId(string szAssetTypeName, string szAssetId);
    public abstract virtual IVsTelemetryEventCorrelation GetCorrelationForGuidAssetId(string szAssetTypeName, Guid assetIdGuid);
}
[GuidAttribute("82CB18EA-5330-4ADB-BD79-EB964F30749D")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.Internal.VisualStudio.Shell.Interop.IVsTelemetryContext {
    public string ContextName { get; }
    public abstract virtual string get_ContextName();
    public abstract virtual object GetProperty(string szPropertyName);
    public abstract virtual void PostProperty(string szPropertyName, object varValue);
    public abstract virtual void PostBoolProperty(string szPropertyName, bool value);
    public abstract virtual void PostDoubleProperty(string szPropertyName, double value);
    public abstract virtual void PostIntProperty(string szPropertyName, int value);
    public abstract virtual void PostLongProperty(string szPropertyName, long value);
    public abstract virtual void PostShortProperty(string szPropertyName, short value);
    public abstract virtual void PostStringProperty(string szPropertyName, string szValue);
    public abstract virtual void SetSharedProperty(string szPropertyName, object varValue);
    public abstract virtual void SetSharedBoolProperty(string szPropertyName, bool value);
    public abstract virtual void SetSharedDoubleProperty(string szPropertyName, double value);
    public abstract virtual void SetSharedIntProperty(string szPropertyName, int value);
    public abstract virtual void SetSharedLongProperty(string szPropertyName, long value);
    public abstract virtual void SetSharedShortProperty(string szPropertyName, short value);
    public abstract virtual void SetSharedStringProperty(string szPropertyName, string szValue);
    public abstract virtual void RemoveSharedProperty(string szPropertyName);
    public abstract virtual void Close();
    public abstract virtual void PostPiiProperty(string szPropertyName, object varValue);
    public abstract virtual void PostIntPiiProperty(string szPropertyName, int varValue);
    public abstract virtual void PostLongPiiProperty(string szPropertyName, long varValue);
    public abstract virtual void PostDoublePiiProperty(string szPropertyName, double varValue);
    public abstract virtual void PostStringPiiProperty(string szPropertyName, string varValue);
    public abstract virtual void SetSharedPiiProperty(string szPropertyName, object varValue);
    public abstract virtual void SetSharedIntPiiProperty(string szPropertyName, int varValue);
    public abstract virtual void SetSharedLongPiiProperty(string szPropertyName, long varValue);
    public abstract virtual void SetSharedDoublePiiProperty(string szPropertyName, double varValue);
    public abstract virtual void SetSharedStringPiiProperty(string szPropertyName, string varValue);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("5DC5F85E-C49B-4CF6-97B7-BDEF7AD0ADE3")]
public interface Microsoft.Internal.VisualStudio.Shell.Interop.IVsTelemetryEvent {
    public Array AllPropertyNames { get; }
    public abstract virtual string GetName();
    public abstract virtual object GetProperty(string szPropertyName);
    public abstract virtual void SetProperty(string szPropertyName, object varValue);
    public abstract virtual void SetBoolProperty(string szPropertyName, bool value);
    public abstract virtual void SetDoubleProperty(string szPropertyName, double value);
    public abstract virtual void SetIntProperty(string szPropertyName, int value);
    public abstract virtual void SetLongProperty(string szPropertyName, long value);
    public abstract virtual void SetShortProperty(string szPropertyName, short value);
    public abstract virtual void SetStringProperty(string szPropertyName, string szValue);
    public abstract virtual bool ContainsProperty(string szPropertyName);
    public abstract virtual Array get_AllPropertyNames();
    public abstract virtual void SetOptOutFriendlyFlag(bool bOptOutFriendly);
    public abstract virtual void AddPropertyBag(IVsTelemetryPropertyBag pPropertyBag);
    public abstract virtual void RemovePropertyBag(IVsTelemetryPropertyBag pPropertyBag);
    public abstract virtual void SetPiiProperty(string szPropertyName, object varValue);
    public abstract virtual void SetIntPiiProperty(string szPropertyName, int varValue);
    public abstract virtual void SetLongPiiProperty(string szPropertyName, long varValue);
    public abstract virtual void SetDoublePiiProperty(string szPropertyName, double varValue);
    public abstract virtual void SetStringPiiProperty(string szPropertyName, string varValue);
}
[GuidAttribute("AADF97A9-18BB-44D3-9EFE-724221BDDA74")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.Internal.VisualStudio.Shell.Interop.IVsTelemetryEvent2 {
    public Array AllPropertyNames { get; }
    public IVsTelemetryEventCorrelation Correlation { get; }
    [ComAliasNameAttribute("Microsoft.Internal.VisualStudio.Shell.Interop.VsTelemetrySeverity")]
public int Severity { get; public set; }
    public abstract virtual string GetName();
    public abstract virtual object GetProperty(string szPropertyName);
    public abstract virtual void SetProperty(string szPropertyName, object varValue);
    public abstract virtual void SetBoolProperty(string szPropertyName, bool value);
    public abstract virtual void SetDoubleProperty(string szPropertyName, double value);
    public abstract virtual void SetIntProperty(string szPropertyName, int value);
    public abstract virtual void SetLongProperty(string szPropertyName, long value);
    public abstract virtual void SetShortProperty(string szPropertyName, short value);
    public abstract virtual void SetStringProperty(string szPropertyName, string szValue);
    public abstract virtual bool ContainsProperty(string szPropertyName);
    public abstract virtual Array get_AllPropertyNames();
    public abstract virtual void SetOptOutFriendlyFlag(bool bOptOutFriendly);
    public abstract virtual void AddPropertyBag(IVsTelemetryPropertyBag pPropertyBag);
    public abstract virtual void RemovePropertyBag(IVsTelemetryPropertyBag pPropertyBag);
    public abstract virtual void SetPiiProperty(string szPropertyName, object varValue);
    public abstract virtual void SetIntPiiProperty(string szPropertyName, int varValue);
    public abstract virtual void SetLongPiiProperty(string szPropertyName, long varValue);
    public abstract virtual void SetDoublePiiProperty(string szPropertyName, double varValue);
    public abstract virtual void SetStringPiiProperty(string szPropertyName, string varValue);
    public abstract virtual void SetMetricProperty(string szPropertyName, double value);
    public abstract virtual void SetSettingProperty(string szPropertyName, object varValue);
    public abstract virtual void SetBoolSettingProperty(string szPropertyName, bool value);
    public abstract virtual void SetIntSettingProperty(string szPropertyName, int varValue);
    public abstract virtual void SetLongSettingProperty(string szPropertyName, long varValue);
    public abstract virtual void SetDoubleSettingProperty(string szPropertyName, double varValue);
    public abstract virtual void SetStringSettingProperty(string szPropertyName, string varValue);
    public abstract virtual IVsTelemetryEventCorrelation get_Correlation();
    public abstract virtual int get_Severity();
    public abstract virtual void set_Severity(int value);
    public abstract virtual void Correlate(IVsTelemetryEventCorrelation Correlation);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("32F404B7-E12B-4F2A-8277-B119F8BD9588")]
public interface Microsoft.Internal.VisualStudio.Shell.Interop.IVsTelemetryEventCorrelation {
    [DispIdAttribute("1610678272")]
public Guid Id { get; }
    [DispIdAttribute("1610678273")]
public int EventType { get; }
    public abstract virtual Guid get_Id();
    public abstract virtual int get_EventType();
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("FC1510D1-1CE5-4EE9-B861-66714C95A242")]
public interface Microsoft.Internal.VisualStudio.Shell.Interop.IVsTelemetryPropertyBag {
    public Array AllPropertyNames { get; }
    public abstract virtual object GetProperty(string szPropertyName);
    public abstract virtual void SetProperty(string szPropertyName, object varValue);
    public abstract virtual void RemoveProperty(string szPropertyName);
    public abstract virtual void SetBoolProperty(string szPropertyName, bool value);
    public abstract virtual void SetDoubleProperty(string szPropertyName, double value);
    public abstract virtual void SetIntProperty(string szPropertyName, int value);
    public abstract virtual void SetLongProperty(string szPropertyName, long value);
    public abstract virtual void SetShortProperty(string szPropertyName, short value);
    public abstract virtual void SetStringProperty(string szPropertyName, string szValue);
    public abstract virtual bool ContainsProperty(string szPropertyName);
    public abstract virtual Array get_AllPropertyNames();
}
[GuidAttribute("E24374E8-238B-4FDA-AC08-AE70C35604D4")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.Internal.VisualStudio.Shell.Interop.IVsTelemetryScope {
    [DispIdAttribute("1610678272")]
public IVsTelemetryEvent2 EndEvent { get; }
    [DispIdAttribute("1610678273")]
public IVsTelemetryEventCorrelation Correlation { get; }
    public abstract virtual IVsTelemetryEvent2 get_EndEvent();
    public abstract virtual IVsTelemetryEventCorrelation get_Correlation();
    public abstract virtual void End(UInt32 result, string szResultSummary);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("5C7E7029-A00C-4F57-BE15-6AC5D43E78CB")]
public interface Microsoft.Internal.VisualStudio.Shell.Interop.IVsTelemetryService {
    public abstract virtual IVsTelemetrySession GetDefaultSession();
    public abstract virtual IVsTelemetryEvent CreateEvent(string szEventName);
    public abstract virtual IVsTelemetryActivity CreateActivity(string szActivityName);
    public abstract virtual IVsTelemetryActivity CreateActivityWithParentCorrelationId(string szActivityName, Guid& parentCorrelationId);
    public abstract virtual IVsTelemetryPropertyBag CreatePropertyBag();
}
[GuidAttribute("F5366C81-FBA0-466A-89CE-BAD636E9661C")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.Internal.VisualStudio.Shell.Interop.IVsTelemetryService2 {
    public abstract virtual IVsTelemetrySession GetDefaultSession();
    public abstract virtual IVsTelemetryEvent CreateEvent(string szEventName);
    public abstract virtual IVsTelemetryActivity CreateActivity(string szActivityName);
    public abstract virtual IVsTelemetryActivity CreateActivityWithParentCorrelationId(string szActivityName, Guid& parentCorrelationId);
    public abstract virtual IVsTelemetryPropertyBag CreatePropertyBag();
    public abstract virtual IVsTelemetryEvent2 CreateOperationEvent(string szEventName, UInt32 result, string szResultSummary);
    public abstract virtual IVsTelemetryEvent2 CreateUserTaskEvent(string szEventName, UInt32 result, string szResultSummary);
    public abstract virtual IVsTelemetryEvent2 CreateAssetEvent(string szEventName, string szAssetId, int assetEventVersion);
    public abstract virtual IVsTelemetryAssetService GetAssetService();
}
[GuidAttribute("B567D0C0-9334-4EFB-811B-F12AEE408A3D")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.Internal.VisualStudio.Shell.Interop.IVsTelemetrySession {
    public abstract virtual string GetSessionId();
    public abstract virtual string SerializeSettings();
    public abstract virtual void PostSimpleEvent(string szEventName);
    public abstract virtual void PostEvent(IVsTelemetryEvent eventObject);
    public abstract virtual void PostProperty(string szPropertyName, object varValue);
    public abstract virtual void PostBoolProperty(string szPropertyName, bool value);
    public abstract virtual void PostDoubleProperty(string szPropertyName, double value);
    public abstract virtual void PostIntProperty(string szPropertyName, int value);
    public abstract virtual void PostLongProperty(string szPropertyName, long value);
    public abstract virtual void PostShortProperty(string szPropertyName, short value);
    public abstract virtual void PostStringProperty(string szPropertyName, string szValue);
    public abstract virtual void SetSharedProperty(string szPropertyName, object varValue);
    public abstract virtual void SetSharedBoolProperty(string szPropertyName, bool value);
    public abstract virtual void SetSharedDoubleProperty(string szPropertyName, double value);
    public abstract virtual void SetSharedIntProperty(string szPropertyName, int value);
    public abstract virtual void SetSharedLongProperty(string szPropertyName, long value);
    public abstract virtual void SetSharedShortProperty(string szPropertyName, short value);
    public abstract virtual void SetSharedStringProperty(string szPropertyName, string szValue);
    public abstract virtual void RemoveSharedProperty(string szPropertyName);
    public abstract virtual IVsTelemetryContext CreateContext(string szContextName);
    public abstract virtual bool IsUserOptedIn();
    public abstract virtual bool IsUserMicrosoftInternal();
    public abstract virtual bool CanCollectPrivateInformation();
    public abstract virtual void SetUserOptedIn(bool IsUserOptedIn);
    public abstract virtual void RegisterPropertyBag(string szPropertyBagName, IVsTelemetryPropertyBag pPropertyBag);
    public abstract virtual IVsTelemetryPropertyBag GetPropertyBag(string szPropertyBagName);
    public abstract virtual void UnregisterPropertyBag(string szPropertyBagName);
    public abstract virtual void PostPiiProperty(string szPropertyName, object varValue);
    public abstract virtual void PostIntPiiProperty(string szPropertyName, int varValue);
    public abstract virtual void PostLongPiiProperty(string szPropertyName, long varValue);
    public abstract virtual void PostDoublePiiProperty(string szPropertyName, double varValue);
    public abstract virtual void PostStringPiiProperty(string szPropertyName, string varValue);
    public abstract virtual void SetSharedPiiProperty(string szPropertyName, object varValue);
    public abstract virtual void SetSharedIntPiiProperty(string szPropertyName, int varValue);
    public abstract virtual void SetSharedLongPiiProperty(string szPropertyName, long varValue);
    public abstract virtual void SetSharedDoublePiiProperty(string szPropertyName, double varValue);
    public abstract virtual void SetSharedStringPiiProperty(string szPropertyName, string varValue);
    public abstract virtual object GetSharedProperty(string szPropertyName);
    public abstract virtual IVsTelemetryContext GetContext(string szContextName);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("A6635ECB-BA4F-4C03-8E2D-FE57C576646F")]
public interface Microsoft.Internal.VisualStudio.Shell.Interop.IVsTelemetrySession2 {
    public abstract virtual string GetSessionId();
    public abstract virtual string SerializeSettings();
    public abstract virtual void PostSimpleEvent(string szEventName);
    public abstract virtual void PostEvent(IVsTelemetryEvent eventObject);
    public abstract virtual void PostProperty(string szPropertyName, object varValue);
    public abstract virtual void PostBoolProperty(string szPropertyName, bool value);
    public abstract virtual void PostDoubleProperty(string szPropertyName, double value);
    public abstract virtual void PostIntProperty(string szPropertyName, int value);
    public abstract virtual void PostLongProperty(string szPropertyName, long value);
    public abstract virtual void PostShortProperty(string szPropertyName, short value);
    public abstract virtual void PostStringProperty(string szPropertyName, string szValue);
    public abstract virtual void SetSharedProperty(string szPropertyName, object varValue);
    public abstract virtual void SetSharedBoolProperty(string szPropertyName, bool value);
    public abstract virtual void SetSharedDoubleProperty(string szPropertyName, double value);
    public abstract virtual void SetSharedIntProperty(string szPropertyName, int value);
    public abstract virtual void SetSharedLongProperty(string szPropertyName, long value);
    public abstract virtual void SetSharedShortProperty(string szPropertyName, short value);
    public abstract virtual void SetSharedStringProperty(string szPropertyName, string szValue);
    public abstract virtual void RemoveSharedProperty(string szPropertyName);
    public abstract virtual IVsTelemetryContext CreateContext(string szContextName);
    public abstract virtual bool IsUserOptedIn();
    public abstract virtual bool IsUserMicrosoftInternal();
    public abstract virtual bool CanCollectPrivateInformation();
    public abstract virtual void SetUserOptedIn(bool IsUserOptedIn);
    public abstract virtual void RegisterPropertyBag(string szPropertyBagName, IVsTelemetryPropertyBag pPropertyBag);
    public abstract virtual IVsTelemetryPropertyBag GetPropertyBag(string szPropertyBagName);
    public abstract virtual void UnregisterPropertyBag(string szPropertyBagName);
    public abstract virtual void PostPiiProperty(string szPropertyName, object varValue);
    public abstract virtual void PostIntPiiProperty(string szPropertyName, int varValue);
    public abstract virtual void PostLongPiiProperty(string szPropertyName, long varValue);
    public abstract virtual void PostDoublePiiProperty(string szPropertyName, double varValue);
    public abstract virtual void PostStringPiiProperty(string szPropertyName, string varValue);
    public abstract virtual void SetSharedPiiProperty(string szPropertyName, object varValue);
    public abstract virtual void SetSharedIntPiiProperty(string szPropertyName, int varValue);
    public abstract virtual void SetSharedLongPiiProperty(string szPropertyName, long varValue);
    public abstract virtual void SetSharedDoublePiiProperty(string szPropertyName, double varValue);
    public abstract virtual void SetSharedStringPiiProperty(string szPropertyName, string varValue);
    public abstract virtual object GetSharedProperty(string szPropertyName);
    public abstract virtual IVsTelemetryContext GetContext(string szContextName);
    public abstract virtual void PostOperation(string szEventName, UInt32 result, string szResultSummary);
    public abstract virtual void PostUserTask(string szEventName, UInt32 result, string szResultSummary);
    public abstract virtual void PostMetricProperty(string szPropertyName, double value);
    public abstract virtual void SetSharedMetricProperty(string szPropertyName, double value);
    public abstract virtual IVsTelemetryScope StartOperation(string szEventName);
    public abstract virtual IVsTelemetryScope StartUserTask(string szEventName);
    public abstract virtual void PostSettingProperty(string szPropertyName, object varValue);
    public abstract virtual void PostBoolSettingProperty(string szPropertyName, bool value);
    public abstract virtual void PostIntSettingProperty(string szPropertyName, int varValue);
    public abstract virtual void PostLongSettingProperty(string szPropertyName, long varValue);
    public abstract virtual void PostDoubleSettingProperty(string szPropertyName, double varValue);
    public abstract virtual void PostStringSettingProperty(string szPropertyName, string varValue);
    public abstract virtual void SetSharedSettingProperty(string szPropertyName, object varValue);
    public abstract virtual void SetSharedBoolSettingProperty(string szPropertyName, bool value);
    public abstract virtual void SetSharedIntSettingProperty(string szPropertyName, int varValue);
    public abstract virtual void SetSharedLongSettingProperty(string szPropertyName, long varValue);
    public abstract virtual void SetSharedDoubleSettingProperty(string szPropertyName, double varValue);
    public abstract virtual void SetSharedStringSettingProperty(string szPropertyName, string varValue);
    public abstract virtual Guid GetUserId();
    public abstract virtual Guid GetMachineId();
}
[GuidAttribute("1406A251-7EBD-49D9-AE68-454F1906E6FF")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.Internal.VisualStudio.Shell.Interop.IVsUIBoundBooleanProperty {
    public bool CanReset { get; }
    public bool CanWrite { get; }
    public string Name { get; }
    public string Type { get; }
    public abstract virtual void ResetValue(object owner);
    public abstract virtual bool get_CanReset();
    public abstract virtual bool get_CanWrite();
    public abstract virtual string get_Name();
    public abstract virtual string get_Type();
    public abstract virtual bool GetValue(object owner);
    public abstract virtual void SetValue(object owner, bool boolVal);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("00705016-E9EF-4CAF-BAB1-8E4484ED7B69")]
public interface Microsoft.Internal.VisualStudio.Shell.Interop.IVsUIBoundDoubleProperty {
    public bool CanReset { get; }
    public bool CanWrite { get; }
    public string Name { get; }
    public string Type { get; }
    public abstract virtual void ResetValue(object owner);
    public abstract virtual bool get_CanReset();
    public abstract virtual bool get_CanWrite();
    public abstract virtual string get_Name();
    public abstract virtual string get_Type();
    public abstract virtual double GetValue(object owner);
    public abstract virtual void SetValue(object owner, double dblVal);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("AE72464D-2866-46C1-B088-21838DF1C1ED")]
public interface Microsoft.Internal.VisualStudio.Shell.Interop.IVsUIBoundDWordProperty {
    public bool CanReset { get; }
    public bool CanWrite { get; }
    public string Name { get; }
    public string Type { get; }
    public abstract virtual void ResetValue(object owner);
    public abstract virtual bool get_CanReset();
    public abstract virtual bool get_CanWrite();
    public abstract virtual string get_Name();
    public abstract virtual string get_Type();
    public abstract virtual UInt32 GetValue(object owner);
    public abstract virtual void SetValue(object owner, UInt32 dwordVal);
}
[GuidAttribute("6D0F82BC-C086-44F0-9AB0-92F67DB1C896")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.Internal.VisualStudio.Shell.Interop.IVsUIBoundGuidProperty {
    public bool CanReset { get; }
    public bool CanWrite { get; }
    public string Name { get; }
    public string Type { get; }
    public abstract virtual void ResetValue(object owner);
    public abstract virtual bool get_CanReset();
    public abstract virtual bool get_CanWrite();
    public abstract virtual string get_Name();
    public abstract virtual string get_Type();
    public abstract virtual Guid GetValue(object owner);
    public abstract virtual void SetValue(object owner, Guid& guidVal);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("E5D6702C-CEC1-4F24-B74E-ABEBCCD65BF0")]
public interface Microsoft.Internal.VisualStudio.Shell.Interop.IVsUIBoundInt32Property {
    public bool CanReset { get; }
    public bool CanWrite { get; }
    public string Name { get; }
    public string Type { get; }
    public abstract virtual void ResetValue(object owner);
    public abstract virtual bool get_CanReset();
    public abstract virtual bool get_CanWrite();
    public abstract virtual string get_Name();
    public abstract virtual string get_Type();
    public abstract virtual int GetValue(object owner);
    public abstract virtual void SetValue(object owner, int intVal);
}
[GuidAttribute("42261AAC-332F-4360-B925-0F532F9944BE")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.Internal.VisualStudio.Shell.Interop.IVsUIBoundPropertyBase {
    public bool CanReset { get; }
    public bool CanWrite { get; }
    public string Name { get; }
    public string Type { get; }
    public abstract virtual void ResetValue(object owner);
    public abstract virtual bool get_CanReset();
    public abstract virtual bool get_CanWrite();
    public abstract virtual string get_Name();
    public abstract virtual string get_Type();
}
[GuidAttribute("2CA8B41C-091C-4D98-AD2E-23D075551E1A")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.Internal.VisualStudio.Shell.Interop.IVsUIBoundQWordProperty {
    public bool CanReset { get; }
    public bool CanWrite { get; }
    public string Name { get; }
    public string Type { get; }
    public abstract virtual void ResetValue(object owner);
    public abstract virtual bool get_CanReset();
    public abstract virtual bool get_CanWrite();
    public abstract virtual string get_Name();
    public abstract virtual string get_Type();
    public abstract virtual ulong GetValue(object owner);
    public abstract virtual void SetValue(object owner, ulong qwordVal);
}
[GuidAttribute("D86E711D-1CA3-4541-87CE-FFC8F604F454")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.Internal.VisualStudio.Shell.Interop.IVsUIBoundStringProperty {
    public bool CanReset { get; }
    public bool CanWrite { get; }
    public string Name { get; }
    public string Type { get; }
    public abstract virtual void ResetValue(object owner);
    public abstract virtual bool get_CanReset();
    public abstract virtual bool get_CanWrite();
    public abstract virtual string get_Name();
    public abstract virtual string get_Type();
    public abstract virtual string GetValue(object owner);
    public abstract virtual void SetValue(object owner, string strVal);
}
[GuidAttribute("DDD2CB35-DC38-46A9-8C9E-F8BC0649CF80")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.Internal.VisualStudio.Shell.Interop.IVsUIDataSourceShape {
    public abstract virtual IVsUIEnumDataSourceProperties EnumProperties();
    public abstract virtual IVsUIBoundPropertyBase GetBoundProperty(string Name);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("7EEF6797-7698-42A9-9157-DD8C90F5854A")]
public interface Microsoft.Internal.VisualStudio.Shell.Interop.IVsUIDataSourceShapeProvider {
    public IVsUIDataSourceShape Shape { get; }
    public abstract virtual IVsUIDataSourceShape get_Shape();
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("F966E080-BA75-4028-A356-1A90482482E1")]
public interface Microsoft.Internal.VisualStudio.Shell.Interop.IVsUIShellPrivate {
    [DispIdAttribute("1610678272")]
public UInt32 TotalModalDuration { get; }
    public abstract virtual UInt32 get_TotalModalDuration();
}
[GuidAttribute("953DC8DE-7F0B-43B9-B5CF-B1FA72E6E93E")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.Internal.VisualStudio.Shell.Interop.IVsUserEngagement {
    public bool ComplexEdit { get; public set; }
    public bool IntellisenseActiveAfterEdit { get; public set; }
    public bool IntellisenseActiveBeforeEdit { get; public set; }
    [ComAliasNameAttribute("Microsoft.Internal.VisualStudio.Shell.Interop.USER_ENGAGEMENT_LEVEL")]
public UInt32 UserEngagementLevel { get; }
    public bool EditorTarget { get; public set; }
    public abstract virtual void ResetState();
    public abstract virtual UInt32 AdviseUserEngagementEvents(IVsUserEngagementEvents pEventSink);
    public abstract virtual void UnadviseUserEngagementEvents(UInt32 dwCookie);
    public abstract virtual bool get_ComplexEdit();
    public abstract virtual void set_ComplexEdit(bool value);
    public abstract virtual bool get_IntellisenseActiveAfterEdit();
    public abstract virtual void set_IntellisenseActiveAfterEdit(bool value);
    public abstract virtual bool get_IntellisenseActiveBeforeEdit();
    public abstract virtual void set_IntellisenseActiveBeforeEdit(bool value);
    public abstract virtual UInt32 get_UserEngagementLevel();
    public abstract virtual bool get_EditorTarget();
    public abstract virtual void set_EditorTarget(bool value);
}
[GuidAttribute("DF41B3ED-EC49-4B9B-BE31-8B59C0891625")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.Internal.VisualStudio.Shell.Interop.IVsUserEngagementEvents {
    public abstract virtual void OnUserAction(UInt32 dwActionTime);
    public abstract virtual void OnUserEngagementLevelChanged(UInt32 userEngagementChangedTo);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("D73DC67C-3E91-4073-9A5E-5D09AA74529B")]
public interface Microsoft.Internal.VisualStudio.Shell.Interop.IVsWindowManager2 {
    public abstract virtual void SaveActiveFrameLayoutEx(UInt32 grfOptions);
    public abstract virtual IntPtr GetDialogOwnerHwnd();
    public abstract virtual void OnFrameAndDocDataInitialized(IVsWindowFrame pWindowFrame);
    public abstract virtual object GetResourceKeyReferenceType(object requestedResource);
}
[GuidAttribute("0D915B59-2ED7-472A-9DE8-9161737EA1C5")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.Internal.VisualStudio.Shell.Interop.SVsColorThemeService {
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("4C2E7029-D0BC-3F57-BE15-6AD5D43A7832")]
public interface Microsoft.Internal.VisualStudio.Shell.Interop.SVsExecutionContextTracker {
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("DFF66CB5-603C-4716-89BD-24BD0E8C172C")]
public interface Microsoft.Internal.VisualStudio.Shell.Interop.SVsExperimentationService {
}
[GuidAttribute("9B164E40-C3A2-4363-9BC5-EB4039DEF653")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.Internal.VisualStudio.Shell.Interop.SVsSettingsPersistenceManager {
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("1D79CED5-BDAD-47EF-B93A-445ED0BC8A99")]
public interface Microsoft.Internal.VisualStudio.Shell.Interop.SVsSolutionReloadManagerService {
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("959069C9-9E93-4FA1-BF16-3F8120D7DB0C")]
public interface Microsoft.Internal.VisualStudio.Shell.Interop.SVsTelemetryService {
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("72FD1033-2341-4249-8113-EF67745D84EA")]
public interface Microsoft.Internal.VisualStudio.Shell.Interop.SVsUIThreadInvokerPrivate {
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("8D9C3D40-98F1-4A94-8DA6-25191470DA86")]
public interface Microsoft.Internal.VisualStudio.Shell.Interop.SVsUserEngagement {
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("45652379-D0E3-4EA0-8B60-F2579AA29C93")]
public interface Microsoft.Internal.VisualStudio.Shell.Interop.SVsWindowManager {
}
[GuidAttribute("7F1EE169-15BE-44BE-B21E-6339FC029807")]
[TypeLibTypeAttribute("4288")]
public interface Microsoft.VisualStudio.CommandBars._CommandBarActiveX {
    [DispIdAttribute("-5000")]
public object accParent { get; }
    [DispIdAttribute("-5001")]
public int accChildCount { get; }
    [DispIdAttribute("-5002")]
public object accChild { get; }
    [DispIdAttribute("-5003")]
public string accName { get; public set; }
    [DispIdAttribute("-5004")]
public string accValue { get; public set; }
    [DispIdAttribute("-5005")]
public string accDescription { get; }
    [DispIdAttribute("-5006")]
public object accRole { get; }
    [DispIdAttribute("-5007")]
public object accState { get; }
    [DispIdAttribute("-5008")]
public string accHelp { get; }
    [DispIdAttribute("-5009")]
public int accHelpTopic { get; }
    [DispIdAttribute("-5010")]
public string accKeyboardShortcut { get; }
    [DispIdAttribute("-5011")]
public object accFocus { get; }
    [DispIdAttribute("-5012")]
public object accSelection { get; }
    [DispIdAttribute("-5013")]
public string accDefaultAction { get; }
    [DispIdAttribute("1610809344")]
public object Application { get; }
    [DispIdAttribute("1610809345")]
public int Creator { get; }
    [DispIdAttribute("1610874880")]
public bool BeginGroup { get; public set; }
    [DispIdAttribute("1610874882")]
public bool BuiltIn { get; }
    [DispIdAttribute("1610874883")]
public string Caption { get; public set; }
    [DispIdAttribute("1610874885")]
public object Control { get; }
    [DispIdAttribute("1610874888")]
public string DescriptionText { get; public set; }
    [DispIdAttribute("1610874890")]
public bool Enabled { get; public set; }
    [DispIdAttribute("1610874893")]
public int Height { get; public set; }
    [DispIdAttribute("1610874895")]
public int HelpContextId { get; public set; }
    [DispIdAttribute("1610874897")]
public string HelpFile { get; public set; }
    [DispIdAttribute("1610874899")]
public int Id { get; }
    [DispIdAttribute("1610874900")]
public int Index { get; }
    [DispIdAttribute("1610874901")]
public int InstanceId { get; }
    [DispIdAttribute("1610874903")]
public int Left { get; }
    [DispIdAttribute("1610874904")]
public MsoControlOLEUsage OLEUsage { get; public set; }
    [DispIdAttribute("1610874906")]
public string OnAction { get; public set; }
    [DispIdAttribute("1610874908")]
public CommandBar Parent { get; }
    [DispIdAttribute("1610874909")]
public string Parameter { get; public set; }
    [DispIdAttribute("1610874911")]
public int Priority { get; public set; }
    [DispIdAttribute("1610874915")]
public string Tag { get; public set; }
    [DispIdAttribute("1610874917")]
public string TooltipText { get; public set; }
    [DispIdAttribute("1610874919")]
public int Top { get; }
    [DispIdAttribute("1610874920")]
public MsoControlType Type { get; }
    [DispIdAttribute("1610874921")]
public bool Visible { get; public set; }
    [DispIdAttribute("1610874923")]
public int Width { get; public set; }
    [DispIdAttribute("1610874925")]
public bool IsPriorityDropped { get; }
    [DispIdAttribute("1610940416")]
public string ControlCLSID { get; public set; }
    [DispIdAttribute("1610940418")]
public object QueryControlInterface { get; }
    [DispIdAttribute("1610940421")]
unknown object InitWith {public set; }
    [DispIdAttribute("-5000")]
[TypeLibFuncAttribute("64")]
public abstract virtual object get_accParent();
    [DispIdAttribute("-5001")]
[TypeLibFuncAttribute("64")]
public abstract virtual int get_accChildCount();
    [DispIdAttribute("-5002")]
[TypeLibFuncAttribute("64")]
public abstract virtual object get_accChild(object varChild);
    [DispIdAttribute("-5003")]
[TypeLibFuncAttribute("64")]
public abstract virtual string get_accName(object varChild);
    [DispIdAttribute("-5004")]
[TypeLibFuncAttribute("64")]
public abstract virtual string get_accValue(object varChild);
    [DispIdAttribute("-5005")]
[TypeLibFuncAttribute("64")]
public abstract virtual string get_accDescription(object varChild);
    [TypeLibFuncAttribute("64")]
[DispIdAttribute("-5006")]
public abstract virtual object get_accRole(object varChild);
    [DispIdAttribute("-5007")]
[TypeLibFuncAttribute("64")]
public abstract virtual object get_accState(object varChild);
    [TypeLibFuncAttribute("64")]
[DispIdAttribute("-5008")]
public abstract virtual string get_accHelp(object varChild);
    [DispIdAttribute("-5009")]
[TypeLibFuncAttribute("64")]
public abstract virtual int get_accHelpTopic(String& pszHelpFile, object varChild);
    [TypeLibFuncAttribute("64")]
[DispIdAttribute("-5010")]
public abstract virtual string get_accKeyboardShortcut(object varChild);
    [DispIdAttribute("-5011")]
[TypeLibFuncAttribute("64")]
public abstract virtual object get_accFocus();
    [TypeLibFuncAttribute("64")]
[DispIdAttribute("-5012")]
public abstract virtual object get_accSelection();
    [TypeLibFuncAttribute("64")]
[DispIdAttribute("-5013")]
public abstract virtual string get_accDefaultAction(object varChild);
    [TypeLibFuncAttribute("64")]
[DispIdAttribute("-5014")]
public abstract virtual void accSelect(int flagsSelect, object varChild);
    [DispIdAttribute("-5015")]
[TypeLibFuncAttribute("64")]
public abstract virtual void accLocation(Int32& pxLeft, Int32& pyTop, Int32& pcxWidth, Int32& pcyHeight, object varChild);
    [TypeLibFuncAttribute("64")]
[DispIdAttribute("-5016")]
public abstract virtual object accNavigate(int navDir, object varStart);
    [TypeLibFuncAttribute("64")]
[DispIdAttribute("-5017")]
public abstract virtual object accHitTest(int xLeft, int yTop);
    [TypeLibFuncAttribute("64")]
[DispIdAttribute("-5018")]
public abstract virtual void accDoDefaultAction(object varChild);
    [TypeLibFuncAttribute("64")]
[DispIdAttribute("-5003")]
public abstract virtual void set_accName(object varChild, string pszName);
    [TypeLibFuncAttribute("64")]
[DispIdAttribute("-5004")]
public abstract virtual void set_accValue(object varChild, string pszValue);
    [DispIdAttribute("1610809344")]
public abstract virtual object get_Application();
    [DispIdAttribute("1610809345")]
public abstract virtual int get_Creator();
    [DispIdAttribute("1610874880")]
public abstract virtual bool get_BeginGroup();
    [DispIdAttribute("1610874880")]
public abstract virtual void set_BeginGroup(bool pvarfBeginGroup);
    [DispIdAttribute("1610874882")]
public abstract virtual bool get_BuiltIn();
    [DispIdAttribute("1610874883")]
public abstract virtual string get_Caption();
    [DispIdAttribute("1610874883")]
public abstract virtual void set_Caption(string pbstrCaption);
    [TypeLibFuncAttribute("64")]
[DispIdAttribute("1610874885")]
public abstract virtual object get_Control();
    [DispIdAttribute("1610874886")]
public abstract virtual CommandBarControl Copy(object Bar, object Before);
    [DispIdAttribute("1610874887")]
public abstract virtual void Delete(object Temporary);
    [DispIdAttribute("1610874888")]
public abstract virtual string get_DescriptionText();
    [DispIdAttribute("1610874888")]
public abstract virtual void set_DescriptionText(string pbstrText);
    [DispIdAttribute("1610874890")]
public abstract virtual bool get_Enabled();
    [DispIdAttribute("1610874890")]
public abstract virtual void set_Enabled(bool pvarfEnabled);
    [DispIdAttribute("1610874892")]
public abstract virtual void Execute();
    [DispIdAttribute("1610874893")]
public abstract virtual int get_Height();
    [DispIdAttribute("1610874893")]
public abstract virtual void set_Height(int pdy);
    [DispIdAttribute("1610874895")]
public abstract virtual int get_HelpContextId();
    [DispIdAttribute("1610874895")]
public abstract virtual void set_HelpContextId(int pid);
    [DispIdAttribute("1610874897")]
public abstract virtual string get_HelpFile();
    [DispIdAttribute("1610874897")]
public abstract virtual void set_HelpFile(string pbstrFilename);
    [DispIdAttribute("1610874899")]
public abstract virtual int get_Id();
    [DispIdAttribute("1610874900")]
public abstract virtual int get_Index();
    [TypeLibFuncAttribute("64")]
[DispIdAttribute("1610874901")]
public abstract virtual int get_InstanceId();
    [DispIdAttribute("1610874902")]
public abstract virtual CommandBarControl Move(object Bar, object Before);
    [DispIdAttribute("1610874903")]
public abstract virtual int get_Left();
    [DispIdAttribute("1610874904")]
public abstract virtual MsoControlOLEUsage get_OLEUsage();
    [DispIdAttribute("1610874904")]
public abstract virtual void set_OLEUsage(MsoControlOLEUsage pcou);
    [DispIdAttribute("1610874906")]
public abstract virtual string get_OnAction();
    [DispIdAttribute("1610874906")]
public abstract virtual void set_OnAction(string pbstrOnAction);
    [DispIdAttribute("1610874908")]
public abstract virtual CommandBar get_Parent();
    [DispIdAttribute("1610874909")]
public abstract virtual string get_Parameter();
    [DispIdAttribute("1610874909")]
public abstract virtual void set_Parameter(string pbstrParam);
    [DispIdAttribute("1610874911")]
public abstract virtual int get_Priority();
    [DispIdAttribute("1610874911")]
public abstract virtual void set_Priority(int pnPri);
    [DispIdAttribute("1610874913")]
public abstract virtual void Reset();
    [DispIdAttribute("1610874914")]
public abstract virtual void SetFocus();
    [DispIdAttribute("1610874915")]
public abstract virtual string get_Tag();
    [DispIdAttribute("1610874915")]
public abstract virtual void set_Tag(string pbstrTag);
    [DispIdAttribute("1610874917")]
public abstract virtual string get_TooltipText();
    [DispIdAttribute("1610874917")]
public abstract virtual void set_TooltipText(string pbstrTooltip);
    [DispIdAttribute("1610874919")]
public abstract virtual int get_Top();
    [DispIdAttribute("1610874920")]
public abstract virtual MsoControlType get_Type();
    [DispIdAttribute("1610874921")]
public abstract virtual bool get_Visible();
    [DispIdAttribute("1610874921")]
public abstract virtual void set_Visible(bool pvarfVisible);
    [DispIdAttribute("1610874923")]
public abstract virtual int get_Width();
    [DispIdAttribute("1610874923")]
public abstract virtual void set_Width(int pdx);
    [DispIdAttribute("1610874925")]
public abstract virtual bool get_IsPriorityDropped();
    [TypeLibFuncAttribute("64")]
[DispIdAttribute("1610874926")]
public abstract virtual void Reserved1();
    [DispIdAttribute("1610874927")]
[TypeLibFuncAttribute("64")]
public abstract virtual void Reserved2();
    [TypeLibFuncAttribute("64")]
[DispIdAttribute("1610874928")]
public abstract virtual void Reserved3();
    [DispIdAttribute("1610874929")]
[TypeLibFuncAttribute("64")]
public abstract virtual void Reserved4();
    [TypeLibFuncAttribute("64")]
[DispIdAttribute("1610874930")]
public abstract virtual void Reserved5();
    [TypeLibFuncAttribute("64")]
[DispIdAttribute("1610874931")]
public abstract virtual void Reserved6();
    [TypeLibFuncAttribute("64")]
[DispIdAttribute("1610874932")]
public abstract virtual void Reserved7();
    [DispIdAttribute("1610940416")]
public abstract virtual string get_ControlCLSID();
    [DispIdAttribute("1610940416")]
public abstract virtual void set_ControlCLSID(string pbstrClsid);
    [DispIdAttribute("1610940418")]
public abstract virtual object get_QueryControlInterface(string bstrIid);
    [DispIdAttribute("1610940419")]
public abstract virtual void SetInnerObjectFactory(object pUnk);
    [DispIdAttribute("1610940420")]
public abstract virtual void EnsureControl();
    [DispIdAttribute("1610940421")]
public abstract virtual void set_InitWith(object A_1);
}
[GuidAttribute("E11C7CE2-8641-4183-9458-309C6A201CDD")]
[TypeLibTypeAttribute("4304")]
public interface Microsoft.VisualStudio.CommandBars._CommandBarButton {
    [DispIdAttribute("-5000")]
public object accParent { get; }
    [DispIdAttribute("-5001")]
public int accChildCount { get; }
    [DispIdAttribute("-5002")]
public object accChild { get; }
    [DispIdAttribute("-5003")]
public string accName { get; public set; }
    [DispIdAttribute("-5004")]
public string accValue { get; public set; }
    [DispIdAttribute("-5005")]
public string accDescription { get; }
    [DispIdAttribute("-5006")]
public object accRole { get; }
    [DispIdAttribute("-5007")]
public object accState { get; }
    [DispIdAttribute("-5008")]
public string accHelp { get; }
    [DispIdAttribute("-5009")]
public int accHelpTopic { get; }
    [DispIdAttribute("-5010")]
public string accKeyboardShortcut { get; }
    [DispIdAttribute("-5011")]
public object accFocus { get; }
    [DispIdAttribute("-5012")]
public object accSelection { get; }
    [DispIdAttribute("-5013")]
public string accDefaultAction { get; }
    [DispIdAttribute("1610809344")]
public object Application { get; }
    [DispIdAttribute("1610809345")]
public int Creator { get; }
    [DispIdAttribute("1610874880")]
public bool BeginGroup { get; public set; }
    [DispIdAttribute("1610874882")]
public bool BuiltIn { get; }
    [DispIdAttribute("1610874883")]
public string Caption { get; public set; }
    [DispIdAttribute("1610874885")]
public object Control { get; }
    [DispIdAttribute("1610874888")]
public string DescriptionText { get; public set; }
    [DispIdAttribute("1610874890")]
public bool Enabled { get; public set; }
    [DispIdAttribute("1610874893")]
public int Height { get; public set; }
    [DispIdAttribute("1610874895")]
public int HelpContextId { get; public set; }
    [DispIdAttribute("1610874897")]
public string HelpFile { get; public set; }
    [DispIdAttribute("1610874899")]
public int Id { get; }
    [DispIdAttribute("1610874900")]
public int Index { get; }
    [DispIdAttribute("1610874901")]
public int InstanceId { get; }
    [DispIdAttribute("1610874903")]
public int Left { get; }
    [DispIdAttribute("1610874904")]
public MsoControlOLEUsage OLEUsage { get; public set; }
    [DispIdAttribute("1610874906")]
public string OnAction { get; public set; }
    [DispIdAttribute("1610874908")]
public CommandBar Parent { get; }
    [DispIdAttribute("1610874909")]
public string Parameter { get; public set; }
    [DispIdAttribute("1610874911")]
public int Priority { get; public set; }
    [DispIdAttribute("1610874915")]
public string Tag { get; public set; }
    [DispIdAttribute("1610874917")]
public string TooltipText { get; public set; }
    [DispIdAttribute("1610874919")]
public int Top { get; }
    [DispIdAttribute("1610874920")]
public MsoControlType Type { get; }
    [DispIdAttribute("1610874921")]
public bool Visible { get; public set; }
    [DispIdAttribute("1610874923")]
public int Width { get; public set; }
    [DispIdAttribute("1610874925")]
public bool IsPriorityDropped { get; }
    [DispIdAttribute("1610940416")]
public bool BuiltInFace { get; public set; }
    [DispIdAttribute("1610940419")]
public int FaceId { get; public set; }
    [DispIdAttribute("1610940422")]
public string ShortcutText { get; public set; }
    [DispIdAttribute("1610940424")]
public MsoButtonState State { get; public set; }
    [DispIdAttribute("1610940426")]
public MsoButtonStyle Style { get; public set; }
    [DispIdAttribute("1610940428")]
public MsoCommandBarButtonHyperlinkType HyperlinkType { get; public set; }
    [DispIdAttribute("1610940430")]
public StdPicture Picture { get; public set; }
    [DispIdAttribute("1610940432")]
public StdPicture Mask { get; public set; }
    [TypeLibFuncAttribute("64")]
[DispIdAttribute("-5000")]
public abstract virtual object get_accParent();
    [TypeLibFuncAttribute("64")]
[DispIdAttribute("-5001")]
public abstract virtual int get_accChildCount();
    [DispIdAttribute("-5002")]
[TypeLibFuncAttribute("64")]
public abstract virtual object get_accChild(object varChild);
    [TypeLibFuncAttribute("64")]
[DispIdAttribute("-5003")]
public abstract virtual string get_accName(object varChild);
    [TypeLibFuncAttribute("64")]
[DispIdAttribute("-5004")]
public abstract virtual string get_accValue(object varChild);
    [DispIdAttribute("-5005")]
[TypeLibFuncAttribute("64")]
public abstract virtual string get_accDescription(object varChild);
    [DispIdAttribute("-5006")]
[TypeLibFuncAttribute("64")]
public abstract virtual object get_accRole(object varChild);
    [TypeLibFuncAttribute("64")]
[DispIdAttribute("-5007")]
public abstract virtual object get_accState(object varChild);
    [DispIdAttribute("-5008")]
[TypeLibFuncAttribute("64")]
public abstract virtual string get_accHelp(object varChild);
    [TypeLibFuncAttribute("64")]
[DispIdAttribute("-5009")]
public abstract virtual int get_accHelpTopic(String& pszHelpFile, object varChild);
    [DispIdAttribute("-5010")]
[TypeLibFuncAttribute("64")]
public abstract virtual string get_accKeyboardShortcut(object varChild);
    [DispIdAttribute("-5011")]
[TypeLibFuncAttribute("64")]
public abstract virtual object get_accFocus();
    [DispIdAttribute("-5012")]
[TypeLibFuncAttribute("64")]
public abstract virtual object get_accSelection();
    [DispIdAttribute("-5013")]
[TypeLibFuncAttribute("64")]
public abstract virtual string get_accDefaultAction(object varChild);
    [DispIdAttribute("-5014")]
[TypeLibFuncAttribute("64")]
public abstract virtual void accSelect(int flagsSelect, object varChild);
    [TypeLibFuncAttribute("64")]
[DispIdAttribute("-5015")]
public abstract virtual void accLocation(Int32& pxLeft, Int32& pyTop, Int32& pcxWidth, Int32& pcyHeight, object varChild);
    [DispIdAttribute("-5016")]
[TypeLibFuncAttribute("64")]
public abstract virtual object accNavigate(int navDir, object varStart);
    [TypeLibFuncAttribute("64")]
[DispIdAttribute("-5017")]
public abstract virtual object accHitTest(int xLeft, int yTop);
    [TypeLibFuncAttribute("64")]
[DispIdAttribute("-5018")]
public abstract virtual void accDoDefaultAction(object varChild);
    [TypeLibFuncAttribute("64")]
[DispIdAttribute("-5003")]
public abstract virtual void set_accName(object varChild, string pszName);
    [DispIdAttribute("-5004")]
[TypeLibFuncAttribute("64")]
public abstract virtual void set_accValue(object varChild, string pszValue);
    [DispIdAttribute("1610809344")]
public abstract virtual object get_Application();
    [DispIdAttribute("1610809345")]
public abstract virtual int get_Creator();
    [DispIdAttribute("1610874880")]
public abstract virtual bool get_BeginGroup();
    [DispIdAttribute("1610874880")]
public abstract virtual void set_BeginGroup(bool pvarfBeginGroup);
    [DispIdAttribute("1610874882")]
public abstract virtual bool get_BuiltIn();
    [DispIdAttribute("1610874883")]
public abstract virtual string get_Caption();
    [DispIdAttribute("1610874883")]
public abstract virtual void set_Caption(string pbstrCaption);
    [DispIdAttribute("1610874885")]
[TypeLibFuncAttribute("64")]
public abstract virtual object get_Control();
    [DispIdAttribute("1610874886")]
public abstract virtual CommandBarControl Copy(object Bar, object Before);
    [DispIdAttribute("1610874887")]
public abstract virtual void Delete(object Temporary);
    [DispIdAttribute("1610874888")]
public abstract virtual string get_DescriptionText();
    [DispIdAttribute("1610874888")]
public abstract virtual void set_DescriptionText(string pbstrText);
    [DispIdAttribute("1610874890")]
public abstract virtual bool get_Enabled();
    [DispIdAttribute("1610874890")]
public abstract virtual void set_Enabled(bool pvarfEnabled);
    [DispIdAttribute("1610874892")]
public abstract virtual void Execute();
    [DispIdAttribute("1610874893")]
public abstract virtual int get_Height();
    [DispIdAttribute("1610874893")]
public abstract virtual void set_Height(int pdy);
    [DispIdAttribute("1610874895")]
public abstract virtual int get_HelpContextId();
    [DispIdAttribute("1610874895")]
public abstract virtual void set_HelpContextId(int pid);
    [DispIdAttribute("1610874897")]
public abstract virtual string get_HelpFile();
    [DispIdAttribute("1610874897")]
public abstract virtual void set_HelpFile(string pbstrFilename);
    [DispIdAttribute("1610874899")]
public abstract virtual int get_Id();
    [DispIdAttribute("1610874900")]
public abstract virtual int get_Index();
    [DispIdAttribute("1610874901")]
[TypeLibFuncAttribute("64")]
public abstract virtual int get_InstanceId();
    [DispIdAttribute("1610874902")]
public abstract virtual CommandBarControl Move(object Bar, object Before);
    [DispIdAttribute("1610874903")]
public abstract virtual int get_Left();
    [DispIdAttribute("1610874904")]
public abstract virtual MsoControlOLEUsage get_OLEUsage();
    [DispIdAttribute("1610874904")]
public abstract virtual void set_OLEUsage(MsoControlOLEUsage pcou);
    [DispIdAttribute("1610874906")]
public abstract virtual string get_OnAction();
    [DispIdAttribute("1610874906")]
public abstract virtual void set_OnAction(string pbstrOnAction);
    [DispIdAttribute("1610874908")]
public abstract virtual CommandBar get_Parent();
    [DispIdAttribute("1610874909")]
public abstract virtual string get_Parameter();
    [DispIdAttribute("1610874909")]
public abstract virtual void set_Parameter(string pbstrParam);
    [DispIdAttribute("1610874911")]
public abstract virtual int get_Priority();
    [DispIdAttribute("1610874911")]
public abstract virtual void set_Priority(int pnPri);
    [DispIdAttribute("1610874913")]
public abstract virtual void Reset();
    [DispIdAttribute("1610874914")]
public abstract virtual void SetFocus();
    [DispIdAttribute("1610874915")]
public abstract virtual string get_Tag();
    [DispIdAttribute("1610874915")]
public abstract virtual void set_Tag(string pbstrTag);
    [DispIdAttribute("1610874917")]
public abstract virtual string get_TooltipText();
    [DispIdAttribute("1610874917")]
public abstract virtual void set_TooltipText(string pbstrTooltip);
    [DispIdAttribute("1610874919")]
public abstract virtual int get_Top();
    [DispIdAttribute("1610874920")]
public abstract virtual MsoControlType get_Type();
    [DispIdAttribute("1610874921")]
public abstract virtual bool get_Visible();
    [DispIdAttribute("1610874921")]
public abstract virtual void set_Visible(bool pvarfVisible);
    [DispIdAttribute("1610874923")]
public abstract virtual int get_Width();
    [DispIdAttribute("1610874923")]
public abstract virtual void set_Width(int pdx);
    [DispIdAttribute("1610874925")]
public abstract virtual bool get_IsPriorityDropped();
    [TypeLibFuncAttribute("64")]
[DispIdAttribute("1610874926")]
public abstract virtual void Reserved1();
    [DispIdAttribute("1610874927")]
[TypeLibFuncAttribute("64")]
public abstract virtual void Reserved2();
    [DispIdAttribute("1610874928")]
[TypeLibFuncAttribute("64")]
public abstract virtual void Reserved3();
    [TypeLibFuncAttribute("64")]
[DispIdAttribute("1610874929")]
public abstract virtual void Reserved4();
    [TypeLibFuncAttribute("64")]
[DispIdAttribute("1610874930")]
public abstract virtual void Reserved5();
    [DispIdAttribute("1610874931")]
[TypeLibFuncAttribute("64")]
public abstract virtual void Reserved6();
    [DispIdAttribute("1610874932")]
[TypeLibFuncAttribute("64")]
public abstract virtual void Reserved7();
    [DispIdAttribute("1610940416")]
public abstract virtual bool get_BuiltInFace();
    [DispIdAttribute("1610940416")]
public abstract virtual void set_BuiltInFace(bool pvarfBuiltIn);
    [DispIdAttribute("1610940418")]
public abstract virtual void CopyFace();
    [DispIdAttribute("1610940419")]
public abstract virtual int get_FaceId();
    [DispIdAttribute("1610940419")]
public abstract virtual void set_FaceId(int pid);
    [DispIdAttribute("1610940421")]
public abstract virtual void PasteFace();
    [DispIdAttribute("1610940422")]
public abstract virtual string get_ShortcutText();
    [DispIdAttribute("1610940422")]
public abstract virtual void set_ShortcutText(string pbstrText);
    [DispIdAttribute("1610940424")]
public abstract virtual MsoButtonState get_State();
    [DispIdAttribute("1610940424")]
public abstract virtual void set_State(MsoButtonState pstate);
    [DispIdAttribute("1610940426")]
public abstract virtual MsoButtonStyle get_Style();
    [DispIdAttribute("1610940426")]
public abstract virtual void set_Style(MsoButtonStyle pstyle);
    [DispIdAttribute("1610940428")]
public abstract virtual MsoCommandBarButtonHyperlinkType get_HyperlinkType();
    [DispIdAttribute("1610940428")]
public abstract virtual void set_HyperlinkType(MsoCommandBarButtonHyperlinkType phlType);
    [DispIdAttribute("1610940430")]
public abstract virtual StdPicture get_Picture();
    [DispIdAttribute("1610940430")]
public abstract virtual void set_Picture(StdPicture ppdispPicture);
    [DispIdAttribute("1610940432")]
public abstract virtual StdPicture get_Mask();
    [DispIdAttribute("1610940432")]
public abstract virtual void set_Mask(StdPicture ppipictdispMask);
}
[InterfaceTypeAttribute("2")]
[GuidAttribute("5B6BB734-FC7D-4372-A67D-0D7A212A98F7")]
public interface Microsoft.VisualStudio.CommandBars._CommandBarButtonEvents {
    [DispIdAttribute("1")]
public abstract virtual void Click(CommandBarButton Ctrl, Boolean& CancelDefault);
}
[ComVisibleAttribute("False")]
public class Microsoft.VisualStudio.CommandBars._CommandBarButtonEvents_ClickEventHandler : MulticastDelegate {
    public _CommandBarButtonEvents_ClickEventHandler(object object, IntPtr method);
    public virtual void Invoke(CommandBarButton Ctrl, Boolean& CancelDefault);
    public virtual IAsyncResult BeginInvoke(CommandBarButton Ctrl, Boolean& CancelDefault, AsyncCallback callback, object object);
    public virtual void EndInvoke(Boolean& CancelDefault, IAsyncResult result);
}
[ComVisibleAttribute("False")]
[ComEventInterfaceAttribute("Microsoft.VisualStudio.CommandBars._CommandBarButtonEvents", "Microsoft.VisualStudio.CommandBars._CommandBarButtonEvents_EventProvider")]
public interface Microsoft.VisualStudio.CommandBars._CommandBarButtonEvents_Event {
    [CompilerGeneratedAttribute]
public abstract virtual void add_Click(_CommandBarButtonEvents_ClickEventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_Click(_CommandBarButtonEvents_ClickEventHandler value);
}
internal class Microsoft.VisualStudio.CommandBars._CommandBarButtonEvents_EventProvider : object {
    private IConnectionPointContainer m_ConnectionPointContainer;
    private ArrayList m_aEventSinkHelpers;
    private IConnectionPoint m_ConnectionPoint;
    public _CommandBarButtonEvents_EventProvider(object A_1);
    private void Init();
    public sealed virtual void add_Click(_CommandBarButtonEvents_ClickEventHandler value);
    public sealed virtual void remove_Click(_CommandBarButtonEvents_ClickEventHandler value);
    private void AddClick(_CommandBarButtonEvents_ClickEventHandler A_1);
    private void RemoveClick(_CommandBarButtonEvents_ClickEventHandler A_1);
    protected virtual override void Finalize();
    public sealed virtual void Dispose();
    private void Dispose(bool disposing);
}
[ClassInterfaceAttribute("0")]
public class Microsoft.VisualStudio.CommandBars._CommandBarButtonEvents_SinkHelper : object {
    public _CommandBarButtonEvents_ClickEventHandler m_ClickDelegate;
    public int m_dwCookie;
    public sealed virtual void Click(CommandBarButton A_1, Boolean& A_2);
}
[GuidAttribute("B9223DAC-9C92-4916-9396-6E7673A93724")]
[TypeLibTypeAttribute("4288")]
public interface Microsoft.VisualStudio.CommandBars._CommandBarComboBox {
    [DispIdAttribute("-5000")]
public object accParent { get; }
    [DispIdAttribute("-5001")]
public int accChildCount { get; }
    [DispIdAttribute("-5002")]
public object accChild { get; }
    [DispIdAttribute("-5003")]
public string accName { get; public set; }
    [DispIdAttribute("-5004")]
public string accValue { get; public set; }
    [DispIdAttribute("-5005")]
public string accDescription { get; }
    [DispIdAttribute("-5006")]
public object accRole { get; }
    [DispIdAttribute("-5007")]
public object accState { get; }
    [DispIdAttribute("-5008")]
public string accHelp { get; }
    [DispIdAttribute("-5009")]
public int accHelpTopic { get; }
    [DispIdAttribute("-5010")]
public string accKeyboardShortcut { get; }
    [DispIdAttribute("-5011")]
public object accFocus { get; }
    [DispIdAttribute("-5012")]
public object accSelection { get; }
    [DispIdAttribute("-5013")]
public string accDefaultAction { get; }
    [DispIdAttribute("1610809344")]
public object Application { get; }
    [DispIdAttribute("1610809345")]
public int Creator { get; }
    [DispIdAttribute("1610874880")]
public bool BeginGroup { get; public set; }
    [DispIdAttribute("1610874882")]
public bool BuiltIn { get; }
    [DispIdAttribute("1610874883")]
public string Caption { get; public set; }
    [DispIdAttribute("1610874885")]
public object Control { get; }
    [DispIdAttribute("1610874888")]
public string DescriptionText { get; public set; }
    [DispIdAttribute("1610874890")]
public bool Enabled { get; public set; }
    [DispIdAttribute("1610874893")]
public int Height { get; public set; }
    [DispIdAttribute("1610874895")]
public int HelpContextId { get; public set; }
    [DispIdAttribute("1610874897")]
public string HelpFile { get; public set; }
    [DispIdAttribute("1610874899")]
public int Id { get; }
    [DispIdAttribute("1610874900")]
public int Index { get; }
    [DispIdAttribute("1610874901")]
public int InstanceId { get; }
    [DispIdAttribute("1610874903")]
public int Left { get; }
    [DispIdAttribute("1610874904")]
public MsoControlOLEUsage OLEUsage { get; public set; }
    [DispIdAttribute("1610874906")]
public string OnAction { get; public set; }
    [DispIdAttribute("1610874908")]
public CommandBar Parent { get; }
    [DispIdAttribute("1610874909")]
public string Parameter { get; public set; }
    [DispIdAttribute("1610874911")]
public int Priority { get; public set; }
    [DispIdAttribute("1610874915")]
public string Tag { get; public set; }
    [DispIdAttribute("1610874917")]
public string TooltipText { get; public set; }
    [DispIdAttribute("1610874919")]
public int Top { get; }
    [DispIdAttribute("1610874920")]
public MsoControlType Type { get; }
    [DispIdAttribute("1610874921")]
public bool Visible { get; public set; }
    [DispIdAttribute("1610874923")]
public int Width { get; public set; }
    [DispIdAttribute("1610874925")]
public bool IsPriorityDropped { get; }
    [DispIdAttribute("1610940418")]
public int DropDownLines { get; public set; }
    [DispIdAttribute("1610940420")]
public int DropDownWidth { get; public set; }
    [DispIdAttribute("1610940422")]
public string List { get; public set; }
    [DispIdAttribute("1610940424")]
public int ListCount { get; }
    [DispIdAttribute("1610940425")]
public int ListHeaderCount { get; public set; }
    [DispIdAttribute("1610940427")]
public int ListIndex { get; public set; }
    [DispIdAttribute("1610940430")]
public MsoComboStyle Style { get; public set; }
    [DispIdAttribute("1610940432")]
public string Text { get; public set; }
    [TypeLibFuncAttribute("64")]
[DispIdAttribute("-5000")]
public abstract virtual object get_accParent();
    [DispIdAttribute("-5001")]
[TypeLibFuncAttribute("64")]
public abstract virtual int get_accChildCount();
    [DispIdAttribute("-5002")]
[TypeLibFuncAttribute("64")]
public abstract virtual object get_accChild(object varChild);
    [DispIdAttribute("-5003")]
[TypeLibFuncAttribute("64")]
public abstract virtual string get_accName(object varChild);
    [DispIdAttribute("-5004")]
[TypeLibFuncAttribute("64")]
public abstract virtual string get_accValue(object varChild);
    [TypeLibFuncAttribute("64")]
[DispIdAttribute("-5005")]
public abstract virtual string get_accDescription(object varChild);
    [DispIdAttribute("-5006")]
[TypeLibFuncAttribute("64")]
public abstract virtual object get_accRole(object varChild);
    [TypeLibFuncAttribute("64")]
[DispIdAttribute("-5007")]
public abstract virtual object get_accState(object varChild);
    [DispIdAttribute("-5008")]
[TypeLibFuncAttribute("64")]
public abstract virtual string get_accHelp(object varChild);
    [DispIdAttribute("-5009")]
[TypeLibFuncAttribute("64")]
public abstract virtual int get_accHelpTopic(String& pszHelpFile, object varChild);
    [TypeLibFuncAttribute("64")]
[DispIdAttribute("-5010")]
public abstract virtual string get_accKeyboardShortcut(object varChild);
    [DispIdAttribute("-5011")]
[TypeLibFuncAttribute("64")]
public abstract virtual object get_accFocus();
    [DispIdAttribute("-5012")]
[TypeLibFuncAttribute("64")]
public abstract virtual object get_accSelection();
    [TypeLibFuncAttribute("64")]
[DispIdAttribute("-5013")]
public abstract virtual string get_accDefaultAction(object varChild);
    [TypeLibFuncAttribute("64")]
[DispIdAttribute("-5014")]
public abstract virtual void accSelect(int flagsSelect, object varChild);
    [TypeLibFuncAttribute("64")]
[DispIdAttribute("-5015")]
public abstract virtual void accLocation(Int32& pxLeft, Int32& pyTop, Int32& pcxWidth, Int32& pcyHeight, object varChild);
    [DispIdAttribute("-5016")]
[TypeLibFuncAttribute("64")]
public abstract virtual object accNavigate(int navDir, object varStart);
    [DispIdAttribute("-5017")]
[TypeLibFuncAttribute("64")]
public abstract virtual object accHitTest(int xLeft, int yTop);
    [DispIdAttribute("-5018")]
[TypeLibFuncAttribute("64")]
public abstract virtual void accDoDefaultAction(object varChild);
    [TypeLibFuncAttribute("64")]
[DispIdAttribute("-5003")]
public abstract virtual void set_accName(object varChild, string pszName);
    [TypeLibFuncAttribute("64")]
[DispIdAttribute("-5004")]
public abstract virtual void set_accValue(object varChild, string pszValue);
    [DispIdAttribute("1610809344")]
public abstract virtual object get_Application();
    [DispIdAttribute("1610809345")]
public abstract virtual int get_Creator();
    [DispIdAttribute("1610874880")]
public abstract virtual bool get_BeginGroup();
    [DispIdAttribute("1610874880")]
public abstract virtual void set_BeginGroup(bool pvarfBeginGroup);
    [DispIdAttribute("1610874882")]
public abstract virtual bool get_BuiltIn();
    [DispIdAttribute("1610874883")]
public abstract virtual string get_Caption();
    [DispIdAttribute("1610874883")]
public abstract virtual void set_Caption(string pbstrCaption);
    [DispIdAttribute("1610874885")]
[TypeLibFuncAttribute("64")]
public abstract virtual object get_Control();
    [DispIdAttribute("1610874886")]
public abstract virtual CommandBarControl Copy(object Bar, object Before);
    [DispIdAttribute("1610874887")]
public abstract virtual void Delete(object Temporary);
    [DispIdAttribute("1610874888")]
public abstract virtual string get_DescriptionText();
    [DispIdAttribute("1610874888")]
public abstract virtual void set_DescriptionText(string pbstrText);
    [DispIdAttribute("1610874890")]
public abstract virtual bool get_Enabled();
    [DispIdAttribute("1610874890")]
public abstract virtual void set_Enabled(bool pvarfEnabled);
    [DispIdAttribute("1610874892")]
public abstract virtual void Execute();
    [DispIdAttribute("1610874893")]
public abstract virtual int get_Height();
    [DispIdAttribute("1610874893")]
public abstract virtual void set_Height(int pdy);
    [DispIdAttribute("1610874895")]
public abstract virtual int get_HelpContextId();
    [DispIdAttribute("1610874895")]
public abstract virtual void set_HelpContextId(int pid);
    [DispIdAttribute("1610874897")]
public abstract virtual string get_HelpFile();
    [DispIdAttribute("1610874897")]
public abstract virtual void set_HelpFile(string pbstrFilename);
    [DispIdAttribute("1610874899")]
public abstract virtual int get_Id();
    [DispIdAttribute("1610874900")]
public abstract virtual int get_Index();
    [TypeLibFuncAttribute("64")]
[DispIdAttribute("1610874901")]
public abstract virtual int get_InstanceId();
    [DispIdAttribute("1610874902")]
public abstract virtual CommandBarControl Move(object Bar, object Before);
    [DispIdAttribute("1610874903")]
public abstract virtual int get_Left();
    [DispIdAttribute("1610874904")]
public abstract virtual MsoControlOLEUsage get_OLEUsage();
    [DispIdAttribute("1610874904")]
public abstract virtual void set_OLEUsage(MsoControlOLEUsage pcou);
    [DispIdAttribute("1610874906")]
public abstract virtual string get_OnAction();
    [DispIdAttribute("1610874906")]
public abstract virtual void set_OnAction(string pbstrOnAction);
    [DispIdAttribute("1610874908")]
public abstract virtual CommandBar get_Parent();
    [DispIdAttribute("1610874909")]
public abstract virtual string get_Parameter();
    [DispIdAttribute("1610874909")]
public abstract virtual void set_Parameter(string pbstrParam);
    [DispIdAttribute("1610874911")]
public abstract virtual int get_Priority();
    [DispIdAttribute("1610874911")]
public abstract virtual void set_Priority(int pnPri);
    [DispIdAttribute("1610874913")]
public abstract virtual void Reset();
    [DispIdAttribute("1610874914")]
public abstract virtual void SetFocus();
    [DispIdAttribute("1610874915")]
public abstract virtual string get_Tag();
    [DispIdAttribute("1610874915")]
public abstract virtual void set_Tag(string pbstrTag);
    [DispIdAttribute("1610874917")]
public abstract virtual string get_TooltipText();
    [DispIdAttribute("1610874917")]
public abstract virtual void set_TooltipText(string pbstrTooltip);
    [DispIdAttribute("1610874919")]
public abstract virtual int get_Top();
    [DispIdAttribute("1610874920")]
public abstract virtual MsoControlType get_Type();
    [DispIdAttribute("1610874921")]
public abstract virtual bool get_Visible();
    [DispIdAttribute("1610874921")]
public abstract virtual void set_Visible(bool pvarfVisible);
    [DispIdAttribute("1610874923")]
public abstract virtual int get_Width();
    [DispIdAttribute("1610874923")]
public abstract virtual void set_Width(int pdx);
    [DispIdAttribute("1610874925")]
public abstract virtual bool get_IsPriorityDropped();
    [DispIdAttribute("1610874926")]
[TypeLibFuncAttribute("64")]
public abstract virtual void Reserved1();
    [DispIdAttribute("1610874927")]
[TypeLibFuncAttribute("64")]
public abstract virtual void Reserved2();
    [DispIdAttribute("1610874928")]
[TypeLibFuncAttribute("64")]
public abstract virtual void Reserved3();
    [TypeLibFuncAttribute("64")]
[DispIdAttribute("1610874929")]
public abstract virtual void Reserved4();
    [TypeLibFuncAttribute("64")]
[DispIdAttribute("1610874930")]
public abstract virtual void Reserved5();
    [TypeLibFuncAttribute("64")]
[DispIdAttribute("1610874931")]
public abstract virtual void Reserved6();
    [DispIdAttribute("1610874932")]
[TypeLibFuncAttribute("64")]
public abstract virtual void Reserved7();
    [DispIdAttribute("1610940416")]
public abstract virtual void AddItem(string Text, object Index);
    [DispIdAttribute("1610940417")]
public abstract virtual void Clear();
    [DispIdAttribute("1610940418")]
public abstract virtual int get_DropDownLines();
    [DispIdAttribute("1610940418")]
public abstract virtual void set_DropDownLines(int pcLines);
    [DispIdAttribute("1610940420")]
public abstract virtual int get_DropDownWidth();
    [DispIdAttribute("1610940420")]
public abstract virtual void set_DropDownWidth(int pdx);
    [DispIdAttribute("1610940422")]
public abstract virtual string get_List(int Index);
    [DispIdAttribute("1610940422")]
public abstract virtual void set_List(int Index, string pbstrItem);
    [DispIdAttribute("1610940424")]
public abstract virtual int get_ListCount();
    [DispIdAttribute("1610940425")]
public abstract virtual int get_ListHeaderCount();
    [DispIdAttribute("1610940425")]
public abstract virtual void set_ListHeaderCount(int pcItems);
    [DispIdAttribute("1610940427")]
public abstract virtual int get_ListIndex();
    [DispIdAttribute("1610940427")]
public abstract virtual void set_ListIndex(int pi);
    [DispIdAttribute("1610940429")]
public abstract virtual void RemoveItem(int Index);
    [DispIdAttribute("1610940430")]
public abstract virtual MsoComboStyle get_Style();
    [DispIdAttribute("1610940430")]
public abstract virtual void set_Style(MsoComboStyle pstyle);
    [DispIdAttribute("1610940432")]
public abstract virtual string get_Text();
    [DispIdAttribute("1610940432")]
public abstract virtual void set_Text(string pbstrText);
}
[InterfaceTypeAttribute("2")]
[GuidAttribute("B9FC4679-BA92-44DE-824B-B1FC7C739D87")]
public interface Microsoft.VisualStudio.CommandBars._CommandBarComboBoxEvents {
    [DispIdAttribute("1")]
public abstract virtual void Change(CommandBarComboBox Ctrl);
}
[ComVisibleAttribute("False")]
public class Microsoft.VisualStudio.CommandBars._CommandBarComboBoxEvents_ChangeEventHandler : MulticastDelegate {
    public _CommandBarComboBoxEvents_ChangeEventHandler(object object, IntPtr method);
    public virtual void Invoke(CommandBarComboBox Ctrl);
    public virtual IAsyncResult BeginInvoke(CommandBarComboBox Ctrl, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
[ComEventInterfaceAttribute("Microsoft.VisualStudio.CommandBars._CommandBarComboBoxEvents", "Microsoft.VisualStudio.CommandBars._CommandBarComboBoxEvents_EventProvider")]
[ComVisibleAttribute("False")]
public interface Microsoft.VisualStudio.CommandBars._CommandBarComboBoxEvents_Event {
    [CompilerGeneratedAttribute]
public abstract virtual void add_Change(_CommandBarComboBoxEvents_ChangeEventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_Change(_CommandBarComboBoxEvents_ChangeEventHandler value);
}
internal class Microsoft.VisualStudio.CommandBars._CommandBarComboBoxEvents_EventProvider : object {
    private IConnectionPointContainer m_ConnectionPointContainer;
    private ArrayList m_aEventSinkHelpers;
    private IConnectionPoint m_ConnectionPoint;
    public _CommandBarComboBoxEvents_EventProvider(object A_1);
    private void Init();
    public sealed virtual void add_Change(_CommandBarComboBoxEvents_ChangeEventHandler value);
    public sealed virtual void remove_Change(_CommandBarComboBoxEvents_ChangeEventHandler value);
    private void AddChange(_CommandBarComboBoxEvents_ChangeEventHandler A_1);
    private void RemoveChange(_CommandBarComboBoxEvents_ChangeEventHandler A_1);
    protected virtual override void Finalize();
    public sealed virtual void Dispose();
    private void Dispose(bool disposing);
}
[ClassInterfaceAttribute("0")]
public class Microsoft.VisualStudio.CommandBars._CommandBarComboBoxEvents_SinkHelper : object {
    public _CommandBarComboBoxEvents_ChangeEventHandler m_ChangeDelegate;
    public int m_dwCookie;
    public sealed virtual void Change(CommandBarComboBox A_1);
}
[DefaultMemberAttribute("Item")]
[GuidAttribute("83D31B2E-9990-4275-AE39-77D1FB5BBCD9")]
public interface Microsoft.VisualStudio.CommandBars._CommandBars {
    public object Application { get; }
    public int Creator { get; }
    public CommandBarControl ActionControl { get; }
    public CommandBar ActiveMenuBar { get; }
    public int Count { get; }
    public bool DisplayTooltips { get; public set; }
    public bool DisplayKeysInTooltips { get; public set; }
    [DispIdAttribute("0")]
public CommandBar Item { get; }
    public bool LargeButtons { get; public set; }
    public MsoMenuAnimation MenuAnimationStyle { get; public set; }
    public object Parent { get; }
    public bool AdaptiveMenus { get; public set; }
    public bool DisplayFonts { get; public set; }
    public bool DisableCustomize { get; public set; }
    public bool DisableAskAQuestionDropdown { get; public set; }
    public abstract virtual object get_Application();
    public abstract virtual int get_Creator();
    public abstract virtual CommandBarControl get_ActionControl();
    public abstract virtual CommandBar get_ActiveMenuBar();
    public abstract virtual CommandBar Add(object Name, object Position, object MenuBar, object Temporary);
    public abstract virtual int get_Count();
    public abstract virtual bool get_DisplayTooltips();
    public abstract virtual void set_DisplayTooltips(bool value);
    public abstract virtual bool get_DisplayKeysInTooltips();
    public abstract virtual void set_DisplayKeysInTooltips(bool value);
    public abstract virtual CommandBarControl FindControl(object Type, object Id, object Tag, object Visible);
    [DispIdAttribute("0")]
public abstract virtual CommandBar get_Item(object Index);
    public abstract virtual bool get_LargeButtons();
    public abstract virtual void set_LargeButtons(bool value);
    public abstract virtual MsoMenuAnimation get_MenuAnimationStyle();
    public abstract virtual void set_MenuAnimationStyle(MsoMenuAnimation value);
    [DispIdAttribute("-4")]
public abstract virtual IEnumerator GetEnumerator();
    public abstract virtual object get_Parent();
    public abstract virtual void ReleaseFocus();
    public abstract virtual int get_IdsString(int ids, String& pbstrName);
    public abstract virtual int get_TmcGetName(int tmc, String& pbstrName);
    public abstract virtual bool get_AdaptiveMenus();
    public abstract virtual void set_AdaptiveMenus(bool value);
    public abstract virtual CommandBarControls FindControls(object Type, object Id, object Tag, object Visible);
    public abstract virtual CommandBar AddEx(object TbidOrName, object Position, object MenuBar, object Temporary, object TbtrProtection);
    public abstract virtual bool get_DisplayFonts();
    public abstract virtual void set_DisplayFonts(bool value);
    public abstract virtual bool get_DisableCustomize();
    public abstract virtual void set_DisableCustomize(bool value);
    public abstract virtual bool get_DisableAskAQuestionDropdown();
    public abstract virtual void set_DisableAskAQuestionDropdown(bool value);
}
[InterfaceTypeAttribute("2")]
[GuidAttribute("DB12E968-CAC8-4EDC-AF8A-909E9222E132")]
public interface Microsoft.VisualStudio.CommandBars._CommandBarsEvents {
    [DispIdAttribute("1")]
public abstract virtual void OnUpdate();
}
[ComVisibleAttribute("False")]
[ComEventInterfaceAttribute("Microsoft.VisualStudio.CommandBars._CommandBarsEvents", "Microsoft.VisualStudio.CommandBars._CommandBarsEvents_EventProvider")]
public interface Microsoft.VisualStudio.CommandBars._CommandBarsEvents_Event {
    [CompilerGeneratedAttribute]
public abstract virtual void add_OnUpdate(_CommandBarsEvents_OnUpdateEventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_OnUpdate(_CommandBarsEvents_OnUpdateEventHandler value);
}
internal class Microsoft.VisualStudio.CommandBars._CommandBarsEvents_EventProvider : object {
    private IConnectionPointContainer m_ConnectionPointContainer;
    private ArrayList m_aEventSinkHelpers;
    private IConnectionPoint m_ConnectionPoint;
    public _CommandBarsEvents_EventProvider(object A_1);
    private void Init();
    public sealed virtual void add_OnUpdate(_CommandBarsEvents_OnUpdateEventHandler value);
    public sealed virtual void remove_OnUpdate(_CommandBarsEvents_OnUpdateEventHandler value);
    private void AddOnUpdate(_CommandBarsEvents_OnUpdateEventHandler A_1);
    private void RemoveOnUpdate(_CommandBarsEvents_OnUpdateEventHandler A_1);
    protected virtual override void Finalize();
    public sealed virtual void Dispose();
    private void Dispose(bool disposing);
}
[ComVisibleAttribute("False")]
public class Microsoft.VisualStudio.CommandBars._CommandBarsEvents_OnUpdateEventHandler : MulticastDelegate {
    public _CommandBarsEvents_OnUpdateEventHandler(object object, IntPtr method);
    public virtual void Invoke();
    public virtual IAsyncResult BeginInvoke(AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
[ClassInterfaceAttribute("0")]
public class Microsoft.VisualStudio.CommandBars._CommandBarsEvents_SinkHelper : object {
    public _CommandBarsEvents_OnUpdateEventHandler m_OnUpdateDelegate;
    public int m_dwCookie;
    public sealed virtual void OnUpdate();
}
[GuidAttribute("19165052-5025-47F1-A7CD-B4E428E1A348")]
public interface Microsoft.VisualStudio.CommandBars._IVsMsoDispObj {
    [DispIdAttribute("1610743808")]
public object Application { get; }
    [DispIdAttribute("1610743809")]
public int Creator { get; }
    [DispIdAttribute("1610743808")]
public abstract virtual object get_Application();
    [DispIdAttribute("1610743809")]
public abstract virtual int get_Creator();
}
[TypeLibTypeAttribute("4304")]
[GuidAttribute("5ACEB159-4442-4C84-8099-80FD11FD2CA2")]
public interface Microsoft.VisualStudio.CommandBars._IVsMsoOleAccDispObj {
    [DispIdAttribute("-5000")]
public object accParent { get; }
    [DispIdAttribute("-5001")]
public int accChildCount { get; }
    [DispIdAttribute("-5002")]
public object accChild { get; }
    [DispIdAttribute("-5003")]
public string accName { get; public set; }
    [DispIdAttribute("-5004")]
public string accValue { get; public set; }
    [DispIdAttribute("-5005")]
public string accDescription { get; }
    [DispIdAttribute("-5006")]
public object accRole { get; }
    [DispIdAttribute("-5007")]
public object accState { get; }
    [DispIdAttribute("-5008")]
public string accHelp { get; }
    [DispIdAttribute("-5009")]
public int accHelpTopic { get; }
    [DispIdAttribute("-5010")]
public string accKeyboardShortcut { get; }
    [DispIdAttribute("-5011")]
public object accFocus { get; }
    [DispIdAttribute("-5012")]
public object accSelection { get; }
    [DispIdAttribute("-5013")]
public string accDefaultAction { get; }
    [DispIdAttribute("1610809344")]
public object Application { get; }
    [DispIdAttribute("1610809345")]
public int Creator { get; }
    [TypeLibFuncAttribute("64")]
[DispIdAttribute("-5000")]
public abstract virtual object get_accParent();
    [DispIdAttribute("-5001")]
[TypeLibFuncAttribute("64")]
public abstract virtual int get_accChildCount();
    [DispIdAttribute("-5002")]
[TypeLibFuncAttribute("64")]
public abstract virtual object get_accChild(object varChild);
    [TypeLibFuncAttribute("64")]
[DispIdAttribute("-5003")]
public abstract virtual string get_accName(object varChild);
    [TypeLibFuncAttribute("64")]
[DispIdAttribute("-5004")]
public abstract virtual string get_accValue(object varChild);
    [TypeLibFuncAttribute("64")]
[DispIdAttribute("-5005")]
public abstract virtual string get_accDescription(object varChild);
    [TypeLibFuncAttribute("64")]
[DispIdAttribute("-5006")]
public abstract virtual object get_accRole(object varChild);
    [DispIdAttribute("-5007")]
[TypeLibFuncAttribute("64")]
public abstract virtual object get_accState(object varChild);
    [DispIdAttribute("-5008")]
[TypeLibFuncAttribute("64")]
public abstract virtual string get_accHelp(object varChild);
    [DispIdAttribute("-5009")]
[TypeLibFuncAttribute("64")]
public abstract virtual int get_accHelpTopic(String& pszHelpFile, object varChild);
    [TypeLibFuncAttribute("64")]
[DispIdAttribute("-5010")]
public abstract virtual string get_accKeyboardShortcut(object varChild);
    [DispIdAttribute("-5011")]
[TypeLibFuncAttribute("64")]
public abstract virtual object get_accFocus();
    [TypeLibFuncAttribute("64")]
[DispIdAttribute("-5012")]
public abstract virtual object get_accSelection();
    [TypeLibFuncAttribute("64")]
[DispIdAttribute("-5013")]
public abstract virtual string get_accDefaultAction(object varChild);
    [TypeLibFuncAttribute("64")]
[DispIdAttribute("-5014")]
public abstract virtual void accSelect(int flagsSelect, object varChild);
    [DispIdAttribute("-5015")]
[TypeLibFuncAttribute("64")]
public abstract virtual void accLocation(Int32& pxLeft, Int32& pyTop, Int32& pcxWidth, Int32& pcyHeight, object varChild);
    [TypeLibFuncAttribute("64")]
[DispIdAttribute("-5016")]
public abstract virtual object accNavigate(int navDir, object varStart);
    [TypeLibFuncAttribute("64")]
[DispIdAttribute("-5017")]
public abstract virtual object accHitTest(int xLeft, int yTop);
    [TypeLibFuncAttribute("64")]
[DispIdAttribute("-5018")]
public abstract virtual void accDoDefaultAction(object varChild);
    [DispIdAttribute("-5003")]
[TypeLibFuncAttribute("64")]
public abstract virtual void set_accName(object varChild, string pszName);
    [TypeLibFuncAttribute("64")]
[DispIdAttribute("-5004")]
public abstract virtual void set_accValue(object varChild, string pszValue);
    [DispIdAttribute("1610809344")]
public abstract virtual object get_Application();
    [DispIdAttribute("1610809345")]
public abstract virtual int get_Creator();
}
[GuidAttribute("D27B4DFE-351C-4AD4-9211-F49BEC19106D")]
[TypeLibTypeAttribute("4288")]
public interface Microsoft.VisualStudio.CommandBars.CommandBar {
    [DispIdAttribute("-5000")]
public object accParent { get; }
    [DispIdAttribute("-5001")]
public int accChildCount { get; }
    [DispIdAttribute("-5002")]
public object accChild { get; }
    [DispIdAttribute("-5003")]
public string accName { get; public set; }
    [DispIdAttribute("-5004")]
public string accValue { get; public set; }
    [DispIdAttribute("-5005")]
public string accDescription { get; }
    [DispIdAttribute("-5006")]
public object accRole { get; }
    [DispIdAttribute("-5007")]
public object accState { get; }
    [DispIdAttribute("-5008")]
public string accHelp { get; }
    [DispIdAttribute("-5009")]
public int accHelpTopic { get; }
    [DispIdAttribute("-5010")]
public string accKeyboardShortcut { get; }
    [DispIdAttribute("-5011")]
public object accFocus { get; }
    [DispIdAttribute("-5012")]
public object accSelection { get; }
    [DispIdAttribute("-5013")]
public string accDefaultAction { get; }
    [DispIdAttribute("1610809344")]
public object Application { get; }
    [DispIdAttribute("1610809345")]
public int Creator { get; }
    [DispIdAttribute("1610874880")]
public bool BuiltIn { get; }
    [DispIdAttribute("1610874881")]
public string Context { get; public set; }
    [DispIdAttribute("1610874883")]
public CommandBarControls Controls { get; }
    [DispIdAttribute("1610874885")]
public bool Enabled { get; public set; }
    [DispIdAttribute("1610874888")]
public int Height { get; public set; }
    [DispIdAttribute("1610874890")]
public int Index { get; }
    [DispIdAttribute("1610874891")]
public int InstanceId { get; }
    [DispIdAttribute("1610874892")]
public int Left { get; public set; }
    [DispIdAttribute("1610874894")]
public string Name { get; public set; }
    [DispIdAttribute("1610874896")]
public string NameLocal { get; public set; }
    [DispIdAttribute("1610874898")]
public object Parent { get; }
    [DispIdAttribute("1610874899")]
public MsoBarPosition Position { get; public set; }
    [DispIdAttribute("1610874901")]
public int RowIndex { get; public set; }
    [DispIdAttribute("1610874903")]
public MsoBarProtection Protection { get; public set; }
    [DispIdAttribute("1610874907")]
public int Top { get; public set; }
    [DispIdAttribute("1610874909")]
public MsoBarType Type { get; }
    [DispIdAttribute("1610874910")]
public bool Visible { get; public set; }
    [DispIdAttribute("1610874912")]
public int Width { get; public set; }
    [DispIdAttribute("1610874914")]
public bool AdaptiveMenu { get; public set; }
    [DispIdAttribute("1610874916")]
public int Id { get; }
    [DispIdAttribute("-5000")]
[TypeLibFuncAttribute("64")]
public abstract virtual object get_accParent();
    [TypeLibFuncAttribute("64")]
[DispIdAttribute("-5001")]
public abstract virtual int get_accChildCount();
    [DispIdAttribute("-5002")]
[TypeLibFuncAttribute("64")]
public abstract virtual object get_accChild(object varChild);
    [DispIdAttribute("-5003")]
[TypeLibFuncAttribute("64")]
public abstract virtual string get_accName(object varChild);
    [DispIdAttribute("-5004")]
[TypeLibFuncAttribute("64")]
public abstract virtual string get_accValue(object varChild);
    [DispIdAttribute("-5005")]
[TypeLibFuncAttribute("64")]
public abstract virtual string get_accDescription(object varChild);
    [DispIdAttribute("-5006")]
[TypeLibFuncAttribute("64")]
public abstract virtual object get_accRole(object varChild);
    [DispIdAttribute("-5007")]
[TypeLibFuncAttribute("64")]
public abstract virtual object get_accState(object varChild);
    [DispIdAttribute("-5008")]
[TypeLibFuncAttribute("64")]
public abstract virtual string get_accHelp(object varChild);
    [DispIdAttribute("-5009")]
[TypeLibFuncAttribute("64")]
public abstract virtual int get_accHelpTopic(String& pszHelpFile, object varChild);
    [DispIdAttribute("-5010")]
[TypeLibFuncAttribute("64")]
public abstract virtual string get_accKeyboardShortcut(object varChild);
    [DispIdAttribute("-5011")]
[TypeLibFuncAttribute("64")]
public abstract virtual object get_accFocus();
    [DispIdAttribute("-5012")]
[TypeLibFuncAttribute("64")]
public abstract virtual object get_accSelection();
    [DispIdAttribute("-5013")]
[TypeLibFuncAttribute("64")]
public abstract virtual string get_accDefaultAction(object varChild);
    [DispIdAttribute("-5014")]
[TypeLibFuncAttribute("64")]
public abstract virtual void accSelect(int flagsSelect, object varChild);
    [DispIdAttribute("-5015")]
[TypeLibFuncAttribute("64")]
public abstract virtual void accLocation(Int32& pxLeft, Int32& pyTop, Int32& pcxWidth, Int32& pcyHeight, object varChild);
    [TypeLibFuncAttribute("64")]
[DispIdAttribute("-5016")]
public abstract virtual object accNavigate(int navDir, object varStart);
    [DispIdAttribute("-5017")]
[TypeLibFuncAttribute("64")]
public abstract virtual object accHitTest(int xLeft, int yTop);
    [TypeLibFuncAttribute("64")]
[DispIdAttribute("-5018")]
public abstract virtual void accDoDefaultAction(object varChild);
    [DispIdAttribute("-5003")]
[TypeLibFuncAttribute("64")]
public abstract virtual void set_accName(object varChild, string pszName);
    [DispIdAttribute("-5004")]
[TypeLibFuncAttribute("64")]
public abstract virtual void set_accValue(object varChild, string pszValue);
    [DispIdAttribute("1610809344")]
public abstract virtual object get_Application();
    [DispIdAttribute("1610809345")]
public abstract virtual int get_Creator();
    [DispIdAttribute("1610874880")]
public abstract virtual bool get_BuiltIn();
    [DispIdAttribute("1610874881")]
public abstract virtual string get_Context();
    [DispIdAttribute("1610874881")]
public abstract virtual void set_Context(string pbstrContext);
    [DispIdAttribute("1610874883")]
public abstract virtual CommandBarControls get_Controls();
    [DispIdAttribute("1610874884")]
public abstract virtual void Delete();
    [DispIdAttribute("1610874885")]
public abstract virtual bool get_Enabled();
    [DispIdAttribute("1610874885")]
public abstract virtual void set_Enabled(bool pvarfEnabled);
    [DispIdAttribute("1610874887")]
public abstract virtual CommandBarControl FindControl(object Type, object Id, object Tag, object Visible, object Recursive);
    [DispIdAttribute("1610874888")]
public abstract virtual int get_Height();
    [DispIdAttribute("1610874888")]
public abstract virtual void set_Height(int pdy);
    [DispIdAttribute("1610874890")]
public abstract virtual int get_Index();
    [TypeLibFuncAttribute("64")]
[DispIdAttribute("1610874891")]
public abstract virtual int get_InstanceId();
    [DispIdAttribute("1610874892")]
public abstract virtual int get_Left();
    [DispIdAttribute("1610874892")]
public abstract virtual void set_Left(int pxpLeft);
    [DispIdAttribute("1610874894")]
public abstract virtual string get_Name();
    [DispIdAttribute("1610874894")]
public abstract virtual void set_Name(string pbstrName);
    [DispIdAttribute("1610874896")]
public abstract virtual string get_NameLocal();
    [DispIdAttribute("1610874896")]
public abstract virtual void set_NameLocal(string pbstrNameLocal);
    [DispIdAttribute("1610874898")]
public abstract virtual object get_Parent();
    [DispIdAttribute("1610874899")]
public abstract virtual MsoBarPosition get_Position();
    [DispIdAttribute("1610874899")]
public abstract virtual void set_Position(MsoBarPosition ppos);
    [DispIdAttribute("1610874901")]
public abstract virtual int get_RowIndex();
    [DispIdAttribute("1610874901")]
public abstract virtual void set_RowIndex(int piRow);
    [DispIdAttribute("1610874903")]
public abstract virtual MsoBarProtection get_Protection();
    [DispIdAttribute("1610874903")]
public abstract virtual void set_Protection(MsoBarProtection pprot);
    [DispIdAttribute("1610874905")]
public abstract virtual void Reset();
    [DispIdAttribute("1610874906")]
public abstract virtual void ShowPopup(object x, object y);
    [DispIdAttribute("1610874907")]
public abstract virtual int get_Top();
    [DispIdAttribute("1610874907")]
public abstract virtual void set_Top(int pypTop);
    [DispIdAttribute("1610874909")]
public abstract virtual MsoBarType get_Type();
    [DispIdAttribute("1610874910")]
public abstract virtual bool get_Visible();
    [DispIdAttribute("1610874910")]
public abstract virtual void set_Visible(bool pvarfVisible);
    [DispIdAttribute("1610874912")]
public abstract virtual int get_Width();
    [DispIdAttribute("1610874912")]
public abstract virtual void set_Width(int pdx);
    [DispIdAttribute("1610874914")]
public abstract virtual bool get_AdaptiveMenu();
    [DispIdAttribute("1610874914")]
public abstract virtual void set_AdaptiveMenu(bool pvarfAdaptiveMenu);
    [TypeLibFuncAttribute("64")]
[DispIdAttribute("1610874916")]
public abstract virtual int get_Id();
}
[ComVisibleAttribute("False")]
[GuidAttribute("E11C7CE2-8641-4183-9458-309C6A201CDD")]
[CoClassAttribute("Microsoft.VisualStudio.CommandBars.CommandBarButtonClass")]
public interface Microsoft.VisualStudio.CommandBars.CommandBarButton {
}
[ComVisibleAttribute("False")]
[GuidAttribute("E322950C-AAF9-43DF-A328-62A1A7E96AA6")]
[ClassInterfaceAttribute("0")]
[ComSourceInterfacesAttribute("Microsoft.VisualStudio.CommandBars._CommandBarButtonEvents")]
public class Microsoft.VisualStudio.CommandBars.CommandBarButtonClass : object {
}
[ComVisibleAttribute("False")]
[CoClassAttribute("Microsoft.VisualStudio.CommandBars.CommandBarComboBoxClass")]
[GuidAttribute("B9223DAC-9C92-4916-9396-6E7673A93724")]
public interface Microsoft.VisualStudio.CommandBars.CommandBarComboBox {
}
[ComVisibleAttribute("False")]
[GuidAttribute("C914A004-F36C-4A2F-BC3C-429FFB577717")]
[ComSourceInterfacesAttribute("Microsoft.VisualStudio.CommandBars._CommandBarComboBoxEvents")]
[ClassInterfaceAttribute("0")]
public class Microsoft.VisualStudio.CommandBars.CommandBarComboBoxClass : object {
}
[TypeLibTypeAttribute("4160")]
[GuidAttribute("43FD5911-7BAC-4BDC-AB6C-2DE65B5C0233")]
public interface Microsoft.VisualStudio.CommandBars.CommandBarControl {
    [DispIdAttribute("-5000")]
public object accParent { get; }
    [DispIdAttribute("-5001")]
public int accChildCount { get; }
    [DispIdAttribute("-5002")]
public object accChild { get; }
    [DispIdAttribute("-5003")]
public string accName { get; public set; }
    [DispIdAttribute("-5004")]
public string accValue { get; public set; }
    [DispIdAttribute("-5005")]
public string accDescription { get; }
    [DispIdAttribute("-5006")]
public object accRole { get; }
    [DispIdAttribute("-5007")]
public object accState { get; }
    [DispIdAttribute("-5008")]
public string accHelp { get; }
    [DispIdAttribute("-5009")]
public int accHelpTopic { get; }
    [DispIdAttribute("-5010")]
public string accKeyboardShortcut { get; }
    [DispIdAttribute("-5011")]
public object accFocus { get; }
    [DispIdAttribute("-5012")]
public object accSelection { get; }
    [DispIdAttribute("-5013")]
public string accDefaultAction { get; }
    [DispIdAttribute("1610809344")]
public object Application { get; }
    [DispIdAttribute("1610809345")]
public int Creator { get; }
    [DispIdAttribute("1610874880")]
public bool BeginGroup { get; public set; }
    [DispIdAttribute("1610874882")]
public bool BuiltIn { get; }
    [DispIdAttribute("1610874883")]
public string Caption { get; public set; }
    [DispIdAttribute("1610874885")]
public object Control { get; }
    [DispIdAttribute("1610874888")]
public string DescriptionText { get; public set; }
    [DispIdAttribute("1610874890")]
public bool Enabled { get; public set; }
    [DispIdAttribute("1610874893")]
public int Height { get; public set; }
    [DispIdAttribute("1610874895")]
public int HelpContextId { get; public set; }
    [DispIdAttribute("1610874897")]
public string HelpFile { get; public set; }
    [DispIdAttribute("1610874899")]
public int Id { get; }
    [DispIdAttribute("1610874900")]
public int Index { get; }
    [DispIdAttribute("1610874901")]
public int InstanceId { get; }
    [DispIdAttribute("1610874903")]
public int Left { get; }
    [DispIdAttribute("1610874904")]
public MsoControlOLEUsage OLEUsage { get; public set; }
    [DispIdAttribute("1610874906")]
public string OnAction { get; public set; }
    [DispIdAttribute("1610874908")]
public CommandBar Parent { get; }
    [DispIdAttribute("1610874909")]
public string Parameter { get; public set; }
    [DispIdAttribute("1610874911")]
public int Priority { get; public set; }
    [DispIdAttribute("1610874915")]
public string Tag { get; public set; }
    [DispIdAttribute("1610874917")]
public string TooltipText { get; public set; }
    [DispIdAttribute("1610874919")]
public int Top { get; }
    [DispIdAttribute("1610874920")]
public MsoControlType Type { get; }
    [DispIdAttribute("1610874921")]
public bool Visible { get; public set; }
    [DispIdAttribute("1610874923")]
public int Width { get; public set; }
    [DispIdAttribute("1610874925")]
public bool IsPriorityDropped { get; }
    [TypeLibFuncAttribute("64")]
[DispIdAttribute("-5000")]
public abstract virtual object get_accParent();
    [DispIdAttribute("-5001")]
[TypeLibFuncAttribute("64")]
public abstract virtual int get_accChildCount();
    [TypeLibFuncAttribute("64")]
[DispIdAttribute("-5002")]
public abstract virtual object get_accChild(object varChild);
    [DispIdAttribute("-5003")]
[TypeLibFuncAttribute("64")]
public abstract virtual string get_accName(object varChild);
    [TypeLibFuncAttribute("64")]
[DispIdAttribute("-5004")]
public abstract virtual string get_accValue(object varChild);
    [TypeLibFuncAttribute("64")]
[DispIdAttribute("-5005")]
public abstract virtual string get_accDescription(object varChild);
    [DispIdAttribute("-5006")]
[TypeLibFuncAttribute("64")]
public abstract virtual object get_accRole(object varChild);
    [DispIdAttribute("-5007")]
[TypeLibFuncAttribute("64")]
public abstract virtual object get_accState(object varChild);
    [TypeLibFuncAttribute("64")]
[DispIdAttribute("-5008")]
public abstract virtual string get_accHelp(object varChild);
    [DispIdAttribute("-5009")]
[TypeLibFuncAttribute("64")]
public abstract virtual int get_accHelpTopic(String& pszHelpFile, object varChild);
    [TypeLibFuncAttribute("64")]
[DispIdAttribute("-5010")]
public abstract virtual string get_accKeyboardShortcut(object varChild);
    [TypeLibFuncAttribute("64")]
[DispIdAttribute("-5011")]
public abstract virtual object get_accFocus();
    [DispIdAttribute("-5012")]
[TypeLibFuncAttribute("64")]
public abstract virtual object get_accSelection();
    [TypeLibFuncAttribute("64")]
[DispIdAttribute("-5013")]
public abstract virtual string get_accDefaultAction(object varChild);
    [DispIdAttribute("-5014")]
[TypeLibFuncAttribute("64")]
public abstract virtual void accSelect(int flagsSelect, object varChild);
    [DispIdAttribute("-5015")]
[TypeLibFuncAttribute("64")]
public abstract virtual void accLocation(Int32& pxLeft, Int32& pyTop, Int32& pcxWidth, Int32& pcyHeight, object varChild);
    [DispIdAttribute("-5016")]
[TypeLibFuncAttribute("64")]
public abstract virtual object accNavigate(int navDir, object varStart);
    [DispIdAttribute("-5017")]
[TypeLibFuncAttribute("64")]
public abstract virtual object accHitTest(int xLeft, int yTop);
    [TypeLibFuncAttribute("64")]
[DispIdAttribute("-5018")]
public abstract virtual void accDoDefaultAction(object varChild);
    [DispIdAttribute("-5003")]
[TypeLibFuncAttribute("64")]
public abstract virtual void set_accName(object varChild, string pszName);
    [DispIdAttribute("-5004")]
[TypeLibFuncAttribute("64")]
public abstract virtual void set_accValue(object varChild, string pszValue);
    [DispIdAttribute("1610809344")]
public abstract virtual object get_Application();
    [DispIdAttribute("1610809345")]
public abstract virtual int get_Creator();
    [DispIdAttribute("1610874880")]
public abstract virtual bool get_BeginGroup();
    [DispIdAttribute("1610874880")]
public abstract virtual void set_BeginGroup(bool pvarfBeginGroup);
    [DispIdAttribute("1610874882")]
public abstract virtual bool get_BuiltIn();
    [DispIdAttribute("1610874883")]
public abstract virtual string get_Caption();
    [DispIdAttribute("1610874883")]
public abstract virtual void set_Caption(string pbstrCaption);
    [TypeLibFuncAttribute("64")]
[DispIdAttribute("1610874885")]
public abstract virtual object get_Control();
    [DispIdAttribute("1610874886")]
public abstract virtual CommandBarControl Copy(object Bar, object Before);
    [DispIdAttribute("1610874887")]
public abstract virtual void Delete(object Temporary);
    [DispIdAttribute("1610874888")]
public abstract virtual string get_DescriptionText();
    [DispIdAttribute("1610874888")]
public abstract virtual void set_DescriptionText(string pbstrText);
    [DispIdAttribute("1610874890")]
public abstract virtual bool get_Enabled();
    [DispIdAttribute("1610874890")]
public abstract virtual void set_Enabled(bool pvarfEnabled);
    [DispIdAttribute("1610874892")]
public abstract virtual void Execute();
    [DispIdAttribute("1610874893")]
public abstract virtual int get_Height();
    [DispIdAttribute("1610874893")]
public abstract virtual void set_Height(int pdy);
    [DispIdAttribute("1610874895")]
public abstract virtual int get_HelpContextId();
    [DispIdAttribute("1610874895")]
public abstract virtual void set_HelpContextId(int pid);
    [DispIdAttribute("1610874897")]
public abstract virtual string get_HelpFile();
    [DispIdAttribute("1610874897")]
public abstract virtual void set_HelpFile(string pbstrFilename);
    [DispIdAttribute("1610874899")]
public abstract virtual int get_Id();
    [DispIdAttribute("1610874900")]
public abstract virtual int get_Index();
    [TypeLibFuncAttribute("64")]
[DispIdAttribute("1610874901")]
public abstract virtual int get_InstanceId();
    [DispIdAttribute("1610874902")]
public abstract virtual CommandBarControl Move(object Bar, object Before);
    [DispIdAttribute("1610874903")]
public abstract virtual int get_Left();
    [DispIdAttribute("1610874904")]
public abstract virtual MsoControlOLEUsage get_OLEUsage();
    [DispIdAttribute("1610874904")]
public abstract virtual void set_OLEUsage(MsoControlOLEUsage pcou);
    [DispIdAttribute("1610874906")]
public abstract virtual string get_OnAction();
    [DispIdAttribute("1610874906")]
public abstract virtual void set_OnAction(string pbstrOnAction);
    [DispIdAttribute("1610874908")]
public abstract virtual CommandBar get_Parent();
    [DispIdAttribute("1610874909")]
public abstract virtual string get_Parameter();
    [DispIdAttribute("1610874909")]
public abstract virtual void set_Parameter(string pbstrParam);
    [DispIdAttribute("1610874911")]
public abstract virtual int get_Priority();
    [DispIdAttribute("1610874911")]
public abstract virtual void set_Priority(int pnPri);
    [DispIdAttribute("1610874913")]
public abstract virtual void Reset();
    [DispIdAttribute("1610874914")]
public abstract virtual void SetFocus();
    [DispIdAttribute("1610874915")]
public abstract virtual string get_Tag();
    [DispIdAttribute("1610874915")]
public abstract virtual void set_Tag(string pbstrTag);
    [DispIdAttribute("1610874917")]
public abstract virtual string get_TooltipText();
    [DispIdAttribute("1610874917")]
public abstract virtual void set_TooltipText(string pbstrTooltip);
    [DispIdAttribute("1610874919")]
public abstract virtual int get_Top();
    [DispIdAttribute("1610874920")]
public abstract virtual MsoControlType get_Type();
    [DispIdAttribute("1610874921")]
public abstract virtual bool get_Visible();
    [DispIdAttribute("1610874921")]
public abstract virtual void set_Visible(bool pvarfVisible);
    [DispIdAttribute("1610874923")]
public abstract virtual int get_Width();
    [DispIdAttribute("1610874923")]
public abstract virtual void set_Width(int pdx);
    [DispIdAttribute("1610874925")]
public abstract virtual bool get_IsPriorityDropped();
    [DispIdAttribute("1610874926")]
[TypeLibFuncAttribute("64")]
public abstract virtual void Reserved1();
    [DispIdAttribute("1610874927")]
[TypeLibFuncAttribute("64")]
public abstract virtual void Reserved2();
    [DispIdAttribute("1610874928")]
[TypeLibFuncAttribute("64")]
public abstract virtual void Reserved3();
    [TypeLibFuncAttribute("64")]
[DispIdAttribute("1610874929")]
public abstract virtual void Reserved4();
    [DispIdAttribute("1610874930")]
[TypeLibFuncAttribute("64")]
public abstract virtual void Reserved5();
    [TypeLibFuncAttribute("64")]
[DispIdAttribute("1610874931")]
public abstract virtual void Reserved6();
    [TypeLibFuncAttribute("64")]
[DispIdAttribute("1610874932")]
public abstract virtual void Reserved7();
}
[DefaultMemberAttribute("Item")]
[GuidAttribute("9F0A2735-2303-4E7B-82A9-21101530B842")]
public interface Microsoft.VisualStudio.CommandBars.CommandBarControls {
    public object Application { get; }
    public int Creator { get; }
    public int Count { get; }
    [DispIdAttribute("0")]
public CommandBarControl Item { get; }
    public CommandBar Parent { get; }
    public abstract virtual object get_Application();
    public abstract virtual int get_Creator();
    public abstract virtual CommandBarControl Add(object Type, object Id, object Parameter, object Before, object Temporary);
    public abstract virtual int get_Count();
    [DispIdAttribute("0")]
public abstract virtual CommandBarControl get_Item(object Index);
    [DispIdAttribute("-4")]
public abstract virtual IEnumerator GetEnumerator();
    public abstract virtual CommandBar get_Parent();
}
[TypeLibTypeAttribute("4288")]
[GuidAttribute("AAD0C7E1-12EB-4271-9538-2C91B460012B")]
public interface Microsoft.VisualStudio.CommandBars.CommandBarPopup {
    [DispIdAttribute("-5000")]
public object accParent { get; }
    [DispIdAttribute("-5001")]
public int accChildCount { get; }
    [DispIdAttribute("-5002")]
public object accChild { get; }
    [DispIdAttribute("-5003")]
public string accName { get; public set; }
    [DispIdAttribute("-5004")]
public string accValue { get; public set; }
    [DispIdAttribute("-5005")]
public string accDescription { get; }
    [DispIdAttribute("-5006")]
public object accRole { get; }
    [DispIdAttribute("-5007")]
public object accState { get; }
    [DispIdAttribute("-5008")]
public string accHelp { get; }
    [DispIdAttribute("-5009")]
public int accHelpTopic { get; }
    [DispIdAttribute("-5010")]
public string accKeyboardShortcut { get; }
    [DispIdAttribute("-5011")]
public object accFocus { get; }
    [DispIdAttribute("-5012")]
public object accSelection { get; }
    [DispIdAttribute("-5013")]
public string accDefaultAction { get; }
    [DispIdAttribute("1610809344")]
public object Application { get; }
    [DispIdAttribute("1610809345")]
public int Creator { get; }
    [DispIdAttribute("1610874880")]
public bool BeginGroup { get; public set; }
    [DispIdAttribute("1610874882")]
public bool BuiltIn { get; }
    [DispIdAttribute("1610874883")]
public string Caption { get; public set; }
    [DispIdAttribute("1610874885")]
public object Control { get; }
    [DispIdAttribute("1610874888")]
public string DescriptionText { get; public set; }
    [DispIdAttribute("1610874890")]
public bool Enabled { get; public set; }
    [DispIdAttribute("1610874893")]
public int Height { get; public set; }
    [DispIdAttribute("1610874895")]
public int HelpContextId { get; public set; }
    [DispIdAttribute("1610874897")]
public string HelpFile { get; public set; }
    [DispIdAttribute("1610874899")]
public int Id { get; }
    [DispIdAttribute("1610874900")]
public int Index { get; }
    [DispIdAttribute("1610874901")]
public int InstanceId { get; }
    [DispIdAttribute("1610874903")]
public int Left { get; }
    [DispIdAttribute("1610874904")]
public MsoControlOLEUsage OLEUsage { get; public set; }
    [DispIdAttribute("1610874906")]
public string OnAction { get; public set; }
    [DispIdAttribute("1610874908")]
public CommandBar Parent { get; }
    [DispIdAttribute("1610874909")]
public string Parameter { get; public set; }
    [DispIdAttribute("1610874911")]
public int Priority { get; public set; }
    [DispIdAttribute("1610874915")]
public string Tag { get; public set; }
    [DispIdAttribute("1610874917")]
public string TooltipText { get; public set; }
    [DispIdAttribute("1610874919")]
public int Top { get; }
    [DispIdAttribute("1610874920")]
public MsoControlType Type { get; }
    [DispIdAttribute("1610874921")]
public bool Visible { get; public set; }
    [DispIdAttribute("1610874923")]
public int Width { get; public set; }
    [DispIdAttribute("1610874925")]
public bool IsPriorityDropped { get; }
    [DispIdAttribute("1610940416")]
public CommandBar CommandBar { get; }
    [DispIdAttribute("1610940417")]
public CommandBarControls Controls { get; }
    [DispIdAttribute("1610940418")]
public MsoOLEMenuGroup OLEMenuGroup { get; public set; }
    [DispIdAttribute("-5000")]
[TypeLibFuncAttribute("64")]
public abstract virtual object get_accParent();
    [DispIdAttribute("-5001")]
[TypeLibFuncAttribute("64")]
public abstract virtual int get_accChildCount();
    [TypeLibFuncAttribute("64")]
[DispIdAttribute("-5002")]
public abstract virtual object get_accChild(object varChild);
    [DispIdAttribute("-5003")]
[TypeLibFuncAttribute("64")]
public abstract virtual string get_accName(object varChild);
    [DispIdAttribute("-5004")]
[TypeLibFuncAttribute("64")]
public abstract virtual string get_accValue(object varChild);
    [TypeLibFuncAttribute("64")]
[DispIdAttribute("-5005")]
public abstract virtual string get_accDescription(object varChild);
    [DispIdAttribute("-5006")]
[TypeLibFuncAttribute("64")]
public abstract virtual object get_accRole(object varChild);
    [DispIdAttribute("-5007")]
[TypeLibFuncAttribute("64")]
public abstract virtual object get_accState(object varChild);
    [DispIdAttribute("-5008")]
[TypeLibFuncAttribute("64")]
public abstract virtual string get_accHelp(object varChild);
    [DispIdAttribute("-5009")]
[TypeLibFuncAttribute("64")]
public abstract virtual int get_accHelpTopic(String& pszHelpFile, object varChild);
    [DispIdAttribute("-5010")]
[TypeLibFuncAttribute("64")]
public abstract virtual string get_accKeyboardShortcut(object varChild);
    [TypeLibFuncAttribute("64")]
[DispIdAttribute("-5011")]
public abstract virtual object get_accFocus();
    [DispIdAttribute("-5012")]
[TypeLibFuncAttribute("64")]
public abstract virtual object get_accSelection();
    [DispIdAttribute("-5013")]
[TypeLibFuncAttribute("64")]
public abstract virtual string get_accDefaultAction(object varChild);
    [DispIdAttribute("-5014")]
[TypeLibFuncAttribute("64")]
public abstract virtual void accSelect(int flagsSelect, object varChild);
    [DispIdAttribute("-5015")]
[TypeLibFuncAttribute("64")]
public abstract virtual void accLocation(Int32& pxLeft, Int32& pyTop, Int32& pcxWidth, Int32& pcyHeight, object varChild);
    [DispIdAttribute("-5016")]
[TypeLibFuncAttribute("64")]
public abstract virtual object accNavigate(int navDir, object varStart);
    [TypeLibFuncAttribute("64")]
[DispIdAttribute("-5017")]
public abstract virtual object accHitTest(int xLeft, int yTop);
    [DispIdAttribute("-5018")]
[TypeLibFuncAttribute("64")]
public abstract virtual void accDoDefaultAction(object varChild);
    [TypeLibFuncAttribute("64")]
[DispIdAttribute("-5003")]
public abstract virtual void set_accName(object varChild, string pszName);
    [TypeLibFuncAttribute("64")]
[DispIdAttribute("-5004")]
public abstract virtual void set_accValue(object varChild, string pszValue);
    [DispIdAttribute("1610809344")]
public abstract virtual object get_Application();
    [DispIdAttribute("1610809345")]
public abstract virtual int get_Creator();
    [DispIdAttribute("1610874880")]
public abstract virtual bool get_BeginGroup();
    [DispIdAttribute("1610874880")]
public abstract virtual void set_BeginGroup(bool pvarfBeginGroup);
    [DispIdAttribute("1610874882")]
public abstract virtual bool get_BuiltIn();
    [DispIdAttribute("1610874883")]
public abstract virtual string get_Caption();
    [DispIdAttribute("1610874883")]
public abstract virtual void set_Caption(string pbstrCaption);
    [TypeLibFuncAttribute("64")]
[DispIdAttribute("1610874885")]
public abstract virtual object get_Control();
    [DispIdAttribute("1610874886")]
public abstract virtual CommandBarControl Copy(object Bar, object Before);
    [DispIdAttribute("1610874887")]
public abstract virtual void Delete(object Temporary);
    [DispIdAttribute("1610874888")]
public abstract virtual string get_DescriptionText();
    [DispIdAttribute("1610874888")]
public abstract virtual void set_DescriptionText(string pbstrText);
    [DispIdAttribute("1610874890")]
public abstract virtual bool get_Enabled();
    [DispIdAttribute("1610874890")]
public abstract virtual void set_Enabled(bool pvarfEnabled);
    [DispIdAttribute("1610874892")]
public abstract virtual void Execute();
    [DispIdAttribute("1610874893")]
public abstract virtual int get_Height();
    [DispIdAttribute("1610874893")]
public abstract virtual void set_Height(int pdy);
    [DispIdAttribute("1610874895")]
public abstract virtual int get_HelpContextId();
    [DispIdAttribute("1610874895")]
public abstract virtual void set_HelpContextId(int pid);
    [DispIdAttribute("1610874897")]
public abstract virtual string get_HelpFile();
    [DispIdAttribute("1610874897")]
public abstract virtual void set_HelpFile(string pbstrFilename);
    [DispIdAttribute("1610874899")]
public abstract virtual int get_Id();
    [DispIdAttribute("1610874900")]
public abstract virtual int get_Index();
    [TypeLibFuncAttribute("64")]
[DispIdAttribute("1610874901")]
public abstract virtual int get_InstanceId();
    [DispIdAttribute("1610874902")]
public abstract virtual CommandBarControl Move(object Bar, object Before);
    [DispIdAttribute("1610874903")]
public abstract virtual int get_Left();
    [DispIdAttribute("1610874904")]
public abstract virtual MsoControlOLEUsage get_OLEUsage();
    [DispIdAttribute("1610874904")]
public abstract virtual void set_OLEUsage(MsoControlOLEUsage pcou);
    [DispIdAttribute("1610874906")]
public abstract virtual string get_OnAction();
    [DispIdAttribute("1610874906")]
public abstract virtual void set_OnAction(string pbstrOnAction);
    [DispIdAttribute("1610874908")]
public abstract virtual CommandBar get_Parent();
    [DispIdAttribute("1610874909")]
public abstract virtual string get_Parameter();
    [DispIdAttribute("1610874909")]
public abstract virtual void set_Parameter(string pbstrParam);
    [DispIdAttribute("1610874911")]
public abstract virtual int get_Priority();
    [DispIdAttribute("1610874911")]
public abstract virtual void set_Priority(int pnPri);
    [DispIdAttribute("1610874913")]
public abstract virtual void Reset();
    [DispIdAttribute("1610874914")]
public abstract virtual void SetFocus();
    [DispIdAttribute("1610874915")]
public abstract virtual string get_Tag();
    [DispIdAttribute("1610874915")]
public abstract virtual void set_Tag(string pbstrTag);
    [DispIdAttribute("1610874917")]
public abstract virtual string get_TooltipText();
    [DispIdAttribute("1610874917")]
public abstract virtual void set_TooltipText(string pbstrTooltip);
    [DispIdAttribute("1610874919")]
public abstract virtual int get_Top();
    [DispIdAttribute("1610874920")]
public abstract virtual MsoControlType get_Type();
    [DispIdAttribute("1610874921")]
public abstract virtual bool get_Visible();
    [DispIdAttribute("1610874921")]
public abstract virtual void set_Visible(bool pvarfVisible);
    [DispIdAttribute("1610874923")]
public abstract virtual int get_Width();
    [DispIdAttribute("1610874923")]
public abstract virtual void set_Width(int pdx);
    [DispIdAttribute("1610874925")]
public abstract virtual bool get_IsPriorityDropped();
    [TypeLibFuncAttribute("64")]
[DispIdAttribute("1610874926")]
public abstract virtual void Reserved1();
    [TypeLibFuncAttribute("64")]
[DispIdAttribute("1610874927")]
public abstract virtual void Reserved2();
    [DispIdAttribute("1610874928")]
[TypeLibFuncAttribute("64")]
public abstract virtual void Reserved3();
    [TypeLibFuncAttribute("64")]
[DispIdAttribute("1610874929")]
public abstract virtual void Reserved4();
    [TypeLibFuncAttribute("64")]
[DispIdAttribute("1610874930")]
public abstract virtual void Reserved5();
    [TypeLibFuncAttribute("64")]
[DispIdAttribute("1610874931")]
public abstract virtual void Reserved6();
    [TypeLibFuncAttribute("64")]
[DispIdAttribute("1610874932")]
public abstract virtual void Reserved7();
    [DispIdAttribute("1610940416")]
public abstract virtual CommandBar get_CommandBar();
    [DispIdAttribute("1610940417")]
public abstract virtual CommandBarControls get_Controls();
    [DispIdAttribute("1610940418")]
public abstract virtual MsoOLEMenuGroup get_OLEMenuGroup();
    [DispIdAttribute("1610940418")]
public abstract virtual void set_OLEMenuGroup(MsoOLEMenuGroup pomg);
}
[ComVisibleAttribute("False")]
[CoClassAttribute("Microsoft.VisualStudio.CommandBars.CommandBarsClass")]
[GuidAttribute("83D31B2E-9990-4275-AE39-77D1FB5BBCD9")]
public interface Microsoft.VisualStudio.CommandBars.CommandBars {
}
[ComVisibleAttribute("False")]
[ComSourceInterfacesAttribute("Microsoft.VisualStudio.CommandBars._CommandBarsEvents")]
[ClassInterfaceAttribute("0")]
[GuidAttribute("2280D7E1-DBEB-4D9C-A3C6-B12CDDDBD1AF")]
public class Microsoft.VisualStudio.CommandBars.CommandBarsClass : object {
}
[GuidAttribute("618736E0-3C3D-11CF-810C-00AA00389B71")]
[TypeLibTypeAttribute("4176")]
public interface Microsoft.VisualStudio.CommandBars.IAccessible {
    [DispIdAttribute("-5000")]
public object accParent { get; }
    [DispIdAttribute("-5001")]
public int accChildCount { get; }
    [DispIdAttribute("-5002")]
public object accChild { get; }
    [DispIdAttribute("-5003")]
public string accName { get; public set; }
    [DispIdAttribute("-5004")]
public string accValue { get; public set; }
    [DispIdAttribute("-5005")]
public string accDescription { get; }
    [DispIdAttribute("-5006")]
public object accRole { get; }
    [DispIdAttribute("-5007")]
public object accState { get; }
    [DispIdAttribute("-5008")]
public string accHelp { get; }
    [DispIdAttribute("-5009")]
public int accHelpTopic { get; }
    [DispIdAttribute("-5010")]
public string accKeyboardShortcut { get; }
    [DispIdAttribute("-5011")]
public object accFocus { get; }
    [DispIdAttribute("-5012")]
public object accSelection { get; }
    [DispIdAttribute("-5013")]
public string accDefaultAction { get; }
    [DispIdAttribute("-5000")]
[TypeLibFuncAttribute("64")]
public abstract virtual object get_accParent();
    [DispIdAttribute("-5001")]
[TypeLibFuncAttribute("64")]
public abstract virtual int get_accChildCount();
    [DispIdAttribute("-5002")]
[TypeLibFuncAttribute("64")]
public abstract virtual object get_accChild(object varChild);
    [DispIdAttribute("-5003")]
[TypeLibFuncAttribute("64")]
public abstract virtual string get_accName(object varChild);
    [TypeLibFuncAttribute("64")]
[DispIdAttribute("-5004")]
public abstract virtual string get_accValue(object varChild);
    [TypeLibFuncAttribute("64")]
[DispIdAttribute("-5005")]
public abstract virtual string get_accDescription(object varChild);
    [TypeLibFuncAttribute("64")]
[DispIdAttribute("-5006")]
public abstract virtual object get_accRole(object varChild);
    [TypeLibFuncAttribute("64")]
[DispIdAttribute("-5007")]
public abstract virtual object get_accState(object varChild);
    [TypeLibFuncAttribute("64")]
[DispIdAttribute("-5008")]
public abstract virtual string get_accHelp(object varChild);
    [TypeLibFuncAttribute("64")]
[DispIdAttribute("-5009")]
public abstract virtual int get_accHelpTopic(String& pszHelpFile, object varChild);
    [DispIdAttribute("-5010")]
[TypeLibFuncAttribute("64")]
public abstract virtual string get_accKeyboardShortcut(object varChild);
    [DispIdAttribute("-5011")]
[TypeLibFuncAttribute("64")]
public abstract virtual object get_accFocus();
    [TypeLibFuncAttribute("64")]
[DispIdAttribute("-5012")]
public abstract virtual object get_accSelection();
    [TypeLibFuncAttribute("64")]
[DispIdAttribute("-5013")]
public abstract virtual string get_accDefaultAction(object varChild);
    [DispIdAttribute("-5014")]
[TypeLibFuncAttribute("64")]
public abstract virtual void accSelect(int flagsSelect, object varChild);
    [DispIdAttribute("-5015")]
[TypeLibFuncAttribute("64")]
public abstract virtual void accLocation(Int32& pxLeft, Int32& pyTop, Int32& pcxWidth, Int32& pcyHeight, object varChild);
    [DispIdAttribute("-5016")]
[TypeLibFuncAttribute("64")]
public abstract virtual object accNavigate(int navDir, object varStart);
    [DispIdAttribute("-5017")]
[TypeLibFuncAttribute("64")]
public abstract virtual object accHitTest(int xLeft, int yTop);
    [DispIdAttribute("-5018")]
[TypeLibFuncAttribute("64")]
public abstract virtual void accDoDefaultAction(object varChild);
    [TypeLibFuncAttribute("64")]
[DispIdAttribute("-5003")]
public abstract virtual void set_accName(object varChild, string pszName);
    [DispIdAttribute("-5004")]
[TypeLibFuncAttribute("64")]
public abstract virtual void set_accValue(object varChild, string pszValue);
}
[GuidAttribute("40864B73-C4B0-4E9C-9C17-567D130CB413")]
public interface Microsoft.VisualStudio.CommandBars.ICommandBarButtonEvents {
    [DispIdAttribute("1")]
public abstract virtual void Click(CommandBarButton Ctrl, Boolean& CancelDefault);
}
[GuidAttribute("9D13162A-8059-4210-B4E6-306D00FE3C49")]
public interface Microsoft.VisualStudio.CommandBars.ICommandBarComboBoxEvents {
    [DispIdAttribute("1")]
public abstract virtual void Change(CommandBarComboBox Ctrl);
}
[GuidAttribute("37318B32-4553-4B37-B0B9-3A0F8A2C1E60")]
public interface Microsoft.VisualStudio.CommandBars.ICommandBarsEvents {
    [DispIdAttribute("1")]
public abstract virtual void OnUpdate();
}
public enum Microsoft.VisualStudio.CommandBars.MsoBarPosition : Enum {
    public int value__;
    public static MsoBarPosition msoBarLeft;
    public static MsoBarPosition msoBarTop;
    public static MsoBarPosition msoBarRight;
    public static MsoBarPosition msoBarBottom;
    public static MsoBarPosition msoBarFloating;
    public static MsoBarPosition msoBarPopup;
    public static MsoBarPosition msoBarMenuBar;
}
public enum Microsoft.VisualStudio.CommandBars.MsoBarProtection : Enum {
    public int value__;
    public static MsoBarProtection msoBarNoProtection;
    public static MsoBarProtection msoBarNoCustomize;
    public static MsoBarProtection msoBarNoResize;
    public static MsoBarProtection msoBarNoMove;
    public static MsoBarProtection msoBarNoChangeVisible;
    public static MsoBarProtection msoBarNoChangeDock;
    public static MsoBarProtection msoBarNoVerticalDock;
    public static MsoBarProtection msoBarNoHorizontalDock;
}
public enum Microsoft.VisualStudio.CommandBars.MsoBarRow : Enum {
    public int value__;
    public static MsoBarRow msoBarRowFirst;
    public static MsoBarRow msoBarRowLast;
}
public enum Microsoft.VisualStudio.CommandBars.MsoBarType : Enum {
    public int value__;
    public static MsoBarType msoBarTypeNormal;
    public static MsoBarType msoBarTypeMenuBar;
    public static MsoBarType msoBarTypePopup;
}
public enum Microsoft.VisualStudio.CommandBars.MsoButtonState : Enum {
    public int value__;
    public static MsoButtonState msoButtonUp;
    public static MsoButtonState msoButtonDown;
    public static MsoButtonState msoButtonMixed;
}
public enum Microsoft.VisualStudio.CommandBars.MsoButtonStyle : Enum {
    public int value__;
    public static MsoButtonStyle msoButtonAutomatic;
    public static MsoButtonStyle msoButtonIcon;
    public static MsoButtonStyle msoButtonCaption;
    public static MsoButtonStyle msoButtonIconAndCaption;
    public static MsoButtonStyle msoButtonIconAndWrapCaption;
    public static MsoButtonStyle msoButtonIconAndCaptionBelow;
    public static MsoButtonStyle msoButtonWrapCaption;
    public static MsoButtonStyle msoButtonIconAndWrapCaptionBelow;
}
public enum Microsoft.VisualStudio.CommandBars.MsoButtonStyleHidden : Enum {
    public int value__;
    public static MsoButtonStyleHidden msoButtonWrapText;
    public static MsoButtonStyleHidden msoButtonTextBelow;
}
public enum Microsoft.VisualStudio.CommandBars.MsoComboStyle : Enum {
    public int value__;
    public static MsoComboStyle msoComboNormal;
    public static MsoComboStyle msoComboLabel;
}
public enum Microsoft.VisualStudio.CommandBars.MsoCommandBarButtonHyperlinkType : Enum {
    public int value__;
    public static MsoCommandBarButtonHyperlinkType msoCommandBarButtonHyperlinkNone;
    public static MsoCommandBarButtonHyperlinkType msoCommandBarButtonHyperlinkOpen;
    public static MsoCommandBarButtonHyperlinkType msoCommandBarButtonHyperlinkInsertPicture;
}
public enum Microsoft.VisualStudio.CommandBars.MsoControlOLEUsage : Enum {
    public int value__;
    public static MsoControlOLEUsage msoControlOLEUsageNeither;
    public static MsoControlOLEUsage msoControlOLEUsageServer;
    public static MsoControlOLEUsage msoControlOLEUsageClient;
    public static MsoControlOLEUsage msoControlOLEUsageBoth;
}
public enum Microsoft.VisualStudio.CommandBars.MsoControlType : Enum {
    public int value__;
    public static MsoControlType msoControlCustom;
    public static MsoControlType msoControlButton;
    public static MsoControlType msoControlEdit;
    public static MsoControlType msoControlDropdown;
    public static MsoControlType msoControlComboBox;
    public static MsoControlType msoControlButtonDropdown;
    public static MsoControlType msoControlSplitDropdown;
    public static MsoControlType msoControlOCXDropdown;
    public static MsoControlType msoControlGenericDropdown;
    public static MsoControlType msoControlGraphicDropdown;
    public static MsoControlType msoControlPopup;
    public static MsoControlType msoControlGraphicPopup;
    public static MsoControlType msoControlButtonPopup;
    public static MsoControlType msoControlSplitButtonPopup;
    public static MsoControlType msoControlSplitButtonMRUPopup;
    public static MsoControlType msoControlLabel;
    public static MsoControlType msoControlExpandingGrid;
    public static MsoControlType msoControlSplitExpandingGrid;
    public static MsoControlType msoControlGrid;
    public static MsoControlType msoControlGauge;
    public static MsoControlType msoControlGraphicCombo;
    public static MsoControlType msoControlPane;
    public static MsoControlType msoControlActiveX;
    public static MsoControlType msoControlSpinner;
    public static MsoControlType msoControlLabelEx;
    public static MsoControlType msoControlWorkPane;
    public static MsoControlType msoControlAutoCompleteCombo;
}
public enum Microsoft.VisualStudio.CommandBars.MsoMenuAnimation : Enum {
    public int value__;
    public static MsoMenuAnimation msoMenuAnimationNone;
    public static MsoMenuAnimation msoMenuAnimationRandom;
    public static MsoMenuAnimation msoMenuAnimationUnfold;
    public static MsoMenuAnimation msoMenuAnimationSlide;
}
public enum Microsoft.VisualStudio.CommandBars.MsoOLEMenuGroup : Enum {
    public int value__;
    public static MsoOLEMenuGroup msoOLEMenuGroupNone;
    public static MsoOLEMenuGroup msoOLEMenuGroupFile;
    public static MsoOLEMenuGroup msoOLEMenuGroupEdit;
    public static MsoOLEMenuGroup msoOLEMenuGroupContainer;
    public static MsoOLEMenuGroup msoOLEMenuGroupObject;
    public static MsoOLEMenuGroup msoOLEMenuGroupWindow;
    public static MsoOLEMenuGroup msoOLEMenuGroupHelp;
}
public enum Microsoft.VisualStudio.Designer.Interfaces._PROPERTYGRIDOPTION : Enum {
    public int value__;
    public static _PROPERTYGRIDOPTION PGOPT_HOTCOMMANDS;
    public static _PROPERTYGRIDOPTION PGOPT_HELP;
    public static _PROPERTYGRIDOPTION PGOPT_TOOLBAR;
}
public enum Microsoft.VisualStudio.Designer.Interfaces._PROPERTYGRIDSORT : Enum {
    public int value__;
    public static _PROPERTYGRIDSORT PGSORT_NOSORT;
    public static _PROPERTYGRIDSORT PGSORT_ALPHABETICAL;
    public static _PROPERTYGRIDSORT PGSORT_CATEGORIZED;
}
[GuidAttribute("4CC03BF7-4D89-4198-8E4D-17E217CA07B2")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.Designer.Interfaces.IVSMDCodeDomCreator {
    public abstract virtual IVSMDCodeDomProvider CreateCodeDomProvider(object pHier, int itemid);
}
[GuidAttribute("73E59688-C7C4-4A85-AF64-A538754784C5")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.Designer.Interfaces.IVSMDCodeDomProvider {
    public object CodeDomProvider { get; }
    public abstract virtual object get_CodeDomProvider();
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("7494682A-37A0-11D2-A273-00C04F8EF4FF")]
public interface Microsoft.VisualStudio.Designer.Interfaces.IVSMDDesigner {
    public Guid CommandGuid { get; }
    public object View { get; }
    public object SelectionContainer { get; }
    public abstract virtual Guid get_CommandGuid();
    public abstract virtual object get_View();
    public abstract virtual object get_SelectionContainer();
    public abstract virtual void Dispose();
    public abstract virtual void Flush();
    public abstract virtual void GetLoadError();
}
[GuidAttribute("74946834-37A0-11D2-A273-00C04F8EF4FF")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.Designer.Interfaces.IVSMDDesignerLoader {
    public abstract virtual void Dispose();
    public abstract virtual string GetEditorCaption(int status);
    public abstract virtual void Initialize(object pSp, object pHier, int itemid, object pDocData);
    public abstract virtual void SetBaseEditorCaption(string pwszCaption);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("74946829-37A0-11D2-A273-00C04F8EF4FF")]
public interface Microsoft.VisualStudio.Designer.Interfaces.IVSMDDesignerService {
    public string DesignViewAttribute { get; }
    public abstract virtual string get_DesignViewAttribute();
    public abstract virtual IVSMDDesigner CreateDesigner(object pSp, object pDesignerLoader);
    public abstract virtual IVSMDDesigner CreateDesignerForClass(object pSp, string pwszComponentClass);
    public abstract virtual object CreateDesignerLoader(string pwszCodeStreamClass);
    public abstract virtual string GetDesignerLoaderClassForFile(string pwszFileName);
    public abstract virtual void RegisterDesignViewAttribute(object pHier, int itemid, int dwClass, string pwszAttributeValue);
}
[ComConversionLossAttribute]
[InterfaceTypeAttribute("1")]
[GuidAttribute("7494683C-37A0-11D2-A273-00C04F8EF4FF")]
public interface Microsoft.VisualStudio.Designer.Interfaces.IVSMDPerPropertyBrowsing {
    public abstract virtual void GetPropertyAttributes(int dispid, UInt32& pceltAttrs, IntPtr ppbstrTypeNames, IntPtr ppvarAttrValues);
}
[GuidAttribute("74946810-37A0-11D2-A273-00C04F8EF4FF")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.Designer.Interfaces.IVSMDPropertyBrowser {
    [DispIdAttribute("1610678272")]
public UInt32 WindowGlyphResourceID { get; }
    public abstract virtual UInt32 get_WindowGlyphResourceID();
    public abstract virtual IVSMDPropertyGrid CreatePropertyGrid();
    public abstract virtual void Refresh();
}
[GuidAttribute("74946837-37A0-11D2-A273-00C04F8EF4FF")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.Designer.Interfaces.IVSMDPropertyGrid {
    public bool CommandsVisible { get; }
    public IntPtr Handle { get; }
    public _PROPERTYGRIDSORT GridSort { get; public set; }
    public string SelectedPropertyName { get; }
    public abstract virtual bool get_CommandsVisible();
    public abstract virtual IntPtr get_Handle();
    public abstract virtual _PROPERTYGRIDSORT get_GridSort();
    public abstract virtual void set_GridSort(_PROPERTYGRIDSORT value);
    public abstract virtual string get_SelectedPropertyName();
    public abstract virtual void Dispose();
    public abstract virtual object GetOption(_PROPERTYGRIDOPTION option);
    public abstract virtual void Refresh();
    public abstract virtual void SetOption(_PROPERTYGRIDOPTION option, object vtOption);
    public abstract virtual void SetSelectedObjects(int cObjects, IntPtr[] arrPunk);
}
[AttributeUsageAttribute("1024")]
public class Microsoft.VisualStudio.Interop.BaseTypeForIDLAttribute : Attribute {
    [CompilerGeneratedAttribute]
private Type <BaseType>k__BackingField;
    public Type BaseType { get; }
    public BaseTypeForIDLAttribute(Type baseType);
    [CompilerGeneratedAttribute]
public Type get_BaseType();
}
[AttributeUsageAttribute("5404")]
internal class Microsoft.VisualStudio.Interop.ExcludeFromIDLAttribute : Attribute {
}
[AttributeUsageAttribute("5148")]
internal class Microsoft.VisualStudio.Interop.ExcludeFromProxyBuildAttribute : Attribute {
}
[FlagsAttribute]
public enum Microsoft.VisualStudio.OLE.Interop._OLECADVF : Enum {
    public int value__;
    public static _OLECADVF olecadvfModal;
    public static _OLECADVF olecadvfRedrawOff;
    public static _OLECADVF olecadvfWarningsOff;
    public static _OLECADVF olecadvfRecording;
}
public enum Microsoft.VisualStudio.OLE.Interop._OLECCONTEXT : Enum {
    public int value__;
    public static _OLECCONTEXT oleccontextAll;
    public static _OLECCONTEXT oleccontextMine;
    public static _OLECCONTEXT oleccontextOthers;
}
[FlagsAttribute]
public enum Microsoft.VisualStudio.OLE.Interop._OLECHOSTF : Enum {
    public int value__;
    public static _OLECHOSTF olechostfExclusiveBorderSpace;
}
[FlagsAttribute]
public enum Microsoft.VisualStudio.OLE.Interop._OLECRF : Enum {
    public int value__;
    public static _OLECRF olecrfNeedIdleTime;
    public static _OLECRF olecrfNeedPeriodicIdleTime;
    public static _OLECRF olecrfPreTranslateKeys;
    public static _OLECRF olecrfPreTranslateAll;
    public static _OLECRF olecrfNeedSpecActiveNotifs;
    public static _OLECRF olecrfNeedAllActiveNotifs;
    public static _OLECRF olecrfExclusiveBorderSpace;
    public static _OLECRF olecrfExclusiveActivation;
}
public enum Microsoft.VisualStudio.OLE.Interop._OLECSTATE : Enum {
    public int value__;
    public static _OLECSTATE olecstateModal;
    public static _OLECSTATE olecstateRedrawOff;
    public static _OLECSTATE olecstateWarningsOff;
    public static _OLECSTATE olecstateRecording;
}
public enum Microsoft.VisualStudio.OLE.Interop._OLECWINDOW : Enum {
    public int value__;
    public static _OLECWINDOW olecWindowFrameToplevel;
    public static _OLECWINDOW olecWindowFrameOwner;
    public static _OLECWINDOW olecWindowComponent;
    public static _OLECWINDOW olecWindowDlgOwner;
}
public enum Microsoft.VisualStudio.OLE.Interop._OLEGAC : Enum {
    public int value__;
    public static _OLEGAC olegacActive;
    public static _OLEGAC olegacTracking;
    public static _OLEGAC olegacTrackingOrActive;
}
[FlagsAttribute]
public enum Microsoft.VisualStudio.OLE.Interop._OLEIDLEF : Enum {
    public int value__;
    public static _OLEIDLEF oleidlefPeriodic;
    public static _OLEIDLEF oleidlefNonPeriodic;
    public static _OLEIDLEF oleidlefPriority;
    public static _OLEIDLEF oleidlefAll;
}
public enum Microsoft.VisualStudio.OLE.Interop._OLELOOP : Enum {
    public int value__;
    public static _OLELOOP oleloopFocusWait;
    public static _OLELOOP oleloopDoEvents;
    public static _OLELOOP oleloopDebug;
    public static _OLELOOP oleloopModalForm;
}
[FlagsAttribute]
public enum Microsoft.VisualStudio.OLE.Interop.ACTIVATEFLAGS : Enum {
    public int value__;
    public static ACTIVATEFLAGS ACTIVATE_WINDOWLESS;
}
public enum Microsoft.VisualStudio.OLE.Interop.ADVF : Enum {
    public int value__;
    public static ADVF ADVF_NODATA;
    public static ADVF ADVF_PRIMEFIRST;
    public static ADVF ADVF_ONLYONCE;
    public static ADVF ADVF_DATAONSTOP;
    public static ADVF ADVFCACHE_NOHANDLER;
    public static ADVF ADVFCACHE_FORCEBUILTIN;
    public static ADVF ADVFCACHE_ONSAVE;
}
public enum Microsoft.VisualStudio.OLE.Interop.ApplicationType : Enum {
    public int value__;
    public static ApplicationType ServerApplication;
    public static ApplicationType LibraryApplication;
}
public enum Microsoft.VisualStudio.OLE.Interop.APTTYPE : Enum {
    public int value__;
    public static APTTYPE APTTYPE_CURRENT;
    public static APTTYPE APTTYPE_STA;
    public static APTTYPE APTTYPE_MTA;
    public static APTTYPE APTTYPE_NA;
    public static APTTYPE APTTYPE_MAINSTA;
}
[FlagsAttribute]
public enum Microsoft.VisualStudio.OLE.Interop.BIND_FLAGS : Enum {
    public int value__;
    public static BIND_FLAGS BIND_MAYBOTHERUSER;
    public static BIND_FLAGS BIND_JUSTTESTEXISTENCE;
}
[ComConversionLossAttribute]
public class Microsoft.VisualStudio.OLE.Interop.BIND_OPTS2 : ValueType {
    [ComAliasNameAttribute("Microsoft.VisualStudio.OLE.Interop.DWORD")]
public UInt32 cbStruct;
    [ComAliasNameAttribute("Microsoft.VisualStudio.OLE.Interop.DWORD")]
public UInt32 grfFlags;
    [ComAliasNameAttribute("Microsoft.VisualStudio.OLE.Interop.DWORD")]
public UInt32 grfMode;
    [ComAliasNameAttribute("Microsoft.VisualStudio.OLE.Interop.DWORD")]
public UInt32 dwTickCountDeadline;
    [ComAliasNameAttribute("Microsoft.VisualStudio.OLE.Interop.DWORD")]
public UInt32 dwTrackFlags;
    [ComAliasNameAttribute("Microsoft.VisualStudio.OLE.Interop.DWORD")]
public UInt32 dwClassContext;
    [ComAliasNameAttribute("Microsoft.VisualStudio.OLE.Interop.LCID")]
public UInt32 locale;
    [ComAliasNameAttribute("Microsoft.VisualStudio.OLE.Interop.COSERVERINFO")]
[ComConversionLossAttribute]
public IntPtr pServerInfo;
}
public enum Microsoft.VisualStudio.OLE.Interop.BINDF : Enum {
    public int value__;
    public static BINDF BINDF_ASYNCHRONOUS;
    public static BINDF BINDF_ASYNCSTORAGE;
    public static BINDF BINDF_NOPROGRESSIVERENDERING;
    public static BINDF BINDF_OFFLINEOPERATION;
    public static BINDF BINDF_GETNEWESTVERSION;
    public static BINDF BINDF_NOWRITECACHE;
    public static BINDF BINDF_NEEDFILE;
    public static BINDF BINDF_PULLDATA;
    public static BINDF BINDF_IGNORESECURITYPROBLEM;
    public static BINDF BINDF_RESYNCHRONIZE;
    public static BINDF BINDF_HYPERLINK;
    public static BINDF BINDF_NO_UI;
    public static BINDF BINDF_SILENTOPERATION;
    public static BINDF BINDF_PRAGMA_NO_CACHE;
    public static BINDF BINDF_GETCLASSOBJECT;
    public static BINDF BINDF_RESERVED_1;
    public static BINDF BINDF_FREE_THREADED;
    public static BINDF BINDF_DIRECT_READ;
    public static BINDF BINDF_FORMS_SUBMIT;
    public static BINDF BINDF_GETFROMCACHE_IF_NET_FAIL;
    public static BINDF BINDF_FROMURLMON;
    public static BINDF BINDF_FWD_BACK;
    public static BINDF BINDF_PREFERDEFAULTHANDLER;
    public static BINDF BINDF_ENFORCERESTRICTED;
}
public class Microsoft.VisualStudio.OLE.Interop.BINDINFO : ValueType {
    [ComAliasNameAttribute("Microsoft.VisualStudio.OLE.Interop.ULONG")]
public UInt32 cbSize;
    public string szExtraInfo;
    [ComAliasNameAttribute("Microsoft.VisualStudio.OLE.Interop.STGMEDIUM")]
public STGMEDIUM stgmedData;
    [ComAliasNameAttribute("Microsoft.VisualStudio.OLE.Interop.DWORD")]
public UInt32 grfBindInfoF;
    [ComAliasNameAttribute("Microsoft.VisualStudio.OLE.Interop.DWORD")]
public UInt32 dwBindVerb;
    public string szCustomVerb;
    [ComAliasNameAttribute("Microsoft.VisualStudio.OLE.Interop.DWORD")]
public UInt32 cbstgmedData;
    [ComAliasNameAttribute("Microsoft.VisualStudio.OLE.Interop.DWORD")]
public UInt32 dwOptions;
    [ComAliasNameAttribute("Microsoft.VisualStudio.OLE.Interop.DWORD")]
public UInt32 dwOptionsFlags;
    [ComAliasNameAttribute("Microsoft.VisualStudio.OLE.Interop.DWORD")]
public UInt32 dwCodePage;
    [ComAliasNameAttribute("Microsoft.VisualStudio.OLE.Interop.SECURITY_ATTRIBUTES")]
public SECURITY_ATTRIBUTES securityAttributes;
    public Guid iid;
    public object punk;
    [ComAliasNameAttribute("Microsoft.VisualStudio.OLE.Interop.DWORD")]
public UInt32 dwReserved;
}
public enum Microsoft.VisualStudio.OLE.Interop.BINDINFO_OPTIONS : Enum {
    public int value__;
    public static BINDINFO_OPTIONS BINDINFO_OPTIONS_WININETFLAG;
    public static BINDINFO_OPTIONS BINDINFO_OPTIONS_ENABLE_UTF8;
    public static BINDINFO_OPTIONS BINDINFO_OPTIONS_DISABLE_UTF8;
    public static BINDINFO_OPTIONS BINDINFO_OPTIONS_USE_IE_ENCODING;
    public static BINDINFO_OPTIONS BINDINFO_OPTIONS_BINDTOOBJECT;
}
public enum Microsoft.VisualStudio.OLE.Interop.BINDINFOF : Enum {
    public int value__;
    public static BINDINFOF BINDINFOF_URLENCODESTGMEDDATA;
    public static BINDINFOF BINDINFOF_URLENCODEDEXTRAINFO;
}
public enum Microsoft.VisualStudio.OLE.Interop.BINDSPEED : Enum {
    public int value__;
    public static BINDSPEED BINDSPEED_INDEFINITE;
    public static BINDSPEED BINDSPEED_MODERATE;
    public static BINDSPEED BINDSPEED_IMMEDIATE;
}
public enum Microsoft.VisualStudio.OLE.Interop.BINDSTATUS : Enum {
    public int value__;
    public static BINDSTATUS BINDSTATUS_FINDINGRESOURCE;
    public static BINDSTATUS BINDSTATUS_CONNECTING;
    public static BINDSTATUS BINDSTATUS_REDIRECTING;
    public static BINDSTATUS BINDSTATUS_BEGINDOWNLOADDATA;
    public static BINDSTATUS BINDSTATUS_DOWNLOADINGDATA;
    public static BINDSTATUS BINDSTATUS_ENDDOWNLOADDATA;
    public static BINDSTATUS BINDSTATUS_BEGINDOWNLOADCOMPONENTS;
    public static BINDSTATUS BINDSTATUS_INSTALLINGCOMPONENTS;
    public static BINDSTATUS BINDSTATUS_ENDDOWNLOADCOMPONENTS;
    public static BINDSTATUS BINDSTATUS_USINGCACHEDCOPY;
    public static BINDSTATUS BINDSTATUS_SENDINGREQUEST;
    public static BINDSTATUS BINDSTATUS_CLASSIDAVAILABLE;
    public static BINDSTATUS BINDSTATUS_MIMETYPEAVAILABLE;
    public static BINDSTATUS BINDSTATUS_CACHEFILENAMEAVAILABLE;
    public static BINDSTATUS BINDSTATUS_BEGINSYNCOPERATION;
    public static BINDSTATUS BINDSTATUS_ENDSYNCOPERATION;
    public static BINDSTATUS BINDSTATUS_BEGINUPLOADDATA;
    public static BINDSTATUS BINDSTATUS_UPLOADINGDATA;
    public static BINDSTATUS BINDSTATUS_ENDUPLOADDATA;
    public static BINDSTATUS BINDSTATUS_PROTOCOLCLASSID;
    public static BINDSTATUS BINDSTATUS_ENCODING;
    public static BINDSTATUS BINDSTATUS_VERIFIEDMIMETYPEAVAILABLE;
    public static BINDSTATUS BINDSTATUS_CLASSINSTALLLOCATION;
    public static BINDSTATUS BINDSTATUS_DECODING;
    public static BINDSTATUS BINDSTATUS_LOADINGMIMEHANDLER;
    public static BINDSTATUS BINDSTATUS_CONTENTDISPOSITIONATTACH;
    public static BINDSTATUS BINDSTATUS_FILTERREPORTMIMETYPE;
    public static BINDSTATUS BINDSTATUS_CLSIDCANINSTANTIATE;
    public static BINDSTATUS BINDSTATUS_IUNKNOWNAVAILABLE;
    public static BINDSTATUS BINDSTATUS_DIRECTBIND;
    public static BINDSTATUS BINDSTATUS_RAWMIMETYPE;
    public static BINDSTATUS BINDSTATUS_PROXYDETECTING;
    public static BINDSTATUS BINDSTATUS_ACCEPTRANGES;
    public static BINDSTATUS BINDSTATUS_COOKIE_SENT;
    public static BINDSTATUS BINDSTATUS_COMPACT_POLICY_RECEIVED;
    public static BINDSTATUS BINDSTATUS_COOKIE_SUPPRESSED;
    public static BINDSTATUS BINDSTATUS_COOKIE_STATE_UNKNOWN;
    public static BINDSTATUS BINDSTATUS_COOKIE_STATE_ACCEPT;
    public static BINDSTATUS BINDSTATUS_COOKIE_STATE_REJECT;
    public static BINDSTATUS BINDSTATUS_COOKIE_STATE_PROMPT;
    public static BINDSTATUS BINDSTATUS_COOKIE_STATE_LEASH;
    public static BINDSTATUS BINDSTATUS_COOKIE_STATE_DOWNGRADE;
    public static BINDSTATUS BINDSTATUS_POLICY_HREF;
    public static BINDSTATUS BINDSTATUS_P3P_HEADER;
    public static BINDSTATUS BINDSTATUS_SESSION_COOKIE_RECEIVED;
    public static BINDSTATUS BINDSTATUS_PERSISTENT_COOKIE_RECEIVED;
    public static BINDSTATUS BINDSTATUS_SESSION_COOKIES_ALLOWED;
}
public enum Microsoft.VisualStudio.OLE.Interop.BINDSTRING : Enum {
    public int value__;
    public static BINDSTRING BINDSTRING_HEADERS;
    public static BINDSTRING BINDSTRING_ACCEPT_MIMES;
    public static BINDSTRING BINDSTRING_EXTRA_URL;
    public static BINDSTRING BINDSTRING_LANGUAGE;
    public static BINDSTRING BINDSTRING_USERNAME;
    public static BINDSTRING BINDSTRING_PASSWORD;
    public static BINDSTRING BINDSTRING_UA_PIXELS;
    public static BINDSTRING BINDSTRING_UA_COLOR;
    public static BINDSTRING BINDSTRING_OS;
    public static BINDSTRING BINDSTRING_USER_AGENT;
    public static BINDSTRING BINDSTRING_ACCEPT_ENCODINGS;
    public static BINDSTRING BINDSTRING_POST_COOKIE;
    public static BINDSTRING BINDSTRING_POST_DATA_MIME;
    public static BINDSTRING BINDSTRING_URL;
    public static BINDSTRING BINDSTRING_IID;
    public static BINDSTRING BINDSTRING_FLAG_BIND_TO_OBJECT;
    public static BINDSTRING BINDSTRING_PTR_BIND_CONTEXT;
}
public enum Microsoft.VisualStudio.OLE.Interop.BINDVERB : Enum {
    public int value__;
    public static BINDVERB BINDVERB_GET;
    public static BINDVERB BINDVERB_POST;
    public static BINDVERB BINDVERB_PUT;
    public static BINDVERB BINDVERB_CUSTOM;
}
[ComConversionLossAttribute]
public class Microsoft.VisualStudio.OLE.Interop.BLOB : ValueType {
    [ComAliasNameAttribute("Microsoft.VisualStudio.OLE.Interop.ULONG")]
public UInt32 cbSize;
    [ComConversionLossAttribute]
public IntPtr pBlobData;
}
public enum Microsoft.VisualStudio.OLE.Interop.BSCF : Enum {
    public int value__;
    public static BSCF BSCF_FIRSTDATANOTIFICATION;
    public static BSCF BSCF_INTERMEDIATEDATANOTIFICATION;
    public static BSCF BSCF_LASTDATANOTIFICATION;
    public static BSCF BSCF_DATAFULLYAVAILABLE;
    public static BSCF BSCF_AVAILABLEDATASIZEUNKNOWN;
}
[ComConversionLossAttribute]
public class Microsoft.VisualStudio.OLE.Interop.BSTRBLOB : ValueType {
    [ComAliasNameAttribute("Microsoft.VisualStudio.OLE.Interop.ULONG")]
public UInt32 cbSize;
    [ComConversionLossAttribute]
public IntPtr pData;
}
[ComConversionLossAttribute]
public class Microsoft.VisualStudio.OLE.Interop.CABOOL : ValueType {
    [ComAliasNameAttribute("Microsoft.VisualStudio.OLE.Interop.ULONG")]
public UInt32 cElems;
    [ComConversionLossAttribute]
public IntPtr pElems;
}
[ComConversionLossAttribute]
public class Microsoft.VisualStudio.OLE.Interop.CABSTR : ValueType {
    [ComAliasNameAttribute("Microsoft.VisualStudio.OLE.Interop.ULONG")]
public UInt32 cElems;
    [ComConversionLossAttribute]
public IntPtr pElems;
}
[ComConversionLossAttribute]
public class Microsoft.VisualStudio.OLE.Interop.CABSTRBLOB : ValueType {
    [ComAliasNameAttribute("Microsoft.VisualStudio.OLE.Interop.ULONG")]
public UInt32 cElems;
    [ComConversionLossAttribute]
[ComAliasNameAttribute("Microsoft.VisualStudio.OLE.Interop.BSTRBLOB")]
public IntPtr pElems;
}
[ComConversionLossAttribute]
public class Microsoft.VisualStudio.OLE.Interop.CAC : ValueType {
    [ComAliasNameAttribute("Microsoft.VisualStudio.OLE.Interop.ULONG")]
public UInt32 cElems;
    [ComConversionLossAttribute]
public IntPtr pElems;
}
[ComConversionLossAttribute]
public class Microsoft.VisualStudio.OLE.Interop.CACLIPDATA : ValueType {
    [ComAliasNameAttribute("Microsoft.VisualStudio.OLE.Interop.ULONG")]
public UInt32 cElems;
    [ComAliasNameAttribute("Microsoft.VisualStudio.OLE.Interop.CLIPDATA")]
[ComConversionLossAttribute]
public IntPtr pElems;
}
[ComConversionLossAttribute]
public class Microsoft.VisualStudio.OLE.Interop.CACLSID : ValueType {
    [ComAliasNameAttribute("Microsoft.VisualStudio.OLE.Interop.ULONG")]
public UInt32 cElems;
    [ComConversionLossAttribute]
public IntPtr pElems;
}
[ComConversionLossAttribute]
public class Microsoft.VisualStudio.OLE.Interop.CACY : ValueType {
    [ComAliasNameAttribute("Microsoft.VisualStudio.OLE.Interop.ULONG")]
public UInt32 cElems;
    [ComConversionLossAttribute]
public IntPtr pElems;
}
[ComConversionLossAttribute]
public class Microsoft.VisualStudio.OLE.Interop.CADATE : ValueType {
    [ComAliasNameAttribute("Microsoft.VisualStudio.OLE.Interop.ULONG")]
public UInt32 cElems;
    [ComConversionLossAttribute]
public IntPtr pElems;
}
[ComConversionLossAttribute]
public class Microsoft.VisualStudio.OLE.Interop.CADBL : ValueType {
    [ComAliasNameAttribute("Microsoft.VisualStudio.OLE.Interop.ULONG")]
public UInt32 cElems;
    [ComConversionLossAttribute]
public IntPtr pElems;
}
[ComConversionLossAttribute]
public class Microsoft.VisualStudio.OLE.Interop.CADWORD : ValueType {
    [ComAliasNameAttribute("Microsoft.VisualStudio.OLE.Interop.ULONG")]
public UInt32 cElems;
    [ComAliasNameAttribute("Microsoft.VisualStudio.OLE.Interop.DWORD")]
[ComConversionLossAttribute]
public IntPtr pElems;
}
[ComConversionLossAttribute]
public class Microsoft.VisualStudio.OLE.Interop.CAFILETIME : ValueType {
    [ComAliasNameAttribute("Microsoft.VisualStudio.OLE.Interop.ULONG")]
public UInt32 cElems;
    [ComConversionLossAttribute]
[ComAliasNameAttribute("Microsoft.VisualStudio.OLE.Interop.FILETIME")]
public IntPtr pElems;
}
[ComConversionLossAttribute]
public class Microsoft.VisualStudio.OLE.Interop.CAFLT : ValueType {
    [ComAliasNameAttribute("Microsoft.VisualStudio.OLE.Interop.ULONG")]
public UInt32 cElems;
    [ComConversionLossAttribute]
[ComAliasNameAttribute("Microsoft.VisualStudio.OLE.Interop.FLOAT")]
public IntPtr pElems;
}
[ComConversionLossAttribute]
public class Microsoft.VisualStudio.OLE.Interop.CAH : ValueType {
    [ComAliasNameAttribute("Microsoft.VisualStudio.OLE.Interop.ULONG")]
public UInt32 cElems;
    [ComAliasNameAttribute("Microsoft.VisualStudio.OLE.Interop.LARGE_INTEGER")]
[ComConversionLossAttribute]
public IntPtr pElems;
}
[ComConversionLossAttribute]
public class Microsoft.VisualStudio.OLE.Interop.CAI : ValueType {
    [ComAliasNameAttribute("Microsoft.VisualStudio.OLE.Interop.ULONG")]
public UInt32 cElems;
    [ComConversionLossAttribute]
[ComAliasNameAttribute("Microsoft.VisualStudio.OLE.Interop.SHORT")]
public IntPtr pElems;
}
[ComConversionLossAttribute]
public class Microsoft.VisualStudio.OLE.Interop.CAL : ValueType {
    [ComAliasNameAttribute("Microsoft.VisualStudio.OLE.Interop.ULONG")]
public UInt32 cElems;
    [ComConversionLossAttribute]
[ComAliasNameAttribute("Microsoft.VisualStudio.OLE.Interop.LONG")]
public IntPtr pElems;
}
public enum Microsoft.VisualStudio.OLE.Interop.CALLCONV : Enum {
    public int value__;
    public static CALLCONV CC_FASTCALL;
    public static CALLCONV CC_CDECL;
    public static CALLCONV CC_MSCPASCAL;
    public static CALLCONV CC_PASCAL;
    public static CALLCONV CC_MACPASCAL;
    public static CALLCONV CC_STDCALL;
    public static CALLCONV CC_FPFASTCALL;
    public static CALLCONV CC_SYSCALL;
    public static CALLCONV CC_MPWCDECL;
    public static CALLCONV CC_MPWPASCAL;
    public static CALLCONV CC_MAX;
}
public enum Microsoft.VisualStudio.OLE.Interop.CALLTYPE : Enum {
    public int value__;
    public static CALLTYPE CALLTYPE_TOPLEVEL;
    public static CALLTYPE CALLTYPE_NESTED;
    public static CALLTYPE CALLTYPE_ASYNC;
    public static CALLTYPE CALLTYPE_TOPLEVEL_CALLPENDING;
    public static CALLTYPE CALLTYPE_ASYNC_CALLPENDING;
}
[ComConversionLossAttribute]
public class Microsoft.VisualStudio.OLE.Interop.CALPOLESTR : ValueType {
    [ComAliasNameAttribute("Microsoft.VisualStudio.OLE.Interop.ULONG")]
public UInt32 cElems;
    [ComAliasNameAttribute("Microsoft.VisualStudio.OLE.Interop.LPOLESTR")]
[ComConversionLossAttribute]
public IntPtr pElems;
}
[ComConversionLossAttribute]
public class Microsoft.VisualStudio.OLE.Interop.CALPSTR : ValueType {
    [ComAliasNameAttribute("Microsoft.VisualStudio.OLE.Interop.ULONG")]
public UInt32 cElems;
    [ComConversionLossAttribute]
public IntPtr pElems;
}
[ComConversionLossAttribute]
public class Microsoft.VisualStudio.OLE.Interop.CALPWSTR : ValueType {
    [ComAliasNameAttribute("Microsoft.VisualStudio.OLE.Interop.ULONG")]
public UInt32 cElems;
    [ComConversionLossAttribute]
public IntPtr pElems;
}
[ComConversionLossAttribute]
public class Microsoft.VisualStudio.OLE.Interop.CAPROPVARIANT : ValueType {
    [ComAliasNameAttribute("Microsoft.VisualStudio.OLE.Interop.ULONG")]
public UInt32 cElems;
    [ComConversionLossAttribute]
[ComAliasNameAttribute("Microsoft.VisualStudio.OLE.Interop.PROPVARIANT")]
public IntPtr pElems;
}
[ComConversionLossAttribute]
public class Microsoft.VisualStudio.OLE.Interop.CASCODE : ValueType {
    [ComAliasNameAttribute("Microsoft.VisualStudio.OLE.Interop.ULONG")]
public UInt32 cElems;
    [ComConversionLossAttribute]
public IntPtr pElems;
}
[ComConversionLossAttribute]
public class Microsoft.VisualStudio.OLE.Interop.CAUB : ValueType {
    [ComAliasNameAttribute("Microsoft.VisualStudio.OLE.Interop.ULONG")]
public UInt32 cElems;
    [ComAliasNameAttribute("Microsoft.VisualStudio.OLE.Interop.UCHAR")]
[ComConversionLossAttribute]
public IntPtr pElems;
}
[ComConversionLossAttribute]
public class Microsoft.VisualStudio.OLE.Interop.CAUH : ValueType {
    [ComAliasNameAttribute("Microsoft.VisualStudio.OLE.Interop.ULONG")]
public UInt32 cElems;
    [ComAliasNameAttribute("Microsoft.VisualStudio.OLE.Interop.ULARGE_INTEGER")]
[ComConversionLossAttribute]
public IntPtr pElems;
}
[ComConversionLossAttribute]
public class Microsoft.VisualStudio.OLE.Interop.CAUI : ValueType {
    [ComAliasNameAttribute("Microsoft.VisualStudio.OLE.Interop.ULONG")]
public UInt32 cElems;
    [ComConversionLossAttribute]
[ComAliasNameAttribute("Microsoft.VisualStudio.OLE.Interop.USHORT")]
public IntPtr pElems;
}
[ComConversionLossAttribute]
public class Microsoft.VisualStudio.OLE.Interop.CAUL : ValueType {
    [ComAliasNameAttribute("Microsoft.VisualStudio.OLE.Interop.ULONG")]
public UInt32 cElems;
    [ComAliasNameAttribute("Microsoft.VisualStudio.OLE.Interop.ULONG")]
[ComConversionLossAttribute]
public IntPtr pElems;
}
[ComConversionLossAttribute]
public class Microsoft.VisualStudio.OLE.Interop.CAUUID : ValueType {
    [ComAliasNameAttribute("Microsoft.VisualStudio.OLE.Interop.ULONG")]
public UInt32 cElems;
    [ComConversionLossAttribute]
public IntPtr pElems;
}
public enum Microsoft.VisualStudio.OLE.Interop.CHANGEKIND : Enum {
    public int value__;
    public static CHANGEKIND CHANGEKIND_ADDMEMBER;
    public static CHANGEKIND CHANGEKIND_DELETEMEMBER;
    public static CHANGEKIND CHANGEKIND_SETNAMES;
    public static CHANGEKIND CHANGEKIND_SETDOCUMENTATION;
    public static CHANGEKIND CHANGEKIND_GENERAL;
    public static CHANGEKIND CHANGEKIND_INVALIDATE;
    public static CHANGEKIND CHANGEKIND_CHANGEFAILED;
    public static CHANGEKIND CHANGEKIND_MAX;
}
public enum Microsoft.VisualStudio.OLE.Interop.CIP_STATUS : Enum {
    public int value__;
    public static CIP_STATUS CIP_DISK_FULL;
    public static CIP_STATUS CIP_ACCESS_DENIED;
    public static CIP_STATUS CIP_NEWER_VERSION_EXISTS;
    public static CIP_STATUS CIP_OLDER_VERSION_EXISTS;
    public static CIP_STATUS CIP_NAME_CONFLICT;
    public static CIP_STATUS CIP_TRUST_VERIFICATION_COMPONENT_MISSING;
    public static CIP_STATUS CIP_EXE_SELF_REGISTERATION_TIMEOUT;
    public static CIP_STATUS CIP_UNSAFE_TO_ABORT;
    public static CIP_STATUS CIP_NEED_REBOOT;
}
[ComConversionLossAttribute]
public class Microsoft.VisualStudio.OLE.Interop.CLEANLOCALSTORAGE : ValueType {
    public object pInterface;
    [ComConversionLossAttribute]
public IntPtr pStorage;
    [ComAliasNameAttribute("Microsoft.VisualStudio.OLE.Interop.DWORD")]
public UInt32 Flags;
}
[ComConversionLossAttribute]
public class Microsoft.VisualStudio.OLE.Interop.CLIPDATA : ValueType {
    [ComAliasNameAttribute("Microsoft.VisualStudio.OLE.Interop.ULONG")]
public UInt32 cbSize;
    public int ulClipFmt;
    [ComConversionLossAttribute]
public IntPtr pClipData;
}
public enum Microsoft.VisualStudio.OLE.Interop.CLSCTX : Enum {
    public int value__;
    public static CLSCTX CLSCTX_INPROC_SERVER;
    public static CLSCTX CLSCTX_INPROC_HANDLER;
    public static CLSCTX CLSCTX_LOCAL_SERVER;
    public static CLSCTX CLSCTX_INPROC_SERVER16;
    public static CLSCTX CLSCTX_REMOTE_SERVER;
    public static CLSCTX CLSCTX_INPROC_HANDLER16;
    public static CLSCTX CLSCTX_RESERVED1;
    public static CLSCTX CLSCTX_RESERVED2;
    public static CLSCTX CLSCTX_RESERVED3;
    public static CLSCTX CLSCTX_RESERVED4;
    public static CLSCTX CLSCTX_NO_CODE_DOWNLOAD;
    public static CLSCTX CLSCTX_RESERVED5;
    public static CLSCTX CLSCTX_NO_CUSTOM_MARSHAL;
    public static CLSCTX CLSCTX_ENABLE_CODE_DOWNLOAD;
    public static CLSCTX CLSCTX_NO_FAILURE_LOG;
    public static CLSCTX CLSCTX_DISABLE_AAA;
    public static CLSCTX CLSCTX_ENABLE_AAA;
    public static CLSCTX CLSCTX_FROM_DEFAULT_CONTEXT;
}
[ComConversionLossAttribute]
public class Microsoft.VisualStudio.OLE.Interop.COAUTHIDENTITY : ValueType {
    [ComConversionLossAttribute]
[ComAliasNameAttribute("Microsoft.VisualStudio.OLE.Interop.USHORT")]
public IntPtr User;
    [ComAliasNameAttribute("Microsoft.VisualStudio.OLE.Interop.ULONG")]
public UInt32 UserLength;
    [ComAliasNameAttribute("Microsoft.VisualStudio.OLE.Interop.USHORT")]
[ComConversionLossAttribute]
public IntPtr Domain;
    [ComAliasNameAttribute("Microsoft.VisualStudio.OLE.Interop.ULONG")]
public UInt32 DomainLength;
    [ComAliasNameAttribute("Microsoft.VisualStudio.OLE.Interop.USHORT")]
[ComConversionLossAttribute]
public IntPtr Password;
    [ComAliasNameAttribute("Microsoft.VisualStudio.OLE.Interop.ULONG")]
public UInt32 PasswordLength;
    [ComAliasNameAttribute("Microsoft.VisualStudio.OLE.Interop.ULONG")]
public UInt32 Flags;
}
[ComConversionLossAttribute]
public class Microsoft.VisualStudio.OLE.Interop.COAUTHINFO : ValueType {
    [ComAliasNameAttribute("Microsoft.VisualStudio.OLE.Interop.DWORD")]
public UInt32 dwAuthnSvc;
    [ComAliasNameAttribute("Microsoft.VisualStudio.OLE.Interop.DWORD")]
public UInt32 dwAuthzSvc;
    public string pwszServerPrincName;
    [ComAliasNameAttribute("Microsoft.VisualStudio.OLE.Interop.DWORD")]
public UInt32 dwAuthnLevel;
    [ComAliasNameAttribute("Microsoft.VisualStudio.OLE.Interop.DWORD")]
public UInt32 dwImpersonationLevel;
    [ComAliasNameAttribute("Microsoft.VisualStudio.OLE.Interop.COAUTHIDENTITY")]
[ComConversionLossAttribute]
public IntPtr pAuthIdentityData;
    [ComAliasNameAttribute("Microsoft.VisualStudio.OLE.Interop.DWORD")]
public UInt32 dwCapabilities;
}
public class Microsoft.VisualStudio.OLE.Interop.CONNECTDATA : ValueType {
    public object punk;
    [ComAliasNameAttribute("Microsoft.VisualStudio.OLE.Interop.DWORD")]
public UInt32 dwCookie;
}
public enum Microsoft.VisualStudio.OLE.Interop.Constants : Enum {
    public int value__;
    public static Constants OLECMDSTATE_DISABLED;
    public static Constants OLECMDSTATE_UP;
    public static Constants OLECMDSTATE_DOWN;
    public static Constants OLECMDSTATE_NINCHED;
    public static Constants OLECMDSTATE_INVISIBLE;
    public static Constants OLECONTEXT_NULLMENU;
    public static Constants MSOCMDSTATE_DISABLED;
    public static Constants MSOCMDSTATE_UP;
    public static Constants MSOCMDSTATE_DOWN;
    public static Constants MSOCMDSTATE_NINCHED;
    public static Constants MSOCMDSTATE_INVISIBLE;
    public static Constants OLECMDERR_E_FIRST;
    public static Constants OLECMDERR_E_NOTSUPPORTED;
    public static Constants OLECMDERR_E_DISABLED;
    public static Constants OLECMDERR_E_NOHELP;
    public static Constants OLECMDERR_E_CANCELED;
    public static Constants OLECMDERR_E_UNKNOWNGROUP;
    public static Constants MSOCMDERR_E_FIRST;
    public static Constants MSOCMDERR_E_NOTSUPPORTED;
    public static Constants MSOCMDERR_E_DISABLED;
    public static Constants MSOCMDERR_E_NOHELP;
    public static Constants MSOCMDERR_E_CANCELED;
    public static Constants MSOCMDERR_E_UNKNOWNGROUP;
    public static Constants MSOCMDF_SUPPORTED;
    public static Constants MSOCMDF_ENABLED;
    public static Constants MSOCMDF_LATCHED;
    public static Constants MSOCMDF_NINCHED;
    public static Constants MSOCMDTEXTF_NONE;
    public static Constants MSOCMDTEXTF_NAME;
    public static Constants MSOCMDTEXTF_STATUS;
    public static Constants MSOCMDEXECOPT_DODEFAULT;
    public static Constants MSOCMDEXECOPT_PROMPTUSER;
    public static Constants MSOCMDEXECOPT_DONTPROMPTUSER;
    public static Constants MSOCMDEXECOPT_SHOWHELP;
    public static Constants MSOCMDID_OPEN;
    public static Constants MSOCMDID_NEW;
    public static Constants MSOCMDID_SAVE;
    public static Constants MSOCMDID_SAVEAS;
    public static Constants MSOCMDID_SAVECOPYAS;
    public static Constants MSOCMDID_PRINT;
    public static Constants MSOCMDID_PRINTPREVIEW;
    public static Constants MSOCMDID_PAGESETUP;
    public static Constants MSOCMDID_SPELL;
    public static Constants MSOCMDID_PROPERTIES;
    public static Constants MSOCMDID_CUT;
    public static Constants MSOCMDID_COPY;
    public static Constants MSOCMDID_PASTE;
    public static Constants MSOCMDID_PASTESPECIAL;
    public static Constants MSOCMDID_UNDO;
    public static Constants MSOCMDID_REDO;
    public static Constants MSOCMDID_SELECTALL;
    public static Constants MSOCMDID_CLEARSELECTION;
    public static Constants MSOCMDID_ZOOM;
    public static Constants MSOCMDID_GETZOOMRANGE;
    public static Constants PROPSETHDR_OSVERSION_UNKNOWN;
    public static Constants CCH_MAX_PROPSTG_NAME;
}
[ComConversionLossAttribute]
public class Microsoft.VisualStudio.OLE.Interop.CONTROLINFO : ValueType {
    [ComAliasNameAttribute("Microsoft.VisualStudio.OLE.Interop.ULONG")]
public UInt32 cb;
    [ComConversionLossAttribute]
public IntPtr haccel;
    [ComAliasNameAttribute("Microsoft.VisualStudio.OLE.Interop.USHORT")]
public ushort cAccel;
    [ComAliasNameAttribute("Microsoft.VisualStudio.OLE.Interop.DWORD")]
public UInt32 dwFlags;
}
[ComConversionLossAttribute]
public class Microsoft.VisualStudio.OLE.Interop.COSERVERINFO : ValueType {
    [ComAliasNameAttribute("Microsoft.VisualStudio.OLE.Interop.DWORD")]
public UInt32 dwReserved1;
    public string pwszName;
    [ComConversionLossAttribute]
[ComAliasNameAttribute("Microsoft.VisualStudio.OLE.Interop.COAUTHINFO")]
public IntPtr pAuthInfo;
    [ComAliasNameAttribute("Microsoft.VisualStudio.OLE.Interop.DWORD")]
public UInt32 dwReserved2;
}
public enum Microsoft.VisualStudio.OLE.Interop.CTRLINFO : Enum {
    public int value__;
    public static CTRLINFO CTRLINFO_EATS_RETURN;
    public static CTRLINFO CTRLINFO_EATS_ESCAPE;
}
[ComConversionLossAttribute]
public class Microsoft.VisualStudio.OLE.Interop.CUSTDATA : ValueType {
    [ComAliasNameAttribute("Microsoft.VisualStudio.OLE.Interop.DWORD")]
public UInt32 cCustData;
    [ComAliasNameAttribute("Microsoft.VisualStudio.OLE.Interop.LPCUSTDATAITEM")]
[ComConversionLossAttribute]
public IntPtr prgCustData;
}
public class Microsoft.VisualStudio.OLE.Interop.CUSTDATAITEM : ValueType {
    public Guid guid;
    [ComAliasNameAttribute("Microsoft.VisualStudio.OLE.Interop.VARIANTARG")]
public object varValue;
}
public enum Microsoft.VisualStudio.OLE.Interop.DATADIR : Enum {
    public int value__;
    public static DATADIR DATADIR_GET;
    public static DATADIR DATADIR_SET;
}
public enum Microsoft.VisualStudio.OLE.Interop.DCOM_CALL_STATE : Enum {
    public int value__;
    public static DCOM_CALL_STATE DCOM_NONE;
    public static DCOM_CALL_STATE DCOM_CALL_COMPLETE;
    public static DCOM_CALL_STATE DCOM_CALL_CANCELED;
}
public enum Microsoft.VisualStudio.OLE.Interop.DESCKIND : Enum {
    public int value__;
    public static DESCKIND DESCKIND_NONE;
    public static DESCKIND DESCKIND_FUNCDESC;
    public static DESCKIND DESCKIND_VARDESC;
    public static DESCKIND DESCKIND_TYPECOMP;
    public static DESCKIND DESCKIND_IMPLICITAPPOBJ;
    public static DESCKIND DESCKIND_MAX;
}
public enum Microsoft.VisualStudio.OLE.Interop.DISCARDCACHE : Enum {
    public int value__;
    public static DISCARDCACHE DISCARDCACHE_SAVEIFDIRTY;
    public static DISCARDCACHE DISCARDCACHE_NOSAVE;
}
[ComConversionLossAttribute]
public class Microsoft.VisualStudio.OLE.Interop.DISPPARAMS : ValueType {
    [ComConversionLossAttribute]
[ComAliasNameAttribute("Microsoft.VisualStudio.OLE.Interop.VARIANTARG")]
public IntPtr rgvarg;
    [ComConversionLossAttribute]
[ComAliasNameAttribute("Microsoft.VisualStudio.OLE.Interop.DISPID")]
public IntPtr rgdispidNamedArgs;
    [ComAliasNameAttribute("Microsoft.VisualStudio.OLE.Interop.UINT")]
public UInt32 cArgs;
    [ComAliasNameAttribute("Microsoft.VisualStudio.OLE.Interop.UINT")]
public UInt32 cNamedArgs;
}
public enum Microsoft.VisualStudio.OLE.Interop.DOCMISC : Enum {
    public int value__;
    public static DOCMISC DOCMISC_CANCREATEMULTIPLEVIEWS;
    public static DOCMISC DOCMISC_SUPPORTCOMPLEXRECTANGLES;
    public static DOCMISC DOCMISC_CANTOPENEDIT;
    public static DOCMISC DOCMISC_NOFILESUPPORT;
}
public enum Microsoft.VisualStudio.OLE.Interop.DVASPECT : Enum {
    public int value__;
    public static DVASPECT DVASPECT_CONTENT;
    public static DVASPECT DVASPECT_THUMBNAIL;
    public static DVASPECT DVASPECT_ICON;
    public static DVASPECT DVASPECT_DOCPRINT;
}
public enum Microsoft.VisualStudio.OLE.Interop.DVASPECT2 : Enum {
    public int value__;
    public static DVASPECT2 DVASPECT_OPAQUE;
    public static DVASPECT2 DVASPECT_TRANSPARENT;
}
[FlagsAttribute]
public enum Microsoft.VisualStudio.OLE.Interop.DVASPECTINFOFLAG : Enum {
    public int value__;
    public static DVASPECTINFOFLAG DVASPECTINFOFLAG_CANOPTIMIZE;
}
public class Microsoft.VisualStudio.OLE.Interop.DVEXTENTINFO : ValueType {
    [ComAliasNameAttribute("Microsoft.VisualStudio.OLE.Interop.ULONG")]
public UInt32 cb;
    [ComAliasNameAttribute("Microsoft.VisualStudio.OLE.Interop.DWORD")]
public UInt32 dwExtentMode;
    [ComAliasNameAttribute("Microsoft.VisualStudio.OLE.Interop.SIZEL")]
public SIZEL sizelProposed;
}
public enum Microsoft.VisualStudio.OLE.Interop.DVEXTENTMODE : Enum {
    public int value__;
    public static DVEXTENTMODE DVEXTENT_CONTENT;
    public static DVEXTENTMODE DVEXTENT_INTEGRAL;
}
[ComConversionLossAttribute]
public class Microsoft.VisualStudio.OLE.Interop.DVTARGETDEVICE : ValueType {
    [ComAliasNameAttribute("Microsoft.VisualStudio.OLE.Interop.DWORD")]
public UInt32 tdSize;
    [ComAliasNameAttribute("Microsoft.VisualStudio.OLE.Interop.WORD")]
public ushort tdDriverNameOffset;
    [ComAliasNameAttribute("Microsoft.VisualStudio.OLE.Interop.WORD")]
public ushort tdDeviceNameOffset;
    [ComAliasNameAttribute("Microsoft.VisualStudio.OLE.Interop.WORD")]
public ushort tdPortNameOffset;
    [ComAliasNameAttribute("Microsoft.VisualStudio.OLE.Interop.WORD")]
public ushort tdExtDevmodeOffset;
    [ComConversionLossAttribute]
public IntPtr tdData;
}
public class Microsoft.VisualStudio.OLE.Interop.ELEMDESC : ValueType {
    [ComAliasNameAttribute("Microsoft.VisualStudio.OLE.Interop.TYPEDESC")]
public TYPEDESC tdesc;
    [ComAliasNameAttribute("Microsoft.VisualStudio.OLE.Interop.PARAMDESC")]
public PARAMDESC PARAMDESC;
}
public enum Microsoft.VisualStudio.OLE.Interop.EOLE_AUTHENTICATION_CAPABILITIES : Enum {
    public int value__;
    public static EOLE_AUTHENTICATION_CAPABILITIES EOAC_NONE;
    public static EOLE_AUTHENTICATION_CAPABILITIES EOAC_MUTUAL_AUTH;
    public static EOLE_AUTHENTICATION_CAPABILITIES EOAC_STATIC_CLOAKING;
    public static EOLE_AUTHENTICATION_CAPABILITIES EOAC_DYNAMIC_CLOAKING;
    public static EOLE_AUTHENTICATION_CAPABILITIES EOAC_ANY_AUTHORITY;
    public static EOLE_AUTHENTICATION_CAPABILITIES EOAC_MAKE_FULLSIC;
    public static EOLE_AUTHENTICATION_CAPABILITIES EOAC_DEFAULT;
    public static EOLE_AUTHENTICATION_CAPABILITIES EOAC_SECURE_REFS;
    public static EOLE_AUTHENTICATION_CAPABILITIES EOAC_ACCESS_CONTROL;
    public static EOLE_AUTHENTICATION_CAPABILITIES EOAC_APPID;
    public static EOLE_AUTHENTICATION_CAPABILITIES EOAC_DYNAMIC;
    public static EOLE_AUTHENTICATION_CAPABILITIES EOAC_REQUIRE_FULLSIC;
    public static EOLE_AUTHENTICATION_CAPABILITIES EOAC_AUTO_IMPERSONATE;
    public static EOLE_AUTHENTICATION_CAPABILITIES EOAC_NO_CUSTOM_MARSHAL;
    public static EOLE_AUTHENTICATION_CAPABILITIES EOAC_DISABLE_AAA;
}
public class Microsoft.VisualStudio.OLE.Interop.EXCEPINFO : ValueType {
    [ComAliasNameAttribute("Microsoft.VisualStudio.OLE.Interop.WORD")]
public ushort wCode;
    [ComAliasNameAttribute("Microsoft.VisualStudio.OLE.Interop.WORD")]
public ushort wReserved;
    public string bstrSource;
    public string bstrDescription;
    public string bstrHelpFile;
    [ComAliasNameAttribute("Microsoft.VisualStudio.OLE.Interop.DWORD")]
public UInt32 dwHelpContext;
    [ComAliasNameAttribute("Microsoft.VisualStudio.OLE.Interop.ULONG_PTR")]
public IntPtr pvReserved;
    [ComAliasNameAttribute("Microsoft.VisualStudio.OLE.Interop.ULONG_PTR")]
public IntPtr pfnDeferredFillIn;
    public int scode;
}
public enum Microsoft.VisualStudio.OLE.Interop.EXTCONN : Enum {
    public int value__;
    public static EXTCONN EXTCONN_STRONG;
    public static EXTCONN EXTCONN_WEAK;
    public static EXTCONN EXTCONN_CALLABLE;
}
public class Microsoft.VisualStudio.OLE.Interop.FILETIME : ValueType {
    [ComAliasNameAttribute("Microsoft.VisualStudio.OLE.Interop.DWORD")]
public UInt32 dwLowDateTime;
    [ComAliasNameAttribute("Microsoft.VisualStudio.OLE.Interop.DWORD")]
public UInt32 dwHighDateTime;
}
[ComConversionLossAttribute]
public class Microsoft.VisualStudio.OLE.Interop.FORMATETC : ValueType {
    [ComAliasNameAttribute("Microsoft.VisualStudio.OLE.Interop.CLIPFORMAT")]
public ushort cfFormat;
    [ComConversionLossAttribute]
[ComAliasNameAttribute("Microsoft.VisualStudio.OLE.Interop.DVTARGETDEVICE")]
public IntPtr ptd;
    [ComAliasNameAttribute("Microsoft.VisualStudio.OLE.Interop.DWORD")]
public UInt32 dwAspect;
    [ComAliasNameAttribute("Microsoft.VisualStudio.OLE.Interop.LONG")]
public int lindex;
    [ComAliasNameAttribute("Microsoft.VisualStudio.OLE.Interop.DWORD")]
public UInt32 tymed;
}
[ComConversionLossAttribute]
public class Microsoft.VisualStudio.OLE.Interop.FUNCDESC : ValueType {
    [ComAliasNameAttribute("Microsoft.VisualStudio.OLE.Interop.MEMBERID")]
public int memid;
    [ComConversionLossAttribute]
public IntPtr lprgscode;
    [ComAliasNameAttribute("Microsoft.VisualStudio.OLE.Interop.ELEMDESC")]
[ComConversionLossAttribute]
public IntPtr lprgelemdescParam;
    [ComAliasNameAttribute("Microsoft.VisualStudio.OLE.Interop.FUNCKIND")]
public FUNCKIND FUNCKIND;
    [ComAliasNameAttribute("Microsoft.VisualStudio.OLE.Interop.INVOKEKIND")]
public INVOKEKIND invkind;
    [ComAliasNameAttribute("Microsoft.VisualStudio.OLE.Interop.CALLCONV")]
public CALLCONV CALLCONV;
    [ComAliasNameAttribute("Microsoft.VisualStudio.OLE.Interop.SHORT")]
public short cParams;
    [ComAliasNameAttribute("Microsoft.VisualStudio.OLE.Interop.SHORT")]
public short cParamsOpt;
    [ComAliasNameAttribute("Microsoft.VisualStudio.OLE.Interop.SHORT")]
public short oVft;
    [ComAliasNameAttribute("Microsoft.VisualStudio.OLE.Interop.SHORT")]
public short cScodes;
    [ComAliasNameAttribute("Microsoft.VisualStudio.OLE.Interop.ELEMDESC")]
public ELEMDESC elemdescFunc;
    [ComAliasNameAttribute("Microsoft.VisualStudio.OLE.Interop.WORD")]
public ushort wFuncFlags;
}
[FlagsAttribute]
public enum Microsoft.VisualStudio.OLE.Interop.FUNCFLAGS : Enum {
    public int value__;
    public static FUNCFLAGS FUNCFLAG_FRESTRICTED;
    public static FUNCFLAGS FUNCFLAG_FSOURCE;
    public static FUNCFLAGS FUNCFLAG_FBINDABLE;
    public static FUNCFLAGS FUNCFLAG_FREQUESTEDIT;
    public static FUNCFLAGS FUNCFLAG_FDISPLAYBIND;
    public static FUNCFLAGS FUNCFLAG_FDEFAULTBIND;
    public static FUNCFLAGS FUNCFLAG_FHIDDEN;
    public static FUNCFLAGS FUNCFLAG_FUSESGETLASTERROR;
    public static FUNCFLAGS FUNCFLAG_FDEFAULTCOLLELEM;
    public static FUNCFLAGS FUNCFLAG_FUIDEFAULT;
    public static FUNCFLAGS FUNCFLAG_FNONBROWSABLE;
    public static FUNCFLAGS FUNCFLAG_FREPLACEABLE;
    public static FUNCFLAGS FUNCFLAG_FIMMEDIATEBIND;
}
public enum Microsoft.VisualStudio.OLE.Interop.FUNCKIND : Enum {
    public int value__;
    public static FUNCKIND FUNC_VIRTUAL;
    public static FUNCKIND FUNC_PUREVIRTUAL;
    public static FUNCKIND FUNC_NONVIRTUAL;
    public static FUNCKIND FUNC_STATIC;
    public static FUNCKIND FUNC_DISPATCH;
}
public enum Microsoft.VisualStudio.OLE.Interop.GUIDKIND : Enum {
    public int value__;
    public static GUIDKIND GUIDKIND_DEFAULT_SOURCE_DISP_IID;
}
public enum Microsoft.VisualStudio.OLE.Interop.HITRESULT : Enum {
    public int value__;
    public static HITRESULT HITRESULT_OUTSIDE;
    public static HITRESULT HITRESULT_TRANSPARENT;
    public static HITRESULT HITRESULT_CLOSE;
    public static HITRESULT HITRESULT_HIT;
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("00000148-0000-0000-C000-000000000046")]
[ComConversionLossAttribute]
public interface Microsoft.VisualStudio.OLE.Interop.IAddrExclusionControl {
    public abstract virtual void GetCurrentAddrExclusionList(Guid& riid, IntPtr& ppEnumerator);
    public abstract virtual void UpdateAddrExclusionList(object pEnumerator);
}
[GuidAttribute("00000147-0000-0000-C000-000000000046")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.OLE.Interop.IAddrTrackingControl {
    public abstract virtual void EnableCOMDynamicAddrTracking();
    public abstract virtual void DisableCOMDynamicAddrTracking();
}
[GuidAttribute("0000010F-0000-0000-C000-000000000046")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.OLE.Interop.IAdviseSink {
    public abstract virtual void OnDataChange(FORMATETC[] pFormatetc, STGMEDIUM[] pStgmed);
    public abstract virtual void OnViewChange(UInt32 dwAspect, int lindex);
    public abstract virtual void OnRename(IMoniker pmk);
    public abstract virtual void OnSave();
    public abstract virtual void OnClose();
}
[GuidAttribute("00000125-0000-0000-C000-000000000046")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.OLE.Interop.IAdviseSink2 {
    public abstract virtual void OnDataChange(FORMATETC[] pFormatetc, STGMEDIUM[] pStgmed);
    public abstract virtual void OnViewChange(UInt32 dwAspect, int lindex);
    public abstract virtual void OnRename(IMoniker pmk);
    public abstract virtual void OnSave();
    public abstract virtual void OnClose();
    public abstract virtual void OnLinkSrcChange(IMoniker pmk);
}
[GuidAttribute("3AF24290-0C96-11CE-A0CF-00AA00600AB8")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.OLE.Interop.IAdviseSinkEx {
    public abstract virtual void OnDataChange(FORMATETC[] pFormatetc, STGMEDIUM[] pStgmed);
    public abstract virtual void OnViewChange(UInt32 dwAspect, int lindex);
    public abstract virtual void OnRename(IMoniker pmk);
    public abstract virtual void OnSave();
    public abstract virtual void OnClose();
    public abstract virtual void OnViewStatusChange(UInt32 dwViewStatus);
}
[ComConversionLossAttribute]
[GuidAttribute("0000002A-0000-0000-C000-000000000046")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.OLE.Interop.IAsyncManager {
    public abstract virtual void CompleteCall(int Result);
    public abstract virtual void GetCallContext(Guid& riid, IntPtr& pInterface);
    public abstract virtual void GetState(UInt32& pulStateFlags);
}
[InterfaceTypeAttribute("1")]
[ComConversionLossAttribute]
[GuidAttribute("A5029FB6-3C34-11D1-9C99-00C04FB998AA")]
public interface Microsoft.VisualStudio.OLE.Interop.IAsyncRpcChannelBuffer {
    public abstract virtual void GetBuffer(RPCOLEMESSAGE[] pMessage, Guid& riid);
    public abstract virtual void SendReceive(RPCOLEMESSAGE[] pMessage, UInt32& pStatus);
    public abstract virtual void FreeBuffer(RPCOLEMESSAGE[] pMessage);
    public abstract virtual void GetDestCtx(UInt32& pdwDestContext, IntPtr& ppvDestContext);
    public abstract virtual void IsConnected();
    public abstract virtual void GetProtocolVersion(UInt32& pdwVersion);
    public abstract virtual void Send(RPCOLEMESSAGE[] pMsg, ISynchronize pSync, UInt32& pulStatus);
    public abstract virtual void Receive(RPCOLEMESSAGE[] pMsg, UInt32& pulStatus);
    public abstract virtual void GetDestCtxEx(RPCOLEMESSAGE[] pMsg, UInt32& pdwDestContext, IntPtr& ppvDestContext);
}
[GuidAttribute("0000000E-0000-0000-C000-000000000046")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.OLE.Interop.IBindCtx {
    public abstract virtual void RegisterObjectBound(object punk);
    public abstract virtual void RevokeObjectBound(object punk);
    public abstract virtual void ReleaseBoundObjects();
    public abstract virtual void SetBindOptions(BIND_OPTS2[] pbindopts);
    public abstract virtual void GetBindOptions(BIND_OPTS2[] pbindopts);
    public abstract virtual void GetRunningObjectTable(IRunningObjectTable& pprot);
    public abstract virtual void RegisterObjectParam(string pszKey, object punk);
    public abstract virtual void GetObjectParam(string pszKey, Object& ppunk);
    public abstract virtual void EnumObjectParam(IEnumString& ppEnum);
    public abstract virtual void RevokeObjectParam(string pszKey);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("FC4801A1-2BA9-11CF-A229-00AA003D7352")]
public interface Microsoft.VisualStudio.OLE.Interop.IBindHost {
    public abstract virtual void CreateMoniker(string szName, IBindCtx pbc, IMoniker& ppmk, UInt32 dwReserved);
    public abstract virtual void MonikerBindToStorage(IMoniker pmk, IBindCtx pbc, IBindStatusCallback pBSC, Guid& riid, Object& ppvObj);
    public abstract virtual void MonikerBindToObject(IMoniker pmk, IBindCtx pbc, IBindStatusCallback pBSC, Guid& riid, Object& ppvObj);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("79EAC9C0-BAF9-11CE-8C82-00AA004BA90B")]
public interface Microsoft.VisualStudio.OLE.Interop.IBinding {
    public abstract virtual int Abort();
    public abstract virtual void Suspend();
    public abstract virtual void Resume();
    public abstract virtual void SetPriority(int nPriority);
    public abstract virtual void GetPriority(Int32& pnPriority);
    public abstract virtual void GetBindResult(Guid& pclsidProtocol, UInt32& pdwResult, IntPtr pszResult, UInt32 dwReserved);
}
[GuidAttribute("79EAC9C1-BAF9-11CE-8C82-00AA004BA90B")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.OLE.Interop.IBindStatusCallback {
    public abstract virtual void OnStartBinding(UInt32 dwReserved, IBinding pib);
    public abstract virtual void GetPriority(Int32& pnPriority);
    public abstract virtual void OnLowResource(UInt32 reserved);
    public abstract virtual void OnProgress(UInt32 ulProgress, UInt32 ulProgressMax, UInt32 ulStatusCode, string szStatusText);
    public abstract virtual void OnStopBinding(int hresult, string szError);
    public abstract virtual void GetBindInfo(UInt32& grfBINDF, BINDINFO[] pbindinfo);
    public abstract virtual void OnDataAvailable(UInt32 grfBSCF, UInt32 dwSize, FORMATETC[] pFormatetc, STGMEDIUM[] pStgmed);
    public abstract virtual void OnObjectAvailable(Guid& riid, object punk);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("30F3D47A-6447-11D1-8E3C-00C04FB9386D")]
public interface Microsoft.VisualStudio.OLE.Interop.IBlockingLock {
    public abstract virtual void Lock(UInt32 dwTimeout);
    public abstract virtual void Unlock();
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("1C733A30-2A1C-11CE-ADE5-00AA0044773D")]
public interface Microsoft.VisualStudio.OLE.Interop.ICallFactory {
    public abstract virtual void CreateCall(Guid& riid, object pCtrlUnk, Guid& riid2, Object& ppv);
}
[GuidAttribute("00000029-0000-0000-C000-000000000046")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.OLE.Interop.ICancelMethodCalls {
    public abstract virtual int Cancel(UInt32 ulSeconds);
    public abstract virtual int TestCancel();
}
[GuidAttribute("1008C4A0-7613-11CF-9AF1-0020AF6E72F4")]
[ComConversionLossAttribute]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.OLE.Interop.IChannelHook {
    public abstract virtual void ClientGetSize(Guid& uExtent, Guid& riid, UInt32& pDataSize);
    public abstract virtual void ClientFillBuffer(Guid& uExtent, Guid& riid, UInt32& pDataSize, IntPtr pDataBuffer);
    public abstract virtual void ClientNotify(Guid& uExtent, Guid& riid, UInt32 cbDataSize, IntPtr pDataBuffer, UInt32 lDataRep, int hrFault);
    public abstract virtual void ServerNotify(Guid& uExtent, Guid& riid, UInt32 cbDataSize, IntPtr pDataBuffer, UInt32 lDataRep);
    public abstract virtual void ServerGetSize(Guid& uExtent, Guid& riid, int hrFault, UInt32& pDataSize);
    public abstract virtual void ServerFillBuffer(Guid& uExtent, Guid& riid, UInt32& pDataSize, IntPtr pDataBuffer, int hrFault);
}
[ComConversionLossAttribute]
[GuidAttribute("00000140-0000-0000-C000-000000000046")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.OLE.Interop.IClassActivator {
    public abstract virtual void GetClassObject(Guid& rclsid, UInt32 dwClassContext, UInt32 locale, Guid& riid, IntPtr& ppv);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("00000001-0000-0000-C000-000000000046")]
public interface Microsoft.VisualStudio.OLE.Interop.IClassFactory {
    public abstract virtual void CreateInstance(Guid& riid, Object& ppvObject);
    public abstract virtual void LockServer(int fLock);
}
[GuidAttribute("B196B28F-BAB4-101A-B69C-00AA00341D07")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.OLE.Interop.IClassFactory2 {
    public abstract virtual void CreateInstance(Guid& riid, Object& ppvObject);
    public abstract virtual void LockServer(int fLock);
    public abstract virtual void GetLicInfo(LICINFO[] pLicInfo);
    public abstract virtual void RequestLicKey(UInt32 dwReserved, String& pBstrKey);
    public abstract virtual void CreateInstanceLic(Guid& riid, string bstrKey, Object& ppvObj);
}
[ComConversionLossAttribute]
[InterfaceTypeAttribute("1")]
[GuidAttribute("0000013D-0000-0000-C000-000000000046")]
public interface Microsoft.VisualStudio.OLE.Interop.IClientSecurity {
    public abstract virtual void QueryBlanket(object pProxy, UInt32& pAuthnSvc, UInt32& pAuthzSvc, IntPtr pServerPrincName, UInt32& pAuthnLevel, UInt32& pImpLevel, IntPtr& pAuthInfo, UInt32& pCapabilites);
    public abstract virtual void SetBlanket(object pProxy, UInt32 dwAuthnSvc, UInt32 dwAuthzSvc, string pServerPrincName, UInt32 dwAuthnLevel, UInt32 dwImpLevel, IntPtr pAuthInfo, UInt32 dwCapabilities);
    public abstract virtual void CopyProxy(object pProxy, Object& ppCopy);
}
[GuidAttribute("000001CE-0000-0000-C000-000000000046")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.OLE.Interop.IComThreadingInfo {
    public abstract virtual void GetCurrentApartmentType(APTTYPE[] pAptType);
    public abstract virtual void GetCurrentThreadType(THDTYPE[] pThreadType);
    public abstract virtual void GetCurrentLogicalThreadId(Guid& pguidLogicalThreadId);
    public abstract virtual void SetCurrentLogicalThreadId(Guid& rguid);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("B196B286-BAB4-101A-B69C-00AA00341D07")]
public interface Microsoft.VisualStudio.OLE.Interop.IConnectionPoint {
    public abstract virtual void GetConnectionInterface(Guid& pIID);
    public abstract virtual void GetConnectionPointContainer(IConnectionPointContainer& ppCPC);
    public abstract virtual void Advise(object pUnkSink, UInt32& pdwCookie);
    public abstract virtual void Unadvise(UInt32 dwCookie);
    public abstract virtual void EnumConnections(IEnumConnections& ppEnum);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("B196B284-BAB4-101A-B69C-00AA00341D07")]
public interface Microsoft.VisualStudio.OLE.Interop.IConnectionPointContainer {
    public abstract virtual void EnumConnectionPoints(IEnumConnectionPoints& ppEnum);
    public abstract virtual void FindConnectionPoint(Guid& riid, IConnectionPoint& ppCP);
}
[GuidAttribute("0000012A-0000-0000-C000-000000000046")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.OLE.Interop.IContinue {
    public abstract virtual void FContinue();
}
[GuidAttribute("B722BCCA-4E68-101B-A2BC-00AA00404770")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.OLE.Interop.IContinueCallback {
    public abstract virtual void FContinue();
    public abstract virtual void FContinuePrinting(int nCntPrinted, int nCurPage, string pwszPrintStatus);
}
[GuidAttribute("00000110-0000-0000-C000-000000000046")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.OLE.Interop.IDataAdviseHolder {
    public abstract virtual void Advise(IDataObject pDataObject, FORMATETC[] pFetc, UInt32 ADVF, IAdviseSink pAdvise, UInt32& pdwConnection);
    public abstract virtual void Unadvise(UInt32 dwConnection);
    public abstract virtual void EnumAdvise(IEnumSTATDATA& ppenumAdvise);
    public abstract virtual void SendOnDataChange(IDataObject pDataObject, UInt32 dwReserved, UInt32 ADVF);
}
[GuidAttribute("0000010E-0000-0000-C000-000000000046")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.OLE.Interop.IDataObject {
    public abstract virtual void GetData(FORMATETC[] pformatetcIn, STGMEDIUM[] pRemoteMedium);
    public abstract virtual void GetDataHere(FORMATETC[] pFormatetc, STGMEDIUM[] pRemoteMedium);
    public abstract virtual int QueryGetData(FORMATETC[] pFormatetc);
    public abstract virtual int GetCanonicalFormatEtc(FORMATETC[] pformatectIn, FORMATETC[] pformatetcOut);
    public abstract virtual void SetData(FORMATETC[] pFormatetc, STGMEDIUM[] pmedium, int fRelease);
    public abstract virtual int EnumFormatEtc(UInt32 dwDirection, IEnumFORMATETC& ppenumFormatEtc);
    public abstract virtual int DAdvise(FORMATETC[] pFormatetc, UInt32 ADVF, IAdviseSink pAdvSink, UInt32& pdwConnection);
    public abstract virtual void DUnadvise(UInt32 dwConnection);
    public abstract virtual int EnumDAdvise(IEnumSTATDATA& ppenumAdvise);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("0E6D4D92-6738-11CF-9608-00AA00680DB4")]
public interface Microsoft.VisualStudio.OLE.Interop.IDirectWriterLock {
    public abstract virtual int WaitForWriteAccess(UInt32 dwTimeout);
    public abstract virtual void ReleaseWriteAccess();
    public abstract virtual int HaveWriteAccess();
}
public class Microsoft.VisualStudio.OLE.Interop.IDLDESC : ValueType {
    [ComAliasNameAttribute("Microsoft.VisualStudio.OLE.Interop.ULONG_PTR")]
public IntPtr dwReserved;
    [ComAliasNameAttribute("Microsoft.VisualStudio.OLE.Interop.USHORT")]
public ushort wIDLFlags;
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("00000122-0000-0000-C000-000000000046")]
public interface Microsoft.VisualStudio.OLE.Interop.IDropTarget {
    public abstract virtual void DragEnter(IDataObject pDataObj, UInt32 grfKeyState, POINTL pt, UInt32& pdwEffect);
    public abstract virtual void DragOver(UInt32 grfKeyState, POINTL pt, UInt32& pdwEffect);
    public abstract virtual void DragLeave();
    public abstract virtual void Drop(IDataObject pDataObj, UInt32 grfKeyState, POINTL pt, UInt32& pdwEffect);
}
[GuidAttribute("947990DE-CC28-11D2-A0F7-00805F858FB1")]
[InterfaceTypeAttribute("1")]
[ComConversionLossAttribute]
public interface Microsoft.VisualStudio.OLE.Interop.IDummyHICONIncluder {
    public abstract virtual void Dummy(IntPtr h1, IntPtr h2);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("B196B285-BAB4-101A-B69C-00AA00341D07")]
public interface Microsoft.VisualStudio.OLE.Interop.IEnumConnectionPoints {
    public abstract virtual int Next(UInt32 cConnections, IConnectionPoint[] ppCP, UInt32& pcFetched);
    public abstract virtual int Skip(UInt32 cConnections);
    public abstract virtual int Reset();
    public abstract virtual void Clone(IEnumConnectionPoints& ppEnum);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("B196B287-BAB4-101A-B69C-00AA00341D07")]
public interface Microsoft.VisualStudio.OLE.Interop.IEnumConnections {
    public abstract virtual int Next(UInt32 cConnections, CONNECTDATA[] rgcd, UInt32& pcFetched);
    public abstract virtual int Skip(UInt32 cConnections);
    public abstract virtual int Reset();
    public abstract virtual void Clone(IEnumConnections& ppEnum);
}
[GuidAttribute("00000103-0000-0000-C000-000000000046")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.OLE.Interop.IEnumFORMATETC {
    public abstract virtual int Next(UInt32 celt, FORMATETC[] rgelt, UInt32[] pceltFetched);
    public abstract virtual int Skip(UInt32 celt);
    public abstract virtual int Reset();
    public abstract virtual void Clone(IEnumFORMATETC& ppEnum);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("00000102-0000-0000-C000-000000000046")]
public interface Microsoft.VisualStudio.OLE.Interop.IEnumMoniker {
    public abstract virtual int Next(UInt32 celt, IMoniker[] rgelt, UInt32& pceltFetched);
    public abstract virtual int Skip(UInt32 celt);
    public abstract virtual int Reset();
    public abstract virtual void Clone(IEnumMoniker& ppEnum);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("B722BCC8-4E68-101B-A2BC-00AA00404770")]
public interface Microsoft.VisualStudio.OLE.Interop.IEnumOleDocumentViews {
    public abstract virtual int Next(UInt32 cViews, IOleDocumentView[] rgpView, UInt32& pcFetched);
    public abstract virtual int Skip(UInt32 cViews);
    public abstract virtual int Reset();
    public abstract virtual void Clone(IEnumOleDocumentViews& ppEnum);
}
[GuidAttribute("B3E7C340-EF97-11CE-9BC9-00AA00608E01")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.OLE.Interop.IEnumOleUndoUnits {
    public abstract virtual int Next(UInt32 celt, IOleUndoUnit[] rgelt, UInt32& pceltFetched);
    public abstract virtual int Skip(UInt32 celt);
    public abstract virtual int Reset();
    public abstract virtual void Clone(IEnumOleUndoUnits& ppEnum);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("00000104-0000-0000-C000-000000000046")]
public interface Microsoft.VisualStudio.OLE.Interop.IEnumOLEVERB {
    public abstract virtual int Next(UInt32 celt, OLEVERB[] rgelt, UInt32& pceltFetched);
    public abstract virtual int Skip(UInt32 celt);
    public abstract virtual int Reset();
    public abstract virtual void Clone(IEnumOLEVERB& ppEnum);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("00000105-0000-0000-C000-000000000046")]
public interface Microsoft.VisualStudio.OLE.Interop.IEnumSTATDATA {
    public abstract virtual int Next(UInt32 celt, STATDATA[] rgelt, UInt32& pceltFetched);
    public abstract virtual int Skip(UInt32 celt);
    public abstract virtual int Reset();
    public abstract virtual void Clone(IEnumSTATDATA& ppEnum);
}
[GuidAttribute("0000013B-0000-0000-C000-000000000046")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.OLE.Interop.IEnumSTATPROPSETSTG {
    public abstract virtual int Next(UInt32 celt, STATPROPSETSTG[] rgelt, UInt32& pceltFetched);
    public abstract virtual int Skip(UInt32 celt);
    public abstract virtual int Reset();
    public abstract virtual void Clone(IEnumSTATPROPSETSTG& ppEnum);
}
[GuidAttribute("00000139-0000-0000-C000-000000000046")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.OLE.Interop.IEnumSTATPROPSTG {
    public abstract virtual int Next(UInt32 celt, STATPROPSTG[] rgelt, UInt32& pceltFetched);
    public abstract virtual int Skip(UInt32 celt);
    public abstract virtual int Reset();
    public abstract virtual void Clone(IEnumSTATPROPSTG& ppEnum);
}
[GuidAttribute("0000000D-0000-0000-C000-000000000046")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.OLE.Interop.IEnumSTATSTG {
    public abstract virtual int Next(UInt32 celt, STATSTG[] rgelt, UInt32& pceltFetched);
    public abstract virtual int Skip(UInt32 celt);
    public abstract virtual int Reset();
    public abstract virtual void Clone(IEnumSTATSTG& ppEnum);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("00000101-0000-0000-C000-000000000046")]
public interface Microsoft.VisualStudio.OLE.Interop.IEnumString {
    public abstract virtual int Next(UInt32 celt, String[] rgelt, UInt32& pceltFetched);
    public abstract virtual int Skip(UInt32 celt);
    public abstract virtual int Reset();
    public abstract virtual void Clone(IEnumString& ppEnum);
}
[GuidAttribute("00000100-0000-0000-C000-000000000046")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.OLE.Interop.IEnumUnknown {
    public abstract virtual int Next(UInt32 celt, Object[] rgelt, UInt32& pceltFetched);
    public abstract virtual int Skip(UInt32 celt);
    public abstract virtual int Reset();
    public abstract virtual void Clone(IEnumUnknown& ppEnum);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("3127CA40-446E-11CE-8135-00AA004BB851")]
public interface Microsoft.VisualStudio.OLE.Interop.IErrorLog {
    public abstract virtual void AddError(string pszPropName, EXCEPINFO[] pExcepInfo);
}
[GuidAttribute("00000019-0000-0000-C000-000000000046")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.OLE.Interop.IExternalConnection {
    public abstract virtual UInt32 AddConnection(UInt32 EXTCONN, UInt32 reserved);
    public abstract virtual UInt32 ReleaseConnection(UInt32 EXTCONN, UInt32 reserved, int fLastReleaseCloses);
}
[ComConversionLossAttribute]
[GuidAttribute("99CAF010-415E-11CF-8814-00AA00B569F5")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.OLE.Interop.IFillLockBytes {
    public abstract virtual void FillAppend(Byte[] pv, UInt32 cb, UInt32& pcbWritten);
    public abstract virtual void FillAt(ULARGE_INTEGER ulOffset, Byte[] pv, UInt32 cb, UInt32& pcbWritten);
    public abstract virtual void SetFillSize(ULARGE_INTEGER ulSize);
    public abstract virtual void Terminate(int bCanceled);
}
[ComConversionLossAttribute]
[InterfaceTypeAttribute("1")]
[GuidAttribute("BEF6E002-A874-101A-8BBA-00AA00300CAB")]
public interface Microsoft.VisualStudio.OLE.Interop.IFont {
    public abstract virtual void get_Name(String& pName);
    public abstract virtual void put_Name(string name);
    public abstract virtual void get_Size(UInt64& size);
    public abstract virtual void put_Size(ulong size);
    public abstract virtual void get_Bold(Int32& pBold);
    public abstract virtual int put_Bold(int bold);
    public abstract virtual void get_Italic(Int32& pItalic);
    public abstract virtual int put_Italic(int italic);
    public abstract virtual void get_Underline(Int32& pUnderline);
    public abstract virtual int put_Underline(int underline);
    public abstract virtual void get_Strikethrough(Int32& pStrikethrough);
    public abstract virtual int put_Strikethrough(int strikethrough);
    public abstract virtual void get_Weight(Int16& pWeight);
    public abstract virtual int put_Weight(short weight);
    public abstract virtual void get_Charset(Int16& pCharset);
    public abstract virtual int put_Charset(short charset);
    public abstract virtual void get_hFont(IntPtr& phFont);
    public abstract virtual void Clone(IFont& ppFont);
    public abstract virtual void IsEqual(IFont pFontOther);
    public abstract virtual void SetRatio(int cyLogical, int cyHimetric);
    public abstract virtual void QueryTextMetrics(TEXTMETRICOLE[] pTM);
    public abstract virtual void AddRefHfont(IntPtr hFont);
    public abstract virtual int ReleaseHfont(IntPtr hFont);
    public abstract virtual void SetHdc(IntPtr hDC);
}
[InterfaceTypeAttribute("1")]
[ComConversionLossAttribute]
[GuidAttribute("00000145-0000-0000-C000-000000000046")]
public interface Microsoft.VisualStudio.OLE.Interop.IForegroundTransfer {
    public abstract virtual void AllowForegroundTransfer(IntPtr lpvReserved);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("00000146-0000-0000-C000-000000000046")]
[ComConversionLossAttribute]
public interface Microsoft.VisualStudio.OLE.Interop.IGlobalInterfaceTable {
    public abstract virtual void RegisterInterfaceInGlobal(object punk, Guid& riid, UInt32& pdwCookie);
    public abstract virtual void RevokeInterfaceFromGlobal(UInt32 dwCookie);
    public abstract virtual void GetInterfaceFromGlobal(UInt32 dwCookie, Guid& riid, IntPtr& ppv);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("00000021-0000-0000-C000-000000000046")]
[ComConversionLossAttribute]
public interface Microsoft.VisualStudio.OLE.Interop.IInternalUnknown {
    public abstract virtual void QueryInternalInterface(Guid& riid, IntPtr& ppv);
}
[GuidAttribute("0E6D4D90-6738-11CF-9608-00AA00680DB4")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.OLE.Interop.ILayoutStorage {
    public abstract virtual void LayoutScript(StorageLayout[] pStorageLayout, UInt32 nEntries, UInt32 glfInterleavedFlag);
    public abstract virtual void BeginMonitor();
    public abstract virtual void EndMonitor();
    public abstract virtual void ReLayoutDocfile(string pwcsNewDfName);
    public abstract virtual void ReLayoutDocfileOnILockBytes(ILockBytes pILockBytes);
}
[ComConversionLossAttribute]
[InterfaceTypeAttribute("1")]
[GuidAttribute("0000000A-0000-0000-C000-000000000046")]
public interface Microsoft.VisualStudio.OLE.Interop.ILockBytes {
    public abstract virtual void ReadAt(ULARGE_INTEGER ulOffset, Byte[] pv, UInt32 cb, UInt32& pcbRead);
    public abstract virtual void WriteAt(ULARGE_INTEGER ulOffset, Byte[] pv, UInt32 cb, UInt32& pcbWritten);
    public abstract virtual void Flush();
    public abstract virtual void SetSize(ULARGE_INTEGER cb);
    public abstract virtual void LockRegion(ULARGE_INTEGER libOffset, ULARGE_INTEGER cb, UInt32 dwLockType);
    public abstract virtual void UnlockRegion(ULARGE_INTEGER libOffset, ULARGE_INTEGER cb, UInt32 dwLockType);
    public abstract virtual void Stat(STATSTG[] pstatstg, UInt32 grfStatFlag);
}
[ComConversionLossAttribute]
[InterfaceTypeAttribute("1")]
[GuidAttribute("00000002-0000-0000-C000-000000000046")]
public interface Microsoft.VisualStudio.OLE.Interop.IMalloc {
    public abstract virtual IntPtr Alloc(IntPtr cb);
    public abstract virtual IntPtr Realloc(IntPtr pv, IntPtr cb);
    public abstract virtual void Free(IntPtr pv);
    public abstract virtual IntPtr GetSize(IntPtr pv);
    public abstract virtual int DidAlloc(IntPtr pv);
    public abstract virtual void HeapMinimize();
}
[GuidAttribute("0000001D-0000-0000-C000-000000000046")]
[InterfaceTypeAttribute("1")]
[ComConversionLossAttribute]
public interface Microsoft.VisualStudio.OLE.Interop.IMallocSpy {
    public abstract virtual IntPtr PreAlloc(IntPtr cbRequest);
    public abstract virtual IntPtr PostAlloc(IntPtr pActual);
    public abstract virtual IntPtr PreFree(IntPtr pRequest, int fSpyed);
    public abstract virtual void PostFree(int fSpyed);
    public abstract virtual IntPtr PreRealloc(IntPtr pRequest, IntPtr cbRequest, IntPtr& ppNewRequest, int fSpyed);
    public abstract virtual IntPtr PostRealloc(IntPtr pActual, int fSpyed);
    public abstract virtual IntPtr PreGetSize(IntPtr pRequest, int fSpyed);
    public abstract virtual IntPtr PostGetSize(IntPtr cbActual, int fSpyed);
    public abstract virtual IntPtr PreDidAlloc(IntPtr pRequest, int fSpyed);
    public abstract virtual int PostDidAlloc(IntPtr pRequest, int fSpyed, int fActual);
    public abstract virtual void PreHeapMinimize();
    public abstract virtual void PostHeapMinimize();
}
[InterfaceTypeAttribute("1")]
[ComConversionLossAttribute]
[GuidAttribute("00000003-0000-0000-C000-000000000046")]
public interface Microsoft.VisualStudio.OLE.Interop.IMarshal {
    public abstract virtual void GetUnmarshalClass(Guid& riid, IntPtr pv, UInt32 dwDestContext, IntPtr pvDestContext, UInt32 MSHLFLAGS, Guid& pCid);
    public abstract virtual void GetMarshalSizeMax(Guid& riid, IntPtr pv, UInt32 dwDestContext, IntPtr pvDestContext, UInt32 MSHLFLAGS, UInt32& pSize);
    public abstract virtual void MarshalInterface(IStream pstm, Guid& riid, IntPtr pv, UInt32 dwDestContext, IntPtr pvDestContext, UInt32 MSHLFLAGS);
    public abstract virtual void UnmarshalInterface(IStream pstm, Guid& riid, IntPtr& ppv);
    public abstract virtual void ReleaseMarshalData(IStream pstm);
    public abstract virtual void DisconnectObject(UInt32 dwReserved);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("000001CF-0000-0000-C000-000000000046")]
public interface Microsoft.VisualStudio.OLE.Interop.IMarshal2 {
    public abstract virtual void GetUnmarshalClass(Guid& riid, IntPtr pv, UInt32 dwDestContext, IntPtr pvDestContext, UInt32 MSHLFLAGS, Guid& pCid);
    public abstract virtual void GetMarshalSizeMax(Guid& riid, IntPtr pv, UInt32 dwDestContext, IntPtr pvDestContext, UInt32 MSHLFLAGS, UInt32& pSize);
    public abstract virtual void MarshalInterface(IStream pstm, Guid& riid, IntPtr pv, UInt32 dwDestContext, IntPtr pvDestContext, UInt32 MSHLFLAGS);
    public abstract virtual void UnmarshalInterface(IStream pstm, Guid& riid, IntPtr& ppv);
    public abstract virtual void ReleaseMarshalData(IStream pstm);
    public abstract virtual void DisconnectObject(UInt32 dwReserved);
}
[ComConversionLossAttribute]
[GuidAttribute("00000016-0000-0000-C000-000000000046")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.OLE.Interop.IMessageFilter {
    public abstract virtual UInt32 HandleInComingCall(UInt32 dwCallType, IntPtr htaskCaller, UInt32 dwTickCount, INTERFACEINFO[] lpInterfaceInfo);
    public abstract virtual UInt32 RetryRejectedCall(IntPtr htaskCallee, UInt32 dwTickCount, UInt32 dwRejectType);
    public abstract virtual UInt32 MessagePending(IntPtr htaskCallee, UInt32 dwTickCount, UInt32 dwPendingType);
}
[GuidAttribute("0000000F-0000-0000-C000-000000000046")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.OLE.Interop.IMoniker {
    public abstract virtual int GetClassID(Guid& pClassID);
    public abstract virtual int IsDirty();
    public abstract virtual void Load(IStream pstm);
    public abstract virtual void Save(IStream pstm, int fClearDirty);
    public abstract virtual void GetSizeMax(ULARGE_INTEGER[] pcbSize);
    public abstract virtual void BindToObject(IBindCtx pbc, IMoniker pmkToLeft, Guid& riidResult, Object& ppvResult);
    public abstract virtual void BindToStorage(IBindCtx pbc, IMoniker pmkToLeft, Guid& riid, Object& ppvObj);
    public abstract virtual void Reduce(IBindCtx pbc, UInt32 dwReduceHowFar, IMoniker& ppmkToLeft, IMoniker& ppmkReduced);
    public abstract virtual void ComposeWith(IMoniker pmkRight, int fOnlyIfNotGeneric, IMoniker& ppmkComposite);
    public abstract virtual void Enum(int fForward, IEnumMoniker& ppenumMoniker);
    public abstract virtual void IsEqual(IMoniker pmkOtherMoniker);
    public abstract virtual void Hash(UInt32& pdwHash);
    public abstract virtual int IsRunning(IBindCtx pbc, IMoniker pmkToLeft, IMoniker pmkNewlyRunning);
    public abstract virtual void GetTimeOfLastChange(IBindCtx pbc, IMoniker pmkToLeft, FILETIME[] pFileTime);
    public abstract virtual void Inverse(IMoniker& ppmk);
    public abstract virtual void CommonPrefixWith(IMoniker pmkOther, IMoniker& ppmkPrefix);
    public abstract virtual void RelativePathTo(IMoniker pmkOther, IMoniker& ppmkRelPath);
    public abstract virtual void GetDisplayName(IBindCtx pbc, IMoniker pmkToLeft, String& ppszDisplayName);
    public abstract virtual void ParseDisplayName(IBindCtx pbc, IMoniker pmkToLeft, string pszDisplayName, UInt32& pchEaten, IMoniker& ppmkOut);
    public abstract virtual void IsSystemMoniker(UInt32& pdwMksys);
}
[GuidAttribute("00000020-0000-0000-C000-000000000046")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.OLE.Interop.IMultiQI {
    public abstract virtual void QueryMultipleInterfaces(UInt32 cMQIs, MULTI_QI[] pMQIs);
}
public class Microsoft.VisualStudio.OLE.Interop.INTERFACEINFO : ValueType {
    public object punk;
    public Guid iid;
    [ComAliasNameAttribute("Microsoft.VisualStudio.OLE.Interop.WORD")]
public ushort wMethod;
}
public enum Microsoft.VisualStudio.OLE.Interop.INVOKEKIND : Enum {
    public int value__;
    public static INVOKEKIND INVOKE_FUNC;
    public static INVOKEKIND INVOKE_PROPERTYGET;
    public static INVOKEKIND INVOKE_PROPERTYPUT;
    public static INVOKEKIND INVOKE_PROPERTYPUTREF;
}
[ComConversionLossAttribute]
[GuidAttribute("FC4801A3-2BA9-11CF-A229-00AA003D7352")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.OLE.Interop.IObjectWithSite {
    public abstract virtual void SetSite(object pUnkSite);
    public abstract virtual void GetSite(Guid& riid, IntPtr& ppvSite);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("00000118-0000-0000-C000-000000000046")]
public interface Microsoft.VisualStudio.OLE.Interop.IOleClientSite {
    public abstract virtual void SaveObject();
    public abstract virtual void GetMoniker(UInt32 dwAssign, UInt32 dwWhichMoniker, IMoniker& ppmk);
    public abstract virtual void GetContainer(IOleContainer& ppContainer);
    public abstract virtual void ShowObject();
    public abstract virtual void OnShowWindow(int fShow);
    public abstract virtual void RequestNewObjectLayout();
}
[GuidAttribute("B722BCCB-4E68-101B-A2BC-00AA00404770")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.OLE.Interop.IOleCommandTarget {
    public abstract virtual int QueryStatus(Guid& pguidCmdGroup, UInt32 cCmds, OLECMD[] prgCmds, IntPtr pCmdText);
    public abstract virtual int Exec(Guid& pguidCmdGroup, UInt32 nCmdID, UInt32 nCmdexecopt, IntPtr pvaIn, IntPtr pvaOut);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("000C0600-0000-0000-C000-000000000046")]
[ComConversionLossAttribute]
public interface Microsoft.VisualStudio.OLE.Interop.IOleComponent {
    public abstract virtual int FReserved1(UInt32 dwReserved, UInt32 message, IntPtr wParam, IntPtr lParam);
    public abstract virtual int FPreTranslateMessage(MSG[] pMsg);
    public abstract virtual void OnEnterState(UInt32 uStateID, int fEnter);
    public abstract virtual void OnAppActivate(int fActive, UInt32 dwOtherThreadID);
    public abstract virtual void OnLoseActivation();
    public abstract virtual void OnActivationChange(IOleComponent pic, int fSameComponent, OLECRINFO[] pcrinfo, int fHostIsActivating, OLECHOSTINFO[] pchostinfo, UInt32 dwReserved);
    public abstract virtual int FDoIdle(UInt32 grfidlef);
    public abstract virtual int FContinueMessageLoop(UInt32 uReason, IntPtr pvLoopData, MSG[] pMsgPeeked);
    public abstract virtual int FQueryTerminate(int fPromptUser);
    public abstract virtual void Terminate();
    public abstract virtual IntPtr HwndGetWindow(UInt32 dwWhich, UInt32 dwReserved);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("000C0601-0000-0000-C000-000000000046")]
[ComConversionLossAttribute]
public interface Microsoft.VisualStudio.OLE.Interop.IOleComponentManager {
    public abstract virtual void QueryService(Guid& guidService, Guid& iid, IntPtr& ppvObj);
    public abstract virtual int FReserved1(UInt32 dwReserved, UInt32 message, IntPtr wParam, IntPtr lParam);
    public abstract virtual int FRegisterComponent(IOleComponent piComponent, OLECRINFO[] pcrinfo, UInt32& pdwComponentID);
    public abstract virtual int FRevokeComponent(UInt32 dwComponentID);
    public abstract virtual int FUpdateComponentRegistration(UInt32 dwComponentID, OLECRINFO[] pcrinfo);
    public abstract virtual int FOnComponentActivate(UInt32 dwComponentID);
    public abstract virtual int FSetTrackingComponent(UInt32 dwComponentID, int fTrack);
    public abstract virtual void OnComponentEnterState(UInt32 dwComponentID, UInt32 uStateID, UInt32 uContext, UInt32 cpicmExclude, IOleComponentManager[] rgpicmExclude, UInt32 dwReserved);
    public abstract virtual int FOnComponentExitState(UInt32 dwComponentID, UInt32 uStateID, UInt32 uContext, UInt32 cpicmExclude, IOleComponentManager[] rgpicmExclude);
    public abstract virtual int FInState(UInt32 uStateID, IntPtr pvoid);
    public abstract virtual int FContinueIdle();
    public abstract virtual int FPushMessageLoop(UInt32 dwComponentID, UInt32 uReason, IntPtr pvLoopData);
    public abstract virtual int FCreateSubComponentManager(object piunkOuter, object piunkServProv, Guid& riid, IntPtr& ppvObj);
    public abstract virtual int FGetParentComponentManager(IOleComponentManager& ppicm);
    public abstract virtual int FGetActiveComponent(UInt32 dwgac, IOleComponent& ppic, OLECRINFO[] pcrinfo, UInt32 dwReserved);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("0000011B-0000-0000-C000-000000000046")]
public interface Microsoft.VisualStudio.OLE.Interop.IOleContainer {
    public abstract virtual void ParseDisplayName(IBindCtx pbc, string pszDisplayName, UInt32& pchEaten, IMoniker& ppmkOut);
    public abstract virtual void EnumObjects(UInt32 grfFlags, IEnumUnknown& ppEnum);
    public abstract virtual void LockContainer(int fLock);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("B196B288-BAB4-101A-B69C-00AA00341D07")]
public interface Microsoft.VisualStudio.OLE.Interop.IOleControl {
    public abstract virtual void GetControlInfo(CONTROLINFO[] pCI);
    public abstract virtual void OnMnemonic(MSG[] pMsg);
    public abstract virtual void OnAmbientPropertyChange(int DISPID);
    public abstract virtual void FreezeEvents(int bFreeze);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("B196B289-BAB4-101A-B69C-00AA00341D07")]
public interface Microsoft.VisualStudio.OLE.Interop.IOleControlSite {
    public abstract virtual void OnControlInfoChanged();
    public abstract virtual void LockInPlaceActive(int fLock);
    public abstract virtual void GetExtendedControl(Object& ppDisp);
    public abstract virtual void TransformCoords(POINTL[] pPtlHimetric, POINTF[] pPtfContainer, UInt32 dwFlags);
    public abstract virtual int TranslateAccelerator(MSG[] pMsg, UInt32 grfModifiers);
    public abstract virtual void OnFocus(int fGotFocus);
    public abstract virtual void ShowPropertyFrame();
}
[GuidAttribute("B722BCC5-4E68-101B-A2BC-00AA00404770")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.OLE.Interop.IOleDocument {
    public abstract virtual void CreateView(IOleInPlaceSite pIPSite, IStream pstm, UInt32 dwReserved, IOleDocumentView& ppView);
    public abstract virtual void GetDocMiscStatus(UInt32& pdwStatus);
    public abstract virtual void EnumViews(IEnumOleDocumentViews& ppEnum, IOleDocumentView& ppView);
}
[GuidAttribute("B722BCC7-4E68-101B-A2BC-00AA00404770")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.OLE.Interop.IOleDocumentSite {
    public abstract virtual void ActivateMe(IOleDocumentView pViewToActivate);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("B722BCC6-4E68-101B-A2BC-00AA00404770")]
public interface Microsoft.VisualStudio.OLE.Interop.IOleDocumentView {
    public abstract virtual void SetInPlaceSite(IOleInPlaceSite pIPSite);
    public abstract virtual void GetInPlaceSite(IOleInPlaceSite& ppIPSite);
    public abstract virtual void GetDocument(Object& ppunk);
    public abstract virtual void SetRect(RECT[] prcView);
    public abstract virtual void GetRect(RECT[] prcView);
    public abstract virtual void SetRectComplex(RECT[] prcView, RECT[] prcHScroll, RECT[] prcVScroll, RECT[] prcSizeBox);
    public abstract virtual void Show(int fShow);
    public abstract virtual void UIActivate(int fUIActivate);
    public abstract virtual void Open();
    public abstract virtual void CloseView(UInt32 dwReserved);
    public abstract virtual void SaveViewState(IStream pstm);
    public abstract virtual void ApplyViewState(IStream pstm);
    public abstract virtual void Clone(IOleInPlaceSite pIPSiteNew, IOleDocumentView& ppViewNew);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("00000117-0000-0000-C000-000000000046")]
public interface Microsoft.VisualStudio.OLE.Interop.IOleInPlaceActiveObject {
    public abstract virtual void GetWindow(IntPtr& phwnd);
    public abstract virtual void ContextSensitiveHelp(int fEnterMode);
    public abstract virtual int TranslateAccelerator(MSG[] lpmsg);
    public abstract virtual void OnFrameWindowActivate(int fActivate);
    public abstract virtual void OnDocWindowActivate(int fActivate);
    public abstract virtual void ResizeBorder(RECT[] prcBorder, IOleInPlaceUIWindow pUIWindow, int fFrameWindow);
    public abstract virtual void EnableModeless(int fEnable);
}
[ComConversionLossAttribute]
[GuidAttribute("00000116-0000-0000-C000-000000000046")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.OLE.Interop.IOleInPlaceFrame {
    public abstract virtual void GetWindow(IntPtr& phwnd);
    public abstract virtual void ContextSensitiveHelp(int fEnterMode);
    public abstract virtual void GetBorder(RECT[] lprectBorder);
    public abstract virtual void RequestBorderSpace(RECT[] pborderwidths);
    public abstract virtual void SetBorderSpace(RECT[] pborderwidths);
    public abstract virtual void SetActiveObject(IOleInPlaceActiveObject pActiveObject, string pszObjName);
    public abstract virtual void InsertMenus(IntPtr hmenuShared, OLEMENUGROUPWIDTHS[] lpMenuWidths);
    public abstract virtual void SetMenu(IntPtr hmenuShared, IntPtr HOLEMENU, IntPtr hwndActiveObject);
    public abstract virtual void RemoveMenus(IntPtr hmenuShared);
    public abstract virtual void SetStatusText(string pszStatusText);
    public abstract virtual void EnableModeless(int fEnable);
    public abstract virtual int TranslateAccelerator(MSG[] lpmsg, ushort wID);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("00000113-0000-0000-C000-000000000046")]
public interface Microsoft.VisualStudio.OLE.Interop.IOleInPlaceObject {
    public abstract virtual void GetWindow(IntPtr& phwnd);
    public abstract virtual void ContextSensitiveHelp(int fEnterMode);
    public abstract virtual void InPlaceDeactivate();
    public abstract virtual void UIDeactivate();
    public abstract virtual void SetObjectRects(RECT[] lprcPosRect, RECT[] lprcClipRect);
    public abstract virtual void ReactivateAndUndo();
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("1C2056CC-5EF4-101B-8BC8-00AA003E3B29")]
public interface Microsoft.VisualStudio.OLE.Interop.IOleInPlaceObjectWindowless {
    public abstract virtual void GetWindow(IntPtr& phwnd);
    public abstract virtual void ContextSensitiveHelp(int fEnterMode);
    public abstract virtual void InPlaceDeactivate();
    public abstract virtual void UIDeactivate();
    public abstract virtual void SetObjectRects(RECT[] lprcPosRect, RECT[] lprcClipRect);
    public abstract virtual void ReactivateAndUndo();
    public abstract virtual int OnWindowMessage(UInt32 MSG, IntPtr wParam, IntPtr lParam, Int32& plResult);
    public abstract virtual void GetDropTarget(IDropTarget& ppDropTarget);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("00000119-0000-0000-C000-000000000046")]
public interface Microsoft.VisualStudio.OLE.Interop.IOleInPlaceSite {
    public abstract virtual void GetWindow(IntPtr& phwnd);
    public abstract virtual void ContextSensitiveHelp(int fEnterMode);
    public abstract virtual void CanInPlaceActivate();
    public abstract virtual void OnInPlaceActivate();
    public abstract virtual void OnUIActivate();
    public abstract virtual void GetWindowContext(IOleInPlaceFrame& ppFrame, IOleInPlaceUIWindow& ppDoc, RECT[] lprcPosRect, RECT[] lprcClipRect, OLEINPLACEFRAMEINFO[] lpFrameInfo);
    public abstract virtual void Scroll(SIZE scrollExtant);
    public abstract virtual void OnUIDeactivate(int fUndoable);
    public abstract virtual void OnInPlaceDeactivate();
    public abstract virtual void DiscardUndoState();
    public abstract virtual void DeactivateAndUndo();
    public abstract virtual void OnPosRectChange(RECT[] lprcPosRect);
}
[GuidAttribute("9C2CAD80-3424-11CF-B670-00AA004CD6D8")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.OLE.Interop.IOleInPlaceSiteEx {
    public abstract virtual void GetWindow(IntPtr& phwnd);
    public abstract virtual void ContextSensitiveHelp(int fEnterMode);
    public abstract virtual void CanInPlaceActivate();
    public abstract virtual void OnInPlaceActivate();
    public abstract virtual void OnUIActivate();
    public abstract virtual void GetWindowContext(IOleInPlaceFrame& ppFrame, IOleInPlaceUIWindow& ppDoc, RECT[] lprcPosRect, RECT[] lprcClipRect, OLEINPLACEFRAMEINFO[] lpFrameInfo);
    public abstract virtual void Scroll(SIZE scrollExtant);
    public abstract virtual void OnUIDeactivate(int fUndoable);
    public abstract virtual void OnInPlaceDeactivate();
    public abstract virtual void DiscardUndoState();
    public abstract virtual void DeactivateAndUndo();
    public abstract virtual void OnPosRectChange(RECT[] lprcPosRect);
    public abstract virtual void OnInPlaceActivateEx(Int32& pfNoRedraw, UInt32 dwFlags);
    public abstract virtual void OnInPlaceDeactivateEx(int fNoRedraw);
    public abstract virtual int RequestUIActivate();
}
[InterfaceTypeAttribute("1")]
[ComConversionLossAttribute]
[GuidAttribute("922EADA0-3424-11CF-B670-00AA004CD6D8")]
public interface Microsoft.VisualStudio.OLE.Interop.IOleInPlaceSiteWindowless {
    public abstract virtual void GetWindow(IntPtr& phwnd);
    public abstract virtual void ContextSensitiveHelp(int fEnterMode);
    public abstract virtual void CanInPlaceActivate();
    public abstract virtual void OnInPlaceActivate();
    public abstract virtual void OnUIActivate();
    public abstract virtual void GetWindowContext(IOleInPlaceFrame& ppFrame, IOleInPlaceUIWindow& ppDoc, RECT[] lprcPosRect, RECT[] lprcClipRect, OLEINPLACEFRAMEINFO[] lpFrameInfo);
    public abstract virtual void Scroll(SIZE scrollExtant);
    public abstract virtual void OnUIDeactivate(int fUndoable);
    public abstract virtual void OnInPlaceDeactivate();
    public abstract virtual void DiscardUndoState();
    public abstract virtual void DeactivateAndUndo();
    public abstract virtual void OnPosRectChange(RECT[] lprcPosRect);
    public abstract virtual void OnInPlaceActivateEx(Int32& pfNoRedraw, UInt32 dwFlags);
    public abstract virtual void OnInPlaceDeactivateEx(int fNoRedraw);
    public abstract virtual void RequestUIActivate();
    public abstract virtual int CanWindowlessActivate();
    public abstract virtual int GetCapture();
    public abstract virtual int SetCapture(int fCapture);
    public abstract virtual int GetFocus();
    public abstract virtual int SetFocus(int fFocus);
    public abstract virtual void GetDC(RECT[] pRect, UInt32 grfFlags, IntPtr& phDC);
    public abstract virtual void ReleaseDC(IntPtr hDC);
    public abstract virtual void InvalidateRect(RECT[] pRect, int fErase);
    public abstract virtual void InvalidateRgn(IntPtr hRGN, int fErase);
    public abstract virtual void ScrollRect(int dx, int dy, RECT[] pRectScroll, RECT[] pRectClip);
    public abstract virtual int AdjustRect(RECT[] prc);
    public abstract virtual int OnDefWindowMessage(UInt32 MSG, IntPtr wParam, IntPtr lParam, Int32& plResult);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("00000115-0000-0000-C000-000000000046")]
public interface Microsoft.VisualStudio.OLE.Interop.IOleInPlaceUIWindow {
    public abstract virtual void GetWindow(IntPtr& phwnd);
    public abstract virtual void ContextSensitiveHelp(int fEnterMode);
    public abstract virtual void GetBorder(RECT[] lprectBorder);
    public abstract virtual void RequestBorderSpace(RECT[] pborderwidths);
    public abstract virtual void SetBorderSpace(RECT[] pborderwidths);
    public abstract virtual void SetActiveObject(IOleInPlaceActiveObject pActiveObject, string pszObjName);
}
[GuidAttribute("00000112-0000-0000-C000-000000000046")]
[ComConversionLossAttribute]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.OLE.Interop.IOleObject {
    public abstract virtual void SetClientSite(IOleClientSite pClientSite);
    public abstract virtual void GetClientSite(IOleClientSite& ppClientSite);
    public abstract virtual void SetHostNames(string szContainerApp, string szContainerObj);
    public abstract virtual void Close(UInt32 dwSaveOption);
    public abstract virtual void SetMoniker(UInt32 dwWhichMoniker, IMoniker pmk);
    public abstract virtual void GetMoniker(UInt32 dwAssign, UInt32 dwWhichMoniker, IMoniker& ppmk);
    public abstract virtual int InitFromData(IDataObject pDataObject, int fCreation, UInt32 dwReserved);
    public abstract virtual void GetClipboardData(UInt32 dwReserved, IDataObject& ppDataObject);
    public abstract virtual int DoVerb(int iVerb, MSG[] lpmsg, IOleClientSite pActiveSite, int lindex, IntPtr hWndParent, RECT[] lprcPosRect);
    public abstract virtual int EnumVerbs(IEnumOLEVERB& ppEnumOleVerb);
    public abstract virtual int Update();
    public abstract virtual int IsUpToDate();
    public abstract virtual void GetUserClassID(Guid& pClsid);
    public abstract virtual int GetUserType(UInt32 dwFormOfType, IntPtr pszUserType);
    public abstract virtual void SetExtent(UInt32 dwDrawAspect, SIZEL[] pSizel);
    public abstract virtual void GetExtent(UInt32 dwDrawAspect, SIZEL[] pSizel);
    public abstract virtual void Advise(IAdviseSink pAdvSink, UInt32& pdwConnection);
    public abstract virtual void Unadvise(UInt32 dwConnection);
    public abstract virtual void EnumAdvise(IEnumSTATDATA& ppenumAdvise);
    public abstract virtual int GetMiscStatus(UInt32 dwAspect, UInt32& pdwStatus);
    public abstract virtual void SetColorScheme(LOGPALETTE[] pLogpal);
}
[GuidAttribute("A1FAF330-EF97-11CE-9BC9-00AA00608E01")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.OLE.Interop.IOleParentUndoUnit {
    public abstract virtual void Do(IOleUndoManager pUndoManager);
    public abstract virtual void GetDescription(String& pBstr);
    public abstract virtual void GetUnitType(Guid& pClsid, Int32& plID);
    public abstract virtual void OnNextAdd();
    public abstract virtual void Open(IOleParentUndoUnit pPUU);
    public abstract virtual int Close(IOleParentUndoUnit pPUU, int fCommit);
    public abstract virtual void Add(IOleUndoUnit pUU);
    public abstract virtual int FindUnit(IOleUndoUnit pUU);
    public abstract virtual void GetParentState(UInt32& pdwState);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("D001F200-EF97-11CE-9BC9-00AA00608E01")]
public interface Microsoft.VisualStudio.OLE.Interop.IOleUndoManager {
    public abstract virtual void Open(IOleParentUndoUnit pPUU);
    public abstract virtual int Close(IOleParentUndoUnit pPUU, int fCommit);
    public abstract virtual void Add(IOleUndoUnit pUU);
    public abstract virtual int GetOpenParentState(UInt32& pdwState);
    public abstract virtual void DiscardFrom(IOleUndoUnit pUU);
    public abstract virtual void UndoTo(IOleUndoUnit pUU);
    public abstract virtual void RedoTo(IOleUndoUnit pUU);
    public abstract virtual void EnumUndoable(IEnumOleUndoUnits& ppEnum);
    public abstract virtual void EnumRedoable(IEnumOleUndoUnits& ppEnum);
    public abstract virtual void GetLastUndoDescription(String& pBstr);
    public abstract virtual void GetLastRedoDescription(String& pBstr);
    public abstract virtual void Enable(int fEnable);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("894AD3B0-EF97-11CE-9BC9-00AA00608E01")]
public interface Microsoft.VisualStudio.OLE.Interop.IOleUndoUnit {
    public abstract virtual void Do(IOleUndoManager pUndoManager);
    public abstract virtual void GetDescription(String& pBstr);
    public abstract virtual void GetUnitType(Guid& pClsid, Int32& plID);
    public abstract virtual void OnNextAdd();
}
[GuidAttribute("00000114-0000-0000-C000-000000000046")]
[InterfaceTypeAttribute("1")]
[ComConversionLossAttribute]
public interface Microsoft.VisualStudio.OLE.Interop.IOleWindow {
    public abstract virtual void GetWindow(IntPtr& phwnd);
    public abstract virtual void ContextSensitiveHelp(int fEnterMode);
}
[ComConversionLossAttribute]
[GuidAttribute("8D19C834-8879-11D1-83E9-00C04FC2C6D4")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.OLE.Interop.IOplockStorage {
    public abstract virtual void CreateStorageEx(string pwcsName, UInt32 grfMode, UInt32 stgfmt, UInt32 grfAttrs, Guid& riid, IntPtr& ppstgOpen);
    public abstract virtual void OpenStorageEx(string pwcsName, UInt32 grfMode, UInt32 stgfmt, UInt32 grfAttrs, Guid& riid, IntPtr& ppstgOpen);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("0000011A-0000-0000-C000-000000000046")]
public interface Microsoft.VisualStudio.OLE.Interop.IParseDisplayName {
    public abstract virtual void ParseDisplayName(IBindCtx pbc, string pszDisplayName, UInt32& pchEaten, IMoniker& ppmkOut);
}
[GuidAttribute("376BD3AA-3845-101B-84ED-08002B2EC713")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.OLE.Interop.IPerPropertyBrowsing {
    public abstract virtual void GetDisplayString(int DISPID, String& pBstr);
    public abstract virtual void MapPropertyToPage(int DISPID, Guid& pClsid);
    public abstract virtual void GetPredefinedStrings(int DISPID, CALPOLESTR[] pCaStringsOut, CADWORD[] pCaCookiesOut);
    public abstract virtual void GetPredefinedValue(int DISPID, UInt32 dwCookie, Object& pVarOut);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("0000010C-0000-0000-C000-000000000046")]
public interface Microsoft.VisualStudio.OLE.Interop.IPersist {
    public abstract virtual int GetClassID(Guid& pClassID);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("0000010B-0000-0000-C000-000000000046")]
public interface Microsoft.VisualStudio.OLE.Interop.IPersistFile {
    public abstract virtual int GetClassID(Guid& pClassID);
    public abstract virtual int IsDirty();
    public abstract virtual void Load(string pszFileName, UInt32 dwMode);
    public abstract virtual void Save(string pszFileName, int fRemember);
    public abstract virtual void SaveCompleted(string pszFileName);
    public abstract virtual void GetCurFile(String& ppszFileName);
}
[GuidAttribute("BD1AE5E0-A6AE-11CE-BD37-504200C10000")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.OLE.Interop.IPersistMemory {
    public abstract virtual int GetClassID(Guid& pClassID);
    public abstract virtual int IsDirty();
    public abstract virtual void Load(Byte[] pMem, UInt32 cbSize);
    public abstract virtual void Save(Byte[] pMem, int fClearDirty, UInt32 cbSize);
    public abstract virtual void GetSizeMax(UInt32& pcbSize);
    public abstract virtual void InitNew();
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("37D84F60-42CB-11CE-8135-00AA004BB851")]
public interface Microsoft.VisualStudio.OLE.Interop.IPersistPropertyBag {
    public abstract virtual int GetClassID(Guid& pClassID);
    public abstract virtual void InitNew();
    public abstract virtual void Load(IPropertyBag pPropBag, IErrorLog pErrorLog);
    public abstract virtual void Save(IPropertyBag pPropBag, int fClearDirty, int fSaveAllProperties);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("22F55881-280B-11D0-A8A9-00A0C90C2004")]
public interface Microsoft.VisualStudio.OLE.Interop.IPersistPropertyBag2 {
    public abstract virtual int GetClassID(Guid& pClassID);
    public abstract virtual void InitNew();
    public abstract virtual void Load(IPropertyBag2 pPropBag, IErrorLog pErrLog);
    public abstract virtual void Save(IPropertyBag2 pPropBag, int fClearDirty, int fSaveAllProperties);
    public abstract virtual int IsDirty();
}
[GuidAttribute("0000010A-0000-0000-C000-000000000046")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.OLE.Interop.IPersistStorage {
    public abstract virtual int GetClassID(Guid& pClassID);
    public abstract virtual int IsDirty();
    public abstract virtual void InitNew(IStorage pstg);
    public abstract virtual void Load(IStorage pstg);
    public abstract virtual void Save(IStorage pStgSave, int fSameAsLoad);
    public abstract virtual void SaveCompleted(IStorage pStgNew);
    public abstract virtual void HandsOffStorage();
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("00000109-0000-0000-C000-000000000046")]
public interface Microsoft.VisualStudio.OLE.Interop.IPersistStream {
    public abstract virtual int GetClassID(Guid& pClassID);
    public abstract virtual int IsDirty();
    public abstract virtual void Load(IStream pstm);
    public abstract virtual void Save(IStream pstm, int fClearDirty);
    public abstract virtual void GetSizeMax(ULARGE_INTEGER[] pcbSize);
}
[GuidAttribute("7FD52380-4E07-101B-AE2D-08002B2EC713")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.OLE.Interop.IPersistStreamInit {
    public abstract virtual int GetClassID(Guid& pClassID);
    public abstract virtual int IsDirty();
    public abstract virtual void Load(IStream pstm);
    public abstract virtual void Save(IStream pstm, int fClearDirty);
    public abstract virtual void GetSizeMax(ULARGE_INTEGER[] pcbSize);
    public abstract virtual void InitNew();
}
[GuidAttribute("55980BA0-35AA-11CF-B671-00AA004CD6D8")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.OLE.Interop.IPointerInactive {
    public abstract virtual void GetActivationPolicy(UInt32& pdwPolicy);
    public abstract virtual void OnInactiveMouseMove(RECT[] pRectBounds, int x, int y, UInt32 grfKeyState);
    public abstract virtual int OnInactiveSetCursor(RECT[] pRectBounds, int x, int y, UInt32 dwMouseMsg, int fSetAlways);
}
[ComConversionLossAttribute]
[InterfaceTypeAttribute("1")]
[GuidAttribute("B722BCC9-4E68-101B-A2BC-00AA00404770")]
public interface Microsoft.VisualStudio.OLE.Interop.IPrint {
    public abstract virtual void SetInitialPageNum(int nFirstPage);
    public abstract virtual void GetPageInfo(Int32& pnFirstPage, Int32& pcPages);
    public abstract virtual void Print(UInt32 grfFlags, IntPtr& pptd, IntPtr& ppPageSet, STGMEDIUM[] pstgmOptions, IContinueCallback pcallback, int nFirstPage, Int32& pcPagesPrinted, Int32& pnLastPage);
}
[GuidAttribute("72380D55-8D2B-43A3-8513-2B6EF31434E9")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.OLE.Interop.IProcessInitControl {
    public abstract virtual void ResetInitializerTimeout(UInt32 dwSecondsRemaining);
}
[GuidAttribute("A9D758A0-4617-11CF-95FC-00AA00680DB4")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.OLE.Interop.IProgressNotify {
    public abstract virtual void OnProgress(UInt32 dwProgressCurrent, UInt32 dwProgressMaximum, int fAccurate, int fOwner);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("55272A00-42CB-11CE-8135-00AA004BB851")]
public interface Microsoft.VisualStudio.OLE.Interop.IPropertyBag {
    public abstract virtual void Read(string pszPropName, Object& pVar, IErrorLog pErrorLog, UInt32 VARTYPE, object pUnkObj);
    public abstract virtual void Write(string pszPropName, Object& pVar);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("22F55882-280B-11D0-A8A9-00A0C90C2004")]
public interface Microsoft.VisualStudio.OLE.Interop.IPropertyBag2 {
    public abstract virtual void Read(UInt32 cProperties, PROPBAG2[] pPropBag, IErrorLog pErrLog, Object& pvarValue, Int32& phrError);
    public abstract virtual void Write(UInt32 cProperties, PROPBAG2[] pPropBag, Object& pvarValue);
    public abstract virtual void CountProperties(UInt32& pcProperties);
    public abstract virtual void GetPropertyInfo(UInt32 iProperty, UInt32 cProperties, PROPBAG2[] pPropBag, UInt32& pcProperties);
    public abstract virtual void LoadObject(string pstrName, UInt32 dwHint, object punkObject, IErrorLog pErrLog);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("9BFBBC02-EFF1-101A-84ED-00AA00341D07")]
public interface Microsoft.VisualStudio.OLE.Interop.IPropertyNotifySink {
    public abstract virtual void OnChanged(int DISPID);
    public abstract virtual void OnRequestEdit(int DISPID);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("B196B28D-BAB4-101A-B69C-00AA00341D07")]
[ComConversionLossAttribute]
public interface Microsoft.VisualStudio.OLE.Interop.IPropertyPage {
    public abstract virtual void SetPageSite(IPropertyPageSite pPageSite);
    public abstract virtual void Activate(IntPtr hWndParent, RECT[] pRect, int bModal);
    public abstract virtual void Deactivate();
    public abstract virtual void GetPageInfo(PROPPAGEINFO[] pPageInfo);
    public abstract virtual void SetObjects(UInt32 cObjects, Object[] ppunk);
    public abstract virtual void Show(UInt32 nCmdShow);
    public abstract virtual void Move(RECT[] pRect);
    public abstract virtual int IsPageDirty();
    public abstract virtual int Apply();
    public abstract virtual void Help(string pszHelpDir);
    public abstract virtual int TranslateAccelerator(MSG[] pMsg);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("01E44665-24AC-101B-84ED-08002B2EC713")]
public interface Microsoft.VisualStudio.OLE.Interop.IPropertyPage2 {
    public abstract virtual void SetPageSite(IPropertyPageSite pPageSite);
    public abstract virtual void Activate(IntPtr hWndParent, RECT[] pRect, int bModal);
    public abstract virtual void Deactivate();
    public abstract virtual void GetPageInfo(PROPPAGEINFO[] pPageInfo);
    public abstract virtual void SetObjects(UInt32 cObjects, Object[] ppunk);
    public abstract virtual void Show(UInt32 nCmdShow);
    public abstract virtual void Move(RECT[] pRect);
    public abstract virtual int IsPageDirty();
    public abstract virtual void Apply();
    public abstract virtual void Help(string pszHelpDir);
    public abstract virtual int TranslateAccelerator(MSG[] pMsg);
    public abstract virtual void EditProperty(int DISPID);
}
[GuidAttribute("B196B28C-BAB4-101A-B69C-00AA00341D07")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.OLE.Interop.IPropertyPageSite {
    public abstract virtual void OnStatusChange(UInt32 dwFlags);
    public abstract virtual void GetLocaleID(UInt32& pLocaleID);
    public abstract virtual void GetPageContainer(Object& ppunk);
    public abstract virtual int TranslateAccelerator(MSG[] pMsg);
}
[GuidAttribute("0000013A-0000-0000-C000-000000000046")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.OLE.Interop.IPropertySetStorage {
    public abstract virtual void Create(Guid& rfmtid, Guid& pClsid, UInt32 grfFlags, UInt32 grfMode, IPropertyStorage& ppprstg);
    public abstract virtual void Open(Guid& rfmtid, UInt32 grfMode, IPropertyStorage& ppprstg);
    public abstract virtual void Delete(Guid& rfmtid);
    public abstract virtual void Enum(IEnumSTATPROPSETSTG& ppEnum);
}
[GuidAttribute("00000138-0000-0000-C000-000000000046")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.OLE.Interop.IPropertyStorage {
    public abstract virtual void ReadMultiple(UInt32 cpspec, PROPSPEC[] rgpspec, PROPVARIANT[] rgpropvar);
    public abstract virtual void WriteMultiple(UInt32 cpspec, PROPSPEC[] rgpspec, PROPVARIANT[] rgpropvar, UInt32 propidNameFirst);
    public abstract virtual void DeleteMultiple(UInt32 cpspec, PROPSPEC[] rgpspec);
    public abstract virtual void ReadPropertyNames(UInt32 cpropid, UInt32[] rgpropid, String[] rglpwstrName);
    public abstract virtual void WritePropertyNames(UInt32 cpropid, UInt32[] rgpropid, String[] rglpwstrName);
    public abstract virtual void DeletePropertyNames(UInt32 cpropid, UInt32[] rgpropid);
    public abstract virtual void Commit(UInt32 grfCommitFlags);
    public abstract virtual void Revert();
    public abstract virtual void Enum(IEnumSTATPROPSTG& ppEnum);
    public abstract virtual void SetTimes(FILETIME[] pctime, FILETIME[] patime, FILETIME[] pmtime);
    public abstract virtual void SetClass(Guid& clsid);
    public abstract virtual void Stat(STATPROPSETSTG[] pstatpsstg);
}
[GuidAttribute("B196B283-BAB4-101A-B69C-00AA00341D07")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.OLE.Interop.IProvideClassInfo {
    public abstract virtual void GetClassInfo(Type& ppTI);
}
[GuidAttribute("A6BC3AC0-DBAA-11CE-9DE3-00AA004BB851")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.OLE.Interop.IProvideClassInfo2 {
    public abstract virtual void GetClassInfo(Type& ppTI);
    public abstract virtual void GetGUID(UInt32 dwGuidKind, Guid& pGUID);
}
[GuidAttribute("A7ABA9C1-8983-11CF-8F20-00805F2CD064")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.OLE.Interop.IProvideMultipleClassInfo {
    public abstract virtual void GetClassInfo(Type& ppTI);
    public abstract virtual void GetGUID(UInt32 dwGuidKind, Guid& pGUID);
    public abstract virtual void GetMultiTypeInfoCount(UInt32& pcti);
    public abstract virtual void GetInfoOfIndex(UInt32 iti, UInt32 dwFlags, Type& pptiCoClass, UInt32& pdwTIFlags, UInt32& pcdispidReserved, Guid& piidPrimary, Guid& piidSource);
}
[GuidAttribute("D5F569D0-593B-101A-B569-08002B2DBF7A")]
[ComConversionLossAttribute]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.OLE.Interop.IPSFactoryBuffer {
    public abstract virtual void CreateProxy(object pUnkOuter, Guid& riid, IRpcProxyBuffer& ppProxy, IntPtr& ppv);
    public abstract virtual void CreateStub(Guid& riid, object pUnkServer, IRpcStubBuffer& ppStub);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("CF51ED10-62FE-11CF-BF86-00A0C9034836")]
public interface Microsoft.VisualStudio.OLE.Interop.IQuickActivate {
    public abstract virtual void QuickActivate(QACONTAINER[] pQaContainer, QACONTROL[] pQaControl);
    public abstract virtual void SetContentExtent(SIZEL[] pSizel);
    public abstract virtual void GetContentExtent(SIZEL[] pSizel);
}
[GuidAttribute("0000002F-0000-0000-C000-000000000046")]
[ComConversionLossAttribute]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.OLE.Interop.IRecordInfo {
    public abstract virtual void RecordInit(IntPtr& pvNew);
    public abstract virtual void RecordClear(IntPtr pvExisting);
    public abstract virtual void RecordCopy(IntPtr pvExisting, IntPtr& pvNew);
    public abstract virtual void GetGUID(Guid& pGUID);
    public abstract virtual void GetName(String& pBstrName);
    public abstract virtual void GetSize(UInt32& pcbSize);
    public abstract virtual void GetTypeInfo(Type& ppTypeInfo);
    public abstract virtual void GetField(IntPtr pvData, string szFieldName, Object& pvarField);
    public abstract virtual void GetFieldNoCopy(IntPtr pvData, string szFieldName, Object& pvarField, IntPtr& ppvDataCArray);
    public abstract virtual void PutField(UInt32 wFlags, IntPtr& pvData, string szFieldName, Object& pvarField);
    public abstract virtual void PutFieldNoCopy(UInt32 wFlags, IntPtr& pvData, string szFieldName, Object& pvarField);
    public abstract virtual void GetFieldNames(UInt32& pcNames, String[] rgBstrNames);
    public abstract virtual int IsMatchingType(IRecordInfo pRecordInfo);
    public abstract virtual IntPtr RecordCreate();
    public abstract virtual void RecordCreateCopy(IntPtr pvSource, IntPtr& ppvDest);
    public abstract virtual void RecordDestroy(IntPtr pvRecord);
}
[GuidAttribute("EB0CB9E8-7996-11D2-872E-0000F8080859")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.OLE.Interop.IReleaseMarshalBuffers {
    public abstract virtual void ReleaseMarshalBuffer(RPCOLEMESSAGE[] pMsg, UInt32 dwFlags, object pChnl);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("00000012-0000-0000-C000-000000000046")]
public interface Microsoft.VisualStudio.OLE.Interop.IRootStorage {
    public abstract virtual void SwitchToFile(string pszFile);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("F29F6BC0-5021-11CE-AA15-00006901293F")]
public interface Microsoft.VisualStudio.OLE.Interop.IROTData {
    public abstract virtual void GetComparisonData(Byte[] pbData, UInt32 cbMax, UInt32& pcbData);
}
[GuidAttribute("D5F56B60-593B-101A-B569-08002B2DBF7A")]
[InterfaceTypeAttribute("1")]
[ComConversionLossAttribute]
public interface Microsoft.VisualStudio.OLE.Interop.IRpcChannelBuffer {
    public abstract virtual void GetBuffer(RPCOLEMESSAGE[] pMessage, Guid& riid);
    public abstract virtual void SendReceive(RPCOLEMESSAGE[] pMessage, UInt32& pStatus);
    public abstract virtual void FreeBuffer(RPCOLEMESSAGE[] pMessage);
    public abstract virtual void GetDestCtx(UInt32& pdwDestContext, IntPtr& ppvDestContext);
    public abstract virtual void IsConnected();
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("594F31D0-7F19-11D0-B194-00A0C90DC8BF")]
public interface Microsoft.VisualStudio.OLE.Interop.IRpcChannelBuffer2 {
    public abstract virtual void GetBuffer(RPCOLEMESSAGE[] pMessage, Guid& riid);
    public abstract virtual void SendReceive(RPCOLEMESSAGE[] pMessage, UInt32& pStatus);
    public abstract virtual void FreeBuffer(RPCOLEMESSAGE[] pMessage);
    public abstract virtual void GetDestCtx(UInt32& pdwDestContext, IntPtr& ppvDestContext);
    public abstract virtual void IsConnected();
    public abstract virtual void GetProtocolVersion(UInt32& pdwVersion);
}
[GuidAttribute("25B15600-0115-11D0-BF0D-00AA00B8DFD2")]
[InterfaceTypeAttribute("1")]
[ComConversionLossAttribute]
public interface Microsoft.VisualStudio.OLE.Interop.IRpcChannelBuffer3 {
    public abstract virtual void GetBuffer(RPCOLEMESSAGE[] pMessage, Guid& riid);
    public abstract virtual void SendReceive(RPCOLEMESSAGE[] pMessage, UInt32& pStatus);
    public abstract virtual void FreeBuffer(RPCOLEMESSAGE[] pMessage);
    public abstract virtual void GetDestCtx(UInt32& pdwDestContext, IntPtr& ppvDestContext);
    public abstract virtual void IsConnected();
    public abstract virtual void GetProtocolVersion(UInt32& pdwVersion);
    public abstract virtual void Send(RPCOLEMESSAGE[] pMsg, UInt32& pulStatus);
    public abstract virtual void Receive(RPCOLEMESSAGE[] pMsg, UInt32 ulSize, UInt32& pulStatus);
    public abstract virtual void Cancel(RPCOLEMESSAGE[] pMsg);
    public abstract virtual void GetCallContext(RPCOLEMESSAGE[] pMsg, Guid& riid, IntPtr& pInterface);
    public abstract virtual void GetDestCtxEx(RPCOLEMESSAGE[] pMsg, UInt32& pdwDestContext, IntPtr& ppvDestContext);
    public abstract virtual void GetState(RPCOLEMESSAGE[] pMsg, UInt32& pState);
    public abstract virtual void RegisterAsync(RPCOLEMESSAGE[] pMsg, IAsyncManager pAsyncMgr);
}
[ComConversionLossAttribute]
[InterfaceTypeAttribute("1")]
[GuidAttribute("00000149-0000-0000-C000-000000000046")]
public interface Microsoft.VisualStudio.OLE.Interop.IRpcHelper {
    public abstract virtual void GetDCOMProtocolVersion(UInt32& pComVersion);
    public abstract virtual void GetIIDFromOBJREF(IntPtr pObjRef, IntPtr& pIID);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("00000144-0000-0000-C000-000000000046")]
public interface Microsoft.VisualStudio.OLE.Interop.IRpcOptions {
    public abstract virtual void Set(object pPrx, UInt32 dwProperty, IntPtr dwValue);
    public abstract virtual void Query(object pPrx, UInt32 dwProperty, IntPtr& pdwValue);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("D5F56A34-593B-101A-B569-08002B2DBF7A")]
public interface Microsoft.VisualStudio.OLE.Interop.IRpcProxyBuffer {
    public abstract virtual void Connect(IRpcChannelBuffer pRpcChannelBuffer);
    public abstract virtual void Disconnect();
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("D5F56AFC-593B-101A-B569-08002B2DBF7A")]
[ComConversionLossAttribute]
public interface Microsoft.VisualStudio.OLE.Interop.IRpcStubBuffer {
    public abstract virtual void Connect(object pUnkServer);
    public abstract virtual void Disconnect();
    public abstract virtual void Invoke(RPCOLEMESSAGE[] _prpcmsg, IRpcChannelBuffer _pRpcChannelBuffer);
    public abstract virtual IRpcStubBuffer IsIIDSupported(Guid& riid);
    public abstract virtual UInt32 CountRefs();
    public abstract virtual void DebugServerQueryInterface(IntPtr& ppv);
    public abstract virtual void DebugServerRelease(IntPtr pv);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("58A08519-24C8-4935-B482-3FD823333A4F")]
public interface Microsoft.VisualStudio.OLE.Interop.IRpcSyntaxNegotiate {
    public abstract virtual void NegotiateSyntax(RPCOLEMESSAGE[] pMsg);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("00000126-0000-0000-C000-000000000046")]
public interface Microsoft.VisualStudio.OLE.Interop.IRunnableObject {
    public abstract virtual void GetRunningClass(Guid& lpClsid);
    public abstract virtual void Run(IBindCtx pbc);
    public abstract virtual int IsRunning();
    public abstract virtual void LockRunning(int fLock, int fLastUnlockCloses);
    public abstract virtual void SetContainedObject(int fContained);
}
[GuidAttribute("00000010-0000-0000-C000-000000000046")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.OLE.Interop.IRunningObjectTable {
    public abstract virtual void Register(UInt32 grfFlags, object punkObject, IMoniker pmkObjectName, UInt32& pdwRegister);
    public abstract virtual void Revoke(UInt32 dwRegister);
    public abstract virtual int IsRunning(IMoniker pmkObjectName);
    public abstract virtual void GetObject(IMoniker pmkObjectName, Object& ppunkObject);
    public abstract virtual void NoteChangeTime(UInt32 dwRegister, FILETIME[] pFileTime);
    public abstract virtual void GetTimeOfLastChange(IMoniker pmkObjectName, FILETIME[] pFileTime);
    public abstract virtual void EnumRunning(IEnumMoniker& ppenumMoniker);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("0C733A30-2A1C-11CE-ADE5-00AA0044773D")]
public interface Microsoft.VisualStudio.OLE.Interop.ISequentialStream {
    public abstract virtual void Read(Byte[] pv, UInt32 cb, UInt32& pcbRead);
    public abstract virtual void Write(Byte[] pv, UInt32 cb, UInt32& pcbWritten);
}
[InterfaceTypeAttribute("1")]
[ComConversionLossAttribute]
[GuidAttribute("0000013E-0000-0000-C000-000000000046")]
public interface Microsoft.VisualStudio.OLE.Interop.IServerSecurity {
    public abstract virtual void QueryBlanket(UInt32& pAuthnSvc, UInt32& pAuthzSvc, IntPtr pServerPrincName, UInt32& pAuthnLevel, UInt32& pImpLevel, IntPtr& pPrivs, UInt32& pCapabilities);
    public abstract virtual void ImpersonateClient();
    public abstract virtual void RevertToSelf();
    public abstract virtual int IsImpersonating();
}
[GuidAttribute("6D5140C1-7436-11CE-8034-00AA006009FA")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.OLE.Interop.IServiceProvider {
    public abstract virtual int QueryService(Guid& guidService, Guid& riid, IntPtr& ppvObject);
}
[ComConversionLossAttribute]
[InterfaceTypeAttribute("1")]
[GuidAttribute("742B0E01-14E6-101B-914E-00AA00300CAB")]
public interface Microsoft.VisualStudio.OLE.Interop.ISimpleFrameSite {
    public abstract virtual int PreMessageFilter(IntPtr hwnd, UInt32 MSG, IntPtr wp, IntPtr lp, IntPtr& plResult, UInt32& pdwCookie);
    public abstract virtual int PostMessageFilter(IntPtr hwnd, UInt32 MSG, IntPtr wp, IntPtr lp, IntPtr& plResult, UInt32 dwCookie);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("B196B28B-BAB4-101A-B69C-00AA00341D07")]
public interface Microsoft.VisualStudio.OLE.Interop.ISpecifyPropertyPages {
    public abstract virtual void GetPages(CAUUID[] pPages);
}
[GuidAttribute("00000018-0000-0000-C000-000000000046")]
[ComConversionLossAttribute]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.OLE.Interop.IStdMarshalInfo {
    public abstract virtual void GetClassForHandler(UInt32 dwDestContext, IntPtr pvDestContext, Guid& pClsid);
}
[GuidAttribute("0000000B-0000-0000-C000-000000000046")]
[ComConversionLossAttribute]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.OLE.Interop.IStorage {
    public abstract virtual void CreateStream(string pwcsName, UInt32 grfMode, UInt32 reserved1, UInt32 reserved2, IStream& ppstm);
    public abstract virtual void OpenStream(string pwcsName, IntPtr reserved1, UInt32 grfMode, UInt32 reserved2, IStream& ppstm);
    public abstract virtual void CreateStorage(string pwcsName, UInt32 grfMode, UInt32 reserved1, UInt32 reserved2, IStorage& ppstg);
    public abstract virtual void OpenStorage(string pwcsName, IStorage pstgPriority, UInt32 grfMode, IntPtr snbExclude, UInt32 reserved, IStorage& ppstg);
    public abstract virtual void CopyTo(UInt32 ciidExclude, Guid[] rgiidExclude, IntPtr snbExclude, IStorage pstgDest);
    public abstract virtual void MoveElementTo(string pwcsName, IStorage pstgDest, string pwcsNewName, UInt32 grfFlags);
    public abstract virtual void Commit(UInt32 grfCommitFlags);
    public abstract virtual void Revert();
    public abstract virtual void EnumElements(UInt32 reserved1, IntPtr reserved2, UInt32 reserved3, IEnumSTATSTG& ppEnum);
    public abstract virtual void DestroyElement(string pwcsName);
    public abstract virtual void RenameElement(string pwcsOldName, string pwcsNewName);
    public abstract virtual void SetElementTimes(string pwcsName, FILETIME[] pctime, FILETIME[] patime, FILETIME[] pmtime);
    public abstract virtual void SetClass(Guid& clsid);
    public abstract virtual void SetStateBits(UInt32 grfStateBits, UInt32 grfMask);
    public abstract virtual void Stat(STATSTG[] pstatstg, UInt32 grfStatFlag);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("0000000C-0000-0000-C000-000000000046")]
public interface Microsoft.VisualStudio.OLE.Interop.IStream {
    public abstract virtual void Read(Byte[] pv, UInt32 cb, UInt32& pcbRead);
    public abstract virtual void Write(Byte[] pv, UInt32 cb, UInt32& pcbWritten);
    public abstract virtual void Seek(LARGE_INTEGER dlibMove, UInt32 dwOrigin, ULARGE_INTEGER[] plibNewPosition);
    public abstract virtual void SetSize(ULARGE_INTEGER libNewSize);
    public abstract virtual void CopyTo(IStream pstm, ULARGE_INTEGER cb, ULARGE_INTEGER[] pcbRead, ULARGE_INTEGER[] pcbWritten);
    public abstract virtual void Commit(UInt32 grfCommitFlags);
    public abstract virtual void Revert();
    public abstract virtual void LockRegion(ULARGE_INTEGER libOffset, ULARGE_INTEGER cb, UInt32 dwLockType);
    public abstract virtual void UnlockRegion(ULARGE_INTEGER libOffset, ULARGE_INTEGER cb, UInt32 dwLockType);
    public abstract virtual void Stat(STATSTG[] pstatstg, UInt32 grfStatFlag);
    public abstract virtual void Clone(IStream& ppstm);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("00000022-0000-0000-C000-000000000046")]
public interface Microsoft.VisualStudio.OLE.Interop.ISurrogate {
    public abstract virtual void LoadDllServer(Guid& clsid);
    public abstract virtual void FreeSurrogate();
}
[GuidAttribute("00000030-0000-0000-C000-000000000046")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.OLE.Interop.ISynchronize {
    public abstract virtual int Wait(UInt32 dwFlags, UInt32 dwMilliseconds);
    public abstract virtual void Signal();
    public abstract virtual void Reset();
}
[GuidAttribute("00000033-0000-0000-C000-000000000046")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.OLE.Interop.ISynchronizeContainer {
    public abstract virtual void AddSynchronize(ISynchronize pSync);
    public abstract virtual void WaitMultiple(UInt32 dwFlags, UInt32 dwTimeout, ISynchronize& ppSync);
}
[GuidAttribute("00000032-0000-0000-C000-000000000046")]
[InterfaceTypeAttribute("1")]
[ComConversionLossAttribute]
public interface Microsoft.VisualStudio.OLE.Interop.ISynchronizeEvent {
    public abstract virtual void GetHandle(IntPtr& ph);
    public abstract virtual void SetEventHandle(IntPtr ph);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("00000031-0000-0000-C000-000000000046")]
[ComConversionLossAttribute]
public interface Microsoft.VisualStudio.OLE.Interop.ISynchronizeHandle {
    public abstract virtual void GetHandle(IntPtr& ph);
}
[GuidAttribute("00000025-0000-0000-C000-000000000046")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.OLE.Interop.ISynchronizeMutex {
    public abstract virtual void Wait(UInt32 dwFlags, UInt32 dwMilliseconds);
    public abstract virtual void Signal();
    public abstract virtual void Reset();
    public abstract virtual void ReleaseMutex();
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("969DC708-5C76-11D1-8D86-0000F804B057")]
[ComConversionLossAttribute]
public interface Microsoft.VisualStudio.OLE.Interop.IThumbnailExtractor {
    public abstract virtual void ExtractThumbnail(IStorage pstg, UInt32 ulLength, UInt32 ulHeight, UInt32& pulOutputLength, UInt32& pulOutputHeight, IntPtr& phOutputBitmap);
    public abstract virtual void OnFileUpdated(IStorage pstg);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("BC0BF6AE-8878-11D1-83E9-00C04FC2C6D4")]
public interface Microsoft.VisualStudio.OLE.Interop.ITimeAndNoticeControl {
    public abstract virtual void SuppressChanges(UInt32 res1, UInt32 res2);
}
[ObsoleteAttribute("Please use System.Runtime.InteropServices.ComTypes.ITypeComp instead of this type.")]
[GuidAttribute("00020403-0000-0000-C000-000000000046")]
[InterfaceTypeAttribute("1")]
[ComConversionLossAttribute]
public interface Microsoft.VisualStudio.OLE.Interop.ITypeComp {
    public abstract virtual void Bind(string szName, UInt32 lHashVal, ushort wFlags, Type& ppTInfo, DESCKIND[] pDescKind, IntPtr& ppFuncDesc, IntPtr& ppVarDesc, ITypeComp& ppTypeComp, CLEANLOCALSTORAGE[] pDummy);
    public abstract virtual void BindType(string szName, UInt32 lHashVal, Type& ppTInfo);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("00000026-0000-0000-C000-000000000046")]
public interface Microsoft.VisualStudio.OLE.Interop.IUrlMon {
    public abstract virtual void AsyncGetClassBits(Guid& rclsid, string pszTYPE, string pszExt, UInt32 dwFileVersionMS, UInt32 dwFileVersionLS, string pszCodeBase, IBindCtx pbc, UInt32 dwClassContext, Guid& riid, UInt32 Flags);
}
[GuidAttribute("0000010D-0000-0000-C000-000000000046")]
[ComConversionLossAttribute]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.OLE.Interop.IViewObject {
    public abstract virtual void Draw(UInt32 dwDrawAspect, int lindex, IntPtr pvAspect, DVTARGETDEVICE[] ptd, IntPtr hdcTargetDev, IntPtr hdcDraw, RECTL[] lprcBounds, RECTL[] lprcWBounds, IntPtr pfnContinue, IntPtr dwContinue);
    public abstract virtual int GetColorSet(UInt32 dwDrawAspect, int lindex, IntPtr pvAspect, DVTARGETDEVICE[] ptd, IntPtr hicTargetDev, IntPtr& ppColorSet);
    public abstract virtual int Freeze(UInt32 dwDrawAspect, int lindex, IntPtr pvAspect, UInt32& pdwFreeze);
    public abstract virtual void Unfreeze(UInt32 dwFreeze);
    public abstract virtual void SetAdvise(UInt32 aspects, UInt32 ADVF, IAdviseSink pAdvSink);
    public abstract virtual void GetAdvise(UInt32& pAspects, UInt32& pAdvf, IAdviseSink& ppAdvSink);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("00000127-0000-0000-C000-000000000046")]
public interface Microsoft.VisualStudio.OLE.Interop.IViewObject2 {
    public abstract virtual void Draw(UInt32 dwDrawAspect, int lindex, IntPtr pvAspect, DVTARGETDEVICE[] ptd, IntPtr hdcTargetDev, IntPtr hdcDraw, RECTL[] lprcBounds, RECTL[] lprcWBounds, IntPtr pfnContinue, IntPtr dwContinue);
    public abstract virtual int GetColorSet(UInt32 dwDrawAspect, int lindex, IntPtr pvAspect, DVTARGETDEVICE[] ptd, IntPtr hicTargetDev, IntPtr& ppColorSet);
    public abstract virtual int Freeze(UInt32 dwDrawAspect, int lindex, IntPtr pvAspect, UInt32& pdwFreeze);
    public abstract virtual void Unfreeze(UInt32 dwFreeze);
    public abstract virtual void SetAdvise(UInt32 aspects, UInt32 ADVF, IAdviseSink pAdvSink);
    public abstract virtual void GetAdvise(UInt32& pAspects, UInt32& pAdvf, IAdviseSink& ppAdvSink);
    public abstract virtual void GetExtent(UInt32 dwDrawAspect, int lindex, DVTARGETDEVICE[] ptd, SIZEL[] LPSIZEL);
}
[ComConversionLossAttribute]
[InterfaceTypeAttribute("1")]
[GuidAttribute("3AF24292-0C96-11CE-A0CF-00AA00600AB8")]
public interface Microsoft.VisualStudio.OLE.Interop.IViewObjectEx {
    public abstract virtual void Draw(UInt32 dwDrawAspect, int lindex, IntPtr pvAspect, DVTARGETDEVICE[] ptd, IntPtr hdcTargetDev, IntPtr hdcDraw, RECTL[] lprcBounds, RECTL[] lprcWBounds, IntPtr pfnContinue, IntPtr dwContinue);
    public abstract virtual int GetColorSet(UInt32 dwDrawAspect, int lindex, IntPtr pvAspect, DVTARGETDEVICE[] ptd, IntPtr hicTargetDev, IntPtr& ppColorSet);
    public abstract virtual int Freeze(UInt32 dwDrawAspect, int lindex, IntPtr pvAspect, UInt32& pdwFreeze);
    public abstract virtual void Unfreeze(UInt32 dwFreeze);
    public abstract virtual void SetAdvise(UInt32 aspects, UInt32 ADVF, IAdviseSink pAdvSink);
    public abstract virtual void GetAdvise(UInt32& pAspects, UInt32& pAdvf, IAdviseSink& ppAdvSink);
    public abstract virtual void GetExtent(UInt32 dwDrawAspect, int lindex, DVTARGETDEVICE[] ptd, SIZEL[] LPSIZEL);
    public abstract virtual void GetRect(UInt32 dwAspect, RECTL[] pRect);
    public abstract virtual void GetViewStatus(UInt32& pdwStatus);
    public abstract virtual void QueryHitPoint(UInt32 dwAspect, RECT[] pRectBounds, POINT ptlLoc, int lCloseHint, UInt32& pHitResult);
    public abstract virtual void QueryHitRect(UInt32 dwAspect, RECT[] pRectBounds, RECT[] pRectLoc, int lCloseHint, UInt32& pHitResult);
    public abstract virtual void GetNaturalExtent(UInt32 dwAspect, int lindex, DVTARGETDEVICE[] ptd, IntPtr hicTargetDev, DVEXTENTINFO[] pExtentInfo, SIZEL[] pSizel);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("0000002B-0000-0000-C000-000000000046")]
public interface Microsoft.VisualStudio.OLE.Interop.IWaitMultiple {
    public abstract virtual void WaitMultiple(UInt32 timeout, ISynchronize& pSync);
    public abstract virtual void AddSynchronize(ISynchronize pSync);
}
public class Microsoft.VisualStudio.OLE.Interop.LARGE_INTEGER : ValueType {
    [ComAliasNameAttribute("Microsoft.VisualStudio.OLE.Interop.LONGLONG")]
public long QuadPart;
}
[FlagsAttribute]
public enum Microsoft.VisualStudio.OLE.Interop.LIBFLAGS : Enum {
    public int value__;
    public static LIBFLAGS LIBFLAG_FRESTRICTED;
    public static LIBFLAGS LIBFLAG_FCONTROL;
    public static LIBFLAGS LIBFLAG_FHIDDEN;
    public static LIBFLAGS LIBFLAG_FHASDISKIMAGE;
}
public class Microsoft.VisualStudio.OLE.Interop.LICINFO : ValueType {
    [ComAliasNameAttribute("Microsoft.VisualStudio.OLE.Interop.LONG")]
public int cbLicInfo;
    [ComAliasNameAttribute("Microsoft.VisualStudio.OLE.Interop.BOOL")]
public int fRuntimeKeyAvail;
    [ComAliasNameAttribute("Microsoft.VisualStudio.OLE.Interop.BOOL")]
public int fLicVerified;
}
public enum Microsoft.VisualStudio.OLE.Interop.LOCKTYPE : Enum {
    public int value__;
    public static LOCKTYPE LOCK_WRITE;
    public static LOCKTYPE LOCK_EXCLUSIVE;
    public static LOCKTYPE LOCK_ONLYONCE;
}
[ComConversionLossAttribute]
public class Microsoft.VisualStudio.OLE.Interop.LOGPALETTE : ValueType {
    [ComAliasNameAttribute("Microsoft.VisualStudio.OLE.Interop.WORD")]
public ushort palVersion;
    [ComAliasNameAttribute("Microsoft.VisualStudio.OLE.Interop.WORD")]
public ushort palNumEntries;
    [ComAliasNameAttribute("Microsoft.VisualStudio.OLE.Interop.PALETTEENTRY")]
[ComConversionLossAttribute]
public IntPtr palPalEntry;
}
public enum Microsoft.VisualStudio.OLE.Interop.MEMCTX : Enum {
    public int value__;
    public static MEMCTX MEMCTX_TASK;
    public static MEMCTX MEMCTX_SHARED;
    public static MEMCTX MEMCTX_MACSYSTEM;
    public static MEMCTX MEMCTX_UNKNOWN;
    public static MEMCTX MEMCTX_SAME;
}
public enum Microsoft.VisualStudio.OLE.Interop.MKRREDUCE : Enum {
    public int value__;
    public static MKRREDUCE MKRREDUCE_ONE;
    public static MKRREDUCE MKRREDUCE_TOUSER;
    public static MKRREDUCE MKRREDUCE_THROUGHUSER;
    public static MKRREDUCE MKRREDUCE_ALL;
}
public enum Microsoft.VisualStudio.OLE.Interop.MKSYS : Enum {
    public int value__;
    public static MKSYS MKSYS_NONE;
    public static MKSYS MKSYS_GENERICCOMPOSITE;
    public static MKSYS MKSYS_FILEMONIKER;
    public static MKSYS MKSYS_ANTIMONIKER;
    public static MKSYS MKSYS_ITEMMONIKER;
    public static MKSYS MKSYS_POINTERMONIKER;
    public static MKSYS MKSYS_CLASSMONIKER;
    public static MKSYS MKSYS_OBJREFMONIKER;
    public static MKSYS MKSYS_SESSIONMONIKER;
}
public enum Microsoft.VisualStudio.OLE.Interop.MONIKERPROPERTY : Enum {
    public int value__;
    public static MONIKERPROPERTY MIMETYPEPROP;
    public static MONIKERPROPERTY USE_SRC_URL;
}
[ComConversionLossAttribute]
public class Microsoft.VisualStudio.OLE.Interop.MSG : ValueType {
    [ComConversionLossAttribute]
public IntPtr hwnd;
    [ComAliasNameAttribute("Microsoft.VisualStudio.OLE.Interop.UINT")]
public UInt32 message;
    [ComAliasNameAttribute("Microsoft.VisualStudio.OLE.Interop.UINT_PTR")]
public IntPtr wParam;
    [ComAliasNameAttribute("Microsoft.VisualStudio.OLE.Interop.LONG_PTR")]
public IntPtr lParam;
    [ComAliasNameAttribute("Microsoft.VisualStudio.OLE.Interop.DWORD")]
public UInt32 time;
    [ComAliasNameAttribute("Microsoft.VisualStudio.OLE.Interop.POINT")]
public POINT pt;
}
public enum Microsoft.VisualStudio.OLE.Interop.MSHCTX : Enum {
    public int value__;
    public static MSHCTX MSHCTX_LOCAL;
    public static MSHCTX MSHCTX_NOSHAREDMEM;
    public static MSHCTX MSHCTX_DIFFERENTMACHINE;
    public static MSHCTX MSHCTX_INPROC;
    public static MSHCTX MSHCTX_CROSSCTX;
}
[FlagsAttribute]
public enum Microsoft.VisualStudio.OLE.Interop.MSHLFLAGS : Enum {
    public int value__;
    public static MSHLFLAGS MSHLFLAGS_NORMAL;
    public static MSHLFLAGS MSHLFLAGS_TABLESTRONG;
    public static MSHLFLAGS MSHLFLAGS_TABLEWEAK;
    public static MSHLFLAGS MSHLFLAGS_NOPING;
    public static MSHLFLAGS MSHLFLAGS_RESERVED1;
    public static MSHLFLAGS MSHLFLAGS_RESERVED2;
    public static MSHLFLAGS MSHLFLAGS_RESERVED3;
    public static MSHLFLAGS MSHLFLAGS_RESERVED4;
}
[ComConversionLossAttribute]
public class Microsoft.VisualStudio.OLE.Interop.MULTI_QI : ValueType {
    [ComConversionLossAttribute]
public IntPtr pIID;
    public object pItf;
    public int hr;
}
[FlagsAttribute]
public enum Microsoft.VisualStudio.OLE.Interop.OIBDG_FLAGS : Enum {
    public int value__;
    public static OIBDG_FLAGS OIBDG_APARTMENTTHREADED;
    public static OIBDG_FLAGS OIBDG_DATAONLY;
}
public class Microsoft.VisualStudio.OLE.Interop.OLECHOSTINFO : ValueType {
    [ComAliasNameAttribute("Microsoft.VisualStudio.OLE.Interop.ULONG")]
public UInt32 cbSize;
    [ComAliasNameAttribute("Microsoft.VisualStudio.OLE.Interop.OLECHOSTF")]
public UInt32 grfchostf;
}
public enum Microsoft.VisualStudio.OLE.Interop.OLECLOSE : Enum {
    public int value__;
    public static OLECLOSE OLECLOSE_SAVEIFDIRTY;
    public static OLECLOSE OLECLOSE_NOSAVE;
    public static OLECLOSE OLECLOSE_PROMPTSAVE;
}
public class Microsoft.VisualStudio.OLE.Interop.OLECMD : ValueType {
    [ComAliasNameAttribute("Microsoft.VisualStudio.OLE.Interop.ULONG")]
public UInt32 cmdID;
    [ComAliasNameAttribute("Microsoft.VisualStudio.OLE.Interop.DWORD")]
public UInt32 cmdf;
}
public enum Microsoft.VisualStudio.OLE.Interop.OLECMDEXECOPT : Enum {
    public int value__;
    public static OLECMDEXECOPT OLECMDEXECOPT_DODEFAULT;
    public static OLECMDEXECOPT OLECMDEXECOPT_PROMPTUSER;
    public static OLECMDEXECOPT OLECMDEXECOPT_DONTPROMPTUSER;
    public static OLECMDEXECOPT OLECMDEXECOPT_SHOWHELP;
}
[FlagsAttribute]
public enum Microsoft.VisualStudio.OLE.Interop.OLECMDF : Enum {
    public int value__;
    public static OLECMDF OLECMDF_SUPPORTED;
    public static OLECMDF OLECMDF_ENABLED;
    public static OLECMDF OLECMDF_LATCHED;
    public static OLECMDF OLECMDF_NINCHED;
    public static OLECMDF OLECMDF_INVISIBLE;
    public static OLECMDF OLECMDF_DEFHIDEONCTXTMENU;
}
public enum Microsoft.VisualStudio.OLE.Interop.OLECMDID : Enum {
    public int value__;
    public static OLECMDID OLECMDID_OPEN;
    public static OLECMDID OLECMDID_NEW;
    public static OLECMDID OLECMDID_SAVE;
    public static OLECMDID OLECMDID_SAVEAS;
    public static OLECMDID OLECMDID_SAVECOPYAS;
    public static OLECMDID OLECMDID_PRINT;
    public static OLECMDID OLECMDID_PRINTPREVIEW;
    public static OLECMDID OLECMDID_PAGESETUP;
    public static OLECMDID OLECMDID_SPELL;
    public static OLECMDID OLECMDID_PROPERTIES;
    public static OLECMDID OLECMDID_CUT;
    public static OLECMDID OLECMDID_COPY;
    public static OLECMDID OLECMDID_PASTE;
    public static OLECMDID OLECMDID_PASTESPECIAL;
    public static OLECMDID OLECMDID_UNDO;
    public static OLECMDID OLECMDID_REDO;
    public static OLECMDID OLECMDID_SELECTALL;
    public static OLECMDID OLECMDID_CLEARSELECTION;
    public static OLECMDID OLECMDID_ZOOM;
    public static OLECMDID OLECMDID_GETZOOMRANGE;
    public static OLECMDID OLECMDID_UPDATECOMMANDS;
    public static OLECMDID OLECMDID_REFRESH;
    public static OLECMDID OLECMDID_STOP;
    public static OLECMDID OLECMDID_HIDETOOLBARS;
    public static OLECMDID OLECMDID_SETPROGRESSMAX;
    public static OLECMDID OLECMDID_SETPROGRESSPOS;
    public static OLECMDID OLECMDID_SETPROGRESSTEXT;
    public static OLECMDID OLECMDID_SETTITLE;
    public static OLECMDID OLECMDID_SETDOWNLOADSTATE;
    public static OLECMDID OLECMDID_STOPDOWNLOAD;
    public static OLECMDID OLECMDID_ONTOOLBARACTIVATED;
    public static OLECMDID OLECMDID_FIND;
    public static OLECMDID OLECMDID_DELETE;
    public static OLECMDID OLECMDID_HTTPEQUIV;
    public static OLECMDID OLECMDID_HTTPEQUIV_DONE;
    public static OLECMDID OLECMDID_ENABLE_INTERACTION;
    public static OLECMDID OLECMDID_ONUNLOAD;
    public static OLECMDID OLECMDID_PROPERTYBAG2;
    public static OLECMDID OLECMDID_PREREFRESH;
    public static OLECMDID OLECMDID_SHOWSCRIPTERROR;
    public static OLECMDID OLECMDID_SHOWMESSAGE;
    public static OLECMDID OLECMDID_SHOWFIND;
    public static OLECMDID OLECMDID_SHOWPAGESETUP;
    public static OLECMDID OLECMDID_SHOWPRINT;
    public static OLECMDID OLECMDID_CLOSE;
    public static OLECMDID OLECMDID_ALLOWUILESSSAVEAS;
    public static OLECMDID OLECMDID_DONTDOWNLOADCSS;
    public static OLECMDID OLECMDID_UPDATEPAGESTATUS;
    public static OLECMDID OLECMDID_PRINT2;
    public static OLECMDID OLECMDID_PRINTPREVIEW2;
    public static OLECMDID OLECMDID_SETPRINTTEMPLATE;
    public static OLECMDID OLECMDID_GETPRINTTEMPLATE;
}
[FlagsAttribute]
public enum Microsoft.VisualStudio.OLE.Interop.OLECMDID_REFRESHFLAG : Enum {
    public int value__;
    public static OLECMDID_REFRESHFLAG OLECMDIDF_REFRESH_NORMAL;
    public static OLECMDID_REFRESHFLAG OLECMDIDF_REFRESH_IFEXPIRED;
    public static OLECMDID_REFRESHFLAG OLECMDIDF_REFRESH_CONTINUE;
    public static OLECMDID_REFRESHFLAG OLECMDIDF_REFRESH_COMPLETELY;
    public static OLECMDID_REFRESHFLAG OLECMDIDF_REFRESH_NO_CACHE;
    public static OLECMDID_REFRESHFLAG OLECMDIDF_REFRESH_RELOAD;
    public static OLECMDID_REFRESHFLAG OLECMDIDF_REFRESH_LEVELMASK;
    public static OLECMDID_REFRESHFLAG OLECMDIDF_REFRESH_CLEARUSERINPUT;
    public static OLECMDID_REFRESHFLAG OLECMDIDF_REFRESH_PROMPTIFOFFLINE;
    public static OLECMDID_REFRESHFLAG OLECMDIDF_REFRESH_THROUGHSCRIPT;
}
[ComConversionLossAttribute]
public class Microsoft.VisualStudio.OLE.Interop.OLECMDTEXT : ValueType {
    [ComAliasNameAttribute("Microsoft.VisualStudio.OLE.Interop.DWORD")]
public UInt32 cmdtextf;
    [ComAliasNameAttribute("Microsoft.VisualStudio.OLE.Interop.ULONG")]
public UInt32 cwActual;
    [ComAliasNameAttribute("Microsoft.VisualStudio.OLE.Interop.ULONG")]
public UInt32 cwBuf;
    [ComConversionLossAttribute]
public char rgwz;
}
[FlagsAttribute]
public enum Microsoft.VisualStudio.OLE.Interop.OLECMDTEXTF : Enum {
    public int value__;
    public static OLECMDTEXTF OLECMDTEXTF_NONE;
    public static OLECMDTEXTF OLECMDTEXTF_NAME;
    public static OLECMDTEXTF OLECMDTEXTF_STATUS;
}
public enum Microsoft.VisualStudio.OLE.Interop.OLECONTF : Enum {
    public int value__;
    public static OLECONTF OLECONTF_EMBEDDINGS;
    public static OLECONTF OLECONTF_LINKS;
    public static OLECONTF OLECONTF_OTHERS;
    public static OLECONTF OLECONTF_ONLYUSER;
    public static OLECONTF OLECONTF_ONLYIFRUNNING;
}
public class Microsoft.VisualStudio.OLE.Interop.OLECRINFO : ValueType {
    [ComAliasNameAttribute("Microsoft.VisualStudio.OLE.Interop.ULONG")]
public UInt32 cbSize;
    [ComAliasNameAttribute("Microsoft.VisualStudio.OLE.Interop.ULONG")]
public UInt32 uIdleTimeInterval;
    [ComAliasNameAttribute("Microsoft.VisualStudio.OLE.Interop.OLECRF")]
public UInt32 grfcrf;
    [ComAliasNameAttribute("Microsoft.VisualStudio.OLE.Interop.OLECADVF")]
public UInt32 grfcadvf;
}
[FlagsAttribute]
public enum Microsoft.VisualStudio.OLE.Interop.OLEDCFLAGS : Enum {
    public int value__;
    public static OLEDCFLAGS OLEDC_NODRAW;
    public static OLEDCFLAGS OLEDC_PAINTBKGND;
    public static OLEDCFLAGS OLEDC_OFFSCREEN;
}
public enum Microsoft.VisualStudio.OLE.Interop.OLEGETMONIKER : Enum {
    public int value__;
    public static OLEGETMONIKER OLEGETMONIKER_ONLYIFTHERE;
    public static OLEGETMONIKER OLEGETMONIKER_FORCEASSIGN;
    public static OLEGETMONIKER OLEGETMONIKER_UNASSIGN;
    public static OLEGETMONIKER OLEGETMONIKER_TEMPFORUSER;
}
[ComConversionLossAttribute]
public class Microsoft.VisualStudio.OLE.Interop.OLEINPLACEFRAMEINFO : ValueType {
    [ComAliasNameAttribute("Microsoft.VisualStudio.OLE.Interop.UINT")]
public UInt32 cb;
    [ComAliasNameAttribute("Microsoft.VisualStudio.OLE.Interop.BOOL")]
public int fMDIApp;
    [ComConversionLossAttribute]
public IntPtr hwndFrame;
    [ComConversionLossAttribute]
public IntPtr haccel;
    [ComAliasNameAttribute("Microsoft.VisualStudio.OLE.Interop.UINT")]
public UInt32 cAccelEntries;
}
public enum Microsoft.VisualStudio.OLE.Interop.OLELINKBIND : Enum {
    public int value__;
    public static OLELINKBIND OLELINKBIND_EVENIFCLASSDIFF;
}
public class Microsoft.VisualStudio.OLE.Interop.OLEMENUGROUPWIDTHS : ValueType {
    public Int32[] width;
}
public enum Microsoft.VisualStudio.OLE.Interop.OLEMISC : Enum {
    public int value__;
    public static OLEMISC OLEMISC_RECOMPOSEONRESIZE;
    public static OLEMISC OLEMISC_ONLYICONIC;
    public static OLEMISC OLEMISC_INSERTNOTREPLACE;
    public static OLEMISC OLEMISC_STATIC;
    public static OLEMISC OLEMISC_CANTLINKINSIDE;
    public static OLEMISC OLEMISC_CANLINKBYOLE1;
    public static OLEMISC OLEMISC_ISLINKOBJECT;
    public static OLEMISC OLEMISC_INSIDEOUT;
    public static OLEMISC OLEMISC_ACTIVATEWHENVISIBLE;
    public static OLEMISC OLEMISC_RENDERINGISDEVICEINDEPENDENT;
    public static OLEMISC OLEMISC_INVISIBLEATRUNTIME;
    public static OLEMISC OLEMISC_ALWAYSRUN;
    public static OLEMISC OLEMISC_ACTSLIKEBUTTON;
    public static OLEMISC OLEMISC_ACTSLIKELABEL;
    public static OLEMISC OLEMISC_NOUIACTIVATE;
    public static OLEMISC OLEMISC_ALIGNABLE;
    public static OLEMISC OLEMISC_SIMPLEFRAME;
    public static OLEMISC OLEMISC_SETCLIENTSITEFIRST;
    public static OLEMISC OLEMISC_IMEMODE;
    public static OLEMISC OLEMISC_IGNOREACTIVATEWHENVISIBLE;
    public static OLEMISC OLEMISC_WANTSTOMENUMERGE;
    public static OLEMISC OLEMISC_SUPPORTSMULTILEVELUNDO;
}
public enum Microsoft.VisualStudio.OLE.Interop.OLERENDER : Enum {
    public int value__;
    public static OLERENDER OLERENDER_NONE;
    public static OLERENDER OLERENDER_DRAW;
    public static OLERENDER OLERENDER_FORMAT;
    public static OLERENDER OLERENDER_ASIS;
}
public enum Microsoft.VisualStudio.OLE.Interop.OLEUPDATE : Enum {
    public int value__;
    public static OLEUPDATE OLEUPDATE_ALWAYS;
    public static OLEUPDATE OLEUPDATE_ONCALL;
}
public class Microsoft.VisualStudio.OLE.Interop.OLEVERB : ValueType {
    [ComAliasNameAttribute("Microsoft.VisualStudio.OLE.Interop.LONG")]
public int lVerb;
    [ComAliasNameAttribute("Microsoft.VisualStudio.OLE.Interop.LPOLESTR")]
public string lpszVerbName;
    [ComAliasNameAttribute("Microsoft.VisualStudio.OLE.Interop.DWORD")]
public UInt32 fuFlags;
    [ComAliasNameAttribute("Microsoft.VisualStudio.OLE.Interop.DWORD")]
public UInt32 grfAttribs;
}
public enum Microsoft.VisualStudio.OLE.Interop.OLEVERBATTRIB : Enum {
    public int value__;
    public static OLEVERBATTRIB OLEVERBATTRIB_NEVERDIRTIES;
    public static OLEVERBATTRIB OLEVERBATTRIB_ONCONTAINERMENU;
}
public enum Microsoft.VisualStudio.OLE.Interop.OLEWHICHMK : Enum {
    public int value__;
    public static OLEWHICHMK OLEWHICHMK_CONTAINER;
    public static OLEWHICHMK OLEWHICHMK_OBJREL;
    public static OLEWHICHMK OLEWHICHMK_OBJFULL;
}
public class Microsoft.VisualStudio.OLE.Interop.PAGERANGE : ValueType {
    [ComAliasNameAttribute("Microsoft.VisualStudio.OLE.Interop.LONG")]
public int nFromPage;
    [ComAliasNameAttribute("Microsoft.VisualStudio.OLE.Interop.LONG")]
public int nToPage;
}
[ComConversionLossAttribute]
public class Microsoft.VisualStudio.OLE.Interop.PAGESET : ValueType {
    [ComAliasNameAttribute("Microsoft.VisualStudio.OLE.Interop.ULONG")]
public UInt32 cbStruct;
    [ComAliasNameAttribute("Microsoft.VisualStudio.OLE.Interop.BOOL")]
public int fOddPages;
    [ComAliasNameAttribute("Microsoft.VisualStudio.OLE.Interop.BOOL")]
public int fEvenPages;
    [ComAliasNameAttribute("Microsoft.VisualStudio.OLE.Interop.ULONG")]
public UInt32 cPageRange;
    [ComAliasNameAttribute("Microsoft.VisualStudio.OLE.Interop.PAGERANGE")]
[ComConversionLossAttribute]
public IntPtr rgPages;
}
public class Microsoft.VisualStudio.OLE.Interop.PALETTEENTRY : ValueType {
    public byte peRed;
    public byte peGreen;
    public byte peBlue;
    public byte peFlags;
}
[ComConversionLossAttribute]
public class Microsoft.VisualStudio.OLE.Interop.PARAMDESC : ValueType {
    [ComConversionLossAttribute]
[ComAliasNameAttribute("Microsoft.VisualStudio.OLE.Interop.PARAMDESCEX")]
public IntPtr pparamdescex;
    [ComAliasNameAttribute("Microsoft.VisualStudio.OLE.Interop.USHORT")]
public ushort wParamFlags;
}
public class Microsoft.VisualStudio.OLE.Interop.PARAMDESCEX : ValueType {
    [ComAliasNameAttribute("Microsoft.VisualStudio.OLE.Interop.ULONG")]
public UInt32 cBytes;
    [ComAliasNameAttribute("Microsoft.VisualStudio.OLE.Interop.VARIANTARG")]
public object varDefaultValue;
}
public enum Microsoft.VisualStudio.OLE.Interop.PARSEACTION : Enum {
    public int value__;
    public static PARSEACTION PARSE_CANONICALIZE;
    public static PARSEACTION PARSE_FRIENDLY;
    public static PARSEACTION PARSE_SECURITY_URL;
    public static PARSEACTION PARSE_ROOTDOCUMENT;
    public static PARSEACTION PARSE_DOCUMENT;
    public static PARSEACTION PARSE_ANCHOR;
    public static PARSEACTION PARSE_ENCODE;
    public static PARSEACTION PARSE_DECODE;
    public static PARSEACTION PARSE_PATH_FROM_URL;
    public static PARSEACTION PARSE_URL_FROM_PATH;
    public static PARSEACTION PARSE_MIME;
    public static PARSEACTION PARSE_SERVER;
    public static PARSEACTION PARSE_SCHEMA;
    public static PARSEACTION PARSE_SITE;
    public static PARSEACTION PARSE_DOMAIN;
    public static PARSEACTION PARSE_LOCATION;
    public static PARSEACTION PARSE_SECURITY_DOMAIN;
    public static PARSEACTION PARSE_ESCAPE;
    public static PARSEACTION PARSE_UNESCAPE;
}
public enum Microsoft.VisualStudio.OLE.Interop.PENDINGMSG : Enum {
    public int value__;
    public static PENDINGMSG PENDINGMSG_CANCELCALL;
    public static PENDINGMSG PENDINGMSG_WAITNOPROCESS;
    public static PENDINGMSG PENDINGMSG_WAITDEFPROCESS;
}
public enum Microsoft.VisualStudio.OLE.Interop.PENDINGTYPE : Enum {
    public int value__;
    public static PENDINGTYPE PENDINGTYPE_TOPLEVEL;
    public static PENDINGTYPE PENDINGTYPE_NESTED;
}
[FlagsAttribute]
public enum Microsoft.VisualStudio.OLE.Interop.PI_FLAGS : Enum {
    public int value__;
    public static PI_FLAGS PI_PARSE_URL;
    public static PI_FLAGS PI_FILTER_MODE;
    public static PI_FLAGS PI_FORCE_ASYNC;
    public static PI_FLAGS PI_USE_WORKERTHREAD;
    public static PI_FLAGS PI_MIMEVERIFICATION;
    public static PI_FLAGS PI_CLSIDLOOKUP;
    public static PI_FLAGS PI_DATAPROGRESS;
    public static PI_FLAGS PI_SYNCHRONOUS;
    public static PI_FLAGS PI_APARTMENTTHREADED;
    public static PI_FLAGS PI_CLASSINSTALL;
    public static PI_FLAGS PI_PASSONBINDCTX;
    public static PI_FLAGS PI_NOMIMEHANDLER;
    public static PI_FLAGS PI_LOADAPPDIRECT;
    public static PI_FLAGS PD_FORCE_SWITCH;
    public static PI_FLAGS PI_PREFERDEFAULTHANDLER;
}
public enum Microsoft.VisualStudio.OLE.Interop.PICTUREATTRIBUTES : Enum {
    public int value__;
    public static PICTUREATTRIBUTES PICTURE_SCALABLE;
    public static PICTUREATTRIBUTES PICTURE_TRANSPARENT;
}
public enum Microsoft.VisualStudio.OLE.Interop.PIDMSI_STATUS_VALUE : Enum {
    public int value__;
    public static PIDMSI_STATUS_VALUE PIDMSI_STATUS_NORMAL;
    public static PIDMSI_STATUS_VALUE PIDMSI_STATUS_NEW;
    public static PIDMSI_STATUS_VALUE PIDMSI_STATUS_PRELIM;
    public static PIDMSI_STATUS_VALUE PIDMSI_STATUS_DRAFT;
    public static PIDMSI_STATUS_VALUE PIDMSI_STATUS_INPROGRESS;
    public static PIDMSI_STATUS_VALUE PIDMSI_STATUS_EDIT;
    public static PIDMSI_STATUS_VALUE PIDMSI_STATUS_REVIEW;
    public static PIDMSI_STATUS_VALUE PIDMSI_STATUS_PROOF;
    public static PIDMSI_STATUS_VALUE PIDMSI_STATUS_FINAL;
    public static PIDMSI_STATUS_VALUE PIDMSI_STATUS_OTHER;
}
public class Microsoft.VisualStudio.OLE.Interop.POINT : ValueType {
    [ComAliasNameAttribute("Microsoft.VisualStudio.OLE.Interop.LONG")]
public int x;
    [ComAliasNameAttribute("Microsoft.VisualStudio.OLE.Interop.LONG")]
public int y;
}
public enum Microsoft.VisualStudio.OLE.Interop.POINTERINACTIVE : Enum {
    public int value__;
    public static POINTERINACTIVE POINTERINACTIVE_ACTIVATEONENTRY;
    public static POINTERINACTIVE POINTERINACTIVE_DEACTIVATEONLEAVE;
    public static POINTERINACTIVE POINTERINACTIVE_ACTIVATEONDRAG;
}
public class Microsoft.VisualStudio.OLE.Interop.POINTF : ValueType {
    [ComAliasNameAttribute("Microsoft.VisualStudio.OLE.Interop.FLOAT")]
public float x;
    [ComAliasNameAttribute("Microsoft.VisualStudio.OLE.Interop.FLOAT")]
public float y;
}
public class Microsoft.VisualStudio.OLE.Interop.POINTL : ValueType {
    [ComAliasNameAttribute("Microsoft.VisualStudio.OLE.Interop.LONG")]
public int x;
    [ComAliasNameAttribute("Microsoft.VisualStudio.OLE.Interop.LONG")]
public int y;
}
[FlagsAttribute]
public enum Microsoft.VisualStudio.OLE.Interop.PRINTFLAG : Enum {
    public int value__;
    public static PRINTFLAG PRINTFLAG_MAYBOTHERUSER;
    public static PRINTFLAG PRINTFLAG_PROMPTUSER;
    public static PRINTFLAG PRINTFLAG_USERMAYCHANGEPRINTER;
    public static PRINTFLAG PRINTFLAG_RECOMPOSETODEVICE;
    public static PRINTFLAG PRINTFLAG_DONTACTUALLYPRINT;
    public static PRINTFLAG PRINTFLAG_FORCEPROPERTIES;
    public static PRINTFLAG PRINTFLAG_PRINTTOFILE;
}
public class Microsoft.VisualStudio.OLE.Interop.PROPBAG2 : ValueType {
    [ComAliasNameAttribute("Microsoft.VisualStudio.OLE.Interop.DWORD")]
public UInt32 dwType;
    [ComAliasNameAttribute("Microsoft.VisualStudio.OLE.Interop.VARTYPE")]
public ushort vt;
    [ComAliasNameAttribute("Microsoft.VisualStudio.OLE.Interop.CLIPFORMAT")]
public ushort cfType;
    [ComAliasNameAttribute("Microsoft.VisualStudio.OLE.Interop.DWORD")]
public UInt32 dwHint;
    [ComAliasNameAttribute("Microsoft.VisualStudio.OLE.Interop.LPOLESTR")]
public string pstrName;
    public Guid clsid;
}
public enum Microsoft.VisualStudio.OLE.Interop.PROPBAG2_TYPE : Enum {
    public int value__;
    public static PROPBAG2_TYPE PROPBAG2_TYPE_UNDEFINED;
    public static PROPBAG2_TYPE PROPBAG2_TYPE_DATA;
    public static PROPBAG2_TYPE PROPBAG2_TYPE_URL;
    public static PROPBAG2_TYPE PROPBAG2_TYPE_OBJECT;
    public static PROPBAG2_TYPE PROPBAG2_TYPE_STREAM;
    public static PROPBAG2_TYPE PROPBAG2_TYPE_STORAGE;
    public static PROPBAG2_TYPE PROPBAG2_TYPE_MONIKER;
}
public class Microsoft.VisualStudio.OLE.Interop.PROPPAGEINFO : ValueType {
    [ComAliasNameAttribute("Microsoft.VisualStudio.OLE.Interop.ULONG")]
public UInt32 cb;
    [ComAliasNameAttribute("Microsoft.VisualStudio.OLE.Interop.LPOLESTR")]
public string pszTitle;
    [ComAliasNameAttribute("Microsoft.VisualStudio.OLE.Interop.SIZE")]
public SIZE SIZE;
    [ComAliasNameAttribute("Microsoft.VisualStudio.OLE.Interop.LPOLESTR")]
public string pszDocString;
    [ComAliasNameAttribute("Microsoft.VisualStudio.OLE.Interop.LPOLESTR")]
public string pszHelpFile;
    [ComAliasNameAttribute("Microsoft.VisualStudio.OLE.Interop.DWORD")]
public UInt32 dwHelpContext;
}
public enum Microsoft.VisualStudio.OLE.Interop.PROPPAGESTATUS : Enum {
    public int value__;
    public static PROPPAGESTATUS PROPPAGESTATUS_DIRTY;
    public static PROPPAGESTATUS PROPPAGESTATUS_VALIDATE;
    public static PROPPAGESTATUS PROPPAGESTATUS_CLEAN;
}
public class Microsoft.VisualStudio.OLE.Interop.PROPSPEC : ValueType {
    [ComAliasNameAttribute("Microsoft.VisualStudio.OLE.Interop.ULONG")]
public UInt32 ulKind;
    public IntPtr unionmember;
}
public class Microsoft.VisualStudio.OLE.Interop.PROPVARIANT : ValueType {
    [ComAliasNameAttribute("Microsoft.VisualStudio.OLE.Interop.VARTYPE")]
public ushort vt;
    [ComAliasNameAttribute("Microsoft.VisualStudio.OLE.Interop.PROPVAR_PAD1")]
public ushort wReserved1;
    [ComAliasNameAttribute("Microsoft.VisualStudio.OLE.Interop.PROPVAR_PAD2")]
public ushort wReserved2;
    [ComAliasNameAttribute("Microsoft.VisualStudio.OLE.Interop.PROPVAR_PAD3")]
public ushort wReserved3;
    public UInt32 unionmember1;
    public IntPtr unionmember2;
}
public enum Microsoft.VisualStudio.OLE.Interop.PSUACTION : Enum {
    public int value__;
    public static PSUACTION PSU_DEFAULT;
    public static PSUACTION PSU_SECURITY_URL_ONLY;
}
public enum Microsoft.VisualStudio.OLE.Interop.PUAF : Enum {
    public int value__;
    public static PUAF PUAF_DEFAULT;
    public static PUAF PUAF_NOUI;
    public static PUAF PUAF_ISFILE;
    public static PUAF PUAF_WARN_IF_DENIED;
    public static PUAF PUAF_FORCEUI_FOREGROUND;
    public static PUAF PUAF_CHECK_TIFS;
    public static PUAF PUAF_DONTCHECKBOXINDIALOG;
    public static PUAF PUAF_TRUSTED;
    public static PUAF PUAF_ACCEPT_WILDCARD_SCHEME;
    public static PUAF PUAF_ENFORCERESTRICTED;
}
[ComConversionLossAttribute]
public class Microsoft.VisualStudio.OLE.Interop.QACONTAINER : ValueType {
    [ComAliasNameAttribute("Microsoft.VisualStudio.OLE.Interop.ULONG")]
public UInt32 cbSize;
    public IOleClientSite pClientSite;
    public IAdviseSinkEx pAdviseSink;
    public IPropertyNotifySink pPropertyNotifySink;
    public object pUnkEventSink;
    [ComAliasNameAttribute("Microsoft.VisualStudio.OLE.Interop.DWORD")]
public UInt32 dwAmbientFlags;
    [ComAliasNameAttribute("Microsoft.VisualStudio.OLE.Interop.OLE_COLOR")]
public UInt32 colorFore;
    [ComAliasNameAttribute("Microsoft.VisualStudio.OLE.Interop.OLE_COLOR")]
public UInt32 colorBack;
    public IFont pFont;
    public IOleUndoManager pUndoMgr;
    [ComAliasNameAttribute("Microsoft.VisualStudio.OLE.Interop.DWORD")]
public UInt32 dwAppearance;
    [ComAliasNameAttribute("Microsoft.VisualStudio.OLE.Interop.LONG")]
public int LCID;
    [ComConversionLossAttribute]
public IntPtr hpal;
    public IBindHost pBindHost;
    public IOleControlSite pOleControlSite;
    public IServiceProvider pServiceProvider;
}
[FlagsAttribute]
public enum Microsoft.VisualStudio.OLE.Interop.QACONTAINERFLAGS : Enum {
    public int value__;
    public static QACONTAINERFLAGS QACONTAINER_SHOWHATCHING;
    public static QACONTAINERFLAGS QACONTAINER_SHOWGRABHANDLES;
    public static QACONTAINERFLAGS QACONTAINER_USERMODE;
    public static QACONTAINERFLAGS QACONTAINER_DISPLAYASDEFAULT;
    public static QACONTAINERFLAGS QACONTAINER_UIDEAD;
    public static QACONTAINERFLAGS QACONTAINER_AUTOCLIP;
    public static QACONTAINERFLAGS QACONTAINER_MESSAGEREFLECT;
    public static QACONTAINERFLAGS QACONTAINER_SUPPORTSMNEMONICS;
}
public class Microsoft.VisualStudio.OLE.Interop.QACONTROL : ValueType {
    [ComAliasNameAttribute("Microsoft.VisualStudio.OLE.Interop.ULONG")]
public UInt32 cbSize;
    [ComAliasNameAttribute("Microsoft.VisualStudio.OLE.Interop.DWORD")]
public UInt32 dwMiscStatus;
    [ComAliasNameAttribute("Microsoft.VisualStudio.OLE.Interop.DWORD")]
public UInt32 dwViewStatus;
    [ComAliasNameAttribute("Microsoft.VisualStudio.OLE.Interop.DWORD")]
public UInt32 dwEventCookie;
    [ComAliasNameAttribute("Microsoft.VisualStudio.OLE.Interop.DWORD")]
public UInt32 dwPropNotifyCookie;
    [ComAliasNameAttribute("Microsoft.VisualStudio.OLE.Interop.DWORD")]
public UInt32 dwPointerActivationPolicy;
}
public enum Microsoft.VisualStudio.OLE.Interop.QUERYOPTION : Enum {
    public int value__;
    public static QUERYOPTION QUERY_EXPIRATION_DATE;
    public static QUERYOPTION QUERY_TIME_OF_LAST_CHANGE;
    public static QUERYOPTION QUERY_CONTENT_ENCODING;
    public static QUERYOPTION QUERY_CONTENT_TYPE;
    public static QUERYOPTION QUERY_REFRESH;
    public static QUERYOPTION QUERY_RECOMBINE;
    public static QUERYOPTION QUERY_CAN_NAVIGATE;
    public static QUERYOPTION QUERY_USES_NETWORK;
    public static QUERYOPTION QUERY_IS_CACHED;
    public static QUERYOPTION QUERY_IS_INSTALLEDENTRY;
    public static QUERYOPTION QUERY_IS_CACHED_OR_MAPPED;
    public static QUERYOPTION QUERY_USES_CACHE;
    public static QUERYOPTION QUERY_IS_SECURE;
    public static QUERYOPTION QUERY_IS_SAFE;
}
public enum Microsoft.VisualStudio.OLE.Interop.READYSTATE : Enum {
    public int value__;
    public static READYSTATE READYSTATE_UNINITIALIZED;
    public static READYSTATE READYSTATE_LOADING;
    public static READYSTATE READYSTATE_LOADED;
    public static READYSTATE READYSTATE_INTERACTIVE;
    public static READYSTATE READYSTATE_COMPLETE;
}
public class Microsoft.VisualStudio.OLE.Interop.RECT : ValueType {
    [ComAliasNameAttribute("Microsoft.VisualStudio.OLE.Interop.LONG")]
public int left;
    [ComAliasNameAttribute("Microsoft.VisualStudio.OLE.Interop.LONG")]
public int top;
    [ComAliasNameAttribute("Microsoft.VisualStudio.OLE.Interop.LONG")]
public int right;
    [ComAliasNameAttribute("Microsoft.VisualStudio.OLE.Interop.LONG")]
public int bottom;
}
public class Microsoft.VisualStudio.OLE.Interop.RECTL : ValueType {
    [ComAliasNameAttribute("Microsoft.VisualStudio.OLE.Interop.LONG")]
public int left;
    [ComAliasNameAttribute("Microsoft.VisualStudio.OLE.Interop.LONG")]
public int top;
    [ComAliasNameAttribute("Microsoft.VisualStudio.OLE.Interop.LONG")]
public int right;
    [ComAliasNameAttribute("Microsoft.VisualStudio.OLE.Interop.LONG")]
public int bottom;
}
[ComConversionLossAttribute]
public class Microsoft.VisualStudio.OLE.Interop.RPCOLEMESSAGE : ValueType {
    [ComConversionLossAttribute]
public IntPtr reserved1;
    [ComAliasNameAttribute("Microsoft.VisualStudio.OLE.Interop.RPCOLEDATAREP")]
public UInt32 dataRepresentation;
    [ComConversionLossAttribute]
public IntPtr Buffer;
    [ComAliasNameAttribute("Microsoft.VisualStudio.OLE.Interop.ULONG")]
public UInt32 cbBuffer;
    [ComAliasNameAttribute("Microsoft.VisualStudio.OLE.Interop.ULONG")]
public UInt32 iMethod;
    [ComConversionLossAttribute]
public IntPtr[] reserved2;
    [ComAliasNameAttribute("Microsoft.VisualStudio.OLE.Interop.ULONG")]
public UInt32 rpcFlags;
}
[ComConversionLossAttribute]
public class Microsoft.VisualStudio.OLE.Interop.SAFEARRAY : ValueType {
    [ComAliasNameAttribute("Microsoft.VisualStudio.OLE.Interop.USHORT")]
public ushort cDims;
    [ComAliasNameAttribute("Microsoft.VisualStudio.OLE.Interop.USHORT")]
public ushort fFeatures;
    [ComAliasNameAttribute("Microsoft.VisualStudio.OLE.Interop.ULONG")]
public UInt32 cbElements;
    [ComAliasNameAttribute("Microsoft.VisualStudio.OLE.Interop.ULONG")]
public UInt32 cLocks;
    [ComConversionLossAttribute]
public IntPtr pvData;
    [ComConversionLossAttribute]
[ComAliasNameAttribute("Microsoft.VisualStudio.OLE.Interop.SAFEARRAYBOUND")]
public IntPtr rgsabound;
}
public class Microsoft.VisualStudio.OLE.Interop.SAFEARRAYBOUND : ValueType {
    [ComAliasNameAttribute("Microsoft.VisualStudio.OLE.Interop.ULONG")]
public UInt32 cElements;
    [ComAliasNameAttribute("Microsoft.VisualStudio.OLE.Interop.LONG")]
public int lLbound;
}
[ComVisibleAttribute("False")]
[GuidAttribute("FC4801A1-2BA9-11CF-A229-00AA003D7352")]
public interface Microsoft.VisualStudio.OLE.Interop.SBindHost {
}
[GuidAttribute("B722BE00-4E68-101B-A2BC-00AA00404770")]
public interface Microsoft.VisualStudio.OLE.Interop.SContainerDispatch {
}
[ComConversionLossAttribute]
public class Microsoft.VisualStudio.OLE.Interop.SECURITY_ATTRIBUTES : ValueType {
    [ComAliasNameAttribute("Microsoft.VisualStudio.OLE.Interop.DWORD")]
public UInt32 nLength;
    [ComConversionLossAttribute]
public IntPtr lpSecurityDescriptor;
    [ComAliasNameAttribute("Microsoft.VisualStudio.OLE.Interop.BOOL")]
public int bInheritHandle;
}
public enum Microsoft.VisualStudio.OLE.Interop.SERVERCALL : Enum {
    public int value__;
    public static SERVERCALL SERVERCALL_ISHANDLED;
    public static SERVERCALL SERVERCALL_REJECTED;
    public static SERVERCALL SERVERCALL_RETRYLATER;
}
public enum Microsoft.VisualStudio.OLE.Interop.SF_TYPE : Enum {
    public int value__;
    public static SF_TYPE SF_ERROR;
    public static SF_TYPE SF_I1;
    public static SF_TYPE SF_I2;
    public static SF_TYPE SF_I4;
    public static SF_TYPE SF_I8;
    public static SF_TYPE SF_BSTR;
    public static SF_TYPE SF_UNKNOWN;
    public static SF_TYPE SF_DISPATCH;
    public static SF_TYPE SF_VARIANT;
    public static SF_TYPE SF_RECORD;
    public static SF_TYPE SF_HAVEIID;
}
public enum Microsoft.VisualStudio.OLE.Interop.ShutdownType : Enum {
    public int value__;
    public static ShutdownType IdleShutdown;
    public static ShutdownType ForcedShutdown;
}
public class Microsoft.VisualStudio.OLE.Interop.SIZE : ValueType {
    [ComAliasNameAttribute("Microsoft.VisualStudio.OLE.Interop.LONG")]
public int cx;
    [ComAliasNameAttribute("Microsoft.VisualStudio.OLE.Interop.LONG")]
public int cy;
}
public class Microsoft.VisualStudio.OLE.Interop.SIZEL : ValueType {
    [ComAliasNameAttribute("Microsoft.VisualStudio.OLE.Interop.LONG")]
public int cx;
    [ComAliasNameAttribute("Microsoft.VisualStudio.OLE.Interop.LONG")]
public int cy;
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("000C060B-0000-0000-C000-000000000046")]
public interface Microsoft.VisualStudio.OLE.Interop.SOleComponentManager {
}
[ComVisibleAttribute("False")]
[GuidAttribute("D001F200-EF97-11CE-9BC9-00AA00608E01")]
public interface Microsoft.VisualStudio.OLE.Interop.SOleUndoManager {
}
public class Microsoft.VisualStudio.OLE.Interop.STATDATA : ValueType {
    [ComAliasNameAttribute("Microsoft.VisualStudio.OLE.Interop.FORMATETC")]
public FORMATETC FORMATETC;
    [ComAliasNameAttribute("Microsoft.VisualStudio.OLE.Interop.DWORD")]
public UInt32 ADVF;
    public IAdviseSink pAdvSink;
    [ComAliasNameAttribute("Microsoft.VisualStudio.OLE.Interop.DWORD")]
public UInt32 dwConnection;
}
[FlagsAttribute]
public enum Microsoft.VisualStudio.OLE.Interop.STATFLAG : Enum {
    public int value__;
    public static STATFLAG STATFLAG_DEFAULT;
    public static STATFLAG STATFLAG_NONAME;
    public static STATFLAG STATFLAG_NOOPEN;
}
public class Microsoft.VisualStudio.OLE.Interop.STATPROPSETSTG : ValueType {
    public Guid fmtid;
    public Guid clsid;
    [ComAliasNameAttribute("Microsoft.VisualStudio.OLE.Interop.DWORD")]
public UInt32 grfFlags;
    [ComAliasNameAttribute("Microsoft.VisualStudio.OLE.Interop.FILETIME")]
public FILETIME mtime;
    [ComAliasNameAttribute("Microsoft.VisualStudio.OLE.Interop.FILETIME")]
public FILETIME ctime;
    [ComAliasNameAttribute("Microsoft.VisualStudio.OLE.Interop.FILETIME")]
public FILETIME atime;
    [ComAliasNameAttribute("Microsoft.VisualStudio.OLE.Interop.DWORD")]
public UInt32 dwOSVersion;
}
public class Microsoft.VisualStudio.OLE.Interop.STATPROPSTG : ValueType {
    [ComAliasNameAttribute("Microsoft.VisualStudio.OLE.Interop.LPOLESTR")]
public string lpwstrName;
    [ComAliasNameAttribute("Microsoft.VisualStudio.OLE.Interop.PROPID")]
public UInt32 PROPID;
    [ComAliasNameAttribute("Microsoft.VisualStudio.OLE.Interop.VARTYPE")]
public ushort vt;
}
public class Microsoft.VisualStudio.OLE.Interop.STATSTG : ValueType {
    [ComAliasNameAttribute("Microsoft.VisualStudio.OLE.Interop.LPOLESTR")]
public string pwcsName;
    [ComAliasNameAttribute("Microsoft.VisualStudio.OLE.Interop.DWORD")]
public UInt32 type;
    [ComAliasNameAttribute("Microsoft.VisualStudio.OLE.Interop.ULARGE_INTEGER")]
public ULARGE_INTEGER cbSize;
    [ComAliasNameAttribute("Microsoft.VisualStudio.OLE.Interop.FILETIME")]
public FILETIME mtime;
    [ComAliasNameAttribute("Microsoft.VisualStudio.OLE.Interop.FILETIME")]
public FILETIME ctime;
    [ComAliasNameAttribute("Microsoft.VisualStudio.OLE.Interop.FILETIME")]
public FILETIME atime;
    [ComAliasNameAttribute("Microsoft.VisualStudio.OLE.Interop.DWORD")]
public UInt32 grfMode;
    [ComAliasNameAttribute("Microsoft.VisualStudio.OLE.Interop.DWORD")]
public UInt32 grfLocksSupported;
    public Guid clsid;
    [ComAliasNameAttribute("Microsoft.VisualStudio.OLE.Interop.DWORD")]
public UInt32 grfStateBits;
    [ComAliasNameAttribute("Microsoft.VisualStudio.OLE.Interop.DWORD")]
public UInt32 reserved;
}
public enum Microsoft.VisualStudio.OLE.Interop.STGC : Enum {
    public int value__;
    public static STGC STGC_DEFAULT;
    public static STGC STGC_OVERWRITE;
    public static STGC STGC_ONLYIFCURRENT;
    public static STGC STGC_DANGEROUSLYCOMMITMERELYTODISKCACHE;
    public static STGC STGC_CONSOLIDATE;
}
public class Microsoft.VisualStudio.OLE.Interop.STGMEDIUM : ValueType {
    [ComAliasNameAttribute("Microsoft.VisualStudio.OLE.Interop.DWORD")]
public UInt32 tymed;
    public IntPtr unionmember;
    public object pUnkForRelease;
}
public enum Microsoft.VisualStudio.OLE.Interop.STGMOVE : Enum {
    public int value__;
    public static STGMOVE STGMOVE_MOVE;
    public static STGMOVE STGMOVE_COPY;
    public static STGMOVE STGMOVE_SHALLOWCOPY;
}
public enum Microsoft.VisualStudio.OLE.Interop.STGTY : Enum {
    public int value__;
    public static STGTY STGTY_STORAGE;
    public static STGTY STGTY_STREAM;
    public static STGTY STGTY_LOCKBYTES;
    public static STGTY STGTY_PROPERTY;
}
[ComConversionLossAttribute]
public class Microsoft.VisualStudio.OLE.Interop.StorageLayout : ValueType {
    [ComAliasNameAttribute("Microsoft.VisualStudio.OLE.Interop.DWORD")]
public UInt32 LayoutType;
    [ComConversionLossAttribute]
[ComAliasNameAttribute("Microsoft.VisualStudio.OLE.Interop.OLECHAR")]
public string pwcsElementName;
    [ComAliasNameAttribute("Microsoft.VisualStudio.OLE.Interop.LARGE_INTEGER")]
public LARGE_INTEGER cOffset;
    [ComAliasNameAttribute("Microsoft.VisualStudio.OLE.Interop.LARGE_INTEGER")]
public LARGE_INTEGER cBytes;
}
public enum Microsoft.VisualStudio.OLE.Interop.STREAM_SEEK : Enum {
    public int value__;
    public static STREAM_SEEK STREAM_SEEK_SET;
    public static STREAM_SEEK STREAM_SEEK_CUR;
    public static STREAM_SEEK STREAM_SEEK_END;
}
public enum Microsoft.VisualStudio.OLE.Interop.SYSKIND : Enum {
    public int value__;
    public static SYSKIND SYS_WIN16;
    public static SYSKIND SYS_WIN32;
    public static SYSKIND SYS_MAC;
    public static SYSKIND SYS_WIN64;
}
[FlagsAttribute]
public enum Microsoft.VisualStudio.OLE.Interop.SZM_FLAGS : Enum {
    public int value__;
    public static SZM_FLAGS SZM_CREATE;
    public static SZM_FLAGS SZM_DELETE;
}
public class Microsoft.VisualStudio.OLE.Interop.TEXTMETRICOLE : ValueType {
    [ComAliasNameAttribute("Microsoft.VisualStudio.OLE.Interop.LONG")]
public int tmHeight;
    [ComAliasNameAttribute("Microsoft.VisualStudio.OLE.Interop.LONG")]
public int tmAscent;
    [ComAliasNameAttribute("Microsoft.VisualStudio.OLE.Interop.LONG")]
public int tmDescent;
    [ComAliasNameAttribute("Microsoft.VisualStudio.OLE.Interop.LONG")]
public int tmInternalLeading;
    [ComAliasNameAttribute("Microsoft.VisualStudio.OLE.Interop.LONG")]
public int tmExternalLeading;
    [ComAliasNameAttribute("Microsoft.VisualStudio.OLE.Interop.LONG")]
public int tmAveCharWidth;
    [ComAliasNameAttribute("Microsoft.VisualStudio.OLE.Interop.LONG")]
public int tmMaxCharWidth;
    [ComAliasNameAttribute("Microsoft.VisualStudio.OLE.Interop.LONG")]
public int tmWeight;
    [ComAliasNameAttribute("Microsoft.VisualStudio.OLE.Interop.LONG")]
public int tmOverhang;
    [ComAliasNameAttribute("Microsoft.VisualStudio.OLE.Interop.LONG")]
public int tmDigitizedAspectX;
    [ComAliasNameAttribute("Microsoft.VisualStudio.OLE.Interop.LONG")]
public int tmDigitizedAspectY;
    [ComAliasNameAttribute("Microsoft.VisualStudio.OLE.Interop.WCHAR")]
public ushort tmFirstChar;
    [ComAliasNameAttribute("Microsoft.VisualStudio.OLE.Interop.WCHAR")]
public ushort tmLastChar;
    [ComAliasNameAttribute("Microsoft.VisualStudio.OLE.Interop.WCHAR")]
public ushort tmDefaultChar;
    [ComAliasNameAttribute("Microsoft.VisualStudio.OLE.Interop.WCHAR")]
public ushort tmBreakChar;
    public byte tmItalic;
    public byte tmUnderlined;
    public byte tmStruckOut;
    public byte tmPitchAndFamily;
    public byte tmCharSet;
}
public class Microsoft.VisualStudio.OLE.Interop.TEXTMETRICW : ValueType {
    [ComAliasNameAttribute("Microsoft.VisualStudio.OLE.Interop.LONG")]
public int tmHeight;
    [ComAliasNameAttribute("Microsoft.VisualStudio.OLE.Interop.LONG")]
public int tmAscent;
    [ComAliasNameAttribute("Microsoft.VisualStudio.OLE.Interop.LONG")]
public int tmDescent;
    [ComAliasNameAttribute("Microsoft.VisualStudio.OLE.Interop.LONG")]
public int tmInternalLeading;
    [ComAliasNameAttribute("Microsoft.VisualStudio.OLE.Interop.LONG")]
public int tmExternalLeading;
    [ComAliasNameAttribute("Microsoft.VisualStudio.OLE.Interop.LONG")]
public int tmAveCharWidth;
    [ComAliasNameAttribute("Microsoft.VisualStudio.OLE.Interop.LONG")]
public int tmMaxCharWidth;
    [ComAliasNameAttribute("Microsoft.VisualStudio.OLE.Interop.LONG")]
public int tmWeight;
    [ComAliasNameAttribute("Microsoft.VisualStudio.OLE.Interop.LONG")]
public int tmOverhang;
    [ComAliasNameAttribute("Microsoft.VisualStudio.OLE.Interop.LONG")]
public int tmDigitizedAspectX;
    [ComAliasNameAttribute("Microsoft.VisualStudio.OLE.Interop.LONG")]
public int tmDigitizedAspectY;
    [ComAliasNameAttribute("Microsoft.VisualStudio.OLE.Interop.WCHAR")]
public ushort tmFirstChar;
    [ComAliasNameAttribute("Microsoft.VisualStudio.OLE.Interop.WCHAR")]
public ushort tmLastChar;
    [ComAliasNameAttribute("Microsoft.VisualStudio.OLE.Interop.WCHAR")]
public ushort tmDefaultChar;
    [ComAliasNameAttribute("Microsoft.VisualStudio.OLE.Interop.WCHAR")]
public ushort tmBreakChar;
    public byte tmItalic;
    public byte tmUnderlined;
    public byte tmStruckOut;
    public byte tmPitchAndFamily;
    public byte tmCharSet;
}
public enum Microsoft.VisualStudio.OLE.Interop.THDTYPE : Enum {
    public int value__;
    public static THDTYPE THDTYPE_BLOCKMESSAGES;
    public static THDTYPE THDTYPE_PROCESSMESSAGES;
}
public class Microsoft.VisualStudio.OLE.Interop.TLIBATTR : ValueType {
    public Guid guid;
    [ComAliasNameAttribute("Microsoft.VisualStudio.OLE.Interop.LCID")]
public UInt32 LCID;
    [ComAliasNameAttribute("Microsoft.VisualStudio.OLE.Interop.SYSKIND")]
public SYSKIND SYSKIND;
    [ComAliasNameAttribute("Microsoft.VisualStudio.OLE.Interop.WORD")]
public ushort wMajorVerNum;
    [ComAliasNameAttribute("Microsoft.VisualStudio.OLE.Interop.WORD")]
public ushort wMinorVerNum;
    [ComAliasNameAttribute("Microsoft.VisualStudio.OLE.Interop.WORD")]
public ushort wLibFlags;
}
public enum Microsoft.VisualStudio.OLE.Interop.TYMED : Enum {
    public int value__;
    public static TYMED TYMED_HGLOBAL;
    public static TYMED TYMED_FILE;
    public static TYMED TYMED_ISTREAM;
    public static TYMED TYMED_ISTORAGE;
    public static TYMED TYMED_GDI;
    public static TYMED TYMED_MFPICT;
    public static TYMED TYMED_ENHMF;
    public static TYMED TYMED_NULL;
}
public class Microsoft.VisualStudio.OLE.Interop.TYPEATTR : ValueType {
    public Guid guid;
    [ComAliasNameAttribute("Microsoft.VisualStudio.OLE.Interop.LCID")]
public UInt32 LCID;
    [ComAliasNameAttribute("Microsoft.VisualStudio.OLE.Interop.DWORD")]
public UInt32 dwReserved;
    [ComAliasNameAttribute("Microsoft.VisualStudio.OLE.Interop.MEMBERID")]
public int memidConstructor;
    [ComAliasNameAttribute("Microsoft.VisualStudio.OLE.Interop.MEMBERID")]
public int memidDestructor;
    [ComAliasNameAttribute("Microsoft.VisualStudio.OLE.Interop.LPOLESTR")]
public string lpstrSchema;
    [ComAliasNameAttribute("Microsoft.VisualStudio.OLE.Interop.ULONG")]
public UInt32 cbSizeInstance;
    [ComAliasNameAttribute("Microsoft.VisualStudio.OLE.Interop.TYPEKIND")]
public TYPEKIND TYPEKIND;
    [ComAliasNameAttribute("Microsoft.VisualStudio.OLE.Interop.WORD")]
public ushort cFuncs;
    [ComAliasNameAttribute("Microsoft.VisualStudio.OLE.Interop.WORD")]
public ushort cVars;
    [ComAliasNameAttribute("Microsoft.VisualStudio.OLE.Interop.WORD")]
public ushort cImplTypes;
    [ComAliasNameAttribute("Microsoft.VisualStudio.OLE.Interop.WORD")]
public ushort cbSizeVft;
    [ComAliasNameAttribute("Microsoft.VisualStudio.OLE.Interop.WORD")]
public ushort cbAlignment;
    [ComAliasNameAttribute("Microsoft.VisualStudio.OLE.Interop.WORD")]
public ushort wTypeFlags;
    [ComAliasNameAttribute("Microsoft.VisualStudio.OLE.Interop.WORD")]
public ushort wMajorVerNum;
    [ComAliasNameAttribute("Microsoft.VisualStudio.OLE.Interop.WORD")]
public ushort wMinorVerNum;
    [ComAliasNameAttribute("Microsoft.VisualStudio.OLE.Interop.TYPEDESC")]
public TYPEDESC tdescAlias;
    [ComAliasNameAttribute("Microsoft.VisualStudio.OLE.Interop.IDLDESC")]
public IDLDESC idldescType;
}
public class Microsoft.VisualStudio.OLE.Interop.TYPEDESC : ValueType {
    public IntPtr unionmember;
    [ComAliasNameAttribute("Microsoft.VisualStudio.OLE.Interop.VARTYPE")]
public ushort vt;
}
[FlagsAttribute]
public enum Microsoft.VisualStudio.OLE.Interop.TYPEFLAGS : Enum {
    public int value__;
    public static TYPEFLAGS TYPEFLAG_FAPPOBJECT;
    public static TYPEFLAGS TYPEFLAG_FCANCREATE;
    public static TYPEFLAGS TYPEFLAG_FLICENSED;
    public static TYPEFLAGS TYPEFLAG_FPREDECLID;
    public static TYPEFLAGS TYPEFLAG_FHIDDEN;
    public static TYPEFLAGS TYPEFLAG_FCONTROL;
    public static TYPEFLAGS TYPEFLAG_FDUAL;
    public static TYPEFLAGS TYPEFLAG_FNONEXTENSIBLE;
    public static TYPEFLAGS TYPEFLAG_FOLEAUTOMATION;
    public static TYPEFLAGS TYPEFLAG_FRESTRICTED;
    public static TYPEFLAGS TYPEFLAG_FAGGREGATABLE;
    public static TYPEFLAGS TYPEFLAG_FREPLACEABLE;
    public static TYPEFLAGS TYPEFLAG_FDISPATCHABLE;
    public static TYPEFLAGS TYPEFLAG_FREVERSEBIND;
    public static TYPEFLAGS TYPEFLAG_FPROXY;
}
public enum Microsoft.VisualStudio.OLE.Interop.TYPEKIND : Enum {
    public int value__;
    public static TYPEKIND TKIND_ENUM;
    public static TYPEKIND TKIND_RECORD;
    public static TYPEKIND TKIND_MODULE;
    public static TYPEKIND TKIND_INTERFACE;
    public static TYPEKIND TKIND_DISPATCH;
    public static TYPEKIND TKIND_COCLASS;
    public static TYPEKIND TKIND_ALIAS;
    public static TYPEKIND TKIND_UNION;
    public static TYPEKIND TKIND_MAX;
}
public enum Microsoft.VisualStudio.OLE.Interop.TYSPEC : Enum {
    public int value__;
    public static TYSPEC TYSPEC_CLSID;
    public static TYSPEC TYSPEC_FILEEXT;
    public static TYSPEC TYSPEC_MIMETYPE;
    public static TYSPEC TYSPEC_FILENAME;
    public static TYSPEC TYSPEC_PROGID;
    public static TYSPEC TYSPEC_PACKAGENAME;
    public static TYSPEC TYSPEC_OBJECTID;
}
[FlagsAttribute]
public enum Microsoft.VisualStudio.OLE.Interop.UASFLAGS : Enum {
    public int value__;
    public static UASFLAGS UAS_NORMAL;
    public static UASFLAGS UAS_BLOCKED;
    public static UASFLAGS UAS_NOPARENTENABLE;
    public static UASFLAGS UAS_MASK;
}
public class Microsoft.VisualStudio.OLE.Interop.ULARGE_INTEGER : ValueType {
    [ComAliasNameAttribute("Microsoft.VisualStudio.OLE.Interop.ULONGLONG")]
public ulong QuadPart;
}
public enum Microsoft.VisualStudio.OLE.Interop.URL_ENCODING : Enum {
    public int value__;
    public static URL_ENCODING URL_ENCODING_NONE;
    public static URL_ENCODING URL_ENCODING_ENABLE_UTF8;
    public static URL_ENCODING URL_ENCODING_DISABLE_UTF8;
}
public enum Microsoft.VisualStudio.OLE.Interop.URLTEMPLATE : Enum {
    public int value__;
    public static URLTEMPLATE URLTEMPLATE_CUSTOM;
    public static URLTEMPLATE URLTEMPLATE_PREDEFINED_MIN;
    public static URLTEMPLATE URLTEMPLATE_LOW;
    public static URLTEMPLATE URLTEMPLATE_MEDLOW;
    public static URLTEMPLATE URLTEMPLATE_MEDIUM;
    public static URLTEMPLATE URLTEMPLATE_HIGH;
    public static URLTEMPLATE URLTEMPLATE_PREDEFINED_MAX;
}
public enum Microsoft.VisualStudio.OLE.Interop.URLZONE : Enum {
    public int value__;
    public static URLZONE URLZONE_PREDEFINED_MIN;
    public static URLZONE URLZONE_LOCAL_MACHINE;
    public static URLZONE URLZONE_INTRANET;
    public static URLZONE URLZONE_TRUSTED;
    public static URLZONE URLZONE_INTERNET;
    public static URLZONE URLZONE_UNTRUSTED;
    public static URLZONE URLZONE_PREDEFINED_MAX;
    public static URLZONE URLZONE_USER_MIN;
    public static URLZONE URLZONE_USER_MAX;
}
public enum Microsoft.VisualStudio.OLE.Interop.URLZONEREG : Enum {
    public int value__;
    public static URLZONEREG URLZONEREG_DEFAULT;
    public static URLZONEREG URLZONEREG_HKLM;
    public static URLZONEREG URLZONEREG_HKCU;
}
public enum Microsoft.VisualStudio.OLE.Interop.USERCLASSTYPE : Enum {
    public int value__;
    public static USERCLASSTYPE USERCLASSTYPE_FULL;
    public static USERCLASSTYPE USERCLASSTYPE_SHORT;
    public static USERCLASSTYPE USERCLASSTYPE_APPNAME;
}
public class Microsoft.VisualStudio.OLE.Interop.VARDESC : ValueType {
    [ComAliasNameAttribute("Microsoft.VisualStudio.OLE.Interop.MEMBERID")]
public int memid;
    [ComAliasNameAttribute("Microsoft.VisualStudio.OLE.Interop.LPOLESTR")]
public string lpstrSchema;
    public IntPtr unionmember;
    [ComAliasNameAttribute("Microsoft.VisualStudio.OLE.Interop.ELEMDESC")]
public ELEMDESC elemdescVar;
    [ComAliasNameAttribute("Microsoft.VisualStudio.OLE.Interop.WORD")]
public ushort wVarFlags;
    [ComAliasNameAttribute("Microsoft.VisualStudio.OLE.Interop.VARKIND")]
public VARKIND VARKIND;
}
[FlagsAttribute]
public enum Microsoft.VisualStudio.OLE.Interop.VARFLAGS : Enum {
    public int value__;
    public static VARFLAGS VARFLAG_FREADONLY;
    public static VARFLAGS VARFLAG_FSOURCE;
    public static VARFLAGS VARFLAG_FBINDABLE;
    public static VARFLAGS VARFLAG_FREQUESTEDIT;
    public static VARFLAGS VARFLAG_FDISPLAYBIND;
    public static VARFLAGS VARFLAG_FDEFAULTBIND;
    public static VARFLAGS VARFLAG_FHIDDEN;
    public static VARFLAGS VARFLAG_FRESTRICTED;
    public static VARFLAGS VARFLAG_FDEFAULTCOLLELEM;
    public static VARFLAGS VARFLAG_FUIDEFAULT;
    public static VARFLAGS VARFLAG_FNONBROWSABLE;
    public static VARFLAGS VARFLAG_FREPLACEABLE;
    public static VARFLAGS VARFLAG_FIMMEDIATEBIND;
}
public enum Microsoft.VisualStudio.OLE.Interop.VARKIND : Enum {
    public int value__;
    public static VARKIND VAR_PERINSTANCE;
    public static VARKIND VAR_STATIC;
    public static VARKIND VAR_CONST;
    public static VARKIND VAR_DISPATCH;
}
public class Microsoft.VisualStudio.OLE.Interop.VERSIONEDSTREAM : ValueType {
    public Guid guidVersion;
    public IStream pStream;
}
public enum Microsoft.VisualStudio.OLE.Interop.VIEWSTATUS : Enum {
    public int value__;
    public static VIEWSTATUS VIEWSTATUS_OPAQUE;
    public static VIEWSTATUS VIEWSTATUS_SOLIDBKGND;
    public static VIEWSTATUS VIEWSTATUS_DVASPECTOPAQUE;
    public static VIEWSTATUS VIEWSTATUS_DVASPECTTRANSPARENT;
    public static VIEWSTATUS VIEWSTATUS_SURFACE;
    public static VIEWSTATUS VIEWSTATUS_3DSURFACE;
}
public enum Microsoft.VisualStudio.OLE.Interop.XFORMCOORDS : Enum {
    public int value__;
    public static XFORMCOORDS XFORMCOORDS_POSITION;
    public static XFORMCOORDS XFORMCOORDS_SIZE;
    public static XFORMCOORDS XFORMCOORDS_HIMETRICTOCONTAINER;
    public static XFORMCOORDS XFORMCOORDS_CONTAINERTOHIMETRIC;
    public static XFORMCOORDS XFORMCOORDS_EVENTCOMPAT;
}
[FlagsAttribute]
public enum Microsoft.VisualStudio.OLE.Interop.ZAFLAGS : Enum {
    public int value__;
    public static ZAFLAGS ZAFLAGS_CUSTOM_EDIT;
    public static ZAFLAGS ZAFLAGS_ADD_SITES;
    public static ZAFLAGS ZAFLAGS_REQUIRE_VERIFICATION;
    public static ZAFLAGS ZAFLAGS_INCLUDE_PROXY_OVERRIDE;
    public static ZAFLAGS ZAFLAGS_INCLUDE_INTRANET_SITES;
    public static ZAFLAGS ZAFLAGS_NO_UI;
    public static ZAFLAGS ZAFLAGS_SUPPORTS_VERIFICATION;
    public static ZAFLAGS ZAFLAGS_UNC_AS_INTRANET;
}
[ComVisibleAttribute("False")]
public interface Microsoft.VisualStudio.Shell.IMenuCommandInvokeEx {
    public abstract virtual void Invoke(object inArg, IntPtr outArg, OLECMDEXECOPT options);
}
public enum Microsoft.VisualStudio.Shell.Interop.__ACTIVITYLOG_ENTRYTYPE : Enum {
    public int value__;
    public static __ACTIVITYLOG_ENTRYTYPE ALE_ERROR;
    public static __ACTIVITYLOG_ENTRYTYPE ALE_WARNING;
    public static __ACTIVITYLOG_ENTRYTYPE ALE_INFORMATION;
}
public enum Microsoft.VisualStudio.Shell.Interop.__BUILDOUTOFDATEPROJECTS : Enum {
    public int value__;
    public static __BUILDOUTOFDATEPROJECTS BUILDOUTOFDATEPROJECTS_YES;
    public static __BUILDOUTOFDATEPROJECTS BUILDOUTOFDATEPROJECTS_NO;
    public static __BUILDOUTOFDATEPROJECTS BUILDOUTOFDATEPROJECTS_PROMPT;
    public static __BUILDOUTOFDATEPROJECTS BUILDOUTOFDATEPROJECTS_MAX;
}
public enum Microsoft.VisualStudio.Shell.Interop.__BWI_IMAGE_POS : Enum {
    public int value__;
    public static __BWI_IMAGE_POS BWI_IMAGE_POS_LEFT;
    public static __BWI_IMAGE_POS BWI_IMAGE_POS_RIGHT;
    public static __BWI_IMAGE_POS BWI_IMAGE_ONLY;
}
public enum Microsoft.VisualStudio.Shell.Interop.__COMMANDWINDOWMODE2 : Enum {
    public int value__;
    public static __COMMANDWINDOWMODE2 CWM_DEFAULT;
}
public enum Microsoft.VisualStudio.Shell.Interop.__DOCUMENTPREVIEWERTYPE : Enum {
    public int value__;
    public static __DOCUMENTPREVIEWERTYPE DP_InternalBrowser;
    public static __DOCUMENTPREVIEWERTYPE DP_SystemBrowser;
    public static __DOCUMENTPREVIEWERTYPE DP_InstalledBrowser;
    public static __DOCUMENTPREVIEWERTYPE DP_PackageRegistered;
    public static __DOCUMENTPREVIEWERTYPE DP_UserDefined;
}
[FlagsAttribute]
public enum Microsoft.VisualStudio.Shell.Interop.__DSI_FLAGS : Enum {
    public int value__;
    public static __DSI_FLAGS DSI_USESHOWWINDOW;
    public static __DSI_FLAGS DSI_USESIZE;
    public static __DSI_FLAGS DSI_USEPOSITION;
    public static __DSI_FLAGS DSI_USECOUNTCHARS;
    public static __DSI_FLAGS DSI_USEFILLATTRIBUTE;
    public static __DSI_FLAGS DSI_RUNFULLSCREEN;
    public static __DSI_FLAGS DSI_FORCEONFEEDBACK;
    public static __DSI_FLAGS DSI_FORCEOFFFEEDBACK;
    public static __DSI_FLAGS DSI_USESTDHANDLES;
    public static __DSI_FLAGS DSI_USECREATIONFLAGS;
    public static __DSI_FLAGS DSI_INHERITHANDLES;
}
[FlagsAttribute]
public enum Microsoft.VisualStudio.Shell.Interop.__EFNFLAGS : Enum {
    public int value__;
    public static __EFNFLAGS EFN_ClonedFromTemplate;
    public static __EFNFLAGS EFN_ItemAdded;
    public static __EFNFLAGS EFN_ItemAddedFromSaveAs;
    public static __EFNFLAGS EFN_ItemAddedAsCopyOf;
}
[FlagsAttribute]
public enum Microsoft.VisualStudio.Shell.Interop.__FCFONTFLAGS : Enum {
    public int value__;
    public static __FCFONTFLAGS FCFF_TRACK_PLAINTEXT_BOLD;
}
[FlagsAttribute]
public enum Microsoft.VisualStudio.Shell.Interop.__FCFONTFLAGS2 : Enum {
    public int value__;
    public static __FCFONTFLAGS2 FCFF_TRACK_PLAINTEXT_STRIKETHROUGH;
    public static __FCFONTFLAGS2 FCFF_TRACK_PLAINTEXT_ITALIC;
    public static __FCFONTFLAGS2 FCFF_TRACK_PLAINTEXT_UNDERLINE;
}
[FlagsAttribute]
public enum Microsoft.VisualStudio.Shell.Interop.__FCITEMFLAGS : Enum {
    public int value__;
    public static __FCITEMFLAGS FCIF_ISMARKER;
    public static __FCITEMFLAGS FCIF_ALLOWFGCHANGE;
    public static __FCITEMFLAGS FCIF_ALLOWBGCHANGE;
    public static __FCITEMFLAGS FCIF_ALLOWBOLDCHANGE;
    public static __FCITEMFLAGS FCIF_ALLOWCUSTOMCOLORS;
    public static __FCITEMFLAGS FCIF_PLAINTEXT;
}
[FlagsAttribute]
public enum Microsoft.VisualStudio.Shell.Interop.__FCITEMFLAGS2 : Enum {
    public int value__;
    public static __FCITEMFLAGS2 FCIF_ALLOWSTRIKETHROUGHCHANGE;
    public static __FCITEMFLAGS2 FCIF_ALLOWITALICCHANGE;
    public static __FCITEMFLAGS2 FCIF_ALLOWUNDERLINECHANGE;
}
public enum Microsoft.VisualStudio.Shell.Interop.__FCPRIORITY : Enum {
    public int value__;
    public static __FCPRIORITY FCP_EDITOR;
    public static __FCPRIORITY FCP_ENVIRONMENT;
    public static __FCPRIORITY FCP_CLIENTS;
}
[FlagsAttribute]
public enum Microsoft.VisualStudio.Shell.Interop.__FCSTORAGEFLAGS : Enum {
    public int value__;
    public static __FCSTORAGEFLAGS FCSF_READONLY;
    public static __FCSTORAGEFLAGS FCSF_LOADDEFAULTS;
    public static __FCSTORAGEFLAGS FCSF_PROPAGATECHANGES;
    public static __FCSTORAGEFLAGS FCSF_NOAUTOCOLORS;
}
[FlagsAttribute]
public enum Microsoft.VisualStudio.Shell.Interop.__FCSTORAGEFLAGS2 : Enum {
    public int value__;
    public static __FCSTORAGEFLAGS2 FCSF_AVOIDPACKAGELOAD;
}
public enum Microsoft.VisualStudio.Shell.Interop.__FILTERKEYSMESSAGES : Enum {
    public int value__;
    public static __FILTERKEYSMESSAGES FilterKeysMessage_GotFocus;
    public static __FILTERKEYSMESSAGES FilterKeysMessage_LostFocus;
    public static __FILTERKEYSMESSAGES FilterKeysMessage_SysKeyDown;
    public static __FILTERKEYSMESSAGES FilterKeysMessage_KeyDown;
    public static __FILTERKEYSMESSAGES FilterKeysMessage_Character;
    public static __FILTERKEYSMESSAGES FilterKeysMessage_DragDrop;
    public static __FILTERKEYSMESSAGES FilterKeysMessage_TextChanged;
}
[FlagsAttribute]
public enum Microsoft.VisualStudio.Shell.Interop.__FONTCOLORFLAGS : Enum {
    public int value__;
    public static __FONTCOLORFLAGS FCF_MUSTRESTART;
    public static __FONTCOLORFLAGS FCF_ONLYTTFONTS;
    public static __FONTCOLORFLAGS FCF_SAVEALL;
    public static __FONTCOLORFLAGS FCF_ONLYNEWINSTANCES;
    public static __FONTCOLORFLAGS FCF_AUTOFONT;
}
[FlagsAttribute]
public enum Microsoft.VisualStudio.Shell.Interop.__FONTCOLORFLAGS2 : Enum {
    public int value__;
    public static __FONTCOLORFLAGS2 FCF_ONLYFIXEDPITCHFONTS;
}
public enum Microsoft.VisualStudio.Shell.Interop.__FRAMECLOSE : Enum {
    public int value__;
    public static __FRAMECLOSE FRAMECLOSE_NoSave;
    public static __FRAMECLOSE FRAMECLOSE_SaveIfDirty;
    public static __FRAMECLOSE FRAMECLOSE_PromptSave;
}
public enum Microsoft.VisualStudio.Shell.Interop.__FRAMESHOW : Enum {
    public int value__;
    public static __FRAMESHOW FRAMESHOW_Hidden;
    public static __FRAMESHOW FRAMESHOW_WinHidden;
    public static __FRAMESHOW FRAMESHOW_WinShown;
    public static __FRAMESHOW FRAMESHOW_TabActivated;
    public static __FRAMESHOW FRAMESHOW_TabDeactivated;
    public static __FRAMESHOW FRAMESHOW_WinRestored;
    public static __FRAMESHOW FRAMESHOW_WinMinimized;
    public static __FRAMESHOW FRAMESHOW_WinMaximized;
    public static __FRAMESHOW FRAMESHOW_WinClosed;
    public static __FRAMESHOW FRAMESHOW_DestroyMultInst;
    public static __FRAMESHOW FRAMESHOW_AutoHideSlideBegin;
}
public enum Microsoft.VisualStudio.Shell.Interop.__FRAMESHOW2 : Enum {
    public int value__;
    public static __FRAMESHOW2 FRAMESHOW_BeforeWinHidden;
    public static __FRAMESHOW2 FRAMESHOW_AutoHideSlideEnd;
}
public enum Microsoft.VisualStudio.Shell.Interop.__FRAMESHOW3 : Enum {
    public int value__;
    public static __FRAMESHOW3 FRAMESHOW_WinActivated;
}
public enum Microsoft.VisualStudio.Shell.Interop.__FRAMESHOW4 : Enum {
    public int value__;
    public static __FRAMESHOW4 FRAMESHOW_WinContentGotFocus;
    public static __FRAMESHOW4 FRAMESHOW_WinContentLostFocus;
}
public enum Microsoft.VisualStudio.Shell.Interop.__FRAMESHOW5 : Enum {
    public int value__;
    public static __FRAMESHOW5 FRAMESHOW_LoadingWindowActivated;
    public static __FRAMESHOW5 FRAMESHOW_LoadingWindowShown;
}
[FlagsAttribute]
public enum Microsoft.VisualStudio.Shell.Interop.__FRD_FLAGS : Enum {
    public int value__;
    public static __FRD_FLAGS FRDF_SUPPORTS_RETARGETING;
    public static __FRD_FLAGS FRDF_DEFAULT;
}
public enum Microsoft.VisualStudio.Shell.Interop.__FRD_OUTCOME : Enum {
    public int value__;
    public static __FRD_OUTCOME FRDO_RETARGET_TO_40;
    public static __FRD_OUTCOME FRDO_LEAVE_UNLOADED;
    public static __FRD_OUTCOME FRDO_GOTO_DOWNLOAD_SITE;
}
public enum Microsoft.VisualStudio.Shell.Interop.__GRADIENTTYPE : Enum {
    public int value__;
    public static __GRADIENTTYPE VSGRADIENT_FILETAB;
    public static __GRADIENTTYPE VSGRADIENT_PANEL_BACKGROUND;
    public static __GRADIENTTYPE VSGRADIENT_SHELLBACKGROUND;
    public static __GRADIENTTYPE VSGRADIENT_TOOLBOX_HEADING;
    public static __GRADIENTTYPE VSGRADIENT_TOOLTAB;
    public static __GRADIENTTYPE VSGRADIENT_TOOLWIN_ACTIVE_TITLE_BAR;
    public static __GRADIENTTYPE VSGRADIENT_TOOLWIN_INACTIVE_TITLE_BAR;
    public static __GRADIENTTYPE VSGRADIENT_TOOLWIN_BACKGROUND;
}
public enum Microsoft.VisualStudio.Shell.Interop.__GRADIENTTYPE2 : Enum {
    public int value__;
    public static __GRADIENTTYPE2 VSGRADIENT_FILETAB_SELECTED;
    public static __GRADIENTTYPE2 VSGRADIENT_FILETAB_HOT;
}
public enum Microsoft.VisualStudio.Shell.Interop.__GRADIENTTYPE3 : Enum {
    public int value__;
    public static __GRADIENTTYPE3 VSGRADIENT_TOOLBOX_SELECTED_HEADING_TOP;
    public static __GRADIENTTYPE3 VSGRADIENT_TOOLBOX_SELECTED_HEADING_BOTTOM;
}
public enum Microsoft.VisualStudio.Shell.Interop.__HANDSOFFMODE : Enum {
    public int value__;
    public static __HANDSOFFMODE HANDSOFFMODE_ReadAccess;
    public static __HANDSOFFMODE HANDSOFFMODE_WriteAccess;
    public static __HANDSOFFMODE HANDSOFFMODE_DeleteAccess;
    public static __HANDSOFFMODE HANDSOFFMODE_AsyncOperation;
    public static __HANDSOFFMODE HANDSOFFMODE_FullAccess;
    public static __HANDSOFFMODE HANDSOFFMODE_ReadWriteAccess;
}
[FlagsAttribute]
public enum Microsoft.VisualStudio.Shell.Interop.__HierarchyDropArea : Enum {
    public int value__;
    public static __HierarchyDropArea DROPAREA_On;
    public static __HierarchyDropArea DROPAREA_Above;
    public static __HierarchyDropArea DROPAREA_Below;
}
public enum Microsoft.VisualStudio.Shell.Interop.__MENUEDITOR_TRANSACTION : Enum {
    public int value__;
    public static __MENUEDITOR_TRANSACTION MENUEDITOR_TRANSACTION_DISCARD;
    public static __MENUEDITOR_TRANSACTION MENUEDITOR_TRANSACTION_ALL;
    public static __MENUEDITOR_TRANSACTION MENUEDITOR_TRANSACTION_CUT;
    public static __MENUEDITOR_TRANSACTION MENUEDITOR_TRANSACTION_PASTE;
    public static __MENUEDITOR_TRANSACTION MENUEDITOR_TRANSACTION_COPY;
    public static __MENUEDITOR_TRANSACTION MENUEDITOR_TRANSACTION_DELETE;
}
public enum Microsoft.VisualStudio.Shell.Interop.__PREVIEWCHANGESITEMCHECKSTATE : Enum {
    public int value__;
    public static __PREVIEWCHANGESITEMCHECKSTATE PCCS_None;
    public static __PREVIEWCHANGESITEMCHECKSTATE PCCS_Unchecked;
    public static __PREVIEWCHANGESITEMCHECKSTATE PCCS_PartiallyChecked;
    public static __PREVIEWCHANGESITEMCHECKSTATE PCCS_Checked;
}
public enum Microsoft.VisualStudio.Shell.Interop.__PREVIEWCHANGESWARNINGLEVEL : Enum {
    public int value__;
    public static __PREVIEWCHANGESWARNINGLEVEL PCWL_None;
    public static __PREVIEWCHANGESWARNINGLEVEL PCWL_Information;
    public static __PREVIEWCHANGESWARNINGLEVEL PCWL_Warning;
    public static __PREVIEWCHANGESWARNINGLEVEL PCWL_Error;
}
public enum Microsoft.VisualStudio.Shell.Interop.__ProjectReferenceOutputValidity : Enum {
    public int value__;
    public static __ProjectReferenceOutputValidity PROV_DoDefaultCheck;
    public static __ProjectReferenceOutputValidity PROV_OutputValid;
    public static __ProjectReferenceOutputValidity PROV_OutputInvalid;
}
public enum Microsoft.VisualStudio.Shell.Interop.__PSFFILEID : Enum {
    public int value__;
    public static __PSFFILEID PSFFILEID_LAST;
    public static __PSFFILEID PSFFILEID_AppConfig;
    public static __PSFFILEID PSFFILEID_Licenses;
    public static __PSFFILEID PSFFILEID_FIRST;
}
public enum Microsoft.VisualStudio.Shell.Interop.__PSFFILEID2 : Enum {
    public int value__;
    public static __PSFFILEID2 PSFFILEID_WebSettings;
    public static __PSFFILEID2 PSFFILEID_AppManifest;
    public static __PSFFILEID2 PSFFILEID_AppDesigner;
    public static __PSFFILEID2 PSFFILEID_AppSettings;
    public static __PSFFILEID2 PSFFILEID_AssemblyResource;
    public static __PSFFILEID2 PSFFILEID_AssemblyInfo;
    public static __PSFFILEID2 PSFFILEID_FIRST2;
}
public enum Microsoft.VisualStudio.Shell.Interop.__PSFFILEID3 : Enum {
    public int value__;
    public static __PSFFILEID3 PSFFILEID_AppXaml;
    public static __PSFFILEID3 PSFFILEID_FIRST3;
}
public enum Microsoft.VisualStudio.Shell.Interop.__PSFFILEID4 : Enum {
    public int value__;
    public static __PSFFILEID4 PSFFILEID_WcfServiceReferencesConfig;
    public static __PSFFILEID4 PSFFILEID_FIRST4;
}
public enum Microsoft.VisualStudio.Shell.Interop.__PSFFILEID5 : Enum {
    public int value__;
    public static __PSFFILEID5 PSFFILEID_AppxManifest;
    public static __PSFFILEID5 PSFFILEID_FIRST5;
}
[FlagsAttribute]
public enum Microsoft.VisualStudio.Shell.Interop.__PSFFLAGS : Enum {
    public int value__;
    public static __PSFFLAGS PSFF_CreateIfNotExist;
    public static __PSFFLAGS PSFF_FullPath;
}
[FlagsAttribute]
public enum Microsoft.VisualStudio.Shell.Interop.__PSFFLAGS2 : Enum {
    public int value__;
    public static __PSFFLAGS2 PSFF_CheckoutIfExists;
}
public enum Microsoft.VisualStudio.Shell.Interop.__RETARGET_CHECK_OPTIONS : Enum {
    public int value__;
    public static __RETARGET_CHECK_OPTIONS RCO_NONE;
    public static __RETARGET_CHECK_OPTIONS RCO_NO_PROMPT;
    public static __RETARGET_CHECK_OPTIONS RCO_REQUIRED_ONLY;
    public static __RETARGET_CHECK_OPTIONS RCO_FIRST_SOLUTION_LOAD;
    public static __RETARGET_CHECK_OPTIONS RCO_PROJECT_LOAD;
    public static __RETARGET_CHECK_OPTIONS RCO_SOLUTION_RETARGET;
    public static __RETARGET_CHECK_OPTIONS RCO_PROJECT_RETARGET;
    public static __RETARGET_CHECK_OPTIONS RCO_PROJECT_RELOAD;
}
public enum Microsoft.VisualStudio.Shell.Interop.__RETARGET_OPTIONS : Enum {
    public int value__;
    public static __RETARGET_OPTIONS RO_NONE;
    public static __RETARGET_OPTIONS RO_BACKUP;
}
public enum Microsoft.VisualStudio.Shell.Interop.__RETARGET_TASK_PRIORITY : Enum {
    public int value__;
    public static __RETARGET_TASK_PRIORITY RTP_Low;
    public static __RETARGET_TASK_PRIORITY RTP_Normal;
    public static __RETARGET_TASK_PRIORITY RTP_High;
    public static __RETARGET_TASK_PRIORITY RTP_Critical;
}
public enum Microsoft.VisualStudio.Shell.Interop.__RUNAFTERBUILDERRORS : Enum {
    public int value__;
    public static __RUNAFTERBUILDERRORS RUNAFTERBUILDERRORS_YES;
    public static __RUNAFTERBUILDERRORS RUNAFTERBUILDERRORS_NO;
    public static __RUNAFTERBUILDERRORS RUNAFTERBUILDERRORS_PROMPT;
    public static __RUNAFTERBUILDERRORS RUNAFTERBUILDERRORS_MAX;
}
public enum Microsoft.VisualStudio.Shell.Interop.__SccStatus : Enum {
    public int value__;
    public static __SccStatus SCC_STATUS_INVALID;
    public static __SccStatus SCC_STATUS_NOTCONTROLLED;
    public static __SccStatus SCC_STATUS_CONTROLLED;
    public static __SccStatus SCC_STATUS_CHECKEDOUT;
    public static __SccStatus SCC_STATUS_OUTOTHER;
    public static __SccStatus SCC_STATUS_OUTEXCLUSIVE;
    public static __SccStatus SCC_STATUS_OUTMULTIPLE;
    public static __SccStatus SCC_STATUS_OUTOFDATE;
    public static __SccStatus SCC_STATUS_DELETED;
    public static __SccStatus SCC_STATUS_LOCKED;
    public static __SccStatus SCC_STATUS_MERGED;
    public static __SccStatus SCC_STATUS_SHARED;
    public static __SccStatus SCC_STATUS_PINNED;
    public static __SccStatus SCC_STATUS_MODIFIED;
    public static __SccStatus SCC_STATUS_OUTBYUSER;
    public static __SccStatus SCC_STATUS_NOMERGE;
    public static __SccStatus SCC_STATUS_RESERVED_1;
    public static __SccStatus SCC_STATUS_RESERVED_2;
    public static __SccStatus SCC_STATUS_RESERVED_3;
}
public enum Microsoft.VisualStudio.Shell.Interop.__SccToolsOptionsEnum : Enum {
    public int value__;
    public static __SccToolsOptionsEnum ksctoAllowReadOnlyFilesNotUnderSccToBeEdited;
    public static __SccToolsOptionsEnum ksctoLast;
    public static __SccToolsOptionsEnum ksctoBad;
}
public enum Microsoft.VisualStudio.Shell.Interop.__STOP_DEBUGGING_PROCESS_REASON : Enum {
    public int value__;
    public static __STOP_DEBUGGING_PROCESS_REASON SDPR_DETACH;
    public static __STOP_DEBUGGING_PROCESS_REASON SDPR_TERMINATE;
}
public enum Microsoft.VisualStudio.Shell.Interop.__SymbolToolLanguage : Enum {
    public int value__;
    public static __SymbolToolLanguage SymbolToolLanguage_None;
    public static __SymbolToolLanguage SymbolToolLanguage_CSharp;
    public static __SymbolToolLanguage SymbolToolLanguage_VB;
    public static __SymbolToolLanguage SymbolToolLanguage_VC_CLI;
    public static __SymbolToolLanguage SymbolToolLanguage_VC_ZW;
}
[FlagsAttribute]
public enum Microsoft.VisualStudio.Shell.Interop.__TABIMAGEFLAGS : Enum {
    public int value__;
    public static __TABIMAGEFLAGS TIF_NONE;
    public static __TABIMAGEFLAGS TIF_THEMABLE;
    public static __TABIMAGEFLAGS TIF_DPI_SCALED;
}
[FlagsAttribute]
public enum Microsoft.VisualStudio.Shell.Interop.__TBXITEMINFOFLAGS : Enum {
    public int value__;
    public static __TBXITEMINFOFLAGS TBXIF_DELETEBITMAP;
    public static __TBXITEMINFOFLAGS TBXIF_DONTPERSIST;
    public static __TBXITEMINFOFLAGS TBXIF_CANTREMOVE;
    public static __TBXITEMINFOFLAGS TBXIF_IMAGEINDEX;
}
public enum Microsoft.VisualStudio.Shell.Interop.__THEMEDCOLORTYPE : Enum {
    public int value__;
    public static __THEMEDCOLORTYPE TCT_Background;
    public static __THEMEDCOLORTYPE TCT_Foreground;
}
[FlagsAttribute]
public enum Microsoft.VisualStudio.Shell.Interop.__UIHWINFLAGS : Enum {
    public int value__;
    public static __UIHWINFLAGS UIHWF_ActAsProjectTypeWin;
    public static __UIHWINFLAGS UIHWF_DoNotSortRootNodes;
    public static __UIHWINFLAGS UIHWF_SupportToolWindowToolbars;
    public static __UIHWINFLAGS UIHWF_ForceSingleSelect;
    public static __UIHWINFLAGS UIHWF_InitWithHiddenRootHierarchy;
    public static __UIHWINFLAGS UIHWF_UseSolutionAsHiddenRootHierarchy;
    public static __UIHWINFLAGS UIHWF_LinesAtRoot;
    public static __UIHWINFLAGS UIHWF_SortChildNodes;
    public static __UIHWINFLAGS UIHWF_NoStateIcon;
    public static __UIHWINFLAGS UIHWF_InitWithHiddenParentRoot;
    public static __UIHWINFLAGS UIHWF_PropagateAltHierarchyItem;
    public static __UIHWINFLAGS UIHWF_RouteCmdidDelete;
    public static __UIHWINFLAGS UIHWF_HandlesCmdsAsActiveHierarchy;
}
public enum Microsoft.VisualStudio.Shell.Interop.__UPDATE_REFERENCE_REASON : Enum {
    public int value__;
    public static __UPDATE_REFERENCE_REASON URR_PROJECT_OPEN;
    public static __UPDATE_REFERENCE_REASON URR_BUILD;
    public static __UPDATE_REFERENCE_REASON URR_START_DEBUG;
    public static __UPDATE_REFERENCE_REASON URR_REFERENCEPATH_CHANGED;
    public static __UPDATE_REFERENCE_REASON URR_REFERENCE_ADDED;
    public static __UPDATE_REFERENCE_REASON URR_REFERENCE_REMOVED;
    public static __UPDATE_REFERENCE_REASON URR_EXPLICIT_USER_ACTION;
}
[FlagsAttribute]
public enum Microsoft.VisualStudio.Shell.Interop.__UserSettingsFlags : Enum {
    public int value__;
    public static __UserSettingsFlags USF_None;
    public static __UserSettingsFlags USF_ResetOnImport;
    public static __UserSettingsFlags USF_DisableOptimizations;
}
public enum Microsoft.VisualStudio.Shell.Interop.__VISUALEFFECTS : Enum {
    public int value__;
    public static __VISUALEFFECTS VISUALEFFECTS_None;
    public static __VISUALEFFECTS VISUALEFFECTS_Animations;
    public static __VISUALEFFECTS VISUALEFFECTS_Gradients;
    public static __VISUALEFFECTS VISUALEFFECTS_AllRichEffects;
    public static __VISUALEFFECTS VISUALEFFECTS_UseHardwareAcceleration;
}
public enum Microsoft.VisualStudio.Shell.Interop.__VSADDHIEROPTIONS : Enum {
    public int value__;
    public static __VSADDHIEROPTIONS ADDHIEROPT_DontSelectNewHierarchy;
}
[FlagsAttribute]
public enum Microsoft.VisualStudio.Shell.Interop.__VSADDITEMFLAGS : Enum {
    public int value__;
    public static __VSADDITEMFLAGS VSADDITEM_AllowMultiSelect;
    public static __VSADDITEMFLAGS VSADDITEM_HideNameField;
    public static __VSADDITEMFLAGS VSADDITEM_SuggestTemplateName;
    public static __VSADDITEMFLAGS VSADDITEM_ShowLocationField;
    public static __VSADDITEMFLAGS VSADDITEM_ShowDontShowAgain;
    public static __VSADDITEMFLAGS VSADDITEM_AllowStickyFilter;
    public static __VSADDITEMFLAGS VSADDITEM_AddNewItems;
    public static __VSADDITEMFLAGS VSADDITEM_AddExistingItems;
    public static __VSADDITEMFLAGS VSADDITEM_ProjectHandlesLinks;
    public static __VSADDITEMFLAGS VSADDITEM_NewDirectoryForItem;
    public static __VSADDITEMFLAGS VSADDITEM_AllowHiddenTreeView;
    public static __VSADDITEMFLAGS VSADDITEM_NoOpenButtonDropDown;
    public static __VSADDITEMFLAGS VSADDITEM_AllowSingleTreeRoot;
    public static __VSADDITEMFLAGS VSADDITEM_ExpandSingleTreeRoot;
    public static __VSADDITEMFLAGS VSADDITEM_ShowProjectTypesOnly;
    public static __VSADDITEMFLAGS VSADDITEM_AllowOnlyFileSysLocs;
}
[FlagsAttribute]
public enum Microsoft.VisualStudio.Shell.Interop.__VSADDITEMFLAGS2 : Enum {
    public int value__;
    public static __VSADDITEMFLAGS2 VSADDITEM_NoUserTemplateFeatures;
    public static __VSADDITEMFLAGS2 VSADDITEM_ShowOpenButtonDropDown;
}
[FlagsAttribute]
public enum Microsoft.VisualStudio.Shell.Interop.__VSADDITEMFLAGS3 : Enum {
    public int value__;
    public static __VSADDITEMFLAGS3 VSADDITEM_NoOnlineTemplates;
}
[FlagsAttribute]
public enum Microsoft.VisualStudio.Shell.Interop.__VSADDITEMFLAGS4 : Enum {
    public int value__;
    public static __VSADDITEMFLAGS4 VSADDITEM_DisallowCompactView;
}
[FlagsAttribute]
public enum Microsoft.VisualStudio.Shell.Interop.__VSADDNEWWEBITEMOPTIONS : Enum {
    public int value__;
    public static __VSADDNEWWEBITEMOPTIONS VSADDWEBITEM_SelectMaster;
    public static __VSADDNEWWEBITEMOPTIONS VSADDWEBITEM_SeparateCodeFile;
    public static __VSADDNEWWEBITEMOPTIONS VSADDWEBITEM_SelectMasterIsValid;
    public static __VSADDNEWWEBITEMOPTIONS VSADDWEBITEM_SeparateCodeFileIsValid;
    public static __VSADDNEWWEBITEMOPTIONS VSADDWEBITEM_IsValidMask;
}
[FlagsAttribute]
public enum Microsoft.VisualStudio.Shell.Interop.__VSADDVPFLAGS : Enum {
    public int value__;
    public static __VSADDVPFLAGS ADDVP_AddToProjectWindow;
    public static __VSADDVPFLAGS ADDVP_ExcludeFromBuild;
    public static __VSADDVPFLAGS ADDVP_ExcludeFromDebugLaunch;
    public static __VSADDVPFLAGS ADDVP_ExcludeFromDeploy;
    public static __VSADDVPFLAGS ADDVP_ExcludeFromSCC;
    public static __VSADDVPFLAGS ADDVP_ExcludeFromEnumOutputs;
    public static __VSADDVPFLAGS ADDVP_ExcludeFromCfgUI;
}
[FlagsAttribute]
public enum Microsoft.VisualStudio.Shell.Interop.__VSADDVPFLAGS2 : Enum {
    public int value__;
    public static __VSADDVPFLAGS2 ADDVP_ReloadOnProjectFileChanged;
}
[FlagsAttribute]
public enum Microsoft.VisualStudio.Shell.Interop.__VSADDVPFLAGS3 : Enum {
    public int value__;
    public static __VSADDVPFLAGS3 ADDVP_InvisibleInternalProject;
}
[FlagsAttribute]
public enum Microsoft.VisualStudio.Shell.Interop.__VSADDVPFLAGS4 : Enum {
    public int value__;
    public static __VSADDVPFLAGS4 ADDVP_NotSelectProject;
}
public enum Microsoft.VisualStudio.Shell.Interop.__VsApplicationDataFolder : Enum {
    public int value__;
    public static __VsApplicationDataFolder ApplicationDataFolder_LocalSettings;
    public static __VsApplicationDataFolder ApplicationDataFolder_RoamingSettings;
    public static __VsApplicationDataFolder ApplicationDataFolder_Configuration;
    public static __VsApplicationDataFolder ApplicationDataFolder_Documents;
    public static __VsApplicationDataFolder ApplicationDataFolder_UserExtensions;
    public static __VsApplicationDataFolder ApplicationDataFolder_ApplicationExtensions;
}
[FlagsAttribute]
public enum Microsoft.VisualStudio.Shell.Interop.__VSArrangeWindowFlags : Enum {
    public int value__;
    public static __VSArrangeWindowFlags AWF_Left;
    public static __VSArrangeWindowFlags AWF_Top;
    public static __VSArrangeWindowFlags AWF_Width;
    public static __VSArrangeWindowFlags AWF_Height;
}
[FlagsAttribute]
public enum Microsoft.VisualStudio.Shell.Interop.__VSASPFLAGS : Enum {
    public int value__;
    public static __VSASPFLAGS ASP_MakeDefault;
    public static __VSASPFLAGS ASP_UnsetOldDefaults;
}
public enum Microsoft.VisualStudio.Shell.Interop.__VSASSEMBLYPROVIDERTAB : Enum {
    public int value__;
    public static __VSASSEMBLYPROVIDERTAB TAB_ASSEMBLY_FRAMEWORK;
    public static __VSASSEMBLYPROVIDERTAB TAB_ASSEMBLY_EXTENSIONS;
    public static __VSASSEMBLYPROVIDERTAB TAB_ASSEMBLY_ALL;
}
public enum Microsoft.VisualStudio.Shell.Interop.__VSASYNCHOPENPROJECTTYPE : Enum {
    public int value__;
    public static __VSASYNCHOPENPROJECTTYPE AOPT_SYNCHRONOUS;
    public static __VSASYNCHOPENPROJECTTYPE AOPT_ASYNCHRONOUS;
}
public enum Microsoft.VisualStudio.Shell.Interop.__VSASYNCTOOLBOXSTATE : Enum {
    public int value__;
    public static __VSASYNCTOOLBOXSTATE ATS_NONE;
    public static __VSASYNCTOOLBOXSTATE ATS_INITIALIZING;
    public static __VSASYNCTOOLBOXSTATE ATS_FILTERING;
}
public enum Microsoft.VisualStudio.Shell.Interop.__VSBACKGROUNDTASKPRIORITY : Enum {
    public int value__;
    public static __VSBACKGROUNDTASKPRIORITY VSBACKGROUNDTASKPRIORITY_STANDARD;
    public static __VSBACKGROUNDTASKPRIORITY VSBACKGROUNDTASKPRIORITY_IMMEDIATE;
    public static __VSBACKGROUNDTASKPRIORITY VSBACKGROUNDTASKPRIORITY_OTHER;
}
public enum Microsoft.VisualStudio.Shell.Interop.__VSBATCHLOADRESULT : Enum {
    public int value__;
    public static __VSBATCHLOADRESULT BLR_SUCCESS;
    public static __VSBATCHLOADRESULT BLR_PREFETCH_ERROR;
    public static __VSBATCHLOADRESULT BLR_LOAD_ERROR;
    public static __VSBATCHLOADRESULT BLR_NEED_UPGRADE;
    public static __VSBATCHLOADRESULT BLR_UNSAFE_PROJECT;
    public static __VSBATCHLOADRESULT BLR_NEW_FACTORY;
}
public enum Microsoft.VisualStudio.Shell.Interop.__VSBatchProjectAction : Enum {
    public int value__;
    public static __VSBatchProjectAction BPA_NONE;
    public static __VSBatchProjectAction BPA_UNLOAD;
    public static __VSBatchProjectAction BPA_LOAD;
    public static __VSBatchProjectAction BPA_RELOAD;
    public static __VSBatchProjectAction BPA_RELOADSOLUTION;
    public static __VSBatchProjectAction BPA_ADD;
    public static __VSBatchProjectAction BPA_REMOVE;
    public static __VSBatchProjectAction BPA_PARENTUPDATE;
}
[FlagsAttribute]
public enum Microsoft.VisualStudio.Shell.Interop.__VSBatchProjectActionFlags : Enum {
    public int value__;
    public static __VSBatchProjectActionFlags BPAF_CLOSE_FILES;
    public static __VSBatchProjectActionFlags BPAF_PROMPT_SAVE;
    public static __VSBatchProjectActionFlags BPAF_ALLOW_RELOAD_SOLUTION;
    public static __VSBatchProjectActionFlags BPAF_IGNORE_SELFRELOAD_PROJECTS;
}
public enum Microsoft.VisualStudio.Shell.Interop.__VSBatchProjectActionResult : Enum {
    public int value__;
    public static __VSBatchProjectActionResult BPAR_UNCHANGED;
    public static __VSBatchProjectActionResult BPAR_UNLOADED;
    public static __VSBatchProjectActionResult BPAR_RELOADED;
    public static __VSBatchProjectActionResult BPAR_SELFRELOADED;
    public static __VSBatchProjectActionResult BPAR_ERROR;
    public static __VSBatchProjectActionResult BPAR_ADDED;
    public static __VSBatchProjectActionResult BPAR_REMOVED;
    public static __VSBatchProjectActionResult BPAR_PARENTUPDATED;
}
public enum Microsoft.VisualStudio.Shell.Interop.__VSBLDCFGPROPID : Enum {
    public int value__;
    public static __VSBLDCFGPROPID VSBLDCFGPROPID_LAST;
    public static __VSBLDCFGPROPID VSBLDCFGPROPID_SupportsMTBuild;
    public static __VSBLDCFGPROPID VSBLDCFGPROPID_FIRST;
}
public enum Microsoft.VisualStudio.Shell.Interop.__VSBLDCFGPROPID2 : Enum {
    public int value__;
    public static __VSBLDCFGPROPID2 VSBLDCFGPROPID_SupportsMTBuild;
    public static __VSBLDCFGPROPID2 VSBLDCFGPROPID_SupportsMTClean;
}
[ObsoleteAttribute("This API is no longer supported by Visual Studio.")]
[FlagsAttribute]
public enum Microsoft.VisualStudio.Shell.Interop.__VSBSLFLAGS : Enum {
    public int value__;
    public static __VSBSLFLAGS VSBSLFLAGS_None;
    public static __VSBSLFLAGS VSBSLFLAGS_NotCancelable;
    public static __VSBSLFLAGS VSBSLFLAGS_LoadBuildDependencies;
    public static __VSBSLFLAGS VSBSLFLAGS_ExpandProjectOnLoad;
    public static __VSBSLFLAGS VSBSLFLAGS_SelectProjectOnLoad;
    public static __VSBSLFLAGS VSBSLFLAGS_LoadAllPendingProjects;
}
public enum Microsoft.VisualStudio.Shell.Interop.__VSCALLBROWSERMODE : Enum {
    public int value__;
    public static __VSCALLBROWSERMODE CBM_CALLSTO;
    public static __VSCALLBROWSERMODE CBM_CALLSTO_NEWWINDOW;
    public static __VSCALLBROWSERMODE CBM_CALLSFROM;
    public static __VSCALLBROWSERMODE CBM_CALLSFROM_NEWWINDOW;
}
[FlagsAttribute]
public enum Microsoft.VisualStudio.Shell.Interop.__VSCFGFLAGS : Enum {
    public int value__;
    public static __VSCFGFLAGS CFGFLAG_CfgsAreNotBrowsable;
    public static __VSCFGFLAGS CFGFLAG_CfgsUseIndependentPages;
}
public enum Microsoft.VisualStudio.Shell.Interop.__VSCFGPROPID : Enum {
    public int value__;
    public static __VSCFGPROPID VSCFGPROPID_LAST;
    public static __VSCFGPROPID VSCFGPROPID_Reserved1;
    public static __VSCFGPROPID VSCFGPROPID_Reserved2;
    public static __VSCFGPROPID VSCFGPROPID_SupportsCfgAdd;
    public static __VSCFGPROPID VSCFGPROPID_SupportsCfgDelete;
    public static __VSCFGPROPID VSCFGPROPID_SupportsCfgRename;
    public static __VSCFGPROPID VSCFGPROPID_SupportsPlatformAdd;
    public static __VSCFGPROPID VSCFGPROPID_SupportsPlatformDelete;
    public static __VSCFGPROPID VSCFGPROPID_SupportsPrivateCfgs;
    public static __VSCFGPROPID VSCFGPROPID_IntrinsicExtenderCATID;
    public static __VSCFGPROPID VSCFGPROPID_FIRST;
}
public enum Microsoft.VisualStudio.Shell.Interop.__VSCFGPROPID2 : Enum {
    public int value__;
    public static __VSCFGPROPID2 VSCFGPROPID_HideConfigurations;
    public static __VSCFGPROPID2 VSCFGPROPID_FIRST2;
}
public enum Microsoft.VisualStudio.Shell.Interop.__VSCOLORASPECT : Enum {
    public int value__;
    public static __VSCOLORASPECT CA_FOREGROUND;
    public static __VSCOLORASPECT CA_BACKGROUND;
}
public enum Microsoft.VisualStudio.Shell.Interop.__VSCOLORTYPE : Enum {
    public int value__;
    public static __VSCOLORTYPE CT_INVALID;
    public static __VSCOLORTYPE CT_RAW;
    public static __VSCOLORTYPE CT_COLORINDEX;
    public static __VSCOLORTYPE CT_SYSCOLOR;
    public static __VSCOLORTYPE CT_VSCOLOR;
    public static __VSCOLORTYPE CT_AUTOMATIC;
    public static __VSCOLORTYPE CT_TRACK_FOREGROUND;
    public static __VSCOLORTYPE CT_TRACK_BACKGROUND;
}
public enum Microsoft.VisualStudio.Shell.Interop.__VSCOMHIEROPTIONS : Enum {
    public int value__;
    public static __VSCOMHIEROPTIONS COMHIEROPT_RootHierarchyOnly;
    public static __VSCOMHIEROPTIONS COMHIEROPT_AllowHiddenRoot;
}
[FlagsAttribute]
public enum Microsoft.VisualStudio.Shell.Interop.__VSCOMPENUMEXFLAGS : Enum {
    public int value__;
    public static __VSCOMPENUMEXFLAGS VSCOMPENUM_IncludeRuntimeInfo;
}
[FlagsAttribute]
public enum Microsoft.VisualStudio.Shell.Interop.__VSCOMPSELFLAGS : Enum {
    public int value__;
    public static __VSCOMPSELFLAGS VSCOMSEL_MultiSelectMode;
    public static __VSCOMPSELFLAGS VSCOMSEL_ShowOnlySpecifiedTab;
    public static __VSCOMPSELFLAGS VSCOMSEL_HideCOMPlusTab;
    public static __VSCOMPSELFLAGS VSCOMSEL_HideCOMClassicTab;
    public static __VSCOMPSELFLAGS VSCOMSEL_HideSolutionTab;
    public static __VSCOMPSELFLAGS VSCOMSEL_HideBrowseButton;
    public static __VSCOMPSELFLAGS VSCOMSEL_IgnoreMachineName;
}
[FlagsAttribute]
public enum Microsoft.VisualStudio.Shell.Interop.__VSCOMPSELFLAGS2 : Enum {
    public int value__;
    public static __VSCOMPSELFLAGS2 VSCOMSEL2_MultiSelectMode;
    public static __VSCOMPSELFLAGS2 VSCOMSEL2_ShowSelectedList;
    public static __VSCOMPSELFLAGS2 VSCOMSEL2_ShowAllPagesOfSpecifiedTypes;
}
public enum Microsoft.VisualStudio.Shell.Interop.__VSCREATEDOCWIN : Enum {
    public int value__;
    public static __VSCREATEDOCWIN CDW_RDTFLAGS_MASK;
    public static __VSCREATEDOCWIN CDW_fDockable;
    public static __VSCREATEDOCWIN CDW_fAltDocData;
    public static __VSCREATEDOCWIN CDW_fCreateNewWindow;
}
[FlagsAttribute]
public enum Microsoft.VisualStudio.Shell.Interop.__VSCREATEEDITORFLAGS : Enum {
    public int value__;
    public static __VSCREATEEDITORFLAGS CEF_CLONEFILE;
    public static __VSCREATEEDITORFLAGS CEF_OPENFILE;
    public static __VSCREATEEDITORFLAGS CEF_SILENT;
    public static __VSCREATEEDITORFLAGS CEF_OPENASNEW;
}
[FlagsAttribute]
public enum Microsoft.VisualStudio.Shell.Interop.__VSCREATEEDITORFLAGS2 : Enum {
    public int value__;
    public static __VSCREATEEDITORFLAGS2 CEF_OPENSPECIFIC;
}
[FlagsAttribute]
public enum Microsoft.VisualStudio.Shell.Interop.__VSCREATEEDITORFLAGS3 : Enum {
    public int value__;
    public static __VSCREATEEDITORFLAGS3 CEF_SKIPDEFERRAL;
}
[FlagsAttribute]
public enum Microsoft.VisualStudio.Shell.Interop.__VSCREATENEWPROJVIADLGEXFLAGS : Enum {
    public int value__;
    public static __VSCREATENEWPROJVIADLGEXFLAGS VNPVDE_ALWAYSNEWSOLUTION;
    public static __VSCREATENEWPROJVIADLGEXFLAGS VNPVDE_OVERRIDEBROWSEBUTTON;
    public static __VSCREATENEWPROJVIADLGEXFLAGS VNPVDE_ALWAYSADDTOSOLUTION;
    public static __VSCREATENEWPROJVIADLGEXFLAGS VNPVDE_ADDNESTEDTOSELECTION;
    public static __VSCREATENEWPROJVIADLGEXFLAGS VNPVDE_USENEWWEBSITEDLG;
}
[FlagsAttribute]
public enum Microsoft.VisualStudio.Shell.Interop.__VSCREATENEWPROJVIADLGEXFLAGS2 : Enum {
    public int value__;
    public static __VSCREATENEWPROJVIADLGEXFLAGS2 VNPVDE_NOONLINETEMPLATES;
    public static __VSCREATENEWPROJVIADLGEXFLAGS2 VNPVDE_NORECENTTEMPLATES;
    public static __VSCREATENEWPROJVIADLGEXFLAGS2 VNPVDE_NOFRAMEWORKSELECTION;
    public static __VSCREATENEWPROJVIADLGEXFLAGS2 VNPVDE_HIDESOLUTIONNAME;
}
[FlagsAttribute]
public enum Microsoft.VisualStudio.Shell.Interop.__VSCREATEPROJFLAGS : Enum {
    public int value__;
    public static __VSCREATEPROJFLAGS CPF_CLONEFILE;
    public static __VSCREATEPROJFLAGS CPF_OPENFILE;
    public static __VSCREATEPROJFLAGS CPF_OPENDIRECTORY;
    public static __VSCREATEPROJFLAGS CPF_SILENT;
    public static __VSCREATEPROJFLAGS CPF_OVERWRITE;
    public static __VSCREATEPROJFLAGS CPF_NOTINSLNEXPLR;
    public static __VSCREATEPROJFLAGS CPF_NONLOCALSTORE;
}
[FlagsAttribute]
public enum Microsoft.VisualStudio.Shell.Interop.__VSCREATEPROJFLAGS2 : Enum {
    public int value__;
    public static __VSCREATEPROJFLAGS2 CPF_DEFERREDSAVE;
    [ObsoleteAttribute("Open Solution from SourceControl feature is removed")]
public static __VSCREATEPROJFLAGS2 CPF_OPEN_ASYNCHRONOUSLY;
    public static __VSCREATEPROJFLAGS2 CPF_OPEN_STANDALONE;
}
[FlagsAttribute]
public enum Microsoft.VisualStudio.Shell.Interop.__VSCREATEPROJFLAGS3 : Enum {
    public int value__;
    public static __VSCREATEPROJFLAGS3 CPF_SKIP_SOLUTION_ACCESS_CHECK;
}
[FlagsAttribute]
public enum Microsoft.VisualStudio.Shell.Interop.__VSCREATESOLUTIONFLAGS : Enum {
    public int value__;
    public static __VSCREATESOLUTIONFLAGS CSF_SILENT;
    public static __VSCREATESOLUTIONFLAGS CSF_OVERWRITE;
    public static __VSCREATESOLUTIONFLAGS CSF_TEMPORARY;
    public static __VSCREATESOLUTIONFLAGS CSF_DELAYNOTIFY;
}
[FlagsAttribute]
public enum Microsoft.VisualStudio.Shell.Interop.__VSCREATESOLUTIONFLAGS2 : Enum {
    public int value__;
    public static __VSCREATESOLUTIONFLAGS2 CSF_HIDESOLUTIONNODEALWAYS;
    public static __VSCREATESOLUTIONFLAGS2 CSF_DEFERREDSAVESOLUTION;
}
[FlagsAttribute]
public enum Microsoft.VisualStudio.Shell.Interop.__VSCREATESOLUTIONFLAGS3 : Enum {
    public int value__;
    public static __VSCREATESOLUTIONFLAGS3 CSF_SKIP_SOLUTION_ACCESS_CHECK;
}
public enum Microsoft.VisualStudio.Shell.Interop.__VSCREATETOOLWIN : Enum {
    public int value__;
    public static __VSCREATETOOLWIN CTW_RESERVED_MASK;
    public static __VSCREATETOOLWIN CTW_fInitNew;
    public static __VSCREATETOOLWIN CTW_fActivateWithProject;
    public static __VSCREATETOOLWIN CTW_fActivateWithDocument;
    public static __VSCREATETOOLWIN CTW_fForceCreate;
    public static __VSCREATETOOLWIN CTW_fHasBorder;
    public static __VSCREATETOOLWIN CTW_fMultiInstance;
    public static __VSCREATETOOLWIN CTW_fToolbarHost;
}
public enum Microsoft.VisualStudio.Shell.Interop.__VSCREATETOOLWIN2 : Enum {
    public int value__;
    public static __VSCREATETOOLWIN2 CTW_fDocumentLikeTool;
}
public enum Microsoft.VisualStudio.Shell.Interop.__VSCREATEWEBBROWSER : Enum {
    public int value__;
    public static __VSCREATEWEBBROWSER VSCWB_AutoShow;
    public static __VSCREATEWEBBROWSER VSCWB_AddToMRU;
    public static __VSCREATEWEBBROWSER VSCWB_ReuseExisting;
    public static __VSCREATEWEBBROWSER VSCWB_ForceNew;
    public static __VSCREATEWEBBROWSER VSCWB_FrameMdiChild;
    public static __VSCREATEWEBBROWSER VSCWB_FrameFloat;
    public static __VSCREATEWEBBROWSER VSCWB_FrameDock;
    public static __VSCREATEWEBBROWSER VSCWB_StartHome;
    public static __VSCREATEWEBBROWSER VSCWB_StartSearch;
    public static __VSCREATEWEBBROWSER VSCWB_StartCustom;
    public static __VSCREATEWEBBROWSER VSCWB_NoHistory;
    public static __VSCREATEWEBBROWSER VSCWB_NoReadCache;
    public static __VSCREATEWEBBROWSER VSCWB_NoWriteToCache;
    public static __VSCREATEWEBBROWSER VSCWB_AllowAutosearch;
    public static __VSCREATEWEBBROWSER VSCWB_OptionNoDocProps;
    public static __VSCREATEWEBBROWSER VSCWB_OptionShowDocProps;
    public static __VSCREATEWEBBROWSER VSCWB_OptionCustomDocProps;
    public static __VSCREATEWEBBROWSER VSCWB_OptionDisableFind;
    public static __VSCREATEWEBBROWSER VSCWB_OptionDisableDockable;
    public static __VSCREATEWEBBROWSER VSCWB_OptionDisableStatusBar;
    public static __VSCREATEWEBBROWSER VSCWB_StartURLMask;
    public static __VSCREATEWEBBROWSER VSCWB_NavOptionMask;
    public static __VSCREATEWEBBROWSER VSCWB_OptionsMask;
}
public enum Microsoft.VisualStudio.Shell.Interop.__VSCREATEWEBBROWSER2 : Enum {
    public int value__;
    public static __VSCREATEWEBBROWSER2 VSCWB_NoHistoryThisPage;
    public static __VSCREATEWEBBROWSER2 VSCWB_NavOptionMask2;
}
public enum Microsoft.VisualStudio.Shell.Interop.__VSCURSORTYPE : Enum {
    public int value__;
    public static __VSCURSORTYPE VSCURSOR_APPSTARTING;
    public static __VSCURSORTYPE VSCURSOR_COLUMNSPLIT_EW;
    public static __VSCURSORTYPE VSCURSOR_COLUMNSPLIT_NS;
    public static __VSCURSORTYPE VSCURSOR_CONTROL_COPY;
    public static __VSCURSORTYPE VSCURSOR_CONTROL_DELETE;
    public static __VSCURSORTYPE VSCURSOR_CONTROL_MOVE;
    public static __VSCURSORTYPE VSCURSOR_CROSS;
    public static __VSCURSORTYPE VSCURSOR_DRAGDOCUMENT_MOVE;
    public static __VSCURSORTYPE VSCURSOR_DRAGDOCUMENT_NOEFFECT;
    public static __VSCURSORTYPE VSCURSOR_DRAGSCRAP_COPY;
    public static __VSCURSORTYPE VSCURSOR_DRAGSCRAP_MOVE;
    public static __VSCURSORTYPE VSCURSOR_DRAGSCRAP_SCROLL;
    public static __VSCURSORTYPE VSCURSOR_HAND;
    public static __VSCURSORTYPE VSCURSOR_IBEAM;
    public static __VSCURSORTYPE VSCURSOR_ISEARCH;
    public static __VSCURSORTYPE VSCURSOR_ISEARCH_UP;
    public static __VSCURSORTYPE VSCURSOR_MACRO_RECORD_NO;
    public static __VSCURSORTYPE VSCURSOR_NO;
    public static __VSCURSORTYPE VSCURSOR_NOMOVE_2D;
    public static __VSCURSORTYPE VSCURSOR_NOMOVE_HORIZ;
    public static __VSCURSORTYPE VSCURSOR_NOMOVE_VERT;
    public static __VSCURSORTYPE VSCURSOR_PAN_EAST;
    public static __VSCURSORTYPE VSCURSOR_PAN_NE;
    public static __VSCURSORTYPE VSCURSOR_PAN_NORTH;
    public static __VSCURSORTYPE VSCURSOR_PAN_NW;
    public static __VSCURSORTYPE VSCURSOR_PAN_SE;
    public static __VSCURSORTYPE VSCURSOR_PAN_SOUTH;
    public static __VSCURSORTYPE VSCURSOR_PAN_SW;
    public static __VSCURSORTYPE VSCURSOR_PAN_WEST;
    public static __VSCURSORTYPE VSCURSOR_POINTER;
    public static __VSCURSORTYPE VSCURSOR_POINTER_REVERSE;
    public static __VSCURSORTYPE VSCURSOR_SIZE_NS;
    public static __VSCURSORTYPE VSCURSOR_SIZE_EW;
    public static __VSCURSORTYPE VSCURSOR_SIZE_NWSE;
    public static __VSCURSORTYPE VSCURSOR_SIZE_NESW;
    public static __VSCURSORTYPE VSCURSOR_SIZE_ALL;
    public static __VSCURSORTYPE VSCURSOR_SPLIT_EW;
    public static __VSCURSORTYPE VSCURSOR_SPLIT_NS;
    public static __VSCURSORTYPE VSCURSOR_UPARROW;
    public static __VSCURSORTYPE VSCURSOR_WAIT;
}
[FlagsAttribute]
public enum Microsoft.VisualStudio.Shell.Interop.__VSDBGLAUNCHFLAGS : Enum {
    public int value__;
    public static __VSDBGLAUNCHFLAGS DBGLAUNCH_Silent;
    public static __VSDBGLAUNCHFLAGS DBGLAUNCH_LocalDeploy;
    public static __VSDBGLAUNCHFLAGS DBGLAUNCH_NoDebug;
    public static __VSDBGLAUNCHFLAGS DBGLAUNCH_DetachOnStop;
    public static __VSDBGLAUNCHFLAGS DBGLAUNCH_Selected;
    public static __VSDBGLAUNCHFLAGS DBGLAUNCH_StopDebuggingOnEnd;
    public static __VSDBGLAUNCHFLAGS DBGLAUNCH_WaitForAttachComplete;
}
public enum Microsoft.VisualStudio.Shell.Interop.__VSDBGLAUNCHFLAGS120 : Enum {
    public int value__;
    public static __VSDBGLAUNCHFLAGS120 DBGLAUNCH_ALLOW_EVENTS_AFTER_STOPPED;
    public static __VSDBGLAUNCHFLAGS120 DBGLAUNCH_FORCE_32BIT_DEBUG;
    public static __VSDBGLAUNCHFLAGS120 DBGLAUNCH_FORCE_64BIT_DEBUG;
}
public enum Microsoft.VisualStudio.Shell.Interop.__VSDBGLAUNCHFLAGS140 : Enum {
    public int value__;
    public static __VSDBGLAUNCHFLAGS140 DBGLAUNCH_ContainsStartupTask;
    public static __VSDBGLAUNCHFLAGS140 DBGLAUNCH_Profiling;
}
public enum Microsoft.VisualStudio.Shell.Interop.__VSDBGLAUNCHFLAGS142 : Enum {
    public int value__;
    public static __VSDBGLAUNCHFLAGS142 DBGLAUNCH_NoTerminateOnImmediateLaunch;
}
public enum Microsoft.VisualStudio.Shell.Interop.__VSDBGLAUNCHFLAGS155 : Enum {
    public int value__;
    public static __VSDBGLAUNCHFLAGS155 DBGLAUNCH_ParallelLaunch;
}
public enum Microsoft.VisualStudio.Shell.Interop.__VSDBGLAUNCHFLAGS158 : Enum {
    public int value__;
    public static __VSDBGLAUNCHFLAGS158 DBGLAUNCH_ForcePseudoRemoteDebug;
    public static __VSDBGLAUNCHFLAGS158 DBGLAUNCH_IntegratedConsole;
}
public enum Microsoft.VisualStudio.Shell.Interop.__VSDBGLAUNCHFLAGS160 : Enum {
    public int value__;
    public static __VSDBGLAUNCHFLAGS160 DBGLAUNCH_BypassAttachSecurity;
}
[FlagsAttribute]
public enum Microsoft.VisualStudio.Shell.Interop.__VSDBGLAUNCHFLAGS175 : Enum {
    public int value__;
    public static __VSDBGLAUNCHFLAGS175 DBGLAUNCH_UseIntegratedTerminalService;
}
[FlagsAttribute]
public enum Microsoft.VisualStudio.Shell.Interop.__VSDBGLAUNCHFLAGS2 : Enum {
    public int value__;
    public static __VSDBGLAUNCHFLAGS2 DBGLAUNCH_MergeEnv;
    public static __VSDBGLAUNCHFLAGS2 DBGLAUNCH_DesignTimeExprEval;
    public static __VSDBGLAUNCHFLAGS2 DBGLAUNCH_StopAtEntryPoint;
    public static __VSDBGLAUNCHFLAGS2 DBGLAUNCH_CannotDebugAlone;
}
[FlagsAttribute]
public enum Microsoft.VisualStudio.Shell.Interop.__VSDBGLAUNCHFLAGS3 : Enum {
    public int value__;
    public static __VSDBGLAUNCHFLAGS3 DBGLAUNCH_WaitForEvent;
}
[FlagsAttribute]
public enum Microsoft.VisualStudio.Shell.Interop.__VSDBGLAUNCHFLAGS4 : Enum {
    public int value__;
    public static __VSDBGLAUNCHFLAGS4 DBGLAUNCH_UseDefaultBrowser;
}
[FlagsAttribute]
public enum Microsoft.VisualStudio.Shell.Interop.__VSDBGLAUNCHFLAGS5 : Enum {
    public int value__;
    public static __VSDBGLAUNCHFLAGS5 DBGLAUNCH_PrepForDebug;
    public static __VSDBGLAUNCHFLAGS5 DBGLAUNCH_TerminateOnStop;
    public static __VSDBGLAUNCHFLAGS5 DBGLAUNCH_BreakOneProcess;
}
[FlagsAttribute]
public enum Microsoft.VisualStudio.Shell.Interop.__VSDBGLAUNCHFLAGS6 : Enum {
    public int value__;
    public static __VSDBGLAUNCHFLAGS6 DBGLAUNCH_BlockCredentialsDialog;
    public static __VSDBGLAUNCHFLAGS6 DBGLAUNCH_BlockWWSDialog;
    public static __VSDBGLAUNCHFLAGS6 DBGLAUNCH_StartInSimulator;
}
public enum Microsoft.VisualStudio.Shell.Interop.__VSDELETEHANDLEROPTIONS : Enum {
    public int value__;
    public static __VSDELETEHANDLEROPTIONS DHO_NONE;
    public static __VSDELETEHANDLEROPTIONS DHO_SUPPRESS_UI;
}
public enum Microsoft.VisualStudio.Shell.Interop.__VSDELETEITEMOPERATION : Enum {
    public int value__;
    public static __VSDELETEITEMOPERATION DELITEMOP_DeleteFromStorage;
    public static __VSDELETEITEMOPERATION DELITEMOP_RemoveFromProject;
}
public enum Microsoft.VisualStudio.Shell.Interop.__VSDESIGNER_HIDDENCODEGENERATION : Enum {
    public int value__;
    public static __VSDESIGNER_HIDDENCODEGENERATION VSDHCG_Declarations;
    public static __VSDESIGNER_HIDDENCODEGENERATION VSDHCG_InitMethods;
    public static __VSDESIGNER_HIDDENCODEGENERATION VSDHCG_EventMethods;
}
public enum Microsoft.VisualStudio.Shell.Interop.__VSDEVELOPERLICENSINGCOMMANDS : Enum {
    public int value__;
    public static __VSDEVELOPERLICENSINGCOMMANDS CMDID_AcquireDeveloperLicense;
}
public enum Microsoft.VisualStudio.Shell.Interop.__VSDIFFSERVICEOPTIONS : Enum {
    public int value__;
    public static __VSDIFFSERVICEOPTIONS VSDIFFOPT_DoNotShow;
    public static __VSDIFFSERVICEOPTIONS VSDIFFOPT_DetectBinaryFiles;
    public static __VSDIFFSERVICEOPTIONS VSDIFFOPT_PromptForEncodingForLeft;
    public static __VSDIFFSERVICEOPTIONS VSDIFFOPT_PromptForEncodingForRight;
    public static __VSDIFFSERVICEOPTIONS VSDIFFOPT_LeftFileIsTemporary;
    public static __VSDIFFSERVICEOPTIONS VSDIFFOPT_RightFileIsTemporary;
}
[FlagsAttribute]
public enum Microsoft.VisualStudio.Shell.Interop.__VSDIRFLAGS : Enum {
    public int value__;
    public static __VSDIRFLAGS VSDIRFLAG_NonLocalTemplate;
    public static __VSDIRFLAGS VSDIRFLAG_BlankSolution;
    public static __VSDIRFLAGS VSDIRFLAG_DisableBrowseButton;
    public static __VSDIRFLAGS VSDIRFLAG_DontAddDefExtension;
    public static __VSDIRFLAGS VSDIRFLAG_DisableLocationField;
    public static __VSDIRFLAGS VSDIRFLAG_DontInitNameField;
    public static __VSDIRFLAGS VSDIRFLAG_DisableNameField;
}
[FlagsAttribute]
public enum Microsoft.VisualStudio.Shell.Interop.__VSDIRFLAGS2 : Enum {
    public int value__;
    public static __VSDIRFLAGS2 VSDIRFLAG_RequiresNewFolder;
    public static __VSDIRFLAGS2 VSDIRFLAG_SolutionTemplate;
    public static __VSDIRFLAGS2 VSDIRFLAG_DeferredSaveProject;
    public static __VSDIRFLAGS2 VSDIRFLAG_DontShowNameLocInfo;
    public static __VSDIRFLAGS2 VSDIRFLAG_EnableMasterPage;
    public static __VSDIRFLAGS2 VSDIRFLAG_EnableCodeSeparation;
    public static __VSDIRFLAGS2 VSDIRFLAG_EnableLangDropdown;
}
public enum Microsoft.VisualStudio.Shell.Interop.__VSDOCINPROJECT : Enum {
    public int value__;
    public static __VSDOCINPROJECT DOCINPROJ_DocNotInProject;
    public static __VSDOCINPROJECT DOCINPROJ_DocInProject;
    public static __VSDOCINPROJECT DOCINPROJ_DocInExtFilesProject;
}
public enum Microsoft.VisualStudio.Shell.Interop.__VSDOCUMENTPRIORITY2 : Enum {
    public int value__;
    public static __VSDOCUMENTPRIORITY2 DP2_Intrinsic;
    public static __VSDOCUMENTPRIORITY2 DP2_Standard;
    public static __VSDOCUMENTPRIORITY2 DP2_IndirectMember;
    public static __VSDOCUMENTPRIORITY2 DP2_NonMember;
    public static __VSDOCUMENTPRIORITY2 DP2_CanAddAsNonMember;
    public static __VSDOCUMENTPRIORITY2 DP2_External;
    public static __VSDOCUMENTPRIORITY2 DP2_CanAddAsExternal;
    public static __VSDOCUMENTPRIORITY2 DP2_Unsupported;
}
public enum Microsoft.VisualStudio.Shell.Interop.__VSDPIMODE : Enum {
    public int value__;
    public static __VSDPIMODE VSDM_Unaware;
    public static __VSDPIMODE VSDM_System;
    public static __VSDPIMODE VSDM_PerMonitor;
}
public enum Microsoft.VisualStudio.Shell.Interop.__VSDPLSVCSINPROJECT : Enum {
    public int value__;
    public static __VSDPLSVCSINPROJECT VSDPLSVCSINPROJECT_WEB;
    public static __VSDPLSVCSINPROJECT VSDPLSVCSINPROJECT_SERVER;
    public static __VSDPLSVCSINPROJECT VSDPLSVCSINPROJECT_MTS;
}
public enum Microsoft.VisualStudio.Shell.Interop.__VSEDITORCREATEDOCWIN : Enum {
    public int value__;
    public static __VSEDITORCREATEDOCWIN ECDW_UserCanceled;
    public static __VSEDITORCREATEDOCWIN ECDW_CDWFLAGS_MASK;
}
public enum Microsoft.VisualStudio.Shell.Interop.__VSEDITORTRUSTLEVEL : Enum {
    public int value__;
    public static __VSEDITORTRUSTLEVEL ETL_NeverTrusted;
    public static __VSEDITORTRUSTLEVEL ETL_AlwaysTrusted;
    public static __VSEDITORTRUSTLEVEL ETL_HasUntrustedLogicalViews;
}
public enum Microsoft.VisualStudio.Shell.Interop.__VSEDT_STYLE : Enum {
    public int value__;
    public static __VSEDT_STYLE VSEDT_Reserved1;
}
public enum Microsoft.VisualStudio.Shell.Interop.__VSEHI : Enum {
    public int value__;
    public static __VSEHI VSEHI_Leaf;
    public static __VSEHI VSEHI_Branch;
    public static __VSEHI VSEHI_Nest;
    public static __VSEHI VSEHI_AllowSideEffects;
    public static __VSEHI VSEHI_DataConn;
    public static __VSEHI VSEHI_OmitHier;
}
public enum Microsoft.VisualStudio.Shell.Interop.__VsEnclosingScopes : Enum {
    public int value__;
    public static __VsEnclosingScopes EnclosingScopes_None;
    public static __VsEnclosingScopes EnclosingScopes_Configuration;
    public static __VsEnclosingScopes EnclosingScopes_UserSettings;
}
public enum Microsoft.VisualStudio.Shell.Interop.__VsEnclosingScopes2 : Enum {
    public int value__;
    public static __VsEnclosingScopes2 EnclosingScopes_Remote;
}
[FlagsAttribute]
public enum Microsoft.VisualStudio.Shell.Interop.__VSENUMPROJFLAGS : Enum {
    public int value__;
    public static __VSENUMPROJFLAGS EPF_LOADEDINSOLUTION;
    public static __VSENUMPROJFLAGS EPF_UNLOADEDINSOLUTION;
    public static __VSENUMPROJFLAGS EPF_ALLINSOLUTION;
    public static __VSENUMPROJFLAGS EPF_MATCHTYPE;
    public static __VSENUMPROJFLAGS EPF_VIRTUALVISIBLEPROJECT;
    public static __VSENUMPROJFLAGS EPF_VIRTUALNONVISIBLEPROJECT;
    public static __VSENUMPROJFLAGS EPF_ALLVIRTUAL;
    public static __VSENUMPROJFLAGS EPF_ALLPROJECTS;
}
[FlagsAttribute]
public enum Microsoft.VisualStudio.Shell.Interop.__VSENUMPROJFLAGS2 : Enum {
    public int value__;
    public static __VSENUMPROJFLAGS2 EPF_FAULTED;
    public static __VSENUMPROJFLAGS2 EPF_NOTFAULTED;
    public static __VSENUMPROJFLAGS2 EPF_MATCHUNLOADEDTYPE;
    public static __VSENUMPROJFLAGS2 EPF_PROVISIONED;
}
public enum Microsoft.VisualStudio.Shell.Interop.__VSERRORCATEGORY : Enum {
    public int value__;
    public static __VSERRORCATEGORY EC_ERROR;
    public static __VSERRORCATEGORY EC_WARNING;
    public static __VSERRORCATEGORY EC_MESSAGE;
}
public enum Microsoft.VisualStudio.Shell.Interop.__VsErrorType : Enum {
    public int value__;
    public static __VsErrorType VsErrorType_Error;
    public static __VsErrorType VsErrorType_Warning;
}
public enum Microsoft.VisualStudio.Shell.Interop.__VSFINDTOOLWIN : Enum {
    public int value__;
    public static __VSFINDTOOLWIN FTW_fForceCreate;
    public static __VSFINDTOOLWIN FTW_fFindFirst;
    public static __VSFINDTOOLWIN FTW_fFrameOnly;
}
public enum Microsoft.VisualStudio.Shell.Interop.__VSFORMATINDEX : Enum {
    public int value__;
    public static __VSFORMATINDEX VSFORMATINDEX_UTF8;
    public static __VSFORMATINDEX VSFORMATINDEX_MBCS;
    public static __VSFORMATINDEX VSFORMATINDEX_UNICODE;
}
public enum Microsoft.VisualStudio.Shell.Interop.__VSFPROPID : Enum {
    public int value__;
    public static __VSFPROPID VSFPROPID_NIL;
    public static __VSFPROPID VSFPROPID_LAST;
    public static __VSFPROPID VSFPROPID_Type;
    public static __VSFPROPID VSFPROPID_DocView;
    public static __VSFPROPID VSFPROPID_SPFrame;
    public static __VSFPROPID VSFPROPID_SPProjContext;
    public static __VSFPROPID VSFPROPID_Caption;
    public static __VSFPROPID VSFPROPID_WindowState;
    public static __VSFPROPID VSFPROPID_FrameMode;
    public static __VSFPROPID VSFPROPID_IsWindowTabbed;
    public static __VSFPROPID VSFPROPID_UserContext;
    public static __VSFPROPID VSFPROPID_ViewHelper;
    public static __VSFPROPID VSFPROPID_ShortCaption;
    public static __VSFPROPID VSFPROPID_WindowHelpKeyword;
    public static __VSFPROPID VSFPROPID_WindowHelpCmdText;
    public static __VSFPROPID VSFPROPID_DocCookie;
    public static __VSFPROPID VSFPROPID_OwnerCaption;
    public static __VSFPROPID VSFPROPID_EditorCaption;
    public static __VSFPROPID VSFPROPID_pszMkDocument;
    public static __VSFPROPID VSFPROPID_DocData;
    public static __VSFPROPID VSFPROPID_Hierarchy;
    public static __VSFPROPID VSFPROPID_ItemID;
    public static __VSFPROPID VSFPROPID_CmdUIGuid;
    public static __VSFPROPID VSFPROPID_CreateDocWinFlags;
    public static __VSFPROPID VSFPROPID_guidEditorType;
    public static __VSFPROPID VSFPROPID_pszPhysicalView;
    public static __VSFPROPID VSFPROPID_InheritKeyBindings;
    public static __VSFPROPID VSFPROPID_RDTDocData;
    public static __VSFPROPID VSFPROPID_AltDocData;
    public static __VSFPROPID VSFPROPID_GuidPersistenceSlot;
    public static __VSFPROPID VSFPROPID_GuidAutoActivate;
    public static __VSFPROPID VSFPROPID_CreateToolWinFlags;
    public static __VSFPROPID VSFPROPID_ExtWindowObject;
    public static __VSFPROPID VSFPROPID_MultiInstanceToolNum;
    public static __VSFPROPID VSFPROPID_BitmapResource;
    public static __VSFPROPID VSFPROPID_BitmapIndex;
    public static __VSFPROPID VSFPROPID_ToolbarHost;
    public static __VSFPROPID VSFPROPID_HideToolwinContainer;
    public static __VSFPROPID VSFPROPID_FIRST;
}
public enum Microsoft.VisualStudio.Shell.Interop.__VSFPROPID10 : Enum {
    public int value__;
    public static __VSFPROPID10 VSFPROPID_OverriddenGroupName;
}
public enum Microsoft.VisualStudio.Shell.Interop.__VSFPROPID11 : Enum {
    public int value__;
    public static __VSFPROPID11 VSFPROPID_IsSharedDocument;
    public static __VSFPROPID11 VSFPROPID_RelativePath;
}
public enum Microsoft.VisualStudio.Shell.Interop.__VSFPROPID12 : Enum {
    public int value__;
    public static __VSFPROPID12 VSFPROPID_LoadingTask;
    public static __VSFPROPID12 VSFPROPID_IsDocDataInitialized;
    public static __VSFPROPID12 VSFPROPID_IsDocViewInitialized;
}
public enum Microsoft.VisualStudio.Shell.Interop.__VSFPROPID2 : Enum {
    public int value__;
    public static __VSFPROPID2 VSFPROPID_OverrideDirtyState;
    public static __VSFPROPID2 VSFPROPID_OLEDocObjectDocument;
    public static __VSFPROPID2 VSFPROPID_ParentHwnd;
    public static __VSFPROPID2 VSFPROPID_ParentFrame;
    public static __VSFPROPID2 VSFPROPID_ToolWindowDocCookie;
}
public enum Microsoft.VisualStudio.Shell.Interop.__VSFPROPID3 : Enum {
    public int value__;
    public static __VSFPROPID3 VSFPROPID_MDIContainerID;
    public static __VSFPROPID3 VSFPROPID_NotifyOnActivate;
    public static __VSFPROPID3 VSFPROPID3_FIRST;
}
public enum Microsoft.VisualStudio.Shell.Interop.__VSFPROPID4 : Enum {
    public int value__;
    public static __VSFPROPID4 VSFPROPID_Icon;
    public static __VSFPROPID4 VSFPROPID_TabImage;
    public static __VSFPROPID4 VSFPROPID_Thumbnail;
    public static __VSFPROPID4 VSFPROPID_NavigationInterface;
    public static __VSFPROPID4 VSFPROPID_NextCloneID;
    public static __VSFPROPID4 VSFPROPID4_FIRST;
}
public enum Microsoft.VisualStudio.Shell.Interop.__VSFPROPID5 : Enum {
    public int value__;
    public static __VSFPROPID5 VSFPROPID_SearchHost;
    public static __VSFPROPID5 VSFPROPID_IsSearchEnabled;
    public static __VSFPROPID5 VSFPROPID_SearchPlacement;
    public static __VSFPROPID5 VSFPROPID_IsProvisional;
    public static __VSFPROPID5 VSFPROPID_IsPinned;
    public static __VSFPROPID5 VSFPROPID_DontAutoOpen;
    public static __VSFPROPID5 VSFPROPID_OverrideCaption;
    public static __VSFPROPID5 VSFPROPID_OverrideToolTip;
    public static __VSFPROPID5 VSFPROPID_ReplaceDocumentToolbars;
    public static __VSFPROPID5 VSFPROPID_NativeScrollbarThemeMode;
    public static __VSFPROPID5 VSFPROPID5_FIRST;
}
public enum Microsoft.VisualStudio.Shell.Interop.__VSFPROPID6 : Enum {
    public int value__;
    public static __VSFPROPID6 VSFPROPID_PendingInitialization;
    public static __VSFPROPID6 VSFPROPID_TabImageFlags;
    public static __VSFPROPID6 VSFPROPID6_FIRST;
}
public enum Microsoft.VisualStudio.Shell.Interop.__VSFPROPID7 : Enum {
    public int value__;
    public static __VSFPROPID7 VSFPROPID_InfoBarHost;
    public static __VSFPROPID7 VSFPROPID_ToolboxUser;
    public static __VSFPROPID7 VSFPROPID7_FIRST;
}
public enum Microsoft.VisualStudio.Shell.Interop.__VSFPROPID9 : Enum {
    public int value__;
    public static __VSFPROPID9 VSFPROPID_ContainingHwnd;
    public static __VSFPROPID9 VSFPROPID9_FIRST;
}
public enum Microsoft.VisualStudio.Shell.Interop.__VSFRAMEWORKASSEMBLYTYPE : Enum {
    public int value__;
    public static __VSFRAMEWORKASSEMBLYTYPE VSFRAMEWORKASSEMBLYTYPE_FRAMEWORK;
    public static __VSFRAMEWORKASSEMBLYTYPE VSFRAMEWORKASSEMBLYTYPE_EXTENSIONS;
    public static __VSFRAMEWORKASSEMBLYTYPE VSFRAMEWORKASSEMBLYTYPE_ALL;
}
public enum Microsoft.VisualStudio.Shell.Interop.__VSFRAMEWORKCOMPATIBILITY : Enum {
    public int value__;
    public static __VSFRAMEWORKCOMPATIBILITY VSFRAMEWORKCOMPATIBILITY_COMPATIBLE;
    public static __VSFRAMEWORKCOMPATIBILITY VSFRAMEWORKCOMPATIBILITY_INCOMPATIBLEIDENTITY;
    public static __VSFRAMEWORKCOMPATIBILITY VSFRAMEWORKCOMPATIBILITY_INCOMPATIBLEVERSION;
    public static __VSFRAMEWORKCOMPATIBILITY VSFRAMEWORKCOMPATIBILITY_INCOMPATIBLEPROFILE;
}
[FlagsAttribute]
public enum Microsoft.VisualStudio.Shell.Interop.__VSGETPROJFILESFLAGS : Enum {
    public int value__;
    public static __VSGETPROJFILESFLAGS GPFF_SKIPUNLOADEDPROJECTS;
}
[FlagsAttribute]
public enum Microsoft.VisualStudio.Shell.Interop.__VSGETPROJFILESFLAGS2 : Enum {
    public int value__;
    public static __VSGETPROJFILESFLAGS2 GPFF_LOADORDER;
}
[FlagsAttribute]
public enum Microsoft.VisualStudio.Shell.Interop.__VSGSIFLAGS : Enum {
    public int value__;
    public static __VSGSIFLAGS GSI_fOmitHierPtrs;
}
public enum Microsoft.VisualStudio.Shell.Interop.__VSHIERARCHYIMAGEASPECT : Enum {
    public int value__;
    public static __VSHIERARCHYIMAGEASPECT HIA_Icon;
    public static __VSHIERARCHYIMAGEASPECT HIA_OpenFolderIcon;
    public static __VSHIERARCHYIMAGEASPECT HIA_OverlayIcon;
    public static __VSHIERARCHYIMAGEASPECT HIA_StateIcon;
}
public enum Microsoft.VisualStudio.Shell.Interop.__VSHIERARCHYITEMSTATE : Enum {
    public int value__;
    public static __VSHIERARCHYITEMSTATE HIS_FIRST;
    public static __VSHIERARCHYITEMSTATE HIS_Selected;
    public static __VSHIERARCHYITEMSTATE HIS_CutHighlight;
    public static __VSHIERARCHYITEMSTATE HIS_Bold;
    public static __VSHIERARCHYITEMSTATE HIS_Expanded;
    public static __VSHIERARCHYITEMSTATE HIS_LAST;
}
public enum Microsoft.VisualStudio.Shell.Interop.__VSHIERARCHYMANIPULATIONSTATE : Enum {
    public int value__;
    public static __VSHIERARCHYMANIPULATIONSTATE HMS_Unspecified;
    public static __VSHIERARCHYMANIPULATIONSTATE HMS_System;
}
public enum Microsoft.VisualStudio.Shell.Interop.__VSHIERITEMATTRIBUTE : Enum {
    public int value__;
    public static __VSHIERITEMATTRIBUTE VSHIERITEMATTRIBUTE_Bold;
}
public enum Microsoft.VisualStudio.Shell.Interop.__VSHPROPID : Enum {
    public int value__;
    public static __VSHPROPID VSHPROPID_NIL;
    public static __VSHPROPID VSHPROPID_LAST;
    public static __VSHPROPID VSHPROPID_Parent;
    public static __VSHPROPID VSHPROPID_FirstChild;
    public static __VSHPROPID VSHPROPID_NextSibling;
    public static __VSHPROPID VSHPROPID_Root;
    public static __VSHPROPID VSHPROPID_TypeGuid;
    public static __VSHPROPID VSHPROPID_SaveName;
    public static __VSHPROPID VSHPROPID_Caption;
    public static __VSHPROPID VSHPROPID_IconImgList;
    public static __VSHPROPID VSHPROPID_IconIndex;
    public static __VSHPROPID VSHPROPID_Expandable;
    public static __VSHPROPID VSHPROPID_ExpandByDefault;
    public static __VSHPROPID VSHPROPID_ProjectName;
    public static __VSHPROPID VSHPROPID_Name;
    public static __VSHPROPID VSHPROPID_IconHandle;
    public static __VSHPROPID VSHPROPID_OpenFolderIconHandle;
    public static __VSHPROPID VSHPROPID_OpenFolderIconIndex;
    public static __VSHPROPID VSHPROPID_CmdUIGuid;
    public static __VSHPROPID VSHPROPID_SelContainer;
    public static __VSHPROPID VSHPROPID_BrowseObject;
    public static __VSHPROPID VSHPROPID_AltHierarchy;
    public static __VSHPROPID VSHPROPID_AltItemid;
    public static __VSHPROPID VSHPROPID_ProjectDir;
    public static __VSHPROPID VSHPROPID_SortPriority;
    public static __VSHPROPID VSHPROPID_UserContext;
    public static __VSHPROPID VSHPROPID_EditLabel;
    public static __VSHPROPID VSHPROPID_ExtObject;
    public static __VSHPROPID VSHPROPID_ExtSelectedItem;
    public static __VSHPROPID VSHPROPID_StateIconIndex;
    public static __VSHPROPID VSHPROPID_ProjectType;
    public static __VSHPROPID VSHPROPID_TypeName;
    public static __VSHPROPID VSHPROPID_ReloadableProjectFile;
    public static __VSHPROPID VSHPROPID_HandlesOwnReload;
    public static __VSHPROPID VSHPROPID_ParentHierarchy;
    public static __VSHPROPID VSHPROPID_ParentHierarchyItemid;
    public static __VSHPROPID VSHPROPID_ItemDocCookie;
    public static __VSHPROPID VSHPROPID_Expanded;
    public static __VSHPROPID VSHPROPID_ConfigurationProvider;
    public static __VSHPROPID VSHPROPID_ImplantHierarchy;
    public static __VSHPROPID VSHPROPID_OwnerKey;
    public static __VSHPROPID VSHPROPID_StartupServices;
    public static __VSHPROPID VSHPROPID_FirstVisibleChild;
    public static __VSHPROPID VSHPROPID_NextVisibleSibling;
    public static __VSHPROPID VSHPROPID_IsHiddenItem;
    public static __VSHPROPID VSHPROPID_IsNonMemberItem;
    public static __VSHPROPID VSHPROPID_IsNonLocalStorage;
    public static __VSHPROPID VSHPROPID_StorageType;
    public static __VSHPROPID VSHPROPID_ItemSubType;
    public static __VSHPROPID VSHPROPID_OverlayIconIndex;
    public static __VSHPROPID VSHPROPID_DefaultNamespace;
    public static __VSHPROPID VSHPROPID_IsNonSearchable;
    public static __VSHPROPID VSHPROPID_IsFindInFilesForegroundOnly;
    public static __VSHPROPID VSHPROPID_CanBuildFromMemory;
    public static __VSHPROPID VSHPROPID_PreferredLanguageSID;
    public static __VSHPROPID VSHPROPID_ShowProjInSolutionPage;
    public static __VSHPROPID VSHPROPID_AllowEditInRunMode;
    public static __VSHPROPID VSHPROPID_IsNewUnsavedItem;
    public static __VSHPROPID VSHPROPID_ShowOnlyItemCaption;
    public static __VSHPROPID VSHPROPID_ProjectIDGuid;
    public static __VSHPROPID VSHPROPID_DesignerVariableNaming;
    public static __VSHPROPID VSHPROPID_DesignerFunctionVisibility;
    public static __VSHPROPID VSHPROPID_HasEnumerationSideEffects;
    public static __VSHPROPID VSHPROPID_DefaultEnableBuildProjectCfg;
    public static __VSHPROPID VSHPROPID_DefaultEnableDeployProjectCfg;
    public static __VSHPROPID VSHPROPID_FIRST;
}
public enum Microsoft.VisualStudio.Shell.Interop.__VSHPROPID10 : Enum {
    public int value__;
    public static __VSHPROPID10 VSHPROPID_PreserveExpandCollapseState;
    public static __VSHPROPID10 VSHPROPID_FIRST10;
}
public enum Microsoft.VisualStudio.Shell.Interop.__VSHPROPID11 : Enum {
    public int value__;
    public static __VSHPROPID11 VSHPROPID_IsSupportedInCodespace;
    public static __VSHPROPID11 VSHPROPID_RemoteProjectIDGuid;
    public static __VSHPROPID11 VSHPROPID_FIRST11;
}
public enum Microsoft.VisualStudio.Shell.Interop.__VSHPROPID2 : Enum {
    public int value__;
    public static __VSHPROPID2 VSHPROPID_PropertyPagesCLSIDList;
    public static __VSHPROPID2 VSHPROPID_CfgPropertyPagesCLSIDList;
    public static __VSHPROPID2 VSHPROPID_ExtObjectCATID;
    public static __VSHPROPID2 VSHPROPID_BrowseObjectCATID;
    public static __VSHPROPID2 VSHPROPID_CfgBrowseObjectCATID;
    public static __VSHPROPID2 VSHPROPID_AddItemTemplatesGuid;
    public static __VSHPROPID2 VSHPROPID_ChildrenEnumerated;
    public static __VSHPROPID2 VSHPROPID_StatusBarClientText;
    public static __VSHPROPID2 VSHPROPID_DebuggeeProcessId;
    public static __VSHPROPID2 VSHPROPID_IsLinkFile;
    public static __VSHPROPID2 VSHPROPID_KeepAliveDocument;
    public static __VSHPROPID2 VSHPROPID_SupportsProjectDesigner;
    public static __VSHPROPID2 VSHPROPID_IntellisenseUnknown;
    public static __VSHPROPID2 VSHPROPID_IsUpgradeRequired;
    public static __VSHPROPID2 VSHPROPID_DesignerHiddenCodeGeneration;
    public static __VSHPROPID2 VSHPROPID_SuppressOutOfDateMessageOnBuild;
    public static __VSHPROPID2 VSHPROPID_Container;
    public static __VSHPROPID2 VSHPROPID_UseInnerHierarchyIconList;
    public static __VSHPROPID2 VSHPROPID_EnableDataSourceWindow;
    public static __VSHPROPID2 VSHPROPID_AppTitleBarTopHierarchyName;
    public static __VSHPROPID2 VSHPROPID_DebuggerSourcePaths;
    public static __VSHPROPID2 VSHPROPID_CategoryGuid;
    public static __VSHPROPID2 VSHPROPID_DisableApplicationSettings;
    public static __VSHPROPID2 VSHPROPID_ProjectDesignerEditor;
    public static __VSHPROPID2 VSHPROPID_PriorityPropertyPagesCLSIDList;
    public static __VSHPROPID2 VSHPROPID_NoDefaultNestedHierSorting;
    public static __VSHPROPID2 VSHPROPID_ExcludeFromExportItemTemplate;
    public static __VSHPROPID2 VSHPROPID_SupportedMyApplicationTypes;
    public static __VSHPROPID2 VSHPROPID_FIRST2;
}
public enum Microsoft.VisualStudio.Shell.Interop.__VSHPROPID3 : Enum {
    public int value__;
    public static __VSHPROPID3 VSHPROPID_TargetFrameworkVersion;
    public static __VSHPROPID3 VSHPROPID_WebReferenceSupported;
    public static __VSHPROPID3 VSHPROPID_ServiceReferenceSupported;
    public static __VSHPROPID3 VSHPROPID_SupportsHierarchicalUpdate;
    public static __VSHPROPID3 VSHPROPID_SupportsNTierDesigner;
    public static __VSHPROPID3 VSHPROPID_SupportsLinqOverDataSet;
    public static __VSHPROPID3 VSHPROPID_ProductBrandName;
    public static __VSHPROPID3 VSHPROPID_RefactorExtensions;
    public static __VSHPROPID3 VSHPROPID_IsDefaultNamespaceRefactorNotify;
    public static __VSHPROPID3 VSHPROPID_FIRST3;
}
public enum Microsoft.VisualStudio.Shell.Interop.__VSHPROPID4 : Enum {
    public int value__;
    public static __VSHPROPID4 VSHPROPID_TargetFrameworkMoniker;
    public static __VSHPROPID4 VSHPROPID_ExternalItem;
    public static __VSHPROPID4 VSHPROPID_SupportsAspNetIntegration;
    public static __VSHPROPID4 VSHPROPID_DesignTimeDependencies;
    public static __VSHPROPID4 VSHPROPID_BuildDependencies;
    public static __VSHPROPID4 VSHPROPID_BuildAction;
    public static __VSHPROPID4 VSHPROPID_DescriptiveName;
    public static __VSHPROPID4 VSHPROPID_AlwaysBuildOnDebugLaunch;
    public static __VSHPROPID4 VSHPROPID_FIRST4;
}
public enum Microsoft.VisualStudio.Shell.Interop.__VSHPROPID5 : Enum {
    public int value__;
    public static __VSHPROPID5 VSHPROPID_MinimumDesignTimeCompatVersion;
    public static __VSHPROPID5 VSHPROPID_ProvisionalViewingStatus;
    public static __VSHPROPID5 VSHPROPID_SupportedOutputTypes;
    public static __VSHPROPID5 VSHPROPID_TargetPlatformIdentifier;
    public static __VSHPROPID5 VSHPROPID_TargetPlatformVersion;
    public static __VSHPROPID5 VSHPROPID_TargetRuntime;
    public static __VSHPROPID5 VSHPROPID_AppContainer;
    public static __VSHPROPID5 VSHPROPID_OutputType;
    public static __VSHPROPID5 VSHPROPID_ReferenceManagerUser;
    public static __VSHPROPID5 VSHPROPID_ProjectUnloadStatus;
    [ObsoleteAttribute("This API is no longer supported by Visual Studio.")]
public static __VSHPROPID5 VSHPROPID_DemandLoadDependencies;
    public static __VSHPROPID5 VSHPROPID_IsFaulted;
    public static __VSHPROPID5 VSHPROPID_FaultMessage;
    public static __VSHPROPID5 VSHPROPID_ProjectCapabilities;
    public static __VSHPROPID5 VSHPROPID_RequiresReloadForExternalFileChange;
    public static __VSHPROPID5 VSHPROPID_ForceFrameworkRetarget;
    [ObsoleteAttribute("This API is no longer supported by Visual Studio.")]
public static __VSHPROPID5 VSHPROPID_IsProjectProvisioned;
    public static __VSHPROPID5 VSHPROPID_SupportsCrossRuntimeReferences;
    public static __VSHPROPID5 VSHPROPID_WinMDAssembly;
    public static __VSHPROPID5 VSHPROPID_MonikerSameAsPersistFile;
    public static __VSHPROPID5 VSHPROPID_IsPackagingProject;
    public static __VSHPROPID5 VSHPROPID_ProjectPropertiesDebugPageArg;
    public static __VSHPROPID5 VSHPROPID_FIRST5;
}
public enum Microsoft.VisualStudio.Shell.Interop.__VSHPROPID6 : Enum {
    public int value__;
    public static __VSHPROPID6 VSHPROPID_ConnectedServicesPersistence;
    public static __VSHPROPID6 VSHPROPID_ProjectRetargeting;
    public static __VSHPROPID6 VSHPROPID_ShowAllProjectFilesInProjectView;
    public static __VSHPROPID6 VSHPROPID_Subcaption;
    public static __VSHPROPID6 VSHPROPID_ScriptJmcProjectControl;
    public static __VSHPROPID6 VSHPROPID_NuGetPackageProjectTypeContext;
    public static __VSHPROPID6 VSHPROPID_RequiresLegacyManagedDebugEngine;
    public static __VSHPROPID6 VSHPROPID_CurrentTargetId;
    public static __VSHPROPID6 VSHPROPID_NewTargetId;
    public static __VSHPROPID6 VSHPROPID_FIRST6;
}
public enum Microsoft.VisualStudio.Shell.Interop.__VSHPROPID7 : Enum {
    public int value__;
    public static __VSHPROPID7 VSHPROPID_IsSharedItem;
    public static __VSHPROPID7 VSHPROPID_SharedItemContextHierarchy;
    public static __VSHPROPID7 VSHPROPID_ShortSubcaption;
    public static __VSHPROPID7 VSHPROPID_SharedItemsImportFullPaths;
    public static __VSHPROPID7 VSHPROPID_ProjectTreeCapabilities;
    public static __VSHPROPID7 VSHPROPID_DeploymentRelativePath;
    public static __VSHPROPID7 VSHPROPID_IsSharedFolder;
    public static __VSHPROPID7 VSHPROPID_OneAppCapabilities;
    public static __VSHPROPID7 VSHPROPID_MSBuildImportsStorage;
    public static __VSHPROPID7 VSHPROPID_SharedProjectHierarchy;
    public static __VSHPROPID7 VSHPROPID_SharedAssetsProject;
    public static __VSHPROPID7 VSHPROPID_IsSharedItemsImportFile;
    public static __VSHPROPID7 VSHPROPID_ExcludeFromMoveFileToProjectUI;
    public static __VSHPROPID7 VSHPROPID_CanBuildQuickCheck;
    public static __VSHPROPID7 VSHPROPID_CanDebugLaunchQuickCheck;
    public static __VSHPROPID7 VSHPROPID_CanDeployQuickCheck;
    public static __VSHPROPID7 VSHPROPID_FIRST7;
}
public enum Microsoft.VisualStudio.Shell.Interop.__VSHPROPID8 : Enum {
    public int value__;
    public static __VSHPROPID8 VSHPROPID_SupportsIconMonikers;
    public static __VSHPROPID8 VSHPROPID_IconMonikerGuid;
    public static __VSHPROPID8 VSHPROPID_IconMonikerId;
    public static __VSHPROPID8 VSHPROPID_OpenFolderIconMonikerGuid;
    public static __VSHPROPID8 VSHPROPID_OpenFolderIconMonikerId;
    public static __VSHPROPID8 VSHPROPID_IconMonikerImageList;
    public static __VSHPROPID8 VSHPROPID_SharedProjectReference;
    public static __VSHPROPID8 VSHPROPID_DiagHubPlatform;
    public static __VSHPROPID8 VSHPROPID_DiagHubPlatformVersion;
    public static __VSHPROPID8 VSHPROPID_DiagHubLanguage;
    public static __VSHPROPID8 VSHPROPID_DiagHubProjectTargetFactory;
    public static __VSHPROPID8 VSHPROPID_DiagHubProjectTarget;
    public static __VSHPROPID8 VSHPROPID_SolutionGuid;
    public static __VSHPROPID8 VSHPROPID_ActiveIntellisenseProjectContext;
    public static __VSHPROPID8 VSHPROPID_ProjectCapabilitiesChecker;
    public static __VSHPROPID8 VSHPROPID_ContainsStartupTask;
    public static __VSHPROPID8 VSHPROPID_FIRST8;
}
public enum Microsoft.VisualStudio.Shell.Interop.__VSHPROPID9 : Enum {
    public int value__;
    [ObsoleteAttribute("This API is no longer supported by Visual Studio.")]
public static __VSHPROPID9 VSHPROPID_IsDeferred;
    public static __VSHPROPID9 VSHPROPID_HasRunningOperation;
    public static __VSHPROPID9 VSHPROPID_FIRST9;
}
public enum Microsoft.VisualStudio.Shell.Interop.__VSIconSource : Enum {
    public int value__;
    public static __VSIconSource IS_Unknown;
    public static __VSIconSource IS_VisualStudio;
    public static __VSIconSource IS_OperatingSystem;
}
[FlagsAttribute]
public enum Microsoft.VisualStudio.Shell.Interop.__VSIDOFLAGS : Enum {
    public int value__;
    public static __VSIDOFLAGS IDO_ActivateIfOpen;
    public static __VSIDOFLAGS IDO_IgnoreLogicalView;
}
[FlagsAttribute]
public enum Microsoft.VisualStudio.Shell.Interop.__VSIDOFLAGS2 : Enum {
    public int value__;
    public static __VSIDOFLAGS2 IDO_IncludeUninitializedFrames;
}
[FlagsAttribute]
public enum Microsoft.VisualStudio.Shell.Interop.__VSIEIFLAGS : Enum {
    public int value__;
    public static __VSIEIFLAGS IEI_RDTFLAGS_MASK;
    public static __VSIEIFLAGS IEI_CREATEDOCWIN_MASK;
    public static __VSIEIFLAGS IEI_CREATENEWDOCWIN_MASK;
    public static __VSIEIFLAGS IEI_DoNotLoadDocData;
}
public enum Microsoft.VisualStudio.Shell.Interop.__VSLITETREEOPTS : Enum {
    public int value__;
    public static __VSLITETREEOPTS LT_ALLOWMULTISELECT;
    public static __VSLITETREEOPTS LT_ALLOWEDITLABELS;
}
public enum Microsoft.VisualStudio.Shell.Interop.__VSLITETREEOPTS2 : Enum {
    public int value__;
    public static __VSLITETREEOPTS2 LT_ENABLEEXPLORERTHEME;
}
public enum Microsoft.VisualStudio.Shell.Interop.__VSLOADUSEROPTS : Enum {
    public int value__;
    public static __VSLOADUSEROPTS LUO_OPENEDDSW;
}
public enum Microsoft.VisualStudio.Shell.Interop.__VsLocalRegistryRootHandle : Enum {
    public int value__;
    public static __VsLocalRegistryRootHandle RegHandle_Invalid;
    public static __VsLocalRegistryRootHandle RegHandle_CurrentUser;
    public static __VsLocalRegistryRootHandle RegHandle_LocalMachine;
}
public enum Microsoft.VisualStudio.Shell.Interop.__VsLocalRegistryType : Enum {
    public int value__;
    public static __VsLocalRegistryType RegType_UserSettings;
    public static __VsLocalRegistryType RegType_Configuration;
    public static __VsLocalRegistryType RegType_PrivateConfig;
    public static __VsLocalRegistryType RegType_SessionSettings;
    public static __VsLocalRegistryType RegType_NewUserSettings;
}
public enum Microsoft.VisualStudio.Shell.Interop.__VSMEINIT : Enum {
    public int value__;
    public static __VSMEINIT MD_ACCELSUPPORT;
    public static __VSMEINIT MD_VISIBLESUPPORT;
    public static __VSMEINIT MD_BOLDSUPPORT;
    public static __VSMEINIT MD_CONTEXTMENU;
    public static __VSMEINIT MD_RADIOCHECKSUPPORT;
    public static __VSMEINIT MD_COMMANDIDSUPPORT;
    public static __VSMEINIT MD_VIEWCODESUPPORT;
    public static __VSMEINIT MD_NOPROPERTIESSUPPORT;
    public static __VSMEINIT MD_TEXTLIMIT;
    public static __VSMEINIT MD_TOPLEVELSEPSUPPORT;
    public static __VSMEINIT MD_EDITIDSNOTEDITNAMES;
    public static __VSMEINIT MD_NAMELIMIT;
    public static __VSMEINIT MD_NOUNDOSUPPORT;
    public static __VSMEINIT MD_BOTTOMDOCKED;
    public static __VSMEINIT MD_BREAKSUPPORT;
    public static __VSMEINIT MD_RIGHTJUSTIFYSUPPORT;
}
public enum Microsoft.VisualStudio.Shell.Interop.__VSMEINIT2 : Enum {
    public int value__;
    public static __VSMEINIT2 MD_ITEMICONSUPPORT;
}
public enum Microsoft.VisualStudio.Shell.Interop.__VSMEPROPID : Enum {
    public int value__;
    public static __VSMEPROPID VSMEPROPID_FIRST;
    public static __VSMEPROPID VSMEPROPID_NAME;
    public static __VSMEPROPID VSMEPROPID_CAPTION;
    public static __VSMEPROPID VSMEPROPID_CHECKED;
    public static __VSMEPROPID VSMEPROPID_ENABLED;
    public static __VSMEPROPID VSMEPROPID_VISIBLE;
    public static __VSMEPROPID VSMEPROPID_BOLD;
    public static __VSMEPROPID VSMEPROPID_ACCEL;
    public static __VSMEPROPID VSMEPROPID_RADIOCHECK;
    public static __VSMEPROPID VSMEPROPID_EXTRAPROPS;
    public static __VSMEPROPID VSMEPROPID_BREAK;
    public static __VSMEPROPID VSMEPROPID_BARBREAK;
    public static __VSMEPROPID VSMEPROPID_RIGHTJUSTIFY;
    public static __VSMEPROPID VSMEPROPID_LAST;
}
public enum Microsoft.VisualStudio.Shell.Interop.__VSMEPROPID2 : Enum {
    public int value__;
    public static __VSMEPROPID2 VSMEPROPID_ICON;
    public static __VSMEPROPID2 VSMEPROPID_LAST2;
}
public enum Microsoft.VisualStudio.Shell.Interop.__VSMEUISTATE : Enum {
    public int value__;
    public static __VSMEUISTATE VSMEUISTATE_IDLE;
    public static __VSMEUISTATE VSMEUISTATE_LABELEDIT;
    public static __VSMEUISTATE VSMEUISTATE_ACCELEDIT;
    public static __VSMEUISTATE VSMEUISTATE_ACCELLIST;
}
public enum Microsoft.VisualStudio.Shell.Interop.__VSNativeScrollbarThemeMode : Enum {
    public int value__;
    public static __VSNativeScrollbarThemeMode NSTM_Undefined;
    public static __VSNativeScrollbarThemeMode NSTM_All;
    public static __VSNativeScrollbarThemeMode NSTM_None;
    public static __VSNativeScrollbarThemeMode NSTM_OnlyTopLevel;
}
[FlagsAttribute]
public enum Microsoft.VisualStudio.Shell.Interop.__VSNEWDOCUMENTSTATE : Enum {
    public int value__;
    public static __VSNEWDOCUMENTSTATE NDS_Unspecified;
    public static __VSNEWDOCUMENTSTATE NDS_Provisional;
    public static __VSNEWDOCUMENTSTATE NDS_Permanent;
    public static __VSNEWDOCUMENTSTATE NDS_StateMask;
    public static __VSNEWDOCUMENTSTATE NDS_OnlyFastViews;
    public static __VSNEWDOCUMENTSTATE NDS_NoActivate;
}
public enum Microsoft.VisualStudio.Shell.Interop.__VSNEWDOCUMENTSTATE2 : Enum {
    public int value__;
    public static __VSNEWDOCUMENTSTATE2 NDS_Reserved;
    public static __VSNEWDOCUMENTSTATE2 NDS_TryProvisional;
}
[FlagsAttribute]
public enum Microsoft.VisualStudio.Shell.Interop.__VSOBSEARCHFLAGS : Enum {
    public int value__;
    public static __VSOBSEARCHFLAGS VSOSF_NONE;
    public static __VSOBSEARCHFLAGS VSOSF_SHOWUI;
    public static __VSOBSEARCHFLAGS VSOSF_NOSHOWUI;
    public static __VSOBSEARCHFLAGS VSOSF_EXPANDREFS;
    public static __VSOBSEARCHFLAGS VSOSF_USECURRENTOPTS;
}
public enum Microsoft.VisualStudio.Shell.Interop.__VSOPENFROMSCCDLG : Enum {
    public int value__;
    public static __VSOPENFROMSCCDLG VSOFSD_OPENSOLUTIONORPROJECT;
    public static __VSOPENFROMSCCDLG VSOFSD_ADDEXISTINGITEM;
}
[FlagsAttribute]
public enum Microsoft.VisualStudio.Shell.Interop.__VSOSEFLAGS : Enum {
    public int value__;
    public static __VSOSEFLAGS OSE_RDTFLAGS_MASK;
    public static __VSOSEFLAGS OSE_UseOpenWithDialog;
    public static __VSOSEFLAGS OSE_ChooseBestStdEditor;
    public static __VSOSEFLAGS OSE_OpenAsNewFile;
}
[FlagsAttribute]
public enum Microsoft.VisualStudio.Shell.Interop.__VSOSEFLAGS2 : Enum {
    public int value__;
    public static __VSOSEFLAGS2 OSE_CheckTrustLevelOfWizard;
}
[FlagsAttribute]
public enum Microsoft.VisualStudio.Shell.Interop.__VSOSEFLAGS3 : Enum {
    public UInt32 value__;
    public static __VSOSEFLAGS3 OSE_RDTFLAGS_MASK;
    public static __VSOSEFLAGS3 OSE_UseOpenWithDialog;
    public static __VSOSEFLAGS3 OSE_ChooseBestStdEditor;
    public static __VSOSEFLAGS3 OSE_OpenAsNewFile;
    public static __VSOSEFLAGS3 OSE_CheckTrustLevelOfWizard;
    public static __VSOSEFLAGS3 OSE_AvoidExternalEditors;
}
[FlagsAttribute]
public enum Microsoft.VisualStudio.Shell.Interop.__VSOSPEFLAGS : Enum {
    public int value__;
    public static __VSOSPEFLAGS OSPE_RDTFLAGS_MASK;
    public static __VSOSPEFLAGS OSPE_CDWFLAGS_MASK;
    public static __VSOSPEFLAGS OSPE_OpenAsNewFile;
}
[FlagsAttribute]
public enum Microsoft.VisualStudio.Shell.Interop.__VSOSPEFLAGS2 : Enum {
    public int value__;
    public static __VSOSPEFLAGS2 OSPE_CheckTrustLevelOfWizard;
}
[FlagsAttribute]
public enum Microsoft.VisualStudio.Shell.Interop.__VSOSPEFLAGS3 : Enum {
    public int value__;
    public static __VSOSPEFLAGS3 OSPE_SKIPDEFERRAL;
}
[FlagsAttribute]
public enum Microsoft.VisualStudio.Shell.Interop.__VSOSPFLAGS : Enum {
    public int value__;
    public static __VSOSPFLAGS OSP_UsePreviewWithDialog;
    public static __VSOSPFLAGS OSP_LaunchNewBrowser;
    public static __VSOSPFLAGS OSP_LaunchSingleBrowser;
    public static __VSOSPFLAGS OSP_SkipInternalIfModal;
    public static __VSOSPFLAGS OSP_LaunchSystemBrowser;
    public static __VSOSPFLAGS OSP_NoUrlConversion;
}
public enum Microsoft.VisualStudio.Shell.Interop.__VSOUTLINESTATE : Enum {
    public int value__;
    public static __VSOUTLINESTATE OUTLINE_DETACHED;
    public static __VSOUTLINESTATE OUTLINE_VISIBLE;
}
public enum Microsoft.VisualStudio.Shell.Interop.__VSOVERLAYICON2 : Enum {
    public int value__;
    public static __VSOVERLAYICON2 OVERLAYICON_EXCLUDED;
    public static __VSOVERLAYICON2 OVERLAYICON_NOTONDISK;
    public static __VSOVERLAYICON2 OVERLAYICON_MAXINDEX2;
}
public enum Microsoft.VisualStudio.Shell.Interop.__VSOVERLAYICON3 : Enum {
    public int value__;
    public static __VSOVERLAYICON3 OVERLAYICON_FAULTED;
    public static __VSOVERLAYICON3 OVERLAYICON_MAXINDEX3;
}
public enum Microsoft.VisualStudio.Shell.Interop.__VSOVERLAYICON4 : Enum {
    public int value__;
    public static __VSOVERLAYICON4 OVERLAYICON_WARNING;
    public static __VSOVERLAYICON4 OVERLAYICON_ALERT;
    public static __VSOVERLAYICON4 OVERLAYICON_OFFLINE;
    public static __VSOVERLAYICON4 OVERLAYICON_ONLINE;
    public static __VSOVERLAYICON4 OVERLAYICON_ERROR;
    public static __VSOVERLAYICON4 OVERLAYICON_FRIEND;
    public static __VSOVERLAYICON4 OVERLAYICON_LOCK;
    public static __VSOVERLAYICON4 OVERLAYICON_LOGINDISABLED;
    public static __VSOVERLAYICON4 OVERLAYICON_PROPERTY;
    public static __VSOVERLAYICON4 OVERLAYICON_PROTECTED;
    public static __VSOVERLAYICON4 OVERLAYICON_SEALED;
    public static __VSOVERLAYICON4 OVERLAYICON_STATIC;
    public static __VSOVERLAYICON4 OVERLAYICON_TIMELINEMARKBLACK;
    public static __VSOVERLAYICON4 OVERLAYICON_TIMELINEMARKGRAY;
    public static __VSOVERLAYICON4 OVERLAYICON_TIMELINEMARKPURPLE;
    public static __VSOVERLAYICON4 OVERLAYICON_TIMELINEMARKRED;
    public static __VSOVERLAYICON4 OVERLAYICON_MAXINDEX4;
}
[FlagsAttribute]
public enum Microsoft.VisualStudio.Shell.Interop.__VSPHYSICALVIEWATTRIBUTES : Enum {
    public int value__;
    public static __VSPHYSICALVIEWATTRIBUTES PVA_None;
    public static __VSPHYSICALVIEWATTRIBUTES PVA_OpensSlowly;
    public static __VSPHYSICALVIEWATTRIBUTES PVA_SupportsPreview;
}
[FlagsAttribute]
public enum Microsoft.VisualStudio.Shell.Interop.__VSPKGRESETFLAGS : Enum {
    public int value__;
    public static __VSPKGRESETFLAGS PKGRF_TOOLBOXITEMS;
    public static __VSPKGRESETFLAGS PKGRF_TOOLBOXSETUP;
    public static __VSPKGRESETFLAGS PKGRF_ADDSTDPREVIEWER;
}
public enum Microsoft.VisualStudio.Shell.Interop.__VSPPPID : Enum {
    public int value__;
    public static __VSPPPID VSPPPID_FIRST;
    public static __VSPPPID VSPPPID_PAGENAME;
    public static __VSPPPID VSPPPID_LAST;
}
[FlagsAttribute]
public enum Microsoft.VisualStudio.Shell.Interop.__VSPPROJECTUPGRADEVIAFACTORYFLAGS : Enum {
    public int value__;
    public static __VSPPROJECTUPGRADEVIAFACTORYFLAGS PUVFF_SXSBACKUP;
    public static __VSPPROJECTUPGRADEVIAFACTORYFLAGS PUVFF_COPYBACKUP;
    public static __VSPPROJECTUPGRADEVIAFACTORYFLAGS PUVFF_BACKUPSUPPORTED;
    public static __VSPPROJECTUPGRADEVIAFACTORYFLAGS PUVFF_USE_ALT_BACKUP_LOCATION;
}
[FlagsAttribute]
public enum Microsoft.VisualStudio.Shell.Interop.__VSPPROJECTUPGRADEVIAFACTORYREPAIRFLAGS : Enum {
    public int value__;
    public static __VSPPROJECTUPGRADEVIAFACTORYREPAIRFLAGS VSPUVF_PROJECT_NOREPAIR;
    public static __VSPPROJECTUPGRADEVIAFACTORYREPAIRFLAGS VSPUVF_PROJECT_SAFEREPAIR;
    public static __VSPPROJECTUPGRADEVIAFACTORYREPAIRFLAGS VSPUVF_PROJECT_UNSAFEREPAIR;
    public static __VSPPROJECTUPGRADEVIAFACTORYREPAIRFLAGS VSPUVF_PROJECT_ONEWAYUPGRADE;
    public static __VSPPROJECTUPGRADEVIAFACTORYREPAIRFLAGS VSPUVF_PROJECT_INCOMPATIBLE;
    public static __VSPPROJECTUPGRADEVIAFACTORYREPAIRFLAGS VSPUVF_PROJECT_DEPRECATED;
}
public enum Microsoft.VisualStudio.Shell.Interop.__VSPREFETCHFACTORYCAPABILITIES : Enum {
    public int value__;
    public static __VSPREFETCHFACTORYCAPABILITIES PFC_NONE;
    public static __VSPREFETCHFACTORYCAPABILITIES PFC_SYNC;
    public static __VSPREFETCHFACTORYCAPABILITIES PFC_SELECTOR;
    public static __VSPREFETCHFACTORYCAPABILITIES PFC_SAFE_CHECK;
}
public enum Microsoft.VisualStudio.Shell.Interop.__VSPROFILECATEGORYSECURITY : Enum {
    public int value__;
    public static __VSPROFILECATEGORYSECURITY PCSEC_SAFE;
    public static __VSPROFILECATEGORYSECURITY PCSEC_THREAT_VS;
    public static __VSPROFILECATEGORYSECURITY PCSEC_THREAT_MACHINE;
}
public enum Microsoft.VisualStudio.Shell.Interop.__VSPROFILECATEGORYSENSITIVITY : Enum {
    public int value__;
    public static __VSPROFILECATEGORYSENSITIVITY PCSEN_SAFE;
    public static __VSPROFILECATEGORYSENSITIVITY PCSEN_PRIVACY;
}
public enum Microsoft.VisualStudio.Shell.Interop.__VSPROFILEGETFILENAME : Enum {
    public int value__;
    public static __VSPROFILEGETFILENAME PGFN_EXPORT;
    public static __VSPROFILEGETFILENAME PGFN_SAVECURRENT;
    public static __VSPROFILEGETFILENAME PGFN_AUTOSAVE;
}
public enum Microsoft.VisualStudio.Shell.Interop.__VSPROFILELOCATIONS : Enum {
    public int value__;
    public static __VSPROFILELOCATIONS PFL_LocationNone;
    public static __VSPROFILELOCATIONS PFL_InstallDir;
    public static __VSPROFILELOCATIONS PFL_SettingsDir;
    public static __VSPROFILELOCATIONS PFL_Other;
    public static __VSPROFILELOCATIONS PFL_AutoSave;
    public static __VSPROFILELOCATIONS PFL_All;
}
[FlagsAttribute]
public enum Microsoft.VisualStudio.Shell.Interop.__VSPROFILEPATHRESOLVERFLAGS : Enum {
    public int value__;
    public static __VSPROFILEPATHRESOLVERFLAGS VSPPR_None;
    public static __VSPROFILEPATHRESOLVERFLAGS VSPPR_OnlyForProfiles;
}
public enum Microsoft.VisualStudio.Shell.Interop.__VSPROFILERLAUNCHOPTS : Enum {
    public int value__;
    public static __VSPROFILERLAUNCHOPTS VSPLO_NOPROFILE;
}
[FlagsAttribute]
public enum Microsoft.VisualStudio.Shell.Interop.__VSPROFILETEAMSETTINGSCHANGEDFLAGS : Enum {
    public int value__;
    public static __VSPROFILETEAMSETTINGSCHANGEDFLAGS PTSCF_TEAMFILE_NOCHANGE;
    public static __VSPROFILETEAMSETTINGSCHANGEDFLAGS PTSCF_TEAMFILE_CHANGED;
    public static __VSPROFILETEAMSETTINGSCHANGEDFLAGS PTSCF_TEAMFILE_SAME;
}
[FlagsAttribute]
public enum Microsoft.VisualStudio.Shell.Interop.__VSPROFILETEAMSETTINGSFLAGS : Enum {
    public int value__;
    public static __VSPROFILETEAMSETTINGSFLAGS PTSF_CHECKFORUPDATE;
    public static __VSPROFILETEAMSETTINGSFLAGS PTSF_UPDATEALWAYS;
}
[FlagsAttribute]
public enum Microsoft.VisualStudio.Shell.Interop.__VSPROJECTLOADFLAGS : Enum {
    public int value__;
    public static __VSPROJECTLOADFLAGS PLF_NONE;
    public static __VSPROJECTLOADFLAGS PFL_CONFIRMED_SAFE;
}
public enum Microsoft.VisualStudio.Shell.Interop.__VSPROJOUTPUTTYPE : Enum {
    public int value__;
    public static __VSPROJOUTPUTTYPE VSPROJ_OUTPUTTYPE_WINEXE;
    public static __VSPROJOUTPUTTYPE VSPROJ_OUTPUTTYPE_EXE;
    public static __VSPROJOUTPUTTYPE VSPROJ_OUTPUTTYPE_LIBRARY;
    public static __VSPROJOUTPUTTYPE VSPROJ_OUTPUTTYPE_WINMDOBJ;
    public static __VSPROJOUTPUTTYPE VSPROJ_OUTPUTTYPE_APPCONTAINEREXE;
    public static __VSPROJOUTPUTTYPE VSPROJ_OUTPUTTYPE_NONE;
}
[FlagsAttribute]
public enum Microsoft.VisualStudio.Shell.Interop.__VSPROJRESFLAGS : Enum {
    public int value__;
    public static __VSPROJRESFLAGS PRF_CreateIfNotExist;
}
[FlagsAttribute]
public enum Microsoft.VisualStudio.Shell.Interop.__VSPROJSLNDLGFLAGS : Enum {
    public int value__;
    public static __VSPROJSLNDLGFLAGS PSDF_OpenSolutionDialog;
    public static __VSPROJSLNDLGFLAGS PSDF_OpenProjectDialog;
    public static __VSPROJSLNDLGFLAGS PSDF_AddExistingProjectDialog;
    public static __VSPROJSLNDLGFLAGS PSDF_DefaultToAllProjectsFilter;
    public static __VSPROJSLNDLGFLAGS PSDF_DirectoryPicker;
}
public enum Microsoft.VisualStudio.Shell.Interop.__VSPROJTARGETRUNTIME : Enum {
    public int value__;
    public static __VSPROJTARGETRUNTIME VSPROJ_TARGETRUNTIME_MANAGED;
    public static __VSPROJTARGETRUNTIME VSPROJ_TARGETRUNTIME_NATIVE;
    public static __VSPROJTARGETRUNTIME VSPROJ_TARGETRUNTIME_APPHOST;
}
public enum Microsoft.VisualStudio.Shell.Interop.__VSPROPID : Enum {
    public int value__;
    public static __VSPROPID VSPROPID_LAST;
    public static __VSPROPID VSPROPID_SolutionDirectory;
    public static __VSPROPID VSPROPID_SolutionFileName;
    public static __VSPROPID VSPROPID_UserOptionsFileName;
    public static __VSPROPID VSPROPID_SolutionBaseName;
    public static __VSPROPID VSPROPID_IsSolutionDirty;
    public static __VSPROPID VSPROPID_IsSolutionOpen;
    public static __VSPROPID VSPROPID_ProjectCount;
    public static __VSPROPID VSPROPID_RegisteredProjExtns;
    public static __VSPROPID VSPROPID_OpenProjectFilter;
    public static __VSPROPID VSPROPID_FileDefaultCodePage;
    public static __VSPROPID VSPROPID_SolutionFileNameBeingLoaded;
    public static __VSPROPID VSPROPID_SolutionNodeCaption;
    public static __VSPROPID VSPROPID_IsSolutionOpening;
    public static __VSPROPID VSPROPID_IsSolutionSaveAsRequired;
    public static __VSPROPID VSPROPID_CountOfProjectsBeingLoaded;
    public static __VSPROPID VSPROPID_SolutionPropertyPages;
    public static __VSPROPID VSPROPID_FIRST;
}
public enum Microsoft.VisualStudio.Shell.Interop.__VSPROPID2 : Enum {
    public int value__;
    public static __VSPROPID2 VSPROPID_IsSolutionNodeHidden;
    public static __VSPROPID2 VSPROPID_DeferredSaveSolution;
    public static __VSPROPID2 VSPROPID_SimplifiedConfigurations;
    public static __VSPROPID2 VSPROPID_IsSolutionClosing;
    public static __VSPROPID2 VSPROPID_IsAProjectClosing;
    public static __VSPROPID2 VSPROPID_IsSolutionOpeningDocs;
    public static __VSPROPID2 VSPROPID_IsOpenNotificationPending;
    public static __VSPROPID2 VSPROPID_ProjectLoadSecurityDialogState;
    public static __VSPROPID2 VSPROPID_SolutionUserFileCreatedOnThisComputer;
    public static __VSPROPID2 VSPROPID_NewProjectDlgPreferredLanguage;
    public static __VSPROPID2 VSPROPID_FIRST2;
}
public enum Microsoft.VisualStudio.Shell.Interop.__VSPROPID3 : Enum {
    public int value__;
    public static __VSPROPID3 VSPROPID_IsSavingOnClose;
    public static __VSPROPID3 VSPROPID_FIRST3;
}
public enum Microsoft.VisualStudio.Shell.Interop.__VSPROPID4 : Enum {
    public int value__;
    public static __VSPROPID4 VSPROPID_NoFrameworkDialogState;
    [ObsoleteAttribute("This API is no longer supported by Visual Studio.")]
public static __VSPROPID4 VSPROPID_IsInBackgroundIdleLoadProjectBatch;
    [ObsoleteAttribute("This API is no longer supported by Visual Studio.")]
public static __VSPROPID4 VSPROPID_IsInSyncDemandLoadProjectBatch;
    public static __VSPROPID4 VSPROPID_IsSolutionFullyLoaded;
    public static __VSPROPID4 VSPROPID_BaseSolutionExplorerCaption;
    public static __VSPROPID4 VSPROPID_SolutionExplorerCaptionSuffix;
    public static __VSPROPID4 VSPROPID_SolutionExplorerCaption;
    public static __VSPROPID4 VSPROPID_AddNewProjectAsSibling;
    [ObsoleteAttribute("This API is no longer supported by Visual Studio.")]
public static __VSPROPID4 VSPROPID_ActiveSolutionLoadManager;
    public static __VSPROPID4 VSPROPID_FIRST4;
}
public enum Microsoft.VisualStudio.Shell.Interop.__VSPROPID5 : Enum {
    public int value__;
    public static __VSPROPID5 VSPROPID_SolutionFileExt;
    public static __VSPROPID5 VSPROPID_UserOptsFileExt;
    public static __VSPROPID5 VSPROPID_FaultedProjectCount;
    public static __VSPROPID5 VSPROPID_ProjectFaultResolutionContext;
    [ObsoleteAttribute]
public static __VSPROPID5 VSPROPID_SolutionViewModel;
    public static __VSPROPID5 VSPROPID_IsOpeningProjectUserInitiated;
    public static __VSPROPID5 VSPROPID_FIRST5;
}
public enum Microsoft.VisualStudio.Shell.Interop.__VSPROPID6 : Enum {
    public int value__;
    public static __VSPROPID6 VSPROPID_IsSolutionInEndRetargetingBatch;
    public static __VSPROPID6 VSPROPID_FIRST6;
}
public enum Microsoft.VisualStudio.Shell.Interop.__VSPROPID7 : Enum {
    public int value__;
    public static __VSPROPID7 VSPROPID_IsInOpenFolderMode;
    [ObsoleteAttribute("This API is no longer supported by Visual Studio.")]
public static __VSPROPID7 VSPROPID_DeferredProjectCount;
    [ObsoleteAttribute("This API is no longer supported by Visual Studio.")]
public static __VSPROPID7 VSPROPID_DeferredLoadOption;
    [ObsoleteAttribute("This API is no longer supported by Visual Studio.")]
public static __VSPROPID7 VSPROPID_DeferOptOutProjectCount;
    public static __VSPROPID7 VSPROPID_FIRST7;
}
public enum Microsoft.VisualStudio.Shell.Interop.__VSPROPID8 : Enum {
    public int value__;
    public static __VSPROPID8 VSPROPID_StartupProjectFiles;
    public static __VSPROPID8 VSPROPID_PermanentSolutionGuid;
    public static __VSPROPID8 VSPROPID_FIRST8;
}
public enum Microsoft.VisualStudio.Shell.Interop.__VSPROVISIONALVIEWINGSTATUS : Enum {
    public int value__;
    public static __VSPROVISIONALVIEWINGSTATUS PVS_Disabled;
    public static __VSPROVISIONALVIEWINGSTATUS PVS_EnabledSlow;
    public static __VSPROVISIONALVIEWINGSTATUS PVS_EnabledLarge;
    public static __VSPROVISIONALVIEWINGSTATUS PVS_Enabled;
}
public enum Microsoft.VisualStudio.Shell.Interop.__VSPSEPROPID : Enum {
    public int value__;
    public static __VSPSEPROPID VSPSEPROPID_NIL;
    public static __VSPSEPROPID VSPSEPROPID_LAST;
    public static __VSPSEPROPID VSPSEPROPID_UseGlobalEditorByDefault;
    public static __VSPSEPROPID VSPSEPROPID_ProjectDefaultEditorName;
    public static __VSPSEPROPID VSPSEPROPID_FIRST;
}
public enum Microsoft.VisualStudio.Shell.Interop.__VSPTDPROPID : Enum {
    public int value__;
    public static __VSPTDPROPID VSPTDPROPID_DoNotAdvertiseRetarget;
    public static __VSPTDPROPID VSPTDPROPID_ProjectRetargetingTitle;
    public static __VSPTDPROPID VSPTDPROPID_ProjectRetargetingDescription;
    public static __VSPTDPROPID VSPTDPROPID_ProjectRetargetingTaskPriority;
    public static __VSPTDPROPID VSPTDPROPID_ProjectUnloadUntilRetargetedTitle;
    public static __VSPTDPROPID VSPTDPROPID_ProjectUnloadUntilRetargetedDescription;
    public static __VSPTDPROPID VSPTDPROPID_ProjectUnloadUntilRetargetedTaskPriority;
    public static __VSPTDPROPID VSPTDPROPID_ProjectRetargetingGuidanceLink;
    public static __VSPTDPROPID VSPTDPROPID_MigrationNextStepGuidanceLink;
    public static __VSPTDPROPID VSPTDPROPID_DoBackup;
    public static __VSPTDPROPID VSPTDPROPID_UnloadTitle;
    public static __VSPTDPROPID VSPTDPROPID_UnloadInfoLine;
    public static __VSPTDPROPID VSPTDPROPID_RetargetProjectCommandTitle;
    public static __VSPTDPROPID VSPTDPROPID_MissingPrerequisites;
    public static __VSPTDPROPID VSPTDPROPID_AcquisitionSetupDriver;
    public static __VSPTDPROPID VSPTDPROPID_AcquisitionComponents;
    public static __VSPTDPROPID VSPTDPROPID_AcquisitionCommandTitle;
    public static __VSPTDPROPID VSPTDPROPID_RetargetSolutionCommandTitle;
    public static __VSPTDPROPID VSPTDPROPID_IncludeAllProjectsForProjectRetargeting;
    public static __VSPTDPROPID VSPTDPROPID_InitUnselectedInSolutionRetargeting;
}
public enum Microsoft.VisualStudio.Shell.Interop.__VSPTIP_DISPOSITION : Enum {
    public int value__;
    public static __VSPTIP_DISPOSITION VSPTIP_Close;
    public static __VSPTIP_DISPOSITION VSPTIP_ToOpen;
    public static __VSPTIP_DISPOSITION VSPTIP_Modified;
}
public enum Microsoft.VisualStudio.Shell.Interop.__VSPTIP_MODE : Enum {
    public int value__;
    public static __VSPTIP_MODE VSPTIP_ReadOnly;
    public static __VSPTIP_MODE VSPTIP_ReadWrite;
}
public enum Microsoft.VisualStudio.Shell.Interop.__VSPUBLISHOPTS : Enum {
    public int value__;
    public static __VSPUBLISHOPTS PUBOPT_PUBLISHCONTEXT;
}
[FlagsAttribute]
public enum Microsoft.VisualStudio.Shell.Interop.__VSQueryEditFlags2 : Enum {
    public int value__;
    public static __VSQueryEditFlags2 QEF_AllowUnopenedProjects;
    public static __VSQueryEditFlags2 QEF_CheckoutLocalVersion;
    public static __VSQueryEditFlags2 QEF_CheckoutLatestVersion;
    public static __VSQueryEditFlags2 QEF_DetectAnyChangedFile;
}
public enum Microsoft.VisualStudio.Shell.Interop.__VSQUERYFLAVORREFERENCESCONTEXT : Enum {
    public int value__;
    public static __VSQUERYFLAVORREFERENCESCONTEXT VSQUERYFLAVORREFERENCESCONTEXT_AddReference;
    public static __VSQUERYFLAVORREFERENCESCONTEXT VSQUERYFLAVORREFERENCESCONTEXT_LoadReference;
    public static __VSQUERYFLAVORREFERENCESCONTEXT VSQUERYFLAVORREFERENCESCONTEXT_RefreshReference;
}
[FlagsAttribute]
public enum Microsoft.VisualStudio.Shell.Interop.__VSQUERYREMOVEDIRECTORYFLAGS2 : Enum {
    public int value__;
    public static __VSQUERYREMOVEDIRECTORYFLAGS2 VSQUERYREMOVEDIRECTORYFLAGS_IsRemovedFromProjectOnly;
}
[FlagsAttribute]
public enum Microsoft.VisualStudio.Shell.Interop.__VSQUERYREMOVEFILEFLAGS2 : Enum {
    public int value__;
    public static __VSQUERYREMOVEFILEFLAGS2 VSQUERYREMOVEFILEFLAGS_IsRemovedFromProjectOnly;
}
[FlagsAttribute]
public enum Microsoft.VisualStudio.Shell.Interop.__VSQuerySaveFlags2 : Enum {
    public int value__;
    public static __VSQuerySaveFlags2 QSF_DetectAnyChangedFile;
}
public enum Microsoft.VisualStudio.Shell.Interop.__VSRDTATTRIB : Enum {
    public int value__;
    public static __VSRDTATTRIB RDTA_Hierarchy;
    public static __VSRDTATTRIB RDTA_ItemID;
    public static __VSRDTATTRIB RDTA_MkDocument;
    public static __VSRDTATTRIB RDTA_DocDataIsDirty;
    public static __VSRDTATTRIB RDTA_DocDataIsNotDirty;
    public static __VSRDTATTRIB RDTA_NOTIFYDOCCHANGEDMASK;
    public static __VSRDTATTRIB RDTA_DocDataReloaded;
    public static __VSRDTATTRIB RDTA_AltHierarchyItemID;
}
public enum Microsoft.VisualStudio.Shell.Interop.__VSRDTATTRIB2 : Enum {
    public int value__;
    public static __VSRDTATTRIB2 RDTA_DocDataIsReadOnly;
    public static __VSRDTATTRIB2 RDTA_DocDataIsNotReadOnly;
    public static __VSRDTATTRIB2 RDTA_NOTIFYDOCCHANGEDEXMASK;
}
public enum Microsoft.VisualStudio.Shell.Interop.__VSRDTATTRIB3 : Enum {
    public int value__;
    public static __VSRDTATTRIB3 RDTA_DocumentInitialized;
    public static __VSRDTATTRIB3 RDTA_HierarchyInitialized;
}
[ExcludeFromIDLAttribute]
[FlagsAttribute]
public enum Microsoft.VisualStudio.Shell.Interop.__VSRDTSAVENOTIFICATIONFLAGS : Enum {
    public UInt32 value__;
    public static __VSRDTSAVENOTIFICATIONFLAGS RDTSNF_ImplicitSave;
}
public enum Microsoft.VisualStudio.Shell.Interop.__VSRDTSAVEOPTIONS : Enum {
    public int value__;
    public static __VSRDTSAVEOPTIONS RDTSAVEOPT_SaveIfDirty;
    public static __VSRDTSAVEOPTIONS RDTSAVEOPT_PromptSave;
    public static __VSRDTSAVEOPTIONS RDTSAVEOPT_ForceSave;
    public static __VSRDTSAVEOPTIONS RDTSAVEOPT_SaveNoChildren;
    public static __VSRDTSAVEOPTIONS RDTSAVEOPT_SaveOnlyChildren;
    public static __VSRDTSAVEOPTIONS RDTSAVEOPT_ActivateDocOnErr;
    public static __VSRDTSAVEOPTIONS RDTSAVEOPT_DocClose;
    public static __VSRDTSAVEOPTIONS RDTSAVEOPT_Reserved;
}
[FlagsAttribute]
public enum Microsoft.VisualStudio.Shell.Interop.__VSRDTSAVEOPTIONS2 : Enum {
    public int value__;
    public static __VSRDTSAVEOPTIONS2 RDTSAVEOPT_SkipNewUnsaved;
    public static __VSRDTSAVEOPTIONS2 RDTSAVEOPT_SaveAllButThis;
    public static __VSRDTSAVEOPTIONS2 RDTSAVEOPT_FSaveAs;
}
public enum Microsoft.VisualStudio.Shell.Interop.__VSRDTSAVEOPTIONS3 : Enum {
    public int value__;
    public static __VSRDTSAVEOPTIONS3 RDTSAVEOPT_SilentSave;
}
public enum Microsoft.VisualStudio.Shell.Interop.__VSREFERENCEAPPLYRESULT : Enum {
    public int value__;
    public static __VSREFERENCEAPPLYRESULT APPLYRESULT_AppliedSuccessfully;
    public static __VSREFERENCEAPPLYRESULT APPLYRESULT_NotApplied;
    public static __VSREFERENCEAPPLYRESULT APPLYRESULT_NotAppliedAndCloseDialog;
}
public enum Microsoft.VisualStudio.Shell.Interop.__VSREFERENCECHANGEOPERATION : Enum {
    public int value__;
    public static __VSREFERENCECHANGEOPERATION VSREFERENCECHANGEOPERATION_ADD;
    public static __VSREFERENCECHANGEOPERATION VSREFERENCECHANGEOPERATION_REMOVE;
}
public enum Microsoft.VisualStudio.Shell.Interop.__VSREFERENCECHANGEOPERATIONRESULT : Enum {
    public int value__;
    public static __VSREFERENCECHANGEOPERATIONRESULT VSREFERENCECHANGEOPERATIONRESULT_ALLOW;
    public static __VSREFERENCECHANGEOPERATIONRESULT VSREFERENCECHANGEOPERATIONRESULT_DENY;
}
public enum Microsoft.VisualStudio.Shell.Interop.__VSREFERENCEQUERYRESULT : Enum {
    public int value__;
    public static __VSREFERENCEQUERYRESULT REFERENCE_ALLOW;
    public static __VSREFERENCEQUERYRESULT REFERENCE_DENY;
    public static __VSREFERENCEQUERYRESULT REFERENCE_UNKNOWN;
}
public enum Microsoft.VisualStudio.Shell.Interop.__VSREGDOCLOCKHOLDER : Enum {
    public int value__;
    public static __VSREGDOCLOCKHOLDER RDLH_WeakLockHolder;
}
[FlagsAttribute]
public enum Microsoft.VisualStudio.Shell.Interop.__VSRELPATHSEARCHFLAGS : Enum {
    public int value__;
    public static __VSRELPATHSEARCHFLAGS RPS_UseAllSearchStrategies;
    public static __VSRELPATHSEARCHFLAGS RPS_SkipEnumProjectItems;
    public static __VSRELPATHSEARCHFLAGS RPS_SkipGlobalResolvers;
    public static __VSRELPATHSEARCHFLAGS RPS_MatchByProjectPath;
}
[FlagsAttribute]
public enum Microsoft.VisualStudio.Shell.Interop.__VSREMOVEDIRECTORYFLAGS2 : Enum {
    public int value__;
    public static __VSREMOVEDIRECTORYFLAGS2 VSREMOVEDIRECTORYFLAGS_IsRemovedFromProjectOnly;
}
[FlagsAttribute]
public enum Microsoft.VisualStudio.Shell.Interop.__VSREMOVEFILEFLAGS2 : Enum {
    public int value__;
    public static __VSREMOVEFILEFLAGS2 VSREMOVEFILEFLAGS_IsRemovedFromProjectOnly;
}
[FlagsAttribute]
public enum Microsoft.VisualStudio.Shell.Interop.__VSREMOVEVPFLAGS : Enum {
    public int value__;
    public static __VSREMOVEVPFLAGS REMOVEVP_DontCloseHierarchy;
    public static __VSREMOVEVPFLAGS REMOVEVP_DontSaveHierarchy;
}
public enum Microsoft.VisualStudio.Shell.Interop.__VSRESTARTTYPE : Enum {
    public int value__;
    public static __VSRESTARTTYPE RESTART_Normal;
    public static __VSRESTARTTYPE RESTART_Elevated;
}
[FlagsAttribute]
public enum Microsoft.VisualStudio.Shell.Interop.__VSSAVEDEFERREDSAVEFLAGS : Enum {
    public int value__;
    public static __VSSAVEDEFERREDSAVEFLAGS VSDSF_HIDEADDTOSOURCECONTROL;
}
public enum Microsoft.VisualStudio.Shell.Interop.__VSSCCENLISTMENTFACTORYOPTIONS : Enum {
    public int value__;
    public static __VSSCCENLISTMENTFACTORYOPTIONS VSSCC_EFO_CANBROWSEENLISTMENTPATH;
    public static __VSSCCENLISTMENTFACTORYOPTIONS VSSCC_EFO_CANEDITENLISTMENTPATH;
    public static __VSSCCENLISTMENTFACTORYOPTIONS VSSCC_EFO_CANBROWSEDEBUGGINGPATH;
    public static __VSSCCENLISTMENTFACTORYOPTIONS VSSCC_EFO_CANEDITDEBUGGINGPATH;
}
public enum Microsoft.VisualStudio.Shell.Interop.__VSSCCPROVIDERBINDINGOPTIONS : Enum {
    public int value__;
    public static __VSSCCPROVIDERBINDINGOPTIONS VSSCC_PBO_CANBROWSESERVERPATH;
    public static __VSSCCPROVIDERBINDINGOPTIONS VSSCC_PBO_CANEDITSERVERPATH;
    public static __VSSCCPROVIDERBINDINGOPTIONS VSSCC_PBO_CANDISPLAYSERVERPATH;
}
public enum Microsoft.VisualStudio.Shell.Interop.__VSSDKPROVIDERTAB : Enum {
    public int value__;
    public static __VSSDKPROVIDERTAB TAB_SDK_PLATFORM;
    public static __VSSDKPROVIDERTAB TAB_SDK_EXTENSIONS;
    public static __VSSDKPROVIDERTAB TAB_SDK_ALL;
}
public enum Microsoft.VisualStudio.Shell.Interop.__VSSEARCHFILTERTOKENTYPE : Enum {
    public int value__;
    public static __VSSEARCHFILTERTOKENTYPE SFTT_DEFAULT;
    public static __VSSEARCHFILTERTOKENTYPE SFTT_EXCLUDE;
    public static __VSSEARCHFILTERTOKENTYPE SFTT_EXACTMATCH;
}
public enum Microsoft.VisualStudio.Shell.Interop.__VSSEARCHNAVIGATIONKEY : Enum {
    public int value__;
    public static __VSSEARCHNAVIGATIONKEY SNK_ENTER;
    public static __VSSEARCHNAVIGATIONKEY SNK_DOWN;
    public static __VSSEARCHNAVIGATIONKEY SNK_UP;
    public static __VSSEARCHNAVIGATIONKEY SNK_PAGEDOWN;
    public static __VSSEARCHNAVIGATIONKEY SNK_PAGEUP;
    public static __VSSEARCHNAVIGATIONKEY SNK_HOME;
    public static __VSSEARCHNAVIGATIONKEY SNK_END;
}
public enum Microsoft.VisualStudio.Shell.Interop.__VSSEARCHNAVIGATIONKEY2 : Enum {
    public int value__;
    public static __VSSEARCHNAVIGATIONKEY2 SNK_ESCAPE;
}
public enum Microsoft.VisualStudio.Shell.Interop.__VSSEARCHPARSEERROR : Enum {
    public int value__;
    public static __VSSEARCHPARSEERROR SPE_NONE;
    public static __VSSEARCHPARSEERROR SPE_UNMATCHEDQUOTES;
    public static __VSSEARCHPARSEERROR SPE_INVALIDESCAPE;
    public static __VSSEARCHPARSEERROR SPE_EMPTYFILTERFIELD;
    public static __VSSEARCHPARSEERROR SPE_EMPTYFILTERVALUE;
}
public enum Microsoft.VisualStudio.Shell.Interop.__VSSEARCHPLACEMENT : Enum {
    public int value__;
    public static __VSSEARCHPLACEMENT SP_NONE;
    public static __VSSEARCHPLACEMENT SP_DYNAMIC;
    public static __VSSEARCHPLACEMENT SP_STRETCH;
    public static __VSSEARCHPLACEMENT SP_CUSTOM;
}
public enum Microsoft.VisualStudio.Shell.Interop.__VSSEARCHPLACEMENT2 : Enum {
    public int value__;
    public static __VSSEARCHPLACEMENT2 SP_DYNAMIC_LEFT;
}
public enum Microsoft.VisualStudio.Shell.Interop.__VSSEARCHTASKSTATUS : Enum {
    public int value__;
    public static __VSSEARCHTASKSTATUS STS_CREATED;
    public static __VSSEARCHTASKSTATUS STS_STARTED;
    public static __VSSEARCHTASKSTATUS STS_COMPLETED;
    public static __VSSEARCHTASKSTATUS STS_STOPPED;
    public static __VSSEARCHTASKSTATUS STS_ERROR;
}
public enum Microsoft.VisualStudio.Shell.Interop.__VSSETTINGSCOMPLETIONSTATUS : Enum {
    public int value__;
    public static __VSSETTINGSCOMPLETIONSTATUS vsSettingsCompletionStatusNotStarted;
    public static __VSSETTINGSCOMPLETIONSTATUS vsSettingsCompletionStatusIncomplete;
    public static __VSSETTINGSCOMPLETIONSTATUS vsSettingsCompletionStatusComplete;
    public static __VSSETTINGSCOMPLETIONSTATUS vsSettingsCompletionStatusStateMask;
    public static __VSSETTINGSCOMPLETIONSTATUS vsSettingsCompletionStatusSuccess;
    public static __VSSETTINGSCOMPLETIONSTATUS vsSettingsCompletionStatusWarnings;
    public static __VSSETTINGSCOMPLETIONSTATUS vsSettingsCompletionStatusErrors;
    public static __VSSETTINGSCOMPLETIONSTATUS vsSettingsCompletionStatusSuccessMask;
}
public enum Microsoft.VisualStudio.Shell.Interop.__VSSETTINGSERRORTYPES : Enum {
    public int value__;
    public static __VSSETTINGSERRORTYPES vsSettingsErrorTypeSuccess;
    public static __VSSETTINGSERRORTYPES vsSettingsErrorTypeError;
    public static __VSSETTINGSERRORTYPES vsSettingsErrorTypeWarning;
    public static __VSSETTINGSERRORTYPES vsSettingsErrorTypeRestart;
    public static __VSSETTINGSERRORTYPES vsSettingsErrorTypeNotInstalled;
    public static __VSSETTINGSERRORTYPES vsSettingsErrorTypeMask;
}
public enum Microsoft.VisualStudio.Shell.Interop.__VsSettingsScope : Enum {
    public int value__;
    public static __VsSettingsScope SettingsScope_Configuration;
    public static __VsSettingsScope SettingsScope_UserSettings;
}
public enum Microsoft.VisualStudio.Shell.Interop.__VsSettingsScope2 : Enum {
    public int value__;
    public static __VsSettingsScope2 SettingsScope_Remote;
}
public enum Microsoft.VisualStudio.Shell.Interop.__VsSettingsType : Enum {
    public int value__;
    public static __VsSettingsType SettingsType_Invalid;
    public static __VsSettingsType SettingsType_Int;
    public static __VsSettingsType SettingsType_Int64;
    public static __VsSettingsType SettingsType_String;
    public static __VsSettingsType SettingsType_Binary;
}
public enum Microsoft.VisualStudio.Shell.Interop.__VsSettingsType2 : Enum {
    public int value__;
    public static __VsSettingsType2 SettingsType_MultiString;
}
public enum Microsoft.VisualStudio.Shell.Interop.__VsSetupPackageState : Enum {
    public int value__;
    public static __VsSetupPackageState INSTALL_PACKAGE_UNKNOWN;
    public static __VsSetupPackageState INSTALL_PACKAGE_NOT_INSTALLED;
    public static __VsSetupPackageState INSTALL_PACKAGE_SUPERSEDED;
    public static __VsSetupPackageState INSTALL_PACKAGE_PRESENT;
}
public enum Microsoft.VisualStudio.Shell.Interop.__VSShellMode : Enum {
    public int value__;
    public static __VSShellMode VSSM_Interactive;
    public static __VSShellMode VSSM_Console;
    public static __VSShellMode VSSM_Server;
}
public enum Microsoft.VisualStudio.Shell.Interop.__VSSHOWCONTEXTMENUOPTS : Enum {
    public int value__;
    public static __VSSHOWCONTEXTMENUOPTS VSCTXMENU_SELECTFIRSTITEM;
    public static __VSSHOWCONTEXTMENUOPTS VSCTXMENU_SHOWUNDERLINES;
    public static __VSSHOWCONTEXTMENUOPTS VSCTXMENU_SUPPORTSTYPEAHEAD;
}
public enum Microsoft.VisualStudio.Shell.Interop.__VSSHOWCONTEXTMENUOPTS2 : Enum {
    public int value__;
    public static __VSSHOWCONTEXTMENUOPTS2 VSCTXMENU_PLACETOP;
    public static __VSSHOWCONTEXTMENUOPTS2 VSCTXMENU_PLACEBOTTOM;
    public static __VSSHOWCONTEXTMENUOPTS2 VSCTXMENU_LEFTALIGN;
    public static __VSSHOWCONTEXTMENUOPTS2 VSCTXMENU_RIGHTALIGN;
}
public enum Microsoft.VisualStudio.Shell.Interop.__VSSHUTDOWNREASON : Enum {
    public int value__;
    public static __VSSHUTDOWNREASON SHUTDOWNREASON_ReasonNormalUserInitiated;
    public static __VSSHUTDOWNREASON SHUTDOWNREASON_ReasonCrash;
    public static __VSSHUTDOWNREASON SHUTDOWNREASON_ReasonHang;
    public static __VSSHUTDOWNREASON SHUTDOWNREASON_ReasonUnknown;
    public static __VSSHUTDOWNREASON SHUTDOWNREASON_NormalNonUserInitiated;
    public static __VSSHUTDOWNREASON SHUTDOWNREASON_AppRestart;
    public static __VSSHUTDOWNREASON SHUTDOWNREASON_Automation;
    public static __VSSHUTDOWNREASON SHUTDOWNREASON_OSRequest;
    public static __VSSHUTDOWNREASON SHUTDOWNREASON_LicenseValidationFailed;
    public static __VSSHUTDOWNREASON SHUTDOWNREASON_DefaultIdentityConfigurationBlocked;
}
public enum Microsoft.VisualStudio.Shell.Interop.__VSSLNCLOSEOPTIONS : Enum {
    public int value__;
    public static __VSSLNCLOSEOPTIONS SLNCLOSEOPT_SLNSAVEOPT_MASK;
    public static __VSSLNCLOSEOPTIONS SLNCLOSEOPT_UnloadProject;
    public static __VSSLNCLOSEOPTIONS SLNCLOSEOPT_DeleteProject;
}
public enum Microsoft.VisualStudio.Shell.Interop.__VSSLNOPENOPTIONS : Enum {
    public int value__;
    public static __VSSLNOPENOPTIONS SLNOPENOPT_Silent;
    public static __VSSLNOPENOPTIONS SLNOPENOPT_AddToCurrent;
    public static __VSSLNOPENOPTIONS SLNOPENOPT_DontConvertSLN;
}
[ObsoleteAttribute("Open Solution from SourceControl feature is removed")]
public enum Microsoft.VisualStudio.Shell.Interop.__VSSLNOPENOPTIONS2 : Enum {
    public int value__;
    public static __VSSLNOPENOPTIONS2 SLNOPENOPT_LoadingAsync;
}
public enum Microsoft.VisualStudio.Shell.Interop.__VSSLNOPENOPTIONS3 : Enum {
    public int value__;
    public static __VSSLNOPENOPTIONS3 SLNOPENOPT_SkipSolutionAccessCheck;
}
public enum Microsoft.VisualStudio.Shell.Interop.__VSSLNSAVEOPTIONS : Enum {
    public int value__;
    public static __VSSLNSAVEOPTIONS SLNSAVEOPT_SaveIfDirty;
    public static __VSSLNSAVEOPTIONS SLNSAVEOPT_PromptSave;
    public static __VSSLNSAVEOPTIONS SLNSAVEOPT_SkipDocs;
    public static __VSSLNSAVEOPTIONS SLNSAVEOPT_SkipProj;
    public static __VSSLNSAVEOPTIONS SLNSAVEOPT_SkipSolution;
    public static __VSSLNSAVEOPTIONS SLNSAVEOPT_SkipUserOptFile;
    public static __VSSLNSAVEOPTIONS SLNSAVEOPT_NoSave;
    public static __VSSLNSAVEOPTIONS SLNSAVEOPT_ForceSave;
    public static __VSSLNSAVEOPTIONS SLNSAVEOPT_DocClose;
}
[FlagsAttribute]
public enum Microsoft.VisualStudio.Shell.Interop.__VSSPECIFICEDITORFLAGS : Enum {
    public int value__;
    public static __VSSPECIFICEDITORFLAGS VSSPECIFICEDITOR_DoOpen;
    public static __VSSPECIFICEDITORFLAGS VSSPECIFICEDITOR_UseEditor;
    public static __VSSPECIFICEDITORFLAGS VSSPECIFICEDITOR_UseView;
}
public enum Microsoft.VisualStudio.Shell.Interop.__VSSPROPID : Enum {
    public int value__;
    public static __VSSPROPID VSSPROPID_LAST;
    public static __VSSPROPID VSSPROPID_StartupDir;
    public static __VSSPROPID VSSPROPID_MDIState;
    public static __VSSPROPID VSSPROPID_VirtualRegistryRoot;
    public static __VSSPROPID VSSPROPID_OpenFileFilter;
    public static __VSSPROPID VSSPROPID_FindInFilesFilter;
    public static __VSSPROPID VSSPROPID_AddExistItemFilter;
    public static __VSSPROPID VSSPROPID_IsInOfficeMode;
    public static __VSSPROPID VSSPROPID_InstallDirectory;
    public static __VSSPROPID VSSPROPID_PreBuildRunPreview;
    public static __VSSPROPID VSSPROPID_IsComplexScriptAvail;
    public static __VSSPROPID VSSPROPID_hinstComplexScript;
    public static __VSSPROPID VSSPROPID_hinstMSO;
    public static __VSSPROPID VSSPROPID_ViewSourceMode;
    public static __VSSPROPID VSSPROPID_RecordState;
    public static __VSSPROPID VSSPROPID_Zombie;
    public static __VSSPROPID VSSPROPID_AnimationsOn;
    public static __VSSPROPID VSSPROPID_ProcessingPendingMessageFilterMsg;
    public static __VSSPROPID VSSPROPID_IsInteractive;
    public static __VSSPROPID VSSPROPID_DetectFileChanges;
    public static __VSSPROPID VSSPROPID_OpenFromCurrDocDir;
    public static __VSSPROPID VSSPROPID_ReloadChangedFiles;
    public static __VSSPROPID VSSPROPID_AppDataDir;
    public static __VSSPROPID VSSPROPID_IsInCommandLineMode;
    public static __VSSPROPID VSSPROPID_ShowOutputPaneOnBuildBegin;
    public static __VSSPROPID VSSPROPID_ShowTasklistOnBuildEnd;
    public static __VSSPROPID VSSPROPID_hmsoinstMSO;
    public static __VSSPROPID VSSPROPID_ShowMiscFilesProject;
    public static __VSSPROPID VSSPROPID_ObjectMgrTypesImgList;
    public static __VSSPROPID VSSPROPID_SCCGlyphsImgList;
    public static __VSSPROPID VSSPROPID_SuppressMessageFilterBusyDialog;
    public static __VSSPROPID VSSPROPID_VisualStudioProjDir;
    public static __VSSPROPID VSSPROPID_PreBuildRunPreviewSaveOpts;
    public static __VSSPROPID VSSPROPID_FIRST;
}
public enum Microsoft.VisualStudio.Shell.Interop.__VSSPROPID10 : Enum {
    public int value__;
    public static __VSSPROPID10 VSSPROPID_GlobalRestoreSolutionExplorerStateOption;
    public static __VSSPROPID10 VSSPROPID_FIRST10;
}
public enum Microsoft.VisualStudio.Shell.Interop.__VSSPROPID11 : Enum {
    public int value__;
    public static __VSSPROPID11 VSSPROPID_ShellMode;
    public static __VSSPROPID11 VSSPROPID_FIRST11;
}
public enum Microsoft.VisualStudio.Shell.Interop.__VSSPROPID12 : Enum {
    public int value__;
    public static __VSSPROPID12 VSSPROPID_ShutdownStarting;
    public static __VSSPROPID12 VSSPROPID_FIRST12;
}
public enum Microsoft.VisualStudio.Shell.Interop.__VSSPROPID13 : Enum {
    public int value__;
    public static __VSSPROPID13 VSSPROPID_EnableEnhancedTooltips;
    public static __VSSPROPID13 VSHPROPID_SlowEnumeration;
    public static __VSSPROPID13 VSSPROPID_FIRST13;
}
public enum Microsoft.VisualStudio.Shell.Interop.__VSSPROPID14 : Enum {
    public int value__;
    public static __VSSPROPID14 VSSPROPID_ShutdownReason;
    public static __VSSPROPID14 VSSPROPID_FIRST14;
}
public enum Microsoft.VisualStudio.Shell.Interop.__VSSPROPID2 : Enum {
    public int value__;
    public static __VSSPROPID2 VSSPROPID_SccProviderChanged;
    public static __VSSPROPID2 VSSPROPID_MainWindowSize;
    public static __VSSPROPID2 VSSPROPID_MainWindowPos;
    public static __VSSPROPID2 VSSPROPID_IsAcademic;
    public static __VSSPROPID2 VSSPROPID_IsAppThemed;
    public static __VSSPROPID2 VSSPROPID_VisualStudioDir;
    public static __VSSPROPID2 VSSPROPID_VsTemplateUserZipProjectFolder;
    public static __VSSPROPID2 VSSPROPID_VsTemplateUserZipItemFolder;
    public static __VSSPROPID2 VSSPROPID_InstallRootDir;
    public static __VSSPROPID2 VSSPROPID_SolutionExplorerSortingEnabled;
    public static __VSSPROPID2 VSSPROPID_BuildOutOfDateProjects;
    public static __VSSPROPID2 VSSPROPID_RunAfterBuildErrors;
    public static __VSSPROPID2 VSSPROPID_MainWindowVisibility;
    public static __VSSPROPID2 VSSPROPID_SKUEdition;
    public static __VSSPROPID2 VSSPROPID_SubSKUEdition;
    public static __VSSPROPID2 VSSPROPID_WaitingForSecondKeyChord;
    public static __VSSPROPID2 VSSPROPID_SqmRegistryRoot;
    public static __VSSPROPID2 VSSPROPID_AutohideToolFrame;
    public static __VSSPROPID2 VSFPROPID_ToolWindowUsesDocSelection;
    public static __VSSPROPID2 VSSPROPID_FIRST2;
}
public enum Microsoft.VisualStudio.Shell.Interop.__VSSPROPID3 : Enum {
    public int value__;
    public static __VSSPROPID3 VSSPROPID_CommonAppDataDir;
    public static __VSSPROPID3 VSSPROPID_FIRST3;
}
public enum Microsoft.VisualStudio.Shell.Interop.__VSSPROPID4 : Enum {
    public int value__;
    public static __VSSPROPID4 VSSPROPID_ShellInitialized;
    public static __VSSPROPID4 VSSPROPID_ZeroConfigProjectDir;
    public static __VSSPROPID4 VSSPROPID_LocalAppDataDir;
    public static __VSSPROPID4 VSSPROPID_LayoutIsRightToLeft;
    public static __VSSPROPID4 VSSPROPID_OpenFileStartDir;
    public static __VSSPROPID4 VSSPROPID_IsModal;
    public static __VSSPROPID4 VSSPROPID_MainWindowDataSource;
    public static __VSSPROPID4 VSSPROPID_VisualEffectsOption;
    public static __VSSPROPID4 VSSPROPID_VisualEffectsAllowed;
    public static __VSSPROPID4 VSSPROPID_IsExecutingCommand;
    public static __VSSPROPID4 VSSPROPID_ReuseSavedActiveDocWindow;
    public static __VSSPROPID4 VSSPROPID_ActivityLogPath;
    public static __VSSPROPID4 VSSPROPID_ConfigurationTimestampUtc;
    public static __VSSPROPID4 VSSPROPID_FIRST4;
}
public enum Microsoft.VisualStudio.Shell.Interop.__VSSPROPID5 : Enum {
    public int value__;
    public static __VSSPROPID5 VSSPROPID_LastActiveInputTick;
    public static __VSSPROPID5 VSSPROPID_ProvisionalDelayMilliseconds;
    public static __VSSPROPID5 VSSPROPID_ReleaseVersion;
    public static __VSSPROPID5 VSSPROPID_ReleaseDescription;
    public static __VSSPROPID5 VSSPROPID_EnablePreviewTab;
    public static __VSSPROPID5 VSSPROPID_AppBrandName;
    public static __VSSPROPID5 VSSPROPID_AppShortBrandName;
    public static __VSSPROPID5 VSSPROPID_SKUInfo;
    public static __VSSPROPID5 VSSPROPID_NativeScrollbarThemeModePropName;
    public static __VSSPROPID5 VSSPROPID_PreviewFileSizeLimit;
    public static __VSSPROPID5 VSSPROPID_FIRST5;
}
public enum Microsoft.VisualStudio.Shell.Interop.__VSSPROPID6 : Enum {
    public int value__;
    public static __VSSPROPID6 VSSPROPID_ShutdownStarted;
    public static __VSSPROPID6 VSSPROPID_LongIdleState;
    public static __VSSPROPID6 VSSPROPID_LongIdleDuration;
    public static __VSSPROPID6 VSSPROPID_FIRST6;
}
public enum Microsoft.VisualStudio.Shell.Interop.__VSSPROPID7 : Enum {
    public int value__;
    public static __VSSPROPID7 VSSPROPID_SCCGlyphMonikerImageList;
    public static __VSSPROPID7 VSSPROPID_MainWindowInfoBarHost;
    public static __VSSPROPID7 VSSPROPID_UnlocalizedReleaseDescription;
    public static __VSSPROPID7 VSSPROPID_IsPrerelease;
    public static __VSSPROPID7 VSSPROPID_FIRST7;
}
public enum Microsoft.VisualStudio.Shell.Interop.__VSSPROPID8 : Enum {
    public int value__;
    public static __VSSPROPID8 VSSPROPID_PromptForFileMove;
    public static __VSSPROPID8 VSSPROPID_FIRST8;
}
public enum Microsoft.VisualStudio.Shell.Interop.__VSSPROPID9 : Enum {
    public int value__;
    public static __VSSPROPID9 VSSPROPID_GlobalRestoreDocsOnSlnLoadOption;
    public static __VSSPROPID9 VSSPROPID_FIRST9;
}
[ExcludeFromIDLAttribute]
public enum Microsoft.VisualStudio.Shell.Interop.__VSSTATUSBARANIMATIONINDEX : Enum {
    public UInt32 value__;
    public static __VSSTATUSBARANIMATIONINDEX SBAI2_Test;
    public static __VSSTATUSBARANIMATIONINDEX SBAI3_HotReload;
}
[FlagsAttribute]
public enum Microsoft.VisualStudio.Shell.Interop.__VSSWATCHRENDERFLAGS : Enum {
    public int value__;
    public static __VSSWATCHRENDERFLAGS VSSRF_DEFAULT;
    public static __VSSWATCHRENDERFLAGS VSSRF_DISABLED;
    public static __VSSWATCHRENDERFLAGS VSSRF_SELECTED;
    public static __VSSWATCHRENDERFLAGS VSSRF_FOCUS;
}
public enum Microsoft.VisualStudio.Shell.Interop.__VSSYSCOLOREX : Enum {
    public int value__;
    public static __VSSYSCOLOREX VSCOLOR_ACCENT_BORDER;
    public static __VSSYSCOLOREX VSCOLOR_ACCENT_DARK;
    public static __VSSYSCOLOREX VSCOLOR_ACCENT_LIGHT;
    public static __VSSYSCOLOREX VSCOLOR_ACCENT_MEDIUM;
    public static __VSSYSCOLOREX VSCOLOR_ACCENT_PALE;
    public static __VSSYSCOLOREX VSCOLOR_COMMANDBAR_BORDER;
    public static __VSSYSCOLOREX VSCOLOR_COMMANDBAR_DRAGHANDLE;
    public static __VSSYSCOLOREX VSCOLOR_COMMANDBAR_DRAGHANDLE_SHADOW;
    public static __VSSYSCOLOREX VSCOLOR_COMMANDBAR_GRADIENT_BEGIN;
    public static __VSSYSCOLOREX VSCOLOR_COMMANDBAR_GRADIENT_END;
    public static __VSSYSCOLOREX VSCOLOR_COMMANDBAR_GRADIENT_MIDDLE;
    public static __VSSYSCOLOREX VSCOLOR_COMMANDBAR_HOVER;
    public static __VSSYSCOLOREX VSCOLOR_COMMANDBAR_HOVEROVERSELECTED;
    public static __VSSYSCOLOREX VSCOLOR_COMMANDBAR_HOVEROVERSELECTEDICON;
    public static __VSSYSCOLOREX VSCOLOR_COMMANDBAR_HOVEROVERSELECTEDICON_BORDER;
    public static __VSSYSCOLOREX VSCOLOR_COMMANDBAR_SELECTED;
    public static __VSSYSCOLOREX VSCOLOR_COMMANDBAR_SHADOW;
    public static __VSSYSCOLOREX VSCOLOR_COMMANDBAR_TEXT_ACTIVE;
    public static __VSSYSCOLOREX VSCOLOR_COMMANDBAR_TEXT_HOVER;
    public static __VSSYSCOLOREX VSCOLOR_COMMANDBAR_TEXT_INACTIVE;
    public static __VSSYSCOLOREX VSCOLOR_COMMANDBAR_TEXT_SELECTED;
    public static __VSSYSCOLOREX VSCOLOR_CONTROL_EDIT_HINTTEXT;
    public static __VSSYSCOLOREX VSCOLOR_CONTROL_EDIT_REQUIRED_BACKGROUND;
    public static __VSSYSCOLOREX VSCOLOR_CONTROL_EDIT_REQUIRED_HINTTEXT;
    public static __VSSYSCOLOREX VSCOLOR_CONTROL_LINK_TEXT;
    public static __VSSYSCOLOREX VSCOLOR_CONTROL_LINK_TEXT_HOVER;
    public static __VSSYSCOLOREX VSCOLOR_CONTROL_LINK_TEXT_PRESSED;
    public static __VSSYSCOLOREX VSCOLOR_CONTROL_OUTLINE;
    public static __VSSYSCOLOREX VSCOLOR_DEBUGGER_DATATIP_ACTIVE_BACKGROUND;
    public static __VSSYSCOLOREX VSCOLOR_DEBUGGER_DATATIP_ACTIVE_BORDER;
    public static __VSSYSCOLOREX VSCOLOR_DEBUGGER_DATATIP_ACTIVE_HIGHLIGHT;
    public static __VSSYSCOLOREX VSCOLOR_DEBUGGER_DATATIP_ACTIVE_HIGHLIGHTTEXT;
    public static __VSSYSCOLOREX VSCOLOR_DEBUGGER_DATATIP_ACTIVE_SEPARATOR;
    public static __VSSYSCOLOREX VSCOLOR_DEBUGGER_DATATIP_ACTIVE_TEXT;
    public static __VSSYSCOLOREX VSCOLOR_DEBUGGER_DATATIP_INACTIVE_BACKGROUND;
    public static __VSSYSCOLOREX VSCOLOR_DEBUGGER_DATATIP_INACTIVE_BORDER;
    public static __VSSYSCOLOREX VSCOLOR_DEBUGGER_DATATIP_INACTIVE_HIGHLIGHT;
    public static __VSSYSCOLOREX VSCOLOR_DEBUGGER_DATATIP_INACTIVE_HIGHLIGHTTEXT;
    public static __VSSYSCOLOREX VSCOLOR_DEBUGGER_DATATIP_INACTIVE_SEPARATOR;
    public static __VSSYSCOLOREX VSCOLOR_DEBUGGER_DATATIP_INACTIVE_TEXT;
    public static __VSSYSCOLOREX VSCOLOR_DESIGNER_BACKGROUND;
    public static __VSSYSCOLOREX VSCOLOR_DESIGNER_SELECTIONDOTS;
    public static __VSSYSCOLOREX VSCOLOR_DESIGNER_TRAY;
    public static __VSSYSCOLOREX VSCOLOR_DESIGNER_WATERMARK;
    public static __VSSYSCOLOREX VSCOLOR_EDITOR_EXPANSION_BORDER;
    public static __VSSYSCOLOREX VSCOLOR_EDITOR_EXPANSION_FILL;
    public static __VSSYSCOLOREX VSCOLOR_EDITOR_EXPANSION_LINK;
    public static __VSSYSCOLOREX VSCOLOR_EDITOR_EXPANSION_TEXT;
    public static __VSSYSCOLOREX VSCOLOR_ENVIRONMENT_BACKGROUND;
    public static __VSSYSCOLOREX VSCOLOR_ENVIRONMENT_BACKGROUND_GRADIENTBEGIN;
    public static __VSSYSCOLOREX VSCOLOR_ENVIRONMENT_BACKGROUND_GRADIENTEND;
    public static __VSSYSCOLOREX VSCOLOR_FILETAB_BORDER;
    public static __VSSYSCOLOREX VSCOLOR_FILETAB_CHANNELBACKGROUND;
    public static __VSSYSCOLOREX VSCOLOR_FILETAB_GRADIENTDARK;
    public static __VSSYSCOLOREX VSCOLOR_FILETAB_GRADIENTLIGHT;
    public static __VSSYSCOLOREX VSCOLOR_FILETAB_SELECTEDBACKGROUND;
    public static __VSSYSCOLOREX VSCOLOR_FILETAB_SELECTEDBORDER;
    public static __VSSYSCOLOREX VSCOLOR_FILETAB_SELECTEDTEXT;
    public static __VSSYSCOLOREX VSCOLOR_FILETAB_TEXT;
    public static __VSSYSCOLOREX VSCOLOR_FORMSMARTTAG_ACTIONTAG_BORDER;
    public static __VSSYSCOLOREX VSCOLOR_FORMSMARTTAG_ACTIONTAG_FILL;
    public static __VSSYSCOLOREX VSCOLOR_FORMSMARTTAG_OBJECTTAG_BORDER;
    public static __VSSYSCOLOREX VSCOLOR_FORMSMARTTAG_OBJECTTAG_FILL;
    public static __VSSYSCOLOREX VSCOLOR_GRID_HEADING_BACKGROUND;
    public static __VSSYSCOLOREX VSCOLOR_GRID_HEADING_TEXT;
    public static __VSSYSCOLOREX VSCOLOR_GRID_LINE;
    public static __VSSYSCOLOREX VSCOLOR_HELP_HOWDOI_PANE_BACKGROUND;
    public static __VSSYSCOLOREX VSCOLOR_HELP_HOWDOI_PANE_LINK;
    public static __VSSYSCOLOREX VSCOLOR_HELP_HOWDOI_PANE_TEXT;
    public static __VSSYSCOLOREX VSCOLOR_HELP_HOWDOI_TASK_BACKGROUND;
    public static __VSSYSCOLOREX VSCOLOR_HELP_HOWDOI_TASK_LINK;
    public static __VSSYSCOLOREX VSCOLOR_HELP_HOWDOI_TASK_TEXT;
    public static __VSSYSCOLOREX VSCOLOR_HELP_SEARCH_FRAME_BACKGROUND;
    public static __VSSYSCOLOREX VSCOLOR_HELP_SEARCH_FRAME_TEXT;
    public static __VSSYSCOLOREX VSCOLOR_HELP_SEARCH_BORDER;
    public static __VSSYSCOLOREX VSCOLOR_HELP_SEARCH_FITLER_TEXT;
    public static __VSSYSCOLOREX VSCOLOR_HELP_SEARCH_FITLER_BACKGROUND;
    public static __VSSYSCOLOREX VSCOLOR_HELP_SEARCH_FITLER_BORDER;
    public static __VSSYSCOLOREX VSCOLOR_HELP_SEARCH_PROVIDER_UNSELECTED_BACKGROUND;
    public static __VSSYSCOLOREX VSCOLOR_HELP_SEARCH_PROVIDER_UNSELECTED_TEXT;
    public static __VSSYSCOLOREX VSCOLOR_HELP_SEARCH_PROVIDER_SELECTED_BACKGROUND;
    public static __VSSYSCOLOREX VSCOLOR_HELP_SEARCH_PROVIDER_SELECTED_TEXT;
    public static __VSSYSCOLOREX VSCOLOR_HELP_SEARCH_PROVIDER_ICON;
    public static __VSSYSCOLOREX VSCOLOR_HELP_SEARCH_RESULT_LINK_SELECTED;
    public static __VSSYSCOLOREX VSCOLOR_HELP_SEARCH_RESULT_LINK_UNSELECTED;
    public static __VSSYSCOLOREX VSCOLOR_HELP_SEARCH_RESULT_SELECTED_BACKGROUND;
    public static __VSSYSCOLOREX VSCOLOR_HELP_SEARCH_RESULT_SELECTED_TEXT;
    public static __VSSYSCOLOREX VSCOLOR_HELP_SEARCH_BACKGROUND;
    public static __VSSYSCOLOREX VSCOLOR_HELP_SEARCH_TEXT;
    public static __VSSYSCOLOREX VSCOLOR_HELP_SEARCH_PANEL_RULES;
    public static __VSSYSCOLOREX VSCOLOR_MDICLIENT_BORDER;
    public static __VSSYSCOLOREX VSCOLOR_PANEL_BORDER;
    public static __VSSYSCOLOREX VSCOLOR_PANEL_GRADIENTDARK;
    public static __VSSYSCOLOREX VSCOLOR_PANEL_GRADIENTLIGHT;
    public static __VSSYSCOLOREX VSCOLOR_PANEL_HOVEROVERCLOSE_BORDER;
    public static __VSSYSCOLOREX VSCOLOR_PANEL_HOVEROVERCLOSE_FILL;
    public static __VSSYSCOLOREX VSCOLOR_PANEL_HYPERLINK;
    public static __VSSYSCOLOREX VSCOLOR_PANEL_HYPERLINK_HOVER;
    public static __VSSYSCOLOREX VSCOLOR_PANEL_HYPERLINK_PRESSED;
    public static __VSSYSCOLOREX VSCOLOR_PANEL_SEPARATOR;
    public static __VSSYSCOLOREX VSCOLOR_PANEL_SUBGROUPSEPARATOR;
    public static __VSSYSCOLOREX VSCOLOR_PANEL_TEXT;
    public static __VSSYSCOLOREX VSCOLOR_PANEL_TITLEBAR;
    public static __VSSYSCOLOREX VSCOLOR_PANEL_TITLEBAR_TEXT;
    public static __VSSYSCOLOREX VSCOLOR_PANEL_TITLEBAR_UNSELECTED;
    public static __VSSYSCOLOREX VSCOLOR_PROJECTDESIGNER_BACKGROUND_GRADIENTBEGIN;
    public static __VSSYSCOLOREX VSCOLOR_PROJECTDESIGNER_BACKGROUND_GRADIENTEND;
    public static __VSSYSCOLOREX VSCOLOR_PROJECTDESIGNER_BORDER_OUTSIDE;
    public static __VSSYSCOLOREX VSCOLOR_PROJECTDESIGNER_BORDER_INSIDE;
    public static __VSSYSCOLOREX VSCOLOR_PROJECTDESIGNER_CONTENTS_BACKGROUND;
    public static __VSSYSCOLOREX VSCOLOR_PROJECTDESIGNER_TAB_BACKGROUND_GRADIENTBEGIN;
    public static __VSSYSCOLOREX VSCOLOR_PROJECTDESIGNER_TAB_BACKGROUND_GRADIENTEND;
    public static __VSSYSCOLOREX VSCOLOR_PROJECTDESIGNER_TAB_SELECTED_INSIDEBORDER;
    public static __VSSYSCOLOREX VSCOLOR_PROJECTDESIGNER_TAB_SELECTED_BORDER;
    public static __VSSYSCOLOREX VSCOLOR_PROJECTDESIGNER_TAB_SELECTED_HIGHLIGHT1;
    public static __VSSYSCOLOREX VSCOLOR_PROJECTDESIGNER_TAB_SELECTED_HIGHLIGHT2;
    public static __VSSYSCOLOREX VSCOLOR_PROJECTDESIGNER_TAB_SELECTED_BACKGROUND;
    public static __VSSYSCOLOREX VSCOLOR_PROJECTDESIGNER_TAB_SEP_BOTTOM_GRADIENTBEGIN;
    public static __VSSYSCOLOREX VSCOLOR_PROJECTDESIGNER_TAB_SEP_BOTTOM_GRADIENTEND;
    public static __VSSYSCOLOREX VSCOLOR_PROJECTDESIGNER_TAB_SEP_TOP_GRADIENTBEGIN;
    public static __VSSYSCOLOREX VSCOLOR_PROJECTDESIGNER_TAB_SEP_TOP_GRADIENTEND;
    public static __VSSYSCOLOREX VSCOLOR_SCREENTIP_BORDER;
    public static __VSSYSCOLOREX VSCOLOR_SCREENTIP_BACKGROUND;
    public static __VSSYSCOLOREX VSCOLOR_SCREENTIP_TEXT;
    public static __VSSYSCOLOREX VSCOLOR_SIDEBAR_BACKGROUND;
    public static __VSSYSCOLOREX VSCOLOR_SIDEBAR_GRADIENTDARK;
    public static __VSSYSCOLOREX VSCOLOR_SIDEBAR_GRADIENTLIGHT;
    public static __VSSYSCOLOREX VSCOLOR_SIDEBAR_TEXT;
    public static __VSSYSCOLOREX VSCOLOR_SMARTTAG_BORDER;
    public static __VSSYSCOLOREX VSCOLOR_SMARTTAG_FILL;
    public static __VSSYSCOLOREX VSCOLOR_SMARTTAG_HOVER_BORDER;
    public static __VSSYSCOLOREX VSCOLOR_SMARTTAG_HOVER_FILL;
    public static __VSSYSCOLOREX VSCOLOR_SMARTTAG_HOVER_TEXT;
    public static __VSSYSCOLOREX VSCOLOR_SMARTTAG_TEXT;
    public static __VSSYSCOLOREX VSCOLOR_SNAPLINES;
    public static __VSSYSCOLOREX VSCOLOR_SNAPLINES_PADDING;
    public static __VSSYSCOLOREX VSCOLOR_SNAPLINES_TEXTBASELINE;
    public static __VSSYSCOLOREX VSCOLOR_SORT_BACKGROUND;
    public static __VSSYSCOLOREX VSCOLOR_SORT_TEXT;
    public static __VSSYSCOLOREX VSCOLOR_TASKLIST_GRIDLINES;
    public static __VSSYSCOLOREX VSCOLOR_TITLEBAR_ACTIVE;
    public static __VSSYSCOLOREX VSCOLOR_TITLEBAR_ACTIVE_GRADIENTBEGIN;
    public static __VSSYSCOLOREX VSCOLOR_TITLEBAR_ACTIVE_GRADIENTEND;
    public static __VSSYSCOLOREX VSCOLOR_TITLEBAR_ACTIVE_TEXT;
    public static __VSSYSCOLOREX VSCOLOR_TITLEBAR_INACTIVE;
    public static __VSSYSCOLOREX VSCOLOR_TITLEBAR_INACTIVE_GRADIENTBEGIN;
    public static __VSSYSCOLOREX VSCOLOR_TITLEBAR_INACTIVE_GRADIENTEND;
    public static __VSSYSCOLOREX VSCOLOR_TITLEBAR_INACTIVE_TEXT;
    public static __VSSYSCOLOREX VSCOLOR_TOOLBOX_BACKGROUND;
    public static __VSSYSCOLOREX VSCOLOR_TOOLBOX_DIVIDER;
    public static __VSSYSCOLOREX VSCOLOR_TOOLBOX_GRADIENTDARK;
    public static __VSSYSCOLOREX VSCOLOR_TOOLBOX_GRADIENTLIGHT;
    public static __VSSYSCOLOREX VSCOLOR_TOOLBOX_HEADINGACCENT;
    public static __VSSYSCOLOREX VSCOLOR_TOOLBOX_HEADINGBEGIN;
    public static __VSSYSCOLOREX VSCOLOR_TOOLBOX_HEADINGEND;
    public static __VSSYSCOLOREX VSCOLOR_TOOLBOX_ICON_HIGHLIGHT;
    public static __VSSYSCOLOREX VSCOLOR_TOOLBOX_ICON_SHADOW;
    public static __VSSYSCOLOREX VSCOLOR_TOOLWINDOW_BACKGROUND;
    public static __VSSYSCOLOREX VSCOLOR_TOOLWINDOW_BORDER;
    public static __VSSYSCOLOREX VSCOLOR_TOOLWINDOW_BUTTON_DOWN;
    public static __VSSYSCOLOREX VSCOLOR_TOOLWINDOW_BUTTON_DOWN_BORDER;
    public static __VSSYSCOLOREX VSCOLOR_TOOLWINDOW_BUTTON_HOVER_ACTIVE;
    public static __VSSYSCOLOREX VSCOLOR_TOOLWINDOW_BUTTON_HOVER_ACTIVE_BORDER;
    public static __VSSYSCOLOREX VSCOLOR_TOOLWINDOW_BUTTON_HOVER_INACTIVE;
    public static __VSSYSCOLOREX VSCOLOR_TOOLWINDOW_BUTTON_HOVER_INACTIVE_BORDER;
    public static __VSSYSCOLOREX VSCOLOR_TOOLWINDOW_TEXT;
    public static __VSSYSCOLOREX VSCOLOR_TOOLWINDOW_TAB_SELECTEDTAB;
    public static __VSSYSCOLOREX VSCOLOR_TOOLWINDOW_TAB_BORDER;
    public static __VSSYSCOLOREX VSCOLOR_TOOLWINDOW_TAB_GRADIENTBEGIN;
    public static __VSSYSCOLOREX VSCOLOR_TOOLWINDOW_TAB_GRADIENTEND;
    public static __VSSYSCOLOREX VSCOLOR_TOOLWINDOW_TAB_TEXT;
    public static __VSSYSCOLOREX VSCOLOR_TOOLWINDOW_TAB_SELECTEDTEXT;
    public static __VSSYSCOLOREX VSCOLOR_WIZARD_ORIENTATIONPANEL_BACKGROUND;
    public static __VSSYSCOLOREX VSCOLOR_WIZARD_ORIENTATIONPANEL_TEXT;
    public static __VSSYSCOLOREX VSCOLOR_LASTEX;
}
public enum Microsoft.VisualStudio.Shell.Interop.__VSSYSCOLOREX2 : Enum {
    public int value__;
    public static __VSSYSCOLOREX2 VSCOLOR_SPLASHSCREEN_BORDER;
    public static __VSSYSCOLOREX2 VSCOLOR_FILETAB_SELECTED_GRADIENTTOP;
    public static __VSSYSCOLOREX2 VSCOLOR_FILETAB_SELECTED_GRADIENTBOTTOM;
    public static __VSSYSCOLOREX2 VSCOLOR_FILETAB_HOT_GRADIENTTOP;
    public static __VSSYSCOLOREX2 VSCOLOR_FILETAB_HOT_GRADIENTBOTTOM;
    public static __VSSYSCOLOREX2 VSCOLOR_FILETAB_DOCUMENTBORDER_SHADOW;
    public static __VSSYSCOLOREX2 VSCOLOR_FILETAB_DOCUMENTBORDER_BACKGROUND;
    public static __VSSYSCOLOREX2 VSCOLOR_FILETAB_DOCUMENTBORDER_HIGHLIGHT;
    public static __VSSYSCOLOREX2 VSCOLOR_BRANDEDUI_TITLE;
    public static __VSSYSCOLOREX2 VSCOLOR_BRANDEDUI_BORDER;
    public static __VSSYSCOLOREX2 VSCOLOR_BRANDEDUI_TEXT;
    public static __VSSYSCOLOREX2 VSCOLOR_BRANDEDUI_BACKGROUND;
    public static __VSSYSCOLOREX2 VSCOLOR_BRANDEDUI_FILL;
    public static __VSSYSCOLOREX2 VSCOLOR_LASTEX2;
}
public enum Microsoft.VisualStudio.Shell.Interop.__VSSYSCOLOREX3 : Enum {
    public int value__;
    public static __VSSYSCOLOREX3 VSCOLOR_ACTIVEBORDER;
    public static __VSSYSCOLOREX3 VSCOLOR_ACTIVECAPTION;
    public static __VSSYSCOLOREX3 VSCOLOR_APPWORKSPACE;
    public static __VSSYSCOLOREX3 VSCOLOR_BACKGROUND;
    public static __VSSYSCOLOREX3 VSCOLOR_BUTTONFACE;
    public static __VSSYSCOLOREX3 VSCOLOR_BUTTONHIGHLIGHT;
    public static __VSSYSCOLOREX3 VSCOLOR_BUTTONSHADOW;
    public static __VSSYSCOLOREX3 VSCOLOR_BUTTONTEXT;
    public static __VSSYSCOLOREX3 VSCOLOR_CAPTIONTEXT;
    public static __VSSYSCOLOREX3 VSCOLOR_GRAYTEXT;
    public static __VSSYSCOLOREX3 VSCOLOR_HIGHLIGHT;
    public static __VSSYSCOLOREX3 VSCOLOR_HIGHLIGHTTEXT;
    public static __VSSYSCOLOREX3 VSCOLOR_INACTIVEBORDER;
    public static __VSSYSCOLOREX3 VSCOLOR_INACTIVECAPTION;
    public static __VSSYSCOLOREX3 VSCOLOR_INACTIVECAPTIONTEXT;
    public static __VSSYSCOLOREX3 VSCOLOR_INFOBACKGROUND;
    public static __VSSYSCOLOREX3 VSCOLOR_INFOTEXT;
    public static __VSSYSCOLOREX3 VSCOLOR_MENU;
    public static __VSSYSCOLOREX3 VSCOLOR_MENUTEXT;
    public static __VSSYSCOLOREX3 VSCOLOR_SCROLLBAR;
    public static __VSSYSCOLOREX3 VSCOLOR_THREEDDARKSHADOW;
    public static __VSSYSCOLOREX3 VSCOLOR_THREEDFACE;
    public static __VSSYSCOLOREX3 VSCOLOR_THREEDHIGHLIGHT;
    public static __VSSYSCOLOREX3 VSCOLOR_THREEDLIGHTSHADOW;
    public static __VSSYSCOLOREX3 VSCOLOR_THREEDSHADOW;
    public static __VSSYSCOLOREX3 VSCOLOR_WINDOW;
    public static __VSSYSCOLOREX3 VSCOLOR_WINDOWFRAME;
    public static __VSSYSCOLOREX3 VSCOLOR_WINDOWTEXT;
    public static __VSSYSCOLOREX3 VSCOLOR_AUTOHIDE_TAB_TEXT;
    public static __VSSYSCOLOREX3 VSCOLOR_AUTOHIDE_TAB_BACKGROUND_BEGIN;
    public static __VSSYSCOLOREX3 VSCOLOR_AUTOHIDE_TAB_BACKGROUND_END;
    public static __VSSYSCOLOREX3 VSCOLOR_AUTOHIDE_TAB_BORDER;
    public static __VSSYSCOLOREX3 VSCOLOR_AUTOHIDE_TAB_MOUSEOVER_TEXT;
    public static __VSSYSCOLOREX3 VSCOLOR_AUTOHIDE_TAB_MOUSEOVER_BACKGROUND_BEGIN;
    public static __VSSYSCOLOREX3 VSCOLOR_AUTOHIDE_TAB_MOUSEOVER_BACKGROUND_END;
    public static __VSSYSCOLOREX3 VSCOLOR_AUTOHIDE_TAB_MOUSEOVER_BORDER;
    public static __VSSYSCOLOREX3 VSCOLOR_AUTOHIDE_RESIZEGRIP;
    public static __VSSYSCOLOREX3 VSCOLOR_CLASSDESIGNER_CLASSCOMPARTMENT;
    public static __VSSYSCOLOREX3 VSCOLOR_CLASSDESIGNER_CLASSHEADERBACKGROUND;
    public static __VSSYSCOLOREX3 VSCOLOR_CLASSDESIGNER_COMMENTBORDER;
    public static __VSSYSCOLOREX3 VSCOLOR_CLASSDESIGNER_COMMENTSHAPEBACKGROUND;
    public static __VSSYSCOLOREX3 VSCOLOR_CLASSDESIGNER_COMMENTTEXT;
    public static __VSSYSCOLOREX3 VSCOLOR_CLASSDESIGNER_COMPARTMENTSEPARATOR;
    public static __VSSYSCOLOREX3 VSCOLOR_CLASSDESIGNER_CONNECTIONROUTEBORDER;
    public static __VSSYSCOLOREX3 VSCOLOR_CLASSDESIGNER_DEFAULTCONNECTION;
    public static __VSSYSCOLOREX3 VSCOLOR_CLASSDESIGNER_DEFAULTSHAPETITLEBACKGROUND;
    public static __VSSYSCOLOREX3 VSCOLOR_CLASSDESIGNER_DEFAULTSHAPEBACKGROUND;
    public static __VSSYSCOLOREX3 VSCOLOR_CLASSDESIGNER_DEFAULTSHAPEBORDER;
    public static __VSSYSCOLOREX3 VSCOLOR_CLASSDESIGNER_DEFAULTSHAPESUBTITLE;
    public static __VSSYSCOLOREX3 VSCOLOR_CLASSDESIGNER_DEFAULTSHAPETEXT;
    public static __VSSYSCOLOREX3 VSCOLOR_CLASSDESIGNER_DEFAULTSHAPETITLE;
    public static __VSSYSCOLOREX3 VSCOLOR_CLASSDESIGNER_DELEGATECOMPARTMENT;
    public static __VSSYSCOLOREX3 VSCOLOR_CLASSDESIGNER_DELEGATEHEADER;
    public static __VSSYSCOLOREX3 VSCOLOR_CLASSDESIGNER_DIAGRAMBACKGROUND;
    public static __VSSYSCOLOREX3 VSCOLOR_CLASSDESIGNER_EMPHASISBORDER;
    public static __VSSYSCOLOREX3 VSCOLOR_CLASSDESIGNER_ENUMHEADER;
    public static __VSSYSCOLOREX3 VSCOLOR_CLASSDESIGNER_FIELDASSOCIATION;
    public static __VSSYSCOLOREX3 VSCOLOR_CLASSDESIGNER_GRADIENTEND;
    public static __VSSYSCOLOREX3 VSCOLOR_CLASSDESIGNER_INHERITANCE;
    public static __VSSYSCOLOREX3 VSCOLOR_CLASSDESIGNER_INTERFACEHEADER;
    public static __VSSYSCOLOREX3 VSCOLOR_CLASSDESIGNER_INTERFACECOMPARTMENT;
    public static __VSSYSCOLOREX3 VSCOLOR_CLASSDESIGNER_LASSO;
    public static __VSSYSCOLOREX3 VSCOLOR_CLASSDESIGNER_LOLLIPOP;
    public static __VSSYSCOLOREX3 VSCOLOR_CLASSDESIGNER_PROPERTYASSOCIATION;
    public static __VSSYSCOLOREX3 VSCOLOR_CLASSDESIGNER_REFERENCEDASSEMBLYBORDER;
    public static __VSSYSCOLOREX3 VSCOLOR_CLASSDESIGNER_RESIZINGSHAPEBORDER;
    public static __VSSYSCOLOREX3 VSCOLOR_CLASSDESIGNER_SHAPEBORDER;
    public static __VSSYSCOLOREX3 VSCOLOR_CLASSDESIGNER_SHAPESHADOW;
    public static __VSSYSCOLOREX3 VSCOLOR_CLASSDESIGNER_TEMPCONNECTION;
    public static __VSSYSCOLOREX3 VSCOLOR_CLASSDESIGNER_TYPEDEF;
    public static __VSSYSCOLOREX3 VSCOLOR_CLASSDESIGNER_TYPEDEFHEADER;
    public static __VSSYSCOLOREX3 VSCOLOR_CLASSDESIGNER_UNRESOLVEDTEXT;
    public static __VSSYSCOLOREX3 VSCOLOR_CLASSDESIGNER_VBMODULECOMPARTMENT;
    public static __VSSYSCOLOREX3 VSCOLOR_CLASSDESIGNER_VBMODULEHEADER;
    public static __VSSYSCOLOREX3 VSCOLOR_COMBOBOX_BACKGROUND;
    public static __VSSYSCOLOREX3 VSCOLOR_COMBOBOX_BORDER;
    public static __VSSYSCOLOREX3 VSCOLOR_COMBOBOX_DISABLED_BACKGROUND;
    public static __VSSYSCOLOREX3 VSCOLOR_COMBOBOX_DISABLED_BORDER;
    public static __VSSYSCOLOREX3 VSCOLOR_COMBOBOX_DISABLED_GLYPH;
    public static __VSSYSCOLOREX3 VSCOLOR_COMBOBOX_GLYPH;
    public static __VSSYSCOLOREX3 VSCOLOR_COMBOBOX_MOUSEDOWN_BACKGROUND;
    public static __VSSYSCOLOREX3 VSCOLOR_COMBOBOX_MOUSEDOWN_BORDER;
    public static __VSSYSCOLOREX3 VSCOLOR_COMBOBOX_MOUSEOVER_BACKGROUND_BEGIN;
    public static __VSSYSCOLOREX3 VSCOLOR_COMBOBOX_MOUSEOVER_BACKGROUND_MIDDLE1;
    public static __VSSYSCOLOREX3 VSCOLOR_COMBOBOX_MOUSEOVER_BACKGROUND_MIDDLE2;
    public static __VSSYSCOLOREX3 VSCOLOR_COMBOBOX_MOUSEOVER_BACKGROUND_END;
    public static __VSSYSCOLOREX3 VSCOLOR_COMBOBOX_MOUSEOVER_BORDER;
    public static __VSSYSCOLOREX3 VSCOLOR_COMBOBOX_MOUSEOVER_GLYPH;
    public static __VSSYSCOLOREX3 VSCOLOR_COMBOBOX_POPUP_BACKGROUND_BEGIN;
    public static __VSSYSCOLOREX3 VSCOLOR_COMBOBOX_POPUP_BACKGROUND_END;
    public static __VSSYSCOLOREX3 VSCOLOR_COMBOBOX_POPUP_BORDER;
    public static __VSSYSCOLOREX3 VSCOLOR_COMMANDBAR_CHECKBOX;
    public static __VSSYSCOLOREX3 VSCOLOR_COMMANDBAR_MENU_BACKGROUND_GRADIENTBEGIN;
    public static __VSSYSCOLOREX3 VSCOLOR_COMMANDBAR_MENU_BACKGROUND_GRADIENTEND;
    public static __VSSYSCOLOREX3 VSCOLOR_COMMANDBAR_MENU_BORDER;
    public static __VSSYSCOLOREX3 VSCOLOR_COMMANDBAR_MENU_ICONBACKGROUND;
    public static __VSSYSCOLOREX3 VSCOLOR_COMMANDBAR_MENU_MOUSEOVER_SUBMENU_GLYPH;
    public static __VSSYSCOLOREX3 VSCOLOR_COMMANDBAR_MENU_SEPARATOR;
    public static __VSSYSCOLOREX3 VSCOLOR_COMMANDBAR_MENU_SUBMENU_GLYPH;
    public static __VSSYSCOLOREX3 VSCOLOR_COMMANDBAR_MOUSEDOWN_BACKGROUND_BEGIN;
    public static __VSSYSCOLOREX3 VSCOLOR_COMMANDBAR_MOUSEDOWN_BACKGROUND_MIDDLE;
    public static __VSSYSCOLOREX3 VSCOLOR_COMMANDBAR_MOUSEDOWN_BACKGROUND_END;
    public static __VSSYSCOLOREX3 VSCOLOR_COMMANDBAR_MOUSEDOWN_BORDER;
    public static __VSSYSCOLOREX3 VSCOLOR_COMMANDBAR_MOUSEOVER_BACKGROUND_BEGIN;
    public static __VSSYSCOLOREX3 VSCOLOR_COMMANDBAR_MOUSEOVER_BACKGROUND_MIDDLE1;
    public static __VSSYSCOLOREX3 VSCOLOR_COMMANDBAR_MOUSEOVER_BACKGROUND_MIDDLE2;
    public static __VSSYSCOLOREX3 VSCOLOR_COMMANDBAR_MOUSEOVER_BACKGROUND_END;
    public static __VSSYSCOLOREX3 VSCOLOR_COMMANDBAR_OPTIONS_BACKGROUND;
    public static __VSSYSCOLOREX3 VSCOLOR_COMMANDBAR_OPTIONS_GLYPH;
    public static __VSSYSCOLOREX3 VSCOLOR_COMMANDBAR_OPTIONS_MOUSEDOWN_BACKGROUND_BEGIN;
    public static __VSSYSCOLOREX3 VSCOLOR_COMMANDBAR_OPTIONS_MOUSEDOWN_BACKGROUND_MIDDLE;
    public static __VSSYSCOLOREX3 VSCOLOR_COMMANDBAR_OPTIONS_MOUSEDOWN_BACKGROUND_END;
    public static __VSSYSCOLOREX3 VSCOLOR_COMMANDBAR_OPTIONS_MOUSEOVER_BACKGROUND_BEGIN;
    public static __VSSYSCOLOREX3 VSCOLOR_COMMANDBAR_OPTIONS_MOUSEOVER_BACKGROUND_MIDDLE1;
    public static __VSSYSCOLOREX3 VSCOLOR_COMMANDBAR_OPTIONS_MOUSEOVER_BACKGROUND_MIDDLE2;
    public static __VSSYSCOLOREX3 VSCOLOR_COMMANDBAR_OPTIONS_MOUSEOVER_BACKGROUND_END;
    public static __VSSYSCOLOREX3 VSCOLOR_COMMANDBAR_OPTIONS_MOUSEOVER_GLYPH;
    public static __VSSYSCOLOREX3 VSCOLOR_COMMANDBAR_SELECTED_BORDER;
    public static __VSSYSCOLOREX3 VSCOLOR_COMMANDBAR_TOOLBAR_BORDER;
    public static __VSSYSCOLOREX3 VSCOLOR_COMMANDBAR_TOOLBAR_SEPARATOR;
    public static __VSSYSCOLOREX3 VSCOLOR_COMMANDSHELF_BACKGROUND_GRADIENTBEGIN;
    public static __VSSYSCOLOREX3 VSCOLOR_COMMANDSHELF_BACKGROUND_GRADIENTMIDDLE;
    public static __VSSYSCOLOREX3 VSCOLOR_COMMANDSHELF_BACKGROUND_GRADIENTEND;
    public static __VSSYSCOLOREX3 VSCOLOR_COMMANDSHELF_HIGHLIGHT_GRADIENTBEGIN;
    public static __VSSYSCOLOREX3 VSCOLOR_COMMANDSHELF_HIGHLIGHT_GRADIENTMIDDLE;
    public static __VSSYSCOLOREX3 VSCOLOR_COMMANDSHELF_HIGHLIGHT_GRADIENTEND;
    public static __VSSYSCOLOREX3 VSCOLOR_DIAGREPORT_BACKGROUND;
    public static __VSSYSCOLOREX3 VSCOLOR_DIAGREPORT_SECONDARYPAGE_HEADER;
    public static __VSSYSCOLOREX3 VSCOLOR_DIAGREPORT_SECONDARYPAGE_SUBTITLE;
    public static __VSSYSCOLOREX3 VSCOLOR_DIAGREPORT_SECONDARYPAGE_TITLE;
    public static __VSSYSCOLOREX3 VSCOLOR_DIAGREPORT_SUMMARYPAGE_HEADER;
    public static __VSSYSCOLOREX3 VSCOLOR_DIAGREPORT_SUMMARYPAGE_SUBTITLE;
    public static __VSSYSCOLOREX3 VSCOLOR_DIAGREPORT_SUMMARYPAGE_TITLE;
    public static __VSSYSCOLOREX3 VSCOLOR_DIAGREPORT_TEXT;
    public static __VSSYSCOLOREX3 VSCOLOR_DOCKTARGET_BACKGROUND;
    public static __VSSYSCOLOREX3 VSCOLOR_DOCKTARGET_BORDER;
    public static __VSSYSCOLOREX3 VSCOLOR_DOCKTARGET_BUTTON_BACKGROUND_BEGIN;
    public static __VSSYSCOLOREX3 VSCOLOR_DOCKTARGET_BUTTON_BACKGROUND_END;
    public static __VSSYSCOLOREX3 VSCOLOR_DOCKTARGET_BUTTON_BORDER;
    public static __VSSYSCOLOREX3 VSCOLOR_DOCKTARGET_GLYPH_BACKGROUND_BEGIN;
    public static __VSSYSCOLOREX3 VSCOLOR_DOCKTARGET_GLYPH_BACKGROUND_END;
    public static __VSSYSCOLOREX3 VSCOLOR_DOCKTARGET_GLYPH_ARROW;
    public static __VSSYSCOLOREX3 VSCOLOR_DOCKTARGET_GLYPH_BORDER;
    public static __VSSYSCOLOREX3 VSCOLOR_DROPDOWN_BACKGROUND;
    public static __VSSYSCOLOREX3 VSCOLOR_DROPDOWN_BORDER;
    public static __VSSYSCOLOREX3 VSCOLOR_DROPDOWN_DISABLED_BACKGROUND;
    public static __VSSYSCOLOREX3 VSCOLOR_DROPDOWN_DISABLED_BORDER;
    public static __VSSYSCOLOREX3 VSCOLOR_DROPDOWN_DISABLED_GLYPH;
    public static __VSSYSCOLOREX3 VSCOLOR_DROPDOWN_GLYPH;
    public static __VSSYSCOLOREX3 VSCOLOR_DROPDOWN_MOUSEDOWN_BACKGROUND;
    public static __VSSYSCOLOREX3 VSCOLOR_DROPDOWN_MOUSEDOWN_BORDER;
    public static __VSSYSCOLOREX3 VSCOLOR_DROPDOWN_MOUSEOVER_BACKGROUND_BEGIN;
    public static __VSSYSCOLOREX3 VSCOLOR_DROPDOWN_MOUSEOVER_BACKGROUND_MIDDLE1;
    public static __VSSYSCOLOREX3 VSCOLOR_DROPDOWN_MOUSEOVER_BACKGROUND_MIDDLE2;
    public static __VSSYSCOLOREX3 VSCOLOR_DROPDOWN_MOUSEOVER_BACKGROUND_END;
    public static __VSSYSCOLOREX3 VSCOLOR_DROPDOWN_MOUSEOVER_BORDER;
    public static __VSSYSCOLOREX3 VSCOLOR_DROPDOWN_MOUSEOVER_GLYPH;
    public static __VSSYSCOLOREX3 VSCOLOR_DROPDOWN_POPUP_BACKGROUND_BEGIN;
    public static __VSSYSCOLOREX3 VSCOLOR_DROPDOWN_POPUP_BACKGROUND_END;
    public static __VSSYSCOLOREX3 VSCOLOR_DROPDOWN_POPUP_BORDER;
    public static __VSSYSCOLOREX3 VSCOLOR_DROPSHADOW_BACKGROUND;
    public static __VSSYSCOLOREX3 VSCOLOR_ENVIRONMENT_BACKGROUND_GRADIENTMIDDLE1;
    public static __VSSYSCOLOREX3 VSCOLOR_ENVIRONMENT_BACKGROUND_GRADIENTMIDDLE2;
    public static __VSSYSCOLOREX3 VSCOLOR_ENVIRONMENT_BACKGROUND_TEXTURE1;
    public static __VSSYSCOLOREX3 VSCOLOR_ENVIRONMENT_BACKGROUND_TEXTURE2;
    public static __VSSYSCOLOREX3 VSCOLOR_EXTENSIONMANAGER_STAR_HIGHLIGHT1;
    public static __VSSYSCOLOREX3 VSCOLOR_EXTENSIONMANAGER_STAR_HIGHLIGHT2;
    public static __VSSYSCOLOREX3 VSCOLOR_EXTENSIONMANAGER_STAR_INACTIVE1;
    public static __VSSYSCOLOREX3 VSCOLOR_EXTENSIONMANAGER_STAR_INACTIVE2;
    public static __VSSYSCOLOREX3 VSCOLOR_FILETAB_HOT_BORDER;
    public static __VSSYSCOLOREX3 VSCOLOR_FILETAB_HOT_TEXT;
    public static __VSSYSCOLOREX3 VSCOLOR_FILETAB_HOT_GLYPH;
    public static __VSSYSCOLOREX3 VSCOLOR_FILETAB_INACTIVE_GRADIENTTOP;
    public static __VSSYSCOLOREX3 VSCOLOR_FILETAB_INACTIVE_GRADIENTBOTTOM;
    public static __VSSYSCOLOREX3 VSCOLOR_FILETAB_INACTIVE_DOCUMENTBORDER_BACKGROUND;
    public static __VSSYSCOLOREX3 VSCOLOR_FILETAB_INACTIVE_DOCUMENTBORDER_EDGE;
    public static __VSSYSCOLOREX3 VSCOLOR_FILETAB_INACTIVE_TEXT;
    public static __VSSYSCOLOREX3 VSCOLOR_FILETAB_LASTACTIVE_GRADIENTTOP;
    public static __VSSYSCOLOREX3 VSCOLOR_FILETAB_LASTACTIVE_GRADIENTMIDDLE1;
    public static __VSSYSCOLOREX3 VSCOLOR_FILETAB_LASTACTIVE_GRADIENTMIDDLE2;
    public static __VSSYSCOLOREX3 VSCOLOR_FILETAB_LASTACTIVE_GRADIENTBOTTOM;
    public static __VSSYSCOLOREX3 VSCOLOR_FILETAB_LASTACTIVE_DOCUMENTBORDER_BACKGROUND;
    public static __VSSYSCOLOREX3 VSCOLOR_FILETAB_LASTACTIVE_DOCUMENTBORDER_EDGE;
    public static __VSSYSCOLOREX3 VSCOLOR_FILETAB_LASTACTIVE_TEXT;
    public static __VSSYSCOLOREX3 VSCOLOR_FILETAB_LASTACTIVE_GLYPH;
    public static __VSSYSCOLOREX3 VSCOLOR_FILETAB_SELECTED_GRADIENTMIDDLE1;
    public static __VSSYSCOLOREX3 VSCOLOR_FILETAB_SELECTED_GRADIENTMIDDLE2;
    public static __VSSYSCOLOREX3 VSCOLOR_NEWPROJECT_BACKGROUND;
    public static __VSSYSCOLOREX3 VSCOLOR_NEWPROJECT_PROVIDER_HOVER_FOREGROUND;
    public static __VSSYSCOLOREX3 VSCOLOR_NEWPROJECT_PROVIDER_HOVER_BEGIN;
    public static __VSSYSCOLOREX3 VSCOLOR_NEWPROJECT_PROVIDER_HOVER_MIDDLE1;
    public static __VSSYSCOLOREX3 VSCOLOR_NEWPROJECT_PROVIDER_HOVER_MIDDLE2;
    public static __VSSYSCOLOREX3 VSCOLOR_NEWPROJECT_PROVIDER_HOVER_END;
    public static __VSSYSCOLOREX3 VSCOLOR_NEWPROJECT_PROVIDER_INACTIVE_FOREGROUND;
    public static __VSSYSCOLOREX3 VSCOLOR_NEWPROJECT_PROVIDER_INACTIVE_BEGIN;
    public static __VSSYSCOLOREX3 VSCOLOR_NEWPROJECT_PROVIDER_INACTIVE_END;
    public static __VSSYSCOLOREX3 VSCOLOR_NEWPROJECT_ITEM_SELECTED_BORDER;
    public static __VSSYSCOLOREX3 VSCOLOR_NEWPROJECT_ITEM_SELECTED;
    public static __VSSYSCOLOREX3 VSCOLOR_NEWPROJECT_ITEM_INACTIVE_BEGIN;
    public static __VSSYSCOLOREX3 VSCOLOR_NEWPROJECT_ITEM_INACTIVE_END;
    public static __VSSYSCOLOREX3 VSCOLOR_NEWPROJECT_ITEM_INACTIVE_BORDER;
    public static __VSSYSCOLOREX3 VSCOLOR_PAGE_CONTENTEXPANDER_CHEVRON;
    public static __VSSYSCOLOREX3 VSCOLOR_PAGE_CONTENTEXPANDER_SEPARATOR;
    public static __VSSYSCOLOREX3 VSCOLOR_PAGE_SIDEBAREXPANDER_BODY;
    public static __VSSYSCOLOREX3 VSCOLOR_PAGE_SIDEBAREXPANDER_CHEVRON;
    public static __VSSYSCOLOREX3 VSCOLOR_PAGE_SIDEBAREXPANDER_HEADER;
    public static __VSSYSCOLOREX3 VSCOLOR_PAGE_SIDEBAREXPANDER_HEADER_HOVER;
    public static __VSSYSCOLOREX3 VSCOLOR_PAGE_SIDEBAREXPANDER_HEADER_PRESSED;
    public static __VSSYSCOLOREX3 VSCOLOR_PAGE_SIDEBAREXPANDER_SEPARATOR;
    public static __VSSYSCOLOREX3 VSCOLOR_PAGE_SIDEBAREXPANDER_TEXT;
    public static __VSSYSCOLOREX3 VSCOLOR_SCROLLBAR_ARROW_BACKGROUND;
    public static __VSSYSCOLOREX3 VSCOLOR_SCROLLBAR_ARROW_DISABLED_BACKGROUND;
    public static __VSSYSCOLOREX3 VSCOLOR_SCROLLBAR_ARROW_MOUSEOVER_BACKGROUND;
    public static __VSSYSCOLOREX3 VSCOLOR_SCROLLBAR_ARROW_PRESSED_BACKGROUND;
    public static __VSSYSCOLOREX3 VSCOLOR_SCROLLBAR_BACKGROUND;
    public static __VSSYSCOLOREX3 VSCOLOR_SCROLLBAR_DISABLED_BACKGROUND;
    public static __VSSYSCOLOREX3 VSCOLOR_SCROLLBAR_THUMB_BACKGROUND;
    public static __VSSYSCOLOREX3 VSCOLOR_SCROLLBAR_THUMB_BORDER;
    public static __VSSYSCOLOREX3 VSCOLOR_SCROLLBAR_THUMB_GLYPH;
    public static __VSSYSCOLOREX3 VSCOLOR_SCROLLBAR_THUMB_MOUSEOVER_BACKGROUND;
    public static __VSSYSCOLOREX3 VSCOLOR_SCROLLBAR_THUMB_PRESSED_BACKGROUND;
    public static __VSSYSCOLOREX3 VSCOLOR_SEARCHBOX_BACKGROUND;
    public static __VSSYSCOLOREX3 VSCOLOR_SEARCHBOX_BORDER;
    public static __VSSYSCOLOREX3 VSCOLOR_SEARCHBOX_MOUSEOVER_BACKGROUND_BEGIN;
    public static __VSSYSCOLOREX3 VSCOLOR_SEARCHBOX_MOUSEOVER_BACKGROUND_MIDDLE1;
    public static __VSSYSCOLOREX3 VSCOLOR_SEARCHBOX_MOUSEOVER_BACKGROUND_MIDDLE2;
    public static __VSSYSCOLOREX3 VSCOLOR_SEARCHBOX_MOUSEOVER_BACKGROUND_END;
    public static __VSSYSCOLOREX3 VSCOLOR_SEARCHBOX_MOUSEOVER_BORDER;
    public static __VSSYSCOLOREX3 VSCOLOR_SEARCHBOX_PRESSED_BACKGROUND;
    public static __VSSYSCOLOREX3 VSCOLOR_SEARCHBOX_PRESSED_BORDER;
    public static __VSSYSCOLOREX3 VSCOLOR_STARTPAGE_BACKGROUND_GRADIENTBEGIN;
    public static __VSSYSCOLOREX3 VSCOLOR_STARTPAGE_BACKGROUND_GRADIENTEND;
    public static __VSSYSCOLOREX3 VSCOLOR_STARTPAGE_BUTTON_BORDER;
    public static __VSSYSCOLOREX3 VSCOLOR_STARTPAGE_BUTTON_MOUSEOVER_BACKGROUND_BEGIN;
    public static __VSSYSCOLOREX3 VSCOLOR_STARTPAGE_BUTTON_MOUSEOVER_BACKGROUND_END;
    public static __VSSYSCOLOREX3 VSCOLOR_STARTPAGE_BUTTON_MOUSEOVER_BACKGROUND_MIDDLE1;
    public static __VSSYSCOLOREX3 VSCOLOR_STARTPAGE_BUTTON_MOUSEOVER_BACKGROUND_MIDDLE2;
    public static __VSSYSCOLOREX3 VSCOLOR_STARTPAGE_BUTTON_PINNED;
    public static __VSSYSCOLOREX3 VSCOLOR_STARTPAGE_BUTTON_PIN_DOWN;
    public static __VSSYSCOLOREX3 VSCOLOR_STARTPAGE_BUTTON_PIN_HOVER;
    public static __VSSYSCOLOREX3 VSCOLOR_STARTPAGE_BUTTON_UNPINNED;
    public static __VSSYSCOLOREX3 VSCOLOR_STARTPAGE_BUTTONTEXT;
    public static __VSSYSCOLOREX3 VSCOLOR_STARTPAGE_BUTTONTEXT_HOVER;
    public static __VSSYSCOLOREX3 VSCOLOR_STARTPAGE_SELECTEDITEM_BACKGROUND;
    public static __VSSYSCOLOREX3 VSCOLOR_STARTPAGE_SELECTEDITEM_STROKE;
    public static __VSSYSCOLOREX3 VSCOLOR_STARTPAGE_SEPARATOR;
    public static __VSSYSCOLOREX3 VSCOLOR_STARTPAGE_TAB_BACKGROUND_BEGIN;
    public static __VSSYSCOLOREX3 VSCOLOR_STARTPAGE_TAB_BACKGROUND_END;
    public static __VSSYSCOLOREX3 VSCOLOR_STARTPAGE_TAB_MOUSEOVER_BACKGROUND_BEGIN;
    public static __VSSYSCOLOREX3 VSCOLOR_STARTPAGE_TAB_MOUSEOVER_BACKGROUND_END;
    public static __VSSYSCOLOREX3 VSCOLOR_STARTPAGE_TEXT_BODY;
    public static __VSSYSCOLOREX3 VSCOLOR_STARTPAGE_TEXT_BODY_SELECTED;
    public static __VSSYSCOLOREX3 VSCOLOR_STARTPAGE_TEXT_BODY_UNSELECTED;
    public static __VSSYSCOLOREX3 VSCOLOR_STARTPAGE_TEXT_CONTROL_LINK_SELECTED;
    public static __VSSYSCOLOREX3 VSCOLOR_STARTPAGE_TEXT_CONTROL_LINK_SELECTED_HOVER;
    public static __VSSYSCOLOREX3 VSCOLOR_STARTPAGE_TEXT_DATE;
    public static __VSSYSCOLOREX3 VSCOLOR_STARTPAGE_TEXT_HEADING;
    public static __VSSYSCOLOREX3 VSCOLOR_STARTPAGE_TEXT_HEADING_MOUSEOVER;
    public static __VSSYSCOLOREX3 VSCOLOR_STARTPAGE_TEXT_HEADING_SELECTED;
    public static __VSSYSCOLOREX3 VSCOLOR_STARTPAGE_TEXT_SUBHEADING;
    public static __VSSYSCOLOREX3 VSCOLOR_STARTPAGE_TEXT_SUBHEADING_MOUSEOVER;
    public static __VSSYSCOLOREX3 VSCOLOR_STARTPAGE_TEXT_SUBHEADING_SELECTED;
    public static __VSSYSCOLOREX3 VSCOLOR_STARTPAGE_UNSELECTEDITEM_BACKGROUND_BEGIN;
    public static __VSSYSCOLOREX3 VSCOLOR_STARTPAGE_UNSELECTEDITEM_BACKGROUND_END;
    public static __VSSYSCOLOREX3 VSCOLOR_STARTPAGE_UNSELECTEDITEM_STROKE;
    public static __VSSYSCOLOREX3 VSCOLOR_STATUSBAR_TEXT;
    public static __VSSYSCOLOREX3 VSCOLOR_TITLEBAR_ACTIVE_GRADIENTMIDDLE1;
    public static __VSSYSCOLOREX3 VSCOLOR_TITLEBAR_ACTIVE_GRADIENTMIDDLE2;
    public static __VSSYSCOLOREX3 VSCOLOR_TOOLBOX_SELECTED_HEADING_BEGIN;
    public static __VSSYSCOLOREX3 VSCOLOR_TOOLBOX_SELECTED_HEADING_MIDDLE1;
    public static __VSSYSCOLOREX3 VSCOLOR_TOOLBOX_SELECTED_HEADING_MIDDLE2;
    public static __VSSYSCOLOREX3 VSCOLOR_TOOLBOX_SELECTED_HEADING_END;
    public static __VSSYSCOLOREX3 VSCOLOR_TOOLWINDOW_BUTTON_INACTIVE_GLYPH;
    public static __VSSYSCOLOREX3 VSCOLOR_TOOLWINDOW_BUTTON_INACTIVE;
    public static __VSSYSCOLOREX3 VSCOLOR_TOOLWINDOW_BUTTON_INACTIVE_BORDER;
    public static __VSSYSCOLOREX3 VSCOLOR_TOOLWINDOW_BUTTON_HOVER_INACTIVE_GLYPH;
    public static __VSSYSCOLOREX3 VSCOLOR_TOOLWINDOW_BUTTON_DOWN_INACTIVE_GLYPH;
    public static __VSSYSCOLOREX3 VSCOLOR_TOOLWINDOW_BUTTON_ACTIVE_GLYPH;
    public static __VSSYSCOLOREX3 VSCOLOR_TOOLWINDOW_BUTTON_HOVER_ACTIVE_GLYPH;
    public static __VSSYSCOLOREX3 VSCOLOR_TOOLWINDOW_BUTTON_DOWN_ACTIVE_GLYPH;
    public static __VSSYSCOLOREX3 VSCOLOR_TOOLWINDOW_CONTENTTAB_GRADIENTBEGIN;
    public static __VSSYSCOLOREX3 VSCOLOR_TOOLWINDOW_CONTENTTAB_GRADIENTEND;
    public static __VSSYSCOLOREX3 VSCOLOR_TOOLWINDOW_FLOATING_FRAME;
    public static __VSSYSCOLOREX3 VSCOLOR_TOOLWINDOW_TAB_MOUSEOVER_BACKGROUND_BEGIN;
    public static __VSSYSCOLOREX3 VSCOLOR_TOOLWINDOW_TAB_MOUSEOVER_BACKGROUND_END;
    public static __VSSYSCOLOREX3 VSCOLOR_TOOLWINDOW_TAB_MOUSEOVER_BORDER;
    public static __VSSYSCOLOREX3 VSCOLOR_TOOLWINDOW_TAB_MOUSEOVER_TEXT;
    public static __VSSYSCOLOREX3 VSCOLOR_VIZSURFACE_BROWN_DARK;
    public static __VSSYSCOLOREX3 VSCOLOR_VIZSURFACE_BROWN_LIGHT;
    public static __VSSYSCOLOREX3 VSCOLOR_VIZSURFACE_BROWN_MEDIUM;
    public static __VSSYSCOLOREX3 VSCOLOR_VIZSURFACE_DARKGOLD_DARK;
    public static __VSSYSCOLOREX3 VSCOLOR_VIZSURFACE_DARKGOLD_LIGHT;
    public static __VSSYSCOLOREX3 VSCOLOR_VIZSURFACE_DARKGOLD_MEDIUM;
    public static __VSSYSCOLOREX3 VSCOLOR_VIZSURFACE_GOLD_DARK;
    public static __VSSYSCOLOREX3 VSCOLOR_VIZSURFACE_GOLD_LIGHT;
    public static __VSSYSCOLOREX3 VSCOLOR_VIZSURFACE_GOLD_MEDIUM;
    public static __VSSYSCOLOREX3 VSCOLOR_VIZSURFACE_GREEN_DARK;
    public static __VSSYSCOLOREX3 VSCOLOR_VIZSURFACE_GREEN_LIGHT;
    public static __VSSYSCOLOREX3 VSCOLOR_VIZSURFACE_GREEN_MEDIUM;
    public static __VSSYSCOLOREX3 VSCOLOR_VIZSURFACE_PLUM_DARK;
    public static __VSSYSCOLOREX3 VSCOLOR_VIZSURFACE_PLUM_LIGHT;
    public static __VSSYSCOLOREX3 VSCOLOR_VIZSURFACE_PLUM_MEDIUM;
    public static __VSSYSCOLOREX3 VSCOLOR_VIZSURFACE_RED_DARK;
    public static __VSSYSCOLOREX3 VSCOLOR_VIZSURFACE_RED_LIGHT;
    public static __VSSYSCOLOREX3 VSCOLOR_VIZSURFACE_RED_MEDIUM;
    public static __VSSYSCOLOREX3 VSCOLOR_VIZSURFACE_SOFTBLUE_DARK;
    public static __VSSYSCOLOREX3 VSCOLOR_VIZSURFACE_SOFTBLUE_LIGHT;
    public static __VSSYSCOLOREX3 VSCOLOR_VIZSURFACE_SOFTBLUE_MEDIUM;
    public static __VSSYSCOLOREX3 VSCOLOR_VIZSURFACE_STEELBLUE_DARK;
    public static __VSSYSCOLOREX3 VSCOLOR_VIZSURFACE_STEELBLUE_LIGHT;
    public static __VSSYSCOLOREX3 VSCOLOR_VIZSURFACE_STEELBLUE_MEDIUM;
    public static __VSSYSCOLOREX3 VSCOLOR_VIZSURFACE_STRONGBLUE_DARK;
    public static __VSSYSCOLOREX3 VSCOLOR_VIZSURFACE_STRONGBLUE_LIGHT;
    public static __VSSYSCOLOREX3 VSCOLOR_VIZSURFACE_STRONGBLUE_MEDIUM;
    public static __VSSYSCOLOREX3 VSCOLOR_LASTEX3;
}
public enum Microsoft.VisualStudio.Shell.Interop.__VSTABBEDMODE : Enum {
    public int value__;
    public static __VSTABBEDMODE VSTABBEDMODE_NotTabbed;
    public static __VSTABBEDMODE VSTABBEDMODE_SelectedTab;
    public static __VSTABBEDMODE VSTABBEDMODE_Tabbed;
}
public enum Microsoft.VisualStudio.Shell.Interop.__VSTASKCONTINUATIONOPTIONS : Enum {
    public int value__;
    public static __VSTASKCONTINUATIONOPTIONS VSTCO_None;
    public static __VSTASKCONTINUATIONOPTIONS VSTCO_PreferFairness;
    public static __VSTASKCONTINUATIONOPTIONS VSTCO_LongRunning;
    public static __VSTASKCONTINUATIONOPTIONS VSTCO_AttachedToParent;
    public static __VSTASKCONTINUATIONOPTIONS VSTCO_DenyChildAttach;
    public static __VSTASKCONTINUATIONOPTIONS VSTCO_LazyCancelation;
    public static __VSTASKCONTINUATIONOPTIONS VSTCO_NotOnRanToCompletion;
    public static __VSTASKCONTINUATIONOPTIONS VSTCO_NotOnFaulted;
    public static __VSTASKCONTINUATIONOPTIONS VSTCO_OnlyOnCanceled;
    public static __VSTASKCONTINUATIONOPTIONS VSTCO_NotOnCanceled;
    public static __VSTASKCONTINUATIONOPTIONS VSTCO_OnlyOnFaulted;
    public static __VSTASKCONTINUATIONOPTIONS VSTCO_OnlyOnRanToCompletion;
    public static __VSTASKCONTINUATIONOPTIONS VSTCO_ExecuteSynchronously;
    public static __VSTASKCONTINUATIONOPTIONS VSTCO_IndependentlyCanceled;
    public static __VSTASKCONTINUATIONOPTIONS VSTCO_NotCancelable;
    public static __VSTASKCONTINUATIONOPTIONS VSTCO_Default;
}
public enum Microsoft.VisualStudio.Shell.Interop.__VSTASKCONTINUATIONOPTIONS2 : Enum {
    public int value__;
    public static __VSTASKCONTINUATIONOPTIONS2 VSTCO_CancelWithParent;
}
public enum Microsoft.VisualStudio.Shell.Interop.__VSTASKCREATIONOPTIONS : Enum {
    public int value__;
    public static __VSTASKCREATIONOPTIONS VSTCRO_None;
    public static __VSTASKCREATIONOPTIONS VSTCRO_PreferFairness;
    public static __VSTASKCREATIONOPTIONS VSTCRO_LongRunning;
    public static __VSTASKCREATIONOPTIONS VSTCRO_AttachedToParent;
    public static __VSTASKCREATIONOPTIONS VSTCRO_DenyChildAttach;
    public static __VSTASKCREATIONOPTIONS VSTCRO_NotCancelable;
}
public enum Microsoft.VisualStudio.Shell.Interop.__VSTASKCREATIONOPTIONS2 : Enum {
    public int value__;
    public static __VSTASKCREATIONOPTIONS2 VSTCRO_CancelWithParent;
}
public enum Microsoft.VisualStudio.Shell.Interop.__VSTASKLISTSELECTIONSCROLLPOS : Enum {
    public int value__;
    public static __VSTASKLISTSELECTIONSCROLLPOS TSSP_NOSCROLL;
    public static __VSTASKLISTSELECTIONSCROLLPOS TSSP_CENTERCARET;
    public static __VSTASKLISTSELECTIONSCROLLPOS TSSP_CARETATTOP;
    public static __VSTASKLISTSELECTIONSCROLLPOS TSSP_CARETATBOTTOM;
    public static __VSTASKLISTSELECTIONSCROLLPOS TSSP_MINSCROLL;
    public static __VSTASKLISTSELECTIONSCROLLPOS TSSP_SHOWALL;
}
public enum Microsoft.VisualStudio.Shell.Interop.__VSTASKLISTSELECTIONTYPE : Enum {
    public int value__;
    public static __VSTASKLISTSELECTIONTYPE TST_REPLACESEL;
    public static __VSTASKLISTSELECTIONTYPE TST_EXTENDSEL;
    public static __VSTASKLISTSELECTIONTYPE TST_ADDTOSEL;
}
[FlagsAttribute]
public enum Microsoft.VisualStudio.Shell.Interop.__VSTASKPROVIDERFLAGS : Enum {
    public int value__;
    public static __VSTASKPROVIDERFLAGS TPF_ALWAYSVISIBLE;
    public static __VSTASKPROVIDERFLAGS TPF_NOAUTOROUTING;
}
public enum Microsoft.VisualStudio.Shell.Interop.__VSTASKRUNCONTEXT : Enum {
    public int value__;
    public static __VSTASKRUNCONTEXT VSTC_BACKGROUNDTHREAD;
    public static __VSTASKRUNCONTEXT VSTC_UITHREAD_SEND;
    public static __VSTASKRUNCONTEXT VSTC_UITHREAD_BACKGROUND_PRIORITY;
    public static __VSTASKRUNCONTEXT VSTC_UITHREAD_IDLE_PRIORITY;
    public static __VSTASKRUNCONTEXT VSTC_CURRENTCONTEXT;
    public static __VSTASKRUNCONTEXT VSTC_BACKGROUNDTHREAD_LOW_IO_PRIORITY;
    public static __VSTASKRUNCONTEXT VSTC_UITHREAD_NORMAL_PRIORITY;
}
[FlagsAttribute]
public enum Microsoft.VisualStudio.Shell.Interop.__VSTASKVALUEFLAGS : Enum {
    public int value__;
    public static __VSTASKVALUEFLAGS TVF_EDITABLE;
    public static __VSTASKVALUEFLAGS TVF_ENUM;
    public static __VSTASKVALUEFLAGS TVF_BINARY_STATE;
    public static __VSTASKVALUEFLAGS TVF_HORZ_RIGHT;
    public static __VSTASKVALUEFLAGS TVF_HORZ_CENTER;
    public static __VSTASKVALUEFLAGS TVF_STRIKETHROUGH;
    public static __VSTASKVALUEFLAGS TVF_FILENAME;
}
public enum Microsoft.VisualStudio.Shell.Interop.__VSTASKVALUETYPE : Enum {
    public int value__;
    public static __VSTASKVALUETYPE TVT_NULL;
    public static __VSTASKVALUETYPE TVT_TEXT;
    public static __VSTASKVALUETYPE TVT_LINKTEXT;
    public static __VSTASKVALUETYPE TVT_BASE10;
    public static __VSTASKVALUETYPE TVT_IMAGE;
}
public enum Microsoft.VisualStudio.Shell.Interop.__VSTASKWAITOPTIONS : Enum {
    public int value__;
    public static __VSTASKWAITOPTIONS VSTWO_None;
    public static __VSTASKWAITOPTIONS VSTWO_AbortOnTaskCancellation;
}
[FlagsAttribute]
public enum Microsoft.VisualStudio.Shell.Interop.__VSTRANSACCELEXFLAGS : Enum {
    public int value__;
    public static __VSTRANSACCELEXFLAGS VSTAEXF_Default;
    public static __VSTRANSACCELEXFLAGS VSTAEXF_NoFireCommand;
    public static __VSTRANSACCELEXFLAGS VSTAEXF_IgnoreActiveKBScopes;
    public static __VSTRANSACCELEXFLAGS VSTAEXF_UseTextEditorKBScope;
    public static __VSTRANSACCELEXFLAGS VSTAEXF_UseGlobalKBScope;
    public static __VSTRANSACCELEXFLAGS VSTAEXF_AllowModalState;
}
[FlagsAttribute]
public enum Microsoft.VisualStudio.Shell.Interop.__VSTRANSACCELFLAGS : Enum {
    public int value__;
    public static __VSTRANSACCELFLAGS VSTAF_Default;
    public static __VSTRANSACCELFLAGS VSTAF_NoFireCommand;
}
[FlagsAttribute]
public enum Microsoft.VisualStudio.Shell.Interop.__VSTWDFLAGS : Enum {
    public int value__;
    public static __VSTWDFLAGS VSTWDFLAGS_NOFLAGS;
    public static __VSTWDFLAGS VSTWDFLAGS_CANCELLABLE;
    public static __VSTWDFLAGS VSTWDFLAGS_TOPMOST;
}
public enum Microsoft.VisualStudio.Shell.Interop.__VSUIACCELMODIFIERS : Enum {
    public int value__;
    public static __VSUIACCELMODIFIERS VSAM_NONE;
    public static __VSUIACCELMODIFIERS VSAM_SHIFT;
    public static __VSUIACCELMODIFIERS VSAM_CONTROL;
    public static __VSUIACCELMODIFIERS VSAM_ALT;
    public static __VSUIACCELMODIFIERS VSAM_WINDOWS;
}
public enum Microsoft.VisualStudio.Shell.Interop.__VSUIDATAFORMAT : Enum {
    public int value__;
    public static __VSUIDATAFORMAT VSDF_RESERVED;
    public static __VSUIDATAFORMAT VSDF_INVALID;
    public static __VSUIDATAFORMAT VSDF_BUILTIN;
    public static __VSUIDATAFORMAT VSDF_WIN32;
    public static __VSUIDATAFORMAT VSDF_WINFORMS;
    public static __VSUIDATAFORMAT VSDF_WPF;
}
public enum Microsoft.VisualStudio.Shell.Interop.__VSUL_ERRORLEVEL : Enum {
    public int value__;
    public static __VSUL_ERRORLEVEL VSUL_INFORMATIONAL;
    public static __VSUL_ERRORLEVEL VSUL_WARNING;
    public static __VSUL_ERRORLEVEL VSUL_ERROR;
    public static __VSUL_ERRORLEVEL VSUL_STATUSMSG;
    public static __VSUL_ERRORLEVEL VSUL_PROJECT_HYPERLINK;
}
[FlagsAttribute]
public enum Microsoft.VisualStudio.Shell.Interop.__VSUPGRADEPROJFLAGS : Enum {
    public int value__;
    public static __VSUPGRADEPROJFLAGS UPF_SILENTMIGRATE;
}
public enum Microsoft.VisualStudio.Shell.Interop.__VSURLZONE : Enum {
    public int value__;
    public static __VSURLZONE URLZONE_VSAPP;
}
public enum Microsoft.VisualStudio.Shell.Interop.__VSVPROPID : Enum {
    public int value__;
    public static __VSVPROPID VSVPROPID_NIL;
    public static __VSVPROPID VSVPROPID_BitmapGuidPackage;
    public static __VSVPROPID VSVPROPID_BitmapResource;
    public static __VSVPROPID VSVPROPID_BitmapIndex;
    public static __VSVPROPID VSVPROPID_FIRST;
}
public enum Microsoft.VisualStudio.Shell.Interop.__VSVPROPID2 : Enum {
    public int value__;
    public static __VSVPROPID2 VSVPROPID_IconMonikerGuid;
    public static __VSVPROPID2 VSVPROPID_IconMonikerId;
    public static __VSVPROPID2 VSVPROPID2_FIRST;
}
public enum Microsoft.VisualStudio.Shell.Interop.__VSWBCUSTOMURL : Enum {
    public int value__;
    public static __VSWBCUSTOMURL VSWBCU_Home;
    public static __VSWBCUSTOMURL VSWBCU_Search;
    public static __VSWBCUSTOMURL VSWBCU_Credits;
}
public enum Microsoft.VisualStudio.Shell.Interop.__VSWBDOCINFOINDEX : Enum {
    public int value__;
    public static __VSWBDOCINFOINDEX VSWBDI_DocDispatch;
    public static __VSWBDOCINFOINDEX VSWBDI_DocName;
    public static __VSWBDOCINFOINDEX VSWBDI_DocURL;
    public static __VSWBDOCINFOINDEX VSWBDI_DocType;
    public static __VSWBDOCINFOINDEX VSWBDI_DocStatusText;
    public static __VSWBDOCINFOINDEX VSWBDI_DocBusyStatus;
    public static __VSWBDOCINFOINDEX VSWBDI_DocReadyState;
    public static __VSWBDOCINFOINDEX VSWBDI_DocSize;
    public static __VSWBDOCINFOINDEX VSWBDI_DocLastCtxMenuPos;
}
[FlagsAttribute]
public enum Microsoft.VisualStudio.Shell.Interop.__VSWBNAVIGATEFLAGS : Enum {
    public int value__;
    public static __VSWBNAVIGATEFLAGS VSNWB_ForceNew;
    public static __VSWBNAVIGATEFLAGS VSNWB_AddToMRU;
    public static __VSWBNAVIGATEFLAGS VSNWB_VsURLOnly;
    public static __VSWBNAVIGATEFLAGS VSNWB_WebURLOnly;
}
public enum Microsoft.VisualStudio.Shell.Interop.__VSWBPREVIEWOPTIONS : Enum {
    public int value__;
    public static __VSWBPREVIEWOPTIONS VSWBP_FrameMdiChild;
    public static __VSWBPREVIEWOPTIONS VSWBP_FrameFloat;
    public static __VSWBPREVIEWOPTIONS VSWBP_FrameDock;
}
public enum Microsoft.VisualStudio.Shell.Interop.__VSWBREFRESHTYPE : Enum {
    public int value__;
    public static __VSWBREFRESHTYPE VSWBR_Normal;
    public static __VSWBREFRESHTYPE VSWBR_IfExpired;
    public static __VSWBREFRESHTYPE VSWBR_Completely;
}
public enum Microsoft.VisualStudio.Shell.Interop.__VsWebProxyState : Enum {
    public int value__;
    public static __VsWebProxyState VsWebProxyState_NoCredentials;
    public static __VsWebProxyState VsWebProxyState_DefaultCredentials;
    public static __VsWebProxyState VsWebProxyState_CachedCredentials;
    public static __VsWebProxyState VsWebProxyState_PromptForCredentials;
    public static __VsWebProxyState VsWebProxyState_Abort;
}
public enum Microsoft.VisualStudio.Shell.Interop.__VSWIZARDTRUSTLEVEL : Enum {
    public int value__;
    public static __VSWIZARDTRUSTLEVEL WTL_Trusted;
    public static __VSWIZARDTRUSTLEVEL WTL_Untrusted;
    public static __VSWIZARDTRUSTLEVEL WTL_Unspecified;
}
[FlagsAttribute]
public enum Microsoft.VisualStudio.Shell.Interop.__WindowFrameTypeFlags : Enum {
    public UInt32 value__;
    public static __WindowFrameTypeFlags WINDOWFRAMETYPE_Document;
    public static __WindowFrameTypeFlags WINDOWFRAMETYPE_Tool;
    public static __WindowFrameTypeFlags WINDOWFRAMETYPE_All;
    public static __WindowFrameTypeFlags WINDOWFRAMETYPE_Uninitialized;
    public static __WindowFrameTypeFlags WINDOWFRAMETYPE_AllStates;
}
public enum Microsoft.VisualStudio.Shell.Interop.__WorkingFolderKind : Enum {
    public int value__;
    public static __WorkingFolderKind WFK_SolutionStatePersistence;
}
public enum Microsoft.VisualStudio.Shell.Interop.__XMLMEMBERDATA_DEPRECATION_TYPE : Enum {
    public int value__;
    public static __XMLMEMBERDATA_DEPRECATION_TYPE XMLMEMBERDATA_DEPRECATION_TYPE_DEPRECATE;
    public static __XMLMEMBERDATA_DEPRECATION_TYPE XMLMEMBERDATA_DEPRECATION_TYPE_REMOVE;
}
public enum Microsoft.VisualStudio.Shell.Interop.__XMLMEMBERDATA_OPTIONS : Enum {
    public int value__;
    public static __XMLMEMBERDATA_OPTIONS XMLMEMBERDATA_OPTIONS_NONE;
    public static __XMLMEMBERDATA_OPTIONS XMLMEMBERDATA_OPTIONS_PRESERVE_NEWLINES;
}
public enum Microsoft.VisualStudio.Shell.Interop.__XMLMEMBERDATA_TAGTYPE : Enum {
    public int value__;
    public static __XMLMEMBERDATA_TAGTYPE XMLMEMBERDATA_TAGTYPE_CREF;
}
public enum Microsoft.VisualStudio.Shell.Interop._AppContainerDeployOptions : Enum {
    public int value__;
    public static _AppContainerDeployOptions ACDO_ForceRegistration;
    public static _AppContainerDeployOptions ACDO_ForceCleanLayout;
    public static _AppContainerDeployOptions ACDO_UseUniqueDeployPackageIdentity;
    public static _AppContainerDeployOptions ACDO_RefreshLayoutOnly;
    public static _AppContainerDeployOptions ACDO_SetNetworkLoopback;
    public static _AppContainerDeployOptions ACDO_NetworkLoopbackEnable;
}
public enum Microsoft.VisualStudio.Shell.Interop._BROWSE_COMPONENT_SET_OPTIONS : Enum {
    public int value__;
    public static _BROWSE_COMPONENT_SET_OPTIONS BCSO_NO_REMOVE;
    public static _BROWSE_COMPONENT_SET_OPTIONS BCSO_NO_RENAME;
    public static _BROWSE_COMPONENT_SET_OPTIONS BCSO_NO_DRAG_DROP;
    public static _BROWSE_COMPONENT_SET_OPTIONS BCSO_PROJECT_REFERENCES;
}
public enum Microsoft.VisualStudio.Shell.Interop._BROWSE_COMPONENT_SET_TYPE : Enum {
    public int value__;
    public static _BROWSE_COMPONENT_SET_TYPE BCST_EXCLUDE_LIBRARIES;
    public static _BROWSE_COMPONENT_SET_TYPE BCST_INCLUDE_LIBRARIES;
}
[FlagsAttribute]
public enum Microsoft.VisualStudio.Shell.Interop._BuildSystemKindFlags : Enum {
    public int value__;
    public static _BuildSystemKindFlags BSK_MSBUILD;
}
[FlagsAttribute]
public enum Microsoft.VisualStudio.Shell.Interop._BuildSystemKindFlags2 : Enum {
    public int value__;
    public static _BuildSystemKindFlags2 BSK_MSBUILD_VS9;
    public static _BuildSystemKindFlags2 BSK_MSBUILD_VS10;
}
public enum Microsoft.VisualStudio.Shell.Interop._DEBUG_LAUNCH_OPERATION2 : Enum {
    public int value__;
    public static _DEBUG_LAUNCH_OPERATION2 DLO_AttachToHostingProcess;
    public static _DEBUG_LAUNCH_OPERATION2 DLO_StartDebuggingHostingProcess;
}
public enum Microsoft.VisualStudio.Shell.Interop._DEBUG_LAUNCH_OPERATION3 : Enum {
    public int value__;
    public static _DEBUG_LAUNCH_OPERATION3 DLO_LaunchBrowser;
}
public enum Microsoft.VisualStudio.Shell.Interop._DEBUG_LAUNCH_OPERATION4 : Enum {
    public int value__;
    public static _DEBUG_LAUNCH_OPERATION4 DLO_AppPackageDebug;
    public static _DEBUG_LAUNCH_OPERATION4 DLO_AttachToSuspendedLaunchProcess;
}
public enum Microsoft.VisualStudio.Shell.Interop._DevLicenseCheckOptions : Enum {
    public int value__;
    public static _DevLicenseCheckOptions DLCO_SilenCheckOnly;
}
[FlagsAttribute]
public enum Microsoft.VisualStudio.Shell.Interop._EDITORREGFLAGS : Enum {
    public int value__;
    public static _EDITORREGFLAGS RIEF_ENABLECACHING;
}
[FlagsAttribute]
public enum Microsoft.VisualStudio.Shell.Interop._LAUNCHPAD_FLAGS : Enum {
    public int value__;
    public static _LAUNCHPAD_FLAGS LPF_PipeStdoutToOutputWindow;
    public static _LAUNCHPAD_FLAGS LPF_PipeStdoutToTaskList;
    public static _LAUNCHPAD_FLAGS LPF_ClearOutputWindow;
    public static _LAUNCHPAD_FLAGS LPF_PauseAfterExecution;
}
[FlagsAttribute]
public enum Microsoft.VisualStudio.Shell.Interop._LAUNCHPAD_FLAGS2 : Enum {
    public int value__;
    public static _LAUNCHPAD_FLAGS2 LPF_TreatOutputAsUnicode;
}
public enum Microsoft.VisualStudio.Shell.Interop._LIB_ADDREMOVEOPTIONS : Enum {
    public int value__;
    public static _LIB_ADDREMOVEOPTIONS LARO_NONE;
    public static _LIB_ADDREMOVEOPTIONS LARO_ALREADYADDED;
    public static _LIB_ADDREMOVEOPTIONS LARO_THRUFILEOPS;
}
public enum Microsoft.VisualStudio.Shell.Interop._LIB_CATEGORY2 : Enum {
    public int value__;
    public static _LIB_CATEGORY2 LC_NIL;
    public static _LIB_CATEGORY2 LC_PHYSICALCONTAINERTYPE;
    public static _LIB_CATEGORY2 LC_HIERARCHYTYPE;
    public static _LIB_CATEGORY2 LC_MEMBERINHERITANCE;
    public static _LIB_CATEGORY2 LC_SEARCHMATCHTYPE;
    public static _LIB_CATEGORY2 LC_Last2;
}
[FlagsAttribute]
public enum Microsoft.VisualStudio.Shell.Interop._LIB_FLAGS : Enum {
    public int value__;
    public static _LIB_FLAGS LF_PROJECT;
    public static _LIB_FLAGS LF_GLOBAL;
    public static _LIB_FLAGS LF_EXPANDABLE;
    public static _LIB_FLAGS LF_HIDEINLIBPICKER;
}
[FlagsAttribute]
public enum Microsoft.VisualStudio.Shell.Interop._LIB_FLAGS2 : Enum {
    public int value__;
    public static _LIB_FLAGS2 LF_SUPPORTSPROJECTREFERENCES;
    public static _LIB_FLAGS2 LF_SUPPORTSFILTERING;
    public static _LIB_FLAGS2 LF_SUPPORTSFILTERINGWITHEXPANSION;
    public static _LIB_FLAGS2 LF_SUPPORTSCALLBROWSER;
    public static _LIB_FLAGS2 LF_SUPPORTSLISTREFERENCES;
    public static _LIB_FLAGS2 LF_SUPPORTSALWAYSUPDATE;
    public static _LIB_FLAGS2 LF_SUPPORTSBASETYPES;
    public static _LIB_FLAGS2 LF_SUPPORTSDERIVEDTYPES;
    public static _LIB_FLAGS2 LF_SUPPORTSINHERITEDMEMBERS;
    public static _LIB_FLAGS2 LF_SUPPORTSPRIVATEMEMBERS;
    public static _LIB_FLAGS2 LF_SUPPORTSCLASSDESIGNER;
    public static _LIB_FLAGS2 LF_SHOWFULLNAMESINFINDSYMBOLRESULTS;
}
public enum Microsoft.VisualStudio.Shell.Interop._LIB_LISTCAPABILITIES : Enum {
    public int value__;
    public static _LIB_LISTCAPABILITIES LLC_NONE;
    public static _LIB_LISTCAPABILITIES LLC_HASBROWSEOBJ;
    public static _LIB_LISTCAPABILITIES LLC_HASDESCPANE;
    public static _LIB_LISTCAPABILITIES LLC_HASSOURCECONTEXT;
    public static _LIB_LISTCAPABILITIES LLC_HASCOMMANDS;
    public static _LIB_LISTCAPABILITIES LLC_ALLOWDRAGDROP;
    public static _LIB_LISTCAPABILITIES LLC_ALLOWRENAME;
    public static _LIB_LISTCAPABILITIES LLC_ALLOWDELETE;
    public static _LIB_LISTCAPABILITIES LLC_ALLOWSCCOPS;
}
[FlagsAttribute]
public enum Microsoft.VisualStudio.Shell.Interop._LIB_LISTCAPABILITIES2 : Enum {
    public int value__;
    public static _LIB_LISTCAPABILITIES2 LLC_ALLOWELEMENTSEARCH;
}
[FlagsAttribute]
public enum Microsoft.VisualStudio.Shell.Interop._LIB_LISTFLAGS : Enum {
    public int value__;
    public static _LIB_LISTFLAGS LLF_NONE;
    public static _LIB_LISTFLAGS LLF_IGNORESUBSET;
    public static _LIB_LISTFLAGS LLF_TRUENESTING;
    public static _LIB_LISTFLAGS LLF_PROJECTONLY;
    public static _LIB_LISTFLAGS LLF_USESEARCHFILTER;
    public static _LIB_LISTFLAGS LLF_DONTUPDATELIST;
    public static _LIB_LISTFLAGS LLF_RESOURCEVIEW;
}
public enum Microsoft.VisualStudio.Shell.Interop._LIB_LISTTYPE : Enum {
    public int value__;
    public static _LIB_LISTTYPE LLT_HIERARCHY;
    public static _LIB_LISTTYPE LLT_NAMESPACES;
    public static _LIB_LISTTYPE LLT_CLASSES;
    public static _LIB_LISTTYPE LLT_MEMBERS;
    public static _LIB_LISTTYPE LLT_PHYSICALCONTAINERS;
    public static _LIB_LISTTYPE LLT_PACKAGE;
    public static _LIB_LISTTYPE LLT_CONTAINMENT;
    public static _LIB_LISTTYPE LLT_CONTAINEDBY;
    public static _LIB_LISTTYPE LLT_USESCLASSES;
    public static _LIB_LISTTYPE LLT_USEDBYCLASSES;
    public static _LIB_LISTTYPE LLT_NESTEDCLASSES;
    public static _LIB_LISTTYPE LLT_INHERITEDINTERFACES;
    public static _LIB_LISTTYPE LLT_INTERFACEUSEDBYCLASSES;
    public static _LIB_LISTTYPE LLT_DEFINITIONS;
    public static _LIB_LISTTYPE LLT_REFERENCES;
    public static _LIB_LISTTYPE LLT_DEFEREXPANSION;
}
public enum Microsoft.VisualStudio.Shell.Interop._LIB_LISTTYPE2 : Enum {
    public int value__;
    public static _LIB_LISTTYPE2 LLT_NIL;
    public static _LIB_LISTTYPE2 LLT_MEMBERHIERARCHY;
}
public enum Microsoft.VisualStudio.Shell.Interop._LIBCAT_ACTIVEPROJECT : Enum {
    public int value__;
    public static _LIBCAT_ACTIVEPROJECT LCAP_SHOWALWAYS;
    public static _LIBCAT_ACTIVEPROJECT LCAP_MUSTBEACTIVE;
}
public enum Microsoft.VisualStudio.Shell.Interop._LIBCAT_CLASSACCESS : Enum {
    public int value__;
    public static _LIBCAT_CLASSACCESS LCCA_PUBLIC;
    public static _LIBCAT_CLASSACCESS LCCA_PRIVATE;
    public static _LIBCAT_CLASSACCESS LCCA_PROTECTED;
    public static _LIBCAT_CLASSACCESS LCCA_PACKAGE;
    public static _LIBCAT_CLASSACCESS LCCA_FRIEND;
    public static _LIBCAT_CLASSACCESS LCCA_SEALED;
}
public enum Microsoft.VisualStudio.Shell.Interop._LIBCAT_CLASSTYPE : Enum {
    public int value__;
    public static _LIBCAT_CLASSTYPE LCCT_NSPC;
    public static _LIBCAT_CLASSTYPE LCCT_CLASS;
    public static _LIBCAT_CLASSTYPE LCCT_INTERFACE;
    public static _LIBCAT_CLASSTYPE LCCT_STRUCT;
    public static _LIBCAT_CLASSTYPE LCCT_UNION;
    public static _LIBCAT_CLASSTYPE LCCT_ENUM;
    public static _LIBCAT_CLASSTYPE LCCT_TYPEDEF;
    public static _LIBCAT_CLASSTYPE LCCT_MODULE;
    public static _LIBCAT_CLASSTYPE LCCT_INTRINSIC;
    public static _LIBCAT_CLASSTYPE LCCT_DELEGATE;
    public static _LIBCAT_CLASSTYPE LCCT_EXCEPTION;
    public static _LIBCAT_CLASSTYPE LCCT_MAP;
    public static _LIBCAT_CLASSTYPE LCCT_GLOBAL;
    public static _LIBCAT_CLASSTYPE LCCT_ERROR;
}
[FlagsAttribute]
public enum Microsoft.VisualStudio.Shell.Interop._LIBCAT_CLASSTYPE2 : Enum {
    public int value__;
    public static _LIBCAT_CLASSTYPE2 LCCT_TEMPLATE;
    public static _LIBCAT_CLASSTYPE2 LCCT_GENERIC;
    public static _LIBCAT_CLASSTYPE2 LCCT_ITERATOR;
}
[FlagsAttribute]
public enum Microsoft.VisualStudio.Shell.Interop._LIBCAT_HIERARCHYTYPE : Enum {
    public int value__;
    public static _LIBCAT_HIERARCHYTYPE LCHT_UNKNOWN;
    public static _LIBCAT_HIERARCHYTYPE LCHT_FOLDER;
    public static _LIBCAT_HIERARCHYTYPE LCHT_BASESANDINTERFACES;
    public static _LIBCAT_HIERARCHYTYPE LCHT_PROJECTREFERENCES;
    public static _LIBCAT_HIERARCHYTYPE LCHT_DERIVEDTYPES;
    public static _LIBCAT_HIERARCHYTYPE LCHT_INFO;
}
public enum Microsoft.VisualStudio.Shell.Interop._LIBCAT_HIERARCHYTYPE2 : Enum {
    public int value__;
    public static _LIBCAT_HIERARCHYTYPE2 LCHT_EXTENSIONMEMBERS;
}
public enum Microsoft.VisualStudio.Shell.Interop._LIBCAT_MEMBERACCESS : Enum {
    public int value__;
    public static _LIBCAT_MEMBERACCESS LCMA_PUBLIC;
    public static _LIBCAT_MEMBERACCESS LCMA_PRIVATE;
    public static _LIBCAT_MEMBERACCESS LCMA_PROTECTED;
    public static _LIBCAT_MEMBERACCESS LCMA_PACKAGE;
    public static _LIBCAT_MEMBERACCESS LCMA_FRIEND;
    public static _LIBCAT_MEMBERACCESS LCMA_SEALED;
}
[FlagsAttribute]
public enum Microsoft.VisualStudio.Shell.Interop._LIBCAT_MEMBERINHERITANCE : Enum {
    public int value__;
    public static _LIBCAT_MEMBERINHERITANCE LCMI_IMMEDIATE;
    public static _LIBCAT_MEMBERINHERITANCE LCMI_OVERRIDABLE;
    public static _LIBCAT_MEMBERINHERITANCE LCMI_OVERRIDEREQUIRED;
    public static _LIBCAT_MEMBERINHERITANCE LCMI_OVERRIDDEN;
    public static _LIBCAT_MEMBERINHERITANCE LCMI_NOTOVERRIDABLE;
    public static _LIBCAT_MEMBERINHERITANCE LCMI_INHERITED;
}
public enum Microsoft.VisualStudio.Shell.Interop._LIBCAT_MEMBERTYPE : Enum {
    public int value__;
    public static _LIBCAT_MEMBERTYPE LCMT_METHOD;
    public static _LIBCAT_MEMBERTYPE LCMT_FUNCTION;
    public static _LIBCAT_MEMBERTYPE LCMT_OPERATOR;
    public static _LIBCAT_MEMBERTYPE LCMT_PROPERTY;
    public static _LIBCAT_MEMBERTYPE LCMT_FIELD;
    public static _LIBCAT_MEMBERTYPE LCMT_VARIABLE;
    public static _LIBCAT_MEMBERTYPE LCMT_EVENT;
    public static _LIBCAT_MEMBERTYPE LCMT_CONSTANT;
    public static _LIBCAT_MEMBERTYPE LCMT_ENUMITEM;
    public static _LIBCAT_MEMBERTYPE LCMT_TYPEDEF;
    public static _LIBCAT_MEMBERTYPE LCMT_MAPITEM;
    public static _LIBCAT_MEMBERTYPE LCMT_DECLARATION;
    public static _LIBCAT_MEMBERTYPE LCMT_MACRO;
    public static _LIBCAT_MEMBERTYPE LCMT_ERROR;
}
[FlagsAttribute]
public enum Microsoft.VisualStudio.Shell.Interop._LIBCAT_MEMBERTYPE2 : Enum {
    public int value__;
    public static _LIBCAT_MEMBERTYPE2 LCMT_TEMPLATE;
    public static _LIBCAT_MEMBERTYPE2 LCMT_GENERIC;
}
public enum Microsoft.VisualStudio.Shell.Interop._LIBCAT_MODIFIERTYPE : Enum {
    public int value__;
    public static _LIBCAT_MODIFIERTYPE LCMDT_VIRTUAL;
    public static _LIBCAT_MODIFIERTYPE LCMDT_PUREVIRTUAL;
    public static _LIBCAT_MODIFIERTYPE LCMDT_NONVIRTUAL;
    public static _LIBCAT_MODIFIERTYPE LCMDT_FINAL;
    public static _LIBCAT_MODIFIERTYPE LCMDT_STATIC;
}
public enum Microsoft.VisualStudio.Shell.Interop._LIBCAT_NODETYPE : Enum {
    public int value__;
    public static _LIBCAT_NODETYPE LCNT_SYMBOL;
    public static _LIBCAT_NODETYPE LCNT_HIERARCHY;
    public static _LIBCAT_NODETYPE LCNT_PROJECT;
    public static _LIBCAT_NODETYPE LCNT_FOLDER;
}
[FlagsAttribute]
public enum Microsoft.VisualStudio.Shell.Interop._LIBCAT_PHYSICALCONTAINERTYPE : Enum {
    public int value__;
    public static _LIBCAT_PHYSICALCONTAINERTYPE LCPT_GLOBAL;
    public static _LIBCAT_PHYSICALCONTAINERTYPE LCPT_PROJECTREFERENCE;
    public static _LIBCAT_PHYSICALCONTAINERTYPE LCPT_PROJECT;
}
[FlagsAttribute]
public enum Microsoft.VisualStudio.Shell.Interop._LIBCAT_SEARCHMATCHTYPE : Enum {
    public int value__;
    public static _LIBCAT_SEARCHMATCHTYPE LSMT_WHOLEWORD;
    public static _LIBCAT_SEARCHMATCHTYPE LSMT_WHOLEWORD_NO_CASE;
    public static _LIBCAT_SEARCHMATCHTYPE LSMT_LEAF_WHOLEWORD;
    public static _LIBCAT_SEARCHMATCHTYPE LSMT_LEAF_WHOLEWORD_NO_CASE;
    public static _LIBCAT_SEARCHMATCHTYPE LSMT_PART_WHOLEWORD;
    public static _LIBCAT_SEARCHMATCHTYPE LSMT_PART_WHOLEWORD_NO_CASE;
    public static _LIBCAT_SEARCHMATCHTYPE LSMT_PRESTRING;
    public static _LIBCAT_SEARCHMATCHTYPE LSMT_PRESTRING_NO_CASE;
    public static _LIBCAT_SEARCHMATCHTYPE LSMT_LEAF_PRESTRING;
    public static _LIBCAT_SEARCHMATCHTYPE LSMT_LEAF_PRESTRING_NO_CASE;
    public static _LIBCAT_SEARCHMATCHTYPE LSMT_PART_PRESTRING;
    public static _LIBCAT_SEARCHMATCHTYPE LSMT_PART_PRESTRING_NO_CASE;
    public static _LIBCAT_SEARCHMATCHTYPE LSMT_SUBSTRING;
    public static _LIBCAT_SEARCHMATCHTYPE LSMT_SUBSTRING_NO_CASE;
    public static _LIBCAT_SEARCHMATCHTYPE LSMT_NO_MATCH;
}
public enum Microsoft.VisualStudio.Shell.Interop._LIBCAT_VISIBILITY : Enum {
    public int value__;
    public static _LIBCAT_VISIBILITY LCV_VISIBLE;
    public static _LIBCAT_VISIBILITY LCV_HIDDEN;
}
public enum Microsoft.VisualStudio.Shell.Interop._LIMITTOPICSOURCE : Enum {
    public int value__;
    public static _LIMITTOPICSOURCE CCW_LimKwd_SelOnly;
    public static _LIMITTOPICSOURCE CCW_LimKwd_NoAmbient;
    public static _LIMITTOPICSOURCE CCW_LimKwd_All;
    public static _LIMITTOPICSOURCE CCW_LimKwd_Last;
}
public enum Microsoft.VisualStudio.Shell.Interop._NoFrameworkDialogState : Enum {
    public int value__;
    public static _NoFrameworkDialogState NOFXDS_AlwaysShowDialog;
    public static _NoFrameworkDialogState NOFXDS_HideDialog_KeepUnloaded;
    public static _NoFrameworkDialogState NOFXDS_HideDialog_RetargetToFramework40;
}
public enum Microsoft.VisualStudio.Shell.Interop._OLELOOP2 : Enum {
    public int value__;
    public static _OLELOOP2 oleloopModelessFormWithHandles;
    public static _OLELOOP2 oleloopModelessFormWithHandlesNoIdle;
    public static _OLELOOP2 oleloopModalFormWithHandles;
    public static _OLELOOP2 oleloopModalFormWithHandlesNoIdle;
}
public enum Microsoft.VisualStudio.Shell.Interop._PersistStorageType : Enum {
    public int value__;
    public static _PersistStorageType PST_PROJECT_FILE;
    public static _PersistStorageType PST_USER_FILE;
}
public enum Microsoft.VisualStudio.Shell.Interop._ProjectLoadSecurityDialogState : Enum {
    public int value__;
    public static _ProjectLoadSecurityDialogState PLSDS_ShowAgain;
    public static _ProjectLoadSecurityDialogState PLSDS_DontShowAgainBrowse;
    public static _ProjectLoadSecurityDialogState PLSDS_DontShowAgainFullLoad;
    public static _ProjectLoadSecurityDialogState PLSDS_DontShowAgainUnload;
}
[FlagsAttribute]
public enum Microsoft.VisualStudio.Shell.Interop._SqlAddNewReferenceFlags : Enum {
    public int value__;
    public static _SqlAddNewReferenceFlags SqlAddNewReferenceFlags_DownloadSelected;
}
public enum Microsoft.VisualStudio.Shell.Interop._SqlReferenceUpdateAction : Enum {
    public int value__;
    public static _SqlReferenceUpdateAction SqlReferenceUpdateAction_None;
    public static _SqlReferenceUpdateAction SqlReferenceUpdateAction_Delete;
    public static _SqlReferenceUpdateAction SqlReferenceUpdateAction_Update;
}
[FlagsAttribute]
public enum Microsoft.VisualStudio.Shell.Interop._SqlReferenceUpdateFlags : Enum {
    public int value__;
    public static _SqlReferenceUpdateFlags SqlReferenceUpdateFlags_ForceUpdate;
}
public enum Microsoft.VisualStudio.Shell.Interop._VHS_COMMANDS : Enum {
    public int value__;
    public static _VHS_COMMANDS VHS_Default;
    public static _VHS_COMMANDS VHS_NoErrorMessages;
    public static _VHS_COMMANDS VHS_UseBrowser;
    public static _VHS_COMMANDS VHS_UseHelp;
    public static _VHS_COMMANDS VHS_Localize;
    public static _VHS_COMMANDS VHS_OutsideCollectionSpace;
}
public enum Microsoft.VisualStudio.Shell.Interop._VSCIPPROPID : Enum {
    public int value__;
    public static _VSCIPPROPID VSCIPPROPID_NIL;
    public static _VSCIPPROPID VSCIPPROPID_LookupType;
    public static _VSCIPPROPID VSCIPPROPID_Customize;
}
public enum Microsoft.VisualStudio.Shell.Interop._VsDocumentRestoreBehavior : Enum {
    public int value__;
    public static _VsDocumentRestoreBehavior SkipDocumentRestore;
    public static _VsDocumentRestoreBehavior RestoreDocuments;
}
[FlagsAttribute]
public enum Microsoft.VisualStudio.Shell.Interop._VSFILECHANGEFLAGS : Enum {
    public int value__;
    public static _VSFILECHANGEFLAGS VSFILECHG_Attr;
    public static _VSFILECHANGEFLAGS VSFILECHG_Time;
    public static _VSFILECHANGEFLAGS VSFILECHG_Size;
    public static _VSFILECHANGEFLAGS VSFILECHG_Del;
    public static _VSFILECHANGEFLAGS VSFILECHG_Add;
}
public enum Microsoft.VisualStudio.Shell.Interop._VsHelpErrors : Enum {
    public int value__;
    public static _VsHelpErrors VSHELP_E_HTMLHELP_UNKNOWN;
    public static _VsHelpErrors VSHELP_E_COLLECTIONDOESNOTEXIST;
    public static _VsHelpErrors VSHELP_E_COLLECTIONNOTREGISTERED;
    public static _VsHelpErrors VSHELP_E_REGISTRATION;
    public static _VsHelpErrors VSHELP_E_PREFERREDCOLLECTION;
}
public enum Microsoft.VisualStudio.Shell.Interop._VSLONGIDLEREASON : Enum {
    public int value__;
    public static _VSLONGIDLEREASON LIR_NOUSERINPUT;
    public static _VSLONGIDLEREASON LIR_SCREENSAVERACTIVE;
    public static _VSLONGIDLEREASON LIR_SESSIONLOCKED;
}
[FlagsAttribute]
public enum Microsoft.VisualStudio.Shell.Interop._VSOBJCFFLAGS : Enum {
    public int value__;
    public static _VSOBJCFFLAGS CFF_NONE;
    public static _VSOBJCFFLAGS CFF_MULTISELECT;
}
public enum Microsoft.VisualStudio.Shell.Interop._VSOBJCLIPFORMATOPTIONS : Enum {
    public int value__;
    public static _VSOBJCLIPFORMATOPTIONS CFO_NONE;
    public static _VSOBJCLIPFORMATOPTIONS CFO_COMPOSITEFMT;
    public static _VSOBJCLIPFORMATOPTIONS CFO_INVALIDCF;
}
public enum Microsoft.VisualStudio.Shell.Interop._VSOBJDESCOPTIONS : Enum {
    public int value__;
    public static _VSOBJDESCOPTIONS ODO_NONE;
    public static _VSOBJDESCOPTIONS ODO_TOOLTIPDESC;
    public static _VSOBJDESCOPTIONS ODO_USEFULLNAME;
}
public enum Microsoft.VisualStudio.Shell.Interop._VSOBJLISTELEMPROPID : Enum {
    public int value__;
    public static _VSOBJLISTELEMPROPID VSOBJLISTELEMPROPID_FIRST;
    public static _VSOBJLISTELEMPROPID VSOBJLISTELEMPROPID_HELPKEYWORD;
    public static _VSOBJLISTELEMPROPID VSOBJLISTELEMPROPID_COMPONENTPATH;
    public static _VSOBJLISTELEMPROPID VSOBJLISTELEMPROPID_CODEDEFVIEWCONTEXT;
    public static _VSOBJLISTELEMPROPID VSOBJLISTELEMPROPID_SUPPORTSCALLSTO;
    public static _VSOBJLISTELEMPROPID VSOBJLISTELEMPROPID_SUPPORTSCALLSFROM;
    public static _VSOBJLISTELEMPROPID VSOBJLISTELEMPROPID_FULLNAME;
    public static _VSOBJLISTELEMPROPID VSOBJLISTELEMPROPID_LEAFNAME;
    public static _VSOBJLISTELEMPROPID VSOBJLISTELEMPROPID_NAME_FOR_RENAME;
    public static _VSOBJLISTELEMPROPID VSOBJLISTELEMPROPID_LAST;
}
public enum Microsoft.VisualStudio.Shell.Interop._VSOBJLISTOWNERCACHEDDATAKINDS : Enum {
    public int value__;
    public static _VSOBJLISTOWNERCACHEDDATAKINDS LOCDK_NONE;
    public static _VSOBJLISTOWNERCACHEDDATAKINDS LOCDK_SELECTEDNAVINFO;
}
public enum Microsoft.VisualStudio.Shell.Interop._VSOBJLISTOWNEROTPIONS : Enum {
    public int value__;
    public static _VSOBJLISTOWNEROTPIONS LOO_NONE;
    public static _VSOBJLISTOWNEROTPIONS LOO_SUPPORTSEXTENDEDTEXT;
    public static _VSOBJLISTOWNEROTPIONS LOO_UPDATESDISPLAYDATA;
}
[FlagsAttribute]
public enum Microsoft.VisualStudio.Shell.Interop._VSOBJOPFLAGS : Enum {
    public int value__;
    public static _VSOBJOPFLAGS OPF_NONE;
    public static _VSOBJOPFLAGS OPF_MULTISELECT;
    public static _VSOBJOPFLAGS OPF_FIRSTITEM;
    public static _VSOBJOPFLAGS OPF_LASTITEM;
}
public enum Microsoft.VisualStudio.Shell.Interop._VSOBSEARCHOPTIONS : Enum {
    public int value__;
    public static _VSOBSEARCHOPTIONS VSOBSO_NONE;
    public static _VSOBSEARCHOPTIONS VSOBSO_CASESENSITIVE;
    public static _VSOBSEARCHOPTIONS VSOBSO_LOOKINREFS;
}
[FlagsAttribute]
public enum Microsoft.VisualStudio.Shell.Interop._VSOBSEARCHOPTIONS2 : Enum {
    public int value__;
    public static _VSOBSEARCHOPTIONS2 VSOBSO_FILTERING;
    public static _VSOBSEARCHOPTIONS2 VSOBSO_EXPANDCHILDREN;
    public static _VSOBSEARCHOPTIONS2 VSOBSO_CALLSTO;
    public static _VSOBSEARCHOPTIONS2 VSOBSO_CALLSFROM;
    public static _VSOBSEARCHOPTIONS2 VSOBSO_LISTREFERENCES;
}
public enum Microsoft.VisualStudio.Shell.Interop._VSProjectUnloadStatus : Enum {
    public int value__;
    public static _VSProjectUnloadStatus UNLOADSTATUS_UnloadedByUser;
    [ObsoleteAttribute("This API is no longer supported by Visual Studio.")]
public static _VSProjectUnloadStatus UNLOADSTATUS_LoadPendingIfNeeded;
    public static _VSProjectUnloadStatus UNLOADSTATUS_StorageNotLoadable;
    public static _VSProjectUnloadStatus UNLOADSTATUS_StorageNotAvailable;
    public static _VSProjectUnloadStatus UNLOADSTATUS_UpgradeFailed;
}
public enum Microsoft.VisualStudio.Shell.Interop._VSProjectUnloadStatus2 : Enum {
    public int value__;
    public static _VSProjectUnloadStatus2 UNLOADSTATUS_NeedRetarget;
    public static _VSProjectUnloadStatus2 UNLOADSTATUS_NeedComponents;
}
public enum Microsoft.VisualStudio.Shell.Interop._VSProjectUnloadStatus3 : Enum {
    public int value__;
    public static _VSProjectUnloadStatus3 UNLOADSTATUS_ProjectIncompatible;
}
public enum Microsoft.VisualStudio.Shell.Interop._VSQuickCheckAnswer : Enum {
    public int value__;
    public static _VSQuickCheckAnswer QCA_Always;
    public static _VSQuickCheckAnswer QCA_Yes;
    public static _VSQuickCheckAnswer QCA_QuickAnswerNA;
    public static _VSQuickCheckAnswer QCA_No;
    public static _VSQuickCheckAnswer QCA_Never;
}
[FlagsAttribute]
public enum Microsoft.VisualStudio.Shell.Interop._VSRDTFLAGS : Enum {
    public int value__;
    public static _VSRDTFLAGS RDT_NoLock;
    public static _VSRDTFLAGS RDT_ReadLock;
    public static _VSRDTFLAGS RDT_EditLock;
    public static _VSRDTFLAGS RDT_RequestUnlock;
    public static _VSRDTFLAGS RDT_LOCKMASK;
    public static _VSRDTFLAGS RDT_DontSaveAs;
    public static _VSRDTFLAGS RDT_NonCreatable;
    public static _VSRDTFLAGS RDT_DontSave;
    public static _VSRDTFLAGS RDT_DontAutoOpen;
    public static _VSRDTFLAGS RDT_CaseSensitive;
    public static _VSRDTFLAGS RDT_CantSave;
    public static _VSRDTFLAGS RDT_VirtualDocument;
    public static _VSRDTFLAGS RDT_ProjSlnDocument;
    public static _VSRDTFLAGS RDT_PlaceHolderDoc;
    public static _VSRDTFLAGS RDT_CanBuildFromMemory;
    public static _VSRDTFLAGS RDT_DontAddToMRU;
    public static _VSRDTFLAGS RDT_DOCMASK;
    public static _VSRDTFLAGS RDT_Unlock_NoSave;
    public static _VSRDTFLAGS RDT_Unlock_SaveIfDirty;
    public static _VSRDTFLAGS RDT_Unlock_PromptSave;
    public static _VSRDTFLAGS RDT_SAVEMASK;
}
[FlagsAttribute]
public enum Microsoft.VisualStudio.Shell.Interop._VSRDTFLAGS2 : Enum {
    public int value__;
    public static _VSRDTFLAGS2 RDT_Lock_WeakEditLock;
    public static _VSRDTFLAGS2 RDT_LOCKUNLOCKMASK;
}
[FlagsAttribute]
public enum Microsoft.VisualStudio.Shell.Interop._VSRDTFLAGS3 : Enum {
    public int value__;
    public static _VSRDTFLAGS3 RDT_DontPollForState;
}
[FlagsAttribute]
public enum Microsoft.VisualStudio.Shell.Interop._VSRDTFLAGS4 : Enum {
    public int value__;
    public static _VSRDTFLAGS4 RDT_PendingInitialization;
    public static _VSRDTFLAGS4 RDT_PendingHierarchyInitialization;
}
[FlagsAttribute]
public enum Microsoft.VisualStudio.Shell.Interop._VSRDTFLAGS5 : Enum {
    public int value__;
    public static _VSRDTFLAGS5 RDT_DontAutoSave;
}
public enum Microsoft.VisualStudio.Shell.Interop._VSRDTFLAGSUPPER : Enum {
    public int value__;
    public static _VSRDTFLAGSUPPER RDT_InitializationFailed;
}
public enum Microsoft.VisualStudio.Shell.Interop._VSRELOADDOCDATA : Enum {
    public int value__;
    public static _VSRELOADDOCDATA RDD_IgnoreNextFileChange;
    public static _VSRELOADDOCDATA RDD_RemoveUndoStack;
}
public enum Microsoft.VisualStudio.Shell.Interop._vstaskbitmap : Enum {
    public int value__;
    public static _vstaskbitmap BMP_COMPILE;
    public static _vstaskbitmap BMP_SQUIGGLE;
    public static _vstaskbitmap BMP_COMMENT;
    public static _vstaskbitmap BMP_SHORTCUT;
    public static _vstaskbitmap BMP_USER;
}
public enum Microsoft.VisualStudio.Shell.Interop._vstaskpriority : Enum {
    public int value__;
    public static _vstaskpriority TP_HIGH;
    public static _vstaskpriority TP_NORMAL;
    public static _vstaskpriority TP_LOW;
}
public enum Microsoft.VisualStudio.Shell.Interop._VSTREEDISPLAYMASK : Enum {
    public int value__;
    public static _VSTREEDISPLAYMASK TDM_IMAGE;
    public static _VSTREEDISPLAYMASK TDM_STATE;
    public static _VSTREEDISPLAYMASK TDM_SELECTEDIMAGE;
    public static _VSTREEDISPLAYMASK TDM_FORCESELECT;
}
public enum Microsoft.VisualStudio.Shell.Interop._VSTREEDISPLAYSTATE : Enum {
    public int value__;
    public static _VSTREEDISPLAYSTATE TDS_SELECTED;
    public static _VSTREEDISPLAYSTATE TDS_CUT;
    public static _VSTREEDISPLAYSTATE TDS_DROPHILITED;
    public static _VSTREEDISPLAYSTATE TDS_BOLD;
    public static _VSTREEDISPLAYSTATE TDS_DISPLAYLINK;
    public static _VSTREEDISPLAYSTATE TDS_OVERLAYMASK;
    public static _VSTREEDISPLAYSTATE TDS_STATEIMAGEMASK;
    public static _VSTREEDISPLAYSTATE TDS_USERMASK;
    public static _VSTREEDISPLAYSTATE TDS_FORCESELECT;
    public static _VSTREEDISPLAYSTATE TDS_GRAYTEXT;
    public static _VSTREEDISPLAYSTATE TDS_EXPANDED;
    public static _VSTREEDISPLAYSTATE TDS_TEXTTYPEMASK;
}
[FlagsAttribute]
public enum Microsoft.VisualStudio.Shell.Interop._VSTREEFLAGS : Enum {
    public int value__;
    public static _VSTREEFLAGS TF_NOEXPANSION;
    public static _VSTREEFLAGS TF_NORELOCATE;
    public static _VSTREEFLAGS TF_NOINSERTDELETE;
    public static _VSTREEFLAGS TF_NOUPDATES;
    public static _VSTREEFLAGS TF_NOREALIGN;
    public static _VSTREEFLAGS TF_NOSTATECHANGE;
    public static _VSTREEFLAGS TF_NOEFFECTS;
    public static _VSTREEFLAGS TF_NOCOLORS;
    public static _VSTREEFLAGS TF_NOEVERYTHING;
    public static _VSTREEFLAGS TF_OWNERDRAWTEXT;
    public static _VSTREEFLAGS TF_OWNERDRAWALL;
}
[FlagsAttribute]
public enum Microsoft.VisualStudio.Shell.Interop._VSTREEFLAGS2 : Enum {
    public int value__;
    public static _VSTREEFLAGS2 TF_AVOIDPRECACHE;
}
[FlagsAttribute]
public enum Microsoft.VisualStudio.Shell.Interop._VSTREEFLAGS3 : Enum {
    public int value__;
    public static _VSTREEFLAGS3 TF_NOWAITCURSOR;
}
public enum Microsoft.VisualStudio.Shell.Interop._VSTREEITEMCHANGESMASK : Enum {
    public int value__;
    public static _VSTREEITEMCHANGESMASK TCT_NOCHANGE;
    public static _VSTREEITEMCHANGESMASK TCT_ITEMADDED;
    public static _VSTREEITEMCHANGESMASK TCT_ITEMDELETED;
    public static _VSTREEITEMCHANGESMASK TCT_ITEMNAMECHANGED;
    public static _VSTREEITEMCHANGESMASK TCT_ITEMPROPSCHANGED;
    public static _VSTREEITEMCHANGESMASK TCT_TOOMANYCHANGES;
}
public enum Microsoft.VisualStudio.Shell.Interop._VSTREESTATECHANGEREFRESH : Enum {
    public int value__;
    public static _VSTREESTATECHANGEREFRESH TSCR_NONE;
    public static _VSTREESTATECHANGEREFRESH TSCR_CURRENT;
    public static _VSTREESTATECHANGEREFRESH TSCR_CHILDREN;
    public static _VSTREESTATECHANGEREFRESH TSCR_PARENTS;
    public static _VSTREESTATECHANGEREFRESH TSCR_PARENTSCHILDREN;
    public static _VSTREESTATECHANGEREFRESH TSCR_ENTIRE;
}
public class Microsoft.VisualStudio.Shell.Interop.AllColorableItemInfo : ValueType {
    [ComAliasNameAttribute("Microsoft.VisualStudio.Shell.Interop.ColorableItemInfo")]
public ColorableItemInfo Info;
    public string bstrName;
    public string bstrLocalizedName;
    [ComAliasNameAttribute("Microsoft.VisualStudio.Shell.Interop.COLORREF")]
public UInt32 crAutoForeground;
    [ComAliasNameAttribute("Microsoft.VisualStudio.Shell.Interop.COLORREF")]
public UInt32 crAutoBackground;
    [ComAliasNameAttribute("Microsoft.VisualStudio.OLE.Interop.DWORD")]
public UInt32 dwMarkerVisualStyle;
    [ComAliasNameAttribute("Microsoft.VisualStudio.TextManager.Interop.LINESTYLE")]
public LINESTYLE eLineStyle;
    [ComAliasNameAttribute("Microsoft.VisualStudio.Shell.Interop.FCITEMFLAGS")]
public UInt32 fFlags;
    public string bstrDescription;
    [ComAliasNameAttribute("Microsoft.VisualStudio.OLE.Interop.BOOL")]
public int bNameValid;
    [ComAliasNameAttribute("Microsoft.VisualStudio.OLE.Interop.BOOL")]
public int bLocalizedNameValid;
    [ComAliasNameAttribute("Microsoft.VisualStudio.OLE.Interop.BOOL")]
public int bAutoForegroundValid;
    [ComAliasNameAttribute("Microsoft.VisualStudio.OLE.Interop.BOOL")]
public int bAutoBackgroundValid;
    [ComAliasNameAttribute("Microsoft.VisualStudio.OLE.Interop.BOOL")]
public int bMarkerVisualStyleValid;
    [ComAliasNameAttribute("Microsoft.VisualStudio.OLE.Interop.BOOL")]
public int bLineStyleValid;
    [ComAliasNameAttribute("Microsoft.VisualStudio.OLE.Interop.BOOL")]
public int bFlagsValid;
    [ComAliasNameAttribute("Microsoft.VisualStudio.OLE.Interop.BOOL")]
public int bDescriptionValid;
}
public enum Microsoft.VisualStudio.Shell.Interop.AppToastCapability : Enum {
    public int value__;
    public static AppToastCapability ATC_Unset;
    public static AppToastCapability ATC_Yes;
    public static AppToastCapability ATC_No;
}
public enum Microsoft.VisualStudio.Shell.Interop.AppxManifestDesignerTab : Enum {
    public int value__;
    public static AppxManifestDesignerTab AppxManifestDesignerTab_Current;
    public static AppxManifestDesignerTab AppxManifestDesignerTab_Application;
    public static AppxManifestDesignerTab AppxManifestDesignerTab_Capabilities;
    public static AppxManifestDesignerTab AppxManifestDesignerTab_Declarations;
    public static AppxManifestDesignerTab AppxManifestDesignerTab_ContentURIs;
    public static AppxManifestDesignerTab AppxManifestDesignerTab_Packaging;
}
public enum Microsoft.VisualStudio.Shell.Interop.AppxManifestDesignerTab2 : Enum {
    public int value__;
    public static AppxManifestDesignerTab2 AMDT_Current;
    public static AppxManifestDesignerTab2 AMDT_Application;
    public static AppxManifestDesignerTab2 AMDT_Capabilities;
    public static AppxManifestDesignerTab2 AMDT_Declarations;
    public static AppxManifestDesignerTab2 AMDT_ContentURIs;
    public static AppxManifestDesignerTab2 AMDT_Packaging;
    public static AppxManifestDesignerTab2 AMDT_HardwareRequirements;
}
public enum Microsoft.VisualStudio.Shell.Interop.ATTRVALUETYPE : Enum {
    public int value__;
    public static ATTRVALUETYPE VSHAL_Real;
    public static ATTRVALUETYPE VSHAL_Display;
}
[FlagsAttribute]
public enum Microsoft.VisualStudio.Shell.Interop.BLDGETFLAGS : Enum {
    public int value__;
    public static BLDGETFLAGS BLDGETOPT_FAUTOMAPGUID;
    public static BLDGETFLAGS BLDGETOPT_FAUTOMAPENABLEPROMPT;
    public static BLDGETFLAGS BLDGETOPT_FAUTOMAPPROMPTALWAYS;
    public static BLDGETFLAGS BLDGETOPT_FOBJECTBUILDER;
    public static BLDGETFLAGS BLDGETOPT_FNOINTRINSICS;
}
public enum Microsoft.VisualStudio.Shell.Interop.BLDPROMPTOPT : Enum {
    public int value__;
    public static BLDPROMPTOPT BLDPROMPTOPT_PROMPTIFMULTIPLE;
    public static BLDPROMPTOPT BLDPROMPTOPT_PROMPTALWAYS;
    public static BLDPROMPTOPT BLDPROMPTOPT_PROMPTNEVER;
}
[GuidAttribute("5DADF1EE-BCBE-46CE-BADF-271992C112A3")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.Shell.Interop.BooleanSymbolExpressionEvaluator {
}
public enum Microsoft.VisualStudio.Shell.Interop.BootstrapMode : Enum {
    public int value__;
    public static BootstrapMode SirepBootstrapMode;
    public static BootstrapMode UniversalBootstrapMode;
}
public enum Microsoft.VisualStudio.Shell.Interop.BootstrappingArchitecture : Enum {
    public int value__;
    public static BootstrappingArchitecture BootstrappingArchitecture_AutoDetect;
    public static BootstrappingArchitecture BootstrappingArchitecture_X86;
    public static BootstrappingArchitecture BootstrappingArchitecture_X64;
    public static BootstrappingArchitecture BootstrappingArchitecture_Arm;
    public static BootstrappingArchitecture BootstrappingArchitecture_Arm64;
}
public enum Microsoft.VisualStudio.Shell.Interop.BootstrappingMode : Enum {
    public int value__;
    public static BootstrappingMode BootstrappingMode_AutoDetect;
    public static BootstrappingMode BootstrappingMode_Sirep;
    public static BootstrappingMode BootstrappingMode_Universal;
}
public abstract class Microsoft.VisualStudio.Shell.Interop.BrowseLibraryGuids80 : object {
    public static string VB;
    public static string CSharp;
    public static string VJSharp;
    public static string VC;
    public static string BSC;
    public static string Assembly;
    public static string TypeLib;
    public static string Folder;
    public static string ResourceView;
}
[FlagsAttribute]
public enum Microsoft.VisualStudio.Shell.Interop.BuildableProjectCfgOpts : Enum {
    public int value__;
    public static BuildableProjectCfgOpts Rebuild;
    public static BuildableProjectCfgOpts BuildSelectionOnly;
    public static BuildableProjectCfgOpts BuildActiveDocumentOnly;
    public static BuildableProjectCfgOpts Private;
}
public enum Microsoft.VisualStudio.Shell.Interop.BuildableProjectCfgOpts2 : Enum {
    public int value__;
    public static BuildableProjectCfgOpts2 Package;
}
public abstract class Microsoft.VisualStudio.Shell.Interop.BuildOutputGroup : object {
    public static string SourceFiles;
    public static string Built;
    public static string ContentFiles;
    public static string LocalizedResourceDlls;
    public static string Documentation;
    public static string Symbols;
}
public class Microsoft.VisualStudio.Shell.Interop.CANDIDATEFORM : ValueType {
    [ComAliasNameAttribute("Microsoft.VisualStudio.OLE.Interop.DWORD")]
public UInt32 dwIndex;
    [ComAliasNameAttribute("Microsoft.VisualStudio.OLE.Interop.DWORD")]
public UInt32 dwStyle;
    [ComAliasNameAttribute("Microsoft.VisualStudio.OLE.Interop.POINT")]
public POINT ptCurrentPos;
    [ComAliasNameAttribute("Microsoft.VisualStudio.OLE.Interop.RECT")]
public RECT rcArea;
}
public class Microsoft.VisualStudio.Shell.Interop.ColorableItemInfo : ValueType {
    [ComAliasNameAttribute("Microsoft.VisualStudio.Shell.Interop.COLORREF")]
public UInt32 crForeground;
    [ComAliasNameAttribute("Microsoft.VisualStudio.Shell.Interop.COLORREF")]
public UInt32 crBackground;
    [ComAliasNameAttribute("Microsoft.VisualStudio.OLE.Interop.DWORD")]
public UInt32 dwFontFlags;
    [ComAliasNameAttribute("Microsoft.VisualStudio.OLE.Interop.BOOL")]
public int bForegroundValid;
    [ComAliasNameAttribute("Microsoft.VisualStudio.OLE.Interop.BOOL")]
public int bBackgroundValid;
    [ComAliasNameAttribute("Microsoft.VisualStudio.OLE.Interop.BOOL")]
public int bFontFlagsValid;
}
[GuidAttribute("257B63FA-8388-4FEB-9DB8-3DB22F4405DE")]
[InterfaceTypeAttribute("1")]
[EditorBrowsableAttribute("1")]
public interface Microsoft.VisualStudio.Shell.Interop.COMAsyncServiceProvider.IAsyncServiceProvider {
    public abstract virtual IVsTask QueryServiceAsync(Guid& guidService);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("4EDCC64C-4F4E-47BB-9364-CF04348AEC1E")]
public interface Microsoft.VisualStudio.Shell.Interop.COMAsyncServiceProvider.IAsyncServiceProvider2 {
    public abstract virtual IVsTask QueryServiceAsync(Guid& guidService, bool swallowExceptions);
}
public enum Microsoft.VisualStudio.Shell.Interop.COMMANDWINDOWMODE : Enum {
    public int value__;
    public static COMMANDWINDOWMODE CWM_IMMEDIATE;
    public static COMMANDWINDOWMODE CWM_COMMAND;
}
public enum Microsoft.VisualStudio.Shell.Interop.CompEnum : Enum {
    public int value__;
    public static CompEnum CompEnumType_COM2;
    public static CompEnum CompEnumType_COMPlus;
    public static CompEnum CompEnumType_AssemblyPaths;
}
public abstract class Microsoft.VisualStudio.Shell.Interop.ComponentSelectorGuids80 : object {
    public static string BrowseFilesPage;
    public static string MRUPage;
    public static string COMPlusPage;
    public static string COMClassicPage;
    public static string SolutionPage;
}
public class Microsoft.VisualStudio.Shell.Interop.COMREFERENCE : ValueType {
    public Guid guidTypeLib;
    [ComAliasNameAttribute("Microsoft.VisualStudio.OLE.Interop.WORD")]
public ushort wVerMajor;
    [ComAliasNameAttribute("Microsoft.VisualStudio.OLE.Interop.WORD")]
public ushort wVerMinor;
}
public class Microsoft.VisualStudio.Shell.Interop.COMREFERENCEINFO : ValueType {
    public Guid guidTypeLib;
    [ComAliasNameAttribute("Microsoft.VisualStudio.OLE.Interop.WORD")]
public ushort wVerMajor;
    [ComAliasNameAttribute("Microsoft.VisualStudio.OLE.Interop.WORD")]
public ushort wVerMinor;
    [ComAliasNameAttribute("Microsoft.VisualStudio.OLE.Interop.LCID")]
public UInt32 lcidTypelib;
    [ComAliasNameAttribute("Microsoft.VisualStudio.OLE.Interop.DWORD")]
public UInt32 dwLibFlags;
    public string bstrDescription;
    public string bstrPath;
}
public enum Microsoft.VisualStudio.Shell.Interop.Constants : Enum {
    public int value__;
    public static Constants GETOBJS_ALL;
    public static Constants GETOBJS_SELECTED;
    public static Constants SELOBJS_ACTIVATE_WINDOW;
    public static Constants CONTROLTYPELIB;
    public static Constants Priority_VsNewProjectPseudoFolder;
    public static Constants VSCOOKIE_NIL;
    public static Constants VSDOCCOOKIE_NIL;
    public static Constants UIHWCMDID_RightClick;
    public static Constants UIHWCMDID_DoubleClick;
    public static Constants UIHWCMDID_EnterKey;
    public static Constants UIHWCMDID_StartLabelEdit;
    public static Constants UIHWCMDID_CommitLabelEdit;
    public static Constants UIHWCMDID_CancelLabelEdit;
    public static Constants EPF_LOADED;
    public static Constants EPF_UNLOADED;
    public static Constants EPF_ALL;
    public static Constants EPF_VIRTUAL;
    public static Constants OFN_ALLOWONLYFILESYSLOCS;
    public static Constants SEID_UndoManager;
    public static Constants SEID_WindowFrame;
    public static Constants SEID_DocumentFrame;
    public static Constants SEID_StartupProject;
    public static Constants SEID_PropertyBrowserSID;
    public static Constants SEID_UserContext;
    public static Constants SEID_ResultList;
    public static Constants SEID_LastWindowFrame;
    public static Constants SEID_MAX;
    public static Constants TL_CATEGORY_BMP_WIDTH;
    public static Constants TL_CATEGORY_BMP_HEIGHT;
    public static Constants SBAI_General;
    public static Constants SBAI_Print;
    public static Constants SBAI_Save;
    public static Constants SBAI_Deploy;
    public static Constants SBAI_Synch;
    public static Constants SBAI_Build;
    public static Constants SBAI_Find;
    public static Constants LTVGN_FIRSTSEL;
    public static Constants LTVGN_NEXTSEL;
    public static Constants LTVGN_PREVIOUSSEL;
    public static Constants VSOBJFLAGS_OBJBROWSER;
    public static Constants VSOBJFLAGS_RESOURCEVIEW;
    public static Constants COUNT_LIBCAT_MEMBERTYPE;
    public static Constants COUNT_LIBCAT_MODIFIERTYPE;
    public static Constants COUNT_LIBCAT_MEMBERACCESS;
    public static Constants COUNT_LIBCAT_CLASSACCESS;
    public static Constants COUNT_LIBCAT_CLASSTYPE;
    public static Constants COUNT_LIBCAT_ACTIVEPROJECT;
    public static Constants COUNT_LIBCAT_VISIBILITY;
    public static Constants COUNT_LIBCAT_NODETYPE;
    public static Constants ME_UNKNOWN_MENU_ITEM;
    public static Constants ME_FIRST_MENU_ITEM;
    public static Constants PCL_AUTO_COMMANDS;
    public static Constants VSPROPID_ExtraSolutionPropertyPages;
    public static Constants VSCFGPROPID_SupportsCfgEditing;
    public static Constants VSCFGPROPID_SupportsPlatformEditing;
    public static Constants RIEF_OPENASMISCFILE;
    public static Constants ACT_DEFAULT;
    public static Constants ACT_SHOW;
    public static Constants PROPCAT_Nil;
    public static Constants PROPCAT_Misc;
    public static Constants PROPCAT_Font;
    public static Constants PROPCAT_Position;
    public static Constants PROPCAT_Appearance;
    public static Constants PROPCAT_Behavior;
    public static Constants PROPCAT_Data;
    public static Constants PROPCAT_List;
    public static Constants PROPCAT_Text;
    public static Constants PROPCAT_Scale;
    public static Constants PROPCAT_DDE;
    public static Constants HELPINFO_WHATS_THIS_MODE_ON;
    public static Constants VS_SPLASH_BMP_HEIGHT;
    public static Constants VS_SPLASH_BMP_WIDTH;
}
public enum Microsoft.VisualStudio.Shell.Interop.CTLBLDTYPE : Enum {
    public int value__;
    public static CTLBLDTYPE CTLBLDTYPE_FSTDPROPBUILDER;
    public static CTLBLDTYPE CTLBLDTYPE_FINTERNALBUILDER;
    public static CTLBLDTYPE CTLBLDTYPE_FEDITSOBJDIRECTLY;
}
public enum Microsoft.VisualStudio.Shell.Interop.DBGMODE : Enum {
    public int value__;
    public static DBGMODE DBGMODE_Design;
    public static DBGMODE DBGMODE_Break;
    public static DBGMODE DBGMODE_Run;
    public static DBGMODE DBGMODE_Enc;
    public static DBGMODE DBGMODE_EncMask;
}
public enum Microsoft.VisualStudio.Shell.Interop.DEBUG_LAUNCH_OPERATION : Enum {
    public int value__;
    public static DEBUG_LAUNCH_OPERATION DLO_AlreadyRunning;
    public static DEBUG_LAUNCH_OPERATION DLO_CreateProcess;
    public static DEBUG_LAUNCH_OPERATION DLO_Custom;
    public static DEBUG_LAUNCH_OPERATION DLO_LaunchByWebServer;
}
[FlagsAttribute]
public enum Microsoft.VisualStudio.Shell.Interop.DEBUG_REMOTE_DISCOVERY_FLAGS : Enum {
    public int value__;
    public static DEBUG_REMOTE_DISCOVERY_FLAGS DRD_NONE;
    public static DEBUG_REMOTE_DISCOVERY_FLAGS DRD_SHOW_MANUAL;
}
[FlagsAttribute]
public enum Microsoft.VisualStudio.Shell.Interop.DEBUG_REMOTE_DISCOVERY_FLAGS2 : Enum {
    public int value__;
    public static DEBUG_REMOTE_DISCOVERY_FLAGS2 DRD_SUPPORTS_UNIVERSAL_AUTH;
}
public enum Microsoft.VisualStudio.Shell.Interop.DevLicenseStatus : Enum {
    public int value__;
    public static DevLicenseStatus DLS_NoDevLicense;
    public static DevLicenseStatus DLS_DevLicenseValid;
    public static DevLicenseStatus DLS_DevLicenseExpired;
}
public enum Microsoft.VisualStudio.Shell.Interop.DiscoveryNodeType : Enum {
    public int value__;
    public static DiscoveryNodeType DiscoveryReferenceInfo;
    public static DiscoveryNodeType ServiceReferenceInfo;
    public static DiscoveryNodeType SchemaReferenceInfo;
    public static DiscoveryNodeType UnrecognizedReference;
}
public abstract class Microsoft.VisualStudio.Shell.Interop.DTECatID : object {
    public static string Solution;
    public static string SolutionBrowseObject;
    public static string MiscFilesProject;
    public static string MiscFilesProjectItem;
    public static string GenericProject;
    public static string Document;
}
public class Microsoft.VisualStudio.Shell.Interop.ENC_ACTIVE_STATEMENT : ValueType {
    public UInt32 id;
    public UInt32 methodToken;
    [ComAliasNameAttribute("Microsoft.VisualStudio.TextManager.Interop.TextSpan")]
public TextSpan tsPosition;
    public string filename;
    [ComAliasNameAttribute("Microsoft.VisualStudio.Shell.Interop.ASINFO")]
public UInt32 ASINFO;
    [ComAliasNameAttribute("Microsoft.VisualStudio.Shell.Interop.POSITION_TYPE")]
public UInt32 posType;
}
public enum Microsoft.VisualStudio.Shell.Interop.ENC_BUILD_STATE : Enum {
    public int value__;
    public static ENC_BUILD_STATE ENC_NOT_MODIFIED;
    public static ENC_BUILD_STATE ENC_NONCONTINUABLE_ERRORS;
    public static ENC_BUILD_STATE ENC_COMPILE_ERRORS;
    public static ENC_BUILD_STATE ENC_APPLY_READY;
}
public class Microsoft.VisualStudio.Shell.Interop.ENC_EXCEPTION_SPAN : ValueType {
    public UInt32 id;
    public UInt32 methodToken;
    [ComAliasNameAttribute("Microsoft.VisualStudio.TextManager.Interop.TextSpan")]
public TextSpan tsPosition;
}
public enum Microsoft.VisualStudio.Shell.Interop.ENC_REASON : Enum {
    public int value__;
    public static ENC_REASON ENCReason_Precompile;
    public static ENC_REASON ENCReason_Rebuild;
}
public enum Microsoft.VisualStudio.Shell.Interop.ENC_RETURNCODES : Enum {
    public int value__;
    public static ENC_RETURNCODES S_ENC_NOT_SUPPORTED;
    public static ENC_RETURNCODES E_STATEMENT_DELETED;
}
public enum Microsoft.VisualStudio.Shell.Interop.enum_ASINFO : Enum {
    public int value__;
    public static enum_ASINFO ASINFO_NONE;
    public static enum_ASINFO ASINFO_LEAF;
    public static enum_ASINFO ASINFO_MIDSTATEMENT;
    public static enum_ASINFO ASINFO_NONUSER;
}
public enum Microsoft.VisualStudio.Shell.Interop.enum_ENC_BREAKSTATE_REASON : Enum {
    public int value__;
    public static enum_ENC_BREAKSTATE_REASON ENC_BREAK_NORMAL;
    public static enum_ENC_BREAKSTATE_REASON ENC_BREAK_EXCEPTION;
}
public enum Microsoft.VisualStudio.Shell.Interop.enum_POSITION_TYPE : Enum {
    public int value__;
    public static enum_POSITION_TYPE TEXT_POSITION_ACTIVE_STATEMENT;
    public static enum_POSITION_TYPE TEXT_POSITION_NEARBY_STATEMENT;
    public static enum_POSITION_TYPE TEXT_POSITION_NONE;
}
[FlagsAttribute]
public enum Microsoft.VisualStudio.Shell.Interop.EXPANDFLAGS : Enum {
    public int value__;
    public static EXPANDFLAGS EXPF_ExpandFolder;
    public static EXPANDFLAGS EXPF_CollapseFolder;
    public static EXPANDFLAGS EXPF_ExpandFolderRecursively;
    public static EXPANDFLAGS EXPF_ExpandParentsToShowItem;
    public static EXPANDFLAGS EXPF_SelectItem;
    public static EXPANDFLAGS EXPF_BoldItem;
    public static EXPANDFLAGS EXPF_ExtendSelectItem;
    public static EXPANDFLAGS EXPF_AddSelectItem;
    public static EXPANDFLAGS EXPF_UnSelectItem;
    public static EXPANDFLAGS EXPF_UnBoldItem;
    public static EXPANDFLAGS EXPF_CutHighlightItem;
    public static EXPANDFLAGS EXPF_AddCutHighlightItem;
    public static EXPANDFLAGS EXPF_UnCutHighlightItem;
    public static EXPANDFLAGS EXPF_EditItemLabel;
}
[FlagsAttribute]
public enum Microsoft.VisualStudio.Shell.Interop.FONTFLAGS2 : Enum {
    public int value__;
    public static FONTFLAGS2 FF_ITALIC;
    public static FONTFLAGS2 FF_UNDERLINE;
}
public class Microsoft.VisualStudio.Shell.Interop.FontInfo : ValueType {
    public string bstrFaceName;
    [ComAliasNameAttribute("Microsoft.VisualStudio.OLE.Interop.WORD")]
public ushort wPointSize;
    [ComAliasNameAttribute("Microsoft.VisualStudio.TextManager.Interop.BYTE")]
public byte iCharSet;
    [ComAliasNameAttribute("Microsoft.VisualStudio.OLE.Interop.BOOL")]
public int bFaceNameValid;
    [ComAliasNameAttribute("Microsoft.VisualStudio.OLE.Interop.BOOL")]
public int bPointSizeValid;
    [ComAliasNameAttribute("Microsoft.VisualStudio.OLE.Interop.BOOL")]
public int bCharSetValid;
}
public abstract class Microsoft.VisualStudio.Shell.Interop.FontsAndColorsCategory : object {
    public static string TextOutputToolWindows;
    public static string Printer;
    public static string Tooltip;
    public static string StatementCompletion;
    public static string Outputwindow;
    public static string FindResults;
    public static string CommandWindow;
    public static string SystemWindow;
    public static string ImmediateWindow;
    public static string DialogsAndToolWindows;
    public static string TextEditor;
}
public enum Microsoft.VisualStudio.Shell.Interop.HOSTPROPID : Enum {
    public int value__;
    public static HOSTPROPID HOSTPROPID_PROJECTNAME;
    public static HOSTPROPID HOSTPROPID_HIERARCHY;
    public static HOSTPROPID HOSTPROPID_RELURL;
    public static HOSTPROPID HOSTPROPID_INTELLISENSECACHE_FILENAME;
}
[ComConversionLossAttribute]
[GuidAttribute("51AAE3E0-7486-11CF-A0C2-00AA0062BE57")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.Shell.Interop.IActiveDesigner {
    public abstract virtual int GetRuntimeClassID(Guid& pclsid);
    public abstract virtual int GetRuntimeMiscStatusFlags(UInt32& pdwMiscFlags);
    public abstract virtual int QueryPersistenceInterface(Guid& riidPersist);
    public abstract virtual int SaveRuntimeState(Guid& riidPersist, Guid& riidObjStgMed, IntPtr pObjStgMed);
    public abstract virtual int GetExtensibilityObject(Object& ppvObjOut);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("893AC9E5-23A5-4561-9500-C27EF5A058AC")]
public interface Microsoft.VisualStudio.Shell.Interop.IAppxBaseExtension {
    public bool SupportsAnyFileType { get; public set; }
    public Array SupportedFileTypes { get; }
    public abstract virtual bool get_SupportsAnyFileType();
    public abstract virtual void set_SupportsAnyFileType(bool value);
    public abstract virtual bool HasSupportedFileType(string supportedFileType);
    public abstract virtual void AddSupportedFileType(string supportedFileType);
    public abstract virtual void RemoveSupportedFileType(string supportedFileType);
    public abstract virtual Array get_SupportedFileTypes();
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("01B7617F-B00A-4290-870E-D329B5A43033")]
public interface Microsoft.VisualStudio.Shell.Interop.IAppxFileOpenPickerExtension {
    public bool SupportsAnyFileType { get; public set; }
    public Array SupportedFileTypes { get; }
    public abstract virtual bool get_SupportsAnyFileType();
    public abstract virtual void set_SupportsAnyFileType(bool value);
    public abstract virtual bool HasSupportedFileType(string supportedFileType);
    public abstract virtual void AddSupportedFileType(string supportedFileType);
    public abstract virtual void RemoveSupportedFileType(string supportedFileType);
    public abstract virtual Array get_SupportedFileTypes();
}
[GuidAttribute("11D31BA1-480F-435F-B711-8F192A1C226E")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.Shell.Interop.IAppxManifestDesignerService {
    public abstract virtual int OpenAppxManifestDocument(object project, IVsDocumentLockHolder& documentHandle, IAppxManifestDocument& appxManifestDocument);
    public abstract virtual int OpenAppxManifestDesigner(IVsDocumentLockHolder documentHandle, AppxManifestDesignerTab tab);
}
[GuidAttribute("11FC8AAC-1EE7-455E-9DBC-9A57CF727BC7")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.Shell.Interop.IAppxManifestDesignerService2 {
    public abstract virtual int OpenAppxManifestDocument(object project, IVsDocumentLockHolder& documentHandle, IAppxManifestDocument& appxManifestDocument);
    public abstract virtual int OpenAppxManifestDesigner(IVsDocumentLockHolder documentHandle, AppxManifestDesignerTab tab);
    public abstract virtual int OpenAppxManifestDocument(object Project, UInt32 forceSaveAndClose, IVsDocumentLockHolder& documentHandle, IAppxManifestDocument2& appxManifestDocument);
}
[GuidAttribute("77289E0B-C434-47F0-910E-E7676E1FA427")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.Shell.Interop.IAppxManifestDesignerService3 {
    public abstract virtual int OpenAppxManifestDocument(object project, IVsDocumentLockHolder& documentHandle, IAppxManifestDocument& appxManifestDocument);
    public abstract virtual int OpenAppxManifestDesigner(IVsDocumentLockHolder documentHandle, AppxManifestDesignerTab tab);
    public abstract virtual int OpenAppxManifestDocument(object Project, UInt32 forceSaveAndClose, IVsDocumentLockHolder& documentHandle, IAppxManifestDocument2& appxManifestDocument);
    public abstract virtual int OpenAppxManifestDesigner(IVsDocumentLockHolder documentHandle, AppxManifestDesignerTab2 tab);
}
[GuidAttribute("80CAD0DE-8ECC-48FC-B81E-D11B13AB9E8A")]
public interface Microsoft.VisualStudio.Shell.Interop.IAppxManifestDocument {
    public Array Capabilities { get; }
    public Array StandardCapabilities { get; }
    public string ApplicationStartPage { get; }
    public abstract virtual bool HasCapability(string capabilityId);
    public abstract virtual void AddCapability(string capabilityId);
    public abstract virtual void RemoveCapability(string capabilityId);
    public abstract virtual Array get_Capabilities();
    public abstract virtual Array get_StandardCapabilities();
    public abstract virtual void MapCapabilitySid(string sid, String& capabilityId, String& localizedCapabilityName);
    public abstract virtual bool GetSearchExtension(String& executable, String& entryPoint, String& runtimeType, String& startPage);
    public abstract virtual void SetSearchExtension(string executable, string entryPoint, string runtimeType, string startPage);
    public abstract virtual void RemoveSearchExtension();
    public abstract virtual bool GetShareExtension(String& executable, String& entryPoint, String& runtimeType, String& startPage, IAppxShareExtension& shareExtensionData);
    public abstract virtual IAppxShareExtension SetShareExtension(string executable, string entryPoint, string runtimeType, string startPage);
    public abstract virtual void RemoveShareExtension();
    public abstract virtual bool GetFileOpenPickerExtension(String& executable, String& entryPoint, String& runtimeType, String& startPage, IAppxFileOpenPickerExtension& fileOpenPickerExtensionData);
    public abstract virtual IAppxFileOpenPickerExtension SetFileOpenPickerExtension(string executable, string entryPoint, string runtimeType, string startPage);
    public abstract virtual void RemoveFileOpenPickerExtension();
    public abstract virtual string get_ApplicationStartPage();
}
[GuidAttribute("B28888A0-8855-4083-B4D6-A91BDFD452EE")]
public interface Microsoft.VisualStudio.Shell.Interop.IAppxManifestDocument2 {
    public Array Capabilities { get; }
    public Array StandardCapabilities { get; }
    public string ApplicationStartPage { get; }
    public string PackageVersion { get; public set; }
    public string OSMinVersion { get; public set; }
    public string OSMaxVersionTested { get; public set; }
    [ComAliasNameAttribute("Microsoft.VisualStudio.Shell.Interop.AppToastCapability")]
public AppToastCapability ApplicationToastCapable { get; public set; }
    public abstract virtual bool HasCapability(string capabilityId);
    public abstract virtual void AddCapability(string capabilityId);
    public abstract virtual void RemoveCapability(string capabilityId);
    public abstract virtual Array get_Capabilities();
    public abstract virtual Array get_StandardCapabilities();
    public abstract virtual void MapCapabilitySid(string sid, String& capabilityId, String& localizedCapabilityName);
    public abstract virtual bool GetSearchExtension(String& executable, String& entryPoint, String& runtimeType, String& startPage);
    public abstract virtual void SetSearchExtension(string executable, string entryPoint, string runtimeType, string startPage);
    public abstract virtual void RemoveSearchExtension();
    public abstract virtual bool GetShareExtension(String& executable, String& entryPoint, String& runtimeType, String& startPage, IAppxShareExtension& shareExtensionData);
    public abstract virtual IAppxShareExtension SetShareExtension(string executable, string entryPoint, string runtimeType, string startPage);
    public abstract virtual void RemoveShareExtension();
    public abstract virtual bool GetFileOpenPickerExtension(String& executable, String& entryPoint, String& runtimeType, String& startPage, IAppxFileOpenPickerExtension& fileOpenPickerExtensionData);
    public abstract virtual IAppxFileOpenPickerExtension SetFileOpenPickerExtension(string executable, string entryPoint, string runtimeType, string startPage);
    public abstract virtual void RemoveFileOpenPickerExtension();
    public abstract virtual string get_ApplicationStartPage();
    public abstract virtual string get_PackageVersion();
    public abstract virtual void set_PackageVersion(string value);
    public abstract virtual string get_OSMinVersion();
    public abstract virtual void set_OSMinVersion(string value);
    public abstract virtual string get_OSMaxVersionTested();
    public abstract virtual void set_OSMaxVersionTested(string value);
    public abstract virtual AppToastCapability get_ApplicationToastCapable();
    public abstract virtual void set_ApplicationToastCapable(AppToastCapability value);
}
[GuidAttribute("1323D2E8-A6E1-498D-93B9-16CA249C9306")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.Shell.Interop.IAppxShareExtension {
    public bool SupportsAnyFileType { get; public set; }
    public Array SupportedFileTypes { get; }
    public Array DataFormats { get; }
    public abstract virtual bool get_SupportsAnyFileType();
    public abstract virtual void set_SupportsAnyFileType(bool value);
    public abstract virtual bool HasSupportedFileType(string supportedFileType);
    public abstract virtual void AddSupportedFileType(string supportedFileType);
    public abstract virtual void RemoveSupportedFileType(string supportedFileType);
    public abstract virtual Array get_SupportedFileTypes();
    public abstract virtual bool HasDataFormat(string dataFormat);
    public abstract virtual void AddDataFormat(string dataFormat);
    public abstract virtual void RemoveDataFormat(string dataFormat);
    public abstract virtual Array get_DataFormats();
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("3EC4D7F6-4036-4406-A393-2FFF7B2E78A1")]
public interface Microsoft.VisualStudio.Shell.Interop.IAsyncLoadablePackageInitialize {
    public abstract virtual IVsTask Initialize(IAsyncServiceProvider pServiceProvider, IProfferAsyncService pProfferService, IAsyncProgressCallback pProgressCallback);
}
[NullableContextAttribute("1")]
[GuidAttribute("ec2f3090-8dc6-4d56-9a8e-84d5af63dc70")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.Shell.Interop.IAsyncPersistFile {
    public abstract virtual IVsTask LoadAsync(string filename, UInt32 grfMode, IVsProgress progress);
    public abstract virtual IVsTask SaveAsync(string filename, bool remember, IVsProgress progress);
}
[NullableContextAttribute("1")]
[GuidAttribute("d3f639c2-9633-4af7-82fb-3ae5cffa8a52")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.Shell.Interop.IAsyncPersistFileFormat {
    public abstract virtual IVsTask LoadAsync(string filename, UInt32 grfMode, bool readOnly, IVsProgress progress);
    public abstract virtual IVsTask SaveAsync(string filename, bool remember, UInt32 formatIndex, IVsProgress progress);
}
[GuidAttribute("C3A2D62E-64BE-4008-924F-7E303E2B0001")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.Shell.Interop.IAsyncProgressCallback {
    public abstract virtual void ReportProgress(Guid& guidService, string szWaitMessage, string szProgressText, int iCurrentStep, int iTotalSteps);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("95FC88C3-9FCB-11CF-A405-00AA00C00940")]
public interface Microsoft.VisualStudio.Shell.Interop.IBuilderWizardManager {
    public abstract virtual int DoesBuilderExist(Guid& rguidBuilder);
    public abstract virtual int MapObjectToBuilderCLSID(Guid& rclsidObject, UInt32 dwPromptOpt, IntPtr hwndPromptOwner, Guid& pclsidBuilder);
    public abstract virtual int MapBuilderCATIDToCLSID(Guid& rguidBuilder, UInt32 dwPromptOpt, IntPtr hwndPromptOwner, Guid& pclsidBuilder);
    public abstract virtual int GetBuilder(Guid& rguidBuilder, UInt32 grfGetOpt, IntPtr hwndPromptOwner, Object& ppdispApp, IntPtr& pwndBuilderOwner, Guid& riidBuilder, Object& ppunkBuilder);
    public abstract virtual int EnableModeless(int fEnable);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("4D07FC10-F931-11CE-B001-00AA006884E5")]
public interface Microsoft.VisualStudio.Shell.Interop.ICategorizeProperties {
    public abstract virtual int MapPropertyToCategory(int dispid, Int32& ppropcat);
    public abstract virtual int GetCategoryName(int PROPCAT, UInt32 lcidCategory, String& pbstrName);
}
[GuidAttribute("6D5140C4-7436-11CE-8034-00AA006009FA")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.Shell.Interop.ICodeNavigate {
    public abstract virtual int DisplayDefaultEventHandler(string lpstrObjectName);
}
[GuidAttribute("2702AD60-3459-11D1-88FD-00A0C9110049")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.Shell.Interop.ICodeNavigate2 {
    public abstract virtual int DisplayDefaultEventHandler(string lpstrObjectName);
    public abstract virtual int DisplayEventHandler(string lpstrObjectName, string lpstrEventName);
}
[GuidAttribute("CBD71F2C-6BC5-4932-B851-B93EB3151386")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.Shell.Interop.IComWrapper {
    [ComAliasNameAttribute("VsShell.INT_PTR")]
[DispIdAttribute("1610678272")]
public int GCHandlePtr { get; }
    public abstract virtual int get_GCHandlePtr();
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("436B402A-A479-41A8-A093-9713CE3AD111")]
public interface Microsoft.VisualStudio.Shell.Interop.IComWrapperFactory {
    public abstract virtual object CreateAggregatedObject(object managedObject);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("CB4BB619-ABD5-459C-AC9F-88844C610BC9")]
public interface Microsoft.VisualStudio.Shell.Interop.IComWrapperFactory2 {
    public abstract virtual object CreateFreeThreadedAggregatedObject(object managedObject);
}
[GuidAttribute("07F86396-273C-11D7-8BF6-00B0D03DAA06")]
public interface Microsoft.VisualStudio.Shell.Interop.IDirAutoCompleteList {
}
[GuidAttribute("07F86395-273C-11D7-8BF6-00B0D03DAA06")]
public interface Microsoft.VisualStudio.Shell.Interop.IDirList {
    [DispIdAttribute("1610743808")]
public abstract virtual int get_HWND(IntPtr& phwnd);
    [DispIdAttribute("1610743809")]
public abstract virtual int get_Description(String& pbstrDescription);
    [DispIdAttribute("1610743810")]
public abstract virtual int put_Description(string bstrDescription);
    [DispIdAttribute("1610743811")]
public abstract virtual int get_Title(String& pbstrTitle);
    [DispIdAttribute("1610743812")]
public abstract virtual int put_Title(string bstrTitle);
    [DispIdAttribute("1610743813")]
public abstract virtual int put_ShowTitle(bool bShow);
    [DispIdAttribute("1610743814")]
public abstract virtual int put_ShowCheck(bool bShow);
    [DispIdAttribute("1610743815")]
public abstract virtual int get_Count(Int32& nItems);
    [DispIdAttribute("1610743816")]
public abstract virtual int index(int nItem, String& pbstrItem);
    [DispIdAttribute("1610743817")]
public abstract virtual int Add(string bstrItem);
    [DispIdAttribute("1610743818")]
public abstract virtual int Reset();
}
[GuidAttribute("07F86394-273C-11D7-8BF6-00B0D03DAA06")]
public interface Microsoft.VisualStudio.Shell.Interop.IDirListEvents {
    [DispIdAttribute("1")]
public abstract virtual int OnChange();
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("07F86393-273C-11D7-8BF6-00B0D03DAA06")]
public interface Microsoft.VisualStudio.Shell.Interop.IDirListSite {
    public abstract virtual int SetSite(object __MIDL_0011);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("0EEA651C-B208-4EDE-96CE-5194F4DC4E4A")]
public interface Microsoft.VisualStudio.Shell.Interop.IDiscoverUrlCallBack {
    public abstract virtual int NotifyDiscoverComplete(int cookie, IDiscoveryResult pIDiscoveryResult);
}
[GuidAttribute("FC5E8B09-FF17-4DA6-BA39-EB8DFC314BC1")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.Shell.Interop.IDiscoveryClientResult {
    public abstract virtual int GetFileName(String& pbstrFilename);
    public abstract virtual int GetReferenceTypeName(String& pbstrReferenceTypeName);
    public abstract virtual int GetUrl(String& pbstrUrl);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("BCEB2C6C-E0D1-4FA5-8DDC-977D68E8D50B")]
public interface Microsoft.VisualStudio.Shell.Interop.IDiscoveryClientResultCollection {
    public abstract virtual int GetResultCount(Int32& pCount);
    public abstract virtual int GetResult(int pIndex, IDiscoveryClientResult& ppIDiscoveryClientResult);
}
[GuidAttribute("B9A32C91-B14D-4AE3-A955-5CBC3E75FCA5")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.Shell.Interop.IDiscoveryResult {
    public abstract virtual int GetRawXml(String& pbstrXML);
    public abstract virtual int GetDocumentXml(string url, String& pbstrXML);
    public abstract virtual int GetReferenceCount(Int32& pCount);
    public abstract virtual int GetReferenceInfo(int pIndex, IReferenceInfo& ppIReferenceInfo);
    public abstract virtual int GetDiscoverySession(IDiscoverySession& discoverySession);
    public abstract virtual int GetUrl(String& pbstrURL);
    public abstract virtual int AddWebReference(object punkWebReferenceFolder, string bstrDestinationPath);
    public abstract virtual int AddWebReferenceTo(object punkWebReferenceFolder, string bstrDestinationPath, string bstrDiscomapFilename);
}
[GuidAttribute("9947783D-B173-4FD9-8E6E-91482CF9E239")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.Shell.Interop.IDiscoveryResult2 {
    public abstract virtual int DownloadServiceDocument(string bstrDestinationPath, string bstrDiscomapFileName, IDiscoveryClientResultCollection& ppIDiscoveryClientResultCollection);
}
[GuidAttribute("D622FE99-2087-4D78-8B49-7B46460475FD")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.Shell.Interop.IDiscoverySession {
    public abstract virtual int DiscoverUrl(string pbstrURL, IDiscoveryResult& pIDiscoveryResult);
    public abstract virtual int DiscoverUrlAsync(string url, IDiscoverUrlCallBack pDiscoverUrlCallBack, Int32& cookie);
    public abstract virtual int CancelDiscoverUrl(int cookie);
    public abstract virtual int GetDiscoverError(int cookie);
    public abstract virtual int UpdateWebReference(object punkWebReferenceFolder, string bstrUrl, string bstrDestinationPath);
}
[GuidAttribute("94A0F6F1-10BC-11D0-8D09-00A0C90F2732")]
[ComConversionLossAttribute]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.Shell.Interop.IDocumentSite {
    public abstract virtual int SetSite(IServiceProvider pSite);
    public abstract virtual int GetSite(IServiceProvider& ppSite);
    public abstract virtual int GetCompiler(Guid& iid, IntPtr& ppvObj);
    public abstract virtual int ActivateObject(UInt32 dwFlags);
    public abstract virtual int IsObjectShowable();
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("61D4A8A1-2C90-11D2-ADE4-00C04F98F417")]
public interface Microsoft.VisualStudio.Shell.Interop.IDocumentSite2 {
    public abstract virtual int SetSite(IServiceProvider pSite);
    public abstract virtual int GetSite(IServiceProvider& ppSite);
    public abstract virtual int GetCompiler(Guid& iid, IntPtr& ppvObj);
    public abstract virtual int ActivateObject(UInt32 dwFlags);
    public abstract virtual int IsObjectShowable();
    public abstract virtual int GetObject(Object& ppDisp);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("00000121-0000-0000-C000-000000000046")]
public interface Microsoft.VisualStudio.Shell.Interop.IDropSource {
    public abstract virtual int QueryContinueDrag(int fEscapePressed, UInt32 grfKeyState);
    public abstract virtual int GiveFeedback(UInt32 dwEffect);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("F59FD070-0063-4256-8212-E5DB6FC22253")]
public interface Microsoft.VisualStudio.Shell.Interop.IEnlistingInProject {
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("9A04B730-656C-11D3-85FC-00C04F6123B3")]
public interface Microsoft.VisualStudio.Shell.Interop.IEnumComponents {
    public abstract virtual int Next(UInt32 celt, VSCOMPONENTSELECTORDATA[] rgelt, UInt32& pceltFetched);
    public abstract virtual int Skip(UInt32 celt);
    public abstract virtual int Reset();
    public abstract virtual int Clone(IEnumComponents& ppIEnumComponents);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("46B4B7C2-11EB-4753-BE4B-0E0A16E9CE53")]
public interface Microsoft.VisualStudio.Shell.Interop.IEnumComReferences {
    public abstract virtual int Next(UInt32 celt, COMREFERENCE[] rgRefs, UInt32& pceltFetched);
    public abstract virtual int Skip(UInt32 celt);
    public abstract virtual int Reset();
    public abstract virtual int Clone(IEnumComReferences& ppenum);
}
[GuidAttribute("BEC77711-2DF9-44D7-B478-A453C2E8A134")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.Shell.Interop.IEnumHierarchies {
    public abstract virtual int Next(UInt32 celt, IVsHierarchy[] rgelt, UInt32& pceltFetched);
    public abstract virtual int Skip(UInt32 celt);
    public abstract virtual int Reset();
    public abstract virtual int Clone(IEnumHierarchies& ppenum);
}
[GuidAttribute("687396AE-252E-460F-8F54-EF2C521BB6D8")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.Shell.Interop.IEnumHierarchyItems {
    public abstract virtual int Next(UInt32 celt, VSITEMSELECTION[] rgelt, UInt32& pceltFetched);
    public abstract virtual int Skip(UInt32 celt);
    public abstract virtual int Reset();
    public abstract virtual int Clone(IEnumHierarchyItems& ppenum);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("9673A35F-C03A-438D-BD7E-27D9E28AC184")]
public interface Microsoft.VisualStudio.Shell.Interop.IEnumPackages {
    public abstract virtual int Next(UInt32 celt, IVsPackage[] rgelt, UInt32& pceltFetched);
    public abstract virtual int Skip(UInt32 celt);
    public abstract virtual int Reset();
    public abstract virtual int Clone(IEnumPackages& ppenum);
}
[GuidAttribute("9E6F916A-3E8B-4741-8AFB-5187F82B699B")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.Shell.Interop.IEnumProjectStartupServices {
    public abstract virtual int Next(UInt32 celt, Guid[] rgelt, UInt32& pceltFetched);
    public abstract virtual int Skip(UInt32 celt);
    public abstract virtual int Reset();
    public abstract virtual int Clone(IEnumProjectStartupServices& ppenum);
}
[GuidAttribute("D5C658C5-59A1-414F-AF5E-E72E83377EAE")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.Shell.Interop.IEnumRunningDocuments {
    public abstract virtual int Next(UInt32 celt, UInt32[] rgelt, UInt32& pceltFetched);
    public abstract virtual int Skip(UInt32 celt);
    public abstract virtual int Reset();
    public abstract virtual int Clone(IEnumRunningDocuments& ppenum);
}
[GuidAttribute("7431FCE8-8E4F-49B6-BB50-E295636CBA6B")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.Shell.Interop.IEnumSystemAssemblies {
    public abstract virtual int Next(UInt32 celt, String[] rgAssemblies, UInt32& pceltFetched);
    public abstract virtual int Count(UInt32& pCount);
    public abstract virtual int Skip(UInt32 celt);
    public abstract virtual int Reset();
    public abstract virtual int Clone(IEnumSystemAssemblies& ppIEnumComponents);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("D92C0B96-E08D-4268-A941-6D7D670F1820")]
public interface Microsoft.VisualStudio.Shell.Interop.IEnumTargetFrameworks {
    public abstract virtual int Next(UInt32 celt, UInt32[] rgFrameworks, UInt32& pceltFetched);
    public abstract virtual int Count(UInt32& pCount);
    public abstract virtual int Skip(UInt32 celt);
    public abstract virtual int Reset();
    public abstract virtual int Clone(IEnumTargetFrameworks& ppIEnumComponents);
}
[GuidAttribute("5303CCDE-D37A-445B-88A1-A71742F66345")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.Shell.Interop.IEnumToolboxItems {
    public abstract virtual int Next(UInt32 celt, IDataObject[] rgelt, UInt32& pceltFetched);
    public abstract virtual int Skip(UInt32 celt);
    public abstract virtual int Reset();
    public abstract virtual int Clone(IEnumToolboxItems& ppenum);
}
[GuidAttribute("CC81495D-3C2B-4B1E-82CE-965EA5FCA2A0")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.Shell.Interop.IEnumToolboxTabs {
    public abstract virtual int Next(UInt32 celt, String[] rgelt, UInt32& pceltFetched);
    public abstract virtual int Skip(UInt32 celt);
    public abstract virtual int Reset();
    public abstract virtual int Clone(IEnumToolboxTabs& ppenum);
}
[GuidAttribute("3909921B-BACD-11D2-BD66-00C04FA302E2")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.Shell.Interop.IEnumVsENCRebuildableProjectCfgs {
    public abstract virtual int Next(UInt32 celt, IVsENCRebuildableProjectCfg[] rgelt, UInt32& pceltFetched);
    public abstract virtual int Skip(UInt32 celt);
    public abstract virtual int Reset();
    public abstract virtual int Clone(IEnumVsENCRebuildableProjectCfgs& ppEnum);
    public abstract virtual int GetCount(UInt32& pcelt);
}
[GuidAttribute("CF9F5EA4-CE28-4DC6-B058-EE910B9171AE")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.Shell.Interop.IEnumVsProfilerTargetInfos {
    public abstract virtual int Next(UInt32 celt, IVsProfilerTargetInfo[] rgelt, UInt32& pceltFetched);
    public abstract virtual int Skip(UInt32 celt);
    public abstract virtual int Reset();
    public abstract virtual int Clone(IEnumVsProfilerTargetInfos& ppEnum);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("4DB4E7D3-5550-41AE-A612-3D28CD0C52A8")]
public interface Microsoft.VisualStudio.Shell.Interop.IEnumWebServices {
    public abstract virtual int Next(UInt32 celt, IVsWebService[] rgelt, UInt32& pceltFetched);
    public abstract virtual int Skip(UInt32 celt);
    public abstract virtual int Reset();
    public abstract virtual int Clone(IEnumWebServices& ppEnum);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("8C453B03-8907-435B-96D7-573C40948F5C")]
public interface Microsoft.VisualStudio.Shell.Interop.IEnumWindowFrames {
    public abstract virtual int Next(UInt32 celt, IVsWindowFrame[] rgelt, UInt32& pceltFetched);
    public abstract virtual int Skip(UInt32 celt);
    public abstract virtual int Reset();
    public abstract virtual int Clone(IEnumWindowFrames& ppenum);
}
[GuidAttribute("1CF2B120-547D-101B-8E65-08002B2BD119")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.Shell.Interop.IErrorInfo {
    public abstract virtual int GetGuid(Guid& pGuid);
    public abstract virtual int GetSource(String& pBstrSource);
    public abstract virtual int GetDescription(String& pbstrDescription);
    public abstract virtual int GetHelpFile(String& pBstrHelpFile);
    public abstract virtual int GetHelpContext(UInt32& pdwHelpContext);
}
[InterfaceTypeAttribute("1")]
[ComConversionLossAttribute]
[GuidAttribute("A575C060-5B17-11D1-AB3E-00A0C9055A90")]
public interface Microsoft.VisualStudio.Shell.Interop.IExtendedObject {
    public abstract virtual int GetInnerObject(Guid& iid, IntPtr& ppvObject);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("6D5140D6-7436-11CE-8034-00AA006009FA")]
public interface Microsoft.VisualStudio.Shell.Interop.IExtendedTypeLib {
    public abstract virtual int CreateExtendedTypeLib(string lpstrCtrlLibFileName, string lpstrLibNamePrepend, Type ptinfoExtender, UInt32 dwReserved, UInt32 dwFlags, string lpstrDirectoryName, ITypeLib& pptLib);
    public abstract virtual int AddRefExtendedTypeLib(string lpstrCtrlLibFileName, string lpstrLibNamePrepend, Type ptinfoExtender, UInt32 dwReserved, UInt32 dwFlags, string lpstrDirectoryName, ITypeLib& pptLib);
    public abstract virtual int AddRefExtendedTypeLibOfClsid(Guid& rclsidControl, string lpstrLibNamePrepend, Type ptinfoExtender, UInt32 dwReserved, UInt32 dwFlags, string lpstrDirectoryName, Type& pptinfo);
    public abstract virtual int SetExtenderInfo(string lpstrDirectoryName, Type ptinfoExtender, UInt32 dwReserved);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("394AB223-9FC6-4893-8943-9F6C70D51891")]
public interface Microsoft.VisualStudio.Shell.Interop.IFreeThreadedComWrapper {
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("6D5140C8-7436-11CE-8034-00AA006009FA")]
public interface Microsoft.VisualStudio.Shell.Interop.IHelp {
    public abstract virtual int GetHelpFile(String& pbstr);
    public abstract virtual int GetHelpInfo(UInt32& pdwHelpInfo);
    public abstract virtual int ShowHelp(string szHelp, UInt32 fuCommand, UInt32 dwHelpContext);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("6D5140D4-7436-11CE-8034-00AA006009FA")]
public interface Microsoft.VisualStudio.Shell.Interop.ILicensedClassManager {
    public abstract virtual int OnChangeInRequiredClasses(IRequireClasses pirc);
}
[GuidAttribute("6D5140D3-7436-11CE-8034-00AA006009FA")]
[InterfaceTypeAttribute("1")]
[ComConversionLossAttribute]
public interface Microsoft.VisualStudio.Shell.Interop.ILocalRegistry {
    public abstract virtual int CreateInstance(Guid clsid, object punkOuter, Guid& riid, UInt32 dwFlags, IntPtr& ppvObj);
    public abstract virtual int GetTypeLibOfClsid(Guid clsid, ITypeLib& pptLib);
    public abstract virtual int GetClassObjectOfClsid(Guid& clsid, UInt32 dwFlags, IntPtr lpReserved, Guid& riid, IntPtr& ppvClassObject);
}
[GuidAttribute("77BB19B0-0462-11D1-AAF6-00A0C9055A90")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.Shell.Interop.ILocalRegistry2 {
    public abstract virtual int CreateInstance(Guid clsid, object punkOuter, Guid& riid, UInt32 dwFlags, IntPtr& ppvObj);
    public abstract virtual int GetTypeLibOfClsid(Guid clsid, ITypeLib& pptLib);
    public abstract virtual int GetClassObjectOfClsid(Guid& clsid, UInt32 dwFlags, IntPtr lpReserved, Guid& riid, IntPtr ppvClassObject);
    public abstract virtual int GetLocalRegistryRoot(String& pbstrRoot);
}
[ComConversionLossAttribute]
[GuidAttribute("1B01F13F-ABEE-4761-91AF-76CE6B4C9E7A")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.Shell.Interop.ILocalRegistry3 {
    public abstract virtual int CreateInstance(Guid clsid, object punkOuter, Guid& riid, UInt32 dwFlags, IntPtr& ppvObj);
    public abstract virtual int GetTypeLibOfClsid(Guid clsid, ITypeLib& pptLib);
    public abstract virtual int GetClassObjectOfClsid(Guid& clsid, UInt32 dwFlags, IntPtr lpReserved, Guid& riid, IntPtr ppvClassObject);
    public abstract virtual int GetLocalRegistryRoot(String& pbstrRoot);
    public abstract virtual int CreateManagedInstance(string codeBase, string assemblyName, string typeName, Guid& riid, IntPtr& ppvObj);
    public abstract virtual int GetClassObjectOfManagedClass(string codeBase, string assemblyName, string typeName, Guid& riid, IntPtr& ppvClassObject);
}
[GuidAttribute("5C45B909-E820-4ACC-B894-0A013C6DA212")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.Shell.Interop.ILocalRegistry4 {
    public abstract virtual int RegisterClassObject(Guid& rclsid, UInt32& pdwCookie);
    public abstract virtual int RevokeClassObject(UInt32 dwCookie);
    public abstract virtual int RegisterInterface(Guid& riid);
    public abstract virtual int GetLocalRegistryRootEx(UInt32 dwRegType, UInt32& pdwRegRootHandle, String& pbstrRoot);
}
[GuidAttribute("D5F528B9-E492-43A7-AFC0-F98A8FB0516D")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.Shell.Interop.ILocalRegistry5 {
    public abstract virtual int CreateAggregatedManagedInstance(string codeBase, string AssemblyName, string TypeName, IntPtr pUnkOuter, Guid& riid, IntPtr& ppvObj);
}
public enum Microsoft.VisualStudio.Shell.Interop.INTELLIPROJSTATUS : Enum {
    public int value__;
    public static INTELLIPROJSTATUS INTELLIPROJSTATUS_LOADING;
    public static INTELLIPROJSTATUS INTELLIPROJSTATUS_LOADCOMPLETE;
    public static INTELLIPROJSTATUS INTELLIPROJSTATUS_CLOSE;
    public static INTELLIPROJSTATUS INTELLIPROJSTATUS_REFRESH;
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("ED0751FC-D772-4D1D-88FC-0C1AA275391B")]
public interface Microsoft.VisualStudio.Shell.Interop.IOleComponent2 {
    public abstract virtual int FReserved1(UInt32 dwReserved, UInt32 message, IntPtr wParam, IntPtr lParam);
    public abstract virtual int FPreTranslateMessage(MSG[] pMsg);
    public abstract virtual void OnEnterState(UInt32 uStateID, int fEnter);
    public abstract virtual void OnAppActivate(int fActive, UInt32 dwOtherThreadID);
    public abstract virtual void OnLoseActivation();
    public abstract virtual void OnActivationChange(IOleComponent pic, int fSameComponent, OLECRINFO[] pcrinfo, int fHostIsActivating, OLECHOSTINFO[] pchostinfo, UInt32 dwReserved);
    public abstract virtual int FDoIdle(UInt32 grfidlef);
    public abstract virtual int FContinueMessageLoop(UInt32 uReason, IntPtr pvLoopData, MSG[] pMsgPeeked);
    public abstract virtual int FQueryTerminate(int fPromptUser);
    public abstract virtual void Terminate();
    public abstract virtual IntPtr HwndGetWindow(UInt32 dwWhich, UInt32 dwReserved);
    public abstract virtual int GetWaitHandlesAndTimeout(IntPtr[]& aHandles, UInt32& pnHandles, UInt32& pdwTimeout, IntPtr pvLoopData);
    public abstract virtual int OnHandleSignaled(UInt32 nHandle, IntPtr pvLoopData, Boolean& pfContinue);
    public abstract virtual int OnTimeout(IntPtr pvLoopData, Boolean& pfContinue);
}
[GuidAttribute("5EFC7972-14BC-11CF-9B2B-00AA00573819")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.Shell.Interop.IOleComponentUIManager {
    public abstract virtual int Deleted1();
    public abstract virtual int Deleted2();
    public abstract virtual void OnUIEvent(UInt32 dwCompRole, Guid& rclsidComp, Guid& pguidUIEventGroup, UInt32 nUIEventId, UInt32 dwUIEventStatus, UInt32 dwEventFreq, RECT[] prcEventRegion, Object& pvarEventArg);
    public abstract virtual int OnUIEventProgress(UInt32& pdwCookie, int fInProgress, string pwszLabel, UInt32 nComplete, UInt32 nTotal);
    public abstract virtual int SetStatus(string pwszStatusText, UInt32 dwReserved);
    public abstract virtual int ShowContextMenu(UInt32 dwCompRole, Guid& rclsidActive, int nMenuId, POINTS[] pos, IOleCommandTarget pCmdTrgtActive);
    public abstract virtual int ShowHelp(UInt32 dwCompRole, Guid& rclsidComp, POINT posMouse, UInt32 dwHelpCmd, string pszHelpFile, UInt32 dwData);
    public abstract virtual int ShowMessage(UInt32 dwCompRole, Guid& rclsidComp, string pszTitle, string pszText, string pszHelpFile, UInt32 dwHelpContextID, OLEMSGBUTTON msgbtn, OLEMSGDEFBUTTON msgdefbtn, OLEMSGICON msgicon, int fSysAlert, Int32& pnResult);
}
[GuidAttribute("5EFC7970-14BC-11CF-9B2B-00AA00573819")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.Shell.Interop.IOleInPlaceComponent {
    public abstract virtual int UseComponentUIManager(UInt32 dwCompRole, UInt32& pgrfCompFlags, IOleComponentUIManager pCompUIMgr, IOleInPlaceComponentSite pIPCompSite);
    public abstract virtual int OnWindowActivate(UInt32 dwWindowType, int fActivate);
    public abstract virtual void OnEnterState(UInt32 dwStateId, int fEnter);
    public abstract virtual int FDoIdle(UInt32 grfidlef);
    public abstract virtual int FQueryClose(int fPromptUser);
    public abstract virtual int TranslateCntrAccelerator(MSG[] pMsg);
    public abstract virtual int GetCntrContextMenu(UInt32 dwRoleActiveObj, Guid& rclsidActiveObj, int nMenuIdActiveObj, POINTS[] pos, Guid& pclsidCntr, OLEMENUID[] menuid, UInt32& pgrf);
    public abstract virtual int GetCntrHelp(UInt32& pdwRole, Guid& pclsid, POINT posMouse, UInt32 dwHelpCmd, string pszHelpFileIn, String& ppszHelpFileOut, UInt32 dwDataIn, UInt32& pdwDataOut);
    public abstract virtual int GetCntrMessage(UInt32& pdwRole, Guid& pclsid, string pszTitleIn, string pszTextIn, string pszHelpFileIn, String& ppszTitleOut, String& ppszTextOut, String& ppszHelpFileOut, UInt32& pdwHelpContextID, OLEMSGBUTTON[] pmsgbtn, OLEMSGDEFBUTTON[] pmsgdefbtn, OLEMSGICON[] pmsgicon, Int32& pfSysAlert);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("5EFC7971-14BC-11CF-9B2B-00AA00573819")]
public interface Microsoft.VisualStudio.Shell.Interop.IOleInPlaceComponentSite {
    public abstract virtual int SetUIMode(UInt32 dwUIMode);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("5EFC7973-14BC-11CF-9B2B-00AA00573819")]
public interface Microsoft.VisualStudio.Shell.Interop.IOleInPlaceComponentUIManager {
    public abstract virtual int UIActivateForMe(UInt32 dwCompRole, Guid& rclsidActive, IOleInPlaceActiveObject pIPActObj, IOleCommandTarget pCmdTrgtActive, UInt32 cCmdGrpId, Int32[] rgnCmdGrpId);
    public abstract virtual int UpdateUI(UInt32 dwCompRole, int fImmediateUpdate, UInt32 dwReserved);
    public abstract virtual int SetActiveUI(UInt32 dwCompRole, Guid& rclsid, UInt32 cCmdGrpId, Int32[] rgnCmdGrpId);
    public abstract virtual void OnUIComponentEnterState(UInt32 dwCompRole, UInt32 dwStateId, UInt32 dwReserved);
    public abstract virtual int FOnUIComponentExitState(UInt32 dwCompRole, UInt32 dwStateId, UInt32 dwReserved);
    public abstract virtual int FUIComponentInState(UInt32 dwStateId);
    public abstract virtual int FContinueIdle();
}
[GuidAttribute("33C0C1DA-33CF-11D3-BFF2-00C04F990235")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.Shell.Interop.IPerPropertyBrowsing2 {
    public abstract virtual int MapPropertyToBuilder(int dispid, Guid& pguidBuilder, UInt32& pdwType);
    public abstract virtual int ExecuteBuilder(int dispid, Guid& rguidBuilder, object pdispApp, IntPtr hwndBuilderOwner, Object& pvarValue);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("3AFAE242-B530-11D0-8199-00A0C91BBEE3")]
public interface Microsoft.VisualStudio.Shell.Interop.IPersistFileFormat {
    public abstract virtual int GetClassID(Guid& pClassID);
    public abstract virtual int IsDirty(Int32& pfIsDirty);
    public abstract virtual int InitNew(UInt32 nFormatIndex);
    public abstract virtual int Load(string pszFilename, UInt32 grfMode, int fReadOnly);
    public abstract virtual int Save(string pszFilename, int fRemember, UInt32 nFormatIndex);
    public abstract virtual int SaveCompleted(string pszFilename);
    public abstract virtual int GetCurFile(String& ppszFilename, UInt32& pnFormatIndex);
    public abstract virtual int GetFormatList(String& ppszFormatList);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("6B0C8632-6F01-4E54-9645-FFE82A2F4FE9")]
public interface Microsoft.VisualStudio.Shell.Interop.IPersistXMLFragment {
    public abstract virtual int InitNew(Guid& guidFlavor, UInt32 storage);
    public abstract virtual int IsFragmentDirty(UInt32 storage, Int32& pfDirty);
    public abstract virtual int Load(Guid& guidFlavor, UInt32 storage, string pszXMLFragment);
    public abstract virtual int Save(Guid& guidFlavor, UInt32 storage, String& pbstrXMLFragment, int fClearDirty);
}
[GuidAttribute("03AEFCEA-62A9-4606-8E17-7CB0FC13D5E0")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.Shell.Interop.IPreferPropertyPagesWithTreeControl {
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("5FDD1FE6-898B-4D51-B2BC-4C936760C572")]
public interface Microsoft.VisualStudio.Shell.Interop.IProfferAsyncService {
    public abstract virtual UInt32 ProfferAsyncService(Guid& rguidService, IAsyncServiceProvider psp);
    public abstract virtual void RevokeAsyncService(UInt32 dwCookie);
    public abstract virtual IAsyncProgressCallback GetServiceProgressCallback();
}
[GuidAttribute("CB728B20-F786-11CE-92AD-00AA00A74CD0")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.Shell.Interop.IProfferService {
    public abstract virtual int ProfferService(Guid& rguidService, IServiceProvider psp, UInt32& pdwCookie);
    public abstract virtual int RevokeService(UInt32 dwCookie);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("718CC500-0A76-11CF-8045-00AA006009FA")]
public interface Microsoft.VisualStudio.Shell.Interop.IProfferTypeLib {
    public abstract virtual int ProfferTypeLib(Guid& guidTypeLib, UInt32 uVerMaj, UInt32 uVerMin, UInt32 dwFlags);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("33C0C1DB-33CF-11D3-BFF2-00C04F990235")]
public interface Microsoft.VisualStudio.Shell.Interop.IPropertyPageUndoString {
    public abstract virtual int GetUndoString(String& ppszUndo);
}
[GuidAttribute("33C0C1DD-33CF-11D3-BFF2-00C04F990235")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.Shell.Interop.IProvideAltHTML {
    public abstract virtual int GetAltHTML(String& pstrAltHTML);
    public abstract virtual int IsAltHTMLEditable(SByte& pfIsEditable);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("468CFB80-B4F9-11CF-80DD-00AA00614895")]
public interface Microsoft.VisualStudio.Shell.Interop.IProvideDynamicClassInfo {
    public abstract virtual int GetClassInfo(Type& ppTI);
    public abstract virtual int GetDynamicClassInfo(Type& ppTI, UInt32& pdwCookie);
    public abstract virtual int FreezeShape();
}
[GuidAttribute("33C0C1D8-33CF-11D3-BFF2-00C04F990235")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.Shell.Interop.IProvidePropertyBuilder {
    public abstract virtual int MapPropertyToBuilder(int dispid, Int32& pdwCtlBldType, String& pbstrGuidBldr, Boolean& pfRetVal);
    public abstract virtual int ExecuteBuilder(int dispid, string bstrGuidBldr, object pdispApp, IntPtr hwndBldrOwner, Object& pvarValue, Boolean& pfRetVal);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("33C0C1DC-33CF-11D3-BFF2-00C04F990235")]
public interface Microsoft.VisualStudio.Shell.Interop.IProvideRuntimeHTML {
    public abstract virtual int GetRuntimeHTML(String& pstrRuntimeHTML);
}
[GuidAttribute("B9A32C92-B14D-4AE3-A955-5CBC3E75FCA5")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.Shell.Interop.IReferenceInfo {
    public abstract virtual int GetNodeType(DiscoveryNodeType[] pType);
    public abstract virtual int GetUrl(String& ppbstrUrl);
}
[GuidAttribute("6D5140D0-7436-11CE-8034-00AA006009FA")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.Shell.Interop.IRequireClasses {
    public abstract virtual int CountRequiredClasses(UInt32& pCount);
    public abstract virtual int GetRequiredClasses(UInt32 index, Guid& pclsid);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("795635A0-4522-11D1-8DCE-00AA00A3F593")]
public interface Microsoft.VisualStudio.Shell.Interop.ISccManagerLoaded {
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("B9A32C92-B14D-4AE3-A955-5CBC3E75FCA8")]
public interface Microsoft.VisualStudio.Shell.Interop.ISchemaReferenceInfo {
    public abstract virtual int GetTargetNamespace(String& pbstrRef);
}
[GuidAttribute("6D5140C6-7436-11CE-8034-00AA006009FA")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.Shell.Interop.ISelectionContainer {
    public abstract virtual int CountObjects(UInt32 dwFlags, UInt32& pc);
    public abstract virtual int GetObjects(UInt32 dwFlags, UInt32 cObjects, Object[] apUnkObjects);
    public abstract virtual int SelectObjects(UInt32 cSelect, Object[] apUnkSelect, UInt32 dwFlags);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("6D5140C5-7436-11CE-8034-00AA006009FA")]
public interface Microsoft.VisualStudio.Shell.Interop.ITrackSelection {
    public abstract virtual int OnSelectChange(ISelectionContainer pSC);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("759D0500-D979-11CE-84EC-00AA00614F3E")]
public interface Microsoft.VisualStudio.Shell.Interop.IUIElement {
    public abstract virtual int Show();
    public abstract virtual int Hide();
    public abstract virtual int IsVisible();
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("2C2EA031-02BE-11D1-8C85-00C04FC2AA89")]
public interface Microsoft.VisualStudio.Shell.Interop.IUIHostLocale {
    public abstract virtual int GetUILocale(UInt32& plcid);
    public abstract virtual int GetDialogFont(UIDLGLOGFONT[] pLOGFONT);
}
[ComConversionLossAttribute]
[InterfaceTypeAttribute("1")]
[GuidAttribute("2C2EA032-02BE-11D1-8C85-00C04FC2AA89")]
public interface Microsoft.VisualStudio.Shell.Interop.IUIHostLocale2 {
    public abstract virtual int GetUILocale(UInt32& plcid);
    public abstract virtual int GetDialogFont(UIDLGLOGFONT[] pLOGFONT);
    public abstract virtual int LoadUILibrary(string lpstrPath, string lpstrDllName, UInt32 dwExFlags, IntPtr& phinstOut);
    public abstract virtual int MungeDialogFont(UInt32 dwSize, Byte[] pDlgTemplate, IntPtr& ppDlgTemplateOut);
    public abstract virtual int LoadDialog(IntPtr hMod, UInt32 dwDlgResId, IntPtr& ppDlgTemplate);
    public abstract virtual int GetUILibraryFileName(string lpstrPath, string lpstrDllName, String& pbstrOut);
}
[GuidAttribute("2C2EA033-02BE-11D1-8C85-00C04FC2AA89")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.Shell.Interop.IUIHostLocale3 {
    public abstract virtual int GetUILocale(UInt32& plcid);
    public abstract virtual int GetDialogFont(UIDLGLOGFONT[] pLOGFONT);
    public abstract virtual int LoadUILibrary(string lpstrPath, string lpstrDllName, UInt32 dwExFlags, IntPtr& phinstOut);
    public abstract virtual int MungeDialogFont(UInt32 dwSize, Byte& pDlgTemplate, IntPtr& ppDlgTemplateOut);
    public abstract virtual int LoadDialog(IntPtr hMod, UInt32 dwDlgResId, IntPtr& ppDlgTemplate);
    public abstract virtual int GetUILibraryFileName(string lpstrPath, string lpstrDllName, String& pbstrOut);
    public abstract virtual int GetDialogFontEx(IntPtr hwnd, UIDLGLOGFONT[] pLOGFONT);
}
[GuidAttribute("76AF73F9-A322-42B0-A515-D4D7553508FE")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsActivityLog {
    public abstract virtual int LogEntry(UInt32 actType, string pszSource, string pszDescription);
    public abstract virtual int LogEntryGuid(UInt32 actType, string pszSource, string pszDescription, Guid guid);
    public abstract virtual int LogEntryHr(UInt32 actType, string pszSource, string pszDescription, int hr);
    public abstract virtual int LogEntryGuidHr(UInt32 actType, string pszSource, string pszDescription, Guid guid, int hr);
    public abstract virtual int LogEntryPath(UInt32 actType, string pszSource, string pszDescription, string pszPath);
    public abstract virtual int LogEntryGuidPath(UInt32 actType, string pszSource, string pszDescription, Guid guid, string pszPath);
    public abstract virtual int LogEntryHrPath(UInt32 actType, string pszSource, string pszDescription, int hr, string pszPath);
    public abstract virtual int LogEntryGuidHrPath(UInt32 actType, string pszSource, string pszDescription, Guid guid, int hr, string pszPath);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("41F92AB8-98B0-4CF4-907B-C5CE4403A570")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsAddNewWebProjectItemDlg {
    public abstract virtual int AddNewWebProjectItemDlg(UInt32 itemidLoc, Guid& rguidProject, IVsProject pProject, string pszDlgTitle, string lpszHelpTopic, string lpszLanguage, string lpszSelect, UInt32 options);
}
[GuidAttribute("11DFCCEB-D935-4A9F-9796-5BA433C5AF8E")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsAddProjectItemDlg {
    public abstract virtual int AddProjectItemDlg(UInt32 itemidLoc, Guid& rguidProject, IVsProject pProject, UInt32 grfAddFlags, string lpszExpand, string lpszSelect, String& pbstrLocation, String& pbstrFilter, Int32& pfDontShowAgain);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("6B90D260-E363-4E8A-AE51-BD19C493416D")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsAddProjectItemDlg2 {
    public abstract virtual int AddProjectItemDlg(UInt32 itemidLoc, Guid& rguidProject, IVsProject pProject, UInt32 grfAddFlags, string lpszExpand, string lpszSelect, String& pbstrLocation, String& pbstrFilter, Int32& pfDontShowAgain);
    public abstract virtual int AddProjectItemDlgTitled(UInt32 itemidLoc, Guid& rguidProject, IVsProject pProject, UInt32 grfAddFlags, string lpszDlgTitle, string lpszExpand, string lpszSelect, String& pbstrLocation, String& pbstrFilter, Int32& pfDontShowAgain);
    public abstract virtual int AddNewProjectItem(UInt32 itemidLoc, Guid& rguidProject, IVsProject pProject, UInt32 grfEditorFlags, Guid& rguidEditorType, string pszPhysicalView, Guid& rguidLogicalView, string pszItemName, String& pbstrFileToAdd);
    public abstract virtual int AddExistingProjectItems(UInt32 itemidLoc, Guid& rguidProject, IVsProject pProject, UInt32 grfEditorFlags, Guid& rguidEditorType, string pszPhysicalView, Guid& rguidLogicalView, UInt32 cFilesToAdd, String[] rgpszFilesToAdd);
    public abstract virtual int AddProjectItemDlgTitledEx(UInt32 itemidLoc, Guid& rguidProject, IVsProject pProject, UInt32 grfAddFlags, string lpszDlgTitle, string lpszTreeViewTitle, string lpszHelpTopic, string lpszExpand, string lpszSelect, String& pbstrLocation, String& pbstrFilter, Int32& pfDontShowAgain);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("525FF8A4-FB75-4924-A0FA-F50C44087857")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsAddProjectItemDlg3 {
    public abstract virtual void AddProjectItemDlgRemotable(UInt32 itemidLoc, Guid& rguidProjectId, UInt32 grfAddFlags, string lpszDlgTitle, string lpszTreeViewTitle, string lpszHelpTopic, string lpszExpand, string lpszSelect, String& pbstrLocation, String& pbstrFilter, Int32& pfDontShowAgain);
    public abstract virtual void AddNewWebProjectItemDlgRemotable(UInt32 itemidLoc, Guid& rguidProjectId, string pszDlgTitle, string lpszHelpTopic, string lpszLanguage, string lpszSelect, UInt32 options);
}
[GuidAttribute("C1A29AC2-8FEC-407A-8650-41E05F5E87F7")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsAddToolboxItems {
    public abstract virtual int AddItem(IDataObject pDO, TBXITEMINFO[] ptif, string szItemID, string lpszTab);
    public abstract virtual int AddItemWithOwningPackage(IDataObject pDO, TBXITEMINFO[] ptif, string szItemID, string lpszTab, Guid& guidPkg);
}
[GuidAttribute("BD71396F-39C6-4E3F-BBA2-79CE33A8B302")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsAddWebReferenceDlg {
    public abstract virtual int AddWebReferenceDlg(String& pbstrWebReferenceUrl, Int32& pfCancelled);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("FE037B96-A8D1-4961-A3F3-E969094BA978")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsAddWebReferenceDlg2 {
    public abstract virtual int AddWebReferenceDlg(IDiscoverySession pDiscoverySession, String& pbstrWebReferenceUrl, String& pbstrWebReferenceName, IDiscoveryResult& ppIDiscoveryResult, Int32& pfCancelled);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("FFB2E715-7312-4B93-83D7-D37BCC561C90")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsAggregatableProject {
    public abstract virtual int SetInnerProject(object punkInner);
    public abstract virtual int InitializeForOuter(string pszFilename, string pszLocation, string pszName, UInt32 grfCreateFlags, Guid& iidProject, IntPtr& ppvProject, Int32& pfCanceled);
    public abstract virtual int OnAggregationComplete();
    public abstract virtual int GetAggregateProjectTypeGuids(String& pbstrProjTypeGuids);
    public abstract virtual int SetAggregateProjectTypeGuids(string lpstrProjTypeGuids);
}
[GuidAttribute("44CEC4A2-7148-4044-B836-678374E296F2")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsAggregatableProject2 {
    public abstract virtual void OnAggregationFailure();
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("44569501-2AD0-4966-9BAC-12B799A1CED6")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsAggregatableProjectFactory {
    public abstract virtual int GetAggregateProjectType(string pszFilename, String& pbstrProjTypeGuid);
    public abstract virtual int PreCreateForOuter(object punkOuter, Object& ppunkProject);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("C7F21561-D58A-11D2-BF4A-0080C728D9A0")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsAppCommandLine {
    public abstract virtual int GetOption(string pszOptionName, Int32& pfPresent, String& pbstrOptionValue);
}
[GuidAttribute("0F9810E7-36BA-4986-938B-F7E14EE02F9A")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsAppCompat {
    public abstract virtual void AskForUserConsentToBreakAssetCompat(Array sarrProjectHierarchies);
    public abstract virtual void BreakAssetCompatibility(IVsHierarchy pProjHier, string lpszMinimumVersion);
    public abstract virtual void GetCurrentDesignTimeCompatVersion(String& pbstrCurrentDesignTimeCompatVersion);
}
[GuidAttribute("2C73AFC4-0E02-4A1E-9607-82B417EF00B2")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsAppContainerBootstrapper {
    public abstract virtual UInt32 AdviseAppContainerBootstrapperEvents(IVsAppContainerBootstrapperEvents sink);
    public abstract virtual void UnadviseAppContainerBootstrapperEvents(UInt32 cookie);
    public abstract virtual IVsTask BootstrapAsync(string projectUniqueName, string target, int cItems, String[] packagesToDownload, IVsAppContainerBootstrapperLogger logger);
    public abstract virtual IVsTask BootstrapForDebuggingAsync(string projectUniqueName, string target, string recipePath, IVsAppContainerBootstrapperLogger logger);
}
[GuidAttribute("998E42FD-1646-4538-A519-9D4CA6B24740")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsAppContainerBootstrapper2 {
    public abstract virtual UInt32 AdviseAppContainerBootstrapperEvents(IVsAppContainerBootstrapperEvents sink);
    public abstract virtual void UnadviseAppContainerBootstrapperEvents(UInt32 cookie);
    public abstract virtual IVsTask BootstrapAsync(string projectUniqueName, string target, int cItems, String[] packagesToDownload, IVsAppContainerBootstrapperLogger logger);
    public abstract virtual IVsTask BootstrapForDebuggingAsync(string projectUniqueName, string target, string recipePath, IVsAppContainerBootstrapperLogger logger);
    public abstract virtual IVsTask BootstrapForDiagnosticsAsync(string projectUniqueName, string target, int cItems, String[] packagesToDownload, IVsAppContainerBootstrapperLogger logger);
}
[GuidAttribute("2AA266FE-074F-4F6B-9B7B-4D231959D23D")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsAppContainerBootstrapper3 {
    public abstract virtual UInt32 AdviseAppContainerBootstrapperEvents(IVsAppContainerBootstrapperEvents sink);
    public abstract virtual void UnadviseAppContainerBootstrapperEvents(UInt32 cookie);
    public abstract virtual IVsTask BootstrapAsync(string projectUniqueName, string target, int cItems, VsBootstrapperPackageInfo[] packagesToDownload, int cOptionalItems, VsBootstrapperPackageInfo[] optionalPackagesToDownload, IVsAppContainerBootstrapperLogger logger);
    public abstract virtual IVsTask BootstrapForDebuggingAsync(string projectUniqueName, string target, string recipePath, IVsAppContainerBootstrapperLogger logger);
    public abstract virtual IVsTask BootstrapForDiagnosticsAsync(string projectUniqueName, string target, int cItems, String[] packagesToDownload, IVsAppContainerBootstrapperLogger logger);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("C83C1890-C93A-42E6-853B-91AAFD1CA688")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsAppContainerBootstrapper4 {
    public abstract virtual UInt32 AdviseAppContainerBootstrapperEvents(IVsAppContainerBootstrapperEvents sink);
    public abstract virtual void UnadviseAppContainerBootstrapperEvents(UInt32 cookie);
    public abstract virtual IVsTask BootstrapAsync(string projectUniqueName, string target, BootstrapMode mode, int cItems, VsBootstrapperPackageInfo[] packagesToDownload, int cOptionalItems, VsBootstrapperPackageInfo[] optionalPackagesToDownload, IVsAppContainerBootstrapperLogger logger);
    public abstract virtual IVsTask BootstrapForDebuggingAsync(string projectUniqueName, string target, BootstrapMode mode, string recipePath, IVsAppContainerBootstrapperLogger logger);
    public abstract virtual IVsTask BootstrapForDiagnosticsAsync(string projectUniqueName, string target, BootstrapMode mode, int cItems, String[] packagesToDownload, IVsAppContainerBootstrapperLogger logger);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("42E9550E-58E0-41AD-B561-67833A303C5E")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsAppContainerBootstrapper5 {
    public abstract virtual UInt32 AdviseAppContainerBootstrapperEvents(IVsAppContainerBootstrapperEvents sink);
    public abstract virtual void UnadviseAppContainerBootstrapperEvents(UInt32 cookie);
    public abstract virtual IVsTask BootstrapForDeployingAsync(BootstrappingArchitecture architecture, string target, BootstrappingMode mode, int cItems, VsBootstrapperPackageInfo[] packagesToDownload, int cOptionalItems, VsBootstrapperPackageInfo[] optionalPackagesToDownload, IVsAppContainerBootstrapperLogger logger);
    public abstract virtual IVsTask BootstrapForDebuggingAsync(BootstrappingArchitecture architecture, string target, BootstrappingMode mode, string appUserModelID, IVsAppContainerBootstrapperLogger logger);
    public abstract virtual IVsTask BootstrapForDiagnosticsAsync(BootstrappingArchitecture architecture, string target, BootstrappingMode mode, int cItems, String[] packagesToDownload, IVsAppContainerBootstrapperLogger logger);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("91B76FE3-4B74-4CAC-892F-FF948B937AE6")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsAppContainerBootstrapper6 {
    public abstract virtual string GetRunningStoreApps(string target);
    public abstract virtual IVsTask BootstrapForDebuggingAsUserAsync(BootstrappingArchitecture architecture, string target, int processId, IVsAppContainerBootstrapperLogger logger);
}
[GuidAttribute("B2B707D2-93B6-4569-A1F9-8E2E74A58F08")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsAppContainerBootstrapperEvents {
    public abstract virtual void QueryBootstrapStart(string projectUniqueName, string target, Boolean& cancel, String& cancelReason);
    public abstract virtual void OnBootstrapStart(string projectUniqueName, string target);
    public abstract virtual void OnBootstrapEnd(string projectUniqueName, string target, IVsAppContainerBootstrapperResult result);
    public abstract virtual void QueryBootstrapForDebuggingStart(string projectUniqueName, string target, string recipePath, Boolean& cancel, String& cancelReason);
    public abstract virtual void OnBootstrapForDebuggingStart(string projectUniqueName, string recipePath, string target);
    public abstract virtual void OnBootstrapForDebuggingEnd(string projectUniqueName, string target, string recipePath, IVsAppContainerBootstrapperResult result);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("5739B30E-A164-44EB-BB28-5BF6BBD02A08")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsAppContainerBootstrapperLogger {
    public abstract virtual void OutputMessage(string message);
}
[GuidAttribute("CE255F0B-88C6-4682-B3B8-8ACE9D2BA0A7")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsAppContainerBootstrapperResult {
    [DispIdAttribute("1610743808")]
public bool Succeeded { get; }
    [DispIdAttribute("1610743809")]
public string Address { get; }
    public abstract virtual bool get_Succeeded();
    public abstract virtual string get_Address();
}
[GuidAttribute("AB6D6E32-671E-444F-8B52-EA446698B038")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsAppContainerDeveloperLicensing {
    public abstract virtual DateTime CheckDeveloperLicense(String& pbstrMachine);
    public abstract virtual DateTime AcquireDeveloperLicense(String& pbstrMachine);
    public abstract virtual void RemoveDeveloperLicense(String& pbstrMachine);
}
[GuidAttribute("A830AC2A-4D69-45A3-A157-6574756034D5")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsAppContainerProjectDeploy {
    public abstract virtual UInt32 AdviseAppContainerDeployEvents(IVsAppContainerProjectDeployEvents sink);
    public abstract virtual void UnadviseAppContainerDeployEvents(UInt32 cookie);
    public abstract virtual IVsAppContainerProjectDeployOperation StartDeployAsync(UInt32 deployFlags, string packageContentsRecipe, string layoutLocation, string projectUniqueName, IVsAppContainerProjectDeployCallback deployCallback);
    public abstract virtual IVsAppContainerProjectDeployOperation StartRemoteDeployAsync(UInt32 deployFlags, object deployConnection, string packageContentsRecipe, string projectUniqueName, IVsAppContainerProjectDeployCallback deployCallback);
}
[GuidAttribute("2B65C715-43C1-4A30-B085-472FEF76C9EB")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsAppContainerProjectDeploy2 {
    public abstract virtual UInt32 AdviseAppContainerDeployEvents(IVsAppContainerProjectDeployEvents sink);
    public abstract virtual void UnadviseAppContainerDeployEvents(UInt32 cookie);
    public abstract virtual IVsAppContainerProjectDeployOperation StartDeployAsync(UInt32 deployFlags, string packageContentsRecipe, string layoutLocation, string projectUniqueName, IVsAppContainerProjectDeployCallback deployCallback);
    public abstract virtual IVsAppContainerProjectDeployOperation StartRemoteDeployAsync(UInt32 deployFlags, object deployConnection, string packageContentsRecipe, string projectUniqueName, IVsAppContainerProjectDeployCallback deployCallback);
    public abstract virtual IVsAppContainerProjectDeployOperation StartRemoteDeployAsync(UInt32 deployFlags, object deployConnection, string target, string packageContentsRecipe, string projectUniqueName, IVsAppContainerProjectDeployCallback deployCallback);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("D1F433DF-B126-49A7-A1FD-F4099EFC1A05")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsAppContainerProjectDeployCallback {
    public abstract virtual void OnEndDeploy(bool successful, string deployedPackageMoniker, string deployedAppUserModelID);
    public abstract virtual void OutputMessage(string message);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("35CC3FD8-5435-4B9E-95CD-7E30C378FBDF")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsAppContainerProjectDeployEvents {
    public abstract virtual void QueryDeployStart(string projectUniqueName, Boolean& fForceLocalDeployment, Boolean& fCancel, String& cancelReason);
    public abstract virtual void OnDeployStart(string projectUniqueName);
    public abstract virtual void OnDeployEnd(string projectUniqueName, IVsAppContainerProjectDeployResult result);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("7773BD9E-1F28-4787-986B-1C42C000E31C")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsAppContainerProjectDeployOperation {
    public abstract virtual void StopDeploy(bool fSync);
    public abstract virtual IVsAppContainerProjectDeployResult GetDeployResult();
}
[GuidAttribute("96785CEA-89F6-4FE6-AB54-F86E877DDFCD")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsAppContainerProjectDeployResult {
    public bool DeploySuccess { get; }
    public string PackageFullName { get; }
    public string FirstAppUserModelID { get; }
    public string LayoutFolder { get; }
    public abstract virtual bool get_DeploySuccess();
    public abstract virtual string get_PackageFullName();
    public abstract virtual string get_FirstAppUserModelID();
    public abstract virtual string get_LayoutFolder();
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("F33D7D20-49CE-47A7-9E3B-DCC9DD19AF00")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsAssemblyNameUnification {
    public abstract virtual int GetUnifiedAssemblyName(string wszFrameworkDirectory, string wszSimpleAssemblyName, string wszFullAssemblyName, String& pbstrUnifiedAssemblyName);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("B62A68C9-EA0A-4AD1-B7E5-80280798A41E")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsAssemblyReference {
    public string Name { get; public set; }
    public string FullPath { get; public set; }
    public bool AlreadyReferenced { get; public set; }
    public abstract virtual string get_Name();
    public abstract virtual void set_Name(string value);
    public abstract virtual string get_FullPath();
    public abstract virtual void set_FullPath(string value);
    public abstract virtual bool get_AlreadyReferenced();
    public abstract virtual void set_AlreadyReferenced(bool value);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("15FE7E6B-8CAE-446D-8D54-4F73C08ED8C0")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsAssemblyReferenceProviderContext {
    public Guid ProviderGuid { get; }
    public Array References { get; }
    public Array ReferenceFilterPaths { get; public set; }
    public string AssemblySearchPaths { get; public set; }
    public string TargetFrameworkMoniker { get; public set; }
    [ComAliasNameAttribute("Microsoft.VisualStudio.Shell.Interop.VSASSEMBLYPROVIDERTAB")]
public UInt32 Tabs { get; public set; }
    public bool SupportsRetargeting { get; public set; }
    public bool IsImplicitlyReferenced { get; public set; }
    public string RetargetingMessage { get; public set; }
    public abstract virtual Guid get_ProviderGuid();
    public abstract virtual Array get_References();
    public abstract virtual void AddReference(IVsReference pReference);
    public abstract virtual IVsReference CreateReference();
    public abstract virtual Array get_ReferenceFilterPaths();
    public abstract virtual void set_ReferenceFilterPaths(Array value);
    public abstract virtual string get_AssemblySearchPaths();
    public abstract virtual void set_AssemblySearchPaths(string value);
    public abstract virtual string get_TargetFrameworkMoniker();
    public abstract virtual void set_TargetFrameworkMoniker(string value);
    public abstract virtual UInt32 get_Tabs();
    public abstract virtual void set_Tabs(UInt32 value);
    public abstract virtual bool get_SupportsRetargeting();
    public abstract virtual void set_SupportsRetargeting(bool value);
    public abstract virtual string GetTabTitle(UInt32 etabId);
    public abstract virtual void SetTabTitle(UInt32 etabId, string szTabTitle);
    public abstract virtual bool get_IsImplicitlyReferenced();
    public abstract virtual void set_IsImplicitlyReferenced(bool value);
    public abstract virtual string get_RetargetingMessage();
    public abstract virtual void set_RetargetingMessage(string value);
    public abstract virtual string GetNoItemsMessageForTab(UInt32 etabId);
    public abstract virtual void SetNoItemsMessageForTab(UInt32 etabId, string bstrNoItemsMessage);
}
[NullableContextAttribute("2")]
[GuidAttribute("1553ee45-0c52-4aa4-ab21-f1769749bc7a")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsAsyncCommandParameters {
    public bool ShouldRunAsync { get; }
    public object OriginalArgument { get; }
    public abstract virtual bool get_ShouldRunAsync();
    public abstract virtual object get_OriginalArgument();
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("A50992ED-89E5-480E-880A-ADBB87995B09")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsAsyncDataSourceFactory {
    public abstract virtual IVsTask GetDataSourceAsync(Guid& guid, UInt32 dw);
}
[NullableContextAttribute("1")]
[GuidAttribute("F3965302-6220-4119-A294-5F0A87E5A4CE")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsAsyncDeferredDocView {
    public abstract virtual IVsTask LoadDocViewAsync(object docData);
}
[NullableContextAttribute("1")]
[GuidAttribute("F5339B02-5620-4819-9B94-7225835024F9")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsAsyncDeferredDocView2 {
    public abstract virtual IVsTask LoadDocViewAsync(object docData, Guid commandUIContext);
}
[NullableContextAttribute("1")]
[GuidAttribute("054D0302-F120-4719-8494-5BE1A2E04D6A")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsAsyncDocViewResult {
    public object LoadedDocView { get; }
    public Guid CmdUIGuid { get; }
    public abstract virtual object get_LoadedDocView();
    public abstract virtual Guid get_CmdUIGuid();
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("C734671A-9BB0-45C5-A08E-B9AB73CF5F47")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsAsyncEnum {
    public abstract virtual int AdviseAsyncEnumCallback(IVsAsyncEnumCallback pIVsAsyncEnumCallback, UInt32& pdwCookie);
    public abstract virtual int UnadviseAsyncEnumCallback(UInt32 dwCookie);
    public abstract virtual int Stop(int fSync);
}
[GuidAttribute("EE559C3D-0189-4F81-B088-C6CC6A394CA1")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsAsyncEnumCallback {
    public abstract virtual int OnDataAvailable(UInt32 cElementsAvailable, int fIsComplete, UInt32 ulProgressCurrent, UInt32 ulProgressMax);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("99871A31-DB02-4DA9-98FB-89D8EDC700CE")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsAsynchOpenFromScc {
    public abstract virtual int LoadProjectAsynchronously(string lpszProjectPath, Int32& pReturnValue);
    public abstract virtual int LoadProject(string lpszProjectPath);
    public abstract virtual int IsLoadingContent(IVsHierarchy pHierarchy, Int32& pfIsLoading);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("C31C30EF-3B22-4F02-93BB-BCDA5FA192AA")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsAsynchOpenFromSccProjectEvents {
    public abstract virtual int OnFilesDownloaded(int cFiles, String[] rgpszFullPaths);
    public abstract virtual int OnLoadComplete();
    public abstract virtual int OnLoadFailed();
}
[NullableContextAttribute("1")]
[GuidAttribute("BA346102-CA20-4F19-9D94-A5DAB112A262")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsAsyncOpenDocumentResult {
    [NullableAttribute("2")]
public IVsUIHierarchy Hierarchy { get; }
    [ComAliasNameAttribute("VSITEMID")]
public UInt32 ItemId { get; }
    public IVsWindowFrame WindowFrame { get; }
    public IVsTask DocumentLoadTask { get; }
    [NullableContextAttribute("2")]
public abstract virtual IVsUIHierarchy get_Hierarchy();
    public abstract virtual UInt32 get_ItemId();
    public abstract virtual IVsWindowFrame get_WindowFrame();
    public abstract virtual IVsTask get_DocumentLoadTask();
}
[NullableContextAttribute("1")]
[GuidAttribute("de485455-84fe-4e41-a911-8bbdc87ac27f")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsAsyncPersistDocData {
    public abstract virtual IVsTask LoadDocDataAsync(string moniker, IVsProgress progress);
    public abstract virtual IVsTask SaveDocDataAsync(UInt32 flags, IVsProgress progress);
    public abstract virtual IVsTask ReloadDocDataAsync(UInt32 flags, IVsProgress progress);
}
[NullableContextAttribute("1")]
[GuidAttribute("9aa40a83-9ace-4bdf-9f31-956295d9b87d")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsAsyncPersistHierarchyItem {
    public abstract virtual IVsTask SaveItemAsync(VSSAVEFLAGS flags, string silentSaveAsName, UInt32 itemid, object docData, IVsProgress progress);
    public abstract virtual IVsTask ReloadItemAsync(UInt32 itemid, IVsProgress progress);
}
[NullableContextAttribute("1")]
[GuidAttribute("b960175b-ab78-494f-9034-47a650c27acc")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsAsyncRunningDocumentTable {
    [NullableContextAttribute("2")]
public abstract virtual IVsTask SaveDocumentsAsync(UInt32 saveOpts, IVsHierarchy hierarchy, UInt32 itemid, UInt32 docCookie, IVsProgress progress);
    public abstract virtual object GetAsyncSaveState(IVsProvideAsyncSaveState provider);
}
[NullableContextAttribute("1")]
[GuidAttribute("5115a04f-6c9f-4732-a9ae-02976e85f414")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsAsyncRunningDocumentTable2 {
    [NullableContextAttribute("2")]
public abstract virtual IVsTask SaveDocumentsAsync(UInt32 saveOpts, IVsHierarchy hierarchy, UInt32 itemid, UInt32 docCookie, IVsProgress progress);
    public abstract virtual object GetAsyncSaveState(IVsProvideAsyncSaveState provider);
    public abstract virtual void UpdateAsyncSaveState(IVsProvideAsyncSaveState provider, object saveState);
    public abstract virtual IVsTask UnlockDocumentAsync(UInt32 lockType, UInt32 docCookie);
}
[NullableContextAttribute("1")]
[GuidAttribute("fb318d71-ecfc-4352-b19d-2c77acb77d76")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsAsyncRunningDocumentTable3 {
    public bool IsAsyncSaveEnabled { get; }
    [NullableContextAttribute("2")]
public abstract virtual IVsTask SaveDocumentsAsync(UInt32 saveOpts, IVsHierarchy hierarchy, UInt32 itemid, UInt32 docCookie, IVsProgress progress);
    public abstract virtual object GetAsyncSaveState(IVsProvideAsyncSaveState provider);
    public abstract virtual void UpdateAsyncSaveState(IVsProvideAsyncSaveState provider, object saveState);
    public abstract virtual IVsTask UnlockDocumentAsync(UInt32 lockType, UInt32 docCookie);
    public abstract virtual bool get_IsAsyncSaveEnabled();
}
[NullableContextAttribute("1")]
[GuidAttribute("2B731902-8E20-4219-8294-9539FFDF2A80")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsAsyncRunningDocumentTable4 {
    public abstract virtual IVsTask GetDocumentDataAsync(UInt32 documentCookie);
}
[NullableContextAttribute("2")]
[GuidAttribute("72903eda-bbb2-453d-88df-239a8c018122")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsAsyncSaveResult {
    public bool DataLossIncurred { get; }
    public bool SaveCanceled { get; }
    public string FileName { get; }
    public abstract virtual bool get_DataLossIncurred();
    public abstract virtual bool get_SaveCanceled();
    public abstract virtual string get_FileName();
}
[NullableContextAttribute("1")]
[GuidAttribute("6fbd992c-3f7c-49ed-a057-588c3415d7d5")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsAsyncShell {
    public abstract virtual IVsTask SaveDocDataToFileAsync(VSSAVEFLAGS flags, object persistFile, string untitledPath, IVsProgress progress);
}
[NullableContextAttribute("1")]
[GuidAttribute("6A55D18F-6DB5-4993-B503-11EB77949CAB")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsAsyncShellOpenDocument {
    [NullableContextAttribute("2")]
public abstract virtual IVsTask OpenSpecificEditorAsync(UInt32 openSpecificEditorFlags, string documentMoniker, Guid editorType, string physicalView, Guid logicalView, string ownerCaption, IVsUIHierarchy hierarchy, UInt32 itemId, bool shouldGetDocDataFromRdt, object docData, IServiceProvider serviceProvider);
    public abstract virtual IVsTask OpenStandardEditorAsync(UInt32 openStandardEditorFlags, string documentMoniker, Guid logicalView, string ownerCaption, IVsUIHierarchy hierarchy, UInt32 itemId, bool shouldGetDocDataFromRdt, object docData, IServiceProvider serviceProvider);
    public abstract virtual IVsTask OpenDocumentViaProjectAsync(string documentMoniker, Guid logicalView, bool supportExternalItems);
    public abstract virtual IVsTask OpenDocumentViaProjectWithSpecificAsync(string documentMoniker, UInt32 specificEditorFlags, Guid editorType, string physicalView, Guid logicalView);
    public abstract virtual IVsTask OpenCopyOfStandardEditorAsync(IVsWindowFrame originalWindowFrame, Guid logicalView);
    public abstract virtual IVsTask GetProvisionalViewingStatusForFileAsync(string fileName, IVsHierarchy hierarchy, UInt32 itemId, Guid logicalView);
    public abstract virtual IVsTask GetProvisionalViewingStatusForEditorAsync(Guid editorType, Guid logicalView);
}
[NullableContextAttribute("2")]
[GuidAttribute("cdb2cb6b-e8d9-46d8-9a43-57fb82143278")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsAsyncSolution {
    public abstract virtual IVsTask SaveSolutionElementAsync(UInt32 saveOpts, IVsHierarchy hierarchy, UInt32 docCookie, IVsProgress progress);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("E6D4CEFD-0B9E-4971-BC98-ED9FBC797D94")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsAsyncToolWindowFactory {
    public abstract virtual IVsTask InitializeToolWindowAsync(Guid guidPersistenceSlot, UInt32 dwToolWindowId);
    public abstract virtual void CreateToolWindow(Guid guidPersistenceSlot, UInt32 dwToolWindowId, object context);
    public abstract virtual string GetToolWindowTitle(Guid guidPersistenceSlot, UInt32 dwToolWindowId);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("BA087B5E-4614-4928-BCEC-85BF35EB031B")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsAsyncToolWindowFactoryProvider {
    public abstract virtual IVsAsyncToolWindowFactory GetAsyncToolWindowFactory(Guid guidPersistenceSlot);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("15E1B521-EFA1-40B6-8CC1-BDBA417FD5A1")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsAsyncUIFactory {
    public abstract virtual IVsTask CreateUIElementAsync(Guid& guid, UInt32 dw);
}
[NullableContextAttribute("1")]
[GuidAttribute("d6225e73-4825-4ac6-99f3-4af29d61305f")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsAsyncUnifiedSettingsObserverFactory {
    public abstract virtual IVsTask CreateSettingsObserverAsync(Guid guid);
}
[GuidAttribute("B7EE8DBA-E930-4C5D-984D-B07F8EB60977")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsBackForwardNavigation {
    public abstract virtual int NavigateTo(IVsWindowFrame pFrame, string bstrData, object punk);
    public abstract virtual int IsEqual(IVsWindowFrame pFrame, string bstrData, object punk, Int32& fReplaceSelf);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("6366F292-8597-4E66-B332-C9D00D4367B8")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsBackForwardNavigation2 {
    public abstract virtual bool RequestAddNavigationItem(IVsWindowFrame frame);
}
[GuidAttribute("49ED97F3-EAE0-47AC-9A2E-DC15D0459F7B")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsBatchProjectActionContext {
    public abstract virtual UInt32 GetAction();
    public abstract virtual UInt32 GetProjectsCount();
    public abstract virtual void GetProjectsInfo(UInt32 dwProjects, Guid[] rgProjectsGuid, UInt32[] rgExpectedResult);
    public abstract virtual void GetCurrentResult(Guid& guidProject, UInt32& pResult);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("A2D3286E-B5AE-4981-8D32-E9053FCF997D")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsBatchUpdate {
    public abstract virtual int FlushPendingUpdates(UInt32 dwReserved);
}
[GuidAttribute("59252755-82AC-4A88-A489-453FEEBC694D")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsBooleanSymbolExpressionEvaluator {
    public abstract virtual bool EvaluateExpression(string wszExpression, string wszSymbols);
}
[GuidAttribute("D02A169E-F096-48B0-9A1C-B6AC30FAE9AD")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsBooleanSymbolExpressionEvaluator2 {
    public abstract virtual bool EvaluateExpression(string wszExpression, IVsBooleanSymbolPresenceChecker pSymbolChecker);
}
[GuidAttribute("A37429BD-C5FE-4263-A8AD-D06D060B4632")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsBooleanSymbolPresenceBulkChecker {
    public abstract virtual bool HasChangedSince(Object& versionObject);
    public abstract virtual bool IsSymbolPresent(string symbol);
    public abstract virtual Array AreSymbolsPresent(Array symbols);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("416C706C-933E-4ACB-8D30-F02C28DD4874")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsBooleanSymbolPresenceChecker {
    public abstract virtual bool HasChangedSince(Object& versionObject);
    public abstract virtual bool IsSymbolPresent(string symbol);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("FC5EF273-DCE3-4DBB-AEE3-F54F91F00286")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsBroadcastMessageEvents {
    public abstract virtual int OnBroadcastMessage(UInt32 msg, IntPtr wParam, IntPtr lParam);
}
[GuidAttribute("804DCBDE-3A63-4C3C-9316-296C4C7E9140")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsBrowseComponentSet {
    public abstract virtual int put_ComponentsListOptions(UInt32 dwOptions);
    public abstract virtual int get_ComponentsListOptions(UInt32& pdwOptions);
    public abstract virtual int put_ChildListOptions(UInt32 dwOptions);
    public abstract virtual int get_ChildListOptions(UInt32& pdwOptions);
    public abstract virtual int GetList2(UInt32 ListType, UInt32 flags, VSOBSEARCHCRITERIA2[] pobSrch, IVsObjectList2 pExtraListToCombineWith, IVsObjectList2& ppIVsObjectList2);
    public abstract virtual int GetSupportedCategoryFields2(int Category, UInt32& pgrfCatField);
    public abstract virtual int CreateNavInfo(Guid& guidLib, SYMBOL_DESCRIPTION_NODE[] rgSymbolNodes, UInt32 ulcNodes, IVsNavInfo& ppNavInfo);
    public abstract virtual int UpdateCounter(UInt32& pCurUpdate);
}
[GuidAttribute("288F2A0C-B2E5-4799-9B9C-24E6EFCEFBF4")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsBrowseContainersList {
    public abstract virtual int GetContainerData(UInt32 ulIndex, VSCOMPONENTSELECTORDATA[] pData);
    public abstract virtual int FindContainer(VSCOMPONENTSELECTORDATA[] pData, UInt32& pulIndex);
}
[GuidAttribute("BC5B644E-7FD7-4A75-98CC-0C2C98AA96F6")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsBrowseObject {
    public abstract virtual int GetProjectItem(IVsHierarchy& pHier, UInt32& pItemid);
}
[GuidAttribute("368FC032-AE91-44A2-BE6B-093A8A9E63CC")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsBrowseProjectLocation {
    public abstract virtual int BrowseProjectLocation(string pszStartDirectory, String& pbstrProjectLocation);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("8588E475-BB33-4763-B4BA-0322F839AA3C")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsBuildableProjectCfg {
    public abstract virtual int get_ProjectCfg(IVsProjectCfg& ppIVsProjectCfg);
    public abstract virtual int AdviseBuildStatusCallback(IVsBuildStatusCallback pIVsBuildStatusCallback, UInt32& pdwCookie);
    public abstract virtual int UnadviseBuildStatusCallback(UInt32 dwCookie);
    public abstract virtual int StartBuild(IVsOutputWindowPane pIVsOutputWindowPane, UInt32 dwOptions);
    public abstract virtual int StartClean(IVsOutputWindowPane pIVsOutputWindowPane, UInt32 dwOptions);
    public abstract virtual int StartUpToDateCheck(IVsOutputWindowPane pIVsOutputWindowPane, UInt32 dwOptions);
    public abstract virtual int QueryStatus(Int32& pfBuildDone);
    public abstract virtual int Stop(int fSync);
    public abstract virtual int Wait(UInt32 dwMilliseconds, int fTickWhenMessageQNotEmpty);
    public abstract virtual int QueryStartBuild(UInt32 dwOptions, Int32[] pfSupported, Int32[] pfReady);
    public abstract virtual int QueryStartClean(UInt32 dwOptions, Int32[] pfSupported, Int32[] pfReady);
    public abstract virtual int QueryStartUpToDateCheck(UInt32 dwOptions, Int32[] pfSupported, Int32[] pfReady);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("09857E8E-74CC-43A7-993D-3EC774DCA298")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsBuildableProjectCfg2 {
    public abstract virtual int GetBuildCfgProperty(int propid, Object& pvar);
    public abstract virtual int StartBuildEx(UInt32 dwBuildId, IVsOutputWindowPane pIVsOutputWindowPane, UInt32 dwOptions);
}
[GuidAttribute("28D58EEE-EFFC-4B4D-834C-3A746FEAC7AE")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsBuildDependency {
    public abstract virtual int get_CanonicalName(String& pbstrCanonicalName);
    public abstract virtual int get_Type(Guid& pguidType);
    public abstract virtual int get_Description(String& pbstrDescription);
    public abstract virtual int get_HelpContext(UInt32& pdwHelpContext);
    public abstract virtual int get_HelpFile(String& pbstrHelpFile);
    public abstract virtual int get_MustUpdateBefore(Int32& pfMustUpdateBefore);
    public abstract virtual int get_ReferredProject(Object& ppIUnknownProject);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("A11DEF4B-AB42-407B-985F-C44A77D43387")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsBuildItemStorage {
    public abstract virtual void FindItems(string itemType, int metadataNameCount, String[] metadataNames, IVsBuildItemStorageCallback storageCallback);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("3BE310DD-16DA-461D-986C-BD0F84150E47")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsBuildItemStorageCallback {
    public abstract virtual void ItemFound(string itemSpec, Array metadata);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("9015B3AB-9FE2-430D-B79F-E0E581BD5B8B")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsBuildMacroInfo {
    public abstract virtual int GetBuildMacroValue(string bstrBuildMacroName, String& pbstrBuildMacroValue);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("C580A81B-9FFC-41EB-B8D7-5DCAD29601B7")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsBuildManagerAccessor {
    public abstract virtual int RegisterLogger(int submissionId, object punkLogger);
    public abstract virtual int UnregisterLoggers(int submissionId);
    public abstract virtual int ClaimUIThreadForBuild();
    public abstract virtual int ReleaseUIThreadForBuild();
    public abstract virtual int BeginDesignTimeBuild();
    public abstract virtual int EndDesignTimeBuild();
    public abstract virtual int GetCurrentBatchBuildId(UInt32& pBatchId);
    public abstract virtual int GetSolutionConfiguration(object punkRootProject, String& pbstrXmlFragment);
    public abstract virtual int Escape(string pwszUnescapedValue, String& pbstrEscapedValue);
    public abstract virtual int Unescape(string pwszEscapedValue, String& pbstrUnescapedValue);
}
[GuidAttribute("BC89279F-B8AE-45DC-A171-52B8B8BA7945")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsBuildManagerAccessor2 {
    public IntPtr DesignTimeBuildAvailable { get; }
    public IntPtr UIThreadIsAvailableForBuild { get; }
    public abstract virtual int RegisterLogger(int submissionId, object punkLogger);
    public abstract virtual int UnregisterLoggers(int submissionId);
    public abstract virtual int ClaimUIThreadForBuild();
    public abstract virtual int ReleaseUIThreadForBuild();
    public abstract virtual int BeginDesignTimeBuild();
    public abstract virtual int EndDesignTimeBuild();
    public abstract virtual int GetCurrentBatchBuildId(UInt32& pBatchId);
    public abstract virtual int GetSolutionConfiguration(object punkRootProject, String& pbstrXmlFragment);
    public abstract virtual int Escape(string pwszUnescapedValue, String& pbstrEscapedValue);
    public abstract virtual int Unescape(string pwszEscapedValue, String& pbstrUnescapedValue);
    public abstract virtual IntPtr get_DesignTimeBuildAvailable();
    public abstract virtual IntPtr get_UIThreadIsAvailableForBuild();
    public abstract virtual int AcquireBuildResources(VSBUILDMANAGERRESOURCE fResources, UInt32& phCookie);
    public abstract virtual int ReleaseBuildResources(UInt32 hCookie);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("B7E1D5A7-7FD2-454F-96B9-AB77D975C706")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsBuildManagerAccessor3 {
    public IntPtr DesignTimeBuildAvailable { get; }
    public IntPtr UIThreadIsAvailableForBuild { get; }
    public IntPtr SolutionBuildAvailable { get; }
    public abstract virtual int RegisterLogger(int submissionId, object punkLogger);
    public abstract virtual int UnregisterLoggers(int submissionId);
    public abstract virtual int ClaimUIThreadForBuild();
    public abstract virtual int ReleaseUIThreadForBuild();
    public abstract virtual int BeginDesignTimeBuild();
    public abstract virtual int EndDesignTimeBuild();
    public abstract virtual int GetCurrentBatchBuildId(UInt32& pBatchId);
    public abstract virtual int GetSolutionConfiguration(object punkRootProject, String& pbstrXmlFragment);
    public abstract virtual int Escape(string pwszUnescapedValue, String& pbstrEscapedValue);
    public abstract virtual int Unescape(string pwszEscapedValue, String& pbstrUnescapedValue);
    public abstract virtual IntPtr get_DesignTimeBuildAvailable();
    public abstract virtual IntPtr get_UIThreadIsAvailableForBuild();
    public abstract virtual int AcquireBuildResources(VSBUILDMANAGERRESOURCE fResources, UInt32& phCookie);
    public abstract virtual int ReleaseBuildResources(UInt32 hCookie);
    public abstract virtual IntPtr get_SolutionBuildAvailable();
}
[GuidAttribute("22580B39-7B9C-4E2D-87FA-9EB8F12AA9AF")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsBuildManagerAccessor4 {
    public IntPtr DesignTimeBuildAvailable { get; }
    public IntPtr UIThreadIsAvailableForBuild { get; }
    public IntPtr SolutionBuildAvailable { get; }
    public abstract virtual int RegisterLogger(int submissionId, object punkLogger);
    public abstract virtual int UnregisterLoggers(int submissionId);
    public abstract virtual int ClaimUIThreadForBuild();
    public abstract virtual int ReleaseUIThreadForBuild();
    public abstract virtual int BeginDesignTimeBuild();
    public abstract virtual int EndDesignTimeBuild();
    public abstract virtual int GetCurrentBatchBuildId(UInt32& pBatchId);
    public abstract virtual int GetSolutionConfiguration(object punkRootProject, String& pbstrXmlFragment);
    public abstract virtual int Escape(string pwszUnescapedValue, String& pbstrEscapedValue);
    public abstract virtual int Unescape(string pwszEscapedValue, String& pbstrUnescapedValue);
    public abstract virtual IntPtr get_DesignTimeBuildAvailable();
    public abstract virtual IntPtr get_UIThreadIsAvailableForBuild();
    public abstract virtual int AcquireBuildResources(VSBUILDMANAGERRESOURCE fResources, UInt32& phCookie);
    public abstract virtual int ReleaseBuildResources(UInt32 hCookie);
    public abstract virtual IntPtr get_SolutionBuildAvailable();
    public abstract virtual int RegisterExternalLoggers(int submissionId, string projectPath, string targets, int isDesignTimeBuild);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("E7355FDF-A118-48F5-9655-7EFD9D2DC352")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsBuildPropertyStorage {
    public abstract virtual int GetPropertyValue(string pszPropName, string pszConfigName, UInt32 storage, String& pbstrPropValue);
    public abstract virtual int SetPropertyValue(string pszPropName, string pszConfigName, UInt32 storage, string pszPropValue);
    public abstract virtual int RemoveProperty(string pszPropName, string pszConfigName, UInt32 storage);
    public abstract virtual int GetItemAttribute(UInt32 item, string pszAttributeName, String& pbstrAttributeValue);
    public abstract virtual int SetItemAttribute(UInt32 item, string pszAttributeName, string pszAttributeValue);
}
[GuidAttribute("3B175AC0-F7E2-4187-80A0-A73C39313C49")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsBuildPropertyStorage2 {
    public abstract virtual int SetPropertyValueEx(string pszPropName, string pszPropertyGroupCondition, UInt32 storage, string pszPropValue);
}
[GuidAttribute("9669894B-8698-4E4A-BF06-AECA45559C36")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsBuildPropertyStorage3 {
    public abstract virtual int AdviseEvents(IVsBuildPropertyStorageEvents pSink, UInt32& pdwCookie);
    public abstract virtual int UnadviseEvents(UInt32 dwCookie);
}
[GuidAttribute("2C6C93FD-C88F-45AC-AC2B-39E91176F894")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsBuildPropertyStorageEvents {
    public abstract virtual int OnAfterItemsChanged(int cItems, String[] rgpszItemFullPaths);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("A17326AD-C97B-4278-86E2-72163C4C6A8C")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsBuildStatusCallback {
    public abstract virtual int BuildBegin(Int32& pfContinue);
    public abstract virtual int BuildEnd(int fSuccess);
    public abstract virtual int Tick(Int32& pfContinue);
}
[GuidAttribute("2D124B9B-8989-4F82-8E9D-AE0B002E0615")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsBulkFileOperation {
    public abstract virtual void StartOperation();
    public abstract virtual void EndOperation();
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("6ED4E844-A0AF-4D6F-B108-8E655785BC88")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsCallBrowser {
    public abstract virtual int SetRootAtSymbol(int cbMode, Guid& guidLib, SYMBOL_DESCRIPTION_NODE[] rgSymbolNodes, UInt32 ulcNodes);
    public abstract virtual int SetRootAtNavInfo(int cbMode, IVsNavInfo pNavInfo);
    public abstract virtual int CanCreateNewInstance(Int32& pfOK);
}
[GuidAttribute("B8F932A5-5037-48C9-AB3A-A4ABBA79358B")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsCfg {
    public abstract virtual int get_DisplayName(String& pbstrDisplayName);
    public abstract virtual int get_IsDebugOnly(Int32& pfIsDebugOnly);
    public abstract virtual int get_IsReleaseOnly(Int32& pfIsReleaseOnly);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("A630CFF5-EB22-40B7-9464-5F8D4B98B1CB")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsCfgBrowseObject {
    public abstract virtual int GetProjectItem(IVsHierarchy& pHier, UInt32& pItemid);
    public abstract virtual int GetCfg(IVsCfg& ppCfg);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("EEABD2BE-4F4F-4CCB-86AD-9F469C5C9686")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsCfgProvider {
    public abstract virtual int GetCfgs(UInt32 celt, IVsCfg[] rgpcfg, UInt32[] pcActual, UInt32[] prgfFlags);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("623E34D5-82C1-42ED-A82C-6CA0478FFDDA")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsCfgProvider2 {
    public abstract virtual int GetCfgs(UInt32 celt, IVsCfg[] rgpcfg, UInt32[] pcActual, UInt32[] prgfFlags);
    public abstract virtual int GetCfgNames(UInt32 celt, String[] rgbstr, UInt32[] pcActual);
    public abstract virtual int GetPlatformNames(UInt32 celt, String[] rgbstr, UInt32[] pcActual);
    public abstract virtual int GetCfgOfName(string pszCfgName, string pszPlatformName, IVsCfg& ppCfg);
    public abstract virtual int AddCfgsOfCfgName(string pszCfgName, string pszCloneCfgName, int fPrivate);
    public abstract virtual int DeleteCfgsOfCfgName(string pszCfgName);
    public abstract virtual int RenameCfgsOfCfgName(string pszOldName, string pszNewName);
    public abstract virtual int AddCfgsOfPlatformName(string pszPlatformName, string pszClonePlatformName);
    public abstract virtual int DeleteCfgsOfPlatformName(string pszPlatformName);
    public abstract virtual int GetSupportedPlatformNames(UInt32 celt, String[] rgbstr, UInt32[] pcActual);
    public abstract virtual int GetCfgProviderProperty(int propid, Object& pvar);
    public abstract virtual int AdviseCfgProviderEvents(IVsCfgProviderEvents pCPE, UInt32& pdwCookie);
    public abstract virtual int UnadviseCfgProviderEvents(UInt32 dwCookie);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("E6D78900-BB40-4039-9C54-593A242B65DA")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsCfgProviderEvents {
    public abstract virtual int OnCfgNameAdded(string pszCfgName);
    public abstract virtual int OnCfgNameDeleted(string pszCfgName);
    public abstract virtual int OnCfgNameRenamed(string pszOldName, string lszNewName);
    public abstract virtual int OnPlatformNameAdded(string pszPlatformName);
    public abstract virtual int OnPlatformNameDeleted(string pszPlatformName);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("0D6D480C-894F-48E4-98D2-E0A7127750E4")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsCfgProviderEventsHelper {
    public abstract virtual int AdviseCfgProviderEvents(IVsCfgProviderEvents pCPE, UInt32& pdwCookie);
    public abstract virtual int UnadviseCfgProviderEvents(UInt32 dwCookie);
    public abstract virtual int NotifyOnCfgNameAdded(string pszCfgName);
    public abstract virtual int NotifyOnCfgNameDeleted(string pszCfgName);
    public abstract virtual int NotifyOnCfgNameRenamed(string pszOldName, string lszNewName);
    public abstract virtual int NotifyOnPlatformNameAdded(string pszPlatformName);
    public abstract virtual int NotifyOnPlatformNameDeleted(string pszPlatformName);
}
[GuidAttribute("D7ECCE71-9C14-49A9-A93D-A5ED6286AC46")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsClassView {
    public abstract virtual int NavigateTo(VSOBJECTINFO[] pObjInfo, UInt32 dwReserved);
}
[GuidAttribute("6D10BA00-9465-4F93-8B1D-11E36EE1FF65")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsCmdNameMapping {
    public abstract virtual int MapGUIDIDToName(Guid& pguidCmdGroup, UInt32 dwCmdID, VSCMDNAMEOPTS grfOptions, String& pbstrCmdName);
    public abstract virtual int MapNameToGUIDID(string pszCmdName, Guid& pguidCmdGroup, UInt32& pdwCmdID);
    public abstract virtual int EnumNames(VSCMDNAMEOPTS grfOptions, IEnumString& ppEnumString);
    public abstract virtual int GetLastUpdated(UInt32& pdwTickCount);
    public abstract virtual int EnumMacroNames(VSCMDNAMEOPTS grfOptions, IEnumString& ppEnumString);
}
[GuidAttribute("588470CC-84F8-4A57-9AC4-86BCA0625FF4")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsCodeDefView {
    public abstract virtual int ShowWindow();
    public abstract virtual int HideWindow();
    public abstract virtual int IsVisible();
    public abstract virtual int SetContext(IVsCodeDefViewContext pIVsCodeDefViewContext);
    public abstract virtual int GetRefreshDelay(UInt32& pcMilliseconds);
    public abstract virtual int ForceIdleProcessing();
    public abstract virtual int IsCodeDefView(IVsTextView pIVsTextView, Int32& pfIsCodeDefView);
}
[GuidAttribute("E7070F9A-502F-4454-B4A2-FE261C568C37")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsCodeDefViewContext {
    public abstract virtual int GetCount(UInt32& pcItems);
    public abstract virtual int GetSymbolName(UInt32 iItem, String& pbstrSymbolName);
    public abstract virtual int GetFileName(UInt32 iItem, String& pbstrFilename);
    public abstract virtual int GetLine(UInt32 iItem, UInt32& piLine);
    public abstract virtual int GetCol(UInt32 iItem, UInt32& piCol);
}
[ComConversionLossAttribute]
[GuidAttribute("F4936BE4-7AE0-4C97-9D82-51D219FC5D77")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsCodeShareHandler {
    public abstract virtual int DlgInit(IntPtr hwnd);
    public abstract virtual int VBDialogBoxParam(IntPtr hinst, UInt32 dwId, IntPtr& pFARPROC, IntPtr lp);
    public abstract virtual int VBDialogCover(IntPtr& pFARPROC, UInt32& lpvoid, IntPtr& lphwndParent);
    public abstract virtual int VsGetOpenFileName(UInt32& pOPENFILENAMEA, int dwHelpTopic);
    public abstract virtual int GetStdHelp(UInt32 wCmd, int lContext);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("64CBD015-9D4B-4DAF-8801-68EDA90B98C5")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsCombinedBrowseComponentSet {
    public abstract virtual int put_ComponentsListOptions(UInt32 dwOptions);
    public abstract virtual int get_ComponentsListOptions(UInt32& pdwOptions);
    public abstract virtual int put_ChildListOptions(UInt32 dwOptions);
    public abstract virtual int get_ChildListOptions(UInt32& pdwOptions);
    public abstract virtual int GetList2(UInt32 ListType, UInt32 flags, VSOBSEARCHCRITERIA2[] pobSrch, IVsObjectList2 pExtraListToCombineWith, IVsObjectList2& ppIVsObjectList2);
    public abstract virtual int GetSupportedCategoryFields2(int Category, UInt32& pgrfCatField);
    public abstract virtual int CreateNavInfo(Guid& guidLib, SYMBOL_DESCRIPTION_NODE[] rgSymbolNodes, UInt32 ulcNodes, IVsNavInfo& ppNavInfo);
    public abstract virtual int UpdateCounter(UInt32& pCurUpdate);
    public abstract virtual int AddSet(IVsSimpleBrowseComponentSet pSet);
    public abstract virtual int GetSetCount(UInt32& pulCount);
    public abstract virtual int GetSetAt(UInt32 ulIndex, IVsSimpleBrowseComponentSet& ppSet);
    public abstract virtual int RemoveSetAt(UInt32 ulIndex);
    public abstract virtual int RemoveAllSets();
    public abstract virtual int RemoveOwnerSets(object pOwner);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("AAD53083-6316-4A65-82C3-85732AC52E52")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsCommandArgInfo {
    public abstract virtual int QueryCommandArgAvailable(Int32& pfCmdArgAvailable);
    public abstract virtual int GetCommandArg(String& pbstrCmdArg);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("0660CD86-F3AB-4008-930D-BAE8B10FF8CA")]
[ComConversionLossAttribute]
public interface Microsoft.VisualStudio.Shell.Interop.IVsCommandWindow {
    public abstract virtual int ExecuteCommand(string szCommand);
    public abstract virtual int PrepareCommand(string szCommand, Guid& pguidCmdGroup, UInt32& pdwCmdID, IntPtr& ppvaCmdArg, PREPARECOMMANDRESULT[] pResult);
    public abstract virtual int Create();
    public abstract virtual int Show();
    public abstract virtual int Print(string szTextToPrint);
    public abstract virtual int EchoCommand(string szCommand);
    public abstract virtual int SetMode(COMMANDWINDOWMODE mode);
    public abstract virtual int LogToFile(string szLogFile, UInt32 grfFlags);
    public abstract virtual int StopLogging();
    public abstract virtual int SetCurrentLanguageService(Guid& rguidLanguageService);
    public abstract virtual int RunningCommandWindowCommand(Int32& pfCmdWin);
    public abstract virtual int PrintNoShow(string szTextToPrint);
}
[GuidAttribute("E22363B8-E7D3-49B5-B094-7395BB35CE13")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsCommandWindow2 {
    public abstract virtual int SetMode(UInt32 mode);
}
[GuidAttribute("615FF029-FEFA-492C-8CD2-C3F66644C3F9")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsCommandWindowsCollection {
    public abstract virtual int Create(UInt32 mode, UInt32 dwToolWindowId, int fShow, UInt32& puCookie);
    public abstract virtual int OpenExistingOrCreateNewCommandWindow(UInt32 mode, int fShow, UInt32& puCookie);
    public abstract virtual int GetCommandWindowFromCookie(UInt32 uCookie, Object& ppunkCmdWindow);
    public abstract virtual int GetCommandWindowFromMode(UInt32 mode, Object& ppunkCmdWindow);
    public abstract virtual int SetRunningCommandWindowCommand(UInt32 uCookie, int fCmdWin);
    public abstract virtual int IsOutputWaiting(UInt32 uCookie);
    public abstract virtual int Close(UInt32 uCookie);
    public abstract virtual int CloseAllCommandWindows();
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("D94C96DA-A6C4-4F52-84F6-52ECF05DEA3A")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsCommentTaskInfo {
    public abstract virtual int DefaultToken(IVsCommentTaskToken& ppToken);
    public abstract virtual int EnumTokens(IVsEnumCommentTaskTokens& ppenum);
    public abstract virtual int TokenCount(Int32& pCount);
}
[GuidAttribute("327C43D7-CCB1-41D7-9A7B-CE87751201F7")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsCommentTaskToken {
    public abstract virtual int Text(String& pbstrText);
    public abstract virtual int Priority(VSTASKPRIORITY[] ptpPriority);
}
[GuidAttribute("FB3B20F4-9C8E-454A-984B-B1334F790541")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsCommonMessagePump {
    public abstract virtual int ModalWaitForObjects(IntPtr[] rgHandles, UInt32 cHandles, UInt32& pdwWaitResult);
    public abstract virtual int ModalWaitForObjectsWithClient(IntPtr[] rgHandles, UInt32 cHandles, IVsCommonMessagePumpClientEvents pClient);
    public abstract virtual int SetTimeout(UInt32 dwTimeoutInMilliseconds);
    public abstract virtual int SetAllowCancel(bool fAllowCancel);
    public abstract virtual int SetWaitText(string pszWaitText);
    public abstract virtual int SetWaitTitle(string pszWaitTitle);
    public abstract virtual int SetStatusBarText(string pszStatusBarText);
    public abstract virtual int EnableRealProgress(bool fEnableRealProgress);
    public abstract virtual int SetProgressInfo(int iTotalSteps, int iCurrentStep, string pszProgressText);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("9C6D9104-7DB9-4ABD-841D-F0CFD24DE3D0")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsCommonMessagePumpClientEvents {
    public abstract virtual int OnHandleSignaled(UInt32 nHandle, Boolean& pfContinue);
    public abstract virtual int OnTimeout(Boolean& pfContinue);
    public abstract virtual int OnAfterMessageProcessed(Boolean& pfContinue);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("E8E8300A-C63F-423F-B596-29308CA0AB4C")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsCommonMessagePumpFactory {
    public abstract virtual int CreateInstance(IVsCommonMessagePump& ppIVsCommonMessagePump);
}
[GuidAttribute("332CEDEE-6610-11D3-85FD-00C04F6123B3")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsComponentEnumeratorFactory {
    public abstract virtual int GetComponents(string bstrMachineName, int lEnumType, int bForceRefresh, IEnumComponents& pEnumerator);
}
[GuidAttribute("64F6B8C1-3DEC-4606-8C8C-651A7E26A3DE")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsComponentEnumeratorFactory2 {
    public abstract virtual int GetComponents(string bstrMachineName, int lEnumType, int bForceRefresh, IEnumComponents& pEnumerator);
    public abstract virtual int GetComponentsOfPath(string bstrMachineName, int lEnumType, int bForceRefresh, string bstrPath, IEnumComponents& pEnumerator);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("0C2B582A-DDB2-440C-A777-3D46C3502337")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsComponentEnumeratorFactory3 {
    public abstract virtual int GetComponentsOfPathEx(string bstrMachineName, int lEnumType, int bForceRefresh, UInt32 grfFlags, string bstrPath, IEnumComponents& pEnumerator);
}
[GuidAttribute("8F18FE7E-ACB7-4031-AAE5-039B49DF5191")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsComponentEnumeratorFactory4 {
    public abstract virtual int GetReferencePathsForTargetFramework(string TargetFrameworkMoniker, IEnumComponents& ppEnumerator);
}
[GuidAttribute("C442A6B0-3F06-4003-912D-9B8CB750C5E7")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsComponentModelHost {
    public abstract virtual int GetComponentAssemblies(UInt32 cAssemblies, String[] rgbstrAssemblyPaths, UInt32& pcActualAssemblies);
    public abstract virtual int GetCatalogCacheFolder(String& pbstrFolderPath);
    public abstract virtual int QueryLoadComponentAssemblies(UInt32 cAssemblies, String[] prgAssemblyPaths, Boolean[] rgCanLoad);
}
[GuidAttribute("45BD8E74-6727-11D3-8600-00C04F6123B3")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsComponentSelectorData {
    public abstract virtual int GetData(VSCOMPONENTSELECTORDATA[] pData);
}
[GuidAttribute("66899421-F497-4503-8C9D-ADAE290F2F27")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsComponentSelectorDlg {
    public abstract virtual int ComponentSelectorDlg(UInt32 grfFlags, IVsComponentUser pUser, string lpszDlgTitle, string lpszHelpTopic, Guid& rguidShowOnlyThisTab, Guid& rguidStartOnThisTab, string pszMachineName, UInt32 cTabInitializers, VSCOMPONENTSELECTORTABINIT[] prgcstiTabInitializers, string pszBrowseFilters, String& pbstrBrowseLocation);
}
[GuidAttribute("2D7CDC3D-FA79-4DF3-9CD2-AACF65A2846E")]
[InterfaceTypeAttribute("1")]
[ComConversionLossAttribute]
public interface Microsoft.VisualStudio.Shell.Interop.IVsComponentSelectorDlg2 {
    public abstract virtual int ComponentSelectorDlg2(UInt32 grfFlags, IVsComponentUser pUser, UInt32 cComponents, IntPtr[] rgpcsdComponents, string lpszDlgTitle, string lpszHelpTopic, UInt32& pxDlgSize, UInt32& pyDlgSize, UInt32 cTabInitializers, VSCOMPONENTSELECTORTABINIT[] rgcstiTabInitializers, Guid& pguidStartOnThisTab, string pszBrowseFilters, String& pbstrBrowseLocation);
}
[GuidAttribute("00AE51BD-26D7-4974-801B-B0890E1753F8")]
[InterfaceTypeAttribute("1")]
[ComConversionLossAttribute]
public interface Microsoft.VisualStudio.Shell.Interop.IVsComponentSelectorDlg3 {
    public abstract virtual int ComponentSelectorDlg3(UInt32 grfFlags, IVsComponentUser pUser, string lpszDlgTitle, string lpszHelpTopic, Guid& rguidShowOnlyThisTab, Guid& rguidStartOnThisTab, string pszMachineName, UInt32 cTabInitializers, VSCOMPONENTSELECTORTABINIT[] prgcstiTabInitializers, string pszBrowseFilters, String& pbstrBrowseLocation, UInt32 targetVersion);
    public abstract virtual int ComponentSelectorDlg4(UInt32 grfFlags, IVsComponentUser pUser, UInt32 cComponents, IntPtr[] rgpcsdComponents, string lpszDlgTitle, string lpszHelpTopic, UInt32& pxDlgSize, UInt32& pyDlgSize, UInt32 cTabInitializers, VSCOMPONENTSELECTORTABINIT[] rgcstiTabInitializers, Guid& pguidStartOnThisTab, string pszBrowseFilters, String& pbstrBrowseLocation, UInt32 targetVersion);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("C43F5129-896F-4653-98E8-B0A16BFE0FC1")]
[ComConversionLossAttribute]
public interface Microsoft.VisualStudio.Shell.Interop.IVsComponentSelectorDlg4 {
    public abstract virtual int ComponentSelectorDlg5(UInt32 grfFlags, IVsComponentUser pUser, UInt32 cComponents, IntPtr[] rgpcsdComponents, string lpszDlgTitle, string lpszHelpTopic, UInt32& pxDlgSize, UInt32& pyDlgSize, UInt32 cTabInitializers, VSCOMPONENTSELECTORTABINIT[] rgcstiTabInitializers, Guid& pguidStartOnThisTab, string pszBrowseFilters, String& pbstrBrowseLocation, string TargetFrameworkMoniker);
}
[GuidAttribute("1375E029-1FDD-47FF-A22C-6709242133E2")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsComponentSelectorProvider {
    public abstract virtual int GetComponentSelectorPage(Guid& rguidPage, VSPROPSHEETPAGE[] ppage);
}
[InterfaceTypeAttribute("1")]
[ComConversionLossAttribute]
[GuidAttribute("910035B1-D8BE-403A-975E-E4FB68CE40A1")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsComponentUser {
    public abstract virtual int AddComponent(VSADDCOMPOPERATION dwAddCompOperation, UInt32 cComponents, IntPtr[] rgpcsdComponents, IntPtr hwndPickerDlg, VSADDCOMPRESULT[] pResult);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("3B1D9F20-1152-44D2-851C-12A88DA14337")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsComReference {
    public string Name { get; public set; }
    public string FullPath { get; public set; }
    public bool AlreadyReferenced { get; public set; }
    public string Identity { get; public set; }
    public Guid Guid { get; public set; }
    [ComAliasNameAttribute("OLE.WORD")]
public ushort MajorVersion { get; public set; }
    [ComAliasNameAttribute("OLE.WORD")]
public ushort MinorVersion { get; public set; }
    public abstract virtual string get_Name();
    public abstract virtual void set_Name(string value);
    public abstract virtual string get_FullPath();
    public abstract virtual void set_FullPath(string value);
    public abstract virtual bool get_AlreadyReferenced();
    public abstract virtual void set_AlreadyReferenced(bool value);
    public abstract virtual string get_Identity();
    public abstract virtual void set_Identity(string value);
    public abstract virtual Guid get_Guid();
    public abstract virtual void set_Guid(Guid value);
    public abstract virtual ushort get_MajorVersion();
    public abstract virtual void set_MajorVersion(ushort value);
    public abstract virtual ushort get_MinorVersion();
    public abstract virtual void set_MinorVersion(ushort value);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("8F310644-1D6A-4982-9D3D-C328A1384B43")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsComReferenceProviderContext {
    public Guid ProviderGuid { get; }
    public Array References { get; }
    public Array ReferenceFilterPaths { get; public set; }
    public abstract virtual Guid get_ProviderGuid();
    public abstract virtual Array get_References();
    public abstract virtual void AddReference(IVsReference pReference);
    public abstract virtual IVsReference CreateReference();
    public abstract virtual Array get_ReferenceFilterPaths();
    public abstract virtual void set_ReferenceFilterPaths(Array value);
}
[GuidAttribute("57F5E77F-75C9-42A3-8DAF-579C3556A0DD")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsConfigurationManagerDlg {
    public abstract virtual int ShowConfigurationManagerDlg();
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("6C3E27F9-775A-456B-8D37-2D7057ABB8F1")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsConfigureToolboxItem {
    public abstract virtual int ConfigureToolboxItem(object item);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("13A70605-F511-4350-8DAF-4387F10B97BE")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsConnectedServiceInstanceReference {
    [DispIdAttribute("1610678272")]
public string Name { get; public set; }
    [DispIdAttribute("1610678274")]
public string FullPath { get; public set; }
    [DispIdAttribute("1610678276")]
public bool AlreadyReferenced { get; public set; }
    [DispIdAttribute("1610743808")]
public string ProviderIdentity { get; public set; }
    [DispIdAttribute("1610743810")]
public string InstanceIdentity { get; public set; }
    public abstract virtual string get_Name();
    public abstract virtual void set_Name(string value);
    public abstract virtual string get_FullPath();
    public abstract virtual void set_FullPath(string value);
    public abstract virtual bool get_AlreadyReferenced();
    public abstract virtual void set_AlreadyReferenced(bool value);
    public abstract virtual string get_ProviderIdentity();
    public abstract virtual void set_ProviderIdentity(string value);
    public abstract virtual string get_InstanceIdentity();
    public abstract virtual void set_InstanceIdentity(string value);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("C9127230-28C1-413D-BDC5-39F3A700FCBD")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsConnectedServiceInstanceReferenceProviderContext {
    [DispIdAttribute("1610678272")]
public Guid ProviderGuid { get; }
    [DispIdAttribute("1610678273")]
public Array References { get; }
    [DispIdAttribute("1610678276")]
public Array ReferenceFilterPaths { get; public set; }
    [DispIdAttribute("1610743808")]
public string ProjectCapabilities { get; public set; }
    [DispIdAttribute("1610743810")]
public string TargetPlatformIdentifier { get; public set; }
    [DispIdAttribute("1610743812")]
public string TargetPlatformVersion { get; public set; }
    [DispIdAttribute("1610743814")]
public string TargetFrameworkMoniker { get; public set; }
    [DispIdAttribute("1610743816")]
public string VisualStudioVersion { get; public set; }
    public abstract virtual Guid get_ProviderGuid();
    public abstract virtual Array get_References();
    public abstract virtual void AddReference(IVsReference pReference);
    public abstract virtual IVsReference CreateReference();
    public abstract virtual Array get_ReferenceFilterPaths();
    public abstract virtual void set_ReferenceFilterPaths(Array value);
    public abstract virtual string get_ProjectCapabilities();
    public abstract virtual void set_ProjectCapabilities(string value);
    public abstract virtual string get_TargetPlatformIdentifier();
    public abstract virtual void set_TargetPlatformIdentifier(string value);
    public abstract virtual string get_TargetPlatformVersion();
    public abstract virtual void set_TargetPlatformVersion(string value);
    public abstract virtual string get_TargetFrameworkMoniker();
    public abstract virtual void set_TargetFrameworkMoniker(string value);
    public abstract virtual string get_VisualStudioVersion();
    public abstract virtual void set_VisualStudioVersion(string value);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("6ED0B110-2132-4675-9F87-7715B312CCC2")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsConnectedServiceProperties {
    [DispIdAttribute("1610678272")]
public string ServiceIdentity { get; }
    [DispIdAttribute("1610678273")]
public IVsPersistConnectedServices Collection { get; }
    public abstract virtual string get_ServiceIdentity();
    public abstract virtual IVsPersistConnectedServices get_Collection();
    public abstract virtual string GetProperty(string szPropertyName);
    public abstract virtual void SetProperty(string szPropertyName, string szValue);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("C0C5974A-288D-4719-AB48-9CB812B5E895")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsContextualIntellisenseFilter {
    public abstract virtual int Initialize(IVsHierarchy pHierarchy);
    public abstract virtual int IsTypeVisible(string szTypeName, Int32& pfVisible);
    public abstract virtual int IsMemberVisible(string szMemberSignature, Int32& pfVisible);
    public abstract virtual int Close();
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("F7827DCE-0B39-474D-8D48-FE8100C9044C")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsContextualIntellisenseFilterProvider {
    public abstract virtual int GetFilter(IVsHierarchy pHierarchy, IVsContextualIntellisenseFilter& ppFilter);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("47811DA4-330F-4EB5-9D14-BBC82773DA66")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsCoTaskMemFreeMyStrings {
}
[GuidAttribute("84F41718-D169-4567-A0CD-B3CBCF58FF71")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsCreateAggregateProject {
    public abstract virtual int CreateAggregateProject(string pszProjectTypeGuids, string pszFilename, string pszLocation, string pszName, UInt32 grfCreateFlags, Guid& iidProject, IntPtr& ppvProject);
}
[GuidAttribute("CD138AD4-A0BF-4681-8FA7-B6D57D55C4DB")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsDataEnvironment {
    public abstract virtual int Initialize(IServiceProvider pServiceProvider);
    public abstract virtual int Dispose();
}
[GuidAttribute("DFEC8E49-B682-43E0-841A-C25C5E2EA1E9")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsDataObjectStringMapEvents {
    public abstract virtual int OnStringMapChanged(IDataObject pObject, string szStringMapName);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("662AFCEC-AD0C-4F59-97E2-F61E0C673514")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsDataObjectStringMapManager {
    public abstract virtual int ReadStringMap(IDataObject pObject, string szStringMapName, IVsStringMap& ppStringMap);
    public abstract virtual int WriteStringMap(IDataObject pObject, string szStringMapName, int fOverwriteExisting, IVsStringMap pStringMap);
    public abstract virtual int CreateStringMap(IVsStringMap& ppStringMap);
    public abstract virtual int AdviseChanges(IDataObject pObject, IVsDataObjectStringMapEvents pStringMapEvents, UInt32& pdwCookie);
    public abstract virtual int UnadviseChanges(UInt32 dwCookie);
}
[GuidAttribute("65CA3EC7-633E-4846-9946-17A80FF4C34C")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsDataObjectStringMapManager2 {
    public abstract virtual int ReadStringMap(IDataObject pObject, string szStringMapName, IVsStringMap& ppStringMap);
    public abstract virtual int WriteStringMap(IDataObject pObject, string szStringMapName, int fOverwriteExisting, IVsStringMap pStringMap);
    public abstract virtual int CreateStringMap(IVsStringMap& ppStringMap);
    public abstract virtual int AdviseChanges(IDataObject pObject, IVsDataObjectStringMapEvents pStringMapEvents, UInt32& pdwCookie);
    public abstract virtual int UnadviseChanges(UInt32 dwCookie);
    public abstract virtual void ClearMapCache(string szStringMapName);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("24034437-CB2E-47DD-AE2B-14D56481A2F0")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsDataSourceFactory {
    public abstract virtual int GetDataSource(Guid& guid, UInt32 dw, IVsUIDataSource& ppUIDataSource);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("2BC88742-618D-46B2-B65D-67AC990E3215")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsDebuggableProjectCfg {
    public abstract virtual int get_DisplayName(String& pbstrDisplayName);
    public abstract virtual int get_IsDebugOnly(Int32& pfIsDebugOnly);
    public abstract virtual int get_IsReleaseOnly(Int32& pfIsReleaseOnly);
    public abstract virtual int EnumOutputs(IVsEnumOutputs& ppIVsEnumOutputs);
    public abstract virtual int OpenOutput(string szOutputCanonicalName, IVsOutput& ppIVsOutput);
    public abstract virtual int get_ProjectCfgProvider(IVsProjectCfgProvider& ppIVsProjectCfgProvider);
    public abstract virtual int get_BuildableProjectCfg(IVsBuildableProjectCfg& ppIVsBuildableProjectCfg);
    public abstract virtual int get_CanonicalName(String& pbstrCanonicalName);
    public abstract virtual int get_Platform(Guid& pguidPlatform);
    public abstract virtual int get_IsPackaged(Int32& pfIsPackaged);
    public abstract virtual int get_IsSpecifyingOutputSupported(Int32& pfIsSpecifyingOutputSupported);
    public abstract virtual int get_TargetCodePage(UInt32& puiTargetCodePage);
    public abstract virtual int get_UpdateSequenceNumber(ULARGE_INTEGER[] puliUSN);
    public abstract virtual int get_RootURL(String& pbstrRootURL);
    public abstract virtual int DebugLaunch(UInt32 grfLaunch);
    public abstract virtual int QueryDebugLaunch(UInt32 grfLaunch, Int32& pfCanLaunch);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("2559D053-417E-4276-A905-193191B5816A")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsDebuggableProjectCfg2 {
    public abstract virtual int get_DisplayName(String& pbstrDisplayName);
    public abstract virtual int get_IsDebugOnly(Int32& pfIsDebugOnly);
    public abstract virtual int get_IsReleaseOnly(Int32& pfIsReleaseOnly);
    public abstract virtual int EnumOutputs(IVsEnumOutputs& ppIVsEnumOutputs);
    public abstract virtual int OpenOutput(string szOutputCanonicalName, IVsOutput& ppIVsOutput);
    public abstract virtual int get_ProjectCfgProvider(IVsProjectCfgProvider& ppIVsProjectCfgProvider);
    public abstract virtual int get_BuildableProjectCfg(IVsBuildableProjectCfg& ppIVsBuildableProjectCfg);
    public abstract virtual int get_CanonicalName(String& pbstrCanonicalName);
    public abstract virtual int get_Platform(Guid& pguidPlatform);
    public abstract virtual int get_IsPackaged(Int32& pfIsPackaged);
    public abstract virtual int get_IsSpecifyingOutputSupported(Int32& pfIsSpecifyingOutputSupported);
    public abstract virtual int get_TargetCodePage(UInt32& puiTargetCodePage);
    public abstract virtual int get_UpdateSequenceNumber(ULARGE_INTEGER[] puliUSN);
    public abstract virtual int get_RootURL(String& pbstrRootURL);
    public abstract virtual int DebugLaunch(UInt32 grfLaunch);
    public abstract virtual int QueryDebugLaunch(UInt32 grfLaunch, Int32& pfCanLaunch);
    public abstract virtual int OnBeforeDebugLaunch(UInt32 grfLaunch);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("CA647009-A436-4D08-BA0F-9027A97A818B")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsDebuggableProtocol {
    public abstract virtual int AddDebuggableProtocol(string bstrProtocol);
    public abstract virtual int RemoveDebuggableProtocol(string bstrProtocol);
    public abstract virtual int IsProtocolDebuggable(string bstrProtocol);
}
[InterfaceTypeAttribute("1")]
[ComConversionLossAttribute]
[GuidAttribute("7D960B16-7AF8-11D0-8E5E-00A0C911005A")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsDebugger {
    public abstract virtual int GetMode(DBGMODE[] pdbgmode);
    public abstract virtual int AdviseDebuggerEvents(IVsDebuggerEvents pSink, UInt32& pdwCookie);
    public abstract virtual int UnadviseDebuggerEvents(UInt32 dwCookie);
    public abstract virtual int GetDataTipValue(IVsTextLines pTextBuf, TextSpan[] pTS, string pszExpression, String& pbstrValue);
    public abstract virtual int QueryStatusForTextPos(VsTextPos[] pTextPos, Guid& pguidCmdGroup, UInt32 cCmds, OLECMD[] prgCmds, IntPtr pCmdText);
    public abstract virtual int ExecCmdForTextPos(VsTextPos[] pTextPos, Guid& pguidCmdGroup, UInt32 nCmdID, UInt32 nCmdexecopt, IntPtr pvaIn, IntPtr pvaOut);
    public abstract virtual int AdviseDebugEventCallback(object punkDebuggerEvents);
    public abstract virtual int UnadviseDebugEventCallback(object punkDebuggerEvents);
    public abstract virtual int LaunchDebugTargets(UInt32 cTargets, IntPtr rgDebugTargetInfo);
    public abstract virtual int InsertBreakpointByName(Guid& guidLanguage, string pszCodeLocationText);
    public abstract virtual int RemoveBreakpointsByName(Guid& guidLanguage, string pszCodeLocationText);
    public abstract virtual int ToggleBreakpointByName(Guid& guidLanguage, string pszCodeLocationText);
    public abstract virtual int IsBreakpointOnName(Guid& guidLanguage, string pszCodeLocationText, Int32& pfIsBreakpoint);
    public abstract virtual int ParseFileRedirection(string pszArgs, String& pbstrArgsProcessed, IntPtr& phStdInput, IntPtr& phStdOutput, IntPtr& phStdError);
    public abstract virtual int GetENCUpdate(Object& ppUpdate);
    public abstract virtual int AllowEditsWhileDebugging(Guid& guidLanguageService);
}
[GuidAttribute("91D280B4-49E5-4345-8906-FA888F08E828")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsDebugger10 {
    public abstract virtual void IsIntegratedConsoleEnabled(Boolean& pEnabled);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("B33300FB-FEFE-4E00-A74A-17A5EED1B1ED")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsDebugger2 {
    public abstract virtual int LaunchDebugTargets2(UInt32 DebugTargetCount, IntPtr pDebugTargets);
    public abstract virtual int ConfirmStopDebugging(string pszMessage);
    public abstract virtual int EnumDebugEngines(IVsEnumGUID& ppEnum);
    public abstract virtual int GetEngineName(Guid& guidEngine, String& pbstrName);
    public abstract virtual int IsEngineCompatible(Guid& guidEngine, UInt32 EngineCount, Guid[] pEngineGUIDs);
    public abstract virtual int GetConsoleHandlesForProcess(UInt32 dwPid, UInt64& pdwStdInput, UInt64& pdwStdOutput, UInt64& pdwStdError);
    public abstract virtual int ShowSource(object pUnkDebugDocContext, int fMakeActive, int fAlwaysMoveCaret, int fPromptToFindSource, int fIgnoreIfNotFound, IVsTextView& ppTextView);
    public abstract virtual int CreateDataTip(string bstrExpression, UInt32 dwStyle, IVsEnhancedDataTip& ppDataTip);
    public abstract virtual int GetSymbolPath(String& pbstrSymbolPath, String& pbstrSymbolCachePath);
    public abstract virtual int GetOutputHandleForProcess(UInt32 dwPid, UInt64& pOutputHandle);
    public abstract virtual int InsertBreakpointByName(Guid& guidLanguage, string pszCodeLocationText, int bUseIntellisense);
    public abstract virtual int ToggleUseQuickConsoleOption(int fOnOff);
    public abstract virtual int GetUseQuickConsoleOptionSetting(Int32& pfValue);
    public abstract virtual int GetInternalDebugMode(DBGMODE[] pdbgmode);
}
[GuidAttribute("F6A3B3E7-5A0E-420B-98D0-AE6963CAD9F3")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsDebugger3 {
    public abstract virtual int LaunchDebugTargets3(UInt32 DebugTargetCount, VsDebugTargetInfo3[] pDebugTargets, VsDebugTargetProcessInfo[] pLaunchResults);
    public abstract virtual int IsProcessRecycleRequired(VsDebugTargetProcessInfo[] pProcessInfo);
}
[GuidAttribute("8548668A-F63A-46BB-A3BD-5D053229820A")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsDebugger4 {
    public abstract virtual void LaunchDebugTargets4(UInt32 DebugTargetCount, VsDebugTargetInfo4[] pDebugTargets, VsDebugTargetProcessInfo[] pLaunchResults);
    public abstract virtual void EnumCurrentlyDebuggingProjects(IEnumHierarchies& projects);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("7C6788DF-F3EE-4DA7-AE43-148EA5635538")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsDebugger5 {
    public abstract virtual void BypassDiagnosticsToolsOnNextSession(bool bypass);
    public abstract virtual bool GetDiagnosticsToolsBypassState();
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("EF0E965C-D5AB-4BE5-819B-9CA1AD0C4DE1")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsDebugger6 {
    public abstract virtual void RegisterFocusPreservingWindow(Guid id);
    public abstract virtual void UnregisterFocusPreservingWindow(Guid id);
    public abstract virtual void IsWindowRegisteredAsFocusPreserving(Guid id, Boolean& registered);
    public abstract virtual void RunToText(VsTextPos[] pTextPos);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("FDDC501D-D9F5-46AA-99F3-07173CE7E004")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsDebugger7 {
    public abstract virtual void IsENCEnabled(Boolean& pOptionSet);
    public abstract virtual void IsJavaScriptDebuggingOnLaunchEnabled(Boolean& pOptionSet);
}
[GuidAttribute("71AF033C-1C1B-4FD4-87AB-08B441DBCE1D")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsDebugger8 {
    public abstract virtual void JumpToText(VsTextPos[] text);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("BFDFF000-3761-49B2-BA9B-4C1DB1D82789")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsDebugger9 {
    public abstract virtual void SetEnableJavaScriptDebuggerOnBrowserLaunch(int fEnable);
    public abstract virtual void NotifyBeforeLaunchWithoutJavaScriptDebugger(Int32& pfEnabled);
}
[GuidAttribute("7D960B15-7AF8-11D0-8E5E-00A0C911005A")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsDebuggerEvents {
    public abstract virtual int OnModeChange(DBGMODE dbgmodeNew);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("62166866-2F12-4324-A9A6-48B2081053D1")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsDebuggerLaunchAsync {
    public abstract virtual void LaunchDebugTargetsAsync(UInt32 debugTargetCount, VsDebugTargetInfo4[] debugTargetArray, IVsDebuggerLaunchCompletionCallback completionCallback);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("5FD08946-C8AE-444C-9DB1-2807629AD9F5")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsDebuggerLaunchCompletionCallback {
    public abstract virtual void OnComplete(int hr, UInt32 debugTargetCount, VsDebugTargetProcessInfo[] processInfoArray);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("A5412570-5FB9-11D1-A811-00A0C9110051")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsDebugLaunch {
    public abstract virtual int DebugLaunch(UInt32 grfLaunch);
    public abstract virtual int QueryDebugLaunch(UInt32 grfLaunch, Int32& pfCanLaunch);
}
[GuidAttribute("9040E456-FF48-41FF-AEDD-D5EB36A0DDFB")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsDebugLaunchHook {
    public abstract virtual int SetNextHook(IVsDebugLaunchHook pNextHook);
    public abstract virtual int IsProcessRecycleRequired(VsDebugTargetProcessInfo[] pProcessInfo);
    public abstract virtual int OnLaunchDebugTargets(UInt32 DebugTargetCount, VsDebugTargetInfo3[] pDebugTargets, VsDebugTargetProcessInfo[] pLaunchResults);
}
[GuidAttribute("23320EFC-7C7A-4C3D-AD85-93A4E620FDD0")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsDebugProcessNotify {
    public abstract virtual int BeforeStopDebuggingProcess(UInt32 Reason);
}
[GuidAttribute("81FB5379-B64E-4D8F-8628-E5305306F12A")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsDebugRemoteDiscoveryUI {
    public abstract virtual int SelectRemoteInstanceViaDlg(string currentTransportQualifier, Guid currentPortSupplier, UInt32 flags, String& transportQualifier, Guid& guidPortSupplier);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("310466BA-2B59-4CCE-9592-95E195096939")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsDebugTargetSelectionService {
    public abstract virtual void UpdateDebugTargets();
}
[GuidAttribute("1749A33B-2099-4A22-B32A-E96ADD887142")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsDefaultToolboxTabState {
    public abstract virtual int GetDefaultTabExpansion(string pszTabID, Int32& pfExpanded);
}
[GuidAttribute("F22A0AD5-8F51-4F66-A644-EA64770CF8B7")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsDeferredDocView {
    public abstract virtual int get_DocView(IntPtr& ppUnkDocView);
    public abstract virtual int get_CmdUIGuid(Guid& pGuidCmdId);
}
[GuidAttribute("83B2961F-AC2B-409B-89BD-DCF698E3C402")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsDeferredSaveProject {
    public abstract virtual int SaveProjectToLocation(string pszProjectFilename);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("9DB6689F-3C5F-43ED-B0D5-54851A980B93")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsDependency {
    public abstract virtual int get_CanonicalName(String& pbstrCanonicalName);
    public abstract virtual int get_Type(Guid& pguidType);
    public abstract virtual int get_Description(String& pbstrDescription);
    public abstract virtual int get_HelpContext(UInt32& pdwHelpContext);
    public abstract virtual int get_HelpFile(String& pbstrHelpFile);
}
[GuidAttribute("819CC554-C7BF-4965-A4D4-937B2B6CD2E1")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsDependencyProvider {
    public abstract virtual int EnumDependencies(IVsEnumDependencies& ppIVsEnumDependencies);
    public abstract virtual int OpenDependency(string szDependencyCanonicalName, IVsDependency& ppIVsDependency);
}
[GuidAttribute("358F6C9F-CD65-446A-B79A-30CEE094FDC1")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsDeployableProjectCfg {
    public abstract virtual int AdviseDeployStatusCallback(IVsDeployStatusCallback pIVsDeployStatusCallback, UInt32& pdwCookie);
    public abstract virtual int UnadviseDeployStatusCallback(UInt32 dwCookie);
    public abstract virtual int StartDeploy(IVsOutputWindowPane pIVsOutputWindowPane, UInt32 dwOptions);
    public abstract virtual int QueryStatusDeploy(Int32& pfDeployDone);
    public abstract virtual int StopDeploy(int fSync);
    public abstract virtual int WaitDeploy(UInt32 dwMilliseconds, int fTickWhenMessageQNotEmpty);
    public abstract virtual int QueryStartDeploy(UInt32 dwOptions, Int32[] pfSupported, Int32[] pfReady);
    public abstract virtual int Commit(UInt32 dwReserved);
    public abstract virtual int Rollback(UInt32 dwReserved);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("A981529F-4D0D-46EE-A758-AC26E50E099D")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsDeployableProjectCfg2 {
    public abstract virtual int AdviseDeployStatusCallback(IVsDeployStatusCallback pIVsDeployStatusCallback, UInt32& pdwCookie);
    public abstract virtual int UnadviseDeployStatusCallback(UInt32 dwCookie);
    public abstract virtual int StartDeploy(IVsOutputWindowPane pIVsOutputWindowPane, UInt32 dwOptions);
    public abstract virtual int QueryStatusDeploy(Int32& pfDeployDone);
    public abstract virtual int StopDeploy(int fSync);
    public abstract virtual int WaitDeploy(UInt32 dwMilliseconds, int fTickWhenMessageQNotEmpty);
    public abstract virtual int QueryStartDeploy(UInt32 dwOptions, Int32[] pfSupported, Int32[] pfReady);
    public abstract virtual int Commit(UInt32 dwReserved);
    public abstract virtual int Rollback(UInt32 dwReserved);
    public abstract virtual int StartCleanDeploy(IVsOutputWindowPane pIVsOutputWindowPane, UInt32 dwOptions);
}
[GuidAttribute("A086E870-AA0B-4EF9-8CF3-4A38267B9C7D")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsDeployDependency {
    public abstract virtual int get_DeployDependencyURL(String& pbstrURL);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("77F54647-95E6-4033-91A8-51CCD014D945")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsDeployDependency2 {
    public abstract virtual int get_Property(string szProperty, Object& pvar);
}
[GuidAttribute("E9964F8D-5600-4623-B611-FF4007B22419")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsDeployStatusCallback {
    public abstract virtual int OnStartDeploy(Int32& pfContinue);
    public abstract virtual int OnEndDeploy(int fSuccessful);
    public abstract virtual int OnQueryContinueDeploy(Int32& pfContinue);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("59518321-3CCA-4BC9-BC1B-ADBCEEF21F14")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsDesignerInfo {
    public abstract virtual int get_DesignerTechnology(String& pbstrTechnology);
}
[GuidAttribute("EDA26258-95DF-44A0-A244-D545E6C1196C")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsDesignTimeAssemblyResolution {
    public abstract virtual int ResolveAssemblyPathInTargetFx(String[] prgAssemblySpecs, UInt32 cAssembliesToResolve, VsResolvedAssemblyPath[] prgResolvedAssemblyPaths, UInt32& pcResolvedAssemblyPaths);
    public abstract virtual int GetTargetFramework(String& ppTargetFramework);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("C0031543-0B20-4FA7-B627-8ED28F4B5F64")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsDesignTimeAssemblyResolution2 {
    public abstract virtual int ResolveAssemblyPathInTargetFx2(String[] prgAssemblySpecs, UInt32 cAssembliesToResolve, bool ignoreVersionForFrameworkReferences, VsResolvedAssemblyPath[] prgResolvedAssemblyPaths, UInt32& pcResolvedAssemblyPaths);
}
[GuidAttribute("42085C99-3F5B-4B61-9737-592479718CEC")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsDetermineWizardTrust {
    public abstract virtual int OnWizardInitiated(string pszTemplateFilename, Guid& guidProjectType);
    public abstract virtual int OnWizardCompleted();
    public abstract virtual int IsWizardRunning(Int32& pfWizardRunning);
    public abstract virtual int GetRunningWizardTemplateName(String& pbstrRunningTemplate);
    public abstract virtual int GetWizardTrustLevel(UInt32& pdwWizardTrustLevel);
    public abstract virtual int SetWizardTrustLevel(UInt32 dwWizardTrustLevel);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("A20B98D4-F56C-4B53-819B-3B0E7147B961")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsDiagnosticsItem {
    public string DiagnosticsName { get; }
    public abstract virtual string get_DiagnosticsName();
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("79F357CD-D78E-44F7-8442-376FF2BFF0C4")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsDiagnosticsProvider {
    [ComAliasNameAttribute("OLE.DWORD")]
public UInt32 Version { get; }
    public object DataModel { get; }
    public abstract virtual UInt32 get_Version();
    public abstract virtual object get_DataModel();
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("E20E53BE-8B7A-408F-AEA7-C0AAD6D1B946")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsDifferenceService {
    public abstract virtual IVsWindowFrame OpenComparisonWindow(string leftFileMoniker, string rightFileMoniker);
    public abstract virtual IVsWindowFrame OpenComparisonWindowFromCommandLineArguments(string Arguments);
    public abstract virtual IVsWindowFrame OpenComparisonWindow2(string leftFileMoniker, string rightFileMoniker, string caption, string Tooltip, string leftLabel, string rightLabel, string inlineLabel, string roles, UInt32 grfDiffOptions);
}
[GuidAttribute("B9A32C80-B14D-4AE3-A955-5CBC3E7FAB10")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsDiscoveryService {
    public abstract virtual int CreateDiscoverySession(IDiscoverySession& pSessionObject);
}
[GuidAttribute("BF955013-A875-439D-A4E7-A3BBDF12AA4F")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsDocDataFileChangeControl {
    public abstract virtual int IgnoreFileChanges(int fIgnore);
}
[InterfaceTypeAttribute("1")]
[ComConversionLossAttribute]
[GuidAttribute("47B1D60A-4EB8-4723-B991-992E6393E392")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsDocOutlineProvider {
    public abstract virtual int GetOutlineCaption(VSOUTLINECAPTION nCaptionType, String& pbstrCaption);
    public abstract virtual int GetOutline(IntPtr& phwnd, IOleCommandTarget& ppCmdTarget);
    public abstract virtual int ReleaseOutline(IntPtr hwnd, IOleCommandTarget pCmdTarget);
    public abstract virtual int OnOutlineStateChange(UInt32 dwMask, UInt32 dwState);
}
[GuidAttribute("9EB7079F-3445-4C43-99D8-46EA8CA1D659")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsDocOutlineProvider2 {
    public abstract virtual int TranslateAccelerator(MSG[] lpMsg);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("685933F2-C1AD-4540-A15A-D3F977A81AF7")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsDocumentLockHolder {
    public abstract virtual int ShowDocumentHolder();
    public abstract virtual int CloseDocumentHolder(UInt32 dwSaveOptions);
}
[GuidAttribute("1A19A9DB-766E-40B4-90FE-B6EF0BE6299B")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsDocumentPreviewer {
    public string DisplayName { get; }
    public string Path { get; }
    public string Arguments { get; }
    public bool IsDefault { get; }
    [ComAliasNameAttribute("Microsoft.VisualStudio.Shell.Interop.DOCUMENTPREVIEWERTYPE")]
public UInt32 Type { get; }
    [ComAliasNameAttribute("Microsoft.VisualStudio.Shell.Interop.DOCUMENTPREVIEWERRESOLUTION")]
public UInt32 Resolution { get; }
    public abstract virtual string get_DisplayName();
    public abstract virtual string get_Path();
    public abstract virtual string get_Arguments();
    public abstract virtual bool get_IsDefault();
    public abstract virtual UInt32 get_Type();
    public abstract virtual UInt32 get_Resolution();
}
[GuidAttribute("2283D00F-C00F-405E-8C23-8D31CC714FDD")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsDpiAware {
    [DispIdAttribute("1610678272")]
[ComAliasNameAttribute("VSDPIMODE")]
public UInt32 Mode { get; }
    public abstract virtual UInt32 get_Mode();
}
[GuidAttribute("3304FDEF-9284-4340-B6B7-37CE11167C8C")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsDynamicNavigationItem {
    public abstract virtual string GetText(IVsWindowFrame pFrame);
}
[GuidAttribute("40FB079B-B62C-486F-9823-C9A2EAE8DBFD")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsEditorFactory {
    public abstract virtual int CreateEditorInstance(UInt32 grfCreateDoc, string pszMkDocument, string pszPhysicalView, IVsHierarchy pvHier, UInt32 itemid, IntPtr punkDocDataExisting, IntPtr& ppunkDocView, IntPtr& ppunkDocData, String& pbstrEditorCaption, Guid& pguidCmdUI, Int32& pgrfCDW);
    public abstract virtual int SetSite(IServiceProvider psp);
    public abstract virtual int Close();
    public abstract virtual int MapLogicalView(Guid& rguidLogicalView, String& pbstrPhysicalView);
}
[GuidAttribute("8ABD2347-3360-46AE-96FA-3B70A44D3F73")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsEditorFactory2 {
    public abstract virtual int RetargetCodeOrDesignerToOpen(string pszMkDocumentSource, Guid& rguidLogicalViewSource, IVsHierarchy pvHier, UInt32 itemidSource, UInt32& pitemidTarget, UInt32& pgrfEditorFlags, Guid& pguidEditorTypeTarget, String& pbstrPhysicalViewTarget, Guid& pguidLogicalViewTarget);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("C2274805-A963-49E1-BD01-97DDEE5AE744")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsEditorFactory3 {
    public abstract virtual bool IsProjectLoadRequired();
}
[GuidAttribute("5F149946-406A-4B77-A334-9314CDBACD2F")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsEditorFactory4 {
    public abstract virtual object GetDocumentData(UInt32 grfCreate, string pszMkDocument, IVsHierarchy pHier, UInt32 itemid);
    public abstract virtual object GetDocumentView(UInt32 grfCreate, string pszPhysicalView, IVsHierarchy pHier, IntPtr punkDocData, UInt32 itemid);
    public abstract virtual string GetEditorCaption(string pszMkDocument, string pszPhysicalView, IVsHierarchy pHier, IntPtr punkDocData, Guid& pguidCmdUI);
    public abstract virtual bool ShouldDeferUntilIntellisenseIsReady(UInt32 grfCreate, string pszMkDocument, string pszPhysicalView);
}
[GuidAttribute("00462323-0C58-4B10-BC63-95ED7427744C")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsEditorFactoryChooser {
    public abstract virtual int ChooseEditorFactory(string pszMkDocument, IVsHierarchy pHier, UInt32 itemid, IntPtr punkDocDataExisting, Guid& rguidLogicalView, Guid& pguidEditorTypeActual, Guid& pguidLogicalViewActual);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("02AC210F-139B-4F8E-9159-501CF2A87D6E")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsEditorFactoryNotify {
    public abstract virtual int NotifyItemAdded(UInt32 grfEFN, IVsHierarchy pHier, UInt32 itemid, string pszMkDocument);
    public abstract virtual int NotifyItemRenamed(IVsHierarchy pHier, UInt32 itemid, string pszMkDocumentOld, string pszMkDocumentNew);
    public abstract virtual int NotifyDependentItemSaved(IVsHierarchy pHier, UInt32 itemidParent, string pszMkDocumentParent, UInt32 itemidDpendent, string pszMkDocumentDependent);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("BF031840-AFB9-11D2-AE14-00A0C9110055")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsENCRebuildableProjectCfg {
    public abstract virtual int ENCRebuild(object in_pProgram, Object& out_ppSnapshot);
    public abstract virtual int CancelENC();
    public abstract virtual int ENCRelink(object pENCRelinkInfo);
    public abstract virtual int StartDebugging();
    public abstract virtual int StopDebugging();
    public abstract virtual int BelongToProject(string in_szFileName, ENC_REASON in_ENCReason, int in_fOnContinue);
    public abstract virtual int SetENCProjectBuildOption(Guid& in_guidOption, string in_szOptionValue);
    public abstract virtual int ENCComplete(int in_fENCSuccess);
}
[GuidAttribute("D13E943A-9EE0-457F-8766-7D8B6BC06565")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsENCRebuildableProjectCfg2 {
    public abstract virtual int StartDebuggingPE();
    public abstract virtual int EnterBreakStateOnPE(UInt32 encBreakReason, ENC_ACTIVE_STATEMENT[] pActiveStatements, UInt32 cActiveStatements);
    public abstract virtual int BuildForEnc(object pUpdatePE);
    public abstract virtual int ExitBreakStateOnPE();
    public abstract virtual int StopDebuggingPE();
    public abstract virtual int GetENCBuildState(ENC_BUILD_STATE[] pENCBuildState);
    public abstract virtual int GetCurrentActiveStatementPosition(UInt32 id, TextSpan[] ptsNewPosition);
    public abstract virtual int GetPEidentity(Guid[] pMVID, String[] pbstrPEName);
    public abstract virtual int GetExceptionSpanCount(UInt32& pcExceptionSpan);
    public abstract virtual int GetExceptionSpans(UInt32 celt, ENC_EXCEPTION_SPAN[] rgelt, UInt32& pceltFetched);
    public abstract virtual int GetCurrentExceptionSpanPosition(UInt32 id, TextSpan[] ptsNewPosition);
    public abstract virtual int EncApplySucceeded(int hrApplyResult);
    public abstract virtual int GetPEBuildTimeStamp(FILETIME[] pTimeStamp);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("B8092238-A091-42F1-A945-080B381FBCFC")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsEnhancedDataTip {
    public abstract virtual int Show(IntPtr hwndOwner, POINT[] pptTopLeft, RECT[] pHotRect);
    public abstract virtual int SetExpression(string bstrExpression);
    public abstract virtual int GetBaseWindowHandle(IntPtr& phwnd);
    public abstract virtual int IsErrorTip(Int32& pbIsError);
    public abstract virtual int IsOpen(Int32& pbIsOpen);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("EC47207E-5A2A-45D4-9FA4-F9AB94E380B4")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsEnumCommentTaskTokens {
    public abstract virtual int Next(UInt32 celt, IVsCommentTaskToken[] rgelt, UInt32& pceltFetched);
    public abstract virtual int Skip(UInt32 celt);
    public abstract virtual int Reset();
    public abstract virtual int Clone(IVsEnumCommentTaskTokens& ppenum);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("AF855397-C4DC-478B-ABD4-C3DBB3759E72")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsEnumCryptoProviderContainers {
    public abstract virtual int Next(UInt32 celt, String[] pbstrContainers, UInt32& pceltFetched);
    public abstract virtual int Reset();
}
[GuidAttribute("F7FC33A9-10DA-42BE-9F88-9700E583EC33")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsEnumCryptoProviders {
    public abstract virtual int Next(UInt32 celt, String[] pbstrProviders, UInt32& pceltFetched);
    public abstract virtual int Reset();
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("0ED850AF-C30A-42BA-AA20-3436ADF24937")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsEnumDependencies {
    public abstract virtual int Reset();
    public abstract virtual int Next(UInt32 cElements, IVsDependency[] rgpIVsDependency, UInt32& pcElementsFetched);
    public abstract virtual int Skip(UInt32 cElements);
    public abstract virtual int Clone(IVsEnumDependencies& ppIVsEnumDependencies);
}
[GuidAttribute("B2CA3152-8051-4141-BF11-14A77A4F254E")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsEnumDocumentPreviewers {
    public abstract virtual int Next(UInt32 celt, IVsDocumentPreviewer[] rgelt, UInt32& pceltFetched);
    public abstract virtual int Skip(UInt32 celt);
    public abstract virtual void Reset();
    public abstract virtual void Clone(IVsEnumDocumentPreviewers& ppEnum);
}
[GuidAttribute("BEC804F7-F5DE-4F3E-8EBB-DAB26649F33F")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsEnumGuids {
    public abstract virtual int Next(UInt32 celt, Guid[] rgelt, UInt32& pceltFetched);
    public abstract virtual int Skip(UInt32 celt);
    public abstract virtual void Reset();
    public abstract virtual void Clone(IVsEnumGuids& ppEnum);
}
[DefaultMemberAttribute("Item")]
[InterfaceTypeAttribute("1")]
[GuidAttribute("97A31B3B-B37F-43A5-92F4-71E6E63F80F6")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsEnumHierarchies {
    [DispIdAttribute("0")]
public IVsHierarchy Item { get; }
    [DispIdAttribute("10")]
public int Count { get; }
    public abstract virtual IEnumerator GetEnumerator();
    public abstract virtual IVsHierarchy get_Item(int index);
    public abstract virtual int get_Count();
}
[GuidAttribute("30E5C390-C3E6-40AC-BD1D-7015B1B5F541")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsEnumHierarchyItemsFactory {
    public abstract virtual int EnumHierarchyItems(IVsHierarchy pHierRoot, UInt32 grfItems, UInt32 itemidRoot, IEnumHierarchyItems& ppenum);
}
[GuidAttribute("FE2BB01D-6EBA-4796-ADF9-59EC7D100AC2")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsEnumLibraries2 {
    public abstract virtual int Next(UInt32 celt, IVsLibrary2[] rgelt, UInt32& pceltFetched);
    public abstract virtual int Skip(UInt32 celt);
    public abstract virtual int Reset();
    public abstract virtual int Clone(IVsEnumLibraries2& ppEnum);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("D2042A65-5E86-4CFA-AD68-F2D6886628D7")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsEnumNavInfoNodes {
    public abstract virtual int Next(UInt32 celt, IVsNavInfoNode[] rgelt, UInt32& pceltFetched);
    public abstract virtual int Skip(UInt32 celt);
    public abstract virtual int Reset();
    public abstract virtual int Clone(IVsEnumNavInfoNodes& ppEnum);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("0A8AC2FB-87BC-4795-8C8B-47E877F48FE8")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsEnumOutputs {
    public abstract virtual int Reset();
    public abstract virtual int Next(UInt32 cElements, IVsOutput[] rgpIVsOutput, UInt32[] pcElementsFetched);
    public abstract virtual int Skip(UInt32 cElements);
    public abstract virtual int Clone(IVsEnumOutputs& ppIVsEnumOutputs);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("6AA5C352-FCBE-45BE-AF99-FE1F8D2935EC")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsEnumSearchProviders {
    public abstract virtual int Next(UInt32 celt, IVsSearchProvider[] rgelt, UInt32& pceltFetched);
    public abstract virtual int Skip(UInt32 celt);
    public abstract virtual void Reset();
    public abstract virtual void Clone(IVsEnumSearchProviders& ppEnum);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("CAC67C59-301A-415D-B269-790F7D4731BC")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsEnumSelectedSymbols {
    public abstract virtual int Next(UInt32 celt, IVsSelectedSymbol[] rgpIVsSelectedSymbol, UInt32& pceltFetched);
    public abstract virtual int Skip(UInt32 celt);
    public abstract virtual int Reset();
    public abstract virtual int Clone(IVsEnumSelectedSymbols& ppIVsEnumSelectedSymbols);
}
[DefaultMemberAttribute("Item")]
[GuidAttribute("FF92C68E-8503-4E30-A205-3AB4EF219990")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsEnumSharedProjectReferences {
    [DispIdAttribute("0")]
public IVsSharedProjectReference Item { get; }
    [DispIdAttribute("10")]
public int Count { get; }
    public abstract virtual IEnumerator GetEnumerator();
    public abstract virtual IVsSharedProjectReference get_Item(int index);
    public abstract virtual int get_Count();
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("66638598-522B-4058-9E65-FAF237700E81")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsEnumTaskItems {
    public abstract virtual int Next(UInt32 celt, IVsTaskItem[] rgelt, UInt32[] pceltFetched);
    public abstract virtual int Skip(UInt32 celt);
    public abstract virtual int Reset();
    public abstract virtual int Clone(IVsEnumTaskItems& ppenum);
}
[GuidAttribute("7FD10A54-08D9-4F5B-8142-239F6EF688E4")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsEnumWindowSearchFilters {
    public abstract virtual int Next(UInt32 celt, IVsWindowSearchFilter[] rgelt, UInt32& pceltFetched);
    public abstract virtual int Skip(UInt32 celt);
    public abstract virtual void Reset();
    public abstract virtual void Clone(IVsEnumWindowSearchFilters& ppEnum);
}
[GuidAttribute("ECD23B8C-20EB-4D95-AD05-6A8C87413D10")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsEnumWindowSearchOptions {
    public abstract virtual int Next(UInt32 celt, IVsWindowSearchOption[] rgelt, UInt32& pceltFetched);
    public abstract virtual int Skip(UInt32 celt);
    public abstract virtual void Reset();
    public abstract virtual void Clone(IVsEnumWindowSearchOptions& ppEnum);
}
[GuidAttribute("CE3DF110-7630-4D6C-81D5-5CFA12ADDAE6")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsErrorItem {
    public abstract virtual int GetHierarchy(IVsHierarchy& ppProject);
    public abstract virtual int GetCategory(UInt32& pCategory);
}
[GuidAttribute("96C14EA1-1435-4DA9-8DDD-72DFBC2194E9")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsErrorItem2 {
    public abstract virtual int GetCustomIconIndex(Int32& index);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("D824A797-62D2-4F60-98F8-4423624BC1BF")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsErrorList {
    public abstract virtual int BringToFront();
    public abstract virtual int ForceShowErrors();
}
[GuidAttribute("A17BE28D-6CDC-4C1E-BE3E-F0ED067EA3E2")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsExtensibility3 {
    public abstract virtual int GetProperties(object pParent, object pdispPropObj, Object& ppProperties);
    public abstract virtual int RunWizardFile(string bstrWizFilename, IntPtr hwndOwner, Array& vContextParams, Int32& pResult);
    public abstract virtual int EnterAutomationFunction();
    public abstract virtual int ExitAutomationFunction();
    public abstract virtual int IsInAutomationFunction(Int32& pfInAutoFunc);
    public abstract virtual int GetUserControl(Boolean& fUserControl);
    public abstract virtual int SetUserControl(bool fUserControl);
    public abstract virtual int SetUserControlUnlatched(bool fUserControl);
    public abstract virtual int LockServer(bool __MIDL_0010);
    public abstract virtual int GetLockCount(Int32& pCount);
    public abstract virtual int TestForShutdown(Boolean& fShutdown);
    public abstract virtual int GetGlobalsObject(object ExtractFrom, Object& ppGlobals);
    public abstract virtual int GetConfigMgr(object pIVsProject, UInt32 itemid, Object& ppCfgMgr);
    public abstract virtual int FireMacroReset();
    public abstract virtual int GetDocumentFromDocCookie(int lDocCookie, Object& ppDoc);
    public abstract virtual int IsMethodDisabled(Guid& pGuid, int dispid);
    public abstract virtual int SetSuppressUI(bool In);
    public abstract virtual int GetSuppressUI(Boolean& pOut);
    public abstract virtual int FireProjectsEvent_ItemAdded(object Project);
    public abstract virtual int FireProjectsEvent_ItemRemoved(object Project);
    public abstract virtual int FireProjectsEvent_ItemRenamed(object Project, string OldName);
    public abstract virtual int FireProjectItemsEvent_ItemAdded(object ProjectItem);
    public abstract virtual int FireProjectItemsEvent_ItemRemoved(object ProjectItem);
    public abstract virtual int FireProjectItemsEvent_ItemRenamed(object ProjectItem, string OldName);
    public abstract virtual int IsFireCodeModelEventNeeded(Boolean& vbNeeded);
    public abstract virtual int RunWizardFileEx(string bstrWizFilename, IntPtr hwndOwner, Array& vContextParams, Array& vCustomParams, Int32& pResult);
    public abstract virtual int FireCodeModelEvent3(int dispid, object pParent, object pElement, int changeKind);
}
[GuidAttribute("D2C45F92-23B5-408B-B41D-D4365FB7EDA8")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsExtensibleObject {
    public abstract virtual int GetAutomationObject(string pszPropName, Object& ppDisp);
}
[GuidAttribute("E36756DE-BB4F-4900-A7F0-E827BDBD2092")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsExternalFilesManager {
    public abstract virtual int GetExternalFilesProject(IVsProject& ppProject);
    public abstract virtual int TransferDocument(string pszMkDocumentOld, string pszMkDocumentNew, IVsWindowFrame punkWindowFrame);
    public abstract virtual int AddDocument(UInt32 dwCDW, string pszMkDocument, IntPtr punkDocView, IntPtr punkDocData, Guid& rguidEditorType, string pszPhysicalView, Guid& rguidCmdUI, string pszOwnerCaption, string pszEditorCaption, Int32& pfDefaultPosition, IVsWindowFrame& ppWindowFrame);
    public abstract virtual int IsVisible(Int32& pfVisible);
}
[GuidAttribute("999B1784-A1EE-42EB-B4B6-E928008FFB5D")]
[InterfaceTypeAttribute("1")]
[ComConversionLossAttribute]
public interface Microsoft.VisualStudio.Shell.Interop.IVsExternalFilesManager2 {
    public abstract virtual int GetExternalFilesProject(IVsProject& ppProject);
    public abstract virtual int TransferDocument(string pszMkDocumentOld, string pszMkDocumentNew, IVsWindowFrame punkWindowFrame);
    public abstract virtual int AddDocument(UInt32 dwCDW, string pszMkDocument, IntPtr punkDocView, IntPtr punkDocData, Guid& rguidEditorType, string pszPhysicalView, Guid& rguidCmdUI, string pszOwnerCaption, string pszEditorCaption, Int32& pfDefaultPosition, IVsWindowFrame& ppWindowFrame);
    public abstract virtual int IsVisible(Int32& pfVisible);
    public abstract virtual int AddDocumentEx(UInt32 dwCDW, string pszMkDocument, IntPtr punkDocView, IntPtr punkDocData, Guid& rguidEditorType, string pszPhysicalView, Guid& rguidCmdUI, string pszOwnerCaption, string pszEditorCaption, IServiceProvider pspContext, IntPtr hicon, Int32& pfDefaultPosition, IVsWindowFrame& ppWindowFrame);
}
[GuidAttribute("E8B06F4D-6D01-11D2-AA7D-00C04F990343")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsFavoritesProvider {
    public abstract virtual int Navigate(string lpszURL, UInt32 dwFlags, IVsWindowFrame& ppFrame);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("4FFA05A4-6C77-4952-AB60-B33E0A6416C5")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsFileBackup2 {
    public abstract virtual IVsTask BackupFileAsync(string szBackupFileName);
    public abstract virtual bool HasChangedSinceLastBackup();
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("F04C8816-7F77-450D-9527-14D0B93DA159")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsFileChangeEvents {
    public abstract virtual int FilesChanged(UInt32 cChanges, String[] rgpszFile, UInt32[] rggrfChange);
    public abstract virtual int DirectoryChanged(string pszDirectory);
}
[GuidAttribute("9BC72973-194A-4EA8-B4D5-AFB0B0D0DCB1")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsFileChangeEx {
    public abstract virtual int AdviseFileChange(string pszMkDocument, UInt32 grfFilter, IVsFileChangeEvents pFCE, UInt32& pvsCookie);
    public abstract virtual int UnadviseFileChange(UInt32 VSCOOKIE);
    public abstract virtual int SyncFile(string pszMkDocument);
    public abstract virtual int IgnoreFile(UInt32 VSCOOKIE, string pszMkDocument, int fIgnore);
    public abstract virtual int AdviseDirChange(string pszDir, int fWatchSubDir, IVsFileChangeEvents pFCE, UInt32& pvsCookie);
    public abstract virtual int UnadviseDirChange(UInt32 VSCOOKIE);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("00D5F3B7-EAE1-4902-93BB-37A111EB8E7F")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsFileChangeEx2 {
    public abstract virtual void IgnoreDir(string directory, bool ignore);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("A4AFCB52-B595-43F9-87DD-6EB348181E14")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsFileChangeEx3 {
    public abstract virtual void IgnoreDir(string directory, bool ignore);
    public abstract virtual IVsTask Pause();
    public abstract virtual IVsTask Resume();
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("9003D4ED-2B8E-46B8-9838-78F5AE7B656D")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsFileMergeService {
    public abstract virtual IVsWindowFrame OpenAndRegisterMergeWindow(string leftFileMoniker, string rightFileMoniker, string baseFileMoniker, string resultFileMoniker, string leftFileTag, string rightFileTag, string baseFileTag, string resultFileTag, string leftFileLabel, string rightFileLabel, string baseFileLabel, string resultFileLabel, string serverGuid, string leftFileSpec, string rightFileSpec, Int32& cookie);
    public abstract virtual void UnregisterMergeWindow(int cookie);
    public abstract virtual void QueryMergeWindowState(int cookie, Int32& pfState, String& errorAndWarningMsg);
}
[GuidAttribute("DEB39E27-EF55-4626-A586-24FBDD918792")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsFileReference {
    public string Name { get; public set; }
    public string FullPath { get; public set; }
    public bool AlreadyReferenced { get; public set; }
    public abstract virtual string get_Name();
    public abstract virtual void set_Name(string value);
    public abstract virtual string get_FullPath();
    public abstract virtual void set_FullPath(string value);
    public abstract virtual bool get_AlreadyReferenced();
    public abstract virtual void set_AlreadyReferenced(bool value);
}
[GuidAttribute("1D594BAA-05BC-4882-B118-4CA95AD56E41")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsFileReferenceProviderContext {
    public Guid ProviderGuid { get; }
    public Array References { get; }
    public Array ReferenceFilterPaths { get; public set; }
    public string BrowseFilter { get; public set; }
    public string DefaultBrowseLocation { get; public set; }
    public abstract virtual Guid get_ProviderGuid();
    public abstract virtual Array get_References();
    public abstract virtual void AddReference(IVsReference pReference);
    public abstract virtual IVsReference CreateReference();
    public abstract virtual Array get_ReferenceFilterPaths();
    public abstract virtual void set_ReferenceFilterPaths(Array value);
    public abstract virtual string get_BrowseFilter();
    public abstract virtual void set_BrowseFilter(string value);
    public abstract virtual string get_DefaultBrowseLocation();
    public abstract virtual void set_DefaultBrowseLocation(string value);
}
[GuidAttribute("5D2D55F2-E545-4301-9C22-52BC694CA76C")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsFileUpgrade {
    public abstract virtual int UpgradeFile(string bstrProjectName, string bstrFileName, int bNoBackup, IVsUpgradeLogger pLogger, Int32& pUpgradeRequired);
    public abstract virtual int UpgradeFile_CheckOnly(string bstrProjectName, string bstrFileName, int bNoBackup, IVsUpgradeLogger pLogger, Int32& pUpgradeRequired);
}
[GuidAttribute("F2394417-A219-4297-BB4E-E66864A6A7DB")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsFileUpgrade2 {
    public abstract virtual int UpgradeFile(string bstrProjectName, string bstrFileName, int bNoBackup, IVsUpgradeLogger pLogger, ushort oldToolsVersionMajor, ushort oldToolsVersionMinor, ushort newToolsVersionMajor, ushort newToolsVersionMinor, Int32& pUpgradeRequired);
    public abstract virtual int UpgradeFile_CheckOnly(string bstrProjectName, string bstrFileName, int bNoBackup, IVsUpgradeLogger pLogger, ushort oldToolsVersionMajor, ushort oldToolsVersionMinor, ushort newToolsVersionMajor, ushort newToolsVersionMinor, Int32& pUpgradeRequired);
}
[GuidAttribute("D93A191C-525A-43BC-ACFD-7EF494143CF4")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsFilterAddProjectItemDlg {
    public abstract virtual int FilterTreeItemByLocalizedName(Guid& rguidProjectItemTemplates, string pszLocalizedName, Int32& pfFilter);
    public abstract virtual int FilterTreeItemByTemplateDir(Guid& rguidProjectItemTemplates, string pszTemplateDir, Int32& pfFilter);
    public abstract virtual int FilterListItemByLocalizedName(Guid& rguidProjectItemTemplates, string pszLocalizedName, Int32& pfFilter);
    public abstract virtual int FilterListItemByTemplateFile(Guid& rguidProjectItemTemplates, string pszTemplateFile, Int32& pfFilter);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("61116CFF-5319-440A-81CE-5D9F54A610DE")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsFilterAddProjectItemDlg2 {
    public abstract virtual int FilterTreeItemByLocalizedName(Guid& rguidProjectItemTemplates, string pszLocalizedName, Int32& pfFilter);
    public abstract virtual int FilterTreeItemByTemplateDir(Guid& rguidProjectItemTemplates, string pszTemplateDir, Int32& pfFilter);
    public abstract virtual int FilterListItemByLocalizedName(Guid& rguidProjectItemTemplates, string pszLocalizedName, Int32& pfFilter);
    public abstract virtual int FilterListItemByTemplateFile(Guid& rguidProjectItemTemplates, string pszTemplateFile, Int32& pfFilter);
    public abstract virtual int FilterTreeItemByCategory(Guid& rguidProjectItemTemplates, string pszCategoryName, Int32& pfFilter);
    public abstract virtual int FilterListItemByCategory(Guid& rguidProjectItemTemplates, string pszCategoryName, Int32& pfFilter);
}
[GuidAttribute("C00858CF-2E17-4323-9D79-0B0CFC39A92F")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsFilterKeys {
    public abstract virtual int TranslateAccelerator(MSG[] pMsg, UInt32 dwFlags, Guid& pguidCmd, UInt32& pdwCmd);
}
[GuidAttribute("A1FF0D7C-1F51-4A95-B107-EC6FFE2C5794")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsFilterKeys2 {
    public abstract virtual int TranslateAcceleratorEx(MSG[] pMsg, UInt32 dwFlags, UInt32 cKeyBindingScopes, Guid[] rgguidKeyBindingScopes, Guid& pguidCmd, UInt32& pdwCmd, Int32& fCmdTranslated, Int32& pfKeyComboStartsChord);
}
[GuidAttribute("B10EC465-CEC8-41CD-A132-6C1A58F565FB")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsFilterNewProjectDlg {
    public abstract virtual int FilterTreeItemByLocalizedName(string pszLocalizedName, Int32& pfFilter);
    public abstract virtual int FilterTreeItemByTemplateDir(string pszTemplateDir, Int32& pfFilter);
    public abstract virtual int FilterListItemByLocalizedName(string pszLocalizedName, Int32& pfFilter);
    public abstract virtual int FilterListItemByTemplateFile(string pszTemplateFile, Int32& pfFilter);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("7FF85070-4667-4532-B149-63A7B205060B")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsFindSymbol {
    public abstract virtual int GetUserOptions(Guid& pguidScope, VSOBSEARCHCRITERIA2[] pobSrch);
    public abstract virtual int SetUserOptions(Guid& guidScope, VSOBSEARCHCRITERIA2[] pobSrch);
    public abstract virtual int DoSearch(Guid& guidSymbolScope, VSOBSEARCHCRITERIA2[] pobSrch);
}
[GuidAttribute("7FF85072-4667-4532-B149-63A7B205060B")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsFindSymbol2 {
    public abstract virtual int GetUserOptions(Guid& pguidScope, UInt32& pdwSubID, VSOBSEARCHCRITERIA2[] pobSrch);
    public abstract virtual int SetUserOptions(Guid& guidScope, UInt32 dwSubID, VSOBSEARCHCRITERIA2[] pobSrch);
    public abstract virtual int DoSearch(Guid& guidSymbolScope, UInt32 dwSubID, VSOBSEARCHCRITERIA2[] pobSrch);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("18220DBE-1AEB-44EA-A924-F3571D202EF4")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsFindSymbolEvents {
    public abstract virtual int OnUserOptionsChanged(Guid& guidSymbolScope, VSOBSEARCHCRITERIA2[] pobSrch);
}
[GuidAttribute("18220DB2-1AEB-44EA-A924-F3571D202EF4")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsFindSymbolEvents2 {
    public abstract virtual int OnUserOptionsChanged(Guid& guidSymbolScope, UInt32 dwSubID, VSOBSEARCHCRITERIA2[] pobSrch);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("A4662D0F-FA14-48AC-8E68-D481EF200627")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsFireSolutionEvents {
    public abstract virtual int FireOnAfterOpenProject(IVsHierarchy pHierarchy, int fAdded);
    public abstract virtual int FireOnQueryCloseProject(IVsHierarchy pHierarchy, int fRemoving);
    public abstract virtual int FireOnBeforeCloseProject(IVsHierarchy pHierarchy, int fRemoved);
    public abstract virtual int FireOnAfterLoadProject(IVsHierarchy pHierarchy);
    public abstract virtual int FireOnQueryUnloadProject(IVsHierarchy pHierarchy);
    public abstract virtual int FireOnBeforeUnloadProject(IVsHierarchy pHierarchy);
    public abstract virtual int FireOnBeforeOpeningChildren(IVsHierarchy pHierarchy);
    public abstract virtual int FireOnAfterOpeningChildren(IVsHierarchy pHierarchy);
    public abstract virtual int FireOnBeforeClosingChildren(IVsHierarchy pHierarchy);
    public abstract virtual int FireOnAfterClosingChildren(IVsHierarchy pHierarchy);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("ED6AAB26-108F-4B4F-A57B-14D20982713D")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsFireSolutionEvents2 {
    public abstract virtual int FireOnAfterRenameProject(IVsHierarchy pHierarchy);
    public abstract virtual int FireOnQueryChangeProjectParent(IVsHierarchy pHierarchy, IVsHierarchy pNewParentHier);
    public abstract virtual int FireOnAfterChangeProjectParent(IVsHierarchy pHierarchy);
    [ObsoleteAttribute("Open Solution from SourceControl feature is removed")]
public abstract virtual int FireOnAfterAsynchOpenProject(IVsHierarchy pHierarchy, int fAdded);
}
[GuidAttribute("D8C0B590-65EC-42F7-903F-8ED7C1B3D629")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsFireUpdateSolutionEvents {
    public abstract virtual void FireOnActiveProjectCfgChange(IVsHierarchy pIVsHierarchy);
    public abstract virtual void FireOnActiveProjectCfgChangeBatchBegin();
    public abstract virtual void FireOnActiveProjectCfgChangeBatchEnd();
}
[GuidAttribute("55D3D8C8-F08C-4B31-B70D-FCC52468A5B2")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsFontAndColorCacheManager {
    public abstract virtual int CheckCache(Guid& rguidCategory, Int32& pfHasData);
    public abstract virtual int ClearCache(Guid& rguidCategory);
    public abstract virtual int RefreshCache(Guid& rguidCategory);
    public abstract virtual int CheckCacheable(Guid& rguidCategory, Int32& pfCacheable);
    public abstract virtual int ClearAllCaches();
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("5FA2AC9A-3BEF-423A-8B5E-6645811BFB6B")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsFontAndColorDefaults {
    public abstract virtual int GetFlags(UInt32& dwFlags);
    public abstract virtual int GetPriority(UInt16& pPriority);
    public abstract virtual int GetCategoryName(String& pbstrName);
    public abstract virtual int GetBaseCategory(Guid& pguidBase);
    public abstract virtual int GetFont(FontInfo[] pInfo);
    public abstract virtual int GetItemCount(Int32& pcItems);
    public abstract virtual int GetItem(int iItem, AllColorableItemInfo[] pInfo);
    public abstract virtual int GetItemByName(string szItem, AllColorableItemInfo[] pInfo);
}
[GuidAttribute("3448FF72-B072-435E-9059-29D89C0A3CD0")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsFontAndColorDefaultsProvider {
    public abstract virtual int GetObject(Guid& rguidCategory, Object& ppObj);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("F73E1D1E-3D1B-44F0-B736-D59F960B7F9E")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsFontAndColorEvents {
    public abstract virtual int OnFontChanged(Guid& rguidCategory, FontInfo[] pInfo, LOGFONTW[] pLOGFONT, IntPtr HFONT);
    public abstract virtual int OnItemChanged(Guid& rguidCategory, string szItem, int iItem, ColorableItemInfo[] pInfo, UInt32 crLiteralForeground, UInt32 crLiteralBackground);
    public abstract virtual int OnReset(Guid& rguidCategory);
    public abstract virtual int OnResetToBaseCategory(Guid& rguidCategory);
    public abstract virtual int OnApply();
}
[GuidAttribute("1D42A4C9-57DE-4D3E-8010-485ADFC1E95B")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsFontAndColorGroup {
    public abstract virtual int GetCount(Int32& pnCategories);
    public abstract virtual int GetPriority(UInt16& pPriority);
    public abstract virtual int GetGroupName(String& pbstrName);
    public abstract virtual int GetCategory(int iCategory, Guid& pguidCategory);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("40BC7B1A-E625-4DA1-86B4-7660F3CCBB16")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsFontAndColorStorage {
    public abstract virtual int OpenCategory(Guid& rguidCategory, UInt32 fFlags);
    public abstract virtual int CloseCategory();
    public abstract virtual int RemoveCategory(Guid& rguidCategory);
    public abstract virtual int GetFont(LOGFONTW[] pLOGFONT, FontInfo[] pInfo);
    public abstract virtual int GetItem(string szName, ColorableItemInfo[] pInfo);
    public abstract virtual int SetFont(FontInfo[] pInfo);
    public abstract virtual int SetItem(string szName, ColorableItemInfo[] pInfo);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("1EE6C79A-B763-42E6-AC95-FD0CC00DE315")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsFontAndColorStorage2 {
    public abstract virtual int RevertFontToDefault();
    public abstract virtual int RevertItemToDefault(string szName);
    public abstract virtual int RevertAllItemsToDefault();
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("BAA340BB-FA34-4CCB-8C81-436566368517")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsFontAndColorStorage3 {
    public abstract virtual int RevertFontToDefault();
    public abstract virtual int RevertItemToDefault(string szName);
    public abstract virtual int RevertAllItemsToDefault();
    public abstract virtual int RevertAllCategoriesToDefault();
}
[GuidAttribute("CF43601B-FA34-4CCB-8C81-436566368517")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsFontAndColorStorage4 {
    public abstract virtual int RevertFontToDefault();
    public abstract virtual int RevertItemToDefault(string szName);
    public abstract virtual int RevertAllItemsToDefault();
    public abstract virtual int RevertAllCategoriesToDefault();
    public abstract virtual int GetFont(IntPtr hwnd, LOGFONTW[] pLOGFONT, FontInfo[] pInfo);
}
[GuidAttribute("A356A017-07EE-4D06-ACDE-FEFDBB49EB50")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsFontAndColorUtilities {
    public abstract virtual int EncodeIndexedColor(COLORINDEX idx, UInt32& pcrResult);
    public abstract virtual int EncodeSysColor(int iSysColor, UInt32& pcrResult);
    public abstract virtual int EncodeVSColor(int vsColor, UInt32& pcrResult);
    public abstract virtual int EncodeTrackedItem(int iItemToTrack, int aspect, UInt32& pcrResult);
    public abstract virtual int EncodeInvalidColor(UInt32& pcrResult);
    public abstract virtual int EncodeAutomaticColor(UInt32& pcrResult);
    public abstract virtual int GetColorType(UInt32 crSource, Int32& pctType);
    public abstract virtual int GetEncodedIndex(UInt32 crSource, COLORINDEX[] pIdx);
    public abstract virtual int GetEncodedSysColor(UInt32 crSource, Int32& piSysColor);
    public abstract virtual int GetEncodedVSColor(UInt32 crSource, Int32& pVSColor);
    public abstract virtual int GetTrackedItemIndex(UInt32 crSource, Int32& pAspect, Int32& piItem);
    public abstract virtual int GetRGBOfIndex(COLORINDEX idx, UInt32& pcrResult);
    public abstract virtual int GetRGBOfItem(AllColorableItemInfo[] pInfo, Guid& rguidCategory, UInt32& pcrForeground, UInt32& pcrBackground);
    public abstract virtual int GetRGBOfEncodedColor(UInt32 crSource, UInt32 crAutoColor, Guid& rguidCategory, UInt32& pcrResult);
    public abstract virtual int InitFontInfo(FontInfo[] pInfo);
    public abstract virtual int FreeFontInfo(FontInfo[] pInfo);
    public abstract virtual int CopyFontInfo(FontInfo[] pDest, FontInfo[] pSource);
    public abstract virtual int InitItemInfo(AllColorableItemInfo[] pInfo);
    public abstract virtual int FreeItemInfo(AllColorableItemInfo[] pInfo);
    public abstract virtual int CopyItemInfo(AllColorableItemInfo[] pDest, AllColorableItemInfo[] pSource);
}
[GuidAttribute("B096B75C-5DF5-42C6-888F-A007CCEB6635")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsFrameworkMultiTargeting {
    public abstract virtual int IsReferenceableInTargetFx(string pwszAssemblySpec, string pwszTargetFrameworkMoniker, Boolean& pbIsReferenceable);
    public abstract virtual int GetTargetFramework(string pwszAssemblyPath, string pwszTargetFrameworkIdentifier, String& pbstrTargetFrameworkMoniker);
    public abstract virtual int GetSupportedFrameworks(Array& prgSupportedFrameworks);
    public abstract virtual int GetFrameworkAssemblies(string pwszTargetFrameworkMoniker, UInt32 atAssemblyType, Array& prgAssemblyPaths);
    public abstract virtual int CheckFrameworkCompatibility(string pwszTargetFrameworkMonikerSource, string pwszTargetFrameworkMonikerTarget, UInt32& pdwCompat);
    public abstract virtual int ResolveAssemblyPath(string pwszAssemblySpec, string pwszTargetFrameworkMoniker, String& pbstrResolvedAssemblyPath);
    public abstract virtual int GetDisplayNameForTargetFx(string pwszTargetFrameworkMoniker, String& pbstrDisplayName);
    public abstract virtual int ResolveAssemblyPathsInTargetFx(string pwszTargetFrameworkMoniker, Array prgAssemblySpecs, UInt32 cAssembliesToResolve, VsResolvedAssemblyPath[] prgResolvedAssemblyPaths, UInt32& pcResolvedAssemblyPaths);
    public abstract virtual int GetInstallableFrameworkForTargetFx(string pwszTargetFrameworkMoniker, String& pbstrInstallableFrameworkMoniker);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("0F0CC2B9-8293-4756-9516-ECB1DB326487")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsFrameworkMultiTargeting2 {
    public abstract virtual Array GetSDKRootFolders();
    public abstract virtual string GetSDKDisplayName(string pwszSDKRootDirectory);
    public abstract virtual Array GetSDKReferences(string pwszSDKRootDirectory);
    public abstract virtual void ResolveAssemblyPathsInTargetFx2(string pwszTargetFrameworkMoniker, Array prgAssemblySpecs, UInt32 cAssembliesToResolve, bool ignoreVersionForFrameworkReferences, VsResolvedAssemblyPath[] prgResolvedAssemblyPaths, UInt32& pcResolvedAssemblyPaths);
    public abstract virtual string ResolveAssemblyPath2(string pwszAssemblySpec, string pwszTargetFrameworkMoniker, bool ignoreVersionForFrameworkReferences);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("47F60934-4361-443A-9411-020BC2055608")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsFrameworkRetargetingDlg {
    public abstract virtual int ShowFrameworkRetargetingDlg(string pszProjectType, string pszProjectName, string pszTargetedFrameworkMoniker, UInt32 dwFlags, UInt32& pdwOutcome, Int32& pbDontShowAgain);
    public abstract virtual int NavigateToFrameworkDownloadUrl();
}
[GuidAttribute("A869B861-3F5C-4BD5-A7A2-B1975AF11C53")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsFreeThreadedFileChangeEvents {
    public abstract virtual int FilesChanged(UInt32 cChanges, String[] rgpszFile, UInt32[] rggrfChange);
    public abstract virtual int DirectoryChanged(string pszDirectory);
    public abstract virtual int DirectoryChangedEx(string pszDirectory, string pszFile);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("2019C53D-105B-4116-8A1A-4703796E5052")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsFreeThreadedFileChangeEvents2 {
    public abstract virtual int FilesChanged(UInt32 cChanges, String[] rgpszFile, UInt32[] rggrfChange);
    public abstract virtual int DirectoryChanged(string pszDirectory);
    public abstract virtual int DirectoryChangedEx(string pszDirectory, string pszFile);
    public abstract virtual int DirectoryChangedEx2(string pszDirectory, UInt32 cChanges, String[] rgpszFile, UInt32[] rggrfChange);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("BED89B98-6EC9-43CB-B0A8-41D6E2D6669D")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsGeneratorProgress {
    public abstract virtual int GeneratorError(int fWarning, UInt32 dwLevel, string bstrError, UInt32 dwLine, UInt32 dwColumn);
    public abstract virtual int Progress(UInt32 nComplete, UInt32 nTotal);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("509D0E4F-A770-44C3-9185-D4F1E4813AD6")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsGetCfgProvider {
    public abstract virtual int GetCfgProvider(IVsCfgProvider& ppCfgProvider);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("53544C4D-C1F3-0ADC-BEA7-EA1A8FECFDD9")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsGetScciProviderInterface {
    public abstract virtual void GetSourceControlProviderInterface(Guid& riid, IntPtr& ppvObject);
    public abstract virtual void GetSourceControlProviderID(Guid& pguidSCCProvider);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("AC735863-23EF-46ED-A3EC-87B58B3DF5DA")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsGlobals2 {
    public abstract virtual int Load();
    public abstract virtual int Save();
    public abstract virtual int Empty();
}
[GuidAttribute("5447CE90-561E-4C8E-BE70-9FD5F89BCFA7")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsGlobalsCallback2 {
    public abstract virtual int WriteVariablesToData(string pVariableName, Object& varData);
    public abstract virtual int ReadData(object pGlobals);
    public abstract virtual int ClearVariables();
    public abstract virtual int VariableChanged();
    public abstract virtual int CanModifySource();
    public abstract virtual int GetParent(Object& ppOut);
}
[GuidAttribute("49429DF4-080D-4218-B4CF-9B7AB81116E9")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsGlobalSearch {
    public IVsEnumSearchProviders Providers { get; }
    public abstract virtual IVsGlobalSearchTask CreateSearch(IVsSearchQuery pSearchQuery, IVsGlobalSearchCallback pSearchCallback, Guid guidCategory);
    public abstract virtual IVsEnumSearchProviders get_Providers();
    public abstract virtual IVsSearchProvider GetProvider(Guid guidCategoryId);
    public abstract virtual bool IsProviderEnabled(Guid guidCategoryId);
    public abstract virtual void SetProviderEnabled(Guid guidCategoryId, bool fEnabled);
    public abstract virtual void RegisterProvider(IVsSearchProvider pProvider);
    public abstract virtual void UnregisterProvider(Guid guidCategoryId);
    public abstract virtual IVsUIDataSource GetProviderSettings(Guid guidCategoryId);
}
[GuidAttribute("C9AF73D3-767D-44C8-BFD9-B4F95AFE215F")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsGlobalSearchCallback {
    public abstract virtual void ReportProgress(IVsSearchTask pTask, UInt32 dwProgress, UInt32 dwMaxProgress);
    public abstract virtual void ReportComplete(IVsSearchTask pTask, UInt32 dwResultsFound);
    public abstract virtual void ResultReported(IVsGlobalSearchTask pTask, IVsSearchProvider pProvider, IVsSearchItemResult pItemResult);
    public abstract virtual void ResultsReported(IVsGlobalSearchTask pTask, IVsSearchProvider pProvider, UInt32 dwResults, IVsSearchItemResult[] pSearchItemResults);
    public abstract virtual void ProgressReported(IVsGlobalSearchTask pTask, IVsSearchProvider pProvider, UInt32 dwProgress, UInt32 dwMaxProgress);
    public abstract virtual void ProviderSearchStarted(IVsGlobalSearchTask pTask, IVsSearchProvider pProvider, IVsSearchTask pProviderTask);
    public abstract virtual void ProviderSearchCompleted(IVsGlobalSearchTask pTask, IVsSearchProvider pProvider, IVsSearchTask pProviderTask);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("88FA9F00-B004-4949-83AD-968B419B6CED")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsGlobalSearchTask {
    [ComAliasNameAttribute("VsShell.VSCOOKIE")]
public UInt32 Id { get; }
    public IVsSearchQuery SearchQuery { get; }
    [ComAliasNameAttribute("Microsoft.VisualStudio.Shell.Interop.VSSEARCHTASKSTATUS")]
public UInt32 Status { get; }
    public int ErrorCode { get; }
    public IVsEnumSearchProviders Providers { get; }
    public abstract virtual void Start();
    public abstract virtual void Stop();
    public abstract virtual UInt32 get_Id();
    public abstract virtual IVsSearchQuery get_SearchQuery();
    public abstract virtual UInt32 get_Status();
    public abstract virtual int get_ErrorCode();
    public abstract virtual IVsEnumSearchProviders get_Providers();
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("8ED03960-F01B-4A63-A492-7E55AE118D3D")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsGlobalSearchUI {
    public bool IsEnabled { get; public set; }
    public bool PreserveResults { get; public set; }
    public IVsWindowSearchHost SearchHost { get; }
    public int ActiveResultsCategory { get; public set; }
    public bool IsResultsListVisible { get; public set; }
    public bool IsActive { get; }
    public abstract virtual void set_IsEnabled(bool value);
    public abstract virtual bool get_IsEnabled();
    public abstract virtual void set_PreserveResults(bool value);
    public abstract virtual bool get_PreserveResults();
    public abstract virtual IVsWindowSearchHost get_SearchHost();
    public abstract virtual UInt32 GetResultsCategories(UInt32 dwMaxCategories, IVsGlobalSearchUIResultsCategory[] rgpResultsCategories);
    public abstract virtual int get_ActiveResultsCategory();
    public abstract virtual void set_ActiveResultsCategory(int value);
    public abstract virtual bool get_IsResultsListVisible();
    public abstract virtual void set_IsResultsListVisible(bool value);
    public abstract virtual bool get_IsActive();
    public abstract virtual void Activate();
    public abstract virtual void ActivateBack();
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("6B8DC5B9-04CC-49A6-8011-1FF2A6749B2A")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsGlobalSearchUIResultsCategory {
    public string DisplayText { get; }
    public IVsSearchProvider CategoryProvider { get; }
    [ComAliasNameAttribute("OLE.DWORD")]
public UInt32 TotalResultsCount { get; }
    [ComAliasNameAttribute("OLE.DWORD")]
public UInt32 DisplayedResultsCount { get; }
    public bool IsDisplayingAllResults { get; }
    public abstract virtual string get_DisplayText();
    public abstract virtual IVsSearchProvider get_CategoryProvider();
    public abstract virtual UInt32 get_TotalResultsCount();
    public abstract virtual UInt32 get_DisplayedResultsCount();
    public abstract virtual IVsSearchItemResult GetResult(UInt32 dwIndex);
    public abstract virtual void DisplayAllResults();
    public abstract virtual bool get_IsDisplayingAllResults();
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("FD3F680A-D5C1-437A-8A21-8084310BF037")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsGradient {
    public abstract virtual int DrawGradient(IntPtr hwnd, IntPtr hdc, RECT[] gradientRect, RECT[] sliceRect);
    public abstract virtual int GetGradientVector(int cVector, UInt32[] rgVector);
}
[GuidAttribute("ADB942C5-1637-4D76-8635-7A9376F20699")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsHandleInComingCallDynamicInProc {
    public abstract virtual int AllowIncomingCall(UInt32 dwCallType, IntPtr htaskCaller, UInt32 dwTickCount, Guid& iid, ushort wMethod, Boolean& pfAllow);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("D82269C8-C3DB-4BD9-AF32-AB140BCFDAE3")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsHasRelatedSaveItems {
    public abstract virtual int GetRelatedSaveTreeItems(VSSAVETREEITEM saveItem, UInt32 celt, VSSAVETREEITEM[] rgSaveTreeItems, UInt32& pcActual);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("0A56FB1E-1B2F-4699-8178-63B98E816F35")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsHelpAttributeList {
    public abstract virtual int GetAttributeName(String& bstrName);
    public abstract virtual int GetCount(Int32& pCount);
    public abstract virtual int UpdateAttributeStatus(Int32& afActive);
    public abstract virtual int GetAttributeStatusVal(string bstrValue, ATTRVALUETYPE type, Int32& pfActive);
    public abstract virtual int GetAttributeStatusIndex(int index, Int32& pfActive);
    public abstract virtual int GetAttributeValue(int index, ATTRVALUETYPE type, String& pbstrValue);
}
[GuidAttribute("A0B29E84-6CFD-490D-9A17-B0BF64D58C55")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsHelpProvider {
    public abstract virtual int DisplayTopic(Array Keywords, Array Attributes);
}
[GuidAttribute("854D7AC0-BC3D-11D0-B421-00A0C90F9DC4")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsHelpSystem {
    public abstract virtual int KeywordSearch(string pszKeyword, IntPtr dwFlags, IntPtr dwReserved);
    public abstract virtual int ALinkSearch(string pszALink, IntPtr dwFlags, IntPtr dwReserved);
    public abstract virtual int KeywordSearchDlg(string pszKeyword, IntPtr dwFlags, IntPtr dwReserved);
    public abstract virtual int FullTextSearchDlg(string pszQuery, IntPtr dwFlags, IntPtr dwReserved);
    public abstract virtual int GetCurrentURL(String& ppszURL);
    public abstract virtual int DisplayTopicFromURL(string pszURL, IntPtr Command);
    public abstract virtual int DisplayTopicFromIdentifier(string pszFile, IntPtr Id, IntPtr Command);
    public abstract virtual int ActivateHelpSystem(IntPtr dwFlags);
    public abstract virtual int Reserved(VHS_COMMAND Command, VsHelpErrors error);
}
[InterfaceTypeAttribute("1")]
[ComConversionLossAttribute]
[GuidAttribute("59B2D1D0-5DB0-4F9F-9609-13F0168516D6")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsHierarchy {
    public abstract virtual int SetSite(IServiceProvider psp);
    public abstract virtual int GetSite(IServiceProvider& ppSP);
    public abstract virtual int QueryClose(Int32& pfCanClose);
    public abstract virtual int Close();
    public abstract virtual int GetGuidProperty(UInt32 itemid, int propid, Guid& pguid);
    public abstract virtual int SetGuidProperty(UInt32 itemid, int propid, Guid& rguid);
    public abstract virtual int GetProperty(UInt32 itemid, int propid, Object& pvar);
    public abstract virtual int SetProperty(UInt32 itemid, int propid, object var);
    public abstract virtual int GetNestedHierarchy(UInt32 itemid, Guid& iidHierarchyNested, IntPtr& ppHierarchyNested, UInt32& pitemidNested);
    public abstract virtual int GetCanonicalName(UInt32 itemid, String& pbstrName);
    public abstract virtual int ParseCanonicalName(string pszName, UInt32& pitemid);
    public abstract virtual int Unused0();
    public abstract virtual int AdviseHierarchyEvents(IVsHierarchyEvents pEventSink, UInt32& pdwCookie);
    public abstract virtual int UnadviseHierarchyEvents(UInt32 dwCookie);
    public abstract virtual int Unused1();
    public abstract virtual int Unused2();
    public abstract virtual int Unused3();
    public abstract virtual int Unused4();
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("41E82A90-2488-4595-9661-396A1C54B72E")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsHierarchy2 {
    public abstract virtual void GetGuidProperties(UInt32 itemid, int count, Int32[] propids, Guid[] rgGuids, Int32[] results);
    public abstract virtual void GetProperties(UInt32 itemid, int count, Int32[] propids, Object[] vars, Int32[] results);
}
[GuidAttribute("320E51F6-D238-4BD0-BA89-CCA91DBCF411")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsHierarchyDeleteHandler {
    public abstract virtual int QueryDeleteItem(UInt32 dwDelItemOp, UInt32 itemid, Int32& pfCanDelete);
    public abstract virtual int DeleteItem(UInt32 dwDelItemOp, UInt32 itemid);
}
[GuidAttribute("78FD1CBD-387B-4262-BD7B-65C34F86356E")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsHierarchyDeleteHandler2 {
    public abstract virtual int ShowSpecificDeleteRemoveMessage(UInt32 dwDelItemOps, UInt32 cDelItems, UInt32[] rgDelItems, Int32& pfShowStandardMessage, UInt32& pdwDelItemOp);
    public abstract virtual int ShowMultiSelDeleteOrRemoveMessage(UInt32 dwDelItemOp, UInt32 cDelItems, UInt32[] rgDelItems, Int32& pfCancelOperation);
}
[GuidAttribute("3CCB143A-FB8D-455C-8413-9E051B98E557")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsHierarchyDeleteHandler3 {
    public abstract virtual int QueryDeleteItems(UInt32 cItems, UInt32 dwDelItemOp, UInt32[] itemid, Boolean[] pfCanDelete);
    public abstract virtual int DeleteItems(UInt32 cItems, UInt32 dwDelItemOp, UInt32[] itemid, UInt32 dwFlags);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("EDF56D0F-44E4-4E24-ABC1-3851B568EF26")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsHierarchyDirectionalDropDataTarget {
    public abstract virtual int GetSupportedAreas(UInt32 itemid, UInt32& pSupportedAreas);
    public abstract virtual int DragEnterArea(IDataObject pDataObject, UInt32 grfKeyState, UInt32 itemid, UInt32 area, UInt32& pdwEffect);
    public abstract virtual int DragOverArea(UInt32 grfKeyState, UInt32 itemid, UInt32 area, UInt32& pdwEffect);
    public abstract virtual int DragLeaveArea();
    public abstract virtual int DropArea(IDataObject pDataObject, UInt32 grfKeyState, UInt32 itemid, UInt32 area, UInt32& pdwEffect);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("AC7D8BE5-B7F5-400B-B02C-35207672F56B")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsHierarchyDropDataSource {
    public abstract virtual int GetDropInfo(UInt32& pdwOKEffects, IDataObject& ppDataObject, IDropSource& ppDropSource);
    public abstract virtual int OnDropNotify(int fDropped, UInt32 dwEffects);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("D84D04B8-8E0D-4298-AD9C-27F8C0D5484A")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsHierarchyDropDataSource2 {
    public abstract virtual int GetDropInfo(UInt32& pdwOKEffects, IDataObject& ppDataObject, IDropSource& ppDropSource);
    public abstract virtual int OnDropNotify(int fDropped, UInt32 dwEffects);
    public abstract virtual int OnBeforeDropNotify(IDataObject pDataObject, UInt32 dwEffect, Int32& pfCancelDrop);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("5AA5B118-B3D4-40C5-8739-231CE192850C")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsHierarchyDropDataTarget {
    public abstract virtual int DragEnter(IDataObject pDataObject, UInt32 grfKeyState, UInt32 itemid, UInt32& pdwEffect);
    public abstract virtual int DragOver(UInt32 grfKeyState, UInt32 itemid, UInt32& pdwEffect);
    public abstract virtual int DragLeave();
    public abstract virtual int Drop(IDataObject pDataObject, UInt32 grfKeyState, UInt32 itemid, UInt32& pdwEffect);
}
[GuidAttribute("6DDD8DC3-32B2-4BF1-A1E1-B6DA40526D1E")]
[InterfaceTypeAttribute("1")]
[ComConversionLossAttribute]
public interface Microsoft.VisualStudio.Shell.Interop.IVsHierarchyEvents {
    public abstract virtual int OnItemAdded(UInt32 itemidParent, UInt32 itemidSiblingPrev, UInt32 itemidAdded);
    public abstract virtual int OnItemsAppended(UInt32 itemidParent);
    public abstract virtual int OnItemDeleted(UInt32 itemid);
    public abstract virtual int OnPropertyChanged(UInt32 itemid, int propid, UInt32 flags);
    public abstract virtual int OnInvalidateItems(UInt32 itemidParent);
    public abstract virtual int OnInvalidateIcon(IntPtr hicon);
}
[GuidAttribute("0D707B06-F2E8-4556-A98A-D015B67AE3EF")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsHierarchyEvents2 {
    public abstract virtual int OnItemAdded(UInt32 itemidParent, UInt32 itemidSiblingPrev, UInt32 itemidAdded, bool ensureVisible);
}
[GuidAttribute("F3581DB8-1DCE-4267-8145-B6906AC4D028")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsHierarchyManipulation {
    public abstract virtual IVsHierarchyManipulationStateContext SetManipulationState(UInt32 state);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("E9274A0A-CC2F-4ECB-9FD0-F7BB59C7A47F")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsHierarchyManipulationStateContext {
    public abstract virtual void Restore();
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("FE5FEE31-C302-4961-876F-F3C8F853E4F8")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsHierarchyRefactorNotify {
    public abstract virtual int OnBeforeGlobalSymbolRenamed(UInt32 cItemsAffected, UInt32[] rgItemsAffected, UInt32 cRQNames, String[] rglpszRQName, string lpszNewName, int promptContinueOnFail);
    public abstract virtual int OnGlobalSymbolRenamed(UInt32 cItemsAffected, UInt32[] rgItemsAffected, UInt32 cRQNames, String[] rglpszRQName, string lpszNewName);
    public abstract virtual int OnBeforeReorderParams(UInt32 itemid, string lpszRQName, UInt32 cParamIndexes, UInt32[] rgParamIndexes, int promptContinueOnFail);
    public abstract virtual int OnReorderParams(UInt32 itemid, string lpszRQName, UInt32 cParamIndexes, UInt32[] rgParamIndexes);
    public abstract virtual int OnBeforeRemoveParams(UInt32 itemid, string lpszRQName, UInt32 cParamIndexes, UInt32[] rgParamIndexes, int promptContinueOnFail);
    public abstract virtual int OnRemoveParams(UInt32 itemid, string lpszRQName, UInt32 cParamIndexes, UInt32[] rgParamIndexes);
    public abstract virtual int OnBeforeAddParams(UInt32 itemid, string lpszRQName, UInt32 cParams, UInt32[] rgszParamIndexes, String[] rgszRQTypeNames, String[] rgszParamNames, int promptContinueOnFail);
    public abstract virtual int OnAddParams(UInt32 itemid, string lpszRQName, UInt32 cParams, UInt32[] rgszParamIndexes, String[] rgszRQTypeNames, String[] rgszParamNames);
}
[GuidAttribute("218D0424-9C53-4EA1-A679-A0AED59B0E4F")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsHTMLConverter {
    public abstract virtual int get_DefaultURLEncodingCodePage(UInt32& pulCodePage);
    public abstract virtual int ConvertToEntities(string szToConvert, UInt32 cchBuffSize, UInt16[] szBuffer, UInt32& pcchBuffSizeActual);
    public abstract virtual int ConvertFromEntities(string szToConvert, UInt32 cchBuffSize, UInt16[] szBuffer, UInt32& pcchBuffSizeActual);
    public abstract virtual int ConvertToURLEncoding(UInt32 uCodePage, string szToConvert, UInt32 cchBuffSize, UInt16[] szBuffer, UInt32& pcchBuffSizeActual);
    public abstract virtual int ConvertFromURLEncoding(UInt32 uCodePage, string szToConvert, UInt32 cchBuffSize, UInt16[] szBuffer, UInt32& pcchBuffSizeActual);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("61DF9CCE-E88E-4FE2-9976-77A4F478E24B")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsImageButton {
    public abstract virtual int Draw(VSDRAWITEMSTRUCT[] pDrawItemStruct, int fHot);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("8660A8EB-6C2E-45C7-920A-73A45EF4DE8E")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsImageMonikerImageList {
    [DispIdAttribute("1610678272")]
public int ImageCount { get; }
    public abstract virtual int get_ImageCount();
    public abstract virtual void GetImageMonikers(int firstImageIndex, int imageMonikerCount, ImageMoniker[] imageMonikers);
}
[GuidAttribute("05BCD36E-0C17-4AB6-95AC-70AEFA2991EE")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsImageMonikerSource {
    [ComAliasNameAttribute("ImageParameters140.ImageMoniker")]
[DispIdAttribute("1610678272")]
public ImageMoniker ImageMoniker { get; }
    public abstract virtual ImageMoniker get_ImageMoniker();
}
[GuidAttribute("59A26C3B-4E73-4E57-B1C2-F8A44BCA3CA1")]
[InterfaceTypeAttribute("1")]
[ObsoleteAttribute("Use IVsImageService2 instead")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsImageService {
    [ObsoleteAttribute("Use IVsImageService2.AddCustomImage to add an image.  If you need to add a name for the custom image, use IVsImageService2.TryAssociateNameWithMoniker.")]
public abstract virtual void Add(string Name, IVsUIObject pIconObject);
    [ObsoleteAttribute("Use IVsImageService2.GetImage instead")]
public abstract virtual IVsUIObject Get(string Name);
    [ObsoleteAttribute("Use IVsImageService2.GetImageMonikerForFile instead")]
public abstract virtual IVsUIObject GetIconForFile(string filename, __VSUIDATAFORMAT desiredFormat);
    [ObsoleteAttribute("Use IVsImageService2.GetImageMonikerForFile instead")]
public abstract virtual IVsUIObject GetIconForFileEx(string filename, __VSUIDATAFORMAT desiredFormat, UInt32& iconSource);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("676CE47B-7375-4D53-B0BC-EF9322A2AE62")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsImageService2 {
    [ObsoleteAttribute("Use IVsImageService2.AddCustomImage to add an image.  If you need to add a name for the custom image, use IVsImageService2.TryAssociateNameWithMoniker.")]
public abstract virtual void Add(string Name, IVsUIObject pIconObject);
    [ObsoleteAttribute("Use IVsImageService2.GetImage instead")]
public abstract virtual IVsUIObject Get(string Name);
    [ObsoleteAttribute("Use IVsImageService2.GetImageMonikerForFile instead")]
public abstract virtual IVsUIObject GetIconForFile(string filename, __VSUIDATAFORMAT desiredFormat);
    [ObsoleteAttribute("Use IVsImageService2.GetImageMonikerForFile instead")]
public abstract virtual IVsUIObject GetIconForFileEx(string filename, __VSUIDATAFORMAT desiredFormat, UInt32& iconSource);
    public abstract virtual IVsUIObject GetImage(ImageMoniker moniker, ImageAttributes attributes);
    public abstract virtual ImageMoniker GetImageMonikerForFile(string filename);
    public abstract virtual ImageMoniker GetImageMonikerForHierarchyItem(IVsHierarchy hierarchy, UInt32 hierarchyItemID, int hierarchyImageAspect);
    public abstract virtual ImageMoniker GetImageMonikerForName(string imageName);
    public abstract virtual IImageHandle AddCustomImage(IVsUIObject imageObject);
    public abstract virtual void RemoveCustomImage(IImageHandle handle);
    public abstract virtual IImageHandle AddCustomImageList(IVsImageMonikerImageList imageList);
    public abstract virtual void RemoveCustomImageList(IImageHandle handle);
    public abstract virtual IImageHandle AddCustomCompositeImage(int virtualWidth, int virtualHeight, int layerCount, ImageCompositionLayer[] layers);
    public abstract virtual bool ThemeDIBits(int pixelCount, Byte[] pixels, int width, int height, bool isTopDownBitmap, UInt32 backgroundColor);
    public abstract virtual bool TryAssociateNameWithMoniker(string imageName, ImageMoniker moniker);
    public abstract virtual bool TryParseImageMoniker(string monikerAsString, ImageMoniker& moniker);
    public abstract virtual IVsImageMonikerImageList CreateMonikerImageListFromHIMAGELIST(IntPtr hImageList);
    public abstract virtual UInt32 GetImageMonikerType(ImageMoniker moniker);
    public abstract virtual IVsImageMonikerImageList GetImageListImageMonikers(ImageMoniker moniker);
}
[GuidAttribute("DC7EDE19-3DD1-4E20-A7F1-110883ED996F")]
[ComConversionLossAttribute]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsIME {
    public abstract virtual int IsActive(IntPtr hwnd, Int32& pfRetVal);
    public abstract virtual int Activate(IntPtr hwnd, VSIME_ERR[] perr);
    public abstract virtual int Deactivate(IntPtr hwnd, VSIME_ERR[] perr);
    public abstract virtual int FDeactivate(IntPtr hwnd, int fDisable, VSIME_ERR[] perr);
    public abstract virtual int SetFont(IntPtr hwnd, IntPtr hf, VSIME_ERR[] perr);
    public abstract virtual int SetCurPos(IntPtr hwnd, int x, int y, VSIME_ERR[] perr);
    public abstract virtual int SetDefCurPos(IntPtr hwnd, VSIME_ERR[] perr);
    public abstract virtual int AttachContext(IntPtr hwnd, int fAttach, VSIME_ERR[] perr);
    public abstract virtual int GetImmContext(IntPtr hwnd, UInt32& phimc);
    public abstract virtual int ReleaseImmContext(IntPtr hwnd, UInt32 HIMC, Int32& pfRetVal);
    public abstract virtual int GetImmCompositionString(UInt32 HIMC, UInt32 dwIndex, String& pbstrCompString, Int32& plRetVal);
    public abstract virtual int SetImmCompositionString(UInt32 HIMC, UInt32 dwIndex, string bstrCompString, string bstrReadString, Int32& pfRetVal);
    public abstract virtual int SetImmCandidateWindow(UInt32 HIMC, CANDIDATEFORM[] lpcf, Int32& pfRetVal);
    public abstract virtual int Notify(UInt32 HIMC, UInt32 dwAction, UInt32 dwIndex, UInt32 dwValue, Int32& pfRetVal);
    public abstract virtual int Escape(IntPtr hkl, UInt32 HIMC, UInt32 uEsc, string bstrData, Int32& plRetVal);
    public abstract virtual int GetDefaultWindow(IntPtr hwnd, IntPtr& phRetVal);
    public abstract virtual int GetImmCompositionStringW(UInt32 HIMC, UInt32 dwIndex, String& pbstrCompString, Int32& plRetVal);
}
[GuidAttribute("B8257FE8-9FF5-4F59-A613-02405B32A82A")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsInfoBar {
    [ComAliasNameAttribute("ImageParameters140.ImageMoniker")]
[DispIdAttribute("1610678272")]
public ImageMoniker Image { get; }
    [DispIdAttribute("1610678273")]
public bool IsCloseButtonVisible { get; }
    [DispIdAttribute("1610678274")]
public IVsInfoBarTextSpanCollection TextSpans { get; }
    [DispIdAttribute("1610678275")]
public IVsInfoBarActionItemCollection ActionItems { get; }
    public abstract virtual ImageMoniker get_Image();
    public abstract virtual bool get_IsCloseButtonVisible();
    public abstract virtual IVsInfoBarTextSpanCollection get_TextSpans();
    public abstract virtual IVsInfoBarActionItemCollection get_ActionItems();
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("25482DB2-7BBA-49DF-841B-55A01D067679")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsInfoBarActionItem {
    [DispIdAttribute("1610678272")]
public string Text { get; }
    [DispIdAttribute("1610678273")]
public bool Bold { get; }
    [DispIdAttribute("1610678274")]
public bool Italic { get; }
    [DispIdAttribute("1610678275")]
public bool Underline { get; }
    [DispIdAttribute("1610743808")]
public object ActionContext { get; }
    [DispIdAttribute("1610743809")]
public bool IsButton { get; }
    public abstract virtual string get_Text();
    public abstract virtual bool get_Bold();
    public abstract virtual bool get_Italic();
    public abstract virtual bool get_Underline();
    public abstract virtual object get_ActionContext();
    public abstract virtual bool get_IsButton();
}
[GuidAttribute("A0E65F0E-DAEB-48B3-AA63-C274605B3EED")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsInfoBarActionItemCollection {
    [DispIdAttribute("1610678272")]
public int Count { get; }
    public abstract virtual int get_Count();
    public abstract virtual IVsInfoBarActionItem GetItem(int index);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("5580AE4B-C849-41F8-BC4C-FA7D8207F293")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsInfoBarHost {
    public abstract virtual void AddInfoBar(IVsUIElement uiElement);
    public abstract virtual void RemoveInfoBar(IVsUIElement uiElement);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("A513499A-A1D0-4C21-BDEE-16761BAFD930")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsInfoBarTextSpan {
    [DispIdAttribute("1610678272")]
public string Text { get; }
    [DispIdAttribute("1610678273")]
public bool Bold { get; }
    [DispIdAttribute("1610678274")]
public bool Italic { get; }
    [DispIdAttribute("1610678275")]
public bool Underline { get; }
    public abstract virtual string get_Text();
    public abstract virtual bool get_Bold();
    public abstract virtual bool get_Italic();
    public abstract virtual bool get_Underline();
}
[GuidAttribute("186DD013-096E-4134-8DC2-A0861607DA50")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsInfoBarTextSpanCollection {
    [DispIdAttribute("1610678272")]
public int Count { get; }
    public abstract virtual int get_Count();
    public abstract virtual IVsInfoBarTextSpan GetSpan(int index);
}
[GuidAttribute("369C66D9-2A2B-49CF-9E17-83A1679475B6")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsInfoBarUIElement {
    public abstract virtual int get_DataSource(IVsUISimpleDataSource& ppDataSource);
    public abstract virtual int put_DataSource(IVsUISimpleDataSource pDataSource);
    public abstract virtual int TranslateAccelerator(IVsUIAccelerator pAccel);
    public abstract virtual int GetUIObject(Object& ppUnk);
    public abstract virtual int Close();
    public abstract virtual int Advise(IVsInfoBarUIEvents eventSink, UInt32& cookie);
    public abstract virtual int Unadvise(UInt32 cookie);
}
[GuidAttribute("C115D9E6-DB96-42B1-AE1A-71A5E3835D53")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsInfoBarUIEvents {
    public abstract virtual void OnClosed(IVsInfoBarUIElement infoBarUIElement);
    public abstract virtual void OnActionItemClicked(IVsInfoBarUIElement infoBarUIElement, IVsInfoBarActionItem actionItem);
}
[GuidAttribute("15C4AB06-6C7C-4ECB-85AB-FBC32801DA39")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsInfoBarUIFactory {
    public abstract virtual IVsInfoBarUIElement CreateInfoBar(IVsInfoBar infoBar);
}
[GuidAttribute("098FCA58-5F42-11D3-8BDC-00C04F8EC28C")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsInstalledProduct {
    public abstract virtual int IdBmpSplash(UInt32& pIdBmp);
    public abstract virtual int OfficialName(String& pbstrName);
    public abstract virtual int ProductID(String& pbstrPID);
    public abstract virtual int ProductDetails(String& pbstrProductDetails);
    public abstract virtual int IdIcoLogoForAboutbox(UInt32& pIdIco);
}
[InterfaceTypeAttribute("1")]
[ComConversionLossAttribute]
[GuidAttribute("35A96FFB-7ED0-4D76-93CE-49BE83A9C91E")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsIntelliMouseHandler {
    public abstract virtual int IsMouseWheelRotationMessage(UInt32 msg);
    public abstract virtual int HandleWheelRotation(IntPtr hwnd, IntPtr wp, UInt32 dwStyle);
    public abstract virtual int HandleWheelButtonDown(IntPtr hwnd, UInt32 dwStyle);
    public abstract virtual int MouseWheelPresent();
    public abstract virtual int SetMouseCursor_(POINT ptOrg, POINT ptNew, UInt32 idCurOrg, UInt32 uNeutralRadius);
    public abstract virtual int LoadBitmap_(IntPtr hwnd, UInt32 idbmp, UInt32 idcur, POINT ptOrg, UInt32& lpPanBitmap);
    public abstract virtual int DrawBitmap_(UInt32& lpPanBitmap, int fErase);
    public abstract virtual int GetMouseWheelMsg_(UInt32& uMsg);
    public abstract virtual int DeleteBitmap_(UInt32& lpPanBitmap);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("4371079A-47C3-4B7A-93AE-BFB90FEDB8F0")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsIntellisenseEngine {
    public abstract virtual int Load();
    public abstract virtual int Unload();
    public abstract virtual int SupportsLoad();
}
[GuidAttribute("3B83B579-4969-4E12-A964-11EC19CC1503")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsIntellisenseProject {
    public abstract virtual int Init(IVsIntellisenseProjectHost pHost);
    public abstract virtual int Close();
    public abstract virtual int AddFile(string bstrAbsPath, UInt32 itemid);
    public abstract virtual int RemoveFile(string bstrAbsPath, UInt32 itemid);
    public abstract virtual int RenameFile(string bstrAbsPath, string bstrNewAbsPath, UInt32 itemid);
    public abstract virtual int IsCompilableFile(string bstrFileName);
    public abstract virtual int GetContainedLanguageFactory(IVsContainedLanguageFactory& ppContainedLanguageFactory);
    public abstract virtual int GetCompilerReference(Object& ppCompilerReference);
    public abstract virtual int GetFileCodeModel(object pProj, object pProjectItem, Object& ppCodeModel);
    public abstract virtual int GetProjectCodeModel(object pProj, Object& ppCodeModel);
    public abstract virtual int RefreshCompilerOptions();
    public abstract virtual int GetCodeDomProviderName(String& pbstrProvider);
    public abstract virtual int IsWebFileRequiredByProject(Int32& pbReq);
    public abstract virtual int AddAssemblyReference(string bstrAbsPath);
    public abstract virtual int RemoveAssemblyReference(string bstrAbsPath);
    public abstract virtual int AddP2PReference(object pUnk);
    public abstract virtual int RemoveP2PReference(object pUnk);
    public abstract virtual int StopIntellisenseEngine();
    public abstract virtual int StartIntellisenseEngine();
    public abstract virtual int IsSupportedP2PReference(object pUnk);
    public abstract virtual int WaitForIntellisenseReady();
    public abstract virtual int GetExternalErrorReporter(IVsReportExternalErrors& ppErrorReporter);
    public abstract virtual int SuspendPostedNotifications();
    public abstract virtual int ResumePostedNotifications();
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("DFB5C0C2-817E-4A19-8C6D-E387FD68B50B")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsIntellisenseProjectEventSink {
    public abstract virtual int OnStatusChange(UInt32 dwStatus);
    public abstract virtual int OnReferenceChange(UInt32 dwChangeType, string pszAssemblyPath);
    public abstract virtual int OnConfigChange();
    public abstract virtual int OnCodeFileChange(string pszOldCodeFile, string pszNewCodeFile);
}
[GuidAttribute("6C62F743-D2D3-46B3-BFBC-F04B54EE3F79")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsIntellisenseProjectHost {
    public abstract virtual int GetHostProperty(UInt32 dwPropID, Object& pvar);
    public abstract virtual int GetCompilerOptions(String& pbstrOptions);
    public abstract virtual int GetOutputAssembly(String& pbstrOutputAssembly);
    public abstract virtual int CreateFileCodeModel(string pszFilename, Object& ppCodeModel);
}
[GuidAttribute("B299765F-1FC2-41A7-BEC1-64721D86E658")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsIntellisenseProjectManager {
    public abstract virtual int AdviseIntellisenseProjectEvents(IVsIntellisenseProjectEventSink pSink, UInt32& pdwCookie);
    public abstract virtual int UnadviseIntellisenseProjectEvents(UInt32 dwCookie);
    public abstract virtual int GetContainedLanguageFactory(string bstrLanguage, IVsContainedLanguageFactory& ppContainedLanguageFactory);
    public abstract virtual int CloseIntellisenseProject();
    public abstract virtual int OnEditorReady();
    public abstract virtual int CompleteIntellisenseProjectLoad();
}
[GuidAttribute("0A026971-5A0E-45C9-9479-E62AB18B7DE6")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsInvalidateCachedCommandState {
    public abstract virtual void InvalidateCommandUIState();
    public abstract virtual void InvalidateSpecificCommandUIState(VSCommandId command);
}
[GuidAttribute("2EC892AF-9642-417F-B452-8AA1ACBFBA99")]
[ComConversionLossAttribute]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsInvisibleEditor {
    public abstract virtual int GetDocData(int fEnsureWritable, Guid& riid, IntPtr& ppDocData);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("14439CDE-B6CF-4DD6-9615-67E8B3DF380D")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsInvisibleEditorManager {
    public abstract virtual int RegisterInvisibleEditor(string pszMkDocument, IVsProject pProject, UInt32 dwFlags, IVsSimpleDocFactory pFactory, IVsInvisibleEditor& ppEditor);
}
[GuidAttribute("C6CF64F7-8863-4E50-9DF1-892AA83D70D7")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsItemTypeResolutionService {
    public abstract virtual int SetSite(object punkVsItemTypeResolutionSite);
    public abstract virtual int InitializeReferences(object punkCompilerParameters);
    public abstract virtual int ReferenceAdded(string pszReference);
    public abstract virtual int ReferenceRemoved(string pszReference);
    public abstract virtual int ReferenceChanged(string pszReference);
    public abstract virtual int Reset();
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("45ABED49-8D6E-47B8-A0D6-C9F2405817C6")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsItemTypeResolutionSite {
    public abstract virtual int AddReference(string bstrReferencePath);
    public abstract virtual int WaitForReferencesReady();
    public abstract virtual int IsCodeDirectoryAssembly(string bstrAssembly, Int32& pfIsCodeAssembly);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("8C444EF9-5863-4AB1-A1D0-55CC60AC253A")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsLanguageInfoPackage {
    public abstract virtual int GetLanguagePropertyPage(Guid& rguidPage, Guid& guidLang, VSPROPSHEETPAGE[] ppage);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("A7C1346C-6FD6-4AD5-A6FA-AE732AA42040")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsLanguageServiceBuildErrorReporter {
    public abstract virtual int ReportError(string bstrErrorMessage, string bstrErrorId, VSTASKPRIORITY nPriority, int iLine, int iColumn, string bstrFileName);
    public abstract virtual int ClearErrors();
}
[GuidAttribute("832AACF8-0848-4F87-B037-EDE1B9F11C90")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsLanguageServiceBuildErrorReporter2 {
    public abstract virtual int ReportError(string bstrErrorMessage, string bstrErrorId, VSTASKPRIORITY nPriority, int iLine, int iColumn, string bstrFileName);
    public abstract virtual int ClearErrors();
    public abstract virtual void ReportError2(string bstrErrorMessage, string bstrErrorId, VSTASKPRIORITY nPriority, int iStartLine, int iStartColumn, int iEndLine, int iEndColumn, string bstrFileName);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("EF16A8B0-41CF-11D1-84A4-00A0C9110055")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsLaunchPad {
    public abstract virtual int ExecCommand(string pszApplicationName, string pszCommandLine, string pszWorkingDir, UInt32 lpf, IVsOutputWindowPane pOutputWindowPane, UInt32 nTaskItemCategory, UInt32 nTaskItemBitmap, string pszTaskListSubcategory, IVsLaunchPadEvents pVsLaunchPadEvents, UInt32& pdwProcessExitCode, String[] pbstrOutput);
    public abstract virtual int ExecBatchScript(string pszBatchFileContents, string pszWorkingDir, UInt32 lpf, IVsOutputWindowPane pOutputWindowPane, UInt32 nTaskItemCategory, UInt32 nTaskItemBitmap, string pszTaskListSubcategory, IVsLaunchPadEvents pVsLaunchPadEvents, String[] pbstrOutput);
    public abstract virtual int ParseOutputStringForTaskItem(string pszOutputString, UInt32[] pnPriority, String[] pbstrFilename, UInt32[] pnLineNum, String[] pbstrTaskItemText, Int32[] pfTaskItemFound);
}
[GuidAttribute("0DBD685A-0A10-4E25-B88E-02E58E60785E")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsLaunchPad2 {
    public abstract virtual int ExecCommandEx(string pszApplicationName, string pszCommandLine, string pszWorkingDir, UInt32 lpf, IVsOutputWindowPane pOutputWindowPane, UInt32 nTaskItemCategory, UInt32 nTaskItemBitmap, string pszTaskListSubcategory, IVsLaunchPadEvents pVsLaunchPadEvents, IVsLaunchPadOutputParser pOutputParser, UInt32[] pdwProcessExitCode, String[] pbstrOutput);
}
[GuidAttribute("96A8C871-BD60-47CD-BCBA-D4455806C54F")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsLaunchPad3 {
    public abstract virtual int ExecCommandWithElevationIfRequired(string pszApplicationName, string pszCommandLine, string pszWorkingDir);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("70A675A3-71B7-462B-B7FF-02C6956F2715")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsLaunchPad4 {
    public abstract virtual UInt32 ExecCommandWithElevation(string pszApplicationName, string pszCommandLine, string pszWorkingDir);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("65BC5C20-41D1-11D1-84A4-00A0C9110055")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsLaunchPadEvents {
    public abstract virtual int Tick(Int32& pfCancel);
}
[GuidAttribute("C21C16A2-1612-4995-B445-F7B1C1657878")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsLaunchPadFactory {
    public abstract virtual int CreateLaunchPad(IVsLaunchPad& ppLaunchPad);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("A9832932-5F3B-487D-A80D-95115EADDAC3")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsLaunchPadOutputParser {
    public abstract virtual int ParseOutputStringForInfo(string pszOutputString, String[] pbstrFilename, UInt32[] pnLineNum, UInt32[] pnPriority, String[] pbstrTaskItemText, String[] pbstrHelpKeyword);
}
[GuidAttribute("E86128E4-3B1B-4BE9-BEB6-D30E5BF40850")]
[ComConversionLossAttribute]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsLibrary {
    public abstract virtual int GetSupportedCategoryFields(LIB_CATEGORY Category, UInt32& pCatField);
    public abstract virtual int GetList(UInt32 ListType, UInt32 flags, VSOBSEARCHCRITERIA[] pobSrch, IVsObjectList& pplist);
    public abstract virtual int GetLibList(LIB_PERSISTTYPE lptType, IVsLiteTreeList& pplist);
    public abstract virtual int GetLibFlags(UInt32& pfFlags);
    public abstract virtual int UpdateCounter(UInt32& pCurUpdate);
    public abstract virtual int GetGuid(Guid& ppguidLib);
    public abstract virtual int GetSeparatorString(String[] pszSeparator);
    public abstract virtual int LoadState(IStream pIStream, LIB_PERSISTTYPE lptType);
    public abstract virtual int SaveState(IStream pIStream, LIB_PERSISTTYPE lptType);
    public abstract virtual int GetBrowseContainersForHierarchy(IVsHierarchy pHierarchy, UInt32 celt, VSBROWSECONTAINER[] rgBrowseContainers, UInt32[] pcActual);
    public abstract virtual int AddBrowseContainer(VSCOMPONENTSELECTORDATA[] pcdComponent, UInt32& pgrfOptions, String& pbstrComponentAdded);
    public abstract virtual int RemoveBrowseContainer(UInt32 dwReserved, string pszLibName);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("EDD9F8A9-3FFE-4C4C-94F8-610B88E19160")]
[ComConversionLossAttribute]
public interface Microsoft.VisualStudio.Shell.Interop.IVsLibrary2 {
    public abstract virtual int GetSupportedCategoryFields2(int Category, UInt32& pgrfCatField);
    public abstract virtual int GetList2(UInt32 ListType, UInt32 flags, VSOBSEARCHCRITERIA2[] pobSrch, IVsObjectList2& ppIVsObjectList2);
    public abstract virtual int GetLibList(LIB_PERSISTTYPE lptType, IVsLiteTreeList& ppList);
    public abstract virtual int GetLibFlags2(UInt32& pgrfFlags);
    public abstract virtual int UpdateCounter(UInt32& pCurUpdate);
    public abstract virtual int GetGuid(IntPtr& ppguidLib);
    public abstract virtual int GetSeparatorString(IntPtr pszSeparator);
    public abstract virtual int LoadState(IStream pIStream, LIB_PERSISTTYPE lptType);
    public abstract virtual int SaveState(IStream pIStream, LIB_PERSISTTYPE lptType);
    public abstract virtual int GetBrowseContainersForHierarchy(IVsHierarchy pHierarchy, UInt32 celt, VSBROWSECONTAINER[] rgBrowseContainers, UInt32[] pcActual);
    public abstract virtual int AddBrowseContainer(VSCOMPONENTSELECTORDATA[] pcdComponent, UInt32& pgrfOptions, String[] pbstrComponentAdded);
    public abstract virtual int RemoveBrowseContainer(UInt32 dwReserved, string pszLibName);
    public abstract virtual int CreateNavInfo(SYMBOL_DESCRIPTION_NODE[] rgSymbolNodes, UInt32 ulcNodes, IVsNavInfo& ppNavInfo);
}
[GuidAttribute("D9C7D24D-7ED2-4A9D-93D1-450426CB27DF")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsLibrary2Ex {
    public abstract virtual int ProfileSettingsChanged();
    public abstract virtual int GetNavInfoContainerData(IVsNavInfo pNavInfo, VSCOMPONENTSELECTORDATA[] pcsdComponent);
    public abstract virtual int DoIdle();
    public abstract virtual int SetContainerAsUnchanging(VSCOMPONENTSELECTORDATA[] pcsdComponent, int fUnchanging);
}
[GuidAttribute("4B78A0FC-CFCF-46CB-9363-C13E55165DE3")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsLibrary3 {
    public abstract virtual void CreateNavInfo2(UInt32 language, SYMBOL_DESCRIPTION_NODE[] rgSymbolNodes, UInt32 ulcNodes, IVsNavInfo2& ppNavInfo);
}
[GuidAttribute("DC1B976F-4DC7-4B3D-9EC7-A0DE9D39BC13")]
[InterfaceTypeAttribute("1")]
[ComConversionLossAttribute]
public interface Microsoft.VisualStudio.Shell.Interop.IVsLibraryMgr {
    public abstract virtual int GetCount(UInt32& pnCount);
    public abstract virtual int GetLibraryAt(UInt32 nLibIndex, IVsLibrary& ppLibrary);
    public abstract virtual int GetNameAt(UInt32 nLibIndex, IntPtr pszName);
    public abstract virtual int ToggleCheckAt(UInt32 nLibIndex);
    public abstract virtual int GetCheckAt(UInt32 nLibIndex, LIB_CHECKSTATE[] pstate);
    public abstract virtual int SetLibraryGroupEnabled(LIB_PERSISTTYPE lpt, int fEnable);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("699D5E17-9B22-466B-ACFA-2E12CD64E249")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsLibraryReferenceManager {
    public abstract virtual int AddComponentReference(string wszPath, object pVsLibrary);
    public abstract virtual int RemoveComponentReference(string wszPath, object pVsLibrary);
    public abstract virtual int IncrementCheckCount(string wszPath, object pVsLibrary);
    public abstract virtual int DecrementCheckCount(string wszPath, object pVsLibrary);
    public abstract virtual int GetListIndex(VSOBJECTINFO[] pObjInfo, IVsObjectList& pplist, UInt32& pIndex);
}
[GuidAttribute("C4158C7D-5052-48D9-8643-7A821BB0F50B")]
[ComConversionLossAttribute]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsLiteTree {
    public abstract virtual int SetRoot(IVsLiteTreeList pList, IVsLiteTree& ppClone);
    public abstract virtual int CloneTreeAbsolute(UInt32 AbsIndex, IVsLiteTree& retVal);
    public abstract virtual int ReAlign(IVsLiteTreeList pNode);
    public abstract virtual int InsertItems(IVsLiteTreeList pNode, UInt32 iAfter, UInt32 Count);
    public abstract virtual int DeleteItems(IVsLiteTreeList pNode, UInt32 iStart, UInt32 Count);
    public abstract virtual int ToggleExpansionAbsolute(UInt32 index, Int32& pfCanRecurse, Int32& pChange);
    public abstract virtual int GetExpandedAbsolute(UInt32 AbsIndex, Int32& pfExpanded);
    public abstract virtual int GetExpandableAbsolute(UInt32 AbsIndex, Int32& pfCanExpand);
    public abstract virtual int GetItemInfoAbsolute(UInt32 AbsIndex, IVsLiteTreeList& pptl, UInt32& pIndex, UInt32& pLevel);
    public abstract virtual int VisibleItemCount(UInt32& pCount);
    public abstract virtual int Refresh();
    public abstract virtual int GetDescendantItemCount(UInt32 AbsIndex, UInt32& pCount);
    public abstract virtual int GetParentIndexAbsolute(UInt32 AbsIndex, UInt32& pParentIndex);
    public abstract virtual int GetExpandedListAbsolute(UInt32 AbsIndex, UInt32& pLevel, IVsLiteTreeList& pptl);
    public abstract virtual int ToggleStateAbsolute(UInt32 AbsIndex, UInt32& ptscr);
    public abstract virtual int AdviseTreeEvents(IVsLiteTreeEvents pEventSink, UInt32& pdwCookie);
    public abstract virtual int UnadviseTreeEvents(UInt32 dwCookie);
    public abstract virtual int EnableTreeEvents(UInt32 dwCookie, int fEnable);
    public abstract virtual int EnumAbsoluteIndices(IVsLiteTreeList pList, UInt32 index, IntPtr& ppvNext, UInt32& pAbsIndex);
    public abstract virtual int GetOffsetFromParent(UInt32 ParentAbsIndex, UInt32 RelIndex, UInt32& pOffset);
    public abstract virtual int EnumOrderedListItems(UInt32& pNextStartIndex, IVsLiteTreeList& pptl, UInt32& pFirstRelIndex, UInt32& pLastRelIndex, UInt32& pLevel);
    public abstract virtual int SetRedraw(int fOn);
    public abstract virtual int DelayRedraw(int fOn);
    public abstract virtual int QueryItemVisible(UInt32 AbsIndex, Int32& pfVisible);
    public abstract virtual int Init(UInt32 grfOpts);
    public abstract virtual int GetInitFlags(UInt32& pgrfOpts);
}
[GuidAttribute("87066898-76AB-45E2-B33C-C5B6B99BB03E")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsLiteTreeEvents {
    public abstract virtual int OnToggleExpansion(UInt32 AbsIndex, int cChange);
    public abstract virtual int OnToggleState(UInt32 AbsIndex, UInt32 tscr);
    public abstract virtual int OnRefresh();
    public abstract virtual int OnInsertItems(UInt32 iAfter, UInt32 Count);
    public abstract virtual int OnDeleteItems(UInt32 iStart, UInt32 Count);
    public abstract virtual int OnSetRedraw(int fOn);
    public abstract virtual int OnQueryItemVisible(UInt32 AbsIndex, Int32& pfVisible);
}
[GuidAttribute("1E425321-94CB-448E-8E1E-E1EA2479E5E2")]
[ComConversionLossAttribute]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsLiteTreeList {
    public abstract virtual int GetFlags(UInt32& pFlags);
    public abstract virtual int GetItemCount(UInt32& pCount);
    public abstract virtual int GetExpandedList(UInt32 index, Int32& pfCanRecurse, IVsLiteTreeList& pptlNode);
    public abstract virtual int LocateExpandedList(IVsLiteTreeList ExpandedList, UInt32& iIndex);
    public abstract virtual int OnClose(VSTREECLOSEACTIONS[] ptca);
    public abstract virtual int GetText(UInt32 index, VSTREETEXTOPTIONS tto, String& ppszText);
    public abstract virtual int GetTipText(UInt32 index, VSTREETOOLTIPTYPE eTipType, String& ppszText);
    public abstract virtual int GetExpandable(UInt32 index, Int32& pfExpandable);
    public abstract virtual int GetDisplayData(UInt32 index, VSTREEDISPLAYDATA[] pData);
    public abstract virtual int UpdateCounter(UInt32& pCurUpdate, UInt32& pgrfChanges);
    public abstract virtual int GetListChanges(UInt32& pcChanges, VSTREELISTITEMCHANGE[] prgListChanges);
    public abstract virtual int ToggleState(UInt32 index, UInt32& ptscr);
}
[GuidAttribute("DB08A383-3818-4CC9-944F-1A6F4E174C64")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsLongIdleEvents {
    public abstract virtual void OnEnterIdle(UInt32 reason);
    public abstract virtual void OnExitIdle();
}
[GuidAttribute("6B809F03-072B-46E0-B041-DF4F4CBAA36C")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsLongIdleManager {
    public abstract virtual UInt32 AdviseLongIdleEvents(UInt32 dwIdleTimeInSeconds, IVsLongIdleEvents eventSink);
    public abstract virtual void UnadviseLongIdleEvents(UInt32 cookie);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("04BBF6A5-4697-11D2-890E-0060083196C6")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsMacroRecorder {
    public abstract virtual int RecordStart(string pszReserved);
    public abstract virtual int RecordEnd();
    public abstract virtual int RecordLine(string pszLine, Guid& rguidEmitter);
    public abstract virtual int GetLastEmitterId(Guid& pguidEmitter);
    public abstract virtual int ReplaceLine(string pszLine, Guid& rguidEmitter);
    public abstract virtual int RecordCancel();
    public abstract virtual int RecordPause();
    public abstract virtual int RecordResume();
    public abstract virtual int SetCodeEmittedFlag(int fFlag);
    public abstract virtual int GetCodeEmittedFlag(Int32& pfFlag);
    public abstract virtual int GetKeyWord(UInt32 uiKeyWordId, String& pbstrKeyWord);
    public abstract virtual int IsValidIdentifier(string pszIdentifier);
    public abstract virtual int GetRecordMode(VSRECORDMODE[] peRecordMode);
    public abstract virtual int SetRecordMode(VSRECORDMODE eRecordMode);
    public abstract virtual int GetStringLiteralExpression(string pszStringValue, String& pbstrLiteralExpression);
    public abstract virtual int ExecuteLine(string pszLine);
    public abstract virtual int AddTypeLibRef(Guid& guidTypeLib, UInt32 uVerMaj, UInt32 uVerMin);
}
[GuidAttribute("55ED27C1-4CE7-11D2-890F-0060083196C6")]
[ComConversionLossAttribute]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsMacros {
    public abstract virtual int GetMacroCommands(IntPtr& ppsaMacroCanonicalNames);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("DA5C54DC-7F35-4149-8E1C-948DEBA1CA92")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsManifestReferenceResolver {
    public abstract virtual IVsTask ResolveReferenceAsync(string reference, string relativeToFile);
}
[GuidAttribute("E7494EBB-5BE2-4A5F-B063-8E0853BE6D1E")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsMatcherDataInfo {
    public string Type { get; }
    public string CapabilityType { get; }
    public string ProjectPropertyId { get; }
    public string RegExMatchSource { get; }
    public abstract virtual string get_Type();
    public abstract virtual string get_CapabilityType();
    public abstract virtual string get_ProjectPropertyId();
    public abstract virtual string get_RegExMatchSource();
}
[GuidAttribute("3411DD99-2445-43C8-918E-99BFBFAF8292")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.Shell.Interop.IVSMDTypeResolutionService {
    public abstract virtual int TypeResolutionService(Object& ppTrs);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("6FBCB271-B391-4F80-B560-45E650DEF0A7")]
[ComConversionLossAttribute]
public interface Microsoft.VisualStudio.Shell.Interop.IVsMenuEditor {
    public abstract virtual int AddMenuItem(IVsMenuItem pIMI, IVsMenuItem pIMIParent, IVsMenuItem pIMIInsertAfter);
    public abstract virtual int OnChange(IVsMenuItem pIMI, int propid);
    public abstract virtual int SelectionChange(IntPtr pIMI);
    public abstract virtual int GetItemRect(IVsMenuItem pIMI, RECT[] prc, int fForScrolling);
    public abstract virtual int GetHeight(Int32& piHeight);
    public abstract virtual int Filter(IntPtr hwnd, UInt32 uMsg, IntPtr wParam, IntPtr lParam, IntPtr& plResult);
    public abstract virtual int IsActive(Int32& pfActive);
    public abstract virtual int GetUIState(UInt32& pstate);
    public abstract virtual int DeleteMenuItem(IVsMenuItem pIMI);
    public abstract virtual int SelectionChangeFocus(IVsMenuItem pIMI);
    public abstract virtual int TranslateAccelerator(MSG[] lpmsg);
}
[GuidAttribute("EAF61568-F99B-4BC2-83C4-1DAD8FFAE9E5")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsMenuEditorFactory {
    public abstract virtual int CreateMenuEditor(MEINIT[] pMEInit, IVsMenuEditor& ppME);
}
[GuidAttribute("61B34381-6D7C-461D-949A-1AE178CBA00D")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsMenuEditorSite {
    public abstract virtual int CreateItem(IVsMenuItem pIMIParent, IVsMenuItem pIMIInsertAfter, IVsMenuItem& ppIMINew);
    public abstract virtual int DeleteItem(IVsMenuItem pIMI);
    public abstract virtual int MoveItems(IVsMenuItem pIMIFirst, IVsMenuItem pIMILast, IVsMenuItem pIMIParent, IVsMenuItem pIMIInsertAfter);
    public abstract virtual int SelectionChange(IntPtr ppIMI, VSMESELCMD SelCmd);
}
[GuidAttribute("A0E39F2D-1333-4E71-B3AC-FC7BBFD92D9E")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsMenuEditorTransactionEvents {
    public abstract virtual int BeginTransaction(UInt32 trans);
    public abstract virtual int EndTransaction(UInt32 trans);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("BD868C04-7979-4DB0-A2E1-F55490A42640")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsMenuEvents {
    public abstract virtual void OnBeforeMenuDisplayed();
}
[GuidAttribute("B01B8DEE-677E-4ADC-87C2-3E2517FB6EF7")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsMenuEventsService {
    public abstract virtual UInt32 AdviseMenuEvents(IVsMenuEvents pEventSink, Guid& modreq(System.Runtime.InteropServices.InAttribute) pguidCmdGroup, UInt32 dwCmdId);
    public abstract virtual void UnadviseMenuEvents(UInt32 dwCookie);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("DC0A8728-F58B-4444-B9F0-32D6868BF399")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsMenuItem {
    public abstract virtual int IMISetProp(int propid, object var);
    public abstract virtual int IMIGetProp(int propid, Object& pvar);
    public abstract virtual int IMISetExtraProps(IStream pstm);
    public abstract virtual int IMIGetExtraProps(IStream pstm);
}
[GuidAttribute("55AB9450-F9C7-4305-94E8-BEF12065338D")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsMonitorSelection {
    public abstract virtual int GetCurrentSelection(IntPtr& ppHier, UInt32& pitemid, IVsMultiItemSelect& ppMIS, IntPtr& ppSC);
    public abstract virtual int AdviseSelectionEvents(IVsSelectionEvents pSink, UInt32& pdwCookie);
    public abstract virtual int UnadviseSelectionEvents(UInt32 dwCookie);
    public abstract virtual int GetCurrentElementValue(UInt32 elementid, Object& pvarValue);
    public abstract virtual int GetCmdUIContextCookie(Guid& rguidCmdUI, UInt32& pdwCmdUICookie);
    public abstract virtual int IsCmdUIContextActive(UInt32 dwCmdUICookie, Int32& pfActive);
    public abstract virtual int SetCmdUIContext(UInt32 dwCmdUICookie, int fActive);
}
[GuidAttribute("692E4F21-1EF2-41B1-9116-EED8DAA79E7F")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsMonitorSelection2 {
    public abstract virtual int GetElementID(Guid& rguidElement, UInt32& pElementId);
    public abstract virtual int GetEmptySelectionContext(IVsTrackSelectionEx& ppEmptySelCtxt);
}
[GuidAttribute("9C074FDB-3D7D-4512-9604-72B3B0A5F609")]
[ComConversionLossAttribute]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsMonitorUserContext {
    public abstract virtual int SetSite(IServiceProvider psp);
    public abstract virtual int get_ApplicationContext(IVsUserContext& ppContext);
    public abstract virtual int put_ApplicationContext(IVsUserContext pContext);
    public abstract virtual int CreateEmptyContext(IVsUserContext& ppContext);
    public abstract virtual int GetContextItems(IVsUserContextItemCollection& pplist);
    public abstract virtual int FindTargetItems(string pszTargetAttr, string pszTargetAttrValue, IVsUserContextItemCollection& pplist, Int32& pfF1Kwd);
    public abstract virtual int RegisterItemProvider(IVsUserContextItemProvider pProvider, UInt32& pdwCookie);
    public abstract virtual int UnregisterItemProvider(UInt32 dwCookie);
    public abstract virtual int AdviseContextItemEvents(IVsUserContextItemEvents pEvents, UInt32& pdwCookie);
    public abstract virtual int UnadviseContextItemEvent(UInt32 dwCookie);
    public abstract virtual int GetNextCtxBagAttr(String& pbstrAttrName, String& pbstrAttrVal);
    public abstract virtual int ResetNextCtxBagAttr();
    public abstract virtual int GetPrevAttrCache(IntPtr& pbstrCacheArray, IntPtr& pnCurrNumStored, Int32& pnMaxNumStored);
    public abstract virtual int GetNextCtxBag(String& pbstrAttrName, String& pbstrAttrVal);
    public abstract virtual int IsIdleAvailable(Int32& pfIdleAvail);
    public abstract virtual int SetTopicTypeFilter(IVsHelpAttributeList pTopicTypeList);
    public abstract virtual int GetF1Kwd(String& pbstrKwd, Int32& fF1Kwd);
    public abstract virtual int IsF1Lookup(Int32& fF1Lookup);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("3EF528C5-C45A-47E0-B9EE-A212A32A99EC")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsMRESearchProvider {
    public string DisplayText { get; }
    public string Description { get; }
    public string Tooltip { get; }
    public Guid Category { get; }
    public string Shortcut { get; }
    public abstract virtual string get_DisplayText();
    public abstract virtual string get_Description();
    public abstract virtual string get_Tooltip();
    public abstract virtual Guid get_Category();
    public abstract virtual string get_Shortcut();
    public abstract virtual IVsSearchTask CreateSearch(UInt32 dwCookie, IVsSearchQuery pSearchQuery, IVsSearchProviderCallback pSearchCallback);
    public abstract virtual void ProvideSearchSettings(IVsUIDataSource pSearchOptions);
    public abstract virtual IVsSearchItemResult CreateItemResult(string lpszPersistenceData);
    public abstract virtual void SetMostRecentlyExecuted(IVsSearchQuery pSearchQuery, IVsSearchItemResult pResult, UInt32 dwMaxResults, IVsSearchItemResult[] pSearchItemResults, UInt32& pdwActualResults);
    public abstract virtual void SetSite(IServiceProvider pSP);
    public abstract virtual void Close();
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("3DB65A1A-15B6-4449-B8E6-BE31F632DC51")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsMRUItemsStore {
    public abstract virtual UInt32 GetMRUItems(Guid& guidCategory, string lpszPrefix, UInt32 dwMaxResults, String[] rgbstrItems);
    public abstract virtual void AddMRUItem(Guid& guidCategory, string lpszItem);
    public abstract virtual void SetMRUItem(Guid& guidCategory, string lpszItem);
    public abstract virtual void DeleteMRUItem(Guid& guidCategory, string lpszItem);
    public abstract virtual void DeleteMRUItems(Guid& guidCategory);
    public abstract virtual void SetMaxMRUItems(Guid& guidCategory, UInt32 dwMaxItems);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("45F31264-BACD-45A9-AE64-036120C52582")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsMSBuildHostObject {
    public abstract virtual int Init(IVsHierarchy pHier, IServiceProvider pSP);
    public abstract virtual int Close();
    public abstract virtual int BeginBuild();
    public abstract virtual int EndBuild();
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("33372170-A08F-47F9-B1AE-CD9F2C3BB7C9")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsMSBuildTaskFileManager {
    public abstract virtual int GetFileContents(string wszFilename, String& pbstrFileContents);
    public abstract virtual int GetFileDocData(string wszFilename, IntPtr& ppunkDocData);
    public abstract virtual int GetFileLastChangeTime(string wszFilename, FILETIME[] pFileTime);
    public abstract virtual int PutGeneratedFileContents(string wszFilename, string wszFileContents);
    public abstract virtual int IsRealBuildOperation(Int32& pfIsRealBuild);
    public abstract virtual int Delete(string wszFilename);
    public abstract virtual int Exists(string wszFilename, int fOnlyCheckOnDisk, Int32& pfExists);
}
[GuidAttribute("96973FC6-C2E4-4CB9-8BAF-7F7CD6DBC604")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsMultiItemSelect {
    public abstract virtual int GetSelectionInfo(UInt32& pcItems, Int32& pfSingleHierarchy);
    public abstract virtual int GetSelectedItems(UInt32 grfGSI, UInt32 cItems, VSITEMSELECTION[] rgItemSel);
}
[GuidAttribute("0F4B629E-8C34-4B5E-A450-F9F8DCFE3009")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsMultiViewDocumentView {
    public abstract virtual int ActivateLogicalView(Guid& rguidLogicalView);
    public abstract virtual int GetActiveLogicalView(Guid& pguidLogicalView);
    public abstract virtual int IsLogicalViewActive(Guid& rguidLogicalView, Int32& pIsActive);
}
[GuidAttribute("6AB63B41-FA6D-4FDD-9636-4E2E408EBD49")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsNavigateToService {
    public abstract virtual bool IsShortcutInstalled(string wszShortcutName);
    public abstract virtual bool IsWindowVisible();
    public abstract virtual void HideWindow();
    public abstract virtual void ShowWindowWithShortcut(string wszShortcutName);
    public abstract virtual bool IsShortcutActive(string wszShortcutName);
    public abstract virtual void ActivateShortcut(string wszShortcutName, bool fActivate, bool fClearSearchValue);
    public abstract virtual void OnFilterChanged();
}
[GuidAttribute("6606A1CA-7810-4BB5-A036-725E90A06931")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsNavigateToService2 {
    public abstract virtual bool IsResultExpanderVisible();
    public abstract virtual void ActivateResultExpander();
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("FDAEB434-F941-4370-9B89-325249EFEC48")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsNavigationTool {
    public abstract virtual int NavigateToSymbol(Guid& guidLib, SYMBOL_DESCRIPTION_NODE[] rgSymbolNodes, UInt32 ulcNodes);
    public abstract virtual int NavigateToNavInfo(IVsNavInfo pNavInfo);
    public abstract virtual int GetSelectedSymbols(IVsSelectedSymbols& ppIVsSelectedSymbols);
}
[GuidAttribute("61772DB8-2D5B-49CB-9CE8-891459921F7F")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsNavInfo {
    public abstract virtual int GetLibGuid(Guid& pGuid);
    public abstract virtual int GetSymbolType(UInt32& pdwType);
    public abstract virtual int EnumPresentationNodes(UInt32 dwFlags, IVsEnumNavInfoNodes& ppEnum);
    public abstract virtual int EnumCanonicalNodes(IVsEnumNavInfoNodes& ppEnum);
}
[GuidAttribute("916BA1DD-4C84-431E-9B06-FC80F9496FCF")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsNavInfo2 {
    public abstract virtual int GetLibGuid(Guid& pGuid);
    public abstract virtual int GetSymbolType(UInt32& pdwType);
    public abstract virtual int EnumPresentationNodes(UInt32 dwFlags, IVsEnumNavInfoNodes& ppEnum);
    public abstract virtual int EnumCanonicalNodes(IVsEnumNavInfoNodes& ppEnum);
    public abstract virtual void GetPreferredLanguage(UInt32& pLanguage);
}
[GuidAttribute("1BD1DD01-1246-4694-9DA7-8ADCD9CA3275")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsNavInfoNode {
    public abstract virtual int get_Type(UInt32& pllt);
    public abstract virtual int get_Name(String& pbstrName);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("44DD5120-6DFB-4590-A5CB-1066114996CA")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsNewDocumentStateContext {
    public abstract virtual void Restore();
}
[GuidAttribute("1A1DFC92-F6EC-4FEF-A26F-6D0DA546F32A")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsNonLocalProject {
    public abstract virtual int EnsureLocalCopy(UInt32 itemid);
}
[GuidAttribute("8CBFFBBE-241E-4B9C-9926-C06F7374386C")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsNonSolutionProjectFactory {
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("0DF98187-FD9A-4669-8A56-727910A4866C")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsObjBrowser {
    public abstract virtual int NavigateTo(VSOBJECTINFO[] pObjInfo, UInt32 dwReserved);
}
[GuidAttribute("0587FED2-8072-401F-9090-BCA98C44BBF7")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsObjectBrowserDescription2 {
    public abstract virtual int AddDescriptionText(string pText, VSOBDESCRIPTIONSECTION obdSect, VSOBJECTINFO[] pHyperJump);
    public abstract virtual int ClearDescriptionText();
}
[GuidAttribute("2BCD7A6A-D251-4286-9A61-BDEDDE91114F")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsObjectBrowserDescription3 {
    public abstract virtual int AddDescriptionText3(string pText, VSOBDESCRIPTIONSECTION obdSect, IVsNavInfo pHyperJump);
    public abstract virtual int ClearDescriptionText();
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("C48F7AB9-8966-4138-B602-14C5EB8BD857")]
[ComConversionLossAttribute]
public interface Microsoft.VisualStudio.Shell.Interop.IVsObjectList {
    public abstract virtual int GetFlags(UInt32& pFlags);
    public abstract virtual int GetItemCount(UInt32& pCount);
    public abstract virtual int GetExpandedList(UInt32 index, Int32& pfCanRecurse, IVsLiteTreeList& pptlNode);
    public abstract virtual int LocateExpandedList(IVsLiteTreeList ExpandedList, UInt32& iIndex);
    public abstract virtual int OnClose(VSTREECLOSEACTIONS[] ptca);
    public abstract virtual int GetText(UInt32 index, VSTREETEXTOPTIONS tto, String& ppszText);
    public abstract virtual int GetTipText(UInt32 index, VSTREETOOLTIPTYPE eTipType, String& ppszText);
    public abstract virtual int GetExpandable(UInt32 index, Int32& pfExpandable);
    public abstract virtual int GetDisplayData(UInt32 index, VSTREEDISPLAYDATA[] pData);
    public abstract virtual int UpdateCounter(UInt32& pCurUpdate, UInt32& pgrfChanges);
    public abstract virtual int GetListChanges(UInt32& pcChanges, VSTREELISTITEMCHANGE[] prgListChanges);
    public abstract virtual int ToggleState(UInt32 index, UInt32& ptscr);
    public abstract virtual int GetCapabilities(UInt32& pCapabilities);
    public abstract virtual int GetList(UInt32 index, UInt32 ListType, UInt32 flags, VSOBSEARCHCRITERIA[] pobSrch, IVsObjectList& pplist);
    public abstract virtual int GetCategoryField(UInt32 index, LIB_CATEGORY Category, UInt32& pField);
    public abstract virtual int GetExpandable2(UInt32 index, UInt32 ListTypeExcluded, Int32& pfExpandable);
    public abstract virtual int GetNavigationInfo(UInt32 index, VSOBNAVIGATIONINFO2[] pobNav);
    public abstract virtual int LocateNavigationInfo(VSOBNAVIGATIONINFO2[] pobNav, VSOBNAVNAMEINFONODE[] pobName, int fDontUpdate, Int32& pfMatchedName, UInt32[] pIndex);
    public abstract virtual int GetBrowseObject(UInt32 index, Object& ppdispBrowseObj);
    public abstract virtual int GetUserContext(UInt32 index, Object& ppunkUserCtx);
    public abstract virtual int ShowHelp(UInt32 index);
    public abstract virtual int GetSourceContext(UInt32 index, IntPtr pszFilename, UInt32& pulLineNum);
    public abstract virtual int CountSourceItems(UInt32 index, IVsHierarchy& ppHier, UInt32& pitemid, UInt32& pcItems);
    public abstract virtual int GetMultipleSourceItems(UInt32 index, UInt32 grfGSI, UInt32 cItems, VSITEMSELECTION[] rgItemSel);
    public abstract virtual int CanGoToSource(UInt32 index, VSOBJGOTOSRCTYPE SrcType, Int32& pfOK);
    public abstract virtual int GoToSource(UInt32 index, VSOBJGOTOSRCTYPE SrcType);
    public abstract virtual int GetContextMenu(UInt32 index, Guid& pclsidActive, Int32& pnMenuId, IOleCommandTarget& ppCmdTrgtActive);
    public abstract virtual int QueryDragDrop(UInt32 index, IDataObject pDataObject, UInt32 grfKeyState, UInt32& pdwEffect);
    public abstract virtual int DoDragDrop(UInt32 index, IDataObject pDataObject, UInt32 grfKeyState, UInt32& pdwEffect);
    public abstract virtual int CanRename(UInt32 index, string pszNewName, Int32& pfOK);
    public abstract virtual int DoRename(UInt32 index, string pszNewName, UInt32 grfFlags);
    public abstract virtual int CanDelete(UInt32 index, Int32& pfOK);
    public abstract virtual int DoDelete(UInt32 index, UInt32 grfFlags);
    public abstract virtual int FillDescription(UInt32 index, UInt32 grfOptions, IVsObjectBrowserDescription2 pobDesc);
    public abstract virtual int EnumClipboardFormats(UInt32 index, UInt32 grfFlags, UInt32 celt, VSOBJCLIPFORMAT[] rgcfFormats, UInt32[] pcActual);
    public abstract virtual int GetClipboardFormat(UInt32 index, UInt32 grfFlags, FORMATETC[] pFormatetc, STGMEDIUM[] pMedium);
    public abstract virtual int GetExtendedClipboardVariant(UInt32 index, UInt32 grfFlags, VSOBJCLIPFORMAT[] pcfFormat, Object& pvarFormat);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("E37F46C4-C627-4D88-A091-2992EE33B51D")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsObjectList2 {
    public abstract virtual int GetFlags(UInt32& pFlags);
    public abstract virtual int GetItemCount(UInt32& pCount);
    public abstract virtual int GetExpandedList(UInt32 index, Int32& pfCanRecurse, IVsLiteTreeList& pptlNode);
    public abstract virtual int LocateExpandedList(IVsLiteTreeList ExpandedList, UInt32& iIndex);
    public abstract virtual int OnClose(VSTREECLOSEACTIONS[] ptca);
    public abstract virtual int GetText(UInt32 index, VSTREETEXTOPTIONS tto, String& ppszText);
    public abstract virtual int GetTipText(UInt32 index, VSTREETOOLTIPTYPE eTipType, String& ppszText);
    public abstract virtual int GetExpandable(UInt32 index, Int32& pfExpandable);
    public abstract virtual int GetDisplayData(UInt32 index, VSTREEDISPLAYDATA[] pData);
    public abstract virtual int UpdateCounter(UInt32& pCurUpdate, UInt32& pgrfChanges);
    public abstract virtual int GetListChanges(UInt32& pcChanges, VSTREELISTITEMCHANGE[] prgListChanges);
    public abstract virtual int ToggleState(UInt32 index, UInt32& ptscr);
    public abstract virtual int GetCapabilities2(UInt32& pgrfCapabilities);
    public abstract virtual int GetList2(UInt32 index, UInt32 ListType, UInt32 flags, VSOBSEARCHCRITERIA2[] pobSrch, IVsObjectList2& ppIVsObjectList2);
    public abstract virtual int GetCategoryField2(UInt32 index, int Category, UInt32& pfCatField);
    public abstract virtual int GetExpandable3(UInt32 index, UInt32 ListTypeExcluded, Int32& pfExpandable);
    public abstract virtual int GetNavigationInfo2(UInt32 index, VSOBNAVIGATIONINFO3[] pobNav);
    public abstract virtual int LocateNavigationInfo2(VSOBNAVIGATIONINFO3[] pobNav, VSOBNAVNAMEINFONODE2[] pobName, int fDontUpdate, Int32& pfMatchedName, UInt32& pIndex);
    public abstract virtual int GetBrowseObject(UInt32 index, Object& ppdispBrowseObj);
    public abstract virtual int GetUserContext(UInt32 index, Object& ppunkUserCtx);
    public abstract virtual int ShowHelp(UInt32 index);
    public abstract virtual int GetSourceContext(UInt32 index, IntPtr pszFilename, UInt32& pulLineNum);
    public abstract virtual int CountSourceItems(UInt32 index, IVsHierarchy& ppHier, UInt32& pItemid, UInt32& pcItems);
    public abstract virtual int GetMultipleSourceItems(UInt32 index, UInt32 grfGSI, UInt32 cItems, VSITEMSELECTION[] rgItemSel);
    public abstract virtual int CanGoToSource(UInt32 index, VSOBJGOTOSRCTYPE SrcType, Int32& pfOK);
    public abstract virtual int GoToSource(UInt32 index, VSOBJGOTOSRCTYPE SrcType);
    public abstract virtual int GetContextMenu(UInt32 index, Guid& pclsidActive, Int32& pnMenuId, IOleCommandTarget& ppCmdTrgtActive);
    public abstract virtual int QueryDragDrop(UInt32 index, IDataObject pDataObject, UInt32 grfKeyState, UInt32& pdwEffect);
    public abstract virtual int DoDragDrop(UInt32 index, IDataObject pDataObject, UInt32 grfKeyState, UInt32& pdwEffect);
    public abstract virtual int CanRename(UInt32 index, string pszNewName, Int32& pfOK);
    public abstract virtual int DoRename(UInt32 index, string pszNewName, UInt32 grfFlags);
    public abstract virtual int CanDelete(UInt32 index, Int32& pfOK);
    public abstract virtual int DoDelete(UInt32 index, UInt32 grfFlags);
    public abstract virtual int FillDescription(UInt32 index, UInt32 grfOptions, IVsObjectBrowserDescription2 pobDesc);
    public abstract virtual int FillDescription2(UInt32 index, UInt32 grfOptions, IVsObjectBrowserDescription3 pobDesc);
    public abstract virtual int EnumClipboardFormats(UInt32 index, UInt32 grfFlags, UInt32 celt, VSOBJCLIPFORMAT[] rgcfFormats, UInt32[] pcActual);
    public abstract virtual int GetClipboardFormat(UInt32 index, UInt32 grfFlags, FORMATETC[] pFormatetc, STGMEDIUM[] pMedium);
    public abstract virtual int GetExtendedClipboardVariant(UInt32 index, UInt32 grfFlags, VSOBJCLIPFORMAT[] pcfFormat, Object& pvarFormat);
    public abstract virtual int GetProperty(UInt32 index, int propid, Object& pvar);
    public abstract virtual int GetNavInfo(UInt32 index, IVsNavInfo& ppNavInfo);
    public abstract virtual int GetNavInfoNode(UInt32 index, IVsNavInfoNode& ppNavInfoNode);
    public abstract virtual int LocateNavInfoNode(IVsNavInfoNode pNavInfoNode, UInt32& pulIndex);
}
[GuidAttribute("5801DB45-16AA-4F08-BB57-82A070B79512")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsObjectListOwner {
    public abstract virtual int GetOptions(UInt32& pOptions);
    public abstract virtual int IsVisible();
    public abstract virtual int ListLoadRefused();
    public abstract virtual int DoWaitUI(int fStart);
    public abstract virtual int NotifySearchHit();
    public abstract virtual int ClearSearchHit();
    public abstract virtual int HaveSearchHit();
    public abstract virtual int CalculateExtendedText(IVsObjectList pList, UInt32 iItem, string strSeperator);
    public abstract virtual int GetExtendedText(IntPtr pwszExtText);
    public abstract virtual int UpdateDisplayData(IVsObjectList pList, UInt32 iItem, int fPackageList, UInt32 dwReserved, VSTREEDISPLAYDATA[] pData);
    public abstract virtual int ClearCachedData(UInt32 grfDataKinds);
    public abstract virtual int ClearListFilters(UInt32 dwReserved);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("01E95D2E-2D20-4662-9DE7-4C1C35524260")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsObjectManager {
    public abstract virtual int RegisterLibMgr(Guid& rguidLibMgr, IVsLibraryMgr pLibMgr, UInt32& pdwCookie);
    public abstract virtual int UnregisterLibMgr(UInt32 dwCookie);
    public abstract virtual int EnumLibMgrs(UInt32& pCount, IVsLibraryMgr[] rgpLibMgrs);
    public abstract virtual int RefreshLists();
    public abstract virtual int GetList(UInt32 ListType, UInt32 flags, IVsLibraryMgr pLibMgr, VSOBSEARCHCRITERIA[] pobSrch, IVsObjectList& pplist);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("6A0392E4-68E8-4FBC-AFCF-85155533E48E")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsObjectManager2 {
    public abstract virtual int RegisterLibrary(IVsLibrary2 pLib, UInt32& pdwCookie);
    public abstract virtual int RegisterSimpleLibrary(IVsSimpleLibrary2 pLib, UInt32& pdwCookie);
    public abstract virtual int UnregisterLibrary(UInt32 dwCookie);
    public abstract virtual int EnumLibraries(IVsEnumLibraries2& ppEnum);
    public abstract virtual int FindLibrary(Guid& guidLibrary, IVsLibrary2& ppLib);
    public abstract virtual int GetListAndIndex(IVsNavInfo pNavInfo, UInt32 dwFlags, IVsObjectList2& ppList, UInt32& pIndex);
    public abstract virtual int ParseDataObject(IDataObject pIDataObject, IVsSelectedSymbols& ppSymbols);
    public abstract virtual int CreateSimpleBrowseComponentSet(UInt32 Type, Guid[] rgguidLibs, UInt32 ulcLibs, IVsSimpleBrowseComponentSet& ppSet);
    public abstract virtual int CreateProjectReferenceSet(object pProject, IVsSimpleBrowseComponentSet& ppSet);
    public abstract virtual int CreateCombinedBrowseComponentSet(IVsCombinedBrowseComponentSet& ppCombinedSet);
}
[GuidAttribute("7C4C8065-FB7E-45D8-9B50-940A8FCB5876")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsObjectManagerEvents {
    public abstract virtual int OnBeforeSubsetChange();
    public abstract virtual int OnAfterSubsetChange();
}
[GuidAttribute("44A39218-81BD-4669-9DE0-F282A8BAEE34")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsObjectSearch {
    public abstract virtual int Find(UInt32 flags, VSOBSEARCHCRITERIA[] pobSrch, IVsObjectList& pplist);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("BBA468E0-2D3D-450E-AF95-CCB9DE1162E8")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsObjectSearchPane {
    public abstract virtual int SetResultsList(IVsLibrary pLibrary, IVsObjectList pList, UInt32 flags, IVsObjectListOwner& ppListOwner);
}
[GuidAttribute("09B17094-F50C-40E0-8AB5-57C22A786596")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsOpenProjectOrSolutionDlg {
    public abstract virtual int OpenProjectOrSolutionViaDlg(UInt32 grfProjSlnDlgFlags, string pwzStartDirectory, string pwzDialogTitle, Guid& rguidProjectType);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("0238DCC5-62D6-4DAC-A977-2C6A36C502F4")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsOutput {
    public abstract virtual int get_DisplayName(String& pbstrDisplayName);
    public abstract virtual int get_CanonicalName(String& pbstrCanonicalName);
    public abstract virtual int get_DeploySourceURL(String& pbstrDeploySourceURL);
    public abstract virtual int get_Type(Guid& pguidType);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("653BB330-1205-4CF8-8F88-723D6E199A01")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsOutput2 {
    public abstract virtual int get_DisplayName(String& pbstrDisplayName);
    public abstract virtual int get_CanonicalName(String& pbstrCanonicalName);
    public abstract virtual int get_DeploySourceURL(String& pbstrDeploySourceURL);
    public abstract virtual int get_Type(Guid& pguidType);
    public abstract virtual int get_RootRelativeURL(String& pbstrRelativePath);
    public abstract virtual int get_Property(string szProperty, Object& pvar);
}
[GuidAttribute("FCC03D95-7C2E-4398-AAAE-0F4B56104FC8")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsOutputGroup {
    public abstract virtual int get_CanonicalName(String& pbstrCanonicalName);
    public abstract virtual int get_DisplayName(String& pbstrDisplayName);
    public abstract virtual int get_KeyOutput(String& pbstrCanonicalName);
    public abstract virtual int get_ProjectCfg(IVsProjectCfg2& ppIVsProjectCfg2);
    public abstract virtual int get_Outputs(UInt32 celt, IVsOutput2[] rgpcfg, UInt32[] pcActual);
    public abstract virtual int get_DeployDependencies(UInt32 celt, IVsDeployDependency[] rgpdpd, UInt32[] pcActual);
    public abstract virtual int get_Description(String& pbstrDescription);
}
[GuidAttribute("06A3B841-FBEA-46CB-81EA-36DB4D005545")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsOutputGroup2 {
    public abstract virtual int get_CanonicalName(String& pbstrCanonicalName);
    public abstract virtual int get_DisplayName(String& pbstrDisplayName);
    public abstract virtual int get_KeyOutput(String& pbstrCanonicalName);
    public abstract virtual int get_ProjectCfg(IVsProjectCfg2& ppIVsProjectCfg2);
    public abstract virtual int get_Outputs(UInt32 celt, IVsOutput2[] rgpcfg, UInt32[] pcActual);
    public abstract virtual int get_DeployDependencies(UInt32 celt, IVsDeployDependency[] rgpdpd, UInt32[] pcActual);
    public abstract virtual int get_Description(String& pbstrDescription);
    public abstract virtual int get_KeyOutputObject(IVsOutput2& ppKeyOutput);
    public abstract virtual int get_Property(string pszProperty, Object& pvar);
}
[GuidAttribute("533FAD11-FE7F-41EE-A381-8B67792CD692")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsOutputWindow {
    public abstract virtual int GetPane(Guid& rguidPane, IVsOutputWindowPane& ppPane);
    public abstract virtual int CreatePane(Guid& rguidPane, string pszPaneName, int fInitVisible, int fClearWithSolution);
    public abstract virtual int DeletePane(Guid& rguidPane);
}
[GuidAttribute("F4DEB52C-53A3-42FD-A039-3493F09E53FC")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsOutputWindow2 {
    public abstract virtual int GetActivePaneGUID(Guid& pguidPane);
}
[GuidAttribute("35DBFD79-2B63-4355-A828-8E3D6D440687")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsOutputWindow3 {
    public abstract virtual int CreatePane2(Guid& rguidPane, string pszPaneName, int fInitVisible, int fClearWithSolution, string lpszContentType, string lpszTextViewRoles);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("9B878A55-296A-404D-80C4-1468BB7CDC43")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsOutputWindowPane {
    public abstract virtual int OutputString(string pszOutputString);
    public abstract virtual int Activate();
    public abstract virtual int Hide();
    public abstract virtual int Clear();
    public abstract virtual int FlushToTaskList();
    public abstract virtual int OutputTaskItemString(string pszOutputString, VSTASKPRIORITY nPriority, VSTASKCATEGORY nCategory, string pszSubcategory, int nBitmap, string pszFilename, UInt32 nLineNum, string pszTaskItemText);
    public abstract virtual int OutputTaskItemStringEx(string pszOutputString, VSTASKPRIORITY nPriority, VSTASKCATEGORY nCategory, string pszSubcategory, int nBitmap, string pszFilename, UInt32 nLineNum, string pszTaskItemText, string pszLookupKwd);
    public abstract virtual int GetName(String& pbstrPaneName);
    public abstract virtual int SetName(string pszPaneName);
    public abstract virtual int OutputStringThreadSafe(string pszOutputString);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("4A65481B-49CF-4FCB-A891-32AE435EC941")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsOutputWindowPane2 {
    public abstract virtual int OutputTaskItemStringEx2(string pszOutputString, VSTASKPRIORITY nPriority, VSTASKCATEGORY nCategory, string pszSubcategory, int nBitmap, string pszFileName, UInt32 nLineNum, UInt32 nColumn, string pszProjectUniqueName, string pszTaskItemText, string pszLookupKwd);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("D3D762D1-711A-4A4E-AF75-670F5160C38D")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsOutputWindowPane3 {
    public abstract virtual void OutputStringWithId(Guid messageProvider, UInt32 messageId, string message);
    public abstract virtual bool TryGetStringWithId(Guid messageProvider, UInt32 messageId, String& message);
    public abstract virtual bool TryNavigateToMessageId(Guid messageProvider, UInt32 messageId, bool ensureVisible, bool ensureFocused);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("5C552B00-38FB-489E-A544-D1AD948D3213")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsOutputWindowPaneNoPump {
    public abstract virtual void OutputStringNoPump(string pszOutputString);
}
[ComConversionLossAttribute]
[InterfaceTypeAttribute("1")]
[GuidAttribute("E4197123-1086-4D51-B2D5-903F4D61C5AA")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsOwnedProjectFactory {
    public abstract virtual int PreCreateForOwner(object pUnkOwner, Object& ppUnkInner, IntPtr& pCookie);
    public abstract virtual int InitializeForOwner(string pszFilename, string pszLocation, string pszName, UInt32 grfCreateFlags, Guid& iidProject, IntPtr cookie, IntPtr& ppvProject, Int32& pfCanceled);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("D4F3F4B1-E900-4E51-ADB3-D532348F83CB")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsPackage {
    public abstract virtual int SetSite(IServiceProvider psp);
    public abstract virtual int QueryClose(Int32& pfCanClose);
    public abstract virtual int Close();
    public abstract virtual int GetAutomationObject(string pszPropName, Object& ppDisp);
    public abstract virtual int CreateTool(Guid& rguidPersistenceSlot);
    public abstract virtual int ResetDefaults(UInt32 grfFlags);
    public abstract virtual int GetPropertyPage(Guid& rguidPage, VSPROPSHEETPAGE[] ppage);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("0130701B-B0BE-474B-B4B6-35BABB2008F1")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsPackage2 {
    public abstract virtual int get_CanClose(Boolean& pfCanClose);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("7DB81657-7722-4407-B675-9F4A6FEEEA15")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsPackageDynamicToolOwner {
    public abstract virtual int QueryShowTool(Guid& rguidPersistenceSlot, Int32& pfShowTool);
}
[GuidAttribute("91C30F81-E72A-4997-9B07-A0AECB8C9169")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsPackageDynamicToolOwnerEx {
    public abstract virtual int QueryShowTool(Guid& rguidPersistenceSlot, UInt32 dwId, Int32& pfShowTool);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("1FC6AF83-7F43-467E-B2C4-28E2B1B376AB")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsPackageExtensionProvider {
    public abstract virtual object CreateExtensionInstance(Guid& extensionPoint, Guid& instance);
}
[GuidAttribute("9248B73C-1A06-414E-A926-9FEA3F38A375")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsPackageInfo {
    [DispIdAttribute("1610678272")]
public string Name { get; }
    [DispIdAttribute("1610678273")]
public Guid Id { get; }
    [DispIdAttribute("1610678274")]
public string ProductName { get; }
    [DispIdAttribute("1610678275")]
public string CompanyName { get; }
    [DispIdAttribute("1610678276")]
public bool IsBackgroundLoadSafe { get; }
    [DispIdAttribute("1610678277")]
public bool IsLoaded { get; }
    public abstract virtual string get_Name();
    public abstract virtual Guid get_Id();
    public abstract virtual string get_ProductName();
    public abstract virtual string get_CompanyName();
    public abstract virtual bool get_IsBackgroundLoadSafe();
    public abstract virtual bool get_IsLoaded();
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("1669C91D-923E-4CFE-82C5-E99075ABB0EF")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsPackageInfoQueryService {
    public abstract virtual IVsPackageInfo GetPackageInfo(Guid& packageGuid);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("21861181-88B1-410A-BCA8-441FB3F3F1FC")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsPackageLoadEvents {
    public abstract virtual void OnPackageLoaded(Guid& packageGuid, IVsPackage package);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("9C268EBF-A8A0-4226-B1E2-B8B8BADB0544")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsPackageSelectedInfo {
    public string id { get; }
    public abstract virtual string get_id();
}
[GuidAttribute("8FE0E50A-785A-4A50-8EDB-1D054D68EF87")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsParentHierarchy {
    public abstract virtual int ExtendsBrowseObjects(VSEXTENDSHIERARCHY[] peExtends);
    public abstract virtual int GetBrowseExtender(IVsHierarchy pHierarchyChild, UInt32 itemid, Object& ppDispatchExtension);
}
[GuidAttribute("79001CD1-69C6-45B8-8F7A-DCCCE0469E8D")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsParentProject {
    public abstract virtual int OpenChildren();
    public abstract virtual int CloseChildren();
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("D63BB7D7-D7A0-4C02-AA85-7E9233797CDB")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsParentProject2 {
    public abstract virtual int CreateNestedProject(UInt32 itemidLoc, Guid& rguidProjectType, string lpszMoniker, string lpszLocation, string lpszName, UInt32 grfCreateFlags, Guid& rguidProjectID, Guid& iidProject, IntPtr& ppProject);
    public abstract virtual int AddNestedSolution(UInt32 itemidLoc, UInt32 grfOpenOpts, string pszFilename);
}
[GuidAttribute("366704D5-85D0-4F7D-B267-90FA4DD37D5B")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsParseCommandLine {
    public abstract virtual int ParseCommandLine(string szCommandLine, int iMaxParams, int iCursorPos);
    public abstract virtual int ParseCommandTail(string szCommandTail, int iMaxParams);
    public abstract virtual int HasParams();
    public abstract virtual int HasSwitches();
    public abstract virtual int HasSwitchValues();
    public abstract virtual int GetParamCount(Int32& piParamCount);
    public abstract virtual int GetSwitchCount(Int32& piSwitchCount);
    public abstract virtual int GetSwitchValueCount(Int32& piSwitchValueCount);
    public abstract virtual int SwitchHasValue(int iIndex);
    public abstract virtual int GetCommand(String& pbstrCommand);
    public abstract virtual int GetParam(int iIndex, String& pbstrParam);
    public abstract virtual int GetRawSwitch(int iIndex, String& pbstrRawSwitch);
    public abstract virtual int GetRawSwitchValue(int iIndex, String& pbstrRawSwitchValue);
    public abstract virtual int GetCommandTail(String& pbstrCommandTail);
    public abstract virtual int GetACParam(Int32& piACIndex, Int32& piACStart, Int32& pcchACLength, String& pbstrACParam);
    public abstract virtual int RejectAllSwitches();
    public abstract virtual int ValidateParamCount(int cParamsMin, int cParamsMax);
    public abstract virtual int EvaluateSwitches(string szSwitchDefs);
    public abstract virtual int IsSwitchPresent(int iSwitchIndex);
    public abstract virtual int GetSwitchValue(int iSwitchIndex, String& pbstrValue);
    public abstract virtual int QuoteParam(string szParam, String& pbstrQuotedParam);
}
[GuidAttribute("7837DF15-0604-4EA1-8515-CD5A30972482")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsParseCommandLine2 {
    public abstract virtual int GetACParamOrSwitch(Int32& piACIndex, Int32& piACStart, Int32& pcchACLength, String& pbstrCurSwitch, String& pbstrACParam);
}
[GuidAttribute("17A4EF87-4472-47F6-B066-FE96036678D0")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsPathVariableResolver {
    public abstract virtual int ResolvePath(string strEncodedPath, UInt32 dwFlags, String& pbstrPath);
    public abstract virtual int EncodePath(string strPath, UInt32 dwFlags, String& pbstrEncodedPath);
}
[GuidAttribute("0FF510A3-5FA5-49F1-8CCC-190D71083F3E")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsPerPropertyBrowsing {
    public abstract virtual int HideProperty(int dispid, Int32& pfHide);
    public abstract virtual int DisplayChildProperties(int dispid, Int32& pfDisplay);
    public abstract virtual int GetLocalizedPropertyInfo(int dispid, UInt32 localeID, String& pbstrLocalizedName, String& pbstrLocalizeDescription);
    public abstract virtual int HasDefaultValue(int dispid, Int32& fDefault);
    public abstract virtual int IsPropertyReadOnly(int dispid, Int32& fReadOnly);
    public abstract virtual int GetClassName(String& pbstrClassName);
    public abstract virtual int CanResetPropertyValue(int dispid, Int32& pfCanReset);
    public abstract virtual int ResetPropertyValue(int dispid);
}
[GuidAttribute("9C68F455-FF06-43D0-8473-195EFAFCB833")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsPersistConnectedServices {
    [DispIdAttribute("1610678272")]
public IVsHierarchy Project { get; }
    [DispIdAttribute("1610678273")]
[ComAliasNameAttribute("OLE.DWORD")]
public UInt32 Count { get; }
    public abstract virtual IVsHierarchy get_Project();
    public abstract virtual UInt32 get_Count();
    public abstract virtual UInt32 GetConnectedServices(UInt32 dwMaxReferences, IVsConnectedServiceProperties[] rgpServices);
    public abstract virtual IVsConnectedServiceProperties GetConnectedService(string szServiceIdentity);
    public abstract virtual IVsConnectedServiceProperties Add(string szServiceIdentity, UInt32 dwCountMetadata, String[] szProperties, String[] szValues);
    public abstract virtual void Remove(string szServiceIdentity);
}
[GuidAttribute("D5D49C61-1C0B-4EA1-9ADB-A79FB1DBC7B5")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsPersistDocData {
    public abstract virtual int GetGuidEditorType(Guid& pClassID);
    public abstract virtual int IsDocDataDirty(Int32& pfDirty);
    public abstract virtual int SetUntitledDocPath(string pszDocDataPath);
    public abstract virtual int LoadDocData(string pszMkDocument);
    public abstract virtual int SaveDocData(VSSAVEFLAGS dwSave, String& pbstrMkDocumentNew, Int32& pfSaveCanceled);
    public abstract virtual int Close();
    public abstract virtual int OnRegisterDocData(UInt32 docCookie, IVsHierarchy pHierNew, UInt32 itemidNew);
    public abstract virtual int RenameDocData(UInt32 grfAttribs, IVsHierarchy pHierNew, UInt32 itemidNew, string pszMkDocumentNew);
    public abstract virtual int IsDocDataReloadable(Int32& pfReloadable);
    public abstract virtual int ReloadDocData(UInt32 grfFlags);
}
[GuidAttribute("9D71890D-090C-4B67-80C3-4CB55C600B60")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsPersistDocData2 {
    public abstract virtual int GetGuidEditorType(Guid& pClassID);
    public abstract virtual int IsDocDataDirty(Int32& pfDirty);
    public abstract virtual int SetUntitledDocPath(string pszDocDataPath);
    public abstract virtual int LoadDocData(string pszMkDocument);
    public abstract virtual int SaveDocData(VSSAVEFLAGS dwSave, String& pbstrMkDocumentNew, Int32& pfSaveCanceled);
    public abstract virtual int Close();
    public abstract virtual int OnRegisterDocData(UInt32 docCookie, IVsHierarchy pHierNew, UInt32 itemidNew);
    public abstract virtual int RenameDocData(UInt32 grfAttribs, IVsHierarchy pHierNew, UInt32 itemidNew, string pszMkDocumentNew);
    public abstract virtual int IsDocDataReloadable(Int32& pfReloadable);
    public abstract virtual int ReloadDocData(UInt32 grfFlags);
    public abstract virtual int SetDocDataDirty(int fDirty);
    public abstract virtual int IsDocDataReadOnly(Int32& pfReadOnly);
    public abstract virtual int SetDocDataReadOnly(int fReadOnly);
}
[GuidAttribute("DEC057F4-46D1-4BD3-9D63-21E5E3F19368")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsPersistDocData3 {
    public abstract virtual int HandsOffDocDataStorage();
    public abstract virtual int HandsOnDocDataStorage();
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("18933F6E-0937-4888-8C77-EC8A393B21EA")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsPersistHierarchyItem {
    public abstract virtual int IsItemDirty(UInt32 itemid, IntPtr punkDocData, Int32& pfDirty);
    public abstract virtual int SaveItem(VSSAVEFLAGS dwSave, string pszSilentSaveAsName, UInt32 itemid, IntPtr punkDocData, Int32& pfCanceled);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("5A494367-DF56-4062-8EDA-54E2C1FF42BC")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsPersistHierarchyItem2 {
    public abstract virtual int IsItemDirty(UInt32 itemid, IntPtr punkDocData, Int32& pfDirty);
    public abstract virtual int SaveItem(VSSAVEFLAGS dwSave, string pszSilentSaveAsName, UInt32 itemid, IntPtr punkDocData, Int32& pfCanceled);
    public abstract virtual int IsItemReloadable(UInt32 itemid, Int32& pfReloadable);
    public abstract virtual int ReloadItem(UInt32 itemid, UInt32 dwReserved);
    public abstract virtual int IgnoreItemFileChanges(UInt32 itemid, int fIgnore);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("53BA0F89-24DD-46E1-A7D6-ED24C039FBC4")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsPersistSolutionOpts {
    public abstract virtual int SaveUserOptions(IVsSolutionPersistence pPersistence);
    public abstract virtual int LoadUserOptions(IVsSolutionPersistence pPersistence, UInt32 grfLoadOpts);
    public abstract virtual int WriteUserOptions(IStream pOptionsStream, string pszKey);
    public abstract virtual int ReadUserOptions(IStream pOptionsStream, string pszKey);
}
[GuidAttribute("D79CA884-27FC-43F4-A51B-D0B068B312C9")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsPersistSolutionOpts2 {
    public abstract virtual int SaveUserOptions(IVsSolutionPersistence pPersistence);
    public abstract virtual int LoadUserOptions(IVsSolutionPersistence pPersistence, UInt32 grfLoadOpts);
    public abstract virtual int WriteUserOptions(IStream pOptionsStream, string pszKey);
    public abstract virtual int ReadUserOptions(IStream pOptionsStream, string pszKey);
    public abstract virtual void LoadUserOptionsEx(int fPreLoad, IVsSolutionPersistence pPersistence, UInt32 grfLoadOpts);
}
[GuidAttribute("0D0E68EA-C910-45A7-8C24-7BBFA7D2D201")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsPersistSolutionProps {
    public abstract virtual int SaveUserOptions(IVsSolutionPersistence pPersistence);
    public abstract virtual int LoadUserOptions(IVsSolutionPersistence pPersistence, UInt32 grfLoadOpts);
    public abstract virtual int WriteUserOptions(IStream pOptionsStream, string pszKey);
    public abstract virtual int ReadUserOptions(IStream pOptionsStream, string pszKey);
    public abstract virtual int QuerySaveSolutionProps(IVsHierarchy pHierarchy, VSQUERYSAVESLNPROPS[] pqsspSave);
    public abstract virtual int SaveSolutionProps(IVsHierarchy pHierarchy, IVsSolutionPersistence pPersistence);
    public abstract virtual int WriteSolutionProps(IVsHierarchy pHierarchy, string pszKey, IPropertyBag pPropBag);
    public abstract virtual int ReadSolutionProps(IVsHierarchy pHierarchy, string pszProjectName, string pszProjectMk, string pszKey, int fPreLoad, IPropertyBag pPropBag);
    public abstract virtual int OnProjectLoadFailure(IVsHierarchy pStubHierarchy, string pszProjectName, string pszProjectMk, string pszKey);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("8D2EC486-8098-4AFA-AB94-D270A5EF08CE")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsPersistSolutionProps2 {
    public abstract virtual int OnSolutionLoadFailure(string pszKey);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("6756F947-41FE-46C7-88F1-5CBE4606A5A0")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsPlatformReference {
    public string Name { get; public set; }
    public string FullPath { get; public set; }
    public bool AlreadyReferenced { get; public set; }
    public string SDKIdentity { get; public set; }
    public bool IsSDK { get; public set; }
    public abstract virtual string get_Name();
    public abstract virtual void set_Name(string value);
    public abstract virtual string get_FullPath();
    public abstract virtual void set_FullPath(string value);
    public abstract virtual bool get_AlreadyReferenced();
    public abstract virtual void set_AlreadyReferenced(bool value);
    public abstract virtual string get_SDKIdentity();
    public abstract virtual void set_SDKIdentity(string value);
    public abstract virtual bool get_IsSDK();
    public abstract virtual void set_IsSDK(bool value);
}
[GuidAttribute("E19BDA1E-41E3-47BA-8308-82D18F399D73")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsPlatformReferenceProviderContext {
    public Guid ProviderGuid { get; }
    public Array References { get; }
    public Array ReferenceFilterPaths { get; public set; }
    public string TargetPlatformIdentifier { get; public set; }
    public string TargetPlatformVersion { get; public set; }
    public string TargetFrameworkMoniker { get; public set; }
    public string AssemblySearchPaths { get; public set; }
    public string TargetPlatformReferencesLocation { get; public set; }
    public string SDKRegistryRoot { get; public set; }
    public string SDKDirectoryRoot { get; public set; }
    public string SDKFilterKeywords { get; public set; }
    public string VisualStudioVersion { get; public set; }
    public bool ExpandSDKContents { get; public set; }
    [ComAliasNameAttribute("Microsoft.VisualStudio.Shell.Interop.VSSDKPROVIDERTAB")]
public UInt32 Tabs { get; public set; }
    public bool IsImplicitlyReferenced { get; public set; }
    public abstract virtual Guid get_ProviderGuid();
    public abstract virtual Array get_References();
    public abstract virtual void AddReference(IVsReference pReference);
    public abstract virtual IVsReference CreateReference();
    public abstract virtual Array get_ReferenceFilterPaths();
    public abstract virtual void set_ReferenceFilterPaths(Array value);
    public abstract virtual string get_TargetPlatformIdentifier();
    public abstract virtual void set_TargetPlatformIdentifier(string value);
    public abstract virtual string get_TargetPlatformVersion();
    public abstract virtual void set_TargetPlatformVersion(string value);
    public abstract virtual string get_TargetFrameworkMoniker();
    public abstract virtual void set_TargetFrameworkMoniker(string value);
    public abstract virtual string get_AssemblySearchPaths();
    public abstract virtual void set_AssemblySearchPaths(string value);
    public abstract virtual string get_TargetPlatformReferencesLocation();
    public abstract virtual void set_TargetPlatformReferencesLocation(string value);
    public abstract virtual string get_SDKRegistryRoot();
    public abstract virtual void set_SDKRegistryRoot(string value);
    public abstract virtual string get_SDKDirectoryRoot();
    public abstract virtual void set_SDKDirectoryRoot(string value);
    public abstract virtual string get_SDKFilterKeywords();
    public abstract virtual void set_SDKFilterKeywords(string value);
    public abstract virtual string get_VisualStudioVersion();
    public abstract virtual void set_VisualStudioVersion(string value);
    public abstract virtual bool get_ExpandSDKContents();
    public abstract virtual void set_ExpandSDKContents(bool value);
    public abstract virtual UInt32 get_Tabs();
    public abstract virtual void set_Tabs(UInt32 value);
    public abstract virtual string GetTabTitle(UInt32 etabId);
    public abstract virtual void SetTabTitle(UInt32 etabId, string szTabTitle);
    public abstract virtual bool get_IsImplicitlyReferenced();
    public abstract virtual void set_IsImplicitlyReferenced(bool value);
    public abstract virtual string GetNoItemsMessageForTab(UInt32 etabId);
    public abstract virtual void SetNoItemsMessageForTab(UInt32 etabId, string bstrNoItemsMessage);
}
[GuidAttribute("65429265-78CC-4772-9826-5BF9E2295C62")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsPlatformReferenceProviderContext2 {
    [DispIdAttribute("1610678272")]
public Guid ProviderGuid { get; }
    [DispIdAttribute("1610678273")]
public Array References { get; }
    [DispIdAttribute("1610678276")]
public Array ReferenceFilterPaths { get; public set; }
    [DispIdAttribute("1610743808")]
public string TargetPlatformIdentifier { get; public set; }
    [DispIdAttribute("1610743810")]
public string TargetPlatformVersion { get; public set; }
    [DispIdAttribute("1610743812")]
public string TargetFrameworkMoniker { get; public set; }
    [DispIdAttribute("1610743814")]
public string AssemblySearchPaths { get; public set; }
    [DispIdAttribute("1610743816")]
public string TargetPlatformReferencesLocation { get; public set; }
    [DispIdAttribute("1610743818")]
public string SDKRegistryRoot { get; public set; }
    [DispIdAttribute("1610743820")]
public string SDKDirectoryRoot { get; public set; }
    [DispIdAttribute("1610743822")]
public string SDKFilterKeywords { get; public set; }
    [DispIdAttribute("1610743824")]
public string VisualStudioVersion { get; public set; }
    [DispIdAttribute("1610743826")]
public bool ExpandSDKContents { get; public set; }
    [ComAliasNameAttribute("VsShell.VSSDKPROVIDERTAB")]
[DispIdAttribute("1610743828")]
public UInt32 Tabs { get; public set; }
    [DispIdAttribute("1610743832")]
public bool IsImplicitlyReferenced { get; public set; }
    [DispIdAttribute("1610809344")]
public string SDKExtensionDirectoryRoot { get; public set; }
    public abstract virtual Guid get_ProviderGuid();
    public abstract virtual Array get_References();
    public abstract virtual void AddReference(IVsReference pReference);
    public abstract virtual IVsReference CreateReference();
    public abstract virtual Array get_ReferenceFilterPaths();
    public abstract virtual void set_ReferenceFilterPaths(Array value);
    public abstract virtual string get_TargetPlatformIdentifier();
    public abstract virtual void set_TargetPlatformIdentifier(string value);
    public abstract virtual string get_TargetPlatformVersion();
    public abstract virtual void set_TargetPlatformVersion(string value);
    public abstract virtual string get_TargetFrameworkMoniker();
    public abstract virtual void set_TargetFrameworkMoniker(string value);
    public abstract virtual string get_AssemblySearchPaths();
    public abstract virtual void set_AssemblySearchPaths(string value);
    public abstract virtual string get_TargetPlatformReferencesLocation();
    public abstract virtual void set_TargetPlatformReferencesLocation(string value);
    public abstract virtual string get_SDKRegistryRoot();
    public abstract virtual void set_SDKRegistryRoot(string value);
    public abstract virtual string get_SDKDirectoryRoot();
    public abstract virtual void set_SDKDirectoryRoot(string value);
    public abstract virtual string get_SDKFilterKeywords();
    public abstract virtual void set_SDKFilterKeywords(string value);
    public abstract virtual string get_VisualStudioVersion();
    public abstract virtual void set_VisualStudioVersion(string value);
    public abstract virtual bool get_ExpandSDKContents();
    public abstract virtual void set_ExpandSDKContents(bool value);
    public abstract virtual UInt32 get_Tabs();
    public abstract virtual void set_Tabs(UInt32 value);
    public abstract virtual string GetTabTitle(UInt32 etabId);
    public abstract virtual void SetTabTitle(UInt32 etabId, string szTabTitle);
    public abstract virtual bool get_IsImplicitlyReferenced();
    public abstract virtual void set_IsImplicitlyReferenced(bool value);
    public abstract virtual string GetNoItemsMessageForTab(UInt32 etabId);
    public abstract virtual void SetNoItemsMessageForTab(UInt32 etabId, string bstrNoItemsMessage);
    public abstract virtual string get_SDKExtensionDirectoryRoot();
    public abstract virtual void set_SDKExtensionDirectoryRoot(string value);
}
[GuidAttribute("2EE3C85D-04D8-461B-B7AC-8E4F9C59DC97")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsPlatformReferenceProviderContext3 {
    [DispIdAttribute("1610678272")]
public Guid ProviderGuid { get; }
    [DispIdAttribute("1610678273")]
public Array References { get; }
    [DispIdAttribute("1610678276")]
public Array ReferenceFilterPaths { get; public set; }
    [DispIdAttribute("1610743808")]
public string TargetPlatformIdentifier { get; public set; }
    [DispIdAttribute("1610743810")]
public string TargetPlatformVersion { get; public set; }
    [DispIdAttribute("1610743812")]
public string TargetFrameworkMoniker { get; public set; }
    [DispIdAttribute("1610743814")]
public string AssemblySearchPaths { get; public set; }
    [DispIdAttribute("1610743816")]
public string TargetPlatformReferencesLocation { get; public set; }
    [DispIdAttribute("1610743818")]
public string SDKRegistryRoot { get; public set; }
    [DispIdAttribute("1610743820")]
public string SDKDirectoryRoot { get; public set; }
    [DispIdAttribute("1610743822")]
public string SDKFilterKeywords { get; public set; }
    [DispIdAttribute("1610743824")]
public string VisualStudioVersion { get; public set; }
    [DispIdAttribute("1610743826")]
public bool ExpandSDKContents { get; public set; }
    [ComAliasNameAttribute("VsShell.VSSDKPROVIDERTAB")]
[DispIdAttribute("1610743828")]
public UInt32 Tabs { get; public set; }
    [DispIdAttribute("1610743832")]
public bool IsImplicitlyReferenced { get; public set; }
    [DispIdAttribute("1610809344")]
public string SDKExtensionDirectoryRoot { get; public set; }
    [DispIdAttribute("1610874880")]
public string SDKIdentifier { get; public set; }
    [DispIdAttribute("1610874882")]
public string SDKVersion { get; public set; }
    public abstract virtual Guid get_ProviderGuid();
    public abstract virtual Array get_References();
    public abstract virtual void AddReference(IVsReference pReference);
    public abstract virtual IVsReference CreateReference();
    public abstract virtual Array get_ReferenceFilterPaths();
    public abstract virtual void set_ReferenceFilterPaths(Array value);
    public abstract virtual string get_TargetPlatformIdentifier();
    public abstract virtual void set_TargetPlatformIdentifier(string value);
    public abstract virtual string get_TargetPlatformVersion();
    public abstract virtual void set_TargetPlatformVersion(string value);
    public abstract virtual string get_TargetFrameworkMoniker();
    public abstract virtual void set_TargetFrameworkMoniker(string value);
    public abstract virtual string get_AssemblySearchPaths();
    public abstract virtual void set_AssemblySearchPaths(string value);
    public abstract virtual string get_TargetPlatformReferencesLocation();
    public abstract virtual void set_TargetPlatformReferencesLocation(string value);
    public abstract virtual string get_SDKRegistryRoot();
    public abstract virtual void set_SDKRegistryRoot(string value);
    public abstract virtual string get_SDKDirectoryRoot();
    public abstract virtual void set_SDKDirectoryRoot(string value);
    public abstract virtual string get_SDKFilterKeywords();
    public abstract virtual void set_SDKFilterKeywords(string value);
    public abstract virtual string get_VisualStudioVersion();
    public abstract virtual void set_VisualStudioVersion(string value);
    public abstract virtual bool get_ExpandSDKContents();
    public abstract virtual void set_ExpandSDKContents(bool value);
    public abstract virtual UInt32 get_Tabs();
    public abstract virtual void set_Tabs(UInt32 value);
    public abstract virtual string GetTabTitle(UInt32 etabId);
    public abstract virtual void SetTabTitle(UInt32 etabId, string szTabTitle);
    public abstract virtual bool get_IsImplicitlyReferenced();
    public abstract virtual void set_IsImplicitlyReferenced(bool value);
    public abstract virtual string GetNoItemsMessageForTab(UInt32 etabId);
    public abstract virtual void SetNoItemsMessageForTab(UInt32 etabId, string bstrNoItemsMessage);
    public abstract virtual string get_SDKExtensionDirectoryRoot();
    public abstract virtual void set_SDKExtensionDirectoryRoot(string value);
    public abstract virtual string get_SDKIdentifier();
    public abstract virtual void set_SDKIdentifier(string value);
    public abstract virtual string get_SDKVersion();
    public abstract virtual void set_SDKVersion(string value);
}
[GuidAttribute("2BD6379A-CD38-4FF7-BCC5-C2968B2FE48D")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsPrefetchLoadProgress {
    public abstract virtual void ProjectPrefetchCompleted(Guid& guidProjectId, bool fSuccessful, UInt32 dwFlags);
}
[GuidAttribute("C917ECD8-ED08-49BE-97F2-6C994BF32072")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsPrefetchLoadProgress2 {
    public abstract virtual void PrefetchResult(int count, VsPrefetchedProjectInfo[] rgProjects);
}
[GuidAttribute("C9635D64-F4BA-4162-A9E2-008D5789E61F")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsPrefetchProjectFactory {
    public abstract virtual void PrepareProjects(string szActiveSolutionConfiguration, UInt32 dwSolutionLoadFlags, int count, VsProjectLoadInfo[] rgPprojects, IVsPrefetchLoadProgress pProgress);
    public abstract virtual void EndSolutionLoad();
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("6DE3E607-1E2C-4F56-B4A6-BCAF63A0BB9F")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsPreviewChangesEngine {
    public abstract virtual int GetTitle(String& pbstrTitle);
    public abstract virtual int GetDescription(String& pbstrDescription);
    public abstract virtual int GetTextViewDescription(String& pbstrTextViewDescription);
    public abstract virtual int GetWarning(String& pbstrWarning, Int32& ppcwlWarningLevel);
    public abstract virtual int GetHelpContext(String& pbstrHelpContext);
    public abstract virtual int GetConfirmation(String& pbstrConfirmation);
    public abstract virtual int GetRootChangesList(Object& ppIUnknownPreviewChangesList);
    public abstract virtual int ApplyChanges();
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("B334F714-993B-4902-89E0-792213B538DB")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsPreviewChangesList {
    public abstract virtual int GetFlags(UInt32& pFlags);
    public abstract virtual int GetItemCount(UInt32& pCount);
    public abstract virtual int GetExpandedList(UInt32 index, Int32& pfCanRecurse, IVsLiteTreeList& pptlNode);
    public abstract virtual int LocateExpandedList(IVsLiteTreeList ExpandedList, UInt32& iIndex);
    public abstract virtual int OnClose(VSTREECLOSEACTIONS[] ptca);
    public abstract virtual int GetText(UInt32 index, VSTREETEXTOPTIONS tto, String& ppszText);
    public abstract virtual int GetTipText(UInt32 index, VSTREETOOLTIPTYPE eTipType, String& ppszText);
    public abstract virtual int GetExpandable(UInt32 index, Int32& pfExpandable);
    public abstract virtual int GetDisplayData(UInt32 index, VSTREEDISPLAYDATA[] pData);
    public abstract virtual int UpdateCounter(UInt32& pCurUpdate, UInt32& pgrfChanges);
    public abstract virtual int GetListChanges(UInt32& pcChanges, VSTREELISTITEMCHANGE[] prgListChanges);
    public abstract virtual int ToggleState(UInt32 index, UInt32& ptscr);
    public abstract virtual int OnRequestSource(UInt32 index, object pIUnknownTextView);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("AF142B19-FB37-40C0-9C28-6617ADBFFAC7")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsPreviewChangesService {
    public abstract virtual int PreviewChanges(IVsPreviewChangesEngine pIVsPreviewChangesEngine);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("925E8559-17DF-494C-87DA-BBEE251702DE")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsPrioritizedSolutionEvents {
    public abstract virtual int PrioritizedOnAfterOpenProject(IVsHierarchy pHierarchy, int fAdded);
    public abstract virtual int PrioritizedOnBeforeCloseProject(IVsHierarchy pHierarchy, int fRemoved);
    public abstract virtual int PrioritizedOnAfterLoadProject(IVsHierarchy pStubHierarchy, IVsHierarchy pRealHierarchy);
    public abstract virtual int PrioritizedOnBeforeUnloadProject(IVsHierarchy pRealHierarchy, IVsHierarchy pStubHierarchy);
    public abstract virtual int PrioritizedOnAfterOpenSolution(object pUnkReserved, int fNewSolution);
    public abstract virtual int PrioritizedOnBeforeCloseSolution(object pUnkReserved);
    public abstract virtual int PrioritizedOnAfterCloseSolution(object pUnkReserved);
    public abstract virtual int PrioritizedOnAfterMergeSolution(object pUnkReserved);
    public abstract virtual int PrioritizedOnBeforeOpeningChildren(IVsHierarchy pHierarchy);
    public abstract virtual int PrioritizedOnAfterOpeningChildren(IVsHierarchy pHierarchy);
    public abstract virtual int PrioritizedOnBeforeClosingChildren(IVsHierarchy pHierarchy);
    public abstract virtual int PrioritizedOnAfterClosingChildren(IVsHierarchy pHierarchy);
    public abstract virtual int PrioritizedOnAfterRenameProject(IVsHierarchy pHierarchy);
    public abstract virtual int PrioritizedOnAfterChangeProjectParent(IVsHierarchy pHierarchy);
    [ObsoleteAttribute("Open Solution from SourceControl feature is removed")]
public abstract virtual int PrioritizedOnAfterAsynchOpenProject(IVsHierarchy pHierarchy, int fAdded);
}
[GuidAttribute("6E8674B2-EFA9-4CD6-9743-CC7A549BB0EB")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsPrioritizedSolutionEventsSink {
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("3A83904D-4540-4C51-95A7-618B32A9A9C0")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsProfferCommands3 {
    public abstract virtual int AddNamedCommand(Guid& pguidPackage, Guid& pguidCmdGroup, string pszCmdNameCanonical, UInt32& pdwCmdId, string pszCmdNameLocalized, string pszBtnText, string pszCmdTooltip, string pszSatelliteDLL, UInt32 dwBitmapResourceId, UInt32 dwBitmapImageIndex, UInt32 dwCmdFlagsDefault, UInt32 cUIContexts, Guid[] rgguidUIContexts);
    public abstract virtual int RemoveNamedCommand(string pszCmdNameCanonical);
    public abstract virtual int RenameNamedCommand(string pszCmdNameCanonical, string pszCmdNameCanonicalNew, string pszCmdNameLocalizedNew);
    public abstract virtual int AddCommandBarControl(string pszCmdNameCanonical, object pCmdBarParent, UInt32 dwIndex, UInt32 dwCmdType, Object& ppCmdBarCtrl);
    public abstract virtual int RemoveCommandBarControl(object pCmdBarCtrl);
    public abstract virtual int AddCommandBar(string pszCmdBarName, UInt32 dwType, object pCmdBarParent, UInt32 dwIndex, Object& ppCmdBar);
    public abstract virtual int RemoveCommandBar(object pCmdBar);
    public abstract virtual int FindCommandBar(object pToolbarSet, Guid& pguidCmdGroup, UInt32 dwMenuId, Object& ppdispCmdBar);
    public abstract virtual int AddNamedCommand2(Guid& pguidPackage, Guid& pguidCmdGroup, string pszCmdNameCanonical, UInt32& pdwCmdId, string pszCmdNameLocalized, string pszBtnText, string pszCmdTooltip, string pszSatelliteDLL, UInt32 dwBitmapResourceId, UInt32 dwBitmapImageIndex, UInt32 dwCmdFlagsDefault, UInt32 cUIContexts, Guid[] rgguidUIContexts, UInt32 dwUIElementType);
}
[GuidAttribute("3EDBD520-6748-43A4-8BE4-CADAB7472CF6")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsProfferCommands4 {
    public abstract virtual int AddNamedCommand(Guid& pguidPackage, Guid& pguidCmdGroup, string pszCmdNameCanonical, UInt32& pdwCmdId, string pszCmdNameLocalized, string pszBtnText, string pszCmdTooltip, string pszSatelliteDLL, UInt32 dwBitmapResourceId, UInt32 dwBitmapImageIndex, UInt32 dwCmdFlagsDefault, UInt32 cUIContexts, Guid[] rgguidUIContexts);
    public abstract virtual int RemoveNamedCommand(string pszCmdNameCanonical);
    public abstract virtual int RenameNamedCommand(string pszCmdNameCanonical, string pszCmdNameCanonicalNew, string pszCmdNameLocalizedNew);
    public abstract virtual int AddCommandBarControl(string pszCmdNameCanonical, object pCmdBarParent, UInt32 dwIndex, UInt32 dwCmdType, Object& ppCmdBarCtrl);
    public abstract virtual int RemoveCommandBarControl(object pCmdBarCtrl);
    public abstract virtual int AddCommandBar(string pszCmdBarName, UInt32 dwType, object pCmdBarParent, UInt32 dwIndex, Object& ppCmdBar);
    public abstract virtual int RemoveCommandBar(object pCmdBar);
    public abstract virtual int FindCommandBar(object pToolbarSet, Guid& pguidCmdGroup, UInt32 dwMenuId, Object& ppdispCmdBar);
    public abstract virtual int AddNamedCommand2(Guid& pguidPackage, Guid& pguidCmdGroup, string pszCmdNameCanonical, UInt32& pdwCmdId, string pszCmdNameLocalized, string pszBtnText, string pszCmdTooltip, string pszSatelliteDLL, UInt32 dwBitmapResourceId, UInt32 dwBitmapImageIndex, UInt32 dwCmdFlagsDefault, UInt32 cUIContexts, Guid[] rgguidUIContexts, UInt32 dwUIElementType);
    public abstract virtual int AddNamedCommand3(Guid& pguidPackage, Guid& pguidCmdGroup, string pszCmdNameCanonical, UInt32& pdwCmdId, string pszCmdNameLocalized, string pszBtnText, string pszCmdTooltip, object punkImage, UInt32 dwCmdFlagsDefault, UInt32 cUIContexts, Guid[] rgguidUIContexts, UInt32 dwUIElementType);
}
[GuidAttribute("C486A0C9-C170-4CAD-A2A2-292EE54969B5")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsProfilableProjectCfg {
    public bool SuppressSignedAssemblyWarnings { get; }
    public bool LegacyWebSupportRequired { get; }
    public abstract virtual bool get_SuppressSignedAssemblyWarnings();
    public abstract virtual bool get_LegacyWebSupportRequired();
    public abstract virtual void GetSupportedProfilingTasks(Array& tasks);
    public abstract virtual void BeforeLaunch(string profilingTask);
    public abstract virtual void BeforeTargetsLaunched();
    public abstract virtual void LaunchProfiler();
    public abstract virtual void QueryProfilerTargetInfoEnum(IEnumVsProfilerTargetInfos& targetsEnum);
    public abstract virtual void AllBrowserTargetsFinished();
    public abstract virtual void ProfilerAnalysisFinished();
}
[GuidAttribute("466EFAF6-F832-4079-83CD-4BBB02719C1D")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsProfileDataManager {
    public abstract virtual int LastResetPoint(String& pbstrResetFilename);
    public abstract virtual int GetSettingsFiles(UInt32 fileLocations, IVsProfileSettingsFileCollection& ppCollection);
    public abstract virtual int GetDefaultSettingsLocation(String& pbstrSettingsLocation);
    public abstract virtual int GetUniqueExportFileName(UInt32 flags, String& pbstrExportFile);
    public abstract virtual int GetSettingsFileExtension(String& pbstrSettingsFileExtension);
    public abstract virtual int GetSettingsForExport(IVsProfileSettingsTree& ppSettingsTree);
    public abstract virtual int ExportSettings(string bstrFilePath, IVsProfileSettingsTree pSettingsTree, IVsSettingsErrorInformation& ppsettingsErrorInformation);
    public abstract virtual int ImportSettings(IVsProfileSettingsTree pSettingsTree, IVsSettingsErrorInformation& ppsettingsErrorInformation);
    public abstract virtual int ResetSettings(IVsProfileSettingsFileInfo pFileInfo, IVsSettingsErrorInformation& ppsettingsErrorInformation);
    public abstract virtual int ExportAllSettings(string bstrFilePath, IVsSettingsErrorInformation& ppsettingsErrorInformation);
    public abstract virtual int AutoSaveAllSettings(IVsSettingsErrorInformation& ppsettingsErrorInformation);
    public abstract virtual int CheckUpdateTeamSettings(UInt32 dwFlags);
    public abstract virtual int ReportTeamSettingsChanged(UInt32 dwFlags);
    public abstract virtual int ShowProfilesUI();
}
[GuidAttribute("85DE5AFD-0624-45ED-B0B7-53666BEBDFDB")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsProfilerAttachTargetInfo {
    [ComAliasNameAttribute("Microsoft.VisualStudio.Shell.Interop.VSPROFILERPROCESSARCHTYPE")]
public VSPROFILERPROCESSARCHTYPE ProcessArchitecture { get; }
    [ComAliasNameAttribute("OLE.DWORD")]
public UInt32 ProcessId { get; }
    public abstract virtual VSPROFILERPROCESSARCHTYPE get_ProcessArchitecture();
    public abstract virtual UInt32 get_ProcessId();
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("8DFD2DFC-D11E-4430-B311-1D4C732C45C3")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsProfilerLaunchBrowserTargetInfo {
    [ComAliasNameAttribute("Microsoft.VisualStudio.Shell.Interop.VSPROFILERPROCESSARCHTYPE")]
public VSPROFILERPROCESSARCHTYPE ProcessArchitecture { get; }
    public Array References { get; }
    public Array EnvironmentSettings { get; }
    [ComAliasNameAttribute("Microsoft.VisualStudio.Shell.Interop.VSPROFILERLAUNCHOPTS")]
public UInt32 LaunchProfilerFlags { get; }
    public string Url { get; }
    public abstract virtual VSPROFILERPROCESSARCHTYPE get_ProcessArchitecture();
    public abstract virtual Array get_References();
    public abstract virtual Array get_EnvironmentSettings();
    public abstract virtual UInt32 get_LaunchProfilerFlags();
    public abstract virtual string get_Url();
}
[GuidAttribute("D7DC8C01-AFFF-45FE-B338-426E8072F6B7")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsProfilerLauncher {
    public abstract virtual int LaunchProfiler(IEnumVsProfilerTargetInfos targetsEnum);
    public abstract virtual int QueryProfilingEnvironment(Array& environment);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("9DF0CDE8-5971-408A-B76F-993A8A78EEE0")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsProfilerLaunchExeTargetInfo {
    [ComAliasNameAttribute("Microsoft.VisualStudio.Shell.Interop.VSPROFILERPROCESSARCHTYPE")]
public VSPROFILERPROCESSARCHTYPE ProcessArchitecture { get; }
    public Array References { get; }
    public Array EnvironmentSettings { get; }
    [ComAliasNameAttribute("Microsoft.VisualStudio.Shell.Interop.VSPROFILERLAUNCHOPTS")]
public UInt32 LaunchProfilerFlags { get; }
    public string ExecutableArguments { get; }
    public string ExecutablePath { get; }
    public string WorkingDirectory { get; }
    public abstract virtual VSPROFILERPROCESSARCHTYPE get_ProcessArchitecture();
    public abstract virtual Array get_References();
    public abstract virtual Array get_EnvironmentSettings();
    public abstract virtual UInt32 get_LaunchProfilerFlags();
    public abstract virtual string get_ExecutableArguments();
    public abstract virtual string get_ExecutablePath();
    public abstract virtual string get_WorkingDirectory();
}
[GuidAttribute("5E580D53-B85D-41AB-A8F8-B4CD5517EC49")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsProfilerLaunchTargetInfo {
    [ComAliasNameAttribute("Microsoft.VisualStudio.Shell.Interop.VSPROFILERPROCESSARCHTYPE")]
public VSPROFILERPROCESSARCHTYPE ProcessArchitecture { get; }
    public Array References { get; }
    public Array EnvironmentSettings { get; }
    [ComAliasNameAttribute("Microsoft.VisualStudio.Shell.Interop.VSPROFILERLAUNCHOPTS")]
public UInt32 LaunchProfilerFlags { get; }
    public abstract virtual VSPROFILERPROCESSARCHTYPE get_ProcessArchitecture();
    public abstract virtual Array get_References();
    public abstract virtual Array get_EnvironmentSettings();
    public abstract virtual UInt32 get_LaunchProfilerFlags();
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("0D9FAB5B-0B37-44D5-B6C2-A66EF7FE7F6C")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsProfilerLaunchWebServerTargetInfo {
    [ComAliasNameAttribute("Microsoft.VisualStudio.Shell.Interop.VSPROFILERPROCESSARCHTYPE")]
public VSPROFILERPROCESSARCHTYPE ProcessArchitecture { get; }
    public Array References { get; }
    public Array EnvironmentSettings { get; }
    [ComAliasNameAttribute("Microsoft.VisualStudio.Shell.Interop.VSPROFILERLAUNCHOPTS")]
public UInt32 LaunchProfilerFlags { get; }
    public string Url { get; }
    public abstract virtual VSPROFILERPROCESSARCHTYPE get_ProcessArchitecture();
    public abstract virtual Array get_References();
    public abstract virtual Array get_EnvironmentSettings();
    public abstract virtual UInt32 get_LaunchProfilerFlags();
    public abstract virtual string get_Url();
}
[GuidAttribute("11F356E3-2BDC-4AB4-ACD2-48DB043951AA")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsProfilerTargetInfo {
    [ComAliasNameAttribute("Microsoft.VisualStudio.Shell.Interop.VSPROFILERPROCESSARCHTYPE")]
public VSPROFILERPROCESSARCHTYPE ProcessArchitecture { get; }
    public abstract virtual VSPROFILERPROCESSARCHTYPE get_ProcessArchitecture();
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("0FAF274A-3898-445A-822F-7D42927EFEF9")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsProfileSettingsFileCollection {
    public abstract virtual int GetCount(Int32& pCount);
    public abstract virtual int GetSettingsFile(int index, IVsProfileSettingsFileInfo& ppFileInfo);
    public abstract virtual int AddBrowseFile(string bstrFilePath, IVsProfileSettingsFileInfo& ppFileInfo);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("8E8E55A9-4111-4808-A0D0-7F067FB3A62F")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsProfileSettingsFileInfo {
    public abstract virtual int GetFilePath(String& pbstrFilePath);
    public abstract virtual int GetFileLocation(UInt32& pfileLocation);
    public abstract virtual int GetFriendlyName(String& pbstrFriendlyName);
    public abstract virtual int GetDescription(String& pbstrDescription);
    public abstract virtual int GetSettingsForImport(IVsProfileSettingsTree& ppSettingsTree);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("23B6FED1-C3CB-4006-BAD0-64A7EB61DF39")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsProfileSettingsTree {
    public abstract virtual int GetChildCount(Int32& pCount);
    public abstract virtual int GetChild(int index, IVsProfileSettingsTree& ppChildTree);
    public abstract virtual int GetEnabledChildCount(Int32& pCount);
    public abstract virtual int GetDisplayName(String& pbstrName);
    public abstract virtual int GetDescription(String& pbstrDescription);
    public abstract virtual int GetCategory(String& pbstrCategory);
    public abstract virtual int GetRegisteredName(String& pbstrRegisteredName);
    public abstract virtual int GetNameForID(String& pbstrNameForID);
    public abstract virtual int GetFullPath(String& pbstrFullPath);
    public abstract virtual int GetPackage(String& pbstrPackage);
    public abstract virtual int GetIsAutomationPropBased(Int32& pfAutoProp);
    public abstract virtual int GetEnabled(Int32& pfEnabled);
    public abstract virtual int SetEnabled(int fEnabled, int fIncludeChildren);
    public abstract virtual int GetVisible(Int32& pfVisible);
    public abstract virtual int GetAlternatePath(String& pbstrAlternatePath);
    public abstract virtual int GetIsPlaceholder(Int32& pfPlaceholder);
    public abstract virtual int GetRepresentedNode(IVsProfileSettingsTree& ppRepresentedNode);
    public abstract virtual int GetSecurityLevel(UInt32& pSecurityLevel);
    public abstract virtual int GetSensitivityLevel(UInt32& pSensitivityLevel);
    public abstract virtual int FindChildTree(string bstrNameSearch, IVsProfileSettingsTree& ppChildTree);
    public abstract virtual int AddChildTree(IVsProfileSettingsTree pChildTree);
    public abstract virtual int RevisePlacements(IVsProfileSettingsTree pTreeRoot, IVsProfileSettingsTree pTreeRootBasis, string bstrCurrentParent);
}
[GuidAttribute("D06B7887-893C-439C-A231-8BF3E5335E30")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsProfilesManagerUI {
    public abstract virtual int ShowProfilesUI(IVsProfileDataManager pDataManager);
}
[GuidAttribute("0a4f31cf-c488-4ef0-a667-4630991f9ad6")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsProgress {
    public abstract virtual void Report(double value);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("CD4028ED-C4D8-44BA-890F-E7FB02A380C6")]
[ComConversionLossAttribute]
public interface Microsoft.VisualStudio.Shell.Interop.IVsProject {
    public abstract virtual int IsDocumentInProject(string pszMkDocument, Int32& pfFound, VSDOCUMENTPRIORITY[] pdwPriority, UInt32& pitemid);
    public abstract virtual int GetMkDocument(UInt32 itemid, String& pbstrMkDocument);
    public abstract virtual int OpenItem(UInt32 itemid, Guid& rguidLogicalView, IntPtr punkDocDataExisting, IVsWindowFrame& ppWindowFrame);
    public abstract virtual int GetItemContext(UInt32 itemid, IServiceProvider& ppSP);
    public abstract virtual int GenerateUniqueItemName(UInt32 itemidLoc, string pszExt, string pszSuggestedRoot, String& pbstrItemName);
    public abstract virtual int AddItem(UInt32 itemidLoc, VSADDITEMOPERATION dwAddItemOperation, string pszItemName, UInt32 cFilesToOpen, String[] rgpszFilesToOpen, IntPtr hwndDlgOwner, VSADDRESULT[] pResult);
}
[GuidAttribute("4AF886C3-7796-4C81-A174-4A87080DEE58")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsProject2 {
    public abstract virtual int IsDocumentInProject(string pszMkDocument, Int32& pfFound, VSDOCUMENTPRIORITY[] pdwPriority, UInt32& pitemid);
    public abstract virtual int GetMkDocument(UInt32 itemid, String& pbstrMkDocument);
    public abstract virtual int OpenItem(UInt32 itemid, Guid& rguidLogicalView, IntPtr punkDocDataExisting, IVsWindowFrame& ppWindowFrame);
    public abstract virtual int GetItemContext(UInt32 itemid, IServiceProvider& ppSP);
    public abstract virtual int GenerateUniqueItemName(UInt32 itemidLoc, string pszExt, string pszSuggestedRoot, String& pbstrItemName);
    public abstract virtual int AddItem(UInt32 itemidLoc, VSADDITEMOPERATION dwAddItemOperation, string pszItemName, UInt32 cFilesToOpen, String[] rgpszFilesToOpen, IntPtr hwndDlgOwner, VSADDRESULT[] pResult);
    public abstract virtual int RemoveItem(UInt32 dwReserved, UInt32 itemid, Int32& pfResult);
    public abstract virtual int ReopenItem(UInt32 itemid, Guid& rguidEditorType, string pszPhysicalView, Guid& rguidLogicalView, IntPtr punkDocDataExisting, IVsWindowFrame& ppWindowFrame);
}
[GuidAttribute("1C11116E-4FF2-4A80-82DC-69F95042E0A4")]
[ComConversionLossAttribute]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsProject3 {
    public abstract virtual int IsDocumentInProject(string pszMkDocument, Int32& pfFound, VSDOCUMENTPRIORITY[] pdwPriority, UInt32& pitemid);
    public abstract virtual int GetMkDocument(UInt32 itemid, String& pbstrMkDocument);
    public abstract virtual int OpenItem(UInt32 itemid, Guid& rguidLogicalView, IntPtr punkDocDataExisting, IVsWindowFrame& ppWindowFrame);
    public abstract virtual int GetItemContext(UInt32 itemid, IServiceProvider& ppSP);
    public abstract virtual int GenerateUniqueItemName(UInt32 itemidLoc, string pszExt, string pszSuggestedRoot, String& pbstrItemName);
    public abstract virtual int AddItem(UInt32 itemidLoc, VSADDITEMOPERATION dwAddItemOperation, string pszItemName, UInt32 cFilesToOpen, String[] rgpszFilesToOpen, IntPtr hwndDlgOwner, VSADDRESULT[] pResult);
    public abstract virtual int RemoveItem(UInt32 dwReserved, UInt32 itemid, Int32& pfResult);
    public abstract virtual int ReopenItem(UInt32 itemid, Guid& rguidEditorType, string pszPhysicalView, Guid& rguidLogicalView, IntPtr punkDocDataExisting, IVsWindowFrame& ppWindowFrame);
    public abstract virtual int AddItemWithSpecific(UInt32 itemidLoc, VSADDITEMOPERATION dwAddItemOperation, string pszItemName, UInt32 cFilesToOpen, String[] rgpszFilesToOpen, IntPtr hwndDlgOwner, UInt32 grfEditorFlags, Guid& rguidEditorType, string pszPhysicalView, Guid& rguidLogicalView, VSADDRESULT[] pResult);
    public abstract virtual int OpenItemWithSpecific(UInt32 itemid, UInt32 grfEditorFlags, Guid& rguidEditorType, string pszPhysicalView, Guid& rguidLogicalView, IntPtr punkDocDataExisting, IVsWindowFrame& ppWindowFrame);
    public abstract virtual int TransferItem(string pszMkDocumentOld, string pszMkDocumentNew, IVsWindowFrame punkWindowFrame);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("12A0D88D-D8FE-4637-8350-214B5C29DE31")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsProject4 {
    public abstract virtual int IsDocumentInProject(string pszMkDocument, Int32& pfFound, VSDOCUMENTPRIORITY[] pdwPriority, UInt32& pitemid);
    public abstract virtual int GetMkDocument(UInt32 itemid, String& pbstrMkDocument);
    public abstract virtual int OpenItem(UInt32 itemid, Guid& rguidLogicalView, IntPtr punkDocDataExisting, IVsWindowFrame& ppWindowFrame);
    public abstract virtual int GetItemContext(UInt32 itemid, IServiceProvider& ppSP);
    public abstract virtual int GenerateUniqueItemName(UInt32 itemidLoc, string pszExt, string pszSuggestedRoot, String& pbstrItemName);
    public abstract virtual int AddItem(UInt32 itemidLoc, VSADDITEMOPERATION dwAddItemOperation, string pszItemName, UInt32 cFilesToOpen, String[] rgpszFilesToOpen, IntPtr hwndDlgOwner, VSADDRESULT[] pResult);
    public abstract virtual int RemoveItem(UInt32 dwReserved, UInt32 itemid, Int32& pfResult);
    public abstract virtual int ReopenItem(UInt32 itemid, Guid& rguidEditorType, string pszPhysicalView, Guid& rguidLogicalView, IntPtr punkDocDataExisting, IVsWindowFrame& ppWindowFrame);
    public abstract virtual int AddItemWithSpecific(UInt32 itemidLoc, VSADDITEMOPERATION dwAddItemOperation, string pszItemName, UInt32 cFilesToOpen, String[] rgpszFilesToOpen, IntPtr hwndDlgOwner, UInt32 grfEditorFlags, Guid& rguidEditorType, string pszPhysicalView, Guid& rguidLogicalView, VSADDRESULT[] pResult);
    public abstract virtual int OpenItemWithSpecific(UInt32 itemid, UInt32 grfEditorFlags, Guid& rguidEditorType, string pszPhysicalView, Guid& rguidLogicalView, IntPtr punkDocDataExisting, IVsWindowFrame& ppWindowFrame);
    public abstract virtual int TransferItem(string pszMkDocumentOld, string pszMkDocumentNew, IVsWindowFrame punkWindowFrame);
    public abstract virtual int ContainsFileEndingWith(string pszEndingWith, Int32& pfDoesContain);
    public abstract virtual int ContainsFileWithItemType(string pszItemType, Int32& pfDoesContain);
    public abstract virtual int GetFilesEndingWith(string pszEndingWith, UInt32 celt, UInt32[] rgItemids, UInt32& pcActual);
    public abstract virtual int GetFilesWithItemType(string pszItemType, UInt32 celt, UInt32[] rgItemids, UInt32& pcActual);
}
[GuidAttribute("B04F747B-48EE-4EC7-8A2E-E9417F6214C3")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsProject5 {
    public abstract virtual int IsDocumentInProject2(string pszMkDocument, Int32& pfFound, Int32& pdwPriority2, UInt32& pitemid);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("D188BF68-6BD3-4A81-9D6F-487E5291B061")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsProjectAcquisitionSetupDriver {
    public Guid SetupDriverGuid { get; }
    public abstract virtual IVsTask Install(object components);
    public abstract virtual Guid get_SetupDriverGuid();
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("AE8D3384-EF51-4628-AC2B-3D5F49B43025")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsProjectAcquisitionSetupDriver2 {
    public Guid SetupDriverGuid { get; }
    public abstract virtual IVsTask Install(object components);
    public abstract virtual Guid get_SetupDriverGuid();
    public abstract virtual IVsTask Install(string operation, string additionalParameters, Guid activityId);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("5B24A993-73D5-4AB6-AC6D-2B7F872D5A99")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsProjectAcquisitionSetupDriver3 {
    public Guid SetupDriverGuid { get; }
    public abstract virtual IVsTask Install(object components);
    public abstract virtual Guid get_SetupDriverGuid();
    public abstract virtual IVsTask Install(string operation, string additionalParameters, Guid activityId);
    public abstract virtual IVsTask Install2(string operation, string additionalParameters, Guid activityId, string offlineBootstrapperPath, string offlineInstallerPath);
}
[NullableContextAttribute("2")]
[GuidAttribute("101d210d-5b28-4e02-b220-19949ff4023b")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsProjectAsyncOpen {
    [NullableContextAttribute("1")]
public abstract virtual IVsTask OpenItemAsync(UInt32 itemId, Guid logicalView, bool shouldGetDocDataFromRdt, object docData);
    public abstract virtual IVsTask ReopenItemAsync(UInt32 itemId, Guid editorType, string physicalView, Guid logicalView, bool shouldGetDocDataFromRdt, object docData);
    public abstract virtual IVsTask OpenItemWithSpecificAsync(UInt32 itemId, UInt32 editorFlags, Guid editorType, string physicalView, Guid logicalView, bool shouldGetDocDataFromRdt, object docData);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("7FBEA20B-68A9-48EC-9032-114268286B24")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsProjectBuildMessageEvents {
    public abstract virtual bool OnBuildMessage(UInt32 Category, string szMessage, string szErrorCode, string szHelpKeyword, int line, int column, int endingLine, int endingColumn, string szFile, object pAdditionalInfo);
}
[GuidAttribute("359BF057-DA83-455C-9B72-EC00CB478C85")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsProjectBuildMessageReporter {
    public abstract virtual void AdviseProjectBuildMessageEvents(IVsProjectBuildMessageEvents pEvents, UInt32& pdwCookie);
    public abstract virtual void UnadviseProjectBuildMessageEvents(UInt32 dwCookie);
}
[GuidAttribute("EB0718C0-E050-4657-872B-E845CD4F617B")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsProjectBuildSystem {
    public abstract virtual int SetHostObject(string pszTargetName, string pszTaskName, object punkHostObject);
    public abstract virtual int StartBatchEdit();
    public abstract virtual int EndBatchEdit();
    public abstract virtual int CancelBatchEdit();
    public abstract virtual int BuildTarget(string pszTargetName, Boolean& pbSuccess);
    public abstract virtual int GetBuildSystemKind(UInt32& pBuildSystemKind);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("2DBDF061-439B-4822-9727-CA3ED918B658")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsProjectCfg {
    public abstract virtual int get_DisplayName(String& pbstrDisplayName);
    public abstract virtual int get_IsDebugOnly(Int32& pfIsDebugOnly);
    public abstract virtual int get_IsReleaseOnly(Int32& pfIsReleaseOnly);
    public abstract virtual int EnumOutputs(IVsEnumOutputs& ppIVsEnumOutputs);
    public abstract virtual int OpenOutput(string szOutputCanonicalName, IVsOutput& ppIVsOutput);
    public abstract virtual int get_ProjectCfgProvider(IVsProjectCfgProvider& ppIVsProjectCfgProvider);
    public abstract virtual int get_BuildableProjectCfg(IVsBuildableProjectCfg& ppIVsBuildableProjectCfg);
    public abstract virtual int get_CanonicalName(String& pbstrCanonicalName);
    public abstract virtual int get_Platform(Guid& pguidPlatform);
    public abstract virtual int get_IsPackaged(Int32& pfIsPackaged);
    public abstract virtual int get_IsSpecifyingOutputSupported(Int32& pfIsSpecifyingOutputSupported);
    public abstract virtual int get_TargetCodePage(UInt32& puiTargetCodePage);
    public abstract virtual int get_UpdateSequenceNumber(ULARGE_INTEGER[] puliUSN);
    public abstract virtual int get_RootURL(String& pbstrRootURL);
}
[InterfaceTypeAttribute("1")]
[ComConversionLossAttribute]
[GuidAttribute("A7ADE7A0-F286-4C03-8137-D6D0EF3D6848")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsProjectCfg2 {
    public abstract virtual int get_DisplayName(String& pbstrDisplayName);
    public abstract virtual int get_IsDebugOnly(Int32& pfIsDebugOnly);
    public abstract virtual int get_IsReleaseOnly(Int32& pfIsReleaseOnly);
    public abstract virtual int EnumOutputs(IVsEnumOutputs& ppIVsEnumOutputs);
    public abstract virtual int OpenOutput(string szOutputCanonicalName, IVsOutput& ppIVsOutput);
    public abstract virtual int get_ProjectCfgProvider(IVsProjectCfgProvider& ppIVsProjectCfgProvider);
    public abstract virtual int get_BuildableProjectCfg(IVsBuildableProjectCfg& ppIVsBuildableProjectCfg);
    public abstract virtual int get_CanonicalName(String& pbstrCanonicalName);
    public abstract virtual int get_Platform(Guid& pguidPlatform);
    public abstract virtual int get_IsPackaged(Int32& pfIsPackaged);
    public abstract virtual int get_IsSpecifyingOutputSupported(Int32& pfIsSpecifyingOutputSupported);
    public abstract virtual int get_TargetCodePage(UInt32& puiTargetCodePage);
    public abstract virtual int get_UpdateSequenceNumber(ULARGE_INTEGER[] puliUSN);
    public abstract virtual int get_RootURL(String& pbstrRootURL);
    public abstract virtual int get_CfgType(Guid& iidCfg, IntPtr& ppCfg);
    public abstract virtual int get_OutputGroups(UInt32 celt, IVsOutputGroup[] rgpcfg, UInt32[] pcActual);
    public abstract virtual int OpenOutputGroup(string szCanonicalName, IVsOutputGroup& ppIVsOutputGroup);
    public abstract virtual int OutputsRequireAppRoot(Int32& pfRequiresAppRoot);
    public abstract virtual int get_VirtualRoot(String& pbstrVRoot);
    public abstract virtual int get_IsPrivate(Int32& pfPrivate);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("255B9803-BA83-421B-924E-CDE7FAAA86A3")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsProjectCfgDebugTargetSelection {
    public abstract virtual bool HasDebugTargets(IVsDebugTargetSelectionService pDebugTargetSelectionService, Array& pbstrSupportedTargetCommandIDs);
    public abstract virtual Array GetDebugTargetListOfType(Guid guidDebugTargetType, UInt32 debugTargetTypeId);
    public abstract virtual void GetCurrentDebugTarget(Guid& pguidDebugTargetType, UInt32& pDebugTargetTypeId, String& pbstrCurrentDebugTarget);
    public abstract virtual void SetCurrentDebugTarget(Guid guidDebugTargetType, UInt32 debugTargetTypeId, string bstrCurrentDebugTarget);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("1021A0EE-5E4E-4A9B-ACDA-B607FEF3AB65")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsProjectCfgDebugTypeSelection {
    public abstract virtual void GetDebugTypes(Array& pbstrDebugTypes);
    public abstract virtual void GetDebugTypeName(string bstrDebugType, String& pbstrDebugTypeName);
    public abstract virtual void GetCurrentDebugType(String& pbstrDebugType);
    public abstract virtual void SetCurrentDebugType(string bstrDebugType);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("803E46E2-6A0D-4D5D-9F84-6CE1248B068D")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsProjectCfgProvider {
    public abstract virtual int GetCfgs(UInt32 celt, IVsCfg[] rgpcfg, UInt32[] pcActual, UInt32[] prgfFlags);
    public abstract virtual int OpenProjectCfg(string szProjectCfgCanonicalName, IVsProjectCfg& ppIVsProjectCfg);
    public abstract virtual int get_UsesIndependentConfigurations(Int32& pfUsesIndependentConfigurations);
}
[GuidAttribute("C28FFCEA-421B-46EA-BAC8-D8DC225DDACA")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsProjectClassifierInfo {
    public string id { get; }
    public string PackageId { get; }
    public string Extension { get; }
    public string FactoryGuid { get; }
    public string MatcherId { get; }
    public string AppliesTo { get; }
    public int Priority { get; }
    public abstract virtual string get_id();
    public abstract virtual string get_PackageId();
    public abstract virtual string get_Extension();
    public abstract virtual string get_FactoryGuid();
    public abstract virtual void GetMatcherData(UInt32 cbstr, IVsMatcherDataInfo[] bstrMatcherData, UInt32& pcActual);
    public abstract virtual string get_MatcherId();
    public abstract virtual string get_AppliesTo();
    public abstract virtual int get_Priority();
    public abstract virtual void GetPackagesSelectedData(UInt32 cbstr, IVsPackageSelectedInfo[] bstrPackageSelectedData, UInt32& pcActual);
}
[GuidAttribute("8E40D748-F682-4951-B465-16D0C252A69D")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsProjectDataConnection {
    public abstract virtual int GetProjectSqlConnection(Object& pConnection);
}
[GuidAttribute("4C5F0CEB-5AC9-4EA4-85E2-72E088EA75A8")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsProjectDebugTargetProvider {
    public abstract virtual int SupplyDebugTarget(String& pbstrTarget, String& pbstrCommandLine);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("B4D28A5B-063D-4622-B0C7-C3DDEBFCDCCF")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsProjectDeployDependency {
    public abstract virtual int get_DeployDependencyURL(String& pbstrURL);
    public abstract virtual int get_ProjectInfo(IVsHierarchy& ppIVsHierarchy, IVsProjectCfg& ppIVsProjectCfg);
}
[GuidAttribute("33FCD00A-BD45-403C-9C66-07BA9A923501")]
[InterfaceTypeAttribute("1")]
[ComConversionLossAttribute]
public interface Microsoft.VisualStudio.Shell.Interop.IVsProjectFactory {
    public abstract virtual int CanCreateProject(string pszFilename, UInt32 grfCreateFlags, Int32& pfCanCreate);
    public abstract virtual int CreateProject(string pszFilename, string pszLocation, string pszName, UInt32 grfCreateFlags, Guid& iidProject, IntPtr& ppvProject, Int32& pfCanceled);
    public abstract virtual int SetSite(IServiceProvider psp);
    public abstract virtual int Close();
}
[GuidAttribute("55E1A1E1-ECAC-46E0-BDE3-1E35BC68C31C")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsProjectFactory2 {
    public abstract virtual int GetAsynchOpenProjectType(UInt32& pType);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("C94FB6DD-91AA-495F-B399-51F1428723FC")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsProjectFaultResolver {
    public abstract virtual void ResolveFault(Boolean& pfShouldReload);
}
[GuidAttribute("2AE1E600-A58A-4A31-A534-AFCB7200542C")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsProjectFileReloadManagerEvents {
    public abstract virtual Array OnQueryAdditionalFilesToBeClosedBeforeProjectsReloaded(int cProjectsToBeReloaded, Guid[] rgProjectsToBeReloaded);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("3BFFC423-6C82-46C0-AF2A-79A3ED3EDA93")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsProjectFlavorCfg {
    public abstract virtual int get_CfgType(Guid& iidCfg, IntPtr& ppCfg);
    public abstract virtual int Close();
}
[GuidAttribute("52F50FAC-B245-4A81-9A02-DBF8F115389B")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsProjectFlavorCfgOutputGroups {
    public abstract virtual int CustomizeOutputGroup(IVsOutputGroup pIn, IVsOutputGroup& pOut);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("2B81D5F8-F8BD-4A65-8F51-F3BFCD51A924")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsProjectFlavorCfgProvider {
    public abstract virtual int CreateProjectFlavorCfg(IVsCfg pBaseProjectCfg, IVsProjectFlavorCfg& ppFlavorCfg);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("B42565FE-1FE7-418E-B3F0-CF56C5450E80")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsProjectFlavorReferenceManager {
    public abstract virtual void ShowReferenceManager(IVsReferenceManager pRefMgr, IVsReferenceManagerUser pRefMgrUser, string lpszDlgTitle, string lpszHelpTopic, Guid guidDefaultProviderContext, bool fForceShowDefaultProvider);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("66DB9803-1019-48CA-99F2-DAD69E49532C")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsProjectFlavorReferences {
    public abstract virtual int QueryAddProjectReference(object pReferencedProject, Int32& pbCanAdd);
    public abstract virtual int QueryCanBeReferenced(object pReferencingProject, Int32& pbAllowReferenced);
    public abstract virtual int QueryRefreshReferences(UInt32 Reason, Int32& pbUpdate);
}
[GuidAttribute("54BE5D82-5886-4EF1-97C0-81716586FB8A")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsProjectFlavorReferences2 {
    public abstract virtual int QueryCheckIsProjectReferenceOutputValid(object pReferencedProject, string pszReferencedProjectOutput, UInt32& pOutputValidity);
}
[GuidAttribute("005431FC-CF9C-4154-9B28-EC975D88948D")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsProjectFlavorReferences3 {
    public abstract virtual int QueryAddProjectReferenceEx(object pReferencedProject, int queryContext, UInt32& pResult, String& pbstreReason);
    public abstract virtual int QueryCanBeReferencedEx(object pReferencingProject, int queryContext, UInt32& pResult, String& pbstreReason);
}
[GuidAttribute("D717B926-12EE-4285-9123-522ED54C4859")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsProjectFlavorUpgradeViaFactory {
    public abstract virtual int UpgradeProjectFlavor(string pszFileName, IVsUpgradeBuildPropertyStorage pUpgradeBuildPropStg, string pszProjFileXMLFragment, string pszUserFileXMLFragment, IVsUpgradeLogger pLogger, Int32& pUpgradeRequired, String[] pbstrUpgradedProjFileXMLFragment, String[] pbstrUpgradedUserFileXMLFragment, Guid& pguidNewProjectFactory);
    public abstract virtual int UpgradeProjectFlavor_CheckOnly(string pszFileName, IVsUpgradeBuildPropertyStorage pUpgradeBuildPropStg, string pszProjFileXMLFragment, string pszUserFileXMLFragment, IVsUpgradeLogger pLogger, Int32& pUpgradeRequired, Guid& pguidNewProjectFactory);
    public abstract virtual int OnUpgradeProjectFlavorCancelled(string pszFileName);
}
[GuidAttribute("9B790CC4-A83D-4D55-B89D-C3DED06E8D31")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsProjectFlavorUpgradeViaFactory2 {
    public abstract virtual void UpgradeProjectFlavor_CheckOnly(string pszFileName, object pUpgradeBuildPropStg, string pszProjFileXMLFragment, string pszUserFileXMLFragment, IVsUpgradeLogger pLogger, UInt32& pUpgradeRequired, Guid& pguidNewProjectFactory);
}
[GuidAttribute("D60EDEEA-3629-42CC-BAAF-9AC52E63EEAF")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsProjectMRU {
    public abstract virtual void RegisterProjectMRU(string szLocalPath, string szProviderString, string szDisplayText, string szToolTipDisplayText, Guid& providerId);
}
[GuidAttribute("49C80755-EA7F-4CCE-9A9E-41E3C9EFA753")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsProjectReference {
    public string Name { get; public set; }
    public string FullPath { get; public set; }
    public bool AlreadyReferenced { get; public set; }
    public string Identity { get; public set; }
    public string ReferenceSpecification { get; public set; }
    public abstract virtual string get_Name();
    public abstract virtual void set_Name(string value);
    public abstract virtual string get_FullPath();
    public abstract virtual void set_FullPath(string value);
    public abstract virtual bool get_AlreadyReferenced();
    public abstract virtual void set_AlreadyReferenced(bool value);
    public abstract virtual string get_Identity();
    public abstract virtual void set_Identity(string value);
    public abstract virtual string get_ReferenceSpecification();
    public abstract virtual void set_ReferenceSpecification(string value);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("3A77035E-CB2A-4582-B60E-1123207F2029")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsProjectReferenceProviderContext {
    public Guid ProviderGuid { get; }
    public Array References { get; }
    public Array ReferenceFilterPaths { get; public set; }
    public IVsHierarchy CurrentProject { get; public set; }
    public abstract virtual Guid get_ProviderGuid();
    public abstract virtual Array get_References();
    public abstract virtual void AddReference(IVsReference pReference);
    public abstract virtual IVsReference CreateReference();
    public abstract virtual Array get_ReferenceFilterPaths();
    public abstract virtual void set_ReferenceFilterPaths(Array value);
    public abstract virtual IVsHierarchy get_CurrentProject();
    public abstract virtual void set_CurrentProject(IVsHierarchy value);
}
[GuidAttribute("3F819030-50CF-4B72-B3FC-B3B9BFBBEE69")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsProjectResources {
    public abstract virtual int GetResourceItem(UInt32 itemidDocument, string pszCulture, UInt32 grfPRF, UInt32& pitemidResource);
    public abstract virtual int CreateResourceDocData(UInt32 itemidResource, IntPtr& punkDocData);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("DFAD4C39-FCB2-4BDF-A389-2EA6DB28F062")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsProjectSelector {
    public abstract virtual void GetProjectFactoryGuid(Guid guidProjectType, string pszFilename, Guid& guidProjectFactory);
}
[GuidAttribute("C044F284-CA0B-41F9-A4C0-E2B650234F30")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsProjectServerHost {
    public abstract virtual int StartServer(string bstrEnvironment, UInt32& pdwProcessId);
    public abstract virtual int GetServerUrl(String& pbstrUrl);
    public abstract virtual int StopServer();
    public abstract virtual int IsServerRunning(Int32& fIsRunning);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("7CEB5F64-3AF3-4FC4-843D-E8E61F43B13C")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsProjectSpecialFiles {
    public abstract virtual int GetFile(int fileID, UInt32 grfFlags, UInt32& pitemid, String& pbstrFilename);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("4B2BEBAA-BA1E-4479-8720-8CE19D276098")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsProjectSpecificEditorMap {
    public abstract virtual int GetSpecificEditorType(string pszMkDocument, Guid& pguidEditorType);
}
[GuidAttribute("F84A6D1D-F305-4055-A02C-A642B871BB20")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsProjectSpecificEditorMap2 {
    public abstract virtual int GetSpecificEditorType(string pszMkDocument, Guid& pguidEditorType);
    public abstract virtual int GetSpecificLanguageService(string pszMkDocument, Guid& pguidLanguageService);
    public abstract virtual int GetSpecificEditorProperty(string pszMkDocument, int propid, Object& pvar);
    public abstract virtual int SetSpecificEditorProperty(string pszMkDocument, int propid, object var);
}
[GuidAttribute("82780F79-A3ED-4B7F-90C0-5FEE14CBB53E")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsProjectStartupServices {
    public abstract virtual int AddStartupService(Guid& guidService);
    public abstract virtual int RemoveStartupService(Guid& guidService);
    public abstract virtual int GetStartupServiceEnum(IEnumProjectStartupServices& ppenum);
}
[GuidAttribute("89C76724-F4C4-4DA1-A7E9-996667924B2C")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsProjectTargetChange {
    public Guid NewTargetId { get; }
    public Guid CurrentTargetId { get; }
    public bool ReloadProjectOnSuccess { get; }
    public bool UnloadOnFailure { get; }
    public bool UnloadOnCancel { get; }
    public abstract virtual Guid get_NewTargetId();
    public abstract virtual Guid get_CurrentTargetId();
    public abstract virtual bool get_ReloadProjectOnSuccess();
    public abstract virtual bool get_UnloadOnFailure();
    public abstract virtual bool get_UnloadOnCancel();
}
[GuidAttribute("ED4741C6-DBB7-4EF7-A4EE-77DED64DA771")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsProjectTargetDescription {
    [DispIdAttribute("1610678272")]
public Guid TargetId { get; }
    [DispIdAttribute("1610678273")]
public string DisplayName { get; }
    [ComAliasNameAttribute("OLE.DWORD")]
[DispIdAttribute("1610678274")]
public UInt32 Order { get; }
    [DispIdAttribute("1610678275")]
public bool Supported { get; }
    public abstract virtual Guid get_TargetId();
    public abstract virtual string get_DisplayName();
    public abstract virtual UInt32 get_Order();
    public abstract virtual bool get_Supported();
    public abstract virtual object GetProperty(UInt32 prop);
}
[GuidAttribute("6EB4C134-63D1-4F1E-B1C4-2DAEB8FFFD6F")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsProjectTargetDescription2 {
    [DispIdAttribute("1610678272")]
public Guid TargetId { get; }
    [DispIdAttribute("1610678273")]
public string DisplayName { get; }
    [ComAliasNameAttribute("OLE.DWORD")]
[DispIdAttribute("1610678274")]
public UInt32 Order { get; }
    [DispIdAttribute("1610678275")]
public bool Supported { get; }
    public abstract virtual Guid get_TargetId();
    public abstract virtual string get_DisplayName();
    public abstract virtual UInt32 get_Order();
    public abstract virtual bool get_Supported();
    public abstract virtual object GetProperty(UInt32 prop);
    public abstract virtual Array GetRetargetParameters();
    public abstract virtual string GetRetargetParameterDisplayName(string parameter);
    public abstract virtual Array GetPossibleParameterValues(string parameter);
    public abstract virtual string GetParameterValue(string parameter);
    public abstract virtual void PutParameterValue(string parameter, string pValue);
    public abstract virtual string GetValueDisplayName(string parameter, string pValue);
    public abstract virtual void ResetSelectedValues();
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("82A40D77-D2D4-4C93-AB11-8D50ADF02B1E")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsProjectTextImageProvider {
    public abstract virtual int OpenItemTextImage(string pszMkDocument, UInt32 grfMode, VsTextImage& ppTextImage);
    public abstract virtual int CloseItemTextImage(string pszMkDocument, UInt32 vsptipDisposition, VsTextImage pTextImage);
}
[GuidAttribute("75661D39-F5DA-41B9-ABDA-9CF54C6B1AC9")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsProjectUpgrade {
    public abstract virtual int UpgradeProject(UInt32 grfUpgradeFlags);
}
[GuidAttribute("0DBA1379-5D67-4A6C-8C06-A5795AF7364B")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsProjectUpgradeViaFactory {
    public abstract virtual int UpgradeProject(string bstrFileName, UInt32 fUpgradeFlag, string bstrCopyLocation, String& pbstrUpgradedFullyQualifiedFileName, IVsUpgradeLogger pLogger, Int32& pUpgradeRequired, Guid& pguidNewProjectFactory);
    public abstract virtual int UpgradeProject_CheckOnly(string bstrFileName, IVsUpgradeLogger pLogger, Int32& pUpgradeRequired, Guid& pguidNewProjectFactory, UInt32& pUpgradeProjectCapabilityFlags);
    public abstract virtual int GetSccInfo(string bstrProjectFileName, String& pbstrSccProjectName, String& pbstrSccAuxPath, String& pbstrSccLocalPath, String& pbstrProvider);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("E5F6CFF6-C3E1-45BC-9559-C03F94FDF15B")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsProjectUpgradeViaFactory2 {
    public abstract virtual int OnUpgradeProjectCancelled(string bstrFileName);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("943CE488-176F-457B-8C88-3502C775501C")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsProjectUpgradeViaFactory3 {
    public abstract virtual int CheckProjectUpgraded(string pszFileName, Boolean& pUpgradeComplete, String[] pbstrUpgradedProjectFileName);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("9BE1F919-4C3C-45B7-9816-E04053F8ECC6")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsProjectUpgradeViaFactory4 {
    public abstract virtual void UpgradeProject_CheckOnly(string pszFileName, IVsUpgradeLogger pLogger, UInt32& pUpgradeRequired, Guid& pguidNewProjectFactory, UInt32& pUpgradeProjectCapabilityFlags);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("C0975213-3D73-44E1-8B46-4578E16D4457")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsPropertiesInfo {
    public abstract virtual bool IsTransmittable(int id);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("AAEEAC4C-3BF3-492C-927D-84AB7D93D6DF")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsPropertyBag {
    public abstract virtual object GetValue(string szName);
    public abstract virtual void SetValue(string szName, Object& pVarValue);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("B1E402B6-D8E0-4422-9164-421FEE099F00")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsPropertyBrowser {
    public abstract virtual int GetState(VsPropertyBrowserState[] pstate);
    public abstract virtual int SetState(VsPropertyBrowserState[] pstate);
}
[GuidAttribute("805B0E0A-7122-4855-962F-887E46D2F112")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsPropertyFileIn {
    public abstract virtual int Read(UInt32 cchPropertyName, UInt16[] szPropertyName, UInt32& pcchPropertyNameActual, VSPROPERTYSTREAMPROPERTYTYPE[] pvspspt, Object& pvarValue, IErrorLog pIErrorLog);
    public abstract virtual int SkipToEnd();
    public abstract virtual int Close();
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("3018E511-6282-41FC-8E1F-77AB1BDDE523")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsPropertyFileOut {
    public abstract virtual int Write(string szPropertyName, object varValue, string szLineComment);
    public abstract virtual int WriteSzAsBSTR(string szPropertyName, string szValue, string szLineComment);
    public abstract virtual int BeginPropertySection(string szName, string szLineComment, IVsPropertyStreamOut& ppIVsPropertyStreamOut, UInt32& pdwCookie);
    public abstract virtual int EndPropertySection(UInt32 dwCookie);
    public abstract virtual int Flush();
    public abstract virtual int Close();
}
[GuidAttribute("237ABD5F-9537-4AEE-A893-72AB9A0EA8E8")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsPropertyPage {
    public abstract virtual int CategoryTitle(UInt32 iLevel, String& pbstrCategory);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("6FC6A958-B2E7-441B-823C-10EA30B24EEC")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsPropertyPage2 {
    public abstract virtual int GetProperty(UInt32 propid, Object& pvar);
    public abstract virtual int SetProperty(UInt32 propid, object var);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("BC039978-213E-4CA0-81C4-10EDF2AF2D66")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsPropertyPageFrame {
    public abstract virtual int ShowFrame(Guid clsidInitialPage);
    public abstract virtual int HideFrame();
    public abstract virtual int Update();
    public abstract virtual int CanShowPropertyPages(Int32& pbCanShow);
    public abstract virtual int ReportError(int hrErr);
    public abstract virtual int ShowFrameDISPID(int dispidToActivate);
    public abstract virtual int UpdateAfterApply();
}
[GuidAttribute("48002E6A-CE3C-4C7E-9D10-3D46A3AF5881")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsPropertyPageNotify {
    public abstract virtual int OnShowPage(int fPageActivated);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("EC9ABAFB-E744-44B5-8771-0B875EE6FC5C")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsPropertyStreamIn {
    public abstract virtual int Read(UInt32 cchPropertyName, UInt16[] szPropertyName, UInt32& pcchPropertyNameActual, VSPROPERTYSTREAMPROPERTYTYPE[] pvspspt, Object& pvarValue, IErrorLog pIErrorLog);
    public abstract virtual int SkipToEnd();
}
[GuidAttribute("BF283741-E0AD-49C0-BEA4-1E267E52208F")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsPropertyStreamOut {
    public abstract virtual int Write(string szPropertyName, object varValue, string szLineComment);
    public abstract virtual int WriteSzAsBSTR(string szPropertyName, string szValue, string szLineComment);
    public abstract virtual int BeginPropertySection(string szName, string szLineComment, IVsPropertyStreamOut& ppIVsPropertyStreamOut, UInt32& pdwCookie);
    public abstract virtual int EndPropertySection(UInt32 dwCookie);
    public abstract virtual int Flush();
}
[NullableContextAttribute("2")]
[GuidAttribute("ba50abcc-be56-46a2-9c5b-2424c06a70cb")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsProvideAsyncSaveState {
    public abstract virtual object GetAsyncSaveState();
}
[GuidAttribute("4DF7BBA0-660F-11D3-85FD-00C04F6123B3")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsProvideComponentEnumeration {
    [DispIdAttribute("1610743808")]
public abstract virtual int WriteXMLToFile(string bstrDesiredFile, String& pbstrActualFile);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("CDF20EE2-B038-42EA-AA42-E1CAAFFCDCA5")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsProvideTargetedToolboxItems {
    public abstract virtual int GetInstanceOfExistingTypeForNewFramework(IDataObject pExistingItem, string szNewTFM, IVsAddToolboxItems pAdder);
    public abstract virtual int AddNewTypesForNewFramework(string szHighestExistingTFMWithSameID, string szNewTFM, IVsAddToolboxItems pAdder);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("997D7904-D948-4C8B-8BAB-0BDA1E212F6E")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsProvideUserContext {
    public abstract virtual int GetUserContext(IVsUserContext& ppctx);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("3931DEF1-8200-481F-A6C2-A4740DE84658")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsProvideUserContext2 {
    public abstract virtual int GetUserContextEx(IVsUserContext& ppctx, Int32& iPriority);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("F98CCC8A-9C5F-41EB-8421-711C0F1880E6")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsProvideUserContextForObject {
    public abstract virtual int GetObjectContext(object punk, IVsUserContext& ppctx);
}
[GuidAttribute("9977DA6B-0C38-4565-A38A-71CF8CD1EF53")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsProvisionalItem {
    public bool IsProvisonalViewingEnabled { get; }
    public abstract virtual bool get_IsProvisonalViewingEnabled();
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("816B2FBE-5C62-439E-8F67-8F0D5D82BC67")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsPublishableProjectCfg {
    public abstract virtual int AdvisePublishStatusCallback(IVsPublishableProjectStatusCallback pIVsPublishStatusCallback, UInt32& pdwCookie);
    public abstract virtual int UnadvisePublishStatusCallback(UInt32 dwCookie);
    public abstract virtual int StartPublish(IVsOutputWindowPane pIVsOutputWindowPane, UInt32 dwOptions);
    public abstract virtual int QueryStatusPublish(Int32& pfPublishDone);
    public abstract virtual int StopPublish(int fSync);
    public abstract virtual int ShowPublishPrompt(Int32& pfContinue);
    public abstract virtual int QueryStartPublish(UInt32 dwOptions, Int32[] pfSupported, Int32[] pfReady);
    public abstract virtual int GetPublishProperty(UInt32 propid, Object& pvar);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("279398E7-6FC1-40A2-9FB3-C321DB469E9B")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsPublishableProjectStatusCallback {
    public abstract virtual int PublishBegin(Int32& pfContinue);
    public abstract virtual int PublishEnd(int fSuccess);
    public abstract virtual int Tick(Int32& pfContinue);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("CE25FCEE-9E4D-4EC8-856E-38E2BDB2E13B")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsQueryDebuggableProjectCfg {
    public abstract virtual int QueryDebugTargets(UInt32 grfLaunch, UInt32 cTargets, VsDebugTargetInfo2[] rgDebugTargetInfo, UInt32[] pcActual);
}
[GuidAttribute("7666C707-8B4B-461C-B555-348C94CB79DF")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsQueryDebuggableProjectCfg2 {
    public abstract virtual void QueryDebugTargets(UInt32 grfLaunch, UInt32 cTargets, VsDebugTargetInfo4[] rgDebugTargetInfo, UInt32[] pcActual);
}
[GuidAttribute("53544C4D-5984-11D3-A606-005004775AB1")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsQueryEditQuerySave2 {
    public abstract virtual int QueryEditFiles(UInt32 rgfQueryEdit, int cFiles, String[] rgpszMkDocuments, UInt32[] rgrgf, VSQEQS_FILE_ATTRIBUTE_DATA[] rgFileInfo, UInt32& pfEditVerdict, UInt32& prgfMoreInfo);
    public abstract virtual int QuerySaveFiles(UInt32 rgfQuerySave, int cFiles, String[] rgpszMkDocuments, UInt32[] rgrgf, VSQEQS_FILE_ATTRIBUTE_DATA[] rgFileInfo, UInt32& pdwQSResult);
    public abstract virtual int QuerySaveFile(string pszMkDocument, UInt32 rgf, VSQEQS_FILE_ATTRIBUTE_DATA[] pFileInfo, UInt32& pdwQSResult);
    public abstract virtual int DeclareReloadableFile(string pszMkDocument, UInt32 rgf, VSQEQS_FILE_ATTRIBUTE_DATA[] pFileInfo);
    public abstract virtual int DeclareUnreloadableFile(string pszMkDocument, UInt32 rgf, VSQEQS_FILE_ATTRIBUTE_DATA[] pFileInfo);
    public abstract virtual int OnAfterSaveUnreloadableFile(string pszMkDocument, UInt32 rgf, VSQEQS_FILE_ATTRIBUTE_DATA[] pFileInfo);
    public abstract virtual int IsReloadable(string pszMkDocument, Int32& pbResult);
    public abstract virtual int BeginQuerySaveBatch();
    public abstract virtual int EndQuerySaveBatch();
}
[GuidAttribute("53474C4D-6279-30C2-B4B4-005004775AB4")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsQueryEditQuerySave3 {
    public abstract virtual int QuerySaveFiles2(UInt32[] rgfQuerySave, int cFiles, String[] rgpszMkDocuments, UInt32[] rgrgf, VSQEQS_FILE_ATTRIBUTE_DATA[] rgFileInfo, UInt32& pdwQSResult, UInt32& prgfMoreInfo);
    public abstract virtual int QuerySaveFile2(string pszMkDocument, UInt32[] rgf, VSQEQS_FILE_ATTRIBUTE_DATA[] pFileInfo, UInt32& pdwQSResult, UInt32& prgfMoreInfo);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("130497E3-5CDB-4F29-9804-A2AF805016D7")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsRefactorNotify {
    public abstract virtual int OnBeforeGlobalSymbolRenamed(IVsHierarchy pHier, UInt32 itemid, UInt32 cRQNames, String[] rglpszRQName, string lpszNewName, Array& prgAdditionalCheckoutVSITEMIDs);
    public abstract virtual int OnGlobalSymbolRenamed(IVsHierarchy pHier, UInt32 itemid, UInt32 cRQNames, String[] rglpszRQName, string lpszNewName);
    public abstract virtual int OnBeforeReorderParams(IVsHierarchy pHier, UInt32 itemid, string lpszRQName, UInt32 cParamIndexes, UInt32[] rgParamIndexes, Array& prgAdditionalCheckoutVSITEMIDs);
    public abstract virtual int OnReorderParams(IVsHierarchy pHier, UInt32 itemid, string lpszRQName, UInt32 cParamIndexes, UInt32[] rgParamIndexes);
    public abstract virtual int OnBeforeRemoveParams(IVsHierarchy pHier, UInt32 itemid, string lpszRQName, UInt32 cParamIndexes, UInt32[] rgParamIndexes, Array& prgAdditionalCheckoutVSITEMIDs);
    public abstract virtual int OnRemoveParams(IVsHierarchy pHier, UInt32 itemid, string lpszRQName, UInt32 cParamIndexes, UInt32[] rgParamIndexes);
    public abstract virtual int OnBeforeAddParams(IVsHierarchy pHier, UInt32 itemid, string lpszRQName, UInt32 cParams, UInt32[] rgszParamIndexes, String[] rgszRQTypeNames, String[] rgszParamNames, Array& prgAdditionalCheckoutVSITEMIDs);
    public abstract virtual int OnAddParams(IVsHierarchy pHier, UInt32 itemid, string lpszRQName, UInt32 cParams, UInt32[] rgszParamIndexes, String[] rgszRQTypeNames, String[] rgszParamNames);
}
[GuidAttribute("EF0757D6-678E-45DB-8251-8AA39CC8320C")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsReference {
    public string Name { get; public set; }
    public string FullPath { get; public set; }
    public bool AlreadyReferenced { get; public set; }
    public abstract virtual string get_Name();
    public abstract virtual void set_Name(string value);
    public abstract virtual string get_FullPath();
    public abstract virtual void set_FullPath(string value);
    public abstract virtual bool get_AlreadyReferenced();
    public abstract virtual void set_AlreadyReferenced(bool value);
}
[GuidAttribute("88E00A52-3B22-45C4-8FA0-321319DDA03F")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsReferenceManager {
    public abstract virtual void ShowReferenceManager(IVsReferenceManagerUser pRefMgrUser, string lpszDlgTitle, string lpszHelpTopic, Guid guidDefaultProviderContext, bool fForceShowDefaultProvider);
    public abstract virtual IVsReferenceProviderContext CreateProviderContext(Guid guidProvider);
    public abstract virtual UInt32 QueryCanReferenceProject(IVsHierarchy pReferencing, IVsHierarchy pReferenced);
}
[GuidAttribute("B7821F84-D9C8-48F9-93C4-3C4C98A477A1")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsReferenceManager2 {
    public abstract virtual Array GetSDKReferenceDependencies(string SDKIdentifier, IVsPlatformReferenceProviderContext pContext);
}
[GuidAttribute("3AD23841-9A64-4582-B226-E4CFE3942446")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsReferenceManagerUser {
    public abstract virtual void ChangeReferences(UInt32 operation, IVsReferenceProviderContext changedContext);
    public abstract virtual Array GetProviderContexts();
}
[GuidAttribute("400C66C9-5272-418C-9113-1C9BDFD7D7BA")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsReferenceManagerUserReloadRequired {
    public abstract virtual int ApplyReloadRequiredReferenceChanges(bool cancelOperation);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("5B99FA62-EEAB-4048-ACCB-7A8EB569CBF5")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsReferenceProviderContext {
    public Guid ProviderGuid { get; }
    public Array References { get; }
    public Array ReferenceFilterPaths { get; public set; }
    public abstract virtual Guid get_ProviderGuid();
    public abstract virtual Array get_References();
    public abstract virtual void AddReference(IVsReference pReference);
    public abstract virtual IVsReference CreateReference();
    public abstract virtual Array get_ReferenceFilterPaths();
    public abstract virtual void set_ReferenceFilterPaths(Array value);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("113592FE-DEE5-48AD-9D66-5B26794A4003")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsRegisterDataSourceFactories {
    public abstract virtual int GetDataSource(Guid& guid, UInt32 dw, IVsUIDataSource& ppUIDataSource);
    public abstract virtual int RegisterDataSourceFactory(Guid& guid, IVsDataSourceFactory pDataSourceFactory);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("78036A8D-A04C-43E4-8BC0-846E63AFA9A2")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsRegisterEditors {
    public abstract virtual int RegisterEditor(Guid& rguidEditor, IVsEditorFactory pVsPF, UInt32& pdwCookie);
    public abstract virtual int UnregisterEditor(UInt32 dwCookie);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("9455BDB5-2A5A-45F1-A558-72B88A78E6E3")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsRegisterNewDialogFilters {
    public abstract virtual int RegisterNewProjectDialogFilter(IVsFilterNewProjectDlg pFilter, UInt32& pdwFilterCookie);
    public abstract virtual int UnregisterNewProjectDialogFilter(UInt32 dwFilterCookie);
    public abstract virtual int RegisterAddNewItemDialogFilter(IVsFilterAddProjectItemDlg pFilter, UInt32& pdwFilterCookie);
    public abstract virtual int UnregisterAddNewItemDialogFilter(UInt32 dwFilterCookie);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("46F1C80F-EA5D-47A0-806F-4C0A916E1396")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsRegisterPrefetchProjectFactory {
    public abstract virtual void RegisterPrefetchProjectFactory(Guid& guidPrefetchFactory, IVsPrefetchProjectFactory pProjectFactory, UInt32& pdwCookie);
    public abstract virtual void UnregisterPrefetchProjectFactory(UInt32 dwCookie);
}
[GuidAttribute("ED77D5EC-B0DE-4721-BDC6-38DCBE589B4C")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsRegisterPriorityCommandTarget {
    public abstract virtual int RegisterPriorityCommandTarget(UInt32 dwReserved, IOleCommandTarget pCmdTrgt, UInt32& pdwCookie);
    public abstract virtual int UnregisterPriorityCommandTarget(UInt32 dwCookie);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("4C5F0CEA-5AC9-4EA4-85E2-72E088EA75A8")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsRegisterProjectDebugTargetProvider {
    public abstract virtual int AddDebugTargetProvider(IVsProjectDebugTargetProvider pNewDbgTrgtProvider, IVsProjectDebugTargetProvider& ppNextDbgTrgtProvider);
    public abstract virtual int RemoveDebugTargetProvider(IVsProjectDebugTargetProvider pDbgTrgtProvider);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("B042860A-5A69-4259-BC88-F1C79AE16C50")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsRegisterProjectSelector {
    public abstract virtual void RegisterProjectSelector(Guid& rguidProjType, IVsProjectSelector pProjectSelector, UInt32& pdwCookie);
    public abstract virtual void UnregisterProjectSelector(UInt32 dwCookie);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("F08400BB-0960-47F4-9E12-591DBF370546")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsRegisterProjectTypes {
    public abstract virtual int RegisterProjectType(Guid& rguidProjType, IVsProjectFactory pVsPF, UInt32& pdwCookie);
    public abstract virtual int UnregisterProjectType(UInt32 dwCookie);
}
[GuidAttribute("53544C4D-C1F3-4FA8-BEA7-EA1A8FECFDD9")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsRegisterScciProvider {
    public abstract virtual int RegisterSourceControlProvider(Guid guidProviderService);
}
[GuidAttribute("A146BAC8-4337-4D8F-8C51-9B5147DBCB8A")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsRegisterUIFactories {
    public abstract virtual int CreateUIElement(Guid& guid, UInt32 dw, IVsUIElement& ppUIElement);
    public abstract virtual int RegisterUIFactory(Guid& guid, IVsUIFactory pUIFactory);
}
[GuidAttribute("26831FB7-7C55-4AB1-B4AD-E37783F2D4A8")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsRelativePathResolver {
    public abstract virtual int ResolveRelativePath(UInt32 dwReserved, string pszRelPath, String& pbstrAbsPath);
}
[ComConversionLossAttribute]
[GuidAttribute("F0D7A6F0-C722-4AB6-A5D9-C7FF13027410")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsResourceManager {
    public abstract virtual int LoadResourceString(Guid& guidPackage, int culture, string pszResourceName, String& pbstrValue);
    public abstract virtual int LoadResourceBitmap(Guid& guidPackage, int culture, string pszResourceName, IntPtr& hbmpValue);
    public abstract virtual int LoadResourceIcon(Guid& guidPackage, int culture, string pszResourceName, int cx, int cy, IntPtr& hicoValue);
    public abstract virtual int LoadResourceBlob(Guid& guidPackage, int culture, string pszResourceName, IntPtr& pBytes, Int32& lAllocated);
    public abstract virtual int LoadResourceString2(string pszAssemblyPath, int culture, string pszResourceName, String& pbstrValue);
    public abstract virtual int LoadResourceBitmap2(string pszAssemblyPath, int culture, string szResourceName, IntPtr& hbmpValue);
    public abstract virtual int LoadResourceIcon2(string pszAssemblyPath, int culture, string pszResourceName, int cx, int cy, IntPtr& hicoValue);
    public abstract virtual int LoadResourceBlob2(string pszAssemblyPath, int culture, string pszResourceName, IntPtr& pBytes, Int32& lAllocated);
    public abstract virtual int GetSatelliteAssemblyPath(string assemblyPath, int lcid, String& pbstrPath);
}
[GuidAttribute("2597DABC-BBA7-4758-9A33-8894157AD74A")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsResourceManager2 {
    public abstract virtual int ParseResourceID(string szId, UInt32 lcid, String& pbstrUnadornedId, Guid& pguidPackage, String& pbstrDllPath);
    public abstract virtual int AnnotateIDIfNecessary(string szId, Guid& guidPackage, string szDllPath, String& pbstrAnnotatedId);
}
[GuidAttribute("AD3B499C-281D-46BB-B43B-071413528C04")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsResourceView {
}
[GuidAttribute("6267AFD3-3A5D-413C-8F97-4580CEC51DF4")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsRetargetProject {
    public abstract virtual IVsProjectTargetChange CheckForRetarget(UInt32 dwFlags);
    public abstract virtual Array GetAffectedFilesList(IVsProjectTargetChange target);
    public abstract virtual void Retarget(IVsOutputWindowPane logger, UInt32 dwFlags, IVsProjectTargetChange target, string szProjectBackupLoaction);
}
[GuidAttribute("E055FB47-177C-4333-8BC7-8FE704888122")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsRetargetProjectAsync {
    public abstract virtual IVsTask CheckForRetargetAsync(UInt32 dwFlags);
    public abstract virtual IVsTask GetAffectedFilesListAsync(IVsProjectTargetChange target);
    public abstract virtual IVsTask RetargetAsync(IVsOutputWindowPane logger, UInt32 dwFlags, IVsProjectTargetChange target, string szProjectBackupLoaction);
}
[GuidAttribute("BEA6BB4F-A905-49CA-A216-202DF370E07E")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsRunningDocTableEvents {
    public abstract virtual int OnAfterFirstDocumentLock(UInt32 docCookie, UInt32 dwRDTLockType, UInt32 dwReadLocksRemaining, UInt32 dwEditLocksRemaining);
    public abstract virtual int OnBeforeLastDocumentUnlock(UInt32 docCookie, UInt32 dwRDTLockType, UInt32 dwReadLocksRemaining, UInt32 dwEditLocksRemaining);
    public abstract virtual int OnAfterSave(UInt32 docCookie);
    public abstract virtual int OnAfterAttributeChange(UInt32 docCookie, UInt32 grfAttribs);
    public abstract virtual int OnBeforeDocumentWindowShow(UInt32 docCookie, int fFirstShow, IVsWindowFrame pFrame);
    public abstract virtual int OnAfterDocumentWindowHide(UInt32 docCookie, IVsWindowFrame pFrame);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("15C7826F-443C-406D-98F8-55F6260669EC")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsRunningDocTableEvents2 {
    public abstract virtual int OnAfterFirstDocumentLock(UInt32 docCookie, UInt32 dwRDTLockType, UInt32 dwReadLocksRemaining, UInt32 dwEditLocksRemaining);
    public abstract virtual int OnBeforeLastDocumentUnlock(UInt32 docCookie, UInt32 dwRDTLockType, UInt32 dwReadLocksRemaining, UInt32 dwEditLocksRemaining);
    public abstract virtual int OnAfterSave(UInt32 docCookie);
    public abstract virtual int OnAfterAttributeChange(UInt32 docCookie, UInt32 grfAttribs);
    public abstract virtual int OnBeforeDocumentWindowShow(UInt32 docCookie, int fFirstShow, IVsWindowFrame pFrame);
    public abstract virtual int OnAfterDocumentWindowHide(UInt32 docCookie, IVsWindowFrame pFrame);
    public abstract virtual int OnAfterAttributeChangeEx(UInt32 docCookie, UInt32 grfAttribs, IVsHierarchy pHierOld, UInt32 itemidOld, string pszMkDocumentOld, IVsHierarchy pHierNew, UInt32 itemidNew, string pszMkDocumentNew);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("376ED667-F576-458F-B991-2CFD3EBC7B08")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsRunningDocTableEvents3 {
    public abstract virtual int OnAfterFirstDocumentLock(UInt32 docCookie, UInt32 dwRDTLockType, UInt32 dwReadLocksRemaining, UInt32 dwEditLocksRemaining);
    public abstract virtual int OnBeforeLastDocumentUnlock(UInt32 docCookie, UInt32 dwRDTLockType, UInt32 dwReadLocksRemaining, UInt32 dwEditLocksRemaining);
    public abstract virtual int OnAfterSave(UInt32 docCookie);
    public abstract virtual int OnAfterAttributeChange(UInt32 docCookie, UInt32 grfAttribs);
    public abstract virtual int OnBeforeDocumentWindowShow(UInt32 docCookie, int fFirstShow, IVsWindowFrame pFrame);
    public abstract virtual int OnAfterDocumentWindowHide(UInt32 docCookie, IVsWindowFrame pFrame);
    public abstract virtual int OnAfterAttributeChangeEx(UInt32 docCookie, UInt32 grfAttribs, IVsHierarchy pHierOld, UInt32 itemidOld, string pszMkDocumentOld, IVsHierarchy pHierNew, UInt32 itemidNew, string pszMkDocumentNew);
    public abstract virtual int OnBeforeSave(UInt32 docCookie);
}
[GuidAttribute("79A342F3-D637-4D54-83DC-DDD511743A49")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsRunningDocTableEvents4 {
    public abstract virtual int OnBeforeFirstDocumentLock(IVsHierarchy pHier, UInt32 itemid, string pszMkDocument);
    public abstract virtual int OnAfterSaveAll();
    public abstract virtual int OnAfterLastDocumentUnlock(IVsHierarchy pHier, UInt32 itemid, string pszMkDocument, int fClosedWithoutSaving);
}
[GuidAttribute("EE37A122-55A0-4D1D-970A-78D5EECAD16E")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsRunningDocTableEvents5 {
    public abstract virtual void OnAfterDocumentLockCountChanged(UInt32 docCookie, UInt32 dwRDTLockType, UInt32 dwOldLockCount, UInt32 dwNewLockCount);
}
[GuidAttribute("F5C9A40A-61DE-46AA-B025-8CC83048E13F")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsRunningDocTableEvents6 {
    public abstract virtual void OnAfterDocDataChanged(UInt32 cookie, IntPtr punkDocDataOld, IntPtr punkDocDataNew);
}
[NullableContextAttribute("2")]
[GuidAttribute("FE0D2208-235D-447E-8D7F-B1D3EC00E090")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsRunningDocTableEvents7 {
    public abstract virtual IVsTask OnBeforeSaveAsync(UInt32 cookie, UInt32 flags, IVsTask saveTask);
    public abstract virtual IVsTask OnAfterSaveAsync(UInt32 cookie, UInt32 flags);
}
[NullableContextAttribute("1")]
[GuidAttribute("962B1102-AC20-4519-8C94-B3E30C3EA038")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsRunningDocTableEvents8 {
    public abstract virtual void OnBeforeLoadingDocumentWindowShow(UInt32 documentCookie, bool isFirstShow, IVsWindowFrame documentFrame);
}
[GuidAttribute("A928AA21-EA77-47AC-8A07-355206C94BDD")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsRunningDocumentTable {
    public abstract virtual int RegisterAndLockDocument(UInt32 grfRDTLockType, string pszMkDocument, IVsHierarchy pHier, UInt32 itemid, IntPtr punkDocData, UInt32& pdwCookie);
    public abstract virtual int LockDocument(UInt32 grfRDTLockType, UInt32 dwCookie);
    public abstract virtual int UnlockDocument(UInt32 grfRDTLockType, UInt32 dwCookie);
    public abstract virtual int FindAndLockDocument(UInt32 dwRDTLockType, string pszMkDocument, IVsHierarchy& ppHier, UInt32& pitemid, IntPtr& ppunkDocData, UInt32& pdwCookie);
    public abstract virtual int RenameDocument(string pszMkDocumentOld, string pszMkDocumentNew, IntPtr pHier, UInt32 itemidNew);
    public abstract virtual int AdviseRunningDocTableEvents(IVsRunningDocTableEvents pSink, UInt32& pdwCookie);
    public abstract virtual int UnadviseRunningDocTableEvents(UInt32 dwCookie);
    public abstract virtual int GetDocumentInfo(UInt32 docCookie, UInt32& pgrfRDTFlags, UInt32& pdwReadLocks, UInt32& pdwEditLocks, String& pbstrMkDocument, IVsHierarchy& ppHier, UInt32& pitemid, IntPtr& ppunkDocData);
    public abstract virtual int NotifyDocumentChanged(UInt32 dwCookie, UInt32 grfDocChanged);
    public abstract virtual int NotifyOnAfterSave(UInt32 dwCookie);
    public abstract virtual int GetRunningDocumentsEnum(IEnumRunningDocuments& ppenum);
    public abstract virtual int SaveDocuments(UInt32 grfSaveOpts, IVsHierarchy pHier, UInt32 itemid, UInt32 docCookie);
    public abstract virtual int NotifyOnBeforeSave(UInt32 dwCookie);
    public abstract virtual int RegisterDocumentLockHolder(UInt32 grfRDLH, UInt32 dwCookie, IVsDocumentLockHolder pLockHolder, UInt32& pdwLHCookie);
    public abstract virtual int UnregisterDocumentLockHolder(UInt32 dwLHCookie);
    public abstract virtual int ModifyDocumentFlags(UInt32 docCookie, UInt32 grfFlags, int fSet);
}
[GuidAttribute("CD68D3CF-7124-4D3A-AFED-3E305C2B7D0B")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsRunningDocumentTable2 {
    public abstract virtual int CloseDocuments(UInt32 grfSaveOptions, IVsHierarchy pHierarchy, UInt32 docCookie);
    public abstract virtual int QueryCloseRunningDocument(string pszMkDocument, Int32& pfFoundAndClosed);
    public abstract virtual int FindAndLockDocumentEx(UInt32 grfRDTLockType, string pszMkDocument, IVsHierarchy pHierPreferred, UInt32 itemidPreferred, IVsHierarchy& ppHierActual, UInt32& pitemidActual, IntPtr& ppunkDocDataActual, UInt32& pdwCookie);
    public abstract virtual int FindOrRegisterAndLockDocument(UInt32 grfRDTLockType, string pszMkDocument, IVsHierarchy pHierPreferred, UInt32 itemidPreferred, IntPtr punkDocData, IVsHierarchy& ppHierActual, UInt32& pitemidActual, IntPtr& ppunkDocDataActual, UInt32& pdwCookie);
}
[GuidAttribute("30525828-BD80-4BDF-9255-D1E0E1C0F34F")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsRunningDocumentTable3 {
    public abstract virtual UInt32 GetRelatedSaveTreeItems(UInt32 cookie, UInt32 grfSave, UInt32 celt, VSSAVETREEITEM[] rgSaveTreeItems);
    public abstract virtual void NotifyDocumentChangedEx(UInt32 cookie, UInt32 attributes);
    public abstract virtual bool IsDocumentDirty(UInt32 cookie);
    public abstract virtual bool IsDocumentReadOnly(UInt32 cookie);
    public abstract virtual void UpdateDirtyState(UInt32 cookie);
    public abstract virtual void UpdateReadOnlyState(UInt32 cookie);
}
[GuidAttribute("86A4DA78-D580-4AE4-A1BE-F805BC663E04")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsRunningDocumentTable4 {
    public abstract virtual UInt32 GetRelatedSaveTreeItems(UInt32 cookie, UInt32 grfSave, UInt32 celt, VSSAVETREEITEM[] rgSaveTreeItems);
    public abstract virtual void NotifyDocumentChangedEx(UInt32 cookie, UInt32 attributes);
    public abstract virtual bool IsDocumentDirty(UInt32 cookie);
    public abstract virtual bool IsDocumentReadOnly(UInt32 cookie);
    public abstract virtual void UpdateDirtyState(UInt32 cookie);
    public abstract virtual void UpdateReadOnlyState(UInt32 cookie);
    public abstract virtual bool IsMonikerValid(string moniker);
    public abstract virtual bool IsCookieValid(UInt32 cookie);
    public abstract virtual UInt32 GetDocumentCookie(string moniker);
    public abstract virtual UInt32 GetDocumentFlags(UInt32 cookie);
    public abstract virtual UInt32 GetDocumentReadLockCount(UInt32 cookie);
    public abstract virtual UInt32 GetDocumentEditLockCount(UInt32 cookie);
    public abstract virtual string GetDocumentMoniker(UInt32 cookie);
    public abstract virtual void GetDocumentHierarchyItem(UInt32 cookie, IVsHierarchy& hierarchy, UInt32& itemID);
    public abstract virtual object GetDocumentData(UInt32 cookie);
    public abstract virtual Guid GetDocumentProjectGuid(UInt32 cookie);
}
[GuidAttribute("DD4E3397-637C-4597-B337-045BB3FF24B5")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsRunningDocumentTable5 {
    public abstract virtual void HandsOffDocument(UInt32 cookie, string moniker);
    public abstract virtual void HandsOnDocument(UInt32 cookie, string moniker);
}
[NullableContextAttribute("2")]
[GuidAttribute("567793E7-3A62-4704-9481-0CCD1C4EC495")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsRunningDocumentTable6 {
    public abstract virtual void NotifyOnBeforeSave(UInt32 cookie, UInt32 saveNotificationFlags, IVsTask saveTask);
    public abstract virtual void NotifyOnAfterSave(UInt32 cookie, UInt32 saveNotificationFlags);
}
[GuidAttribute("C84C8C02-DC20-4F19-A794-A14070B3C2CF")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsRunningDocumentTable7 {
    public abstract virtual void GetDocumentFlagsEx(UInt32 docCookie, UInt32& upperFlags, UInt32& lowerFlags);
}
[GuidAttribute("C3E2ED14-4E64-4C26-84D7-68CCD071A0C8")]
[ComConversionLossAttribute]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsSaveOptionsDlg {
    public abstract virtual int ShowSaveOptionsDlg(UInt32 dwReserved, IntPtr hwndDlgParent, IntPtr pszFilename);
}
[GuidAttribute("53544C4D-724A-46C8-8D01-6D4518CA118C")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsSccAddWebProjectFromSourceControl {
    public abstract virtual int IsAddWebProjectSupported(Boolean& pfResult);
    public abstract virtual int BrowseForServerLocation(String& pbstrLocationDescription, String& pbstrLocalPath, String& pbstrDatabasePath, String& pbstrAuxiliarPath, String& pbstrProviderName);
    public abstract virtual int AddWebProjectFromSourceControl(string bstrLocalPath, string bstrDatabasePath, string bstrAuxiliarPath, string bstrProviderName, string bstrDebuggingPath);
}
[GuidAttribute("753D3585-2077-4E60-8EC5-96EE793F3D1A")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsSccControlNewSolution {
    public abstract virtual int AddNewSolutionToSourceControl();
    public abstract virtual int GetDisplayStringForAction(String& pbstrActionName);
}
[GuidAttribute("53544C4D-01F8-11D0-8E5E-00A0C911005A")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsSccEnlistmentPathTranslation {
    public abstract virtual int TranslateProjectPathToEnlistmentPath(string lpszProjectPath, String& pbstrEnlistmentPath, String& pbstrEnlistmentPathUNC);
    public abstract virtual int TranslateEnlistmentPathToProjectPath(string lpszEnlistmentPath, String& pbstrProjectPath);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("9C82CA77-A583-4FD1-8C15-0B3995D9AB2F")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsSccGlyphs {
    public abstract virtual int GetCustomGlyphList(UInt32 BaseIndex, IntPtr& pdwImageListHandle);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("B3C3F5E2-7460-4AD6-9581-3A24A3DFE417")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsSccGlyphs2 {
    public abstract virtual IVsImageMonikerImageList GetCustomGlyphMonikerList(UInt32 baseIndex);
}
[GuidAttribute("53544C4D-B927-4320-B9DA-13D2CB3EA93B")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsSccManager2 {
    public abstract virtual int RegisterSccProject(IVsSccProject2 pscp2Project, string pszSccProjectName, string pszSccAuxPath, string pszSccLocalPath, string pszProvider);
    public abstract virtual int UnregisterSccProject(IVsSccProject2 pscp2Project);
    public abstract virtual int GetSccGlyph(int cFiles, String[] rgpszFullPaths, VsStateIcon[] rgsiGlyphs, UInt32[] rgdwSccStatus);
    public abstract virtual int GetSccGlyphFromStatus(UInt32 dwSccStatus, VsStateIcon[] psiGlyph);
    public abstract virtual int IsInstalled(Int32& pbInstalled);
    public abstract virtual int BrowseForProject(String& pbstrDirectory, Int32& pfOK);
    public abstract virtual int CancelAfterBrowseForProject();
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("224209ED-E56C-4C8D-A7FF-31CF4686798D")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsSccManager3 {
    public abstract virtual int RegisterSccProject(IVsSccProject2 pscp2Project, string pszSccProjectName, string pszSccAuxPath, string pszSccLocalPath, string pszProvider);
    public abstract virtual int UnregisterSccProject(IVsSccProject2 pscp2Project);
    public abstract virtual int GetSccGlyph(int cFiles, String[] rgpszFullPaths, VsStateIcon[] rgsiGlyphs, UInt32[] rgdwSccStatus);
    public abstract virtual int GetSccGlyphFromStatus(UInt32 dwSccStatus, VsStateIcon[] psiGlyph);
    public abstract virtual int IsInstalled(Int32& pbInstalled);
    public abstract virtual int BrowseForProject(String& pbstrDirectory, Int32& pfOK);
    public abstract virtual int CancelAfterBrowseForProject();
    public abstract virtual bool IsBSLSupported();
}
[GuidAttribute("53544C4D-DF28-406D-81DA-96DEEB800B64")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsSccManagerTooltip {
    public abstract virtual int GetGlyphTipText(IVsHierarchy phierHierarchy, UInt32 itemidNode, String& pbstrTooltipText);
}
[GuidAttribute("A341396A-1B4A-4164-8E6E-BDDC527C861C")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsSccOpenFromSourceControl {
    public abstract virtual int OpenSolutionFromSourceControl(string pszSolutionStoreUrl);
    public abstract virtual int AddProjectFromSourceControl(string pszProjectStoreUrl);
    public abstract virtual int AddItemFromSourceControl(IVsProject pProject, UInt32 itemidLoc, UInt32 cFilesToAdd, String[] rgpszFilesToAdd, IntPtr hwndDlgOwner, UInt32 grfEditorFlags, Guid& rguidEditorType, string pszPhysicalView, Guid& rguidLogicalView, VSADDRESULT[] pResult);
    public abstract virtual int GetNamespaceExtensionInformation(int vsofsdDlg, String& pbstrNamespaceGUID, String& pbstrTrayDisplayName, String& pbstrProtocolPrefix);
}
[GuidAttribute("53544C4D-AC92-49AC-9172-603E01FA483A")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsSccProject2 {
    public abstract virtual int SccGlyphChanged(int cAffectedNodes, UInt32[] rgitemidAffectedNodes, VsStateIcon[] rgsiNewGlyphs, UInt32[] rgdwNewSccStatus);
    public abstract virtual int SetSccLocation(string pszSccProjectName, string pszSccAuxPath, string pszSccLocalPath, string pszSccProvider);
    public abstract virtual int GetSccFiles(UInt32 itemid, CALPOLESTR[] pCaStringsOut, CADWORD[] pCaFlagsOut);
    public abstract virtual int GetSccSpecialFiles(UInt32 itemid, string pszSccFile, CALPOLESTR[] pCaStringsOut, CADWORD[] pCaFlagsOut);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("53544C4D-06F8-11D0-8E5E-00A0C911005A")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsSccProjectEnlistmentChoice {
    public abstract virtual int GetEnlistmentChoice(VSSCCENLISTMENTCHOICE[] pvscecEnlistmentChoice);
}
[GuidAttribute("53544C4D-00F8-11D0-8E5E-00A0C911005A")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsSccProjectEnlistmentFactory {
    public abstract virtual int GetDefaultEnlistment(string lpszProjectPath, String& pbstrDefaultEnlistment, String& pbstrDefaultEnlistmentUNC);
    public abstract virtual int GetEnlistmentFactoryOptions(UInt32& pvscefoOptions);
    public abstract virtual int ValidateEnlistmentEdit(int fQuick, string lpszProjectPath, string lpszChosenEnlistment, String& pbstrChosenEnlistmentUNC, Int32& pfValidEnlistment);
    public abstract virtual int BrowseEnlistment(string lpszProjectPath, string lpszInitialEnlistment, String& pbstrChosenEnlistment, String& pbstrChosenEnlistmentUNC);
    public abstract virtual int OnBeforeEnlistmentCreate(string lpszProjectPath, string lpszEnlistment, string lpszEnlistmentUNC);
    public abstract virtual int OnAfterEnlistmentCreate(string lpszProjectPath, string lpszEnlistment, string lpszEnlistmentUNC);
}
[GuidAttribute("4C3F73B6-9939-4A4B-8D25-326A8ABED50F")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsSccProjectEvents {
    public abstract virtual void OnProjectRegisteredForSccChange(Guid& guidProject, bool fIsRegistered);
}
[GuidAttribute("53544C4D-02F8-11D0-8E5E-00A0C911005A")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsSccProjectProviderBinding {
    public abstract virtual int GetProviderBinding(VSSCCPROVIDERBINDING[] pvscpbBinding);
    public abstract virtual int GetProviderService(Guid& pguidService);
    public abstract virtual int GetProviderSession(Object& punkSession);
    public abstract virtual int TranslateEnlistmentPath(string lpszPath, Int32& pfAlternateIsDisplay, String& pbstrAlternatePath);
    public abstract virtual int GetProviderBindingOptions(UInt32& pvscpboOptions);
    public abstract virtual int ValidateServerPathEdit(int fQuick, string lpszServerPath, Int32& pfValidServer);
    public abstract virtual int BrowseServerPath(string lpszServerPath, String& pbstrNewServerPath);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("49440575-E33C-4169-9735-F3FD5AE54D8D")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsSccProvider {
    public abstract virtual int SetActive();
    public abstract virtual int SetInactive();
    public abstract virtual int AnyItemsUnderSourceControl(Int32& pfResult);
}
[GuidAttribute("BEB3BC40-5C07-4A90-86DD-6A9977B78867")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsSccProviderRegisteredSettings {
    [DispIdAttribute("1610678272")]
public string DisplayName { get; }
    [DispIdAttribute("1610678273")]
public Guid UIContext { get; }
    [DispIdAttribute("1610678274")]
public Guid ServiceId { get; }
    [DispIdAttribute("1610678275")]
public string MsScciRegKey { get; }
    [DispIdAttribute("1610678276")]
public bool IsPublishSupported { get; }
    public abstract virtual string get_DisplayName();
    public abstract virtual Guid get_UIContext();
    public abstract virtual Guid get_ServiceId();
    public abstract virtual string get_MsScciRegKey();
    public abstract virtual bool get_IsPublishSupported();
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("74995C8C-F619-4638-AC6C-371E98731D6C")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsSccProviderSettings {
    public abstract virtual IVsSccProviderRegisteredSettings[] GetSccProviderRegisteredSettings();
}
[GuidAttribute("53544C4D-304B-4D82-AD93-074816C1A0E5")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsSccToolsOptions {
    public abstract virtual int SetSccToolsOption(SccToolsOptionsEnum sctoOptionToBeSet, object varValueToBeSet);
    public abstract virtual int GetSccToolsOption(SccToolsOptionsEnum sctoOptionToBeSet, Object& pvarValueToGet);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("4871BDEF-3B4A-49CE-80CF-51502FA9A464")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsSccTrackProjectEvents {
    public abstract virtual UInt32 AdviseSccProjectEvents(IVsSccProjectEvents pEventSink);
    public abstract virtual void UnAdviseSccProjectEvents(UInt32 dwCookie);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("53544C4D-0ADC-4F55-BD82-7E8383C02CFB")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsSccVirtualFolders {
    public abstract virtual int GetVirtualFolders(UInt32 itemid, CALPOLESTR[] pCaStringsOut);
    public abstract virtual int IsItemChildOfVirtualFolder(string pszItemName, Boolean& pfResult);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("B2908BBE-C9A6-4AA7-B258-3DB0DDA1D688")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsScriptJmcProjectControl {
    [ComAliasNameAttribute("Microsoft.VisualStudio.Shell.Interop.VsScriptJmcCodeType")]
public VsScriptJmcCodeType EvalDefaultCodeType { get; }
    [ComAliasNameAttribute("Microsoft.VisualStudio.Shell.Interop.VsScriptJmcCodeType")]
public VsScriptJmcCodeType FunctionDefaultCodeType { get; }
    [ComAliasNameAttribute("Microsoft.VisualStudio.Shell.Interop.VsScriptJmcCodeType")]
public VsScriptJmcCodeType ScriptBlockDefaultCodeType { get; }
    public abstract virtual VsScriptJmcCodeType GetUserCodeSourceType(string sourceUrl);
    public abstract virtual VsScriptJmcCodeType get_EvalDefaultCodeType();
    public abstract virtual VsScriptJmcCodeType get_FunctionDefaultCodeType();
    public abstract virtual VsScriptJmcCodeType get_ScriptBlockDefaultCodeType();
}
[GuidAttribute("CEAA99FB-69E7-426D-B3D4-CA1BB1B6BDC3")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsScriptJmcUserSettingsProvider {
    public abstract virtual IVsScriptJmcProjectControl CreateJsonUserSettingsControl(string projectRoot, string settingsFile);
}
[GuidAttribute("FACE369A-F6AB-4EA8-8FA5-E50E326A7CFB")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsSearchCallback {
    public abstract virtual void ReportProgress(IVsSearchTask pTask, UInt32 dwProgress, UInt32 dwMaxProgress);
    public abstract virtual void ReportComplete(IVsSearchTask pTask, UInt32 dwResultsFound);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("4ABDC811-9CC0-4E07-B34A-442D6CC2C29A")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsSearchFilterToken {
    public string OriginalTokenText { get; }
    [ComAliasNameAttribute("OLE.DWORD")]
public UInt32 TokenStartPosition { get; }
    public string ParsedTokenText { get; }
    [ComAliasNameAttribute("Microsoft.VisualStudio.Shell.Interop.VSSEARCHPARSEERROR")]
public UInt32 ParseError { get; }
    public string FilterField { get; }
    public string FilterValue { get; }
    [ComAliasNameAttribute("Microsoft.VisualStudio.Shell.Interop.VSSEARCHFILTERTOKENTYPE")]
public UInt32 FilterTokenType { get; }
    [ComAliasNameAttribute("OLE.DWORD")]
public UInt32 FilterSeparatorPosition { get; }
    public abstract virtual string get_OriginalTokenText();
    public abstract virtual UInt32 get_TokenStartPosition();
    public abstract virtual string get_ParsedTokenText();
    public abstract virtual UInt32 get_ParseError();
    public abstract virtual string get_FilterField();
    public abstract virtual string get_FilterValue();
    public abstract virtual UInt32 get_FilterTokenType();
    public abstract virtual UInt32 get_FilterSeparatorPosition();
}
[GuidAttribute("412A7EBB-C4BD-46CD-B17D-97E337B6F514")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsSearchItemDynamicResult {
    public string DisplayText { get; }
    public string Description { get; }
    public string Tooltip { get; }
    public IVsUIObject Icon { get; }
    public IVsSearchProvider SearchProvider { get; }
    public string PersistenceData { get; }
    public abstract virtual string get_DisplayText();
    public abstract virtual string get_Description();
    public abstract virtual string get_Tooltip();
    public abstract virtual IVsUIObject get_Icon();
    public abstract virtual void InvokeAction();
    public abstract virtual IVsSearchProvider get_SearchProvider();
    public abstract virtual string get_PersistenceData();
    public abstract virtual bool Update();
}
[GuidAttribute("B03B8A31-6BF6-46B1-AC58-0C973F05FFC8")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsSearchItemResult {
    public string DisplayText { get; }
    public string Description { get; }
    public string Tooltip { get; }
    public IVsUIObject Icon { get; }
    public IVsSearchProvider SearchProvider { get; }
    public string PersistenceData { get; }
    public abstract virtual string get_DisplayText();
    public abstract virtual string get_Description();
    public abstract virtual string get_Tooltip();
    public abstract virtual IVsUIObject get_Icon();
    public abstract virtual void InvokeAction();
    public abstract virtual IVsSearchProvider get_SearchProvider();
    public abstract virtual string get_PersistenceData();
}
[GuidAttribute("E85FDFC2-A874-4871-88A3-A2E904183A05")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsSearchProvider {
    public string DisplayText { get; }
    public string Description { get; }
    public string Tooltip { get; }
    public Guid Category { get; }
    public string Shortcut { get; }
    public abstract virtual string get_DisplayText();
    public abstract virtual string get_Description();
    public abstract virtual string get_Tooltip();
    public abstract virtual Guid get_Category();
    public abstract virtual string get_Shortcut();
    public abstract virtual IVsSearchTask CreateSearch(UInt32 dwCookie, IVsSearchQuery pSearchQuery, IVsSearchProviderCallback pSearchCallback);
    public abstract virtual void ProvideSearchSettings(IVsUIDataSource pSearchOptions);
    public abstract virtual IVsSearchItemResult CreateItemResult(string lpszPersistenceData);
}
[GuidAttribute("8DC9CF50-CE22-40D4-A7E2-C5073B506A03")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsSearchProviderCallback {
    public abstract virtual void ReportProgress(IVsSearchTask pTask, UInt32 dwProgress, UInt32 dwMaxProgress);
    public abstract virtual void ReportComplete(IVsSearchTask pTask, UInt32 dwResultsFound);
    public abstract virtual void ReportResult(IVsSearchTask pTask, IVsSearchItemResult pSearchItemResult);
    public abstract virtual void ReportResults(IVsSearchTask pTask, UInt32 dwResults, IVsSearchItemResult[] pSearchItemResults);
}
[GuidAttribute("6223B428-B465-4B2B-864A-D0FFBC4741FD")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsSearchQuery {
    public string SearchString { get; }
    [ComAliasNameAttribute("Microsoft.VisualStudio.Shell.Interop.VSSEARCHPARSEERROR")]
public UInt32 ParseError { get; }
    public abstract virtual string get_SearchString();
    public abstract virtual UInt32 get_ParseError();
    public abstract virtual UInt32 GetTokens(UInt32 dwMaxTokens, IVsSearchToken[] rgpSearchTokens);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("7E6C0144-256B-46B5-B4A7-0005C86CF85F")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsSearchQueryParser {
    public abstract virtual IVsSearchQuery Parse(string pszSearchString);
    public abstract virtual string BuildSearchString(IVsSearchQuery pSearchQuery);
    public abstract virtual string BuildSearchStringFromTokens(UInt32 dwTokens, IVsSearchToken[] pSearchTokens);
    public abstract virtual IVsSearchToken GetSearchToken(string pszTokenText);
    public abstract virtual IVsSearchFilterToken GetSearchFilterToken(string pszFilterField, string pszFilterValue, UInt32 dwFilterTokenType);
}
[GuidAttribute("D709F307-68DB-4600-9EE2-D9F11BA1E005")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsSearchTask {
    [ComAliasNameAttribute("VsShell.VSCOOKIE")]
public UInt32 Id { get; }
    public IVsSearchQuery SearchQuery { get; }
    [ComAliasNameAttribute("Microsoft.VisualStudio.Shell.Interop.VSSEARCHTASKSTATUS")]
public UInt32 Status { get; }
    public int ErrorCode { get; }
    public abstract virtual void Start();
    public abstract virtual void Stop();
    public abstract virtual UInt32 get_Id();
    public abstract virtual IVsSearchQuery get_SearchQuery();
    public abstract virtual UInt32 get_Status();
    public abstract virtual int get_ErrorCode();
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("DB478CC1-3E66-467A-A893-EDE208E18CA1")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsSearchToken {
    public string OriginalTokenText { get; }
    [ComAliasNameAttribute("OLE.DWORD")]
public UInt32 TokenStartPosition { get; }
    public string ParsedTokenText { get; }
    [ComAliasNameAttribute("Microsoft.VisualStudio.Shell.Interop.VSSEARCHPARSEERROR")]
public UInt32 ParseError { get; }
    public abstract virtual string get_OriginalTokenText();
    public abstract virtual UInt32 get_TokenStartPosition();
    public abstract virtual string get_ParsedTokenText();
    public abstract virtual UInt32 get_ParseError();
}
[GuidAttribute("9D86535E-5FE7-4AAF-8846-F1FB5556109A")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsSelectedSymbol {
    public abstract virtual int GetNavInfo(IVsNavInfo& ppNavInfo);
    public abstract virtual int GetName(String& pbstrName);
}
[GuidAttribute("8A8921BE-42C7-4984-82E9-C68B12C2B22E")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsSelectedSymbols {
    public abstract virtual int GetCount(UInt32& pcItems);
    public abstract virtual int GetItem(UInt32 iItem, IVsSelectedSymbol& ppIVsSelectedSymbol);
    public abstract virtual int EnumSelectedSymbols(IVsEnumSelectedSymbols& ppIVsEnumSelectedSymbols);
    public abstract virtual int GetItemTypes(UInt32& pgrfTypes);
}
[GuidAttribute("82871589-D680-4D86-B969-9D1102B00F6F")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsSelectionEvents {
    public abstract virtual int OnSelectionChanged(IVsHierarchy pHierOld, UInt32 itemidOld, IVsMultiItemSelect pMISOld, ISelectionContainer pSCOld, IVsHierarchy pHierNew, UInt32 itemidNew, IVsMultiItemSelect pMISNew, ISelectionContainer pSCNew);
    public abstract virtual int OnElementValueChanged(UInt32 elementid, object varValueOld, object varValueNew);
    public abstract virtual int OnCmdUIContextChanged(UInt32 dwCmdUICookie, int fActive);
}
[GuidAttribute("00757DA7-AAE5-4FE4-9FDF-2E85364E228B")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsSerializeNavigationItem {
    public abstract virtual void Serialize(IVsWindowFrame pFrame, IStream pStream, object punkObject);
    public abstract virtual object Deserialize(IVsWindowFrame pFrame, IStream pStream);
}
[GuidAttribute("5B5AC77C-213B-4642-9D20-5BF902649356")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsServiceInfo {
    [DispIdAttribute("1610678272")]
public Guid ServiceGuid { get; }
    [DispIdAttribute("1610678273")]
public string Name { get; }
    [DispIdAttribute("1610678274")]
public bool IsAsync { get; }
    [DispIdAttribute("1610678275")]
public Guid PackageGuid { get; }
    [DispIdAttribute("1610678276")]
public bool HasOverride { get; }
    [DispIdAttribute("1610678277")]
public Guid OverridePackageGuid { get; }
    public abstract virtual Guid get_ServiceGuid();
    public abstract virtual string get_Name();
    public abstract virtual bool get_IsAsync();
    public abstract virtual Guid get_PackageGuid();
    public abstract virtual bool get_HasOverride();
    public abstract virtual Guid get_OverridePackageGuid();
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("0161283A-D9B6-4C8E-8C9B-121D0E413DD1")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsServiceInfo2 {
    [DispIdAttribute("1610678272")]
public bool IsFreeThreaded { get; }
    [DispIdAttribute("1610678273")]
public bool IsCacheable { get; }
    public abstract virtual bool get_IsFreeThreaded();
    public abstract virtual bool get_IsCacheable();
}
[GuidAttribute("932AA966-86BE-44D9-8403-2F4A2C17ADB1")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsServiceInfoQueryService {
    public abstract virtual int GetServiceInfo(Guid& ServiceGuid, IVsServiceInfo& ppServiceInfo);
}
[GuidAttribute("52B20422-91B2-4FB9-97FE-90D6FA334741")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsSetTargetFrameworkWorkerCallback {
    public abstract virtual int UpdateTargetFramework(IVsHierarchy pHier, string currentTargetFramework, string newTargetFramework);
}
[GuidAttribute("33D90D1C-2665-4EEC-9194-A79AFD63275F")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsSettingsErrorInformation {
    public abstract virtual int GetCompletionStatus(UInt32& pdwCompletionStatus);
    public abstract virtual int GetErrorCount(Int32& pnErrors);
    public abstract virtual int GetErrorInfo(int nErrorIndex, UInt32& pdwErrorType, String& pbstrError);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("94D59A1D-A3A8-46AB-B1DE-B7F034018137")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsSettingsManager {
    public abstract virtual int GetCollectionScopes(string collectionPath, UInt32& scopes);
    public abstract virtual int GetPropertyScopes(string collectionPath, string propertyName, UInt32& scopes);
    public abstract virtual int GetReadOnlySettingsStore(UInt32 scope, IVsSettingsStore& store);
    public abstract virtual int GetWritableSettingsStore(UInt32 scope, IVsWritableSettingsStore& writableStore);
    public abstract virtual int GetApplicationDataFolder(UInt32 folder, String& folderPath);
    public abstract virtual int GetCommonExtensionsSearchPaths(UInt32 paths, String[] commonExtensionsPaths, UInt32& actualPaths);
}
[GuidAttribute("38C38501-1428-4ABB-8B27-2F0E1E6DD757")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsSettingsReader {
    public abstract virtual int ReadSettingString(string pszSettingName, String& pbstrSettingValue);
    public abstract virtual int ReadSettingLong(string pszSettingName, Int32& plSettingValue);
    public abstract virtual int ReadSettingBoolean(string pszSettingName, Int32& pfSettingValue);
    public abstract virtual int ReadSettingBytes(string pszSettingName, Byte& pSettingValue, Int32& plDataLength, int lDataMax);
    public abstract virtual int ReadSettingAttribute(string pszSettingName, string pszAttributeName, String& pbstrSettingValue);
    public abstract virtual int ReadSettingXml(string pszSettingName, Object& ppIXMLDOMNode);
    public abstract virtual int ReadSettingXmlAsString(string pszSettingName, String& pbstrXML);
    public abstract virtual int ReadCategoryVersion(Int32& pnMajor, Int32& pnMinor, Int32& pnBuild, Int32& pnRevision);
    public abstract virtual int ReadFileVersion(Int32& pnMajor, Int32& pnMinor, Int32& pnBuild, Int32& pnRevision);
    public abstract virtual int ReportError(string pszError, UInt32 dwErrorType);
}
[GuidAttribute("0B578BCA-3358-441A-8EA5-9AE07182BEBB")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsSettingsStorageContainer {
    public abstract virtual void SetValue(string key, string value);
    public abstract virtual void SetMultiKeyValue(String[] keys, UInt32 keyCount, string value);
    public abstract virtual string GetValue(string key);
    public abstract virtual string GetMultiKeyValue(String[] keys, int keyCount);
    public abstract virtual void RemoveValue(string key);
    public abstract virtual void RemoveMultiKeyValue(String[] keys, int keyCount);
    public abstract virtual void EnumKeys(IEnumString& ppEnum);
    public abstract virtual void EnumSubkeys(String[] parentKeys, int parentKeyCount, IEnumString& ppEnum);
    public abstract virtual void Clear();
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("6B43326C-AB7C-4263-A7EF-354B9DCBF3D8")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsSettingsStore {
    public abstract virtual int GetBool(string collectionPath, string propertyName, Int32& value);
    public abstract virtual int GetInt(string collectionPath, string propertyName, Int32& value);
    public abstract virtual int GetUnsignedInt(string collectionPath, string propertyName, UInt32& value);
    public abstract virtual int GetInt64(string collectionPath, string propertyName, Int64& value);
    public abstract virtual int GetUnsignedInt64(string collectionPath, string propertyName, UInt64& value);
    public abstract virtual int GetString(string collectionPath, string propertyName, String& value);
    public abstract virtual int GetBinary(string collectionPath, string propertyName, UInt32 byteLength, Byte[] pBytes, UInt32[] actualByteLength);
    public abstract virtual int GetBoolOrDefault(string collectionPath, string propertyName, int defaultValue, Int32& value);
    public abstract virtual int GetIntOrDefault(string collectionPath, string propertyName, int defaultValue, Int32& value);
    public abstract virtual int GetUnsignedIntOrDefault(string collectionPath, string propertyName, UInt32 defaultValue, UInt32& value);
    public abstract virtual int GetInt64OrDefault(string collectionPath, string propertyName, long defaultValue, Int64& value);
    public abstract virtual int GetUnsignedInt64OrDefault(string collectionPath, string propertyName, ulong defaultValue, UInt64& value);
    public abstract virtual int GetStringOrDefault(string collectionPath, string propertyName, string defaultValue, String& value);
    public abstract virtual int GetPropertyType(string collectionPath, string propertyName, UInt32& type);
    public abstract virtual int PropertyExists(string collectionPath, string propertyName, Int32& pfExists);
    public abstract virtual int CollectionExists(string collectionPath, Int32& pfExists);
    public abstract virtual int GetSubCollectionCount(string collectionPath, UInt32& subCollectionCount);
    public abstract virtual int GetPropertyCount(string collectionPath, UInt32& propertyCount);
    public abstract virtual int GetLastWriteTime(string collectionPath, SYSTEMTIME[] lastWriteTime);
    public abstract virtual int GetSubCollectionName(string collectionPath, UInt32 index, String& subCollectionName);
    public abstract virtual int GetPropertyName(string collectionPath, UInt32 index, String& propertyName);
}
[GuidAttribute("3366139A-0829-4C1D-9818-95D4B63DD38B")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsSettingsStore2 {
    public abstract virtual Array GetPropertyNames(string szCollectionPath);
    public abstract virtual void GetPropertyNamesAndValues(string szCollectionPath, Array& ppArrPropertyNames, Array& ppArrPropertyValues);
    public abstract virtual Array GetSubCollectionNames(string szCollectionPath);
}
[NullableContextAttribute("1")]
[GuidAttribute("9572a8d5-0416-4886-b437-ef952590ec3c")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsSettingsStore3 {
    public abstract virtual int GetStrings(string collectionPath, string propertyName, Array& values);
}
[GuidAttribute("0F1CF980-AFC6-406E-958D-7F24287E3916")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsSettingsWriter {
    public abstract virtual int WriteSettingString(string pszSettingName, string pszSettingValue);
    public abstract virtual int WriteSettingLong(string pszSettingName, int lSettingValue);
    public abstract virtual int WriteSettingBoolean(string pszSettingName, int fSettingValue);
    public abstract virtual int WriteSettingBytes(string pszSettingName, Byte[] pSettingValue, int lDataLength);
    public abstract virtual int WriteSettingAttribute(string pszSettingName, string pszAttributeName, string pszSettingValue);
    public abstract virtual int WriteSettingXml(object pIXMLDOMNode);
    public abstract virtual int WriteSettingXmlFromString(string szXML);
    public abstract virtual int WriteCategoryVersion(int nMajor, int nMinor, int nBuild, int nRevision);
    public abstract virtual int ReportError(string pszError, UInt32 dwErrorType);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("ECAB2B82-92FE-4671-A822-908A389541F6")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsSetupCompositionService {
    public string InstallationPath { get; }
    public bool IsManifestRefreshedAndUpdateAvailable { get; }
    public string ProductVersion { get; }
    public string InstallerPath { get; }
    public string ChannelProductVersion { get; }
    public string ChannelReleaseNoteUrl { get; }
    public abstract virtual string get_InstallationPath();
    public abstract virtual bool get_IsManifestRefreshedAndUpdateAvailable();
    public abstract virtual string get_ProductVersion();
    public abstract virtual void GetSetupPackagesInfo(UInt32 cPackages, IVsSetupPackageInfo[] ppPackageInfo, UInt32& pcActual);
    public abstract virtual void GetProjectClassifierInfo(UInt32 cProjectGuids, IVsProjectClassifierInfo[] ppProjectGuidInfo, UInt32& pcActual);
    public abstract virtual void GetTemplateInfo(UInt32 cTemplates, IVsTemplateInfo[] ppTemplateInfo, UInt32& pcActual);
    public abstract virtual IVsSetupPackageInfo GetSetupPackageInfo(string packageName);
    public abstract virtual bool RefreshManifest();
    public abstract virtual void NotifyManifestChanged();
    public abstract virtual UInt32 Advise(IVsSetupManifestEvents pSync);
    public abstract virtual void Unadvise(UInt32 cookie);
    public abstract virtual string get_InstallerPath();
    public abstract virtual bool IsPackageInstalled(string packageName);
    public abstract virtual string get_ChannelProductVersion();
    public abstract virtual string get_ChannelReleaseNoteUrl();
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("D9F18E9F-9842-4D1B-ADDE-8E5601332038")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsSetupCompositionService2 {
    [DispIdAttribute("1610678272")]
public string ChannelProductDisplayVersion { get; }
    [DispIdAttribute("1610678273")]
public bool NewManifestDownloaded { get; }
    public abstract virtual string get_ChannelProductDisplayVersion();
    public abstract virtual bool get_NewManifestDownloaded();
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("F902BFA6-B9ED-4D0C-9C8A-FCB1DDD442D2")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsSetupCompositionService3 {
    public abstract virtual void UpdateVisualStudioInstance();
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("842F4C6D-85FB-4580-B811-CFEDC7DAF1B1")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsSetupManifestEvents {
    public abstract virtual void OnManifestChanged();
}
[GuidAttribute("C806DA70-8757-46E1-B46F-3E668D9E1463")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsSetupPackageInfo {
    public string PackageId { get; }
    public string Description { get; }
    public string Type { get; }
    public string Title { get; }
    [ComAliasNameAttribute("Microsoft.VisualStudio.Shell.Interop.VsSetupPackageState")]
public UInt32 CurrentState { get; }
    public string Version { get; }
    public bool IsUIGroup { get; }
    public abstract virtual string get_PackageId();
    public abstract virtual string get_Description();
    public abstract virtual string get_Type();
    public abstract virtual string get_Title();
    public abstract virtual void GetKeywords(UInt32 cbstr, String[] bstrKeyword, UInt32& pcActual);
    public abstract virtual UInt32 get_CurrentState();
    public abstract virtual string get_Version();
    public abstract virtual bool get_IsUIGroup();
}
[GuidAttribute("ECC3CAB9-FFD8-4ABA-B0D3-25A505CD3B19")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsSharedAssetsProject {
    [DispIdAttribute("1610678272")]
public string SharedItemsImportFullPath { get; }
    public abstract virtual string get_SharedItemsImportFullPath();
    public abstract virtual IVsEnumHierarchies EnumImportingProjects();
    public abstract virtual UInt32 AdviseEvents(IVsSharedAssetsProjectEvents pEvents);
    public abstract virtual void UnadviseEvents(UInt32 cookie);
}
[GuidAttribute("389526A8-4344-4A8B-ACDA-1F180058E57F")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsSharedAssetsProjectEvents {
    public abstract virtual int OnImportingProjectLoaded(IVsHierarchy pLoadedProject);
    public abstract virtual int OnImportingProjectRemovedOrUnloaded(Guid removedOrUnloadedProjectGuid);
}
[GuidAttribute("CFCB9B0D-59AD-4BD8-B288-A2539B54633A")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsSharedMSBuildFilesManagerHierarchy2 {
    public abstract virtual IVsEnumSharedProjectReferences EnumAllAvailableSharedProjects(IVsHierarchy ReferencingProject);
    public abstract virtual IVsSharedProjectReference GetSharedProjectReference(string sharedFileFullPath, IVsHierarchy ReferencingProject);
}
[GuidAttribute("684863A4-BC6E-467C-8218-5C84CAB616DA")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsSharedProjectQueryCanBeReferenced {
    public abstract virtual UInt32 QueryCanSharedProjectBeReferenced(IVsHierarchy ReferencingProject);
}
[GuidAttribute("DD928D98-26E0-4255-A3CE-3BA866296F8B")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsSharedProjectReference {
    [DispIdAttribute("1610678272")]
public string Name { get; public set; }
    [DispIdAttribute("1610678274")]
public string FullPath { get; public set; }
    [DispIdAttribute("1610678276")]
public bool AlreadyReferenced { get; public set; }
    [DispIdAttribute("1610743808")]
public Guid SharedProjectID { get; public set; }
    [DispIdAttribute("1610743810")]
public string SharedMSBuildFileFullPath { get; public set; }
    public abstract virtual string get_Name();
    public abstract virtual void set_Name(string value);
    public abstract virtual string get_FullPath();
    public abstract virtual void set_FullPath(string value);
    public abstract virtual bool get_AlreadyReferenced();
    public abstract virtual void set_AlreadyReferenced(bool value);
    public abstract virtual Guid get_SharedProjectID();
    public abstract virtual void set_SharedProjectID(Guid value);
    public abstract virtual string get_SharedMSBuildFileFullPath();
    public abstract virtual void set_SharedMSBuildFileFullPath(string value);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("C4385811-F65E-4049-A60F-20B9AB884BBC")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsSharedProjectReferenceProviderContext {
    [DispIdAttribute("1610678272")]
public Guid ProviderGuid { get; }
    [DispIdAttribute("1610678273")]
public Array References { get; }
    [DispIdAttribute("1610678276")]
public Array ReferenceFilterPaths { get; public set; }
    [DispIdAttribute("1610743808")]
public IVsHierarchy ReferencingProject { get; public set; }
    public abstract virtual Guid get_ProviderGuid();
    public abstract virtual Array get_References();
    public abstract virtual void AddReference(IVsReference pReference);
    public abstract virtual IVsReference CreateReference();
    public abstract virtual Array get_ReferenceFilterPaths();
    public abstract virtual void set_ReferenceFilterPaths(Array value);
    public abstract virtual IVsHierarchy get_ReferencingProject();
    public abstract virtual void set_ReferencingProject(IVsHierarchy value);
}
[GuidAttribute("BB0D419C-04CD-457A-BC3C-954F447EC806")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsSharedProjectReferencesHelper {
    public abstract virtual bool ChangeSharedMSBuildFileImports(IVsHierarchy importingProject, Array importFullPathsToRemove, Array importFullPathsToAdd, string szImportLabel);
    public abstract virtual bool ChangeSharedProjectReferences(IVsHierarchy ReferencingProject, int cReferencesToRemove, Object[] referencesToRemove, int cReferencesToAdd, Object[] referencesToAdd);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("FD9DC8E3-2FFC-446D-8C50-99CA4A3D2D1C")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsShell {
    public abstract virtual int GetPackageEnum(IEnumPackages& ppenum);
    public abstract virtual int GetProperty(int propid, Object& pvar);
    public abstract virtual int SetProperty(int propid, object var);
    public abstract virtual int AdviseBroadcastMessages(IVsBroadcastMessageEvents pSink, UInt32& pdwCookie);
    public abstract virtual int UnadviseBroadcastMessages(UInt32 dwCookie);
    public abstract virtual int AdviseShellPropertyChanges(IVsShellPropertyEvents pSink, UInt32& pdwCookie);
    public abstract virtual int UnadviseShellPropertyChanges(UInt32 dwCookie);
    public abstract virtual int LoadPackage(Guid& guidPackage, IVsPackage& ppPackage);
    public abstract virtual int LoadPackageString(Guid& guidPackage, UInt32 resid, String& pbstrOut);
    public abstract virtual int LoadUILibrary(Guid& guidPackage, UInt32 dwExFlags, IntPtr& phinstOut);
    public abstract virtual int IsPackageInstalled(Guid& guidPackage, Int32& pfInstalled);
    public abstract virtual int IsPackageLoaded(Guid& guidPackage, IVsPackage& ppPackage);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("F3519E2D-D5D2-4455-B9F4-5F61F993BD66")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsShell2 {
    public abstract virtual int LoadPackageStringWithLCID(Guid& guidPackage, UInt32 resid, UInt32 lcid, String& pbstrOut);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("07BDC931-E86D-4531-A59C-20C614D6E492")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsShell3 {
    public abstract virtual int RestartElevated();
    public abstract virtual int IsRunningElevated(Boolean& pElevated);
}
[GuidAttribute("7AB9748C-7F33-4996-8B00-091B562950A5")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsShell4 {
    public abstract virtual int Restart(UInt32 rtRestartMode);
}
[GuidAttribute("0963C9C9-1083-4BAF-B3F0-55139F708821")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsShell5 {
    public abstract virtual IVsPackage LoadPackageWithContext(Guid& packageGuid, int reason, Guid& context);
    public abstract virtual object CreatePackageExtension(Guid& Package, Guid& extensionPoint, Guid& instance);
}
[GuidAttribute("D111DB4B-584E-4F93-BCEC-5F7E0990E9E7")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsShell6 {
    public abstract virtual IVsPackage LoadPackageWithContext(Guid& packageGuid, int reason, Guid& context);
    public abstract virtual object CreatePackageExtension(Guid& Package, Guid& extensionPoint, Guid& instance);
    public abstract virtual UInt32 AdvisePackageLoadEvents(IVsPackageLoadEvents eventSink);
    public abstract virtual void UnadvisePackageLoadEvents(UInt32 cookie);
    public abstract virtual void NotifyExtensionSettingsChanged();
}
[GuidAttribute("912079DD-342A-4A53-AB7F-752553679A47")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsShell7 {
    [DispIdAttribute("1610678274")]
[ComAliasNameAttribute("ImageParameters140.ImageMoniker")]
public ImageMoniker SccGlyphImageListImageMoniker { get; }
    public abstract virtual IVsTask LoadPackageAsync(Guid& guidPackage);
    public abstract virtual IVsTask LoadPackageWithContextAsync(Guid& guidPackage, int reason, Guid& context);
    public abstract virtual ImageMoniker get_SccGlyphImageListImageMoniker();
}
[GuidAttribute("7A54FEA1-E786-4A30-8F38-45B3703E50DD")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsShellPropertyEvents {
    public abstract virtual int OnShellPropertyChange(int propid, object var);
}
[GuidAttribute("B027F23C-E6B9-415C-ACF0-3D7CFAFCC662")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsSimpleBrowseComponentSet {
    public abstract virtual int put_ComponentsListOptions(UInt32 dwOptions);
    public abstract virtual int get_ComponentsListOptions(UInt32& pdwOptions);
    public abstract virtual int put_ChildListOptions(UInt32 dwOptions);
    public abstract virtual int get_ChildListOptions(UInt32& pdwOptions);
    public abstract virtual int GetList2(UInt32 ListType, UInt32 flags, VSOBSEARCHCRITERIA2[] pobSrch, IVsObjectList2 pExtraListToCombineWith, IVsObjectList2& ppIVsObjectList2);
    public abstract virtual int GetSupportedCategoryFields2(int Category, UInt32& pgrfCatField);
    public abstract virtual int CreateNavInfo(Guid& guidLib, SYMBOL_DESCRIPTION_NODE[] rgSymbolNodes, UInt32 ulcNodes, IVsNavInfo& ppNavInfo);
    public abstract virtual int UpdateCounter(UInt32& pCurUpdate);
    public abstract virtual int put_RootNavInfo(IVsNavInfo pRootNavInfo);
    public abstract virtual int get_RootNavInfo(IVsNavInfo& pRootNavInfo);
    public abstract virtual int put_Owner(object pOwner);
    public abstract virtual int get_Owner(Object& ppOwner);
    public abstract virtual int FindComponent(Guid& guidLib, VSCOMPONENTSELECTORDATA[] pcsdComponent, IVsNavInfo& ppRealLibNavInfo, VSCOMPONENTSELECTORDATA[] pcsdExistingComponent);
    public abstract virtual int AddComponent(Guid& guidLib, VSCOMPONENTSELECTORDATA[] pcsdComponent, IVsNavInfo& ppRealLibNavInfo, VSCOMPONENTSELECTORDATA[] pcsdAddedComponent);
    public abstract virtual int RemoveComponent(IVsNavInfo pRealLibNavInfo);
    public abstract virtual int RemoveAllComponents();
}
[InterfaceTypeAttribute("1")]
[ComConversionLossAttribute]
[GuidAttribute("9D0CA895-4F60-4DE8-980D-06AAD61CE88C")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsSimpleDocFactory {
    public abstract virtual int LoadDocument(string pszMkDocument, Guid& riid, IntPtr& ppDocData);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("2F328444-6E74-48B4-8B95-08015F9D65D9")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsSimpleLibrary2 {
    public abstract virtual int GetSupportedCategoryFields2(int Category, UInt32& pgrfCatField);
    public abstract virtual int GetList2(UInt32 ListType, UInt32 flags, VSOBSEARCHCRITERIA2[] pobSrch, IVsSimpleObjectList2& ppIVsSimpleObjectList2);
    public abstract virtual int GetLibFlags2(UInt32& pgrfFlags);
    public abstract virtual int UpdateCounter(UInt32& pCurUpdate);
    public abstract virtual int GetGuid(Guid& pguidLib);
    public abstract virtual int GetSeparatorStringWithOwnership(String& pbstrSeparator);
    public abstract virtual int LoadState(IStream pIStream, LIB_PERSISTTYPE lptType);
    public abstract virtual int SaveState(IStream pIStream, LIB_PERSISTTYPE lptType);
    public abstract virtual int GetBrowseContainersForHierarchy(IVsHierarchy pHierarchy, UInt32 celt, VSBROWSECONTAINER[] rgBrowseContainers, UInt32[] pcActual);
    public abstract virtual int AddBrowseContainer(VSCOMPONENTSELECTORDATA[] pcdComponent, UInt32& pgrfOptions, String& pbstrComponentAdded);
    public abstract virtual int RemoveBrowseContainer(UInt32 dwReserved, string pszLibName);
    public abstract virtual int CreateNavInfo(SYMBOL_DESCRIPTION_NODE[] rgSymbolNodes, UInt32 ulcNodes, IVsNavInfo& ppNavInfo);
}
[GuidAttribute("A0C6D693-8226-4CA6-AB03-557AA5A33F75")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsSimpleObjectList2 {
    public abstract virtual int GetFlags(UInt32& pFlags);
    public abstract virtual int GetCapabilities2(UInt32& pgrfCapabilities);
    public abstract virtual int UpdateCounter(UInt32& pCurUpdate);
    public abstract virtual int GetItemCount(UInt32& pCount);
    public abstract virtual int GetDisplayData(UInt32 index, VSTREEDISPLAYDATA[] pData);
    public abstract virtual int GetTextWithOwnership(UInt32 index, VSTREETEXTOPTIONS tto, String& pbstrText);
    public abstract virtual int GetTipTextWithOwnership(UInt32 index, VSTREETOOLTIPTYPE eTipType, String& pbstrText);
    public abstract virtual int GetCategoryField2(UInt32 index, int Category, UInt32& pfCatField);
    public abstract virtual int GetBrowseObject(UInt32 index, Object& ppdispBrowseObj);
    public abstract virtual int GetUserContext(UInt32 index, Object& ppunkUserCtx);
    public abstract virtual int ShowHelp(UInt32 index);
    public abstract virtual int GetSourceContextWithOwnership(UInt32 index, String& pbstrFilename, UInt32& pulLineNum);
    public abstract virtual int CountSourceItems(UInt32 index, IVsHierarchy& ppHier, UInt32& pItemid, UInt32& pcItems);
    public abstract virtual int GetMultipleSourceItems(UInt32 index, UInt32 grfGSI, UInt32 cItems, VSITEMSELECTION[] rgItemSel);
    public abstract virtual int CanGoToSource(UInt32 index, VSOBJGOTOSRCTYPE SrcType, Int32& pfOK);
    public abstract virtual int GoToSource(UInt32 index, VSOBJGOTOSRCTYPE SrcType);
    public abstract virtual int GetContextMenu(UInt32 index, Guid& pclsidActive, Int32& pnMenuId, IOleCommandTarget& ppCmdTrgtActive);
    public abstract virtual int QueryDragDrop(UInt32 index, IDataObject pDataObject, UInt32 grfKeyState, UInt32& pdwEffect);
    public abstract virtual int DoDragDrop(UInt32 index, IDataObject pDataObject, UInt32 grfKeyState, UInt32& pdwEffect);
    public abstract virtual int CanRename(UInt32 index, string pszNewName, Int32& pfOK);
    public abstract virtual int DoRename(UInt32 index, string pszNewName, UInt32 grfFlags);
    public abstract virtual int CanDelete(UInt32 index, Int32& pfOK);
    public abstract virtual int DoDelete(UInt32 index, UInt32 grfFlags);
    public abstract virtual int FillDescription2(UInt32 index, UInt32 grfOptions, IVsObjectBrowserDescription3 pobDesc);
    public abstract virtual int EnumClipboardFormats(UInt32 index, UInt32 grfFlags, UInt32 celt, VSOBJCLIPFORMAT[] rgcfFormats, UInt32[] pcActual);
    public abstract virtual int GetClipboardFormat(UInt32 index, UInt32 grfFlags, FORMATETC[] pFormatetc, STGMEDIUM[] pMedium);
    public abstract virtual int GetExtendedClipboardVariant(UInt32 index, UInt32 grfFlags, VSOBJCLIPFORMAT[] pcfFormat, Object& pvarFormat);
    public abstract virtual int GetProperty(UInt32 index, int propid, Object& pvar);
    public abstract virtual int GetNavInfo(UInt32 index, IVsNavInfo& ppNavInfo);
    public abstract virtual int GetNavInfoNode(UInt32 index, IVsNavInfoNode& ppNavInfoNode);
    public abstract virtual int LocateNavInfoNode(IVsNavInfoNode pNavInfoNode, UInt32& pulIndex);
    public abstract virtual int GetExpandable3(UInt32 index, UInt32 ListTypeExcluded, Int32& pfExpandable);
    public abstract virtual int GetList2(UInt32 index, UInt32 ListType, UInt32 flags, VSOBSEARCHCRITERIA2[] pobSrch, IVsSimpleObjectList2& ppIVsSimpleObjectList2);
    public abstract virtual int OnClose(VSTREECLOSEACTIONS[] ptca);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("C42D228E-B275-4FE6-8469-F3184663B883")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsSimplePreviewChangesList {
    public abstract virtual int GetItemCount(UInt32& pCount);
    public abstract virtual int GetDisplayData(UInt32 index, VSTREEDISPLAYDATA[] pData);
    public abstract virtual int GetTextWithOwnership(UInt32 index, VSTREETEXTOPTIONS tto, String& pbstrText);
    public abstract virtual int GetTipTextWithOwnership(UInt32 index, VSTREETOOLTIPTYPE eTipType, String& pbstrText);
    public abstract virtual int GetExpandable(UInt32 index, Int32& pfExpandable);
    public abstract virtual int GetExpandedList(UInt32 index, Int32& pfCanRecurse, IVsSimplePreviewChangesList& ppIVsSimplePreviewChangesList);
    public abstract virtual int LocateExpandedList(IVsSimplePreviewChangesList pIVsSimplePreviewChangesListChild, UInt32& piIndex);
    public abstract virtual int ToggleState(UInt32 index, UInt32& ptscr);
    public abstract virtual int OnRequestSource(UInt32 index, object pIUnknownTextView);
    public abstract virtual int OnClose(VSTREECLOSEACTIONS[] ptca);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("3634494C-492F-4F91-8009-4541234E4E99")]
[ComConversionLossAttribute]
public interface Microsoft.VisualStudio.Shell.Interop.IVsSingleFileGenerator {
    public abstract virtual int DefaultExtension(String& pbstrDefaultExtension);
    public abstract virtual int Generate(string wszInputFilePath, string bstrInputFileContents, string wszDefaultNamespace, IntPtr[] rgbOutputFileContents, UInt32& pcbOutput, IVsGeneratorProgress pGenerateProgress);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("3ADA7A5D-591E-4C9E-8B87-5E33F8E64AA8")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsSingleFileGeneratorFactory {
    public abstract virtual int GetDefaultGenerator(string wszFilename, String& pbstrGenProgID);
    public abstract virtual int CreateGeneratorInstance(string wszProgId, Int32& pbGeneratesDesignTimeSource, Int32& pbGeneratesSharedDesignTimeSource, Int32& pbUseTempPEFlag, IVsSingleFileGenerator& ppGenerate);
    public abstract virtual int GetGeneratorInformation(string wszProgId, Int32& pbGeneratesDesignTimeSource, Int32& pbGeneratesSharedDesignTimeSource, Int32& pbUseTempPEFlag, Guid& pguidGenerator);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("677D16F2-982E-49E6-ACDB-797991764AD8")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsSmartOpenScope {
    public abstract virtual int OpenScope(string wszScope, UInt32 dwOpenFlags, Guid& riid, Object& ppIUnk);
}
[ComConversionLossAttribute]
[InterfaceTypeAttribute("1")]
[GuidAttribute("7F7CD0DB-91EF-49DC-9FA9-02D128515DD4")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsSolution {
    public abstract virtual int GetProjectEnum(UInt32 grfEnumFlags, Guid& rguidEnumOnlyThisType, IEnumHierarchies& ppenum);
    public abstract virtual int CreateProject(Guid& rguidProjectType, string lpszMoniker, string lpszLocation, string lpszName, UInt32 grfCreateFlags, Guid& iidProject, IntPtr& ppProject);
    public abstract virtual int GenerateUniqueProjectName(string lpszRoot, String& pbstrProjectName);
    public abstract virtual int GetProjectOfGuid(Guid& rguidProjectID, IVsHierarchy& ppHierarchy);
    public abstract virtual int GetGuidOfProject(IVsHierarchy pHierarchy, Guid& pguidProjectID);
    public abstract virtual int GetSolutionInfo(String& pbstrSolutionDirectory, String& pbstrSolutionFile, String& pbstrUserOptsFile);
    public abstract virtual int AdviseSolutionEvents(IVsSolutionEvents pSink, UInt32& pdwCookie);
    public abstract virtual int UnadviseSolutionEvents(UInt32 dwCookie);
    public abstract virtual int SaveSolutionElement(UInt32 grfSaveOpts, IVsHierarchy pHier, UInt32 docCookie);
    public abstract virtual int CloseSolutionElement(UInt32 grfCloseOpts, IVsHierarchy pHier, UInt32 docCookie);
    public abstract virtual int GetProjectOfProjref(string pszProjref, IVsHierarchy& ppHierarchy, String& pbstrUpdatedProjref, VSUPDATEPROJREFREASON[] puprUpdateReason);
    public abstract virtual int GetProjrefOfProject(IVsHierarchy pHierarchy, String& pbstrProjref);
    public abstract virtual int GetProjectInfoOfProjref(string pszProjref, int propid, Object& pvar);
    public abstract virtual int AddVirtualProject(IVsHierarchy pHierarchy, UInt32 grfAddVPFlags);
    public abstract virtual int GetItemOfProjref(string pszProjref, IVsHierarchy& ppHierarchy, UInt32& pitemid, String& pbstrUpdatedProjref, VSUPDATEPROJREFREASON[] puprUpdateReason);
    public abstract virtual int GetProjrefOfItem(IVsHierarchy pHierarchy, UInt32 itemid, String& pbstrProjref);
    public abstract virtual int GetItemInfoOfProjref(string pszProjref, int propid, Object& pvar);
    public abstract virtual int GetProjectOfUniqueName(string pszUniqueName, IVsHierarchy& ppHierarchy);
    public abstract virtual int GetUniqueNameOfProject(IVsHierarchy pHierarchy, String& pbstrUniqueName);
    public abstract virtual int GetProperty(int propid, Object& pvar);
    public abstract virtual int SetProperty(int propid, object var);
    public abstract virtual int OpenSolutionFile(UInt32 grfOpenOpts, string pszFilename);
    public abstract virtual int QueryEditSolutionFile(UInt32& pdwEditResult);
    public abstract virtual int CreateSolution(string lpszLocation, string lpszName, UInt32 grfCreateFlags);
    public abstract virtual int GetProjectFactory(UInt32 dwReserved, Guid[] pguidProjectType, string pszMkProject, IVsProjectFactory& ppProjectFactory);
    public abstract virtual int GetProjectTypeGuid(UInt32 dwReserved, string pszMkProject, Guid& pguidProjectType);
    public abstract virtual int OpenSolutionViaDlg(string pszStartDirectory, int fDefaultToAllProjectsFilter);
    public abstract virtual int AddVirtualProjectEx(IVsHierarchy pHierarchy, UInt32 grfAddVPFlags, Guid& rguidProjectID);
    public abstract virtual int QueryRenameProject(IVsProject pProject, string pszMkOldName, string pszMkNewName, UInt32 dwReserved, Int32& pfRenameCanContinue);
    public abstract virtual int OnAfterRenameProject(IVsProject pProject, string pszMkOldName, string pszMkNewName, UInt32 dwReserved);
    public abstract virtual int RemoveVirtualProject(IVsHierarchy pHierarchy, UInt32 grfRemoveVPFlags);
    public abstract virtual int CreateNewProjectViaDlg(string pszExpand, string pszSelect, UInt32 dwReserved);
    public abstract virtual int GetVirtualProjectFlags(IVsHierarchy pHierarchy, UInt32& pgrfAddVPFlags);
    public abstract virtual int GenerateNextDefaultProjectName(string pszBaseName, string pszLocation, String& pbstrProjectName);
    public abstract virtual int GetProjectFilesInSolution(UInt32 grfGetOpts, UInt32 cProjects, String[] rgbstrProjectNames, UInt32& pcProjectsFetched);
    public abstract virtual int CanCreateNewProjectAtLocation(int fCreateNewSolution, string pszFullProjectFilePath, Int32& pfCanCreate);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("95C6A090-BB9E-4BF2-B0BE-F1D04F0ECEA3")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsSolution2 {
    public abstract virtual int GetProjectEnum(UInt32 grfEnumFlags, Guid& rguidEnumOnlyThisType, IEnumHierarchies& ppenum);
    public abstract virtual int CreateProject(Guid& rguidProjectType, string lpszMoniker, string lpszLocation, string lpszName, UInt32 grfCreateFlags, Guid& iidProject, IntPtr& ppProject);
    public abstract virtual int GenerateUniqueProjectName(string lpszRoot, String& pbstrProjectName);
    public abstract virtual int GetProjectOfGuid(Guid& rguidProjectID, IVsHierarchy& ppHierarchy);
    public abstract virtual int GetGuidOfProject(IVsHierarchy pHierarchy, Guid& pguidProjectID);
    public abstract virtual int GetSolutionInfo(String& pbstrSolutionDirectory, String& pbstrSolutionFile, String& pbstrUserOptsFile);
    public abstract virtual int AdviseSolutionEvents(IVsSolutionEvents pSink, UInt32& pdwCookie);
    public abstract virtual int UnadviseSolutionEvents(UInt32 dwCookie);
    public abstract virtual int SaveSolutionElement(UInt32 grfSaveOpts, IVsHierarchy pHier, UInt32 docCookie);
    public abstract virtual int CloseSolutionElement(UInt32 grfCloseOpts, IVsHierarchy pHier, UInt32 docCookie);
    public abstract virtual int GetProjectOfProjref(string pszProjref, IVsHierarchy& ppHierarchy, String& pbstrUpdatedProjref, VSUPDATEPROJREFREASON[] puprUpdateReason);
    public abstract virtual int GetProjrefOfProject(IVsHierarchy pHierarchy, String& pbstrProjref);
    public abstract virtual int GetProjectInfoOfProjref(string pszProjref, int propid, Object& pvar);
    public abstract virtual int AddVirtualProject(IVsHierarchy pHierarchy, UInt32 grfAddVPFlags);
    public abstract virtual int GetItemOfProjref(string pszProjref, IVsHierarchy& ppHierarchy, UInt32& pitemid, String& pbstrUpdatedProjref, VSUPDATEPROJREFREASON[] puprUpdateReason);
    public abstract virtual int GetProjrefOfItem(IVsHierarchy pHierarchy, UInt32 itemid, String& pbstrProjref);
    public abstract virtual int GetItemInfoOfProjref(string pszProjref, int propid, Object& pvar);
    public abstract virtual int GetProjectOfUniqueName(string pszUniqueName, IVsHierarchy& ppHierarchy);
    public abstract virtual int GetUniqueNameOfProject(IVsHierarchy pHierarchy, String& pbstrUniqueName);
    public abstract virtual int GetProperty(int propid, Object& pvar);
    public abstract virtual int SetProperty(int propid, object var);
    public abstract virtual int OpenSolutionFile(UInt32 grfOpenOpts, string pszFilename);
    public abstract virtual int QueryEditSolutionFile(UInt32& pdwEditResult);
    public abstract virtual int CreateSolution(string lpszLocation, string lpszName, UInt32 grfCreateFlags);
    public abstract virtual int GetProjectFactory(UInt32 dwReserved, Guid& pguidProjectType, string pszMkProject, IVsProjectFactory& ppProjectFactory);
    public abstract virtual int GetProjectTypeGuid(UInt32 dwReserved, string pszMkProject, Guid& pguidProjectType);
    public abstract virtual int OpenSolutionViaDlg(string pszStartDirectory, int fDefaultToAllProjectsFilter);
    public abstract virtual int AddVirtualProjectEx(IVsHierarchy pHierarchy, UInt32 grfAddVPFlags, Guid& rguidProjectID);
    public abstract virtual int QueryRenameProject(IVsProject pProject, string pszMkOldName, string pszMkNewName, UInt32 dwReserved, Int32& pfRenameCanContinue);
    public abstract virtual int OnAfterRenameProject(IVsProject pProject, string pszMkOldName, string pszMkNewName, UInt32 dwReserved);
    public abstract virtual int RemoveVirtualProject(IVsHierarchy pHierarchy, UInt32 grfRemoveVPFlags);
    public abstract virtual int CreateNewProjectViaDlg(string pszExpand, string pszSelect, UInt32 dwReserved);
    public abstract virtual int GetVirtualProjectFlags(IVsHierarchy pHierarchy, UInt32& pgrfAddVPFlags);
    public abstract virtual int GenerateNextDefaultProjectName(string pszBaseName, string pszLocation, String& pbstrProjectName);
    public abstract virtual int GetProjectFilesInSolution(UInt32 grfGetOpts, UInt32 cProjects, String[] rgbstrProjectNames, UInt32& pcProjectsFetched);
    public abstract virtual int CanCreateNewProjectAtLocation(int fCreateNewSolution, string pszFullProjectFilePath, Int32& pfCanCreate);
    public abstract virtual int UpdateProjectFileLocation(IVsHierarchy pHierarchy);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("58DCF7BF-F14E-43EC-A7B2-9F78EDD06418")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsSolution3 {
    public abstract virtual int CreateNewProjectViaDlgEx(string pszDlgTitle, string pszTemplateDir, string pszExpand, string pszSelect, string pszHelpTopic, UInt32 cnpvdeFlags, IVsBrowseProjectLocation pBrowse);
    public abstract virtual int GetUniqueUINameOfProject(IVsHierarchy pHierarchy, String& pbstrUniqueName);
    public abstract virtual int CheckForAndSaveDeferredSaveSolution(int fCloseSolution, string pszMessage, string pszTitle, UInt32 grfFlags);
    public abstract virtual int UpdateProjectFileLocationForUpgrade(string pszCurrentLocation, string pszUpgradedLocation);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("D2FB5B25-EAF0-4BE9-8E9B-F2C662AB9826")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsSolution4 {
    public abstract virtual int WriteUserOptsFile();
    [ObsoleteAttribute("This API is no longer supported by Visual Studio.")]
public abstract virtual int IsBackgroundSolutionLoadEnabled(Boolean& pfIsEnabled);
    [ObsoleteAttribute("This API is no longer supported by Visual Studio.")]
public abstract virtual int EnsureProjectsAreLoaded(UInt32 cProjects, Guid[] guidProjects, UInt32 grfFlags);
    [ObsoleteAttribute("This API is no longer supported by Visual Studio.")]
public abstract virtual int EnsureProjectIsLoaded(Guid& guidProject, UInt32 grfFlags);
    [ObsoleteAttribute("This API is no longer supported by Visual Studio.")]
public abstract virtual int EnsureSolutionIsLoaded(UInt32 grfFlags);
    public abstract virtual int ReloadProject(Guid& guidProjectID);
    public abstract virtual int UnloadProject(Guid& guidProjectID, UInt32 dwUnloadStatus);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("90570D49-7B10-4DCD-B9AC-530D91F4EBB5")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsSolution5 {
    public abstract virtual void ResolveFaultedProjects(UInt32 cHierarchies, IVsHierarchy[] rgHierarchies, IVsPropertyBag pProjectFaultResolutionContext, UInt32& pcResolved, UInt32& pcFailed);
    public abstract virtual Guid GetGuidOfProjectFile(string pszProjectFile);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("96CB263F-EB15-4F70-B735-AD5AD7F6D363")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsSolution6 {
    public abstract virtual int SetProjectParent(IVsHierarchy pProject, IVsHierarchy pParent);
    public abstract virtual int AddNewProjectFromTemplate(string szTemplatePath, Array rgCustomParams, string szTargetFramework, string szDestinationFolder, string szProjectName, IVsHierarchy pParent, IVsHierarchy& ppNewProj);
    public abstract virtual int AddExistingProject(string szFullPath, IVsHierarchy pParent, IVsHierarchy& ppNewProj);
    public abstract virtual int BrowseForExistingProject(string szDialogTitle, string szStartupLocation, Guid preferedProjectType, String& pbstrSelected);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("D32B0C42-8AEE-4772-B5C3-04565CDA5A47")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsSolution7 {
    public abstract virtual void OpenFolder(string folderPath);
    public abstract virtual void CloseFolder(string folderPath);
    [ObsoleteAttribute("This API is no longer supported by Visual Studio.")]
public abstract virtual bool IsSolutionLoadDeferred();
    [ObsoleteAttribute("This API is no longer supported by Visual Studio.")]
public abstract virtual bool IsDeferredProjectLoadAllowed(string projectFullPath);
}
[GuidAttribute("51A3A58A-E65E-46F8-A63C-49665A675016")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsSolution8 {
    public abstract virtual int AdviseSolutionEventsEx(Guid& guidCallerId, object pSink, UInt32& pdwCookie);
    public abstract virtual int BatchProjectAction(UInt32 action, UInt32 dwFlags, UInt32 dwNumProjects, Guid[] rgProjects, IVsBatchProjectActionContext& pContext);
    public abstract virtual int IsBatchProjectActionBlocking(UInt32 action, UInt32 dwFlags, UInt32 dwNumProjects, Guid[] rgProjects, Int32& pfIsBlocking);
    public abstract virtual int GetCurrentBatchProjectAction(IVsBatchProjectActionContext& pContext);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("E4E928F3-1143-4C65-8F10-142400138F6D")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsSolutionBatchProjectActionEvents {
    public abstract virtual int OnBeforeBatchProjectReload(IVsBatchProjectActionContext pContext);
    public abstract virtual int OnBeforeBatchProjectUnload(IVsBatchProjectActionContext pContext);
    public abstract virtual int OnEndBatchProjectUnload(IVsBatchProjectActionContext pContext);
    public abstract virtual int OnBeforeBatchProjectLoad(IVsBatchProjectActionContext pContext);
    public abstract virtual int OnEndBatchProjectLoad(IVsBatchProjectActionContext pContext);
    public abstract virtual int OnEndBatchProjectReload(IVsBatchProjectActionContext pContext);
}
[GuidAttribute("93E969D6-1AA0-455F-B208-6ED3C82B5C58")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsSolutionBuildManager {
    public abstract virtual int DebugLaunch(UInt32 grfLaunch);
    public abstract virtual int StartSimpleUpdateSolutionConfiguration(UInt32 dwFlags, UInt32 dwDefQueryResults, int fSuppressUI);
    public abstract virtual int AdviseUpdateSolutionEvents(IVsUpdateSolutionEvents pIVsUpdateSolutionEvents, UInt32& pdwCookie);
    public abstract virtual int UnadviseUpdateSolutionEvents(UInt32 dwCookie);
    public abstract virtual int UpdateSolutionConfigurationIsActive(Int32& pfIsActive);
    public abstract virtual int CanCancelUpdateSolutionConfiguration(Int32& pfCanCancel);
    public abstract virtual int CancelUpdateSolutionConfiguration();
    public abstract virtual int QueryDebugLaunch(UInt32 grfLaunch, Int32& pfCanLaunch);
    public abstract virtual int QueryBuildManagerBusy(Int32& pfBuildManagerBusy);
    public abstract virtual int FindActiveProjectCfg(IntPtr pvReserved1, IntPtr pvReserved2, IVsHierarchy pIVsHierarchy_RequestedProject, IVsProjectCfg[] ppIVsProjectCfg_Active);
    public abstract virtual int get_IsDebug(Int32& pfIsDebug);
    public abstract virtual int put_IsDebug(int fIsDebug);
    public abstract virtual int get_CodePage(UInt32& puiCodePage);
    public abstract virtual int put_CodePage(UInt32 uiCodePage);
    public abstract virtual int StartSimpleUpdateProjectConfiguration(IVsHierarchy pIVsHierarchyToBuild, IVsHierarchy pIVsHierarchyDependent, string pszDependentConfigurationCanonicalName, UInt32 dwFlags, UInt32 dwDefQueryResults, int fSuppressUI);
    public abstract virtual int get_StartupProject(IVsHierarchy& ppHierarchy);
    public abstract virtual int set_StartupProject(IVsHierarchy pHierarchy);
    public abstract virtual int GetProjectDependencies(IVsHierarchy pHier, UInt32 celt, IVsHierarchy[] rgpHier, UInt32[] pcActual);
}
[GuidAttribute("80353F58-F2A3-47B8-B2DF-0475E07BB1C6")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsSolutionBuildManager2 {
    public abstract virtual int DebugLaunch(UInt32 grfLaunch);
    public abstract virtual int StartSimpleUpdateSolutionConfiguration(UInt32 dwFlags, UInt32 dwDefQueryResults, int fSuppressUI);
    public abstract virtual int AdviseUpdateSolutionEvents(IVsUpdateSolutionEvents pIVsUpdateSolutionEvents, UInt32& pdwCookie);
    public abstract virtual int UnadviseUpdateSolutionEvents(UInt32 dwCookie);
    public abstract virtual int UpdateSolutionConfigurationIsActive(Int32& pfIsActive);
    public abstract virtual int CanCancelUpdateSolutionConfiguration(Int32& pfCanCancel);
    public abstract virtual int CancelUpdateSolutionConfiguration();
    public abstract virtual int QueryDebugLaunch(UInt32 grfLaunch, Int32& pfCanLaunch);
    public abstract virtual int QueryBuildManagerBusy(Int32& pfBuildManagerBusy);
    public abstract virtual int FindActiveProjectCfg(IntPtr pvReserved1, IntPtr pvReserved2, IVsHierarchy pIVsHierarchy_RequestedProject, IVsProjectCfg[] ppIVsProjectCfg_Active);
    public abstract virtual int get_IsDebug(Int32& pfIsDebug);
    public abstract virtual int put_IsDebug(int fIsDebug);
    public abstract virtual int get_CodePage(UInt32& puiCodePage);
    public abstract virtual int put_CodePage(UInt32 uiCodePage);
    public abstract virtual int StartSimpleUpdateProjectConfiguration(IVsHierarchy pIVsHierarchyToBuild, IVsHierarchy pIVsHierarchyDependent, string pszDependentConfigurationCanonicalName, UInt32 dwFlags, UInt32 dwDefQueryResults, int fSuppressUI);
    public abstract virtual int get_StartupProject(IVsHierarchy& ppHierarchy);
    public abstract virtual int set_StartupProject(IVsHierarchy pHierarchy);
    public abstract virtual int GetProjectDependencies(IVsHierarchy pHier, UInt32 celt, IVsHierarchy[] rgpHier, UInt32[] pcActual);
    public abstract virtual int StartUpdateProjectConfigurations(UInt32 cProjs, IVsHierarchy[] rgpHierProjs, UInt32 dwFlags, int fSuppressUI);
    public abstract virtual int CalculateProjectDependencies();
    public abstract virtual int QueryProjectDependency(IVsHierarchy pHier, IVsHierarchy pHierDependentOn, Int32& pfIsDependentOn);
    public abstract virtual int SaveDocumentsBeforeBuild(IVsHierarchy pHier, UInt32 itemid, UInt32 docCookie);
    public abstract virtual int StartUpdateSpecificProjectConfigurations(UInt32 cProjs, IVsHierarchy[] rgpHier, IVsCfg[] rgpcfg, UInt32[] rgdwCleanFlags, UInt32[] rgdwBuildFlags, UInt32[] rgdwDeployFlags, UInt32 dwFlags, int fSuppressUI);
}
[GuidAttribute("B6EA87ED-C498-4484-81AC-0BED187E28E6")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsSolutionBuildManager3 {
    public abstract virtual int AdviseUpdateSolutionEvents3(IVsUpdateSolutionEvents3 pIVsUpdateSolutionEvents3, UInt32& pdwCookie);
    public abstract virtual int UnadviseUpdateSolutionEvents3(UInt32 dwCookie);
    public abstract virtual int AreProjectsUpToDate(UInt32 dwOptions);
    public abstract virtual int HasHierarchyChangedSinceLastDTEE();
    public abstract virtual int QueryBuildManagerBusyEx(UInt32& pdwBuildManagerOperation);
}
[GuidAttribute("2C07342B-BA98-4235-983C-8638391A420A")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsSolutionBuildManager4 {
    public abstract virtual int UpdateProjectDependencies(IVsHierarchy pHier);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("75D64352-C2F9-4BF8-9C89-57CFE548BF75")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsSolutionBuildManager5 {
    public abstract virtual void AdviseUpdateSolutionEvents4(IVsUpdateSolutionEvents4 pIVsUpdateSolutionEvents4, UInt32& pdwCookie);
    public abstract virtual void UnadviseUpdateSolutionEvents4(UInt32 dwCookie);
    public abstract virtual void AdviseUpdateSolutionEventsAsync(IVsUpdateSolutionEventsAsync pIVsUpdateSolutionEventsAsync, UInt32& pdwCookie);
    public abstract virtual void UnadviseUpdateSolutionEventsAsync(UInt32 dwCookie);
    public abstract virtual int FindActiveProjectCfgName(Guid& rguidProjectID, String& pbstrProjectCfgCanonicalName);
}
[GuidAttribute("61AA4EA9-018F-4394-AD31-1E76D1BF80C8")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsSolutionBuildManager6 {
    public abstract virtual void AdviseUpdateSolutionEventsEx(Guid& guidActivityId, object pSink, UInt32& pdwCookie);
}
[GuidAttribute("A8516B56-7421-4DBD-AB87-57AF7A2E85DE")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsSolutionEvents {
    public abstract virtual int OnAfterOpenProject(IVsHierarchy pHierarchy, int fAdded);
    public abstract virtual int OnQueryCloseProject(IVsHierarchy pHierarchy, int fRemoving, Int32& pfCancel);
    public abstract virtual int OnBeforeCloseProject(IVsHierarchy pHierarchy, int fRemoved);
    public abstract virtual int OnAfterLoadProject(IVsHierarchy pStubHierarchy, IVsHierarchy pRealHierarchy);
    public abstract virtual int OnQueryUnloadProject(IVsHierarchy pRealHierarchy, Int32& pfCancel);
    public abstract virtual int OnBeforeUnloadProject(IVsHierarchy pRealHierarchy, IVsHierarchy pStubHierarchy);
    public abstract virtual int OnAfterOpenSolution(object pUnkReserved, int fNewSolution);
    public abstract virtual int OnQueryCloseSolution(object pUnkReserved, Int32& pfCancel);
    public abstract virtual int OnBeforeCloseSolution(object pUnkReserved);
    public abstract virtual int OnAfterCloseSolution(object pUnkReserved);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("A711DF67-B00A-4E82-A990-51B2B450EA0F")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsSolutionEvents2 {
    public abstract virtual int OnAfterOpenProject(IVsHierarchy pHierarchy, int fAdded);
    public abstract virtual int OnQueryCloseProject(IVsHierarchy pHierarchy, int fRemoving, Int32& pfCancel);
    public abstract virtual int OnBeforeCloseProject(IVsHierarchy pHierarchy, int fRemoved);
    public abstract virtual int OnAfterLoadProject(IVsHierarchy pStubHierarchy, IVsHierarchy pRealHierarchy);
    public abstract virtual int OnQueryUnloadProject(IVsHierarchy pRealHierarchy, Int32& pfCancel);
    public abstract virtual int OnBeforeUnloadProject(IVsHierarchy pRealHierarchy, IVsHierarchy pStubHierarchy);
    public abstract virtual int OnAfterOpenSolution(object pUnkReserved, int fNewSolution);
    public abstract virtual int OnQueryCloseSolution(object pUnkReserved, Int32& pfCancel);
    public abstract virtual int OnBeforeCloseSolution(object pUnkReserved);
    public abstract virtual int OnAfterCloseSolution(object pUnkReserved);
    public abstract virtual int OnAfterMergeSolution(object pUnkReserved);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("F1DE2D75-3B95-4510-9B2B-565BC0E38877")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsSolutionEvents3 {
    public abstract virtual int OnAfterOpenProject(IVsHierarchy pHierarchy, int fAdded);
    public abstract virtual int OnQueryCloseProject(IVsHierarchy pHierarchy, int fRemoving, Int32& pfCancel);
    public abstract virtual int OnBeforeCloseProject(IVsHierarchy pHierarchy, int fRemoved);
    public abstract virtual int OnAfterLoadProject(IVsHierarchy pStubHierarchy, IVsHierarchy pRealHierarchy);
    public abstract virtual int OnQueryUnloadProject(IVsHierarchy pRealHierarchy, Int32& pfCancel);
    public abstract virtual int OnBeforeUnloadProject(IVsHierarchy pRealHierarchy, IVsHierarchy pStubHierarchy);
    public abstract virtual int OnAfterOpenSolution(object pUnkReserved, int fNewSolution);
    public abstract virtual int OnQueryCloseSolution(object pUnkReserved, Int32& pfCancel);
    public abstract virtual int OnBeforeCloseSolution(object pUnkReserved);
    public abstract virtual int OnAfterCloseSolution(object pUnkReserved);
    public abstract virtual int OnAfterMergeSolution(object pUnkReserved);
    public abstract virtual int OnBeforeOpeningChildren(IVsHierarchy pHierarchy);
    public abstract virtual int OnAfterOpeningChildren(IVsHierarchy pHierarchy);
    public abstract virtual int OnBeforeClosingChildren(IVsHierarchy pHierarchy);
    public abstract virtual int OnAfterClosingChildren(IVsHierarchy pHierarchy);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("23EC4D20-54A9-4365-82C8-ABDFBA686ECF")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsSolutionEvents4 {
    public abstract virtual int OnAfterRenameProject(IVsHierarchy pHierarchy);
    public abstract virtual int OnQueryChangeProjectParent(IVsHierarchy pHierarchy, IVsHierarchy pNewParentHier, Int32& pfCancel);
    public abstract virtual int OnAfterChangeProjectParent(IVsHierarchy pHierarchy);
    [ObsoleteAttribute("Open Solution from SourceControl feature is removed")]
public abstract virtual int OnAfterAsynchOpenProject(IVsHierarchy pHierarchy, int fAdded);
}
[GuidAttribute("AF530689-9987-48BE-AF20-D9392A9C67FF")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsSolutionEvents5 {
    public abstract virtual void OnBeforeOpenProject(Guid& guidProjectID, Guid& guidProjectType, string pszFileName);
}
[GuidAttribute("9AD84AB1-5C4E-4084-B161-21B6696237CB")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsSolutionEvents6 {
    public abstract virtual int OnBeforeProjectRegisteredInRunningDocumentTable(Guid projectID, string projectFullPath);
    public abstract virtual int OnAfterProjectRegisteredInRunningDocumentTable(Guid projectID, string projectFullPath, UInt32 docCookie);
}
[GuidAttribute("A459C228-5617-4136-BCBE-C282DF6D9A62")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsSolutionEvents7 {
    public abstract virtual void OnAfterOpenFolder(string folderPath);
    public abstract virtual void OnBeforeCloseFolder(string folderPath);
    public abstract virtual void OnQueryCloseFolder(string folderPath, Int32& pfCancel);
    public abstract virtual void OnAfterCloseFolder(string folderPath);
    [ObsoleteAttribute("This API is no longer supported by Visual Studio.")]
public abstract virtual void OnAfterLoadAllDeferredProjects();
}
[GuidAttribute("36B55A6C-8DA0-428F-828C-80DE9105F9C1")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsSolutionEvents8 {
    public abstract virtual void OnAfterRenameSolution(string oldName, string newName);
}
[GuidAttribute("7B1D55C6-4F6A-4865-B9B3-1A696E233065")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsSolutionEventsProjectUpgrade {
    public abstract virtual int OnAfterUpgradeProject(IVsHierarchy pHierarchy, UInt32 fUpgradeFlag, string bstrCopyLocation, SYSTEMTIME stUpgradeTime, IVsUpgradeLogger pLogger);
}
[GuidAttribute("6ACFF38A-0D6C-4792-B9D2-9469D60A2AD7")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsSolutionLoadEvents {
    public abstract virtual int OnBeforeOpenSolution(string pszSolutionFilename);
    [ObsoleteAttribute("This API is no longer supported by Visual Studio.")]
public abstract virtual int OnBeforeBackgroundSolutionLoadBegins();
    [ObsoleteAttribute("This API is no longer supported by Visual Studio.")]
public abstract virtual int OnQueryBackgroundLoadProjectBatch(Boolean& pfShouldDelayLoadToNextIdle);
    [ObsoleteAttribute("This API is no longer supported by Visual Studio.")]
public abstract virtual int OnBeforeLoadProjectBatch(bool fIsBackgroundIdleBatch);
    [ObsoleteAttribute("This API is no longer supported by Visual Studio.")]
public abstract virtual int OnAfterLoadProjectBatch(bool fIsBackgroundIdleBatch);
    [ObsoleteAttribute("Use IVsSolutionEvents.OnAfterOpenSolution instead")]
public abstract virtual int OnAfterBackgroundSolutionLoadComplete();
}
[GuidAttribute("4CCB7A7A-BCEB-427C-84C5-FF0BD655311E")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsSolutionLogger {
    public abstract virtual int LogMessage(string pszMessage);
    public abstract virtual int LogError(UInt32 ErrorType, string pszMessage, string pszFile, int nLine, int nColumn, string pszErrorCode, string pszTaskListMessage, string pszUniqueProjectName, string pszHelpKeyword);
}
[GuidAttribute("67A65088-52F3-4C47-B829-1B53A112E8DC")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsSolutionPersistence {
    public abstract virtual int SavePackageSolutionProps(int fPreLoad, IVsHierarchy pHierarchy, IVsPersistSolutionProps ppSP, string pszKey);
    public abstract virtual int SavePackageUserOpts(IVsPersistSolutionOpts pPSO, string pszKey);
    public abstract virtual int LoadPackageUserOpts(IVsPersistSolutionOpts pPSO, string pszKey);
}
[GuidAttribute("56870613-AB44-40B6-8125-F0D82D566C26")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsSolutionUIEvents {
    public abstract virtual void OnFilterChanged(Guid& pguidOldFilterGoup, UInt32 nOldFilterID, Guid& pguidNewFilterGroup, UInt32 nNewFilterID);
    public abstract virtual void OnFilterAsyncLoadStarted(Guid& pguidFilterGroup, UInt32 nFilterID);
    public abstract virtual void OnFilterAsyncLoadCompleted(Guid& pguidFilterGroup, UInt32 nFilterID);
}
[GuidAttribute("D286024E-6940-4D08-986D-CE82E732BAAB")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsSolutionUIHierarchyWindow {
    public abstract virtual bool EnableFilter(Guid& pguidFilterGroup, UInt32 nFilterID);
    public abstract virtual void DisableFilter();
    public abstract virtual bool IsFilterEnabled();
    public abstract virtual void GetCurrentFilter(Guid& pguidFilterGroup, UInt32& nFilterID);
    public abstract virtual void AdviseSolutionUIEvents(IVsSolutionUIEvents pEventSink, UInt32& pdwCookie);
    public abstract virtual void UnadviseSolutionUIEvents(UInt32 dwCookie);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("E7E36A24-6435-48FB-8E5B-D2589FC18D72")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsSpecifyProjectDesignerPages {
    public abstract virtual int GetProjectDesignerPages(CAUUID[] pPages);
}
[GuidAttribute("7E6F344D-52C0-4EDC-814B-16C6DE4AE9B4")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsSQLCLRReferences {
    public abstract virtual int InvokeNewReferencesDlg(object pConnection, object pAssemblySupport, UInt32 dwAddNewReferenceFlags, string szLocalCache, UInt32 dwProjectPermisionLevel, IVsComponentUser pComponentUserCallback);
    public abstract virtual int UpdateReferences(object pConnection, object pAssemblySupport, UInt32 dwReferenceUpdateFlags, UInt32 cAssemblyCount, String[] rgszAssemblies, string szLocalCache, UInt32 dwProjectPermisionLevel, IVsSQLCLRReferencesUpdateCallback pCallBack);
}
[GuidAttribute("7E6F344E-52C0-4EDC-814B-16C6DE4AE9B4")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsSQLCLRReferencesUpdateCallback {
    public abstract virtual int UpdateResult(string szAssembly, UInt32 dwPermisionLevel, int hrUpdateResult, IErrorInfo pErrorInfo, UInt32 updateAction);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("F5B2C031-7093-447F-8486-514FB2CCAD4F")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsStartPageDownload {
    public abstract virtual int StartDownloadService();
    public abstract virtual int StopDownloadService();
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("DAEC2267-C961-44F3-96E2-3053E4EF550C")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsStartupProjectsListService {
    public abstract virtual void AddProject(Guid& guidProject);
    public abstract virtual void RemoveProject(Guid& guidProject);
}
[GuidAttribute("DC0AF70E-5097-4DD3-9983-5A98C3A19942")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsStatusbar {
    public abstract virtual int Clear();
    public abstract virtual int SetText(string pszText);
    public abstract virtual int Progress(UInt32& pdwCookie, int fInProgress, string pwszLabel, UInt32 nComplete, UInt32 nTotal);
    public abstract virtual int Animation(int fOnOff, Object& pvIcon);
    public abstract virtual int SetSelMode(Object& pvSelMode);
    public abstract virtual int SetInsMode(Object& pvInsMode);
    public abstract virtual int SetLineChar(Object& pvLine, Object& pvChar);
    public abstract virtual int SetXYWH(Object& pvX, Object& pvY, Object& pvW, Object& pvH);
    public abstract virtual int SetLineColChar(Object& pvLine, Object& pvCol, Object& pvChar);
    public abstract virtual int IsCurrentUser(IVsStatusbarUser pUser, Int32& pfCurrent);
    public abstract virtual int SetColorText(string pszText, UInt32 crForeColor, UInt32 crBackColor);
    public abstract virtual int GetText(String& pszText);
    public abstract virtual int FreezeOutput(int fFreeze);
    public abstract virtual int IsFrozen(Int32& pfFrozen);
    public abstract virtual int GetFreezeCount(Int32& plCount);
}
[GuidAttribute("5A257C4A-2EB3-4DB7-83DF-29F4A45B632C")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsStatusbar3 {
    public abstract virtual bool Animation2(bool fOnOff, int Count, ImageMoniker[] monikers);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("D388BD3B-4D50-4356-B09A-8917E706D196")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsStatusbarUser {
    public abstract virtual int SetInfo();
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("6D3E477A-4B61-444C-860D-F725E5560B40")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsStatusbarUser2 {
    public abstract virtual void ClearInfo();
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("4743CC21-8943-414D-84C2-E5DE2438D02F")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsStringMap {
    public abstract virtual int SetValue(string szKey, string szValue);
    public abstract virtual int GetValue(string szKey, String& pbstrValue);
    public abstract virtual int RemoveValue(string szKey);
    public abstract virtual int EnumKeys(IEnumString& ppEnum);
    public abstract virtual int Clear();
}
[GuidAttribute("B0DE8148-DABC-4AB9-B418-413E63DF6E6C")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsStrongNameKeys {
    public abstract virtual int EnumProviders(IVsEnumCryptoProviders& ppEnumProviders);
    public abstract virtual int EnumContainers(string szProvider, IVsEnumCryptoProviderContainers& ppEnumContainers);
    public abstract virtual int CreateNewKey(string szFileLocation, String& pbstrFilename);
    public abstract virtual int CreateNewKeyNoUI(string szFile, string szPassword);
    public abstract virtual int CreateNewKeyWithName(string szFile, string szPassword, string szSubjectName);
    public abstract virtual int ImportKeyFromPFX(string szFile, String& pbstrContainerName);
    public abstract virtual int ChangePassword(string szPfxFile, string szOldPassword, string szNewPassword);
}
[GuidAttribute("EA4F4FEC-D6BA-40D3-B536-823518822C9D")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsStrongNameKeys2 {
    public abstract virtual int CreateNewKeyWithNameAndSpecifiedSignatureAlgorithm(string pszAlgorithmID, UInt32 dwKeyLength, string szFile, string szPassword, string szSubjectName);
    public abstract virtual int CreateNewKey2(string szFileLocation, String& pbstrFileName);
}
[GuidAttribute("12B43F9F-8550-4FFA-850F-FE9D4D396C20")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsStructuredFileIO {
    public abstract virtual int CreateNew(string szFileName, UInt32 nFormatIndex, UInt32 dwShareMode, UInt32 dwCreationDisposition, UInt32 dwFlagsAndAttributes, IVsStructuredFileIOHelper pIVsStructuredFileIOHelper, string szFormatVersion, string szDescription, IVsPropertyFileOut& ppIVsPropertyFileOut);
    public abstract virtual int OpenExisting(string szFileName, UInt32 dwShareMode, UInt32 dwCreationDisposition, UInt32 dwFlagsAndAttributes, IVsStructuredFileIOHelper pIVsStructuredFileIOHelper, UInt32& pnFormatIndex, IVsPropertyFileIn& ppIVsPropertyFileIn, String[] pbstrFormatVersion);
    public abstract virtual int GetFormatList(string szEntityName, string szFileTypes, String& ppszFormatList);
    public abstract virtual int GetFormatInfo(UInt32 nFormatIndex, UInt32[] puiCodePage);
    public abstract virtual int FindFormatIndex(UInt32 uiCodePage, UInt32[] pnFormatIndex);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("0612FCA3-B60E-410B-BCCE-43953FF0763C")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsStructuredFileIOHelper {
    public abstract virtual int LoadLocalizedString(UInt32 ulStringID, String& pbstr);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("D34E5A63-E990-472A-9852-45FB36AA67AB")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsSupportCodeDefView {
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("E09C9DCF-D4B7-4D6E-A676-1FC64B4BF6EB")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsSupportItemHandoff {
    public abstract virtual int HandoffItem(UInt32 itemid, IVsProject3 pProjDest, string pszMkDocumentOld, string pszMkDocumentNew, IVsWindowFrame punkWindowFrame);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("2AFA4F74-7A1A-4DEE-8F99-46E74E5A3C0F")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsSupportItemHandoff2 {
    public abstract virtual int OnBeforeHandoffItem(UInt32 itemid, IVsProject3 pProjDest);
}
[GuidAttribute("E68652D0-396C-4937-95A3-F0AE7ACD0E15")]
[ComConversionLossAttribute]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsSwatchClient {
    public abstract virtual int GetMetrics(VSSWATCHMETRICS[] psm);
    public abstract virtual int GetSelection(Int32& pxCur, Int32& pyCur);
    public abstract virtual int SelectionUpdate(Int32& pxCur, Int32& pyCur);
    public abstract virtual int RenderCell(VSSWATCHRENDER[] pRender, Int32& ptcidRet);
    public abstract virtual int SelectCell(int x, int y);
    public abstract virtual int GetCellTooltip(int x, int y, String& pbstrTooltip);
    public abstract virtual int GetEnabledCount(Int32& pcEnabled);
    public abstract virtual int RealizePalette(IntPtr hdc, IntPtr& phpalOld);
}
[GuidAttribute("C4D4F197-941E-43B1-9D42-BE527F9D5D00")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsSymbolicNavigationManager {
    public abstract virtual int RegisterSymbolicNavigationNotify(IVsSymbolicNavigationNotify pNotify, UInt32& pdwCookie);
    public abstract virtual int UnregisterSymbolicNavigationNotify(UInt32 dwCookie);
    public abstract virtual int OnBeforeNavigateToSymbol(IVsHierarchy pHierCodeFile, UInt32 itemidCodeFile, string pszRQName, Int32& pfNavigationHandled);
    public abstract virtual int QueryNavigateToSymbol(IVsHierarchy pHierCodeFile, UInt32 itemidCodeFile, string pszRQName, IVsHierarchy& ppHierToNavigate, UInt32& pitemidToNavigate, TextSpan[] pSpanToNavigate, Int32& pfWouldNavigate);
}
[GuidAttribute("4DE38661-BB8F-4B9B-8D2F-425949341BBE")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsSymbolicNavigationNotify {
    public abstract virtual int OnBeforeNavigateToSymbol(IVsHierarchy pHierCodeFile, UInt32 itemidCodeFile, string pszRQName, Int32& pfNavigationHandled);
    public abstract virtual int QueryNavigateToSymbol(IVsHierarchy pHierCodeFile, UInt32 itemidCodeFile, string pszRQName, IVsHierarchy& ppHierToNavigate, UInt32& pitemidToNavigate, TextSpan[] pSpanToNavigate, Int32& pfWouldNavigate);
}
[GuidAttribute("399DC6D4-84D6-4208-AFA6-362098E7972F")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsTargetFrameworkAssemblies {
    public abstract virtual int GetSupportedFrameworks(IEnumTargetFrameworks& pTargetFrameworks);
    public abstract virtual int GetTargetFrameworkDescription(UInt32 targetVersion, String& pszDescription);
    public abstract virtual int GetSystemAssemblies(UInt32 targetVersion, IEnumSystemAssemblies& pAssemblies);
    public abstract virtual int IsSystemAssembly(string szAssemblyFile, Int32& pIsSystem, UInt32& pTargetFrameworkVersion);
    public abstract virtual int GetRequiredTargetFrameworkVersion(string szAssemblyFile, UInt32& pTargetFrameworkVersion);
    public abstract virtual int GetRequiredTargetFrameworkVersionFromDependency(string szAssemblyFile, UInt32& pTargetFrameworkVersion);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("0B98EAB8-00BB-45D0-AE2F-3DE35CD68235")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsTask {
    public bool IsFaulted { get; }
    public bool IsCompleted { get; }
    public bool IsCanceled { get; }
    public object AsyncState { get; }
    public string Description { get; public set; }
    public abstract virtual IVsTask ContinueWith(UInt32 context, IVsTaskBody pTaskBody);
    public abstract virtual IVsTask ContinueWithEx(UInt32 context, UInt32 options, IVsTaskBody pTaskBody, object pAsyncState);
    public abstract virtual void Start();
    public abstract virtual void Cancel();
    public abstract virtual object GetResult();
    public abstract virtual void AbortIfCanceled();
    public abstract virtual void Wait();
    public abstract virtual bool WaitEx(int millisecondsTimeout, UInt32 options);
    public abstract virtual bool get_IsFaulted();
    public abstract virtual bool get_IsCompleted();
    public abstract virtual bool get_IsCanceled();
    public abstract virtual object get_AsyncState();
    public abstract virtual string get_Description();
    public abstract virtual void set_Description(string value);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("26F21ACD-A055-4F5B-97BE-27C2EC4D7A33")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsTask2 {
    public bool IsFaulted { get; }
    public bool IsCompleted { get; }
    public bool IsCanceled { get; }
    public object AsyncState { get; }
    public string Description { get; public set; }
    public string WaitMessage { get; public set; }
    public abstract virtual IVsTask ContinueWith(UInt32 context, IVsTaskBody pTaskBody);
    public abstract virtual IVsTask ContinueWithEx(UInt32 context, UInt32 options, IVsTaskBody pTaskBody, object pAsyncState);
    public abstract virtual void Start();
    public abstract virtual void Cancel();
    public abstract virtual object GetResult();
    public abstract virtual void AbortIfCanceled();
    public abstract virtual void Wait();
    public abstract virtual bool WaitEx(int millisecondsTimeout, UInt32 options);
    public abstract virtual bool get_IsFaulted();
    public abstract virtual bool get_IsCompleted();
    public abstract virtual bool get_IsCanceled();
    public abstract virtual object get_AsyncState();
    public abstract virtual string get_Description();
    public abstract virtual void set_Description(string value);
    public abstract virtual string get_WaitMessage();
    public abstract virtual void set_WaitMessage(string value);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("05A07459-551F-4CDF-B38A-16089D083110")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsTaskBody {
    public abstract virtual void DoWork(IVsTask pTask, UInt32 dwCount, IVsTask[] pParentTasks, Object& pResult);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("CE465203-16BC-4EBD-B4D1-9B4416B80931")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsTaskCompletionSource {
    public IVsTask Task { get; }
    public abstract virtual IVsTask get_Task();
    public abstract virtual void SetResult(object result);
    public abstract virtual void SetCanceled();
    public abstract virtual void SetFaulted(int hr);
    public abstract virtual void AddDependentTask(IVsTask pTask);
}
[GuidAttribute("0F6D7FB4-2649-4E51-BC20-3698F9F51358")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsTaskItem {
    public abstract virtual int get_Priority(VSTASKPRIORITY[] ptpPriority);
    public abstract virtual int put_Priority(VSTASKPRIORITY tpPriority);
    public abstract virtual int Category(VSTASKCATEGORY[] pCat);
    public abstract virtual int SubcategoryIndex(Int32& pIndex);
    public abstract virtual int ImageListIndex(Int32& pIndex);
    public abstract virtual int get_Checked(Int32& pfChecked);
    public abstract virtual int put_Checked(int fChecked);
    public abstract virtual int get_Text(String& pbstrName);
    public abstract virtual int put_Text(string bstrName);
    public abstract virtual int Document(String& pbstrMkDocument);
    public abstract virtual int Line(Int32& piLine);
    public abstract virtual int Column(Int32& piCol);
    public abstract virtual int CanDelete(Int32& pfCanDelete);
    public abstract virtual int IsReadOnly(VSTASKFIELD field, Int32& pfReadOnly);
    public abstract virtual int HasHelp(Int32& pfHasHelp);
    public abstract virtual int NavigateTo();
    public abstract virtual int NavigateToHelp();
    public abstract virtual int OnFilterTask(int fVisible);
    public abstract virtual int OnDeleteTask();
}
[GuidAttribute("970A6925-5FFA-4A77-972F-7AB90C0130E5")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsTaskItem2 {
    public abstract virtual int get_Priority(VSTASKPRIORITY[] ptpPriority);
    public abstract virtual int put_Priority(VSTASKPRIORITY tpPriority);
    public abstract virtual int Category(VSTASKCATEGORY[] pCat);
    public abstract virtual int SubcategoryIndex(Int32& pIndex);
    public abstract virtual int ImageListIndex(Int32& pIndex);
    public abstract virtual int get_Checked(Int32& pfChecked);
    public abstract virtual int put_Checked(int fChecked);
    public abstract virtual int get_Text(String& pbstrName);
    public abstract virtual int put_Text(string bstrName);
    public abstract virtual int Document(String& pbstrMkDocument);
    public abstract virtual int Line(Int32& piLine);
    public abstract virtual int Column(Int32& piCol);
    public abstract virtual int CanDelete(Int32& pfCanDelete);
    public abstract virtual int IsReadOnly(VSTASKFIELD field, Int32& pfReadOnly);
    public abstract virtual int HasHelp(Int32& pfHasHelp);
    public abstract virtual int NavigateTo();
    public abstract virtual int NavigateToHelp();
    public abstract virtual int OnFilterTask(int fVisible);
    public abstract virtual int OnDeleteTask();
    public abstract virtual int BrowseObject(Object& ppObj);
    public abstract virtual int get_CustomColumnText(Guid& guidView, UInt32 iCustomColumnIndex, String& pbstrText);
    public abstract virtual int put_CustomColumnText(Guid& guidView, UInt32 iCustomColumnIndex, string bstrText);
    public abstract virtual int IsCustomColumnReadOnly(Guid& guidView, UInt32 iCustomColumnIndex, Int32& pfReadOnly);
}
[GuidAttribute("F353950E-C381-4BA6-BCAA-6BA64E53D252")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsTaskItem3 {
    public abstract virtual int GetTaskProvider(IVsTaskProvider3& ppProvider);
    public abstract virtual int GetTaskName(String& pbstrName);
    public abstract virtual int GetColumnValue(int iField, UInt32& ptvtType, UInt32& ptvfFlags, Object& pvarValue, String& pbstrAccessibilityName);
    public abstract virtual int GetTipText(int iField, String& pbstrTipText);
    public abstract virtual int SetColumnValue(int iField, Object& pvarValue);
    public abstract virtual int IsDirty(Int32& pfDirty);
    public abstract virtual int GetEnumCount(int iField, Int32& pnValues);
    public abstract virtual int GetEnumValue(int iField, int iValue, Object& pvarValue, String& pbstrAccessibilityName);
    public abstract virtual int OnLinkClicked(int iField, int iLinkIndex);
    public abstract virtual int GetNavigationStatusText(String& pbstrText);
    public abstract virtual int GetDefaultEditField(Int32& piField);
    public abstract virtual int GetSurrogateProviderGuid(Guid& pguidProvider);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("9D21BCC5-2C63-4A61-B055-2F3DF78EB30A")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsTaskList {
    public abstract virtual int RegisterTaskProvider(IVsTaskProvider pProvider, UInt32& pdwProviderCookie);
    public abstract virtual int UnregisterTaskProvider(UInt32 dwProviderCookie);
    public abstract virtual int RefreshTasks(UInt32 dwProviderCookie);
    public abstract virtual int EnumTaskItems(IVsEnumTaskItems& ppenum);
    public abstract virtual int AutoFilter(VSTASKCATEGORY cat);
    public abstract virtual int UpdateProviderInfo(UInt32 dwProviderCookie);
    public abstract virtual int SetSilentOutputMode(int fSilent);
    public abstract virtual int DumpOutput(UInt32 dwReserved, VSTASKCATEGORY cat, IStream pstmOutput, Int32& pfOutputWritten);
    public abstract virtual int RegisterCustomCategory(Guid& guidCat, UInt32 dwSortOrder, VSTASKCATEGORY[] pCat);
    public abstract virtual int UnregisterCustomCategory(VSTASKCATEGORY catAssigned);
    public abstract virtual int AutoFilter2(Guid& guidCustomView);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("62357211-57FD-4425-A9E5-9A6E0D3B731C")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsTaskList2 {
    public abstract virtual int GetSelectionCount(Int32& pnItems);
    public abstract virtual int GetCaretPos(IVsTaskItem& ppItem);
    public abstract virtual int EnumSelectedItems(IVsEnumTaskItems& ppEnum);
    public abstract virtual int SelectItems(int nItems, IVsTaskItem[] pItems, UInt32 tsfSelType, UInt32 tsspScrollPos);
    public abstract virtual int BeginTaskEdit(IVsTaskItem pItem, int iFocusField);
    public abstract virtual int GetActiveProvider(IVsTaskProvider& ppProvider);
    public abstract virtual int SetActiveProvider(Guid& rguidProvider);
    public abstract virtual int RefreshOrAddTasks(UInt32 vsProviderCookie, int nTasks, IVsTaskItem[] prgTasks);
    public abstract virtual int RemoveTasks(UInt32 vsProviderCookie, int nTasks, IVsTaskItem[] prgTasks);
    public abstract virtual int RefreshAllProviders();
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("6028FB96-E279-4707-8945-7A503AEC636E")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsTaskList3 {
    public abstract virtual IVsTask RefreshTasksAsync(UInt32 providerCookie);
    public abstract virtual IVsTask RefreshOrAddTasksAsync(UInt32 providerCookie, int taskItemCount, IVsTaskItem[] taskItems);
    public abstract virtual IVsTask RemoveTasksAsync(UInt32 providerCookie, int taskItemCount, IVsTaskItem[] taskItems);
    public abstract virtual IVsTask RefreshAllProvidersAsync();
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("D529FAD1-4BE0-4BEA-92A3-A58A4B89D056")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsTaskListEvents {
    public abstract virtual int OnCommentTaskInfoChanged();
}
[GuidAttribute("6909C6ED-2AF5-4A35-8EA7-E6095A3ECF9E")]
[ComConversionLossAttribute]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsTaskProvider {
    public abstract virtual int EnumTaskItems(IVsEnumTaskItems& ppenum);
    public abstract virtual int ImageList(IntPtr& phImageList);
    public abstract virtual int SubcategoryList(UInt32 cbstr, String[] rgbstr, UInt32& pcActual);
    public abstract virtual int ReRegistrationKey(String& pbstrKey);
    public abstract virtual int OnTaskListFinalRelease(IVsTaskList pTaskList);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("A7E6B1F9-DFF1-4354-870F-196BE871F329")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsTaskProvider2 {
    public abstract virtual int EnumTaskItems(IVsEnumTaskItems& ppenum);
    public abstract virtual int ImageList(IntPtr& phImageList);
    public abstract virtual int SubcategoryList(UInt32 cbstr, String[] rgbstr, UInt32& pcActual);
    public abstract virtual int ReRegistrationKey(String& pbstrKey);
    public abstract virtual int OnTaskListFinalRelease(IVsTaskList pTaskList);
    public abstract virtual int MaintainInitialTaskOrder(Int32& bMaintainOrder);
}
[GuidAttribute("AFA6B21D-D599-43F9-A3AB-0840359F11C3")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsTaskProvider3 {
    public abstract virtual int GetProviderFlags(UInt32& tpfFlags);
    public abstract virtual int GetProviderName(String& pbstrName);
    public abstract virtual int GetProviderGuid(Guid& pguidProvider);
    public abstract virtual int GetSurrogateProviderGuid(Guid& pguidProvider);
    public abstract virtual int GetProviderToolbar(Guid& pguidGroup, UInt32& pdwID);
    public abstract virtual int GetColumnCount(Int32& pnColumns);
    public abstract virtual int GetColumn(int iColumn, VSTASKCOLUMN[] pColumn);
    public abstract virtual int OnBeginTaskEdit(IVsTaskItem pItem);
    public abstract virtual int OnEndTaskEdit(IVsTaskItem pItem, int fCommitChanges, Int32& pfAllowChanges);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("6F6E00CC-2261-49E2-8FD9-356B6637A2D9")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsTaskProvider4 {
    public IntPtr ThemedImageList { get; }
    public abstract virtual IntPtr get_ThemedImageList();
}
[GuidAttribute("1565244D-2DAF-486F-ACEF-54C1A32D03FA")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsTaskProvider5 {
    [DispIdAttribute("1610678272")]
public IntPtr ThemedImageList { get; }
    [ComAliasNameAttribute("ImageParameters140.ImageMoniker")]
[DispIdAttribute("1610743808")]
public ImageMoniker ImageListMoniker { get; }
    public abstract virtual IntPtr get_ThemedImageList();
    public abstract virtual ImageMoniker get_ImageListMoniker();
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("83CFBAAF-0DF9-403D-AE42-E738F0AC9735")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsTaskSchedulerService {
    public abstract virtual IVsTask CreateTask(UInt32 context, IVsTaskBody pTaskBody);
    public abstract virtual IVsTask CreateTaskEx(UInt32 context, UInt32 options, IVsTaskBody pTaskBody, object pAsyncState);
    public abstract virtual IVsTask ContinueWhenAllCompleted(UInt32 context, UInt32 dwTasks, IVsTask[] pDependentTasks, IVsTaskBody pTaskBody);
    public abstract virtual IVsTask ContinueWhenAllCompletedEx(UInt32 context, UInt32 dwTasks, IVsTask[] pDependentTasks, UInt32 options, IVsTaskBody pTaskBody, object pAsyncState);
    public abstract virtual IVsTaskCompletionSource CreateTaskCompletionSource();
    public abstract virtual IVsTaskCompletionSource CreateTaskCompletionSourceEx(UInt32 options, object AsyncState);
}
[GuidAttribute("8176DC77-36E2-4987-955B-9F63C6F3F229")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsTaskSchedulerService2 {
    public abstract virtual object GetAsyncTaskContext();
    public abstract virtual object GetTaskScheduler(UInt32 context);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("99D395AF-E402-40B4-86D1-43EDD260ABF4")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsTemplateInfo {
    public string TemplateId { get; }
    public string PackageId { get; }
    public string ProjectSubTypeSortOrder { get; }
    public int ProjectSortOrder { get; }
    public string AppIdFilter { get; }
    public string Title { get; }
    public string Description { get; }
    public string ProjectType { get; }
    public string ProjectTypeDisplayName { get; }
    public string ProjectSubType { get; }
    public string ProjectSubTypeDisplayName { get; }
    public abstract virtual string get_TemplateId();
    public abstract virtual string get_PackageId();
    public abstract virtual string get_ProjectSubTypeSortOrder();
    public abstract virtual int get_ProjectSortOrder();
    public abstract virtual string get_AppIdFilter();
    public abstract virtual string get_Title();
    public abstract virtual string get_Description();
    public abstract virtual string get_ProjectType();
    public abstract virtual string get_ProjectTypeDisplayName();
    public abstract virtual string get_ProjectSubType();
    public abstract virtual string get_ProjectSubTypeDisplayName();
    public abstract virtual void GetPackagesSelectedData(UInt32 cbstr, IVsPackageSelectedInfo[] bstrPackageSelectedData, UInt32& pcActual);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("575BC578-7562-44E7-986C-5B31398CF121")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsTestLog {
    public abstract virtual int LogIdleTime(string pszIdle);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("76A3B2C0-C743-11D0-A7A6-00A0C9110051")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsTextBufferProvider {
    public abstract virtual int GetTextBuffer(IVsTextLines& ppTextBuffer);
    public abstract virtual int SetTextBuffer(IVsTextLines pTextBuffer);
    public abstract virtual int LockTextBuffer(int fLock);
}
[GuidAttribute("2BD8D42F-5BC5-4B7F-AB50-FE9310F2FE53")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsTextOut {
    public abstract virtual int VsGetTextExtent(IntPtr hdc, int cch, UInt16[] pText, SIZE[] pSize);
    public abstract virtual int VsTextOut(IntPtr hdc, int cch, UInt16[] pText, UInt32 grfETO, int x, int y, RECT[] prc);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("E1ABF09D-AD4A-4ADB-86EC-89EE37D2571A")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsThemeThumbnailProvider {
    public abstract virtual IVsUIObject GetThemeThumbnail(Guid themeID);
}
[GuidAttribute("E051C7B7-7648-473C-8A7D-2B9554A31F9D")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsThreadedWaitDialog {
    public abstract virtual int StartWaitDialog(string bstrWaitCaption, string bstrWaitMessage, string bstrIfTruncateAppend, UInt32 dwFlags, object varStatusBmpAnim, string bstrStatusBarText);
    public abstract virtual int EndWaitDialog(Int32& pfCancelled);
    public abstract virtual int GiveTimeSlice(string bstrUpdatedWaitMessage, string bstrIfTruncateAppend, int fDisableCancel, Int32& pfCancelled);
}
[GuidAttribute("88194D8B-88DA-4C33-A2C6-15140626E222")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsThreadedWaitDialog2 {
    public abstract virtual int StartWaitDialog(string szWaitCaption, string szWaitMessage, string szProgressText, object varStatusBmpAnim, string szStatusBarText, int iDelayToShowDialog, bool fIsCancelable, bool fShowMarqueeProgress);
    public abstract virtual int StartWaitDialogWithPercentageProgress(string szWaitCaption, string szWaitMessage, string szProgressText, object varStatusBmpAnim, string szStatusBarText, bool fIsCancelable, int iDelayToShowDialog, int iTotalSteps, int iCurrentStep);
    public abstract virtual int EndWaitDialog(Int32& pfCanceled);
    public abstract virtual int UpdateProgress(string szUpdatedWaitMessage, string szProgressText, string szStatusBarText, int iCurrentStep, int iTotalSteps, bool fDisableCancel, Boolean& pfCanceled);
    public abstract virtual int HasCanceled(Boolean& pfCanceled);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("E92E3159-2381-4179-A500-9676DEE38896")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsThreadedWaitDialog3 {
    public abstract virtual void StartWaitDialog(string szWaitCaption, string szWaitMessage, string szProgressText, object varStatusBmpAnim, string szStatusBarText, int iDelayToShowDialog, bool fIsCancelable, bool fShowMarqueeProgress);
    public abstract virtual void StartWaitDialogWithPercentageProgress(string szWaitCaption, string szWaitMessage, string szProgressText, object varStatusBmpAnim, string szStatusBarText, bool fIsCancelable, int iDelayToShowDialog, int iTotalSteps, int iCurrentStep);
    public abstract virtual void EndWaitDialog(Int32& pfCanceled);
    public abstract virtual void UpdateProgress(string szUpdatedWaitMessage, string szProgressText, string szStatusBarText, int iCurrentStep, int iTotalSteps, bool fDisableCancel, Boolean& pfCanceled);
    public abstract virtual void HasCanceled(Boolean& pfCanceled);
    public abstract virtual void StartWaitDialogWithCallback(string szWaitCaption, string szWaitMessage, string szProgressText, object varStatusBmpAnim, string szStatusBarText, bool fIsCancelable, int iDelayToShowDialog, bool fShowProgress, int iTotalSteps, int iCurrentStep, IVsThreadedWaitDialogCallback pCallback);
}
[GuidAttribute("7619BD89-3B7E-4838-AD11-434BEC7D9530")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsThreadedWaitDialog4 {
    public abstract virtual void StartWaitDialog(string szWaitCaption, string szWaitMessage, string szProgressText, object varStatusBmpAnim, string szStatusBarText, int iDelayToShowDialog, bool fIsCancelable, bool fShowMarqueeProgress);
    public abstract virtual void StartWaitDialogWithPercentageProgress(string szWaitCaption, string szWaitMessage, string szProgressText, object varStatusBmpAnim, string szStatusBarText, bool fIsCancelable, int iDelayToShowDialog, int iTotalSteps, int iCurrentStep);
    public abstract virtual void EndWaitDialog(Int32& pfCanceled);
    public abstract virtual void UpdateProgress(string szUpdatedWaitMessage, string szProgressText, string szStatusBarText, int iCurrentStep, int iTotalSteps, bool fDisableCancel, Boolean& pfCanceled);
    public abstract virtual void HasCanceled(Boolean& pfCanceled);
    public abstract virtual void StartWaitDialogWithCallback(string szWaitCaption, string szWaitMessage, string szProgressText, object varStatusBmpAnim, string szStatusBarText, bool fIsCancelable, int iDelayToShowDialog, bool fShowProgress, int iTotalSteps, int iCurrentStep, IVsThreadedWaitDialogCallback pCallback);
    public abstract virtual bool StartWaitDialogEx(string szWaitCaption, string szWaitMessage, string szProgressText, object varStatusBmpAnim, string szStatusBarText, int iDelayToShowDialog, bool fIsCancelable, bool fShowMarqueeProgress);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("F5CAF6E8-AD40-4D9D-8366-A919F03CA969")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsThreadedWaitDialogCallback {
    public abstract virtual void OnCanceled();
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("D10D92B6-D073-456F-8A26-B63811202B21")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsThreadedWaitDialogFactory {
    public abstract virtual int CreateInstance(IVsThreadedWaitDialog2& ppIVsThreadedWaitDialog);
}
[GuidAttribute("615FF0FB-A19B-4BC8-B9AF-372EA191BA46")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsThreadPool {
    public abstract virtual int ScheduleTask(IntPtr pTaskProc, IntPtr pvParam, UInt32 priority);
    public abstract virtual int ScheduleWaitableTask(IntPtr hWait, IntPtr pTaskProc, IntPtr pvParam);
    public abstract virtual int UnscheduleWaitableTask(IntPtr hWait);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("811DEB01-C1B0-4172-9CA3-504C5095882E")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsThreadSafeCommandWindow {
    public abstract virtual int ThreadSafePrintNoShow(string szTextToPrint);
}
[GuidAttribute("2B3321EE-693F-4B46-9536-E44DAD8C6E60")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsToolbarTrayHost {
    public abstract virtual int AddToolbar(Guid& pGuid, UInt32 dwId);
    public abstract virtual int GetToolbarTray(IVsUIElement& ppToolbarTray);
    public abstract virtual int Close();
}
[GuidAttribute("70E643E2-1673-4764-8A39-63CB1AEE0DC9")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsToolbox {
    public abstract virtual int SetCursor();
    public abstract virtual int GetData(IDataObject& ppDO);
    public abstract virtual int DataUsed();
    public abstract virtual int GetFrame(IVsWindowFrame& ppWindowFrame);
    public abstract virtual int AddItem(IDataObject pDO, TBXITEMINFO[] ptif, string lpszTab);
    public abstract virtual int RemoveItem(IDataObject pDO);
    public abstract virtual int RegisterDataProvider(IVsToolboxDataProvider pDP, UInt32& pdwProvider);
    public abstract virtual int UnregisterDataProvider(UInt32 dwProvider);
    public abstract virtual int GetTab(String& pbstrTab);
    public abstract virtual int AddTab(string lpszTab);
    public abstract virtual int RemoveTab(string lpszTab);
    public abstract virtual int SelectTab(string lpszTab);
    public abstract virtual int EnumTabs(IEnumToolboxTabs& pEnum);
    public abstract virtual int SelectItem(IDataObject pDO);
    public abstract virtual int EnumItems(string lpszTab, IEnumToolboxItems& pEnum);
    public abstract virtual int SetItemInfo(IDataObject pDO, TBXITEMINFO[] ptif);
    public abstract virtual int AddActiveXItem(Guid& clsid, string lpszTab, IVsHierarchy pHierarchy);
    public abstract virtual int UpdateToolboxUI();
    public abstract virtual int AddItemFromFile(string pszFilename, IVsHierarchy pHierSource, Int32& pfItemAdded);
    public abstract virtual int IsCurrentUser(IVsToolboxUser pUser, Int32& pfCurrent);
    public abstract virtual int AddTabEx(string lpszTab, VSTBXTABVIEW tv);
    public abstract virtual int SetTabView(string lpszTab, VSTBXTABVIEW tv);
    public abstract virtual int GetTabView(string lpszTab, VSTBXTABVIEW[] ptv);
}
[GuidAttribute("08E728DC-9C45-4060-A243-B73443B7CA16")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsToolbox2 {
    public abstract virtual int SetCursor();
    public abstract virtual int GetData(IDataObject& ppDO);
    public abstract virtual int DataUsed();
    public abstract virtual int GetFrame(IVsWindowFrame& ppWindowFrame);
    public abstract virtual int AddItem(IDataObject pDO, TBXITEMINFO[] ptif, string lpszTab);
    public abstract virtual int RemoveItem(IDataObject pDO);
    public abstract virtual int RegisterDataProvider(IVsToolboxDataProvider pDP, UInt32& pdwProvider);
    public abstract virtual int UnregisterDataProvider(UInt32 dwProvider);
    public abstract virtual int GetTab(String& pbstrTab);
    public abstract virtual int AddTab(string lpszTab);
    public abstract virtual int RemoveTab(string lpszTab);
    public abstract virtual int SelectTab(string lpszTab);
    public abstract virtual int EnumTabs(IEnumToolboxTabs& pEnum);
    public abstract virtual int SelectItem(IDataObject pDO);
    public abstract virtual int EnumItems(string lpszTab, IEnumToolboxItems& pEnum);
    public abstract virtual int SetItemInfo(IDataObject pDO, TBXITEMINFO[] ptif);
    public abstract virtual int AddActiveXItem(Guid& clsid, string lpszTab, IVsHierarchy pHierarchy);
    public abstract virtual int UpdateToolboxUI();
    public abstract virtual int AddItemFromFile(string pszFilename, IVsHierarchy pHierSource, Int32& pfItemAdded);
    public abstract virtual int IsCurrentUser(IVsToolboxUser pUser, Int32& pfCurrent);
    public abstract virtual int AddTabEx(string lpszTab, VSTBXTABVIEW tv);
    public abstract virtual int SetTabView(string lpszTab, VSTBXTABVIEW tv);
    public abstract virtual int GetTabView(string lpszTab, VSTBXTABVIEW[] ptv);
    public abstract virtual int AddItem2(IDataObject pDO, TBXITEMINFO[] ptif, string lpszTab, Guid& guidPkg);
    public abstract virtual int AddTab2(string lpszTab, Guid& guidPkg);
    public abstract virtual int AddActiveXItem2(Guid& clsid, string lpszTab, IVsHierarchy pHierarchy, Guid& guidPkg);
    public abstract virtual int AddItemFromFile2(string pszFilename, IVsHierarchy pHierSource, Guid& guidPkg, Int32& pfItemAdded);
    public abstract virtual int AddTabEx2(string lpszTab, VSTBXTABVIEW tv, Guid& guidPkg);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("5C67B771-43AD-4BCF-9342-E82CF8E4CBFD")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsToolbox3 {
    public abstract virtual int SetIDOfTab(string lpszTabName, string lpszTabID);
    public abstract virtual int GetIDOfTab(string lpszTabName, String& pbstrTabID);
    public abstract virtual int GetTabOfID(string lpszTabID, String& pbstrTabName);
    public abstract virtual int GetGeneralTabID(String& pbstrTabID);
    public abstract virtual int GetItemID(IDataObject pDO, String& pbstrID);
    public abstract virtual int GetItemDisplayName(IDataObject pDO, String& pbstrName);
    public abstract virtual int GetLastModifiedTime(SYSTEMTIME[] pst);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("8A9899AE-041F-431B-85D0-E44F35D65CDD")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsToolbox4 {
    public abstract virtual int ExpandTab(string lpszTabID, int fExpand);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("724B9AAF-F1D1-4AE8-923B-0F2469B1502A")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsToolbox5 {
    public abstract virtual int GetItemBitmap(IDataObject pDataObject, IntPtr& pBitmap);
    public abstract virtual int GetItemFlags(IDataObject pDataObject, UInt32& pFlags);
    public abstract virtual int IsItemEnabled(IDataObject pDataObject, bool fForceEvaluation, Boolean& pEnabled);
    public abstract virtual int GetLastRefreshTime(DateTime[] pTime);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("A403B9B7-34C3-4EEF-B40E-5AC270277D84")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsToolbox6 {
    public bool IsFiltered { get; public set; }
    public abstract virtual void AddItemToDesigner(IDataObject pItem);
    public abstract virtual void CopyToClipboard(IDataObject pItem);
    public abstract virtual IEnumToolboxTabs EnumTabIDs();
    public abstract virtual UInt32 GetBitmapBackground(IDataObject pItem);
    public abstract virtual string GetUnresolvedItemName(IDataObject pItem);
    public abstract virtual string GetUnresolvedTabName(string szID);
    public abstract virtual bool get_IsFiltered();
    public abstract virtual void set_IsFiltered(bool value);
    public abstract virtual bool IsTabVisible(string szID, bool fRefresh);
    public abstract virtual void MoveItem(IDataObject pItem, IDataObject pInsertionPoint);
    public abstract virtual void MoveItemToTab(IDataObject pItem, string szTabID);
    public abstract virtual void MoveTab(string szID, string szInsertionPoint);
    public abstract virtual void PasteFromClipboard(string szTabID, IDataObject& ppItem);
    public abstract virtual void RenameItem(IDataObject pItem, string szName);
    public abstract virtual void RenameTab(string szID, string szName);
    public abstract virtual IVsTask ResetToolbox(bool promptUser);
    public abstract virtual void RemovePackageContent(Guid& Package);
    public abstract virtual bool IsItemFilteredInvisible(IDataObject pItem);
    public abstract virtual UInt32 GetAsyncState();
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("58928E40-8514-42EE-8EFA-F5CEEEBBF653")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsToolbox7 {
    public bool IsFiltered { get; public set; }
    public abstract virtual void AddItemToDesigner(IDataObject pItem);
    public abstract virtual void CopyToClipboard(IDataObject pItem);
    public abstract virtual IEnumToolboxTabs EnumTabIDs();
    public abstract virtual UInt32 GetBitmapBackground(IDataObject pItem);
    public abstract virtual string GetUnresolvedItemName(IDataObject pItem);
    public abstract virtual string GetUnresolvedTabName(string szID);
    public abstract virtual bool get_IsFiltered();
    public abstract virtual void set_IsFiltered(bool value);
    public abstract virtual bool IsTabVisible(string szID, bool fRefresh);
    public abstract virtual void MoveItem(IDataObject pItem, IDataObject pInsertionPoint);
    public abstract virtual void MoveItemToTab(IDataObject pItem, string szTabID);
    public abstract virtual void MoveTab(string szID, string szInsertionPoint);
    public abstract virtual void PasteFromClipboard(string szTabID, IDataObject& ppItem);
    public abstract virtual void RenameItem(IDataObject pItem, string szName);
    public abstract virtual void RenameTab(string szID, string szName);
    public abstract virtual IVsTask ResetToolbox(bool promptUser);
    public abstract virtual void RemovePackageContent(Guid& Package);
    public abstract virtual bool IsItemFilteredInvisible(IDataObject pItem);
    public abstract virtual UInt32 GetAsyncState();
    public abstract virtual IVsTask AddItem2Async(IDataObject pDO, TBXITEMINFO[] ptif, string lpszTab, Guid& guidPkg);
}
[GuidAttribute("A00C298A-6520-4822-ABD8-C5CD03846599")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsToolboxActiveUserHook {
    public abstract virtual int InterceptDataObject(IDataObject pIn, IDataObject& ppOut);
    public abstract virtual int ToolboxSelectionChanged(IDataObject pSelected);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("6A2A1D82-C590-4AB1-8CC2-D95BACBBA9E0")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsToolboxClipboardCycler {
    public abstract virtual int AreDataObjectsAvailable(IVsToolboxUser pTarget, Int32& pbItemsAvailable);
    public abstract virtual int GetAndSelectNextDataObject(IVsToolboxUser pTarget, IDataObject& ppDO);
    public abstract virtual int BeginCycle();
}
[GuidAttribute("3ED19650-63FE-440E-A3D2-87BC421B04D2")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsToolboxClipboardCycler2 {
    public abstract virtual int AreDataObjectsAvailable(IVsToolboxUser pTarget, Int32& pbItemsAvailable);
    public abstract virtual int GetAndSelectNextDataObject(IVsToolboxUser pTarget, IDataObject& ppDO);
    public abstract virtual int BeginCycle();
    public abstract virtual int GetCountOfClipboardItems(IVsToolboxUser pTarget, UInt32& pLength);
}
[GuidAttribute("F925DA6B-3F43-4437-9E1E-4D4C1BBDAB3F")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsToolboxDataProvider {
    public abstract virtual int FileDropped(string pszFilename, IVsHierarchy pHierSource, Int32& pfFileProcessed);
    public abstract virtual int IsSupported(IDataObject pDO);
    public abstract virtual int IsDataSupported(FORMATETC[] pfetc, STGMEDIUM[] pstm);
    public abstract virtual int GetItemInfo(IDataObject pDO, TBXITEMINFO[] ptif);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("1CD73232-A3C7-48FA-8B0A-2E35804097BF")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsToolboxDataProvider2 {
    public abstract virtual int GetPackageGUID(Guid& pguidPkg);
    public abstract virtual int GetUniqueID(Guid& pguidID);
    public abstract virtual int GetDisplayName(String& pbstrName);
    public abstract virtual int GetItemTipInfo(IDataObject pDO, string lpszCurrentName, IPropertyBag pStrings);
    public abstract virtual int GetProfileData(IDataObject pDO, String& pbstrData);
    public abstract virtual int GetItemID(IDataObject pDO, String& pbstrID);
    public abstract virtual int ReconstituteItem(string lpszCurrentName, string lpszID, string lpszData, IDataObject& ppDO, TBXITEMINFO[] ptif);
}
[GuidAttribute("653BE2DA-BA98-41B7-8ABC-7A38B0E1C01A")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsToolboxDataProviderRegistry {
    public abstract virtual int RegisterDataProvider(IVsToolboxDataProvider pDP, UInt32& pdwProvider);
    public abstract virtual int UnregisterDataProvider(UInt32 dwProvider);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("F2F94425-E001-4C4D-816C-70202E9A594C")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsToolboxItemProvider {
    public abstract virtual int GetItemContent(string szItemID, ushort format, IntPtr& pGlobal);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("35C56762-5AB2-4C9F-AE5A-BF11E4D8FB88")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsToolboxItemProvider2 {
    public abstract virtual IVsTask GetItemContentAsync(string szItemID, ushort format);
}
[GuidAttribute("652C0D0F-217E-46E8-9B85-0EC52279DA8F")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsToolboxPageChooser {
    public abstract virtual int GetPreferredToolboxPage(Guid& pguidPage);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("B5E12E94-6653-4A0D-9C42-5357F2654360")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsToolboxUser {
    public abstract virtual int IsSupported(IDataObject pDO);
    public abstract virtual int ItemPicked(IDataObject pDO);
}
[GuidAttribute("AE31D40E-CD7A-45CB-8DEF-5EA0E44C688A")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsToolsOptions {
    public abstract virtual int IsToolsOptionsOpen(Int32& pfOpen);
    public abstract virtual int RefreshPageVisibility();
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("DDF4F502-C740-47B7-95CC-3FF4B765BA99")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsToolsOptionsHelp {
    public abstract virtual void OnHelp();
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("A7A1C907-C3D2-4ACB-9114-4EE23B6FCF7E")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsToolWindowFactory {
    public abstract virtual int CreateToolWindow(Guid& rguidPersistenceSlot, UInt32 dwToolWindowId);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("4544D333-8D5F-4517-9113-3550D618F2AD")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsToolWindowToolbar {
    public abstract virtual int GetBorder(RECT[] prc);
    public abstract virtual int SetBorderSpace(RECT[] pbw);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("CF7549A9-7A2A-4A6E-ACF4-05452C98CF7E")]
[ComConversionLossAttribute]
public interface Microsoft.VisualStudio.Shell.Interop.IVsToolWindowToolbarHost {
    public abstract virtual int AddToolbar(VSTWT_LOCATION dwLoc, Guid& pguid, UInt32 dwId);
    public abstract virtual int BorderChanged();
    public abstract virtual int ShowHideToolbar(Guid& pguid, UInt32 dwId, int fShow);
    public abstract virtual int ProcessMouseActivation(IntPtr hwnd, UInt32 msg, IntPtr wp, IntPtr lp);
    public abstract virtual int ForceUpdateUI();
    public abstract virtual int ProcessMouseActivationModal(IntPtr hwnd, UInt32 msg, IntPtr wp, IntPtr lp, IntPtr& plResult);
    public abstract virtual int Close(UInt32 dwReserved);
    public abstract virtual int Show(UInt32 dwReserved);
    public abstract virtual int Hide(UInt32 dwReserved);
}
[GuidAttribute("2EFC69A8-5E06-436D-88D5-F099353356DA")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsToolWindowToolbarHost2 {
    public abstract virtual int AddToolbar2(VSTWT_LOCATION dwLoc, Guid& pGuid, UInt32 dwId, IDropTarget pDropTarget);
}
[GuidAttribute("8EE99928-6A35-470B-8AFF-96B0319F6B9A")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsToolWindowToolbarHost3 {
    public abstract virtual int AddToolbar(VSTWT_LOCATION dwLoc, Guid& pguid, UInt32 dwId);
    public abstract virtual int BorderChanged();
    public abstract virtual int ShowHideToolbar(Guid& pguid, UInt32 dwId, int fShow);
    public abstract virtual int ProcessMouseActivation(IntPtr hwnd, UInt32 msg, IntPtr wp, IntPtr lp);
    public abstract virtual int ForceUpdateUI();
    public abstract virtual int ProcessMouseActivationModal(IntPtr hwnd, UInt32 msg, IntPtr wp, IntPtr lp, IntPtr& plResult);
    public abstract virtual int Close(UInt32 dwReserved);
    public abstract virtual int Show(UInt32 dwReserved);
    public abstract virtual int Hide(UInt32 dwReserved);
    public abstract virtual int AddToolbar3(VSTWT_LOCATION dwLoc, Guid& pguid, UInt32 dwId, IDropTarget pDropTarget, IOleCommandTarget pCommandTarget);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("4D6CA502-1FB1-4A49-81C7-8D2D423F7F0F")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsToolWindowToolbarHost4 {
    public abstract virtual int ProcessMouseActivation2(IntPtr hwnd, UInt32 msg, IntPtr wp, IntPtr lp);
    public abstract virtual int ProcessMouseActivationModal2(IntPtr hwnd, UInt32 msg, IntPtr wp, IntPtr lp, IntPtr& plResult);
}
[GuidAttribute("B8CB3252-2133-4869-9E34-DBCECD058081")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsTrackBatchRetargetingEvents {
    public abstract virtual int OnBatchRetargetingBegin();
    public abstract virtual int OnBatchRetargetingEnd();
}
[GuidAttribute("53544C4D-6639-11D3-A60D-005004775AB1")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsTrackProjectDocuments2 {
    public abstract virtual int BeginBatch();
    public abstract virtual int EndBatch();
    public abstract virtual int Flush();
    public abstract virtual int OnQueryAddFiles(IVsProject pProject, int cFiles, String[] rgpszMkDocuments, VSQUERYADDFILEFLAGS[] rgFlags, VSQUERYADDFILERESULTS[] pSummaryResult, VSQUERYADDFILERESULTS[] rgResults);
    public abstract virtual int OnAfterAddFilesEx(IVsProject pProject, int cFiles, String[] rgpszMkDocuments, VSADDFILEFLAGS[] rgFlags);
    public abstract virtual int OnAfterAddFiles(IVsProject pProject, int cFiles, String[] rgpszMkDocuments);
    public abstract virtual int OnAfterAddDirectoriesEx(IVsProject pProject, int cDirectories, String[] rgpszMkDocuments, VSADDDIRECTORYFLAGS[] rgFlags);
    public abstract virtual int OnAfterAddDirectories(IVsProject pProject, int cDirectories, String[] rgpszMkDocuments);
    public abstract virtual int OnAfterRemoveFiles(IVsProject pProject, int cFiles, String[] rgpszMkDocuments, VSREMOVEFILEFLAGS[] rgFlags);
    public abstract virtual int OnAfterRemoveDirectories(IVsProject pProject, int cDirectories, String[] rgpszMkDocuments, VSREMOVEDIRECTORYFLAGS[] rgFlags);
    public abstract virtual int OnQueryRenameFiles(IVsProject pProject, int cFiles, String[] rgszMkOldNames, String[] rgszMkNewNames, VSQUERYRENAMEFILEFLAGS[] rgFlags, VSQUERYRENAMEFILERESULTS[] pSummaryResult, VSQUERYRENAMEFILERESULTS[] rgResults);
    public abstract virtual int OnQueryRenameFile(IVsProject pProject, string pszMkOldName, string pszMkNewName, VSRENAMEFILEFLAGS flags, Int32& pfRenameCanContinue);
    public abstract virtual int OnAfterRenameFiles(IVsProject pProject, int cFiles, String[] rgszMkOldNames, String[] rgszMkNewNames, VSRENAMEFILEFLAGS[] rgFlags);
    public abstract virtual int OnAfterRenameFile(IVsProject pProject, string pszMkOldName, string pszMkNewName, VSRENAMEFILEFLAGS flags);
    public abstract virtual int OnQueryRenameDirectories(IVsProject pProject, int cDirs, String[] rgszMkOldNames, String[] rgszMkNewNames, VSQUERYRENAMEDIRECTORYFLAGS[] rgFlags, VSQUERYRENAMEDIRECTORYRESULTS[] pSummaryResult, VSQUERYRENAMEDIRECTORYRESULTS[] rgResults);
    public abstract virtual int OnAfterRenameDirectories(IVsProject pProject, int cDirs, String[] rgszMkOldNames, String[] rgszMkNewNames, VSRENAMEDIRECTORYFLAGS[] rgFlags);
    public abstract virtual int AdviseTrackProjectDocumentsEvents(IVsTrackProjectDocumentsEvents2 pEventSink, UInt32& pdwCookie);
    public abstract virtual int UnadviseTrackProjectDocumentsEvents(UInt32 dwCookie);
    public abstract virtual int OnQueryAddDirectories(IVsProject pProject, int cDirectories, String[] rgpszMkDocuments, VSQUERYADDDIRECTORYFLAGS[] rgFlags, VSQUERYADDDIRECTORYRESULTS[] pSummaryResult, VSQUERYADDDIRECTORYRESULTS[] rgResults);
    public abstract virtual int OnQueryRemoveFiles(IVsProject pProject, int cFiles, String[] rgpszMkDocuments, VSQUERYREMOVEFILEFLAGS[] rgFlags, VSQUERYREMOVEFILERESULTS[] pSummaryResult, VSQUERYREMOVEFILERESULTS[] rgResults);
    public abstract virtual int OnQueryRemoveDirectories(IVsProject pProject, int cDirectories, String[] rgpszMkDocuments, VSQUERYREMOVEDIRECTORYFLAGS[] rgFlags, VSQUERYREMOVEDIRECTORYRESULTS[] pSummaryResult, VSQUERYREMOVEDIRECTORYRESULTS[] rgResults);
    public abstract virtual int OnAfterSccStatusChanged(IVsProject pProject, int cFiles, String[] rgpszMkDocuments, UInt32[] rgdwSccStatus);
}
[GuidAttribute("53544C4D-9097-4325-9270-754EB85A6351")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsTrackProjectDocuments3 {
    public abstract virtual int BeginQueryBatch();
    public abstract virtual int EndQueryBatch(Int32& pfActionOK);
    public abstract virtual int CancelQueryBatch();
    public abstract virtual int OnQueryAddFilesEx(IVsProject pProject, int cFiles, String[] rgpszNewMkDocuments, String[] rgpszSrcMkDocuments, VSQUERYADDFILEFLAGS[] rgFlags, VSQUERYADDFILERESULTS[] pSummaryResult, VSQUERYADDFILERESULTS[] rgResults);
    public abstract virtual int HandsOffFiles(UInt32 grfRequiredAccess, int cFiles, String[] rgpszMkDocuments);
    public abstract virtual int HandsOnFiles(int cFiles, String[] rgpszMkDocuments);
}
[GuidAttribute("53544C4D-19F7-4351-9168-240478819500")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsTrackProjectDocuments4 {
    public abstract virtual int OnQueryRemoveFilesEx(IVsProject pProject, int cFiles, String[] rgpszMkDocuments, UInt32[] rgFlags, VSQUERYREMOVEFILERESULTS[] pSummaryResult, VSQUERYREMOVEFILERESULTS[] rgResults);
    public abstract virtual int OnQueryRemoveDirectoriesEx(IVsProject pProject, int cDirectories, String[] rgpszMkDocuments, UInt32[] rgFlags, VSQUERYREMOVEDIRECTORYRESULTS[] pSummaryResult, VSQUERYREMOVEDIRECTORYRESULTS[] rgResults);
    public abstract virtual int OnAfterRemoveFilesEx(IVsProject pProject, int cFiles, String[] rgpszMkDocuments, UInt32[] rgFlags);
    public abstract virtual int OnAfterRemoveDirectoriesEx(IVsProject pProject, int cDirectories, String[] rgpszMkDocuments, UInt32[] rgFlags);
}
[GuidAttribute("53544C4D-663D-11D3-A60D-005004775AB1")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsTrackProjectDocumentsEvents2 {
    public abstract virtual int OnQueryAddFiles(IVsProject pProject, int cFiles, String[] rgpszMkDocuments, VSQUERYADDFILEFLAGS[] rgFlags, VSQUERYADDFILERESULTS[] pSummaryResult, VSQUERYADDFILERESULTS[] rgResults);
    public abstract virtual int OnAfterAddFilesEx(int cProjects, int cFiles, IVsProject[] rgpProjects, Int32[] rgFirstIndices, String[] rgpszMkDocuments, VSADDFILEFLAGS[] rgFlags);
    public abstract virtual int OnAfterAddDirectoriesEx(int cProjects, int cDirectories, IVsProject[] rgpProjects, Int32[] rgFirstIndices, String[] rgpszMkDocuments, VSADDDIRECTORYFLAGS[] rgFlags);
    public abstract virtual int OnAfterRemoveFiles(int cProjects, int cFiles, IVsProject[] rgpProjects, Int32[] rgFirstIndices, String[] rgpszMkDocuments, VSREMOVEFILEFLAGS[] rgFlags);
    public abstract virtual int OnAfterRemoveDirectories(int cProjects, int cDirectories, IVsProject[] rgpProjects, Int32[] rgFirstIndices, String[] rgpszMkDocuments, VSREMOVEDIRECTORYFLAGS[] rgFlags);
    public abstract virtual int OnQueryRenameFiles(IVsProject pProject, int cFiles, String[] rgszMkOldNames, String[] rgszMkNewNames, VSQUERYRENAMEFILEFLAGS[] rgFlags, VSQUERYRENAMEFILERESULTS[] pSummaryResult, VSQUERYRENAMEFILERESULTS[] rgResults);
    public abstract virtual int OnAfterRenameFiles(int cProjects, int cFiles, IVsProject[] rgpProjects, Int32[] rgFirstIndices, String[] rgszMkOldNames, String[] rgszMkNewNames, VSRENAMEFILEFLAGS[] rgFlags);
    public abstract virtual int OnQueryRenameDirectories(IVsProject pProject, int cDirs, String[] rgszMkOldNames, String[] rgszMkNewNames, VSQUERYRENAMEDIRECTORYFLAGS[] rgFlags, VSQUERYRENAMEDIRECTORYRESULTS[] pSummaryResult, VSQUERYRENAMEDIRECTORYRESULTS[] rgResults);
    public abstract virtual int OnAfterRenameDirectories(int cProjects, int cDirs, IVsProject[] rgpProjects, Int32[] rgFirstIndices, String[] rgszMkOldNames, String[] rgszMkNewNames, VSRENAMEDIRECTORYFLAGS[] rgFlags);
    public abstract virtual int OnQueryAddDirectories(IVsProject pProject, int cDirectories, String[] rgpszMkDocuments, VSQUERYADDDIRECTORYFLAGS[] rgFlags, VSQUERYADDDIRECTORYRESULTS[] pSummaryResult, VSQUERYADDDIRECTORYRESULTS[] rgResults);
    public abstract virtual int OnQueryRemoveFiles(IVsProject pProject, int cFiles, String[] rgpszMkDocuments, VSQUERYREMOVEFILEFLAGS[] rgFlags, VSQUERYREMOVEFILERESULTS[] pSummaryResult, VSQUERYREMOVEFILERESULTS[] rgResults);
    public abstract virtual int OnQueryRemoveDirectories(IVsProject pProject, int cDirectories, String[] rgpszMkDocuments, VSQUERYREMOVEDIRECTORYFLAGS[] rgFlags, VSQUERYREMOVEDIRECTORYRESULTS[] pSummaryResult, VSQUERYREMOVEDIRECTORYRESULTS[] rgResults);
    public abstract virtual int OnAfterSccStatusChanged(int cProjects, int cFiles, IVsProject[] rgpProjects, Int32[] rgFirstIndices, String[] rgpszMkDocuments, UInt32[] rgdwSccStatus);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("53544C4D-BD74-4D21-A79F-2C190E38AB6F")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsTrackProjectDocumentsEvents3 {
    public abstract virtual int OnBeginQueryBatch();
    public abstract virtual int OnEndQueryBatch(Int32& pfActionOK);
    public abstract virtual int OnCancelQueryBatch();
    public abstract virtual int OnQueryAddFilesEx(IVsProject pProject, int cFiles, String[] rgpszNewMkDocuments, String[] rgpszSrcMkDocuments, VSQUERYADDFILEFLAGS[] rgFlags, VSQUERYADDFILERESULTS[] pSummaryResult, VSQUERYADDFILERESULTS[] rgResults);
    public abstract virtual int HandsOffFiles(UInt32 grfRequiredAccess, int cFiles, String[] rgpszMkDocuments);
    public abstract virtual int HandsOnFiles(int cFiles, String[] rgpszMkDocuments);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("53544C4D-DB74-4078-9642-5D1BC0BB5B26")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsTrackProjectDocumentsEvents4 {
    public abstract virtual void OnQueryRemoveFilesEx(IVsProject pProject, int cFiles, String[] rgpszMkDocuments, UInt32[] rgFlags, VSQUERYREMOVEFILERESULTS[] pSummaryResult, VSQUERYREMOVEFILERESULTS[] rgResults);
    public abstract virtual void OnQueryRemoveDirectoriesEx(IVsProject pProject, int cDirectories, String[] rgpszMkDocuments, UInt32[] rgFlags, VSQUERYREMOVEDIRECTORYRESULTS[] pSummaryResult, VSQUERYREMOVEDIRECTORYRESULTS[] rgResults);
    public abstract virtual void OnAfterRemoveFilesEx(int cProjects, int cFiles, IVsProject[] rgpProjects, Int32[] rgFirstIndices, String[] rgpszMkDocuments, UInt32[] rgFlags);
    public abstract virtual void OnAfterRemoveDirectoriesEx(int cProjects, int cDirectories, IVsProject[] rgpProjects, Int32[] rgFirstIndices, String[] rgpszMkDocuments, UInt32[] rgFlags);
}
[GuidAttribute("D991BC9B-9C68-447F-A3A7-95962AD75DD2")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsTrackProjectRetargeting {
    public abstract virtual int OnSetTargetFramework(IVsHierarchy pHier, string currentTargetFramework, string newTargetFramework, IVsSetTargetFrameworkWorkerCallback pWorkerCallback, bool ReloadProject);
    public abstract virtual int AdviseTrackProjectRetargetingEvents(IVsTrackProjectRetargetingEvents pEventSink, UInt32& pdwCookie);
    public abstract virtual int UnadviseTrackProjectRetargetingEvents(UInt32 dwCookie);
    public abstract virtual int AdviseTrackBatchRetargetingEvents(IVsTrackBatchRetargetingEvents pEventSink, UInt32& pdwCookie);
    public abstract virtual int UnadviseTrackBatchRetargetingEvents(UInt32 dwCookie);
    public abstract virtual int BeginRetargetingBatch();
    public abstract virtual int BatchRetargetProject(IVsHierarchy pHier, string newTargetFramework, bool unloadProjectIfErrorOrCancel);
    public abstract virtual int EndRetargetingBatch();
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("04B8F50B-D3FD-401D-A41D-D574D0D26136")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsTrackProjectRetargeting2 {
    public abstract virtual int OnSetTargetFramework(IVsHierarchy pHier, string currentTargetFramework, string newTargetFramework, IVsSetTargetFrameworkWorkerCallback pWorkerCallback, bool ReloadProject);
    public abstract virtual int AdviseTrackProjectRetargetingEvents(IVsTrackProjectRetargetingEvents pEventSink, UInt32& pdwCookie);
    public abstract virtual int UnadviseTrackProjectRetargetingEvents(UInt32 dwCookie);
    public abstract virtual int AdviseTrackBatchRetargetingEvents(IVsTrackBatchRetargetingEvents pEventSink, UInt32& pdwCookie);
    public abstract virtual int UnadviseTrackBatchRetargetingEvents(UInt32 dwCookie);
    public abstract virtual int BeginRetargetingBatch();
    public abstract virtual int BatchRetargetProject(IVsHierarchy pHier, string newTargetFramework, bool unloadProjectIfErrorOrCancel);
    public abstract virtual int EndRetargetingBatch();
    public abstract virtual int RegisterProjectTarget(IVsProjectTargetDescription pTarget);
    public abstract virtual int UnregisterProjectTarget(Guid TargetId);
    public abstract virtual int GetProjectTarget(Guid TargetId, IVsProjectTargetDescription& pTarget);
    public abstract virtual int BeginRetargetingBatchEx(UInt32 dwFlags);
    public abstract virtual int CheckSolutionForRetarget(UInt32 dwFlags);
    public abstract virtual int CheckForProjectRetarget(UInt32 dwFlags, IVsHierarchy pHier);
    public abstract virtual int PromptForProjectRetarget(IVsHierarchy pHier, IVsProjectTargetChange pTarget, string szDescription);
    public abstract virtual int RegisterSetupDriver(Guid driverId, IVsProjectAcquisitionSetupDriver pDriver);
    public abstract virtual int GetSetupDriver(Guid driverId, IVsProjectAcquisitionSetupDriver& pDriver);
    public abstract virtual int UnregisterSetupDriver(Guid driverId);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("60E3F077-6867-4528-96C7-98DD5B541D85")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsTrackProjectRetargetingEvents {
    public abstract virtual int OnRetargetingBeforeChange(string projRef, IVsHierarchy pBeforeChangeHier, string currentTargetFramework, string newTargetFramework, Boolean& pCanceled, String& ppReasonMsg);
    public abstract virtual int OnRetargetingCanceledChange(string projRef, IVsHierarchy pBeforeChangeHier, string currentTargetFramework, string newTargetFramework);
    public abstract virtual int OnRetargetingBeforeProjectSave(string projRef, IVsHierarchy pBeforeChangeHier, string currentTargetFramework, string newTargetFramework);
    public abstract virtual int OnRetargetingAfterChange(string projRef, IVsHierarchy pAfterChangeHier, string fromTargetFramework, string toTargetFramework);
    public abstract virtual int OnRetargetingFailure(string projRef, IVsHierarchy pHier, string fromTargetFramework, string toTargetFramework);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("18291FD1-A1DD-4264-AEAD-6AFD616BF15A")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsTrackSelectionEx {
    public abstract virtual int OnSelectChange(ISelectionContainer pSC);
    public abstract virtual int OnSelectChangeEx(IntPtr pHier, UInt32 itemid, IVsMultiItemSelect pMIS, IntPtr pSC);
    public abstract virtual int IsMyHierarchyCurrent(Int32& pfCurrent);
    public abstract virtual int OnElementValueChange(UInt32 elementid, int fDontPropagate, object varValue);
    public abstract virtual int GetCurrentSelection(IntPtr& ppHier, UInt32& pitemid, IVsMultiItemSelect& ppMIS, IntPtr& ppSC);
}
[ComConversionLossAttribute]
[InterfaceTypeAttribute("1")]
[GuidAttribute("E6065B70-C9B6-4636-80F5-1CF92D7ECE5B")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsTypeLibraryWrapper {
    public abstract virtual int WrapTypeLibrary(TLIBATTR[] pTypeLibToWrap, string wszDestinationDirectory, string wszKeyFile, string wszKeyContainer, int bDelaySign, IVsTypeLibraryWrapperCallback pCallback, IntPtr[] rgbstrWrapperPaths, IntPtr[] rgWrappedTypeLibs, IntPtr[] rgbGenerated, IntPtr[] rgbstrWrapperTools, UInt32& pcWrappedTypeLibs);
    public abstract virtual int GetMainWrapperFilename(TLIBATTR[] pTypeLibToWrap, String& pbstrFilename);
    public abstract virtual int NeedsRegeneration(TLIBATTR[] pTypeLibToWrap, string wszKeyFile, string wszKeyContainerName, int bDelaySign, int bCurrentlyDelaySigned, string wszExistingWrapperFilename, Int32& pbNeedsRegeneration);
    public abstract virtual int GetMainWrapperFriendlyName(TLIBATTR[] pTypeLibToWrap, String& pbstrFilename);
}
[GuidAttribute("56BC6B2E-539A-42BA-B7A9-CD9A201B7657")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsTypeLibraryWrapperBatchSupport {
    public abstract virtual int StartBatch();
    public abstract virtual int StopBatch();
}
[GuidAttribute("AFF2B95E-229B-4A14-A422-E99452AD2F8C")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsTypeLibraryWrapperCallback {
    public abstract virtual int GetAssembly(string wszFusionName, String& pbstrPath);
    public abstract virtual int GetComClassic(TLIBATTR[] pTypeLibAttr, string wszWrapperTool, Int32& pDelaySigned, String& pbstrWrapperTool, String& pbstrPath);
    public abstract virtual int GetComClassicByTypeLibName(string wszTypeLibName, TLIBATTR[] pTypeLibAttr, Int32& pDelaySigned, String& pbstrWrapperTool, String& pbstrPath);
}
[GuidAttribute("4E25556D-941D-4C29-A171-384EA84F6705")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsUIAccelerator {
    public abstract virtual int get_Message(MSG[] pMsg);
    public abstract virtual int get_Modifiers(UInt32& pdwModifiers);
}
[GuidAttribute("F9362B93-C6FD-4C51-8AF9-B4BC13953E6C")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsUICollection {
    public abstract virtual int Invoke(string verb, object pvaIn, Object& pvaOut);
    public abstract virtual int EnumVerbs(IVsUIEnumDataSourceVerbs& ppEnum);
    public abstract virtual int Close();
    public abstract virtual int get_Count(UInt32& pnCount);
    public abstract virtual int GetItem(UInt32 nItem, IVsUIDataSource& pVsUIDataSource);
    public abstract virtual int AdviseCollectionChangeEvents(IVsUICollectionChangeEvents pAdvise, UInt32& pCookie);
    public abstract virtual int UnadviseCollectionChangeEvents(UInt32 cookie);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("D47ABBE0-4E31-424D-8DC9-31DE024E75E7")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsUICollectionChangeEvents {
    public abstract virtual int Disconnect(IVsUISimpleDataSource pSource);
    public abstract virtual int OnAfterItemAdded(IVsUICollection pCollection, UInt32 nItem);
    public abstract virtual int OnAfterItemRemoved(IVsUICollection pCollection, IVsUIDataSource pRemovedItem, UInt32 nItem);
    public abstract virtual int OnAfterItemReplaced(IVsUICollection pCollection, IVsUIDataSource pNewItem, IVsUIDataSource pOldItem, UInt32 nItem);
    public abstract virtual int OnInvalidateAllItems(IVsUICollection pCollection);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("0393D191-94AC-4997-9310-2EAC67495816")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsUIContextEvents {
    public abstract virtual void OnContextChanged(Guid uiContext, bool active);
}
[NullableContextAttribute("1")]
[GuidAttribute("eceae828-2b6f-48ad-be7d-61b99c2ec466")]
[InterfaceTypeAttribute("1")]
[ExcludeFromProxyBuildAttribute]
public interface Microsoft.VisualStudio.Shell.Interop.IVsUIContextManager {
    public bool AreUIContextsAvailable { get; }
    public abstract virtual bool get_AreUIContextsAvailable();
    public abstract virtual UIContextState GetUIContextState(Guid& modreq(System.Runtime.InteropServices.InAttribute) uiContext);
    public abstract virtual void SetUIContextState(Guid& modreq(System.Runtime.InteropServices.InAttribute) uiContext, bool isActive);
    public abstract virtual UInt32 AdviseUIContextEvents(IVsUIContextEvents callback);
    public abstract virtual UInt32 AdviseSpecificUIContextEvents(IVsUIContextEvents callback, Guid& modreq(System.Runtime.InteropServices.InAttribute) uiContext);
    public abstract virtual void UnadviseUIContextEvents(UInt32 cookie);
}
[GuidAttribute("2B663830-25E6-4A21-94A3-24322FA4F01D")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsUIContextMonitor {
    public abstract virtual bool AreUIContextsAvailable();
    public abstract virtual bool IsUIContextActive(Guid uiContext);
    public abstract virtual UInt32 AdviseContextEvents(IVsUIContextEvents callback);
    public abstract virtual void UndaviseContextEvents(UInt32 cookie);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("6E48EB81-ADD0-4F9F-AF78-C02F053250B3")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsUIDataConverter {
    public abstract virtual int get_Type(String& pTypeName);
    public abstract virtual int get_ConvertibleFormats(UInt32& pdwDataFormatFrom, UInt32& pdwDataFormatTo);
    public abstract virtual int Convert(IVsUIObject pObject, IVsUIObject& ppConvertedObject);
}
[GuidAttribute("806BA229-8188-4663-A918-65B0E0CC0503")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsUIDataConverterManager {
    public abstract virtual int RegisterConverter(string TypeName, UInt32 dwDataFormatFrom, UInt32 dwDataFormatTo, IVsUIDataConverter pConverter);
    public abstract virtual int UnregisterConverter(string TypeName, UInt32 dwDataFormatFrom, UInt32 dwDataFormatTo);
    public abstract virtual int GetConverter(string TypeName, UInt32 dwDataFormatFrom, UInt32 dwDataFormatTo, IVsUIDataConverter& ppConverter);
    public abstract virtual int GetObjectConverter(IVsUIObject pObject, UInt32 dwDataFormatTo, IVsUIDataConverter& ppConverter);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("8D11DD44-7EF2-4C7A-B188-7DA136657F68")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsUIDataSource {
    public abstract virtual int Invoke(string verb, object pvaIn, Object& pvaOut);
    public abstract virtual int EnumVerbs(IVsUIEnumDataSourceVerbs& ppEnum);
    public abstract virtual int Close();
    public abstract virtual int GetValue(string prop, IVsUIObject& ppValue);
    public abstract virtual int SetValue(string prop, IVsUIObject pValue);
    public abstract virtual int AdvisePropertyChangeEvents(IVsUIDataSourcePropertyChangeEvents pAdvise, UInt32& pCookie);
    public abstract virtual int UnadvisePropertyChangeEvents(UInt32 cookie);
    public abstract virtual int EnumProperties(IVsUIEnumDataSourceProperties& ppEnum);
    public abstract virtual int GetShapeIdentifier(Guid& pGuid, UInt32& pdw);
    public abstract virtual int QueryValue(string prop, String[] pTypeName, UInt32[] pDataFormat, Object[] pValue);
    public abstract virtual int ResetValue(string prop);
}
[GuidAttribute("EC495559-B090-435E-8D7E-3D95286A9BE8")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsUIDataSourcePropertyChangeEvents {
    public abstract virtual int Disconnect(IVsUISimpleDataSource pSource);
    public abstract virtual int OnPropertyChanged(IVsUIDataSource pDataSource, string prop, IVsUIObject pVarOld, IVsUIObject pVarNew);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("0DF3E43A-5356-4A33-8AC1-3BE6E3337C37")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsUIDispatch {
    public abstract virtual int Invoke(string verb, object pvaIn, Object& pvaOut);
    public abstract virtual int EnumVerbs(IVsUIEnumDataSourceVerbs& ppEnum);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("6D155041-B4B8-4121-8D74-841E5DA4373E")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsUIDynamicCollection {
    public abstract virtual int Invoke(string verb, object pvaIn, Object& pvaOut);
    public abstract virtual int EnumVerbs(IVsUIEnumDataSourceVerbs& ppEnum);
    public abstract virtual int Close();
    public abstract virtual int get_Count(UInt32& pnCount);
    public abstract virtual int GetItem(UInt32 nItem, IVsUIDataSource& pVsUIDataSource);
    public abstract virtual int AdviseCollectionChangeEvents(IVsUICollectionChangeEvents pAdvise, UInt32& pCookie);
    public abstract virtual int UnadviseCollectionChangeEvents(UInt32 cookie);
    public abstract virtual int AddItem(IVsUIDataSource pItem, UInt32& pIndex);
    public abstract virtual int InsertItem(UInt32 nIndex, IVsUIDataSource pItem);
    public abstract virtual int RemoveItem(UInt32 nIndex);
    public abstract virtual int ReplaceItem(UInt32 nIndex, IVsUIDataSource pItem);
    public abstract virtual int ClearItems();
    public abstract virtual int InsertCollection(UInt32 nIndex, IVsUICollection pCollection);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("62C0A03E-4979-4B4E-90F0-56DF90521F79")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsUIElement {
    public abstract virtual int get_DataSource(IVsUISimpleDataSource& ppDataSource);
    public abstract virtual int put_DataSource(IVsUISimpleDataSource pDataSource);
    public abstract virtual int TranslateAccelerator(IVsUIAccelerator pAccel);
    public abstract virtual int GetUIObject(Object& ppUnk);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("D5083078-66C7-4047-B101-62A5F7997EC5")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsUIElementPane {
    public abstract virtual int SetUIElementSite(IServiceProvider pSP);
    public abstract virtual int CreateUIElementPane(Object& punkUIElement);
    public abstract virtual int GetDefaultUIElementSize(SIZE[] psize);
    public abstract virtual int CloseUIElementPane();
    public abstract virtual int LoadUIElementState(IStream pstream);
    public abstract virtual int SaveUIElementState(IStream pstream);
    public abstract virtual int TranslateUIElementAccelerator(MSG[] lpmsg);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("327922B7-0B7F-4123-8446-0E614B337673")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsUIEnumDataSourceProperties {
    public abstract virtual int Next(UInt32 celt, VsUIPropertyDescriptor[] rgelt, UInt32& pceltFetched);
    public abstract virtual int Skip(UInt32 celt);
    public abstract virtual int Reset();
    public abstract virtual int Clone(IVsUIEnumDataSourceProperties& ppEnum);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("51C2FFFB-35FA-4AD2-81B1-11816C482AAA")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsUIEnumDataSourceVerbs {
    public abstract virtual int Next(UInt32 celt, String[] rgelt, UInt32& pceltFetched);
    public abstract virtual int Skip(UInt32 celt);
    public abstract virtual int Reset();
    public abstract virtual int Clone(IVsUIEnumDataSourceVerbs& ppEnum);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("515953AC-99C6-4F1B-8645-636A57E4B1E2")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsUIEventSink {
    public abstract virtual int Disconnect(IVsUISimpleDataSource pSource);
}
[GuidAttribute("D416BA0D-25C6-463B-B2BD-F06142F0D4B7")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsUIFactory {
    public abstract virtual int CreateUIElement(Guid& guid, UInt32 dw, IVsUIElement& ppUIElement);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("E82609EA-5169-47F4-91D0-6957272CBE9F")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsUIHierarchy {
    public abstract virtual int SetSite(IServiceProvider psp);
    public abstract virtual int GetSite(IServiceProvider& ppSP);
    public abstract virtual int QueryClose(Int32& pfCanClose);
    public abstract virtual int Close();
    public abstract virtual int GetGuidProperty(UInt32 itemid, int propid, Guid& pguid);
    public abstract virtual int SetGuidProperty(UInt32 itemid, int propid, Guid& rguid);
    public abstract virtual int GetProperty(UInt32 itemid, int propid, Object& pvar);
    public abstract virtual int SetProperty(UInt32 itemid, int propid, object var);
    public abstract virtual int GetNestedHierarchy(UInt32 itemid, Guid& iidHierarchyNested, IntPtr& ppHierarchyNested, UInt32& pitemidNested);
    public abstract virtual int GetCanonicalName(UInt32 itemid, String& pbstrName);
    public abstract virtual int ParseCanonicalName(string pszName, UInt32& pitemid);
    public abstract virtual int Unused0();
    public abstract virtual int AdviseHierarchyEvents(IVsHierarchyEvents pEventSink, UInt32& pdwCookie);
    public abstract virtual int UnadviseHierarchyEvents(UInt32 dwCookie);
    public abstract virtual int Unused1();
    public abstract virtual int Unused2();
    public abstract virtual int Unused3();
    public abstract virtual int Unused4();
    public abstract virtual int QueryStatusCommand(UInt32 itemid, Guid& pguidCmdGroup, UInt32 cCmds, OLECMD[] prgCmds, IntPtr pCmdText);
    public abstract virtual int ExecCommand(UInt32 itemid, Guid& pguidCmdGroup, UInt32 nCmdID, UInt32 nCmdexecopt, IntPtr pvaIn, IntPtr pvaOut);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("280CC247-9EF8-42F2-9009-A75B86EA871B")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsUIHierarchyNativeWindow {
    public abstract virtual void SetTreeRedraw(bool fEnabled);
}
[ComConversionLossAttribute]
[GuidAttribute("A2DD88C9-D878-4323-95A3-77DAF258E5D0")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsUIHierarchyWindow {
    public abstract virtual int Init(IVsUIHierarchy pUIH, UInt32 grfUIHWF, Object& ppunkOut);
    public abstract virtual int ExpandItem(IVsUIHierarchy pUIH, UInt32 itemid, EXPANDFLAGS expf);
    public abstract virtual int AddUIHierarchy(IVsUIHierarchy pUIH, UInt32 grfAddOptions);
    public abstract virtual int RemoveUIHierarchy(IVsUIHierarchy pUIH);
    public abstract virtual int SetWindowHelpTopic(string lpszHelpFile, UInt32 dwContext);
    public abstract virtual int GetItemState(IVsUIHierarchy pHier, UInt32 itemid, UInt32 dwStateMask, UInt32& pdwState);
    public abstract virtual int FindCommonSelectedHierarchy(UInt32 grfOpt, IVsUIHierarchy& lppCommonUIH);
    public abstract virtual int SetCursor(IntPtr hNewCursor, IntPtr& phOldCursor);
    public abstract virtual int GetCurrentSelection(IntPtr& ppHier, UInt32& pitemid, IVsMultiItemSelect& ppMIS);
}
[GuidAttribute("5B8C06A0-4379-4218-A046-B1DC466E5818")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsUIHierarchyWindow2 {
    public abstract virtual int Init(IVsUIHierarchy pUIH, UInt32 grfUIHWF, Object& ppunkOut);
    public abstract virtual int ExpandItem(IVsUIHierarchy pUIH, UInt32 itemid, EXPANDFLAGS expf);
    public abstract virtual int AddUIHierarchy(IVsUIHierarchy pUIH, UInt32 grfAddOptions);
    public abstract virtual int RemoveUIHierarchy(IVsUIHierarchy pUIH);
    public abstract virtual int SetWindowHelpTopic(string lpszHelpFile, UInt32 dwContext);
    public abstract virtual int GetItemState(IVsUIHierarchy pHier, UInt32 itemid, UInt32 dwStateMask, UInt32& pdwState);
    public abstract virtual int FindCommonSelectedHierarchy(UInt32 grfOpt, IVsUIHierarchy& lppCommonUIH);
    public abstract virtual int SetCursor(IntPtr hNewCursor, IntPtr& phOldCursor);
    public abstract virtual int GetCurrentSelection(IVsHierarchy& ppHier, UInt32& pitemid, IVsMultiItemSelect& ppMIS);
    public abstract virtual int SetItemAttribute(IVsUIHierarchy pUIH, UInt32 itemid, UInt32 attribute, object value);
}
[GuidAttribute("DF29D855-D0EC-4DA1-BCC3-42FA3A09B1CB")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsUIHierWinClipboardHelper {
    public abstract virtual int Cut(IDataObject pDataObject);
    public abstract virtual int Copy(IDataObject pDataObject);
    public abstract virtual int Paste(IDataObject pDataObject, UInt32 dwEffects);
    public abstract virtual int AdviseClipboardHelperEvents(IVsUIHierWinClipboardHelperEvents pSink, UInt32& pdwCookie);
    public abstract virtual int UnadviseClipboardHelperEvents(UInt32 dwCookie);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("4D25F3C7-3138-4AC6-91AF-D7FF6929DB9F")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsUIHierWinClipboardHelperEvents {
    public abstract virtual int OnPaste(int fDataWasCut, UInt32 dwEffects);
    public abstract virtual int OnClear(int fDataWasCut);
}
[GuidAttribute("86FD1A37-A8C2-41DF-98FA-086D79BFD33E")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsUIObject {
    public abstract virtual int get_Type(String& pTypeName);
    public abstract virtual int get_Format(UInt32& pdwDataFormat);
    public abstract virtual int get_Data(Object& pVar);
    public abstract virtual int Equals(IVsUIObject pOtherObject, Boolean& pfAreEqual);
}
[GuidAttribute("B61FC35B-EEBF-4DEC-BFF1-28A2DD43C38F")]
[InterfaceTypeAttribute("1")]
[ComConversionLossAttribute]
public interface Microsoft.VisualStudio.Shell.Interop.IVsUIShell {
    public abstract virtual int GetToolWindowEnum(IEnumWindowFrames& ppenum);
    public abstract virtual int GetDocumentWindowEnum(IEnumWindowFrames& ppenum);
    public abstract virtual int FindToolWindow(UInt32 grfFTW, Guid& rguidPersistenceSlot, IVsWindowFrame& ppWindowFrame);
    public abstract virtual int CreateToolWindow(UInt32 grfCTW, UInt32 dwToolWindowId, object punkTool, Guid& rclsidTool, Guid& rguidPersistenceSlot, Guid& rguidAutoActivate, IServiceProvider psp, string pszCaption, Int32[] pfDefaultPosition, IVsWindowFrame& ppWindowFrame);
    public abstract virtual int CreateDocumentWindow(UInt32 grfCDW, string pszMkDocument, IVsUIHierarchy pUIH, UInt32 itemid, IntPtr punkDocView, IntPtr punkDocData, Guid& rguidEditorType, string pszPhysicalView, Guid& rguidCmdUI, IServiceProvider psp, string pszOwnerCaption, string pszEditorCaption, Int32[] pfDefaultPosition, IVsWindowFrame& ppWindowFrame);
    public abstract virtual int SetErrorInfo(int hr, string pszDescription, UInt32 dwReserved, string pszHelpKeyword, string pszSource);
    public abstract virtual int ReportErrorInfo(int hr);
    public abstract virtual int GetDialogOwnerHwnd(IntPtr& phwnd);
    public abstract virtual int EnableModeless(int fEnable);
    public abstract virtual int SaveDocDataToFile(VSSAVEFLAGS grfSave, object pPersistFile, string pszUntitledPath, String& pbstrDocumentNew, Int32& pfCanceled);
    public abstract virtual int SetupToolbar(IntPtr hwnd, IVsToolWindowToolbar ptwt, IVsToolWindowToolbarHost& pptwth);
    public abstract virtual int SetForegroundWindow();
    public abstract virtual int TranslateAcceleratorAsACmd(MSG[] pMsg);
    public abstract virtual int UpdateCommandUI(int fImmediateUpdate);
    public abstract virtual int UpdateDocDataIsDirtyFeedback(UInt32 docCookie, int fDirty);
    public abstract virtual int RefreshPropertyBrowser(int dispid);
    public abstract virtual int SetWaitCursor();
    public abstract virtual int PostExecCommand(Guid& pguidCmdGroup, UInt32 nCmdID, UInt32 nCmdexecopt, Object& pvaIn);
    public abstract virtual int ShowContextMenu(UInt32 dwCompRole, Guid& rclsidActive, int nMenuId, POINTS[] pos, IOleCommandTarget pCmdTrgtActive);
    public abstract virtual int ShowMessageBox(UInt32 dwCompRole, Guid& rclsidComp, string pszTitle, string pszText, string pszHelpFile, UInt32 dwHelpContextID, OLEMSGBUTTON msgbtn, OLEMSGDEFBUTTON msgdefbtn, OLEMSGICON msgicon, int fSysAlert, Int32& pnResult);
    public abstract virtual int SetMRUComboText(Guid& pguidCmdGroup, UInt32 dwCmdID, string lpszText, int fAddToList);
    public abstract virtual int SetToolbarVisibleInFullScreen(Guid[] pguidCmdGroup, UInt32 dwToolbarId, int fVisibleInFullScreen);
    public abstract virtual int FindToolWindowEx(UInt32 grfFTW, Guid& rguidPersistenceSlot, UInt32 dwToolWinId, IVsWindowFrame& ppWindowFrame);
    public abstract virtual int GetAppName(String& pbstrAppName);
    public abstract virtual int GetVSSysColor(VSSYSCOLOR dwSysColIndex, UInt32& pdwRGBval);
    public abstract virtual int SetMRUComboTextW(Guid[] pguidCmdGroup, UInt32 dwCmdID, string pwszText, int fAddToList);
    public abstract virtual int PostSetFocusMenuCommand(Guid& pguidCmdGroup, UInt32 nCmdID);
    public abstract virtual int GetCurrentBFNavigationItem(IVsWindowFrame& ppWindowFrame, String& pbstrData, Object& ppunk);
    public abstract virtual int AddNewBFNavigationItem(IVsWindowFrame pWindowFrame, string bstrData, object punk, int fReplaceCurrent);
    public abstract virtual int OnModeChange(DBGMODE dbgmodeNew);
    public abstract virtual int GetErrorInfo(String& pbstrErrText);
    public abstract virtual int GetOpenFileNameViaDlg(VSOPENFILENAMEW[] pOpenFileName);
    public abstract virtual int GetSaveFileNameViaDlg(VSSAVEFILENAMEW[] pSaveFileName);
    public abstract virtual int GetDirectoryViaBrowseDlg(VSBROWSEINFOW[] pBrowse);
    public abstract virtual int CenterDialogOnWindow(IntPtr hwndDialog, IntPtr hwndParent);
    public abstract virtual int GetPreviousBFNavigationItem(IVsWindowFrame& ppWindowFrame, String& pbstrData, Object& ppunk);
    public abstract virtual int GetNextBFNavigationItem(IVsWindowFrame& ppWindowFrame, String& pbstrData, Object& ppunk);
    public abstract virtual int GetURLViaDlg(string pszDlgTitle, string pszStaticLabel, string pszHelpTopic, String& pbstrURL);
    public abstract virtual int RemoveAdjacentBFNavigationItem(RemoveBFDirection rdDir);
    public abstract virtual int RemoveCurrentNavigationDupes(RemoveBFDirection rdDir);
}
[GuidAttribute("4E6B6EF9-8E3D-4756-99E9-1192BAAD5496")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsUIShell2 {
    public abstract virtual int GetOpenFileNameViaDlgEx(VSOPENFILENAMEW[] pOpenFileName, string pszHelpTopic);
    public abstract virtual int GetSaveFileNameViaDlgEx(VSSAVEFILENAMEW[] pSaveFileName, string pszHelpTopic);
    public abstract virtual int GetDirectoryViaBrowseDlgEx(VSBROWSEINFOW[] pBrowse, string pszHelpTopic, string pszOpenButtonLabel, string pszCeilingDir, VSNSEBROWSEINFOW[] pNSEBrowseInfo);
    public abstract virtual int SaveItemsViaDlg(UInt32 cItems, VSSAVETREEITEM[] rgSaveItems);
    public abstract virtual int GetVSSysColorEx(int dwSysColIndex, UInt32& pdwRGBval);
    public abstract virtual int CreateGradient(UInt32 GRADIENTTYPE, IVsGradient& pGradient);
    public abstract virtual int GetVSCursor(UInt32 cursor, IntPtr& phIcon);
    public abstract virtual int IsAutoRecoverSavingCheckpoints(Int32& pfARSaving);
    public abstract virtual int VsDialogBoxParam(IntPtr hinst, UInt32 dwId, IntPtr lpDialogFunc, IntPtr lp);
    public abstract virtual int CreateIconImageButton(IntPtr hwnd, IntPtr hicon, UInt32 bwiPos, IVsImageButton& ppImageButton);
    public abstract virtual int CreateGlyphImageButton(IntPtr hwnd, ushort chGlyph, int xShift, int yShift, UInt32 bwiPos, IVsImageButton& ppImageButton);
}
[GuidAttribute("1C763D26-637C-46F8-A55C-6ECC84DF4E4F")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsUIShell3 {
    public abstract virtual int ReportErrorInfo2(int hr, bool Suppress);
    public abstract virtual int SuppressRestart(bool Suppress);
}
[GuidAttribute("C59CDA92-D99D-42DA-B221-8E36B8DC478E")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsUIShell4 {
    public abstract virtual int GetWindowEnum(UInt32 type, IEnumWindowFrames& ppEnum);
    public abstract virtual int SetupToolbar2(IntPtr hwnd, IVsToolWindowToolbar ptwt, IOleCommandTarget pCmdTarget, IVsToolWindowToolbarHost& pptwth);
    public abstract virtual int SetupToolbar3(IVsWindowFrame pFrame, IVsToolWindowToolbarHost& pptwth);
    public abstract virtual int CreateToolbarTray(IOleCommandTarget pCmdTarget, IVsToolbarTrayHost& ppToolbarTrayHost);
}
[GuidAttribute("2B70EA30-51F2-48BB-ABA8-051946A37283")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsUIShell5 {
    public abstract virtual void GetOpenFileNameViaDlgEx2(VSOPENFILENAMEW[] openFileName, string HelpTopic, string openButtonLabel);
    public abstract virtual UInt32 GetThemedColor(Guid& colorCategory, string colorName, UInt32 colorType);
    public abstract virtual string GetKeyBindingScope(Guid& keyBindingScope);
    public abstract virtual IVsEnumGuids EnumKeyBindingScopes();
    public abstract virtual bool ThemeWindow(IntPtr hwnd);
    public abstract virtual IntPtr CreateThemedImageList(IntPtr hImageList, UInt32 crBackground);
    public abstract virtual void ThemeDIBits(UInt32 dwBitmapLength, Byte[] pBitmap, UInt32 dwPixelWidth, UInt32 dwPixelHeight, bool fIsTopDownBitmap, UInt32 crBackground);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("7033D7ED-0E98-4C91-9881-1DD84891D378")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsUIShell6 {
    public abstract virtual void GetOpenFileNameViaDlgEx2(VSOPENFILENAMEW[] openFileName, string HelpTopic, string openButtonLabel);
    public abstract virtual UInt32 GetThemedColor(Guid& colorCategory, string colorName, UInt32 colorType);
    public abstract virtual string GetKeyBindingScope(Guid& keyBindingScope);
    public abstract virtual IVsEnumGuids EnumKeyBindingScopes();
    public abstract virtual bool ThemeWindow(IntPtr hwnd);
    public abstract virtual IntPtr CreateThemedImageList(IntPtr hImageList, UInt32 crBackground);
    public abstract virtual void ThemeDIBits(UInt32 dwBitmapLength, Byte& pBitmap, UInt32 dwPixelWidth, UInt32 dwPixelHeight, bool fIsTopDownBitmap, UInt32 crBackground);
    public abstract virtual void SetFixedThemeColors(IntPtr hwnd);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("C5FFE6B0-C6E0-45A4-9FE2-DA5DEB84E59D")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsUIShell7 {
    public abstract virtual UInt32 AdviseWindowFrameEvents(IVsWindowFrameEvents eventSink);
    public abstract virtual void UnadviseWindowFrameEvents(UInt32 cookie);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("54457DAD-5384-41B5-B6AA-EFFFDE468CDC")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsUIShellArrangeWindows {
    public abstract virtual SIZE ComputeWindowSizeChange(IntPtr hwnd, WINDOWPOS[] newPos);
    public abstract virtual void Arrange(VSArrangeWindowInfo[] infos, int Count, SIZE size);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("686C2AF1-A2E5-4F6C-B660-B63FD4F70C18")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsUIShellDocumentWindowMgr {
    public abstract virtual int SaveDocumentWindowPositions(UInt32 dwReserved, IStream pStream);
    public abstract virtual int ReopenDocumentWindows(IStream pStream);
}
[GuidAttribute("35299EEC-11EE-4518-9F08-401638D1D3BC")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsUIShellOpenDocument {
    public abstract virtual int IsDocumentOpen(IVsUIHierarchy pHierCaller, UInt32 itemidCaller, string pszMkDocument, Guid& rguidLogicalView, UInt32 grfIDO, IVsUIHierarchy& ppHierOpen, UInt32[] pitemidOpen, IVsWindowFrame& ppWindowFrame, Int32& pfOpen);
    public abstract virtual int IsDocumentInAProject(string pszMkDocument, IVsUIHierarchy& ppUIH, UInt32& pitemid, IServiceProvider& ppSP, Int32& pDocInProj);
    public abstract virtual int OpenDocumentViaProject(string pszMkDocument, Guid& rguidLogicalView, IServiceProvider& ppSP, IVsUIHierarchy& ppHier, UInt32& pitemid, IVsWindowFrame& ppWindowFrame);
    public abstract virtual int OpenStandardEditor(UInt32 grfOpenStandard, string pszMkDocument, Guid& rguidLogicalView, string pszOwnerCaption, IVsUIHierarchy pHier, UInt32 itemid, IntPtr punkDocDataExisting, IServiceProvider psp, IVsWindowFrame& ppWindowFrame);
    public abstract virtual int OpenStandardPreviewer(UInt32 ospOpenDocPreviewer, string pszURL, VSPREVIEWRESOLUTION resolution, UInt32 dwReserved);
    public abstract virtual int GetStandardEditorFactory(UInt32 dwReserved, Guid& pguidEditorType, string pszMkDocument, Guid& rguidLogicalView, String& pbstrPhysicalView, IVsEditorFactory& ppEF);
    public abstract virtual int MapLogicalView(Guid& rguidEditorType, Guid& rguidLogicalView, String& pbstrPhysicalView);
    public abstract virtual int OpenSpecificEditor(UInt32 grfOpenSpecific, string pszMkDocument, Guid& rguidEditorType, string pszPhysicalView, Guid& rguidLogicalView, string pszOwnerCaption, IVsUIHierarchy pHier, UInt32 itemid, IntPtr punkDocDataExisting, IServiceProvider pSPHierContext, IVsWindowFrame& ppWindowFrame);
    public abstract virtual int InitializeEditorInstance(UInt32 grfIEI, IntPtr punkDocView, IntPtr punkDocData, string pszMkDocument, Guid& rguidEditorType, string pszPhysicalView, Guid& rguidLogicalView, string pszOwnerCaption, string pszEditorCaption, IVsUIHierarchy pHier, UInt32 itemid, IntPtr punkDocDataExisting, IServiceProvider pSPHierContext, Guid& rguidCmdUI, IVsWindowFrame& ppWindowFrame);
    public abstract virtual int IsSpecificDocumentViewOpen(IVsUIHierarchy pHierCaller, UInt32 itemidCaller, string pszMkDocument, Guid& rguidEditorType, string pszPhysicalView, UInt32 grfIDO, IVsUIHierarchy& ppHierOpen, UInt32& pitemidOpen, IVsWindowFrame& ppWindowFrame, Int32& pfOpen);
    public abstract virtual int OpenDocumentViaProjectWithSpecific(string pszMkDocument, UInt32 grfEditorFlags, Guid& rguidEditorType, string pszPhysicalView, Guid& rguidLogicalView, IServiceProvider& ppSP, IVsUIHierarchy& ppHier, UInt32& pitemid, IVsWindowFrame& ppWindowFrame);
    public abstract virtual int OpenCopyOfStandardEditor(IVsWindowFrame pWindowFrame, Guid& rguidLogicalView, IVsWindowFrame& ppNewWindowFrame);
    public abstract virtual int GetFirstDefaultPreviewer(String& pbstrDefBrowserPath, Int32& pfIsInternalBrowser, Int32& pfIsSystemBrowser);
    public abstract virtual int SearchProjectsForRelativePath(UInt32 grfRPS, string pszRelPath, String[] pbstrAbsPath);
    public abstract virtual int AddStandardPreviewer(string pszExePath, string pszDisplayName, int fUseDDE, string pszDDEService, string pszDDETopicOpenURL, string pszDDEItemOpenURL, string pszDDETopicActivate, string pszDDEItemActivate, UInt32 aspAddPreviewerFlags);
}
[GuidAttribute("0649BDA0-0978-4CA0-AB0B-0F619199BCCA")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsUIShellOpenDocument2 {
    public abstract virtual int GetDefaultPreviewers(UInt32 celt, VSDEFAULTPREVIEWER[] rgDefaultPreviewers, UInt32& pcActual);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("E6A63A28-154C-42CB-A6E7-9252C2E6D943")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsUIShellOpenDocument3 {
    [ComAliasNameAttribute("Microsoft.VisualStudio.Shell.Interop.VSNEWDOCUMENTSTATE")]
public UInt32 NewDocumentState { get; }
    public IVsEnumDocumentPreviewers DocumentPreviewersEnum { get; }
    public IVsDocumentPreviewer FirstDefaultPreviewer { get; }
    public abstract virtual IVsNewDocumentStateContext SetNewDocumentState(UInt32 state, Guid& reason);
    public abstract virtual UInt32 get_NewDocumentState();
    public abstract virtual UInt32 GetProvisionalViewingStatusForFile(string filename, IVsHierarchy hierarchy, UInt32 itemid, Guid& logicalView);
    public abstract virtual UInt32 GetProvisionalViewingStatusForEditor(Guid& editor, Guid& logicalView);
    public abstract virtual IVsEnumDocumentPreviewers get_DocumentPreviewersEnum();
    public abstract virtual IVsDocumentPreviewer get_FirstDefaultPreviewer();
    public abstract virtual void SetDefaultPreviewer(IVsDocumentPreviewer pPreviewer, UInt32 Resolution, bool fExclusive);
}
[GuidAttribute("C4A93D85-65D1-4497-8EA8-B394DE2E3C2B")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsUIShellOpenDocument4 {
    public abstract virtual int IsDocumentInAProject2(string pszMkDocument, bool fSupportExternalItems, IVsUIHierarchy& ppUIH, UInt32& pitemid, IServiceProvider& ppSP);
    public abstract virtual IVsWindowFrame OpenDocumentViaProject2(string pszMkDocument, Guid& rguidLogicalView, bool fSupportExternalItems, IServiceProvider& ppSP, IVsUIHierarchy& ppHier, UInt32& pitemid);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("110596DC-7A19-4E04-9106-1DB0580F77E9")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsUISimpleDataSource {
    public abstract virtual int Invoke(string verb, object pvaIn, Object& pvaOut);
    public abstract virtual int EnumVerbs(IVsUIEnumDataSourceVerbs& ppEnum);
    public abstract virtual int Close();
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("0DD7CF3A-6203-466F-B1C1-7653809CB73A")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsUIWin32Bitmap {
    public abstract virtual int GetHBITMAP(IntPtr& phBitmap);
    public abstract virtual int BitmapContainsAlphaInfo(Boolean& pfHasAlpha);
}
[GuidAttribute("1F7397C2-D6C1-4C86-89C1-4DA71790955F")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsUIWin32Bitmap2 {
    public abstract virtual IntPtr GetHBITMAP2();
    public abstract virtual bool BitmapContainsAlphaInfo();
}
[GuidAttribute("AD9A00F2-AC5B-4A49-94B7-17CC3CE1A46A")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsUIWin32Element {
    public abstract virtual int Create(IntPtr parent, IntPtr& pHandle);
    public abstract virtual int Destroy();
    public abstract virtual int GetHandle(IntPtr& pHandle);
    public abstract virtual int ShowModal(IntPtr parent, Int32& pDlgResult);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("55445E7E-DAD5-4C41-9F38-03511D922D1E")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsUIWin32Icon {
    public abstract virtual int GetHICON(IntPtr& phIcon);
}
[GuidAttribute("52F5CA67-16E5-4F58-9479-63CCD403E9FB")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsUIWin32Icon2 {
    public abstract virtual IntPtr GetHICON2();
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("5EA86615-2308-4DA4-8A7A-E442FE40C44F")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsUIWin32ImageList {
    public abstract virtual int GetHIMAGELIST(IntPtr& phImageList);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("E1D330BE-2D94-48D9-B594-3CB108A16EF5")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsUIWin32ImageList2 {
    public abstract virtual IntPtr GetHIMAGELIST2();
}
[GuidAttribute("CA87E95D-5AEE-4A16-BDCA-94A1F7F769A9")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsUIWpfElement {
    public abstract virtual int CreateFrameworkElement(Object& ppUnkElement);
    public abstract virtual int GetFrameworkElement(Object& ppUnkElement);
}
[GuidAttribute("89DB8AB3-9035-4016-AA8A-76F7AE09B65F")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsUIWpfLoader {
    public abstract virtual int CreateUIElement(string elementFQN, string codeBase, IVsUIElement& ppUIElement);
    public abstract virtual int CreateUIElementOfType(object pUnkElementType, IVsUIElement& ppUIElement);
    public abstract virtual int ShowModalElement(IVsUIElement pUIElement, IntPtr hWndParent, Int32& pResult);
}
[NullableContextAttribute("1")]
[GuidAttribute("b2d10780-c41b-410e-b199-08cd9a4f22a6")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsUnifiedSettingsObserverFactory {
    public abstract virtual object CreateSettingsObserver(Guid guid);
}
[GuidAttribute("A9F86308-5EA7-485D-BAB8-E8989C3CFBDC")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsUpdateSolutionEvents {
    public abstract virtual int UpdateSolution_Begin(Int32& pfCancelUpdate);
    public abstract virtual int UpdateSolution_Done(int fSucceeded, int fModified, int fCancelCommand);
    public abstract virtual int UpdateSolution_StartUpdate(Int32& pfCancelUpdate);
    public abstract virtual int UpdateSolution_Cancel();
    public abstract virtual int OnActiveProjectCfgChange(IVsHierarchy pIVsHierarchy);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("F59DBC1A-91C3-45C9-9796-1CAB558502DD")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsUpdateSolutionEvents2 {
    public abstract virtual int UpdateSolution_Begin(Int32& pfCancelUpdate);
    public abstract virtual int UpdateSolution_Done(int fSucceeded, int fModified, int fCancelCommand);
    public abstract virtual int UpdateSolution_StartUpdate(Int32& pfCancelUpdate);
    public abstract virtual int UpdateSolution_Cancel();
    public abstract virtual int OnActiveProjectCfgChange(IVsHierarchy pIVsHierarchy);
    public abstract virtual int UpdateProjectCfg_Begin(IVsHierarchy pHierProj, IVsCfg pCfgProj, IVsCfg pCfgSln, UInt32 dwAction, Int32& pfCancel);
    public abstract virtual int UpdateProjectCfg_Done(IVsHierarchy pHierProj, IVsCfg pCfgProj, IVsCfg pCfgSln, UInt32 dwAction, int fSuccess, int fCancel);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("40025C28-3303-42CA-BED8-0F3BD856BD6D")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsUpdateSolutionEvents3 {
    public abstract virtual int OnBeforeActiveSolutionCfgChange(IVsCfg pOldActiveSlnCfg, IVsCfg pNewActiveSlnCfg);
    public abstract virtual int OnAfterActiveSolutionCfgChange(IVsCfg pOldActiveSlnCfg, IVsCfg pNewActiveSlnCfg);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("84CA83EE-EE80-42C1-99CE-1DE83F2FCA3A")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsUpdateSolutionEvents4 {
    public abstract virtual void UpdateSolution_QueryDelayFirstUpdateAction(Int32& pfDelay);
    public abstract virtual void UpdateSolution_BeginFirstUpdateAction();
    public abstract virtual void UpdateSolution_EndLastUpdateAction();
    public abstract virtual void UpdateSolution_BeginUpdateAction(UInt32 dwAction);
    public abstract virtual void UpdateSolution_EndUpdateAction(UInt32 dwAction);
    public abstract virtual void OnActiveProjectCfgChangeBatchBegin();
    public abstract virtual void OnActiveProjectCfgChangeBatchEnd();
}
[GuidAttribute("95498691-CB06-4BC1-8A83-F84C6D565E21")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsUpdateSolutionEvents5 {
    public abstract virtual void UpdateSolution_QueryDelayBuildAction(UInt32 dwAction, IVsTask& pDelayTask);
}
[GuidAttribute("703ECC2C-7631-46A9-AD1E-19D9592C7A6B")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsUpdateSolutionEventsAsync {
    public abstract virtual void UpdateSolution_EndLastUpdateActionAsync(IVsUpdateSolutionEventsAsyncCallback pCallback);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("02D0878C-53F5-4CE9-B55C-3577DAE64761")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsUpdateSolutionEventsAsyncCallback {
    public abstract virtual void CompleteLastUpdateAction();
}
[GuidAttribute("27712A1D-ABEA-42E2-95A5-31D370759429")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsUpgradeBuildPropertyStorage {
    public abstract virtual int GetPropertyValue(string pszPropName, string pszConfigName, UInt32 storage, String& pbstrPropValue);
    public abstract virtual int SetPropertyValue(string pszPropName, string pszConfigName, UInt32 storage, string pszPropValue);
    public abstract virtual int RemoveProperty(string pszPropName, string pszConfigName, UInt32 storage);
    public abstract virtual int AddNewImport(string pszImportPath, string pszImportCondition);
    public abstract virtual int RemoveImport(string pszImportPath, string pszImportCondition);
    public abstract virtual int GetImports(Array& prgImportPaths, Array& prgImportConditions);
    public abstract virtual int ReplaceImport(string pszOldImportPath, string pszOldCondition, string pszNewImportPath, string pszNewCondition);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("AE88C42E-B3D6-4FEC-9C63-C9F1B28233EA")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsUpgradeLogger {
    public abstract virtual int LogMessage(UInt32 ErrorLevel, string bstrProject, string bstrSource, string bstrDescription);
    public abstract virtual int Flush();
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("DCF3E6DE-2DC0-421E-9DBB-375BB5255A80")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsUpgradeLogger2 {
    public abstract virtual void ChangeUpgradeLogPath(string lpszNewLogFileName);
}
[GuidAttribute("761081DF-D45F-4683-9B9E-1B7241E56F5C")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsUserContext {
    public abstract virtual int AddAttribute(VSUSERCONTEXTATTRIBUTEUSAGE usage, string szName, string szValue);
    public abstract virtual int RemoveAttribute(string szName, string szValue);
    public abstract virtual int AddSubcontext(IVsUserContext pSubCtx, int lPriority, UInt32& pdwCookie);
    public abstract virtual int RemoveSubcontext(UInt32 dwCookie);
    public abstract virtual int CountAttributes(string pszName, int fIncludeChildren, Int32& pc);
    public abstract virtual int GetAttribute(int iAttribute, string pszName, int fIncludeChildren, String& pbstrName, String& pbstrValue);
    public abstract virtual int CountSubcontexts(Int32& pc);
    public abstract virtual int GetSubcontext(int i, IVsUserContext& ppSubCtx);
    public abstract virtual int IsDirty(Int32& pfDirty);
    public abstract virtual int SetDirty(int fDirty);
    public abstract virtual int Update();
    public abstract virtual int AdviseUpdate(IVsUserContextUpdate pUpdate, UInt32& pdwCookie);
    public abstract virtual int UnadviseUpdate(UInt32 dwCookie);
    public abstract virtual int GetAttrUsage(int index, int fIncludeChildren, VSUSERCONTEXTATTRIBUTEUSAGE[] pUsage);
    public abstract virtual int RemoveAllSubcontext();
    public abstract virtual int GetPriority(Int32& lPriority);
    public abstract virtual int RemoveAttributeIncludeChildren(string szName, string szValue);
    public abstract virtual int GetAttributePri(int iAttribute, string pszName, int fIncludeChildren, Int32& piPriority, String& pbstrName, String& pbstrValue);
}
[GuidAttribute("0F817159-761D-447E-9600-4C3387F4C0FD")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsUserContextCustomize {
    public abstract virtual int GetLimitKeywordSource(Int32& pLimKwdSrc);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("720B8500-17B3-4C89-AE84-2CFE7251B4B8")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsUserContextItem {
    public abstract virtual int Name(String& pbstrName);
    public abstract virtual int Command(String& pbstrCommand);
    public abstract virtual int CountAttributes(string pszAttrName, Int32& pc);
    public abstract virtual int GetAttribute(string pszAttrName, int index, String[] pbstrName, String[] pbstrValue);
}
[InterfaceTypeAttribute("1")]
[DefaultMemberAttribute("Item")]
[GuidAttribute("2A6DE4A2-5B3D-46EB-A65C-24C4EF4F396F")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsUserContextItemCollection {
    public abstract virtual int Item(object index, IVsUserContextItem& ppItem);
    public abstract virtual int _NewEnum(Object& pEnum);
    public abstract virtual int Count(Int32& pCount);
    public abstract virtual int ItemAt(int index, IVsUserContextItem& ppItem);
}
[GuidAttribute("A2078F0E-A310-420A-BA27-16531905B88F")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsUserContextItemEvents {
    public abstract virtual int OnUserContextItemsAvailable(IVsUserContextItemCollection pList);
}
[GuidAttribute("715C98B7-05FB-4A1A-86C8-FF00CE2E5D64")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsUserContextItemProvider {
    public abstract virtual int GetProperty(int property, Object& pvar);
    public abstract virtual int SetProperty(int property, object var);
    public abstract virtual int KeywordLookup(string pwzTargetAttr, string pwzTargetAttrValue, IVsUserContextItemCollection& pplist, IVsMonitorUserContext pCMUC, int fCheckIdle, int fContinueInterrupt);
    public abstract virtual int PackedAttributeLookup(string pwzRequired, string pwzScope, IVsUserContextItemCollection& pplist);
    public abstract virtual int LookupEnabled(Int32& pfLookupEnabled);
}
[GuidAttribute("F5ED7D1C-61B6-428A-8129-E13B36D9E9A7")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsUserContextUpdate {
    public abstract virtual int UpdateUserContext(IVsUserContext pCtx, UInt32 dwCookie);
}
[GuidAttribute("770E285D-3B7D-4342-B3C4-42BD9F53A300")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsUserSettings {
    public abstract virtual int ExportSettings(string pszCategoryGUID, IVsSettingsWriter pSettings);
    public abstract virtual int ImportSettings(string pszCategoryGUID, IVsSettingsReader pSettings, UInt32 flags, Int32& pfRestartRequired);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("BCAACBEA-0763-491E-84E0-ED29DD8EBBA8")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsUserSettings2 {
    public abstract virtual void ExportSettings(Guid& category, IVsSettingsWriter settingsWriter, IVsSettingsStorageContainer storageContainer);
    public abstract virtual void ImportSettings(Guid& category, IVsSettingsReader settingsReader, __UserSettingsFlags flags, IVsSettingsStorageContainer storageContainer);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("2AD1813A-8691-468A-A777-BD0FDA5CF48E")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsUserSettings3 {
    public abstract virtual void ExportSettings(Guid& category, IVsSettingsWriter settingsWriter, IVsSettingsStorageContainer storageContainer);
    public abstract virtual void ImportSettings(Guid& category, IVsSettingsReader settingsReader, __UserSettingsFlags flags, IVsSettingsStorageContainer storageContainer);
    public abstract virtual IVsTask ExportSettingsAsync(Guid& category, IVsSettingsWriter settingsWriter, IVsSettingsStorageContainer storageContainer);
}
[GuidAttribute("692E1EBF-9D60-4A56-B10F-596DC48CC230")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsUserSettingsMigration {
    public abstract virtual int MigrateSettings(IVsSettingsReader pSettingsReader, IVsSettingsWriter pSettingsWriter, string pszGuidCategory);
}
[GuidAttribute("334E1F15-7D97-4231-81B0-998E4A960E69")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsUserSettingsQuery {
    public abstract virtual int NeedExport(string szCategoryGUID, Int32& pfNeedExport);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("A659F1B2-AD34-11D1-ABAD-0080C7B89C95")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsVba {
    public abstract virtual int ShowVBA();
    public abstract virtual int GetVbaUnk(Object& pUnknown);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("D1A24B44-033E-445F-B3AA-BE3F23C5617C")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsWebAppMigration {
    public abstract virtual int CanConvertToWebApp(string lpszProjectPath, Int32& pConverToWebApp, String& pbstrNewProjPath);
    public abstract virtual int ConvertProjFileToWebAppProj(string lpszProjectPath, Guid& pProjectFactoryGuid);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("E8B06F50-6D01-11D2-AA7D-00C04F990343")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsWebBrowser {
    public abstract virtual int Navigate(UInt32 dwFlags, string lpszURL);
    public abstract virtual int NavigateEx(UInt32 dwFlags, string lpszURL, Object& pvarTargetFrame, Object& pvarPostData, Object& pvarHeaders);
    public abstract virtual int Stop();
    public abstract virtual int Refresh(UInt32 dwRefreshType);
    public abstract virtual int GetDocumentInfo(UInt32 dwInfoIndex, Object& pvarInfo);
}
[GuidAttribute("E8B06F4B-6D01-11D2-AA7D-00C04F990343")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsWebBrowserUser {
    public abstract virtual int Disconnect();
    public abstract virtual int GetCustomMenuInfo(object pUnkCmdReserved, object pDispReserved, UInt32 dwType, UInt32 dwPosition, Guid& pguidCmdGroup, Int32& pdwMenuID);
    public abstract virtual int GetCmdUIGuid(Guid& pguidCmdUI);
    public abstract virtual int GetExternalObject(Object& ppDispObject);
    public abstract virtual int TranslateUrl(UInt32 dwReserved, string lpszURLIn, String& lppszURLOut);
    public abstract virtual int FilterDataObject(IDataObject pDataObjIn, IDataObject& ppDataObjOut);
    public abstract virtual int GetDropTarget(IDropTarget pDropTgtIn, IDropTarget& ppDropTgtOut);
    public abstract virtual int TranslateAccelarator(MSG[] lpmsg);
    public abstract virtual int GetCustomURL(UInt32 nPage, String& pbstrURL);
    public abstract virtual int GetOptionKeyPath(UInt32 dwReserved, String& pbstrKey);
    public abstract virtual int Resize(int cx, int cy);
}
[GuidAttribute("821ABD48-96DC-4315-A2C4-82A7239B8166")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsWebBrowserUser2 {
    public abstract virtual int GetWebBrowserContext(IServiceProvider& ppServiceProvider);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("E8B06F51-6D01-11D2-AA7D-00C04F990343")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsWebBrowsingService {
    public abstract virtual int CreateWebBrowser(UInt32 dwCreateFlags, Guid& rguidOwner, string lpszBaseCaption, string lpszStartURL, IVsWebBrowserUser pUser, IVsWebBrowser& ppBrowser, IVsWindowFrame& ppFrame);
    public abstract virtual int GetFirstWebBrowser(Guid& rguidPersistenceSlot, IVsWindowFrame& ppFrame, IVsWebBrowser& ppBrowser);
    public abstract virtual int GetWebBrowserEnum(Guid& rguidPersistenceSlot, IEnumWindowFrames& ppenum);
    public abstract virtual int CreateExternalWebBrowser(UInt32 dwCreateFlags, VSPREVIEWRESOLUTION dwResolution, string lpszURL);
    public abstract virtual int CreateWebBrowserEx(UInt32 dwCreateFlags, Guid& rguidPersistenceSlot, UInt32 dwId, string lpszBaseCaption, string lpszStartURL, IVsWebBrowserUser pUser, IVsWebBrowser& ppBrowser, IVsWindowFrame& ppFrame);
    public abstract virtual int Navigate(string lpszURL, UInt32 dwNaviageFlags, IVsWindowFrame& ppFrame);
}
[GuidAttribute("E8B06F4C-6D01-11D2-AA7D-00C04F990343")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsWebFavorites {
    public abstract virtual int AddFavorite(string lpszURL, string lpszName, string pszIconFileName, int iIconIndex, String[] pbstrFilename);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("1D1851BE-913D-40F4-AD7C-AD1F69A34E27")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsWebMigration {
    public abstract virtual int LoadAssembly(string bstrFilePath);
    public abstract virtual int GetBaseType(string bstrClassName, String& pbstrBaseClass);
    public abstract virtual int Unload();
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("DB0AD857-2F21-40C2-80F2-7CB9300F9DCA")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsWebMigrationService {
    public abstract virtual int MigrateWeb(IVsProject pIVsProj, string pszLocation, string pszProjFile);
    public abstract virtual int IsWebProject(string pszProjFile, Int32& pIsWeb);
    public abstract virtual int GetProjectSCCInfo(string bstrProjectFIle, String[] pbstrSccProjectName, String[] pbstrSccAuxPath, String[] pbstrSccLocalPath, String[] pbstrProvider);
}
[GuidAttribute("9EC9BA55-B328-11D2-9A98-00C04F79EFC3")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsWebPreview {
    public abstract virtual int PreviewURL(IVsWebPreviewAction pAction, string lpszURL);
    public abstract virtual int PreviewURLEx(IVsWebPreviewAction pAction, string lpszURL, UInt32 opt, int cx, int cy);
    public abstract virtual int ActivatePreview();
    public abstract virtual int Resize(int cx, int cy);
}
[GuidAttribute("9EC9BA56-B328-11D2-9A98-00C04F79EFC3")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsWebPreviewAction {
    public abstract virtual int OnPreviewLoadStart();
    public abstract virtual int OnPreviewClose();
    public abstract virtual int OnPreviewLoaded(object pDispDocument);
}
[GuidAttribute("0BD8000A-F537-4889-9FBC-C5F63B313956")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsWebProject {
    public abstract virtual int AddNewWebItem(UInt32 itemidLoc, VSADDITEMOPERATION dwAddItemOperation, string pszItemName, string pszFileTemplate, UInt32 options, string pszSelectedLanguage, IntPtr hwndDlgOwner, VSADDRESULT[] pResult);
}
[GuidAttribute("62A84AEF-423D-4827-833F-7918753C0269")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsWebProxy {
    public abstract virtual int PrepareWebProxy(string strWebCallUrl, UInt32 oldProxyState, UInt32& newProxyState, int fOkToPrompt);
}
[GuidAttribute("D02603F6-BDB0-410C-9BA8-9E34E5FF4BEC")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsWebService {
    public abstract virtual int Url(String& bstrUrl);
    public abstract virtual int AppRelativeUrl(String& bstrAppUrl);
    public abstract virtual int GetProvider(IVsWebServiceProvider& ppIVsWebServiceProvider);
    public abstract virtual int AdviseWebServiceEvents(IVsWebServiceEvents pEvents, UInt32& pdwCookie);
    public abstract virtual int UnadviseWebServiceEvents(UInt32 dwCookie);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("3F4E0D6C-BB24-4E6F-8463-DC5BE0C415A6")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsWebService3 {
    public abstract virtual int Endpoints(Array& saEndpointURLs);
    public abstract virtual int MexEndpoints(Array& saMexEndpointURLs);
    public abstract virtual int GetWebServiceEndpoint(string bstrUrl, IVsWebServiceEndpoint& ppIVsWebServiceEndpoint);
    public abstract virtual int GetMexWebServiceEndpoint(string bstrUrl, IVsWebServiceEndpoint& ppIVsWebServiceEndpoint);
    public abstract virtual int DiscoveryUrl(String& bstrDiscoveryUrl);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("72DDC424-1358-4923-9B9D-DE55BC2322E1")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsWebServiceEndpoint {
    public abstract virtual int Url(String& bstrUrl);
}
[GuidAttribute("F20AB4A1-4BA3-4842-AC78-2550669F751A")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsWebServiceEvents {
    public abstract virtual int OnRemoved(string pszOldURL);
    public abstract virtual int OnRenamed(string pszOldURL, string pszNewURL);
    public abstract virtual int OnChanged(IVsWebService pIVsWebReference);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("C736666C-6970-4AE7-9B1F-5C0407A30556")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsWebServiceProvider {
    public abstract virtual int WebServices(IEnumWebServices& ppIEnumWebServices);
    public abstract virtual int GetWebService(string pszUrl, IVsWebService& ppIVsWebService);
    public abstract virtual int StartServer();
    public abstract virtual int AdviseWebServiceProviderEvents(IVsWebServiceProviderEvents pEvents, UInt32& pdwCookie);
    public abstract virtual int UnadviseWebServiceProviderEvents(UInt32 dwCookie);
    public abstract virtual int EnsureServerRunning(String& pbstrUrl);
    public abstract virtual int ApplicationUrl(String& pbstrUrl);
}
[GuidAttribute("EB7E00F3-A310-477C-AA65-ED94372377F3")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsWebServiceProviderDebug {
    public abstract virtual int GetDebugEngineFilter(VsDebugEngineFilter[] pEngineFilter);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("8170CB5A-D602-4886-A990-8260A5928133")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsWebServiceProviderEvents {
    public abstract virtual int OnAdded(IVsWebService pIVsWebReference);
    public abstract virtual int OnRemoved(string pszUrl);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("E8B06F3D-6D01-11D2-AA7D-00C04F990343")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsWebURLMRU {
    public abstract virtual int AddURL(string bstrUrl);
    public abstract virtual int GetURLArray(Object& pvarURLs);
}
[ComConversionLossAttribute]
[GuidAttribute("11138F8A-38C0-4436-B5A6-2F5EF2C3E242")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsWindowFrame {
    public abstract virtual int Show();
    public abstract virtual int Hide();
    public abstract virtual int IsVisible();
    public abstract virtual int ShowNoActivate();
    public abstract virtual int CloseFrame(UInt32 grfSaveOptions);
    public abstract virtual int SetFramePos(VSSETFRAMEPOS dwSFP, Guid& rguidRelativeTo, int x, int y, int cx, int cy);
    public abstract virtual int GetFramePos(VSSETFRAMEPOS[] pdwSFP, Guid& pguidRelativeTo, Int32& px, Int32& py, Int32& pcx, Int32& pcy);
    public abstract virtual int GetProperty(int propid, Object& pvar);
    public abstract virtual int SetProperty(int propid, object var);
    public abstract virtual int GetGuidProperty(int propid, Guid& pguid);
    public abstract virtual int SetGuidProperty(int propid, Guid& rguid);
    public abstract virtual int QueryViewInterface(Guid& riid, IntPtr& ppv);
    public abstract virtual int IsOnScreen(Int32& pfOnScreen);
}
[GuidAttribute("801885A0-9DC6-4E34-B064-1C3228F66794")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsWindowFrame2 {
    public abstract virtual int Advise(IVsWindowFrameNotify pNotify, UInt32& pdwCookie);
    public abstract virtual int Unadvise(UInt32 dwCookie);
    public abstract virtual int ActivateOwnerDockedWindow();
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("B2C3D311-2599-4CE1-9967-F224D99D374B")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsWindowFrame3 {
    public abstract virtual int CreateThumbnail(int width, int height, IntPtr& thumbnail);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("841F8242-83BB-4C6D-8357-E12C21BF6CAA")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsWindowFrame4 {
    public abstract virtual bool GetWindowScreenRect(Int32& screenLeft, Int32& screenTop, Int32& screenWidth, Int32& screenHeight);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("0461CF82-2583-4F9A-A1D6-7D61DE87B58B")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsWindowFrame5 {
    [ComAliasNameAttribute("ImageParameters140.ImageMoniker")]
[DispIdAttribute("1610678272")]
public ImageMoniker IconImageMoniker { get; public set; }
    [DispIdAttribute("1610678274")]
[ComAliasNameAttribute("ImageParameters140.ImageMoniker")]
public ImageMoniker DisplayedIconImageMoniker { get; }
    public abstract virtual ImageMoniker get_IconImageMoniker();
    public abstract virtual void set_IconImageMoniker(ImageMoniker value);
    public abstract virtual ImageMoniker get_DisplayedIconImageMoniker();
}
[GuidAttribute("04FD91BE-9184-4543-9526-8BCCC4ED850D")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsWindowFrame6 {
    public abstract virtual bool IsInSameTabGroup(IVsWindowFrame other);
}
[GuidAttribute("15D6E42B-36AD-4AF9-A144-C6F07027A6ED")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsWindowFrameEvents {
    public abstract virtual void OnFrameCreated(IVsWindowFrame frame);
    public abstract virtual void OnFrameDestroyed(IVsWindowFrame frame);
    public abstract virtual void OnFrameIsVisibleChanged(IVsWindowFrame frame, bool newIsVisible);
    public abstract virtual void OnFrameIsOnScreenChanged(IVsWindowFrame frame, bool newIsOnScreen);
    public abstract virtual void OnActiveFrameChanged(IVsWindowFrame oldFrame, IVsWindowFrame newFrame);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("104B9B1B-9488-4608-A11D-7C3AAA65E407")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsWindowFrameEvents2 {
    public abstract virtual void OnFrameCreated(IVsWindowFrame frame);
    public abstract virtual void OnFrameDestroyed(IVsWindowFrame frame);
    public abstract virtual void OnFrameIsVisibleChanged(IVsWindowFrame frame, bool newIsVisible);
    public abstract virtual void OnFrameIsOnScreenChanged(IVsWindowFrame frame, bool newIsOnScreen);
    public abstract virtual void OnActiveFrameChanged(IVsWindowFrame oldFrame, IVsWindowFrame newFrame);
    public abstract virtual void OnFrameViewReplaced(IVsWindowFrame frame);
}
[NullableContextAttribute("1")]
[GuidAttribute("3B8B9802-C720-4219-8694-E87EE8CB0E6D")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsWindowFrameEvents3 {
    public abstract virtual IVsTask OnFrameDocDataInitializedAsync(IVsWindowFrame frame, object docData);
    public abstract virtual void OnFrameDocViewInitialized(IVsWindowFrame frame, object docView);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("FE46E1DF-E8A8-48D3-932E-B61BC092E681")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsWindowFrameNotify {
    public abstract virtual int OnShow(int fShow);
    public abstract virtual int OnMove();
    public abstract virtual int OnSize();
    public abstract virtual int OnDockableChange(int fDockable);
}
[GuidAttribute("F4DE74E7-078A-430E-B0E1-8B131BDEF335")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsWindowFrameNotify2 {
    public abstract virtual int OnClose(UInt32& pgrfSaveOptions);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("8C213AC2-FF13-4361-9FC5-39D368D26CD3")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsWindowFrameNotify3 {
    public abstract virtual int OnShow(int fShow);
    public abstract virtual int OnMove(int x, int y, int w, int h);
    public abstract virtual int OnSize(int x, int y, int w, int h);
    public abstract virtual int OnDockableChange(int fDockable, int x, int y, int w, int h);
    public abstract virtual int OnClose(UInt32& pgrfSaveOptions);
}
[GuidAttribute("23AF8C33-07FD-4542-B624-E9C2B1768185")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsWindowFrameNotify4 {
    public abstract virtual void OnPropertyChanged(int propid);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("C40CF83B-A231-46B3-AA07-8CC30D5E1A04")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsWindowFrameSwitcher {
    public abstract virtual int AddTool(Guid& guidTool, string switchContext);
    public abstract virtual int RemoveTool(Guid& guidTool, string switchContext);
    public abstract virtual int GetActiveFrame(IVsWindowFrame& pFrame);
    public abstract virtual int InitializeSwitcher(UInt32 selelem);
}
[GuidAttribute("B0834D0F-ACFF-4EA5-809B-97CBB5D3D26B")]
[ComConversionLossAttribute]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsWindowPane {
    public abstract virtual int SetSite(IServiceProvider psp);
    public abstract virtual int CreatePaneWindow(IntPtr hwndParent, int x, int y, int cx, int cy, IntPtr& hwnd);
    public abstract virtual int GetDefaultSize(SIZE[] pSize);
    public abstract virtual int ClosePane();
    public abstract virtual int LoadViewState(IStream pStream);
    public abstract virtual int SaveViewState(IStream pStream);
    public abstract virtual int TranslateAccelerator(MSG[] lpmsg);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("508ED8E9-923D-44ED-8165-5B96DA4E0829")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsWindowPaneCommit {
    public abstract virtual int CommitPendingEdit(Int32& pfCommitFailed);
}
[GuidAttribute("072B9701-2F81-4468-8EB6-074206504B62")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsWindowPaneCommitFilter {
    public abstract virtual int IsCommitCommand(Guid& pguidCmdGroup, UInt32 dwCmdID, Int32& pfCommitCommand);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("8640A5BB-A6F8-4E4C-B4D7-C7041CFF3C71")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsWindowSearch {
    public bool SearchEnabled { get; }
    public Guid Category { get; }
    public IVsEnumWindowSearchFilters SearchFiltersEnum { get; }
    public IVsEnumWindowSearchOptions SearchOptionsEnum { get; }
    public abstract virtual bool get_SearchEnabled();
    public abstract virtual Guid get_Category();
    public abstract virtual IVsSearchTask CreateSearch(UInt32 dwCookie, IVsSearchQuery pSearchQuery, IVsSearchCallback pSearchCallback);
    public abstract virtual void ClearSearch();
    public abstract virtual void ProvideSearchSettings(IVsUIDataSource pSearchSettings);
    public abstract virtual IVsEnumWindowSearchFilters get_SearchFiltersEnum();
    public abstract virtual IVsEnumWindowSearchOptions get_SearchOptionsEnum();
    public abstract virtual bool OnNavigationKeyDown(UInt32 dwNavigationKey, UInt32 dwModifiers);
}
[GuidAttribute("C1335086-78C1-4F9A-823F-5A7166BC051C")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsWindowSearchBooleanOption {
    public string DisplayText { get; }
    public string Tooltip { get; }
    public bool Value { get; public set; }
    public abstract virtual string get_DisplayText();
    public abstract virtual string get_Tooltip();
    public abstract virtual void set_Value(bool value);
    public abstract virtual bool get_Value();
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("F2BE6603-D990-4810-8C0B-8CD36C5B51E9")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsWindowSearchCommandOption {
    public string DisplayText { get; }
    public string Tooltip { get; }
    public abstract virtual string get_DisplayText();
    public abstract virtual string get_Tooltip();
    public abstract virtual void Invoke();
}
[GuidAttribute("BD1E4938-41CF-4F9C-ABB3-2FA4F114197D")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsWindowSearchCustomFilter {
    public string DisplayText { get; }
    public string Tooltip { get; }
    public abstract virtual string get_DisplayText();
    public abstract virtual string get_Tooltip();
    public abstract virtual void ApplyFilter(String& pbstrSearchString, Int32& piSelectionStart, Int32& piSelectionEnd);
}
[GuidAttribute("A1702207-BF76-4A77-AD7D-0F41C558FDD3")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsWindowSearchEvents {
    public abstract virtual void SearchFiltersChanged();
    public abstract virtual void SearchOptionsChanged();
    public abstract virtual void SearchOptionValueChanged(IVsWindowSearchBooleanOption pOption);
}
[GuidAttribute("E807AAEC-6DDF-41A0-8B5B-8A0A630A7648")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsWindowSearchFilter {
    public string DisplayText { get; }
    public string Tooltip { get; }
    public abstract virtual string get_DisplayText();
    public abstract virtual string get_Tooltip();
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("576DEAF2-B527-4345-9A4B-BDAB6426FE03")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsWindowSearchHost {
    public IVsWindowSearch SearchObject { get; }
    public IVsWindowSearchEvents SearchEvents { get; }
    public IVsSearchQueryParser SearchQueryParser { get; }
    public IVsSearchQuery SearchQuery { get; }
    public IVsSearchTask SearchTask { get; }
    public bool IsVisible { get; public set; }
    public bool IsEnabled { get; public set; }
    public bool IsPopupVisible { get; public set; }
    public string HelpTopic { get; public set; }
    public abstract virtual void SetupSearch(IVsWindowSearch pWindowSearch);
    public abstract virtual void TerminateSearch();
    public abstract virtual IVsWindowSearch get_SearchObject();
    public abstract virtual IVsWindowSearchEvents get_SearchEvents();
    public abstract virtual void SearchAsync(IVsSearchQuery pSearchQuery);
    public abstract virtual IVsSearchQueryParser get_SearchQueryParser();
    public abstract virtual IVsSearchQuery get_SearchQuery();
    public abstract virtual IVsSearchTask get_SearchTask();
    public abstract virtual void set_IsVisible(bool value);
    public abstract virtual bool get_IsVisible();
    public abstract virtual void set_IsEnabled(bool value);
    public abstract virtual bool get_IsEnabled();
    public abstract virtual void set_IsPopupVisible(bool value);
    public abstract virtual bool get_IsPopupVisible();
    public abstract virtual void Activate();
    public abstract virtual string get_HelpTopic();
    public abstract virtual void set_HelpTopic(string value);
}
[GuidAttribute("7525C3AF-CE45-46B3-88D3-4327B50FD8B9")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsWindowSearchHostFactory {
    public abstract virtual IVsWindowSearchHost CreateWindowSearchHost(object pParentControl, IDropTarget pDropTarget);
}
[GuidAttribute("77D79CE1-9A26-4DC2-9182-3C5E1D1DFB4C")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsWindowSearchOption {
    public string DisplayText { get; }
    public string Tooltip { get; }
    public abstract virtual string get_DisplayText();
    public abstract virtual string get_Tooltip();
}
[GuidAttribute("236D9124-37CA-4EDC-AF07-2D8DFA416F42")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsWindowSearchSimpleFilter {
    public string DisplayText { get; }
    public string Tooltip { get; }
    public string FilterField { get; }
    public string DefaultFilterValue { get; }
    public abstract virtual string get_DisplayText();
    public abstract virtual string get_Tooltip();
    public abstract virtual string get_FilterField();
    public abstract virtual string get_DefaultFilterValue();
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("7E7C4B21-079F-4830-9ED5-E0CB0BF281F1")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsWindowView {
    public abstract virtual int GetProperty(int propid, Object& pvar);
    public abstract virtual int SetProperty(int propid, object var);
    public abstract virtual int GetGuidProperty(int propid, Guid& pguid);
    public abstract virtual int SetGuidProperty(int propid, Guid& rguid);
}
[GuidAttribute("B362DB16-833E-4F93-B108-71B2177C3930")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsWorkingFolders {
    public abstract virtual string GetFolder(UInt32 folderKind, bool fVersionSpecific, bool fEnsureCreated);
    public abstract virtual void GetMigrationFolder(UInt32 location, UInt32& pdwOldMajorVersion, String& pszOldLocation);
}
[GuidAttribute("DBF44E6B-78FF-413D-98B7-5CB601FB672A")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsWorkingFoldersEvents {
    public abstract virtual void OnQueryLocationChange(UInt32 location, Boolean& pfCanMoveContent);
    public abstract virtual void OnAfterLocationChange(UInt32 location, bool contentMoved);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("16FA7461-9E7C-4F28-B28F-AABBF73C0193")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsWritableSettingsStore {
    public abstract virtual int GetBool(string collectionPath, string propertyName, Int32& value);
    public abstract virtual int GetInt(string collectionPath, string propertyName, Int32& value);
    public abstract virtual int GetUnsignedInt(string collectionPath, string propertyName, UInt32& value);
    public abstract virtual int GetInt64(string collectionPath, string propertyName, Int64& value);
    public abstract virtual int GetUnsignedInt64(string collectionPath, string propertyName, UInt64& value);
    public abstract virtual int GetString(string collectionPath, string propertyName, String& value);
    public abstract virtual int GetBinary(string collectionPath, string propertyName, UInt32 byteLength, Byte[] pBytes, UInt32[] actualByteLength);
    public abstract virtual int GetBoolOrDefault(string collectionPath, string propertyName, int defaultValue, Int32& value);
    public abstract virtual int GetIntOrDefault(string collectionPath, string propertyName, int defaultValue, Int32& value);
    public abstract virtual int GetUnsignedIntOrDefault(string collectionPath, string propertyName, UInt32 defaultValue, UInt32& value);
    public abstract virtual int GetInt64OrDefault(string collectionPath, string propertyName, long defaultValue, Int64& value);
    public abstract virtual int GetUnsignedInt64OrDefault(string collectionPath, string propertyName, ulong defaultValue, UInt64& value);
    public abstract virtual int GetStringOrDefault(string collectionPath, string propertyName, string defaultValue, String& value);
    public abstract virtual int GetPropertyType(string collectionPath, string propertyName, UInt32& type);
    public abstract virtual int PropertyExists(string collectionPath, string propertyName, Int32& pfExists);
    public abstract virtual int CollectionExists(string collectionPath, Int32& pfExists);
    public abstract virtual int GetSubCollectionCount(string collectionPath, UInt32& subCollectionCount);
    public abstract virtual int GetPropertyCount(string collectionPath, UInt32& propertyCount);
    public abstract virtual int GetLastWriteTime(string collectionPath, SYSTEMTIME[] lastWriteTime);
    public abstract virtual int GetSubCollectionName(string collectionPath, UInt32 index, String& subCollectionName);
    public abstract virtual int GetPropertyName(string collectionPath, UInt32 index, String& propertyName);
    public abstract virtual int SetBool(string collectionPath, string propertyName, int value);
    public abstract virtual int SetInt(string collectionPath, string propertyName, int value);
    public abstract virtual int SetUnsignedInt(string collectionPath, string propertyName, UInt32 value);
    public abstract virtual int SetInt64(string collectionPath, string propertyName, long value);
    public abstract virtual int SetUnsignedInt64(string collectionPath, string propertyName, ulong value);
    public abstract virtual int SetString(string collectionPath, string propertyName, string value);
    public abstract virtual int SetBinary(string collectionPath, string propertyName, UInt32 byteLength, Byte[] pBytes);
    public abstract virtual int DeleteProperty(string collectionPath, string propertyName);
    public abstract virtual int CreateCollection(string collectionPath);
    public abstract virtual int DeleteCollection(string collectionPath);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("05EC0018-FB7F-4492-9F91-21245C5A3D15")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsXMLMemberData {
    public abstract virtual int GetSummaryText(String& pbstrSummary);
    public abstract virtual int GetParamCount(Int32& piParams);
    public abstract virtual int GetParamTextAt(int iParam, String& pbstrName, String& pbstrText);
    public abstract virtual int GetReturnsText(String& pbstrReturns);
    public abstract virtual int GetRemarksText(String& pbstrRemarks);
}
[GuidAttribute("C04165C2-3CAC-4508-B651-DD24906DBD4D")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsXMLMemberData3 {
    public abstract virtual int SetOptions(UInt32 options);
    public abstract virtual int GetSummaryText(String& pbstrSummary);
    public abstract virtual int GetParamCount(Int32& piParams);
    public abstract virtual int GetParamTextAt(int iParam, String& pbstrName, String& pbstrText);
    public abstract virtual int GetReturnsText(String& pbstrReturns);
    public abstract virtual int GetRemarksText(String& pbstrRemarks);
    public abstract virtual int GetExceptionCount(Int32& piExceptions);
    public abstract virtual int GetExceptionTextAt(int iException, String& pbstrType, String& pbstrText);
    public abstract virtual int GetFilterPriority(Int32& piFilterPriority);
    public abstract virtual int GetCompletionListText(String& pbstrCompletionList);
    public abstract virtual int GetCompletionListTextAt(int iParam, String& pbstrCompletionList);
    public abstract virtual int GetPermissionSet(String& pbstrPermissionSetXML);
    public abstract virtual int GetTypeParamCount(Int32& piTypeParams);
    public abstract virtual int GetTypeParamTextAt(int iTypeParam, String& pbstrName, String& pbstrText);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("60721047-D8B3-4FF2-B963-D4D1F3102F77")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsXMLMemberData4 {
    public abstract virtual int SetOptions(UInt32 options);
    public abstract virtual int GetSummaryText(String& pbstrSummary);
    public abstract virtual int GetParamCount(Int32& piParams);
    public abstract virtual int GetParamTextAt(int iParam, String& pbstrName, String& pbstrText);
    public abstract virtual int GetReturnsText(String& pbstrReturns);
    public abstract virtual int GetRemarksText(String& pbstrRemarks);
    public abstract virtual int GetExceptionCount(Int32& piExceptions);
    public abstract virtual int GetExceptionTextAt(int iException, String& pbstrType, String& pbstrText);
    public abstract virtual int GetFilterPriority(Int32& piFilterPriority);
    public abstract virtual int GetCompletionListText(String& pbstrCompletionList);
    public abstract virtual int GetCompletionListTextAt(int iParam, String& pbstrCompletionList);
    public abstract virtual int GetPermissionSet(String& pbstrPermissionSetXML);
    public abstract virtual int GetTypeParamCount(Int32& piTypeParams);
    public abstract virtual int GetTypeParamTextAt(int iTypeParam, String& pbstrName, String& pbstrText);
    public abstract virtual Array GetAssociatedCapabilities();
}
[GuidAttribute("ABF5E2FB-3F36-4B99-B384-BDF85D598C6C")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsXMLMemberData5 {
    public abstract virtual int SetOptions(UInt32 options);
    public abstract virtual int GetSummaryText(String& pbstrSummary);
    public abstract virtual int GetParamCount(Int32& piParams);
    public abstract virtual int GetParamTextAt(int iParam, String& pbstrName, String& pbstrText);
    public abstract virtual int GetReturnsText(String& pbstrReturns);
    public abstract virtual int GetRemarksText(String& pbstrRemarks);
    public abstract virtual int GetExceptionCount(Int32& piExceptions);
    public abstract virtual int GetExceptionTextAt(int iException, String& pbstrType, String& pbstrText);
    public abstract virtual int GetFilterPriority(Int32& piFilterPriority);
    public abstract virtual int GetCompletionListText(String& pbstrCompletionList);
    public abstract virtual int GetCompletionListTextAt(int iParam, String& pbstrCompletionList);
    public abstract virtual int GetPermissionSet(String& pbstrPermissionSetXML);
    public abstract virtual int GetTypeParamCount(Int32& piTypeParams);
    public abstract virtual int GetTypeParamTextAt(int iTypeParam, String& pbstrName, String& pbstrText);
    public abstract virtual Array GetAssociatedCapabilities();
    public abstract virtual IVsXMLMemberDataDeprecation GetDeprecation();
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("73F13643-A469-444D-8FFF-55D69229F5AA")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsXMLMemberData6 {
    public abstract virtual int SetOptions(UInt32 options);
    public abstract virtual int GetSummaryText(String& pbstrSummary);
    public abstract virtual int GetParamCount(Int32& piParams);
    public abstract virtual int GetParamTextAt(int iParam, String& pbstrName, String& pbstrText);
    public abstract virtual int GetReturnsText(String& pbstrReturns);
    public abstract virtual int GetRemarksText(String& pbstrRemarks);
    public abstract virtual int GetExceptionCount(Int32& piExceptions);
    public abstract virtual int GetExceptionTextAt(int iException, String& pbstrType, String& pbstrText);
    public abstract virtual int GetFilterPriority(Int32& piFilterPriority);
    public abstract virtual int GetCompletionListText(String& pbstrCompletionList);
    public abstract virtual int GetCompletionListTextAt(int iParam, String& pbstrCompletionList);
    public abstract virtual int GetPermissionSet(String& pbstrPermissionSetXML);
    public abstract virtual int GetTypeParamCount(Int32& piTypeParams);
    public abstract virtual int GetTypeParamTextAt(int iTypeParam, String& pbstrName, String& pbstrText);
    public abstract virtual Array GetAssociatedCapabilities();
    public abstract virtual IVsXMLMemberDataDeprecation GetDeprecation();
    public abstract virtual int GetExperimental(String& pbstrDescription);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("C7AE54AB-ABF2-494A-BC8C-C577ABB874C9")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsXMLMemberDataCallBack {
    public abstract virtual int GetDisplayNameForTag(UInt32 nTagType, string wszBufferIn, String& pbstrBufferOut);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("98F1A862-A153-4369-86B8-7C4E3D0D5E37")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsXMLMemberDataCapability {
    public string Type { get; }
    public string Description { get; }
    public abstract virtual string get_Type();
    public abstract virtual string get_Description();
}
[GuidAttribute("AF87BDDD-FB89-4787-9809-1749FD500ABC")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsXMLMemberDataDeprecation {
    [DispIdAttribute("1610678272")]
[ComAliasNameAttribute("Microsoft.VisualStudio.Shell.Interop.XMLMEMBERDATA_DEPRECATION_TYPE")]
public UInt32 Type { get; }
    [DispIdAttribute("1610678273")]
public string Description { get; }
    public abstract virtual UInt32 get_Type();
    public abstract virtual string get_Description();
}
[GuidAttribute("B9B17D7E-AAB8-43CB-AB40-B4E26E0B6D48")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsXMLMemberDataRegisterCallBack {
    public abstract virtual int RegisterCallBack(IVsXMLMemberDataCallBack pIVsXMLMemberDataCallBack);
    public abstract virtual int UnregisterCallBack();
}
[GuidAttribute("F9C06C61-207B-41D5-9CA2-690B3AE01083")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsXMLMemberIndex {
    public abstract virtual int BuildMemberIndex();
    public abstract virtual int ParseMemberSignature(string pszSignature, UInt32& pdwID);
    public abstract virtual int GetMemberXML(UInt32 dwId, String& pbstrXML);
    public abstract virtual int GetMemberDataFromXML(string pszXML, IVsXMLMemberData& ppObj);
}
[GuidAttribute("D31E676B-D416-4DA7-977E-20E00AAE1118")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.Shell.Interop.IVsXMLMemberIndexService {
    public abstract virtual int CreateXMLMemberIndex(string pszBinaryName, IVsXMLMemberIndex& ppIndex);
    public abstract virtual int GetMemberDataFromXML(string pszXML, IVsXMLMemberData& ppObj);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("CCCECEE2-D225-4294-858E-2B8C3F7D84EA")]
public interface Microsoft.VisualStudio.Shell.Interop.IWebApplicationCtxSvc {
    public abstract virtual int GetItemContext(IVsHierarchy pHier, UInt32 itemid, IServiceProvider& ppServiceProvider);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("F4DD7776-905A-4B75-98F4-162C2D3C7AFA")]
public interface Microsoft.VisualStudio.Shell.Interop.IWebClassLibProject {
    public abstract virtual int UpdateAnchoredPath(string pszNewRootPath, string pszOptionalVDir);
    public abstract virtual int CloseProject();
    public abstract virtual int UnloadAppDomain(int bWaitForReset);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("465BE4D1-B10C-4A7E-AFCF-3C55AD3EDAE3")]
public interface Microsoft.VisualStudio.Shell.Interop.IWebClassLibProjectEvents {
    public abstract virtual int OnReferenceAdded(string pszReferencePath);
    public abstract virtual int OnFileAdded(string pszFilePath, bool foldersMustBeInProject);
    public abstract virtual int StartWebAdminTool();
}
[GuidAttribute("95D018C3-B554-430E-B62C-950E79728B0D")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.Shell.Interop.IWebClassLibProjectSvc {
    public abstract virtual int CreateClassLibProject(IVsHierarchy pHier, string pszRootPathOrUrl, UInt32 dwFlags, string pszOptionalVDir, IWebClassLibProject& ppClassLibProject);
}
[GuidAttribute("05B4B4B7-6A9D-4A70-BDB1-04CBB26C9248")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.Shell.Interop.IWebFileCtxService {
    public abstract virtual int AddFileToIntellisense(string pszFilePath, UInt32& pItemid);
    public abstract virtual int EnsureFileOpened(UInt32 itemid, IVsWindowFrame& ppFrame);
    public abstract virtual int RemoveFileFromIntellisense(string pszFilePath);
    public abstract virtual int GetWebRootPath(String& pbstrWebRootPath);
    public abstract virtual int GetIntellisenseProjectName(String& pbstrProjectName);
    public abstract virtual int AddDependentAssemblyFile(string pszFilePath);
    public abstract virtual int RemoveDependentAssemblyFile(string pszFilePath);
    public abstract virtual int ConvertToAppRelPath(string pszFilePath, String& pbstrAppRelPath);
    public abstract virtual int CBMCallbackActive();
    public abstract virtual int WaitForIntellisenseReady();
    public abstract virtual int IsDocumentInProject(string pszFilePath, UInt32& pItemid);
}
public enum Microsoft.VisualStudio.Shell.Interop.LIB_CATEGORY : Enum {
    public int value__;
    public static LIB_CATEGORY LC_MEMBERTYPE;
    public static LIB_CATEGORY LC_MEMBERACCESS;
    public static LIB_CATEGORY LC_CLASSTYPE;
    public static LIB_CATEGORY LC_CLASSACCESS;
    public static LIB_CATEGORY LC_ACTIVEPROJECT;
    public static LIB_CATEGORY LC_LISTTYPE;
    public static LIB_CATEGORY LC_VISIBILITY;
    public static LIB_CATEGORY LC_MODIFIER;
    public static LIB_CATEGORY LC_NODETYPE;
}
public enum Microsoft.VisualStudio.Shell.Interop.LIB_CHECKSTATE : Enum {
    public int value__;
    public static LIB_CHECKSTATE LCS_UNCHECKED;
    public static LIB_CHECKSTATE LCS_CHECKEDGRAY;
    public static LIB_CHECKSTATE LCS_CHECKED;
}
public enum Microsoft.VisualStudio.Shell.Interop.LIB_PERSISTTYPE : Enum {
    public int value__;
    public static LIB_PERSISTTYPE LPT_PROJECT;
    public static LIB_PERSISTTYPE LPT_GLOBAL;
}
public class Microsoft.VisualStudio.Shell.Interop.LOGFONTW : ValueType {
    [ComAliasNameAttribute("Microsoft.VisualStudio.OLE.Interop.LONG")]
public int lfHeight;
    [ComAliasNameAttribute("Microsoft.VisualStudio.OLE.Interop.LONG")]
public int lfWidth;
    [ComAliasNameAttribute("Microsoft.VisualStudio.OLE.Interop.LONG")]
public int lfEscapement;
    [ComAliasNameAttribute("Microsoft.VisualStudio.OLE.Interop.LONG")]
public int lfOrientation;
    [ComAliasNameAttribute("Microsoft.VisualStudio.OLE.Interop.LONG")]
public int lfWeight;
    [ComAliasNameAttribute("Microsoft.VisualStudio.TextManager.Interop.BYTE")]
public byte lfItalic;
    [ComAliasNameAttribute("Microsoft.VisualStudio.TextManager.Interop.BYTE")]
public byte lfUnderline;
    [ComAliasNameAttribute("Microsoft.VisualStudio.TextManager.Interop.BYTE")]
public byte lfStrikeOut;
    [ComAliasNameAttribute("Microsoft.VisualStudio.TextManager.Interop.BYTE")]
public byte lfCharSet;
    [ComAliasNameAttribute("Microsoft.VisualStudio.TextManager.Interop.BYTE")]
public byte lfOutPrecision;
    [ComAliasNameAttribute("Microsoft.VisualStudio.TextManager.Interop.BYTE")]
public byte lfClipPrecision;
    [ComAliasNameAttribute("Microsoft.VisualStudio.TextManager.Interop.BYTE")]
public byte lfQuality;
    [ComAliasNameAttribute("Microsoft.VisualStudio.TextManager.Interop.BYTE")]
public byte lfPitchAndFamily;
    public UInt16[] lfFaceName;
}
public abstract class Microsoft.VisualStudio.Shell.Interop.LogicalViewID : object {
    public static string Primary;
    public static string Any;
    public static string Debugging;
    public static string Code;
    public static string Designer;
    public static string TextView;
    public static string UserChooseView;
    public static string ProjectSpecificEditor;
}
public enum Microsoft.VisualStudio.Shell.Interop.LOGTOFILEOPTION : Enum {
    public int value__;
    public static LOGTOFILEOPTION LTFO_APPEND;
    public static LOGTOFILEOPTION LTFO_OVERWRITE;
    public static LOGTOFILEOPTION LTFO_VALIDMASK;
}
public enum Microsoft.VisualStudio.Shell.Interop.MARKERTYPE4 : Enum {
    public int value__;
    public static MARKERTYPE4 MARKER_INFORMATION;
    public static MARKERTYPE4 DEF_MARKER_COUNT_NEW_3;
}
[ComConversionLossAttribute]
public class Microsoft.VisualStudio.Shell.Interop.MEINIT : ValueType {
    [ComAliasNameAttribute("Microsoft.VisualStudio.OLE.Interop.DWORD")]
public UInt32 dwSizeOfStruct;
    public IVsMenuEditorSite pMenuEditorSite;
    public IServiceProvider psp;
    public IOleUndoManager pUndoMgr;
    public Guid SiteId;
    [ComConversionLossAttribute]
public IntPtr hwnd;
    [ComConversionLossAttribute]
public IntPtr hwndParent;
    [ComAliasNameAttribute("Microsoft.VisualStudio.Shell.Interop.VSMEINIT")]
public UInt32 dwFlags;
    [ComAliasNameAttribute("Microsoft.VisualStudio.Shell.Interop.LPCSTR")]
public string pszAccelList;
    [ComAliasNameAttribute("Microsoft.VisualStudio.OLE.Interop.DWORD")]
public UInt32 cchTextLimit;
    [ComAliasNameAttribute("Microsoft.VisualStudio.OLE.Interop.DWORD")]
public UInt32 cchNameLimit;
}
public enum Microsoft.VisualStudio.Shell.Interop.OLEACTIVATE : Enum {
    public int value__;
    public static OLEACTIVATE OLEACTIVATE_FRAMEWINDOW;
    public static OLEACTIVATE OLEACTIVATE_DOCWINDOW;
}
[FlagsAttribute]
public enum Microsoft.VisualStudio.Shell.Interop.OLECOMPFLAG : Enum {
    public int value__;
    public static OLECOMPFLAG OLECOMPFLAG_ROUTEACTIVEASCNTRCMD;
    public static OLECOMPFLAG OLECOMPFLAG_INHIBITNESTEDCOMPUI;
}
public enum Microsoft.VisualStudio.Shell.Interop.OLEHELPCMD : Enum {
    public int value__;
    public static OLEHELPCMD OLEHELPCMD_CONTEXT;
    public static OLEHELPCMD OLEHELPCMD_CONTEXTPOPUP;
}
public enum Microsoft.VisualStudio.Shell.Interop.OLEIPCSTATE : Enum {
    public int value__;
    public static OLEIPCSTATE OLEIPCSTATE_MODAL;
    public static OLEIPCSTATE OLEIPCSTATE_REDRAWOFF;
    public static OLEIPCSTATE OLEIPCSTATE_WARNINGSOFF;
    public static OLEIPCSTATE OLEIPCSTATE_RECORDING;
}
public enum Microsoft.VisualStudio.Shell.Interop.OLEMENU : Enum {
    public int value__;
    public static OLEMENU OLEMENU_MENUMERGE;
    public static OLEMENU OLEMENU_CNTRMENUONLY;
    public static OLEMENU OLEMENU_OBJECTMENUONLY;
    public static OLEMENU OLEMENU_ROUTEACTIVEASCNTRCMD;
}
public class Microsoft.VisualStudio.Shell.Interop.OLEMENUID : ValueType {
    public int nMenuId;
    [ComAliasNameAttribute("Microsoft.VisualStudio.OLE.Interop.ULONG")]
public UInt32 cwBuf;
    [ComAliasNameAttribute("Microsoft.VisualStudio.OLE.Interop.LPOLESTR")]
public string pwszNameBuf;
}
public enum Microsoft.VisualStudio.Shell.Interop.OLEMSGBUTTON : Enum {
    public int value__;
    public static OLEMSGBUTTON OLEMSGBUTTON_OK;
    public static OLEMSGBUTTON OLEMSGBUTTON_OKCANCEL;
    public static OLEMSGBUTTON OLEMSGBUTTON_ABORTRETRYIGNORE;
    public static OLEMSGBUTTON OLEMSGBUTTON_YESNOCANCEL;
    public static OLEMSGBUTTON OLEMSGBUTTON_YESNO;
    public static OLEMSGBUTTON OLEMSGBUTTON_RETRYCANCEL;
    public static OLEMSGBUTTON OLEMSGBUTTON_YESALLNOCANCEL;
}
public enum Microsoft.VisualStudio.Shell.Interop.OLEMSGDEFBUTTON : Enum {
    public int value__;
    public static OLEMSGDEFBUTTON OLEMSGDEFBUTTON_FIRST;
    public static OLEMSGDEFBUTTON OLEMSGDEFBUTTON_SECOND;
    public static OLEMSGDEFBUTTON OLEMSGDEFBUTTON_THIRD;
    public static OLEMSGDEFBUTTON OLEMSGDEFBUTTON_FOURTH;
}
public enum Microsoft.VisualStudio.Shell.Interop.OLEMSGICON : Enum {
    public int value__;
    public static OLEMSGICON OLEMSGICON_NOICON;
    public static OLEMSGICON OLEMSGICON_CRITICAL;
    public static OLEMSGICON OLEMSGICON_QUERY;
    public static OLEMSGICON OLEMSGICON_WARNING;
    public static OLEMSGICON OLEMSGICON_INFO;
}
public enum Microsoft.VisualStudio.Shell.Interop.OLEROLE : Enum {
    public int value__;
    public static OLEROLE OLEROLE_UNKNOWN;
    public static OLEROLE OLEROLE_COMPONENTHOST;
    public static OLEROLE OLEROLE_HOSTEXTENSION;
    public static OLEROLE OLEROLE_MAINCOMPONENT;
    public static OLEROLE OLEROLE_SUBCOMPONENT;
    public static OLEROLE OLEROLE_COMPONENTCONTROL;
    public static OLEROLE OLEROLE_TOPLEVELCOMPONENT;
}
public enum Microsoft.VisualStudio.Shell.Interop.OLEUIEVENTFREQ : Enum {
    public int value__;
    public static OLEUIEVENTFREQ OLEUIEVENTFREQ_NULL;
    public static OLEUIEVENTFREQ OLEUIEVENTFREQ_CONSISTENTLY;
    public static OLEUIEVENTFREQ OLEUIEVENTFREQ_FREQUENTLY;
    public static OLEUIEVENTFREQ OLEUIEVENTFREQ_OFTEN;
    public static OLEUIEVENTFREQ OLEUIEVENTFREQ_SOMETIMES;
    public static OLEUIEVENTFREQ OLEUIEVENTFREQ_SELDOM;
}
public enum Microsoft.VisualStudio.Shell.Interop.OLEUIEVENTSTATUS : Enum {
    public int value__;
    public static OLEUIEVENTSTATUS OLEUIEVENTSTATUS_OCCURRED;
    public static OLEUIEVENTSTATUS OLEUIEVENTSTATUS_START;
    public static OLEUIEVENTSTATUS OLEUIEVENTSTATUS_STOP;
    public static OLEUIEVENTSTATUS OLEUIEVENTSTATUS_STARTNODIALOG;
    public static OLEUIEVENTSTATUS OLEUIEVENTSTATUS_STARTBEFOREDIALOG;
    public static OLEUIEVENTSTATUS OLEUIEVENTSTATUS_CONTINUEINDIALOG;
    public static OLEUIEVENTSTATUS OLEUIEVENTSTATUS_CONTINUEAFTERDIALOG;
}
public enum Microsoft.VisualStudio.Shell.Interop.PFF_RESULTS : Enum {
    public int value__;
    public static PFF_RESULTS STG_E_INVALIDCODEPAGE;
    public static PFF_RESULTS STG_E_NOTTEXT;
    public static PFF_RESULTS STG_S_DATALOSS;
}
public class Microsoft.VisualStudio.Shell.Interop.POINTS : ValueType {
    [ComAliasNameAttribute("Microsoft.VisualStudio.OLE.Interop.SHORT")]
public short x;
    [ComAliasNameAttribute("Microsoft.VisualStudio.OLE.Interop.SHORT")]
public short y;
}
public enum Microsoft.VisualStudio.Shell.Interop.PREPARECOMMANDRESULT : Enum {
    public int value__;
    public static PREPARECOMMANDRESULT PC_SUCCESS;
    public static PREPARECOMMANDRESULT PC_NOCOMMAND;
    public static PREPARECOMMANDRESULT PC_NOTFOUND;
    public static PREPARECOMMANDRESULT PC_NOTAVAILABLE;
    public static PREPARECOMMANDRESULT PC_PARAMSNOTACCEPTED;
    public static PREPARECOMMANDRESULT PC_FAILURE;
}
public enum Microsoft.VisualStudio.Shell.Interop.REFERENCECHANGETYPE : Enum {
    public int value__;
    public static REFERENCECHANGETYPE REFERENCE_Added;
    public static REFERENCECHANGETYPE REFERENCE_Removed;
    public static REFERENCECHANGETYPE REFERENCE_Changed;
}
public enum Microsoft.VisualStudio.Shell.Interop.RemoveBFDirection : Enum {
    public int value__;
    public static RemoveBFDirection RemovePrev;
    public static RemoveBFDirection RemoveNext;
}
[GuidAttribute("0C539790-12E4-11CF-B661-00AA004CD6D8")]
[ComVisibleAttribute("False")]
public interface Microsoft.VisualStudio.Shell.Interop.SApplicationObject {
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("5692CB97-BF4F-49EE-B62E-718A6C8F9CB2")]
public interface Microsoft.VisualStudio.Shell.Interop.SAppxManifestDesignerService {
}
[GuidAttribute("944774C9-7422-4E87-B01C-189182C779A6")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.Shell.Interop.SAsyncServiceProvider {
}
[ComVisibleAttribute("False")]
[GuidAttribute("95FC88C3-9FCB-11CF-A405-00AA00C00940")]
public interface Microsoft.VisualStudio.Shell.Interop.SBuilderWizardManager {
}
public enum Microsoft.VisualStudio.Shell.Interop.SccToolsOptionsEnum : Enum {
    public int value__;
    public static SccToolsOptionsEnum ksctoAllowReadOnlyFilesNotUnderSccToBeEdited;
    public static SccToolsOptionsEnum ksctoLast;
    public static SccToolsOptionsEnum ksctoBad;
}
[ComVisibleAttribute("False")]
[GuidAttribute("6D5140C4-7436-11CE-8034-00AA006009FA")]
public interface Microsoft.VisualStudio.Shell.Interop.SCodeNavigate {
}
[ComVisibleAttribute("False")]
[GuidAttribute("33a24090-6565-11d3-85fc-00c04f6123b3")]
public interface Microsoft.VisualStudio.Shell.Interop.SCompEnumService {
}
[GuidAttribute("5403AC85-C8C8-4967-BDB0-662D485F0C28")]
public interface Microsoft.VisualStudio.Shell.Interop.SDirList {
}
[ComVisibleAttribute("False")]
[InterfaceTypeAttribute("1")]
[GuidAttribute("04A72314-32E9-48E2-9B87-A63603454F3E")]
public interface Microsoft.VisualStudio.Shell.Interop.SDTE {
}
[GuidAttribute("6D5140D6-7436-11CE-8034-00AA006009FA")]
[ComVisibleAttribute("False")]
public interface Microsoft.VisualStudio.Shell.Interop.SExtendedTypeLib {
}
[ComVisibleAttribute("False")]
[GuidAttribute("8D0AA9CC-8465-42F3-AD6E-DFDE28CCC75D")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.Shell.Interop.SExtensionManager {
}
[GuidAttribute("22912BB2-3FF9-4D55-B4DB-D210B6035D4C")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.Shell.Interop.SharedMSBuildFilesManagerHierarchy {
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("88B47069-C019-4EEC-B69C-3C8630F83BA5")]
public interface Microsoft.VisualStudio.Shell.Interop.SharedProjectReferenceProviderGuid {
}
public abstract class Microsoft.VisualStudio.Shell.Interop.ShellGuids80 : object {
    public static string SolutionFolderProject;
}
[ComVisibleAttribute("False")]
[GuidAttribute("7DB81657-7722-4407-B675-9F4A6FEEEA15")]
public interface Microsoft.VisualStudio.Shell.Interop.SIVsPackageDynamicToolOwner {
}
[ComVisibleAttribute("False")]
[GuidAttribute("6D5140D4-7436-11CE-8034-00AA006009FA")]
public interface Microsoft.VisualStudio.Shell.Interop.SLicensedClassManager {
}
[ComVisibleAttribute("False")]
[GuidAttribute("6D5140D3-7436-11CE-8034-00AA006009FA")]
public interface Microsoft.VisualStudio.Shell.Interop.SLocalRegistry {
}
[ComVisibleAttribute("False")]
[GuidAttribute("5EFC7974-14BC-11CF-9B2B-00AA00573819")]
public interface Microsoft.VisualStudio.Shell.Interop.SOleComponentUIManager {
}
[ComVisibleAttribute("False")]
[GuidAttribute("5EFC7970-14BC-11CF-9B2B-00AA00573819")]
public interface Microsoft.VisualStudio.Shell.Interop.SOleInPlaceComponent {
}
[GuidAttribute("5EFC7971-14BC-11CF-9B2B-00AA00573819")]
[ComVisibleAttribute("False")]
public interface Microsoft.VisualStudio.Shell.Interop.SOleInPlaceComponentSite {
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("594AC716-4B5C-4A85-B36F-F1E728F71603")]
public interface Microsoft.VisualStudio.Shell.Interop.SProfferAsyncService {
}
[ComVisibleAttribute("False")]
[GuidAttribute("CB728B20-F786-11CE-92AD-00AA00A74CD0")]
public interface Microsoft.VisualStudio.Shell.Interop.SProfferService {
}
[ComVisibleAttribute("False")]
[GuidAttribute("718CC500-0A76-11CF-8045-00AA006009FA")]
public interface Microsoft.VisualStudio.Shell.Interop.SProfferTypeLib {
}
public enum Microsoft.VisualStudio.Shell.Interop.STATUSBARCONSTS : Enum {
    public int value__;
    public static STATUSBARCONSTS SBAI_MIN;
    public static STATUSBARCONSTS SBAI_Gen;
    public static STATUSBARCONSTS SBAI_Pri;
    public static STATUSBARCONSTS SBAI_Sav;
    public static STATUSBARCONSTS SBAI_Dep;
    public static STATUSBARCONSTS SBAI_Syn;
    public static STATUSBARCONSTS SBAI_Bui;
    public static STATUSBARCONSTS SBAI_Fin;
    public static STATUSBARCONSTS SBAI_MAX;
}
[GuidAttribute("6D5140C5-7436-11CE-8034-00AA006009FA")]
[ComVisibleAttribute("False")]
public interface Microsoft.VisualStudio.Shell.Interop.STrackSelection {
}
[ComVisibleAttribute("False")]
[GuidAttribute("E69CD190-1276-11D1-9F64-00A0C911004F")]
public interface Microsoft.VisualStudio.Shell.Interop.SUIHostCommandDispatcher {
}
[ComVisibleAttribute("False")]
[GuidAttribute("2C2EA031-02BE-11D1-8C85-00C04FC2AA89")]
public interface Microsoft.VisualStudio.Shell.Interop.SUIHostLocale {
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("33024F95-187C-4F15-AA48-38D05C1E8B58")]
public interface Microsoft.VisualStudio.Shell.Interop.SVsAccountManagementService {
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("231E1BD9-EECC-4E16-9FCA-A1D24A20EE71")]
public interface Microsoft.VisualStudio.Shell.Interop.SVsAccountManager {
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("24367A32-EF56-405B-A395-5CF2BCCB2283")]
public interface Microsoft.VisualStudio.Shell.Interop.SVsActivityLog {
}
[ComVisibleAttribute("False")]
[GuidAttribute("11DFCCEB-D935-4a9f-9796-5BA433C5AF8E")]
public interface Microsoft.VisualStudio.Shell.Interop.SVsAddProjectItemDlg {
}
[ComVisibleAttribute("False")]
[GuidAttribute("BD71396F-39C6-4E3F-BBA2-79CE33A8B302")]
public interface Microsoft.VisualStudio.Shell.Interop.SVsAddWebReferenceDlg {
}
[ComVisibleAttribute("False")]
[GuidAttribute("C7F21561-D58A-11d2-BF4A-0080C728D9A0")]
public interface Microsoft.VisualStudio.Shell.Interop.SVsAppCommandLine {
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("46B0C039-DE36-4DAE-A038-9F1635F5F962")]
public interface Microsoft.VisualStudio.Shell.Interop.SVsAppContainerDeveloperLicensing {
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("7E97079C-BB7C-4003-8DFB-730CD0B88250")]
public interface Microsoft.VisualStudio.Shell.Interop.SVsAppContainerProjectDeploy {
}
[GuidAttribute("B54B4062-117D-46FC-BE19-CD20F2867D52")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.Shell.Interop.SVsAssemblyNameUnification {
}
[GuidAttribute("9A9569D2-2F7E-4AF6-9E40-630F86D3F3F9")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.Shell.Interop.SVsBuildManagerAccessor {
}
[GuidAttribute("11D239A8-47CD-4FAC-9841-D4C0E1E4B5F4")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.Shell.Interop.SVsBuiltInServiceInfoQueryService {
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("F9D0F5FF-C093-4E80-A886-57610D58A728")]
public interface Microsoft.VisualStudio.Shell.Interop.SVsCallBrowser {
}
[ComVisibleAttribute("False")]
[GuidAttribute("D7ECCE71-9C14-49A9-A93D-A5ED6286AC46")]
public interface Microsoft.VisualStudio.Shell.Interop.SVsClassView {
}
[GuidAttribute("6D10BA00-9465-4F93-8B1D-11E36EE1FF65")]
[ComVisibleAttribute("False")]
public interface Microsoft.VisualStudio.Shell.Interop.SVsCmdNameMapping {
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("66230816-AC33-49B5-97DB-0F6DF2A83624")]
public interface Microsoft.VisualStudio.Shell.Interop.SVsCodeDefView {
}
[ComVisibleAttribute("False")]
[GuidAttribute("F4936BE4-7AE0-4C97-9D82-51D219FC5D77")]
public interface Microsoft.VisualStudio.Shell.Interop.SVsCodeShareHandler {
}
[ComVisibleAttribute("False")]
[GuidAttribute("0660CD86-F3AB-4008-930D-BAE8B10FF8CA")]
public interface Microsoft.VisualStudio.Shell.Interop.SVsCommandWindow {
}
[GuidAttribute("E337F382-3CAB-44A5-AF0E-3DACA541C89A")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.Shell.Interop.SVsCommandWindowsCollection {
}
[GuidAttribute("E269CBA1-C9FB-45A8-91CA-EC8D3474FDD2")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.Shell.Interop.SVsCommonMessagePumpFactory {
}
[ComVisibleAttribute("False")]
[GuidAttribute("699D5E17-9B22-466b-ACFA-2E12CD64E249")]
public interface Microsoft.VisualStudio.Shell.Interop.SVsComplusLibrary {
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("DEBF6A60-A2CB-4059-8677-0067F046C4BC")]
public interface Microsoft.VisualStudio.Shell.Interop.SVsComponentModelHost {
}
[GuidAttribute("66899421-F497-4503-8C9D-ADAE290F2F27")]
[ComVisibleAttribute("False")]
public interface Microsoft.VisualStudio.Shell.Interop.SVsComponentSelectorDlg {
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("525D42EF-D7F6-412A-9D64-79E787E70E45")]
public interface Microsoft.VisualStudio.Shell.Interop.SVsComponentSelectorDlg2 {
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("8F435BAD-95A1-4032-8CD0-DC74F67CB106")]
public interface Microsoft.VisualStudio.Shell.Interop.SVsConfigurationManagerDlg {
}
[GuidAttribute("50B729AD-AC3B-451F-BE03-9EA167F5D637")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.Shell.Interop.SVsCreateAggregateProject {
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("8016834A-90E4-4E01-B24F-958DAA30B7D5")]
public interface Microsoft.VisualStudio.Shell.Interop.SVsDataObjectStringMapManager {
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("BA361A60-1C0E-40DB-BAD6-503413FC3AD2")]
public interface Microsoft.VisualStudio.Shell.Interop.SVsDataSourceFactory {
}
[ComVisibleAttribute("False")]
[GuidAttribute("ca647009-a436-4d08-ba0f-9027a97a818b")]
public interface Microsoft.VisualStudio.Shell.Interop.SVsDebuggableProtocol {
}
[GuidAttribute("A5412570-5FB9-11d1-A811-00A0C9110051")]
[ComVisibleAttribute("False")]
public interface Microsoft.VisualStudio.Shell.Interop.SVsDebugLaunch {
}
[GuidAttribute("4C1207A4-2B59-426B-8F31-980D0E7A427C")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.Shell.Interop.SVsDebugRemoteDiscoveryUI {
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("89291C82-99BC-4FA3-98C0-802EEB2FBD70")]
public interface Microsoft.VisualStudio.Shell.Interop.SVsDebugTargetSelectionService {
}
[GuidAttribute("1B31CCFD-1B75-4AD8-9581-51B27B150C27")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.Shell.Interop.SVsDesignTimeAssemblyResolution {
}
[GuidAttribute("9A3B199D-2294-4DA6-9B43-7A4EAFE31FA0")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.Shell.Interop.SVsDetermineWizardTrust {
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("77115E75-EF9E-4F30-92F2-3FE78BCAF6CF")]
public interface Microsoft.VisualStudio.Shell.Interop.SVsDifferenceService {
}
[GuidAttribute("B9A32C80-B14D-4AE3-A955-5CBC3E7FAB10")]
[ComVisibleAttribute("False")]
public interface Microsoft.VisualStudio.Shell.Interop.SVsDiscoveryService {
}
[ComVisibleAttribute("False")]
[GuidAttribute("30E5C390-C3E6-40AC-BD1D-7015B1B5F541")]
public interface Microsoft.VisualStudio.Shell.Interop.SVsEnumHierarchyItemsFactory {
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("599BCD9E-CAFA-43DF-AA03-129C0004C2BD")]
public interface Microsoft.VisualStudio.Shell.Interop.SVsErrorList {
}
[GuidAttribute("E36756DE-BB4F-4900-A7F0-E827BDBD2092")]
[ComVisibleAttribute("False")]
public interface Microsoft.VisualStudio.Shell.Interop.SVsExternalFilesManager {
}
[ComVisibleAttribute("False")]
[GuidAttribute("250E1E9A-D2FC-410f-99E4-1ABA5B390A9A")]
public interface Microsoft.VisualStudio.Shell.Interop.SVsFileChange {
}
[GuidAttribute("9bc72973-194a-4ea8-b4d5-afb0b0d0dcb1")]
[ComVisibleAttribute("False")]
public interface Microsoft.VisualStudio.Shell.Interop.SVsFileChangeEx {
}
[GuidAttribute("34D4713E-EB24-4746-938B-BE5640D03210")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.Shell.Interop.SVsFileMergeService {
}
[GuidAttribute("D93A191C-525A-43bc-ACFD-7EF494143CF4")]
[ComVisibleAttribute("False")]
public interface Microsoft.VisualStudio.Shell.Interop.SVsFilterAddProjectItemDlg {
}
[ComVisibleAttribute("False")]
[GuidAttribute("C00858CF-2E17-4323-9D79-0B0CFC39A92F")]
public interface Microsoft.VisualStudio.Shell.Interop.SVsFilterKeys {
}
[GuidAttribute("FB5F088F-1C86-4648-B01C-0A1C40840C51")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.Shell.Interop.SVsFontAndColorCacheManager {
}
[GuidAttribute("40BC7B1A-E625-4DA1-86B4-7660F3CCBB16")]
[ComVisibleAttribute("False")]
public interface Microsoft.VisualStudio.Shell.Interop.SVsFontAndColorStorage {
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("6F209208-4D8F-4412-B125-CD839B055D52")]
public interface Microsoft.VisualStudio.Shell.Interop.SVsFrameworkMultiTargeting {
}
[GuidAttribute("D4D51B8E-6ECF-4C42-A3E2-E0925E5115D6")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.Shell.Interop.SVsFrameworkRetargetingDlg {
}
[ComVisibleAttribute("False")]
[GuidAttribute("65482C72-DEFA-41B7-902C-11C091889C83")]
public interface Microsoft.VisualStudio.Shell.Interop.SVsGeneralOutputWindowPane {
}
[GuidAttribute("37470C6F-F752-4E39-8292-0D2B435E0D6F")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.Shell.Interop.SVsGlobalSearch {
}
[GuidAttribute("854D7AC0-BC3D-11D0-B421-00A0C90F9DC4")]
[ComVisibleAttribute("False")]
public interface Microsoft.VisualStudio.Shell.Interop.SVsHelpService {
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("1C917A11-5B6E-4752-9DEC-94B041A05745")]
public interface Microsoft.VisualStudio.Shell.Interop.SVsHierarchyManipulation {
}
[ComVisibleAttribute("False")]
[GuidAttribute("218D0424-9C53-4EA1-A679-A0AED59B0E4F")]
public interface Microsoft.VisualStudio.Shell.Interop.SVsHTMLConverter {
}
[GuidAttribute("95D652E5-D9B2-4EE6-BB09-BDBB1DCB5263")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.Shell.Interop.SVsHubService {
}
[GuidAttribute("ACC9EB93-CAD8-41DE-80DA-BD35CC5112AE")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.Shell.Interop.SVsImageService {
}
[ComVisibleAttribute("False")]
[GuidAttribute("DC7EDE19-3DD1-4e20-A7F1-110883ED996F")]
public interface Microsoft.VisualStudio.Shell.Interop.SVsIME {
}
[GuidAttribute("8E223E35-68A4-4744-9140-C575682A66B4")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.Shell.Interop.SVsInfoBarUIFactory {
}
[GuidAttribute("CA8A686A-0882-4E79-BCA3-AF3F3AB3EB8A")]
public interface Microsoft.VisualStudio.Shell.Interop.SVsIntegratedHelp {
}
[ComVisibleAttribute("False")]
[GuidAttribute("35A96FFB-7ED0-4D76-93CE-49BE83A9C91E")]
public interface Microsoft.VisualStudio.Shell.Interop.SVsIntelliMouseHandler {
}
[GuidAttribute("D380C630-E46F-40E1-B71D-F3D1682C5AA8")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.Shell.Interop.SVsIntellisenseEngine {
}
[GuidAttribute("5D13ECE7-AA1F-400F-B65D-FA2ABD4F1CD4")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.Shell.Interop.SVsIntellisenseProjectHost {
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("5CB6B09C-64F5-4579-8593-7720DAB2EF8D")]
public interface Microsoft.VisualStudio.Shell.Interop.SVsIntellisenseProjectManager {
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("74590F40-42EF-4DF4-B762-902B09884657")]
public interface Microsoft.VisualStudio.Shell.Interop.SVsInvalidateCachedCommandState {
}
[ComVisibleAttribute("False")]
[GuidAttribute("14439CDE-B6CF-4dd6-9615-67E8B3DF380D")]
public interface Microsoft.VisualStudio.Shell.Interop.SVsInvisibleEditorManager {
}
[ComVisibleAttribute("False")]
[GuidAttribute("EF16A8B0-41CF-11d1-84A4-00A0C9110055")]
public interface Microsoft.VisualStudio.Shell.Interop.SVsLaunchPad {
}
[ComVisibleAttribute("False")]
[GuidAttribute("c21c16a2-1612-4995-b445-f7b1c1657878")]
public interface Microsoft.VisualStudio.Shell.Interop.SVsLaunchPadFactory {
}
[GuidAttribute("9B7F0FB5-ADB7-402D-AADB-56511AE76E1A")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.Shell.Interop.SVsLongIdleManager {
}
[GuidAttribute("04BBF6A5-4697-11d2-890E-0060083196C6")]
[ComVisibleAttribute("False")]
public interface Microsoft.VisualStudio.Shell.Interop.SVsMacroRecorder {
}
[GuidAttribute("55ED27C1-4CE7-11d2-890F-0060083196C6")]
[ComVisibleAttribute("False")]
public interface Microsoft.VisualStudio.Shell.Interop.SVsMacros {
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("8ABE01DB-4CB1-4BE7-961F-D30B2EF6AEB1")]
public interface Microsoft.VisualStudio.Shell.Interop.SVsMainWindowDropTarget {
}
[ComVisibleAttribute("False")]
[GuidAttribute("73E59688-C7C4-4A85-AF64-A538754784C5")]
public interface Microsoft.VisualStudio.Shell.Interop.SVSMDCodeDomProvider {
}
[ComVisibleAttribute("False")]
[GuidAttribute("74946829-37A0-11D2-A273-00C04F8EF4FF")]
public interface Microsoft.VisualStudio.Shell.Interop.SVSMDDesignerService {
}
[ComVisibleAttribute("False")]
[GuidAttribute("74946810-37A0-11D2-A273-00C04F8EF4FF")]
public interface Microsoft.VisualStudio.Shell.Interop.SVSMDPropertyBrowser {
}
[ComVisibleAttribute("False")]
[GuidAttribute("3411DD99-2445-43C8-918E-99BFBFAF8292")]
public interface Microsoft.VisualStudio.Shell.Interop.SVSMDTypeResolutionService {
}
[GuidAttribute("EAF61568-F99B-4BC2-83C4-1DAD8FFAE9E5")]
[ComVisibleAttribute("False")]
public interface Microsoft.VisualStudio.Shell.Interop.SVsMenuEditor {
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("0D646997-5C08-4EF2-B709-B5C70F009A70")]
public interface Microsoft.VisualStudio.Shell.Interop.SVsMenuEventsService {
}
[GuidAttribute("9C074FDB-3D7D-4512-9604-72B3B0A5F609")]
[ComVisibleAttribute("False")]
public interface Microsoft.VisualStudio.Shell.Interop.SVsMonitorUserContext {
}
[GuidAttribute("BAAF2BB3-60EF-4439-A8C3-C09B5FAD7DBE")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.Shell.Interop.SVsMRUItemsStore {
}
[GuidAttribute("65C44EF9-16F8-4F36-BD73-F10335EC452E")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.Shell.Interop.SVsNavigateToService {
}
[ComVisibleAttribute("False")]
[GuidAttribute("0DF98187-FD9A-4669-8A56-727910A4866C")]
public interface Microsoft.VisualStudio.Shell.Interop.SVsObjBrowser {
}
[ComVisibleAttribute("False")]
[GuidAttribute("01E95D2E-2D20-4662-9DE7-4C1C35524260")]
public interface Microsoft.VisualStudio.Shell.Interop.SVsObjectManager {
}
[GuidAttribute("44A39218-81BD-4669-9DE0-F282A8BAEE34")]
[ComVisibleAttribute("False")]
public interface Microsoft.VisualStudio.Shell.Interop.SVsObjectSearch {
}
[GuidAttribute("A3761D3F-7C1E-4526-A8D5-1575631F09FC")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.Shell.Interop.SVsOpenProjectOrSolutionDlg {
}
[ComVisibleAttribute("False")]
[GuidAttribute("533FAD11-FE7F-41EE-A381-8B67792CD692")]
public interface Microsoft.VisualStudio.Shell.Interop.SVsOutputWindow {
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("B5477757-D697-4DFE-A8EF-04E2992F7D26")]
public interface Microsoft.VisualStudio.Shell.Interop.SVsPackageInfoQueryService {
}
[GuidAttribute("366704D5-85D0-4F7D-B267-90FA4DD37D5B")]
[ComVisibleAttribute("False")]
public interface Microsoft.VisualStudio.Shell.Interop.SVsParseCommandLine {
}
[GuidAttribute("89DB7429-F4A4-4F26-B832-2EB963A19AAA")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.Shell.Interop.SVsPathVariableResolver {
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("12143874-DA05-4D05-9F57-2D339C142220")]
public interface Microsoft.VisualStudio.Shell.Interop.SVsPreviewChangesService {
}
[ComVisibleAttribute("False")]
[InterfaceTypeAttribute("1")]
[GuidAttribute("8CC0CDE1-C16A-4749-99AF-6F7523C34A57")]
public interface Microsoft.VisualStudio.Shell.Interop.SVsProfferCommands {
}
[GuidAttribute("20945017-0113-4636-BBFC-0716071B5B84")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.Shell.Interop.SVsProfileDataManager {
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("EBEDC435-D4B7-4428-83EF-D59EAA18C7DF")]
public interface Microsoft.VisualStudio.Shell.Interop.SVsProfilerLauncher {
}
[GuidAttribute("3B0749FF-31E8-42D8-9CD2-F612148D7BDC")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.Shell.Interop.SVsProfilesManagerUI {
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("D8982A22-9CE1-45ED-963C-815854B1CFA2")]
public interface Microsoft.VisualStudio.Shell.Interop.SVsProjectMRU {
}
[ComVisibleAttribute("False")]
[GuidAttribute("BC039978-213E-4CA0-81C4-10EDF2AF2D66")]
public interface Microsoft.VisualStudio.Shell.Interop.SVsPropertyPageFrame {
}
[GuidAttribute("53544C4D-1984-11D3-A606-005004775AB1")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.Shell.Interop.SVsQueryEditQuerySave {
}
[GuidAttribute("B9CE963C-C8F4-48F9-8302-0C2D75E48D1E")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.Shell.Interop.SVsReferenceManager {
}
[GuidAttribute("6B25ED7D-E462-4BBA-B181-81D9F73FCD72")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.Shell.Interop.SVsRegisterDebugTargetProvider {
}
[GuidAttribute("78036A8D-A04C-43E4-8BC0-846E63AFA9A2")]
[ComVisibleAttribute("False")]
public interface Microsoft.VisualStudio.Shell.Interop.SVsRegisterEditors {
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("CB7C5B29-6782-47B7-AA13-21D07026D5E1")]
public interface Microsoft.VisualStudio.Shell.Interop.SVsRegisterNewDialogFilters {
}
[GuidAttribute("ED77D5EC-B0DE-4721-BDC6-38DCBE589B4C")]
[ComVisibleAttribute("False")]
public interface Microsoft.VisualStudio.Shell.Interop.SVsRegisterPriorityCommandTarget {
}
[ComVisibleAttribute("False")]
[GuidAttribute("F08400BB-0960-47f4-9E12-591DBF370546")]
public interface Microsoft.VisualStudio.Shell.Interop.SVsRegisterProjectTypes {
}
[GuidAttribute("E9706EF6-4F76-4C6E-8BF0-6E448550470B")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.Shell.Interop.SVsResourceManager {
}
[ComVisibleAttribute("False")]
[GuidAttribute("AD3B499C-281D-46bb-B43B-071413528C04")]
public interface Microsoft.VisualStudio.Shell.Interop.SVsResourceView {
}
[ComVisibleAttribute("False")]
[GuidAttribute("A928AA21-EA77-47ac-8A07-355206C94BDD")]
public interface Microsoft.VisualStudio.Shell.Interop.SVsRunningDocumentTable {
}
[ComVisibleAttribute("False")]
[InterfaceTypeAttribute("1")]
[GuidAttribute("53544C4D-1927-4320-B9DA-13D2CB3EA93B")]
public interface Microsoft.VisualStudio.Shell.Interop.SVsSccManager {
}
[GuidAttribute("53544C4D-104B-4D82-AD93-074816C1A0E5")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.Shell.Interop.SVsSccToolsOptions {
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("68FB1880-81F7-4939-8BBC-A957A1033345")]
public interface Microsoft.VisualStudio.Shell.Interop.SVsServiceInfoQueryService {
}
[GuidAttribute("C4DEEBEE-F4C1-4A09-B47C-EF17E83D269D")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.Shell.Interop.SVsSettingsManager {
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("7C1BD0D6-2086-46AB-8F07-B9335D0FE7D8")]
public interface Microsoft.VisualStudio.Shell.Interop.SVsSettingsReader {
}
[GuidAttribute("B03F88B8-F356-422B-997C-F55BD0668BDC")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.Shell.Interop.SVsSetupCompositionService {
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("DB598271-AD61-4BB2-80BA-729AF83F0EE3")]
public interface Microsoft.VisualStudio.Shell.Interop.SVsSharedProjectReferencesHelper {
}
[ComVisibleAttribute("False")]
[GuidAttribute("FD9DC8E3-2FFC-446D-8C50-99CA4A3D2D1C")]
public interface Microsoft.VisualStudio.Shell.Interop.SVsShell {
}
[ComVisibleAttribute("False")]
[GuidAttribute("7d960b16-7af8-11d0-8e5e-00a0c911005a")]
public interface Microsoft.VisualStudio.Shell.Interop.SVsShellDebugger {
}
[ComVisibleAttribute("False")]
[GuidAttribute("55AB9450-F9C7-4305-94E8-BEF12065338D")]
public interface Microsoft.VisualStudio.Shell.Interop.SVsShellMonitorSelection {
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("52F0DAB8-99A9-4AEA-A037-42581B7009D2")]
public interface Microsoft.VisualStudio.Shell.Interop.SVsSmartOpenScope {
}
[ComVisibleAttribute("False")]
[GuidAttribute("7F7CD0DB-91EF-49dc-9FA9-02D128515DD4")]
public interface Microsoft.VisualStudio.Shell.Interop.SVsSolution {
}
[ComVisibleAttribute("False")]
[GuidAttribute("93E969D6-1AA0-455F-B208-6ED3C82B5C58")]
public interface Microsoft.VisualStudio.Shell.Interop.SVsSolutionBuildManager {
}
[GuidAttribute("7F7CD0DB-91EF-49dc-9FA9-02D128515DD4")]
[ComVisibleAttribute("False")]
public interface Microsoft.VisualStudio.Shell.Interop.SVsSolutionObject {
}
[GuidAttribute("67A65088-52F3-4c47-B829-1B53A112E8DC")]
[ComVisibleAttribute("False")]
public interface Microsoft.VisualStudio.Shell.Interop.SVsSolutionPersistence {
}
[ComVisibleAttribute("False")]
[GuidAttribute("F1DDC2C2-DF76-4EBB-9DE8-48AD2557062C")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.Shell.Interop.SVsSourceControl {
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("8ED9966C-102F-45B0-8293-BB9F2463A6F2")]
public interface Microsoft.VisualStudio.Shell.Interop.SVsSQLCLRReferences {
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("A60FCE08-2F9C-4676-86F0-BCD4973FC702")]
public interface Microsoft.VisualStudio.Shell.Interop.SVsStartPageDownload {
}
[GuidAttribute("66B406DF-E206-47F6-A42B-CEE6B4201082")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.Shell.Interop.SVsStartupProjectsListService {
}
[ComVisibleAttribute("False")]
[GuidAttribute("DC0AF70E-5097-4DD3-9983-5A98C3A19942")]
public interface Microsoft.VisualStudio.Shell.Interop.SVsStatusbar {
}
[GuidAttribute("97BAE668-2CF2-4ED8-A019-D279E3D74C80")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.Shell.Interop.SVsStrongNameKeys {
}
[ComVisibleAttribute("False")]
[GuidAttribute("12B43F9F-8550-4FFA-850F-FE9D4D396C20")]
public interface Microsoft.VisualStudio.Shell.Interop.SVsStructuredFileIO {
}
[GuidAttribute("C67A5F0C-31C0-4316-9EF9-B451B30C829E")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.Shell.Interop.SVsSymbolicNavigationManager {
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("C269ADA8-95F9-4987-A247-151FB2DDFB34")]
public interface Microsoft.VisualStudio.Shell.Interop.SVsTargetFrameworkAssemblies {
}
[ComVisibleAttribute("False")]
[GuidAttribute("9D21BCC5-2C63-4A61-B055-2F3DF78EB30A")]
public interface Microsoft.VisualStudio.Shell.Interop.SVsTaskList {
}
[GuidAttribute("AB244925-40A8-4C5C-B0A5-717BB5D615B6")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.Shell.Interop.SVsTaskSchedulerService {
}
[GuidAttribute("2BD8D42F-5BC5-4B7F-AB50-FE9310F2FE53")]
[ComVisibleAttribute("False")]
public interface Microsoft.VisualStudio.Shell.Interop.SVsTextOut {
}
[GuidAttribute("1AC64571-85CF-4234-AA00-B57E907E326A")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.Shell.Interop.SVsThreadedWaitDialog {
}
[GuidAttribute("D2DDF9C8-FE3B-4DD9-9499-78D8EA277210")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.Shell.Interop.SVsThreadedWaitDialogFactory {
}
[GuidAttribute("7482E83D-842A-447C-8DDB-687F7052F7C7")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.Shell.Interop.SVsThreadPool {
}
[ComVisibleAttribute("False")]
[GuidAttribute("70E643E2-1673-4764-8A39-63CB1AEE0DC9")]
public interface Microsoft.VisualStudio.Shell.Interop.SVsToolbox {
}
[ComVisibleAttribute("False")]
[GuidAttribute("35222106-BB44-11D0-8C46-00C04FC2AAE2")]
public interface Microsoft.VisualStudio.Shell.Interop.SVsToolboxActiveXDataProvider {
}
[GuidAttribute("3AF9E499-91B8-4B54-BD1D-81F414A587C9")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.Shell.Interop.SVsToolboxDataProviderRegistry {
}
[GuidAttribute("376208E4-2679-4C9E-B3D5-929EB0F1A1F7")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.Shell.Interop.SVsToolsOptions {
}
[GuidAttribute("53544C4D-1639-11D3-A60D-005004775AB1")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.Shell.Interop.SVsTrackProjectDocuments {
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("530462A8-1ECB-4F7F-979E-A0237FEA12C3")]
public interface Microsoft.VisualStudio.Shell.Interop.SVsTrackProjectRetargeting {
}
[GuidAttribute("18291FD1-A1DD-4264-AEAD-6AFD616BF15A")]
[ComVisibleAttribute("False")]
public interface Microsoft.VisualStudio.Shell.Interop.SVsTrackSelectionEx {
}
[GuidAttribute("f215afcd-dc11-4dc5-99d4-9d0b6bc84957")]
[InterfaceTypeAttribute("1")]
[ExcludeFromProxyBuildAttribute]
public interface Microsoft.VisualStudio.Shell.Interop.SVsUIContextManager {
}
[GuidAttribute("63B07BA0-B399-4B71-AA69-0D97C097B69C")]
[InterfaceTypeAttribute("1")]
[ObsoleteAttribute("This service has been replaced by SVsUIContextManager.")]
public interface Microsoft.VisualStudio.Shell.Interop.SVsUIContextMonitor {
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("3A4AEC59-CF2A-42C9-8DA8-66E19D7C547D")]
public interface Microsoft.VisualStudio.Shell.Interop.SVsUIDataConverters {
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("570352BF-9B42-4C1F-B0C4-A8323D8F7BD3")]
public interface Microsoft.VisualStudio.Shell.Interop.SVsUIFactory {
}
[GuidAttribute("DF29D855-D0EC-4DA1-BCC3-42FA3A09B1CB")]
[ComVisibleAttribute("False")]
public interface Microsoft.VisualStudio.Shell.Interop.SVsUIHierWinClipboardHelper {
}
[GuidAttribute("B61FC35B-EEBF-4dec-BFF1-28A2DD43C38F")]
[ComVisibleAttribute("False")]
public interface Microsoft.VisualStudio.Shell.Interop.SVsUIShell {
}
[GuidAttribute("686C2AF1-A2E5-4f6c-B660-B63FD4F70C18")]
[ComVisibleAttribute("False")]
public interface Microsoft.VisualStudio.Shell.Interop.SVsUIShellDocumentWindowMgr {
}
[ComVisibleAttribute("False")]
[GuidAttribute("35299EEC-11EE-4518-9F08-401638D1D3BC")]
public interface Microsoft.VisualStudio.Shell.Interop.SVsUIShellOpenDocument {
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("DFB0136F-202E-40B5-872E-AE8289A45B59")]
public interface Microsoft.VisualStudio.Shell.Interop.SVsUpgradeLogger {
}
[GuidAttribute("A659F1B2-AD34-11d1-ABAD-0080C7B89C95")]
[ComVisibleAttribute("False")]
public interface Microsoft.VisualStudio.Shell.Interop.SVsVba {
}
[ComVisibleAttribute("False")]
[GuidAttribute("E8B06F51-6D01-11D2-AA7D-00C04F990343")]
public interface Microsoft.VisualStudio.Shell.Interop.SVsWebBrowsingService {
}
[ComVisibleAttribute("False")]
[GuidAttribute("E8B06F4C-6D01-11D2-AA7D-00C04F990343")]
public interface Microsoft.VisualStudio.Shell.Interop.SVsWebFavorites {
}
[GuidAttribute("9EC9BA55-B328-11D2-9A98-00C04F79EFC3")]
[ComVisibleAttribute("False")]
public interface Microsoft.VisualStudio.Shell.Interop.SVsWebPreview {
}
[GuidAttribute("6454F7CA-478C-4932-B007-ABB100905BD4")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.Shell.Interop.SVsWebProxy {
}
[ComVisibleAttribute("False")]
[GuidAttribute("E8B06F3D-6D01-11D2-AA7D-00C04F990343")]
public interface Microsoft.VisualStudio.Shell.Interop.SVsWebURLMRU {
}
[ComVisibleAttribute("False")]
[GuidAttribute("11138F8A-38C0-4436-B5A6-2F5EF2C3E242")]
public interface Microsoft.VisualStudio.Shell.Interop.SVsWindowFrame {
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("A4E62C4F-C462-43BF-A46B-7A6E9DB2E767")]
public interface Microsoft.VisualStudio.Shell.Interop.SVsWindowSearchHostFactory {
}
[ComVisibleAttribute("False")]
[GuidAttribute("D31E676B-D416-4da7-977E-20E00AAE1118")]
public interface Microsoft.VisualStudio.Shell.Interop.SVsXMLMemberIndexService {
}
[ComVisibleAttribute("False")]
[GuidAttribute("CCCECEE2-D225-4294-858E-2B8C3F7D84EA")]
public interface Microsoft.VisualStudio.Shell.Interop.SWebApplicationCtxSvc {
}
[ComVisibleAttribute("False")]
[GuidAttribute("05B4B4B7-6A9D-4A70-BDB1-04CBB26C9248")]
public interface Microsoft.VisualStudio.Shell.Interop.SWebFileCtxService {
}
public class Microsoft.VisualStudio.Shell.Interop.SYMBOL_DESCRIPTION_NODE : ValueType {
    [ComAliasNameAttribute("Microsoft.VisualStudio.OLE.Interop.DWORD")]
public UInt32 dwType;
    [ComAliasNameAttribute("Microsoft.VisualStudio.OLE.Interop.LPCOLESTR")]
public string pszName;
}
public abstract class Microsoft.VisualStudio.Shell.Interop.SymbolScopeGuids80 : object {
    public static string All;
    public static string OBSelectedComponents;
    public static string FSSelectedComponents;
    public static string Frameworks;
    public static string Solution;
}
public class Microsoft.VisualStudio.Shell.Interop.SYSTEMTIME : ValueType {
    [ComAliasNameAttribute("Microsoft.VisualStudio.OLE.Interop.WORD")]
public ushort wYear;
    [ComAliasNameAttribute("Microsoft.VisualStudio.OLE.Interop.WORD")]
public ushort wMonth;
    [ComAliasNameAttribute("Microsoft.VisualStudio.OLE.Interop.WORD")]
public ushort wDayOfWeek;
    [ComAliasNameAttribute("Microsoft.VisualStudio.OLE.Interop.WORD")]
public ushort wDay;
    [ComAliasNameAttribute("Microsoft.VisualStudio.OLE.Interop.WORD")]
public ushort wHour;
    [ComAliasNameAttribute("Microsoft.VisualStudio.OLE.Interop.WORD")]
public ushort wMinute;
    [ComAliasNameAttribute("Microsoft.VisualStudio.OLE.Interop.WORD")]
public ushort wSecond;
    [ComAliasNameAttribute("Microsoft.VisualStudio.OLE.Interop.WORD")]
public ushort wMilliseconds;
}
[FlagsAttribute]
public enum Microsoft.VisualStudio.Shell.Interop.tagCreateClassLibFlags : Enum {
    public int value__;
    public static tagCreateClassLibFlags CCL_UseAnchorWebConfig;
    public static tagCreateClassLibFlags CCL_CreateP2PReference;
}
[FlagsAttribute]
public enum Microsoft.VisualStudio.Shell.Interop.tagVSQEQSFlags : Enum {
    public int value__;
    public static tagVSQEQSFlags VSQEQS_FileInfo;
    public static tagVSQEQSFlags VSQEQS_AllowCheckout;
    public static tagVSQEQSFlags VSQEQS_NoSaveAs;
}
[FlagsAttribute]
public enum Microsoft.VisualStudio.Shell.Interop.tagVSQueryEditFlags : Enum {
    public int value__;
    public static tagVSQueryEditFlags QEF_AllowInMemoryEdits;
    public static tagVSQueryEditFlags QEF_ForceInMemoryEdits;
    public static tagVSQueryEditFlags QEF_DisallowInMemoryEdits;
    public static tagVSQueryEditFlags QEF_SilentMode;
    public static tagVSQueryEditFlags QEF_ImplicitEdit;
    public static tagVSQueryEditFlags QEF_ReportOnly;
    public static tagVSQueryEditFlags QEF_NoReload;
    public static tagVSQueryEditFlags QEF_ForceEdit_NoPrompting;
}
public enum Microsoft.VisualStudio.Shell.Interop.tagVSQueryEditResult : Enum {
    public int value__;
    public static tagVSQueryEditResult QER_EditOK;
    public static tagVSQueryEditResult QER_NoEdit_UserCanceled;
    public static tagVSQueryEditResult QER_EditNotOK;
}
[FlagsAttribute]
public enum Microsoft.VisualStudio.Shell.Interop.tagVSQueryEditResultFlags : Enum {
    public int value__;
    public static tagVSQueryEditResultFlags QER_MaybeCheckedout;
    public static tagVSQueryEditResultFlags QER_MaybeChanged;
    public static tagVSQueryEditResultFlags QER_InMemoryEdit;
    public static tagVSQueryEditResultFlags QER_InMemoryEditNotAllowed;
    public static tagVSQueryEditResultFlags QER_NoisyCheckoutRequired;
    public static tagVSQueryEditResultFlags QER_NoisyPromptRequired;
    public static tagVSQueryEditResultFlags QER_CheckoutCanceledOrFailed;
    public static tagVSQueryEditResultFlags QER_EditNotPossible;
    public static tagVSQueryEditResultFlags QER_ReadOnlyNotUnderScc;
    public static tagVSQueryEditResultFlags QER_ReadOnlyUnderScc;
}
[FlagsAttribute]
public enum Microsoft.VisualStudio.Shell.Interop.tagVSQueryEditResultFlags2 : Enum {
    public int value__;
    public static tagVSQueryEditResultFlags2 QER_Reloaded;
    public static tagVSQueryEditResultFlags2 QER_Changed;
}
[FlagsAttribute]
public enum Microsoft.VisualStudio.Shell.Interop.tagVSQuerySaveFlags : Enum {
    public int value__;
    public static tagVSQuerySaveFlags QSF_DefaultOperation;
    public static tagVSQuerySaveFlags QSF_SilentMode;
}
public enum Microsoft.VisualStudio.Shell.Interop.tagVSQuerySaveResult : Enum {
    public int value__;
    public static tagVSQuerySaveResult QSR_SaveOK;
    public static tagVSQuerySaveResult QSR_NoSave_UserCanceled;
    public static tagVSQuerySaveResult QSR_NoSave_Cancel;
    public static tagVSQuerySaveResult QSR_ForceSaveAs;
    public static tagVSQuerySaveResult QSR_NoSave_Continue;
    public static tagVSQuerySaveResult QSR_NoSave_NoisyPromptRequired;
}
[FlagsAttribute]
public enum Microsoft.VisualStudio.Shell.Interop.tagVSQuerySaveResultFlags : Enum {
    public int value__;
    public static tagVSQuerySaveResultFlags QSR_DefaultFlag;
    public static tagVSQuerySaveResultFlags QSR_Reloaded;
    public static tagVSQuerySaveResultFlags QSR_Changed;
}
[FlagsAttribute]
public enum Microsoft.VisualStudio.Shell.Interop.tagVsSccFilesFlags : Enum {
    public int value__;
    public static tagVsSccFilesFlags SFF_NoFlags;
    public static tagVsSccFilesFlags SFF_HasSpecialFiles;
}
[FlagsAttribute]
public enum Microsoft.VisualStudio.Shell.Interop.tagVsSccSpecialFilesFlags : Enum {
    public int value__;
    public static tagVsSccSpecialFilesFlags SSFF_NoFlags;
}
public abstract class Microsoft.VisualStudio.Shell.Interop.TaskListViews : object {
    public static string All;
    public static string UserTasks;
    public static string ShortcutTasks;
    public static string HTMLTasks;
    public static string CompilerTasks;
    public static string CommentTasks;
    public static string CurrentFileTasks;
    public static string CheckedTasks;
    public static string UncheckedTasks;
}
public abstract class Microsoft.VisualStudio.Shell.Interop.TaskProviderGuids : object {
    public static string Comments;
}
[ComConversionLossAttribute]
public class Microsoft.VisualStudio.Shell.Interop.TBXITEMINFO : ValueType {
    public string bstrText;
    [ComConversionLossAttribute]
public IntPtr hBmp;
    [ComAliasNameAttribute("Microsoft.VisualStudio.TextManager.Interop.COLORREF")]
public UInt32 clrTransparent;
    [ComAliasNameAttribute("Microsoft.VisualStudio.Shell.Interop.TBXITEMINFOFLAGS")]
public UInt32 dwFlags;
    [ComAliasNameAttribute("Microsoft.VisualStudio.OLE.Interop.INT")]
public int iImageIndex;
    [ComAliasNameAttribute("Microsoft.VisualStudio.OLE.Interop.INT")]
public int iImageWidth;
}
public static class Microsoft.VisualStudio.Shell.Interop.ToolboxMultitargetingFields : object {
    public static string TypeName;
    public static string AssemblyName;
    public static string Frameworks;
    public static string ItemProvider;
    public static string UseProjectTargetFrameworkVersionInTooltip;
}
public abstract class Microsoft.VisualStudio.Shell.Interop.ToolWindowGuids : object {
    public static string Toolbox;
    public static string PropertyBrowser;
    public static string SolutionExplorer;
    public static string Outputwindow;
    public static string DocOutline;
    public static string TaskList;
    public static string ServerExplorer;
    public static string MacroExplorer;
    public static string ContextWindow;
    public static string ClassView;
    public static string ResourceView;
    public static string ObjectSearchWindow;
    public static string CommandWindow;
    public static string ObjectSearchResultsWindow;
    public static string ObjectBrowser;
    public static string BrowserDoc;
    public static string FindReplace;
    public static string FindAdvanced;
    public static string FindResults1;
    public static string FindResults2;
}
public abstract class Microsoft.VisualStudio.Shell.Interop.ToolWindowGuids80 : object {
    public static string Autos;
    public static string BookmarkWindow;
    public static string Breakpoints;
    public static string BrowserDoc;
    public static string CallBrowserWindow;
    public static string CallBrowserSecondaryWindow;
    public static string CallStack;
    public static string ClassDetails;
    public static string ClassView;
    public static string CodedefinitionWindow;
    public static string CommandWindow;
    public static string ConsoleIO;
    public static string DataSourceWindow;
    public static string DefinitionWindow;
    public static string Disassembly;
    public static string DocumentOutline;
    public static string ContextWindow;
    public static string ErrorList;
    public static string Find1;
    public static string Find2;
    public static string FindInFiles;
    public static string FindAdvanced;
    public static string ObjectSearchResultsWindow;
    public static string ObjectSearchWindow;
    public static string FindReplace;
    public static string HelpFavorites;
    public static string HelpHowDoI;
    public static string Helpindex;
    public static string HelpIndexResults;
    public static string HelpSearch;
    public static string ImmediateWindow;
    public static string IVSMDPropertyBrowser;
    public static string LocalChanges;
    public static string Locals;
    public static string MacroExplorer;
    public static string Memory;
    public static string Modules;
    public static string ObjectBrowser;
    public static string ObjectTestBench;
    public static string Outputwindow;
    public static string PortDetails;
    public static string Processes;
    public static string PropertiesWindow;
    public static string PropertySheetManager;
    public static string Registers;
    public static string ResourceView;
    public static string RunningDocuments;
    public static string SdmDesignerTransactions;
    public static string ServerExplorer;
    public static string SettingsandConstraints;
    public static string SolutionExplorer;
    public static string StartPage;
    public static string StyleOrganizerToolWindow;
    public static string SystemView;
    public static string Tableofcontents;
    public static string TaskList;
    public static string Threads;
    public static string Toolbox;
    public static string TrinityDataWindow;
    public static string UAMSynchronizations;
    public static string VCColorPalette;
    public static string VCPropertyManager;
    public static string Watch;
    public static string WebBrowserPreviewWindow;
    public static string WebBrowserWindow;
}
public abstract class Microsoft.VisualStudio.Shell.Interop.UIContextGuids : object {
    public static string SolutionBuilding;
    public static string Debugging;
    public static string Dragging;
    public static string FullScreenMode;
    public static string DesignMode;
    public static string NoSolution;
    public static string SolutionExists;
    public static string EmptySolution;
    public static string SolutionHasSingleProject;
    public static string SolutionHasMultipleProjects;
    public static string CodeWindow;
}
public abstract class Microsoft.VisualStudio.Shell.Interop.UIContextGuids80 : object {
    public static string SolutionBuilding;
    public static string Debugging;
    public static string Dragging;
    public static string FullScreenMode;
    public static string DesignMode;
    public static string NoSolution;
    public static string SolutionExists;
    public static string EmptySolution;
    public static string SolutionHasSingleProject;
    public static string SolutionHasMultipleProjects;
    public static string CodeWindow;
    public static string NotBuildingAndNotDebugging;
    public static string SolutionOrProjectUpgrading;
    public static string DataSourceWindowSupported;
    public static string DataSourceWindowAutoVisible;
    public static string WindowsFormsDesigner;
    public static string ToolboxInitialized;
    public static string SolutionExistsAndNotBuildingAndNotDebugging;
}
public enum Microsoft.VisualStudio.Shell.Interop.UIContextState : Enum {
    public int value__;
    public static UIContextState NeverSet;
    public static UIContextState Active;
    public static UIContextState Inactive;
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("30315F71-BB05-436B-8CC1-6A62B368C842")]
public interface Microsoft.VisualStudio.Shell.Interop.UiContextSynchronousSolutionOperation {
}
public class Microsoft.VisualStudio.Shell.Interop.UIDLGLOGFONT : ValueType {
    [ComAliasNameAttribute("Microsoft.VisualStudio.OLE.Interop.LONG")]
public int lfHeight;
    [ComAliasNameAttribute("Microsoft.VisualStudio.OLE.Interop.LONG")]
public int lfWidth;
    [ComAliasNameAttribute("Microsoft.VisualStudio.OLE.Interop.LONG")]
public int lfEscapement;
    [ComAliasNameAttribute("Microsoft.VisualStudio.OLE.Interop.LONG")]
public int lfOrientation;
    [ComAliasNameAttribute("Microsoft.VisualStudio.OLE.Interop.LONG")]
public int lfWeight;
    [ComAliasNameAttribute("Microsoft.VisualStudio.TextManager.Interop.BYTE")]
public byte lfItalic;
    [ComAliasNameAttribute("Microsoft.VisualStudio.TextManager.Interop.BYTE")]
public byte lfUnderline;
    [ComAliasNameAttribute("Microsoft.VisualStudio.TextManager.Interop.BYTE")]
public byte lfStrikeOut;
    [ComAliasNameAttribute("Microsoft.VisualStudio.TextManager.Interop.BYTE")]
public byte lfCharSet;
    [ComAliasNameAttribute("Microsoft.VisualStudio.TextManager.Interop.BYTE")]
public byte lfOutPrecision;
    [ComAliasNameAttribute("Microsoft.VisualStudio.TextManager.Interop.BYTE")]
public byte lfClipPrecision;
    [ComAliasNameAttribute("Microsoft.VisualStudio.TextManager.Interop.BYTE")]
public byte lfQuality;
    [ComAliasNameAttribute("Microsoft.VisualStudio.TextManager.Interop.BYTE")]
public byte lfPitchAndFamily;
    public UInt16[] lfFaceName;
}
public enum Microsoft.VisualStudio.Shell.Interop.VHS_COMMAND : Enum {
    public int value__;
    public static VHS_COMMAND VHS_Default;
    public static VHS_COMMAND VHS_NoErrorMessages;
    public static VHS_COMMAND VHS_UseBrowser;
    public static VHS_COMMAND VHS_UseHelp;
    public static VHS_COMMAND VHS_Localize;
    public static VHS_COMMAND VHS_OutsideCollectionSpace;
}
public enum Microsoft.VisualStudio.Shell.Interop.VSADDCOMPOPERATION : Enum {
    public int value__;
    public static VSADDCOMPOPERATION VSADDCOMPOP_ADD;
}
public enum Microsoft.VisualStudio.Shell.Interop.VSADDCOMPRESULT : Enum {
    public int value__;
    public static VSADDCOMPRESULT ADDCOMPRESULT_Success;
    public static VSADDCOMPRESULT ADDCOMPRESULT_Failure;
    public static VSADDCOMPRESULT ADDCOMPRESULT_Cancel;
}
[FlagsAttribute]
public enum Microsoft.VisualStudio.Shell.Interop.VSADDDIRECTORYFLAGS : Enum {
    public int value__;
    public static VSADDDIRECTORYFLAGS VSADDDIRECTORYFLAGS_NoFlags;
    public static VSADDDIRECTORYFLAGS VSADDDIRECTORYFLAGS_AddToSourceControlDoneExternally;
}
[FlagsAttribute]
public enum Microsoft.VisualStudio.Shell.Interop.VSADDFILEFLAGS : Enum {
    public int value__;
    public static VSADDFILEFLAGS VSADDFILEFLAGS_NoFlags;
    public static VSADDFILEFLAGS VSADDFILEFLAGS_AddToSourceControlDoneExternally;
    public static VSADDFILEFLAGS VSADDFILEFLAGS_IsSpecialFile;
    public static VSADDFILEFLAGS VSADDFILEFLAGS_IsNestedProjectFile;
}
public enum Microsoft.VisualStudio.Shell.Interop.VSADDITEMOPERATION : Enum {
    public int value__;
    public static VSADDITEMOPERATION VSADDITEMOP_OPENFILE;
    public static VSADDITEMOPERATION VSADDITEMOP_CLONEFILE;
    public static VSADDITEMOPERATION VSADDITEMOP_RUNWIZARD;
    public static VSADDITEMOPERATION VSADDITEMOP_LINKTOFILE;
}
public enum Microsoft.VisualStudio.Shell.Interop.VSADDRESULT : Enum {
    public int value__;
    public static VSADDRESULT ADDRESULT_Success;
    public static VSADDRESULT ADDRESULT_Failure;
    public static VSADDRESULT ADDRESULT_Cancel;
}
public class Microsoft.VisualStudio.Shell.Interop.VsAppPackageLaunchInfo : ValueType {
    public string PackageMoniker;
    public string AppUserModelID;
    public VsAppPackagePlatform AppPlatform;
}
public enum Microsoft.VisualStudio.Shell.Interop.VsAppPackagePlatform : Enum {
    public int value__;
    public static VsAppPackagePlatform APPPLAT_WindowsAppx;
    public static VsAppPackagePlatform APPPLAT_WindowsPhoneXAP;
}
public class Microsoft.VisualStudio.Shell.Interop.VSArrangeWindowInfo : ValueType {
    public IntPtr hwnd;
    [ComAliasNameAttribute("Microsoft.VisualStudio.Shell.Interop.VSArrangeWindowFlags")]
public UInt32 flags;
}
public class Microsoft.VisualStudio.Shell.Interop.VsBootstrapperPackageInfo : ValueType {
    [ComAliasNameAttribute("OLE.LPCOLESTR")]
public string PackageName;
    [ComAliasNameAttribute("OLE.DWORD")]
public UInt32 MinimumUapMajorVersion;
    [ComAliasNameAttribute("OLE.DWORD")]
public UInt32 MinimumUapMinorVersion;
}
[ComConversionLossAttribute]
public class Microsoft.VisualStudio.Shell.Interop.VSBROWSECONTAINER : ValueType {
    [ComConversionLossAttribute]
public IntPtr pguidLib;
    [ComAliasNameAttribute("Microsoft.VisualStudio.OLE.Interop.LPCWSTR")]
public string szName;
}
[ComConversionLossAttribute]
public class Microsoft.VisualStudio.Shell.Interop.VSBROWSEINFOW : ValueType {
    [ComAliasNameAttribute("Microsoft.VisualStudio.OLE.Interop.DWORD")]
public UInt32 lStructSize;
    [ComConversionLossAttribute]
public IntPtr hwndOwner;
    [ComAliasNameAttribute("Microsoft.VisualStudio.OLE.Interop.LPCWSTR")]
public string pwzDlgTitle;
    public IntPtr pwzDirName;
    [ComAliasNameAttribute("Microsoft.VisualStudio.OLE.Interop.DWORD")]
public UInt32 nMaxDirName;
    [ComAliasNameAttribute("Microsoft.VisualStudio.OLE.Interop.LPCWSTR")]
public string pwzInitialDir;
    [ComAliasNameAttribute("Microsoft.VisualStudio.OLE.Interop.DWORD")]
public UInt32 dwHelpTopic;
    [ComAliasNameAttribute("Microsoft.VisualStudio.OLE.Interop.DWORD")]
public UInt32 dwFlags;
}
public enum Microsoft.VisualStudio.Shell.Interop.VSBUILDMANAGERRESOURCE : Enum {
    public int value__;
    public static VSBUILDMANAGERRESOURCE VSBUILDMANAGERRESOURCE_DESIGNTIME;
    public static VSBUILDMANAGERRESOURCE VSBUILDMANAGERRESOURCE_UITHREAD;
}
public enum Microsoft.VisualStudio.Shell.Interop.VSCMDNAMEOPTS : Enum {
    public int value__;
    public static VSCMDNAMEOPTS CNO_GETENU;
    public static VSCMDNAMEOPTS CNO_GETLOC;
    public static VSCMDNAMEOPTS CNO_GETBOTH;
}
public class Microsoft.VisualStudio.Shell.Interop.VSCommandId : ValueType {
    public Guid CommandSet;
    public UInt32 CommandId;
}
public class Microsoft.VisualStudio.Shell.Interop.VSCOMPONENTSELECTORDATA : ValueType {
    [ComAliasNameAttribute("Microsoft.VisualStudio.OLE.Interop.DWORD")]
public UInt32 dwSize;
    [ComAliasNameAttribute("Microsoft.VisualStudio.Shell.Interop.VSCOMPONENTTYPE")]
public VSCOMPONENTTYPE type;
    public string bstrTitle;
    public string bstrFile;
    [ComAliasNameAttribute("Microsoft.VisualStudio.OLE.Interop.WORD")]
public ushort wFileMajorVersion;
    [ComAliasNameAttribute("Microsoft.VisualStudio.OLE.Interop.WORD")]
public ushort wFileMinorVersion;
    [ComAliasNameAttribute("Microsoft.VisualStudio.OLE.Interop.WORD")]
public ushort wFileRevisionNumber;
    [ComAliasNameAttribute("Microsoft.VisualStudio.OLE.Interop.WORD")]
public ushort wFileBuildNumber;
    public Guid guidTypeLibrary;
    [ComAliasNameAttribute("Microsoft.VisualStudio.OLE.Interop.WORD")]
public ushort wTypeLibraryMajorVersion;
    [ComAliasNameAttribute("Microsoft.VisualStudio.OLE.Interop.WORD")]
public ushort wTypeLibraryMinorVersion;
    [ComAliasNameAttribute("Microsoft.VisualStudio.OLE.Interop.LCID")]
public UInt32 lcidTypeLibrary;
    public string bstrProjRef;
    [ComAliasNameAttribute("Microsoft.VisualStudio.OLE.Interop.LONG_PTR")]
public int lCustom;
}
public class Microsoft.VisualStudio.Shell.Interop.VSCOMPONENTSELECTORTABINIT : ValueType {
    [ComAliasNameAttribute("Microsoft.VisualStudio.OLE.Interop.DWORD")]
public UInt32 dwSize;
    public Guid guidTab;
    public object varTabInitInfo;
}
public enum Microsoft.VisualStudio.Shell.Interop.VSCOMPONENTTYPE : Enum {
    public int value__;
    public static VSCOMPONENTTYPE VSCOMPONENTTYPE_File;
    public static VSCOMPONENTTYPE VSCOMPONENTTYPE_ComPlus;
    public static VSCOMPONENTTYPE VSCOMPONENTTYPE_Com2;
    public static VSCOMPONENTTYPE VSCOMPONENTTYPE_Project;
    public static VSCOMPONENTTYPE VSCOMPONENTTYPE_Custom;
    public static VSCOMPONENTTYPE VSCOMPONENTTYPE_Path;
}
[ComConversionLossAttribute]
public class Microsoft.VisualStudio.Shell.Interop.VsDebugEngineFilter : ValueType {
    [ComAliasNameAttribute("Microsoft.VisualStudio.OLE.Interop.DWORD")]
public UInt32 dwDebugEngineCount;
    [ComConversionLossAttribute]
public IntPtr pDebugEngines;
}
[ComConversionLossAttribute]
public class Microsoft.VisualStudio.Shell.Interop.VsDebugStartupInfo : ValueType {
    [ComAliasNameAttribute("OLE.LPCWSTR")]
public string lpReserved;
    [ComAliasNameAttribute("OLE.LPCWSTR")]
public string lpDesktop;
    [ComAliasNameAttribute("OLE.LPCWSTR")]
public string lpTitle;
    [ComAliasNameAttribute("OLE.DWORD")]
public UInt32 dwCreationFlags;
    [ComAliasNameAttribute("OLE.DWORD")]
public UInt32 dwX;
    [ComAliasNameAttribute("OLE.DWORD")]
public UInt32 dwY;
    [ComAliasNameAttribute("OLE.DWORD")]
public UInt32 dwXSize;
    [ComAliasNameAttribute("OLE.DWORD")]
public UInt32 dwYSize;
    [ComAliasNameAttribute("OLE.DWORD")]
public UInt32 dwXCountChars;
    [ComAliasNameAttribute("OLE.DWORD")]
public UInt32 dwYCountChars;
    [ComAliasNameAttribute("OLE.DWORD")]
public UInt32 dwFillAttribute;
    [ComAliasNameAttribute("Microsoft.VisualStudio.Shell.Interop.DSI_FLAGS")]
public UInt32 flags;
    [ComAliasNameAttribute("OLE.WORD")]
public ushort wShowWindow;
    [ComAliasNameAttribute("OLE.WORD")]
public ushort cbReserved2;
    [ComAliasNameAttribute("TextManager.BYTE")]
[ComConversionLossAttribute]
public IntPtr lpReserved2;
    [ComAliasNameAttribute("OLE.ULONG_PTR")]
public IntPtr hStdInput;
    [ComAliasNameAttribute("OLE.ULONG_PTR")]
public IntPtr hStdOutput;
    [ComAliasNameAttribute("OLE.ULONG_PTR")]
public IntPtr hStdError;
}
[ComConversionLossAttribute]
public class Microsoft.VisualStudio.Shell.Interop.VsDebugTargetInfo : ValueType {
    [ComAliasNameAttribute("Microsoft.VisualStudio.OLE.Interop.DWORD")]
public UInt32 cbSize;
    public string bstrRemoteMachine;
    [ComAliasNameAttribute("Microsoft.VisualStudio.Shell.Interop.DEBUG_LAUNCH_OPERATION")]
public DEBUG_LAUNCH_OPERATION dlo;
    public string bstrMdmRegisteredName;
    public Guid clsidCustom;
    public string bstrExe;
    public string bstrArg;
    public string bstrCurDir;
    public string bstrEnv;
    public Guid clsidPortSupplier;
    public string bstrPortName;
    public string bstrOptions;
    [ComAliasNameAttribute("Microsoft.VisualStudio.Shell.Interop.VSDBGLAUNCHFLAGS")]
public UInt32 grfLaunch;
    [ComConversionLossAttribute]
public IntPtr hStdInput;
    [ComConversionLossAttribute]
public IntPtr hStdOutput;
    [ComConversionLossAttribute]
public IntPtr hStdError;
    [ComAliasNameAttribute("Microsoft.VisualStudio.OLE.Interop.DWORD")]
public UInt32 dwClsidCount;
    [ComConversionLossAttribute]
public IntPtr pClsidList;
    [ComAliasNameAttribute("Microsoft.VisualStudio.OLE.Interop.BOOL")]
public int fSendStdoutToOutputWindow;
}
[ComConversionLossAttribute]
public class Microsoft.VisualStudio.Shell.Interop.VsDebugTargetInfo2 : ValueType {
    [ComAliasNameAttribute("Microsoft.VisualStudio.OLE.Interop.DWORD")]
public UInt32 cbSize;
    [ComAliasNameAttribute("Microsoft.VisualStudio.Shell.Interop.DEBUG_LAUNCH_OPERATION2")]
public UInt32 dlo;
    [ComAliasNameAttribute("Microsoft.VisualStudio.Shell.Interop.VSDBGLAUNCHFLAGS2")]
public UInt32 LaunchFlags;
    public string bstrRemoteMachine;
    public string bstrExe;
    public string bstrArg;
    public string bstrCurDir;
    public string bstrEnv;
    public Guid guidLaunchDebugEngine;
    [ComAliasNameAttribute("Microsoft.VisualStudio.OLE.Interop.DWORD")]
public UInt32 dwDebugEngineCount;
    [ComConversionLossAttribute]
public IntPtr pDebugEngines;
    public Guid guidPortSupplier;
    public string bstrPortName;
    public string bstrOptions;
    [ComAliasNameAttribute("Microsoft.VisualStudio.OLE.Interop.ULONG_PTR")]
public IntPtr hStdInput;
    [ComAliasNameAttribute("Microsoft.VisualStudio.OLE.Interop.ULONG_PTR")]
public IntPtr hStdOutput;
    [ComAliasNameAttribute("Microsoft.VisualStudio.OLE.Interop.ULONG_PTR")]
public IntPtr hStdError;
    [ComAliasNameAttribute("Microsoft.VisualStudio.OLE.Interop.BOOL")]
public bool fSendToOutputWindow;
    [ComAliasNameAttribute("Microsoft.VisualStudio.OLE.Interop.DWORD")]
public UInt32 dwProcessId;
    public object pUnknown;
    public Guid guidProcessLanguage;
    [ComAliasNameAttribute("Microsoft.VisualStudio.OLE.Interop.DWORD")]
public UInt32 dwReserved;
}
[ComConversionLossAttribute]
public class Microsoft.VisualStudio.Shell.Interop.VsDebugTargetInfo3 : ValueType {
    [ComAliasNameAttribute("Microsoft.VisualStudio.Shell.Interop.DEBUG_LAUNCH_OPERATION3")]
public UInt32 dlo;
    [ComAliasNameAttribute("Microsoft.VisualStudio.Shell.Interop.VSDBGLAUNCHFLAGS5")]
public UInt32 LaunchFlags;
    public string bstrRemoteMachine;
    public string bstrExe;
    public string bstrArg;
    public string bstrCurDir;
    public string bstrEnv;
    [ComAliasNameAttribute("OLE.DWORD")]
public UInt32 dwProcessId;
    [ComAliasNameAttribute("Microsoft.VisualStudio.Shell.Interop.VsDebugStartupInfo")]
[ComConversionLossAttribute]
public IntPtr pStartupInfo;
    public Guid guidLaunchDebugEngine;
    [ComAliasNameAttribute("OLE.DWORD")]
public UInt32 dwDebugEngineCount;
    [ComConversionLossAttribute]
public IntPtr pDebugEngines;
    public Guid guidPortSupplier;
    public string bstrPortName;
    public string bstrOptions;
    [ComAliasNameAttribute("Microsoft.VisualStudio.OLE.Interop.BOOL")]
public bool fSendToOutputWindow;
    public object pUnknown;
    public Guid guidProcessLanguage;
}
[ComConversionLossAttribute]
public class Microsoft.VisualStudio.Shell.Interop.VsDebugTargetInfo4 : ValueType {
    [ComAliasNameAttribute("Microsoft.VisualStudio.Shell.Interop.DEBUG_LAUNCH_OPERATION4")]
public UInt32 dlo;
    [ComAliasNameAttribute("Microsoft.VisualStudio.Shell.Interop.VSDBGLAUNCHFLAGS6")]
public UInt32 LaunchFlags;
    public string bstrRemoteMachine;
    public string bstrExe;
    public string bstrArg;
    public string bstrCurDir;
    public string bstrEnv;
    [ComAliasNameAttribute("OLE.DWORD")]
public UInt32 dwProcessId;
    [ComAliasNameAttribute("VsShell.VsDebugStartupInfo")]
[ComConversionLossAttribute]
public IntPtr pStartupInfo;
    public Guid guidLaunchDebugEngine;
    [ComAliasNameAttribute("OLE.DWORD")]
public UInt32 dwDebugEngineCount;
    [ComConversionLossAttribute]
public IntPtr pDebugEngines;
    public Guid guidPortSupplier;
    public string bstrPortName;
    public string bstrOptions;
    [ComAliasNameAttribute("Microsoft.VisualStudio.OLE.Interop.BOOL")]
public bool fSendToOutputWindow;
    public object pUnknown;
    public Guid guidProcessLanguage;
    [ComAliasNameAttribute("Microsoft.VisualStudio.Shell.Interop.VsAppPackageLaunchInfo")]
public VsAppPackageLaunchInfo AppPackageLaunchInfo;
    public IVsHierarchy project;
}
public class Microsoft.VisualStudio.Shell.Interop.VsDebugTargetProcessInfo : ValueType {
    [ComAliasNameAttribute("OLE.DWORD")]
public UInt32 dwProcessId;
    [ComAliasNameAttribute("OLE.FILETIME")]
public FILETIME creationTime;
}
public class Microsoft.VisualStudio.Shell.Interop.VSDEFAULTPREVIEWER : ValueType {
    public string bstrDefBrowserPath;
    public string bstrDefBrowserDisplayName;
    [ComAliasNameAttribute("Microsoft.VisualStudio.OLE.Interop.BOOL")]
public int fIsInternalBrowser;
    [ComAliasNameAttribute("Microsoft.VisualStudio.OLE.Interop.BOOL")]
public int fIsSystemBrowser;
    [ComAliasNameAttribute("Microsoft.VisualStudio.Shell.Interop.VSPREVIEWRESOLUTION")]
public VSPREVIEWRESOLUTION defRes;
}
public enum Microsoft.VisualStudio.Shell.Interop.VSDESIGNER_FUNCTIONVISIBILITY : Enum {
    public int value__;
    public static VSDESIGNER_FUNCTIONVISIBILITY VSDFV_Private;
    public static VSDESIGNER_FUNCTIONVISIBILITY VSDFV_Friend;
    public static VSDESIGNER_FUNCTIONVISIBILITY VSDFV_Public;
}
public enum Microsoft.VisualStudio.Shell.Interop.VSDESIGNER_VARIABLENAMING : Enum {
    public int value__;
    public static VSDESIGNER_VARIABLENAMING VSDVN_Camel;
    public static VSDESIGNER_VARIABLENAMING VSDVN_VB;
}
public enum Microsoft.VisualStudio.Shell.Interop.VSDOCUMENTPRIORITY : Enum {
    public int value__;
    public static VSDOCUMENTPRIORITY DP_Intrinsic;
    public static VSDOCUMENTPRIORITY DP_Standard;
    public static VSDOCUMENTPRIORITY DP_NonMember;
    public static VSDOCUMENTPRIORITY DP_CanAddAsNonMember;
    public static VSDOCUMENTPRIORITY DP_External;
    public static VSDOCUMENTPRIORITY DP_CanAddAsExternal;
    public static VSDOCUMENTPRIORITY DP_Unsupported;
}
public class Microsoft.VisualStudio.Shell.Interop.VSDRAWITEMSTRUCT : ValueType {
    [ComAliasNameAttribute("Microsoft.VisualStudio.OLE.Interop.UINT")]
public UInt32 CtlType;
    [ComAliasNameAttribute("Microsoft.VisualStudio.OLE.Interop.UINT")]
public UInt32 CtlID;
    [ComAliasNameAttribute("Microsoft.VisualStudio.OLE.Interop.UINT")]
public UInt32 itemid;
    [ComAliasNameAttribute("Microsoft.VisualStudio.OLE.Interop.UINT")]
public UInt32 itemAction;
    [ComAliasNameAttribute("Microsoft.VisualStudio.OLE.Interop.UINT")]
public UInt32 itemState;
    public IntPtr hwndItem;
    public IntPtr hdc;
    [ComAliasNameAttribute("Microsoft.VisualStudio.OLE.Interop.RECT")]
public RECT rcItem;
    [ComAliasNameAttribute("Microsoft.VisualStudio.OLE.Interop.ULONG_PTR")]
public IntPtr itemData;
}
public enum Microsoft.VisualStudio.Shell.Interop.VSEDITORPRIORITY : Enum {
    public int value__;
    public static VSEDITORPRIORITY EDTPRI_IntrinsicEditor;
    public static VSEDITORPRIORITY EDTPRI_TextEditor;
    public static VSEDITORPRIORITY EDTPRI_TextEditorCodePage;
    public static VSEDITORPRIORITY EDTPRI_InplaceEditor;
    public static VSEDITORPRIORITY EDTPRI_OutsideEditor;
    public static VSEDITORPRIORITY EDTPRI_BinaryEditor;
}
public enum Microsoft.VisualStudio.Shell.Interop.VSErrorCodes : Enum {
    public int value__;
    public static VSErrorCodes DISCOVERY_E_PROXYSETTINGINVALID;
    public static VSErrorCodes JPM_E_LOCKINGNOTSUPPORTED;
    public static VSErrorCodes VS_E_PROJECTALREADYEXISTS;
    public static VSErrorCodes VS_E_PACKAGENOTLOADED;
    public static VSErrorCodes VS_E_PROJECTNOTLOADED;
    public static VSErrorCodes VS_E_SOLUTIONNOTOPEN;
    public static VSErrorCodes VS_E_SOLUTIONALREADYOPEN;
    public static VSErrorCodes VS_E_PROJECTMIGRATIONFAILED;
    public static VSErrorCodes VS_E_INCOMPATIBLEDOCDATA;
    public static VSErrorCodes VS_E_UNSUPPORTEDFORMAT;
    public static VSErrorCodes VS_E_WIZARDBACKBUTTONPRESS;
    public static VSErrorCodes VS_S_PROJECTFORWARDED;
    public static VSErrorCodes VS_S_TBXMARKER;
}
public enum Microsoft.VisualStudio.Shell.Interop.VSErrorCodes80 : Enum {
    public int value__;
    public static VSErrorCodes80 VS_E_MIGRATIONREQUIRESRELOAD;
    public static VSErrorCodes80 VS_E_SYNCHRONOUSOPENREQUIRED;
    public static VSErrorCodes80 VS_E_VSSETTINGS_INVALIDVERSION;
    public static VSErrorCodes80 VS_E_DOCUMENTOPENNOTTRUSTED;
}
public enum Microsoft.VisualStudio.Shell.Interop.VSEXTENDSHIERARCHY : Enum {
    public int value__;
    public static VSEXTENDSHIERARCHY EH_NONE;
    public static VSEXTENDSHIERARCHY EH_ROOT;
    public static VSEXTENDSHIERARCHY EH_ITEM;
}
[FlagsAttribute]
public enum Microsoft.VisualStudio.Shell.Interop.VSFILTERKEYSFLAGS : Enum {
    public int value__;
    public static VSFILTERKEYSFLAGS VSFILTERKEYS_DODEFAULT;
    public static VSFILTERKEYSFLAGS VSFILTERKEYS_HANDLED;
    public static VSFILTERKEYSFLAGS VSFILTERKEYS_TRANSLATE;
}
public enum Microsoft.VisualStudio.Shell.Interop.VSFRAMEMODE : Enum {
    public int value__;
    public static VSFRAMEMODE VSFM_Dock;
    public static VSFRAMEMODE VSFM_Float;
    public static VSFRAMEMODE VSFM_MdiChild;
    public static VSFRAMEMODE VSFM_FloatOnly;
}
public enum Microsoft.VisualStudio.Shell.Interop.VSFRAMEMODE2 : Enum {
    public int value__;
    public static VSFRAMEMODE2 VSFM_AutoHide;
}
public enum Microsoft.VisualStudio.Shell.Interop.VsHelpErrors : Enum {
    public int value__;
    public static VsHelpErrors VSHELP_E_HTMLHELP_UNKNOWN;
    public static VsHelpErrors VSHELP_E_COLLECTIONDOESNOTEXIST;
    public static VsHelpErrors VSHELP_E_COLLECTIONNOTREGISTERED;
    public static VsHelpErrors VSHELP_E_REGISTRATION;
    public static VsHelpErrors VSHELP_E_PREFERREDCOLLECTION;
}
public enum Microsoft.VisualStudio.Shell.Interop.VSIME_ERR : Enum {
    public int value__;
    public static VSIME_ERR IMENORMAL;
    public static VSIME_ERR IMENOTLD;
    public static VSIME_ERR ERRLDLIB;
    public static VSIME_ERR ERRGETIMEPROC;
    public static VSIME_ERR ERRGALLOC;
    public static VSIME_ERR ERRGLOCK;
    public static VSIME_ERR ERRGETIMEINF;
    public static VSIME_ERR ERRSETIMEKEY;
    public static VSIME_ERR ERRNLSENABLEPROC;
    public static VSIME_ERR ERRWINNLSNOTFOUND;
    public static VSIME_ERR ERRIMPGETIMEPROC;
    public static VSIME_ERR ERRINVALIDHWND;
}
public class Microsoft.VisualStudio.Shell.Interop.VSITEMSELECTION : ValueType {
    public IVsHierarchy pHier;
    [ComAliasNameAttribute("Microsoft.VisualStudio.Shell.Interop.VSITEMID")]
public UInt32 itemid;
}
public static class Microsoft.VisualStudio.Shell.Interop.VsMacrosGuids : object {
    public static string ModeRecorder;
    public static string MacroProject;
    public static string Macro;
    public static string VsVbaPackage;
}
public enum Microsoft.VisualStudio.Shell.Interop.VSMESELCMD : Enum {
    public int value__;
    public static VSMESELCMD SELCMD_SELCHANGE;
    public static VSMESELCMD SELCMD_VIEWCODE;
    public static VSMESELCMD SELCMD_PROPERTIES;
    public static VSMESELCMD SELCMD_VIEWCODEDOUBLECLICK;
    public static VSMESELCMD SELCMD_ENTEREDIT;
    public static VSMESELCMD SELCMD_LEAVEEDIT;
}
[ComVisibleAttribute("False")]
[CoClassAttribute("Microsoft.VisualStudio.Shell.Interop.VsMSBuildTaskFileManagerClass")]
[GuidAttribute("45F31264-BACD-45A9-AE64-036120C52582")]
public interface Microsoft.VisualStudio.Shell.Interop.VsMSBuildTaskFileManager {
}
[GuidAttribute("E2905C7C-4435-4212-9148-BE9614BD377B")]
[ClassInterfaceAttribute("0")]
public class Microsoft.VisualStudio.Shell.Interop.VsMSBuildTaskFileManagerClass : object {
    public virtual int Init(IVsHierarchy pHier, IServiceProvider pSP);
    public virtual int Close();
    public virtual int BeginBuild();
    public virtual int EndBuild();
    public virtual int GetFileContents(string wszFilename, String& pbstrFileContents);
    public virtual int GetFileDocData(string wszFilename, IntPtr& ppunkDocData);
    public virtual int GetFileLastChangeTime(string wszFilename, FILETIME[] pFileTime);
    public virtual int PutGeneratedFileContents(string wszFilename, string wszFileContents);
    public virtual int IsRealBuildOperation(Int32& pfIsRealBuild);
    public virtual int Delete(string wszFilename);
    public virtual int Exists(string wszFilename, int fOnlyCheckOnDisk, Int32& pfExists);
}
public class Microsoft.VisualStudio.Shell.Interop.VSNSEBROWSEINFOW : ValueType {
    [ComAliasNameAttribute("Microsoft.VisualStudio.OLE.Interop.DWORD")]
public UInt32 lStructSize;
    [ComAliasNameAttribute("Microsoft.VisualStudio.OLE.Interop.LPCOLESTR")]
public string pszNamespaceGUID;
    [ComAliasNameAttribute("Microsoft.VisualStudio.OLE.Interop.LPCOLESTR")]
public string pszTrayDisplayName;
    [ComAliasNameAttribute("Microsoft.VisualStudio.OLE.Interop.LPCOLESTR")]
public string pszProtocolPrefix;
    [ComAliasNameAttribute("Microsoft.VisualStudio.OLE.Interop.BOOL")]
public int fOnlyShowNSEInTray;
}
public enum Microsoft.VisualStudio.Shell.Interop.VSOBDESCRIPTIONSECTION : Enum {
    public int value__;
    public static VSOBDESCRIPTIONSECTION OBDS_MISC;
    public static VSOBDESCRIPTIONSECTION OBDS_NAME;
    public static VSOBDESCRIPTIONSECTION OBDS_PARAM;
    public static VSOBDESCRIPTIONSECTION OBDS_TYPE;
    public static VSOBDESCRIPTIONSECTION OBDS_ATTRIBUTE;
    public static VSOBDESCRIPTIONSECTION OBDS_ENDDECL;
    public static VSOBDESCRIPTIONSECTION OBDS_COMMA;
    public static VSOBDESCRIPTIONSECTION OBDS_ENABLEHELP;
    public static VSOBDESCRIPTIONSECTION OBDS_ENABLEGOTOSOURCE;
    public static VSOBDESCRIPTIONSECTION OBDS_NOTIFYONLY;
    public static VSOBDESCRIPTIONSECTION OBDS_ENDDECLEXPECTHTML;
}
public class Microsoft.VisualStudio.Shell.Interop.VSOBJCLIPFORMAT : ValueType {
    [ComAliasNameAttribute("Microsoft.VisualStudio.OLE.Interop.CLIPFORMAT")]
public ushort cfFormat;
    [ComAliasNameAttribute("Microsoft.VisualStudio.OLE.Interop.DWORD")]
public UInt32 tymed;
    [ComAliasNameAttribute("Microsoft.VisualStudio.Shell.Interop.VSOBJCLIPFORMATOPTIONS")]
public UInt32 dwOptions;
}
[ComConversionLossAttribute]
public class Microsoft.VisualStudio.Shell.Interop.VSOBJECTINFO : ValueType {
    [ComConversionLossAttribute]
public IntPtr pguidLib;
    [ComConversionLossAttribute]
[ComAliasNameAttribute("Microsoft.VisualStudio.OLE.Interop.WCHAR")]
public string pszLibName;
    [ComConversionLossAttribute]
[ComAliasNameAttribute("Microsoft.VisualStudio.OLE.Interop.WCHAR")]
public string pszNspcName;
    [ComAliasNameAttribute("Microsoft.VisualStudio.OLE.Interop.WCHAR")]
[ComConversionLossAttribute]
public string pszClassName;
    [ComConversionLossAttribute]
[ComAliasNameAttribute("Microsoft.VisualStudio.OLE.Interop.WCHAR")]
public string pszMemberName;
    [ComAliasNameAttribute("Microsoft.VisualStudio.OLE.Interop.DWORD")]
public UInt32 dwCustom;
}
public enum Microsoft.VisualStudio.Shell.Interop.VSOBJGOTOSRCTYPE : Enum {
    public int value__;
    public static VSOBJGOTOSRCTYPE GS_ANY;
    public static VSOBJGOTOSRCTYPE GS_DEFINITION;
    public static VSOBJGOTOSRCTYPE GS_DECLARATION;
    public static VSOBJGOTOSRCTYPE GS_REFERENCE;
}
[ComConversionLossAttribute]
public class Microsoft.VisualStudio.Shell.Interop.VSOBNAVIGATIONINFO2 : ValueType {
    [ComConversionLossAttribute]
public IntPtr pguidLib;
    [ComAliasNameAttribute("Microsoft.VisualStudio.OLE.Interop.WCHAR")]
[ComConversionLossAttribute]
public string pszLibName;
    [ComAliasNameAttribute("Microsoft.VisualStudio.Shell.Interop.VSOBNAVNAMEINFONODE")]
[ComConversionLossAttribute]
public IntPtr pName;
    [ComAliasNameAttribute("Microsoft.VisualStudio.OLE.Interop.DWORD")]
public UInt32 dwCustom;
}
[ComConversionLossAttribute]
public class Microsoft.VisualStudio.Shell.Interop.VSOBNAVIGATIONINFO3 : ValueType {
    [ComConversionLossAttribute]
public IntPtr pguidLib;
    [ComConversionLossAttribute]
[ComAliasNameAttribute("Microsoft.VisualStudio.OLE.Interop.WCHAR")]
public IntPtr pszLibName;
    [ComConversionLossAttribute]
[ComAliasNameAttribute("Microsoft.VisualStudio.Shell.Interop.VSOBNAVNAMEINFONODE2")]
public IntPtr pName;
    [ComAliasNameAttribute("Microsoft.VisualStudio.OLE.Interop.DWORD")]
public UInt32 dwCustom;
}
[ComConversionLossAttribute]
public class Microsoft.VisualStudio.Shell.Interop.VSOBNAVNAMEINFONODE : ValueType {
    [ComConversionLossAttribute]
[ComAliasNameAttribute("Microsoft.VisualStudio.OLE.Interop.WCHAR")]
public string pszName;
    [ComAliasNameAttribute("Microsoft.VisualStudio.Shell.Interop.LIB_LISTTYPE")]
public UInt32 lltName;
    [ComConversionLossAttribute]
public IntPtr pNext;
}
[ComConversionLossAttribute]
public class Microsoft.VisualStudio.Shell.Interop.VSOBNAVNAMEINFONODE2 : ValueType {
    [ComAliasNameAttribute("Microsoft.VisualStudio.OLE.Interop.WCHAR")]
[ComConversionLossAttribute]
public IntPtr pszName;
    [ComAliasNameAttribute("Microsoft.VisualStudio.Shell.Interop.LIB_LISTTYPE2")]
public UInt32 lltName;
    [ComConversionLossAttribute]
public IntPtr pNext;
}
public class Microsoft.VisualStudio.Shell.Interop.VSOBSEARCHCRITERIA : ValueType {
    [ComAliasNameAttribute("Microsoft.VisualStudio.OLE.Interop.LPCOLESTR")]
public string szName;
    [ComAliasNameAttribute("Microsoft.VisualStudio.Shell.Interop.VSOBSEARCHTYPE")]
public VSOBSEARCHTYPE eSrchType;
    [ComAliasNameAttribute("Microsoft.VisualStudio.Shell.Interop.VSOBSEARCHOPTIONS")]
public UInt32 grfOptions;
    [ComAliasNameAttribute("Microsoft.VisualStudio.OLE.Interop.DWORD")]
public UInt32 dwCustom;
}
public class Microsoft.VisualStudio.Shell.Interop.VSOBSEARCHCRITERIA2 : ValueType {
    [ComAliasNameAttribute("Microsoft.VisualStudio.OLE.Interop.LPCOLESTR")]
public string szName;
    [ComAliasNameAttribute("Microsoft.VisualStudio.Shell.Interop.VSOBSEARCHTYPE")]
public VSOBSEARCHTYPE eSrchType;
    [ComAliasNameAttribute("Microsoft.VisualStudio.Shell.Interop.VSOBSEARCHOPTIONS2")]
public UInt32 grfOptions;
    [ComAliasNameAttribute("Microsoft.VisualStudio.OLE.Interop.DWORD")]
public UInt32 dwCustom;
    public IVsNavInfo pIVsNavInfo;
}
public enum Microsoft.VisualStudio.Shell.Interop.VSOBSEARCHTYPE : Enum {
    public int value__;
    public static VSOBSEARCHTYPE SO_ENTIREWORD;
    public static VSOBSEARCHTYPE SO_SUBSTRING;
    public static VSOBSEARCHTYPE SO_PRESTRING;
}
public enum Microsoft.VisualStudio.Shell.Interop.VSOLECMDEXECOPT_HIWORD : Enum {
    public int value__;
    public static VSOLECMDEXECOPT_HIWORD EXECOPTHW_FILTERKEYS;
    public static VSOLECMDEXECOPT_HIWORD EXECOPTHW_GETSWATCH;
}
[ComConversionLossAttribute]
public class Microsoft.VisualStudio.Shell.Interop.VSOPENFILENAMEW : ValueType {
    [ComAliasNameAttribute("Microsoft.VisualStudio.OLE.Interop.DWORD")]
public UInt32 lStructSize;
    [ComConversionLossAttribute]
public IntPtr hwndOwner;
    [ComAliasNameAttribute("Microsoft.VisualStudio.OLE.Interop.LPCWSTR")]
public string pwzDlgTitle;
    public IntPtr pwzFileName;
    [ComAliasNameAttribute("Microsoft.VisualStudio.OLE.Interop.DWORD")]
public UInt32 nMaxFileName;
    [ComAliasNameAttribute("Microsoft.VisualStudio.OLE.Interop.LPCWSTR")]
public string pwzInitialDir;
    [ComAliasNameAttribute("Microsoft.VisualStudio.OLE.Interop.LPCWSTR")]
public string pwzFilter;
    [ComAliasNameAttribute("Microsoft.VisualStudio.OLE.Interop.DWORD")]
public UInt32 nFilterIndex;
    [ComAliasNameAttribute("Microsoft.VisualStudio.OLE.Interop.DWORD")]
public UInt32 nFileOffset;
    [ComAliasNameAttribute("Microsoft.VisualStudio.OLE.Interop.DWORD")]
public UInt32 nFileExtension;
    [ComAliasNameAttribute("Microsoft.VisualStudio.OLE.Interop.DWORD")]
public UInt32 dwHelpTopic;
    [ComAliasNameAttribute("Microsoft.VisualStudio.OLE.Interop.DWORD")]
public UInt32 dwFlags;
}
public enum Microsoft.VisualStudio.Shell.Interop.VSOUTLINECAPTION : Enum {
    public int value__;
    public static VSOUTLINECAPTION OUTLINECAPTION_SIMPLE;
    public static VSOUTLINECAPTION OUTLINECAPTION_FULL;
}
public enum Microsoft.VisualStudio.Shell.Interop.VSOVERLAYICON : Enum {
    public int value__;
    public static VSOVERLAYICON OVERLAYICON_NONE;
    public static VSOVERLAYICON OVERLAYICON_SHORTCUT;
    public static VSOVERLAYICON OVERLAYICON_POLICY;
    public static VSOVERLAYICON OVERLAYICON_CONNECTED;
    public static VSOVERLAYICON OVERLAYICON_DISCONNECTED;
    public static VSOVERLAYICON OVERLAYICON_MAXINDEX;
}
[ComVisibleAttribute("False")]
[CoClassAttribute("Microsoft.VisualStudio.Shell.Interop.VSPIAImporterClass")]
[GuidAttribute("E6065B70-C9B6-4636-80F5-1CF92D7ECE5B")]
public interface Microsoft.VisualStudio.Shell.Interop.VSPIAImporter {
}
[GuidAttribute("A353805B-8A96-479B-83EB-2EA3F69A674C")]
[ComConversionLossAttribute]
[ClassInterfaceAttribute("0")]
public class Microsoft.VisualStudio.Shell.Interop.VSPIAImporterClass : object {
    public virtual int WrapTypeLibrary(TLIBATTR[] pTypeLibToWrap, string wszDestinationDirectory, string wszKeyFile, string wszKeyContainer, int bDelaySign, IVsTypeLibraryWrapperCallback pCallback, IntPtr[] rgbstrWrapperPaths, IntPtr[] rgWrappedTypeLibs, IntPtr[] rgbGenerated, IntPtr[] rgbstrWrapperTools, UInt32& pcWrappedTypeLibs);
    public virtual int GetMainWrapperFilename(TLIBATTR[] pTypeLibToWrap, String& pbstrFilename);
    public virtual int NeedsRegeneration(TLIBATTR[] pTypeLibToWrap, string wszKeyFile, string wszKeyContainerName, int bDelaySign, int bCurrentlyDelaySigned, string wszExistingWrapperFilename, Int32& pbNeedsRegeneration);
    public virtual int GetMainWrapperFriendlyName(TLIBATTR[] pTypeLibToWrap, String& pbstrFilename);
}
public class Microsoft.VisualStudio.Shell.Interop.VsPrefetchedProjectInfo : ValueType {
    public Guid guidProjectId;
    [ComAliasNameAttribute("Microsoft.VisualStudio.Shell.Interop.VSBATCHLOADRESULT")]
public UInt32 resultFlags;
    public object pProject;
    public int hr;
    public Guid guidNewFactory;
    [ComAliasNameAttribute("VsShell.VSPUVF_REPAIRFLAGS")]
public UInt32 repairFlags;
    [ComAliasNameAttribute("VsShell.VSPUVF_FLAGS")]
public UInt32 upgradeCapabilityFlags;
}
public enum Microsoft.VisualStudio.Shell.Interop.VSPREVIEWRESOLUTION : Enum {
    public int value__;
    public static VSPREVIEWRESOLUTION PR_Default;
    public static VSPREVIEWRESOLUTION PR_640x480;
    public static VSPREVIEWRESOLUTION PR_800x600;
    public static VSPREVIEWRESOLUTION PR_1024x768;
}
public enum Microsoft.VisualStudio.Shell.Interop.VSPROFILERPROCESSARCHTYPE : Enum {
    public int value__;
    public static VSPROFILERPROCESSARCHTYPE ARCH_UNKNOWN;
    public static VSPROFILERPROCESSARCHTYPE ARCH_X86;
    public static VSPROFILERPROCESSARCHTYPE ARCH_X64;
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("943A3169-D328-4E42-8AF6-7200E5E8C2E4")]
public interface Microsoft.VisualStudio.Shell.Interop.VsProjectCapabilityExpressionMatcher {
}
public class Microsoft.VisualStudio.Shell.Interop.VsProjectLoadInfo : ValueType {
    public UInt32 dwProjectLoadFlags;
    public Guid guidProjectFactory;
    public Guid guidProjectId;
    public string bstrActiveProjectConfiguration;
    public string bstrProjectFile;
}
public class Microsoft.VisualStudio.Shell.Interop.VsPropertyBrowserState : ValueType {
    [ComAliasNameAttribute("Microsoft.VisualStudio.OLE.Interop.DWORD")]
public UInt32 cbSize;
    [ComAliasNameAttribute("Microsoft.VisualStudio.OLE.Interop.BOOL")]
public int fShowStatus;
    [ComAliasNameAttribute("Microsoft.VisualStudio.OLE.Interop.ULONG")]
public UInt32 cStatusHeight;
    [ComAliasNameAttribute("Microsoft.VisualStudio.OLE.Interop.BOOL")]
public int fOutline;
    public UInt32[] customColors;
}
public enum Microsoft.VisualStudio.Shell.Interop.VSPROPERTYSTREAMPROPERTYTYPE : Enum {
    public int value__;
    public static VSPROPERTYSTREAMPROPERTYTYPE VSPSPT_SIMPLE;
    public static VSPROPERTYSTREAMPROPERTYTYPE VSPSPT_PROPERTY_SECTION;
}
[ComConversionLossAttribute]
public class Microsoft.VisualStudio.Shell.Interop.VSPROPSHEETPAGE : ValueType {
    [ComAliasNameAttribute("Microsoft.VisualStudio.OLE.Interop.DWORD")]
public UInt32 dwSize;
    [ComAliasNameAttribute("Microsoft.VisualStudio.OLE.Interop.DWORD")]
public UInt32 dwFlags;
    [ComAliasNameAttribute("Microsoft.VisualStudio.Shell.Interop.HINSTANCE")]
public IntPtr HINSTANCE;
    [ComAliasNameAttribute("Microsoft.VisualStudio.OLE.Interop.WORD")]
public ushort wTemplateId;
    [ComAliasNameAttribute("Microsoft.VisualStudio.OLE.Interop.DWORD")]
public UInt32 dwTemplateSize;
    [ComConversionLossAttribute]
[ComAliasNameAttribute("Microsoft.VisualStudio.TextManager.Interop.BYTE")]
public IntPtr pTemplate;
    [ComAliasNameAttribute("Microsoft.VisualStudio.Shell.Interop.DLGPROC")]
public IntPtr pfnDlgProc;
    [ComAliasNameAttribute("Microsoft.VisualStudio.OLE.Interop.LONG_PTR")]
public IntPtr lParam;
    [ComAliasNameAttribute("Microsoft.VisualStudio.Shell.Interop.LPFNPSPCALLBACKA")]
public IntPtr pfnCallback;
    [ComAliasNameAttribute("Microsoft.VisualStudio.OLE.Interop.UINT")]
[ComConversionLossAttribute]
public IntPtr pcRefParent;
    [ComAliasNameAttribute("Microsoft.VisualStudio.OLE.Interop.DWORD")]
public UInt32 dwReserved;
    [ComConversionLossAttribute]
public IntPtr hwndDlg;
}
public class Microsoft.VisualStudio.Shell.Interop.VSQEQS_FILE_ATTRIBUTE_DATA : ValueType {
    [ComAliasNameAttribute("Microsoft.VisualStudio.OLE.Interop.DWORD")]
public UInt32 dwFileAttributes;
    [ComAliasNameAttribute("Microsoft.VisualStudio.OLE.Interop.FILETIME")]
public FILETIME ftLastWriteTime;
    [ComAliasNameAttribute("Microsoft.VisualStudio.OLE.Interop.DWORD")]
public UInt32 nFileSizeHigh;
    [ComAliasNameAttribute("Microsoft.VisualStudio.OLE.Interop.DWORD")]
public UInt32 nFileSizeLow;
}
[FlagsAttribute]
public enum Microsoft.VisualStudio.Shell.Interop.VSQUERYADDDIRECTORYFLAGS : Enum {
    public int value__;
    public static VSQUERYADDDIRECTORYFLAGS VSQUERYADDDIRECTORYFLAGS_padding;
}
public enum Microsoft.VisualStudio.Shell.Interop.VSQUERYADDDIRECTORYRESULTS : Enum {
    public int value__;
    public static VSQUERYADDDIRECTORYRESULTS VSQUERYADDDIRECTORYRESULTS_AddOK;
    public static VSQUERYADDDIRECTORYRESULTS VSQUERYADDDIRECTORYRESULTS_AddNotOK;
}
[FlagsAttribute]
public enum Microsoft.VisualStudio.Shell.Interop.VSQUERYADDFILEFLAGS : Enum {
    public int value__;
    public static VSQUERYADDFILEFLAGS VSQUERYADDFILEFLAGS_NoFlags;
    public static VSQUERYADDFILEFLAGS VSQUERYADDFILEFLAGS_IsSpecialFile;
    public static VSQUERYADDFILEFLAGS VSQUERYADDFILEFLAGS_IsNestedProjectFile;
}
public enum Microsoft.VisualStudio.Shell.Interop.VSQUERYADDFILERESULTS : Enum {
    public int value__;
    public static VSQUERYADDFILERESULTS VSQUERYADDFILERESULTS_AddOK;
    public static VSQUERYADDFILERESULTS VSQUERYADDFILERESULTS_AddNotOK;
}
[FlagsAttribute]
public enum Microsoft.VisualStudio.Shell.Interop.VSQUERYREMOVEDIRECTORYFLAGS : Enum {
    public int value__;
    public static VSQUERYREMOVEDIRECTORYFLAGS VSQUERYREMOVEDIRECTORYFLAGS_padding;
}
public enum Microsoft.VisualStudio.Shell.Interop.VSQUERYREMOVEDIRECTORYRESULTS : Enum {
    public int value__;
    public static VSQUERYREMOVEDIRECTORYRESULTS VSQUERYREMOVEDIRECTORYRESULTS_RemoveOK;
    public static VSQUERYREMOVEDIRECTORYRESULTS VSQUERYREMOVEDIRECTORYRESULTS_RemoveNotOK;
}
[FlagsAttribute]
public enum Microsoft.VisualStudio.Shell.Interop.VSQUERYREMOVEFILEFLAGS : Enum {
    public int value__;
    public static VSQUERYREMOVEFILEFLAGS VSQUERYREMOVEFILEFLAGS_NoFlags;
    public static VSQUERYREMOVEFILEFLAGS VSQUERYREMOVEFILEFLAGS_IsSpecialFile;
    public static VSQUERYREMOVEFILEFLAGS VSQUERYREMOVEFILEFLAGS_IsNestedProjectFile;
}
public enum Microsoft.VisualStudio.Shell.Interop.VSQUERYREMOVEFILERESULTS : Enum {
    public int value__;
    public static VSQUERYREMOVEFILERESULTS VSQUERYREMOVEFILERESULTS_RemoveOK;
    public static VSQUERYREMOVEFILERESULTS VSQUERYREMOVEFILERESULTS_RemoveNotOK;
}
[FlagsAttribute]
public enum Microsoft.VisualStudio.Shell.Interop.VSQUERYRENAMEDIRECTORYFLAGS : Enum {
    public int value__;
    public static VSQUERYRENAMEDIRECTORYFLAGS VSQUERYRENAMEDIRECTORYFLAGS_padding;
}
public enum Microsoft.VisualStudio.Shell.Interop.VSQUERYRENAMEDIRECTORYRESULTS : Enum {
    public int value__;
    public static VSQUERYRENAMEDIRECTORYRESULTS VSQUERYRENAMEDIRECTORYRESULTS_RenameOK;
    public static VSQUERYRENAMEDIRECTORYRESULTS VSQUERYRENAMEDIRECTORYRESULTS_RenameNotOK;
}
[FlagsAttribute]
public enum Microsoft.VisualStudio.Shell.Interop.VSQUERYRENAMEFILEFLAGS : Enum {
    public int value__;
    public static VSQUERYRENAMEFILEFLAGS VSQUERYRENAMEFILEFLAGS_NoFlags;
    public static VSQUERYRENAMEFILEFLAGS VSQUERYRENAMEFILEFLAGS_IsSpecialFile;
    public static VSQUERYRENAMEFILEFLAGS VSQUERYRENAMEFILEFLAGS_IsNestedProjectFile;
    public static VSQUERYRENAMEFILEFLAGS VSQUERYRENAMEFILEFLAGS_Directory;
}
public enum Microsoft.VisualStudio.Shell.Interop.VSQUERYRENAMEFILERESULTS : Enum {
    public int value__;
    public static VSQUERYRENAMEFILERESULTS VSQUERYRENAMEFILERESULTS_RenameOK;
    public static VSQUERYRENAMEFILERESULTS VSQUERYRENAMEFILERESULTS_RenameNotOK;
}
public enum Microsoft.VisualStudio.Shell.Interop.VSQUERYSAVESLNPROPS : Enum {
    public int value__;
    public static VSQUERYSAVESLNPROPS QSP_HasNoProps;
    public static VSQUERYSAVESLNPROPS QSP_HasDirtyProps;
    public static VSQUERYSAVESLNPROPS QSP_HasNoDirtyProps;
}
public enum Microsoft.VisualStudio.Shell.Interop.VSRECORDMODE : Enum {
    public int value__;
    public static VSRECORDMODE VSRECORDMODE_ABSOLUTE;
    public static VSRECORDMODE VSRECORDMODE_RELATIVE;
}
public enum Microsoft.VisualStudio.Shell.Interop.VSRECORDSTATE : Enum {
    public int value__;
    public static VSRECORDSTATE VSRECORDSTATE_ON;
    public static VSRECORDSTATE VSRECORDSTATE_OFF;
    public static VSRECORDSTATE VSRECORDSTATE_PAUSED;
}
public enum Microsoft.VisualStudio.Shell.Interop.VSRELOADOPTION : Enum {
    public int value__;
    public static VSRELOADOPTION VSRELOADOPTION_PROMPT;
    public static VSRELOADOPTION VSRELOADOPTION_SILENT;
    public static VSRELOADOPTION VSRELOADOPTION_NEVER;
}
[FlagsAttribute]
public enum Microsoft.VisualStudio.Shell.Interop.VSREMOVEDIRECTORYFLAGS : Enum {
    public int value__;
    public static VSREMOVEDIRECTORYFLAGS VSREMOVEDIRECTORYFLAGS_NoFlags;
    public static VSREMOVEDIRECTORYFLAGS VSREMOVEDIRECTORYFLAGS_IsDirectoryBased;
    public static VSREMOVEDIRECTORYFLAGS VSREMOVEDIRECTORYFLAGS_RemoveFromSourceControlDoneExternally;
}
[FlagsAttribute]
public enum Microsoft.VisualStudio.Shell.Interop.VSREMOVEFILEFLAGS : Enum {
    public int value__;
    public static VSREMOVEFILEFLAGS VSREMOVEFILEFLAGS_NoFlags;
    public static VSREMOVEFILEFLAGS VSREMOVEFILEFLAGS_IsDirectoryBased;
    public static VSREMOVEFILEFLAGS VSREMOVEFILEFLAGS_RemoveFromSourceControlDoneExternally;
    public static VSREMOVEFILEFLAGS VSREMOVEFILEFLAGS_IsSpecialFile;
    public static VSREMOVEFILEFLAGS VSREMOVEFILEFLAGS_IsNestedProjectFile;
}
[FlagsAttribute]
public enum Microsoft.VisualStudio.Shell.Interop.VSRENAMEDIRECTORYFLAGS : Enum {
    public int value__;
    public static VSRENAMEDIRECTORYFLAGS VSRENAMEDIRECTORYFLAGS_NoFlags;
    public static VSRENAMEDIRECTORYFLAGS VSRENAMEDIRECTORYFLAGS_RenameInSourceControlDoneExternally;
}
[FlagsAttribute]
public enum Microsoft.VisualStudio.Shell.Interop.VSRENAMEFILEFLAGS : Enum {
    public int value__;
    public static VSRENAMEFILEFLAGS VSRENAMEFILEFLAGS_NoFlags;
    public static VSRENAMEFILEFLAGS VSRENAMEFILEFLAGS_FromShellCommand;
    public static VSRENAMEFILEFLAGS VSRENAMEFILEFLAGS_FromScc;
    public static VSRENAMEFILEFLAGS VSRENAMEFILEFLAGS_FromFileChange;
    public static VSRENAMEFILEFLAGS VSRENAMEFILEFLAGS_WasQueried;
    public static VSRENAMEFILEFLAGS VSRENAMEFILEFLAGS_AlreadyOnDisk;
    public static VSRENAMEFILEFLAGS VSRENAMEFILEFLAGS_Directory;
    public static VSRENAMEFILEFLAGS VSRENAMEFILEFLAGS_RenameInSourceControlDoneExternally;
    public static VSRENAMEFILEFLAGS VSRENAMEFILEFLAGS_IsSpecialFile;
    public static VSRENAMEFILEFLAGS VSRENAMEFILEFLAGS_IsNestedProjectFile;
    public static VSRENAMEFILEFLAGS VSRENAMEFILEFLAGS_ALL;
    public static VSRENAMEFILEFLAGS VSRENAMEFILEFLAGS_INVALID;
}
public class Microsoft.VisualStudio.Shell.Interop.VsResolvedAssemblyPath : ValueType {
    public string bstrOrigAssemblySpec;
    public string bstrResolvedAssemblyPath;
}
[ComConversionLossAttribute]
public class Microsoft.VisualStudio.Shell.Interop.VSSAVEFILENAMEW : ValueType {
    [ComAliasNameAttribute("Microsoft.VisualStudio.OLE.Interop.DWORD")]
public UInt32 lStructSize;
    [ComConversionLossAttribute]
public IntPtr hwndOwner;
    [ComAliasNameAttribute("Microsoft.VisualStudio.OLE.Interop.LPCWSTR")]
public string pwzDlgTitle;
    public IntPtr pwzFileName;
    [ComAliasNameAttribute("Microsoft.VisualStudio.OLE.Interop.DWORD")]
public UInt32 nMaxFileName;
    [ComAliasNameAttribute("Microsoft.VisualStudio.OLE.Interop.LPCWSTR")]
public string pwzInitialDir;
    [ComAliasNameAttribute("Microsoft.VisualStudio.OLE.Interop.LPCWSTR")]
public string pwzFilter;
    [ComAliasNameAttribute("Microsoft.VisualStudio.OLE.Interop.DWORD")]
public UInt32 nFilterIndex;
    [ComAliasNameAttribute("Microsoft.VisualStudio.OLE.Interop.DWORD")]
public UInt32 nFileOffset;
    [ComAliasNameAttribute("Microsoft.VisualStudio.OLE.Interop.DWORD")]
public UInt32 nFileExtension;
    [ComAliasNameAttribute("Microsoft.VisualStudio.OLE.Interop.DWORD")]
public UInt32 dwHelpTopic;
    [ComAliasNameAttribute("Microsoft.VisualStudio.OLE.Interop.DWORD")]
public UInt32 dwFlags;
    public IVsSaveOptionsDlg pSaveOpts;
}
[FlagsAttribute]
public enum Microsoft.VisualStudio.Shell.Interop.VSSAVEFLAGS : Enum {
    public int value__;
    public static VSSAVEFLAGS VSSAVE_Save;
    public static VSSAVEFLAGS VSSAVE_SaveAs;
    public static VSSAVEFLAGS VSSAVE_SilentSave;
    public static VSSAVEFLAGS VSSAVE_SaveCopyAs;
}
public class Microsoft.VisualStudio.Shell.Interop.VSSAVETREEITEM : ValueType {
    [ComAliasNameAttribute("Microsoft.VisualStudio.Shell.Interop.VSRDTSAVEOPTIONS")]
public UInt32 grfSave;
    [ComAliasNameAttribute("Microsoft.VisualStudio.Shell.Interop.VSCOOKIE")]
public UInt32 docCookie;
    public IVsHierarchy pHier;
    [ComAliasNameAttribute("Microsoft.VisualStudio.Shell.Interop.VSITEMID")]
public UInt32 itemid;
}
public enum Microsoft.VisualStudio.Shell.Interop.VSSCCENLISTMENTCHOICE : Enum {
    public int value__;
    public static VSSCCENLISTMENTCHOICE VSSCC_EC_NEVER;
    public static VSSCCENLISTMENTCHOICE VSSCC_EC_OPTIONAL;
    public static VSSCCENLISTMENTCHOICE VSSCC_EC_COMPULSORY;
}
public enum Microsoft.VisualStudio.Shell.Interop.VSSCCPROVIDERBINDING : Enum {
    public int value__;
    public static VSSCCPROVIDERBINDING VSSCC_PB_STANDARD;
    public static VSSCCPROVIDERBINDING VSSCC_PB_CUSTOM_DISABLED;
    public static VSSCCPROVIDERBINDING VSSCC_PB_CUSTOM;
    public static VSSCCPROVIDERBINDING VSSCC_PB_STANDARD_DISABLED;
}
public enum Microsoft.VisualStudio.Shell.Interop.VsScriptJmcCodeType : Enum {
    public int value__;
    public static VsScriptJmcCodeType SJMC_UNSURE;
    public static VsScriptJmcCodeType SJMC_USERCODE;
    public static VsScriptJmcCodeType SJMC_LIBRARYCODE;
    public static VsScriptJmcCodeType SJMC_UNRELATEDCODE;
}
public enum Microsoft.VisualStudio.Shell.Interop.VSSEARCHPROGRESSTYPE : Enum {
    public int value__;
    public static VSSEARCHPROGRESSTYPE SPT_NONE;
    public static VSSEARCHPROGRESSTYPE SPT_INDETERMINATE;
    public static VSSEARCHPROGRESSTYPE SPT_DETERMINATE;
}
public enum Microsoft.VisualStudio.Shell.Interop.VSSEARCHSTARTTYPE : Enum {
    public int value__;
    public static VSSEARCHSTARTTYPE SST_INSTANT;
    public static VSSEARCHSTARTTYPE SST_DELAYED;
    public static VSSEARCHSTARTTYPE SST_ONDEMAND;
}
public enum Microsoft.VisualStudio.Shell.Interop.VSSETFRAMEPOS : Enum {
    public int value__;
    public static VSSETFRAMEPOS SFP_maskFrameMode;
    public static VSSETFRAMEPOS SFP_fDock;
    public static VSSETFRAMEPOS SFP_fTab;
    public static VSSETFRAMEPOS SFP_fFloat;
    public static VSSETFRAMEPOS SFP_fMdiChild;
    public static VSSETFRAMEPOS SFP_maskPosition;
    public static VSSETFRAMEPOS SFP_fDockTop;
    public static VSSETFRAMEPOS SFP_fDockBottom;
    public static VSSETFRAMEPOS SFP_fDockLeft;
    public static VSSETFRAMEPOS SFP_fDockRight;
    public static VSSETFRAMEPOS SFP_fTabFirst;
    public static VSSETFRAMEPOS SFP_fTabLast;
    public static VSSETFRAMEPOS SFP_fTabPrevious;
    public static VSSETFRAMEPOS SFP_fTabNext;
    public static VSSETFRAMEPOS SFP_fSize;
    public static VSSETFRAMEPOS SFP_fMove;
}
public enum Microsoft.VisualStudio.Shell.Interop.VSSOLNBUILDQUERYRESULTS : Enum {
    public int value__;
    public static VSSOLNBUILDQUERYRESULTS VSSBQR_OUTOFDATE_QUERY_YES;
    public static VSSOLNBUILDQUERYRESULTS VSSBQR_OUTOFDATE_QUERY_NO;
    public static VSSOLNBUILDQUERYRESULTS VSSBQR_OUTOFDATE_QUERY_CANCEL;
    public static VSSOLNBUILDQUERYRESULTS VSSBQR_SAVEBEFOREBUILD_QUERY_YES;
    public static VSSOLNBUILDQUERYRESULTS VSSBQR_SAVEBEFOREBUILD_QUERY_NO;
    public static VSSOLNBUILDQUERYRESULTS VSSBQR_SAVEBEFOREBUILD_QUERY_CANCEL;
    public static VSSOLNBUILDQUERYRESULTS VSSBQR_CONTDEPLOYONERROR_QUERY_YES;
    public static VSSOLNBUILDQUERYRESULTS VSSBQR_CONTDEPLOYONERROR_QUERY_NO;
    public static VSSOLNBUILDQUERYRESULTS VSSBQR_CONTLAUNCHONERROR_QUERY_YES;
    public static VSSOLNBUILDQUERYRESULTS VSSBQR_CONTLAUNCHONERROR_QUERY_NO;
}
[FlagsAttribute]
public enum Microsoft.VisualStudio.Shell.Interop.VSSOLNBUILDUPDATEFLAGS : Enum {
    public int value__;
    public static VSSOLNBUILDUPDATEFLAGS SBF_SUPPRESS_NONE;
    public static VSSOLNBUILDUPDATEFLAGS SBF_SUPPRESS_OUTOFDATE_QUERY;
    public static VSSOLNBUILDUPDATEFLAGS SBF_SUPPRESS_SAVEBEFOREBUILD_QUERY;
    public static VSSOLNBUILDUPDATEFLAGS SBF_SUPPRESS_CONTDEPLOYONERROR_QUERY;
    public static VSSOLNBUILDUPDATEFLAGS SBF_SUPPRESS_CONTLAUNCHONERROR_QUERY;
    public static VSSOLNBUILDUPDATEFLAGS SBF_SUPPRESS_MASK;
    public static VSSOLNBUILDUPDATEFLAGS SBF_OPERATION_NONE;
    public static VSSOLNBUILDUPDATEFLAGS SBF_OPERATION_BUILD;
    public static VSSOLNBUILDUPDATEFLAGS SBF_OPERATION_DEPLOY;
    public static VSSOLNBUILDUPDATEFLAGS SBF_OPERATION_LAUNCH;
    public static VSSOLNBUILDUPDATEFLAGS SBF_OPERATION_LAUNCHDEBUG;
    public static VSSOLNBUILDUPDATEFLAGS SBF_OPERATION_CLEAN;
    public static VSSOLNBUILDUPDATEFLAGS SBF_OPERATION_SELECTION;
    public static VSSOLNBUILDUPDATEFLAGS SBF_OPERATION_FORCE_UPDATE;
    public static VSSOLNBUILDUPDATEFLAGS SBF_OPERATION_MASK;
}
[FlagsAttribute]
public enum Microsoft.VisualStudio.Shell.Interop.VSSOLNBUILDUPDATEFLAGS2 : Enum {
    public int value__;
    public static VSSOLNBUILDUPDATEFLAGS2 SBF_OPERATION_PUBLISHUI;
    public static VSSOLNBUILDUPDATEFLAGS2 SBF_OPERATION_PUBLISH;
}
[FlagsAttribute]
public enum Microsoft.VisualStudio.Shell.Interop.VSSOLNBUILDUPDATEFLAGS3 : Enum {
    public int value__;
    public static VSSOLNBUILDUPDATEFLAGS3 SBF_FLAGS_NONE;
    [ObsoleteAttribute("This API is no longer supported by Visual Studio.")]
public static VSSOLNBUILDUPDATEFLAGS3 SBF_FLAGS_DEFERRED_BUILD;
    public static VSSOLNBUILDUPDATEFLAGS3 SBF_FLAGS_UPTODATE_CHECK;
    public static VSSOLNBUILDUPDATEFLAGS3 SBF_FLAGS_LOW_PRIORITY;
    public static VSSOLNBUILDUPDATEFLAGS3 SBF_FLAGS_MASK;
}
public enum Microsoft.VisualStudio.Shell.Interop.VsStateIcon : Enum {
    public int value__;
    public static VsStateIcon STATEICON_NOSTATEICON;
    public static VsStateIcon STATEICON_CHECKEDIN;
    public static VsStateIcon STATEICON_CHECKEDOUT;
    public static VsStateIcon STATEICON_ORPHANED;
    public static VsStateIcon STATEICON_EDITABLE;
    public static VsStateIcon STATEICON_BLANK;
    public static VsStateIcon STATEICON_READONLY;
    public static VsStateIcon STATEICON_DISABLED;
    public static VsStateIcon STATEICON_CHECKEDOUTEXCLUSIVE;
    public static VsStateIcon STATEICON_CHECKEDOUTSHAREDOTHER;
    public static VsStateIcon STATEICON_CHECKEDOUTEXCLUSIVEOTHER;
    public static VsStateIcon STATEICON_EXCLUDEDFROMSCC;
    public static VsStateIcon STATEICON_MAXINDEX;
}
public class Microsoft.VisualStudio.Shell.Interop.VSSWATCHMETRICS : ValueType {
    public int cRows;
    public int cColumns;
    public int cxCtrl;
    public int cyCtrl;
    public int cxCell;
    public int cyCell;
    public int dxBetween;
    public int dyBetween;
    [ComAliasNameAttribute("Microsoft.VisualStudio.OLE.Interop.BOOL")]
public int fPaletteSensitive;
}
[ComConversionLossAttribute]
public class Microsoft.VisualStudio.Shell.Interop.VSSWATCHRENDER : ValueType {
    [ComAliasNameAttribute("Microsoft.VisualStudio.Shell.Interop.VSSWATCHRENDERFLAGS")]
public UInt32 grfFlags;
    public int x;
    public int y;
    public int nAltitude;
    [ComConversionLossAttribute]
public IntPtr hdc;
    [ComAliasNameAttribute("Microsoft.VisualStudio.OLE.Interop.RECT")]
[ComConversionLossAttribute]
public IntPtr prc;
}
[ComVisibleAttribute("False")]
[CoClassAttribute("Microsoft.VisualStudio.Shell.Interop.VsSymbolicNavigationManagerClass")]
[GuidAttribute("C4D4F197-941E-43B1-9D42-BE527F9D5D00")]
public interface Microsoft.VisualStudio.Shell.Interop.VsSymbolicNavigationManager {
}
[ClassInterfaceAttribute("0")]
[GuidAttribute("3FD6EE6A-1DF2-4305-9946-2146D0E16930")]
public class Microsoft.VisualStudio.Shell.Interop.VsSymbolicNavigationManagerClass : object {
    public virtual int RegisterSymbolicNavigationNotify(IVsSymbolicNavigationNotify pNotify, UInt32& pdwCookie);
    public virtual int UnregisterSymbolicNavigationNotify(UInt32 dwCookie);
    public virtual int OnBeforeNavigateToSymbol(IVsHierarchy pHierCodeFile, UInt32 itemidCodeFile, string pszRQName, Int32& pfNavigationHandled);
    public virtual int QueryNavigateToSymbol(IVsHierarchy pHierCodeFile, UInt32 itemidCodeFile, string pszRQName, IVsHierarchy& ppHierToNavigate, UInt32& pitemidToNavigate, TextSpan[] pSpanToNavigate, Int32& pfWouldNavigate);
}
public enum Microsoft.VisualStudio.Shell.Interop.VSSYSCOLOR : Enum {
    public int value__;
    public static VSSYSCOLOR VSCOLOR_LIGHT;
    public static VSSYSCOLOR VSCOLOR_MEDIUM;
    public static VSSYSCOLOR VSCOLOR_DARK;
    public static VSSYSCOLOR VSCOLOR_LIGHTCAPTION;
    public static VSSYSCOLOR VSCOLOR_LAST;
}
public enum Microsoft.VisualStudio.Shell.Interop.VSTASKCATEGORY : Enum {
    public int value__;
    public static VSTASKCATEGORY CAT_ALL;
    public static VSTASKCATEGORY CAT_BUILDCOMPILE;
    public static VSTASKCATEGORY CAT_COMMENTS;
    public static VSTASKCATEGORY CAT_CODESENSE;
    public static VSTASKCATEGORY CAT_SHORTCUTS;
    public static VSTASKCATEGORY CAT_USER;
    public static VSTASKCATEGORY CAT_MISC;
    public static VSTASKCATEGORY CAT_HTML;
}
public class Microsoft.VisualStudio.Shell.Interop.VSTASKCOLUMN : ValueType {
    public int iField;
    public string bstrHeading;
    public int iImage;
    [ComAliasNameAttribute("Microsoft.VisualStudio.OLE.Interop.BOOL")]
public int fShowSortArrow;
    [ComAliasNameAttribute("Microsoft.VisualStudio.OLE.Interop.BOOL")]
public int fAllowUserSort;
    [ComAliasNameAttribute("Microsoft.VisualStudio.OLE.Interop.BOOL")]
public int fVisibleByDefault;
    [ComAliasNameAttribute("Microsoft.VisualStudio.OLE.Interop.BOOL")]
public int fAllowHide;
    [ComAliasNameAttribute("Microsoft.VisualStudio.OLE.Interop.BOOL")]
public int fSizeable;
    [ComAliasNameAttribute("Microsoft.VisualStudio.OLE.Interop.BOOL")]
public int fMoveable;
    public int iDefaultSortPriority;
    [ComAliasNameAttribute("Microsoft.VisualStudio.OLE.Interop.BOOL")]
public int fDescendingSort;
    public int cxMinWidth;
    public int cxDefaultWidth;
    [ComAliasNameAttribute("Microsoft.VisualStudio.OLE.Interop.BOOL")]
public int fDynamicSize;
    public string bstrCanonicalName;
    public string bstrLocalizedName;
    public string bstrTip;
    [ComAliasNameAttribute("Microsoft.VisualStudio.OLE.Interop.BOOL")]
public int fFitContent;
}
public enum Microsoft.VisualStudio.Shell.Interop.VSTASKFIELD : Enum {
    public int value__;
    public static VSTASKFIELD FLD_PRIORITY;
    public static VSTASKFIELD FLD_CATEGORY;
    public static VSTASKFIELD FLD_SUBCATEGORY;
    public static VSTASKFIELD FLD_BITMAP;
    public static VSTASKFIELD FLD_CHECKED;
    public static VSTASKFIELD FLD_DESCRIPTION;
    public static VSTASKFIELD FLD_FILE;
    public static VSTASKFIELD FLD_LINE;
    public static VSTASKFIELD FLD_COLUMN;
    public static VSTASKFIELD FLD_CUSTOM;
    public static VSTASKFIELD FLD_PROVIDERKNOWSORDER;
}
[GuidAttribute("E323C22C-55B2-11D3-9479-00C04F683646")]
public enum Microsoft.VisualStudio.Shell.Interop.VSTASKPRIORITY : Enum {
    public int value__;
    public static VSTASKPRIORITY TP_HIGH;
    public static VSTASKPRIORITY TP_NORMAL;
    public static VSTASKPRIORITY TP_LOW;
}
[ComConversionLossAttribute]
public class Microsoft.VisualStudio.Shell.Interop.VSTBM : ValueType {
    public int dxpButton;
    public int dypButton;
    public int dxpMargin;
    public int dypMargin;
    public int dxpRow;
    public int dypRow;
    public int dxpGap;
    public int dypGap;
    public int dxCaptionBtn;
    public int dyCaptionBtn;
    [ComConversionLossAttribute]
public IntPtr hfontHalfHtTitle;
}
public enum Microsoft.VisualStudio.Shell.Interop.VSTBXTABVIEW : Enum {
    public int value__;
    public static VSTBXTABVIEW TBXTV_ListView;
    public static VSTBXTABVIEW TBXTV_IconView;
}
public enum Microsoft.VisualStudio.Shell.Interop.VSTDTYPE : Enum {
    public int value__;
    public static VSTDTYPE VSTDT_PIC;
    public static VSTDTYPE VSTDT_PITB;
    public static VSTDTYPE VSTDT_PITBS;
    public static VSTDTYPE VSTDT_PICDATA;
    public static VSTDTYPE VSTDT_PITBDATA;
}
public class Microsoft.VisualStudio.Shell.Interop.VsTextPos : ValueType {
    public IVsHierarchy pHier;
    [ComAliasNameAttribute("Microsoft.VisualStudio.Shell.Interop.VSITEMID")]
public UInt32 itemid;
    public IVsTextLines pTextBuf;
    [ComAliasNameAttribute("Microsoft.VisualStudio.TextManager.Interop.TextSpan")]
public TextSpan span;
}
public enum Microsoft.VisualStudio.Shell.Interop.VSTREECLOSEACTIONS : Enum {
    public int value__;
    public static VSTREECLOSEACTIONS TCA_CLOSEANDDISCARD;
    public static VSTREECLOSEACTIONS TCA_CLOSECHILDREN;
    public static VSTREECLOSEACTIONS TCA_NOTHING;
}
[ComConversionLossAttribute]
public class Microsoft.VisualStudio.Shell.Interop.VSTREEDISPLAYDATA : ValueType {
    [ComAliasNameAttribute("Microsoft.VisualStudio.Shell.Interop.VSTREEDISPLAYMASK")]
public UInt32 Mask;
    [ComAliasNameAttribute("Microsoft.VisualStudio.Shell.Interop.VSTREEDISPLAYSTATE")]
public UInt32 State;
    [ComAliasNameAttribute("Microsoft.VisualStudio.Shell.Interop.VSTREEDISPLAYSTATE")]
public UInt32 StateMask;
    [ComAliasNameAttribute("Microsoft.VisualStudio.OLE.Interop.USHORT")]
public ushort Image;
    [ComAliasNameAttribute("Microsoft.VisualStudio.OLE.Interop.USHORT")]
public ushort SelectedImage;
    [ComConversionLossAttribute]
public IntPtr hImageList;
    [ComAliasNameAttribute("Microsoft.VisualStudio.OLE.Interop.USHORT")]
public ushort ForceSelectStart;
    [ComAliasNameAttribute("Microsoft.VisualStudio.OLE.Interop.USHORT")]
public ushort ForceSelectLength;
}
public class Microsoft.VisualStudio.Shell.Interop.VSTREELISTITEMCHANGE : ValueType {
    [ComAliasNameAttribute("Microsoft.VisualStudio.OLE.Interop.ULONG")]
public UInt32 index;
    [ComAliasNameAttribute("Microsoft.VisualStudio.Shell.Interop.VSTREEITEMCHANGESMASK")]
public UInt32 grfChange;
}
public enum Microsoft.VisualStudio.Shell.Interop.VSTREETEXTOPTIONS : Enum {
    public int value__;
    public static VSTREETEXTOPTIONS TTO_DEFAULT;
    public static VSTREETEXTOPTIONS TTO_DISPLAYTEXT;
    public static VSTREETEXTOPTIONS TTO_PREFIX;
    public static VSTREETEXTOPTIONS TTO_PREFIX2;
    public static VSTREETEXTOPTIONS TTO_EXTENDED;
    public static VSTREETEXTOPTIONS TTO_SORTTEXT;
    public static VSTREETEXTOPTIONS TTO_SEARCHTEXT;
    public static VSTREETEXTOPTIONS TTO_BASETEXT;
    public static VSTREETEXTOPTIONS TTO_CUSTOM;
}
public enum Microsoft.VisualStudio.Shell.Interop.VSTREETEXTOPTIONS2 : Enum {
    public int value__;
    public static VSTREETEXTOPTIONS2 TTO_SORTTEXT2;
}
public enum Microsoft.VisualStudio.Shell.Interop.VSTREETOOLTIPTYPE : Enum {
    public int value__;
    public static VSTREETOOLTIPTYPE TIPTYPE_DEFAULT;
    public static VSTREETOOLTIPTYPE TIPTYPE_ICON;
    public static VSTREETOOLTIPTYPE TIPTYPE_STATEICON;
}
public enum Microsoft.VisualStudio.Shell.Interop.VSTWT_LOCATION : Enum {
    public int value__;
    public static VSTWT_LOCATION VSTWT_LEFT;
    public static VSTWT_LOCATION VSTWT_TOP;
    public static VSTWT_LOCATION VSTWT_RIGHT;
    public static VSTWT_LOCATION VSTWT_BOTTOM;
}
public class Microsoft.VisualStudio.Shell.Interop.VsUIElementDescriptor : ValueType {
    public Guid Factory;
    [ComAliasNameAttribute("OLE.DWORD")]
public UInt32 ElementID;
}
public class Microsoft.VisualStudio.Shell.Interop.VsUIPropertyDescriptor : ValueType {
    public string name;
    public string type;
}
public enum Microsoft.VisualStudio.Shell.Interop.VSUPDATEPROJREFREASON : Enum {
    public int value__;
    public static VSUPDATEPROJREFREASON UPR_NoUpdate;
    public static VSUPDATEPROJREFREASON UPR_ProjectRenamed;
    public static VSUPDATEPROJREFREASON UPR_ProjectUsedInNewSolution;
    public static VSUPDATEPROJREFREASON UPR_ItemRenamed;
    public static VSUPDATEPROJREFREASON UPR_SolutionLocationChanged;
}
[FlagsAttribute]
public enum Microsoft.VisualStudio.Shell.Interop.VsUpToDateCheckFlags : Enum {
    public int value__;
    public static VsUpToDateCheckFlags VSUTDCF_DTEEONLY;
}
[FlagsAttribute]
public enum Microsoft.VisualStudio.Shell.Interop.VsUpToDateCheckFlags2 : Enum {
    public int value__;
    public static VsUpToDateCheckFlags2 VSUTDCF_REBUILD;
    public static VsUpToDateCheckFlags2 VSUTDCF_PACKAGE;
    public static VsUpToDateCheckFlags2 VSUTDCF_PRIVATE;
}
public enum Microsoft.VisualStudio.Shell.Interop.VSUSERCONTEXTATTRIBUTEUSAGE : Enum {
    public int value__;
    public static VSUSERCONTEXTATTRIBUTEUSAGE VSUC_Usage_Filter;
    public static VSUSERCONTEXTATTRIBUTEUSAGE VSUC_Usage_Lookup;
    public static VSUSERCONTEXTATTRIBUTEUSAGE VSUC_Usage_LookupF1;
    public static VSUSERCONTEXTATTRIBUTEUSAGE VSUC_Usage_Lookup_CaseSensitive;
    public static VSUSERCONTEXTATTRIBUTEUSAGE VSUC_Usage_LookupF1_CaseSensitive;
}
public enum Microsoft.VisualStudio.Shell.Interop.VSUSERCONTEXTPRIORITY : Enum {
    public int value__;
    public static VSUSERCONTEXTPRIORITY VSUC_Priority_None;
    public static VSUSERCONTEXTPRIORITY VSUC_Priority_Ambient;
    public static VSUSERCONTEXTPRIORITY VSUC_Priority_State;
    public static VSUSERCONTEXTPRIORITY VSUC_Priority_Project;
    public static VSUSERCONTEXTPRIORITY VSUC_Priority_ProjectItem;
    public static VSUSERCONTEXTPRIORITY VSUC_Priority_Window;
    public static VSUSERCONTEXTPRIORITY VSUC_Priority_Selection;
    public static VSUSERCONTEXTPRIORITY VSUC_Priority_MarkerSel;
    public static VSUSERCONTEXTPRIORITY VSUC_Priority_Enterprise;
    public static VSUSERCONTEXTPRIORITY VSUC_Priority_WindowFrame;
    public static VSUSERCONTEXTPRIORITY VSUC_Priority_ToolWndSel;
    public static VSUSERCONTEXTPRIORITY VSUC_Priority_Highest;
}
public enum Microsoft.VisualStudio.Shell.Interop.VSWINDOWSTATE : Enum {
    public int value__;
    public static VSWINDOWSTATE VSWS_Normal;
    public static VSWINDOWSTATE VSWS_Minimized;
    public static VSWINDOWSTATE VSWS_Maximized;
}
public enum Microsoft.VisualStudio.Shell.Interop.WellKnownTargetFrameworkVersions : Enum {
    public int value__;
    public static WellKnownTargetFrameworkVersions TargetFrameworkVersion_Unknown;
    public static WellKnownTargetFrameworkVersions TargetFrameworkVersion_20;
    public static WellKnownTargetFrameworkVersions TargetFrameworkVersion_30;
    public static WellKnownTargetFrameworkVersions TargetFrameworkVersion_35;
}
public abstract class Microsoft.VisualStudio.Shell.Interop.WellKnownToolboxDataFormats : object {
    public static string MinimumRequiredFrameworkVersion;
}
public static class Microsoft.VisualStudio.Shell.Interop.WellKnownToolboxStringMaps : object {
    public static string MultiTargeting;
}
public class Microsoft.VisualStudio.Shell.Interop.WINDOWPOS : ValueType {
    public IntPtr hwnd;
    public IntPtr hwndInsertAfter;
    public int x;
    public int y;
    public int cx;
    public int cy;
    [ComAliasNameAttribute("OLE.UINT")]
public UInt32 flags;
}
[ComVisibleAttribute("False")]
public interface Microsoft.VisualStudio.Shell.IOleMenuCommand {
    public string ParametersDescription { get; public set; }
    public string Text { get; public set; }
    public abstract virtual string get_ParametersDescription();
    public abstract virtual void set_ParametersDescription(string value);
    public abstract virtual string get_Text();
    public abstract virtual void set_Text(string value);
    public abstract virtual bool DynamicItemMatch(int cmdId);
    public abstract virtual void Invoke(object inArg, IntPtr outArg);
}
[FlagsAttribute]
public enum Microsoft.VisualStudio.TextManager.Interop.__PROMPTONLOADFLAGS : Enum {
    public int value__;
    public static __PROMPTONLOADFLAGS codepageNoPrompt;
    public static __PROMPTONLOADFLAGS codepagePrompt;
}
public enum Microsoft.VisualStudio.TextManager.Interop.__tagVSCOLORDATA : Enum {
    public int value__;
    public static __tagVSCOLORDATA CD_FOREGROUND;
    public static __tagVSCOLORDATA CD_BACKGROUND;
    public static __tagVSCOLORDATA CD_LINECOLOR;
}
public enum Microsoft.VisualStudio.TextManager.Interop.__VSEDITPROPID2 : Enum {
    public int value__;
    public static __VSEDITPROPID2 VSEDITPROPID_ViewGeneral_AccessibilityStateOverride;
}
[FlagsAttribute]
public enum Microsoft.VisualStudio.TextManager.Interop.__VSFINDBUFFERFLAGS : Enum {
    public int value__;
    public static __VSFINDBUFFERFLAGS VSFB_StartOfLine;
    public static __VSFINDBUFFERFLAGS VSFB_EndOfLine;
    public static __VSFINDBUFFERFLAGS FINDBUFFER_StartOfLine;
    public static __VSFINDBUFFERFLAGS FINDBUFFER_EndOfLine;
}
public enum Microsoft.VisualStudio.TextManager.Interop.__VSFINDERROR : Enum {
    public int value__;
    public static __VSFINDERROR VSFE_Syntax;
    public static __VSFINDERROR VSFE_NotSupported;
    public static __VSFINDERROR VSFE_NotInitialized;
    public static __VSFINDERROR VSFE_Failure;
    public static __VSFINDERROR VSFE_NoError;
}
public enum Microsoft.VisualStudio.TextManager.Interop.__VSFINDHOW : Enum {
    public int value__;
    public static __VSFINDHOW VSFH_Ambient;
    public static __VSFINDHOW VSFH_Wrap;
    public static __VSFINDHOW VSFH_TryMatch;
    public static __VSFINDHOW VSFH_SetMatch;
}
public enum Microsoft.VisualStudio.TextManager.Interop.__VSFINDOPTIONS : Enum {
    public int value__;
    public static __VSFINDOPTIONS FR_OptionMask;
    public static __VSFINDOPTIONS FR_MatchCase;
    public static __VSFINDOPTIONS FR_WholeWord;
    public static __VSFINDOPTIONS FR_Hidden;
    public static __VSFINDOPTIONS FR_Backwards;
    public static __VSFINDOPTIONS FR_Selection;
    public static __VSFINDOPTIONS FR_Block;
    public static __VSFINDOPTIONS FR_KeepCase;
    public static __VSFINDOPTIONS FR_SubFolders;
    public static __VSFINDOPTIONS FR_KeepOpen;
    public static __VSFINDOPTIONS FR_NameOnly;
    public static __VSFINDOPTIONS FR_SyntaxMask;
    public static __VSFINDOPTIONS FR_Plain;
    public static __VSFINDOPTIONS FR_Wildcard;
    public static __VSFINDOPTIONS FR_RegExpr;
    public static __VSFINDOPTIONS FR_TargetMask;
    public static __VSFINDOPTIONS FR_Document;
    public static __VSFINDOPTIONS FR_OpenDocuments;
    public static __VSFINDOPTIONS FR_Files;
    public static __VSFINDOPTIONS FR_Project;
    public static __VSFINDOPTIONS FR_Solution;
    public static __VSFINDOPTIONS FR_ActionMask;
    public static __VSFINDOPTIONS FR_MarkAll;
    public static __VSFINDOPTIONS FR_Find;
    public static __VSFINDOPTIONS FR_FindAll;
    public static __VSFINDOPTIONS FR_Replace;
    public static __VSFINDOPTIONS FR_ReplaceAll;
    public static __VSFINDOPTIONS FR_InternalMask;
    public static __VSFINDOPTIONS FR_ResetPosition;
    public static __VSFINDOPTIONS FR_FromStart;
    public static __VSFINDOPTIONS FR_OneMatchPerLine;
    public static __VSFINDOPTIONS FR_Report;
    public static __VSFINDOPTIONS FR_SelectionDefault;
    public static __VSFINDOPTIONS FR_BlockThread;
    public static __VSFINDOPTIONS FR_NoFind;
    public static __VSFINDOPTIONS FR_CommonOptions;
    public static __VSFINDOPTIONS FR_DocOptionSet;
    public static __VSFINDOPTIONS FR_FIFOptionSet;
    public static __VSFINDOPTIONS FR_OptionSet;
    public static __VSFINDOPTIONS FR_SyntaxSet;
    public static __VSFINDOPTIONS FR_Capabilities;
    public static __VSFINDOPTIONS FR_All;
    public static __VSFINDOPTIONS FR_None;
    public static __VSFINDOPTIONS FR_Procedure;
    public static __VSFINDOPTIONS FR_Pattern;
}
public enum Microsoft.VisualStudio.TextManager.Interop.__VSFINDOPTIONS2 : Enum {
    public int value__;
    public static __VSFINDOPTIONS2 FR_RegExprLineBreaks;
    public static __VSFINDOPTIONS2 FR_BlockThread;
    public static __VSFINDOPTIONS2 FR_DoNotUpdateUI;
}
public enum Microsoft.VisualStudio.TextManager.Interop.__VSFINDPOS : Enum {
    public int value__;
    public static __VSFINDPOS VSFP_Start;
    public static __VSFINDPOS VSFP_Current;
    public static __VSFINDPOS VSFP_Wrapped;
    public static __VSFINDPOS VSFP_ResetCounts;
}
public enum Microsoft.VisualStudio.TextManager.Interop.__VSFINDRESULT : Enum {
    public int value__;
    public static __VSFINDRESULT VSFR_NotFound;
    public static __VSFINDRESULT VSFR_Found;
    public static __VSFINDRESULT VSFR_Replaced;
    public static __VSFINDRESULT VSFR_EndOfDoc;
    public static __VSFINDRESULT VSFR_EndOfSearch;
    public static __VSFINDRESULT VSFR_FindInFiles;
    public static __VSFINDRESULT VSFR_NoTarget;
    public static __VSFINDRESULT VSFR_Error;
    public static __VSFINDRESULT VSFR_AndInterrupt;
    public static __VSFINDRESULT VSFR_AndReplace;
    public static __VSFINDRESULT VSFR_FLAGMASK;
    public static __VSFINDRESULT FINDREPLACE_RESULT_Failed;
    public static __VSFINDRESULT FINDREPLACE_RESULT_Found;
    public static __VSFINDRESULT FINDREPLACE_RESULT_Replaced;
    public static __VSFINDRESULT FINDREPLACE_RESULT_EndOfDoc;
    public static __VSFINDRESULT FINDREPLACE_RESULT_EndOfSearch;
    public static __VSFINDRESULT FINDREPLACE_RESULT_FindInFiles;
}
public enum Microsoft.VisualStudio.TextManager.Interop.__VSFINDRESULT2 : Enum {
    public int value__;
    public static __VSFINDRESULT2 VSFR_ReplaceIncompleteEOL;
    public static __VSFINDRESULT2 VSFR_CancelledBeforeReplacementsMade;
}
public enum Microsoft.VisualStudio.TextManager.Interop.__VSFINDRESULTLOC : Enum {
    public int value__;
    public static __VSFINDRESULTLOC VSFRL_FindResultList1;
    public static __VSFINDRESULTLOC VSFRL_FindResultList2;
    public static __VSFINDRESULTLOC FINDREPLACE_RESULTLOC_ResultsList1;
    public static __VSFINDRESULTLOC FINDREPLACE_RESULTLOC_ResultsList2;
}
public enum Microsoft.VisualStudio.TextManager.Interop.__VSFINDSTATE : Enum {
    public int value__;
    public static __VSFINDSTATE VSFS_Error;
    public static __VSFINDSTATE VSFS_Empty;
    public static __VSFINDSTATE VSFS_Start;
    public static __VSFINDSTATE VSFS_Found;
    public static __VSFINDSTATE VSFS_NotFound;
    public static __VSFINDSTATE VSFS_Wrapped;
}
public enum Microsoft.VisualStudio.TextManager.Interop.__VSFTNOTIFY : Enum {
    public int value__;
    public static __VSFTNOTIFY VSFTNOTIFY_CURRENT;
    public static __VSFTNOTIFY VSFTNOTIFY_NOTCURRENT;
    public static __VSFTNOTIFY VSFTNOTIFY_STARTFIND;
    public static __VSFTNOTIFY VSFTNOTIFY_ENDFIND;
}
public enum Microsoft.VisualStudio.TextManager.Interop.__VSFTPROPID : Enum {
    public int value__;
    public static __VSFTPROPID VSFTPROPID_DocName;
    public static __VSFTPROPID VSFTPROPID_IsDiskFile;
    public static __VSFTPROPID VSFTPROPID_BlockName;
    public static __VSFTPROPID VSFTPROPID_InitialPattern;
    public static __VSFTPROPID VSFTPROPID_InitialPatternAggressive;
    public static __VSFTPROPID VSFTPROPID_WindowFrame;
    public static __VSFTPROPID VSFTPROPID_IsFindInFilesForegroundOnly;
}
public enum Microsoft.VisualStudio.TextManager.Interop.__VSFTPROPID2 : Enum {
    public int value__;
    public static __VSFTPROPID2 VSFTPROPID_IsFindInFilesForegroundOnly;
}
public enum Microsoft.VisualStudio.TextManager.Interop.__VSTFF : Enum {
    public int value__;
    public static __VSTFF VSTFF_SIGNATURE;
    public static __VSTFF VSTFF_DETECT;
    public static __VSTFF VSTFF_HTML;
    public static __VSTFF VSTFF_XML;
    public static __VSTFF VSTFF_BINARY;
    public static __VSTFF VSTFF_CPMASK;
    public static __VSTFF VSTFF_FLAGSMASK;
}
public enum Microsoft.VisualStudio.TextManager.Interop._BufferCoordinatorMappingMode : Enum {
    public int value__;
    public static _BufferCoordinatorMappingMode BCMM_NORMAL;
    public static _BufferCoordinatorMappingMode BCMM_EXTENDEDLEFT;
    public static _BufferCoordinatorMappingMode BCMM_EXTENDEDRIGHT;
    public static _BufferCoordinatorMappingMode BCMM_EXTENDED;
    public static _BufferCoordinatorMappingMode BCMM_ENTIREBUFFER;
}
[FlagsAttribute]
public enum Microsoft.VisualStudio.TextManager.Interop._codewindowbehaviorflags : Enum {
    public int value__;
    public static _codewindowbehaviorflags CWB_DEFAULT;
    public static _codewindowbehaviorflags CWB_DISABLEDROPDOWNBAR;
    public static _codewindowbehaviorflags CWB_DISABLESPLITTER;
}
[FlagsAttribute]
public enum Microsoft.VisualStudio.TextManager.Interop._codewindowbehaviorflags2 : Enum {
    public int value__;
    public static _codewindowbehaviorflags2 CWB_DISABLEDIFF;
}
public enum Microsoft.VisualStudio.TextManager.Interop._EOLTYPE2 : Enum {
    public int value__;
    public static _EOLTYPE2 eolUNI_NEL;
    public static _EOLTYPE2 MAX_EOLTYPES2;
}
public enum Microsoft.VisualStudio.TextManager.Interop._ExpansionFunctionType : Enum {
    public int value__;
    public static _ExpansionFunctionType eft_List;
    public static _ExpansionFunctionType eft_Value;
}
public enum Microsoft.VisualStudio.TextManager.Interop._ExpansionToken : Enum {
    public int value__;
    public static _ExpansionToken ET_MyDocs;
    public static _ExpansionToken ET_InstallRoot;
}
[FlagsAttribute]
public enum Microsoft.VisualStudio.TextManager.Interop._HighlightMatchingBraceFlags : Enum {
    public int value__;
    public static _HighlightMatchingBraceFlags HMB_SUPPRESS_STATUS_BAR_UPDATE;
    public static _HighlightMatchingBraceFlags HMB_USERECTANGLEBRACES;
}
[FlagsAttribute]
public enum Microsoft.VisualStudio.TextManager.Interop._NavigableLocationResolverFlags : Enum {
    public int value__;
    public static _NavigableLocationResolverFlags NLR_ABSOLUTEPATH;
    public static _NavigableLocationResolverFlags NLR_PARTIALPATH;
    public static _NavigableLocationResolverFlags NLR_URL;
}
[FlagsAttribute]
public enum Microsoft.VisualStudio.TextManager.Interop._QuerySendCommitFlags : Enum {
    public int value__;
    public static _QuerySendCommitFlags QSCF_DO_SEND_ENTER_COMMIT;
    public static _QuerySendCommitFlags QSCF_DO_NOT_SEND_ENTER_COMMIT;
}
public enum Microsoft.VisualStudio.TextManager.Interop._VIEWFRAMETYPE : Enum {
    public int value__;
    public static _VIEWFRAMETYPE vftAny;
    public static _VIEWFRAMETYPE vftCodeWindow;
    public static _VIEWFRAMETYPE vftToolWindow;
}
public enum Microsoft.VisualStudio.TextManager.Interop._vsIndentStyle : Enum {
    public int value__;
    public static _vsIndentStyle vsIndentStyleNone;
    public static _vsIndentStyle vsIndentStyleDefault;
    public static _vsIndentStyle vsIndentStyleSmart;
}
[FlagsAttribute]
public enum Microsoft.VisualStudio.TextManager.Interop.ADD_OUTLINE_REGION_FLAGS : Enum {
    public int value__;
    public static ADD_OUTLINE_REGION_FLAGS AOR_DEFAULT;
    public static ADD_OUTLINE_REGION_FLAGS AOR_PRESERVE_EXISTING;
    public static ADD_OUTLINE_REGION_FLAGS AOR_NON_UNDOABLE;
}
[ComConversionLossAttribute]
public class Microsoft.VisualStudio.TextManager.Interop.AtomicText : ValueType {
    [ComAliasNameAttribute("Microsoft.VisualStudio.TextManager.Interop.AtomicText")]
[ComConversionLossAttribute]
public IntPtr pNext;
    [ComAliasNameAttribute("Microsoft.VisualStudio.TextManager.Interop.CharIndex")]
public int iIndex;
    [ComConversionLossAttribute]
[ComAliasNameAttribute("Microsoft.VisualStudio.OLE.Interop.WCHAR")]
public string pszAtomicText;
    public object punkAtom;
}
[FlagsAttribute]
public enum Microsoft.VisualStudio.TextManager.Interop.AtomicTextProviderFlags : Enum {
    public int value__;
    public static AtomicTextProviderFlags atpDefault;
    public static AtomicTextProviderFlags atpGlyph;
    public static AtomicTextProviderFlags atpTextAttributes;
}
public enum Microsoft.VisualStudio.TextManager.Interop.BufferCoordinatorReplicationDirection : Enum {
    public int value__;
    public static BufferCoordinatorReplicationDirection BCRD_PRIMARY_TO_SECONDARY;
    public static BufferCoordinatorReplicationDirection BCRD_SECONDARY_TO_PRIMARY;
}
[ComConversionLossAttribute]
public class Microsoft.VisualStudio.TextManager.Interop.BUFFERINITEX : ValueType {
    [ComAliasNameAttribute("Microsoft.VisualStudio.OLE.Interop.DWORD")]
public UInt32 dwFlags;
    public object pStorage;
    [ComConversionLossAttribute]
[ComAliasNameAttribute("Microsoft.VisualStudio.OLE.Interop.WCHAR")]
public IntPtr pszText;
    public int iLength;
}
[FlagsAttribute]
public enum Microsoft.VisualStudio.TextManager.Interop.BufferLockFlags : Enum {
    public int value__;
    public static BufferLockFlags BLF_READ;
    public static BufferLockFlags BLF_READ_AND_WRITE;
}
[FlagsAttribute]
public enum Microsoft.VisualStudio.TextManager.Interop.BUFFERSTATEFLAGS : Enum {
    public int value__;
    public static BUFFERSTATEFLAGS BSF_USER_READONLY;
    public static BUFFERSTATEFLAGS BSF_FILESYS_READONLY;
    public static BUFFERSTATEFLAGS BSF_MODIFIED;
    public static BUFFERSTATEFLAGS BSF_SUPPRESS_UI;
    public static BUFFERSTATEFLAGS BSF_RESERVED;
}
public enum Microsoft.VisualStudio.TextManager.Interop.CASESELECTION_TYPE : Enum {
    public int value__;
    public static CASESELECTION_TYPE CASESELECTION_UPPER;
    public static CASESELECTION_TYPE CASESELECTION_LOWER;
    public static CASESELECTION_TYPE CASESELECTION_TITLE;
}
[FlagsAttribute]
public enum Microsoft.VisualStudio.TextManager.Interop.CHANGE_HIDDEN_REGION_FLAGS : Enum {
    public int value__;
    public static CHANGE_HIDDEN_REGION_FLAGS chrDefault;
    public static CHANGE_HIDDEN_REGION_FLAGS chrNonUndoable;
}
[FlagsAttribute]
public enum Microsoft.VisualStudio.TextManager.Interop.CHANGE_SYNTHETIC_REGION_FLAGS : Enum {
    public int value__;
    public static CHANGE_SYNTHETIC_REGION_FLAGS CSR_DEFAULT;
    public static CHANGE_SYNTHETIC_REGION_FLAGS CSR_NONUNDOABLE;
}
[FlagsAttribute]
public enum Microsoft.VisualStudio.TextManager.Interop.ChangeClusterFlags : Enum {
    public int value__;
    public static ChangeClusterFlags CCE_BEFORE_OPEN;
    public static ChangeClusterFlags CCE_BEFORE_CLOSE;
    public static ChangeClusterFlags CCE_AFTER_CLOSE;
    public static ChangeClusterFlags CCE_UNDO;
    public static ChangeClusterFlags CCE_REDO;
    public static ChangeClusterFlags CCE_FLUSH;
    public static ChangeClusterFlags CCE_ABORTED;
}
[FlagsAttribute]
public enum Microsoft.VisualStudio.TextManager.Interop.ChangeCommitGestureFlags : Enum {
    public int value__;
    public static ChangeCommitGestureFlags CCG_SAVE;
    public static ChangeCommitGestureFlags CCG_MULTILINE_CHANGE;
    public static ChangeCommitGestureFlags CCG_CARET_ON_NEW_BUFFER_LINE;
    public static ChangeCommitGestureFlags CCG_MASS_REPLACE;
    public static ChangeCommitGestureFlags CCG_ENTER_COMMAND;
    public static ChangeCommitGestureFlags CCG_FIND_STARTING;
    public static ChangeCommitGestureFlags CCG_LOST_FOCUS;
    public static ChangeCommitGestureFlags CCG_DESTRUCTIVEACTION;
    public static ChangeCommitGestureFlags CCG_PROGRAMMATIC_CHANGE;
}
[FlagsAttribute]
public enum Microsoft.VisualStudio.TextManager.Interop.ChangeCommitGestureFlags2 : Enum {
    public int value__;
    public static ChangeCommitGestureFlags2 CCG_REFORMAT;
}
[ComConversionLossAttribute]
public class Microsoft.VisualStudio.TextManager.Interop.ChangeInput : ValueType {
    [ComAliasNameAttribute("Microsoft.VisualStudio.TextManager.Interop.TextSpan")]
public TextSpan m_DelSpan;
    public int m_iOldLen;
    public int m_iNewLen;
    [ComAliasNameAttribute("Microsoft.VisualStudio.OLE.Interop.WCHAR")]
[ComConversionLossAttribute]
public IntPtr m_pszNewText;
    [ComAliasNameAttribute("Microsoft.VisualStudio.OLE.Interop.DWORD")]
public UInt32 m_dwFlags;
}
public enum Microsoft.VisualStudio.TextManager.Interop.CHARFMT : Enum {
    public int value__;
    public static CHARFMT CHARFMT_UNI;
    public static CHARFMT CHARFMT_UNI_SWAP;
    public static CHARFMT CHARFMT_MBCS;
    public static CHARFMT CHARFMT_UTF8;
}
public enum Microsoft.VisualStudio.TextManager.Interop.CODEMEMBERTYPE : Enum {
    public int value__;
    public static CODEMEMBERTYPE CODEMEMBERTYPE_EVENTS;
    public static CODEMEMBERTYPE CODEMEMBERTYPE_EVENT_HANDLERS;
    public static CODEMEMBERTYPE CODEMEMBERTYPE_USER_FUNCTIONS;
}
public enum Microsoft.VisualStudio.TextManager.Interop.COLORINDEX : Enum {
    public int value__;
    public static COLORINDEX CI_USERTEXT_FG;
    public static COLORINDEX CI_USERTEXT_BK;
    public static COLORINDEX CI_FIRSTFIXEDCOLOR;
    public static COLORINDEX CI_BLACK;
    public static COLORINDEX CI_WHITE;
    public static COLORINDEX CI_MAROON;
    public static COLORINDEX CI_DARKGREEN;
    public static COLORINDEX CI_BROWN;
    public static COLORINDEX CI_DARKBLUE;
    public static COLORINDEX CI_PURPLE;
    public static COLORINDEX CI_AQUAMARINE;
    public static COLORINDEX CI_LIGHTGRAY;
    public static COLORINDEX CI_DARKGRAY;
    public static COLORINDEX CI_RED;
    public static COLORINDEX CI_GREEN;
    public static COLORINDEX CI_YELLOW;
    public static COLORINDEX CI_BLUE;
    public static COLORINDEX CI_MAGENTA;
    public static COLORINDEX CI_CYAN;
    public static COLORINDEX CI_LASTFIXEDCOLOR;
    public static COLORINDEX CI_SYSSEL_FG;
    public static COLORINDEX CI_SYSSEL_BK;
    public static COLORINDEX CI_SYSINACTSEL_FG;
    public static COLORINDEX CI_SYSINACTSEL_BK;
    public static COLORINDEX CI_SYSWIDGETMGN_BK;
    public static COLORINDEX CI_SYSPLAINTEXT_FG;
    public static COLORINDEX CI_SYSPLAINTEXT_BK;
    public static COLORINDEX CI_PALETTESIZE;
    public static COLORINDEX CI_FORBIDCUSTOMIZATION;
    public static COLORINDEX CI_SYSTEXT_FG;
    public static COLORINDEX CI_SYSTEXT_BK;
}
public enum Microsoft.VisualStudio.TextManager.Interop.COLORIZER_ATTRIBUTE : Enum {
    public int value__;
    public static COLORIZER_ATTRIBUTE COLOR_INDEX_MASK;
    public static COLORIZER_ATTRIBUTE COLOR_MARKER_MASK;
    public static COLORIZER_ATTRIBUTE LINE_MARKER_MASK;
    public static COLORIZER_ATTRIBUTE PRIVATE_CLIENT_MASK;
    public static COLORIZER_ATTRIBUTE HUMAN_TEXT_ATTR;
    public static COLORIZER_ATTRIBUTE SEPARATOR_AFTER_ATTR;
    public static COLORIZER_ATTRIBUTE PRIVATE_EDITOR_MASK;
}
public enum Microsoft.VisualStudio.TextManager.Interop.COMMONLANGUAGEBLOCK : Enum {
    public int value__;
    public static COMMONLANGUAGEBLOCK CLB_TRY_BLOCK;
    public static COMMONLANGUAGEBLOCK CLB_EXCEPTION_BLOCK;
    public static COMMONLANGUAGEBLOCK CLB_FINAL_BLOCK;
}
public enum Microsoft.VisualStudio.TextManager.Interop.ContainedLanguageRefreshMode : Enum {
    public int value__;
    public static ContainedLanguageRefreshMode CLRM_COMPILEFILE;
    public static ContainedLanguageRefreshMode CLRM_COMPILEPROJECT;
}
public enum Microsoft.VisualStudio.TextManager.Interop.ContainedLanguageRenameType : Enum {
    public int value__;
    public static ContainedLanguageRenameType CLRT_CLASS;
    public static ContainedLanguageRenameType CLRT_CLASSMEMBER;
    public static ContainedLanguageRenameType CLRT_NAMESPACE;
    public static ContainedLanguageRenameType CLRT_OTHER;
}
[FlagsAttribute]
public enum Microsoft.VisualStudio.TextManager.Interop.CUSTOM_DROP_HANDLER_FLAGS : Enum {
    public int value__;
    public static CUSTOM_DROP_HANDLER_FLAGS CDH_DEFAULT;
    public static CUSTOM_DROP_HANDLER_FLAGS CDH_OVER_SELF;
    public static CUSTOM_DROP_HANDLER_FLAGS CDH_INVALID_DEST;
}
public enum Microsoft.VisualStudio.TextManager.Interop.DATA_OBJECT_RENDER_HINT : Enum {
    public int value__;
    public static DATA_OBJECT_RENDER_HINT DORH_DEFAULT;
    public static DATA_OBJECT_RENDER_HINT DORH_MOVE_IN_SAME_DOC;
    public static DATA_OBJECT_RENDER_HINT DORH_DROP;
    public static DATA_OBJECT_RENDER_HINT DORH_CLIPBOARD;
    public static DATA_OBJECT_RENDER_HINT DORH_TOOLBOX;
    public static DATA_OBJECT_RENDER_HINT DORH_PREVIEW;
}
[FlagsAttribute]
public enum Microsoft.VisualStudio.TextManager.Interop.DeeperLayerLineIndexToLocalFlags : Enum {
    public int value__;
    public static DeeperLayerLineIndexToLocalFlags DLI_DEFAULT;
    public static DeeperLayerLineIndexToLocalFlags DLI_CLOSEST;
    public static DeeperLayerLineIndexToLocalFlags DLI_RIGHTMOST;
    public static DeeperLayerLineIndexToLocalFlags DLI_AVOID_OUTER_EDGE;
    public static DeeperLayerLineIndexToLocalFlags dliDefault;
    public static DeeperLayerLineIndexToLocalFlags dliClosest;
    public static DeeperLayerLineIndexToLocalFlags dliRightmost;
}
public enum Microsoft.VisualStudio.TextManager.Interop.DEFAULTITEMS : Enum {
    public int value__;
    public static DEFAULTITEMS COLITEM_TEXT;
    public static DEFAULTITEMS COLITEM_KEYWORD;
    public static DEFAULTITEMS COLITEM_COMMENT;
    public static DEFAULTITEMS COLITEM_IDENTIFIER;
    public static DEFAULTITEMS COLITEM_STRING;
    public static DEFAULTITEMS COLITEM_NUMBER;
    public static DEFAULTITEMS DEFAULT_ITEM_COUNT;
}
public enum Microsoft.VisualStudio.TextManager.Interop.DROPDOWNENTRYTYPE : Enum {
    public int value__;
    public static DROPDOWNENTRYTYPE ENTRY_TEXT;
    public static DROPDOWNENTRYTYPE ENTRY_ATTR;
    public static DROPDOWNENTRYTYPE ENTRY_IMAGE;
}
public enum Microsoft.VisualStudio.TextManager.Interop.DROPDOWNENTRYTYPE2 : Enum {
    public int value__;
    public static DROPDOWNENTRYTYPE2 ENTRY_UNINDENT_COLLAPSED;
}
public enum Microsoft.VisualStudio.TextManager.Interop.DROPDOWNFONTATTR : Enum {
    public int value__;
    public static DROPDOWNFONTATTR FONTATTR_PLAIN;
    public static DROPDOWNFONTATTR FONTATTR_BOLD;
    public static DROPDOWNFONTATTR FONTATTR_ITALIC;
    public static DROPDOWNFONTATTR FONTATTR_UNDERLINE;
    public static DROPDOWNFONTATTR FONTATTR_GRAY;
}
[FlagsAttribute]
public enum Microsoft.VisualStudio.TextManager.Interop.ENUMMARKERFLAGS : Enum {
    public int value__;
    public static ENUMMARKERFLAGS EM_DEFAULT;
    public static ENUMMARKERFLAGS EM_ENTIREBUFFER;
    public static ENUMMARKERFLAGS EM_ALLTYPES;
    public static ENUMMARKERFLAGS EM_SORTDESCENDING;
    public static ENUMMARKERFLAGS EM_SORTPRIORITY;
    public static ENUMMARKERFLAGS EM_GLYPHINSPAN;
    public static ENUMMARKERFLAGS EM_INCLUDEINVISIBLE;
    public static ENUMMARKERFLAGS EM_CONTAINED;
}
public enum Microsoft.VisualStudio.TextManager.Interop.EOLTYPE : Enum {
    public int value__;
    public static EOLTYPE eolCRLF;
    public static EOLTYPE eolCR;
    public static EOLTYPE eolLF;
    public static EOLTYPE eolUNI_LINESEP;
    public static EOLTYPE eolUNI_PARASEP;
    public static EOLTYPE eolEOF;
    public static EOLTYPE eolNONE;
    public static EOLTYPE MAX_EOLTYPES;
}
public class Microsoft.VisualStudio.TextManager.Interop.ExternalError : ValueType {
    public int iLine;
    public int iCol;
    public int iErrorID;
    [ComAliasNameAttribute("Microsoft.VisualStudio.OLE.Interop.BOOL")]
public int fError;
    public string bstrText;
    public string bstrFileName;
}
[FlagsAttribute]
public enum Microsoft.VisualStudio.TextManager.Interop.FIND_HIDDEN_REGION_FLAGS : Enum {
    public int value__;
    public static FIND_HIDDEN_REGION_FLAGS FHR_ALL_REGIONS;
    public static FIND_HIDDEN_REGION_FLAGS FHR_BY_CLIENT_DATA;
    public static FIND_HIDDEN_REGION_FLAGS FHR_BY_TYPE;
    public static FIND_HIDDEN_REGION_FLAGS FHR_INTERSECTS_SPAN;
    public static FIND_HIDDEN_REGION_FLAGS FHR_EXACT_SPAN;
    public static FIND_HIDDEN_REGION_FLAGS FHR_EDITOR_CONTROLLED_ONLY;
    public static FIND_HIDDEN_REGION_FLAGS FHR_CLIENT_CONTROLLED_ONLY;
    public static FIND_HIDDEN_REGION_FLAGS FHR_ENTIRELY_WITHIN_SPAN;
    public static FIND_HIDDEN_REGION_FLAGS FHR_INNERMOST;
    public static FIND_HIDDEN_REGION_FLAGS FHR_VISIBLE_ONLY;
    public static FIND_HIDDEN_REGION_FLAGS FHR_PREFER_START_IN_SPAN;
    public static FIND_HIDDEN_REGION_FLAGS FHR_MUST_START_IN_SPAN;
    public static FIND_HIDDEN_REGION_FLAGS fhrAllRegions;
    public static FIND_HIDDEN_REGION_FLAGS fhrByClientData;
    public static FIND_HIDDEN_REGION_FLAGS fhrByType;
    public static FIND_HIDDEN_REGION_FLAGS fhrWithinSpan;
    public static FIND_HIDDEN_REGION_FLAGS fhrExactSpan;
    public static FIND_HIDDEN_REGION_FLAGS fhrEditorControlledOnly;
    public static FIND_HIDDEN_REGION_FLAGS fhrClientControlledOnly;
}
[FlagsAttribute]
public enum Microsoft.VisualStudio.TextManager.Interop.FIND_SYNTHETIC_REGION_FLAGS : Enum {
    public int value__;
    public static FIND_SYNTHETIC_REGION_FLAGS FSR_ALL_REGIONS;
    public static FIND_SYNTHETIC_REGION_FLAGS FSR_BY_CLIENT_DATA;
    public static FIND_SYNTHETIC_REGION_FLAGS FSR_WITHIN_SPAN;
    public static FIND_SYNTHETIC_REGION_FLAGS FSR_EXACT_SPAN;
}
[FlagsAttribute]
public enum Microsoft.VisualStudio.TextManager.Interop.FINDMARKERFLAGS : Enum {
    public int value__;
    public static FINDMARKERFLAGS FM_FORWARD;
    public static FINDMARKERFLAGS FM_BACKWARD;
}
[ComConversionLossAttribute]
public class Microsoft.VisualStudio.TextManager.Interop.FONTCOLORPREFERENCES : ValueType {
    [ComConversionLossAttribute]
public IntPtr pguidColorService;
    public object pColorTable;
    [ComConversionLossAttribute]
public IntPtr hRegularViewFont;
    [ComConversionLossAttribute]
public IntPtr hBoldViewFont;
    [ComConversionLossAttribute]
public IntPtr pguidFontCategory;
    [ComConversionLossAttribute]
public IntPtr pguidColorCategory;
}
[ComConversionLossAttribute]
public class Microsoft.VisualStudio.TextManager.Interop.FONTCOLORPREFERENCES2 : ValueType {
    [ComConversionLossAttribute]
public IntPtr pguidColorService;
    public object pColorTable;
    public IntPtr hRegularViewFont;
    public IntPtr hBoldViewFont;
    [ComConversionLossAttribute]
public IntPtr pguidFontCategory;
    [ComConversionLossAttribute]
public IntPtr pguidColorCategory;
}
[FlagsAttribute]
public enum Microsoft.VisualStudio.TextManager.Interop.FONTFLAGS : Enum {
    public int value__;
    public static FONTFLAGS FF_DEFAULT;
    public static FONTFLAGS FF_BOLD;
    public static FONTFLAGS FF_STRIKETHROUGH;
}
public class Microsoft.VisualStudio.TextManager.Interop.FRAMEPREFERENCES : ValueType {
    public UInt32 fHorzScrollbar;
    public UInt32 fVertScrollbar;
}
public class Microsoft.VisualStudio.TextManager.Interop.FRAMEPREFERENCES2 : ValueType {
    public UInt32 fHorzScrollbar;
    public UInt32 fVertScrollbar;
}
[FlagsAttribute]
public enum Microsoft.VisualStudio.TextManager.Interop.GetSelectedAtomFlags : Enum {
    public int value__;
    public static GetSelectedAtomFlags gsaDefault;
}
[FlagsAttribute]
public enum Microsoft.VisualStudio.TextManager.Interop.GLDE_FLAGS : Enum {
    public int value__;
    public static GLDE_FLAGS gldeDefault;
    public static GLDE_FLAGS gldeSubset;
    public static GLDE_FLAGS gldeColorizerState;
    public static GLDE_FLAGS gldeSyntaxAttr;
    public static GLDE_FLAGS gldeMarkerAttr;
    public static GLDE_FLAGS gldeFullAttr;
    public static GLDE_FLAGS gldeNoReadLock;
    public static GLDE_FLAGS gldeNoWidgetMargin;
}
[FlagsAttribute]
public enum Microsoft.VisualStudio.TextManager.Interop.GLDE_FLAGS2 : Enum {
    public int value__;
    public static GLDE_FLAGS2 gldeUsePaintView;
}
[FlagsAttribute]
public enum Microsoft.VisualStudio.TextManager.Interop.GLYPHDRAWFLAGS : Enum {
    public int value__;
    public static GLYPHDRAWFLAGS GDF_DEFAULT;
    public static GLYPHDRAWFLAGS GDF_MULTILINE;
    public static GLYPHDRAWFLAGS GDF_TOPEDGE;
    public static GLYPHDRAWFLAGS GDF_BOTTOMEDGE;
}
public enum Microsoft.VisualStudio.TextManager.Interop.HIDDEN_REGION_BEHAVIOR : Enum {
    public int value__;
    public static HIDDEN_REGION_BEHAVIOR hrbClientControlled;
    public static HIDDEN_REGION_BEHAVIOR hrbEditorControlled;
}
public enum Microsoft.VisualStudio.TextManager.Interop.HIDDEN_REGION_BEHAVIOR2 : Enum {
    public int value__;
    public static HIDDEN_REGION_BEHAVIOR2 hrbClientDrawn;
    public static HIDDEN_REGION_BEHAVIOR2 hrbNoUserControls;
}
public enum Microsoft.VisualStudio.TextManager.Interop.HIDDEN_REGION_EVENT : Enum {
    public int value__;
    public static HIDDEN_REGION_EVENT hreRegionDeleted;
    public static HIDDEN_REGION_EVENT hreRegionResurrected;
    public static HIDDEN_REGION_EVENT hreRegionReloaded;
    public static HIDDEN_REGION_EVENT hreBeforeRegionExpanded;
    public static HIDDEN_REGION_EVENT hreAfterRegionExpanded;
    public static HIDDEN_REGION_EVENT hreBeforeRegionCollapsed;
    public static HIDDEN_REGION_EVENT hreAfterRegionCollapsed;
}
public enum Microsoft.VisualStudio.TextManager.Interop.HIDDEN_REGION_STATE : Enum {
    public int value__;
    public static HIDDEN_REGION_STATE hrsDefault;
    public static HIDDEN_REGION_STATE hrsExpanded;
}
public enum Microsoft.VisualStudio.TextManager.Interop.HIDDEN_REGION_TYPE : Enum {
    public int value__;
    public static HIDDEN_REGION_TYPE hrtConcealed;
    public static HIDDEN_REGION_TYPE hrtCollapsible;
}
public class Microsoft.VisualStudio.TextManager.Interop.INITVIEW : ValueType {
    public UInt32 fVirtualSpace;
    public UInt32 fStreamSelMode;
    public UInt32 fOvertype;
    public UInt32 fVisibleWhitespace;
    public UInt32 fWidgetMargin;
    public UInt32 fSelectionMargin;
    public UInt32 fDragDropMove;
    public UInt32 fHotURLs;
    [ComAliasNameAttribute("Microsoft.VisualStudio.TextManager.Interop.vsIndentStyle")]
public vsIndentStyle IndentStyle;
}
[FlagsAttribute]
public enum Microsoft.VisualStudio.TextManager.Interop.IntellisenseHostFlags : Enum {
    public int value__;
    public static IntellisenseHostFlags IHF_READONLYCONTEXT;
    public static IntellisenseHostFlags IHF_NOSEPARATESUBJECT;
    public static IntellisenseHostFlags IHF_SINGLELINESUBJECT;
    public static IntellisenseHostFlags IHF_FORCECOMMITTOCONTEXT;
    public static IntellisenseHostFlags IHF_OVERTYPE;
}
[GuidAttribute("35355DA7-3EEA-452E-89F3-68344278F806")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.TextManager.Interop.IPersistFileCheckSum {
    public abstract virtual int CalculateCheckSum(Guid& guidCheckSumAlgorithm, UInt32 cbBufferSize, Byte[] pbHash, UInt32& pcbActualSize);
}
[GuidAttribute("15D2C32A-0770-4872-BB5F-EC21B0FA2436")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.TextManager.Interop.IVsAction {
    public abstract virtual int CanMerge(IVsAction pAction);
    public abstract virtual int Merge(IVsAction pAction);
}
[GuidAttribute("29CDD341-0F95-42F2-B71C-75BC51A7EB72")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.TextManager.Interop.IVsAtomicTextProvider {
    public abstract virtual int GetAtomFlags(UInt32& pdwFlags);
    public abstract virtual int GetAtomAttributes(UInt32 dwLength, UInt32[] pColorAttr);
    public abstract virtual int GetAtomGlyphWidth(int iPixSpaceWidth, Int32& pGlyphPix);
    public abstract virtual int DrawAtomGlyph(UInt32 dwFlags, IntPtr hdc, RECT[] pRect);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("5151882E-58E1-4856-BFE8-4F17A30BE839")]
public interface Microsoft.VisualStudio.TextManager.Interop.IVsAutoOutliningClient {
    public abstract virtual int QueryWaitForAutoOutliningCallback(Int32& fWait);
}
[GuidAttribute("66EE1DDE-6336-4A1E-9C99-D2864285ABA6")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.TextManager.Interop.IVsBufferExtraFiles {
    public abstract virtual int GetQueryEditFilesDocuments(IVsTextBuffer pBuffer, String& bstrMkDocuments);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("4C4095EC-0AF1-48B2-A900-DB496765EE9E")]
[ComConversionLossAttribute]
public interface Microsoft.VisualStudio.TextManager.Interop.IVsButtonBar {
    public abstract virtual int Attach(IntPtr hwndParent, int cButtons, IntPtr hImageList, IVsButtonBarClient pClient);
    public abstract virtual void Detach();
    public abstract virtual int SetHeight(int iHeight);
    public abstract virtual int GetSize(Int32& piWidth, Int32& piHeight);
    public abstract virtual int SetCurrentSelection(int iCurButton);
    public abstract virtual int GetCurrentSelection(Int32& piCurButton);
    public abstract virtual int GetClient(IVsButtonBarClient& ppClient);
}
[GuidAttribute("B59AF843-E075-496E-A00D-E8EEB3C748EB")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.TextManager.Interop.IVsButtonBarClient {
    public abstract virtual int SetButtonBar(IVsButtonBar pButtonBar);
    public abstract virtual int GetButtonTipText(int iButton, String& pbstrTip);
    public abstract virtual int OnButtonPressed(int iButton);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("B4D5B0A3-1945-4F5F-B5E1-4ADD352E78C1")]
[ComConversionLossAttribute]
public interface Microsoft.VisualStudio.TextManager.Interop.IVsButtonBarManager {
    public abstract virtual int AddButtonBar(int cButtons, IntPtr hImageList, IVsButtonBarClient pClient);
    public abstract virtual int GetButtonBar(IVsButtonBar& ppButtonBar);
    public abstract virtual int RemoveButtonBar();
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("215564F6-7007-4826-9384-9ED0E962DE27")]
public interface Microsoft.VisualStudio.TextManager.Interop.IVsCanCoordinatorClipTextSpan {
    public abstract virtual int ShouldClipSpanToValidSpanInSecondaryBuffer(IVsTextLines pPrimaryBuffer, IVsTextLines pSecondaryBuffer, TextSpan[] ptsTextSpanInPrimaryBuffer, Int32& pfShouldClipTextSpan);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("E55C4E80-A01C-47E8-9E94-D664B94DF6CF")]
public interface Microsoft.VisualStudio.TextManager.Interop.IVsChangeClusterEvents {
    public abstract virtual void OnChangeClusterOpening(UInt32 dwFlags);
    public abstract virtual void OnChangeClusterClosing(UInt32 dwFlags);
}
[GuidAttribute("E33C4DCF-F50C-4356-8CD8-87A7F213337B")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.TextManager.Interop.IVsChangeTrackingUndoManager {
    public abstract virtual int MarkCleanState();
    public abstract virtual int QueryCleanState(Int32& pfClean);
    public abstract virtual int AdviseTrackingClient(IVsUndoTrackingEvents pUndoTrackingEvents);
    public abstract virtual int UnadviseTrackingClient();
}
[GuidAttribute("49539BFE-84DD-4B7E-8A82-B9E1C7639940")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.TextManager.Interop.IVsCodePageSelection {
    public abstract virtual int ShowEncodingDialog(string pszFileName, IVsUserData pUserData);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("8560CECD-DFAC-4F7B-9D2A-E6D9810F3443")]
public interface Microsoft.VisualStudio.TextManager.Interop.IVsCodeWindow {
    public abstract virtual int SetBuffer(IVsTextLines pBuffer);
    public abstract virtual int GetBuffer(IVsTextLines& ppBuffer);
    public abstract virtual int GetPrimaryView(IVsTextView& ppView);
    public abstract virtual int GetSecondaryView(IVsTextView& ppView);
    public abstract virtual int SetViewClassID(Guid& clsidView);
    public abstract virtual int GetViewClassID(Guid& pclsidView);
    public abstract virtual int SetBaseEditorCaption(String[] pszBaseEditorCaption);
    public abstract virtual int GetEditorCaption(READONLYSTATUS dwReadOnly, String& pbstrEditorCaption);
    public abstract virtual int Close();
    public abstract virtual int GetLastActiveView(IVsTextView& ppView);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("81A91FB7-7625-461A-8A9C-B1CC701ECCC5")]
public interface Microsoft.VisualStudio.TextManager.Interop.IVsCodeWindow2 {
    public abstract virtual int GetEmbeddedCodeWindowCount(Int32& piCount);
    public abstract virtual int GetEmbeddedCodeWindow(int iIndex, IVsCodeWindow& ppCodeWindow);
    public abstract virtual int GetContainingCodeWindow(IVsCodeWindow& ppCodeWindow);
}
[GuidAttribute("26ACC7FD-C665-426B-B120-E96762C5DD1A")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.TextManager.Interop.IVsCodeWindowEvents {
    public abstract virtual int OnNewView(IVsTextView pView);
    public abstract virtual int OnCloseView(IVsTextView pView);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("6703F718-2939-40C2-8F8F-AB393378AEC8")]
public interface Microsoft.VisualStudio.TextManager.Interop.IVsCodeWindowEvents2 {
    public abstract virtual int OnNewEmbeddedCodeWindow(IVsCodeWindow pCodeWindow);
    public abstract virtual int OnCloseEmbeddedCodeWindow(IVsCodeWindow pCodeWindow);
}
[GuidAttribute("186F17A5-7270-4BC5-A8DE-72F4A0E49647")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.TextManager.Interop.IVsCodeWindowEx {
    public abstract virtual int Initialize(UInt32 grfCodeWindowBehaviorFlags, VSUSERCONTEXTATTRIBUTEUSAGE usageAuxUserContext, string szNameAuxUserContext, string szValueAuxUserContext, UInt32 InitViewFlags, INITVIEW[] pInitView);
    public abstract virtual int IsReadOnly();
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("4758CB90-6110-4440-B577-2E3FC91E4B84")]
public interface Microsoft.VisualStudio.TextManager.Interop.IVsCodeWindowManager {
    public abstract virtual int AddAdornments();
    public abstract virtual int RemoveAdornments();
    public abstract virtual int OnNewView(IVsTextView pView);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("56694A40-78D0-45DD-AB15-681BC207579C")]
public interface Microsoft.VisualStudio.TextManager.Interop.IVsColorableItem {
    public abstract virtual int GetDefaultColors(COLORINDEX[] piForeground, COLORINDEX[] piBackground);
    public abstract virtual int GetDefaultFontFlags(UInt32& pdwFontFlags);
    public abstract virtual int GetDisplayName(String& pbstrName);
}
[GuidAttribute("6698EF11-FF17-441C-8C5D-BC24A339B37D")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.TextManager.Interop.IVsColorizer {
    public abstract virtual int GetStateMaintenanceFlag(Int32& pfFlag);
    public abstract virtual int GetStartState(Int32& piStartState);
    public abstract virtual int ColorizeLine(int iLine, int iLength, IntPtr pszText, int iState, UInt32[] pAttributes);
    public abstract virtual int GetStateAtEndOfLine(int iLine, int iLength, IntPtr pText, int iState);
    public abstract virtual void CloseColorizer();
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("868A4381-537A-4D61-803C-301819CE2C2F")]
public interface Microsoft.VisualStudio.TextManager.Interop.IVsColorizer2 {
    public abstract virtual int BeginColorization();
    public abstract virtual int EndColorization();
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("34896BBB-A3D5-4C80-BCCE-E9271BEEDC11")]
public interface Microsoft.VisualStudio.TextManager.Interop.IVsCommandWindowCompletion {
    public abstract virtual int SetCompletionContext(string pszFilePath, IVsTextLines pBuffer, TextSpan[] ptsCurStatement, object punkContext);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("957970B0-71E1-11D3-AFF1-00105A9991EF")]
public interface Microsoft.VisualStudio.TextManager.Interop.IVsCommitGestureSink {
    public abstract virtual void OnCommitGesture(UInt32 dwGestureFlags);
    public abstract virtual void FlushCommitEventIfCurrentClusterIsOutermost();
}
[GuidAttribute("0EF79249-B0BF-4CD0-A966-C4713546C3A5")]
[ComConversionLossAttribute]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.TextManager.Interop.IVsCompletionSet {
    public abstract virtual UInt32 GetFlags();
    public abstract virtual int GetCount();
    public abstract virtual int GetDisplayText(int iIndex, String& ppszText, Int32[] piGlyph);
    public abstract virtual int GetImageList(IntPtr& phImages);
    public abstract virtual int GetDescriptionText(int iIndex, String& pbstrDescription);
    public abstract virtual int GetInitialExtent(Int32& piLine, Int32& piStartCol, Int32& piEndCol);
    public abstract virtual int GetBestMatch(string pszSoFar, int iLength, Int32& piIndex, UInt32& pdwFlags);
    public abstract virtual int OnCommit(string pszSoFar, int iIndex, int fSelected, ushort cCommit, String& pbstrCompleteWord);
    public abstract virtual void Dismiss();
}
[GuidAttribute("B30B03B0-DB30-43C7-A959-C81522988F8E")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.TextManager.Interop.IVsCompletionSet3 {
    public abstract virtual int GetContextIcon(int iIndex, Int32& piGlyph);
    public abstract virtual int GetContextImageList(IntPtr& phImageList);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("CB570E9B-7B88-4159-9819-6F7E71EFFA95")]
public interface Microsoft.VisualStudio.TextManager.Interop.IVsCompletionSetBuilder {
    public abstract virtual int GetBuilderCount(Int32& piCount);
    public abstract virtual int GetBuilderDisplayText(int iIndex, String& pbstrText, Int32[] piGlyph);
    public abstract virtual int GetBuilderDescriptionText(int iIndex, String& pbstrDescription);
    public abstract virtual int GetBuilderImageList(IntPtr& phImages);
    public abstract virtual int OnBuilderCommit(int iIndex);
    public abstract virtual int GetBuilderItemColor(int iIndex, UInt32& dwFGColor, UInt32& dwBGColor);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("3F710016-58D5-4887-AD76-936D1A45A588")]
public interface Microsoft.VisualStudio.TextManager.Interop.IVsCompletionSetEx {
    public abstract virtual int GetCompletionItemColor(int iIndex, UInt32& dwFGColor, UInt32& dwBGColor);
    public abstract virtual int GetFilterLevel(Int32& iFilterLevel);
    public abstract virtual int IncreaseFilterLevel(int iSelectedItem);
    public abstract virtual int DecreaseFilterLevel(int iSelectedItem);
    public abstract virtual int CompareItems(string bstrSoFar, string bstrOther, int lCharactersToCompare, Int32& pLResult);
    public abstract virtual int OnCommitComplete();
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("B414D071-87BA-411A-9780-33FC7D87D882")]
public interface Microsoft.VisualStudio.TextManager.Interop.IVsCompoundAction {
    public abstract virtual int OpenCompoundAction(string pszDescription);
    public abstract virtual int AbortCompoundAction();
    public abstract virtual int CloseCompoundAction();
    public abstract virtual int FlushEditActions();
}
[GuidAttribute("29B88B8E-BC39-45AE-ACAB-0C670E49BCC2")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.TextManager.Interop.IVsCompoundActionEvents {
    public abstract virtual void OnBeforeAction();
    public abstract virtual void OnAbortAction();
}
[GuidAttribute("B5C14FF1-8431-458C-BEBC-34C6925D1976")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.TextManager.Interop.IVsCompoundViewChange {
    public abstract virtual int OpenCompoundViewChange();
    public abstract virtual int CloseCompoundViewChange();
}
[GuidAttribute("171A72AE-BAE6-4B66-9A58-4691F08ED9F2")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.TextManager.Interop.IVsContainedCode {
    public abstract virtual int EnumOriginalCodeBlocks(IVsEnumCodeBlocks& ppEnum);
    public abstract virtual int HostSpansUpdated();
}
[GuidAttribute("518AB114-E3C6-4BBC-A469-99279F1A54E9")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.TextManager.Interop.IVsContainedLanguage {
    public abstract virtual int SetHost(IVsContainedLanguageHost pHost);
    public abstract virtual int GetColorizer(IVsColorizer& ppColorizer);
    public abstract virtual int GetTextViewFilter(IVsIntellisenseHost pISenseHost, IOleCommandTarget pNextCmdTarget, IVsTextViewFilter& pTextViewFilter);
    public abstract virtual int GetLanguageServiceID(Guid& pguidLangService);
    public abstract virtual int SetBufferCoordinator(IVsTextBufferCoordinator pBC);
    public abstract virtual int Refresh(UInt32 dwRefreshMode);
    public abstract virtual int WaitForReadyState();
}
[InterfaceTypeAttribute("1")]
[ComConversionLossAttribute]
[GuidAttribute("F386BE91-0E80-43AF-8EB6-8B829FA06282")]
public interface Microsoft.VisualStudio.TextManager.Interop.IVsContainedLanguageCodeSupport {
    public abstract virtual int CreateUniqueEventName(string pszClassName, string pszObjectName, string pszNameOfEvent, String& pbstrEventHandlerName);
    public abstract virtual int EnsureEventHandler(string pszClassName, string pszObjectTypeName, string pszNameOfEvent, string pszEventHandlerName, UInt32 itemidInsertionPoint, String& pbstrUniqueMemberID, String& pbstrEventBody, TextSpan[] pSpanInsertionPoint);
    public abstract virtual int GetMemberNavigationPoint(string pszClassName, string pszUniqueMemberID, TextSpan[] pSpanNavPoint, UInt32& pItemID);
    public abstract virtual int GetMembers(string pszClassName, UInt32 dwFlags, Int32& pcMembers, IntPtr& ppbstrDisplayNames, IntPtr& ppbstrMemberIDs);
    public abstract virtual int OnRenamed(ContainedLanguageRenameType clrt, string bstrOldID, string bstrNewID);
    public abstract virtual int IsValidID(string bstrID, Boolean& pfIsValidID);
    public abstract virtual int GetBaseClassName(string pszClassName, String& pbstrBaseClassName);
    public abstract virtual int GetEventHandlerMemberID(string pszClassName, string pszObjectTypeName, string pszNameOfEvent, string pszEventHandlerName, String& pbstrUniqueMemberID);
    public abstract virtual int GetCompatibleEventHandlers(string pszClassName, string pszObjectTypeName, string pszNameOfEvent, Int32& pcMembers, IntPtr& ppbstrEventHandlerNames, IntPtr& ppbstrMemberIDs);
}
[GuidAttribute("88105779-D75B-459E-B7AD-78F63BD40714")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.TextManager.Interop.IVsContainedLanguageColorizer {
    public abstract virtual int ColorizeLineFragment(int iLine, int iIndex, int iLength, string pszText, int iState, UInt32& pAttributes, Int32& piNewState);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("9FD1BD52-9D32-4697-B446-36582B865C34")]
public interface Microsoft.VisualStudio.TextManager.Interop.IVsContainedLanguageFactory {
    public abstract virtual int GetLanguage(IVsHierarchy pHierarchy, UInt32 itemid, IVsTextBufferCoordinator pBufferCoordinator, IVsContainedLanguage& ppLanguage);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("0429916F-69E1-4336-AB7E-72086FB0D6BC")]
public interface Microsoft.VisualStudio.TextManager.Interop.IVsContainedLanguageHost {
    public abstract virtual int Advise(IVsContainedLanguageHostEvents pHost, UInt32& pvsCookie);
    public abstract virtual int Unadvise(UInt32 vsCookie);
    public abstract virtual int GetLineIndent(int lLineNumber, String& pbstrIndentString, Int32& plParentIndentLevel, Int32& plIndentSize, Int32& pfTabs, Int32& plTabSize);
    public abstract virtual int CanReformatCode(Int32& pfCanReformat);
    public abstract virtual int GetNearestVisibleToken(TextSpan tsSecondaryToken, TextSpan[] ptsPrimaryToken);
    public abstract virtual int EnsureSpanVisible(TextSpan tsPrimary);
    public abstract virtual int QueryEditFile();
    public abstract virtual int OnRenamed(ContainedLanguageRenameType clrt, string bstrOldID, string bstrNewID);
    public abstract virtual int InsertControl(string pwcFullType, string pwcID);
    public abstract virtual int InsertReference(UInt16& __MIDL_0010);
    public abstract virtual int GetVSHierarchy(IVsHierarchy& ppVsHierarchy);
    public abstract virtual int GetErrorProviderInformation(String& pbstrTaskProviderName, Guid& pguidTaskProviderGuid);
    public abstract virtual int InsertImportsDirective(UInt16& __MIDL_0011);
    public abstract virtual int OnContainedLanguageEditorSettingsChange();
    public abstract virtual int EnsureSecondaryBufferReady();
}
[GuidAttribute("226DE1FF-1521-4190-B7FE-1F9562180747")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.TextManager.Interop.IVsContainedLanguageHost3 {
    public abstract virtual void GetLineIndent(int lLineNumber, String& pbstrIndentString);
    public abstract virtual void GetIndentSize(Int32& plIndentSize);
    public abstract virtual void GetTabs(Int32& pfTabs);
    public abstract virtual void GetTabSize(Int32& plTabSize);
}
[GuidAttribute("F2A52136-803E-4CEF-BBA7-52D610FE34BA")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.TextManager.Interop.IVsContainedLanguageHostEvents {
    public abstract virtual int OnViewChange(int fTextView);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("F77B0DD6-420B-4E7C-A0B3-C8D5B10A0997")]
public interface Microsoft.VisualStudio.TextManager.Interop.IVsContainedLanguageProjectNameProvider {
    public abstract virtual int GetProjectName(UInt32 itemid, String& pbstrProjectName);
}
[ComConversionLossAttribute]
[InterfaceTypeAttribute("1")]
[GuidAttribute("22FF7776-2C9A-48C4-809F-39E5184CC32D")]
public interface Microsoft.VisualStudio.TextManager.Interop.IVsContainedLanguageStaticEventBinding {
    public abstract virtual int GetStaticEventBindingsForObject(string pszClassName, string pszObjectName, Int32& pcMembers, IntPtr& ppbstrEventNames, IntPtr& ppbstrDisplayNames, IntPtr& ppbstrMemberIDs);
    public abstract virtual int RemoveStaticEventBinding(string pszClassName, string pszUniqueMemberID, string pszObjectName, string pszNameOfEvent);
    public abstract virtual int AddStaticEventBinding(string pszClassName, string pszUniqueMemberID, string pszObjectName, string pszNameOfEvent);
    public abstract virtual int EnsureStaticEventHandler(string pszClassName, string pszObjectTypeName, string pszObjectName, string pszNameOfEvent, string pszEventHandlerName, UInt32 itemidInsertionPoint, String& pbstrUniqueMemberID, String& pbstrEventBody, TextSpan[] pSpanInsertionPoint);
}
[GuidAttribute("0BCE4F72-5889-4733-8605-413C28F5899F")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.TextManager.Interop.IVsDebugName {
    public abstract virtual int GetName(String& pbstrName);
    public abstract virtual int GetLocation(String& pbstrMkDoc, TextSpan[] pspanLocation);
}
[InterfaceTypeAttribute("1")]
[ComConversionLossAttribute]
[GuidAttribute("73B7DC00-F498-4ABD-AB79-D07AFD52F395")]
public interface Microsoft.VisualStudio.TextManager.Interop.IVsDefaultButtonBarImages {
    public abstract virtual int GetButtonCount(Int32& pcButtons);
    public abstract virtual int GetImageList(IntPtr& phImageList);
}
[InterfaceTypeAttribute("1")]
[ComConversionLossAttribute]
[GuidAttribute("D7820968-4CF8-4760-B633-570282E5F66D")]
public interface Microsoft.VisualStudio.TextManager.Interop.IVsDropdownBar {
    public abstract virtual int Attach(IntPtr hwndParent, int cCombos, IVsDropdownBarClient pClient);
    public abstract virtual void Detach();
    public abstract virtual int GetCurrentSelection(int iCombo, Int32& piCurSel);
    public abstract virtual int RefreshCombo(int iCombo, int iNewSelection);
    public abstract virtual int GetClient(IVsDropdownBarClient& ppClient);
    public abstract virtual int SetCurrentSelection(int iCombo, int iNewSelection);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("BC766334-6E04-442C-92F1-F687ECF8F741")]
public interface Microsoft.VisualStudio.TextManager.Interop.IVsDropdownBar2 {
    public abstract virtual int SetComboEnabled(int iCombo, int bEnabled);
    public abstract virtual int GetComboEnabled(int iCombo, Int32& pbEnabled);
}
[ComConversionLossAttribute]
[InterfaceTypeAttribute("1")]
[GuidAttribute("AEE77BDD-05C8-4DE1-B48E-1B003F49ACB7")]
public interface Microsoft.VisualStudio.TextManager.Interop.IVsDropdownBarClient {
    public abstract virtual int SetDropdownBar(IVsDropdownBar pDropdownBar);
    public abstract virtual int GetComboAttributes(int iCombo, UInt32& pcEntries, UInt32& puEntryType, IntPtr& phImageList);
    public abstract virtual int GetEntryText(int iCombo, int iIndex, String& ppszText);
    public abstract virtual int GetEntryAttributes(int iCombo, int iIndex, UInt32& pAttr);
    public abstract virtual int GetEntryImage(int iCombo, int iIndex, Int32& piImageIndex);
    public abstract virtual int OnItemSelected(int iCombo, int iIndex);
    public abstract virtual int OnItemChosen(int iCombo, int iIndex);
    public abstract virtual int OnComboGetFocus(int iCombo);
    public abstract virtual int GetComboTipText(int iCombo, String& pbstrText);
}
[GuidAttribute("9F0DC18B-2ED7-435E-B0D2-0ED5577B9635")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.TextManager.Interop.IVsDropdownBarClient3 {
    public abstract virtual int GetComboWidth(int iCombo, Int32& piWidthPercent);
    public abstract virtual int GetAutomationProperties(int iCombo, String& pbstrName, String& pbstrId);
    public abstract virtual int GetEntryImage(int iCombo, int iIndex, Int32& piImageIndex, IntPtr& phImageList);
}
[GuidAttribute("38002213-5C24-4970-BD9D-C45491879A75")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.TextManager.Interop.IVsDropdownBarClient4 {
    public abstract virtual ImageMoniker GetEntryImage(int iCombo, int iIndex);
}
[GuidAttribute("F74462E6-2E8E-477C-BA7D-F03D336DCB36")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.TextManager.Interop.IVsDropdownBarClientEx {
    public abstract virtual int GetEntryIndent(int iCombo, int iIndex, UInt32& pIndent);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("5CCB1170-6527-4D88-BE3E-198F0EF5538D")]
public interface Microsoft.VisualStudio.TextManager.Interop.IVsDropdownBarManager {
    public abstract virtual int AddDropdownBar(int cCombos, IVsDropdownBarClient pClient);
    public abstract virtual int GetDropdownBar(IVsDropdownBar& ppDropdownBar);
    public abstract virtual int RemoveDropdownBar();
}
[GuidAttribute("E82466CA-CF0E-4653-9E76-4D4C6C548DA2")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.TextManager.Interop.IVsDynamicTabProvider {
    public abstract virtual int GetTabStopElements(IVsTextLines pBuffer, int iLine, UInt32& cEl);
    public abstract virtual int GetTabStop(IVsTextLines pBuffer, int iLine, TabStop[] sTabStop);
}
[GuidAttribute("714FFF37-5CDC-424A-BCB4-CA50800524F1")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.TextManager.Interop.IVsEditorGoBackLocations {
    public abstract virtual int SetNonMergeableGoBackLocation(int fCurrentCaretPos, int iBaseLine, int iBaseCol);
    public abstract virtual int SetMergeableGoBackLocation(int fCurrentCaretPos, int iBaseLine, int iBaseCol);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("A0A9C2B0-95A3-4819-ADA3-5BD9756BBD36")]
public interface Microsoft.VisualStudio.TextManager.Interop.IVsEnumBSTR {
    public abstract virtual int Next(UInt32 celt, String[] rgelt, UInt32& pceltFetched);
    public abstract virtual int Skip(UInt32 celt);
    public abstract virtual int Reset();
    public abstract virtual int Clone(IVsEnumBSTR& ppEnum);
    public abstract virtual int GetCount(UInt32& pceltCount);
}
[GuidAttribute("5FCEEA4C-D49F-4ACD-B816-130A5DCD4C54")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.TextManager.Interop.IVsEnumBufferCoordinatorSpans {
    public abstract virtual int Next(UInt32 celt, NewSpanMapping[] rgelt, UInt32& pceltFetched);
    public abstract virtual int Skip(UInt32 celt);
    public abstract virtual int Reset();
    public abstract virtual int Clone(IVsEnumBufferCoordinatorSpans& ppEnum);
}
[GuidAttribute("07A45A82-5354-4DDE-AC7D-60F2CDD5573B")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.TextManager.Interop.IVsEnumCodeBlocks {
    public abstract virtual int Next(UInt32 celt, TextSpanAndCookie[] rgelt, UInt32& pceltFetched);
    public abstract virtual int Skip(UInt32 celt);
    public abstract virtual int Reset();
    public abstract virtual int Clone(IVsEnumCodeBlocks& ppEnum);
}
[GuidAttribute("9AD7EC03-4157-45B4-A999-403D6DB94578")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.TextManager.Interop.IVsEnumDebugName {
    public abstract virtual int Next(UInt32 celt, IVsDebugName[] rgelt, UInt32& pceltFetched);
    public abstract virtual int Skip(UInt32 celt);
    public abstract virtual int Reset();
    public abstract virtual int Clone(IVsEnumDebugName& ppEnum);
    public abstract virtual int GetCount(UInt32& pceltCount);
}
[GuidAttribute("20890A77-47C8-44DD-ABC7-3F0920C1B79A")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.TextManager.Interop.IVsEnumExternalErrors {
    public abstract virtual int Next(UInt32 celt, ExternalError[] rgelt, UInt32& pceltFetched);
    public abstract virtual int Skip(UInt32 celts);
    public abstract virtual int Reset();
    public abstract virtual int Clone(IVsEnumExternalErrors& ppErrors);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("C7A919CC-79C5-43D7-9B1E-B22E459F6557")]
public interface Microsoft.VisualStudio.TextManager.Interop.IVsEnumGUID {
    public abstract virtual int Next(UInt32 celt, Guid[] rgelt, UInt32& pceltFetched);
    public abstract virtual int Skip(UInt32 celt);
    public abstract virtual int Reset();
    public abstract virtual int Clone(IVsEnumGUID& ppEnum);
    public abstract virtual int GetCount(UInt32& pceltCount);
}
[GuidAttribute("681B0FFF-30B4-4578-A911-B67FB049DAFA")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.TextManager.Interop.IVsEnumHiddenRegions {
    public abstract virtual int Reset();
    public abstract virtual int Next(UInt32 cEl, IVsHiddenRegion[] ppOut, UInt32& pcElFetched);
    public abstract virtual int GetCount(UInt32& pcRegions);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("B9040F95-DADB-443A-A3C3-1C442F1BDA72")]
public interface Microsoft.VisualStudio.TextManager.Interop.IVsEnumIndependentViews {
    public abstract virtual int Next(UInt32 celt, Object[] rgelt, UInt32& pceltFetched);
    public abstract virtual int Reset();
    public abstract virtual int GetCount(UInt32& pCount);
}
[GuidAttribute("8F591607-2A26-4A9D-A6C5-147C2E51E895")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.TextManager.Interop.IVsEnumLayerMarkers {
    public abstract virtual int Reset();
    public abstract virtual int Next(IVsTextLayerMarker& ppRetval);
    public abstract virtual int GetCount(Int32& pcMarkers);
}
[GuidAttribute("35E981F1-77EF-4343-AAA1-8741F38627A2")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.TextManager.Interop.IVsEnumLineMarkers {
    public abstract virtual int Reset();
    public abstract virtual int Next(IVsTextLineMarker& ppRetval);
    public abstract virtual int GetCount(Int32& pcMarkers);
}
[GuidAttribute("06E27359-6FEE-4CCC-9E8B-AFC20C0F662A")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.TextManager.Interop.IVsEnumStreamMarkers {
    public abstract virtual int Reset();
    public abstract virtual int Next(IVsTextStreamMarker& ppRetval);
    public abstract virtual int GetCount(Int32& pcMarkers);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("67D9795E-CEA4-45FF-A3DA-055CF78F139A")]
public interface Microsoft.VisualStudio.TextManager.Interop.IVsEnumSyntheticRegions {
    public abstract virtual int Reset();
    public abstract virtual int Next(UInt32 cEl, IVsSyntheticRegion[] ppOut, UInt32& pcElFetched);
    public abstract virtual int GetCount(UInt32& pcRegions);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("74BBEE88-AB6E-4276-9BD2-27F566B8BBAF")]
public interface Microsoft.VisualStudio.TextManager.Interop.IVsEnumTextBuffers {
    public abstract virtual int Next(UInt32 celt, IVsTextBuffer[] rgelt, UInt32& pceltFetched);
    public abstract virtual int Skip(UInt32 celt);
    public abstract virtual int Reset();
    public abstract virtual int Clone(IVsEnumTextBuffers& ppEnum);
}
[GuidAttribute("0F343A75-968B-439E-81D6-0D066E53D28D")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.TextManager.Interop.IVsEnumTextSpans {
    public abstract virtual int Reset();
    public abstract virtual int Next(UInt32 cEl, TextSpan[] ppOut, UInt32& pcElFetched);
    public abstract virtual int GetCount(UInt32& pcSpans);
}
[GuidAttribute("DB685578-E6D4-4D5E-B714-FA344A509ABF")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.TextManager.Interop.IVsEnumTextViews {
    public abstract virtual int Next(UInt32 celt, IVsTextView[] rgelt, UInt32& pceltFetched);
    public abstract virtual int Reset();
    public abstract virtual int GetCount(UInt32& pCount);
}
[GuidAttribute("798CC43B-7714-4DC1-925A-47863C24630D")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.TextManager.Interop.IVsExpansion {
    public abstract virtual int InsertExpansion(TextSpan tsContext, TextSpan tsInsertPos, IVsExpansionClient pExpansionClient, Guid guidLang, IVsExpansionSession& pSession);
    public abstract virtual int InsertNamedExpansion(string bstrTitle, string bstrPath, TextSpan tsInsertPos, IVsExpansionClient pExpansionClient, Guid guidLang, int fShowDisambiguationUI, IVsExpansionSession& pSession);
    public abstract virtual int InsertSpecificExpansion(IXMLDOMNode pSnippet, TextSpan tsInsertPos, IVsExpansionClient pExpansionClient, Guid guidLang, string pszRelativePath, IVsExpansionSession& pSession);
}
[GuidAttribute("9DD0F39A-9502-4068-93B7-B6ADAB33ECD8")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.TextManager.Interop.IVsExpansionClient {
    public abstract virtual int GetExpansionFunction(IXMLDOMNode xmlFunctionNode, string bstrFieldName, IVsExpansionFunction& pFunc);
    public abstract virtual int FormatSpan(IVsTextLines pBuffer, TextSpan[] ts);
    public abstract virtual int EndExpansion();
    public abstract virtual int IsValidType(IVsTextLines pBuffer, TextSpan[] ts, String[] rgTypes, int iCountTypes, Int32& pfIsValidType);
    public abstract virtual int IsValidKind(IVsTextLines pBuffer, TextSpan[] ts, string bstrKind, Int32& pfIsValidKind);
    public abstract virtual int OnBeforeInsertion(IVsExpansionSession pSession);
    public abstract virtual int OnAfterInsertion(IVsExpansionSession pSession);
    public abstract virtual int PositionCaretForEditing(IVsTextLines pBuffer, TextSpan[] ts);
    public abstract virtual int OnItemChosen(string pszTitle, string pszPath);
}
[InterfaceTypeAttribute("1")]
[ComConversionLossAttribute]
[GuidAttribute("341E80BE-5B26-4DEE-A111-32A8373D1B51")]
public interface Microsoft.VisualStudio.TextManager.Interop.IVsExpansionEnumeration {
    public abstract virtual int Next(UInt32 celt, IntPtr[] rgelt, UInt32& pceltFetched);
    public abstract virtual int Reset();
    public abstract virtual int GetCount(UInt32& pCount);
}
[GuidAttribute("08107089-905F-47AB-989F-E365C5087402")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.TextManager.Interop.IVsExpansionEvents {
    public abstract virtual int OnAfterSnippetsUpdate();
    public abstract virtual int OnAfterSnippetsKeyBindingChange(UInt32 dwCmdGuid, UInt32 dwCmdId, int fBound);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("563011A2-1611-48ED-B3B1-189060064F66")]
public interface Microsoft.VisualStudio.TextManager.Interop.IVsExpansionFunction {
    public abstract virtual int GetFunctionType(UInt32& pFuncType);
    public abstract virtual int GetListCount(Int32& iCount);
    public abstract virtual int GetListText(int iIndex, String& pbstrText);
    public abstract virtual int GetDefaultValue(String& bstrValue, Int32& fHasDefaultValue);
    public abstract virtual int FieldChanged(string bstrField, Int32& fRequeryFunction);
    public abstract virtual int GetCurrentValue(String& bstrValue, Int32& fHasCurrentValue);
    public abstract virtual int ReleaseFunction();
}
[GuidAttribute("DEF59D57-46FE-4984-8CA4-5EFA3AC5D16E")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.TextManager.Interop.IVsExpansionIntellisenseHost {
    public abstract virtual int GetTextLen(Int32& iLen);
    public abstract virtual int GetText(String& bstrText);
    public abstract virtual int GetSelection(Int32& iStart, Int32& iEnd);
    public abstract virtual int SetSelection(int iStart, int iEnd);
    public abstract virtual int SetText(string bstrText, int fReplaceAll);
    public abstract virtual int GetCurrentLevel(Int32& pLevel);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("CA09E5EA-FEE7-4B52-AFE6-8EA2EC53F681")]
public interface Microsoft.VisualStudio.TextManager.Interop.IVsExpansionManager {
    public abstract virtual int EnumerateExpansions(Guid guidLang, int fShortCutOnly, String[] bstrTypes, int iCountTypes, int fIncludeNULLType, int fIncludeDuplicates, IVsExpansionEnumeration& pEnum);
    public abstract virtual int InvokeInsertionUI(IVsTextView pView, IVsExpansionClient pClient, Guid guidLang, String[] bstrTypes, int iCountTypes, int fIncludeNULLType, String[] bstrKinds, int iCountKinds, int fIncludeNULLKind, string bstrPrefixText, string bstrCompletionChar);
    public abstract virtual int GetExpansionByShortcut(IVsExpansionClient pClient, Guid guidLang, string szShortcut, IVsTextView pView, TextSpan[] pts, int fShowUI, String& pszExpansionPath, String& pszTitle);
    public abstract virtual int GetTokenPath(UInt32 token, String& pbstrPath);
    public abstract virtual int GetSnippetShortCutKeybindingState(Int32& fBound);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("7A271CD7-A2F7-4EDA-B500-614CC3D039FB")]
public interface Microsoft.VisualStudio.TextManager.Interop.IVsExpansionManager2 {
    public abstract virtual int EnumerateExpansionsAsync(Guid guidLang, int fShortCutOnly, String[] bstrTypes, int iCountTypes, int fIncludeNULLType, int fIncludeDuplicates, IVsTask& ppTask);
}
[GuidAttribute("3DFA7603-3B51-4484-81CD-FF1470123C7C")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.TextManager.Interop.IVsExpansionSession {
    public abstract virtual int EndCurrentExpansion(int fLeaveCaret);
    public abstract virtual int GoToNextExpansionField(int fCommitIfLast);
    public abstract virtual int GoToPreviousExpansionField();
    public abstract virtual int GetFieldValue(string bstrFieldName, String& pbstrValue);
    public abstract virtual int SetFieldDefault(string bstrFieldName, string bstrNewValue);
    public abstract virtual int GetFieldSpan(string bstrField, TextSpan[] ptsSpan);
    public abstract virtual int GetHeaderNode(string bstrNode, IXMLDOMNode& pNode);
    public abstract virtual int GetDeclarationNode(string bstrNode, IXMLDOMNode& pNode);
    public abstract virtual int GetSnippetNode(string bstrNode, IXMLDOMNode& pNode);
    public abstract virtual int GetSnippetSpan(TextSpan[] pts);
    public abstract virtual int SetEndSpan(TextSpan ts);
    public abstract virtual int GetEndSpan(TextSpan[] pts);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("373A9399-FDF5-4F64-8866-E14B7F2CFFF7")]
public interface Microsoft.VisualStudio.TextManager.Interop.IVsExternalCompletionSet {
    public abstract virtual int SetIntellisenseHost(IVsIntellisenseHost pHost);
    public abstract virtual int UpdateCompSet();
}
[GuidAttribute("7B32BDF9-89D3-4574-B6AC-F2EEE9DEAB18")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.TextManager.Interop.IVsFileBackup {
    public abstract virtual int BackupFile(string pszBackupFileName);
    public abstract virtual int IsBackupFileObsolete(Int32& pbObsolete);
}
[GuidAttribute("D1ABEDEB-5163-4235-ADE6-17EFAA3A5549")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.TextManager.Interop.IVsFileExtensionMappingEvents {
    public abstract virtual int OnFileExtensionsReset();
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("CE62717C-797D-445F-BC89-1D02C54CCF96")]
public interface Microsoft.VisualStudio.TextManager.Interop.IVsFinalTextChangeCommitEvents {
    public abstract virtual void OnChangesCommitted(UInt32 dwGestureFlags, TextSpan[] ptsChanged);
}
[GuidAttribute("FE7C62A2-C121-4995-9EC1-561B80D2DA11")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.TextManager.Interop.IVsFindCancelDialog {
    public abstract virtual int LaunchDialog();
    public abstract virtual int QueryDialog(Int32& pfCancel);
    public abstract virtual int CloseDialog();
}
[GuidAttribute("D0C79C30-C06A-11D2-936C-D714766E8B50")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.TextManager.Interop.IVsFinder {
    public abstract virtual int AttachTextImage(object pTextImage);
    public abstract virtual int Detach();
    public abstract virtual int SetScope(IVsTextSpanSet pSpanScope);
    public abstract virtual int Init(UInt32 grfOptions, string pszFindPattern, int fReinit, UInt32& pResult);
    public abstract virtual int SetPosition(UInt32 fp, TextAddress ta);
    public abstract virtual int Find(UInt32 grfFindHow, TextSpan[] ptsMatch, UInt32& pgrfResult);
    public abstract virtual int GetMatch(TextSpan[] pts);
    public abstract virtual int GetMatchedSpans(IVsTextSpanSet& ppSpans);
    public abstract virtual int GetTaggedSpans(IVsTextSpanSet& ppTags);
    public abstract virtual int GetState(Int32& pcFound, UInt32& pResult, UInt32& pState);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("BB02E777-EC3E-479F-980E-8E36B9617DCA")]
public interface Microsoft.VisualStudio.TextManager.Interop.IVsFindHelper {
    public abstract virtual int FindInText(string pszFind, string pszReplace, UInt32 grfFindOptions, UInt32 grfBufferFlags, UInt32 cchText, UInt16[] pchText, UInt32& piFound, UInt32& pcchFound, String& pbstrReplaceText, Int32& pfFound);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("53BE8AC6-1975-4240-8F60-367665A7E525")]
public interface Microsoft.VisualStudio.TextManager.Interop.IVsFindManager {
    public abstract virtual int CurrentTarget(IVsFindTarget& ppTarget);
}
[GuidAttribute("6A7B25E6-90C5-44A9-A840-3E39E35761F6")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.TextManager.Interop.IVsFindManager2 {
    public abstract virtual int FindCurrentTarget(IVsFindTarget& ppTarget);
}
[GuidAttribute("0FE9496A-129C-40EE-99D8-7705A6283518")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.TextManager.Interop.IVsFindScope {
    public abstract virtual int GetUIName(String& pbsName);
    public abstract virtual int GetQuery(String& pbstrBaseDirectory, String& pbstrQuery);
    public abstract virtual int EnumFilenames(IEnumString& ppEnumString);
}
[GuidAttribute("DE89D360-C06A-11D2-936C-D714766E8B50")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.TextManager.Interop.IVsFindTarget {
    public abstract virtual int GetCapabilities(Boolean[] pfImage, UInt32[] pgrfOptions);
    public abstract virtual int GetProperty(UInt32 propid, Object& pvar);
    public abstract virtual int GetSearchImage(UInt32 grfOptions, IVsTextSpanSet[] ppSpans, IVsTextImage& ppTextImage);
    public abstract virtual int Find(string pszSearch, UInt32 grfOptions, int fResetStartPoint, IVsFindHelper pHelper, UInt32& pResult);
    public abstract virtual int Replace(string pszSearch, string pszReplace, UInt32 grfOptions, int fResetStartPoint, IVsFindHelper pHelper, Int32& pfReplaced);
    public abstract virtual int GetMatchRect(RECT[] prc);
    public abstract virtual int NavigateTo(TextSpan[] pts);
    public abstract virtual int GetCurrentSpan(TextSpan[] pts);
    public abstract virtual int SetFindState(object pUnk);
    public abstract virtual int GetFindState(Object& ppunk);
    public abstract virtual int NotifyFindTarget(UInt32 notification);
    public abstract virtual int MarkSpan(TextSpan[] pts);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("DE311250-1F14-430E-B896-EFBDDD8ABB3E")]
public interface Microsoft.VisualStudio.TextManager.Interop.IVsFindTarget2 {
    public abstract virtual int NavigateTo2(IVsTextSpanSet pSpans, TextSelMode iSelMode);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("181237A7-4861-4D6C-8CA1-8A004BEA2E8E")]
public interface Microsoft.VisualStudio.TextManager.Interop.IVsFormatFilterProvider {
    public abstract virtual int GetFormatFilterList(String& pbstrFilterList);
    public abstract virtual int CurFileExtensionFormat(string bstrFileName, UInt32& pdwExtnIndex);
    public abstract virtual int QueryInvalidEncoding(UInt32 Format, String& pbstrMessage);
}
[GuidAttribute("BE93F7B1-F2FD-45B4-938D-1C66441CD421")]
[ComConversionLossAttribute]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.TextManager.Interop.IVsFullTextScanner {
    public abstract virtual int OpenFullTextScan();
    public abstract virtual int FullTextRead(String& ppszText, Int32& piLength);
    public abstract virtual int CloseFullTextScan();
}
[GuidAttribute("16C240B3-4773-43C2-932A-1E8DD2F6F0F8")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.TextManager.Interop.IVsHiColorItem {
    public abstract virtual int GetColorData(int cdElement, UInt32& pcrColor);
}
[GuidAttribute("41E57382-63F9-48E6-9DBD-163D2B14D41B")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.TextManager.Interop.IVsHiddenRegion {
    public abstract virtual int GetType(Int32& piHiddenRegionType);
    public abstract virtual int GetBehavior(UInt32& pdwBehavior);
    public abstract virtual int GetState(UInt32& dwState);
    public abstract virtual int SetState(UInt32 dwState, UInt32 dwUpdate);
    public abstract virtual int GetBanner(String& pbstrBanner);
    public abstract virtual int SetBanner(string pszBanner);
    public abstract virtual int GetSpan(TextSpan[] pSpan);
    public abstract virtual int SetSpan(TextSpan[] pSpan);
    public abstract virtual int GetClientData(IntPtr& pdwData);
    public abstract virtual int SetClientData(IntPtr dwData);
    public abstract virtual int Invalidate(UInt32 dwUpdate);
    public abstract virtual int IsValid();
    public abstract virtual int GetBaseBuffer(IVsTextLines& ppBuffer);
}
[GuidAttribute("FA54DAC7-23D3-4C27-B46E-0D2591E5CF0A")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.TextManager.Interop.IVsHiddenRegionEx {
    public abstract virtual int GetBannerAttr(UInt32 dwLength, UInt32[] pColorAttr);
    public abstract virtual int SetBannerAttr(UInt32 dwLength, UInt32[] pColorAttr);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("CA3F0E7F-CFA6-444E-A3FE-7B3DFAD6E5E4")]
public interface Microsoft.VisualStudio.TextManager.Interop.IVsHiddenTextClient {
    public abstract virtual void OnHiddenRegionChange(IVsHiddenRegion pHidReg, HIDDEN_REGION_EVENT EventCode, int fBufferModifiable);
    public abstract virtual int GetTipText(IVsHiddenRegion pHidReg, String[] pbstrText);
    public abstract virtual int GetMarkerCommandInfo(IVsHiddenRegion pHidReg, int iItem, String[] pbstrText, UInt32[] pcmdf);
    public abstract virtual int ExecMarkerCommand(IVsHiddenRegion pHidReg, int iItem);
    public abstract virtual int MakeBaseSpanVisible(IVsHiddenRegion pHidReg, TextSpan[] pBaseSpan);
    public abstract virtual void OnBeforeSessionEnd();
}
[GuidAttribute("225F2F59-39CF-4AE3-A08E-44CF751DE700")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.TextManager.Interop.IVsHiddenTextClientEx {
    public abstract virtual int GetBannerGlyphWidth(int iPixSpaceWidth, Int32& pGlyphPix);
    public abstract virtual int DrawBannerGlyph(IVsHiddenRegion pHidReg, UInt32 dwFlags, IntPtr hdc, RECT[] pRect);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("0E5B1E59-53A7-4636-ADBB-0B23C561E293")]
public interface Microsoft.VisualStudio.TextManager.Interop.IVsHiddenTextManager {
    public abstract virtual int GetHiddenTextSession(object pOwningObject, IVsHiddenTextSession& ppSession);
    public abstract virtual int CreateHiddenTextSession(UInt32 dwFlags, object pOwningObject, IVsHiddenTextClient pClient, IVsHiddenTextSession& ppState);
}
[GuidAttribute("82B21BAE-664B-43E1-95B1-0302805FF7D3")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.TextManager.Interop.IVsHiddenTextSession {
    public abstract virtual int AddHiddenRegions(UInt32 dwUpdateFlags, int cRegions, NewHiddenRegion[] rgHidReg, IVsEnumHiddenRegions[] ppEnum);
    public abstract virtual int EnumHiddenRegions(UInt32 dwFindFlags, IntPtr filterData, TextSpan[] ptsRange, IVsEnumHiddenRegions& ppEnum);
    public abstract virtual int UnadviseClient();
    public abstract virtual int Terminate();
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("A43C0083-755F-4385-9574-4C14BFFC4344")]
public interface Microsoft.VisualStudio.TextManager.Interop.IVsHiddenTextSessionEx {
    public abstract virtual int AddHiddenRegionsEx(UInt32 dwUpdateFlags, int cRegions, NewHiddenRegionEx[] rgHidReg, IVsEnumHiddenRegions& ppEnum);
}
[GuidAttribute("A40043F7-0865-4322-9308-32133314AD6C")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.TextManager.Interop.IVsHiddenTextSessionEx2 {
    public abstract virtual int StopOutlining();
    public abstract virtual int StartOutlining(int fRemoveAdhoc);
    public abstract virtual int StartBatch();
    public abstract virtual int EndBatch();
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("22212CD2-83FF-11D2-92E6-005345000000")]
public interface Microsoft.VisualStudio.TextManager.Interop.IVsHighlight {
    public abstract virtual int GetHighlightRect(RECT[] prc);
}
[GuidAttribute("5CE7AE60-7B66-4301-8892-90BC0B49A89B")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.TextManager.Interop.IVsImmediateStatementCompletion {
    public abstract virtual int InstallStatementCompletion(int fInstall, IVsTextView pCmdWinView, int fInitialEnable);
    public abstract virtual int EnableStatementCompletion_Deprecated(int fEnable, int iStartIndex, int iEndIndex);
    public abstract virtual int SetCompletionContext_Deprecated(string pszFilePath, IVsTextLines pBuffer, TextSpan[] ptsCurStatement, object punkContext);
}
[GuidAttribute("58F03D6E-F781-4E44-BD88-3BDE817CBDCD")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.TextManager.Interop.IVsImmediateStatementCompletion2 {
    public abstract virtual int InstallStatementCompletion(int fInstall, IVsTextView pCmdWinView, int fInitialEnable);
    public abstract virtual int EnableStatementCompletion_Deprecated(int fEnable, int iStartIndex, int iEndIndex);
    public abstract virtual int SetCompletionContext_Deprecated(string pszFilePath, IVsTextLines pBuffer, TextSpan[] ptsCurStatement, object punkContext);
    public abstract virtual int EnableStatementCompletion(int fEnable, int iStartIndex, int iEndIndex, IVsTextView pTextView);
    public abstract virtual int SetCompletionContext(string pszFilePath, IVsTextLines pBuffer, TextSpan[] ptsCurStatement, object punkContext, IVsTextView pTextView);
    public abstract virtual int GetFilter(IVsTextView pTextView, IVsTextViewFilter& ppFilter);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("BB73A6E1-B824-42A1-9AB1-2F254386DFFC")]
public interface Microsoft.VisualStudio.TextManager.Interop.IVsInsertionUI {
    public abstract virtual int GetWindowHandle(IntPtr& hwnd);
    public abstract virtual int Hide();
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("05DFCF7A-C78A-4E20-AAFB-4A0F4D26E0FB")]
public interface Microsoft.VisualStudio.TextManager.Interop.IVsIntellisenseCompletor {
    public abstract virtual int QueryStatus(Guid& pguidCmdGroup, UInt32 cCmds, OLECMD[] prgCmds, IntPtr pCmdText);
    public abstract virtual int Exec(Guid& pguidCmdGroup, UInt32 nCmdID, UInt32 nCmdexecopt, IntPtr pvaIn, IntPtr pvaOut);
    public abstract virtual int Initialize(IVsIntellisenseHost pHost, IntPtr hwndParent);
    public abstract virtual int Update(IVsCompletionSet pCompSet, UInt32 dwFlags);
    public abstract virtual int GetWidth(UInt32& dwWidth);
    public abstract virtual int GetHeight(UInt32& dwHeight);
    public abstract virtual int GetCompletionSpan(TextSpan[] ts);
    public abstract virtual int SetLocation(POINT[] p);
    public abstract virtual int Hide();
    public abstract virtual int IsActive(Int32& pfIsActive);
    public abstract virtual int GetWindowHandle(IntPtr& phwnd);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("0377986B-C450-453C-A7BE-67116C9129A6")]
public interface Microsoft.VisualStudio.TextManager.Interop.IVsIntellisenseHost {
    public abstract virtual int QueryStatus(Guid& pguidCmdGroup, UInt32 cCmds, OLECMD[] prgCmds, OLECMDTEXT[] pCmdText);
    public abstract virtual int Exec(Guid& pguidCmdGroup, UInt32 nCmdID, UInt32 nCmdexecopt, Object& pvaIn, Object& pvaOut);
    public abstract virtual int GetHostFlags(UInt32& pdwFlags);
    public abstract virtual int GetContextBuffer(IVsTextLines& ppCtxBuffer);
    public abstract virtual int GetContextFocalPoint(TextSpan[] pSpan, Int32& piLen);
    public abstract virtual int SetContextCaretPos(int iLine, int iIndex);
    public abstract virtual int GetContextCaretPos(Int32& piLine, Int32& piIndex);
    public abstract virtual int SetContextSelection(int iStartLine, int iStartIndex, int iEndLine, int iEndIndex);
    public abstract virtual int GetContextSelection(TextSpan[] pSelectionSpan);
    public abstract virtual int GetSubjectText(String& pbstrSubjectText);
    public abstract virtual int SetSubjectCaretPos(int iIndex);
    public abstract virtual int GetSubjectCaretPos(Int32& piIndex);
    public abstract virtual int SetSubjectSelection(int iAnchorIndex, int iEndIndex);
    public abstract virtual int GetSubjectSelection(Int32& piAnchorIndex, Int32& piEndIndex);
    public abstract virtual int ReplaceSubjectTextSpan(int iStartIndex, int iEndIndex, string pszText);
    public abstract virtual int UpdateCompletionStatus(IVsCompletionSet pCompSet, UInt32 dwFlags);
    public abstract virtual int UpdateTipWindow(IVsTipWindow pTipWindow, UInt32 dwFlags);
    public abstract virtual int HighlightMatchingBrace(UInt32 dwFlags, UInt32 cSpans, TextSpan[] rgBaseSpans);
    public abstract virtual int BeforeCompletorCommit();
    public abstract virtual int AfterCompletorCommit();
    public abstract virtual int GetServiceProvider(IServiceProvider& ppSP);
    public abstract virtual int GetHostWindow(IntPtr& hwnd);
    public abstract virtual int GetContextLocation(int iPos, int iLen, int fUseCaretPosition, RECT[] prc, Int32& piTopX);
    public abstract virtual int UpdateSmartTagWindow(IVsSmartTagTipWindow pSmartTagWnd, UInt32 dwFlags);
    public abstract virtual int GetSmartTagRect(RECT[] rcSmartTag);
}
[ComVisibleAttribute("False")]
[GuidAttribute("0377986B-C450-453C-A7BE-67116C9129A6")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.TextManager.Interop.IVsIntellisenseHost_Corrected {
    public abstract virtual int QueryStatus(Guid& pguidCmdGroup, UInt32 cCmds, OLECMD[] prgCmds, IntPtr pCmdText);
    public abstract virtual int Exec(Guid& pguidCmdGroup, UInt32 nCmdID, UInt32 nCmdexecopt, IntPtr pvaIn, IntPtr pvaOut);
    public abstract virtual int GetHostFlags(UInt32& pdwFlags);
    public abstract virtual int GetContextBuffer(IVsTextLines& ppCtxBuffer);
    public abstract virtual int GetContextFocalPoint(TextSpan[] pSpan, Int32& piLen);
    public abstract virtual int SetContextCaretPos(int iLine, int iIndex);
    public abstract virtual int GetContextCaretPos(Int32& piLine, Int32& piIndex);
    public abstract virtual int SetContextSelection(int iStartLine, int iStartIndex, int iEndLine, int iEndIndex);
    public abstract virtual int GetContextSelection(TextSpan[] pSelectionSpan);
    public abstract virtual int GetSubjectText(String& pbstrSubjectText);
    public abstract virtual int SetSubjectCaretPos(int iIndex);
    public abstract virtual int GetSubjectCaretPos(Int32& piIndex);
    public abstract virtual int SetSubjectSelection(int iAnchorIndex, int iEndIndex);
    public abstract virtual int GetSubjectSelection(Int32& piAnchorIndex, Int32& piEndIndex);
    public abstract virtual int ReplaceSubjectTextSpan(int iStartIndex, int iEndIndex, string pszText);
    public abstract virtual int UpdateCompletionStatus(IVsCompletionSet pCompSet, UInt32 dwFlags);
    public abstract virtual int UpdateTipWindow(IVsTipWindow pTipWindow, UInt32 dwFlags);
    public abstract virtual int HighlightMatchingBrace(UInt32 dwFlags, UInt32 cSpans, TextSpan[] rgBaseSpans);
    public abstract virtual int BeforeCompletorCommit();
    public abstract virtual int AfterCompletorCommit();
    public abstract virtual int GetServiceProvider(IServiceProvider& ppSP);
    public abstract virtual int GetHostWindow(IntPtr& hwnd);
    public abstract virtual int GetContextLocation(int iPos, int iLen, int fUseCaretPosition, RECT[] prc, Int32& piTopX);
    public abstract virtual int UpdateSmartTagWindow(IVsSmartTagTipWindow pSmartTagWnd, UInt32 dwFlags);
    public abstract virtual int GetSmartTagRect(RECT[] rcSmartTag);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("1E34D422-7120-4D9E-96FF-E880B665D30D")]
public interface Microsoft.VisualStudio.TextManager.Interop.IVsIntellisenseLangTip {
    public abstract virtual int Initialize(IVsIntellisenseHost pHost);
    public abstract virtual int GetSizePreferences(RECT[] prcCtxBounds, TIPSIZEDATA[] pSizeData);
    public abstract virtual int Create(IVsTipWindow pTipWnd);
    public abstract virtual int Update(IVsTipWindow pTipWnd, UInt32 dwFlags);
    public abstract virtual int UpdatePosition();
    public abstract virtual int GetSizeY(Int16& pSizeY);
    public abstract virtual int Close(int fDeleteThis);
    public abstract virtual int IsActive(Int32& pfIsActive);
    public abstract virtual int GetOverloadCount(Int32& plOverloadCount);
    public abstract virtual int ScrollUp();
    public abstract virtual int ScrollDown();
}
[GuidAttribute("592346B2-C79C-4D3F-885A-3DA61899EE4B")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.TextManager.Interop.IVsIntellisenseOptions {
    public abstract virtual int SetCompletorSize(int uSize);
    public abstract virtual int GetCompletorSize(Int32& uSize);
}
[GuidAttribute("BA303DF5-6283-4961-A4CE-76D4F0662D11")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.TextManager.Interop.IVsLanguageBlock {
    public abstract virtual int GetCurrentBlock(IVsTextLines pTextLines, int iCurrentLine, int iCurrentChar, TextSpan[] ptsBlockSpan, String& pbstrDescription, Int32& pfBlockAvailable);
}
[GuidAttribute("2ED7B280-B372-415E-862D-D7D9AEAFCD10")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.TextManager.Interop.IVsLanguageClipboardOps {
    public abstract virtual int GetDataObject(IVsTextView pView, IVsTextLayer pTextLayer, IDataObject& ppDO);
    public abstract virtual int IsTextData(IDataObject pDO);
    public abstract virtual int TextFromData(IVsTextLayer pTextLayer, IDataObject pDO, LTE_TEXTDATAFLAGS[] ptdfFlags, String& pbstrText);
    public abstract virtual int DataObjectRendered(IVsTextLines pTextLines, UInt32 dwHint, TextSpan[] ptsInsertedText);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("E36E3541-45D6-4AD8-B5AF-DDCB3E02CF3F")]
public interface Microsoft.VisualStudio.TextManager.Interop.IVsLanguageClipboardOpsEx {
    public abstract virtual int IsTextDataEx(IDataObject pDO, IVsTextLines pBuffer, Int32& pfIsTextData);
}
[GuidAttribute("19404D57-F8E4-42F4-9255-B8F889B0C50C")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.TextManager.Interop.IVsLanguageContextProvider {
    public abstract virtual int UpdateLanguageContext(UInt32 dwHint, IVsTextLines pBuffer, TextSpan[] ptsSelection, object pUC);
}
[GuidAttribute("F30A6A07-5340-4C0E-B312-5772558B0E63")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.TextManager.Interop.IVsLanguageDebugInfo {
    public abstract virtual int GetProximityExpressions(IVsTextBuffer pBuffer, int iLine, int iCol, int cLines, IVsEnumBSTR& ppEnum);
    public abstract virtual int ValidateBreakpointLocation(IVsTextBuffer pBuffer, int iLine, int iCol, TextSpan[] pCodeSpan);
    public abstract virtual int GetNameOfLocation(IVsTextBuffer pBuffer, int iLine, int iCol, String& pbstrName, Int32& piLineOffset);
    public abstract virtual int GetLocationOfName(string pszName, String& pbstrMkDoc, TextSpan[] pspanLocation);
    public abstract virtual int ResolveName(string pszName, UInt32 dwFlags, IVsEnumDebugName& ppNames);
    public abstract virtual int GetLanguageID(IVsTextBuffer pBuffer, int iLine, int iCol, Guid& pguidLanguageID);
    public abstract virtual int IsMappedLocation(IVsTextBuffer pBuffer, int iLine, int iCol);
}
[GuidAttribute("F1AF0080-C965-4E73-8763-3C6309707D59")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.TextManager.Interop.IVsLanguageDebugInfo2 {
    public abstract virtual int QueryCommonLanguageBlock(IVsTextBuffer pBuffer, int iLine, int iCol, UInt32 dwFlag, Int32& pfInBlock);
    public abstract virtual int ValidateInstructionpointLocation(IVsTextBuffer pBuffer, int iLine, int iCol, TextSpan[] pCodeSpan);
    public abstract virtual int QueryCatchLineSpan(IVsTextBuffer pBuffer, int iLine, int iCol, Int32& pfIsInCatch, TextSpan[] ptsCatchLine);
}
[GuidAttribute("37F90B98-666A-452F-91F3-C60266AEB13E")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.TextManager.Interop.IVsLanguageDebugInfo3 {
    public abstract virtual void GetValidBreakpointLineVariance(IVsTextBuffer pBuffer, int iLine, int iCol, Int32& piVariance);
}
[GuidAttribute("7E3FAAE7-F89E-448B-A5EB-C7D73E0685F5")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.TextManager.Interop.IVsLanguageDebugInfoRemap {
    public abstract virtual int RemapBreakpoint(object pUserBreakpointRequest, Object& ppMappedBreakpointRequest);
}
[GuidAttribute("B3F95731-540E-4F1C-B6D9-1A7FF6DEC782")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.TextManager.Interop.IVsLanguageDragDropOps {
    public abstract virtual int DragSetup(IDataObject pDO, IVsTextLines pBuffer, Int32& pfDocumentContainsTextData);
    public abstract virtual int IsTextDataAtLocation(IVsTextLines pBuffer, int iLine, int iCol, Int32& pfIsTextDataValidAtLoc);
    public abstract virtual int DragCleanup(IVsTextLines pBuffer);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("11DDB920-52C7-4237-8610-9FE8BB11656D")]
public interface Microsoft.VisualStudio.TextManager.Interop.IVsLanguageInfo {
    public abstract virtual int GetLanguageName(String& bstrName);
    public abstract virtual int GetFileExtensions(String& pbstrExtensions);
    public abstract virtual int GetColorizer(IVsTextLines pBuffer, IVsColorizer& ppColorizer);
    public abstract virtual int GetCodeWindowManager(IVsCodeWindow pCodeWin, IVsCodeWindowManager& ppCodeWinMgr);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("E5A25E79-4A3C-4FCB-B375-196F5E8D1B2D")]
public interface Microsoft.VisualStudio.TextManager.Interop.IVsLanguageLineIndent {
    public abstract virtual int GetIndentPosition(IVsTextLayer pBaseLayer, int BaseBufferLineIndex, Int32& pIndentPosition);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("518020A6-8D59-4C80-9AAE-015AB9DCC3DE")]
public interface Microsoft.VisualStudio.TextManager.Interop.IVsLanguageTextOps {
    public abstract virtual int GetDataTip(IVsTextLayer pTextLayer, TextSpan[] ptsSel, TextSpan[] ptsTip, String& pbstrText);
    public abstract virtual int GetPairExtent(IVsTextLayer pTextLayer, TextAddress ta, TextSpan[] pts);
    public abstract virtual int GetWordExtent(IVsTextLayer pTextLayer, TextAddress ta, WORDEXTFLAGS flags, TextSpan[] pts);
    public abstract virtual int Format(IVsTextLayer pTextLayer, TextSpan[] ptsSel);
}
[GuidAttribute("35E88F96-047C-443C-A336-91BB8E2B40EC")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.TextManager.Interop.IVsLastChangeTimeProvider {
    public abstract virtual int GetLastChangeTime(FILETIME[] pFileTime);
}
[GuidAttribute("60BD661B-133C-4B5C-A335-4B174C5A352F")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.TextManager.Interop.IVsLayeredTextView {
    public abstract virtual int GetSelectedAtom(UInt32 dwFlags, Object& ppunkAtom);
    public abstract virtual int GetRelativeSelectionState(UInt32 dwFlags, IVsTextLayer pReferenceLayer, SELECTIONSTATE[] pSelState);
    public abstract virtual int SetRelativeSelectionState(UInt32 dwFlags, IVsTextLayer pReferenceLayer, SELECTIONSTATE[] pSelState);
    public abstract virtual int GetTopmostLayer(IVsTextLayer& ppLayer);
}
[GuidAttribute("B3B2E5D4-F03E-4BB9-85F9-61B5F45AC498")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.TextManager.Interop.IVsLifetimeControlledObject {
    public abstract virtual int SeverReferencesToOwner();
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("BBB6EAEA-4835-4263-BEDB-2705607803CA")]
public interface Microsoft.VisualStudio.TextManager.Interop.IVsLineAttributes {
    public abstract virtual int SetLineSeparator(Int32[] rgLines, int cLines, int fRemoveAll);
}
[GuidAttribute("F747D466-83CA-41D6-A0E8-3F78283D01E7")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.TextManager.Interop.IVsLinkCapableUndoManager {
    public abstract virtual int AdviseLinkedUndoClient(IVsLinkedUndoClient pClient);
    public abstract virtual int UnadviseLinkedUndoClient();
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("33452684-FAB0-4F76-B4E9-19EE0B96B4AD")]
public interface Microsoft.VisualStudio.TextManager.Interop.IVsLinkedUndoClient {
    public abstract virtual int OnInterveningUnitBlockingLinkedUndo();
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("F65478CC-96F1-4BA9-9EF9-A575ACB96031")]
public interface Microsoft.VisualStudio.TextManager.Interop.IVsLinkedUndoTransactionManager {
    public abstract virtual int OpenLinkedUndo(UInt32 dwFlags, string pszDescription);
    public abstract virtual int CloseLinkedUndo();
    public abstract virtual int AbortLinkedUndo();
    public abstract virtual int IsAborted(Int32& pfAborted);
    public abstract virtual int IsStrict(Int32& pfStrict);
    public abstract virtual int CountOpenTransactions(Int32& pCount);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("0AE3E015-2900-4DDF-87AF-CC522AE02284")]
public interface Microsoft.VisualStudio.TextManager.Interop.IVsMergeableUIItem {
    public abstract virtual int GetCanonicalName(String& pbstrNonLocalizeName);
    public abstract virtual int GetDisplayName(String& pbstrDisplayName);
    public abstract virtual int GetMergingPriority(Int32& piMergingPriority);
    public abstract virtual int GetDescription(String& pbstrDesc);
}
[ComConversionLossAttribute]
[InterfaceTypeAttribute("1")]
[GuidAttribute("69D2811C-682C-4290-B92E-5DFB823DF24C")]
public interface Microsoft.VisualStudio.TextManager.Interop.IVsMethodData {
    public abstract virtual int GetOverloadCount();
    public abstract virtual IntPtr GetMethodText(int iMethod, MethodTextType type);
    public abstract virtual int GetParameterCount(int iMethod);
    public abstract virtual IntPtr GetParameterText(int iMethod, int iParm, ParameterTextType type);
    public abstract virtual int GetCurrentParameter(int iMethod);
    public abstract virtual int GetContextStream(Int32& piPos, Int32& piLength);
    public abstract virtual void OnDismiss();
    public abstract virtual int GetCurMethod();
    public abstract virtual void UpdateView();
    public abstract virtual int NextMethod();
    public abstract virtual int PrevMethod();
}
[GuidAttribute("28ABE611-DCB8-4684-9793-105C92839AAB")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.TextManager.Interop.IVsMethodDataEx {
    public abstract virtual int GetCopyTipText(int iMethod, String& pbstrTipText);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("794767F6-538A-4CD3-B29E-6C76C79A7C9C")]
public interface Microsoft.VisualStudio.TextManager.Interop.IVsMethodTipWindow {
    public abstract virtual int GetContextStream(Int32& piPos, Int32& piLength);
    public abstract virtual int GetSizePreferences(RECT[] prcCtxBounds, TIPSIZEDATA[] pSizeData);
    public abstract virtual int Paint(IntPtr hdc, RECT[] prc);
    public abstract virtual void Dismiss();
    public abstract virtual int WndProc(IntPtr hwnd, UInt32 iMsg, IntPtr wParam, IntPtr lParam);
    public abstract virtual int SetMethodData(IVsMethodData pMethodData);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("E9E55E72-13BC-4362-B80A-A2EB33A75809")]
public interface Microsoft.VisualStudio.TextManager.Interop.IVsMethodTipWindow2 {
    public abstract virtual int NextMethod(Int32& pfSuccess);
    public abstract virtual int PrevMethod(Int32& pfSuccess);
    public abstract virtual int GetOverloadCount(Int32& piCount);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("5C17E526-0F7B-40FC-8E94-E12ADC618A02")]
public interface Microsoft.VisualStudio.TextManager.Interop.IVsMethodTipWindow3 {
    public abstract virtual int GetMethodData(IVsMethodData& pMethodData);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("E32F08DB-6364-4276-8EA8-BAA6752F7807")]
public interface Microsoft.VisualStudio.TextManager.Interop.IVsMouseCursorProvider {
    public abstract virtual int SetMouseCursor(UInt32 dwReserved);
}
[GuidAttribute("82D04B51-1626-43AA-B57F-9B23D4280333")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.TextManager.Interop.IVsNavigableLocationResolver {
    public abstract virtual int GetDisplayText(UInt32 dwReserved, TextSpan[] ptsBase, IVsTextLines pBuffer, UInt32& dwOutFlags, String& pbstrDisplayText);
    public abstract virtual int GetPathFromLocation(UInt32 dwReserved, TextSpan[] ptsBase, IVsTextLines pBuffer, string pszDisplayText, UInt32& dwOutFlags, String& pbstrPath);
}
[GuidAttribute("B97D5C98-0507-40FA-BF89-CE4F73EBA651")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.TextManager.Interop.IVsOutliningCapableLanguage {
    public abstract virtual int CollapseToDefinitions(IVsTextLines pTextLines, IVsOutliningSession pSession);
}
[GuidAttribute("9A436975-A86A-4459-A350-B05604B53309")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.TextManager.Interop.IVsOutliningSession {
    public abstract virtual int AddOutlineRegions(UInt32 dwOutliningFlags, int cRegions, NewOutlineRegion[] rgOutlnReg);
}
[GuidAttribute("805DB878-BC47-4149-862A-A12725DBC434")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.TextManager.Interop.IVsOverrideTextViewAccessibilityState {
    public abstract virtual int GetOverrides(UInt32& pdwMask, UInt32& pdwFlags);
}
[InterfaceTypeAttribute("1")]
[ComConversionLossAttribute]
[GuidAttribute("C70F1528-1A66-403F-AD42-F60F9D413E05")]
public interface Microsoft.VisualStudio.TextManager.Interop.IVsPackageDefinedTextMarkerType {
    public abstract virtual int GetVisualStyle(UInt32& pdwVisualFlags);
    public abstract virtual int GetDefaultColors(COLORINDEX[] piForeground, COLORINDEX[] piBackground);
    public abstract virtual int GetDefaultLineStyle(COLORINDEX[] piLineColor, LINESTYLE[] piLineIndex);
    public abstract virtual int GetDefaultFontFlags(UInt32& pdwFontFlags);
    public abstract virtual int DrawGlyphWithColors(IntPtr hdc, RECT[] pRect, int iMarkerType, IVsTextMarkerColorSet pMarkerColors, UInt32 dwGlyphDrawFlags, int iLineHeight);
    public abstract virtual int GetBehaviorFlags(UInt32& pdwFlags);
    public abstract virtual int GetPriorityIndex(Int32& piPriorityIndex);
}
[ComConversionLossAttribute]
[InterfaceTypeAttribute("1")]
[GuidAttribute("C47FFD1E-D84E-43A5-8CBE-E4AD06BE795B")]
public interface Microsoft.VisualStudio.TextManager.Interop.IVsPersistentTextImage {
    public abstract virtual IntPtr Image_Alloc(int iSize);
    public abstract virtual IntPtr Image_Realloc(IntPtr& p, int iSize);
    public abstract virtual void Image_Free(IntPtr p);
    public abstract virtual int Image_GetLength();
    public abstract virtual int Image_LoadText(string pszText, int iLength, UInt32 dwFlags);
    public abstract virtual int Image_OpenFullTextScan();
    public abstract virtual int Image_FullTextRead(String& ppszText, Int32& piLength);
    public abstract virtual int Image_CloseFullTextScan();
}
[GuidAttribute("7F57B996-148B-46DE-A261-B1A02E6D9DBA")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.TextManager.Interop.IVsPreliminaryTextChangeCommitEvents {
    public abstract virtual void OnChangesCommitted(UInt32 dwGestureFlags, TextSpan[] ptsChanged);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("100B9A33-905C-4312-B2A2-452189F19AB9")]
public interface Microsoft.VisualStudio.TextManager.Interop.IVsProvideColorableItems {
    public abstract virtual int GetItemCount(Int32& piCount);
    public abstract virtual int GetColorableItem(int iIndex, IVsColorableItem& ppItem);
}
[GuidAttribute("72E67329-8765-4586-8B15-0B445E6F3B57")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.TextManager.Interop.IVsQueryLineChangeCommit {
    public abstract virtual int QuerySendEnterLineCommit(UInt32 dwReserved, int iLineStart, int iLineEnd, UInt32& dwQuerySendCommitFlags);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("6ED9A1CD-E8FD-460A-8690-DD6E5E44B02D")]
public interface Microsoft.VisualStudio.TextManager.Interop.IVsQueryUndoManager {
    public abstract virtual int IsLinkedTransactionOpen(Int32& pbTransactionIsOpen);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("036FBE7A-9ABD-4894-B7F6-1ED3BD0EE247")]
public interface Microsoft.VisualStudio.TextManager.Interop.IVsQueryUndoUnit {
    public abstract virtual int ActionWouldBeAborted(Int32& pbWouldBeAborted);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("FC62B6C7-6E71-44C6-8DD8-016FD5952612")]
public interface Microsoft.VisualStudio.TextManager.Interop.IVsReadOnlyViewNotification {
    public abstract virtual int OnDisabledEditingCommand(Guid& pguidCmdGuid, UInt32 dwCmdId);
}
[GuidAttribute("08363D65-C178-4484-A293-D148173DD750")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.TextManager.Interop.IVsRegisterFindScope {
    public abstract virtual int RegisterFindScope(IVsFindScope pScope, UInt32& pdwCookie);
    public abstract virtual int UnRegisterFindScope(UInt32 dwCookie);
}
[GuidAttribute("96F0CABD-DB51-428F-A42D-C756057D35C2")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.TextManager.Interop.IVsReportExternalErrors {
    public abstract virtual int ClearAllErrors();
    public abstract virtual int AddNewErrors(IVsEnumExternalErrors pErrors);
    public abstract virtual int GetErrors(IVsEnumExternalErrors& pErrors);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("98CEEDBD-07A4-4376-ADE8-5A46B7F5F384")]
public interface Microsoft.VisualStudio.TextManager.Interop.IVsSetSpanMappingEvents {
    public abstract virtual int OnBeginSetSpanMappings(int cSpans, NewSpanMapping[] rgSpans);
    public abstract virtual int OnEndSetSpanMappings();
    public abstract virtual int OnMarkerInvalidated(IVsTextLines pBuffer, IVsTextMarker pMarker);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("78201465-554E-4A7B-998F-443156FD71D3")]
public interface Microsoft.VisualStudio.TextManager.Interop.IVsShortcutManager {
    public abstract virtual int CreateItem(int iShortcutLine, IVsTextLines pBuffer, string pszBufMoniker);
    public abstract virtual int RemoveItem(IVsTextLineMarker pMarker);
    public abstract virtual int WriteUserOptions(IStream pOptionsStream);
    public abstract virtual int ReadUserOptions(IStream pOptionsStream);
}
[GuidAttribute("8C2A8A68-8844-4E55-B0A1-805B4DA0DEB2")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.TextManager.Interop.IVsSmartTagData {
    public abstract virtual int GetImageIndex(Int32& piIndex);
    public abstract virtual int GetContextMenuInfo(Guid& guidID, Int32& nMenuID, IOleCommandTarget& pCmdTarget);
    public abstract virtual int GetContextStream(Int32& piPos, Int32& piLength);
    public abstract virtual int OnDismiss();
    public abstract virtual int OnInvocation();
    public abstract virtual int UpdateView();
    public abstract virtual int GetTimerInterval(Int32& piTime);
    public abstract virtual int IsLeftJustified(Int32& pfIsLeftJustified);
    public abstract virtual int GetTipText(String& pbstrTipText);
}
[GuidAttribute("E2DECE2A-3A77-4FD3-A4B2-FA5EC4EA41D9")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.TextManager.Interop.IVsSmartTagTipWindow {
    public abstract virtual int GetContextStream(Int32& piPos, Int32& piLength);
    public abstract virtual int GetSizePreferences(RECT[] prcCtxBounds, SMARTTAGSIZEDATA[] pSizeData);
    public abstract virtual int Paint(IntPtr hdc, RECT[] prc, UInt32 pColor, UInt32 pColorText, int fSel);
    public abstract virtual int Dismiss();
    public abstract virtual int WndProc(IntPtr hwnd, UInt32 iMsg, IntPtr wParam, IntPtr lParam, IntPtr& pLResult);
    public abstract virtual int SetSmartTagData(IVsSmartTagData pSmartTagData);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("4C5B474B-B539-4A60-9819-82A5BED76C60")]
public interface Microsoft.VisualStudio.TextManager.Interop.IVsSmartTagTipWindow2 {
    public abstract virtual int GetSmartTagData(IVsSmartTagData& pSmartTagData);
}
[GuidAttribute("721D4D8E-E987-4712-B878-88A0E7DBA117")]
[ComConversionLossAttribute]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.TextManager.Interop.IVsSplitPane {
    public abstract virtual int SetParentSplitter(IVsSplitter pSplitter);
    public abstract virtual int GetParentSplitter(IVsSplitter& ppSplitter);
    public abstract virtual int SetFocus();
    public abstract virtual int SetPosition(int iLeft, int iTop, int iRight, int iBottom);
    public abstract virtual int GetPosition(Int32& piLeft, Int32& piTop, Int32& piRight, Int32& piBottom);
    public abstract virtual int GetSizeExtents(Int32& piMinHorz, Int32& piMaxHorz, Int32& piMinVert, Int32& piMaxVert);
    public abstract virtual int GetParentWindow(IntPtr& phwndParent);
    public abstract virtual int GetPaneFlags(UInt32& pdwPaneFlags);
    public abstract virtual int ClosePane();
    public abstract virtual int NotifyPane(SPLITNOTIFYCODE iCode);
    public abstract virtual int DetachPane();
}
[InterfaceTypeAttribute("1")]
[ComConversionLossAttribute]
[GuidAttribute("5486C948-AF82-4DA5-A968-97F3ADA66670")]
public interface Microsoft.VisualStudio.TextManager.Interop.IVsSplitRoot {
    public abstract virtual int GetRootSplitter(IVsSplitter& ppPane);
    public abstract virtual int GetWindowHandle(IntPtr& phwnd);
    public abstract virtual int GetPane(PANETYPE PANETYPE, IVsSplitPane& ppPane);
}
[GuidAttribute("66280096-A495-48E9-8AF4-E758FDE1FCDC")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.TextManager.Interop.IVsSplitter {
    public abstract virtual int SetParentSplitter(IVsSplitter pSplitter);
    public abstract virtual int GetParentSplitter(IVsSplitter& ppSplitter);
    public abstract virtual int SetFocus();
    public abstract virtual int SetPosition(int iLeft, int iTop, int iRight, int iBottom);
    public abstract virtual int GetPosition(Int32& piLeft, Int32& piTop, Int32& piRight, Int32& piBottom);
    public abstract virtual int GetSizeExtents(Int32& piMinHorz, Int32& piMaxHorz, Int32& piMinVert, Int32& piMaxVert);
    public abstract virtual int GetParentWindow(IntPtr& phwndParent);
    public abstract virtual int GetPaneFlags(UInt32& pdwPaneFlags);
    public abstract virtual int ClosePane();
    public abstract virtual int NotifyPane(SPLITNOTIFYCODE iCode);
    public abstract virtual int DetachPane();
    public abstract virtual int GetPane(int iIndex, IVsSplitPane& ppPane);
    public abstract virtual int NotifySplitter(IVsSplitPane pPane, PANEEVENTS iEvent);
    public abstract virtual int IsPanePrimary(IVsSplitPane pPane);
    public abstract virtual int HandleMessage(UInt32 iMsg, IntPtr wParam, IntPtr lParam);
    public abstract virtual int SplitPane(IVsSplitPane pNewPane, int iIndex, int iSize, UInt32 dwFlags, IVsSplitter& ppSplitter);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("B9C97AB2-2A37-4134-93E9-C3014F364AA8")]
public interface Microsoft.VisualStudio.TextManager.Interop.IVsSyntheticRegion {
    public abstract virtual int GetMarkerType(Int32& piMarkerType);
    public abstract virtual int GetBehavior(UInt32& pdwBehavior);
    public abstract virtual int GetText(String& pbstrText);
    public abstract virtual int SetText(string pszText);
    public abstract virtual int GetBaseBufferAnchor(Int32& piAnchorLine, Int32& piAnchorIndex);
    public abstract virtual int SetBaseBufferAnchor(int iAnchorLine, int iAnchorIndex);
    public abstract virtual int GetClientData(IntPtr& pdwData);
    public abstract virtual int SetClientData(IntPtr dwData);
    public abstract virtual int Invalidate(UInt32 dwUpdate);
    public abstract virtual int IsValid(Int32& pfValid);
    public abstract virtual int GetTextLayer(IVsTextLayer& ppLayer);
    public abstract virtual int GetSyntheticLayerSpan(TextSpan[] pSpan);
    public abstract virtual int GetTextImage(IVsTextImage& ppImage);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("1A8FBF86-5949-4E08-B9B6-F528AFB2DF9C")]
public interface Microsoft.VisualStudio.TextManager.Interop.IVsSyntheticTextClient {
    public abstract virtual void OnSyntheticRegionChange(IVsSyntheticRegion pSynthReg, SYNTHETIC_REGION_EVENT EventCode);
    public abstract virtual int GetTipText(IVsSyntheticRegion pSynthReg, String[] pbstrText);
    public abstract virtual int GetErrorText(UInt32 dwReason, IVsSyntheticRegion pSynthReg, String& pbstrText);
    public abstract virtual int GetMarkerCommandInfo(IVsSyntheticRegion pSynthReg, int iItem, String[] pbstrText, UInt32[] pcmdf);
    public abstract virtual int ExecMarkerCommand(IVsSyntheticRegion pSynthReg, int iItem);
    public abstract virtual void OnBeforeSessionEnd();
}
[GuidAttribute("2AB20832-0942-42F9-974F-4E65B85DABF3")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.TextManager.Interop.IVsSyntheticTextManager {
    public abstract virtual int GetSyntheticTextSession(object pOwningObject, IVsSyntheticTextSession& ppSession);
    public abstract virtual int CreateSyntheticTextSession(UInt32 dwFlags, object pOwningObject, IVsSyntheticTextClient pClient, IVsSyntheticTextSession& ppState);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("0C71E351-5141-4B6F-B838-E212F0764875")]
public interface Microsoft.VisualStudio.TextManager.Interop.IVsSyntheticTextSession {
    public abstract virtual int AddSyntheticRegions(UInt32 dwUpdateFlags, int cRegions, NewSyntheticRegion[] rgSynthReg, IVsEnumSyntheticRegions[] ppEnum);
    public abstract virtual int EnumSyntheticRegions(UInt32 dwFindFlags, UInt32 dwCookie, TextSpan[] ptsRange, IVsEnumSyntheticRegions& ppEnum);
    public abstract virtual int UnadviseClient();
    public abstract virtual int Terminate();
}
[GuidAttribute("C08E5275-0D26-4DE9-8892-994024C23750")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.TextManager.Interop.IVsTextBuffer {
    public abstract virtual int LockBuffer();
    public abstract virtual int UnlockBuffer();
    public abstract virtual int InitializeContent(string pszText, int iLength);
    public abstract virtual int GetStateFlags(UInt32& pdwReadOnlyFlags);
    public abstract virtual int SetStateFlags(UInt32 dwReadOnlyFlags);
    public abstract virtual int GetPositionOfLine(int iLine, Int32& piPosition);
    public abstract virtual int GetPositionOfLineIndex(int iLine, int iIndex, Int32& piPosition);
    public abstract virtual int GetLineIndexOfPosition(int iPosition, Int32& piLine, Int32& piColumn);
    public abstract virtual int GetLengthOfLine(int iLine, Int32& piLength);
    public abstract virtual int GetLineCount(Int32& piLineCount);
    public abstract virtual int GetSize(Int32& piLength);
    public abstract virtual int GetLanguageServiceID(Guid& pguidLangService);
    public abstract virtual int SetLanguageServiceID(Guid& guidLangService);
    public abstract virtual int GetUndoManager(IOleUndoManager& ppUndoManager);
    public abstract virtual int Reserved1();
    public abstract virtual int Reserved2();
    public abstract virtual int Reserved3();
    public abstract virtual int Reserved4();
    public abstract virtual int Reload(int fUndoable);
    public abstract virtual int LockBufferEx(UInt32 dwFlags);
    public abstract virtual int UnlockBufferEx(UInt32 dwFlags);
    public abstract virtual int GetLastLineIndex(Int32& piLine, Int32& piIndex);
    public abstract virtual int Reserved5();
    public abstract virtual int Reserved6();
    public abstract virtual int Reserved7();
    public abstract virtual int Reserved8();
    public abstract virtual int Reserved9();
    public abstract virtual int Reserved10();
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("84465401-2886-4CE0-AF50-C0560226ED40")]
public interface Microsoft.VisualStudio.TextManager.Interop.IVsTextBufferCoordinator {
    public abstract virtual int SetBuffers(IVsTextLines pPrimaryBuffer, IVsTextLines pSecondaryBuffer);
    public abstract virtual int SetSpanMappings(int cSpans, NewSpanMapping[] rgSpans);
    public abstract virtual int MapPrimaryToSecondarySpan(TextSpan tsPrimary, TextSpan[] ptsSecondary);
    public abstract virtual int MapSecondaryToPrimarySpan(TextSpan tsSecondary, TextSpan[] ptsPrimary);
    public abstract virtual int GetPrimaryBuffer(IVsTextLines& ppBuffer);
    public abstract virtual int GetSecondaryBuffer(IVsTextLines& ppBuffer);
    public abstract virtual int EnableReplication(UInt32 bcrd, int fEnable);
    public abstract virtual int GetMappingOfPrimaryPosition(int lPosition, TextSpan[] ptsPrimary, TextSpan[] ptsSecondary);
    public abstract virtual int SetBufferMappingModes(UInt32 bcmmPrimary, UInt32 bcmmSecondary);
    public abstract virtual int EnumSpans(IVsEnumBufferCoordinatorSpans& ppEnum);
}
[GuidAttribute("B7515E7A-70F0-44ED-96B7-FB7EB6450C10")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.TextManager.Interop.IVsTextBufferDataEvents {
    public abstract virtual void OnFileChanged(UInt32 grfChange, UInt32 dwFileAttrs);
    public abstract virtual int OnLoadCompleted(int fReload);
}
[GuidAttribute("44B0CAB3-6DF8-4931-9064-8FD18AFBC88E")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.TextManager.Interop.IVsTextBufferEvents {
    public abstract virtual void OnNewLanguageService(Guid& sidLangServiceID);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("9F0823E9-544D-4FA0-9400-0D602C9A510E")]
public interface Microsoft.VisualStudio.TextManager.Interop.IVsTextBufferEx {
    public abstract virtual int GetTrackChanges(Int32& pfIsTracking);
    public abstract virtual int SetTrackChangesSuppression(int fSupress);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("F229A34E-5880-4C20-94C3-717CF4BE1FDA")]
public interface Microsoft.VisualStudio.TextManager.Interop.IVsTextBufferTempInit {
    public abstract virtual int InitializeContentEx(BUFFERINITEX[] pInit);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("A7A64DE3-9B5C-47F0-ABAD-0AEDBD6CC057")]
public interface Microsoft.VisualStudio.TextManager.Interop.IVsTextColorState {
    public abstract virtual int ReColorizeLines(int iTopLine, int iBottomLine);
    public abstract virtual int GetColorStateAtStartOfLine(int iLine, Int32& piState);
}
[GuidAttribute("A6078038-D578-4F32-B9B2-C83E1726454D")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.TextManager.Interop.IVsTextEditorPropertyCategoryContainer {
    public abstract virtual int GetPropertyCategory(Guid& rguidCategory, IVsTextEditorPropertyContainer& ppProp);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("7669CC95-4640-461C-8158-16F65265D77C")]
public interface Microsoft.VisualStudio.TextManager.Interop.IVsTextEditorPropertyContainer {
    public abstract virtual int GetProperty(VSEDITPROPID idProp, Object& pvar);
    public abstract virtual int SetProperty(VSEDITPROPID idProp, object var);
    public abstract virtual int RemoveProperty(VSEDITPROPID idProp);
}
[GuidAttribute("0BF16544-9CEC-40E1-80B1-E467E21B97FE")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.TextManager.Interop.IVsTextFind {
    public abstract virtual int Find(string pszText, int iStartLine, int iStartIndex, int iEndLine, int iEndIndex, int iFlags, Int32& piLine, Int32& piCol);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("1A705427-815C-4DB6-9B5C-6D45CDDDD0C4")]
public interface Microsoft.VisualStudio.TextManager.Interop.IVsTextHidingLayerModule {
    public abstract virtual int MakeBaseSpanVisible(TextSpan[] pBaseSpan);
}
[GuidAttribute("67068DC0-C069-11D2-936C-D714766E8B50")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.TextManager.Interop.IVsTextImage {
    public abstract virtual int GetCharSize(Int32& pcch);
    public abstract virtual int GetLineSize(Int32& pcLines);
    public abstract virtual int GetOffsetOfTextAddress(TextAddress ta, Int32& piOffset);
    public abstract virtual int GetTextAddressOfOffset(int iOffset, TextAddress[] pta);
    public abstract virtual int Replace(UInt32 dwFlags, TextSpan[] pts, int cch, string pchText, TextSpan[] ptsChanged);
    public abstract virtual int GetSpanLength(TextSpan[] pts, Int32& pcch);
    public abstract virtual int GetTextBSTR(TextSpan[] pts, String& pbstrText);
    public abstract virtual int GetText(TextSpan[] pts, int cch, UInt16[] psz);
    public abstract virtual int GetLineLength(int iLine, Int32& piLength);
    public abstract virtual int GetLine(UInt32 grfGet, int iLine, int iStartIndex, int iEndIndex, LINEDATAEX[] pLineData);
    public abstract virtual int ReleaseLine(LINEDATAEX[] pLineData);
    public abstract virtual int AdviseTextImageEvents(IVsTextImageEvents pSink, UInt32& pCookie);
    public abstract virtual int UnadviseTextImageEvents(UInt32 Cookie);
    public abstract virtual int LockImage(UInt32 grfLock);
    public abstract virtual int UnlockImage(UInt32 grfLock);
}
[GuidAttribute("F86209FE-6BAA-40DC-AA5D-6C9E83B032B9")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.TextManager.Interop.IVsTextImage2 {
    public abstract virtual int GetEolTypeEx(LINEDATAEX[] pld, UInt32& piEolType);
    public abstract virtual int GetEolLengthEx(LINEDATAEX[] pld, UInt32& piEolType);
    public abstract virtual int GetEolTextEx(LINEDATAEX[] pld, String& pbstrEolText);
}
[GuidAttribute("B1ADB4FC-562F-43E6-8A91-CD2CFFA2B377")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.TextManager.Interop.IVsTextImageEvents {
    public abstract virtual void OnTextChange(TextAddress taStart, TextAddress taEnd, TextAddress taNewEnd);
}
[GuidAttribute("C5557BAA-B685-46DC-AF46-C16BFDE8FAB7")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.TextManager.Interop.IVsTextImageUtilities {
    public abstract virtual int GetReplaceText(UInt32 grfOptions, string pszReplace, IVsTextImage pText, TextSpan[] pMatch, IVsTextSpanSet pTags, String& pbstrComputedText);
    public abstract virtual int LoadTextFile(string pszFileName, UInt32 vstffIn, UInt32& pvstffOut, String& pbstr);
    public abstract virtual int LoadTextImageFromFile(string pszFileName, IVsTextImage pImage, UInt32 vstffIn, UInt32& pvstffOut);
    public abstract virtual int SaveTextImageToFile(string pszFileName, IVsTextImage pImage, UInt32 vstffIn, UInt32& pvstffOut);
    public abstract virtual int GetTextFormat(UInt32 vstffIn, UInt32 cbData, Byte[] pData, UInt32& pvstffOut);
    public abstract virtual int LoadTextImageFromMemory(IVsTextImage pImage, UInt32 vstffIn, UInt32 cbData, Byte[] pData, UInt32& pvstffOut);
    public abstract virtual int SaveTextImageToMemory(IVsTextImage pImage, UInt32 vstffIn, UInt32 cbData, Byte[] pData, UInt32& pcbWritten, UInt32& pvstffOut);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("0E145D3F-BEFC-4FD9-8714-B01AE89F4396")]
public interface Microsoft.VisualStudio.TextManager.Interop.IVsTextLayer {
    public abstract virtual int LocalLineIndexToBase(int iLocalLine, int iLocalIndex, Int32& piBaseLine, Int32& piBaseIndex);
    public abstract virtual int BaseLineIndexToLocal(int iBaseLine, int iBaseIndex, Int32& piLocalLine, Int32& piLocalIndex);
    public abstract virtual int LocalLineIndexToDeeperLayer(IVsTextLayer pTargetLayer, int iLocalLine, int iLocalIndex, Int32& piTargetLine, Int32& piTargetIndex);
    public abstract virtual int DeeperLayerLineIndexToLocal(UInt32 dwFlags, IVsTextLayer pTargetLayer, int iLayerLine, int iLayerIndex, Int32& piLocalLine, Int32& piLocalIndex);
    public abstract virtual int GetBaseBuffer(IVsTextLines& ppiBuf);
    public abstract virtual int LockBufferEx(UInt32 dwFlags);
    public abstract virtual int UnlockBufferEx(UInt32 dwFlags);
    public abstract virtual int GetLengthOfLine(int iLine, Int32& piLength);
    public abstract virtual int GetLineCount(Int32& piLineCount);
    public abstract virtual int GetLastLineIndex(Int32& piLine, Int32& piIndex);
    public abstract virtual int GetMarkerData(int iTopLine, int iBottomLine, MARKERDATA[] pMarkerData);
    public abstract virtual int ReleaseMarkerData(MARKERDATA[] pMarkerData);
    public abstract virtual int GetLineDataEx(UInt32 dwFlags, int iLine, int iStartIndex, int iEndIndex, LINEDATAEX[] pLineData, MARKERDATA[] pMarkerData);
    public abstract virtual int ReleaseLineDataEx(LINEDATAEX[] pLineData);
    public abstract virtual int GetLineText(int iStartLine, int iStartIndex, int iEndLine, int iEndIndex, String& pbstrBuf);
    public abstract virtual int CopyLineText(int iStartLine, int iStartIndex, int iEndLine, int iEndIndex, IntPtr pszBuf, Int32& pcchBuf);
    public abstract virtual int ReplaceLines(int iStartLine, int iStartIndex, int iEndLine, int iEndIndex, IntPtr pszText, int iNewLen, TextSpan[] pChangedSpan);
    public abstract virtual int CanReplaceLines(int iStartLine, int iStartIndex, int iEndLine, int iEndIndex, int iNewLen);
    public abstract virtual int CreateTrackingPoint(int iLine, int iIndex, IVsTextTrackingPoint& ppMarker);
    public abstract virtual int EnumLayerMarkers(int iStartLine, int iStartIndex, int iEndLine, int iEndIndex, int iMarkerType, UInt32 dwFlags, IVsEnumLayerMarkers& ppEnum);
    public abstract virtual int ReplaceLinesEx(UInt32 dwFlags, int iStartLine, int iStartIndex, int iEndLine, int iEndIndex, IntPtr pszText, int iNewLen, TextSpan[] pChangedSpan);
    public abstract virtual int MapLocalSpansToTextOriginatingLayer(UInt32 dwFlags, IVsEnumTextSpans pLocalSpanEnum, IVsTextLayer& ppTargetLayer, IVsEnumTextSpans& ppTargetSpanEnum);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("1FE22AB1-40CA-45A0-BD56-7E65FA3B774C")]
public interface Microsoft.VisualStudio.TextManager.Interop.IVsTextLayer2 {
    public abstract virtual int GetEolTypeEx(LINEDATAEX[] pld, UInt32& piEolType);
    public abstract virtual int GetEolLengthEx(LINEDATAEX[] pld, UInt32& piEolType);
    public abstract virtual int GetEolTextEx(LINEDATAEX[] pld, String& pbstrEolText);
}
[GuidAttribute("CDE3413A-AD8E-495F-A74F-760547294A6F")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.TextManager.Interop.IVsTextLayerEvents {
    public abstract virtual void OnMappingChange();
    public abstract virtual void OnMappingChangeComplete();
}
[InterfaceTypeAttribute("1")]
[ComConversionLossAttribute]
[GuidAttribute("28C149D2-8FCB-4AB3-8584-9A2747F3F8FC")]
public interface Microsoft.VisualStudio.TextManager.Interop.IVsTextLayerMarker {
    public abstract virtual int GetType(Int32& piMarkerType);
    public abstract virtual int SetType(int iMarkerType);
    public abstract virtual int GetVisualStyle(UInt32& pdwFlags);
    public abstract virtual int SetVisualStyle(UInt32 dwFlags);
    public abstract virtual int Invalidate();
    public abstract virtual int DrawGlyph(IntPtr hdc, RECT[] pRect);
    public abstract virtual int GetTipText(String[] pbstrText);
    public abstract virtual int UnadviseClient();
    public abstract virtual int GetMarkerCommandInfo(int iItem, String[] pbstrText, UInt32[] pcmdf);
    public abstract virtual int ExecMarkerCommand(int iItem);
    public abstract virtual int GetBehavior(UInt32& pdwBehavior);
    public abstract virtual int SetBehavior(UInt32 dwBehavior);
    public abstract virtual int GetPriorityIndex(Int32& piPriorityIndex);
    public abstract virtual int GetTextLayer(IVsTextLayer& ppLayer);
    public abstract virtual int ResetSpan(int iStartLine, int iStartIndex, int iEndLine, int iEndIndex);
    public abstract virtual int GetCurrentSpan(TextSpan[] pSpan);
    public abstract virtual int IsInvalidated();
    public abstract virtual int QueryClientInterface(Guid& iid, IntPtr& ppClient);
    public abstract virtual int DrawGlyphEx(UInt32 dwFlags, IntPtr hdc, RECT[] pRect, int iLineHeight);
}
[GuidAttribute("31E2DCA7-CCFF-4E09-B433-17C739CF69AD")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.TextManager.Interop.IVsTextLineMarker {
    public abstract virtual int GetType(Int32& piMarkerType);
    public abstract virtual int SetType(int iMarkerType);
    public abstract virtual int GetVisualStyle(UInt32& pdwFlags);
    public abstract virtual int SetVisualStyle(UInt32 dwFlags);
    public abstract virtual int Invalidate();
    public abstract virtual int DrawGlyph(IntPtr hdc, RECT[] pRect);
    public abstract virtual int GetTipText(String[] pbstrText);
    public abstract virtual int UnadviseClient();
    public abstract virtual int GetMarkerCommandInfo(int iItem, String[] pbstrText, UInt32[] pcmdf);
    public abstract virtual int ExecMarkerCommand(int iItem);
    public abstract virtual int GetBehavior(UInt32& pdwBehavior);
    public abstract virtual int SetBehavior(UInt32 dwBehavior);
    public abstract virtual int GetPriorityIndex(Int32& piPriorityIndex);
    public abstract virtual int GetLineBuffer(IVsTextLines& ppBuffer);
    public abstract virtual int ResetSpan(int iStartLine, int iStartIndex, int iEndLine, int iEndIndex);
    public abstract virtual int GetCurrentSpan(TextSpan[] pSpan);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("1C31EE6E-FC66-4FC8-8CC5-6A4134369F4E")]
public interface Microsoft.VisualStudio.TextManager.Interop.IVsTextLineMarkerEx {
    public abstract virtual int GetClientData(IntPtr& pdwData);
    public abstract virtual int SetClientData(IntPtr dwData);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("ECF3E19D-149C-43AA-80C2-D0A46946DAA3")]
public interface Microsoft.VisualStudio.TextManager.Interop.IVsTextLines {
    public abstract virtual int LockBuffer();
    public abstract virtual int UnlockBuffer();
    public abstract virtual int InitializeContent(string pszText, int iLength);
    public abstract virtual int GetStateFlags(UInt32& pdwReadOnlyFlags);
    public abstract virtual int SetStateFlags(UInt32 dwReadOnlyFlags);
    public abstract virtual int GetPositionOfLine(int iLine, Int32& piPosition);
    public abstract virtual int GetPositionOfLineIndex(int iLine, int iIndex, Int32& piPosition);
    public abstract virtual int GetLineIndexOfPosition(int iPosition, Int32& piLine, Int32& piColumn);
    public abstract virtual int GetLengthOfLine(int iLine, Int32& piLength);
    public abstract virtual int GetLineCount(Int32& piLineCount);
    public abstract virtual int GetSize(Int32& piLength);
    public abstract virtual int GetLanguageServiceID(Guid& pguidLangService);
    public abstract virtual int SetLanguageServiceID(Guid& guidLangService);
    public abstract virtual int GetUndoManager(IOleUndoManager& ppUndoManager);
    public abstract virtual int Reserved1();
    public abstract virtual int Reserved2();
    public abstract virtual int Reserved3();
    public abstract virtual int Reserved4();
    public abstract virtual int Reload(int fUndoable);
    public abstract virtual int LockBufferEx(UInt32 dwFlags);
    public abstract virtual int UnlockBufferEx(UInt32 dwFlags);
    public abstract virtual int GetLastLineIndex(Int32& piLine, Int32& piIndex);
    public abstract virtual int Reserved5();
    public abstract virtual int Reserved6();
    public abstract virtual int Reserved7();
    public abstract virtual int Reserved8();
    public abstract virtual int Reserved9();
    public abstract virtual int Reserved10();
    public abstract virtual int GetMarkerData(int iTopLine, int iBottomLine, MARKERDATA[] pMarkerData);
    public abstract virtual int ReleaseMarkerData(MARKERDATA[] pMarkerData);
    public abstract virtual int GetLineData(int iLine, LINEDATA[] pLineData, MARKERDATA[] pMarkerData);
    public abstract virtual int ReleaseLineData(LINEDATA[] pLineData);
    public abstract virtual int GetLineText(int iStartLine, int iStartIndex, int iEndLine, int iEndIndex, String& pbstrBuf);
    public abstract virtual int CopyLineText(int iStartLine, int iStartIndex, int iEndLine, int iEndIndex, IntPtr pszBuf, Int32& pcchBuf);
    public abstract virtual int ReplaceLines(int iStartLine, int iStartIndex, int iEndLine, int iEndIndex, IntPtr pszText, int iNewLen, TextSpan[] pChangedSpan);
    public abstract virtual int CanReplaceLines(int iStartLine, int iStartIndex, int iEndLine, int iEndIndex, int iNewLen);
    public abstract virtual int CreateLineMarker(int iMarkerType, int iStartLine, int iStartIndex, int iEndLine, int iEndIndex, IVsTextMarkerClient pClient, IVsTextLineMarker[] ppMarker);
    public abstract virtual int EnumMarkers(int iStartLine, int iStartIndex, int iEndLine, int iEndIndex, int iMarkerType, UInt32 dwFlags, IVsEnumLineMarkers& ppEnum);
    public abstract virtual int FindMarkerByLineIndex(int iMarkerType, int iStartingLine, int iStartingIndex, UInt32 dwFlags, IVsTextLineMarker& ppMarker);
    public abstract virtual int AdviseTextLinesEvents(IVsTextLinesEvents pSink, UInt32& pdwCookie);
    public abstract virtual int UnadviseTextLinesEvents(UInt32 dwCookie);
    public abstract virtual int GetPairExtents(TextSpan[] pSpanIn, TextSpan[] pSpanOut);
    public abstract virtual int ReloadLines(int iStartLine, int iStartIndex, int iEndLine, int iEndIndex, IntPtr pszText, int iNewLen, TextSpan[] pChangedSpan);
    public abstract virtual int IVsTextLinesReserved1(int iLine, LINEDATA[] pLineData, int fAttributes);
    public abstract virtual int GetLineDataEx(UInt32 dwFlags, int iLine, int iStartIndex, int iEndIndex, LINEDATAEX[] pLineData, MARKERDATA[] pMarkerData);
    public abstract virtual int ReleaseLineDataEx(LINEDATAEX[] pLineData);
    public abstract virtual int CreateEditPoint(int iLine, int iIndex, Object& ppEditPoint);
    public abstract virtual int ReplaceLinesEx(UInt32 dwFlags, int iStartLine, int iStartIndex, int iEndLine, int iEndIndex, IntPtr pszText, int iNewLen, TextSpan[] pChangedSpan);
    public abstract virtual int CreateTextPoint(int iLine, int iIndex, Object& ppTextPoint);
}
[GuidAttribute("181B18A3-A0E8-436B-8AEF-500043C7CC78")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.TextManager.Interop.IVsTextLines2 {
    public abstract virtual int GetEolTypeEx(LINEDATAEX[] pld, UInt32& piEolType);
    public abstract virtual int GetEolLengthEx(LINEDATAEX[] pld, UInt32& piEolType);
    public abstract virtual int GetEolTextEx(LINEDATAEX[] pld, String& pbstrEolText);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("598D7074-DC17-4162-9A2F-97DD4540C2DD")]
public interface Microsoft.VisualStudio.TextManager.Interop.IVsTextLinesEvents {
    public abstract virtual void OnChangeLineText(TextLineChange[] pTextLineChange, int fLast);
    public abstract virtual void OnChangeLineAttributes(int iFirstLine, int iLastLine);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("CAF8109F-B74B-429F-A11A-4944AADE9AB2")]
public interface Microsoft.VisualStudio.TextManager.Interop.IVsTextMacroHelper {
    public abstract virtual int RecordNewLine();
    public abstract virtual int RecordTypeChar(ushort wchChar, int fIsOvertype);
    public abstract virtual int RecordTypeChars(string pwszChars, int fIsOvertype);
    public abstract virtual int RecordRemovePreviousTyping(string pwszPrevChars);
    public abstract virtual int RecordDelete(int fLeft, UInt32 uiReps);
    public abstract virtual int RecordDeleteSpace(int fVertical);
    public abstract virtual int RecordMoveSelectionRel(MOVESELECTION_REL_TYPE mst, int fBackwards, int fExtend);
    public abstract virtual int RecordMoveSelectionAbs(MOVESELECTION_ABS_TYPE mst, int fExtend);
    public abstract virtual int RecordCollapseSelection();
    public abstract virtual int RecordSelectAll();
    public abstract virtual int RecordSwapAnchor();
    public abstract virtual int RecordEnterBoxMode();
    public abstract virtual int RecordActivateDocument();
    public abstract virtual int RecordGotoLine(int iLine, int fExtend);
    public abstract virtual int RecordCut();
    public abstract virtual int RecordCopy();
    public abstract virtual int RecordPaste();
    public abstract virtual int RecordBookmarkClearAll();
    public abstract virtual int RecordBookmarkSetClear(int fSet);
    public abstract virtual int RecordBookmarkNextPrev(int fNext);
    public abstract virtual int RecordChangeCase(CASESELECTION_TYPE cst);
    public abstract virtual int RecordIndentUnindent(int fIndent);
    public abstract virtual int RecordFormatSelection();
    public abstract virtual int RecordTabifyUntabify(int fTabify);
    public abstract virtual int RecordInsertFile(string pwszName);
}
[GuidAttribute("909F83E3-B3FC-4BBF-8820-64378744B39B")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.TextManager.Interop.IVsTextManager {
    public abstract virtual int RegisterView(IVsTextView pView, IVsTextBuffer pBuffer);
    public abstract virtual int UnregisterView(IVsTextView pView);
    public abstract virtual int EnumViews(IVsTextBuffer pBuffer, IVsEnumTextViews& ppEnum);
    public abstract virtual int CreateSelectionAction(IVsTextBuffer pBuffer, IVsTextSelectionAction& ppAction);
    public abstract virtual int MapFilenameToLanguageSID(string pszFileName, Guid& pguidLangSID);
    public abstract virtual int GetRegisteredMarkerTypeID(Guid& pguidMarker, Int32& piMarkerTypeID);
    public abstract virtual int GetMarkerTypeInterface(int iMarkerTypeID, IVsTextMarkerType& ppMarkerType);
    public abstract virtual int GetMarkerTypeCount(Int32& piMarkerTypeCount);
    public abstract virtual int GetActiveView(int fMustHaveFocus, IVsTextBuffer pBuffer, IVsTextView& ppView);
    public abstract virtual int GetUserPreferences(VIEWPREFERENCES[] pViewPrefs, FRAMEPREFERENCES[] pFramePrefs, LANGPREFERENCES[] pLangPrefs, FONTCOLORPREFERENCES[] pColorPrefs);
    public abstract virtual int SetUserPreferences(VIEWPREFERENCES[] pViewPrefs, FRAMEPREFERENCES[] pFramePrefs, LANGPREFERENCES[] pLangPrefs, FONTCOLORPREFERENCES[] pColorPrefs);
    public abstract virtual int SetFileChangeAdvise(string pszFileName, int fStart);
    public abstract virtual int SuspendFileChangeAdvise(string pszFileName, int fSuspend);
    public abstract virtual int NavigateToPosition(IVsTextBuffer pBuffer, Guid& guidDocViewType, int iPos, int iLen);
    public abstract virtual int NavigateToLineAndColumn(IVsTextBuffer pBuffer, Guid& guidDocViewType, int iStartRow, int iStartIndex, int iEndRow, int iEndIndex);
    public abstract virtual int GetBufferSccStatus(IVsUserData pBufData, Int32& pbNonEditable);
    public abstract virtual int RegisterBuffer(IVsTextBuffer pBuffer);
    public abstract virtual int UnregisterBuffer(IVsTextBuffer pBuffer);
    public abstract virtual int EnumBuffers(IVsEnumTextBuffers& ppEnum);
    public abstract virtual int GetPerLanguagePreferences(LANGPREFERENCES[] pLangPrefs);
    public abstract virtual int SetPerLanguagePreferences(LANGPREFERENCES[] pLangPrefs);
    public abstract virtual int AttemptToCheckOutBufferFromScc(IVsUserData pBufData, Int32& pfCheckoutSucceeded);
    public abstract virtual int GetShortcutManager(IVsShortcutManager& ppShortcutMgr);
    public abstract virtual int RegisterIndependentView(object pUnk, IVsTextBuffer pBuffer);
    public abstract virtual int UnregisterIndependentView(object pUnk, IVsTextBuffer pBuffer);
    public abstract virtual int IgnoreNextFileChange(IVsTextBuffer pBuffer);
    public abstract virtual int AdjustFileChangeIgnoreCount(IVsTextBuffer pBuffer, int fIgnore);
    public abstract virtual int GetBufferSccStatus2(string pszFileName, Int32& pbNonEditable, Int32& piStatusFlags);
    public abstract virtual int AttemptToCheckOutBufferFromScc2(string pszFileName, Int32& pfCheckoutSucceeded, Int32& piStatusFlags);
    public abstract virtual int EnumLanguageServices(IVsEnumGUID& ppEnum);
    public abstract virtual int EnumIndependentViews(IVsTextBuffer pBuffer, IVsEnumIndependentViews& ppEnum);
}
[GuidAttribute("072A28FD-1AF3-48AF-9C85-C79404DBA30C")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.TextManager.Interop.IVsTextManager2 {
    public abstract virtual int GetBufferSccStatus3(IVsTextBuffer pBuffer, string pszFileName, Int32& pbCheckoutSucceeded, Int32& piStatusFlags);
    public abstract virtual int AttemptToCheckOutBufferFromScc3(IVsTextBuffer pBuffer, string pszFileName, UInt32 dwQueryEditFlags, Int32& pbCheckoutSucceeded, Int32& piStatusFlags);
    public abstract virtual int GetUserPreferences2(VIEWPREFERENCES2[] pViewPrefs, FRAMEPREFERENCES2[] pFramePrefs, LANGPREFERENCES2[] pLangPrefs, FONTCOLORPREFERENCES2[] pColorPrefs);
    public abstract virtual int SetUserPreferences2(VIEWPREFERENCES2[] pViewPrefs, FRAMEPREFERENCES2[] pFramePrefs, LANGPREFERENCES2[] pLangPrefs, FONTCOLORPREFERENCES2[] pColorPrefs);
    public abstract virtual int ResetColorableItems(Guid guidLang);
    public abstract virtual int GetExpansionManager(IVsExpansionManager& pExpansionManager);
    public abstract virtual int GetActiveView2(int fMustHaveFocus, IVsTextBuffer pBuffer, UInt32 grfIncludeViewFrameType, IVsTextView& ppView);
    public abstract virtual int NavigateToPosition2(IVsTextBuffer pBuffer, Guid& guidDocViewType, int iPos, int iLen, UInt32 grfIncludeViewFrameType);
    public abstract virtual int NavigateToLineAndColumn2(IVsTextBuffer pBuffer, Guid& guidDocViewType, int iStartRow, int iStartIndex, int iEndRow, int iEndIndex, UInt32 grfIncludeViewFrameType);
    public abstract virtual int FireReplaceAllInFilesBegin();
    public abstract virtual int FireReplaceAllInFilesEnd();
}
[GuidAttribute("F06DF8BD-23F9-49A3-94C3-F3228CF60F2D")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.TextManager.Interop.IVsTextManager3 {
    public abstract virtual int GetUserPreferences3(VIEWPREFERENCES3[] pViewPrefs, FRAMEPREFERENCES2[] pFramePrefs, LANGPREFERENCES2[] pLangPrefs, FONTCOLORPREFERENCES2[] pColorPrefs);
    public abstract virtual int SetUserPreferences3(VIEWPREFERENCES3[] pViewPrefs, FRAMEPREFERENCES2[] pFramePrefs, LANGPREFERENCES2[] pLangPrefs, FONTCOLORPREFERENCES2[] pColorPrefs);
    public abstract virtual int FindLanguageSIDForExtensionlessFilename(string pszFileName, Guid& pguidLangSID);
    public abstract virtual int PrimeExpansionManager(Guid& guidLang);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("4125ABF2-621E-4FE8-A4F2-C7A9F5EF2EED")]
public interface Microsoft.VisualStudio.TextManager.Interop.IVsTextManager4 {
    public abstract virtual int GetUserPreferences4(VIEWPREFERENCES3[] pViewPrefs, LANGPREFERENCES3[] pLangPrefs, FONTCOLORPREFERENCES2[] pColorPrefs);
    public abstract virtual int SetUserPreferences4(VIEWPREFERENCES3[] pViewPrefs, LANGPREFERENCES3[] pLangPrefs, FONTCOLORPREFERENCES2[] pColorPrefs);
}
[GuidAttribute("A600FB6F-FE09-43DD-8D2D-96347BF78F4F")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.TextManager.Interop.IVsTextManager5 {
    public abstract virtual int GetUserPreferences5(VIEWPREFERENCES4[] pViewPrefs, LANGPREFERENCES3[] pLangPrefs, FONTCOLORPREFERENCES2[] pColorPrefs);
    public abstract virtual int SetUserPreferences5(VIEWPREFERENCES4[] pViewPrefs, LANGPREFERENCES3[] pLangPrefs, FONTCOLORPREFERENCES2[] pColorPrefs);
}
[GuidAttribute("A50CF306-7BEE-4349-8789-DAE896A15E07")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.TextManager.Interop.IVsTextManager6 {
    public abstract virtual int GetUserPreferences6(VIEWPREFERENCES5[] pViewPrefs, LANGPREFERENCES3[] pLangPrefs, FONTCOLORPREFERENCES2[] pColorPrefs);
    public abstract virtual int SetUserPreferences6(VIEWPREFERENCES5[] pViewPrefs, LANGPREFERENCES3[] pLangPrefs, FONTCOLORPREFERENCES2[] pColorPrefs);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("B3175059-C6AA-4519-86C3-1FE594D26C35")]
public interface Microsoft.VisualStudio.TextManager.Interop.IVsTextManagerEvents {
    public abstract virtual void OnRegisterMarkerType(int iMarkerType);
    public abstract virtual void OnRegisterView(IVsTextView pView);
    public abstract virtual void OnUnregisterView(IVsTextView pView);
    public abstract virtual void OnUserPreferencesChanged(VIEWPREFERENCES[] pViewPrefs, FRAMEPREFERENCES[] pFramePrefs, LANGPREFERENCES[] pLangPrefs, FONTCOLORPREFERENCES[] pColorPrefs);
}
[GuidAttribute("4697E418-183E-414E-9173-E5FBF27692A9")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.TextManager.Interop.IVsTextManagerEvents2 {
    public abstract virtual int OnRegisterMarkerType(int iMarkerType);
    public abstract virtual int OnRegisterView(IVsTextView pView);
    public abstract virtual int OnUnregisterView(IVsTextView pView);
    public abstract virtual int OnUserPreferencesChanged2(VIEWPREFERENCES2[] pViewPrefs, FRAMEPREFERENCES2[] pFramePrefs, LANGPREFERENCES2[] pLangPrefs, FONTCOLORPREFERENCES2[] pColorPrefs);
    public abstract virtual int OnReplaceAllInFilesBegin();
    public abstract virtual int OnReplaceAllInFilesEnd();
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("040929D6-0E89-4987-A450-C0F91D03DFC8")]
public interface Microsoft.VisualStudio.TextManager.Interop.IVsTextManagerEvents3 {
    public abstract virtual int OnRegisterMarkerType(int iMarkerType);
    public abstract virtual int OnRegisterView(IVsTextView pView);
    public abstract virtual int OnUnregisterView(IVsTextView pView);
    public abstract virtual int OnUserPreferencesChanged3(VIEWPREFERENCES3[] pViewPrefs, FRAMEPREFERENCES2[] pFramePrefs, LANGPREFERENCES2[] pLangPrefs, FONTCOLORPREFERENCES2[] pColorPrefs);
    public abstract virtual int OnReplaceAllInFilesBegin();
    public abstract virtual int OnReplaceAllInFilesEnd();
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("0298015A-2C85-4076-9483-F56D91BA14E2")]
public interface Microsoft.VisualStudio.TextManager.Interop.IVsTextManagerEvents4 {
    public abstract virtual int OnUserPreferencesChanged4(VIEWPREFERENCES3[] pViewPrefs, LANGPREFERENCES3[] pLangPrefs, FONTCOLORPREFERENCES2[] pColorPrefs);
}
[GuidAttribute("23C5EA9D-2A1F-4FD5-A131-C23FA0689BC2")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.TextManager.Interop.IVsTextManagerEvents5 {
    public abstract virtual int OnUserPreferencesChanged5(VIEWPREFERENCES4[] pViewPrefs, LANGPREFERENCES3[] pLangPrefs, FONTCOLORPREFERENCES2[] pColorPrefs);
}
[GuidAttribute("E7B06D6E-6CB8-43FE-B631-D3DF4F383E98")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.TextManager.Interop.IVsTextManagerEvents6 {
    public abstract virtual int OnUserPreferencesChanged6(VIEWPREFERENCES5[] pViewPrefs, LANGPREFERENCES3[] pLangPrefs, FONTCOLORPREFERENCES2[] pColorPrefs);
}
[ComConversionLossAttribute]
[GuidAttribute("950122D9-1A51-43CA-8CED-B5D9E42DE1B5")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.TextManager.Interop.IVsTextMarker {
    public abstract virtual int GetType(Int32& piMarkerType);
    public abstract virtual int SetType(int iMarkerType);
    public abstract virtual int GetVisualStyle(UInt32& pdwFlags);
    public abstract virtual int SetVisualStyle(UInt32 dwFlags);
    public abstract virtual int Invalidate();
    public abstract virtual int DrawGlyph(IntPtr hdc, RECT[] pRect);
    public abstract virtual int GetTipText(String[] pbstrText);
    public abstract virtual int UnadviseClient();
    public abstract virtual int GetMarkerCommandInfo(int iItem, String[] pbstrText, UInt32[] pcmdf);
    public abstract virtual int ExecMarkerCommand(int iItem);
    public abstract virtual int GetBehavior(UInt32& pdwBehavior);
    public abstract virtual int SetBehavior(UInt32 dwBehavior);
    public abstract virtual int GetPriorityIndex(Int32& piPriorityIndex);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("B1938F1B-D7A9-42F8-9960-D009027B3D2E")]
public interface Microsoft.VisualStudio.TextManager.Interop.IVsTextMarkerClient {
    public abstract virtual void MarkerInvalidated();
    public abstract virtual int GetTipText(IVsTextMarker pMarker, String[] pbstrText);
    public abstract virtual void OnBufferSave(string pszFileName);
    public abstract virtual void OnBeforeBufferClose();
    public abstract virtual int GetMarkerCommandInfo(IVsTextMarker pMarker, int iItem, String[] pbstrText, UInt32[] pcmdf);
    public abstract virtual int ExecMarkerCommand(IVsTextMarker pMarker, int iItem);
    public abstract virtual void OnAfterSpanReload();
    public abstract virtual int OnAfterMarkerChange(IVsTextMarker pMarker);
}
[GuidAttribute("C4B874D3-1491-4F13-8B9E-17249EC4902B")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.TextManager.Interop.IVsTextMarkerClientAdvanced {
    public abstract virtual int OnMarkerTextChanged(IVsTextMarker pMarker);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("BA48A96D-40E9-4723-BDD8-B99072A1A426")]
public interface Microsoft.VisualStudio.TextManager.Interop.IVsTextMarkerClientEx {
    public abstract virtual int MarkerInvalidated(IVsTextLines pBuffer, IVsTextMarker pMarker);
    public abstract virtual int OnHoverOverMarker(IVsTextView pView, IVsTextMarker pMarker, int fShowUI);
}
[GuidAttribute("93373F76-DF07-46DB-9415-1772069F60A4")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.TextManager.Interop.IVsTextMarkerColorSet {
    public abstract virtual int GetMarkerColors(int iMarkerType, UInt32& pclrFore, UInt32& pclrBack);
}
[GuidAttribute("F1671B6B-1090-4DFF-BBFD-133EB428BB6C")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.TextManager.Interop.IVsTextMarkerContextProvider {
    public abstract virtual int UpdateContextForMarker(UInt32 dwReserved, object pUC);
    public abstract virtual int RemoveLastContext(UInt32 dwReserved, object pUC);
}
[ComConversionLossAttribute]
[GuidAttribute("1E220776-3C20-46E9-A691-DE549C295E26")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.TextManager.Interop.IVsTextMarkerGlyphDropHandler {
    public abstract virtual int DrawCandidateOutlineGlyph(UInt32 dwReserved, IntPtr hdc, RECT[] pRect, UInt32 clrref);
    public abstract virtual int QueryDropLocation(UInt32 dwReserved, IVsTextView pDestView, IVsTextLines pDestBuffer, int iLine, int iIndex, UInt32& pdwDropResult);
    public abstract virtual int DropAtLocation(UInt32 dwReserved, IVsTextView pDestView, IVsTextLines pDestBuffer, int iLine, int iIndex, UInt32& pdwDropResult);
}
[ComConversionLossAttribute]
[InterfaceTypeAttribute("1")]
[GuidAttribute("8C4A2B6E-6377-4C71-9940-FBA1BE6EDD6F")]
public interface Microsoft.VisualStudio.TextManager.Interop.IVsTextMarkerType {
    public abstract virtual int GetVisualStyle(UInt32& pdwVisualFlags);
    public abstract virtual int GetDefaultColors(COLORINDEX[] piForeground, COLORINDEX[] piBackground);
    public abstract virtual int GetDefaultLineStyle(COLORINDEX[] piLineColor, LINESTYLE[] piLineIndex);
    public abstract virtual int DrawGlyph(IntPtr hdc, RECT[] pRect);
    public abstract virtual int GetBehaviorFlags(UInt32& pdwFlags);
    public abstract virtual int GetPriorityIndex(Int32& piPriorityIndex);
    public abstract virtual int GetDisplayName(String& pbstrName);
    public abstract virtual int DrawGlyphEx(UInt32 dwFlags, IntPtr hdc, RECT[] pRect, int iLineHeight);
}
[GuidAttribute("7EF86CFD-D561-4BA5-9F38-C1BFF588E3AC")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.TextManager.Interop.IVsTextMarkerTypeProvider {
    public abstract virtual int GetTextMarkerType(Guid& pguidMarker, IVsPackageDefinedTextMarkerType& ppMarkerType);
}
[GuidAttribute("CF9928D9-65AE-4319-A446-94ED5C45ECDE")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.TextManager.Interop.IVsTextReplaceEvents {
    public abstract virtual int OnReplace(ChangeInput[] pCI);
}
[ComConversionLossAttribute]
[InterfaceTypeAttribute("1")]
[GuidAttribute("EBD73923-C190-45C1-91C5-0BC61A8AAB14")]
public interface Microsoft.VisualStudio.TextManager.Interop.IVsTextScanner {
    public abstract virtual int OpenScan();
    public abstract virtual int Read(String& ppszText, Int32& piLength);
    public abstract virtual int CloseScan();
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("CB49CF53-CCE9-4493-AD7A-3595F4C1CAF3")]
public interface Microsoft.VisualStudio.TextManager.Interop.IVsTextSelectionAction {
    public abstract virtual int GetOrigin(SELECTIONSTATE[] pSelState);
    public abstract virtual int GetDestination(SELECTIONSTATE[] pSelState);
    public abstract virtual int SetOrigin(SELECTIONSTATE[] pSelState);
    public abstract virtual int SetDestination(SELECTIONSTATE[] pSelState);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("E6BBDFD0-C06A-11D2-936C-D714766E8B50")]
public interface Microsoft.VisualStudio.TextManager.Interop.IVsTextSpanSet {
    public abstract virtual int AttachTextImage(object pText);
    public abstract virtual int Detach();
    public abstract virtual int SuspendTracking();
    public abstract virtual int ResumeTracking();
    public abstract virtual int Add(int cEl, TextSpan[] pSpan);
    public abstract virtual int GetCount(Int32& pcel);
    public abstract virtual int GetAt(int iEl, TextSpan[] pSpan);
    public abstract virtual int RemoveAll();
    public abstract virtual int Sort(UInt32 SortOptions);
    public abstract virtual int AddFromEnum(IVsEnumTextSpans pEnum);
}
[GuidAttribute("1ABAC269-8FB0-438E-8217-230AC6EB5766")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.TextManager.Interop.IVsTextStorage {
    public abstract virtual int Storage_Attach(object pBuffer);
    public abstract virtual void Storage_Detach();
    public abstract virtual int Storage_GetLength();
    public abstract virtual int Storage_GetLineCount();
    public abstract virtual int Storage_GetLengthOfLine(int iLine, Int32& piLength);
    public abstract virtual int Storage_GetPositionOfLineIndex(int iLine, int iIndex, Int32& piPosition);
    public abstract virtual int Storage_GetLineIndexOfPosition(int iPosition, Int32& piLine, Int32& piIndex);
    public abstract virtual int Storage_Replace(ChangeInput[] pCI, TextSpan[] ptsOut);
    public abstract virtual int Storage_CopyText(int iStartLine, int iStartIndex, int iBufMax, IntPtr pszDest, Int32& pcCharsCopied);
    public abstract virtual int Storage_GetCharsInSpan(TextSpan[] pSpanToMeasure, Int32& piChars);
    public abstract virtual int Storage_GetLineDataEx(UInt32 dwFlags, int iLine, int iStartIndex, int iEndIndex, LINEDATAEX[] pLineData);
    public abstract virtual int Storage_ReleaseLineDataEx(LINEDATAEX[] pLineData);
    public abstract virtual int Storage_GetLanguageServiceID(Guid& pguidLangService);
    public abstract virtual int Storage_SetLanguageServiceID(Guid& guidLangService);
    public abstract virtual int Storage_RefreshColorization(int iTopLine, int iBotLine, Int32& piLastAffectedLine);
    public abstract virtual int Storage_Find(string pszText, int iStartLine, int iStartIndex, int iEndLine, int iEndIndex, int iFlags, Int32& piLine, Int32& piCol);
}
[GuidAttribute("92FE8718-09DF-4615-9BC8-492E67EEB1AB")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.TextManager.Interop.IVsTextStorage2 {
    public abstract virtual int GetEolTypeEx(LINEDATAEX[] pld, UInt32& piEolType);
    public abstract virtual int GetEolLengthEx(LINEDATAEX[] pld, UInt32& piEolType);
    public abstract virtual int GetEolTextEx(LINEDATAEX[] pld, String& pbstrEolText);
    public abstract virtual int GetVersionCookie(UInt32& pdwVersionCookie);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("1F027F1F-9696-4816-B345-3CD7D3122A48")]
public interface Microsoft.VisualStudio.TextManager.Interop.IVsTextStorageColorState {
    public abstract virtual int GetColorStateAtStartOfLine(int iLine, Int32& piState);
}
[GuidAttribute("D3AF020B-A862-4D22-B373-20F1B30B7D9E")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.TextManager.Interop.IVsTextStream {
    public abstract virtual int LockBuffer();
    public abstract virtual int UnlockBuffer();
    public abstract virtual int InitializeContent(string pszText, int iLength);
    public abstract virtual int GetStateFlags(UInt32& pdwReadOnlyFlags);
    public abstract virtual int SetStateFlags(UInt32 dwReadOnlyFlags);
    public abstract virtual int GetPositionOfLine(int iLine, Int32& piPosition);
    public abstract virtual int GetPositionOfLineIndex(int iLine, int iIndex, Int32& piPosition);
    public abstract virtual int GetLineIndexOfPosition(int iPosition, Int32& piLine, Int32& piColumn);
    public abstract virtual int GetLengthOfLine(int iLine, Int32& piLength);
    public abstract virtual int GetLineCount(Int32& piLineCount);
    public abstract virtual int GetSize(Int32& piLength);
    public abstract virtual int GetLanguageServiceID(Guid& pguidLangService);
    public abstract virtual int SetLanguageServiceID(Guid& guidLangService);
    public abstract virtual int GetUndoManager(IOleUndoManager& ppUndoManager);
    public abstract virtual int Reserved1();
    public abstract virtual int Reserved2();
    public abstract virtual int Reserved3();
    public abstract virtual int Reserved4();
    public abstract virtual int Reload(int fUndoable);
    public abstract virtual int LockBufferEx(UInt32 dwFlags);
    public abstract virtual int UnlockBufferEx(UInt32 dwFlags);
    public abstract virtual int GetLastLineIndex(Int32& piLine, Int32& piIndex);
    public abstract virtual int Reserved5();
    public abstract virtual int Reserved6();
    public abstract virtual int Reserved7();
    public abstract virtual int Reserved8();
    public abstract virtual int Reserved9();
    public abstract virtual int Reserved10();
    public abstract virtual int GetStream(int iPos, int iLength, IntPtr pszDest);
    public abstract virtual int ReplaceStream(int iPos, int iOldLen, IntPtr pszText, int iNewLen);
    public abstract virtual int CanReplaceStream(int iPos, int iOldLen, int iNewLen);
    public abstract virtual int CreateStreamMarker(int iMarkerType, int iPos, int iLength, IVsTextMarkerClient pClient, IVsTextStreamMarker[] ppMarker);
    public abstract virtual int EnumMarkers(int iPos, int iLen, int iMarkerType, UInt32 dwFlags, IVsEnumStreamMarkers& ppEnum);
    public abstract virtual int FindMarkerByPosition(int iMarkerType, int iStartingPos, UInt32 dwFlags, IVsTextStreamMarker& ppMarker);
    public abstract virtual int AdviseTextStreamEvents(IVsTextStreamEvents pSink, UInt32& pdwCookie);
    public abstract virtual int UnadviseTextStreamEvents(UInt32 dwCookie);
    public abstract virtual int ReloadStream(int iPos, int iOldLen, IntPtr pszText, int iNewLen);
    public abstract virtual int CreateEditPoint(int iPosition, Object& ppEditPoint);
    public abstract virtual int ReplaceStreamEx(UInt32 dwFlags, int iPos, int iOldLen, IntPtr pszText, int iNewLen, Int32& piActualLen);
    public abstract virtual int CreateTextPoint(int iPosition, Object& ppTextPoint);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("96FC7D44-BCDD-4F00-AE4D-07E26B2C0E52")]
public interface Microsoft.VisualStudio.TextManager.Interop.IVsTextStreamEvents {
    public abstract virtual void OnChangeStreamText(int iPos, int iOldLen, int iNewLen, int fLast);
    public abstract virtual void OnChangeStreamAttributes(int iPos, int iLength);
}
[GuidAttribute("10D17872-91BA-4D65-80CC-E5FC3222AC82")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.TextManager.Interop.IVsTextStreamMarker {
    public abstract virtual int GetType(Int32& piMarkerType);
    public abstract virtual int SetType(int iMarkerType);
    public abstract virtual int GetVisualStyle(UInt32& pdwFlags);
    public abstract virtual int SetVisualStyle(UInt32 dwFlags);
    public abstract virtual int Invalidate();
    public abstract virtual int DrawGlyph(IntPtr hdc, RECT[] pRect);
    public abstract virtual int GetTipText(String[] pbstrText);
    public abstract virtual int UnadviseClient();
    public abstract virtual int GetMarkerCommandInfo(int iItem, String[] pbstrText, UInt32[] pcmdf);
    public abstract virtual int ExecMarkerCommand(int iItem);
    public abstract virtual int GetBehavior(UInt32& pdwBehavior);
    public abstract virtual int SetBehavior(UInt32 dwBehavior);
    public abstract virtual int GetPriorityIndex(Int32& piPriorityIndex);
    public abstract virtual int GetStreamBuffer(IVsTextStream& ppBuffer);
    public abstract virtual int ResetSpan(int iNewPos, int iNewLen);
    public abstract virtual int GetCurrentSpan(Int32& piPos, Int32& piLen);
}
[GuidAttribute("90609097-17C8-40E8-8128-67194C7384B1")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.TextManager.Interop.IVsTextTipData {
    public abstract virtual int GetTipText(String[] pbstrText, Int32& pfGetFontInfo);
    public abstract virtual int GetTipFontInfo(int cChars, UInt32[] pdwFontAttr);
    public abstract virtual int GetContextStream(Int32& piPos, Int32& piLength);
    public abstract virtual void OnDismiss();
    public abstract virtual void UpdateView();
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("A6ACCB2F-1E0D-458B-A878-D40EB89C1DF4")]
public interface Microsoft.VisualStudio.TextManager.Interop.IVsTextTipWindow {
    public abstract virtual int GetContextStream(Int32& piPos, Int32& piLength);
    public abstract virtual int GetSizePreferences(RECT[] prcCtxBounds, TIPSIZEDATA[] pSizeData);
    public abstract virtual int Paint(IntPtr hdc, RECT[] prc);
    public abstract virtual void Dismiss();
    public abstract virtual int WndProc(IntPtr hwnd, UInt32 iMsg, IntPtr wParam, IntPtr lParam);
    public abstract virtual int SetTextTipData(IVsTextTipData pMethodData);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("085F0AB4-5518-4898-8D4A-48E4D3E177DD")]
public interface Microsoft.VisualStudio.TextManager.Interop.IVsTextTipWindow2 {
    public abstract virtual int GetTextTipData(IVsTextTipData& pMethodData);
}
[GuidAttribute("D6BF0A8A-3798-49C5-8806-648A635EACC8")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.TextManager.Interop.IVsTextTrackingPoint {
    public abstract virtual int GetTextLayer(IVsTextLayer& ppLayer);
    public abstract virtual int GetCurrentLineIndex(Int32& piLine, Int32& piIndex);
    public abstract virtual int GetBehavior(UInt32& pdwBehavior);
    public abstract virtual int SetBehavior(UInt32 dwBehavior);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("BB23A14B-7C61-469A-9890-A95648CED5E6")]
[ComConversionLossAttribute]
public interface Microsoft.VisualStudio.TextManager.Interop.IVsTextView {
    public abstract virtual int Initialize(IVsTextLines pBuffer, IntPtr hwndParent, UInt32 InitFlags, INITVIEW[] pInitView);
    public abstract virtual int CloseView();
    public abstract virtual int GetCaretPos(Int32& piLine, Int32& piColumn);
    public abstract virtual int SetCaretPos(int iLine, int iColumn);
    public abstract virtual int GetSelectionSpan(TextSpan[] pSpan);
    public abstract virtual int GetSelection(Int32& piAnchorLine, Int32& piAnchorCol, Int32& piEndLine, Int32& piEndCol);
    public abstract virtual int SetSelection(int iAnchorLine, int iAnchorCol, int iEndLine, int iEndCol);
    public abstract virtual TextSelMode GetSelectionMode();
    public abstract virtual int SetSelectionMode(TextSelMode iSelMode);
    public abstract virtual int ClearSelection(int fMoveToAnchor);
    public abstract virtual int CenterLines(int iTopLine, int iCount);
    public abstract virtual int GetSelectedText(String& pbstrText);
    public abstract virtual int GetSelectionDataObject(IDataObject& ppIDataObject);
    public abstract virtual int GetTextStream(int iTopLine, int iTopCol, int iBottomLine, int iBottomCol, String& pbstrText);
    public abstract virtual int GetBuffer(IVsTextLines& ppBuffer);
    public abstract virtual int SetBuffer(IVsTextLines pBuffer);
    public abstract virtual IntPtr GetWindowHandle();
    public abstract virtual int GetScrollInfo(int iBar, Int32& piMinUnit, Int32& piMaxUnit, Int32& piVisibleUnits, Int32& piFirstVisibleUnit);
    public abstract virtual int SetScrollPosition(int iBar, int iFirstVisibleUnit);
    public abstract virtual int AddCommandFilter(IOleCommandTarget pNewCmdTarg, IOleCommandTarget& ppNextCmdTarg);
    public abstract virtual int RemoveCommandFilter(IOleCommandTarget pCmdTarg);
    public abstract virtual int UpdateCompletionStatus(IVsCompletionSet pCompSet, UInt32 dwFlags);
    public abstract virtual int UpdateTipWindow(IVsTipWindow pTipWindow, UInt32 dwFlags);
    public abstract virtual int GetWordExtent(int iLine, int iCol, UInt32 dwFlags, TextSpan[] pSpan);
    public abstract virtual int RestrictViewRange(int iMinLine, int iMaxLine, IVsViewRangeClient pClient);
    public abstract virtual int ReplaceTextOnLine(int iLine, int iStartCol, int iCharsToReplace, string pszNewText, int iNewLen);
    public abstract virtual int GetLineAndColumn(int iPos, Int32& piLine, Int32& piIndex);
    public abstract virtual int GetNearestPosition(int iLine, int iCol, Int32& piPos, Int32& piVirtualSpaces);
    public abstract virtual int UpdateViewFrameCaption();
    public abstract virtual int CenterColumns(int iLine, int iLeftCol, int iColCount);
    public abstract virtual int EnsureSpanVisible(TextSpan span);
    public abstract virtual int PositionCaretForEditing(int iLine, int cIndentLevels);
    public abstract virtual int GetPointOfLineColumn(int iLine, int iCol, POINT[] ppt);
    public abstract virtual int GetLineHeight(Int32& piLineHeight);
    public abstract virtual int HighlightMatchingBrace(UInt32 dwFlags, UInt32 cSpans, TextSpan[] rgBaseSpans);
    public abstract virtual int SendExplicitFocus();
    public abstract virtual int SetTopLine(int iBaseLine);
}
[GuidAttribute("DC5CECDF-26BF-4014-BF54-A6D3636A83EF")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.TextManager.Interop.IVsTextView3 {
    public abstract virtual int AddProjectionAwareCommandFilter(IOleCommandTarget pNewCmdTarg, IOleCommandTarget& ppNextCmdTarg);
    public abstract virtual int DoesViewSupportRole(string pszRole, Int32& pbContainsRole);
    public abstract virtual int GetCanCaretAndSelectionMapToSurfaceBuffer(Int32& pbCanMap);
}
[GuidAttribute("E1965DA9-E791-49E2-9F9D-ED766D885967")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.TextManager.Interop.IVsTextViewEvents {
    public abstract virtual void OnSetFocus(IVsTextView pView);
    public abstract virtual void OnKillFocus(IVsTextView pView);
    public abstract virtual void OnSetBuffer(IVsTextView pView, IVsTextLines pBuffer);
    public abstract virtual void OnChangeScrollInfo(IVsTextView pView, int iBar, int iMinUnit, int iMaxUnits, int iVisibleUnits, int iFirstVisibleUnit);
    public abstract virtual void OnChangeCaretLine(IVsTextView pView, int iNewLine, int iOldLine);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("EAF1EA5B-EB6D-4852-9D87-666E09BC4BEE")]
public interface Microsoft.VisualStudio.TextManager.Interop.IVsTextViewEx {
    public abstract virtual int SetHoverWaitTimer();
    public abstract virtual int PersistOutliningState();
    public abstract virtual int UpdateSmartTagWindow(IVsSmartTagTipWindow pSmartTagWnd, UInt32 dwFlags);
    public abstract virtual int GetSmartTagRect(RECT[] rcSmartTag);
    public abstract virtual int InvokeInsertionUI(IVsCompletionSet pCompSet, string bstrPrefixText, string bstrCompletionChar, IVsInsertionUI& pInsertionUI);
    public abstract virtual int GetWindowFrame(Object& ppFrame);
    public abstract virtual int IsCompletorWindowActive();
    public abstract virtual int GetClusterRange(int iLine, int iDisplayCol, Int32& picCharacter, Int32& piStartCol, Int32& piEndCol);
    public abstract virtual int SetIgnoreMarkerTypes(int iCountMarkerTypes, UInt32[] rgIgnoreMarkerTypes);
    public abstract virtual int AppendViewOnlyMarkerTypes(UInt32 iCountViewMarkerOnly, UInt32[] rgViewMarkerOnly);
    public abstract virtual int RemoveViewOnlyMarkerTypes(UInt32 iCountViewMarkerOnly, UInt32[] rgViewMarkerOnly);
    public abstract virtual int SetBackgroundColorIndex(int iBackgroundIndex);
    public abstract virtual int IsExpansionUIActive();
    public abstract virtual int IsReadOnly();
}
[GuidAttribute("6B6F0B32-B88B-40F8-A8FE-97438C5BDBEF")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.TextManager.Interop.IVsTextViewFilter {
    public abstract virtual int GetWordExtent(int iLine, int iIndex, UInt32 dwFlags, TextSpan[] pSpan);
    public abstract virtual int GetDataTipText(TextSpan[] pSpan, String& pbstrText);
    public abstract virtual int GetPairExtents(int iLine, int iIndex, TextSpan[] pSpan);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("0816A38B-2B41-4D2A-B1FF-23C1E28D8A18")]
public interface Microsoft.VisualStudio.TextManager.Interop.IVsTextViewIntellisenseHost {
    public abstract virtual int QueryStatus(Guid& pguidCmdGroup, UInt32 cCmds, OLECMD[] prgCmds, OLECMDTEXT[] pCmdText);
    public abstract virtual int Exec(Guid& pguidCmdGroup, UInt32 nCmdID, UInt32 nCmdexecopt, Object& pvaIn, Object& pvaOut);
    public abstract virtual int GetHostFlags(UInt32& pdwFlags);
    public abstract virtual int GetContextBuffer(IVsTextLines& ppCtxBuffer);
    public abstract virtual int GetContextFocalPoint(TextSpan[] pSpan, Int32& piLen);
    public abstract virtual int SetContextCaretPos(int iLine, int iIndex);
    public abstract virtual int GetContextCaretPos(Int32& piLine, Int32& piIndex);
    public abstract virtual int SetContextSelection(int iStartLine, int iStartIndex, int iEndLine, int iEndIndex);
    public abstract virtual int GetContextSelection(TextSpan[] pSelectionSpan);
    public abstract virtual int GetSubjectText(String& pbstrSubjectText);
    public abstract virtual int SetSubjectCaretPos(int iIndex);
    public abstract virtual int GetSubjectCaretPos(Int32& piIndex);
    public abstract virtual int SetSubjectSelection(int iAnchorIndex, int iEndIndex);
    public abstract virtual int GetSubjectSelection(Int32& piAnchorIndex, Int32& piEndIndex);
    public abstract virtual int ReplaceSubjectTextSpan(int iStartIndex, int iEndIndex, string pszText);
    public abstract virtual int UpdateCompletionStatus(IVsCompletionSet pCompSet, UInt32 dwFlags);
    public abstract virtual int UpdateTipWindow(IVsTipWindow pTipWindow, UInt32 dwFlags);
    public abstract virtual int HighlightMatchingBrace(UInt32 dwFlags, UInt32 cSpans, TextSpan[] rgBaseSpans);
    public abstract virtual int BeforeCompletorCommit();
    public abstract virtual int AfterCompletorCommit();
    public abstract virtual int GetServiceProvider(IServiceProvider& ppSP);
    public abstract virtual int GetHostWindow(IntPtr& hwnd);
    public abstract virtual int GetContextLocation(int iPos, int iLen, int fUseCaretPosition, RECT[] prc, Int32& piTopX);
    public abstract virtual int UpdateSmartTagWindow(IVsSmartTagTipWindow pSmartTagWnd, UInt32 dwFlags);
    public abstract virtual int GetSmartTagRect(RECT[] rcSmartTag);
    public abstract virtual int SetSubjectFromPrimaryBuffer(TextSpan[] pSpanInPrimary);
}
[ComVisibleAttribute("False")]
[GuidAttribute("0816A38B-2B41-4D2A-B1FF-23C1E28D8A18")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.TextManager.Interop.IVsTextViewIntellisenseHost_Corrected {
    public abstract virtual int QueryStatus(Guid& pguidCmdGroup, UInt32 cCmds, OLECMD[] prgCmds, IntPtr pCmdText);
    public abstract virtual int Exec(Guid& pguidCmdGroup, UInt32 nCmdID, UInt32 nCmdexecopt, IntPtr pvaIn, IntPtr pvaOut);
    public abstract virtual int GetHostFlags(UInt32& pdwFlags);
    public abstract virtual int GetContextBuffer(IVsTextLines& ppCtxBuffer);
    public abstract virtual int GetContextFocalPoint(TextSpan[] pSpan, Int32& piLen);
    public abstract virtual int SetContextCaretPos(int iLine, int iIndex);
    public abstract virtual int GetContextCaretPos(Int32& piLine, Int32& piIndex);
    public abstract virtual int SetContextSelection(int iStartLine, int iStartIndex, int iEndLine, int iEndIndex);
    public abstract virtual int GetContextSelection(TextSpan[] pSelectionSpan);
    public abstract virtual int GetSubjectText(String& pbstrSubjectText);
    public abstract virtual int SetSubjectCaretPos(int iIndex);
    public abstract virtual int GetSubjectCaretPos(Int32& piIndex);
    public abstract virtual int SetSubjectSelection(int iAnchorIndex, int iEndIndex);
    public abstract virtual int GetSubjectSelection(Int32& piAnchorIndex, Int32& piEndIndex);
    public abstract virtual int ReplaceSubjectTextSpan(int iStartIndex, int iEndIndex, string pszText);
    public abstract virtual int UpdateCompletionStatus(IVsCompletionSet pCompSet, UInt32 dwFlags);
    public abstract virtual int UpdateTipWindow(IVsTipWindow pTipWindow, UInt32 dwFlags);
    public abstract virtual int HighlightMatchingBrace(UInt32 dwFlags, UInt32 cSpans, TextSpan[] rgBaseSpans);
    public abstract virtual int BeforeCompletorCommit();
    public abstract virtual int AfterCompletorCommit();
    public abstract virtual int GetServiceProvider(IServiceProvider& ppSP);
    public abstract virtual int GetHostWindow(IntPtr& hwnd);
    public abstract virtual int GetContextLocation(int iPos, int iLen, int fUseCaretPosition, RECT[] prc, Int32& piTopX);
    public abstract virtual int UpdateSmartTagWindow(IVsSmartTagTipWindow pSmartTagWnd, UInt32 dwFlags);
    public abstract virtual int GetSmartTagRect(RECT[] rcSmartTag);
    public abstract virtual int SetSubjectFromPrimaryBuffer(TextSpan[] pSpanInPrimary);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("2E758295-344B-48D6-86AC-BD81F89CB4B8")]
public interface Microsoft.VisualStudio.TextManager.Interop.IVsTextViewIntellisenseHostProvider {
    public abstract virtual int CreateIntellisenseHost(IVsTextBufferCoordinator pBufferCoordinator, Guid& riid, IntPtr& ppunkHost);
}
[GuidAttribute("FEC3BF2A-7833-4777-AE74-5FFF86D6794E")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.TextManager.Interop.IVsThreadSafeTextView {
    public abstract virtual int ThreadSafeSetCaretPos(int iLine, int iColumn);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("64C7FFC4-B9EE-4599-B130-FF9D890ECFD4")]
[ComConversionLossAttribute]
public interface Microsoft.VisualStudio.TextManager.Interop.IVsTipWindow {
    public abstract virtual int GetContextStream(Int32& piPos, Int32& piLength);
    public abstract virtual int GetSizePreferences(RECT[] prcCtxBounds, TIPSIZEDATA[] pSizeData);
    public abstract virtual int Paint(IntPtr hdc, RECT[] prc);
    public abstract virtual void Dismiss();
    public abstract virtual int WndProc(IntPtr hwnd, UInt32 iMsg, IntPtr wParam, IntPtr lParam);
}
[GuidAttribute("F98298D9-53C4-43DB-90D6-D1A3CA4B1849")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.TextManager.Interop.IVsUndoRedoClusterWithCommitEvents {
    public abstract virtual void OnUndoRedoClusterClosingWithCommitGesture(UInt32 dwGestureFlags, TextSpan[] ptsChanged);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("31024DD7-30E5-4C91-821D-218BDEADA18B")]
public interface Microsoft.VisualStudio.TextManager.Interop.IVsUndoTrackingEvents {
    public abstract virtual void OnReturnToCleanState();
}
[GuidAttribute("A8C3D107-7EDF-4B1B-8A81-080AC91590E9")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.TextManager.Interop.IVsUndoUnit {
    public abstract virtual int fChangeData();
}
[GuidAttribute("978A8E17-4DF8-432A-9623-D530A26452BC")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.TextManager.Interop.IVsUserData {
    public abstract virtual int GetData(Guid& riidKey, Object& pvtData);
    public abstract virtual int SetData(Guid& riidKey, object vtData);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("5E120D5E-9637-47D9-861C-92FA03683C6C")]
public interface Microsoft.VisualStudio.TextManager.Interop.IVsUserDataEvents {
    public abstract virtual void OnUserDataChange(Guid& riidKey, object vtNewValue);
}
[GuidAttribute("30491A5B-A47E-4C9C-8204-18586648A277")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.TextManager.Interop.IVsViewRangeClient {
    public abstract virtual int AdjustViewRange(IVsTextView pView, TextViewAction action, int iLine, int iCount);
}
[GuidAttribute("2139DFC1-B0AD-4C17-A817-74F2BA47C714")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.TextManager.Interop.IVsWebFormDesignerSupport {
    public abstract virtual int GetCodeDomProvider(Object& ppProvider);
    public abstract virtual int AddReference(string pszReference);
}
public class Microsoft.VisualStudio.TextManager.Interop.LANGPREFERENCES : ValueType {
    public Byte[] szFileType;
    public UInt32 fShowCompletion;
    public UInt32 fShowSmartIndent;
    public UInt32 fHideAdvancedAutoListMembers;
    public UInt32 uTabSize;
    public UInt32 uIndentSize;
    public UInt32 fInsertTabs;
    [ComAliasNameAttribute("Microsoft.VisualStudio.TextManager.Interop.vsIndentStyle")]
public vsIndentStyle IndentStyle;
    public UInt32 fAutoListMembers;
    public UInt32 fAutoListParams;
    public UInt32 fVirtualSpace;
    public UInt32 fWordWrap;
    public UInt32 fTwoWayTreeview;
    public UInt32 fHotURLs;
    public UInt32 fDropdownBar;
    public UInt32 fLineNumbers;
    public Guid guidLang;
}
public class Microsoft.VisualStudio.TextManager.Interop.LANGPREFERENCES2 : ValueType {
    public Byte[] szFileType;
    public UInt32 fShowCompletion;
    public UInt32 fShowSmartIndent;
    public UInt32 fHideAdvancedAutoListMembers;
    public UInt32 uTabSize;
    public UInt32 uIndentSize;
    public UInt32 fInsertTabs;
    [ComAliasNameAttribute("Microsoft.VisualStudio.TextManager.Interop.vsIndentStyle")]
public vsIndentStyle IndentStyle;
    public UInt32 fAutoListMembers;
    public UInt32 fAutoListParams;
    public UInt32 fVirtualSpace;
    public UInt32 fWordWrap;
    public UInt32 fTwoWayTreeview;
    public UInt32 fHotURLs;
    public UInt32 fDropdownBar;
    public UInt32 fLineNumbers;
    public Guid guidLang;
    public UInt32 fWordWrapGlyphs;
    public UInt32 fCutCopyBlanks;
}
public class Microsoft.VisualStudio.TextManager.Interop.LANGPREFERENCES3 : ValueType {
    public Byte[] szFileType;
    public UInt32 fShowCompletion;
    public UInt32 fShowSmartIndent;
    public UInt32 fHideAdvancedAutoListMembers;
    public UInt32 uTabSize;
    public UInt32 uIndentSize;
    public UInt32 fInsertTabs;
    [ComAliasNameAttribute("TextManager.vsIndentStyle")]
public vsIndentStyle IndentStyle;
    public UInt32 fAutoListMembers;
    public UInt32 fAutoListParams;
    public UInt32 fVirtualSpace;
    public UInt32 fWordWrap;
    public UInt32 fTwoWayTreeview;
    public UInt32 fHotURLs;
    public UInt32 fDropdownBar;
    public UInt32 fLineNumbers;
    public Guid guidLang;
    public UInt32 fWordWrapGlyphs;
    public UInt32 fCutCopyBlanks;
    public UInt32 fShowHorizontalScrollBar;
    public UInt32 fShowVerticalScrollBar;
    public UInt32 fShowAnnotations;
    public UInt32 fShowChanges;
    public UInt32 fShowMarks;
    public UInt32 fShowErrors;
    public UInt32 fShowCaretPosition;
    public UInt32 fUseMapMode;
    public UInt32 fShowPreview;
    public UInt32 uOverviewWidth;
    public UInt32 fBraceCompletion;
}
public enum Microsoft.VisualStudio.TextManager.Interop.LanguageContextHint : Enum {
    public int value__;
    public static LanguageContextHint LCH_DEFAULT;
    public static LanguageContextHint LCH_F1_HELP;
}
public enum Microsoft.VisualStudio.TextManager.Interop.LAYER_MODULE_CAPABILITIES : Enum {
    public int value__;
    public static LAYER_MODULE_CAPABILITIES LMC_TEXTFIND;
    public static LAYER_MODULE_CAPABILITIES LMC_TEXTPRINT;
    public static LAYER_MODULE_CAPABILITIES LMC_TEXTORIGINATE;
}
[ComConversionLossAttribute]
public class Microsoft.VisualStudio.TextManager.Interop.LINEDATA : ValueType {
    public int iLength;
    [ComAliasNameAttribute("Microsoft.VisualStudio.OLE.Interop.WCHAR")]
[ComConversionLossAttribute]
public IntPtr pszText;
    [ComAliasNameAttribute("Microsoft.VisualStudio.OLE.Interop.ULONG")]
[ComConversionLossAttribute]
public IntPtr pAttributes;
    [ComAliasNameAttribute("Microsoft.VisualStudio.TextManager.Interop.EOLTYPE")]
public EOLTYPE iEolType;
    [ComAliasNameAttribute("Microsoft.VisualStudio.OLE.Interop.BOOL")]
public int fMarkers;
}
[ComConversionLossAttribute]
public class Microsoft.VisualStudio.TextManager.Interop.LINEDATAEX : ValueType {
    public int iLength;
    [ComAliasNameAttribute("Microsoft.VisualStudio.OLE.Interop.WCHAR")]
[ComConversionLossAttribute]
public IntPtr pszText;
    [ComAliasNameAttribute("Microsoft.VisualStudio.TextManager.Interop.EOLTYPE")]
public EOLTYPE iEolType;
    [ComAliasNameAttribute("Microsoft.VisualStudio.OLE.Interop.ULONG")]
[ComConversionLossAttribute]
public IntPtr pAttributes;
    [ComAliasNameAttribute("Microsoft.VisualStudio.OLE.Interop.USHORT")]
public ushort dwFlags;
    [ComAliasNameAttribute("Microsoft.VisualStudio.OLE.Interop.USHORT")]
public ushort dwReserved;
    [ComConversionLossAttribute]
[ComAliasNameAttribute("Microsoft.VisualStudio.TextManager.Interop.AtomicText")]
public IntPtr pAtomicTextChain;
}
[FlagsAttribute]
public enum Microsoft.VisualStudio.TextManager.Interop.LINEDATAEXFLAGS : Enum {
    public int value__;
    public static LINEDATAEXFLAGS ldfDefault;
    public static LINEDATAEXFLAGS ldfMarkers;
    public static LINEDATAEXFLAGS ldfNoReadLock;
}
public enum Microsoft.VisualStudio.TextManager.Interop.LINESTYLE : Enum {
    public int value__;
    public static LINESTYLE LI_NONE;
    public static LINESTYLE LI_SOLID;
    public static LINESTYLE LI_SQUIGGLY;
    public static LINESTYLE LI_HATCH;
    public static LINESTYLE LI_DOTTED;
}
public enum Microsoft.VisualStudio.TextManager.Interop.LINESTYLE2 : Enum {
    public int value__;
    public static LINESTYLE2 LI_SMARTTAGFACT;
    public static LINESTYLE2 LI_SMARTTAGFACTSIDE;
    public static LINESTYLE2 LI_SMARTTAGEPHEM;
    public static LINESTYLE2 LI_SMARTTAGEPHEMSIDE;
}
[FlagsAttribute]
public enum Microsoft.VisualStudio.TextManager.Interop.LinkedTransactionFlags : Enum {
    public int value__;
    public static LinkedTransactionFlags mdtDefault;
    public static LinkedTransactionFlags mdtStrict;
}
[FlagsAttribute]
public enum Microsoft.VisualStudio.TextManager.Interop.LinkedTransactionFlags2 : Enum {
    public int value__;
    public static LinkedTransactionFlags2 mdtGlobal;
}
public enum Microsoft.VisualStudio.TextManager.Interop.LinkedUndoErrors : Enum {
    public int value__;
    public static LinkedUndoErrors LINKEDUNDO_E_INTERVENING_ACTION;
}
[FlagsAttribute]
public enum Microsoft.VisualStudio.TextManager.Interop.LTE_TEXTDATAFLAGS : Enum {
    public int value__;
    public static LTE_TEXTDATAFLAGS LTE_NORMAL;
    public static LTE_TEXTDATAFLAGS LTE_BOX;
    public static LTE_TEXTDATAFLAGS LTE_LINE;
}
[FlagsAttribute]
public enum Microsoft.VisualStudio.TextManager.Interop.MapLocalSpanFlags : Enum {
    public int value__;
    public static MapLocalSpanFlags MLS_VISIBLE_ONLY;
    public static MapLocalSpanFlags MLS_INCLUDE_USER_EXPANDABLE;
    public static MapLocalSpanFlags MLS_NEVER_COMBINE_SPANS;
    public static MapLocalSpanFlags mlsVisibleOnly;
    public static MapLocalSpanFlags mlsIncludeUserExpandable;
    public static MapLocalSpanFlags mlsNeverCombineSpans;
}
[FlagsAttribute]
public enum Microsoft.VisualStudio.TextManager.Interop.MARKERBEHAVIORFLAGS : Enum {
    public int value__;
    public static MARKERBEHAVIORFLAGS MB_DEFAULT;
    public static MARKERBEHAVIORFLAGS MB_LINESPAN;
    public static MARKERBEHAVIORFLAGS MB_LEFTEDGE_LEFTTRACK;
    public static MARKERBEHAVIORFLAGS MB_RIGHTEDGE_RIGHTTRACK;
    public static MARKERBEHAVIORFLAGS MB_MULTILINESPAN;
    public static MARKERBEHAVIORFLAGS MB_TRACK_EDIT_ON_RELOAD;
}
[FlagsAttribute]
public enum Microsoft.VisualStudio.TextManager.Interop.MARKERBEHAVIORFLAGS2 : Enum {
    public int value__;
    public static MARKERBEHAVIORFLAGS2 MB_DONT_DELETE_IF_ZEROLEN;
    public static MARKERBEHAVIORFLAGS2 MB_INHERIT_FOREGROUND;
    public static MARKERBEHAVIORFLAGS2 MB_INHERIT_BACKGROUND;
    public static MARKERBEHAVIORFLAGS2 MB_VIEW_SPECIFIC;
}
public enum Microsoft.VisualStudio.TextManager.Interop.MarkerCommandValues : Enum {
    public int value__;
    public static MarkerCommandValues mcvFirstContextMenuCommand;
    public static MarkerCommandValues mcvLastContextMenuCommand;
    public static MarkerCommandValues mcvGlyphSingleClickCommand;
    public static MarkerCommandValues mcvBodyDoubleClickCommand;
    public static MarkerCommandValues mcvGlyphDoubleClickCommand;
}
public enum Microsoft.VisualStudio.TextManager.Interop.MarkerCommandValues2 : Enum {
    public int value__;
    public static MarkerCommandValues2 mcvRightClickCommand;
}
[ComConversionLossAttribute]
public class Microsoft.VisualStudio.TextManager.Interop.MARKERDATA : ValueType {
    public int iTopLine;
    public int iBottomLine;
    public int iCount;
    [ComConversionLossAttribute]
public IntPtr rgpMarker;
    [ComConversionLossAttribute]
[ComAliasNameAttribute("Microsoft.VisualStudio.OLE.Interop.BOOL")]
public IntPtr rgfLineMarked;
    public IVsTextLayer pLayer;
    [ComAliasNameAttribute("Microsoft.VisualStudio.TextManager.Interop.MARKERDATA")]
[ComConversionLossAttribute]
public IntPtr pNext;
}
public enum Microsoft.VisualStudio.TextManager.Interop.MARKERTYPE : Enum {
    public int value__;
    public static MARKERTYPE MARKER_INVISIBLE;
    public static MARKERTYPE MARKER_READONLY;
    public static MARKERTYPE MARKER_SHORTCUT;
    public static MARKERTYPE MARKER_BOOKMARK;
    public static MARKERTYPE MARKER_COMPILE_ERROR;
    public static MARKERTYPE MARKER_CODESENSE_ERROR;
    public static MARKERTYPE MARKER_OTHER_ERROR;
    public static MARKERTYPE MARKER_REGION_COLLAPSED;
    public static MARKERTYPE MARKER_REGION_EXPANDED;
    public static MARKERTYPE MARKER_LIST_LOCATION;
    public static MARKERTYPE DEF_MARKER_COUNT;
    public static MARKERTYPE MARKER_IDENTERROR;
    public static MARKERTYPE MARKER_SYNTAXERROR;
}
public enum Microsoft.VisualStudio.TextManager.Interop.MARKERTYPE2 : Enum {
    public int value__;
    public static MARKERTYPE2 MARKER_WARNING;
    public static MARKERTYPE2 MARKER_SPAN_MAPPING;
    public static MARKERTYPE2 MARKER_REGION_COLLAPSED_NOGLYPH;
    public static MARKERTYPE2 MARKER_REGION_EXPANDED_NOGLYPH;
    public static MARKERTYPE2 MARKER_EXSTENCIL;
    public static MARKERTYPE2 MARKER_EXSTENCIL_SELECTED;
    public static MARKERTYPE2 MARKER_SMARTTAG_NONVIS;
    public static MARKERTYPE2 MARKER_SMARTTAG_VIS;
    public static MARKERTYPE2 MARKER_TRACK_NONSAVE;
    public static MARKERTYPE2 MARKER_TRACK_SAVE;
    public static MARKERTYPE2 MARKER_BOOKMARK_DISABLED;
    public static MARKERTYPE2 MARKER_TRACK_PLACEHOLDER;
    public static MARKERTYPE2 MARKER_SMARTTAG_FACTOID;
    public static MARKERTYPE2 MARKER_SMARTTAG_EPHEMERAL;
    public static MARKERTYPE2 MARKER_BRACE_MATCHING;
    public static MARKERTYPE2 MARKER_EXSTENCIL_ENDMARKER;
    public static MARKERTYPE2 MARKER_CODEDEFWIN_BACKGROUND;
    public static MARKERTYPE2 MARKER_CODEDEFWIN_SELECTION;
    public static MARKERTYPE2 MARKER_HIGHLIGHT_PATH;
    public static MARKERTYPE2 MARKER_BRACE_MATCHING_BOLD;
    public static MARKERTYPE2 MARKER_REFACTORING_BACKGROUND;
    public static MARKERTYPE2 MARKER_EXSTENCIL_DEPFIELD;
    public static MARKERTYPE2 MARKER_REFACTORING_FIELD;
    public static MARKERTYPE2 MARKER_REFACTORING_DEPFIELD;
    public static MARKERTYPE2 DEF_MARKER_COUNT_NEW;
}
public enum Microsoft.VisualStudio.TextManager.Interop.MARKERTYPE3 : Enum {
    public int value__;
    public static MARKERTYPE3 MARKER_HINTED_SUGGESTION;
    public static MARKERTYPE3 DEF_MARKER_COUNT_NEW_2;
}
public enum Microsoft.VisualStudio.TextManager.Interop.MARKERVISUAL : Enum {
    public int value__;
    public static MARKERVISUAL MV_GLYPH;
    public static MARKERVISUAL MV_COLOR_ALWAYS;
    public static MARKERVISUAL MV_COLOR_LINE_IF_NO_MARGIN;
    public static MARKERVISUAL MV_LINE;
    public static MARKERVISUAL MV_TIP_FOR_BODY;
    public static MARKERVISUAL MV_TIP_FOR_GLYPH;
    public static MARKERVISUAL MV_SEL_MARGIN_GLYPH;
    public static MARKERVISUAL MV_FORCE_INVISIBLE;
    public static MARKERVISUAL MV_BORDER;
    public static MARKERVISUAL MV_GLYPH_HOVER_CURSOR;
    public static MARKERVISUAL MV_DRAGGABLE_GLYPH;
    public static MARKERVISUAL MV_MULTILINE_GLYPH;
    public static MARKERVISUAL MV_CONTEXT_CONTRIBUTION_FOR_BODY;
    public static MARKERVISUAL MV_COLOR_SPAN_IF_ZERO_LENGTH;
}
public enum Microsoft.VisualStudio.TextManager.Interop.MARKERVISUAL2 : Enum {
    public int value__;
    public static MARKERVISUAL2 MV_SMARTTAG;
    public static MARKERVISUAL2 MV_TRACK;
    public static MARKERVISUAL2 MV_ROUNDEDBORDER;
    public static MARKERVISUAL2 MV_BOLDTEXT;
    public static MARKERVISUAL2 MV_DISALLOWBGCHANGE;
    public static MARKERVISUAL2 MV_DISALLOWFGCHANGE;
    public static MARKERVISUAL2 MV_FORCE_CLOSEST_IF_HIDDEN;
    public static MARKERVISUAL2 MV_SELECT_WHOLE_LINE;
}
public enum Microsoft.VisualStudio.TextManager.Interop.MethodTextType : Enum {
    public int value__;
    public static MethodTextType MTT_TYPEPREFIX;
    public static MethodTextType MTT_TYPEPOSTFIX;
    public static MethodTextType MTT_NAME;
    public static MethodTextType MTT_DESCRIPTION;
    public static MethodTextType MTT_OPENBRACKET;
    public static MethodTextType MTT_CLOSEBRACKET;
    public static MethodTextType MTT_DELIMITER;
}
public enum Microsoft.VisualStudio.TextManager.Interop.MOVESELECTION_ABS_TYPE : Enum {
    public int value__;
    public static MOVESELECTION_ABS_TYPE MOVESELECTION_ABS_FIRSTCOLUMN;
    public static MOVESELECTION_ABS_TYPE MOVESELECTION_ABS_FIRSTTEXTCOLUMN;
    public static MOVESELECTION_ABS_TYPE MOVESELECTION_ABS_LASTCOLUMN;
    public static MOVESELECTION_ABS_TYPE MOVESELECTION_ABS_FIRSTLINE;
    public static MOVESELECTION_ABS_TYPE MOVESELECTION_ABS_LASTLINE;
}
public enum Microsoft.VisualStudio.TextManager.Interop.MOVESELECTION_REL_TYPE : Enum {
    public int value__;
    public static MOVESELECTION_REL_TYPE MOVESELECTION_REL_CHARACTER;
    public static MOVESELECTION_REL_TYPE MOVESELECTION_REL_WORD;
    public static MOVESELECTION_REL_TYPE MOVESELECTION_REL_LINE;
    public static MOVESELECTION_REL_TYPE MOVESELECTION_REL_PAGE;
}
public class Microsoft.VisualStudio.TextManager.Interop.NewHiddenRegion : ValueType {
    public int iType;
    [ComAliasNameAttribute("Microsoft.VisualStudio.OLE.Interop.DWORD")]
public UInt32 dwBehavior;
    [ComAliasNameAttribute("Microsoft.VisualStudio.OLE.Interop.DWORD")]
public UInt32 dwState;
    [ComAliasNameAttribute("Microsoft.VisualStudio.TextManager.Interop.TextSpan")]
public TextSpan tsHiddenText;
    [ComAliasNameAttribute("Microsoft.VisualStudio.OLE.Interop.LPCWSTR")]
public string pszBanner;
    [ComAliasNameAttribute("Microsoft.VisualStudio.OLE.Interop.ULONG_PTR")]
public IntPtr dwClient;
}
[ComConversionLossAttribute]
public class Microsoft.VisualStudio.TextManager.Interop.NewHiddenRegionEx : ValueType {
    public int iType;
    [ComAliasNameAttribute("Microsoft.VisualStudio.OLE.Interop.DWORD")]
public UInt32 dwBehavior;
    [ComAliasNameAttribute("Microsoft.VisualStudio.OLE.Interop.DWORD")]
public UInt32 dwState;
    [ComAliasNameAttribute("Microsoft.VisualStudio.TextManager.Interop.TextSpan")]
public TextSpan tsHiddenText;
    [ComAliasNameAttribute("Microsoft.VisualStudio.OLE.Interop.LPCWSTR")]
public string pszBanner;
    [ComAliasNameAttribute("Microsoft.VisualStudio.OLE.Interop.ULONG_PTR")]
public IntPtr dwClient;
    [ComAliasNameAttribute("Microsoft.VisualStudio.OLE.Interop.DWORD")]
public UInt32 dwLength;
    [ComConversionLossAttribute]
[ComAliasNameAttribute("Microsoft.VisualStudio.OLE.Interop.ULONG")]
public IntPtr pBannerAttr;
}
public class Microsoft.VisualStudio.TextManager.Interop.NewOutlineRegion : ValueType {
    [ComAliasNameAttribute("Microsoft.VisualStudio.OLE.Interop.DWORD")]
public UInt32 dwState;
    [ComAliasNameAttribute("Microsoft.VisualStudio.TextManager.Interop.TextSpan")]
public TextSpan tsHiddenText;
}
public class Microsoft.VisualStudio.TextManager.Interop.NewSpanMapping : ValueType {
    [ComAliasNameAttribute("Microsoft.VisualStudio.TextManager.Interop.TextSpanPair")]
public TextSpanPair tspSpans;
    public object varUserData;
}
public class Microsoft.VisualStudio.TextManager.Interop.NewSyntheticRegion : ValueType {
    public int iMarkerType;
    [ComAliasNameAttribute("Microsoft.VisualStudio.OLE.Interop.DWORD")]
public UInt32 dwBehavior;
    [ComAliasNameAttribute("Microsoft.VisualStudio.OLE.Interop.LPCWSTR")]
public string pszText;
    public int iAnchorLine;
    [ComAliasNameAttribute("Microsoft.VisualStudio.TextManager.Interop.CharIndex")]
public int iAnchorIndex;
    [ComAliasNameAttribute("Microsoft.VisualStudio.OLE.Interop.DWORD")]
public UInt32 dwClient;
    public int iSerialValue;
}
public enum Microsoft.VisualStudio.TextManager.Interop.PAINTINGRESTRICTIONS : Enum {
    public int value__;
    public static PAINTINGRESTRICTIONS PR_NONE;
    public static PAINTINGRESTRICTIONS PR_NO_MARGIN;
}
public enum Microsoft.VisualStudio.TextManager.Interop.PANEEVENTS : Enum {
    public int value__;
    public static PANEEVENTS PE_GOTFOCUS;
    public static PANEEVENTS PE_CLOSED;
    public static PANEEVENTS PE_FLAGSCHANGED;
    public static PANEEVENTS PE_DETACHED;
    public static PANEEVENTS PE_FOCUS_TO_EDIT_PANE;
}
[FlagsAttribute]
public enum Microsoft.VisualStudio.TextManager.Interop.PANEFLAGS : Enum {
    public int value__;
    public static PANEFLAGS PF_SUNKEN;
    public static PANEFLAGS PF_RAISED;
    public static PANEFLAGS PF_ETCHED;
    public static PANEFLAGS PF_BUMP;
    public static PANEFLAGS PF_SHALLOW;
    public static PANEFLAGS PF_BORDERMASK;
    public static PANEFLAGS PF_BORDER;
    public static PANEFLAGS PF_ELASTICX;
    public static PANEFLAGS PF_ELASTICY;
    public static PANEFLAGS PF_NOFOCUS;
}
public enum Microsoft.VisualStudio.TextManager.Interop.PANETYPE : Enum {
    public int value__;
    public static PANETYPE GP_FOCUS;
    public static PANETYPE GP_NEXT;
    public static PANETYPE GP_PREV;
}
public enum Microsoft.VisualStudio.TextManager.Interop.ParameterTextType : Enum {
    public int value__;
    public static ParameterTextType PTT_DECLARATION;
    public static ParameterTextType PTT_NAME;
    public static ParameterTextType PTT_DESCRIPTION;
}
public enum Microsoft.VisualStudio.TextManager.Interop.RE_ERRORS : Enum {
    public int value__;
    public static RE_ERRORS RE_E_INTERNALERROR;
    public static RE_ERRORS RE_E_SYNTAXERROR;
    public static RE_ERRORS RE_E_STACKOVERFLOW;
    public static RE_ERRORS RE_E_MISSINGARG;
    public static RE_ERRORS RE_E_POWERARGOUTOFRANGE;
    public static RE_ERRORS RE_E_ESCAPEMISSINGARG;
    public static RE_ERRORS RE_E_SPECIALUNKNOWN;
    public static RE_ERRORS RE_E_TAGOUTOFRANGE;
    public static RE_ERRORS RE_E_SETMISSINGCLOSE;
    public static RE_ERRORS RE_E_TAGMISSINGCLOSE;
    public static RE_ERRORS RE_E_TOOMANYTAGS;
    public static RE_ERRORS RE_E_EMPTYSET;
    public static RE_ERRORS RE_E_GROUPMISSINGCLOSE;
    public static RE_ERRORS RE_E_REPLACETEXT;
}
public enum Microsoft.VisualStudio.TextManager.Interop.READONLYSTATUS : Enum {
    public int value__;
    public static READONLYSTATUS ROSTATUS_NotReadOnly;
    public static READONLYSTATUS ROSTATUS_ReadOnly;
    public static READONLYSTATUS ROSTATUS_Unknown;
}
[FlagsAttribute]
public enum Microsoft.VisualStudio.TextManager.Interop.RelativeSelectionStateFlags : Enum {
    public int value__;
    public static RelativeSelectionStateFlags RSS_DEFAULT;
    public static RelativeSelectionStateFlags RSS_TOP_LAYER;
    public static RelativeSelectionStateFlags RSS_BUFFER;
    public static RelativeSelectionStateFlags RSS_RELATIVE_LAYER;
    public static RelativeSelectionStateFlags RSS_TRACKSEL;
    public static RelativeSelectionStateFlags RSS_SET_WITHOUT_SCROLLING;
    public static RelativeSelectionStateFlags RSS_SET_TO_NEAREST_LOCAL;
    public static RelativeSelectionStateFlags rssDefault;
    public static RelativeSelectionStateFlags rssTopLayer;
    public static RelativeSelectionStateFlags rssBuffer;
    public static RelativeSelectionStateFlags rssRelativeLayer;
    public static RelativeSelectionStateFlags rssTrackSel;
}
[FlagsAttribute]
public enum Microsoft.VisualStudio.TextManager.Interop.REPLACE_TEXT_FLAGS : Enum {
    public int value__;
    public static REPLACE_TEXT_FLAGS rtfDefault;
    public static REPLACE_TEXT_FLAGS rtfKeepMarkers;
    public static REPLACE_TEXT_FLAGS rtfDoNotNormalizeNewlines;
    public static REPLACE_TEXT_FLAGS rtfNormalizeTabsAndSpaces;
    public static REPLACE_TEXT_FLAGS rtfSyntacticReformat;
    public static REPLACE_TEXT_FLAGS rtfClientSuppressFormatting;
    public static REPLACE_TEXT_FLAGS rtfInterimText;
}
[FlagsAttribute]
public enum Microsoft.VisualStudio.TextManager.Interop.RESOLVENAMEFLAGS : Enum {
    public int value__;
    public static RESOLVENAMEFLAGS RNF_BREAKPOINT;
}
public class Microsoft.VisualStudio.TextManager.Interop.SELECTIONSTATE : ValueType {
    [ComAliasNameAttribute("Microsoft.VisualStudio.TextManager.Interop.ViewCol")]
public int iAnchorCol;
    public int iAnchorLine;
    [ComAliasNameAttribute("Microsoft.VisualStudio.TextManager.Interop.ViewCol")]
public int iActiveCol;
    public int iActiveLine;
    [ComAliasNameAttribute("Microsoft.VisualStudio.OLE.Interop.DWORD")]
public UInt32 dwFlags;
    [ComAliasNameAttribute("Microsoft.VisualStudio.OLE.Interop.DWORD")]
public UInt32 dwReserved;
}
[FlagsAttribute]
public enum Microsoft.VisualStudio.TextManager.Interop.SELECTIONSTATEFLAGS : Enum {
    public int value__;
    public static SELECTIONSTATEFLAGS ssfDefault;
    public static SELECTIONSTATEFLAGS ssfColumn;
}
public class Microsoft.VisualStudio.TextManager.Interop.SMARTTAGSIZEDATA : ValueType {
    [ComAliasNameAttribute("Microsoft.VisualStudio.OLE.Interop.SIZE")]
public SIZE size;
}
[FlagsAttribute]
public enum Microsoft.VisualStudio.TextManager.Interop.SPLITFLAGS : Enum {
    public int value__;
    public static SPLITFLAGS SF_HORIZONTAL;
    public static SPLITFLAGS SF_VERTICAL;
    public static SPLITFLAGS SF_MAKESECONDARY;
    public static SPLITFLAGS SF_MAKEPRIMARY;
    public static SPLITFLAGS SF_ADJUSTABLE;
    public static SPLITFLAGS SF_FIXED;
}
public enum Microsoft.VisualStudio.TextManager.Interop.SPLITNOTIFYCODE : Enum {
    public int value__;
    public static SPLITNOTIFYCODE SNC_BEGINSIZE;
    public static SPLITNOTIFYCODE SNC_ENDSIZE;
    public static SPLITNOTIFYCODE SNC_ANCESTORDETACHED;
    public static SPLITNOTIFYCODE SNC_ANCESTORATTACHED;
    public static SPLITNOTIFYCODE SNC_LBUTTONDBLCLK;
}
public enum Microsoft.VisualStudio.TextManager.Interop.ST_IMAGEINDEX : Enum {
    public int value__;
    public static ST_IMAGEINDEX ST_DEFAULTIMAGE;
    public static ST_IMAGEINDEX ST_ERROR;
    public static ST_IMAGEINDEX ST_REFACTOR;
}
[FlagsAttribute]
public enum Microsoft.VisualStudio.TextManager.Interop.StorageLoadFlags : Enum {
    public int value__;
    public static StorageLoadFlags slfDefault;
    public static StorageLoadFlags slfReload;
}
[ComVisibleAttribute("False")]
[GuidAttribute("8560CECD-DFAC-4F7B-9D2A-E6D9810F3443")]
public interface Microsoft.VisualStudio.TextManager.Interop.SVsCodeWindow {
}
[ComVisibleAttribute("False")]
[GuidAttribute("4758CB90-6110-4440-B577-2E3FC91E4B84")]
public interface Microsoft.VisualStudio.TextManager.Interop.SVsCodeWindowManager {
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("912CA552-54A3-4CCA-8F50-DBCF322FB870")]
public interface Microsoft.VisualStudio.TextManager.Interop.SVsFindManager {
}
[ComVisibleAttribute("False")]
[GuidAttribute("6B6F0B32-B88B-40F8-A8FE-97438C5BDBEF")]
public interface Microsoft.VisualStudio.TextManager.Interop.SVsLanguageFilter {
}
[ComVisibleAttribute("False")]
[GuidAttribute("F65478CC-96F1-4BA9-9EF9-A575ACB96031")]
public interface Microsoft.VisualStudio.TextManager.Interop.SVsLinkedUndoTransactionManager {
}
[ComVisibleAttribute("False")]
[GuidAttribute("08363D65-C178-4484-A293-D148173DD750")]
public interface Microsoft.VisualStudio.TextManager.Interop.SVsRegisterFindScope {
}
[ComVisibleAttribute("False")]
[GuidAttribute("C5557BAA-B685-46DC-AF46-C16BFDE8FAB7")]
public interface Microsoft.VisualStudio.TextManager.Interop.SVsTextImageUtilities {
}
[ComVisibleAttribute("False")]
[GuidAttribute("F5E7E71D-1401-11d1-883B-0000F87579D2")]
public interface Microsoft.VisualStudio.TextManager.Interop.SVsTextManager {
}
[ComVisibleAttribute("False")]
[GuidAttribute("E6BBDFD0-C06A-11D2-936C-D714766E8B50")]
public interface Microsoft.VisualStudio.TextManager.Interop.SVsTextSpanSet {
}
public enum Microsoft.VisualStudio.TextManager.Interop.SYNTHETIC_REGION_EVENT : Enum {
    public int value__;
    public static SYNTHETIC_REGION_EVENT sreRegionReloaded;
}
[ComConversionLossAttribute]
public class Microsoft.VisualStudio.TextManager.Interop.TabStop : ValueType {
    [ComConversionLossAttribute]
public IntPtr iCol;
    [ComAliasNameAttribute("Microsoft.VisualStudio.OLE.Interop.ULONG")]
public UInt32 cEl;
    [ComAliasNameAttribute("Microsoft.VisualStudio.OLE.Interop.UINT")]
public UInt32 iRepeatWidth;
    [ComAliasNameAttribute("Microsoft.VisualStudio.OLE.Interop.DWORD")]
public UInt32 dwFlags;
}
[FlagsAttribute]
public enum Microsoft.VisualStudio.TextManager.Interop.TabStopFlags : Enum {
    public int value__;
    public static TabStopFlags USE_DEFAULT_REPEAT;
}
public class Microsoft.VisualStudio.TextManager.Interop.TextAddress : ValueType {
    [ComAliasNameAttribute("Microsoft.VisualStudio.TextManager.Interop.CharIndex")]
public int index;
    public int line;
}
public enum Microsoft.VisualStudio.TextManager.Interop.TextBufferErrors : Enum {
    public int value__;
    public static TextBufferErrors BUFFER_E_READONLY;
    public static TextBufferErrors BUFFER_E_READONLY_REGION;
    public static TextBufferErrors BUFFER_E_TIMEOUT;
    public static TextBufferErrors BUFFER_E_LOCKED;
    public static TextBufferErrors BUFFER_E_SCC_READONLY;
    public static TextBufferErrors BUFFER_E_DEST_TOO_SMALL;
    public static TextBufferErrors MARKER_E_INVALIDATED;
    public static TextBufferErrors MARKER_E_BUFFERDESTROYED;
}
public enum Microsoft.VisualStudio.TextManager.Interop.TextBufferErrors2 : Enum {
    public int value__;
    public static TextBufferErrors2 BUFFER_E_RELOAD_OCCURRED;
}
[FlagsAttribute]
public enum Microsoft.VisualStudio.TextManager.Interop.TextBufferInitFlags : Enum {
    public int value__;
    public static TextBufferInitFlags BIF_DEFAULT;
    public static TextBufferInitFlags BIF_CUSTOMSTORAGE;
    public static TextBufferInitFlags BIF_INITTEXT;
}
public enum Microsoft.VisualStudio.TextManager.Interop.TextFindMode : Enum {
    public int value__;
    public static TextFindMode TFIND_BACKWARDS;
    public static TextFindMode TFIND_MATCH_CASE;
    public static TextFindMode TFIND_WHOLE_WORD;
    public static TextFindMode TFIND_REG_EXPR;
    public static TextFindMode TFIND_WRAP_SEARCH;
    public static TextFindMode TFIND_IN_SELECTION;
    public static TextFindMode TFIND_NEW_SEARCH;
}
public class Microsoft.VisualStudio.TextManager.Interop.TextLineChange : ValueType {
    [ComAliasNameAttribute("Microsoft.VisualStudio.TextManager.Interop.CharIndex")]
public int iStartIndex;
    public int iStartLine;
    [ComAliasNameAttribute("Microsoft.VisualStudio.TextManager.Interop.CharIndex")]
public int iOldEndIndex;
    public int iOldEndLine;
    [ComAliasNameAttribute("Microsoft.VisualStudio.TextManager.Interop.CharIndex")]
public int iNewEndIndex;
    public int iNewEndLine;
}
public enum Microsoft.VisualStudio.TextManager.Interop.TextSelMode : Enum {
    public int value__;
    public static TextSelMode SM_STREAM;
    public static TextSelMode SM_BOX;
}
public class Microsoft.VisualStudio.TextManager.Interop.TextSpan : ValueType {
    [ComAliasNameAttribute("Microsoft.VisualStudio.TextManager.Interop.CharIndex")]
public int iStartIndex;
    public int iStartLine;
    [ComAliasNameAttribute("Microsoft.VisualStudio.TextManager.Interop.CharIndex")]
public int iEndIndex;
    public int iEndLine;
}
public class Microsoft.VisualStudio.TextManager.Interop.TextSpanAndCookie : ValueType {
    [ComAliasNameAttribute("Microsoft.VisualStudio.OLE.Interop.ULONG")]
public UInt32 ulHTMLCookie;
    [ComAliasNameAttribute("Microsoft.VisualStudio.TextManager.Interop.TextSpan")]
public TextSpan CodeSpan;
}
public class Microsoft.VisualStudio.TextManager.Interop.TextSpanPair : ValueType {
    [ComAliasNameAttribute("Microsoft.VisualStudio.TextManager.Interop.TextSpan")]
public TextSpan span1;
    [ComAliasNameAttribute("Microsoft.VisualStudio.TextManager.Interop.TextSpan")]
public TextSpan span2;
}
public enum Microsoft.VisualStudio.TextManager.Interop.TextViewAction : Enum {
    public int value__;
    public static TextViewAction TVA_SETCARETPOS;
    public static TextViewAction TVA_CENTERLINES;
}
public enum Microsoft.VisualStudio.TextManager.Interop.TextViewErrors : Enum {
    public int value__;
    public static TextViewErrors VIEW_E_NO_BOOKMARKS;
    public static TextViewErrors VIEW_E_NO_DEBUGGER;
    public static TextViewErrors VIEW_E_USERREADONLY;
    public static TextViewErrors VIEW_E_LOCATION_HIDDEN;
}
[FlagsAttribute]
public enum Microsoft.VisualStudio.TextManager.Interop.TextViewInitFlags : Enum {
    public int value__;
    public static TextViewInitFlags VIF_DEFAULT;
    public static TextViewInitFlags VIF_HSCROLL;
    public static TextViewInitFlags VIF_VSCROLL;
    public static TextViewInitFlags VIF_UPDATE_STATUS_BAR;
    public static TextViewInitFlags VIF_SET_WIDGET_MARGIN;
    public static TextViewInitFlags VIF_SET_SELECTION_MARGIN;
    public static TextViewInitFlags VIF_SET_VIRTUAL_SPACE;
    public static TextViewInitFlags VIF_SET_INDENT_MODE;
    public static TextViewInitFlags VIF_SET_STREAM_SEL_MODE;
    public static TextViewInitFlags VIF_SET_VISIBLE_WHITESPACE;
    public static TextViewInitFlags VIF_SET_OVERTYPE;
    public static TextViewInitFlags VIF_SET_DRAGDROPMOVE;
    public static TextViewInitFlags VIF_SET_HOTURLS;
}
[FlagsAttribute]
public enum Microsoft.VisualStudio.TextManager.Interop.TextViewInitFlags2 : Enum {
    public int value__;
    public static TextViewInitFlags2 VIF_READONLY;
    public static TextViewInitFlags2 VIF_ACTIVEINMODALSTATE;
    public static TextViewInitFlags2 VIF_SUPPRESS_STATUS_BAR_UPDATE;
    public static TextViewInitFlags2 VIF_SUPPRESSTRACKCHANGES;
    public static TextViewInitFlags2 VIF_SUPPRESSBORDER;
    public static TextViewInitFlags2 VIF_SUPPRESSTRACKGOBACK;
}
[FlagsAttribute]
public enum Microsoft.VisualStudio.TextManager.Interop.TextViewInitFlags3 : Enum {
    public int value__;
    public static TextViewInitFlags3 VIF_NO_HWND_SUPPORT;
}
public enum Microsoft.VisualStudio.TextManager.Interop.TipPosPreference : Enum {
    public int value__;
    public static TipPosPreference TPP_ABOVE;
    public static TipPosPreference TPP_BELOW;
    public static TipPosPreference TPP_LEFT;
    public static TipPosPreference TPP_RIGHT;
    public static TipPosPreference TPP_DOCKED;
}
public class Microsoft.VisualStudio.TextManager.Interop.TIPSIZEDATA : ValueType {
    [ComAliasNameAttribute("Microsoft.VisualStudio.OLE.Interop.SIZE")]
public SIZE size;
    [ComAliasNameAttribute("Microsoft.VisualStudio.TextManager.Interop.TipPosPreference")]
public TipPosPreference dwPosition;
}
public enum Microsoft.VisualStudio.TextManager.Interop.TipSuccesses : Enum {
    public int value__;
    public static TipSuccesses TIP_S_ONLYIFNOMARKER;
}
public enum Microsoft.VisualStudio.TextManager.Interop.TipSuccesses2 : Enum {
    public int value__;
    public static TipSuccesses2 TIP_S_NODEFAULTTIP;
}
[FlagsAttribute]
public enum Microsoft.VisualStudio.TextManager.Interop.TipWindowFlags : Enum {
    public int value__;
    public static TipWindowFlags UTW_CONTEXTCHANGED;
    public static TipWindowFlags UTW_CONTENTCHANGED;
    public static TipWindowFlags UTW_DISMISS;
}
[FlagsAttribute]
public enum Microsoft.VisualStudio.TextManager.Interop.TipWindowFlags2 : Enum {
    public int value__;
    public static TipWindowFlags2 UTW_TIMER;
    public static TipWindowFlags2 UTW_EXPANDED;
}
public enum Microsoft.VisualStudio.TextManager.Interop.UndoErrors : Enum {
    public int value__;
    public static UndoErrors UNDO_E_CLIENTABORT;
}
[FlagsAttribute]
public enum Microsoft.VisualStudio.TextManager.Interop.UpdateCompletionFlags : Enum {
    public int value__;
    public static UpdateCompletionFlags UCS_NAMESCHANGED;
    public static UpdateCompletionFlags UCS_EXTENTCHANGED;
    public static UpdateCompletionFlags UCS_FLAGSCHANGED;
    public static UpdateCompletionFlags UCS_COMPLETEWORD;
    public static UpdateCompletionFlags CSF_CUSTOMMATCHING;
    public static UpdateCompletionFlags CSF_CUSTOMCOMMIT;
    public static UpdateCompletionFlags CSF_HAVEDESCRIPTIONS;
    public static UpdateCompletionFlags CSF_INITIALEXTENTKNOWN;
    public static UpdateCompletionFlags CSF_NOCASEMATCHING;
    public static UpdateCompletionFlags CSF_NOCASEUNIQUENESS;
    public static UpdateCompletionFlags GBM_SELECT;
    public static UpdateCompletionFlags GBM_UNIQUE;
}
public class Microsoft.VisualStudio.TextManager.Interop.VIEWPREFERENCES : ValueType {
    public UInt32 fVisibleWhitespace;
    public UInt32 fSelectionMargin;
    public UInt32 fAutoDelimiterHighlight;
    public UInt32 fGoToAnchorAfterEscape;
    public UInt32 fDragDropEditing;
    public UInt32 fUndoCaretMovements;
    public UInt32 fOvertype;
    public UInt32 fDragDropMove;
    public UInt32 fWidgetMargin;
}
public class Microsoft.VisualStudio.TextManager.Interop.VIEWPREFERENCES2 : ValueType {
    public UInt32 fVisibleWhitespace;
    public UInt32 fSelectionMargin;
    public UInt32 fAutoDelimiterHighlight;
    public UInt32 fGoToAnchorAfterEscape;
    public UInt32 fDragDropEditing;
    public UInt32 fUndoCaretMovements;
    public UInt32 fOvertype;
    public UInt32 fDragDropMove;
    public UInt32 fWidgetMargin;
    public UInt32 fReadOnly;
    public UInt32 fActiveInModalState;
    public UInt32 fClientDragDropFeedback;
    public UInt32 fTrackChanges;
    public UInt32 uCompletorSize;
    public UInt32 fDetectUTF8;
    public int lEditorEmulation;
}
public class Microsoft.VisualStudio.TextManager.Interop.VIEWPREFERENCES3 : ValueType {
    public UInt32 fVisibleWhitespace;
    public UInt32 fSelectionMargin;
    public UInt32 fAutoDelimiterHighlight;
    public UInt32 fGoToAnchorAfterEscape;
    public UInt32 fDragDropEditing;
    public UInt32 fUndoCaretMovements;
    public UInt32 fOvertype;
    public UInt32 fDragDropMove;
    public UInt32 fWidgetMargin;
    public UInt32 fReadOnly;
    public UInt32 fActiveInModalState;
    public UInt32 fClientDragDropFeedback;
    public UInt32 fTrackChanges;
    public UInt32 uCompletorSize;
    public UInt32 fDetectUTF8;
    public int lEditorEmulation;
    public UInt32 fHighlightCurrentLine;
}
public class Microsoft.VisualStudio.TextManager.Interop.VIEWPREFERENCES4 : ValueType {
    public UInt32 fVisibleWhitespace;
    public UInt32 fSelectionMargin;
    public UInt32 fAutoDelimiterHighlight;
    public UInt32 fGoToAnchorAfterEscape;
    public UInt32 fDragDropEditing;
    public UInt32 fUndoCaretMovements;
    public UInt32 fOvertype;
    public UInt32 fDragDropMove;
    public UInt32 fWidgetMargin;
    public UInt32 fReadOnly;
    public UInt32 fActiveInModalState;
    public UInt32 fClientDragDropFeedback;
    public UInt32 fTrackChanges;
    public UInt32 uCompletorSize;
    public UInt32 fDetectUTF8;
    public int lEditorEmulation;
    public UInt32 fHighlightCurrentLine;
    public UInt32 fShowBlockStructure;
    public UInt32 fEnableCodingConventions;
}
public class Microsoft.VisualStudio.TextManager.Interop.VIEWPREFERENCES5 : ValueType {
    public UInt32 fVisibleWhitespace;
    public UInt32 fSelectionMargin;
    public UInt32 fAutoDelimiterHighlight;
    public UInt32 fGoToAnchorAfterEscape;
    public UInt32 fDragDropEditing;
    public UInt32 fUndoCaretMovements;
    public UInt32 fOvertype;
    public UInt32 fDragDropMove;
    public UInt32 fWidgetMargin;
    public UInt32 fReadOnly;
    public UInt32 fActiveInModalState;
    public UInt32 fClientDragDropFeedback;
    public UInt32 fTrackChanges;
    public UInt32 uCompletorSize;
    public UInt32 fDetectUTF8;
    public int lEditorEmulation;
    public UInt32 fHighlightCurrentLine;
    public UInt32 fShowBlockStructure;
    public UInt32 fEnableCodingConventions;
    public UInt32 fEnableClickGotoDef;
    public UInt32 uModifierKey;
    public UInt32 fOpenDefInPeek;
}
[ComVisibleAttribute("False")]
[GuidAttribute("8560CECD-DFAC-4F7B-9D2A-E6D9810F3443")]
[CoClassAttribute("Microsoft.VisualStudio.TextManager.Interop.VsCodeWindowClass")]
public interface Microsoft.VisualStudio.TextManager.Interop.VsCodeWindow {
}
[GuidAttribute("F5E7E719-1401-11D1-883B-0000F87579D2")]
[ClassInterfaceAttribute("0")]
public class Microsoft.VisualStudio.TextManager.Interop.VsCodeWindowClass : object {
    public virtual int SetBuffer(IVsTextLines pBuffer);
    public virtual int GetBuffer(IVsTextLines& ppBuffer);
    public virtual int GetPrimaryView(IVsTextView& ppView);
    public virtual int GetSecondaryView(IVsTextView& ppView);
    public virtual int SetViewClassID(Guid& clsidView);
    public virtual int GetViewClassID(Guid& pclsidView);
    public virtual int SetBaseEditorCaption(String[] pszBaseEditorCaption);
    public virtual int GetEditorCaption(READONLYSTATUS dwReadOnly, String& pbstrEditorCaption);
    public virtual int Close();
    public virtual int GetLastActiveView(IVsTextView& ppView);
}
[ComVisibleAttribute("False")]
[GuidAttribute("73B7DC00-F498-4ABD-AB79-D07AFD52F395")]
[CoClassAttribute("Microsoft.VisualStudio.TextManager.Interop.VsDefaultButtonBarImagesClass")]
public interface Microsoft.VisualStudio.TextManager.Interop.VsDefaultButtonBarImages {
}
[GuidAttribute("B2715971-D02C-11D2-AFB4-00105A9991EF")]
[ComConversionLossAttribute]
[ClassInterfaceAttribute("0")]
public class Microsoft.VisualStudio.TextManager.Interop.VsDefaultButtonBarImagesClass : object {
    public virtual int GetButtonCount(Int32& pcButtons);
    public virtual int GetImageList(IntPtr& phImageList);
}
[GuidAttribute("7BAA8929-E209-4019-80E6-A7F522435710")]
[ComVisibleAttribute("False")]
[CoClassAttribute("Microsoft.VisualStudio.TextManager.Interop.VsDiffLayerClass")]
public interface Microsoft.VisualStudio.TextManager.Interop.VsDiffLayer {
}
[ClassInterfaceAttribute("0")]
[GuidAttribute("42469676-FCFF-11D2-AFC4-00105A9991EF")]
public class Microsoft.VisualStudio.TextManager.Interop.VsDiffLayerClass : object {
}
[ComVisibleAttribute("False")]
[GuidAttribute("D7820968-4CF8-4760-B633-570282E5F66D")]
[CoClassAttribute("Microsoft.VisualStudio.TextManager.Interop.VsDropdownBarClass")]
public interface Microsoft.VisualStudio.TextManager.Interop.VsDropdownBar {
}
[ComConversionLossAttribute]
[GuidAttribute("452807CC-9BFA-11D0-8C3F-00C04FC2AAE2")]
[ClassInterfaceAttribute("0")]
public class Microsoft.VisualStudio.TextManager.Interop.VsDropdownBarClass : object {
    public virtual int Attach(IntPtr hwndParent, int cCombos, IVsDropdownBarClient pClient);
    public virtual void Detach();
    public virtual int GetCurrentSelection(int iCombo, Int32& piCurSel);
    public virtual int RefreshCombo(int iCombo, int iNewSelection);
    public virtual int GetClient(IVsDropdownBarClient& ppClient);
    public virtual int SetCurrentSelection(int iCombo, int iNewSelection);
}
public enum Microsoft.VisualStudio.TextManager.Interop.VSEDITPROPID : Enum {
    public int value__;
    public static VSEDITPROPID VSEDITPROPID_LAST;
    public static VSEDITPROPID VSEDITPROPID_ViewComposite_AllCodeWindowDefaults;
    public static VSEDITPROPID VSEDITPROPID_ViewGeneral_FontCategory;
    public static VSEDITPROPID VSEDITPROPID_ViewGeneral_ColorCategory;
    public static VSEDITPROPID VSEDITPROPID_ViewGlobalOpt_VisibleWhitespace;
    public static VSEDITPROPID VSEDITPROPID_ViewGlobalOpt_Overtype;
    public static VSEDITPROPID VSEDITPROPID_ViewGlobalOpt_SelectionMargin;
    public static VSEDITPROPID VSEDITPROPID_ViewGlobalOpt_AutoScrollCaretOnTextEntry;
    public static VSEDITPROPID VSEDITPROPID_ViewLangOpt_WordWrap;
    public static VSEDITPROPID VSEDITPROPID_ViewLangOpt_VirtualSpace;
    public static VSEDITPROPID VSEDITPROPID_ViewLangOpt_RawTextDisplay;
    public static VSEDITPROPID VSEDITPROPID_FrameOpt_SuppressResizeWidget;
    public static VSEDITPROPID VSEDITPROPID_ProgLang_DebuggerLanguages;
    public static VSEDITPROPID VSEDITPROPID_ProgLang_SuppressMultipleCodeWindows;
    public static VSEDITPROPID VSEDITPROPID_ProgLang_SupportCF_HTML;
    public static VSEDITPROPID VSEDITPROPID_FIRST;
}
public class Microsoft.VisualStudio.TextManager.Interop.VsExpansion : ValueType {
    public string path;
    public string title;
    public string shortcut;
    public string description;
}
[ComVisibleAttribute("False")]
[CoClassAttribute("Microsoft.VisualStudio.TextManager.Interop.VsExpansionManagerClass")]
[GuidAttribute("CA09E5EA-FEE7-4B52-AFE6-8EA2EC53F681")]
public interface Microsoft.VisualStudio.TextManager.Interop.VsExpansionManager {
}
[ClassInterfaceAttribute("0")]
[GuidAttribute("4970C2BC-AF33-4A73-A34F-18B0584C40E4")]
public class Microsoft.VisualStudio.TextManager.Interop.VsExpansionManagerClass : object {
    public virtual int EnumerateExpansions(Guid guidLang, int fShortCutOnly, String[] bstrTypes, int iCountTypes, int fIncludeNULLType, int fIncludeDuplicates, IVsExpansionEnumeration& pEnum);
    public virtual int InvokeInsertionUI(IVsTextView pView, IVsExpansionClient pClient, Guid guidLang, String[] bstrTypes, int iCountTypes, int fIncludeNULLType, String[] bstrKinds, int iCountKinds, int fIncludeNULLKind, string bstrPrefixText, string bstrCompletionChar);
    public virtual int GetExpansionByShortcut(IVsExpansionClient pClient, Guid guidLang, string szShortcut, IVsTextView pView, TextSpan[] pts, int fShowUI, String& pszExpansionPath, String& pszTitle);
    public virtual int GetTokenPath(UInt32 token, String& pbstrPath);
    public virtual int GetSnippetShortCutKeybindingState(Int32& fBound);
}
[ComVisibleAttribute("False")]
[GuidAttribute("CA09E5EA-FEE7-4B52-AFE6-8EA2EC53F681")]
[CoClassAttribute("Microsoft.VisualStudio.TextManager.Interop.VsExpansionPackageClass")]
public interface Microsoft.VisualStudio.TextManager.Interop.VsExpansionPackage {
}
[ClassInterfaceAttribute("0")]
[GuidAttribute("0B680757-2C29-4531-80FA-535A5178AA98")]
public class Microsoft.VisualStudio.TextManager.Interop.VsExpansionPackageClass : object {
    public virtual int EnumerateExpansions(Guid guidLang, int fShortCutOnly, String[] bstrTypes, int iCountTypes, int fIncludeNULLType, int fIncludeDuplicates, IVsExpansionEnumeration& pEnum);
    public virtual int InvokeInsertionUI(IVsTextView pView, IVsExpansionClient pClient, Guid guidLang, String[] bstrTypes, int iCountTypes, int fIncludeNULLType, String[] bstrKinds, int iCountKinds, int fIncludeNULLKind, string bstrPrefixText, string bstrCompletionChar);
    public virtual int GetExpansionByShortcut(IVsExpansionClient pClient, Guid guidLang, string szShortcut, IVsTextView pView, TextSpan[] pts, int fShowUI, String& pszExpansionPath, String& pszTitle);
    public virtual int GetTokenPath(UInt32 token, String& pbstrPath);
    public virtual int GetSnippetShortCutKeybindingState(Int32& fBound);
}
[ComVisibleAttribute("False")]
[CoClassAttribute("Microsoft.VisualStudio.TextManager.Interop.VsFinderClass")]
[GuidAttribute("D0C79C30-C06A-11D2-936C-D714766E8B50")]
public interface Microsoft.VisualStudio.TextManager.Interop.VsFinder {
}
[GuidAttribute("9F842E53-E27B-426F-AE69-8F075770C6F3")]
[ClassInterfaceAttribute("0")]
public class Microsoft.VisualStudio.TextManager.Interop.VsFinderClass : object {
    public virtual int AttachTextImage(object pTextImage);
    public virtual int Detach();
    public virtual int SetScope(IVsTextSpanSet pSpanScope);
    public virtual int Init(UInt32 grfOptions, string pszFindPattern, int fReinit, UInt32& pResult);
    public virtual int SetPosition(UInt32 fp, TextAddress ta);
    public virtual int Find(UInt32 grfFindHow, TextSpan[] ptsMatch, UInt32& pgrfResult);
    public virtual int GetMatch(TextSpan[] pts);
    public virtual int GetMatchedSpans(IVsTextSpanSet& ppSpans);
    public virtual int GetTaggedSpans(IVsTextSpanSet& ppTags);
    public virtual int GetState(Int32& pcFound, UInt32& pResult, UInt32& pState);
}
public enum Microsoft.VisualStudio.TextManager.Interop.VSFINDERROR2 : Enum {
    public int value__;
    public static VSFINDERROR2 VSFE_NoErrorAnsiPattern;
}
[ComVisibleAttribute("False")]
[CoClassAttribute("Microsoft.VisualStudio.TextManager.Interop.VsHiddenTextLayerClass")]
[GuidAttribute("82B21BAE-664B-43E1-95B1-0302805FF7D3")]
public interface Microsoft.VisualStudio.TextManager.Interop.VsHiddenTextLayer {
}
[GuidAttribute("9B6AB22E-916A-11D2-8914-0000F87579D2")]
[ClassInterfaceAttribute("0")]
public class Microsoft.VisualStudio.TextManager.Interop.VsHiddenTextLayerClass : object {
    public virtual int AddHiddenRegions(UInt32 dwUpdateFlags, int cRegions, NewHiddenRegion[] rgHidReg, IVsEnumHiddenRegions[] ppEnum);
    public virtual int EnumHiddenRegions(UInt32 dwFindFlags, IntPtr filterData, TextSpan[] ptsRange, IVsEnumHiddenRegions& ppEnum);
    public virtual int UnadviseClient();
    public virtual int Terminate();
}
public enum Microsoft.VisualStudio.TextManager.Interop.vsIndentStyle : Enum {
    public int value__;
    public static vsIndentStyle vsIndentStyleNone;
    public static vsIndentStyle vsIndentStyleDefault;
    public static vsIndentStyle vsIndentStyleSmart;
}
[ComVisibleAttribute("False")]
[CoClassAttribute("Microsoft.VisualStudio.TextManager.Interop.VsIntellisenseCompletorClass")]
[GuidAttribute("05DFCF7A-C78A-4E20-AAFB-4A0F4D26E0FB")]
public interface Microsoft.VisualStudio.TextManager.Interop.VsIntellisenseCompletor {
}
[ClassInterfaceAttribute("0")]
[GuidAttribute("F2073DB0-75B9-43AE-8681-0962C0CD4BE2")]
public class Microsoft.VisualStudio.TextManager.Interop.VsIntellisenseCompletorClass : object {
    public virtual int QueryStatus(Guid& pguidCmdGroup, UInt32 cCmds, OLECMD[] prgCmds, IntPtr pCmdText);
    public virtual int Exec(Guid& pguidCmdGroup, UInt32 nCmdID, UInt32 nCmdexecopt, IntPtr pvaIn, IntPtr pvaOut);
    public virtual int Initialize(IVsIntellisenseHost pHost, IntPtr hwndParent);
    public virtual int Update(IVsCompletionSet pCompSet, UInt32 dwFlags);
    public virtual int GetWidth(UInt32& dwWidth);
    public virtual int GetHeight(UInt32& dwHeight);
    public virtual int GetCompletionSpan(TextSpan[] ts);
    public virtual int SetLocation(POINT[] p);
    public virtual int Hide();
    public virtual int IsActive(Int32& pfIsActive);
    public virtual int GetWindowHandle(IntPtr& phwnd);
}
[ComVisibleAttribute("False")]
[GuidAttribute("1E34D422-7120-4D9E-96FF-E880B665D30D")]
[CoClassAttribute("Microsoft.VisualStudio.TextManager.Interop.VsIntellisenseLangTipClass")]
public interface Microsoft.VisualStudio.TextManager.Interop.VsIntellisenseLangTip {
}
[ClassInterfaceAttribute("0")]
[GuidAttribute("39F4B568-7166-42B3-87E6-6B856864AE55")]
public class Microsoft.VisualStudio.TextManager.Interop.VsIntellisenseLangTipClass : object {
    public virtual int Initialize(IVsIntellisenseHost pHost);
    public virtual int GetSizePreferences(RECT[] prcCtxBounds, TIPSIZEDATA[] pSizeData);
    public virtual int Create(IVsTipWindow pTipWnd);
    public virtual int Update(IVsTipWindow pTipWnd, UInt32 dwFlags);
    public virtual int UpdatePosition();
    public virtual int GetSizeY(Int16& pSizeY);
    public virtual int Close(int fDeleteThis);
    public virtual int IsActive(Int32& pfIsActive);
    public virtual int GetOverloadCount(Int32& plOverloadCount);
    public virtual int ScrollUp();
    public virtual int ScrollDown();
}
[ComVisibleAttribute("False")]
[CoClassAttribute("Microsoft.VisualStudio.TextManager.Interop.VsLocalUserDataClass")]
[GuidAttribute("978A8E17-4DF8-432A-9623-D530A26452BC")]
public interface Microsoft.VisualStudio.TextManager.Interop.VsLocalUserData {
}
[ClassInterfaceAttribute("0")]
[GuidAttribute("5130C7AB-85BB-11D3-B363-00C04F611E41")]
public class Microsoft.VisualStudio.TextManager.Interop.VsLocalUserDataClass : object {
    public virtual int GetData(Guid& riidKey, Object& pvtData);
    public virtual int SetData(Guid& riidKey, object vtData);
}
[ComVisibleAttribute("False")]
[GuidAttribute("794767F6-538A-4CD3-B29E-6C76C79A7C9C")]
[CoClassAttribute("Microsoft.VisualStudio.TextManager.Interop.VsMethodTipWindowClass")]
public interface Microsoft.VisualStudio.TextManager.Interop.VsMethodTipWindow {
}
[ClassInterfaceAttribute("0")]
[GuidAttribute("261A5572-C649-11D0-A8DF-00A0C921A4D2")]
public class Microsoft.VisualStudio.TextManager.Interop.VsMethodTipWindowClass : object {
    public virtual int GetContextStream(Int32& piPos, Int32& piLength);
    public virtual int GetSizePreferences(RECT[] prcCtxBounds, TIPSIZEDATA[] pSizeData);
    public virtual int Paint(IntPtr hdc, RECT[] prc);
    public virtual void Dismiss();
    public virtual int WndProc(IntPtr hwnd, UInt32 iMsg, IntPtr wParam, IntPtr lParam);
    public virtual int SetMethodData(IVsMethodData pMethodData);
}
[ComVisibleAttribute("False")]
[CoClassAttribute("Microsoft.VisualStudio.TextManager.Interop.VsSmartTagTipWindowClass")]
[GuidAttribute("E2DECE2A-3A77-4FD3-A4B2-FA5EC4EA41D9")]
public interface Microsoft.VisualStudio.TextManager.Interop.VsSmartTagTipWindow {
}
[ClassInterfaceAttribute("0")]
[GuidAttribute("5A46C6DE-1FE4-43B8-8E1E-598AE65F184A")]
public class Microsoft.VisualStudio.TextManager.Interop.VsSmartTagTipWindowClass : object {
    public virtual int GetContextStream(Int32& piPos, Int32& piLength);
    public virtual int GetSizePreferences(RECT[] prcCtxBounds, SMARTTAGSIZEDATA[] pSizeData);
    public virtual int Paint(IntPtr hdc, RECT[] prc, UInt32 pColor, UInt32 pColorText, int fSel);
    public virtual int Dismiss();
    public virtual int WndProc(IntPtr hwnd, UInt32 iMsg, IntPtr wParam, IntPtr lParam, IntPtr& pLResult);
    public virtual int SetSmartTagData(IVsSmartTagData pSmartTagData);
}
[ComVisibleAttribute("False")]
[GuidAttribute("5486C948-AF82-4DA5-A968-97F3ADA66670")]
[CoClassAttribute("Microsoft.VisualStudio.TextManager.Interop.VsSplitRootClass")]
public interface Microsoft.VisualStudio.TextManager.Interop.VsSplitRoot {
}
[ClassInterfaceAttribute("0")]
[GuidAttribute("F5E7E71A-1401-11D1-883B-0000F87579D2")]
[ComConversionLossAttribute]
public class Microsoft.VisualStudio.TextManager.Interop.VsSplitRootClass : object {
    public virtual int GetRootSplitter(IVsSplitter& ppPane);
    public virtual int GetWindowHandle(IntPtr& phwnd);
    public virtual int GetPane(PANETYPE PANETYPE, IVsSplitPane& ppPane);
}
[ComVisibleAttribute("False")]
[GuidAttribute("0C71E351-5141-4B6F-B838-E212F0764875")]
[CoClassAttribute("Microsoft.VisualStudio.TextManager.Interop.VsSyntheticTextLayerClass")]
public interface Microsoft.VisualStudio.TextManager.Interop.VsSyntheticTextLayer {
}
[GuidAttribute("42469677-FCFF-11D2-AFC4-00105A9991EF")]
[ClassInterfaceAttribute("0")]
public class Microsoft.VisualStudio.TextManager.Interop.VsSyntheticTextLayerClass : object {
    public virtual int AddSyntheticRegions(UInt32 dwUpdateFlags, int cRegions, NewSyntheticRegion[] rgSynthReg, IVsEnumSyntheticRegions[] ppEnum);
    public virtual int EnumSyntheticRegions(UInt32 dwFindFlags, UInt32 dwCookie, TextSpan[] ptsRange, IVsEnumSyntheticRegions& ppEnum);
    public virtual int UnadviseClient();
    public virtual int Terminate();
}
[ComVisibleAttribute("False")]
[GuidAttribute("C08E5275-0D26-4DE9-8892-994024C23750")]
[CoClassAttribute("Microsoft.VisualStudio.TextManager.Interop.VsTextBufferClass")]
public interface Microsoft.VisualStudio.TextManager.Interop.VsTextBuffer {
}
[ClassInterfaceAttribute("0")]
[GuidAttribute("8E7B96A8-E33D-11D0-A6D5-00C04FB67F6A")]
public class Microsoft.VisualStudio.TextManager.Interop.VsTextBufferClass : object {
    public virtual int LockBuffer();
    public virtual int UnlockBuffer();
    public virtual int InitializeContent(string pszText, int iLength);
    public virtual int GetStateFlags(UInt32& pdwReadOnlyFlags);
    public virtual int SetStateFlags(UInt32 dwReadOnlyFlags);
    public virtual int GetPositionOfLine(int iLine, Int32& piPosition);
    public virtual int GetPositionOfLineIndex(int iLine, int iIndex, Int32& piPosition);
    public virtual int GetLineIndexOfPosition(int iPosition, Int32& piLine, Int32& piColumn);
    public virtual int GetLengthOfLine(int iLine, Int32& piLength);
    public virtual int GetLineCount(Int32& piLineCount);
    public virtual int GetSize(Int32& piLength);
    public virtual int GetLanguageServiceID(Guid& pguidLangService);
    public virtual int SetLanguageServiceID(Guid& guidLangService);
    public virtual int GetUndoManager(IOleUndoManager& ppUndoManager);
    public virtual int Reserved1();
    public virtual int Reserved2();
    public virtual int Reserved3();
    public virtual int Reserved4();
    public virtual int Reload(int fUndoable);
    public virtual int LockBufferEx(UInt32 dwFlags);
    public virtual int UnlockBufferEx(UInt32 dwFlags);
    public virtual int GetLastLineIndex(Int32& piLine, Int32& piIndex);
    public virtual int Reserved5();
    public virtual int Reserved6();
    public virtual int Reserved7();
    public virtual int Reserved8();
    public virtual int Reserved9();
    public virtual int Reserved10();
    public virtual int IVsTextLines_LockBuffer();
    public virtual int IVsTextLines_UnlockBuffer();
    public virtual int IVsTextLines_InitializeContent(string pszText, int iLength);
    public virtual int IVsTextLines_GetStateFlags(UInt32& pdwReadOnlyFlags);
    public virtual int IVsTextLines_SetStateFlags(UInt32 dwReadOnlyFlags);
    public virtual int IVsTextLines_GetPositionOfLine(int iLine, Int32& piPosition);
    public virtual int IVsTextLines_GetPositionOfLineIndex(int iLine, int iIndex, Int32& piPosition);
    public virtual int IVsTextLines_GetLineIndexOfPosition(int iPosition, Int32& piLine, Int32& piColumn);
    public virtual int IVsTextLines_GetLengthOfLine(int iLine, Int32& piLength);
    public virtual int IVsTextLines_GetLineCount(Int32& piLineCount);
    public virtual int IVsTextLines_GetSize(Int32& piLength);
    public virtual int IVsTextLines_GetLanguageServiceID(Guid& pguidLangService);
    public virtual int IVsTextLines_SetLanguageServiceID(Guid& guidLangService);
    public virtual int IVsTextLines_GetUndoManager(IOleUndoManager& ppUndoManager);
    public virtual int IVsTextLines_Reserved1();
    public virtual int IVsTextLines_Reserved2();
    public virtual int IVsTextLines_Reserved3();
    public virtual int IVsTextLines_Reserved4();
    public virtual int IVsTextLines_Reload(int fUndoable);
    public virtual int IVsTextLines_LockBufferEx(UInt32 dwFlags);
    public virtual int IVsTextLines_UnlockBufferEx(UInt32 dwFlags);
    public virtual int IVsTextLines_GetLastLineIndex(Int32& piLine, Int32& piIndex);
    public virtual int IVsTextLines_Reserved5();
    public virtual int IVsTextLines_Reserved6();
    public virtual int IVsTextLines_Reserved7();
    public virtual int IVsTextLines_Reserved8();
    public virtual int IVsTextLines_Reserved9();
    public virtual int IVsTextLines_Reserved10();
    public virtual int GetMarkerData(int iTopLine, int iBottomLine, MARKERDATA[] pMarkerData);
    public virtual int ReleaseMarkerData(MARKERDATA[] pMarkerData);
    public virtual int GetLineData(int iLine, LINEDATA[] pLineData, MARKERDATA[] pMarkerData);
    public virtual int ReleaseLineData(LINEDATA[] pLineData);
    public virtual int GetLineText(int iStartLine, int iStartIndex, int iEndLine, int iEndIndex, String& pbstrBuf);
    public virtual int CopyLineText(int iStartLine, int iStartIndex, int iEndLine, int iEndIndex, IntPtr pszBuf, Int32& pcchBuf);
    public virtual int ReplaceLines(int iStartLine, int iStartIndex, int iEndLine, int iEndIndex, IntPtr pszText, int iNewLen, TextSpan[] pChangedSpan);
    public virtual int CanReplaceLines(int iStartLine, int iStartIndex, int iEndLine, int iEndIndex, int iNewLen);
    public virtual int CreateLineMarker(int iMarkerType, int iStartLine, int iStartIndex, int iEndLine, int iEndIndex, IVsTextMarkerClient pClient, IVsTextLineMarker[] ppMarker);
    public virtual int EnumMarkers(int iStartLine, int iStartIndex, int iEndLine, int iEndIndex, int iMarkerType, UInt32 dwFlags, IVsEnumLineMarkers& ppEnum);
    public virtual int FindMarkerByLineIndex(int iMarkerType, int iStartingLine, int iStartingIndex, UInt32 dwFlags, IVsTextLineMarker& ppMarker);
    public virtual int AdviseTextLinesEvents(IVsTextLinesEvents pSink, UInt32& pdwCookie);
    public virtual int UnadviseTextLinesEvents(UInt32 dwCookie);
    public virtual int GetPairExtents(TextSpan[] pSpanIn, TextSpan[] pSpanOut);
    public virtual int ReloadLines(int iStartLine, int iStartIndex, int iEndLine, int iEndIndex, IntPtr pszText, int iNewLen, TextSpan[] pChangedSpan);
    public virtual int IVsTextLinesReserved1(int iLine, LINEDATA[] pLineData, int fAttributes);
    public virtual int GetLineDataEx(UInt32 dwFlags, int iLine, int iStartIndex, int iEndIndex, LINEDATAEX[] pLineData, MARKERDATA[] pMarkerData);
    public virtual int ReleaseLineDataEx(LINEDATAEX[] pLineData);
    public virtual int CreateEditPoint(int iLine, int iIndex, Object& ppEditPoint);
    public virtual int ReplaceLinesEx(UInt32 dwFlags, int iStartLine, int iStartIndex, int iEndLine, int iEndIndex, IntPtr pszText, int iNewLen, TextSpan[] pChangedSpan);
    public virtual int CreateTextPoint(int iLine, int iIndex, Object& ppTextPoint);
}
[ComVisibleAttribute("False")]
[CoClassAttribute("Microsoft.VisualStudio.TextManager.Interop.VsTextBufferCoordinatorClass")]
[GuidAttribute("84465401-2886-4CE0-AF50-C0560226ED40")]
public interface Microsoft.VisualStudio.TextManager.Interop.VsTextBufferCoordinator {
}
[ClassInterfaceAttribute("0")]
[GuidAttribute("3E77FA94-526F-4233-BF81-B2B0329A62B9")]
public class Microsoft.VisualStudio.TextManager.Interop.VsTextBufferCoordinatorClass : object {
    public virtual int SetBuffers(IVsTextLines pPrimaryBuffer, IVsTextLines pSecondaryBuffer);
    public virtual int SetSpanMappings(int cSpans, NewSpanMapping[] rgSpans);
    public virtual int MapPrimaryToSecondarySpan(TextSpan tsPrimary, TextSpan[] ptsSecondary);
    public virtual int MapSecondaryToPrimarySpan(TextSpan tsSecondary, TextSpan[] ptsPrimary);
    public virtual int GetPrimaryBuffer(IVsTextLines& ppBuffer);
    public virtual int GetSecondaryBuffer(IVsTextLines& ppBuffer);
    public virtual int EnableReplication(UInt32 bcrd, int fEnable);
    public virtual int GetMappingOfPrimaryPosition(int lPosition, TextSpan[] ptsPrimary, TextSpan[] ptsSecondary);
    public virtual int SetBufferMappingModes(UInt32 bcmmPrimary, UInt32 bcmmSecondary);
    public virtual int EnumSpans(IVsEnumBufferCoordinatorSpans& ppEnum);
}
[ComVisibleAttribute("False")]
[GuidAttribute("67068DC0-C069-11D2-936C-D714766E8B50")]
[CoClassAttribute("Microsoft.VisualStudio.TextManager.Interop.VsTextImageClass")]
public interface Microsoft.VisualStudio.TextManager.Interop.VsTextImage {
}
[ClassInterfaceAttribute("0")]
[GuidAttribute("66B88230-2363-4992-B740-B0450A6F51CA")]
public class Microsoft.VisualStudio.TextManager.Interop.VsTextImageClass : object {
    public virtual int GetCharSize(Int32& pcch);
    public virtual int GetLineSize(Int32& pcLines);
    public virtual int GetOffsetOfTextAddress(TextAddress ta, Int32& piOffset);
    public virtual int GetTextAddressOfOffset(int iOffset, TextAddress[] pta);
    public virtual int Replace(UInt32 dwFlags, TextSpan[] pts, int cch, string pchText, TextSpan[] ptsChanged);
    public virtual int GetSpanLength(TextSpan[] pts, Int32& pcch);
    public virtual int GetTextBSTR(TextSpan[] pts, String& pbstrText);
    public virtual int GetText(TextSpan[] pts, int cch, UInt16[] psz);
    public virtual int GetLineLength(int iLine, Int32& piLength);
    public virtual int GetLine(UInt32 grfGet, int iLine, int iStartIndex, int iEndIndex, LINEDATAEX[] pLineData);
    public virtual int ReleaseLine(LINEDATAEX[] pLineData);
    public virtual int AdviseTextImageEvents(IVsTextImageEvents pSink, UInt32& pCookie);
    public virtual int UnadviseTextImageEvents(UInt32 Cookie);
    public virtual int LockImage(UInt32 grfLock);
    public virtual int UnlockImage(UInt32 grfLock);
}
[ComVisibleAttribute("False")]
[GuidAttribute("1ABAC269-8FB0-438E-8217-230AC6EB5766")]
[CoClassAttribute("Microsoft.VisualStudio.TextManager.Interop.VsTextLineStorageClass")]
public interface Microsoft.VisualStudio.TextManager.Interop.VsTextLineStorage {
}
[ComConversionLossAttribute]
[ClassInterfaceAttribute("0")]
[GuidAttribute("D6513A91-ACC8-11D2-8919-0000F87579D2")]
public class Microsoft.VisualStudio.TextManager.Interop.VsTextLineStorageClass : object {
    public virtual int Storage_Attach(object pBuffer);
    public virtual void Storage_Detach();
    public virtual int Storage_GetLength();
    public virtual int Storage_GetLineCount();
    public virtual int Storage_GetLengthOfLine(int iLine, Int32& piLength);
    public virtual int Storage_GetPositionOfLineIndex(int iLine, int iIndex, Int32& piPosition);
    public virtual int Storage_GetLineIndexOfPosition(int iPosition, Int32& piLine, Int32& piIndex);
    public virtual int Storage_Replace(ChangeInput[] pCI, TextSpan[] ptsOut);
    public virtual int Storage_CopyText(int iStartLine, int iStartIndex, int iBufMax, IntPtr pszDest, Int32& pcCharsCopied);
    public virtual int Storage_GetCharsInSpan(TextSpan[] pSpanToMeasure, Int32& piChars);
    public virtual int Storage_GetLineDataEx(UInt32 dwFlags, int iLine, int iStartIndex, int iEndIndex, LINEDATAEX[] pLineData);
    public virtual int Storage_ReleaseLineDataEx(LINEDATAEX[] pLineData);
    public virtual int Storage_GetLanguageServiceID(Guid& pguidLangService);
    public virtual int Storage_SetLanguageServiceID(Guid& guidLangService);
    public virtual int Storage_RefreshColorization(int iTopLine, int iBotLine, Int32& piLastAffectedLine);
    public virtual int Storage_Find(string pszText, int iStartLine, int iStartIndex, int iEndLine, int iEndIndex, int iFlags, Int32& piLine, Int32& piCol);
    public virtual IntPtr Image_Alloc(int iSize);
    public virtual IntPtr Image_Realloc(IntPtr& p, int iSize);
    public virtual void Image_Free(IntPtr p);
    public virtual int Image_GetLength();
    public virtual int Image_LoadText(string pszText, int iLength, UInt32 dwFlags);
    public virtual int Image_OpenFullTextScan();
    public virtual int Image_FullTextRead(String& ppszText, Int32& piLength);
    public virtual int Image_CloseFullTextScan();
}
[ComVisibleAttribute("False")]
[GuidAttribute("909F83E3-B3FC-4BBF-8820-64378744B39B")]
[CoClassAttribute("Microsoft.VisualStudio.TextManager.Interop.VsTextManagerClass")]
public interface Microsoft.VisualStudio.TextManager.Interop.VsTextManager {
}
[ClassInterfaceAttribute("0")]
[GuidAttribute("F5E7E71D-1401-11D1-883B-0000F87579D2")]
public class Microsoft.VisualStudio.TextManager.Interop.VsTextManagerClass : object {
    public virtual int RegisterView(IVsTextView pView, IVsTextBuffer pBuffer);
    public virtual int UnregisterView(IVsTextView pView);
    public virtual int EnumViews(IVsTextBuffer pBuffer, IVsEnumTextViews& ppEnum);
    public virtual int CreateSelectionAction(IVsTextBuffer pBuffer, IVsTextSelectionAction& ppAction);
    public virtual int MapFilenameToLanguageSID(string pszFileName, Guid& pguidLangSID);
    public virtual int GetRegisteredMarkerTypeID(Guid& pguidMarker, Int32& piMarkerTypeID);
    public virtual int GetMarkerTypeInterface(int iMarkerTypeID, IVsTextMarkerType& ppMarkerType);
    public virtual int GetMarkerTypeCount(Int32& piMarkerTypeCount);
    public virtual int GetActiveView(int fMustHaveFocus, IVsTextBuffer pBuffer, IVsTextView& ppView);
    public virtual int GetUserPreferences(VIEWPREFERENCES[] pViewPrefs, FRAMEPREFERENCES[] pFramePrefs, LANGPREFERENCES[] pLangPrefs, FONTCOLORPREFERENCES[] pColorPrefs);
    public virtual int SetUserPreferences(VIEWPREFERENCES[] pViewPrefs, FRAMEPREFERENCES[] pFramePrefs, LANGPREFERENCES[] pLangPrefs, FONTCOLORPREFERENCES[] pColorPrefs);
    public virtual int SetFileChangeAdvise(string pszFileName, int fStart);
    public virtual int SuspendFileChangeAdvise(string pszFileName, int fSuspend);
    public virtual int NavigateToPosition(IVsTextBuffer pBuffer, Guid& guidDocViewType, int iPos, int iLen);
    public virtual int NavigateToLineAndColumn(IVsTextBuffer pBuffer, Guid& guidDocViewType, int iStartRow, int iStartIndex, int iEndRow, int iEndIndex);
    public virtual int GetBufferSccStatus(IVsUserData pBufData, Int32& pbNonEditable);
    public virtual int RegisterBuffer(IVsTextBuffer pBuffer);
    public virtual int UnregisterBuffer(IVsTextBuffer pBuffer);
    public virtual int EnumBuffers(IVsEnumTextBuffers& ppEnum);
    public virtual int GetPerLanguagePreferences(LANGPREFERENCES[] pLangPrefs);
    public virtual int SetPerLanguagePreferences(LANGPREFERENCES[] pLangPrefs);
    public virtual int AttemptToCheckOutBufferFromScc(IVsUserData pBufData, Int32& pfCheckoutSucceeded);
    public virtual int GetShortcutManager(IVsShortcutManager& ppShortcutMgr);
    public virtual int RegisterIndependentView(object pUnk, IVsTextBuffer pBuffer);
    public virtual int UnregisterIndependentView(object pUnk, IVsTextBuffer pBuffer);
    public virtual int IgnoreNextFileChange(IVsTextBuffer pBuffer);
    public virtual int AdjustFileChangeIgnoreCount(IVsTextBuffer pBuffer, int fIgnore);
    public virtual int GetBufferSccStatus2(string pszFileName, Int32& pbNonEditable, Int32& piStatusFlags);
    public virtual int AttemptToCheckOutBufferFromScc2(string pszFileName, Int32& pfCheckoutSucceeded, Int32& piStatusFlags);
    public virtual int EnumLanguageServices(IVsEnumGUID& ppEnum);
    public virtual int EnumIndependentViews(IVsTextBuffer pBuffer, IVsEnumIndependentViews& ppEnum);
}
[ComVisibleAttribute("False")]
[GuidAttribute("909F83E3-B3FC-4BBF-8820-64378744B39B")]
[CoClassAttribute("Microsoft.VisualStudio.TextManager.Interop.VsTextPackageClass")]
public interface Microsoft.VisualStudio.TextManager.Interop.VsTextPackage {
}
[GuidAttribute("F5E7E720-1401-11D1-883B-0000F87579D2")]
[ClassInterfaceAttribute("0")]
public class Microsoft.VisualStudio.TextManager.Interop.VsTextPackageClass : object {
    public virtual int RegisterView(IVsTextView pView, IVsTextBuffer pBuffer);
    public virtual int UnregisterView(IVsTextView pView);
    public virtual int EnumViews(IVsTextBuffer pBuffer, IVsEnumTextViews& ppEnum);
    public virtual int CreateSelectionAction(IVsTextBuffer pBuffer, IVsTextSelectionAction& ppAction);
    public virtual int MapFilenameToLanguageSID(string pszFileName, Guid& pguidLangSID);
    public virtual int GetRegisteredMarkerTypeID(Guid& pguidMarker, Int32& piMarkerTypeID);
    public virtual int GetMarkerTypeInterface(int iMarkerTypeID, IVsTextMarkerType& ppMarkerType);
    public virtual int GetMarkerTypeCount(Int32& piMarkerTypeCount);
    public virtual int GetActiveView(int fMustHaveFocus, IVsTextBuffer pBuffer, IVsTextView& ppView);
    public virtual int GetUserPreferences(VIEWPREFERENCES[] pViewPrefs, FRAMEPREFERENCES[] pFramePrefs, LANGPREFERENCES[] pLangPrefs, FONTCOLORPREFERENCES[] pColorPrefs);
    public virtual int SetUserPreferences(VIEWPREFERENCES[] pViewPrefs, FRAMEPREFERENCES[] pFramePrefs, LANGPREFERENCES[] pLangPrefs, FONTCOLORPREFERENCES[] pColorPrefs);
    public virtual int SetFileChangeAdvise(string pszFileName, int fStart);
    public virtual int SuspendFileChangeAdvise(string pszFileName, int fSuspend);
    public virtual int NavigateToPosition(IVsTextBuffer pBuffer, Guid& guidDocViewType, int iPos, int iLen);
    public virtual int NavigateToLineAndColumn(IVsTextBuffer pBuffer, Guid& guidDocViewType, int iStartRow, int iStartIndex, int iEndRow, int iEndIndex);
    public virtual int GetBufferSccStatus(IVsUserData pBufData, Int32& pbNonEditable);
    public virtual int RegisterBuffer(IVsTextBuffer pBuffer);
    public virtual int UnregisterBuffer(IVsTextBuffer pBuffer);
    public virtual int EnumBuffers(IVsEnumTextBuffers& ppEnum);
    public virtual int GetPerLanguagePreferences(LANGPREFERENCES[] pLangPrefs);
    public virtual int SetPerLanguagePreferences(LANGPREFERENCES[] pLangPrefs);
    public virtual int AttemptToCheckOutBufferFromScc(IVsUserData pBufData, Int32& pfCheckoutSucceeded);
    public virtual int GetShortcutManager(IVsShortcutManager& ppShortcutMgr);
    public virtual int RegisterIndependentView(object pUnk, IVsTextBuffer pBuffer);
    public virtual int UnregisterIndependentView(object pUnk, IVsTextBuffer pBuffer);
    public virtual int IgnoreNextFileChange(IVsTextBuffer pBuffer);
    public virtual int AdjustFileChangeIgnoreCount(IVsTextBuffer pBuffer, int fIgnore);
    public virtual int GetBufferSccStatus2(string pszFileName, Int32& pbNonEditable, Int32& piStatusFlags);
    public virtual int AttemptToCheckOutBufferFromScc2(string pszFileName, Int32& pfCheckoutSucceeded, Int32& piStatusFlags);
    public virtual int EnumLanguageServices(IVsEnumGUID& ppEnum);
    public virtual int EnumIndependentViews(IVsTextBuffer pBuffer, IVsEnumIndependentViews& ppEnum);
}
[ComVisibleAttribute("False")]
[CoClassAttribute("Microsoft.VisualStudio.TextManager.Interop.VsTextSpanSetClass")]
[GuidAttribute("E6BBDFD0-C06A-11D2-936C-D714766E8B50")]
public interface Microsoft.VisualStudio.TextManager.Interop.VsTextSpanSet {
}
[GuidAttribute("31A81214-5A9F-4532-ACD0-3204A9AB5D08")]
[ClassInterfaceAttribute("0")]
public class Microsoft.VisualStudio.TextManager.Interop.VsTextSpanSetClass : object {
    public virtual int AttachTextImage(object pText);
    public virtual int Detach();
    public virtual int SuspendTracking();
    public virtual int ResumeTracking();
    public virtual int Add(int cEl, TextSpan[] pSpan);
    public virtual int GetCount(Int32& pcel);
    public virtual int GetAt(int iEl, TextSpan[] pSpan);
    public virtual int RemoveAll();
    public virtual int Sort(UInt32 SortOptions);
    public virtual int AddFromEnum(IVsEnumTextSpans pEnum);
}
[ComVisibleAttribute("False")]
[GuidAttribute("A6ACCB2F-1E0D-458B-A878-D40EB89C1DF4")]
[CoClassAttribute("Microsoft.VisualStudio.TextManager.Interop.VsTextTipWindowClass")]
public interface Microsoft.VisualStudio.TextManager.Interop.VsTextTipWindow {
}
[ClassInterfaceAttribute("0")]
[GuidAttribute("05DD7650-130A-11D3-AFCB-00105A9991EF")]
public class Microsoft.VisualStudio.TextManager.Interop.VsTextTipWindowClass : object {
    public virtual int GetContextStream(Int32& piPos, Int32& piLength);
    public virtual int GetSizePreferences(RECT[] prcCtxBounds, TIPSIZEDATA[] pSizeData);
    public virtual int Paint(IntPtr hdc, RECT[] prc);
    public virtual void Dismiss();
    public virtual int WndProc(IntPtr hwnd, UInt32 iMsg, IntPtr wParam, IntPtr lParam);
    public virtual int SetTextTipData(IVsTextTipData pMethodData);
}
[ComVisibleAttribute("False")]
[GuidAttribute("BB23A14B-7C61-469A-9890-A95648CED5E6")]
[CoClassAttribute("Microsoft.VisualStudio.TextManager.Interop.VsTextViewClass")]
public interface Microsoft.VisualStudio.TextManager.Interop.VsTextView {
}
[ComConversionLossAttribute]
[ClassInterfaceAttribute("0")]
[GuidAttribute("F5E7E71E-1401-11D1-883B-0000F87579D2")]
public class Microsoft.VisualStudio.TextManager.Interop.VsTextViewClass : object {
    public virtual int Initialize(IVsTextLines pBuffer, IntPtr hwndParent, UInt32 InitFlags, INITVIEW[] pInitView);
    public virtual int CloseView();
    public virtual int GetCaretPos(Int32& piLine, Int32& piColumn);
    public virtual int SetCaretPos(int iLine, int iColumn);
    public virtual int GetSelectionSpan(TextSpan[] pSpan);
    public virtual int GetSelection(Int32& piAnchorLine, Int32& piAnchorCol, Int32& piEndLine, Int32& piEndCol);
    public virtual int SetSelection(int iAnchorLine, int iAnchorCol, int iEndLine, int iEndCol);
    public virtual TextSelMode GetSelectionMode();
    public virtual int SetSelectionMode(TextSelMode iSelMode);
    public virtual int ClearSelection(int fMoveToAnchor);
    public virtual int CenterLines(int iTopLine, int iCount);
    public virtual int GetSelectedText(String& pbstrText);
    public virtual int GetSelectionDataObject(IDataObject& ppIDataObject);
    public virtual int GetTextStream(int iTopLine, int iTopCol, int iBottomLine, int iBottomCol, String& pbstrText);
    public virtual int GetBuffer(IVsTextLines& ppBuffer);
    public virtual int SetBuffer(IVsTextLines pBuffer);
    public virtual IntPtr GetWindowHandle();
    public virtual int GetScrollInfo(int iBar, Int32& piMinUnit, Int32& piMaxUnit, Int32& piVisibleUnits, Int32& piFirstVisibleUnit);
    public virtual int SetScrollPosition(int iBar, int iFirstVisibleUnit);
    public virtual int AddCommandFilter(IOleCommandTarget pNewCmdTarg, IOleCommandTarget& ppNextCmdTarg);
    public virtual int RemoveCommandFilter(IOleCommandTarget pCmdTarg);
    public virtual int UpdateCompletionStatus(IVsCompletionSet pCompSet, UInt32 dwFlags);
    public virtual int UpdateTipWindow(IVsTipWindow pTipWindow, UInt32 dwFlags);
    public virtual int GetWordExtent(int iLine, int iCol, UInt32 dwFlags, TextSpan[] pSpan);
    public virtual int RestrictViewRange(int iMinLine, int iMaxLine, IVsViewRangeClient pClient);
    public virtual int ReplaceTextOnLine(int iLine, int iStartCol, int iCharsToReplace, string pszNewText, int iNewLen);
    public virtual int GetLineAndColumn(int iPos, Int32& piLine, Int32& piIndex);
    public virtual int GetNearestPosition(int iLine, int iCol, Int32& piPos, Int32& piVirtualSpaces);
    public virtual int UpdateViewFrameCaption();
    public virtual int CenterColumns(int iLine, int iLeftCol, int iColCount);
    public virtual int EnsureSpanVisible(TextSpan span);
    public virtual int PositionCaretForEditing(int iLine, int cIndentLevels);
    public virtual int GetPointOfLineColumn(int iLine, int iCol, POINT[] ppt);
    public virtual int GetLineHeight(Int32& piLineHeight);
    public virtual int HighlightMatchingBrace(UInt32 dwFlags, UInt32 cSpans, TextSpan[] rgBaseSpans);
    public virtual int SendExplicitFocus();
    public virtual int SetTopLine(int iBaseLine);
}
public enum Microsoft.VisualStudio.TextManager.Interop.VSTFF2 : Enum {
    public int value__;
    public static VSTFF2 VSTFF_NOUTF8_NOSIG;
    public static VSTFF2 VSTFF_KEEPANSI;
}
[ComVisibleAttribute("False")]
[GuidAttribute("F65478CC-96F1-4BA9-9EF9-A575ACB96031")]
[CoClassAttribute("Microsoft.VisualStudio.TextManager.Interop.VsUndoPackageClass")]
public interface Microsoft.VisualStudio.TextManager.Interop.VsUndoPackage {
}
[GuidAttribute("1D76B2E0-F11B-11D2-AFC3-00105A9991EF")]
[ClassInterfaceAttribute("0")]
public class Microsoft.VisualStudio.TextManager.Interop.VsUndoPackageClass : object {
    public virtual int OpenLinkedUndo(UInt32 dwFlags, string pszDescription);
    public virtual int CloseLinkedUndo();
    public virtual int AbortLinkedUndo();
    public virtual int IsAborted(Int32& pfAborted);
    public virtual int IsStrict(Int32& pfStrict);
    public virtual int CountOpenTransactions(Int32& pCount);
}
[ComVisibleAttribute("False")]
[GuidAttribute("A8C3D107-7EDF-4B1B-8A81-080AC91590E9")]
[CoClassAttribute("Microsoft.VisualStudio.TextManager.Interop.VsUndoUnitClass")]
public interface Microsoft.VisualStudio.TextManager.Interop.VsUndoUnit {
}
[GuidAttribute("9ADF33D9-8AAD-11D0-B606-00A0C922E851")]
[ClassInterfaceAttribute("0")]
public class Microsoft.VisualStudio.TextManager.Interop.VsUndoUnitClass : object {
    public virtual int fChangeData();
}
[ComVisibleAttribute("False")]
[GuidAttribute("978A8E17-4DF8-432A-9623-D530A26452BC")]
[CoClassAttribute("Microsoft.VisualStudio.TextManager.Interop.VsUserDataClass")]
public interface Microsoft.VisualStudio.TextManager.Interop.VsUserData {
}
[ClassInterfaceAttribute("0")]
[GuidAttribute("F5E7E718-1401-11D1-883B-0000F87579D2")]
public class Microsoft.VisualStudio.TextManager.Interop.VsUserDataClass : object {
    public virtual int GetData(Guid& riidKey, Object& pvtData);
    public virtual int SetData(Guid& riidKey, object vtData);
}
[FlagsAttribute]
public enum Microsoft.VisualStudio.TextManager.Interop.WORDEXTFLAGS : Enum {
    public int value__;
    public static WORDEXTFLAGS WORDEXT_MOVETYPE_MASK;
    public static WORDEXTFLAGS WORDEXT_CURRENT;
    public static WORDEXTFLAGS WORDEXT_PREVIOUS;
    public static WORDEXTFLAGS WORDEXT_NEXT;
    public static WORDEXTFLAGS WORDEXT_NEAREST;
    public static WORDEXTFLAGS WORDEXT_FINDWORD;
    public static WORDEXTFLAGS WORDEXT_FINDTOKEN;
    public static WORDEXTFLAGS WORDEXT_FINDEXPRESSION;
}
[ObsoleteAttribute]
public enum Microsoft.VisualStudio.UserNotifications.Interop.__VSUSERNOTIFICATIONFILTER : Enum {
    public int value__;
    public static __VSUSERNOTIFICATIONFILTER NF_IDENTIFIER;
    public static __VSUSERNOTIFICATIONFILTER NF_ALL;
    public static __VSUSERNOTIFICATIONFILTER NF_ACTIVE;
    public static __VSUSERNOTIFICATIONFILTER NF_DISMISSED;
    public static __VSUSERNOTIFICATIONFILTER NF_EXPIRED;
    public static __VSUSERNOTIFICATIONFILTER NF_CLICKED;
    public static __VSUSERNOTIFICATIONFILTER NF_READ;
    public static __VSUSERNOTIFICATIONFILTER NF_UNREAD;
    public static __VSUSERNOTIFICATIONFILTER NF_TRANSIENT;
    public static __VSUSERNOTIFICATIONFILTER NF_PERSISTED;
}
[ObsoleteAttribute]
public enum Microsoft.VisualStudio.UserNotifications.Interop.__VSUSERNOTIFICATIONSEVERITY : Enum {
    public int value__;
    public static __VSUSERNOTIFICATIONSEVERITY NS_INFORMATIVE;
    public static __VSUSERNOTIFICATIONSEVERITY NS_IMPORTANT;
    public static __VSUSERNOTIFICATIONSEVERITY NS_CRITICAL;
}
[ObsoleteAttribute]
public enum Microsoft.VisualStudio.UserNotifications.Interop.__VSUSERNOTIFICATIONSTATE : Enum {
    public int value__;
    public static __VSUSERNOTIFICATIONSTATE NS_ACTIVE;
    public static __VSUSERNOTIFICATIONSTATE NS_DISMISSED;
    public static __VSUSERNOTIFICATIONSTATE NS_EXPIRED;
    public static __VSUSERNOTIFICATIONSTATE NS_CLICKED;
    public static __VSUSERNOTIFICATIONSTATE NS_READ;
    public static __VSUSERNOTIFICATIONSTATE NS_TRANSIENT;
}
[GuidAttribute("2E1641C7-2959-4962-949C-6388375D6B29")]
[InterfaceTypeAttribute("1")]
[ObsoleteAttribute]
public interface Microsoft.VisualStudio.UserNotifications.Interop.IVsEnumUserNotifications {
    public abstract virtual int Next(UInt32 celt, IVsUserNotification[] rgelt, UInt32& pceltFetched);
    public abstract virtual int Skip(UInt32 celt);
    public abstract virtual void Reset();
    public abstract virtual void Clone(IVsEnumUserNotifications& ppEnum);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("791A7AEF-BFFD-45E8-B164-FC8CDD423D69")]
[ObsoleteAttribute]
public interface Microsoft.VisualStudio.UserNotifications.Interop.IVsUserNotification {
    [DispIdAttribute("1610678272")]
public Guid Provider { get; }
    [DispIdAttribute("1610678273")]
public string Identifier { get; }
    [DispIdAttribute("1610678274")]
public string Title { get; public set; }
    [DispIdAttribute("1610678276")]
public string Description { get; public set; }
    [DispIdAttribute("1610678278")]
[ComAliasNameAttribute("Microsoft.VisualStudio.UserNotifications.Interop.DWORD")]
public UInt32 Severity { get; }
    [DispIdAttribute("1610678279")]
public object Context { get; public set; }
    [DispIdAttribute("1610678281")]
public DateTime Creation { get; }
    [DispIdAttribute("1610678282")]
public DateTime Expiration { get; }
    [ComAliasNameAttribute("Microsoft.VisualStudio.UserNotifications.Interop.VSUSERNOTIFICATIONSTATE")]
[DispIdAttribute("1610678283")]
public UInt32 State { get; }
    public abstract virtual Guid get_Provider();
    public abstract virtual string get_Identifier();
    public abstract virtual string get_Title();
    public abstract virtual void set_Title(string value);
    public abstract virtual string get_Description();
    public abstract virtual void set_Description(string value);
    public abstract virtual UInt32 get_Severity();
    public abstract virtual object get_Context();
    public abstract virtual void set_Context(object value);
    public abstract virtual DateTime get_Creation();
    public abstract virtual DateTime get_Expiration();
    public abstract virtual UInt32 get_State();
}
[GuidAttribute("730A0F1D-66C9-4FFB-A762-EA05BAA715EB")]
[InterfaceTypeAttribute("1")]
[ObsoleteAttribute]
public interface Microsoft.VisualStudio.UserNotifications.Interop.IVsUserNotificationsManager {
    public abstract virtual IVsUserNotification AddUserNotification(Guid Provider, string Identifier, string Title, string Description, UInt32 Severity, object Context, DateTime Expiration, bool isTransient);
    public abstract virtual bool RemoveUserNotification(IVsUserNotification notification);
    public abstract virtual void PromoteUserNotification(IVsUserNotification notification, UInt32 Severity);
    public abstract virtual IVsEnumUserNotifications GetUserNotifications(Guid Provider, UInt32 filter, string Identifier);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("1A60AACF-11E6-4591-BF1C-66B0BD42D48F")]
[ObsoleteAttribute]
public interface Microsoft.VisualStudio.UserNotifications.Interop.IVsUserNotificationsProvider {
    [DispIdAttribute("1610678272")]
public Guid ID { get; }
    public abstract virtual Guid get_ID();
    public abstract virtual bool OnClick(IVsUserNotification notification);
    public abstract virtual void OnDismiss(IVsUserNotification notification);
    public abstract virtual void OnExpire(IVsUserNotification notification);
    public abstract virtual void Refresh(UInt32 LCID);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("BB699853-3885-49C2-A17F-D9E18B76782F")]
[ObsoleteAttribute]
public interface Microsoft.VisualStudio.UserNotifications.Interop.IVsUserNotificationsService {
    public abstract virtual IVsTask GetUserNotificationsManagerAsync();
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("A68E8E35-CDE2-46DD-B613-4C2844E6DB13")]
[ObsoleteAttribute]
public interface Microsoft.VisualStudio.UserNotifications.Interop.SVsUserNotificationsService {
}
[ComVisibleAttribute("False")]
[CoClassAttribute("Microsoft.VisualStudio.VSHelp.DExploreAppObjClass")]
[GuidAttribute("4A791148-19E4-11D3-B86B-00C04F79F802")]
public interface Microsoft.VisualStudio.VSHelp.DExploreAppObj {
}
[ComVisibleAttribute("False")]
[ComSourceInterfacesAttribute("Microsoft.VisualStudio.VSHelp.IVsHelpEvents")]
[GuidAttribute("4A79114D-19E4-11D3-B86B-00C04F79F802")]
[ClassInterfaceAttribute("0")]
public class Microsoft.VisualStudio.VSHelp.DExploreAppObjClass : object {
}
[GuidAttribute("4A791148-19E4-11D3-B86B-00C04F79F802")]
public interface Microsoft.VisualStudio.VSHelp.Help {
    [DispIdAttribute("21")]
public string Collection { get; }
    [DispIdAttribute("22")]
public string Filter { get; public set; }
    [DispIdAttribute("23")]
public string FilterQuery { get; }
    [DispIdAttribute("24")]
public IVsHelpOwner HelpOwner { get; public set; }
    [DispIdAttribute("25")]
public object HxSession { get; }
    [DispIdAttribute("26")]
public object Help { get; }
    [DispIdAttribute("1")]
public abstract virtual void Contents();
    [DispIdAttribute("2")]
public abstract virtual void Index();
    [DispIdAttribute("3")]
public abstract virtual void Search();
    [DispIdAttribute("4")]
public abstract virtual void IndexResults();
    [DispIdAttribute("5")]
public abstract virtual void SearchResults();
    [DispIdAttribute("6")]
public abstract virtual void DisplayTopicFromId(string bstrFile, UInt32 Id);
    [DispIdAttribute("7")]
public abstract virtual void DisplayTopicFromURL(string pszURL);
    [DispIdAttribute("8")]
public abstract virtual void DisplayTopicFromURLEx(string pszURL, IVsHelpTopicShowEvents pIVsHelpTopicShowEvents);
    [DispIdAttribute("9")]
public abstract virtual void DisplayTopicFromKeyword(string pszKeyword);
    [DispIdAttribute("10")]
public abstract virtual void DisplayTopicFromF1Keyword(string pszKeyword);
    [DispIdAttribute("11")]
public abstract virtual void DisplayTopicFrom_OLD_Help(string bstrFile, UInt32 Id);
    [DispIdAttribute("12")]
public abstract virtual void SyncContents(string bstrURL);
    [DispIdAttribute("13")]
public abstract virtual void CanSyncContents(string bstrURL);
    [DispIdAttribute("14")]
public abstract virtual string GetNextTopic(string bstrURL);
    [DispIdAttribute("15")]
public abstract virtual string GetPrevTopic(string bstrURL);
    [DispIdAttribute("16")]
public abstract virtual void FilterUI();
    [DispIdAttribute("17")]
public abstract virtual void CanShowFilterUI();
    [DispIdAttribute("18")]
public abstract virtual void Close();
    [DispIdAttribute("19")]
public abstract virtual void SyncIndex(string bstrKeyword, int fShow);
    [DispIdAttribute("20")]
public abstract virtual void SetCollection(string bstrCollection, string bstrFilter);
    [DispIdAttribute("21")]
public abstract virtual string get_Collection();
    [DispIdAttribute("22")]
public abstract virtual string get_Filter();
    [DispIdAttribute("22")]
public abstract virtual void set_Filter(string value);
    [DispIdAttribute("23")]
public abstract virtual string get_FilterQuery();
    [DispIdAttribute("24")]
public abstract virtual IVsHelpOwner get_HelpOwner();
    [DispIdAttribute("24")]
public abstract virtual void set_HelpOwner(IVsHelpOwner value);
    [DispIdAttribute("25")]
public abstract virtual object get_HxSession();
    [DispIdAttribute("26")]
public abstract virtual object get_Help();
    [DispIdAttribute("27")]
public abstract virtual object GetObject(string bstrMoniker, string bstrOptions);
}
[GuidAttribute("507E4490-5A8C-11D3-B897-00C04F79F802")]
public interface Microsoft.VisualStudio.VSHelp.IVsHelpEvents {
    public abstract virtual void OnFilterChanged(string bstrNewFilter);
    public abstract virtual void OnCollectionChanged(string bstrNewCollection, string bstrNewFilter);
}
[ComVisibleAttribute("False")]
[ComEventInterfaceAttribute("Microsoft.VisualStudio.VSHelp.IVsHelpEvents", "Microsoft.VisualStudio.VSHelp.IVsHelpEvents_EventProvider")]
public interface Microsoft.VisualStudio.VSHelp.IVsHelpEvents_Event {
    [CompilerGeneratedAttribute]
public abstract virtual void add_OnFilterChanged(IVsHelpEvents_OnFilterChangedEventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_OnFilterChanged(IVsHelpEvents_OnFilterChangedEventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_OnCollectionChanged(IVsHelpEvents_OnCollectionChangedEventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_OnCollectionChanged(IVsHelpEvents_OnCollectionChangedEventHandler value);
}
internal class Microsoft.VisualStudio.VSHelp.IVsHelpEvents_EventProvider : object {
    private IConnectionPointContainer m_ConnectionPointContainer;
    private ArrayList m_aEventSinkHelpers;
    private IConnectionPoint m_ConnectionPoint;
    public IVsHelpEvents_EventProvider(object A_1);
    private void Init();
    public sealed virtual void add_OnFilterChanged(IVsHelpEvents_OnFilterChangedEventHandler value);
    public sealed virtual void remove_OnFilterChanged(IVsHelpEvents_OnFilterChangedEventHandler value);
    public sealed virtual void add_OnCollectionChanged(IVsHelpEvents_OnCollectionChangedEventHandler value);
    public sealed virtual void remove_OnCollectionChanged(IVsHelpEvents_OnCollectionChangedEventHandler value);
    private void AddOnCollectionChanged(IVsHelpEvents_OnCollectionChangedEventHandler A_1);
    private void RemoveOnCollectionChanged(IVsHelpEvents_OnCollectionChangedEventHandler A_1);
    private void AddOnFilterChanged(IVsHelpEvents_OnFilterChangedEventHandler A_1);
    private void RemoveOnFilterChanged(IVsHelpEvents_OnFilterChangedEventHandler A_1);
    protected virtual override void Finalize();
    public sealed virtual void Dispose();
    private void Dispose(bool disposing);
}
[ComVisibleAttribute("False")]
public class Microsoft.VisualStudio.VSHelp.IVsHelpEvents_OnCollectionChangedEventHandler : MulticastDelegate {
    public IVsHelpEvents_OnCollectionChangedEventHandler(object object, IntPtr method);
    public virtual void Invoke(string bstrNewCollection, string bstrNewFilter);
    public virtual IAsyncResult BeginInvoke(string bstrNewCollection, string bstrNewFilter, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
[ComVisibleAttribute("False")]
public class Microsoft.VisualStudio.VSHelp.IVsHelpEvents_OnFilterChangedEventHandler : MulticastDelegate {
    public IVsHelpEvents_OnFilterChangedEventHandler(object object, IntPtr method);
    public virtual void Invoke(string bstrNewFilter);
    public virtual IAsyncResult BeginInvoke(string bstrNewFilter, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
[ClassInterfaceAttribute("0")]
internal class Microsoft.VisualStudio.VSHelp.IVsHelpEvents_SinkHelper : object {
    public IVsHelpEvents_OnCollectionChangedEventHandler m_OnCollectionChangedDelegate;
    public IVsHelpEvents_OnFilterChangedEventHandler m_OnFilterChangedDelegate;
    public int m_dwCookie;
    public sealed virtual void OnCollectionChanged(string A_1, string A_2);
    public sealed virtual void OnFilterChanged(string A_1);
}
[GuidAttribute("B9B0983A-364C-4866-873F-D5ED190138FB")]
public interface Microsoft.VisualStudio.VSHelp.IVsHelpOwner {
    [DispIdAttribute("10")]
public object AutomationObject { get; }
    [DispIdAttribute("1")]
public abstract virtual void BringHelpToTop(IntPtr hwndHelpApp);
    [DispIdAttribute("10")]
public abstract virtual object get_AutomationObject();
}
[GuidAttribute("D1AAC64A-6A25-4274-B2C6-BC3B840B6E54")]
public interface Microsoft.VisualStudio.VSHelp.IVsHelpTopicShowEvents {
    public abstract virtual void OnBeforeTopicShow(string bstrURL, object pWB);
    public abstract virtual void OnTopicShowComplete(string bstrURL, object pWB);
}
[ComVisibleAttribute("False")]
[GuidAttribute("4A791148-19E4-11d3-B86B-00C04F79F802")]
public interface Microsoft.VisualStudio.VSHelp.SVsHelp {
}
public enum Microsoft.VisualStudio.VSHelp80.__vsAskQuestionFlags : Enum {
    public int value__;
    public static __vsAskQuestionFlags vsAskQuestionFlagsAskNew;
    public static __vsAskQuestionFlags vsAskQuestionFlagsCheckStatus;
    public static __vsAskQuestionFlags vsAskQuestionFlagsSendFeedback;
}
public enum Microsoft.VisualStudio.VSHelp80.__vsHelpDisplayUrlFlags : Enum {
    public int value__;
    public static __vsHelpDisplayUrlFlags vsHelpDisplayUrlFlagsNone;
    public static __vsHelpDisplayUrlFlags vsHelpDisplayUrlFlagsHighlightTerm;
    public static __vsHelpDisplayUrlFlags vsHelpDisplayUrlFlagsOpenNewWindow;
    public static __vsHelpDisplayUrlFlags vsHelpDisplayUrlFlagsGuidLocal;
    public static __vsHelpDisplayUrlFlags vsHelpDisplayUrlFlagsGuidOnline;
    public static __vsHelpDisplayUrlFlags vsHelpDisplayUrlFlagsGuidLocale;
    public static __vsHelpDisplayUrlFlags vsHelpDisplayUrlFlagsGuidFailover;
    public static __vsHelpDisplayUrlFlags vsHelpDisplayUrlFlagsNamedUrl;
    public static __vsHelpDisplayUrlFlags vsHelpDisplayUrlFlagsNoHistory;
    public static __vsHelpDisplayUrlFlags vsHelpDisplayUrlFlagsNoHistoryThisPage;
}
public enum Microsoft.VisualStudio.VSHelp80.__vsHelpUrlFromTopicIDFlags : Enum {
    public int value__;
    public static __vsHelpUrlFromTopicIDFlags HUFTID_Default;
    public static __vsHelpUrlFromTopicIDFlags HUFTID_Local;
    public static __vsHelpUrlFromTopicIDFlags HUFTID_Online;
    public static __vsHelpUrlFromTopicIDFlags HUFTID_Locale;
}
public enum Microsoft.VisualStudio.VSHelp80.__vsSearchFlags : Enum {
    public int value__;
    public static __vsSearchFlags vsSearchFlagsNone;
    public static __vsSearchFlags vsSearchFlagsExecuteSearch;
    public static __vsSearchFlags vsSearchFlagsAddToExistingQueryString;
    public static __vsSearchFlags vsSearchFlagsFilterTransformSpecified;
}
[GuidAttribute("78413D2D-0492-4A9B-AB25-730633679977")]
public interface Microsoft.VisualStudio.VSHelp80.Help2 {
    [DispIdAttribute("21")]
public string Collection { get; }
    [DispIdAttribute("22")]
public string Filter { get; public set; }
    [DispIdAttribute("23")]
public string FilterQuery { get; }
    [DispIdAttribute("24")]
public IVsHelpOwner HelpOwner { get; public set; }
    [DispIdAttribute("25")]
public object HxSession { get; }
    [DispIdAttribute("26")]
public object Help { get; }
    [DispIdAttribute("1")]
public abstract virtual void Contents();
    [DispIdAttribute("2")]
public abstract virtual void Index();
    [DispIdAttribute("3")]
public abstract virtual void Search();
    [DispIdAttribute("4")]
public abstract virtual void IndexResults();
    [DispIdAttribute("5")]
public abstract virtual void SearchResults();
    [DispIdAttribute("6")]
public abstract virtual void DisplayTopicFromId(string bstrFile, UInt32 Id);
    [DispIdAttribute("7")]
public abstract virtual void DisplayTopicFromURL(string pszURL);
    [DispIdAttribute("8")]
public abstract virtual void DisplayTopicFromURLEx(string pszURL, IVsHelpTopicShowEvents pIVsHelpTopicShowEvents);
    [DispIdAttribute("9")]
public abstract virtual void DisplayTopicFromKeyword(string pszKeyword);
    [DispIdAttribute("10")]
public abstract virtual void DisplayTopicFromF1Keyword(string pszKeyword);
    [DispIdAttribute("11")]
public abstract virtual void DisplayTopicFrom_OLD_Help(string bstrFile, UInt32 Id);
    [DispIdAttribute("12")]
public abstract virtual void SyncContents(string bstrURL);
    [DispIdAttribute("13")]
public abstract virtual void CanSyncContents(string bstrURL);
    [DispIdAttribute("14")]
public abstract virtual string GetNextTopic(string bstrURL);
    [DispIdAttribute("15")]
public abstract virtual string GetPrevTopic(string bstrURL);
    [DispIdAttribute("16")]
public abstract virtual void FilterUI();
    [DispIdAttribute("17")]
public abstract virtual void CanShowFilterUI();
    [DispIdAttribute("18")]
public abstract virtual void Close();
    [DispIdAttribute("19")]
public abstract virtual void SyncIndex(string bstrKeyword, int fShow);
    [DispIdAttribute("20")]
public abstract virtual void SetCollection(string bstrCollection, string bstrFilter);
    [DispIdAttribute("21")]
public abstract virtual string get_Collection();
    [DispIdAttribute("22")]
public abstract virtual string get_Filter();
    [DispIdAttribute("22")]
public abstract virtual void set_Filter(string value);
    [DispIdAttribute("23")]
public abstract virtual string get_FilterQuery();
    [DispIdAttribute("24")]
public abstract virtual IVsHelpOwner get_HelpOwner();
    [DispIdAttribute("24")]
public abstract virtual void set_HelpOwner(IVsHelpOwner value);
    [DispIdAttribute("25")]
public abstract virtual object get_HxSession();
    [DispIdAttribute("26")]
public abstract virtual object get_Help();
    [DispIdAttribute("27")]
public abstract virtual object GetObject(string bstrMoniker, string bstrOptions);
    [DispIdAttribute("28")]
public abstract virtual void SearchEx(string bstrSearchFilterTransform, string pszSearchTerm, UInt32 vssfSearchFlags);
    [DispIdAttribute("29")]
public abstract virtual void HowDoI();
    [DispIdAttribute("30")]
public abstract virtual void Favorites();
    [DispIdAttribute("31")]
public abstract virtual void AskAQuestion(UInt32 askQuestionFlags);
    [DispIdAttribute("32")]
public abstract virtual void DisplayTopicFromURLEx2(string bstrURL, UInt32 displayUrlFlags, string bstrParam);
    [DispIdAttribute("33")]
public abstract virtual void InitializeSettingsToken(string bstrSettingsToken);
}
[GuidAttribute("D1333514-2B6B-4479-8135-A39E286E146D")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.VSHelp80.IVsHelpFavorites {
    public abstract virtual void ShowFavorites();
    public abstract virtual void AddFavoriteTopic(string strTitle, string strUrl, string topicKeyword, string strTopicLocale);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("4A81432B-BFCC-4832-9BE9-15977DA82072")]
public interface Microsoft.VisualStudio.VSHelp80.SVsHelpFavorites {
}
public abstract class Microsoft.VisualStudio.VSHelp80.vsHelpSearchFilterTransforms : object {
    public static string vsHelpSearchFilterTransformsHelp;
    public static string vsHelpSearchFilterTransformsControls;
    public static string vsHelpSearchFilterTransformsSamples;
    public static string vsHelpSearchFilterTransformsSnippets;
    public static string vsHelpSearchFilterTransformsStarterKits;
    public static string vsHelpSearchFilterTransformsAddins;
    public static string vsHelpSearchFilterTransformsUnfiltered;
}
public enum Microsoft.VisualStudio.WCFReference.Interop.CollectionCategory : Enum {
    public int value__;
    public static CollectionCategory CC_Unknown;
    public static CollectionCategory CC_List;
    public static CollectionCategory CC_Dictionary;
}
public enum Microsoft.VisualStudio.WCFReference.Interop.DiscoveryProtocol : Enum {
    public int value__;
    public static DiscoveryProtocol DP_DiscoveryClientProtocol;
    public static DiscoveryProtocol DP_MetadataExchangeProtocol;
    public static DiscoveryProtocol DP_DiscoveryDataServiceProtocol;
}
public enum Microsoft.VisualStudio.WCFReference.Interop.DiscoverySessionProtocolPriority : Enum {
    public int value__;
    public static DiscoverySessionProtocolPriority DSPP_NoPriority;
    public static DiscoverySessionProtocolPriority DSPP_DiscoveryProtocolFirst;
    public static DiscoverySessionProtocolPriority DSPP_MetadataExchangeFirst;
}
[GuidAttribute("6E1073E5-A112-441A-8386-232CECC0C29B")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.WCFReference.Interop.IDiscoveryResult3 {
    public abstract virtual DiscoveryProtocol GetProtocol();
}
[GuidAttribute("182B5EB4-9A58-47B7-A3FE-AC7ED8B891FF")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.WCFReference.Interop.IDiscoverySession2 {
    public abstract virtual void DiscoverUrlWithMetadataExchange(string url, DiscoverySessionProtocolPriority protocolPriority, int resolveAllFiles, string toolConfigurationPath, IDiscoveryResult& ppDiscoverResult);
    public abstract virtual void DiscoverUrlAsyncWithMetadataExchange(string url, DiscoverySessionProtocolPriority protocolPriority, int resolveAllFiles, string toolConfigurationPath, IDiscoverUrlCallBack pDiscoverUrlCallBack, Int32& pCookieID);
}
[GuidAttribute("A8F120C5-E7DF-465A-A7FB-711805281A3B")]
public interface Microsoft.VisualStudio.WCFReference.Interop.IEnumWCFReferenceContracts {
    public abstract virtual int Next(UInt32 celt, IVsWCFReferenceContract[] rgelt, UInt32& pceltFetched);
    public abstract virtual void Skip(UInt32 celt);
    public abstract virtual void Reset();
    public abstract virtual void Clone(IEnumWCFReferenceContracts& ppenum);
}
[GuidAttribute("0D66F264-C498-44C6-B08A-1A9EF57DDD63")]
public interface Microsoft.VisualStudio.WCFReference.Interop.IEnumWCFReferenceEndpoints {
    public abstract virtual int Next(UInt32 celt, IVsWCFReferenceEndpoint[] rgelt, UInt32& pceltFetched);
    public abstract virtual void Skip(UInt32 celt);
    public abstract virtual void Reset();
    public abstract virtual void Clone(IEnumWCFReferenceEndpoints& ppenum);
}
[GuidAttribute("603A2AEA-C925-4A8C-A273-65B3B81CD43A")]
public interface Microsoft.VisualStudio.WCFReference.Interop.IEnumWCFReferenceGroupMetadataItems {
    public abstract virtual int Next(UInt32 celt, IVsWCFReferenceGroupMetadataItem[] rgelt, UInt32& pceltFetched);
    public abstract virtual void Skip(UInt32 celt);
    public abstract virtual void Reset();
    public abstract virtual void Clone(IEnumWCFReferenceGroupMetadataItems& ppenum);
}
[GuidAttribute("E316FF6D-CA00-49DD-969F-441399132AC7")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.WCFReference.Interop.IReferenceInfo2 {
    public abstract virtual string GetDefaultFileName();
    public abstract virtual Byte[] GetDocumentContents();
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("46E27779-A3E6-484B-A0EE-15795B173AE6")]
public interface Microsoft.VisualStudio.WCFReference.Interop.IVsAddWebReferenceDlg3 {
    public abstract virtual void ShowAddWebReferenceDialog(IVsHierarchy pProject, IDiscoverySession pDiscoverySession, ServiceReferenceType referenceTypesAllowed, string pszDialogName, IVsWCFReferenceGroup pExistingReferenceGroup, string pszReferenceConfigContents, IVsAddWebReferenceResult& ppReferenceResult, Int32& pfCancelled);
    public abstract virtual void ShowDiscoveredServicesInCurrentDialog(int cItems, String[] ServiceUrls, String[] ServiceDisplayNames, string pszStatusText, string pszErrorText);
}
[GuidAttribute("4B85C5EF-9089-4E4C-A310-325BF87BAF23")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.WCFReference.Interop.IVsAddWebReferenceResult {
    public abstract virtual string GetReferenceUrl();
    public abstract virtual string GetReferenceNamespace();
    public abstract virtual string GetReferenceName();
    public abstract virtual ServiceReferenceType GetReferenceType();
    public abstract virtual object Save();
    public abstract virtual object GetDetail();
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("C5E5042E-F39A-4C27-AE06-1B1715EA7223")]
public interface Microsoft.VisualStudio.WCFReference.Interop.IVsASMXMetadataStorageProvider {
    public abstract virtual string AddWebReference(string pszUrl, string pszSuggestName, IDiscoveryResult pDiscoveryResult);
    public abstract virtual int IsValidNewASMXReferenceName(string pszNewName);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("4C5EE29B-8BE6-4A9B-910B-F57EF6A36D6E")]
public interface Microsoft.VisualStudio.WCFReference.Interop.IVsEnumServiceReferenceMetadataStorages {
    public abstract virtual int Next(UInt32 celt, IVsServiceReferenceMetadataStorage[] rgelt, UInt32& pceltFetched);
    public abstract virtual void Skip(UInt32 celt);
    public abstract virtual void Reset();
    public abstract virtual void Clone(IVsEnumServiceReferenceMetadataStorages& ppenum);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("E9532448-D152-4AD4-BE45-8A8A9CBFE14D")]
public interface Microsoft.VisualStudio.WCFReference.Interop.IVsEnumWCFMetadataStorages {
    public abstract virtual int Next(UInt32 celt, IVsWCFMetadataStorage[] rgelt, UInt32& pceltFetched);
    public abstract virtual void Skip(UInt32 celt);
    public abstract virtual void Reset();
    public abstract virtual void Clone(IVsEnumWCFMetadataStorages& ppenum);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("0743635E-4F48-457C-9323-0AF36982FA28")]
public interface Microsoft.VisualStudio.WCFReference.Interop.IVsServiceReferenceMetadataStorage {
    public abstract virtual string GetStorageType();
    public abstract virtual string GetName();
    public abstract virtual void SetName(string pszName);
    public abstract virtual string GetNamespace();
    public abstract virtual void SetNamespace(string pszNamespace);
    public abstract virtual void BeginUpdate();
    public abstract virtual void EndUpdate();
    public abstract virtual void RunProxyGenerator();
    public abstract virtual Byte[] LoadMapFileData();
    public abstract virtual void SaveMapFileData(Byte[] content);
    public abstract virtual string GetMapFilePath();
    public abstract virtual Byte[] LoadMetadataFile(string pszMetadataFileName);
    public abstract virtual void SaveMetadataFile(string pszMetadataFileName, Byte[] content);
    public abstract virtual string CreateMetadataFile(string pszMetadataSuggestedName, Byte[] content);
    public abstract virtual void DeleteMetadataFile(string pszMetadataFileName);
    public abstract virtual void AdviseServiceReferenceMetadataStorageEvents(IVsServiceReferenceMetadataStorageEvents pSink, UInt32& pdwCookie);
    public abstract virtual void UnadviseServiceReferenceMetadataStorageEvents(UInt32 dwCookie);
    public abstract virtual void Remove();
    public abstract virtual UInt32 ProjectItemId();
    public abstract virtual object FileCodeModel();
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("C6DF0D84-83E9-4E07-BA41-903A03763C5B")]
public interface Microsoft.VisualStudio.WCFReference.Interop.IVsServiceReferenceMetadataStorageEvents {
    public abstract virtual void OnMapFileUpdated();
    public abstract virtual void OnMetadataFileAdded(string pszFileName);
    public abstract virtual void OnMetadataFileDeleted(string pszFileName);
    public abstract virtual void OnMetadataFileRenamed(string pszFileNameOld, string pszFileNameNew);
    public abstract virtual void OnMetadataFileUpdated(string pszFileName);
}
[GuidAttribute("6D076165-1AFF-4D68-9BD1-FA09ADF57D34")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.WCFReference.Interop.IVsServiceReferenceMetadataStorageProvider {
    public abstract virtual int IsStorageTypeSupported(string pszStorageType);
    public abstract virtual IVsEnumServiceReferenceMetadataStorages GetMetadataStorages();
    public abstract virtual void CreateMetadataStorage(string pszStorageType, string pszNamespace, string pszReferenceName, IVsServiceReferenceMetadataStorage& pServiceReferenceMetadataStorage, StorageNameValidationState& pNameValidationState);
    public abstract virtual IVsServiceReferenceMetadataStorage GetMetadataStorageFromMapFile(string pszMapFilePath);
    public abstract virtual void AdviseMetadataStorageProviderEvents(IVsServiceReferenceMetadataStorageProviderEvents pSink, UInt32& pdwCookie);
    public abstract virtual void UnadviseMetadataStorageProviderEvents(UInt32 dwCookie);
    public abstract virtual void IsValidNewServiceReferenceName(string pszStorageType, string pszNamespace, string pszReferenceName, SByte& pbValid, StorageNameValidationState& pValidationState, String& pbstrMessage);
    public abstract virtual void MakeValidServiceReferenceName(string pszStorageType, string pszNamespace, string pszReferenceName, String& pbstrSuggestedNamespace, String& pbstrSuggestedReferenceName);
}
[GuidAttribute("DBFECCE0-41A5-41A6-AD3B-67286C457A4F")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.WCFReference.Interop.IVsServiceReferenceMetadataStorageProviderEvents {
    public abstract virtual void OnAdded(IVsServiceReferenceMetadataStorage pIVsServiceReferenceMetadataStorage);
    public abstract virtual void OnRemoving(string pszStorageType, string pszOldSvcmapFilePath);
    public abstract virtual void OnRemoved(string pszStorageType, string pszOldSvcmapFilePath);
    public abstract virtual void OnRenamed(string pszStorageType, string pszOldSvcmapFilePath, string pszNewSvcmapFilePath);
    public abstract virtual void OnMoved(string pszStorageType, string pszOldSvcmapFilePath, string pszNewSvcmapFilePath);
}
[GuidAttribute("70D6D8A3-1D8D-44E8-8CD8-64B047E9F309")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.WCFReference.Interop.IVsWCFAsyncResult {
    public abstract virtual int IsCompleted();
    public abstract virtual int IsCancelled();
    public abstract virtual object GetCustomState();
    public abstract virtual void GetMethodResult();
    public abstract virtual void Cancel();
}
[GuidAttribute("183F0821-1F02-4E07-901A-F4F19C162935")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.WCFReference.Interop.IVsWCFCompletionCallback {
    public abstract virtual void OnFinished(IVsWCFAsyncResult pResult);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("8D095035-AB0C-4363-891A-8C79F5CDA259")]
public interface Microsoft.VisualStudio.WCFReference.Interop.IVsWCFMetadataStorage {
    public abstract virtual string GetName();
    public abstract virtual void SetName(string pszName);
    public abstract virtual string GetNamespace();
    public abstract virtual void SetNamespace(string pszNamespace);
    public abstract virtual void BeginUpdate();
    public abstract virtual void EndUpdate();
    public abstract virtual void RunProxyGenerator();
    public abstract virtual Byte[] LoadMapFileData();
    public abstract virtual void SaveMapFileData(Byte[] content);
    public abstract virtual string GetMapFilePath();
    public abstract virtual Byte[] LoadMetadataFile(string pszMetadataFileName);
    public abstract virtual void SaveMetadataFile(string pszMetadataFileName, Byte[] content);
    public abstract virtual string CreateMetadataFile(string pszMetadataSuggestedName, Byte[] content);
    public abstract virtual void DeleteMetadataFile(string pszMetadataFileName);
    public abstract virtual void AdviseWCFMetadataStorageEvents(IVsWCFMetadataStorageEvents pSink, UInt32& pdwCookie);
    public abstract virtual void UnadviseWCFMetadataStorageEvents(UInt32 dwCookie);
    public abstract virtual void Remove();
    public abstract virtual UInt32 ProjectItemId();
    public abstract virtual object FileCodeModel();
}
[GuidAttribute("77FDED51-E1EE-42B4-9E6C-BC892487D0AB")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.WCFReference.Interop.IVsWCFMetadataStorageEvents {
    public abstract virtual void OnMapFileUpdated();
    public abstract virtual void OnMetadataFileAdded(string pszFileName);
    public abstract virtual void OnMetadataFileDeleted(string pszFileName);
    public abstract virtual void OnMetadataFileRenamed(string pszFileNameOld, string pszFileNameNew);
    public abstract virtual void OnMetadataFileUpdated(string pszFileName);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("F71D2B05-680F-423B-B00F-52A2944AC45C")]
public interface Microsoft.VisualStudio.WCFReference.Interop.IVsWCFMetadataStorageProvider {
    public abstract virtual IVsEnumWCFMetadataStorages GetStorages();
    public abstract virtual void CreateStorage(string pszNamespace, string pszReferenceName, IVsWCFMetadataStorage& pWCFMetadataStorage, StorageNameValidationState& pNameValidationState);
    public abstract virtual IVsWCFMetadataStorage GetStorageFromMapFile(string pszMapFilePath);
    public abstract virtual void AdviseWCFMetadataStorageProviderEvents(IVsWCFMetadataStorageProviderEvents pSink, UInt32& pdwCookie);
    public abstract virtual void UnadviseWCFMetadataStorageProviderEvents(UInt32 dwCookie);
    public abstract virtual void IsValidNewReferenceName(string pszNamespace, string pszReferenceName, SByte& pbValid, StorageNameValidationState& pValidationState, String& pbstrMessage);
    public abstract virtual void MakeValidReferenceName(string pszNamespace, string pszReferenceName, String& pbstrSuggestedNamespace, String& pbstrSuggestedReferenceName);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("610DFEB0-5C2B-46C2-BB44-1DE7DC42D409")]
public interface Microsoft.VisualStudio.WCFReference.Interop.IVsWCFMetadataStorageProviderEvents {
    public abstract virtual void OnAdded(IVsWCFMetadataStorage pIVsWCFMetadataStorage);
    public abstract virtual void OnRemoving(string pszOldSvcmapFilePath);
    public abstract virtual void OnRemoved(string pszOldSvcmapFilePath);
    public abstract virtual void OnRenamed(string pszOldSvcmapFilePath, string pszNewSvcmapFilePath);
    public abstract virtual void OnMoved(string pszOldSvcmapFilePath, string pszNewSvcmapFilePath);
}
[GuidAttribute("5E1F02CC-7A5F-4DB0-8D55-A05CC0A4AA56")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.WCFReference.Interop.IVsWCFObject {
    public abstract virtual int IsValid();
    public abstract virtual void Reload();
}
[GuidAttribute("0ED7423C-615C-47EB-931A-8E7D3F45DDCD")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.WCFReference.Interop.IVsWCFReferenceContract {
    public abstract virtual IVsWCFReferenceGroup GetReferenceGroup();
    public abstract virtual string GetName();
    public abstract virtual string GetTypeName();
    public abstract virtual string GetTargetNamespace();
    public abstract virtual string GetPortTypeName();
    public abstract virtual IEnumWCFReferenceEndpoints GetReferenceEndpointEnumerator();
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("EFD57B55-A7DA-4C65-A6DF-90B3B656D749")]
public interface Microsoft.VisualStudio.WCFReference.Interop.IVsWCFReferenceEndpoint {
    public abstract virtual string GetName();
    public abstract virtual string GetContract();
    public abstract virtual string GetAddress();
    public abstract virtual string GetBinding();
    public abstract virtual string GetBindingConfiguration();
    public abstract virtual string GetBehaviorConfiguration();
}
[GuidAttribute("729D5091-E77F-4D0B-B03A-2310AD58DDC2")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.WCFReference.Interop.IVsWCFReferenceEvents {
    public abstract virtual void OnReferenceGroupCollectionChanging();
    public abstract virtual void OnReferenceGroupCollectionChanged();
    public abstract virtual void OnMetadataChanging(IVsWCFReferenceGroup pReferenceGroup);
    public abstract virtual void OnMetadataChanged(IVsWCFReferenceGroup pReferenceGroup);
    public abstract virtual void OnReferenceGroupPropertiesChanging(IVsWCFReferenceGroup pReferenceGroup);
    public abstract virtual void OnReferenceGroupPropertiesChanged(IVsWCFReferenceGroup pReferenceGroup);
    public abstract virtual void OnConfigurationChanged();
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("806CFC9A-2476-4D28-A5B2-C9EBC617B24E")]
public interface Microsoft.VisualStudio.WCFReference.Interop.IVsWCFReferenceGroup {
    public abstract virtual int IsValid();
    public abstract virtual void Reload();
    public abstract virtual string GetID();
    public abstract virtual IVsWCFReferenceGroupOptions GetOptions();
    public abstract virtual void SetOptions(IVsWCFReferenceGroupOptions pOptions);
    public abstract virtual IVsWCFReferenceGroupCollection GetCollection();
    public abstract virtual void AddReference(IDiscoverySession pDiscoverySession, string pszUrl);
    public abstract virtual void AsyncAddReference(IDiscoverySession pDiscoverySession, string pszUrl, IVsWCFCompletionCallback pCallback, object punknownCustomState, IVsWCFAsyncResult& ppResult);
    public abstract virtual void Update(IDiscoverySession pDiscoverySession);
    public abstract virtual void AsyncUpdate(IDiscoverySession pDiscoverySession, IVsWCFCompletionCallback pCallback, object punknownCustomState, IVsWCFAsyncResult& ppResult);
    public abstract virtual void ShowOptionsDialog();
    public abstract virtual string GetName();
    public abstract virtual void SetName(string pszName);
    public abstract virtual string GetNamespace();
    public abstract virtual void SetNamespace(string pszNamespace);
    public abstract virtual string GetProxyNamespace();
    public abstract virtual object GetMapFileProjectItem();
    public abstract virtual object GetFileCodeModel();
    public abstract virtual IEnumWCFReferenceGroupMetadataItems GetMetadataItemsEnumerator();
    public abstract virtual Byte[] GetExtensionData(string name);
    public abstract virtual void SetExtensionData(string name, Byte[] content);
    public abstract virtual IEnumWCFReferenceContracts GetContractsEnumerator();
    public abstract virtual int GetReferenceCount();
    public abstract virtual string GetReferenceUrl(int index);
    public abstract virtual void SetReferenceUrl(int index, string pszReferenceUrl);
    public abstract virtual void DeleteReference(int index);
    public abstract virtual void UpdateConfiguration();
    public abstract virtual void BeginBatch();
    public abstract virtual void EndBatch();
}
[GuidAttribute("343173D2-F910-4C03-930D-16AB1568431B")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.WCFReference.Interop.IVsWCFReferenceGroupCollection {
    public abstract virtual int IsValid();
    public abstract virtual void Reload();
    public abstract virtual IVsHierarchy ContainingProject();
    public abstract virtual IVsWCFReferenceGroup Add(string pszNamespace, string pszName);
    public abstract virtual void UpdateAll(IDiscoverySession pDiscoverySession);
    public abstract virtual int Count();
    public abstract virtual IVsWCFReferenceGroup Item(int index);
    public abstract virtual void Remove(IVsWCFReferenceGroup pWCFReferenceGroup);
    public abstract virtual void RemoveAt(int index);
    public abstract virtual IVsWCFReferenceGroup GetReferenceGroupByName(string pszNamespace, string pszName);
    public abstract virtual IVsWCFReferenceGroup GetReferenceGroupFromMapFile(string pszMapFilePath);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("8167CA28-D8BC-4537-9FF8-D237DD447391")]
public interface Microsoft.VisualStudio.WCFReference.Interop.IVsWCFReferenceGroupMetadataItem {
    public abstract virtual string GetSourceUrl();
    public abstract virtual string GetTargetNamespace();
    public abstract virtual Byte[] GetContent();
    public abstract virtual DiscoveryNodeType GetNodeType();
    public abstract virtual string GetFileName();
}
[GuidAttribute("3CFCB0C9-5A1C-451A-9CCF-CAE41C3A5344")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.WCFReference.Interop.IVsWCFReferenceGroupOptions {
    public abstract virtual int GetGenerateInternalTypes();
    public abstract virtual void SetGenerateInternalTypes(int fGenerateInternalTypes);
    public abstract virtual int GetGenerateAsynchronousMethods();
    public abstract virtual void SetGenerateAsynchronousMethods(int bGenerateAsynchronousMethods);
    public abstract virtual int GetGenerateSerializableTypes();
    public abstract virtual void SetGenerateSerializableTypes(int bGenerateSerializableTypes);
    public abstract virtual ProxySerializerType GetSerializer();
    public abstract virtual void SetSerializer(ProxySerializerType ProxySerializerType);
    public abstract virtual int GetImportXmlTypes();
    public abstract virtual void SetImportXmlTypes(int bImportXmlTypes);
    public abstract virtual int GetEnableDataBinding();
    public abstract virtual void SetEnableDataBinding(int bEnableDataBinding);
    public abstract virtual int GetGenerateMessageContracts();
    public abstract virtual void SetGenerateMessageContracts(int bGenerateMessageContracts);
    public abstract virtual int GetReferenceAllAssemblies();
    public abstract virtual void SetReferenceAllAssemblies(int bReferenceAllAssemblies);
    public abstract virtual int GetReferencedAssembliesCount();
    public abstract virtual void GetReferencedAssemblies(int cItems, String[] rgbstrReferencedAssemblies);
    public abstract virtual void SetReferencedAssemblies(int cItems, String[] lpstrReferencedAssemblies);
    public abstract virtual int GetCollectionMappingsCount(CollectionCategory category);
    public abstract virtual void GetCollectionMappings(CollectionCategory category, int cItems, String[] rgbstrCollectionMappings);
    public abstract virtual void SetCollectionMappings(CollectionCategory category, int cItems, String[] lpstrCollectionMappings);
    public abstract virtual int GetExcludedTypesCount();
    public abstract virtual void GetExcludedTypes(int cItems, String[] rgbstrExcludedTypes);
    public abstract virtual void SetExcludedTypes(int cItems, String[] lpstrExcludedTypes);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("2349F2F8-D2D5-4268-898C-35F1F013426D")]
public interface Microsoft.VisualStudio.WCFReference.Interop.IVsWCFReferenceManager {
    public abstract virtual IVsWCFReferenceGroupCollection GetReferenceGroupCollection();
    public abstract virtual IEnumWCFReferenceEndpoints GetReferenceEndpointEnumerator();
    public abstract virtual void AdviseWCFReferenceEvents(IVsWCFReferenceEvents pSink, UInt32& pCookie);
    public abstract virtual void UnadviseWCFReferenceEvents(UInt32 cookie);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("2FE19F72-EDD1-4FA4-9F36-A90A52ED166A")]
public interface Microsoft.VisualStudio.WCFReference.Interop.IVsWCFReferenceManagerFactory {
    public abstract virtual IVsWCFReferenceManager GetReferenceManager(IVsHierarchy pHierProject);
    public abstract virtual int IsReferenceManagerSupported(IVsHierarchy pHierProject);
}
public enum Microsoft.VisualStudio.WCFReference.Interop.ProxySerializerType : Enum {
    public int value__;
    public static ProxySerializerType PST_Auto;
    public static ProxySerializerType PST_DataContractSerializer;
    public static ProxySerializerType PST_XmlSerializer;
}
public enum Microsoft.VisualStudio.WCFReference.Interop.ServiceReferenceType : Enum {
    public int value__;
    public static ServiceReferenceType SRT_ASMXReference;
    public static ServiceReferenceType SRT_WCFReference;
}
public enum Microsoft.VisualStudio.WCFReference.Interop.StorageNameValidationState : Enum {
    public int value__;
    public static StorageNameValidationState SNVS_NewNamespace;
    public static StorageNameValidationState SNVS_InvalidNamespace;
    public static StorageNameValidationState SNVS_UnsupportedNamespace;
    public static StorageNameValidationState SNVS_ExistingNamespace;
    public static StorageNameValidationState SNVS_InvalidReferenceName;
    public static StorageNameValidationState SNVS_ReferenceNameConflicts;
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("32D47224-21A6-4D8F-9223-C91F0D69C501")]
public interface Microsoft.VisualStudio.WCFReference.Interop.SVsAddWebReferenceDlg3 {
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("DDD04E59-6B86-4A73-8BC7-3FF5D7B1111C")]
public interface Microsoft.VisualStudio.WCFReference.Interop.SVsWCFReferenceManagerFactory {
}
public class MSXML._xml_error : ValueType {
    public UInt32 _nLine;
    public string _pchBuf;
    public UInt32 _cchBuf;
    public UInt32 _ich;
    public string _pszFound;
    public string _pszExpected;
    public UInt32 _reserved1;
    public UInt32 _reserved2;
}
[GuidAttribute("2933BF81-7B36-11D2-B20E-00C04F983E60")]
[CoClassAttribute("MSXML.DOMDocumentClass")]
public interface MSXML.DOMDocument {
}
[GuidAttribute("2933BF90-7B36-11D2-B20E-00C04F983E60")]
[ComSourceInterfacesAttribute("MSXML.XMLDOMDocumentEvents")]
[ClassInterfaceAttribute("0")]
public class MSXML.DOMDocumentClass : object {
}
[GuidAttribute("2933BF81-7B36-11D2-B20E-00C04F983E60")]
[CoClassAttribute("MSXML.DOMFreeThreadedDocumentClass")]
public interface MSXML.DOMFreeThreadedDocument {
}
[ClassInterfaceAttribute("0")]
[GuidAttribute("2933BF91-7B36-11D2-B20E-00C04F983E60")]
[ComSourceInterfacesAttribute("MSXML.XMLDOMDocumentEvents")]
public class MSXML.DOMFreeThreadedDocumentClass : object {
}
public enum MSXML.DOMNodeType : Enum {
    public int value__;
    public static DOMNodeType NODE_INVALID;
    public static DOMNodeType NODE_ELEMENT;
    public static DOMNodeType NODE_ATTRIBUTE;
    public static DOMNodeType NODE_TEXT;
    public static DOMNodeType NODE_CDATA_SECTION;
    public static DOMNodeType NODE_ENTITY_REFERENCE;
    public static DOMNodeType NODE_ENTITY;
    public static DOMNodeType NODE_PROCESSING_INSTRUCTION;
    public static DOMNodeType NODE_COMMENT;
    public static DOMNodeType NODE_DOCUMENT;
    public static DOMNodeType NODE_DOCUMENT_TYPE;
    public static DOMNodeType NODE_DOCUMENT_FRAGMENT;
    public static DOMNodeType NODE_NOTATION;
}
[GuidAttribute("D4D4A0FC-3B73-11D1-B2B4-00C04FB92596")]
public interface MSXML.IXMLAttribute {
    [DispIdAttribute("65937")]
public string name { get; }
    [DispIdAttribute("65938")]
public string value { get; }
    [DispIdAttribute("65937")]
public abstract virtual string get_name();
    [DispIdAttribute("65938")]
public abstract virtual string get_value();
}
[GuidAttribute("F52E2B61-18A1-11D1-B105-00805F49916B")]
public interface MSXML.IXMLDocument {
    [DispIdAttribute("65637")]
public IXMLElement root { get; }
    [DispIdAttribute("65638")]
public string fileSize { get; }
    [DispIdAttribute("65639")]
public string fileModifiedDate { get; }
    [DispIdAttribute("65640")]
public string fileUpdatedDate { get; }
    [DispIdAttribute("65641")]
public string url { get; public set; }
    [DispIdAttribute("65642")]
public string mimeType { get; }
    [DispIdAttribute("65643")]
public int readyState { get; }
    [DispIdAttribute("65645")]
public string charset { get; public set; }
    [DispIdAttribute("65646")]
public string version { get; }
    [DispIdAttribute("65647")]
public string doctype { get; }
    [DispIdAttribute("65648")]
public string dtdURL { get; }
    [DispIdAttribute("65637")]
public abstract virtual IXMLElement get_root();
    [DispIdAttribute("65638")]
public abstract virtual string get_fileSize();
    [DispIdAttribute("65639")]
public abstract virtual string get_fileModifiedDate();
    [DispIdAttribute("65640")]
public abstract virtual string get_fileUpdatedDate();
    [DispIdAttribute("65641")]
public abstract virtual string get_url();
    [DispIdAttribute("65641")]
public abstract virtual void set_url(string value);
    [DispIdAttribute("65642")]
public abstract virtual string get_mimeType();
    [DispIdAttribute("65643")]
public abstract virtual int get_readyState();
    [DispIdAttribute("65645")]
public abstract virtual string get_charset();
    [DispIdAttribute("65645")]
public abstract virtual void set_charset(string value);
    [DispIdAttribute("65646")]
public abstract virtual string get_version();
    [DispIdAttribute("65647")]
public abstract virtual string get_doctype();
    [DispIdAttribute("65648")]
public abstract virtual string get_dtdURL();
    [DispIdAttribute("65644")]
public abstract virtual IXMLElement createElement(object vType, object var1);
}
[GuidAttribute("2B8DE2FE-8D2D-11D1-B2FC-00C04FD915A9")]
public interface MSXML.IXMLDocument2 {
    [DispIdAttribute("65637")]
public IXMLElement2 root { get; }
    [DispIdAttribute("65638")]
public string fileSize { get; }
    [DispIdAttribute("65639")]
public string fileModifiedDate { get; }
    [DispIdAttribute("65640")]
public string fileUpdatedDate { get; }
    [DispIdAttribute("65641")]
public string url { get; public set; }
    [DispIdAttribute("65642")]
public string mimeType { get; }
    [DispIdAttribute("65643")]
public int readyState { get; }
    [DispIdAttribute("65645")]
public string charset { get; public set; }
    [DispIdAttribute("65646")]
public string version { get; }
    [DispIdAttribute("65647")]
public string doctype { get; }
    [DispIdAttribute("65648")]
public string dtdURL { get; }
    [DispIdAttribute("65649")]
public bool async { get; public set; }
    public abstract virtual IXMLElement2 get_root();
    public abstract virtual string get_fileSize();
    public abstract virtual string get_fileModifiedDate();
    public abstract virtual string get_fileUpdatedDate();
    public abstract virtual string get_url();
    public abstract virtual void set_url(string value);
    public abstract virtual string get_mimeType();
    public abstract virtual int get_readyState();
    public abstract virtual string get_charset();
    public abstract virtual void set_charset(string value);
    public abstract virtual string get_version();
    public abstract virtual string get_doctype();
    public abstract virtual string get_dtdURL();
    public abstract virtual IXMLElement2 createElement(object vType, object var1);
    public abstract virtual bool get_async();
    public abstract virtual void set_async(bool value);
}
[GuidAttribute("2933BF85-7B36-11D2-B20E-00C04F983E60")]
public interface MSXML.IXMLDOMAttribute {
    [DispIdAttribute("2")]
public string nodeName { get; }
    [DispIdAttribute("3")]
public object nodeValue { get; public set; }
    [DispIdAttribute("4")]
[ComAliasNameAttribute("MSXML.DOMNodeType")]
public DOMNodeType nodeType { get; }
    [DispIdAttribute("6")]
public IXMLDOMNode parentNode { get; }
    [DispIdAttribute("7")]
public IXMLDOMNodeList childNodes { get; }
    [DispIdAttribute("8")]
public IXMLDOMNode firstChild { get; }
    [DispIdAttribute("9")]
public IXMLDOMNode lastChild { get; }
    [DispIdAttribute("10")]
public IXMLDOMNode previousSibling { get; }
    [DispIdAttribute("11")]
public IXMLDOMNode nextSibling { get; }
    [DispIdAttribute("12")]
public IXMLDOMNamedNodeMap attributes { get; }
    [DispIdAttribute("18")]
public IXMLDOMDocument ownerDocument { get; }
    [DispIdAttribute("21")]
public string nodeTypeString { get; }
    [DispIdAttribute("24")]
public string text { get; public set; }
    [DispIdAttribute("22")]
public bool specified { get; }
    [DispIdAttribute("23")]
public IXMLDOMNode definition { get; }
    [DispIdAttribute("25")]
public object nodeTypedValue { get; public set; }
    [DispIdAttribute("26")]
public object dataType { get; public set; }
    [DispIdAttribute("27")]
public string xml { get; }
    [DispIdAttribute("31")]
public bool parsed { get; }
    [DispIdAttribute("32")]
public string namespaceURI { get; }
    [DispIdAttribute("33")]
public string prefix { get; }
    [DispIdAttribute("34")]
public string baseName { get; }
    [DispIdAttribute("118")]
public string name { get; }
    [DispIdAttribute("120")]
public object value { get; public set; }
    [DispIdAttribute("2")]
public abstract virtual string get_nodeName();
    [DispIdAttribute("3")]
public abstract virtual object get_nodeValue();
    [DispIdAttribute("3")]
public abstract virtual void set_nodeValue(object value);
    [DispIdAttribute("4")]
public abstract virtual DOMNodeType get_nodeType();
    [DispIdAttribute("6")]
public abstract virtual IXMLDOMNode get_parentNode();
    [DispIdAttribute("7")]
public abstract virtual IXMLDOMNodeList get_childNodes();
    [DispIdAttribute("8")]
public abstract virtual IXMLDOMNode get_firstChild();
    [DispIdAttribute("9")]
public abstract virtual IXMLDOMNode get_lastChild();
    [DispIdAttribute("10")]
public abstract virtual IXMLDOMNode get_previousSibling();
    [DispIdAttribute("11")]
public abstract virtual IXMLDOMNode get_nextSibling();
    [DispIdAttribute("12")]
public abstract virtual IXMLDOMNamedNodeMap get_attributes();
    [DispIdAttribute("13")]
public abstract virtual IXMLDOMNode insertBefore(IXMLDOMNode newChild, object refChild);
    [DispIdAttribute("14")]
public abstract virtual IXMLDOMNode replaceChild(IXMLDOMNode newChild, IXMLDOMNode oldChild);
    [DispIdAttribute("15")]
public abstract virtual IXMLDOMNode removeChild(IXMLDOMNode childNode);
    [DispIdAttribute("16")]
public abstract virtual IXMLDOMNode appendChild(IXMLDOMNode newChild);
    [DispIdAttribute("17")]
public abstract virtual bool hasChildNodes();
    [DispIdAttribute("18")]
public abstract virtual IXMLDOMDocument get_ownerDocument();
    [DispIdAttribute("19")]
public abstract virtual IXMLDOMNode cloneNode(bool deep);
    [DispIdAttribute("21")]
public abstract virtual string get_nodeTypeString();
    [DispIdAttribute("24")]
public abstract virtual string get_text();
    [DispIdAttribute("24")]
public abstract virtual void set_text(string value);
    [DispIdAttribute("22")]
public abstract virtual bool get_specified();
    [DispIdAttribute("23")]
public abstract virtual IXMLDOMNode get_definition();
    [DispIdAttribute("25")]
public abstract virtual object get_nodeTypedValue();
    [DispIdAttribute("25")]
public abstract virtual void set_nodeTypedValue(object value);
    [DispIdAttribute("26")]
public abstract virtual object get_dataType();
    [DispIdAttribute("26")]
public abstract virtual void set_dataType(object value);
    [DispIdAttribute("27")]
public abstract virtual string get_xml();
    [DispIdAttribute("28")]
public abstract virtual string transformNode(IXMLDOMNode stylesheet);
    [DispIdAttribute("29")]
public abstract virtual IXMLDOMNodeList selectNodes(string queryString);
    [DispIdAttribute("30")]
public abstract virtual IXMLDOMNode selectSingleNode(string queryString);
    [DispIdAttribute("31")]
public abstract virtual bool get_parsed();
    [DispIdAttribute("32")]
public abstract virtual string get_namespaceURI();
    [DispIdAttribute("33")]
public abstract virtual string get_prefix();
    [DispIdAttribute("34")]
public abstract virtual string get_baseName();
    [DispIdAttribute("35")]
public abstract virtual void transformNodeToObject(IXMLDOMNode stylesheet, object outputObject);
    [DispIdAttribute("118")]
public abstract virtual string get_name();
    [DispIdAttribute("120")]
public abstract virtual object get_value();
    [DispIdAttribute("120")]
public abstract virtual void set_value(object value);
}
[GuidAttribute("2933BF8A-7B36-11D2-B20E-00C04F983E60")]
public interface MSXML.IXMLDOMCDATASection {
    [DispIdAttribute("2")]
public string nodeName { get; }
    [DispIdAttribute("3")]
public object nodeValue { get; public set; }
    [DispIdAttribute("4")]
[ComAliasNameAttribute("MSXML.DOMNodeType")]
public DOMNodeType nodeType { get; }
    [DispIdAttribute("6")]
public IXMLDOMNode parentNode { get; }
    [DispIdAttribute("7")]
public IXMLDOMNodeList childNodes { get; }
    [DispIdAttribute("8")]
public IXMLDOMNode firstChild { get; }
    [DispIdAttribute("9")]
public IXMLDOMNode lastChild { get; }
    [DispIdAttribute("10")]
public IXMLDOMNode previousSibling { get; }
    [DispIdAttribute("11")]
public IXMLDOMNode nextSibling { get; }
    [DispIdAttribute("12")]
public IXMLDOMNamedNodeMap attributes { get; }
    [DispIdAttribute("18")]
public IXMLDOMDocument ownerDocument { get; }
    [DispIdAttribute("21")]
public string nodeTypeString { get; }
    [DispIdAttribute("24")]
public string text { get; public set; }
    [DispIdAttribute("22")]
public bool specified { get; }
    [DispIdAttribute("23")]
public IXMLDOMNode definition { get; }
    [DispIdAttribute("25")]
public object nodeTypedValue { get; public set; }
    [DispIdAttribute("26")]
public object dataType { get; public set; }
    [DispIdAttribute("27")]
public string xml { get; }
    [DispIdAttribute("31")]
public bool parsed { get; }
    [DispIdAttribute("32")]
public string namespaceURI { get; }
    [DispIdAttribute("33")]
public string prefix { get; }
    [DispIdAttribute("34")]
public string baseName { get; }
    [DispIdAttribute("109")]
public string data { get; public set; }
    [DispIdAttribute("110")]
public int length { get; }
    [DispIdAttribute("2")]
public abstract virtual string get_nodeName();
    [DispIdAttribute("3")]
public abstract virtual object get_nodeValue();
    [DispIdAttribute("3")]
public abstract virtual void set_nodeValue(object value);
    [DispIdAttribute("4")]
public abstract virtual DOMNodeType get_nodeType();
    [DispIdAttribute("6")]
public abstract virtual IXMLDOMNode get_parentNode();
    [DispIdAttribute("7")]
public abstract virtual IXMLDOMNodeList get_childNodes();
    [DispIdAttribute("8")]
public abstract virtual IXMLDOMNode get_firstChild();
    [DispIdAttribute("9")]
public abstract virtual IXMLDOMNode get_lastChild();
    [DispIdAttribute("10")]
public abstract virtual IXMLDOMNode get_previousSibling();
    [DispIdAttribute("11")]
public abstract virtual IXMLDOMNode get_nextSibling();
    [DispIdAttribute("12")]
public abstract virtual IXMLDOMNamedNodeMap get_attributes();
    [DispIdAttribute("13")]
public abstract virtual IXMLDOMNode insertBefore(IXMLDOMNode newChild, object refChild);
    [DispIdAttribute("14")]
public abstract virtual IXMLDOMNode replaceChild(IXMLDOMNode newChild, IXMLDOMNode oldChild);
    [DispIdAttribute("15")]
public abstract virtual IXMLDOMNode removeChild(IXMLDOMNode childNode);
    [DispIdAttribute("16")]
public abstract virtual IXMLDOMNode appendChild(IXMLDOMNode newChild);
    [DispIdAttribute("17")]
public abstract virtual bool hasChildNodes();
    [DispIdAttribute("18")]
public abstract virtual IXMLDOMDocument get_ownerDocument();
    [DispIdAttribute("19")]
public abstract virtual IXMLDOMNode cloneNode(bool deep);
    [DispIdAttribute("21")]
public abstract virtual string get_nodeTypeString();
    [DispIdAttribute("24")]
public abstract virtual string get_text();
    [DispIdAttribute("24")]
public abstract virtual void set_text(string value);
    [DispIdAttribute("22")]
public abstract virtual bool get_specified();
    [DispIdAttribute("23")]
public abstract virtual IXMLDOMNode get_definition();
    [DispIdAttribute("25")]
public abstract virtual object get_nodeTypedValue();
    [DispIdAttribute("25")]
public abstract virtual void set_nodeTypedValue(object value);
    [DispIdAttribute("26")]
public abstract virtual object get_dataType();
    [DispIdAttribute("26")]
public abstract virtual void set_dataType(object value);
    [DispIdAttribute("27")]
public abstract virtual string get_xml();
    [DispIdAttribute("28")]
public abstract virtual string transformNode(IXMLDOMNode stylesheet);
    [DispIdAttribute("29")]
public abstract virtual IXMLDOMNodeList selectNodes(string queryString);
    [DispIdAttribute("30")]
public abstract virtual IXMLDOMNode selectSingleNode(string queryString);
    [DispIdAttribute("31")]
public abstract virtual bool get_parsed();
    [DispIdAttribute("32")]
public abstract virtual string get_namespaceURI();
    [DispIdAttribute("33")]
public abstract virtual string get_prefix();
    [DispIdAttribute("34")]
public abstract virtual string get_baseName();
    [DispIdAttribute("35")]
public abstract virtual void transformNodeToObject(IXMLDOMNode stylesheet, object outputObject);
    [DispIdAttribute("109")]
public abstract virtual string get_data();
    [DispIdAttribute("109")]
public abstract virtual void set_data(string value);
    [DispIdAttribute("110")]
public abstract virtual int get_length();
    [DispIdAttribute("111")]
public abstract virtual string substringData(int offset, int count);
    [DispIdAttribute("112")]
public abstract virtual void appendData(string data);
    [DispIdAttribute("113")]
public abstract virtual void insertData(int offset, string data);
    [DispIdAttribute("114")]
public abstract virtual void deleteData(int offset, int count);
    [DispIdAttribute("115")]
public abstract virtual void replaceData(int offset, int count, string data);
    [DispIdAttribute("123")]
public abstract virtual IXMLDOMText splitText(int offset);
}
[GuidAttribute("2933BF84-7B36-11D2-B20E-00C04F983E60")]
public interface MSXML.IXMLDOMCharacterData {
    [DispIdAttribute("2")]
public string nodeName { get; }
    [DispIdAttribute("3")]
public object nodeValue { get; public set; }
    [DispIdAttribute("4")]
[ComAliasNameAttribute("MSXML.DOMNodeType")]
public DOMNodeType nodeType { get; }
    [DispIdAttribute("6")]
public IXMLDOMNode parentNode { get; }
    [DispIdAttribute("7")]
public IXMLDOMNodeList childNodes { get; }
    [DispIdAttribute("8")]
public IXMLDOMNode firstChild { get; }
    [DispIdAttribute("9")]
public IXMLDOMNode lastChild { get; }
    [DispIdAttribute("10")]
public IXMLDOMNode previousSibling { get; }
    [DispIdAttribute("11")]
public IXMLDOMNode nextSibling { get; }
    [DispIdAttribute("12")]
public IXMLDOMNamedNodeMap attributes { get; }
    [DispIdAttribute("18")]
public IXMLDOMDocument ownerDocument { get; }
    [DispIdAttribute("21")]
public string nodeTypeString { get; }
    [DispIdAttribute("24")]
public string text { get; public set; }
    [DispIdAttribute("22")]
public bool specified { get; }
    [DispIdAttribute("23")]
public IXMLDOMNode definition { get; }
    [DispIdAttribute("25")]
public object nodeTypedValue { get; public set; }
    [DispIdAttribute("26")]
public object dataType { get; public set; }
    [DispIdAttribute("27")]
public string xml { get; }
    [DispIdAttribute("31")]
public bool parsed { get; }
    [DispIdAttribute("32")]
public string namespaceURI { get; }
    [DispIdAttribute("33")]
public string prefix { get; }
    [DispIdAttribute("34")]
public string baseName { get; }
    [DispIdAttribute("109")]
public string data { get; public set; }
    [DispIdAttribute("110")]
public int length { get; }
    [DispIdAttribute("2")]
public abstract virtual string get_nodeName();
    [DispIdAttribute("3")]
public abstract virtual object get_nodeValue();
    [DispIdAttribute("3")]
public abstract virtual void set_nodeValue(object value);
    [DispIdAttribute("4")]
public abstract virtual DOMNodeType get_nodeType();
    [DispIdAttribute("6")]
public abstract virtual IXMLDOMNode get_parentNode();
    [DispIdAttribute("7")]
public abstract virtual IXMLDOMNodeList get_childNodes();
    [DispIdAttribute("8")]
public abstract virtual IXMLDOMNode get_firstChild();
    [DispIdAttribute("9")]
public abstract virtual IXMLDOMNode get_lastChild();
    [DispIdAttribute("10")]
public abstract virtual IXMLDOMNode get_previousSibling();
    [DispIdAttribute("11")]
public abstract virtual IXMLDOMNode get_nextSibling();
    [DispIdAttribute("12")]
public abstract virtual IXMLDOMNamedNodeMap get_attributes();
    [DispIdAttribute("13")]
public abstract virtual IXMLDOMNode insertBefore(IXMLDOMNode newChild, object refChild);
    [DispIdAttribute("14")]
public abstract virtual IXMLDOMNode replaceChild(IXMLDOMNode newChild, IXMLDOMNode oldChild);
    [DispIdAttribute("15")]
public abstract virtual IXMLDOMNode removeChild(IXMLDOMNode childNode);
    [DispIdAttribute("16")]
public abstract virtual IXMLDOMNode appendChild(IXMLDOMNode newChild);
    [DispIdAttribute("17")]
public abstract virtual bool hasChildNodes();
    [DispIdAttribute("18")]
public abstract virtual IXMLDOMDocument get_ownerDocument();
    [DispIdAttribute("19")]
public abstract virtual IXMLDOMNode cloneNode(bool deep);
    [DispIdAttribute("21")]
public abstract virtual string get_nodeTypeString();
    [DispIdAttribute("24")]
public abstract virtual string get_text();
    [DispIdAttribute("24")]
public abstract virtual void set_text(string value);
    [DispIdAttribute("22")]
public abstract virtual bool get_specified();
    [DispIdAttribute("23")]
public abstract virtual IXMLDOMNode get_definition();
    [DispIdAttribute("25")]
public abstract virtual object get_nodeTypedValue();
    [DispIdAttribute("25")]
public abstract virtual void set_nodeTypedValue(object value);
    [DispIdAttribute("26")]
public abstract virtual object get_dataType();
    [DispIdAttribute("26")]
public abstract virtual void set_dataType(object value);
    [DispIdAttribute("27")]
public abstract virtual string get_xml();
    [DispIdAttribute("28")]
public abstract virtual string transformNode(IXMLDOMNode stylesheet);
    [DispIdAttribute("29")]
public abstract virtual IXMLDOMNodeList selectNodes(string queryString);
    [DispIdAttribute("30")]
public abstract virtual IXMLDOMNode selectSingleNode(string queryString);
    [DispIdAttribute("31")]
public abstract virtual bool get_parsed();
    [DispIdAttribute("32")]
public abstract virtual string get_namespaceURI();
    [DispIdAttribute("33")]
public abstract virtual string get_prefix();
    [DispIdAttribute("34")]
public abstract virtual string get_baseName();
    [DispIdAttribute("35")]
public abstract virtual void transformNodeToObject(IXMLDOMNode stylesheet, object outputObject);
    [DispIdAttribute("109")]
public abstract virtual string get_data();
    [DispIdAttribute("109")]
public abstract virtual void set_data(string value);
    [DispIdAttribute("110")]
public abstract virtual int get_length();
    [DispIdAttribute("111")]
public abstract virtual string substringData(int offset, int count);
    [DispIdAttribute("112")]
public abstract virtual void appendData(string data);
    [DispIdAttribute("113")]
public abstract virtual void insertData(int offset, string data);
    [DispIdAttribute("114")]
public abstract virtual void deleteData(int offset, int count);
    [DispIdAttribute("115")]
public abstract virtual void replaceData(int offset, int count, string data);
}
[GuidAttribute("2933BF88-7B36-11D2-B20E-00C04F983E60")]
public interface MSXML.IXMLDOMComment {
    [DispIdAttribute("2")]
public string nodeName { get; }
    [DispIdAttribute("3")]
public object nodeValue { get; public set; }
    [DispIdAttribute("4")]
[ComAliasNameAttribute("MSXML.DOMNodeType")]
public DOMNodeType nodeType { get; }
    [DispIdAttribute("6")]
public IXMLDOMNode parentNode { get; }
    [DispIdAttribute("7")]
public IXMLDOMNodeList childNodes { get; }
    [DispIdAttribute("8")]
public IXMLDOMNode firstChild { get; }
    [DispIdAttribute("9")]
public IXMLDOMNode lastChild { get; }
    [DispIdAttribute("10")]
public IXMLDOMNode previousSibling { get; }
    [DispIdAttribute("11")]
public IXMLDOMNode nextSibling { get; }
    [DispIdAttribute("12")]
public IXMLDOMNamedNodeMap attributes { get; }
    [DispIdAttribute("18")]
public IXMLDOMDocument ownerDocument { get; }
    [DispIdAttribute("21")]
public string nodeTypeString { get; }
    [DispIdAttribute("24")]
public string text { get; public set; }
    [DispIdAttribute("22")]
public bool specified { get; }
    [DispIdAttribute("23")]
public IXMLDOMNode definition { get; }
    [DispIdAttribute("25")]
public object nodeTypedValue { get; public set; }
    [DispIdAttribute("26")]
public object dataType { get; public set; }
    [DispIdAttribute("27")]
public string xml { get; }
    [DispIdAttribute("31")]
public bool parsed { get; }
    [DispIdAttribute("32")]
public string namespaceURI { get; }
    [DispIdAttribute("33")]
public string prefix { get; }
    [DispIdAttribute("34")]
public string baseName { get; }
    [DispIdAttribute("109")]
public string data { get; public set; }
    [DispIdAttribute("110")]
public int length { get; }
    [DispIdAttribute("2")]
public abstract virtual string get_nodeName();
    [DispIdAttribute("3")]
public abstract virtual object get_nodeValue();
    [DispIdAttribute("3")]
public abstract virtual void set_nodeValue(object value);
    [DispIdAttribute("4")]
public abstract virtual DOMNodeType get_nodeType();
    [DispIdAttribute("6")]
public abstract virtual IXMLDOMNode get_parentNode();
    [DispIdAttribute("7")]
public abstract virtual IXMLDOMNodeList get_childNodes();
    [DispIdAttribute("8")]
public abstract virtual IXMLDOMNode get_firstChild();
    [DispIdAttribute("9")]
public abstract virtual IXMLDOMNode get_lastChild();
    [DispIdAttribute("10")]
public abstract virtual IXMLDOMNode get_previousSibling();
    [DispIdAttribute("11")]
public abstract virtual IXMLDOMNode get_nextSibling();
    [DispIdAttribute("12")]
public abstract virtual IXMLDOMNamedNodeMap get_attributes();
    [DispIdAttribute("13")]
public abstract virtual IXMLDOMNode insertBefore(IXMLDOMNode newChild, object refChild);
    [DispIdAttribute("14")]
public abstract virtual IXMLDOMNode replaceChild(IXMLDOMNode newChild, IXMLDOMNode oldChild);
    [DispIdAttribute("15")]
public abstract virtual IXMLDOMNode removeChild(IXMLDOMNode childNode);
    [DispIdAttribute("16")]
public abstract virtual IXMLDOMNode appendChild(IXMLDOMNode newChild);
    [DispIdAttribute("17")]
public abstract virtual bool hasChildNodes();
    [DispIdAttribute("18")]
public abstract virtual IXMLDOMDocument get_ownerDocument();
    [DispIdAttribute("19")]
public abstract virtual IXMLDOMNode cloneNode(bool deep);
    [DispIdAttribute("21")]
public abstract virtual string get_nodeTypeString();
    [DispIdAttribute("24")]
public abstract virtual string get_text();
    [DispIdAttribute("24")]
public abstract virtual void set_text(string value);
    [DispIdAttribute("22")]
public abstract virtual bool get_specified();
    [DispIdAttribute("23")]
public abstract virtual IXMLDOMNode get_definition();
    [DispIdAttribute("25")]
public abstract virtual object get_nodeTypedValue();
    [DispIdAttribute("25")]
public abstract virtual void set_nodeTypedValue(object value);
    [DispIdAttribute("26")]
public abstract virtual object get_dataType();
    [DispIdAttribute("26")]
public abstract virtual void set_dataType(object value);
    [DispIdAttribute("27")]
public abstract virtual string get_xml();
    [DispIdAttribute("28")]
public abstract virtual string transformNode(IXMLDOMNode stylesheet);
    [DispIdAttribute("29")]
public abstract virtual IXMLDOMNodeList selectNodes(string queryString);
    [DispIdAttribute("30")]
public abstract virtual IXMLDOMNode selectSingleNode(string queryString);
    [DispIdAttribute("31")]
public abstract virtual bool get_parsed();
    [DispIdAttribute("32")]
public abstract virtual string get_namespaceURI();
    [DispIdAttribute("33")]
public abstract virtual string get_prefix();
    [DispIdAttribute("34")]
public abstract virtual string get_baseName();
    [DispIdAttribute("35")]
public abstract virtual void transformNodeToObject(IXMLDOMNode stylesheet, object outputObject);
    [DispIdAttribute("109")]
public abstract virtual string get_data();
    [DispIdAttribute("109")]
public abstract virtual void set_data(string value);
    [DispIdAttribute("110")]
public abstract virtual int get_length();
    [DispIdAttribute("111")]
public abstract virtual string substringData(int offset, int count);
    [DispIdAttribute("112")]
public abstract virtual void appendData(string data);
    [DispIdAttribute("113")]
public abstract virtual void insertData(int offset, string data);
    [DispIdAttribute("114")]
public abstract virtual void deleteData(int offset, int count);
    [DispIdAttribute("115")]
public abstract virtual void replaceData(int offset, int count, string data);
}
[GuidAttribute("2933BF81-7B36-11D2-B20E-00C04F983E60")]
public interface MSXML.IXMLDOMDocument {
    [DispIdAttribute("2")]
public string nodeName { get; }
    [DispIdAttribute("3")]
public object nodeValue { get; public set; }
    [ComAliasNameAttribute("MSXML.DOMNodeType")]
[DispIdAttribute("4")]
public DOMNodeType nodeType { get; }
    [DispIdAttribute("6")]
public IXMLDOMNode parentNode { get; }
    [DispIdAttribute("7")]
public IXMLDOMNodeList childNodes { get; }
    [DispIdAttribute("8")]
public IXMLDOMNode firstChild { get; }
    [DispIdAttribute("9")]
public IXMLDOMNode lastChild { get; }
    [DispIdAttribute("10")]
public IXMLDOMNode previousSibling { get; }
    [DispIdAttribute("11")]
public IXMLDOMNode nextSibling { get; }
    [DispIdAttribute("12")]
public IXMLDOMNamedNodeMap attributes { get; }
    [DispIdAttribute("18")]
public IXMLDOMDocument ownerDocument { get; }
    [DispIdAttribute("21")]
public string nodeTypeString { get; }
    [DispIdAttribute("24")]
public string text { get; public set; }
    [DispIdAttribute("22")]
public bool specified { get; }
    [DispIdAttribute("23")]
public IXMLDOMNode definition { get; }
    [DispIdAttribute("25")]
public object nodeTypedValue { get; public set; }
    [DispIdAttribute("26")]
public object dataType { get; public set; }
    [DispIdAttribute("27")]
public string xml { get; }
    [DispIdAttribute("31")]
public bool parsed { get; }
    [DispIdAttribute("32")]
public string namespaceURI { get; }
    [DispIdAttribute("33")]
public string prefix { get; }
    [DispIdAttribute("34")]
public string baseName { get; }
    [DispIdAttribute("38")]
public IXMLDOMDocumentType doctype { get; }
    [DispIdAttribute("39")]
public IXMLDOMImplementation implementation { get; }
    [DispIdAttribute("40")]
public IXMLDOMElement documentElement { get; public set; }
    [DispIdAttribute("-525")]
public int readyState { get; }
    [DispIdAttribute("59")]
public IXMLDOMParseError parseError { get; }
    [DispIdAttribute("60")]
public string url { get; }
    [DispIdAttribute("61")]
public bool async { get; public set; }
    [DispIdAttribute("65")]
public bool validateOnParse { get; public set; }
    [DispIdAttribute("66")]
public bool resolveExternals { get; public set; }
    [DispIdAttribute("67")]
public bool preserveWhiteSpace { get; public set; }
    [DispIdAttribute("68")]
unknown object onreadystatechange {public set; }
    [DispIdAttribute("69")]
unknown object ondataavailable {public set; }
    [DispIdAttribute("70")]
unknown object ontransformnode {public set; }
    [DispIdAttribute("2")]
public abstract virtual string get_nodeName();
    [DispIdAttribute("3")]
public abstract virtual object get_nodeValue();
    [DispIdAttribute("3")]
public abstract virtual void set_nodeValue(object value);
    [DispIdAttribute("4")]
public abstract virtual DOMNodeType get_nodeType();
    [DispIdAttribute("6")]
public abstract virtual IXMLDOMNode get_parentNode();
    [DispIdAttribute("7")]
public abstract virtual IXMLDOMNodeList get_childNodes();
    [DispIdAttribute("8")]
public abstract virtual IXMLDOMNode get_firstChild();
    [DispIdAttribute("9")]
public abstract virtual IXMLDOMNode get_lastChild();
    [DispIdAttribute("10")]
public abstract virtual IXMLDOMNode get_previousSibling();
    [DispIdAttribute("11")]
public abstract virtual IXMLDOMNode get_nextSibling();
    [DispIdAttribute("12")]
public abstract virtual IXMLDOMNamedNodeMap get_attributes();
    [DispIdAttribute("13")]
public abstract virtual IXMLDOMNode insertBefore(IXMLDOMNode newChild, object refChild);
    [DispIdAttribute("14")]
public abstract virtual IXMLDOMNode replaceChild(IXMLDOMNode newChild, IXMLDOMNode oldChild);
    [DispIdAttribute("15")]
public abstract virtual IXMLDOMNode removeChild(IXMLDOMNode childNode);
    [DispIdAttribute("16")]
public abstract virtual IXMLDOMNode appendChild(IXMLDOMNode newChild);
    [DispIdAttribute("17")]
public abstract virtual bool hasChildNodes();
    [DispIdAttribute("18")]
public abstract virtual IXMLDOMDocument get_ownerDocument();
    [DispIdAttribute("19")]
public abstract virtual IXMLDOMNode cloneNode(bool deep);
    [DispIdAttribute("21")]
public abstract virtual string get_nodeTypeString();
    [DispIdAttribute("24")]
public abstract virtual string get_text();
    [DispIdAttribute("24")]
public abstract virtual void set_text(string value);
    [DispIdAttribute("22")]
public abstract virtual bool get_specified();
    [DispIdAttribute("23")]
public abstract virtual IXMLDOMNode get_definition();
    [DispIdAttribute("25")]
public abstract virtual object get_nodeTypedValue();
    [DispIdAttribute("25")]
public abstract virtual void set_nodeTypedValue(object value);
    [DispIdAttribute("26")]
public abstract virtual object get_dataType();
    [DispIdAttribute("26")]
public abstract virtual void set_dataType(object value);
    [DispIdAttribute("27")]
public abstract virtual string get_xml();
    [DispIdAttribute("28")]
public abstract virtual string transformNode(IXMLDOMNode stylesheet);
    [DispIdAttribute("29")]
public abstract virtual IXMLDOMNodeList selectNodes(string queryString);
    [DispIdAttribute("30")]
public abstract virtual IXMLDOMNode selectSingleNode(string queryString);
    [DispIdAttribute("31")]
public abstract virtual bool get_parsed();
    [DispIdAttribute("32")]
public abstract virtual string get_namespaceURI();
    [DispIdAttribute("33")]
public abstract virtual string get_prefix();
    [DispIdAttribute("34")]
public abstract virtual string get_baseName();
    [DispIdAttribute("35")]
public abstract virtual void transformNodeToObject(IXMLDOMNode stylesheet, object outputObject);
    [DispIdAttribute("38")]
public abstract virtual IXMLDOMDocumentType get_doctype();
    [DispIdAttribute("39")]
public abstract virtual IXMLDOMImplementation get_implementation();
    [DispIdAttribute("40")]
public abstract virtual IXMLDOMElement get_documentElement();
    [DispIdAttribute("40")]
public abstract virtual void set_documentElement(IXMLDOMElement value);
    [DispIdAttribute("41")]
public abstract virtual IXMLDOMElement createElement(string tagName);
    [DispIdAttribute("42")]
public abstract virtual IXMLDOMDocumentFragment createDocumentFragment();
    [DispIdAttribute("43")]
public abstract virtual IXMLDOMText createTextNode(string data);
    [DispIdAttribute("44")]
public abstract virtual IXMLDOMComment createComment(string data);
    [DispIdAttribute("45")]
public abstract virtual IXMLDOMCDATASection createCDATASection(string data);
    [DispIdAttribute("46")]
public abstract virtual IXMLDOMProcessingInstruction createProcessingInstruction(string target, string data);
    [DispIdAttribute("47")]
public abstract virtual IXMLDOMAttribute createAttribute(string name);
    [DispIdAttribute("49")]
public abstract virtual IXMLDOMEntityReference createEntityReference(string name);
    [DispIdAttribute("50")]
public abstract virtual IXMLDOMNodeList getElementsByTagName(string tagName);
    [DispIdAttribute("54")]
public abstract virtual IXMLDOMNode createNode(object type, string name, string namespaceURI);
    [DispIdAttribute("56")]
public abstract virtual IXMLDOMNode nodeFromID(string idString);
    [DispIdAttribute("58")]
public abstract virtual bool load(object xmlSource);
    [DispIdAttribute("-525")]
public abstract virtual int get_readyState();
    [DispIdAttribute("59")]
public abstract virtual IXMLDOMParseError get_parseError();
    [DispIdAttribute("60")]
public abstract virtual string get_url();
    [DispIdAttribute("61")]
public abstract virtual bool get_async();
    [DispIdAttribute("61")]
public abstract virtual void set_async(bool value);
    [DispIdAttribute("62")]
public abstract virtual void abort();
    [DispIdAttribute("63")]
public abstract virtual bool loadXML(string bstrXML);
    [DispIdAttribute("64")]
public abstract virtual void save(object destination);
    [DispIdAttribute("65")]
public abstract virtual bool get_validateOnParse();
    [DispIdAttribute("65")]
public abstract virtual void set_validateOnParse(bool value);
    [DispIdAttribute("66")]
public abstract virtual bool get_resolveExternals();
    [DispIdAttribute("66")]
public abstract virtual void set_resolveExternals(bool value);
    [DispIdAttribute("67")]
public abstract virtual bool get_preserveWhiteSpace();
    [DispIdAttribute("67")]
public abstract virtual void set_preserveWhiteSpace(bool value);
    [DispIdAttribute("68")]
public abstract virtual void set_onreadystatechange(object value);
    [DispIdAttribute("69")]
public abstract virtual void set_ondataavailable(object value);
    [DispIdAttribute("70")]
public abstract virtual void set_ontransformnode(object value);
}
[GuidAttribute("3EFAA413-272F-11D2-836F-0000F87A7782")]
public interface MSXML.IXMLDOMDocumentFragment {
    [DispIdAttribute("2")]
public string nodeName { get; }
    [DispIdAttribute("3")]
public object nodeValue { get; public set; }
    [ComAliasNameAttribute("MSXML.DOMNodeType")]
[DispIdAttribute("4")]
public DOMNodeType nodeType { get; }
    [DispIdAttribute("6")]
public IXMLDOMNode parentNode { get; }
    [DispIdAttribute("7")]
public IXMLDOMNodeList childNodes { get; }
    [DispIdAttribute("8")]
public IXMLDOMNode firstChild { get; }
    [DispIdAttribute("9")]
public IXMLDOMNode lastChild { get; }
    [DispIdAttribute("10")]
public IXMLDOMNode previousSibling { get; }
    [DispIdAttribute("11")]
public IXMLDOMNode nextSibling { get; }
    [DispIdAttribute("12")]
public IXMLDOMNamedNodeMap attributes { get; }
    [DispIdAttribute("18")]
public IXMLDOMDocument ownerDocument { get; }
    [DispIdAttribute("21")]
public string nodeTypeString { get; }
    [DispIdAttribute("24")]
public string text { get; public set; }
    [DispIdAttribute("22")]
public bool specified { get; }
    [DispIdAttribute("23")]
public IXMLDOMNode definition { get; }
    [DispIdAttribute("25")]
public object nodeTypedValue { get; public set; }
    [DispIdAttribute("26")]
public object dataType { get; public set; }
    [DispIdAttribute("27")]
public string xml { get; }
    [DispIdAttribute("31")]
public bool parsed { get; }
    [DispIdAttribute("32")]
public string namespaceURI { get; }
    [DispIdAttribute("33")]
public string prefix { get; }
    [DispIdAttribute("34")]
public string baseName { get; }
    [DispIdAttribute("2")]
public abstract virtual string get_nodeName();
    [DispIdAttribute("3")]
public abstract virtual object get_nodeValue();
    [DispIdAttribute("3")]
public abstract virtual void set_nodeValue(object value);
    [DispIdAttribute("4")]
public abstract virtual DOMNodeType get_nodeType();
    [DispIdAttribute("6")]
public abstract virtual IXMLDOMNode get_parentNode();
    [DispIdAttribute("7")]
public abstract virtual IXMLDOMNodeList get_childNodes();
    [DispIdAttribute("8")]
public abstract virtual IXMLDOMNode get_firstChild();
    [DispIdAttribute("9")]
public abstract virtual IXMLDOMNode get_lastChild();
    [DispIdAttribute("10")]
public abstract virtual IXMLDOMNode get_previousSibling();
    [DispIdAttribute("11")]
public abstract virtual IXMLDOMNode get_nextSibling();
    [DispIdAttribute("12")]
public abstract virtual IXMLDOMNamedNodeMap get_attributes();
    [DispIdAttribute("13")]
public abstract virtual IXMLDOMNode insertBefore(IXMLDOMNode newChild, object refChild);
    [DispIdAttribute("14")]
public abstract virtual IXMLDOMNode replaceChild(IXMLDOMNode newChild, IXMLDOMNode oldChild);
    [DispIdAttribute("15")]
public abstract virtual IXMLDOMNode removeChild(IXMLDOMNode childNode);
    [DispIdAttribute("16")]
public abstract virtual IXMLDOMNode appendChild(IXMLDOMNode newChild);
    [DispIdAttribute("17")]
public abstract virtual bool hasChildNodes();
    [DispIdAttribute("18")]
public abstract virtual IXMLDOMDocument get_ownerDocument();
    [DispIdAttribute("19")]
public abstract virtual IXMLDOMNode cloneNode(bool deep);
    [DispIdAttribute("21")]
public abstract virtual string get_nodeTypeString();
    [DispIdAttribute("24")]
public abstract virtual string get_text();
    [DispIdAttribute("24")]
public abstract virtual void set_text(string value);
    [DispIdAttribute("22")]
public abstract virtual bool get_specified();
    [DispIdAttribute("23")]
public abstract virtual IXMLDOMNode get_definition();
    [DispIdAttribute("25")]
public abstract virtual object get_nodeTypedValue();
    [DispIdAttribute("25")]
public abstract virtual void set_nodeTypedValue(object value);
    [DispIdAttribute("26")]
public abstract virtual object get_dataType();
    [DispIdAttribute("26")]
public abstract virtual void set_dataType(object value);
    [DispIdAttribute("27")]
public abstract virtual string get_xml();
    [DispIdAttribute("28")]
public abstract virtual string transformNode(IXMLDOMNode stylesheet);
    [DispIdAttribute("29")]
public abstract virtual IXMLDOMNodeList selectNodes(string queryString);
    [DispIdAttribute("30")]
public abstract virtual IXMLDOMNode selectSingleNode(string queryString);
    [DispIdAttribute("31")]
public abstract virtual bool get_parsed();
    [DispIdAttribute("32")]
public abstract virtual string get_namespaceURI();
    [DispIdAttribute("33")]
public abstract virtual string get_prefix();
    [DispIdAttribute("34")]
public abstract virtual string get_baseName();
    [DispIdAttribute("35")]
public abstract virtual void transformNodeToObject(IXMLDOMNode stylesheet, object outputObject);
}
[GuidAttribute("2933BF8B-7B36-11D2-B20E-00C04F983E60")]
public interface MSXML.IXMLDOMDocumentType {
    [DispIdAttribute("2")]
public string nodeName { get; }
    [DispIdAttribute("3")]
public object nodeValue { get; public set; }
    [ComAliasNameAttribute("MSXML.DOMNodeType")]
[DispIdAttribute("4")]
public DOMNodeType nodeType { get; }
    [DispIdAttribute("6")]
public IXMLDOMNode parentNode { get; }
    [DispIdAttribute("7")]
public IXMLDOMNodeList childNodes { get; }
    [DispIdAttribute("8")]
public IXMLDOMNode firstChild { get; }
    [DispIdAttribute("9")]
public IXMLDOMNode lastChild { get; }
    [DispIdAttribute("10")]
public IXMLDOMNode previousSibling { get; }
    [DispIdAttribute("11")]
public IXMLDOMNode nextSibling { get; }
    [DispIdAttribute("12")]
public IXMLDOMNamedNodeMap attributes { get; }
    [DispIdAttribute("18")]
public IXMLDOMDocument ownerDocument { get; }
    [DispIdAttribute("21")]
public string nodeTypeString { get; }
    [DispIdAttribute("24")]
public string text { get; public set; }
    [DispIdAttribute("22")]
public bool specified { get; }
    [DispIdAttribute("23")]
public IXMLDOMNode definition { get; }
    [DispIdAttribute("25")]
public object nodeTypedValue { get; public set; }
    [DispIdAttribute("26")]
public object dataType { get; public set; }
    [DispIdAttribute("27")]
public string xml { get; }
    [DispIdAttribute("31")]
public bool parsed { get; }
    [DispIdAttribute("32")]
public string namespaceURI { get; }
    [DispIdAttribute("33")]
public string prefix { get; }
    [DispIdAttribute("34")]
public string baseName { get; }
    [DispIdAttribute("131")]
public string name { get; }
    [DispIdAttribute("132")]
public IXMLDOMNamedNodeMap entities { get; }
    [DispIdAttribute("133")]
public IXMLDOMNamedNodeMap notations { get; }
    [DispIdAttribute("2")]
public abstract virtual string get_nodeName();
    [DispIdAttribute("3")]
public abstract virtual object get_nodeValue();
    [DispIdAttribute("3")]
public abstract virtual void set_nodeValue(object value);
    [DispIdAttribute("4")]
public abstract virtual DOMNodeType get_nodeType();
    [DispIdAttribute("6")]
public abstract virtual IXMLDOMNode get_parentNode();
    [DispIdAttribute("7")]
public abstract virtual IXMLDOMNodeList get_childNodes();
    [DispIdAttribute("8")]
public abstract virtual IXMLDOMNode get_firstChild();
    [DispIdAttribute("9")]
public abstract virtual IXMLDOMNode get_lastChild();
    [DispIdAttribute("10")]
public abstract virtual IXMLDOMNode get_previousSibling();
    [DispIdAttribute("11")]
public abstract virtual IXMLDOMNode get_nextSibling();
    [DispIdAttribute("12")]
public abstract virtual IXMLDOMNamedNodeMap get_attributes();
    [DispIdAttribute("13")]
public abstract virtual IXMLDOMNode insertBefore(IXMLDOMNode newChild, object refChild);
    [DispIdAttribute("14")]
public abstract virtual IXMLDOMNode replaceChild(IXMLDOMNode newChild, IXMLDOMNode oldChild);
    [DispIdAttribute("15")]
public abstract virtual IXMLDOMNode removeChild(IXMLDOMNode childNode);
    [DispIdAttribute("16")]
public abstract virtual IXMLDOMNode appendChild(IXMLDOMNode newChild);
    [DispIdAttribute("17")]
public abstract virtual bool hasChildNodes();
    [DispIdAttribute("18")]
public abstract virtual IXMLDOMDocument get_ownerDocument();
    [DispIdAttribute("19")]
public abstract virtual IXMLDOMNode cloneNode(bool deep);
    [DispIdAttribute("21")]
public abstract virtual string get_nodeTypeString();
    [DispIdAttribute("24")]
public abstract virtual string get_text();
    [DispIdAttribute("24")]
public abstract virtual void set_text(string value);
    [DispIdAttribute("22")]
public abstract virtual bool get_specified();
    [DispIdAttribute("23")]
public abstract virtual IXMLDOMNode get_definition();
    [DispIdAttribute("25")]
public abstract virtual object get_nodeTypedValue();
    [DispIdAttribute("25")]
public abstract virtual void set_nodeTypedValue(object value);
    [DispIdAttribute("26")]
public abstract virtual object get_dataType();
    [DispIdAttribute("26")]
public abstract virtual void set_dataType(object value);
    [DispIdAttribute("27")]
public abstract virtual string get_xml();
    [DispIdAttribute("28")]
public abstract virtual string transformNode(IXMLDOMNode stylesheet);
    [DispIdAttribute("29")]
public abstract virtual IXMLDOMNodeList selectNodes(string queryString);
    [DispIdAttribute("30")]
public abstract virtual IXMLDOMNode selectSingleNode(string queryString);
    [DispIdAttribute("31")]
public abstract virtual bool get_parsed();
    [DispIdAttribute("32")]
public abstract virtual string get_namespaceURI();
    [DispIdAttribute("33")]
public abstract virtual string get_prefix();
    [DispIdAttribute("34")]
public abstract virtual string get_baseName();
    [DispIdAttribute("35")]
public abstract virtual void transformNodeToObject(IXMLDOMNode stylesheet, object outputObject);
    [DispIdAttribute("131")]
public abstract virtual string get_name();
    [DispIdAttribute("132")]
public abstract virtual IXMLDOMNamedNodeMap get_entities();
    [DispIdAttribute("133")]
public abstract virtual IXMLDOMNamedNodeMap get_notations();
}
[GuidAttribute("2933BF86-7B36-11D2-B20E-00C04F983E60")]
public interface MSXML.IXMLDOMElement {
    [DispIdAttribute("2")]
public string nodeName { get; }
    [DispIdAttribute("3")]
public object nodeValue { get; public set; }
    [ComAliasNameAttribute("MSXML.DOMNodeType")]
[DispIdAttribute("4")]
public DOMNodeType nodeType { get; }
    [DispIdAttribute("6")]
public IXMLDOMNode parentNode { get; }
    [DispIdAttribute("7")]
public IXMLDOMNodeList childNodes { get; }
    [DispIdAttribute("8")]
public IXMLDOMNode firstChild { get; }
    [DispIdAttribute("9")]
public IXMLDOMNode lastChild { get; }
    [DispIdAttribute("10")]
public IXMLDOMNode previousSibling { get; }
    [DispIdAttribute("11")]
public IXMLDOMNode nextSibling { get; }
    [DispIdAttribute("12")]
public IXMLDOMNamedNodeMap attributes { get; }
    [DispIdAttribute("18")]
public IXMLDOMDocument ownerDocument { get; }
    [DispIdAttribute("21")]
public string nodeTypeString { get; }
    [DispIdAttribute("24")]
public string text { get; public set; }
    [DispIdAttribute("22")]
public bool specified { get; }
    [DispIdAttribute("23")]
public IXMLDOMNode definition { get; }
    [DispIdAttribute("25")]
public object nodeTypedValue { get; public set; }
    [DispIdAttribute("26")]
public object dataType { get; public set; }
    [DispIdAttribute("27")]
public string xml { get; }
    [DispIdAttribute("31")]
public bool parsed { get; }
    [DispIdAttribute("32")]
public string namespaceURI { get; }
    [DispIdAttribute("33")]
public string prefix { get; }
    [DispIdAttribute("34")]
public string baseName { get; }
    [DispIdAttribute("97")]
public string tagName { get; }
    [DispIdAttribute("2")]
public abstract virtual string get_nodeName();
    [DispIdAttribute("3")]
public abstract virtual object get_nodeValue();
    [DispIdAttribute("3")]
public abstract virtual void set_nodeValue(object value);
    [DispIdAttribute("4")]
public abstract virtual DOMNodeType get_nodeType();
    [DispIdAttribute("6")]
public abstract virtual IXMLDOMNode get_parentNode();
    [DispIdAttribute("7")]
public abstract virtual IXMLDOMNodeList get_childNodes();
    [DispIdAttribute("8")]
public abstract virtual IXMLDOMNode get_firstChild();
    [DispIdAttribute("9")]
public abstract virtual IXMLDOMNode get_lastChild();
    [DispIdAttribute("10")]
public abstract virtual IXMLDOMNode get_previousSibling();
    [DispIdAttribute("11")]
public abstract virtual IXMLDOMNode get_nextSibling();
    [DispIdAttribute("12")]
public abstract virtual IXMLDOMNamedNodeMap get_attributes();
    [DispIdAttribute("13")]
public abstract virtual IXMLDOMNode insertBefore(IXMLDOMNode newChild, object refChild);
    [DispIdAttribute("14")]
public abstract virtual IXMLDOMNode replaceChild(IXMLDOMNode newChild, IXMLDOMNode oldChild);
    [DispIdAttribute("15")]
public abstract virtual IXMLDOMNode removeChild(IXMLDOMNode childNode);
    [DispIdAttribute("16")]
public abstract virtual IXMLDOMNode appendChild(IXMLDOMNode newChild);
    [DispIdAttribute("17")]
public abstract virtual bool hasChildNodes();
    [DispIdAttribute("18")]
public abstract virtual IXMLDOMDocument get_ownerDocument();
    [DispIdAttribute("19")]
public abstract virtual IXMLDOMNode cloneNode(bool deep);
    [DispIdAttribute("21")]
public abstract virtual string get_nodeTypeString();
    [DispIdAttribute("24")]
public abstract virtual string get_text();
    [DispIdAttribute("24")]
public abstract virtual void set_text(string value);
    [DispIdAttribute("22")]
public abstract virtual bool get_specified();
    [DispIdAttribute("23")]
public abstract virtual IXMLDOMNode get_definition();
    [DispIdAttribute("25")]
public abstract virtual object get_nodeTypedValue();
    [DispIdAttribute("25")]
public abstract virtual void set_nodeTypedValue(object value);
    [DispIdAttribute("26")]
public abstract virtual object get_dataType();
    [DispIdAttribute("26")]
public abstract virtual void set_dataType(object value);
    [DispIdAttribute("27")]
public abstract virtual string get_xml();
    [DispIdAttribute("28")]
public abstract virtual string transformNode(IXMLDOMNode stylesheet);
    [DispIdAttribute("29")]
public abstract virtual IXMLDOMNodeList selectNodes(string queryString);
    [DispIdAttribute("30")]
public abstract virtual IXMLDOMNode selectSingleNode(string queryString);
    [DispIdAttribute("31")]
public abstract virtual bool get_parsed();
    [DispIdAttribute("32")]
public abstract virtual string get_namespaceURI();
    [DispIdAttribute("33")]
public abstract virtual string get_prefix();
    [DispIdAttribute("34")]
public abstract virtual string get_baseName();
    [DispIdAttribute("35")]
public abstract virtual void transformNodeToObject(IXMLDOMNode stylesheet, object outputObject);
    [DispIdAttribute("97")]
public abstract virtual string get_tagName();
    [DispIdAttribute("99")]
public abstract virtual object getAttribute(string name);
    [DispIdAttribute("100")]
public abstract virtual void setAttribute(string name, object value);
    [DispIdAttribute("101")]
public abstract virtual void removeAttribute(string name);
    [DispIdAttribute("102")]
public abstract virtual IXMLDOMAttribute getAttributeNode(string name);
    [DispIdAttribute("103")]
public abstract virtual IXMLDOMAttribute setAttributeNode(IXMLDOMAttribute DOMAttribute);
    [DispIdAttribute("104")]
public abstract virtual IXMLDOMAttribute removeAttributeNode(IXMLDOMAttribute DOMAttribute);
    [DispIdAttribute("105")]
public abstract virtual IXMLDOMNodeList getElementsByTagName(string tagName);
    [DispIdAttribute("106")]
public abstract virtual void normalize();
}
[GuidAttribute("2933BF8D-7B36-11D2-B20E-00C04F983E60")]
public interface MSXML.IXMLDOMEntity {
    [DispIdAttribute("2")]
public string nodeName { get; }
    [DispIdAttribute("3")]
public object nodeValue { get; public set; }
    [ComAliasNameAttribute("MSXML.DOMNodeType")]
[DispIdAttribute("4")]
public DOMNodeType nodeType { get; }
    [DispIdAttribute("6")]
public IXMLDOMNode parentNode { get; }
    [DispIdAttribute("7")]
public IXMLDOMNodeList childNodes { get; }
    [DispIdAttribute("8")]
public IXMLDOMNode firstChild { get; }
    [DispIdAttribute("9")]
public IXMLDOMNode lastChild { get; }
    [DispIdAttribute("10")]
public IXMLDOMNode previousSibling { get; }
    [DispIdAttribute("11")]
public IXMLDOMNode nextSibling { get; }
    [DispIdAttribute("12")]
public IXMLDOMNamedNodeMap attributes { get; }
    [DispIdAttribute("18")]
public IXMLDOMDocument ownerDocument { get; }
    [DispIdAttribute("21")]
public string nodeTypeString { get; }
    [DispIdAttribute("24")]
public string text { get; public set; }
    [DispIdAttribute("22")]
public bool specified { get; }
    [DispIdAttribute("23")]
public IXMLDOMNode definition { get; }
    [DispIdAttribute("25")]
public object nodeTypedValue { get; public set; }
    [DispIdAttribute("26")]
public object dataType { get; public set; }
    [DispIdAttribute("27")]
public string xml { get; }
    [DispIdAttribute("31")]
public bool parsed { get; }
    [DispIdAttribute("32")]
public string namespaceURI { get; }
    [DispIdAttribute("33")]
public string prefix { get; }
    [DispIdAttribute("34")]
public string baseName { get; }
    [DispIdAttribute("140")]
public object publicId { get; }
    [DispIdAttribute("141")]
public object systemId { get; }
    [DispIdAttribute("142")]
public string notationName { get; }
    [DispIdAttribute("2")]
public abstract virtual string get_nodeName();
    [DispIdAttribute("3")]
public abstract virtual object get_nodeValue();
    [DispIdAttribute("3")]
public abstract virtual void set_nodeValue(object value);
    [DispIdAttribute("4")]
public abstract virtual DOMNodeType get_nodeType();
    [DispIdAttribute("6")]
public abstract virtual IXMLDOMNode get_parentNode();
    [DispIdAttribute("7")]
public abstract virtual IXMLDOMNodeList get_childNodes();
    [DispIdAttribute("8")]
public abstract virtual IXMLDOMNode get_firstChild();
    [DispIdAttribute("9")]
public abstract virtual IXMLDOMNode get_lastChild();
    [DispIdAttribute("10")]
public abstract virtual IXMLDOMNode get_previousSibling();
    [DispIdAttribute("11")]
public abstract virtual IXMLDOMNode get_nextSibling();
    [DispIdAttribute("12")]
public abstract virtual IXMLDOMNamedNodeMap get_attributes();
    [DispIdAttribute("13")]
public abstract virtual IXMLDOMNode insertBefore(IXMLDOMNode newChild, object refChild);
    [DispIdAttribute("14")]
public abstract virtual IXMLDOMNode replaceChild(IXMLDOMNode newChild, IXMLDOMNode oldChild);
    [DispIdAttribute("15")]
public abstract virtual IXMLDOMNode removeChild(IXMLDOMNode childNode);
    [DispIdAttribute("16")]
public abstract virtual IXMLDOMNode appendChild(IXMLDOMNode newChild);
    [DispIdAttribute("17")]
public abstract virtual bool hasChildNodes();
    [DispIdAttribute("18")]
public abstract virtual IXMLDOMDocument get_ownerDocument();
    [DispIdAttribute("19")]
public abstract virtual IXMLDOMNode cloneNode(bool deep);
    [DispIdAttribute("21")]
public abstract virtual string get_nodeTypeString();
    [DispIdAttribute("24")]
public abstract virtual string get_text();
    [DispIdAttribute("24")]
public abstract virtual void set_text(string value);
    [DispIdAttribute("22")]
public abstract virtual bool get_specified();
    [DispIdAttribute("23")]
public abstract virtual IXMLDOMNode get_definition();
    [DispIdAttribute("25")]
public abstract virtual object get_nodeTypedValue();
    [DispIdAttribute("25")]
public abstract virtual void set_nodeTypedValue(object value);
    [DispIdAttribute("26")]
public abstract virtual object get_dataType();
    [DispIdAttribute("26")]
public abstract virtual void set_dataType(object value);
    [DispIdAttribute("27")]
public abstract virtual string get_xml();
    [DispIdAttribute("28")]
public abstract virtual string transformNode(IXMLDOMNode stylesheet);
    [DispIdAttribute("29")]
public abstract virtual IXMLDOMNodeList selectNodes(string queryString);
    [DispIdAttribute("30")]
public abstract virtual IXMLDOMNode selectSingleNode(string queryString);
    [DispIdAttribute("31")]
public abstract virtual bool get_parsed();
    [DispIdAttribute("32")]
public abstract virtual string get_namespaceURI();
    [DispIdAttribute("33")]
public abstract virtual string get_prefix();
    [DispIdAttribute("34")]
public abstract virtual string get_baseName();
    [DispIdAttribute("35")]
public abstract virtual void transformNodeToObject(IXMLDOMNode stylesheet, object outputObject);
    [DispIdAttribute("140")]
public abstract virtual object get_publicId();
    [DispIdAttribute("141")]
public abstract virtual object get_systemId();
    [DispIdAttribute("142")]
public abstract virtual string get_notationName();
}
[GuidAttribute("2933BF8E-7B36-11D2-B20E-00C04F983E60")]
public interface MSXML.IXMLDOMEntityReference {
    [DispIdAttribute("2")]
public string nodeName { get; }
    [DispIdAttribute("3")]
public object nodeValue { get; public set; }
    [DispIdAttribute("4")]
[ComAliasNameAttribute("MSXML.DOMNodeType")]
public DOMNodeType nodeType { get; }
    [DispIdAttribute("6")]
public IXMLDOMNode parentNode { get; }
    [DispIdAttribute("7")]
public IXMLDOMNodeList childNodes { get; }
    [DispIdAttribute("8")]
public IXMLDOMNode firstChild { get; }
    [DispIdAttribute("9")]
public IXMLDOMNode lastChild { get; }
    [DispIdAttribute("10")]
public IXMLDOMNode previousSibling { get; }
    [DispIdAttribute("11")]
public IXMLDOMNode nextSibling { get; }
    [DispIdAttribute("12")]
public IXMLDOMNamedNodeMap attributes { get; }
    [DispIdAttribute("18")]
public IXMLDOMDocument ownerDocument { get; }
    [DispIdAttribute("21")]
public string nodeTypeString { get; }
    [DispIdAttribute("24")]
public string text { get; public set; }
    [DispIdAttribute("22")]
public bool specified { get; }
    [DispIdAttribute("23")]
public IXMLDOMNode definition { get; }
    [DispIdAttribute("25")]
public object nodeTypedValue { get; public set; }
    [DispIdAttribute("26")]
public object dataType { get; public set; }
    [DispIdAttribute("27")]
public string xml { get; }
    [DispIdAttribute("31")]
public bool parsed { get; }
    [DispIdAttribute("32")]
public string namespaceURI { get; }
    [DispIdAttribute("33")]
public string prefix { get; }
    [DispIdAttribute("34")]
public string baseName { get; }
    [DispIdAttribute("2")]
public abstract virtual string get_nodeName();
    [DispIdAttribute("3")]
public abstract virtual object get_nodeValue();
    [DispIdAttribute("3")]
public abstract virtual void set_nodeValue(object value);
    [DispIdAttribute("4")]
public abstract virtual DOMNodeType get_nodeType();
    [DispIdAttribute("6")]
public abstract virtual IXMLDOMNode get_parentNode();
    [DispIdAttribute("7")]
public abstract virtual IXMLDOMNodeList get_childNodes();
    [DispIdAttribute("8")]
public abstract virtual IXMLDOMNode get_firstChild();
    [DispIdAttribute("9")]
public abstract virtual IXMLDOMNode get_lastChild();
    [DispIdAttribute("10")]
public abstract virtual IXMLDOMNode get_previousSibling();
    [DispIdAttribute("11")]
public abstract virtual IXMLDOMNode get_nextSibling();
    [DispIdAttribute("12")]
public abstract virtual IXMLDOMNamedNodeMap get_attributes();
    [DispIdAttribute("13")]
public abstract virtual IXMLDOMNode insertBefore(IXMLDOMNode newChild, object refChild);
    [DispIdAttribute("14")]
public abstract virtual IXMLDOMNode replaceChild(IXMLDOMNode newChild, IXMLDOMNode oldChild);
    [DispIdAttribute("15")]
public abstract virtual IXMLDOMNode removeChild(IXMLDOMNode childNode);
    [DispIdAttribute("16")]
public abstract virtual IXMLDOMNode appendChild(IXMLDOMNode newChild);
    [DispIdAttribute("17")]
public abstract virtual bool hasChildNodes();
    [DispIdAttribute("18")]
public abstract virtual IXMLDOMDocument get_ownerDocument();
    [DispIdAttribute("19")]
public abstract virtual IXMLDOMNode cloneNode(bool deep);
    [DispIdAttribute("21")]
public abstract virtual string get_nodeTypeString();
    [DispIdAttribute("24")]
public abstract virtual string get_text();
    [DispIdAttribute("24")]
public abstract virtual void set_text(string value);
    [DispIdAttribute("22")]
public abstract virtual bool get_specified();
    [DispIdAttribute("23")]
public abstract virtual IXMLDOMNode get_definition();
    [DispIdAttribute("25")]
public abstract virtual object get_nodeTypedValue();
    [DispIdAttribute("25")]
public abstract virtual void set_nodeTypedValue(object value);
    [DispIdAttribute("26")]
public abstract virtual object get_dataType();
    [DispIdAttribute("26")]
public abstract virtual void set_dataType(object value);
    [DispIdAttribute("27")]
public abstract virtual string get_xml();
    [DispIdAttribute("28")]
public abstract virtual string transformNode(IXMLDOMNode stylesheet);
    [DispIdAttribute("29")]
public abstract virtual IXMLDOMNodeList selectNodes(string queryString);
    [DispIdAttribute("30")]
public abstract virtual IXMLDOMNode selectSingleNode(string queryString);
    [DispIdAttribute("31")]
public abstract virtual bool get_parsed();
    [DispIdAttribute("32")]
public abstract virtual string get_namespaceURI();
    [DispIdAttribute("33")]
public abstract virtual string get_prefix();
    [DispIdAttribute("34")]
public abstract virtual string get_baseName();
    [DispIdAttribute("35")]
public abstract virtual void transformNodeToObject(IXMLDOMNode stylesheet, object outputObject);
}
[GuidAttribute("2933BF8F-7B36-11D2-B20E-00C04F983E60")]
public interface MSXML.IXMLDOMImplementation {
    [DispIdAttribute("145")]
public abstract virtual bool hasFeature(string feature, string version);
}
[DefaultMemberAttribute("item")]
[GuidAttribute("2933BF83-7B36-11D2-B20E-00C04F983E60")]
public interface MSXML.IXMLDOMNamedNodeMap {
    [DispIdAttribute("0")]
public IXMLDOMNode item { get; }
    [DispIdAttribute("74")]
public int length { get; }
    [DispIdAttribute("83")]
public abstract virtual IXMLDOMNode getNamedItem(string name);
    [DispIdAttribute("84")]
public abstract virtual IXMLDOMNode setNamedItem(IXMLDOMNode newItem);
    [DispIdAttribute("85")]
public abstract virtual IXMLDOMNode removeNamedItem(string name);
    [DispIdAttribute("0")]
public abstract virtual IXMLDOMNode get_item(int index);
    [DispIdAttribute("74")]
public abstract virtual int get_length();
    [DispIdAttribute("87")]
public abstract virtual IXMLDOMNode getQualifiedItem(string baseName, string namespaceURI);
    [DispIdAttribute("88")]
public abstract virtual IXMLDOMNode removeQualifiedItem(string baseName, string namespaceURI);
    [DispIdAttribute("89")]
public abstract virtual IXMLDOMNode nextNode();
    [DispIdAttribute("90")]
public abstract virtual void reset();
    [DispIdAttribute("-4")]
public abstract virtual IEnumerator GetEnumerator();
}
[GuidAttribute("2933BF80-7B36-11D2-B20E-00C04F983E60")]
public interface MSXML.IXMLDOMNode {
    [DispIdAttribute("2")]
public string nodeName { get; }
    [DispIdAttribute("3")]
public object nodeValue { get; public set; }
    [ComAliasNameAttribute("MSXML.DOMNodeType")]
[DispIdAttribute("4")]
public DOMNodeType nodeType { get; }
    [DispIdAttribute("6")]
public IXMLDOMNode parentNode { get; }
    [DispIdAttribute("7")]
public IXMLDOMNodeList childNodes { get; }
    [DispIdAttribute("8")]
public IXMLDOMNode firstChild { get; }
    [DispIdAttribute("9")]
public IXMLDOMNode lastChild { get; }
    [DispIdAttribute("10")]
public IXMLDOMNode previousSibling { get; }
    [DispIdAttribute("11")]
public IXMLDOMNode nextSibling { get; }
    [DispIdAttribute("12")]
public IXMLDOMNamedNodeMap attributes { get; }
    [DispIdAttribute("18")]
public IXMLDOMDocument ownerDocument { get; }
    [DispIdAttribute("21")]
public string nodeTypeString { get; }
    [DispIdAttribute("24")]
public string text { get; public set; }
    [DispIdAttribute("22")]
public bool specified { get; }
    [DispIdAttribute("23")]
public IXMLDOMNode definition { get; }
    [DispIdAttribute("25")]
public object nodeTypedValue { get; public set; }
    [DispIdAttribute("26")]
public object dataType { get; public set; }
    [DispIdAttribute("27")]
public string xml { get; }
    [DispIdAttribute("31")]
public bool parsed { get; }
    [DispIdAttribute("32")]
public string namespaceURI { get; }
    [DispIdAttribute("33")]
public string prefix { get; }
    [DispIdAttribute("34")]
public string baseName { get; }
    [DispIdAttribute("2")]
public abstract virtual string get_nodeName();
    [DispIdAttribute("3")]
public abstract virtual object get_nodeValue();
    [DispIdAttribute("3")]
public abstract virtual void set_nodeValue(object value);
    [DispIdAttribute("4")]
public abstract virtual DOMNodeType get_nodeType();
    [DispIdAttribute("6")]
public abstract virtual IXMLDOMNode get_parentNode();
    [DispIdAttribute("7")]
public abstract virtual IXMLDOMNodeList get_childNodes();
    [DispIdAttribute("8")]
public abstract virtual IXMLDOMNode get_firstChild();
    [DispIdAttribute("9")]
public abstract virtual IXMLDOMNode get_lastChild();
    [DispIdAttribute("10")]
public abstract virtual IXMLDOMNode get_previousSibling();
    [DispIdAttribute("11")]
public abstract virtual IXMLDOMNode get_nextSibling();
    [DispIdAttribute("12")]
public abstract virtual IXMLDOMNamedNodeMap get_attributes();
    [DispIdAttribute("13")]
public abstract virtual IXMLDOMNode insertBefore(IXMLDOMNode newChild, object refChild);
    [DispIdAttribute("14")]
public abstract virtual IXMLDOMNode replaceChild(IXMLDOMNode newChild, IXMLDOMNode oldChild);
    [DispIdAttribute("15")]
public abstract virtual IXMLDOMNode removeChild(IXMLDOMNode childNode);
    [DispIdAttribute("16")]
public abstract virtual IXMLDOMNode appendChild(IXMLDOMNode newChild);
    [DispIdAttribute("17")]
public abstract virtual bool hasChildNodes();
    [DispIdAttribute("18")]
public abstract virtual IXMLDOMDocument get_ownerDocument();
    [DispIdAttribute("19")]
public abstract virtual IXMLDOMNode cloneNode(bool deep);
    [DispIdAttribute("21")]
public abstract virtual string get_nodeTypeString();
    [DispIdAttribute("24")]
public abstract virtual string get_text();
    [DispIdAttribute("24")]
public abstract virtual void set_text(string value);
    [DispIdAttribute("22")]
public abstract virtual bool get_specified();
    [DispIdAttribute("23")]
public abstract virtual IXMLDOMNode get_definition();
    [DispIdAttribute("25")]
public abstract virtual object get_nodeTypedValue();
    [DispIdAttribute("25")]
public abstract virtual void set_nodeTypedValue(object value);
    [DispIdAttribute("26")]
public abstract virtual object get_dataType();
    [DispIdAttribute("26")]
public abstract virtual void set_dataType(object value);
    [DispIdAttribute("27")]
public abstract virtual string get_xml();
    [DispIdAttribute("28")]
public abstract virtual string transformNode(IXMLDOMNode stylesheet);
    [DispIdAttribute("29")]
public abstract virtual IXMLDOMNodeList selectNodes(string queryString);
    [DispIdAttribute("30")]
public abstract virtual IXMLDOMNode selectSingleNode(string queryString);
    [DispIdAttribute("31")]
public abstract virtual bool get_parsed();
    [DispIdAttribute("32")]
public abstract virtual string get_namespaceURI();
    [DispIdAttribute("33")]
public abstract virtual string get_prefix();
    [DispIdAttribute("34")]
public abstract virtual string get_baseName();
    [DispIdAttribute("35")]
public abstract virtual void transformNodeToObject(IXMLDOMNode stylesheet, object outputObject);
}
[DefaultMemberAttribute("item")]
[GuidAttribute("2933BF82-7B36-11D2-B20E-00C04F983E60")]
public interface MSXML.IXMLDOMNodeList {
    [DispIdAttribute("0")]
public IXMLDOMNode item { get; }
    [DispIdAttribute("74")]
public int length { get; }
    [DispIdAttribute("0")]
public abstract virtual IXMLDOMNode get_item(int index);
    [DispIdAttribute("74")]
public abstract virtual int get_length();
    [DispIdAttribute("76")]
public abstract virtual IXMLDOMNode nextNode();
    [DispIdAttribute("77")]
public abstract virtual void reset();
    [DispIdAttribute("-4")]
public abstract virtual IEnumerator GetEnumerator();
}
[GuidAttribute("2933BF8C-7B36-11D2-B20E-00C04F983E60")]
public interface MSXML.IXMLDOMNotation {
    [DispIdAttribute("2")]
public string nodeName { get; }
    [DispIdAttribute("3")]
public object nodeValue { get; public set; }
    [DispIdAttribute("4")]
[ComAliasNameAttribute("MSXML.DOMNodeType")]
public DOMNodeType nodeType { get; }
    [DispIdAttribute("6")]
public IXMLDOMNode parentNode { get; }
    [DispIdAttribute("7")]
public IXMLDOMNodeList childNodes { get; }
    [DispIdAttribute("8")]
public IXMLDOMNode firstChild { get; }
    [DispIdAttribute("9")]
public IXMLDOMNode lastChild { get; }
    [DispIdAttribute("10")]
public IXMLDOMNode previousSibling { get; }
    [DispIdAttribute("11")]
public IXMLDOMNode nextSibling { get; }
    [DispIdAttribute("12")]
public IXMLDOMNamedNodeMap attributes { get; }
    [DispIdAttribute("18")]
public IXMLDOMDocument ownerDocument { get; }
    [DispIdAttribute("21")]
public string nodeTypeString { get; }
    [DispIdAttribute("24")]
public string text { get; public set; }
    [DispIdAttribute("22")]
public bool specified { get; }
    [DispIdAttribute("23")]
public IXMLDOMNode definition { get; }
    [DispIdAttribute("25")]
public object nodeTypedValue { get; public set; }
    [DispIdAttribute("26")]
public object dataType { get; public set; }
    [DispIdAttribute("27")]
public string xml { get; }
    [DispIdAttribute("31")]
public bool parsed { get; }
    [DispIdAttribute("32")]
public string namespaceURI { get; }
    [DispIdAttribute("33")]
public string prefix { get; }
    [DispIdAttribute("34")]
public string baseName { get; }
    [DispIdAttribute("136")]
public object publicId { get; }
    [DispIdAttribute("137")]
public object systemId { get; }
    [DispIdAttribute("2")]
public abstract virtual string get_nodeName();
    [DispIdAttribute("3")]
public abstract virtual object get_nodeValue();
    [DispIdAttribute("3")]
public abstract virtual void set_nodeValue(object value);
    [DispIdAttribute("4")]
public abstract virtual DOMNodeType get_nodeType();
    [DispIdAttribute("6")]
public abstract virtual IXMLDOMNode get_parentNode();
    [DispIdAttribute("7")]
public abstract virtual IXMLDOMNodeList get_childNodes();
    [DispIdAttribute("8")]
public abstract virtual IXMLDOMNode get_firstChild();
    [DispIdAttribute("9")]
public abstract virtual IXMLDOMNode get_lastChild();
    [DispIdAttribute("10")]
public abstract virtual IXMLDOMNode get_previousSibling();
    [DispIdAttribute("11")]
public abstract virtual IXMLDOMNode get_nextSibling();
    [DispIdAttribute("12")]
public abstract virtual IXMLDOMNamedNodeMap get_attributes();
    [DispIdAttribute("13")]
public abstract virtual IXMLDOMNode insertBefore(IXMLDOMNode newChild, object refChild);
    [DispIdAttribute("14")]
public abstract virtual IXMLDOMNode replaceChild(IXMLDOMNode newChild, IXMLDOMNode oldChild);
    [DispIdAttribute("15")]
public abstract virtual IXMLDOMNode removeChild(IXMLDOMNode childNode);
    [DispIdAttribute("16")]
public abstract virtual IXMLDOMNode appendChild(IXMLDOMNode newChild);
    [DispIdAttribute("17")]
public abstract virtual bool hasChildNodes();
    [DispIdAttribute("18")]
public abstract virtual IXMLDOMDocument get_ownerDocument();
    [DispIdAttribute("19")]
public abstract virtual IXMLDOMNode cloneNode(bool deep);
    [DispIdAttribute("21")]
public abstract virtual string get_nodeTypeString();
    [DispIdAttribute("24")]
public abstract virtual string get_text();
    [DispIdAttribute("24")]
public abstract virtual void set_text(string value);
    [DispIdAttribute("22")]
public abstract virtual bool get_specified();
    [DispIdAttribute("23")]
public abstract virtual IXMLDOMNode get_definition();
    [DispIdAttribute("25")]
public abstract virtual object get_nodeTypedValue();
    [DispIdAttribute("25")]
public abstract virtual void set_nodeTypedValue(object value);
    [DispIdAttribute("26")]
public abstract virtual object get_dataType();
    [DispIdAttribute("26")]
public abstract virtual void set_dataType(object value);
    [DispIdAttribute("27")]
public abstract virtual string get_xml();
    [DispIdAttribute("28")]
public abstract virtual string transformNode(IXMLDOMNode stylesheet);
    [DispIdAttribute("29")]
public abstract virtual IXMLDOMNodeList selectNodes(string queryString);
    [DispIdAttribute("30")]
public abstract virtual IXMLDOMNode selectSingleNode(string queryString);
    [DispIdAttribute("31")]
public abstract virtual bool get_parsed();
    [DispIdAttribute("32")]
public abstract virtual string get_namespaceURI();
    [DispIdAttribute("33")]
public abstract virtual string get_prefix();
    [DispIdAttribute("34")]
public abstract virtual string get_baseName();
    [DispIdAttribute("35")]
public abstract virtual void transformNodeToObject(IXMLDOMNode stylesheet, object outputObject);
    [DispIdAttribute("136")]
public abstract virtual object get_publicId();
    [DispIdAttribute("137")]
public abstract virtual object get_systemId();
}
[DefaultMemberAttribute("errorCode")]
[GuidAttribute("3EFAA426-272F-11D2-836F-0000F87A7782")]
public interface MSXML.IXMLDOMParseError {
    [DispIdAttribute("0")]
public int errorCode { get; }
    [DispIdAttribute("179")]
public string url { get; }
    [DispIdAttribute("180")]
public string reason { get; }
    [DispIdAttribute("181")]
public string srcText { get; }
    [DispIdAttribute("182")]
public int line { get; }
    [DispIdAttribute("183")]
public int linepos { get; }
    [DispIdAttribute("184")]
public int filepos { get; }
    [DispIdAttribute("0")]
public abstract virtual int get_errorCode();
    [DispIdAttribute("179")]
public abstract virtual string get_url();
    [DispIdAttribute("180")]
public abstract virtual string get_reason();
    [DispIdAttribute("181")]
public abstract virtual string get_srcText();
    [DispIdAttribute("182")]
public abstract virtual int get_line();
    [DispIdAttribute("183")]
public abstract virtual int get_linepos();
    [DispIdAttribute("184")]
public abstract virtual int get_filepos();
}
[GuidAttribute("2933BF89-7B36-11D2-B20E-00C04F983E60")]
public interface MSXML.IXMLDOMProcessingInstruction {
    [DispIdAttribute("2")]
public string nodeName { get; }
    [DispIdAttribute("3")]
public object nodeValue { get; public set; }
    [ComAliasNameAttribute("MSXML.DOMNodeType")]
[DispIdAttribute("4")]
public DOMNodeType nodeType { get; }
    [DispIdAttribute("6")]
public IXMLDOMNode parentNode { get; }
    [DispIdAttribute("7")]
public IXMLDOMNodeList childNodes { get; }
    [DispIdAttribute("8")]
public IXMLDOMNode firstChild { get; }
    [DispIdAttribute("9")]
public IXMLDOMNode lastChild { get; }
    [DispIdAttribute("10")]
public IXMLDOMNode previousSibling { get; }
    [DispIdAttribute("11")]
public IXMLDOMNode nextSibling { get; }
    [DispIdAttribute("12")]
public IXMLDOMNamedNodeMap attributes { get; }
    [DispIdAttribute("18")]
public IXMLDOMDocument ownerDocument { get; }
    [DispIdAttribute("21")]
public string nodeTypeString { get; }
    [DispIdAttribute("24")]
public string text { get; public set; }
    [DispIdAttribute("22")]
public bool specified { get; }
    [DispIdAttribute("23")]
public IXMLDOMNode definition { get; }
    [DispIdAttribute("25")]
public object nodeTypedValue { get; public set; }
    [DispIdAttribute("26")]
public object dataType { get; public set; }
    [DispIdAttribute("27")]
public string xml { get; }
    [DispIdAttribute("31")]
public bool parsed { get; }
    [DispIdAttribute("32")]
public string namespaceURI { get; }
    [DispIdAttribute("33")]
public string prefix { get; }
    [DispIdAttribute("34")]
public string baseName { get; }
    [DispIdAttribute("127")]
public string target { get; }
    [DispIdAttribute("128")]
public string data { get; public set; }
    [DispIdAttribute("2")]
public abstract virtual string get_nodeName();
    [DispIdAttribute("3")]
public abstract virtual object get_nodeValue();
    [DispIdAttribute("3")]
public abstract virtual void set_nodeValue(object value);
    [DispIdAttribute("4")]
public abstract virtual DOMNodeType get_nodeType();
    [DispIdAttribute("6")]
public abstract virtual IXMLDOMNode get_parentNode();
    [DispIdAttribute("7")]
public abstract virtual IXMLDOMNodeList get_childNodes();
    [DispIdAttribute("8")]
public abstract virtual IXMLDOMNode get_firstChild();
    [DispIdAttribute("9")]
public abstract virtual IXMLDOMNode get_lastChild();
    [DispIdAttribute("10")]
public abstract virtual IXMLDOMNode get_previousSibling();
    [DispIdAttribute("11")]
public abstract virtual IXMLDOMNode get_nextSibling();
    [DispIdAttribute("12")]
public abstract virtual IXMLDOMNamedNodeMap get_attributes();
    [DispIdAttribute("13")]
public abstract virtual IXMLDOMNode insertBefore(IXMLDOMNode newChild, object refChild);
    [DispIdAttribute("14")]
public abstract virtual IXMLDOMNode replaceChild(IXMLDOMNode newChild, IXMLDOMNode oldChild);
    [DispIdAttribute("15")]
public abstract virtual IXMLDOMNode removeChild(IXMLDOMNode childNode);
    [DispIdAttribute("16")]
public abstract virtual IXMLDOMNode appendChild(IXMLDOMNode newChild);
    [DispIdAttribute("17")]
public abstract virtual bool hasChildNodes();
    [DispIdAttribute("18")]
public abstract virtual IXMLDOMDocument get_ownerDocument();
    [DispIdAttribute("19")]
public abstract virtual IXMLDOMNode cloneNode(bool deep);
    [DispIdAttribute("21")]
public abstract virtual string get_nodeTypeString();
    [DispIdAttribute("24")]
public abstract virtual string get_text();
    [DispIdAttribute("24")]
public abstract virtual void set_text(string value);
    [DispIdAttribute("22")]
public abstract virtual bool get_specified();
    [DispIdAttribute("23")]
public abstract virtual IXMLDOMNode get_definition();
    [DispIdAttribute("25")]
public abstract virtual object get_nodeTypedValue();
    [DispIdAttribute("25")]
public abstract virtual void set_nodeTypedValue(object value);
    [DispIdAttribute("26")]
public abstract virtual object get_dataType();
    [DispIdAttribute("26")]
public abstract virtual void set_dataType(object value);
    [DispIdAttribute("27")]
public abstract virtual string get_xml();
    [DispIdAttribute("28")]
public abstract virtual string transformNode(IXMLDOMNode stylesheet);
    [DispIdAttribute("29")]
public abstract virtual IXMLDOMNodeList selectNodes(string queryString);
    [DispIdAttribute("30")]
public abstract virtual IXMLDOMNode selectSingleNode(string queryString);
    [DispIdAttribute("31")]
public abstract virtual bool get_parsed();
    [DispIdAttribute("32")]
public abstract virtual string get_namespaceURI();
    [DispIdAttribute("33")]
public abstract virtual string get_prefix();
    [DispIdAttribute("34")]
public abstract virtual string get_baseName();
    [DispIdAttribute("35")]
public abstract virtual void transformNodeToObject(IXMLDOMNode stylesheet, object outputObject);
    [DispIdAttribute("127")]
public abstract virtual string get_target();
    [DispIdAttribute("128")]
public abstract virtual string get_data();
    [DispIdAttribute("128")]
public abstract virtual void set_data(string value);
}
[GuidAttribute("2933BF87-7B36-11D2-B20E-00C04F983E60")]
public interface MSXML.IXMLDOMText {
    [DispIdAttribute("2")]
public string nodeName { get; }
    [DispIdAttribute("3")]
public object nodeValue { get; public set; }
    [DispIdAttribute("4")]
[ComAliasNameAttribute("MSXML.DOMNodeType")]
public DOMNodeType nodeType { get; }
    [DispIdAttribute("6")]
public IXMLDOMNode parentNode { get; }
    [DispIdAttribute("7")]
public IXMLDOMNodeList childNodes { get; }
    [DispIdAttribute("8")]
public IXMLDOMNode firstChild { get; }
    [DispIdAttribute("9")]
public IXMLDOMNode lastChild { get; }
    [DispIdAttribute("10")]
public IXMLDOMNode previousSibling { get; }
    [DispIdAttribute("11")]
public IXMLDOMNode nextSibling { get; }
    [DispIdAttribute("12")]
public IXMLDOMNamedNodeMap attributes { get; }
    [DispIdAttribute("18")]
public IXMLDOMDocument ownerDocument { get; }
    [DispIdAttribute("21")]
public string nodeTypeString { get; }
    [DispIdAttribute("24")]
public string text { get; public set; }
    [DispIdAttribute("22")]
public bool specified { get; }
    [DispIdAttribute("23")]
public IXMLDOMNode definition { get; }
    [DispIdAttribute("25")]
public object nodeTypedValue { get; public set; }
    [DispIdAttribute("26")]
public object dataType { get; public set; }
    [DispIdAttribute("27")]
public string xml { get; }
    [DispIdAttribute("31")]
public bool parsed { get; }
    [DispIdAttribute("32")]
public string namespaceURI { get; }
    [DispIdAttribute("33")]
public string prefix { get; }
    [DispIdAttribute("34")]
public string baseName { get; }
    [DispIdAttribute("109")]
public string data { get; public set; }
    [DispIdAttribute("110")]
public int length { get; }
    [DispIdAttribute("2")]
public abstract virtual string get_nodeName();
    [DispIdAttribute("3")]
public abstract virtual object get_nodeValue();
    [DispIdAttribute("3")]
public abstract virtual void set_nodeValue(object value);
    [DispIdAttribute("4")]
public abstract virtual DOMNodeType get_nodeType();
    [DispIdAttribute("6")]
public abstract virtual IXMLDOMNode get_parentNode();
    [DispIdAttribute("7")]
public abstract virtual IXMLDOMNodeList get_childNodes();
    [DispIdAttribute("8")]
public abstract virtual IXMLDOMNode get_firstChild();
    [DispIdAttribute("9")]
public abstract virtual IXMLDOMNode get_lastChild();
    [DispIdAttribute("10")]
public abstract virtual IXMLDOMNode get_previousSibling();
    [DispIdAttribute("11")]
public abstract virtual IXMLDOMNode get_nextSibling();
    [DispIdAttribute("12")]
public abstract virtual IXMLDOMNamedNodeMap get_attributes();
    [DispIdAttribute("13")]
public abstract virtual IXMLDOMNode insertBefore(IXMLDOMNode newChild, object refChild);
    [DispIdAttribute("14")]
public abstract virtual IXMLDOMNode replaceChild(IXMLDOMNode newChild, IXMLDOMNode oldChild);
    [DispIdAttribute("15")]
public abstract virtual IXMLDOMNode removeChild(IXMLDOMNode childNode);
    [DispIdAttribute("16")]
public abstract virtual IXMLDOMNode appendChild(IXMLDOMNode newChild);
    [DispIdAttribute("17")]
public abstract virtual bool hasChildNodes();
    [DispIdAttribute("18")]
public abstract virtual IXMLDOMDocument get_ownerDocument();
    [DispIdAttribute("19")]
public abstract virtual IXMLDOMNode cloneNode(bool deep);
    [DispIdAttribute("21")]
public abstract virtual string get_nodeTypeString();
    [DispIdAttribute("24")]
public abstract virtual string get_text();
    [DispIdAttribute("24")]
public abstract virtual void set_text(string value);
    [DispIdAttribute("22")]
public abstract virtual bool get_specified();
    [DispIdAttribute("23")]
public abstract virtual IXMLDOMNode get_definition();
    [DispIdAttribute("25")]
public abstract virtual object get_nodeTypedValue();
    [DispIdAttribute("25")]
public abstract virtual void set_nodeTypedValue(object value);
    [DispIdAttribute("26")]
public abstract virtual object get_dataType();
    [DispIdAttribute("26")]
public abstract virtual void set_dataType(object value);
    [DispIdAttribute("27")]
public abstract virtual string get_xml();
    [DispIdAttribute("28")]
public abstract virtual string transformNode(IXMLDOMNode stylesheet);
    [DispIdAttribute("29")]
public abstract virtual IXMLDOMNodeList selectNodes(string queryString);
    [DispIdAttribute("30")]
public abstract virtual IXMLDOMNode selectSingleNode(string queryString);
    [DispIdAttribute("31")]
public abstract virtual bool get_parsed();
    [DispIdAttribute("32")]
public abstract virtual string get_namespaceURI();
    [DispIdAttribute("33")]
public abstract virtual string get_prefix();
    [DispIdAttribute("34")]
public abstract virtual string get_baseName();
    [DispIdAttribute("35")]
public abstract virtual void transformNodeToObject(IXMLDOMNode stylesheet, object outputObject);
    [DispIdAttribute("109")]
public abstract virtual string get_data();
    [DispIdAttribute("109")]
public abstract virtual void set_data(string value);
    [DispIdAttribute("110")]
public abstract virtual int get_length();
    [DispIdAttribute("111")]
public abstract virtual string substringData(int offset, int count);
    [DispIdAttribute("112")]
public abstract virtual void appendData(string data);
    [DispIdAttribute("113")]
public abstract virtual void insertData(int offset, string data);
    [DispIdAttribute("114")]
public abstract virtual void deleteData(int offset, int count);
    [DispIdAttribute("115")]
public abstract virtual void replaceData(int offset, int count, string data);
    [DispIdAttribute("123")]
public abstract virtual IXMLDOMText splitText(int offset);
}
[GuidAttribute("310AFA62-0575-11D2-9CA9-0060B0EC3D39")]
public interface MSXML.IXMLDSOControl {
    [DispIdAttribute("65537")]
public IXMLDOMDocument XMLDocument { get; public set; }
    [DispIdAttribute("65538")]
public int JavaDSOCompatible { get; public set; }
    [DispIdAttribute("-525")]
public int readyState { get; }
    [DispIdAttribute("65537")]
public abstract virtual IXMLDOMDocument get_XMLDocument();
    [DispIdAttribute("65537")]
public abstract virtual void set_XMLDocument(IXMLDOMDocument value);
    [DispIdAttribute("65538")]
public abstract virtual int get_JavaDSOCompatible();
    [DispIdAttribute("65538")]
public abstract virtual void set_JavaDSOCompatible(int value);
    [DispIdAttribute("-525")]
public abstract virtual int get_readyState();
}
[GuidAttribute("3F7F31AC-E15F-11D0-9C25-00C04FC99C8E")]
public interface MSXML.IXMLElement {
    [DispIdAttribute("65737")]
public string tagName { get; public set; }
    [DispIdAttribute("65738")]
public IXMLElement parent { get; }
    [DispIdAttribute("65742")]
public IXMLElementCollection children { get; }
    [DispIdAttribute("65743")]
public int type { get; }
    [DispIdAttribute("65744")]
public string text { get; public set; }
    [DispIdAttribute("65737")]
public abstract virtual string get_tagName();
    [DispIdAttribute("65737")]
public abstract virtual void set_tagName(string value);
    [DispIdAttribute("65738")]
public abstract virtual IXMLElement get_parent();
    [DispIdAttribute("65739")]
public abstract virtual void setAttribute(string strPropertyName, object PropertyValue);
    [DispIdAttribute("65740")]
public abstract virtual object getAttribute(string strPropertyName);
    [DispIdAttribute("65741")]
public abstract virtual void removeAttribute(string strPropertyName);
    [DispIdAttribute("65742")]
public abstract virtual IXMLElementCollection get_children();
    [DispIdAttribute("65743")]
public abstract virtual int get_type();
    [DispIdAttribute("65744")]
public abstract virtual string get_text();
    [DispIdAttribute("65744")]
public abstract virtual void set_text(string value);
    [DispIdAttribute("65745")]
public abstract virtual void addChild(IXMLElement pChildElem, int lIndex, int lReserved);
    [DispIdAttribute("65746")]
public abstract virtual void removeChild(IXMLElement pChildElem);
}
[GuidAttribute("2B8DE2FF-8D2D-11D1-B2FC-00C04FD915A9")]
public interface MSXML.IXMLElement2 {
    [DispIdAttribute("65737")]
public string tagName { get; public set; }
    [DispIdAttribute("65738")]
public IXMLElement2 parent { get; }
    [DispIdAttribute("65742")]
public IXMLElementCollection children { get; }
    [DispIdAttribute("65743")]
public int type { get; }
    [DispIdAttribute("65744")]
public string text { get; public set; }
    [DispIdAttribute("65747")]
public IXMLElementCollection attributes { get; }
    [DispIdAttribute("65737")]
public abstract virtual string get_tagName();
    [DispIdAttribute("65737")]
public abstract virtual void set_tagName(string value);
    [DispIdAttribute("65738")]
public abstract virtual IXMLElement2 get_parent();
    [DispIdAttribute("65739")]
public abstract virtual void setAttribute(string strPropertyName, object PropertyValue);
    [DispIdAttribute("65740")]
public abstract virtual object getAttribute(string strPropertyName);
    [DispIdAttribute("65741")]
public abstract virtual void removeAttribute(string strPropertyName);
    [DispIdAttribute("65742")]
public abstract virtual IXMLElementCollection get_children();
    [DispIdAttribute("65743")]
public abstract virtual int get_type();
    [DispIdAttribute("65744")]
public abstract virtual string get_text();
    [DispIdAttribute("65744")]
public abstract virtual void set_text(string value);
    [DispIdAttribute("65745")]
public abstract virtual void addChild(IXMLElement2 pChildElem, int lIndex, int lReserved);
    [DispIdAttribute("65746")]
public abstract virtual void removeChild(IXMLElement2 pChildElem);
    [DispIdAttribute("65747")]
public abstract virtual IXMLElementCollection get_attributes();
}
[GuidAttribute("65725580-9B5D-11D0-9BFE-00C04FC99C8E")]
public interface MSXML.IXMLElementCollection {
    [DispIdAttribute("65537")]
public int length { get; public set; }
    [DispIdAttribute("65537")]
public abstract virtual int get_length();
    [DispIdAttribute("65537")]
public abstract virtual void set_length(int value);
    [DispIdAttribute("-4")]
public abstract virtual IEnumerator GetEnumerator();
    [DispIdAttribute("65539")]
public abstract virtual object item(object var1, object var2);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("948C5AD3-C58D-11D0-9C0B-00C04FC99C8E")]
public interface MSXML.IXMLError {
    public abstract virtual void GetErrorInfo(_xml_error& pErrorReturn);
}
[GuidAttribute("ED8C108D-4349-11D2-91A4-00C04F7969E8")]
public interface MSXML.IXMLHttpRequest {
    [DispIdAttribute("7")]
public int status { get; }
    [DispIdAttribute("8")]
public string statusText { get; }
    [DispIdAttribute("9")]
public object responseXML { get; }
    [DispIdAttribute("10")]
public string responseText { get; }
    [DispIdAttribute("11")]
public object responseBody { get; }
    [DispIdAttribute("12")]
public object responseStream { get; }
    [DispIdAttribute("13")]
public int readyState { get; }
    [DispIdAttribute("14")]
unknown object onreadystatechange {public set; }
    [DispIdAttribute("1")]
public abstract virtual void open(string bstrMethod, string bstrUrl, object varAsync, object bstrUser, object bstrPassword);
    [DispIdAttribute("2")]
public abstract virtual void setRequestHeader(string bstrHeader, string bstrValue);
    [DispIdAttribute("3")]
public abstract virtual string getResponseHeader(string bstrHeader);
    [DispIdAttribute("4")]
public abstract virtual string getAllResponseHeaders();
    [DispIdAttribute("5")]
public abstract virtual void send(object varBody);
    [DispIdAttribute("6")]
public abstract virtual void abort();
    [DispIdAttribute("7")]
public abstract virtual int get_status();
    [DispIdAttribute("8")]
public abstract virtual string get_statusText();
    [DispIdAttribute("9")]
public abstract virtual object get_responseXML();
    [DispIdAttribute("10")]
public abstract virtual string get_responseText();
    [DispIdAttribute("11")]
public abstract virtual object get_responseBody();
    [DispIdAttribute("12")]
public abstract virtual object get_responseStream();
    [DispIdAttribute("13")]
public abstract virtual int get_readyState();
    [DispIdAttribute("14")]
public abstract virtual void set_onreadystatechange(object value);
}
[GuidAttribute("3EFAA425-272F-11D2-836F-0000F87A7782")]
public interface MSXML.IXTLRuntime {
    [DispIdAttribute("2")]
public string nodeName { get; }
    [DispIdAttribute("3")]
public object nodeValue { get; public set; }
    [DispIdAttribute("4")]
[ComAliasNameAttribute("MSXML.DOMNodeType")]
public DOMNodeType nodeType { get; }
    [DispIdAttribute("6")]
public IXMLDOMNode parentNode { get; }
    [DispIdAttribute("7")]
public IXMLDOMNodeList childNodes { get; }
    [DispIdAttribute("8")]
public IXMLDOMNode firstChild { get; }
    [DispIdAttribute("9")]
public IXMLDOMNode lastChild { get; }
    [DispIdAttribute("10")]
public IXMLDOMNode previousSibling { get; }
    [DispIdAttribute("11")]
public IXMLDOMNode nextSibling { get; }
    [DispIdAttribute("12")]
public IXMLDOMNamedNodeMap attributes { get; }
    [DispIdAttribute("18")]
public IXMLDOMDocument ownerDocument { get; }
    [DispIdAttribute("21")]
public string nodeTypeString { get; }
    [DispIdAttribute("24")]
public string text { get; public set; }
    [DispIdAttribute("22")]
public bool specified { get; }
    [DispIdAttribute("23")]
public IXMLDOMNode definition { get; }
    [DispIdAttribute("25")]
public object nodeTypedValue { get; public set; }
    [DispIdAttribute("26")]
public object dataType { get; public set; }
    [DispIdAttribute("27")]
public string xml { get; }
    [DispIdAttribute("31")]
public bool parsed { get; }
    [DispIdAttribute("32")]
public string namespaceURI { get; }
    [DispIdAttribute("33")]
public string prefix { get; }
    [DispIdAttribute("34")]
public string baseName { get; }
    [DispIdAttribute("2")]
public abstract virtual string get_nodeName();
    [DispIdAttribute("3")]
public abstract virtual object get_nodeValue();
    [DispIdAttribute("3")]
public abstract virtual void set_nodeValue(object value);
    [DispIdAttribute("4")]
public abstract virtual DOMNodeType get_nodeType();
    [DispIdAttribute("6")]
public abstract virtual IXMLDOMNode get_parentNode();
    [DispIdAttribute("7")]
public abstract virtual IXMLDOMNodeList get_childNodes();
    [DispIdAttribute("8")]
public abstract virtual IXMLDOMNode get_firstChild();
    [DispIdAttribute("9")]
public abstract virtual IXMLDOMNode get_lastChild();
    [DispIdAttribute("10")]
public abstract virtual IXMLDOMNode get_previousSibling();
    [DispIdAttribute("11")]
public abstract virtual IXMLDOMNode get_nextSibling();
    [DispIdAttribute("12")]
public abstract virtual IXMLDOMNamedNodeMap get_attributes();
    [DispIdAttribute("13")]
public abstract virtual IXMLDOMNode insertBefore(IXMLDOMNode newChild, object refChild);
    [DispIdAttribute("14")]
public abstract virtual IXMLDOMNode replaceChild(IXMLDOMNode newChild, IXMLDOMNode oldChild);
    [DispIdAttribute("15")]
public abstract virtual IXMLDOMNode removeChild(IXMLDOMNode childNode);
    [DispIdAttribute("16")]
public abstract virtual IXMLDOMNode appendChild(IXMLDOMNode newChild);
    [DispIdAttribute("17")]
public abstract virtual bool hasChildNodes();
    [DispIdAttribute("18")]
public abstract virtual IXMLDOMDocument get_ownerDocument();
    [DispIdAttribute("19")]
public abstract virtual IXMLDOMNode cloneNode(bool deep);
    [DispIdAttribute("21")]
public abstract virtual string get_nodeTypeString();
    [DispIdAttribute("24")]
public abstract virtual string get_text();
    [DispIdAttribute("24")]
public abstract virtual void set_text(string value);
    [DispIdAttribute("22")]
public abstract virtual bool get_specified();
    [DispIdAttribute("23")]
public abstract virtual IXMLDOMNode get_definition();
    [DispIdAttribute("25")]
public abstract virtual object get_nodeTypedValue();
    [DispIdAttribute("25")]
public abstract virtual void set_nodeTypedValue(object value);
    [DispIdAttribute("26")]
public abstract virtual object get_dataType();
    [DispIdAttribute("26")]
public abstract virtual void set_dataType(object value);
    [DispIdAttribute("27")]
public abstract virtual string get_xml();
    [DispIdAttribute("28")]
public abstract virtual string transformNode(IXMLDOMNode stylesheet);
    [DispIdAttribute("29")]
public abstract virtual IXMLDOMNodeList selectNodes(string queryString);
    [DispIdAttribute("30")]
public abstract virtual IXMLDOMNode selectSingleNode(string queryString);
    [DispIdAttribute("31")]
public abstract virtual bool get_parsed();
    [DispIdAttribute("32")]
public abstract virtual string get_namespaceURI();
    [DispIdAttribute("33")]
public abstract virtual string get_prefix();
    [DispIdAttribute("34")]
public abstract virtual string get_baseName();
    [DispIdAttribute("35")]
public abstract virtual void transformNodeToObject(IXMLDOMNode stylesheet, object outputObject);
    [DispIdAttribute("187")]
public abstract virtual int uniqueID(IXMLDOMNode pNode);
    [DispIdAttribute("188")]
public abstract virtual int depth(IXMLDOMNode pNode);
    [DispIdAttribute("189")]
public abstract virtual int childNumber(IXMLDOMNode pNode);
    [DispIdAttribute("190")]
public abstract virtual int ancestorChildNumber(string bstrNodeName, IXMLDOMNode pNode);
    [DispIdAttribute("191")]
public abstract virtual int absoluteChildNumber(IXMLDOMNode pNode);
    [DispIdAttribute("192")]
public abstract virtual string formatIndex(int lIndex, string bstrFormat);
    [DispIdAttribute("193")]
public abstract virtual string formatNumber(double dblNumber, string bstrFormat);
    [DispIdAttribute("194")]
public abstract virtual string formatDate(object varDate, string bstrFormat, object varDestLocale);
    [DispIdAttribute("195")]
public abstract virtual string formatTime(object varTime, string bstrFormat, object varDestLocale);
}
public enum MSXML.tagDOMNodeType : Enum {
    public int value__;
    public static tagDOMNodeType NODE_INVALID;
    public static tagDOMNodeType NODE_ELEMENT;
    public static tagDOMNodeType NODE_ATTRIBUTE;
    public static tagDOMNodeType NODE_TEXT;
    public static tagDOMNodeType NODE_CDATA_SECTION;
    public static tagDOMNodeType NODE_ENTITY_REFERENCE;
    public static tagDOMNodeType NODE_ENTITY;
    public static tagDOMNodeType NODE_PROCESSING_INSTRUCTION;
    public static tagDOMNodeType NODE_COMMENT;
    public static tagDOMNodeType NODE_DOCUMENT;
    public static tagDOMNodeType NODE_DOCUMENT_TYPE;
    public static tagDOMNodeType NODE_DOCUMENT_FRAGMENT;
    public static tagDOMNodeType NODE_NOTATION;
}
public enum MSXML.tagXMLEMEM_TYPE : Enum {
    public int value__;
    public static tagXMLEMEM_TYPE XMLELEMTYPE_ELEMENT;
    public static tagXMLEMEM_TYPE XMLELEMTYPE_TEXT;
    public static tagXMLEMEM_TYPE XMLELEMTYPE_COMMENT;
    public static tagXMLEMEM_TYPE XMLELEMTYPE_DOCUMENT;
    public static tagXMLEMEM_TYPE XMLELEMTYPE_DTD;
    public static tagXMLEMEM_TYPE XMLELEMTYPE_PI;
    public static tagXMLEMEM_TYPE XMLELEMTYPE_OTHER;
}
[CoClassAttribute("MSXML.XMLDocumentClass")]
[GuidAttribute("2B8DE2FE-8D2D-11D1-B2FC-00C04FD915A9")]
public interface MSXML.XMLDocument {
}
[ClassInterfaceAttribute("0")]
[GuidAttribute("CFC399AF-D876-11D0-9C10-00C04FC99C8E")]
public class MSXML.XMLDocumentClass : object {
}
[InterfaceTypeAttribute("2")]
[GuidAttribute("3EFAA427-272F-11D2-836F-0000F87A7782")]
public interface MSXML.XMLDOMDocumentEvents {
    [DispIdAttribute("198")]
public abstract virtual void ondataavailable();
    [DispIdAttribute("-609")]
public abstract virtual void onreadystatechange();
}
[ComVisibleAttribute("False")]
[ComEventInterfaceAttribute("MSXML.XMLDOMDocumentEvents", "MSXML.XMLDOMDocumentEvents_EventProvider")]
public interface MSXML.XMLDOMDocumentEvents_Event {
    [CompilerGeneratedAttribute]
public abstract virtual void add_ondataavailable(XMLDOMDocumentEvents_ondataavailableEventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_ondataavailable(XMLDOMDocumentEvents_ondataavailableEventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_onreadystatechange(XMLDOMDocumentEvents_onreadystatechangeEventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_onreadystatechange(XMLDOMDocumentEvents_onreadystatechangeEventHandler value);
}
internal class MSXML.XMLDOMDocumentEvents_EventProvider : object {
    private IConnectionPointContainer m_ConnectionPointContainer;
    private ArrayList m_aEventSinkHelpers;
    private IConnectionPoint m_ConnectionPoint;
    public XMLDOMDocumentEvents_EventProvider(object A_1);
    private void Init();
    public sealed virtual void add_ondataavailable(XMLDOMDocumentEvents_ondataavailableEventHandler value);
    public sealed virtual void remove_ondataavailable(XMLDOMDocumentEvents_ondataavailableEventHandler value);
    private void AddOnDataAvailable(XMLDOMDocumentEvents_ondataavailableEventHandler A_1);
    private void RemoveOnDataAvailable(XMLDOMDocumentEvents_ondataavailableEventHandler A_1);
    public sealed virtual void add_onreadystatechange(XMLDOMDocumentEvents_onreadystatechangeEventHandler value);
    public sealed virtual void remove_onreadystatechange(XMLDOMDocumentEvents_onreadystatechangeEventHandler value);
    private void AddOnReadyStateChange(XMLDOMDocumentEvents_onreadystatechangeEventHandler A_1);
    private void RemoveOnReadyStateChange(XMLDOMDocumentEvents_onreadystatechangeEventHandler A_1);
    protected virtual override void Finalize();
    public sealed virtual void Dispose();
    private void Dispose(bool disposing);
}
public class MSXML.XMLDOMDocumentEvents_ondataavailableEventHandler : MulticastDelegate {
    public XMLDOMDocumentEvents_ondataavailableEventHandler(object object, IntPtr method);
    public virtual void Invoke();
    public virtual IAsyncResult BeginInvoke(AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
[ComVisibleAttribute("False")]
public class MSXML.XMLDOMDocumentEvents_onreadystatechangeEventHandler : MulticastDelegate {
    public XMLDOMDocumentEvents_onreadystatechangeEventHandler(object object, IntPtr method);
    public virtual void Invoke();
    public virtual IAsyncResult BeginInvoke(AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
[ClassInterfaceAttribute("0")]
public class MSXML.XMLDOMDocumentEvents_SinkHelper : object {
    public XMLDOMDocumentEvents_ondataavailableEventHandler m_ondataavailableDelegate;
    public XMLDOMDocumentEvents_onreadystatechangeEventHandler m_onreadystatechangeDelegate;
    public int m_dwCookie;
    public sealed virtual void ondataavailable();
    public sealed virtual void onreadystatechange();
}
[CoClassAttribute("MSXML.XMLDSOControlClass")]
[GuidAttribute("310AFA62-0575-11D2-9CA9-0060B0EC3D39")]
public interface MSXML.XMLDSOControl {
}
[GuidAttribute("550DDA30-0541-11D2-9CA9-0060B0EC3D39")]
[ClassInterfaceAttribute("0")]
public class MSXML.XMLDSOControlClass : object {
}
public enum MSXML.XMLELEM_TYPE : Enum {
    public int value__;
    public static XMLELEM_TYPE XMLELEMTYPE_ELEMENT;
    public static XMLELEM_TYPE XMLELEMTYPE_TEXT;
    public static XMLELEM_TYPE XMLELEMTYPE_COMMENT;
    public static XMLELEM_TYPE XMLELEMTYPE_DOCUMENT;
    public static XMLELEM_TYPE XMLELEMTYPE_DTD;
    public static XMLELEM_TYPE XMLELEMTYPE_PI;
    public static XMLELEM_TYPE XMLELEMTYPE_OTHER;
}
[GuidAttribute("ED8C108D-4349-11D2-91A4-00C04F7969E8")]
[CoClassAttribute("MSXML.XMLHTTPRequestClass")]
public interface MSXML.XMLHTTPRequest {
}
[GuidAttribute("ED8C108E-4349-11D2-91A4-00C04F7969E8")]
[ClassInterfaceAttribute("0")]
public class MSXML.XMLHTTPRequestClass : object {
}
[ComConversionLossAttribute]
public class stdole.DISPPARAMS : ValueType {
    [ComConversionLossAttribute]
public IntPtr rgvarg;
    [ComConversionLossAttribute]
public IntPtr rgdispidNamedArgs;
    public UInt32 cArgs;
    public UInt32 cNamedArgs;
}
[ComConversionLossAttribute]
public class stdole.EXCEPINFO : ValueType {
    public ushort wCode;
    public ushort wReserved;
    public string bstrSource;
    public string bstrDescription;
    public string bstrHelpFile;
    public UInt32 dwHelpContext;
    [ComConversionLossAttribute]
public IntPtr pvReserved;
    [ComConversionLossAttribute]
public IntPtr pfnDeferredFillIn;
    public int scode;
}
[DefaultMemberAttribute("Name")]
[GuidAttribute("BEF6E003-A874-101A-8BBA-00AA00300CAB")]
[InterfaceTypeAttribute("2")]
public interface stdole.Font {
    [DispIdAttribute("0")]
public string Name { get; public set; }
    [DispIdAttribute("2")]
public decimal Size { get; public set; }
    [DispIdAttribute("3")]
public bool Bold { get; public set; }
    [DispIdAttribute("4")]
public bool Italic { get; public set; }
    [DispIdAttribute("5")]
public bool Underline { get; public set; }
    [DispIdAttribute("6")]
public bool Strikethrough { get; public set; }
    [DispIdAttribute("7")]
public short Weight { get; public set; }
    [DispIdAttribute("8")]
public short Charset { get; public set; }
    [DispIdAttribute("0")]
public abstract virtual string get_Name();
    [DispIdAttribute("0")]
public abstract virtual void set_Name(string value);
    [DispIdAttribute("2")]
public abstract virtual decimal get_Size();
    [DispIdAttribute("2")]
public abstract virtual void set_Size(decimal value);
    [DispIdAttribute("3")]
public abstract virtual bool get_Bold();
    [DispIdAttribute("3")]
public abstract virtual void set_Bold(bool value);
    [DispIdAttribute("4")]
public abstract virtual bool get_Italic();
    [DispIdAttribute("4")]
public abstract virtual void set_Italic(bool value);
    [DispIdAttribute("5")]
public abstract virtual bool get_Underline();
    [DispIdAttribute("5")]
public abstract virtual void set_Underline(bool value);
    [DispIdAttribute("6")]
public abstract virtual bool get_Strikethrough();
    [DispIdAttribute("6")]
public abstract virtual void set_Strikethrough(bool value);
    [DispIdAttribute("7")]
public abstract virtual short get_Weight();
    [DispIdAttribute("7")]
public abstract virtual void set_Weight(short value);
    [DispIdAttribute("8")]
public abstract virtual short get_Charset();
    [DispIdAttribute("8")]
public abstract virtual void set_Charset(short value);
}
[GuidAttribute("4EF6100A-AF88-11D0-9846-00C04FC29993")]
[InterfaceTypeAttribute("2")]
public interface stdole.FontEvents {
    [DispIdAttribute("9")]
public abstract virtual void FontChanged(string PropertyName);
}
[ComVisibleAttribute("False")]
[ComEventInterfaceAttribute("stdole.FontEvents", "stdole.FontEvents_EventProvider")]
public interface stdole.FontEvents_Event {
    [CompilerGeneratedAttribute]
public abstract virtual void add_FontChanged(FontEvents_FontChangedEventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_FontChanged(FontEvents_FontChangedEventHandler value);
}
internal class stdole.FontEvents_EventProvider : object {
    private IConnectionPointContainer m_ConnectionPointContainer;
    private ArrayList m_aEventSinkHelpers;
    private IConnectionPoint m_ConnectionPoint;
    public FontEvents_EventProvider(object A_1);
    private void Init();
    public sealed virtual void add_FontChanged(FontEvents_FontChangedEventHandler value);
    public sealed virtual void remove_FontChanged(FontEvents_FontChangedEventHandler value);
    private void AddFontChanged(FontEvents_FontChangedEventHandler A_1);
    private void RemoveFontChanged(FontEvents_FontChangedEventHandler A_1);
    protected virtual override void Finalize();
    public sealed virtual void Dispose();
    private void Dispose(bool disposing);
}
[ComVisibleAttribute("False")]
public class stdole.FontEvents_FontChangedEventHandler : MulticastDelegate {
    public FontEvents_FontChangedEventHandler(object object, IntPtr method);
    public virtual void Invoke(string PropertyName);
    public virtual IAsyncResult BeginInvoke(string PropertyName, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
[ClassInterfaceAttribute("0")]
internal class stdole.FontEvents_SinkHelper : object {
    public FontEvents_FontChangedEventHandler m_FontChangedDelegate;
    public int m_dwCookie;
    public sealed virtual void FontChanged(string A_1);
}
public class stdole.GUID : ValueType {
    public UInt32 Data1;
    public ushort Data2;
    public ushort Data3;
    public Byte[] Data4;
}
[GuidAttribute("00020404-0000-0000-C000-000000000046")]
[InterfaceTypeAttribute("1")]
public interface stdole.IEnumVARIANT {
    public abstract virtual void Next(UInt32 celt, Object& rgvar, UInt32& pceltFetched);
    public abstract virtual void Skip(UInt32 celt);
    public abstract virtual void Reset();
    public abstract virtual void Clone(IEnumerator& ppenum);
}
[ComVisibleAttribute("False")]
[GuidAttribute("BEF6E002-A874-101A-8BBA-00AA00300CAB")]
[InterfaceTypeAttribute("1")]
public interface stdole.IFont {
    public string Name { get; public set; }
    public ulong Size { get; public set; }
    public bool Bold { get; public set; }
    public bool Italic { get; public set; }
    public bool Underline { get; public set; }
    public bool Strikethrough { get; public set; }
    public short Weight { get; public set; }
    public short Charset { get; public set; }
    [ComAliasNameAttribute("stdole.OLE_HANDLE")]
public int hFont { get; }
    public abstract virtual string get_Name();
    public abstract virtual void set_Name(string value);
    public abstract virtual ulong get_Size();
    public abstract virtual void set_Size(ulong value);
    public abstract virtual bool get_Bold();
    public abstract virtual void set_Bold(bool value);
    public abstract virtual bool get_Italic();
    public abstract virtual void set_Italic(bool value);
    public abstract virtual bool get_Underline();
    public abstract virtual void set_Underline(bool value);
    public abstract virtual bool get_Strikethrough();
    public abstract virtual void set_Strikethrough(bool value);
    public abstract virtual short get_Weight();
    public abstract virtual void set_Weight(short value);
    public abstract virtual short get_Charset();
    public abstract virtual void set_Charset(short value);
    public abstract virtual int get_hFont();
    public abstract virtual void Clone(IFont& ppfont);
    public abstract virtual void IsEqual(IFont pfontOther);
    public abstract virtual void SetRatio(int cyLogical, int cyHimetric);
    public abstract virtual void AddRefHfont(int hFont);
    public abstract virtual void ReleaseHfont(int hFont);
}
[ComVisibleAttribute("False")]
[GuidAttribute("BEF6E003-A874-101A-8BBA-00AA00300CAB")]
[InterfaceTypeAttribute("2")]
[DefaultMemberAttribute("Name")]
public interface stdole.IFontDisp {
    [DispIdAttribute("0")]
public string Name { get; public set; }
    [DispIdAttribute("2")]
public decimal Size { get; public set; }
    [DispIdAttribute("3")]
public bool Bold { get; public set; }
    [DispIdAttribute("4")]
public bool Italic { get; public set; }
    [DispIdAttribute("5")]
public bool Underline { get; public set; }
    [DispIdAttribute("6")]
public bool Strikethrough { get; public set; }
    [DispIdAttribute("7")]
public short Weight { get; public set; }
    [DispIdAttribute("8")]
public short Charset { get; public set; }
    [DispIdAttribute("0")]
public abstract virtual string get_Name();
    [DispIdAttribute("0")]
public abstract virtual void set_Name(string value);
    [DispIdAttribute("2")]
public abstract virtual decimal get_Size();
    [DispIdAttribute("2")]
public abstract virtual void set_Size(decimal value);
    [DispIdAttribute("3")]
public abstract virtual bool get_Bold();
    [DispIdAttribute("3")]
public abstract virtual void set_Bold(bool value);
    [DispIdAttribute("4")]
public abstract virtual bool get_Italic();
    [DispIdAttribute("4")]
public abstract virtual void set_Italic(bool value);
    [DispIdAttribute("5")]
public abstract virtual bool get_Underline();
    [DispIdAttribute("5")]
public abstract virtual void set_Underline(bool value);
    [DispIdAttribute("6")]
public abstract virtual bool get_Strikethrough();
    [DispIdAttribute("6")]
public abstract virtual void set_Strikethrough(bool value);
    [DispIdAttribute("7")]
public abstract virtual short get_Weight();
    [DispIdAttribute("7")]
public abstract virtual void set_Weight(short value);
    [DispIdAttribute("8")]
public abstract virtual short get_Charset();
    [DispIdAttribute("8")]
public abstract virtual void set_Charset(short value);
}
[ComVisibleAttribute("False")]
[InterfaceTypeAttribute("2")]
[GuidAttribute("4EF6100A-AF88-11D0-9846-00C04FC29993")]
public interface stdole.IFontEventsDisp {
    [DispIdAttribute("9")]
public abstract virtual void FontChanged(string PropertyName);
}
[ComConversionLossAttribute]
[GuidAttribute("7BF80980-BF32-101A-8BBB-00AA00300CAB")]
[InterfaceTypeAttribute("1")]
public interface stdole.IPicture {
    [DispIdAttribute("1610678272")]
[ComAliasNameAttribute("stdole.OLE_HANDLE")]
public int Handle { get; }
    [DispIdAttribute("1610678273")]
[ComAliasNameAttribute("stdole.OLE_HANDLE")]
public int hPal { get; public set; }
    [DispIdAttribute("1610678274")]
public short Type { get; }
    [DispIdAttribute("1610678275")]
[ComAliasNameAttribute("stdole.OLE_XSIZE_HIMETRIC")]
public int Width { get; }
    [DispIdAttribute("1610678276")]
[ComAliasNameAttribute("stdole.OLE_YSIZE_HIMETRIC")]
public int Height { get; }
    [DispIdAttribute("1610678279")]
public int CurDC { get; }
    [DispIdAttribute("1610678281")]
public bool KeepOriginalFormat { get; public set; }
    [DispIdAttribute("1610678285")]
public int Attributes { get; }
    public abstract virtual int get_Handle();
    public abstract virtual int get_hPal();
    public abstract virtual void set_hPal(int value);
    public abstract virtual short get_Type();
    public abstract virtual int get_Width();
    public abstract virtual int get_Height();
    public abstract virtual void Render(int hdc, int x, int y, int cx, int cy, int xSrc, int ySrc, int cxSrc, int cySrc, IntPtr prcWBounds);
    public abstract virtual int get_CurDC();
    public abstract virtual void SelectPicture(int hdcIn, Int32& phdcOut, Int32& phbmpOut);
    public abstract virtual bool get_KeepOriginalFormat();
    public abstract virtual void set_KeepOriginalFormat(bool value);
    public abstract virtual void PictureChanged();
    public abstract virtual void SaveAsFile(IntPtr pstm, bool fSaveMemCopy, Int32& pcbSize);
    public abstract virtual int get_Attributes();
    public abstract virtual void SetHdc(int hdc);
}
[ComVisibleAttribute("False")]
[DefaultMemberAttribute("Handle")]
[InterfaceTypeAttribute("2")]
[GuidAttribute("7BF80981-BF32-101A-8BBB-00AA00300CAB")]
[ComConversionLossAttribute]
public interface stdole.IPictureDisp {
    [DispIdAttribute("0")]
[ComAliasNameAttribute("stdole.OLE_HANDLE")]
public int Handle { get; }
    [DispIdAttribute("2")]
[ComAliasNameAttribute("stdole.OLE_HANDLE")]
public int hPal { get; public set; }
    [DispIdAttribute("3")]
public short Type { get; }
    [DispIdAttribute("4")]
[ComAliasNameAttribute("stdole.OLE_XSIZE_HIMETRIC")]
public int Width { get; }
    [DispIdAttribute("5")]
[ComAliasNameAttribute("stdole.OLE_YSIZE_HIMETRIC")]
public int Height { get; }
    [DispIdAttribute("0")]
public abstract virtual int get_Handle();
    [DispIdAttribute("2")]
public abstract virtual int get_hPal();
    [DispIdAttribute("2")]
public abstract virtual void set_hPal(int value);
    [DispIdAttribute("3")]
public abstract virtual short get_Type();
    [DispIdAttribute("4")]
public abstract virtual int get_Width();
    [DispIdAttribute("5")]
public abstract virtual int get_Height();
    [DispIdAttribute("6")]
public abstract virtual void Render(int hdc, int x, int y, int cx, int cy, int xSrc, int ySrc, int cxSrc, int cySrc, IntPtr prcWBounds);
}
[GuidAttribute("E6C8FA08-BD9F-11D0-985E-00C04FC29993")]
public enum stdole.LoadPictureConstants : Enum {
    public int value__;
    public static LoadPictureConstants Default;
    public static LoadPictureConstants Monochrome;
    public static LoadPictureConstants VgaColor;
    public static LoadPictureConstants Color;
}
[GuidAttribute("6650430A-BE0F-101A-8BBB-00AA00300CAB")]
public enum stdole.OLE_TRISTATE : Enum {
    public int value__;
    public static OLE_TRISTATE Unchecked;
    public static OLE_TRISTATE Checked;
    public static OLE_TRISTATE Gray;
}
[DefaultMemberAttribute("Handle")]
[GuidAttribute("7BF80981-BF32-101A-8BBB-00AA00300CAB")]
[InterfaceTypeAttribute("2")]
[ComConversionLossAttribute]
public interface stdole.Picture {
    [DispIdAttribute("0")]
[ComAliasNameAttribute("stdole.OLE_HANDLE")]
public int Handle { get; }
    [ComAliasNameAttribute("stdole.OLE_HANDLE")]
[DispIdAttribute("2")]
public int hPal { get; public set; }
    [DispIdAttribute("3")]
public short Type { get; }
    [ComAliasNameAttribute("stdole.OLE_XSIZE_HIMETRIC")]
[DispIdAttribute("4")]
public int Width { get; }
    [DispIdAttribute("5")]
[ComAliasNameAttribute("stdole.OLE_YSIZE_HIMETRIC")]
public int Height { get; }
    [DispIdAttribute("0")]
public abstract virtual int get_Handle();
    [DispIdAttribute("2")]
public abstract virtual int get_hPal();
    [DispIdAttribute("2")]
public abstract virtual void set_hPal(int value);
    [DispIdAttribute("3")]
public abstract virtual short get_Type();
    [DispIdAttribute("4")]
public abstract virtual int get_Width();
    [DispIdAttribute("5")]
public abstract virtual int get_Height();
    [DispIdAttribute("6")]
public abstract virtual void Render(int hdc, int x, int y, int cx, int cy, int xSrc, int ySrc, int cxSrc, int cySrc, IntPtr prcWBounds);
}
[ComVisibleAttribute("False")]
[GuidAttribute("BEF6E003-A874-101A-8BBA-00AA00300CAB")]
[CoClassAttribute("stdole.StdFontClass")]
public interface stdole.StdFont {
}
[ComVisibleAttribute("False")]
[DefaultMemberAttribute("Name")]
[ClassInterfaceAttribute("0")]
[ComSourceInterfacesAttribute("stdole.FontEvents")]
[GuidAttribute("0BE35203-8F91-11CE-9DE3-00AA004BB851")]
public class stdole.StdFontClass : object {
}
[ComVisibleAttribute("False")]
[CoClassAttribute("stdole.StdPictureClass")]
[GuidAttribute("7BF80981-BF32-101A-8BBB-00AA00300CAB")]
public interface stdole.StdPicture {
}
[ComConversionLossAttribute]
[GuidAttribute("0BE35204-8F91-11CE-9DE3-00AA004BB851")]
[DefaultMemberAttribute("Handle")]
[ClassInterfaceAttribute("0")]
public class stdole.StdPictureClass : object {
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("27524")]
internal class System.Runtime.CompilerServices.NullableAttribute : Attribute {
    public Byte[] NullableFlags;
    public NullableAttribute(byte );
    public NullableAttribute(Byte[] );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("5196")]
internal class System.Runtime.CompilerServices.NullableContextAttribute : Attribute {
    public byte Flag;
    public NullableContextAttribute(byte );
}
[GuidAttribute("5F4AAE42-BC94-401D-9213-B8A8B9E553DE")]
public interface VSLangProj._BuildManagerEvents {
}
[InterfaceTypeAttribute("2")]
[GuidAttribute("828914F7-1D81-4F5C-83CE-37819D7EE759")]
public interface VSLangProj._dispBuildManagerEvents {
    [DispIdAttribute("1")]
public abstract virtual void DesignTimeOutputDirty(string bstrOutputMoniker);
    [DispIdAttribute("2")]
public abstract virtual void DesignTimeOutputDeleted(string bstrOutputMoniker);
}
[ComVisibleAttribute("False")]
public class VSLangProj._dispBuildManagerEvents_DesignTimeOutputDeletedEventHandler : MulticastDelegate {
    public _dispBuildManagerEvents_DesignTimeOutputDeletedEventHandler(object object, IntPtr method);
    public virtual void Invoke(string bstrOutputMoniker);
    public virtual IAsyncResult BeginInvoke(string bstrOutputMoniker, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
[ComVisibleAttribute("False")]
public class VSLangProj._dispBuildManagerEvents_DesignTimeOutputDirtyEventHandler : MulticastDelegate {
    public _dispBuildManagerEvents_DesignTimeOutputDirtyEventHandler(object object, IntPtr method);
    public virtual void Invoke(string bstrOutputMoniker);
    public virtual IAsyncResult BeginInvoke(string bstrOutputMoniker, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
[ComVisibleAttribute("False")]
[ComEventInterfaceAttribute("VSLangProj._dispBuildManagerEvents", "VSLangProj._dispBuildManagerEvents_EventProvider")]
public interface VSLangProj._dispBuildManagerEvents_Event {
    [CompilerGeneratedAttribute]
public abstract virtual void add_DesignTimeOutputDirty(_dispBuildManagerEvents_DesignTimeOutputDirtyEventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_DesignTimeOutputDirty(_dispBuildManagerEvents_DesignTimeOutputDirtyEventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_DesignTimeOutputDeleted(_dispBuildManagerEvents_DesignTimeOutputDeletedEventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_DesignTimeOutputDeleted(_dispBuildManagerEvents_DesignTimeOutputDeletedEventHandler value);
}
internal class VSLangProj._dispBuildManagerEvents_EventProvider : object {
    private IConnectionPointContainer m_ConnectionPointContainer;
    private ArrayList m_aEventSinkHelpers;
    private IConnectionPoint m_ConnectionPoint;
    public _dispBuildManagerEvents_EventProvider(object A_1);
    private void Init();
    public sealed virtual void add_DesignTimeOutputDeleted(_dispBuildManagerEvents_DesignTimeOutputDeletedEventHandler value);
    public sealed virtual void remove_DesignTimeOutputDeleted(_dispBuildManagerEvents_DesignTimeOutputDeletedEventHandler value);
    private void AddDesignTimeOutputDeleted(_dispBuildManagerEvents_DesignTimeOutputDeletedEventHandler A_1);
    private void RemoveDesignTimeOutputDeleted(_dispBuildManagerEvents_DesignTimeOutputDeletedEventHandler A_1);
    public sealed virtual void add_DesignTimeOutputDirty(_dispBuildManagerEvents_DesignTimeOutputDirtyEventHandler value);
    public sealed virtual void remove_DesignTimeOutputDirty(_dispBuildManagerEvents_DesignTimeOutputDirtyEventHandler value);
    private void AddDesignTimeOutputDirty(_dispBuildManagerEvents_DesignTimeOutputDirtyEventHandler A_1);
    private void RemoveDesignTimeOutputDirty(_dispBuildManagerEvents_DesignTimeOutputDirtyEventHandler A_1);
    protected virtual override void Finalize();
    public sealed virtual void Dispose();
    private void Dispose(bool disposing);
}
[ClassInterfaceAttribute("0")]
internal class VSLangProj._dispBuildManagerEvents_SinkHelper : object {
    public _dispBuildManagerEvents_DesignTimeOutputDeletedEventHandler m_DesignTimeOutputDeletedDelegate;
    public _dispBuildManagerEvents_DesignTimeOutputDirtyEventHandler m_DesignTimeOutputDirtyDelegate;
    public int m_dwCookie;
    public sealed virtual void DesignTimeOutputDeleted(string A_1);
    public sealed virtual void DesignTimeOutputDirty(string A_1);
}
[InterfaceTypeAttribute("2")]
[GuidAttribute("40806CEA-ABAB-4887-A356-D8869C28A6E6")]
public interface VSLangProj._dispImportsEvents {
    [DispIdAttribute("1")]
public abstract virtual void ImportAdded(string bstrImport);
    [DispIdAttribute("2")]
public abstract virtual void ImportRemoved(string bstrImport);
}
[ComVisibleAttribute("False")]
[ComEventInterfaceAttribute("VSLangProj._dispImportsEvents", "VSLangProj._dispImportsEvents_EventProvider")]
public interface VSLangProj._dispImportsEvents_Event {
    [CompilerGeneratedAttribute]
public abstract virtual void add_ImportAdded(_dispImportsEvents_ImportAddedEventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_ImportAdded(_dispImportsEvents_ImportAddedEventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_ImportRemoved(_dispImportsEvents_ImportRemovedEventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_ImportRemoved(_dispImportsEvents_ImportRemovedEventHandler value);
}
internal class VSLangProj._dispImportsEvents_EventProvider : object {
    private IConnectionPointContainer m_ConnectionPointContainer;
    private ArrayList m_aEventSinkHelpers;
    private IConnectionPoint m_ConnectionPoint;
    public _dispImportsEvents_EventProvider(object A_1);
    private void Init();
    public sealed virtual void add_ImportRemoved(_dispImportsEvents_ImportRemovedEventHandler value);
    public sealed virtual void remove_ImportRemoved(_dispImportsEvents_ImportRemovedEventHandler value);
    private void AddImportRemoved(_dispImportsEvents_ImportRemovedEventHandler A_1);
    private void RemoveImportRemoved(_dispImportsEvents_ImportRemovedEventHandler A_1);
    public sealed virtual void add_ImportAdded(_dispImportsEvents_ImportAddedEventHandler value);
    public sealed virtual void remove_ImportAdded(_dispImportsEvents_ImportAddedEventHandler value);
    private void AddImportAdded(_dispImportsEvents_ImportAddedEventHandler A_1);
    private void RemoveImportAdded(_dispImportsEvents_ImportAddedEventHandler A_1);
    protected virtual override void Finalize();
    public sealed virtual void Dispose();
    private void Dispose(bool disposing);
}
[ComVisibleAttribute("False")]
public class VSLangProj._dispImportsEvents_ImportAddedEventHandler : MulticastDelegate {
    public _dispImportsEvents_ImportAddedEventHandler(object object, IntPtr method);
    public virtual void Invoke(string bstrImport);
    public virtual IAsyncResult BeginInvoke(string bstrImport, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
[ComVisibleAttribute("False")]
public class VSLangProj._dispImportsEvents_ImportRemovedEventHandler : MulticastDelegate {
    public _dispImportsEvents_ImportRemovedEventHandler(object object, IntPtr method);
    public virtual void Invoke(string bstrImport);
    public virtual IAsyncResult BeginInvoke(string bstrImport, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
[ClassInterfaceAttribute("0")]
internal class VSLangProj._dispImportsEvents_SinkHelper : object {
    public _dispImportsEvents_ImportRemovedEventHandler m_ImportRemovedDelegate;
    public _dispImportsEvents_ImportAddedEventHandler m_ImportAddedDelegate;
    public int m_dwCookie;
    public sealed virtual void ImportRemoved(string A_1);
    public sealed virtual void ImportAdded(string A_1);
}
[InterfaceTypeAttribute("2")]
[GuidAttribute("287EB27C-0F8B-4D2D-8E82-A9CA50B6766E")]
public interface VSLangProj._dispReferencesEvents {
    [DispIdAttribute("1")]
public abstract virtual void ReferenceAdded(Reference pReference);
    [DispIdAttribute("2")]
public abstract virtual void ReferenceRemoved(Reference pReference);
    [DispIdAttribute("3")]
public abstract virtual void ReferenceChanged(Reference pReference);
}
[ComEventInterfaceAttribute("VSLangProj._dispReferencesEvents", "VSLangProj._dispReferencesEvents_EventProvider")]
[ComVisibleAttribute("False")]
public interface VSLangProj._dispReferencesEvents_Event {
    [CompilerGeneratedAttribute]
public abstract virtual void add_ReferenceAdded(_dispReferencesEvents_ReferenceAddedEventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_ReferenceAdded(_dispReferencesEvents_ReferenceAddedEventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_ReferenceRemoved(_dispReferencesEvents_ReferenceRemovedEventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_ReferenceRemoved(_dispReferencesEvents_ReferenceRemovedEventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_ReferenceChanged(_dispReferencesEvents_ReferenceChangedEventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_ReferenceChanged(_dispReferencesEvents_ReferenceChangedEventHandler value);
}
internal class VSLangProj._dispReferencesEvents_EventProvider : object {
    private IConnectionPointContainer m_ConnectionPointContainer;
    private ArrayList m_aEventSinkHelpers;
    private IConnectionPoint m_ConnectionPoint;
    public _dispReferencesEvents_EventProvider(object A_1);
    private void Init();
    public sealed virtual void add_ReferenceChanged(_dispReferencesEvents_ReferenceChangedEventHandler value);
    public sealed virtual void remove_ReferenceChanged(_dispReferencesEvents_ReferenceChangedEventHandler value);
    private void AddReferenceChanged(_dispReferencesEvents_ReferenceChangedEventHandler A_1);
    private void RemoveReferenceChanged(_dispReferencesEvents_ReferenceChangedEventHandler A_1);
    public sealed virtual void add_ReferenceRemoved(_dispReferencesEvents_ReferenceRemovedEventHandler value);
    public sealed virtual void remove_ReferenceRemoved(_dispReferencesEvents_ReferenceRemovedEventHandler value);
    private void AddReferenceRemoved(_dispReferencesEvents_ReferenceRemovedEventHandler A_1);
    private void RemoveReferenceRemoved(_dispReferencesEvents_ReferenceRemovedEventHandler A_1);
    public sealed virtual void add_ReferenceAdded(_dispReferencesEvents_ReferenceAddedEventHandler value);
    public sealed virtual void remove_ReferenceAdded(_dispReferencesEvents_ReferenceAddedEventHandler value);
    private void AddReferenceAdded(_dispReferencesEvents_ReferenceAddedEventHandler A_1);
    private void RemoveReferenceAdded(_dispReferencesEvents_ReferenceAddedEventHandler A_1);
    protected virtual override void Finalize();
    public sealed virtual void Dispose();
    private void Dispose(bool disposing);
}
[ComVisibleAttribute("False")]
public class VSLangProj._dispReferencesEvents_ReferenceAddedEventHandler : MulticastDelegate {
    public _dispReferencesEvents_ReferenceAddedEventHandler(object object, IntPtr method);
    public virtual void Invoke(Reference pReference);
    public virtual IAsyncResult BeginInvoke(Reference pReference, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
[ComVisibleAttribute("False")]
public class VSLangProj._dispReferencesEvents_ReferenceChangedEventHandler : MulticastDelegate {
    public _dispReferencesEvents_ReferenceChangedEventHandler(object object, IntPtr method);
    public virtual void Invoke(Reference pReference);
    public virtual IAsyncResult BeginInvoke(Reference pReference, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
[ComVisibleAttribute("False")]
public class VSLangProj._dispReferencesEvents_ReferenceRemovedEventHandler : MulticastDelegate {
    public _dispReferencesEvents_ReferenceRemovedEventHandler(object object, IntPtr method);
    public virtual void Invoke(Reference pReference);
    public virtual IAsyncResult BeginInvoke(Reference pReference, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
[ClassInterfaceAttribute("0")]
internal class VSLangProj._dispReferencesEvents_SinkHelper : object {
    public _dispReferencesEvents_ReferenceChangedEventHandler m_ReferenceChangedDelegate;
    public _dispReferencesEvents_ReferenceRemovedEventHandler m_ReferenceRemovedDelegate;
    public _dispReferencesEvents_ReferenceAddedEventHandler m_ReferenceAddedDelegate;
    public int m_dwCookie;
    public sealed virtual void ReferenceChanged(Reference A_1);
    public sealed virtual void ReferenceRemoved(Reference A_1);
    public sealed virtual void ReferenceAdded(Reference A_1);
}
[GuidAttribute("037AD859-7A75-4CF3-8A38-83D6E045FEE3")]
public interface VSLangProj._ImportsEvents {
}
[GuidAttribute("1CF40C9E-D548-4B45-AD0F-3D7843F62BBB")]
public interface VSLangProj._ReferencesEvents {
}
[GuidAttribute("C711E2B7-3C58-4C37-9359-705208A890AE")]
public interface VSLangProj.BuildManager {
    [DispIdAttribute("1")]
public DTE DTE { get; }
    [DispIdAttribute("2")]
public object Parent { get; }
    [DispIdAttribute("3")]
public Project ContainingProject { get; }
    [DispIdAttribute("4")]
public object DesignTimeOutputMonikers { get; }
    [DispIdAttribute("1")]
public abstract virtual DTE get_DTE();
    [DispIdAttribute("2")]
public abstract virtual object get_Parent();
    [DispIdAttribute("3")]
public abstract virtual Project get_ContainingProject();
    [DispIdAttribute("4")]
public abstract virtual object get_DesignTimeOutputMonikers();
    [DispIdAttribute("5")]
public abstract virtual string BuildDesignTimeOutput(string bstrOutputMoniker);
}
[ComVisibleAttribute("False")]
[CoClassAttribute("VSLangProj.BuildManagerEventsClass")]
[GuidAttribute("5F4AAE42-BC94-401D-9213-B8A8B9E553DE")]
public interface VSLangProj.BuildManagerEvents {
}
[ComVisibleAttribute("False")]
[ClassInterfaceAttribute("0")]
[ComSourceInterfacesAttribute("VSLangProj._dispBuildManagerEvents")]
[GuidAttribute("66923B02-677B-4920-A319-F8925A0BA8A8")]
public class VSLangProj.BuildManagerEventsClass : object {
}
[GuidAttribute("516BD64E-51C0-11D3-85CF-00C04F6123B3")]
[TypeLibTypeAttribute("4176")]
[DefaultMemberAttribute("FileName")]
public interface VSLangProj.FileProperties {
    [DispIdAttribute("-2147418112")]
public string __id { get; }
    [DispIdAttribute("0")]
public string FileName { get; public set; }
    [DispIdAttribute("1")]
public string Extension { get; }
    [DispIdAttribute("2")]
public UInt32 Filesize { get; }
    [DispIdAttribute("3")]
public string LocalPath { get; }
    [DispIdAttribute("4")]
public string FullPath { get; }
    [DispIdAttribute("5")]
public string URL { get; }
    [DispIdAttribute("6")]
public string HTMLTitle { get; }
    [DispIdAttribute("7")]
public string Author { get; }
    [DispIdAttribute("8")]
public string DateCreated { get; }
    [DispIdAttribute("9")]
public string DateModified { get; }
    [DispIdAttribute("10")]
public string ModifiedBy { get; }
    [DispIdAttribute("11")]
public string SubType { get; public set; }
    [DispIdAttribute("12")]
public object Extender { get; }
    [DispIdAttribute("13")]
public object ExtenderNames { get; }
    [DispIdAttribute("14")]
public string ExtenderCATID { get; }
    [DispIdAttribute("15")]
public prjBuildAction BuildAction { get; public set; }
    [DispIdAttribute("16")]
public string CustomTool { get; public set; }
    [DispIdAttribute("17")]
public string CustomToolNamespace { get; public set; }
    [DispIdAttribute("18")]
public string CustomToolOutput { get; }
    [DispIdAttribute("19")]
public bool IsCustomToolOutput { get; }
    [DispIdAttribute("20")]
public bool IsDependentFile { get; }
    [DispIdAttribute("21")]
public bool IsLink { get; }
    [DispIdAttribute("22")]
public bool IsDesignTimeBuildInput { get; }
    [TypeLibFuncAttribute("64")]
[DispIdAttribute("-2147418112")]
public abstract virtual string get___id();
    [DispIdAttribute("0")]
public abstract virtual string get_FileName();
    [DispIdAttribute("0")]
public abstract virtual void set_FileName(string pbstrName);
    [DispIdAttribute("1")]
public abstract virtual string get_Extension();
    [DispIdAttribute("2")]
public abstract virtual UInt32 get_Filesize();
    [DispIdAttribute("3")]
public abstract virtual string get_LocalPath();
    [DispIdAttribute("4")]
public abstract virtual string get_FullPath();
    [DispIdAttribute("5")]
public abstract virtual string get_URL();
    [DispIdAttribute("6")]
public abstract virtual string get_HTMLTitle();
    [DispIdAttribute("7")]
public abstract virtual string get_Author();
    [DispIdAttribute("8")]
public abstract virtual string get_DateCreated();
    [DispIdAttribute("9")]
public abstract virtual string get_DateModified();
    [DispIdAttribute("10")]
public abstract virtual string get_ModifiedBy();
    [TypeLibFuncAttribute("1024")]
[DispIdAttribute("11")]
public abstract virtual string get_SubType();
    [TypeLibFuncAttribute("1024")]
[DispIdAttribute("11")]
public abstract virtual void set_SubType(string pbstrSubType);
    [TypeLibFuncAttribute("1088")]
[DispIdAttribute("12")]
public abstract virtual object get_Extender(string ExtenderName);
    [DispIdAttribute("13")]
[TypeLibFuncAttribute("1088")]
public abstract virtual object get_ExtenderNames();
    [TypeLibFuncAttribute("1088")]
[DispIdAttribute("14")]
public abstract virtual string get_ExtenderCATID();
    [DispIdAttribute("15")]
public abstract virtual prjBuildAction get_BuildAction();
    [DispIdAttribute("15")]
public abstract virtual void set_BuildAction(prjBuildAction pbuildAction);
    [DispIdAttribute("16")]
public abstract virtual string get_CustomTool();
    [DispIdAttribute("16")]
public abstract virtual void set_CustomTool(string pbstrCustomTool);
    [DispIdAttribute("17")]
public abstract virtual string get_CustomToolNamespace();
    [DispIdAttribute("17")]
public abstract virtual void set_CustomToolNamespace(string pbstrCustomToolNamespace);
    [TypeLibFuncAttribute("1024")]
[DispIdAttribute("18")]
public abstract virtual string get_CustomToolOutput();
    [DispIdAttribute("19")]
[TypeLibFuncAttribute("1024")]
public abstract virtual bool get_IsCustomToolOutput();
    [DispIdAttribute("20")]
[TypeLibFuncAttribute("1024")]
public abstract virtual bool get_IsDependentFile();
    [TypeLibFuncAttribute("1024")]
[DispIdAttribute("21")]
public abstract virtual bool get_IsLink();
    [TypeLibFuncAttribute("1024")]
[DispIdAttribute("22")]
public abstract virtual bool get_IsDesignTimeBuildInput();
}
[TypeLibTypeAttribute("4176")]
[GuidAttribute("8E4AA768-51E1-11D3-85CF-00C04F6123B3")]
public interface VSLangProj.FolderProperties {
    [DispIdAttribute("-2147418112")]
public string __id { get; }
    [DispIdAttribute("1")]
public string FileName { get; public set; }
    [DispIdAttribute("2")]
public string LocalPath { get; }
    [DispIdAttribute("3")]
public string FullPath { get; }
    [DispIdAttribute("4")]
public string URL { get; }
    [DispIdAttribute("5")]
public object Extender { get; }
    [DispIdAttribute("6")]
public object ExtenderNames { get; }
    [DispIdAttribute("7")]
public string ExtenderCATID { get; }
    [DispIdAttribute("8")]
public string WebReference { get; public set; }
    [DispIdAttribute("9")]
public string DefaultNamespace { get; }
    [DispIdAttribute("10")]
public webrefUrlBehavior UrlBehavior { get; public set; }
    [TypeLibFuncAttribute("64")]
[DispIdAttribute("-2147418112")]
public abstract virtual string get___id();
    [DispIdAttribute("1")]
public abstract virtual string get_FileName();
    [DispIdAttribute("1")]
public abstract virtual void set_FileName(string pbstrName);
    [DispIdAttribute("2")]
public abstract virtual string get_LocalPath();
    [DispIdAttribute("3")]
public abstract virtual string get_FullPath();
    [DispIdAttribute("4")]
public abstract virtual string get_URL();
    [DispIdAttribute("5")]
[TypeLibFuncAttribute("1088")]
public abstract virtual object get_Extender(string ExtenderName);
    [DispIdAttribute("6")]
[TypeLibFuncAttribute("1088")]
public abstract virtual object get_ExtenderNames();
    [DispIdAttribute("7")]
[TypeLibFuncAttribute("1088")]
public abstract virtual string get_ExtenderCATID();
    [DispIdAttribute("8")]
public abstract virtual string get_WebReference();
    [DispIdAttribute("8")]
public abstract virtual void set_WebReference(string pbstrWebReferenceUrl);
    [TypeLibFuncAttribute("1024")]
[DispIdAttribute("9")]
public abstract virtual string get_DefaultNamespace();
    [DispIdAttribute("10")]
public abstract virtual webrefUrlBehavior get_UrlBehavior();
    [DispIdAttribute("10")]
public abstract virtual void set_UrlBehavior(webrefUrlBehavior pUrlBehavior);
}
[GuidAttribute("642789F9-210D-4574-96FD-5A653451E216")]
[DefaultMemberAttribute("Item")]
public interface VSLangProj.Imports {
    [DispIdAttribute("1")]
public DTE DTE { get; }
    [DispIdAttribute("2")]
public object Parent { get; }
    [DispIdAttribute("3")]
public Project ContainingProject { get; }
    [DispIdAttribute("4")]
public int Count { get; }
    [DispIdAttribute("1")]
public abstract virtual DTE get_DTE();
    [DispIdAttribute("2")]
public abstract virtual object get_Parent();
    [DispIdAttribute("3")]
public abstract virtual Project get_ContainingProject();
    [DispIdAttribute("4")]
public abstract virtual int get_Count();
    [DispIdAttribute("0")]
public abstract virtual string Item(int lIndex);
    [DispIdAttribute("5")]
public abstract virtual void Add(string bstrImport);
    [DispIdAttribute("6")]
public abstract virtual void Remove(object index);
    [DispIdAttribute("-4")]
public abstract virtual IEnumerator GetEnumerator();
}
[ComVisibleAttribute("False")]
[CoClassAttribute("VSLangProj.ImportsEventsClass")]
[GuidAttribute("037AD859-7A75-4CF3-8A38-83D6E045FEE3")]
public interface VSLangProj.ImportsEvents {
}
[ComVisibleAttribute("False")]
[ComSourceInterfacesAttribute("VSLangProj._dispImportsEvents")]
[ClassInterfaceAttribute("0")]
[GuidAttribute("AC779606-837C-444F-B8FA-A69805B59976")]
public class VSLangProj.ImportsEventsClass : object {
}
[GuidAttribute("36FE55BE-6A2F-4746-9084-DAF238BD3FC6")]
public abstract class VSLangProj.PrjBrowseObjectCATID : object {
    public static string prjCATIDVBProjectBrowseObject;
    public static string prjCATIDCSharpProjectBrowseObject;
    public static string prjCATIDVBProjectConfigBrowseObject;
    public static string prjCATIDCSharpProjectConfigBrowseObject;
    public static string prjCATIDVBFileBrowseObject;
    public static string prjCATIDCSharpFileBrowseObject;
    public static string prjCATIDVSAFileBrowseObject;
    public static string prjCATIDVBFolderBrowseObject;
    public static string prjCATIDCSharpFolderBrowseObject;
    public static string prjCATIDVSAFolderBrowseObject;
    public static string prjCATIDVBReferenceBrowseObject;
    public static string prjCATIDCSharpReferenceBrowseObject;
    public static string prjCATIDVSAReferenceBrowseObject;
    public static string prjCATIDVBConfig;
    public static string prjCATIDCSharpConfig;
    public static string prjCATIDVSAConfig;
}
[GuidAttribute("D399129C-23CC-4301-81B0-5A60DC52E67D")]
public enum VSLangProj.prjBuildAction : Enum {
    public int value__;
    public static prjBuildAction prjBuildActionNone;
    public static prjBuildAction prjBuildActionCompile;
    public static prjBuildAction prjBuildActionContent;
    public static prjBuildAction prjBuildActionEmbeddedResource;
}
[GuidAttribute("0C96047C-1AFC-436A-96C9-A944241D5FAF")]
public abstract class VSLangProj.PrjCATID : object {
    public static string prjCATIDProject;
    public static string prjCATIDProjectItem;
}
[GuidAttribute("EBDA8DD4-E450-452A-9FF5-7970904DEA7F")]
public enum VSLangProj.prjCompare : Enum {
    public int value__;
    public static prjCompare prjCompareBinary;
    public static prjCompare prjCompareText;
}
[GuidAttribute("5DE9F309-E701-44D1-8068-1860738C0084")]
public enum VSLangProj.prjCopyProjectOption : Enum {
    public int value__;
    public static prjCopyProjectOption prjRunFiles;
    public static prjCopyProjectOption prjProjectFiles;
    public static prjCopyProjectOption prjAllFiles;
}
[GuidAttribute("F111445E-A9ED-4D12-9A0E-738F5F995F10")]
public enum VSLangProj.prjExecCommand : Enum {
    public int value__;
    public static prjExecCommand prjExecCommandHandleInvalidStartupObject;
}
[GuidAttribute("8821C6DB-40B9-4584-B3F1-28336B36A23D")]
public enum VSLangProj.prjHTMLPageLayout : Enum {
    public int value__;
    public static prjHTMLPageLayout prjHTMLPageLayoutFlow;
    public static prjHTMLPageLayout prjHTMLPageLayoutGrid;
}
[GuidAttribute("10CFE8EA-278E-46DB-A818-0E2D2A3DA182")]
public abstract class VSLangProj.PrjKind : object {
    public static string prjKindVBProject;
    public static string prjKindCSharpProject;
    public static string prjKindVSAProject;
}
[GuidAttribute("95DCFABC-145D-498D-A454-47F33D47139C")]
public enum VSLangProj.prjOptionExplicit : Enum {
    public int value__;
    public static prjOptionExplicit prjOptionExplicitOff;
    public static prjOptionExplicit prjOptionExplicitOn;
}
[GuidAttribute("CE6AA0FD-6CCD-4601-A730-FA75219862C3")]
public enum VSLangProj.prjOptionStrict : Enum {
    public int value__;
    public static prjOptionStrict prjOptionStrictOff;
    public static prjOptionStrict prjOptionStrictOn;
}
[GuidAttribute("02720598-3E01-4721-ADAF-E2937BD6C645")]
public enum VSLangProj.prjOriginatorKeyMode : Enum {
    public int value__;
    public static prjOriginatorKeyMode prjOriginatorKeyModeNone;
    public static prjOriginatorKeyMode prjOriginatorKeyModeFile;
    public static prjOriginatorKeyMode prjOriginatorKeyModeContainer;
}
[GuidAttribute("FB309311-8F09-41E7-8347-68F5A079592D")]
public enum VSLangProj.prjOutputType : Enum {
    public int value__;
    public static prjOutputType prjOutputTypeWinExe;
    public static prjOutputType prjOutputTypeExe;
    public static prjOutputType prjOutputTypeLibrary;
}
[GuidAttribute("5B50016F-F7CC-4687-A1DA-3F234F7620EE")]
public enum VSLangProj.prjProjectType : Enum {
    public int value__;
    public static prjProjectType prjProjectTypeLocal;
    public static prjProjectType prjProjectTypeWeb;
}
[GuidAttribute("B21668EF-29F1-425D-85D7-118CB838C362")]
public enum VSLangProj.prjReferenceType : Enum {
    public int value__;
    public static prjReferenceType prjReferenceTypeAssembly;
    public static prjReferenceType prjReferenceTypeActiveX;
}
[GuidAttribute("D760C0E8-311E-45EB-B06C-033F8CC1E5EC")]
public enum VSLangProj.prjScriptLanguage : Enum {
    public int value__;
    public static prjScriptLanguage prjScriptLanguageJScript;
    public static prjScriptLanguage prjScriptLanguageVBScript;
}
[GuidAttribute("504876A3-4B7D-4932-B1D7-E91129D4AEBF")]
public enum VSLangProj.prjStartAction : Enum {
    public int value__;
    public static prjStartAction prjStartActionProject;
    public static prjStartAction prjStartActionProgram;
    public static prjStartAction prjStartActionURL;
    public static prjStartAction prjStartActionNone;
}
[GuidAttribute("B743460B-B3A1-40DC-9A0C-19ECCB63650E")]
public enum VSLangProj.prjTargetSchema : Enum {
    public int value__;
    public static prjTargetSchema prjTargetSchemaIE32Nav30;
    public static prjTargetSchema prjTargetSchemaIE50;
    public static prjTargetSchema prjTargetSchemaNav40;
}
[GuidAttribute("31DDDF62-1891-4870-8DF5-00D9028826DF")]
public enum VSLangProj.prjWarningLevel : Enum {
    public int value__;
    public static prjWarningLevel prjWarningLevel0;
    public static prjWarningLevel prjWarningLevel1;
    public static prjWarningLevel prjWarningLevel2;
    public static prjWarningLevel prjWarningLevel3;
    public static prjWarningLevel prjWarningLevel4;
}
[GuidAttribute("88A4C7D7-2587-4CC3-ADAC-993896B5D094")]
public enum VSLangProj.prjWebAccessMethod : Enum {
    public int value__;
    public static prjWebAccessMethod prjWebAccessMethodFileShare;
    public static prjWebAccessMethod prjWebAccessMethodFrontPage;
}
[GuidAttribute("3CDAA65D-1E9D-11D3-B202-00C04F79CACB")]
public interface VSLangProj.ProjectConfigurationProperties {
    [DispIdAttribute("-2147418112")]
public string __id { get; }
    [DispIdAttribute("10001")]
public bool DebugSymbols { get; public set; }
    [DispIdAttribute("10036")]
public bool DefineDebug { get; public set; }
    [DispIdAttribute("10037")]
public bool DefineTrace { get; public set; }
    [DispIdAttribute("10004")]
public string OutputPath { get; public set; }
    [DispIdAttribute("10010")]
public string IntermediatePath { get; public set; }
    [DispIdAttribute("10005")]
public string DefineConstants { get; public set; }
    [DispIdAttribute("10054")]
public bool RemoveIntegerChecks { get; public set; }
    [DispIdAttribute("10055")]
public UInt32 BaseAddress { get; public set; }
    [DispIdAttribute("10061")]
public bool AllowUnsafeBlocks { get; public set; }
    [DispIdAttribute("10062")]
public bool CheckForOverflowUnderflow { get; public set; }
    [DispIdAttribute("10063")]
public string DocumentationFile { get; public set; }
    [DispIdAttribute("10064")]
public bool Optimize { get; public set; }
    [DispIdAttribute("10065")]
public bool IncrementalBuild { get; public set; }
    [DispIdAttribute("10006")]
public string StartProgram { get; public set; }
    [DispIdAttribute("10007")]
public string StartWorkingDirectory { get; public set; }
    [DispIdAttribute("10008")]
public string StartURL { get; public set; }
    [DispIdAttribute("10038")]
public string StartPage { get; public set; }
    [DispIdAttribute("10002")]
public string StartArguments { get; public set; }
    [DispIdAttribute("10039")]
public bool StartWithIE { get; public set; }
    [DispIdAttribute("10040")]
public bool EnableASPDebugging { get; public set; }
    [DispIdAttribute("10041")]
public bool EnableASPXDebugging { get; public set; }
    [DispIdAttribute("10057")]
public bool EnableUnmanagedDebugging { get; public set; }
    [DispIdAttribute("10003")]
public prjStartAction StartAction { get; public set; }
    [DispIdAttribute("10031")]
public object ExtenderNames { get; }
    [DispIdAttribute("10032")]
public string ExtenderCATID { get; }
    [DispIdAttribute("10052")]
public prjWarningLevel WarningLevel { get; public set; }
    [DispIdAttribute("10053")]
public bool TreatWarningsAsErrors { get; public set; }
    [DispIdAttribute("10058")]
public bool EnableSQLServerDebugging { get; public set; }
    [DispIdAttribute("10069")]
public UInt32 FileAlignment { get; public set; }
    [DispIdAttribute("10072")]
public bool RegisterForComInterop { get; public set; }
    [DispIdAttribute("10073")]
public string ConfigurationOverrideFile { get; public set; }
    [DispIdAttribute("10074")]
public bool RemoteDebugEnabled { get; public set; }
    [DispIdAttribute("10075")]
public string RemoteDebugMachine { get; public set; }
    [DispIdAttribute("-2147418112")]
public abstract virtual string get___id();
    [DispIdAttribute("10001")]
public abstract virtual bool get_DebugSymbols();
    [DispIdAttribute("10001")]
public abstract virtual void set_DebugSymbols(bool value);
    [DispIdAttribute("10036")]
public abstract virtual bool get_DefineDebug();
    [DispIdAttribute("10036")]
public abstract virtual void set_DefineDebug(bool value);
    [DispIdAttribute("10037")]
public abstract virtual bool get_DefineTrace();
    [DispIdAttribute("10037")]
public abstract virtual void set_DefineTrace(bool value);
    [DispIdAttribute("10004")]
public abstract virtual string get_OutputPath();
    [DispIdAttribute("10004")]
public abstract virtual void set_OutputPath(string value);
    [DispIdAttribute("10010")]
public abstract virtual string get_IntermediatePath();
    [DispIdAttribute("10010")]
public abstract virtual void set_IntermediatePath(string value);
    [DispIdAttribute("10005")]
public abstract virtual string get_DefineConstants();
    [DispIdAttribute("10005")]
public abstract virtual void set_DefineConstants(string value);
    [DispIdAttribute("10054")]
public abstract virtual bool get_RemoveIntegerChecks();
    [DispIdAttribute("10054")]
public abstract virtual void set_RemoveIntegerChecks(bool value);
    [DispIdAttribute("10055")]
public abstract virtual UInt32 get_BaseAddress();
    [DispIdAttribute("10055")]
public abstract virtual void set_BaseAddress(UInt32 value);
    [DispIdAttribute("10061")]
public abstract virtual bool get_AllowUnsafeBlocks();
    [DispIdAttribute("10061")]
public abstract virtual void set_AllowUnsafeBlocks(bool value);
    [DispIdAttribute("10062")]
public abstract virtual bool get_CheckForOverflowUnderflow();
    [DispIdAttribute("10062")]
public abstract virtual void set_CheckForOverflowUnderflow(bool value);
    [DispIdAttribute("10063")]
public abstract virtual string get_DocumentationFile();
    [DispIdAttribute("10063")]
public abstract virtual void set_DocumentationFile(string value);
    [DispIdAttribute("10064")]
public abstract virtual bool get_Optimize();
    [DispIdAttribute("10064")]
public abstract virtual void set_Optimize(bool value);
    [DispIdAttribute("10065")]
public abstract virtual bool get_IncrementalBuild();
    [DispIdAttribute("10065")]
public abstract virtual void set_IncrementalBuild(bool value);
    [DispIdAttribute("10006")]
public abstract virtual string get_StartProgram();
    [DispIdAttribute("10006")]
public abstract virtual void set_StartProgram(string value);
    [DispIdAttribute("10007")]
public abstract virtual string get_StartWorkingDirectory();
    [DispIdAttribute("10007")]
public abstract virtual void set_StartWorkingDirectory(string value);
    [DispIdAttribute("10008")]
public abstract virtual string get_StartURL();
    [DispIdAttribute("10008")]
public abstract virtual void set_StartURL(string value);
    [DispIdAttribute("10038")]
public abstract virtual string get_StartPage();
    [DispIdAttribute("10038")]
public abstract virtual void set_StartPage(string value);
    [DispIdAttribute("10002")]
public abstract virtual string get_StartArguments();
    [DispIdAttribute("10002")]
public abstract virtual void set_StartArguments(string value);
    [DispIdAttribute("10039")]
public abstract virtual bool get_StartWithIE();
    [DispIdAttribute("10039")]
public abstract virtual void set_StartWithIE(bool value);
    [DispIdAttribute("10040")]
public abstract virtual bool get_EnableASPDebugging();
    [DispIdAttribute("10040")]
public abstract virtual void set_EnableASPDebugging(bool value);
    [DispIdAttribute("10041")]
public abstract virtual bool get_EnableASPXDebugging();
    [DispIdAttribute("10041")]
public abstract virtual void set_EnableASPXDebugging(bool value);
    [DispIdAttribute("10057")]
public abstract virtual bool get_EnableUnmanagedDebugging();
    [DispIdAttribute("10057")]
public abstract virtual void set_EnableUnmanagedDebugging(bool value);
    [DispIdAttribute("10003")]
public abstract virtual prjStartAction get_StartAction();
    [DispIdAttribute("10003")]
public abstract virtual void set_StartAction(prjStartAction value);
    [DispIdAttribute("10030")]
public abstract virtual object get_Extender(string extenderName);
    [DispIdAttribute("10031")]
public abstract virtual object get_ExtenderNames();
    [DispIdAttribute("10032")]
public abstract virtual string get_ExtenderCATID();
    [DispIdAttribute("10052")]
public abstract virtual prjWarningLevel get_WarningLevel();
    [DispIdAttribute("10052")]
public abstract virtual void set_WarningLevel(prjWarningLevel value);
    [DispIdAttribute("10053")]
public abstract virtual bool get_TreatWarningsAsErrors();
    [DispIdAttribute("10053")]
public abstract virtual void set_TreatWarningsAsErrors(bool value);
    [DispIdAttribute("10058")]
public abstract virtual bool get_EnableSQLServerDebugging();
    [DispIdAttribute("10058")]
public abstract virtual void set_EnableSQLServerDebugging(bool value);
    [DispIdAttribute("10069")]
public abstract virtual UInt32 get_FileAlignment();
    [DispIdAttribute("10069")]
public abstract virtual void set_FileAlignment(UInt32 value);
    [DispIdAttribute("10072")]
public abstract virtual bool get_RegisterForComInterop();
    [DispIdAttribute("10072")]
public abstract virtual void set_RegisterForComInterop(bool value);
    [DispIdAttribute("10073")]
public abstract virtual string get_ConfigurationOverrideFile();
    [DispIdAttribute("10073")]
public abstract virtual void set_ConfigurationOverrideFile(string value);
    [DispIdAttribute("10074")]
public abstract virtual bool get_RemoteDebugEnabled();
    [DispIdAttribute("10074")]
public abstract virtual void set_RemoteDebugEnabled(bool value);
    [DispIdAttribute("10075")]
public abstract virtual string get_RemoteDebugMachine();
    [DispIdAttribute("10075")]
public abstract virtual void set_RemoteDebugMachine(string value);
}
[GuidAttribute("3CDAA65E-1E9D-11D3-B202-00C04F79CACB")]
public interface VSLangProj.ProjectProperties {
    [DispIdAttribute("-2147418112")]
public string __id { get; }
    [DispIdAttribute("10035")]
public object __project { get; }
    [DispIdAttribute("10015")]
public string StartupObject { get; public set; }
    [DispIdAttribute("10016")]
public prjOutputType OutputType { get; public set; }
    [DispIdAttribute("10042")]
public string RootNamespace { get; public set; }
    [DispIdAttribute("10013")]
public string AssemblyName { get; public set; }
    [DispIdAttribute("10044")]
public string AssemblyOriginatorKeyFile { get; public set; }
    [DispIdAttribute("10045")]
public string AssemblyKeyContainerName { get; public set; }
    [DispIdAttribute("10043")]
public prjOriginatorKeyMode AssemblyOriginatorKeyMode { get; public set; }
    [DispIdAttribute("10046")]
public bool DelaySign { get; public set; }
    [DispIdAttribute("10012")]
public string WebServer { get; }
    [DispIdAttribute("10017")]
public string WebServerVersion { get; }
    [DispIdAttribute("10018")]
public string ServerExtensionsVersion { get; }
    [DispIdAttribute("10019")]
public bool LinkRepair { get; public set; }
    [DispIdAttribute("10020")]
public string OfflineURL { get; }
    [DispIdAttribute("10047")]
public string FileSharePath { get; public set; }
    [DispIdAttribute("10048")]
public string ActiveFileSharePath { get; }
    [DispIdAttribute("10049")]
public prjWebAccessMethod WebAccessMethod { get; public set; }
    [DispIdAttribute("10050")]
public prjWebAccessMethod ActiveWebAccessMethod { get; }
    [DispIdAttribute("10021")]
public prjScriptLanguage DefaultClientScript { get; public set; }
    [DispIdAttribute("10022")]
public prjTargetSchema DefaultTargetSchema { get; public set; }
    [DispIdAttribute("10023")]
public prjHTMLPageLayout DefaultHTMLPageLayout { get; public set; }
    [DispIdAttribute("10026")]
public string FileName { get; public set; }
    [DispIdAttribute("10027")]
public string FullPath { get; }
    [DispIdAttribute("10028")]
public string LocalPath { get; }
    [DispIdAttribute("10029")]
public string URL { get; }
    [DispIdAttribute("10033")]
public ProjectConfigurationProperties ActiveConfigurationSettings { get; }
    [DispIdAttribute("10030")]
public object Extender { get; }
    [DispIdAttribute("10031")]
public object ExtenderNames { get; }
    [DispIdAttribute("10032")]
public string ExtenderCATID { get; }
    [DispIdAttribute("10011")]
public string ApplicationIcon { get; public set; }
    [DispIdAttribute("10051")]
public prjOptionStrict OptionStrict { get; public set; }
    [DispIdAttribute("10056")]
public string ReferencePath { get; public set; }
    [DispIdAttribute("10009")]
public string OutputFileName { get; }
    [DispIdAttribute("10034")]
public string AbsoluteProjectDirectory { get; }
    [DispIdAttribute("10059")]
public prjOptionExplicit OptionExplicit { get; public set; }
    [DispIdAttribute("10060")]
public prjCompare OptionCompare { get; public set; }
    [DispIdAttribute("10067")]
public prjProjectType ProjectType { get; }
    [DispIdAttribute("10068")]
public string DefaultNamespace { get; public set; }
    [DispIdAttribute("-2147418112")]
public abstract virtual string get___id();
    [DispIdAttribute("10035")]
public abstract virtual object get___project();
    [DispIdAttribute("10015")]
public abstract virtual string get_StartupObject();
    [DispIdAttribute("10015")]
public abstract virtual void set_StartupObject(string value);
    [DispIdAttribute("10016")]
public abstract virtual prjOutputType get_OutputType();
    [DispIdAttribute("10016")]
public abstract virtual void set_OutputType(prjOutputType value);
    [DispIdAttribute("10042")]
public abstract virtual string get_RootNamespace();
    [DispIdAttribute("10042")]
public abstract virtual void set_RootNamespace(string value);
    [DispIdAttribute("10013")]
public abstract virtual string get_AssemblyName();
    [DispIdAttribute("10013")]
public abstract virtual void set_AssemblyName(string value);
    [DispIdAttribute("10044")]
public abstract virtual string get_AssemblyOriginatorKeyFile();
    [DispIdAttribute("10044")]
public abstract virtual void set_AssemblyOriginatorKeyFile(string value);
    [DispIdAttribute("10045")]
public abstract virtual string get_AssemblyKeyContainerName();
    [DispIdAttribute("10045")]
public abstract virtual void set_AssemblyKeyContainerName(string value);
    [DispIdAttribute("10043")]
public abstract virtual prjOriginatorKeyMode get_AssemblyOriginatorKeyMode();
    [DispIdAttribute("10043")]
public abstract virtual void set_AssemblyOriginatorKeyMode(prjOriginatorKeyMode value);
    [DispIdAttribute("10046")]
public abstract virtual bool get_DelaySign();
    [DispIdAttribute("10046")]
public abstract virtual void set_DelaySign(bool value);
    [DispIdAttribute("10012")]
public abstract virtual string get_WebServer();
    [DispIdAttribute("10017")]
public abstract virtual string get_WebServerVersion();
    [DispIdAttribute("10018")]
public abstract virtual string get_ServerExtensionsVersion();
    [DispIdAttribute("10019")]
public abstract virtual bool get_LinkRepair();
    [DispIdAttribute("10019")]
public abstract virtual void set_LinkRepair(bool value);
    [DispIdAttribute("10020")]
public abstract virtual string get_OfflineURL();
    [DispIdAttribute("10047")]
public abstract virtual string get_FileSharePath();
    [DispIdAttribute("10047")]
public abstract virtual void set_FileSharePath(string value);
    [DispIdAttribute("10048")]
public abstract virtual string get_ActiveFileSharePath();
    [DispIdAttribute("10049")]
public abstract virtual prjWebAccessMethod get_WebAccessMethod();
    [DispIdAttribute("10049")]
public abstract virtual void set_WebAccessMethod(prjWebAccessMethod value);
    [DispIdAttribute("10050")]
public abstract virtual prjWebAccessMethod get_ActiveWebAccessMethod();
    [DispIdAttribute("10021")]
public abstract virtual prjScriptLanguage get_DefaultClientScript();
    [DispIdAttribute("10021")]
public abstract virtual void set_DefaultClientScript(prjScriptLanguage value);
    [DispIdAttribute("10022")]
public abstract virtual prjTargetSchema get_DefaultTargetSchema();
    [DispIdAttribute("10022")]
public abstract virtual void set_DefaultTargetSchema(prjTargetSchema value);
    [DispIdAttribute("10023")]
public abstract virtual prjHTMLPageLayout get_DefaultHTMLPageLayout();
    [DispIdAttribute("10023")]
public abstract virtual void set_DefaultHTMLPageLayout(prjHTMLPageLayout value);
    [DispIdAttribute("10026")]
public abstract virtual string get_FileName();
    [DispIdAttribute("10026")]
public abstract virtual void set_FileName(string value);
    [DispIdAttribute("10027")]
public abstract virtual string get_FullPath();
    [DispIdAttribute("10028")]
public abstract virtual string get_LocalPath();
    [DispIdAttribute("10029")]
public abstract virtual string get_URL();
    [DispIdAttribute("10033")]
public abstract virtual ProjectConfigurationProperties get_ActiveConfigurationSettings();
    [DispIdAttribute("10030")]
public abstract virtual object get_Extender();
    [DispIdAttribute("10031")]
public abstract virtual object get_ExtenderNames();
    [DispIdAttribute("10032")]
public abstract virtual string get_ExtenderCATID();
    [DispIdAttribute("10011")]
public abstract virtual string get_ApplicationIcon();
    [DispIdAttribute("10011")]
public abstract virtual void set_ApplicationIcon(string value);
    [DispIdAttribute("10051")]
public abstract virtual prjOptionStrict get_OptionStrict();
    [DispIdAttribute("10051")]
public abstract virtual void set_OptionStrict(prjOptionStrict value);
    [DispIdAttribute("10056")]
public abstract virtual string get_ReferencePath();
    [DispIdAttribute("10056")]
public abstract virtual void set_ReferencePath(string value);
    [DispIdAttribute("10009")]
public abstract virtual string get_OutputFileName();
    [DispIdAttribute("10034")]
public abstract virtual string get_AbsoluteProjectDirectory();
    [DispIdAttribute("10059")]
public abstract virtual prjOptionExplicit get_OptionExplicit();
    [DispIdAttribute("10059")]
public abstract virtual void set_OptionExplicit(prjOptionExplicit value);
    [DispIdAttribute("10060")]
public abstract virtual prjCompare get_OptionCompare();
    [DispIdAttribute("10060")]
public abstract virtual void set_OptionCompare(prjCompare value);
    [DispIdAttribute("10067")]
public abstract virtual prjProjectType get_ProjectType();
    [DispIdAttribute("10068")]
public abstract virtual string get_DefaultNamespace();
    [DispIdAttribute("10068")]
public abstract virtual void set_DefaultNamespace(string value);
}
[TypeLibTypeAttribute("4160")]
[GuidAttribute("35D6FB50-35B6-4C81-B91C-3930B0D95386")]
public interface VSLangProj.Reference {
    [DispIdAttribute("1")]
public DTE DTE { get; }
    [DispIdAttribute("2")]
public References Collection { get; }
    [DispIdAttribute("3")]
public Project ContainingProject { get; }
    [DispIdAttribute("5")]
public string Name { get; }
    [DispIdAttribute("6")]
public prjReferenceType Type { get; }
    [DispIdAttribute("7")]
public string Identity { get; }
    [DispIdAttribute("8")]
public string Path { get; }
    [DispIdAttribute("9")]
public string Description { get; }
    [DispIdAttribute("10")]
public string Culture { get; }
    [DispIdAttribute("11")]
public int MajorVersion { get; }
    [DispIdAttribute("12")]
public int MinorVersion { get; }
    [DispIdAttribute("13")]
public int RevisionNumber { get; }
    [DispIdAttribute("14")]
public int BuildNumber { get; }
    [DispIdAttribute("15")]
public bool StrongName { get; }
    [DispIdAttribute("16")]
public Project SourceProject { get; }
    [DispIdAttribute("17")]
public bool CopyLocal { get; public set; }
    [DispIdAttribute("18")]
public object Extender { get; }
    [DispIdAttribute("19")]
public object ExtenderNames { get; }
    [DispIdAttribute("20")]
public string ExtenderCATID { get; }
    [DispIdAttribute("21")]
public string PublicKeyToken { get; }
    [DispIdAttribute("22")]
public string Version { get; }
    [DispIdAttribute("1")]
public abstract virtual DTE get_DTE();
    [DispIdAttribute("2")]
public abstract virtual References get_Collection();
    [DispIdAttribute("3")]
public abstract virtual Project get_ContainingProject();
    [DispIdAttribute("4")]
public abstract virtual void Remove();
    [DispIdAttribute("5")]
public abstract virtual string get_Name();
    [DispIdAttribute("6")]
public abstract virtual prjReferenceType get_Type();
    [DispIdAttribute("7")]
public abstract virtual string get_Identity();
    [DispIdAttribute("8")]
public abstract virtual string get_Path();
    [DispIdAttribute("9")]
public abstract virtual string get_Description();
    [DispIdAttribute("10")]
public abstract virtual string get_Culture();
    [DispIdAttribute("11")]
public abstract virtual int get_MajorVersion();
    [DispIdAttribute("12")]
public abstract virtual int get_MinorVersion();
    [DispIdAttribute("13")]
public abstract virtual int get_RevisionNumber();
    [DispIdAttribute("14")]
public abstract virtual int get_BuildNumber();
    [DispIdAttribute("15")]
public abstract virtual bool get_StrongName();
    [DispIdAttribute("16")]
public abstract virtual Project get_SourceProject();
    [DispIdAttribute("17")]
public abstract virtual bool get_CopyLocal();
    [DispIdAttribute("17")]
public abstract virtual void set_CopyLocal(bool pbCopyLocal);
    [DispIdAttribute("18")]
[TypeLibFuncAttribute("1088")]
public abstract virtual object get_Extender(string ExtenderName);
    [DispIdAttribute("19")]
[TypeLibFuncAttribute("1088")]
public abstract virtual object get_ExtenderNames();
    [TypeLibFuncAttribute("1088")]
[DispIdAttribute("20")]
public abstract virtual string get_ExtenderCATID();
    [DispIdAttribute("21")]
[TypeLibFuncAttribute("1088")]
public abstract virtual string get_PublicKeyToken();
    [DispIdAttribute("22")]
public abstract virtual string get_Version();
}
[DefaultMemberAttribute("Item")]
[GuidAttribute("B8758EE4-0553-4BC9-8432-440449D35C14")]
public interface VSLangProj.References {
    [DispIdAttribute("1")]
public DTE DTE { get; }
    [DispIdAttribute("2")]
public object Parent { get; }
    [DispIdAttribute("3")]
public Project ContainingProject { get; }
    [DispIdAttribute("4")]
public int Count { get; }
    [DispIdAttribute("1")]
public abstract virtual DTE get_DTE();
    [DispIdAttribute("2")]
public abstract virtual object get_Parent();
    [DispIdAttribute("3")]
public abstract virtual Project get_ContainingProject();
    [DispIdAttribute("4")]
public abstract virtual int get_Count();
    [DispIdAttribute("0")]
public abstract virtual Reference Item(object index);
    [DispIdAttribute("-4")]
public abstract virtual IEnumerator GetEnumerator();
    [DispIdAttribute("5")]
public abstract virtual Reference Find(string bstrIdentity);
    [DispIdAttribute("6")]
public abstract virtual Reference Add(string bstrPath);
    [DispIdAttribute("7")]
public abstract virtual Reference AddActiveX(string bstrTypeLibGuid, int lMajorVer, int lMinorVer, int lLocaleId, string bstrWrapperTool);
    [DispIdAttribute("8")]
public abstract virtual Reference AddProject(Project pProject);
}
[ComVisibleAttribute("False")]
[CoClassAttribute("VSLangProj.ReferencesEventsClass")]
[GuidAttribute("1CF40C9E-D548-4B45-AD0F-3D7843F62BBB")]
public interface VSLangProj.ReferencesEvents {
}
[ComVisibleAttribute("False")]
[ComSourceInterfacesAttribute("VSLangProj._dispReferencesEvents")]
[ClassInterfaceAttribute("0")]
[GuidAttribute("1CDB29FE-33B7-4392-9742-D9415D3408FE")]
public class VSLangProj.ReferencesEventsClass : object {
}
[ComVisibleAttribute("False")]
[GuidAttribute("0B48100A-473E-433C-AB8F-66B9739AB620")]
public interface VSLangProj.SVsProjectItem {
}
public enum VSLangProj.tagWebPrjAuthoringAccess : Enum {
    public int value__;
    public static tagWebPrjAuthoringAccess webPrjAuthoringAccess_FileShare;
    public static tagWebPrjAuthoringAccess webPrjAuthoringAccess_FrontPage;
}
[GuidAttribute("2CFB826F-F6BF-480D-A546-95A0381CC411")]
public interface VSLangProj.VSProject {
    [DispIdAttribute("1")]
public References References { get; }
    [DispIdAttribute("2")]
public BuildManager BuildManager { get; }
    [DispIdAttribute("3")]
public DTE DTE { get; }
    [DispIdAttribute("4")]
public Project Project { get; }
    [DispIdAttribute("6")]
public ProjectItem WebReferencesFolder { get; }
    [DispIdAttribute("8")]
public string TemplatePath { get; }
    [DispIdAttribute("10")]
public bool WorkOffline { get; public set; }
    [DispIdAttribute("11")]
public Imports Imports { get; }
    [DispIdAttribute("12")]
public VSProjectEvents Events { get; }
    [DispIdAttribute("1")]
public abstract virtual References get_References();
    [DispIdAttribute("2")]
public abstract virtual BuildManager get_BuildManager();
    [DispIdAttribute("3")]
public abstract virtual DTE get_DTE();
    [DispIdAttribute("4")]
public abstract virtual Project get_Project();
    [DispIdAttribute("5")]
public abstract virtual ProjectItem CreateWebReferencesFolder();
    [DispIdAttribute("6")]
public abstract virtual ProjectItem get_WebReferencesFolder();
    [DispIdAttribute("7")]
public abstract virtual ProjectItem AddWebReference(string bstrUrl);
    [DispIdAttribute("8")]
public abstract virtual string get_TemplatePath();
    [DispIdAttribute("9")]
public abstract virtual void Refresh();
    [DispIdAttribute("10")]
public abstract virtual bool get_WorkOffline();
    [DispIdAttribute("10")]
public abstract virtual void set_WorkOffline(bool value);
    [DispIdAttribute("11")]
public abstract virtual Imports get_Imports();
    [DispIdAttribute("12")]
public abstract virtual VSProjectEvents get_Events();
    [DispIdAttribute("13")]
public abstract virtual void CopyProject(string bstrDestFolder, string bstrDestUNCPath, prjCopyProjectOption copyProjectOption, string bstrUsername, string bstrPassword);
    [DispIdAttribute("14")]
public abstract virtual void Exec(prjExecCommand command, int bSuppressUI, object varIn, Object& pVarOut);
    [DispIdAttribute("15")]
public abstract virtual void GenerateKeyPairFiles(string strPublicPrivateFile, string strPublicOnlyFile);
    [DispIdAttribute("16")]
public abstract virtual string GetUniqueFilename(object pDispatch, string bstrRoot, string bstrDesiredExt);
}
[GuidAttribute("F8B92546-F1A2-4066-92F6-FDF2E691A50C")]
public interface VSLangProj.VSProjectEvents {
    [DispIdAttribute("1")]
public ReferencesEvents ReferencesEvents { get; }
    [DispIdAttribute("2")]
public BuildManagerEvents BuildManagerEvents { get; }
    [DispIdAttribute("3")]
public ImportsEvents ImportsEvents { get; }
    [DispIdAttribute("1")]
public abstract virtual ReferencesEvents get_ReferencesEvents();
    [DispIdAttribute("2")]
public abstract virtual BuildManagerEvents get_BuildManagerEvents();
    [DispIdAttribute("3")]
public abstract virtual ImportsEvents get_ImportsEvents();
}
[GuidAttribute("89FF44C6-979D-49B6-AF56-EC9509001DE4")]
public interface VSLangProj.VSProjectItem {
    [DispIdAttribute("1")]
public DTE DTE { get; }
    [DispIdAttribute("2")]
public ProjectItem ProjectItem { get; }
    [DispIdAttribute("3")]
public Project ContainingProject { get; }
    [DispIdAttribute("1")]
public abstract virtual DTE get_DTE();
    [DispIdAttribute("2")]
public abstract virtual ProjectItem get_ProjectItem();
    [DispIdAttribute("3")]
public abstract virtual Project get_ContainingProject();
    [DispIdAttribute("4")]
public abstract virtual void RunCustomTool();
}
[GuidAttribute("316A5305-224A-4580-91EA-5C62AFEC07FF")]
public enum VSLangProj.webPrjAuthoringAccess : Enum {
    public int value__;
    public static webPrjAuthoringAccess webPrjAuthoringAccess_FileShare;
    public static webPrjAuthoringAccess webPrjAuthoringAccess_FrontPage;
}
[GuidAttribute("1FE01DDF-C760-4307-8A40-0D023AEAFF07")]
public enum VSLangProj.webrefUrlBehavior : Enum {
    public int value__;
    public static webrefUrlBehavior webrefUrlBehaviorStatic;
    public static webrefUrlBehavior webrefUrlBehaviorDynamic;
}
[GuidAttribute("8FA8D496-CAF1-40B3-BC58-5FC877FEFEA7")]
public interface VSLangProj.WebSettings {
    [ComAliasNameAttribute("VSLangProj.webPrjAuthoringAccess")]
[DispIdAttribute("1")]
public webPrjAuthoringAccess AuthoringAccess { get; public set; }
    [DispIdAttribute("2")]
public bool RepairLinks { get; public set; }
    [DispIdAttribute("3")]
public string WebProjectCacheDirectory { get; public set; }
    [DispIdAttribute("1")]
public abstract virtual webPrjAuthoringAccess get_AuthoringAccess();
    [DispIdAttribute("1")]
public abstract virtual void set_AuthoringAccess(webPrjAuthoringAccess value);
    [DispIdAttribute("2")]
public abstract virtual bool get_RepairLinks();
    [DispIdAttribute("2")]
public abstract virtual void set_RepairLinks(bool value);
    [DispIdAttribute("3")]
public abstract virtual string get_WebProjectCacheDirectory();
    [DispIdAttribute("3")]
public abstract virtual void set_WebProjectCacheDirectory(string value);
    [DispIdAttribute("4")]
public abstract virtual void SetDefaultWebProjectCacheDirectory();
}
public enum VslangProj100.VBProjPropId100 : Enum {
    public int value__;
    public static VBProjPropId100 VBPROJPROPID_LanguageVersion;
}
public enum VslangProj100.VsProjPropId100 : Enum {
    public int value__;
    public static VsProjPropId100 VBPROJPROPID_TargetFrameworkMoniker;
    public static VsProjPropId100 VBPROJPROPID_CodeAnalysisRuleSet;
    public static VsProjPropId100 VBPROJPROPID_CodeAnalysisRuleSetDirectories;
    public static VsProjPropId100 VBPROJPROPID_CodeAnalysisIgnoreBuiltInRuleSets;
    public static VsProjPropId100 VBPROJPROPID_CodeAnalysisRuleDirectories;
    public static VsProjPropId100 VBPROJPROPID_CodeAnalysisIgnoreBuiltInRules;
    public static VsProjPropId100 VBPROJPROPID_CodeAnalysisFailOnMissingRules;
}
public enum VslangProj100.VsProjReferencePropId100 : Enum {
    public int value__;
    public static VsProjReferencePropId100 DISPID_Reference_EmbedInteropTypes;
}
public enum VSLangProj110.__PROJECTREFERENCETYPE2 : Enum {
    public int value__;
    public static __PROJECTREFERENCETYPE2 PROJREFTYPE_SDK;
}
[GuidAttribute("C379AF13-6C05-4A91-A3BF-4C61999174B4")]
public interface VSLangProj110.CSharpProjectConfigurationProperties5 {
    [DispIdAttribute("-2147418112")]
public string __id { get; }
    [DispIdAttribute("10001")]
public bool DebugSymbols { get; public set; }
    [DispIdAttribute("10036")]
public bool DefineDebug { get; public set; }
    [DispIdAttribute("10037")]
public bool DefineTrace { get; public set; }
    [DispIdAttribute("10004")]
public string OutputPath { get; public set; }
    [DispIdAttribute("10010")]
public string IntermediatePath { get; public set; }
    [DispIdAttribute("10005")]
public string DefineConstants { get; public set; }
    [DispIdAttribute("10054")]
public bool RemoveIntegerChecks { get; public set; }
    [DispIdAttribute("10055")]
public UInt32 BaseAddress { get; public set; }
    [DispIdAttribute("10061")]
public bool AllowUnsafeBlocks { get; public set; }
    [DispIdAttribute("10062")]
public bool CheckForOverflowUnderflow { get; public set; }
    [DispIdAttribute("10063")]
public string DocumentationFile { get; public set; }
    [DispIdAttribute("10064")]
public bool Optimize { get; public set; }
    [DispIdAttribute("10065")]
public bool IncrementalBuild { get; public set; }
    [DispIdAttribute("10006")]
public string StartProgram { get; public set; }
    [DispIdAttribute("10007")]
public string StartWorkingDirectory { get; public set; }
    [DispIdAttribute("10008")]
public string StartURL { get; public set; }
    [DispIdAttribute("10038")]
public string StartPage { get; public set; }
    [DispIdAttribute("10002")]
public string StartArguments { get; public set; }
    [DispIdAttribute("10039")]
public bool StartWithIE { get; public set; }
    [DispIdAttribute("10040")]
public bool EnableASPDebugging { get; public set; }
    [DispIdAttribute("10041")]
public bool EnableASPXDebugging { get; public set; }
    [DispIdAttribute("10057")]
public bool EnableUnmanagedDebugging { get; public set; }
    [DispIdAttribute("10003")]
public prjStartAction StartAction { get; public set; }
    [DispIdAttribute("10031")]
public object ExtenderNames { get; }
    [DispIdAttribute("10032")]
public string ExtenderCATID { get; }
    [DispIdAttribute("10052")]
public prjWarningLevel WarningLevel { get; public set; }
    [DispIdAttribute("10053")]
public bool TreatWarningsAsErrors { get; public set; }
    [DispIdAttribute("10058")]
public bool EnableSQLServerDebugging { get; public set; }
    [DispIdAttribute("10069")]
public UInt32 FileAlignment { get; public set; }
    [DispIdAttribute("10072")]
public bool RegisterForComInterop { get; public set; }
    [DispIdAttribute("10073")]
public string ConfigurationOverrideFile { get; public set; }
    [DispIdAttribute("10074")]
public bool RemoteDebugEnabled { get; public set; }
    [DispIdAttribute("10075")]
public string RemoteDebugMachine { get; public set; }
    [DispIdAttribute("10079")]
public string NoWarn { get; public set; }
    [DispIdAttribute("10066")]
public bool NoStdLib { get; public set; }
    [DispIdAttribute("10106")]
public string DebugInfo { get; public set; }
    [DispIdAttribute("10109")]
public string PlatformTarget { get; public set; }
    [DispIdAttribute("12121")]
public string TreatSpecificWarningsAsErrors { get; public set; }
    [DispIdAttribute("12200")]
public bool RunCodeAnalysis { get; public set; }
    [DispIdAttribute("12201")]
public string CodeAnalysisLogFile { get; public set; }
    [DispIdAttribute("12202")]
public string CodeAnalysisRuleAssemblies { get; public set; }
    [DispIdAttribute("12204")]
public string CodeAnalysisInputAssembly { get; public set; }
    [DispIdAttribute("12203")]
public string CodeAnalysisRules { get; public set; }
    [DispIdAttribute("12205")]
public string CodeAnalysisSpellCheckLanguages { get; public set; }
    [DispIdAttribute("12206")]
public bool CodeAnalysisUseTypeNameInSuppression { get; public set; }
    [DispIdAttribute("12207")]
public string CodeAnalysisModuleSuppressionsFile { get; public set; }
    [DispIdAttribute("10110")]
public bool UseVSHostingProcess { get; public set; }
    [DispIdAttribute("10111")]
public sgenGenerationOption GenerateSerializationAssemblies { get; public set; }
    [DispIdAttribute("13104")]
public string LanguageVersion { get; public set; }
    [DispIdAttribute("13105")]
public string ErrorReport { get; public set; }
    [DispIdAttribute("15208")]
public bool CodeAnalysisIgnoreGeneratedCode { get; public set; }
    [DispIdAttribute("15209")]
public bool CodeAnalysisOverrideRuleVisibilities { get; public set; }
    [DispIdAttribute("15211")]
public string CodeAnalysisDictionaries { get; public set; }
    [DispIdAttribute("15210")]
public string CodeAnalysisCulture { get; public set; }
    [DispIdAttribute("15212")]
public string CodeAnalysisRuleSet { get; public set; }
    [DispIdAttribute("15213")]
public string CodeAnalysisRuleSetDirectories { get; public set; }
    [DispIdAttribute("15214")]
public bool CodeAnalysisIgnoreBuiltInRuleSets { get; public set; }
    [DispIdAttribute("15215")]
public string CodeAnalysisRuleDirectories { get; public set; }
    [DispIdAttribute("15216")]
public bool CodeAnalysisIgnoreBuiltInRules { get; public set; }
    [DispIdAttribute("15217")]
public bool CodeAnalysisFailOnMissingRules { get; public set; }
    [DispIdAttribute("-2147418112")]
public abstract virtual string get___id();
    [DispIdAttribute("10001")]
public abstract virtual bool get_DebugSymbols();
    [DispIdAttribute("10001")]
public abstract virtual void set_DebugSymbols(bool value);
    [DispIdAttribute("10036")]
public abstract virtual bool get_DefineDebug();
    [DispIdAttribute("10036")]
public abstract virtual void set_DefineDebug(bool value);
    [DispIdAttribute("10037")]
public abstract virtual bool get_DefineTrace();
    [DispIdAttribute("10037")]
public abstract virtual void set_DefineTrace(bool value);
    [DispIdAttribute("10004")]
public abstract virtual string get_OutputPath();
    [DispIdAttribute("10004")]
public abstract virtual void set_OutputPath(string value);
    [DispIdAttribute("10010")]
public abstract virtual string get_IntermediatePath();
    [DispIdAttribute("10010")]
public abstract virtual void set_IntermediatePath(string value);
    [DispIdAttribute("10005")]
public abstract virtual string get_DefineConstants();
    [DispIdAttribute("10005")]
public abstract virtual void set_DefineConstants(string value);
    [DispIdAttribute("10054")]
public abstract virtual bool get_RemoveIntegerChecks();
    [DispIdAttribute("10054")]
public abstract virtual void set_RemoveIntegerChecks(bool value);
    [DispIdAttribute("10055")]
public abstract virtual UInt32 get_BaseAddress();
    [DispIdAttribute("10055")]
public abstract virtual void set_BaseAddress(UInt32 value);
    [DispIdAttribute("10061")]
public abstract virtual bool get_AllowUnsafeBlocks();
    [DispIdAttribute("10061")]
public abstract virtual void set_AllowUnsafeBlocks(bool value);
    [DispIdAttribute("10062")]
public abstract virtual bool get_CheckForOverflowUnderflow();
    [DispIdAttribute("10062")]
public abstract virtual void set_CheckForOverflowUnderflow(bool value);
    [DispIdAttribute("10063")]
public abstract virtual string get_DocumentationFile();
    [DispIdAttribute("10063")]
public abstract virtual void set_DocumentationFile(string value);
    [DispIdAttribute("10064")]
public abstract virtual bool get_Optimize();
    [DispIdAttribute("10064")]
public abstract virtual void set_Optimize(bool value);
    [DispIdAttribute("10065")]
public abstract virtual bool get_IncrementalBuild();
    [DispIdAttribute("10065")]
public abstract virtual void set_IncrementalBuild(bool value);
    [DispIdAttribute("10006")]
public abstract virtual string get_StartProgram();
    [DispIdAttribute("10006")]
public abstract virtual void set_StartProgram(string value);
    [DispIdAttribute("10007")]
public abstract virtual string get_StartWorkingDirectory();
    [DispIdAttribute("10007")]
public abstract virtual void set_StartWorkingDirectory(string value);
    [DispIdAttribute("10008")]
public abstract virtual string get_StartURL();
    [DispIdAttribute("10008")]
public abstract virtual void set_StartURL(string value);
    [DispIdAttribute("10038")]
public abstract virtual string get_StartPage();
    [DispIdAttribute("10038")]
public abstract virtual void set_StartPage(string value);
    [DispIdAttribute("10002")]
public abstract virtual string get_StartArguments();
    [DispIdAttribute("10002")]
public abstract virtual void set_StartArguments(string value);
    [DispIdAttribute("10039")]
public abstract virtual bool get_StartWithIE();
    [DispIdAttribute("10039")]
public abstract virtual void set_StartWithIE(bool value);
    [DispIdAttribute("10040")]
public abstract virtual bool get_EnableASPDebugging();
    [DispIdAttribute("10040")]
public abstract virtual void set_EnableASPDebugging(bool value);
    [DispIdAttribute("10041")]
public abstract virtual bool get_EnableASPXDebugging();
    [DispIdAttribute("10041")]
public abstract virtual void set_EnableASPXDebugging(bool value);
    [DispIdAttribute("10057")]
public abstract virtual bool get_EnableUnmanagedDebugging();
    [DispIdAttribute("10057")]
public abstract virtual void set_EnableUnmanagedDebugging(bool value);
    [DispIdAttribute("10003")]
public abstract virtual prjStartAction get_StartAction();
    [DispIdAttribute("10003")]
public abstract virtual void set_StartAction(prjStartAction value);
    [DispIdAttribute("10030")]
public abstract virtual object get_Extender(string extenderName);
    [DispIdAttribute("10031")]
public abstract virtual object get_ExtenderNames();
    [DispIdAttribute("10032")]
public abstract virtual string get_ExtenderCATID();
    [DispIdAttribute("10052")]
public abstract virtual prjWarningLevel get_WarningLevel();
    [DispIdAttribute("10052")]
public abstract virtual void set_WarningLevel(prjWarningLevel value);
    [DispIdAttribute("10053")]
public abstract virtual bool get_TreatWarningsAsErrors();
    [DispIdAttribute("10053")]
public abstract virtual void set_TreatWarningsAsErrors(bool value);
    [DispIdAttribute("10058")]
public abstract virtual bool get_EnableSQLServerDebugging();
    [DispIdAttribute("10058")]
public abstract virtual void set_EnableSQLServerDebugging(bool value);
    [DispIdAttribute("10069")]
public abstract virtual UInt32 get_FileAlignment();
    [DispIdAttribute("10069")]
public abstract virtual void set_FileAlignment(UInt32 value);
    [DispIdAttribute("10072")]
public abstract virtual bool get_RegisterForComInterop();
    [DispIdAttribute("10072")]
public abstract virtual void set_RegisterForComInterop(bool value);
    [DispIdAttribute("10073")]
public abstract virtual string get_ConfigurationOverrideFile();
    [DispIdAttribute("10073")]
public abstract virtual void set_ConfigurationOverrideFile(string value);
    [DispIdAttribute("10074")]
public abstract virtual bool get_RemoteDebugEnabled();
    [DispIdAttribute("10074")]
public abstract virtual void set_RemoteDebugEnabled(bool value);
    [DispIdAttribute("10075")]
public abstract virtual string get_RemoteDebugMachine();
    [DispIdAttribute("10075")]
public abstract virtual void set_RemoteDebugMachine(string value);
    [DispIdAttribute("10079")]
public abstract virtual string get_NoWarn();
    [DispIdAttribute("10079")]
public abstract virtual void set_NoWarn(string value);
    [DispIdAttribute("10066")]
public abstract virtual bool get_NoStdLib();
    [DispIdAttribute("10066")]
public abstract virtual void set_NoStdLib(bool value);
    [DispIdAttribute("10106")]
public abstract virtual string get_DebugInfo();
    [DispIdAttribute("10106")]
public abstract virtual void set_DebugInfo(string value);
    [DispIdAttribute("10109")]
public abstract virtual string get_PlatformTarget();
    [DispIdAttribute("10109")]
public abstract virtual void set_PlatformTarget(string value);
    [DispIdAttribute("12121")]
public abstract virtual string get_TreatSpecificWarningsAsErrors();
    [DispIdAttribute("12121")]
public abstract virtual void set_TreatSpecificWarningsAsErrors(string value);
    [DispIdAttribute("12200")]
public abstract virtual bool get_RunCodeAnalysis();
    [DispIdAttribute("12200")]
public abstract virtual void set_RunCodeAnalysis(bool value);
    [DispIdAttribute("12201")]
public abstract virtual string get_CodeAnalysisLogFile();
    [DispIdAttribute("12201")]
public abstract virtual void set_CodeAnalysisLogFile(string value);
    [DispIdAttribute("12202")]
public abstract virtual string get_CodeAnalysisRuleAssemblies();
    [DispIdAttribute("12202")]
public abstract virtual void set_CodeAnalysisRuleAssemblies(string value);
    [DispIdAttribute("12204")]
public abstract virtual string get_CodeAnalysisInputAssembly();
    [DispIdAttribute("12204")]
public abstract virtual void set_CodeAnalysisInputAssembly(string value);
    [DispIdAttribute("12203")]
public abstract virtual string get_CodeAnalysisRules();
    [DispIdAttribute("12203")]
public abstract virtual void set_CodeAnalysisRules(string value);
    [DispIdAttribute("12205")]
public abstract virtual string get_CodeAnalysisSpellCheckLanguages();
    [DispIdAttribute("12205")]
public abstract virtual void set_CodeAnalysisSpellCheckLanguages(string value);
    [DispIdAttribute("12206")]
public abstract virtual bool get_CodeAnalysisUseTypeNameInSuppression();
    [DispIdAttribute("12206")]
public abstract virtual void set_CodeAnalysisUseTypeNameInSuppression(bool value);
    [DispIdAttribute("12207")]
public abstract virtual string get_CodeAnalysisModuleSuppressionsFile();
    [DispIdAttribute("12207")]
public abstract virtual void set_CodeAnalysisModuleSuppressionsFile(string value);
    [DispIdAttribute("10110")]
public abstract virtual bool get_UseVSHostingProcess();
    [DispIdAttribute("10110")]
public abstract virtual void set_UseVSHostingProcess(bool value);
    [DispIdAttribute("10111")]
public abstract virtual sgenGenerationOption get_GenerateSerializationAssemblies();
    [DispIdAttribute("10111")]
public abstract virtual void set_GenerateSerializationAssemblies(sgenGenerationOption value);
    [DispIdAttribute("13104")]
public abstract virtual string get_LanguageVersion();
    [DispIdAttribute("13104")]
public abstract virtual void set_LanguageVersion(string value);
    [DispIdAttribute("13105")]
public abstract virtual string get_ErrorReport();
    [DispIdAttribute("13105")]
public abstract virtual void set_ErrorReport(string value);
    [DispIdAttribute("15208")]
public abstract virtual bool get_CodeAnalysisIgnoreGeneratedCode();
    [DispIdAttribute("15208")]
public abstract virtual void set_CodeAnalysisIgnoreGeneratedCode(bool value);
    [DispIdAttribute("15209")]
public abstract virtual bool get_CodeAnalysisOverrideRuleVisibilities();
    [DispIdAttribute("15209")]
public abstract virtual void set_CodeAnalysisOverrideRuleVisibilities(bool value);
    [DispIdAttribute("15211")]
public abstract virtual string get_CodeAnalysisDictionaries();
    [DispIdAttribute("15211")]
public abstract virtual void set_CodeAnalysisDictionaries(string value);
    [DispIdAttribute("15210")]
public abstract virtual string get_CodeAnalysisCulture();
    [DispIdAttribute("15210")]
public abstract virtual void set_CodeAnalysisCulture(string value);
    [DispIdAttribute("15212")]
public abstract virtual string get_CodeAnalysisRuleSet();
    [DispIdAttribute("15212")]
public abstract virtual void set_CodeAnalysisRuleSet(string value);
    [DispIdAttribute("15213")]
public abstract virtual string get_CodeAnalysisRuleSetDirectories();
    [DispIdAttribute("15213")]
public abstract virtual void set_CodeAnalysisRuleSetDirectories(string value);
    [DispIdAttribute("15214")]
public abstract virtual bool get_CodeAnalysisIgnoreBuiltInRuleSets();
    [DispIdAttribute("15214")]
public abstract virtual void set_CodeAnalysisIgnoreBuiltInRuleSets(bool value);
    [DispIdAttribute("15215")]
public abstract virtual string get_CodeAnalysisRuleDirectories();
    [DispIdAttribute("15215")]
public abstract virtual void set_CodeAnalysisRuleDirectories(string value);
    [DispIdAttribute("15216")]
public abstract virtual bool get_CodeAnalysisIgnoreBuiltInRules();
    [DispIdAttribute("15216")]
public abstract virtual void set_CodeAnalysisIgnoreBuiltInRules(bool value);
    [DispIdAttribute("15217")]
public abstract virtual bool get_CodeAnalysisFailOnMissingRules();
    [DispIdAttribute("15217")]
public abstract virtual void set_CodeAnalysisFailOnMissingRules(bool value);
}
[GuidAttribute("97C0FC65-E652-44E1-8367-907FDFCF84FD")]
public interface VSLangProj110.CSharpProjectConfigurationProperties6 {
    [DispIdAttribute("-2147418112")]
public string __id { get; }
    [DispIdAttribute("10001")]
public bool DebugSymbols { get; public set; }
    [DispIdAttribute("10036")]
public bool DefineDebug { get; public set; }
    [DispIdAttribute("10037")]
public bool DefineTrace { get; public set; }
    [DispIdAttribute("10004")]
public string OutputPath { get; public set; }
    [DispIdAttribute("10010")]
public string IntermediatePath { get; public set; }
    [DispIdAttribute("10005")]
public string DefineConstants { get; public set; }
    [DispIdAttribute("10054")]
public bool RemoveIntegerChecks { get; public set; }
    [DispIdAttribute("10055")]
public UInt32 BaseAddress { get; public set; }
    [DispIdAttribute("10061")]
public bool AllowUnsafeBlocks { get; public set; }
    [DispIdAttribute("10062")]
public bool CheckForOverflowUnderflow { get; public set; }
    [DispIdAttribute("10063")]
public string DocumentationFile { get; public set; }
    [DispIdAttribute("10064")]
public bool Optimize { get; public set; }
    [DispIdAttribute("10065")]
public bool IncrementalBuild { get; public set; }
    [DispIdAttribute("10006")]
public string StartProgram { get; public set; }
    [DispIdAttribute("10007")]
public string StartWorkingDirectory { get; public set; }
    [DispIdAttribute("10008")]
public string StartURL { get; public set; }
    [DispIdAttribute("10038")]
public string StartPage { get; public set; }
    [DispIdAttribute("10002")]
public string StartArguments { get; public set; }
    [DispIdAttribute("10039")]
public bool StartWithIE { get; public set; }
    [DispIdAttribute("10040")]
public bool EnableASPDebugging { get; public set; }
    [DispIdAttribute("10041")]
public bool EnableASPXDebugging { get; public set; }
    [DispIdAttribute("10057")]
public bool EnableUnmanagedDebugging { get; public set; }
    [DispIdAttribute("10003")]
public prjStartAction StartAction { get; public set; }
    [DispIdAttribute("10031")]
public object ExtenderNames { get; }
    [DispIdAttribute("10032")]
public string ExtenderCATID { get; }
    [DispIdAttribute("10052")]
public prjWarningLevel WarningLevel { get; public set; }
    [DispIdAttribute("10053")]
public bool TreatWarningsAsErrors { get; public set; }
    [DispIdAttribute("10058")]
public bool EnableSQLServerDebugging { get; public set; }
    [DispIdAttribute("10069")]
public UInt32 FileAlignment { get; public set; }
    [DispIdAttribute("10072")]
public bool RegisterForComInterop { get; public set; }
    [DispIdAttribute("10073")]
public string ConfigurationOverrideFile { get; public set; }
    [DispIdAttribute("10074")]
public bool RemoteDebugEnabled { get; public set; }
    [DispIdAttribute("10075")]
public string RemoteDebugMachine { get; public set; }
    [DispIdAttribute("10079")]
public string NoWarn { get; public set; }
    [DispIdAttribute("10066")]
public bool NoStdLib { get; public set; }
    [DispIdAttribute("10106")]
public string DebugInfo { get; public set; }
    [DispIdAttribute("10109")]
public string PlatformTarget { get; public set; }
    [DispIdAttribute("12121")]
public string TreatSpecificWarningsAsErrors { get; public set; }
    [DispIdAttribute("12200")]
public bool RunCodeAnalysis { get; public set; }
    [DispIdAttribute("12201")]
public string CodeAnalysisLogFile { get; public set; }
    [DispIdAttribute("12202")]
public string CodeAnalysisRuleAssemblies { get; public set; }
    [DispIdAttribute("12204")]
public string CodeAnalysisInputAssembly { get; public set; }
    [DispIdAttribute("12203")]
public string CodeAnalysisRules { get; public set; }
    [DispIdAttribute("12205")]
public string CodeAnalysisSpellCheckLanguages { get; public set; }
    [DispIdAttribute("12206")]
public bool CodeAnalysisUseTypeNameInSuppression { get; public set; }
    [DispIdAttribute("12207")]
public string CodeAnalysisModuleSuppressionsFile { get; public set; }
    [DispIdAttribute("10110")]
public bool UseVSHostingProcess { get; public set; }
    [DispIdAttribute("10111")]
public sgenGenerationOption GenerateSerializationAssemblies { get; public set; }
    [DispIdAttribute("13104")]
public string LanguageVersion { get; public set; }
    [DispIdAttribute("13105")]
public string ErrorReport { get; public set; }
    [DispIdAttribute("15208")]
public bool CodeAnalysisIgnoreGeneratedCode { get; public set; }
    [DispIdAttribute("15209")]
public bool CodeAnalysisOverrideRuleVisibilities { get; public set; }
    [DispIdAttribute("15211")]
public string CodeAnalysisDictionaries { get; public set; }
    [DispIdAttribute("15210")]
public string CodeAnalysisCulture { get; public set; }
    [DispIdAttribute("15212")]
public string CodeAnalysisRuleSet { get; public set; }
    [DispIdAttribute("15213")]
public string CodeAnalysisRuleSetDirectories { get; public set; }
    [DispIdAttribute("15214")]
public bool CodeAnalysisIgnoreBuiltInRuleSets { get; public set; }
    [DispIdAttribute("15215")]
public string CodeAnalysisRuleDirectories { get; public set; }
    [DispIdAttribute("15216")]
public bool CodeAnalysisIgnoreBuiltInRules { get; public set; }
    [DispIdAttribute("15217")]
public bool CodeAnalysisFailOnMissingRules { get; public set; }
    [DispIdAttribute("17001")]
public bool Prefer32Bit { get; public set; }
    [DispIdAttribute("-2147418112")]
public abstract virtual string get___id();
    [DispIdAttribute("10001")]
public abstract virtual bool get_DebugSymbols();
    [DispIdAttribute("10001")]
public abstract virtual void set_DebugSymbols(bool value);
    [DispIdAttribute("10036")]
public abstract virtual bool get_DefineDebug();
    [DispIdAttribute("10036")]
public abstract virtual void set_DefineDebug(bool value);
    [DispIdAttribute("10037")]
public abstract virtual bool get_DefineTrace();
    [DispIdAttribute("10037")]
public abstract virtual void set_DefineTrace(bool value);
    [DispIdAttribute("10004")]
public abstract virtual string get_OutputPath();
    [DispIdAttribute("10004")]
public abstract virtual void set_OutputPath(string value);
    [DispIdAttribute("10010")]
public abstract virtual string get_IntermediatePath();
    [DispIdAttribute("10010")]
public abstract virtual void set_IntermediatePath(string value);
    [DispIdAttribute("10005")]
public abstract virtual string get_DefineConstants();
    [DispIdAttribute("10005")]
public abstract virtual void set_DefineConstants(string value);
    [DispIdAttribute("10054")]
public abstract virtual bool get_RemoveIntegerChecks();
    [DispIdAttribute("10054")]
public abstract virtual void set_RemoveIntegerChecks(bool value);
    [DispIdAttribute("10055")]
public abstract virtual UInt32 get_BaseAddress();
    [DispIdAttribute("10055")]
public abstract virtual void set_BaseAddress(UInt32 value);
    [DispIdAttribute("10061")]
public abstract virtual bool get_AllowUnsafeBlocks();
    [DispIdAttribute("10061")]
public abstract virtual void set_AllowUnsafeBlocks(bool value);
    [DispIdAttribute("10062")]
public abstract virtual bool get_CheckForOverflowUnderflow();
    [DispIdAttribute("10062")]
public abstract virtual void set_CheckForOverflowUnderflow(bool value);
    [DispIdAttribute("10063")]
public abstract virtual string get_DocumentationFile();
    [DispIdAttribute("10063")]
public abstract virtual void set_DocumentationFile(string value);
    [DispIdAttribute("10064")]
public abstract virtual bool get_Optimize();
    [DispIdAttribute("10064")]
public abstract virtual void set_Optimize(bool value);
    [DispIdAttribute("10065")]
public abstract virtual bool get_IncrementalBuild();
    [DispIdAttribute("10065")]
public abstract virtual void set_IncrementalBuild(bool value);
    [DispIdAttribute("10006")]
public abstract virtual string get_StartProgram();
    [DispIdAttribute("10006")]
public abstract virtual void set_StartProgram(string value);
    [DispIdAttribute("10007")]
public abstract virtual string get_StartWorkingDirectory();
    [DispIdAttribute("10007")]
public abstract virtual void set_StartWorkingDirectory(string value);
    [DispIdAttribute("10008")]
public abstract virtual string get_StartURL();
    [DispIdAttribute("10008")]
public abstract virtual void set_StartURL(string value);
    [DispIdAttribute("10038")]
public abstract virtual string get_StartPage();
    [DispIdAttribute("10038")]
public abstract virtual void set_StartPage(string value);
    [DispIdAttribute("10002")]
public abstract virtual string get_StartArguments();
    [DispIdAttribute("10002")]
public abstract virtual void set_StartArguments(string value);
    [DispIdAttribute("10039")]
public abstract virtual bool get_StartWithIE();
    [DispIdAttribute("10039")]
public abstract virtual void set_StartWithIE(bool value);
    [DispIdAttribute("10040")]
public abstract virtual bool get_EnableASPDebugging();
    [DispIdAttribute("10040")]
public abstract virtual void set_EnableASPDebugging(bool value);
    [DispIdAttribute("10041")]
public abstract virtual bool get_EnableASPXDebugging();
    [DispIdAttribute("10041")]
public abstract virtual void set_EnableASPXDebugging(bool value);
    [DispIdAttribute("10057")]
public abstract virtual bool get_EnableUnmanagedDebugging();
    [DispIdAttribute("10057")]
public abstract virtual void set_EnableUnmanagedDebugging(bool value);
    [DispIdAttribute("10003")]
public abstract virtual prjStartAction get_StartAction();
    [DispIdAttribute("10003")]
public abstract virtual void set_StartAction(prjStartAction value);
    [DispIdAttribute("10030")]
public abstract virtual object get_Extender(string extenderName);
    [DispIdAttribute("10031")]
public abstract virtual object get_ExtenderNames();
    [DispIdAttribute("10032")]
public abstract virtual string get_ExtenderCATID();
    [DispIdAttribute("10052")]
public abstract virtual prjWarningLevel get_WarningLevel();
    [DispIdAttribute("10052")]
public abstract virtual void set_WarningLevel(prjWarningLevel value);
    [DispIdAttribute("10053")]
public abstract virtual bool get_TreatWarningsAsErrors();
    [DispIdAttribute("10053")]
public abstract virtual void set_TreatWarningsAsErrors(bool value);
    [DispIdAttribute("10058")]
public abstract virtual bool get_EnableSQLServerDebugging();
    [DispIdAttribute("10058")]
public abstract virtual void set_EnableSQLServerDebugging(bool value);
    [DispIdAttribute("10069")]
public abstract virtual UInt32 get_FileAlignment();
    [DispIdAttribute("10069")]
public abstract virtual void set_FileAlignment(UInt32 value);
    [DispIdAttribute("10072")]
public abstract virtual bool get_RegisterForComInterop();
    [DispIdAttribute("10072")]
public abstract virtual void set_RegisterForComInterop(bool value);
    [DispIdAttribute("10073")]
public abstract virtual string get_ConfigurationOverrideFile();
    [DispIdAttribute("10073")]
public abstract virtual void set_ConfigurationOverrideFile(string value);
    [DispIdAttribute("10074")]
public abstract virtual bool get_RemoteDebugEnabled();
    [DispIdAttribute("10074")]
public abstract virtual void set_RemoteDebugEnabled(bool value);
    [DispIdAttribute("10075")]
public abstract virtual string get_RemoteDebugMachine();
    [DispIdAttribute("10075")]
public abstract virtual void set_RemoteDebugMachine(string value);
    [DispIdAttribute("10079")]
public abstract virtual string get_NoWarn();
    [DispIdAttribute("10079")]
public abstract virtual void set_NoWarn(string value);
    [DispIdAttribute("10066")]
public abstract virtual bool get_NoStdLib();
    [DispIdAttribute("10066")]
public abstract virtual void set_NoStdLib(bool value);
    [DispIdAttribute("10106")]
public abstract virtual string get_DebugInfo();
    [DispIdAttribute("10106")]
public abstract virtual void set_DebugInfo(string value);
    [DispIdAttribute("10109")]
public abstract virtual string get_PlatformTarget();
    [DispIdAttribute("10109")]
public abstract virtual void set_PlatformTarget(string value);
    [DispIdAttribute("12121")]
public abstract virtual string get_TreatSpecificWarningsAsErrors();
    [DispIdAttribute("12121")]
public abstract virtual void set_TreatSpecificWarningsAsErrors(string value);
    [DispIdAttribute("12200")]
public abstract virtual bool get_RunCodeAnalysis();
    [DispIdAttribute("12200")]
public abstract virtual void set_RunCodeAnalysis(bool value);
    [DispIdAttribute("12201")]
public abstract virtual string get_CodeAnalysisLogFile();
    [DispIdAttribute("12201")]
public abstract virtual void set_CodeAnalysisLogFile(string value);
    [DispIdAttribute("12202")]
public abstract virtual string get_CodeAnalysisRuleAssemblies();
    [DispIdAttribute("12202")]
public abstract virtual void set_CodeAnalysisRuleAssemblies(string value);
    [DispIdAttribute("12204")]
public abstract virtual string get_CodeAnalysisInputAssembly();
    [DispIdAttribute("12204")]
public abstract virtual void set_CodeAnalysisInputAssembly(string value);
    [DispIdAttribute("12203")]
public abstract virtual string get_CodeAnalysisRules();
    [DispIdAttribute("12203")]
public abstract virtual void set_CodeAnalysisRules(string value);
    [DispIdAttribute("12205")]
public abstract virtual string get_CodeAnalysisSpellCheckLanguages();
    [DispIdAttribute("12205")]
public abstract virtual void set_CodeAnalysisSpellCheckLanguages(string value);
    [DispIdAttribute("12206")]
public abstract virtual bool get_CodeAnalysisUseTypeNameInSuppression();
    [DispIdAttribute("12206")]
public abstract virtual void set_CodeAnalysisUseTypeNameInSuppression(bool value);
    [DispIdAttribute("12207")]
public abstract virtual string get_CodeAnalysisModuleSuppressionsFile();
    [DispIdAttribute("12207")]
public abstract virtual void set_CodeAnalysisModuleSuppressionsFile(string value);
    [DispIdAttribute("10110")]
public abstract virtual bool get_UseVSHostingProcess();
    [DispIdAttribute("10110")]
public abstract virtual void set_UseVSHostingProcess(bool value);
    [DispIdAttribute("10111")]
public abstract virtual sgenGenerationOption get_GenerateSerializationAssemblies();
    [DispIdAttribute("10111")]
public abstract virtual void set_GenerateSerializationAssemblies(sgenGenerationOption value);
    [DispIdAttribute("13104")]
public abstract virtual string get_LanguageVersion();
    [DispIdAttribute("13104")]
public abstract virtual void set_LanguageVersion(string value);
    [DispIdAttribute("13105")]
public abstract virtual string get_ErrorReport();
    [DispIdAttribute("13105")]
public abstract virtual void set_ErrorReport(string value);
    [DispIdAttribute("15208")]
public abstract virtual bool get_CodeAnalysisIgnoreGeneratedCode();
    [DispIdAttribute("15208")]
public abstract virtual void set_CodeAnalysisIgnoreGeneratedCode(bool value);
    [DispIdAttribute("15209")]
public abstract virtual bool get_CodeAnalysisOverrideRuleVisibilities();
    [DispIdAttribute("15209")]
public abstract virtual void set_CodeAnalysisOverrideRuleVisibilities(bool value);
    [DispIdAttribute("15211")]
public abstract virtual string get_CodeAnalysisDictionaries();
    [DispIdAttribute("15211")]
public abstract virtual void set_CodeAnalysisDictionaries(string value);
    [DispIdAttribute("15210")]
public abstract virtual string get_CodeAnalysisCulture();
    [DispIdAttribute("15210")]
public abstract virtual void set_CodeAnalysisCulture(string value);
    [DispIdAttribute("15212")]
public abstract virtual string get_CodeAnalysisRuleSet();
    [DispIdAttribute("15212")]
public abstract virtual void set_CodeAnalysisRuleSet(string value);
    [DispIdAttribute("15213")]
public abstract virtual string get_CodeAnalysisRuleSetDirectories();
    [DispIdAttribute("15213")]
public abstract virtual void set_CodeAnalysisRuleSetDirectories(string value);
    [DispIdAttribute("15214")]
public abstract virtual bool get_CodeAnalysisIgnoreBuiltInRuleSets();
    [DispIdAttribute("15214")]
public abstract virtual void set_CodeAnalysisIgnoreBuiltInRuleSets(bool value);
    [DispIdAttribute("15215")]
public abstract virtual string get_CodeAnalysisRuleDirectories();
    [DispIdAttribute("15215")]
public abstract virtual void set_CodeAnalysisRuleDirectories(string value);
    [DispIdAttribute("15216")]
public abstract virtual bool get_CodeAnalysisIgnoreBuiltInRules();
    [DispIdAttribute("15216")]
public abstract virtual void set_CodeAnalysisIgnoreBuiltInRules(bool value);
    [DispIdAttribute("15217")]
public abstract virtual bool get_CodeAnalysisFailOnMissingRules();
    [DispIdAttribute("15217")]
public abstract virtual void set_CodeAnalysisFailOnMissingRules(bool value);
    [DispIdAttribute("17001")]
public abstract virtual bool get_Prefer32Bit();
    [DispIdAttribute("17001")]
public abstract virtual void set_Prefer32Bit(bool value);
}
[GuidAttribute("531D3661-C9CE-4618-BDB4-466A4E4072C9")]
public interface VSLangProj110.CSharpProjectProperties6 {
    [DispIdAttribute("-2147418112")]
public string __id { get; }
    [DispIdAttribute("10035")]
public object __project { get; }
    [DispIdAttribute("10015")]
public string StartupObject { get; public set; }
    [DispIdAttribute("10016")]
public prjOutputType OutputType { get; public set; }
    [DispIdAttribute("10042")]
public string RootNamespace { get; public set; }
    [DispIdAttribute("10013")]
public string AssemblyName { get; public set; }
    [DispIdAttribute("10044")]
public string AssemblyOriginatorKeyFile { get; public set; }
    [DispIdAttribute("10045")]
public string AssemblyKeyContainerName { get; public set; }
    [DispIdAttribute("10043")]
public prjOriginatorKeyMode AssemblyOriginatorKeyMode { get; public set; }
    [DispIdAttribute("10046")]
public bool DelaySign { get; public set; }
    [DispIdAttribute("10012")]
public string WebServer { get; }
    [DispIdAttribute("10017")]
public string WebServerVersion { get; }
    [DispIdAttribute("10018")]
public string ServerExtensionsVersion { get; }
    [DispIdAttribute("10019")]
public bool LinkRepair { get; public set; }
    [DispIdAttribute("10020")]
public string OfflineURL { get; }
    [DispIdAttribute("10047")]
public string FileSharePath { get; public set; }
    [DispIdAttribute("10048")]
public string ActiveFileSharePath { get; }
    [DispIdAttribute("10049")]
public prjWebAccessMethod WebAccessMethod { get; public set; }
    [DispIdAttribute("10050")]
public prjWebAccessMethod ActiveWebAccessMethod { get; }
    [DispIdAttribute("10021")]
public prjScriptLanguage DefaultClientScript { get; public set; }
    [DispIdAttribute("10022")]
public prjTargetSchema DefaultTargetSchema { get; public set; }
    [DispIdAttribute("10023")]
public prjHTMLPageLayout DefaultHTMLPageLayout { get; public set; }
    [DispIdAttribute("10026")]
public string FileName { get; public set; }
    [DispIdAttribute("10027")]
public string FullPath { get; }
    [DispIdAttribute("10028")]
public string LocalPath { get; }
    [DispIdAttribute("10029")]
public string URL { get; }
    [DispIdAttribute("10033")]
public ProjectConfigurationProperties ActiveConfigurationSettings { get; }
    [DispIdAttribute("10031")]
public object ExtenderNames { get; }
    [DispIdAttribute("10032")]
public string ExtenderCATID { get; }
    [DispIdAttribute("10011")]
public string ApplicationIcon { get; public set; }
    [DispIdAttribute("10051")]
public prjOptionStrict OptionStrict { get; public set; }
    [DispIdAttribute("10056")]
public string ReferencePath { get; public set; }
    [DispIdAttribute("10009")]
public string OutputFileName { get; }
    [DispIdAttribute("10034")]
public string AbsoluteProjectDirectory { get; }
    [DispIdAttribute("10059")]
public prjOptionExplicit OptionExplicit { get; public set; }
    [DispIdAttribute("10060")]
public prjCompare OptionCompare { get; public set; }
    [DispIdAttribute("10067")]
public prjProjectType ProjectType { get; }
    [DispIdAttribute("10068")]
public string DefaultNamespace { get; public set; }
    [DispIdAttribute("10076")]
public string PreBuildEvent { get; public set; }
    [DispIdAttribute("10077")]
public string PostBuildEvent { get; public set; }
    [DispIdAttribute("10078")]
public prjRunPostBuildEvent RunPostBuildEvent { get; public set; }
    [DispIdAttribute("10080")]
public string AspnetVersion { get; }
    [DispIdAttribute("12102")]
public string Title { get; public set; }
    [DispIdAttribute("12103")]
public string Description { get; public set; }
    [DispIdAttribute("12104")]
public string Company { get; public set; }
    [DispIdAttribute("12105")]
public string Product { get; public set; }
    [DispIdAttribute("12106")]
public string Copyright { get; public set; }
    [DispIdAttribute("12107")]
public string Trademark { get; public set; }
    [DispIdAttribute("12108")]
public prjAssemblyType AssemblyType { get; public set; }
    [DispIdAttribute("12109")]
public bool TypeComplianceDiagnostics { get; public set; }
    [DispIdAttribute("12112")]
public string Win32ResourceFile { get; public set; }
    [DispIdAttribute("12115")]
public string AssemblyKeyProviderName { get; public set; }
    [DispIdAttribute("12114")]
public UInt32 AssemblyOriginatorKeyFileType { get; public set; }
    [DispIdAttribute("12116")]
public string AssemblyVersion { get; public set; }
    [DispIdAttribute("12117")]
public string AssemblyFileVersion { get; public set; }
    [DispIdAttribute("12119")]
public bool GenerateManifests { get; public set; }
    [DispIdAttribute("12120")]
public bool EnableSecurityDebugging { get; public set; }
    [DispIdAttribute("12118")]
public string DebugSecurityZoneURL { get; public set; }
    [DispIdAttribute("12122")]
public object Publish { get; }
    [DispIdAttribute("12123")]
public bool ComVisible { get; public set; }
    [DispIdAttribute("12124")]
public string AssemblyGuid { get; public set; }
    [DispIdAttribute("12125")]
public string NeutralResourcesLanguage { get; public set; }
    [DispIdAttribute("12126")]
public bool SignAssembly { get; public set; }
    [DispIdAttribute("12132")]
public bool SignManifests { get; public set; }
    [DispIdAttribute("12127")]
public string TargetZone { get; public set; }
    [DispIdAttribute("12128")]
public string ExcludedPermissions { get; public set; }
    [DispIdAttribute("12129")]
public string ManifestCertificateThumbprint { get; public set; }
    [DispIdAttribute("12130")]
public string ManifestKeyFile { get; public set; }
    [DispIdAttribute("12131")]
public string ManifestTimestampUrl { get; public set; }
    [DispIdAttribute("12200")]
public UInt32 TargetFramework { get; public set; }
    [DispIdAttribute("12201")]
public string ApplicationManifest { get; public set; }
    [DispIdAttribute("12202")]
public string TargetFrameworkMoniker { get; public set; }
    [DispIdAttribute("-2147418112")]
public abstract virtual string get___id();
    [DispIdAttribute("10035")]
public abstract virtual object get___project();
    [DispIdAttribute("10015")]
public abstract virtual string get_StartupObject();
    [DispIdAttribute("10015")]
public abstract virtual void set_StartupObject(string value);
    [DispIdAttribute("10016")]
public abstract virtual prjOutputType get_OutputType();
    [DispIdAttribute("10016")]
public abstract virtual void set_OutputType(prjOutputType value);
    [DispIdAttribute("10042")]
public abstract virtual string get_RootNamespace();
    [DispIdAttribute("10042")]
public abstract virtual void set_RootNamespace(string value);
    [DispIdAttribute("10013")]
public abstract virtual string get_AssemblyName();
    [DispIdAttribute("10013")]
public abstract virtual void set_AssemblyName(string value);
    [DispIdAttribute("10044")]
public abstract virtual string get_AssemblyOriginatorKeyFile();
    [DispIdAttribute("10044")]
public abstract virtual void set_AssemblyOriginatorKeyFile(string value);
    [DispIdAttribute("10045")]
public abstract virtual string get_AssemblyKeyContainerName();
    [DispIdAttribute("10045")]
public abstract virtual void set_AssemblyKeyContainerName(string value);
    [DispIdAttribute("10043")]
public abstract virtual prjOriginatorKeyMode get_AssemblyOriginatorKeyMode();
    [DispIdAttribute("10043")]
public abstract virtual void set_AssemblyOriginatorKeyMode(prjOriginatorKeyMode value);
    [DispIdAttribute("10046")]
public abstract virtual bool get_DelaySign();
    [DispIdAttribute("10046")]
public abstract virtual void set_DelaySign(bool value);
    [DispIdAttribute("10012")]
public abstract virtual string get_WebServer();
    [DispIdAttribute("10017")]
public abstract virtual string get_WebServerVersion();
    [DispIdAttribute("10018")]
public abstract virtual string get_ServerExtensionsVersion();
    [DispIdAttribute("10019")]
public abstract virtual bool get_LinkRepair();
    [DispIdAttribute("10019")]
public abstract virtual void set_LinkRepair(bool value);
    [DispIdAttribute("10020")]
public abstract virtual string get_OfflineURL();
    [DispIdAttribute("10047")]
public abstract virtual string get_FileSharePath();
    [DispIdAttribute("10047")]
public abstract virtual void set_FileSharePath(string value);
    [DispIdAttribute("10048")]
public abstract virtual string get_ActiveFileSharePath();
    [DispIdAttribute("10049")]
public abstract virtual prjWebAccessMethod get_WebAccessMethod();
    [DispIdAttribute("10049")]
public abstract virtual void set_WebAccessMethod(prjWebAccessMethod value);
    [DispIdAttribute("10050")]
public abstract virtual prjWebAccessMethod get_ActiveWebAccessMethod();
    [DispIdAttribute("10021")]
public abstract virtual prjScriptLanguage get_DefaultClientScript();
    [DispIdAttribute("10021")]
public abstract virtual void set_DefaultClientScript(prjScriptLanguage value);
    [DispIdAttribute("10022")]
public abstract virtual prjTargetSchema get_DefaultTargetSchema();
    [DispIdAttribute("10022")]
public abstract virtual void set_DefaultTargetSchema(prjTargetSchema value);
    [DispIdAttribute("10023")]
public abstract virtual prjHTMLPageLayout get_DefaultHTMLPageLayout();
    [DispIdAttribute("10023")]
public abstract virtual void set_DefaultHTMLPageLayout(prjHTMLPageLayout value);
    [DispIdAttribute("10026")]
public abstract virtual string get_FileName();
    [DispIdAttribute("10026")]
public abstract virtual void set_FileName(string value);
    [DispIdAttribute("10027")]
public abstract virtual string get_FullPath();
    [DispIdAttribute("10028")]
public abstract virtual string get_LocalPath();
    [DispIdAttribute("10029")]
public abstract virtual string get_URL();
    [DispIdAttribute("10033")]
public abstract virtual ProjectConfigurationProperties get_ActiveConfigurationSettings();
    [DispIdAttribute("10030")]
public abstract virtual object get_Extender(string extenderName);
    [DispIdAttribute("10031")]
public abstract virtual object get_ExtenderNames();
    [DispIdAttribute("10032")]
public abstract virtual string get_ExtenderCATID();
    [DispIdAttribute("10011")]
public abstract virtual string get_ApplicationIcon();
    [DispIdAttribute("10011")]
public abstract virtual void set_ApplicationIcon(string value);
    [DispIdAttribute("10051")]
public abstract virtual prjOptionStrict get_OptionStrict();
    [DispIdAttribute("10051")]
public abstract virtual void set_OptionStrict(prjOptionStrict value);
    [DispIdAttribute("10056")]
public abstract virtual string get_ReferencePath();
    [DispIdAttribute("10056")]
public abstract virtual void set_ReferencePath(string value);
    [DispIdAttribute("10009")]
public abstract virtual string get_OutputFileName();
    [DispIdAttribute("10034")]
public abstract virtual string get_AbsoluteProjectDirectory();
    [DispIdAttribute("10059")]
public abstract virtual prjOptionExplicit get_OptionExplicit();
    [DispIdAttribute("10059")]
public abstract virtual void set_OptionExplicit(prjOptionExplicit value);
    [DispIdAttribute("10060")]
public abstract virtual prjCompare get_OptionCompare();
    [DispIdAttribute("10060")]
public abstract virtual void set_OptionCompare(prjCompare value);
    [DispIdAttribute("10067")]
public abstract virtual prjProjectType get_ProjectType();
    [DispIdAttribute("10068")]
public abstract virtual string get_DefaultNamespace();
    [DispIdAttribute("10068")]
public abstract virtual void set_DefaultNamespace(string value);
    [DispIdAttribute("10076")]
public abstract virtual string get_PreBuildEvent();
    [DispIdAttribute("10076")]
public abstract virtual void set_PreBuildEvent(string value);
    [DispIdAttribute("10077")]
public abstract virtual string get_PostBuildEvent();
    [DispIdAttribute("10077")]
public abstract virtual void set_PostBuildEvent(string value);
    [DispIdAttribute("10078")]
public abstract virtual prjRunPostBuildEvent get_RunPostBuildEvent();
    [DispIdAttribute("10078")]
public abstract virtual void set_RunPostBuildEvent(prjRunPostBuildEvent value);
    [DispIdAttribute("10080")]
public abstract virtual string get_AspnetVersion();
    [DispIdAttribute("12102")]
public abstract virtual string get_Title();
    [DispIdAttribute("12102")]
public abstract virtual void set_Title(string value);
    [DispIdAttribute("12103")]
public abstract virtual string get_Description();
    [DispIdAttribute("12103")]
public abstract virtual void set_Description(string value);
    [DispIdAttribute("12104")]
public abstract virtual string get_Company();
    [DispIdAttribute("12104")]
public abstract virtual void set_Company(string value);
    [DispIdAttribute("12105")]
public abstract virtual string get_Product();
    [DispIdAttribute("12105")]
public abstract virtual void set_Product(string value);
    [DispIdAttribute("12106")]
public abstract virtual string get_Copyright();
    [DispIdAttribute("12106")]
public abstract virtual void set_Copyright(string value);
    [DispIdAttribute("12107")]
public abstract virtual string get_Trademark();
    [DispIdAttribute("12107")]
public abstract virtual void set_Trademark(string value);
    [DispIdAttribute("12108")]
public abstract virtual prjAssemblyType get_AssemblyType();
    [DispIdAttribute("12108")]
public abstract virtual void set_AssemblyType(prjAssemblyType value);
    [DispIdAttribute("12109")]
public abstract virtual bool get_TypeComplianceDiagnostics();
    [DispIdAttribute("12109")]
public abstract virtual void set_TypeComplianceDiagnostics(bool value);
    [DispIdAttribute("12112")]
public abstract virtual string get_Win32ResourceFile();
    [DispIdAttribute("12112")]
public abstract virtual void set_Win32ResourceFile(string value);
    [DispIdAttribute("12115")]
public abstract virtual string get_AssemblyKeyProviderName();
    [DispIdAttribute("12115")]
public abstract virtual void set_AssemblyKeyProviderName(string value);
    [DispIdAttribute("12114")]
public abstract virtual UInt32 get_AssemblyOriginatorKeyFileType();
    [DispIdAttribute("12114")]
public abstract virtual void set_AssemblyOriginatorKeyFileType(UInt32 value);
    [DispIdAttribute("12116")]
public abstract virtual string get_AssemblyVersion();
    [DispIdAttribute("12116")]
public abstract virtual void set_AssemblyVersion(string value);
    [DispIdAttribute("12117")]
public abstract virtual string get_AssemblyFileVersion();
    [DispIdAttribute("12117")]
public abstract virtual void set_AssemblyFileVersion(string value);
    [DispIdAttribute("12119")]
public abstract virtual bool get_GenerateManifests();
    [DispIdAttribute("12119")]
public abstract virtual void set_GenerateManifests(bool value);
    [DispIdAttribute("12120")]
public abstract virtual bool get_EnableSecurityDebugging();
    [DispIdAttribute("12120")]
public abstract virtual void set_EnableSecurityDebugging(bool value);
    [DispIdAttribute("12118")]
public abstract virtual string get_DebugSecurityZoneURL();
    [DispIdAttribute("12118")]
public abstract virtual void set_DebugSecurityZoneURL(string value);
    [DispIdAttribute("12122")]
public abstract virtual object get_Publish();
    [DispIdAttribute("12123")]
public abstract virtual bool get_ComVisible();
    [DispIdAttribute("12123")]
public abstract virtual void set_ComVisible(bool value);
    [DispIdAttribute("12124")]
public abstract virtual string get_AssemblyGuid();
    [DispIdAttribute("12124")]
public abstract virtual void set_AssemblyGuid(string value);
    [DispIdAttribute("12125")]
public abstract virtual string get_NeutralResourcesLanguage();
    [DispIdAttribute("12125")]
public abstract virtual void set_NeutralResourcesLanguage(string value);
    [DispIdAttribute("12126")]
public abstract virtual bool get_SignAssembly();
    [DispIdAttribute("12126")]
public abstract virtual void set_SignAssembly(bool value);
    [DispIdAttribute("12132")]
public abstract virtual bool get_SignManifests();
    [DispIdAttribute("12132")]
public abstract virtual void set_SignManifests(bool value);
    [DispIdAttribute("12127")]
public abstract virtual string get_TargetZone();
    [DispIdAttribute("12127")]
public abstract virtual void set_TargetZone(string value);
    [DispIdAttribute("12128")]
public abstract virtual string get_ExcludedPermissions();
    [DispIdAttribute("12128")]
public abstract virtual void set_ExcludedPermissions(string value);
    [DispIdAttribute("12129")]
public abstract virtual string get_ManifestCertificateThumbprint();
    [DispIdAttribute("12129")]
public abstract virtual void set_ManifestCertificateThumbprint(string value);
    [DispIdAttribute("12130")]
public abstract virtual string get_ManifestKeyFile();
    [DispIdAttribute("12130")]
public abstract virtual void set_ManifestKeyFile(string value);
    [DispIdAttribute("12131")]
public abstract virtual string get_ManifestTimestampUrl();
    [DispIdAttribute("12131")]
public abstract virtual void set_ManifestTimestampUrl(string value);
    [DispIdAttribute("12200")]
public abstract virtual UInt32 get_TargetFramework();
    [DispIdAttribute("12200")]
public abstract virtual void set_TargetFramework(UInt32 value);
    [DispIdAttribute("12201")]
public abstract virtual string get_ApplicationManifest();
    [DispIdAttribute("12201")]
public abstract virtual void set_ApplicationManifest(string value);
    [DispIdAttribute("12202")]
public abstract virtual string get_TargetFrameworkMoniker();
    [DispIdAttribute("12202")]
public abstract virtual void set_TargetFrameworkMoniker(string value);
}
[GuidAttribute("AD327414-A8F4-4E96-9A2A-3008592FD6A9")]
public interface VSLangProj110.CSharpProjectProperties7 {
    [DispIdAttribute("-2147418112")]
public string __id { get; }
    [DispIdAttribute("10035")]
public object __project { get; }
    [DispIdAttribute("10015")]
public string StartupObject { get; public set; }
    [DispIdAttribute("10016")]
public prjOutputType OutputType { get; public set; }
    [DispIdAttribute("10042")]
public string RootNamespace { get; public set; }
    [DispIdAttribute("10013")]
public string AssemblyName { get; public set; }
    [DispIdAttribute("10044")]
public string AssemblyOriginatorKeyFile { get; public set; }
    [DispIdAttribute("10045")]
public string AssemblyKeyContainerName { get; public set; }
    [DispIdAttribute("10043")]
public prjOriginatorKeyMode AssemblyOriginatorKeyMode { get; public set; }
    [DispIdAttribute("10046")]
public bool DelaySign { get; public set; }
    [DispIdAttribute("10012")]
public string WebServer { get; }
    [DispIdAttribute("10017")]
public string WebServerVersion { get; }
    [DispIdAttribute("10018")]
public string ServerExtensionsVersion { get; }
    [DispIdAttribute("10019")]
public bool LinkRepair { get; public set; }
    [DispIdAttribute("10020")]
public string OfflineURL { get; }
    [DispIdAttribute("10047")]
public string FileSharePath { get; public set; }
    [DispIdAttribute("10048")]
public string ActiveFileSharePath { get; }
    [DispIdAttribute("10049")]
public prjWebAccessMethod WebAccessMethod { get; public set; }
    [DispIdAttribute("10050")]
public prjWebAccessMethod ActiveWebAccessMethod { get; }
    [DispIdAttribute("10021")]
public prjScriptLanguage DefaultClientScript { get; public set; }
    [DispIdAttribute("10022")]
public prjTargetSchema DefaultTargetSchema { get; public set; }
    [DispIdAttribute("10023")]
public prjHTMLPageLayout DefaultHTMLPageLayout { get; public set; }
    [DispIdAttribute("10026")]
public string FileName { get; public set; }
    [DispIdAttribute("10027")]
public string FullPath { get; }
    [DispIdAttribute("10028")]
public string LocalPath { get; }
    [DispIdAttribute("10029")]
public string URL { get; }
    [DispIdAttribute("10033")]
public ProjectConfigurationProperties ActiveConfigurationSettings { get; }
    [DispIdAttribute("10031")]
public object ExtenderNames { get; }
    [DispIdAttribute("10032")]
public string ExtenderCATID { get; }
    [DispIdAttribute("10011")]
public string ApplicationIcon { get; public set; }
    [DispIdAttribute("10051")]
public prjOptionStrict OptionStrict { get; public set; }
    [DispIdAttribute("10056")]
public string ReferencePath { get; public set; }
    [DispIdAttribute("10009")]
public string OutputFileName { get; }
    [DispIdAttribute("10034")]
public string AbsoluteProjectDirectory { get; }
    [DispIdAttribute("10059")]
public prjOptionExplicit OptionExplicit { get; public set; }
    [DispIdAttribute("10060")]
public prjCompare OptionCompare { get; public set; }
    [DispIdAttribute("10067")]
public prjProjectType ProjectType { get; }
    [DispIdAttribute("10068")]
public string DefaultNamespace { get; public set; }
    [DispIdAttribute("10076")]
public string PreBuildEvent { get; public set; }
    [DispIdAttribute("10077")]
public string PostBuildEvent { get; public set; }
    [DispIdAttribute("10078")]
public prjRunPostBuildEvent RunPostBuildEvent { get; public set; }
    [DispIdAttribute("10080")]
public string AspnetVersion { get; }
    [DispIdAttribute("12102")]
public string Title { get; public set; }
    [DispIdAttribute("12103")]
public string Description { get; public set; }
    [DispIdAttribute("12104")]
public string Company { get; public set; }
    [DispIdAttribute("12105")]
public string Product { get; public set; }
    [DispIdAttribute("12106")]
public string Copyright { get; public set; }
    [DispIdAttribute("12107")]
public string Trademark { get; public set; }
    [DispIdAttribute("12108")]
public prjAssemblyType AssemblyType { get; public set; }
    [DispIdAttribute("12109")]
public bool TypeComplianceDiagnostics { get; public set; }
    [DispIdAttribute("12112")]
public string Win32ResourceFile { get; public set; }
    [DispIdAttribute("12115")]
public string AssemblyKeyProviderName { get; public set; }
    [DispIdAttribute("12114")]
public UInt32 AssemblyOriginatorKeyFileType { get; public set; }
    [DispIdAttribute("12116")]
public string AssemblyVersion { get; public set; }
    [DispIdAttribute("12117")]
public string AssemblyFileVersion { get; public set; }
    [DispIdAttribute("12119")]
public bool GenerateManifests { get; public set; }
    [DispIdAttribute("12120")]
public bool EnableSecurityDebugging { get; public set; }
    [DispIdAttribute("12118")]
public string DebugSecurityZoneURL { get; public set; }
    [DispIdAttribute("12122")]
public object Publish { get; }
    [DispIdAttribute("12123")]
public bool ComVisible { get; public set; }
    [DispIdAttribute("12124")]
public string AssemblyGuid { get; public set; }
    [DispIdAttribute("12125")]
public string NeutralResourcesLanguage { get; public set; }
    [DispIdAttribute("12126")]
public bool SignAssembly { get; public set; }
    [DispIdAttribute("12132")]
public bool SignManifests { get; public set; }
    [DispIdAttribute("12127")]
public string TargetZone { get; public set; }
    [DispIdAttribute("12128")]
public string ExcludedPermissions { get; public set; }
    [DispIdAttribute("12129")]
public string ManifestCertificateThumbprint { get; public set; }
    [DispIdAttribute("12130")]
public string ManifestKeyFile { get; public set; }
    [DispIdAttribute("12131")]
public string ManifestTimestampUrl { get; public set; }
    [DispIdAttribute("12200")]
public UInt32 TargetFramework { get; public set; }
    [DispIdAttribute("12201")]
public string ApplicationManifest { get; public set; }
    [DispIdAttribute("12202")]
public string TargetFrameworkMoniker { get; public set; }
    [ComAliasNameAttribute("VSLangProj110.DWORD")]
[DispIdAttribute("17000")]
public UInt32 OutputTypeEx { get; public set; }
    [DispIdAttribute("-2147418112")]
public abstract virtual string get___id();
    [DispIdAttribute("10035")]
public abstract virtual object get___project();
    [DispIdAttribute("10015")]
public abstract virtual string get_StartupObject();
    [DispIdAttribute("10015")]
public abstract virtual void set_StartupObject(string value);
    [DispIdAttribute("10016")]
public abstract virtual prjOutputType get_OutputType();
    [DispIdAttribute("10016")]
public abstract virtual void set_OutputType(prjOutputType value);
    [DispIdAttribute("10042")]
public abstract virtual string get_RootNamespace();
    [DispIdAttribute("10042")]
public abstract virtual void set_RootNamespace(string value);
    [DispIdAttribute("10013")]
public abstract virtual string get_AssemblyName();
    [DispIdAttribute("10013")]
public abstract virtual void set_AssemblyName(string value);
    [DispIdAttribute("10044")]
public abstract virtual string get_AssemblyOriginatorKeyFile();
    [DispIdAttribute("10044")]
public abstract virtual void set_AssemblyOriginatorKeyFile(string value);
    [DispIdAttribute("10045")]
public abstract virtual string get_AssemblyKeyContainerName();
    [DispIdAttribute("10045")]
public abstract virtual void set_AssemblyKeyContainerName(string value);
    [DispIdAttribute("10043")]
public abstract virtual prjOriginatorKeyMode get_AssemblyOriginatorKeyMode();
    [DispIdAttribute("10043")]
public abstract virtual void set_AssemblyOriginatorKeyMode(prjOriginatorKeyMode value);
    [DispIdAttribute("10046")]
public abstract virtual bool get_DelaySign();
    [DispIdAttribute("10046")]
public abstract virtual void set_DelaySign(bool value);
    [DispIdAttribute("10012")]
public abstract virtual string get_WebServer();
    [DispIdAttribute("10017")]
public abstract virtual string get_WebServerVersion();
    [DispIdAttribute("10018")]
public abstract virtual string get_ServerExtensionsVersion();
    [DispIdAttribute("10019")]
public abstract virtual bool get_LinkRepair();
    [DispIdAttribute("10019")]
public abstract virtual void set_LinkRepair(bool value);
    [DispIdAttribute("10020")]
public abstract virtual string get_OfflineURL();
    [DispIdAttribute("10047")]
public abstract virtual string get_FileSharePath();
    [DispIdAttribute("10047")]
public abstract virtual void set_FileSharePath(string value);
    [DispIdAttribute("10048")]
public abstract virtual string get_ActiveFileSharePath();
    [DispIdAttribute("10049")]
public abstract virtual prjWebAccessMethod get_WebAccessMethod();
    [DispIdAttribute("10049")]
public abstract virtual void set_WebAccessMethod(prjWebAccessMethod value);
    [DispIdAttribute("10050")]
public abstract virtual prjWebAccessMethod get_ActiveWebAccessMethod();
    [DispIdAttribute("10021")]
public abstract virtual prjScriptLanguage get_DefaultClientScript();
    [DispIdAttribute("10021")]
public abstract virtual void set_DefaultClientScript(prjScriptLanguage value);
    [DispIdAttribute("10022")]
public abstract virtual prjTargetSchema get_DefaultTargetSchema();
    [DispIdAttribute("10022")]
public abstract virtual void set_DefaultTargetSchema(prjTargetSchema value);
    [DispIdAttribute("10023")]
public abstract virtual prjHTMLPageLayout get_DefaultHTMLPageLayout();
    [DispIdAttribute("10023")]
public abstract virtual void set_DefaultHTMLPageLayout(prjHTMLPageLayout value);
    [DispIdAttribute("10026")]
public abstract virtual string get_FileName();
    [DispIdAttribute("10026")]
public abstract virtual void set_FileName(string value);
    [DispIdAttribute("10027")]
public abstract virtual string get_FullPath();
    [DispIdAttribute("10028")]
public abstract virtual string get_LocalPath();
    [DispIdAttribute("10029")]
public abstract virtual string get_URL();
    [DispIdAttribute("10033")]
public abstract virtual ProjectConfigurationProperties get_ActiveConfigurationSettings();
    [DispIdAttribute("10030")]
public abstract virtual object get_Extender(string extenderName);
    [DispIdAttribute("10031")]
public abstract virtual object get_ExtenderNames();
    [DispIdAttribute("10032")]
public abstract virtual string get_ExtenderCATID();
    [DispIdAttribute("10011")]
public abstract virtual string get_ApplicationIcon();
    [DispIdAttribute("10011")]
public abstract virtual void set_ApplicationIcon(string value);
    [DispIdAttribute("10051")]
public abstract virtual prjOptionStrict get_OptionStrict();
    [DispIdAttribute("10051")]
public abstract virtual void set_OptionStrict(prjOptionStrict value);
    [DispIdAttribute("10056")]
public abstract virtual string get_ReferencePath();
    [DispIdAttribute("10056")]
public abstract virtual void set_ReferencePath(string value);
    [DispIdAttribute("10009")]
public abstract virtual string get_OutputFileName();
    [DispIdAttribute("10034")]
public abstract virtual string get_AbsoluteProjectDirectory();
    [DispIdAttribute("10059")]
public abstract virtual prjOptionExplicit get_OptionExplicit();
    [DispIdAttribute("10059")]
public abstract virtual void set_OptionExplicit(prjOptionExplicit value);
    [DispIdAttribute("10060")]
public abstract virtual prjCompare get_OptionCompare();
    [DispIdAttribute("10060")]
public abstract virtual void set_OptionCompare(prjCompare value);
    [DispIdAttribute("10067")]
public abstract virtual prjProjectType get_ProjectType();
    [DispIdAttribute("10068")]
public abstract virtual string get_DefaultNamespace();
    [DispIdAttribute("10068")]
public abstract virtual void set_DefaultNamespace(string value);
    [DispIdAttribute("10076")]
public abstract virtual string get_PreBuildEvent();
    [DispIdAttribute("10076")]
public abstract virtual void set_PreBuildEvent(string value);
    [DispIdAttribute("10077")]
public abstract virtual string get_PostBuildEvent();
    [DispIdAttribute("10077")]
public abstract virtual void set_PostBuildEvent(string value);
    [DispIdAttribute("10078")]
public abstract virtual prjRunPostBuildEvent get_RunPostBuildEvent();
    [DispIdAttribute("10078")]
public abstract virtual void set_RunPostBuildEvent(prjRunPostBuildEvent value);
    [DispIdAttribute("10080")]
public abstract virtual string get_AspnetVersion();
    [DispIdAttribute("12102")]
public abstract virtual string get_Title();
    [DispIdAttribute("12102")]
public abstract virtual void set_Title(string value);
    [DispIdAttribute("12103")]
public abstract virtual string get_Description();
    [DispIdAttribute("12103")]
public abstract virtual void set_Description(string value);
    [DispIdAttribute("12104")]
public abstract virtual string get_Company();
    [DispIdAttribute("12104")]
public abstract virtual void set_Company(string value);
    [DispIdAttribute("12105")]
public abstract virtual string get_Product();
    [DispIdAttribute("12105")]
public abstract virtual void set_Product(string value);
    [DispIdAttribute("12106")]
public abstract virtual string get_Copyright();
    [DispIdAttribute("12106")]
public abstract virtual void set_Copyright(string value);
    [DispIdAttribute("12107")]
public abstract virtual string get_Trademark();
    [DispIdAttribute("12107")]
public abstract virtual void set_Trademark(string value);
    [DispIdAttribute("12108")]
public abstract virtual prjAssemblyType get_AssemblyType();
    [DispIdAttribute("12108")]
public abstract virtual void set_AssemblyType(prjAssemblyType value);
    [DispIdAttribute("12109")]
public abstract virtual bool get_TypeComplianceDiagnostics();
    [DispIdAttribute("12109")]
public abstract virtual void set_TypeComplianceDiagnostics(bool value);
    [DispIdAttribute("12112")]
public abstract virtual string get_Win32ResourceFile();
    [DispIdAttribute("12112")]
public abstract virtual void set_Win32ResourceFile(string value);
    [DispIdAttribute("12115")]
public abstract virtual string get_AssemblyKeyProviderName();
    [DispIdAttribute("12115")]
public abstract virtual void set_AssemblyKeyProviderName(string value);
    [DispIdAttribute("12114")]
public abstract virtual UInt32 get_AssemblyOriginatorKeyFileType();
    [DispIdAttribute("12114")]
public abstract virtual void set_AssemblyOriginatorKeyFileType(UInt32 value);
    [DispIdAttribute("12116")]
public abstract virtual string get_AssemblyVersion();
    [DispIdAttribute("12116")]
public abstract virtual void set_AssemblyVersion(string value);
    [DispIdAttribute("12117")]
public abstract virtual string get_AssemblyFileVersion();
    [DispIdAttribute("12117")]
public abstract virtual void set_AssemblyFileVersion(string value);
    [DispIdAttribute("12119")]
public abstract virtual bool get_GenerateManifests();
    [DispIdAttribute("12119")]
public abstract virtual void set_GenerateManifests(bool value);
    [DispIdAttribute("12120")]
public abstract virtual bool get_EnableSecurityDebugging();
    [DispIdAttribute("12120")]
public abstract virtual void set_EnableSecurityDebugging(bool value);
    [DispIdAttribute("12118")]
public abstract virtual string get_DebugSecurityZoneURL();
    [DispIdAttribute("12118")]
public abstract virtual void set_DebugSecurityZoneURL(string value);
    [DispIdAttribute("12122")]
public abstract virtual object get_Publish();
    [DispIdAttribute("12123")]
public abstract virtual bool get_ComVisible();
    [DispIdAttribute("12123")]
public abstract virtual void set_ComVisible(bool value);
    [DispIdAttribute("12124")]
public abstract virtual string get_AssemblyGuid();
    [DispIdAttribute("12124")]
public abstract virtual void set_AssemblyGuid(string value);
    [DispIdAttribute("12125")]
public abstract virtual string get_NeutralResourcesLanguage();
    [DispIdAttribute("12125")]
public abstract virtual void set_NeutralResourcesLanguage(string value);
    [DispIdAttribute("12126")]
public abstract virtual bool get_SignAssembly();
    [DispIdAttribute("12126")]
public abstract virtual void set_SignAssembly(bool value);
    [DispIdAttribute("12132")]
public abstract virtual bool get_SignManifests();
    [DispIdAttribute("12132")]
public abstract virtual void set_SignManifests(bool value);
    [DispIdAttribute("12127")]
public abstract virtual string get_TargetZone();
    [DispIdAttribute("12127")]
public abstract virtual void set_TargetZone(string value);
    [DispIdAttribute("12128")]
public abstract virtual string get_ExcludedPermissions();
    [DispIdAttribute("12128")]
public abstract virtual void set_ExcludedPermissions(string value);
    [DispIdAttribute("12129")]
public abstract virtual string get_ManifestCertificateThumbprint();
    [DispIdAttribute("12129")]
public abstract virtual void set_ManifestCertificateThumbprint(string value);
    [DispIdAttribute("12130")]
public abstract virtual string get_ManifestKeyFile();
    [DispIdAttribute("12130")]
public abstract virtual void set_ManifestKeyFile(string value);
    [DispIdAttribute("12131")]
public abstract virtual string get_ManifestTimestampUrl();
    [DispIdAttribute("12131")]
public abstract virtual void set_ManifestTimestampUrl(string value);
    [DispIdAttribute("12200")]
public abstract virtual UInt32 get_TargetFramework();
    [DispIdAttribute("12200")]
public abstract virtual void set_TargetFramework(UInt32 value);
    [DispIdAttribute("12201")]
public abstract virtual string get_ApplicationManifest();
    [DispIdAttribute("12201")]
public abstract virtual void set_ApplicationManifest(string value);
    [DispIdAttribute("12202")]
public abstract virtual string get_TargetFrameworkMoniker();
    [DispIdAttribute("12202")]
public abstract virtual void set_TargetFrameworkMoniker(string value);
    [DispIdAttribute("17000")]
public abstract virtual UInt32 get_OutputTypeEx();
    [DispIdAttribute("17000")]
public abstract virtual void set_OutputTypeEx(UInt32 value);
}
public enum VSLangProj110.prjOutputTypeEx : Enum {
    public int value__;
    public static prjOutputTypeEx prjOutputTypeEx_WinExe;
    public static prjOutputTypeEx prjOutputTypeEx_Exe;
    public static prjOutputTypeEx prjOutputTypeEx_Library;
    public static prjOutputTypeEx prjOutputTypeEx_WinMDObj;
    public static prjOutputTypeEx prjOutputTypeEx_AppContainerExe;
}
[GuidAttribute("F71B6036-80F1-4F08-BC59-B5D92865F629")]
public interface VSLangProj110.Reference4 {
    [DispIdAttribute("1")]
public DTE DTE { get; }
    [DispIdAttribute("2")]
public References Collection { get; }
    [DispIdAttribute("3")]
public Project ContainingProject { get; }
    [DispIdAttribute("5")]
public string Name { get; }
    [DispIdAttribute("6")]
public prjReferenceType Type { get; }
    [DispIdAttribute("7")]
public string Identity { get; }
    [DispIdAttribute("8")]
public string Path { get; }
    [DispIdAttribute("9")]
public string Description { get; }
    [DispIdAttribute("10")]
public string Culture { get; }
    [DispIdAttribute("11")]
public int MajorVersion { get; }
    [DispIdAttribute("12")]
public int MinorVersion { get; }
    [DispIdAttribute("13")]
public int RevisionNumber { get; }
    [DispIdAttribute("14")]
public int BuildNumber { get; }
    [DispIdAttribute("15")]
public bool StrongName { get; }
    [DispIdAttribute("16")]
public Project SourceProject { get; }
    [DispIdAttribute("17")]
public bool CopyLocal { get; public set; }
    [DispIdAttribute("19")]
public object ExtenderNames { get; }
    [DispIdAttribute("20")]
public string ExtenderCATID { get; }
    [DispIdAttribute("21")]
public string PublicKeyToken { get; }
    [DispIdAttribute("22")]
public string Version { get; }
    [DispIdAttribute("100")]
public string RuntimeVersion { get; }
    [DispIdAttribute("120")]
public bool SpecificVersion { get; public set; }
    [DispIdAttribute("121")]
public string SubType { get; public set; }
    [DispIdAttribute("122")]
public bool Isolated { get; public set; }
    [DispIdAttribute("123")]
public string Aliases { get; public set; }
    [DispIdAttribute("124")]
public UInt32 RefType { get; }
    [DispIdAttribute("125")]
public bool AutoReferenced { get; }
    [DispIdAttribute("126")]
public bool Resolved { get; }
    [DispIdAttribute("127")]
public bool EmbedInteropTypes { get; public set; }
    [DispIdAttribute("1")]
public abstract virtual DTE get_DTE();
    [DispIdAttribute("2")]
public abstract virtual References get_Collection();
    [DispIdAttribute("3")]
public abstract virtual Project get_ContainingProject();
    [DispIdAttribute("4")]
public abstract virtual void Remove();
    [DispIdAttribute("5")]
public abstract virtual string get_Name();
    [DispIdAttribute("6")]
public abstract virtual prjReferenceType get_Type();
    [DispIdAttribute("7")]
public abstract virtual string get_Identity();
    [DispIdAttribute("8")]
public abstract virtual string get_Path();
    [DispIdAttribute("9")]
public abstract virtual string get_Description();
    [DispIdAttribute("10")]
public abstract virtual string get_Culture();
    [DispIdAttribute("11")]
public abstract virtual int get_MajorVersion();
    [DispIdAttribute("12")]
public abstract virtual int get_MinorVersion();
    [DispIdAttribute("13")]
public abstract virtual int get_RevisionNumber();
    [DispIdAttribute("14")]
public abstract virtual int get_BuildNumber();
    [DispIdAttribute("15")]
public abstract virtual bool get_StrongName();
    [DispIdAttribute("16")]
public abstract virtual Project get_SourceProject();
    [DispIdAttribute("17")]
public abstract virtual bool get_CopyLocal();
    [DispIdAttribute("17")]
public abstract virtual void set_CopyLocal(bool value);
    [DispIdAttribute("18")]
public abstract virtual object get_Extender(string extenderName);
    [DispIdAttribute("19")]
public abstract virtual object get_ExtenderNames();
    [DispIdAttribute("20")]
public abstract virtual string get_ExtenderCATID();
    [DispIdAttribute("21")]
public abstract virtual string get_PublicKeyToken();
    [DispIdAttribute("22")]
public abstract virtual string get_Version();
    [DispIdAttribute("100")]
public abstract virtual string get_RuntimeVersion();
    [DispIdAttribute("120")]
public abstract virtual bool get_SpecificVersion();
    [DispIdAttribute("120")]
public abstract virtual void set_SpecificVersion(bool value);
    [DispIdAttribute("121")]
public abstract virtual string get_SubType();
    [DispIdAttribute("121")]
public abstract virtual void set_SubType(string value);
    [DispIdAttribute("122")]
public abstract virtual bool get_Isolated();
    [DispIdAttribute("122")]
public abstract virtual void set_Isolated(bool value);
    [DispIdAttribute("123")]
public abstract virtual string get_Aliases();
    [DispIdAttribute("123")]
public abstract virtual void set_Aliases(string value);
    [DispIdAttribute("124")]
public abstract virtual UInt32 get_RefType();
    [DispIdAttribute("125")]
public abstract virtual bool get_AutoReferenced();
    [DispIdAttribute("126")]
public abstract virtual bool get_Resolved();
    [DispIdAttribute("127")]
public abstract virtual bool get_EmbedInteropTypes();
    [DispIdAttribute("127")]
public abstract virtual void set_EmbedInteropTypes(bool value);
}
[GuidAttribute("676A4C6F-F436-40DE-88E9-DB12BB864598")]
public interface VSLangProj110.Reference5 {
    [DispIdAttribute("1")]
public DTE DTE { get; }
    [DispIdAttribute("2")]
public References Collection { get; }
    [DispIdAttribute("3")]
public Project ContainingProject { get; }
    [DispIdAttribute("5")]
public string Name { get; }
    [DispIdAttribute("6")]
public prjReferenceType Type { get; }
    [DispIdAttribute("7")]
public string Identity { get; }
    [DispIdAttribute("8")]
public string Path { get; }
    [DispIdAttribute("9")]
public string Description { get; }
    [DispIdAttribute("10")]
public string Culture { get; }
    [DispIdAttribute("11")]
public int MajorVersion { get; }
    [DispIdAttribute("12")]
public int MinorVersion { get; }
    [DispIdAttribute("13")]
public int RevisionNumber { get; }
    [DispIdAttribute("14")]
public int BuildNumber { get; }
    [DispIdAttribute("15")]
public bool StrongName { get; }
    [DispIdAttribute("16")]
public Project SourceProject { get; }
    [DispIdAttribute("17")]
public bool CopyLocal { get; public set; }
    [DispIdAttribute("19")]
public object ExtenderNames { get; }
    [DispIdAttribute("20")]
public string ExtenderCATID { get; }
    [DispIdAttribute("21")]
public string PublicKeyToken { get; }
    [DispIdAttribute("22")]
public string Version { get; }
    [DispIdAttribute("100")]
public string RuntimeVersion { get; }
    [DispIdAttribute("120")]
public bool SpecificVersion { get; public set; }
    [DispIdAttribute("121")]
public string SubType { get; public set; }
    [DispIdAttribute("122")]
public bool Isolated { get; public set; }
    [DispIdAttribute("123")]
public string Aliases { get; public set; }
    [DispIdAttribute("124")]
public UInt32 RefType { get; }
    [DispIdAttribute("125")]
public bool AutoReferenced { get; }
    [DispIdAttribute("126")]
public bool Resolved { get; }
    [DispIdAttribute("127")]
public bool EmbedInteropTypes { get; public set; }
    [DispIdAttribute("128")]
public Array ExpandedSdkReferences { get; }
    [DispIdAttribute("129")]
public Reference Group { get; }
    [DispIdAttribute("1")]
public abstract virtual DTE get_DTE();
    [DispIdAttribute("2")]
public abstract virtual References get_Collection();
    [DispIdAttribute("3")]
public abstract virtual Project get_ContainingProject();
    [DispIdAttribute("4")]
public abstract virtual void Remove();
    [DispIdAttribute("5")]
public abstract virtual string get_Name();
    [DispIdAttribute("6")]
public abstract virtual prjReferenceType get_Type();
    [DispIdAttribute("7")]
public abstract virtual string get_Identity();
    [DispIdAttribute("8")]
public abstract virtual string get_Path();
    [DispIdAttribute("9")]
public abstract virtual string get_Description();
    [DispIdAttribute("10")]
public abstract virtual string get_Culture();
    [DispIdAttribute("11")]
public abstract virtual int get_MajorVersion();
    [DispIdAttribute("12")]
public abstract virtual int get_MinorVersion();
    [DispIdAttribute("13")]
public abstract virtual int get_RevisionNumber();
    [DispIdAttribute("14")]
public abstract virtual int get_BuildNumber();
    [DispIdAttribute("15")]
public abstract virtual bool get_StrongName();
    [DispIdAttribute("16")]
public abstract virtual Project get_SourceProject();
    [DispIdAttribute("17")]
public abstract virtual bool get_CopyLocal();
    [DispIdAttribute("17")]
public abstract virtual void set_CopyLocal(bool value);
    [DispIdAttribute("18")]
public abstract virtual object get_Extender(string extenderName);
    [DispIdAttribute("19")]
public abstract virtual object get_ExtenderNames();
    [DispIdAttribute("20")]
public abstract virtual string get_ExtenderCATID();
    [DispIdAttribute("21")]
public abstract virtual string get_PublicKeyToken();
    [DispIdAttribute("22")]
public abstract virtual string get_Version();
    [DispIdAttribute("100")]
public abstract virtual string get_RuntimeVersion();
    [DispIdAttribute("120")]
public abstract virtual bool get_SpecificVersion();
    [DispIdAttribute("120")]
public abstract virtual void set_SpecificVersion(bool value);
    [DispIdAttribute("121")]
public abstract virtual string get_SubType();
    [DispIdAttribute("121")]
public abstract virtual void set_SubType(string value);
    [DispIdAttribute("122")]
public abstract virtual bool get_Isolated();
    [DispIdAttribute("122")]
public abstract virtual void set_Isolated(bool value);
    [DispIdAttribute("123")]
public abstract virtual string get_Aliases();
    [DispIdAttribute("123")]
public abstract virtual void set_Aliases(string value);
    [DispIdAttribute("124")]
public abstract virtual UInt32 get_RefType();
    [DispIdAttribute("125")]
public abstract virtual bool get_AutoReferenced();
    [DispIdAttribute("126")]
public abstract virtual bool get_Resolved();
    [DispIdAttribute("127")]
public abstract virtual bool get_EmbedInteropTypes();
    [DispIdAttribute("127")]
public abstract virtual void set_EmbedInteropTypes(bool value);
    [DispIdAttribute("128")]
public abstract virtual Array get_ExpandedSdkReferences();
    [DispIdAttribute("129")]
public abstract virtual Reference get_Group();
}
[DefaultMemberAttribute("Item")]
[GuidAttribute("8BF64AF0-AD98-46D1-8E3E-A02AF56F80AE")]
public interface VSLangProj110.References2 {
    [DispIdAttribute("1")]
public DTE DTE { get; }
    [DispIdAttribute("2")]
public object Parent { get; }
    [DispIdAttribute("3")]
public Project ContainingProject { get; }
    [DispIdAttribute("4")]
public int Count { get; }
    [DispIdAttribute("1")]
public abstract virtual DTE get_DTE();
    [DispIdAttribute("2")]
public abstract virtual object get_Parent();
    [DispIdAttribute("3")]
public abstract virtual Project get_ContainingProject();
    [DispIdAttribute("4")]
public abstract virtual int get_Count();
    [DispIdAttribute("0")]
public abstract virtual Reference Item(object index);
    [DispIdAttribute("-4")]
public abstract virtual IEnumerator GetEnumerator();
    [DispIdAttribute("5")]
public abstract virtual Reference Find(string bstrIdentity);
    [DispIdAttribute("6")]
public abstract virtual Reference Add(string bstrPath);
    [DispIdAttribute("7")]
public abstract virtual Reference AddActiveX(string bstrTypeLibGuid, int lMajorVer, int lMinorVer, int lLocaleId, string bstrWrapperTool);
    [DispIdAttribute("8")]
public abstract virtual Reference AddProject(Project pProject);
    [DispIdAttribute("9")]
public abstract virtual Reference AddSDK(string wszSDKDisplayName, string wszSDKidentifier);
}
[GuidAttribute("08624013-5567-494A-AFE9-A4D1499E50B9")]
public interface VSLangProj110.VBProjectConfigurationProperties5 {
    [DispIdAttribute("-2147418112")]
public string __id { get; }
    [DispIdAttribute("10001")]
public bool DebugSymbols { get; public set; }
    [DispIdAttribute("10036")]
public bool DefineDebug { get; public set; }
    [DispIdAttribute("10037")]
public bool DefineTrace { get; public set; }
    [DispIdAttribute("10004")]
public string OutputPath { get; public set; }
    [DispIdAttribute("10010")]
public string IntermediatePath { get; public set; }
    [DispIdAttribute("10005")]
public string DefineConstants { get; public set; }
    [DispIdAttribute("10054")]
public bool RemoveIntegerChecks { get; public set; }
    [DispIdAttribute("10055")]
public UInt32 BaseAddress { get; public set; }
    [DispIdAttribute("10061")]
public bool AllowUnsafeBlocks { get; public set; }
    [DispIdAttribute("10062")]
public bool CheckForOverflowUnderflow { get; public set; }
    [DispIdAttribute("10063")]
public string DocumentationFile { get; public set; }
    [DispIdAttribute("10064")]
public bool Optimize { get; public set; }
    [DispIdAttribute("10065")]
public bool IncrementalBuild { get; public set; }
    [DispIdAttribute("10006")]
public string StartProgram { get; public set; }
    [DispIdAttribute("10007")]
public string StartWorkingDirectory { get; public set; }
    [DispIdAttribute("10008")]
public string StartURL { get; public set; }
    [DispIdAttribute("10038")]
public string StartPage { get; public set; }
    [DispIdAttribute("10002")]
public string StartArguments { get; public set; }
    [DispIdAttribute("10039")]
public bool StartWithIE { get; public set; }
    [DispIdAttribute("10040")]
public bool EnableASPDebugging { get; public set; }
    [DispIdAttribute("10041")]
public bool EnableASPXDebugging { get; public set; }
    [DispIdAttribute("10057")]
public bool EnableUnmanagedDebugging { get; public set; }
    [DispIdAttribute("10003")]
public prjStartAction StartAction { get; public set; }
    [DispIdAttribute("10031")]
public object ExtenderNames { get; }
    [DispIdAttribute("10032")]
public string ExtenderCATID { get; }
    [DispIdAttribute("10052")]
public prjWarningLevel WarningLevel { get; public set; }
    [DispIdAttribute("10053")]
public bool TreatWarningsAsErrors { get; public set; }
    [DispIdAttribute("10058")]
public bool EnableSQLServerDebugging { get; public set; }
    [DispIdAttribute("10069")]
public UInt32 FileAlignment { get; public set; }
    [DispIdAttribute("10072")]
public bool RegisterForComInterop { get; public set; }
    [DispIdAttribute("10073")]
public string ConfigurationOverrideFile { get; public set; }
    [DispIdAttribute("10074")]
public bool RemoteDebugEnabled { get; public set; }
    [DispIdAttribute("10075")]
public string RemoteDebugMachine { get; public set; }
    [DispIdAttribute("10079")]
public string NoWarn { get; public set; }
    [DispIdAttribute("10066")]
public bool NoStdLib { get; public set; }
    [DispIdAttribute("10106")]
public string DebugInfo { get; public set; }
    [DispIdAttribute("10109")]
public string PlatformTarget { get; public set; }
    [DispIdAttribute("12121")]
public string TreatSpecificWarningsAsErrors { get; public set; }
    [DispIdAttribute("12200")]
public bool RunCodeAnalysis { get; public set; }
    [DispIdAttribute("12201")]
public string CodeAnalysisLogFile { get; public set; }
    [DispIdAttribute("12202")]
public string CodeAnalysisRuleAssemblies { get; public set; }
    [DispIdAttribute("12204")]
public string CodeAnalysisInputAssembly { get; public set; }
    [DispIdAttribute("12203")]
public string CodeAnalysisRules { get; public set; }
    [DispIdAttribute("12205")]
public string CodeAnalysisSpellCheckLanguages { get; public set; }
    [DispIdAttribute("12206")]
public bool CodeAnalysisUseTypeNameInSuppression { get; public set; }
    [DispIdAttribute("12207")]
public string CodeAnalysisModuleSuppressionsFile { get; public set; }
    [DispIdAttribute("10110")]
public bool UseVSHostingProcess { get; public set; }
    [DispIdAttribute("10111")]
public sgenGenerationOption GenerateSerializationAssemblies { get; public set; }
    [DispIdAttribute("15208")]
public bool CodeAnalysisIgnoreGeneratedCode { get; public set; }
    [DispIdAttribute("15209")]
public bool CodeAnalysisOverrideRuleVisibilities { get; public set; }
    [DispIdAttribute("15211")]
public string CodeAnalysisDictionaries { get; public set; }
    [DispIdAttribute("15210")]
public string CodeAnalysisCulture { get; public set; }
    [DispIdAttribute("15212")]
public string CodeAnalysisRuleSet { get; public set; }
    [DispIdAttribute("15213")]
public string CodeAnalysisRuleSetDirectories { get; public set; }
    [DispIdAttribute("15214")]
public bool CodeAnalysisIgnoreBuiltInRuleSets { get; public set; }
    [DispIdAttribute("15215")]
public string CodeAnalysisRuleDirectories { get; public set; }
    [DispIdAttribute("15216")]
public bool CodeAnalysisIgnoreBuiltInRules { get; public set; }
    [DispIdAttribute("15217")]
public bool CodeAnalysisFailOnMissingRules { get; public set; }
    [DispIdAttribute("-2147418112")]
public abstract virtual string get___id();
    [DispIdAttribute("10001")]
public abstract virtual bool get_DebugSymbols();
    [DispIdAttribute("10001")]
public abstract virtual void set_DebugSymbols(bool value);
    [DispIdAttribute("10036")]
public abstract virtual bool get_DefineDebug();
    [DispIdAttribute("10036")]
public abstract virtual void set_DefineDebug(bool value);
    [DispIdAttribute("10037")]
public abstract virtual bool get_DefineTrace();
    [DispIdAttribute("10037")]
public abstract virtual void set_DefineTrace(bool value);
    [DispIdAttribute("10004")]
public abstract virtual string get_OutputPath();
    [DispIdAttribute("10004")]
public abstract virtual void set_OutputPath(string value);
    [DispIdAttribute("10010")]
public abstract virtual string get_IntermediatePath();
    [DispIdAttribute("10010")]
public abstract virtual void set_IntermediatePath(string value);
    [DispIdAttribute("10005")]
public abstract virtual string get_DefineConstants();
    [DispIdAttribute("10005")]
public abstract virtual void set_DefineConstants(string value);
    [DispIdAttribute("10054")]
public abstract virtual bool get_RemoveIntegerChecks();
    [DispIdAttribute("10054")]
public abstract virtual void set_RemoveIntegerChecks(bool value);
    [DispIdAttribute("10055")]
public abstract virtual UInt32 get_BaseAddress();
    [DispIdAttribute("10055")]
public abstract virtual void set_BaseAddress(UInt32 value);
    [DispIdAttribute("10061")]
public abstract virtual bool get_AllowUnsafeBlocks();
    [DispIdAttribute("10061")]
public abstract virtual void set_AllowUnsafeBlocks(bool value);
    [DispIdAttribute("10062")]
public abstract virtual bool get_CheckForOverflowUnderflow();
    [DispIdAttribute("10062")]
public abstract virtual void set_CheckForOverflowUnderflow(bool value);
    [DispIdAttribute("10063")]
public abstract virtual string get_DocumentationFile();
    [DispIdAttribute("10063")]
public abstract virtual void set_DocumentationFile(string value);
    [DispIdAttribute("10064")]
public abstract virtual bool get_Optimize();
    [DispIdAttribute("10064")]
public abstract virtual void set_Optimize(bool value);
    [DispIdAttribute("10065")]
public abstract virtual bool get_IncrementalBuild();
    [DispIdAttribute("10065")]
public abstract virtual void set_IncrementalBuild(bool value);
    [DispIdAttribute("10006")]
public abstract virtual string get_StartProgram();
    [DispIdAttribute("10006")]
public abstract virtual void set_StartProgram(string value);
    [DispIdAttribute("10007")]
public abstract virtual string get_StartWorkingDirectory();
    [DispIdAttribute("10007")]
public abstract virtual void set_StartWorkingDirectory(string value);
    [DispIdAttribute("10008")]
public abstract virtual string get_StartURL();
    [DispIdAttribute("10008")]
public abstract virtual void set_StartURL(string value);
    [DispIdAttribute("10038")]
public abstract virtual string get_StartPage();
    [DispIdAttribute("10038")]
public abstract virtual void set_StartPage(string value);
    [DispIdAttribute("10002")]
public abstract virtual string get_StartArguments();
    [DispIdAttribute("10002")]
public abstract virtual void set_StartArguments(string value);
    [DispIdAttribute("10039")]
public abstract virtual bool get_StartWithIE();
    [DispIdAttribute("10039")]
public abstract virtual void set_StartWithIE(bool value);
    [DispIdAttribute("10040")]
public abstract virtual bool get_EnableASPDebugging();
    [DispIdAttribute("10040")]
public abstract virtual void set_EnableASPDebugging(bool value);
    [DispIdAttribute("10041")]
public abstract virtual bool get_EnableASPXDebugging();
    [DispIdAttribute("10041")]
public abstract virtual void set_EnableASPXDebugging(bool value);
    [DispIdAttribute("10057")]
public abstract virtual bool get_EnableUnmanagedDebugging();
    [DispIdAttribute("10057")]
public abstract virtual void set_EnableUnmanagedDebugging(bool value);
    [DispIdAttribute("10003")]
public abstract virtual prjStartAction get_StartAction();
    [DispIdAttribute("10003")]
public abstract virtual void set_StartAction(prjStartAction value);
    [DispIdAttribute("10030")]
public abstract virtual object get_Extender(string extenderName);
    [DispIdAttribute("10031")]
public abstract virtual object get_ExtenderNames();
    [DispIdAttribute("10032")]
public abstract virtual string get_ExtenderCATID();
    [DispIdAttribute("10052")]
public abstract virtual prjWarningLevel get_WarningLevel();
    [DispIdAttribute("10052")]
public abstract virtual void set_WarningLevel(prjWarningLevel value);
    [DispIdAttribute("10053")]
public abstract virtual bool get_TreatWarningsAsErrors();
    [DispIdAttribute("10053")]
public abstract virtual void set_TreatWarningsAsErrors(bool value);
    [DispIdAttribute("10058")]
public abstract virtual bool get_EnableSQLServerDebugging();
    [DispIdAttribute("10058")]
public abstract virtual void set_EnableSQLServerDebugging(bool value);
    [DispIdAttribute("10069")]
public abstract virtual UInt32 get_FileAlignment();
    [DispIdAttribute("10069")]
public abstract virtual void set_FileAlignment(UInt32 value);
    [DispIdAttribute("10072")]
public abstract virtual bool get_RegisterForComInterop();
    [DispIdAttribute("10072")]
public abstract virtual void set_RegisterForComInterop(bool value);
    [DispIdAttribute("10073")]
public abstract virtual string get_ConfigurationOverrideFile();
    [DispIdAttribute("10073")]
public abstract virtual void set_ConfigurationOverrideFile(string value);
    [DispIdAttribute("10074")]
public abstract virtual bool get_RemoteDebugEnabled();
    [DispIdAttribute("10074")]
public abstract virtual void set_RemoteDebugEnabled(bool value);
    [DispIdAttribute("10075")]
public abstract virtual string get_RemoteDebugMachine();
    [DispIdAttribute("10075")]
public abstract virtual void set_RemoteDebugMachine(string value);
    [DispIdAttribute("10079")]
public abstract virtual string get_NoWarn();
    [DispIdAttribute("10079")]
public abstract virtual void set_NoWarn(string value);
    [DispIdAttribute("10066")]
public abstract virtual bool get_NoStdLib();
    [DispIdAttribute("10066")]
public abstract virtual void set_NoStdLib(bool value);
    [DispIdAttribute("10106")]
public abstract virtual string get_DebugInfo();
    [DispIdAttribute("10106")]
public abstract virtual void set_DebugInfo(string value);
    [DispIdAttribute("10109")]
public abstract virtual string get_PlatformTarget();
    [DispIdAttribute("10109")]
public abstract virtual void set_PlatformTarget(string value);
    [DispIdAttribute("12121")]
public abstract virtual string get_TreatSpecificWarningsAsErrors();
    [DispIdAttribute("12121")]
public abstract virtual void set_TreatSpecificWarningsAsErrors(string value);
    [DispIdAttribute("12200")]
public abstract virtual bool get_RunCodeAnalysis();
    [DispIdAttribute("12200")]
public abstract virtual void set_RunCodeAnalysis(bool value);
    [DispIdAttribute("12201")]
public abstract virtual string get_CodeAnalysisLogFile();
    [DispIdAttribute("12201")]
public abstract virtual void set_CodeAnalysisLogFile(string value);
    [DispIdAttribute("12202")]
public abstract virtual string get_CodeAnalysisRuleAssemblies();
    [DispIdAttribute("12202")]
public abstract virtual void set_CodeAnalysisRuleAssemblies(string value);
    [DispIdAttribute("12204")]
public abstract virtual string get_CodeAnalysisInputAssembly();
    [DispIdAttribute("12204")]
public abstract virtual void set_CodeAnalysisInputAssembly(string value);
    [DispIdAttribute("12203")]
public abstract virtual string get_CodeAnalysisRules();
    [DispIdAttribute("12203")]
public abstract virtual void set_CodeAnalysisRules(string value);
    [DispIdAttribute("12205")]
public abstract virtual string get_CodeAnalysisSpellCheckLanguages();
    [DispIdAttribute("12205")]
public abstract virtual void set_CodeAnalysisSpellCheckLanguages(string value);
    [DispIdAttribute("12206")]
public abstract virtual bool get_CodeAnalysisUseTypeNameInSuppression();
    [DispIdAttribute("12206")]
public abstract virtual void set_CodeAnalysisUseTypeNameInSuppression(bool value);
    [DispIdAttribute("12207")]
public abstract virtual string get_CodeAnalysisModuleSuppressionsFile();
    [DispIdAttribute("12207")]
public abstract virtual void set_CodeAnalysisModuleSuppressionsFile(string value);
    [DispIdAttribute("10110")]
public abstract virtual bool get_UseVSHostingProcess();
    [DispIdAttribute("10110")]
public abstract virtual void set_UseVSHostingProcess(bool value);
    [DispIdAttribute("10111")]
public abstract virtual sgenGenerationOption get_GenerateSerializationAssemblies();
    [DispIdAttribute("10111")]
public abstract virtual void set_GenerateSerializationAssemblies(sgenGenerationOption value);
    [DispIdAttribute("15208")]
public abstract virtual bool get_CodeAnalysisIgnoreGeneratedCode();
    [DispIdAttribute("15208")]
public abstract virtual void set_CodeAnalysisIgnoreGeneratedCode(bool value);
    [DispIdAttribute("15209")]
public abstract virtual bool get_CodeAnalysisOverrideRuleVisibilities();
    [DispIdAttribute("15209")]
public abstract virtual void set_CodeAnalysisOverrideRuleVisibilities(bool value);
    [DispIdAttribute("15211")]
public abstract virtual string get_CodeAnalysisDictionaries();
    [DispIdAttribute("15211")]
public abstract virtual void set_CodeAnalysisDictionaries(string value);
    [DispIdAttribute("15210")]
public abstract virtual string get_CodeAnalysisCulture();
    [DispIdAttribute("15210")]
public abstract virtual void set_CodeAnalysisCulture(string value);
    [DispIdAttribute("15212")]
public abstract virtual string get_CodeAnalysisRuleSet();
    [DispIdAttribute("15212")]
public abstract virtual void set_CodeAnalysisRuleSet(string value);
    [DispIdAttribute("15213")]
public abstract virtual string get_CodeAnalysisRuleSetDirectories();
    [DispIdAttribute("15213")]
public abstract virtual void set_CodeAnalysisRuleSetDirectories(string value);
    [DispIdAttribute("15214")]
public abstract virtual bool get_CodeAnalysisIgnoreBuiltInRuleSets();
    [DispIdAttribute("15214")]
public abstract virtual void set_CodeAnalysisIgnoreBuiltInRuleSets(bool value);
    [DispIdAttribute("15215")]
public abstract virtual string get_CodeAnalysisRuleDirectories();
    [DispIdAttribute("15215")]
public abstract virtual void set_CodeAnalysisRuleDirectories(string value);
    [DispIdAttribute("15216")]
public abstract virtual bool get_CodeAnalysisIgnoreBuiltInRules();
    [DispIdAttribute("15216")]
public abstract virtual void set_CodeAnalysisIgnoreBuiltInRules(bool value);
    [DispIdAttribute("15217")]
public abstract virtual bool get_CodeAnalysisFailOnMissingRules();
    [DispIdAttribute("15217")]
public abstract virtual void set_CodeAnalysisFailOnMissingRules(bool value);
}
[GuidAttribute("3519671B-B697-4721-BAD5-3BC4BFC76AB4")]
public interface VSLangProj110.VBProjectConfigurationProperties6 {
    [DispIdAttribute("-2147418112")]
public string __id { get; }
    [DispIdAttribute("10001")]
public bool DebugSymbols { get; public set; }
    [DispIdAttribute("10036")]
public bool DefineDebug { get; public set; }
    [DispIdAttribute("10037")]
public bool DefineTrace { get; public set; }
    [DispIdAttribute("10004")]
public string OutputPath { get; public set; }
    [DispIdAttribute("10010")]
public string IntermediatePath { get; public set; }
    [DispIdAttribute("10005")]
public string DefineConstants { get; public set; }
    [DispIdAttribute("10054")]
public bool RemoveIntegerChecks { get; public set; }
    [DispIdAttribute("10055")]
public UInt32 BaseAddress { get; public set; }
    [DispIdAttribute("10061")]
public bool AllowUnsafeBlocks { get; public set; }
    [DispIdAttribute("10062")]
public bool CheckForOverflowUnderflow { get; public set; }
    [DispIdAttribute("10063")]
public string DocumentationFile { get; public set; }
    [DispIdAttribute("10064")]
public bool Optimize { get; public set; }
    [DispIdAttribute("10065")]
public bool IncrementalBuild { get; public set; }
    [DispIdAttribute("10006")]
public string StartProgram { get; public set; }
    [DispIdAttribute("10007")]
public string StartWorkingDirectory { get; public set; }
    [DispIdAttribute("10008")]
public string StartURL { get; public set; }
    [DispIdAttribute("10038")]
public string StartPage { get; public set; }
    [DispIdAttribute("10002")]
public string StartArguments { get; public set; }
    [DispIdAttribute("10039")]
public bool StartWithIE { get; public set; }
    [DispIdAttribute("10040")]
public bool EnableASPDebugging { get; public set; }
    [DispIdAttribute("10041")]
public bool EnableASPXDebugging { get; public set; }
    [DispIdAttribute("10057")]
public bool EnableUnmanagedDebugging { get; public set; }
    [DispIdAttribute("10003")]
public prjStartAction StartAction { get; public set; }
    [DispIdAttribute("10031")]
public object ExtenderNames { get; }
    [DispIdAttribute("10032")]
public string ExtenderCATID { get; }
    [DispIdAttribute("10052")]
public prjWarningLevel WarningLevel { get; public set; }
    [DispIdAttribute("10053")]
public bool TreatWarningsAsErrors { get; public set; }
    [DispIdAttribute("10058")]
public bool EnableSQLServerDebugging { get; public set; }
    [DispIdAttribute("10069")]
public UInt32 FileAlignment { get; public set; }
    [DispIdAttribute("10072")]
public bool RegisterForComInterop { get; public set; }
    [DispIdAttribute("10073")]
public string ConfigurationOverrideFile { get; public set; }
    [DispIdAttribute("10074")]
public bool RemoteDebugEnabled { get; public set; }
    [DispIdAttribute("10075")]
public string RemoteDebugMachine { get; public set; }
    [DispIdAttribute("10079")]
public string NoWarn { get; public set; }
    [DispIdAttribute("10066")]
public bool NoStdLib { get; public set; }
    [DispIdAttribute("10106")]
public string DebugInfo { get; public set; }
    [DispIdAttribute("10109")]
public string PlatformTarget { get; public set; }
    [DispIdAttribute("12121")]
public string TreatSpecificWarningsAsErrors { get; public set; }
    [DispIdAttribute("12200")]
public bool RunCodeAnalysis { get; public set; }
    [DispIdAttribute("12201")]
public string CodeAnalysisLogFile { get; public set; }
    [DispIdAttribute("12202")]
public string CodeAnalysisRuleAssemblies { get; public set; }
    [DispIdAttribute("12204")]
public string CodeAnalysisInputAssembly { get; public set; }
    [DispIdAttribute("12203")]
public string CodeAnalysisRules { get; public set; }
    [DispIdAttribute("12205")]
public string CodeAnalysisSpellCheckLanguages { get; public set; }
    [DispIdAttribute("12206")]
public bool CodeAnalysisUseTypeNameInSuppression { get; public set; }
    [DispIdAttribute("12207")]
public string CodeAnalysisModuleSuppressionsFile { get; public set; }
    [DispIdAttribute("10110")]
public bool UseVSHostingProcess { get; public set; }
    [DispIdAttribute("10111")]
public sgenGenerationOption GenerateSerializationAssemblies { get; public set; }
    [DispIdAttribute("15208")]
public bool CodeAnalysisIgnoreGeneratedCode { get; public set; }
    [DispIdAttribute("15209")]
public bool CodeAnalysisOverrideRuleVisibilities { get; public set; }
    [DispIdAttribute("15211")]
public string CodeAnalysisDictionaries { get; public set; }
    [DispIdAttribute("15210")]
public string CodeAnalysisCulture { get; public set; }
    [DispIdAttribute("15212")]
public string CodeAnalysisRuleSet { get; public set; }
    [DispIdAttribute("15213")]
public string CodeAnalysisRuleSetDirectories { get; public set; }
    [DispIdAttribute("15214")]
public bool CodeAnalysisIgnoreBuiltInRuleSets { get; public set; }
    [DispIdAttribute("15215")]
public string CodeAnalysisRuleDirectories { get; public set; }
    [DispIdAttribute("15216")]
public bool CodeAnalysisIgnoreBuiltInRules { get; public set; }
    [DispIdAttribute("15217")]
public bool CodeAnalysisFailOnMissingRules { get; public set; }
    [DispIdAttribute("17001")]
public bool Prefer32Bit { get; public set; }
    [DispIdAttribute("-2147418112")]
public abstract virtual string get___id();
    [DispIdAttribute("10001")]
public abstract virtual bool get_DebugSymbols();
    [DispIdAttribute("10001")]
public abstract virtual void set_DebugSymbols(bool value);
    [DispIdAttribute("10036")]
public abstract virtual bool get_DefineDebug();
    [DispIdAttribute("10036")]
public abstract virtual void set_DefineDebug(bool value);
    [DispIdAttribute("10037")]
public abstract virtual bool get_DefineTrace();
    [DispIdAttribute("10037")]
public abstract virtual void set_DefineTrace(bool value);
    [DispIdAttribute("10004")]
public abstract virtual string get_OutputPath();
    [DispIdAttribute("10004")]
public abstract virtual void set_OutputPath(string value);
    [DispIdAttribute("10010")]
public abstract virtual string get_IntermediatePath();
    [DispIdAttribute("10010")]
public abstract virtual void set_IntermediatePath(string value);
    [DispIdAttribute("10005")]
public abstract virtual string get_DefineConstants();
    [DispIdAttribute("10005")]
public abstract virtual void set_DefineConstants(string value);
    [DispIdAttribute("10054")]
public abstract virtual bool get_RemoveIntegerChecks();
    [DispIdAttribute("10054")]
public abstract virtual void set_RemoveIntegerChecks(bool value);
    [DispIdAttribute("10055")]
public abstract virtual UInt32 get_BaseAddress();
    [DispIdAttribute("10055")]
public abstract virtual void set_BaseAddress(UInt32 value);
    [DispIdAttribute("10061")]
public abstract virtual bool get_AllowUnsafeBlocks();
    [DispIdAttribute("10061")]
public abstract virtual void set_AllowUnsafeBlocks(bool value);
    [DispIdAttribute("10062")]
public abstract virtual bool get_CheckForOverflowUnderflow();
    [DispIdAttribute("10062")]
public abstract virtual void set_CheckForOverflowUnderflow(bool value);
    [DispIdAttribute("10063")]
public abstract virtual string get_DocumentationFile();
    [DispIdAttribute("10063")]
public abstract virtual void set_DocumentationFile(string value);
    [DispIdAttribute("10064")]
public abstract virtual bool get_Optimize();
    [DispIdAttribute("10064")]
public abstract virtual void set_Optimize(bool value);
    [DispIdAttribute("10065")]
public abstract virtual bool get_IncrementalBuild();
    [DispIdAttribute("10065")]
public abstract virtual void set_IncrementalBuild(bool value);
    [DispIdAttribute("10006")]
public abstract virtual string get_StartProgram();
    [DispIdAttribute("10006")]
public abstract virtual void set_StartProgram(string value);
    [DispIdAttribute("10007")]
public abstract virtual string get_StartWorkingDirectory();
    [DispIdAttribute("10007")]
public abstract virtual void set_StartWorkingDirectory(string value);
    [DispIdAttribute("10008")]
public abstract virtual string get_StartURL();
    [DispIdAttribute("10008")]
public abstract virtual void set_StartURL(string value);
    [DispIdAttribute("10038")]
public abstract virtual string get_StartPage();
    [DispIdAttribute("10038")]
public abstract virtual void set_StartPage(string value);
    [DispIdAttribute("10002")]
public abstract virtual string get_StartArguments();
    [DispIdAttribute("10002")]
public abstract virtual void set_StartArguments(string value);
    [DispIdAttribute("10039")]
public abstract virtual bool get_StartWithIE();
    [DispIdAttribute("10039")]
public abstract virtual void set_StartWithIE(bool value);
    [DispIdAttribute("10040")]
public abstract virtual bool get_EnableASPDebugging();
    [DispIdAttribute("10040")]
public abstract virtual void set_EnableASPDebugging(bool value);
    [DispIdAttribute("10041")]
public abstract virtual bool get_EnableASPXDebugging();
    [DispIdAttribute("10041")]
public abstract virtual void set_EnableASPXDebugging(bool value);
    [DispIdAttribute("10057")]
public abstract virtual bool get_EnableUnmanagedDebugging();
    [DispIdAttribute("10057")]
public abstract virtual void set_EnableUnmanagedDebugging(bool value);
    [DispIdAttribute("10003")]
public abstract virtual prjStartAction get_StartAction();
    [DispIdAttribute("10003")]
public abstract virtual void set_StartAction(prjStartAction value);
    [DispIdAttribute("10030")]
public abstract virtual object get_Extender(string extenderName);
    [DispIdAttribute("10031")]
public abstract virtual object get_ExtenderNames();
    [DispIdAttribute("10032")]
public abstract virtual string get_ExtenderCATID();
    [DispIdAttribute("10052")]
public abstract virtual prjWarningLevel get_WarningLevel();
    [DispIdAttribute("10052")]
public abstract virtual void set_WarningLevel(prjWarningLevel value);
    [DispIdAttribute("10053")]
public abstract virtual bool get_TreatWarningsAsErrors();
    [DispIdAttribute("10053")]
public abstract virtual void set_TreatWarningsAsErrors(bool value);
    [DispIdAttribute("10058")]
public abstract virtual bool get_EnableSQLServerDebugging();
    [DispIdAttribute("10058")]
public abstract virtual void set_EnableSQLServerDebugging(bool value);
    [DispIdAttribute("10069")]
public abstract virtual UInt32 get_FileAlignment();
    [DispIdAttribute("10069")]
public abstract virtual void set_FileAlignment(UInt32 value);
    [DispIdAttribute("10072")]
public abstract virtual bool get_RegisterForComInterop();
    [DispIdAttribute("10072")]
public abstract virtual void set_RegisterForComInterop(bool value);
    [DispIdAttribute("10073")]
public abstract virtual string get_ConfigurationOverrideFile();
    [DispIdAttribute("10073")]
public abstract virtual void set_ConfigurationOverrideFile(string value);
    [DispIdAttribute("10074")]
public abstract virtual bool get_RemoteDebugEnabled();
    [DispIdAttribute("10074")]
public abstract virtual void set_RemoteDebugEnabled(bool value);
    [DispIdAttribute("10075")]
public abstract virtual string get_RemoteDebugMachine();
    [DispIdAttribute("10075")]
public abstract virtual void set_RemoteDebugMachine(string value);
    [DispIdAttribute("10079")]
public abstract virtual string get_NoWarn();
    [DispIdAttribute("10079")]
public abstract virtual void set_NoWarn(string value);
    [DispIdAttribute("10066")]
public abstract virtual bool get_NoStdLib();
    [DispIdAttribute("10066")]
public abstract virtual void set_NoStdLib(bool value);
    [DispIdAttribute("10106")]
public abstract virtual string get_DebugInfo();
    [DispIdAttribute("10106")]
public abstract virtual void set_DebugInfo(string value);
    [DispIdAttribute("10109")]
public abstract virtual string get_PlatformTarget();
    [DispIdAttribute("10109")]
public abstract virtual void set_PlatformTarget(string value);
    [DispIdAttribute("12121")]
public abstract virtual string get_TreatSpecificWarningsAsErrors();
    [DispIdAttribute("12121")]
public abstract virtual void set_TreatSpecificWarningsAsErrors(string value);
    [DispIdAttribute("12200")]
public abstract virtual bool get_RunCodeAnalysis();
    [DispIdAttribute("12200")]
public abstract virtual void set_RunCodeAnalysis(bool value);
    [DispIdAttribute("12201")]
public abstract virtual string get_CodeAnalysisLogFile();
    [DispIdAttribute("12201")]
public abstract virtual void set_CodeAnalysisLogFile(string value);
    [DispIdAttribute("12202")]
public abstract virtual string get_CodeAnalysisRuleAssemblies();
    [DispIdAttribute("12202")]
public abstract virtual void set_CodeAnalysisRuleAssemblies(string value);
    [DispIdAttribute("12204")]
public abstract virtual string get_CodeAnalysisInputAssembly();
    [DispIdAttribute("12204")]
public abstract virtual void set_CodeAnalysisInputAssembly(string value);
    [DispIdAttribute("12203")]
public abstract virtual string get_CodeAnalysisRules();
    [DispIdAttribute("12203")]
public abstract virtual void set_CodeAnalysisRules(string value);
    [DispIdAttribute("12205")]
public abstract virtual string get_CodeAnalysisSpellCheckLanguages();
    [DispIdAttribute("12205")]
public abstract virtual void set_CodeAnalysisSpellCheckLanguages(string value);
    [DispIdAttribute("12206")]
public abstract virtual bool get_CodeAnalysisUseTypeNameInSuppression();
    [DispIdAttribute("12206")]
public abstract virtual void set_CodeAnalysisUseTypeNameInSuppression(bool value);
    [DispIdAttribute("12207")]
public abstract virtual string get_CodeAnalysisModuleSuppressionsFile();
    [DispIdAttribute("12207")]
public abstract virtual void set_CodeAnalysisModuleSuppressionsFile(string value);
    [DispIdAttribute("10110")]
public abstract virtual bool get_UseVSHostingProcess();
    [DispIdAttribute("10110")]
public abstract virtual void set_UseVSHostingProcess(bool value);
    [DispIdAttribute("10111")]
public abstract virtual sgenGenerationOption get_GenerateSerializationAssemblies();
    [DispIdAttribute("10111")]
public abstract virtual void set_GenerateSerializationAssemblies(sgenGenerationOption value);
    [DispIdAttribute("15208")]
public abstract virtual bool get_CodeAnalysisIgnoreGeneratedCode();
    [DispIdAttribute("15208")]
public abstract virtual void set_CodeAnalysisIgnoreGeneratedCode(bool value);
    [DispIdAttribute("15209")]
public abstract virtual bool get_CodeAnalysisOverrideRuleVisibilities();
    [DispIdAttribute("15209")]
public abstract virtual void set_CodeAnalysisOverrideRuleVisibilities(bool value);
    [DispIdAttribute("15211")]
public abstract virtual string get_CodeAnalysisDictionaries();
    [DispIdAttribute("15211")]
public abstract virtual void set_CodeAnalysisDictionaries(string value);
    [DispIdAttribute("15210")]
public abstract virtual string get_CodeAnalysisCulture();
    [DispIdAttribute("15210")]
public abstract virtual void set_CodeAnalysisCulture(string value);
    [DispIdAttribute("15212")]
public abstract virtual string get_CodeAnalysisRuleSet();
    [DispIdAttribute("15212")]
public abstract virtual void set_CodeAnalysisRuleSet(string value);
    [DispIdAttribute("15213")]
public abstract virtual string get_CodeAnalysisRuleSetDirectories();
    [DispIdAttribute("15213")]
public abstract virtual void set_CodeAnalysisRuleSetDirectories(string value);
    [DispIdAttribute("15214")]
public abstract virtual bool get_CodeAnalysisIgnoreBuiltInRuleSets();
    [DispIdAttribute("15214")]
public abstract virtual void set_CodeAnalysisIgnoreBuiltInRuleSets(bool value);
    [DispIdAttribute("15215")]
public abstract virtual string get_CodeAnalysisRuleDirectories();
    [DispIdAttribute("15215")]
public abstract virtual void set_CodeAnalysisRuleDirectories(string value);
    [DispIdAttribute("15216")]
public abstract virtual bool get_CodeAnalysisIgnoreBuiltInRules();
    [DispIdAttribute("15216")]
public abstract virtual void set_CodeAnalysisIgnoreBuiltInRules(bool value);
    [DispIdAttribute("15217")]
public abstract virtual bool get_CodeAnalysisFailOnMissingRules();
    [DispIdAttribute("15217")]
public abstract virtual void set_CodeAnalysisFailOnMissingRules(bool value);
    [DispIdAttribute("17001")]
public abstract virtual bool get_Prefer32Bit();
    [DispIdAttribute("17001")]
public abstract virtual void set_Prefer32Bit(bool value);
}
[GuidAttribute("7D84F860-7E2A-42C4-9A70-455B8238DD66")]
public interface VSLangProj110.VBProjectProperties6 {
    [DispIdAttribute("-2147418112")]
public string __id { get; }
    [DispIdAttribute("10035")]
public object __project { get; }
    [DispIdAttribute("10015")]
public string StartupObject { get; public set; }
    [DispIdAttribute("10016")]
public prjOutputType OutputType { get; public set; }
    [DispIdAttribute("10042")]
public string RootNamespace { get; public set; }
    [DispIdAttribute("10013")]
public string AssemblyName { get; public set; }
    [DispIdAttribute("10044")]
public string AssemblyOriginatorKeyFile { get; public set; }
    [DispIdAttribute("10045")]
public string AssemblyKeyContainerName { get; public set; }
    [DispIdAttribute("10043")]
public prjOriginatorKeyMode AssemblyOriginatorKeyMode { get; public set; }
    [DispIdAttribute("10046")]
public bool DelaySign { get; public set; }
    [DispIdAttribute("10012")]
public string WebServer { get; }
    [DispIdAttribute("10017")]
public string WebServerVersion { get; }
    [DispIdAttribute("10018")]
public string ServerExtensionsVersion { get; }
    [DispIdAttribute("10019")]
public bool LinkRepair { get; public set; }
    [DispIdAttribute("10020")]
public string OfflineURL { get; }
    [DispIdAttribute("10047")]
public string FileSharePath { get; public set; }
    [DispIdAttribute("10048")]
public string ActiveFileSharePath { get; }
    [DispIdAttribute("10049")]
public prjWebAccessMethod WebAccessMethod { get; public set; }
    [DispIdAttribute("10050")]
public prjWebAccessMethod ActiveWebAccessMethod { get; }
    [DispIdAttribute("10021")]
public prjScriptLanguage DefaultClientScript { get; public set; }
    [DispIdAttribute("10022")]
public prjTargetSchema DefaultTargetSchema { get; public set; }
    [DispIdAttribute("10023")]
public prjHTMLPageLayout DefaultHTMLPageLayout { get; public set; }
    [DispIdAttribute("10026")]
public string FileName { get; public set; }
    [DispIdAttribute("10027")]
public string FullPath { get; }
    [DispIdAttribute("10028")]
public string LocalPath { get; }
    [DispIdAttribute("10029")]
public string URL { get; }
    [DispIdAttribute("10033")]
public ProjectConfigurationProperties ActiveConfigurationSettings { get; }
    [DispIdAttribute("10031")]
public object ExtenderNames { get; }
    [DispIdAttribute("10032")]
public string ExtenderCATID { get; }
    [DispIdAttribute("10011")]
public string ApplicationIcon { get; public set; }
    [DispIdAttribute("10051")]
public prjOptionStrict OptionStrict { get; public set; }
    [DispIdAttribute("10056")]
public string ReferencePath { get; public set; }
    [DispIdAttribute("10009")]
public string OutputFileName { get; }
    [DispIdAttribute("10034")]
public string AbsoluteProjectDirectory { get; }
    [DispIdAttribute("10059")]
public prjOptionExplicit OptionExplicit { get; public set; }
    [DispIdAttribute("10060")]
public prjCompare OptionCompare { get; public set; }
    [DispIdAttribute("10067")]
public prjProjectType ProjectType { get; }
    [DispIdAttribute("10068")]
public string DefaultNamespace { get; public set; }
    [DispIdAttribute("10076")]
public string PreBuildEvent { get; public set; }
    [DispIdAttribute("10077")]
public string PostBuildEvent { get; public set; }
    [DispIdAttribute("10078")]
public prjRunPostBuildEvent RunPostBuildEvent { get; public set; }
    [DispIdAttribute("10080")]
public string AspnetVersion { get; }
    [DispIdAttribute("12102")]
public string Title { get; public set; }
    [DispIdAttribute("12103")]
public string Description { get; public set; }
    [DispIdAttribute("12104")]
public string Company { get; public set; }
    [DispIdAttribute("12105")]
public string Product { get; public set; }
    [DispIdAttribute("12106")]
public string Copyright { get; public set; }
    [DispIdAttribute("12107")]
public string Trademark { get; public set; }
    [DispIdAttribute("12108")]
public prjAssemblyType AssemblyType { get; public set; }
    [DispIdAttribute("12109")]
public bool TypeComplianceDiagnostics { get; public set; }
    [DispIdAttribute("12112")]
public string Win32ResourceFile { get; public set; }
    [DispIdAttribute("12115")]
public string AssemblyKeyProviderName { get; public set; }
    [DispIdAttribute("12114")]
public UInt32 AssemblyOriginatorKeyFileType { get; public set; }
    [DispIdAttribute("12116")]
public string AssemblyVersion { get; public set; }
    [DispIdAttribute("12117")]
public string AssemblyFileVersion { get; public set; }
    [DispIdAttribute("12119")]
public bool GenerateManifests { get; public set; }
    [DispIdAttribute("12120")]
public bool EnableSecurityDebugging { get; public set; }
    [DispIdAttribute("12118")]
public string DebugSecurityZoneURL { get; public set; }
    [DispIdAttribute("12122")]
public object Publish { get; }
    [DispIdAttribute("12123")]
public bool ComVisible { get; public set; }
    [DispIdAttribute("12124")]
public string AssemblyGuid { get; public set; }
    [DispIdAttribute("12125")]
public string NeutralResourcesLanguage { get; public set; }
    [DispIdAttribute("12126")]
public bool SignAssembly { get; public set; }
    [DispIdAttribute("12132")]
public bool SignManifests { get; public set; }
    [DispIdAttribute("12127")]
public string TargetZone { get; public set; }
    [DispIdAttribute("12128")]
public string ExcludedPermissions { get; public set; }
    [DispIdAttribute("12129")]
public string ManifestCertificateThumbprint { get; public set; }
    [DispIdAttribute("12130")]
public string ManifestKeyFile { get; public set; }
    [DispIdAttribute("12131")]
public string ManifestTimestampUrl { get; public set; }
    [DispIdAttribute("14101")]
public object MyApplication { get; }
    [DispIdAttribute("14102")]
public string MyType { get; public set; }
    [DispIdAttribute("12200")]
public UInt32 TargetFramework { get; public set; }
    [DispIdAttribute("12201")]
public string ApplicationManifest { get; public set; }
    [DispIdAttribute("15101")]
public prjOptionInfer OptionInfer { get; public set; }
    [DispIdAttribute("12202")]
public string TargetFrameworkMoniker { get; public set; }
    [DispIdAttribute("16101")]
public string LanguageVersion { get; public set; }
    [DispIdAttribute("-2147418112")]
public abstract virtual string get___id();
    [DispIdAttribute("10035")]
public abstract virtual object get___project();
    [DispIdAttribute("10015")]
public abstract virtual string get_StartupObject();
    [DispIdAttribute("10015")]
public abstract virtual void set_StartupObject(string value);
    [DispIdAttribute("10016")]
public abstract virtual prjOutputType get_OutputType();
    [DispIdAttribute("10016")]
public abstract virtual void set_OutputType(prjOutputType value);
    [DispIdAttribute("10042")]
public abstract virtual string get_RootNamespace();
    [DispIdAttribute("10042")]
public abstract virtual void set_RootNamespace(string value);
    [DispIdAttribute("10013")]
public abstract virtual string get_AssemblyName();
    [DispIdAttribute("10013")]
public abstract virtual void set_AssemblyName(string value);
    [DispIdAttribute("10044")]
public abstract virtual string get_AssemblyOriginatorKeyFile();
    [DispIdAttribute("10044")]
public abstract virtual void set_AssemblyOriginatorKeyFile(string value);
    [DispIdAttribute("10045")]
public abstract virtual string get_AssemblyKeyContainerName();
    [DispIdAttribute("10045")]
public abstract virtual void set_AssemblyKeyContainerName(string value);
    [DispIdAttribute("10043")]
public abstract virtual prjOriginatorKeyMode get_AssemblyOriginatorKeyMode();
    [DispIdAttribute("10043")]
public abstract virtual void set_AssemblyOriginatorKeyMode(prjOriginatorKeyMode value);
    [DispIdAttribute("10046")]
public abstract virtual bool get_DelaySign();
    [DispIdAttribute("10046")]
public abstract virtual void set_DelaySign(bool value);
    [DispIdAttribute("10012")]
public abstract virtual string get_WebServer();
    [DispIdAttribute("10017")]
public abstract virtual string get_WebServerVersion();
    [DispIdAttribute("10018")]
public abstract virtual string get_ServerExtensionsVersion();
    [DispIdAttribute("10019")]
public abstract virtual bool get_LinkRepair();
    [DispIdAttribute("10019")]
public abstract virtual void set_LinkRepair(bool value);
    [DispIdAttribute("10020")]
public abstract virtual string get_OfflineURL();
    [DispIdAttribute("10047")]
public abstract virtual string get_FileSharePath();
    [DispIdAttribute("10047")]
public abstract virtual void set_FileSharePath(string value);
    [DispIdAttribute("10048")]
public abstract virtual string get_ActiveFileSharePath();
    [DispIdAttribute("10049")]
public abstract virtual prjWebAccessMethod get_WebAccessMethod();
    [DispIdAttribute("10049")]
public abstract virtual void set_WebAccessMethod(prjWebAccessMethod value);
    [DispIdAttribute("10050")]
public abstract virtual prjWebAccessMethod get_ActiveWebAccessMethod();
    [DispIdAttribute("10021")]
public abstract virtual prjScriptLanguage get_DefaultClientScript();
    [DispIdAttribute("10021")]
public abstract virtual void set_DefaultClientScript(prjScriptLanguage value);
    [DispIdAttribute("10022")]
public abstract virtual prjTargetSchema get_DefaultTargetSchema();
    [DispIdAttribute("10022")]
public abstract virtual void set_DefaultTargetSchema(prjTargetSchema value);
    [DispIdAttribute("10023")]
public abstract virtual prjHTMLPageLayout get_DefaultHTMLPageLayout();
    [DispIdAttribute("10023")]
public abstract virtual void set_DefaultHTMLPageLayout(prjHTMLPageLayout value);
    [DispIdAttribute("10026")]
public abstract virtual string get_FileName();
    [DispIdAttribute("10026")]
public abstract virtual void set_FileName(string value);
    [DispIdAttribute("10027")]
public abstract virtual string get_FullPath();
    [DispIdAttribute("10028")]
public abstract virtual string get_LocalPath();
    [DispIdAttribute("10029")]
public abstract virtual string get_URL();
    [DispIdAttribute("10033")]
public abstract virtual ProjectConfigurationProperties get_ActiveConfigurationSettings();
    [DispIdAttribute("10030")]
public abstract virtual object get_Extender(string extenderName);
    [DispIdAttribute("10031")]
public abstract virtual object get_ExtenderNames();
    [DispIdAttribute("10032")]
public abstract virtual string get_ExtenderCATID();
    [DispIdAttribute("10011")]
public abstract virtual string get_ApplicationIcon();
    [DispIdAttribute("10011")]
public abstract virtual void set_ApplicationIcon(string value);
    [DispIdAttribute("10051")]
public abstract virtual prjOptionStrict get_OptionStrict();
    [DispIdAttribute("10051")]
public abstract virtual void set_OptionStrict(prjOptionStrict value);
    [DispIdAttribute("10056")]
public abstract virtual string get_ReferencePath();
    [DispIdAttribute("10056")]
public abstract virtual void set_ReferencePath(string value);
    [DispIdAttribute("10009")]
public abstract virtual string get_OutputFileName();
    [DispIdAttribute("10034")]
public abstract virtual string get_AbsoluteProjectDirectory();
    [DispIdAttribute("10059")]
public abstract virtual prjOptionExplicit get_OptionExplicit();
    [DispIdAttribute("10059")]
public abstract virtual void set_OptionExplicit(prjOptionExplicit value);
    [DispIdAttribute("10060")]
public abstract virtual prjCompare get_OptionCompare();
    [DispIdAttribute("10060")]
public abstract virtual void set_OptionCompare(prjCompare value);
    [DispIdAttribute("10067")]
public abstract virtual prjProjectType get_ProjectType();
    [DispIdAttribute("10068")]
public abstract virtual string get_DefaultNamespace();
    [DispIdAttribute("10068")]
public abstract virtual void set_DefaultNamespace(string value);
    [DispIdAttribute("10076")]
public abstract virtual string get_PreBuildEvent();
    [DispIdAttribute("10076")]
public abstract virtual void set_PreBuildEvent(string value);
    [DispIdAttribute("10077")]
public abstract virtual string get_PostBuildEvent();
    [DispIdAttribute("10077")]
public abstract virtual void set_PostBuildEvent(string value);
    [DispIdAttribute("10078")]
public abstract virtual prjRunPostBuildEvent get_RunPostBuildEvent();
    [DispIdAttribute("10078")]
public abstract virtual void set_RunPostBuildEvent(prjRunPostBuildEvent value);
    [DispIdAttribute("10080")]
public abstract virtual string get_AspnetVersion();
    [DispIdAttribute("12102")]
public abstract virtual string get_Title();
    [DispIdAttribute("12102")]
public abstract virtual void set_Title(string value);
    [DispIdAttribute("12103")]
public abstract virtual string get_Description();
    [DispIdAttribute("12103")]
public abstract virtual void set_Description(string value);
    [DispIdAttribute("12104")]
public abstract virtual string get_Company();
    [DispIdAttribute("12104")]
public abstract virtual void set_Company(string value);
    [DispIdAttribute("12105")]
public abstract virtual string get_Product();
    [DispIdAttribute("12105")]
public abstract virtual void set_Product(string value);
    [DispIdAttribute("12106")]
public abstract virtual string get_Copyright();
    [DispIdAttribute("12106")]
public abstract virtual void set_Copyright(string value);
    [DispIdAttribute("12107")]
public abstract virtual string get_Trademark();
    [DispIdAttribute("12107")]
public abstract virtual void set_Trademark(string value);
    [DispIdAttribute("12108")]
public abstract virtual prjAssemblyType get_AssemblyType();
    [DispIdAttribute("12108")]
public abstract virtual void set_AssemblyType(prjAssemblyType value);
    [DispIdAttribute("12109")]
public abstract virtual bool get_TypeComplianceDiagnostics();
    [DispIdAttribute("12109")]
public abstract virtual void set_TypeComplianceDiagnostics(bool value);
    [DispIdAttribute("12112")]
public abstract virtual string get_Win32ResourceFile();
    [DispIdAttribute("12112")]
public abstract virtual void set_Win32ResourceFile(string value);
    [DispIdAttribute("12115")]
public abstract virtual string get_AssemblyKeyProviderName();
    [DispIdAttribute("12115")]
public abstract virtual void set_AssemblyKeyProviderName(string value);
    [DispIdAttribute("12114")]
public abstract virtual UInt32 get_AssemblyOriginatorKeyFileType();
    [DispIdAttribute("12114")]
public abstract virtual void set_AssemblyOriginatorKeyFileType(UInt32 value);
    [DispIdAttribute("12116")]
public abstract virtual string get_AssemblyVersion();
    [DispIdAttribute("12116")]
public abstract virtual void set_AssemblyVersion(string value);
    [DispIdAttribute("12117")]
public abstract virtual string get_AssemblyFileVersion();
    [DispIdAttribute("12117")]
public abstract virtual void set_AssemblyFileVersion(string value);
    [DispIdAttribute("12119")]
public abstract virtual bool get_GenerateManifests();
    [DispIdAttribute("12119")]
public abstract virtual void set_GenerateManifests(bool value);
    [DispIdAttribute("12120")]
public abstract virtual bool get_EnableSecurityDebugging();
    [DispIdAttribute("12120")]
public abstract virtual void set_EnableSecurityDebugging(bool value);
    [DispIdAttribute("12118")]
public abstract virtual string get_DebugSecurityZoneURL();
    [DispIdAttribute("12118")]
public abstract virtual void set_DebugSecurityZoneURL(string value);
    [DispIdAttribute("12122")]
public abstract virtual object get_Publish();
    [DispIdAttribute("12123")]
public abstract virtual bool get_ComVisible();
    [DispIdAttribute("12123")]
public abstract virtual void set_ComVisible(bool value);
    [DispIdAttribute("12124")]
public abstract virtual string get_AssemblyGuid();
    [DispIdAttribute("12124")]
public abstract virtual void set_AssemblyGuid(string value);
    [DispIdAttribute("12125")]
public abstract virtual string get_NeutralResourcesLanguage();
    [DispIdAttribute("12125")]
public abstract virtual void set_NeutralResourcesLanguage(string value);
    [DispIdAttribute("12126")]
public abstract virtual bool get_SignAssembly();
    [DispIdAttribute("12126")]
public abstract virtual void set_SignAssembly(bool value);
    [DispIdAttribute("12132")]
public abstract virtual bool get_SignManifests();
    [DispIdAttribute("12132")]
public abstract virtual void set_SignManifests(bool value);
    [DispIdAttribute("12127")]
public abstract virtual string get_TargetZone();
    [DispIdAttribute("12127")]
public abstract virtual void set_TargetZone(string value);
    [DispIdAttribute("12128")]
public abstract virtual string get_ExcludedPermissions();
    [DispIdAttribute("12128")]
public abstract virtual void set_ExcludedPermissions(string value);
    [DispIdAttribute("12129")]
public abstract virtual string get_ManifestCertificateThumbprint();
    [DispIdAttribute("12129")]
public abstract virtual void set_ManifestCertificateThumbprint(string value);
    [DispIdAttribute("12130")]
public abstract virtual string get_ManifestKeyFile();
    [DispIdAttribute("12130")]
public abstract virtual void set_ManifestKeyFile(string value);
    [DispIdAttribute("12131")]
public abstract virtual string get_ManifestTimestampUrl();
    [DispIdAttribute("12131")]
public abstract virtual void set_ManifestTimestampUrl(string value);
    [DispIdAttribute("14101")]
public abstract virtual object get_MyApplication();
    [DispIdAttribute("14102")]
public abstract virtual string get_MyType();
    [DispIdAttribute("14102")]
public abstract virtual void set_MyType(string value);
    [DispIdAttribute("12200")]
public abstract virtual UInt32 get_TargetFramework();
    [DispIdAttribute("12200")]
public abstract virtual void set_TargetFramework(UInt32 value);
    [DispIdAttribute("12201")]
public abstract virtual string get_ApplicationManifest();
    [DispIdAttribute("12201")]
public abstract virtual void set_ApplicationManifest(string value);
    [DispIdAttribute("15101")]
public abstract virtual prjOptionInfer get_OptionInfer();
    [DispIdAttribute("15101")]
public abstract virtual void set_OptionInfer(prjOptionInfer value);
    [DispIdAttribute("12202")]
public abstract virtual string get_TargetFrameworkMoniker();
    [DispIdAttribute("12202")]
public abstract virtual void set_TargetFrameworkMoniker(string value);
    [DispIdAttribute("16101")]
public abstract virtual string get_LanguageVersion();
    [DispIdAttribute("16101")]
public abstract virtual void set_LanguageVersion(string value);
}
[GuidAttribute("ECB0A5B7-1C4E-4400-A6C4-4B83614D9CC0")]
public interface VSLangProj110.VBProjectProperties7 {
    [DispIdAttribute("-2147418112")]
public string __id { get; }
    [DispIdAttribute("10035")]
public object __project { get; }
    [DispIdAttribute("10015")]
public string StartupObject { get; public set; }
    [DispIdAttribute("10016")]
public prjOutputType OutputType { get; public set; }
    [DispIdAttribute("10042")]
public string RootNamespace { get; public set; }
    [DispIdAttribute("10013")]
public string AssemblyName { get; public set; }
    [DispIdAttribute("10044")]
public string AssemblyOriginatorKeyFile { get; public set; }
    [DispIdAttribute("10045")]
public string AssemblyKeyContainerName { get; public set; }
    [DispIdAttribute("10043")]
public prjOriginatorKeyMode AssemblyOriginatorKeyMode { get; public set; }
    [DispIdAttribute("10046")]
public bool DelaySign { get; public set; }
    [DispIdAttribute("10012")]
public string WebServer { get; }
    [DispIdAttribute("10017")]
public string WebServerVersion { get; }
    [DispIdAttribute("10018")]
public string ServerExtensionsVersion { get; }
    [DispIdAttribute("10019")]
public bool LinkRepair { get; public set; }
    [DispIdAttribute("10020")]
public string OfflineURL { get; }
    [DispIdAttribute("10047")]
public string FileSharePath { get; public set; }
    [DispIdAttribute("10048")]
public string ActiveFileSharePath { get; }
    [DispIdAttribute("10049")]
public prjWebAccessMethod WebAccessMethod { get; public set; }
    [DispIdAttribute("10050")]
public prjWebAccessMethod ActiveWebAccessMethod { get; }
    [DispIdAttribute("10021")]
public prjScriptLanguage DefaultClientScript { get; public set; }
    [DispIdAttribute("10022")]
public prjTargetSchema DefaultTargetSchema { get; public set; }
    [DispIdAttribute("10023")]
public prjHTMLPageLayout DefaultHTMLPageLayout { get; public set; }
    [DispIdAttribute("10026")]
public string FileName { get; public set; }
    [DispIdAttribute("10027")]
public string FullPath { get; }
    [DispIdAttribute("10028")]
public string LocalPath { get; }
    [DispIdAttribute("10029")]
public string URL { get; }
    [DispIdAttribute("10033")]
public ProjectConfigurationProperties ActiveConfigurationSettings { get; }
    [DispIdAttribute("10031")]
public object ExtenderNames { get; }
    [DispIdAttribute("10032")]
public string ExtenderCATID { get; }
    [DispIdAttribute("10011")]
public string ApplicationIcon { get; public set; }
    [DispIdAttribute("10051")]
public prjOptionStrict OptionStrict { get; public set; }
    [DispIdAttribute("10056")]
public string ReferencePath { get; public set; }
    [DispIdAttribute("10009")]
public string OutputFileName { get; }
    [DispIdAttribute("10034")]
public string AbsoluteProjectDirectory { get; }
    [DispIdAttribute("10059")]
public prjOptionExplicit OptionExplicit { get; public set; }
    [DispIdAttribute("10060")]
public prjCompare OptionCompare { get; public set; }
    [DispIdAttribute("10067")]
public prjProjectType ProjectType { get; }
    [DispIdAttribute("10068")]
public string DefaultNamespace { get; public set; }
    [DispIdAttribute("10076")]
public string PreBuildEvent { get; public set; }
    [DispIdAttribute("10077")]
public string PostBuildEvent { get; public set; }
    [DispIdAttribute("10078")]
public prjRunPostBuildEvent RunPostBuildEvent { get; public set; }
    [DispIdAttribute("10080")]
public string AspnetVersion { get; }
    [DispIdAttribute("12102")]
public string Title { get; public set; }
    [DispIdAttribute("12103")]
public string Description { get; public set; }
    [DispIdAttribute("12104")]
public string Company { get; public set; }
    [DispIdAttribute("12105")]
public string Product { get; public set; }
    [DispIdAttribute("12106")]
public string Copyright { get; public set; }
    [DispIdAttribute("12107")]
public string Trademark { get; public set; }
    [DispIdAttribute("12108")]
public prjAssemblyType AssemblyType { get; public set; }
    [DispIdAttribute("12109")]
public bool TypeComplianceDiagnostics { get; public set; }
    [DispIdAttribute("12112")]
public string Win32ResourceFile { get; public set; }
    [DispIdAttribute("12115")]
public string AssemblyKeyProviderName { get; public set; }
    [DispIdAttribute("12114")]
public UInt32 AssemblyOriginatorKeyFileType { get; public set; }
    [DispIdAttribute("12116")]
public string AssemblyVersion { get; public set; }
    [DispIdAttribute("12117")]
public string AssemblyFileVersion { get; public set; }
    [DispIdAttribute("12119")]
public bool GenerateManifests { get; public set; }
    [DispIdAttribute("12120")]
public bool EnableSecurityDebugging { get; public set; }
    [DispIdAttribute("12118")]
public string DebugSecurityZoneURL { get; public set; }
    [DispIdAttribute("12122")]
public object Publish { get; }
    [DispIdAttribute("12123")]
public bool ComVisible { get; public set; }
    [DispIdAttribute("12124")]
public string AssemblyGuid { get; public set; }
    [DispIdAttribute("12125")]
public string NeutralResourcesLanguage { get; public set; }
    [DispIdAttribute("12126")]
public bool SignAssembly { get; public set; }
    [DispIdAttribute("12132")]
public bool SignManifests { get; public set; }
    [DispIdAttribute("12127")]
public string TargetZone { get; public set; }
    [DispIdAttribute("12128")]
public string ExcludedPermissions { get; public set; }
    [DispIdAttribute("12129")]
public string ManifestCertificateThumbprint { get; public set; }
    [DispIdAttribute("12130")]
public string ManifestKeyFile { get; public set; }
    [DispIdAttribute("12131")]
public string ManifestTimestampUrl { get; public set; }
    [DispIdAttribute("14101")]
public object MyApplication { get; }
    [DispIdAttribute("14102")]
public string MyType { get; public set; }
    [DispIdAttribute("12200")]
public UInt32 TargetFramework { get; public set; }
    [DispIdAttribute("12201")]
public string ApplicationManifest { get; public set; }
    [DispIdAttribute("15101")]
public prjOptionInfer OptionInfer { get; public set; }
    [DispIdAttribute("12202")]
public string TargetFrameworkMoniker { get; public set; }
    [DispIdAttribute("16101")]
public string LanguageVersion { get; public set; }
    [ComAliasNameAttribute("VSLangProj110.DWORD")]
[DispIdAttribute("17000")]
public UInt32 OutputTypeEx { get; public set; }
    [DispIdAttribute("-2147418112")]
public abstract virtual string get___id();
    [DispIdAttribute("10035")]
public abstract virtual object get___project();
    [DispIdAttribute("10015")]
public abstract virtual string get_StartupObject();
    [DispIdAttribute("10015")]
public abstract virtual void set_StartupObject(string value);
    [DispIdAttribute("10016")]
public abstract virtual prjOutputType get_OutputType();
    [DispIdAttribute("10016")]
public abstract virtual void set_OutputType(prjOutputType value);
    [DispIdAttribute("10042")]
public abstract virtual string get_RootNamespace();
    [DispIdAttribute("10042")]
public abstract virtual void set_RootNamespace(string value);
    [DispIdAttribute("10013")]
public abstract virtual string get_AssemblyName();
    [DispIdAttribute("10013")]
public abstract virtual void set_AssemblyName(string value);
    [DispIdAttribute("10044")]
public abstract virtual string get_AssemblyOriginatorKeyFile();
    [DispIdAttribute("10044")]
public abstract virtual void set_AssemblyOriginatorKeyFile(string value);
    [DispIdAttribute("10045")]
public abstract virtual string get_AssemblyKeyContainerName();
    [DispIdAttribute("10045")]
public abstract virtual void set_AssemblyKeyContainerName(string value);
    [DispIdAttribute("10043")]
public abstract virtual prjOriginatorKeyMode get_AssemblyOriginatorKeyMode();
    [DispIdAttribute("10043")]
public abstract virtual void set_AssemblyOriginatorKeyMode(prjOriginatorKeyMode value);
    [DispIdAttribute("10046")]
public abstract virtual bool get_DelaySign();
    [DispIdAttribute("10046")]
public abstract virtual void set_DelaySign(bool value);
    [DispIdAttribute("10012")]
public abstract virtual string get_WebServer();
    [DispIdAttribute("10017")]
public abstract virtual string get_WebServerVersion();
    [DispIdAttribute("10018")]
public abstract virtual string get_ServerExtensionsVersion();
    [DispIdAttribute("10019")]
public abstract virtual bool get_LinkRepair();
    [DispIdAttribute("10019")]
public abstract virtual void set_LinkRepair(bool value);
    [DispIdAttribute("10020")]
public abstract virtual string get_OfflineURL();
    [DispIdAttribute("10047")]
public abstract virtual string get_FileSharePath();
    [DispIdAttribute("10047")]
public abstract virtual void set_FileSharePath(string value);
    [DispIdAttribute("10048")]
public abstract virtual string get_ActiveFileSharePath();
    [DispIdAttribute("10049")]
public abstract virtual prjWebAccessMethod get_WebAccessMethod();
    [DispIdAttribute("10049")]
public abstract virtual void set_WebAccessMethod(prjWebAccessMethod value);
    [DispIdAttribute("10050")]
public abstract virtual prjWebAccessMethod get_ActiveWebAccessMethod();
    [DispIdAttribute("10021")]
public abstract virtual prjScriptLanguage get_DefaultClientScript();
    [DispIdAttribute("10021")]
public abstract virtual void set_DefaultClientScript(prjScriptLanguage value);
    [DispIdAttribute("10022")]
public abstract virtual prjTargetSchema get_DefaultTargetSchema();
    [DispIdAttribute("10022")]
public abstract virtual void set_DefaultTargetSchema(prjTargetSchema value);
    [DispIdAttribute("10023")]
public abstract virtual prjHTMLPageLayout get_DefaultHTMLPageLayout();
    [DispIdAttribute("10023")]
public abstract virtual void set_DefaultHTMLPageLayout(prjHTMLPageLayout value);
    [DispIdAttribute("10026")]
public abstract virtual string get_FileName();
    [DispIdAttribute("10026")]
public abstract virtual void set_FileName(string value);
    [DispIdAttribute("10027")]
public abstract virtual string get_FullPath();
    [DispIdAttribute("10028")]
public abstract virtual string get_LocalPath();
    [DispIdAttribute("10029")]
public abstract virtual string get_URL();
    [DispIdAttribute("10033")]
public abstract virtual ProjectConfigurationProperties get_ActiveConfigurationSettings();
    [DispIdAttribute("10030")]
public abstract virtual object get_Extender(string extenderName);
    [DispIdAttribute("10031")]
public abstract virtual object get_ExtenderNames();
    [DispIdAttribute("10032")]
public abstract virtual string get_ExtenderCATID();
    [DispIdAttribute("10011")]
public abstract virtual string get_ApplicationIcon();
    [DispIdAttribute("10011")]
public abstract virtual void set_ApplicationIcon(string value);
    [DispIdAttribute("10051")]
public abstract virtual prjOptionStrict get_OptionStrict();
    [DispIdAttribute("10051")]
public abstract virtual void set_OptionStrict(prjOptionStrict value);
    [DispIdAttribute("10056")]
public abstract virtual string get_ReferencePath();
    [DispIdAttribute("10056")]
public abstract virtual void set_ReferencePath(string value);
    [DispIdAttribute("10009")]
public abstract virtual string get_OutputFileName();
    [DispIdAttribute("10034")]
public abstract virtual string get_AbsoluteProjectDirectory();
    [DispIdAttribute("10059")]
public abstract virtual prjOptionExplicit get_OptionExplicit();
    [DispIdAttribute("10059")]
public abstract virtual void set_OptionExplicit(prjOptionExplicit value);
    [DispIdAttribute("10060")]
public abstract virtual prjCompare get_OptionCompare();
    [DispIdAttribute("10060")]
public abstract virtual void set_OptionCompare(prjCompare value);
    [DispIdAttribute("10067")]
public abstract virtual prjProjectType get_ProjectType();
    [DispIdAttribute("10068")]
public abstract virtual string get_DefaultNamespace();
    [DispIdAttribute("10068")]
public abstract virtual void set_DefaultNamespace(string value);
    [DispIdAttribute("10076")]
public abstract virtual string get_PreBuildEvent();
    [DispIdAttribute("10076")]
public abstract virtual void set_PreBuildEvent(string value);
    [DispIdAttribute("10077")]
public abstract virtual string get_PostBuildEvent();
    [DispIdAttribute("10077")]
public abstract virtual void set_PostBuildEvent(string value);
    [DispIdAttribute("10078")]
public abstract virtual prjRunPostBuildEvent get_RunPostBuildEvent();
    [DispIdAttribute("10078")]
public abstract virtual void set_RunPostBuildEvent(prjRunPostBuildEvent value);
    [DispIdAttribute("10080")]
public abstract virtual string get_AspnetVersion();
    [DispIdAttribute("12102")]
public abstract virtual string get_Title();
    [DispIdAttribute("12102")]
public abstract virtual void set_Title(string value);
    [DispIdAttribute("12103")]
public abstract virtual string get_Description();
    [DispIdAttribute("12103")]
public abstract virtual void set_Description(string value);
    [DispIdAttribute("12104")]
public abstract virtual string get_Company();
    [DispIdAttribute("12104")]
public abstract virtual void set_Company(string value);
    [DispIdAttribute("12105")]
public abstract virtual string get_Product();
    [DispIdAttribute("12105")]
public abstract virtual void set_Product(string value);
    [DispIdAttribute("12106")]
public abstract virtual string get_Copyright();
    [DispIdAttribute("12106")]
public abstract virtual void set_Copyright(string value);
    [DispIdAttribute("12107")]
public abstract virtual string get_Trademark();
    [DispIdAttribute("12107")]
public abstract virtual void set_Trademark(string value);
    [DispIdAttribute("12108")]
public abstract virtual prjAssemblyType get_AssemblyType();
    [DispIdAttribute("12108")]
public abstract virtual void set_AssemblyType(prjAssemblyType value);
    [DispIdAttribute("12109")]
public abstract virtual bool get_TypeComplianceDiagnostics();
    [DispIdAttribute("12109")]
public abstract virtual void set_TypeComplianceDiagnostics(bool value);
    [DispIdAttribute("12112")]
public abstract virtual string get_Win32ResourceFile();
    [DispIdAttribute("12112")]
public abstract virtual void set_Win32ResourceFile(string value);
    [DispIdAttribute("12115")]
public abstract virtual string get_AssemblyKeyProviderName();
    [DispIdAttribute("12115")]
public abstract virtual void set_AssemblyKeyProviderName(string value);
    [DispIdAttribute("12114")]
public abstract virtual UInt32 get_AssemblyOriginatorKeyFileType();
    [DispIdAttribute("12114")]
public abstract virtual void set_AssemblyOriginatorKeyFileType(UInt32 value);
    [DispIdAttribute("12116")]
public abstract virtual string get_AssemblyVersion();
    [DispIdAttribute("12116")]
public abstract virtual void set_AssemblyVersion(string value);
    [DispIdAttribute("12117")]
public abstract virtual string get_AssemblyFileVersion();
    [DispIdAttribute("12117")]
public abstract virtual void set_AssemblyFileVersion(string value);
    [DispIdAttribute("12119")]
public abstract virtual bool get_GenerateManifests();
    [DispIdAttribute("12119")]
public abstract virtual void set_GenerateManifests(bool value);
    [DispIdAttribute("12120")]
public abstract virtual bool get_EnableSecurityDebugging();
    [DispIdAttribute("12120")]
public abstract virtual void set_EnableSecurityDebugging(bool value);
    [DispIdAttribute("12118")]
public abstract virtual string get_DebugSecurityZoneURL();
    [DispIdAttribute("12118")]
public abstract virtual void set_DebugSecurityZoneURL(string value);
    [DispIdAttribute("12122")]
public abstract virtual object get_Publish();
    [DispIdAttribute("12123")]
public abstract virtual bool get_ComVisible();
    [DispIdAttribute("12123")]
public abstract virtual void set_ComVisible(bool value);
    [DispIdAttribute("12124")]
public abstract virtual string get_AssemblyGuid();
    [DispIdAttribute("12124")]
public abstract virtual void set_AssemblyGuid(string value);
    [DispIdAttribute("12125")]
public abstract virtual string get_NeutralResourcesLanguage();
    [DispIdAttribute("12125")]
public abstract virtual void set_NeutralResourcesLanguage(string value);
    [DispIdAttribute("12126")]
public abstract virtual bool get_SignAssembly();
    [DispIdAttribute("12126")]
public abstract virtual void set_SignAssembly(bool value);
    [DispIdAttribute("12132")]
public abstract virtual bool get_SignManifests();
    [DispIdAttribute("12132")]
public abstract virtual void set_SignManifests(bool value);
    [DispIdAttribute("12127")]
public abstract virtual string get_TargetZone();
    [DispIdAttribute("12127")]
public abstract virtual void set_TargetZone(string value);
    [DispIdAttribute("12128")]
public abstract virtual string get_ExcludedPermissions();
    [DispIdAttribute("12128")]
public abstract virtual void set_ExcludedPermissions(string value);
    [DispIdAttribute("12129")]
public abstract virtual string get_ManifestCertificateThumbprint();
    [DispIdAttribute("12129")]
public abstract virtual void set_ManifestCertificateThumbprint(string value);
    [DispIdAttribute("12130")]
public abstract virtual string get_ManifestKeyFile();
    [DispIdAttribute("12130")]
public abstract virtual void set_ManifestKeyFile(string value);
    [DispIdAttribute("12131")]
public abstract virtual string get_ManifestTimestampUrl();
    [DispIdAttribute("12131")]
public abstract virtual void set_ManifestTimestampUrl(string value);
    [DispIdAttribute("14101")]
public abstract virtual object get_MyApplication();
    [DispIdAttribute("14102")]
public abstract virtual string get_MyType();
    [DispIdAttribute("14102")]
public abstract virtual void set_MyType(string value);
    [DispIdAttribute("12200")]
public abstract virtual UInt32 get_TargetFramework();
    [DispIdAttribute("12200")]
public abstract virtual void set_TargetFramework(UInt32 value);
    [DispIdAttribute("12201")]
public abstract virtual string get_ApplicationManifest();
    [DispIdAttribute("12201")]
public abstract virtual void set_ApplicationManifest(string value);
    [DispIdAttribute("15101")]
public abstract virtual prjOptionInfer get_OptionInfer();
    [DispIdAttribute("15101")]
public abstract virtual void set_OptionInfer(prjOptionInfer value);
    [DispIdAttribute("12202")]
public abstract virtual string get_TargetFrameworkMoniker();
    [DispIdAttribute("12202")]
public abstract virtual void set_TargetFrameworkMoniker(string value);
    [DispIdAttribute("16101")]
public abstract virtual string get_LanguageVersion();
    [DispIdAttribute("16101")]
public abstract virtual void set_LanguageVersion(string value);
    [DispIdAttribute("17000")]
public abstract virtual UInt32 get_OutputTypeEx();
    [DispIdAttribute("17000")]
public abstract virtual void set_OutputTypeEx(UInt32 value);
}
public enum VSLangProj110.VBProjPropId100 : Enum {
    public int value__;
    public static VBProjPropId100 VBPROJPROPID_LanguageVersion;
}
public enum VSLangProj110.VsProjPropId100 : Enum {
    public int value__;
    public static VsProjPropId100 VBPROJPROPID_TargetFrameworkMoniker;
    public static VsProjPropId100 VBPROJPROPID_CodeAnalysisRuleSet;
    public static VsProjPropId100 VBPROJPROPID_CodeAnalysisRuleSetDirectories;
    public static VsProjPropId100 VBPROJPROPID_CodeAnalysisIgnoreBuiltInRuleSets;
    public static VsProjPropId100 VBPROJPROPID_CodeAnalysisRuleDirectories;
    public static VsProjPropId100 VBPROJPROPID_CodeAnalysisIgnoreBuiltInRules;
    public static VsProjPropId100 VBPROJPROPID_CodeAnalysisFailOnMissingRules;
}
public enum VSLangProj110.VsProjPropId110 : Enum {
    public int value__;
    public static VsProjPropId110 VBPROJPROPID_OutputTypeEx;
    public static VsProjPropId110 VBPROJPROPID_Prefer32Bit;
}
public enum VSLangProj110.VsProjReferencePropId100 : Enum {
    public int value__;
    public static VsProjReferencePropId100 DISPID_Reference_EmbedInteropTypes;
}
public enum VSLangProj110.VsProjReferencePropId110 : Enum {
    public int value__;
    public static VsProjReferencePropId110 DISPID_Reference_ExpandedSdkReferences;
    public static VsProjReferencePropId110 DISPID_Reference_Group;
}
[DefaultMemberAttribute("Item")]
[GuidAttribute("1C0A9223-DF8F-4D3D-A5FC-4D4B506706E7")]
public interface VSLangProj140.AnalyzerReferences {
    [DispIdAttribute("1")]
public DTE DTE { get; }
    [DispIdAttribute("2")]
public object Parent { get; }
    [DispIdAttribute("3")]
public Project ContainingProject { get; }
    public int Count { get; }
    [DispIdAttribute("1")]
public abstract virtual DTE get_DTE();
    [DispIdAttribute("2")]
public abstract virtual object get_Parent();
    [DispIdAttribute("3")]
public abstract virtual Project get_ContainingProject();
    [DispIdAttribute("4")]
public abstract virtual void Add(string bstrPath);
    [DispIdAttribute("5")]
public abstract virtual void Remove(string bstrPath);
    public abstract virtual int get_Count();
    [DispIdAttribute("0")]
public abstract virtual string Item(object index);
    [DispIdAttribute("-4")]
public abstract virtual IEnumerator GetEnumerator();
}
[GuidAttribute("0245DB80-6F23-4B81-9517-DCA8778DAB77")]
public interface VSLangProj140.VSProject3 {
    [DispIdAttribute("1")]
public References References { get; }
    [DispIdAttribute("2")]
public BuildManager BuildManager { get; }
    [DispIdAttribute("3")]
public DTE DTE { get; }
    [DispIdAttribute("4")]
public Project Project { get; }
    [DispIdAttribute("6")]
public ProjectItem WebReferencesFolder { get; }
    [DispIdAttribute("8")]
public string TemplatePath { get; }
    [DispIdAttribute("10")]
public bool WorkOffline { get; public set; }
    [DispIdAttribute("11")]
public Imports Imports { get; }
    [DispIdAttribute("12")]
public VSProjectEvents Events { get; }
    [DispIdAttribute("17")]
public object PublishManager { get; }
    [DispIdAttribute("18")]
public VSProjectEvents2 Events2 { get; }
    [DispIdAttribute("19")]
public AnalyzerReferences AnalyzerReferences { get; }
    [DispIdAttribute("1")]
public abstract virtual References get_References();
    [DispIdAttribute("2")]
public abstract virtual BuildManager get_BuildManager();
    [DispIdAttribute("3")]
public abstract virtual DTE get_DTE();
    [DispIdAttribute("4")]
public abstract virtual Project get_Project();
    [DispIdAttribute("5")]
public abstract virtual ProjectItem CreateWebReferencesFolder();
    [DispIdAttribute("6")]
public abstract virtual ProjectItem get_WebReferencesFolder();
    [DispIdAttribute("7")]
public abstract virtual ProjectItem AddWebReference(string bstrUrl);
    [DispIdAttribute("8")]
public abstract virtual string get_TemplatePath();
    [DispIdAttribute("9")]
public abstract virtual void Refresh();
    [DispIdAttribute("10")]
public abstract virtual bool get_WorkOffline();
    [DispIdAttribute("10")]
public abstract virtual void set_WorkOffline(bool value);
    [DispIdAttribute("11")]
public abstract virtual Imports get_Imports();
    [DispIdAttribute("12")]
public abstract virtual VSProjectEvents get_Events();
    [DispIdAttribute("13")]
public abstract virtual void CopyProject(string bstrDestFolder, string bstrDestUNCPath, prjCopyProjectOption copyProjectOption, string bstrUsername, string bstrPassword);
    [DispIdAttribute("14")]
public abstract virtual void Exec(prjExecCommand command, int bSuppressUI, object varIn, Object& pVarOut);
    [DispIdAttribute("15")]
public abstract virtual void GenerateKeyPairFiles(string strPublicPrivateFile, string strPublicOnlyFile);
    [DispIdAttribute("16")]
public abstract virtual string GetUniqueFilename(object pDispatch, string bstrRoot, string bstrDesiredExt);
    [DispIdAttribute("17")]
public abstract virtual object get_PublishManager();
    [DispIdAttribute("18")]
public abstract virtual VSProjectEvents2 get_Events2();
    [DispIdAttribute("19")]
public abstract virtual AnalyzerReferences get_AnalyzerReferences();
}
[GuidAttribute("146A9209-0D04-4024-9FD6-132143A337E4")]
public interface VSLangProj150.PackageReferences {
    [DispIdAttribute("1")]
public DTE DTE { get; }
    [DispIdAttribute("2")]
public object Parent { get; }
    [DispIdAttribute("3")]
public Project ContainingProject { get; }
    [DispIdAttribute("7")]
public Array InstalledPackages { get; }
    [DispIdAttribute("1")]
public abstract virtual DTE get_DTE();
    [DispIdAttribute("2")]
public abstract virtual object get_Parent();
    [DispIdAttribute("3")]
public abstract virtual Project get_ContainingProject();
    [DispIdAttribute("4")]
public abstract virtual void AddOrUpdate(string bstrName, string bstrVersion, Array pbstrMetadataElements, Array pbstrMetadataValues);
    [DispIdAttribute("5")]
public abstract virtual void Remove(string bstrName);
    [DispIdAttribute("6")]
public abstract virtual bool TryGetReference(string bstrName, Array parrbstrDesiredMetadata, String& pbstrVersion, Array& pbstrMetadataElements, Array& pbstrMetadataValues);
    [DispIdAttribute("7")]
public abstract virtual Array get_InstalledPackages();
}
[GuidAttribute("957F4F7E-035C-4E0E-9DF5-6EB86CB0BCAD")]
public interface VSLangProj150.Reference6 {
    [DispIdAttribute("1")]
public DTE DTE { get; }
    [DispIdAttribute("2")]
public References Collection { get; }
    [DispIdAttribute("3")]
public Project ContainingProject { get; }
    [DispIdAttribute("5")]
public string Name { get; }
    [DispIdAttribute("6")]
public prjReferenceType Type { get; }
    [DispIdAttribute("7")]
public string Identity { get; }
    [DispIdAttribute("8")]
public string Path { get; }
    [DispIdAttribute("9")]
public string Description { get; }
    [DispIdAttribute("10")]
public string Culture { get; }
    [DispIdAttribute("11")]
public int MajorVersion { get; }
    [DispIdAttribute("12")]
public int MinorVersion { get; }
    [DispIdAttribute("13")]
public int RevisionNumber { get; }
    [DispIdAttribute("14")]
public int BuildNumber { get; }
    [DispIdAttribute("15")]
public bool StrongName { get; }
    [DispIdAttribute("16")]
public Project SourceProject { get; }
    [DispIdAttribute("17")]
public bool CopyLocal { get; public set; }
    [DispIdAttribute("19")]
public object ExtenderNames { get; }
    [DispIdAttribute("20")]
public string ExtenderCATID { get; }
    [DispIdAttribute("21")]
public string PublicKeyToken { get; }
    [DispIdAttribute("22")]
public string Version { get; }
    [DispIdAttribute("100")]
public string RuntimeVersion { get; }
    [DispIdAttribute("120")]
public bool SpecificVersion { get; public set; }
    [DispIdAttribute("121")]
public string SubType { get; public set; }
    [DispIdAttribute("122")]
public bool Isolated { get; public set; }
    [DispIdAttribute("123")]
public string Aliases { get; public set; }
    [DispIdAttribute("124")]
public UInt32 RefType { get; }
    [DispIdAttribute("125")]
public bool AutoReferenced { get; }
    [DispIdAttribute("126")]
public bool Resolved { get; }
    [DispIdAttribute("127")]
public bool EmbedInteropTypes { get; public set; }
    [DispIdAttribute("128")]
public Array ExpandedSdkReferences { get; }
    [DispIdAttribute("129")]
public Reference Group { get; }
    [DispIdAttribute("1")]
public abstract virtual DTE get_DTE();
    [DispIdAttribute("2")]
public abstract virtual References get_Collection();
    [DispIdAttribute("3")]
public abstract virtual Project get_ContainingProject();
    [DispIdAttribute("4")]
public abstract virtual void Remove();
    [DispIdAttribute("5")]
public abstract virtual string get_Name();
    [DispIdAttribute("6")]
public abstract virtual prjReferenceType get_Type();
    [DispIdAttribute("7")]
public abstract virtual string get_Identity();
    [DispIdAttribute("8")]
public abstract virtual string get_Path();
    [DispIdAttribute("9")]
public abstract virtual string get_Description();
    [DispIdAttribute("10")]
public abstract virtual string get_Culture();
    [DispIdAttribute("11")]
public abstract virtual int get_MajorVersion();
    [DispIdAttribute("12")]
public abstract virtual int get_MinorVersion();
    [DispIdAttribute("13")]
public abstract virtual int get_RevisionNumber();
    [DispIdAttribute("14")]
public abstract virtual int get_BuildNumber();
    [DispIdAttribute("15")]
public abstract virtual bool get_StrongName();
    [DispIdAttribute("16")]
public abstract virtual Project get_SourceProject();
    [DispIdAttribute("17")]
public abstract virtual bool get_CopyLocal();
    [DispIdAttribute("17")]
public abstract virtual void set_CopyLocal(bool value);
    [DispIdAttribute("18")]
public abstract virtual object get_Extender(string extenderName);
    [DispIdAttribute("19")]
public abstract virtual object get_ExtenderNames();
    [DispIdAttribute("20")]
public abstract virtual string get_ExtenderCATID();
    [DispIdAttribute("21")]
public abstract virtual string get_PublicKeyToken();
    [DispIdAttribute("22")]
public abstract virtual string get_Version();
    [DispIdAttribute("100")]
public abstract virtual string get_RuntimeVersion();
    [DispIdAttribute("120")]
public abstract virtual bool get_SpecificVersion();
    [DispIdAttribute("120")]
public abstract virtual void set_SpecificVersion(bool value);
    [DispIdAttribute("121")]
public abstract virtual string get_SubType();
    [DispIdAttribute("121")]
public abstract virtual void set_SubType(string value);
    [DispIdAttribute("122")]
public abstract virtual bool get_Isolated();
    [DispIdAttribute("122")]
public abstract virtual void set_Isolated(bool value);
    [DispIdAttribute("123")]
public abstract virtual string get_Aliases();
    [DispIdAttribute("123")]
public abstract virtual void set_Aliases(string value);
    [DispIdAttribute("124")]
public abstract virtual UInt32 get_RefType();
    [DispIdAttribute("125")]
public abstract virtual bool get_AutoReferenced();
    [DispIdAttribute("126")]
public abstract virtual bool get_Resolved();
    [DispIdAttribute("127")]
public abstract virtual bool get_EmbedInteropTypes();
    [DispIdAttribute("127")]
public abstract virtual void set_EmbedInteropTypes(bool value);
    [DispIdAttribute("128")]
public abstract virtual Array get_ExpandedSdkReferences();
    [DispIdAttribute("129")]
public abstract virtual Reference get_Group();
    [DispIdAttribute("130")]
public abstract virtual void GetMetadata(Array parrbstrDesiredMetadata, Array& pparrbstrMetadataElements, Array& pparrbstrMetadataValues);
    [DispIdAttribute("131")]
public abstract virtual void AddOrUpdateMetadata(Array parrbstrMetadataElements, Array parrbstrMetadataValues);
}
[GuidAttribute("1C91C1D8-5046-437A-A414-7D1739172F5E")]
public interface VSLangProj150.VSProject4 {
    [DispIdAttribute("1")]
public References References { get; }
    [DispIdAttribute("2")]
public BuildManager BuildManager { get; }
    [DispIdAttribute("3")]
public DTE DTE { get; }
    [DispIdAttribute("4")]
public Project Project { get; }
    [DispIdAttribute("6")]
public ProjectItem WebReferencesFolder { get; }
    [DispIdAttribute("8")]
public string TemplatePath { get; }
    [DispIdAttribute("10")]
public bool WorkOffline { get; public set; }
    [DispIdAttribute("11")]
public Imports Imports { get; }
    [DispIdAttribute("12")]
public VSProjectEvents Events { get; }
    [DispIdAttribute("17")]
public object PublishManager { get; }
    [DispIdAttribute("18")]
public VSProjectEvents2 Events2 { get; }
    [DispIdAttribute("19")]
public AnalyzerReferences AnalyzerReferences { get; }
    [DispIdAttribute("20")]
public PackageReferences PackageReferences { get; }
    [DispIdAttribute("1")]
public abstract virtual References get_References();
    [DispIdAttribute("2")]
public abstract virtual BuildManager get_BuildManager();
    [DispIdAttribute("3")]
public abstract virtual DTE get_DTE();
    [DispIdAttribute("4")]
public abstract virtual Project get_Project();
    [DispIdAttribute("5")]
public abstract virtual ProjectItem CreateWebReferencesFolder();
    [DispIdAttribute("6")]
public abstract virtual ProjectItem get_WebReferencesFolder();
    [DispIdAttribute("7")]
public abstract virtual ProjectItem AddWebReference(string bstrUrl);
    [DispIdAttribute("8")]
public abstract virtual string get_TemplatePath();
    [DispIdAttribute("9")]
public abstract virtual void Refresh();
    [DispIdAttribute("10")]
public abstract virtual bool get_WorkOffline();
    [DispIdAttribute("10")]
public abstract virtual void set_WorkOffline(bool value);
    [DispIdAttribute("11")]
public abstract virtual Imports get_Imports();
    [DispIdAttribute("12")]
public abstract virtual VSProjectEvents get_Events();
    [DispIdAttribute("13")]
public abstract virtual void CopyProject(string bstrDestFolder, string bstrDestUNCPath, prjCopyProjectOption copyProjectOption, string bstrUsername, string bstrPassword);
    [DispIdAttribute("14")]
public abstract virtual void Exec(prjExecCommand command, int bSuppressUI, object varIn, Object& pVarOut);
    [DispIdAttribute("15")]
public abstract virtual void GenerateKeyPairFiles(string strPublicPrivateFile, string strPublicOnlyFile);
    [DispIdAttribute("16")]
public abstract virtual string GetUniqueFilename(object pDispatch, string bstrRoot, string bstrDesiredExt);
    [DispIdAttribute("17")]
public abstract virtual object get_PublishManager();
    [DispIdAttribute("18")]
public abstract virtual VSProjectEvents2 get_Events2();
    [DispIdAttribute("19")]
public abstract virtual AnalyzerReferences get_AnalyzerReferences();
    [DispIdAttribute("20")]
public abstract virtual PackageReferences get_PackageReferences();
}
public enum VSLangProj150.VsProjReferencePropId150 : Enum {
    public int value__;
    public static VsProjReferencePropId150 DISPID_Reference_GetMetadata;
    public static VsProjReferencePropId150 DISPID_Reference_AddOrUpdateMetadata;
}
[GuidAttribute("0B2B0873-6DE1-4045-88DD-B2CBD94E3547")]
[DefaultMemberAttribute("Item")]
[TypeLibTypeAttribute]
public interface VSLangProj157.References3 {
    [DispIdAttribute("1")]
public DTE DTE { get; }
    [DispIdAttribute("2")]
public object Parent { get; }
    [DispIdAttribute("3")]
public Project ContainingProject { get; }
    [DispIdAttribute("4")]
public int Count { get; }
    [DispIdAttribute("1")]
public abstract virtual DTE get_DTE();
    [DispIdAttribute("2")]
public abstract virtual object get_Parent();
    [DispIdAttribute("3")]
public abstract virtual Project get_ContainingProject();
    [DispIdAttribute("4")]
public abstract virtual int get_Count();
    [DispIdAttribute("0")]
public abstract virtual Reference Item(object index);
    [DispIdAttribute("-4")]
[TypeLibFuncAttribute]
public abstract virtual IEnumerator GetEnumerator();
    [DispIdAttribute("5")]
public abstract virtual Reference Find(string bstrIdentity);
    [DispIdAttribute("6")]
public abstract virtual Reference Add(string bstrPath);
    [DispIdAttribute("7")]
public abstract virtual Reference AddActiveX(string bstrTypeLibGuid, int lMajorVer, int lMinorVer, int lLocaleId, string bstrWrapperTool);
    [DispIdAttribute("8")]
public abstract virtual Reference AddProject(Project pProject);
    [DispIdAttribute("9")]
public abstract virtual Reference AddSDK(string wszSDKDisplayName, string wszSDKidentifier);
    [DispIdAttribute("10")]
public abstract virtual void AddFiles(Array parrbstrPaths, Array& pparrReferences);
}
public enum VSLangProj157.VsProjReferencesPropId157 : Enum {
    public int value__;
    public static VsProjReferencesPropId157 DISPID_References_AddFiles;
}
[GuidAttribute("63A74A96-C954-4456-BAB9-7FC6D21DDDEA")]
public interface VSLangProj158.CSharpProjectProperties8 {
    [DispIdAttribute("-2147418112")]
public string __id { get; }
    [DispIdAttribute("10035")]
public object __project { get; }
    [DispIdAttribute("10015")]
public string StartupObject { get; public set; }
    [DispIdAttribute("10016")]
public prjOutputType OutputType { get; public set; }
    [DispIdAttribute("10042")]
public string RootNamespace { get; public set; }
    [DispIdAttribute("10013")]
public string AssemblyName { get; public set; }
    [DispIdAttribute("10044")]
public string AssemblyOriginatorKeyFile { get; public set; }
    [DispIdAttribute("10045")]
public string AssemblyKeyContainerName { get; public set; }
    [DispIdAttribute("10043")]
public prjOriginatorKeyMode AssemblyOriginatorKeyMode { get; public set; }
    [DispIdAttribute("10046")]
public bool DelaySign { get; public set; }
    [DispIdAttribute("10012")]
public string WebServer { get; }
    [DispIdAttribute("10017")]
public string WebServerVersion { get; }
    [DispIdAttribute("10018")]
public string ServerExtensionsVersion { get; }
    [DispIdAttribute("10019")]
public bool LinkRepair { get; public set; }
    [DispIdAttribute("10020")]
public string OfflineURL { get; }
    [DispIdAttribute("10047")]
public string FileSharePath { get; public set; }
    [DispIdAttribute("10048")]
public string ActiveFileSharePath { get; }
    [DispIdAttribute("10049")]
public prjWebAccessMethod WebAccessMethod { get; public set; }
    [DispIdAttribute("10050")]
public prjWebAccessMethod ActiveWebAccessMethod { get; }
    [DispIdAttribute("10021")]
public prjScriptLanguage DefaultClientScript { get; public set; }
    [DispIdAttribute("10022")]
public prjTargetSchema DefaultTargetSchema { get; public set; }
    [DispIdAttribute("10023")]
public prjHTMLPageLayout DefaultHTMLPageLayout { get; public set; }
    [DispIdAttribute("10026")]
public string FileName { get; public set; }
    [DispIdAttribute("10027")]
public string FullPath { get; }
    [DispIdAttribute("10028")]
public string LocalPath { get; }
    [DispIdAttribute("10029")]
public string URL { get; }
    [DispIdAttribute("10033")]
public ProjectConfigurationProperties ActiveConfigurationSettings { get; }
    [DispIdAttribute("10031")]
public object ExtenderNames { get; }
    [DispIdAttribute("10032")]
public string ExtenderCATID { get; }
    [DispIdAttribute("10011")]
public string ApplicationIcon { get; public set; }
    [DispIdAttribute("10051")]
public prjOptionStrict OptionStrict { get; public set; }
    [DispIdAttribute("10056")]
public string ReferencePath { get; public set; }
    [DispIdAttribute("10009")]
public string OutputFileName { get; }
    [DispIdAttribute("10034")]
public string AbsoluteProjectDirectory { get; }
    [DispIdAttribute("10059")]
public prjOptionExplicit OptionExplicit { get; public set; }
    [DispIdAttribute("10060")]
public prjCompare OptionCompare { get; public set; }
    [DispIdAttribute("10067")]
public prjProjectType ProjectType { get; }
    [DispIdAttribute("10068")]
public string DefaultNamespace { get; public set; }
    [DispIdAttribute("10076")]
public string PreBuildEvent { get; public set; }
    [DispIdAttribute("10077")]
public string PostBuildEvent { get; public set; }
    [DispIdAttribute("10078")]
public prjRunPostBuildEvent RunPostBuildEvent { get; public set; }
    [DispIdAttribute("10080")]
public string AspnetVersion { get; }
    [DispIdAttribute("12102")]
public string Title { get; public set; }
    [DispIdAttribute("12103")]
public string Description { get; public set; }
    [DispIdAttribute("12104")]
public string Company { get; public set; }
    [DispIdAttribute("12105")]
public string Product { get; public set; }
    [DispIdAttribute("12106")]
public string Copyright { get; public set; }
    [DispIdAttribute("12107")]
public string Trademark { get; public set; }
    [DispIdAttribute("12108")]
public prjAssemblyType AssemblyType { get; public set; }
    [DispIdAttribute("12109")]
public bool TypeComplianceDiagnostics { get; public set; }
    [DispIdAttribute("12112")]
public string Win32ResourceFile { get; public set; }
    [DispIdAttribute("12115")]
public string AssemblyKeyProviderName { get; public set; }
    [DispIdAttribute("12114")]
public UInt32 AssemblyOriginatorKeyFileType { get; public set; }
    [DispIdAttribute("12116")]
public string AssemblyVersion { get; public set; }
    [DispIdAttribute("12117")]
public string AssemblyFileVersion { get; public set; }
    [DispIdAttribute("12119")]
public bool GenerateManifests { get; public set; }
    [DispIdAttribute("12120")]
public bool EnableSecurityDebugging { get; public set; }
    [DispIdAttribute("12118")]
public string DebugSecurityZoneURL { get; public set; }
    [DispIdAttribute("12122")]
public object Publish { get; }
    [DispIdAttribute("12123")]
public bool ComVisible { get; public set; }
    [DispIdAttribute("12124")]
public string AssemblyGuid { get; public set; }
    [DispIdAttribute("12125")]
public string NeutralResourcesLanguage { get; public set; }
    [DispIdAttribute("12126")]
public bool SignAssembly { get; public set; }
    [DispIdAttribute("12132")]
public bool SignManifests { get; public set; }
    [DispIdAttribute("12127")]
public string TargetZone { get; public set; }
    [DispIdAttribute("12128")]
public string ExcludedPermissions { get; public set; }
    [DispIdAttribute("12129")]
public string ManifestCertificateThumbprint { get; public set; }
    [DispIdAttribute("12130")]
public string ManifestKeyFile { get; public set; }
    [DispIdAttribute("12131")]
public string ManifestTimestampUrl { get; public set; }
    [DispIdAttribute("12200")]
public UInt32 TargetFramework { get; public set; }
    [DispIdAttribute("12201")]
public string ApplicationManifest { get; public set; }
    [DispIdAttribute("12202")]
public string TargetFrameworkMoniker { get; public set; }
    [DispIdAttribute("17000")]
[ComAliasNameAttribute("VSLangProj110.DWORD")]
public UInt32 OutputTypeEx { get; public set; }
    [DispIdAttribute("17100")]
public bool AutoGenerateBindingRedirects { get; public set; }
    [DispIdAttribute("-2147418112")]
public abstract virtual string get___id();
    [DispIdAttribute("10035")]
public abstract virtual object get___project();
    [DispIdAttribute("10015")]
public abstract virtual string get_StartupObject();
    [DispIdAttribute("10015")]
public abstract virtual void set_StartupObject(string value);
    [DispIdAttribute("10016")]
public abstract virtual prjOutputType get_OutputType();
    [DispIdAttribute("10016")]
public abstract virtual void set_OutputType(prjOutputType value);
    [DispIdAttribute("10042")]
public abstract virtual string get_RootNamespace();
    [DispIdAttribute("10042")]
public abstract virtual void set_RootNamespace(string value);
    [DispIdAttribute("10013")]
public abstract virtual string get_AssemblyName();
    [DispIdAttribute("10013")]
public abstract virtual void set_AssemblyName(string value);
    [DispIdAttribute("10044")]
public abstract virtual string get_AssemblyOriginatorKeyFile();
    [DispIdAttribute("10044")]
public abstract virtual void set_AssemblyOriginatorKeyFile(string value);
    [DispIdAttribute("10045")]
public abstract virtual string get_AssemblyKeyContainerName();
    [DispIdAttribute("10045")]
public abstract virtual void set_AssemblyKeyContainerName(string value);
    [DispIdAttribute("10043")]
public abstract virtual prjOriginatorKeyMode get_AssemblyOriginatorKeyMode();
    [DispIdAttribute("10043")]
public abstract virtual void set_AssemblyOriginatorKeyMode(prjOriginatorKeyMode value);
    [DispIdAttribute("10046")]
public abstract virtual bool get_DelaySign();
    [DispIdAttribute("10046")]
public abstract virtual void set_DelaySign(bool value);
    [DispIdAttribute("10012")]
public abstract virtual string get_WebServer();
    [DispIdAttribute("10017")]
public abstract virtual string get_WebServerVersion();
    [DispIdAttribute("10018")]
public abstract virtual string get_ServerExtensionsVersion();
    [DispIdAttribute("10019")]
public abstract virtual bool get_LinkRepair();
    [DispIdAttribute("10019")]
public abstract virtual void set_LinkRepair(bool value);
    [DispIdAttribute("10020")]
public abstract virtual string get_OfflineURL();
    [DispIdAttribute("10047")]
public abstract virtual string get_FileSharePath();
    [DispIdAttribute("10047")]
public abstract virtual void set_FileSharePath(string value);
    [DispIdAttribute("10048")]
public abstract virtual string get_ActiveFileSharePath();
    [DispIdAttribute("10049")]
public abstract virtual prjWebAccessMethod get_WebAccessMethod();
    [DispIdAttribute("10049")]
public abstract virtual void set_WebAccessMethod(prjWebAccessMethod value);
    [DispIdAttribute("10050")]
public abstract virtual prjWebAccessMethod get_ActiveWebAccessMethod();
    [DispIdAttribute("10021")]
public abstract virtual prjScriptLanguage get_DefaultClientScript();
    [DispIdAttribute("10021")]
public abstract virtual void set_DefaultClientScript(prjScriptLanguage value);
    [DispIdAttribute("10022")]
public abstract virtual prjTargetSchema get_DefaultTargetSchema();
    [DispIdAttribute("10022")]
public abstract virtual void set_DefaultTargetSchema(prjTargetSchema value);
    [DispIdAttribute("10023")]
public abstract virtual prjHTMLPageLayout get_DefaultHTMLPageLayout();
    [DispIdAttribute("10023")]
public abstract virtual void set_DefaultHTMLPageLayout(prjHTMLPageLayout value);
    [DispIdAttribute("10026")]
public abstract virtual string get_FileName();
    [DispIdAttribute("10026")]
public abstract virtual void set_FileName(string value);
    [DispIdAttribute("10027")]
public abstract virtual string get_FullPath();
    [DispIdAttribute("10028")]
public abstract virtual string get_LocalPath();
    [DispIdAttribute("10029")]
public abstract virtual string get_URL();
    [DispIdAttribute("10033")]
public abstract virtual ProjectConfigurationProperties get_ActiveConfigurationSettings();
    [DispIdAttribute("10030")]
public abstract virtual object get_Extender(string extenderName);
    [DispIdAttribute("10031")]
public abstract virtual object get_ExtenderNames();
    [DispIdAttribute("10032")]
public abstract virtual string get_ExtenderCATID();
    [DispIdAttribute("10011")]
public abstract virtual string get_ApplicationIcon();
    [DispIdAttribute("10011")]
public abstract virtual void set_ApplicationIcon(string value);
    [DispIdAttribute("10051")]
public abstract virtual prjOptionStrict get_OptionStrict();
    [DispIdAttribute("10051")]
public abstract virtual void set_OptionStrict(prjOptionStrict value);
    [DispIdAttribute("10056")]
public abstract virtual string get_ReferencePath();
    [DispIdAttribute("10056")]
public abstract virtual void set_ReferencePath(string value);
    [DispIdAttribute("10009")]
public abstract virtual string get_OutputFileName();
    [DispIdAttribute("10034")]
public abstract virtual string get_AbsoluteProjectDirectory();
    [DispIdAttribute("10059")]
public abstract virtual prjOptionExplicit get_OptionExplicit();
    [DispIdAttribute("10059")]
public abstract virtual void set_OptionExplicit(prjOptionExplicit value);
    [DispIdAttribute("10060")]
public abstract virtual prjCompare get_OptionCompare();
    [DispIdAttribute("10060")]
public abstract virtual void set_OptionCompare(prjCompare value);
    [DispIdAttribute("10067")]
public abstract virtual prjProjectType get_ProjectType();
    [DispIdAttribute("10068")]
public abstract virtual string get_DefaultNamespace();
    [DispIdAttribute("10068")]
public abstract virtual void set_DefaultNamespace(string value);
    [DispIdAttribute("10076")]
public abstract virtual string get_PreBuildEvent();
    [DispIdAttribute("10076")]
public abstract virtual void set_PreBuildEvent(string value);
    [DispIdAttribute("10077")]
public abstract virtual string get_PostBuildEvent();
    [DispIdAttribute("10077")]
public abstract virtual void set_PostBuildEvent(string value);
    [DispIdAttribute("10078")]
public abstract virtual prjRunPostBuildEvent get_RunPostBuildEvent();
    [DispIdAttribute("10078")]
public abstract virtual void set_RunPostBuildEvent(prjRunPostBuildEvent value);
    [DispIdAttribute("10080")]
public abstract virtual string get_AspnetVersion();
    [DispIdAttribute("12102")]
public abstract virtual string get_Title();
    [DispIdAttribute("12102")]
public abstract virtual void set_Title(string value);
    [DispIdAttribute("12103")]
public abstract virtual string get_Description();
    [DispIdAttribute("12103")]
public abstract virtual void set_Description(string value);
    [DispIdAttribute("12104")]
public abstract virtual string get_Company();
    [DispIdAttribute("12104")]
public abstract virtual void set_Company(string value);
    [DispIdAttribute("12105")]
public abstract virtual string get_Product();
    [DispIdAttribute("12105")]
public abstract virtual void set_Product(string value);
    [DispIdAttribute("12106")]
public abstract virtual string get_Copyright();
    [DispIdAttribute("12106")]
public abstract virtual void set_Copyright(string value);
    [DispIdAttribute("12107")]
public abstract virtual string get_Trademark();
    [DispIdAttribute("12107")]
public abstract virtual void set_Trademark(string value);
    [DispIdAttribute("12108")]
public abstract virtual prjAssemblyType get_AssemblyType();
    [DispIdAttribute("12108")]
public abstract virtual void set_AssemblyType(prjAssemblyType value);
    [DispIdAttribute("12109")]
public abstract virtual bool get_TypeComplianceDiagnostics();
    [DispIdAttribute("12109")]
public abstract virtual void set_TypeComplianceDiagnostics(bool value);
    [DispIdAttribute("12112")]
public abstract virtual string get_Win32ResourceFile();
    [DispIdAttribute("12112")]
public abstract virtual void set_Win32ResourceFile(string value);
    [DispIdAttribute("12115")]
public abstract virtual string get_AssemblyKeyProviderName();
    [DispIdAttribute("12115")]
public abstract virtual void set_AssemblyKeyProviderName(string value);
    [DispIdAttribute("12114")]
public abstract virtual UInt32 get_AssemblyOriginatorKeyFileType();
    [DispIdAttribute("12114")]
public abstract virtual void set_AssemblyOriginatorKeyFileType(UInt32 value);
    [DispIdAttribute("12116")]
public abstract virtual string get_AssemblyVersion();
    [DispIdAttribute("12116")]
public abstract virtual void set_AssemblyVersion(string value);
    [DispIdAttribute("12117")]
public abstract virtual string get_AssemblyFileVersion();
    [DispIdAttribute("12117")]
public abstract virtual void set_AssemblyFileVersion(string value);
    [DispIdAttribute("12119")]
public abstract virtual bool get_GenerateManifests();
    [DispIdAttribute("12119")]
public abstract virtual void set_GenerateManifests(bool value);
    [DispIdAttribute("12120")]
public abstract virtual bool get_EnableSecurityDebugging();
    [DispIdAttribute("12120")]
public abstract virtual void set_EnableSecurityDebugging(bool value);
    [DispIdAttribute("12118")]
public abstract virtual string get_DebugSecurityZoneURL();
    [DispIdAttribute("12118")]
public abstract virtual void set_DebugSecurityZoneURL(string value);
    [DispIdAttribute("12122")]
public abstract virtual object get_Publish();
    [DispIdAttribute("12123")]
public abstract virtual bool get_ComVisible();
    [DispIdAttribute("12123")]
public abstract virtual void set_ComVisible(bool value);
    [DispIdAttribute("12124")]
public abstract virtual string get_AssemblyGuid();
    [DispIdAttribute("12124")]
public abstract virtual void set_AssemblyGuid(string value);
    [DispIdAttribute("12125")]
public abstract virtual string get_NeutralResourcesLanguage();
    [DispIdAttribute("12125")]
public abstract virtual void set_NeutralResourcesLanguage(string value);
    [DispIdAttribute("12126")]
public abstract virtual bool get_SignAssembly();
    [DispIdAttribute("12126")]
public abstract virtual void set_SignAssembly(bool value);
    [DispIdAttribute("12132")]
public abstract virtual bool get_SignManifests();
    [DispIdAttribute("12132")]
public abstract virtual void set_SignManifests(bool value);
    [DispIdAttribute("12127")]
public abstract virtual string get_TargetZone();
    [DispIdAttribute("12127")]
public abstract virtual void set_TargetZone(string value);
    [DispIdAttribute("12128")]
public abstract virtual string get_ExcludedPermissions();
    [DispIdAttribute("12128")]
public abstract virtual void set_ExcludedPermissions(string value);
    [DispIdAttribute("12129")]
public abstract virtual string get_ManifestCertificateThumbprint();
    [DispIdAttribute("12129")]
public abstract virtual void set_ManifestCertificateThumbprint(string value);
    [DispIdAttribute("12130")]
public abstract virtual string get_ManifestKeyFile();
    [DispIdAttribute("12130")]
public abstract virtual void set_ManifestKeyFile(string value);
    [DispIdAttribute("12131")]
public abstract virtual string get_ManifestTimestampUrl();
    [DispIdAttribute("12131")]
public abstract virtual void set_ManifestTimestampUrl(string value);
    [DispIdAttribute("12200")]
public abstract virtual UInt32 get_TargetFramework();
    [DispIdAttribute("12200")]
public abstract virtual void set_TargetFramework(UInt32 value);
    [DispIdAttribute("12201")]
public abstract virtual string get_ApplicationManifest();
    [DispIdAttribute("12201")]
public abstract virtual void set_ApplicationManifest(string value);
    [DispIdAttribute("12202")]
public abstract virtual string get_TargetFrameworkMoniker();
    [DispIdAttribute("12202")]
public abstract virtual void set_TargetFrameworkMoniker(string value);
    [DispIdAttribute("17000")]
public abstract virtual UInt32 get_OutputTypeEx();
    [DispIdAttribute("17000")]
public abstract virtual void set_OutputTypeEx(UInt32 value);
    [DispIdAttribute("17100")]
public abstract virtual bool get_AutoGenerateBindingRedirects();
    [DispIdAttribute("17100")]
public abstract virtual void set_AutoGenerateBindingRedirects(bool value);
}
[GuidAttribute("D35819D7-AC36-4E12-8D70-0212BB170CA6")]
public interface VSLangProj158.VBProjectProperties8 {
    [DispIdAttribute("-2147418112")]
public string __id { get; }
    [DispIdAttribute("10035")]
public object __project { get; }
    [DispIdAttribute("10015")]
public string StartupObject { get; public set; }
    [DispIdAttribute("10016")]
public prjOutputType OutputType { get; public set; }
    [DispIdAttribute("10042")]
public string RootNamespace { get; public set; }
    [DispIdAttribute("10013")]
public string AssemblyName { get; public set; }
    [DispIdAttribute("10044")]
public string AssemblyOriginatorKeyFile { get; public set; }
    [DispIdAttribute("10045")]
public string AssemblyKeyContainerName { get; public set; }
    [DispIdAttribute("10043")]
public prjOriginatorKeyMode AssemblyOriginatorKeyMode { get; public set; }
    [DispIdAttribute("10046")]
public bool DelaySign { get; public set; }
    [DispIdAttribute("10012")]
public string WebServer { get; }
    [DispIdAttribute("10017")]
public string WebServerVersion { get; }
    [DispIdAttribute("10018")]
public string ServerExtensionsVersion { get; }
    [DispIdAttribute("10019")]
public bool LinkRepair { get; public set; }
    [DispIdAttribute("10020")]
public string OfflineURL { get; }
    [DispIdAttribute("10047")]
public string FileSharePath { get; public set; }
    [DispIdAttribute("10048")]
public string ActiveFileSharePath { get; }
    [DispIdAttribute("10049")]
public prjWebAccessMethod WebAccessMethod { get; public set; }
    [DispIdAttribute("10050")]
public prjWebAccessMethod ActiveWebAccessMethod { get; }
    [DispIdAttribute("10021")]
public prjScriptLanguage DefaultClientScript { get; public set; }
    [DispIdAttribute("10022")]
public prjTargetSchema DefaultTargetSchema { get; public set; }
    [DispIdAttribute("10023")]
public prjHTMLPageLayout DefaultHTMLPageLayout { get; public set; }
    [DispIdAttribute("10026")]
public string FileName { get; public set; }
    [DispIdAttribute("10027")]
public string FullPath { get; }
    [DispIdAttribute("10028")]
public string LocalPath { get; }
    [DispIdAttribute("10029")]
public string URL { get; }
    [DispIdAttribute("10033")]
public ProjectConfigurationProperties ActiveConfigurationSettings { get; }
    [DispIdAttribute("10031")]
public object ExtenderNames { get; }
    [DispIdAttribute("10032")]
public string ExtenderCATID { get; }
    [DispIdAttribute("10011")]
public string ApplicationIcon { get; public set; }
    [DispIdAttribute("10051")]
public prjOptionStrict OptionStrict { get; public set; }
    [DispIdAttribute("10056")]
public string ReferencePath { get; public set; }
    [DispIdAttribute("10009")]
public string OutputFileName { get; }
    [DispIdAttribute("10034")]
public string AbsoluteProjectDirectory { get; }
    [DispIdAttribute("10059")]
public prjOptionExplicit OptionExplicit { get; public set; }
    [DispIdAttribute("10060")]
public prjCompare OptionCompare { get; public set; }
    [DispIdAttribute("10067")]
public prjProjectType ProjectType { get; }
    [DispIdAttribute("10068")]
public string DefaultNamespace { get; public set; }
    [DispIdAttribute("10076")]
public string PreBuildEvent { get; public set; }
    [DispIdAttribute("10077")]
public string PostBuildEvent { get; public set; }
    [DispIdAttribute("10078")]
public prjRunPostBuildEvent RunPostBuildEvent { get; public set; }
    [DispIdAttribute("10080")]
public string AspnetVersion { get; }
    [DispIdAttribute("12102")]
public string Title { get; public set; }
    [DispIdAttribute("12103")]
public string Description { get; public set; }
    [DispIdAttribute("12104")]
public string Company { get; public set; }
    [DispIdAttribute("12105")]
public string Product { get; public set; }
    [DispIdAttribute("12106")]
public string Copyright { get; public set; }
    [DispIdAttribute("12107")]
public string Trademark { get; public set; }
    [DispIdAttribute("12108")]
public prjAssemblyType AssemblyType { get; public set; }
    [DispIdAttribute("12109")]
public bool TypeComplianceDiagnostics { get; public set; }
    [DispIdAttribute("12112")]
public string Win32ResourceFile { get; public set; }
    [DispIdAttribute("12115")]
public string AssemblyKeyProviderName { get; public set; }
    [DispIdAttribute("12114")]
public UInt32 AssemblyOriginatorKeyFileType { get; public set; }
    [DispIdAttribute("12116")]
public string AssemblyVersion { get; public set; }
    [DispIdAttribute("12117")]
public string AssemblyFileVersion { get; public set; }
    [DispIdAttribute("12119")]
public bool GenerateManifests { get; public set; }
    [DispIdAttribute("12120")]
public bool EnableSecurityDebugging { get; public set; }
    [DispIdAttribute("12118")]
public string DebugSecurityZoneURL { get; public set; }
    [DispIdAttribute("12122")]
public object Publish { get; }
    [DispIdAttribute("12123")]
public bool ComVisible { get; public set; }
    [DispIdAttribute("12124")]
public string AssemblyGuid { get; public set; }
    [DispIdAttribute("12125")]
public string NeutralResourcesLanguage { get; public set; }
    [DispIdAttribute("12126")]
public bool SignAssembly { get; public set; }
    [DispIdAttribute("12132")]
public bool SignManifests { get; public set; }
    [DispIdAttribute("12127")]
public string TargetZone { get; public set; }
    [DispIdAttribute("12128")]
public string ExcludedPermissions { get; public set; }
    [DispIdAttribute("12129")]
public string ManifestCertificateThumbprint { get; public set; }
    [DispIdAttribute("12130")]
public string ManifestKeyFile { get; public set; }
    [DispIdAttribute("12131")]
public string ManifestTimestampUrl { get; public set; }
    [DispIdAttribute("14101")]
public object MyApplication { get; }
    [DispIdAttribute("14102")]
public string MyType { get; public set; }
    [DispIdAttribute("12200")]
public UInt32 TargetFramework { get; public set; }
    [DispIdAttribute("12201")]
public string ApplicationManifest { get; public set; }
    [DispIdAttribute("15101")]
public prjOptionInfer OptionInfer { get; public set; }
    [DispIdAttribute("12202")]
public string TargetFrameworkMoniker { get; public set; }
    [DispIdAttribute("16101")]
public string LanguageVersion { get; public set; }
    [ComAliasNameAttribute("VSLangProj110.DWORD")]
[DispIdAttribute("17000")]
public UInt32 OutputTypeEx { get; public set; }
    [DispIdAttribute("17100")]
public bool AutoGenerateBindingRedirects { get; public set; }
    [DispIdAttribute("-2147418112")]
public abstract virtual string get___id();
    [DispIdAttribute("10035")]
public abstract virtual object get___project();
    [DispIdAttribute("10015")]
public abstract virtual string get_StartupObject();
    [DispIdAttribute("10015")]
public abstract virtual void set_StartupObject(string value);
    [DispIdAttribute("10016")]
public abstract virtual prjOutputType get_OutputType();
    [DispIdAttribute("10016")]
public abstract virtual void set_OutputType(prjOutputType value);
    [DispIdAttribute("10042")]
public abstract virtual string get_RootNamespace();
    [DispIdAttribute("10042")]
public abstract virtual void set_RootNamespace(string value);
    [DispIdAttribute("10013")]
public abstract virtual string get_AssemblyName();
    [DispIdAttribute("10013")]
public abstract virtual void set_AssemblyName(string value);
    [DispIdAttribute("10044")]
public abstract virtual string get_AssemblyOriginatorKeyFile();
    [DispIdAttribute("10044")]
public abstract virtual void set_AssemblyOriginatorKeyFile(string value);
    [DispIdAttribute("10045")]
public abstract virtual string get_AssemblyKeyContainerName();
    [DispIdAttribute("10045")]
public abstract virtual void set_AssemblyKeyContainerName(string value);
    [DispIdAttribute("10043")]
public abstract virtual prjOriginatorKeyMode get_AssemblyOriginatorKeyMode();
    [DispIdAttribute("10043")]
public abstract virtual void set_AssemblyOriginatorKeyMode(prjOriginatorKeyMode value);
    [DispIdAttribute("10046")]
public abstract virtual bool get_DelaySign();
    [DispIdAttribute("10046")]
public abstract virtual void set_DelaySign(bool value);
    [DispIdAttribute("10012")]
public abstract virtual string get_WebServer();
    [DispIdAttribute("10017")]
public abstract virtual string get_WebServerVersion();
    [DispIdAttribute("10018")]
public abstract virtual string get_ServerExtensionsVersion();
    [DispIdAttribute("10019")]
public abstract virtual bool get_LinkRepair();
    [DispIdAttribute("10019")]
public abstract virtual void set_LinkRepair(bool value);
    [DispIdAttribute("10020")]
public abstract virtual string get_OfflineURL();
    [DispIdAttribute("10047")]
public abstract virtual string get_FileSharePath();
    [DispIdAttribute("10047")]
public abstract virtual void set_FileSharePath(string value);
    [DispIdAttribute("10048")]
public abstract virtual string get_ActiveFileSharePath();
    [DispIdAttribute("10049")]
public abstract virtual prjWebAccessMethod get_WebAccessMethod();
    [DispIdAttribute("10049")]
public abstract virtual void set_WebAccessMethod(prjWebAccessMethod value);
    [DispIdAttribute("10050")]
public abstract virtual prjWebAccessMethod get_ActiveWebAccessMethod();
    [DispIdAttribute("10021")]
public abstract virtual prjScriptLanguage get_DefaultClientScript();
    [DispIdAttribute("10021")]
public abstract virtual void set_DefaultClientScript(prjScriptLanguage value);
    [DispIdAttribute("10022")]
public abstract virtual prjTargetSchema get_DefaultTargetSchema();
    [DispIdAttribute("10022")]
public abstract virtual void set_DefaultTargetSchema(prjTargetSchema value);
    [DispIdAttribute("10023")]
public abstract virtual prjHTMLPageLayout get_DefaultHTMLPageLayout();
    [DispIdAttribute("10023")]
public abstract virtual void set_DefaultHTMLPageLayout(prjHTMLPageLayout value);
    [DispIdAttribute("10026")]
public abstract virtual string get_FileName();
    [DispIdAttribute("10026")]
public abstract virtual void set_FileName(string value);
    [DispIdAttribute("10027")]
public abstract virtual string get_FullPath();
    [DispIdAttribute("10028")]
public abstract virtual string get_LocalPath();
    [DispIdAttribute("10029")]
public abstract virtual string get_URL();
    [DispIdAttribute("10033")]
public abstract virtual ProjectConfigurationProperties get_ActiveConfigurationSettings();
    [DispIdAttribute("10030")]
public abstract virtual object get_Extender(string extenderName);
    [DispIdAttribute("10031")]
public abstract virtual object get_ExtenderNames();
    [DispIdAttribute("10032")]
public abstract virtual string get_ExtenderCATID();
    [DispIdAttribute("10011")]
public abstract virtual string get_ApplicationIcon();
    [DispIdAttribute("10011")]
public abstract virtual void set_ApplicationIcon(string value);
    [DispIdAttribute("10051")]
public abstract virtual prjOptionStrict get_OptionStrict();
    [DispIdAttribute("10051")]
public abstract virtual void set_OptionStrict(prjOptionStrict value);
    [DispIdAttribute("10056")]
public abstract virtual string get_ReferencePath();
    [DispIdAttribute("10056")]
public abstract virtual void set_ReferencePath(string value);
    [DispIdAttribute("10009")]
public abstract virtual string get_OutputFileName();
    [DispIdAttribute("10034")]
public abstract virtual string get_AbsoluteProjectDirectory();
    [DispIdAttribute("10059")]
public abstract virtual prjOptionExplicit get_OptionExplicit();
    [DispIdAttribute("10059")]
public abstract virtual void set_OptionExplicit(prjOptionExplicit value);
    [DispIdAttribute("10060")]
public abstract virtual prjCompare get_OptionCompare();
    [DispIdAttribute("10060")]
public abstract virtual void set_OptionCompare(prjCompare value);
    [DispIdAttribute("10067")]
public abstract virtual prjProjectType get_ProjectType();
    [DispIdAttribute("10068")]
public abstract virtual string get_DefaultNamespace();
    [DispIdAttribute("10068")]
public abstract virtual void set_DefaultNamespace(string value);
    [DispIdAttribute("10076")]
public abstract virtual string get_PreBuildEvent();
    [DispIdAttribute("10076")]
public abstract virtual void set_PreBuildEvent(string value);
    [DispIdAttribute("10077")]
public abstract virtual string get_PostBuildEvent();
    [DispIdAttribute("10077")]
public abstract virtual void set_PostBuildEvent(string value);
    [DispIdAttribute("10078")]
public abstract virtual prjRunPostBuildEvent get_RunPostBuildEvent();
    [DispIdAttribute("10078")]
public abstract virtual void set_RunPostBuildEvent(prjRunPostBuildEvent value);
    [DispIdAttribute("10080")]
public abstract virtual string get_AspnetVersion();
    [DispIdAttribute("12102")]
public abstract virtual string get_Title();
    [DispIdAttribute("12102")]
public abstract virtual void set_Title(string value);
    [DispIdAttribute("12103")]
public abstract virtual string get_Description();
    [DispIdAttribute("12103")]
public abstract virtual void set_Description(string value);
    [DispIdAttribute("12104")]
public abstract virtual string get_Company();
    [DispIdAttribute("12104")]
public abstract virtual void set_Company(string value);
    [DispIdAttribute("12105")]
public abstract virtual string get_Product();
    [DispIdAttribute("12105")]
public abstract virtual void set_Product(string value);
    [DispIdAttribute("12106")]
public abstract virtual string get_Copyright();
    [DispIdAttribute("12106")]
public abstract virtual void set_Copyright(string value);
    [DispIdAttribute("12107")]
public abstract virtual string get_Trademark();
    [DispIdAttribute("12107")]
public abstract virtual void set_Trademark(string value);
    [DispIdAttribute("12108")]
public abstract virtual prjAssemblyType get_AssemblyType();
    [DispIdAttribute("12108")]
public abstract virtual void set_AssemblyType(prjAssemblyType value);
    [DispIdAttribute("12109")]
public abstract virtual bool get_TypeComplianceDiagnostics();
    [DispIdAttribute("12109")]
public abstract virtual void set_TypeComplianceDiagnostics(bool value);
    [DispIdAttribute("12112")]
public abstract virtual string get_Win32ResourceFile();
    [DispIdAttribute("12112")]
public abstract virtual void set_Win32ResourceFile(string value);
    [DispIdAttribute("12115")]
public abstract virtual string get_AssemblyKeyProviderName();
    [DispIdAttribute("12115")]
public abstract virtual void set_AssemblyKeyProviderName(string value);
    [DispIdAttribute("12114")]
public abstract virtual UInt32 get_AssemblyOriginatorKeyFileType();
    [DispIdAttribute("12114")]
public abstract virtual void set_AssemblyOriginatorKeyFileType(UInt32 value);
    [DispIdAttribute("12116")]
public abstract virtual string get_AssemblyVersion();
    [DispIdAttribute("12116")]
public abstract virtual void set_AssemblyVersion(string value);
    [DispIdAttribute("12117")]
public abstract virtual string get_AssemblyFileVersion();
    [DispIdAttribute("12117")]
public abstract virtual void set_AssemblyFileVersion(string value);
    [DispIdAttribute("12119")]
public abstract virtual bool get_GenerateManifests();
    [DispIdAttribute("12119")]
public abstract virtual void set_GenerateManifests(bool value);
    [DispIdAttribute("12120")]
public abstract virtual bool get_EnableSecurityDebugging();
    [DispIdAttribute("12120")]
public abstract virtual void set_EnableSecurityDebugging(bool value);
    [DispIdAttribute("12118")]
public abstract virtual string get_DebugSecurityZoneURL();
    [DispIdAttribute("12118")]
public abstract virtual void set_DebugSecurityZoneURL(string value);
    [DispIdAttribute("12122")]
public abstract virtual object get_Publish();
    [DispIdAttribute("12123")]
public abstract virtual bool get_ComVisible();
    [DispIdAttribute("12123")]
public abstract virtual void set_ComVisible(bool value);
    [DispIdAttribute("12124")]
public abstract virtual string get_AssemblyGuid();
    [DispIdAttribute("12124")]
public abstract virtual void set_AssemblyGuid(string value);
    [DispIdAttribute("12125")]
public abstract virtual string get_NeutralResourcesLanguage();
    [DispIdAttribute("12125")]
public abstract virtual void set_NeutralResourcesLanguage(string value);
    [DispIdAttribute("12126")]
public abstract virtual bool get_SignAssembly();
    [DispIdAttribute("12126")]
public abstract virtual void set_SignAssembly(bool value);
    [DispIdAttribute("12132")]
public abstract virtual bool get_SignManifests();
    [DispIdAttribute("12132")]
public abstract virtual void set_SignManifests(bool value);
    [DispIdAttribute("12127")]
public abstract virtual string get_TargetZone();
    [DispIdAttribute("12127")]
public abstract virtual void set_TargetZone(string value);
    [DispIdAttribute("12128")]
public abstract virtual string get_ExcludedPermissions();
    [DispIdAttribute("12128")]
public abstract virtual void set_ExcludedPermissions(string value);
    [DispIdAttribute("12129")]
public abstract virtual string get_ManifestCertificateThumbprint();
    [DispIdAttribute("12129")]
public abstract virtual void set_ManifestCertificateThumbprint(string value);
    [DispIdAttribute("12130")]
public abstract virtual string get_ManifestKeyFile();
    [DispIdAttribute("12130")]
public abstract virtual void set_ManifestKeyFile(string value);
    [DispIdAttribute("12131")]
public abstract virtual string get_ManifestTimestampUrl();
    [DispIdAttribute("12131")]
public abstract virtual void set_ManifestTimestampUrl(string value);
    [DispIdAttribute("14101")]
public abstract virtual object get_MyApplication();
    [DispIdAttribute("14102")]
public abstract virtual string get_MyType();
    [DispIdAttribute("14102")]
public abstract virtual void set_MyType(string value);
    [DispIdAttribute("12200")]
public abstract virtual UInt32 get_TargetFramework();
    [DispIdAttribute("12200")]
public abstract virtual void set_TargetFramework(UInt32 value);
    [DispIdAttribute("12201")]
public abstract virtual string get_ApplicationManifest();
    [DispIdAttribute("12201")]
public abstract virtual void set_ApplicationManifest(string value);
    [DispIdAttribute("15101")]
public abstract virtual prjOptionInfer get_OptionInfer();
    [DispIdAttribute("15101")]
public abstract virtual void set_OptionInfer(prjOptionInfer value);
    [DispIdAttribute("12202")]
public abstract virtual string get_TargetFrameworkMoniker();
    [DispIdAttribute("12202")]
public abstract virtual void set_TargetFrameworkMoniker(string value);
    [DispIdAttribute("16101")]
public abstract virtual string get_LanguageVersion();
    [DispIdAttribute("16101")]
public abstract virtual void set_LanguageVersion(string value);
    [DispIdAttribute("17000")]
public abstract virtual UInt32 get_OutputTypeEx();
    [DispIdAttribute("17000")]
public abstract virtual void set_OutputTypeEx(UInt32 value);
    [DispIdAttribute("17100")]
public abstract virtual bool get_AutoGenerateBindingRedirects();
    [DispIdAttribute("17100")]
public abstract virtual void set_AutoGenerateBindingRedirects(bool value);
}
public enum VSLangProj158.VsProjPropId158 : Enum {
    public int value__;
    public static VsProjPropId158 VBPROJPROPID_AutoGenerateBindingRedirects;
}
[GuidAttribute("584258E0-B43E-40D7-B74C-A6A0A9A6468A")]
public enum VSLangProj165.AuthenticationMode : Enum {
    public int value__;
    public static AuthenticationMode AuthenticationMode_None;
    public static AuthenticationMode AuthenticationMode_Windows;
    public static AuthenticationMode AuthenticationMode_Universal;
}
[GuidAttribute("7FF6C112-6BC3-4B3E-93E5-029443EFCF85")]
public interface VSLangProj165.CSharpProjectConfigurationProperties7 {
    [DispIdAttribute("-2147418112")]
public string __id { get; }
    [DispIdAttribute("10001")]
public bool DebugSymbols { get; public set; }
    [DispIdAttribute("10036")]
public bool DefineDebug { get; public set; }
    [DispIdAttribute("10037")]
public bool DefineTrace { get; public set; }
    [DispIdAttribute("10004")]
public string OutputPath { get; public set; }
    [DispIdAttribute("10010")]
public string IntermediatePath { get; public set; }
    [DispIdAttribute("10005")]
public string DefineConstants { get; public set; }
    [DispIdAttribute("10054")]
public bool RemoveIntegerChecks { get; public set; }
    [DispIdAttribute("10055")]
public UInt32 BaseAddress { get; public set; }
    [DispIdAttribute("10061")]
public bool AllowUnsafeBlocks { get; public set; }
    [DispIdAttribute("10062")]
public bool CheckForOverflowUnderflow { get; public set; }
    [DispIdAttribute("10063")]
public string DocumentationFile { get; public set; }
    [DispIdAttribute("10064")]
public bool Optimize { get; public set; }
    [DispIdAttribute("10065")]
public bool IncrementalBuild { get; public set; }
    [DispIdAttribute("10006")]
public string StartProgram { get; public set; }
    [DispIdAttribute("10007")]
public string StartWorkingDirectory { get; public set; }
    [DispIdAttribute("10008")]
public string StartURL { get; public set; }
    [DispIdAttribute("10038")]
public string StartPage { get; public set; }
    [DispIdAttribute("10002")]
public string StartArguments { get; public set; }
    [DispIdAttribute("10039")]
public bool StartWithIE { get; public set; }
    [DispIdAttribute("10040")]
public bool EnableASPDebugging { get; public set; }
    [DispIdAttribute("10041")]
public bool EnableASPXDebugging { get; public set; }
    [DispIdAttribute("10057")]
public bool EnableUnmanagedDebugging { get; public set; }
    [DispIdAttribute("10003")]
public prjStartAction StartAction { get; public set; }
    [DispIdAttribute("10031")]
public object ExtenderNames { get; }
    [DispIdAttribute("10032")]
public string ExtenderCATID { get; }
    [DispIdAttribute("10052")]
public prjWarningLevel WarningLevel { get; public set; }
    [DispIdAttribute("10053")]
public bool TreatWarningsAsErrors { get; public set; }
    [DispIdAttribute("10058")]
public bool EnableSQLServerDebugging { get; public set; }
    [DispIdAttribute("10069")]
public UInt32 FileAlignment { get; public set; }
    [DispIdAttribute("10072")]
public bool RegisterForComInterop { get; public set; }
    [DispIdAttribute("10073")]
public string ConfigurationOverrideFile { get; public set; }
    [DispIdAttribute("10074")]
public bool RemoteDebugEnabled { get; public set; }
    [DispIdAttribute("10075")]
public string RemoteDebugMachine { get; public set; }
    [DispIdAttribute("10079")]
public string NoWarn { get; public set; }
    [DispIdAttribute("10066")]
public bool NoStdLib { get; public set; }
    [DispIdAttribute("10106")]
public string DebugInfo { get; public set; }
    [DispIdAttribute("10109")]
public string PlatformTarget { get; public set; }
    [DispIdAttribute("12121")]
public string TreatSpecificWarningsAsErrors { get; public set; }
    [DispIdAttribute("12200")]
public bool RunCodeAnalysis { get; public set; }
    [DispIdAttribute("12201")]
public string CodeAnalysisLogFile { get; public set; }
    [DispIdAttribute("12202")]
public string CodeAnalysisRuleAssemblies { get; public set; }
    [DispIdAttribute("12204")]
public string CodeAnalysisInputAssembly { get; public set; }
    [DispIdAttribute("12203")]
public string CodeAnalysisRules { get; public set; }
    [DispIdAttribute("12205")]
public string CodeAnalysisSpellCheckLanguages { get; public set; }
    [DispIdAttribute("12206")]
public bool CodeAnalysisUseTypeNameInSuppression { get; public set; }
    [DispIdAttribute("12207")]
public string CodeAnalysisModuleSuppressionsFile { get; public set; }
    [DispIdAttribute("10110")]
public bool UseVSHostingProcess { get; public set; }
    [DispIdAttribute("10111")]
public sgenGenerationOption GenerateSerializationAssemblies { get; public set; }
    [DispIdAttribute("13104")]
public string LanguageVersion { get; public set; }
    [DispIdAttribute("13105")]
public string ErrorReport { get; public set; }
    [DispIdAttribute("15208")]
public bool CodeAnalysisIgnoreGeneratedCode { get; public set; }
    [DispIdAttribute("15209")]
public bool CodeAnalysisOverrideRuleVisibilities { get; public set; }
    [DispIdAttribute("15211")]
public string CodeAnalysisDictionaries { get; public set; }
    [DispIdAttribute("15210")]
public string CodeAnalysisCulture { get; public set; }
    [DispIdAttribute("15212")]
public string CodeAnalysisRuleSet { get; public set; }
    [DispIdAttribute("15213")]
public string CodeAnalysisRuleSetDirectories { get; public set; }
    [DispIdAttribute("15214")]
public bool CodeAnalysisIgnoreBuiltInRuleSets { get; public set; }
    [DispIdAttribute("15215")]
public string CodeAnalysisRuleDirectories { get; public set; }
    [DispIdAttribute("15216")]
public bool CodeAnalysisIgnoreBuiltInRules { get; public set; }
    [DispIdAttribute("15217")]
public bool CodeAnalysisFailOnMissingRules { get; public set; }
    [DispIdAttribute("17001")]
public bool Prefer32Bit { get; public set; }
    [DispIdAttribute("17310")]
public AuthenticationMode AuthenticationMode { get; public set; }
    [DispIdAttribute("-2147418112")]
public abstract virtual string get___id();
    [DispIdAttribute("10001")]
public abstract virtual bool get_DebugSymbols();
    [DispIdAttribute("10001")]
public abstract virtual void set_DebugSymbols(bool value);
    [DispIdAttribute("10036")]
public abstract virtual bool get_DefineDebug();
    [DispIdAttribute("10036")]
public abstract virtual void set_DefineDebug(bool value);
    [DispIdAttribute("10037")]
public abstract virtual bool get_DefineTrace();
    [DispIdAttribute("10037")]
public abstract virtual void set_DefineTrace(bool value);
    [DispIdAttribute("10004")]
public abstract virtual string get_OutputPath();
    [DispIdAttribute("10004")]
public abstract virtual void set_OutputPath(string value);
    [DispIdAttribute("10010")]
public abstract virtual string get_IntermediatePath();
    [DispIdAttribute("10010")]
public abstract virtual void set_IntermediatePath(string value);
    [DispIdAttribute("10005")]
public abstract virtual string get_DefineConstants();
    [DispIdAttribute("10005")]
public abstract virtual void set_DefineConstants(string value);
    [DispIdAttribute("10054")]
public abstract virtual bool get_RemoveIntegerChecks();
    [DispIdAttribute("10054")]
public abstract virtual void set_RemoveIntegerChecks(bool value);
    [DispIdAttribute("10055")]
public abstract virtual UInt32 get_BaseAddress();
    [DispIdAttribute("10055")]
public abstract virtual void set_BaseAddress(UInt32 value);
    [DispIdAttribute("10061")]
public abstract virtual bool get_AllowUnsafeBlocks();
    [DispIdAttribute("10061")]
public abstract virtual void set_AllowUnsafeBlocks(bool value);
    [DispIdAttribute("10062")]
public abstract virtual bool get_CheckForOverflowUnderflow();
    [DispIdAttribute("10062")]
public abstract virtual void set_CheckForOverflowUnderflow(bool value);
    [DispIdAttribute("10063")]
public abstract virtual string get_DocumentationFile();
    [DispIdAttribute("10063")]
public abstract virtual void set_DocumentationFile(string value);
    [DispIdAttribute("10064")]
public abstract virtual bool get_Optimize();
    [DispIdAttribute("10064")]
public abstract virtual void set_Optimize(bool value);
    [DispIdAttribute("10065")]
public abstract virtual bool get_IncrementalBuild();
    [DispIdAttribute("10065")]
public abstract virtual void set_IncrementalBuild(bool value);
    [DispIdAttribute("10006")]
public abstract virtual string get_StartProgram();
    [DispIdAttribute("10006")]
public abstract virtual void set_StartProgram(string value);
    [DispIdAttribute("10007")]
public abstract virtual string get_StartWorkingDirectory();
    [DispIdAttribute("10007")]
public abstract virtual void set_StartWorkingDirectory(string value);
    [DispIdAttribute("10008")]
public abstract virtual string get_StartURL();
    [DispIdAttribute("10008")]
public abstract virtual void set_StartURL(string value);
    [DispIdAttribute("10038")]
public abstract virtual string get_StartPage();
    [DispIdAttribute("10038")]
public abstract virtual void set_StartPage(string value);
    [DispIdAttribute("10002")]
public abstract virtual string get_StartArguments();
    [DispIdAttribute("10002")]
public abstract virtual void set_StartArguments(string value);
    [DispIdAttribute("10039")]
public abstract virtual bool get_StartWithIE();
    [DispIdAttribute("10039")]
public abstract virtual void set_StartWithIE(bool value);
    [DispIdAttribute("10040")]
public abstract virtual bool get_EnableASPDebugging();
    [DispIdAttribute("10040")]
public abstract virtual void set_EnableASPDebugging(bool value);
    [DispIdAttribute("10041")]
public abstract virtual bool get_EnableASPXDebugging();
    [DispIdAttribute("10041")]
public abstract virtual void set_EnableASPXDebugging(bool value);
    [DispIdAttribute("10057")]
public abstract virtual bool get_EnableUnmanagedDebugging();
    [DispIdAttribute("10057")]
public abstract virtual void set_EnableUnmanagedDebugging(bool value);
    [DispIdAttribute("10003")]
public abstract virtual prjStartAction get_StartAction();
    [DispIdAttribute("10003")]
public abstract virtual void set_StartAction(prjStartAction value);
    [DispIdAttribute("10030")]
public abstract virtual object get_Extender(string extenderName);
    [DispIdAttribute("10031")]
public abstract virtual object get_ExtenderNames();
    [DispIdAttribute("10032")]
public abstract virtual string get_ExtenderCATID();
    [DispIdAttribute("10052")]
public abstract virtual prjWarningLevel get_WarningLevel();
    [DispIdAttribute("10052")]
public abstract virtual void set_WarningLevel(prjWarningLevel value);
    [DispIdAttribute("10053")]
public abstract virtual bool get_TreatWarningsAsErrors();
    [DispIdAttribute("10053")]
public abstract virtual void set_TreatWarningsAsErrors(bool value);
    [DispIdAttribute("10058")]
public abstract virtual bool get_EnableSQLServerDebugging();
    [DispIdAttribute("10058")]
public abstract virtual void set_EnableSQLServerDebugging(bool value);
    [DispIdAttribute("10069")]
public abstract virtual UInt32 get_FileAlignment();
    [DispIdAttribute("10069")]
public abstract virtual void set_FileAlignment(UInt32 value);
    [DispIdAttribute("10072")]
public abstract virtual bool get_RegisterForComInterop();
    [DispIdAttribute("10072")]
public abstract virtual void set_RegisterForComInterop(bool value);
    [DispIdAttribute("10073")]
public abstract virtual string get_ConfigurationOverrideFile();
    [DispIdAttribute("10073")]
public abstract virtual void set_ConfigurationOverrideFile(string value);
    [DispIdAttribute("10074")]
public abstract virtual bool get_RemoteDebugEnabled();
    [DispIdAttribute("10074")]
public abstract virtual void set_RemoteDebugEnabled(bool value);
    [DispIdAttribute("10075")]
public abstract virtual string get_RemoteDebugMachine();
    [DispIdAttribute("10075")]
public abstract virtual void set_RemoteDebugMachine(string value);
    [DispIdAttribute("10079")]
public abstract virtual string get_NoWarn();
    [DispIdAttribute("10079")]
public abstract virtual void set_NoWarn(string value);
    [DispIdAttribute("10066")]
public abstract virtual bool get_NoStdLib();
    [DispIdAttribute("10066")]
public abstract virtual void set_NoStdLib(bool value);
    [DispIdAttribute("10106")]
public abstract virtual string get_DebugInfo();
    [DispIdAttribute("10106")]
public abstract virtual void set_DebugInfo(string value);
    [DispIdAttribute("10109")]
public abstract virtual string get_PlatformTarget();
    [DispIdAttribute("10109")]
public abstract virtual void set_PlatformTarget(string value);
    [DispIdAttribute("12121")]
public abstract virtual string get_TreatSpecificWarningsAsErrors();
    [DispIdAttribute("12121")]
public abstract virtual void set_TreatSpecificWarningsAsErrors(string value);
    [DispIdAttribute("12200")]
public abstract virtual bool get_RunCodeAnalysis();
    [DispIdAttribute("12200")]
public abstract virtual void set_RunCodeAnalysis(bool value);
    [DispIdAttribute("12201")]
public abstract virtual string get_CodeAnalysisLogFile();
    [DispIdAttribute("12201")]
public abstract virtual void set_CodeAnalysisLogFile(string value);
    [DispIdAttribute("12202")]
public abstract virtual string get_CodeAnalysisRuleAssemblies();
    [DispIdAttribute("12202")]
public abstract virtual void set_CodeAnalysisRuleAssemblies(string value);
    [DispIdAttribute("12204")]
public abstract virtual string get_CodeAnalysisInputAssembly();
    [DispIdAttribute("12204")]
public abstract virtual void set_CodeAnalysisInputAssembly(string value);
    [DispIdAttribute("12203")]
public abstract virtual string get_CodeAnalysisRules();
    [DispIdAttribute("12203")]
public abstract virtual void set_CodeAnalysisRules(string value);
    [DispIdAttribute("12205")]
public abstract virtual string get_CodeAnalysisSpellCheckLanguages();
    [DispIdAttribute("12205")]
public abstract virtual void set_CodeAnalysisSpellCheckLanguages(string value);
    [DispIdAttribute("12206")]
public abstract virtual bool get_CodeAnalysisUseTypeNameInSuppression();
    [DispIdAttribute("12206")]
public abstract virtual void set_CodeAnalysisUseTypeNameInSuppression(bool value);
    [DispIdAttribute("12207")]
public abstract virtual string get_CodeAnalysisModuleSuppressionsFile();
    [DispIdAttribute("12207")]
public abstract virtual void set_CodeAnalysisModuleSuppressionsFile(string value);
    [DispIdAttribute("10110")]
public abstract virtual bool get_UseVSHostingProcess();
    [DispIdAttribute("10110")]
public abstract virtual void set_UseVSHostingProcess(bool value);
    [DispIdAttribute("10111")]
public abstract virtual sgenGenerationOption get_GenerateSerializationAssemblies();
    [DispIdAttribute("10111")]
public abstract virtual void set_GenerateSerializationAssemblies(sgenGenerationOption value);
    [DispIdAttribute("13104")]
public abstract virtual string get_LanguageVersion();
    [DispIdAttribute("13104")]
public abstract virtual void set_LanguageVersion(string value);
    [DispIdAttribute("13105")]
public abstract virtual string get_ErrorReport();
    [DispIdAttribute("13105")]
public abstract virtual void set_ErrorReport(string value);
    [DispIdAttribute("15208")]
public abstract virtual bool get_CodeAnalysisIgnoreGeneratedCode();
    [DispIdAttribute("15208")]
public abstract virtual void set_CodeAnalysisIgnoreGeneratedCode(bool value);
    [DispIdAttribute("15209")]
public abstract virtual bool get_CodeAnalysisOverrideRuleVisibilities();
    [DispIdAttribute("15209")]
public abstract virtual void set_CodeAnalysisOverrideRuleVisibilities(bool value);
    [DispIdAttribute("15211")]
public abstract virtual string get_CodeAnalysisDictionaries();
    [DispIdAttribute("15211")]
public abstract virtual void set_CodeAnalysisDictionaries(string value);
    [DispIdAttribute("15210")]
public abstract virtual string get_CodeAnalysisCulture();
    [DispIdAttribute("15210")]
public abstract virtual void set_CodeAnalysisCulture(string value);
    [DispIdAttribute("15212")]
public abstract virtual string get_CodeAnalysisRuleSet();
    [DispIdAttribute("15212")]
public abstract virtual void set_CodeAnalysisRuleSet(string value);
    [DispIdAttribute("15213")]
public abstract virtual string get_CodeAnalysisRuleSetDirectories();
    [DispIdAttribute("15213")]
public abstract virtual void set_CodeAnalysisRuleSetDirectories(string value);
    [DispIdAttribute("15214")]
public abstract virtual bool get_CodeAnalysisIgnoreBuiltInRuleSets();
    [DispIdAttribute("15214")]
public abstract virtual void set_CodeAnalysisIgnoreBuiltInRuleSets(bool value);
    [DispIdAttribute("15215")]
public abstract virtual string get_CodeAnalysisRuleDirectories();
    [DispIdAttribute("15215")]
public abstract virtual void set_CodeAnalysisRuleDirectories(string value);
    [DispIdAttribute("15216")]
public abstract virtual bool get_CodeAnalysisIgnoreBuiltInRules();
    [DispIdAttribute("15216")]
public abstract virtual void set_CodeAnalysisIgnoreBuiltInRules(bool value);
    [DispIdAttribute("15217")]
public abstract virtual bool get_CodeAnalysisFailOnMissingRules();
    [DispIdAttribute("15217")]
public abstract virtual void set_CodeAnalysisFailOnMissingRules(bool value);
    [DispIdAttribute("17001")]
public abstract virtual bool get_Prefer32Bit();
    [DispIdAttribute("17001")]
public abstract virtual void set_Prefer32Bit(bool value);
    [DispIdAttribute("17310")]
public abstract virtual AuthenticationMode get_AuthenticationMode();
    [DispIdAttribute("17310")]
public abstract virtual void set_AuthenticationMode(AuthenticationMode value);
}
[ComVisibleAttribute("False")]
[GuidAttribute("63A74A96-C954-4456-BAB9-7FC6D21DDDEA")]
public interface VSLangProj165.CSharpProjectProperties8 {
    [DispIdAttribute("-2147418112")]
public string __id { get; }
    [DispIdAttribute("10035")]
public object __project { get; }
    [DispIdAttribute("10015")]
public string StartupObject { get; public set; }
    [DispIdAttribute("10016")]
public prjOutputType OutputType { get; public set; }
    [DispIdAttribute("10042")]
public string RootNamespace { get; public set; }
    [DispIdAttribute("10013")]
public string AssemblyName { get; public set; }
    [DispIdAttribute("10044")]
public string AssemblyOriginatorKeyFile { get; public set; }
    [DispIdAttribute("10045")]
public string AssemblyKeyContainerName { get; public set; }
    [DispIdAttribute("10043")]
public prjOriginatorKeyMode AssemblyOriginatorKeyMode { get; public set; }
    [DispIdAttribute("10046")]
public bool DelaySign { get; public set; }
    [DispIdAttribute("10012")]
public string WebServer { get; }
    [DispIdAttribute("10017")]
public string WebServerVersion { get; }
    [DispIdAttribute("10018")]
public string ServerExtensionsVersion { get; }
    [DispIdAttribute("10019")]
public bool LinkRepair { get; public set; }
    [DispIdAttribute("10020")]
public string OfflineURL { get; }
    [DispIdAttribute("10047")]
public string FileSharePath { get; public set; }
    [DispIdAttribute("10048")]
public string ActiveFileSharePath { get; }
    [DispIdAttribute("10049")]
public prjWebAccessMethod WebAccessMethod { get; public set; }
    [DispIdAttribute("10050")]
public prjWebAccessMethod ActiveWebAccessMethod { get; }
    [DispIdAttribute("10021")]
public prjScriptLanguage DefaultClientScript { get; public set; }
    [DispIdAttribute("10022")]
public prjTargetSchema DefaultTargetSchema { get; public set; }
    [DispIdAttribute("10023")]
public prjHTMLPageLayout DefaultHTMLPageLayout { get; public set; }
    [DispIdAttribute("10026")]
public string FileName { get; public set; }
    [DispIdAttribute("10027")]
public string FullPath { get; }
    [DispIdAttribute("10028")]
public string LocalPath { get; }
    [DispIdAttribute("10029")]
public string URL { get; }
    [DispIdAttribute("10033")]
public ProjectConfigurationProperties ActiveConfigurationSettings { get; }
    [DispIdAttribute("10031")]
public object ExtenderNames { get; }
    [DispIdAttribute("10032")]
public string ExtenderCATID { get; }
    [DispIdAttribute("10011")]
public string ApplicationIcon { get; public set; }
    [DispIdAttribute("10051")]
public prjOptionStrict OptionStrict { get; public set; }
    [DispIdAttribute("10056")]
public string ReferencePath { get; public set; }
    [DispIdAttribute("10009")]
public string OutputFileName { get; }
    [DispIdAttribute("10034")]
public string AbsoluteProjectDirectory { get; }
    [DispIdAttribute("10059")]
public prjOptionExplicit OptionExplicit { get; public set; }
    [DispIdAttribute("10060")]
public prjCompare OptionCompare { get; public set; }
    [DispIdAttribute("10067")]
public prjProjectType ProjectType { get; }
    [DispIdAttribute("10068")]
public string DefaultNamespace { get; public set; }
    [DispIdAttribute("10076")]
public string PreBuildEvent { get; public set; }
    [DispIdAttribute("10077")]
public string PostBuildEvent { get; public set; }
    [DispIdAttribute("10078")]
public prjRunPostBuildEvent RunPostBuildEvent { get; public set; }
    [DispIdAttribute("10080")]
public string AspnetVersion { get; }
    [DispIdAttribute("12102")]
public string Title { get; public set; }
    [DispIdAttribute("12103")]
public string Description { get; public set; }
    [DispIdAttribute("12104")]
public string Company { get; public set; }
    [DispIdAttribute("12105")]
public string Product { get; public set; }
    [DispIdAttribute("12106")]
public string Copyright { get; public set; }
    [DispIdAttribute("12107")]
public string Trademark { get; public set; }
    [DispIdAttribute("12108")]
public prjAssemblyType AssemblyType { get; public set; }
    [DispIdAttribute("12109")]
public bool TypeComplianceDiagnostics { get; public set; }
    [DispIdAttribute("12112")]
public string Win32ResourceFile { get; public set; }
    [DispIdAttribute("12115")]
public string AssemblyKeyProviderName { get; public set; }
    [DispIdAttribute("12114")]
public UInt32 AssemblyOriginatorKeyFileType { get; public set; }
    [DispIdAttribute("12116")]
public string AssemblyVersion { get; public set; }
    [DispIdAttribute("12117")]
public string AssemblyFileVersion { get; public set; }
    [DispIdAttribute("12119")]
public bool GenerateManifests { get; public set; }
    [DispIdAttribute("12120")]
public bool EnableSecurityDebugging { get; public set; }
    [DispIdAttribute("12118")]
public string DebugSecurityZoneURL { get; public set; }
    [DispIdAttribute("12122")]
public object Publish { get; }
    [DispIdAttribute("12123")]
public bool ComVisible { get; public set; }
    [DispIdAttribute("12124")]
public string AssemblyGuid { get; public set; }
    [DispIdAttribute("12125")]
public string NeutralResourcesLanguage { get; public set; }
    [DispIdAttribute("12126")]
public bool SignAssembly { get; public set; }
    [DispIdAttribute("12132")]
public bool SignManifests { get; public set; }
    [DispIdAttribute("12127")]
public string TargetZone { get; public set; }
    [DispIdAttribute("12128")]
public string ExcludedPermissions { get; public set; }
    [DispIdAttribute("12129")]
public string ManifestCertificateThumbprint { get; public set; }
    [DispIdAttribute("12130")]
public string ManifestKeyFile { get; public set; }
    [DispIdAttribute("12131")]
public string ManifestTimestampUrl { get; public set; }
    [DispIdAttribute("12200")]
public UInt32 TargetFramework { get; public set; }
    [DispIdAttribute("12201")]
public string ApplicationManifest { get; public set; }
    [DispIdAttribute("12202")]
public string TargetFrameworkMoniker { get; public set; }
    [DispIdAttribute("17000")]
public UInt32 OutputTypeEx { get; public set; }
    [DispIdAttribute("17100")]
public bool AutoGenerateBindingRedirects { get; public set; }
    [DispIdAttribute("-2147418112")]
public abstract virtual string get___id();
    [DispIdAttribute("10035")]
public abstract virtual object get___project();
    [DispIdAttribute("10015")]
public abstract virtual string get_StartupObject();
    [DispIdAttribute("10015")]
public abstract virtual void set_StartupObject(string value);
    [DispIdAttribute("10016")]
public abstract virtual prjOutputType get_OutputType();
    [DispIdAttribute("10016")]
public abstract virtual void set_OutputType(prjOutputType value);
    [DispIdAttribute("10042")]
public abstract virtual string get_RootNamespace();
    [DispIdAttribute("10042")]
public abstract virtual void set_RootNamespace(string value);
    [DispIdAttribute("10013")]
public abstract virtual string get_AssemblyName();
    [DispIdAttribute("10013")]
public abstract virtual void set_AssemblyName(string value);
    [DispIdAttribute("10044")]
public abstract virtual string get_AssemblyOriginatorKeyFile();
    [DispIdAttribute("10044")]
public abstract virtual void set_AssemblyOriginatorKeyFile(string value);
    [DispIdAttribute("10045")]
public abstract virtual string get_AssemblyKeyContainerName();
    [DispIdAttribute("10045")]
public abstract virtual void set_AssemblyKeyContainerName(string value);
    [DispIdAttribute("10043")]
public abstract virtual prjOriginatorKeyMode get_AssemblyOriginatorKeyMode();
    [DispIdAttribute("10043")]
public abstract virtual void set_AssemblyOriginatorKeyMode(prjOriginatorKeyMode value);
    [DispIdAttribute("10046")]
public abstract virtual bool get_DelaySign();
    [DispIdAttribute("10046")]
public abstract virtual void set_DelaySign(bool value);
    [DispIdAttribute("10012")]
public abstract virtual string get_WebServer();
    [DispIdAttribute("10017")]
public abstract virtual string get_WebServerVersion();
    [DispIdAttribute("10018")]
public abstract virtual string get_ServerExtensionsVersion();
    [DispIdAttribute("10019")]
public abstract virtual bool get_LinkRepair();
    [DispIdAttribute("10019")]
public abstract virtual void set_LinkRepair(bool value);
    [DispIdAttribute("10020")]
public abstract virtual string get_OfflineURL();
    [DispIdAttribute("10047")]
public abstract virtual string get_FileSharePath();
    [DispIdAttribute("10047")]
public abstract virtual void set_FileSharePath(string value);
    [DispIdAttribute("10048")]
public abstract virtual string get_ActiveFileSharePath();
    [DispIdAttribute("10049")]
public abstract virtual prjWebAccessMethod get_WebAccessMethod();
    [DispIdAttribute("10049")]
public abstract virtual void set_WebAccessMethod(prjWebAccessMethod value);
    [DispIdAttribute("10050")]
public abstract virtual prjWebAccessMethod get_ActiveWebAccessMethod();
    [DispIdAttribute("10021")]
public abstract virtual prjScriptLanguage get_DefaultClientScript();
    [DispIdAttribute("10021")]
public abstract virtual void set_DefaultClientScript(prjScriptLanguage value);
    [DispIdAttribute("10022")]
public abstract virtual prjTargetSchema get_DefaultTargetSchema();
    [DispIdAttribute("10022")]
public abstract virtual void set_DefaultTargetSchema(prjTargetSchema value);
    [DispIdAttribute("10023")]
public abstract virtual prjHTMLPageLayout get_DefaultHTMLPageLayout();
    [DispIdAttribute("10023")]
public abstract virtual void set_DefaultHTMLPageLayout(prjHTMLPageLayout value);
    [DispIdAttribute("10026")]
public abstract virtual string get_FileName();
    [DispIdAttribute("10026")]
public abstract virtual void set_FileName(string value);
    [DispIdAttribute("10027")]
public abstract virtual string get_FullPath();
    [DispIdAttribute("10028")]
public abstract virtual string get_LocalPath();
    [DispIdAttribute("10029")]
public abstract virtual string get_URL();
    [DispIdAttribute("10033")]
public abstract virtual ProjectConfigurationProperties get_ActiveConfigurationSettings();
    [DispIdAttribute("10030")]
public abstract virtual object get_Extender(string extenderName);
    [DispIdAttribute("10031")]
public abstract virtual object get_ExtenderNames();
    [DispIdAttribute("10032")]
public abstract virtual string get_ExtenderCATID();
    [DispIdAttribute("10011")]
public abstract virtual string get_ApplicationIcon();
    [DispIdAttribute("10011")]
public abstract virtual void set_ApplicationIcon(string value);
    [DispIdAttribute("10051")]
public abstract virtual prjOptionStrict get_OptionStrict();
    [DispIdAttribute("10051")]
public abstract virtual void set_OptionStrict(prjOptionStrict value);
    [DispIdAttribute("10056")]
public abstract virtual string get_ReferencePath();
    [DispIdAttribute("10056")]
public abstract virtual void set_ReferencePath(string value);
    [DispIdAttribute("10009")]
public abstract virtual string get_OutputFileName();
    [DispIdAttribute("10034")]
public abstract virtual string get_AbsoluteProjectDirectory();
    [DispIdAttribute("10059")]
public abstract virtual prjOptionExplicit get_OptionExplicit();
    [DispIdAttribute("10059")]
public abstract virtual void set_OptionExplicit(prjOptionExplicit value);
    [DispIdAttribute("10060")]
public abstract virtual prjCompare get_OptionCompare();
    [DispIdAttribute("10060")]
public abstract virtual void set_OptionCompare(prjCompare value);
    [DispIdAttribute("10067")]
public abstract virtual prjProjectType get_ProjectType();
    [DispIdAttribute("10068")]
public abstract virtual string get_DefaultNamespace();
    [DispIdAttribute("10068")]
public abstract virtual void set_DefaultNamespace(string value);
    [DispIdAttribute("10076")]
public abstract virtual string get_PreBuildEvent();
    [DispIdAttribute("10076")]
public abstract virtual void set_PreBuildEvent(string value);
    [DispIdAttribute("10077")]
public abstract virtual string get_PostBuildEvent();
    [DispIdAttribute("10077")]
public abstract virtual void set_PostBuildEvent(string value);
    [DispIdAttribute("10078")]
public abstract virtual prjRunPostBuildEvent get_RunPostBuildEvent();
    [DispIdAttribute("10078")]
public abstract virtual void set_RunPostBuildEvent(prjRunPostBuildEvent value);
    [DispIdAttribute("10080")]
public abstract virtual string get_AspnetVersion();
    [DispIdAttribute("12102")]
public abstract virtual string get_Title();
    [DispIdAttribute("12102")]
public abstract virtual void set_Title(string value);
    [DispIdAttribute("12103")]
public abstract virtual string get_Description();
    [DispIdAttribute("12103")]
public abstract virtual void set_Description(string value);
    [DispIdAttribute("12104")]
public abstract virtual string get_Company();
    [DispIdAttribute("12104")]
public abstract virtual void set_Company(string value);
    [DispIdAttribute("12105")]
public abstract virtual string get_Product();
    [DispIdAttribute("12105")]
public abstract virtual void set_Product(string value);
    [DispIdAttribute("12106")]
public abstract virtual string get_Copyright();
    [DispIdAttribute("12106")]
public abstract virtual void set_Copyright(string value);
    [DispIdAttribute("12107")]
public abstract virtual string get_Trademark();
    [DispIdAttribute("12107")]
public abstract virtual void set_Trademark(string value);
    [DispIdAttribute("12108")]
public abstract virtual prjAssemblyType get_AssemblyType();
    [DispIdAttribute("12108")]
public abstract virtual void set_AssemblyType(prjAssemblyType value);
    [DispIdAttribute("12109")]
public abstract virtual bool get_TypeComplianceDiagnostics();
    [DispIdAttribute("12109")]
public abstract virtual void set_TypeComplianceDiagnostics(bool value);
    [DispIdAttribute("12112")]
public abstract virtual string get_Win32ResourceFile();
    [DispIdAttribute("12112")]
public abstract virtual void set_Win32ResourceFile(string value);
    [DispIdAttribute("12115")]
public abstract virtual string get_AssemblyKeyProviderName();
    [DispIdAttribute("12115")]
public abstract virtual void set_AssemblyKeyProviderName(string value);
    [DispIdAttribute("12114")]
public abstract virtual UInt32 get_AssemblyOriginatorKeyFileType();
    [DispIdAttribute("12114")]
public abstract virtual void set_AssemblyOriginatorKeyFileType(UInt32 value);
    [DispIdAttribute("12116")]
public abstract virtual string get_AssemblyVersion();
    [DispIdAttribute("12116")]
public abstract virtual void set_AssemblyVersion(string value);
    [DispIdAttribute("12117")]
public abstract virtual string get_AssemblyFileVersion();
    [DispIdAttribute("12117")]
public abstract virtual void set_AssemblyFileVersion(string value);
    [DispIdAttribute("12119")]
public abstract virtual bool get_GenerateManifests();
    [DispIdAttribute("12119")]
public abstract virtual void set_GenerateManifests(bool value);
    [DispIdAttribute("12120")]
public abstract virtual bool get_EnableSecurityDebugging();
    [DispIdAttribute("12120")]
public abstract virtual void set_EnableSecurityDebugging(bool value);
    [DispIdAttribute("12118")]
public abstract virtual string get_DebugSecurityZoneURL();
    [DispIdAttribute("12118")]
public abstract virtual void set_DebugSecurityZoneURL(string value);
    [DispIdAttribute("12122")]
public abstract virtual object get_Publish();
    [DispIdAttribute("12123")]
public abstract virtual bool get_ComVisible();
    [DispIdAttribute("12123")]
public abstract virtual void set_ComVisible(bool value);
    [DispIdAttribute("12124")]
public abstract virtual string get_AssemblyGuid();
    [DispIdAttribute("12124")]
public abstract virtual void set_AssemblyGuid(string value);
    [DispIdAttribute("12125")]
public abstract virtual string get_NeutralResourcesLanguage();
    [DispIdAttribute("12125")]
public abstract virtual void set_NeutralResourcesLanguage(string value);
    [DispIdAttribute("12126")]
public abstract virtual bool get_SignAssembly();
    [DispIdAttribute("12126")]
public abstract virtual void set_SignAssembly(bool value);
    [DispIdAttribute("12132")]
public abstract virtual bool get_SignManifests();
    [DispIdAttribute("12132")]
public abstract virtual void set_SignManifests(bool value);
    [DispIdAttribute("12127")]
public abstract virtual string get_TargetZone();
    [DispIdAttribute("12127")]
public abstract virtual void set_TargetZone(string value);
    [DispIdAttribute("12128")]
public abstract virtual string get_ExcludedPermissions();
    [DispIdAttribute("12128")]
public abstract virtual void set_ExcludedPermissions(string value);
    [DispIdAttribute("12129")]
public abstract virtual string get_ManifestCertificateThumbprint();
    [DispIdAttribute("12129")]
public abstract virtual void set_ManifestCertificateThumbprint(string value);
    [DispIdAttribute("12130")]
public abstract virtual string get_ManifestKeyFile();
    [DispIdAttribute("12130")]
public abstract virtual void set_ManifestKeyFile(string value);
    [DispIdAttribute("12131")]
public abstract virtual string get_ManifestTimestampUrl();
    [DispIdAttribute("12131")]
public abstract virtual void set_ManifestTimestampUrl(string value);
    [DispIdAttribute("12200")]
public abstract virtual UInt32 get_TargetFramework();
    [DispIdAttribute("12200")]
public abstract virtual void set_TargetFramework(UInt32 value);
    [DispIdAttribute("12201")]
public abstract virtual string get_ApplicationManifest();
    [DispIdAttribute("12201")]
public abstract virtual void set_ApplicationManifest(string value);
    [DispIdAttribute("12202")]
public abstract virtual string get_TargetFrameworkMoniker();
    [DispIdAttribute("12202")]
public abstract virtual void set_TargetFrameworkMoniker(string value);
    [DispIdAttribute("17000")]
public abstract virtual UInt32 get_OutputTypeEx();
    [DispIdAttribute("17000")]
public abstract virtual void set_OutputTypeEx(UInt32 value);
    [DispIdAttribute("17100")]
public abstract virtual bool get_AutoGenerateBindingRedirects();
    [DispIdAttribute("17100")]
public abstract virtual void set_AutoGenerateBindingRedirects(bool value);
}
[GuidAttribute("B0E31B9F-7B07-4AF7-802C-780FB8E01ACB")]
public interface VSLangProj165.VBProjectConfigurationProperties7 {
    [DispIdAttribute("-2147418112")]
public string __id { get; }
    [DispIdAttribute("10001")]
public bool DebugSymbols { get; public set; }
    [DispIdAttribute("10036")]
public bool DefineDebug { get; public set; }
    [DispIdAttribute("10037")]
public bool DefineTrace { get; public set; }
    [DispIdAttribute("10004")]
public string OutputPath { get; public set; }
    [DispIdAttribute("10010")]
public string IntermediatePath { get; public set; }
    [DispIdAttribute("10005")]
public string DefineConstants { get; public set; }
    [DispIdAttribute("10054")]
public bool RemoveIntegerChecks { get; public set; }
    [DispIdAttribute("10055")]
public UInt32 BaseAddress { get; public set; }
    [DispIdAttribute("10061")]
public bool AllowUnsafeBlocks { get; public set; }
    [DispIdAttribute("10062")]
public bool CheckForOverflowUnderflow { get; public set; }
    [DispIdAttribute("10063")]
public string DocumentationFile { get; public set; }
    [DispIdAttribute("10064")]
public bool Optimize { get; public set; }
    [DispIdAttribute("10065")]
public bool IncrementalBuild { get; public set; }
    [DispIdAttribute("10006")]
public string StartProgram { get; public set; }
    [DispIdAttribute("10007")]
public string StartWorkingDirectory { get; public set; }
    [DispIdAttribute("10008")]
public string StartURL { get; public set; }
    [DispIdAttribute("10038")]
public string StartPage { get; public set; }
    [DispIdAttribute("10002")]
public string StartArguments { get; public set; }
    [DispIdAttribute("10039")]
public bool StartWithIE { get; public set; }
    [DispIdAttribute("10040")]
public bool EnableASPDebugging { get; public set; }
    [DispIdAttribute("10041")]
public bool EnableASPXDebugging { get; public set; }
    [DispIdAttribute("10057")]
public bool EnableUnmanagedDebugging { get; public set; }
    [DispIdAttribute("10003")]
public prjStartAction StartAction { get; public set; }
    [DispIdAttribute("10031")]
public object ExtenderNames { get; }
    [DispIdAttribute("10032")]
public string ExtenderCATID { get; }
    [DispIdAttribute("10052")]
public prjWarningLevel WarningLevel { get; public set; }
    [DispIdAttribute("10053")]
public bool TreatWarningsAsErrors { get; public set; }
    [DispIdAttribute("10058")]
public bool EnableSQLServerDebugging { get; public set; }
    [DispIdAttribute("10069")]
public UInt32 FileAlignment { get; public set; }
    [DispIdAttribute("10072")]
public bool RegisterForComInterop { get; public set; }
    [DispIdAttribute("10073")]
public string ConfigurationOverrideFile { get; public set; }
    [DispIdAttribute("10074")]
public bool RemoteDebugEnabled { get; public set; }
    [DispIdAttribute("10075")]
public string RemoteDebugMachine { get; public set; }
    [DispIdAttribute("10079")]
public string NoWarn { get; public set; }
    [DispIdAttribute("10066")]
public bool NoStdLib { get; public set; }
    [DispIdAttribute("10106")]
public string DebugInfo { get; public set; }
    [DispIdAttribute("10109")]
public string PlatformTarget { get; public set; }
    [DispIdAttribute("12121")]
public string TreatSpecificWarningsAsErrors { get; public set; }
    [DispIdAttribute("12200")]
public bool RunCodeAnalysis { get; public set; }
    [DispIdAttribute("12201")]
public string CodeAnalysisLogFile { get; public set; }
    [DispIdAttribute("12202")]
public string CodeAnalysisRuleAssemblies { get; public set; }
    [DispIdAttribute("12204")]
public string CodeAnalysisInputAssembly { get; public set; }
    [DispIdAttribute("12203")]
public string CodeAnalysisRules { get; public set; }
    [DispIdAttribute("12205")]
public string CodeAnalysisSpellCheckLanguages { get; public set; }
    [DispIdAttribute("12206")]
public bool CodeAnalysisUseTypeNameInSuppression { get; public set; }
    [DispIdAttribute("12207")]
public string CodeAnalysisModuleSuppressionsFile { get; public set; }
    [DispIdAttribute("10110")]
public bool UseVSHostingProcess { get; public set; }
    [DispIdAttribute("10111")]
public sgenGenerationOption GenerateSerializationAssemblies { get; public set; }
    [DispIdAttribute("15208")]
public bool CodeAnalysisIgnoreGeneratedCode { get; public set; }
    [DispIdAttribute("15209")]
public bool CodeAnalysisOverrideRuleVisibilities { get; public set; }
    [DispIdAttribute("15211")]
public string CodeAnalysisDictionaries { get; public set; }
    [DispIdAttribute("15210")]
public string CodeAnalysisCulture { get; public set; }
    [DispIdAttribute("15212")]
public string CodeAnalysisRuleSet { get; public set; }
    [DispIdAttribute("15213")]
public string CodeAnalysisRuleSetDirectories { get; public set; }
    [DispIdAttribute("15214")]
public bool CodeAnalysisIgnoreBuiltInRuleSets { get; public set; }
    [DispIdAttribute("15215")]
public string CodeAnalysisRuleDirectories { get; public set; }
    [DispIdAttribute("15216")]
public bool CodeAnalysisIgnoreBuiltInRules { get; public set; }
    [DispIdAttribute("15217")]
public bool CodeAnalysisFailOnMissingRules { get; public set; }
    [DispIdAttribute("17001")]
public bool Prefer32Bit { get; public set; }
    [DispIdAttribute("17310")]
public AuthenticationMode AuthenticationMode { get; public set; }
    [DispIdAttribute("-2147418112")]
public abstract virtual string get___id();
    [DispIdAttribute("10001")]
public abstract virtual bool get_DebugSymbols();
    [DispIdAttribute("10001")]
public abstract virtual void set_DebugSymbols(bool value);
    [DispIdAttribute("10036")]
public abstract virtual bool get_DefineDebug();
    [DispIdAttribute("10036")]
public abstract virtual void set_DefineDebug(bool value);
    [DispIdAttribute("10037")]
public abstract virtual bool get_DefineTrace();
    [DispIdAttribute("10037")]
public abstract virtual void set_DefineTrace(bool value);
    [DispIdAttribute("10004")]
public abstract virtual string get_OutputPath();
    [DispIdAttribute("10004")]
public abstract virtual void set_OutputPath(string value);
    [DispIdAttribute("10010")]
public abstract virtual string get_IntermediatePath();
    [DispIdAttribute("10010")]
public abstract virtual void set_IntermediatePath(string value);
    [DispIdAttribute("10005")]
public abstract virtual string get_DefineConstants();
    [DispIdAttribute("10005")]
public abstract virtual void set_DefineConstants(string value);
    [DispIdAttribute("10054")]
public abstract virtual bool get_RemoveIntegerChecks();
    [DispIdAttribute("10054")]
public abstract virtual void set_RemoveIntegerChecks(bool value);
    [DispIdAttribute("10055")]
public abstract virtual UInt32 get_BaseAddress();
    [DispIdAttribute("10055")]
public abstract virtual void set_BaseAddress(UInt32 value);
    [DispIdAttribute("10061")]
public abstract virtual bool get_AllowUnsafeBlocks();
    [DispIdAttribute("10061")]
public abstract virtual void set_AllowUnsafeBlocks(bool value);
    [DispIdAttribute("10062")]
public abstract virtual bool get_CheckForOverflowUnderflow();
    [DispIdAttribute("10062")]
public abstract virtual void set_CheckForOverflowUnderflow(bool value);
    [DispIdAttribute("10063")]
public abstract virtual string get_DocumentationFile();
    [DispIdAttribute("10063")]
public abstract virtual void set_DocumentationFile(string value);
    [DispIdAttribute("10064")]
public abstract virtual bool get_Optimize();
    [DispIdAttribute("10064")]
public abstract virtual void set_Optimize(bool value);
    [DispIdAttribute("10065")]
public abstract virtual bool get_IncrementalBuild();
    [DispIdAttribute("10065")]
public abstract virtual void set_IncrementalBuild(bool value);
    [DispIdAttribute("10006")]
public abstract virtual string get_StartProgram();
    [DispIdAttribute("10006")]
public abstract virtual void set_StartProgram(string value);
    [DispIdAttribute("10007")]
public abstract virtual string get_StartWorkingDirectory();
    [DispIdAttribute("10007")]
public abstract virtual void set_StartWorkingDirectory(string value);
    [DispIdAttribute("10008")]
public abstract virtual string get_StartURL();
    [DispIdAttribute("10008")]
public abstract virtual void set_StartURL(string value);
    [DispIdAttribute("10038")]
public abstract virtual string get_StartPage();
    [DispIdAttribute("10038")]
public abstract virtual void set_StartPage(string value);
    [DispIdAttribute("10002")]
public abstract virtual string get_StartArguments();
    [DispIdAttribute("10002")]
public abstract virtual void set_StartArguments(string value);
    [DispIdAttribute("10039")]
public abstract virtual bool get_StartWithIE();
    [DispIdAttribute("10039")]
public abstract virtual void set_StartWithIE(bool value);
    [DispIdAttribute("10040")]
public abstract virtual bool get_EnableASPDebugging();
    [DispIdAttribute("10040")]
public abstract virtual void set_EnableASPDebugging(bool value);
    [DispIdAttribute("10041")]
public abstract virtual bool get_EnableASPXDebugging();
    [DispIdAttribute("10041")]
public abstract virtual void set_EnableASPXDebugging(bool value);
    [DispIdAttribute("10057")]
public abstract virtual bool get_EnableUnmanagedDebugging();
    [DispIdAttribute("10057")]
public abstract virtual void set_EnableUnmanagedDebugging(bool value);
    [DispIdAttribute("10003")]
public abstract virtual prjStartAction get_StartAction();
    [DispIdAttribute("10003")]
public abstract virtual void set_StartAction(prjStartAction value);
    [DispIdAttribute("10030")]
public abstract virtual object get_Extender(string extenderName);
    [DispIdAttribute("10031")]
public abstract virtual object get_ExtenderNames();
    [DispIdAttribute("10032")]
public abstract virtual string get_ExtenderCATID();
    [DispIdAttribute("10052")]
public abstract virtual prjWarningLevel get_WarningLevel();
    [DispIdAttribute("10052")]
public abstract virtual void set_WarningLevel(prjWarningLevel value);
    [DispIdAttribute("10053")]
public abstract virtual bool get_TreatWarningsAsErrors();
    [DispIdAttribute("10053")]
public abstract virtual void set_TreatWarningsAsErrors(bool value);
    [DispIdAttribute("10058")]
public abstract virtual bool get_EnableSQLServerDebugging();
    [DispIdAttribute("10058")]
public abstract virtual void set_EnableSQLServerDebugging(bool value);
    [DispIdAttribute("10069")]
public abstract virtual UInt32 get_FileAlignment();
    [DispIdAttribute("10069")]
public abstract virtual void set_FileAlignment(UInt32 value);
    [DispIdAttribute("10072")]
public abstract virtual bool get_RegisterForComInterop();
    [DispIdAttribute("10072")]
public abstract virtual void set_RegisterForComInterop(bool value);
    [DispIdAttribute("10073")]
public abstract virtual string get_ConfigurationOverrideFile();
    [DispIdAttribute("10073")]
public abstract virtual void set_ConfigurationOverrideFile(string value);
    [DispIdAttribute("10074")]
public abstract virtual bool get_RemoteDebugEnabled();
    [DispIdAttribute("10074")]
public abstract virtual void set_RemoteDebugEnabled(bool value);
    [DispIdAttribute("10075")]
public abstract virtual string get_RemoteDebugMachine();
    [DispIdAttribute("10075")]
public abstract virtual void set_RemoteDebugMachine(string value);
    [DispIdAttribute("10079")]
public abstract virtual string get_NoWarn();
    [DispIdAttribute("10079")]
public abstract virtual void set_NoWarn(string value);
    [DispIdAttribute("10066")]
public abstract virtual bool get_NoStdLib();
    [DispIdAttribute("10066")]
public abstract virtual void set_NoStdLib(bool value);
    [DispIdAttribute("10106")]
public abstract virtual string get_DebugInfo();
    [DispIdAttribute("10106")]
public abstract virtual void set_DebugInfo(string value);
    [DispIdAttribute("10109")]
public abstract virtual string get_PlatformTarget();
    [DispIdAttribute("10109")]
public abstract virtual void set_PlatformTarget(string value);
    [DispIdAttribute("12121")]
public abstract virtual string get_TreatSpecificWarningsAsErrors();
    [DispIdAttribute("12121")]
public abstract virtual void set_TreatSpecificWarningsAsErrors(string value);
    [DispIdAttribute("12200")]
public abstract virtual bool get_RunCodeAnalysis();
    [DispIdAttribute("12200")]
public abstract virtual void set_RunCodeAnalysis(bool value);
    [DispIdAttribute("12201")]
public abstract virtual string get_CodeAnalysisLogFile();
    [DispIdAttribute("12201")]
public abstract virtual void set_CodeAnalysisLogFile(string value);
    [DispIdAttribute("12202")]
public abstract virtual string get_CodeAnalysisRuleAssemblies();
    [DispIdAttribute("12202")]
public abstract virtual void set_CodeAnalysisRuleAssemblies(string value);
    [DispIdAttribute("12204")]
public abstract virtual string get_CodeAnalysisInputAssembly();
    [DispIdAttribute("12204")]
public abstract virtual void set_CodeAnalysisInputAssembly(string value);
    [DispIdAttribute("12203")]
public abstract virtual string get_CodeAnalysisRules();
    [DispIdAttribute("12203")]
public abstract virtual void set_CodeAnalysisRules(string value);
    [DispIdAttribute("12205")]
public abstract virtual string get_CodeAnalysisSpellCheckLanguages();
    [DispIdAttribute("12205")]
public abstract virtual void set_CodeAnalysisSpellCheckLanguages(string value);
    [DispIdAttribute("12206")]
public abstract virtual bool get_CodeAnalysisUseTypeNameInSuppression();
    [DispIdAttribute("12206")]
public abstract virtual void set_CodeAnalysisUseTypeNameInSuppression(bool value);
    [DispIdAttribute("12207")]
public abstract virtual string get_CodeAnalysisModuleSuppressionsFile();
    [DispIdAttribute("12207")]
public abstract virtual void set_CodeAnalysisModuleSuppressionsFile(string value);
    [DispIdAttribute("10110")]
public abstract virtual bool get_UseVSHostingProcess();
    [DispIdAttribute("10110")]
public abstract virtual void set_UseVSHostingProcess(bool value);
    [DispIdAttribute("10111")]
public abstract virtual sgenGenerationOption get_GenerateSerializationAssemblies();
    [DispIdAttribute("10111")]
public abstract virtual void set_GenerateSerializationAssemblies(sgenGenerationOption value);
    [DispIdAttribute("15208")]
public abstract virtual bool get_CodeAnalysisIgnoreGeneratedCode();
    [DispIdAttribute("15208")]
public abstract virtual void set_CodeAnalysisIgnoreGeneratedCode(bool value);
    [DispIdAttribute("15209")]
public abstract virtual bool get_CodeAnalysisOverrideRuleVisibilities();
    [DispIdAttribute("15209")]
public abstract virtual void set_CodeAnalysisOverrideRuleVisibilities(bool value);
    [DispIdAttribute("15211")]
public abstract virtual string get_CodeAnalysisDictionaries();
    [DispIdAttribute("15211")]
public abstract virtual void set_CodeAnalysisDictionaries(string value);
    [DispIdAttribute("15210")]
public abstract virtual string get_CodeAnalysisCulture();
    [DispIdAttribute("15210")]
public abstract virtual void set_CodeAnalysisCulture(string value);
    [DispIdAttribute("15212")]
public abstract virtual string get_CodeAnalysisRuleSet();
    [DispIdAttribute("15212")]
public abstract virtual void set_CodeAnalysisRuleSet(string value);
    [DispIdAttribute("15213")]
public abstract virtual string get_CodeAnalysisRuleSetDirectories();
    [DispIdAttribute("15213")]
public abstract virtual void set_CodeAnalysisRuleSetDirectories(string value);
    [DispIdAttribute("15214")]
public abstract virtual bool get_CodeAnalysisIgnoreBuiltInRuleSets();
    [DispIdAttribute("15214")]
public abstract virtual void set_CodeAnalysisIgnoreBuiltInRuleSets(bool value);
    [DispIdAttribute("15215")]
public abstract virtual string get_CodeAnalysisRuleDirectories();
    [DispIdAttribute("15215")]
public abstract virtual void set_CodeAnalysisRuleDirectories(string value);
    [DispIdAttribute("15216")]
public abstract virtual bool get_CodeAnalysisIgnoreBuiltInRules();
    [DispIdAttribute("15216")]
public abstract virtual void set_CodeAnalysisIgnoreBuiltInRules(bool value);
    [DispIdAttribute("15217")]
public abstract virtual bool get_CodeAnalysisFailOnMissingRules();
    [DispIdAttribute("15217")]
public abstract virtual void set_CodeAnalysisFailOnMissingRules(bool value);
    [DispIdAttribute("17001")]
public abstract virtual bool get_Prefer32Bit();
    [DispIdAttribute("17001")]
public abstract virtual void set_Prefer32Bit(bool value);
    [DispIdAttribute("17310")]
public abstract virtual AuthenticationMode get_AuthenticationMode();
    [DispIdAttribute("17310")]
public abstract virtual void set_AuthenticationMode(AuthenticationMode value);
}
[ComVisibleAttribute("False")]
[GuidAttribute("D35819D7-AC36-4E12-8D70-0212BB170CA6")]
public interface VSLangProj165.VBProjectProperties8 {
    [DispIdAttribute("-2147418112")]
public string __id { get; }
    [DispIdAttribute("10035")]
public object __project { get; }
    [DispIdAttribute("10015")]
public string StartupObject { get; public set; }
    [DispIdAttribute("10016")]
public prjOutputType OutputType { get; public set; }
    [DispIdAttribute("10042")]
public string RootNamespace { get; public set; }
    [DispIdAttribute("10013")]
public string AssemblyName { get; public set; }
    [DispIdAttribute("10044")]
public string AssemblyOriginatorKeyFile { get; public set; }
    [DispIdAttribute("10045")]
public string AssemblyKeyContainerName { get; public set; }
    [DispIdAttribute("10043")]
public prjOriginatorKeyMode AssemblyOriginatorKeyMode { get; public set; }
    [DispIdAttribute("10046")]
public bool DelaySign { get; public set; }
    [DispIdAttribute("10012")]
public string WebServer { get; }
    [DispIdAttribute("10017")]
public string WebServerVersion { get; }
    [DispIdAttribute("10018")]
public string ServerExtensionsVersion { get; }
    [DispIdAttribute("10019")]
public bool LinkRepair { get; public set; }
    [DispIdAttribute("10020")]
public string OfflineURL { get; }
    [DispIdAttribute("10047")]
public string FileSharePath { get; public set; }
    [DispIdAttribute("10048")]
public string ActiveFileSharePath { get; }
    [DispIdAttribute("10049")]
public prjWebAccessMethod WebAccessMethod { get; public set; }
    [DispIdAttribute("10050")]
public prjWebAccessMethod ActiveWebAccessMethod { get; }
    [DispIdAttribute("10021")]
public prjScriptLanguage DefaultClientScript { get; public set; }
    [DispIdAttribute("10022")]
public prjTargetSchema DefaultTargetSchema { get; public set; }
    [DispIdAttribute("10023")]
public prjHTMLPageLayout DefaultHTMLPageLayout { get; public set; }
    [DispIdAttribute("10026")]
public string FileName { get; public set; }
    [DispIdAttribute("10027")]
public string FullPath { get; }
    [DispIdAttribute("10028")]
public string LocalPath { get; }
    [DispIdAttribute("10029")]
public string URL { get; }
    [DispIdAttribute("10033")]
public ProjectConfigurationProperties ActiveConfigurationSettings { get; }
    [DispIdAttribute("10031")]
public object ExtenderNames { get; }
    [DispIdAttribute("10032")]
public string ExtenderCATID { get; }
    [DispIdAttribute("10011")]
public string ApplicationIcon { get; public set; }
    [DispIdAttribute("10051")]
public prjOptionStrict OptionStrict { get; public set; }
    [DispIdAttribute("10056")]
public string ReferencePath { get; public set; }
    [DispIdAttribute("10009")]
public string OutputFileName { get; }
    [DispIdAttribute("10034")]
public string AbsoluteProjectDirectory { get; }
    [DispIdAttribute("10059")]
public prjOptionExplicit OptionExplicit { get; public set; }
    [DispIdAttribute("10060")]
public prjCompare OptionCompare { get; public set; }
    [DispIdAttribute("10067")]
public prjProjectType ProjectType { get; }
    [DispIdAttribute("10068")]
public string DefaultNamespace { get; public set; }
    [DispIdAttribute("10076")]
public string PreBuildEvent { get; public set; }
    [DispIdAttribute("10077")]
public string PostBuildEvent { get; public set; }
    [DispIdAttribute("10078")]
public prjRunPostBuildEvent RunPostBuildEvent { get; public set; }
    [DispIdAttribute("10080")]
public string AspnetVersion { get; }
    [DispIdAttribute("12102")]
public string Title { get; public set; }
    [DispIdAttribute("12103")]
public string Description { get; public set; }
    [DispIdAttribute("12104")]
public string Company { get; public set; }
    [DispIdAttribute("12105")]
public string Product { get; public set; }
    [DispIdAttribute("12106")]
public string Copyright { get; public set; }
    [DispIdAttribute("12107")]
public string Trademark { get; public set; }
    [DispIdAttribute("12108")]
public prjAssemblyType AssemblyType { get; public set; }
    [DispIdAttribute("12109")]
public bool TypeComplianceDiagnostics { get; public set; }
    [DispIdAttribute("12112")]
public string Win32ResourceFile { get; public set; }
    [DispIdAttribute("12115")]
public string AssemblyKeyProviderName { get; public set; }
    [DispIdAttribute("12114")]
public UInt32 AssemblyOriginatorKeyFileType { get; public set; }
    [DispIdAttribute("12116")]
public string AssemblyVersion { get; public set; }
    [DispIdAttribute("12117")]
public string AssemblyFileVersion { get; public set; }
    [DispIdAttribute("12119")]
public bool GenerateManifests { get; public set; }
    [DispIdAttribute("12120")]
public bool EnableSecurityDebugging { get; public set; }
    [DispIdAttribute("12118")]
public string DebugSecurityZoneURL { get; public set; }
    [DispIdAttribute("12122")]
public object Publish { get; }
    [DispIdAttribute("12123")]
public bool ComVisible { get; public set; }
    [DispIdAttribute("12124")]
public string AssemblyGuid { get; public set; }
    [DispIdAttribute("12125")]
public string NeutralResourcesLanguage { get; public set; }
    [DispIdAttribute("12126")]
public bool SignAssembly { get; public set; }
    [DispIdAttribute("12132")]
public bool SignManifests { get; public set; }
    [DispIdAttribute("12127")]
public string TargetZone { get; public set; }
    [DispIdAttribute("12128")]
public string ExcludedPermissions { get; public set; }
    [DispIdAttribute("12129")]
public string ManifestCertificateThumbprint { get; public set; }
    [DispIdAttribute("12130")]
public string ManifestKeyFile { get; public set; }
    [DispIdAttribute("12131")]
public string ManifestTimestampUrl { get; public set; }
    [DispIdAttribute("14101")]
public object MyApplication { get; }
    [DispIdAttribute("14102")]
public string MyType { get; public set; }
    [DispIdAttribute("12200")]
public UInt32 TargetFramework { get; public set; }
    [DispIdAttribute("12201")]
public string ApplicationManifest { get; public set; }
    [DispIdAttribute("15101")]
public prjOptionInfer OptionInfer { get; public set; }
    [DispIdAttribute("12202")]
public string TargetFrameworkMoniker { get; public set; }
    [DispIdAttribute("16101")]
public string LanguageVersion { get; public set; }
    [DispIdAttribute("17000")]
public UInt32 OutputTypeEx { get; public set; }
    [DispIdAttribute("17100")]
public bool AutoGenerateBindingRedirects { get; public set; }
    [DispIdAttribute("-2147418112")]
public abstract virtual string get___id();
    [DispIdAttribute("10035")]
public abstract virtual object get___project();
    [DispIdAttribute("10015")]
public abstract virtual string get_StartupObject();
    [DispIdAttribute("10015")]
public abstract virtual void set_StartupObject(string value);
    [DispIdAttribute("10016")]
public abstract virtual prjOutputType get_OutputType();
    [DispIdAttribute("10016")]
public abstract virtual void set_OutputType(prjOutputType value);
    [DispIdAttribute("10042")]
public abstract virtual string get_RootNamespace();
    [DispIdAttribute("10042")]
public abstract virtual void set_RootNamespace(string value);
    [DispIdAttribute("10013")]
public abstract virtual string get_AssemblyName();
    [DispIdAttribute("10013")]
public abstract virtual void set_AssemblyName(string value);
    [DispIdAttribute("10044")]
public abstract virtual string get_AssemblyOriginatorKeyFile();
    [DispIdAttribute("10044")]
public abstract virtual void set_AssemblyOriginatorKeyFile(string value);
    [DispIdAttribute("10045")]
public abstract virtual string get_AssemblyKeyContainerName();
    [DispIdAttribute("10045")]
public abstract virtual void set_AssemblyKeyContainerName(string value);
    [DispIdAttribute("10043")]
public abstract virtual prjOriginatorKeyMode get_AssemblyOriginatorKeyMode();
    [DispIdAttribute("10043")]
public abstract virtual void set_AssemblyOriginatorKeyMode(prjOriginatorKeyMode value);
    [DispIdAttribute("10046")]
public abstract virtual bool get_DelaySign();
    [DispIdAttribute("10046")]
public abstract virtual void set_DelaySign(bool value);
    [DispIdAttribute("10012")]
public abstract virtual string get_WebServer();
    [DispIdAttribute("10017")]
public abstract virtual string get_WebServerVersion();
    [DispIdAttribute("10018")]
public abstract virtual string get_ServerExtensionsVersion();
    [DispIdAttribute("10019")]
public abstract virtual bool get_LinkRepair();
    [DispIdAttribute("10019")]
public abstract virtual void set_LinkRepair(bool value);
    [DispIdAttribute("10020")]
public abstract virtual string get_OfflineURL();
    [DispIdAttribute("10047")]
public abstract virtual string get_FileSharePath();
    [DispIdAttribute("10047")]
public abstract virtual void set_FileSharePath(string value);
    [DispIdAttribute("10048")]
public abstract virtual string get_ActiveFileSharePath();
    [DispIdAttribute("10049")]
public abstract virtual prjWebAccessMethod get_WebAccessMethod();
    [DispIdAttribute("10049")]
public abstract virtual void set_WebAccessMethod(prjWebAccessMethod value);
    [DispIdAttribute("10050")]
public abstract virtual prjWebAccessMethod get_ActiveWebAccessMethod();
    [DispIdAttribute("10021")]
public abstract virtual prjScriptLanguage get_DefaultClientScript();
    [DispIdAttribute("10021")]
public abstract virtual void set_DefaultClientScript(prjScriptLanguage value);
    [DispIdAttribute("10022")]
public abstract virtual prjTargetSchema get_DefaultTargetSchema();
    [DispIdAttribute("10022")]
public abstract virtual void set_DefaultTargetSchema(prjTargetSchema value);
    [DispIdAttribute("10023")]
public abstract virtual prjHTMLPageLayout get_DefaultHTMLPageLayout();
    [DispIdAttribute("10023")]
public abstract virtual void set_DefaultHTMLPageLayout(prjHTMLPageLayout value);
    [DispIdAttribute("10026")]
public abstract virtual string get_FileName();
    [DispIdAttribute("10026")]
public abstract virtual void set_FileName(string value);
    [DispIdAttribute("10027")]
public abstract virtual string get_FullPath();
    [DispIdAttribute("10028")]
public abstract virtual string get_LocalPath();
    [DispIdAttribute("10029")]
public abstract virtual string get_URL();
    [DispIdAttribute("10033")]
public abstract virtual ProjectConfigurationProperties get_ActiveConfigurationSettings();
    [DispIdAttribute("10030")]
public abstract virtual object get_Extender(string extenderName);
    [DispIdAttribute("10031")]
public abstract virtual object get_ExtenderNames();
    [DispIdAttribute("10032")]
public abstract virtual string get_ExtenderCATID();
    [DispIdAttribute("10011")]
public abstract virtual string get_ApplicationIcon();
    [DispIdAttribute("10011")]
public abstract virtual void set_ApplicationIcon(string value);
    [DispIdAttribute("10051")]
public abstract virtual prjOptionStrict get_OptionStrict();
    [DispIdAttribute("10051")]
public abstract virtual void set_OptionStrict(prjOptionStrict value);
    [DispIdAttribute("10056")]
public abstract virtual string get_ReferencePath();
    [DispIdAttribute("10056")]
public abstract virtual void set_ReferencePath(string value);
    [DispIdAttribute("10009")]
public abstract virtual string get_OutputFileName();
    [DispIdAttribute("10034")]
public abstract virtual string get_AbsoluteProjectDirectory();
    [DispIdAttribute("10059")]
public abstract virtual prjOptionExplicit get_OptionExplicit();
    [DispIdAttribute("10059")]
public abstract virtual void set_OptionExplicit(prjOptionExplicit value);
    [DispIdAttribute("10060")]
public abstract virtual prjCompare get_OptionCompare();
    [DispIdAttribute("10060")]
public abstract virtual void set_OptionCompare(prjCompare value);
    [DispIdAttribute("10067")]
public abstract virtual prjProjectType get_ProjectType();
    [DispIdAttribute("10068")]
public abstract virtual string get_DefaultNamespace();
    [DispIdAttribute("10068")]
public abstract virtual void set_DefaultNamespace(string value);
    [DispIdAttribute("10076")]
public abstract virtual string get_PreBuildEvent();
    [DispIdAttribute("10076")]
public abstract virtual void set_PreBuildEvent(string value);
    [DispIdAttribute("10077")]
public abstract virtual string get_PostBuildEvent();
    [DispIdAttribute("10077")]
public abstract virtual void set_PostBuildEvent(string value);
    [DispIdAttribute("10078")]
public abstract virtual prjRunPostBuildEvent get_RunPostBuildEvent();
    [DispIdAttribute("10078")]
public abstract virtual void set_RunPostBuildEvent(prjRunPostBuildEvent value);
    [DispIdAttribute("10080")]
public abstract virtual string get_AspnetVersion();
    [DispIdAttribute("12102")]
public abstract virtual string get_Title();
    [DispIdAttribute("12102")]
public abstract virtual void set_Title(string value);
    [DispIdAttribute("12103")]
public abstract virtual string get_Description();
    [DispIdAttribute("12103")]
public abstract virtual void set_Description(string value);
    [DispIdAttribute("12104")]
public abstract virtual string get_Company();
    [DispIdAttribute("12104")]
public abstract virtual void set_Company(string value);
    [DispIdAttribute("12105")]
public abstract virtual string get_Product();
    [DispIdAttribute("12105")]
public abstract virtual void set_Product(string value);
    [DispIdAttribute("12106")]
public abstract virtual string get_Copyright();
    [DispIdAttribute("12106")]
public abstract virtual void set_Copyright(string value);
    [DispIdAttribute("12107")]
public abstract virtual string get_Trademark();
    [DispIdAttribute("12107")]
public abstract virtual void set_Trademark(string value);
    [DispIdAttribute("12108")]
public abstract virtual prjAssemblyType get_AssemblyType();
    [DispIdAttribute("12108")]
public abstract virtual void set_AssemblyType(prjAssemblyType value);
    [DispIdAttribute("12109")]
public abstract virtual bool get_TypeComplianceDiagnostics();
    [DispIdAttribute("12109")]
public abstract virtual void set_TypeComplianceDiagnostics(bool value);
    [DispIdAttribute("12112")]
public abstract virtual string get_Win32ResourceFile();
    [DispIdAttribute("12112")]
public abstract virtual void set_Win32ResourceFile(string value);
    [DispIdAttribute("12115")]
public abstract virtual string get_AssemblyKeyProviderName();
    [DispIdAttribute("12115")]
public abstract virtual void set_AssemblyKeyProviderName(string value);
    [DispIdAttribute("12114")]
public abstract virtual UInt32 get_AssemblyOriginatorKeyFileType();
    [DispIdAttribute("12114")]
public abstract virtual void set_AssemblyOriginatorKeyFileType(UInt32 value);
    [DispIdAttribute("12116")]
public abstract virtual string get_AssemblyVersion();
    [DispIdAttribute("12116")]
public abstract virtual void set_AssemblyVersion(string value);
    [DispIdAttribute("12117")]
public abstract virtual string get_AssemblyFileVersion();
    [DispIdAttribute("12117")]
public abstract virtual void set_AssemblyFileVersion(string value);
    [DispIdAttribute("12119")]
public abstract virtual bool get_GenerateManifests();
    [DispIdAttribute("12119")]
public abstract virtual void set_GenerateManifests(bool value);
    [DispIdAttribute("12120")]
public abstract virtual bool get_EnableSecurityDebugging();
    [DispIdAttribute("12120")]
public abstract virtual void set_EnableSecurityDebugging(bool value);
    [DispIdAttribute("12118")]
public abstract virtual string get_DebugSecurityZoneURL();
    [DispIdAttribute("12118")]
public abstract virtual void set_DebugSecurityZoneURL(string value);
    [DispIdAttribute("12122")]
public abstract virtual object get_Publish();
    [DispIdAttribute("12123")]
public abstract virtual bool get_ComVisible();
    [DispIdAttribute("12123")]
public abstract virtual void set_ComVisible(bool value);
    [DispIdAttribute("12124")]
public abstract virtual string get_AssemblyGuid();
    [DispIdAttribute("12124")]
public abstract virtual void set_AssemblyGuid(string value);
    [DispIdAttribute("12125")]
public abstract virtual string get_NeutralResourcesLanguage();
    [DispIdAttribute("12125")]
public abstract virtual void set_NeutralResourcesLanguage(string value);
    [DispIdAttribute("12126")]
public abstract virtual bool get_SignAssembly();
    [DispIdAttribute("12126")]
public abstract virtual void set_SignAssembly(bool value);
    [DispIdAttribute("12132")]
public abstract virtual bool get_SignManifests();
    [DispIdAttribute("12132")]
public abstract virtual void set_SignManifests(bool value);
    [DispIdAttribute("12127")]
public abstract virtual string get_TargetZone();
    [DispIdAttribute("12127")]
public abstract virtual void set_TargetZone(string value);
    [DispIdAttribute("12128")]
public abstract virtual string get_ExcludedPermissions();
    [DispIdAttribute("12128")]
public abstract virtual void set_ExcludedPermissions(string value);
    [DispIdAttribute("12129")]
public abstract virtual string get_ManifestCertificateThumbprint();
    [DispIdAttribute("12129")]
public abstract virtual void set_ManifestCertificateThumbprint(string value);
    [DispIdAttribute("12130")]
public abstract virtual string get_ManifestKeyFile();
    [DispIdAttribute("12130")]
public abstract virtual void set_ManifestKeyFile(string value);
    [DispIdAttribute("12131")]
public abstract virtual string get_ManifestTimestampUrl();
    [DispIdAttribute("12131")]
public abstract virtual void set_ManifestTimestampUrl(string value);
    [DispIdAttribute("14101")]
public abstract virtual object get_MyApplication();
    [DispIdAttribute("14102")]
public abstract virtual string get_MyType();
    [DispIdAttribute("14102")]
public abstract virtual void set_MyType(string value);
    [DispIdAttribute("12200")]
public abstract virtual UInt32 get_TargetFramework();
    [DispIdAttribute("12200")]
public abstract virtual void set_TargetFramework(UInt32 value);
    [DispIdAttribute("12201")]
public abstract virtual string get_ApplicationManifest();
    [DispIdAttribute("12201")]
public abstract virtual void set_ApplicationManifest(string value);
    [DispIdAttribute("15101")]
public abstract virtual prjOptionInfer get_OptionInfer();
    [DispIdAttribute("15101")]
public abstract virtual void set_OptionInfer(prjOptionInfer value);
    [DispIdAttribute("12202")]
public abstract virtual string get_TargetFrameworkMoniker();
    [DispIdAttribute("12202")]
public abstract virtual void set_TargetFrameworkMoniker(string value);
    [DispIdAttribute("16101")]
public abstract virtual string get_LanguageVersion();
    [DispIdAttribute("16101")]
public abstract virtual void set_LanguageVersion(string value);
    [DispIdAttribute("17000")]
public abstract virtual UInt32 get_OutputTypeEx();
    [DispIdAttribute("17000")]
public abstract virtual void set_OutputTypeEx(UInt32 value);
    [DispIdAttribute("17100")]
public abstract virtual bool get_AutoGenerateBindingRedirects();
    [DispIdAttribute("17100")]
public abstract virtual void set_AutoGenerateBindingRedirects(bool value);
}
public enum VSLangProj165.VsProjPropId158 : Enum {
    public int value__;
    public static VsProjPropId158 VBPROJPROPID_AutoGenerateBindingRedirects;
}
public enum VSLangProj165.VsProjPropId165 : Enum {
    public int value__;
    public static VsProjPropId165 VBPROJPROPID_AuthenticationMode;
}
[ExcludeFromIDLAttribute]
[InterfaceTypeAttribute("1")]
[GuidAttribute("91cb30a2-7ffd-468e-8270-a99c20a4fe42")]
public interface VSLangProj1711.CSharpProjectConfigurationProperties8 {
    public string __id { get; }
    public bool DebugSymbols { get; public set; }
    public bool DefineDebug { get; public set; }
    public bool DefineTrace { get; public set; }
    public string OutputPath { get; public set; }
    public string IntermediatePath { get; public set; }
    public string DefineConstants { get; public set; }
    public bool RemoveIntegerChecks { get; public set; }
    public UInt32 BaseAddress { get; public set; }
    public bool AllowUnsafeBlocks { get; public set; }
    public bool CheckForOverflowUnderflow { get; public set; }
    public string DocumentationFile { get; public set; }
    public bool Optimize { get; public set; }
    public bool IncrementalBuild { get; public set; }
    public string StartProgram { get; public set; }
    public string StartWorkingDirectory { get; public set; }
    public string StartURL { get; public set; }
    public string StartPage { get; public set; }
    public string StartArguments { get; public set; }
    public bool StartWithIE { get; public set; }
    public bool EnableASPDebugging { get; public set; }
    public bool EnableASPXDebugging { get; public set; }
    public bool EnableUnmanagedDebugging { get; public set; }
    public prjStartAction StartAction { get; public set; }
    public object ExtenderNames { get; }
    public string ExtenderCATID { get; }
    public prjWarningLevel WarningLevel { get; public set; }
    public bool TreatWarningsAsErrors { get; public set; }
    public bool EnableSQLServerDebugging { get; public set; }
    public UInt32 FileAlignment { get; public set; }
    public bool RegisterForComInterop { get; public set; }
    public string ConfigurationOverrideFile { get; public set; }
    public bool RemoteDebugEnabled { get; public set; }
    public string RemoteDebugMachine { get; public set; }
    public string NoWarn { get; public set; }
    public bool NoStdLib { get; public set; }
    public string DebugInfo { get; public set; }
    public string PlatformTarget { get; public set; }
    public string TreatSpecificWarningsAsErrors { get; public set; }
    public bool RunCodeAnalysis { get; public set; }
    public string CodeAnalysisLogFile { get; public set; }
    public string CodeAnalysisRuleAssemblies { get; public set; }
    public string CodeAnalysisInputAssembly { get; public set; }
    public string CodeAnalysisRules { get; public set; }
    public string CodeAnalysisSpellCheckLanguages { get; public set; }
    public bool CodeAnalysisUseTypeNameInSuppression { get; public set; }
    public string CodeAnalysisModuleSuppressionsFile { get; public set; }
    public bool UseVSHostingProcess { get; public set; }
    public sgenGenerationOption GenerateSerializationAssemblies { get; public set; }
    public string LanguageVersion { get; public set; }
    public string ErrorReport { get; public set; }
    public bool CodeAnalysisIgnoreGeneratedCode { get; public set; }
    public bool CodeAnalysisOverrideRuleVisibilities { get; public set; }
    public string CodeAnalysisDictionaries { get; public set; }
    public string CodeAnalysisCulture { get; public set; }
    public string CodeAnalysisRuleSet { get; public set; }
    public string CodeAnalysisRuleSetDirectories { get; public set; }
    public bool CodeAnalysisIgnoreBuiltInRuleSets { get; public set; }
    public string CodeAnalysisRuleDirectories { get; public set; }
    public bool CodeAnalysisIgnoreBuiltInRules { get; public set; }
    public bool CodeAnalysisFailOnMissingRules { get; public set; }
    public bool Prefer32Bit { get; public set; }
    public AuthenticationMode AuthenticationMode { get; public set; }
    public bool PreferNativeArm64 { get; public set; }
    public abstract virtual string get___id();
    public abstract virtual bool get_DebugSymbols();
    public abstract virtual void set_DebugSymbols(bool value);
    public abstract virtual bool get_DefineDebug();
    public abstract virtual void set_DefineDebug(bool value);
    public abstract virtual bool get_DefineTrace();
    public abstract virtual void set_DefineTrace(bool value);
    public abstract virtual string get_OutputPath();
    public abstract virtual void set_OutputPath(string value);
    public abstract virtual string get_IntermediatePath();
    public abstract virtual void set_IntermediatePath(string value);
    public abstract virtual string get_DefineConstants();
    public abstract virtual void set_DefineConstants(string value);
    public abstract virtual bool get_RemoveIntegerChecks();
    public abstract virtual void set_RemoveIntegerChecks(bool value);
    public abstract virtual UInt32 get_BaseAddress();
    public abstract virtual void set_BaseAddress(UInt32 value);
    public abstract virtual bool get_AllowUnsafeBlocks();
    public abstract virtual void set_AllowUnsafeBlocks(bool value);
    public abstract virtual bool get_CheckForOverflowUnderflow();
    public abstract virtual void set_CheckForOverflowUnderflow(bool value);
    public abstract virtual string get_DocumentationFile();
    public abstract virtual void set_DocumentationFile(string value);
    public abstract virtual bool get_Optimize();
    public abstract virtual void set_Optimize(bool value);
    public abstract virtual bool get_IncrementalBuild();
    public abstract virtual void set_IncrementalBuild(bool value);
    public abstract virtual string get_StartProgram();
    public abstract virtual void set_StartProgram(string value);
    public abstract virtual string get_StartWorkingDirectory();
    public abstract virtual void set_StartWorkingDirectory(string value);
    public abstract virtual string get_StartURL();
    public abstract virtual void set_StartURL(string value);
    public abstract virtual string get_StartPage();
    public abstract virtual void set_StartPage(string value);
    public abstract virtual string get_StartArguments();
    public abstract virtual void set_StartArguments(string value);
    public abstract virtual bool get_StartWithIE();
    public abstract virtual void set_StartWithIE(bool value);
    public abstract virtual bool get_EnableASPDebugging();
    public abstract virtual void set_EnableASPDebugging(bool value);
    public abstract virtual bool get_EnableASPXDebugging();
    public abstract virtual void set_EnableASPXDebugging(bool value);
    public abstract virtual bool get_EnableUnmanagedDebugging();
    public abstract virtual void set_EnableUnmanagedDebugging(bool value);
    public abstract virtual prjStartAction get_StartAction();
    public abstract virtual void set_StartAction(prjStartAction value);
    public abstract virtual object get_Extender(string extenderName);
    public abstract virtual object get_ExtenderNames();
    public abstract virtual string get_ExtenderCATID();
    public abstract virtual prjWarningLevel get_WarningLevel();
    public abstract virtual void set_WarningLevel(prjWarningLevel value);
    public abstract virtual bool get_TreatWarningsAsErrors();
    public abstract virtual void set_TreatWarningsAsErrors(bool value);
    public abstract virtual bool get_EnableSQLServerDebugging();
    public abstract virtual void set_EnableSQLServerDebugging(bool value);
    public abstract virtual UInt32 get_FileAlignment();
    public abstract virtual void set_FileAlignment(UInt32 value);
    public abstract virtual bool get_RegisterForComInterop();
    public abstract virtual void set_RegisterForComInterop(bool value);
    public abstract virtual string get_ConfigurationOverrideFile();
    public abstract virtual void set_ConfigurationOverrideFile(string value);
    public abstract virtual bool get_RemoteDebugEnabled();
    public abstract virtual void set_RemoteDebugEnabled(bool value);
    public abstract virtual string get_RemoteDebugMachine();
    public abstract virtual void set_RemoteDebugMachine(string value);
    public abstract virtual string get_NoWarn();
    public abstract virtual void set_NoWarn(string value);
    public abstract virtual bool get_NoStdLib();
    public abstract virtual void set_NoStdLib(bool value);
    public abstract virtual string get_DebugInfo();
    public abstract virtual void set_DebugInfo(string value);
    public abstract virtual string get_PlatformTarget();
    public abstract virtual void set_PlatformTarget(string value);
    public abstract virtual string get_TreatSpecificWarningsAsErrors();
    public abstract virtual void set_TreatSpecificWarningsAsErrors(string value);
    public abstract virtual bool get_RunCodeAnalysis();
    public abstract virtual void set_RunCodeAnalysis(bool value);
    public abstract virtual string get_CodeAnalysisLogFile();
    public abstract virtual void set_CodeAnalysisLogFile(string value);
    public abstract virtual string get_CodeAnalysisRuleAssemblies();
    public abstract virtual void set_CodeAnalysisRuleAssemblies(string value);
    public abstract virtual string get_CodeAnalysisInputAssembly();
    public abstract virtual void set_CodeAnalysisInputAssembly(string value);
    public abstract virtual string get_CodeAnalysisRules();
    public abstract virtual void set_CodeAnalysisRules(string value);
    public abstract virtual string get_CodeAnalysisSpellCheckLanguages();
    public abstract virtual void set_CodeAnalysisSpellCheckLanguages(string value);
    public abstract virtual bool get_CodeAnalysisUseTypeNameInSuppression();
    public abstract virtual void set_CodeAnalysisUseTypeNameInSuppression(bool value);
    public abstract virtual string get_CodeAnalysisModuleSuppressionsFile();
    public abstract virtual void set_CodeAnalysisModuleSuppressionsFile(string value);
    public abstract virtual bool get_UseVSHostingProcess();
    public abstract virtual void set_UseVSHostingProcess(bool value);
    public abstract virtual sgenGenerationOption get_GenerateSerializationAssemblies();
    public abstract virtual void set_GenerateSerializationAssemblies(sgenGenerationOption value);
    public abstract virtual string get_LanguageVersion();
    public abstract virtual void set_LanguageVersion(string value);
    public abstract virtual string get_ErrorReport();
    public abstract virtual void set_ErrorReport(string value);
    public abstract virtual bool get_CodeAnalysisIgnoreGeneratedCode();
    public abstract virtual void set_CodeAnalysisIgnoreGeneratedCode(bool value);
    public abstract virtual bool get_CodeAnalysisOverrideRuleVisibilities();
    public abstract virtual void set_CodeAnalysisOverrideRuleVisibilities(bool value);
    public abstract virtual string get_CodeAnalysisDictionaries();
    public abstract virtual void set_CodeAnalysisDictionaries(string value);
    public abstract virtual string get_CodeAnalysisCulture();
    public abstract virtual void set_CodeAnalysisCulture(string value);
    public abstract virtual string get_CodeAnalysisRuleSet();
    public abstract virtual void set_CodeAnalysisRuleSet(string value);
    public abstract virtual string get_CodeAnalysisRuleSetDirectories();
    public abstract virtual void set_CodeAnalysisRuleSetDirectories(string value);
    public abstract virtual bool get_CodeAnalysisIgnoreBuiltInRuleSets();
    public abstract virtual void set_CodeAnalysisIgnoreBuiltInRuleSets(bool value);
    public abstract virtual string get_CodeAnalysisRuleDirectories();
    public abstract virtual void set_CodeAnalysisRuleDirectories(string value);
    public abstract virtual bool get_CodeAnalysisIgnoreBuiltInRules();
    public abstract virtual void set_CodeAnalysisIgnoreBuiltInRules(bool value);
    public abstract virtual bool get_CodeAnalysisFailOnMissingRules();
    public abstract virtual void set_CodeAnalysisFailOnMissingRules(bool value);
    public abstract virtual bool get_Prefer32Bit();
    public abstract virtual void set_Prefer32Bit(bool value);
    public abstract virtual AuthenticationMode get_AuthenticationMode();
    public abstract virtual void set_AuthenticationMode(AuthenticationMode value);
    public abstract virtual bool get_PreferNativeArm64();
    public abstract virtual void set_PreferNativeArm64(bool value);
}
[ExcludeFromIDLAttribute]
[InterfaceTypeAttribute("1")]
[GuidAttribute("877DEED7-A481-40CC-AE38-78F0F8128B2A")]
public interface VSLangProj1711.VBProjectConfigurationProperties8 {
    public string __id { get; }
    public bool DebugSymbols { get; public set; }
    public bool DefineDebug { get; public set; }
    public bool DefineTrace { get; public set; }
    public string OutputPath { get; public set; }
    public string IntermediatePath { get; public set; }
    public string DefineConstants { get; public set; }
    public bool RemoveIntegerChecks { get; public set; }
    public UInt32 BaseAddress { get; public set; }
    public bool AllowUnsafeBlocks { get; public set; }
    public bool CheckForOverflowUnderflow { get; public set; }
    public string DocumentationFile { get; public set; }
    public bool Optimize { get; public set; }
    public bool IncrementalBuild { get; public set; }
    public string StartProgram { get; public set; }
    public string StartWorkingDirectory { get; public set; }
    public string StartURL { get; public set; }
    public string StartPage { get; public set; }
    public string StartArguments { get; public set; }
    public bool StartWithIE { get; public set; }
    public bool EnableASPDebugging { get; public set; }
    public bool EnableASPXDebugging { get; public set; }
    public bool EnableUnmanagedDebugging { get; public set; }
    public prjStartAction StartAction { get; public set; }
    public object ExtenderNames { get; }
    public string ExtenderCATID { get; }
    public prjWarningLevel WarningLevel { get; public set; }
    public bool TreatWarningsAsErrors { get; public set; }
    public bool EnableSQLServerDebugging { get; public set; }
    public UInt32 FileAlignment { get; public set; }
    public bool RegisterForComInterop { get; public set; }
    public string ConfigurationOverrideFile { get; public set; }
    public bool RemoteDebugEnabled { get; public set; }
    public string RemoteDebugMachine { get; public set; }
    public string NoWarn { get; public set; }
    public bool NoStdLib { get; public set; }
    public string DebugInfo { get; public set; }
    public string PlatformTarget { get; public set; }
    public string TreatSpecificWarningsAsErrors { get; public set; }
    public bool RunCodeAnalysis { get; public set; }
    public string CodeAnalysisLogFile { get; public set; }
    public string CodeAnalysisRuleAssemblies { get; public set; }
    public string CodeAnalysisInputAssembly { get; public set; }
    public string CodeAnalysisRules { get; public set; }
    public string CodeAnalysisSpellCheckLanguages { get; public set; }
    public bool CodeAnalysisUseTypeNameInSuppression { get; public set; }
    public string CodeAnalysisModuleSuppressionsFile { get; public set; }
    public bool UseVSHostingProcess { get; public set; }
    public sgenGenerationOption GenerateSerializationAssemblies { get; public set; }
    public bool CodeAnalysisIgnoreGeneratedCode { get; public set; }
    public bool CodeAnalysisOverrideRuleVisibilities { get; public set; }
    public string CodeAnalysisDictionaries { get; public set; }
    public string CodeAnalysisCulture { get; public set; }
    public string CodeAnalysisRuleSet { get; public set; }
    public string CodeAnalysisRuleSetDirectories { get; public set; }
    public bool CodeAnalysisIgnoreBuiltInRuleSets { get; public set; }
    public string CodeAnalysisRuleDirectories { get; public set; }
    public bool CodeAnalysisIgnoreBuiltInRules { get; public set; }
    public bool CodeAnalysisFailOnMissingRules { get; public set; }
    public bool Prefer32Bit { get; public set; }
    public AuthenticationMode AuthenticationMode { get; public set; }
    public bool PreferNativeArm64 { get; public set; }
    public abstract virtual string get___id();
    public abstract virtual bool get_DebugSymbols();
    public abstract virtual void set_DebugSymbols(bool value);
    public abstract virtual bool get_DefineDebug();
    public abstract virtual void set_DefineDebug(bool value);
    public abstract virtual bool get_DefineTrace();
    public abstract virtual void set_DefineTrace(bool value);
    public abstract virtual string get_OutputPath();
    public abstract virtual void set_OutputPath(string value);
    public abstract virtual string get_IntermediatePath();
    public abstract virtual void set_IntermediatePath(string value);
    public abstract virtual string get_DefineConstants();
    public abstract virtual void set_DefineConstants(string value);
    public abstract virtual bool get_RemoveIntegerChecks();
    public abstract virtual void set_RemoveIntegerChecks(bool value);
    public abstract virtual UInt32 get_BaseAddress();
    public abstract virtual void set_BaseAddress(UInt32 value);
    public abstract virtual bool get_AllowUnsafeBlocks();
    public abstract virtual void set_AllowUnsafeBlocks(bool value);
    public abstract virtual bool get_CheckForOverflowUnderflow();
    public abstract virtual void set_CheckForOverflowUnderflow(bool value);
    public abstract virtual string get_DocumentationFile();
    public abstract virtual void set_DocumentationFile(string value);
    public abstract virtual bool get_Optimize();
    public abstract virtual void set_Optimize(bool value);
    public abstract virtual bool get_IncrementalBuild();
    public abstract virtual void set_IncrementalBuild(bool value);
    public abstract virtual string get_StartProgram();
    public abstract virtual void set_StartProgram(string value);
    public abstract virtual string get_StartWorkingDirectory();
    public abstract virtual void set_StartWorkingDirectory(string value);
    public abstract virtual string get_StartURL();
    public abstract virtual void set_StartURL(string value);
    public abstract virtual string get_StartPage();
    public abstract virtual void set_StartPage(string value);
    public abstract virtual string get_StartArguments();
    public abstract virtual void set_StartArguments(string value);
    public abstract virtual bool get_StartWithIE();
    public abstract virtual void set_StartWithIE(bool value);
    public abstract virtual bool get_EnableASPDebugging();
    public abstract virtual void set_EnableASPDebugging(bool value);
    public abstract virtual bool get_EnableASPXDebugging();
    public abstract virtual void set_EnableASPXDebugging(bool value);
    public abstract virtual bool get_EnableUnmanagedDebugging();
    public abstract virtual void set_EnableUnmanagedDebugging(bool value);
    public abstract virtual prjStartAction get_StartAction();
    public abstract virtual void set_StartAction(prjStartAction value);
    public abstract virtual object get_Extender(string extenderName);
    public abstract virtual object get_ExtenderNames();
    public abstract virtual string get_ExtenderCATID();
    public abstract virtual prjWarningLevel get_WarningLevel();
    public abstract virtual void set_WarningLevel(prjWarningLevel value);
    public abstract virtual bool get_TreatWarningsAsErrors();
    public abstract virtual void set_TreatWarningsAsErrors(bool value);
    public abstract virtual bool get_EnableSQLServerDebugging();
    public abstract virtual void set_EnableSQLServerDebugging(bool value);
    public abstract virtual UInt32 get_FileAlignment();
    public abstract virtual void set_FileAlignment(UInt32 value);
    public abstract virtual bool get_RegisterForComInterop();
    public abstract virtual void set_RegisterForComInterop(bool value);
    public abstract virtual string get_ConfigurationOverrideFile();
    public abstract virtual void set_ConfigurationOverrideFile(string value);
    public abstract virtual bool get_RemoteDebugEnabled();
    public abstract virtual void set_RemoteDebugEnabled(bool value);
    public abstract virtual string get_RemoteDebugMachine();
    public abstract virtual void set_RemoteDebugMachine(string value);
    public abstract virtual string get_NoWarn();
    public abstract virtual void set_NoWarn(string value);
    public abstract virtual bool get_NoStdLib();
    public abstract virtual void set_NoStdLib(bool value);
    public abstract virtual string get_DebugInfo();
    public abstract virtual void set_DebugInfo(string value);
    public abstract virtual string get_PlatformTarget();
    public abstract virtual void set_PlatformTarget(string value);
    public abstract virtual string get_TreatSpecificWarningsAsErrors();
    public abstract virtual void set_TreatSpecificWarningsAsErrors(string value);
    public abstract virtual bool get_RunCodeAnalysis();
    public abstract virtual void set_RunCodeAnalysis(bool value);
    public abstract virtual string get_CodeAnalysisLogFile();
    public abstract virtual void set_CodeAnalysisLogFile(string value);
    public abstract virtual string get_CodeAnalysisRuleAssemblies();
    public abstract virtual void set_CodeAnalysisRuleAssemblies(string value);
    public abstract virtual string get_CodeAnalysisInputAssembly();
    public abstract virtual void set_CodeAnalysisInputAssembly(string value);
    public abstract virtual string get_CodeAnalysisRules();
    public abstract virtual void set_CodeAnalysisRules(string value);
    public abstract virtual string get_CodeAnalysisSpellCheckLanguages();
    public abstract virtual void set_CodeAnalysisSpellCheckLanguages(string value);
    public abstract virtual bool get_CodeAnalysisUseTypeNameInSuppression();
    public abstract virtual void set_CodeAnalysisUseTypeNameInSuppression(bool value);
    public abstract virtual string get_CodeAnalysisModuleSuppressionsFile();
    public abstract virtual void set_CodeAnalysisModuleSuppressionsFile(string value);
    public abstract virtual bool get_UseVSHostingProcess();
    public abstract virtual void set_UseVSHostingProcess(bool value);
    public abstract virtual sgenGenerationOption get_GenerateSerializationAssemblies();
    public abstract virtual void set_GenerateSerializationAssemblies(sgenGenerationOption value);
    public abstract virtual bool get_CodeAnalysisIgnoreGeneratedCode();
    public abstract virtual void set_CodeAnalysisIgnoreGeneratedCode(bool value);
    public abstract virtual bool get_CodeAnalysisOverrideRuleVisibilities();
    public abstract virtual void set_CodeAnalysisOverrideRuleVisibilities(bool value);
    public abstract virtual string get_CodeAnalysisDictionaries();
    public abstract virtual void set_CodeAnalysisDictionaries(string value);
    public abstract virtual string get_CodeAnalysisCulture();
    public abstract virtual void set_CodeAnalysisCulture(string value);
    public abstract virtual string get_CodeAnalysisRuleSet();
    public abstract virtual void set_CodeAnalysisRuleSet(string value);
    public abstract virtual string get_CodeAnalysisRuleSetDirectories();
    public abstract virtual void set_CodeAnalysisRuleSetDirectories(string value);
    public abstract virtual bool get_CodeAnalysisIgnoreBuiltInRuleSets();
    public abstract virtual void set_CodeAnalysisIgnoreBuiltInRuleSets(bool value);
    public abstract virtual string get_CodeAnalysisRuleDirectories();
    public abstract virtual void set_CodeAnalysisRuleDirectories(string value);
    public abstract virtual bool get_CodeAnalysisIgnoreBuiltInRules();
    public abstract virtual void set_CodeAnalysisIgnoreBuiltInRules(bool value);
    public abstract virtual bool get_CodeAnalysisFailOnMissingRules();
    public abstract virtual void set_CodeAnalysisFailOnMissingRules(bool value);
    public abstract virtual bool get_Prefer32Bit();
    public abstract virtual void set_Prefer32Bit(bool value);
    public abstract virtual AuthenticationMode get_AuthenticationMode();
    public abstract virtual void set_AuthenticationMode(AuthenticationMode value);
    public abstract virtual bool get_PreferNativeArm64();
    public abstract virtual void set_PreferNativeArm64(bool value);
}
[ExcludeFromIDLAttribute]
public enum VSLangProj1711.VsProjPropId1711 : Enum {
    public int value__;
    public static VsProjPropId1711 VBPROJPROPID_PreferNativeArm64;
}
[GuidAttribute("48DEC64C-7B34-4495-9C2D-2E4E7CA31D53")]
public enum VSLangProj2.pkgCompare : Enum {
    public int value__;
    public static pkgCompare pkgCompareBinary;
    public static pkgCompare pkgCompareText;
}
[GuidAttribute("06954624-6A04-4EDD-9254-B86FD55D56EF")]
public enum VSLangProj2.pkgOptionExplicit : Enum {
    public int value__;
    public static pkgOptionExplicit pkgOptionExplicitOff;
    public static pkgOptionExplicit pkgOptionExplicitOn;
}
[GuidAttribute("51A0B77A-9B73-487F-88A0-14B6892E3E19")]
public enum VSLangProj2.pkgOptionStrict : Enum {
    public int value__;
    public static pkgOptionStrict pkgOptionStrictOff;
    public static pkgOptionStrict pkgOptionStrictOn;
}
[GuidAttribute("34D3C327-833A-4BB5-A509-AAD9CA7A0B07")]
public abstract class VSLangProj2.PrjBrowseObjectCATID2 : object {
    public static string prjCATIDVJSharpProjectBrowseObject;
    public static string prjCATIDVJSharpProjectConfigBrowseObject;
    public static string prjCATIDVJSharpFileBrowseObject;
    public static string prjCATIDVJSharpFolderBrowseObject;
    public static string prjCATIDVJSharpReferenceBrowseObject;
    public static string prjCATIDVJSharpConfig;
}
[GuidAttribute("74B81DCA-3ED3-4F22-8E15-35532F832A32")]
public abstract class VSLangProj2.PrjKind2 : object {
    public static string prjKindSDEVBProject;
    public static string prjKindSDECSharpProject;
    public static string prjKindVJSharpProject;
}
[GuidAttribute("A9DEC9CC-C687-49CA-9316-DB1B4FAE61BF")]
public enum VSLangProj2.prjRunPostBuildEvent : Enum {
    public int value__;
    public static prjRunPostBuildEvent prjRunPostBuildEventAlways;
    public static prjRunPostBuildEvent prjRunPostBuildEventOnBuildSuccess;
    public static prjRunPostBuildEvent prjRunPostBuildEventOnOutputUpdated;
}
[GuidAttribute("3CDAA65D-1E9D-11D4-B203-00C04F79CACB")]
public interface VSLangProj2.ProjectConfigurationProperties2 {
    [DispIdAttribute("-2147418112")]
public string __id { get; }
    [DispIdAttribute("10001")]
public bool DebugSymbols { get; public set; }
    [DispIdAttribute("10036")]
public bool DefineDebug { get; public set; }
    [DispIdAttribute("10037")]
public bool DefineTrace { get; public set; }
    [DispIdAttribute("10004")]
public string OutputPath { get; public set; }
    [DispIdAttribute("10010")]
public string IntermediatePath { get; public set; }
    [DispIdAttribute("10005")]
public string DefineConstants { get; public set; }
    [DispIdAttribute("10054")]
public bool RemoveIntegerChecks { get; public set; }
    [DispIdAttribute("10055")]
public UInt32 BaseAddress { get; public set; }
    [DispIdAttribute("10061")]
public bool AllowUnsafeBlocks { get; public set; }
    [DispIdAttribute("10062")]
public bool CheckForOverflowUnderflow { get; public set; }
    [DispIdAttribute("10063")]
public string DocumentationFile { get; public set; }
    [DispIdAttribute("10064")]
public bool Optimize { get; public set; }
    [DispIdAttribute("10065")]
public bool IncrementalBuild { get; public set; }
    [DispIdAttribute("10006")]
public string StartProgram { get; public set; }
    [DispIdAttribute("10007")]
public string StartWorkingDirectory { get; public set; }
    [DispIdAttribute("10008")]
public string StartURL { get; public set; }
    [DispIdAttribute("10038")]
public string StartPage { get; public set; }
    [DispIdAttribute("10002")]
public string StartArguments { get; public set; }
    [DispIdAttribute("10039")]
public bool StartWithIE { get; public set; }
    [DispIdAttribute("10040")]
public bool EnableASPDebugging { get; public set; }
    [DispIdAttribute("10041")]
public bool EnableASPXDebugging { get; public set; }
    [DispIdAttribute("10057")]
public bool EnableUnmanagedDebugging { get; public set; }
    [DispIdAttribute("10003")]
public prjStartAction StartAction { get; public set; }
    [DispIdAttribute("10031")]
public object ExtenderNames { get; }
    [DispIdAttribute("10032")]
public string ExtenderCATID { get; }
    [DispIdAttribute("10052")]
public prjWarningLevel WarningLevel { get; public set; }
    [DispIdAttribute("10053")]
public bool TreatWarningsAsErrors { get; public set; }
    [DispIdAttribute("10058")]
public bool EnableSQLServerDebugging { get; public set; }
    [DispIdAttribute("10069")]
public UInt32 FileAlignment { get; public set; }
    [DispIdAttribute("10072")]
public bool RegisterForComInterop { get; public set; }
    [DispIdAttribute("10073")]
public string ConfigurationOverrideFile { get; public set; }
    [DispIdAttribute("10074")]
public bool RemoteDebugEnabled { get; public set; }
    [DispIdAttribute("10075")]
public string RemoteDebugMachine { get; public set; }
    [DispIdAttribute("10079")]
public string NoWarn { get; public set; }
    [DispIdAttribute("10066")]
public bool NoStdLib { get; public set; }
    [DispIdAttribute("-2147418112")]
public abstract virtual string get___id();
    [DispIdAttribute("10001")]
public abstract virtual bool get_DebugSymbols();
    [DispIdAttribute("10001")]
public abstract virtual void set_DebugSymbols(bool value);
    [DispIdAttribute("10036")]
public abstract virtual bool get_DefineDebug();
    [DispIdAttribute("10036")]
public abstract virtual void set_DefineDebug(bool value);
    [DispIdAttribute("10037")]
public abstract virtual bool get_DefineTrace();
    [DispIdAttribute("10037")]
public abstract virtual void set_DefineTrace(bool value);
    [DispIdAttribute("10004")]
public abstract virtual string get_OutputPath();
    [DispIdAttribute("10004")]
public abstract virtual void set_OutputPath(string value);
    [DispIdAttribute("10010")]
public abstract virtual string get_IntermediatePath();
    [DispIdAttribute("10010")]
public abstract virtual void set_IntermediatePath(string value);
    [DispIdAttribute("10005")]
public abstract virtual string get_DefineConstants();
    [DispIdAttribute("10005")]
public abstract virtual void set_DefineConstants(string value);
    [DispIdAttribute("10054")]
public abstract virtual bool get_RemoveIntegerChecks();
    [DispIdAttribute("10054")]
public abstract virtual void set_RemoveIntegerChecks(bool value);
    [DispIdAttribute("10055")]
public abstract virtual UInt32 get_BaseAddress();
    [DispIdAttribute("10055")]
public abstract virtual void set_BaseAddress(UInt32 value);
    [DispIdAttribute("10061")]
public abstract virtual bool get_AllowUnsafeBlocks();
    [DispIdAttribute("10061")]
public abstract virtual void set_AllowUnsafeBlocks(bool value);
    [DispIdAttribute("10062")]
public abstract virtual bool get_CheckForOverflowUnderflow();
    [DispIdAttribute("10062")]
public abstract virtual void set_CheckForOverflowUnderflow(bool value);
    [DispIdAttribute("10063")]
public abstract virtual string get_DocumentationFile();
    [DispIdAttribute("10063")]
public abstract virtual void set_DocumentationFile(string value);
    [DispIdAttribute("10064")]
public abstract virtual bool get_Optimize();
    [DispIdAttribute("10064")]
public abstract virtual void set_Optimize(bool value);
    [DispIdAttribute("10065")]
public abstract virtual bool get_IncrementalBuild();
    [DispIdAttribute("10065")]
public abstract virtual void set_IncrementalBuild(bool value);
    [DispIdAttribute("10006")]
public abstract virtual string get_StartProgram();
    [DispIdAttribute("10006")]
public abstract virtual void set_StartProgram(string value);
    [DispIdAttribute("10007")]
public abstract virtual string get_StartWorkingDirectory();
    [DispIdAttribute("10007")]
public abstract virtual void set_StartWorkingDirectory(string value);
    [DispIdAttribute("10008")]
public abstract virtual string get_StartURL();
    [DispIdAttribute("10008")]
public abstract virtual void set_StartURL(string value);
    [DispIdAttribute("10038")]
public abstract virtual string get_StartPage();
    [DispIdAttribute("10038")]
public abstract virtual void set_StartPage(string value);
    [DispIdAttribute("10002")]
public abstract virtual string get_StartArguments();
    [DispIdAttribute("10002")]
public abstract virtual void set_StartArguments(string value);
    [DispIdAttribute("10039")]
public abstract virtual bool get_StartWithIE();
    [DispIdAttribute("10039")]
public abstract virtual void set_StartWithIE(bool value);
    [DispIdAttribute("10040")]
public abstract virtual bool get_EnableASPDebugging();
    [DispIdAttribute("10040")]
public abstract virtual void set_EnableASPDebugging(bool value);
    [DispIdAttribute("10041")]
public abstract virtual bool get_EnableASPXDebugging();
    [DispIdAttribute("10041")]
public abstract virtual void set_EnableASPXDebugging(bool value);
    [DispIdAttribute("10057")]
public abstract virtual bool get_EnableUnmanagedDebugging();
    [DispIdAttribute("10057")]
public abstract virtual void set_EnableUnmanagedDebugging(bool value);
    [DispIdAttribute("10003")]
public abstract virtual prjStartAction get_StartAction();
    [DispIdAttribute("10003")]
public abstract virtual void set_StartAction(prjStartAction value);
    [DispIdAttribute("10030")]
public abstract virtual object get_Extender(string extenderName);
    [DispIdAttribute("10031")]
public abstract virtual object get_ExtenderNames();
    [DispIdAttribute("10032")]
public abstract virtual string get_ExtenderCATID();
    [DispIdAttribute("10052")]
public abstract virtual prjWarningLevel get_WarningLevel();
    [DispIdAttribute("10052")]
public abstract virtual void set_WarningLevel(prjWarningLevel value);
    [DispIdAttribute("10053")]
public abstract virtual bool get_TreatWarningsAsErrors();
    [DispIdAttribute("10053")]
public abstract virtual void set_TreatWarningsAsErrors(bool value);
    [DispIdAttribute("10058")]
public abstract virtual bool get_EnableSQLServerDebugging();
    [DispIdAttribute("10058")]
public abstract virtual void set_EnableSQLServerDebugging(bool value);
    [DispIdAttribute("10069")]
public abstract virtual UInt32 get_FileAlignment();
    [DispIdAttribute("10069")]
public abstract virtual void set_FileAlignment(UInt32 value);
    [DispIdAttribute("10072")]
public abstract virtual bool get_RegisterForComInterop();
    [DispIdAttribute("10072")]
public abstract virtual void set_RegisterForComInterop(bool value);
    [DispIdAttribute("10073")]
public abstract virtual string get_ConfigurationOverrideFile();
    [DispIdAttribute("10073")]
public abstract virtual void set_ConfigurationOverrideFile(string value);
    [DispIdAttribute("10074")]
public abstract virtual bool get_RemoteDebugEnabled();
    [DispIdAttribute("10074")]
public abstract virtual void set_RemoteDebugEnabled(bool value);
    [DispIdAttribute("10075")]
public abstract virtual string get_RemoteDebugMachine();
    [DispIdAttribute("10075")]
public abstract virtual void set_RemoteDebugMachine(string value);
    [DispIdAttribute("10079")]
public abstract virtual string get_NoWarn();
    [DispIdAttribute("10079")]
public abstract virtual void set_NoWarn(string value);
    [DispIdAttribute("10066")]
public abstract virtual bool get_NoStdLib();
    [DispIdAttribute("10066")]
public abstract virtual void set_NoStdLib(bool value);
}
[GuidAttribute("3CDAA65E-1E9D-11D4-B212-00C04F79CACB")]
public interface VSLangProj2.ProjectProperties2 {
    [DispIdAttribute("-2147418112")]
public string __id { get; }
    [DispIdAttribute("10035")]
public object __project { get; }
    [DispIdAttribute("10015")]
public string StartupObject { get; public set; }
    [DispIdAttribute("10016")]
public prjOutputType OutputType { get; public set; }
    [DispIdAttribute("10042")]
public string RootNamespace { get; public set; }
    [DispIdAttribute("10013")]
public string AssemblyName { get; public set; }
    [DispIdAttribute("10044")]
public string AssemblyOriginatorKeyFile { get; public set; }
    [DispIdAttribute("10045")]
public string AssemblyKeyContainerName { get; public set; }
    [DispIdAttribute("10043")]
public prjOriginatorKeyMode AssemblyOriginatorKeyMode { get; public set; }
    [DispIdAttribute("10046")]
public bool DelaySign { get; public set; }
    [DispIdAttribute("10012")]
public string WebServer { get; }
    [DispIdAttribute("10017")]
public string WebServerVersion { get; }
    [DispIdAttribute("10018")]
public string ServerExtensionsVersion { get; }
    [DispIdAttribute("10019")]
public bool LinkRepair { get; public set; }
    [DispIdAttribute("10020")]
public string OfflineURL { get; }
    [DispIdAttribute("10047")]
public string FileSharePath { get; public set; }
    [DispIdAttribute("10048")]
public string ActiveFileSharePath { get; }
    [DispIdAttribute("10049")]
public prjWebAccessMethod WebAccessMethod { get; public set; }
    [DispIdAttribute("10050")]
public prjWebAccessMethod ActiveWebAccessMethod { get; }
    [DispIdAttribute("10021")]
public prjScriptLanguage DefaultClientScript { get; public set; }
    [DispIdAttribute("10022")]
public prjTargetSchema DefaultTargetSchema { get; public set; }
    [DispIdAttribute("10023")]
public prjHTMLPageLayout DefaultHTMLPageLayout { get; public set; }
    [DispIdAttribute("10026")]
public string FileName { get; public set; }
    [DispIdAttribute("10027")]
public string FullPath { get; }
    [DispIdAttribute("10028")]
public string LocalPath { get; }
    [DispIdAttribute("10029")]
public string URL { get; }
    [DispIdAttribute("10033")]
public ProjectConfigurationProperties ActiveConfigurationSettings { get; }
    [DispIdAttribute("10030")]
public object Extender { get; }
    [DispIdAttribute("10031")]
public object ExtenderNames { get; }
    [DispIdAttribute("10032")]
public string ExtenderCATID { get; }
    [DispIdAttribute("10011")]
public string ApplicationIcon { get; public set; }
    [DispIdAttribute("10051")]
public prjOptionStrict OptionStrict { get; public set; }
    [DispIdAttribute("10056")]
public string ReferencePath { get; public set; }
    [DispIdAttribute("10009")]
public string OutputFileName { get; }
    [DispIdAttribute("10034")]
public string AbsoluteProjectDirectory { get; }
    [DispIdAttribute("10059")]
public prjOptionExplicit OptionExplicit { get; public set; }
    [DispIdAttribute("10060")]
public prjCompare OptionCompare { get; public set; }
    [DispIdAttribute("10067")]
public prjProjectType ProjectType { get; }
    [DispIdAttribute("10068")]
public string DefaultNamespace { get; public set; }
    [DispIdAttribute("10076")]
public string PreBuildEvent { get; public set; }
    [DispIdAttribute("10077")]
public string PostBuildEvent { get; public set; }
    [DispIdAttribute("10078")]
public prjRunPostBuildEvent RunPostBuildEvent { get; public set; }
    [DispIdAttribute("10080")]
public string AspnetVersion { get; }
    [DispIdAttribute("-2147418112")]
public abstract virtual string get___id();
    [DispIdAttribute("10035")]
public abstract virtual object get___project();
    [DispIdAttribute("10015")]
public abstract virtual string get_StartupObject();
    [DispIdAttribute("10015")]
public abstract virtual void set_StartupObject(string value);
    [DispIdAttribute("10016")]
public abstract virtual prjOutputType get_OutputType();
    [DispIdAttribute("10016")]
public abstract virtual void set_OutputType(prjOutputType value);
    [DispIdAttribute("10042")]
public abstract virtual string get_RootNamespace();
    [DispIdAttribute("10042")]
public abstract virtual void set_RootNamespace(string value);
    [DispIdAttribute("10013")]
public abstract virtual string get_AssemblyName();
    [DispIdAttribute("10013")]
public abstract virtual void set_AssemblyName(string value);
    [DispIdAttribute("10044")]
public abstract virtual string get_AssemblyOriginatorKeyFile();
    [DispIdAttribute("10044")]
public abstract virtual void set_AssemblyOriginatorKeyFile(string value);
    [DispIdAttribute("10045")]
public abstract virtual string get_AssemblyKeyContainerName();
    [DispIdAttribute("10045")]
public abstract virtual void set_AssemblyKeyContainerName(string value);
    [DispIdAttribute("10043")]
public abstract virtual prjOriginatorKeyMode get_AssemblyOriginatorKeyMode();
    [DispIdAttribute("10043")]
public abstract virtual void set_AssemblyOriginatorKeyMode(prjOriginatorKeyMode value);
    [DispIdAttribute("10046")]
public abstract virtual bool get_DelaySign();
    [DispIdAttribute("10046")]
public abstract virtual void set_DelaySign(bool value);
    [DispIdAttribute("10012")]
public abstract virtual string get_WebServer();
    [DispIdAttribute("10017")]
public abstract virtual string get_WebServerVersion();
    [DispIdAttribute("10018")]
public abstract virtual string get_ServerExtensionsVersion();
    [DispIdAttribute("10019")]
public abstract virtual bool get_LinkRepair();
    [DispIdAttribute("10019")]
public abstract virtual void set_LinkRepair(bool value);
    [DispIdAttribute("10020")]
public abstract virtual string get_OfflineURL();
    [DispIdAttribute("10047")]
public abstract virtual string get_FileSharePath();
    [DispIdAttribute("10047")]
public abstract virtual void set_FileSharePath(string value);
    [DispIdAttribute("10048")]
public abstract virtual string get_ActiveFileSharePath();
    [DispIdAttribute("10049")]
public abstract virtual prjWebAccessMethod get_WebAccessMethod();
    [DispIdAttribute("10049")]
public abstract virtual void set_WebAccessMethod(prjWebAccessMethod value);
    [DispIdAttribute("10050")]
public abstract virtual prjWebAccessMethod get_ActiveWebAccessMethod();
    [DispIdAttribute("10021")]
public abstract virtual prjScriptLanguage get_DefaultClientScript();
    [DispIdAttribute("10021")]
public abstract virtual void set_DefaultClientScript(prjScriptLanguage value);
    [DispIdAttribute("10022")]
public abstract virtual prjTargetSchema get_DefaultTargetSchema();
    [DispIdAttribute("10022")]
public abstract virtual void set_DefaultTargetSchema(prjTargetSchema value);
    [DispIdAttribute("10023")]
public abstract virtual prjHTMLPageLayout get_DefaultHTMLPageLayout();
    [DispIdAttribute("10023")]
public abstract virtual void set_DefaultHTMLPageLayout(prjHTMLPageLayout value);
    [DispIdAttribute("10026")]
public abstract virtual string get_FileName();
    [DispIdAttribute("10026")]
public abstract virtual void set_FileName(string value);
    [DispIdAttribute("10027")]
public abstract virtual string get_FullPath();
    [DispIdAttribute("10028")]
public abstract virtual string get_LocalPath();
    [DispIdAttribute("10029")]
public abstract virtual string get_URL();
    [DispIdAttribute("10033")]
public abstract virtual ProjectConfigurationProperties get_ActiveConfigurationSettings();
    [DispIdAttribute("10030")]
public abstract virtual object get_Extender();
    [DispIdAttribute("10031")]
public abstract virtual object get_ExtenderNames();
    [DispIdAttribute("10032")]
public abstract virtual string get_ExtenderCATID();
    [DispIdAttribute("10011")]
public abstract virtual string get_ApplicationIcon();
    [DispIdAttribute("10011")]
public abstract virtual void set_ApplicationIcon(string value);
    [DispIdAttribute("10051")]
public abstract virtual prjOptionStrict get_OptionStrict();
    [DispIdAttribute("10051")]
public abstract virtual void set_OptionStrict(prjOptionStrict value);
    [DispIdAttribute("10056")]
public abstract virtual string get_ReferencePath();
    [DispIdAttribute("10056")]
public abstract virtual void set_ReferencePath(string value);
    [DispIdAttribute("10009")]
public abstract virtual string get_OutputFileName();
    [DispIdAttribute("10034")]
public abstract virtual string get_AbsoluteProjectDirectory();
    [DispIdAttribute("10059")]
public abstract virtual prjOptionExplicit get_OptionExplicit();
    [DispIdAttribute("10059")]
public abstract virtual void set_OptionExplicit(prjOptionExplicit value);
    [DispIdAttribute("10060")]
public abstract virtual prjCompare get_OptionCompare();
    [DispIdAttribute("10060")]
public abstract virtual void set_OptionCompare(prjCompare value);
    [DispIdAttribute("10067")]
public abstract virtual prjProjectType get_ProjectType();
    [DispIdAttribute("10068")]
public abstract virtual string get_DefaultNamespace();
    [DispIdAttribute("10068")]
public abstract virtual void set_DefaultNamespace(string value);
    [DispIdAttribute("10076")]
public abstract virtual string get_PreBuildEvent();
    [DispIdAttribute("10076")]
public abstract virtual void set_PreBuildEvent(string value);
    [DispIdAttribute("10077")]
public abstract virtual string get_PostBuildEvent();
    [DispIdAttribute("10077")]
public abstract virtual void set_PostBuildEvent(string value);
    [DispIdAttribute("10078")]
public abstract virtual prjRunPostBuildEvent get_RunPostBuildEvent();
    [DispIdAttribute("10078")]
public abstract virtual void set_RunPostBuildEvent(prjRunPostBuildEvent value);
    [DispIdAttribute("10080")]
public abstract virtual string get_AspnetVersion();
}
[GuidAttribute("4FFF24C5-5644-4A47-A48A-B74C3F1F8FC8")]
public interface VSLangProj2.Reference2 {
    [DispIdAttribute("1")]
public DTE DTE { get; }
    [DispIdAttribute("2")]
public References Collection { get; }
    [DispIdAttribute("3")]
public Project ContainingProject { get; }
    [DispIdAttribute("5")]
public string Name { get; }
    [DispIdAttribute("6")]
public prjReferenceType Type { get; }
    [DispIdAttribute("7")]
public string Identity { get; }
    [DispIdAttribute("8")]
public string Path { get; }
    [DispIdAttribute("9")]
public string Description { get; }
    [DispIdAttribute("10")]
public string Culture { get; }
    [DispIdAttribute("11")]
public int MajorVersion { get; }
    [DispIdAttribute("12")]
public int MinorVersion { get; }
    [DispIdAttribute("13")]
public int RevisionNumber { get; }
    [DispIdAttribute("14")]
public int BuildNumber { get; }
    [DispIdAttribute("15")]
public bool StrongName { get; }
    [DispIdAttribute("16")]
public Project SourceProject { get; }
    [DispIdAttribute("17")]
public bool CopyLocal { get; public set; }
    [DispIdAttribute("19")]
public object ExtenderNames { get; }
    [DispIdAttribute("20")]
public string ExtenderCATID { get; }
    [DispIdAttribute("21")]
public string PublicKeyToken { get; }
    [DispIdAttribute("22")]
public string Version { get; }
    [DispIdAttribute("100")]
public string RuntimeVersion { get; }
    [DispIdAttribute("1")]
public abstract virtual DTE get_DTE();
    [DispIdAttribute("2")]
public abstract virtual References get_Collection();
    [DispIdAttribute("3")]
public abstract virtual Project get_ContainingProject();
    [DispIdAttribute("4")]
public abstract virtual void Remove();
    [DispIdAttribute("5")]
public abstract virtual string get_Name();
    [DispIdAttribute("6")]
public abstract virtual prjReferenceType get_Type();
    [DispIdAttribute("7")]
public abstract virtual string get_Identity();
    [DispIdAttribute("8")]
public abstract virtual string get_Path();
    [DispIdAttribute("9")]
public abstract virtual string get_Description();
    [DispIdAttribute("10")]
public abstract virtual string get_Culture();
    [DispIdAttribute("11")]
public abstract virtual int get_MajorVersion();
    [DispIdAttribute("12")]
public abstract virtual int get_MinorVersion();
    [DispIdAttribute("13")]
public abstract virtual int get_RevisionNumber();
    [DispIdAttribute("14")]
public abstract virtual int get_BuildNumber();
    [DispIdAttribute("15")]
public abstract virtual bool get_StrongName();
    [DispIdAttribute("16")]
public abstract virtual Project get_SourceProject();
    [DispIdAttribute("17")]
public abstract virtual bool get_CopyLocal();
    [DispIdAttribute("17")]
public abstract virtual void set_CopyLocal(bool value);
    [DispIdAttribute("18")]
public abstract virtual object get_Extender(string extenderName);
    [DispIdAttribute("19")]
public abstract virtual object get_ExtenderNames();
    [DispIdAttribute("20")]
public abstract virtual string get_ExtenderCATID();
    [DispIdAttribute("21")]
public abstract virtual string get_PublicKeyToken();
    [DispIdAttribute("22")]
public abstract virtual string get_Version();
    [DispIdAttribute("100")]
public abstract virtual string get_RuntimeVersion();
}
[GuidAttribute("4E42424E-D013-4716-A7D3-47141B70432C")]
public interface VSLangProj2.VBPackageSettings {
    [DispIdAttribute("1")]
public pkgOptionExplicit OptionExplicit { get; public set; }
    [DispIdAttribute("2")]
public pkgCompare OptionCompare { get; public set; }
    [DispIdAttribute("3")]
public pkgOptionStrict OptionStrict { get; public set; }
    [DispIdAttribute("1")]
public abstract virtual pkgOptionExplicit get_OptionExplicit();
    [DispIdAttribute("1")]
public abstract virtual void set_OptionExplicit(pkgOptionExplicit value);
    [DispIdAttribute("2")]
public abstract virtual pkgCompare get_OptionCompare();
    [DispIdAttribute("2")]
public abstract virtual void set_OptionCompare(pkgCompare value);
    [DispIdAttribute("3")]
public abstract virtual pkgOptionStrict get_OptionStrict();
    [DispIdAttribute("3")]
public abstract virtual void set_OptionStrict(pkgOptionStrict value);
}
public enum VSLangProj80.__COPYTOOUTPUTSTATE : Enum {
    public int value__;
    public static __COPYTOOUTPUTSTATE COPYTOOUTPUTSTATE_Never;
    public static __COPYTOOUTPUTSTATE COPYTOOUTPUTSTATE_Always;
    public static __COPYTOOUTPUTSTATE COPYTOOUTPUTSTATE_PreserveNewestFile;
}
public enum VSLangProj80.__PROJECTREFERENCETYPE : Enum {
    public int value__;
    public static __PROJECTREFERENCETYPE PROJREFTYPE_ASSEMBLY;
    public static __PROJECTREFERENCETYPE PROJREFTYPE_ACTIVEX;
    public static __PROJECTREFERENCETYPE PROJREFTYPE_NATIVE;
}
[InterfaceTypeAttribute("2")]
[GuidAttribute("9AAD53A9-32CB-4D84-97A7-B4AFA94F5878")]
public interface VSLangProj80._dispVSLangProjWebReferencesEvents {
    [DispIdAttribute("1")]
public abstract virtual void OnAfterWebReferenceAdded(object pDispatch);
    [DispIdAttribute("2")]
public abstract virtual void OnBeforeWebReferenceRemoved(object pDispatch);
    [DispIdAttribute("3")]
public abstract virtual void OnWebReferenceChanged(object pDispatch);
}
[ComEventInterfaceAttribute("VSLangProj80._dispVSLangProjWebReferencesEvents", "VSLangProj80._dispVSLangProjWebReferencesEvents_EventProvider")]
[ComVisibleAttribute("False")]
public interface VSLangProj80._dispVSLangProjWebReferencesEvents_Event {
    [CompilerGeneratedAttribute]
public abstract virtual void add_OnAfterWebReferenceAdded(_dispVSLangProjWebReferencesEvents_OnAfterWebReferenceAddedEventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_OnAfterWebReferenceAdded(_dispVSLangProjWebReferencesEvents_OnAfterWebReferenceAddedEventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_OnBeforeWebReferenceRemoved(_dispVSLangProjWebReferencesEvents_OnBeforeWebReferenceRemovedEventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_OnBeforeWebReferenceRemoved(_dispVSLangProjWebReferencesEvents_OnBeforeWebReferenceRemovedEventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_OnWebReferenceChanged(_dispVSLangProjWebReferencesEvents_OnWebReferenceChangedEventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_OnWebReferenceChanged(_dispVSLangProjWebReferencesEvents_OnWebReferenceChangedEventHandler value);
}
internal class VSLangProj80._dispVSLangProjWebReferencesEvents_EventProvider : object {
    private IConnectionPointContainer m_ConnectionPointContainer;
    private ArrayList m_aEventSinkHelpers;
    private IConnectionPoint m_ConnectionPoint;
    public _dispVSLangProjWebReferencesEvents_EventProvider(object A_1);
    private void Init();
    public sealed virtual void add_OnAfterWebReferenceAdded(_dispVSLangProjWebReferencesEvents_OnAfterWebReferenceAddedEventHandler value);
    public sealed virtual void remove_OnAfterWebReferenceAdded(_dispVSLangProjWebReferencesEvents_OnAfterWebReferenceAddedEventHandler value);
    private void AddOnAfterWebReferenceAdded(_dispVSLangProjWebReferencesEvents_OnAfterWebReferenceAddedEventHandler A_1);
    private void RemoveOnAfterWebReferenceAdded(_dispVSLangProjWebReferencesEvents_OnAfterWebReferenceAddedEventHandler A_1);
    public sealed virtual void add_OnBeforeWebReferenceRemoved(_dispVSLangProjWebReferencesEvents_OnBeforeWebReferenceRemovedEventHandler value);
    public sealed virtual void remove_OnBeforeWebReferenceRemoved(_dispVSLangProjWebReferencesEvents_OnBeforeWebReferenceRemovedEventHandler value);
    private void AddOnBeforeWebReferenceRemoved(_dispVSLangProjWebReferencesEvents_OnBeforeWebReferenceRemovedEventHandler A_1);
    private void RemoveOnBeforeWebReferenceRemoved(_dispVSLangProjWebReferencesEvents_OnBeforeWebReferenceRemovedEventHandler A_1);
    public sealed virtual void add_OnWebReferenceChanged(_dispVSLangProjWebReferencesEvents_OnWebReferenceChangedEventHandler value);
    public sealed virtual void remove_OnWebReferenceChanged(_dispVSLangProjWebReferencesEvents_OnWebReferenceChangedEventHandler value);
    private void AddOnWebReferenceChanged(_dispVSLangProjWebReferencesEvents_OnWebReferenceChangedEventHandler A_1);
    private void RemoveOnWebReferenceChanged(_dispVSLangProjWebReferencesEvents_OnWebReferenceChangedEventHandler A_1);
    protected virtual override void Finalize();
    public sealed virtual void Dispose();
    private void Dispose(bool disposing);
}
[ComVisibleAttribute("False")]
public class VSLangProj80._dispVSLangProjWebReferencesEvents_OnAfterWebReferenceAddedEventHandler : MulticastDelegate {
    public _dispVSLangProjWebReferencesEvents_OnAfterWebReferenceAddedEventHandler(object object, IntPtr method);
    public virtual void Invoke(object pDispatch);
    public virtual IAsyncResult BeginInvoke(object pDispatch, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
[ComVisibleAttribute("False")]
public class VSLangProj80._dispVSLangProjWebReferencesEvents_OnBeforeWebReferenceRemovedEventHandler : MulticastDelegate {
    public _dispVSLangProjWebReferencesEvents_OnBeforeWebReferenceRemovedEventHandler(object object, IntPtr method);
    public virtual void Invoke(object pDispatch);
    public virtual IAsyncResult BeginInvoke(object pDispatch, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
[ComVisibleAttribute("False")]
public class VSLangProj80._dispVSLangProjWebReferencesEvents_OnWebReferenceChangedEventHandler : MulticastDelegate {
    public _dispVSLangProjWebReferencesEvents_OnWebReferenceChangedEventHandler(object object, IntPtr method);
    public virtual void Invoke(object pDispatch);
    public virtual IAsyncResult BeginInvoke(object pDispatch, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
[ClassInterfaceAttribute("0")]
public class VSLangProj80._dispVSLangProjWebReferencesEvents_SinkHelper : object {
    public _dispVSLangProjWebReferencesEvents_OnAfterWebReferenceAddedEventHandler m_OnAfterWebReferenceAddedDelegate;
    public _dispVSLangProjWebReferencesEvents_OnBeforeWebReferenceRemovedEventHandler m_OnBeforeWebReferenceRemovedDelegate;
    public _dispVSLangProjWebReferencesEvents_OnWebReferenceChangedEventHandler m_OnWebReferenceChangedDelegate;
    public int m_dwCookie;
    public sealed virtual void OnAfterWebReferenceAdded(object A_1);
    public sealed virtual void OnBeforeWebReferenceRemoved(object A_1);
    public sealed virtual void OnWebReferenceChanged(object A_1);
}
public enum VSLangProj80._prjOriginatorKeyFileType : Enum {
    public int value__;
    public static _prjOriginatorKeyFileType prjOriginatorKeyFileTypeSNK;
    public static _prjOriginatorKeyFileType prjOriginatorKeyFileTypePFX;
}
[GuidAttribute("33BD7FEF-EEB4-412A-A4C1-9FBFF6F57067")]
public interface VSLangProj80._VSLangProjWebReferencesEvents {
}
[GuidAttribute("F25C9AD7-E371-414D-82A0-24E8BBC25C99")]
public interface VSLangProj80.CSharpProjectConfigurationProperties3 {
    [DispIdAttribute("-2147418112")]
public string __id { get; }
    [DispIdAttribute("10001")]
public bool DebugSymbols { get; public set; }
    [DispIdAttribute("10036")]
public bool DefineDebug { get; public set; }
    [DispIdAttribute("10037")]
public bool DefineTrace { get; public set; }
    [DispIdAttribute("10004")]
public string OutputPath { get; public set; }
    [DispIdAttribute("10010")]
public string IntermediatePath { get; public set; }
    [DispIdAttribute("10005")]
public string DefineConstants { get; public set; }
    [DispIdAttribute("10054")]
public bool RemoveIntegerChecks { get; public set; }
    [DispIdAttribute("10055")]
public UInt32 BaseAddress { get; public set; }
    [DispIdAttribute("10061")]
public bool AllowUnsafeBlocks { get; public set; }
    [DispIdAttribute("10062")]
public bool CheckForOverflowUnderflow { get; public set; }
    [DispIdAttribute("10063")]
public string DocumentationFile { get; public set; }
    [DispIdAttribute("10064")]
public bool Optimize { get; public set; }
    [DispIdAttribute("10065")]
public bool IncrementalBuild { get; public set; }
    [DispIdAttribute("10006")]
public string StartProgram { get; public set; }
    [DispIdAttribute("10007")]
public string StartWorkingDirectory { get; public set; }
    [DispIdAttribute("10008")]
public string StartURL { get; public set; }
    [DispIdAttribute("10038")]
public string StartPage { get; public set; }
    [DispIdAttribute("10002")]
public string StartArguments { get; public set; }
    [DispIdAttribute("10039")]
public bool StartWithIE { get; public set; }
    [DispIdAttribute("10040")]
public bool EnableASPDebugging { get; public set; }
    [DispIdAttribute("10041")]
public bool EnableASPXDebugging { get; public set; }
    [DispIdAttribute("10057")]
public bool EnableUnmanagedDebugging { get; public set; }
    [DispIdAttribute("10003")]
public prjStartAction StartAction { get; public set; }
    [DispIdAttribute("10031")]
public object ExtenderNames { get; }
    [DispIdAttribute("10032")]
public string ExtenderCATID { get; }
    [DispIdAttribute("10052")]
public prjWarningLevel WarningLevel { get; public set; }
    [DispIdAttribute("10053")]
public bool TreatWarningsAsErrors { get; public set; }
    [DispIdAttribute("10058")]
public bool EnableSQLServerDebugging { get; public set; }
    [DispIdAttribute("10069")]
public UInt32 FileAlignment { get; public set; }
    [DispIdAttribute("10072")]
public bool RegisterForComInterop { get; public set; }
    [DispIdAttribute("10073")]
public string ConfigurationOverrideFile { get; public set; }
    [DispIdAttribute("10074")]
public bool RemoteDebugEnabled { get; public set; }
    [DispIdAttribute("10075")]
public string RemoteDebugMachine { get; public set; }
    [DispIdAttribute("10079")]
public string NoWarn { get; public set; }
    [DispIdAttribute("10066")]
public bool NoStdLib { get; public set; }
    [DispIdAttribute("10106")]
public string DebugInfo { get; public set; }
    [DispIdAttribute("10109")]
public string PlatformTarget { get; public set; }
    [DispIdAttribute("12121")]
public string TreatSpecificWarningsAsErrors { get; public set; }
    [DispIdAttribute("12200")]
public bool RunCodeAnalysis { get; public set; }
    [DispIdAttribute("12201")]
public string CodeAnalysisLogFile { get; public set; }
    [DispIdAttribute("12202")]
public string CodeAnalysisRuleAssemblies { get; public set; }
    [DispIdAttribute("12204")]
public string CodeAnalysisInputAssembly { get; public set; }
    [DispIdAttribute("12203")]
public string CodeAnalysisRules { get; public set; }
    [DispIdAttribute("12205")]
public string CodeAnalysisSpellCheckLanguages { get; public set; }
    [DispIdAttribute("12206")]
public bool CodeAnalysisUseTypeNameInSuppression { get; public set; }
    [DispIdAttribute("12207")]
public string CodeAnalysisModuleSuppressionsFile { get; public set; }
    [DispIdAttribute("10110")]
public bool UseVSHostingProcess { get; public set; }
    [DispIdAttribute("10111")]
public sgenGenerationOption GenerateSerializationAssemblies { get; public set; }
    [DispIdAttribute("13104")]
public string LanguageVersion { get; public set; }
    [DispIdAttribute("13105")]
public string ErrorReport { get; public set; }
    [DispIdAttribute("-2147418112")]
public abstract virtual string get___id();
    [DispIdAttribute("10001")]
public abstract virtual bool get_DebugSymbols();
    [DispIdAttribute("10001")]
public abstract virtual void set_DebugSymbols(bool value);
    [DispIdAttribute("10036")]
public abstract virtual bool get_DefineDebug();
    [DispIdAttribute("10036")]
public abstract virtual void set_DefineDebug(bool value);
    [DispIdAttribute("10037")]
public abstract virtual bool get_DefineTrace();
    [DispIdAttribute("10037")]
public abstract virtual void set_DefineTrace(bool value);
    [DispIdAttribute("10004")]
public abstract virtual string get_OutputPath();
    [DispIdAttribute("10004")]
public abstract virtual void set_OutputPath(string value);
    [DispIdAttribute("10010")]
public abstract virtual string get_IntermediatePath();
    [DispIdAttribute("10010")]
public abstract virtual void set_IntermediatePath(string value);
    [DispIdAttribute("10005")]
public abstract virtual string get_DefineConstants();
    [DispIdAttribute("10005")]
public abstract virtual void set_DefineConstants(string value);
    [DispIdAttribute("10054")]
public abstract virtual bool get_RemoveIntegerChecks();
    [DispIdAttribute("10054")]
public abstract virtual void set_RemoveIntegerChecks(bool value);
    [DispIdAttribute("10055")]
public abstract virtual UInt32 get_BaseAddress();
    [DispIdAttribute("10055")]
public abstract virtual void set_BaseAddress(UInt32 value);
    [DispIdAttribute("10061")]
public abstract virtual bool get_AllowUnsafeBlocks();
    [DispIdAttribute("10061")]
public abstract virtual void set_AllowUnsafeBlocks(bool value);
    [DispIdAttribute("10062")]
public abstract virtual bool get_CheckForOverflowUnderflow();
    [DispIdAttribute("10062")]
public abstract virtual void set_CheckForOverflowUnderflow(bool value);
    [DispIdAttribute("10063")]
public abstract virtual string get_DocumentationFile();
    [DispIdAttribute("10063")]
public abstract virtual void set_DocumentationFile(string value);
    [DispIdAttribute("10064")]
public abstract virtual bool get_Optimize();
    [DispIdAttribute("10064")]
public abstract virtual void set_Optimize(bool value);
    [DispIdAttribute("10065")]
public abstract virtual bool get_IncrementalBuild();
    [DispIdAttribute("10065")]
public abstract virtual void set_IncrementalBuild(bool value);
    [DispIdAttribute("10006")]
public abstract virtual string get_StartProgram();
    [DispIdAttribute("10006")]
public abstract virtual void set_StartProgram(string value);
    [DispIdAttribute("10007")]
public abstract virtual string get_StartWorkingDirectory();
    [DispIdAttribute("10007")]
public abstract virtual void set_StartWorkingDirectory(string value);
    [DispIdAttribute("10008")]
public abstract virtual string get_StartURL();
    [DispIdAttribute("10008")]
public abstract virtual void set_StartURL(string value);
    [DispIdAttribute("10038")]
public abstract virtual string get_StartPage();
    [DispIdAttribute("10038")]
public abstract virtual void set_StartPage(string value);
    [DispIdAttribute("10002")]
public abstract virtual string get_StartArguments();
    [DispIdAttribute("10002")]
public abstract virtual void set_StartArguments(string value);
    [DispIdAttribute("10039")]
public abstract virtual bool get_StartWithIE();
    [DispIdAttribute("10039")]
public abstract virtual void set_StartWithIE(bool value);
    [DispIdAttribute("10040")]
public abstract virtual bool get_EnableASPDebugging();
    [DispIdAttribute("10040")]
public abstract virtual void set_EnableASPDebugging(bool value);
    [DispIdAttribute("10041")]
public abstract virtual bool get_EnableASPXDebugging();
    [DispIdAttribute("10041")]
public abstract virtual void set_EnableASPXDebugging(bool value);
    [DispIdAttribute("10057")]
public abstract virtual bool get_EnableUnmanagedDebugging();
    [DispIdAttribute("10057")]
public abstract virtual void set_EnableUnmanagedDebugging(bool value);
    [DispIdAttribute("10003")]
public abstract virtual prjStartAction get_StartAction();
    [DispIdAttribute("10003")]
public abstract virtual void set_StartAction(prjStartAction value);
    [DispIdAttribute("10030")]
public abstract virtual object get_Extender(string extenderName);
    [DispIdAttribute("10031")]
public abstract virtual object get_ExtenderNames();
    [DispIdAttribute("10032")]
public abstract virtual string get_ExtenderCATID();
    [DispIdAttribute("10052")]
public abstract virtual prjWarningLevel get_WarningLevel();
    [DispIdAttribute("10052")]
public abstract virtual void set_WarningLevel(prjWarningLevel value);
    [DispIdAttribute("10053")]
public abstract virtual bool get_TreatWarningsAsErrors();
    [DispIdAttribute("10053")]
public abstract virtual void set_TreatWarningsAsErrors(bool value);
    [DispIdAttribute("10058")]
public abstract virtual bool get_EnableSQLServerDebugging();
    [DispIdAttribute("10058")]
public abstract virtual void set_EnableSQLServerDebugging(bool value);
    [DispIdAttribute("10069")]
public abstract virtual UInt32 get_FileAlignment();
    [DispIdAttribute("10069")]
public abstract virtual void set_FileAlignment(UInt32 value);
    [DispIdAttribute("10072")]
public abstract virtual bool get_RegisterForComInterop();
    [DispIdAttribute("10072")]
public abstract virtual void set_RegisterForComInterop(bool value);
    [DispIdAttribute("10073")]
public abstract virtual string get_ConfigurationOverrideFile();
    [DispIdAttribute("10073")]
public abstract virtual void set_ConfigurationOverrideFile(string value);
    [DispIdAttribute("10074")]
public abstract virtual bool get_RemoteDebugEnabled();
    [DispIdAttribute("10074")]
public abstract virtual void set_RemoteDebugEnabled(bool value);
    [DispIdAttribute("10075")]
public abstract virtual string get_RemoteDebugMachine();
    [DispIdAttribute("10075")]
public abstract virtual void set_RemoteDebugMachine(string value);
    [DispIdAttribute("10079")]
public abstract virtual string get_NoWarn();
    [DispIdAttribute("10079")]
public abstract virtual void set_NoWarn(string value);
    [DispIdAttribute("10066")]
public abstract virtual bool get_NoStdLib();
    [DispIdAttribute("10066")]
public abstract virtual void set_NoStdLib(bool value);
    [DispIdAttribute("10106")]
public abstract virtual string get_DebugInfo();
    [DispIdAttribute("10106")]
public abstract virtual void set_DebugInfo(string value);
    [DispIdAttribute("10109")]
public abstract virtual string get_PlatformTarget();
    [DispIdAttribute("10109")]
public abstract virtual void set_PlatformTarget(string value);
    [DispIdAttribute("12121")]
public abstract virtual string get_TreatSpecificWarningsAsErrors();
    [DispIdAttribute("12121")]
public abstract virtual void set_TreatSpecificWarningsAsErrors(string value);
    [DispIdAttribute("12200")]
public abstract virtual bool get_RunCodeAnalysis();
    [DispIdAttribute("12200")]
public abstract virtual void set_RunCodeAnalysis(bool value);
    [DispIdAttribute("12201")]
public abstract virtual string get_CodeAnalysisLogFile();
    [DispIdAttribute("12201")]
public abstract virtual void set_CodeAnalysisLogFile(string value);
    [DispIdAttribute("12202")]
public abstract virtual string get_CodeAnalysisRuleAssemblies();
    [DispIdAttribute("12202")]
public abstract virtual void set_CodeAnalysisRuleAssemblies(string value);
    [DispIdAttribute("12204")]
public abstract virtual string get_CodeAnalysisInputAssembly();
    [DispIdAttribute("12204")]
public abstract virtual void set_CodeAnalysisInputAssembly(string value);
    [DispIdAttribute("12203")]
public abstract virtual string get_CodeAnalysisRules();
    [DispIdAttribute("12203")]
public abstract virtual void set_CodeAnalysisRules(string value);
    [DispIdAttribute("12205")]
public abstract virtual string get_CodeAnalysisSpellCheckLanguages();
    [DispIdAttribute("12205")]
public abstract virtual void set_CodeAnalysisSpellCheckLanguages(string value);
    [DispIdAttribute("12206")]
public abstract virtual bool get_CodeAnalysisUseTypeNameInSuppression();
    [DispIdAttribute("12206")]
public abstract virtual void set_CodeAnalysisUseTypeNameInSuppression(bool value);
    [DispIdAttribute("12207")]
public abstract virtual string get_CodeAnalysisModuleSuppressionsFile();
    [DispIdAttribute("12207")]
public abstract virtual void set_CodeAnalysisModuleSuppressionsFile(string value);
    [DispIdAttribute("10110")]
public abstract virtual bool get_UseVSHostingProcess();
    [DispIdAttribute("10110")]
public abstract virtual void set_UseVSHostingProcess(bool value);
    [DispIdAttribute("10111")]
public abstract virtual sgenGenerationOption get_GenerateSerializationAssemblies();
    [DispIdAttribute("10111")]
public abstract virtual void set_GenerateSerializationAssemblies(sgenGenerationOption value);
    [DispIdAttribute("13104")]
public abstract virtual string get_LanguageVersion();
    [DispIdAttribute("13104")]
public abstract virtual void set_LanguageVersion(string value);
    [DispIdAttribute("13105")]
public abstract virtual string get_ErrorReport();
    [DispIdAttribute("13105")]
public abstract virtual void set_ErrorReport(string value);
}
public enum VSLangProj80.CSharpProjPropId : Enum {
    public int value__;
    public static CSharpProjPropId CSPROJPROPID_TreatSpecificWarningsAsErrors;
    public static CSharpProjPropId CSPROJPROPID_LanguageVersion;
    public static CSharpProjPropId CSPROJPROPID_ErrorReport;
}
[GuidAttribute("41BE8D4D-F235-46D4-B9F8-C6D6459D503C")]
[TypeLibTypeAttribute("4160")]
[DefaultMemberAttribute("FileName")]
public interface VSLangProj80.FileProperties2 {
    [DispIdAttribute("-2147418112")]
public string __id { get; }
    [DispIdAttribute("0")]
public string FileName { get; public set; }
    [DispIdAttribute("1")]
public string Extension { get; }
    [DispIdAttribute("2")]
public UInt32 Filesize { get; }
    [DispIdAttribute("3")]
public string LocalPath { get; }
    [DispIdAttribute("4")]
public string FullPath { get; }
    [DispIdAttribute("5")]
public string URL { get; }
    [DispIdAttribute("6")]
public string HTMLTitle { get; }
    [DispIdAttribute("7")]
public string Author { get; }
    [DispIdAttribute("8")]
public string DateCreated { get; }
    [DispIdAttribute("9")]
public string DateModified { get; }
    [DispIdAttribute("10")]
public string ModifiedBy { get; }
    [DispIdAttribute("11")]
public string SubType { get; public set; }
    [DispIdAttribute("12")]
public object Extender { get; }
    [DispIdAttribute("13")]
public object ExtenderNames { get; }
    [DispIdAttribute("14")]
public string ExtenderCATID { get; }
    [DispIdAttribute("15")]
public prjBuildAction BuildAction { get; public set; }
    [DispIdAttribute("16")]
public string CustomTool { get; public set; }
    [DispIdAttribute("17")]
public string CustomToolNamespace { get; public set; }
    [DispIdAttribute("18")]
public string CustomToolOutput { get; }
    [DispIdAttribute("19")]
public bool IsCustomToolOutput { get; }
    [DispIdAttribute("20")]
public bool IsDependentFile { get; }
    [DispIdAttribute("21")]
public bool IsLink { get; }
    [DispIdAttribute("22")]
public bool IsDesignTimeBuildInput { get; }
    [ComAliasNameAttribute("VSLangProj80.COPYTOOUTPUTSTATE")]
[DispIdAttribute("100")]
public UInt32 CopyToOutputDirectory { get; public set; }
    [DispIdAttribute("101")]
public string ItemType { get; public set; }
    [DispIdAttribute("102")]
public bool IsSharedDesignTimeBuildInput { get; }
    [DispIdAttribute("-2147418112")]
[TypeLibFuncAttribute("64")]
public abstract virtual string get___id();
    [DispIdAttribute("0")]
public abstract virtual string get_FileName();
    [DispIdAttribute("0")]
public abstract virtual void set_FileName(string pbstrName);
    [DispIdAttribute("1")]
public abstract virtual string get_Extension();
    [DispIdAttribute("2")]
public abstract virtual UInt32 get_Filesize();
    [DispIdAttribute("3")]
public abstract virtual string get_LocalPath();
    [DispIdAttribute("4")]
public abstract virtual string get_FullPath();
    [DispIdAttribute("5")]
public abstract virtual string get_URL();
    [DispIdAttribute("6")]
public abstract virtual string get_HTMLTitle();
    [DispIdAttribute("7")]
public abstract virtual string get_Author();
    [DispIdAttribute("8")]
public abstract virtual string get_DateCreated();
    [DispIdAttribute("9")]
public abstract virtual string get_DateModified();
    [DispIdAttribute("10")]
public abstract virtual string get_ModifiedBy();
    [DispIdAttribute("11")]
[TypeLibFuncAttribute("1024")]
public abstract virtual string get_SubType();
    [DispIdAttribute("11")]
[TypeLibFuncAttribute("1024")]
public abstract virtual void set_SubType(string pbstrSubType);
    [TypeLibFuncAttribute("1088")]
[DispIdAttribute("12")]
public abstract virtual object get_Extender(string ExtenderName);
    [TypeLibFuncAttribute("1088")]
[DispIdAttribute("13")]
public abstract virtual object get_ExtenderNames();
    [DispIdAttribute("14")]
[TypeLibFuncAttribute("1088")]
public abstract virtual string get_ExtenderCATID();
    [DispIdAttribute("15")]
public abstract virtual prjBuildAction get_BuildAction();
    [DispIdAttribute("15")]
public abstract virtual void set_BuildAction(prjBuildAction pbuildAction);
    [DispIdAttribute("16")]
public abstract virtual string get_CustomTool();
    [DispIdAttribute("16")]
public abstract virtual void set_CustomTool(string pbstrCustomTool);
    [DispIdAttribute("17")]
public abstract virtual string get_CustomToolNamespace();
    [DispIdAttribute("17")]
public abstract virtual void set_CustomToolNamespace(string pbstrCustomToolNamespace);
    [DispIdAttribute("18")]
[TypeLibFuncAttribute("1024")]
public abstract virtual string get_CustomToolOutput();
    [DispIdAttribute("19")]
[TypeLibFuncAttribute("1024")]
public abstract virtual bool get_IsCustomToolOutput();
    [TypeLibFuncAttribute("1024")]
[DispIdAttribute("20")]
public abstract virtual bool get_IsDependentFile();
    [TypeLibFuncAttribute("1024")]
[DispIdAttribute("21")]
public abstract virtual bool get_IsLink();
    [TypeLibFuncAttribute("1024")]
[DispIdAttribute("22")]
public abstract virtual bool get_IsDesignTimeBuildInput();
    [DispIdAttribute("100")]
public abstract virtual UInt32 get_CopyToOutputDirectory();
    [DispIdAttribute("100")]
public abstract virtual void set_CopyToOutputDirectory(UInt32 pCopy);
    [DispIdAttribute("101")]
public abstract virtual string get_ItemType();
    [DispIdAttribute("101")]
public abstract virtual void set_ItemType(string pbstrItemType);
    [DispIdAttribute("102")]
public abstract virtual bool get_IsSharedDesignTimeBuildInput();
}
[GuidAttribute("2ACA2576-0738-466F-845F-16062ED8D1BC")]
[TypeLibTypeAttribute("4160")]
public interface VSLangProj80.FolderProperties2 {
    [DispIdAttribute("-2147418112")]
public string __id { get; }
    [DispIdAttribute("1")]
public string FileName { get; public set; }
    [DispIdAttribute("2")]
public string LocalPath { get; }
    [DispIdAttribute("3")]
public string FullPath { get; }
    [DispIdAttribute("4")]
public string URL { get; }
    [DispIdAttribute("5")]
public object Extender { get; }
    [DispIdAttribute("6")]
public object ExtenderNames { get; }
    [DispIdAttribute("7")]
public string ExtenderCATID { get; }
    [DispIdAttribute("8")]
public string WebReference { get; public set; }
    [DispIdAttribute("9")]
public string DefaultNamespace { get; }
    [DispIdAttribute("10")]
public webrefUrlBehavior UrlBehavior { get; public set; }
    [DispIdAttribute("11")]
public object WebReferenceInterface { get; }
    [DispIdAttribute("-2147418112")]
[TypeLibFuncAttribute("64")]
public abstract virtual string get___id();
    [DispIdAttribute("1")]
public abstract virtual string get_FileName();
    [DispIdAttribute("1")]
public abstract virtual void set_FileName(string pbstrName);
    [DispIdAttribute("2")]
public abstract virtual string get_LocalPath();
    [DispIdAttribute("3")]
public abstract virtual string get_FullPath();
    [DispIdAttribute("4")]
public abstract virtual string get_URL();
    [DispIdAttribute("5")]
[TypeLibFuncAttribute("1088")]
public abstract virtual object get_Extender(string ExtenderName);
    [DispIdAttribute("6")]
[TypeLibFuncAttribute("1088")]
public abstract virtual object get_ExtenderNames();
    [DispIdAttribute("7")]
[TypeLibFuncAttribute("1088")]
public abstract virtual string get_ExtenderCATID();
    [DispIdAttribute("8")]
public abstract virtual string get_WebReference();
    [DispIdAttribute("8")]
public abstract virtual void set_WebReference(string pbstrWebReferenceUrl);
    [DispIdAttribute("9")]
[TypeLibFuncAttribute("1024")]
public abstract virtual string get_DefaultNamespace();
    [DispIdAttribute("10")]
public abstract virtual webrefUrlBehavior get_UrlBehavior();
    [DispIdAttribute("10")]
public abstract virtual void set_UrlBehavior(webrefUrlBehavior pUrlBehavior);
    [DispIdAttribute("11")]
public abstract virtual object get_WebReferenceInterface();
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("CC5B9866-BD93-4AFF-8D61-C73ED3BB77D0")]
public interface VSLangProj80.IVsApplicationSettings {
    public abstract virtual void GetPropertyInfo(string pszWebServiceName, String& pbstrAppSettingsObjectName, String& pbstrPropertyName);
    public abstract virtual object GetAppSettingsPropertyExpression(string pszAppSettingsObjectName, string pszPropertyName);
    public abstract virtual object EnsureWebServiceUrlPropertyExpression(string pszAppSettingsObjectName, string pszPropertyName, object varPropertyValue);
    public abstract virtual void SetPropertyInfo(string pszAppSettingsObjectName, string pszPropertyName);
}
[GuidAttribute("E4311E4C-0819-404B-B0D9-F5F44716ECEC")]
public interface VSLangProj80.IVSWebReferenceDynamicProperties2 {
    [DispIdAttribute("1")]
public abstract virtual string GetDynamicPropertyName(string pszWebServiceName);
    [DispIdAttribute("2")]
public abstract virtual void SetDynamicProperty(string pszUrl, string pszPropertyName);
    [DispIdAttribute("3")]
public abstract virtual bool SupportsDynamicProperties();
}
[GuidAttribute("3600DDB7-34C2-4CED-9337-5B266CC0A169")]
public interface VSLangProj80.JSharpProjectConfigurationProperties3 {
    [DispIdAttribute("-2147418112")]
public string __id { get; }
    [DispIdAttribute("10001")]
public bool DebugSymbols { get; public set; }
    [DispIdAttribute("10036")]
public bool DefineDebug { get; public set; }
    [DispIdAttribute("10037")]
public bool DefineTrace { get; public set; }
    [DispIdAttribute("10004")]
public string OutputPath { get; public set; }
    [DispIdAttribute("10010")]
public string IntermediatePath { get; public set; }
    [DispIdAttribute("10005")]
public string DefineConstants { get; public set; }
    [DispIdAttribute("10054")]
public bool RemoveIntegerChecks { get; public set; }
    [DispIdAttribute("10055")]
public UInt32 BaseAddress { get; public set; }
    [DispIdAttribute("10061")]
public bool AllowUnsafeBlocks { get; public set; }
    [DispIdAttribute("10062")]
public bool CheckForOverflowUnderflow { get; public set; }
    [DispIdAttribute("10063")]
public string DocumentationFile { get; public set; }
    [DispIdAttribute("10064")]
public bool Optimize { get; public set; }
    [DispIdAttribute("10065")]
public bool IncrementalBuild { get; public set; }
    [DispIdAttribute("10006")]
public string StartProgram { get; public set; }
    [DispIdAttribute("10007")]
public string StartWorkingDirectory { get; public set; }
    [DispIdAttribute("10008")]
public string StartURL { get; public set; }
    [DispIdAttribute("10038")]
public string StartPage { get; public set; }
    [DispIdAttribute("10002")]
public string StartArguments { get; public set; }
    [DispIdAttribute("10039")]
public bool StartWithIE { get; public set; }
    [DispIdAttribute("10040")]
public bool EnableASPDebugging { get; public set; }
    [DispIdAttribute("10041")]
public bool EnableASPXDebugging { get; public set; }
    [DispIdAttribute("10057")]
public bool EnableUnmanagedDebugging { get; public set; }
    [DispIdAttribute("10003")]
public prjStartAction StartAction { get; public set; }
    [DispIdAttribute("10031")]
public object ExtenderNames { get; }
    [DispIdAttribute("10032")]
public string ExtenderCATID { get; }
    [DispIdAttribute("10052")]
public prjWarningLevel WarningLevel { get; public set; }
    [DispIdAttribute("10053")]
public bool TreatWarningsAsErrors { get; public set; }
    [DispIdAttribute("10058")]
public bool EnableSQLServerDebugging { get; public set; }
    [DispIdAttribute("10069")]
public UInt32 FileAlignment { get; public set; }
    [DispIdAttribute("10072")]
public bool RegisterForComInterop { get; public set; }
    [DispIdAttribute("10073")]
public string ConfigurationOverrideFile { get; public set; }
    [DispIdAttribute("10074")]
public bool RemoteDebugEnabled { get; public set; }
    [DispIdAttribute("10075")]
public string RemoteDebugMachine { get; public set; }
    [DispIdAttribute("10079")]
public string NoWarn { get; public set; }
    [DispIdAttribute("10066")]
public bool NoStdLib { get; public set; }
    [DispIdAttribute("10106")]
public string DebugInfo { get; public set; }
    [DispIdAttribute("10109")]
public string PlatformTarget { get; public set; }
    [DispIdAttribute("12121")]
public string TreatSpecificWarningsAsErrors { get; public set; }
    [DispIdAttribute("12200")]
public bool RunCodeAnalysis { get; public set; }
    [DispIdAttribute("12201")]
public string CodeAnalysisLogFile { get; public set; }
    [DispIdAttribute("12202")]
public string CodeAnalysisRuleAssemblies { get; public set; }
    [DispIdAttribute("12204")]
public string CodeAnalysisInputAssembly { get; public set; }
    [DispIdAttribute("12203")]
public string CodeAnalysisRules { get; public set; }
    [DispIdAttribute("12205")]
public string CodeAnalysisSpellCheckLanguages { get; public set; }
    [DispIdAttribute("12206")]
public bool CodeAnalysisUseTypeNameInSuppression { get; public set; }
    [DispIdAttribute("12207")]
public string CodeAnalysisModuleSuppressionsFile { get; public set; }
    [DispIdAttribute("10110")]
public bool UseVSHostingProcess { get; public set; }
    [DispIdAttribute("10111")]
public sgenGenerationOption GenerateSerializationAssemblies { get; public set; }
    [DispIdAttribute("15101")]
public string CodePage { get; public set; }
    [DispIdAttribute("15102")]
public string JCPA { get; public set; }
    [DispIdAttribute("15103")]
public prjDisableLangXtns DisableLangXtns { get; public set; }
    [DispIdAttribute("15104")]
public bool SecureScoping { get; public set; }
    [DispIdAttribute("-2147418112")]
public abstract virtual string get___id();
    [DispIdAttribute("10001")]
public abstract virtual bool get_DebugSymbols();
    [DispIdAttribute("10001")]
public abstract virtual void set_DebugSymbols(bool value);
    [DispIdAttribute("10036")]
public abstract virtual bool get_DefineDebug();
    [DispIdAttribute("10036")]
public abstract virtual void set_DefineDebug(bool value);
    [DispIdAttribute("10037")]
public abstract virtual bool get_DefineTrace();
    [DispIdAttribute("10037")]
public abstract virtual void set_DefineTrace(bool value);
    [DispIdAttribute("10004")]
public abstract virtual string get_OutputPath();
    [DispIdAttribute("10004")]
public abstract virtual void set_OutputPath(string value);
    [DispIdAttribute("10010")]
public abstract virtual string get_IntermediatePath();
    [DispIdAttribute("10010")]
public abstract virtual void set_IntermediatePath(string value);
    [DispIdAttribute("10005")]
public abstract virtual string get_DefineConstants();
    [DispIdAttribute("10005")]
public abstract virtual void set_DefineConstants(string value);
    [DispIdAttribute("10054")]
public abstract virtual bool get_RemoveIntegerChecks();
    [DispIdAttribute("10054")]
public abstract virtual void set_RemoveIntegerChecks(bool value);
    [DispIdAttribute("10055")]
public abstract virtual UInt32 get_BaseAddress();
    [DispIdAttribute("10055")]
public abstract virtual void set_BaseAddress(UInt32 value);
    [DispIdAttribute("10061")]
public abstract virtual bool get_AllowUnsafeBlocks();
    [DispIdAttribute("10061")]
public abstract virtual void set_AllowUnsafeBlocks(bool value);
    [DispIdAttribute("10062")]
public abstract virtual bool get_CheckForOverflowUnderflow();
    [DispIdAttribute("10062")]
public abstract virtual void set_CheckForOverflowUnderflow(bool value);
    [DispIdAttribute("10063")]
public abstract virtual string get_DocumentationFile();
    [DispIdAttribute("10063")]
public abstract virtual void set_DocumentationFile(string value);
    [DispIdAttribute("10064")]
public abstract virtual bool get_Optimize();
    [DispIdAttribute("10064")]
public abstract virtual void set_Optimize(bool value);
    [DispIdAttribute("10065")]
public abstract virtual bool get_IncrementalBuild();
    [DispIdAttribute("10065")]
public abstract virtual void set_IncrementalBuild(bool value);
    [DispIdAttribute("10006")]
public abstract virtual string get_StartProgram();
    [DispIdAttribute("10006")]
public abstract virtual void set_StartProgram(string value);
    [DispIdAttribute("10007")]
public abstract virtual string get_StartWorkingDirectory();
    [DispIdAttribute("10007")]
public abstract virtual void set_StartWorkingDirectory(string value);
    [DispIdAttribute("10008")]
public abstract virtual string get_StartURL();
    [DispIdAttribute("10008")]
public abstract virtual void set_StartURL(string value);
    [DispIdAttribute("10038")]
public abstract virtual string get_StartPage();
    [DispIdAttribute("10038")]
public abstract virtual void set_StartPage(string value);
    [DispIdAttribute("10002")]
public abstract virtual string get_StartArguments();
    [DispIdAttribute("10002")]
public abstract virtual void set_StartArguments(string value);
    [DispIdAttribute("10039")]
public abstract virtual bool get_StartWithIE();
    [DispIdAttribute("10039")]
public abstract virtual void set_StartWithIE(bool value);
    [DispIdAttribute("10040")]
public abstract virtual bool get_EnableASPDebugging();
    [DispIdAttribute("10040")]
public abstract virtual void set_EnableASPDebugging(bool value);
    [DispIdAttribute("10041")]
public abstract virtual bool get_EnableASPXDebugging();
    [DispIdAttribute("10041")]
public abstract virtual void set_EnableASPXDebugging(bool value);
    [DispIdAttribute("10057")]
public abstract virtual bool get_EnableUnmanagedDebugging();
    [DispIdAttribute("10057")]
public abstract virtual void set_EnableUnmanagedDebugging(bool value);
    [DispIdAttribute("10003")]
public abstract virtual prjStartAction get_StartAction();
    [DispIdAttribute("10003")]
public abstract virtual void set_StartAction(prjStartAction value);
    [DispIdAttribute("10030")]
public abstract virtual object get_Extender(string extenderName);
    [DispIdAttribute("10031")]
public abstract virtual object get_ExtenderNames();
    [DispIdAttribute("10032")]
public abstract virtual string get_ExtenderCATID();
    [DispIdAttribute("10052")]
public abstract virtual prjWarningLevel get_WarningLevel();
    [DispIdAttribute("10052")]
public abstract virtual void set_WarningLevel(prjWarningLevel value);
    [DispIdAttribute("10053")]
public abstract virtual bool get_TreatWarningsAsErrors();
    [DispIdAttribute("10053")]
public abstract virtual void set_TreatWarningsAsErrors(bool value);
    [DispIdAttribute("10058")]
public abstract virtual bool get_EnableSQLServerDebugging();
    [DispIdAttribute("10058")]
public abstract virtual void set_EnableSQLServerDebugging(bool value);
    [DispIdAttribute("10069")]
public abstract virtual UInt32 get_FileAlignment();
    [DispIdAttribute("10069")]
public abstract virtual void set_FileAlignment(UInt32 value);
    [DispIdAttribute("10072")]
public abstract virtual bool get_RegisterForComInterop();
    [DispIdAttribute("10072")]
public abstract virtual void set_RegisterForComInterop(bool value);
    [DispIdAttribute("10073")]
public abstract virtual string get_ConfigurationOverrideFile();
    [DispIdAttribute("10073")]
public abstract virtual void set_ConfigurationOverrideFile(string value);
    [DispIdAttribute("10074")]
public abstract virtual bool get_RemoteDebugEnabled();
    [DispIdAttribute("10074")]
public abstract virtual void set_RemoteDebugEnabled(bool value);
    [DispIdAttribute("10075")]
public abstract virtual string get_RemoteDebugMachine();
    [DispIdAttribute("10075")]
public abstract virtual void set_RemoteDebugMachine(string value);
    [DispIdAttribute("10079")]
public abstract virtual string get_NoWarn();
    [DispIdAttribute("10079")]
public abstract virtual void set_NoWarn(string value);
    [DispIdAttribute("10066")]
public abstract virtual bool get_NoStdLib();
    [DispIdAttribute("10066")]
public abstract virtual void set_NoStdLib(bool value);
    [DispIdAttribute("10106")]
public abstract virtual string get_DebugInfo();
    [DispIdAttribute("10106")]
public abstract virtual void set_DebugInfo(string value);
    [DispIdAttribute("10109")]
public abstract virtual string get_PlatformTarget();
    [DispIdAttribute("10109")]
public abstract virtual void set_PlatformTarget(string value);
    [DispIdAttribute("12121")]
public abstract virtual string get_TreatSpecificWarningsAsErrors();
    [DispIdAttribute("12121")]
public abstract virtual void set_TreatSpecificWarningsAsErrors(string value);
    [DispIdAttribute("12200")]
public abstract virtual bool get_RunCodeAnalysis();
    [DispIdAttribute("12200")]
public abstract virtual void set_RunCodeAnalysis(bool value);
    [DispIdAttribute("12201")]
public abstract virtual string get_CodeAnalysisLogFile();
    [DispIdAttribute("12201")]
public abstract virtual void set_CodeAnalysisLogFile(string value);
    [DispIdAttribute("12202")]
public abstract virtual string get_CodeAnalysisRuleAssemblies();
    [DispIdAttribute("12202")]
public abstract virtual void set_CodeAnalysisRuleAssemblies(string value);
    [DispIdAttribute("12204")]
public abstract virtual string get_CodeAnalysisInputAssembly();
    [DispIdAttribute("12204")]
public abstract virtual void set_CodeAnalysisInputAssembly(string value);
    [DispIdAttribute("12203")]
public abstract virtual string get_CodeAnalysisRules();
    [DispIdAttribute("12203")]
public abstract virtual void set_CodeAnalysisRules(string value);
    [DispIdAttribute("12205")]
public abstract virtual string get_CodeAnalysisSpellCheckLanguages();
    [DispIdAttribute("12205")]
public abstract virtual void set_CodeAnalysisSpellCheckLanguages(string value);
    [DispIdAttribute("12206")]
public abstract virtual bool get_CodeAnalysisUseTypeNameInSuppression();
    [DispIdAttribute("12206")]
public abstract virtual void set_CodeAnalysisUseTypeNameInSuppression(bool value);
    [DispIdAttribute("12207")]
public abstract virtual string get_CodeAnalysisModuleSuppressionsFile();
    [DispIdAttribute("12207")]
public abstract virtual void set_CodeAnalysisModuleSuppressionsFile(string value);
    [DispIdAttribute("10110")]
public abstract virtual bool get_UseVSHostingProcess();
    [DispIdAttribute("10110")]
public abstract virtual void set_UseVSHostingProcess(bool value);
    [DispIdAttribute("10111")]
public abstract virtual sgenGenerationOption get_GenerateSerializationAssemblies();
    [DispIdAttribute("10111")]
public abstract virtual void set_GenerateSerializationAssemblies(sgenGenerationOption value);
    [DispIdAttribute("15101")]
public abstract virtual string get_CodePage();
    [DispIdAttribute("15101")]
public abstract virtual void set_CodePage(string value);
    [DispIdAttribute("15102")]
public abstract virtual string get_JCPA();
    [DispIdAttribute("15102")]
public abstract virtual void set_JCPA(string value);
    [DispIdAttribute("15103")]
public abstract virtual prjDisableLangXtns get_DisableLangXtns();
    [DispIdAttribute("15103")]
public abstract virtual void set_DisableLangXtns(prjDisableLangXtns value);
    [DispIdAttribute("15104")]
public abstract virtual bool get_SecureScoping();
    [DispIdAttribute("15104")]
public abstract virtual void set_SecureScoping(bool value);
}
public enum VSLangProj80.JSharpProjPropId : Enum {
    public int value__;
    public static JSharpProjPropId JSPROJPROPID_CodePage;
    public static JSharpProjPropId JSPROJPROPID_JCPA;
    public static JSharpProjPropId JSPROJPROPID_DisableLangXtns;
    public static JSharpProjPropId JSPROJPROPID_SecureScoping;
}
[GuidAttribute("355354DE-E2F0-45D5-9632-4823655C9C95")]
public enum VSLangProj80.prjAssemblyType : Enum {
    public int value__;
    public static prjAssemblyType prjAssemblyType_Library;
    public static prjAssemblyType prjAssemblyType_Platform;
}
[GuidAttribute("3600DDB6-34C2-4CED-9337-5B266CC0A169")]
public enum VSLangProj80.prjDisableLangXtns : Enum {
    public int value__;
    public static prjDisableLangXtns prjDisableLangXtnsNone;
    public static prjDisableLangXtns prjDisableLangXtnsNET;
    public static prjDisableLangXtns prjDisableLangXtnsAll;
}
[GuidAttribute("9918DAB5-FC67-4CD4-B352-2F3FA1E2BD08")]
public interface VSLangProj80.ProjectConfigurationProperties3 {
    [DispIdAttribute("-2147418112")]
public string __id { get; }
    [DispIdAttribute("10001")]
public bool DebugSymbols { get; public set; }
    [DispIdAttribute("10036")]
public bool DefineDebug { get; public set; }
    [DispIdAttribute("10037")]
public bool DefineTrace { get; public set; }
    [DispIdAttribute("10004")]
public string OutputPath { get; public set; }
    [DispIdAttribute("10010")]
public string IntermediatePath { get; public set; }
    [DispIdAttribute("10005")]
public string DefineConstants { get; public set; }
    [DispIdAttribute("10054")]
public bool RemoveIntegerChecks { get; public set; }
    [DispIdAttribute("10055")]
public UInt32 BaseAddress { get; public set; }
    [DispIdAttribute("10061")]
public bool AllowUnsafeBlocks { get; public set; }
    [DispIdAttribute("10062")]
public bool CheckForOverflowUnderflow { get; public set; }
    [DispIdAttribute("10063")]
public string DocumentationFile { get; public set; }
    [DispIdAttribute("10064")]
public bool Optimize { get; public set; }
    [DispIdAttribute("10065")]
public bool IncrementalBuild { get; public set; }
    [DispIdAttribute("10006")]
public string StartProgram { get; public set; }
    [DispIdAttribute("10007")]
public string StartWorkingDirectory { get; public set; }
    [DispIdAttribute("10008")]
public string StartURL { get; public set; }
    [DispIdAttribute("10038")]
public string StartPage { get; public set; }
    [DispIdAttribute("10002")]
public string StartArguments { get; public set; }
    [DispIdAttribute("10039")]
public bool StartWithIE { get; public set; }
    [DispIdAttribute("10040")]
public bool EnableASPDebugging { get; public set; }
    [DispIdAttribute("10041")]
public bool EnableASPXDebugging { get; public set; }
    [DispIdAttribute("10057")]
public bool EnableUnmanagedDebugging { get; public set; }
    [DispIdAttribute("10003")]
public prjStartAction StartAction { get; public set; }
    [DispIdAttribute("10031")]
public object ExtenderNames { get; }
    [DispIdAttribute("10032")]
public string ExtenderCATID { get; }
    [DispIdAttribute("10052")]
public prjWarningLevel WarningLevel { get; public set; }
    [DispIdAttribute("10053")]
public bool TreatWarningsAsErrors { get; public set; }
    [DispIdAttribute("10058")]
public bool EnableSQLServerDebugging { get; public set; }
    [DispIdAttribute("10069")]
public UInt32 FileAlignment { get; public set; }
    [DispIdAttribute("10072")]
public bool RegisterForComInterop { get; public set; }
    [DispIdAttribute("10073")]
public string ConfigurationOverrideFile { get; public set; }
    [DispIdAttribute("10074")]
public bool RemoteDebugEnabled { get; public set; }
    [DispIdAttribute("10075")]
public string RemoteDebugMachine { get; public set; }
    [DispIdAttribute("10079")]
public string NoWarn { get; public set; }
    [DispIdAttribute("10066")]
public bool NoStdLib { get; public set; }
    [DispIdAttribute("10106")]
public string DebugInfo { get; public set; }
    [DispIdAttribute("10109")]
public string PlatformTarget { get; public set; }
    [DispIdAttribute("12121")]
public string TreatSpecificWarningsAsErrors { get; public set; }
    [DispIdAttribute("12200")]
public bool RunCodeAnalysis { get; public set; }
    [DispIdAttribute("12201")]
public string CodeAnalysisLogFile { get; public set; }
    [DispIdAttribute("12202")]
public string CodeAnalysisRuleAssemblies { get; public set; }
    [DispIdAttribute("12204")]
public string CodeAnalysisInputAssembly { get; public set; }
    [DispIdAttribute("12203")]
public string CodeAnalysisRules { get; public set; }
    [DispIdAttribute("12205")]
public string CodeAnalysisSpellCheckLanguages { get; public set; }
    [DispIdAttribute("12206")]
public bool CodeAnalysisUseTypeNameInSuppression { get; public set; }
    [DispIdAttribute("12207")]
public string CodeAnalysisModuleSuppressionsFile { get; public set; }
    [DispIdAttribute("10110")]
public bool UseVSHostingProcess { get; public set; }
    [DispIdAttribute("10111")]
public sgenGenerationOption GenerateSerializationAssemblies { get; public set; }
    [DispIdAttribute("-2147418112")]
public abstract virtual string get___id();
    [DispIdAttribute("10001")]
public abstract virtual bool get_DebugSymbols();
    [DispIdAttribute("10001")]
public abstract virtual void set_DebugSymbols(bool value);
    [DispIdAttribute("10036")]
public abstract virtual bool get_DefineDebug();
    [DispIdAttribute("10036")]
public abstract virtual void set_DefineDebug(bool value);
    [DispIdAttribute("10037")]
public abstract virtual bool get_DefineTrace();
    [DispIdAttribute("10037")]
public abstract virtual void set_DefineTrace(bool value);
    [DispIdAttribute("10004")]
public abstract virtual string get_OutputPath();
    [DispIdAttribute("10004")]
public abstract virtual void set_OutputPath(string value);
    [DispIdAttribute("10010")]
public abstract virtual string get_IntermediatePath();
    [DispIdAttribute("10010")]
public abstract virtual void set_IntermediatePath(string value);
    [DispIdAttribute("10005")]
public abstract virtual string get_DefineConstants();
    [DispIdAttribute("10005")]
public abstract virtual void set_DefineConstants(string value);
    [DispIdAttribute("10054")]
public abstract virtual bool get_RemoveIntegerChecks();
    [DispIdAttribute("10054")]
public abstract virtual void set_RemoveIntegerChecks(bool value);
    [DispIdAttribute("10055")]
public abstract virtual UInt32 get_BaseAddress();
    [DispIdAttribute("10055")]
public abstract virtual void set_BaseAddress(UInt32 value);
    [DispIdAttribute("10061")]
public abstract virtual bool get_AllowUnsafeBlocks();
    [DispIdAttribute("10061")]
public abstract virtual void set_AllowUnsafeBlocks(bool value);
    [DispIdAttribute("10062")]
public abstract virtual bool get_CheckForOverflowUnderflow();
    [DispIdAttribute("10062")]
public abstract virtual void set_CheckForOverflowUnderflow(bool value);
    [DispIdAttribute("10063")]
public abstract virtual string get_DocumentationFile();
    [DispIdAttribute("10063")]
public abstract virtual void set_DocumentationFile(string value);
    [DispIdAttribute("10064")]
public abstract virtual bool get_Optimize();
    [DispIdAttribute("10064")]
public abstract virtual void set_Optimize(bool value);
    [DispIdAttribute("10065")]
public abstract virtual bool get_IncrementalBuild();
    [DispIdAttribute("10065")]
public abstract virtual void set_IncrementalBuild(bool value);
    [DispIdAttribute("10006")]
public abstract virtual string get_StartProgram();
    [DispIdAttribute("10006")]
public abstract virtual void set_StartProgram(string value);
    [DispIdAttribute("10007")]
public abstract virtual string get_StartWorkingDirectory();
    [DispIdAttribute("10007")]
public abstract virtual void set_StartWorkingDirectory(string value);
    [DispIdAttribute("10008")]
public abstract virtual string get_StartURL();
    [DispIdAttribute("10008")]
public abstract virtual void set_StartURL(string value);
    [DispIdAttribute("10038")]
public abstract virtual string get_StartPage();
    [DispIdAttribute("10038")]
public abstract virtual void set_StartPage(string value);
    [DispIdAttribute("10002")]
public abstract virtual string get_StartArguments();
    [DispIdAttribute("10002")]
public abstract virtual void set_StartArguments(string value);
    [DispIdAttribute("10039")]
public abstract virtual bool get_StartWithIE();
    [DispIdAttribute("10039")]
public abstract virtual void set_StartWithIE(bool value);
    [DispIdAttribute("10040")]
public abstract virtual bool get_EnableASPDebugging();
    [DispIdAttribute("10040")]
public abstract virtual void set_EnableASPDebugging(bool value);
    [DispIdAttribute("10041")]
public abstract virtual bool get_EnableASPXDebugging();
    [DispIdAttribute("10041")]
public abstract virtual void set_EnableASPXDebugging(bool value);
    [DispIdAttribute("10057")]
public abstract virtual bool get_EnableUnmanagedDebugging();
    [DispIdAttribute("10057")]
public abstract virtual void set_EnableUnmanagedDebugging(bool value);
    [DispIdAttribute("10003")]
public abstract virtual prjStartAction get_StartAction();
    [DispIdAttribute("10003")]
public abstract virtual void set_StartAction(prjStartAction value);
    [DispIdAttribute("10030")]
public abstract virtual object get_Extender(string extenderName);
    [DispIdAttribute("10031")]
public abstract virtual object get_ExtenderNames();
    [DispIdAttribute("10032")]
public abstract virtual string get_ExtenderCATID();
    [DispIdAttribute("10052")]
public abstract virtual prjWarningLevel get_WarningLevel();
    [DispIdAttribute("10052")]
public abstract virtual void set_WarningLevel(prjWarningLevel value);
    [DispIdAttribute("10053")]
public abstract virtual bool get_TreatWarningsAsErrors();
    [DispIdAttribute("10053")]
public abstract virtual void set_TreatWarningsAsErrors(bool value);
    [DispIdAttribute("10058")]
public abstract virtual bool get_EnableSQLServerDebugging();
    [DispIdAttribute("10058")]
public abstract virtual void set_EnableSQLServerDebugging(bool value);
    [DispIdAttribute("10069")]
public abstract virtual UInt32 get_FileAlignment();
    [DispIdAttribute("10069")]
public abstract virtual void set_FileAlignment(UInt32 value);
    [DispIdAttribute("10072")]
public abstract virtual bool get_RegisterForComInterop();
    [DispIdAttribute("10072")]
public abstract virtual void set_RegisterForComInterop(bool value);
    [DispIdAttribute("10073")]
public abstract virtual string get_ConfigurationOverrideFile();
    [DispIdAttribute("10073")]
public abstract virtual void set_ConfigurationOverrideFile(string value);
    [DispIdAttribute("10074")]
public abstract virtual bool get_RemoteDebugEnabled();
    [DispIdAttribute("10074")]
public abstract virtual void set_RemoteDebugEnabled(bool value);
    [DispIdAttribute("10075")]
public abstract virtual string get_RemoteDebugMachine();
    [DispIdAttribute("10075")]
public abstract virtual void set_RemoteDebugMachine(string value);
    [DispIdAttribute("10079")]
public abstract virtual string get_NoWarn();
    [DispIdAttribute("10079")]
public abstract virtual void set_NoWarn(string value);
    [DispIdAttribute("10066")]
public abstract virtual bool get_NoStdLib();
    [DispIdAttribute("10066")]
public abstract virtual void set_NoStdLib(bool value);
    [DispIdAttribute("10106")]
public abstract virtual string get_DebugInfo();
    [DispIdAttribute("10106")]
public abstract virtual void set_DebugInfo(string value);
    [DispIdAttribute("10109")]
public abstract virtual string get_PlatformTarget();
    [DispIdAttribute("10109")]
public abstract virtual void set_PlatformTarget(string value);
    [DispIdAttribute("12121")]
public abstract virtual string get_TreatSpecificWarningsAsErrors();
    [DispIdAttribute("12121")]
public abstract virtual void set_TreatSpecificWarningsAsErrors(string value);
    [DispIdAttribute("12200")]
public abstract virtual bool get_RunCodeAnalysis();
    [DispIdAttribute("12200")]
public abstract virtual void set_RunCodeAnalysis(bool value);
    [DispIdAttribute("12201")]
public abstract virtual string get_CodeAnalysisLogFile();
    [DispIdAttribute("12201")]
public abstract virtual void set_CodeAnalysisLogFile(string value);
    [DispIdAttribute("12202")]
public abstract virtual string get_CodeAnalysisRuleAssemblies();
    [DispIdAttribute("12202")]
public abstract virtual void set_CodeAnalysisRuleAssemblies(string value);
    [DispIdAttribute("12204")]
public abstract virtual string get_CodeAnalysisInputAssembly();
    [DispIdAttribute("12204")]
public abstract virtual void set_CodeAnalysisInputAssembly(string value);
    [DispIdAttribute("12203")]
public abstract virtual string get_CodeAnalysisRules();
    [DispIdAttribute("12203")]
public abstract virtual void set_CodeAnalysisRules(string value);
    [DispIdAttribute("12205")]
public abstract virtual string get_CodeAnalysisSpellCheckLanguages();
    [DispIdAttribute("12205")]
public abstract virtual void set_CodeAnalysisSpellCheckLanguages(string value);
    [DispIdAttribute("12206")]
public abstract virtual bool get_CodeAnalysisUseTypeNameInSuppression();
    [DispIdAttribute("12206")]
public abstract virtual void set_CodeAnalysisUseTypeNameInSuppression(bool value);
    [DispIdAttribute("12207")]
public abstract virtual string get_CodeAnalysisModuleSuppressionsFile();
    [DispIdAttribute("12207")]
public abstract virtual void set_CodeAnalysisModuleSuppressionsFile(string value);
    [DispIdAttribute("10110")]
public abstract virtual bool get_UseVSHostingProcess();
    [DispIdAttribute("10110")]
public abstract virtual void set_UseVSHostingProcess(bool value);
    [DispIdAttribute("10111")]
public abstract virtual sgenGenerationOption get_GenerateSerializationAssemblies();
    [DispIdAttribute("10111")]
public abstract virtual void set_GenerateSerializationAssemblies(sgenGenerationOption value);
}
[GuidAttribute("7C9D1773-F1F3-447C-AF1A-218E5E2C2F7F")]
public interface VSLangProj80.ProjectProperties3 {
    [DispIdAttribute("-2147418112")]
public string __id { get; }
    [DispIdAttribute("10035")]
public object __project { get; }
    [DispIdAttribute("10015")]
public string StartupObject { get; public set; }
    [DispIdAttribute("10016")]
public prjOutputType OutputType { get; public set; }
    [DispIdAttribute("10042")]
public string RootNamespace { get; public set; }
    [DispIdAttribute("10013")]
public string AssemblyName { get; public set; }
    [DispIdAttribute("10044")]
public string AssemblyOriginatorKeyFile { get; public set; }
    [DispIdAttribute("10045")]
public string AssemblyKeyContainerName { get; public set; }
    [DispIdAttribute("10043")]
public prjOriginatorKeyMode AssemblyOriginatorKeyMode { get; public set; }
    [DispIdAttribute("10046")]
public bool DelaySign { get; public set; }
    [DispIdAttribute("10012")]
public string WebServer { get; }
    [DispIdAttribute("10017")]
public string WebServerVersion { get; }
    [DispIdAttribute("10018")]
public string ServerExtensionsVersion { get; }
    [DispIdAttribute("10019")]
public bool LinkRepair { get; public set; }
    [DispIdAttribute("10020")]
public string OfflineURL { get; }
    [DispIdAttribute("10047")]
public string FileSharePath { get; public set; }
    [DispIdAttribute("10048")]
public string ActiveFileSharePath { get; }
    [DispIdAttribute("10049")]
public prjWebAccessMethod WebAccessMethod { get; public set; }
    [DispIdAttribute("10050")]
public prjWebAccessMethod ActiveWebAccessMethod { get; }
    [DispIdAttribute("10021")]
public prjScriptLanguage DefaultClientScript { get; public set; }
    [DispIdAttribute("10022")]
public prjTargetSchema DefaultTargetSchema { get; public set; }
    [DispIdAttribute("10023")]
public prjHTMLPageLayout DefaultHTMLPageLayout { get; public set; }
    [DispIdAttribute("10026")]
public string FileName { get; public set; }
    [DispIdAttribute("10027")]
public string FullPath { get; }
    [DispIdAttribute("10028")]
public string LocalPath { get; }
    [DispIdAttribute("10029")]
public string URL { get; }
    [DispIdAttribute("10033")]
public ProjectConfigurationProperties ActiveConfigurationSettings { get; }
    [DispIdAttribute("10030")]
public object Extender { get; }
    [DispIdAttribute("10031")]
public object ExtenderNames { get; }
    [DispIdAttribute("10032")]
public string ExtenderCATID { get; }
    [DispIdAttribute("10011")]
public string ApplicationIcon { get; public set; }
    [DispIdAttribute("10051")]
public prjOptionStrict OptionStrict { get; public set; }
    [DispIdAttribute("10056")]
public string ReferencePath { get; public set; }
    [DispIdAttribute("10009")]
public string OutputFileName { get; }
    [DispIdAttribute("10034")]
public string AbsoluteProjectDirectory { get; }
    [DispIdAttribute("10059")]
public prjOptionExplicit OptionExplicit { get; public set; }
    [DispIdAttribute("10060")]
public prjCompare OptionCompare { get; public set; }
    [DispIdAttribute("10067")]
public prjProjectType ProjectType { get; }
    [DispIdAttribute("10068")]
public string DefaultNamespace { get; public set; }
    [DispIdAttribute("10076")]
public string PreBuildEvent { get; public set; }
    [DispIdAttribute("10077")]
public string PostBuildEvent { get; public set; }
    [DispIdAttribute("10078")]
public prjRunPostBuildEvent RunPostBuildEvent { get; public set; }
    [DispIdAttribute("10080")]
public string AspnetVersion { get; }
    [DispIdAttribute("12102")]
public string Title { get; public set; }
    [DispIdAttribute("12103")]
public string Description { get; public set; }
    [DispIdAttribute("12104")]
public string Company { get; public set; }
    [DispIdAttribute("12105")]
public string Product { get; public set; }
    [DispIdAttribute("12106")]
public string Copyright { get; public set; }
    [DispIdAttribute("12107")]
public string Trademark { get; public set; }
    [DispIdAttribute("12108")]
public prjAssemblyType AssemblyType { get; public set; }
    [DispIdAttribute("12109")]
public bool TypeComplianceDiagnostics { get; public set; }
    [DispIdAttribute("12112")]
public string Win32ResourceFile { get; public set; }
    [DispIdAttribute("12115")]
public string AssemblyKeyProviderName { get; public set; }
    [ComAliasNameAttribute("VSLangProj80.DWORD")]
[DispIdAttribute("12114")]
public UInt32 AssemblyOriginatorKeyFileType { get; public set; }
    [DispIdAttribute("12116")]
public string AssemblyVersion { get; public set; }
    [DispIdAttribute("12117")]
public string AssemblyFileVersion { get; public set; }
    [DispIdAttribute("12119")]
public bool GenerateManifests { get; public set; }
    [DispIdAttribute("12120")]
public bool EnableSecurityDebugging { get; public set; }
    [DispIdAttribute("12118")]
public string DebugSecurityZoneURL { get; public set; }
    [DispIdAttribute("12122")]
public object Publish { get; }
    [DispIdAttribute("12123")]
public bool ComVisible { get; public set; }
    [DispIdAttribute("12124")]
public string AssemblyGuid { get; public set; }
    [DispIdAttribute("12125")]
public string NeutralResourcesLanguage { get; public set; }
    [DispIdAttribute("12126")]
public bool SignAssembly { get; public set; }
    [DispIdAttribute("12132")]
public bool SignManifests { get; public set; }
    [DispIdAttribute("12127")]
public string TargetZone { get; public set; }
    [DispIdAttribute("12128")]
public string ExcludedPermissions { get; public set; }
    [DispIdAttribute("12129")]
public string ManifestCertificateThumbprint { get; public set; }
    [DispIdAttribute("12130")]
public string ManifestKeyFile { get; public set; }
    [DispIdAttribute("12131")]
public string ManifestTimestampUrl { get; public set; }
    [DispIdAttribute("-2147418112")]
public abstract virtual string get___id();
    [DispIdAttribute("10035")]
public abstract virtual object get___project();
    [DispIdAttribute("10015")]
public abstract virtual string get_StartupObject();
    [DispIdAttribute("10015")]
public abstract virtual void set_StartupObject(string value);
    [DispIdAttribute("10016")]
public abstract virtual prjOutputType get_OutputType();
    [DispIdAttribute("10016")]
public abstract virtual void set_OutputType(prjOutputType value);
    [DispIdAttribute("10042")]
public abstract virtual string get_RootNamespace();
    [DispIdAttribute("10042")]
public abstract virtual void set_RootNamespace(string value);
    [DispIdAttribute("10013")]
public abstract virtual string get_AssemblyName();
    [DispIdAttribute("10013")]
public abstract virtual void set_AssemblyName(string value);
    [DispIdAttribute("10044")]
public abstract virtual string get_AssemblyOriginatorKeyFile();
    [DispIdAttribute("10044")]
public abstract virtual void set_AssemblyOriginatorKeyFile(string value);
    [DispIdAttribute("10045")]
public abstract virtual string get_AssemblyKeyContainerName();
    [DispIdAttribute("10045")]
public abstract virtual void set_AssemblyKeyContainerName(string value);
    [DispIdAttribute("10043")]
public abstract virtual prjOriginatorKeyMode get_AssemblyOriginatorKeyMode();
    [DispIdAttribute("10043")]
public abstract virtual void set_AssemblyOriginatorKeyMode(prjOriginatorKeyMode value);
    [DispIdAttribute("10046")]
public abstract virtual bool get_DelaySign();
    [DispIdAttribute("10046")]
public abstract virtual void set_DelaySign(bool value);
    [DispIdAttribute("10012")]
public abstract virtual string get_WebServer();
    [DispIdAttribute("10017")]
public abstract virtual string get_WebServerVersion();
    [DispIdAttribute("10018")]
public abstract virtual string get_ServerExtensionsVersion();
    [DispIdAttribute("10019")]
public abstract virtual bool get_LinkRepair();
    [DispIdAttribute("10019")]
public abstract virtual void set_LinkRepair(bool value);
    [DispIdAttribute("10020")]
public abstract virtual string get_OfflineURL();
    [DispIdAttribute("10047")]
public abstract virtual string get_FileSharePath();
    [DispIdAttribute("10047")]
public abstract virtual void set_FileSharePath(string value);
    [DispIdAttribute("10048")]
public abstract virtual string get_ActiveFileSharePath();
    [DispIdAttribute("10049")]
public abstract virtual prjWebAccessMethod get_WebAccessMethod();
    [DispIdAttribute("10049")]
public abstract virtual void set_WebAccessMethod(prjWebAccessMethod value);
    [DispIdAttribute("10050")]
public abstract virtual prjWebAccessMethod get_ActiveWebAccessMethod();
    [DispIdAttribute("10021")]
public abstract virtual prjScriptLanguage get_DefaultClientScript();
    [DispIdAttribute("10021")]
public abstract virtual void set_DefaultClientScript(prjScriptLanguage value);
    [DispIdAttribute("10022")]
public abstract virtual prjTargetSchema get_DefaultTargetSchema();
    [DispIdAttribute("10022")]
public abstract virtual void set_DefaultTargetSchema(prjTargetSchema value);
    [DispIdAttribute("10023")]
public abstract virtual prjHTMLPageLayout get_DefaultHTMLPageLayout();
    [DispIdAttribute("10023")]
public abstract virtual void set_DefaultHTMLPageLayout(prjHTMLPageLayout value);
    [DispIdAttribute("10026")]
public abstract virtual string get_FileName();
    [DispIdAttribute("10026")]
public abstract virtual void set_FileName(string value);
    [DispIdAttribute("10027")]
public abstract virtual string get_FullPath();
    [DispIdAttribute("10028")]
public abstract virtual string get_LocalPath();
    [DispIdAttribute("10029")]
public abstract virtual string get_URL();
    [DispIdAttribute("10033")]
public abstract virtual ProjectConfigurationProperties get_ActiveConfigurationSettings();
    [DispIdAttribute("10030")]
public abstract virtual object get_Extender();
    [DispIdAttribute("10031")]
public abstract virtual object get_ExtenderNames();
    [DispIdAttribute("10032")]
public abstract virtual string get_ExtenderCATID();
    [DispIdAttribute("10011")]
public abstract virtual string get_ApplicationIcon();
    [DispIdAttribute("10011")]
public abstract virtual void set_ApplicationIcon(string value);
    [DispIdAttribute("10051")]
public abstract virtual prjOptionStrict get_OptionStrict();
    [DispIdAttribute("10051")]
public abstract virtual void set_OptionStrict(prjOptionStrict value);
    [DispIdAttribute("10056")]
public abstract virtual string get_ReferencePath();
    [DispIdAttribute("10056")]
public abstract virtual void set_ReferencePath(string value);
    [DispIdAttribute("10009")]
public abstract virtual string get_OutputFileName();
    [DispIdAttribute("10034")]
public abstract virtual string get_AbsoluteProjectDirectory();
    [DispIdAttribute("10059")]
public abstract virtual prjOptionExplicit get_OptionExplicit();
    [DispIdAttribute("10059")]
public abstract virtual void set_OptionExplicit(prjOptionExplicit value);
    [DispIdAttribute("10060")]
public abstract virtual prjCompare get_OptionCompare();
    [DispIdAttribute("10060")]
public abstract virtual void set_OptionCompare(prjCompare value);
    [DispIdAttribute("10067")]
public abstract virtual prjProjectType get_ProjectType();
    [DispIdAttribute("10068")]
public abstract virtual string get_DefaultNamespace();
    [DispIdAttribute("10068")]
public abstract virtual void set_DefaultNamespace(string value);
    [DispIdAttribute("10076")]
public abstract virtual string get_PreBuildEvent();
    [DispIdAttribute("10076")]
public abstract virtual void set_PreBuildEvent(string value);
    [DispIdAttribute("10077")]
public abstract virtual string get_PostBuildEvent();
    [DispIdAttribute("10077")]
public abstract virtual void set_PostBuildEvent(string value);
    [DispIdAttribute("10078")]
public abstract virtual prjRunPostBuildEvent get_RunPostBuildEvent();
    [DispIdAttribute("10078")]
public abstract virtual void set_RunPostBuildEvent(prjRunPostBuildEvent value);
    [DispIdAttribute("10080")]
public abstract virtual string get_AspnetVersion();
    [DispIdAttribute("12102")]
public abstract virtual string get_Title();
    [DispIdAttribute("12102")]
public abstract virtual void set_Title(string value);
    [DispIdAttribute("12103")]
public abstract virtual string get_Description();
    [DispIdAttribute("12103")]
public abstract virtual void set_Description(string value);
    [DispIdAttribute("12104")]
public abstract virtual string get_Company();
    [DispIdAttribute("12104")]
public abstract virtual void set_Company(string value);
    [DispIdAttribute("12105")]
public abstract virtual string get_Product();
    [DispIdAttribute("12105")]
public abstract virtual void set_Product(string value);
    [DispIdAttribute("12106")]
public abstract virtual string get_Copyright();
    [DispIdAttribute("12106")]
public abstract virtual void set_Copyright(string value);
    [DispIdAttribute("12107")]
public abstract virtual string get_Trademark();
    [DispIdAttribute("12107")]
public abstract virtual void set_Trademark(string value);
    [DispIdAttribute("12108")]
public abstract virtual prjAssemblyType get_AssemblyType();
    [DispIdAttribute("12108")]
public abstract virtual void set_AssemblyType(prjAssemblyType value);
    [DispIdAttribute("12109")]
public abstract virtual bool get_TypeComplianceDiagnostics();
    [DispIdAttribute("12109")]
public abstract virtual void set_TypeComplianceDiagnostics(bool value);
    [DispIdAttribute("12112")]
public abstract virtual string get_Win32ResourceFile();
    [DispIdAttribute("12112")]
public abstract virtual void set_Win32ResourceFile(string value);
    [DispIdAttribute("12115")]
public abstract virtual string get_AssemblyKeyProviderName();
    [DispIdAttribute("12115")]
public abstract virtual void set_AssemblyKeyProviderName(string value);
    [DispIdAttribute("12114")]
public abstract virtual UInt32 get_AssemblyOriginatorKeyFileType();
    [DispIdAttribute("12114")]
public abstract virtual void set_AssemblyOriginatorKeyFileType(UInt32 value);
    [DispIdAttribute("12116")]
public abstract virtual string get_AssemblyVersion();
    [DispIdAttribute("12116")]
public abstract virtual void set_AssemblyVersion(string value);
    [DispIdAttribute("12117")]
public abstract virtual string get_AssemblyFileVersion();
    [DispIdAttribute("12117")]
public abstract virtual void set_AssemblyFileVersion(string value);
    [DispIdAttribute("12119")]
public abstract virtual bool get_GenerateManifests();
    [DispIdAttribute("12119")]
public abstract virtual void set_GenerateManifests(bool value);
    [DispIdAttribute("12120")]
public abstract virtual bool get_EnableSecurityDebugging();
    [DispIdAttribute("12120")]
public abstract virtual void set_EnableSecurityDebugging(bool value);
    [DispIdAttribute("12118")]
public abstract virtual string get_DebugSecurityZoneURL();
    [DispIdAttribute("12118")]
public abstract virtual void set_DebugSecurityZoneURL(string value);
    [DispIdAttribute("12122")]
public abstract virtual object get_Publish();
    [DispIdAttribute("12123")]
public abstract virtual bool get_ComVisible();
    [DispIdAttribute("12123")]
public abstract virtual void set_ComVisible(bool value);
    [DispIdAttribute("12124")]
public abstract virtual string get_AssemblyGuid();
    [DispIdAttribute("12124")]
public abstract virtual void set_AssemblyGuid(string value);
    [DispIdAttribute("12125")]
public abstract virtual string get_NeutralResourcesLanguage();
    [DispIdAttribute("12125")]
public abstract virtual void set_NeutralResourcesLanguage(string value);
    [DispIdAttribute("12126")]
public abstract virtual bool get_SignAssembly();
    [DispIdAttribute("12126")]
public abstract virtual void set_SignAssembly(bool value);
    [DispIdAttribute("12132")]
public abstract virtual bool get_SignManifests();
    [DispIdAttribute("12132")]
public abstract virtual void set_SignManifests(bool value);
    [DispIdAttribute("12127")]
public abstract virtual string get_TargetZone();
    [DispIdAttribute("12127")]
public abstract virtual void set_TargetZone(string value);
    [DispIdAttribute("12128")]
public abstract virtual string get_ExcludedPermissions();
    [DispIdAttribute("12128")]
public abstract virtual void set_ExcludedPermissions(string value);
    [DispIdAttribute("12129")]
public abstract virtual string get_ManifestCertificateThumbprint();
    [DispIdAttribute("12129")]
public abstract virtual void set_ManifestCertificateThumbprint(string value);
    [DispIdAttribute("12130")]
public abstract virtual string get_ManifestKeyFile();
    [DispIdAttribute("12130")]
public abstract virtual void set_ManifestKeyFile(string value);
    [DispIdAttribute("12131")]
public abstract virtual string get_ManifestTimestampUrl();
    [DispIdAttribute("12131")]
public abstract virtual void set_ManifestTimestampUrl(string value);
}
public enum VSLangProj80.ProjectReferencesEvent : Enum {
    public int value__;
    public static ProjectReferencesEvent RefsEvt_RefAdded;
    public static ProjectReferencesEvent RefsEvt_RefRemoved;
    public static ProjectReferencesEvent RefsEvt_RefChanged;
}
[GuidAttribute("5021602E-2025-4299-88D2-0A92E8B41ADF")]
public interface VSLangProj80.Reference3 {
    [DispIdAttribute("1")]
public DTE DTE { get; }
    [DispIdAttribute("2")]
public References Collection { get; }
    [DispIdAttribute("3")]
public Project ContainingProject { get; }
    [DispIdAttribute("5")]
public string Name { get; }
    [DispIdAttribute("6")]
public prjReferenceType Type { get; }
    [DispIdAttribute("7")]
public string Identity { get; }
    [DispIdAttribute("8")]
public string Path { get; }
    [DispIdAttribute("9")]
public string Description { get; }
    [DispIdAttribute("10")]
public string Culture { get; }
    [DispIdAttribute("11")]
public int MajorVersion { get; }
    [DispIdAttribute("12")]
public int MinorVersion { get; }
    [DispIdAttribute("13")]
public int RevisionNumber { get; }
    [DispIdAttribute("14")]
public int BuildNumber { get; }
    [DispIdAttribute("15")]
public bool StrongName { get; }
    [DispIdAttribute("16")]
public Project SourceProject { get; }
    [DispIdAttribute("17")]
public bool CopyLocal { get; public set; }
    [DispIdAttribute("19")]
public object ExtenderNames { get; }
    [DispIdAttribute("20")]
public string ExtenderCATID { get; }
    [DispIdAttribute("21")]
public string PublicKeyToken { get; }
    [DispIdAttribute("22")]
public string Version { get; }
    [DispIdAttribute("100")]
public string RuntimeVersion { get; }
    [DispIdAttribute("120")]
public bool SpecificVersion { get; public set; }
    [DispIdAttribute("121")]
public string SubType { get; public set; }
    [DispIdAttribute("122")]
public bool Isolated { get; public set; }
    [DispIdAttribute("123")]
public string Aliases { get; public set; }
    [ComAliasNameAttribute("VSLangProj80.PROJECTREFERENCETYPE")]
[DispIdAttribute("124")]
public UInt32 RefType { get; }
    [DispIdAttribute("125")]
public bool AutoReferenced { get; }
    [DispIdAttribute("126")]
public bool Resolved { get; }
    [DispIdAttribute("1")]
public abstract virtual DTE get_DTE();
    [DispIdAttribute("2")]
public abstract virtual References get_Collection();
    [DispIdAttribute("3")]
public abstract virtual Project get_ContainingProject();
    [DispIdAttribute("4")]
public abstract virtual void Remove();
    [DispIdAttribute("5")]
public abstract virtual string get_Name();
    [DispIdAttribute("6")]
public abstract virtual prjReferenceType get_Type();
    [DispIdAttribute("7")]
public abstract virtual string get_Identity();
    [DispIdAttribute("8")]
public abstract virtual string get_Path();
    [DispIdAttribute("9")]
public abstract virtual string get_Description();
    [DispIdAttribute("10")]
public abstract virtual string get_Culture();
    [DispIdAttribute("11")]
public abstract virtual int get_MajorVersion();
    [DispIdAttribute("12")]
public abstract virtual int get_MinorVersion();
    [DispIdAttribute("13")]
public abstract virtual int get_RevisionNumber();
    [DispIdAttribute("14")]
public abstract virtual int get_BuildNumber();
    [DispIdAttribute("15")]
public abstract virtual bool get_StrongName();
    [DispIdAttribute("16")]
public abstract virtual Project get_SourceProject();
    [DispIdAttribute("17")]
public abstract virtual bool get_CopyLocal();
    [DispIdAttribute("17")]
public abstract virtual void set_CopyLocal(bool value);
    [DispIdAttribute("18")]
public abstract virtual object get_Extender(string extenderName);
    [DispIdAttribute("19")]
public abstract virtual object get_ExtenderNames();
    [DispIdAttribute("20")]
public abstract virtual string get_ExtenderCATID();
    [DispIdAttribute("21")]
public abstract virtual string get_PublicKeyToken();
    [DispIdAttribute("22")]
public abstract virtual string get_Version();
    [DispIdAttribute("100")]
public abstract virtual string get_RuntimeVersion();
    [DispIdAttribute("120")]
public abstract virtual bool get_SpecificVersion();
    [DispIdAttribute("120")]
public abstract virtual void set_SpecificVersion(bool value);
    [DispIdAttribute("121")]
public abstract virtual string get_SubType();
    [DispIdAttribute("121")]
public abstract virtual void set_SubType(string value);
    [DispIdAttribute("122")]
public abstract virtual bool get_Isolated();
    [DispIdAttribute("122")]
public abstract virtual void set_Isolated(bool value);
    [DispIdAttribute("123")]
public abstract virtual string get_Aliases();
    [DispIdAttribute("123")]
public abstract virtual void set_Aliases(string value);
    [DispIdAttribute("124")]
public abstract virtual UInt32 get_RefType();
    [DispIdAttribute("125")]
public abstract virtual bool get_AutoReferenced();
    [DispIdAttribute("126")]
public abstract virtual bool get_Resolved();
}
[GuidAttribute("DEBB3D21-A024-410E-AA3B-1ABC31625EB7")]
public enum VSLangProj80.sgenGenerationOption : Enum {
    public int value__;
    public static sgenGenerationOption sgenGenerationOption_Off;
    public static sgenGenerationOption sgenGenerationOption_On;
    public static sgenGenerationOption sgenGenerationOption_Auto;
}
[GuidAttribute("C65A2F92-B350-4B0F-9BC6-B00E24BC8B9D")]
[InterfaceTypeAttribute("1")]
public interface VSLangProj80.SVSWebReferenceDynamicProperties {
}
[GuidAttribute("A93BFE7B-CFDA-471D-93C6-1747D0B06E8E")]
public interface VSLangProj80.VBProjectProperties3 {
    [DispIdAttribute("-2147418112")]
public string __id { get; }
    [DispIdAttribute("10035")]
public object __project { get; }
    [DispIdAttribute("10015")]
public string StartupObject { get; public set; }
    [DispIdAttribute("10016")]
public prjOutputType OutputType { get; public set; }
    [DispIdAttribute("10042")]
public string RootNamespace { get; public set; }
    [DispIdAttribute("10013")]
public string AssemblyName { get; public set; }
    [DispIdAttribute("10044")]
public string AssemblyOriginatorKeyFile { get; public set; }
    [DispIdAttribute("10045")]
public string AssemblyKeyContainerName { get; public set; }
    [DispIdAttribute("10043")]
public prjOriginatorKeyMode AssemblyOriginatorKeyMode { get; public set; }
    [DispIdAttribute("10046")]
public bool DelaySign { get; public set; }
    [DispIdAttribute("10012")]
public string WebServer { get; }
    [DispIdAttribute("10017")]
public string WebServerVersion { get; }
    [DispIdAttribute("10018")]
public string ServerExtensionsVersion { get; }
    [DispIdAttribute("10019")]
public bool LinkRepair { get; public set; }
    [DispIdAttribute("10020")]
public string OfflineURL { get; }
    [DispIdAttribute("10047")]
public string FileSharePath { get; public set; }
    [DispIdAttribute("10048")]
public string ActiveFileSharePath { get; }
    [DispIdAttribute("10049")]
public prjWebAccessMethod WebAccessMethod { get; public set; }
    [DispIdAttribute("10050")]
public prjWebAccessMethod ActiveWebAccessMethod { get; }
    [DispIdAttribute("10021")]
public prjScriptLanguage DefaultClientScript { get; public set; }
    [DispIdAttribute("10022")]
public prjTargetSchema DefaultTargetSchema { get; public set; }
    [DispIdAttribute("10023")]
public prjHTMLPageLayout DefaultHTMLPageLayout { get; public set; }
    [DispIdAttribute("10026")]
public string FileName { get; public set; }
    [DispIdAttribute("10027")]
public string FullPath { get; }
    [DispIdAttribute("10028")]
public string LocalPath { get; }
    [DispIdAttribute("10029")]
public string URL { get; }
    [DispIdAttribute("10033")]
public ProjectConfigurationProperties ActiveConfigurationSettings { get; }
    [DispIdAttribute("10030")]
public object Extender { get; }
    [DispIdAttribute("10031")]
public object ExtenderNames { get; }
    [DispIdAttribute("10032")]
public string ExtenderCATID { get; }
    [DispIdAttribute("10011")]
public string ApplicationIcon { get; public set; }
    [DispIdAttribute("10051")]
public prjOptionStrict OptionStrict { get; public set; }
    [DispIdAttribute("10056")]
public string ReferencePath { get; public set; }
    [DispIdAttribute("10009")]
public string OutputFileName { get; }
    [DispIdAttribute("10034")]
public string AbsoluteProjectDirectory { get; }
    [DispIdAttribute("10059")]
public prjOptionExplicit OptionExplicit { get; public set; }
    [DispIdAttribute("10060")]
public prjCompare OptionCompare { get; public set; }
    [DispIdAttribute("10067")]
public prjProjectType ProjectType { get; }
    [DispIdAttribute("10068")]
public string DefaultNamespace { get; public set; }
    [DispIdAttribute("10076")]
public string PreBuildEvent { get; public set; }
    [DispIdAttribute("10077")]
public string PostBuildEvent { get; public set; }
    [DispIdAttribute("10078")]
public prjRunPostBuildEvent RunPostBuildEvent { get; public set; }
    [DispIdAttribute("10080")]
public string AspnetVersion { get; }
    [DispIdAttribute("12102")]
public string Title { get; public set; }
    [DispIdAttribute("12103")]
public string Description { get; public set; }
    [DispIdAttribute("12104")]
public string Company { get; public set; }
    [DispIdAttribute("12105")]
public string Product { get; public set; }
    [DispIdAttribute("12106")]
public string Copyright { get; public set; }
    [DispIdAttribute("12107")]
public string Trademark { get; public set; }
    [DispIdAttribute("12108")]
public prjAssemblyType AssemblyType { get; public set; }
    [DispIdAttribute("12109")]
public bool TypeComplianceDiagnostics { get; public set; }
    [DispIdAttribute("12112")]
public string Win32ResourceFile { get; public set; }
    [DispIdAttribute("12115")]
public string AssemblyKeyProviderName { get; public set; }
    [ComAliasNameAttribute("VSLangProj80.DWORD")]
[DispIdAttribute("12114")]
public UInt32 AssemblyOriginatorKeyFileType { get; public set; }
    [DispIdAttribute("12116")]
public string AssemblyVersion { get; public set; }
    [DispIdAttribute("12117")]
public string AssemblyFileVersion { get; public set; }
    [DispIdAttribute("12119")]
public bool GenerateManifests { get; public set; }
    [DispIdAttribute("12120")]
public bool EnableSecurityDebugging { get; public set; }
    [DispIdAttribute("12118")]
public string DebugSecurityZoneURL { get; public set; }
    [DispIdAttribute("12122")]
public object Publish { get; }
    [DispIdAttribute("12123")]
public bool ComVisible { get; public set; }
    [DispIdAttribute("12124")]
public string AssemblyGuid { get; public set; }
    [DispIdAttribute("12125")]
public string NeutralResourcesLanguage { get; public set; }
    [DispIdAttribute("12126")]
public bool SignAssembly { get; public set; }
    [DispIdAttribute("12132")]
public bool SignManifests { get; public set; }
    [DispIdAttribute("12127")]
public string TargetZone { get; public set; }
    [DispIdAttribute("12128")]
public string ExcludedPermissions { get; public set; }
    [DispIdAttribute("12129")]
public string ManifestCertificateThumbprint { get; public set; }
    [DispIdAttribute("12130")]
public string ManifestKeyFile { get; public set; }
    [DispIdAttribute("12131")]
public string ManifestTimestampUrl { get; public set; }
    [DispIdAttribute("14101")]
public object MyApplication { get; }
    [DispIdAttribute("14102")]
public string MyType { get; public set; }
    [DispIdAttribute("-2147418112")]
public abstract virtual string get___id();
    [DispIdAttribute("10035")]
public abstract virtual object get___project();
    [DispIdAttribute("10015")]
public abstract virtual string get_StartupObject();
    [DispIdAttribute("10015")]
public abstract virtual void set_StartupObject(string value);
    [DispIdAttribute("10016")]
public abstract virtual prjOutputType get_OutputType();
    [DispIdAttribute("10016")]
public abstract virtual void set_OutputType(prjOutputType value);
    [DispIdAttribute("10042")]
public abstract virtual string get_RootNamespace();
    [DispIdAttribute("10042")]
public abstract virtual void set_RootNamespace(string value);
    [DispIdAttribute("10013")]
public abstract virtual string get_AssemblyName();
    [DispIdAttribute("10013")]
public abstract virtual void set_AssemblyName(string value);
    [DispIdAttribute("10044")]
public abstract virtual string get_AssemblyOriginatorKeyFile();
    [DispIdAttribute("10044")]
public abstract virtual void set_AssemblyOriginatorKeyFile(string value);
    [DispIdAttribute("10045")]
public abstract virtual string get_AssemblyKeyContainerName();
    [DispIdAttribute("10045")]
public abstract virtual void set_AssemblyKeyContainerName(string value);
    [DispIdAttribute("10043")]
public abstract virtual prjOriginatorKeyMode get_AssemblyOriginatorKeyMode();
    [DispIdAttribute("10043")]
public abstract virtual void set_AssemblyOriginatorKeyMode(prjOriginatorKeyMode value);
    [DispIdAttribute("10046")]
public abstract virtual bool get_DelaySign();
    [DispIdAttribute("10046")]
public abstract virtual void set_DelaySign(bool value);
    [DispIdAttribute("10012")]
public abstract virtual string get_WebServer();
    [DispIdAttribute("10017")]
public abstract virtual string get_WebServerVersion();
    [DispIdAttribute("10018")]
public abstract virtual string get_ServerExtensionsVersion();
    [DispIdAttribute("10019")]
public abstract virtual bool get_LinkRepair();
    [DispIdAttribute("10019")]
public abstract virtual void set_LinkRepair(bool value);
    [DispIdAttribute("10020")]
public abstract virtual string get_OfflineURL();
    [DispIdAttribute("10047")]
public abstract virtual string get_FileSharePath();
    [DispIdAttribute("10047")]
public abstract virtual void set_FileSharePath(string value);
    [DispIdAttribute("10048")]
public abstract virtual string get_ActiveFileSharePath();
    [DispIdAttribute("10049")]
public abstract virtual prjWebAccessMethod get_WebAccessMethod();
    [DispIdAttribute("10049")]
public abstract virtual void set_WebAccessMethod(prjWebAccessMethod value);
    [DispIdAttribute("10050")]
public abstract virtual prjWebAccessMethod get_ActiveWebAccessMethod();
    [DispIdAttribute("10021")]
public abstract virtual prjScriptLanguage get_DefaultClientScript();
    [DispIdAttribute("10021")]
public abstract virtual void set_DefaultClientScript(prjScriptLanguage value);
    [DispIdAttribute("10022")]
public abstract virtual prjTargetSchema get_DefaultTargetSchema();
    [DispIdAttribute("10022")]
public abstract virtual void set_DefaultTargetSchema(prjTargetSchema value);
    [DispIdAttribute("10023")]
public abstract virtual prjHTMLPageLayout get_DefaultHTMLPageLayout();
    [DispIdAttribute("10023")]
public abstract virtual void set_DefaultHTMLPageLayout(prjHTMLPageLayout value);
    [DispIdAttribute("10026")]
public abstract virtual string get_FileName();
    [DispIdAttribute("10026")]
public abstract virtual void set_FileName(string value);
    [DispIdAttribute("10027")]
public abstract virtual string get_FullPath();
    [DispIdAttribute("10028")]
public abstract virtual string get_LocalPath();
    [DispIdAttribute("10029")]
public abstract virtual string get_URL();
    [DispIdAttribute("10033")]
public abstract virtual ProjectConfigurationProperties get_ActiveConfigurationSettings();
    [DispIdAttribute("10030")]
public abstract virtual object get_Extender();
    [DispIdAttribute("10031")]
public abstract virtual object get_ExtenderNames();
    [DispIdAttribute("10032")]
public abstract virtual string get_ExtenderCATID();
    [DispIdAttribute("10011")]
public abstract virtual string get_ApplicationIcon();
    [DispIdAttribute("10011")]
public abstract virtual void set_ApplicationIcon(string value);
    [DispIdAttribute("10051")]
public abstract virtual prjOptionStrict get_OptionStrict();
    [DispIdAttribute("10051")]
public abstract virtual void set_OptionStrict(prjOptionStrict value);
    [DispIdAttribute("10056")]
public abstract virtual string get_ReferencePath();
    [DispIdAttribute("10056")]
public abstract virtual void set_ReferencePath(string value);
    [DispIdAttribute("10009")]
public abstract virtual string get_OutputFileName();
    [DispIdAttribute("10034")]
public abstract virtual string get_AbsoluteProjectDirectory();
    [DispIdAttribute("10059")]
public abstract virtual prjOptionExplicit get_OptionExplicit();
    [DispIdAttribute("10059")]
public abstract virtual void set_OptionExplicit(prjOptionExplicit value);
    [DispIdAttribute("10060")]
public abstract virtual prjCompare get_OptionCompare();
    [DispIdAttribute("10060")]
public abstract virtual void set_OptionCompare(prjCompare value);
    [DispIdAttribute("10067")]
public abstract virtual prjProjectType get_ProjectType();
    [DispIdAttribute("10068")]
public abstract virtual string get_DefaultNamespace();
    [DispIdAttribute("10068")]
public abstract virtual void set_DefaultNamespace(string value);
    [DispIdAttribute("10076")]
public abstract virtual string get_PreBuildEvent();
    [DispIdAttribute("10076")]
public abstract virtual void set_PreBuildEvent(string value);
    [DispIdAttribute("10077")]
public abstract virtual string get_PostBuildEvent();
    [DispIdAttribute("10077")]
public abstract virtual void set_PostBuildEvent(string value);
    [DispIdAttribute("10078")]
public abstract virtual prjRunPostBuildEvent get_RunPostBuildEvent();
    [DispIdAttribute("10078")]
public abstract virtual void set_RunPostBuildEvent(prjRunPostBuildEvent value);
    [DispIdAttribute("10080")]
public abstract virtual string get_AspnetVersion();
    [DispIdAttribute("12102")]
public abstract virtual string get_Title();
    [DispIdAttribute("12102")]
public abstract virtual void set_Title(string value);
    [DispIdAttribute("12103")]
public abstract virtual string get_Description();
    [DispIdAttribute("12103")]
public abstract virtual void set_Description(string value);
    [DispIdAttribute("12104")]
public abstract virtual string get_Company();
    [DispIdAttribute("12104")]
public abstract virtual void set_Company(string value);
    [DispIdAttribute("12105")]
public abstract virtual string get_Product();
    [DispIdAttribute("12105")]
public abstract virtual void set_Product(string value);
    [DispIdAttribute("12106")]
public abstract virtual string get_Copyright();
    [DispIdAttribute("12106")]
public abstract virtual void set_Copyright(string value);
    [DispIdAttribute("12107")]
public abstract virtual string get_Trademark();
    [DispIdAttribute("12107")]
public abstract virtual void set_Trademark(string value);
    [DispIdAttribute("12108")]
public abstract virtual prjAssemblyType get_AssemblyType();
    [DispIdAttribute("12108")]
public abstract virtual void set_AssemblyType(prjAssemblyType value);
    [DispIdAttribute("12109")]
public abstract virtual bool get_TypeComplianceDiagnostics();
    [DispIdAttribute("12109")]
public abstract virtual void set_TypeComplianceDiagnostics(bool value);
    [DispIdAttribute("12112")]
public abstract virtual string get_Win32ResourceFile();
    [DispIdAttribute("12112")]
public abstract virtual void set_Win32ResourceFile(string value);
    [DispIdAttribute("12115")]
public abstract virtual string get_AssemblyKeyProviderName();
    [DispIdAttribute("12115")]
public abstract virtual void set_AssemblyKeyProviderName(string value);
    [DispIdAttribute("12114")]
public abstract virtual UInt32 get_AssemblyOriginatorKeyFileType();
    [DispIdAttribute("12114")]
public abstract virtual void set_AssemblyOriginatorKeyFileType(UInt32 value);
    [DispIdAttribute("12116")]
public abstract virtual string get_AssemblyVersion();
    [DispIdAttribute("12116")]
public abstract virtual void set_AssemblyVersion(string value);
    [DispIdAttribute("12117")]
public abstract virtual string get_AssemblyFileVersion();
    [DispIdAttribute("12117")]
public abstract virtual void set_AssemblyFileVersion(string value);
    [DispIdAttribute("12119")]
public abstract virtual bool get_GenerateManifests();
    [DispIdAttribute("12119")]
public abstract virtual void set_GenerateManifests(bool value);
    [DispIdAttribute("12120")]
public abstract virtual bool get_EnableSecurityDebugging();
    [DispIdAttribute("12120")]
public abstract virtual void set_EnableSecurityDebugging(bool value);
    [DispIdAttribute("12118")]
public abstract virtual string get_DebugSecurityZoneURL();
    [DispIdAttribute("12118")]
public abstract virtual void set_DebugSecurityZoneURL(string value);
    [DispIdAttribute("12122")]
public abstract virtual object get_Publish();
    [DispIdAttribute("12123")]
public abstract virtual bool get_ComVisible();
    [DispIdAttribute("12123")]
public abstract virtual void set_ComVisible(bool value);
    [DispIdAttribute("12124")]
public abstract virtual string get_AssemblyGuid();
    [DispIdAttribute("12124")]
public abstract virtual void set_AssemblyGuid(string value);
    [DispIdAttribute("12125")]
public abstract virtual string get_NeutralResourcesLanguage();
    [DispIdAttribute("12125")]
public abstract virtual void set_NeutralResourcesLanguage(string value);
    [DispIdAttribute("12126")]
public abstract virtual bool get_SignAssembly();
    [DispIdAttribute("12126")]
public abstract virtual void set_SignAssembly(bool value);
    [DispIdAttribute("12132")]
public abstract virtual bool get_SignManifests();
    [DispIdAttribute("12132")]
public abstract virtual void set_SignManifests(bool value);
    [DispIdAttribute("12127")]
public abstract virtual string get_TargetZone();
    [DispIdAttribute("12127")]
public abstract virtual void set_TargetZone(string value);
    [DispIdAttribute("12128")]
public abstract virtual string get_ExcludedPermissions();
    [DispIdAttribute("12128")]
public abstract virtual void set_ExcludedPermissions(string value);
    [DispIdAttribute("12129")]
public abstract virtual string get_ManifestCertificateThumbprint();
    [DispIdAttribute("12129")]
public abstract virtual void set_ManifestCertificateThumbprint(string value);
    [DispIdAttribute("12130")]
public abstract virtual string get_ManifestKeyFile();
    [DispIdAttribute("12130")]
public abstract virtual void set_ManifestKeyFile(string value);
    [DispIdAttribute("12131")]
public abstract virtual string get_ManifestTimestampUrl();
    [DispIdAttribute("12131")]
public abstract virtual void set_ManifestTimestampUrl(string value);
    [DispIdAttribute("14101")]
public abstract virtual object get_MyApplication();
    [DispIdAttribute("14102")]
public abstract virtual string get_MyType();
    [DispIdAttribute("14102")]
public abstract virtual void set_MyType(string value);
}
public enum VSLangProj80.VBProjPropId : Enum {
    public int value__;
    public static VBProjPropId VBPROJPROPID_MyApplication;
    public static VBProjPropId VBPROJPROPID_MyType;
}
[GuidAttribute("0FECB64A-8779-4A7B-B7CD-226DD6531FB1")]
public abstract class VSLangProj80.vsContextGuids : object {
    public static string vsContextGuidVCSProject;
    public static string vsContextGuidVCSEditor;
    public static string vsContextGuidVBProject;
    public static string vsContextGuidVBEditor;
    public static string vsContextGuidVJSProject;
    public static string vsContextGuidVJSEditor;
}
[ComVisibleAttribute("False")]
[GuidAttribute("33BD7FEF-EEB4-412A-A4C1-9FBFF6F57067")]
[CoClassAttribute("VSLangProj80.VSLangProjWebReferencesEventsClass")]
public interface VSLangProj80.VSLangProjWebReferencesEvents {
}
[ComVisibleAttribute("False")]
[ComSourceInterfacesAttribute("VSLangProj80._dispVSLangProjWebReferencesEvents")]
[GuidAttribute("2DF4B0DE-579D-46B2-9D6E-88AF01E08FB0")]
[ClassInterfaceAttribute("0")]
public class VSLangProj80.VSLangProjWebReferencesEventsClass : object {
}
[GuidAttribute("B1042570-25C6-424A-B58B-56FA83AA828A")]
public interface VSLangProj80.VSProject2 {
    [DispIdAttribute("1")]
public References References { get; }
    [DispIdAttribute("2")]
public BuildManager BuildManager { get; }
    [DispIdAttribute("3")]
public DTE DTE { get; }
    [DispIdAttribute("4")]
public Project Project { get; }
    [DispIdAttribute("6")]
public ProjectItem WebReferencesFolder { get; }
    [DispIdAttribute("8")]
public string TemplatePath { get; }
    [DispIdAttribute("10")]
public bool WorkOffline { get; public set; }
    [DispIdAttribute("11")]
public Imports Imports { get; }
    [DispIdAttribute("12")]
public VSProjectEvents Events { get; }
    [DispIdAttribute("17")]
public object PublishManager { get; }
    [DispIdAttribute("18")]
public VSProjectEvents2 Events2 { get; }
    [DispIdAttribute("1")]
public abstract virtual References get_References();
    [DispIdAttribute("2")]
public abstract virtual BuildManager get_BuildManager();
    [DispIdAttribute("3")]
public abstract virtual DTE get_DTE();
    [DispIdAttribute("4")]
public abstract virtual Project get_Project();
    [DispIdAttribute("5")]
public abstract virtual ProjectItem CreateWebReferencesFolder();
    [DispIdAttribute("6")]
public abstract virtual ProjectItem get_WebReferencesFolder();
    [DispIdAttribute("7")]
public abstract virtual ProjectItem AddWebReference(string bstrUrl);
    [DispIdAttribute("8")]
public abstract virtual string get_TemplatePath();
    [DispIdAttribute("9")]
public abstract virtual void Refresh();
    [DispIdAttribute("10")]
public abstract virtual bool get_WorkOffline();
    [DispIdAttribute("10")]
public abstract virtual void set_WorkOffline(bool value);
    [DispIdAttribute("11")]
public abstract virtual Imports get_Imports();
    [DispIdAttribute("12")]
public abstract virtual VSProjectEvents get_Events();
    [DispIdAttribute("13")]
public abstract virtual void CopyProject(string bstrDestFolder, string bstrDestUNCPath, prjCopyProjectOption copyProjectOption, string bstrUsername, string bstrPassword);
    [DispIdAttribute("14")]
public abstract virtual void Exec(prjExecCommand command, int bSuppressUI, object varIn, Object& pVarOut);
    [DispIdAttribute("15")]
public abstract virtual void GenerateKeyPairFiles(string strPublicPrivateFile, string strPublicOnlyFile);
    [DispIdAttribute("16")]
public abstract virtual string GetUniqueFilename(object pDispatch, string bstrRoot, string bstrDesiredExt);
    [DispIdAttribute("17")]
public abstract virtual object get_PublishManager();
    [DispIdAttribute("18")]
public abstract virtual VSProjectEvents2 get_Events2();
}
[GuidAttribute("6DCBC5A7-37BF-461C-958F-A81DA10D242E")]
public interface VSLangProj80.VSProjectEvents2 {
    [DispIdAttribute("1")]
public ReferencesEvents ReferencesEvents { get; }
    [DispIdAttribute("2")]
public BuildManagerEvents BuildManagerEvents { get; }
    [DispIdAttribute("3")]
public ImportsEvents ImportsEvents { get; }
    [DispIdAttribute("4")]
public VSLangProjWebReferencesEvents VSLangProjWebReferencesEvents { get; }
    [DispIdAttribute("1")]
public abstract virtual ReferencesEvents get_ReferencesEvents();
    [DispIdAttribute("2")]
public abstract virtual BuildManagerEvents get_BuildManagerEvents();
    [DispIdAttribute("3")]
public abstract virtual ImportsEvents get_ImportsEvents();
    [DispIdAttribute("4")]
public abstract virtual VSLangProjWebReferencesEvents get_VSLangProjWebReferencesEvents();
}
public enum VSLangProj80.VsProjFilePropId : Enum {
    public int value__;
    public static VsProjFilePropId DISPID_VBFile_FileName;
    public static VsProjFilePropId DISPID_VBFile_Extension;
    public static VsProjFilePropId DISPID_VBFile_Filesize;
    public static VsProjFilePropId DISPID_VBFile_LocalPath;
    public static VsProjFilePropId DISPID_VBFile_FullPath;
    public static VsProjFilePropId DISPID_VBFile_URL;
    public static VsProjFilePropId DISPID_VBFile_HTMLTitle;
    public static VsProjFilePropId DISPID_VBFile_Author;
    public static VsProjFilePropId DISPID_VBFile_DateCreated;
    public static VsProjFilePropId DISPID_VBFile_DateModified;
    public static VsProjFilePropId DISPID_VBFile_ModifiedBy;
    public static VsProjFilePropId DISPID_VBFile_SubType;
    public static VsProjFilePropId DISPID_VBFile_Extender;
    public static VsProjFilePropId DISPID_VBFile_ExtenderNames;
    public static VsProjFilePropId DISPID_VBFile_ExtenderCATID;
    public static VsProjFilePropId DISPID_VBFile_BuildAction;
    public static VsProjFilePropId DISPID_VBFile_CustomTool;
    public static VsProjFilePropId DISPID_VBFile_CustomToolNamespace;
    public static VsProjFilePropId DISPID_VBFile_CustomToolOutput;
    public static VsProjFilePropId DISPID_VBFile_IsCustomToolOutput;
    public static VsProjFilePropId DISPID_VBFile_IsDependentFile;
    public static VsProjFilePropId DISPID_VBFile_IsLink;
    public static VsProjFilePropId DISPID_VBFile_IsDesignTimeBuildInput;
}
public enum VSLangProj80.VsProjFilePropId80 : Enum {
    public int value__;
    public static VsProjFilePropId80 DISPID_VBFile_CopyToOutputDirectory;
    public static VsProjFilePropId80 DISPID_VBFile_ItemType;
    public static VsProjFilePropId80 DISPID_VBFile_IsSharedDesignTimeBuildInput;
}
public enum VSLangProj80.VsProjFolderPropId : Enum {
    public int value__;
    public static VsProjFolderPropId DISPID_VBFolder_FileName;
    public static VsProjFolderPropId DISPID_VBFolder_LocalPath;
    public static VsProjFolderPropId DISPID_VBFolder_FullPath;
    public static VsProjFolderPropId DISPID_VBFolder_URL;
    public static VsProjFolderPropId DISPID_VBFolder_Extender;
    public static VsProjFolderPropId DISPID_VBFolder_ExtenderNames;
    public static VsProjFolderPropId DISPID_VBFolder_ExtenderCATID;
    public static VsProjFolderPropId DISPID_VBFolder_WebReference;
    public static VsProjFolderPropId DISPID_VBFolder_DefaultNamespace;
    public static VsProjFolderPropId DISPID_VBFolder_UrlBehavior;
}
public enum VSLangProj80.VsProjFolderPropId80 : Enum {
    public int value__;
    public static VsProjFolderPropId80 DISPID_VBFolder_WebReferenceInterface;
}
public enum VSLangProj80.VsProjPropId : Enum {
    public int value__;
    public static VsProjPropId VBPROJPROPID__First;
    public static VsProjPropId VBPROJPROPID_DebugSymbols;
    public static VsProjPropId VBPROJPROPID_StartArguments;
    public static VsProjPropId VBPROJPROPID_StartAction;
    public static VsProjPropId VBPROJPROPID_OutputPath;
    public static VsProjPropId VBPROJPROPID_DefineConstants;
    public static VsProjPropId VBPROJPROPID_StartProgram;
    public static VsProjPropId VBPROJPROPID_StartWorkingDirectory;
    public static VsProjPropId VBPROJPROPID_StartURL;
    public static VsProjPropId VBPROJPROPID_OutputFileName;
    public static VsProjPropId VBPROJPROPID_IntermediatePath;
    public static VsProjPropId VBPROJPROPID_ApplicationIcon;
    public static VsProjPropId VBPROJPROPID_WebServer;
    public static VsProjPropId VBPROJPROPID_AssemblyName;
    public static VsProjPropId VBPROJPROPID_Unused1;
    public static VsProjPropId VBPROJPROPID_StartupObject;
    public static VsProjPropId VBPROJPROPID_OutputType;
    public static VsProjPropId VBPROJPROPID_WebServerVersion;
    public static VsProjPropId VBPROJPROPID_ServerExtensionsVersion;
    public static VsProjPropId VBPROJPROPID_LinkRepair;
    public static VsProjPropId VBPROJPROPID_OfflineURL;
    public static VsProjPropId VBPROJPROPID_DefaultClientScript;
    public static VsProjPropId VBPROJPROPID_DefaultTargetSchema;
    public static VsProjPropId VBPROJPROPID_DefaultHTMLPageLayout;
    public static VsProjPropId VBPROJPROPID_ProjectFolder;
    public static VsProjPropId VBPROJPROPID_ProjectURL;
    public static VsProjPropId VBPROJPROPID_FileName;
    public static VsProjPropId VBPROJPROPID_FullPath;
    public static VsProjPropId VBPROJPROPID_LocalPath;
    public static VsProjPropId VBPROJPROPID_URL;
    public static VsProjPropId VBPROJPROPID_Extender;
    public static VsProjPropId VBPROJPROPID_ExtenderNames;
    public static VsProjPropId VBPROJPROPID_ExtenderCATID;
    public static VsProjPropId VBPROJPROPID_ActiveConfigurationSettings;
    public static VsProjPropId VBPROJPROPID_AbsoluteProjectDirectory;
    public static VsProjPropId VBPROJPROPID__Project;
    public static VsProjPropId VBPROJPROPID_DefineDebug;
    public static VsProjPropId VBPROJPROPID_DefineTrace;
    public static VsProjPropId VBPROJPROPID_StartPage;
    public static VsProjPropId VBPROJPROPID_StartWithIE;
    public static VsProjPropId VBPROJPROPID_EnableASPDebugging;
    public static VsProjPropId VBPROJPROPID_EnableASPXDebugging;
    public static VsProjPropId VBPROJPROPID_RootNamespace;
    public static VsProjPropId VBPROJPROPID_AssemblyOriginatorKeyMode;
    public static VsProjPropId VBPROJPROPID_AssemblyOriginatorKeyFile;
    public static VsProjPropId VBPROJPROPID_AssemblyKeyContainerName;
    public static VsProjPropId VBPROJPROPID_DelaySign;
    public static VsProjPropId VBPROJPROPID_FileSharePath;
    public static VsProjPropId VBPROJPROPID_ActiveFileSharePath;
    public static VsProjPropId VBPROJPROPID_WebAccessMethod;
    public static VsProjPropId VBPROJPROPID_ActiveWebAccessMethod;
    public static VsProjPropId VBPROJPROPID_OptionStrict;
    public static VsProjPropId VBPROJPROPID_WarningLevel;
    public static VsProjPropId VBPROJPROPID_TreatWarningsAsErrors;
    public static VsProjPropId VBPROJPROPID_RemoveIntegerChecks;
    public static VsProjPropId VBPROJPROPID_BaseAddress;
    public static VsProjPropId VBPROJPROPID_ReferencePath;
    public static VsProjPropId VBPROJPROPID_EnableUnmanagedDebugging;
    public static VsProjPropId VBPROJPROPID_EnableSQLServerDebugging;
    public static VsProjPropId VBPROJPROPID_OptionExplicit;
    public static VsProjPropId VBPROJPROPID_OptionCompare;
    public static VsProjPropId VBPROJPROPID_AllowUnsafeBlocks;
    public static VsProjPropId VBPROJPROPID_CheckForOverflowUnderflow;
    public static VsProjPropId VBPROJPROPID_DocumentationFile;
    public static VsProjPropId VBPROJPROPID_Optimize;
    public static VsProjPropId VBPROJPROPID_IncrementalBuild;
    public static VsProjPropId VBPROJPROPID_NoStandardLibraries;
    public static VsProjPropId VBPROJPROPID_ProjectType;
    public static VsProjPropId VBPROJPROPID_DefaultNamespace;
    public static VsProjPropId VBPROJPROPID_FileAlignment;
    public static VsProjPropId VBPROJPROPID_DisableWarnings;
    public static VsProjPropId VBAPROJPROPID_ProjectName;
    public static VsProjPropId VBPROJPROPID_RegisterForComInterop;
    public static VsProjPropId VBPROJPROPID_ConfigurationOverrideFile;
    public static VsProjPropId VBPROJPROPID_RemoteDebugEnabled;
    public static VsProjPropId VBPROJPROPID_RemoteDebugMachine;
}
public enum VSLangProj80.VsProjPropId2 : Enum {
    public int value__;
    public static VsProjPropId2 VBPROJPROPID_NoStdLib;
    public static VsProjPropId2 VBPROJPROPID_PreBuildEvent;
    public static VsProjPropId2 VBPROJPROPID_PostBuildEvent;
    public static VsProjPropId2 VBPROJPROPID_RunPostBuildEvent;
    public static VsProjPropId2 VBPROJPROPID_NoWarn;
    public static VsProjPropId2 VBPROJPROPID_AspnetVersion;
}
public enum VSLangProj80.VsProjPropId80 : Enum {
    public int value__;
    public static VsProjPropId80 VBPROJPROPID_DebugInfo;
    public static VsProjPropId80 VBPROJPROPID_PlatformTarget;
    public static VsProjPropId80 VBPROJPROPID_UseVSHostingProcess;
    public static VsProjPropId80 VBPROJPROPID_GenerateSerializationAssemblies;
    public static VsProjPropId80 VBPROJPROPID_RunCodeAnalysis;
    public static VsProjPropId80 VBPROJPROPID_CodeAnalysisLogFile;
    public static VsProjPropId80 VBPROJPROPID_CodeAnalysisRuleAssemblies;
    public static VsProjPropId80 VBPROJPROPID_CodeAnalysisRules;
    public static VsProjPropId80 VBPROJPROPID_CodeAnalysisInputAssembly;
    public static VsProjPropId80 VBPROJPROPID_CodeAnalysisSpellCheckLanguages;
    public static VsProjPropId80 VBPROJPROPID_CodeAnalysisUseTypeNameInSuppression;
    public static VsProjPropId80 VBPROJPROPID_CodeAnalysisModuleSuppressionsFile;
    public static VsProjPropId80 VBPROJPROPID_InstanceType;
    public static VsProjPropId80 VBPROJPROPID_ShutdownMode;
    public static VsProjPropId80 VBPROJPROPID_AssemblyTitle;
    public static VsProjPropId80 VBPROJPROPID_AssemblyDescription;
    public static VsProjPropId80 VBPROJPROPID_AssemblyCompany;
    public static VsProjPropId80 VBPROJPROPID_AssemblyProduct;
    public static VsProjPropId80 VBPROJPROPID_AssemblyCopyright;
    public static VsProjPropId80 VBPROJPROPID_AssemblyTrademark;
    public static VsProjPropId80 VBPROJPROPID_AssemblyType;
    public static VsProjPropId80 VBPROJPROPID_TypeComplianceDiagnostics;
    public static VsProjPropId80 VBPROJPROPID_CompatibilityChecks;
    public static VsProjPropId80 VBPROJPROPID_CompatibleAssembly;
    public static VsProjPropId80 VBPROJPROPID_Win32ResourceFile;
    public static VsProjPropId80 VBPROJPROPID_AssemblyOriginatorKeyFileType;
    public static VsProjPropId80 VBPROJPROPID_AssemblyKeyProviderName;
    public static VsProjPropId80 VBPROJPROPID_AssemblyVersion;
    public static VsProjPropId80 VBPROJPROPID_AssemblyFileVersion;
    public static VsProjPropId80 VBPROJPROPID_SecureDebugURL;
    public static VsProjPropId80 VBPROJPROPID_GenerateManifests;
    public static VsProjPropId80 VBPROJPROPID_EnableSecurityDebugging;
    public static VsProjPropId80 VBPROJPROPID_TreatSpecificWarningsAsErrors;
    public static VsProjPropId80 VBPROJPROPID_Publish;
    public static VsProjPropId80 VBPROJPROPID_ComVisible;
    public static VsProjPropId80 VBPROJPROPID_AssemblyGuid;
    public static VsProjPropId80 VBPROJPROPID_NeutralResourcesLanguage;
    public static VsProjPropId80 VBPROJPROPID_SignAssembly;
    public static VsProjPropId80 VBPROJPROPID_TargetZone;
    public static VsProjPropId80 VBPROJPROPID_ExcludedPermissions;
    public static VsProjPropId80 VBPROJPROPID_ManifestCertificateThumbprint;
    public static VsProjPropId80 VBPROJPROPID_ManifestKeyFile;
    public static VsProjPropId80 VBPROJPROPID_ManifestTimestampUrl;
    public static VsProjPropId80 VBPROJPROPID_SignManifests;
}
public enum VSLangProj80.VsProjReferencePropId : Enum {
    public int value__;
    public static VsProjReferencePropId DISPID_Reference_DTE;
    public static VsProjReferencePropId DISPID_Reference_Collection;
    public static VsProjReferencePropId DISPID_Reference_ContainingProject;
    public static VsProjReferencePropId DISPID_Reference_Remove;
    public static VsProjReferencePropId DISPID_Reference_Name;
    public static VsProjReferencePropId DISPID_Reference_Type;
    public static VsProjReferencePropId DISPID_Reference_Identity;
    public static VsProjReferencePropId DISPID_Reference_Path;
    public static VsProjReferencePropId DISPID_Reference_Description;
    public static VsProjReferencePropId DISPID_Reference_Culture;
    public static VsProjReferencePropId DISPID_Reference_MajorVersion;
    public static VsProjReferencePropId DISPID_Reference_MinorVersion;
    public static VsProjReferencePropId DISPID_Reference_RevisionNumber;
    public static VsProjReferencePropId DISPID_Reference_BuildNumber;
    public static VsProjReferencePropId DISPID_Reference_StrongName;
    public static VsProjReferencePropId DISPID_Reference_SourceProject;
    public static VsProjReferencePropId DISPID_Reference_CopyLocal;
    public static VsProjReferencePropId DISPID_Reference_Extender;
    public static VsProjReferencePropId DISPID_Reference_ExtenderNames;
    public static VsProjReferencePropId DISPID_Reference_ExtenderCATID;
    public static VsProjReferencePropId DISPID_Reference_PublicKeyToken;
    public static VsProjReferencePropId DISPID_Reference_Version;
}
public enum VSLangProj80.VsProjReferencePropId2 : Enum {
    public int value__;
    public static VsProjReferencePropId2 DISPID_Reference_RuntimeVersion;
}
public enum VSLangProj80.VsProjReferencePropId80 : Enum {
    public int value__;
    public static VsProjReferencePropId80 DISPID_Reference_SpecificVersion;
    public static VsProjReferencePropId80 DISPID_Reference_SubType;
    public static VsProjReferencePropId80 DISPID_Reference_Isolated;
    public static VsProjReferencePropId80 DISPID_Reference_Aliases;
    public static VsProjReferencePropId80 DISPID_Reference_RefType;
    public static VsProjReferencePropId80 DISPID_Reference_AutoReferenced;
    public static VsProjReferencePropId80 DISPID_Reference_Resolved;
}
[GuidAttribute("DD47C0D5-5095-4A44-AC96-105B2F194F11")]
public interface VslangProj90.CSharpProjectConfigurationProperties4 {
}
[GuidAttribute("9C52F596-60FB-4144-BE49-ADCA8F044790")]
public interface VslangProj90.CSharpProjectProperties4 {
}
[GuidAttribute("28F059BE-AB9F-43CD-930A-50E30B0997EF")]
public interface VslangProj90.CSharpProjectProperties5 {
}
[GuidAttribute("39D4F2AE-776E-4948-BDA3-8DEE4C5D4ABD")]
public enum VslangProj90.pkgOptionInfer : Enum {
    public int value__;
    public static pkgOptionInfer pkgOptionInferOff;
    public static pkgOptionInfer pkgOptionInferOn;
}
[GuidAttribute("179C6298-97C7-4249-B3C3-4986C6924991")]
public abstract class VslangProj90.prjApplicationManifestValues : object {
    public static string prjApplicationManifest_Default;
    public static string prjApplicationManifest_NoManifest;
}
[GuidAttribute("E629A10F-3E9C-4F54-A281-FAB74B25AD7C")]
public enum VslangProj90.prjOptionInfer : Enum {
    public int value__;
    public static prjOptionInfer prjOptionInferOff;
    public static prjOptionInfer prjOptionInferOn;
}
[GuidAttribute("471F93FA-0D7A-44FE-AC48-190CBB8B84C7")]
public interface VslangProj90.VBPackageSettings2 {
}
[GuidAttribute("189A5EB4-4B8D-4083-9400-77CF9633783A")]
public interface VslangProj90.VBProjectConfigurationProperties4 {
}
[GuidAttribute("C530B098-ACC9-434E-9671-124EAA73FA00")]
public interface VslangProj90.VBProjectProperties4 {
}
[GuidAttribute("A1FD5A70-1114-440F-A2CD-E982413DF5C9")]
public interface VslangProj90.VBProjectProperties5 {
}
public enum VslangProj90.VBProjPropId90 : Enum {
    public int value__;
    public static VBProjPropId90 VBPROJPROPID_OptionInfer;
    public static VBProjPropId90 VBPROJPROPID_CodeAnalysisIgnoreGeneratedCode;
    public static VBProjPropId90 VBPROJPROPID_CodeAnalysisOverrideRuleVisibilities;
    public static VBProjPropId90 VBPROJPROPID_CodeAnalysisCulture;
    public static VBProjPropId90 VBPROJPROPID_CodeAnalysisDictionaries;
}
public enum VslangProj90.VsProjPropId90 : Enum {
    public int value__;
    public static VsProjPropId90 VBPROJPROPID_TargetFramework;
    public static VsProjPropId90 VBPROJPROPID_ApplicationManifest;
    public static VsProjPropId90 VBPROJPROPID_TargetFrameworkSubset;
}
