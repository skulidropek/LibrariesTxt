[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
[ObsoleteAttribute("This attribute is deprecated in favor of System.Diagnostics.CodeAnalysis.ExperimentalAttribute. This attribute may be removed from this assembly at any time.", "True")]
[EditorBrowsableAttribute("1")]
[AttributeUsageAttribute("32767")]
public class Microsoft.VisualStudio.Extensibility.Contracts.PreviewAttribute : Attribute {
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.VisualStudio.RpcContracts.Build.BuildableItem : object {
    [CompilerGeneratedAttribute]
private string <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DisplayName>k__BackingField;
    [CompilerGeneratedAttribute]
private BuildableKind <BuildableKind>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsStartupItem>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <SupportsLaunch>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ActiveLaunchProfileId>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyDictionary`2<BuildAction, BuildAvailabilityProperty> <BuildActionAvailability>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<LaunchProfile> <LaunchProfiles>k__BackingField;
    public string Id { get; }
    public string DisplayName { get; }
    public BuildableKind BuildableKind { get; }
    public bool IsStartupItem { get; }
    public bool SupportsLaunch { get; }
    public string ActiveLaunchProfileId { get; }
    public IReadOnlyDictionary`2<BuildAction, BuildAvailabilityProperty> BuildActionAvailability { get; }
    public IReadOnlyList`1<LaunchProfile> LaunchProfiles { get; }
    public BuildableItem(string id, string displayName, BuildableKind buildableKind, bool isStartupItem, bool supportsLaunch, string activeLaunchProfileId, IReadOnlyDictionary`2<BuildAction, BuildAvailabilityProperty> buildActionAvailability, IReadOnlyList`1<LaunchProfile> launchProfiles);
    [CompilerGeneratedAttribute]
public string get_Id();
    [CompilerGeneratedAttribute]
public string get_DisplayName();
    [CompilerGeneratedAttribute]
public BuildableKind get_BuildableKind();
    [CompilerGeneratedAttribute]
public bool get_IsStartupItem();
    [CompilerGeneratedAttribute]
public bool get_SupportsLaunch();
    [CompilerGeneratedAttribute]
public string get_ActiveLaunchProfileId();
    [CompilerGeneratedAttribute]
public IReadOnlyDictionary`2<BuildAction, BuildAvailabilityProperty> get_BuildActionAvailability();
    [CompilerGeneratedAttribute]
public IReadOnlyList`1<LaunchProfile> get_LaunchProfiles();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.VisualStudio.RpcContracts.Build.BuildableItemsChangedEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<string> <RemovedBuildableItemIds>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<BuildableItem> <UpdatedBuildableItems>k__BackingField;
    public IReadOnlyList`1<string> RemovedBuildableItemIds { get; }
    public IReadOnlyList`1<BuildableItem> UpdatedBuildableItems { get; }
    public BuildableItemsChangedEventArgs(IReadOnlyList`1<string> removedBuildableItemIds, IReadOnlyList`1<BuildableItem> updatedBuildableItems);
    [CompilerGeneratedAttribute]
public IReadOnlyList`1<string> get_RemovedBuildableItemIds();
    [CompilerGeneratedAttribute]
public IReadOnlyList`1<BuildableItem> get_UpdatedBuildableItems();
}
public enum Microsoft.VisualStudio.RpcContracts.Build.BuildableKind : Enum {
    public int value__;
    public static BuildableKind SolutionProject;
    public static BuildableKind FolderTarget;
}
public enum Microsoft.VisualStudio.RpcContracts.Build.BuildAction : Enum {
    public int value__;
    public static BuildAction Build;
    public static BuildAction Rebuild;
    public static BuildAction Clean;
}
public enum Microsoft.VisualStudio.RpcContracts.Build.BuildAvailabilityProperty : Enum {
    public int value__;
    public static BuildAvailabilityProperty Available;
    public static BuildAvailabilityProperty NotAvailable;
    public static BuildAvailabilityProperty NotSupported;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.VisualStudio.RpcContracts.Build.BuildEndedEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
private BuildAction <BuildAction>k__BackingField;
    [CompilerGeneratedAttribute]
private BuildResult <BuildResult>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<BuildableItem> <RequestedItems>k__BackingField;
    public BuildAction BuildAction { get; }
    public BuildResult BuildResult { get; }
    public IReadOnlyList`1<BuildableItem> RequestedItems { get; }
    public BuildEndedEventArgs(BuildAction buildAction, BuildResult buildResult, IReadOnlyList`1<BuildableItem> requestedItems);
    [CompilerGeneratedAttribute]
public BuildAction get_BuildAction();
    [CompilerGeneratedAttribute]
public BuildResult get_BuildResult();
    [CompilerGeneratedAttribute]
public IReadOnlyList`1<BuildableItem> get_RequestedItems();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.VisualStudio.RpcContracts.Build.BuildOperationResult : object {
    [CompilerGeneratedAttribute]
private Guid <OperationId>k__BackingField;
    [CompilerGeneratedAttribute]
private BuildResult <BuildResult>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyDictionary`2<string, string> <BuildStatistics>k__BackingField;
    public Guid OperationId { get; }
    public BuildResult BuildResult { get; }
    public IReadOnlyDictionary`2<string, string> BuildStatistics { get; }
    public BuildOperationResult(Guid operationId, BuildResult buildResult, IReadOnlyDictionary`2<string, string> buildStatistics);
    [CompilerGeneratedAttribute]
public Guid get_OperationId();
    [CompilerGeneratedAttribute]
public BuildResult get_BuildResult();
    [CompilerGeneratedAttribute]
public IReadOnlyDictionary`2<string, string> get_BuildStatistics();
}
public class Microsoft.VisualStudio.RpcContracts.Build.BuildProgressChangedEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
private int <Progress>k__BackingField;
    public int Progress { get; }
    public BuildProgressChangedEventArgs(int progress);
    [CompilerGeneratedAttribute]
public int get_Progress();
}
public enum Microsoft.VisualStudio.RpcContracts.Build.BuildResult : Enum {
    public int value__;
    public static BuildResult Succeeded;
    public static BuildResult Failed;
    public static BuildResult Canceled;
    public static BuildResult NotAvailable;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.VisualStudio.RpcContracts.Build.BuildStartedEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
private BuildAction <BuildAction>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<BuildableItem> <RequestedItems>k__BackingField;
    public BuildAction BuildAction { get; }
    public IReadOnlyList`1<BuildableItem> RequestedItems { get; }
    public BuildStartedEventArgs(BuildAction buildAction, IReadOnlyList`1<BuildableItem> requestedItems);
    [CompilerGeneratedAttribute]
public BuildAction get_BuildAction();
    [CompilerGeneratedAttribute]
public IReadOnlyList`1<BuildableItem> get_RequestedItems();
}
[NullableContextAttribute("1")]
public interface Microsoft.VisualStudio.RpcContracts.Build.IBuildService {
    [CompilerGeneratedAttribute]
public abstract virtual void add_BuildStarted(EventHandler`1<BuildStartedEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_BuildStarted(EventHandler`1<BuildStartedEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_BuildEnded(EventHandler`1<BuildEndedEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_BuildEnded(EventHandler`1<BuildEndedEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_BuildableItemsChanged(EventHandler`1<BuildableItemsChangedEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_BuildableItemsChanged(EventHandler`1<BuildableItemsChangedEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_BuildProgressChanged(EventHandler`1<BuildProgressChangedEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_BuildProgressChanged(EventHandler`1<BuildProgressChangedEventArgs> value);
    public abstract virtual Task RequestBuildEventsAsync(CancellationToken cancellationToken);
    public abstract virtual Task RequestBuildProgressChangedEventsAsync(CancellationToken cancellationToken);
    public abstract virtual ValueTask`1<BuildResult> BuildAsync(BuildAction buildAction, IReadOnlyList`1<string> buildableIds, IProgress`1<int> progress, CancellationToken cancellationToken);
    public abstract virtual ValueTask`1<BuildResult> LaunchAsync(string buildableId, string profileId, string debugOption, IProgress`1<int> buildProgress, CancellationToken cancellationToken);
    public abstract virtual Task`1<BuildOperationResult> StartBuildOperationAsync(BuildAction buildAction, Guid operationId, IReadOnlyList`1<string> buildableIds, IProgress`1<int> progress, CancellationToken cancellationToken);
    public abstract virtual Task`1<BuildOperationResult> StartLaunchOperationAsync(Guid operationId, string buildableId, string profileId, string debugOption, IProgress`1<int> buildProgress, CancellationToken cancellationToken);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.VisualStudio.RpcContracts.Build.LaunchProfile : object {
    [CompilerGeneratedAttribute]
private string <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DisplayName>k__BackingField;
    public string Id { get; }
    public string DisplayName { get; }
    public LaunchProfile(string id, string displayName);
    [CompilerGeneratedAttribute]
public string get_Id();
    [CompilerGeneratedAttribute]
public string get_DisplayName();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public static class Microsoft.VisualStudio.RpcContracts.Build.WellKnownBuildableItemIds : object {
    public static string Solution;
    public static string EntireFolder;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[IsReadOnlyAttribute]
[DataContractAttribute]
public class Microsoft.VisualStudio.RpcContracts.Caching.CacheContainerKey : ValueType {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private static ImmutableSortedDictionary`2<string, string> EmptyDimensions;
    [CompilerGeneratedAttribute]
private string <Component>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private ImmutableSortedDictionary`2<string, string> <Dimensions>k__BackingField;
    [DataMemberAttribute]
public string Component { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[DataMemberAttribute]
public ImmutableSortedDictionary`2<string, string> Dimensions { get; }
    public CacheContainerKey(string component, IReadOnlyDictionary`2<string, string> dimensions);
    private static CacheContainerKey();
    [CompilerGeneratedAttribute]
public string get_Component();
    [CompilerGeneratedAttribute]
public ImmutableSortedDictionary`2<string, string> get_Dimensions();
    public static bool op_Equality(CacheContainerKey left, CacheContainerKey right);
    public static bool op_Inequality(CacheContainerKey left, CacheContainerKey right);
    public sealed virtual bool Equals(CacheContainerKey other);
    [NullableContextAttribute("2")]
public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class Microsoft.VisualStudio.RpcContracts.Caching.CacheException : Exception {
    public CacheException(string message);
    public CacheException(string message, Exception inner);
    [NullableContextAttribute("1")]
protected CacheException(SerializationInfo info, StreamingContext context);
}
[IsReadOnlyAttribute]
[DataContractAttribute]
public class Microsoft.VisualStudio.RpcContracts.Caching.CacheItemKey : ValueType {
    [CompilerGeneratedAttribute]
private CacheContainerKey <ContainerKey>k__BackingField;
    [NullableAttribute("1")]
[CompilerGeneratedAttribute]
private string <ItemName>k__BackingField;
    [CompilerGeneratedAttribute]
private ReadOnlyMemory`1<byte> <Version>k__BackingField;
    [DataMemberAttribute]
public CacheContainerKey ContainerKey { get; }
    [NullableAttribute("1")]
[DataMemberAttribute]
public string ItemName { get; }
    [DataMemberAttribute]
public ReadOnlyMemory`1<byte> Version { get; public set; }
    [NullableContextAttribute("1")]
public CacheItemKey(CacheContainerKey containerKey, string itemName);
    public CacheItemKey(CacheItemKey copyFrom);
    [CompilerGeneratedAttribute]
public CacheContainerKey get_ContainerKey();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public string get_ItemName();
    [CompilerGeneratedAttribute]
public ReadOnlyMemory`1<byte> get_Version();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_Version(ReadOnlyMemory`1<byte> value);
    public static bool op_Equality(CacheItemKey left, CacheItemKey right);
    public static bool op_Inequality(CacheItemKey left, CacheItemKey right);
    public CacheItemKey WithVersion(ReadOnlyMemory`1<byte> version);
    [NullableContextAttribute("2")]
public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public sealed virtual bool Equals(CacheItemKey other);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class Microsoft.VisualStudio.RpcContracts.Caching.CacheServiceExtensions : object {
    [AsyncStateMachineAttribute("Microsoft.VisualStudio.RpcContracts.Caching.CacheServiceExtensions/<TryGetItemAsync>d__0")]
[ExtensionAttribute]
public static Task`1<Stream> TryGetItemAsync(ICacheService cacheService, CacheItemKey key, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.VisualStudio.RpcContracts.Caching.CacheServiceExtensions/<TryGetItemAsync>d__1")]
[ExtensionAttribute]
public static Task`1<Stream> TryGetItemAsync(ICacheService cacheService, CacheItemKey key, bool shareable, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task SetItemAsync(ICacheService cacheService, CacheItemKey key, Stream content, bool shareable, CancellationToken cancellationToken);
}
[NullableContextAttribute("1")]
public interface Microsoft.VisualStudio.RpcContracts.Caching.ICacheService {
    public abstract virtual ValueTask`1<string> GetRelativePathBaseAsync(CancellationToken cancellationToken);
    public abstract virtual Task`1<bool> CheckExistsAsync(CacheItemKey key, CancellationToken cancellationToken);
    public abstract virtual Task`1<bool> CheckExistsAsync(CacheItemKey key, bool shareable, CancellationToken cancellationToken);
    public abstract virtual Task`1<bool> TryGetItemAsync(CacheItemKey key, PipeWriter writer, CancellationToken cancellationToken);
    public abstract virtual Task`1<bool> TryGetItemAsync(CacheItemKey key, PipeWriter writer, bool shareable, CancellationToken cancellationToken);
    public abstract virtual Task SetItemAsync(CacheItemKey key, PipeReader reader, bool shareable, CancellationToken cancellationToken);
    public abstract virtual Task DownloadContainerAsync(CacheContainerKey containerKey, IProgress`1<ProgressData> progress, CancellationToken cancellationToken);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DataContractAttribute]
public class Microsoft.VisualStudio.RpcContracts.Commands.AnchoredDynamicCommandMetadata : CommandMetadata {
    [CompilerGeneratedAttribute]
private string <DynamicCommandAnchorIdentifier>k__BackingField;
    [DataMemberAttribute]
public string DynamicCommandAnchorIdentifier { get; }
    public AnchoredDynamicCommandMetadata(string id, string displayName, string tooltipText, Nullable`1<CommandFlags> flags, string iconName, UInt32 relativeSortOrder, string dynamicCommandAnchorIdentifier);
    public AnchoredDynamicCommandMetadata(IReadOnlyDictionary`2<string, string> properties);
    [CompilerGeneratedAttribute]
public string get_DynamicCommandAnchorIdentifier();
}
[FlagsAttribute]
public enum Microsoft.VisualStudio.RpcContracts.Commands.CommandFlags : Enum {
    public int value__;
    public static CommandFlags None;
    public static CommandFlags CanSelect;
    public static CommandFlags CanToggle;
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
[DataContractAttribute]
public class Microsoft.VisualStudio.RpcContracts.Commands.CommandMetadata : object {
    [NullableAttribute("1")]
[CompilerGeneratedAttribute]
private string <Id>k__BackingField;
    [NullableAttribute("1")]
[CompilerGeneratedAttribute]
private string <DisplayName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TooltipText>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<CommandFlags> <Flags>k__BackingField;
    [CompilerGeneratedAttribute]
private string <IconName>k__BackingField;
    [CompilerGeneratedAttribute]
private UInt32 <RelativeSortOrder>k__BackingField;
    [NullableAttribute("1")]
[DataMemberAttribute]
public string Id { get; }
    [NullableAttribute("1")]
[DataMemberAttribute]
public string DisplayName { get; }
    [DataMemberAttribute]
public string TooltipText { get; public set; }
    [DataMemberAttribute]
public Nullable`1<CommandFlags> Flags { get; public set; }
    [DataMemberAttribute]
public string IconName { get; public set; }
    [DataMemberAttribute]
public UInt32 RelativeSortOrder { get; public set; }
    [NullableContextAttribute("1")]
public CommandMetadata(string id, string displayName, string tooltipText, Nullable`1<CommandFlags> flags, string iconName, UInt32 relativeSortOrder);
    [NullableContextAttribute("1")]
public CommandMetadata(string id, string displayName);
    public CommandMetadata(IReadOnlyDictionary`2<string, string> properties);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public string get_Id();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public string get_DisplayName();
    [CompilerGeneratedAttribute]
public string get_TooltipText();
    [CompilerGeneratedAttribute]
public void set_TooltipText(string value);
    [CompilerGeneratedAttribute]
public Nullable`1<CommandFlags> get_Flags();
    [CompilerGeneratedAttribute]
public void set_Flags(Nullable`1<CommandFlags> value);
    [CompilerGeneratedAttribute]
public string get_IconName();
    [CompilerGeneratedAttribute]
public void set_IconName(string value);
    [CompilerGeneratedAttribute]
public UInt32 get_RelativeSortOrder();
    [CompilerGeneratedAttribute]
public void set_RelativeSortOrder(UInt32 value);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
[FlagsAttribute]
public enum Microsoft.VisualStudio.RpcContracts.Commands.CommandPatterns : Enum {
    public int value__;
    public static CommandPatterns None;
    public static CommandPatterns Executable;
    public static CommandPatterns Toggle;
    public static CommandPatterns Dynamic;
}
public enum Microsoft.VisualStudio.RpcContracts.Commands.CommandProperty : Enum {
    public ushort value__;
    public static CommandProperty Unset;
    public static CommandProperty Pattern;
    public static CommandProperty IsSupported;
    public static CommandProperty IsEnabled;
    public static CommandProperty IsChecked;
    public static CommandProperty DisplayName;
    public static CommandProperty TooltipText;
    public static CommandProperty Flags;
    public static CommandProperty AddAnchoredDynamicCommand;
    public static CommandProperty RemoveDynamicCommand;
}
public enum Microsoft.VisualStudio.RpcContracts.Commands.CommandType : Enum {
    public UInt32 value__;
    public static CommandType Toolbar;
}
[NullableContextAttribute("1")]
public interface Microsoft.VisualStudio.RpcContracts.Commands.ICommandSetProvider {
    public abstract virtual Task ActivateCommandSetAsync(Update initialCommandStates, CancellationToken cancellationToken);
    public abstract virtual Task DeactivateCommandSetAsync(CancellationToken cancellationToken);
    public abstract virtual Task ExecuteCommandAsync(string commandName, IReadOnlyDictionary`2<string, object> context, CancellationToken cancellationToken);
}
[NullableContextAttribute("1")]
public interface Microsoft.VisualStudio.RpcContracts.Commands.ICommandsService {
    public abstract virtual Task`1<IDisposable> SubscribeToRemoteCommandUpdateAsync(CommandType type, string id, IObserver`1<VsctCommandId> observer, CancellationToken cancellationToken);
}
[NullableContextAttribute("1")]
public interface Microsoft.VisualStudio.RpcContracts.Commands.IUpdateReceiver {
    public abstract virtual Task UpdateAsync(Update update, CancellationToken cancellationToken);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DataContractAttribute]
[DebuggerDisplayAttribute("{Property}:{Value} ({CommandName})")]
public class Microsoft.VisualStudio.RpcContracts.Commands.PropertyUpdate : ValueType {
    [CompilerGeneratedAttribute]
private CommandProperty <Property>k__BackingField;
    [CompilerGeneratedAttribute]
private string <CommandName>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private object <Value>k__BackingField;
    [DataMemberAttribute]
public CommandProperty Property { get; }
    [DataMemberAttribute]
public string CommandName { get; }
    [NullableAttribute("2")]
[DataMemberAttribute]
internal object Value { get; }
    internal PropertyUpdate(CommandProperty property, string commandName, object value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public CommandProperty get_Property();
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public string get_CommandName();
    [IsReadOnlyAttribute]
[NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
internal object get_Value();
    public static bool op_Equality(PropertyUpdate left, PropertyUpdate right);
    public static bool op_Inequality(PropertyUpdate left, PropertyUpdate right);
    public static PropertyUpdate Create(CommandProperty property, string commandName, string value);
    public static PropertyUpdate Create(CommandProperty property, string commandName, Nullable`1<bool> value);
    public static PropertyUpdate Create(CommandProperty property, string commandName, Nullable`1<int> value);
    public static PropertyUpdate Create(CommandProperty property, string commandName, Nullable`1<long> value);
    public static PropertyUpdate Create(CommandProperty property, string commandName, AnchoredDynamicCommandMetadata value);
    [NullableContextAttribute("2")]
public string GetValueAsString();
    public Nullable`1<bool> GetValueAsBool();
    public Nullable`1<int> GetValueAsInt();
    public Nullable`1<long> GetValueAsLong();
    [NullableContextAttribute("2")]
public AnchoredDynamicCommandMetadata GetValueAsAnchoredDynamicCommandMetadata();
    [NullableContextAttribute("2")]
public virtual bool Equals(object o);
    public sealed virtual bool Equals(PropertyUpdate other);
    public virtual int GetHashCode();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DataContractAttribute]
public class Microsoft.VisualStudio.RpcContracts.Commands.Update : object {
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<PropertyUpdate> <Updates>k__BackingField;
    [DataMemberAttribute]
public IReadOnlyList`1<PropertyUpdate> Updates { get; }
    public Update(IReadOnlyList`1<PropertyUpdate> updates);
    [CompilerGeneratedAttribute]
public IReadOnlyList`1<PropertyUpdate> get_Updates();
    [NullableContextAttribute("2")]
public virtual bool Equals(object o);
    [NullableContextAttribute("2")]
public sealed virtual bool Equals(Update other);
    public virtual int GetHashCode();
}
[MessagePackObjectAttribute("False")]
public class Microsoft.VisualStudio.RpcContracts.Commands.VsctCommandId : ValueType {
    [CompilerGeneratedAttribute]
private Guid <Guid>k__BackingField;
    [CompilerGeneratedAttribute]
private UInt32 <Id>k__BackingField;
    public static VsctCommandId Undefined;
    [KeyAttribute("0")]
public Guid Guid { get; public set; }
    [KeyAttribute("1")]
public UInt32 Id { get; public set; }
    public VsctCommandId(Guid Guid, UInt32 Id);
    private static VsctCommandId();
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public Guid get_Guid();
    [CompilerGeneratedAttribute]
public void set_Guid(Guid value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public UInt32 get_Id();
    [CompilerGeneratedAttribute]
public void set_Id(UInt32 value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public virtual string ToString();
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
private bool PrintMembers(StringBuilder builder);
    [CompilerGeneratedAttribute]
public static bool op_Inequality(VsctCommandId left, VsctCommandId right);
    [CompilerGeneratedAttribute]
public static bool op_Equality(VsctCommandId left, VsctCommandId right);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public virtual int GetHashCode();
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public virtual bool Equals(object obj);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public sealed virtual bool Equals(VsctCommandId other);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public void Deconstruct(Guid& Guid, UInt32& Id);
}
[NullableContextAttribute("1")]
public interface Microsoft.VisualStudio.RpcContracts.ConnectedWorkspace.IConnectedWorkspaceService {
    public abstract virtual Task`1<IReadOnlyCollection`1<string>> GetFilesAsync(string relativePath, string filter, CancellationToken cancellationToken);
    public abstract virtual Task`1<IReadOnlyCollection`1<string>> GetFoldersAsync(string relativePath, CancellationToken cancellationToken);
    public abstract virtual Task OpenFolderAsync(string relativePath, CancellationToken cancellationToken);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DataContractAttribute]
public class Microsoft.VisualStudio.RpcContracts.ContextRuleMonitor.ContextRuleMetadata : object {
    [CompilerGeneratedAttribute]
private string <Identifier>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Expression>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyDictionary`2<string, string> <Terms>k__BackingField;
    [DataMemberAttribute]
public string Identifier { get; }
    [DataMemberAttribute]
public string Expression { get; }
    [DataMemberAttribute]
public IReadOnlyDictionary`2<string, string> Terms { get; }
    public ContextRuleMetadata(string identifier, string expression, IReadOnlyDictionary`2<string, string> terms);
    [CompilerGeneratedAttribute]
public string get_Identifier();
    [CompilerGeneratedAttribute]
public string get_Expression();
    [CompilerGeneratedAttribute]
public IReadOnlyDictionary`2<string, string> get_Terms();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DataContractAttribute]
public class Microsoft.VisualStudio.RpcContracts.ContextRuleMonitor.ContextRuleStateChangedEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
private string <Identifier>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsActive>k__BackingField;
    [DataMemberAttribute]
public string Identifier { get; }
    [DataMemberAttribute]
public bool IsActive { get; }
    public ContextRuleStateChangedEventArgs(string identifier, bool isActive);
    [CompilerGeneratedAttribute]
public string get_Identifier();
    [CompilerGeneratedAttribute]
public bool get_IsActive();
}
[NullableContextAttribute("1")]
public interface Microsoft.VisualStudio.RpcContracts.ContextRuleMonitor.IContextRuleMonitorService {
    [CompilerGeneratedAttribute]
public abstract virtual void add_ContextRuleStateChanged(EventHandler`1<ContextRuleStateChangedEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_ContextRuleStateChanged(EventHandler`1<ContextRuleStateChangedEventArgs> value);
    public abstract virtual ValueTask RegisterContextRuleAsync(ContextRuleMetadata ruleMetadata, CancellationToken cancellationToken);
}
public interface Microsoft.VisualStudio.RpcContracts.DebuggerVisualizers.IDebuggerVisualizerProvider {
    [NullableContextAttribute("1")]
public abstract virtual Task`1<ValueTuple`2<IRemoteUserControl, IVisualizerTargetClient>> GetVisualizerAsync(IVisualizerTarget visualizerTarget, VisualizerTargetData visualizerTargetData, CancellationToken cancellationToken);
}
[RpcMarshalableAttribute]
public interface Microsoft.VisualStudio.RpcContracts.DebuggerVisualizers.IVisualizerTarget {
    public abstract virtual Task`1<Nullable`1<ReadOnlySequence`1<byte>>> RequestDataAsync(Nullable`1<ReadOnlySequence`1<byte>> data, CancellationToken cancellationToken);
    public abstract virtual Task ReplaceTargetObjectAsync(ReadOnlySequence`1<byte> data, CancellationToken cancellationToken);
}
[RpcMarshalableAttribute]
public interface Microsoft.VisualStudio.RpcContracts.DebuggerVisualizers.IVisualizerTargetClient {
    [NullableContextAttribute("1")]
public abstract virtual Task NotifyStateChangeAsync(VisualizerTargetStateNotification notification, CancellationToken cancellationToken);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DataContractAttribute]
public class Microsoft.VisualStudio.RpcContracts.DebuggerVisualizers.VisualizerTargetData : object {
    [CompilerGeneratedAttribute]
private string <TargetTypeFullName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TargetTypeModuleName>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private Version <TargetTypeModuleVersion>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsTargetReplaceable>k__BackingField;
    [DataMemberAttribute]
public string TargetTypeFullName { get; }
    [DataMemberAttribute]
public string TargetTypeModuleName { get; }
    [NullableAttribute("2")]
[DataMemberAttribute]
public Version TargetTypeModuleVersion { get; }
    [DataMemberAttribute]
public bool IsTargetReplaceable { get; public set; }
    public VisualizerTargetData(string targetTypeFullName, string targetTypeModuleName, Version targetTypeModuleVersion);
    [CompilerGeneratedAttribute]
public string get_TargetTypeFullName();
    [CompilerGeneratedAttribute]
public string get_TargetTypeModuleName();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public Version get_TargetTypeModuleVersion();
    [CompilerGeneratedAttribute]
public bool get_IsTargetReplaceable();
    [CompilerGeneratedAttribute]
public void set_IsTargetReplaceable(bool value);
}
public enum Microsoft.VisualStudio.RpcContracts.DebuggerVisualizers.VisualizerTargetStateNotification : Enum {
    public int value__;
    public static VisualizerTargetStateNotification Available;
    public static VisualizerTargetStateNotification Unavailable;
    public static VisualizerTargetStateNotification ValueUpdated;
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class Microsoft.VisualStudio.RpcContracts.DebuggerVisualizers.VisualizerTargetUnavailableException : Exception {
    public VisualizerTargetUnavailableException(string message);
    public VisualizerTargetUnavailableException(string message, Exception inner);
    [NullableContextAttribute("1")]
protected VisualizerTargetUnavailableException(SerializationInfo info, StreamingContext context);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DataContractAttribute]
public class Microsoft.VisualStudio.RpcContracts.DiagnosticManagement.BuildOnlyDiagnosticCodesAddedEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
private int <DiagnosticManagerId>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<string> <Codes>k__BackingField;
    [DataMemberAttribute]
public int DiagnosticManagerId { get; public set; }
    [DataMemberAttribute]
public IReadOnlyList`1<string> Codes { get; public set; }
    [CompilerGeneratedAttribute]
public int get_DiagnosticManagerId();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_DiagnosticManagerId(int value);
    [CompilerGeneratedAttribute]
public IReadOnlyList`1<string> get_Codes();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_Codes(IReadOnlyList`1<string> value);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
[DataContractAttribute]
public class Microsoft.VisualStudio.RpcContracts.DiagnosticManagement.Diagnostic : object {
    [NullableAttribute("1")]
[CompilerGeneratedAttribute]
private string <Message>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Code>k__BackingField;
    [CompilerGeneratedAttribute]
private DiagnosticSeverity <Severity>k__BackingField;
    [CompilerGeneratedAttribute]
private Range <Range>k__BackingField;
    [CompilerGeneratedAttribute]
private DiagnosticTags <Tags>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private IReadOnlyList`1<DiagnosticRelatedInformation> <RelatedInformation>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ExpandedMessage>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Source>k__BackingField;
    [CompilerGeneratedAttribute]
private string <HelpLink>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <DiagnosticRank>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DiagnosticType>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<ProjectIdentifier> <Projects>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Identifier>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ToolTip>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <OutputId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <CustomEditorDiagnosticRepresentation>k__BackingField;
    [NullableAttribute("1")]
[DataMemberAttribute]
public string Message { get; }
    [DataMemberAttribute]
public string Code { get; }
    [DataMemberAttribute]
public DiagnosticSeverity Severity { get; }
    [DataMemberAttribute]
public Range Range { get; }
    [DataMemberAttribute]
public DiagnosticTags Tags { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[DataMemberAttribute]
public IReadOnlyList`1<DiagnosticRelatedInformation> RelatedInformation { get; }
    [DataMemberAttribute]
public string ExpandedMessage { get; }
    [DataMemberAttribute]
public string Source { get; }
    [DataMemberAttribute]
public string HelpLink { get; }
    [DataMemberAttribute]
public Nullable`1<int> DiagnosticRank { get; }
    [DataMemberAttribute]
public string DiagnosticType { get; }
    [DataMemberAttribute]
public IReadOnlyList`1<ProjectIdentifier> Projects { get; }
    [DataMemberAttribute]
public string Identifier { get; }
    [DataMemberAttribute]
public string ToolTip { get; }
    [DataMemberAttribute]
public Nullable`1<int> OutputId { get; }
    [DataMemberAttribute]
public string CustomEditorDiagnosticRepresentation { get; }
    public Diagnostic(string message, string code, DiagnosticSeverity severity, Range range, DiagnosticTags tags, IReadOnlyList`1<DiagnosticRelatedInformation> relatedInformation, string expandedMessage, string source, string helpLink, Nullable`1<int> diagnosticRank, string diagnosticType, IReadOnlyList`1<ProjectIdentifier> projects, string identifier, string toolTip, Nullable`1<int> outputId);
    public Diagnostic(string message, string code, DiagnosticSeverity severity, Range range, string customEditorDiagnosticRepresentation, DiagnosticTags tags, IReadOnlyList`1<DiagnosticRelatedInformation> relatedInformation, string expandedMessage, string source, string helpLink, Nullable`1<int> diagnosticRank, string diagnosticType, IReadOnlyList`1<ProjectIdentifier> projects, string identifier, string toolTip, Nullable`1<int> outputId);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public string get_Message();
    [CompilerGeneratedAttribute]
public string get_Code();
    [CompilerGeneratedAttribute]
public DiagnosticSeverity get_Severity();
    [CompilerGeneratedAttribute]
public Range get_Range();
    [CompilerGeneratedAttribute]
public DiagnosticTags get_Tags();
    [CompilerGeneratedAttribute]
public IReadOnlyList`1<DiagnosticRelatedInformation> get_RelatedInformation();
    [CompilerGeneratedAttribute]
public string get_ExpandedMessage();
    [CompilerGeneratedAttribute]
public string get_Source();
    [CompilerGeneratedAttribute]
public string get_HelpLink();
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_DiagnosticRank();
    [CompilerGeneratedAttribute]
public string get_DiagnosticType();
    [CompilerGeneratedAttribute]
public IReadOnlyList`1<ProjectIdentifier> get_Projects();
    [CompilerGeneratedAttribute]
public string get_Identifier();
    [CompilerGeneratedAttribute]
public string get_ToolTip();
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_OutputId();
    [CompilerGeneratedAttribute]
public string get_CustomEditorDiagnosticRepresentation();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DataContractAttribute]
public class Microsoft.VisualStudio.RpcContracts.DiagnosticManagement.DiagnosticCollection : object {
    [CompilerGeneratedAttribute]
private Uri <DocumentMoniker>k__BackingField;
    [CompilerGeneratedAttribute]
private int <DocumentVersionNumber>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<Diagnostic> <Diagnostics>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <Identifier>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <Supersedes>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<Guid> <OutputKey>k__BackingField;
    [DataMemberAttribute]
public Uri DocumentMoniker { get; }
    [DataMemberAttribute]
public int DocumentVersionNumber { get; }
    [DataMemberAttribute]
public IReadOnlyList`1<Diagnostic> Diagnostics { get; }
    [DataMemberAttribute]
public Nullable`1<int> Identifier { get; }
    [DataMemberAttribute]
public Nullable`1<int> Supersedes { get; }
    [DataMemberAttribute]
public Nullable`1<Guid> OutputKey { get; }
    public DiagnosticCollection(Uri documentMoniker, int documentVersionNumber, IReadOnlyList`1<Diagnostic> diagnostics, Nullable`1<int> identifier, Nullable`1<int> supersedes, Nullable`1<Guid> outputKey);
    [CompilerGeneratedAttribute]
public Uri get_DocumentMoniker();
    [CompilerGeneratedAttribute]
public int get_DocumentVersionNumber();
    [CompilerGeneratedAttribute]
public IReadOnlyList`1<Diagnostic> get_Diagnostics();
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_Identifier();
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_Supersedes();
    [CompilerGeneratedAttribute]
public Nullable`1<Guid> get_OutputKey();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DataContractAttribute]
public class Microsoft.VisualStudio.RpcContracts.DiagnosticManagement.DiagnosticManagerRemovedEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
private int <ServerState>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<int> <DiagnosticManagerIds>k__BackingField;
    [DataMemberAttribute]
public int ServerState { get; }
    [DataMemberAttribute]
public IReadOnlyList`1<int> DiagnosticManagerIds { get; }
    public DiagnosticManagerRemovedEventArgs(int serverState, IReadOnlyList`1<int> diagnosticManagerIds);
    [CompilerGeneratedAttribute]
public int get_ServerState();
    [CompilerGeneratedAttribute]
public IReadOnlyList`1<int> get_DiagnosticManagerIds();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DataContractAttribute]
public class Microsoft.VisualStudio.RpcContracts.DiagnosticManagement.DiagnosticRelatedInformation : object {
    [CompilerGeneratedAttribute]
private string <DocumentMoniker>k__BackingField;
    [CompilerGeneratedAttribute]
private int <DocumentVersionNumber>k__BackingField;
    [CompilerGeneratedAttribute]
private Range <Range>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Message>k__BackingField;
    [DataMemberAttribute]
public string DocumentMoniker { get; }
    [DataMemberAttribute]
public int DocumentVersionNumber { get; }
    [DataMemberAttribute]
public Range Range { get; }
    [DataMemberAttribute]
public string Message { get; }
    public DiagnosticRelatedInformation(string documentMoniker, int documentVersionNumber, Range range, string message);
    [CompilerGeneratedAttribute]
public string get_DocumentMoniker();
    [CompilerGeneratedAttribute]
public int get_DocumentVersionNumber();
    [CompilerGeneratedAttribute]
public Range get_Range();
    [CompilerGeneratedAttribute]
public string get_Message();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DataContractAttribute]
public class Microsoft.VisualStudio.RpcContracts.DiagnosticManagement.DiagnosticReport : object {
    [CompilerGeneratedAttribute]
private int <ManagerId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <GeneratorId>k__BackingField;
    [CompilerGeneratedAttribute]
private int <ServerState>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<DiagnosticCollection> <DiagnosticCollections>k__BackingField;
    [DataMemberAttribute]
public int ManagerId { get; }
    [DataMemberAttribute]
public string GeneratorId { get; }
    [DataMemberAttribute]
public int ServerState { get; }
    [DataMemberAttribute]
public IReadOnlyList`1<DiagnosticCollection> DiagnosticCollections { get; }
    public DiagnosticReport(int managerId, string generatorId, int serverState, IReadOnlyList`1<DiagnosticCollection> diagnosticCollections);
    [CompilerGeneratedAttribute]
public int get_ManagerId();
    [CompilerGeneratedAttribute]
public string get_GeneratorId();
    [CompilerGeneratedAttribute]
public int get_ServerState();
    [CompilerGeneratedAttribute]
public IReadOnlyList`1<DiagnosticCollection> get_DiagnosticCollections();
}
public enum Microsoft.VisualStudio.RpcContracts.DiagnosticManagement.DiagnosticSeverity : Enum {
    public int value__;
    public static DiagnosticSeverity Error;
    public static DiagnosticSeverity Warning;
    public static DiagnosticSeverity Information;
    public static DiagnosticSeverity Hint;
}
[FlagsAttribute]
public enum Microsoft.VisualStudio.RpcContracts.DiagnosticManagement.DiagnosticTags : Enum {
    public int value__;
    public static DiagnosticTags None;
    public static DiagnosticTags Unnecessary;
    public static DiagnosticTags Deprecated;
    public static DiagnosticTags BuildError;
    public static DiagnosticTags PotentialDuplicate;
    public static DiagnosticTags HiddenInErrorList;
    public static DiagnosticTags VisibleInErrorList;
    public static DiagnosticTags HiddenInEditor;
    public static DiagnosticTags SuppressEditorToolTip;
    public static DiagnosticTags TaskItem;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DataContractAttribute]
public class Microsoft.VisualStudio.RpcContracts.DiagnosticManagement.DiagnosticUpdatedEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
private bool <Append>k__BackingField;
    [CompilerGeneratedAttribute]
private DiagnosticReport <DiagnosticsReport>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Remove>k__BackingField;
    [DataMemberAttribute]
public bool Append { get; public set; }
    [DataMemberAttribute]
public DiagnosticReport DiagnosticsReport { get; public set; }
    [DataMemberAttribute]
public bool Remove { get; public set; }
    [CompilerGeneratedAttribute]
public bool get_Append();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_Append(bool value);
    [CompilerGeneratedAttribute]
public DiagnosticReport get_DiagnosticsReport();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_DiagnosticsReport(DiagnosticReport value);
    [CompilerGeneratedAttribute]
public bool get_Remove();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_Remove(bool value);
}
[NullableContextAttribute("1")]
public interface Microsoft.VisualStudio.RpcContracts.DiagnosticManagement.IDiagnosticManagerService {
    public abstract virtual Task SetDiagnosticsAsync(string generatorId, IReadOnlyList`1<DiagnosticCollection> diagnostics, CancellationToken cancellationToken);
    public abstract virtual Task AppendDiagnosticsAsync(string generatorId, IReadOnlyList`1<DiagnosticCollection> diagnostics, CancellationToken cancellationToken);
    public abstract virtual Task ClearDiagnosticsAsync(string generatorId, CancellationToken cancellationToken);
    public abstract virtual Task ClearAllDiagnosticsAsync(CancellationToken cancellationToken);
    public abstract virtual Task AddBuildOnlyDiagnosticCodesAsync(IReadOnlyList`1<string> diagnosticCodes, CancellationToken cancellationToken);
}
public interface Microsoft.VisualStudio.RpcContracts.DiagnosticManagement.IDiagnosticViewerService {
    [CompilerGeneratedAttribute]
public abstract virtual void add_DiagnosticsUpdated(EventHandler`1<DiagnosticUpdatedEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_DiagnosticsUpdated(EventHandler`1<DiagnosticUpdatedEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_DiagnosticManagerRemoved(EventHandler`1<DiagnosticManagerRemovedEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_DiagnosticManagerRemoved(EventHandler`1<DiagnosticManagerRemovedEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_BuildOnlyDiagnosticCodesAdded(EventHandler`1<BuildOnlyDiagnosticCodesAddedEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_BuildOnlyDiagnosticCodesAdded(EventHandler`1<BuildOnlyDiagnosticCodesAddedEventArgs> value);
    [NullableContextAttribute("1")]
public abstract virtual Task RequestDiagnosticsAsync(IProgress`1<DiagnosticReport> report, CancellationToken cancellationToken);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.VisualStudio.RpcContracts.DiagnosticManagement.NoDocumentAssociatedUri : Uri {
    public static string StringRepresentation;
    public static NoDocumentAssociatedUri Instance;
    private static NoDocumentAssociatedUri();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DataContractAttribute]
public class Microsoft.VisualStudio.RpcContracts.Documents.DocumentEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
private Uri <Moniker>k__BackingField;
    [DataMemberAttribute]
public Uri Moniker { get; }
    public DocumentEventArgs(Uri moniker);
    [CompilerGeneratedAttribute]
public Uri get_Moniker();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DataContractAttribute]
public class Microsoft.VisualStudio.RpcContracts.Documents.DocumentSnapshot : object {
    public static string DocumentVersionUriQueryPartName;
    [CompilerGeneratedAttribute]
private Uri <Moniker>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsDirty>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsReadOnly>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsInitialized>k__BackingField;
    [DataMemberAttribute]
public Uri Moniker { get; }
    [DataMemberAttribute]
public bool IsDirty { get; public set; }
    [DataMemberAttribute]
public bool IsReadOnly { get; public set; }
    [DataMemberAttribute]
public bool IsInitialized { get; public set; }
    public DocumentSnapshot(Uri moniker);
    public DocumentSnapshot(Uri moniker, bool isDirty, bool isReadOnly);
    [JsonConstructorAttribute]
public DocumentSnapshot(Uri moniker, bool isDirty, bool isReadOnly, bool isInitialized);
    [CompilerGeneratedAttribute]
public Uri get_Moniker();
    [CompilerGeneratedAttribute]
public bool get_IsDirty();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_IsDirty(bool value);
    [CompilerGeneratedAttribute]
public bool get_IsReadOnly();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_IsReadOnly(bool value);
    [CompilerGeneratedAttribute]
public bool get_IsInitialized();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_IsInitialized(bool value);
}
[NullableContextAttribute("1")]
[RpcMarshalableAttribute]
public interface Microsoft.VisualStudio.RpcContracts.Documents.IDocumentEventsListener {
    public abstract virtual Task OpenedAsync(DocumentEventArgs e, CancellationToken token);
    public abstract virtual Task ClosedAsync(DocumentEventArgs e, CancellationToken token);
    public abstract virtual Task SavingAsync(DocumentEventArgs e, CancellationToken token);
    public abstract virtual Task SavedAsync(DocumentEventArgs e, CancellationToken token);
    public abstract virtual Task RenamedAsync(RenamedDocumentEventArgs e, CancellationToken token);
    public abstract virtual Task ShownAsync(DocumentEventArgs e, CancellationToken token);
    public abstract virtual Task HiddenAsync(DocumentEventArgs e, CancellationToken token);
}
[NullableContextAttribute("1")]
public interface Microsoft.VisualStudio.RpcContracts.Documents.IDocumentService {
    public abstract virtual Task`1<IReadOnlyList`1<DocumentSnapshot>> GetOpenDocumentsAsync(CancellationToken token);
    public abstract virtual Task`1<DocumentSnapshot> GetOpenDocumentAsync(Uri moniker, CancellationToken token);
    public abstract virtual Task`1<DocumentSnapshot> OpenDocumentAsync(Uri moniker, CancellationToken token);
    public abstract virtual Task`1<DocumentSnapshot> OpenDocumentAsync(Uri moniker, OpenDocumentOptions options, CancellationToken token);
    public abstract virtual Task SaveAllAsync(CancellationToken token);
    public abstract virtual Task SaveDocumentAsync(Uri moniker, CancellationToken token);
    public abstract virtual Task CloseDocumentAsync(Uri moniker, SaveDocumentOption option, CancellationToken token);
    public abstract virtual Task`1<IDisposable> SubscribeAsync(IDocumentEventsListener listener, string filterRegex, CancellationToken token);
    public abstract virtual Task`1<DocumentSnapshot> InitializeDocumentAsync(DocumentSnapshot documentSnapshot, CancellationToken token);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DataContractAttribute]
public class Microsoft.VisualStudio.RpcContracts.Documents.RenamedDocumentEventArgs : DocumentEventArgs {
    [CompilerGeneratedAttribute]
private Uri <OldMoniker>k__BackingField;
    [DataMemberAttribute]
public Uri OldMoniker { get; }
    public RenamedDocumentEventArgs(Uri moniker, Uri oldMoniker);
    [CompilerGeneratedAttribute]
public Uri get_OldMoniker();
}
public enum Microsoft.VisualStudio.RpcContracts.Documents.SaveDocumentOption : Enum {
    public int value__;
    public static SaveDocumentOption NoSave;
    public static SaveDocumentOption SaveIfDirty;
    public static SaveDocumentOption PromptSave;
}
[NullableContextAttribute("1")]
public interface Microsoft.VisualStudio.RpcContracts.EnvironmentVariables.IEnvironmentVariableService {
    public abstract virtual Task`1<IDisposable> SubscribeAsync(IObserver`1<IReadOnlyDictionary`2<string, string>> observer, CancellationToken cancellationToken);
    public abstract virtual Task UpdateEnvironmentVariablesAsync(IReadOnlyDictionary`2<string, string> updatedVariables, CancellationToken cancellationToken);
    public abstract virtual Task RefreshEnvironmentVariablesAsync(CancellationToken cancellationToken);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public static class Microsoft.VisualStudio.RpcContracts.ErrorCodes : object {
    public static int FileAlreadyExists;
    private static int MinReservedValue;
    private static int MaxReservedValue;
    private static int BaseValue;
    private static string ReservedErrorCodeErrorMessage { get; }
    private static string get_ReservedErrorCodeErrorMessage();
    [NullableContextAttribute("2")]
public static RemoteInvocationException ExceptionFromCode(int errorCode, string message, object errorData, object deserializedErrorData);
    private static bool IsCodeReserved(int errorCode);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DataContractAttribute]
public class Microsoft.VisualStudio.RpcContracts.Extensibility.ExtensionIdentificationToken : object {
    [CompilerGeneratedAttribute]
private string <Identifier>k__BackingField;
    [CompilerGeneratedAttribute]
private string <InstallPath>k__BackingField;
    [DataMemberAttribute]
public string Identifier { get; }
    [DataMemberAttribute]
public string InstallPath { get; }
    public ExtensionIdentificationToken(string identifier, string installPath);
    [CompilerGeneratedAttribute]
public string get_Identifier();
    [CompilerGeneratedAttribute]
public string get_InstallPath();
    [NullableContextAttribute("2")]
public sealed virtual bool Equals(ExtensionIdentificationToken other);
    [NullableContextAttribute("2")]
public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DataContractAttribute]
public class Microsoft.VisualStudio.RpcContracts.Extensibility.ExtensionMetadata : object {
    [CompilerGeneratedAttribute]
private IReadOnlyCollection`1<SectionMetadata> <Added>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyCollection`1<ExtensionIdentificationToken> <Removed>k__BackingField;
    [DataMemberAttribute]
public IReadOnlyCollection`1<SectionMetadata> Added { get; }
    [DataMemberAttribute]
public IReadOnlyCollection`1<ExtensionIdentificationToken> Removed { get; }
    public ExtensionMetadata(IReadOnlyCollection`1<SectionMetadata> added, IReadOnlyCollection`1<ExtensionIdentificationToken> removed);
    [CompilerGeneratedAttribute]
public IReadOnlyCollection`1<SectionMetadata> get_Added();
    [CompilerGeneratedAttribute]
public IReadOnlyCollection`1<ExtensionIdentificationToken> get_Removed();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DataContractAttribute]
public class Microsoft.VisualStudio.RpcContracts.Extensibility.ExtensionMetadataHeader : object {
    [CompilerGeneratedAttribute]
private ExtensionIdentificationToken <ExtensionIdentificationToken>k__BackingField;
    [CompilerGeneratedAttribute]
private JToken <Metadata>k__BackingField;
    [DataMemberAttribute]
public ExtensionIdentificationToken ExtensionIdentificationToken { get; }
    [DataMemberAttribute]
public JToken Metadata { get; }
    public ExtensionMetadataHeader(ExtensionIdentificationToken extensionIdentificationToken, JToken metadata);
    [CompilerGeneratedAttribute]
public ExtensionIdentificationToken get_ExtensionIdentificationToken();
    [CompilerGeneratedAttribute]
public JToken get_Metadata();
    [NullableContextAttribute("2")]
public sealed virtual bool Equals(ExtensionMetadataHeader other);
    [NullableContextAttribute("2")]
public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
[NullableContextAttribute("1")]
public interface Microsoft.VisualStudio.RpcContracts.Extensibility.IExtensionMetadataService {
    public abstract virtual Task`1<IDisposable> SubscribeForMetadataEventsAsync(IEnumerable`1<string> sectionNames, IObserver`1<ExtensionMetadata> observer, CancellationToken cancellationToken);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DataContractAttribute]
public class Microsoft.VisualStudio.RpcContracts.Extensibility.SectionMetadata : object {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyCollection`1<ExtensionMetadataHeader> <Extensions>k__BackingField;
    [DataMemberAttribute]
public string Name { get; }
    [DataMemberAttribute]
public IReadOnlyCollection`1<ExtensionMetadataHeader> Extensions { get; }
    public SectionMetadata(string name, IReadOnlyCollection`1<ExtensionMetadataHeader> extensions);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public IReadOnlyCollection`1<ExtensionMetadataHeader> get_Extensions();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DataContractAttribute]
public class Microsoft.VisualStudio.RpcContracts.FileDialog.DialogFilter : object {
    [CompilerGeneratedAttribute]
private string <DisplayValue>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyCollection`1<string> <Filters>k__BackingField;
    [DataMemberAttribute]
public string DisplayValue { get; }
    [DataMemberAttribute]
public IReadOnlyCollection`1<string> Filters { get; }
    public DialogFilter(string displayValue, String[] filters);
    [JsonConstructorAttribute]
public DialogFilter(string displayValue, IReadOnlyCollection`1<string> filters);
    [CompilerGeneratedAttribute]
public string get_DisplayValue();
    [CompilerGeneratedAttribute]
public IReadOnlyCollection`1<string> get_Filters();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DataContractAttribute]
public class Microsoft.VisualStudio.RpcContracts.FileDialog.DialogFilters : object {
    [CompilerGeneratedAttribute]
private IReadOnlyCollection`1<DialogFilter> <Filters>k__BackingField;
    [CompilerGeneratedAttribute]
private int <DefaultFilterIndex>k__BackingField;
    [DataMemberAttribute]
public IReadOnlyCollection`1<DialogFilter> Filters { get; }
    [DataMemberAttribute]
public int DefaultFilterIndex { get; }
    [JsonConstructorAttribute]
public DialogFilters(IReadOnlyCollection`1<DialogFilter> filters, int defaultFilterIndex);
    [CompilerGeneratedAttribute]
public IReadOnlyCollection`1<DialogFilter> get_Filters();
    [CompilerGeneratedAttribute]
public int get_DefaultFilterIndex();
}
[NullableContextAttribute("1")]
public interface Microsoft.VisualStudio.RpcContracts.FileDialog.IFileDialogService {
    public abstract virtual ValueTask`1<IReadOnlyCollection`1<string>> SelectFilesAsync(string title, string initialDirectory, string initialFileName, DialogFilters filters, CancellationToken cancellationToken);
    public abstract virtual ValueTask`1<string> SelectFileAsync(string title, string initialDirectory, string initialFileName, DialogFilters filters, CancellationToken cancellationToken);
    public abstract virtual ValueTask`1<string> SelectSaveAsFileAsync(string title, string initialDirectory, string initialFileName, DialogFilters filters, CancellationToken cancellationToken);
    public abstract virtual ValueTask`1<string> SelectDirectoryAsync(string title, string initialDirectory, CancellationToken cancellationToken);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DataContractAttribute]
public class Microsoft.VisualStudio.RpcContracts.FileSystem.DirectoryEntryChangedEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
private WatchResult <WatchResult>k__BackingField;
    [CompilerGeneratedAttribute]
private Uri <Uri>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private DirectoryEntryInfo <ChangedEntryInfo>k__BackingField;
    [CompilerGeneratedAttribute]
private DirectoryEntryChangeType <ChangeType>k__BackingField;
    [DataMemberAttribute]
public WatchResult WatchResult { get; }
    [DataMemberAttribute]
public Uri Uri { get; }
    [NullableAttribute("2")]
[DataMemberAttribute]
public DirectoryEntryInfo ChangedEntryInfo { get; }
    [DataMemberAttribute]
public DirectoryEntryChangeType ChangeType { get; }
    public DirectoryEntryChangedEventArgs(WatchResult watchResult, DirectoryEntryInfo changedEntryInfo, DirectoryEntryChangeType changeType);
    [JsonConstructorAttribute]
public DirectoryEntryChangedEventArgs(WatchResult watchResult, Uri uri, DirectoryEntryInfo changedEntryInfo, DirectoryEntryChangeType changeType);
    [CompilerGeneratedAttribute]
public WatchResult get_WatchResult();
    [CompilerGeneratedAttribute]
public Uri get_Uri();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public DirectoryEntryInfo get_ChangedEntryInfo();
    [CompilerGeneratedAttribute]
public DirectoryEntryChangeType get_ChangeType();
}
public enum Microsoft.VisualStudio.RpcContracts.FileSystem.DirectoryEntryChangeType : Enum {
    public int value__;
    public static DirectoryEntryChangeType None;
    public static DirectoryEntryChangeType Changed;
    public static DirectoryEntryChangeType Created;
    public static DirectoryEntryChangeType Deleted;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[JsonConverterAttribute("Microsoft.VisualStudio.RpcContracts.JsonConverters.DiscriminatedTypeJsonConverter`1<Microsoft.VisualStudio.RpcContracts.FileSystem.DirectoryEntryInfo>", "Mono.Cecil.CustomAttributeArgument[]")]
[TypeDiscriminatorAttribute("Microsoft.VisualStudio.RpcContracts.FileSystem.DirectoryInfo", "directory")]
[TypeDiscriminatorAttribute("Microsoft.VisualStudio.RpcContracts.FileSystem.FileInfo", "file")]
[DataContractAttribute]
[UnionAttribute("1", "Microsoft.VisualStudio.RpcContracts.FileSystem.DirectoryInfo")]
[UnionAttribute("2", "Microsoft.VisualStudio.RpcContracts.FileSystem.FileInfo")]
public abstract class Microsoft.VisualStudio.RpcContracts.FileSystem.DirectoryEntryInfo : object {
    private static bool UseNullInsteadOfBaseType;
    private static string DiscriminatorPropertyName;
    [CompilerGeneratedAttribute]
private Uri <Uri>k__BackingField;
    [CompilerGeneratedAttribute]
private FileAttributes <Attributes>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTime <CreationTime>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTime <LastWriteTime>k__BackingField;
    [DataMemberAttribute]
public Uri Uri { get; }
    [DataMemberAttribute]
public FileAttributes Attributes { get; }
    [DataMemberAttribute]
public DateTime CreationTime { get; }
    [DataMemberAttribute]
public DateTime LastWriteTime { get; }
    private static string UnspecifiedDateTimeKindErrorMessage { get; }
    protected DirectoryEntryInfo(Uri uri, FileAttributes attributes, DateTime creationTime, DateTime lastWriteTime);
    [CompilerGeneratedAttribute]
public Uri get_Uri();
    [CompilerGeneratedAttribute]
public FileAttributes get_Attributes();
    [CompilerGeneratedAttribute]
public DateTime get_CreationTime();
    [CompilerGeneratedAttribute]
public DateTime get_LastWriteTime();
    private static string get_UnspecifiedDateTimeKindErrorMessage();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DataContractAttribute]
public class Microsoft.VisualStudio.RpcContracts.FileSystem.DirectoryInfo : DirectoryEntryInfo {
    private static string DirectoryMustHaveDirectoryAttributeErrorMessage { get; }
    public DirectoryInfo(Uri uri, FileAttributes attributes, DateTime creationTime, DateTime lastWriteTime);
    private static string get_DirectoryMustHaveDirectoryAttributeErrorMessage();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DataContractAttribute]
public class Microsoft.VisualStudio.RpcContracts.FileSystem.FileInfo : DirectoryEntryInfo {
    [CompilerGeneratedAttribute]
private long <Length>k__BackingField;
    [DataMemberAttribute]
public long Length { get; }
    private static string FileMustNotHaveDirectoryAttributeErrorMessage { get; }
    [JsonConstructorAttribute]
public FileInfo(Uri uri, FileAttributes attributes, long length, DateTime creationTime, DateTime lastWriteTime);
    [EditorBrowsableAttribute("1")]
[ObsoleteAttribute("Use the other FileInfo constructor instead.  This one is only for MessagePack compatibility.")]
public FileInfo(Uri uri, FileAttributes attributes, DateTime creationTime, DateTime lastWriteTime, long length);
    [CompilerGeneratedAttribute]
public long get_Length();
    private static string get_FileMustNotHaveDirectoryAttributeErrorMessage();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DataContractAttribute]
public class Microsoft.VisualStudio.RpcContracts.FileSystem.FileSystemAccessChangedEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
private static FileSystemAccessChangedEventArgs <Empty>k__BackingField;
    public static FileSystemAccessChangedEventArgs Empty { get; }
    private static FileSystemAccessChangedEventArgs();
    [CompilerGeneratedAttribute]
public static FileSystemAccessChangedEventArgs get_Empty();
}
public enum Microsoft.VisualStudio.RpcContracts.FileSystem.FileSystemAccessLevel : Enum {
    public int value__;
    public static FileSystemAccessLevel Unknown;
    public static FileSystemAccessLevel LocalOrShared;
    public static FileSystemAccessLevel Hidden;
    public static FileSystemAccessLevel ExcludedFromSharing;
    public static FileSystemAccessLevel NotShared;
}
[NullableContextAttribute("1")]
public interface Microsoft.VisualStudio.RpcContracts.FileSystem.IFileSystem {
    public abstract virtual Task`1<IReadOnlyList`1<string>> GetSupportedSchemesAsync(CancellationToken cancellationToken);
    public abstract virtual Task`1<IReadOnlyList`1<Uri>> GetRootEntriesAsync(string scheme, CancellationToken cancellationToken);
    public abstract virtual Task`1<ServiceMoniker> GetMonikerForFileSystemProviderAsync(string scheme, CancellationToken cancellationToken);
    [ObsoleteAttribute("Use GetMonikerForFileSystemProviderAsync instead.")]
public abstract virtual Task`1<ServiceMoniker> GetMonikerForRemoteFileSystemProviderAsync(string scheme, CancellationToken cancellationToken);
    public abstract virtual Task`1<Uri> ConvertLocalUriToRemoteUriAsync(Uri localUri, CancellationToken cancellationToken);
    public abstract virtual Task`1<Uri> ConvertLocalUriToRemoteUriAsync(Uri localUri, string remoteScheme, CancellationToken cancellationToken);
    public abstract virtual Task`1<Uri> ConvertLocalFileNameToRemoteUriAsync(string fileName, CancellationToken cancellationToken);
    public abstract virtual Task`1<Uri> ConvertLocalFileNameToRemoteUriAsync(string fileName, string remoteScheme, CancellationToken cancellationToken);
    public abstract virtual Task`1<Uri> ConvertRemoteFileNameToRemoteUriAsync(string fileName, CancellationToken cancellationToken);
    public abstract virtual Task`1<Uri> ConvertRemoteFileNameToRemoteUriAsync(string fileName, string remoteScheme, CancellationToken cancellationToken);
    public abstract virtual Task`1<Uri> ConvertRemoteUriToLocalUriAsync(Uri remoteUri, CancellationToken cancellationToken);
    public abstract virtual Task`1<string> ConvertRemoteUriToRemoteFileNameAsync(Uri remoteUri, CancellationToken cancellationToken);
    public abstract virtual Task`1<Uri> DownloadFileAsync(Uri remoteUri, IProgress`1<OperationProgressData> progress, CancellationToken cancellationToken);
    public abstract virtual Task`1<UriDisplayInfo> GetDisplayInfoAsync(Uri uri, CancellationToken cancellationToken);
    public abstract virtual Task`1<UriDisplayInfo> GetDisplayInfoAsync(string fileName, CancellationToken cancellationToken);
    public abstract virtual Task`1<string> GetDefaultRemoteUriSchemeAsync(CancellationToken cancellationToken);
}
[NullableContextAttribute("1")]
public interface Microsoft.VisualStudio.RpcContracts.FileSystem.IFileSystemAuthorizationService {
    [CompilerGeneratedAttribute]
public abstract virtual void add_AccessChanged(EventHandler`1<FileSystemAccessChangedEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_AccessChanged(EventHandler`1<FileSystemAccessChangedEventArgs> value);
    public abstract virtual Task`1<IReadOnlyList`1<FileSystemAccessLevel>> GetLocalAccessAsync(IReadOnlyList`1<string> localPaths, CancellationToken cancellationToken);
    public abstract virtual Task`1<IReadOnlyList`1<FileSystemAccessLevel>> GetAccessAsync(IReadOnlyList`1<Uri> uris, CancellationToken cancellationToken);
}
[NullableContextAttribute("1")]
public interface Microsoft.VisualStudio.RpcContracts.FileSystem.IFileSystemProvider {
    [CompilerGeneratedAttribute]
public abstract virtual void add_DirectoryEntryChanged(EventHandler`1<DirectoryEntryChangedEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_DirectoryEntryChanged(EventHandler`1<DirectoryEntryChangedEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_RootEntriesChanged(EventHandler`1<RootEntriesChangedEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_RootEntriesChanged(EventHandler`1<RootEntriesChangedEventArgs> value);
    public abstract virtual Task`1<IReadOnlyList`1<Uri>> GetRootEntriesAsync(CancellationToken cancellationToken);
    public abstract virtual Task ReadFileAsync(Uri uri, PipeWriter writer, CancellationToken cancellationToken);
    public abstract virtual Task WriteFileAsync(Uri uri, PipeReader reader, bool overwrite, CancellationToken cancellationToken);
    public abstract virtual ValueTask`1<WatchResult> WatchFileAsync(Uri uri, CancellationToken cancellationToken);
    public abstract virtual IAsyncEnumerable`1<FileInfo> EnumerateFilesAsync(Uri uri, string searchPattern, SearchOption searchOption, CancellationToken cancellationToken);
    public abstract virtual IAsyncEnumerable`1<DirectoryInfo> EnumerateDirectoriesAsync(Uri uri, string searchPattern, SearchOption searchOption, CancellationToken cancellationToken);
    public abstract virtual IAsyncEnumerable`1<DirectoryEntryInfo> EnumerateDirectoryEntriesAsync(Uri uri, string searchPattern, SearchOption searchOption, CancellationToken cancellationToken);
    public abstract virtual Task CreateDirectoryAsync(Uri uri, CancellationToken cancellationToken);
    public abstract virtual ValueTask`1<WatchResult> WatchDirectoryAsync(Uri uri, bool recursive, CancellationToken cancellationToken);
    public abstract virtual Task CopyAsync(Uri sourceUri, Uri destinationUri, bool overwrite, IProgress`1<OperationProgressData> progress, CancellationToken cancellationToken);
    public abstract virtual Task MoveAsync(Uri oldUri, Uri newUri, bool overwrite, IProgress`1<OperationProgressData> progress, CancellationToken cancellationToken);
    public abstract virtual Task DeleteAsync(Uri uri, bool recursive, IProgress`1<OperationProgressData> progress, CancellationToken cancellationToken);
    public abstract virtual ValueTask UnwatchAsync(WatchResult watchResult, CancellationToken cancellationToken);
    public abstract virtual Task`1<DirectoryEntryInfo> GetInfoAsync(Uri uri, CancellationToken cancellationToken);
}
[NullableContextAttribute("1")]
public interface Microsoft.VisualStudio.RpcContracts.FileSystem.IRemoteFileSystemProvider {
    [CompilerGeneratedAttribute]
public abstract virtual void add_Connected(EventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_Connected(EventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_Disconnected(EventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_Disconnected(EventHandler value);
    public abstract virtual Task`1<bool> GetIsConnectedAsync(CancellationToken cancellationToken);
    public abstract virtual Task`1<Uri> DownloadFileAsync(Uri uri, IProgress`1<OperationProgressData> progress, CancellationToken cancellationToken);
    public abstract virtual Task`1<Uri> ConvertLocalUriToRemoteUriAsync(Uri localUri, CancellationToken cancellationToken);
    public abstract virtual Task`1<Uri> ConvertRemoteUriToLocalUriAsync(Uri remoteUri, CancellationToken cancellationToken);
}
[NullableContextAttribute("1")]
public interface Microsoft.VisualStudio.RpcContracts.FileSystem.IUriDisplayInfoProvider {
    public abstract virtual Task`1<UriDisplayInfo> GetDisplayInfoAsync(Uri uri, CancellationToken cancellationToken);
}
public class Microsoft.VisualStudio.RpcContracts.FileSystem.OperationProgressData : ValueType {
    [CompilerGeneratedAttribute]
private int <TotalEntryCount>k__BackingField;
    [CompilerGeneratedAttribute]
private int <CompletedEntryCount>k__BackingField;
    [CompilerGeneratedAttribute]
private long <TotalByteCount>k__BackingField;
    [CompilerGeneratedAttribute]
private long <CompletedByteCount>k__BackingField;
    public int TotalEntryCount { get; }
    public int CompletedEntryCount { get; }
    public long TotalByteCount { get; }
    public long CompletedByteCount { get; }
    public OperationProgressData(int totalEntryCount, int completedEntryCount, long totalByteCount, long completedByteCount);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public int get_TotalEntryCount();
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public int get_CompletedEntryCount();
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public long get_TotalByteCount();
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public long get_CompletedByteCount();
    public static bool op_Equality(OperationProgressData left, OperationProgressData right);
    public static bool op_Inequality(OperationProgressData left, OperationProgressData right);
    [NullableContextAttribute("2")]
public virtual bool Equals(object obj);
    public sealed virtual bool Equals(OperationProgressData other);
    public virtual int GetHashCode();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DataContractAttribute]
public class Microsoft.VisualStudio.RpcContracts.FileSystem.RootEntriesChangedEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
private string <Scheme>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<Uri> <RootEntries>k__BackingField;
    [DataMemberAttribute]
public string Scheme { get; }
    [DataMemberAttribute]
public IReadOnlyList`1<Uri> RootEntries { get; }
    public RootEntriesChangedEventArgs(string scheme, IReadOnlyList`1<Uri> rootEntries);
    [CompilerGeneratedAttribute]
public string get_Scheme();
    [CompilerGeneratedAttribute]
public IReadOnlyList`1<Uri> get_RootEntries();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DataContractAttribute]
public class Microsoft.VisualStudio.RpcContracts.FileSystem.UriDisplayInfo : object {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <FullName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <GroupName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <FullGroupName>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private string <ServerFullName>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private string <ServerFullGroupName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <RelativeName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <RelativeGroupName>k__BackingField;
    [DataMemberAttribute]
public string Name { get; }
    [DataMemberAttribute]
public string FullName { get; }
    [DataMemberAttribute]
public string GroupName { get; }
    [DataMemberAttribute]
public string FullGroupName { get; }
    [NullableAttribute("2")]
[DataMemberAttribute]
public string ServerFullName { get; }
    [NullableAttribute("2")]
[DataMemberAttribute]
public string ServerFullGroupName { get; }
    [DataMemberAttribute]
public string RelativeName { get; }
    [DataMemberAttribute]
public string RelativeGroupName { get; }
    public UriDisplayInfo(string name, string fullName, string groupName, string fullGroupName);
    public UriDisplayInfo(string name, string fullName, string groupName, string fullGroupName, string serverFullName, string serverFullGroupName);
    public UriDisplayInfo(string name, string fullName, string groupName, string fullGroupName, string serverFullName, string serverFullGroupName, string relativeName, string relativeGroupName);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public string get_FullName();
    [CompilerGeneratedAttribute]
public string get_GroupName();
    [CompilerGeneratedAttribute]
public string get_FullGroupName();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public string get_ServerFullName();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public string get_ServerFullGroupName();
    [CompilerGeneratedAttribute]
public string get_RelativeName();
    [CompilerGeneratedAttribute]
public string get_RelativeGroupName();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DataContractAttribute]
public class Microsoft.VisualStudio.RpcContracts.FileSystem.WatchResult : object {
    [CompilerGeneratedAttribute]
private string <Scheme>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Cookie>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsDirectory>k__BackingField;
    [DataMemberAttribute]
public string Scheme { get; }
    [DataMemberAttribute]
public int Cookie { get; }
    [DataMemberAttribute]
public bool IsDirectory { get; }
    public WatchResult(string scheme, int cookie, bool isDirectory);
    [CompilerGeneratedAttribute]
public string get_Scheme();
    [CompilerGeneratedAttribute]
public int get_Cookie();
    [CompilerGeneratedAttribute]
public bool get_IsDirectory();
}
[NullableContextAttribute("1")]
public interface Microsoft.VisualStudio.RpcContracts.IBrokeredServiceManifest {
    public abstract virtual ValueTask`1<IReadOnlyCollection`1<ServiceMoniker>> GetAvailableServicesAsync(CancellationToken cancellationToken);
    public abstract virtual ValueTask`1<ImmutableSortedSet`1<Version>> GetAvailableVersionsAsync(string serviceName, CancellationToken cancellationToken);
}
[NullableContextAttribute("1")]
public interface Microsoft.VisualStudio.RpcContracts.IClientNotificationService {
    public abstract virtual Task NotifyErrorAsync(string errorMessage, CancellationToken cancellationToken);
}
[NullableContextAttribute("2")]
public interface Microsoft.VisualStudio.RpcContracts.IHookableServiceJsonRpcDescriptor {
    public CreateJsonRpcDelegate CreateJsonRpcHook { get; public set; }
    public abstract virtual CreateJsonRpcDelegate get_CreateJsonRpcHook();
    public abstract virtual Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_CreateJsonRpcHook(CreateJsonRpcDelegate value);
    [NullableContextAttribute("1")]
public abstract virtual ServiceJsonRpcDescriptor WithCreateJsonRpcHook(CreateJsonRpcDelegate createJsonRpcDelegate);
}
[NullableContextAttribute("1")]
public interface Microsoft.VisualStudio.RpcContracts.IReducedFunctionalityReportingService {
    public abstract virtual Task ReportReducedFunctionalityAsync(string reducedFeatureId, string reducedFeature, ServiceMoniker serviceMoniker, Guid toolWindowGuid, UInt32 toolWindowInstanceId, CancellationToken cancellationToken);
    public abstract virtual Task ReportReducedFunctionalityAsync(string reducedFeatureId, string reducedFeature, ServiceMoniker serviceMoniker, CancellationToken cancellationToken);
}
[NullableContextAttribute("1")]
public interface Microsoft.VisualStudio.RpcContracts.IStringResourceDictionary {
    public abstract virtual ValueTask`1<string> GetStringResourceAsync(CultureInfo culture, string resourceId, CancellationToken cancellationToken);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class Microsoft.VisualStudio.RpcContracts.JsonConverters.DiscriminatedTypeJsonConverter`1 : JsonConverter`1<TBase> {
    private static IContractResolver RemoveConverterResolver;
    private string jsonPropertyName;
    [NullableAttribute("2")]
private ConstructorInfo fallbackValueCtor;
    private bool fallbackValueIsNull;
    public DiscriminatedTypeJsonConverter`1(bool useNullInsteadOfBaseType);
    public DiscriminatedTypeJsonConverter`1(bool useNullInsteadOfBaseType, string jsonPropertyName);
    public DiscriminatedTypeJsonConverter`1(Type fallbackType);
    public DiscriminatedTypeJsonConverter`1(string jsonPropertyName);
    public DiscriminatedTypeJsonConverter`1(Type fallbackType, string jsonPropertyName);
    private DiscriminatedTypeJsonConverter`1(string jsonPropertyName, Type fallbackType);
    private static DiscriminatedTypeJsonConverter`1();
    public virtual TBase ReadJson(JsonReader reader, Type objectType, TBase existingValue, bool hasExistingValue, JsonSerializer serializer);
    public virtual void WriteJson(JsonWriter writer, TBase value, JsonSerializer serializer);
    private static string GetDiscriminatorForType(Type valueType);
    [NullableContextAttribute("2")]
private static Type GetTypeForDiscriminator(string discriminator);
    private static IEnumerable`1<TypeDiscriminatorAttribute> GetTypeDiscriminatorAttributes();
    private TBase InitializeDefaultValue(JToken item);
    [CompilerGeneratedAttribute]
internal static string <GetDiscriminatorForType>g__GetInvalidMessage|13_0(Type valueType);
    [CompilerGeneratedAttribute]
internal static string <GetTypeForDiscriminator>g__GetInvalidMessage|14_0(string discriminator);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[AttributeUsageAttribute("1028")]
public class Microsoft.VisualStudio.RpcContracts.JsonConverters.TypeDiscriminatorAttribute : Attribute {
    [CompilerGeneratedAttribute]
private Type <Type>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Value>k__BackingField;
    public Type Type { get; }
    public string Value { get; }
    public TypeDiscriminatorAttribute(Type type);
    public TypeDiscriminatorAttribute(Type type, string discriminatorValue);
    [CompilerGeneratedAttribute]
public Type get_Type();
    [CompilerGeneratedAttribute]
public string get_Value();
}
[NullableContextAttribute("1")]
public interface Microsoft.VisualStudio.RpcContracts.LanguageServerProvider.ILanguageServerProvider {
    public abstract virtual Task`1<LanguageServerOptions> InitializeAsync(ILanguageServerProviderClient client, CancellationToken cancellationToken);
    public abstract virtual Task TryEnableProviderAsync(CancellationToken cancellationToken);
    public abstract virtual Task`1<IDuplexPipe> CreateServerConnectionAsync(CancellationToken cancellationToken);
    public abstract virtual Task OnServerInitializationResultAsync(ServerInitializationResult serverInitializationResult, LanguageServerInitializationFailureInfo initializationFailureInfo, CancellationToken cancellationToken);
}
[RpcMarshalableAttribute]
public interface Microsoft.VisualStudio.RpcContracts.LanguageServerProvider.ILanguageServerProviderClient {
    [NullableContextAttribute("1")]
public abstract virtual Task SetEnabledStateAsync(bool enabledState, CancellationToken cancellationToken);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
[DataContractAttribute]
public class Microsoft.VisualStudio.RpcContracts.LanguageServerProvider.LanguageServerInitializationFailureInfo : object {
    [CompilerGeneratedAttribute]
private Exception <Exception>k__BackingField;
    [CompilerGeneratedAttribute]
private string <StatusMessage>k__BackingField;
    [DataMemberAttribute]
public Exception Exception { get; private set; }
    [DataMemberAttribute]
public string StatusMessage { get; private set; }
    public LanguageServerInitializationFailureInfo(Exception exception, string statusMessage);
    [CompilerGeneratedAttribute]
public Exception get_Exception();
    [CompilerGeneratedAttribute]
private void set_Exception(Exception value);
    [CompilerGeneratedAttribute]
public string get_StatusMessage();
    [CompilerGeneratedAttribute]
private void set_StatusMessage(string value);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
[DataContractAttribute]
public class Microsoft.VisualStudio.RpcContracts.LanguageServerProvider.LanguageServerOptions : object {
    [CompilerGeneratedAttribute]
private JToken <InitializationOptions>k__BackingField;
    [DataMemberAttribute]
[MessagePackFormatterAttribute("Microsoft.VisualStudio.RpcContracts.LanguageServerProvider.LanguageServerOptions/JTokenFormatter")]
public JToken InitializationOptions { get; public set; }
    [CompilerGeneratedAttribute]
public JToken get_InitializationOptions();
    [CompilerGeneratedAttribute]
public void set_InitializationOptions(JToken value);
}
[FlagsAttribute]
public enum Microsoft.VisualStudio.RpcContracts.LanguageServerProvider.ServerInitializationResult : Enum {
    public int value__;
    public static ServerInitializationResult Succeeded;
    public static ServerInitializationResult Failed;
}
public enum Microsoft.VisualStudio.RpcContracts.Logging.AuditLogEventType : Enum {
    public int value__;
    public static AuditLogEventType Error;
    public static AuditLogEventType Warning;
    public static AuditLogEventType Information;
    public static AuditLogEventType SuccessAudit;
    public static AuditLogEventType FailureAudit;
}
public enum Microsoft.VisualStudio.RpcContracts.Logging.AuditLogSource : Enum {
    public int value__;
    public static AuditLogSource None;
    public static AuditLogSource LiveShare;
}
[NullableContextAttribute("1")]
public interface Microsoft.VisualStudio.RpcContracts.Logging.IAuditLogService {
    public abstract virtual Task WriteEventAsync(AuditLogEventType eventType, AuditLogSource source, string message, IReadOnlyDictionary`2<string, string> eventData, CancellationToken cancellationToken);
}
[NullableContextAttribute("1")]
public interface Microsoft.VisualStudio.RpcContracts.Logging.ITraceHubClientCallback {
    public abstract virtual Task`1<IDisposable> BeginTraceStreamAsync(LogId logId, PipeWriter pipeWriter, LoggingLevelSettings verbositySettings, CancellationToken cancellationToken);
    public abstract virtual Task FlushAsync(LogId logId, CancellationToken cancellationToken);
}
[NullableContextAttribute("1")]
public interface Microsoft.VisualStudio.RpcContracts.Logging.ITraceHubRegistrationService {
    public abstract virtual Task`1<IDisposable> SubscribeToLogVerbosityAsync(IObserver`1<LogVerbosityState> observer, LogId logId, CancellationToken cancellationToken);
    public abstract virtual Task`1<LogRegistration> RegisterTraceLogAsync(LogId logId, LoggerOptions options, CancellationToken cancellationToken);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DataContractAttribute]
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Microsoft.VisualStudio.RpcContracts.Logging.LoggerOptions : object {
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private LoggingLevelSettings <RequestedLoggingLevel>k__BackingField;
    [CompilerGeneratedAttribute]
private LoggingLevelSettings <MaxSupportedLoggingLevel>k__BackingField;
    [CompilerGeneratedAttribute]
private LoggingLevelSettings <MinSupportedLoggingLevel>k__BackingField;
    [CompilerGeneratedAttribute]
private PrivacyFlags <PrivacySetting>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyCollection`1<string> <SystemTags>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <AutoFlushEnabled>k__BackingField;
    [NullableAttribute("2")]
[DataMemberAttribute]
public LoggingLevelSettings RequestedLoggingLevel { get; }
    [DataMemberAttribute]
public LoggingLevelSettings MaxSupportedLoggingLevel { get; }
    [DataMemberAttribute]
public LoggingLevelSettings MinSupportedLoggingLevel { get; }
    [DataMemberAttribute]
public PrivacyFlags PrivacySetting { get; }
    [DataMemberAttribute]
public IReadOnlyCollection`1<string> SystemTags { get; }
    [DataMemberAttribute]
public bool AutoFlushEnabled { get; }
    private string DebuggerDisplay { get; }
    [NullableContextAttribute("2")]
public LoggerOptions(LoggingLevelSettings requestedLoggingLevel, PrivacyFlags privacySetting, IReadOnlyCollection`1<string> systemTags, LoggingLevelSettings maxSupportedLoggingLevel, LoggingLevelSettings minSupportedLoggingLevel);
    [NullableContextAttribute("2")]
public LoggerOptions(LoggingLevelSettings requestedLoggingLevel, PrivacyFlags privacySetting, IReadOnlyCollection`1<string> systemTags, LoggingLevelSettings maxSupportedLoggingLevel, LoggingLevelSettings minSupportedLoggingLevel, bool autoFlushEnabled);
    [SerializationConstructorAttribute]
private LoggerOptions(LoggingLevelSettings requestedLoggingLevel, LoggingLevelSettings maxSupportedLoggingLevel, LoggingLevelSettings minSupportedLoggingLevel, PrivacyFlags privacySetting, IReadOnlyCollection`1<string> systemTags, bool autoFlushEnabled);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public LoggingLevelSettings get_RequestedLoggingLevel();
    [CompilerGeneratedAttribute]
public LoggingLevelSettings get_MaxSupportedLoggingLevel();
    [CompilerGeneratedAttribute]
public LoggingLevelSettings get_MinSupportedLoggingLevel();
    [CompilerGeneratedAttribute]
public PrivacyFlags get_PrivacySetting();
    [CompilerGeneratedAttribute]
public IReadOnlyCollection`1<string> get_SystemTags();
    [CompilerGeneratedAttribute]
public bool get_AutoFlushEnabled();
    private string get_DebuggerDisplay();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DataContractAttribute]
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Microsoft.VisualStudio.RpcContracts.Logging.LoggingLevelSettings : object {
    private static SourceLevels AllDefinedSourceLevelFlags;
    [CompilerGeneratedAttribute]
private SourceLevels <LoggingVerbosity>k__BackingField;
    [DataMemberAttribute]
public SourceLevels LoggingVerbosity { get; }
    internal string DebuggerDisplay { get; }
    public LoggingLevelSettings(SourceLevels loggingVerbosity);
    [CompilerGeneratedAttribute]
public SourceLevels get_LoggingVerbosity();
    internal string get_DebuggerDisplay();
    [NullableContextAttribute("2")]
public static bool op_Equality(LoggingLevelSettings left, LoggingLevelSettings right);
    [NullableContextAttribute("2")]
public static bool op_Inequality(LoggingLevelSettings left, LoggingLevelSettings right);
    public static bool op_GreaterThanOrEqual(LoggingLevelSettings left, LoggingLevelSettings right);
    public static bool op_LessThanOrEqual(LoggingLevelSettings left, LoggingLevelSettings right);
    public static bool op_LessThan(LoggingLevelSettings left, LoggingLevelSettings right);
    public static bool op_GreaterThan(LoggingLevelSettings left, LoggingLevelSettings right);
    [NullableContextAttribute("2")]
public sealed virtual bool Equals(LoggingLevelSettings other);
    [NullableContextAttribute("2")]
public virtual bool Equals(object obj);
    [NullableContextAttribute("2")]
public sealed virtual int CompareTo(LoggingLevelSettings other);
    public virtual int GetHashCode();
    [NullableContextAttribute("2")]
private static bool Equals(LoggingLevelSettings left, LoggingLevelSettings right);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DataContractAttribute]
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Microsoft.VisualStudio.RpcContracts.Logging.LogId : ValueType {
    [CompilerGeneratedAttribute]
private string <LogName>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private ServiceMoniker <ServiceId>k__BackingField;
    [DataMemberAttribute]
public string LogName { get; }
    [NullableAttribute("2")]
[DataMemberAttribute]
public ServiceMoniker ServiceId { get; }
    internal string DebuggerDisplay { get; }
    public LogId(string logName, ServiceMoniker serviceId);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public string get_LogName();
    [IsReadOnlyAttribute]
[NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public ServiceMoniker get_ServiceId();
    internal string get_DebuggerDisplay();
    public static bool op_Equality(LogId left, LogId right);
    public static bool op_Inequality(LogId left, LogId right);
    [NullableContextAttribute("2")]
public virtual bool Equals(object o);
    public sealed virtual bool Equals(LogId other);
    public virtual int GetHashCode();
    public virtual string ToString();
    internal static bool IsValidName(string logName);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
[DataContractAttribute]
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Microsoft.VisualStudio.RpcContracts.Logging.LogRegistration : object {
    [CompilerGeneratedAttribute]
private LogId <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private RegistrationStatuses <Status>k__BackingField;
    [CompilerGeneratedAttribute]
private string <LogFilePathPrefix>k__BackingField;
    [CompilerGeneratedAttribute]
private LoggingLevelSettings <VerbositySettings>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <AutoFlushEnabled>k__BackingField;
    [DataMemberAttribute]
public LogId Id { get; }
    [DataMemberAttribute]
public RegistrationStatuses Status { get; }
    [DataMemberAttribute]
public string LogFilePathPrefix { get; }
    [DataMemberAttribute]
public LoggingLevelSettings VerbositySettings { get; }
    [DataMemberAttribute]
public bool AutoFlushEnabled { get; public set; }
    [NullableAttribute("1")]
private string DebuggerDisplay { get; }
    [NullableContextAttribute("1")]
public LogRegistration(RegistrationStatuses status, LogId id, LoggingLevelSettings verbositySettings, string logFilePathPrefix);
    public LogRegistration(LogId id);
    [SerializationConstructorAttribute]
private LogRegistration(LogId id, RegistrationStatuses status, string logFilePathPrefix, LoggingLevelSettings verbositySettings);
    [CompilerGeneratedAttribute]
public LogId get_Id();
    [CompilerGeneratedAttribute]
public RegistrationStatuses get_Status();
    [CompilerGeneratedAttribute]
public string get_LogFilePathPrefix();
    [CompilerGeneratedAttribute]
public LoggingLevelSettings get_VerbositySettings();
    [CompilerGeneratedAttribute]
public bool get_AutoFlushEnabled();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_AutoFlushEnabled(bool value);
    [NullableContextAttribute("1")]
private string get_DebuggerDisplay();
    public bool IsSuccess(bool requireUniqueRegistration);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DataContractAttribute]
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Microsoft.VisualStudio.RpcContracts.Logging.LogVerbosityState : object {
    [CompilerGeneratedAttribute]
private LogId <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private LoggingLevelSettings <VerbositySettings>k__BackingField;
    [DataMemberAttribute]
public LogId Id { get; }
    [DataMemberAttribute]
public LoggingLevelSettings VerbositySettings { get; }
    private string DebuggerDisplay { get; }
    public LogVerbosityState(LogId id, LoggingLevelSettings verbositySettings);
    [CompilerGeneratedAttribute]
public LogId get_Id();
    [CompilerGeneratedAttribute]
public LoggingLevelSettings get_VerbositySettings();
    private string get_DebuggerDisplay();
}
[FlagsAttribute]
public enum Microsoft.VisualStudio.RpcContracts.Logging.PrivacyFlags : Enum {
    public int value__;
    public static PrivacyFlags None;
    public static PrivacyFlags MayContainPersonallyIdentifibleInformation;
    public static PrivacyFlags MayContainPrivateInformation;
}
[FlagsAttribute]
public enum Microsoft.VisualStudio.RpcContracts.Logging.RegistrationStatuses : Enum {
    public int value__;
    public static RegistrationStatuses Failure;
    public static RegistrationStatuses Success;
    public static RegistrationStatuses NewRegistration;
}
public enum Microsoft.VisualStudio.RpcContracts.Notifications.DialogButton : Enum {
    public int value__;
    public static DialogButton None;
    public static DialogButton Close;
    public static DialogButton OK;
    public static DialogButton OKCancel;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DataContractAttribute]
public class Microsoft.VisualStudio.RpcContracts.Notifications.DialogOption : object {
    [CompilerGeneratedAttribute]
private static DialogOption <Close>k__BackingField;
    [CompilerGeneratedAttribute]
private static DialogOption <OK>k__BackingField;
    [CompilerGeneratedAttribute]
private static DialogOption <OKCancel>k__BackingField;
    [CompilerGeneratedAttribute]
private DialogButton <Buttons>k__BackingField;
    [CompilerGeneratedAttribute]
private DialogResult <DefaultButton>k__BackingField;
    [CompilerGeneratedAttribute]
protected Type EqualityContract { get; }
    public static DialogOption Close { get; }
    public static DialogOption OK { get; }
    public static DialogOption OKCancel { get; }
    [DataMemberAttribute]
public DialogButton Buttons { get; }
    [DataMemberAttribute]
public DialogResult DefaultButton { get; }
    public DialogOption(DialogButton buttons, DialogResult defaultButton);
    [CompilerGeneratedAttribute]
protected DialogOption(DialogOption original);
    private static DialogOption();
    [CompilerGeneratedAttribute]
protected virtual Type get_EqualityContract();
    [CompilerGeneratedAttribute]
public static DialogOption get_Close();
    [CompilerGeneratedAttribute]
public static DialogOption get_OK();
    [CompilerGeneratedAttribute]
public static DialogOption get_OKCancel();
    [CompilerGeneratedAttribute]
public DialogButton get_Buttons();
    [CompilerGeneratedAttribute]
public DialogResult get_DefaultButton();
    [CompilerGeneratedAttribute]
public virtual string ToString();
    [CompilerGeneratedAttribute]
protected virtual bool PrintMembers(StringBuilder builder);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static bool op_Inequality(DialogOption left, DialogOption right);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static bool op_Equality(DialogOption left, DialogOption right);
    [CompilerGeneratedAttribute]
public virtual int GetHashCode();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual bool Equals(object obj);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual bool Equals(DialogOption other);
    [CompilerGeneratedAttribute]
public virtual DialogOption <Clone>$();
}
public enum Microsoft.VisualStudio.RpcContracts.Notifications.DialogResult : Enum {
    public int value__;
    public static DialogResult None;
    public static DialogResult Close;
    public static DialogResult OK;
    public static DialogResult Cancel;
}
[NullableContextAttribute("1")]
public interface Microsoft.VisualStudio.RpcContracts.Notifications.IUserPromptService {
    public abstract virtual ValueTask`1<UserPromptResult> ShowUserPromptAsync(string prompt, IReadOnlyList`1<UserPromptOption> options, UInt32 defaultOptionIndex, CancellationToken ct);
    public abstract virtual Task`1<DialogResult> ShowDialogAsync(IRemoteUserControl content, string title, DialogOption options, CancellationToken cancellationToken);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DebuggerDisplayAttribute("{GetDebuggerDisplay(),nq}")]
[DataContractAttribute]
public class Microsoft.VisualStudio.RpcContracts.Notifications.UserPromptOption : object {
    [CompilerGeneratedAttribute]
private static UserPromptOption <None>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Text>k__BackingField;
    [CompilerGeneratedAttribute]
protected Type EqualityContract { get; }
    public static UserPromptOption None { get; }
    [LocalizableAttribute("True")]
[DataMemberAttribute]
public string Text { get; }
    public UserPromptOption(string text);
    [CompilerGeneratedAttribute]
protected UserPromptOption(UserPromptOption original);
    private static UserPromptOption();
    [CompilerGeneratedAttribute]
protected virtual Type get_EqualityContract();
    [CompilerGeneratedAttribute]
public static UserPromptOption get_None();
    [CompilerGeneratedAttribute]
public string get_Text();
    private string GetDebuggerDisplay();
    [CompilerGeneratedAttribute]
public virtual string ToString();
    [CompilerGeneratedAttribute]
protected virtual bool PrintMembers(StringBuilder builder);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static bool op_Inequality(UserPromptOption left, UserPromptOption right);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static bool op_Equality(UserPromptOption left, UserPromptOption right);
    [CompilerGeneratedAttribute]
public virtual int GetHashCode();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual bool Equals(object obj);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual bool Equals(UserPromptOption other);
    [CompilerGeneratedAttribute]
public virtual UserPromptOption <Clone>$();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DebuggerDisplayAttribute("{GetDebuggerDisplay(),nq}")]
[DataContractAttribute]
public class Microsoft.VisualStudio.RpcContracts.Notifications.UserPromptResult : object {
    [CompilerGeneratedAttribute]
private static UserPromptResult <UserDismissed>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsUserDismissed>k__BackingField;
    [CompilerGeneratedAttribute]
private UserPromptOption <SelectedOption>k__BackingField;
    [CompilerGeneratedAttribute]
protected Type EqualityContract { get; }
    public static UserPromptResult UserDismissed { get; }
    [DataMemberAttribute]
public bool IsUserDismissed { get; }
    [DataMemberAttribute]
public UserPromptOption SelectedOption { get; }
    public UserPromptResult(bool isUserDismissed, UserPromptOption selectedOption);
    public UserPromptResult(UserPromptOption selectedOption);
    [CompilerGeneratedAttribute]
protected UserPromptResult(UserPromptResult original);
    private static UserPromptResult();
    [CompilerGeneratedAttribute]
protected virtual Type get_EqualityContract();
    [CompilerGeneratedAttribute]
public static UserPromptResult get_UserDismissed();
    [CompilerGeneratedAttribute]
public bool get_IsUserDismissed();
    [CompilerGeneratedAttribute]
public UserPromptOption get_SelectedOption();
    private string GetDebuggerDisplay();
    [CompilerGeneratedAttribute]
public virtual string ToString();
    [CompilerGeneratedAttribute]
protected virtual bool PrintMembers(StringBuilder builder);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static bool op_Inequality(UserPromptResult left, UserPromptResult right);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static bool op_Equality(UserPromptResult left, UserPromptResult right);
    [CompilerGeneratedAttribute]
public virtual int GetHashCode();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual bool Equals(object obj);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual bool Equals(UserPromptResult other);
    [CompilerGeneratedAttribute]
public virtual UserPromptResult <Clone>$();
}
public enum Microsoft.VisualStudio.RpcContracts.OpenDocument.DocumentWindowCaptionKind : Enum {
    public int value__;
    public static DocumentWindowCaptionKind DocumentName;
    public static DocumentWindowCaptionKind ProjectItemHierarchyName;
    public static DocumentWindowCaptionKind ProjectName;
    public static DocumentWindowCaptionKind Custom;
}
[NullableContextAttribute("1")]
public interface Microsoft.VisualStudio.RpcContracts.OpenDocument.IOpenDocumentService {
    public abstract virtual Task OpenDocumentAsync(string path, CancellationToken cancellationToken);
    public abstract virtual Task OpenDocumentWithEditorSelectionAsync(string path, CancellationToken cancellationToken);
    public abstract virtual Task`1<string> OpenDocumentAsync(Uri documentUri, OpenDocumentOptions openDocumentOptions, CancellationToken cancellationToken);
}
public enum Microsoft.VisualStudio.RpcContracts.OpenDocument.LogicalViewKind : Enum {
    public int value__;
    public static LogicalViewKind Primary;
    public static LogicalViewKind Any;
    public static LogicalViewKind Debugging;
    public static LogicalViewKind Code;
    public static LogicalViewKind Designer;
    public static LogicalViewKind Text;
    public static LogicalViewKind UserChoose;
    public static LogicalViewKind ProjectSpecific;
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
[DataContractAttribute]
public class Microsoft.VisualStudio.RpcContracts.OpenDocument.OpenDocumentOptions : object {
    [CompilerGeneratedAttribute]
private Nullable`1<Range> <Selection>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<Range> <EnsureVisible>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<EnsureRangeVisibleOptions> <EnsureVisibleOptions>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsPreview>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <Activate>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<LogicalViewKind> <LogicalView>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<Guid> <ProjectId>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<Guid> <EditorType>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<DocumentWindowCaptionKind> <DocumentWindowCaptionKind>k__BackingField;
    [CompilerGeneratedAttribute]
private string <CustomDocumentWindowCaption>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <IsUserReadonly>k__BackingField;
    [DataMemberAttribute]
public Nullable`1<Range> Selection { get; }
    [DataMemberAttribute]
public Nullable`1<Range> EnsureVisible { get; }
    [DataMemberAttribute]
public Nullable`1<EnsureRangeVisibleOptions> EnsureVisibleOptions { get; }
    [DataMemberAttribute]
public bool IsPreview { get; }
    [DataMemberAttribute]
public Nullable`1<bool> Activate { get; }
    [DataMemberAttribute]
public Nullable`1<LogicalViewKind> LogicalView { get; }
    [DataMemberAttribute]
public Nullable`1<Guid> ProjectId { get; }
    [DataMemberAttribute]
public Nullable`1<Guid> EditorType { get; }
    [DataMemberAttribute]
public Nullable`1<DocumentWindowCaptionKind> DocumentWindowCaptionKind { get; }
    [DataMemberAttribute]
public string CustomDocumentWindowCaption { get; }
    [DataMemberAttribute]
public Nullable`1<bool> IsUserReadonly { get; }
    public OpenDocumentOptions(Nullable`1<Range> selection, Nullable`1<Range> ensureVisible, Nullable`1<EnsureRangeVisibleOptions> ensureVisibleOptions, bool isPreview, Nullable`1<bool> activate, Nullable`1<LogicalViewKind> logicalView, Nullable`1<Guid> projectId, Nullable`1<Guid> editorType);
    public OpenDocumentOptions(Nullable`1<Range> selection, Nullable`1<Range> ensureVisible, Nullable`1<EnsureRangeVisibleOptions> ensureVisibleOptions, bool isPreview, Nullable`1<bool> activate, Nullable`1<LogicalViewKind> logicalView, Nullable`1<Guid> projectId, Nullable`1<Guid> editorType, Nullable`1<DocumentWindowCaptionKind> documentWindowCaptionKind, string customDocumentWindowCaption, Nullable`1<bool> isUserReadonly);
    [CompilerGeneratedAttribute]
public Nullable`1<Range> get_Selection();
    [CompilerGeneratedAttribute]
public Nullable`1<Range> get_EnsureVisible();
    [CompilerGeneratedAttribute]
public Nullable`1<EnsureRangeVisibleOptions> get_EnsureVisibleOptions();
    [CompilerGeneratedAttribute]
public bool get_IsPreview();
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_Activate();
    [CompilerGeneratedAttribute]
public Nullable`1<LogicalViewKind> get_LogicalView();
    [CompilerGeneratedAttribute]
public Nullable`1<Guid> get_ProjectId();
    [CompilerGeneratedAttribute]
public Nullable`1<Guid> get_EditorType();
    [CompilerGeneratedAttribute]
public Nullable`1<DocumentWindowCaptionKind> get_DocumentWindowCaptionKind();
    [CompilerGeneratedAttribute]
public string get_CustomDocumentWindowCaption();
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_IsUserReadonly();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.VisualStudio.RpcContracts.OutputChannel.Channel : object {
    [CompilerGeneratedAttribute]
private string <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DisplayName>k__BackingField;
    [CompilerGeneratedAttribute]
private Encoding <Encoding>k__BackingField;
    public string Id { get; }
    public string DisplayName { get; }
    public Encoding Encoding { get; }
    public Channel(string id, string displayName, Encoding encoding);
    [CompilerGeneratedAttribute]
public string get_Id();
    [CompilerGeneratedAttribute]
public string get_DisplayName();
    [CompilerGeneratedAttribute]
public Encoding get_Encoding();
}
[NullableContextAttribute("1")]
public interface Microsoft.VisualStudio.RpcContracts.OutputChannel.IOutputChannelStore {
    [CompilerGeneratedAttribute]
public abstract virtual void add_ChannelCreated(EventHandler`1<string> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_ChannelCreated(EventHandler`1<string> value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_ChannelClosed(EventHandler`1<string> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_ChannelClosed(EventHandler`1<string> value);
    public abstract virtual ValueTask`1<IReadOnlyCollection`1<Channel>> GetChannelsAsync(CancellationToken cancellationToken);
    public abstract virtual Task CreateChannelAsync(string id, string displayNameResourceId, PipeReader pipeReader, Encoding encoding, CancellationToken cancellationToken);
    public abstract virtual ValueTask`1<Channel> OpenChannelAsync(string id, PipeWriter pipeWriter, CancellationToken cancellationToken);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
[DataContractAttribute]
public class Microsoft.VisualStudio.RpcContracts.ProgressData : object {
    [CompilerGeneratedAttribute]
private string <OverallOperation>k__BackingField;
    [CompilerGeneratedAttribute]
private string <PreciseOperation>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <CurrentStep>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <TotalSteps>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsCancelable>k__BackingField;
    [NullableAttribute("1")]
[CompilerGeneratedAttribute]
protected Type EqualityContract { get; }
    [DataMemberAttribute]
public string OverallOperation { get; public set; }
    [DataMemberAttribute]
public string PreciseOperation { get; public set; }
    [DataMemberAttribute]
public Nullable`1<int> CurrentStep { get; public set; }
    [DataMemberAttribute]
public Nullable`1<int> TotalSteps { get; public set; }
    [DataMemberAttribute]
[DefaultValueAttribute("True")]
public bool IsCancelable { get; public set; }
    [CompilerGeneratedAttribute]
protected ProgressData(ProgressData original);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
protected virtual Type get_EqualityContract();
    [CompilerGeneratedAttribute]
public string get_OverallOperation();
    [CompilerGeneratedAttribute]
public void set_OverallOperation(string value);
    [CompilerGeneratedAttribute]
public string get_PreciseOperation();
    [CompilerGeneratedAttribute]
public void set_PreciseOperation(string value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_CurrentStep();
    [CompilerGeneratedAttribute]
public void set_CurrentStep(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_TotalSteps();
    [CompilerGeneratedAttribute]
public void set_TotalSteps(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public bool get_IsCancelable();
    [CompilerGeneratedAttribute]
public void set_IsCancelable(bool value);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public virtual string ToString();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
protected virtual bool PrintMembers(StringBuilder builder);
    [CompilerGeneratedAttribute]
public static bool op_Inequality(ProgressData left, ProgressData right);
    [CompilerGeneratedAttribute]
public static bool op_Equality(ProgressData left, ProgressData right);
    [CompilerGeneratedAttribute]
public virtual int GetHashCode();
    [CompilerGeneratedAttribute]
public virtual bool Equals(object obj);
    [CompilerGeneratedAttribute]
public virtual bool Equals(ProgressData other);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public virtual ProgressData <Clone>$();
}
[NullableContextAttribute("1")]
public interface Microsoft.VisualStudio.RpcContracts.ProgressReporting.IWorkProgressHandler {
    [CompilerGeneratedAttribute]
public abstract virtual void add_WorkCanceled(EventHandler`1<WorkCanceledEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_WorkCanceled(EventHandler`1<WorkCanceledEventArgs> value);
    public abstract virtual Task`1<Guid> RegisterWorkAsync(string componentDisplayName, string workDisplayName, ProgressReporterOptions options, CancellationToken cancellationToken);
    public abstract virtual Task ReportProgressAsync(Guid workId, ProgressStatus status, CancellationToken cancellationToken);
    public abstract virtual Task CompleteWorkAsync(Guid workId, CancellationToken cancellationToken);
}
[DataContractAttribute]
public class Microsoft.VisualStudio.RpcContracts.ProgressReporting.ProgressReporterOptions : object {
    [CompilerGeneratedAttribute]
private bool <IsWorkCancellable>k__BackingField;
    [DataMemberAttribute]
public bool IsWorkCancellable { get; }
    public ProgressReporterOptions(bool isWorkCancellable);
    [CompilerGeneratedAttribute]
public bool get_IsWorkCancellable();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DataContractAttribute]
public class Microsoft.VisualStudio.RpcContracts.ProgressReporting.ProgressStatus : object {
    [CompilerGeneratedAttribute]
private Nullable`1<int> <PercentComplete>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Description>k__BackingField;
    [DataMemberAttribute]
public Nullable`1<int> PercentComplete { get; }
    [DataMemberAttribute]
public string Description { get; }
    public ProgressStatus(Nullable`1<int> percentComplete, string description);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_PercentComplete();
    [CompilerGeneratedAttribute]
public string get_Description();
}
[DataContractAttribute]
public class Microsoft.VisualStudio.RpcContracts.ProgressReporting.WorkCanceledEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
private Guid <Id>k__BackingField;
    [DataMemberAttribute]
public Guid Id { get; }
    public WorkCanceledEventArgs(Guid id);
    [CompilerGeneratedAttribute]
public Guid get_Id();
}
[NullableContextAttribute("1")]
public interface Microsoft.VisualStudio.RpcContracts.ProjectFileEditing.IProjectFileInvisibleEditorTracker {
    public abstract virtual Task`1<Nullable`1<int>> EditorOpenedAsync(Guid projectGuid, CancellationToken cancellationToken);
    public abstract virtual Task EditorClosedAsync(Guid projectGuid, int cookie, CancellationToken cancellationToken);
}
[RpcMarshalableAttribute]
public interface Microsoft.VisualStudio.RpcContracts.RemoteUI.ILocalControlWrapper {
    [NullableContextAttribute("1")]
public abstract virtual Task`1<long> GetGCHandleAsync(CancellationToken cancellationToken);
}
[NullableContextAttribute("1")]
[RpcMarshalableAttribute]
public interface Microsoft.VisualStudio.RpcContracts.RemoteUI.IRemoteProxiedUserControl {
    public abstract virtual Task`1<bool> GetObjectAsync(ObjectId id, CancellationToken cancellationToken);
    public abstract virtual Task`1<bool> SetObjectPropertyAsync(ObjectId id, string propertyName, MessagePackFragment value, CancellationToken cancellationToken);
    public abstract virtual Task`1<bool> SetCollectionEntryAsync(ObjectId id, int index, MessagePackFragment value, Nullable`1<ObjectVersion> version, CancellationToken cancellationToken);
    public abstract virtual Task`1<bool> InvokeAsync(ObjectId id, MessagePackFragment parameter, CancellationToken cancellationToken);
}
[RpcMarshalableAttribute]
public interface Microsoft.VisualStudio.RpcContracts.RemoteUI.IRemoteProxiedUserControl2 {
    [NullableContextAttribute("1")]
public abstract virtual Task`1<bool> InvokeAsync(ObjectId id, MessagePackFragment parameter, IReadOnlyDictionary`2<string, string> context, CancellationToken cancellationToken);
}
[NullableContextAttribute("1")]
[RpcMarshalableAttribute]
public interface Microsoft.VisualStudio.RpcContracts.RemoteUI.IRemoteProxiedUserControlClient {
    public abstract virtual Task RemotePropertyChangedAsync(ObjectId id, string propertyName, MessagePackFragment newValue, CancellationToken cancellationToken);
    public abstract virtual Task RemoteCollectionChangedAsync(ObjectId id, Nullable`1<ObjectVersion> version, RemoteCollectionChanges changes, CancellationToken cancellationToken);
    public abstract virtual Task ObjectValueNotificationAsync(MessagePackFragment value, CancellationToken cancellationToken);
    public abstract virtual Task SetDataContextAsync(MessagePackFragment value, CancellationToken cancellationToken);
}
[RpcMarshalableAttribute]
[RpcMarshalableOptionalInterfaceAttribute("1", "Microsoft.VisualStudio.RpcContracts.RemoteUI.IRemoteProxiedUserControl")]
[RpcMarshalableOptionalInterfaceAttribute("2", "Microsoft.VisualStudio.RpcContracts.RemoteUI.IRemoteWpfUserControl")]
[RpcMarshalableOptionalInterfaceAttribute("3", "Microsoft.VisualStudio.RpcContracts.RemoteUI.ILocalControlWrapper")]
[RpcMarshalableOptionalInterfaceAttribute("4", "Microsoft.VisualStudio.RpcContracts.RemoteUI.IRemoteProxiedUserControl2")]
public interface Microsoft.VisualStudio.RpcContracts.RemoteUI.IRemoteUserControl {
}
[RpcMarshalableAttribute]
public interface Microsoft.VisualStudio.RpcContracts.RemoteUI.IRemoteWpfUserControl {
    [NullableContextAttribute("1")]
public abstract virtual Task`1<RemoteWpfUserControlDefinition> InitializeAsync(IRemoteProxiedUserControlClient remoteUserControlClient, CancellationToken cancellationToken);
    [NullableContextAttribute("1")]
public abstract virtual Task ControlLoadedAsync(CancellationToken cancellationToken);
}
[IsReadOnlyAttribute]
[MessagePackFormatterAttribute("Microsoft.VisualStudio.RpcContracts.RemoteUI.MessagePackFragment/MessagePackFragmentFormatter")]
[JsonConverterAttribute("Microsoft.VisualStudio.RpcContracts.RemoteUI.MessagePackFragment/MessagePackFragmentConverter")]
public class Microsoft.VisualStudio.RpcContracts.RemoteUI.MessagePackFragment : ValueType {
    [CompilerGeneratedAttribute]
private ReadOnlySequence`1<byte> <Data>k__BackingField;
    public ReadOnlySequence`1<byte> Data { get; }
    public long Length { get; }
    public MessagePackFragment(ReadOnlySequence`1<byte> data);
    [CompilerGeneratedAttribute]
public ReadOnlySequence`1<byte> get_Data();
    public long get_Length();
}
[IsReadOnlyAttribute]
[MessagePackFormatterAttribute("Microsoft.VisualStudio.RpcContracts.RemoteUI.ObjectIdFormatter")]
public class Microsoft.VisualStudio.RpcContracts.RemoteUI.ObjectId : ValueType {
    [CompilerGeneratedAttribute]
private ulong <Value>k__BackingField;
    [CompilerGeneratedAttribute]
private static ObjectId <Invalid>k__BackingField;
    public ulong Value { get; public set; }
    public static ObjectId Invalid { get; }
    public ObjectId(ulong Value);
    private static ObjectId();
    [CompilerGeneratedAttribute]
public ulong get_Value();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_Value(ulong value);
    [CompilerGeneratedAttribute]
public static ObjectId get_Invalid();
    [CompilerGeneratedAttribute]
public virtual string ToString();
    [CompilerGeneratedAttribute]
private bool PrintMembers(StringBuilder builder);
    [CompilerGeneratedAttribute]
public static bool op_Inequality(ObjectId left, ObjectId right);
    [CompilerGeneratedAttribute]
public static bool op_Equality(ObjectId left, ObjectId right);
    [CompilerGeneratedAttribute]
public virtual int GetHashCode();
    [CompilerGeneratedAttribute]
public virtual bool Equals(object obj);
    [CompilerGeneratedAttribute]
public sealed virtual bool Equals(ObjectId other);
    [CompilerGeneratedAttribute]
public void Deconstruct(UInt64& Value);
}
public class Microsoft.VisualStudio.RpcContracts.RemoteUI.ObjectIdFormatter : object {
    public static ObjectId Read(MessagePackReader& reader);
    public static void Write(MessagePackWriter& writer, ObjectId value);
    [NullableContextAttribute("1")]
public sealed virtual void Serialize(MessagePackWriter& writer, ObjectId value, MessagePackSerializerOptions options);
    [NullableContextAttribute("1")]
public sealed virtual ObjectId Deserialize(MessagePackReader& reader, MessagePackSerializerOptions options);
}
[IsReadOnlyAttribute]
[MessagePackFormatterAttribute("Microsoft.VisualStudio.RpcContracts.RemoteUI.ObjectVersionFormatter")]
public class Microsoft.VisualStudio.RpcContracts.RemoteUI.ObjectVersion : ValueType {
    [CompilerGeneratedAttribute]
private UInt32 <ServerChangeCount>k__BackingField;
    [CompilerGeneratedAttribute]
private UInt32 <ClientChangeCount>k__BackingField;
    public UInt32 ServerChangeCount { get; public set; }
    public UInt32 ClientChangeCount { get; public set; }
    public ObjectVersion(UInt32 ServerChangeCount, UInt32 ClientChangeCount);
    [CompilerGeneratedAttribute]
public UInt32 get_ServerChangeCount();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_ServerChangeCount(UInt32 value);
    [CompilerGeneratedAttribute]
public UInt32 get_ClientChangeCount();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_ClientChangeCount(UInt32 value);
    [CompilerGeneratedAttribute]
public virtual string ToString();
    [CompilerGeneratedAttribute]
private bool PrintMembers(StringBuilder builder);
    [CompilerGeneratedAttribute]
public static bool op_Inequality(ObjectVersion left, ObjectVersion right);
    [CompilerGeneratedAttribute]
public static bool op_Equality(ObjectVersion left, ObjectVersion right);
    [CompilerGeneratedAttribute]
public virtual int GetHashCode();
    [CompilerGeneratedAttribute]
public virtual bool Equals(object obj);
    [CompilerGeneratedAttribute]
public sealed virtual bool Equals(ObjectVersion other);
    [CompilerGeneratedAttribute]
public void Deconstruct(UInt32& ServerChangeCount, UInt32& ClientChangeCount);
}
public class Microsoft.VisualStudio.RpcContracts.RemoteUI.ObjectVersionFormatter : object {
    public static ObjectVersion Read(MessagePackReader& reader);
    public static void Write(MessagePackWriter& writer, ObjectVersion value);
    [NullableContextAttribute("1")]
public sealed virtual void Serialize(MessagePackWriter& writer, ObjectVersion value, MessagePackSerializerOptions options);
    [NullableContextAttribute("1")]
public sealed virtual ObjectVersion Deserialize(MessagePackReader& reader, MessagePackSerializerOptions options);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
[DataContractAttribute]
public class Microsoft.VisualStudio.RpcContracts.RemoteUI.RemoteCollectionChanges : object {
    [CompilerGeneratedAttribute]
private NotifyCollectionChangedAction <Action>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyCollection`1<MessagePackFragment> <NewItems>k__BackingField;
    [CompilerGeneratedAttribute]
private int <NewStartingIndex>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyCollection`1<MessagePackFragment> <OldItems>k__BackingField;
    [CompilerGeneratedAttribute]
private int <OldItemsCount>k__BackingField;
    [CompilerGeneratedAttribute]
private int <OldStartingIndex>k__BackingField;
    [DataMemberAttribute]
public NotifyCollectionChangedAction Action { get; private set; }
    [DataMemberAttribute]
public IReadOnlyCollection`1<MessagePackFragment> NewItems { get; private set; }
    [DataMemberAttribute]
public int NewStartingIndex { get; private set; }
    [DataMemberAttribute]
public IReadOnlyCollection`1<MessagePackFragment> OldItems { get; private set; }
    [DataMemberAttribute]
public int OldItemsCount { get; private set; }
    [DataMemberAttribute]
public int OldStartingIndex { get; private set; }
    private RemoteCollectionChanges(NotifyCollectionChangedAction action, IList`1<MessagePackFragment> newItems, int newStartingIndex, IList`1<MessagePackFragment> oldItems, int oldItemsCount, int oldStartingIndex);
    [CompilerGeneratedAttribute]
public NotifyCollectionChangedAction get_Action();
    [CompilerGeneratedAttribute]
private void set_Action(NotifyCollectionChangedAction value);
    [CompilerGeneratedAttribute]
public IReadOnlyCollection`1<MessagePackFragment> get_NewItems();
    [CompilerGeneratedAttribute]
private void set_NewItems(IReadOnlyCollection`1<MessagePackFragment> value);
    [CompilerGeneratedAttribute]
public int get_NewStartingIndex();
    [CompilerGeneratedAttribute]
private void set_NewStartingIndex(int value);
    [CompilerGeneratedAttribute]
public IReadOnlyCollection`1<MessagePackFragment> get_OldItems();
    [CompilerGeneratedAttribute]
private void set_OldItems(IReadOnlyCollection`1<MessagePackFragment> value);
    [CompilerGeneratedAttribute]
public int get_OldItemsCount();
    [CompilerGeneratedAttribute]
private void set_OldItemsCount(int value);
    [CompilerGeneratedAttribute]
public int get_OldStartingIndex();
    [CompilerGeneratedAttribute]
private void set_OldStartingIndex(int value);
    [NullableContextAttribute("1")]
public static RemoteCollectionChanges Replace(IList`1<MessagePackFragment> oldItems, IList`1<MessagePackFragment> newItems);
    [NullableContextAttribute("1")]
public static RemoteCollectionChanges Replace(int startingIndex, int replacedItemsCount, IList`1<MessagePackFragment> newItems);
    [NullableContextAttribute("1")]
public static RemoteCollectionChanges Add(IList`1<MessagePackFragment> newItems);
    [NullableContextAttribute("1")]
public static RemoteCollectionChanges Add(int startingIndex, IList`1<MessagePackFragment> newItems);
    [NullableContextAttribute("1")]
public static RemoteCollectionChanges Remove(IList`1<MessagePackFragment> oldItems);
    [NullableContextAttribute("1")]
public static RemoteCollectionChanges Remove(int startingIndex, int removedItemsCount);
    [NullableContextAttribute("1")]
public static RemoteCollectionChanges Move(int oldStartingIndex, int newStartingIndex, int movedItemsCount);
    [NullableContextAttribute("1")]
public static RemoteCollectionChanges Reset(IList`1<MessagePackFragment> currentItems);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[IsReadOnlyAttribute]
[DataContractAttribute]
public class Microsoft.VisualStudio.RpcContracts.RemoteUI.RemoteWpfUserControlDefinition : ValueType {
    [CompilerGeneratedAttribute]
private string <Xaml>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private IReadOnlyDictionary`2<string, string> <ResourcesXaml>k__BackingField;
    [DataMemberAttribute]
public string Xaml { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[DataMemberAttribute]
public IReadOnlyDictionary`2<string, string> ResourcesXaml { get; }
    public RemoteWpfUserControlDefinition(string xaml);
    [JsonConstructorAttribute]
public RemoteWpfUserControlDefinition(string xaml, IReadOnlyDictionary`2<string, string> resourcesXaml);
    [CompilerGeneratedAttribute]
public string get_Xaml();
    [CompilerGeneratedAttribute]
public IReadOnlyDictionary`2<string, string> get_ResourcesXaml();
}
[GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "17.0.0.0")]
[DebuggerNonUserCodeAttribute]
[CompilerGeneratedAttribute]
internal class Microsoft.VisualStudio.RpcContracts.Resources : object {
    private static ResourceManager resourceMan;
    private static CultureInfo resourceCulture;
    [EditorBrowsableAttribute("2")]
internal static ResourceManager ResourceManager { get; }
    [EditorBrowsableAttribute("2")]
internal static CultureInfo Culture { get; internal set; }
    internal static string Error_AbsoluteUriRequired { get; }
    internal static string Error_DirectoryMustHaveDirectoryAttribute { get; }
    internal static string Error_FileMustNotHaveDirectoryAttribute { get; }
    internal static string Error_FileUriRequired { get; }
    internal static string Error_MessagePackFragmentFormat { get; }
    internal static string Error_NonMatchingParameters { get; }
    internal static string Error_NonQualifiedName { get; }
    internal static string Error_NonValidFilterName { get; }
    internal static string Error_ObjectVersionFormat { get; }
    internal static string Error_RequiredFlagNotSet { get; }
    internal static string Error_ReservedErrorCode { get; }
    internal static string Error_UnspecifiedDateTimeKind { get; }
    internal static ResourceManager get_ResourceManager();
    internal static CultureInfo get_Culture();
    internal static void set_Culture(CultureInfo value);
    internal static string get_Error_AbsoluteUriRequired();
    internal static string get_Error_DirectoryMustHaveDirectoryAttribute();
    internal static string get_Error_FileMustNotHaveDirectoryAttribute();
    internal static string get_Error_FileUriRequired();
    internal static string get_Error_MessagePackFragmentFormat();
    internal static string get_Error_NonMatchingParameters();
    internal static string get_Error_NonQualifiedName();
    internal static string get_Error_NonValidFilterName();
    internal static string get_Error_ObjectVersionFormat();
    internal static string get_Error_RequiredFlagNotSet();
    internal static string get_Error_ReservedErrorCode();
    internal static string get_Error_UnspecifiedDateTimeKind();
}
[NullableContextAttribute("1")]
public interface Microsoft.VisualStudio.RpcContracts.Settings.ISettingsManager3 {
    [CompilerGeneratedAttribute]
public abstract virtual void add_SettingChanged(EventHandler`1<PropertyChangedEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_SettingChanged(EventHandler`1<PropertyChangedEventArgs> value);
    public abstract virtual ValueTask RequestChangeEventsAsync(string monikerPattern, CancellationToken cancellationToken);
    public abstract virtual ValueTask`1<IReadOnlyList`1<string>> GetSettingMonikersAsync(string monikerPrefix, int startIndex, int maxCount, CancellationToken cancellationToken);
    public abstract virtual ValueTask`1<IReadOnlyList`1<SettingInfo>> GetSettingInfosAsync(string monikerPrefix, int startIndex, int maxCount, CancellationToken cancellationToken);
    public abstract virtual ValueTask`1<SettingInfo> GetSettingInfoAsync(string moniker, CancellationToken cancellationToken);
    public abstract virtual ValueTask SetValueAsync(string moniker, object value, CancellationToken cancellationToken);
    public abstract virtual ValueTask`1<SettingRequestResult> GetValueAsync(string moniker, CancellationToken cancellationToken);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class Microsoft.VisualStudio.RpcContracts.Settings.SettingInfo : object {
    [NullableAttribute("1")]
[CompilerGeneratedAttribute]
private string <Moniker>k__BackingField;
    [CompilerGeneratedAttribute]
private string <LocalizedName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <LocalizedDescription>k__BackingField;
    [CompilerGeneratedAttribute]
private string <SearchKeywords>k__BackingField;
    [NullableAttribute("1")]
[CompilerGeneratedAttribute]
private JObject <JsonSchema>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsWritable>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsRemotable>k__BackingField;
    [NullableAttribute("1")]
public string Moniker { get; }
    public string LocalizedName { get; }
    public string LocalizedDescription { get; }
    public string SearchKeywords { get; }
    [NullableAttribute("1")]
public JObject JsonSchema { get; }
    public bool IsWritable { get; }
    public bool IsRemotable { get; }
    public SettingInfo(string moniker, string localizedName, string localizedDescription, string searchKeywords, JObject jsonSchema, bool isWritable, bool isRemotable);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public string get_Moniker();
    [CompilerGeneratedAttribute]
public string get_LocalizedName();
    [CompilerGeneratedAttribute]
public string get_LocalizedDescription();
    [CompilerGeneratedAttribute]
public string get_SearchKeywords();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public JObject get_JsonSchema();
    [CompilerGeneratedAttribute]
public bool get_IsWritable();
    [CompilerGeneratedAttribute]
public bool get_IsRemotable();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.VisualStudio.RpcContracts.Settings.SettingRequestResult : object {
    [NullableAttribute("2")]
private object value;
    [CompilerGeneratedAttribute]
private static SettingRequestResult <Failure>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Succeeded>k__BackingField;
    public static SettingRequestResult Failure { get; }
    public bool Succeeded { get; }
    public JToken Value { get; }
    [NullableContextAttribute("2")]
public SettingRequestResult(object value);
    [NullableContextAttribute("2")]
private SettingRequestResult(object value, bool succeeded);
    [JsonConstructorAttribute]
private SettingRequestResult(JToken value, bool succeeded);
    private static SettingRequestResult();
    [CompilerGeneratedAttribute]
public static SettingRequestResult get_Failure();
    [CompilerGeneratedAttribute]
public bool get_Succeeded();
    public JToken get_Value();
    [NullableContextAttribute("2")]
public T DeserializeValue();
    [NullableContextAttribute("2")]
private static bool TryDeserializeJToken(object candidate, T& result);
}
[NullableContextAttribute("1")]
public interface Microsoft.VisualStudio.RpcContracts.Setup.IMissingComponentRegistrationService {
    public abstract virtual Task RegisterMissingComponentsAsync(IReadOnlyDictionary`2<Guid, IReadOnlyCollection`1<string>> projectGuidToVSComponentIdsMap, CancellationToken cancellationToken);
}
[NullableContextAttribute("1")]
public interface Microsoft.VisualStudio.RpcContracts.SingleFileGenerators.ISingleFileGenerator {
    public abstract virtual Task GenerateCodeAsync(string filePath, string fileProject, CancellationToken cancellationToken);
}
[NullableContextAttribute("1")]
public interface Microsoft.VisualStudio.RpcContracts.Solution.ISolutionService {
    [CompilerGeneratedAttribute]
public abstract virtual void add_ProjectsLoaded(EventHandler`1<ProjectsLoadedEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_ProjectsLoaded(EventHandler`1<ProjectsLoadedEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_ProjectsUnloaded(EventHandler`1<ProjectsUnloadedEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_ProjectsUnloaded(EventHandler`1<ProjectsUnloadedEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_ProjectLoadProgressChanged(EventHandler`1<ProjectsLoadProgressEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_ProjectLoadProgressChanged(EventHandler`1<ProjectsLoadProgressEventArgs> value);
    [NullableContextAttribute("0")]
public abstract virtual ValueTask`1<bool> UnloadProjectsAsync(Guid[] projectIds, ProjectUnloadReason unloadReason, CancellationToken cancellationToken);
    [NullableContextAttribute("0")]
public abstract virtual ValueTask`1<bool> LoadProjectsAsync(Guid[] projectIds, CancellationToken cancellationToken);
    [NullableContextAttribute("0")]
public abstract virtual ValueTask`1<bool> RemoveProjectsAsync(IReadOnlyList`1<Guid> projectIds, CancellationToken cancellationToken);
    public abstract virtual ValueTask`1<Boolean[]> AreProjectsLoadedAsync(Guid[] projectIds, CancellationToken cancellationToken);
    public abstract virtual Task`1<IDisposable> SubscribeToOpenCodeContainersStateAsync(IObserver`1<OpenCodeContainersState> observer, CancellationToken cancellationToken);
    public abstract virtual Task`1<OpenCodeContainersState> GetOpenCodeContainersStateAsync(CancellationToken cancellationToken);
    public abstract virtual Task SaveSolutionFilterFileAsync(string filterFileDirectory, string filterFileName, CancellationToken cancellationToken);
    public abstract virtual Task CloseSolutionAndFolderAsync(CancellationToken cancellationToken);
    public abstract virtual Task RequestProjectEventsAsync(CancellationToken cancellationToken);
    public abstract virtual ValueTask`1<IReadOnlyList`1<string>> GetPropertyValuesAsync(IReadOnlyList`1<int> propertyIds, CancellationToken cancellationToken);
    public abstract virtual ValueTask`1<IReadOnlyList`1<string>> GetSolutionTelemetryContextPropertyValuesAsync(IReadOnlyList`1<string> propertyNames, CancellationToken cancellationToken);
    public abstract virtual ValueTask`1<ProjectLoadResult> LoadProjectsWithResultAsync(Guid[] projectIds, CancellationToken cancellationToken);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DataContractAttribute]
public class Microsoft.VisualStudio.RpcContracts.Solution.OpenCodeContainersState : object {
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private Uri <SolutionFilePath>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<Uri> <OpenFolderPaths>k__BackingField;
    [CompilerGeneratedAttribute]
private Type EqualityContract { get; }
    [NullableAttribute("2")]
[DataMemberAttribute]
public Uri SolutionFilePath { get; public set; }
    [DataMemberAttribute]
public IReadOnlyList`1<Uri> OpenFolderPaths { get; public set; }
    [CompilerGeneratedAttribute]
private OpenCodeContainersState(OpenCodeContainersState original);
    [CompilerGeneratedAttribute]
private Type get_EqualityContract();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public Uri get_SolutionFilePath();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_SolutionFilePath(Uri value);
    [CompilerGeneratedAttribute]
public IReadOnlyList`1<Uri> get_OpenFolderPaths();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_OpenFolderPaths(IReadOnlyList`1<Uri> value);
    public virtual int GetHashCode();
    [NullableContextAttribute("2")]
public sealed virtual bool Equals(OpenCodeContainersState other);
    [CompilerGeneratedAttribute]
public virtual string ToString();
    [CompilerGeneratedAttribute]
private bool PrintMembers(StringBuilder builder);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static bool op_Inequality(OpenCodeContainersState left, OpenCodeContainersState right);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static bool op_Equality(OpenCodeContainersState left, OpenCodeContainersState right);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual bool Equals(object obj);
    [CompilerGeneratedAttribute]
public OpenCodeContainersState <Clone>$();
}
[DataContractAttribute]
public class Microsoft.VisualStudio.RpcContracts.Solution.ProjectLoadResult : object {
    [CompilerGeneratedAttribute]
private LoadResults <LoadStatus>k__BackingField;
    [DataMemberAttribute]
public LoadResults LoadStatus { get; public set; }
    [CompilerGeneratedAttribute]
public LoadResults get_LoadStatus();
    [CompilerGeneratedAttribute]
public void set_LoadStatus(LoadResults value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DataContractAttribute]
public class Microsoft.VisualStudio.RpcContracts.Solution.ProjectsLoadedEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<Guid> <ProjectIds>k__BackingField;
    [DataMemberAttribute]
public IReadOnlyList`1<Guid> ProjectIds { get; }
    public ProjectsLoadedEventArgs(IReadOnlyList`1<Guid> projectIds);
    [CompilerGeneratedAttribute]
public IReadOnlyList`1<Guid> get_ProjectIds();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DataContractAttribute]
public class Microsoft.VisualStudio.RpcContracts.Solution.ProjectsLoadProgressEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
private string <CurrentProjectDisplayName>k__BackingField;
    [CompilerGeneratedAttribute]
private int <ProjectsLoaded>k__BackingField;
    [CompilerGeneratedAttribute]
private int <TotalProjects>k__BackingField;
    [DataMemberAttribute]
public string CurrentProjectDisplayName { get; }
    [DataMemberAttribute]
public int ProjectsLoaded { get; }
    [DataMemberAttribute]
public int TotalProjects { get; }
    public ProjectsLoadProgressEventArgs(string currentProjectDisplayName, int projectsLoaded, int totalProjects);
    [CompilerGeneratedAttribute]
public string get_CurrentProjectDisplayName();
    [CompilerGeneratedAttribute]
public int get_ProjectsLoaded();
    [CompilerGeneratedAttribute]
public int get_TotalProjects();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DataContractAttribute]
public class Microsoft.VisualStudio.RpcContracts.Solution.ProjectsUnloadedEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<Guid> <ProjectIds>k__BackingField;
    [DataMemberAttribute]
public IReadOnlyList`1<Guid> ProjectIds { get; }
    public ProjectsUnloadedEventArgs(IReadOnlyList`1<Guid> projectIds);
    [CompilerGeneratedAttribute]
public IReadOnlyList`1<Guid> get_ProjectIds();
}
public enum Microsoft.VisualStudio.RpcContracts.Solution.ProjectUnloadReason : Enum {
    public int value__;
    public static ProjectUnloadReason Unknown;
    public static ProjectUnloadReason UnloadedByUser;
    public static ProjectUnloadReason LoadPendingIfNeeded;
    public static ProjectUnloadReason UpgradeFailed;
    public static ProjectUnloadReason NeedRetarget;
    public static ProjectUnloadReason NeedComponents;
    public static ProjectUnloadReason ProjectIncompatible;
}
[NullableContextAttribute("1")]
public interface Microsoft.VisualStudio.RpcContracts.ToolWindows.IToolWindowManager {
    public abstract virtual Task ShowAsync(string identifier, bool activate, CancellationToken cancellationToken);
    public abstract virtual Task HideAsync(string identifier, CancellationToken cancellationToken);
}
[NullableContextAttribute("1")]
public interface Microsoft.VisualStudio.RpcContracts.ToolWindows.IToolWindowProvider {
    public abstract virtual Task`1<IRemoteUserControl> CreateToolWindowAsync(string identifier, CancellationToken cancellationToken);
    public abstract virtual Task`1<string> GetTitleAsync(string identifier, CancellationToken cancellationToken);
    public abstract virtual Task OnShowAsync(string identifier, CancellationToken cancellationToken);
    public abstract virtual Task OnHideAsync(string identifier, CancellationToken cancellationToken);
    public abstract virtual Task`1<IDisposable> SubscribeAsync(IObserver`1<ToolWindowPropertyChangedArgs> observer, CancellationToken cancellationToken);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DataContractAttribute]
public class Microsoft.VisualStudio.RpcContracts.ToolWindows.ToolWindowPropertyChangedArgs : object {
    [CompilerGeneratedAttribute]
private string <Identifier>k__BackingField;
    [CompilerGeneratedAttribute]
private string <PropertyName>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private object <NewValue>k__BackingField;
    [DataMemberAttribute]
public string Identifier { get; }
    [DataMemberAttribute]
public string PropertyName { get; }
    [NullableAttribute("2")]
[DataMemberAttribute]
public object NewValue { get; }
    public ToolWindowPropertyChangedArgs(string identifier, string propertyName, object newValue);
    [CompilerGeneratedAttribute]
public string get_Identifier();
    [CompilerGeneratedAttribute]
public string get_PropertyName();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public object get_NewValue();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[MessagePackObjectAttribute("False")]
public class Microsoft.VisualStudio.RpcContracts.UnifiedSettings.ChangeResult : object {
    [CompilerGeneratedAttribute]
private ChangeResultCode <ResultCode>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Moniker>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <CommitWillChangeEffectiveValue>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private string <Message>k__BackingField;
    [CompilerGeneratedAttribute]
protected Type EqualityContract { get; }
    [KeyAttribute("0")]
public ChangeResultCode ResultCode { get; public set; }
    [KeyAttribute("1")]
public string Moniker { get; public set; }
    [KeyAttribute("2")]
public bool CommitWillChangeEffectiveValue { get; public set; }
    [NullableAttribute("2")]
[KeyAttribute("3")]
public string Message { get; public set; }
    [IgnoreMemberAttribute]
public bool IsSuccess { get; }
    public ChangeResult(ChangeResultCode ResultCode, string Moniker, bool CommitWillChangeEffectiveValue, string Message);
    [CompilerGeneratedAttribute]
protected ChangeResult(ChangeResult original);
    [CompilerGeneratedAttribute]
protected virtual Type get_EqualityContract();
    [CompilerGeneratedAttribute]
public ChangeResultCode get_ResultCode();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_ResultCode(ChangeResultCode value);
    [CompilerGeneratedAttribute]
public string get_Moniker();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_Moniker(string value);
    [CompilerGeneratedAttribute]
public bool get_CommitWillChangeEffectiveValue();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_CommitWillChangeEffectiveValue(bool value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public string get_Message();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_Message(string value);
    public bool get_IsSuccess();
    [CompilerGeneratedAttribute]
public virtual string ToString();
    [CompilerGeneratedAttribute]
protected virtual bool PrintMembers(StringBuilder builder);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static bool op_Inequality(ChangeResult left, ChangeResult right);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static bool op_Equality(ChangeResult left, ChangeResult right);
    [CompilerGeneratedAttribute]
public virtual int GetHashCode();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual bool Equals(object obj);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual bool Equals(ChangeResult other);
    [CompilerGeneratedAttribute]
public virtual ChangeResult <Clone>$();
    [CompilerGeneratedAttribute]
public void Deconstruct(ChangeResultCode& ResultCode, String& Moniker, Boolean& CommitWillChangeEffectiveValue, String& Message);
}
public enum Microsoft.VisualStudio.RpcContracts.UnifiedSettings.ChangeResultCode : Enum {
    public int value__;
    public static ChangeResultCode PendingCommit;
    public static ChangeResultCode PendingCommitWithoutValidation;
    public static ChangeResultCode Denied;
    public static ChangeResultCode InvalidValue;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[MessagePackObjectAttribute("False")]
public class Microsoft.VisualStudio.RpcContracts.UnifiedSettings.ChangeSource : object {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private Guid <Id>k__BackingField;
    [CompilerGeneratedAttribute]
protected Type EqualityContract { get; }
    [KeyAttribute("0")]
public string Name { get; public set; }
    [KeyAttribute("1")]
public Guid Id { get; public set; }
    public ChangeSource(string Name, Guid Id);
    [CompilerGeneratedAttribute]
protected ChangeSource(ChangeSource original);
    [CompilerGeneratedAttribute]
protected virtual Type get_EqualityContract();
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_Name(string value);
    [CompilerGeneratedAttribute]
public Guid get_Id();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_Id(Guid value);
    [CompilerGeneratedAttribute]
public virtual string ToString();
    [CompilerGeneratedAttribute]
protected virtual bool PrintMembers(StringBuilder builder);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static bool op_Inequality(ChangeSource left, ChangeSource right);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static bool op_Equality(ChangeSource left, ChangeSource right);
    [CompilerGeneratedAttribute]
public virtual int GetHashCode();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual bool Equals(object obj);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual bool Equals(ChangeSource other);
    [CompilerGeneratedAttribute]
public virtual ChangeSource <Clone>$();
    [CompilerGeneratedAttribute]
public void Deconstruct(String& Name, Guid& Id);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[MessagePackObjectAttribute("False")]
public class Microsoft.VisualStudio.RpcContracts.UnifiedSettings.CommitResult : object {
    [CompilerGeneratedAttribute]
private CommitResultCode <ResultCode>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyCollection`1<ChangeResult> <ChangeResults>k__BackingField;
    [CompilerGeneratedAttribute]
protected Type EqualityContract { get; }
    [KeyAttribute("0")]
public CommitResultCode ResultCode { get; public set; }
    [KeyAttribute("1")]
public IReadOnlyCollection`1<ChangeResult> ChangeResults { get; public set; }
    [IgnoreMemberAttribute]
public bool IsSuccess { get; }
    public CommitResult(CommitResultCode ResultCode, IReadOnlyCollection`1<ChangeResult> ChangeResults);
    [CompilerGeneratedAttribute]
protected CommitResult(CommitResult original);
    [CompilerGeneratedAttribute]
protected virtual Type get_EqualityContract();
    [CompilerGeneratedAttribute]
public CommitResultCode get_ResultCode();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_ResultCode(CommitResultCode value);
    [CompilerGeneratedAttribute]
public IReadOnlyCollection`1<ChangeResult> get_ChangeResults();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_ChangeResults(IReadOnlyCollection`1<ChangeResult> value);
    public bool get_IsSuccess();
    public static CommitResult Success(IReadOnlyCollection`1<ChangeResult> changeResults);
    public static CommitResult ChangeError(IReadOnlyCollection`1<ChangeResult> changeResults);
    public static CommitResult PendingApproval(IReadOnlyCollection`1<ChangeResult> changeResults);
    [CompilerGeneratedAttribute]
public virtual string ToString();
    [CompilerGeneratedAttribute]
protected virtual bool PrintMembers(StringBuilder builder);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static bool op_Inequality(CommitResult left, CommitResult right);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static bool op_Equality(CommitResult left, CommitResult right);
    [CompilerGeneratedAttribute]
public virtual int GetHashCode();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual bool Equals(object obj);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual bool Equals(CommitResult other);
    [CompilerGeneratedAttribute]
public virtual CommitResult <Clone>$();
    [CompilerGeneratedAttribute]
public void Deconstruct(CommitResultCode& ResultCode, IReadOnlyCollection`1& ChangeResults);
}
public enum Microsoft.VisualStudio.RpcContracts.UnifiedSettings.CommitResultCode : Enum {
    public int value__;
    public static CommitResultCode ChangeError;
    public static CommitResultCode Success;
    public static CommitResultCode PendingApproval;
}
[NullableContextAttribute("1")]
public interface Microsoft.VisualStudio.RpcContracts.UnifiedSettings.IUnifiedSettingsService {
    public abstract virtual ValueTask`1<IDisposable> SubscribeAsync(IObserver`1<SettingsUpdate> observer, IReadOnlyCollection`1<string> monikerPatterns, ReadOptions options, CancellationToken cancellationToken);
    public abstract virtual ValueTask`1<CommitResult> RequestCommitAsync(ChangeSource source, SettingsCommit change, CancellationToken cancellationToken);
    public abstract virtual ValueTask`1<ReadResult> GetValueAsync(string moniker, ReadOptions options, CancellationToken cancellationToken);
    public abstract virtual ValueTask`1<IReadOnlyCollection`1<ReadResult>> GetValuesAsync(IReadOnlyCollection`1<string> monikerPatterns, ReadOptions options, CancellationToken cancellationToken);
}
[FlagsAttribute]
public enum Microsoft.VisualStudio.RpcContracts.UnifiedSettings.ReadOptions : Enum {
    public int value__;
    public static ReadOptions NoRequirements;
    public static ReadOptions RequireRegistration;
    public static ReadOptions RequireValidation;
    public static ReadOptions NoFallbackToDefault;
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
[MessagePackObjectAttribute("False")]
public class Microsoft.VisualStudio.RpcContracts.UnifiedSettings.ReadResult : object {
    [CompilerGeneratedAttribute]
private ReadResultCode <ResultCode>k__BackingField;
    [NullableAttribute("1")]
[CompilerGeneratedAttribute]
private string <Moniker>k__BackingField;
    [CompilerGeneratedAttribute]
private SettingValue <Value>k__BackingField;
    [CompilerGeneratedAttribute]
private SettingValueMetaData <MetaData>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ValidationErrorMessage>k__BackingField;
    [NullableAttribute("1")]
[CompilerGeneratedAttribute]
protected Type EqualityContract { get; }
    [KeyAttribute("0")]
public ReadResultCode ResultCode { get; public set; }
    [NullableAttribute("1")]
[KeyAttribute("1")]
public string Moniker { get; public set; }
    [KeyAttribute("2")]
public SettingValue Value { get; public set; }
    [KeyAttribute("3")]
public SettingValueMetaData MetaData { get; public set; }
    [KeyAttribute("4")]
public string ValidationErrorMessage { get; public set; }
    [IgnoreMemberAttribute]
public bool IsSuccess { get; }
    public ReadResult(ReadResultCode ResultCode, string Moniker, SettingValue Value, SettingValueMetaData MetaData, string ValidationErrorMessage);
    [CompilerGeneratedAttribute]
protected ReadResult(ReadResult original);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
protected virtual Type get_EqualityContract();
    [CompilerGeneratedAttribute]
public ReadResultCode get_ResultCode();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_ResultCode(ReadResultCode value);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public string get_Moniker();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_Moniker(string value);
    [CompilerGeneratedAttribute]
public SettingValue get_Value();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_Value(SettingValue value);
    [CompilerGeneratedAttribute]
public SettingValueMetaData get_MetaData();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_MetaData(SettingValueMetaData value);
    [CompilerGeneratedAttribute]
public string get_ValidationErrorMessage();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_ValidationErrorMessage(string value);
    public bool get_IsSuccess();
    [NullableContextAttribute("1")]
public static ReadResult Success(string moniker, SettingValue settingValue, SettingValueMetaData metaData);
    [NullableContextAttribute("1")]
public static ReadResult FailedValidation(string moniker, string validationErrorMessage);
    [NullableContextAttribute("1")]
public static ReadResult NotRegistered(string moniker);
    [NullableContextAttribute("1")]
public static ReadResult NotPersisted(string moniker);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public virtual string ToString();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
protected virtual bool PrintMembers(StringBuilder builder);
    [CompilerGeneratedAttribute]
public static bool op_Inequality(ReadResult left, ReadResult right);
    [CompilerGeneratedAttribute]
public static bool op_Equality(ReadResult left, ReadResult right);
    [CompilerGeneratedAttribute]
public virtual int GetHashCode();
    [CompilerGeneratedAttribute]
public virtual bool Equals(object obj);
    [CompilerGeneratedAttribute]
public virtual bool Equals(ReadResult other);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public virtual ReadResult <Clone>$();
    [CompilerGeneratedAttribute]
public void Deconstruct(ReadResultCode& ResultCode, String& Moniker, SettingValue& Value, SettingValueMetaData& MetaData, String& ValidationErrorMessage);
}
public enum Microsoft.VisualStudio.RpcContracts.UnifiedSettings.ReadResultCode : Enum {
    public int value__;
    public static ReadResultCode Success;
    public static ReadResultCode FailedValidation;
    public static ReadResultCode NotRegistered;
    public static ReadResultCode NotPersisted;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[MessagePackObjectAttribute("False")]
public class Microsoft.VisualStudio.RpcContracts.UnifiedSettings.SettingsCommit : object {
    [CompilerGeneratedAttribute]
private IReadOnlyDictionary`2<string, string> <Values>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Description>k__BackingField;
    [CompilerGeneratedAttribute]
protected Type EqualityContract { get; }
    [KeyAttribute("0")]
public IReadOnlyDictionary`2<string, string> Values { get; public set; }
    [KeyAttribute("1")]
public string Description { get; public set; }
    public SettingsCommit(IReadOnlyDictionary`2<string, string> Values, string Description);
    [CompilerGeneratedAttribute]
protected SettingsCommit(SettingsCommit original);
    [CompilerGeneratedAttribute]
protected virtual Type get_EqualityContract();
    [CompilerGeneratedAttribute]
public IReadOnlyDictionary`2<string, string> get_Values();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_Values(IReadOnlyDictionary`2<string, string> value);
    [CompilerGeneratedAttribute]
public string get_Description();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_Description(string value);
    [CompilerGeneratedAttribute]
public virtual string ToString();
    [CompilerGeneratedAttribute]
protected virtual bool PrintMembers(StringBuilder builder);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static bool op_Inequality(SettingsCommit left, SettingsCommit right);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static bool op_Equality(SettingsCommit left, SettingsCommit right);
    [CompilerGeneratedAttribute]
public virtual int GetHashCode();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual bool Equals(object obj);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual bool Equals(SettingsCommit other);
    [CompilerGeneratedAttribute]
public virtual SettingsCommit <Clone>$();
    [CompilerGeneratedAttribute]
public void Deconstruct(IReadOnlyDictionary`2& Values, String& Description);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[MessagePackObjectAttribute("False")]
public class Microsoft.VisualStudio.RpcContracts.UnifiedSettings.SettingsUpdate : object {
    [CompilerGeneratedAttribute]
private IReadOnlyCollection`1<ReadResult> <Values>k__BackingField;
    [CompilerGeneratedAttribute]
private ReadOptions <ReadOptions>k__BackingField;
    [CompilerGeneratedAttribute]
protected Type EqualityContract { get; }
    [KeyAttribute("0")]
public IReadOnlyCollection`1<ReadResult> Values { get; public set; }
    [KeyAttribute("1")]
public ReadOptions ReadOptions { get; public set; }
    public SettingsUpdate(IReadOnlyCollection`1<ReadResult> Values, ReadOptions ReadOptions);
    [CompilerGeneratedAttribute]
protected SettingsUpdate(SettingsUpdate original);
    [CompilerGeneratedAttribute]
protected virtual Type get_EqualityContract();
    [CompilerGeneratedAttribute]
public IReadOnlyCollection`1<ReadResult> get_Values();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_Values(IReadOnlyCollection`1<ReadResult> value);
    [CompilerGeneratedAttribute]
public ReadOptions get_ReadOptions();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_ReadOptions(ReadOptions value);
    [CompilerGeneratedAttribute]
public virtual string ToString();
    [CompilerGeneratedAttribute]
protected virtual bool PrintMembers(StringBuilder builder);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static bool op_Inequality(SettingsUpdate left, SettingsUpdate right);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static bool op_Equality(SettingsUpdate left, SettingsUpdate right);
    [CompilerGeneratedAttribute]
public virtual int GetHashCode();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual bool Equals(object obj);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual bool Equals(SettingsUpdate other);
    [CompilerGeneratedAttribute]
public virtual SettingsUpdate <Clone>$();
    [CompilerGeneratedAttribute]
public void Deconstruct(IReadOnlyCollection`1& Values, ReadOptions& ReadOptions);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[MessagePackObjectAttribute("False")]
public class Microsoft.VisualStudio.RpcContracts.UnifiedSettings.SettingValue : object {
    [CompilerGeneratedAttribute]
private SettingValueType <ValueType>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Data>k__BackingField;
    [CompilerGeneratedAttribute]
protected Type EqualityContract { get; }
    [KeyAttribute("0")]
public SettingValueType ValueType { get; public set; }
    [KeyAttribute("1")]
public string Data { get; public set; }
    public SettingValue(SettingValueType ValueType, string Data);
    [CompilerGeneratedAttribute]
protected SettingValue(SettingValue original);
    [CompilerGeneratedAttribute]
protected virtual Type get_EqualityContract();
    [CompilerGeneratedAttribute]
public SettingValueType get_ValueType();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_ValueType(SettingValueType value);
    [CompilerGeneratedAttribute]
public string get_Data();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_Data(string value);
    [CompilerGeneratedAttribute]
public virtual string ToString();
    [CompilerGeneratedAttribute]
protected virtual bool PrintMembers(StringBuilder builder);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static bool op_Inequality(SettingValue left, SettingValue right);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static bool op_Equality(SettingValue left, SettingValue right);
    [CompilerGeneratedAttribute]
public virtual int GetHashCode();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual bool Equals(object obj);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual bool Equals(SettingValue other);
    [CompilerGeneratedAttribute]
public virtual SettingValue <Clone>$();
    [CompilerGeneratedAttribute]
public void Deconstruct(SettingValueType& ValueType, String& Data);
}
[IsReadOnlyAttribute]
[MessagePackObjectAttribute("False")]
public class Microsoft.VisualStudio.RpcContracts.UnifiedSettings.SettingValueMetaData : ValueType {
    [CompilerGeneratedAttribute]
private Guid <ChangeSource>k__BackingField;
    [KeyAttribute("0")]
public Guid ChangeSource { get; public set; }
    public SettingValueMetaData(Guid ChangeSource);
    [CompilerGeneratedAttribute]
public Guid get_ChangeSource();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_ChangeSource(Guid value);
    [CompilerGeneratedAttribute]
public virtual string ToString();
    [CompilerGeneratedAttribute]
private bool PrintMembers(StringBuilder builder);
    [CompilerGeneratedAttribute]
public static bool op_Inequality(SettingValueMetaData left, SettingValueMetaData right);
    [CompilerGeneratedAttribute]
public static bool op_Equality(SettingValueMetaData left, SettingValueMetaData right);
    [CompilerGeneratedAttribute]
public virtual int GetHashCode();
    [CompilerGeneratedAttribute]
public virtual bool Equals(object obj);
    [CompilerGeneratedAttribute]
public sealed virtual bool Equals(SettingValueMetaData other);
    [CompilerGeneratedAttribute]
public void Deconstruct(Guid& ChangeSource);
}
public enum Microsoft.VisualStudio.RpcContracts.UnifiedSettings.SettingValueType : Enum {
    public int value__;
    public static SettingValueType None;
    public static SettingValueType String;
    public static SettingValueType Boolean;
    public static SettingValueType Number;
    public static SettingValueType Integer;
    public static SettingValueType ObjectArray;
    public static SettingValueType StringArray;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class Microsoft.VisualStudio.RpcContracts.Utilities.ByValue : object {
    internal static bool Equal(IReadOnlyDictionary`2<TKey, TValue> left, IReadOnlyDictionary`2<TKey, TValue> right);
    internal static int GetHashCode(IReadOnlyDictionary`2<TKey, TValue> value);
    [NullableContextAttribute("0")]
internal static bool Equal(ReadOnlySpan`1<byte> left, ReadOnlySpan`1<byte> right);
}
internal class Microsoft.VisualStudio.RpcContracts.Utilities.CultureInfoFormatter : object {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal static IMessagePackFormatter`1<CultureInfo> Instance;
    private static CultureInfoFormatter();
    [NullableContextAttribute("1")]
public sealed virtual CultureInfo Deserialize(MessagePackReader& reader, MessagePackSerializerOptions options);
    [NullableContextAttribute("1")]
public sealed virtual void Serialize(MessagePackWriter& writer, CultureInfo value, MessagePackSerializerOptions options);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal class Microsoft.VisualStudio.RpcContracts.Utilities.EncodingConverter : JsonConverter`1<Encoding> {
    public virtual Encoding ReadJson(JsonReader reader, Type objectType, Encoding existingValue, bool hasExistingValue, JsonSerializer serializer);
    public virtual void WriteJson(JsonWriter writer, Encoding value, JsonSerializer serializer);
}
internal class Microsoft.VisualStudio.RpcContracts.Utilities.EncodingFormatter : object {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal static IMessagePackFormatter`1<Encoding> Instance;
    private static EncodingFormatter();
    [NullableContextAttribute("1")]
public sealed virtual void Serialize(MessagePackWriter& writer, Encoding value, MessagePackSerializerOptions options);
    [NullableContextAttribute("1")]
public sealed virtual Encoding Deserialize(MessagePackReader& reader, MessagePackSerializerOptions options);
}
[FlagsAttribute]
public enum Microsoft.VisualStudio.RpcContracts.Utilities.EnsureRangeVisibleOptions : Enum {
    public int value__;
    public static EnsureRangeVisibleOptions ShowStart;
    public static EnsureRangeVisibleOptions MinimumScroll;
    public static EnsureRangeVisibleOptions AlwaysCenter;
    public static EnsureRangeVisibleOptions None;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.VisualStudio.RpcContracts.Utilities.EventArgsFormatter : object {
    internal static IMessagePackFormatter`1<EventArgs> Instance;
    private static EventArgsFormatter();
    public sealed virtual void Serialize(MessagePackWriter& writer, EventArgs value, MessagePackSerializerOptions options);
    public sealed virtual EventArgs Deserialize(MessagePackReader& reader, MessagePackSerializerOptions options);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
[DataContractAttribute]
public class Microsoft.VisualStudio.RpcContracts.Utilities.ProjectIdentifier : ValueType {
    [NullableAttribute("1")]
[CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Context>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Identifier>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsContextActive>k__BackingField;
    [NullableAttribute("1")]
[DataMemberAttribute]
public string Name { get; public set; }
    [DataMemberAttribute]
public string Context { get; public set; }
    [DataMemberAttribute]
public string Identifier { get; public set; }
    [DataMemberAttribute]
public bool IsContextActive { get; public set; }
    [NullableAttribute("1")]
public string DisplayName { get; }
    public ProjectIdentifier(string name, string context, string identifier);
    [IsReadOnlyAttribute]
[NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public string get_Name();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_Name(string value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public string get_Context();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_Context(string value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public string get_Identifier();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_Identifier(string value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public bool get_IsContextActive();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_IsContextActive(bool value);
    [NullableContextAttribute("1")]
public string get_DisplayName();
    public static bool op_Equality(ProjectIdentifier left, ProjectIdentifier right);
    public static bool op_Inequality(ProjectIdentifier left, ProjectIdentifier right);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public sealed virtual bool Equals(ProjectIdentifier other);
}
[DataContractAttribute]
public class Microsoft.VisualStudio.RpcContracts.Utilities.Range : ValueType {
    public static Range Unknown;
    [CompilerGeneratedAttribute]
private int <StartLine>k__BackingField;
    [CompilerGeneratedAttribute]
private int <StartColumn>k__BackingField;
    [CompilerGeneratedAttribute]
private int <EndLine>k__BackingField;
    [CompilerGeneratedAttribute]
private int <EndColumn>k__BackingField;
    [DataMemberAttribute]
public int StartLine { get; }
    [DataMemberAttribute]
public int StartColumn { get; }
    [DataMemberAttribute]
public int EndLine { get; }
    [DataMemberAttribute]
public int EndColumn { get; }
    public Range(int startLine, int startColumn, int endLine, int endColumn);
    private static Range();
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public int get_StartLine();
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public int get_StartColumn();
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public int get_EndLine();
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public int get_EndColumn();
    public static bool op_Equality(Range left, Range right);
    public static bool op_LessThan(Range left, Range right);
    public static bool op_LessThanOrEqual(Range left, Range right);
    public static bool op_GreaterThan(Range left, Range right);
    public static bool op_GreaterThanOrEqual(Range left, Range right);
    public static bool op_Inequality(Range left, Range right);
    [NullableContextAttribute("2")]
public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public sealed virtual bool Equals(Range other);
    public sealed virtual int CompareTo(Range other);
    [NullableContextAttribute("1")]
public virtual string ToString();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.VisualStudio.RpcContracts.Utilities.ServiceJsonRpcDescriptorWithCommonConverters : ServiceJsonRpcDescriptor {
    private static Lazy`1<object> MessagePackOptions;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private CreateJsonRpcDelegate <CreateJsonRpcHook>k__BackingField;
    [NullableAttribute("2")]
public CreateJsonRpcDelegate CreateJsonRpcHook { get; public set; }
    internal ServiceJsonRpcDescriptorWithCommonConverters(ServiceMoniker serviceMoniker, Type clientInterface, Formatters formatter, MessageDelimiters messageDelimiter, Options multiplexingOptions);
    internal ServiceJsonRpcDescriptorWithCommonConverters(ServiceMoniker serviceMoniker, Formatters formatter, MessageDelimiters messageDelimiter);
    internal ServiceJsonRpcDescriptorWithCommonConverters(ServiceMoniker serviceMoniker, Type clientInterface, Formatters formatter, MessageDelimiters messageDelimiter);
    protected ServiceJsonRpcDescriptorWithCommonConverters(ServiceJsonRpcDescriptorWithCommonConverters copyFrom);
    private static ServiceJsonRpcDescriptorWithCommonConverters();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public sealed virtual CreateJsonRpcDelegate get_CreateJsonRpcHook();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public sealed virtual Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_CreateJsonRpcHook(CreateJsonRpcDelegate value);
    public sealed virtual ServiceJsonRpcDescriptor WithCreateJsonRpcHook(CreateJsonRpcDelegate createJsonRpcDelegate);
    protected virtual ServiceRpcDescriptor Clone();
    protected virtual IJsonRpcMessageFormatter CreateFormatter();
    protected virtual JsonRpc CreateJsonRpc(IJsonRpcMessageHandler handler);
    private static void ConfigureJsonFormatter(JsonMessageFormatter jsonFormatter);
    private static void ConfigureMessagePackFormatter(MessagePackFormatter msgpackFormatter);
    private static object CreateMessagePackSerializerOptions();
}
[NullableContextAttribute("1")]
public interface Microsoft.VisualStudio.RpcContracts.VersionInfoService.IVersionInfoService {
    public abstract virtual Task`1<VersionInformation> GetVersionInformationAsync(CancellationToken cancellationToken);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class Microsoft.VisualStudio.RpcContracts.VersionInfoService.VersionInformation : object {
    [NullableAttribute("1")]
[CompilerGeneratedAttribute]
private string <VisualStudioVersion>k__BackingField;
    [CompilerGeneratedAttribute]
private Version <VisualStudioComparableVersion>k__BackingField;
    [CompilerGeneratedAttribute]
private string <LiveShareVersion>k__BackingField;
    [NullableAttribute("1")]
public string VisualStudioVersion { get; }
    public Version VisualStudioComparableVersion { get; }
    public string LiveShareVersion { get; }
    [NullableContextAttribute("1")]
public VersionInformation(string visualStudioVersion, string liveShareVersion);
    [JsonConstructorAttribute]
public VersionInformation(string visualStudioVersion, Version visualStudioComparableVersion, string liveShareVersion);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public string get_VisualStudioVersion();
    [CompilerGeneratedAttribute]
public Version get_VisualStudioComparableVersion();
    [CompilerGeneratedAttribute]
public string get_LiveShareVersion();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public static class Microsoft.VisualStudio.RpcContracts.WellKnownProtectedOperations : object {
    public static string WriteFileAccess;
    public static string RunTask;
    public static string LaunchDebug;
    public static string ClientIsOwner;
    public static ProtectedOperation CreateWriteFileAccess();
    public static ProtectedOperation CreateRunTask();
    public static ProtectedOperation CreateLaunchDebug();
    public static ProtectedOperation CreateClientIsOwner();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public static class Microsoft.VisualStudio.VisualStudioServices : object {
    [CompilerGeneratedAttribute]
private static VS2019_10Services <VS2019_10>k__BackingField;
    [CompilerGeneratedAttribute]
private static VS2019_11Services <VS2019_11>k__BackingField;
    [CompilerGeneratedAttribute]
private static VS2019_4Services <VS2019_4>k__BackingField;
    [CompilerGeneratedAttribute]
private static VS2019_5Services <VS2019_5>k__BackingField;
    [CompilerGeneratedAttribute]
private static VS2019_6Services <VS2019_6>k__BackingField;
    [CompilerGeneratedAttribute]
private static VS2019_7Services <VS2019_7>k__BackingField;
    [CompilerGeneratedAttribute]
private static VS2019_8Services <VS2019_8>k__BackingField;
    [CompilerGeneratedAttribute]
private static VS2019_9Services <VS2019_9>k__BackingField;
    [CompilerGeneratedAttribute]
private static VS2022Services <VS2022>k__BackingField;
    [CompilerGeneratedAttribute]
private static VS2022_10Services <VS2022_10>k__BackingField;
    [CompilerGeneratedAttribute]
private static VS2022_11Services <VS2022_11>k__BackingField;
    [CompilerGeneratedAttribute]
private static VS2022_2Services <VS2022_2>k__BackingField;
    [CompilerGeneratedAttribute]
private static VS2022_3Services <VS2022_3>k__BackingField;
    [CompilerGeneratedAttribute]
private static VS2022_4Services <VS2022_4>k__BackingField;
    [CompilerGeneratedAttribute]
private static VS2022_5Services <VS2022_5>k__BackingField;
    [CompilerGeneratedAttribute]
private static VS2022_6Services <VS2022_6>k__BackingField;
    public static VS2019_10Services VS2019_10 { get; }
    public static VS2019_11Services VS2019_11 { get; }
    public static VS2019_4Services VS2019_4 { get; }
    public static VS2019_5Services VS2019_5 { get; }
    public static VS2019_6Services VS2019_6 { get; }
    public static VS2019_7Services VS2019_7 { get; }
    public static VS2019_8Services VS2019_8 { get; }
    public static VS2019_9Services VS2019_9 { get; }
    public static VS2022Services VS2022 { get; }
    public static VS2022_10Services VS2022_10 { get; }
    public static VS2022_11Services VS2022_11 { get; }
    public static VS2022_2Services VS2022_2 { get; }
    public static VS2022_3Services VS2022_3 { get; }
    public static VS2022_4Services VS2022_4 { get; }
    public static VS2022_5Services VS2022_5 { get; }
    public static VS2022_6Services VS2022_6 { get; }
    private static VisualStudioServices();
    [CompilerGeneratedAttribute]
public static VS2019_10Services get_VS2019_10();
    [CompilerGeneratedAttribute]
public static VS2019_11Services get_VS2019_11();
    [CompilerGeneratedAttribute]
public static VS2019_4Services get_VS2019_4();
    [CompilerGeneratedAttribute]
public static VS2019_5Services get_VS2019_5();
    [CompilerGeneratedAttribute]
public static VS2019_6Services get_VS2019_6();
    [CompilerGeneratedAttribute]
public static VS2019_7Services get_VS2019_7();
    [CompilerGeneratedAttribute]
public static VS2019_8Services get_VS2019_8();
    [CompilerGeneratedAttribute]
public static VS2019_9Services get_VS2019_9();
    [CompilerGeneratedAttribute]
public static VS2022Services get_VS2022();
    [CompilerGeneratedAttribute]
public static VS2022_10Services get_VS2022_10();
    [CompilerGeneratedAttribute]
public static VS2022_11Services get_VS2022_11();
    [CompilerGeneratedAttribute]
public static VS2022_2Services get_VS2022_2();
    [CompilerGeneratedAttribute]
public static VS2022_3Services get_VS2022_3();
    [CompilerGeneratedAttribute]
public static VS2022_4Services get_VS2022_4();
    [CompilerGeneratedAttribute]
public static VS2022_5Services get_VS2022_5();
    [CompilerGeneratedAttribute]
public static VS2022_6Services get_VS2022_6();
}
[AttributeUsageAttribute("2432")]
[ExcludeFromCodeCoverageAttribute]
[DebuggerNonUserCodeAttribute]
internal class System.Diagnostics.CodeAnalysis.AllowNullAttribute : Attribute {
}
[AttributeUsageAttribute("2432")]
[ExcludeFromCodeCoverageAttribute]
[DebuggerNonUserCodeAttribute]
internal class System.Diagnostics.CodeAnalysis.DisallowNullAttribute : Attribute {
}
[AttributeUsageAttribute("64")]
[ExcludeFromCodeCoverageAttribute]
[DebuggerNonUserCodeAttribute]
internal class System.Diagnostics.CodeAnalysis.DoesNotReturnAttribute : Attribute {
}
[AttributeUsageAttribute("2048")]
[ExcludeFromCodeCoverageAttribute]
[DebuggerNonUserCodeAttribute]
internal class System.Diagnostics.CodeAnalysis.DoesNotReturnIfAttribute : Attribute {
    [CompilerGeneratedAttribute]
private bool <ParameterValue>k__BackingField;
    public bool ParameterValue { get; }
    public DoesNotReturnIfAttribute(bool parameterValue);
    [CompilerGeneratedAttribute]
public bool get_ParameterValue();
}
[AttributeUsageAttribute("10624")]
[ExcludeFromCodeCoverageAttribute]
[DebuggerNonUserCodeAttribute]
internal class System.Diagnostics.CodeAnalysis.MaybeNullAttribute : Attribute {
}
[AttributeUsageAttribute("2048")]
[ExcludeFromCodeCoverageAttribute]
[DebuggerNonUserCodeAttribute]
internal class System.Diagnostics.CodeAnalysis.MaybeNullWhenAttribute : Attribute {
    [CompilerGeneratedAttribute]
private bool <ReturnValue>k__BackingField;
    public bool ReturnValue { get; }
    public MaybeNullWhenAttribute(bool returnValue);
    [CompilerGeneratedAttribute]
public bool get_ReturnValue();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[AttributeUsageAttribute("192")]
[ExcludeFromCodeCoverageAttribute]
[DebuggerNonUserCodeAttribute]
internal class System.Diagnostics.CodeAnalysis.MemberNotNullAttribute : Attribute {
    [CompilerGeneratedAttribute]
private String[] <Members>k__BackingField;
    public String[] Members { get; }
    public MemberNotNullAttribute(string member);
    public MemberNotNullAttribute(String[] members);
    [CompilerGeneratedAttribute]
public String[] get_Members();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[AttributeUsageAttribute("192")]
[ExcludeFromCodeCoverageAttribute]
[DebuggerNonUserCodeAttribute]
internal class System.Diagnostics.CodeAnalysis.MemberNotNullWhenAttribute : Attribute {
    [CompilerGeneratedAttribute]
private bool <ReturnValue>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <Members>k__BackingField;
    public bool ReturnValue { get; }
    public String[] Members { get; }
    public MemberNotNullWhenAttribute(bool returnValue, string member);
    public MemberNotNullWhenAttribute(bool returnValue, String[] members);
    [CompilerGeneratedAttribute]
public bool get_ReturnValue();
    [CompilerGeneratedAttribute]
public String[] get_Members();
}
[AttributeUsageAttribute("10624")]
[ExcludeFromCodeCoverageAttribute]
[DebuggerNonUserCodeAttribute]
internal class System.Diagnostics.CodeAnalysis.NotNullAttribute : Attribute {
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[AttributeUsageAttribute("10368")]
[ExcludeFromCodeCoverageAttribute]
[DebuggerNonUserCodeAttribute]
internal class System.Diagnostics.CodeAnalysis.NotNullIfNotNullAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <ParameterName>k__BackingField;
    public string ParameterName { get; }
    public NotNullIfNotNullAttribute(string parameterName);
    [CompilerGeneratedAttribute]
public string get_ParameterName();
}
[AttributeUsageAttribute("2048")]
[ExcludeFromCodeCoverageAttribute]
[DebuggerNonUserCodeAttribute]
internal class System.Diagnostics.CodeAnalysis.NotNullWhenAttribute : Attribute {
    [CompilerGeneratedAttribute]
private bool <ReturnValue>k__BackingField;
    public bool ReturnValue { get; }
    public NotNullWhenAttribute(bool returnValue);
    [CompilerGeneratedAttribute]
public bool get_ReturnValue();
}
internal class System.Runtime.CompilerServices.IsExternalInit : object {
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class System.Runtime.CompilerServices.IsReadOnlyAttribute : Attribute {
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("27524")]
internal class System.Runtime.CompilerServices.NullableAttribute : Attribute {
    public Byte[] NullableFlags;
    public NullableAttribute(byte );
    public NullableAttribute(Byte[] );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("5196")]
internal class System.Runtime.CompilerServices.NullableContextAttribute : Attribute {
    public byte Flag;
    public NullableContextAttribute(byte );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("2")]
internal class System.Runtime.CompilerServices.RefSafetyRulesAttribute : Attribute {
    public int Version;
    public RefSafetyRulesAttribute(int );
}
[GeneratedCodeAttribute("Nerdbank.GitVersioning.Tasks", "3.6.139.59561")]
[ExcludeFromCodeCoverageAttribute]
internal static class ThisAssembly : object {
    internal static string AssemblyConfiguration;
    internal static string AssemblyFileVersion;
    internal static string AssemblyInformationalVersion;
    internal static string AssemblyName;
    internal static string AssemblyTitle;
    internal static string AssemblyVersion;
    internal static DateTime GitCommitDate;
    internal static string GitCommitId;
    internal static bool IsPrerelease;
    internal static bool IsPublicRelease;
    internal static string PublicKey;
    internal static string PublicKeyToken;
    internal static string RootNamespace;
    private static ThisAssembly();
}
