public static class System.Numerics.Vector : object {
    public static bool IsHardwareAccelerated { get; }
    public static bool get_IsHardwareAccelerated();
    public static Vector`1<T> Abs(Vector`1<T> value);
    public static Vector`1<T> Add(Vector`1<T> left, Vector`1<T> right);
    public static Vector`1<T> AndNot(Vector`1<T> left, Vector`1<T> right);
    public static Vector`1<byte> AsVectorByte(Vector`1<T> value);
    public static Vector`1<double> AsVectorDouble(Vector`1<T> value);
    public static Vector`1<short> AsVectorInt16(Vector`1<T> value);
    public static Vector`1<int> AsVectorInt32(Vector`1<T> value);
    public static Vector`1<long> AsVectorInt64(Vector`1<T> value);
    [CLSCompliantAttribute("False")]
public static Vector`1<sbyte> AsVectorSByte(Vector`1<T> value);
    public static Vector`1<float> AsVectorSingle(Vector`1<T> value);
    [CLSCompliantAttribute("False")]
public static Vector`1<ushort> AsVectorUInt16(Vector`1<T> value);
    [CLSCompliantAttribute("False")]
public static Vector`1<UInt32> AsVectorUInt32(Vector`1<T> value);
    [CLSCompliantAttribute("False")]
public static Vector`1<ulong> AsVectorUInt64(Vector`1<T> value);
    public static Vector`1<T> BitwiseAnd(Vector`1<T> left, Vector`1<T> right);
    public static Vector`1<T> BitwiseOr(Vector`1<T> left, Vector`1<T> right);
    public static Vector`1<float> ConditionalSelect(Vector`1<int> condition, Vector`1<float> left, Vector`1<float> right);
    public static Vector`1<double> ConditionalSelect(Vector`1<long> condition, Vector`1<double> left, Vector`1<double> right);
    public static Vector`1<T> ConditionalSelect(Vector`1<T> condition, Vector`1<T> left, Vector`1<T> right);
    public static Vector`1<float> ConvertToSingle(Vector`1<int> value);
    [CLSCompliantAttribute("False")]
public static Vector`1<float> ConvertToSingle(Vector`1<UInt32> value);
    public static Vector`1<int> ConvertToInt32(Vector`1<float> value);
    [CLSCompliantAttribute("False")]
public static Vector`1<UInt32> ConvertToUInt32(Vector`1<float> value);
    public static Vector`1<double> ConvertToDouble(Vector`1<long> value);
    [CLSCompliantAttribute("False")]
public static Vector`1<double> ConvertToDouble(Vector`1<ulong> value);
    public static Vector`1<long> ConvertToInt64(Vector`1<double> value);
    [CLSCompliantAttribute("False")]
public static Vector`1<ulong> ConvertToUInt64(Vector`1<double> value);
    public static Vector`1<T> Divide(Vector`1<T> left, Vector`1<T> right);
    public static T Dot(Vector`1<T> left, Vector`1<T> right);
    public static Vector`1<long> Equals(Vector`1<double> left, Vector`1<double> right);
    public static Vector`1<int> Equals(Vector`1<int> left, Vector`1<int> right);
    public static Vector`1<long> Equals(Vector`1<long> left, Vector`1<long> right);
    public static Vector`1<int> Equals(Vector`1<float> left, Vector`1<float> right);
    public static Vector`1<T> Equals(Vector`1<T> left, Vector`1<T> right);
    public static bool EqualsAll(Vector`1<T> left, Vector`1<T> right);
    public static bool EqualsAny(Vector`1<T> left, Vector`1<T> right);
    public static Vector`1<long> GreaterThan(Vector`1<double> left, Vector`1<double> right);
    public static Vector`1<int> GreaterThan(Vector`1<int> left, Vector`1<int> right);
    public static Vector`1<long> GreaterThan(Vector`1<long> left, Vector`1<long> right);
    public static Vector`1<int> GreaterThan(Vector`1<float> left, Vector`1<float> right);
    public static Vector`1<T> GreaterThan(Vector`1<T> left, Vector`1<T> right);
    public static bool GreaterThanAll(Vector`1<T> left, Vector`1<T> right);
    public static bool GreaterThanAny(Vector`1<T> left, Vector`1<T> right);
    public static Vector`1<long> GreaterThanOrEqual(Vector`1<double> left, Vector`1<double> right);
    public static Vector`1<int> GreaterThanOrEqual(Vector`1<int> left, Vector`1<int> right);
    public static Vector`1<long> GreaterThanOrEqual(Vector`1<long> left, Vector`1<long> right);
    public static Vector`1<int> GreaterThanOrEqual(Vector`1<float> left, Vector`1<float> right);
    public static Vector`1<T> GreaterThanOrEqual(Vector`1<T> left, Vector`1<T> right);
    public static bool GreaterThanOrEqualAll(Vector`1<T> left, Vector`1<T> right);
    public static bool GreaterThanOrEqualAny(Vector`1<T> left, Vector`1<T> right);
    public static Vector`1<long> LessThan(Vector`1<double> left, Vector`1<double> right);
    public static Vector`1<int> LessThan(Vector`1<int> left, Vector`1<int> right);
    public static Vector`1<long> LessThan(Vector`1<long> left, Vector`1<long> right);
    public static Vector`1<int> LessThan(Vector`1<float> left, Vector`1<float> right);
    public static Vector`1<T> LessThan(Vector`1<T> left, Vector`1<T> right);
    public static bool LessThanAll(Vector`1<T> left, Vector`1<T> right);
    public static bool LessThanAny(Vector`1<T> left, Vector`1<T> right);
    public static Vector`1<long> LessThanOrEqual(Vector`1<double> left, Vector`1<double> right);
    public static Vector`1<int> LessThanOrEqual(Vector`1<int> left, Vector`1<int> right);
    public static Vector`1<long> LessThanOrEqual(Vector`1<long> left, Vector`1<long> right);
    public static Vector`1<int> LessThanOrEqual(Vector`1<float> left, Vector`1<float> right);
    public static Vector`1<T> LessThanOrEqual(Vector`1<T> left, Vector`1<T> right);
    public static bool LessThanOrEqualAll(Vector`1<T> left, Vector`1<T> right);
    public static bool LessThanOrEqualAny(Vector`1<T> left, Vector`1<T> right);
    public static Vector`1<T> Max(Vector`1<T> left, Vector`1<T> right);
    public static Vector`1<T> Min(Vector`1<T> left, Vector`1<T> right);
    public static Vector`1<T> Multiply(T left, Vector`1<T> right);
    public static Vector`1<T> Multiply(Vector`1<T> left, T right);
    public static Vector`1<T> Multiply(Vector`1<T> left, Vector`1<T> right);
    [CLSCompliantAttribute("False")]
public static Vector`1<byte> Narrow(Vector`1<ushort> source1, Vector`1<ushort> source2);
    [CLSCompliantAttribute("False")]
public static Vector`1<ushort> Narrow(Vector`1<UInt32> source1, Vector`1<UInt32> source2);
    [CLSCompliantAttribute("False")]
public static Vector`1<UInt32> Narrow(Vector`1<ulong> source1, Vector`1<ulong> source2);
    [CLSCompliantAttribute("False")]
public static Vector`1<sbyte> Narrow(Vector`1<short> source1, Vector`1<short> source2);
    public static Vector`1<short> Narrow(Vector`1<int> source1, Vector`1<int> source2);
    public static Vector`1<int> Narrow(Vector`1<long> source1, Vector`1<long> source2);
    public static Vector`1<float> Narrow(Vector`1<double> source1, Vector`1<double> source2);
    public static Vector`1<T> Negate(Vector`1<T> value);
    public static Vector`1<T> OnesComplement(Vector`1<T> value);
    public static Vector`1<T> SquareRoot(Vector`1<T> value);
    public static Vector`1<T> Subtract(Vector`1<T> left, Vector`1<T> right);
    [CLSCompliantAttribute("False")]
public static void Widen(Vector`1<byte> source, Vector`1& dest1, Vector`1& dest2);
    [CLSCompliantAttribute("False")]
public static void Widen(Vector`1<ushort> source, Vector`1& dest1, Vector`1& dest2);
    [CLSCompliantAttribute("False")]
public static void Widen(Vector`1<UInt32> source, Vector`1& dest1, Vector`1& dest2);
    [CLSCompliantAttribute("False")]
public static void Widen(Vector`1<sbyte> source, Vector`1& dest1, Vector`1& dest2);
    public static void Widen(Vector`1<short> source, Vector`1& dest1, Vector`1& dest2);
    public static void Widen(Vector`1<int> source, Vector`1& dest1, Vector`1& dest2);
    public static void Widen(Vector`1<float> source, Vector`1& dest1, Vector`1& dest2);
    public static Vector`1<T> Xor(Vector`1<T> left, Vector`1<T> right);
}
[DefaultMemberAttribute("Item")]
public class System.Numerics.Vector`1 : ValueType {
    private int _dummy;
    public static int Count { get; }
    public T Item { get; }
    public static Vector`1<T> One { get; }
    public static Vector`1<T> Zero { get; }
    public Vector`1(T value);
    public Vector`1(T[] values);
    public Vector`1(T[] values, int index);
    public static int get_Count();
    public T get_Item(int index);
    public static Vector`1<T> get_One();
    public static Vector`1<T> get_Zero();
    public void CopyTo(T[] destination);
    public void CopyTo(T[] destination, int startIndex);
    public sealed virtual bool Equals(Vector`1<T> other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public static Vector`1<T> op_Addition(Vector`1<T> left, Vector`1<T> right);
    public static Vector`1<T> op_BitwiseAnd(Vector`1<T> left, Vector`1<T> right);
    public static Vector`1<T> op_BitwiseOr(Vector`1<T> left, Vector`1<T> right);
    public static Vector`1<T> op_Division(Vector`1<T> left, Vector`1<T> right);
    public static bool op_Equality(Vector`1<T> left, Vector`1<T> right);
    public static Vector`1<T> op_ExclusiveOr(Vector`1<T> left, Vector`1<T> right);
    public static Vector`1<byte> op_Explicit(Vector`1<T> value);
    public static Vector`1<double> op_Explicit(Vector`1<T> value);
    public static Vector`1<short> op_Explicit(Vector`1<T> value);
    public static Vector`1<int> op_Explicit(Vector`1<T> value);
    public static Vector`1<long> op_Explicit(Vector`1<T> value);
    [CLSCompliantAttribute("False")]
public static Vector`1<sbyte> op_Explicit(Vector`1<T> value);
    public static Vector`1<float> op_Explicit(Vector`1<T> value);
    [CLSCompliantAttribute("False")]
public static Vector`1<ushort> op_Explicit(Vector`1<T> value);
    [CLSCompliantAttribute("False")]
public static Vector`1<UInt32> op_Explicit(Vector`1<T> value);
    [CLSCompliantAttribute("False")]
public static Vector`1<ulong> op_Explicit(Vector`1<T> value);
    public static bool op_Inequality(Vector`1<T> left, Vector`1<T> right);
    public static Vector`1<T> op_Multiply(T factor, Vector`1<T> value);
    public static Vector`1<T> op_Multiply(Vector`1<T> value, T factor);
    public static Vector`1<T> op_Multiply(Vector`1<T> left, Vector`1<T> right);
    public static Vector`1<T> op_OnesComplement(Vector`1<T> value);
    public static Vector`1<T> op_Subtraction(Vector`1<T> left, Vector`1<T> right);
    public static Vector`1<T> op_UnaryNegation(Vector`1<T> value);
    public virtual string ToString();
    public string ToString(string format);
    public sealed virtual string ToString(string format, IFormatProvider formatProvider);
}
