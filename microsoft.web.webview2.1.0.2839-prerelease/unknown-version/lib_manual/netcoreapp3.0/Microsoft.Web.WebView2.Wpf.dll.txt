public class Microsoft.Web.WebView2.Wpf.CoreWebView2CreationProperties : DependencyObject {
    public static DependencyProperty BrowserExecutableFolderProperty;
    public static DependencyProperty UserDataFolderProperty;
    public static DependencyProperty LanguageProperty;
    public static DependencyProperty AdditionalBrowserArgumentsProperty;
    public static DependencyProperty AreBrowserExtensionsEnabledProperty;
    public static DependencyProperty ProfileNameProperty;
    public static DependencyProperty IsInPrivateModeEnabledProperty;
    public static DependencyProperty ScriptLocaleProperty;
    private Task`1<CoreWebView2Environment> _task;
    public string BrowserExecutableFolder { get; public set; }
    public string UserDataFolder { get; public set; }
    public string Language { get; public set; }
    public string AdditionalBrowserArguments { get; public set; }
    public Nullable`1<bool> AreBrowserExtensionsEnabled { get; public set; }
    public string ProfileName { get; public set; }
    public Nullable`1<bool> IsInPrivateModeEnabled { get; public set; }
    public string ScriptLocale { get; public set; }
    private static CoreWebView2CreationProperties();
    public string get_BrowserExecutableFolder();
    public void set_BrowserExecutableFolder(string value);
    public string get_UserDataFolder();
    public void set_UserDataFolder(string value);
    public string get_Language();
    public void set_Language(string value);
    public string get_AdditionalBrowserArguments();
    public void set_AdditionalBrowserArguments(string value);
    public Nullable`1<bool> get_AreBrowserExtensionsEnabled();
    public void set_AreBrowserExtensionsEnabled(Nullable`1<bool> value);
    public string get_ProfileName();
    public void set_ProfileName(string value);
    public Nullable`1<bool> get_IsInPrivateModeEnabled();
    public void set_IsInPrivateModeEnabled(Nullable`1<bool> value);
    public string get_ScriptLocale();
    public void set_ScriptLocale(string value);
    private static void EnvironmentPropertyChanged(DependencyObject d, DependencyPropertyChangedEventArgs args);
    internal Task`1<CoreWebView2Environment> CreateEnvironmentAsync();
    internal CoreWebView2ControllerOptions CreateCoreWebView2ControllerOptions(CoreWebView2Environment environment);
}
internal static class Microsoft.Web.WebView2.Wpf.Direct3DHelper : object {
    internal static string ID3D11Texture2DGuid;
    public static int D3D11_SDK_VERSION;
    public static UInt32 D3D9_SDK_VERSION;
    private static int D3DSWAPEFFECT_DISCARD;
    private static int D3DCREATE_HARDWARE_VERTEXPROCESSING;
    private static int D3DCREATE_MULTITHREADED;
    private static int D3DCREATE_FPU_PRESERVE;
    internal static IDirect3DDevice9 CreateD3D9Device(IntPtr mainwindow);
    public static void CreateD3D9Texture(IDirect3DDevice9 direct3DDevice9, UInt32 width, UInt32 height, IDirect3DTexture9& texture, IntPtr& sharedHandle);
    public static void GetD3D9SurfaceLevel(IDirect3DTexture9 d3d9texture, UInt32 level, IntPtr& surface);
    public static IDirect3DDevice CreateDevice(ID3D11Device& device, ID3D11DeviceContext& deviceContext);
    public static void CreateD3D11Texture(ID3D11Device device, Texture2DDescription texturedesc, ID3D11Texture2D& texture2d);
    public static void CopyResource(ID3D11DeviceContext context, ID3D11Texture2D destination, ID3D11Texture2D source);
    public static void GetSharedHandle(ID3D11Texture2D resource, IntPtr& shardhandle);
    private static int CreateDirect3D11DeviceFromDXGIDevice(ID3D11Device dxgiDevice, IDirect3DDevice& graphicsDevice);
    public static int D3D11CreateDevice(IntPtr pAdapter, DriverType driverType, IntPtr software, CreateDeviceFlags flags, IntPtr pFeatureLevels, UInt32 featureLevels, UInt32 sdkVersion, ID3D11Device& pDevice, FeatureLevel& pFeatureLevel, ID3D11DeviceContext& pImmediateContext);
    internal static int Direct3DCreate9Ex(UInt32 SDKVersion, IDirect3D9Ex& direct3d9);
}
internal class Microsoft.Web.WebView2.Wpf.GraphicsItemD3DImage : D3DImage {
    private Image _image;
    private bool _sourceSet;
    private bool _disposed;
    private GraphicsCaptureItem _item;
    private Direct3D11CaptureFramePool _framePool;
    private GraphicsCaptureSession _session;
    private SizeInt32 _lastSize;
    private double _dpiScale;
    private bool _backBufferSet;
    private long _fpsCount;
    private bool _useSoftwareRendering;
    private IDirect3DDevice _device;
    private IDirect3DDevice9 _d3d9Device;
    private ID3D11Device _d3d11Device;
    private ID3D11DeviceContext _d3d11DeviceContext;
    private ID3D11Texture2D _renderTargetTexture;
    private Texture2DDescription _renderTargetDescription;
    [CompilerGeneratedAttribute]
private int <FpsDivider>k__BackingField;
    public int FpsDivider { get; public set; }
    public GraphicsItemD3DImage(IntPtr mainWindowHandle, Image image, int fpsDivider);
    [CompilerGeneratedAttribute]
public int get_FpsDivider();
    [CompilerGeneratedAttribute]
public void set_FpsDivider(int value);
    private void RenderCapabilityTierChanged(object sender, EventArgs e);
    public sealed virtual void Dispose();
    protected virtual void Dispose(bool disposing);
    protected virtual override void Finalize();
    public void ApplyCompositor(ContainerVisual visual, int width, int height, double dpiScale);
    protected void SetGraphicItem(int width, int height);
    private void ResetState();
    private void OnFrameArrived(Direct3D11CaptureFramePool sender, object args);
    private void GraphicItemD3DImageIsFrontBufferAvailableChanged(object sender, DependencyPropertyChangedEventArgs e);
    private void UpdateRenderingMode();
    public void UpdateSize(int width, int height);
    public void UpdateDpiScale(double dpiScale);
    public void RequestRender();
}
internal class Microsoft.Web.WebView2.Wpf.ImplicitInitGate : object {
    [CompilerGeneratedAttribute]
private int <ISupportInitializeCount>k__BackingField;
    [CompilerGeneratedAttribute]
private Action <PendingInitAction>k__BackingField;
    private bool ISupportInitializeOpen { get; }
    private int ISupportInitializeCount { get; private set; }
    private bool SyncContextOpen { get; }
    private Action PendingInitAction { get; private set; }
    private bool get_ISupportInitializeOpen();
    [CompilerGeneratedAttribute]
private int get_ISupportInitializeCount();
    [CompilerGeneratedAttribute]
private void set_ISupportInitializeCount(int value);
    private bool get_SyncContextOpen();
    [CompilerGeneratedAttribute]
private Action get_PendingInitAction();
    [CompilerGeneratedAttribute]
private void set_PendingInitAction(Action value);
    public sealed virtual void BeginInit();
    public sealed virtual void EndInit();
    public void OnSynchronizationContextExists(object sender, RoutedEventArgs e);
    public void RunWhenOpen(Action initAction);
    private void OnDataChanged();
}
public interface Microsoft.Web.WebView2.Wpf.IWebView2 {
    public CoreWebView2CreationProperties CreationProperties { get; public set; }
    public CoreWebView2 CoreWebView2 { get; }
    public Uri Source { get; public set; }
    public bool CanGoBack { get; }
    public bool CanGoForward { get; }
    public double ZoomFactor { get; public set; }
    public Color DefaultBackgroundColor { get; public set; }
    public Color DesignModeForegroundColor { get; public set; }
    public bool AllowExternalDrop { get; public set; }
    public abstract virtual CoreWebView2CreationProperties get_CreationProperties();
    public abstract virtual void set_CreationProperties(CoreWebView2CreationProperties value);
    public abstract virtual CoreWebView2 get_CoreWebView2();
    [CompilerGeneratedAttribute]
public abstract virtual void add_SourceChanged(EventHandler`1<CoreWebView2SourceChangedEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_SourceChanged(EventHandler`1<CoreWebView2SourceChangedEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_NavigationStarting(EventHandler`1<CoreWebView2NavigationStartingEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_NavigationStarting(EventHandler`1<CoreWebView2NavigationStartingEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_NavigationCompleted(EventHandler`1<CoreWebView2NavigationCompletedEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_NavigationCompleted(EventHandler`1<CoreWebView2NavigationCompletedEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_ZoomFactorChanged(EventHandler`1<EventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_ZoomFactorChanged(EventHandler`1<EventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_ContentLoading(EventHandler`1<CoreWebView2ContentLoadingEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_ContentLoading(EventHandler`1<CoreWebView2ContentLoadingEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_WebMessageReceived(EventHandler`1<CoreWebView2WebMessageReceivedEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_WebMessageReceived(EventHandler`1<CoreWebView2WebMessageReceivedEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_CoreWebView2InitializationCompleted(EventHandler`1<CoreWebView2InitializationCompletedEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_CoreWebView2InitializationCompleted(EventHandler`1<CoreWebView2InitializationCompletedEventArgs> value);
    public abstract virtual Task EnsureCoreWebView2Async(CoreWebView2Environment environment, CoreWebView2ControllerOptions controllerOptions);
    public abstract virtual Task EnsureCoreWebView2Async(CoreWebView2Environment environment);
    public abstract virtual void BeginInit();
    public abstract virtual void EndInit();
    public abstract virtual Uri get_Source();
    public abstract virtual void set_Source(Uri value);
    public abstract virtual bool get_CanGoBack();
    public abstract virtual bool get_CanGoForward();
    public abstract virtual double get_ZoomFactor();
    public abstract virtual void set_ZoomFactor(double value);
    public abstract virtual Color get_DefaultBackgroundColor();
    public abstract virtual void set_DefaultBackgroundColor(Color value);
    public abstract virtual Color get_DesignModeForegroundColor();
    public abstract virtual void set_DesignModeForegroundColor(Color value);
    public abstract virtual bool get_AllowExternalDrop();
    public abstract virtual void set_AllowExternalDrop(bool value);
    public abstract virtual void GoBack();
    public abstract virtual void GoForward();
    public abstract virtual void Reload();
    public abstract virtual void Stop();
    public abstract virtual void NavigateToString(string htmlContent);
    public abstract virtual Task`1<string> ExecuteScriptAsync(string javaScript);
    public abstract virtual bool Focus();
}
internal interface Microsoft.Web.WebView2.Wpf.IWebView2Private {
    public WebView2Base webview2Base { get; }
    public abstract virtual WebView2Base get_webview2Base();
    public abstract virtual Task`1<bool> InitializeController(IntPtr parent_window, CoreWebView2ControllerOptions controllerOptions);
    public abstract virtual void UninitializeController();
}
[ToolboxItemAttribute("True")]
public class Microsoft.Web.WebView2.Wpf.WebView2 : HwndHost {
    internal WebView2Base m_webview2Base;
    public static DependencyProperty CreationPropertiesProperty;
    public static DependencyProperty SourceProperty;
    public static DependencyProperty CanGoBackProperty;
    public static DependencyProperty CanGoForwardProperty;
    public static DependencyProperty ZoomFactorProperty;
    public static DependencyProperty DefaultBackgroundColorProperty;
    public static DependencyProperty AllowExternalDropProperty;
    public static DependencyProperty DesignModeForegroundColorProperty;
    private WebView2Base Microsoft.Web.WebView2.Wpf.IWebView2Private.webview2Base { get; }
    [CategoryAttribute("Common")]
public CoreWebView2CreationProperties CreationProperties { get; public set; }
    [BrowsableAttribute("False")]
public CoreWebView2 CoreWebView2 { get; }
    [CategoryAttribute("Common")]
public Uri Source { get; public set; }
    [BrowsableAttribute("False")]
public bool CanGoBack { get; }
    [BrowsableAttribute("False")]
public bool CanGoForward { get; }
    [CategoryAttribute("Common")]
public double ZoomFactor { get; public set; }
    [CategoryAttribute("Common")]
public Color DefaultBackgroundColor { get; public set; }
    [CategoryAttribute("Common")]
public bool AllowExternalDrop { get; public set; }
    [CategoryAttribute("Common")]
public Color DesignModeForegroundColor { get; public set; }
    protected bool IsInDesignMode { get; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
public Brush OpacityMask { get; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
public double Opacity { get; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
public Effect Effect { get; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
public ContextMenu ContextMenu { get; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
public Style FocusVisualStyle { get; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
public InputScope InputScope { get; }
    private static WebView2();
    private sealed virtual override WebView2Base Microsoft.Web.WebView2.Wpf.IWebView2Private.get_webview2Base();
    public sealed virtual CoreWebView2CreationProperties get_CreationProperties();
    public sealed virtual void set_CreationProperties(CoreWebView2CreationProperties value);
    protected virtual HandleRef BuildWindowCore(HandleRef hwndParent);
    protected virtual void DestroyWindowCore(HandleRef hwnd);
    protected virtual IntPtr WndProc(IntPtr hwnd, int msg, IntPtr wParam, IntPtr lParam, Boolean& handled);
    protected virtual void OnGotFocus(RoutedEventArgs e);
    protected virtual void OnLostFocus(RoutedEventArgs e);
    protected virtual void OnRender(DrawingContext dc);
    public sealed virtual CoreWebView2 get_CoreWebView2();
    public sealed virtual void add_CoreWebView2InitializationCompleted(EventHandler`1<CoreWebView2InitializationCompletedEventArgs> value);
    public sealed virtual void remove_CoreWebView2InitializationCompleted(EventHandler`1<CoreWebView2InitializationCompletedEventArgs> value);
    [AsyncStateMachineAttribute("Microsoft.Web.WebView2.Wpf.WebView2/<Microsoft-Web-WebView2-Wpf-IWebView2Private-InitializeController>d__19")]
private sealed virtual override Task`1<bool> Microsoft.Web.WebView2.Wpf.IWebView2Private.InitializeController(IntPtr parent_window, CoreWebView2ControllerOptions controllerOptions);
    private sealed virtual override void Microsoft.Web.WebView2.Wpf.IWebView2Private.UninitializeController();
    public sealed virtual Task EnsureCoreWebView2Async(CoreWebView2Environment environment, CoreWebView2ControllerOptions controllerOptions);
    public sealed virtual Task EnsureCoreWebView2Async(CoreWebView2Environment environment);
    protected virtual void Dispose(bool disposing);
    public virtual void BeginInit();
    public virtual void EndInit();
    internal void ReparentController(IntPtr hwnd, bool sync);
    internal void SyncControllerWithParentWindow();
    protected virtual void OnWindowPositionChanged(Rect rcBoundingBox);
    public sealed virtual Uri get_Source();
    public sealed virtual void set_Source(Uri value);
    public sealed virtual void add_SourceChanged(EventHandler`1<CoreWebView2SourceChangedEventArgs> value);
    public sealed virtual void remove_SourceChanged(EventHandler`1<CoreWebView2SourceChangedEventArgs> value);
    public sealed virtual void add_NavigationStarting(EventHandler`1<CoreWebView2NavigationStartingEventArgs> value);
    public sealed virtual void remove_NavigationStarting(EventHandler`1<CoreWebView2NavigationStartingEventArgs> value);
    public sealed virtual void add_NavigationCompleted(EventHandler`1<CoreWebView2NavigationCompletedEventArgs> value);
    public sealed virtual void remove_NavigationCompleted(EventHandler`1<CoreWebView2NavigationCompletedEventArgs> value);
    public sealed virtual bool get_CanGoBack();
    public sealed virtual bool get_CanGoForward();
    protected virtual bool TabIntoCore(TraversalRequest request);
    protected virtual void OnKeyDown(KeyEventArgs e);
    protected virtual void OnKeyUp(KeyEventArgs e);
    protected virtual void OnPreviewKeyDown(KeyEventArgs e);
    protected virtual void OnPreviewKeyUp(KeyEventArgs e);
    public sealed virtual double get_ZoomFactor();
    public sealed virtual void set_ZoomFactor(double value);
    public sealed virtual void add_ZoomFactorChanged(EventHandler`1<EventArgs> value);
    public sealed virtual void remove_ZoomFactorChanged(EventHandler`1<EventArgs> value);
    public sealed virtual Color get_DefaultBackgroundColor();
    public sealed virtual void set_DefaultBackgroundColor(Color value);
    public sealed virtual bool get_AllowExternalDrop();
    public sealed virtual void set_AllowExternalDrop(bool value);
    public sealed virtual Color get_DesignModeForegroundColor();
    public sealed virtual void set_DesignModeForegroundColor(Color value);
    public sealed virtual void GoBack();
    public sealed virtual void GoForward();
    public sealed virtual void Reload();
    public sealed virtual void Stop();
    public sealed virtual void NavigateToString(string htmlContent);
    public sealed virtual void add_ContentLoading(EventHandler`1<CoreWebView2ContentLoadingEventArgs> value);
    public sealed virtual void remove_ContentLoading(EventHandler`1<CoreWebView2ContentLoadingEventArgs> value);
    [AsyncStateMachineAttribute("Microsoft.Web.WebView2.Wpf.WebView2/<ExecuteScriptAsync>d__80")]
public sealed virtual Task`1<string> ExecuteScriptAsync(string javaScript);
    public sealed virtual void add_WebMessageReceived(EventHandler`1<CoreWebView2WebMessageReceivedEventArgs> value);
    public sealed virtual void remove_WebMessageReceived(EventHandler`1<CoreWebView2WebMessageReceivedEventArgs> value);
    protected bool get_IsInDesignMode();
    public Brush get_OpacityMask();
    public double get_Opacity();
    public Effect get_Effect();
    public ContextMenu get_ContextMenu();
    public Style get_FocusVisualStyle();
    public InputScope get_InputScope();
    [CompilerGeneratedAttribute]
private void <WndProc>b__10_0();
}
internal class Microsoft.Web.WebView2.Wpf.WebView2Base : DependencyObject {
    private FrameworkElement m_element;
    [CompilerGeneratedAttribute]
private CoreWebView2Environment <Environment>k__BackingField;
    [CompilerGeneratedAttribute]
private CoreWebView2Controller <CoreWebView2Controller>k__BackingField;
    [CompilerGeneratedAttribute]
private CoreWebView2ControllerOptions <ControllerOptions>k__BackingField;
    public static DependencyProperty CreationPropertiesProperty;
    [CompilerGeneratedAttribute]
private EventHandler`1<CoreWebView2InitializationCompletedEventArgs> CoreWebView2InitializationCompleted;
    private Task _initTask;
    internal bool _browserHitTransparent;
    private bool _isExplicitEnvironment;
    private bool _isExplicitControllerOptions;
    internal TaskCompletionSource`1<IntPtr> _hwndTaskSource;
    internal bool _disposed;
    private bool _browserCrashed;
    internal ImplicitInitGate _implicitInitGate;
    private DependencyProperty _propertyChangingFromCore;
    public static DependencyProperty SourceProperty;
    [CompilerGeneratedAttribute]
private EventHandler`1<CoreWebView2SourceChangedEventArgs> SourceChanged;
    [CompilerGeneratedAttribute]
private EventHandler`1<CoreWebView2NavigationStartingEventArgs> NavigationStarting;
    [CompilerGeneratedAttribute]
private EventHandler`1<CoreWebView2NavigationCompletedEventArgs> NavigationCompleted;
    public static DependencyPropertyKey CanGoBackPropertyKey;
    public static DependencyProperty CanGoBackProperty;
    private static DependencyPropertyKey CanGoForwardPropertyKey;
    public static DependencyProperty CanGoForwardProperty;
    public static DependencyProperty ZoomFactorProperty;
    [CompilerGeneratedAttribute]
private EventHandler`1<EventArgs> ZoomFactorChanged;
    public static DependencyProperty DefaultBackgroundColorProperty;
    public static DependencyProperty AllowExternalDropProperty;
    public static DependencyProperty DesignModeForegroundColorProperty;
    [CompilerGeneratedAttribute]
private EventHandler`1<CoreWebView2ContentLoadingEventArgs> ContentLoading;
    [CompilerGeneratedAttribute]
private EventHandler`1<CoreWebView2WebMessageReceivedEventArgs> WebMessageReceived;
    internal CoreWebView2Environment Environment { get; internal set; }
    internal CoreWebView2Controller CoreWebView2Controller { get; internal set; }
    private CoreWebView2ControllerOptions ControllerOptions { get; private set; }
    public CoreWebView2CreationProperties CreationProperties { get; public set; }
    public CoreWebView2 CoreWebView2 { get; }
    public Uri Source { get; public set; }
    [BrowsableAttribute("False")]
public bool CanGoBack { get; }
    [BrowsableAttribute("False")]
public bool CanGoForward { get; }
    public double ZoomFactor { get; public set; }
    public Color DefaultBackgroundColor { get; public set; }
    public bool AllowExternalDrop { get; public set; }
    public Color DesignModeForegroundColor { get; public set; }
    internal WebView2Base(FrameworkElement element);
    private static WebView2Base();
    [CompilerGeneratedAttribute]
internal CoreWebView2Environment get_Environment();
    [CompilerGeneratedAttribute]
internal void set_Environment(CoreWebView2Environment value);
    [CompilerGeneratedAttribute]
internal CoreWebView2Controller get_CoreWebView2Controller();
    [CompilerGeneratedAttribute]
internal void set_CoreWebView2Controller(CoreWebView2Controller value);
    [CompilerGeneratedAttribute]
private CoreWebView2ControllerOptions get_ControllerOptions();
    [CompilerGeneratedAttribute]
private void set_ControllerOptions(CoreWebView2ControllerOptions value);
    public sealed virtual CoreWebView2CreationProperties get_CreationProperties();
    public sealed virtual void set_CreationProperties(CoreWebView2CreationProperties value);
    internal static object CoerceCreationPropertiesProperty(DependencyObject d, object value);
    internal void OnRender(DrawingContext dc);
    public sealed virtual CoreWebView2 get_CoreWebView2();
    [CompilerGeneratedAttribute]
public sealed virtual void add_CoreWebView2InitializationCompleted(EventHandler`1<CoreWebView2InitializationCompletedEventArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_CoreWebView2InitializationCompleted(EventHandler`1<CoreWebView2InitializationCompletedEventArgs> value);
    internal void SafeAccessController(Action action);
    internal TResult SafeAccessController(Func`1<TResult> function, TResult defaultReturnValue);
    public sealed virtual Task EnsureCoreWebView2Async(CoreWebView2Environment environment, CoreWebView2ControllerOptions controllerOptions);
    public sealed virtual Task EnsureCoreWebView2Async(CoreWebView2Environment environment);
    private void Profile_Deleted(object sender, object e);
    private void VerifyNotDisposed();
    internal void VerifyCoreWebView2();
    internal void Uninitialize(bool browserCrashed);
    private void CoreWebView2_ProcessFailed(object sender, CoreWebView2ProcessFailedEventArgs e);
    private void VerifyBrowserNotCrashed();
    public sealed virtual void BeginInit();
    public sealed virtual void EndInit();
    private void SetCurrentValueFromCore(DependencyProperty property, object value);
    private bool IsPropertyChangingFromCore(DependencyProperty property);
    private void UIElement_IsVisibleChanged(object sender, DependencyPropertyChangedEventArgs e);
    public sealed virtual Uri get_Source();
    public sealed virtual void set_Source(Uri value);
    internal static bool SourcePropertyValid(object val);
    internal static void SourcePropertyChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    [CompilerGeneratedAttribute]
public sealed virtual void add_SourceChanged(EventHandler`1<CoreWebView2SourceChangedEventArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_SourceChanged(EventHandler`1<CoreWebView2SourceChangedEventArgs> value);
    private void CoreWebView2_SourceChanged(object sender, CoreWebView2SourceChangedEventArgs e);
    [CompilerGeneratedAttribute]
public sealed virtual void add_NavigationStarting(EventHandler`1<CoreWebView2NavigationStartingEventArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_NavigationStarting(EventHandler`1<CoreWebView2NavigationStartingEventArgs> value);
    private void CoreWebView2_NavigationStarting(object sender, CoreWebView2NavigationStartingEventArgs e);
    [CompilerGeneratedAttribute]
public sealed virtual void add_NavigationCompleted(EventHandler`1<CoreWebView2NavigationCompletedEventArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_NavigationCompleted(EventHandler`1<CoreWebView2NavigationCompletedEventArgs> value);
    private void CoreWebView2_NavigationCompleted(object sender, CoreWebView2NavigationCompletedEventArgs e);
    private void CoreWebView2_HistoryChanged(object sender, object e);
    public sealed virtual bool get_CanGoBack();
    public sealed virtual bool get_CanGoForward();
    private void CoreWebView2Controller_MoveFocusRequested(object sender, CoreWebView2MoveFocusRequestedEventArgs e);
    private void CoreWebView2Controller_GotFocus(object sender, object e);
    private void CoreWebView2Controller_LostFocus(object sender, object e);
    private void CoreWebView2Controller_AcceleratorKeyPressed(object sender, CoreWebView2AcceleratorKeyPressedEventArgs e);
    public sealed virtual double get_ZoomFactor();
    public sealed virtual void set_ZoomFactor(double value);
    internal static object CoerceZoomFactorPropertyChanged(DependencyObject d, object value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_ZoomFactorChanged(EventHandler`1<EventArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_ZoomFactorChanged(EventHandler`1<EventArgs> value);
    private void CoreWebView2Controller_ZoomFactorChanged(object sender, object e);
    public sealed virtual Color get_DefaultBackgroundColor();
    public sealed virtual void set_DefaultBackgroundColor(Color value);
    internal static void DefaultBackgroundColorPropertyChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    public sealed virtual bool get_AllowExternalDrop();
    public sealed virtual void set_AllowExternalDrop(bool value);
    internal static void AllowExternalDropPropertyChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    public sealed virtual Color get_DesignModeForegroundColor();
    public sealed virtual void set_DesignModeForegroundColor(Color value);
    public sealed virtual void GoBack();
    public sealed virtual void GoForward();
    public sealed virtual void Reload();
    public sealed virtual void Stop();
    public sealed virtual void NavigateToString(string htmlContent);
    [CompilerGeneratedAttribute]
public sealed virtual void add_ContentLoading(EventHandler`1<CoreWebView2ContentLoadingEventArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_ContentLoading(EventHandler`1<CoreWebView2ContentLoadingEventArgs> value);
    private void CoreWebView2_ContentLoading(object sender, CoreWebView2ContentLoadingEventArgs e);
    [AsyncStateMachineAttribute("Microsoft.Web.WebView2.Wpf.WebView2Base/<ExecuteScriptAsync>d__113")]
public sealed virtual Task`1<string> ExecuteScriptAsync(string javaScript);
    [CompilerGeneratedAttribute]
public sealed virtual void add_WebMessageReceived(EventHandler`1<CoreWebView2WebMessageReceivedEventArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_WebMessageReceived(EventHandler`1<CoreWebView2WebMessageReceivedEventArgs> value);
    private void CoreWebView2_WebMessageReceived(object sender, CoreWebView2WebMessageReceivedEventArgs e);
    internal bool TabInto(TraversalRequest request);
    private void OnGotKeyboardFocus(object sender, KeyboardFocusChangedEventArgs e);
    public sealed virtual bool Focus();
    public sealed virtual void Dispose();
    [CompilerGeneratedAttribute]
private void <OnGotKeyboardFocus>b__119_0();
}
[ToolboxItemAttribute("True")]
[TemplatePartAttribute]
public class Microsoft.Web.WebView2.Wpf.WebView2CompositionControl : Control {
    internal WebView2Base m_webview2Base;
    private static string PartImageName;
    private Image _image;
    private GraphicsItemD3DImage _d3dImage;
    private double _dpiScale;
    private Point _mouselocation;
    private object _dispatcherQueueController;
    private Compositor _compositor;
    private ContainerVisual _wincompWebViewVisual;
    public static DependencyProperty CreationPropertiesProperty;
    public static DependencyProperty SourceProperty;
    public static DependencyProperty CanGoBackProperty;
    public static DependencyProperty CanGoForwardProperty;
    private bool _webviewHasFocus;
    public static DependencyProperty ZoomFactorProperty;
    public static DependencyProperty DefaultBackgroundColorProperty;
    public static DependencyProperty AllowExternalDropProperty;
    public static DependencyProperty DesignModeForegroundColorProperty;
    public static DependencyProperty FpsDividerProperty;
    private WebView2Base Microsoft.Web.WebView2.Wpf.IWebView2Private.webview2Base { get; }
    [CategoryAttribute("Common")]
public CoreWebView2CreationProperties CreationProperties { get; public set; }
    [BrowsableAttribute("False")]
public CoreWebView2 CoreWebView2 { get; }
    [CategoryAttribute("Common")]
public Uri Source { get; public set; }
    [BrowsableAttribute("False")]
public bool CanGoBack { get; }
    [BrowsableAttribute("False")]
public bool CanGoForward { get; }
    public IKeyboardInputSite KeyboardInputSite { get; public set; }
    [CategoryAttribute("Common")]
public double ZoomFactor { get; public set; }
    [CategoryAttribute("Common")]
public Color DefaultBackgroundColor { get; public set; }
    [CategoryAttribute("Common")]
public bool AllowExternalDrop { get; public set; }
    [CategoryAttribute("Common")]
public Color DesignModeForegroundColor { get; public set; }
    [CategoryAttribute("Common")]
internal int FpsDivider { get; internal set; }
    protected bool IsInDesignMode { get; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
public Brush OpacityMask { get; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
public double Opacity { get; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
public Effect Effect { get; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
public ContextMenu ContextMenu { get; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
public Style FocusVisualStyle { get; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
public InputScope InputScope { get; }
    private static WebView2CompositionControl();
    private sealed virtual override WebView2Base Microsoft.Web.WebView2.Wpf.IWebView2Private.get_webview2Base();
    public virtual void OnApplyTemplate();
    private void WebView2CompositionControl_Loaded(object sender, RoutedEventArgs e);
    private void TryInitializeD3DImage();
    private void SyncControllerBounds();
    protected void WebView2CompositionControl_SizeChanged(object sender, SizeChangedEventArgs e);
    protected void WebView2CompositionControl_LocationChanged(object sender, EventArgs e);
    private void InitializeCoreDispatcher();
    internal void CoreWebView2Controller_CursorChanged(object sender, object e);
    private void ConvertWpfTouchToWebView2PointerInfo(TouchEventArgs wpfTouchArgs, UInt32 flags, CoreWebView2PointerInfo outputPt);
    public void SendPointerInput(CoreWebView2PointerEventKind eventKind, CoreWebView2PointerInfo pointerInfo);
    protected virtual void OnTouchDown(TouchEventArgs e);
    protected virtual void OnTouchMove(TouchEventArgs e);
    protected virtual void OnTouchUp(TouchEventArgs e);
    private CoreWebView2MouseEventVirtualKeys GetMouseEventVirtualKeys(MouseEventArgs e);
    public void SendMouseInput(CoreWebView2MouseEventKind eventKind, CoreWebView2MouseEventVirtualKeys virtualKeys, UInt32 mouseData, Point point);
    protected virtual void OnMouseMove(MouseEventArgs e);
    protected virtual void OnMouseDown(MouseButtonEventArgs e);
    protected virtual void OnMouseUp(MouseButtonEventArgs e);
    protected virtual void OnMouseWheel(MouseWheelEventArgs e);
    protected virtual void OnMouseDoubleClick(MouseButtonEventArgs e);
    public sealed virtual CoreWebView2CreationProperties get_CreationProperties();
    public sealed virtual void set_CreationProperties(CoreWebView2CreationProperties value);
    protected virtual void OnRender(DrawingContext dc);
    public sealed virtual CoreWebView2 get_CoreWebView2();
    public sealed virtual void add_CoreWebView2InitializationCompleted(EventHandler`1<CoreWebView2InitializationCompletedEventArgs> value);
    public sealed virtual void remove_CoreWebView2InitializationCompleted(EventHandler`1<CoreWebView2InitializationCompletedEventArgs> value);
    [AsyncStateMachineAttribute("Microsoft.Web.WebView2.Wpf.WebView2CompositionControl/<Microsoft-Web-WebView2-Wpf-IWebView2Private-InitializeController>d__44")]
private sealed virtual override Task`1<bool> Microsoft.Web.WebView2.Wpf.IWebView2Private.InitializeController(IntPtr parent_window, CoreWebView2ControllerOptions controllerOptions);
    private sealed virtual override void Microsoft.Web.WebView2.Wpf.IWebView2Private.UninitializeController();
    public sealed virtual Task EnsureCoreWebView2Async(CoreWebView2Environment environment, CoreWebView2ControllerOptions controllerOptions);
    public sealed virtual Task EnsureCoreWebView2Async(CoreWebView2Environment environment);
    public sealed virtual void Dispose();
    private void OnDispatcherShutdownFinished(object sender, EventArgs e);
    public virtual void BeginInit();
    public virtual void EndInit();
    public sealed virtual Uri get_Source();
    public sealed virtual void set_Source(Uri value);
    public sealed virtual void add_SourceChanged(EventHandler`1<CoreWebView2SourceChangedEventArgs> value);
    public sealed virtual void remove_SourceChanged(EventHandler`1<CoreWebView2SourceChangedEventArgs> value);
    public sealed virtual void add_NavigationStarting(EventHandler`1<CoreWebView2NavigationStartingEventArgs> value);
    public sealed virtual void remove_NavigationStarting(EventHandler`1<CoreWebView2NavigationStartingEventArgs> value);
    public sealed virtual void add_NavigationCompleted(EventHandler`1<CoreWebView2NavigationCompletedEventArgs> value);
    public sealed virtual void remove_NavigationCompleted(EventHandler`1<CoreWebView2NavigationCompletedEventArgs> value);
    public sealed virtual bool get_CanGoBack();
    public sealed virtual bool get_CanGoForward();
    public sealed virtual IKeyboardInputSite get_KeyboardInputSite();
    public sealed virtual void set_KeyboardInputSite(IKeyboardInputSite value);
    protected virtual void OnGotFocus(RoutedEventArgs e);
    protected virtual void OnLostFocus(RoutedEventArgs e);
    private void CoreWebView2Controller_GotFocus(object sender, object e);
    private void CoreWebView2Controller_LostFocus(object sender, object e);
    public sealed virtual bool HasFocusWithin();
    public sealed virtual bool OnMnemonic(MSG& msg, ModifierKeys modifiers);
    public sealed virtual IKeyboardInputSite RegisterKeyboardInputSink(IKeyboardInputSink sink);
    public sealed virtual bool TabInto(TraversalRequest request);
    public sealed virtual bool TranslateAccelerator(MSG& msg, ModifierKeys modifiers);
    public sealed virtual bool TranslateChar(MSG& msg, ModifierKeys modifiers);
    protected virtual void OnKeyDown(KeyEventArgs e);
    protected virtual void OnKeyUp(KeyEventArgs e);
    protected virtual void OnPreviewKeyDown(KeyEventArgs e);
    protected virtual void OnPreviewKeyUp(KeyEventArgs e);
    public sealed virtual double get_ZoomFactor();
    public sealed virtual void set_ZoomFactor(double value);
    public sealed virtual void add_ZoomFactorChanged(EventHandler`1<EventArgs> value);
    public sealed virtual void remove_ZoomFactorChanged(EventHandler`1<EventArgs> value);
    public sealed virtual Color get_DefaultBackgroundColor();
    public sealed virtual void set_DefaultBackgroundColor(Color value);
    public sealed virtual bool get_AllowExternalDrop();
    public sealed virtual void set_AllowExternalDrop(bool value);
    public sealed virtual Color get_DesignModeForegroundColor();
    public sealed virtual void set_DesignModeForegroundColor(Color value);
    internal int get_FpsDivider();
    internal void set_FpsDivider(int value);
    private static void FpsDividerChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    public sealed virtual void GoBack();
    public sealed virtual void GoForward();
    public sealed virtual void Reload();
    public sealed virtual void Stop();
    public sealed virtual void NavigateToString(string htmlContent);
    public sealed virtual void add_ContentLoading(EventHandler`1<CoreWebView2ContentLoadingEventArgs> value);
    public sealed virtual void remove_ContentLoading(EventHandler`1<CoreWebView2ContentLoadingEventArgs> value);
    [AsyncStateMachineAttribute("Microsoft.Web.WebView2.Wpf.WebView2CompositionControl/<ExecuteScriptAsync>d__121")]
public sealed virtual Task`1<string> ExecuteScriptAsync(string javaScript);
    public sealed virtual void add_WebMessageReceived(EventHandler`1<CoreWebView2WebMessageReceivedEventArgs> value);
    public sealed virtual void remove_WebMessageReceived(EventHandler`1<CoreWebView2WebMessageReceivedEventArgs> value);
    protected bool get_IsInDesignMode();
    public Brush get_OpacityMask();
    public double get_Opacity();
    public Effect get_Effect();
    public ContextMenu get_ContextMenu();
    public Style get_FocusVisualStyle();
    public InputScope get_InputScope();
    internal static IntPtr CreateDispatcherQueueController(DispatcherQueueOptions options, Object& dispatcherQueueController);
    [CompilerGeneratedAttribute]
private void <WebView2CompositionControl_LocationChanged>b__18_0();
}
