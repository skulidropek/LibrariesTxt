[DebuggerStepThroughAttribute]
public static class System.CommandLine.Rendering.Ansi : object {
    [CompilerGeneratedAttribute]
private static string <Esc>k__BackingField;
    public static string Esc { get; }
    private static Ansi();
    [CompilerGeneratedAttribute]
public static string get_Esc();
}
[DebuggerStepThroughAttribute]
public class System.CommandLine.Rendering.AnsiControlCode : object {
    [CompilerGeneratedAttribute]
private string <EscapeSequence>k__BackingField;
    public string EscapeSequence { get; }
    public AnsiControlCode(string escapeSequence);
    [CompilerGeneratedAttribute]
public string get_EscapeSequence();
    public virtual string ToString();
    public sealed virtual string ToString(string format, IFormatProvider provider);
    protected bool Equals(AnsiControlCode other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public static AnsiControlCode op_Implicit(string sequence);
}
internal class System.CommandLine.Rendering.AnsiRenderingSpanVisitor : ContentRenderingSpanVisitor {
    private static Dictionary`2<string, AnsiControlCode> _foregroundColorControlCodeMappings;
    private static Dictionary`2<string, AnsiControlCode> _backgroundColorControlCodeMappings;
    private static Dictionary`2<string, AnsiControlCode> _styleControlCodeMappings;
    public AnsiRenderingSpanVisitor(IConsole console, Region region);
    private static AnsiRenderingSpanVisitor();
    protected virtual void SetCursorPosition(Nullable`1<int> left, Nullable`1<int> top);
    public virtual void VisitForegroundColorSpan(ForegroundColorSpan span);
    public virtual void VisitBackgroundColorSpan(BackgroundColorSpan span);
    public virtual void VisitStyleSpan(StyleSpan span);
    public virtual void VisitCursorControlSpan(CursorControlSpan cursorControlSpan);
}
public class System.CommandLine.Rendering.BackgroundColorSpan : ColorSpan {
    public BackgroundColorSpan(string name, AnsiControlCode ansiControlCode);
    public BackgroundColorSpan(RgbColor rgbColor);
    public BackgroundColorSpan(byte r, byte g, byte b);
    public static BackgroundColorSpan Reset();
    public static BackgroundColorSpan Black();
    public static BackgroundColorSpan Red();
    public static BackgroundColorSpan Green();
    public static BackgroundColorSpan Yellow();
    public static BackgroundColorSpan Blue();
    public static BackgroundColorSpan Magenta();
    public static BackgroundColorSpan Cyan();
    public static BackgroundColorSpan White();
    public static BackgroundColorSpan DarkGray();
    public static BackgroundColorSpan LightRed();
    public static BackgroundColorSpan LightGreen();
    public static BackgroundColorSpan LightYellow();
    public static BackgroundColorSpan LightBlue();
    public static BackgroundColorSpan LightMagenta();
    public static BackgroundColorSpan LightCyan();
    public static BackgroundColorSpan LightGray();
    public static BackgroundColorSpan Rgb(byte r, byte g, byte b);
}
public abstract class System.CommandLine.Rendering.ColorSpan : ControlSpan {
    [CompilerGeneratedAttribute]
private RgbColor <RgbColor>k__BackingField;
    public RgbColor RgbColor { get; }
    protected ColorSpan(string name, AnsiControlCode ansiControlCode);
    protected ColorSpan(RgbColor rgbColor, AnsiControlCode ansiControlCode);
    [CompilerGeneratedAttribute]
public RgbColor get_RgbColor();
    protected static string GetName(RgbColor rgbColor);
}
[ExtensionAttribute]
public static class System.CommandLine.Rendering.CommandLineBuilderExtensions : object {
    [ExtensionAttribute]
public static CommandLineBuilder UseAnsiTerminalWhenAvailable(CommandLineBuilder builder);
    [ExtensionAttribute]
internal static bool PreferVirtualTerminal(BindingContext context);
    [ExtensionAttribute]
public static OutputMode OutputMode(BindingContext context);
}
[ExtensionAttribute]
public static class System.CommandLine.Rendering.ConsoleExtensions : object {
    [ExtensionAttribute]
public static OutputMode DetectOutputMode(IConsole console);
    [ExtensionAttribute]
public static void Append(IConsole console, View view, OutputMode outputMode);
}
public class System.CommandLine.Rendering.ConsoleFormatInfo : object {
    private static ConsoleFormatInfo s_currentInfo;
    private bool _isReadOnly;
    private bool _supportsAnsiCodes;
    public static ConsoleFormatInfo CurrentInfo { get; public set; }
    public bool SupportsAnsiCodes { get; public set; }
    public bool IsReadOnly { get; }
    public static ConsoleFormatInfo get_CurrentInfo();
    public static void set_CurrentInfo(ConsoleFormatInfo value);
    public bool get_SupportsAnsiCodes();
    public void set_SupportsAnsiCodes(bool value);
    public bool get_IsReadOnly();
    public static ConsoleFormatInfo GetInstance(IFormatProvider formatProvider);
    public sealed virtual object GetFormat(Type formatType);
    public static ConsoleFormatInfo ReadOnly(ConsoleFormatInfo cfi);
    private static ConsoleFormatInfo InitializeCurrentInfo();
    private static bool DoesOperatingSystemSupportAnsi();
    private void VerifyWritable();
    [CompilerGeneratedAttribute]
internal static ConsoleFormatInfo <GetInstance>g__GetProviderNonNull|12_0(IFormatProvider provider);
}
public class System.CommandLine.Rendering.ConsoleRenderer : object {
    private bool _resetAfterRender;
    private IConsole _console;
    private OutputMode _mode;
    private ITerminal _terminal;
    [CompilerGeneratedAttribute]
private TextSpanFormatter <Formatter>k__BackingField;
    public TextSpanFormatter Formatter { get; }
    public ConsoleRenderer(IConsole console, OutputMode mode, bool resetAfterRender);
    [CompilerGeneratedAttribute]
public TextSpanFormatter get_Formatter();
    public void RenderToRegion(object value, Region region);
    public void Append(FormattableString value);
    public void Append(TextSpan span);
    public void RenderToRegion(FormattableString value, Region region);
    public void RenderToRegion(TextSpan span, Region region);
    private void Render(TextSpan span, Region region);
    internal static Size MeasureSpan(TextSpan span, Size maxSize);
    public Region GetRegion();
}
[DefaultMemberAttribute("Item")]
public class System.CommandLine.Rendering.ContainerSpan : TextSpan {
    private List`1<TextSpan> _children;
    public int ContentLength { get; }
    public int Count { get; }
    public TextSpan Item { get; }
    public ContainerSpan(TextSpan[] children);
    public virtual int get_ContentLength();
    public sealed virtual IEnumerator`1<TextSpan> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    public sealed virtual int get_Count();
    public sealed virtual TextSpan get_Item(int index);
    internal virtual void RecalculatePositions(ContainerSpan parent, int start);
    private void RecalculateChildPositions();
    public virtual void WriteTo(TextWriter writer, OutputMode outputMode);
    public void Add(TextSpan child);
    public void Add(string text);
}
internal abstract class System.CommandLine.Rendering.ContentRenderingSpanVisitor : TextSpanVisitor {
    private StringBuilder _buffer;
    private int _positionOnLine;
    private bool _lastSpanEndedWithWhitespace;
    private int _cursorLeft;
    private int _cursorTop;
    [CompilerGeneratedAttribute]
private IStandardStreamWriter <Writer>k__BackingField;
    [CompilerGeneratedAttribute]
private int <LinesWritten>k__BackingField;
    [CompilerGeneratedAttribute]
private Region <Region>k__BackingField;
    protected IStandardStreamWriter Writer { get; }
    protected int LinesWritten { get; private set; }
    protected Region Region { get; }
    protected bool FilledRegionHeight { get; }
    private int RemainingWidthInRegion { get; }
    protected ContentRenderingSpanVisitor(IStandardStreamWriter writer, Region region);
    [CompilerGeneratedAttribute]
protected IStandardStreamWriter get_Writer();
    [CompilerGeneratedAttribute]
protected int get_LinesWritten();
    [CompilerGeneratedAttribute]
private void set_LinesWritten(int value);
    [CompilerGeneratedAttribute]
protected Region get_Region();
    protected virtual void Start(TextSpan span);
    public virtual void VisitContentSpan(ContentSpan span);
    protected virtual void Stop(TextSpan span);
    protected bool get_FilledRegionHeight();
    private int get_RemainingWidthInRegion();
    private void FlushLine();
    protected virtual void TryClearRemainingWidth();
    protected void ClearRemainingWidth();
    protected virtual void ClearRemainingHeight();
    private void Flush();
    private bool TryAppendWord(string value);
    protected virtual bool TryStartNewLine();
    private void TrySetCursorPosition(int left, Nullable`1<int> top);
    protected abstract virtual void SetCursorPosition(Nullable`1<int> left, Nullable`1<int> top);
    [CompilerGeneratedAttribute]
private bool <TryAppendWord>g__WillFitIfEndIsTrimmed|28_0(<>c__DisplayClass28_0& );
}
public class System.CommandLine.Rendering.ContentSpan : TextSpan {
    [CompilerGeneratedAttribute]
private string <Content>k__BackingField;
    public string Content { get; }
    public int ContentLength { get; }
    public ContentSpan(string content);
    [CompilerGeneratedAttribute]
public string get_Content();
    public virtual int get_ContentLength();
    public virtual string ToString();
    protected bool Equals(ContentSpan other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
[DebuggerDisplayAttribute("{Name}")]
public class System.CommandLine.Rendering.ControlSpan : TextSpan {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private AnsiControlCode <AnsiControlCode>k__BackingField;
    public string Name { get; }
    public AnsiControlCode AnsiControlCode { get; }
    public int ContentLength { get; }
    public ControlSpan(string name, AnsiControlCode ansiControlCode);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public AnsiControlCode get_AnsiControlCode();
    public virtual int get_ContentLength();
    public virtual string ToString();
    public virtual void WriteTo(TextWriter writer, OutputMode outputMode);
    protected bool Equals(ControlSpan other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
[DebuggerDisplayAttribute("{Name}")]
public class System.CommandLine.Rendering.CursorControlSpan : ControlSpan {
    public int ContentLength { get; }
    public CursorControlSpan(string name, AnsiControlCode ansiControlCode);
    public virtual int get_ContentLength();
    public static CursorControlSpan Hide();
    public static CursorControlSpan Show();
}
internal class System.CommandLine.Rendering.EntireTerminalRegion : Region {
    public int Height { get; }
    public int Width { get; }
    public int Top { get; }
    public int Left { get; }
    public virtual int get_Height();
    public virtual int get_Width();
    public virtual int get_Top();
    public virtual int get_Left();
}
internal class System.CommandLine.Rendering.FileRenderingSpanVisitor : ContentRenderingSpanVisitor {
    public FileRenderingSpanVisitor(IStandardStreamWriter writer, Region region);
    protected virtual void SetCursorPosition(Nullable`1<int> left, Nullable`1<int> top);
    protected virtual void TryClearRemainingWidth();
}
public class System.CommandLine.Rendering.ForegroundColorSpan : ColorSpan {
    public ForegroundColorSpan(string name, AnsiControlCode ansiControlCode);
    public ForegroundColorSpan(RgbColor rgbColor);
    public ForegroundColorSpan(byte r, byte g, byte b);
    public static ForegroundColorSpan Reset();
    public static ForegroundColorSpan Black();
    public static ForegroundColorSpan Red();
    public static ForegroundColorSpan Green();
    public static ForegroundColorSpan Yellow();
    public static ForegroundColorSpan Blue();
    public static ForegroundColorSpan Magenta();
    public static ForegroundColorSpan Cyan();
    public static ForegroundColorSpan White();
    public static ForegroundColorSpan DarkGray();
    public static ForegroundColorSpan LightRed();
    public static ForegroundColorSpan LightGreen();
    public static ForegroundColorSpan LightYellow();
    public static ForegroundColorSpan LightBlue();
    public static ForegroundColorSpan LightMagenta();
    public static ForegroundColorSpan LightCyan();
    public static ForegroundColorSpan LightGray();
    public static ForegroundColorSpan Rgb(byte r, byte g, byte b);
}
internal static class System.CommandLine.Rendering.Interop : object {
    public static UInt32 ENABLE_VIRTUAL_TERMINAL_PROCESSING;
    public static UInt32 ENABLE_VIRTUAL_TERMINAL_INPUT;
    public static UInt32 DISABLE_NEWLINE_AUTO_RETURN;
    public static int STD_OUTPUT_HANDLE;
    public static int STD_INPUT_HANDLE;
    public static bool GetConsoleMode(IntPtr handle, UInt32& mode);
    public static UInt32 GetLastError();
    public static bool SetConsoleMode(IntPtr handle, UInt32 mode);
    public static IntPtr GetStdHandle(int handle);
}
internal interface System.CommandLine.Rendering.IRenderable {
    public OutputMode OutputMode { get; }
    public abstract virtual OutputMode get_OutputMode();
    public abstract virtual Region GetRegion();
}
public interface System.CommandLine.Rendering.ITerminal {
    public ConsoleColor BackgroundColor { get; public set; }
    public ConsoleColor ForegroundColor { get; public set; }
    public int CursorLeft { get; public set; }
    public int CursorTop { get; public set; }
    public abstract virtual ConsoleColor get_BackgroundColor();
    public abstract virtual void set_BackgroundColor(ConsoleColor value);
    public abstract virtual ConsoleColor get_ForegroundColor();
    public abstract virtual void set_ForegroundColor(ConsoleColor value);
    public abstract virtual void ResetColor();
    public abstract virtual void Clear();
    public abstract virtual int get_CursorLeft();
    public abstract virtual void set_CursorLeft(int value);
    public abstract virtual int get_CursorTop();
    public abstract virtual void set_CursorTop(int value);
    public abstract virtual void SetCursorPosition(int left, int top);
    public abstract virtual void HideCursor();
    public abstract virtual void ShowCursor();
}
internal class System.CommandLine.Rendering.NonAnsiRenderingSpanVisitor : ContentRenderingSpanVisitor {
    [CompilerGeneratedAttribute]
private ITerminal <Terminal>k__BackingField;
    private static Dictionary`2<string, ConsoleColor> _backgroundColorMappings;
    private static Dictionary`2<string, ConsoleColor> _foregroundColorMappings;
    private ITerminal Terminal { get; }
    public NonAnsiRenderingSpanVisitor(ITerminal terminal, Region region);
    private static NonAnsiRenderingSpanVisitor();
    [CompilerGeneratedAttribute]
private ITerminal get_Terminal();
    protected virtual void SetCursorPosition(Nullable`1<int> left, Nullable`1<int> top);
    public virtual void VisitForegroundColorSpan(ForegroundColorSpan span);
    public virtual void VisitBackgroundColorSpan(BackgroundColorSpan span);
    public virtual void VisitCursorControlSpan(CursorControlSpan cursorControlSpan);
}
public enum System.CommandLine.Rendering.OutputMode : Enum {
    public int value__;
    public static OutputMode Auto;
    public static OutputMode NonAnsi;
    public static OutputMode Ansi;
    public static OutputMode PlainText;
}
internal class System.CommandLine.Rendering.RecordingWriter : TextWriter {
    private StringBuilder _stringBuilder;
    [CompilerGeneratedAttribute]
private Action`1<char> CharWritten;
    [CompilerGeneratedAttribute]
private Encoding <Encoding>k__BackingField;
    public Encoding Encoding { get; }
    [CompilerGeneratedAttribute]
public void add_CharWritten(Action`1<char> value);
    [CompilerGeneratedAttribute]
public void remove_CharWritten(Action`1<char> value);
    public virtual void Write(char value);
    [CompilerGeneratedAttribute]
public virtual Encoding get_Encoding();
    public virtual string ToString();
}
public class System.CommandLine.Rendering.Region : object {
    public static Region EntireTerminal;
    public static Region Scrolling;
    [CompilerGeneratedAttribute]
private int <Height>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Width>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Top>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Left>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsOverwrittenOnRender>k__BackingField;
    public int Height { get; }
    public int Width { get; }
    public int Top { get; }
    public int Left { get; }
    public int Bottom { get; }
    public int Right { get; }
    public bool IsOverwrittenOnRender { get; }
    public Region(int left, int top, Nullable`1<int> width, Nullable`1<int> height, bool isOverwrittenOnRender);
    public Region(int left, int top, Size size);
    private static Region();
    [CompilerGeneratedAttribute]
public virtual int get_Height();
    [CompilerGeneratedAttribute]
public virtual int get_Width();
    [CompilerGeneratedAttribute]
public virtual int get_Top();
    [CompilerGeneratedAttribute]
public virtual int get_Left();
    public int get_Bottom();
    public int get_Right();
    [CompilerGeneratedAttribute]
public bool get_IsOverwrittenOnRender();
    public virtual string ToString();
}
public class System.CommandLine.Rendering.RgbColor : object {
    [CompilerGeneratedAttribute]
private byte <Red>k__BackingField;
    [CompilerGeneratedAttribute]
private byte <Green>k__BackingField;
    [CompilerGeneratedAttribute]
private byte <Blue>k__BackingField;
    public byte Red { get; }
    public byte Green { get; }
    public byte Blue { get; }
    public RgbColor(byte r, byte g, byte b);
    [CompilerGeneratedAttribute]
public byte get_Red();
    [CompilerGeneratedAttribute]
public byte get_Green();
    [CompilerGeneratedAttribute]
public byte get_Blue();
}
internal class System.CommandLine.Rendering.ScrollingTerminalRegion : Region {
    public int Height { get; }
    public int Width { get; }
    public int Top { get; }
    public int Left { get; }
    public virtual int get_Height();
    public virtual int get_Width();
    public virtual int get_Top();
    public virtual int get_Left();
}
[DebuggerDisplayAttribute("{Width}x{Height}")]
public class System.CommandLine.Rendering.Size : object {
    public static int MaxValue;
    [CompilerGeneratedAttribute]
private int <Width>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Height>k__BackingField;
    public int Width { get; }
    public int Height { get; }
    public Size(int width, int height);
    [CompilerGeneratedAttribute]
public int get_Width();
    [CompilerGeneratedAttribute]
public int get_Height();
}
internal class System.CommandLine.Rendering.SpanMeasuringVisitor : TextSpanVisitor {
    private bool _LastSpanEndedWithWhitespace;
    private int _PositionOnLine;
    [CompilerGeneratedAttribute]
private int <Width>k__BackingField;
    [CompilerGeneratedAttribute]
private int <LinesWritten>k__BackingField;
    [CompilerGeneratedAttribute]
private Region <Region>k__BackingField;
    private int PositionOnLine { get; private set; }
    public int Width { get; private set; }
    public int Height { get; }
    private int LinesWritten { get; private set; }
    private Region Region { get; }
    private bool FilledRegionHeight { get; }
    private int RemainingWidthInRegion { get; }
    public SpanMeasuringVisitor(Region region);
    private int get_PositionOnLine();
    private void set_PositionOnLine(int value);
    [CompilerGeneratedAttribute]
public int get_Width();
    [CompilerGeneratedAttribute]
private void set_Width(int value);
    public int get_Height();
    [CompilerGeneratedAttribute]
private int get_LinesWritten();
    [CompilerGeneratedAttribute]
private void set_LinesWritten(int value);
    [CompilerGeneratedAttribute]
private Region get_Region();
    public virtual void VisitContentSpan(ContentSpan span);
    protected virtual void Stop(TextSpan span);
    private bool get_FilledRegionHeight();
    private int get_RemainingWidthInRegion();
    private void FlushLine();
    private bool TryAppendWord(string value);
    private bool TryStartNewLine();
    [CompilerGeneratedAttribute]
private bool <TryAppendWord>g__WillFitIfEndIsTrimmed|26_0(<>c__DisplayClass26_0& );
}
[ExtensionAttribute]
internal static class System.CommandLine.Rendering.StringExtensions : object {
    [ExtensionAttribute]
public static bool EndsWithWhitespace(string value);
    [ExtensionAttribute]
public static bool StartsWithWhitespace(string value);
    [ExtensionAttribute]
public static bool IsNewLine(string value);
}
public class System.CommandLine.Rendering.StyleSpan : ControlSpan {
    public StyleSpan(string name, AnsiControlCode ansiControlCode);
    public static StyleSpan AttributesOff();
    public static StyleSpan BlinkOff();
    public static StyleSpan BlinkOn();
    public static StyleSpan BoldOff();
    public static StyleSpan BoldOn();
    public static StyleSpan HiddenOn();
    public static StyleSpan ReverseOn();
    public static StyleSpan ReverseOff();
    public static StyleSpan StandoutOff();
    public static StyleSpan StandoutOn();
    public static StyleSpan UnderlinedOff();
    public static StyleSpan UnderlinedOn();
}
public class System.CommandLine.Rendering.SystemConsoleTerminal : TerminalBase {
    private ConsoleColor _initialForegroundColor;
    private ConsoleColor _initialBackgroundColor;
    public ConsoleColor BackgroundColor { get; public set; }
    public ConsoleColor ForegroundColor { get; public set; }
    public int CursorLeft { get; public set; }
    public int CursorTop { get; public set; }
    public SystemConsoleTerminal(IConsole console);
    public virtual void Clear();
    public virtual ConsoleColor get_BackgroundColor();
    public virtual void set_BackgroundColor(ConsoleColor value);
    public virtual ConsoleColor get_ForegroundColor();
    public virtual void set_ForegroundColor(ConsoleColor value);
    public virtual int get_CursorLeft();
    public virtual void set_CursorLeft(int value);
    public virtual int get_CursorTop();
    public virtual void set_CursorTop(int value);
    public virtual void ResetColor();
    private void RestoreConsoleSettings();
    public virtual void SetCursorPosition(int left, int top);
    protected virtual void Dispose(bool disposing);
    public virtual void HideCursor();
    public virtual void ShowCursor();
}
[ExtensionAttribute]
public static class System.CommandLine.Rendering.Terminal : object {
    [ExtensionAttribute]
public static void Render(ITerminal terminal, TextSpan span, Region region);
    [ExtensionAttribute]
public static void Render(ITerminal terminal, FormattableString value, Region region);
    [ExtensionAttribute]
public static ITerminal GetTerminal(IConsole console, bool preferVirtualTerminal, OutputMode outputMode);
}
public abstract class System.CommandLine.Rendering.TerminalBase : object {
    [CompilerGeneratedAttribute]
private IConsole <Console>k__BackingField;
    [CompilerGeneratedAttribute]
private OutputMode <OutputMode>k__BackingField;
    public int CursorLeft { get; public set; }
    public int CursorTop { get; public set; }
    public IConsole Console { get; }
    public OutputMode OutputMode { get; public set; }
    public ConsoleColor BackgroundColor { get; public set; }
    public ConsoleColor ForegroundColor { get; public set; }
    public IStandardStreamWriter Out { get; }
    public IStandardStreamWriter Error { get; }
    public bool IsOutputRedirected { get; }
    public bool IsErrorRedirected { get; }
    public bool IsInputRedirected { get; }
    protected TerminalBase(IConsole console);
    public abstract virtual void Clear();
    public abstract virtual int get_CursorLeft();
    public abstract virtual void set_CursorLeft(int value);
    public abstract virtual int get_CursorTop();
    public abstract virtual void set_CursorTop(int value);
    [CompilerGeneratedAttribute]
public IConsole get_Console();
    public abstract virtual void SetCursorPosition(int left, int top);
    [CompilerGeneratedAttribute]
public sealed virtual OutputMode get_OutputMode();
    [CompilerGeneratedAttribute]
public void set_OutputMode(OutputMode value);
    public virtual Region GetRegion();
    public abstract virtual ConsoleColor get_BackgroundColor();
    public abstract virtual void set_BackgroundColor(ConsoleColor value);
    public abstract virtual ConsoleColor get_ForegroundColor();
    public abstract virtual void set_ForegroundColor(ConsoleColor value);
    public abstract virtual void ResetColor();
    public sealed virtual IStandardStreamWriter get_Out();
    public sealed virtual IStandardStreamWriter get_Error();
    public sealed virtual bool get_IsOutputRedirected();
    public sealed virtual bool get_IsErrorRedirected();
    public sealed virtual bool get_IsInputRedirected();
    protected virtual void Dispose(bool disposing);
    public sealed virtual void Dispose();
    public abstract virtual void HideCursor();
    public abstract virtual void ShowCursor();
}
public class System.CommandLine.Rendering.TestTerminal : object {
    private int _cursorLeft;
    private int _cursorTop;
    private List`1<ConsoleEvent> _events;
    private StringBuilder _outBuffer;
    private StringBuilder _ansiCodeBuffer;
    private ConsoleColor _backgroundColor;
    private ConsoleColor _foregroundColor;
    private RecordingWriter _out;
    private RecordingWriter _error;
    [CompilerGeneratedAttribute]
private bool <IsOutputRedirected>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsErrorRedirected>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsInputRedirected>k__BackingField;
    [CompilerGeneratedAttribute]
private OutputMode <OutputMode>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Height>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Width>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsAnsiTerminal>k__BackingField;
    public IStandardStreamWriter Out { get; }
    public IStandardStreamWriter Error { get; }
    public bool IsOutputRedirected { get; public set; }
    public bool IsErrorRedirected { get; public set; }
    public bool IsInputRedirected { get; public set; }
    public OutputMode OutputMode { get; public set; }
    public int Height { get; public set; }
    public int Width { get; public set; }
    public int CursorLeft { get; public set; }
    public int CursorTop { get; public set; }
    public IEnumerable`1<ConsoleEvent> Events { get; }
    private string UnflushedOutput { get; }
    public ConsoleColor BackgroundColor { get; public set; }
    public ConsoleColor ForegroundColor { get; public set; }
    public bool IsAnsiTerminal { get; public set; }
    public sealed virtual IStandardStreamWriter get_Out();
    public sealed virtual IStandardStreamWriter get_Error();
    [CompilerGeneratedAttribute]
public sealed virtual bool get_IsOutputRedirected();
    [CompilerGeneratedAttribute]
public void set_IsOutputRedirected(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_IsErrorRedirected();
    [CompilerGeneratedAttribute]
public void set_IsErrorRedirected(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_IsInputRedirected();
    [CompilerGeneratedAttribute]
public void set_IsInputRedirected(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual OutputMode get_OutputMode();
    [CompilerGeneratedAttribute]
public void set_OutputMode(OutputMode value);
    private void OnCharWrittenToOut(char c);
    [CompilerGeneratedAttribute]
public int get_Height();
    [CompilerGeneratedAttribute]
public void set_Height(int value);
    [CompilerGeneratedAttribute]
public int get_Width();
    [CompilerGeneratedAttribute]
public void set_Width(int value);
    public virtual void ResetColor();
    public sealed virtual Region GetRegion();
    public sealed virtual void Clear();
    public sealed virtual int get_CursorLeft();
    public sealed virtual void set_CursorLeft(int value);
    public sealed virtual int get_CursorTop();
    public sealed virtual void set_CursorTop(int value);
    [IteratorStateMachineAttribute("System.CommandLine.Rendering.TestTerminal/<get_Events>d__49")]
public IEnumerable`1<ConsoleEvent> get_Events();
    public sealed virtual void SetCursorPosition(int left, int top);
    private void RecordEvent(ConsoleEvent event);
    private void TryFlushTextWrittenEvent();
    private string get_UnflushedOutput();
    public virtual ConsoleColor get_BackgroundColor();
    public virtual void set_BackgroundColor(ConsoleColor value);
    public virtual ConsoleColor get_ForegroundColor();
    public virtual void set_ForegroundColor(ConsoleColor value);
    [CompilerGeneratedAttribute]
public bool get_IsAnsiTerminal();
    [CompilerGeneratedAttribute]
public void set_IsAnsiTerminal(bool value);
    [IteratorStateMachineAttribute("System.CommandLine.Rendering.TestTerminal/<RenderOperations>d__65")]
public IEnumerable`1<TextRendered> RenderOperations();
    public sealed virtual void HideCursor();
    public sealed virtual void ShowCursor();
}
public class System.CommandLine.Rendering.TextRendered : object {
    [CompilerGeneratedAttribute]
private string <Text>k__BackingField;
    [CompilerGeneratedAttribute]
private Point <Position>k__BackingField;
    public string Text { get; }
    public Point Position { get; }
    public TextRendered(string text, Point position);
    [CompilerGeneratedAttribute]
public string get_Text();
    [CompilerGeneratedAttribute]
public Point get_Position();
}
public abstract class System.CommandLine.Rendering.TextSpan : object {
    private TextSpan _root;
    [CompilerGeneratedAttribute]
private ContainerSpan <Parent>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Start>k__BackingField;
    public int ContentLength { get; }
    public TextSpan Root { get; }
    public ContainerSpan Parent { get; private set; }
    public int Start { get; private set; }
    public int End { get; }
    public static TextSpan Empty();
    public abstract virtual int get_ContentLength();
    public TextSpan get_Root();
    [CompilerGeneratedAttribute]
public ContainerSpan get_Parent();
    [CompilerGeneratedAttribute]
private void set_Parent(ContainerSpan value);
    [CompilerGeneratedAttribute]
public int get_Start();
    [CompilerGeneratedAttribute]
private void set_Start(int value);
    public int get_End();
    internal virtual void RecalculatePositions(ContainerSpan parent, int start);
    public virtual string ToString();
    public virtual string ToString(OutputMode outputMode);
    public virtual void WriteTo(TextWriter writer, OutputMode outputMode);
}
public class System.CommandLine.Rendering.TextSpanFormatter : object {
    private static Regex _formattableStringParser;
    private Dictionary`2<Type, Func`2<object, TextSpan>> _formatters;
    private static TextSpanFormatter();
    public void AddFormatter(Func`2<T, TextSpan> format);
    public TextSpan Format(object value);
    public void AddFormatter(Func`2<T, FormattableString> format);
    private sealed virtual override object System.IFormatProvider.GetFormat(Type formatType);
    private sealed virtual override string System.ICustomFormatter.Format(string format, object arg, IFormatProvider formatProvider);
    public TextSpan ParseToSpan(FormattableString formattableString);
}
public abstract class System.CommandLine.Rendering.TextSpanVisitor : object {
    public void Visit(TextSpan span);
    private void VisitInternal(TextSpan span);
    protected virtual void Start(TextSpan span);
    protected virtual void Stop(TextSpan span);
    public virtual void VisitUnknownSpan(TextSpan span);
    public virtual void VisitContainerSpan(ContainerSpan containerSpan);
    public virtual void VisitContentSpan(ContentSpan contentSpan);
    public virtual void VisitForegroundColorSpan(ForegroundColorSpan span);
    public virtual void VisitBackgroundColorSpan(BackgroundColorSpan span);
    public virtual void VisitStyleSpan(StyleSpan span);
    public virtual void VisitCursorControlSpan(CursorControlSpan cursorControlSpan);
}
public class System.CommandLine.Rendering.Views.ColumnDefinition : object {
    [CompilerGeneratedAttribute]
private SizeMode <SizeMode>k__BackingField;
    [CompilerGeneratedAttribute]
private double <Value>k__BackingField;
    public SizeMode SizeMode { get; }
    public double Value { get; }
    private ColumnDefinition(SizeMode sizeMode, double value);
    [CompilerGeneratedAttribute]
public SizeMode get_SizeMode();
    [CompilerGeneratedAttribute]
public double get_Value();
    public static ColumnDefinition Fixed(int size);
    public static ColumnDefinition Star(double weight);
    public static ColumnDefinition SizeToContent();
}
public class System.CommandLine.Rendering.Views.ContentView : View {
    [CompilerGeneratedAttribute]
private TextSpan <Span>k__BackingField;
    protected TextSpan Span { get; protected set; }
    public ContentView(string content);
    public ContentView(TextSpan span);
    [CompilerGeneratedAttribute]
protected TextSpan get_Span();
    [CompilerGeneratedAttribute]
protected void set_Span(TextSpan value);
    public virtual void Render(ConsoleRenderer renderer, Region region);
    public virtual Size Measure(ConsoleRenderer renderer, Size maxSize);
    protected void Observe(IObservable`1<T> observable, Func`2<T, FormattableString> formatProvider);
    public static ContentView FromObservable(IObservable`1<T> observable, Func`2<T, FormattableString> formatProvider);
    internal static ContentView Create(object content, TextSpanFormatter formatter);
    private static ContentView CreateView(string stringContent, TextSpanFormatter _);
    private static ContentView CreateView(TextSpan span, TextSpanFormatter _);
    private static ContentView CreateView(IObservable`1<T> observable, TextSpanFormatter _);
    private static ContentView CreateView(object value, TextSpanFormatter formatter);
}
public class System.CommandLine.Rendering.Views.ContentView`1 : ContentView {
    [CompilerGeneratedAttribute]
private T <Value>k__BackingField;
    public T Value { get; }
    public ContentView`1(T value);
    [CompilerGeneratedAttribute]
public T get_Value();
    public virtual Size Measure(ConsoleRenderer renderer, Size maxSize);
    public virtual void Render(ConsoleRenderer renderer, Region region);
    private void EnsureSpanCreated(ConsoleRenderer renderer);
}
public class System.CommandLine.Rendering.Views.GridView : LayoutView`1<View> {
    private List`1<ColumnDefinition> _columns;
    private List`1<RowDefinition> _rows;
    private int _gutterWidth;
    [CompilerGeneratedAttribute]
private View[0...,0...] <ChildLocations>k__BackingField;
    private View[0...,0...] ChildLocations { get; private set; }
    [CompilerGeneratedAttribute]
private View[0...,0...] get_ChildLocations();
    [CompilerGeneratedAttribute]
private void set_ChildLocations(View[0...,0...] value);
    public void SetChild(View child, int column, int row);
    public virtual void Add(View child);
    public void SetColumns(ColumnDefinition[] columns);
    public void SetRows(RowDefinition[] rows);
    public virtual Size Measure(ConsoleRenderer renderer, Size maxSize);
    public virtual void Render(ConsoleRenderer renderer, Region region);
    private Size[0...,0...] GetGridSizes(ConsoleRenderer renderer, Size maxSize);
    private static int GetProcessOrder(SizeMode sizeMode);
}
public interface System.CommandLine.Rendering.Views.ITableViewColumn`1 {
    public ColumnDefinition ColumnDefinition { get; }
    public View Header { get; }
    public abstract virtual ColumnDefinition get_ColumnDefinition();
    public abstract virtual View get_Header();
    public abstract virtual View GetCell(T item, TextSpanFormatter formatter);
}
public abstract class System.CommandLine.Rendering.Views.ItemsView`1 : View {
    private IReadOnlyList`1<TItem> _items;
    public IReadOnlyList`1<TItem> Items { get; public set; }
    public virtual IReadOnlyList`1<TItem> get_Items();
    public virtual void set_Items(IReadOnlyList`1<TItem> value);
}
public abstract class System.CommandLine.Rendering.Views.LayoutView`1 : View {
    private List`1<T> _children;
    public IReadOnlyList`1<T> Children { get; }
    public IReadOnlyList`1<T> get_Children();
    public virtual void Add(T child);
    public virtual void Clear();
    public virtual bool Remove(T child);
    protected virtual void OnChildUpdated(object sender, EventArgs e);
    public sealed virtual IEnumerator`1<T> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
}
public enum System.CommandLine.Rendering.Views.Orientation : Enum {
    public int value__;
    public static Orientation Vertical;
    public static Orientation Horizontal;
}
public class System.CommandLine.Rendering.Views.RowDefinition : object {
    [CompilerGeneratedAttribute]
private double <Value>k__BackingField;
    [CompilerGeneratedAttribute]
private SizeMode <SizeMode>k__BackingField;
    public double Value { get; }
    public SizeMode SizeMode { get; }
    private RowDefinition(SizeMode sizeMode, double value);
    [CompilerGeneratedAttribute]
public double get_Value();
    [CompilerGeneratedAttribute]
public SizeMode get_SizeMode();
    public static RowDefinition Fixed(int size);
    public static RowDefinition Star(double weight);
    public static RowDefinition SizeToContent();
}
public class System.CommandLine.Rendering.Views.ScreenView : object {
    private IConsole _console;
    private View _child;
    private int _renderRequested;
    private int _renderInProgress;
    private SynchronizationContext _context;
    [CompilerGeneratedAttribute]
private ConsoleRenderer <Renderer>k__BackingField;
    private ConsoleRenderer Renderer { get; }
    public View Child { get; public set; }
    public ScreenView(ConsoleRenderer renderer, IConsole console, SynchronizationContext synchronizationContext);
    [CompilerGeneratedAttribute]
private ConsoleRenderer get_Renderer();
    public View get_Child();
    public void set_Child(View value);
    private void ChildUpdated(object sender, EventArgs e);
    public void Render(Region region);
    public void Render();
    public sealed virtual void Dispose();
    [CompilerGeneratedAttribute]
private void <ChildUpdated>b__12_0(object x);
}
public enum System.CommandLine.Rendering.Views.SizeMode : Enum {
    public int value__;
    public static SizeMode Fixed;
    public static SizeMode Star;
    public static SizeMode SizeToContent;
}
public class System.CommandLine.Rendering.Views.StackLayoutView : LayoutView`1<View> {
    [CompilerGeneratedAttribute]
private Orientation <Orientation>k__BackingField;
    public Orientation Orientation { get; }
    public StackLayoutView(Orientation orientation);
    [CompilerGeneratedAttribute]
public Orientation get_Orientation();
    public virtual void Render(ConsoleRenderer renderer, Region region);
    private void RenderVertical(Region region, ConsoleRenderer renderer);
    private void RenderHorizontal(Region region, ConsoleRenderer renderer);
    public virtual Size Measure(ConsoleRenderer renderer, Size maxSize);
    private Size GetAdjustedSizeVertical(ConsoleRenderer renderer, Size maxSize);
    private Size GetAdjustedSizeHorizontal(ConsoleRenderer renderer, Size maxSize);
}
public class System.CommandLine.Rendering.Views.TableView`1 : ItemsView`1<TItem> {
    private bool _gridInitialized;
    [CompilerGeneratedAttribute]
private GridView <Layout>k__BackingField;
    private List`1<ITableViewColumn`1<TItem>> _columns;
    public IReadOnlyList`1<TItem> Items { get; public set; }
    private GridView Layout { get; }
    public IReadOnlyList`1<ITableViewColumn`1<TItem>> Columns { get; }
    public virtual IReadOnlyList`1<TItem> get_Items();
    public virtual void set_Items(IReadOnlyList`1<TItem> value);
    [CompilerGeneratedAttribute]
private GridView get_Layout();
    public IReadOnlyList`1<ITableViewColumn`1<TItem>> get_Columns();
    private void OnLayoutUpdated(object sender, EventArgs e);
    public void AddColumn(Func`2<TItem, T> cellValue, string header, ColumnDefinition column);
    public void AddColumn(Func`2<TItem, T> cellValue, View header, ColumnDefinition column);
    public void AddColumn(ITableViewColumn`1<TItem> column);
    public virtual void Render(ConsoleRenderer renderer, Region region);
    public virtual Size Measure(ConsoleRenderer renderer, Size maxSize);
    private void EnsureInitialized(ConsoleRenderer renderer);
}
public abstract class System.CommandLine.Rendering.Views.View : object {
    [CompilerGeneratedAttribute]
private EventHandler Updated;
    [CompilerGeneratedAttribute]
public void add_Updated(EventHandler value);
    [CompilerGeneratedAttribute]
public void remove_Updated(EventHandler value);
    public abstract virtual void Render(ConsoleRenderer renderer, Region region);
    public abstract virtual Size Measure(ConsoleRenderer renderer, Size maxSize);
    protected void OnUpdated();
}
public class System.CommandLine.Rendering.VirtualTerminal : TerminalBase {
    private VirtualTerminalMode _virtualTerminalMode;
    [CompilerGeneratedAttribute]
private ConsoleColor <BackgroundColor>k__BackingField;
    [CompilerGeneratedAttribute]
private ConsoleColor <ForegroundColor>k__BackingField;
    public ConsoleColor BackgroundColor { get; public set; }
    public ConsoleColor ForegroundColor { get; public set; }
    public int CursorLeft { get; public set; }
    public int CursorTop { get; public set; }
    public VirtualTerminal(IConsole console, VirtualTerminalMode virtualTerminalMode);
    [CompilerGeneratedAttribute]
public virtual ConsoleColor get_BackgroundColor();
    [CompilerGeneratedAttribute]
public virtual void set_BackgroundColor(ConsoleColor value);
    [CompilerGeneratedAttribute]
public virtual ConsoleColor get_ForegroundColor();
    [CompilerGeneratedAttribute]
public virtual void set_ForegroundColor(ConsoleColor value);
    public virtual void ResetColor();
    public virtual void Clear();
    public virtual int get_CursorLeft();
    public virtual void set_CursorLeft(int value);
    public virtual int get_CursorTop();
    public virtual void set_CursorTop(int value);
    protected virtual void Dispose(bool disposing);
    public virtual void SetCursorPosition(int left, int top);
    public virtual void HideCursor();
    public virtual void ShowCursor();
}
public class System.CommandLine.Rendering.VirtualTerminalMode : object {
    private IntPtr _stdOutHandle;
    private IntPtr _stdInHandle;
    private UInt32 _originalOutputMode;
    private UInt32 _originalInputMode;
    [CompilerGeneratedAttribute]
private Nullable`1<UInt32> <Error>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsEnabled>k__BackingField;
    public Nullable`1<UInt32> Error { get; }
    public bool IsEnabled { get; }
    private VirtualTerminalMode(bool isEnabled, Nullable`1<UInt32> error);
    private VirtualTerminalMode(IntPtr stdOutHandle, UInt32 originalOutputMode, IntPtr stdInHandle, UInt32 originalInputMode);
    [CompilerGeneratedAttribute]
public Nullable`1<UInt32> get_Error();
    [CompilerGeneratedAttribute]
public bool get_IsEnabled();
    public static VirtualTerminalMode TryEnable();
    private void RestoreConsoleMode();
    public sealed virtual void Dispose();
    protected virtual override void Finalize();
}
[ExtensionAttribute]
internal static class System.CommandLine.Rendering.WrappingExtensions : object {
    [IteratorStateMachineAttribute("System.CommandLine.Rendering.WrappingExtensions/<SplitForWrapping>d__0")]
[ExtensionAttribute]
public static IEnumerable`1<string> SplitForWrapping(string text);
}
