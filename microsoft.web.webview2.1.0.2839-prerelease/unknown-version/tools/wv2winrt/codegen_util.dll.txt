public class winmd_code_gen.ErrorListener : object {
    [CompilerGeneratedAttribute]
private bool <ErrorFound>k__BackingField;
    public bool ErrorFound { get; private set; }
    [CompilerGeneratedAttribute]
public bool get_ErrorFound();
    [CompilerGeneratedAttribute]
private void set_ErrorFound(bool value);
    public sealed virtual void CompiletimeError(TemplateMessage msg);
    public sealed virtual void InternalError(TemplateMessage msg);
    public sealed virtual void IOError(TemplateMessage msg);
    public sealed virtual void RuntimeError(TemplateMessage msg);
    public void ThrowIfErrorFound();
}
public class winmd_code_gen.MultipartTextWriter : TextWriter {
    private static string s_NameMarker;
    private StringBuilder m_Buffer;
    private TextWriter m_Inner;
    private string m_OutputFolderPath;
    private bool m_Verbose;
    private HashSet`1<string> m_FoundFileNames;
    public Encoding Encoding { get; }
    public MultipartTextWriter(string outputPath, bool verbose);
    private void CheckForNewlinesInBuffer(bool finalLine);
    public virtual Encoding get_Encoding();
    public virtual void Write(char value);
    public virtual void Write(string value);
    public virtual void WriteLine(string value);
    public virtual void WriteLine(Char[] buffer);
    public virtual void Write(Char[] buffer, int index, int count);
    public virtual void Close();
}
public class winmd_code_gen.ResourceHelper : object {
    public static Dictionary`2<string, object> GetResourcesDictionary(ResourceKind kind);
    public static string GetResourceAsString(string resourceName);
    public static String[] GetResourceNamesEndingWith(string end);
}
public class winmd_code_gen.TemplateHelper : object {
    public static void WriteTemplate(Template template, string outputFolderPath, bool verbose);
}
