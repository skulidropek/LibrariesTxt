public class winmd_code_gen.GuidHelper : object {
    public static Guid GenerateNameBasedUuid(Guid namespaceGuid, string name);
}
public interface winmd_code_gen.ITHDispatchProperty {
    public string NameAsPropertyName { get; }
    public UInt32 Id { get; }
    public abstract virtual string get_NameAsPropertyName();
    public abstract virtual UInt32 get_Id();
}
public class winmd_code_gen.MatchedMethod : object {
    public THType parentInterface;
    public MethodDef methodDef;
}
public class winmd_code_gen.THBase : WV2Metadata {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TargetTypeName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <CppWinRTTypeName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <COMTypeName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <CsharpTypeName>k__BackingField;
    [CompilerGeneratedAttribute]
private UInt32 <Id>k__BackingField;
    public string Name { get; protected set; }
    public string Namespace { get; }
    public string LeafName { get; }
    public string TargetTypeName { get; protected set; }
    public string CppWinRTTypeName { get; protected set; }
    public string COMTypeName { get; protected set; }
    public string CsharpTypeName { get; protected set; }
    public string TargetFileName { get; }
    public UInt32 Id { get; }
    public string NameAsPropertyName { get; }
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
protected void set_Name(string value);
    public string get_Namespace();
    public string get_LeafName();
    [CompilerGeneratedAttribute]
public string get_TargetTypeName();
    [CompilerGeneratedAttribute]
protected void set_TargetTypeName(string value);
    [CompilerGeneratedAttribute]
public string get_CppWinRTTypeName();
    [CompilerGeneratedAttribute]
protected void set_CppWinRTTypeName(string value);
    [CompilerGeneratedAttribute]
public string get_COMTypeName();
    [CompilerGeneratedAttribute]
protected void set_COMTypeName(string value);
    [CompilerGeneratedAttribute]
public string get_CsharpTypeName();
    [CompilerGeneratedAttribute]
protected void set_CsharpTypeName(string value);
    public virtual string get_TargetFileName();
    [CompilerGeneratedAttribute]
public sealed virtual UInt32 get_Id();
    public sealed virtual string get_NameAsPropertyName();
}
public class winmd_code_gen.THClass : THBase {
    [CompilerGeneratedAttribute]
private IEnumerable`1<THMethodGroup> <MethodsGroupedByName>k__BackingField;
    private THRoot m_root;
    [CompilerGeneratedAttribute]
private List`1<THMethod> <ConstructorMethods>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<THMethodGroup> <StaticMethodsGroupedByName>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<THProperty> <Properties>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<THProperty> <StaticProperties>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<THProperty> <CacheableProperties>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<THProperty> <PrecacheableProperties>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<THEvent> <Events>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<THEvent> <StaticEvents>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ParentInterfaceName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <WebView2InterfaceCategory>k__BackingField;
    [CompilerGeneratedAttribute]
private int <WebView2InterfaceVersion>k__BackingField;
    [CompilerGeneratedAttribute]
private THInterface <PrimaryInterface>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsCollection>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsCollectionReadWrite>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsCollectionMap>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsCollectionVector>k__BackingField;
    [CompilerGeneratedAttribute]
private THType <CollectionValueType>k__BackingField;
    [CompilerGeneratedAttribute]
private THType <ClassTHType>k__BackingField;
    private bool m_useJavascriptCase;
    private string m_availabilityFromComInterfaceName;
    private List`1<THInterface> m_deprecatedInterfaces;
    public IEnumerable`1<THMethodGroup> MethodsGroupedByName { get; private set; }
    public IEnumerable`1<THMethod> AsyncMethods { get; }
    public string Availability { get; }
    public bool HasConstructor { get; }
    public bool HasConstructorOrStaticMethods { get; }
    public List`1<THMethod> ConstructorMethods { get; private set; }
    public IEnumerable`1<THMethodGroup> StaticMethodsGroupedByName { get; private set; }
    public IEnumerable`1<THProperty> Properties { get; private set; }
    public IEnumerable`1<THProperty> StaticProperties { get; private set; }
    public IEnumerable`1<THProperty> CacheableProperties { get; private set; }
    public bool HasCacheableProperties { get; }
    public IEnumerable`1<THProperty> PrecacheableProperties { get; private set; }
    public List`1<ITHDispatchProperty> DispatchProperties { get; }
    public List`1<ITHDispatchProperty> StaticDispatchProperties { get; }
    public int PropertyIdOffset { get; }
    public int EventIdOffset { get; }
    public int ExtensionIdOffset { get; }
    public IEnumerable`1<THEvent> Events { get; private set; }
    public bool HasEvents { get; }
    public IEnumerable`1<THEvent> StaticEvents { get; private set; }
    public bool HasStaticEvents { get; }
    public bool IsInterface { get; }
    public string ParentInterfaceName { get; private set; }
    public string WebView2InterfaceCategory { get; private set; }
    public int WebView2InterfaceVersion { get; private set; }
    public bool HasMembers { get; }
    public bool IsEventArgs { get; }
    public bool ShouldSkip { get; }
    public bool ShouldUseLegacyComInterface { get; }
    public bool ShouldSkipClass { get; }
    public ContextKind ContextKind { get; }
    public Guid InterfaceGuid { get; }
    public string ExclusiveToLeafName { get; }
    public THInterface PrimaryInterface { get; private set; }
    public THInterface FallbackInterface { get; }
    public IEnumerable`1<THInterface> DeprecatedInterfaces { get; }
    public bool IsStatic { get; }
    public bool IsStaticOnly { get; }
    public bool IsCollection { get; private set; }
    public bool IsCollectionReadWrite { get; private set; }
    public bool IsCollectionMap { get; private set; }
    public bool IsCollectionVector { get; private set; }
    public THType CollectionValueType { get; private set; }
    public THType ClassTHType { get; private set; }
    private TypeDef WinMDTypeDef { get; }
    public THClass(THRoot root, THType thType);
    private void EnsureParentInterfacesAndGenericTypeParameters();
    [IteratorStateMachineAttribute("winmd_code_gen.THClass/<GroupMethodsByName>d__2")]
private static IEnumerable`1<THMethodGroup> GroupMethodsByName(IEnumerable`1<THMethod> methods);
    [IteratorStateMachineAttribute("winmd_code_gen.THClass/<GetMethodsNoCache>d__3")]
private IEnumerable`1<THMethod> GetMethodsNoCache(bool staticMethods);
    [CompilerGeneratedAttribute]
public IEnumerable`1<THMethodGroup> get_MethodsGroupedByName();
    [CompilerGeneratedAttribute]
private void set_MethodsGroupedByName(IEnumerable`1<THMethodGroup> value);
    public IEnumerable`1<THMethod> get_AsyncMethods();
    private IEnumerable`1<THMethod> GetCustomAttributeMethods(string attributeNamespace, string attributeName);
    public virtual string get_Availability();
    public bool get_HasConstructor();
    public bool get_HasConstructorOrStaticMethods();
    [CompilerGeneratedAttribute]
public List`1<THMethod> get_ConstructorMethods();
    [CompilerGeneratedAttribute]
private void set_ConstructorMethods(List`1<THMethod> value);
    [CompilerGeneratedAttribute]
public IEnumerable`1<THMethodGroup> get_StaticMethodsGroupedByName();
    [CompilerGeneratedAttribute]
private void set_StaticMethodsGroupedByName(IEnumerable`1<THMethodGroup> value);
    [CompilerGeneratedAttribute]
public IEnumerable`1<THProperty> get_Properties();
    [CompilerGeneratedAttribute]
private void set_Properties(IEnumerable`1<THProperty> value);
    [CompilerGeneratedAttribute]
public IEnumerable`1<THProperty> get_StaticProperties();
    [CompilerGeneratedAttribute]
private void set_StaticProperties(IEnumerable`1<THProperty> value);
    [CompilerGeneratedAttribute]
public IEnumerable`1<THProperty> get_CacheableProperties();
    [CompilerGeneratedAttribute]
private void set_CacheableProperties(IEnumerable`1<THProperty> value);
    public bool get_HasCacheableProperties();
    [CompilerGeneratedAttribute]
public IEnumerable`1<THProperty> get_PrecacheableProperties();
    [CompilerGeneratedAttribute]
private void set_PrecacheableProperties(IEnumerable`1<THProperty> value);
    public List`1<ITHDispatchProperty> get_DispatchProperties();
    public List`1<ITHDispatchProperty> get_StaticDispatchProperties();
    private MethodKind GetMethodKind(string methodName);
    public List`1<MatchedMethod> GetMatchingMethods(MethodKind kind, bool staticMethods, bool specialMethods);
    public int get_PropertyIdOffset();
    [IteratorStateMachineAttribute("winmd_code_gen.THClass/<GetPropertiesNoCache>d__53")]
private IEnumerable`1<THProperty> GetPropertiesNoCache(bool staticProperties);
    public int get_EventIdOffset();
    public int get_ExtensionIdOffset();
    [IteratorStateMachineAttribute("winmd_code_gen.THClass/<GetEventsNoCache>d__58")]
private IEnumerable`1<THEvent> GetEventsNoCache(bool staticProperties);
    [CompilerGeneratedAttribute]
public IEnumerable`1<THEvent> get_Events();
    [CompilerGeneratedAttribute]
private void set_Events(IEnumerable`1<THEvent> value);
    public bool get_HasEvents();
    [CompilerGeneratedAttribute]
public IEnumerable`1<THEvent> get_StaticEvents();
    [CompilerGeneratedAttribute]
private void set_StaticEvents(IEnumerable`1<THEvent> value);
    public bool get_HasStaticEvents();
    public IEnumerable`1<string> GetTypeReferenceNamespaces(bool header);
    [IteratorStateMachineAttribute("winmd_code_gen.THClass/<GetCustomAttributes>d__72")]
private IEnumerable`1<THCustomAttribute> GetCustomAttributes();
    public bool get_IsInterface();
    private void GetComInterfaceInformation();
    [CompilerGeneratedAttribute]
public string get_ParentInterfaceName();
    [CompilerGeneratedAttribute]
private void set_ParentInterfaceName(string value);
    [CompilerGeneratedAttribute]
public string get_WebView2InterfaceCategory();
    [CompilerGeneratedAttribute]
private void set_WebView2InterfaceCategory(string value);
    [CompilerGeneratedAttribute]
public int get_WebView2InterfaceVersion();
    [CompilerGeneratedAttribute]
private void set_WebView2InterfaceVersion(int value);
    public bool get_HasMembers();
    public bool get_IsEventArgs();
    public virtual bool get_ShouldSkip();
    public bool get_ShouldUseLegacyComInterface();
    public bool get_ShouldSkipClass();
    public virtual ContextKind get_ContextKind();
    public Guid get_InterfaceGuid();
    public string get_ExclusiveToLeafName();
    private THInterface GetTHInterfaceFromInterfaceInfo(string interfaceInfoEntry);
    [CompilerGeneratedAttribute]
public THInterface get_PrimaryInterface();
    [CompilerGeneratedAttribute]
private void set_PrimaryInterface(THInterface value);
    public THInterface get_FallbackInterface();
    public IEnumerable`1<THInterface> get_DeprecatedInterfaces();
    public bool get_IsStatic();
    public bool get_IsStaticOnly();
    [CompilerGeneratedAttribute]
public bool get_IsCollection();
    [CompilerGeneratedAttribute]
private void set_IsCollection(bool value);
    [CompilerGeneratedAttribute]
public bool get_IsCollectionReadWrite();
    [CompilerGeneratedAttribute]
private void set_IsCollectionReadWrite(bool value);
    [CompilerGeneratedAttribute]
public bool get_IsCollectionMap();
    [CompilerGeneratedAttribute]
private void set_IsCollectionMap(bool value);
    [CompilerGeneratedAttribute]
public bool get_IsCollectionVector();
    [CompilerGeneratedAttribute]
private void set_IsCollectionVector(bool value);
    [CompilerGeneratedAttribute]
public THType get_CollectionValueType();
    [CompilerGeneratedAttribute]
private void set_CollectionValueType(THType value);
    private void GetCollectionInfo(Boolean& isMap, Boolean& isVector, Boolean& isReadWrite, THType& valueType);
    public static int CompareWebView2InterfacesByName(THClass x, THClass y);
    private static int CompareAvailability(string x, string y);
    [CompilerGeneratedAttribute]
public THType get_ClassTHType();
    [CompilerGeneratedAttribute]
private void set_ClassTHType(THType value);
    private TypeDef get_WinMDTypeDef();
    [CompilerGeneratedAttribute]
private THType <GetMatchingMethods>b__50_0(InterfaceImpl interfaceImpl);
    [CompilerGeneratedAttribute]
private string <GetTypeReferenceNamespaces>b__71_2(InterfaceImpl i);
}
public class winmd_code_gen.THCustomAttribute : object {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Namespace>k__BackingField;
    [CompilerGeneratedAttribute]
private Dictionary`2<string, string> <NamedArgsValuesAsString>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<string> <FixedArgsValuesAsString>k__BackingField;
    private CustomAttribute m_winmdCustomAttribute;
    public string Name { get; private set; }
    public string Namespace { get; private set; }
    public Dictionary`2<string, string> NamedArgsValuesAsString { get; private set; }
    public List`1<string> FixedArgsValuesAsString { get; private set; }
    public Guid GuidValue { get; }
    public THCustomAttribute(CustomAttribute customAttribute);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
private void set_Name(string value);
    [CompilerGeneratedAttribute]
public string get_Namespace();
    [CompilerGeneratedAttribute]
private void set_Namespace(string value);
    [CompilerGeneratedAttribute]
public Dictionary`2<string, string> get_NamedArgsValuesAsString();
    [CompilerGeneratedAttribute]
private void set_NamedArgsValuesAsString(Dictionary`2<string, string> value);
    [CompilerGeneratedAttribute]
public List`1<string> get_FixedArgsValuesAsString();
    [CompilerGeneratedAttribute]
private void set_FixedArgsValuesAsString(List`1<string> value);
    public Guid ToGuid();
    public Guid get_GuidValue();
}
public class winmd_code_gen.THEnum : THBase {
    private THRoot m_root;
    [CompilerGeneratedAttribute]
private THType <THType>k__BackingField;
    private IEnumerable`1<THEnumEntry> m_entries;
    private bool m_useJavascriptCase;
    public THType THType { get; private set; }
    public ContextKind ContextKind { get; }
    public bool IsBitmask { get; }
    public IEnumerable`1<THEnumEntry> Entries { get; }
    public bool NonDefaultValues { get; }
    public IEnumerable`1<ITHDispatchProperty> DispatchProperties { get; }
    private TypeDef WinMDTypeDef { get; }
    public THEnum(THRoot root, THType thType, bool useJavascriptCase);
    [CompilerGeneratedAttribute]
public THType get_THType();
    [CompilerGeneratedAttribute]
private void set_THType(THType value);
    public virtual ContextKind get_ContextKind();
    public bool get_IsBitmask();
    [IteratorStateMachineAttribute("winmd_code_gen.THEnum/<GetCustomAttributes>d__10")]
private IEnumerable`1<THCustomAttribute> GetCustomAttributes();
    public IEnumerable`1<THEnumEntry> get_Entries();
    public bool get_NonDefaultValues();
    public IEnumerable`1<ITHDispatchProperty> get_DispatchProperties();
    [IteratorStateMachineAttribute("winmd_code_gen.THEnum/<CreateEntries>d__17")]
private IEnumerable`1<THEnumEntry> CreateEntries();
    private TypeDef get_WinMDTypeDef();
}
public class winmd_code_gen.THEnumEntry : object {
    [CompilerGeneratedAttribute]
private THEnum <Parent>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <COMTypeName>k__BackingField;
    [CompilerGeneratedAttribute]
private UInt32 <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private UInt32 <Value>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<THCustomAttribute> <CustomAttributes>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsValueUnsigned>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ValueAsFormattedString>k__BackingField;
    private Field m_field;
    public THEnum Parent { get; private set; }
    public string Name { get; private set; }
    public string COMTypeName { get; private set; }
    public UInt32 Id { get; private set; }
    public string NameAsPropertyName { get; }
    public UInt32 Value { get; private set; }
    public int ValueAsInt32 { get; }
    public IEnumerable`1<THCustomAttribute> CustomAttributes { get; private set; }
    public String[] ReferenceContent { get; }
    public bool IsValueUnsigned { get; private set; }
    public string ValueAsFormattedString { get; private set; }
    public THEnumEntry(THEnum parent, Field field, string name, int id, UInt32 value, bool isValueUnsigned);
    [CompilerGeneratedAttribute]
public THEnum get_Parent();
    [CompilerGeneratedAttribute]
private void set_Parent(THEnum value);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
private void set_Name(string value);
    [CompilerGeneratedAttribute]
public string get_COMTypeName();
    [CompilerGeneratedAttribute]
private void set_COMTypeName(string value);
    [CompilerGeneratedAttribute]
public sealed virtual UInt32 get_Id();
    [CompilerGeneratedAttribute]
private void set_Id(UInt32 value);
    public sealed virtual string get_NameAsPropertyName();
    [CompilerGeneratedAttribute]
public UInt32 get_Value();
    [CompilerGeneratedAttribute]
private void set_Value(UInt32 value);
    public int get_ValueAsInt32();
    [IteratorStateMachineAttribute("winmd_code_gen.THEnumEntry/<GetCustomAttributes>d__25")]
private IEnumerable`1<THCustomAttribute> GetCustomAttributes();
    [CompilerGeneratedAttribute]
public IEnumerable`1<THCustomAttribute> get_CustomAttributes();
    [CompilerGeneratedAttribute]
private void set_CustomAttributes(IEnumerable`1<THCustomAttribute> value);
    public String[] get_ReferenceContent();
    [CompilerGeneratedAttribute]
public bool get_IsValueUnsigned();
    [CompilerGeneratedAttribute]
private void set_IsValueUnsigned(bool value);
    [CompilerGeneratedAttribute]
public string get_ValueAsFormattedString();
    [CompilerGeneratedAttribute]
private void set_ValueAsFormattedString(string value);
}
public class winmd_code_gen.THEvent : WV2MemberBase {
    private string m_debugName;
    private THRoot m_root;
    private THType m_parentInterface;
    private THType m_eventArgs;
    private THType m_eventSender;
    [CompilerGeneratedAttribute]
private int <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private string <SourceName>k__BackingField;
    private IReadOnlyList`1<string> m_invokeParams;
    private Event m_winmdEvent;
    private MethodDef m_winmdAddMethodDef;
    private bool m_useJavascriptCase;
    public int Id { get; private set; }
    public string Name { get; }
    public string NameAsJavascript { get; }
    public string NameAsJavascriptEvent { get; }
    public THType THType { get; }
    public string EventHandlerGuid { get; }
    public bool ShouldSkipHandler { get; }
    public string EventSenderAsCOM { get; }
    public string EventArgsAsCOM { get; }
    public IReadOnlyList`1<string> NonSourceInvokeParams { get; }
    public ContextKind ContextKind { get; }
    public string SourceName { get; private set; }
    public THType EventArgs { get; }
    public THType EventSender { get; }
    public bool HasEventArgs { get; }
    public bool HasSource { get; }
    public bool HasInvokeParams { get; }
    public THEvent(THRoot root, THClass parent, THType parentInterface, Event winmdEvent, MethodDef winmdAddMethodDef, string debugName, int id, bool useJavascriptCase);
    [CompilerGeneratedAttribute]
public int get_Id();
    [CompilerGeneratedAttribute]
private void set_Id(int value);
    public string get_Name();
    public string get_NameAsJavascript();
    public string get_NameAsJavascriptEvent();
    public THType get_THType();
    [IteratorStateMachineAttribute("winmd_code_gen.THEvent/<GetCustomAttributes>d__18")]
private IEnumerable`1<THCustomAttribute> GetCustomAttributes();
    public string get_EventHandlerGuid();
    public bool get_ShouldSkipHandler();
    public string get_EventSenderAsCOM();
    public string get_EventArgsAsCOM();
    public IReadOnlyList`1<string> get_NonSourceInvokeParams();
    public virtual ContextKind get_ContextKind();
    [CompilerGeneratedAttribute]
public string get_SourceName();
    [CompilerGeneratedAttribute]
private void set_SourceName(string value);
    public THType get_EventArgs();
    public THType get_EventSender();
    public bool get_HasEventArgs();
    public bool get_HasSource();
    public bool get_HasInvokeParams();
    [CompilerGeneratedAttribute]
private bool <get_NonSourceInvokeParams>b__28_0(string p);
}
public class winmd_code_gen.THField : object {
    [CompilerGeneratedAttribute]
private string <OverriddenCppWinRTName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <COMTypeName>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<THCustomAttribute> <CustomAttributes>k__BackingField;
    [CompilerGeneratedAttribute]
private UInt32 <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private THBase <Parent>k__BackingField;
    private Field m_winmdField;
    private bool m_useJavascriptCase;
    public string NameAsJavascript { get; }
    public string Name { get; }
    public string OverriddenCppWinRTName { get; private set; }
    public string CppWinRTName { get; }
    public string COMTypeName { get; private set; }
    public IEnumerable`1<THCustomAttribute> CustomAttributes { get; private set; }
    public String[] ReferenceContent { get; }
    public UInt32 Id { get; private set; }
    public string NameAsPropertyName { get; }
    public THBase Parent { get; private set; }
    public THType Type { get; }
    public string PutSnippetKey { get; }
    public string GetSnippetKey { get; }
    public THField(Field winmdField, THBase parent, int dispId, bool useJavascriptCase);
    private static string GetOverriddenCppWinRTFieldName(string namespaceName, string type, string field);
    public string get_NameAsJavascript();
    public string get_Name();
    [CompilerGeneratedAttribute]
public string get_OverriddenCppWinRTName();
    [CompilerGeneratedAttribute]
private void set_OverriddenCppWinRTName(string value);
    public string get_CppWinRTName();
    [CompilerGeneratedAttribute]
public string get_COMTypeName();
    [CompilerGeneratedAttribute]
private void set_COMTypeName(string value);
    [IteratorStateMachineAttribute("winmd_code_gen.THField/<GetCustomAttributes>d__16")]
private IEnumerable`1<THCustomAttribute> GetCustomAttributes();
    [CompilerGeneratedAttribute]
public IEnumerable`1<THCustomAttribute> get_CustomAttributes();
    [CompilerGeneratedAttribute]
private void set_CustomAttributes(IEnumerable`1<THCustomAttribute> value);
    public String[] get_ReferenceContent();
    [CompilerGeneratedAttribute]
public sealed virtual UInt32 get_Id();
    [CompilerGeneratedAttribute]
private void set_Id(UInt32 value);
    public sealed virtual string get_NameAsPropertyName();
    [CompilerGeneratedAttribute]
public THBase get_Parent();
    [CompilerGeneratedAttribute]
private void set_Parent(THBase value);
    public THType get_Type();
    public string get_PutSnippetKey();
    public string get_GetSnippetKey();
}
public class winmd_code_gen.THInterface : object {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Guid>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Availability>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<THEvent> <DeprecatedEvents>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<THMethod> <DeprecatedMethods>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<THProperty> <DeprecatedProperties>k__BackingField;
    public string Name { get; private set; }
    public string Guid { get; public set; }
    public string Availability { get; private set; }
    public bool IsDeprecated { get; }
    public IEnumerable`1<THEvent> DeprecatedEvents { get; private set; }
    public IEnumerable`1<THMethod> DeprecatedMethods { get; private set; }
    public IEnumerable`1<THProperty> DeprecatedProperties { get; private set; }
    public THInterface(THClass thClass, string name, string guid, string availability);
    public THInterface(string name, string guid, string availability);
    public THInterface(THClass thClass, THInterface other);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
private void set_Name(string value);
    [CompilerGeneratedAttribute]
public string get_Guid();
    [CompilerGeneratedAttribute]
public void set_Guid(string value);
    [CompilerGeneratedAttribute]
public string get_Availability();
    [CompilerGeneratedAttribute]
private void set_Availability(string value);
    public bool get_IsDeprecated();
    [CompilerGeneratedAttribute]
public IEnumerable`1<THEvent> get_DeprecatedEvents();
    [CompilerGeneratedAttribute]
private void set_DeprecatedEvents(IEnumerable`1<THEvent> value);
    [CompilerGeneratedAttribute]
public IEnumerable`1<THMethod> get_DeprecatedMethods();
    [CompilerGeneratedAttribute]
private void set_DeprecatedMethods(IEnumerable`1<THMethod> value);
    [CompilerGeneratedAttribute]
public IEnumerable`1<THProperty> get_DeprecatedProperties();
    [CompilerGeneratedAttribute]
private void set_DeprecatedProperties(IEnumerable`1<THProperty> value);
}
public class winmd_code_gen.THMethod : WV2MemberBase {
    private THRoot m_root;
    private THType m_underlyingAsyncReturnType;
    [CompilerGeneratedAttribute]
private THType <ParentInterface>k__BackingField;
    private bool m_defaultCtor;
    private MethodDef m_winmdMethodDef;
    private int m_id;
    private bool m_useJavascriptCase;
    public THType ParentInterface { get; private set; }
    public string NameAsJavascript { get; }
    public string Name { get; }
    public int Id { get; }
    public bool IsAsync { get; }
    public string NameNoModifier { get; }
    public ContextKind ContextKind { get; }
    public string CompletedHandlerGuid { get; }
    public bool ShouldSkipHandler { get; }
    public Tuple`2<THInterface, THType> CollectionInterfaceInfo { get; }
    public IReadOnlyList`1<THMethodParameter> Parameters { get; }
    public IReadOnlyList`1<THMethodParameter> ParametersOut { get; }
    public IReadOnlyList`1<THMethodParameter> ParametersNoOutNorOutArray { get; }
    public IReadOnlyList`1<THMethodParameter> ParametersNoOut { get; }
    public bool HasOutArrayParameters { get; }
    public IEnumerable`1<int> GetOutArrayParameterIndexes { get; }
    public IEnumerable`1<string> GetOutArrayParameterNames { get; }
    public bool HasOutParameters { get; }
    public bool HasReturnValueAndNoOutParameters { get; }
    public bool HasNoReturnValueAndOneOutParameter { get; }
    public bool HasMultipleReturnValuesOrOutParameters { get; }
    private IEnumerable`1<THMethodParameter> ParametersInternal { get; }
    public bool IsReturnTypeAsyncVoid { get; }
    public bool IsReturnTypeVoid { get; }
    public THType ReturnType { get; }
    public THType ResolvedReturnType { get; }
    public THType UnderlyingAsyncReturnType { get; }
    private IEnumerable`1<string> DependencyNamespacesWithDuplicates { get; }
    public IEnumerable`1<string> DependencyNamespaces { get; }
    public THMethod(THRoot root);
    public THMethod(THRoot root, THClass parent, MatchedMethod matchedMethod, int idx, bool useJavascriptCase);
    [CompilerGeneratedAttribute]
public THType get_ParentInterface();
    [CompilerGeneratedAttribute]
private void set_ParentInterface(THType value);
    public string get_NameAsJavascript();
    public string get_Name();
    public int get_Id();
    public bool get_IsAsync();
    [IteratorStateMachineAttribute("winmd_code_gen.THMethod/<GetCustomAttributes>d__17")]
private IEnumerable`1<THCustomAttribute> GetCustomAttributes();
    public virtual string get_NameNoModifier();
    public virtual ContextKind get_ContextKind();
    public string get_CompletedHandlerGuid();
    public bool get_ShouldSkipHandler();
    public Tuple`2<THInterface, THType> get_CollectionInterfaceInfo();
    public IReadOnlyList`1<THMethodParameter> get_Parameters();
    public IReadOnlyList`1<THMethodParameter> get_ParametersOut();
    public IReadOnlyList`1<THMethodParameter> get_ParametersNoOutNorOutArray();
    public IReadOnlyList`1<THMethodParameter> get_ParametersNoOut();
    public bool get_HasOutArrayParameters();
    public IEnumerable`1<int> get_GetOutArrayParameterIndexes();
    public IEnumerable`1<string> get_GetOutArrayParameterNames();
    public bool get_HasOutParameters();
    public bool get_HasReturnValueAndNoOutParameters();
    public bool get_HasNoReturnValueAndOneOutParameter();
    public bool get_HasMultipleReturnValuesOrOutParameters();
    public IEnumerable`1<string> GetTypeReferenceNamespaces();
    [IteratorStateMachineAttribute("winmd_code_gen.THMethod/<get_ParametersInternal>d__52")]
private IEnumerable`1<THMethodParameter> get_ParametersInternal();
    public bool get_IsReturnTypeAsyncVoid();
    public bool get_IsReturnTypeVoid();
    public THType get_ReturnType();
    public THType get_ResolvedReturnType();
    public THType get_UnderlyingAsyncReturnType();
    [IteratorStateMachineAttribute("winmd_code_gen.THMethod/<get_DependencyNamespacesWithDuplicates>d__64")]
private IEnumerable`1<string> get_DependencyNamespacesWithDuplicates();
    public IEnumerable`1<string> get_DependencyNamespaces();
}
public class winmd_code_gen.THMethodGroup : object {
    public List`1<THMethod> Methods;
    public string Name;
    public string NameAsJavascript;
    [CompilerGeneratedAttribute]
private UInt32 <Id>k__BackingField;
    public UInt32 Id { get; public set; }
    public string NameAsPropertyName { get; }
    public bool IsPrecacheable { get; }
    [CompilerGeneratedAttribute]
public sealed virtual UInt32 get_Id();
    [CompilerGeneratedAttribute]
public void set_Id(UInt32 value);
    public sealed virtual string get_NameAsPropertyName();
    public bool get_IsPrecacheable();
}
public class winmd_code_gen.THMethodParameter : object {
    private THRoot m_root;
    private THClass m_parent;
    private THType m_parentInterface;
    [CompilerGeneratedAttribute]
private int <ParameterIdx>k__BackingField;
    [CompilerGeneratedAttribute]
private int <NoOutParameterIdx>k__BackingField;
    private Param m_winmdParam;
    private ParamSig m_winmdParamSig;
    public string Name { get; }
    public ParamAttributes Flags { get; }
    public THType THType { get; }
    public THType ResolvedTHType { get; }
    public int ParameterIdx { get; private set; }
    public int NoOutParameterIdx { get; private set; }
    public bool ByRef { get; }
    public THMethodParameter(THRoot root, THClass parent, THType parentInterface, Param winmdParam, ParamSig winmdParamSig, int parameterIdx, int noOutParameterIdx);
    public string get_Name();
    public ParamAttributes get_Flags();
    public THType get_THType();
    public THType get_ResolvedTHType();
    [CompilerGeneratedAttribute]
public int get_ParameterIdx();
    [CompilerGeneratedAttribute]
private void set_ParameterIdx(int value);
    [CompilerGeneratedAttribute]
public int get_NoOutParameterIdx();
    [CompilerGeneratedAttribute]
private void set_NoOutParameterIdx(int value);
    public bool get_ByRef();
}
public class winmd_code_gen.THNamespace : THBase {
    [CompilerGeneratedAttribute]
private Namespace <WinMDNamespace>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<THNamespace> <NamespacesDeclared>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<THNamespace> <NamespacesFound>k__BackingField;
    private THRoot m_root;
    private bool m_useJavascriptCase;
    private List`1<THClass> m_classes;
    private List`1<THStruct> m_structs;
    private List`1<THEnum> m_enums;
    public Namespace WinMDNamespace { get; private set; }
    public IEnumerable`1<THNamespace> NamespacesDeclared { get; private set; }
    public List`1<THNamespace> NamespacesFound { get; private set; }
    public IEnumerable`1<THNamespace> Namespaces { get; }
    public IEnumerable`1<THEnum> Enums { get; }
    public IEnumerable`1<THStruct> Structs { get; }
    public IEnumerable`1<THClass> Classes { get; }
    public IEnumerable`1<THClass> CoreWebView2InterfacesSorted { get; }
    public IEnumerable`1<THClass> ClassesWithStaticsOrCtors { get; }
    public IEnumerable`1<ITHDispatchProperty> DispatchProperties { get; }
    public bool HasStructs { get; }
    public string TargetFileName { get; }
    public string CppWinRTFileName { get; }
    public IEnumerable`1<string> TypeReferenceNamespacesHeader { get; }
    public IEnumerable`1<string> TypeReferenceNamespacesSource { get; }
    public THNamespace(THRoot root, string name, bool useJavascriptCase, Namespace winMDNamespace, IEnumerable`1<THNamespace> childNamespaces);
    public void CreateTypes();
    [CompilerGeneratedAttribute]
public Namespace get_WinMDNamespace();
    [CompilerGeneratedAttribute]
private void set_WinMDNamespace(Namespace value);
    [CompilerGeneratedAttribute]
public IEnumerable`1<THNamespace> get_NamespacesDeclared();
    [CompilerGeneratedAttribute]
private void set_NamespacesDeclared(IEnumerable`1<THNamespace> value);
    [CompilerGeneratedAttribute]
public List`1<THNamespace> get_NamespacesFound();
    [CompilerGeneratedAttribute]
private void set_NamespacesFound(List`1<THNamespace> value);
    public IEnumerable`1<THNamespace> get_Namespaces();
    public IEnumerable`1<THEnum> get_Enums();
    public IEnumerable`1<THStruct> get_Structs();
    public IEnumerable`1<THClass> get_Classes();
    public IEnumerable`1<THClass> get_CoreWebView2InterfacesSorted();
    public IEnumerable`1<THClass> get_ClassesWithStaticsOrCtors();
    public IEnumerable`1<ITHDispatchProperty> get_DispatchProperties();
    public bool get_HasStructs();
    public virtual string get_TargetFileName();
    public string get_CppWinRTFileName();
    [IteratorStateMachineAttribute("winmd_code_gen.THNamespace/<WinMDListToTHList>d__35`1")]
private IEnumerable`1<T> WinMDListToTHList(IReadOnlyList`1<TypeDef> winmdTypeDefs, WinMDToNewTH`1<T> winmdToNewTH);
    public IEnumerable`1<string> get_TypeReferenceNamespacesHeader();
    public IEnumerable`1<string> get_TypeReferenceNamespacesSource();
    private IEnumerable`1<string> GetTypeReferenceNamespaces(bool header);
    public bool AddAdditionalTHBase(THBase thBase);
    [CompilerGeneratedAttribute]
private THEnum <CreateTypes>b__1_0(TypeDef winmdTypeDef);
    [CompilerGeneratedAttribute]
private THStruct <CreateTypes>b__1_1(TypeDef winmdTypeDef);
    [CompilerGeneratedAttribute]
private THClass <CreateTypes>b__1_3(TypeDef winmdTypeDef);
    [CompilerGeneratedAttribute]
private THClass <CreateTypes>b__1_5(TypeDef winmdTypeDef);
    [CompilerGeneratedAttribute]
private THClass <CreateTypes>b__1_7(TypeDef winmdTypeDef);
}
public class winmd_code_gen.THProperty : WV2MemberBase {
    private THRoot m_root;
    [CompilerGeneratedAttribute]
private THType <ParentInterface>k__BackingField;
    [CompilerGeneratedAttribute]
private UInt32 <Id>k__BackingField;
    private static String[] precacheableTypes;
    private Property m_winmdProperty;
    private bool m_useJavascriptCase;
    public THType ParentInterface { get; private set; }
    public string Name { get; }
    public string NameAsJavascript { get; }
    public UInt32 Id { get; private set; }
    public string NameAsPropertyName { get; }
    public ContextKind ContextKind { get; }
    public Tuple`2<THInterface, THType> CollectionInterfaceInfo { get; }
    public THType THType { get; }
    public THType ResolvedTHType { get; }
    public bool HasGetter { get; }
    public bool HasSetter { get; }
    public bool IsCacheable { get; }
    public bool IsPrecacheable { get; }
    public THProperty(THRoot root, THClass parent, THType parentInterface, Property winmdProperty, int id, bool useJavascriptCase);
    private static THProperty();
    [CompilerGeneratedAttribute]
public THType get_ParentInterface();
    [CompilerGeneratedAttribute]
private void set_ParentInterface(THType value);
    public string get_Name();
    public string get_NameAsJavascript();
    [CompilerGeneratedAttribute]
public sealed virtual UInt32 get_Id();
    [CompilerGeneratedAttribute]
private void set_Id(UInt32 value);
    public sealed virtual string get_NameAsPropertyName();
    [IteratorStateMachineAttribute("winmd_code_gen.THProperty/<GetCustomAttributes>d__16")]
private IEnumerable`1<THCustomAttribute> GetCustomAttributes();
    public virtual ContextKind get_ContextKind();
    public Tuple`2<THInterface, THType> get_CollectionInterfaceInfo();
    public THType get_THType();
    public THType get_ResolvedTHType();
    public bool get_HasGetter();
    public bool get_HasSetter();
    public bool get_IsCacheable();
    public bool get_IsPrecacheable();
}
public class winmd_code_gen.THRoot : object {
    [CompilerGeneratedAttribute]
private string <OutputNamespace>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <UseFullNamespace>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ExplicitIncludesOnly>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Verbose>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ProjectPch>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <UseJavaScriptCase>k__BackingField;
    [CompilerGeneratedAttribute]
private ContextKind <ContextKind>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<THNamespace> <NamespacesDeclared>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<THNamespace> <NamespacesFound>k__BackingField;
    [CompilerGeneratedAttribute]
private TypeFilter <TypeFilter>k__BackingField;
    private List`1<EnsureEntry> m_ensureClasses;
    private Root m_root;
    private HashSet`1<string> m_ensureClassNamesSeen;
    public string Version { get; }
    public string OutputNamespace { get; private set; }
    public bool UseFullNamespace { get; private set; }
    public bool ExplicitIncludesOnly { get; private set; }
    public bool Verbose { get; private set; }
    public string ProjectPch { get; private set; }
    public bool UseJavaScriptCase { get; private set; }
    public ContextKind ContextKind { get; private set; }
    public IEnumerable`1<THNamespace> NamespacesDeclared { get; private set; }
    public List`1<THNamespace> NamespacesFound { get; private set; }
    public IEnumerable`1<THNamespace> Namespaces { get; }
    public IReadOnlyCollection`1<THNamespace> AllNamespaces { get; }
    public IReadOnlyCollection`1<THEnum> AllEnums { get; }
    public IReadOnlyCollection`1<THClass> AllClasses { get; }
    public IReadOnlyCollection`1<THClass> AllClassesWithStaticsOrCtors { get; }
    public IReadOnlyCollection`1<THStruct> AllStructs { get; }
    public IReadOnlyCollection`1<InstanceConstructibleType> AllInstanceConstructibleEntitiesSorted { get; }
    public TypeFilter TypeFilter { get; private set; }
    public THRoot(String[] winmdPaths, TypeFilter typeFilter, THRootOptions options);
    public string get_Version();
    [CompilerGeneratedAttribute]
public string get_OutputNamespace();
    [CompilerGeneratedAttribute]
private void set_OutputNamespace(string value);
    [CompilerGeneratedAttribute]
public bool get_UseFullNamespace();
    [CompilerGeneratedAttribute]
private void set_UseFullNamespace(bool value);
    [CompilerGeneratedAttribute]
public bool get_ExplicitIncludesOnly();
    [CompilerGeneratedAttribute]
private void set_ExplicitIncludesOnly(bool value);
    [CompilerGeneratedAttribute]
public bool get_Verbose();
    [CompilerGeneratedAttribute]
private void set_Verbose(bool value);
    [CompilerGeneratedAttribute]
public string get_ProjectPch();
    [CompilerGeneratedAttribute]
private void set_ProjectPch(string value);
    [CompilerGeneratedAttribute]
public bool get_UseJavaScriptCase();
    [CompilerGeneratedAttribute]
private void set_UseJavaScriptCase(bool value);
    [CompilerGeneratedAttribute]
public ContextKind get_ContextKind();
    [CompilerGeneratedAttribute]
private void set_ContextKind(ContextKind value);
    [CompilerGeneratedAttribute]
public IEnumerable`1<THNamespace> get_NamespacesDeclared();
    [CompilerGeneratedAttribute]
private void set_NamespacesDeclared(IEnumerable`1<THNamespace> value);
    [CompilerGeneratedAttribute]
public List`1<THNamespace> get_NamespacesFound();
    [CompilerGeneratedAttribute]
private void set_NamespacesFound(List`1<THNamespace> value);
    public IEnumerable`1<THNamespace> get_Namespaces();
    public IReadOnlyCollection`1<THNamespace> get_AllNamespaces();
    public IReadOnlyCollection`1<THEnum> get_AllEnums();
    public IReadOnlyCollection`1<THClass> get_AllClasses();
    public IReadOnlyCollection`1<THClass> get_AllClassesWithStaticsOrCtors();
    public IReadOnlyCollection`1<THStruct> get_AllStructs();
    public IReadOnlyCollection`1<InstanceConstructibleType> get_AllInstanceConstructibleEntitiesSorted();
    private IEnumerable`1<THNamespace> CreateNamespaces(Root root);
    private void InitializeNamespaces();
    [CompilerGeneratedAttribute]
public TypeFilter get_TypeFilter();
    [CompilerGeneratedAttribute]
private void set_TypeFilter(TypeFilter value);
    public TypeDef GetTypeDefByName(string typeNamespace, string typename);
    public THBase GetOrCreateTHBaseByName(THBase parent, string name);
    public THType CreateTHTypeByName(THType parent, string typeNamespace, string typename, List`1<TypeSig> genericArgs);
    public THBase GetOrCreateTHBaseByName(THBase parent, string typeNamespace, string typename, List`1<TypeSig> genericArgs);
    public bool HasType(THType type);
    public void EnsureTypeReferencedByInclude(string debugText, THType thType);
    private THNamespace FindNamespaceForTypeName(string typeNamespace, bool createIfNotFound);
    private void ApplyEnsureEntries(List`1<EnsureEntry> ensureEntries);
}
public class winmd_code_gen.THRootOptions : object {
    [CompilerGeneratedAttribute]
private ContextKind <ContextKind>k__BackingField;
    [CompilerGeneratedAttribute]
private string <OutputNamespace>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <UseFullNamespace>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Verbose>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ProjectPch>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <UseJavaScriptCase>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ExplicitIncludesOnly>k__BackingField;
    public ContextKind ContextKind { get; public set; }
    public string OutputNamespace { get; public set; }
    public bool UseFullNamespace { get; public set; }
    public bool Verbose { get; public set; }
    public string ProjectPch { get; public set; }
    public bool UseJavaScriptCase { get; public set; }
    public bool ExplicitIncludesOnly { get; public set; }
    public THRootOptions(ContextKind contextKind);
    public THRootOptions(string outputNamespace, bool useFullNamespace, bool verbose, string pch, bool useJavascriptCase, bool explicitIncludesOnly);
    [CompilerGeneratedAttribute]
public ContextKind get_ContextKind();
    [CompilerGeneratedAttribute]
public void set_ContextKind(ContextKind value);
    [CompilerGeneratedAttribute]
public string get_OutputNamespace();
    [CompilerGeneratedAttribute]
public void set_OutputNamespace(string value);
    [CompilerGeneratedAttribute]
public bool get_UseFullNamespace();
    [CompilerGeneratedAttribute]
public void set_UseFullNamespace(bool value);
    [CompilerGeneratedAttribute]
public bool get_Verbose();
    [CompilerGeneratedAttribute]
public void set_Verbose(bool value);
    [CompilerGeneratedAttribute]
public string get_ProjectPch();
    [CompilerGeneratedAttribute]
public void set_ProjectPch(string value);
    [CompilerGeneratedAttribute]
public bool get_UseJavaScriptCase();
    [CompilerGeneratedAttribute]
public void set_UseJavaScriptCase(bool value);
    [CompilerGeneratedAttribute]
public bool get_ExplicitIncludesOnly();
    [CompilerGeneratedAttribute]
public void set_ExplicitIncludesOnly(bool value);
}
public class winmd_code_gen.THStruct : THBase {
    private THRoot m_root;
    [CompilerGeneratedAttribute]
private THType <THType>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<THField> <FieldsInternal>k__BackingField;
    private bool m_useJavascriptCase;
    public THType THType { get; private set; }
    public IEnumerable`1<THField> FieldsInternal { get; private set; }
    public IReadOnlyList`1<THField> Fields { get; }
    public IEnumerable`1<ITHDispatchProperty> DispatchProperties { get; }
    public bool NeedsImplicitConverter { get; }
    public string CtorSnippetKey { get; }
    public ContextKind ContextKind { get; }
    private TypeDef WinMDTypeDef { get; }
    public THStruct(THRoot root, THType thType, bool useJavascriptCase);
    [IteratorStateMachineAttribute("winmd_code_gen.THStruct/<GetFieldsNoCache>d__2")]
private IEnumerable`1<THField> GetFieldsNoCache();
    public IEnumerable`1<string> GetTypeReferenceNamespaces(bool header);
    [IteratorStateMachineAttribute("winmd_code_gen.THStruct/<GetCustomAttributes>d__4")]
private IEnumerable`1<THCustomAttribute> GetCustomAttributes();
    [CompilerGeneratedAttribute]
public THType get_THType();
    [CompilerGeneratedAttribute]
private void set_THType(THType value);
    [CompilerGeneratedAttribute]
public IEnumerable`1<THField> get_FieldsInternal();
    [CompilerGeneratedAttribute]
private void set_FieldsInternal(IEnumerable`1<THField> value);
    public IReadOnlyList`1<THField> get_Fields();
    public IEnumerable`1<ITHDispatchProperty> get_DispatchProperties();
    public bool get_NeedsImplicitConverter();
    public string get_CtorSnippetKey();
    public virtual ContextKind get_ContextKind();
    private TypeDef get_WinMDTypeDef();
}
public class winmd_code_gen.THType : object {
    [CompilerGeneratedAttribute]
private THType <EnclosingType>k__BackingField;
    [CompilerGeneratedAttribute]
private TypeDef <WinMDTypeDef>k__BackingField;
    private TypeRef m_winmdTypeRef;
    private ElementType m_winmdElementType;
    public IReadOnlyList`1<TypeSig> GenericArgs;
    private string m_debugName;
    public bool m_isArray;
    private static UInt32 s_getNameHelperDepth;
    private static List`1<string> COMStructs;
    public THType EnclosingType { get; private set; }
    public TypeDef WinMDTypeDef { get; private set; }
    public IReadOnlyList`1<THType> GenericArgsAsTHType { get; }
    public bool IsValueType { get; }
    public bool IsObjectType { get; }
    public bool IsArray { get; }
    public bool IsCollectionVector { get; }
    public THType CollectionElementType { get; }
    public bool IsEnum { get; }
    public bool IsStruct { get; }
    public bool ShouldMarkPointerValue { get; }
    public bool HasUnresolvedGenerics { get; }
    public string Name { get; }
    public string Namespace { get; }
    public string LeafName { get; }
    public string TargetTypeName { get; }
    public string CppWinRTTypeName { get; }
    public string COMTypeName { get; }
    public string CsharpTypeName { get; }
    public THType(THType enclosingType, TypeSig winmdTypeSig);
    public THType(THType enclosingType, InterfaceImpl winmdInterfaceImpl);
    public THType(THType enclosingType, Event winmdEvent);
    public THType(THType enclosingType, TypeDef winmdTypeDef, IReadOnlyList`1<TypeSig> genericTypeArguments, bool isArray);
    public THType(THType enclosingType, TypeRef winmdTypeRef, IReadOnlyList`1<TypeSig> genericTypeArguments);
    private static THType();
    [CompilerGeneratedAttribute]
public THType get_EnclosingType();
    [CompilerGeneratedAttribute]
private void set_EnclosingType(THType value);
    [CompilerGeneratedAttribute]
public TypeDef get_WinMDTypeDef();
    [CompilerGeneratedAttribute]
private void set_WinMDTypeDef(TypeDef value);
    public IReadOnlyList`1<THType> get_GenericArgsAsTHType();
    private string GetDebugName();
    public string GetName(NameKind nameKind);
    private string GetNameForTypeDefOrTypeRef(string namespaceName, string name, NameKind nameKind);
    public bool get_IsValueType();
    public bool get_IsObjectType();
    public bool get_IsArray();
    public bool get_IsCollectionVector();
    public THType get_CollectionElementType();
    public bool get_IsEnum();
    public bool get_IsStruct();
    public bool get_ShouldMarkPointerValue();
    public bool get_HasUnresolvedGenerics();
    public string get_Name();
    public string get_Namespace();
    public string get_LeafName();
    public string get_TargetTypeName();
    public string get_CppWinRTTypeName();
    public string get_COMTypeName();
    public string get_CsharpTypeName();
    public THType ResolveToTypeDef(THRoot root);
    public THBase ToTHBase(THRoot root);
    private void GetTypeSigMembers(THType& enclosingType, TypeSig winmdTypeSig, TypeDef& typeDef, TypeRef& typeRef, IReadOnlyList`1& genericArgs, ElementType& elementType, Boolean& isArray);
    private void GetInterfaceImplMembers(InterfaceImpl interfaceImpl, TypeDef& typeDef, TypeRef& typeRef, IReadOnlyList`1& genericArgs);
    private void GetEventMembers(Event winmdEvent, TypeDef& typeDef, TypeRef& typeRef, IReadOnlyList`1& genericArgs);
    [CompilerGeneratedAttribute]
private THType <get_GenericArgsAsTHType>b__12_0(TypeSig genericArgAsTypeSig);
}
public class winmd_code_gen.THUtil : object {
    private static UInt32 nextId_;
    private static THUtil();
    public static string ContextKindToString(ContextKind contextKind);
    public static string GetReferenceByContext(string docString, ContextKind contextKind);
    private static string WrapSummaryTag(string innerXml);
    private static string GetConditionalReferenceByContext(string xmlString, string contextNode);
    private static string FlattenDotNetXml(string xmlString);
    public static string GetSpecialChar(string specialChar, NameKind nameKind);
    public static string ManagedTypeNameToTargetFileName(string managedTypeName, bool isNamespace);
    public static string PascalToScreamingSnakeCase(string inputString);
    public static Tuple`2<string, string> TrySplitFullnameToNamespaceAndName(string fullname);
    public static Tuple`2<string, string> SplitFullnameToNamespaceAndName(string fullname);
    public static string NamespaceToName(string namespaceName, NameKind nameKind);
    public static string HandleTickInPartialName(string partialName, NameKind nameKind);
    public static string ToCppWinRTSpecialName(string namespaceName, string name);
    public static string ToCOMSpecialName(string namespaceName, string name);
    public static string ToCsharpSpecialName(string namespaceName, string name);
    public static bool IsCollectionVector(string namespaceName, string name);
    public static string ElementTypeToTypeName(ElementType elementType, NameKind nameKind);
    public static UInt32 GetNextId();
    public static void GetInterfaceVersionInfo(string interfaceName, String& category, String& version, String& availability, String& parentInterfaceName);
    public static THInterface CreateTHInterfaceFromInterfaceInfo(string interfaceInfoEntry);
    public static string GetRename(string renameContent, string renameKind);
    public static string ToJavascriptCase(string name);
    [IteratorStateMachineAttribute("winmd_code_gen.THUtil/<GetCustomAttributeValues>d__25")]
internal static IEnumerable`1<CustomAttribute> GetCustomAttributeValues(IReadOnlyList`1<CustomAttribute> customAttributes, string attributeNamespace, string attributeName);
    internal static string GetCustomAttributeStringValue(IEnumerable`1<THCustomAttribute> attributes, string attributeName, string argName);
    public static bool HasCustomAttribute(IReadOnlyList`1<CustomAttribute> customAttributes, string attributeNamespace, string attributeName);
    [IteratorStateMachineAttribute("winmd_code_gen.THUtil/<GetCustomAttributeValueFixedArgsName>d__28")]
internal static IEnumerable`1<string> GetCustomAttributeValueFixedArgsName(IReadOnlyList`1<CustomAttribute> customAttributes, string attributeNamespace, string attributeName);
    public static string GetFixedArgSigValueAsString(FixedArgSig arg);
    private static string GetElemSigValueAsString(ElemSig elemSig);
}
public class winmd_code_gen.TypeFilter : object {
    private bool m_defaultInclude;
    private List`1<Tuple`2<string, bool>> m_rules;
    private bool m_requireAllowForWebAttribute;
    private bool m_honorWebHostHiddenAttribute;
    private bool m_explicitIncludesOnly;
    public TypeFilter(String[] includes, String[] excludes, bool requireAllowForWebAttribute, bool honorWebHostHiddenAttribute, bool explicitIncludesOnly);
    private bool TypeFilterIncludeFallbackToBool(TypeFilterIncludeFallback fallback);
    public bool DoesIncludeType(THType thType, TypeFilterIncludeFallback fallback);
    public bool DoesIncludeType(TypeDef typeDef, TypeFilterIncludeFallback includeFallback);
    public bool DoesIncludeTypename(string typeNamespace, string typeName, TypeFilterIncludeFallback includeFallback);
    public bool DoesIncludeNamespace(string name, TypeFilterIncludeFallback includeFallback);
    private bool Match(string typeNamespace, string typeName, string match, bool include);
    public virtual string ToString();
}
public class winmd_code_gen.WV2MemberBase : WV2Metadata {
    [CompilerGeneratedAttribute]
private THClass <Parent>k__BackingField;
    [CompilerGeneratedAttribute]
private string <NameNoModifier>k__BackingField;
    protected THClass Parent { get; protected set; }
    public string NameNoModifier { get; protected set; }
    public Tuple`2<string, string> MsOwner { get; }
    public string Availability { get; }
    public string DocumentationName { get; }
    public string ComRename { get; }
    public string ComDeprecatedRename { get; }
    public string DeprecatedComInterface { get; }
    public bool HasDeprecatedComInterface { get; }
    [CompilerGeneratedAttribute]
protected THClass get_Parent();
    [CompilerGeneratedAttribute]
protected void set_Parent(THClass value);
    [CompilerGeneratedAttribute]
public virtual string get_NameNoModifier();
    [CompilerGeneratedAttribute]
protected virtual void set_NameNoModifier(string value);
    public virtual Tuple`2<string, string> get_MsOwner();
    public virtual string get_Availability();
    public string get_DocumentationName();
    public string get_ComRename();
    public string get_ComDeprecatedRename();
    public virtual string get_DeprecatedComInterface();
    public bool get_HasDeprecatedComInterface();
}
public class winmd_code_gen.WV2Metadata : object {
    [CompilerGeneratedAttribute]
private IEnumerable`1<THCustomAttribute> <CustomAttributes>k__BackingField;
    public IEnumerable`1<THCustomAttribute> CustomAttributes { get; protected set; }
    public string Availability { get; }
    public bool IsPrivate { get; }
    public string TaskId { get; }
    public ContextKind ContextKind { get; }
    public bool ShouldSkip { get; }
    public Tuple`2<string, string> MsOwner { get; }
    public string DeprecatedComInterface { get; }
    public String[] ReferenceContent { get; }
    protected string RenameContent { get; }
    [CompilerGeneratedAttribute]
public IEnumerable`1<THCustomAttribute> get_CustomAttributes();
    [CompilerGeneratedAttribute]
protected void set_CustomAttributes(IEnumerable`1<THCustomAttribute> value);
    public virtual string get_Availability();
    public bool get_IsPrivate();
    public string get_TaskId();
    public virtual ContextKind get_ContextKind();
    public virtual bool get_ShouldSkip();
    public virtual Tuple`2<string, string> get_MsOwner();
    public virtual string get_DeprecatedComInterface();
    public String[] get_ReferenceContent();
    protected string get_RenameContent();
}
