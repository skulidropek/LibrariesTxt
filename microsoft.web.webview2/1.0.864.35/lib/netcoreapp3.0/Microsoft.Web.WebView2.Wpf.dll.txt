public class Microsoft.Web.WebView2.Wpf.CoreWebView2CreationProperties : DependencyObject {
    public static DependencyProperty BrowserExecutableFolderProperty;
    public static DependencyProperty UserDataFolderProperty;
    public static DependencyProperty LanguageProperty;
    private Task`1<CoreWebView2Environment> _task;
    public string BrowserExecutableFolder { get; public set; }
    public string UserDataFolder { get; public set; }
    public string Language { get; public set; }
    private static CoreWebView2CreationProperties();
    public string get_BrowserExecutableFolder();
    public void set_BrowserExecutableFolder(string value);
    public string get_UserDataFolder();
    public void set_UserDataFolder(string value);
    public string get_Language();
    public void set_Language(string value);
    private static void PropertyChanged(DependencyObject d, DependencyPropertyChangedEventArgs args);
    internal Task`1<CoreWebView2Environment> CreateEnvironmentAsync();
}
[ToolboxItemAttribute("True")]
public class Microsoft.Web.WebView2.Wpf.WebView2 : HwndHost {
    public static DependencyProperty CreationPropertiesProperty;
    [CompilerGeneratedAttribute]
private CoreWebView2Environment <Environment>k__BackingField;
    private TaskCompletionSource`1<IntPtr> _hwndTaskSource;
    [CompilerGeneratedAttribute]
private CoreWebView2Controller <CoreWebView2Controller>k__BackingField;
    [CompilerGeneratedAttribute]
private EventHandler`1<CoreWebView2InitializationCompletedEventArgs> CoreWebView2InitializationCompleted;
    private Task _initTask;
    private bool _disposed;
    private bool _browserCrashed;
    private bool _inInit;
    private Action _initAction_Source;
    private DependencyProperty _propertyChangingFromCore;
    public static DependencyProperty SourceProperty;
    [CompilerGeneratedAttribute]
private EventHandler`1<CoreWebView2SourceChangedEventArgs> SourceChanged;
    [CompilerGeneratedAttribute]
private EventHandler`1<CoreWebView2NavigationStartingEventArgs> NavigationStarting;
    [CompilerGeneratedAttribute]
private EventHandler`1<CoreWebView2NavigationCompletedEventArgs> NavigationCompleted;
    private static DependencyPropertyKey CanGoBackPropertyKey;
    public static DependencyProperty CanGoBackProperty;
    private static DependencyPropertyKey CanGoForwardPropertyKey;
    public static DependencyProperty CanGoForwardProperty;
    public static DependencyProperty ZoomFactorProperty;
    [CompilerGeneratedAttribute]
private EventHandler`1<EventArgs> ZoomFactorChanged;
    public static DependencyProperty DefaultBackgroundColorProperty;
    public static DependencyProperty DesignModeForegroundColorProperty;
    [CompilerGeneratedAttribute]
private EventHandler`1<CoreWebView2ContentLoadingEventArgs> ContentLoading;
    [CompilerGeneratedAttribute]
private EventHandler`1<CoreWebView2WebMessageReceivedEventArgs> WebMessageReceived;
    [CategoryAttribute("Common")]
public CoreWebView2CreationProperties CreationProperties { get; public set; }
    private CoreWebView2Environment Environment { get; private set; }
    private CoreWebView2Controller CoreWebView2Controller { get; private set; }
    [BrowsableAttribute("False")]
public CoreWebView2 CoreWebView2 { get; }
    [CategoryAttribute("Common")]
public Uri Source { get; public set; }
    [BrowsableAttribute("False")]
public bool CanGoBack { get; }
    [BrowsableAttribute("False")]
public bool CanGoForward { get; }
    [CategoryAttribute("Common")]
public double ZoomFactor { get; public set; }
    [CategoryAttribute("Common")]
public Color DefaultBackgroundColor { get; public set; }
    [CategoryAttribute("Common")]
public Color DesignModeForegroundColor { get; public set; }
    protected bool IsInDesignMode { get; }
    private static WebView2();
    public CoreWebView2CreationProperties get_CreationProperties();
    public void set_CreationProperties(CoreWebView2CreationProperties value);
    private static object CoerceCreationPropertiesProperty(DependencyObject d, object value);
    [CompilerGeneratedAttribute]
private CoreWebView2Environment get_Environment();
    [CompilerGeneratedAttribute]
private void set_Environment(CoreWebView2Environment value);
    protected virtual HandleRef BuildWindowCore(HandleRef hwndParent);
    protected virtual void DestroyWindowCore(HandleRef hwnd);
    protected virtual IntPtr WndProc(IntPtr hwnd, int msg, IntPtr wParam, IntPtr lParam, Boolean& handled);
    protected virtual void OnRender(DrawingContext dc);
    [CompilerGeneratedAttribute]
private CoreWebView2Controller get_CoreWebView2Controller();
    [CompilerGeneratedAttribute]
private void set_CoreWebView2Controller(CoreWebView2Controller value);
    public CoreWebView2 get_CoreWebView2();
    private void VerifyCoreWebView2();
    [CompilerGeneratedAttribute]
public void add_CoreWebView2InitializationCompleted(EventHandler`1<CoreWebView2InitializationCompletedEventArgs> value);
    [CompilerGeneratedAttribute]
public void remove_CoreWebView2InitializationCompleted(EventHandler`1<CoreWebView2InitializationCompletedEventArgs> value);
    public Task EnsureCoreWebView2Async(CoreWebView2Environment environment);
    protected virtual void Dispose(bool disposing);
    private void VerifyNotDisposed();
    private void Uninitialize(bool browserCrashed);
    private void CoreWebView2_ProcessFailed(object sender, CoreWebView2ProcessFailedEventArgs e);
    private void VerifyBrowserNotCrashed();
    public virtual void BeginInit();
    public virtual void EndInit();
    private void WhenInit_Source(Action action);
    private void SetValueFromCore(DependencyProperty property, object value);
    private bool IsPropertyChangingFromCore(DependencyProperty property);
    private void ReparentController(IntPtr hwnd, bool sync);
    private void SyncControllerWithParentWindow();
    private void UIElement_IsVisibleChanged(object sender, DependencyPropertyChangedEventArgs e);
    protected virtual void OnWindowPositionChanged(Rect rcBoundingBox);
    public Uri get_Source();
    public void set_Source(Uri value);
    private static bool SourcePropertyValid(object val);
    private static void SourcePropertyChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    [CompilerGeneratedAttribute]
public void add_SourceChanged(EventHandler`1<CoreWebView2SourceChangedEventArgs> value);
    [CompilerGeneratedAttribute]
public void remove_SourceChanged(EventHandler`1<CoreWebView2SourceChangedEventArgs> value);
    private void CoreWebView2_SourceChanged(object sender, CoreWebView2SourceChangedEventArgs e);
    [CompilerGeneratedAttribute]
public void add_NavigationStarting(EventHandler`1<CoreWebView2NavigationStartingEventArgs> value);
    [CompilerGeneratedAttribute]
public void remove_NavigationStarting(EventHandler`1<CoreWebView2NavigationStartingEventArgs> value);
    private void CoreWebView2_NavigationStarting(object sender, CoreWebView2NavigationStartingEventArgs e);
    [CompilerGeneratedAttribute]
public void add_NavigationCompleted(EventHandler`1<CoreWebView2NavigationCompletedEventArgs> value);
    [CompilerGeneratedAttribute]
public void remove_NavigationCompleted(EventHandler`1<CoreWebView2NavigationCompletedEventArgs> value);
    private void CoreWebView2_NavigationCompleted(object sender, CoreWebView2NavigationCompletedEventArgs e);
    private void CoreWebView2_HistoryChanged(object sender, object e);
    public bool get_CanGoBack();
    public bool get_CanGoForward();
    protected virtual bool TabIntoCore(TraversalRequest request);
    protected virtual void OnGotKeyboardFocus(KeyboardFocusChangedEventArgs e);
    private void CoreWebView2Controller_MoveFocusRequested(object sender, CoreWebView2MoveFocusRequestedEventArgs e);
    private void CoreWebView2Controller_GotFocus(object sender, object e);
    private void CoreWebView2Controller_LostFocus(object sender, object e);
    private void CoreWebView2Controller_AcceleratorKeyPressed(object sender, CoreWebView2AcceleratorKeyPressedEventArgs e);
    protected virtual void OnKeyDown(KeyEventArgs e);
    protected virtual void OnKeyUp(KeyEventArgs e);
    protected virtual void OnPreviewKeyDown(KeyEventArgs e);
    protected virtual void OnPreviewKeyUp(KeyEventArgs e);
    public double get_ZoomFactor();
    public void set_ZoomFactor(double value);
    private static void ZoomFactorPropertyChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    [CompilerGeneratedAttribute]
public void add_ZoomFactorChanged(EventHandler`1<EventArgs> value);
    [CompilerGeneratedAttribute]
public void remove_ZoomFactorChanged(EventHandler`1<EventArgs> value);
    private void CoreWebView2Controller_ZoomFactorChanged(object sender, object e);
    public Color get_DefaultBackgroundColor();
    public void set_DefaultBackgroundColor(Color value);
    private static void DefaultBackgroundColorPropertyChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    public Color get_DesignModeForegroundColor();
    public void set_DesignModeForegroundColor(Color value);
    public void GoBack();
    public void GoForward();
    public void Reload();
    public void Stop();
    public void NavigateToString(string htmlContent);
    [CompilerGeneratedAttribute]
public void add_ContentLoading(EventHandler`1<CoreWebView2ContentLoadingEventArgs> value);
    [CompilerGeneratedAttribute]
public void remove_ContentLoading(EventHandler`1<CoreWebView2ContentLoadingEventArgs> value);
    private void CoreWebView2_ContentLoading(object sender, CoreWebView2ContentLoadingEventArgs e);
    [AsyncStateMachineAttribute("Microsoft.Web.WebView2.Wpf.WebView2/<ExecuteScriptAsync>d__110")]
public Task`1<string> ExecuteScriptAsync(string javaScript);
    [CompilerGeneratedAttribute]
public void add_WebMessageReceived(EventHandler`1<CoreWebView2WebMessageReceivedEventArgs> value);
    [CompilerGeneratedAttribute]
public void remove_WebMessageReceived(EventHandler`1<CoreWebView2WebMessageReceivedEventArgs> value);
    private void CoreWebView2_WebMessageReceived(object sender, CoreWebView2WebMessageReceivedEventArgs e);
    protected bool get_IsInDesignMode();
}
