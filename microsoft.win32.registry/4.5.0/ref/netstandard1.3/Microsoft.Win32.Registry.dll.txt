public static class Microsoft.Win32.Registry : object {
    public static RegistryKey ClassesRoot;
    public static RegistryKey CurrentConfig;
    public static RegistryKey CurrentUser;
    public static RegistryKey LocalMachine;
    public static RegistryKey PerformanceData;
    public static RegistryKey Users;
    public static object GetValue(string keyName, string valueName, object defaultValue);
    public static void SetValue(string keyName, string valueName, object value);
    public static void SetValue(string keyName, string valueName, object value, RegistryValueKind valueKind);
}
public enum Microsoft.Win32.RegistryHive : Enum {
    public int value__;
    public static RegistryHive ClassesRoot;
    public static RegistryHive CurrentConfig;
    public static RegistryHive CurrentUser;
    public static RegistryHive LocalMachine;
    public static RegistryHive PerformanceData;
    public static RegistryHive Users;
}
public class Microsoft.Win32.RegistryKey : object {
    public SafeRegistryHandle Handle { get; }
    public string Name { get; }
    public int SubKeyCount { get; }
    public int ValueCount { get; }
    public RegistryView View { get; }
    [SecurityCriticalAttribute]
public SafeRegistryHandle get_Handle();
    public string get_Name();
    public int get_SubKeyCount();
    public int get_ValueCount();
    public RegistryView get_View();
    public RegistryKey CreateSubKey(string subkey);
    public RegistryKey CreateSubKey(string subkey, bool writable);
    public RegistryKey CreateSubKey(string subkey, bool writable, RegistryOptions options);
    public void DeleteSubKey(string subkey);
    public void DeleteSubKey(string subkey, bool throwOnMissingSubKey);
    public void DeleteSubKeyTree(string subkey);
    public void DeleteSubKeyTree(string subkey, bool throwOnMissingSubKey);
    public void DeleteValue(string name);
    public void DeleteValue(string name, bool throwOnMissingValue);
    public sealed virtual void Dispose();
    public void Flush();
    [SecurityCriticalAttribute]
public static RegistryKey FromHandle(SafeRegistryHandle handle);
    [SecurityCriticalAttribute]
public static RegistryKey FromHandle(SafeRegistryHandle handle, RegistryView view);
    public String[] GetSubKeyNames();
    public object GetValue(string name);
    public object GetValue(string name, object defaultValue);
    public object GetValue(string name, object defaultValue, RegistryValueOptions options);
    public RegistryValueKind GetValueKind(string name);
    public String[] GetValueNames();
    public static RegistryKey OpenBaseKey(RegistryHive hKey, RegistryView view);
    public RegistryKey OpenSubKey(string name);
    public RegistryKey OpenSubKey(string name, bool writable);
    public RegistryKey OpenSubKey(string name, RegistryRights rights);
    public void SetValue(string name, object value);
    public void SetValue(string name, object value, RegistryValueKind valueKind);
    public virtual string ToString();
}
[FlagsAttribute]
public enum Microsoft.Win32.RegistryOptions : Enum {
    public int value__;
    public static RegistryOptions None;
    public static RegistryOptions Volatile;
}
public enum Microsoft.Win32.RegistryValueKind : Enum {
    public int value__;
    public static RegistryValueKind Binary;
    public static RegistryValueKind DWord;
    public static RegistryValueKind ExpandString;
    public static RegistryValueKind MultiString;
    public static RegistryValueKind None;
    public static RegistryValueKind QWord;
    public static RegistryValueKind String;
    public static RegistryValueKind Unknown;
}
[FlagsAttribute]
public enum Microsoft.Win32.RegistryValueOptions : Enum {
    public int value__;
    public static RegistryValueOptions DoNotExpandEnvironmentNames;
    public static RegistryValueOptions None;
}
public enum Microsoft.Win32.RegistryView : Enum {
    public int value__;
    public static RegistryView Default;
    public static RegistryView Registry32;
    public static RegistryView Registry64;
}
[SecurityCriticalAttribute]
public class Microsoft.Win32.SafeHandles.SafeRegistryHandle : SafeHandle {
    public bool IsInvalid { get; }
    [SecurityCriticalAttribute]
public SafeRegistryHandle(IntPtr preexistingHandle, bool ownsHandle);
    [SecurityCriticalAttribute]
protected virtual bool ReleaseHandle();
    [SecurityCriticalAttribute]
public virtual bool get_IsInvalid();
}
[FlagsAttribute]
public enum System.Security.AccessControl.RegistryRights : Enum {
    public int value__;
    public static RegistryRights ChangePermissions;
    public static RegistryRights CreateLink;
    public static RegistryRights CreateSubKey;
    public static RegistryRights Delete;
    public static RegistryRights EnumerateSubKeys;
    public static RegistryRights ExecuteKey;
    public static RegistryRights FullControl;
    public static RegistryRights Notify;
    public static RegistryRights QueryValues;
    public static RegistryRights ReadKey;
    public static RegistryRights ReadPermissions;
    public static RegistryRights SetValue;
    public static RegistryRights TakeOwnership;
    public static RegistryRights WriteKey;
}
