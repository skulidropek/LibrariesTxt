internal static class FxResources.Microsoft.Win32.Registry.SR : object {
}
internal static class Interop : object {
}
public static class Microsoft.Win32.Registry : object {
    public static RegistryKey CurrentUser;
    public static RegistryKey LocalMachine;
    public static RegistryKey ClassesRoot;
    public static RegistryKey Users;
    public static RegistryKey PerformanceData;
    public static RegistryKey CurrentConfig;
    private static Registry();
    public static object GetValue(string keyName, string valueName, object defaultValue);
    public static void SetValue(string keyName, string valueName, object value);
    public static void SetValue(string keyName, string valueName, object value, RegistryValueKind valueKind);
    private static RegistryKey GetBaseKeyFromKeyName(string keyName, String& subKeyName);
}
public enum Microsoft.Win32.RegistryHive : Enum {
    public int value__;
    public static RegistryHive ClassesRoot;
    public static RegistryHive CurrentUser;
    public static RegistryHive LocalMachine;
    public static RegistryHive Users;
    public static RegistryHive PerformanceData;
    public static RegistryHive CurrentConfig;
}
public class Microsoft.Win32.RegistryKey : object {
    private static IntPtr HKEY_CLASSES_ROOT;
    private static IntPtr HKEY_CURRENT_USER;
    private static IntPtr HKEY_LOCAL_MACHINE;
    private static IntPtr HKEY_USERS;
    private static IntPtr HKEY_PERFORMANCE_DATA;
    private static IntPtr HKEY_CURRENT_CONFIG;
    private static String[] s_hkeyNames;
    private static int MaxKeyLength;
    private static int MaxValueLength;
    private SafeRegistryHandle modreq(System.Runtime.CompilerServices.IsVolatile) _hkey;
    private String modreq(System.Runtime.CompilerServices.IsVolatile) _keyName;
    private Boolean modreq(System.Runtime.CompilerServices.IsVolatile) _remoteKey;
    private StateFlags modreq(System.Runtime.CompilerServices.IsVolatile) _state;
    private RegistryView modreq(System.Runtime.CompilerServices.IsVolatile) _regView;
    public int SubKeyCount { get; }
    public RegistryView View { get; }
    public SafeRegistryHandle Handle { get; }
    public int ValueCount { get; }
    public string Name { get; }
    private SafeRegistryHandle SystemKeyHandle { get; }
    private RegistryKey(SafeRegistryHandle hkey, bool writable, RegistryView view);
    private RegistryKey(SafeRegistryHandle hkey, bool writable, bool systemkey, bool remoteKey, bool isPerfData, RegistryView view);
    private static RegistryKey();
    public void Flush();
    public sealed virtual void Dispose();
    public RegistryKey CreateSubKey(string subkey);
    public RegistryKey CreateSubKey(string subkey, bool writable);
    public RegistryKey CreateSubKey(string subkey, bool writable, RegistryOptions options);
    private RegistryKey CreateSubKeyInternal(string subkey, bool writable, RegistryOptions registryOptions);
    public void DeleteSubKey(string subkey);
    public void DeleteSubKey(string subkey, bool throwOnMissingSubKey);
    public void DeleteSubKeyTree(string subkey);
    public void DeleteSubKeyTree(string subkey, bool throwOnMissingSubKey);
    private void DeleteSubKeyTreeInternal(string subkey);
    public void DeleteValue(string name);
    public void DeleteValue(string name, bool throwOnMissingValue);
    public static RegistryKey OpenBaseKey(RegistryHive hKey, RegistryView view);
    public static RegistryKey OpenRemoteBaseKey(RegistryHive hKey, string machineName);
    public static RegistryKey OpenRemoteBaseKey(RegistryHive hKey, string machineName, RegistryView view);
    public RegistryKey OpenSubKey(string name, bool writable);
    public RegistryKey OpenSubKey(string name, RegistryRights rights);
    private RegistryKey InternalOpenSubKey(string name, bool writable);
    public RegistryKey OpenSubKey(string name);
    public int get_SubKeyCount();
    public RegistryView get_View();
    public SafeRegistryHandle get_Handle();
    public static RegistryKey FromHandle(SafeRegistryHandle handle);
    public static RegistryKey FromHandle(SafeRegistryHandle handle, RegistryView view);
    private int InternalSubKeyCount();
    public String[] GetSubKeyNames();
    private String[] InternalGetSubKeyNames();
    public int get_ValueCount();
    public String[] GetValueNames();
    public object GetValue(string name);
    public object GetValue(string name, object defaultValue);
    public object GetValue(string name, object defaultValue, RegistryValueOptions options);
    private object InternalGetValue(string name, object defaultValue, bool doNotExpand, bool checkSecurity);
    public RegistryValueKind GetValueKind(string name);
    public string get_Name();
    public void SetValue(string name, object value);
    public void SetValue(string name, object value, RegistryValueKind valueKind);
    private RegistryValueKind CalculateValueKind(object value);
    public virtual string ToString();
    private static string FixupName(string name);
    private static void FixupPath(StringBuilder path);
    private void EnsureNotDisposed();
    private void EnsureWriteable();
    private static void ValidateKeyName(string name);
    private static void ValidateKeyOptions(RegistryOptions options);
    private static void ValidateKeyView(RegistryView view);
    private static RegistryRights GetRegistryKeyRights(bool isWritable);
    private bool IsDirty();
    private bool IsSystemKey();
    private bool IsWritable();
    private bool IsPerfDataKey();
    private void SetDirty();
    private void ClosePerfDataKey();
    private void FlushCore();
    private RegistryKey CreateSubKeyInternalCore(string subkey, bool writable, RegistryOptions registryOptions);
    private void DeleteSubKeyCore(string subkey, bool throwOnMissingSubKey);
    private void DeleteSubKeyTreeCore(string subkey);
    private void DeleteValueCore(string name, bool throwOnMissingValue);
    private static RegistryKey OpenBaseKeyCore(RegistryHive hKeyHive, RegistryView view);
    private static RegistryKey OpenRemoteBaseKeyCore(RegistryHive hKey, string machineName, RegistryView view);
    private RegistryKey InternalOpenSubKeyCore(string name, RegistryRights rights, bool throwOnPermissionFailure);
    private SafeRegistryHandle get_SystemKeyHandle();
    private int InternalSubKeyCountCore();
    private String[] InternalGetSubKeyNamesCore(int subkeys);
    private int InternalValueCountCore();
    private String[] GetValueNamesCore(int values);
    private object InternalGetValueCore(string name, object defaultValue, bool doNotExpand);
    private RegistryValueKind GetValueKindCore(string name);
    private void SetValueCore(string name, object value, RegistryValueKind valueKind);
    private void Win32Error(int errorCode, string str);
    private static void Win32ErrorStatic(int errorCode, string str);
    private static bool IsWritable(int rights);
}
[FlagsAttribute]
public enum Microsoft.Win32.RegistryOptions : Enum {
    public int value__;
    public static RegistryOptions None;
    public static RegistryOptions Volatile;
}
public enum Microsoft.Win32.RegistryValueKind : Enum {
    public int value__;
    public static RegistryValueKind String;
    public static RegistryValueKind ExpandString;
    public static RegistryValueKind Binary;
    public static RegistryValueKind DWord;
    public static RegistryValueKind MultiString;
    public static RegistryValueKind QWord;
    public static RegistryValueKind Unknown;
    public static RegistryValueKind None;
}
[FlagsAttribute]
public enum Microsoft.Win32.RegistryValueOptions : Enum {
    public int value__;
    public static RegistryValueOptions None;
    public static RegistryValueOptions DoNotExpandEnvironmentNames;
}
public enum Microsoft.Win32.RegistryView : Enum {
    public int value__;
    public static RegistryView Default;
    public static RegistryView Registry64;
    public static RegistryView Registry32;
}
public class Microsoft.Win32.SafeHandles.SafeRegistryHandle : SafeHandle {
    public bool IsInvalid { get; }
    public SafeRegistryHandle(IntPtr preexistingHandle, bool ownsHandle);
    public virtual bool get_IsInvalid();
    protected virtual bool ReleaseHandle();
}
internal static class Microsoft.Win32.ThrowHelper : object {
    internal static void ThrowArgumentException(string msg);
    internal static void ThrowArgumentException(string msg, string argument);
    internal static void ThrowArgumentNullException(string argument);
    internal static void ThrowInvalidOperationException(string msg);
    internal static void ThrowSecurityException(string msg);
    internal static void ThrowUnauthorizedAccessException(string msg);
    internal static void ThrowObjectDisposedException(string objectName, string msg);
}
[FlagsAttribute]
public enum System.Security.AccessControl.RegistryRights : Enum {
    public int value__;
    public static RegistryRights QueryValues;
    public static RegistryRights SetValue;
    public static RegistryRights CreateSubKey;
    public static RegistryRights EnumerateSubKeys;
    public static RegistryRights Notify;
    public static RegistryRights CreateLink;
    public static RegistryRights ExecuteKey;
    public static RegistryRights ReadKey;
    public static RegistryRights WriteKey;
    public static RegistryRights Delete;
    public static RegistryRights ReadPermissions;
    public static RegistryRights ChangePermissions;
    public static RegistryRights TakeOwnership;
    public static RegistryRights FullControl;
}
internal static class System.SR : object {
    private static ResourceManager s_resourceManager;
    private static string s_resourcesName;
    private static ResourceManager ResourceManager { get; }
    internal static string Arg_RegSubKeyAbsent { get; }
    internal static string Arg_RegKeyDelHive { get; }
    internal static string Arg_RegKeyNoRemoteConnect { get; }
    internal static string Arg_RegKeyOutOfRange { get; }
    internal static string Arg_RegKeyNotFound { get; }
    internal static string Arg_RegKeyStrLenBug { get; }
    internal static string Arg_RegValStrLenBug { get; }
    internal static string Arg_RegBadKeyKind { get; }
    internal static string Arg_RegGetOverflowBug { get; }
    internal static string Arg_RegSetMismatchedKind { get; }
    internal static string Arg_RegSetBadArrType { get; }
    internal static string Arg_RegSetStrArrNull { get; }
    internal static string Arg_RegInvalidKeyName { get; }
    internal static string Arg_DllInitFailure { get; }
    internal static string Arg_EnumIllegalVal { get; }
    internal static string Arg_RegSubKeyValueAbsent { get; }
    internal static string Argument_InvalidRegistryOptionsCheck { get; }
    internal static string Argument_InvalidRegistryViewCheck { get; }
    internal static string Argument_InvalidRegistryKeyPermissionCheck { get; }
    internal static string InvalidOperation_RegRemoveSubKey { get; }
    internal static string ObjectDisposed_RegKeyClosed { get; }
    internal static string Security_RegistryPermission { get; }
    internal static string UnauthorizedAccess_RegistryKeyGeneric_Key { get; }
    internal static string UnauthorizedAccess_RegistryNoWrite { get; }
    internal static string UnknownError_Num { get; }
    internal static Type ResourceType { get; }
    private static ResourceManager get_ResourceManager();
    private static bool UsingResourceKeys();
    internal static string GetResourceString(string resourceKey, string defaultString);
    internal static string Format(string resourceFormat, Object[] args);
    internal static string Format(string resourceFormat, object p1);
    internal static string Format(string resourceFormat, object p1, object p2);
    internal static string Format(string resourceFormat, object p1, object p2, object p3);
    internal static string get_Arg_RegSubKeyAbsent();
    internal static string get_Arg_RegKeyDelHive();
    internal static string get_Arg_RegKeyNoRemoteConnect();
    internal static string get_Arg_RegKeyOutOfRange();
    internal static string get_Arg_RegKeyNotFound();
    internal static string get_Arg_RegKeyStrLenBug();
    internal static string get_Arg_RegValStrLenBug();
    internal static string get_Arg_RegBadKeyKind();
    internal static string get_Arg_RegGetOverflowBug();
    internal static string get_Arg_RegSetMismatchedKind();
    internal static string get_Arg_RegSetBadArrType();
    internal static string get_Arg_RegSetStrArrNull();
    internal static string get_Arg_RegInvalidKeyName();
    internal static string get_Arg_DllInitFailure();
    internal static string get_Arg_EnumIllegalVal();
    internal static string get_Arg_RegSubKeyValueAbsent();
    internal static string get_Argument_InvalidRegistryOptionsCheck();
    internal static string get_Argument_InvalidRegistryViewCheck();
    internal static string get_Argument_InvalidRegistryKeyPermissionCheck();
    internal static string get_InvalidOperation_RegRemoveSubKey();
    internal static string get_ObjectDisposed_RegKeyClosed();
    internal static string get_Security_RegistryPermission();
    internal static string get_UnauthorizedAccess_RegistryKeyGeneric_Key();
    internal static string get_UnauthorizedAccess_RegistryNoWrite();
    internal static string get_UnknownError_Num();
    internal static Type get_ResourceType();
}
