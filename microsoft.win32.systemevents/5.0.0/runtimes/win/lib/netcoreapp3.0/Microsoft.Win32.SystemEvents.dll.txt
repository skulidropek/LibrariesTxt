internal static class FxResources.Microsoft.Win32.SystemEvents.SR : object {
}
internal static class Interop : object {
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
public class Microsoft.Win32.PowerModeChangedEventArgs : EventArgs {
    private PowerModes _mode;
    public PowerModes Mode { get; }
    public PowerModeChangedEventArgs(PowerModes mode);
    public PowerModes get_Mode();
}
public class Microsoft.Win32.PowerModeChangedEventHandler : MulticastDelegate {
    public PowerModeChangedEventHandler(object object, IntPtr method);
    [NullableContextAttribute("1")]
public virtual void Invoke(object sender, PowerModeChangedEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, PowerModeChangedEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public enum Microsoft.Win32.PowerModes : Enum {
    public int value__;
    public static PowerModes Resume;
    public static PowerModes StatusChange;
    public static PowerModes Suspend;
}
internal class Microsoft.Win32.SafeHandles.SafeLibraryHandle : SafeHandleZeroOrMinusOneIsInvalid {
    protected virtual bool ReleaseHandle();
}
public class Microsoft.Win32.SessionEndedEventArgs : EventArgs {
    private SessionEndReasons _reason;
    public SessionEndReasons Reason { get; }
    public SessionEndedEventArgs(SessionEndReasons reason);
    public SessionEndReasons get_Reason();
}
public class Microsoft.Win32.SessionEndedEventHandler : MulticastDelegate {
    public SessionEndedEventHandler(object object, IntPtr method);
    [NullableContextAttribute("1")]
public virtual void Invoke(object sender, SessionEndedEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, SessionEndedEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class Microsoft.Win32.SessionEndingEventArgs : EventArgs {
    private bool _cancel;
    private SessionEndReasons _reason;
    public bool Cancel { get; public set; }
    public SessionEndReasons Reason { get; }
    public SessionEndingEventArgs(SessionEndReasons reason);
    public bool get_Cancel();
    public void set_Cancel(bool value);
    public SessionEndReasons get_Reason();
}
public class Microsoft.Win32.SessionEndingEventHandler : MulticastDelegate {
    public SessionEndingEventHandler(object object, IntPtr method);
    [NullableContextAttribute("1")]
public virtual void Invoke(object sender, SessionEndingEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, SessionEndingEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public enum Microsoft.Win32.SessionEndReasons : Enum {
    public int value__;
    public static SessionEndReasons Logoff;
    public static SessionEndReasons SystemShutdown;
}
public class Microsoft.Win32.SessionSwitchEventArgs : EventArgs {
    private SessionSwitchReason _reason;
    public SessionSwitchReason Reason { get; }
    public SessionSwitchEventArgs(SessionSwitchReason reason);
    public SessionSwitchReason get_Reason();
}
public class Microsoft.Win32.SessionSwitchEventHandler : MulticastDelegate {
    public SessionSwitchEventHandler(object object, IntPtr method);
    [NullableContextAttribute("1")]
public virtual void Invoke(object sender, SessionSwitchEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, SessionSwitchEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public enum Microsoft.Win32.SessionSwitchReason : Enum {
    public int value__;
    public static SessionSwitchReason ConsoleConnect;
    public static SessionSwitchReason ConsoleDisconnect;
    public static SessionSwitchReason RemoteConnect;
    public static SessionSwitchReason RemoteDisconnect;
    public static SessionSwitchReason SessionLogon;
    public static SessionSwitchReason SessionLogoff;
    public static SessionSwitchReason SessionLock;
    public static SessionSwitchReason SessionUnlock;
    public static SessionSwitchReason SessionRemoteControl;
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class Microsoft.Win32.SystemEvents : object {
    private static object s_eventLockObject;
    private static object s_procLockObject;
    private static SystemEvents modreq(System.Runtime.CompilerServices.IsVolatile) s_systemEvents;
    private static Thread modreq(System.Runtime.CompilerServices.IsVolatile) s_windowThread;
    private static ManualResetEvent modreq(System.Runtime.CompilerServices.IsVolatile) s_eventWindowReady;
    private static Random s_randomTimerId;
    private static Boolean modreq(System.Runtime.CompilerServices.IsVolatile) s_registeredSessionNotification;
    private static IntPtr modreq(System.Runtime.CompilerServices.IsVolatile) s_defWindowProc;
    private static String modreq(System.Runtime.CompilerServices.IsVolatile) s_className;
    private static Queue`1 modreq(System.Runtime.CompilerServices.IsVolatile) s_threadCallbackList;
    private static Int32 modreq(System.Runtime.CompilerServices.IsVolatile) s_threadCallbackMessage;
    private static ManualResetEvent modreq(System.Runtime.CompilerServices.IsVolatile) s_eventThreadTerminated;
    private IntPtr modreq(System.Runtime.CompilerServices.IsVolatile) _windowHandle;
    private WndProc _windowProc;
    private ConsoleCtrlHandlerRoutine _consoleHandler;
    private static object s_onUserPreferenceChangingEvent;
    private static object s_onUserPreferenceChangedEvent;
    private static object s_onSessionEndingEvent;
    private static object s_onSessionEndedEvent;
    private static object s_onPowerModeChangedEvent;
    private static object s_onLowMemoryEvent;
    private static object s_onDisplaySettingsChangingEvent;
    private static object s_onDisplaySettingsChangedEvent;
    private static object s_onInstalledFontsChangedEvent;
    private static object s_onTimeChangedEvent;
    private static object s_onTimerElapsedEvent;
    private static object s_onPaletteChangedEvent;
    private static object s_onEventsThreadShutdownEvent;
    private static object s_onSessionSwitchEvent;
    private static Dictionary`2<object, List`1<SystemEventInvokeInfo>> s_handlers;
    private static IntPtr modreq(System.Runtime.CompilerServices.IsVolatile) s_processWinStation;
    private static Boolean modreq(System.Runtime.CompilerServices.IsVolatile) s_isUserInteractive;
    private static bool UserInteractive { get; }
    private IntPtr DefWndProc { get; }
    private static SystemEvents();
    private static bool get_UserInteractive();
    public static void add_DisplaySettingsChanging(EventHandler value);
    public static void remove_DisplaySettingsChanging(EventHandler value);
    public static void add_DisplaySettingsChanged(EventHandler value);
    public static void remove_DisplaySettingsChanged(EventHandler value);
    public static void add_EventsThreadShutdown(EventHandler value);
    public static void remove_EventsThreadShutdown(EventHandler value);
    public static void add_InstalledFontsChanged(EventHandler value);
    public static void remove_InstalledFontsChanged(EventHandler value);
    public static void add_LowMemory(EventHandler value);
    public static void remove_LowMemory(EventHandler value);
    public static void add_PaletteChanged(EventHandler value);
    public static void remove_PaletteChanged(EventHandler value);
    public static void add_PowerModeChanged(PowerModeChangedEventHandler value);
    public static void remove_PowerModeChanged(PowerModeChangedEventHandler value);
    public static void add_SessionEnded(SessionEndedEventHandler value);
    public static void remove_SessionEnded(SessionEndedEventHandler value);
    public static void add_SessionEnding(SessionEndingEventHandler value);
    public static void remove_SessionEnding(SessionEndingEventHandler value);
    public static void add_SessionSwitch(SessionSwitchEventHandler value);
    public static void remove_SessionSwitch(SessionSwitchEventHandler value);
    public static void add_TimeChanged(EventHandler value);
    public static void remove_TimeChanged(EventHandler value);
    public static void add_TimerElapsed(TimerElapsedEventHandler value);
    public static void remove_TimerElapsed(TimerElapsedEventHandler value);
    public static void add_UserPreferenceChanged(UserPreferenceChangedEventHandler value);
    public static void remove_UserPreferenceChanged(UserPreferenceChangedEventHandler value);
    public static void add_UserPreferenceChanging(UserPreferenceChangingEventHandler value);
    public static void remove_UserPreferenceChanging(UserPreferenceChangingEventHandler value);
    private static void AddEventHandler(object key, Delegate value);
    private bool ConsoleHandlerProc(int signalType);
    private IntPtr get_DefWndProc();
    public static IntPtr CreateTimer(int interval);
    private void Dispose();
    private static void EnsureSystemEvents(bool requireHandle);
    private static void EnsureRegisteredSessionNotification();
    private UserPreferenceCategory GetUserPreferenceCategory(int msg, IntPtr wParam, IntPtr lParam);
    private void Initialize();
    private void InvokeMarshaledCallbacks();
    [NullableContextAttribute("1")]
public static void InvokeOnEventsThread(Delegate method);
    public static void KillTimer(IntPtr timerId);
    private IntPtr OnCreateTimer(IntPtr wParam);
    private void OnDisplaySettingsChanging();
    private void OnDisplaySettingsChanged();
    private void OnGenericEvent(object eventKey);
    private void OnShutdown(object eventKey);
    private bool OnKillTimer(IntPtr wParam);
    private void OnPowerModeChanged(IntPtr wParam);
    private void OnSessionEnded(IntPtr wParam, IntPtr lParam);
    private int OnSessionEnding(IntPtr lParam);
    private void OnSessionSwitch(int wParam);
    private void OnThemeChanged();
    private void OnUserPreferenceChanged(int msg, IntPtr wParam, IntPtr lParam);
    private void OnUserPreferenceChanging(int msg, IntPtr wParam, IntPtr lParam);
    private void OnTimerElapsed(IntPtr wParam);
    private static void RaiseEvent(object key, Object[] args);
    private static void RaiseEvent(bool checkFinalization, object key, Object[] args);
    private static void RemoveEventHandler(object key, Delegate value);
    private static void Shutdown();
    private static void Shutdown(object sender, EventArgs e);
    private IntPtr WindowProc(IntPtr hWnd, int msg, IntPtr wParam, IntPtr lParam);
    private void WindowThreadProc();
}
public class Microsoft.Win32.TimerElapsedEventArgs : EventArgs {
    private IntPtr _timerId;
    public IntPtr TimerId { get; }
    public TimerElapsedEventArgs(IntPtr timerId);
    public IntPtr get_TimerId();
}
public class Microsoft.Win32.TimerElapsedEventHandler : MulticastDelegate {
    public TimerElapsedEventHandler(object object, IntPtr method);
    [NullableContextAttribute("1")]
public virtual void Invoke(object sender, TimerElapsedEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, TimerElapsedEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public enum Microsoft.Win32.UserPreferenceCategory : Enum {
    public int value__;
    public static UserPreferenceCategory Accessibility;
    public static UserPreferenceCategory Color;
    public static UserPreferenceCategory Desktop;
    public static UserPreferenceCategory General;
    public static UserPreferenceCategory Icon;
    public static UserPreferenceCategory Keyboard;
    public static UserPreferenceCategory Menu;
    public static UserPreferenceCategory Mouse;
    public static UserPreferenceCategory Policy;
    public static UserPreferenceCategory Power;
    public static UserPreferenceCategory Screensaver;
    public static UserPreferenceCategory Window;
    public static UserPreferenceCategory Locale;
    public static UserPreferenceCategory VisualStyle;
}
public class Microsoft.Win32.UserPreferenceChangedEventArgs : EventArgs {
    private UserPreferenceCategory _category;
    public UserPreferenceCategory Category { get; }
    public UserPreferenceChangedEventArgs(UserPreferenceCategory category);
    public UserPreferenceCategory get_Category();
}
public class Microsoft.Win32.UserPreferenceChangedEventHandler : MulticastDelegate {
    public UserPreferenceChangedEventHandler(object object, IntPtr method);
    [NullableContextAttribute("1")]
public virtual void Invoke(object sender, UserPreferenceChangedEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, UserPreferenceChangedEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class Microsoft.Win32.UserPreferenceChangingEventArgs : EventArgs {
    private UserPreferenceCategory _category;
    public UserPreferenceCategory Category { get; }
    public UserPreferenceChangingEventArgs(UserPreferenceCategory category);
    public UserPreferenceCategory get_Category();
}
public class Microsoft.Win32.UserPreferenceChangingEventHandler : MulticastDelegate {
    public UserPreferenceChangingEventHandler(object object, IntPtr method);
    [NullableContextAttribute("1")]
public virtual void Invoke(object sender, UserPreferenceChangingEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, UserPreferenceChangingEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("27524")]
internal class System.Runtime.CompilerServices.NullableAttribute : Attribute {
    public Byte[] NullableFlags;
    public NullableAttribute(byte );
    public NullableAttribute(Byte[] );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("5196")]
internal class System.Runtime.CompilerServices.NullableContextAttribute : Attribute {
    public byte Flag;
    public NullableContextAttribute(byte );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("2")]
internal class System.Runtime.CompilerServices.NullablePublicOnlyAttribute : Attribute {
    public bool IncludesInternals;
    public NullablePublicOnlyAttribute(bool );
}
[AttributeUsageAttribute("64")]
internal class System.Runtime.InteropServices.SuppressGCTransitionAttribute : Attribute {
}
internal abstract class System.Runtime.Versioning.OSPlatformAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <PlatformName>k__BackingField;
    public string PlatformName { get; }
    private protected OSPlatformAttribute(string platformName);
    [CompilerGeneratedAttribute]
public string get_PlatformName();
}
[AttributeUsageAttribute("1023")]
internal class System.Runtime.Versioning.SupportedOSPlatformAttribute : OSPlatformAttribute {
    public SupportedOSPlatformAttribute(string platformName);
}
[AttributeUsageAttribute("1")]
internal class System.Runtime.Versioning.TargetPlatformAttribute : OSPlatformAttribute {
    public TargetPlatformAttribute(string platformName);
}
[AttributeUsageAttribute("1023")]
internal class System.Runtime.Versioning.UnsupportedOSPlatformAttribute : OSPlatformAttribute {
    public UnsupportedOSPlatformAttribute(string platformName);
}
internal static class System.SR : object {
    private static bool s_usingResourceKeys;
    private static ResourceManager s_resourceManager;
    internal static ResourceManager ResourceManager { get; }
    internal static string ErrorCreateSystemEvents { get; }
    internal static string ErrorCreateTimer { get; }
    internal static string ErrorGetTempPath { get; }
    internal static string ErrorKillTimer { get; }
    internal static string ErrorSystemEventsNotSupported { get; }
    internal static string InvalidLowBoundArgument { get; }
    internal static string PlatformNotSupported_SystemEvents { get; }
    private static SR();
    private static bool UsingResourceKeys();
    internal static string GetResourceString(string resourceKey, string defaultString);
    internal static string Format(string resourceFormat, object p1);
    internal static string Format(string resourceFormat, object p1, object p2);
    internal static string Format(string resourceFormat, object p1, object p2, object p3);
    internal static string Format(string resourceFormat, Object[] args);
    internal static string Format(IFormatProvider provider, string resourceFormat, object p1);
    internal static string Format(IFormatProvider provider, string resourceFormat, object p1, object p2);
    internal static string Format(IFormatProvider provider, string resourceFormat, object p1, object p2, object p3);
    internal static string Format(IFormatProvider provider, string resourceFormat, Object[] args);
    internal static ResourceManager get_ResourceManager();
    internal static string get_ErrorCreateSystemEvents();
    internal static string get_ErrorCreateTimer();
    internal static string get_ErrorGetTempPath();
    internal static string get_ErrorKillTimer();
    internal static string get_ErrorSystemEventsNotSupported();
    internal static string get_InvalidLowBoundArgument();
    internal static string get_PlatformNotSupported_SystemEvents();
}
