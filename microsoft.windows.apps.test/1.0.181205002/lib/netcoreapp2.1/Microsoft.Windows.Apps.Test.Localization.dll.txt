public interface Microsoft.Windows.Apps.Test.Localization.ILocalizationProvider {
    public abstract virtual IStringResourceData LoadExplicit(string resourceKey, string context, int processId, CultureInfo culture);
    public abstract virtual IStringResourceData[] RetrieveSimilarStrings(string nativeText, string context, int processId, CultureInfo culture);
    public abstract virtual bool FoundSimilarMatch(string nativeText, string context, long index);
}
public interface Microsoft.Windows.Apps.Test.Localization.ILocalizationProvider2 {
    public abstract virtual IStringResourceData LoadExplicit(string resourceKey, string context, int processId, CultureInfo culture);
    public abstract virtual IStringResourceData[] RetrieveSimilarStrings(string nativeText, object contextElement);
    public abstract virtual bool FoundSimilarMatch(object element, string nativeText, long index);
}
internal interface Microsoft.Windows.Apps.Test.Localization.INativeMethods {
    public abstract virtual void SetUserGeoID(int geoId);
}
public interface Microsoft.Windows.Apps.Test.Localization.IStringResourceData {
    public abstract virtual string Raw();
    public abstract virtual string Parsed();
    public abstract virtual char Hotkey();
    public abstract virtual string Accelerator();
    public abstract virtual string DebugInfo();
    public abstract virtual string DefaultString();
}
public class Microsoft.Windows.Apps.Test.Localization.LanguageRegionManager : object {
    private static Dictionary`2<string, int> countryIdtoGeoIdDict;
    internal static INativeMethods nativeMethods;
    private static LanguageRegionManager();
    public static void SetHomeRegion(string countryId);
}
public class Microsoft.Windows.Apps.Test.Localization.LanguageRegionManagerException : Exception {
    public LanguageRegionManagerException(string message);
    public LanguageRegionManagerException(string message, Exception innerException);
}
public static class Microsoft.Windows.Apps.Test.Localization.LocalizationManager : object {
    private static SortedDictionary`2<string, LocalizationProviderProxy> _registeredProviders;
    private static object providersLock;
    private static LocalizationManager();
    public static LocalizationProviderProxy RegisterProvider(ILocalizationProvider provider, string proxyName);
    public static LocalizationProviderProxy RegisterProvider(LocalizationProviderProxy instance);
    public static LocalizationProviderProxy GetInstance(string proxyName);
    public static void UnregisterProvider(string proxyName);
}
public class Microsoft.Windows.Apps.Test.Localization.LocalizationManagerException : Exception {
    public LocalizationManagerException(string message);
    public LocalizationManagerException(string message, Exception innerException);
}
public class Microsoft.Windows.Apps.Test.Localization.LocalizationProviderProxy : object {
    private string _registeredName;
    private ILocalizationProvider _providerInstance;
    private int _defaultProcessId;
    private string _defaultContext;
    private CultureInfo _defaultCulture;
    private MatchesComparator _comparisonMethod;
    public ILocalizationProvider Provider { get; }
    public int DefaultProcessId { get; public set; }
    public string DefaultContext { get; public set; }
    public CultureInfo DefaultCulture { get; public set; }
    public string RegisteredName { get; }
    public MatchesComparator ComparisonMethod { get; public set; }
    public LocalizationProviderProxy(ILocalizationProvider provider, string proxyName);
    public ILocalizationProvider get_Provider();
    public int get_DefaultProcessId();
    public void set_DefaultProcessId(int value);
    public string get_DefaultContext();
    public void set_DefaultContext(string value);
    public CultureInfo get_DefaultCulture();
    public void set_DefaultCulture(CultureInfo value);
    public string get_RegisteredName();
    public IStringResourceData LoadExplicit(string resourceKey);
    public IStringResourceData LoadExplicit(string resourceKey, string context, int processId, CultureInfo culture);
    public string TagAsLocalized(string nativeText);
    public string TagAsLocalized(string nativeText, string context);
    public string TagAsLocalized(string nativeText, string context, int processId, CultureInfo culture);
    public string TagAsFixed(string fixedText);
    public string TagAsResourceKey(string resourceKey);
    public string TagAsResourceKey(string resourceKey, string context, int processId, CultureInfo culture);
    public static bool ParseTaggedText(string tagged, String& native, String& proxyName, String& context, Int32& processId, CultureInfo& culture, TaggedType& textType);
    public MatchesComparator get_ComparisonMethod();
    public void set_ComparisonMethod(MatchesComparator value);
}
public class Microsoft.Windows.Apps.Test.Localization.LocalizedStrings : object {
    private IStringResourceData[] _translationTable;
    private string _native;
    private string _context;
    private int _processId;
    private CultureInfo _culture;
    private TaggedType _textType;
    private LocalizationProviderProxy _providerProxy;
    private bool _shouldSendFeedbackToProvider;
    public int ProcessId { get; }
    public string Context { get; }
    public CultureInfo Culture { get; }
    public LocalizationProviderProxy ProviderProxy { get; }
    public string NativeText { get; }
    public LocalizedStrings(string taggedText);
    public int get_ProcessId();
    public string get_Context();
    public CultureInfo get_Culture();
    public LocalizationProviderProxy get_ProviderProxy();
    public string get_NativeText();
    public IStringResourceData[] GetTranslations();
    public string GetTranslationsDebug();
    public bool TranslationMatchFound(long index);
    public bool Matches(string target);
    public bool Matches(LocalizedStrings translations);
    public virtual string ToString();
}
internal class Microsoft.Windows.Apps.Test.Localization.NativeMethods : object {
    public static int GEOID_NOT_AVAILABLE;
    public sealed virtual void SetUserGeoID(int geoId);
}
public class Microsoft.Windows.Apps.Test.Localization.NonLocalizingProvider : object {
    public virtual IStringResourceData LoadExplicit(string resourceKey, string context, int processId, CultureInfo culture);
    public virtual IStringResourceData[] RetrieveSimilarStrings(string nativeText, string context, int processId, CultureInfo culture);
    public virtual bool FoundSimilarMatch(string nativeText, string context, long index);
}
internal static class Microsoft.Windows.Apps.Test.Localization.StringResource : object {
    private static ResourceManager _resourceManager;
    internal static ResourceManager ResourceManager { get; }
    private static StringResource();
    internal static string Get(string id, Object[] args);
    internal static ResourceManager get_ResourceManager();
}
public class Microsoft.Windows.Apps.Test.Localization.StringResourceData : object {
    private string _rawText;
    private string _debug;
    public StringResourceData(string rawText);
    public StringResourceData(string rawText, string debugInfo);
    public sealed virtual string Raw();
    public virtual string Parsed();
    public virtual char Hotkey();
    public virtual string Accelerator();
    public virtual string DebugInfo();
    public virtual string ToString();
    public virtual string DefaultString();
}
public static class Microsoft.Windows.Apps.Test.Localization.TaggedTextHelpers : object {
    private static string _rKeyPrefix;
    private static string _fixedPrefix;
    private static string _localizablePrefix;
    private static int _prefixLength;
    private static char _hotkeyCharacter;
    private static string _tagStartElement;
    private static string _tagContextAttribute;
    private static string _tagNativeAttribute;
    private static string _tagProcessIDAttribute;
    private static string _tagCultureAttribute;
    private static string _tagProxyNameAttribute;
    private static TaggedTextHelpers();
    public static string RemoveHotkeyModifier(string original);
    public static bool ExtractHotkey(string original, Char& hotkey);
    public static string CreateTaggedText(TaggedType textType, string nativeText, string context, int processId, CultureInfo culture, string proxyName);
    public static bool ParseTaggedText(string tagged, String& native, String& proxyName, String& context, Int32& processId, CultureInfo& culture, TaggedType& textType);
}
public enum Microsoft.Windows.Apps.Test.Localization.TaggedType : Enum {
    public int value__;
    public static TaggedType Unknown;
    public static TaggedType LocalizableText;
    public static TaggedType ResourceKey;
    public static TaggedType FixedText;
}
internal static class Microsoft.Windows.Apps.Test.Localization.Validate : object {
    internal static void ArgumentNotNull(object parameter, string parameterName);
}
