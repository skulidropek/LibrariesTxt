internal static class FxResources.PresentationUI.SR : object {
}
internal static class Microsoft.Internal.BuildInfo : object {
    internal static string WCP_VERSION;
    internal static string WCP_VERSION_SUFFIX;
    internal static string MIL_VERSION_SUFFIX;
    internal static string WCP_PUBLIC_KEY_TOKEN;
    internal static string WCP_PUBLIC_KEY_STRING;
    internal static string DEVDIV_PUBLIC_KEY_STRING;
    internal static string DEVDIV_PUBLIC_KEY_TOKEN;
    internal static string DirectWriteForwarder;
    internal static string PresentationCore;
    internal static string PresentationCFFRasterizer;
    internal static string PresentationFramework;
    internal static string PresentationUI;
    internal static string PresentationFrameworkLuna;
    internal static string PresentationFrameworkRoyale;
    internal static string PresentationFrameworkAero;
    internal static string PresentationFrameworkAero2;
    internal static string PresentationFrameworkAeroLite;
    internal static string PresentationFrameworkClassic;
    internal static string PresentationFrameworkSystemCore;
    internal static string PresentationFrameworkSystemData;
    internal static string PresentationFrameworkSystemDrawing;
    internal static string PresentationFrameworkSystemXml;
    internal static string PresentationFrameworkSystemXmlLinq;
    internal static string ReachFramework;
    internal static string SystemPrinting;
    internal static string SystemXaml;
    internal static string WindowsFormsIntegration;
    internal static string SystemWindowsPresentation;
    internal static string SystemWindowsControlsRibbon;
}
[FriendAccessAllowedAttribute]
internal class Microsoft.Internal.DeploymentUI.InstallationErrorPage : Grid {
    private string _logFilePath;
    private Uri _deploymentPath;
    private DispatcherOperationCallback _refresh;
    private DispatcherOperationCallback _getWinFX;
    private bool _errorFlag;
    private Uri _supportUri;
    internal Grid RedWarning;
    internal TextBlock txtTitle;
    internal TextBlock Text;
    internal TextBlock SupportUriText;
    internal Hyperlink SupportHyperLink;
    internal Button LogFileButton;
    internal Button RetryButton;
    internal Button GetWinFXButton;
    private bool _contentLoaded;
    public Uri DeploymentPath { get; public set; }
    public string ErrorTitle { get; public set; }
    public string ErrorText { get; public set; }
    public bool ErrorFlag { get; public set; }
    public string LogFilePath { get; public set; }
    public Uri SupportUri { get; public set; }
    public DispatcherOperationCallback RefreshCallback { get; public set; }
    public DispatcherOperationCallback GetWinFxCallback { get; public set; }
    private static InstallationErrorPage();
    public sealed virtual void set_DeploymentPath(Uri value);
    public sealed virtual Uri get_DeploymentPath();
    public sealed virtual void set_ErrorTitle(string value);
    public sealed virtual string get_ErrorTitle();
    public sealed virtual void set_ErrorText(string value);
    public sealed virtual string get_ErrorText();
    public sealed virtual void set_ErrorFlag(bool value);
    public sealed virtual bool get_ErrorFlag();
    public sealed virtual void set_LogFilePath(string value);
    public sealed virtual string get_LogFilePath();
    public sealed virtual void set_SupportUri(Uri value);
    public sealed virtual Uri get_SupportUri();
    public sealed virtual void set_RefreshCallback(DispatcherOperationCallback value);
    public sealed virtual DispatcherOperationCallback get_RefreshCallback();
    public sealed virtual void set_GetWinFxCallback(DispatcherOperationCallback value);
    public sealed virtual DispatcherOperationCallback get_GetWinFxCallback();
    private void ShowLogFileButton();
    private static void OnCommandRefresh(object sender, RoutedEventArgs e);
    private static void OnCanRefresh(object sender, CanExecuteRoutedEventArgs e);
    internal void OnRetry(object sender, RoutedEventArgs e);
    internal void OnShowLog(object sender, RoutedEventArgs e);
    internal void OnGetWinFX(object sender, RoutedEventArgs e);
    [GeneratedCodeAttribute("PresentationBuildTasks", "4.8.1.0")]
[DebuggerNonUserCodeAttribute]
public sealed virtual void InitializeComponent();
    [GeneratedCodeAttribute("PresentationBuildTasks", "4.8.1.0")]
[DebuggerNonUserCodeAttribute]
[EditorBrowsableAttribute("1")]
private sealed virtual override void System.Windows.Markup.IComponentConnector.Connect(int connectionId, object target);
}
[FriendAccessAllowedAttribute]
internal class Microsoft.Internal.DeploymentUI.TenFeetInstallationError : Page {
    private string _logFilePath;
    private Uri _deploymentPath;
    private DispatcherOperationCallback _refresh;
    private DispatcherOperationCallback _getWinFX;
    private bool _errorFlag;
    private Uri _supportUri;
    internal Grid Grid_2;
    internal TextBlock txtTitle;
    internal TextBlock Text;
    internal TextBlock SupportUriText;
    internal Hyperlink SupportHyperLink;
    internal StackPanel ButtonsPanel;
    internal Button LogFileButton;
    internal Button RetryButton;
    internal Button GetWinFXButton;
    private bool _contentLoaded;
    public Uri DeploymentPath { get; public set; }
    public string ErrorTitle { get; public set; }
    public string ErrorText { get; public set; }
    public bool ErrorFlag { get; public set; }
    public string LogFilePath { get; public set; }
    public Uri SupportUri { get; public set; }
    public DispatcherOperationCallback RefreshCallback { get; public set; }
    public DispatcherOperationCallback GetWinFxCallback { get; public set; }
    private static TenFeetInstallationError();
    public sealed virtual void set_DeploymentPath(Uri value);
    public sealed virtual Uri get_DeploymentPath();
    public sealed virtual void set_ErrorTitle(string value);
    public sealed virtual string get_ErrorTitle();
    public sealed virtual void set_ErrorText(string value);
    public sealed virtual string get_ErrorText();
    public sealed virtual void set_ErrorFlag(bool value);
    public sealed virtual bool get_ErrorFlag();
    public sealed virtual void set_LogFilePath(string value);
    public sealed virtual string get_LogFilePath();
    public sealed virtual void set_SupportUri(Uri value);
    public sealed virtual Uri get_SupportUri();
    public sealed virtual void set_RefreshCallback(DispatcherOperationCallback value);
    public sealed virtual DispatcherOperationCallback get_RefreshCallback();
    public sealed virtual void set_GetWinFxCallback(DispatcherOperationCallback value);
    public sealed virtual DispatcherOperationCallback get_GetWinFxCallback();
    private void ShowLogFileButton();
    private static void OnCommandRefresh(object sender, RoutedEventArgs e);
    private static void OnCanRefresh(object sender, CanExecuteRoutedEventArgs e);
    internal void OnRetry(object sender, RoutedEventArgs e);
    internal void OnShowLog(object sender, RoutedEventArgs e);
    internal void OnGetWinFX(object sender, RoutedEventArgs e);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("PresentationBuildTasks", "4.8.1.0")]
public sealed virtual void InitializeComponent();
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("PresentationBuildTasks", "4.8.1.0")]
[EditorBrowsableAttribute("1")]
private sealed virtual override void System.Windows.Markup.IComponentConnector.Connect(int connectionId, object target);
}
[FriendAccessAllowedAttribute]
internal class Microsoft.Internal.DeploymentUI.TenFeetInstallationProgress : Page {
    private string _publisher;
    private string _application;
    private DispatcherOperationCallback _stop;
    private DispatcherOperationCallback _refresh;
    private Uri _deploymentPath;
    internal TextBlock PublisherText;
    internal TextBlock ApplicationNameText;
    internal ProgressBar ProgressBar_1;
    internal TextBlock ProgressBarStatusText;
    internal TextBlock DownloadFrom;
    internal TextBlock CurrentBytesText;
    internal TextBlock TotalBytesText;
    internal Button CancelButton;
    private bool _contentLoaded;
    public DispatcherOperationCallback RefreshCallback { get; public set; }
    public DispatcherOperationCallback StopCallback { get; public set; }
    public Uri DeploymentPath { get; public set; }
    public string ApplicationName { get; public set; }
    public string PublisherName { get; public set; }
    private static TenFeetInstallationProgress();
    public sealed virtual void set_RefreshCallback(DispatcherOperationCallback value);
    public sealed virtual DispatcherOperationCallback get_RefreshCallback();
    public sealed virtual void set_StopCallback(DispatcherOperationCallback value);
    public sealed virtual DispatcherOperationCallback get_StopCallback();
    public sealed virtual void set_DeploymentPath(Uri value);
    public sealed virtual Uri get_DeploymentPath();
    public sealed virtual void set_ApplicationName(string value);
    public sealed virtual string get_ApplicationName();
    public sealed virtual void set_PublisherName(string value);
    public sealed virtual string get_PublisherName();
    public sealed virtual void UpdateProgress(long bytesDownloaded, long bytesTotal);
    private static void OnCommandRefresh(object sender, RoutedEventArgs e);
    private static void OnCanRefresh(object sender, CanExecuteRoutedEventArgs e);
    private static void OnCommandStop(object sender, RoutedEventArgs e);
    private static void OnCanStop(object sender, CanExecuteRoutedEventArgs e);
    private void OnCancel(object sender, RoutedEventArgs e);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("PresentationBuildTasks", "4.8.1.0")]
public sealed virtual void InitializeComponent();
    [GeneratedCodeAttribute("PresentationBuildTasks", "4.8.1.0")]
[DebuggerNonUserCodeAttribute]
[EditorBrowsableAttribute("1")]
private sealed virtual override void System.Windows.Markup.IComponentConnector.Connect(int connectionId, object target);
}
internal static class Microsoft.Internal.DllImport : object {
    internal static string PresentationNative;
    internal static string PresentationCFFRasterizerNative;
    internal static string MilCore;
    internal static string UIAutomationCore;
    internal static string Wininet;
    internal static string WindowsCodecs;
    internal static string WindowsCodecsExt;
    internal static string Mscms;
    internal static string PrntvPt;
    internal static string Ole32;
    internal static string User32;
    internal static string NInput;
}
internal static class MS.Internal.Documents.AddressUtility : object {
    private static string _addressTemplate;
    private static string _mailtoUriTemplate;
    private static string _mailtoSchemeDelimiter;
    internal static bool IsMailtoUri(Uri mailtoUri);
    internal static string GetEmailAddressFromMailtoUri(Uri mailtoUri);
    internal static Uri GenerateMailtoUri(string address);
}
internal static class MS.Internal.Documents.Application.ChainOfDependencies`1 : object {
    internal static T GetLast(T member);
    internal static bool OrderByLeastDependent(T member, Action<T> action);
    internal static bool OrderByMostDependent(T member, Action<T> action);
}
internal class MS.Internal.Documents.Application.ChainOfResponsiblity`2 : object {
    private List`1<T> _members;
    internal ChainOfResponsiblity`2(T[] members);
    internal bool Dispatch(Action<T, S> action, S subject);
}
internal class MS.Internal.Documents.Application.CommandEnforcer : object {
    private List`1<PolicyBinding> _bindings;
    private DocumentApplicationDocumentViewer _docViewer;
    private static int _initialBindCount;
    private bool _printScreenDisabled;
    private bool _isRMMissing;
    internal CommandEnforcer(DocumentApplicationDocumentViewer docViewer);
    protected virtual override void Finalize();
    internal void AddBinding(PolicyBinding bind);
    internal void Enforce();
    private void DisablePrintScreen(bool disable);
}
[FriendAccessAllowedAttribute]
internal class MS.Internal.Documents.Application.CriticalFileToken : object {
    private Uri _location;
    internal Uri Location { get; }
    internal CriticalFileToken(Uri location);
    public static bool op_Equality(CriticalFileToken a, CriticalFileToken b);
    public static bool op_Inequality(CriticalFileToken a, CriticalFileToken b);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    internal Uri get_Location();
}
internal abstract class MS.Internal.Documents.Application.Document : object {
    private SecurityCriticalData`1<Uri> _uri;
    private bool _isCopySafe;
    private SecurityCriticalDataForSet`1<bool> _isDestinationIdenticalToSource;
    private bool _isRebindNeeded;
    private bool _isReloadNeeded;
    private Document _dependency;
    private Document MS.Internal.Documents.Application.IChainOfDependenciesNode<MS.Internal.Documents.Application.Document>.Dependency { get; }
    internal Stream Source { get; }
    internal Stream Workspace { get; }
    internal Stream Destination { get; }
    internal Document Dependency { get; }
    internal bool IsFileCopySafe { get; internal set; }
    internal bool IsDestinationIdenticalToSource { get; internal set; }
    internal bool IsRebindNeeded { get; internal set; }
    internal bool IsReloadNeeded { get; internal set; }
    internal Uri Uri { get; internal set; }
    internal Document(Document dependency);
    protected virtual override void Finalize();
    private sealed virtual override Document MS.Internal.Documents.Application.IChainOfDependenciesNode<MS.Internal.Documents.Application.Document>.get_Dependency();
    public sealed virtual void Dispose();
    protected virtual void Dispose(bool disposing);
    internal abstract virtual Stream get_Source();
    internal abstract virtual Stream get_Workspace();
    internal abstract virtual Stream get_Destination();
    internal Document get_Dependency();
    internal bool get_IsFileCopySafe();
    internal void set_IsFileCopySafe(bool value);
    internal bool get_IsDestinationIdenticalToSource();
    internal void set_IsDestinationIdenticalToSource(bool value);
    internal bool get_IsRebindNeeded();
    internal void set_IsRebindNeeded(bool value);
    internal bool get_IsReloadNeeded();
    internal void set_IsReloadNeeded(bool value);
    internal Uri get_Uri();
    internal void set_Uri(Uri value);
}
[FriendAccessAllowedAttribute]
internal class MS.Internal.Documents.Application.DocumentApplicationJournalEntryEventArgs : EventArgs {
    private DocumentApplicationState _state;
    public DocumentApplicationState State { get; }
    public DocumentApplicationJournalEntryEventArgs(DocumentApplicationState state);
    public DocumentApplicationState get_State();
}
[FriendAccessAllowedAttribute]
internal class MS.Internal.Documents.Application.DocumentApplicationState : ValueType {
    private double _zoom;
    private double _horizontalOffset;
    private double _verticalOffset;
    private int _maxPagesAcross;
    public double Zoom { get; }
    public double HorizontalOffset { get; }
    public double VerticalOffset { get; }
    public int MaxPagesAcross { get; }
    public DocumentApplicationState(double zoom, double horizontalOffset, double verticalOffset, int maxPagesAcross);
    public double get_Zoom();
    public double get_HorizontalOffset();
    public double get_VerticalOffset();
    public int get_MaxPagesAcross();
}
[FriendAccessAllowedAttribute]
internal class MS.Internal.Documents.Application.DocumentManager : ChainOfResponsiblity`2<IDocumentController, Document> {
    private static Document _current;
    private static DocumentManager _singleton;
    private static bool _canSave;
    private static bool _isEditEnabled;
    private static bool _isModified;
    private static List`1<IDocumentController> _controllers;
    internal bool CanSave { get; internal set; }
    internal bool IsModified { get; }
    internal DocumentManager(IDocumentController[] controllers);
    private static DocumentManager();
    internal static DocumentManager CreateDefault();
    internal static PackageDocument CreateDefaultDocument(Uri source, CriticalFileToken fileToken);
    internal static PackageDocument CreateDefaultDocument(Uri source, Stream stream);
    internal static void CleanUp();
    internal void EnableEdit(Document document);
    internal bool Open(Document document);
    internal bool SaveAs(Document document);
    internal bool Save(Document document);
    internal static void OnModify(object sender, EventArgs args);
    internal bool Reload(Document document);
    internal bool get_CanSave();
    internal void set_CanSave(bool value);
    internal bool get_IsModified();
    private static bool DispatchEnableEdit(IDocumentController controller, Document document);
    private static bool DispatchOpen(IDocumentController controller, Document document);
    private static bool DispatchRebind(IDocumentController controller, Document document);
    private static bool DispatchSaveAsPreperation(IDocumentController controller, Document document);
    private static bool DispatchSaveCommit(IDocumentController controller, Document document);
    private static bool DispatchSavePreperation(IDocumentController controller, Document document);
    private bool OrderByMostDependent(DispatchDelegate action, Document document);
    private bool OrderByLeastDependent(DispatchDelegate action, Document document);
    private static void ThrowIfNull(Document document);
}
[FriendAccessAllowedAttribute]
internal class MS.Internal.Documents.Application.DocumentProperties : object {
    private static DocumentProperties _current;
    private SecurityCriticalData`1<Uri> _uri;
    private PackageProperties _xpsProperties;
    private PackageProperties _rmProperties;
    private bool _isDataAcquired;
    private Image _image;
    private string _filename;
    private FileInfo _fileInfo;
    internal PackageProperties CoreProperties { get; }
    internal static DocumentProperties Current { get; }
    internal Image Image { get; internal set; }
    internal string Filename { get; }
    internal long FileSize { get; }
    internal Nullable`1<DateTime> FileCreated { get; }
    internal Nullable`1<DateTime> FileModified { get; }
    internal Nullable`1<DateTime> FileAccessed { get; }
    private bool IsFileInfoValid { get; }
    private DocumentProperties(Uri uri);
    internal PackageProperties get_CoreProperties();
    internal static DocumentProperties get_Current();
    internal Image get_Image();
    internal void set_Image(Image value);
    internal string get_Filename();
    internal long get_FileSize();
    internal Nullable`1<DateTime> get_FileCreated();
    internal Nullable`1<DateTime> get_FileModified();
    internal Nullable`1<DateTime> get_FileAccessed();
    internal static void Copy(PackageProperties source, PackageProperties target);
    internal static void InitializeCurrentDocumentProperties(Uri uri);
    internal void SetXpsProperties(PackageProperties properties);
    internal void SetRightsManagedProperties(PackageProperties properties);
    internal bool VerifyPropertiesUnchanged();
    internal void ShowDialog();
    private void AcquireData();
    private bool get_IsFileInfoValid();
}
internal class MS.Internal.Documents.Application.DocumentPropertiesDialog : DialogBaseForm {
    private IContainer components;
    private TextBox _size;
    private TextBox _fileAccessedDate;
    private TextBox _fileCreatedDate;
    private Label _contentLabel;
    private Label _fileCreatedLabel;
    private TabPage _infoTab;
    private Label _sizeLabel;
    private PictureBox _iconPictureBox;
    private TextBox _documentType;
    private GroupBox _fileSystemBox;
    private Label _fileModifiedLabel;
    private Label _fileAccessedLabel;
    private GroupBox _documentDetailBox;
    private TextBox _lastSaved;
    private Label _revisionLabel;
    private Label _documentCreatedLabel;
    private Label _documentModifiedLabel;
    private Label _lastSavedLabel;
    private Label _documentPrintedLabel;
    private TextBox _filename;
    private Label _statusLabel;
    private Button _okButton;
    private TextBox _identifier;
    private Label _identifierLabel;
    private TextBox _category;
    private Label _categoryLabel;
    private TextBox _version;
    private Label _versionLabel;
    private TabControl _tabControl;
    private TabPage _summaryTab;
    private TextBox _subject;
    private TextBox _description;
    private Label _titleLabel;
    private TextBox _status;
    private Label _authorLabel;
    private TextBox _content;
    private Label _subjectLabel;
    private TextBox _keywords;
    private Label _descriptionLabel;
    private TextBox _author;
    private Label _keywordsLabel;
    private Label _languageLabel;
    private TableLayoutPanel tableLayoutPanel1;
    private TextBox _title;
    private TextBox _language;
    private TableLayoutPanel _documentTable;
    private TextBox _documentPrintedDate;
    private TextBox _documentModifiedDate;
    private TextBox _documentCreatedDate;
    private TextBox _revision;
    private TableLayoutPanel _fileTable;
    private TextBox _fileModifiedDate;
    private TableLayoutPanel tableLayoutPanel4;
    private TableLayoutPanel tableLayoutPanel2;
    private TableLayoutPanel tableLayoutPanel3;
    private DialogDivider _subjectLine;
    private DialogDivider _categoryLine;
    private DialogDivider _contentLine;
    protected virtual void ApplyResources();
    private void PopulateDataFields();
    private void SetTextProperty(Control control, string text);
    private void SetTextProperty(Control control, Nullable`1<DateTime> date);
    private string FormatFileSize(long fileSize);
    private void _okButtonClick(object sender, EventArgs e);
    protected virtual void Dispose(bool disposing);
    protected virtual void InitializeComponent();
}
internal class MS.Internal.Documents.Application.DocumentStream : StreamProxy {
    internal static string XpsFileExtension;
    private bool _deleteOnClose;
    private DocumentStream _original;
    private CriticalFileToken _xpsFileToken;
    internal bool DeleteOnClose { get; internal set; }
    private DocumentStream(CriticalFileToken xpsFileToken, Stream dataSource, DocumentStream original);
    private static DocumentStream();
    public virtual void Close();
    internal DocumentStream Copy(CriticalFileToken copiesToken);
    internal DocumentStream CreateTemporary(bool copyOriginal);
    internal static bool IsReadOnly(CriticalFileToken fileToken);
    internal static DocumentStream Open(FileDocument document, bool writeable);
    internal static DocumentStream Open(CriticalFileToken xpsFileToken, bool writeable);
    internal static DocumentStream Open(Stream existing);
    internal bool ReOpenWriteable();
    internal bool SwapWithOriginal();
    internal bool get_DeleteOnClose();
    internal void set_DeleteOnClose(bool value);
    private sealed virtual override void System.IDisposable.Dispose();
    protected virtual void Dispose(bool disposing);
    private void MakeTempFile(bool inSameFolder, FileStream& temporary, CriticalFileToken& tempToken);
    private Uri MakeTemporaryFileName(bool inSameFolder, int generation);
    private void RobustFileMove();
    private static void ThrowIfInvalidXpsFileForSave(Uri location);
    private static void ThrowIfInvalidXpsFileForOpen(Uri location);
}
internal class MS.Internal.Documents.Application.FileController : object {
    private sealed virtual override bool MS.Internal.Documents.Application.IDocumentController.EnableEdit(Document document);
    private sealed virtual override bool MS.Internal.Documents.Application.IDocumentController.Open(Document document);
    private sealed virtual override bool MS.Internal.Documents.Application.IDocumentController.Rebind(Document document);
    private sealed virtual override bool MS.Internal.Documents.Application.IDocumentController.SaveAsPreperation(Document document);
    private sealed virtual override bool MS.Internal.Documents.Application.IDocumentController.SaveCommit(Document document);
    private sealed virtual override bool MS.Internal.Documents.Application.IDocumentController.SavePreperation(Document document);
    private sealed virtual override bool MS.Internal.Documents.Application.IChainOfResponsibiltyNode<MS.Internal.Documents.Application.Document>.IsResponsible(Document subject);
}
internal class MS.Internal.Documents.Application.FileDocument : StreamDocument`1<DocumentStream> {
    private CriticalFileToken _destinationToken;
    private CriticalFileToken _sourceToken;
    private bool _swapFile;
    internal CriticalFileToken DestinationToken { get; internal set; }
    internal CriticalFileToken SourceToken { get; }
    internal bool SwapDestination { get; internal set; }
    public FileDocument(CriticalFileToken fileToken);
    public FileDocument(Stream existing);
    internal CriticalFileToken get_DestinationToken();
    internal void set_DestinationToken(CriticalFileToken value);
    internal CriticalFileToken get_SourceToken();
    internal bool get_SwapDestination();
    internal void set_SwapDestination(bool value);
}
internal static class MS.Internal.Documents.Application.FilePresentation : object {
    internal static bool ShowSaveFileDialog(CriticalFileToken& fileToken);
    internal static void ShowDestinationIsReadOnly();
    internal static void ShowNoTemporaryFileAccess();
    internal static void ShowNoAccessToSource();
    internal static void ShowNoAccessToDestination();
}
[FriendAccessAllowedAttribute]
internal class MS.Internal.Documents.Application.HostedController : object {
    private sealed virtual override bool MS.Internal.Documents.Application.IDocumentController.EnableEdit(Document document);
    private sealed virtual override bool MS.Internal.Documents.Application.IDocumentController.Open(Document document);
    private sealed virtual override bool MS.Internal.Documents.Application.IDocumentController.Rebind(Document document);
    private sealed virtual override bool MS.Internal.Documents.Application.IDocumentController.SaveAsPreperation(Document document);
    private sealed virtual override bool MS.Internal.Documents.Application.IDocumentController.SaveCommit(Document document);
    private sealed virtual override bool MS.Internal.Documents.Application.IDocumentController.SavePreperation(Document document);
    private sealed virtual override bool MS.Internal.Documents.Application.IChainOfResponsibiltyNode<MS.Internal.Documents.Application.Document>.IsResponsible(Document subject);
}
internal interface MS.Internal.Documents.Application.IChainOfDependenciesNode`1 {
    public T Dependency { get; }
    public abstract virtual T get_Dependency();
}
internal interface MS.Internal.Documents.Application.IChainOfResponsibiltyNode`1 {
    public abstract virtual bool IsResponsible(T subject);
}
internal interface MS.Internal.Documents.Application.IDocumentController {
    public abstract virtual bool EnableEdit(Document document);
    public abstract virtual bool Open(Document document);
    public abstract virtual bool Rebind(Document document);
    public abstract virtual bool SaveAsPreperation(Document document);
    public abstract virtual bool SaveCommit(Document document);
    public abstract virtual bool SavePreperation(Document document);
}
internal static class MS.Internal.Documents.Application.NavigationHelper : object {
    private static SecurityCriticalDataClass`1<NavigateDelegate> _navigate;
    [FriendAccessAllowedAttribute]
internal static NavigateDelegate Navigate { get; internal set; }
    internal static void NavigateToDocument(Document document);
    internal static void NavigateToExternalUri(Uri uri);
    internal static NavigateDelegate get_Navigate();
    internal static void set_Navigate(NavigateDelegate value);
}
internal class MS.Internal.Documents.Application.PackageController : object {
    private sealed virtual override bool MS.Internal.Documents.Application.IDocumentController.EnableEdit(Document document);
    private sealed virtual override bool MS.Internal.Documents.Application.IDocumentController.Open(Document document);
    private sealed virtual override bool MS.Internal.Documents.Application.IDocumentController.Rebind(Document document);
    private sealed virtual override bool MS.Internal.Documents.Application.IDocumentController.SaveAsPreperation(Document document);
    private sealed virtual override bool MS.Internal.Documents.Application.IDocumentController.SaveCommit(Document document);
    private sealed virtual override bool MS.Internal.Documents.Application.IDocumentController.SavePreperation(Document document);
    private sealed virtual override bool MS.Internal.Documents.Application.IChainOfResponsibiltyNode<MS.Internal.Documents.Application.Document>.IsResponsible(Document subject);
}
[FriendAccessAllowedAttribute]
internal class MS.Internal.Documents.Application.PackageDocument : Document {
    private SecurityCriticalDataForSet`1<TransactionalPackage> _package;
    internal Stream Destination { get; }
    internal Stream Source { get; }
    internal Stream Workspace { get; }
    internal TransactionalPackage Package { get; internal set; }
    internal PackageDocument(Document dependency);
    internal virtual Stream get_Destination();
    internal virtual Stream get_Source();
    internal virtual Stream get_Workspace();
    internal TransactionalPackage get_Package();
    internal void set_Package(TransactionalPackage value);
    protected virtual void Dispose(bool disposing);
}
internal class MS.Internal.Documents.Application.PageTextBox : TextBox {
    public static DependencyProperty PageNumberProperty;
    [CompilerGeneratedAttribute]
private EventHandler PageNumberEdited;
    [CompilerGeneratedAttribute]
private EventHandler PageNumberEditCancelled;
    private bool _isEditingText;
    private static int _pageNumberDefault;
    private static PageTextBox();
    public void SetPageNumber(int pageNumber);
    [CompilerGeneratedAttribute]
internal void add_PageNumberEdited(EventHandler value);
    [CompilerGeneratedAttribute]
internal void remove_PageNumberEdited(EventHandler value);
    internal void OnPageNumberEdited();
    [CompilerGeneratedAttribute]
internal void add_PageNumberEditCancelled(EventHandler value);
    [CompilerGeneratedAttribute]
internal void remove_PageNumberEditCancelled(EventHandler value);
    internal void OnPageNumberEditCancelled();
    protected virtual AutomationPeer OnCreateAutomationPeer();
    protected virtual void OnMouseDown(MouseButtonEventArgs e);
    private void OnGotFocus(object sender, EventArgs e);
    private void OnPreviewKeyDown(object sender, KeyEventArgs e);
    private void OnPreviewTextInput(object sender, TextCompositionEventArgs e);
    private void OnPaste(object sender, DataObjectPastingEventArgs e);
    private bool IsValidInputString(string incomingString);
    private bool IsValidInputChar(char c);
    private static void OnPageNumberChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    private void SetDefaults();
    private void SetHandlers();
}
internal class MS.Internal.Documents.Application.PolicyBinding : object {
    private RoutedUICommand _command;
    private RightsManagementPolicy _policy;
    public RoutedUICommand Command { get; }
    public RightsManagementPolicy Policy { get; }
    public PolicyBinding(RoutedUICommand command, RightsManagementPolicy policy);
    public RoutedUICommand get_Command();
    public RightsManagementPolicy get_Policy();
}
internal class MS.Internal.Documents.Application.RestrictedTransactionalPackage : TransactionalPackage {
    internal RestrictedTransactionalPackage(Stream original);
    internal virtual void MergeChanges(Stream target);
    protected virtual PackagePart CreatePartCore(Uri partUri, string contentType, CompressionOption compressionOption);
    private bool IsValidContentType(string contentType);
}
internal class MS.Internal.Documents.Application.RightsController : object {
    private static SecurityCriticalDataForSet`1<IRightsManagementProvider> _provider;
    private sealed virtual override bool MS.Internal.Documents.Application.IDocumentController.EnableEdit(Document document);
    private sealed virtual override bool MS.Internal.Documents.Application.IDocumentController.Open(Document document);
    private sealed virtual override bool MS.Internal.Documents.Application.IDocumentController.Rebind(Document document);
    private sealed virtual override bool MS.Internal.Documents.Application.IDocumentController.SaveAsPreperation(Document document);
    private sealed virtual override bool MS.Internal.Documents.Application.IDocumentController.SaveCommit(Document document);
    private sealed virtual override bool MS.Internal.Documents.Application.IDocumentController.SavePreperation(Document document);
    private sealed virtual override bool MS.Internal.Documents.Application.IChainOfResponsibiltyNode<MS.Internal.Documents.Application.Document>.IsResponsible(Document subject);
    private sealed virtual override void System.IDisposable.Dispose();
    private static EncryptedPackageEnvelope OpenEnvelopeOnStream(Stream ciphered);
    private static Stream DecryptEnvelopeAndSuppressStream(EncryptedPackageEnvelope envelope, bool allowWrite);
    private static void CloseEnvelope(EncryptedPackageEnvelope envelope);
}
internal class MS.Internal.Documents.Application.RightsDocument : StreamDocument`1<StreamProxy> {
    private SecurityCriticalDataForSet`1<EncryptedPackageEnvelope> _source;
    private SecurityCriticalDataForSet`1<EncryptedPackageEnvelope> _workspace;
    private SecurityCriticalDataForSet`1<EncryptedPackageEnvelope> _destination;
    internal EncryptedPackageEnvelope DestinationPackage { get; internal set; }
    internal EncryptedPackageEnvelope SourcePackage { get; internal set; }
    internal EncryptedPackageEnvelope WorkspacePackage { get; internal set; }
    internal RightsDocument(Document dependency);
    internal bool IsDestinationProtected();
    internal bool IsSourceProtected();
    internal EncryptedPackageEnvelope get_DestinationPackage();
    internal void set_DestinationPackage(EncryptedPackageEnvelope value);
    internal EncryptedPackageEnvelope get_SourcePackage();
    internal void set_SourcePackage(EncryptedPackageEnvelope value);
    internal EncryptedPackageEnvelope get_WorkspacePackage();
    internal void set_WorkspacePackage(EncryptedPackageEnvelope value);
    protected virtual void Dispose(bool disposing);
}
internal static class MS.Internal.Documents.Application.RightsManagementErrorHandler : object {
    internal static bool HandleOrRethrowException(RightsManagementOperation operation, Exception exception);
    private static bool IsCriticalOperation(RightsManagementOperation operation);
    private static string ParseException(RightsManagementOperation operation, Exception exception, Boolean& askUser, Boolean& fatal);
    private static string ParseTemplateExceptions(Exception exception, Boolean& askUser, Boolean& fatal);
    private static string ParseRightsManagementException(RightsManagementOperation operation, RightsManagementException rmException, Boolean& askUser, Boolean& fatal);
}
internal enum MS.Internal.Documents.Application.RightsManagementOperation : Enum {
    public int value__;
    public static RightsManagementOperation Initialize;
    public static RightsManagementOperation Decrypt;
    public static RightsManagementOperation PassportActivation;
    public static RightsManagementOperation TemplateAccess;
    public static RightsManagementOperation Other;
}
internal class MS.Internal.Documents.Application.RightsManagementSuppressedStream : StreamProxy {
    private SecurityCriticalDataForSet`1<bool> _allowWrite;
    public bool CanRead { get; }
    public bool CanWrite { get; }
    public long Length { get; }
    public long Position { get; public set; }
    private bool AllowWrite { get; }
    internal RightsManagementSuppressedStream(Stream targetOfProxy, bool isWriteAllowed);
    public virtual bool get_CanRead();
    public virtual bool get_CanWrite();
    public virtual void Close();
    public virtual void Flush();
    public virtual long get_Length();
    public virtual long get_Position();
    public virtual void set_Position(long value);
    public virtual int Read(Byte[] buffer, int offset, int count);
    public virtual long Seek(long offset, SeekOrigin origin);
    public virtual void SetLength(long value);
    public virtual void Write(Byte[] buffer, int offset, int count);
    private void ThrowIfReadOnly();
    private bool get_AllowWrite();
}
internal class MS.Internal.Documents.Application.StatusInfoItem : object {
    [CompilerGeneratedAttribute]
private EventHandler InfoBarVisibilityChanged;
    private StatusInfoItemType _type;
    private Rectangle _infoBarIcon;
    private TextBlock _infoBarText;
    private Button _infoBarButton;
    private Control _toolBarControl;
    public Visibility Visibility { get; public set; }
    public StatusInfoItem(StatusInfoItemType type, Button infoBarButton, Control toolBarControl);
    public Visibility get_Visibility();
    public void set_Visibility(Visibility value);
    [CompilerGeneratedAttribute]
public void add_InfoBarVisibilityChanged(EventHandler value);
    [CompilerGeneratedAttribute]
public void remove_InfoBarVisibilityChanged(EventHandler value);
    public void OnStatusChange(object sender, SignatureStatusEventArgs args);
    public void OnStatusChange(object sender, RightsManagementStatusEventArgs args);
    private void UpdateUI(DocumentStatusResources resources);
}
internal enum MS.Internal.Documents.Application.StatusInfoItemType : Enum {
    public int value__;
    public static StatusInfoItemType Unknown;
    public static StatusInfoItemType DigSig;
    public static StatusInfoItemType RM;
}
internal class MS.Internal.Documents.Application.StreamDocument`1 : Document {
    private SecurityCriticalDataForSet`1<T> _destination;
    private SecurityCriticalDataForSet`1<T> _source;
    private SecurityCriticalDataForSet`1<T> _workspace;
    internal Stream Destination { get; }
    internal T DestinationProxy { get; internal set; }
    internal Stream Source { get; }
    internal T SourceProxy { get; internal set; }
    internal Stream Workspace { get; }
    internal T WorkspaceProxy { get; internal set; }
    internal StreamDocument`1(Document dependency);
    internal virtual Stream get_Destination();
    internal T get_DestinationProxy();
    internal void set_DestinationProxy(T value);
    internal virtual Stream get_Source();
    internal T get_SourceProxy();
    internal void set_SourceProxy(T value);
    internal virtual Stream get_Workspace();
    internal T get_WorkspaceProxy();
    internal void set_WorkspaceProxy(T value);
    protected void ReleaseStreams();
    protected virtual void Dispose(bool disposing);
}
internal static class MS.Internal.Documents.Application.StreamHelper : object {
    internal static void CopyStream(Stream source, Stream target);
}
internal class MS.Internal.Documents.Application.StreamProxy : Stream {
    private SecurityCriticalDataForSet`1<Stream> _proxy;
    private SecurityCriticalDataForSet`1<bool> _isTargetReadOnly;
    public bool CanRead { get; }
    public bool CanSeek { get; }
    public bool CanTimeout { get; }
    public bool CanWrite { get; }
    public long Length { get; }
    public long Position { get; public set; }
    public int ReadTimeout { get; public set; }
    public int WriteTimeout { get; public set; }
    internal Stream Target { get; internal set; }
    internal StreamProxy(Stream targetOfProxy);
    internal StreamProxy(Stream targetOfProxy, bool isTargetReadOnly);
    public virtual bool get_CanRead();
    public virtual bool get_CanSeek();
    public virtual bool get_CanTimeout();
    public virtual bool get_CanWrite();
    public virtual void Close();
    public virtual void Flush();
    public virtual long get_Length();
    public virtual long get_Position();
    public virtual void set_Position(long value);
    public virtual int Read(Byte[] buffer, int offset, int count);
    public virtual int get_ReadTimeout();
    public virtual void set_ReadTimeout(int value);
    public virtual long Seek(long offset, SeekOrigin origin);
    public virtual void SetLength(long value);
    public virtual void Write(Byte[] buffer, int offset, int count);
    public virtual int get_WriteTimeout();
    public virtual void set_WriteTimeout(int value);
    protected virtual void Dispose(bool disposing);
    public virtual int GetHashCode();
    public virtual bool Equals(object obj);
    internal Stream get_Target();
    internal void set_Target(Stream value);
}
internal class MS.Internal.Documents.Application.SuppressedProperties : PackageProperties {
    private PackageProperties _target;
    public string Title { get; public set; }
    public string Subject { get; public set; }
    public string Creator { get; public set; }
    public string Keywords { get; public set; }
    public string Description { get; public set; }
    public string LastModifiedBy { get; public set; }
    public string Revision { get; public set; }
    public Nullable`1<DateTime> LastPrinted { get; public set; }
    public Nullable`1<DateTime> Created { get; public set; }
    public Nullable`1<DateTime> Modified { get; public set; }
    public string Category { get; public set; }
    public string Identifier { get; public set; }
    public string ContentType { get; public set; }
    public string Language { get; public set; }
    public string Version { get; public set; }
    public string ContentStatus { get; public set; }
    internal SuppressedProperties(EncryptedPackageEnvelope envelope);
    public virtual string get_Title();
    public virtual void set_Title(string value);
    public virtual string get_Subject();
    public virtual void set_Subject(string value);
    public virtual string get_Creator();
    public virtual void set_Creator(string value);
    public virtual string get_Keywords();
    public virtual void set_Keywords(string value);
    public virtual string get_Description();
    public virtual void set_Description(string value);
    public virtual string get_LastModifiedBy();
    public virtual void set_LastModifiedBy(string value);
    public virtual string get_Revision();
    public virtual void set_Revision(string value);
    public virtual Nullable`1<DateTime> get_LastPrinted();
    public virtual void set_LastPrinted(Nullable`1<DateTime> value);
    public virtual Nullable`1<DateTime> get_Created();
    public virtual void set_Created(Nullable`1<DateTime> value);
    public virtual Nullable`1<DateTime> get_Modified();
    public virtual void set_Modified(Nullable`1<DateTime> value);
    public virtual string get_Category();
    public virtual void set_Category(string value);
    public virtual string get_Identifier();
    public virtual void set_Identifier(string value);
    public virtual string get_ContentType();
    public virtual void set_ContentType(string value);
    public virtual string get_Language();
    public virtual void set_Language(string value);
    public virtual string get_Version();
    public virtual void set_Version(string value);
    public virtual string get_ContentStatus();
    public virtual void set_ContentStatus(string value);
    protected virtual void Dispose(bool disposing);
}
internal static class MS.Internal.Documents.Application.Trace : object {
    internal static BooleanSwitch File;
    internal static BooleanSwitch Packaging;
    internal static BooleanSwitch Presentation;
    internal static BooleanSwitch Rights;
    internal static BooleanSwitch Signatures;
    private static string FileSwitchName;
    private static string PackagingSwitchName;
    private static string PresentationSwitchName;
    private static string RightsSwitchName;
    private static string SignaturesSwitchName;
    private static Trace();
    internal static void SafeWrite(BooleanSwitch boolSwitch, string format, Object[] args);
    internal static void SafeWriteIf(bool condition, BooleanSwitch boolSwitch, string format, Object[] args);
}
internal class MS.Internal.Documents.Application.TransactionalPackage : Package {
    private Dictionary`2<Uri, WriteableOnDemandPackagePart> _activeParts;
    private SecurityCriticalDataForSet`1<Package> _originalPackage;
    private SecurityCriticalDataForSet`1<Package> _tempPackage;
    private List`1<Package> _trashCan;
    private bool _isDirty;
    internal bool IsDirty { get; }
    protected SecurityCriticalDataForSet`1<Package> TempPackage { get; }
    internal TransactionalPackage(Stream original);
    internal void EnableEditMode(Stream workspace);
    internal virtual void MergeChanges(Stream target);
    internal void Rebind(Stream newOriginal);
    internal bool get_IsDirty();
    protected virtual PackagePart CreatePartCore(Uri partUri, string contentType, CompressionOption compressionOption);
    protected virtual void DeletePartCore(Uri partUri);
    protected virtual void Dispose(bool disposing);
    protected virtual void FlushCore();
    protected virtual PackagePart GetPartCore(Uri partUri);
    protected virtual PackagePart[] GetPartsCore();
    protected SecurityCriticalDataForSet`1<Package> get_TempPackage();
    private static void CopyPackagePartStream(PackagePart original, PackagePart copy);
    private void EnsureTempPackage();
    private PackagePart TempPackagePartFactory(PackagePart packagePart);
}
internal class MS.Internal.Documents.Application.WriteableOnDemandPackagePart : PackagePart {
    private PackagePart _activePart;
    private bool _isActiveWriteable;
    private WriteablePackagePartFactoryDelegate _getWriteablePartInstance;
    unknown PackagePart Target {internal set; }
    internal WriteableOnDemandPackagePart(Package container, PackagePart readingPart, WriteablePackagePartFactoryDelegate writeablePartFactory);
    internal void set_Target(PackagePart value);
    protected virtual string GetContentTypeCore();
    protected virtual Stream GetStreamCore(FileMode mode, FileAccess access);
    private Stream WriteableStreamFactory(FileMode mode, FileAccess access);
}
internal class MS.Internal.Documents.Application.WriteableOnDemandStream : Stream {
    private GetWriteableInstance _writeableStreamFactory;
    private Stream _active;
    private bool _isActiveWriteable;
    private FileMode _mode;
    private FileAccess _access;
    private bool _wantedWrite;
    public bool CanRead { get; }
    public bool CanSeek { get; }
    public long Length { get; }
    public long Position { get; public set; }
    public bool CanWrite { get; }
    internal WriteableOnDemandStream(Stream readingStream, FileMode mode, FileAccess access, GetWriteableInstance writeableStreamFactory);
    public virtual bool get_CanRead();
    public virtual bool get_CanSeek();
    public virtual void Flush();
    public virtual long get_Length();
    public virtual long get_Position();
    public virtual void set_Position(long value);
    public virtual int Read(Byte[] buffer, int offset, int count);
    public virtual long Seek(long offset, SeekOrigin origin);
    public virtual bool get_CanWrite();
    public virtual void SetLength(long value);
    public virtual void Write(Byte[] buffer, int offset, int count);
    protected virtual void Dispose(bool disposing);
    private void EnsureWritable();
}
internal class MS.Internal.Documents.Application.XpsViewerException : Exception {
    internal XpsViewerException(string message);
    internal XpsViewerException(string message, Exception innerException);
    protected XpsViewerException(SerializationInfo info, StreamingContext context);
}
internal class MS.Internal.Documents.Application.ZoomComboBox : ComboBox {
    public static DependencyProperty ZoomProperty;
    [CompilerGeneratedAttribute]
private EventHandler ZoomValueEdited;
    [CompilerGeneratedAttribute]
private EventHandler ZoomValueEditCancelled;
    private bool _isEditingText;
    private bool _processSelections;
    private TextBox _editableTextBox;
    private static string _editableTextBoxName;
    private static double _zoomDefault;
    public TextBox TextBox { get; }
    public bool ProcessSelections { get; }
    private static ZoomComboBox();
    public TextBox get_TextBox();
    public bool get_ProcessSelections();
    public virtual void OnApplyTemplate();
    public void SetZoom(double zoom);
    [CompilerGeneratedAttribute]
internal void add_ZoomValueEdited(EventHandler value);
    [CompilerGeneratedAttribute]
internal void remove_ZoomValueEdited(EventHandler value);
    internal void OnZoomValueEdited();
    [CompilerGeneratedAttribute]
internal void add_ZoomValueEditCancelled(EventHandler value);
    [CompilerGeneratedAttribute]
internal void remove_ZoomValueEditCancelled(EventHandler value);
    internal void OnZoomValueEditCancelled();
    protected virtual void OnSelectionChanged(SelectionChangedEventArgs e);
    protected virtual void OnDropDownOpened(EventArgs e);
    protected virtual AutomationPeer OnCreateAutomationPeer();
    protected virtual void OnPreviewKeyDown(KeyEventArgs e);
    private void OnPreviewMouseLeftButtonUp(object sender, EventArgs e);
    private void OnMouseLeftButtonUp(object sender, EventArgs e);
    private void OnPreviewTextInput(object sender, TextCompositionEventArgs e);
    private void OnPaste(object sender, DataObjectPastingEventArgs e);
    private bool IsValidInputString(string incomingString);
    private bool IsValidInputChar(char c);
    private static void OnZoomChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    private static bool ZoomValueToString(double zoomValue, String& zoomString);
    private void SetDefaults();
    private void SetHandlers();
}
internal enum MS.Internal.Documents.CertificatePriorityStatus : Enum {
    public int value__;
    public static CertificatePriorityStatus Ok;
    public static CertificatePriorityStatus Corrupted;
    public static CertificatePriorityStatus CannotBeVerified;
    public static CertificatePriorityStatus IssuerNotTrusted;
    public static CertificatePriorityStatus Revoked;
    public static CertificatePriorityStatus Expired;
    public static CertificatePriorityStatus NoCertificate;
    public static CertificatePriorityStatus Verifying;
}
internal class MS.Internal.Documents.CredentialManagerDialog : DialogBaseForm {
    private DocumentRightsManagementManager _docRightsManagementManager;
    private IContainer components;
    private TableLayoutPanel _mainDialogTableLayoutPanel;
    private FlowLayoutPanel _buttonFlowLayoutPanel;
    private Button _cancelButton;
    private Button _okButton;
    private TableLayoutPanel _userInputtableLayoutPanel;
    private FlowLayoutPanel _listButtonFlowLayoutPanel;
    private Button _addButton;
    private Button _removeButton;
    private ListBox _credListBox;
    private Label _instructionLabel;
    internal CredentialManagerDialog(IList`1<string> accountList, string defaultAccount, DocumentRightsManagementManager docRightsManagementManager);
    internal void SetCredentialManagementList(IList`1<string> accountList, string defaultAccount);
    private void _credListBox_SelectedIndexChanged(object sender, EventArgs e);
    private void _okButton_Click(object sender, EventArgs e);
    private void _removeButton_Click(object sender, EventArgs e);
    private void _addButton_Click(object sender, EventArgs e);
    protected virtual void ApplyResources();
    protected virtual void Dispose(bool disposing);
    protected virtual void InitializeComponent();
}
internal class MS.Internal.Documents.DialogBaseForm : Form {
    protected static int _maxLocationLength;
    protected static int _maxNameLength;
    protected static int _maxIntentLength;
    protected ToolTip _toolTip;
    protected virtual void InitializeComponent();
    protected virtual void ApplyStyle();
    protected virtual void ApplyResources();
    private void ApplyDialogFont(Control control);
    private void ApplyDialogFontToPropertyGrid(Control control);
    private void ApplyRTL();
}
internal class MS.Internal.Documents.DialogDivider : Control {
    protected virtual void SetBoundsCore(int x, int y, int width, int height, BoundsSpecified specified);
    protected virtual void OnPaint(PaintEventArgs e);
}
internal class MS.Internal.Documents.DigitalSignature : object {
    private SecurityCriticalDataForSet`1<SignatureStatus> _signatureState;
    private SecurityCriticalDataForSet`1<string> _subjectName;
    private SecurityCriticalDataForSet`1<string> _reason;
    private SecurityCriticalDataForSet`1<Nullable`1<DateTime>> _signedOn;
    private SecurityCriticalDataForSet`1<string> _location;
    private SecurityCriticalDataForSet`1<bool> _isDocumentPropertiesRestricted;
    private SecurityCriticalDataForSet`1<bool> _isAddingSignaturesRestricted;
    private SecurityCriticalDataForSet`1<Nullable`1<Guid>> _guidID;
    private SecurityCriticalDataForSet`1<X509Certificate2> _x509Certificate2;
    private SecurityCriticalDataForSet`1<XpsDigitalSignature> _xpsDigitalSignature;
    internal SignatureStatus SignatureState { get; internal set; }
    internal string SubjectName { get; internal set; }
    internal string Reason { get; internal set; }
    internal Nullable`1<DateTime> SignedOn { get; internal set; }
    internal string Location { get; internal set; }
    internal bool IsDocumentPropertiesRestricted { get; internal set; }
    internal bool IsAddingSignaturesRestricted { get; internal set; }
    internal Nullable`1<Guid> GuidID { get; internal set; }
    internal X509Certificate2 Certificate { get; internal set; }
    internal XpsDigitalSignature XpsDigitalSignature { get; internal set; }
    internal SignatureStatus get_SignatureState();
    internal void set_SignatureState(SignatureStatus value);
    internal string get_SubjectName();
    internal void set_SubjectName(string value);
    internal string get_Reason();
    internal void set_Reason(string value);
    internal Nullable`1<DateTime> get_SignedOn();
    internal void set_SignedOn(Nullable`1<DateTime> value);
    internal string get_Location();
    internal void set_Location(string value);
    internal bool get_IsDocumentPropertiesRestricted();
    internal void set_IsDocumentPropertiesRestricted(bool value);
    internal bool get_IsAddingSignaturesRestricted();
    internal void set_IsAddingSignaturesRestricted(bool value);
    internal Nullable`1<Guid> get_GuidID();
    internal void set_GuidID(Nullable`1<Guid> value);
    internal X509Certificate2 get_Certificate();
    internal void set_Certificate(X509Certificate2 value);
    internal XpsDigitalSignature get_XpsDigitalSignature();
    internal void set_XpsDigitalSignature(XpsDigitalSignature value);
}
[FriendAccessAllowedAttribute]
internal class MS.Internal.Documents.DigitalSignatureProvider : object {
    private SecurityCriticalDataForSet`1<XpsDocument> _xpsDocument;
    private SecurityCriticalDataForSet`1<IXpsFixedDocumentSequenceReader> _fixedDocumentSequence;
    private SecurityCriticalDataForSet`1<IXpsFixedDocumentReader> _fixedDocument;
    private IList`1<DigitalSignature> _digitalSignatureList;
    private SecurityCriticalDataForSet`1<ReadOnlyCollection`1<DigitalSignature>> _readOnlySignatureList;
    private static X509ChainStatusFlags _x509NonCorruptedFlags;
    private static X509ChainStatusFlags _x509CannotBeVerifiedFlags;
    private static X509ChainStatusFlags _x509IssuerNotTrustedFlags;
    private static X509ChainStatusFlags _x509RevokedFlags;
    private static X509ChainStatusFlags _x509ExpiredFlags;
    private SecurityCriticalDataForSet`1<bool> _isSignableCache;
    private SecurityCriticalDataForSet`1<bool> _isSignableCacheValid;
    private bool MS.Internal.Documents.IDigitalSignatureProvider.IsSigned { get; }
    private bool MS.Internal.Documents.IDigitalSignatureProvider.IsSignable { get; }
    private bool MS.Internal.Documents.IDigitalSignatureProvider.HasRequests { get; }
    private ReadOnlyCollection`1<DigitalSignature> MS.Internal.Documents.IDigitalSignatureProvider.Signatures { get; }
    private XpsDocument XpsDocument { get; private set; }
    private IXpsFixedDocumentReader FixedDocument { get; private set; }
    private IXpsFixedDocumentSequenceReader FixedDocumentSequence { get; private set; }
    private IList`1<DigitalSignature> DigitalSignatureList { get; private set; }
    public DigitalSignatureProvider(Package package);
    private sealed virtual override bool MS.Internal.Documents.IDigitalSignatureProvider.get_IsSigned();
    private sealed virtual override bool MS.Internal.Documents.IDigitalSignatureProvider.get_IsSignable();
    private sealed virtual override bool MS.Internal.Documents.IDigitalSignatureProvider.get_HasRequests();
    private sealed virtual override void MS.Internal.Documents.IDigitalSignatureProvider.SignDocument(DigitalSignature digitalSignature);
    private sealed virtual override Guid MS.Internal.Documents.IDigitalSignatureProvider.AddRequestSignature(DigitalSignature digitalSignature);
    private sealed virtual override void MS.Internal.Documents.IDigitalSignatureProvider.RemoveRequestSignature(Guid spotId);
    private sealed virtual override void MS.Internal.Documents.IDigitalSignatureProvider.UnsignDocument(Guid id);
    private sealed virtual override void MS.Internal.Documents.IDigitalSignatureProvider.VerifySignatures();
    private sealed virtual override IList`1<X509Certificate2> MS.Internal.Documents.IDigitalSignatureProvider.GetAllCertificates();
    private sealed virtual override IDictionary`2<X509Certificate2, CertificatePriorityStatus> MS.Internal.Documents.IDigitalSignatureProvider.GetCertificateStatus(IList`1<X509Certificate2> certificates);
    private sealed virtual override ReadOnlyCollection`1<DigitalSignature> MS.Internal.Documents.IDigitalSignatureProvider.get_Signatures();
    private IList`1<DigitalSignature> GetSignaturesFromPackage();
    private static DigitalSignature ConvertXpsDigitalSignature(XpsDigitalSignature xpsDigitalSignature);
    private static DigitalSignature ConvertXpsSignatureDefinition(XpsSignatureDefinition signatureDefinition);
    private static SignatureStatus VerifyXpsDigitalSignature(XpsDigitalSignature xpsDigitalSignature);
    private static CertificatePriorityStatus GetCertificateStatus(X509Certificate2 certificate);
    private XpsSignatureDefinition FindSignatureDefinition(Guid id);
    private void AssertIsSignable();
    private XpsDocument get_XpsDocument();
    private void set_XpsDocument(XpsDocument value);
    private IXpsFixedDocumentReader get_FixedDocument();
    private void set_FixedDocument(IXpsFixedDocumentReader value);
    private IXpsFixedDocumentSequenceReader get_FixedDocumentSequence();
    private void set_FixedDocumentSequence(IXpsFixedDocumentSequenceReader value);
    private IList`1<DigitalSignature> get_DigitalSignatureList();
    private void set_DigitalSignatureList(IList`1<DigitalSignature> value);
}
[FriendAccessAllowedAttribute]
internal class MS.Internal.Documents.DocumentApplicationDocumentViewer : DocumentViewer {
    [CompilerGeneratedAttribute]
private JournalEntryHandler AddJournalEntry;
    private XpsDocumentWriter _documentWriter;
    private static DocumentApplicationDocumentViewer _singletonInstance;
    private DocumentSignatureManager _docSigManager;
    private DocumentRightsManagementManager _rmManager;
    private bool _isUISetup;
    private StatusInfoItem _digSigInfoBar;
    private StatusInfoItem _rmInfoBar;
    private DocumentApplicationState _state;
    private static int _invalidPageNumber;
    private SecurityCriticalDataForSet`1<RightsManagementPolicy> _rightsManagementPolicy;
    private RightsManagementStatus _rightsManagementStatus;
    private SecurityCriticalDataForSet`1<CommandEnforcer> _commandEnforcer;
    private static RoutedUICommand _focusToolBarCommand;
    private static RoutedUICommand _signCommand;
    private static RoutedUICommand _requestSignersCommand;
    private static RoutedUICommand _showSignatureSummaryCommand;
    private static RoutedUICommand _showRMPermissionsCommand;
    private static RoutedUICommand _showRMCredentialManagerCommand;
    private static RoutedUICommand _showRMPublishingUICommand;
    private Grid _toolBar;
    private ZoomComboBox _zoomComboBox;
    private Button _pageUpButton;
    private PageTextBox _pageTextBox;
    private Button _pageDownButton;
    private Button _actualSizeButton;
    private Button _pageWidthButton;
    private Button _wholePageButton;
    private Button _twoPageButton;
    private Button _thumbnailButton;
    private Button _saveAsButton;
    private Button _rmButton;
    private MenuItem _digitalSignaturesMenuItem;
    private FrameworkElement _infoBar;
    private Button _infoBarDigSigButton;
    private Button _infoBarRMButton;
    private Button _infoBarCloseButton;
    private FindToolBar _findToolBar;
    private ScrollViewer _scrollViewer;
    private static string _toolBarName;
    private static string _toolBarStyleKeyName;
    private static string _zoomComboBoxName;
    private static string _pageUpButtonName;
    private static string _pageTextBoxName;
    private static string _pageDownButtonName;
    private static string _actualSizeButtonName;
    private static string _pageWidthButtonName;
    private static string _wholePageButtonName;
    private static string _twoPageButtonName;
    private static string _thumbnailButtonName;
    private static string _saveAsButtonName;
    private static string _rmButtonName;
    private static string _digitalSignaturesMenuItemName;
    private static string _infoBarName;
    private static string _forwardButtonName;
    private static string _backButtonName;
    private static string _digSigSignMenuItemName;
    private static string _digSigRequestSignersMenuItemName;
    private static string _digSigShowSignatureSummaryMenuItemName;
    private static string _infoBarSignaturesButtonName;
    private static string _infoBarRMButtonName;
    private static string _infoBarCloseButtonName;
    private static string _contentHostName;
    private IWin32Window _rootBrowserWindow;
    public static RoutedUICommand FocusToolBar { get; }
    public static RoutedUICommand Sign { get; }
    public static RoutedUICommand RequestSigners { get; }
    public static RoutedUICommand ShowSignatureSummary { get; }
    public static RoutedUICommand ShowRMPermissions { get; }
    public static RoutedUICommand ShowRMCredentialManager { get; }
    public static RoutedUICommand ShowRMPublishingUI { get; }
    public DocumentApplicationState StoredDocumentApplicationState { get; public set; }
    public RightsManagementPolicy RightsManagementPolicy { get; }
    public IWin32Window RootBrowserWindow { get; }
    public static DocumentApplicationDocumentViewer Instance { get; }
    private Grid ToolBar { get; }
    private ZoomComboBox ZoomComboBox { get; }
    private Button PageUpButton { get; }
    private PageTextBox PageTextBox { get; }
    private Button PageDownButton { get; }
    private Button ActualSizeButton { get; }
    private Button PageWidthButton { get; }
    private Button WholePageButton { get; }
    private Button TwoPageButton { get; }
    private Button ThumbnailButton { get; }
    private Button RMButton { get; }
    private Button SaveAsButton { get; }
    private MenuItem DigitalSignaturesMenuItem { get; }
    private FrameworkElement InfoBar { get; }
    private Button InfoBarCloseButton { get; }
    private Button InfoBarDigSigButton { get; }
    private Button InfoBarRMButton { get; }
    private FindToolBar FindToolBar { get; }
    private ScrollViewer ScrollViewer { get; }
    private CommandEnforcer CommandEnforcer { get; }
    private static DocumentApplicationDocumentViewer();
    public static RoutedUICommand get_FocusToolBar();
    public static RoutedUICommand get_Sign();
    public static RoutedUICommand get_RequestSigners();
    public static RoutedUICommand get_ShowSignatureSummary();
    public static RoutedUICommand get_ShowRMPermissions();
    public static RoutedUICommand get_ShowRMCredentialManager();
    public static RoutedUICommand get_ShowRMPublishingUI();
    public DocumentApplicationState get_StoredDocumentApplicationState();
    public void set_StoredDocumentApplicationState(DocumentApplicationState value);
    public RightsManagementPolicy get_RightsManagementPolicy();
    public IWin32Window get_RootBrowserWindow();
    public static DocumentApplicationDocumentViewer get_Instance();
    public void InitializeUI(DocumentSignatureManager docSigManager, DocumentRightsManagementManager rmManager);
    public virtual void OnApplyTemplate();
    protected virtual void OnPrintCommand();
    protected virtual void OnCancelPrintCommand();
    private void HandlePrintCompleted(object sender, WritingCompletedEventArgs e);
    private void HandlePrintCancelled(object sender, WritingCancelledEventArgs e);
    private void OnPrintCommandPageRangeOverride();
    private void WritePageSelection(XpsDocumentWriter docWriter, DocumentPaginator docPaginator, PageRange pageRange, PrintDocumentImageableArea ia);
    protected virtual void OnDocumentChanged();
    protected virtual void OnContextMenuOpening(ContextMenuEventArgs e);
    protected virtual void OnContextMenuClosing(ContextMenuEventArgs e);
    protected virtual void OnKeyDown(KeyEventArgs e);
    public DocumentApplicationState GetCurrentState();
    public void SetUIToStoredState();
    [CompilerGeneratedAttribute]
public void add_AddJournalEntry(JournalEntryHandler value);
    [CompilerGeneratedAttribute]
public void remove_AddJournalEntry(JournalEntryHandler value);
    private Grid get_ToolBar();
    private ZoomComboBox get_ZoomComboBox();
    private Button get_PageUpButton();
    private PageTextBox get_PageTextBox();
    private Button get_PageDownButton();
    private Button get_ActualSizeButton();
    private Button get_PageWidthButton();
    private Button get_WholePageButton();
    private Button get_TwoPageButton();
    private Button get_ThumbnailButton();
    private Button get_RMButton();
    private Button get_SaveAsButton();
    private MenuItem get_DigitalSignaturesMenuItem();
    private FrameworkElement get_InfoBar();
    private Button get_InfoBarCloseButton();
    private Button get_InfoBarDigSigButton();
    private Button get_InfoBarRMButton();
    private FindToolBar get_FindToolBar();
    private ScrollViewer get_ScrollViewer();
    private CommandEnforcer get_CommandEnforcer();
    private void SetupUIControls();
    private void SetupUITabIndices();
    private bool RequiredControlsExist();
    private void ChangeControlVisibility(UIElement uie);
    private void ChangeControlVisibility(UIElement uie, bool visibility);
    private void MenuPreviewKeyDown(object sender, KeyEventArgs e);
    private void OnInfoBarVisibilityChanged(object sender, EventArgs e);
    private void OnInfoBarCloseClicked(object sender, EventArgs e);
    private static void OnApplicationCommandExecute(object sender, ExecutedRoutedEventArgs e);
    private static void OnApplicationCommandQuery(object target, CanExecuteRoutedEventArgs e);
    private static void OnNavigationCommandExecute(object sender, ExecutedRoutedEventArgs e);
    private static void OnNavigationCommandQuery(object sender, CanExecuteRoutedEventArgs e);
    private static void OnDigSigExecute(object sender, ExecutedRoutedEventArgs e);
    private static void OnDigSigQuery(object sender, CanExecuteRoutedEventArgs e);
    private void FireJournalEntryEvent();
    private void OnPaginationCompleted(object sender, EventArgs args);
    private static void OnRMExecute(object sender, ExecutedRoutedEventArgs e);
    private static void OnRMQuery(object sender, CanExecuteRoutedEventArgs e);
    private void OnRMPolicyChanged(object sender, RightsManagementPolicyEventArgs args);
    private void OnRMStatusChanged(object sender, RightsManagementStatusEventArgs args);
    private void OnZoomComboBoxLostFocus(object sender, KeyboardFocusChangedEventArgs e);
    private void OnZoomComboBoxSelectionChanged(object sender, SelectionChangedEventArgs e);
    private void OnZoomComboBoxValueEdited(object sender, EventArgs e);
    private void OnZoomComboBoxEditCancelled(object sender, EventArgs e);
    private void SetZoomComboBoxValue();
    private void PopulateZoomComboBoxItems();
    private void AddZoomComboBoxItem(ZoomComboBoxItem zoomItem, string name);
    private static bool StringToZoomValue(string zoomString, Double& zoomValue);
    private void OnPageTextBoxLostFocus(object sender, KeyboardFocusChangedEventArgs e);
    private void OnPageTextBoxValueEdited(object sender, EventArgs e);
    private void OnPageTextBoxEditCancelled(object sender, EventArgs e);
    private void SetPageTextBoxValue();
    public int ParsePageNumber(string pageNumberString);
    private static void CreateCommandBindings();
    private static RoutedUICommand CreateAndBindCommand(string name, string header, InputGestureCollection gestures, ExecutedRoutedEventHandler executeHandler, CanExecuteRoutedEventHandler queryEnabledHandler);
    private static void BindCommand(RoutedUICommand command, ExecutedRoutedEventHandler executeHandler, CanExecuteRoutedEventHandler queryEnabledHandler);
    private void CreateEnforcer();
    [CompilerGeneratedAttribute]
private object <SetUIToStoredState>b__38_0(object arg);
}
[FriendAccessAllowedAttribute]
internal class MS.Internal.Documents.DocumentRightsManagementManager : object {
    [CompilerGeneratedAttribute]
private RMStatusChangeHandler RMStatusChange;
    [CompilerGeneratedAttribute]
private EventHandler PublishLicenseChange;
    [CompilerGeneratedAttribute]
private RMPolicyChangeHandler RMPolicyChange;
    private static SecurityCriticalDataForSet`1<DocumentRightsManagementManager> _currentManager;
    private SecurityCriticalDataForSet`1<IRightsManagementProvider> _rmProviderCache;
    private CredentialManagerDialog _credManagerDialog;
    private bool _determinedRMInstallState;
    private bool _isRMInstalled;
    private bool _isSecureEnvironmentReliable;
    private IDictionary`2<string, RightsManagementUser> _userMap;
    internal static DocumentRightsManagementManager Current { get; }
    unknown PublishLicense PublishLicense {internal set; }
    internal bool HasPermissionToSave { get; }
    internal bool HasPermissionToEdit { get; }
    internal bool IsRMInstalled { get; }
    private IRightsManagementProvider _rmProvider { get; }
    private DocumentRightsManagementManager(IRightsManagementProvider rmProvider);
    internal static void Initialize(IRightsManagementProvider rmProvider);
    internal Stream DecryptPackage();
    internal void Evaluate();
    internal void SetEncryptedPackage(EncryptedPackageEnvelope newPackage);
    internal void ShowCredentialManagementUI();
    internal DialogResult ShowCredentialManagementUI(bool decrypting);
    internal void ShowEnrollment();
    internal bool Enroll(EnrollmentAccountType accountType);
    internal void ShowPermissions();
    internal void ShowPublishing();
    internal void OnCredentialManagementSetDefault(string defaultAccount);
    internal void OnCredentialManagementRemove(string accountName);
    internal void OnCredentialManagementShowEnrollment();
    internal void PromptToInstallRM();
    internal IList`1<string> GetCredentialManagementResourceList();
    internal string GetDefaultCredentialManagementResource();
    internal static DocumentRightsManagementManager get_Current();
    internal void set_PublishLicense(PublishLicense value);
    internal bool get_HasPermissionToSave();
    internal bool get_HasPermissionToEdit();
    internal bool get_IsRMInstalled();
    [CompilerGeneratedAttribute]
internal void add_RMStatusChange(RMStatusChangeHandler value);
    [CompilerGeneratedAttribute]
internal void remove_RMStatusChange(RMStatusChangeHandler value);
    [CompilerGeneratedAttribute]
internal void add_PublishLicenseChange(EventHandler value);
    [CompilerGeneratedAttribute]
internal void remove_PublishLicenseChange(EventHandler value);
    [CompilerGeneratedAttribute]
internal void add_RMPolicyChange(RMPolicyChangeHandler value);
    [CompilerGeneratedAttribute]
internal void remove_RMPolicyChange(RMPolicyChangeHandler value);
    private void SaveUseLicense();
    private bool IsRMClientInstalled();
    private bool ChooseCredentials(bool decrypting);
    private RightsManagementLicense GetUseLicense();
    private bool HasPublishLicenseChanged(IList`1<RightsManagementLicense> newGrants);
    private void RMEnrollThreadProc(object stateInfo);
    private void OnRMStatusChange(RightsManagementStatus newStatus);
    private void RaiseRMStatusChange(RightsManagementStatusEventArgs args);
    private void OnRMPolicyChange(RightsManagementPolicy newPolicy);
    private void RaiseRMPolicyChange(RightsManagementPolicyEventArgs args);
    private void OnPublishLicenseChange();
    private void RaisePublishLicenseChange(EventArgs args);
    private bool ProcessRMLicenses(IList`1<RightsManagementLicense> licenses, Boolean& exitDialog, Boolean& publishLicenseChanged);
    private bool ProcessRMTemplate(Uri templateFilename, Boolean& exitDialog);
    private string GetTemplateFromFile(Uri templateFilename);
    private IRightsManagementProvider get__rmProvider();
}
[FriendAccessAllowedAttribute]
internal class MS.Internal.Documents.DocumentSignatureManager : object {
    [CompilerGeneratedAttribute]
private EventHandler SignaturesChanged;
    [CompilerGeneratedAttribute]
private SignatureStatusChangeHandler SignatureStatusChange;
    private static DocumentSignatureManager _singleton;
    private SecurityCriticalDataForSet`1<IDigitalSignatureProvider> _digitalSignatureProvider;
    private IDictionary`2<SignatureResources, DigitalSignature> _digSigSigResources;
    private SecurityCriticalDataForSet`1<bool> _allowSign;
    private SecurityCriticalDataForSet`1<SignaturePolicy> _signaturePolicy;
    private List`1<ChangeLogEntity> _changeLog;
    private IDictionary`2<X509Certificate2, CertificatePriorityStatus> _certificateStatusTable;
    private static int SCARD_W_CANCELLED_BY_USER;
    internal static DocumentSignatureManager Current { get; }
    internal bool IsSigned { get; }
    internal bool IsSignable { get; }
    internal bool HasRequests { get; }
    private bool AreAllSignaturesVerified { get; }
    private IDigitalSignatureProvider DigitalSignatureProvider { get; private set; }
    private bool IsSigningAllowed { get; }
    private bool IsSigningAllowedByPolicy { get; }
    private DocumentSignatureManager(IDigitalSignatureProvider digSigProvider);
    [CompilerGeneratedAttribute]
public void add_SignaturesChanged(EventHandler value);
    [CompilerGeneratedAttribute]
public void remove_SignaturesChanged(EventHandler value);
    [CompilerGeneratedAttribute]
public void add_SignatureStatusChange(SignatureStatusChangeHandler value);
    [CompilerGeneratedAttribute]
public void remove_SignatureStatusChange(SignatureStatusChangeHandler value);
    internal void Evaluate();
    internal void VerifySignatures();
    internal void ShowSignatureSummaryDialog();
    internal void ShowSignatureRequestSummaryDialog();
    internal void ShowSigningDialog();
    internal void ShowSigningDialog(IntPtr parentWindow);
    internal void ShowSigningDialog(IntPtr parentWindow, DigitalSignature digitalSignatureRequest);
    internal IList`1<SignatureResources> GetSignatureResourceList(bool requestsOnly);
    internal bool SignDocument(DigitalSignature digSig, Form parentDialog, bool isSaveAs);
    internal void OnSign(Nullable`1<SignatureResources> signatureResources, IntPtr parentWindow);
    internal void OnCertificateView(SignatureResources signatureResources, IntPtr parentWindow);
    internal void OnSummaryAdd();
    internal void OnSummaryDelete(SignatureResources signatureResources);
    internal void OnAddRequestSignature(SignatureResources sigResources, DateTime dateTime);
    internal bool HasCertificate(SignatureResources signatureResources);
    internal static void Initialize(IDigitalSignatureProvider provider);
    internal static DocumentSignatureManager get_Current();
    internal bool get_IsSigned();
    internal bool get_IsSignable();
    internal bool get_HasRequests();
    private static X509Certificate2 ShowCertificatePickerDialog(IntPtr parentWindow);
    private static SignaturePolicy AddRestrictionsFromSignature(SignaturePolicy calcSigPolicy, DigitalSignature digSig);
    private static bool IsAllowedByPolicy(SignaturePolicy policy, SignaturePolicy action);
    private void StartCertificateStatusCheck(IList`1<X509Certificate2> certificateList);
    private void CertificateStatusCheckWorkItem(object stateInfo);
    private CertificatePriorityStatus GetCertificateStatusFromTable(DigitalSignature digitalSignature);
    private void OnSignatureStatusChange(SignatureStatus newStatus);
    private void RaiseSignatureStatusChange(SignatureStatusEventArgs args);
    private void RaiseSignaturesChanged();
    private void OnRMPolicyChanged(object sender, RightsManagementPolicyEventArgs args);
    private bool VerifySignability();
    private int GetErrorCode(CryptographicException ce);
    private void UndoChanges();
    private bool get_AreAllSignaturesVerified();
    private IDigitalSignatureProvider get_DigitalSignatureProvider();
    private void set_DigitalSignatureProvider(IDigitalSignatureProvider value);
    private bool get_IsSigningAllowed();
    private bool get_IsSigningAllowedByPolicy();
    [CompilerGeneratedAttribute]
private object <StartCertificateStatusCheck>b__35_0(object notused);
}
internal class MS.Internal.Documents.DocumentStatusResources : ValueType {
    private DrawingBrush _image;
    private string _text;
    private string _toolTip;
    internal DrawingBrush Image { get; internal set; }
    internal string Text { get; internal set; }
    internal string ToolTip { get; internal set; }
    internal DrawingBrush get_Image();
    internal void set_Image(DrawingBrush value);
    internal string get_Text();
    internal void set_Text(string value);
    internal string get_ToolTip();
    internal void set_ToolTip(string value);
}
internal enum MS.Internal.Documents.EnrollmentAccountType : Enum {
    public int value__;
    public static EnrollmentAccountType None;
    public static EnrollmentAccountType Network;
    public static EnrollmentAccountType Temporary;
    public static EnrollmentAccountType NET;
}
[FriendAccessAllowedAttribute]
internal class MS.Internal.Documents.FindToolBar : ToolBar {
    [CompilerGeneratedAttribute]
private EventHandler FindClicked;
    private bool _searchUp;
    private bool _documentLoaded;
    internal FindToolBar FindToolbar;
    internal Border FindTextBoxBorder;
    internal GradientStop FindBorderGradientStop;
    internal Grid FindTextBoxGrid;
    internal Label FindTextLabel;
    internal TextBox FindTextBox;
    internal Button FindPreviousButton;
    internal Button FindNextButton;
    internal Menu OptionsMenu;
    internal MenuItem OptionsMenuItem;
    internal MenuItem OptionsWholeWordMenuItem;
    internal MenuItem OptionsCaseMenuItem;
    internal MenuItem OptionsDiacriticMenuItem;
    internal MenuItem OptionsKashidaMenuItem;
    internal MenuItem OptionsAlefHamzaMenuItem;
    private bool _contentLoaded;
    public string SearchText { get; }
    public bool SearchUp { get; public set; }
    public bool MatchCase { get; }
    public bool MatchWholeWord { get; }
    public bool MatchDiacritic { get; }
    public bool MatchKashida { get; }
    public bool MatchAlefHamza { get; }
    unknown bool DocumentLoaded {public set; }
    public bool FindEnabled { get; }
    public string get_SearchText();
    public bool get_SearchUp();
    public void set_SearchUp(bool value);
    public bool get_MatchCase();
    public bool get_MatchWholeWord();
    public bool get_MatchDiacritic();
    public bool get_MatchKashida();
    public bool get_MatchAlefHamza();
    public void set_DocumentLoaded(bool value);
    public bool get_FindEnabled();
    [CompilerGeneratedAttribute]
public void add_FindClicked(EventHandler value);
    [CompilerGeneratedAttribute]
public void remove_FindClicked(EventHandler value);
    public void GoToTextBox();
    private object OnGoToTextBox(object param);
    private void OnFindTextBoxChanged(object sender, TextChangedEventArgs e);
    private void OnFindTextBoxPreviewKeyDown(object sender, KeyEventArgs e);
    private void UpdateButtonState();
    private void OnFindNextClick(object sender, EventArgs e);
    private void OnFindPreviousClick(object sender, EventArgs e);
    private void OnFindClick();
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("PresentationBuildTasks", "4.8.1.0")]
public sealed virtual void InitializeComponent();
    [GeneratedCodeAttribute("PresentationBuildTasks", "4.8.1.0")]
[DebuggerNonUserCodeAttribute]
[EditorBrowsableAttribute("1")]
private sealed virtual override void System.Windows.Markup.IComponentConnector.Connect(int connectionId, object target);
}
internal interface MS.Internal.Documents.IDigitalSignatureProvider {
    public bool HasRequests { get; }
    public bool IsSigned { get; }
    public bool IsSignable { get; }
    public ReadOnlyCollection`1<DigitalSignature> Signatures { get; }
    public abstract virtual Guid AddRequestSignature(DigitalSignature digitalSignature);
    public abstract virtual IList`1<X509Certificate2> GetAllCertificates();
    public abstract virtual IDictionary`2<X509Certificate2, CertificatePriorityStatus> GetCertificateStatus(IList`1<X509Certificate2> certificates);
    public abstract virtual void RemoveRequestSignature(Guid spotId);
    public abstract virtual void SignDocument(DigitalSignature digitalSignature);
    public abstract virtual void UnsignDocument(Guid id);
    public abstract virtual void VerifySignatures();
    public abstract virtual bool get_HasRequests();
    public abstract virtual bool get_IsSigned();
    public abstract virtual bool get_IsSignable();
    public abstract virtual ReadOnlyCollection`1<DigitalSignature> get_Signatures();
}
internal interface MS.Internal.Documents.IRightsManagementProvider {
    public bool IsProtected { get; }
    public RightsManagementLicense CurrentUseLicense { get; }
    public PublishLicense CurrentPublishLicense { get; public set; }
    public RightsManagementUser CurrentUser { get; }
    public abstract virtual bool get_IsProtected();
    public abstract virtual RightsManagementLicense get_CurrentUseLicense();
    public abstract virtual PublishLicense get_CurrentPublishLicense();
    public abstract virtual void set_CurrentPublishLicense(PublishLicense value);
    public abstract virtual RightsManagementUser get_CurrentUser();
    public abstract virtual void InitializeEnvironment(EnrollmentAccountType accountType);
    public abstract virtual void InitializeEnvironment(RightsManagementUser user);
    public abstract virtual bool LoadUseLicense();
    public abstract virtual bool AcquireUseLicense();
    public abstract virtual void SaveUseLicense(EncryptedPackageEnvelope package);
    public abstract virtual void BindUseLicense();
    public abstract virtual ReadOnlyCollection`1<RightsManagementUser> GetAvailableCredentials();
    public abstract virtual void RemoveCredentials(RightsManagementUser user);
    public abstract virtual RightsManagementUser GetDefaultCredentials();
    public abstract virtual void SetDefaultCredentials(RightsManagementUser user);
    public abstract virtual IDictionary`2<RightsManagementUser, RightsManagementLicense> GetAllAccessRights();
    public abstract virtual Stream DecryptPackage();
    public abstract virtual EncryptedPackageEnvelope EncryptPackage(Stream ciphered);
    public abstract virtual void GenerateUnsignedPublishLicense(IList`1<RightsManagementLicense> licenses);
    public abstract virtual void GenerateUnsignedPublishLicense(string template);
    public abstract virtual void SignPublishLicense();
    public abstract virtual void SaveCurrentLicenses();
    public abstract virtual void RevertToSavedLicenses();
    public abstract virtual void SetEncryptedPackage(EncryptedPackageEnvelope newPackage, Boolean& publishLicenseChanged);
}
internal class MS.Internal.Documents.PeoplePickerWrapper : object {
    private static string _adEmailAddressKey;
    internal String[] Show(IntPtr hWndParent);
    private IDataObject OpenQueryWindow(IntPtr hWndParent);
    private String[] GetEmailAddressesFromPaths(String[] paths);
    private void ValidateHWnd(IntPtr hWndParent);
}
internal class MS.Internal.Documents.ProgressDialog : DialogBaseForm {
    private static int _timerInterval;
    private IContainer components;
    private Label _label;
    private Timer _timer;
    private ProgressDialog(string title, string message);
    public static ProgressDialogReference CreateThreaded(string title, string message);
    public static void CloseThreaded(ProgressDialog dialog);
    private static void ProgressDialogThreadProc(object state);
    private void OnTimerTick(object sender, EventArgs e);
    private void CloseThreadedImpl();
    protected virtual void Dispose(bool disposing);
    protected virtual void InitializeComponent();
}
internal class MS.Internal.Documents.RequestedSignatureDialog : DialogBaseForm {
    private DocumentSignatureManager _documentSignatureManager;
    private IContainer components;
    private FlowLayoutPanel _buttomControlLayoutpanel;
    private Button _addButton;
    private Button _cancelButton;
    private Label _requestSignerNameLabel;
    private Label _signatureAppliedByDateLabel;
    private ComboBox _intentComboBox;
    private Label _intentLabel;
    private TextBox _requestedSignerNameTextBox;
    private DateTimePicker _dateTimePicker;
    private TextBox _requestedLocationTextBox;
    private Label _requestLocationLabel;
    private TableLayoutPanel _mainDialogTableLayoutPanel;
    private TableLayoutPanel _userInputTableLayoutPanel;
    private DialogDivider _divider;
    internal RequestedSignatureDialog(DocumentSignatureManager docSigManager);
    private void _addButton_Click(object sender, EventArgs e);
    private bool ValidateUserData();
    protected virtual void ApplyResources();
    protected virtual void Dispose(bool disposing);
    protected virtual void InitializeComponent();
}
[GeneratedCodeAttribute("Microsoft.Build.Tasks.StronglyTypedResourceBuilder", "15.1.0.0")]
[DebuggerNonUserCodeAttribute]
[CompilerGeneratedAttribute]
internal class MS.Internal.Documents.Resources : object {
    private static ResourceManager resourceMan;
    private static CultureInfo resourceCulture;
    [EditorBrowsableAttribute("2")]
internal static ResourceManager ResourceManager { get; }
    [EditorBrowsableAttribute("2")]
internal static CultureInfo Culture { get; internal set; }
    internal static Icon DocumentApplication { get; }
    internal static Bitmap Invalid_35x35 { get; }
    internal static Bitmap Invalid_48x48 { get; }
    internal static Bitmap NotSigned_35x35 { get; }
    internal static Bitmap NotSigned_48x48 { get; }
    internal static Icon RMPublishingEveryone { get; }
    internal static Icon RMPublishingPeoplePicker { get; }
    internal static Icon RMPublishingRemove { get; }
    internal static Bitmap Undetermined_35x35 { get; }
    internal static Bitmap Undetermined_48x48 { get; }
    internal static Bitmap Unverifiable_35x35 { get; }
    internal static Bitmap Unverifiable_48x48 { get; }
    internal static Bitmap Valid_35x35 { get; }
    internal static Bitmap Valid_48x48 { get; }
    internal static ResourceManager get_ResourceManager();
    internal static CultureInfo get_Culture();
    internal static void set_Culture(CultureInfo value);
    internal static Icon get_DocumentApplication();
    internal static Bitmap get_Invalid_35x35();
    internal static Bitmap get_Invalid_48x48();
    internal static Bitmap get_NotSigned_35x35();
    internal static Bitmap get_NotSigned_48x48();
    internal static Icon get_RMPublishingEveryone();
    internal static Icon get_RMPublishingPeoplePicker();
    internal static Icon get_RMPublishingRemove();
    internal static Bitmap get_Undetermined_35x35();
    internal static Bitmap get_Undetermined_48x48();
    internal static Bitmap get_Unverifiable_35x35();
    internal static Bitmap get_Unverifiable_48x48();
    internal static Bitmap get_Valid_35x35();
    internal static Bitmap get_Valid_48x48();
}
internal class MS.Internal.Documents.RightsManagementLicense : object {
    private SecurityCriticalDataForSet`1<DateTime> _validFrom;
    private SecurityCriticalDataForSet`1<DateTime> _validUntil;
    private SecurityCriticalDataForSet`1<RightsManagementUser> _user;
    private SecurityCriticalDataForSet`1<RightsManagementPermissions> _userRights;
    private string _referralInfoName;
    private Uri _referralInfoUri;
    internal bool IsLicenseValid { get; }
    internal DateTime ValidFrom { get; internal set; }
    internal DateTime ValidUntil { get; internal set; }
    internal RightsManagementUser LicensedUser { get; internal set; }
    internal RightsManagementPermissions LicensePermissions { get; internal set; }
    internal string ReferralInfoName { get; internal set; }
    internal Uri ReferralInfoUri { get; internal set; }
    internal void AddPermission(RightsManagementPermissions permission);
    internal bool HasPermission(RightsManagementPermissions permission);
    internal RightsManagementPolicy ConvertToPolicy();
    internal bool get_IsLicenseValid();
    internal DateTime get_ValidFrom();
    internal void set_ValidFrom(DateTime value);
    internal DateTime get_ValidUntil();
    internal void set_ValidUntil(DateTime value);
    internal RightsManagementUser get_LicensedUser();
    internal void set_LicensedUser(RightsManagementUser value);
    internal RightsManagementPermissions get_LicensePermissions();
    internal void set_LicensePermissions(RightsManagementPermissions value);
    internal string get_ReferralInfoName();
    internal void set_ReferralInfoName(string value);
    internal Uri get_ReferralInfoUri();
    internal void set_ReferralInfoUri(Uri value);
}
[FlagsAttribute]
internal enum MS.Internal.Documents.RightsManagementPermissions : Enum {
    public int value__;
    public static RightsManagementPermissions AllowNothing;
    public static RightsManagementPermissions AllowView;
    public static RightsManagementPermissions AllowPrint;
    public static RightsManagementPermissions AllowCopy;
    public static RightsManagementPermissions AllowSign;
    public static RightsManagementPermissions AllowAnnotate;
    public static RightsManagementPermissions AllowEdit;
    public static RightsManagementPermissions AllowChangePermissions;
    public static RightsManagementPermissions AllowOwner;
}
[FlagsAttribute]
internal enum MS.Internal.Documents.RightsManagementPolicy : Enum {
    public int value__;
    public static RightsManagementPolicy AllowNothing;
    public static RightsManagementPolicy AllowView;
    public static RightsManagementPolicy AllowPrint;
    public static RightsManagementPolicy AllowCopy;
    public static RightsManagementPolicy AllowSign;
    public static RightsManagementPolicy AllowAnnotate;
}
internal class MS.Internal.Documents.RightsManagementProvider : object {
    private EncryptedPackageEnvelope _encryptedPackageEnvelope;
    private SecurityCriticalDataForSet`1<SecureEnvironment> _secureEnvironment;
    private SecurityCriticalDataForSet`1<UseLicense> _useLicense;
    private SecurityCriticalDataForSet`1<UseLicense> _lastSavedUseLicense;
    private SecurityCriticalDataForSet`1<UnsignedPublishLicense> _unsignedPublishLicense;
    private SecurityCriticalDataForSet`1<UnsignedPublishLicense> _temporaryUnsignedPublishLicense;
    private PublishLicense _publishLicenseFromEnvelope;
    private PublishLicense _currentPublishLicense;
    private PublishLicense _lastSavedPublishLicense;
    private SecurityCriticalDataForSet`1<RightsManagementLicense> _rmUseLicense;
    private SecurityCriticalDataForSet`1<RightsManagementLicense> _lastSavedRMUseLicense;
    private SecurityCriticalDataForSet`1<RightsManagementUser> _user;
    private SecurityCriticalDataForSet`1<IDictionary`2<RightsManagementUser, RightsManagementLicense>> _rightsDictionary;
    private SecurityCriticalDataForSet`1<IDictionary`2<RightsManagementUser, RightsManagementLicense>> _lastSavedRightsDictionary;
    private SecurityCriticalDataForSet`1<IDictionary`2<RightsManagementUser, RightsManagementLicense>> _temporaryRightsDictionary;
    private IList`1<CryptoProvider> _cryptoProviders;
    private static string _applicationManifestFileName;
    private static string _registryLocationForDefaultUser;
    private static string _registryBaseForXpsViewer;
    private static string _registryValueNameForAccountName;
    private static string _registryValueNameForAccountType;
    private KeyValuePair`2<string, string> _noLicCacheKeyValuePair;
    private bool MS.Internal.Documents.IRightsManagementProvider.IsProtected { get; }
    private RightsManagementLicense MS.Internal.Documents.IRightsManagementProvider.CurrentUseLicense { get; }
    private PublishLicense MS.Internal.Documents.IRightsManagementProvider.CurrentPublishLicense { get; private set; }
    private RightsManagementUser MS.Internal.Documents.IRightsManagementProvider.CurrentUser { get; }
    private bool IsProtected { get; }
    private PublishLicense CurrentPublishLicense { get; private set; }
    private bool AllowLicenseCaching { get; }
    [FriendAccessAllowedAttribute]
public RightsManagementProvider(EncryptedPackageEnvelope encryptedPackage);
    private sealed virtual override bool MS.Internal.Documents.IRightsManagementProvider.get_IsProtected();
    private sealed virtual override RightsManagementLicense MS.Internal.Documents.IRightsManagementProvider.get_CurrentUseLicense();
    private sealed virtual override PublishLicense MS.Internal.Documents.IRightsManagementProvider.get_CurrentPublishLicense();
    private sealed virtual override void MS.Internal.Documents.IRightsManagementProvider.set_CurrentPublishLicense(PublishLicense value);
    private sealed virtual override RightsManagementUser MS.Internal.Documents.IRightsManagementProvider.get_CurrentUser();
    private sealed virtual override void MS.Internal.Documents.IRightsManagementProvider.InitializeEnvironment(EnrollmentAccountType accountType);
    private sealed virtual override void MS.Internal.Documents.IRightsManagementProvider.InitializeEnvironment(RightsManagementUser user);
    private sealed virtual override bool MS.Internal.Documents.IRightsManagementProvider.LoadUseLicense();
    private sealed virtual override bool MS.Internal.Documents.IRightsManagementProvider.AcquireUseLicense();
    private sealed virtual override void MS.Internal.Documents.IRightsManagementProvider.SaveUseLicense(EncryptedPackageEnvelope package);
    private sealed virtual override void MS.Internal.Documents.IRightsManagementProvider.BindUseLicense();
    private sealed virtual override ReadOnlyCollection`1<RightsManagementUser> MS.Internal.Documents.IRightsManagementProvider.GetAvailableCredentials();
    private sealed virtual override RightsManagementUser MS.Internal.Documents.IRightsManagementProvider.GetDefaultCredentials();
    private sealed virtual override void MS.Internal.Documents.IRightsManagementProvider.SetDefaultCredentials(RightsManagementUser user);
    private sealed virtual override void MS.Internal.Documents.IRightsManagementProvider.RemoveCredentials(RightsManagementUser user);
    private sealed virtual override IDictionary`2<RightsManagementUser, RightsManagementLicense> MS.Internal.Documents.IRightsManagementProvider.GetAllAccessRights();
    private sealed virtual override Stream MS.Internal.Documents.IRightsManagementProvider.DecryptPackage();
    private sealed virtual override EncryptedPackageEnvelope MS.Internal.Documents.IRightsManagementProvider.EncryptPackage(Stream ciphered);
    private sealed virtual override void MS.Internal.Documents.IRightsManagementProvider.GenerateUnsignedPublishLicense(IList`1<RightsManagementLicense> licenses);
    private sealed virtual override void MS.Internal.Documents.IRightsManagementProvider.GenerateUnsignedPublishLicense(string template);
    private sealed virtual override void MS.Internal.Documents.IRightsManagementProvider.SignPublishLicense();
    private sealed virtual override void MS.Internal.Documents.IRightsManagementProvider.SaveCurrentLicenses();
    private sealed virtual override void MS.Internal.Documents.IRightsManagementProvider.RevertToSavedLicenses();
    private sealed virtual override void MS.Internal.Documents.IRightsManagementProvider.SetEncryptedPackage(EncryptedPackageEnvelope newPackage, Boolean& publishLicenseChanged);
    public sealed virtual void Dispose();
    protected virtual override void Finalize();
    private CryptoProvider GenerateCryptoProvider();
    private static bool HasPermission(RightsManagementLicense license, RightsManagementPermissions permission);
    private void AddReferralInfo(RightsManagementLicense rmLicense);
    private RightsManagementLicense ConvertGrantList(RightsManagementUser user, IList`1<ContentGrant> grantList);
    private IList`1<ContentGrant> GetGrantsFromLicense(RightsManagementLicense rmLicense);
    private void InitializeMembers();
    private void CleanUpSecureEnvironment();
    private void SetUserFromSecureEnvironment();
    private ContentGrant CreateGrant(RightsManagementUser user, ContentRight right, DateTime validFrom, DateTime validUntil);
    private ICollection`1<ContentGrant> GetGrantsFromUnsignedLicense(UnsignedPublishLicense unsignedLicense);
    private string GetApplicationManifest();
    private bool get_IsProtected();
    private PublishLicense get_CurrentPublishLicense();
    private void set_CurrentPublishLicense(PublishLicense value);
    private bool get_AllowLicenseCaching();
}
internal class MS.Internal.Documents.RightsManagementResourceHelper : object {
    private static DrawingBrush[] _brushResources;
    private static FrameworkElement _frameworkElement;
    internal static DocumentStatusResources GetDocumentLevelResources(RightsManagementStatus status);
    internal static string GetCredentialManagementResources(RightsManagementUser user);
    private static DrawingBrush GetDrawingBrushFromStatus(RightsManagementStatus status);
}
internal enum MS.Internal.Documents.RightsManagementStatus : Enum {
    public int value__;
    public static RightsManagementStatus Unknown;
    public static RightsManagementStatus Unprotected;
    public static RightsManagementStatus Protected;
}
internal class MS.Internal.Documents.RightsManagementUser : ContentUser {
    private static SecurityCriticalDataForSet`1<RightsManagementUser> _anyoneUserInstance;
    private int _hashCode;
    internal AuthenticationType AuthenticationType { get; }
    internal string Name { get; }
    internal static ContentUser AnyoneUser { get; }
    internal static RightsManagementUser AnyoneRightsManagementUser { get; }
    private RightsManagementUser(string name, AuthenticationType authenticationType);
    public virtual int GetHashCode();
    public virtual bool Equals(object obj);
    internal static RightsManagementUser CreateUser(string name, AuthenticationType authenticationType);
    internal static RightsManagementUser CreateUser(ContentUser user);
    internal AuthenticationType get_AuthenticationType();
    internal string get_Name();
    internal static ContentUser get_AnyoneUser();
    internal static RightsManagementUser get_AnyoneRightsManagementUser();
}
internal class MS.Internal.Documents.RMEnrollmentPage1 : DialogBaseForm {
    private IContainer components;
    private Panel _panel1;
    private FlowLayoutPanel _flowLayoutPanel1;
    private Button _nextButton;
    private Button _cancelButton;
    private FlowLayoutPanel _flowLayoutPanel2;
    private Label _label1;
    private FlowLayoutPanel _flowLayoutPanel3;
    private FlowLayoutPanel _flowLayoutPanel4;
    private Label _label2;
    private Label _label3;
    private Panel _panel2;
    private PictureBox _pictureBox;
    private Label _privacyLabel;
    private Label _instructionlabel;
    protected virtual void ApplyResources();
    protected virtual void Dispose(bool disposing);
    protected virtual void InitializeComponent();
}
internal class MS.Internal.Documents.RMEnrollmentPage2 : DialogBaseForm {
    private IContainer components;
    private FlowLayoutPanel _flowLayoutPanel1;
    private Button _nextButton;
    private Button _cancelButton;
    private FlowLayoutPanel _flowLayoutPanel2;
    private Label _label1;
    private FlowLayoutPanel _flowLayoutPanel3;
    private PictureBox _pictureBox1;
    private Label _label2;
    private TableLayoutPanel _tableLayoutPanel1;
    private RadioButton _networkRadioButton;
    private RadioButton _passportRadioButton;
    private PictureBox _pictureBox2;
    private PictureBox _pictureBox4;
    public EnrollmentAccountType AccountTypeSelected { get; }
    public EnrollmentAccountType get_AccountTypeSelected();
    protected virtual void ApplyResources();
    protected virtual void Dispose(bool disposing);
    protected virtual void InitializeComponent();
}
internal class MS.Internal.Documents.RMEnrollmentPage3 : DialogBaseForm {
    private IContainer components;
    private TableLayoutPanel tableLayoutPanel1;
    private FlowLayoutPanel flowLayoutPanel2;
    private Label label2;
    private TableLayoutPanel tableLayoutPanel2;
    private Label label3;
    private ProgressBar progressBar1;
    protected virtual void ApplyResources();
    protected virtual void Dispose(bool disposing);
    protected virtual void InitializeComponent();
}
internal class MS.Internal.Documents.RMPermissionsDialog : DialogBaseForm {
    private Uri _referralUri;
    private IContainer components;
    private FlowLayoutPanel mainContentFlowPanel;
    private FlowLayoutPanel authenticatedAsFlowPanel;
    private Label authenticatedAsTextLabel;
    private Label authenticatedAsLabel;
    private FlowLayoutPanel permissionsFlowPanel;
    private Label permissionsHeldLabel;
    private FlowLayoutPanel contactFlowPanel;
    private Label requestFromTextLabel;
    private LinkLabel requestFromLabel;
    private FlowLayoutPanel expirationFlowPanel;
    private Label expiresOnTextLabel;
    private Label expiresOnLabel;
    private DialogDivider divider;
    private FlowLayoutPanel actionsFlowPanel;
    private Button closeButton;
    internal RMPermissionsDialog(RightsManagementLicense userLicense);
    private void InitializeReferralInformation(RightsManagementLicense userLicense);
    private static String[] GetRightsFromPermissions(RightsManagementLicense license);
    private static string GetUtcDateAsString(Nullable`1<DateTime> date);
    private void requestFromLabel_LinkClicked(object sender, LinkLabelLinkClickedEventArgs e);
    private void AddPermissions(String[] uiStrings);
    protected virtual void ApplyResources();
    protected virtual void Dispose(bool disposing);
    protected virtual void InitializeComponent();
}
internal class MS.Internal.Documents.RMPublishingDialog : DialogBaseForm {
    private IList`1<RightsManagementLicense> _rmLicenses;
    private Uri _referralUri;
    private bool _isSaveAs;
    private bool _isAlreadyProtected;
    private Uri _templatePath;
    private ReadOnlyCollection`1<ServerSideTemplate> _templates;
    private static string _registryBaseForRMTemplates;
    private static string _registryLocationForRMTemplates;
    private static string _registryValueNameForRMTemplatePath;
    private bool _canSave;
    private IContainer components;
    private FlowLayoutPanel flowLayoutPanelMain;
    private RadioButton radioButtonUnrestricted;
    private RadioButton radioButtonPermissions;
    private RadioButton radioButtonTemplate;
    private GroupBox groupBoxMainContent;
    private FlowLayoutPanel flowLayoutPanelUnrestricted;
    private FlowLayoutPanel flowLayoutPanelPermissions;
    private FlowLayoutPanel flowLayoutPanelTemplate;
    private TextBox textBoxUnrestrictedText;
    private Label labelSelectTemplate;
    private ComboBox comboBoxTemplates;
    private FlowLayoutPanel flowLayoutPanelPeople;
    private Button buttonPeoplePicker;
    private TextBox textBoxUserName;
    private Button buttonEveryone;
    private Button buttonAddUser;
    private Button buttonRemoveUser;
    private RightsTable rightsTable;
    private FlowLayoutPanel flowLayoutPanelExpires;
    private CheckBox checkBoxValidUntil;
    private DateTimePicker datePickerValidUntil;
    private FlowLayoutPanel flowLayoutPanelContact;
    private CheckBox checkBoxPermissionsContact;
    private TextBox textBoxPermissionsContact;
    private FlowLayoutPanel flowLayoutPanelActions;
    private Button buttonSave;
    private Button buttonSaveAs;
    private Button buttonCancel;
    internal IList`1<RightsManagementLicense> Licenses { get; }
    internal Nullable`1<DateTime> ValidUntil { get; }
    internal Uri ReferralUri { get; }
    internal bool IsSaveAs { get; }
    internal Uri Template { get; }
    internal RMPublishingDialog(RightsManagementUser user, IDictionary`2<RightsManagementUser, RightsManagementLicense> grantDictionary);
    internal IList`1<RightsManagementLicense> get_Licenses();
    internal Nullable`1<DateTime> get_ValidUntil();
    internal Uri get_ReferralUri();
    internal bool get_IsSaveAs();
    internal Uri get_Template();
    private IList`1<RightsManagementLicense> CreateRightsManagementLicenses();
    private void InitializeTemplates();
    private void PopulateTemplateUI();
    private Uri GetTemplatePath();
    private List`1<ServerSideTemplate> GetXmlTemplates();
    private static RightsManagementUser GetUserFromUserName(string userName);
    private bool ValidateReferralAddress();
    private void SetupIconButton(Button button, Icon icon, string text, string tooltip);
    private void ToggleSave(bool isSaveAllowed);
    private void rightsTable_SelectionChanged(object sender, EventArgs e);
    private void radioButton_CheckedChanged(object sender, EventArgs e);
    private void UpdateRadioButtonState();
    private void checkBoxValidUntil_CheckedChanged(object sender, EventArgs e);
    private void checkBoxPermissionsContact_CheckedChanged(object sender, EventArgs e);
    private void buttonAddUser_Click(object sender, EventArgs e);
    private void buttonPeoplePicker_Click(object sender, EventArgs e);
    private void buttonEveryone_Click(object sender, EventArgs e);
    private void buttonRemoveUser_Click(object sender, EventArgs e);
    private void buttonSave_Click(object sender, EventArgs e);
    private void buttonSaveAs_Click(object sender, EventArgs e);
    private void textBoxUserName_GotFocus(object sender, EventArgs e);
    private void textBoxUserName_LostFocus(object sender, EventArgs e);
    private void comboBox1_SelectedValueChanged(object sender, EventArgs e);
    private static void OnIconButtonEnter(object sender, EventArgs e);
    private static void OnIconButtonLeave(object sender, EventArgs e);
    private void UpdateAnyoneEnabled();
    protected virtual void ApplyResources();
    protected virtual void Dispose(bool disposing);
    protected virtual void InitializeComponent();
}
[FlagsAttribute]
internal enum MS.Internal.Documents.SignaturePolicy : Enum {
    public int value__;
    public static SignaturePolicy AllowNothing;
    public static SignaturePolicy ModifyDocumentProperties;
    public static SignaturePolicy AllowSigning;
}
internal static class MS.Internal.Documents.SignatureResourceHelper : object {
    private static DrawingBrush[] _brushResources;
    private static FrameworkElement _frameworkElement;
    internal static DocumentStatusResources GetDocumentLevelResources(SignatureStatus status);
    internal static Image GetImageFromStatus(int height, int width, SignatureStatus sigStatus, CertificatePriorityStatus certStatus);
    internal static SignatureResources GetResources(DigitalSignature signature, CertificatePriorityStatus certStatus);
    private static DrawingBrush GetDrawingBrushFromStatus(SignatureStatus sigStatus);
    private static string GetSummaryMessage(DigitalSignature signature, CertificatePriorityStatus certStatus);
    private static string GetCertificateSummaryMessage(CertificatePriorityStatus certStatus);
    private static string GetSignatureSummaryMessage(SignatureStatus sigStatus, CertificatePriorityStatus certStatus);
    private static string GetFormattedDate(Nullable`1<DateTime> date);
}
internal class MS.Internal.Documents.SignatureResources : ValueType {
    public Image _displayImage;
    public string _subjectName;
    public string _summaryMessage;
    public string _reason;
    public string _location;
    public string _signBy;
    public virtual string ToString();
}
internal enum MS.Internal.Documents.SignatureStatus : Enum {
    public int value__;
    public static SignatureStatus Unknown;
    public static SignatureStatus Undetermined;
    public static SignatureStatus Invalid;
    public static SignatureStatus Unverifiable;
    public static SignatureStatus Valid;
    public static SignatureStatus NotSigned;
}
internal class MS.Internal.Documents.SignatureSummaryDialog : DialogBaseForm {
    private DocumentSignatureManager _documentSignatureManager;
    private bool _showRequestDialog;
    private Padding _cellPadding;
    private IContainer components;
    private ListBox _listBoxSummary;
    private Button _buttonDone;
    private Button _buttonSign;
    private Button _buttonViewCert;
    private Button _buttonRequestAdd;
    private Button _buttonRequestDelete;
    private FlowLayoutPanel _flowpanelMiddleControls;
    private FlowLayoutPanel _flowpanelBottomControls;
    private Panel _listboxMainPanel;
    private FlowLayoutPanel _columnHeaderPanel;
    private Panel _listboxItemPanel;
    private TableLayoutPanel _mainLayoutTable;
    private DialogDivider _divider;
    private int IconWidth { get; }
    private int IconHeight { get; }
    private int RemainingTextWidth { get; }
    private int SummaryNameTextWidth { get; }
    private int IntentTextWidth { get; }
    private int LocaleTextWidth { get; }
    private int SignByTextWidth { get; }
    private Padding CellPadding { get; }
    internal SignatureSummaryDialog(IList`1<SignatureResources> signatureResourcesList, DocumentSignatureManager docSigManager, bool showRequestDialog);
    private int get_IconWidth();
    private int get_IconHeight();
    private int get_RemainingTextWidth();
    private int get_SummaryNameTextWidth();
    private int get_IntentTextWidth();
    private int get_LocaleTextWidth();
    private int get_SignByTextWidth();
    private Padding get_CellPadding();
    private void InitializeDialogType();
    private void InitializeColumnHeaders();
    private void AddDigSig(SignatureResources signatureResources);
    private void _buttonDone_Click(object sender, EventArgs e);
    private void _buttonSign_Click(object sender, EventArgs e);
    private void _buttonViewCert_Click(object sender, EventArgs e);
    private void _buttonRequestAdd_Click(object sender, EventArgs e);
    private void _buttonRequestDelete_Click(object sender, EventArgs e);
    private void OnSignatureStatusChange(object sender, SignatureStatusEventArgs args);
    private void RefreshSignatureList(bool requestOnly);
    private void _listBoxSummary_SelectedIndexChanged(object sender, EventArgs e);
    private void _listBoxSummary_Resize(object sender, EventArgs e);
    private void _listBoxSummary_MeasureItem(object sender, MeasureItemEventArgs e);
    private int CalculateItemHeight(Graphics graphics, SignatureResources item);
    private void _listBoxSummary_DrawItem(object sender, DrawItemEventArgs e);
    private void DrawListBoxSummaryItem(Graphics graphics, Rectangle bounds, SignatureResources item, bool isSelected);
    protected virtual void ApplyResources();
    protected virtual void Dispose(bool disposing);
    protected virtual void InitializeComponent();
}
internal class MS.Internal.Documents.SigningDialog : DialogBaseForm {
    private DocumentSignatureManager _docSigManager;
    private X509Certificate2 _x509Certificate2;
    private DigitalSignature _digitalSignatureRequest;
    private bool _isSecondSignatureNotRequested;
    private IContainer components;
    private FlowLayoutPanel _userInputFlowPanel;
    private Label _reasonLabel;
    private Label _signerlabel;
    private Label _actionlabel;
    private TextBox _locationTextBox;
    private Label _locationLabel;
    private ComboBox _reasonComboBox;
    private CheckBox _addDigSigCheckBox;
    private CheckBox _addDocPropCheckBox;
    private FlowLayoutPanel _buttonflowLayoutPanel;
    private Button _cancelButton;
    private Button _signButton;
    private Button _signSaveAsButton;
    private TableLayoutPanel _mainLayoutTable;
    private TableLayoutPanel _signatureControlInputLayoutTable;
    private DialogDivider _divider;
    internal string Intent { get; }
    internal string LocationText { get; }
    internal bool IsDocPropsRestricted { get; }
    internal bool IsDigSigRestricted { get; }
    internal X509Certificate2 Certificate { get; }
    internal SigningDialog(X509Certificate2 x509Certificate2, DigitalSignature digitalSignatureRequest, DocumentSignatureManager docSigManager);
    private void SignAndSave(bool isSaveAs);
    private void _signSaveButton_Click(object sender, EventArgs e);
    private void _signSaveAsButton_Click(object sender, EventArgs e);
    private void _cancelButton_Click(object sender, EventArgs e);
    private void ApplySignatureSpecificResources();
    protected virtual void ApplyResources();
    protected virtual void ApplyStyle();
    internal string get_Intent();
    internal string get_LocationText();
    internal bool get_IsDocPropsRestricted();
    internal bool get_IsDigSigRestricted();
    internal X509Certificate2 get_Certificate();
    protected virtual void Dispose(bool disposing);
    protected virtual void InitializeComponent();
}
[AttributeUsageAttribute("5628")]
internal class MS.Internal.PresentationUI.FriendAccessAllowedAttribute : Attribute {
}
public static class System.Windows.Documents.PresentationUIStyleResources : object {
    private static PresentationUIStyleResources();
}
internal static class System.Windows.TrustUI.SR : object {
    private static ResourceManager ResourceManager { get; }
    private static ResourceManager get_ResourceManager();
    private static bool UsingResourceKeys();
    internal static string GetResourceString(string resourceKey, string defaultString);
    internal static string Format(string resourceFormat, Object[] args);
    internal static string Format(string resourceFormat, object p1);
    internal static string Format(string resourceFormat, object p1, object p2);
    internal static string Format(string resourceFormat, object p1, object p2, object p3);
    public static string Get(string name);
    public static string Get(string name, Object[] args);
}
internal static class System.Windows.TrustUI.SRID : object {
    private static ResourceManager s_resourceManager;
    [CompilerGeneratedAttribute]
private static CultureInfo <Culture>k__BackingField;
    internal static string CertSelectionDialogMessage;
    internal static string CertSelectionDialogTitle;
    internal static string DigitalSignatureMessageActionInvalidatesSignature;
    internal static string DigitalSignatureMessageAddRequestsBeforeSigning;
    internal static string DigitalSignatureMessageAddRequestsBeforeSigningTitle;
    internal static string DigitalSignatureMessageDocumentNotSignable;
    internal static string DigitalSignatureMessageDocumentNotSignableTitle;
    internal static string DigitalSignatureMessageSignNoPending;
    internal static string DigitalSignatureMessageSignNow;
    internal static string DigitalSignatureMessageSignNowTitle;
    internal static string DigitalSignatureMessageSignPending;
    internal static string DigitalSignatureNoFixedDocumentSequence;
    internal static string DigitalSignatureWarnErrorGeneric;
    internal static string DigitalSignatureWarnErrorReadOnlyInputError;
    internal static string DigitalSignatureWarnErrorReadOnlyNoMoreRequest;
    internal static string DigitalSignatureWarnErrorRMSigningMessage;
    internal static string DigitalSignatureWarnErrorRMSigningMessageNoCerts;
    internal static string DigitalSignatureWarnErrorSigningErrorTitle;
    internal static string DigSigIntentString1;
    internal static string DigSigIntentString2;
    internal static string DigSigIntentString3;
    internal static string DigSigIntentString4;
    internal static string DigSigIntentString5;
    internal static string DigSigIntentString6;
    internal static string DigSigRequestTitle;
    internal static string DigSigSumColumnHeaderIntent;
    internal static string DigSigSumColumnHeaderLocale;
    internal static string DigSigSumColumnHeaderName;
    internal static string DigSigSumColumnHeaderSignatureStatus;
    internal static string DigSigSumColumnHeaderSignBy;
    internal static string DigSigSumDone;
    internal static string DigSigSumRequestAdd;
    internal static string DigSigSumRequestDelete;
    internal static string DigSigSumSign;
    internal static string DigSigSumTitle;
    internal static string DigSigSumViewCert;
    internal static string DocumentApplicationDocumentViewerFocusToolBarCommand;
    internal static string DocumentApplicationDocumentViewerRequestSignersCommand;
    internal static string DocumentApplicationDocumentViewerShowRMCredentialManagerCommand;
    internal static string DocumentApplicationDocumentViewerShowRMPermissionsCommand;
    internal static string DocumentApplicationDocumentViewerShowRMPublishingUICommand;
    internal static string DocumentApplicationDocumentViewerShowSignatureSummaryCommand;
    internal static string DocumentApplicationDocumentViewerSignCommand;
    internal static string DocumentPropertiesDialogAuthorLabel;
    internal static string DocumentPropertiesDialogCategoryLabel;
    internal static string DocumentPropertiesDialogContentLabel;
    internal static string DocumentPropertiesDialogDateFormat;
    internal static string DocumentPropertiesDialogDescriptionLabel;
    internal static string DocumentPropertiesDialogDocumentCreatedLabel;
    internal static string DocumentPropertiesDialogDocumentDetailBoxLabel;
    internal static string DocumentPropertiesDialogDocumentModifiedLabel;
    internal static string DocumentPropertiesDialogDocumentPrintedLabel;
    internal static string DocumentPropertiesDialogDocumentPropertiesMustExist;
    internal static string DocumentPropertiesDialogFileAccessedLabel;
    internal static string DocumentPropertiesDialogFileCreatedLabel;
    internal static string DocumentPropertiesDialogFileModifiedLabel;
    internal static string DocumentPropertiesDialogFileSizeBytesUnit;
    internal static string DocumentPropertiesDialogFileSizeFormat;
    internal static string DocumentPropertiesDialogFileSizeKBUnit;
    internal static string DocumentPropertiesDialogFileSizeMBUnit;
    internal static string DocumentPropertiesDialogFileSystemBoxLabel;
    internal static string DocumentPropertiesDialogIdentifierLabel;
    internal static string DocumentPropertiesDialogInfoLabel;
    internal static string DocumentPropertiesDialogKeywordsLabel;
    internal static string DocumentPropertiesDialogLanguageLabel;
    internal static string DocumentPropertiesDialogLastSavedByLabel;
    internal static string DocumentPropertiesDialogNotAvailable;
    internal static string DocumentPropertiesDialogOkButtonLabel;
    internal static string DocumentPropertiesDialogRevisionLabel;
    internal static string DocumentPropertiesDialogSizeLabel;
    internal static string DocumentPropertiesDialogStatusLabel;
    internal static string DocumentPropertiesDialogSubjectLabel;
    internal static string DocumentPropertiesDialogSummaryLabel;
    internal static string DocumentPropertiesDialogTitle;
    internal static string DocumentPropertiesDialogTitleLabel;
    internal static string DocumentPropertiesDialogVersionLabel;
    internal static string DocumentSignatureManagerAppliedToolTip;
    internal static string DocumentSignatureManagerDefaultToolTip;
    internal static string DocumentSignatureManagerInvalid;
    internal static string DocumentSignatureManagerUndetermined;
    internal static string DocumentSignatureManagerValid;
    internal static string DocumentStreamCanNoLongerOpen;
    internal static string DocumentStreamMustBeFileSource;
    internal static string DocumentStreamMustBeTemporary;
    internal static string DocumentStreamMustBeXpsFile;
    internal static string FileManagementDestinationIsReadOnly;
    internal static string FileManagementNoAccessToDestination;
    internal static string FileManagementNoAccessToSource;
    internal static string FileManagementNoTemporaryFileAccess;
    internal static string FileManagementSaveExt;
    internal static string FileManagementSaveFilter;
    internal static string FileManagementStreamProxyIsReadOnly;
    internal static string FileManagementTitleError;
    internal static string PackageControllerStreamCorruption;
    internal static string PackagePartTypeNotWritable;
    internal static string PackagingCircularReference;
    internal static string PackagingWriteableDelegateGaveNullPart;
    internal static string PackagingWriteableDelegateGaveNullStream;
    internal static string PackagingWriteNotSupported;
    internal static string PageTextBoxToolTip;
    internal static string PeoplePickerErrorConditionFromOpenQueryWindow;
    internal static string PeoplePickerInvalidParentWindow;
    internal static string ProgressBarKiloBytesStringFormat;
    internal static string ProgressBarPercentageStringFormat;
    internal static string RequestSignatureDialogAdd;
    internal static string RequestSignatureDialogCancel;
    internal static string RequestSignatureDialogIntentLabel;
    internal static string RequestSignatureDialogLocationLabel;
    internal static string RequestSignatureDialogRequestSignerNameLabel;
    internal static string RequestSignatureDialogSignatureAppliedByDateLabel;
    internal static string RequestSignatureDialogTitle;
    internal static string RightsManagementExceptionNoRightsForOperation;
    internal static string RightsManagementWarnErrorClockModified;
    internal static string RightsManagementWarnErrorConfigurationError;
    internal static string RightsManagementWarnErrorDebuggerDetected;
    internal static string RightsManagementWarnErrorExpiredPermission;
    internal static string RightsManagementWarnErrorFailedToLoadTemplate;
    internal static string RightsManagementWarnErrorFailedToRemoveUser;
    internal static string RightsManagementWarnErrorGenericFailure;
    internal static string RightsManagementWarnErrorInvalidContent;
    internal static string RightsManagementWarnErrorInvalidTemplate;
    internal static string RightsManagementWarnErrorNoAddress;
    internal static string RightsManagementWarnErrorNoPermission;
    internal static string RightsManagementWarnErrorNoReferralAddress;
    internal static string RightsManagementWarnErrorRMNotInstalled;
    internal static string RightsManagementWarnErrorServerError;
    internal static string RightsManagementWarnErrorTemporaryActivationNotSupported;
    internal static string RightsManagementWarnErrorTitle;
    internal static string RMAppliedToolTip;
    internal static string RMCredManagementAdd;
    internal static string RMCredManagementCancel;
    internal static string RMCredManagementDialog;
    internal static string RMCredManagementInstruction;
    internal static string RMCredManagementOk;
    internal static string RMCredManagementPassportAccount;
    internal static string RMCredManagementRemove;
    internal static string RMCredManagementUnknownAccount;
    internal static string RMCredManagementWindowsAccount;
    internal static string RMDefaultToolTip;
    internal static string RMEnrollmentCancel;
    internal static string RMEnrollmentNext;
    internal static string RMEnrollmentPage1a;
    internal static string RMEnrollmentPage1b;
    internal static string RMEnrollmentPage1c;
    internal static string RMEnrollmentPage1d;
    internal static string RMEnrollmentPage1e;
    internal static string RMEnrollmentPage2a;
    internal static string RMEnrollmentPage2b;
    internal static string RMEnrollmentPage2c;
    internal static string RMEnrollmentPage2e;
    internal static string RMEnrollmentPage3b;
    internal static string RMEnrollmentPage3c;
    internal static string RMEnrollmentTitle;
    internal static string RMPermissionsAnnotatePermission;
    internal static string RMPermissionsAuthenticatedAs;
    internal static string RMPermissionsCloseButton;
    internal static string RMPermissionsCopyPermission;
    internal static string RMPermissionsExpiresOn;
    internal static string RMPermissionsHavePermissions;
    internal static string RMPermissionsNoExpiration;
    internal static string RMPermissionsOwnerPermission;
    internal static string RMPermissionsPrintPermission;
    internal static string RMPermissionsRequestFrom;
    internal static string RMPermissionsSignPermission;
    internal static string RMPermissionsTitle;
    internal static string RMPermissionsUnknownOwner;
    internal static string RMPermissionsViewPermission;
    internal static string RMProtected;
    internal static string RMProviderExceptionNoPackageToDecrypt;
    internal static string RMProviderExceptionNoPublishLicense;
    internal static string RMProviderExceptionNoRightsToDocument;
    internal static string RMProviderExceptionNotOwnerOfDocument;
    internal static string RMProviderExceptionNoUseLicense;
    internal static string RMPublishingAddUserButton;
    internal static string RMPublishingAddUserButtonToolTip;
    internal static string RMPublishingAnyoneButton;
    internal static string RMPublishingAnyoneButtonToolTip;
    internal static string RMPublishingAnyoneUserDisplay;
    internal static string RMPublishingCancelButton;
    internal static string RMPublishingCopyHeader;
    internal static string RMPublishingExpiresOn;
    internal static string RMPublishingMainContentGroupLabel;
    internal static string RMPublishingOwnerHeader;
    internal static string RMPublishingPeoplePickerButton;
    internal static string RMPublishingPeoplePickerButtonToolTip;
    internal static string RMPublishingPermissionsRadio;
    internal static string RMPublishingPrintHeader;
    internal static string RMPublishingReadHeader;
    internal static string RMPublishingRemoveButton;
    internal static string RMPublishingRemoveButtonToolTip;
    internal static string RMPublishingRequestPermissionsFrom;
    internal static string RMPublishingSaveAsButton;
    internal static string RMPublishingSaveAsButtonToolTip;
    internal static string RMPublishingSaveButton;
    internal static string RMPublishingSaveButtonToolTip;
    internal static string RMPublishingSelectTemplate;
    internal static string RMPublishingSignHeader;
    internal static string RMPublishingTemplateRadio;
    internal static string RMPublishingTitle;
    internal static string RMPublishingUnrestrictedRadio;
    internal static string RMPublishingUnrestrictedText;
    internal static string RMPublishingUserHeader;
    internal static string RMPublishingUserSeparator;
    internal static string ServerSideTemplateDisplayNone;
    internal static string SignatureResourceHelperCertificateStatusCannotBeVerified;
    internal static string SignatureResourceHelperCertificateStatusCorrupted;
    internal static string SignatureResourceHelperCertificateStatusExpired;
    internal static string SignatureResourceHelperCertificateStatusIssuerNotTrusted;
    internal static string SignatureResourceHelperCertificateStatusNoCertificate;
    internal static string SignatureResourceHelperCertificateStatusOk;
    internal static string SignatureResourceHelperCertificateStatusRevoked;
    internal static string SignatureResourceHelperCertificateStatusVerifying;
    internal static string SignatureResourceHelperMissingCertificate;
    internal static string SignatureResourceHelperNone;
    internal static string SignatureResourceHelperSignatureStatusInvalid;
    internal static string SignatureResourceHelperSignatureStatusUnverifiable;
    internal static string SignatureResourceHelperSignatureStatusValid;
    internal static string SignatureResourceHelperSignatureStatusValidCertInvalid;
    internal static string SignatureResourceHelperSummaryBreakLine;
    internal static string SignatureResourceHelperSummaryFormat;
    internal static string SignatureResourceHelperValidSigSummaryPending;
    internal static string SignatureResourcesFormatForAccessibility;
    internal static string SigningDialogActionlabel;
    internal static string SigningDialogAddDigSigCheckBox;
    internal static string SigningDialogAddDocPropCheckBox;
    internal static string SigningDialogCancelButton;
    internal static string SigningDialogLocationLabel;
    internal static string SigningDialogNA;
    internal static string SigningDialogReasonLabel;
    internal static string SigningDialogSignButton;
    internal static string SigningDialogSignerlabel;
    internal static string SigningDialogSignSaveAsButton;
    internal static string SigningDialogTitle;
    internal static string SigningProgressLabel;
    internal static string SigningProgressTitle;
    internal static string ValidationProgressLabel;
    internal static string ValidationProgressTitle;
    internal static string WPF_UILanguage;
    internal static string XpsViewerGenericException;
    internal static string XpsViewerRightsManagementException;
    internal static string ZoomComboBoxItem100;
    internal static string ZoomComboBoxItem150;
    internal static string ZoomComboBoxItem25;
    internal static string ZoomComboBoxItem250;
    internal static string ZoomComboBoxItem400;
    internal static string ZoomComboBoxItem50;
    internal static string ZoomComboBoxItem75;
    internal static string ZoomComboBoxToolTip;
    internal static string ZoomPercentageConverterStringFormat;
    internal static ResourceManager ResourceManager { get; }
    internal static CultureInfo Culture { get; internal set; }
    internal static ResourceManager get_ResourceManager();
    [CompilerGeneratedAttribute]
internal static CultureInfo get_Culture();
    [CompilerGeneratedAttribute]
internal static void set_Culture(CultureInfo value);
    internal static string GetResourceString(string resourceKey, string defaultValue);
}
