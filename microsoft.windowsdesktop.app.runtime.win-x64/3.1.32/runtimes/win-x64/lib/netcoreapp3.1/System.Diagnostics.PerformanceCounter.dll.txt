internal static class FxResources.System.Diagnostics.PerformanceCounter.SR : object {
}
internal class Internal.Win32.SafeHandles.SafeRegistryHandle : SafeHandleZeroOrMinusOneIsInvalid {
    public SafeRegistryHandle(IntPtr preexistingHandle, bool ownsHandle);
    protected virtual bool ReleaseHandle();
}
internal static class Interop : object {
}
internal class Microsoft.Win32.SafeHandles.SafeLocalAllocHandle : SafeBuffer {
    internal static SafeLocalAllocHandle Zero;
    internal static SafeLocalAllocHandle InvalidHandle { get; }
    internal SafeLocalAllocHandle(IntPtr handle);
    private static SafeLocalAllocHandle();
    internal static SafeLocalAllocHandle LocalAlloc(int cb);
    internal static SafeLocalAllocHandle get_InvalidHandle();
    protected virtual bool ReleaseHandle();
}
internal class Microsoft.Win32.SafeHandles.SafeLocalMemHandle : SafeHandleZeroOrMinusOneIsInvalid {
    internal SafeLocalMemHandle(IntPtr existingHandle, bool ownsHandle);
    protected virtual bool ReleaseHandle();
}
internal class Microsoft.Win32.SafeHandles.SafePerfProviderHandle : SafeHandleZeroOrMinusOneIsInvalid {
    protected virtual bool ReleaseHandle();
}
internal class System.Diagnostics.CategoryEntry : object {
    internal int NameIndex;
    internal int HelpIndex;
    internal Int32[] CounterIndexes;
    internal Int32[] HelpIndexes;
    internal CategoryEntry(PERF_OBJECT_TYPE& perfObject);
}
internal class System.Diagnostics.CategorySample : object {
    internal long _systemFrequency;
    internal long _timeStamp;
    internal long _timeStamp100nSec;
    internal long _counterFrequency;
    internal long _counterTimeStamp;
    internal Hashtable _counterTable;
    internal Hashtable _instanceNameTable;
    internal bool _isMultiInstance;
    private CategoryEntry _entry;
    private PerformanceCounterLib _library;
    private bool _disposed;
    private Byte[] _data;
    internal CategorySample(Byte[] rawData, CategoryEntry entry, PerformanceCounterLib library);
    internal String[] GetInstanceNamesFromIndex(int categoryIndex);
    internal CounterDefinitionSample GetCounterDefinitionSample(string counter);
    internal InstanceDataCollectionCollection ReadCategory();
    public sealed virtual void Dispose();
    private void CheckDisposed();
}
public class System.Diagnostics.CounterCreationData : object {
    private PerformanceCounterType _counterType;
    private string _counterName;
    private string _counterHelp;
    public PerformanceCounterType CounterType { get; public set; }
    public string CounterName { get; public set; }
    public string CounterHelp { get; public set; }
    public CounterCreationData(string counterName, string counterHelp, PerformanceCounterType counterType);
    public PerformanceCounterType get_CounterType();
    public void set_CounterType(PerformanceCounterType value);
    public string get_CounterName();
    public void set_CounterName(string value);
    public string get_CounterHelp();
    public void set_CounterHelp(string value);
}
[DefaultMemberAttribute("Item")]
public class System.Diagnostics.CounterCreationDataCollection : CollectionBase {
    public CounterCreationData Item { get; public set; }
    public CounterCreationDataCollection(CounterCreationDataCollection value);
    public CounterCreationDataCollection(CounterCreationData[] value);
    public CounterCreationData get_Item(int index);
    public void set_Item(int index, CounterCreationData value);
    public int Add(CounterCreationData value);
    public void AddRange(CounterCreationData[] value);
    public void AddRange(CounterCreationDataCollection value);
    public bool Contains(CounterCreationData value);
    public void CopyTo(CounterCreationData[] array, int index);
    public int IndexOf(CounterCreationData value);
    public void Insert(int index, CounterCreationData value);
    public virtual void Remove(CounterCreationData value);
    protected virtual void OnValidate(object value);
}
internal class System.Diagnostics.CounterDefinitionSample : object {
    internal int _nameIndex;
    internal int _counterType;
    internal CounterDefinitionSample _baseCounterDefinitionSample;
    private int _size;
    private int _offset;
    private Int64[] _instanceValues;
    private CategorySample _categorySample;
    internal CounterDefinitionSample(PERF_COUNTER_DEFINITION& perfCounter, CategorySample categorySample, int instanceNumber);
    private long ReadValue(ReadOnlySpan`1<byte> data);
    internal CounterSample GetInstanceValue(string instanceName);
    internal InstanceDataCollection ReadInstanceData(string counterName);
    internal CounterSample GetSingleValue();
    internal void SetInstanceValue(int index, ReadOnlySpan`1<byte> data);
}
[IsReadOnlyAttribute]
public class System.Diagnostics.CounterSample : ValueType {
    private long _rawValue;
    private long _baseValue;
    private long _timeStamp;
    private long _counterFrequency;
    private PerformanceCounterType _counterType;
    private long _timeStamp100nSec;
    private long _systemFrequency;
    private long _counterTimeStamp;
    public static CounterSample Empty;
    public long RawValue { get; }
    internal ulong UnsignedRawValue { get; }
    public long BaseValue { get; }
    public long SystemFrequency { get; }
    public long CounterFrequency { get; }
    public long CounterTimeStamp { get; }
    public long TimeStamp { get; }
    public long TimeStamp100nSec { get; }
    public PerformanceCounterType CounterType { get; }
    public CounterSample(long rawValue, long baseValue, long counterFrequency, long systemFrequency, long timeStamp, long timeStamp100nSec, PerformanceCounterType counterType);
    public CounterSample(long rawValue, long baseValue, long counterFrequency, long systemFrequency, long timeStamp, long timeStamp100nSec, PerformanceCounterType counterType, long counterTimeStamp);
    private static CounterSample();
    public long get_RawValue();
    internal ulong get_UnsignedRawValue();
    public long get_BaseValue();
    public long get_SystemFrequency();
    public long get_CounterFrequency();
    public long get_CounterTimeStamp();
    public long get_TimeStamp();
    public long get_TimeStamp100nSec();
    public PerformanceCounterType get_CounterType();
    public static float Calculate(CounterSample counterSample);
    public static float Calculate(CounterSample counterSample, CounterSample nextCounterSample);
    public virtual bool Equals(object o);
    public bool Equals(CounterSample sample);
    public virtual int GetHashCode();
    public static bool op_Equality(CounterSample a, CounterSample b);
    public static bool op_Inequality(CounterSample a, CounterSample b);
}
public static class System.Diagnostics.CounterSampleCalculator : object {
    private static Boolean modreq(System.Runtime.CompilerServices.IsVolatile) s_perfCounterDllLoaded;
    private static CounterSampleCalculator();
    private static float GetElapsedTime(CounterSample oldSample, CounterSample newSample);
    public static float ComputeCounterValue(CounterSample newSample);
    public static float ComputeCounterValue(CounterSample oldSample, CounterSample newSample);
    private static void FillInValues(CounterSample oldSample, CounterSample newSample, PDH_RAW_COUNTER& oldPdhValue, PDH_RAW_COUNTER& newPdhValue);
    private static void LoadPerfCounterDll();
}
internal static class System.Diagnostics.DiagnosticsConfiguration : object {
    private static SystemDiagnosticsSection modreq(System.Runtime.CompilerServices.IsVolatile) s_configSection;
    private static InitState modreq(System.Runtime.CompilerServices.IsVolatile) s_initState;
    internal static int PerformanceCountersFileMappingSize { get; }
    internal static string ConfigFilePath { get; }
    private static DiagnosticsConfiguration();
    internal static int get_PerformanceCountersFileMappingSize();
    internal static string get_ConfigFilePath();
    private static SystemDiagnosticsSection GetConfigSection();
    internal static bool CanInitialize();
    internal static void Initialize();
}
[GuidAttribute("73386977-D6FD-11D2-BED5-00C04F79E3AE")]
[InterfaceTypeAttribute("1")]
public interface System.Diagnostics.ICollectData {
    public abstract virtual void CollectData(int id, IntPtr valueName, IntPtr data, int totalBytes, IntPtr& res);
    public abstract virtual void CloseData();
}
internal enum System.Diagnostics.InitState : Enum {
    public int value__;
    public static InitState NotInitialized;
    public static InitState Initializing;
    public static InitState Initialized;
}
public class System.Diagnostics.InstanceData : object {
    [CompilerGeneratedAttribute]
private string <InstanceName>k__BackingField;
    [CompilerGeneratedAttribute]
private CounterSample <Sample>k__BackingField;
    public string InstanceName { get; }
    public CounterSample Sample { get; }
    public long RawValue { get; }
    public InstanceData(string instanceName, CounterSample sample);
    [CompilerGeneratedAttribute]
public string get_InstanceName();
    [CompilerGeneratedAttribute]
public CounterSample get_Sample();
    public long get_RawValue();
}
[DefaultMemberAttribute("Item")]
public class System.Diagnostics.InstanceDataCollection : DictionaryBase {
    [CompilerGeneratedAttribute]
private string <CounterName>k__BackingField;
    public string CounterName { get; }
    public ICollection Keys { get; }
    public ICollection Values { get; }
    public InstanceData Item { get; }
    [ObsoleteAttribute("This constructor has been deprecated.  Please use System.Diagnostics.InstanceDataCollectionCollection.get_Item to get an instance of this collection instead.  https://go.microsoft.com/fwlink/?linkid=14202")]
public InstanceDataCollection(string counterName);
    [CompilerGeneratedAttribute]
public string get_CounterName();
    public ICollection get_Keys();
    public ICollection get_Values();
    public InstanceData get_Item(string instanceName);
    internal void Add(string instanceName, InstanceData value);
    public bool Contains(string instanceName);
    public void CopyTo(InstanceData[] instances, int index);
}
[DefaultMemberAttribute("Item")]
public class System.Diagnostics.InstanceDataCollectionCollection : DictionaryBase {
    public InstanceDataCollection Item { get; }
    public ICollection Keys { get; }
    public ICollection Values { get; }
    public InstanceDataCollection get_Item(string counterName);
    public ICollection get_Keys();
    public ICollection get_Values();
    internal void Add(string counterName, InstanceDataCollection value);
    public bool Contains(string counterName);
    public void CopyTo(InstanceDataCollection[] counters, int index);
}
internal static class System.Diagnostics.NetFrameworkUtils : object {
    internal static void EnterMutex(string name, Mutex& mutex);
    internal static void EnterMutexWithoutGlobal(string mutexName, Mutex& mutex);
    private static bool SafeWaitForMutex(Mutex mutexIn, Mutex& mutexOut);
    private static bool SafeWaitForMutexOnce(Mutex mutexIn, Mutex& mutexOut);
    internal static string GetLatestBuildDllDirectory(string machineName);
    private static int GetLargestBuildNumberFromKey(RegistryKey rootKey);
    private static string GetLocalBuildDirectory();
}
internal class System.Diagnostics.PerfCounterSection : ConfigurationElement {
    private static ConfigurationProperty s_propFileMappingSize;
    private static ConfigurationPropertyCollection s_properties;
    [ConfigurationPropertyAttribute("filemappingsize")]
public int FileMappingSize { get; }
    protected ConfigurationPropertyCollection Properties { get; }
    private static PerfCounterSection();
    public int get_FileMappingSize();
    protected virtual ConfigurationPropertyCollection get_Properties();
}
public class System.Diagnostics.PerformanceCounter : Component {
    private string _machineName;
    private string _categoryName;
    private string _counterName;
    private string _instanceName;
    private PerformanceCounterInstanceLifetime _instanceLifetime;
    private bool _isReadOnly;
    private bool _initialized;
    private string _helpMsg;
    private int _counterType;
    private CounterSample _oldSample;
    private SharedPerformanceCounter _sharedCounter;
    [ObsoleteAttribute("This field has been deprecated and is not used.  Use machine.config or an application configuration file to set the size of the PerformanceCounter file mapping.")]
public static int DefaultFileMappingSize;
    private object _instanceLockObject;
    private object InstanceLockObject { get; }
    public string CategoryName { get; public set; }
    public string CounterHelp { get; }
    public string CounterName { get; public set; }
    public PerformanceCounterType CounterType { get; }
    public PerformanceCounterInstanceLifetime InstanceLifetime { get; public set; }
    public string InstanceName { get; public set; }
    public bool ReadOnly { get; public set; }
    public string MachineName { get; public set; }
    public long RawValue { get; public set; }
    public PerformanceCounter(string categoryName, string counterName, string instanceName, string machineName);
    internal PerformanceCounter(string categoryName, string counterName, string instanceName, string machineName, bool skipInit);
    public PerformanceCounter(string categoryName, string counterName, string instanceName);
    public PerformanceCounter(string categoryName, string counterName, string instanceName, bool readOnly);
    public PerformanceCounter(string categoryName, string counterName);
    public PerformanceCounter(string categoryName, string counterName, bool readOnly);
    private static PerformanceCounter();
    private object get_InstanceLockObject();
    public string get_CategoryName();
    public void set_CategoryName(string value);
    public string get_CounterHelp();
    public string get_CounterName();
    public void set_CounterName(string value);
    public PerformanceCounterType get_CounterType();
    public PerformanceCounterInstanceLifetime get_InstanceLifetime();
    public void set_InstanceLifetime(PerformanceCounterInstanceLifetime value);
    public string get_InstanceName();
    public void set_InstanceName(string value);
    public bool get_ReadOnly();
    public void set_ReadOnly(bool value);
    public string get_MachineName();
    public void set_MachineName(string value);
    public long get_RawValue();
    public void set_RawValue(long value);
    public sealed virtual void BeginInit();
    public void Close();
    public static void CloseSharedResources();
    protected virtual void Dispose(bool disposing);
    public long Decrement();
    public sealed virtual void EndInit();
    public long IncrementBy(long value);
    public long Increment();
    private void ThrowReadOnly();
    private static void VerifyWriteableCounterAllowed();
    private void Initialize();
    private void InitializeImpl();
    public CounterSample NextSample();
    public float NextValue();
    public void RemoveInstance();
}
public class System.Diagnostics.PerformanceCounterCategory : object {
    private string _categoryName;
    private string _categoryHelp;
    private string _machineName;
    internal static int MaxCategoryNameLength;
    internal static int MaxCounterNameLength;
    internal static int MaxHelpLength;
    private static string PerfMutexName;
    public string CategoryName { get; public set; }
    public string CategoryHelp { get; }
    public PerformanceCounterCategoryType CategoryType { get; }
    public string MachineName { get; public set; }
    public PerformanceCounterCategory(string categoryName);
    public PerformanceCounterCategory(string categoryName, string machineName);
    public string get_CategoryName();
    public void set_CategoryName(string value);
    public string get_CategoryHelp();
    public PerformanceCounterCategoryType get_CategoryType();
    public string get_MachineName();
    public void set_MachineName(string value);
    public bool CounterExists(string counterName);
    public static bool CounterExists(string counterName, string categoryName);
    public static bool CounterExists(string counterName, string categoryName, string machineName);
    [ObsoleteAttribute("This method has been deprecated.  Please use System.Diagnostics.PerformanceCounterCategory.Create(string categoryName, string categoryHelp, PerformanceCounterCategoryType categoryType, string counterName, string counterHelp) instead.  https://go.microsoft.com/fwlink/?linkid=14202")]
public static PerformanceCounterCategory Create(string categoryName, string categoryHelp, string counterName, string counterHelp);
    public static PerformanceCounterCategory Create(string categoryName, string categoryHelp, PerformanceCounterCategoryType categoryType, string counterName, string counterHelp);
    [ObsoleteAttribute("This method has been deprecated.  Please use System.Diagnostics.PerformanceCounterCategory.Create(string categoryName, string categoryHelp, PerformanceCounterCategoryType categoryType, CounterCreationDataCollection counterData) instead.  https://go.microsoft.com/fwlink/?linkid=14202")]
public static PerformanceCounterCategory Create(string categoryName, string categoryHelp, CounterCreationDataCollection counterData);
    public static PerformanceCounterCategory Create(string categoryName, string categoryHelp, PerformanceCounterCategoryType categoryType, CounterCreationDataCollection counterData);
    internal static void CheckValidCategory(string categoryName);
    internal static void CheckValidCounter(string counterName);
    internal static bool CheckValidId(string id, int maxLength);
    internal static void CheckValidHelp(string help);
    internal static void CheckValidCounterLayout(CounterCreationDataCollection counterData);
    public static void Delete(string categoryName);
    public static bool Exists(string categoryName);
    public static bool Exists(string categoryName, string machineName);
    internal static String[] GetCounterInstances(string categoryName, string machineName);
    public PerformanceCounter[] GetCounters();
    public PerformanceCounter[] GetCounters(string instanceName);
    public static PerformanceCounterCategory[] GetCategories();
    public static PerformanceCounterCategory[] GetCategories(string machineName);
    public String[] GetInstanceNames();
    public bool InstanceExists(string instanceName);
    public static bool InstanceExists(string instanceName, string categoryName);
    public static bool InstanceExists(string instanceName, string categoryName, string machineName);
    public InstanceDataCollectionCollection ReadCategory();
}
[FlagsAttribute]
internal enum System.Diagnostics.PerformanceCounterCategoryOptions : Enum {
    public int value__;
    public static PerformanceCounterCategoryOptions EnableReuse;
    public static PerformanceCounterCategoryOptions UseUniqueSharedMemory;
}
public enum System.Diagnostics.PerformanceCounterCategoryType : Enum {
    public int value__;
    public static PerformanceCounterCategoryType Unknown;
    public static PerformanceCounterCategoryType SingleInstance;
    public static PerformanceCounterCategoryType MultiInstance;
}
public enum System.Diagnostics.PerformanceCounterInstanceLifetime : Enum {
    public int value__;
    public static PerformanceCounterInstanceLifetime Global;
    public static PerformanceCounterInstanceLifetime Process;
}
internal class System.Diagnostics.PerformanceCounterLib : object {
    internal static string PerfShimName;
    private static string PerfShimFullNameSuffix;
    private static string PerfShimPathExp;
    internal static string OpenEntryPoint;
    internal static string CollectEntryPoint;
    internal static string CloseEntryPoint;
    internal static string SingleInstanceName;
    private static string PerflibPath;
    internal static string ServicePath;
    private static string CategorySymbolPrefix;
    private static string ConterSymbolPrefix;
    private static string HelpSufix;
    private static string NameSufix;
    private static string TextDefinition;
    private static string InfoDefinition;
    private static string LanguageDefinition;
    private static string ObjectDefinition;
    private static string DriverNameKeyword;
    private static string SymbolFileKeyword;
    private static string DefineKeyword;
    private static string LanguageKeyword;
    private static string DllName;
    private static int EnglishLCID;
    private static String modreq(System.Runtime.CompilerServices.IsVolatile) s_computerName;
    private static String modreq(System.Runtime.CompilerServices.IsVolatile) s_iniFilePath;
    private static String modreq(System.Runtime.CompilerServices.IsVolatile) s_symbolFilePath;
    private PerformanceMonitor _performanceMonitor;
    private string _machineName;
    private string _perfLcid;
    private static Hashtable modreq(System.Runtime.CompilerServices.IsVolatile) s_libraryTable;
    private Hashtable _customCategoryTable;
    private Hashtable _categoryTable;
    private Hashtable _nameTable;
    private Hashtable _helpTable;
    private object _categoryTableLock;
    private object _nameTableLock;
    private object _helpTableLock;
    private static object s_internalSyncObject;
    private static object InternalSyncObject { get; }
    internal static string ComputerName { get; }
    private Hashtable CategoryTable { get; }
    internal Hashtable HelpTable { get; }
    private static string IniFilePath { get; }
    internal Hashtable NameTable { get; }
    private static string SymbolFilePath { get; }
    internal PerformanceCounterLib(string machineName, string lcid);
    private static object get_InternalSyncObject();
    internal static string get_ComputerName();
    internal static T Read(ReadOnlySpan`1<byte> span);
    internal static T& modreq(System.Runtime.InteropServices.InAttribute) AsRef(ReadOnlySpan`1<byte> span);
    private Hashtable get_CategoryTable();
    internal Hashtable get_HelpTable();
    private static string get_IniFilePath();
    internal Hashtable get_NameTable();
    private static string get_SymbolFilePath();
    internal static bool CategoryExists(string machine, string category);
    internal bool CategoryExists(string category);
    internal static void CloseAllLibraries();
    internal static void CloseAllTables();
    internal void CloseTables();
    internal void Close();
    internal static bool CounterExists(string machine, string category, string counter);
    private bool CounterExists(string category, string counter, Boolean& categoryExists);
    private static void CreateIniFile(string categoryName, string categoryHelp, CounterCreationDataCollection creationData, String[] languageIds);
    private static void CreateRegistryEntry(string categoryName, PerformanceCounterCategoryType categoryType, CounterCreationDataCollection creationData, Boolean& iniRegistered);
    private static void CreateSymbolFile(CounterCreationDataCollection creationData);
    private static void DeleteRegistryEntry(string categoryName);
    private static void DeleteTemporaryFiles();
    internal bool FindCustomCategory(string category, PerformanceCounterCategoryType& categoryType);
    internal static String[] GetCategories(string machineName);
    internal String[] GetCategories();
    internal static string GetCategoryHelp(string machine, string category);
    private string GetCategoryHelp(string category);
    internal static CategorySample GetCategorySample(string machine, string category);
    private CategorySample GetCategorySample(string category);
    internal static String[] GetCounters(string machine, string category);
    private String[] GetCounters(string category, Boolean& categoryExists);
    internal static string GetCounterHelp(string machine, string category, string counter);
    private string GetCounterHelp(string category, string counter, Boolean& categoryExists);
    private static String[] GetLanguageIds();
    internal static PerformanceCounterLib GetPerformanceCounterLib(string machineName, CultureInfo culture);
    internal Byte[] GetPerformanceData(string item, bool usePool);
    internal void ReleasePerformanceData(Byte[] data);
    private Hashtable GetStringTable(bool isHelp);
    internal static bool IsCustomCategory(string machine, string category);
    internal static bool IsBaseCounter(int type);
    private bool IsCustomCategory(string category);
    internal static PerformanceCounterCategoryType GetCategoryType(string machine, string category);
    internal static void RegisterCategory(string categoryName, PerformanceCounterCategoryType categoryType, string categoryHelp, CounterCreationDataCollection creationData);
    private static void RegisterFiles(string arg0, bool unregister);
    internal static void UnregisterCategory(string categoryName);
}
public class System.Diagnostics.PerformanceCounterManager : object {
    [ObsoleteAttribute("This class has been deprecated.  Use the PerformanceCounters through the System.Diagnostics.PerformanceCounter class instead.  https://go.microsoft.com/fwlink/?linkid=14202")]
private sealed virtual override void System.Diagnostics.ICollectData.CollectData(int callIdx, IntPtr valueNamePtr, IntPtr dataPtr, int totalBytes, IntPtr& res);
    [ObsoleteAttribute("This class has been deprecated.  Use the PerformanceCounters through the System.Diagnostics.PerformanceCounter class instead.  https://go.microsoft.com/fwlink/?linkid=14202")]
private sealed virtual override void System.Diagnostics.ICollectData.CloseData();
}
public enum System.Diagnostics.PerformanceCounterType : Enum {
    public int value__;
    public static PerformanceCounterType NumberOfItems32;
    public static PerformanceCounterType NumberOfItems64;
    public static PerformanceCounterType NumberOfItemsHEX32;
    public static PerformanceCounterType NumberOfItemsHEX64;
    public static PerformanceCounterType RateOfCountsPerSecond32;
    public static PerformanceCounterType RateOfCountsPerSecond64;
    public static PerformanceCounterType CountPerTimeInterval32;
    public static PerformanceCounterType CountPerTimeInterval64;
    public static PerformanceCounterType RawFraction;
    public static PerformanceCounterType RawBase;
    public static PerformanceCounterType AverageTimer32;
    public static PerformanceCounterType AverageBase;
    public static PerformanceCounterType AverageCount64;
    public static PerformanceCounterType SampleFraction;
    public static PerformanceCounterType SampleCounter;
    public static PerformanceCounterType SampleBase;
    public static PerformanceCounterType CounterTimer;
    public static PerformanceCounterType CounterTimerInverse;
    public static PerformanceCounterType Timer100Ns;
    public static PerformanceCounterType Timer100NsInverse;
    public static PerformanceCounterType ElapsedTime;
    public static PerformanceCounterType CounterMultiTimer;
    public static PerformanceCounterType CounterMultiTimerInverse;
    public static PerformanceCounterType CounterMultiTimer100Ns;
    public static PerformanceCounterType CounterMultiTimer100NsInverse;
    public static PerformanceCounterType CounterMultiBase;
    public static PerformanceCounterType CounterDelta32;
    public static PerformanceCounterType CounterDelta64;
}
public class System.Diagnostics.PerformanceData.CounterData : object {
    private Int64* _offset;
    public long Value { get; public set; }
    public long RawValue { get; public set; }
    internal CounterData(Int64* pCounterData);
    public long get_Value();
    public void set_Value(long value);
    public void Increment();
    public void Decrement();
    public void IncrementBy(long value);
    public long get_RawValue();
    public void set_RawValue(long value);
}
public class System.Diagnostics.PerformanceData.CounterSet : object {
    internal PerfProvider _provider;
    internal Guid _providerGuid;
    internal Guid _counterSet;
    internal CounterSetInstanceType _instType;
    private object _lockObject;
    private bool _instanceCreated;
    internal Dictionary`2<string, int> _stringToId;
    internal Dictionary`2<int, CounterType> _idToCounter;
    public CounterSet(Guid providerGuid, Guid counterSetGuid, CounterSetInstanceType instanceType);
    public sealed virtual void Dispose();
    protected virtual override void Finalize();
    protected virtual void Dispose(bool disposing);
    public void AddCounter(int counterId, CounterType counterType);
    public void AddCounter(int counterId, CounterType counterType, string counterName);
    public CounterSetInstance CreateCounterSetInstance(string instanceName);
}
public class System.Diagnostics.PerformanceData.CounterSetInstance : object {
    internal CounterSet _counterSet;
    internal string _instName;
    private int _active;
    internal PerfCounterSetInstanceStruct* _nativeInst;
    [CompilerGeneratedAttribute]
private CounterSetInstanceCounterDataSet <Counters>k__BackingField;
    public CounterSetInstanceCounterDataSet Counters { get; private set; }
    internal CounterSetInstance(CounterSet counterSetDefined, string instanceName);
    public sealed virtual void Dispose();
    protected virtual override void Finalize();
    private void Dispose(bool disposing);
    [CompilerGeneratedAttribute]
public CounterSetInstanceCounterDataSet get_Counters();
    [CompilerGeneratedAttribute]
private void set_Counters(CounterSetInstanceCounterDataSet value);
}
[DefaultMemberAttribute("Item")]
public class System.Diagnostics.PerformanceData.CounterSetInstanceCounterDataSet : object {
    internal CounterSetInstance _instance;
    private Dictionary`2<int, CounterData> _counters;
    private int _disposed;
    internal Byte* _dataBlock;
    public CounterData Item { get; }
    public CounterData Item { get; }
    internal CounterSetInstanceCounterDataSet(CounterSetInstance thisInst);
    public sealed virtual void Dispose();
    protected virtual override void Finalize();
    private void Dispose(bool disposing);
    public CounterData get_Item(int counterId);
    public CounterData get_Item(string counterName);
}
public enum System.Diagnostics.PerformanceData.CounterSetInstanceType : Enum {
    public int value__;
    public static CounterSetInstanceType Single;
    public static CounterSetInstanceType Multiple;
    public static CounterSetInstanceType GlobalAggregate;
    public static CounterSetInstanceType GlobalAggregateWithHistory;
    public static CounterSetInstanceType MultipleAggregate;
    public static CounterSetInstanceType InstanceAggregate;
}
public enum System.Diagnostics.PerformanceData.CounterType : Enum {
    public int value__;
    public static CounterType QueueLength;
    public static CounterType LargeQueueLength;
    public static CounterType QueueLength100Ns;
    public static CounterType QueueLengthObjectTime;
    public static CounterType RawData32;
    public static CounterType RawData64;
    public static CounterType RawDataHex32;
    public static CounterType RawDataHex64;
    public static CounterType RateOfCountPerSecond32;
    public static CounterType RateOfCountPerSecond64;
    public static CounterType RawFraction32;
    public static CounterType RawFraction64;
    public static CounterType RawBase32;
    public static CounterType RawBase64;
    public static CounterType SampleFraction;
    public static CounterType SampleCounter;
    public static CounterType SampleBase;
    public static CounterType AverageTimer32;
    public static CounterType AverageBase;
    public static CounterType AverageCount64;
    public static CounterType PercentageActive;
    public static CounterType PercentageNotActive;
    public static CounterType PercentageActive100Ns;
    public static CounterType PercentageNotActive100Ns;
    public static CounterType ElapsedTime;
    public static CounterType MultiTimerPercentageActive;
    public static CounterType MultiTimerPercentageNotActive;
    public static CounterType MultiTimerPercentageActive100Ns;
    public static CounterType MultiTimerPercentageNotActive100Ns;
    public static CounterType MultiTimerBase;
    public static CounterType Delta32;
    public static CounterType Delta64;
    public static CounterType ObjectSpecificTimer;
    public static CounterType PrecisionSystemTimer;
    public static CounterType PrecisionTimer100Ns;
    public static CounterType PrecisionObjectSpecificTimer;
}
internal class System.Diagnostics.PerformanceData.PerfProvider : object {
    internal Guid _providerGuid;
    internal int _counterSet;
    internal SafePerfProviderHandle _hProvider;
    internal PerfProvider(Guid providerGuid);
}
internal static class System.Diagnostics.PerformanceData.PerfProviderCollection : object {
    private static object s_hiddenInternalSyncObject;
    private static List`1<PerfProvider> s_providerList;
    private static Dictionary`2<object, int> s_counterSetList;
    private static CounterType[] s_counterTypes;
    private static CounterSetInstanceType[] s_counterSetInstanceTypes;
    private static object s_lockObject { get; }
    private static PerfProviderCollection();
    private static object get_s_lockObject();
    internal static PerfProvider QueryProvider(Guid providerGuid);
    internal static void RemoveProvider(Guid providerGuid);
    internal static void RegisterCounterSet(Guid counterSetGuid);
    internal static void UnregisterCounterSet(Guid counterSetGuid);
    internal static bool ValidateCounterType(CounterType inCounterType);
    internal static bool ValidateCounterSetInstanceType(CounterSetInstanceType inCounterSetInstanceType);
}
internal class System.Diagnostics.PerformanceDataRegistryKey : object {
    private static int PerformanceData;
    private SafeRegistryHandle _hkey;
    private PerformanceDataRegistryKey(SafeRegistryHandle hkey);
    public static PerformanceDataRegistryKey OpenRemoteBaseKey(string machineName);
    public static PerformanceDataRegistryKey OpenLocal();
    public Byte[] GetValue(string name, bool usePool);
    public void ReleaseData(Byte[] data, bool usePool);
    public void Close();
    public sealed virtual void Dispose();
    private Byte[] CreateBlob(int size, Boolean& usePool);
    private static void Win32Error(Int32& errorCode, string name);
}
internal class System.Diagnostics.PerformanceMonitor : object {
    private PerformanceDataRegistryKey perfDataKey;
    private string machineName;
    internal PerformanceMonitor(string machineName);
    private void Init();
    internal void Close();
    internal Byte[] GetData(string item, bool usePool);
    internal void ReleaseData(Byte[] data);
}
internal class System.Diagnostics.ProcessData : object {
    public int ProcessId;
    public long StartupTime;
    public ProcessData(int pid, long startTime);
}
internal class System.Diagnostics.SharedPerformanceCounter : object {
    private static int MaxSpinCount;
    internal static int DefaultCountersFileMappingSize;
    internal static int MaxCountersFileMappingSize;
    internal static int MinCountersFileMappingSize;
    internal static int InstanceNameMaxLength;
    internal static int InstanceNameSlotSize;
    internal static string SingleInstanceName;
    internal static string DefaultFileMappingName;
    internal static int s_singleInstanceHashCode;
    private static Hashtable s_categoryDataTable;
    private static int s_categoryEntrySize;
    private static int s_instanceEntrySize;
    private static int s_counterEntrySize;
    private static int s_processLifetimeEntrySize;
    private static long s_lastInstanceLifetimeSweepTick;
    private static long InstanceLifetimeSweepWindow;
    private static ProcessData modreq(System.Runtime.CompilerServices.IsVolatile) s_procData;
    internal int _initialOffset;
    private CategoryData _categoryData;
    private long _baseAddress;
    private CounterEntry* _counterEntryPointer;
    private string _categoryName;
    private int _categoryNameHashCode;
    private int _thisInstanceOffset;
    private static ProcessData ProcessData { get; }
    private FileMapping FileView { get; }
    internal long Value { get; internal set; }
    internal SharedPerformanceCounter(string catName, string counterName, string instanceName);
    internal SharedPerformanceCounter(string catName, string counterName, string instanceName, PerformanceCounterInstanceLifetime lifetime);
    private static SharedPerformanceCounter();
    private static ProcessData get_ProcessData();
    private FileMapping get_FileView();
    internal long get_Value();
    internal void set_Value(long value);
    private int CalculateAndAllocateMemory(int totalSize, Int32& alignmentAdjustment);
    private int CalculateMemory(int oldOffset, int totalSize, Int32& alignmentAdjustment);
    private int CalculateMemoryNoBoundsCheck(int oldOffset, int totalSize, Int32& alignmentAdjustment);
    private int CreateCategory(CategoryEntry* lastCategoryPointer, int instanceNameHashCode, string instanceName, PerformanceCounterInstanceLifetime lifetime);
    private int CreateInstance(CategoryEntry* categoryPointer, int instanceNameHashCode, string instanceName, PerformanceCounterInstanceLifetime lifetime);
    private int CreateCounter(CounterEntry* lastCounterPointer, int counterNameHashCode, string counterName);
    private static void PopulateLifetimeEntry(ProcessLifetimeEntry* lifetimeEntry, PerformanceCounterInstanceLifetime lifetime);
    private static void WaitAndEnterCriticalSection(Int32* spinLockPointer, Boolean& taken);
    private static void WaitForCriticalSection(Int32* spinLockPointer);
    private static void ExitCriticalSection(Int32* spinLockPointer);
    internal static int GetWstrHashCode(string wstr);
    private int GetStringLength(Char* startChar);
    private bool StringEquals(string stringA, int offset);
    private CategoryData GetCategoryData();
    private static int GetFileMappingSizeFromConfig();
    private static void RemoveCategoryData(string categoryName);
    private CounterEntry* GetCounter(string counterName, string instanceName, bool enableReuse, PerformanceCounterInstanceLifetime lifetime);
    private bool FindCategory(CategoryEntry** returnCategoryPointerReference);
    private bool FindCounter(int counterNameHashCode, string counterName, InstanceEntry* instancePointer, CounterEntry** returnCounterPointerReference);
    private bool FindInstance(int instanceNameHashCode, string instanceName, CategoryEntry* categoryPointer, InstanceEntry** returnInstancePointerReference, bool activateUnusedInstances, PerformanceCounterInstanceLifetime lifetime, Boolean& foundFreeInstance);
    private bool TryReuseInstance(int instanceNameHashCode, string instanceName, CategoryEntry* categoryPointer, InstanceEntry** returnInstancePointerReference, PerformanceCounterInstanceLifetime lifetime, InstanceEntry* lockInstancePointer);
    private void Verify(CategoryEntry* currentCategoryPointer);
    private void VerifyCategory(CategoryEntry* currentCategoryPointer);
    private void VerifyInstance(InstanceEntry* currentInstancePointer);
    private void VerifyLifetime(InstanceEntry* currentInstancePointer);
    internal long IncrementBy(long value);
    internal long Increment();
    internal long Decrement();
    internal static void RemoveAllInstances(string categoryName);
    private void RemoveAllInstances();
    internal void RemoveInstance(string instanceName, PerformanceCounterInstanceLifetime instanceLifetime);
    private void RemoveOneInstance(InstanceEntry* instancePointer, bool clearValue);
    private void ClearCounterValues(InstanceEntry* instancePointer);
    private static long AddToValue(CounterEntry* counterEntry, long addend);
    private static long DecrementUnaligned(CounterEntry* counterEntry);
    private static long GetValue(CounterEntry* counterEntry);
    private static long IncrementUnaligned(CounterEntry* counterEntry);
    private static void SetValue(CounterEntry* counterEntry, long value);
    private static bool IsMisaligned(CounterEntry* counterEntry);
    private long ResolveOffset(int offset, int sizeToRead);
    private int ResolveAddress(long address, int sizeToRead);
    private static void SafeMarshalCopy(string str, IntPtr nativePointer);
}
internal class System.Diagnostics.SystemDiagnosticsSection : ConfigurationSection {
    private static ConfigurationProperty s_propPerfCounters;
    private static ConfigurationPropertyCollection s_properties;
    [ConfigurationPropertyAttribute("performanceCounters")]
public PerfCounterSection PerfCounters { get; }
    protected ConfigurationPropertyCollection Properties { get; }
    private static SystemDiagnosticsSection();
    public PerfCounterSection get_PerfCounters();
    protected virtual ConfigurationPropertyCollection get_Properties();
}
internal static class System.Diagnostics.TraceInternal : object {
    internal static object critSec;
    private static TraceInternal();
}
internal static class System.EnvironmentHelpers : object {
    private static Boolean modreq(System.Runtime.CompilerServices.IsVolatile) s_isAppContainerProcess;
    private static Boolean modreq(System.Runtime.CompilerServices.IsVolatile) s_isAppContainerProcessInitalized;
    public static bool IsAppContainerProcess { get; }
    public static bool get_IsAppContainerProcess();
    private static bool HasAppContainerToken();
}
internal static class System.SR : object {
    private static ResourceManager s_resourceManager;
    internal static ResourceManager ResourceManager { get; }
    internal static string InvalidParameter { get; }
    internal static string CategoryHelpCorrupt { get; }
    internal static string CounterNameCorrupt { get; }
    internal static string CounterDataCorrupt { get; }
    internal static string InstanceNameTooLong { get; }
    internal static string ProcessLifetimeNotValidInGlobal { get; }
    internal static string CountersOOM { get; }
    internal static string MappingCorrupted { get; }
    internal static string SingleInstanceOnly { get; }
    internal static string MultiInstanceOnly { get; }
    internal static string CantConvertProcessToGlobal { get; }
    internal static string CantConvertGlobalToProcess { get; }
    internal static string InstanceAlreadyExists { get; }
    internal static string SharedMemoryGhosted { get; }
    internal static string SetSecurityDescriptionFailed { get; }
    internal static string CantCreateFileMapping { get; }
    internal static string CantMapFileView { get; }
    internal static string MismatchedCounterTypes { get; }
    internal static string PerfCounterPdhError { get; }
    internal static string MustAddCounterCreationData { get; }
    internal static string CantReadInstance { get; }
    internal static string CantReadCategoryIndex { get; }
    internal static string MissingCategory { get; }
    internal static string CounterLayout { get; }
    internal static string CantReadCounter { get; }
    internal static string HelpNotAvailable { get; }
    internal static string MissingCategoryDetail { get; }
    internal static string MissingCounter { get; }
    internal static string CantChangeCategoryRegistration { get; }
    internal static string InvalidProperty { get; }
    internal static string CategoryNameNotSet { get; }
    internal static string PerformanceCategoryExists { get; }
    internal static string PerfInvalidCategoryName { get; }
    internal static string CategoryNameTooLong { get; }
    internal static string PerfInvalidCounterName { get; }
    internal static string PerfInvalidHelp { get; }
    internal static string InvalidCounterName { get; }
    internal static string DuplicateCounterName { get; }
    internal static string CantDeleteCategory { get; }
    internal static string InstanceNameRequired { get; }
    internal static string MissingInstance { get; }
    internal static string CantSetLifetimeAfterInitialized { get; }
    internal static string ReadOnlyCounter { get; }
    internal static string PCNotSupportedUnderAppContainer { get; }
    internal static string CategoryNameMissing { get; }
    internal static string CounterNameMissing { get; }
    internal static string InstanceLifetimeProcessonReadOnly { get; }
    internal static string RemoteWriting { get; }
    internal static string NotCustomCounter { get; }
    internal static string InstanceLifetimeProcessforSingleInstance { get; }
    internal static string InstanceNameProhibited { get; }
    internal static string ReadOnlyRemoveInstance { get; }
    internal static string CounterExists { get; }
    internal static string SetSecurityDescriptorFailed { get; }
    internal static string RegKeyMissingShort { get; }
    internal static string CantGetMappingSize { get; }
    internal static string CantReadCategory { get; }
    internal static string PlatformNotSupported_PerfCounters { get; }
    internal static string Perflib_Argument_InvalidCounterSetInstanceType { get; }
    internal static string Perflib_InvalidOperation_NoActiveProvider { get; }
    internal static string Perflib_Argument_InvalidCounterType { get; }
    internal static string Perflib_InvalidOperation_AddCounterAfterInstance { get; }
    internal static string Perflib_Argument_CounterAlreadyExists { get; }
    internal static string Perflib_Argument_EmptyInstanceName { get; }
    internal static string Perflib_InvalidOperation_CounterSetNotInstalled { get; }
    internal static string Perflib_Argument_InvalidInstance { get; }
    internal static string Perflib_Argument_EmptyCounterName { get; }
    internal static string Perflib_Argument_CounterNameAlreadyExists { get; }
    internal static string Perflib_Argument_ProviderNotFound { get; }
    internal static string Perflib_InvalidOperation_CounterSetContainsNoCounter { get; }
    internal static string Perflib_Argument_CounterSetAlreadyRegister { get; }
    internal static string Perflib_Argument_InstanceAlreadyExists { get; }
    internal static string Perflib_InsufficientMemory_InstanceCounterBlock { get; }
    internal static string Perflib_InvalidOperation_CounterRefValue { get; }
    internal static string Arg_DllInitFailure { get; }
    internal static string Arg_RegKeyNoRemoteConnect { get; }
    internal static string ObjectDisposed_CategorySampleClosed { get; }
    internal static string UnauthorizedAccess_RegistryKeyGeneric_Key { get; }
    private static bool UsingResourceKeys();
    internal static string GetResourceString(string resourceKey, string defaultString);
    internal static string Format(string resourceFormat, object p1);
    internal static string Format(string resourceFormat, object p1, object p2);
    internal static string Format(string resourceFormat, object p1, object p2, object p3);
    internal static string Format(string resourceFormat, Object[] args);
    internal static string Format(IFormatProvider provider, string resourceFormat, object p1);
    internal static string Format(IFormatProvider provider, string resourceFormat, object p1, object p2);
    internal static string Format(IFormatProvider provider, string resourceFormat, object p1, object p2, object p3);
    internal static string Format(IFormatProvider provider, string resourceFormat, Object[] args);
    internal static ResourceManager get_ResourceManager();
    internal static string get_InvalidParameter();
    internal static string get_CategoryHelpCorrupt();
    internal static string get_CounterNameCorrupt();
    internal static string get_CounterDataCorrupt();
    internal static string get_InstanceNameTooLong();
    internal static string get_ProcessLifetimeNotValidInGlobal();
    internal static string get_CountersOOM();
    internal static string get_MappingCorrupted();
    internal static string get_SingleInstanceOnly();
    internal static string get_MultiInstanceOnly();
    internal static string get_CantConvertProcessToGlobal();
    internal static string get_CantConvertGlobalToProcess();
    internal static string get_InstanceAlreadyExists();
    internal static string get_SharedMemoryGhosted();
    internal static string get_SetSecurityDescriptionFailed();
    internal static string get_CantCreateFileMapping();
    internal static string get_CantMapFileView();
    internal static string get_MismatchedCounterTypes();
    internal static string get_PerfCounterPdhError();
    internal static string get_MustAddCounterCreationData();
    internal static string get_CantReadInstance();
    internal static string get_CantReadCategoryIndex();
    internal static string get_MissingCategory();
    internal static string get_CounterLayout();
    internal static string get_CantReadCounter();
    internal static string get_HelpNotAvailable();
    internal static string get_MissingCategoryDetail();
    internal static string get_MissingCounter();
    internal static string get_CantChangeCategoryRegistration();
    internal static string get_InvalidProperty();
    internal static string get_CategoryNameNotSet();
    internal static string get_PerformanceCategoryExists();
    internal static string get_PerfInvalidCategoryName();
    internal static string get_CategoryNameTooLong();
    internal static string get_PerfInvalidCounterName();
    internal static string get_PerfInvalidHelp();
    internal static string get_InvalidCounterName();
    internal static string get_DuplicateCounterName();
    internal static string get_CantDeleteCategory();
    internal static string get_InstanceNameRequired();
    internal static string get_MissingInstance();
    internal static string get_CantSetLifetimeAfterInitialized();
    internal static string get_ReadOnlyCounter();
    internal static string get_PCNotSupportedUnderAppContainer();
    internal static string get_CategoryNameMissing();
    internal static string get_CounterNameMissing();
    internal static string get_InstanceLifetimeProcessonReadOnly();
    internal static string get_RemoteWriting();
    internal static string get_NotCustomCounter();
    internal static string get_InstanceLifetimeProcessforSingleInstance();
    internal static string get_InstanceNameProhibited();
    internal static string get_ReadOnlyRemoveInstance();
    internal static string get_CounterExists();
    internal static string get_SetSecurityDescriptorFailed();
    internal static string get_RegKeyMissingShort();
    internal static string get_CantGetMappingSize();
    internal static string get_CantReadCategory();
    internal static string get_PlatformNotSupported_PerfCounters();
    internal static string get_Perflib_Argument_InvalidCounterSetInstanceType();
    internal static string get_Perflib_InvalidOperation_NoActiveProvider();
    internal static string get_Perflib_Argument_InvalidCounterType();
    internal static string get_Perflib_InvalidOperation_AddCounterAfterInstance();
    internal static string get_Perflib_Argument_CounterAlreadyExists();
    internal static string get_Perflib_Argument_EmptyInstanceName();
    internal static string get_Perflib_InvalidOperation_CounterSetNotInstalled();
    internal static string get_Perflib_Argument_InvalidInstance();
    internal static string get_Perflib_Argument_EmptyCounterName();
    internal static string get_Perflib_Argument_CounterNameAlreadyExists();
    internal static string get_Perflib_Argument_ProviderNotFound();
    internal static string get_Perflib_InvalidOperation_CounterSetContainsNoCounter();
    internal static string get_Perflib_Argument_CounterSetAlreadyRegister();
    internal static string get_Perflib_Argument_InstanceAlreadyExists();
    internal static string get_Perflib_InsufficientMemory_InstanceCounterBlock();
    internal static string get_Perflib_InvalidOperation_CounterRefValue();
    internal static string get_Arg_DllInitFailure();
    internal static string get_Arg_RegKeyNoRemoteConnect();
    internal static string get_ObjectDisposed_CategorySampleClosed();
    internal static string get_UnauthorizedAccess_RegistryKeyGeneric_Key();
}
