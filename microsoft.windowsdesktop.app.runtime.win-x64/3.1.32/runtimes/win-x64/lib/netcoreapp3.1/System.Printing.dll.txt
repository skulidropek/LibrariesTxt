[UnsafeValueTypeAttribute]
[NativeCppClassAttribute]
internal class __MIDL___MIDL_itf_xpsprint_0000_0000_0002 : ValueType {
    private int <alignment member>;
}
[UnsafeValueTypeAttribute]
[NativeCppClassAttribute]
internal class __type_info_node : ValueType {
    private long <alignment member>;
}
[NativeCppClassAttribute]
internal class _EXCEPTION_POINTERS : ValueType {
    private long <alignment member>;
}
[NativeCppClassAttribute]
[UnsafeValueTypeAttribute]
internal class _JOB_INFO_1W : ValueType {
    private long <alignment member>;
}
[UnsafeValueTypeAttribute]
[NativeCppClassAttribute]
internal class _JOB_INFO_2W : ValueType {
    private long <alignment member>;
}
[NativeCppClassAttribute]
internal class _LARGE_INTEGER : ValueType {
    private long <alignment member>;
}
[UnsafeValueTypeAttribute]
[NativeCppClassAttribute]
internal class _OUTLINETEXTMETRICW : ValueType {
    private long <alignment member>;
}
[NativeCppClassAttribute]
internal class _PRINTER_INFO_1W : ValueType {
    private long <alignment member>;
}
[NativeCppClassAttribute]
internal class _PRINTER_INFO_2W : ValueType {
    private long <alignment member>;
}
[NativeCppClassAttribute]
internal class _PRINTER_INFO_3 : ValueType {
    private long <alignment member>;
}
[NativeCppClassAttribute]
internal class _PRINTER_INFO_4W : ValueType {
    private long <alignment member>;
}
[NativeCppClassAttribute]
internal class _PRINTER_INFO_5W : ValueType {
    private long <alignment member>;
}
[NativeCppClassAttribute]
internal class _PRINTER_INFO_6 : ValueType {
    private int <alignment member>;
}
[NativeCppClassAttribute]
internal class _PRINTER_INFO_7W : ValueType {
    private long <alignment member>;
}
[NativeCppClassAttribute]
internal class _PRINTER_INFO_8W : ValueType {
    private long <alignment member>;
}
[NativeCppClassAttribute]
internal class _PRINTER_INFO_9W : ValueType {
    private long <alignment member>;
}
[NativeCppClassAttribute]
[UnsafeValueTypeAttribute]
internal class _SLIST_HEADER : ValueType {
    private long <alignment member>;
}
[NativeCppClassAttribute]
internal class _ULARGE_INTEGER : ValueType {
    private long <alignment member>;
}
[NativeCppClassAttribute]
internal class gcroot<System::String ^> : ValueType {
    private long <alignment member>;
}
[NativeCppClassAttribute]
internal class HRGN__ : ValueType {
    private int <alignment member>;
}
[NativeCppClassAttribute]
internal static class IStream : ValueType {
    private long <alignment member>;
}
[NativeCppClassAttribute]
internal static class IXpsPrintJob : ValueType {
    private long <alignment member>;
}
[NativeCppClassAttribute]
internal static class IXpsPrintJobStream : ValueType {
    private long <alignment member>;
}
internal class Microsoft.Internal.GDIExporter.BandIterator : ValueType {
    private Int32Rect _rect;
    private int _count;
    private Int32Rect _band;
    private int _index;
    private int _prevBottom;
    public BandIterator(Int32Rect rect, int count);
    public Int32Rect GetCurrent();
    public bool MoveNext();
    public void Reset();
}
internal class Microsoft.Internal.GDIExporter.CachedGDIObject : object {
    protected Byte[] m_RawData;
    protected GdiSafeHandle m_handle;
    public GdiSafeHandle Handle { get; }
    public CachedGDIObject(Byte& modopt(System.Runtime.CompilerServices.IsExplicitlyDereferenced) modopt(System.Runtime.CompilerServices.IsConst) pData, int size, GdiSafeHandle handle);
    public GdiSafeHandle get_Handle();
    public GdiSafeHandle Match(Byte& modopt(System.Runtime.CompilerServices.IsExplicitlyDereferenced) modopt(System.Runtime.CompilerServices.IsConst) pData, int size);
}
internal class Microsoft.Internal.GDIExporter.CGDIBitmap : ValueType {
    private int m_Width;
    private int m_Height;
    private int m_Stride;
    private PixelFormat m_PixelFormat;
    private int m_Offset;
    private BitmapSource m_pBitmap;
    private Byte[] m_Bi;
    private Byte[] m_Buffer;
    private PaletteSorter m_pSorter;
    public Int32 modopt(System.Runtime.CompilerServices.IsLong) Load(BitmapSource pBitmap, Byte[] buffer, PixelFormat LoadFormat);
    public IList`1<Color> GetColorTable();
    public Int32 modopt(System.Runtime.CompilerServices.IsLong) ColorReduction();
    public void SetBits(tagBITMAPINFO& modopt(System.Runtime.CompilerServices.IsExplicitlyDereferenced) bmi);
    public Int32 modopt(System.Runtime.CompilerServices.IsLong) StretchBlt(CGDIDevice pDevice, Int32Rect modopt(System.Runtime.CompilerServices.IsConst)* modopt(System.Runtime.CompilerServices.IsImplicitlyDereferenced) dst, bool flipHoriz, bool flipVert);
    public bool IsValid();
    public void SetupPalette(tagBITMAPINFO& modopt(System.Runtime.CompilerServices.IsExplicitlyDereferenced) bmi, int bitCount);
}
internal class Microsoft.Internal.GDIExporter.CGDIDevice : object {
    protected GdiSafeDCHandle m_hDC;
    protected UInt32 modopt(System.Runtime.CompilerServices.IsLong) m_Caps;
    protected UInt32 m_nDpiX;
    protected UInt32 m_nDpiY;
    protected double m_RasterizationDPI;
    protected Byte[] m_lastDevmode;
    protected CachedGDIObject[] m_Cache;
    protected int m_CacheFirst;
    protected GdiSafeHandle m_lastFont;
    protected GdiSafeHandle m_lastPen;
    protected GdiSafeHandle m_lastBrush;
    protected UInt32 modopt(System.Runtime.CompilerServices.IsLong) m_lastTextColor;
    protected int m_lastPolyFillMode;
    protected UInt32 m_lastTextAlign;
    protected float m_lastMiterLimit;
    protected static Hashtable s_InstalledFonts;
    protected static object s_lockObject;
    protected static ArrayList s_oldPrivateFonts;
    public GdiSafeHandle m_nullPen;
    public GdiSafeHandle m_nullBrush;
    public GdiSafeHandle m_whiteBrush;
    public GdiSafeHandle m_blackBrush;
    public bool HasDC { get; }
    public static ArrayList OldPrivateFonts { get; }
    private static CGDIDevice();
    public static ArrayList get_OldPrivateFonts();
    public void Release();
    public void ResetStates();
    public Int32 modopt(System.Runtime.CompilerServices.IsLong) InitializeDevice();
    public UInt32 modopt(System.Runtime.CompilerServices.IsLong) GetCaps();
    public UInt32 GetDpiX();
    public UInt32 GetDpiY();
    public int GetDCOrgEx(tagPOINT* modopt(System.Runtime.CompilerServices.IsImplicitlyDereferenced) pOrigin);
    public void SelectObject(GdiSafeHandle hObj, int type);
    public Int32 modopt(System.Runtime.CompilerServices.IsLong) SetupForIncreasedResolution(int resolutionMultiplier, tagXFORM* modopt(System.Runtime.CompilerServices.IsImplicitlyDereferenced) oldTransform);
    public Int32 modopt(System.Runtime.CompilerServices.IsLong) CleanupForIncreasedResolution(int resolutionMultiplier, tagXFORM modopt(System.Runtime.CompilerServices.IsConst)* modopt(System.Runtime.CompilerServices.IsImplicitlyDereferenced) oldTransform);
    public Int32 modopt(System.Runtime.CompilerServices.IsLong) SetPolyFillMode(int polyfillmode);
    public int SelectClipPath(int iMode);
    public Int32 modopt(System.Runtime.CompilerServices.IsLong) SetMiterLimit(float eNewLimit);
    public Int32 modopt(System.Runtime.CompilerServices.IsLong) SetTextColor(UInt32 modopt(System.Runtime.CompilerServices.IsLong) color);
    public Int32 modopt(System.Runtime.CompilerServices.IsLong) Polygon(PointI[] pPoints, int offset, int nCount);
    public Int32 modopt(System.Runtime.CompilerServices.IsLong) Polyline(PointI[] pPoints, int offset, int nCount);
    public Int32 modopt(System.Runtime.CompilerServices.IsLong) PolyPolygon(PointI[] pPoints, int offsetP, UInt32[] pPolyCounts, int offsetC, int nCount);
    public Int32 modopt(System.Runtime.CompilerServices.IsLong) PolyPolyline(PointI[] pPoints, UInt32[] pPolyCounts, int nCount);
    public Int32 modopt(System.Runtime.CompilerServices.IsLong) BeginPath();
    public Int32 modopt(System.Runtime.CompilerServices.IsLong) EndPath();
    public Int32 modopt(System.Runtime.CompilerServices.IsLong) FillPath();
    public Int32 modopt(System.Runtime.CompilerServices.IsLong) StretchDIBits(int XDest, int YDest, int nDestWidth, int nDestHeight, int XSrc, int YSrc, int nSrcWidth, int nSrcHeight, Byte& modopt(System.Runtime.CompilerServices.IsExplicitlyDereferenced) pBits, tagBITMAPINFO& modopt(System.Runtime.CompilerServices.IsExplicitlyDereferenced) pBitsInfo);
    public Int32 modopt(System.Runtime.CompilerServices.IsLong) FillRect(int x, int y, int width, int height, GdiSafeHandle hBrush);
    public Int32 modopt(System.Runtime.CompilerServices.IsLong) PolyBezier(PointI[] pPoints, int nCount);
    public Int32 modopt(System.Runtime.CompilerServices.IsLong) DrawMixedPath(PointI[] pPoints, Byte[] pTypes, int nCount);
    public Int32 modopt(System.Runtime.CompilerServices.IsLong) HrEndDoc();
    public Int32 modopt(System.Runtime.CompilerServices.IsLong) HrStartPage(Byte[] pDevmode);
    public Int32 modopt(System.Runtime.CompilerServices.IsLong) HrEndPage();
    public Int32 modopt(System.Runtime.CompilerServices.IsLong) SetTextAlign(UInt32 textAlign);
    public int EscapeSupported(UInt32 modopt(System.Runtime.CompilerServices.IsLong) function);
    public GdiSafeHandle CacheMatch(Byte& modopt(System.Runtime.CompilerServices.IsExplicitlyDereferenced) modopt(System.Runtime.CompilerServices.IsConst) pData, int size);
    public void CacheObject(Byte& modopt(System.Runtime.CompilerServices.IsExplicitlyDereferenced) modopt(System.Runtime.CompilerServices.IsConst) pData, int size, GdiSafeHandle handle);
    public GdiSafeHandle ConvertPen(Pen pen, Brush pStrokeBrush, Matrix matrix, CGDIPath pPath, int dpi);
    public GdiSafeHandle ConvertBrush(UInt32 modopt(System.Runtime.CompilerServices.IsLong) color);
    public GdiSafeHandle ConvertBrush(Brush brush);
    public string CheckFont(GlyphTypeface typeface, string name, Boolean& isPrivateFont);
    public void UninstallFonts();
    public bool get_HasDC();
}
internal class Microsoft.Internal.GDIExporter.CGDIPath : object {
    private bool m_IsValid;
    private bool m_HasCurve;
    private Int32Rect m_DeviceBounds;
    private int m_ResolutionScale;
    private Byte[] m_Types;
    private PointI[] m_Points;
    private UInt32[] m_PolyCounts;
    private int m_NumPoints;
    private int m_NumPolygons;
    private int m_PathFillMode;
    private UInt32 modopt(System.Runtime.CompilerServices.IsLong) m_Flags;
    private CGDIPath(GeometryProxy modreq(System.Runtime.CompilerServices.IsImplicitlyDereferenced) geometry, Matrix matrix, bool ForFill, Pen pen);
    public static CGDIPath CreateFillPath(GeometryProxy modreq(System.Runtime.CompilerServices.IsImplicitlyDereferenced) geometry, Matrix matrix);
    public static CGDIPath CreateStrokePath(GeometryProxy modreq(System.Runtime.CompilerServices.IsImplicitlyDereferenced) geometry, Matrix matrix, Pen pen);
    public Int32 modopt(System.Runtime.CompilerServices.IsLong) Fill(CGDIDevice dc, GdiSafeHandle brush);
    public Int32 modopt(System.Runtime.CompilerServices.IsLong) Draw(CGDIDevice dc, GdiSafeHandle pen);
    public bool IsValid();
    public bool HasCurve();
    public int GetResolutionScale();
    public Int32 modopt(System.Runtime.CompilerServices.IsLong) SelectClip(CGDIDevice dc, int mode);
    public double MaxCos();
    protected void GetDeviceBounds(PointI[] p, int count);
    protected void ProcessCurve(int count, bool ForFill);
    protected void ProcessPolygon(int count, bool ForFill, int figureCount);
}
internal class Microsoft.Internal.GDIExporter.CGDIRenderTarget : CGDIDevice {
    private bool m_startPage;
    protected Stack m_state;
    protected int m_clipLevel;
    protected Matrix m_transform;
    protected Matrix m_DeviceTransform;
    protected int m_nWidth;
    protected int m_nHeight;
    protected Hashtable m_cachedUnstyledFontCharsets;
    public virtual int StartDocument(string printerName, string jobName, string filename, Byte[] devmode);
    public virtual void StartDocumentWithoutCreatingDC(string priterName, string jobName, string filename);
    public virtual void EndDocument();
    public virtual void CreateDeviceContext(string printerName, string jobName, Byte[] devmode);
    public virtual void DeleteDeviceContext();
    public virtual string ExtEscGetName();
    public virtual bool ExtEscMXDWPassThru();
    public virtual void StartPage(Byte[] devmode, int rasterizationDPI);
    public virtual void EndPage();
    public virtual void PopClip();
    public virtual void PopTransform();
    public virtual void PushClip(Geometry clipGeometry);
    public virtual void PushTransform(Matrix transform);
    public virtual void DrawGeometry(Brush brush, Pen pen, Brush strokeBrush, Geometry geometry);
    public virtual void DrawImage(BitmapSource source, Byte[] buffer, Rect rect);
    public virtual void DrawGlyphRun(Brush pBrush, GlyphRun glyphRun);
    public virtual void Comment(string comment);
    protected void ThrowOnFailure(Int32 modopt(System.Runtime.CompilerServices.IsLong) hr);
    protected Int32 modopt(System.Runtime.CompilerServices.IsLong) Initialize();
    protected Int32 modopt(System.Runtime.CompilerServices.IsLong) DrawBitmap(BitmapSource pImage, Byte[] buffer, Rect rectDest);
    protected Int32 modopt(System.Runtime.CompilerServices.IsLong) GetBrushScale(Brush pFillBrush, Double& ScaleX, Double& ScaleY);
    protected void PushClipProxy(GeometryProxy modreq(System.Runtime.CompilerServices.IsImplicitlyDereferenced) geometry);
    protected Int32 modopt(System.Runtime.CompilerServices.IsLong) StrokePath(GeometryProxy modreq(System.Runtime.CompilerServices.IsImplicitlyDereferenced) geometry, Pen pPen, Brush pStrokeBrush);
    protected Int32 modopt(System.Runtime.CompilerServices.IsLong) FillPath(GeometryProxy modreq(System.Runtime.CompilerServices.IsImplicitlyDereferenced) geometry, Brush pFillBrush);
    protected Int32 modopt(System.Runtime.CompilerServices.IsLong) FillImage(GeometryProxy modreq(System.Runtime.CompilerServices.IsImplicitlyDereferenced) geometry, ImageBrush brush);
    protected Int32 modopt(System.Runtime.CompilerServices.IsLong) RasterizeBrush(CGDIBitmap& bmpdata, Int32Rect renderBounds, Int32Rect bounds, Rect geometryBounds, Brush pFillBrush, bool vertical, bool horizontal, double ScaleX, double ScaleY);
    protected Int32 modopt(System.Runtime.CompilerServices.IsLong) RasterizeShape(GeometryProxy modreq(System.Runtime.CompilerServices.IsImplicitlyDereferenced) geometry, Int32Rect& pBounds, Brush pFillBrush);
    protected int SetTextWorldTransform(tagXFORM& OriginalTransform);
    protected GdiSafeHandle CreateFontW(GlyphRun pGlyphRun, double fontSize, double scaleY, Boolean& isPrivateFont);
    protected Int32 modopt(System.Runtime.CompilerServices.IsLong) RenderGlyphRun(GlyphRun pGlyphRun, Point translate, Point scale, bool isPrivateFont);
    protected Int32 modopt(System.Runtime.CompilerServices.IsLong) RenderTextThroughGDI(GlyphRun pGlyphRun, Brush pBrush);
    protected GdiSafeHandle CreateFontCached(tagENUMLOGFONTEXDVW& modopt(System.Runtime.CompilerServices.IsExplicitlyDereferenced) logfontdv);
    protected GdiSafeHandle CreateSimulatedStyleFont(tagENUMLOGFONTEXDVW& modopt(System.Runtime.CompilerServices.IsExplicitlyDereferenced) logfontdv, StyleSimulations styleSimulations);
    protected GdiSafeHandle CreateUnstyledFont(tagENUMLOGFONTEXDVW& modopt(System.Runtime.CompilerServices.IsExplicitlyDereferenced) logfontdv);
    protected string GetFontFace(GdiSafeHandle font);
    protected string GetFontStyle(GdiSafeHandle font);
    protected bool CheckFontFaceAndStyle(GdiSafeHandle font, string fontFace, string fontStyle);
    protected Int32 modopt(System.Runtime.CompilerServices.IsLong) DrawBitmap_PassThrough(BitmapSource pIBitmap, Int32Rect& rcDstBounds, int nImageWidth, int nImageHeight);
    protected Int32 modopt(System.Runtime.CompilerServices.IsLong) FillLinearGradient(GeometryProxy modreq(System.Runtime.CompilerServices.IsImplicitlyDereferenced) geometry, Brush brush);
    private bool SetLOGFONT(tagENUMLOGFONTEXDVW& modopt(System.Runtime.CompilerServices.IsExplicitlyDereferenced) logfontdv, int index);
}
internal abstract class Microsoft.Internal.GDIExporter.CNativeMethods : object {
    internal static Int32 modopt(System.Runtime.CompilerServices.IsConst) CSIDL_FONTS;
    private static CNativeMethods();
    internal static GdiSafeDCHandle CreateDCW(String modopt(System.Runtime.CompilerServices.IsConst) pDriver, String modopt(System.Runtime.CompilerServices.IsConst) pDevice, String modopt(System.Runtime.CompilerServices.IsConst) pPort, Byte[] devmode);
    internal static int SaveDC(GdiSafeDCHandle hdc);
    internal static int RestoreDC(GdiSafeDCHandle hdc, int nSavedDC);
    internal static Void* ResetDCW(GdiSafeDCHandle hdc, Byte[] devmode);
    internal static int GetDCOrgEx(GdiSafeHandle hdc, tagPOINT* pPoint);
    internal static GdiSafeHandle GetStockObject(int fnObject);
    internal static Void* SelectObject(GdiSafeDCHandle hdc, GdiSafeHandle hgdiobj);
    internal static int StartDocW(GdiSafeDCHandle hdc, GdiDocInfoW modopt(System.Runtime.CompilerServices.IsConst) docinfo);
    internal static int EndDoc(GdiSafeDCHandle hdc);
    internal static int StartPage(GdiSafeDCHandle hDC);
    internal static int EndPage(GdiSafeHandle hdc);
    internal static int BeginPath(GdiSafeDCHandle hdc);
    internal static int EndPath(GdiSafeDCHandle hdc);
    internal static int FillPath(GdiSafeDCHandle hdc);
    internal static int Polygon(GdiSafeDCHandle hdc, PointI modopt(System.Runtime.CompilerServices.IsConst)* pPoints, int nCount);
    internal static int Polyline(GdiSafeDCHandle hdc, PointI modopt(System.Runtime.CompilerServices.IsConst)* ppt, int cPoints);
    internal static int PolyPolygon(GdiSafeDCHandle hdc, PointI modopt(System.Runtime.CompilerServices.IsConst)* pPoints, UInt32 modopt(System.Runtime.CompilerServices.IsConst)* pPolyCounts, int nCount);
    internal static int PolyPolyline(GdiSafeHandle hdc, PointI modopt(System.Runtime.CompilerServices.IsConst)* ppt, UInt32 modopt(System.Runtime.CompilerServices.IsConst)* pdwPolyPoints, UInt32 modopt(System.Runtime.CompilerServices.IsLong) cCount);
    internal static int PolyBezier(GdiSafeDCHandle hdc, PointI modopt(System.Runtime.CompilerServices.IsConst)* ppt, UInt32 modopt(System.Runtime.CompilerServices.IsLong) cPoints);
    internal static int SetStretchBltMode(GdiSafeDCHandle hdc, int iStretchMode);
    internal static int SetPolyFillMode(GdiSafeDCHandle hdc, int iPolyFillMode);
    internal static int GetDeviceCaps(GdiSafeHandle hdc, int nIndex);
    internal static UInt32 modopt(System.Runtime.CompilerServices.IsLong) GetObjectType(GdiSafeHandle obj);
    internal static int SetGraphicsMode(GdiSafeDCHandle hdc, int iMode);
    internal static int PolyDraw(GdiSafeDCHandle hdc, PointI modopt(System.Runtime.CompilerServices.IsConst)* ppt, Byte modopt(System.Runtime.CompilerServices.IsConst)* pbTypes, int cCount);
    internal static int SelectClipPath(GdiSafeHandle hdc, int iMode);
    internal static int ExtEscape(GdiSafeDCHandle hdc, int nEscape, int cbInput, Void modopt(System.Runtime.CompilerServices.IsConst)* lpszInData, int cbOutput, Void* lpszOutData);
    internal static int SetMiterLimit(GdiSafeDCHandle hdc, float eNewLimit, Single* peOldLimit);
    internal static UInt32 modopt(System.Runtime.CompilerServices.IsLong) SetTextColor(GdiSafeHandle hdc, UInt32 modopt(System.Runtime.CompilerServices.IsLong) crColor);
    internal static UInt32 SetTextAlign(GdiSafeDCHandle hdc, UInt32 fMode);
    internal static int SetBackMode(GdiSafeDCHandle hdc, int iBkMode);
    internal static int SetWorldTransform(GdiSafeHandle hdc, tagXFORM modopt(System.Runtime.CompilerServices.IsConst)* pXform);
    internal static int GetWorldTransform(GdiSafeDCHandle hdc, tagXFORM* pXform);
    internal static int ModifyWorldTransform(GdiSafeDCHandle hdc, tagXFORM modopt(System.Runtime.CompilerServices.IsConst)* lpXform, UInt32 modopt(System.Runtime.CompilerServices.IsLong) iMode);
    internal static GdiSafeHandle CreateSolidBrush(UInt32 modopt(System.Runtime.CompilerServices.IsLong) crColor);
    internal static GdiSafeHandle ExtCreatePen(UInt32 modopt(System.Runtime.CompilerServices.IsLong) dwPenStyle, UInt32 modopt(System.Runtime.CompilerServices.IsLong) dwWidth, tagLOGBRUSH modopt(System.Runtime.CompilerServices.IsConst)* plb, UInt32 modopt(System.Runtime.CompilerServices.IsLong) dwStyleCount, UInt32 modopt(System.Runtime.CompilerServices.IsLong)[] pStyle);
    internal static GdiSafeHandle CreateFontIndirectExW(tagENUMLOGFONTEXDVW modopt(System.Runtime.CompilerServices.IsConst)* penumlfex);
    internal static int SelectClipRgn(GdiSafeDCHandle hdc, HRGN__* hrgn);
    internal static int ExtTextOutW(GdiSafeDCHandle hdc, int X, int Y, UInt32 fuOptions, tagRECT modopt(System.Runtime.CompilerServices.IsConst)* prc, UInt16 modopt(System.Runtime.CompilerServices.IsConst)* pString, UInt32 cbCount, Int32 modopt(System.Runtime.CompilerServices.IsConst)* pDx);
    internal static int GetTextMetrics(GdiSafeDCHandle hdc, tagTEXTMETRICW* ptm);
    internal static UInt32 GetOutlineTextMetricsW(GdiSafeDCHandle hdc, int cb, Byte[] ptm);
    internal static int GetTextFaceW(GdiSafeDCHandle hdc, int count, StringBuilder faceName);
    internal static int GdiComment(GdiSafeDCHandle hdc, UInt32 nSize, Byte modopt(System.Runtime.CompilerServices.IsConst)* pData);
    internal static int GradientFill(GdiSafeDCHandle hdc, TriVertex[] vertex, UInt32 modopt(System.Runtime.CompilerServices.IsLong) dwNumVertex, UInt32 modopt(System.Runtime.CompilerServices.IsLong)[] mesh, UInt32 modopt(System.Runtime.CompilerServices.IsLong) dwNumMesh, UInt32 modopt(System.Runtime.CompilerServices.IsLong) dwMode);
    internal static int StretchDIBits(GdiSafeDCHandle hdc, int XDest, int YDest, int nDestWidth, int nDestHeight, int XSrc, int YSrc, int nSrcWidth, int nSrcHeight, Void modopt(System.Runtime.CompilerServices.IsConst)* pBits, tagBITMAPINFO modopt(System.Runtime.CompilerServices.IsConst)* lpBitsInfo, UInt32 iUsage, UInt32 modopt(System.Runtime.CompilerServices.IsLong) dwRop);
    internal static int PatBlt(GdiSafeDCHandle handle, int x, int y, int width, int height, UInt32 modopt(System.Runtime.CompilerServices.IsLong) rop3);
    internal static int RemoveFontResourceExW(String modopt(System.Runtime.CompilerServices.IsConst) fileName, UInt32 modopt(System.Runtime.CompilerServices.IsLong) fl, Byte modopt(System.Runtime.CompilerServices.IsConst)* pdv);
    internal static GdiFontResourceSafeHandle AddFontMemResourceEx(Byte[] font, UInt32 modopt(System.Runtime.CompilerServices.IsLong) cbFont, Byte modopt(System.Runtime.CompilerServices.IsConst)* pdv, UInt32 modopt(System.Runtime.CompilerServices.IsLong)* pcFonts);
    internal static int SHGetSpecialFolderPathW(IntPtr hwndOwner, StringBuilder lpszPath, int nFolder, int fCreate);
}
internal class Microsoft.Internal.GDIExporter.CPolyPolygon : object {
    protected int m_cPolygons;
    protected PointI[] m_rgptVertex;
    protected int m_offsetP;
    protected UInt32[] m_rgcPoly;
    protected int m_offsetC;
    protected PointI m_topleft;
    protected PointI m_bottomright;
    protected void Divide(CPolyPolygon[] pPolygons, int cGroup);
    protected static bool DisJoint(CPolyPolygon[] pPolygons, int cGroup);
    protected bool DisJoint(CPolyPolygon poly2);
    protected void GetBounds();
    public void Set(PointI[] rgptVertex, int offsetP, UInt32[] rgcPoly, int offsetC, int cPolygons);
    public Int32 modopt(System.Runtime.CompilerServices.IsLong) Draw(CGDIDevice dc);
}
internal class Microsoft.Internal.GDIExporter.FontInfo : object {
    private FontInstallInfo _systemInstall;
    private FontInstallInfo _privateInstall;
    private string _newFamilyName;
    private object _privateInstallHandle;
    public string NewFamilyName { get; }
    public FontInfo(Uri systemUri);
    public bool UsePrivate(GlyphTypeface typeface);
    public void UninstallPrivate();
    public string get_NewFamilyName();
}
internal class Microsoft.Internal.GDIExporter.FontInstallInfo : object {
    private Uri _uri;
    private int _streamLength;
    public FontInstallInfo(Uri uri);
    public bool Equals(FontStreamContext modreq(System.Runtime.CompilerServices.IsImplicitlyDereferenced) context, FontInstallInfo otherFont);
    public object Install(FontStreamContext modreq(System.Runtime.CompilerServices.IsImplicitlyDereferenced) context, String& newFamilyName, UInt32 faceIndex);
    public void Uninstall(object installHandle);
    private void UpdateFromContext(FontStreamContext modreq(System.Runtime.CompilerServices.IsImplicitlyDereferenced) context);
}
internal class Microsoft.Internal.GDIExporter.FontStreamContext : object {
    public static Int32 modopt(System.Runtime.CompilerServices.IsConst) MaximumStreamLength;
    private static Int32 modopt(System.Runtime.CompilerServices.IsConst) CompareLength;
    private GlyphTypeface _sourceTypeface;
    private Uri _sourceUri;
    private Stream _stream;
    private int _streamLength;
    public int StreamLength { get; }
    public FontStreamContext(Uri source, int streamLength);
    public FontStreamContext(GlyphTypeface source);
    private static FontStreamContext();
    public int get_StreamLength();
    public void Close();
    public Stream GetStream();
    public void UpdateStreamLength();
    public bool Equals(FontStreamContext modreq(System.Runtime.CompilerServices.IsImplicitlyDereferenced) otherContext);
}
internal class Microsoft.Internal.GDIExporter.GdiFontResourceSafeHandle : SafeHandle {
    protected DateTime m_timeStamp;
    public DateTime TimeStamp { get; }
    public bool IsInvalid { get; }
    [ReliabilityContractAttribute("3", "2")]
public virtual bool get_IsInvalid();
    public DateTime get_TimeStamp();
    [ReliabilityContractAttribute("3", "2")]
protected virtual bool ReleaseHandle();
}
internal class Microsoft.Internal.GDIExporter.GdiGeometryConverter : CapacityStreamGeometryContext {
    private Matrix _transform;
    private bool _stroking;
    private int _resolutionScale;
    private bool _isValid;
    private bool _forceEmpty;
    private PointI[] _points;
    private Byte[] _types;
    private int _pointCount;
    private int _figureCount;
    private Point _lastPoint;
    private int _bezierIndex;
    private bool _figureVisible;
    private bool _figureClosed;
    private int _figureStartIndex;
    private Point _figureStartPoint;
    private bool _figureHasGaps;
    public int ResolutionScale { get; }
    public int FigureCount { get; }
    public int PointCount { get; }
    public Byte[] Types { get; }
    public PointI[] Points { get; }
    private GdiGeometryConverter(Matrix transform, bool stroking, int resolutionScale, int estimatedPointCount);
    public static GdiGeometryConverter Convert(GeometryProxy modreq(System.Runtime.CompilerServices.IsImplicitlyDereferenced) geometry, Matrix geometryToWorldTransform, bool stroking);
    public PointI[] get_Points();
    public Byte[] get_Types();
    public int get_PointCount();
    public int get_FigureCount();
    public int get_ResolutionScale();
    private static int GetResolutionScale(GeometryProxy modreq(System.Runtime.CompilerServices.IsImplicitlyDereferenced) geometry);
    private void CloseGeometry();
    private void FailGeometry();
    private void ForceGeometryEmpty();
    private void RealBeginFigure(Point point, bool filled, bool closed);
    private void EndFigure();
    private bool BeginSegment(bool stroked, bool smoothJoin, Point endPoint);
    private bool Colinear(int dx, int dy, int p1, int p2);
    private int AddPoint(Point point, byte type);
    private void RemoveLastPoint();
    private Point GetLastPoint();
    private void AddQuadratic(Point p1, Point p2);
    private void AddArc(Point point, Size size, double rotationAngle, bool largeArc, SweepDirection sweepDirection);
    public virtual void BeginFigure(Point startPoint, bool isFilled, bool isClosed);
    public virtual void LineTo(Point point, bool isStroked, bool isSmoothJoin);
    public virtual void QuadraticBezierTo(Point point1, Point point2, bool isStroked, bool isSmoothJoin);
    public virtual void BezierTo(Point point1, Point point2, Point point3, bool isStroked, bool isSmoothJoin);
    public virtual void PolyLineTo(IList`1<Point> points, bool isStroked, bool isSmoothJoin);
    public virtual void PolyQuadraticBezierTo(IList`1<Point> points, bool isStroked, bool isSmoothJoin);
    public virtual void PolyBezierTo(IList`1<Point> points, bool isStroked, bool isSmoothJoin);
    public virtual void ArcTo(Point point, Size size, double rotationAngle, bool isLargeArc, SweepDirection sweepDirection, bool isStroked, bool isSmoothJoin);
    public virtual void SetClosedState(bool closed);
    public virtual void SetFigureCount(int figureCount);
    public virtual void SetSegmentCount(int segmentCount);
}
internal class Microsoft.Internal.GDIExporter.GdiSafeDCHandle : GdiSafeHandle {
    [ReliabilityContractAttribute("3", "2")]
protected virtual bool ReleaseHandle();
}
internal class Microsoft.Internal.GDIExporter.GdiSafeHandle : SafeHandle {
    public bool IsInvalid { get; }
    [ReliabilityContractAttribute("3", "2")]
public virtual bool get_IsInvalid();
    [ReliabilityContractAttribute("3", "2")]
protected virtual bool ReleaseHandle();
}
internal class Microsoft.Internal.GDIExporter.GeometryProxy : object {
    private Geometry _geometry;
    private bool _dataValid;
    private PathGeometryData _data;
    private int _estimatedPoints;
    private bool _hasCurveValid;
    private bool _hasCurve;
    private bool _isRectangleValid;
    private bool _isRectangle;
    public Geometry Geometry { get; }
    public GeometryProxy(Geometry geometry);
    public void Attach(Geometry geometry);
    public Geometry get_Geometry();
    public PathGeometry GetPathGeometry();
    public PathGeometryData& GetGeometryData();
    public Rect GetBounds(Pen pen);
    public bool GetDrawBounds(Pen pen, Matrix transform, Int32Rect& bounds);
    public int GetPointCount();
    public bool MayHaveCurves();
    public FillRule GetFillRule();
    public bool IsRectangle();
    private void ConvertToPathGeometry();
    private bool DoesGetDataHavePathGeometryConversion();
}
internal class Microsoft.Internal.GDIExporter.GeometryVisual : DrawingVisual {
    public GeometryVisual(int bitmapWidth, int bitmapHeight, Brush brush, Rect rect, Transform transform);
}
[UnsafeValueTypeAttribute]
[NativeCppClassAttribute]
internal class Microsoft.Internal.GDIExporter.LOGPEN : ValueType {
    private long <alignment member>;
}
[NativeCppClassAttribute]
internal enum Microsoft.Internal.GDIExporter.MatrixRotate : Enum {
    public int value__;
}
internal class Microsoft.Internal.GDIExporter.PaletteSorter : object {
    protected int Size;
    public UInt32 modopt(System.Runtime.CompilerServices.IsLong)[] ColorTable;
    public int IndexUsed;
    public bool AddColor(UInt32 modopt(System.Runtime.CompilerServices.IsLong) color);
    public int Find(UInt32 modopt(System.Runtime.CompilerServices.IsLong) color);
    public bool ProcessScanline(Byte[] scan, int offset, int width, int pixelsize);
    protected int Search(int start, int end, UInt32 modopt(System.Runtime.CompilerServices.IsLong) color);
}
internal class Microsoft.Internal.GDIExporter.PointI : ValueType {
    public int x;
    public int y;
}
internal class Microsoft.Internal.GDIExporter.RenderStrokePieceCallback : MulticastDelegate {
    public RenderStrokePieceCallback(object A_0, IntPtr A_1);
    public sealed virtual Int32 modopt(System.Runtime.CompilerServices.IsLong) Invoke(GeometryProxy modreq(System.Runtime.CompilerServices.IsImplicitlyDereferenced) geometry, Pen pen, Brush strokeBrush);
    public sealed virtual IAsyncResult BeginInvoke(GeometryProxy modreq(System.Runtime.CompilerServices.IsImplicitlyDereferenced) geometry, Pen pen, Brush strokeBrush, AsyncCallback callback, object obj);
    public sealed virtual Int32 modopt(System.Runtime.CompilerServices.IsLong) EndInvoke(GeometryProxy modreq(System.Runtime.CompilerServices.IsImplicitlyDereferenced) __unnamed000, IAsyncResult result);
}
internal class Microsoft.Internal.GDIExporter.StrokeGeometrySplitter : CapacityStreamGeometryContext {
    public static Int32 modopt(System.Runtime.CompilerServices.IsConst) MaximumPieceRawPointCount;
    private Matrix _transform;
    private RenderStrokePieceCallback _callback;
    private Pen _callbackPen;
    private Brush _callbackBrush;
    private Int32 modopt(System.Runtime.CompilerServices.IsLong) _callbackResult;
    private StreamGeometry _geometry;
    private StreamGeometryContext _context;
    private int _rawPointCount;
    private Point _lastPoint;
    private bool _figureClosed;
    private Point _figureStartPoint;
    private StrokeGeometrySplitter(Matrix transform, RenderStrokePieceCallback callback, Pen callbackPen, Brush callbackBrush);
    private static StrokeGeometrySplitter();
    public static Int32 modopt(System.Runtime.CompilerServices.IsLong) RenderSubstrokes(GeometryProxy modreq(System.Runtime.CompilerServices.IsImplicitlyDereferenced) geometry, RenderStrokePieceCallback callback, Pen callbackPen, Brush callbackBrush);
    private void CloseGeometry();
    private void BeginPiece(Point pieceStartPoint);
    private void EndPiece();
    private void RealBeginFigure(Point startPoint, bool isClosed);
    private void EndFigure();
    private bool BeginSegment(Point lastPoint, bool isStroked);
    private bool ShouldStartPiece();
    private void AddRawPoints(int count);
    private void AddPoints(int count, int groupSize, int rawPointsPerGroup);
    private int GetAvailablePointCount(int groupSize, int rawPointsPerGroup);
    private static List`1<Point> GetSubPoints(IList`1<Point> points, int startIndex, int count);
    private void PolySegmentTo(IList`1<Point> points, bool isStroked, bool isSmoothJoin, PolySegmentType segmentType);
    public virtual void BeginFigure(Point startPoint, bool isFilled, bool isClosed);
    public virtual void LineTo(Point point, bool isStroked, bool isSmoothJoin);
    public virtual void QuadraticBezierTo(Point point1, Point point2, bool isStroked, bool isSmoothJoin);
    public virtual void BezierTo(Point point1, Point point2, Point point3, bool isStroked, bool isSmoothJoin);
    public virtual void PolyLineTo(IList`1<Point> points, bool isStroked, bool isSmoothJoin);
    public virtual void PolyQuadraticBezierTo(IList`1<Point> points, bool isStroked, bool isSmoothJoin);
    public virtual void PolyBezierTo(IList`1<Point> points, bool isStroked, bool isSmoothJoin);
    public virtual void ArcTo(Point point, Size size, double rotationAngle, bool isLargeArc, SweepDirection sweepDirection, bool isStroked, bool isSmoothJoin);
    public virtual void SetClosedState(bool closed);
    public virtual void SetFigureCount(int figureCount);
    public virtual void SetSegmentCount(int segmentCount);
}
[NativeCppClassAttribute]
[UnsafeValueTypeAttribute]
internal class Microsoft.Internal.GDIExporter.tagMXDWEscape : ValueType {
    private int <alignment member>;
}
internal class Microsoft.Internal.GDIExporter.TrueTypeFont : ValueType {
    private Byte[] m_fontdata;
    private UInt32 m_faceIndex;
    private UInt32 m_size;
    private static Random s_random;
    private static int s_order;
    public TrueTypeFont(Byte[] fontdata, UInt32 faceIndex);
    private static TrueTypeFont();
    public string ReplaceFontName();
    private string ProcessNameTable(UInt32 pos);
    private void GenerateFamilyNameFromNametable(UInt32 nametablepos, Char[]& familyName, Char[]& newFamilyName);
    private int ReplaceAll(UInt32 nametablepos, Char[] baseEnglishFamilyName, Char[] newFamilyName);
    private bool ReplaceFamilyName(UInt32 namepos, UInt32 length, Char[] newFamilyName, Encoding encoding);
    private bool ReplaceFullFamilyName(UInt32 namepos, UInt32 length, Char[] familyName, Char[] newFamilyName, Encoding encoding);
    private Char[] GenerateRandomName(UInt32 length);
    private bool AreCharsEqual(Char[] a, Char[] b, UInt32 length);
    private UInt32 CheckSum(UInt32 pos, UInt32 len);
    private ushort read16(UInt32 offset);
    private UInt32 read32(UInt32 offset);
    private void write16(UInt32 offset, ushort value);
    private void write32(UInt32 offset, UInt32 value);
    private void writeString(UInt32 offset, UInt32 byteLength, Char[] value, Encoding encoding);
    private bool writeString(UInt32 offset, UInt32 byteLength, string value, Encoding encoding);
    private void readString(UInt32 offset, UInt32 byteLength, Char[]& value, Encoding encoding);
}
internal abstract class Microsoft.Internal.GDIExporter.UnsafeNativeMethods : object {
    internal static int DeleteObject(Void* hObject);
    internal static int DeleteDC(Void* hObject);
    internal static int RemoveFontMemResourceEx(Void* hFont);
}
internal class MS.Internal.PrintWin32Thunk.AttributeNameToInfoLevelMapping.DriverThunk.DriverThunkingProfile : object {
    private static Hashtable attributeMap;
    private static InfoLevelMask[] levelMaskTable;
    private static DriverThunkingProfile();
    public sealed virtual InfoLevelCoverageList GetCoverageList(InfoLevelMask coverageMask);
    public static Hashtable GetStaticAttributeMap();
    public static ulong ReconcileMask(ulong coverageMask);
    private static void RegisterAttributeMap();
}
internal class MS.Internal.PrintWin32Thunk.AttributeNameToInfoLevelMapping.DriverThunk.Win32DriverThunk : InfoLevelThunk {
    public Win32DriverThunk(UInt32 level, InfoLevelMask levelMask);
    public virtual void CallWin32ApiToGetPrintInfoData(PrinterThunkHandler printThunkHandler, object cookie);
    public virtual UInt32 CallWin32ApiToEnumeratePrintInfoData(string serverName, UInt32 flags);
    public virtual void BeginCallWin32ApiToSetPrintInfoData(PrinterThunkHandler printThunkHandler);
    public virtual void EndCallWin32ApiToSetPrintInfoData(PrinterThunkHandler printThunkHandler);
    public virtual bool SetValueFromAttributeValue(string valueName, object value);
}
internal class MS.Internal.PrintWin32Thunk.AttributeNameToInfoLevelMapping.InfoAttributeData : object {
    public InfoLevelMask mask;
    public bool isSingleLevelCovered;
    public InfoAttributeData(InfoLevelMask inMask, bool b);
}
internal class MS.Internal.PrintWin32Thunk.AttributeNameToInfoLevelMapping.InfoLevelCoverageList : object {
    private ArrayList coverageList;
    private bool isDisposed;
    private UInt32 objectCount;
    public UInt32 Count { get; public set; }
    public void Release();
    public void Add(InfoLevelThunk profile);
    public InfoLevelThunk GetInfoLevelThunk(ulong mask);
    public IEnumerator GetEnumerator();
    public void set_Count(UInt32 value);
    public UInt32 get_Count();
}
[FlagsAttribute]
internal enum MS.Internal.PrintWin32Thunk.AttributeNameToInfoLevelMapping.InfoLevelMask : Enum {
    public int value__;
    public static InfoLevelMask NoLevel;
    public static InfoLevelMask LevelOne;
    public static InfoLevelMask LevelTwo;
    public static InfoLevelMask LevelThree;
    public static InfoLevelMask LevelFour;
    public static InfoLevelMask LevelFive;
    public static InfoLevelMask LevelSix;
    public static InfoLevelMask LevelSeven;
    public static InfoLevelMask LevelEight;
    public static InfoLevelMask LevelNine;
}
internal abstract class MS.Internal.PrintWin32Thunk.AttributeNameToInfoLevelMapping.InfoLevelThunk : object {
    private UInt32 level;
    private InfoLevelMask levelMask;
    private IPrinterInfo printInfoData;
    private bool succeeded;
    private bool isDisposed;
    public bool Succeeded { get; protected set; }
    public IPrinterInfo PrintInfoData { get; public set; }
    public InfoLevelMask LevelMask { get; }
    public UInt32 Level { get; }
    protected InfoLevelThunk(UInt32 infoLevel, InfoLevelMask infoLevelMask);
    public UInt32 get_Level();
    public InfoLevelMask get_LevelMask();
    public IPrinterInfo get_PrintInfoData();
    public void set_PrintInfoData(IPrinterInfo printerInfo);
    public bool get_Succeeded();
    protected void set_Succeeded(bool value);
    public void Release();
    public abstract virtual void CallWin32ApiToGetPrintInfoData(PrinterThunkHandler printThunkHandler, object cookie);
    public abstract virtual void BeginCallWin32ApiToSetPrintInfoData(PrinterThunkHandler printThunkHandler);
    public abstract virtual void EndCallWin32ApiToSetPrintInfoData(PrinterThunkHandler printThunkHandler);
    public virtual object GetValueFromInfoData(string valueName, UInt32 index);
    public virtual object GetValueFromInfoData(string valueName);
    public virtual bool SetValueFromAttributeValue(string valueName, object value);
}
internal interface MS.Internal.PrintWin32Thunk.AttributeNameToInfoLevelMapping.IThunkingProfile {
    public abstract virtual InfoLevelCoverageList GetCoverageList(InfoLevelMask A_0);
}
internal class MS.Internal.PrintWin32Thunk.AttributeNameToInfoLevelMapping.JobThunk.JobThunkingProfile : object {
    private static Hashtable attributeMap;
    private static InfoLevelMask[] levelMaskTable;
    private static String[] attributeNames;
    private static InfoAttributeData[] attributeLevelCoverage;
    private static JobThunkingProfile();
    public sealed virtual InfoLevelCoverageList GetCoverageList(InfoLevelMask coverageMask);
    public static Hashtable GetStaticAttributeMap();
    public static ulong ReconcileMask(ulong coverageMask);
    private static void RegisterAttributeMap();
}
internal class MS.Internal.PrintWin32Thunk.AttributeNameToInfoLevelMapping.JobThunk.Win32JobThunk : InfoLevelThunk {
    public Win32JobThunk(UInt32 level, InfoLevelMask levelMask);
    public virtual void CallWin32ApiToGetPrintInfoData(PrinterThunkHandler printThunkHandler, object cookie);
    public virtual UInt32 CallWin32ApiToEnumeratePrintInfoData(PrinterThunkHandler printThunkHandler, UInt32 firstJobId, UInt32 numberOfJobs);
    public virtual void BeginCallWin32ApiToSetPrintInfoData(PrinterThunkHandler printThunkHandler);
    public virtual void EndCallWin32ApiToSetPrintInfoData(PrinterThunkHandler printThunkHandler);
    public virtual bool SetValueFromAttributeValue(string valueName, object value);
}
internal class MS.Internal.PrintWin32Thunk.AttributeNameToInfoLevelMapping.PrintQueueThunk.PrinterThunkingProfile : object {
    private static Hashtable getAttributeMap;
    private static Hashtable setAttributeMap;
    private static Hashtable enumAttributeMap;
    private static String[] attributeNames;
    private static InfoAttributeData[] attributeLevelCoverageForGetOperations;
    private static InfoAttributeData[] attributeLevelCoverageForEnumOperations;
    private static InfoAttributeData[] attributeLevelCoverageForSetOperations;
    private static InfoLevelMask[] levelMaskTable;
    private static PrinterThunkingProfile();
    public static Hashtable GetStaticAttributeMapForGetOperations();
    public static Hashtable GetStaticAttributeMapForSetOperations();
    public static Hashtable GetStaticAttributeMapForEnumOperations();
    public sealed virtual InfoLevelCoverageList GetCoverageList(InfoLevelMask coverageMask);
    public static ulong ReconcileMask(ulong coverageMask);
    private static void RegisterAttributeMap();
}
internal class MS.Internal.PrintWin32Thunk.AttributeNameToInfoLevelMapping.PrintQueueThunk.Win32PrinterThunk : InfoLevelThunk {
    public Win32PrinterThunk(UInt32 infoLevel, InfoLevelMask infoCoverageMask);
    public virtual void CallWin32ApiToGetPrintInfoData(PrinterThunkHandler printThunkHandler, object cookie);
    public virtual UInt32 CallWin32ApiToEnumeratePrintInfoData(string serverName, UInt32 flags);
    public virtual void BeginCallWin32ApiToSetPrintInfoData(PrinterThunkHandler printThunkHandler);
    public virtual void EndCallWin32ApiToSetPrintInfoData(PrinterThunkHandler printThunkHandler);
}
internal class MS.Internal.PrintWin32Thunk.AttributeNameToInfoLevelMapping.TypeToLevelMap : object {
    private static Hashtable perTypeAttributesMapForGetOperations;
    private static Hashtable perTypeAttributesMapForSetOperations;
    private static Hashtable perTypeAttributesMapForEnumOperations;
    private static Hashtable perTypeReconcileMap;
    private static TypeToLevelMap();
    public static void BuildAttributesMapForGetOperations();
    public static void BuildAttributesMapForSetOperations();
    public static void BuildAttributesMapForEnumOperations();
    public static void BuildReconcileMask();
    public static GetStaticAttributeMap GetStaticAttributesMapPerTypeForGetOperations(Type printingType);
    public static GetStaticAttributeMap GetStaticAttributesMapPerTypeForEnumOperations(Type printingType);
    public static GetStaticAttributeMap GetStaticAttributesMapPerTypeForSetOperations(Type printingType);
    public static ReconcileMask GetStaticReconcileMaskPerType(Type printingType);
    public static IThunkingProfile GetThunkProfileForPrintType(Type printingType);
    public static InfoLevelMask GetCoverageMaskForPropertiesFilter(Type printingType, OperationType operationType, String[] propertiesFilter);
    public static Hashtable GetAttributeMapPerType(Type printingType, OperationType operationType);
    public static ulong InvokeReconcileMaskPerType(Type printingType, InfoLevelMask mask);
}
internal class MS.Internal.PrintWin32Thunk.AttributeValueInteropHandler : object {
    private static Hashtable unmanagedToManagedTypeMap;
    private static Hashtable managedToUnmanagedTypeMap;
    private static Hashtable attributeValueToUnmanagedTypeMap;
    private static Hashtable unmanagedPropertyToObjectDelegateMap;
    private static AttributeValueInteropHandler modreq(System.Runtime.CompilerServices.IsVolatile) value;
    private static Object modreq(System.Runtime.CompilerServices.IsVolatile) syncRoot;
    private static Type[] PrintSystemAttributePrimitiveTypes;
    private static Type[] PrintSystemAttributeValueTypes;
    private static GetValueFromUnmanagedValue[] GetValueFromUnmanagedValueDelegateTable;
    private static object SyncRoot { get; }
    public static AttributeValueInteropHandler Value { get; }
    private static AttributeValueInteropHandler();
    public IntPtr BuildUnmanagedPrintPropertiesCollection(PrintPropertyDictionary collection);
    public PrintPropertyDictionary BuildManagedPrintPropertiesCollection(IntPtr unmanagedCollection);
    public static void FreeUnmanagedPrintPropertiesCollection(IntPtr unmanagedCollection);
    public void CopyManagedPrintPropertiesCollection(IntPtr unmanagedCollection, PrintSystemObject printSystemObject);
    private IntPtr AllocateUnmanagedPrintPropertiesCollection(PrintPropertyDictionary managedCollection);
    public static IntPtr AllocateUnmanagedPrintPropertiesCollection(int propertyCount);
    public static void SetValue(IntPtr unmanagedCollectionPtr, string propertyName, UInt32 index, object value);
    public static void SetValue(IntPtr unmanagedCollectionPtr, string propertyName, UInt32 index, Type type);
    public static object GetValue(IntPtr unmanagedCollectionPtr, string propertyName, Type type, Boolean& isPropertyPresent);
    public static AttributeValueInteropHandler get_Value();
    private static object get_SyncRoot();
    private static object GetString(PrintPropertyValue unmanagedPropertyValue);
    private static object GetInt32(PrintPropertyValue unmanagedPropertyValue);
    private static object GetStream(PrintPropertyValue unmanagedPropertyValue);
    private static object GetDateTime(PrintPropertyValue unmanagedPropertyValue);
    private static void RegisterStaticMaps();
    private void AssignUnmanagedPrintPropertyValue(PrintNamedProperty* unmanagedPropertyValue, PrintProperty managedAttributeValue);
}
internal class MS.Internal.PrintWin32Thunk.DeviceMode : object {
    private Byte[] data;
    private UInt32 size;
    public Byte[] Data { get; }
    public DeviceMode(Void* devModeUnmanaged);
    public DeviceMode(Byte[] devMode);
    public Byte[] get_Data();
}
internal class MS.Internal.PrintWin32Thunk.DirectInteropForJob.JobInfoOne : object {
    private static Hashtable getAttributeMap;
    private SafeMemoryHandle jobInfoOneSafeHandle;
    private bool isDisposed;
    private UInt32 jobsCount;
    public UInt32 Count { get; }
    public SafeMemoryHandle Win32SafeHandle { get; }
    public JobInfoOne(SafeMemoryHandle unmanagedPrinterInfo, UInt32 count);
    private static JobInfoOne();
    public virtual void Release();
    public virtual SafeMemoryHandle get_Win32SafeHandle();
    public virtual object GetValueFromName(string name, UInt32 index);
    public object GetValueFromName(string name);
    public virtual bool SetValueFromName(string name, object value);
    public virtual UInt32 get_Count();
    private static void RegisterAttributeMaps();
    private static object GetJobId(_JOB_INFO_1W* unmanagedPrinterInfo);
    private static object GetServerName(_JOB_INFO_1W* unmanagedPrinterInfo);
    private static object GetPrinterName(_JOB_INFO_1W* unmanagedPrinterInfo);
    private static object GetUserNameW(_JOB_INFO_1W* unmanagedPrinterInfo);
    private static object GetDocumentName(_JOB_INFO_1W* unmanagedPrinterInfo);
    private static object GetDatatype(_JOB_INFO_1W* unmanagedPrinterInfo);
    private static object GetStatusString(_JOB_INFO_1W* unmanagedPrinterInfo);
    private static object GetStatus(_JOB_INFO_1W* unmanagedPrinterInfo);
    private static object GetPriority(_JOB_INFO_1W* unmanagedPrinterInfo);
    private static object GetPosition(_JOB_INFO_1W* unmanagedPrinterInfo);
    private static object GetTotalPages(_JOB_INFO_1W* unmanagedPrinterInfo);
    private static object GetPagesPrinted(_JOB_INFO_1W* unmanagedPrinterInfo);
    private static object GetTimeSubmitted(_JOB_INFO_1W* unmanagedPrinterInfo);
}
internal class MS.Internal.PrintWin32Thunk.DirectInteropForJob.JobInfoTwo : object {
    private static Hashtable getAttributeMap;
    private SafeMemoryHandle jobInfoTwoSafeHandle;
    private bool isDisposed;
    private UInt32 jobsCount;
    public UInt32 Count { get; }
    public SafeMemoryHandle Win32SafeHandle { get; }
    public JobInfoTwo(SafeMemoryHandle unmanagedPrinterInfo, UInt32 count);
    private static JobInfoTwo();
    public virtual void Release();
    public virtual SafeMemoryHandle get_Win32SafeHandle();
    public virtual object GetValueFromName(string name, UInt32 index);
    public object GetValueFromName(string name);
    public virtual bool SetValueFromName(string name, object value);
    public virtual UInt32 get_Count();
    private static void RegisterAttributeMaps();
    private static object GetJobId(_JOB_INFO_2W* unmanagedPrinterInfo);
    private static object GetServerName(_JOB_INFO_2W* unmanagedPrinterInfo);
    private static object GetPrinterName(_JOB_INFO_2W* unmanagedPrinterInfo);
    private static object GetUserNameW(_JOB_INFO_2W* unmanagedPrinterInfo);
    private static object GetDocumentName(_JOB_INFO_2W* unmanagedPrinterInfo);
    private static object GetDatatype(_JOB_INFO_2W* unmanagedPrinterInfo);
    private static object GetStatusString(_JOB_INFO_2W* unmanagedPrinterInfo);
    private static object GetStatus(_JOB_INFO_2W* unmanagedPrinterInfo);
    private static object GetPriority(_JOB_INFO_2W* unmanagedPrinterInfo);
    private static object GetPosition(_JOB_INFO_2W* unmanagedPrinterInfo);
    private static object GetTotalPages(_JOB_INFO_2W* unmanagedPrinterInfo);
    private static object GetPagesPrinted(_JOB_INFO_2W* unmanagedPrinterInfo);
    private static object GetTimeSubmitted(_JOB_INFO_2W* unmanagedPrinterInfo);
    private static object GetSecurityDescriptor(_JOB_INFO_2W* unmanagedPrinterInfo);
    private static object GetNotifyName(_JOB_INFO_2W* unmanagedJobInfo);
    private static object GetQueueDriverName(_JOB_INFO_2W* unmanagedJobInfo);
    private static object GetPrintProcessor(_JOB_INFO_2W* unmanagedJobInfo);
    private static object GetPrintProcessorParameters(_JOB_INFO_2W* unmanagedJobInfo);
    private static object GetStartTime(_JOB_INFO_2W* unmanagedJobInfo);
    private static object GetUntilTime(_JOB_INFO_2W* unmanagedJobInfo);
    private static object GetTimeSinceSubmitted(_JOB_INFO_2W* unmanagedJobInfo);
    private static object GetSize(_JOB_INFO_2W* unmanagedJobInfo);
    private static object GetDevMode(_JOB_INFO_2W* unmanagedJobInfo);
}
internal class MS.Internal.PrintWin32Thunk.DirectInteropForPrintQueue.PrinterInfoEight : object {
    private SafeMemoryHandle printerInfoEightSafeHandle;
    private bool objectOwnsInternalUnmanagedMembers;
    private UInt32 printersCount;
    public UInt32 Count { get; }
    public SafeMemoryHandle Win32SafeHandle { get; }
    public PrinterInfoEight(SafeMemoryHandle unmanagedPrinterInfo, UInt32 count);
    public sealed virtual void Release();
    public virtual SafeMemoryHandle get_Win32SafeHandle();
    public virtual UInt32 get_Count();
    public sealed virtual object GetValueFromName(string valueName, UInt32 index);
    public sealed virtual object GetValueFromName(string valueName);
    public sealed virtual bool SetValueFromName(string valueName, object value);
}
internal class MS.Internal.PrintWin32Thunk.DirectInteropForPrintQueue.PrinterInfoFiveGetter : object {
    private static Hashtable getAttributeMap;
    private SafeMemoryHandle printerInfoFiveSafeHandle;
    private UInt32 printersCount;
    public SafeMemoryHandle Win32SafeHandle { get; }
    public UInt32 Count { get; }
    public PrinterInfoFiveGetter(SafeMemoryHandle unmanagedPrinterInfo, UInt32 count);
    private static PrinterInfoFiveGetter();
    public sealed virtual void Release();
    public virtual UInt32 get_Count();
    public virtual SafeMemoryHandle get_Win32SafeHandle();
    public sealed virtual object GetValueFromName(string valueName, UInt32 index);
    public sealed virtual bool SetValueFromName(string valueName, object value);
    private static void RegisterAttributeMaps();
    private static object GetAttributes(_PRINTER_INFO_5W* unmanagedPrinterInfo);
    private static object GetPortName(_PRINTER_INFO_5W* unmanagedPrinterInfo);
    private static object GetPrinterName(_PRINTER_INFO_5W* unmanagedPrinterInfo);
    private static object GetDeviceNotSelectedTimeout(_PRINTER_INFO_5W* unmanagedPrinterInfo);
    private static object GetTransmissionRetryTimeout(_PRINTER_INFO_5W* unmanagedPrinterInfo);
}
internal class MS.Internal.PrintWin32Thunk.DirectInteropForPrintQueue.PrinterInfoFiveSetter : object {
    private static Hashtable setAttributeMap;
    private IPrinterInfo printerInfo;
    private SafeMemoryHandle[] internalMembersList;
    private int internalMembersIndex;
    public SafeMemoryHandle Win32SafeHandle { get; }
    public UInt32 Count { get; }
    public PrinterInfoFiveSetter(PrinterThunkHandler printThunkHandle);
    private static PrinterInfoFiveSetter();
    public sealed virtual void Release();
    public virtual UInt32 get_Count();
    public virtual SafeMemoryHandle get_Win32SafeHandle();
    public sealed virtual object GetValueFromName(string valueName, UInt32 index);
    public sealed virtual bool SetValueFromName(string valueName, object value);
    private static void RegisterAttributeMaps();
    private static IntPtr SetPrinterName(IntPtr valueName, object value);
    private static IntPtr SetPortName(IntPtr valueName, object value);
    private static IntPtr SetAttributes(IntPtr valueName, object value);
    private static IntPtr SetTransmissionRetryTimeout(IntPtr valueName, object value);
    private static IntPtr SetDeviceNotSelectedTimeout(IntPtr printerInfoTwoBuffer, object value);
}
internal class MS.Internal.PrintWin32Thunk.DirectInteropForPrintQueue.PrinterInfoFourGetter : object {
    private static Hashtable getAttributeMap;
    private SafeMemoryHandle printerInfoFourSafeHandle;
    private UInt32 printersCount;
    public UInt32 Count { get; }
    public SafeMemoryHandle Win32SafeHandle { get; }
    public PrinterInfoFourGetter(SafeMemoryHandle unmanagedPrinterInfo, UInt32 count);
    private static PrinterInfoFourGetter();
    public sealed virtual void Release();
    public virtual SafeMemoryHandle get_Win32SafeHandle();
    public virtual UInt32 get_Count();
    public sealed virtual object GetValueFromName(string valueName, UInt32 index);
    public object GetValueFromName(string valueName);
    public sealed virtual bool SetValueFromName(string valueName, object value);
    private static void RegisterAttributeMaps();
    private static object GetAttributes(_PRINTER_INFO_4W* unmanagedPrinterInfo);
    private static object GetServerName(_PRINTER_INFO_4W* unmanagedPrinterInfo);
    private static object GetPrinterName(_PRINTER_INFO_4W* unmanagedPrinterInfo);
}
internal class MS.Internal.PrintWin32Thunk.DirectInteropForPrintQueue.PrinterInfoFourSetter : object {
    private static Hashtable setAttributeMap;
    private IPrinterInfo printerInfo;
    private SafeMemoryHandle[] internalMembersList;
    private int internalMembersIndex;
    public UInt32 Count { get; }
    public SafeMemoryHandle Win32SafeHandle { get; }
    public PrinterInfoFourSetter(PrinterThunkHandler printerThunkHandle);
    private static PrinterInfoFourSetter();
    public sealed virtual void Release();
    public virtual SafeMemoryHandle get_Win32SafeHandle();
    public virtual UInt32 get_Count();
    public sealed virtual object GetValueFromName(string valueName, UInt32 index);
    public sealed virtual bool SetValueFromName(string valueName, object value);
    private static void RegisterAttributeMaps();
    private static IntPtr SetServerName(IntPtr valueName, object value);
    private static IntPtr SetPrinterName(IntPtr printerInfoTwoBuffer, object value);
    private static IntPtr SetAttributes(IntPtr printerInfoTwoBuffer, object value);
}
internal class MS.Internal.PrintWin32Thunk.DirectInteropForPrintQueue.PrinterInfoNine : object {
    private SafeMemoryHandle printerInfoNineSafeHandle;
    private bool objectOwnsInternalUnmanagedMembers;
    private UInt32 printersCount;
    public SafeMemoryHandle Win32SafeHandle { get; }
    public UInt32 Count { get; }
    public PrinterInfoNine(SafeMemoryHandle unmanagedPrinterInfo, UInt32 count);
    public sealed virtual void Release();
    public virtual UInt32 get_Count();
    public virtual SafeMemoryHandle get_Win32SafeHandle();
    public sealed virtual object GetValueFromName(string valueName, UInt32 index);
    public object GetValueFromName(string valueName);
    public sealed virtual bool SetValueFromName(string valueName, object value);
}
internal class MS.Internal.PrintWin32Thunk.DirectInteropForPrintQueue.PrinterInfoOne : object {
    private static Hashtable getAttributeMap;
    private SafeMemoryHandle printerInfoOneSafeHandle;
    private UInt32 printersCount;
    public SafeMemoryHandle Win32SafeHandle { get; }
    public UInt32 Count { get; }
    public PrinterInfoOne(SafeMemoryHandle unmanagedPrinterInfo, UInt32 count);
    private static PrinterInfoOne();
    public virtual void Release();
    public virtual UInt32 get_Count();
    public virtual SafeMemoryHandle get_Win32SafeHandle();
    public virtual object GetValueFromName(string valueName, UInt32 index);
    public object GetValueFromName(string valueName);
    public virtual bool SetValueFromName(string valueName, object value);
    private static void RegisterAttributeMaps();
    private static object GetComment(_PRINTER_INFO_1W* unmanagedPrinterInfo);
    private static object GetDescription(_PRINTER_INFO_1W* unmanagedPrinterInfo);
    private static object GetFlags(_PRINTER_INFO_1W* unmanagedPrinterInfo);
}
internal class MS.Internal.PrintWin32Thunk.DirectInteropForPrintQueue.PrinterInfoSeven : object {
    private static Hashtable getAttributeMap;
    private static Hashtable setAttributeMap;
    private SafeMemoryHandle printerInfoSevenSafeHandle;
    private bool objectOwnsInternalUnmanagedMembers;
    private UInt32 printersCount;
    public SafeMemoryHandle Win32SafeHandle { get; }
    public UInt32 Count { get; }
    public PrinterInfoSeven(SafeMemoryHandle unmanagedPrinterInfo, UInt32 count);
    private static PrinterInfoSeven();
    public sealed virtual void Release();
    public virtual UInt32 get_Count();
    public virtual SafeMemoryHandle get_Win32SafeHandle();
    public sealed virtual object GetValueFromName(string valueName, UInt32 index);
    public sealed virtual object GetValueFromName(string valueName);
    public sealed virtual bool SetValueFromName(string valueName, object value);
    private static void RegisterAttributeMaps();
    private static object GetObjectGUID(_PRINTER_INFO_7W* unmanagedPrinterInfo);
    private static object GetAction(_PRINTER_INFO_7W* unmanagedPrinterInfo);
    private static bool SetObjectGUID(IntPtr printerInfoSevenBuffer, object value);
    private static bool SetAction(IntPtr printerInfoSevenBuffer, object value);
}
internal class MS.Internal.PrintWin32Thunk.DirectInteropForPrintQueue.PrinterInfoSix : object {
    private SafeMemoryHandle printerInfoSixSafeHandle;
    private UInt32 printersCount;
    public UInt32 Count { get; }
    public SafeMemoryHandle Win32SafeHandle { get; }
    public PrinterInfoSix(SafeMemoryHandle unmanagedPrinterInfo, UInt32 count);
    public sealed virtual void Release();
    public virtual SafeMemoryHandle get_Win32SafeHandle();
    public sealed virtual object GetValueFromName(string valueName, UInt32 index);
    public object GetValueFromName(string valueName);
    public sealed virtual bool SetValueFromName(string valueName, object value);
    public virtual UInt32 get_Count();
}
internal class MS.Internal.PrintWin32Thunk.DirectInteropForPrintQueue.PrinterInfoThree : object {
    private SafeMemoryHandle printerInfoThreeSafeHandle;
    private UInt32 printersCount;
    public UInt32 Count { get; }
    public SafeMemoryHandle Win32SafeHandle { get; }
    public PrinterInfoThree(SafeMemoryHandle unmanagedPrinterInfo, UInt32 count);
    public sealed virtual void Release();
    public virtual SafeMemoryHandle get_Win32SafeHandle();
    public virtual UInt32 get_Count();
    public sealed virtual object GetValueFromName(string valueName, UInt32 index);
    public object GetValueFromName(string valueName);
    public sealed virtual bool SetValueFromName(string valueName, object value);
}
internal class MS.Internal.PrintWin32Thunk.DirectInteropForPrintQueue.PrinterInfoTwoGetter : object {
    private static Hashtable getAttributeMap;
    private SafeMemoryHandle printerInfoTwoSafeHandle;
    private UInt32 printersCount;
    public SafeMemoryHandle Win32SafeHandle { get; }
    public UInt32 Count { get; }
    public PrinterInfoTwoGetter(SafeMemoryHandle unmanagedPrinterInfo, UInt32 count);
    private static PrinterInfoTwoGetter();
    public virtual void Release();
    public virtual UInt32 get_Count();
    public virtual SafeMemoryHandle get_Win32SafeHandle();
    public virtual object GetValueFromName(string valueName, UInt32 index);
    public object GetValueFromName(string valueName);
    public virtual bool SetValueFromName(string valueName, object value);
    private static void RegisterAttributeMaps();
    private static object GetServerName(_PRINTER_INFO_2W* unmanagedPrinterInfo);
    private static object GetPrinterName(_PRINTER_INFO_2W* unmanagedPrinterInfo);
    private static object GetShareName(_PRINTER_INFO_2W* unmanagedPrinterInfo);
    private static object GetPortName(_PRINTER_INFO_2W* unmanagedPrinterInfo);
    private static object GetDriverName(_PRINTER_INFO_2W* unmanagedPrinterInfo);
    private static object GetComment(_PRINTER_INFO_2W* unmanagedPrinterInfo);
    private static object GetLocation(_PRINTER_INFO_2W* unmanagedPrinterInfo);
    private static object GetDeviceMode(_PRINTER_INFO_2W* unmanagedPrinterInfo);
    private static object GetSeparatorFile(_PRINTER_INFO_2W* unmanagedPrinterInfo);
    private static object GetPrintProcessor(_PRINTER_INFO_2W* unmanagedPrinterInfo);
    private static object GetPrintProcessorDatatype(_PRINTER_INFO_2W* unmanagedPrinterInfo);
    private static object GetPrintProcessorParameters(_PRINTER_INFO_2W* unmanagedPrinterInfo);
    private static object GetSecurityDescriptor(_PRINTER_INFO_2W* unmanagedPrinterInfo);
    private static object GetAttributes(_PRINTER_INFO_2W* unmanagedPrinterInfo);
    private static object GetPriority(_PRINTER_INFO_2W* unmanagedPrinterInfo);
    private static object GetDefaultPriority(_PRINTER_INFO_2W* unmanagedPrinterInfo);
    private static object GetStartTime(_PRINTER_INFO_2W* unmanagedPrinterInfo);
    private static object GetUntilTime(_PRINTER_INFO_2W* unmanagedPrinterInfo);
    private static object GetStatus(_PRINTER_INFO_2W* unmanagedPrinterInfo);
    private static object GetAveragePPM(_PRINTER_INFO_2W* unmanagedPrinterInfo);
    private static object GetJobs(_PRINTER_INFO_2W* unmanagedPrinterInfo);
}
internal class MS.Internal.PrintWin32Thunk.DirectInteropForPrintQueue.PrinterInfoTwoSetter : object {
    private static Hashtable setAttributeMap;
    private SafeMemoryHandle win32PrinterInfoSafeHandle;
    private SafeMemoryHandle[] internalMembersList;
    private int internalMembersIndex;
    public SafeMemoryHandle Win32SafeHandle { get; }
    public UInt32 Count { get; }
    public PrinterInfoTwoSetter(PrinterThunkHandler printerHandler);
    private static PrinterInfoTwoSetter();
    public sealed virtual void Release();
    public virtual UInt32 get_Count();
    public virtual SafeMemoryHandle get_Win32SafeHandle();
    public sealed virtual object GetValueFromName(string valueName, UInt32 index);
    public sealed virtual bool SetValueFromName(string valueName, object value);
    private static void RegisterAttributeMaps();
    private static IntPtr SetServerName(IntPtr printerInfoTwoBuffer, object value);
    private static IntPtr SetPrinterName(IntPtr printerInfoTwoBuffer, object value);
    private static IntPtr SetShareName(IntPtr printerInfoTwoBuffer, object value);
    private static IntPtr SetPortName(IntPtr printerInfoTwoBuffer, object value);
    private static IntPtr SetDriverName(IntPtr printerInfoTwoBuffer, object value);
    private static IntPtr SetComment(IntPtr printerInfoTwoBuffer, object value);
    private static IntPtr SetLocation(IntPtr printerInfoTwoBuffer, object value);
    private static IntPtr SetSeparatorFile(IntPtr printerInfoTwoBuffer, object value);
    private static IntPtr SetPrintProcessor(IntPtr printerInfoTwoBuffer, object value);
    private static IntPtr SetPrintProcessorDatatype(IntPtr printerInfoTwoBuffer, object value);
    private static IntPtr SetPrintProcessorParameters(IntPtr printerInfoTwoBuffer, object value);
    private static IntPtr SetSecurityDescriptor(IntPtr printerInfoTwoBuffer, object value);
    private static IntPtr SetAttributes(IntPtr printerInfoTwoBuffer, object value);
    private static IntPtr SetPriority(IntPtr printerInfoTwoBuffer, object value);
    private static IntPtr SetDefaultPriority(IntPtr printerInfoTwoBuffer, object value);
    private static IntPtr SetStartTime(IntPtr printerInfoTwoBuffer, object value);
    private static IntPtr SetUntilTime(IntPtr printerInfoTwoBuffer, object value);
    private static IntPtr SetStatus(IntPtr printerInfoTwoBuffer, object value);
    private static IntPtr SetAveragePPM(IntPtr printerInfoTwoBuffer, object value);
    private static IntPtr SetJobs(IntPtr printerInfoTwoBuffer, object value);
}
internal class MS.Internal.PrintWin32Thunk.DocEventFilter : object {
    private XpsDocumentEventType[] eventsfilter;
    private static int supportedEventsCount;
    private static DocEventFilter();
    public bool IsXpsDocumentEventSupported(XpsDocumentEventType escape);
    public void SetUnsupportedXpsDocumentEvent(XpsDocumentEventType escape);
}
internal class MS.Internal.PrintWin32Thunk.DocInfoThree : object {
    public static string defaultDataType;
    public string docName;
    public string docOutputFile;
    public string docDataType;
    public int docFlags;
    public DocInfoThree(string name, string outputFile, string dataType, int flags);
    private static DocInfoThree();
}
internal class MS.Internal.PrintWin32Thunk.EnumDataThunkObject : object {
    private Type printingType;
    private bool isDisposed;
    private UInt32 win32EnumerationFlags;
    private UInt32 win32PrinterAttributeFlags;
    public EnumDataThunkObject(Type printingType);
    private void ~EnumDataThunkObject();
    public void GetPrintSystemValuesPerPrintQueues(PrintServer printServer, EnumeratedPrintQueueTypes[] flags, Queue`1<PrintQueue> printObjectsCollection, String[] propertyFilter);
    public void GetPrintSystemValuesPerPrintJobs(PrintQueue printQueue, Queue`1<PrintSystemJobInfo> printObjectsCollection, String[] propertyFilter, UInt32 firstJobIndex, UInt32 numberOfJobs);
    private UInt32 TweakTheFlags(UInt32 attributeFlags);
    private InfoLevelCoverageList BuildCoverageListAndEnumerateData(string serverName, UInt32 flags, InfoLevelMask mask);
    private InfoLevelCoverageList BuildJobCoverageListAndEnumerateData(PrinterThunkHandler printingHandler, InfoLevelMask mask, UInt32 firstJobIndex, UInt32 numberOfJobs);
    private void MapEnumeratePrinterQueuesFlags(EnumeratedPrintQueueTypes[] enumerateFlags);
    protected virtual void Dispose(bool A_0);
    public sealed virtual void Dispose();
}
internal class MS.Internal.PrintWin32Thunk.GetDataThunkObject : object {
    private Type printingType;
    private bool isDisposed;
    private object cookie;
    public object Cookie { get; public set; }
    public GetDataThunkObject(Type printingType);
    private void ~GetDataThunkObject();
    public bool PopulatePrintSystemObject(PrinterThunkHandler printingHandler, PrintSystemObject printObject, String[] propertiesFilter);
    public void set_Cookie(object internalCookie);
    public object get_Cookie();
    private InfoLevelCoverageList BuildCoverageListAndGetData(PrinterThunkHandler printingHandler, InfoLevelMask mask);
    private bool PopulateAttributesFromCoverageList(PrintSystemObject printObject, String[] propertiesFilter, InfoLevelCoverageList coverageList);
    protected virtual void Dispose(bool A_0);
    public sealed virtual void Dispose();
}
internal interface MS.Internal.PrintWin32Thunk.IPrinterInfo {
    public UInt32 Count { get; }
    public SafeMemoryHandle Win32SafeHandle { get; }
    public abstract virtual SafeMemoryHandle get_Win32SafeHandle();
    public abstract virtual UInt32 get_Count();
    public abstract virtual object GetValueFromName(string valueName, UInt32 index);
    public abstract virtual bool SetValueFromName(string valueName, object value);
    public abstract virtual void Release();
}
internal class MS.Internal.PrintWin32Thunk.PrinterDefaults : object {
    private string defaultDataType;
    private IntPtr defaultDeviceMode;
    private PrintSystemDesiredAccess defaultDesiredAccess;
    public PrintSystemDesiredAccess DesiredAccess { get; }
    public PrinterDefaults(string dataType, DeviceMode devMode, PrintSystemDesiredAccess desiredAccess);
    private void ~PrinterDefaults();
    public PrintSystemDesiredAccess get_DesiredAccess();
    private void !PrinterDefaults();
    protected virtual void InternalDispose(bool disposing);
    protected virtual void Dispose(bool A_0);
    public sealed virtual void Dispose();
    protected virtual void Finalize();
}
internal class MS.Internal.PrintWin32Thunk.PrinterInfoEightSafeMemoryHandle : SafeMemoryHandle {
    public sealed virtual bool ReleaseHandle();
}
internal class MS.Internal.PrintWin32Thunk.PrinterInfoNineSafeMemoryHandle : SafeMemoryHandle {
    public sealed virtual bool ReleaseHandle();
}
internal class MS.Internal.PrintWin32Thunk.PrinterInfoOneSafeMemoryHandle : SafeMemoryHandle {
    public sealed virtual bool ReleaseHandle();
}
internal class MS.Internal.PrintWin32Thunk.PrinterInfoSevenSafeMemoryHandle : SafeMemoryHandle {
    public sealed virtual bool ReleaseHandle();
}
internal class MS.Internal.PrintWin32Thunk.PrinterInfoSixSafeMemoryHandle : SafeMemoryHandle {
    public sealed virtual bool ReleaseHandle();
}
internal class MS.Internal.PrintWin32Thunk.PrinterInfoThreeSafeMemoryHandle : SafeMemoryHandle {
    public sealed virtual bool ReleaseHandle();
}
internal class MS.Internal.PrintWin32Thunk.PrinterThunkHandler : PrinterThunkHandlerBase {
    private string printerName;
    private PrinterDefaults printerDefaults;
    private UInt32 printersCount;
    private bool isDisposed;
    private bool isRunningDownLevel;
    private FileStream spoolStream;
    private bool isInPartialTrust;
    private int jobIdentifier;
    private XpsDocumentEventType previousXpsDocEventEscape;
    private DocEventFilter docEventFilter;
    private static Int32 modopt(System.Runtime.CompilerServices.IsConst) MaxPath;
    public Stream SpoolStream { get; }
    public int JobIdentifier { get; }
    public bool IsInvalid { get; }
    public PrinterThunkHandler(string printName, PrinterDefaults printerDefaults);
    public PrinterThunkHandler(string printName);
    public PrinterThunkHandler(IntPtr win32PrintHandle);
    private static PrinterThunkHandler();
    public virtual bool get_IsInvalid();
    public sealed virtual bool ReleaseHandle();
    public PrinterThunkHandler DuplicateHandler();
    public IPrinterInfo ThunkGetPrinter(UInt32 level);
    public IPrinterInfo ThunkGetDriver(UInt32 level, string environment);
    public IPrinterInfo ThunkEnumDrivers(UInt32 level, string environment);
    public IPrinterInfo ThunkGetJob(UInt32 level, UInt32 jobID);
    public IPrinterInfo ThunkEnumJobs(UInt32 level, UInt32 firstJob, UInt32 numberOfJobs);
    public bool ThunkSetJob(UInt32 jobID, UInt32 command);
    public sealed virtual int ThunkStartDocPrinter(DocInfoThree docInfo, PrintTicket printTicket);
    public sealed virtual bool ThunkEndDocPrinter();
    public bool ThunkStartPagePrinter();
    public bool ThunkEndPagePrinter();
    public sealed virtual bool ThunkAbortPrinter();
    public sealed virtual void ThunkOpenSpoolStream();
    public sealed virtual void ThunkCommitSpoolData(int bytes);
    public sealed virtual bool ThunkCloseSpoolStream();
    public virtual int get_JobIdentifier();
    public virtual Stream get_SpoolStream();
    public int ThunkDocumentEvent(XpsDocumentEventType escape, SafeHandle inputBufferSafeHandle);
    public int ThunkDocumentEvent(XpsDocumentEventType escape);
    public int ThunkDocumentEvent(XpsDocumentEventType escape, UInt32 inBufferSize, SafeHandle inBuffer, UInt32 outBufferSize, SafeMemoryHandle outBuffer);
    public bool ThunkDocumentEventPrintTicket(XpsDocumentEventType escapePre, XpsDocumentEventType escapePost, SafeHandle inputBufferSafeHandle, MemoryStream& printTicketStream);
    public int ThunkDocumentEventPrintTicketPost(XpsDocumentEventType escape, SafeMemoryHandle xpsDocEventOutputBuffer, UInt32 xpsDocEventOutputBufferSize);
    public bool IsXpsDocumentEventSupported(XpsDocumentEventType escape, bool reset);
    public void SetUnsupportedXpsDocumentEvent(XpsDocumentEventType escape);
    public sealed virtual int ThunkReportJobProgress(int jobId, JobOperation jobOperation, PackagingAction packagingAction);
    public bool ThunkDeletePrinter();
    public static bool ThunkSetPrinterDataString(PrinterThunkHandler printerHandle, string valueName, object value);
    public static bool ThunkSetPrinterDataInt32(PrinterThunkHandler printerHandle, string valueName, object value);
    public static bool ThunkSetPrinterDataBoolean(PrinterThunkHandler printerHandle, string valueName, object value);
    public static bool ThunkSetPrinterDataServerEventLogging(PrinterThunkHandler printerHandle, string valueName, object value);
    public static bool ThunkSetPrinterDataThreadPriority(PrinterThunkHandler printerHandle, string valueName, object value);
    public static object ThunkGetPrinterDataString(PrinterThunkHandler printerHandle, string valueName);
    public static object ThunkGetPrinterDataInt32(PrinterThunkHandler printerHandle, string valueName);
    public static object ThunkGetPrinterDataBoolean(PrinterThunkHandler printerHandle, string valueName);
    public static object ThunkGetPrinterDataThreadPriority(PrinterThunkHandler printerHandle, string valueName);
    public static object ThunkGetPrinterDataServerEventLogging(PrinterThunkHandler printerHandle, string valueName);
    public bool ThunkSetPrinter(UInt32 level, SafeMemoryHandle win32PrinterInfo);
    public bool ThunkSetPrinter(UInt32 command);
    public static PrinterThunkHandler ThunkAddPrinter(string serverName, PrinterInfoTwoSetter printInfoTwoLeveThunk);
    public static PrinterThunkHandler ThunkAddPrinter(string serverName, string printerName, string driverName, string portName, string printProcessorName, string comment, string location, string shareName, string separatorFile, int attributes, int priority, int defaultPriority);
    public static IPrinterInfo ThunkEnumPrinters(string serverName, UInt32 level, UInt32 flags);
    public static bool ThunkAddPrinterConnection(string path);
    public static bool ThunkDeletePrinterConnection(string path);
    public static string ThunkGetDefaultPrinter();
    public static bool ThunkSetDefaultPrinter(string path);
    public static string GetLocalMachineName();
    public bool ThunkIsMetroDriverEnabled();
    private FileStream CreateSpoolStream(IntPtr fileHandle);
    private static IPrinterInfo GetManagedPrinterInfoObject(UInt32 level, SafeMemoryHandle win32HeapBuffer, UInt32 count);
    private static IPrinterInfo GetManagedDriverInfoObject(UInt32 level, SafeMemoryHandle win32HeapBuffer, UInt32 count);
    private static IPrinterInfo GetManagedJobInfoObject(UInt32 level, SafeMemoryHandle win32HeapBuffer, UInt32 count);
    private bool ThunkOpenPrinter(string name, PrinterDefaults openPrinterDefaults);
    [ReliabilityContractAttribute("3", "2")]
private bool ThunkClosePrinter();
    private bool ThunkSetPrinterDataStringInternal(string valueName, object value);
    private bool ThunkSetPrinterDataInt32Internal(string valueName, object value);
    private bool ThunkSetPrinterDataBooleanInternal(string valueName, object value);
    private bool ThunkSetPrinterDataServerEventLoggingInternal(string valueName, object value);
    private bool ThunkSetPrinterDataThreadPriorityInternal(string valueName, object value);
    private object ThunkGetPrinterDataStringInternal(string valueName);
    private object ThunkGetPrinterDataInt32Internal(string valueName);
    private object ThunkGetPrinterDataBooleanInternal(string valueName);
    private object ThunkGetPrinterDataThreadPriorityInternal(string valueName);
    private object ThunkGetPrinterDataServerEventLoggingInternal(string valueName);
}
internal abstract class MS.Internal.PrintWin32Thunk.PrinterThunkHandlerBase : SafeHandle {
    public Stream SpoolStream { get; }
    public int JobIdentifier { get; }
    public abstract virtual int ThunkStartDocPrinter(DocInfoThree docInfo, PrintTicket printTicket);
    public abstract virtual bool ThunkEndDocPrinter();
    public abstract virtual bool ThunkAbortPrinter();
    public abstract virtual void ThunkOpenSpoolStream();
    public abstract virtual void ThunkCommitSpoolData(int bytes);
    public abstract virtual bool ThunkCloseSpoolStream();
    public abstract virtual int ThunkReportJobProgress(int jobId, JobOperation jobOperation, PackagingAction packagingAction);
    public abstract virtual int get_JobIdentifier();
    public abstract virtual Stream get_SpoolStream();
}
internal class MS.Internal.PrintWin32Thunk.PropertyCollectionMemorySafeHandle : SafeHandle {
    public bool IsInvalid { get; }
    private PropertyCollectionMemorySafeHandle(IntPtr Win32Pointer);
    public static PropertyCollectionMemorySafeHandle AllocPropertyCollectionMemorySafeHandle(UInt32 propertyCount);
    public virtual bool get_IsInvalid();
    public sealed virtual bool ReleaseHandle();
    public void SetValue(string propertyName, UInt32 index, object value);
    public void SetValue(string propertyName, UInt32 index, Type value);
}
internal class MS.Internal.PrintWin32Thunk.SafeMemoryHandle : SafeHandle {
    public static SafeMemoryHandle Null { get; }
    public int Size { get; }
    public bool IsInvalid { get; }
    private SafeMemoryHandle(IntPtr Win32Pointer, bool ownsHandle);
    public SafeMemoryHandle(IntPtr Win32Pointer);
    public static bool TryCreate(int byteCount, SafeMemoryHandle& result);
    public static SafeMemoryHandle Create(int byteCount);
    public static SafeMemoryHandle Wrap(IntPtr Win32Pointer);
    public virtual bool get_IsInvalid();
    public virtual bool ReleaseHandle();
    public virtual int get_Size();
    public void CopyFromArray(Byte[] source, int startIndex, int length);
    public void CopyToArray(Byte[] destination, int startIndex, int length);
    public static SafeMemoryHandle get_Null();
    private static Exception VerifyBufferArguments(string bufferName, Byte[] buffer, int startIndex, int length);
}
internal class MS.Internal.PrintWin32Thunk.SetDataThunkObject : object {
    private Type printingType;
    private bool isDisposed;
    public SetDataThunkObject(Type printingType);
    private void ~SetDataThunkObject();
    public bool CommitDataFromPrintSystemObject(PrinterThunkHandler printingHandler, PrintSystemObject printObject, String[] propertiesFilter);
    private InfoLevelCoverageList BuildCoverageListToSetData(PrinterThunkHandler printerThunkHandler, InfoLevelMask mask);
    private bool SetAttributesFromCoverageList(PrintSystemObject printObject, String[] propertiesFilter, InfoLevelCoverageList coverageList);
    private bool SetDataFromCoverageList(PrinterThunkHandler printingHandler, String[] propertiesFilter, InfoLevelCoverageList coverageList, Type setDataType);
    private void GetCommitedAndFailedAttributes(String[] propertiesFilter, InfoLevelCoverageList coverageList, Collection`1<string> committedAttributes, Collection`1<string> failedAttributes);
    private static Exception CreatePrintCommitAttributesException(int hResult, Collection`1<string> committedAttributes, Collection`1<string> failedAttributes);
    protected virtual void Dispose(bool A_0);
    public sealed virtual void Dispose();
}
internal abstract class MS.Internal.PrintWin32Thunk.Win32ApiThunk.PresentationNativeUnsafeNativeMethods : object {
    public static int IsStartXpsPrintJobSupported();
    public static UInt32 LateBoundStartXpsPrintJob(string printerName, string jobName, string outputFileName, SafeWaitHandle progressEvent, SafeWaitHandle completionEvent, Byte* printablePagesOn, UInt32 printablePagesOnCount, Void** xpsPrintJob, Void** documentStream, Void** printTicketStream);
    public static int IsPrintPackageTargetSupported();
    public static UInt32 PrintToPackageTarget(string printerName, string jobName, IStream jobPrintTicketStream, IPrintDocumentPackageTarget& printDocPackageTarget, IXpsDocumentPackageTarget& xpsPackageTarget);
    private static int IsStartXpsPrintJobSupportedImpl();
    private static UInt32 LateBoundStartXpsPrintJobImpl(string printerName, string jobName, string outputFileName, SafeWaitHandle progressEvent, SafeWaitHandle completionEvent, Byte* printablePagesOn, UInt32 printablePagesOnCount, Void** xpsPrintJob, Void** documentStream, Void** printTicketStream);
    private static int IsPrintPackageTargetSupportedImpl();
    private static int PrintToPackageTargetImpl(string printerName, string jobName, IStream jobPrintTicketStream, IPrintDocumentPackageTarget& printDocPackageTarget, IXpsDocumentPackageTarget& xpsPackageTarget);
}
internal abstract class MS.Internal.PrintWin32Thunk.Win32ApiThunk.UnmanagedPrinterInfoLevelBuilder : object {
    public static IntPtr BuildEmptyUnmanagedPrinterInfoOne();
    public static void FreeUnmanagedPrinterInfoOne(IntPtr win32PrinterInfoOne);
    public static IntPtr BuildEmptyUnmanagedPrinterInfoTwo();
    public static IntPtr BuildUnmanagedPrinterInfoTwo(string serverName, string printerName, string driverName, string portName, string printProcessorName, string comment, string location, string shareName, string separatorFile, int attributes, int priority, int defaultPriority);
    public static IntPtr WriteStringInUnmanagedPrinterInfo(IntPtr win32PrinterInfo, string stringValue, int offset);
    public static bool WriteIntPtrInUnmanagedPrinterInfo(IntPtr win32PrinterInfo, IntPtr pointerValue, int offset);
    public static bool WriteInt32InUnmanagedPrinterInfo(IntPtr win32PrinterInfo, int value, int offset);
    public static void FreeUnmanagedPrinterInfoTwo(IntPtr win32PrinterInfoTwo);
    public static IntPtr BuildEmptyUnmanagedPrinterInfoThree();
    public static void FreeUnmanagedPrinterInfoThree(IntPtr win32PrinterInfoThree);
    public static IntPtr BuildEmptyUnmanagedPrinterInfoSix();
    public static void FreeUnmanagedPrinterInfoSix(IntPtr win32PrinterInfoSix);
    public static IntPtr BuildEmptyUnmanagedPrinterInfoSeven();
    public static void FreeUnmanagedPrinterInfoSeven(IntPtr win32PrinterInfoSeven);
    public static IntPtr BuildEmptyUnmanagedPrinterInfoEight();
    public static bool WriteDevModeInUnmanagedPrinterInfoEight(IntPtr win32PrinterInfoEight, IntPtr pDevMode);
    public static bool WriteDevModeInUnmanagedPrinterInfoNine(IntPtr win32PrinterInfoNine, IntPtr pDevMode);
    public static void FreeUnmanagedPrinterInfoEight(IntPtr win32PrinterInfoEight);
    public static IntPtr BuildEmptyUnmanagedPrinterInfoNine();
    public static void FreeUnmanagedPrinterInfoNine(IntPtr win32PrinterInfoNine);
}
internal abstract class MS.Internal.PrintWin32Thunk.Win32ApiThunk.UnmanagedXpsDocEventBuilder : object {
    public static SafeHandle XpsDocEventFixedDocSequence(XpsDocumentEventType escape, UInt32 jobId, string jobName, Stream printTicket, bool mustAddPrintTicket);
    public static SafeHandle XpsDocEventFixedDocument(XpsDocumentEventType escape, UInt32 fixedDocumentNumber, Stream printTicket, bool mustAddPrintTicket);
    public static SafeHandle XpsDocEventFixedPage(XpsDocumentEventType escape, UInt32 fixedPageNumber, Stream printTicket, bool mustAddPrintTicket);
}
internal abstract class MS.Internal.PrintWin32Thunk.Win32ApiThunk.UnsafeNativeMethods : object {
    public static bool InvokeOpenPrinter(string A_0, IntPtr* A_1, PrinterDefaults A_2);
    public static bool InvokeGetPrinter(IntPtr A_0, UInt32 A_1, SafeMemoryHandle A_2, UInt32 A_3, UInt32* A_4);
    public static UInt32 InvokeGetPrinterData(IntPtr A_0, string A_1, UInt32* A_2, SafeMemoryHandle A_3, UInt32 A_4, UInt32* A_5);
    public static bool InvokeGetPrinterDriver(IntPtr A_0, string A_1, UInt32 A_2, SafeMemoryHandle A_3, UInt32 A_4, UInt32* A_5);
    public static bool InvokeEnumPrinters(UInt32 A_0, string A_1, UInt32 A_2, SafeMemoryHandle A_3, UInt32 A_4, UInt32* A_5, UInt32* A_6);
    [ReliabilityContractAttribute("3", "2")]
public static bool InvokeClosePrinter(IntPtr A_0);
    public static bool InvokeAddPrinterConnection(string A_0);
    public static bool InvokeDeletePrinterConnection(string A_0);
    public static bool InvokeGetDefaultPrinter(StringBuilder A_0, Int32* A_1);
    public static bool InvokeGetJob(IntPtr A_0, UInt32 A_1, UInt32 A_2, SafeMemoryHandle A_3, UInt32 A_4, UInt32* A_5);
    public static bool InvokeSetJob(IntPtr A_0, UInt32 A_1, UInt32 A_2, IntPtr A_3, UInt32 A_4);
    public static bool InvokeEnumJobs(IntPtr A_0, UInt32 A_1, UInt32 A_2, UInt32 A_3, SafeMemoryHandle A_4, UInt32 A_5, UInt32* A_6, UInt32* A_7);
    public static int InvokeReportJobProgress(IntPtr A_0, int A_1, int A_2, int A_3);
    public static bool InvokeStartPagePrinter(IntPtr A_0);
    public static bool InvokeEndPagePrinter(IntPtr A_0);
    public static bool InvokeSetDefaultPrinter(string A_0);
    public static int InvokeStartDocPrinter(IntPtr A_0, int A_1, DocInfoThree A_2);
    public static bool InvokeEndDocPrinter(IntPtr A_0);
    public static bool InvokeAbortPrinter(IntPtr A_0);
    public static IntPtr InvokeGetSpoolFileHandle(IntPtr A_0);
    public static IntPtr InvokeCommitSpoolData(IntPtr A_0, SafeFileHandle A_1, int A_2);
    public static bool InvokeCloseSpoolFileHandle(IntPtr A_0, SafeFileHandle A_1);
    public static int InvokeDocumentEvent(IntPtr A_0, IntPtr A_1, int A_2, UInt32 A_3, SafeHandle A_4, UInt32 A_5, SafeMemoryHandle A_6);
    public static UInt32 InvokeSetPrinterDataIntPtr(IntPtr A_0, string A_1, UInt32 A_2, IntPtr A_3, UInt32 A_4);
    public static UInt32 InvokeSetPrinterDataInt32(IntPtr A_0, string A_1, UInt32 A_2, Int32* A_3, UInt32 A_4);
    public static Void** InvokeAddPrinter(string A_0, UInt32 A_1, SafeMemoryHandle A_2);
    public static bool InvokeSetPrinter(IntPtr A_0, UInt32 A_1, SafeMemoryHandle A_2, UInt32 A_3);
    public static bool InvokeDeletePrinter(IntPtr A_0);
    public static bool GetComputerNameW(StringBuilder nameBuffer, Int32* bufferSize);
}
internal class MS.Internal.PrintWin32Thunk.XpsCompatiblePrinter : object {
    private string _printerName;
    private IPrintDocumentPackageTarget _printDocPackageTarget;
    private IXpsDocumentPackageTarget _xpsPackageTarget;
    private PrintDocumentPackageStatusProvider _xpsPackageStatusProvider;
    private IXpsOMPackageWriter _packageWriter;
    unknown IXpsOMPackageWriter XpsOMPackageWriter {public set; }
    public IXpsDocumentPackageTarget XpsPackageTarget { get; }
    public int JobIdentifier { get; }
    public XpsCompatiblePrinter(string printerName);
    private void ~XpsCompatiblePrinter();
    public virtual void StartDocPrinterW(DocInfoThree docInfo, PrintTicket printTicket, bool mustSetPrintJobIdentifier);
    public virtual void EndDocPrinter();
    public virtual void AbortPrinter();
    public virtual int get_JobIdentifier();
    public IXpsDocumentPackageTarget get_XpsPackageTarget();
    public void set_XpsOMPackageWriter(IXpsOMPackageWriter packageWriter);
    protected virtual void Dispose(bool A_0);
    public sealed virtual void Dispose();
}
internal class MS.Internal.PrintWin32Thunk.XpsDeviceSimulatingPrintThunkHandler : PrinterThunkHandlerBase {
    private string printerName;
    private Stream spoolerStream;
    private IXpsPrintJob* xpsPrintJob;
    private int jobIdentifier;
    public Stream SpoolStream { get; }
    public int JobIdentifier { get; }
    public bool IsInvalid { get; }
    public XpsDeviceSimulatingPrintThunkHandler(string printerName);
    public virtual bool get_IsInvalid();
    public virtual bool ReleaseHandle();
    public virtual int ThunkStartDocPrinter(DocInfoThree docInfo, PrintTicket printTicket);
    public virtual bool ThunkEndDocPrinter();
    public virtual bool ThunkAbortPrinter();
    public virtual void ThunkOpenSpoolStream();
    public virtual void ThunkCommitSpoolData(int bytes);
    public virtual bool ThunkCloseSpoolStream();
    public virtual int ThunkReportJobProgress(int jobId, JobOperation jobOperation, PackagingAction packagingAction);
    public virtual int get_JobIdentifier();
    public virtual Stream get_SpoolStream();
}
internal class MS.Internal.PrintWin32Thunk.XpsPrintJobStream : Stream {
    private IXpsPrintJobStream* inner;
    private ManualResetEvent hCompletedEvent;
    private bool canRead;
    private bool canWrite;
    private long position;
    public long Position { get; public set; }
    public long Length { get; }
    public bool CanTimeout { get; }
    public bool CanSeek { get; }
    public bool CanWrite { get; }
    public bool CanRead { get; }
    public XpsPrintJobStream(Void* printJobStream, ManualResetEvent hCompletedEvent, bool canRead, bool canWrite);
    private void ~XpsPrintJobStream();
    private void !XpsPrintJobStream();
    public virtual bool get_CanRead();
    public virtual bool get_CanWrite();
    public virtual bool get_CanSeek();
    public virtual bool get_CanTimeout();
    public virtual long get_Length();
    public virtual long get_Position();
    public virtual void set_Position(long value);
    public virtual void Flush();
    public virtual int Read(Byte[] buffer, int offset, int count);
    public virtual void Write(Byte[] buffer, int offset, int count);
    public virtual long Seek(long offset, SeekOrigin origin);
    public virtual void SetLength(long value);
    private int WaitForJobCompletion(UInt32 modopt(System.Runtime.CompilerServices.IsLong) waitTimeout);
    private UInt32 modopt(System.Runtime.CompilerServices.IsLong) GetCommitTimeoutMilliseconds();
    protected virtual void Dispose(bool A_0);
    protected virtual void Finalize();
}
internal class MS.Internal.PrintWin32Thunk.XpsPrintStream : Stream {
    private IStream* _innerStream;
    private bool _canRead;
    private bool _canWrite;
    private long _position;
    public long Position { get; public set; }
    public long Length { get; }
    public bool CanTimeout { get; }
    public bool CanSeek { get; }
    public bool CanWrite { get; }
    public bool CanRead { get; }
    private XpsPrintStream(Void* IPrintStream, bool canRead, bool canWrite);
    private void ~XpsPrintStream();
    private void !XpsPrintStream();
    public virtual bool get_CanRead();
    public virtual bool get_CanWrite();
    public virtual bool get_CanSeek();
    public virtual bool get_CanTimeout();
    public virtual long get_Length();
    public virtual long get_Position();
    public virtual void set_Position(long value);
    public virtual void Flush();
    public virtual int Read(Byte[] buffer, int offset, int count);
    public virtual void Write(Byte[] buffer, int offset, int count);
    public virtual long Seek(long offset, SeekOrigin origin);
    public virtual void SetLength(long value);
    public static XpsPrintStream CreateXpsPrintStream();
    public IStream GetManagedIStream();
    protected virtual void Dispose(bool A_0);
    protected virtual void Finalize();
}
[NativeCppClassAttribute]
internal class PrintNamedProperty : ValueType {
    private long <alignment member>;
}
[NativeCppClassAttribute]
internal class PrintPropertiesCollection : ValueType {
    private long <alignment member>;
}
[NativeCppClassAttribute]
internal class PrintPropertyValue : ValueType {
    private long <alignment member>;
}
internal class System.Printing.Activation.AttributeTypeDelegate : object {
    public Type type;
    public CreateWithValue delegateValue;
    public CreateWithNoValue delegateNoValue;
    public CreateWithValueLinked delegateValueLinked;
    public CreateWithNoValueLinked delegateNoValueLinked;
    public AttributeTypeDelegate(Type inType, CreateWithValue inDelegateValue, CreateWithNoValue inDelegateNoValue, CreateWithValueLinked inDelegateValueLinked, CreateWithNoValueLinked inDelegateNoValueLinked);
}
internal class System.Printing.Activation.ObjectsAttributesValuesFactory : object {
    private static ObjectsAttributesValuesFactory value;
    private static ObjectTypeDelegate[] objectTypeDelegate;
    private static AttributeTypeDelegate[] attributeValueTypeDelegate;
    private static MulticastDelegate[] registerationDelegate;
    private static Object modreq(System.Runtime.CompilerServices.IsVolatile) syncRoot;
    private bool isDisposed;
    private Hashtable valueDelegatesTable;
    private Hashtable noValueDelegatesTable;
    private Hashtable valueLinkedDelegatesTable;
    private Hashtable noValueLinkedDelegatesTable;
    private static object SyncRoot { get; }
    public static ObjectsAttributesValuesFactory Value { get; }
    private static ObjectsAttributesValuesFactory();
    public static ObjectsAttributesValuesFactory get_Value();
    public void RegisterObjectAttributeNoValueCreationMethod(Type type, CreateWithNoValue delegate);
    public void RegisterObjectAttributeNoValueLinkedCreationMethod(Type type, CreateWithNoValueLinked delegate);
    public void RegisterObjectAttributeValueCreationMethod(Type type, CreateWithValue delegate);
    public void RegisterObjectAttributeValueLinkedCreationMethod(Type type, CreateWithValueLinked delegate);
    public PrintProperty Create(Type type, string attributeName, object attributeValue, MulticastDelegate delegate);
    public PrintProperty Create(Type type, string attributeName, MulticastDelegate delegate);
    public PrintProperty Create(Type type, string attributeName, object attributeValue);
    public PrintProperty Create(Type type, string atttributeName);
    private void !ObjectsAttributesValuesFactory();
    protected sealed virtual void InternalDispose(bool disposing);
    private void ~ObjectsAttributesValuesFactory();
    private static object get_SyncRoot();
    protected sealed virtual void Dispose(bool A_0);
    public sealed virtual void Dispose();
    protected sealed virtual void Finalize();
}
internal class System.Printing.Activation.ObjectTypeDelegate : object {
    public Type type;
    public CreateWithValue delegateValue;
    public CreateWithNoValue delegateNoValue;
    public CreateWithValueLinked delegateValueLinked;
    public CreateWithNoValueLinked delegateNoValueLinked;
    public ObjectTypeDelegate(Type inType, CreateWithValue inDelegateValue, CreateWithNoValue inDelegateNoValue, CreateWithValueLinked inDelegateValueLinked, CreateWithNoValueLinked inDelegateNoValueLinked);
}
internal class System.Printing.Activation.PrintPropertyFactory : object {
    private static PrintPropertyFactory modreq(System.Runtime.CompilerServices.IsVolatile) value;
    private static Object modreq(System.Runtime.CompilerServices.IsVolatile) syncRoot;
    private bool isDisposed;
    private Hashtable valueDelegatesTable;
    private Hashtable noValueDelegatesTable;
    private Hashtable valueLinkedDelegatesTable;
    private Hashtable noValueLinkedDelegatesTable;
    private static object SyncRoot { get; }
    public static PrintPropertyFactory Value { get; }
    private static PrintPropertyFactory();
    public void RegisterValueCreationDelegate(Type type, CreateWithValue creationDelegate);
    public void RegisterNoValueCreationDelegate(Type type, CreateWithNoValue creationDelegate);
    public void RegisterValueLinkedCreationDelegate(Type type, CreateWithValueLinked creationDelegate);
    public void RegisterNoValueLinkedCreationDelegate(Type type, CreateWithNoValueLinked creationDelegate);
    public void UnRegisterValueCreationDelegate(Type type);
    public void UnRegisterNoValueCreationDelegate(Type type);
    public void UnRegisterValueLinkedCreationDelegate(Type type);
    public void UnRegisterNoValueLinkedCreationDelegate(Type type);
    public PrintProperty Create(Type type, string attributeName, object attributeValue, MulticastDelegate delegate);
    public PrintProperty Create(Type type, string attributeName, MulticastDelegate delegate);
    public PrintProperty Create(Type type, string attributeName, object attributeValue);
    public PrintProperty Create(Type type, string attributeName);
    public sealed virtual IEnumerator GetEnumerator();
    public static PrintPropertyFactory get_Value();
    protected sealed virtual void InternalDispose(bool disposing);
    private void !PrintPropertyFactory();
    private void ~PrintPropertyFactory();
    private static object get_SyncRoot();
    protected sealed virtual void Dispose(bool A_0);
    public sealed virtual void Dispose();
    protected sealed virtual void Finalize();
}
internal class System.Printing.Activation.PrintSystemObjectFactory : object {
    private static PrintSystemObjectFactory value;
    private static Object modreq(System.Runtime.CompilerServices.IsVolatile) syncRoot;
    private bool disposed;
    private Hashtable instantiationDelegatesTable;
    private Hashtable optimizedInstantiationDelegatesTable;
    private static object SyncRoot { get; }
    public static PrintSystemObjectFactory Value { get; }
    private static PrintSystemObjectFactory();
    public void RegisterInstantiationDelegates(Type objType, Instantiate instantiationDelegate);
    public void RegisterOptimizedInstantiationDelegates(Type objType, InstantiateOptimized optimizedInstantiationDelegate);
    public PrintSystemObject Instantiate(Type objType, String[] propertiesFilter);
    public PrintSystemObject InstantiateOptimized(Type objType, object object, String[] propertiesFilter);
    public static PrintSystemObjectFactory get_Value();
    private void !PrintSystemObjectFactory();
    protected sealed virtual void InternalDispose(bool disposing);
    private void ~PrintSystemObjectFactory();
    private static object get_SyncRoot();
    protected sealed virtual void Dispose(bool A_0);
    public sealed virtual void Dispose();
    protected sealed virtual void Finalize();
}
[FlagsAttribute]
public enum System.Printing.EnumeratedPrintQueueTypes : Enum {
    public int value__;
    public static EnumeratedPrintQueueTypes Local;
    public static EnumeratedPrintQueueTypes Shared;
    public static EnumeratedPrintQueueTypes Connections;
    public static EnumeratedPrintQueueTypes TerminalServer;
    public static EnumeratedPrintQueueTypes Fax;
    public static EnumeratedPrintQueueTypes KeepPrintedJobs;
    public static EnumeratedPrintQueueTypes EnableBidi;
    public static EnumeratedPrintQueueTypes RawOnly;
    public static EnumeratedPrintQueueTypes WorkOffline;
    public static EnumeratedPrintQueueTypes PublishedInDirectoryServices;
    public static EnumeratedPrintQueueTypes DirectPrinting;
    public static EnumeratedPrintQueueTypes Queued;
    public static EnumeratedPrintQueueTypes PushedUserConnection;
    public static EnumeratedPrintQueueTypes PushedMachineConnection;
    public static EnumeratedPrintQueueTypes EnableDevQuery;
}
[AttributeUsageAttribute("5372")]
internal class System.Printing.FriendAccessAllowedAttribute : Attribute {
}
[FriendAccessAllowedAttribute]
internal interface System.Printing.ILegacyDevice {
    public abstract virtual int StartDocument(string printerName, string jobName, string filename, Byte[] deviceMode);
    public abstract virtual void StartDocumentWithoutCreatingDC(string printerName, string jobName, string filename);
    public abstract virtual void EndDocument();
    public abstract virtual void CreateDeviceContext(string printerName, string jobName, Byte[] deviceMode);
    public abstract virtual void DeleteDeviceContext();
    public abstract virtual string ExtEscGetName();
    public abstract virtual bool ExtEscMXDWPassThru();
    public abstract virtual void StartPage(Byte[] deviceMode, int rasterizationDPI);
    public abstract virtual void EndPage();
    public abstract virtual void PopTransform();
    public abstract virtual void PopClip();
    public abstract virtual void PushClip(Geometry clipGeometry);
    public abstract virtual void PushTransform(Matrix transform);
    public abstract virtual void DrawGeometry(Brush brush, Pen pen, Brush strokeBrush, Geometry geometry);
    public abstract virtual void DrawImage(BitmapSource source, Byte[] buffer, Rect rect);
    public abstract virtual void DrawGlyphRun(Brush brush, GlyphRun glyphRun);
    public abstract virtual void Comment(string message);
}
public class System.Printing.IndexedProperties.PrintBooleanProperty : PrintProperty {
    private BooleanValueChanged changeHandler;
    private bool value;
    internal BooleanValueChanged ChangeHandler { get; internal set; }
    public object Value { get; public set; }
    internal PrintBooleanProperty(string attributeName, object attributeValue, MulticastDelegate delegate);
    internal PrintBooleanProperty(string attributeName, MulticastDelegate delegate);
    public PrintBooleanProperty(string attributeName, object attributeValue);
    public PrintBooleanProperty(string attributeName);
    public virtual object get_Value();
    public virtual void set_Value(object objValue);
    internal BooleanValueChanged get_ChangeHandler();
    internal void set_ChangeHandler(BooleanValueChanged newHandler);
    public static bool op_Implicit(PrintBooleanProperty attribRef);
    public static bool op_Implicit(PrintBooleanProperty modreq(System.Runtime.CompilerServices.IsImplicitlyDereferenced) attribRef);
    internal static ValueType modopt(System.Boolean) modopt(System.Runtime.CompilerServices.IsBoxed) ToBoolean(PrintBooleanProperty modreq(System.Runtime.CompilerServices.IsImplicitlyDereferenced) attribRef);
    internal static PrintProperty Create(string attributeName, object attribValue, MulticastDelegate delegate);
    internal static PrintProperty Create(string attributeName, MulticastDelegate delegate);
    internal static PrintProperty Create(string attributeName, object attributeValue);
    internal static PrintProperty Create(string attributeName);
    protected sealed virtual void InternalDispose(bool disposing);
}
public class System.Printing.IndexedProperties.PrintByteArrayProperty : PrintProperty {
    private ByteArrayValueChanged changeHandler;
    private Byte[] value;
    internal ByteArrayValueChanged ChangeHandler { get; internal set; }
    public object Value { get; public set; }
    internal PrintByteArrayProperty(string attributeName, object attributeValue, MulticastDelegate delegate);
    internal PrintByteArrayProperty(string attributeName, MulticastDelegate delegate);
    public PrintByteArrayProperty(string attributeName, object attributeValue);
    public PrintByteArrayProperty(string attributeName);
    public virtual object get_Value();
    public virtual void set_Value(object objValue);
    internal ByteArrayValueChanged get_ChangeHandler();
    internal void set_ChangeHandler(ByteArrayValueChanged newHandler);
    public static Byte[] op_Implicit(PrintByteArrayProperty attribRef);
    public static Byte[] op_Implicit(PrintByteArrayProperty modreq(System.Runtime.CompilerServices.IsImplicitlyDereferenced) attribRef);
    internal static Byte[] ToByteArray(PrintByteArrayProperty modreq(System.Runtime.CompilerServices.IsImplicitlyDereferenced) attribRef);
    internal static PrintProperty Create(string attributeName, object attribValue, MulticastDelegate delegate);
    internal static PrintProperty Create(string attributeName, MulticastDelegate delegate);
    internal static PrintProperty Create(string attributeName, object attributeValue);
    internal static PrintProperty Create(string attributeName);
    protected sealed virtual void InternalDispose(bool disposing);
}
public class System.Printing.IndexedProperties.PrintDateTimeProperty : PrintProperty {
    private SystemDateTimeValueChanged changeHandler;
    private DateTime value;
    internal SystemDateTimeValueChanged ChangeHandler { get; internal set; }
    public object Value { get; public set; }
    internal PrintDateTimeProperty(string attributeName, object attributeValue, MulticastDelegate delegate);
    internal PrintDateTimeProperty(string attributeName, MulticastDelegate delegate);
    public PrintDateTimeProperty(string attributeName, object attributeValue);
    public PrintDateTimeProperty(string attributeName);
    public virtual object get_Value();
    public virtual void set_Value(object objValue);
    internal SystemDateTimeValueChanged get_ChangeHandler();
    internal void set_ChangeHandler(SystemDateTimeValueChanged newHandler);
    public static ValueType modopt(System.DateTime) modopt(System.Runtime.CompilerServices.IsBoxed) op_Implicit(PrintDateTimeProperty attribRef);
    public static ValueType modopt(System.DateTime) modopt(System.Runtime.CompilerServices.IsBoxed) op_Implicit(PrintDateTimeProperty modreq(System.Runtime.CompilerServices.IsImplicitlyDereferenced) attribRef);
    internal static ValueType modopt(System.DateTime) modopt(System.Runtime.CompilerServices.IsBoxed) ToDateTime(PrintDateTimeProperty modreq(System.Runtime.CompilerServices.IsImplicitlyDereferenced) attribRef);
    internal static PrintProperty Create(string attributeName, object attribValue, MulticastDelegate delegate);
    internal static PrintProperty Create(string attributeName, MulticastDelegate delegate);
    internal static PrintProperty Create(string attributeName, object attributeValue);
    internal static PrintProperty Create(string attributeName);
    protected sealed virtual void InternalDispose(bool disposing);
}
public class System.Printing.IndexedProperties.PrintDriverProperty : PrintProperty {
    private DriverValueChanged changeHandler;
    private PrintDriver value;
    internal DriverValueChanged ChangeHandler { get; internal set; }
    public object Value { get; public set; }
    internal PrintDriverProperty(string attributeName, object attributeValue, MulticastDelegate delegate);
    internal PrintDriverProperty(string attributeName, MulticastDelegate delegate);
    public PrintDriverProperty(string attributeName, object attributeValue);
    public PrintDriverProperty(string attributeName);
    public virtual object get_Value();
    public virtual void set_Value(object objValue);
    internal DriverValueChanged get_ChangeHandler();
    internal void set_ChangeHandler(DriverValueChanged newHandler);
    public static PrintDriver op_Implicit(PrintDriverProperty attribRef);
    public static PrintDriver op_Implicit(PrintDriverProperty modreq(System.Runtime.CompilerServices.IsImplicitlyDereferenced) attribRef);
    internal static PrintDriver ToPrintDriver(PrintDriverProperty modreq(System.Runtime.CompilerServices.IsImplicitlyDereferenced) attribRef);
    internal static PrintProperty Create(string attributeName, object attribValue, MulticastDelegate delegate);
    internal static PrintProperty Create(string attributeName, MulticastDelegate delegate);
    internal static PrintProperty Create(string attributeName, object attributeValue);
    internal static PrintProperty Create(string attributeName);
    protected sealed virtual void InternalDispose(bool disposing);
}
public class System.Printing.IndexedProperties.PrintInt32Property : PrintProperty {
    private Int32ValueChanged changeHandler;
    private int value;
    internal Int32ValueChanged ChangeHandler { get; internal set; }
    public object Value { get; public set; }
    internal PrintInt32Property(string attributeName, object attributeValue, MulticastDelegate delegate);
    internal PrintInt32Property(string attributeName, MulticastDelegate delegate);
    public PrintInt32Property(string attributeName, object attributeValue);
    public PrintInt32Property(string attributeName);
    public virtual object get_Value();
    public virtual void set_Value(object objValue);
    internal Int32ValueChanged get_ChangeHandler();
    internal void set_ChangeHandler(Int32ValueChanged newHandler);
    public static int op_Implicit(PrintInt32Property attribRef);
    public static int op_Implicit(PrintInt32Property modreq(System.Runtime.CompilerServices.IsImplicitlyDereferenced) attribRef);
    internal static ValueType modopt(System.Int32) modopt(System.Runtime.CompilerServices.IsBoxed) ToInt32(PrintInt32Property modreq(System.Runtime.CompilerServices.IsImplicitlyDereferenced) attribRef);
    internal static PrintProperty Create(string attributeName, object attribValue, MulticastDelegate delegate);
    internal static PrintProperty Create(string attributeName, MulticastDelegate delegate);
    internal static PrintProperty Create(string attributeName, object attributeValue);
    internal static PrintProperty Create(string attributeName);
    protected sealed virtual void InternalDispose(bool disposing);
}
public class System.Printing.IndexedProperties.PrintJobPriorityProperty : PrintProperty {
    private JobPriorityValueChanged changeHandler;
    private PrintJobPriority value;
    internal JobPriorityValueChanged ChangeHandler { get; internal set; }
    public object Value { get; public set; }
    internal PrintJobPriorityProperty(string attributeName, object attributeValue, MulticastDelegate delegate);
    internal PrintJobPriorityProperty(string attributeName, MulticastDelegate delegate);
    public PrintJobPriorityProperty(string attributeName, object attributeValue);
    public PrintJobPriorityProperty(string attributeName);
    public virtual object get_Value();
    public virtual void set_Value(object objValue);
    internal JobPriorityValueChanged get_ChangeHandler();
    internal void set_ChangeHandler(JobPriorityValueChanged newHandler);
    public static PrintJobPriority op_Implicit(PrintJobPriorityProperty attribRef);
    public static PrintJobPriority op_Implicit(PrintJobPriorityProperty modreq(System.Runtime.CompilerServices.IsImplicitlyDereferenced) attribRef);
    internal static Enum modopt(System.Printing.PrintJobPriority) modopt(System.Runtime.CompilerServices.IsBoxed) ToPrintJobPriority(PrintJobPriorityProperty modreq(System.Runtime.CompilerServices.IsImplicitlyDereferenced) attribRef);
    internal static PrintProperty Create(string attributeName, object attribValue, MulticastDelegate delegate);
    internal static PrintProperty Create(string attributeName, MulticastDelegate delegate);
    internal static PrintProperty Create(string attributeName, object attributeValue);
    internal static PrintProperty Create(string attributeName);
    protected sealed virtual void InternalDispose(bool disposing);
}
public class System.Printing.IndexedProperties.PrintJobStatusProperty : PrintProperty {
    private JobStatusValueChanged changeHandler;
    private PrintJobStatus value;
    internal JobStatusValueChanged ChangeHandler { get; internal set; }
    public object Value { get; public set; }
    internal PrintJobStatusProperty(string attributeName, object attributeValue, MulticastDelegate delegate);
    internal PrintJobStatusProperty(string attributeName, MulticastDelegate delegate);
    public PrintJobStatusProperty(string attributeName, object attributeValue);
    public PrintJobStatusProperty(string attributeName);
    public virtual object get_Value();
    public virtual void set_Value(object objValue);
    internal JobStatusValueChanged get_ChangeHandler();
    internal void set_ChangeHandler(JobStatusValueChanged newHandler);
    public static PrintJobStatus op_Implicit(PrintJobStatusProperty attribRef);
    public static PrintJobStatus op_Implicit(PrintJobStatusProperty modreq(System.Runtime.CompilerServices.IsImplicitlyDereferenced) attribRef);
    internal static Enum modopt(System.Printing.PrintJobStatus) modopt(System.Runtime.CompilerServices.IsBoxed) ToPrintJobStatus(PrintJobStatusProperty modreq(System.Runtime.CompilerServices.IsImplicitlyDereferenced) attribRef);
    internal static PrintProperty Create(string attributeName, object attribValue, MulticastDelegate delegate);
    internal static PrintProperty Create(string attributeName, MulticastDelegate delegate);
    internal static PrintProperty Create(string attributeName, object attributeValue);
    internal static PrintProperty Create(string attributeName);
    protected sealed virtual void InternalDispose(bool disposing);
}
public class System.Printing.IndexedProperties.PrintPortProperty : PrintProperty {
    private PortValueChanged changeHandler;
    private PrintPort value;
    internal PortValueChanged ChangeHandler { get; internal set; }
    public object Value { get; public set; }
    internal PrintPortProperty(string attributeName, object attributeValue, MulticastDelegate delegate);
    internal PrintPortProperty(string attributeName, MulticastDelegate delegate);
    public PrintPortProperty(string attributeName, object attributeValue);
    public PrintPortProperty(string attributeName);
    public virtual object get_Value();
    public virtual void set_Value(object objValue);
    internal PortValueChanged get_ChangeHandler();
    internal void set_ChangeHandler(PortValueChanged newHandler);
    public static PrintPort op_Implicit(PrintPortProperty attribRef);
    public static PrintPort op_Implicit(PrintPortProperty modreq(System.Runtime.CompilerServices.IsImplicitlyDereferenced) attribRef);
    internal static PrintPort ToPrintPort(PrintPortProperty modreq(System.Runtime.CompilerServices.IsImplicitlyDereferenced) attribRef);
    internal static PrintProperty Create(string attributeName, object attribValue, MulticastDelegate delegate);
    internal static PrintProperty Create(string attributeName, MulticastDelegate delegate);
    internal static PrintProperty Create(string attributeName, object attributeValue);
    internal static PrintProperty Create(string attributeName);
    protected sealed virtual void InternalDispose(bool disposing);
}
public class System.Printing.IndexedProperties.PrintProcessorProperty : PrintProperty {
    private PrintProcessorValueChanged changeHandler;
    private PrintProcessor value;
    internal PrintProcessorValueChanged ChangeHandler { get; internal set; }
    public object Value { get; public set; }
    internal PrintProcessorProperty(string attributeName, object attributeValue, MulticastDelegate delegate);
    internal PrintProcessorProperty(string attributeName, MulticastDelegate delegate);
    public PrintProcessorProperty(string attributeName, object attributeValue);
    public PrintProcessorProperty(string attributeName);
    public virtual object get_Value();
    public virtual void set_Value(object objValue);
    internal PrintProcessorValueChanged get_ChangeHandler();
    internal void set_ChangeHandler(PrintProcessorValueChanged newHandler);
    public static PrintProcessor op_Implicit(PrintProcessorProperty attribRef);
    public static PrintProcessor op_Implicit(PrintProcessorProperty modreq(System.Runtime.CompilerServices.IsImplicitlyDereferenced) attribRef);
    internal static PrintProcessor ToPrintProcessor(PrintProcessorProperty modreq(System.Runtime.CompilerServices.IsImplicitlyDereferenced) attribRef);
    internal static PrintProperty Create(string attributeName, object attribValue, MulticastDelegate delegate);
    internal static PrintProperty Create(string attributeName, MulticastDelegate delegate);
    internal static PrintProperty Create(string attributeName, object attributeValue);
    internal static PrintProperty Create(string attributeName);
    protected sealed virtual void InternalDispose(bool disposing);
}
public abstract class System.Printing.IndexedProperties.PrintProperty : object {
    private string propertyName;
    private object syncRoot;
    private bool isDirty;
    private bool isDisposed;
    private bool isInitialized;
    private bool isInternallyInitialized;
    private bool isLinked;
    protected bool IsDisposed { get; protected set; }
    internal bool IsLinked { get; internal set; }
    internal bool IsDirty { get; internal set; }
    internal bool IsInternallyInitialized { get; internal set; }
    protected internal bool IsInitialized { get; protected set; }
    public object Value { get; public set; }
    public string Name { get; }
    protected PrintProperty(string attributeName);
    private void ~PrintProperty();
    public virtual string get_Name();
    public abstract virtual object get_Value();
    public abstract virtual void set_Value(object objValue);
    protected internal bool get_IsInitialized();
    protected void set_IsInitialized(bool setInitialized);
    public virtual void OnDeserialization(object sender);
    internal bool get_IsInternallyInitialized();
    internal void set_IsInternallyInitialized(bool A_0);
    internal bool get_IsDirty();
    internal void set_IsDirty(bool setDirty);
    internal bool get_IsLinked();
    internal void set_IsLinked(bool setLinked);
    protected virtual void InternalDispose(bool disposing);
    private void !PrintProperty();
    protected bool get_IsDisposed();
    protected void set_IsDisposed(bool disposing);
    protected virtual void Dispose(bool A_0);
    public sealed virtual void Dispose();
    protected virtual void Finalize();
}
[DefaultMemberAttribute("Property")]
public class System.Printing.IndexedProperties.PrintPropertyDictionary : Hashtable {
    protected PrintPropertyDictionary(SerializationInfo info, StreamingContext context);
    private void ~PrintPropertyDictionary();
    public void Add(PrintProperty attributeValue);
    public virtual void OnDeserialization(object sender);
    public virtual void GetObjectData(SerializationInfo info, StreamingContext context);
    public PrintProperty GetProperty(string attribName);
    public void SetProperty(string attribName, PrintProperty attribValue);
    protected virtual void Dispose(bool A_0);
    public sealed virtual void Dispose();
}
public class System.Printing.IndexedProperties.PrintQueueAttributeProperty : PrintProperty {
    private PrintQueueAttributePropertyChanged changeHandler;
    private PrintQueueAttributes value;
    internal PrintQueueAttributePropertyChanged ChangeHandler { get; internal set; }
    public object Value { get; public set; }
    internal PrintQueueAttributeProperty(string attributeName, object attributeValue, MulticastDelegate delegate);
    internal PrintQueueAttributeProperty(string attributeName, MulticastDelegate delegate);
    public PrintQueueAttributeProperty(string attributeName, object attributeValue);
    public PrintQueueAttributeProperty(string attributeName);
    public virtual object get_Value();
    public virtual void set_Value(object objValue);
    internal PrintQueueAttributePropertyChanged get_ChangeHandler();
    internal void set_ChangeHandler(PrintQueueAttributePropertyChanged newHandler);
    public static PrintQueueAttributes op_Implicit(PrintQueueAttributeProperty attributeRef);
    public static PrintQueueAttributes op_Implicit(PrintQueueAttributeProperty modreq(System.Runtime.CompilerServices.IsImplicitlyDereferenced) attributeRef);
    internal static PrintProperty Create(string attributeName, object attribValue, MulticastDelegate delegate);
    internal static PrintProperty Create(string attributeName, MulticastDelegate delegate);
    internal static PrintProperty Create(string attributeName, object attributeValue);
    internal static PrintProperty Create(string attributeName);
    protected sealed virtual void InternalDispose(bool disposing);
}
public class System.Printing.IndexedProperties.PrintQueueProperty : PrintProperty {
    private PrintQueueValueChanged changeHandler;
    private PrintQueue value;
    internal PrintQueueValueChanged ChangeHandler { get; internal set; }
    public object Value { get; public set; }
    internal PrintQueueProperty(string attributeName, object attributeValue, MulticastDelegate delegate);
    internal PrintQueueProperty(string attributeName, MulticastDelegate delegate);
    public PrintQueueProperty(string attributeName, object attributeValue);
    public PrintQueueProperty(string attributeName);
    public virtual object get_Value();
    public virtual void set_Value(object objValue);
    internal PrintQueueValueChanged get_ChangeHandler();
    internal void set_ChangeHandler(PrintQueueValueChanged newHandler);
    public static PrintQueue op_Implicit(PrintQueueProperty attribRef);
    public static PrintQueue op_Implicit(PrintQueueProperty modreq(System.Runtime.CompilerServices.IsImplicitlyDereferenced) attribRef);
    internal static PrintQueue ToPrintQueue(PrintQueueProperty modreq(System.Runtime.CompilerServices.IsImplicitlyDereferenced) attribRef);
    internal static PrintProperty Create(string attributeName, object attribValue, MulticastDelegate delegate);
    internal static PrintProperty Create(string attributeName, MulticastDelegate delegate);
    internal static PrintProperty Create(string attributeName, object attributeValue);
    internal static PrintProperty Create(string attributeName);
    protected sealed virtual void InternalDispose(bool disposing);
}
public class System.Printing.IndexedProperties.PrintQueueStatusProperty : PrintProperty {
    private PrintQueueStatusValueChanged changeHandler;
    private PrintQueueStatus value;
    internal PrintQueueStatusValueChanged ChangeHandler { get; internal set; }
    public object Value { get; public set; }
    internal PrintQueueStatusProperty(string attributeName, object attributeValue, MulticastDelegate delegate);
    internal PrintQueueStatusProperty(string attributeName, MulticastDelegate delegate);
    public PrintQueueStatusProperty(string attributeName, object attributeValue);
    public PrintQueueStatusProperty(string attributeName);
    public virtual object get_Value();
    public virtual void set_Value(object objValue);
    internal PrintQueueStatusValueChanged get_ChangeHandler();
    internal void set_ChangeHandler(PrintQueueStatusValueChanged newHandler);
    public static PrintQueueStatus op_Implicit(PrintQueueStatusProperty modreq(System.Runtime.CompilerServices.IsImplicitlyDereferenced) attributeRef);
    public static PrintQueueStatus op_Implicit(PrintQueueStatusProperty attributeRef);
    internal static PrintProperty Create(string attributeName, object attribValue, MulticastDelegate delegate);
    internal static PrintProperty Create(string attributeName, MulticastDelegate delegate);
    internal static PrintProperty Create(string attributeName, object attributeValue);
    internal static PrintProperty Create(string attributeName);
    protected sealed virtual void InternalDispose(bool disposing);
}
public class System.Printing.IndexedProperties.PrintServerLoggingProperty : PrintProperty {
    private PrintServerEventLoggingValueChanged changeHandler;
    private PrintServerEventLoggingTypes value;
    internal PrintServerEventLoggingValueChanged ChangeHandler { get; internal set; }
    public object Value { get; public set; }
    internal PrintServerLoggingProperty(string attributeName, object attributeValue, MulticastDelegate delegate);
    internal PrintServerLoggingProperty(string attributeName, MulticastDelegate delegate);
    public PrintServerLoggingProperty(string attributeName, object attributeValue);
    public PrintServerLoggingProperty(string attributeName);
    public virtual object get_Value();
    public virtual void set_Value(object objValue);
    internal PrintServerEventLoggingValueChanged get_ChangeHandler();
    internal void set_ChangeHandler(PrintServerEventLoggingValueChanged newHandler);
    public static PrintServerEventLoggingTypes op_Implicit(PrintServerLoggingProperty attribRef);
    public static PrintServerEventLoggingTypes op_Implicit(PrintServerLoggingProperty modreq(System.Runtime.CompilerServices.IsImplicitlyDereferenced) attribRef);
    internal static Enum modopt(System.Printing.PrintServerEventLoggingTypes) modopt(System.Runtime.CompilerServices.IsBoxed) ToPrintServerEventLoggingTypes(PrintServerLoggingProperty modreq(System.Runtime.CompilerServices.IsImplicitlyDereferenced) attribRef);
    internal static PrintProperty Create(string attributeName, object attribValue, MulticastDelegate delegate);
    internal static PrintProperty Create(string attributeName, MulticastDelegate delegate);
    internal static PrintProperty Create(string attributeName, object attributeValue);
    internal static PrintProperty Create(string attributeName);
    protected sealed virtual void InternalDispose(bool disposing);
}
public class System.Printing.IndexedProperties.PrintServerProperty : PrintProperty {
    private PrintServerValueChanged changeHandler;
    private PrintServer value;
    internal PrintServerValueChanged ChangeHandler { get; internal set; }
    public object Value { get; public set; }
    internal PrintServerProperty(string attributeName, object attributeValue, MulticastDelegate delegate);
    internal PrintServerProperty(string attributeName, MulticastDelegate delegate);
    public PrintServerProperty(string attributeName, object attributeValue);
    public PrintServerProperty(string attributeName);
    public virtual object get_Value();
    public virtual void set_Value(object objValue);
    internal PrintServerValueChanged get_ChangeHandler();
    internal void set_ChangeHandler(PrintServerValueChanged newHandler);
    public static PrintServer op_Implicit(PrintServerProperty attribRef);
    public static PrintServer op_Implicit(PrintServerProperty modreq(System.Runtime.CompilerServices.IsImplicitlyDereferenced) attribRef);
    internal static PrintServer ToPrintServer(PrintServerProperty modreq(System.Runtime.CompilerServices.IsImplicitlyDereferenced) attribRef);
    internal static PrintProperty Create(string attributeName, object attribValue, MulticastDelegate delegate);
    internal static PrintProperty Create(string attributeName, MulticastDelegate delegate);
    internal static PrintProperty Create(string attributeName, object attributeValue);
    internal static PrintProperty Create(string attributeName);
    protected sealed virtual void InternalDispose(bool disposing);
}
public class System.Printing.IndexedProperties.PrintStreamProperty : PrintProperty {
    private StreamValueChanged changeHandler;
    private Stream value;
    internal StreamValueChanged ChangeHandler { get; internal set; }
    public object Value { get; public set; }
    internal PrintStreamProperty(string attributeName, object attributeValue, MulticastDelegate delegate);
    internal PrintStreamProperty(string attributeName, MulticastDelegate delegate);
    public PrintStreamProperty(string attributeName, object attributeValue);
    public PrintStreamProperty(string attributeName);
    public virtual object get_Value();
    public virtual void set_Value(object objValue);
    internal StreamValueChanged get_ChangeHandler();
    internal void set_ChangeHandler(StreamValueChanged newHandler);
    public static Stream op_Implicit(PrintStreamProperty attributeRef);
    public static Stream op_Implicit(PrintStreamProperty modreq(System.Runtime.CompilerServices.IsImplicitlyDereferenced) attributeRef);
    internal static Stream ToStream(PrintStreamProperty modreq(System.Runtime.CompilerServices.IsImplicitlyDereferenced) attributeRef);
    internal static PrintProperty Create(string attributeName, object attribValue, MulticastDelegate delegate);
    internal static PrintProperty Create(string attributeName, MulticastDelegate delegate);
    internal static PrintProperty Create(string attributeName, object attributeValue);
    internal static PrintProperty Create(string attributeName);
    protected sealed virtual void InternalDispose(bool disposing);
}
public class System.Printing.IndexedProperties.PrintStringProperty : PrintProperty {
    private StringValueChanged changeHandler;
    private string value;
    internal StringValueChanged ChangeHandler { get; internal set; }
    public object Value { get; public set; }
    internal PrintStringProperty(string attributeName, object attributeValue, MulticastDelegate delegate);
    internal PrintStringProperty(string attributeName, MulticastDelegate delegate);
    public PrintStringProperty(string attributeName, object attributeValue);
    public PrintStringProperty(string attributeName);
    public virtual object get_Value();
    public virtual void set_Value(object objValue);
    internal StringValueChanged get_ChangeHandler();
    internal void set_ChangeHandler(StringValueChanged newHandler);
    public static string op_Implicit(PrintStringProperty modreq(System.Runtime.CompilerServices.IsImplicitlyDereferenced) attributeRef);
    public static string op_Implicit(PrintStringProperty attributeRef);
    internal static string ToString(PrintStringProperty modreq(System.Runtime.CompilerServices.IsImplicitlyDereferenced) attributeRef);
    internal static PrintProperty Create(string attributeName, object attribValue, MulticastDelegate delegate);
    internal static PrintProperty Create(string attributeName, MulticastDelegate delegate);
    internal static PrintProperty Create(string attributeName, object attributeValue);
    internal static PrintProperty Create(string attributeName);
    protected sealed virtual void InternalDispose(bool disposing);
}
internal class System.Printing.IndexedProperties.PrintSystemJobTypeAttributeValue : PrintProperty {
    private JobTypeValueChanged changeHandler;
    private PrintJobType value;
    internal JobTypeValueChanged ChangeHandler { get; internal set; }
    public object Value { get; public set; }
    internal PrintSystemJobTypeAttributeValue(string attributeName, object attributeValue, MulticastDelegate delegate);
    internal PrintSystemJobTypeAttributeValue(string attributeName, MulticastDelegate delegate);
    public PrintSystemJobTypeAttributeValue(string attributeName, object attributeValue);
    public PrintSystemJobTypeAttributeValue(string attributeName);
    public virtual object get_Value();
    public virtual void set_Value(object objValue);
    internal JobTypeValueChanged get_ChangeHandler();
    internal void set_ChangeHandler(JobTypeValueChanged newHandler);
    public static PrintJobType op_Implicit(PrintSystemJobTypeAttributeValue attribRef);
    public static PrintJobType op_Implicit(PrintSystemJobTypeAttributeValue modreq(System.Runtime.CompilerServices.IsImplicitlyDereferenced) attribRef);
    internal static Enum modopt(System.Printing.PrintJobType) modopt(System.Runtime.CompilerServices.IsBoxed) ToPrintJobType(PrintSystemJobTypeAttributeValue modreq(System.Runtime.CompilerServices.IsImplicitlyDereferenced) attribRef);
    internal static PrintProperty Create(string attributeName, object attribValue, MulticastDelegate delegate);
    internal static PrintProperty Create(string attributeName, MulticastDelegate delegate);
    internal static PrintProperty Create(string attributeName, object attributeValue);
    internal static PrintProperty Create(string attributeName);
    protected sealed virtual void InternalDispose(bool disposing);
}
public class System.Printing.IndexedProperties.PrintSystemTypeProperty : PrintProperty {
    private SystemTypeValueChanged changeHandler;
    private Type value;
    internal SystemTypeValueChanged ChangeHandler { get; internal set; }
    public object Value { get; public set; }
    internal PrintSystemTypeProperty(string attributeName, object attributeValue, MulticastDelegate delegate);
    internal PrintSystemTypeProperty(string attributeName, MulticastDelegate delegate);
    public PrintSystemTypeProperty(string attributeName, object attributeValue);
    public PrintSystemTypeProperty(string attributeName);
    public virtual object get_Value();
    public virtual void set_Value(object objValue);
    internal SystemTypeValueChanged get_ChangeHandler();
    internal void set_ChangeHandler(SystemTypeValueChanged newHandler);
    public static Type op_Implicit(PrintSystemTypeProperty attribRef);
    public static Type op_Implicit(PrintSystemTypeProperty modreq(System.Runtime.CompilerServices.IsImplicitlyDereferenced) attribRef);
    internal static Type ToType(PrintSystemTypeProperty modreq(System.Runtime.CompilerServices.IsImplicitlyDereferenced) attribRef);
    internal static PrintProperty Create(string attributeName, object attribValue, MulticastDelegate delegate);
    internal static PrintProperty Create(string attributeName, MulticastDelegate delegate);
    internal static PrintProperty Create(string attributeName, object attributeValue);
    internal static PrintProperty Create(string attributeName);
    protected sealed virtual void InternalDispose(bool disposing);
}
public class System.Printing.IndexedProperties.PrintThreadPriorityProperty : PrintProperty {
    private ThreadPriorityValueChanged changeHandler;
    private ThreadPriority value;
    internal ThreadPriorityValueChanged ChangeHandler { get; internal set; }
    public object Value { get; public set; }
    internal PrintThreadPriorityProperty(string attributeName, object attributeValue, MulticastDelegate delegate);
    internal PrintThreadPriorityProperty(string attributeName, MulticastDelegate delegate);
    public PrintThreadPriorityProperty(string attributeName, object attributeValue);
    public PrintThreadPriorityProperty(string attributeName);
    public virtual object get_Value();
    public virtual void set_Value(object objValue);
    internal ThreadPriorityValueChanged get_ChangeHandler();
    internal void set_ChangeHandler(ThreadPriorityValueChanged newHandler);
    public static ThreadPriority op_Implicit(PrintThreadPriorityProperty attribRef);
    public static ThreadPriority op_Implicit(PrintThreadPriorityProperty modreq(System.Runtime.CompilerServices.IsImplicitlyDereferenced) attribRef);
    internal static Enum modopt(System.Threading.ThreadPriority) modopt(System.Runtime.CompilerServices.IsBoxed) ToThreadPriority(PrintThreadPriorityProperty modreq(System.Runtime.CompilerServices.IsImplicitlyDereferenced) attribRef);
    internal static PrintProperty Create(string attributeName, object attribValue, MulticastDelegate delegate);
    internal static PrintProperty Create(string attributeName, MulticastDelegate delegate);
    internal static PrintProperty Create(string attributeName, object attributeValue);
    internal static PrintProperty Create(string attributeName);
    protected sealed virtual void InternalDispose(bool disposing);
}
public class System.Printing.IndexedProperties.PrintTicketProperty : PrintProperty {
    private PrintTicketValueChanged changeHandler;
    private PrintTicket value;
    internal PrintTicketValueChanged ChangeHandler { get; internal set; }
    public object Value { get; public set; }
    internal PrintTicketProperty(string attributeName, object attributeValue, MulticastDelegate delegate);
    internal PrintTicketProperty(string attributeName, MulticastDelegate delegate);
    public PrintTicketProperty(string attributeName, object attributeValue);
    public PrintTicketProperty(string attributeName);
    public virtual object get_Value();
    public virtual void set_Value(object objValue);
    internal PrintTicketValueChanged get_ChangeHandler();
    internal void set_ChangeHandler(PrintTicketValueChanged newHandler);
    public static PrintTicket op_Implicit(PrintTicketProperty attribRef);
    public static PrintTicket op_Implicit(PrintTicketProperty modreq(System.Runtime.CompilerServices.IsImplicitlyDereferenced) attribRef);
    internal static PrintTicket ToPrintTicket(PrintTicketProperty modreq(System.Runtime.CompilerServices.IsImplicitlyDereferenced) attribRef);
    internal static PrintProperty Create(string attributeName, object attribValue, MulticastDelegate delegate);
    internal static PrintProperty Create(string attributeName, MulticastDelegate delegate);
    internal static PrintProperty Create(string attributeName, object attributeValue);
    internal static PrintProperty Create(string attributeName);
    protected sealed virtual void InternalDispose(bool disposing);
}
internal class System.Printing.InternalExceptionResourceManager : ResourceManager {
}
internal class System.Printing.InternalPrintSystemException : object {
    private int hresult;
    private static Int32 modopt(System.Runtime.CompilerServices.IsConst) defaultWin32ErrorMessageLength;
    internal int HResult { get; }
    internal InternalPrintSystemException(int lastWin32Error);
    private static InternalPrintSystemException();
    internal int get_HResult();
    internal static void ThrowIfErrorIsNot(int lastWin32Error, int expectedLastWin32Error);
    internal static void ThrowIfLastErrorIsNot(int expectedLastWin32Error);
    internal static void ThrowLastError();
    internal static void ThrowIfNotSuccess(int lastWin32Error);
    internal static void ThrowIfNotCOMSuccess(Int32 modopt(System.Runtime.CompilerServices.IsLong) hresultCode);
}
internal interface System.Printing.IPrintSystemPathResolver {
    public abstract virtual PrintSystemProtocol Resolve(PrintPropertyDictionary collection);
}
internal enum System.Printing.JobOperation : Enum {
    public int value__;
    public static JobOperation None;
    public static JobOperation JobProduction;
    public static JobOperation JobConsumption;
}
public class System.Printing.LocalPrintServer : PrintServer {
    private static Hashtable attributeNameTypes;
    private static String[] primaryAttributeNames;
    private static Type[] primaryAttributeTypes;
    private PrintQueue defaultPrintQueue;
    private String[] refreshPropertiesFilter;
    private PrintSystemDispatcherObject accessVerifier;
    public PrintQueue DefaultPrintQueue { get; public set; }
    internal LocalPrintServer(PrintServerType type);
    public LocalPrintServer(String[] propertiesFilter, PrintSystemDesiredAccess desiredAccess);
    public LocalPrintServer(LocalPrintServerIndexedProperty[] propertiesFilter, PrintSystemDesiredAccess desiredAccess);
    public LocalPrintServer(PrintSystemDesiredAccess desiredAccess);
    public LocalPrintServer(String[] propertiesFilter);
    public LocalPrintServer(LocalPrintServerIndexedProperty[] propertiesFilter);
    private static LocalPrintServer();
    public void set_DefaultPrintQueue(PrintQueue printQueue);
    public PrintQueue get_DefaultPrintQueue();
    public static PrintQueue GetDefaultPrintQueue();
    public bool ConnectToPrintQueue(string printQueuePath);
    public bool ConnectToPrintQueue(PrintQueue printer);
    public bool DisconnectFromPrintQueue(PrintQueue printer);
    public bool DisconnectFromPrintQueue(string printQueuePath);
    public sealed virtual void Commit();
    public sealed virtual void Refresh();
    internal static void RegisterAttributesNamesTypes();
    internal static PrintProperty CreateAttributeNoValue(string attributeName);
    internal static PrintProperty CreateAttributeValue(string attributeName, object attributeValue);
    internal static PrintProperty CreateAttributeNoValueLinked(string attributeName, MulticastDelegate delegate);
    internal static PrintProperty CreateAttributeValueLinked(string attributeName, object attributeValue, MulticastDelegate delegate);
    private void Initialize();
    private static String[] PrimaryAttributeNames();
    private static Type[] PrimaryAttributeTypes();
    private static String[] GetAllPropertiesFilter(String[] propertiesFilter);
    private static String[] GetAllPropertiesFilter();
    private String[] GetAlteredPropertiesFilter();
    private void GetDataFromServer(string property, bool forceRefresh);
    private void GetUnInitializedData(String[] properties);
    private MulticastDelegate[] CreatePropertiesDelegates();
    private void ComitDirtyData(String[] properties);
    private String[] ConvertPropertyFilterToString(LocalPrintServerIndexedProperty[] propertiesFilter);
    private string GetFullPrintQueueName(PrintQueue queue);
    private void VerifyAccess();
}
public enum System.Printing.LocalPrintServerIndexedProperty : Enum {
    public int value__;
    public static LocalPrintServerIndexedProperty DefaultSpoolDirectory;
    public static LocalPrintServerIndexedProperty PortThreadPriority;
    public static LocalPrintServerIndexedProperty DefaultPortThreadPriority;
    public static LocalPrintServerIndexedProperty SchedulerPriority;
    public static LocalPrintServerIndexedProperty DefaultSchedulerPriority;
    public static LocalPrintServerIndexedProperty BeepEnabled;
    public static LocalPrintServerIndexedProperty NetPopup;
    public static LocalPrintServerIndexedProperty EventLog;
    public static LocalPrintServerIndexedProperty MajorVersion;
    public static LocalPrintServerIndexedProperty MinorVersion;
    public static LocalPrintServerIndexedProperty RestartJobOnPoolTimeout;
    public static LocalPrintServerIndexedProperty RestartJobOnPoolEnabled;
    public static LocalPrintServerIndexedProperty DefaultPrintQueue;
}
public class System.Printing.PrintDocumentImageableArea : object {
    private double _originWidth;
    private double _originHeight;
    private double _extentWidth;
    private double _extentHeight;
    private double _mediaSizeWidth;
    private double _mediaSizeHeight;
    private PrintSystemDispatcherObject _accessVerifier;
    public double MediaSizeHeight { get; internal set; }
    public double MediaSizeWidth { get; internal set; }
    public double ExtentHeight { get; internal set; }
    public double ExtentWidth { get; internal set; }
    public double OriginHeight { get; internal set; }
    public double OriginWidth { get; internal set; }
    public double get_OriginWidth();
    internal void set_OriginWidth(double originWidth);
    public double get_OriginHeight();
    internal void set_OriginHeight(double originHeight);
    public double get_ExtentWidth();
    internal void set_ExtentWidth(double extentWidth);
    public double get_ExtentHeight();
    internal void set_ExtentHeight(double extentHeight);
    public double get_MediaSizeWidth();
    internal void set_MediaSizeWidth(double mediaSizeWidth);
    public double get_MediaSizeHeight();
    internal void set_MediaSizeHeight(double mediaSizeHeight);
    private void VerifyAccess();
}
public class System.Printing.PrintDriver : PrintFilter {
    private PrintSystemDispatcherObject accessVerifier;
    private static Hashtable attributeNameTypes;
    internal PrintDriver(string driverName);
    private static PrintDriver();
    public sealed virtual void Commit();
    public sealed virtual void Refresh();
    internal sealed virtual PrintPropertyDictionary get_InternalPropertiesCollection(string attributeName);
    internal static void RegisterAttributesNamesTypes();
    internal static PrintProperty CreateAttributeNoValue(string A_0);
    internal static PrintProperty CreateAttributeValue(string A_0, object A_1);
    internal static PrintProperty CreateAttributeNoValueLinked(string A_0, MulticastDelegate A_1);
    internal static PrintProperty CreateAttributeValueLinked(string A_0, object A_1, MulticastDelegate A_2);
    protected sealed virtual void InternalDispose(bool disposing);
    private void VerifyAccess();
}
public abstract class System.Printing.PrintFilter : PrintSystemObject {
    internal PrintFilter(string filterName);
    protected virtual void InternalDispose(bool disposing);
}
public class System.Printing.PrintJobInfoCollection : PrintSystemObjects {
    private Queue`1<PrintSystemJobInfo> jobInfoCollection;
    private PrintQueue hostingPrintQueue;
    private PrintSystemDispatcherObject accessVerifier;
    public PrintJobInfoCollection(PrintQueue printQueue, String[] propertyFilter);
    private void ~PrintJobInfoCollection();
    public virtual override IEnumerator GetNonGenericEnumerator();
    public virtual IEnumerator`1<PrintSystemJobInfo> GetEnumerator();
    public void Add(PrintSystemJobInfo printObject);
    private void VerifyAccess();
    protected virtual void Dispose(bool A_0);
}
public enum System.Printing.PrintJobPriority : Enum {
    public int value__;
    public static PrintJobPriority None;
    public static PrintJobPriority Minimum;
    public static PrintJobPriority Default;
    public static PrintJobPriority Maximum;
}
public class System.Printing.PrintJobSettings : object {
    private PrintSystemDispatcherObject _accessVerifier;
    private PrintTicket _printTicket;
    private string _description;
    public string Description { get; public set; }
    public PrintTicket CurrentPrintTicket { get; public set; }
    internal PrintJobSettings(PrintTicket userPrintTicket);
    public PrintTicket get_CurrentPrintTicket();
    public void set_CurrentPrintTicket(PrintTicket printTicket);
    public string get_Description();
    public void set_Description(string description);
    private void VerifyAccess();
}
[FlagsAttribute]
public enum System.Printing.PrintJobStatus : Enum {
    public int value__;
    public static PrintJobStatus None;
    public static PrintJobStatus Paused;
    public static PrintJobStatus Error;
    public static PrintJobStatus Deleting;
    public static PrintJobStatus Spooling;
    public static PrintJobStatus Printing;
    public static PrintJobStatus Offline;
    public static PrintJobStatus PaperOut;
    public static PrintJobStatus Printed;
    public static PrintJobStatus Deleted;
    public static PrintJobStatus Blocked;
    public static PrintJobStatus UserIntervention;
    public static PrintJobStatus Restarted;
    public static PrintJobStatus Completed;
    public static PrintJobStatus Retained;
}
public enum System.Printing.PrintJobType : Enum {
    public int value__;
    public static PrintJobType None;
    public static PrintJobType Xps;
    public static PrintJobType Legacy;
}
public class System.Printing.PrintPort : PrintSystemObject {
    private static Hashtable attributeNameTypes;
    private PrintSystemDispatcherObject accessVerifier;
    internal PrintPort(string portName);
    private static PrintPort();
    public sealed virtual void Commit();
    public sealed virtual void Refresh();
    internal sealed virtual PrintPropertyDictionary get_InternalPropertiesCollection(string attributeName);
    internal static void RegisterAttributesNamesTypes();
    internal static PrintProperty CreateAttributeNoValue(string A_0);
    internal static PrintProperty CreateAttributeValue(string A_0, object A_1);
    internal static PrintProperty CreateAttributeNoValueLinked(string A_0, MulticastDelegate A_1);
    internal static PrintProperty CreateAttributeValueLinked(string A_0, object A_1, MulticastDelegate A_2);
    protected sealed virtual void InternalDispose(bool disposing);
    private void VerifyAccess();
}
public class System.Printing.PrintProcessor : PrintFilter {
    private PrintSystemDispatcherObject accessVerifier;
    private static Hashtable attributeNameTypes;
    internal PrintProcessor(string printProcessorName);
    private static PrintProcessor();
    public sealed virtual void Commit();
    public sealed virtual void Refresh();
    internal sealed virtual PrintPropertyDictionary get_InternalPropertiesCollection(string attributeName);
    internal static void RegisterAttributesNamesTypes();
    internal static PrintProperty CreateAttributeNoValue(string A_0);
    internal static PrintProperty CreateAttributeValue(string A_0, object A_1);
    internal static PrintProperty CreateAttributeNoValueLinked(string A_0, MulticastDelegate A_1);
    internal static PrintProperty CreateAttributeValueLinked(string A_0, object A_1, MulticastDelegate A_2);
    protected sealed virtual void InternalDispose(bool disposing);
    private void VerifyAccess();
}
public class System.Printing.PrintQueue : PrintSystemObject {
    internal static string defaultXpsJobName;
    private bool isDisposed;
    private int priority;
    private int defaultPriority;
    private int startTime;
    private int untilTime;
    private int averagePagesPerMinute;
    private int numberOfJobs;
    private string shareName;
    private string comment;
    private string location;
    private string description;
    private string separatorFile;
    private PrintTicket userPrintTicket;
    private PrintTicket defaultPrintTicket;
    private PrintQueueAttributes queueAttributes;
    private PrintQueueStatus queueStatus;
    private PrintPort queuePort;
    private PrintDriver queueDriver;
    private PrintProcessor queuePrintProcessor;
    private PrintServer hostingPrintServer;
    private string hostingPrintServerName;
    private PrintTicketManager printTicketManager;
    private PrintJobSettings _currentJobSettings;
    private bool isPaused;
    private bool isInError;
    private bool isPendingDeletion;
    private bool isPaperJammed;
    private bool isOutOfPaper;
    private bool isManualFeedRequired;
    private bool hasPaperProblem;
    private bool isOffline;
    private bool isIOActive;
    private bool isBusy;
    private bool isPrinting;
    private bool isOutputBinFull;
    private bool isNotAvailable;
    private bool isWaiting;
    private bool isProcessing;
    private bool isInitializing;
    private bool isWarmingUp;
    private bool isTonerLow;
    private bool hasNoToner;
    private bool doPagePunt;
    private bool needUserIntervention;
    private bool isOutOfMemory;
    private bool isDoorOpened;
    private bool isServerUnknown;
    private bool isPowerSaveOn;
    private bool printingIsCancelled;
    private bool isQueued;
    private bool isDirect;
    private bool isShared;
    private bool isHidden;
    private bool isDevQueryEnabled;
    private bool arePrintedJobsKept;
    private bool areCompletedJobsScheduledFirst;
    private bool isBidiEnabled;
    private bool isRawOnlyEnabled;
    private bool isPublished;
    private bool isXpsDevice;
    private bool runsInPartialTrust;
    private static String[] primaryAttributeNames;
    private static Type[] primaryAttributeTypes;
    private static String[] secondaryAttributeNames;
    private static Type[] secondaryAttributeTypes;
    private static String[] upLevelAttributeName;
    private static String[] downLevelAttributeName;
    private Hashtable collectionsTable;
    private static Hashtable attributeNameTypes;
    private static Hashtable upLevelToDownLevelMapping;
    private bool isBrowsable;
    private String[] refreshPropertiesFilter;
    private string fullQueueName;
    private PrinterThunkHandler printerThunkHandler;
    private PrintPropertyDictionary thunkPropertiesCollection;
    private int clientPrintSchemaVersion;
    private bool isWriterAttached;
    private XpsDocument xpsDocument;
    private PrintQueueStream writerStream;
    private Byte[] userDevMode;
    private Byte[] defaultDevMode;
    private PrintSystemDispatcherObject accessVerifier;
    private object _lockObject;
    private XpsCompatiblePrinter xpsCompatiblePrinter;
    unknown IXpsOMPackageWriter XpsOMPackageWriter {internal set; }
    internal PrinterThunkHandler PrinterThunkHandler { get; }
    unknown int Attributes {internal set; }
    unknown int Status {internal set; }
    unknown string QueuePrintProcessorName {internal set; }
    unknown string QueuePortName {internal set; }
    unknown string QueueDriverName {internal set; }
    unknown Byte[] UserDevMode {internal set; }
    unknown Byte[] DefaultDevMode {internal set; }
    unknown string HostingPrintServerName {internal set; }
    public bool InPartialTrust { get; public set; }
    public int ClientPrintSchemaVersion { get; }
    public static int MaxPrintSchemaVersion { get; }
    public bool IsXpsDevice { get; internal set; }
    public bool IsPublished { get; }
    public bool IsRawOnlyEnabled { get; }
    public bool IsBidiEnabled { get; }
    public bool ScheduleCompletedJobsFirst { get; }
    public bool KeepPrintedJobs { get; }
    public bool IsDevQueryEnabled { get; }
    public bool IsHidden { get; }
    public bool IsShared { get; }
    public bool IsDirect { get; }
    public bool IsQueued { get; }
    public bool IsPowerSaveOn { get; }
    public bool IsServerUnknown { get; }
    public bool IsDoorOpened { get; }
    public bool IsOutOfMemory { get; }
    public bool NeedUserIntervention { get; }
    public bool PagePunt { get; }
    public bool HasToner { get; }
    public bool IsTonerLow { get; }
    public bool IsWarmingUp { get; }
    public bool IsInitializing { get; }
    public bool IsProcessing { get; }
    public bool IsWaiting { get; }
    public bool IsNotAvailable { get; }
    public bool IsOutputBinFull { get; }
    public bool IsPrinting { get; }
    public bool IsBusy { get; }
    public bool IsIOActive { get; }
    public bool IsOffline { get; }
    public bool HasPaperProblem { get; }
    public bool IsManualFeedRequired { get; }
    public bool IsOutOfPaper { get; }
    public bool IsPaperJammed { get; }
    public bool IsPendingDeletion { get; }
    public bool IsInError { get; }
    public bool IsPaused { get; }
    public PrintQueueAttributes QueueAttributes { get; }
    public PrintQueueStatus QueueStatus { get; }
    public string FullName { get; }
    public PrintServer HostingPrintServer { get; protected set; }
    public PrintProcessor QueuePrintProcessor { get; public set; }
    public PrintPort QueuePort { get; public set; }
    public PrintDriver QueueDriver { get; public set; }
    public PrintTicket DefaultPrintTicket { get; public set; }
    public PrintTicket UserPrintTicket { get; public set; }
    public string SeparatorFile { get; public set; }
    public string Description { get; internal set; }
    public string Location { get; public set; }
    public string Comment { get; public set; }
    public string ShareName { get; public set; }
    public int NumberOfJobs { get; internal set; }
    public int AveragePagesPerMinute { get; }
    public int UntilTimeOfDay { get; public set; }
    public int StartTimeOfDay { get; public set; }
    public int DefaultPriority { get; public set; }
    public string Name { get; public set; }
    public int Priority { get; public set; }
    public PrintJobSettings CurrentJobSettings { get; }
    public bool PrintingIsCancelled { get; public set; }
    internal PrintQueue(PrintServer printServer, String[] propertyFilter);
    internal PrintQueue(String[] propertyFilter);
    public PrintQueue(PrintServer printServer, string printQueueName, PrintQueueIndexedProperty[] propertyFilter, PrintSystemDesiredAccess desiredAccess);
    public PrintQueue(PrintServer printServer, string printQueueName, String[] propertyFilter, PrintSystemDesiredAccess desiredAccess);
    public PrintQueue(PrintServer printServer, string printQueueName, int printSchemaVersion, PrintSystemDesiredAccess desiredAccess);
    public PrintQueue(PrintServer printServer, string printQueueName, PrintSystemDesiredAccess desiredAccess);
    public PrintQueue(PrintServer printServer, string printQueueName, PrintQueueIndexedProperty[] propertyFilter);
    public PrintQueue(PrintServer printServer, string printQueueName, String[] propertyFilter);
    public PrintQueue(PrintServer printServer, string printQueueName, int printSchemaVersion);
    public PrintQueue(PrintServer printServer, string printQueueName);
    private static PrintQueue();
    internal PrinterThunkHandlerBase CreatePrintThunkHandler();
    internal bool IsXpsDeviceSimulationSupported();
    internal bool IsXpsOMPrintingDisabled();
    internal bool IsXpsOMPrintingSupported();
    internal static PrintQueue Install(PrintServer printServer, string printQueueName, string driverName, String[] portNames, string printProcessorName, PrintPropertyDictionary initializationParams);
    internal static PrintQueue Install(PrintServer printServer, string printQueueName, string driverName, String[] portNames, string printProcessorName, PrintQueueAttributes printQueueAttributes, string requiredShareName, string requiredComment, string requiredLocation, string requiredSeparatorFile, int requiredPriority, int requiredDefaultPriority);
    internal static PrintQueue Install(PrintServer printServer, string printQueueName, string driverName, String[] portNames, string printProcessorName, PrintQueueAttributes printQueueAttributes, PrintQueueStringProperty requiredPrintQueueProperty, int requiredPriority, int requiredDefaultPriority);
    internal static PrintQueue Install(PrintServer printServer, string printQueueName, string driverName, String[] portNames, string printProcessorName, PrintQueueAttributes printQueueAttributes);
    internal static bool Delete(string printQueueName);
    public PrintCapabilities GetPrintCapabilities();
    public PrintCapabilities GetPrintCapabilities(PrintTicket printTicket);
    public MemoryStream GetPrintCapabilitiesAsXml();
    public MemoryStream GetPrintCapabilitiesAsXml(PrintTicket printTicket);
    public ValidationResult MergeAndValidatePrintTicket(PrintTicket basePrintTicket, PrintTicket deltaPrintTicket, PrintTicketScope scope);
    public ValidationResult MergeAndValidatePrintTicket(PrintTicket basePrintTicket, PrintTicket deltaPrintTicket);
    public virtual void Pause();
    public virtual void Resume();
    public PrintSystemJobInfo AddJob(string jobName, string documentPath, bool fastCopy, PrintTicket printTicket);
    public PrintSystemJobInfo AddJob(string jobName, string documentPath, bool fastCopy);
    public PrintSystemJobInfo AddJob(string jobName, PrintTicket printTicket);
    public PrintSystemJobInfo AddJob(string jobName);
    public PrintSystemJobInfo AddJob();
    public void set_PrintingIsCancelled(bool isCancelled);
    public bool get_PrintingIsCancelled();
    public PrintJobSettings get_CurrentJobSettings();
    public PrintSystemJobInfo GetJob(int jobId);
    public PrintJobInfoCollection GetPrintJobInfoCollection();
    public virtual void Purge();
    public virtual int get_Priority();
    public virtual void set_Priority(int inPriority);
    public sealed virtual string get_Name();
    public sealed virtual void set_Name(string objName);
    public virtual int get_DefaultPriority();
    public virtual void set_DefaultPriority(int inDefaultPriority);
    public virtual int get_StartTimeOfDay();
    public virtual void set_StartTimeOfDay(int inStartTime);
    public virtual int get_UntilTimeOfDay();
    public virtual void set_UntilTimeOfDay(int inUntilTime);
    public virtual int get_AveragePagesPerMinute();
    public virtual int get_NumberOfJobs();
    internal virtual void set_NumberOfJobs(int numOfJobs);
    public virtual string get_ShareName();
    public virtual void set_ShareName(string inShareName);
    public virtual string get_Comment();
    public virtual void set_Comment(string inComment);
    public virtual string get_Location();
    public virtual void set_Location(string inLocation);
    public virtual string get_Description();
    internal virtual void set_Description(string inDescription);
    public virtual string get_SeparatorFile();
    public virtual void set_SeparatorFile(string inSeparatorFile);
    public virtual PrintTicket get_UserPrintTicket();
    public virtual void set_UserPrintTicket(PrintTicket newUserPrintTicket);
    public virtual PrintTicket get_DefaultPrintTicket();
    public virtual void set_DefaultPrintTicket(PrintTicket newDefaultPrintTicket);
    public virtual PrintDriver get_QueueDriver();
    public virtual void set_QueueDriver(PrintDriver driver);
    public virtual PrintPort get_QueuePort();
    public virtual void set_QueuePort(PrintPort port);
    public virtual PrintProcessor get_QueuePrintProcessor();
    public virtual void set_QueuePrintProcessor(PrintProcessor printProcessor);
    public virtual PrintServer get_HostingPrintServer();
    protected virtual void set_HostingPrintServer(PrintServer printServer);
    public string get_FullName();
    public PrintQueueStatus get_QueueStatus();
    public PrintQueueAttributes get_QueueAttributes();
    public bool get_IsPaused();
    public bool get_IsInError();
    public bool get_IsPendingDeletion();
    public bool get_IsPaperJammed();
    public bool get_IsOutOfPaper();
    public bool get_IsManualFeedRequired();
    public bool get_HasPaperProblem();
    public bool get_IsOffline();
    public bool get_IsIOActive();
    public bool get_IsBusy();
    public bool get_IsPrinting();
    public bool get_IsOutputBinFull();
    public bool get_IsNotAvailable();
    public bool get_IsWaiting();
    public bool get_IsProcessing();
    public bool get_IsInitializing();
    public bool get_IsWarmingUp();
    public bool get_IsTonerLow();
    public bool get_HasToner();
    public bool get_PagePunt();
    public bool get_NeedUserIntervention();
    public bool get_IsOutOfMemory();
    public bool get_IsDoorOpened();
    public bool get_IsServerUnknown();
    public bool get_IsPowerSaveOn();
    public bool get_IsQueued();
    public bool get_IsDirect();
    public bool get_IsShared();
    public bool get_IsHidden();
    public bool get_IsDevQueryEnabled();
    public bool get_KeepPrintedJobs();
    public bool get_ScheduleCompletedJobsFirst();
    public bool get_IsBidiEnabled();
    public bool get_IsRawOnlyEnabled();
    public bool get_IsPublished();
    public bool get_IsXpsDevice();
    internal void set_IsXpsDevice(bool isMetroEnabled);
    public static int get_MaxPrintSchemaVersion();
    public int get_ClientPrintSchemaVersion();
    public void set_InPartialTrust(bool isPT);
    public bool get_InPartialTrust();
    public virtual void Commit();
    public virtual void Refresh();
    [FriendAccessAllowedAttribute]
internal ILegacyDevice GetLegacyDevice();
    [FriendAccessAllowedAttribute]
internal static UInt32 GetDpiX(ILegacyDevice legacyDevice);
    [FriendAccessAllowedAttribute]
internal static UInt32 GetDpiY(ILegacyDevice legacyDevice);
    protected sealed virtual void InternalDispose(bool disposing);
    internal virtual PrintPropertyDictionary get_InternalPropertiesCollection(string attributeName);
    internal void set_HostingPrintServerName(string printServerName);
    internal void set_DefaultDevMode(Byte[] devMode);
    internal void set_UserDevMode(Byte[] devMode);
    internal void set_QueueDriverName(string driverName);
    internal void set_QueuePortName(string portName);
    internal void set_QueuePrintProcessorName(string printProcessorName);
    internal void set_Status(int status);
    internal void set_Attributes(int attributes);
    internal PrinterThunkHandler get_PrinterThunkHandler();
    internal static String[] GetAllPropertiesFilter(String[] propertiesFilter);
    internal static String[] GetAllPropertiesFilter();
    internal String[] GetAlteredPropertiesFilter(StringCollection collection);
    internal static void RegisterAttributesNamesTypes();
    internal static PrintSystemObject Instantiate(String[] propertiesFilter);
    internal static PrintSystemObject InstantiateOptimized(object printServer, String[] propertiesFilter);
    internal static PrintProperty CreateAttributeNoValue(string A_0);
    internal static PrintProperty CreateAttributeValue(string A_0, object A_1);
    internal static PrintProperty CreateAttributeNoValueLinked(string A_0, MulticastDelegate A_1);
    internal static PrintProperty CreateAttributeValueLinked(string A_0, object A_1, MulticastDelegate A_2);
    internal static string GetAttributeNamePerPrintQueueObject(PrintProperty attributeValue);
    internal static object GetAttributeValuePerPrintQueueObject(PrintProperty attributeValue);
    internal static String[] ConvertPropertyFilterToString(PrintQueueIndexedProperty[] propertiesFilter);
    internal static string BuildPortNamesString(String[] portNames);
    internal static Stream ClonePrintTicket(Stream printTicket);
    internal void ActivateBrowsableQueue();
    public static XpsDocumentWriter CreateXpsDocumentWriter(string jobDescription, PrintDocumentImageableArea& documentImageableArea, PageRangeSelection& pageRangeSelection, PageRange& pageRange);
    public static XpsDocumentWriter CreateXpsDocumentWriter(string jobDescription, PrintDocumentImageableArea& documentImageableArea);
    public static XpsDocumentWriter CreateXpsDocumentWriter(PrintDocumentImageableArea& documentImageableArea, PageRangeSelection& pageRangeSelection, PageRange& pageRange);
    public static XpsDocumentWriter CreateXpsDocumentWriter(PrintDocumentImageableArea& documentImageableArea);
    public static XpsDocumentWriter CreateXpsDocumentWriter(Double& width, Double& height);
    public static XpsDocumentWriter CreateXpsDocumentWriter(PrintQueue printQueue);
    internal static bool IsMxdwLegacyDriver(PrintQueue printQueue);
    internal PackageSerializationManager CreateSerializationManager(bool isBatchMode, bool mustSetJobIdentifier, PrintTicket printTicket);
    internal PackageSerializationManager CreateSerializationManager(bool isBatchMode, bool mustSetJobIdentifier);
    internal PackageSerializationManager CreateSerializationManager(bool isBatchMode);
    internal PackageSerializationManager CreateAsyncSerializationManager(bool isBatchMode, bool mustSetJobIdentifier, PrintTicket printTicket);
    internal PackageSerializationManager CreateAsyncSerializationManager(bool isBatchMode);
    internal PackageSerializationManager CreateXpsOMSerializationManager(bool isBatchMode, bool isAsync, PrintTicket printTicket, bool mustSetPrintJobIdentifier);
    internal void DisposeSerializationManager(bool abort);
    internal void DisposeSerializationManager();
    internal void EnsureJobId(PackageSerializationManager manager);
    internal void set_XpsOMPackageWriter(IXpsOMPackageWriter packageWriter);
    internal int XpsDocumentEvent(XpsDocumentEventType escape, SafeHandle inputBufferSafeHandle);
    internal int XpsDocumentEventPrintTicket(XpsDocumentEventType preEscape, XpsDocumentEventType postEscape, SafeHandle inputBufferSafeHandle, XpsSerializationXpsDriverDocEventArgs e);
    internal void XpsDocumentEventCancel();
    private MulticastDelegate[] CreatePropertiesDelegates();
    private void VerifyAccess();
    private void InitializeInternalCollections();
    private void InitializePrintTickets();
    private void Initialize(PrintServer printServer, string printQueueName, String[] propertiesFilter, PrinterDefaults printerDefaults);
    private void GetUnInitializedData(string upLevelPropertyName, string downlevelPropertyName);
    private string PrepareNameForDownLevelConnectivity(string serverName, string printerName);
    private bool GetIsXpsDevice();
    private void ForwardXpsDriverDocEvent(object sender, XpsSerializationXpsDriverDocEventArgs args);
    private void ForwardXpsFixedDocumentSequenceEvent(XpsSerializationXpsDriverDocEventArgs e);
    private void ForwardXpsFixedDocumentEvent(XpsSerializationXpsDriverDocEventArgs e);
    private void ForwardXpsFixedPageEvent(XpsSerializationXpsDriverDocEventArgs e);
    private void ForwardXpsFixedDocumentSequencePrintTicket(XpsSerializationXpsDriverDocEventArgs e);
    private void ForwardXpsFixedDocumentPrintTicket(XpsSerializationXpsDriverDocEventArgs e);
    private void ForwardXpsFixedPagePrintTicket(XpsSerializationXpsDriverDocEventArgs e);
    private bool IsXpsDocumentEventSupported(XpsDocumentEventType escape);
    private static bool ShowPrintDialog(XpsDocumentWriter& xpsDocumentWriter, PrintTicket& partialTrustPrintTicket, PrintQueue& partialTrustPrintQueue, Double& width, Double& height, string jobDescription);
    private static bool ShowPrintDialogEnablePageRange(XpsDocumentWriter& xpsDocumentWriter, PrintTicket& partialTrustPrintTicket, PrintQueue& partialTrustPrintQueue, Double& width, Double& height, PageRangeSelection& pageRangeSelection, PageRange& pageRange, string jobDescription);
    private static bool GatherDataFromPrintDialog(PrintDialog printDialog, XpsDocumentWriter& writer, PrintTicket& partialTrustPrintTicket, PrintQueue& partialTrustPrintQueue, Double& width, Double& height, string jobDescription);
    private static PrintDocumentImageableArea CalculateImagableArea(PrintTicket partialTrustPrintTicket, PrintQueue partialTrustPrintQueue, double height, double width);
    private Exception CreatePrintQueueException(int hresult, string messageId);
    private static Exception CreatePrintSystemException(int hresult, string messageId);
}
[FlagsAttribute]
public enum System.Printing.PrintQueueAttributes : Enum {
    public int value__;
    public static PrintQueueAttributes None;
    public static PrintQueueAttributes Queued;
    public static PrintQueueAttributes Direct;
    public static PrintQueueAttributes Shared;
    public static PrintQueueAttributes Hidden;
    public static PrintQueueAttributes EnableDevQuery;
    public static PrintQueueAttributes KeepPrintedJobs;
    public static PrintQueueAttributes ScheduleCompletedJobsFirst;
    public static PrintQueueAttributes EnableBidi;
    public static PrintQueueAttributes RawOnly;
    public static PrintQueueAttributes Published;
}
public class System.Printing.PrintQueueCollection : PrintSystemObjects {
    private static Object modreq(System.Runtime.CompilerServices.IsVolatile) syncRoot;
    private Queue`1<PrintQueue> printQueuesCollection;
    private PrintSystemDispatcherObject accessVerifier;
    public static object SyncRoot { get; }
    public PrintQueueCollection(PrintServer printServer, String[] propertyFilter);
    public PrintQueueCollection(PrintServer printServer, String[] propertyFilter, EnumeratedPrintQueueTypes[] enumerationFlag);
    private static PrintQueueCollection();
    private void ~PrintQueueCollection();
    public virtual override IEnumerator GetNonGenericEnumerator();
    public virtual IEnumerator`1<PrintQueue> GetEnumerator();
    public static object get_SyncRoot();
    public void Add(PrintQueue printObject);
    private String[] AddNameAndHostToProperties(String[] propertyFilter);
    private void VerifyAccess();
    protected virtual void Dispose(bool A_0);
}
public enum System.Printing.PrintQueueIndexedProperty : Enum {
    public int value__;
    public static PrintQueueIndexedProperty Name;
    public static PrintQueueIndexedProperty ShareName;
    public static PrintQueueIndexedProperty Comment;
    public static PrintQueueIndexedProperty Location;
    public static PrintQueueIndexedProperty Description;
    public static PrintQueueIndexedProperty Priority;
    public static PrintQueueIndexedProperty DefaultPriority;
    public static PrintQueueIndexedProperty StartTimeOfDay;
    public static PrintQueueIndexedProperty UntilTimeOfDay;
    public static PrintQueueIndexedProperty AveragePagesPerMinute;
    public static PrintQueueIndexedProperty NumberOfJobs;
    public static PrintQueueIndexedProperty QueueAttributes;
    public static PrintQueueIndexedProperty QueueDriver;
    public static PrintQueueIndexedProperty QueuePort;
    public static PrintQueueIndexedProperty QueuePrintProcessor;
    public static PrintQueueIndexedProperty HostingPrintServer;
    public static PrintQueueIndexedProperty QueueStatus;
    public static PrintQueueIndexedProperty SeparatorFile;
    public static PrintQueueIndexedProperty UserPrintTicket;
    public static PrintQueueIndexedProperty DefaultPrintTicket;
}
[FlagsAttribute]
public enum System.Printing.PrintQueueStatus : Enum {
    public int value__;
    public static PrintQueueStatus None;
    public static PrintQueueStatus Paused;
    public static PrintQueueStatus Error;
    public static PrintQueueStatus PendingDeletion;
    public static PrintQueueStatus PaperJam;
    public static PrintQueueStatus PaperOut;
    public static PrintQueueStatus ManualFeed;
    public static PrintQueueStatus PaperProblem;
    public static PrintQueueStatus Offline;
    public static PrintQueueStatus IOActive;
    public static PrintQueueStatus Busy;
    public static PrintQueueStatus Printing;
    public static PrintQueueStatus OutputBinFull;
    public static PrintQueueStatus NotAvailable;
    public static PrintQueueStatus Waiting;
    public static PrintQueueStatus Processing;
    public static PrintQueueStatus Initializing;
    public static PrintQueueStatus WarmingUp;
    public static PrintQueueStatus TonerLow;
    public static PrintQueueStatus NoToner;
    public static PrintQueueStatus PagePunt;
    public static PrintQueueStatus UserIntervention;
    public static PrintQueueStatus OutOfMemory;
    public static PrintQueueStatus DoorOpen;
    public static PrintQueueStatus ServerUnknown;
    public static PrintQueueStatus PowerSave;
}
public class System.Printing.PrintQueueStream : Stream {
    private PrintQueue printQueue;
    private int jobIdentifier;
    private long bytesToCommit;
    private long bytesPreviouslyCommited;
    private bool commitStreamDataOnClose;
    private string printJobName;
    private bool streamClosed;
    private bool streamAborted;
    private PrinterThunkHandlerBase printerThunkHandler;
    private PrintSystemDispatcherObject accessVerifier;
    private bool isFinalizer;
    public int JobIdentifier { get; }
    public long Position { get; public set; }
    public long Length { get; }
    public bool CanSeek { get; }
    public bool CanWrite { get; }
    public bool CanRead { get; }
    internal PrintQueueStream(PrintQueue printQueue, string printJobName, bool commitDataOnClose, PrintTicket printTicket, bool fastCopy);
    public PrintQueueStream(PrintQueue printQueue, string printJobName);
    public PrintQueueStream(PrintQueue printQueue, string printJobName, bool commitDataOnClose);
    public PrintQueueStream(PrintQueue printQueue, string printJobName, bool commitDataOnClose, PrintTicket printTicket);
    private void ~PrintQueueStream();
    public virtual bool get_CanRead();
    public virtual bool get_CanWrite();
    public virtual bool get_CanSeek();
    public virtual long get_Length();
    public virtual long get_Position();
    public virtual void set_Position(long value);
    public int get_JobIdentifier();
    public virtual IAsyncResult BeginWrite(Byte[] buffer, int offset, int count, AsyncCallback callback, object state);
    public virtual void EndWrite(IAsyncResult asyncResult);
    public virtual int Read(Byte[] buffer, int offset, int count);
    public virtual void Write(Byte[] buffer, int offset, int count);
    public virtual void Flush();
    public virtual long Seek(long offset, SeekOrigin origin);
    public virtual void Close();
    public virtual void SetLength(long value);
    public void HandlePackagingProgressEvent(object sender, PackagingProgressEventArgs e);
    internal void Abort();
    private void !PrintQueueStream();
    private void InitializePrintStream(PrintTicket printTicket, bool fastCopy);
    private void InitializePrintStream(PrintTicket printTicket);
    private void CommitDataToPrinter();
    private void AbortOrCancel(bool abort);
    private static Exception CreatePrintingCanceledException(int hresult, string messageId);
    protected virtual void Dispose(bool A_0);
    protected virtual void Finalize();
}
public class System.Printing.PrintQueueStringProperty : object {
    private PrintQueueStringPropertyType <backing_store>Type;
    private string <backing_store>Name;
    public string Name { get; public set; }
    public PrintQueueStringPropertyType Type { get; public set; }
    public PrintQueueStringPropertyType get_Type();
    public void set_Type(PrintQueueStringPropertyType __set_formal);
    public string get_Name();
    public void set_Name(string __set_formal);
}
public enum System.Printing.PrintQueueStringPropertyType : Enum {
    public int value__;
    public static PrintQueueStringPropertyType Location;
    public static PrintQueueStringPropertyType Comment;
    public static PrintQueueStringPropertyType ShareName;
}
public class System.Printing.PrintServer : PrintSystemObject {
    private string defaultSpoolDirectory;
    private ThreadPriority portThreadPriority;
    private ThreadPriority defaultPortThreadPriority;
    private ThreadPriority schedulerPriority;
    private ThreadPriority defaultSchedulerPriority;
    private bool beepEnabled;
    private bool netPopup;
    private PrintServerEventLoggingTypes eventLog;
    private int majorVersion;
    private int minorVersion;
    private int restartJobOnPoolTimeout;
    private bool restartJobOnPoolEnabled;
    private byte subSystemVersion;
    private PrinterThunkHandler serverThunkHandler;
    private String[] refreshPropertiesFilter;
    private bool isInternallyInitialized;
    private bool isDelayInitialized;
    private PrintSystemDispatcherObject accessVerifier;
    private static String[] primaryAttributeNames;
    private static Type[] primaryAttributeTypes;
    private static String[] internalAttributeNames;
    private static Type[] attributeInteropTypes;
    private static ThunkGetPrinterData[] getAttributeInteropDelegates;
    private static ThunkSetPrinterData[] setAttributeInteropDelegates;
    private static Hashtable attributeNameTypes;
    private static Hashtable internalAttributeNameMapping;
    private static Hashtable getAttributeInteropMap;
    private static Hashtable setAttributeInteropMap;
    private Hashtable collectionsTable;
    protected bool IsDelayInitialized { get; protected set; }
    internal bool IsInternallyInitialized { get; internal set; }
    public string Name { get; internal set; }
    public byte SubSystemVersion { get; }
    public bool RestartJobOnPoolEnabled { get; public set; }
    public int RestartJobOnPoolTimeout { get; public set; }
    public int MinorVersion { get; internal set; }
    public int MajorVersion { get; internal set; }
    public PrintServerEventLoggingTypes EventLog { get; public set; }
    public bool NetPopup { get; public set; }
    public bool BeepEnabled { get; public set; }
    public ThreadPriority DefaultSchedulerPriority { get; internal set; }
    public ThreadPriority SchedulerPriority { get; public set; }
    public ThreadPriority DefaultPortThreadPriority { get; internal set; }
    public ThreadPriority PortThreadPriority { get; public set; }
    public string DefaultSpoolDirectory { get; public set; }
    internal PrintServer(string path, PrintServerType type);
    public PrintServer(string path, String[] propertiesFilter, PrintSystemDesiredAccess desiredAccess);
    public PrintServer(string path, PrintServerIndexedProperty[] propertiesFilter, PrintSystemDesiredAccess desiredAccess);
    public PrintServer(string path, PrintSystemDesiredAccess desiredAccess);
    public PrintServer(PrintSystemDesiredAccess desiredAccess);
    public PrintServer(string path, String[] propertiesFilter);
    public PrintServer(string path, PrintServerIndexedProperty[] propertiesFilter);
    public PrintServer(string path);
    private static PrintServer();
    public PrintQueue InstallPrintQueue(string printQueueName, string driverName, String[] portNames, string printProcessorName, PrintPropertyDictionary initialParameters);
    public PrintQueue InstallPrintQueue(string printQueueName, string driverName, String[] portNames, string printProcessorName, PrintQueueAttributes printQueueAttributes, string printQueueShareName, string printQueueComment, string printQueueLocation, string printQueueSeparatorFile, int printQueuePriority, int printQueueDefaultPriority);
    public PrintQueue InstallPrintQueue(string printQueueName, string driverName, String[] portNames, string printProcessorName, PrintQueueAttributes printQueueAttributes, PrintQueueStringProperty printQueueProperty, int printQueuePriority, int printQueueDefaultPriority);
    public PrintQueue InstallPrintQueue(string printQueueName, string driverName, String[] portNames, string printProcessorName, PrintQueueAttributes printQueueAttributes);
    public static bool DeletePrintQueue(PrintQueue printQueue);
    public static bool DeletePrintQueue(string printQueueName);
    public PrintQueue GetPrintQueue(string printQueueName, String[] propertiesFilter);
    public PrintQueue GetPrintQueue(string printQueueName);
    public PrintQueueCollection GetPrintQueues(String[] propertiesFilter, EnumeratedPrintQueueTypes[] enumerationFlag);
    public PrintQueueCollection GetPrintQueues(PrintQueueIndexedProperty[] propertiesFilter, EnumeratedPrintQueueTypes[] enumerationFlag);
    public PrintQueueCollection GetPrintQueues(EnumeratedPrintQueueTypes[] enumerationFlag);
    public PrintQueueCollection GetPrintQueues(String[] propertiesFilter);
    public PrintQueueCollection GetPrintQueues(PrintQueueIndexedProperty[] propertiesFilter);
    public PrintQueueCollection GetPrintQueues();
    public virtual void Commit();
    public virtual void Refresh();
    public string get_DefaultSpoolDirectory();
    public void set_DefaultSpoolDirectory(string value);
    public ThreadPriority get_PortThreadPriority();
    public void set_PortThreadPriority(ThreadPriority value);
    public ThreadPriority get_DefaultPortThreadPriority();
    internal void set_DefaultPortThreadPriority(ThreadPriority value);
    public ThreadPriority get_SchedulerPriority();
    public void set_SchedulerPriority(ThreadPriority value);
    public ThreadPriority get_DefaultSchedulerPriority();
    internal void set_DefaultSchedulerPriority(ThreadPriority value);
    public bool get_BeepEnabled();
    public void set_BeepEnabled(bool value);
    public bool get_NetPopup();
    public void set_NetPopup(bool value);
    public PrintServerEventLoggingTypes get_EventLog();
    public void set_EventLog(PrintServerEventLoggingTypes value);
    public int get_MajorVersion();
    internal void set_MajorVersion(int value);
    public int get_MinorVersion();
    internal void set_MinorVersion(int value);
    public int get_RestartJobOnPoolTimeout();
    public void set_RestartJobOnPoolTimeout(int value);
    public bool get_RestartJobOnPoolEnabled();
    public void set_RestartJobOnPoolEnabled(bool value);
    public byte get_SubSystemVersion();
    public sealed virtual string get_Name();
    internal sealed virtual void set_Name(string objName);
    internal bool get_IsInternallyInitialized();
    internal void set_IsInternallyInitialized(bool A_0);
    internal virtual PrintPropertyDictionary get_InternalPropertiesCollection(string attributeName);
    internal static void RegisterAttributesNamesTypes(Hashtable childAttributeNameTypes);
    internal static void RegisterAttributesNamesTypes();
    internal static PrintProperty CreateAttributeNoValue(string attributeName);
    internal static PrintProperty CreateAttributeValue(string attributeName, object attributeValue);
    internal static PrintProperty CreateAttributeNoValueLinked(string attributeName, MulticastDelegate delegate);
    internal static PrintProperty CreateAttributeValueLinked(string attributeName, object attributeValue, MulticastDelegate delegate);
    protected sealed virtual void InternalDispose(bool disposing);
    internal Exception CreatePrintServerException(int hresult, string messageId, Exception innerException);
    internal Exception CreatePrintServerException(int hresult, string messageId);
    private Exception CreatePrintCommitAttributesException(int hresult, string messageId, Collection`1<string> commitedAttributes, Collection`1<string> failedAttributes);
    private static void BuildInteropAttributesMap();
    private MulticastDelegate[] CreatePropertiesDelegates();
    private void InitializeInternalCollections();
    private void Initialize(string path, String[] propertiesFilter, PrinterDefaults printerDefaults);
    private String[] ConvertPropertyFilterToString(PrintServerIndexedProperty[] propertiesFilter);
    private String[] GetAlteredPropertiesFilter();
    private String[] GetAllPropertiesFilter();
    private String[] GetAllPropertiesFilter(String[] propertiesFilter);
    private void GetDataFromServer(string property, bool forceRefresh);
    private bool GetUnInitializedData(String[] properties);
    private void ComitDirtyData(String[] properties);
    private void VerifyAccess();
    private static bool IsHResultWin32Error(int hresult, int expectedWin32Error);
    internal static String[] PrimaryAttributeNames();
    internal static Type[] PrimaryAttributeTypes();
    protected bool get_IsDelayInitialized();
    protected void set_IsDelayInitialized(bool delayInitialized);
}
[FlagsAttribute]
public enum System.Printing.PrintServerEventLoggingTypes : Enum {
    public int value__;
    public static PrintServerEventLoggingTypes None;
    public static PrintServerEventLoggingTypes LogPrintingSuccessEvents;
    public static PrintServerEventLoggingTypes LogPrintingErrorEvents;
    public static PrintServerEventLoggingTypes LogPrintingWarningEvents;
    public static PrintServerEventLoggingTypes LogPrintingInformationEvents;
    public static PrintServerEventLoggingTypes LogAllPrintingEvents;
}
public enum System.Printing.PrintServerIndexedProperty : Enum {
    public int value__;
    public static PrintServerIndexedProperty DefaultSpoolDirectory;
    public static PrintServerIndexedProperty PortThreadPriority;
    public static PrintServerIndexedProperty DefaultPortThreadPriority;
    public static PrintServerIndexedProperty SchedulerPriority;
    public static PrintServerIndexedProperty DefaultSchedulerPriority;
    public static PrintServerIndexedProperty BeepEnabled;
    public static PrintServerIndexedProperty NetPopup;
    public static PrintServerIndexedProperty EventLog;
    public static PrintServerIndexedProperty MajorVersion;
    public static PrintServerIndexedProperty MinorVersion;
    public static PrintServerIndexedProperty RestartJobOnPoolTimeout;
    public static PrintServerIndexedProperty RestartJobOnPoolEnabled;
}
internal enum System.Printing.PrintServerType : Enum {
    public int value__;
    public static PrintServerType Browsable;
}
internal class System.Printing.PrintSystemDefaultPathResolver : object {
    private IPrintSystemPathResolver chainLink;
    private void ~PrintSystemDefaultPathResolver();
    public virtual PrintSystemProtocol Resolve(PrintPropertyDictionary collection);
    protected virtual void Dispose(bool A_0);
    public sealed virtual void Dispose();
}
internal abstract class System.Printing.PrintSystemDelegates : object {
}
public enum System.Printing.PrintSystemDesiredAccess : Enum {
    public int value__;
    public static PrintSystemDesiredAccess None;
    public static PrintSystemDesiredAccess AdministrateServer;
    public static PrintSystemDesiredAccess EnumerateServer;
    public static PrintSystemDesiredAccess UsePrinter;
    public static PrintSystemDesiredAccess AdministratePrinter;
}
internal class System.Printing.PrintSystemDispatcherObject : DispatcherObject {
    public void VerifyThreadLocality();
}
public class System.Printing.PrintSystemJobInfo : PrintSystemObject {
    internal static string defaultJobName;
    private PrintQueueStream printStream;
    private int jobIdentifier;
    private string submitter;
    private PrintJobPriority priority;
    private int positionInPrintQueue;
    private int startTime;
    private int untilTime;
    private int numberOfPages;
    private int numberOfPagesPrinted;
    private int jobSize;
    private DateTime timeJobSubmitted;
    private int timeSinceStartedPrinting;
    private PrintJobStatus jobStatus;
    private bool isCompleted;
    private bool isDeleting;
    private bool isPaused;
    private bool isPrinted;
    private bool isRestarted;
    private bool isSpooling;
    private bool isInError;
    private bool isPrinting;
    private bool isOffline;
    private bool isPaperOut;
    private bool isDeleted;
    private bool isBlocked;
    private bool isUserInterventionRequired;
    private bool isRetained;
    private string jobName;
    private PrintQueue hostingPrintQueue;
    private PrintServer hostingPrintServer;
    private static Hashtable attributeNameTypes;
    private bool isDownLevelSystem;
    private PrintSystemDispatcherObject accessVerifier;
    private static String[] primaryAttributeNames;
    private static Type[] primaryAttributeTypes;
    private static String[] secondaryAttributeNames;
    private static Type[] secondaryAttributeTypes;
    private static String[] upLevelAttributeName;
    private static Hashtable upLevelToDownLevelMapping;
    private Hashtable collectionsTable;
    private PrintPropertyDictionary thunkPropertiesCollection;
    private String[] refreshPropertiesFilter;
    private bool reportProgress;
    internal bool DownLevelSystem { get; internal set; }
    unknown int JobStatusSecondary {internal set; }
    unknown int PrioritySecondary {internal set; }
    public PrintServer HostingPrintServer { get; internal set; }
    public PrintQueue HostingPrintQueue { get; internal set; }
    public string JobName { get; public set; }
    public bool IsRetained { get; }
    public bool IsUserInterventionRequired { get; }
    public bool IsBlocked { get; }
    public bool IsDeleted { get; }
    public bool IsPaperOut { get; }
    public bool IsOffline { get; }
    public bool IsPrinting { get; }
    public bool IsInError { get; }
    public bool IsSpooling { get; }
    public bool IsRestarted { get; }
    public bool IsPrinted { get; }
    public bool IsPaused { get; }
    public bool IsDeleting { get; }
    public bool IsCompleted { get; }
    public PrintJobStatus JobStatus { get; internal set; }
    public int TimeSinceStartedPrinting { get; }
    public DateTime TimeJobSubmitted { get; internal set; }
    public int JobSize { get; internal set; }
    public int NumberOfPagesPrinted { get; internal set; }
    public int NumberOfPages { get; internal set; }
    public int UntilTimeOfDay { get; internal set; }
    public int StartTimeOfDay { get; internal set; }
    public int PositionInPrintQueue { get; internal set; }
    public PrintJobPriority Priority { get; internal set; }
    public string Submitter { get; internal set; }
    public int JobIdentifier { get; internal set; }
    public Stream JobStream { get; }
    internal PrintSystemJobInfo(PrintQueue printQueue, String[] propertyFilter);
    internal PrintSystemJobInfo(PrintQueue printQueue, int jobIdentifier);
    internal PrintSystemJobInfo(PrintQueue printQueue, string jobName, string documentPath, bool fastCopy, PrintTicket printTicket);
    internal PrintSystemJobInfo(PrintQueue printQueue, string jobName, PrintTicket printTicket);
    internal PrintSystemJobInfo(PrintQueue printQueue, PrintTicket printTicket);
    private static PrintSystemJobInfo();
    internal static PrintSystemJobInfo Add(PrintQueue printQueue, string jobName, string documentPath, bool fastCopy, PrintTicket printTicket);
    internal static PrintSystemJobInfo Add(PrintQueue printQueue, string jobName, PrintTicket printTicket);
    internal static PrintSystemJobInfo Add(PrintQueue printQueue, PrintTicket printTicket);
    public static PrintSystemJobInfo Get(PrintQueue printQueue, int jobIdentifier);
    public void Pause();
    public void Resume();
    public void Cancel();
    public void Restart();
    public Stream get_JobStream();
    public int get_JobIdentifier();
    internal void set_JobIdentifier(int newJobIdentifier);
    public string get_Submitter();
    internal void set_Submitter(string newSubmitter);
    public PrintJobPriority get_Priority();
    internal void set_Priority(PrintJobPriority newPriority);
    public int get_PositionInPrintQueue();
    internal void set_PositionInPrintQueue(int positionInQueue);
    public int get_StartTimeOfDay();
    internal void set_StartTimeOfDay(int newStartTime);
    public int get_UntilTimeOfDay();
    internal void set_UntilTimeOfDay(int newUntilTime);
    public int get_NumberOfPages();
    internal void set_NumberOfPages(int newNumberOfPages);
    public int get_NumberOfPagesPrinted();
    internal void set_NumberOfPagesPrinted(int newNumberOfPagesPrinted);
    public int get_JobSize();
    internal void set_JobSize(int newJobSize);
    public DateTime get_TimeJobSubmitted();
    internal void set_TimeJobSubmitted(DateTime newTimeJobSubmitted);
    public int get_TimeSinceStartedPrinting();
    public PrintJobStatus get_JobStatus();
    internal void set_JobStatus(PrintJobStatus status);
    public bool get_IsCompleted();
    public bool get_IsDeleting();
    public bool get_IsPaused();
    public bool get_IsPrinted();
    public bool get_IsRestarted();
    public bool get_IsSpooling();
    public bool get_IsInError();
    public bool get_IsPrinting();
    public bool get_IsOffline();
    public bool get_IsPaperOut();
    public bool get_IsDeleted();
    public bool get_IsBlocked();
    public bool get_IsUserInterventionRequired();
    public bool get_IsRetained();
    public string get_JobName();
    public void set_JobName(string newJobName);
    public PrintQueue get_HostingPrintQueue();
    internal void set_HostingPrintQueue(PrintQueue printQueue);
    public PrintServer get_HostingPrintServer();
    internal void set_HostingPrintServer(PrintServer printServer);
    public virtual void Commit();
    public virtual void Refresh();
    protected sealed virtual void InternalDispose(bool disposing);
    internal void set_PrioritySecondary(int newPrioritySecondary);
    internal void set_JobStatusSecondary(int status);
    internal bool get_DownLevelSystem();
    internal void set_DownLevelSystem(bool value);
    internal virtual PrintPropertyDictionary get_InternalPropertiesCollection(string attributeName);
    internal static PrintProperty CreateAttributeNoValue(string attributeName);
    internal static PrintProperty CreateAttributeValue(string attributeName, object attributeValue);
    internal static PrintProperty CreateAttributeNoValueLinked(string attributeName, MulticastDelegate delegate);
    internal static PrintProperty CreateAttributeValueLinked(string attributeName, object attributeValue, MulticastDelegate delegate);
    internal static void RegisterAttributesNamesTypes();
    internal static String[] GetAllPropertiesFilter();
    internal static PrintSystemObject Instantiate(object printQueue, String[] propertiesFilter);
    private MulticastDelegate[] CreatePropertiesDelegates();
    private void Initialize();
    private void InitializeInternalCollections();
    private void PopulateJobProperties(String[] propertiesAsStrings);
    private void CopyFileStreamToPrinter(string xpsFileName, Stream printStream);
    private void VerifyAccess();
    internal static Exception CreatePrintJobException(string messageId, Exception innerException);
    internal static Exception CreatePrintJobException(int hresult, string messageId);
    internal static Exception CreatePrintJobException(string messageId);
    private bool IsErrorInvalidParameter(int hResult);
}
public abstract class System.Printing.PrintSystemObject : object {
    private bool isDisposed;
    private PrintPropertyDictionary propertiesCollection;
    private PrintSystemObject parent;
    private string name;
    private object syncRoot;
    private static String[] baseAttributeNames;
    private static Type[] baseAttributeTypes;
    internal static Int32 modopt(System.Runtime.CompilerServices.IsConst) MaxPath;
    protected bool IsDisposed { get; protected set; }
    internal object SyncRoot { get; }
    public PrintSystemObject Parent { get; }
    public string Name { get; internal set; }
    public PrintPropertyDictionary PropertiesCollection { get; internal set; }
    protected PrintSystemObject(PrintSystemObjectLoadMode mode);
    private static PrintSystemObject();
    private void ~PrintSystemObject();
    public PrintPropertyDictionary get_PropertiesCollection();
    internal void set_PropertiesCollection(PrintPropertyDictionary collection);
    public abstract virtual void Commit();
    public abstract virtual void Refresh();
    public virtual string get_Name();
    internal virtual void set_Name(string objName);
    public virtual PrintSystemObject get_Parent();
    internal object get_SyncRoot();
    internal abstract virtual PrintPropertyDictionary get_InternalPropertiesCollection(string attributeName);
    private void !PrintSystemObject();
    internal virtual void OnPropertyChanged(PrintSystemObject sender, PrintSystemObjectPropertyChangedEventArgs e);
    internal virtual void OnPropertiesChanged(PrintSystemObject sender, PrintSystemObjectPropertiesChangedEventArgs e);
    protected virtual void InternalDispose(bool disposing);
    protected sealed virtual bool get_IsDisposed();
    protected sealed virtual void set_IsDisposed(bool disposingStatus);
    protected void Initialize();
    private MulticastDelegate[] CreatePropertiesDelegates();
    protected static String[] BaseAttributeNames();
    internal static void RegisterAttributesNamesTypes(Hashtable attributeNamesTypes);
    protected virtual void Dispose(bool A_0);
    public sealed virtual void Dispose();
    protected virtual void Finalize();
}
public enum System.Printing.PrintSystemObjectLoadMode : Enum {
    public int value__;
    public static PrintSystemObjectLoadMode None;
    public static PrintSystemObjectLoadMode LoadUninitialized;
    public static PrintSystemObjectLoadMode LoadInitialized;
}
public class System.Printing.PrintSystemObjectPropertiesChangedEventArgs : EventArgs {
    private StringCollection propertiesNames;
    public StringCollection PropertiesNames { get; }
    public PrintSystemObjectPropertiesChangedEventArgs(StringCollection events);
    private void ~PrintSystemObjectPropertiesChangedEventArgs();
    public StringCollection get_PropertiesNames();
    protected virtual void Dispose(bool A_0);
    public sealed virtual void Dispose();
}
public class System.Printing.PrintSystemObjectPropertyChangedEventArgs : EventArgs {
    private string propertyName;
    public string PropertyName { get; }
    public PrintSystemObjectPropertyChangedEventArgs(string eventName);
    private void ~PrintSystemObjectPropertyChangedEventArgs();
    public string get_PropertyName();
    protected virtual void Dispose(bool A_0);
    public sealed virtual void Dispose();
}
public abstract class System.Printing.PrintSystemObjects : object {
    private void ~PrintSystemObjects();
    protected virtual void Dispose(bool A_0);
    public sealed virtual void Dispose();
}
internal class System.Printing.PrintSystemPathResolver : object {
    private PrintPropertyDictionary protocolParametersCollection;
    private PrintSystemProtocol protocol;
    private IPrintSystemPathResolver chainLink;
    public PrintSystemProtocol Protocol { get; }
    public PrintSystemPathResolver(PrintPropertyDictionary collection, IPrintSystemPathResolver resolver);
    private void ~PrintSystemPathResolver();
    public PrintSystemProtocol get_Protocol();
    public bool Resolve();
    protected virtual void Dispose(bool A_0);
    public sealed virtual void Dispose();
}
internal class System.Printing.PrintSystemProtocol : object {
    private TransportProtocol transport;
    private string path;
    public string Path { get; }
    public PrintSystemProtocol(TransportProtocol transportType, string transportpath);
    public string get_Path();
}
internal class System.Printing.PrintSystemUNCPathCracker : object {
    private string printServerName;
    private string printQueueName;
    public string PrintQueueName { get; }
    public string PrintServerName { get; }
    public PrintSystemUNCPathCracker(string path);
    private void ~PrintSystemUNCPathCracker();
    public string get_PrintServerName();
    public string get_PrintQueueName();
    protected virtual void Dispose(bool A_0);
    public sealed virtual void Dispose();
}
internal class System.Printing.PrintSystemUNCPathResolver : object {
    private IPrintSystemPathResolver chainLink;
    private string serverName;
    private string printerName;
    private string uncPath;
    private static Hashtable parametersMapping;
    public string PrinterName { get; private set; }
    public string ServerName { get; private set; }
    private static PrintSystemUNCPathResolver();
    public PrintSystemUNCPathResolver(IPrintSystemPathResolver resolver);
    private void ~PrintSystemUNCPathResolver();
    public virtual PrintSystemProtocol Resolve(PrintPropertyDictionary collection);
    public string get_ServerName();
    private void set_ServerName(string name);
    public string get_PrinterName();
    private void set_PrinterName(string name);
    public static bool ValidateUNCPath(string name);
    private static bool ValidateAndCaptureServerName(object parameter, PrintSystemUNCPathResolver resolver);
    private static bool ValidateAndCapturePrinterName(object parameter, PrintSystemUNCPathResolver resolver);
    private static bool ValidateUNCName(string name);
    private void BuildUncPath();
    private void ValidateCollectionAndCaptureParameters(IDictionaryEnumerator enumerator);
    protected virtual void Dispose(bool A_0);
    public sealed virtual void Dispose();
}
internal enum System.Printing.TransportProtocol : Enum {
    public int value__;
    public static TransportProtocol Unknown;
    public static TransportProtocol Unc;
    public static TransportProtocol TcpIP;
    public static TransportProtocol Http;
}
internal class System.Printing.WritePrinterAsyncResult : object {
    private Stream printStream;
    private bool isCompleted;
    private AutoResetEvent writeCompletedEvent;
    private AsyncCallback userCallBack;
    private object userObject;
    private Byte[] dataArray;
    private int dataOffset;
    private int numberOfBytes;
    public bool IsCompleted { get; public set; }
    public bool CompletedSynchronously { get; }
    public AsyncCallback AsyncCallBack { get; }
    public WaitHandle AsyncWaitHandle { get; }
    public object AsyncState { get; }
    public WritePrinterAsyncResult(Stream stream, Byte[] array, int offset, int numBytes, AsyncCallback userCallBack, object stateObject);
    public virtual object get_AsyncState();
    public virtual WaitHandle get_AsyncWaitHandle();
    public AsyncCallback get_AsyncCallBack();
    public virtual bool get_CompletedSynchronously();
    public virtual bool get_IsCompleted();
    public void set_IsCompleted(bool A_0);
    internal void AsyncWrite();
}
[AttributeUsageAttribute("5372")]
internal class System.Windows.Xps.FriendAccessAllowedAttribute : Attribute {
}
public class System.Windows.Xps.VisualsToXpsDocument : SerializerWriterCollator {
    private object _currentUserState;
    private PrintTicket _documentSequencePrintTicket;
    private PrintTicket _documentPrintTicket;
    private XpsDocumentWriter parentWriter;
    private VisualsCollaterState currentState;
    private PrintQueue destinationPrintQueue;
    private XpsDocument destinationDocument;
    private bool isPrintTicketEventHandlerSet;
    private bool isCompletionEventHandlerSet;
    private bool isProgressChangedEventHandlerSet;
    private MXDWSerializationManager _mxdwManager;
    private Package _mxdwPackage;
    private Hashtable _printTicketsTable;
    private ArrayList _printTicketSequences;
    private int _numberOfVisualsCollated;
    private PrintSystemDispatcherObject accessVerifier;
    private PackageSerializationManager _manager;
    internal VisualsToXpsDocument(XpsDocumentWriter writer, XpsDocument document, PrintTicket documentSequencePrintTicket, PrintTicket documentPrintTicket);
    internal VisualsToXpsDocument(XpsDocumentWriter writer, PrintQueue printQueue, PrintTicket documentSequencePrintTicket, PrintTicket documentPrintTicket);
    internal VisualsToXpsDocument(XpsDocumentWriter writer, XpsDocument document);
    internal VisualsToXpsDocument(XpsDocumentWriter writer, PrintQueue printQueue);
    public virtual void BeginBatchWrite();
    public virtual void EndBatchWrite();
    public virtual void Write(Visual visual, PrintTicket printTicket);
    public virtual void Write(Visual visual);
    public virtual void WriteAsync(Visual visual, PrintTicket printTicket, object userSuppliedState);
    public virtual void WriteAsync(Visual visual, object userSuppliedState);
    public virtual void WriteAsync(Visual visual, PrintTicket printTicket);
    public virtual void WriteAsync(Visual visual);
    public virtual void CancelAsync();
    public virtual void Cancel();
    internal void SetPrintTicketEventHandler(PackageSerializationManager manager);
    internal void ForwardUserPrintTicket(object sender, XpsSerializationPrintTicketRequiredEventArgs args);
    private bool WriteVisual(bool asyncMode, PrintTicket printTicket, PrintTicketLevel printTicketLevel, Visual visual);
    private bool MxdwConversionRequired(PrintQueue printQueue);
    private string MxdwInitializeOptimizationConversion(PrintQueue printQueue);
    private void CreateXPSDocument(string documentName);
    private void InitializeSequences();
    private void VerifyAccess();
}
public enum System.Windows.Xps.XpsDocumentNotificationLevel : Enum {
    public int value__;
    public static XpsDocumentNotificationLevel None;
    public static XpsDocumentNotificationLevel ReceiveNotificationEnabled;
    public static XpsDocumentNotificationLevel ReceiveNotificationDisabled;
}
public class System.Windows.Xps.XpsDocumentWriter : SerializerWriter {
    private WritingProgressChangedEventHandler <backing_store>_WritingProgressChanged;
    private WritingCompletedEventHandler <backing_store>_WritingCompleted;
    private WritingCancelledEventHandler <backing_store>_WritingCancelled;
    private PrintQueue destinationPrintQueue;
    private XpsDocument destinationDocument;
    private DocumentWriterState currentState;
    private PrintTicket currentUserPrintTicket;
    private object _currentUserState;
    private ArrayList _printTicketSequences;
    private ArrayList _writingProgressSequences;
    private MXDWSerializationManager _mxdwManager;
    private Package _mxdwPackage;
    private bool _isDocumentCloned;
    private XpsDocument _sourceXpsDocument;
    private IXpsFixedDocumentSequenceReader _sourceXpsFixedDocumentSequenceReader;
    private Package _sourcePackage;
    private int _writingCancelledEventHandlersCount;
    private PrintSystemDispatcherObject accessVerifier;
    private PrintTicketLevel currentWriteLevel;
    private PackageSerializationManager _manager;
    private WritingPrintTicketRequiredEventHandler m_WritingPrintTicketRequired;
    unknown PrintTicketLevel CurrentWriteLevel {internal set; }
    unknown PrintTicket CurrentUserPrintTicket {internal set; }
    internal XpsDocumentWriter(PrintQueue printQueue, object bogus);
    [FriendAccessAllowedAttribute]
internal XpsDocumentWriter(XpsDocument document);
    [FriendAccessAllowedAttribute]
internal XpsDocumentWriter(PrintQueue printQueue);
    internal void BeginPrintFixedDocumentSequence(FixedDocumentSequence fixedDocumentSequence, PrintTicket printTicket, Int32* modopt(System.Runtime.CompilerServices.IsImplicitlyDereferenced) printJobIdentifier);
    internal void BeginPrintFixedDocumentSequence(FixedDocumentSequence fixedDocumentSequence, Int32* modopt(System.Runtime.CompilerServices.IsImplicitlyDereferenced) printJobIdentifier);
    internal void EndPrintFixedDocumentSequence();
    public virtual void Write(FixedPage fixedPage, PrintTicket printTicket);
    public virtual void Write(FixedPage fixedPage);
    public virtual void Write(FixedDocument fixedDocument, PrintTicket printTicket);
    public virtual void Write(FixedDocument fixedDocument);
    public virtual void Write(FixedDocumentSequence fixedDocumentSequence, PrintTicket printTicket);
    public virtual void Write(FixedDocumentSequence fixedDocumentSequence);
    public virtual void Write(Visual visual, PrintTicket printTicket);
    public virtual void Write(Visual visual);
    public virtual void Write(DocumentPaginator documentPaginator, PrintTicket printTicket);
    public virtual void Write(DocumentPaginator documentPaginator);
    public void Write(string documentPath, XpsDocumentNotificationLevel notificationLevel);
    public void Write(string documentPath);
    public virtual void WriteAsync(FixedPage fixedPage, PrintTicket printTicket, object userSuppliedState);
    public virtual void WriteAsync(FixedPage fixedPage, object userSuppliedState);
    public virtual void WriteAsync(FixedPage fixedPage, PrintTicket printTicket);
    public virtual void WriteAsync(FixedPage fixedPage);
    public virtual void WriteAsync(FixedDocument fixedDocument, PrintTicket printTicket, object userSuppliedState);
    public virtual void WriteAsync(FixedDocument fixedDocument, object userSuppliedState);
    public virtual void WriteAsync(FixedDocument fixedDocument, PrintTicket printTicket);
    public virtual void WriteAsync(FixedDocument fixedDocument);
    public virtual void WriteAsync(FixedDocumentSequence fixedDocumentSequence, PrintTicket printTicket, object userSuppliedState);
    public virtual void WriteAsync(FixedDocumentSequence fixedDocumentSequence, object userSuppliedState);
    public virtual void WriteAsync(FixedDocumentSequence fixedDocumentSequence, PrintTicket printTicket);
    public virtual void WriteAsync(FixedDocumentSequence fixedDocumentSequence);
    public virtual void WriteAsync(Visual visual, PrintTicket printTicket, object userSuppliedState);
    public virtual void WriteAsync(Visual visual, object userSuppliedState);
    public virtual void WriteAsync(Visual visual, PrintTicket printTicket);
    public virtual void WriteAsync(Visual visual);
    public virtual void WriteAsync(DocumentPaginator documentPaginator, PrintTicket printTicket, object userSuppliedState);
    public virtual void WriteAsync(DocumentPaginator documentPaginator, object userSuppliedState);
    public virtual void WriteAsync(DocumentPaginator documentPaginator, PrintTicket printTicket);
    public virtual void WriteAsync(DocumentPaginator documentPaginator);
    public void WriteAsync(string documentPath, XpsDocumentNotificationLevel notificationLevel);
    public void WriteAsync(string documentPath);
    public virtual void CancelAsync();
    public virtual SerializerWriterCollator CreateVisualsCollator(PrintTicket documentSequencePrintTicket, PrintTicket documentPrintTicket);
    public virtual SerializerWriterCollator CreateVisualsCollator();
    public virtual void add_WritingPrintTicketRequired(WritingPrintTicketRequiredEventHandler handler);
    public virtual void remove_WritingPrintTicketRequired(WritingPrintTicketRequiredEventHandler handler);
    public virtual void raise_WritingPrintTicketRequired(object sender, WritingPrintTicketRequiredEventArgs e);
    public virtual void add_WritingProgressChanged(WritingProgressChangedEventHandler handler);
    public virtual void remove_WritingProgressChanged(WritingProgressChangedEventHandler handler);
    public virtual void raise_WritingProgressChanged(object sender, WritingProgressChangedEventArgs e);
    public virtual void add_WritingCompleted(WritingCompletedEventHandler handler);
    public virtual void remove_WritingCompleted(WritingCompletedEventHandler handler);
    public virtual void raise_WritingCompleted(object sender, WritingCompletedEventArgs e);
    public virtual void add_WritingCancelled(WritingCancelledEventHandler handler);
    public virtual void remove_WritingCancelled(WritingCancelledEventHandler handler);
    public virtual void raise_WritingCancelled(object sender, WritingCancelledEventArgs args);
    internal void add__WritingPrintTicketRequired(WritingPrintTicketRequiredEventHandler handler);
    internal void remove__WritingPrintTicketRequired(WritingPrintTicketRequiredEventHandler handler);
    internal void raise__WritingPrintTicketRequired(object sender, WritingPrintTicketRequiredEventArgs e);
    internal void add__WritingProgressChanged(WritingProgressChangedEventHandler value);
    internal void remove__WritingProgressChanged(WritingProgressChangedEventHandler value);
    private protected void raise__WritingProgressChanged(object value0, WritingProgressChangedEventArgs value1);
    internal void add__WritingCompleted(WritingCompletedEventHandler value);
    internal void remove__WritingCompleted(WritingCompletedEventHandler value);
    private protected void raise__WritingCompleted(object value0, WritingCompletedEventArgs value1);
    internal void add__WritingCancelled(WritingCancelledEventHandler value);
    internal void remove__WritingCancelled(WritingCancelledEventHandler value);
    private protected void raise__WritingCancelled(object value0, WritingCancelledEventArgs value1);
    internal void ForwardUserPrintTicket(object sender, XpsSerializationPrintTicketRequiredEventArgs args);
    internal void ForwardWriteCompletedEvent(object sender, XpsSerializationCompletedEventArgs args);
    internal void ForwardProgressChangedEvent(object sender, XpsSerializationProgressChangedEventArgs args);
    internal WritingProgressChangeLevel TranslateProgressChangeLevel(XpsWritingProgressChangeLevel xpsChangeLevel);
    internal void CloneSourcePrintTicket(object sender, XpsSerializationPrintTicketRequiredEventArgs args);
    internal void EndBatchMode();
    internal void SetPrintTicketEventHandler(PackageSerializationManager manager, XpsSerializationPrintTicketRequiredEventHandler eventHandler);
    internal void SetCompletionEventHandler(PackageSerializationManager manager, object userState);
    internal void SetProgressChangedEventHandler(PackageSerializationManager manager, object userState);
    internal void set_CurrentUserPrintTicket(PrintTicket userPrintTicket);
    internal void set_CurrentWriteLevel(PrintTicketLevel writeLevel);
    internal void OnWritingPrintTicketRequired(object sender, WritingPrintTicketRequiredEventArgs args);
    internal bool OnWritingCanceled(object sender, Exception exception);
    private void InitializeSequences();
    private bool BeginWrite(bool batchMode, bool asyncMode, bool setPrintTicketHandler, PrintTicket printTicket, PrintTicketLevel printTicketLevel, bool printJobIdentifierSet);
    private void EndWrite(bool disposeManager, bool abort);
    private void EndWrite(bool disposeManager);
    private void SaveAsXaml(object serializedObject, bool isSync);
    private bool MxdwConversionRequired(PrintQueue printQueue);
    private string MxdwInitializeOptimizationConversion(PrintQueue printQueue);
    private void CreateXPSDocument(string documentName);
    private void VerifyAccess();
}
public class System.Windows.Xps.XpsWriterException : Exception {
    protected XpsWriterException(SerializationInfo info, StreamingContext context);
    public XpsWriterException(string message, Exception innerException);
    public XpsWriterException(string message);
    internal static void ThrowException(string message);
}
[UnsafeValueTypeAttribute]
[NativeCppClassAttribute]
internal class tagBITMAPINFO : ValueType {
    private int <alignment member>;
}
[NativeCppClassAttribute]
[UnsafeValueTypeAttribute]
internal class tagENUMLOGFONTEXDVW : ValueType {
    private int <alignment member>;
}
[NativeCppClassAttribute]
[UnsafeValueTypeAttribute]
internal class tagLOGBRUSH : ValueType {
    private long <alignment member>;
}
[NativeCppClassAttribute]
internal class tagPOINT : ValueType {
    private int <alignment member>;
}
[NativeCppClassAttribute]
[UnsafeValueTypeAttribute]
internal class tagRECT : ValueType {
    private int <alignment member>;
}
[NativeCppClassAttribute]
[UnsafeValueTypeAttribute]
internal class tagTEXTMETRICW : ValueType {
    private int <alignment member>;
}
[UnsafeValueTypeAttribute]
[NativeCppClassAttribute]
internal class tagXFORM : ValueType {
    private float <alignment member>;
}
[NativeCppClassAttribute]
internal enum vc_attributes.AccessType : Enum {
    public int value__;
}
[NativeCppClassAttribute]
internal enum vc_attributes.YesNoMaybe : Enum {
    public int value__;
}
