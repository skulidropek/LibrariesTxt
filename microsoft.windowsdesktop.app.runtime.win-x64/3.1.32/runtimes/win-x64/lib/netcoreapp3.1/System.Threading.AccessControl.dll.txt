internal static class FxResources.System.Threading.AccessControl.SR : object {
}
internal class Interop : object {
}
public class System.Security.AccessControl.EventWaitHandleAccessRule : AccessRule {
    public EventWaitHandleRights EventWaitHandleRights { get; }
    public EventWaitHandleAccessRule(IdentityReference identity, EventWaitHandleRights eventRights, AccessControlType type);
    public EventWaitHandleAccessRule(string identity, EventWaitHandleRights eventRights, AccessControlType type);
    internal EventWaitHandleAccessRule(IdentityReference identity, int accessMask, bool isInherited, InheritanceFlags inheritanceFlags, PropagationFlags propagationFlags, AccessControlType type);
    public EventWaitHandleRights get_EventWaitHandleRights();
}
public class System.Security.AccessControl.EventWaitHandleAuditRule : AuditRule {
    public EventWaitHandleRights EventWaitHandleRights { get; }
    public EventWaitHandleAuditRule(IdentityReference identity, EventWaitHandleRights eventRights, AuditFlags flags);
    internal EventWaitHandleAuditRule(IdentityReference identity, int accessMask, bool isInherited, InheritanceFlags inheritanceFlags, PropagationFlags propagationFlags, AuditFlags flags);
    public EventWaitHandleRights get_EventWaitHandleRights();
}
[FlagsAttribute]
public enum System.Security.AccessControl.EventWaitHandleRights : Enum {
    public int value__;
    public static EventWaitHandleRights Modify;
    public static EventWaitHandleRights Delete;
    public static EventWaitHandleRights ReadPermissions;
    public static EventWaitHandleRights ChangePermissions;
    public static EventWaitHandleRights TakeOwnership;
    public static EventWaitHandleRights Synchronize;
    public static EventWaitHandleRights FullControl;
}
public class System.Security.AccessControl.EventWaitHandleSecurity : NativeObjectSecurity {
    public Type AccessRightType { get; }
    public Type AccessRuleType { get; }
    public Type AuditRuleType { get; }
    internal EventWaitHandleSecurity(string name, AccessControlSections includeSections);
    internal EventWaitHandleSecurity(SafeWaitHandle handle, AccessControlSections includeSections);
    private static Exception HandleErrorCode(int errorCode, string name, SafeHandle handle, object context);
    public virtual AccessRule AccessRuleFactory(IdentityReference identityReference, int accessMask, bool isInherited, InheritanceFlags inheritanceFlags, PropagationFlags propagationFlags, AccessControlType type);
    public virtual AuditRule AuditRuleFactory(IdentityReference identityReference, int accessMask, bool isInherited, InheritanceFlags inheritanceFlags, PropagationFlags propagationFlags, AuditFlags flags);
    internal AccessControlSections GetAccessControlSectionsFromChanges();
    internal void Persist(SafeWaitHandle handle);
    public void AddAccessRule(EventWaitHandleAccessRule rule);
    public void SetAccessRule(EventWaitHandleAccessRule rule);
    public void ResetAccessRule(EventWaitHandleAccessRule rule);
    public bool RemoveAccessRule(EventWaitHandleAccessRule rule);
    public void RemoveAccessRuleAll(EventWaitHandleAccessRule rule);
    public void RemoveAccessRuleSpecific(EventWaitHandleAccessRule rule);
    public void AddAuditRule(EventWaitHandleAuditRule rule);
    public void SetAuditRule(EventWaitHandleAuditRule rule);
    public bool RemoveAuditRule(EventWaitHandleAuditRule rule);
    public void RemoveAuditRuleAll(EventWaitHandleAuditRule rule);
    public void RemoveAuditRuleSpecific(EventWaitHandleAuditRule rule);
    public virtual Type get_AccessRightType();
    public virtual Type get_AccessRuleType();
    public virtual Type get_AuditRuleType();
}
public class System.Security.AccessControl.MutexAccessRule : AccessRule {
    public MutexRights MutexRights { get; }
    public MutexAccessRule(IdentityReference identity, MutexRights eventRights, AccessControlType type);
    public MutexAccessRule(string identity, MutexRights eventRights, AccessControlType type);
    internal MutexAccessRule(IdentityReference identity, int accessMask, bool isInherited, InheritanceFlags inheritanceFlags, PropagationFlags propagationFlags, AccessControlType type);
    public MutexRights get_MutexRights();
}
public class System.Security.AccessControl.MutexAuditRule : AuditRule {
    public MutexRights MutexRights { get; }
    public MutexAuditRule(IdentityReference identity, MutexRights eventRights, AuditFlags flags);
    internal MutexAuditRule(IdentityReference identity, int accessMask, bool isInherited, InheritanceFlags inheritanceFlags, PropagationFlags propagationFlags, AuditFlags flags);
    public MutexRights get_MutexRights();
}
[FlagsAttribute]
public enum System.Security.AccessControl.MutexRights : Enum {
    public int value__;
    public static MutexRights Modify;
    public static MutexRights Delete;
    public static MutexRights ReadPermissions;
    public static MutexRights ChangePermissions;
    public static MutexRights TakeOwnership;
    public static MutexRights Synchronize;
    public static MutexRights FullControl;
}
public class System.Security.AccessControl.MutexSecurity : NativeObjectSecurity {
    public Type AccessRightType { get; }
    public Type AccessRuleType { get; }
    public Type AuditRuleType { get; }
    public MutexSecurity(string name, AccessControlSections includeSections);
    internal MutexSecurity(SafeWaitHandle handle, AccessControlSections includeSections);
    private static Exception HandleErrorCode(int errorCode, string name, SafeHandle handle, object context);
    public virtual AccessRule AccessRuleFactory(IdentityReference identityReference, int accessMask, bool isInherited, InheritanceFlags inheritanceFlags, PropagationFlags propagationFlags, AccessControlType type);
    public virtual AuditRule AuditRuleFactory(IdentityReference identityReference, int accessMask, bool isInherited, InheritanceFlags inheritanceFlags, PropagationFlags propagationFlags, AuditFlags flags);
    internal AccessControlSections GetAccessControlSectionsFromChanges();
    internal void Persist(SafeWaitHandle handle);
    public void AddAccessRule(MutexAccessRule rule);
    public void SetAccessRule(MutexAccessRule rule);
    public void ResetAccessRule(MutexAccessRule rule);
    public bool RemoveAccessRule(MutexAccessRule rule);
    public void RemoveAccessRuleAll(MutexAccessRule rule);
    public void RemoveAccessRuleSpecific(MutexAccessRule rule);
    public void AddAuditRule(MutexAuditRule rule);
    public void SetAuditRule(MutexAuditRule rule);
    public bool RemoveAuditRule(MutexAuditRule rule);
    public void RemoveAuditRuleAll(MutexAuditRule rule);
    public void RemoveAuditRuleSpecific(MutexAuditRule rule);
    public virtual Type get_AccessRightType();
    public virtual Type get_AccessRuleType();
    public virtual Type get_AuditRuleType();
}
public class System.Security.AccessControl.SemaphoreAccessRule : AccessRule {
    public SemaphoreRights SemaphoreRights { get; }
    public SemaphoreAccessRule(IdentityReference identity, SemaphoreRights eventRights, AccessControlType type);
    public SemaphoreAccessRule(string identity, SemaphoreRights eventRights, AccessControlType type);
    internal SemaphoreAccessRule(IdentityReference identity, int accessMask, bool isInherited, InheritanceFlags inheritanceFlags, PropagationFlags propagationFlags, AccessControlType type);
    public SemaphoreRights get_SemaphoreRights();
}
public class System.Security.AccessControl.SemaphoreAuditRule : AuditRule {
    public SemaphoreRights SemaphoreRights { get; }
    public SemaphoreAuditRule(IdentityReference identity, SemaphoreRights eventRights, AuditFlags flags);
    internal SemaphoreAuditRule(IdentityReference identity, int accessMask, bool isInherited, InheritanceFlags inheritanceFlags, PropagationFlags propagationFlags, AuditFlags flags);
    public SemaphoreRights get_SemaphoreRights();
}
[FlagsAttribute]
public enum System.Security.AccessControl.SemaphoreRights : Enum {
    public int value__;
    public static SemaphoreRights Modify;
    public static SemaphoreRights Delete;
    public static SemaphoreRights ReadPermissions;
    public static SemaphoreRights ChangePermissions;
    public static SemaphoreRights TakeOwnership;
    public static SemaphoreRights Synchronize;
    public static SemaphoreRights FullControl;
}
public class System.Security.AccessControl.SemaphoreSecurity : NativeObjectSecurity {
    public Type AccessRightType { get; }
    public Type AccessRuleType { get; }
    public Type AuditRuleType { get; }
    public SemaphoreSecurity(string name, AccessControlSections includeSections);
    internal SemaphoreSecurity(SafeWaitHandle handle, AccessControlSections includeSections);
    private static Exception HandleErrorCode(int errorCode, string name, SafeHandle handle, object context);
    public virtual AccessRule AccessRuleFactory(IdentityReference identityReference, int accessMask, bool isInherited, InheritanceFlags inheritanceFlags, PropagationFlags propagationFlags, AccessControlType type);
    public virtual AuditRule AuditRuleFactory(IdentityReference identityReference, int accessMask, bool isInherited, InheritanceFlags inheritanceFlags, PropagationFlags propagationFlags, AuditFlags flags);
    internal AccessControlSections GetAccessControlSectionsFromChanges();
    internal void Persist(SafeWaitHandle handle);
    public void AddAccessRule(SemaphoreAccessRule rule);
    public void SetAccessRule(SemaphoreAccessRule rule);
    public void ResetAccessRule(SemaphoreAccessRule rule);
    public bool RemoveAccessRule(SemaphoreAccessRule rule);
    public void RemoveAccessRuleAll(SemaphoreAccessRule rule);
    public void RemoveAccessRuleSpecific(SemaphoreAccessRule rule);
    public void AddAuditRule(SemaphoreAuditRule rule);
    public void SetAuditRule(SemaphoreAuditRule rule);
    public bool RemoveAuditRule(SemaphoreAuditRule rule);
    public void RemoveAuditRuleAll(SemaphoreAuditRule rule);
    public void RemoveAuditRuleSpecific(SemaphoreAuditRule rule);
    public virtual Type get_AccessRightType();
    public virtual Type get_AccessRuleType();
    public virtual Type get_AuditRuleType();
}
internal static class System.SR : object {
    private static ResourceManager s_resourceManager;
    internal static ResourceManager ResourceManager { get; }
    internal static string WaitHandleCannotBeOpenedException_InvalidHandle { get; }
    internal static string PlatformNotSupported_AccessControl { get; }
    private static bool UsingResourceKeys();
    internal static string GetResourceString(string resourceKey, string defaultString);
    internal static string Format(string resourceFormat, object p1);
    internal static string Format(string resourceFormat, object p1, object p2);
    internal static string Format(string resourceFormat, object p1, object p2, object p3);
    internal static string Format(string resourceFormat, Object[] args);
    internal static string Format(IFormatProvider provider, string resourceFormat, object p1);
    internal static string Format(IFormatProvider provider, string resourceFormat, object p1, object p2);
    internal static string Format(IFormatProvider provider, string resourceFormat, object p1, object p2, object p3);
    internal static string Format(IFormatProvider provider, string resourceFormat, Object[] args);
    internal static ResourceManager get_ResourceManager();
    internal static string get_WaitHandleCannotBeOpenedException_InvalidHandle();
    internal static string get_PlatformNotSupported_AccessControl();
}
[ExtensionAttribute]
public static class System.Threading.ThreadingAclExtensions : object {
    [ExtensionAttribute]
public static EventWaitHandleSecurity GetAccessControl(EventWaitHandle handle);
    [ExtensionAttribute]
public static void SetAccessControl(EventWaitHandle handle, EventWaitHandleSecurity eventSecurity);
    [ExtensionAttribute]
public static MutexSecurity GetAccessControl(Mutex mutex);
    [ExtensionAttribute]
public static void SetAccessControl(Mutex mutex, MutexSecurity mutexSecurity);
    [ExtensionAttribute]
public static SemaphoreSecurity GetAccessControl(Semaphore semaphore);
    [ExtensionAttribute]
public static void SetAccessControl(Semaphore semaphore, SemaphoreSecurity semaphoreSecurity);
}
