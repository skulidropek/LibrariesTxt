internal static class FxResources.System.Windows.Input.Manipulations.SR : object {
}
internal static class System.SR : object {
    private static ResourceManager s_resourceManager;
    [CompilerGeneratedAttribute]
private static CultureInfo <Culture>k__BackingField;
    internal static string ArgumentOutOfRange;
    internal static string CannotChangeParameterDuringInertia;
    internal static string IllegalPivotRadius;
    internal static string InertiaParametersUnspecified1and2;
    internal static string InertiaParametersUnspecified2;
    internal static string InertiaProcessorInvalidRadius;
    internal static string InvalidTimestamp;
    internal static string NoInertiaVelocitiesSpecified;
    internal static string OnlyProportionalExpansionSupported;
    internal static string ValueMustBeFinite;
    internal static string ValueMustBeFiniteNonNegative;
    internal static string ValueMustBeFiniteOrNaN;
    internal static ResourceManager ResourceManager { get; }
    internal static CultureInfo Culture { get; internal set; }
    internal static ResourceManager get_ResourceManager();
    [CompilerGeneratedAttribute]
internal static CultureInfo get_Culture();
    [CompilerGeneratedAttribute]
internal static void set_Culture(CultureInfo value);
    internal static string GetResourceString(string resourceKey, string defaultValue);
}
internal static class System.Windows.Input.Manipulations.DoubleUtil : object {
    private static double DBL_EPSILON;
    public static bool IsZero(double d);
    public static double Limit(double d, double min, double max);
}
internal static class System.Windows.Input.Manipulations.Exceptions : object {
    public static Exception ValueMustBeFinite(string paramName, object value);
    public static Exception ValueMustBeFiniteOrNaN(string paramName, object value);
    public static Exception ValueMustBeFiniteNonNegative(string paramName, object value);
    public static Exception IllegalPivotRadius(string paramName, object value);
    public static Exception IllegialInertiaRadius(string paramName, object value);
    public static Exception InvalidTimestamp(string paramName, long value);
    public static Exception ArgumentOutOfRange(string paramName, object value);
    public static Exception OnlyProportionalExpansionSupported(string paramName1, string paramName2);
    public static Exception InertiaParametersUnspecified2(string paramName1, string paramName2);
    public static Exception InertiaParametersUnspecified1and2(string paramName1, string paramName2a, string paramName2b);
    public static Exception CannotChangeParameterDuringInertia(string paramName);
    public static Exception NoInertiaVelocitiesSpecified(string linearVelocityXParamName, string linearVelocityYParamName, string angularVelocityParamName, string expansionVelocityXParamName, string expansionVelocityYParamName);
    private static ArgumentOutOfRangeException ArgumentOutOfRange(string paramName, object value, string messageFormat);
    private static bool IsPropertyName(string paramName);
    private static string Format(string format, Object[] args);
}
public class System.Windows.Input.Manipulations.InertiaExpansionBehavior2D : InertiaParameters2D {
    private static string initialRadiusName;
    private static string desiredDecelerationName;
    private static string desiredExpansionXName;
    private static string desiredExpansionYName;
    private static string initialVelocityXName;
    private static string initialVelocityYName;
    private float initialRadius;
    private float desiredDeceleration;
    private float desiredExpansionX;
    private float desiredExpansionY;
    private float initialVelocityX;
    private float initialVelocityY;
    public float InitialRadius { get; public set; }
    public float DesiredDeceleration { get; public set; }
    public float DesiredExpansionX { get; public set; }
    public float DesiredExpansionY { get; public set; }
    public float InitialVelocityX { get; public set; }
    public float InitialVelocityY { get; public set; }
    public float get_InitialRadius();
    public void set_InitialRadius(float value);
    public float get_DesiredDeceleration();
    public void set_DesiredDeceleration(float value);
    public float get_DesiredExpansionX();
    public void set_DesiredExpansionX(float value);
    public float get_DesiredExpansionY();
    public void set_DesiredExpansionY(float value);
    public float get_InitialVelocityX();
    public void set_InitialVelocityX(float value);
    public float get_InitialVelocityY();
    public void set_InitialVelocityY(float value);
    internal void CheckValid();
    private static string SubpropertyName(string paramName);
    private static void CheckRadius(float value, string paramName);
}
public abstract class System.Windows.Input.Manipulations.InertiaParameters2D : object {
    [CompilerGeneratedAttribute]
private Action`2<InertiaParameters2D, string> Changed;
    [CompilerGeneratedAttribute]
internal void add_Changed(Action`2<InertiaParameters2D, string> value);
    [CompilerGeneratedAttribute]
internal void remove_Changed(Action`2<InertiaParameters2D, string> value);
    internal void ProtectedChangeProperty(Func`1<bool> isEqual, Action setNewValue, string paramName);
}
public class System.Windows.Input.Manipulations.InertiaProcessor2D : object {
    private static double timestampTicksPerMillisecond;
    private static double millisecondsPerTimestampTick;
    private static double millisecondsPerTimestampTickSquared;
    private static string initialOriginXName;
    private static string initialOriginYName;
    private long initialTimestamp;
    private long previousTimestamp;
    private InertiaTranslationBehavior2D translationBehavior;
    private InertiaRotationBehavior2D rotationBehavior;
    private InertiaExpansionBehavior2D expansionBehavior;
    private double initialScale;
    private double desiredDisplacement;
    private double desiredDeceleration;
    private InitialState initialTranslationX;
    private InitialState initialTranslationY;
    private InitialState initialOrientation;
    private InitialState initialExpansion;
    private ExtrapolationState translationX;
    private ExtrapolationState translationY;
    private ExtrapolationState orientation;
    private ExtrapolationState expansion;
    private ProcessorState processorState;
    [CompilerGeneratedAttribute]
private EventHandler`1<Manipulation2DDeltaEventArgs> Delta;
    [CompilerGeneratedAttribute]
private EventHandler`1<Manipulation2DCompletedEventArgs> Completed;
    public float InitialOriginX { get; public set; }
    public float InitialOriginY { get; public set; }
    public bool IsRunning { get; }
    public InertiaTranslationBehavior2D TranslationBehavior { get; public set; }
    public InertiaRotationBehavior2D RotationBehavior { get; public set; }
    public InertiaExpansionBehavior2D ExpansionBehavior { get; public set; }
    public float get_InitialOriginX();
    public void set_InitialOriginX(float value);
    public float get_InitialOriginY();
    public void set_InitialOriginY(float value);
    public bool get_IsRunning();
    public InertiaTranslationBehavior2D get_TranslationBehavior();
    public void set_TranslationBehavior(InertiaTranslationBehavior2D value);
    public InertiaRotationBehavior2D get_RotationBehavior();
    public void set_RotationBehavior(InertiaRotationBehavior2D value);
    public InertiaExpansionBehavior2D get_ExpansionBehavior();
    public void set_ExpansionBehavior(InertiaExpansionBehavior2D value);
    [CompilerGeneratedAttribute]
public void add_Delta(EventHandler`1<Manipulation2DDeltaEventArgs> value);
    [CompilerGeneratedAttribute]
public void remove_Delta(EventHandler`1<Manipulation2DDeltaEventArgs> value);
    [CompilerGeneratedAttribute]
public void add_Completed(EventHandler`1<Manipulation2DCompletedEventArgs> value);
    [CompilerGeneratedAttribute]
public void remove_Completed(EventHandler`1<Manipulation2DCompletedEventArgs> value);
    public bool Process(long timestamp);
    public void Complete(long timestamp);
    [EditorBrowsableAttribute("1")]
public void SetParameters(InertiaParameters2D parameters);
    private void SetInitialTimestamp(long timestamp);
    private void Reset();
    private void CheckNotRunning(string paramName);
    private void SetBehavior(TBehavior& currentBehavior, TBehavior newBehavior, Action`2<InertiaParameters2D, string> handler, string propertyName);
    private void OnTranslationBehaviorChanged(InertiaParameters2D parameters, string paramName);
    private void OnRotationBehaviorChanged(InertiaParameters2D parameters, string paramName);
    private void OnExpansionBehaviorChanged(InertiaParameters2D parameters, string paramName);
    private static TBehavior GetBehavior(InertiaParameters2D parameters);
    private ManipulationVelocities2D GetVelocities();
    private static ManipulationDelta2D GetIncrementalDelta(ExtrapolatedValue translationX, ExtrapolatedValue translationY, ExtrapolatedValue orientation, ExtrapolatedValue expansion, double scaleDelta);
    private static ManipulationDelta2D GetCumulativeDelta(ExtrapolatedValue translationX, ExtrapolatedValue translationY, ExtrapolatedValue orientation, ExtrapolatedValue expansion, double totalScale);
    private void Prepare();
    private ExtrapolationState Prepare(InitialState initialState, string dimension);
    private bool ExtrapolateAndRaiseEvents(long timestamp, bool forceCompleted);
    private static double GetExtrapolatedValue(double initialValue, double initialVelocity, double deceleration, double timeDelta);
    private static ExtrapolatedValue GetExtrapolatedValueAndUpdateState(ExtrapolationState state, double timeDelta);
    private bool Process(long timestamp, bool forceCompleted);
    private static double ScaleValue(double value, double scale);
    private static VectorD GetAbsoluteVector(double length, VectorD baseVector);
    private static void CheckOriginalValue(float value, string paramName);
}
public class System.Windows.Input.Manipulations.InertiaRotationBehavior2D : InertiaParameters2D {
    private static string desiredDecelerationName;
    private static string desiredRotationName;
    private static string initialVelocityName;
    private float desiredDeceleration;
    private float desiredRotation;
    private float initialVelocity;
    public float DesiredDeceleration { get; public set; }
    public float DesiredRotation { get; public set; }
    public float InitialVelocity { get; public set; }
    public float get_DesiredDeceleration();
    public void set_DesiredDeceleration(float value);
    public float get_DesiredRotation();
    public void set_DesiredRotation(float value);
    public float get_InitialVelocity();
    public void set_InitialVelocity(float value);
    internal void CheckValid();
    private static string SubpropertyName(string paramName);
}
public class System.Windows.Input.Manipulations.InertiaTranslationBehavior2D : InertiaParameters2D {
    private static string desiredDecelerationName;
    private static string desiredDisplacementName;
    private static string initialVelocityXName;
    private static string initialVelocityYName;
    private float desiredDeceleration;
    private float desiredDisplacement;
    private float initialVelocityX;
    private float initialVelocityY;
    public float DesiredDeceleration { get; public set; }
    public float DesiredDisplacement { get; public set; }
    public float InitialVelocityX { get; public set; }
    public float InitialVelocityY { get; public set; }
    public float get_DesiredDeceleration();
    public void set_DesiredDeceleration(float value);
    public float get_DesiredDisplacement();
    public void set_DesiredDisplacement(float value);
    public float get_InitialVelocityX();
    public void set_InitialVelocityX(float value);
    public float get_InitialVelocityY();
    public void set_InitialVelocityY(float value);
    internal void CheckValid();
    private static string SubpropertyName(string propertyName);
}
internal class System.Windows.Input.Manipulations.Lazy`1 : object {
    private Func`1<T> getValue;
    private T value;
    private bool gotValue;
    public T Value { get; }
    public Lazy`1(Func`1<T> getValue);
    public Lazy`1(T value);
    public T get_Value();
}
public class System.Windows.Input.Manipulations.Manipulation2DCompletedEventArgs : EventArgs {
    private float originX;
    private float originY;
    private ManipulationVelocities2D velocities;
    private ManipulationDelta2D total;
    public float OriginX { get; }
    public float OriginY { get; }
    public ManipulationVelocities2D Velocities { get; }
    public ManipulationDelta2D Total { get; }
    internal Manipulation2DCompletedEventArgs(float originX, float originY, ManipulationVelocities2D velocities, ManipulationDelta2D total);
    public float get_OriginX();
    public float get_OriginY();
    public ManipulationVelocities2D get_Velocities();
    public ManipulationDelta2D get_Total();
}
public class System.Windows.Input.Manipulations.Manipulation2DDeltaEventArgs : EventArgs {
    private float originX;
    private float originY;
    private ManipulationVelocities2D velocities;
    private ManipulationDelta2D delta;
    private ManipulationDelta2D cumulative;
    public float OriginX { get; }
    public float OriginY { get; }
    public ManipulationVelocities2D Velocities { get; }
    public ManipulationDelta2D Delta { get; }
    public ManipulationDelta2D Cumulative { get; }
    internal Manipulation2DDeltaEventArgs(float originX, float originY, ManipulationVelocities2D velocities, ManipulationDelta2D delta, ManipulationDelta2D cumulative);
    public float get_OriginX();
    public float get_OriginY();
    public ManipulationVelocities2D get_Velocities();
    public ManipulationDelta2D get_Delta();
    public ManipulationDelta2D get_Cumulative();
}
public class System.Windows.Input.Manipulations.Manipulation2DStartedEventArgs : EventArgs {
    private float originX;
    private float originY;
    public float OriginX { get; }
    public float OriginY { get; }
    internal Manipulation2DStartedEventArgs(float originX, float originY);
    public float get_OriginX();
    public float get_OriginY();
}
public class System.Windows.Input.Manipulations.ManipulationDelta2D : object {
    private float translationX;
    private float translationY;
    private float rotation;
    private float scaleX;
    private float scaleY;
    private float expansionX;
    private float expansionY;
    public float TranslationX { get; }
    public float TranslationY { get; }
    public float Rotation { get; }
    public float ScaleX { get; }
    public float ScaleY { get; }
    public float ExpansionX { get; }
    public float ExpansionY { get; }
    internal ManipulationDelta2D(float translationX, float translationY, float rotation, float scaleX, float scaleY, float expansionX, float expansionY);
    public float get_TranslationX();
    public float get_TranslationY();
    public float get_Rotation();
    public float get_ScaleX();
    public float get_ScaleY();
    public float get_ExpansionX();
    public float get_ExpansionY();
}
public abstract class System.Windows.Input.Manipulations.ManipulationParameters2D : object {
    internal abstract virtual void Set(ManipulationProcessor2D processor);
}
public class System.Windows.Input.Manipulations.ManipulationPivot2D : ManipulationParameters2D {
    private float x;
    private float y;
    private float radius;
    public float X { get; public set; }
    public float Y { get; public set; }
    public float Radius { get; public set; }
    internal bool HasPosition { get; }
    public float get_X();
    public void set_X(float value);
    public float get_Y();
    public void set_Y(float value);
    public float get_Radius();
    public void set_Radius(float value);
    internal bool get_HasPosition();
    internal virtual void Set(ManipulationProcessor2D processor);
    private static void CheckPivotRadius(float value, string paramName);
}
public class System.Windows.Input.Manipulations.ManipulationProcessor2D : object {
    private static double singleManipulatorTorqueFactor;
    internal static long TimestampTicksPerMillisecond;
    private float minimumScaleRotateRadius;
    private Manipulations2D supportedManipulations;
    private ManipulationPivot2D pivot;
    private ManipulationSequence currentManipulation;
    [CompilerGeneratedAttribute]
private EventHandler`1<Manipulation2DStartedEventArgs> Started;
    [CompilerGeneratedAttribute]
private EventHandler`1<Manipulation2DDeltaEventArgs> Delta;
    [CompilerGeneratedAttribute]
private EventHandler`1<Manipulation2DCompletedEventArgs> Completed;
    public float MinimumScaleRotateRadius { get; public set; }
    public ManipulationPivot2D Pivot { get; public set; }
    public Manipulations2D SupportedManipulations { get; public set; }
    public ManipulationProcessor2D(Manipulations2D supportedManipulations);
    public ManipulationProcessor2D(Manipulations2D supportedManipulations, ManipulationPivot2D pivot);
    public sealed virtual float get_MinimumScaleRotateRadius();
    public void set_MinimumScaleRotateRadius(float value);
    public sealed virtual ManipulationPivot2D get_Pivot();
    public void set_Pivot(ManipulationPivot2D value);
    public sealed virtual Manipulations2D get_SupportedManipulations();
    public void set_SupportedManipulations(Manipulations2D value);
    [CompilerGeneratedAttribute]
public void add_Started(EventHandler`1<Manipulation2DStartedEventArgs> value);
    [CompilerGeneratedAttribute]
public void remove_Started(EventHandler`1<Manipulation2DStartedEventArgs> value);
    [CompilerGeneratedAttribute]
public void add_Delta(EventHandler`1<Manipulation2DDeltaEventArgs> value);
    [CompilerGeneratedAttribute]
public void remove_Delta(EventHandler`1<Manipulation2DDeltaEventArgs> value);
    [CompilerGeneratedAttribute]
public void add_Completed(EventHandler`1<Manipulation2DCompletedEventArgs> value);
    [CompilerGeneratedAttribute]
public void remove_Completed(EventHandler`1<Manipulation2DCompletedEventArgs> value);
    public void ProcessManipulators(long timestamp, IEnumerable`1<Manipulator2D> manipulators);
    public void CompleteManipulation(long timestamp);
    [EditorBrowsableAttribute("1")]
public void SetParameters(ManipulationParameters2D parameters);
    private void OnManipulationStarted(object sender, Manipulation2DStartedEventArgs args);
    private void OnManipulationDelta(object sender, Manipulation2DDeltaEventArgs args);
    private void OnManipulationCompleted(object sender, Manipulation2DCompletedEventArgs args);
}
[FlagsAttribute]
public enum System.Windows.Input.Manipulations.Manipulations2D : Enum {
    public int value__;
    public static Manipulations2D None;
    public static Manipulations2D TranslateX;
    public static Manipulations2D TranslateY;
    public static Manipulations2D Translate;
    public static Manipulations2D Scale;
    public static Manipulations2D Rotate;
    public static Manipulations2D All;
}
[ExtensionAttribute]
internal static class System.Windows.Input.Manipulations.Manipulations2DUtil : object {
    [ExtensionAttribute]
public static bool IsValid(Manipulations2D value);
    [ExtensionAttribute]
public static void CheckValue(Manipulations2D value, string property);
    [ExtensionAttribute]
public static bool SupportsAny(Manipulations2D value, Manipulations2D supported);
}
internal class System.Windows.Input.Manipulations.ManipulationSequence : object {
    private static PointF ZeroPoint;
    private static VectorF ZeroVector;
    private static double singleManipulatorTorqueFactor;
    private Dictionary`2<int, ManipulatorState> manipulatorStates;
    private HistoryQueue history;
    private SmoothingQueue smoothing;
    private ProcessorState processorState;
    private ManipulationState initialManipulationState;
    private ManipulationState currentManipulationState;
    private VectorF cumulativeTranslation;
    private float cumulativeScale;
    private float cumulativeExpansion;
    private float cumulativeRotation;
    private float smoothedCumulativeScale;
    private float smoothedCumulativeRotation;
    private float smoothedCumulativeExpansion;
    private float averageRadius;
    [CompilerGeneratedAttribute]
private EventHandler`1<Manipulation2DStartedEventArgs> Started;
    [CompilerGeneratedAttribute]
private EventHandler`1<Manipulation2DDeltaEventArgs> Delta;
    [CompilerGeneratedAttribute]
private EventHandler`1<Manipulation2DCompletedEventArgs> Completed;
    private static ManipulationSequence();
    [CompilerGeneratedAttribute]
public void add_Started(EventHandler`1<Manipulation2DStartedEventArgs> value);
    [CompilerGeneratedAttribute]
public void remove_Started(EventHandler`1<Manipulation2DStartedEventArgs> value);
    [CompilerGeneratedAttribute]
public void add_Delta(EventHandler`1<Manipulation2DDeltaEventArgs> value);
    [CompilerGeneratedAttribute]
public void remove_Delta(EventHandler`1<Manipulation2DDeltaEventArgs> value);
    [CompilerGeneratedAttribute]
public void add_Completed(EventHandler`1<Manipulation2DCompletedEventArgs> value);
    [CompilerGeneratedAttribute]
public void remove_Completed(EventHandler`1<Manipulation2DCompletedEventArgs> value);
    public void ProcessManipulators(long timestamp, IEnumerable`1<Manipulator2D> manipulators, ISettings settings);
    public void CompleteManipulation(long timestamp);
    private static bool IsPinned(ISettings settings);
    private float GetVelocityX();
    private float GetVelocityY();
    private float GetExpansionVelocity();
    private float GetAngularVelocity();
    private ManipulationVelocities2D GetVelocities();
    private float GetSmoothOrientation();
    private float GetSmoothExpansion();
    private float GetSmoothScale();
    private void ExtractAndUpdateManipulators(IEnumerable`1<Manipulator2D> manipulators, long timestamp, List`1& addedManipulatorList, HashSet`1& removedManipulatorIds, Int32& currentManipulatorCount, Int32& updatedManipulatorCount);
    private void OnProcessManipulators(long timestamp, IEnumerable`1<Manipulator2D> manipulators, ISettings settings);
    private void ProcessAddsAndRemoves(long timestamp, List`1<ManipulatorState> addedManipulatorList, HashSet`1<int> removedManipulatorIds);
    private void RaiseEvents(VectorF previousTranslation, float previousSmoothedScale, float previousSmoothedExpansion, float previousSmoothedRotation);
    private void OnCompleteManipulation(long timestamp);
    private void AddManipulator(ManipulatorState initialState);
    private bool RemoveManipulator(int manipulatorId);
    private void EnsureReadyToProcessManipulators(long timestamp);
    private void CalculateTransforms(long timestamp, ISettings settings);
    private static float ForceFinite(float value);
    private static float ForcePositive(float value);
    private void GetSmoothedDeltas(long timestamp, ISettings settings, Single& smoothedScale, Single& smoothedExpansion, Single& smoothedRotation);
    private void CalculateMultiManipulatorRotationAndScale(PointF averagePoint, Single& rotation, Single& scaleFactor, Single& expansion, ISettings settings);
    private static float CalculateSingleManipulatorRotation(PointF currentPosition, PointF previousPosition, ISettings settings);
    private void InitializeManipulationState(long timestamp);
    private void OverwriteManipulationState(PointF position, float scale, float expansion, float orientation, long timestamp);
    private PointF GetAveragePoint();
    private void SetVectorsFromPoint(PointF referenceOrigin, ISettings settings);
    private static float GetVelocity(Queue`1<ManipulationState> queue, PropertyAccessor accessor);
    private static float CalculateWeightedMovingAverage(Queue`1<ManipulationState> queue, PropertyAccessor accessor);
    private static float CalculateMovingAverage(Queue`1<ManipulationState> queue, PropertyAccessor accessor, float defaultValue);
    private static float AdjustOrientation(float value, float baseValue);
    private static ManipulatorState CreateManipulatorState(Manipulator2D manipulator);
}
public class System.Windows.Input.Manipulations.ManipulationVelocities2D : object {
    private Lazy`1<float> linearVelocityX;
    private Lazy`1<float> linearVelocityY;
    private Lazy`1<float> angularVelocity;
    private Lazy`1<float> expansionVelocity;
    public static ManipulationVelocities2D Zero;
    public float LinearVelocityX { get; }
    public float LinearVelocityY { get; }
    public float AngularVelocity { get; }
    public float ExpansionVelocityX { get; }
    public float ExpansionVelocityY { get; }
    internal ManipulationVelocities2D(float linearVelocityX, float linearVelocityY, float angularVelocity, float expansionVelocity);
    internal ManipulationVelocities2D(Func`1<float> getLinearVelocityX, Func`1<float> getLinearVelocityY, Func`1<float> getAngularVelocity, Func`1<float> getExpansionVelocity);
    private static ManipulationVelocities2D();
    public float get_LinearVelocityX();
    public float get_LinearVelocityY();
    public float get_AngularVelocity();
    public float get_ExpansionVelocityX();
    public float get_ExpansionVelocityY();
}
public class System.Windows.Input.Manipulations.Manipulator2D : ValueType {
    private int id;
    private float x;
    private float y;
    public int Id { get; public set; }
    public float X { get; public set; }
    public float Y { get; public set; }
    public Manipulator2D(int id, float x, float y);
    public static bool op_Equality(Manipulator2D manipulator1, Manipulator2D manipulator2);
    public static bool op_Inequality(Manipulator2D manipulator1, Manipulator2D manipulator2);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public int get_Id();
    public void set_Id(int value);
    public float get_X();
    public void set_X(float value);
    public float get_Y();
    public void set_Y(float value);
}
internal class System.Windows.Input.Manipulations.PointF : ValueType {
    private float x;
    private float y;
    public float X { get; }
    public float Y { get; }
    public PointF(float x, float y);
    public static VectorF op_Explicit(PointF point);
    public static bool op_Inequality(PointF left, PointF right);
    public static bool op_Equality(PointF left, PointF right);
    public static PointF op_Addition(PointF pt, VectorF offset);
    public static VectorF op_Subtraction(PointF point1, PointF point2);
    public static PointF op_Subtraction(PointF point, VectorF vector);
    public float get_X();
    public float get_Y();
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public virtual string ToString();
}
internal static class System.Windows.Input.Manipulations.Validations : object {
    public static void CheckNotNull(object value, string paramName);
    public static bool IsFinite(float value);
    public static void CheckFinite(float value, string paramName);
    public static bool IsFiniteOrNaN(float value);
    public static void CheckFiniteOrNaN(float value, string paramName);
    public static bool IsFiniteNonNegative(float value);
    public static void CheckFiniteNonNegative(float value, string paramName);
}
internal class System.Windows.Input.Manipulations.VectorD : ValueType {
    private double x;
    private double y;
    public double X { get; }
    public double Y { get; }
    public double Length { get; }
    public double LengthSquared { get; }
    public VectorD(double x, double y);
    public double get_X();
    public double get_Y();
    public static VectorD op_UnaryNegation(VectorD vector);
    public static bool op_Inequality(VectorD vector1, VectorD vector2);
    public static bool op_Equality(VectorD vector1, VectorD vector2);
    public virtual bool Equals(object o);
    public static VectorD op_Addition(VectorD vector1, VectorD vector2);
    public static VectorD op_Subtraction(VectorD vector1, VectorD vector2);
    public static VectorD op_Multiply(double scalar, VectorD vector);
    public static VectorD op_Multiply(VectorD vector, double scalar);
    public static VectorD op_Division(VectorD vector, double scalar);
    public static double op_Multiply(VectorD vector1, VectorD vector2);
    public double get_Length();
    public double get_LengthSquared();
    public virtual int GetHashCode();
    public virtual string ToString();
    public string ToString(IFormatProvider provider);
}
internal class System.Windows.Input.Manipulations.VectorF : ValueType {
    private float x;
    private float y;
    public float X { get; public set; }
    public float Y { get; public set; }
    public float Length { get; }
    public float LengthSquared { get; }
    public VectorF(float x, float y);
    public float get_X();
    public void set_X(float value);
    public float get_Y();
    public void set_Y(float value);
    public static PointF op_Explicit(VectorF vector);
    public static VectorF op_UnaryNegation(VectorF vector);
    public static bool op_Inequality(VectorF vector1, VectorF vector2);
    public static bool op_Equality(VectorF vector1, VectorF vector2);
    public virtual bool Equals(object o);
    public static VectorF op_Addition(VectorF vector1, VectorF vector2);
    public static PointF op_Addition(VectorF vector, PointF point);
    public static VectorF op_Subtraction(VectorF vector1, VectorF vector2);
    public static VectorF op_Multiply(float scalar, VectorF vector);
    public static VectorF op_Multiply(VectorF vector, float scalar);
    public static VectorF op_Division(VectorF vector, float scalar);
    public static float op_Multiply(VectorF vector1, VectorF vector2);
    public float get_Length();
    public float get_LengthSquared();
    public void Normalize();
    public static float AngleBetween(VectorF vector1, VectorF vector2);
    public virtual int GetHashCode();
    public virtual string ToString();
}
