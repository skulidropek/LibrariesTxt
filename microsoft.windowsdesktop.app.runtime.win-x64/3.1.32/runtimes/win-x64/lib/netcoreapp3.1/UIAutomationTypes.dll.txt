internal static class FxResources.UIAutomationTypes.SR : object {
}
internal static class MS.Internal.Automation.AutomationIdentifierConstants : object {
    internal static Properties FirstProperty;
    internal static Events FirstEvent;
    internal static Patterns FirstPattern;
    internal static TextAttributes FirstTextAttribute;
    internal static ControlTypes FirstControlType;
    internal static Properties LastSupportedProperty;
    internal static Events LastSupportedEvent;
    internal static Patterns LastSupportedPattern;
    internal static TextAttributes LastSupportedTextAttribute;
    internal static ControlTypes LastSupportedControlType;
    private static AutomationIdentifierConstants();
}
internal static class MS.Internal.Automation.UiaCoreTypesApi : object {
    internal static int UIA_E_ELEMENTNOTENABLED;
    internal static int UIA_E_ELEMENTNOTAVAILABLE;
    internal static int UIA_E_NOCLICKABLEPOINT;
    internal static int UIA_E_PROXYASSEMBLYNOTLOADED;
    private static string StartListeningExportName;
    internal static int UiaLookupId(AutomationIdType type, Guid& guid);
    internal static object UiaGetReservedNotSupportedValue();
    internal static object UiaGetReservedMixedAttributeValue();
    internal static bool SupportsWin7Identifiers();
    private static void CheckError(int hr);
    private static int RawUiaLookupId(AutomationIdType type, Guid& guid);
    private static int RawUiaGetReservedNotSupportedValue(Object& notSupportedValue);
    private static int RawUiaGetReservedMixedAttributeValue(Object& mixedAttributeValue);
}
[FriendAccessAllowedAttribute]
internal class MS.Internal.SecurityCriticalDataForSet`1 : ValueType {
    private T _value;
    internal T Value { get; internal set; }
    internal SecurityCriticalDataForSet`1(T value);
    internal T get_Value();
    internal void set_Value(T value);
}
internal static class MS.Internal.UIAutomationTypes.BuildInfo : object {
    internal static string WCP_VERSION;
    internal static string WCP_VERSION_SUFFIX;
    internal static string MIL_VERSION_SUFFIX;
    internal static string WCP_PUBLIC_KEY_TOKEN;
    internal static string WCP_PUBLIC_KEY_STRING;
    internal static string DEVDIV_PUBLIC_KEY_STRING;
    internal static string DEVDIV_PUBLIC_KEY_TOKEN;
    internal static string DirectWriteForwarder;
    internal static string PresentationCore;
    internal static string PresentationCFFRasterizer;
    internal static string PresentationFramework;
    internal static string PresentationUI;
    internal static string PresentationFrameworkLuna;
    internal static string PresentationFrameworkRoyale;
    internal static string PresentationFrameworkAero;
    internal static string PresentationFrameworkAero2;
    internal static string PresentationFrameworkAeroLite;
    internal static string PresentationFrameworkClassic;
    internal static string PresentationFrameworkSystemCore;
    internal static string PresentationFrameworkSystemData;
    internal static string PresentationFrameworkSystemDrawing;
    internal static string PresentationFrameworkSystemXml;
    internal static string PresentationFrameworkSystemXmlLinq;
    internal static string ReachFramework;
    internal static string SystemPrinting;
    internal static string SystemXaml;
    internal static string WindowsFormsIntegration;
    internal static string SystemWindowsPresentation;
    internal static string SystemWindowsControlsRibbon;
}
internal static class MS.Internal.UIAutomationTypes.DllImport : object {
    internal static string PresentationNative;
    internal static string PresentationCFFRasterizerNative;
    internal static string MilCore;
    internal static string UIAutomationCore;
    internal static string Wininet;
    internal static string WindowsCodecs;
    internal static string WindowsCodecsExt;
    internal static string Mscms;
    internal static string PrntvPt;
    internal static string Ole32;
    internal static string User32;
    internal static string NInput;
}
[AttributeUsageAttribute("5628")]
internal class MS.Internal.UIAutomationTypes.FriendAccessAllowedAttribute : Attribute {
}
internal enum MS.Internal.UIAutomationTypes.Interop.OperatingSystemVersion : Enum {
    public int value__;
    public static OperatingSystemVersion WindowsXPSP2;
    public static OperatingSystemVersion WindowsXPSP3;
    public static OperatingSystemVersion WindowsVista;
    public static OperatingSystemVersion WindowsVistaSP1;
    public static OperatingSystemVersion WindowsVistaSP2;
    public static OperatingSystemVersion Windows7;
    public static OperatingSystemVersion Windows7SP1;
    public static OperatingSystemVersion Windows8;
    public static OperatingSystemVersion Windows8Point1;
    public static OperatingSystemVersion Windows10;
    public static OperatingSystemVersion Windows10TH2;
    public static OperatingSystemVersion Windows10RS1;
    public static OperatingSystemVersion Windows10RS2;
    public static OperatingSystemVersion Windows10RS3;
    public static OperatingSystemVersion Windows10RS5;
}
internal static class MS.Internal.UIAutomationTypes.Interop.OSVersionHelper : object {
    [CompilerGeneratedAttribute]
private static bool <IsOsWindows10RS5OrGreater>k__BackingField;
    [CompilerGeneratedAttribute]
private static bool <IsOsWindows10RS3OrGreater>k__BackingField;
    [CompilerGeneratedAttribute]
private static bool <IsOsWindows10RS2OrGreater>k__BackingField;
    [CompilerGeneratedAttribute]
private static bool <IsOsWindows10RS1OrGreater>k__BackingField;
    [CompilerGeneratedAttribute]
private static bool <IsOsWindows10TH2OrGreater>k__BackingField;
    [CompilerGeneratedAttribute]
private static bool <IsOsWindows10TH1OrGreater>k__BackingField;
    [CompilerGeneratedAttribute]
private static bool <IsOsWindows10OrGreater>k__BackingField;
    [CompilerGeneratedAttribute]
private static bool <IsOsWindows8Point1OrGreater>k__BackingField;
    [CompilerGeneratedAttribute]
private static bool <IsOsWindows8OrGreater>k__BackingField;
    [CompilerGeneratedAttribute]
private static bool <IsOsWindows7SP1OrGreater>k__BackingField;
    [CompilerGeneratedAttribute]
private static bool <IsOsWindows7OrGreater>k__BackingField;
    [CompilerGeneratedAttribute]
private static bool <IsOsWindowsVistaSP2OrGreater>k__BackingField;
    [CompilerGeneratedAttribute]
private static bool <IsOsWindowsVistaSP1OrGreater>k__BackingField;
    [CompilerGeneratedAttribute]
private static bool <IsOsWindowsVistaOrGreater>k__BackingField;
    [CompilerGeneratedAttribute]
private static bool <IsOsWindowsXPSP3OrGreater>k__BackingField;
    [CompilerGeneratedAttribute]
private static bool <IsOsWindowsXPSP2OrGreater>k__BackingField;
    [CompilerGeneratedAttribute]
private static bool <IsOsWindowsXPSP1OrGreater>k__BackingField;
    [CompilerGeneratedAttribute]
private static bool <IsOsWindowsXPOrGreater>k__BackingField;
    [CompilerGeneratedAttribute]
private static bool <IsOsWindowsServer>k__BackingField;
    internal static bool IsOsWindows10RS5OrGreater { get; internal set; }
    internal static bool IsOsWindows10RS3OrGreater { get; internal set; }
    internal static bool IsOsWindows10RS2OrGreater { get; internal set; }
    internal static bool IsOsWindows10RS1OrGreater { get; internal set; }
    internal static bool IsOsWindows10TH2OrGreater { get; internal set; }
    internal static bool IsOsWindows10TH1OrGreater { get; internal set; }
    internal static bool IsOsWindows10OrGreater { get; internal set; }
    internal static bool IsOsWindows8Point1OrGreater { get; internal set; }
    internal static bool IsOsWindows8OrGreater { get; internal set; }
    internal static bool IsOsWindows7SP1OrGreater { get; internal set; }
    internal static bool IsOsWindows7OrGreater { get; internal set; }
    internal static bool IsOsWindowsVistaSP2OrGreater { get; internal set; }
    internal static bool IsOsWindowsVistaSP1OrGreater { get; internal set; }
    internal static bool IsOsWindowsVistaOrGreater { get; internal set; }
    internal static bool IsOsWindowsXPSP3OrGreater { get; internal set; }
    internal static bool IsOsWindowsXPSP2OrGreater { get; internal set; }
    internal static bool IsOsWindowsXPSP1OrGreater { get; internal set; }
    internal static bool IsOsWindowsXPOrGreater { get; internal set; }
    internal static bool IsOsWindowsServer { get; internal set; }
    private static OSVersionHelper();
    [CompilerGeneratedAttribute]
internal static bool get_IsOsWindows10RS5OrGreater();
    [CompilerGeneratedAttribute]
internal static void set_IsOsWindows10RS5OrGreater(bool value);
    [CompilerGeneratedAttribute]
internal static bool get_IsOsWindows10RS3OrGreater();
    [CompilerGeneratedAttribute]
internal static void set_IsOsWindows10RS3OrGreater(bool value);
    [CompilerGeneratedAttribute]
internal static bool get_IsOsWindows10RS2OrGreater();
    [CompilerGeneratedAttribute]
internal static void set_IsOsWindows10RS2OrGreater(bool value);
    [CompilerGeneratedAttribute]
internal static bool get_IsOsWindows10RS1OrGreater();
    [CompilerGeneratedAttribute]
internal static void set_IsOsWindows10RS1OrGreater(bool value);
    [CompilerGeneratedAttribute]
internal static bool get_IsOsWindows10TH2OrGreater();
    [CompilerGeneratedAttribute]
internal static void set_IsOsWindows10TH2OrGreater(bool value);
    [CompilerGeneratedAttribute]
internal static bool get_IsOsWindows10TH1OrGreater();
    [CompilerGeneratedAttribute]
internal static void set_IsOsWindows10TH1OrGreater(bool value);
    [CompilerGeneratedAttribute]
internal static bool get_IsOsWindows10OrGreater();
    [CompilerGeneratedAttribute]
internal static void set_IsOsWindows10OrGreater(bool value);
    [CompilerGeneratedAttribute]
internal static bool get_IsOsWindows8Point1OrGreater();
    [CompilerGeneratedAttribute]
internal static void set_IsOsWindows8Point1OrGreater(bool value);
    [CompilerGeneratedAttribute]
internal static bool get_IsOsWindows8OrGreater();
    [CompilerGeneratedAttribute]
internal static void set_IsOsWindows8OrGreater(bool value);
    [CompilerGeneratedAttribute]
internal static bool get_IsOsWindows7SP1OrGreater();
    [CompilerGeneratedAttribute]
internal static void set_IsOsWindows7SP1OrGreater(bool value);
    [CompilerGeneratedAttribute]
internal static bool get_IsOsWindows7OrGreater();
    [CompilerGeneratedAttribute]
internal static void set_IsOsWindows7OrGreater(bool value);
    [CompilerGeneratedAttribute]
internal static bool get_IsOsWindowsVistaSP2OrGreater();
    [CompilerGeneratedAttribute]
internal static void set_IsOsWindowsVistaSP2OrGreater(bool value);
    [CompilerGeneratedAttribute]
internal static bool get_IsOsWindowsVistaSP1OrGreater();
    [CompilerGeneratedAttribute]
internal static void set_IsOsWindowsVistaSP1OrGreater(bool value);
    [CompilerGeneratedAttribute]
internal static bool get_IsOsWindowsVistaOrGreater();
    [CompilerGeneratedAttribute]
internal static void set_IsOsWindowsVistaOrGreater(bool value);
    [CompilerGeneratedAttribute]
internal static bool get_IsOsWindowsXPSP3OrGreater();
    [CompilerGeneratedAttribute]
internal static void set_IsOsWindowsXPSP3OrGreater(bool value);
    [CompilerGeneratedAttribute]
internal static bool get_IsOsWindowsXPSP2OrGreater();
    [CompilerGeneratedAttribute]
internal static void set_IsOsWindowsXPSP2OrGreater(bool value);
    [CompilerGeneratedAttribute]
internal static bool get_IsOsWindowsXPSP1OrGreater();
    [CompilerGeneratedAttribute]
internal static void set_IsOsWindowsXPSP1OrGreater(bool value);
    [CompilerGeneratedAttribute]
internal static bool get_IsOsWindowsXPOrGreater();
    [CompilerGeneratedAttribute]
internal static void set_IsOsWindowsXPOrGreater(bool value);
    [CompilerGeneratedAttribute]
internal static bool get_IsOsWindowsServer();
    [CompilerGeneratedAttribute]
internal static void set_IsOsWindowsServer(bool value);
    private static bool IsWindows10RS5OrGreater();
    private static bool IsWindows10RS3OrGreater();
    private static bool IsWindows10RS2OrGreater();
    private static bool IsWindows10RS1OrGreater();
    private static bool IsWindows10TH2OrGreater();
    private static bool IsWindows10TH1OrGreater();
    private static bool IsWindows10OrGreater();
    private static bool IsWindows8Point1OrGreater();
    private static bool IsWindows8OrGreater();
    private static bool IsWindows7SP1OrGreater();
    private static bool IsWindows7OrGreater();
    private static bool IsWindowsVistaSP2OrGreater();
    private static bool IsWindowsVistaSP1OrGreater();
    private static bool IsWindowsVistaOrGreater();
    private static bool IsWindowsXPSP3OrGreater();
    private static bool IsWindowsXPSP2OrGreater();
    private static bool IsWindowsXPSP1OrGreater();
    private static bool IsWindowsXPOrGreater();
    private static bool IsWindowsServer();
    internal static bool IsOsVersionOrGreater(OperatingSystemVersion osVer);
    internal static OperatingSystemVersion GetOsVersion();
}
internal static class MS.Internal.UIAutomationTypes.NativeMethodsSetLastError : object {
    private static string PresentationNativeDll;
    public static bool EnableWindow(HandleRef hWnd, bool enable);
    public static IntPtr GetAncestor(IntPtr hwnd, int gaFlags);
    public static int GetKeyboardLayoutList(int size, IntPtr[] hkls);
    public static IntPtr GetParent(HandleRef hWnd);
    public static IntPtr GetWindow(IntPtr hWnd, int uCmd);
    public static int GetWindowLong(HandleRef hWnd, int nIndex);
    public static int GetWindowLong(IntPtr hWnd, int nIndex);
    public static WndProc GetWindowLongWndProc(HandleRef hWnd, int nIndex);
    public static IntPtr GetWindowLongPtr(IntPtr hWnd, int nIndex);
    public static IntPtr GetWindowLongPtr(HandleRef hWnd, int nIndex);
    public static WndProc GetWindowLongPtrWndProc(HandleRef hWnd, int nIndex);
    public static int GetWindowText(HandleRef hWnd, StringBuilder lpString, int nMaxCount);
    public static int GetWindowTextLength(HandleRef hWnd);
    public static int MapWindowPoints(HandleRef hWndFrom, HandleRef hWndTo, RECT& rect, int cPoints);
    public static IntPtr SetFocus(HandleRef hWnd);
    public static int SetWindowLong(HandleRef hWnd, int nIndex, int dwNewLong);
    public static int SetWindowLong(IntPtr hWnd, int nIndex, int dwNewLong);
    public static int SetWindowLongWndProc(HandleRef hWnd, int nIndex, WndProc dwNewLong);
    public static IntPtr SetWindowLongPtr(HandleRef hWnd, int nIndex, IntPtr dwNewLong);
    public static IntPtr SetWindowLongPtr(IntPtr hWnd, int nIndex, IntPtr dwNewLong);
    public static IntPtr SetWindowLongPtrWndProc(HandleRef hWnd, int nIndex, WndProc dwNewLong);
}
internal static class MS.Win32.ExternDll : object {
    public static string Activeds;
    public static string Advapi32;
    public static string Comctl32;
    public static string Comdlg32;
    public static string DwmAPI;
    public static string Gdi32;
    public static string Gdiplus;
    public static string Hhctrl;
    public static string Imm32;
    public static string Kernel32;
    public static string Loadperf;
    public static string Mqrt;
    public static string Mscoree;
    public static string MsDrm;
    public static string Mshwgst;
    public static string Msi;
    public static string NaturalLanguage6;
    public static string Ntdll;
    public static string Ole32;
    public static string Oleacc;
    public static string Oleaut32;
    public static string Olepro32;
    public static string Penimc;
    public static string PresentationCore;
    public static string PresentationFramework;
    public static string PresentationHostDll;
    public static string PresentationNativeDll;
    public static string Psapi;
    public static string Shcore;
    public static string Shell32;
    public static string Shfolder;
    public static string Urlmon;
    public static string User32;
    public static string Uxtheme;
    public static string Version;
    public static string Vsassert;
    public static string WindowsBase;
    public static string Wininet;
    public static string Winmm;
    public static string Winspool;
    public static string Wldp;
    public static string WpfGfx;
    public static string WtsApi32;
}
internal static class MS.Win32.HandleCollector : object {
    private static HandleType[] handleTypes;
    private static int handleTypeCount;
    private static object handleMutex;
    private static HandleCollector();
    internal static IntPtr Add(IntPtr handle, int type);
    internal static SafeHandle Add(SafeHandle handle, int type);
    internal static void Add(int type);
    internal static int RegisterType(string typeName, int expense, int initialThreshold);
    internal static IntPtr Remove(IntPtr handle, int type);
    internal static SafeHandle Remove(SafeHandle handle, int type);
    internal static void Remove(int type);
}
internal static class MS.Win32.LoadLibraryHelper : object {
    private static bool IsKnowledgeBase2533623OrGreater();
    internal static IntPtr SecureLoadLibraryEx(string lpFileName, IntPtr hFile, LoadLibraryFlags dwFlags);
}
[FriendAccessAllowedAttribute]
internal class MS.Win32.NativeMethods : object {
    public static IntPtr InvalidIntPtr;
    public static IntPtr LPSTR_TEXTCALLBACK;
    public static HandleRef NullHandleRef;
    public static int ERROR;
    public static int BITMAPINFO_MAX_COLORSIZE;
    public static int PAGE_READWRITE;
    public static int FILE_MAP_READ;
    public static int APPCOMMAND_BROWSER_BACKWARD;
    public static int APPCOMMAND_BROWSER_FORWARD;
    public static int APPCOMMAND_BROWSER_REFRESH;
    public static int APPCOMMAND_BROWSER_STOP;
    public static int APPCOMMAND_BROWSER_SEARCH;
    public static int APPCOMMAND_BROWSER_FAVORITES;
    public static int APPCOMMAND_BROWSER_HOME;
    public static int APPCOMMAND_VOLUME_MUTE;
    public static int APPCOMMAND_VOLUME_DOWN;
    public static int APPCOMMAND_VOLUME_UP;
    public static int APPCOMMAND_MEDIA_NEXTTRACK;
    public static int APPCOMMAND_MEDIA_PREVIOUSTRACK;
    public static int APPCOMMAND_MEDIA_STOP;
    public static int APPCOMMAND_MEDIA_PLAY_PAUSE;
    public static int APPCOMMAND_LAUNCH_MAIL;
    public static int APPCOMMAND_LAUNCH_MEDIA_SELECT;
    public static int APPCOMMAND_LAUNCH_APP1;
    public static int APPCOMMAND_LAUNCH_APP2;
    public static int APPCOMMAND_BASS_DOWN;
    public static int APPCOMMAND_BASS_BOOST;
    public static int APPCOMMAND_BASS_UP;
    public static int APPCOMMAND_TREBLE_DOWN;
    public static int APPCOMMAND_TREBLE_UP;
    public static int APPCOMMAND_MICROPHONE_VOLUME_MUTE;
    public static int APPCOMMAND_MICROPHONE_VOLUME_DOWN;
    public static int APPCOMMAND_MICROPHONE_VOLUME_UP;
    public static int APPCOMMAND_HELP;
    public static int APPCOMMAND_FIND;
    public static int APPCOMMAND_NEW;
    public static int APPCOMMAND_OPEN;
    public static int APPCOMMAND_CLOSE;
    public static int APPCOMMAND_SAVE;
    public static int APPCOMMAND_PRINT;
    public static int APPCOMMAND_UNDO;
    public static int APPCOMMAND_REDO;
    public static int APPCOMMAND_COPY;
    public static int APPCOMMAND_CUT;
    public static int APPCOMMAND_PASTE;
    public static int APPCOMMAND_REPLY_TO_MAIL;
    public static int APPCOMMAND_FORWARD_MAIL;
    public static int APPCOMMAND_SEND_MAIL;
    public static int APPCOMMAND_SPELL_CHECK;
    public static int APPCOMMAND_DICTATE_OR_COMMAND_CONTROL_TOGGLE;
    public static int APPCOMMAND_MIC_ON_OFF_TOGGLE;
    public static int APPCOMMAND_CORRECTION_LIST;
    public static int APPCOMMAND_MEDIA_PLAY;
    public static int APPCOMMAND_MEDIA_PAUSE;
    public static int APPCOMMAND_MEDIA_RECORD;
    public static int APPCOMMAND_MEDIA_FAST_FORWARD;
    public static int APPCOMMAND_MEDIA_REWIND;
    public static int APPCOMMAND_MEDIA_CHANNEL_UP;
    public static int APPCOMMAND_MEDIA_CHANNEL_DOWN;
    public static int FAPPCOMMAND_MOUSE;
    public static int FAPPCOMMAND_KEY;
    public static int FAPPCOMMAND_OEM;
    public static int FAPPCOMMAND_MASK;
    public static int BI_RGB;
    public static int BITSPIXEL;
    public static int cmb4;
    public static int CS_DBLCLKS;
    public static int CS_DROPSHADOW;
    public static int CS_SAVEBITS;
    public static int CF_TEXT;
    public static int CF_BITMAP;
    public static int CF_METAFILEPICT;
    public static int CF_SYLK;
    public static int CF_DIF;
    public static int CF_TIFF;
    public static int CF_OEMTEXT;
    public static int CF_DIB;
    public static int CF_PALETTE;
    public static int CF_PENDATA;
    public static int CF_RIFF;
    public static int CF_WAVE;
    public static int CF_UNICODETEXT;
    public static int CF_ENHMETAFILE;
    public static int CF_HDROP;
    public static int CF_LOCALE;
    public static int CLSCTX_INPROC_SERVER;
    public static int CLSCTX_LOCAL_SERVER;
    public static int CW_USEDEFAULT;
    public static int CWP_SKIPINVISIBLE;
    public static int COLOR_WINDOW;
    public static int CB_ERR;
    public static int CBN_SELCHANGE;
    public static int CBN_DBLCLK;
    public static int CBN_EDITCHANGE;
    public static int CBN_EDITUPDATE;
    public static int CBN_DROPDOWN;
    public static int CBN_CLOSEUP;
    public static int CBN_SELENDOK;
    public static int CBS_SIMPLE;
    public static int CBS_DROPDOWN;
    public static int CBS_DROPDOWNLIST;
    public static int CBS_OWNERDRAWFIXED;
    public static int CBS_OWNERDRAWVARIABLE;
    public static int CBS_AUTOHSCROLL;
    public static int CBS_HASSTRINGS;
    public static int CBS_NOINTEGRALHEIGHT;
    public static int CB_GETEDITSEL;
    public static int CB_LIMITTEXT;
    public static int CB_SETEDITSEL;
    public static int CB_ADDSTRING;
    public static int CB_DELETESTRING;
    public static int CB_GETCURSEL;
    public static int CB_GETLBTEXT;
    public static int CB_GETLBTEXTLEN;
    public static int CB_INSERTSTRING;
    public static int CB_RESETCONTENT;
    public static int CB_FINDSTRING;
    public static int CB_SETCURSEL;
    public static int CB_SHOWDROPDOWN;
    public static int CB_GETITEMDATA;
    public static int CB_SETITEMHEIGHT;
    public static int CB_GETITEMHEIGHT;
    public static int CB_GETDROPPEDSTATE;
    public static int CB_FINDSTRINGEXACT;
    public static int CB_SETDROPPEDWIDTH;
    public static int CDRF_DODEFAULT;
    public static int CDRF_NEWFONT;
    public static int CDRF_SKIPDEFAULT;
    public static int CDRF_NOTIFYPOSTPAINT;
    public static int CDRF_NOTIFYITEMDRAW;
    public static int CDRF_NOTIFYSUBITEMDRAW;
    public static int CDDS_PREPAINT;
    public static int CDDS_POSTPAINT;
    public static int CDDS_ITEM;
    public static int CDDS_SUBITEM;
    public static int CDDS_ITEMPREPAINT;
    public static int CDDS_ITEMPOSTPAINT;
    public static int CDIS_SELECTED;
    public static int CDIS_GRAYED;
    public static int CDIS_DISABLED;
    public static int CDIS_CHECKED;
    public static int CDIS_FOCUS;
    public static int CDIS_DEFAULT;
    public static int CDIS_HOT;
    public static int CDIS_MARKED;
    public static int CDIS_INDETERMINATE;
    public static int CDIS_SHOWKEYBOARDCUES;
    public static int CLR_NONE;
    public static int CLR_DEFAULT;
    public static int CCM_SETVERSION;
    public static int CCM_GETVERSION;
    public static int CCS_NORESIZE;
    public static int CCS_NOPARENTALIGN;
    public static int CCS_NODIVIDER;
    public static int CBEM_INSERTITEMA;
    public static int CBEM_GETITEMA;
    public static int CBEM_SETITEMA;
    public static int CBEM_INSERTITEMW;
    public static int CBEM_SETITEMW;
    public static int CBEM_GETITEMW;
    public static int CBEN_ENDEDITA;
    public static int CBEN_ENDEDITW;
    public static int CONNECT_E_NOCONNECTION;
    public static int CONNECT_E_CANNOTCONNECT;
    public static int CTRLINFO_EATS_RETURN;
    public static int CTRLINFO_EATS_ESCAPE;
    public static int CSIDL_DESKTOP;
    public static int CSIDL_INTERNET;
    public static int CSIDL_PROGRAMS;
    public static int CSIDL_PERSONAL;
    public static int CSIDL_FAVORITES;
    public static int CSIDL_STARTUP;
    public static int CSIDL_RECENT;
    public static int CSIDL_SENDTO;
    public static int CSIDL_STARTMENU;
    public static int CSIDL_DESKTOPDIRECTORY;
    public static int CSIDL_TEMPLATES;
    public static int CSIDL_APPDATA;
    public static int CSIDL_LOCAL_APPDATA;
    public static int CSIDL_INTERNET_CACHE;
    public static int CSIDL_COOKIES;
    public static int CSIDL_HISTORY;
    public static int CSIDL_COMMON_APPDATA;
    public static int CSIDL_SYSTEM;
    public static int CSIDL_PROGRAM_FILES;
    public static int CSIDL_PROGRAM_FILES_COMMON;
    public static int DUPLICATE;
    public static int DISPID_VALUE;
    public static int DISPID_UNKNOWN;
    public static int DISPID_PROPERTYPUT;
    public static int DISPATCH_METHOD;
    public static int DISPATCH_PROPERTYGET;
    public static int DISPATCH_PROPERTYPUT;
    public static int DISPATCH_PROPERTYPUTREF;
    public static int DV_E_DVASPECT;
    public static int DEFAULT_GUI_FONT;
    public static int DIB_RGB_COLORS;
    public static int DRAGDROP_E_NOTREGISTERED;
    public static int DRAGDROP_E_ALREADYREGISTERED;
    public static int DUPLICATE_SAME_ACCESS;
    public static int DFC_CAPTION;
    public static int DFC_MENU;
    public static int DFC_SCROLL;
    public static int DFC_BUTTON;
    public static int DFCS_CAPTIONCLOSE;
    public static int DFCS_CAPTIONMIN;
    public static int DFCS_CAPTIONMAX;
    public static int DFCS_CAPTIONRESTORE;
    public static int DFCS_CAPTIONHELP;
    public static int DFCS_MENUARROW;
    public static int DFCS_MENUCHECK;
    public static int DFCS_MENUBULLET;
    public static int DFCS_SCROLLUP;
    public static int DFCS_SCROLLDOWN;
    public static int DFCS_SCROLLLEFT;
    public static int DFCS_SCROLLRIGHT;
    public static int DFCS_SCROLLCOMBOBOX;
    public static int DFCS_BUTTONCHECK;
    public static int DFCS_BUTTONRADIO;
    public static int DFCS_BUTTON3STATE;
    public static int DFCS_BUTTONPUSH;
    public static int DFCS_INACTIVE;
    public static int DFCS_PUSHED;
    public static int DFCS_CHECKED;
    public static int DFCS_FLAT;
    public static int DT_LEFT;
    public static int DT_RIGHT;
    public static int DT_VCENTER;
    public static int DT_SINGLELINE;
    public static int DT_NOCLIP;
    public static int DT_CALCRECT;
    public static int DT_NOPREFIX;
    public static int DT_EDITCONTROL;
    public static int DT_EXPANDTABS;
    public static int DT_END_ELLIPSIS;
    public static int DT_RTLREADING;
    public static int DT_WORDBREAK;
    public static int DCX_WINDOW;
    public static int DCX_CACHE;
    public static int DCX_LOCKWINDOWUPDATE;
    public static int DI_NORMAL;
    public static int DLGC_WANTARROWS;
    public static int DLGC_WANTTAB;
    public static int DLGC_WANTALLKEYS;
    public static int DLGC_WANTCHARS;
    public static int DTM_GETSYSTEMTIME;
    public static int DTM_SETSYSTEMTIME;
    public static int DTM_SETRANGE;
    public static int DTM_SETFORMATA;
    public static int DTM_SETFORMATW;
    public static int DTM_SETMCCOLOR;
    public static int DTM_SETMCFONT;
    public static int DTS_UPDOWN;
    public static int DTS_SHOWNONE;
    public static int DTS_LONGDATEFORMAT;
    public static int DTS_TIMEFORMAT;
    public static int DTS_RIGHTALIGN;
    public static int DTN_DATETIMECHANGE;
    public static int DTN_USERSTRINGA;
    public static int DTN_USERSTRINGW;
    public static int DTN_WMKEYDOWNA;
    public static int DTN_WMKEYDOWNW;
    public static int DTN_FORMATA;
    public static int DTN_FORMATW;
    public static int DTN_FORMATQUERYA;
    public static int DTN_FORMATQUERYW;
    public static int DTN_DROPDOWN;
    public static int DTN_CLOSEUP;
    public static int DVASPECT_CONTENT;
    public static int DVASPECT_TRANSPARENT;
    public static int DVASPECT_OPAQUE;
    public static int E_NOTIMPL;
    public static int E_OUTOFMEMORY;
    public static int E_INVALIDARG;
    public static int E_NOINTERFACE;
    public static int E_FAIL;
    public static int E_ABORT;
    public static int E_ACCESSDENIED;
    public static int E_UNEXPECTED;
    public static int INET_E_DEFAULT_ACTION;
    public static int ETO_OPAQUE;
    public static int ETO_CLIPPED;
    public static int EMR_POLYTEXTOUTA;
    public static int EMR_POLYTEXTOUTW;
    public static int EDGE_RAISED;
    public static int EDGE_SUNKEN;
    public static int EDGE_ETCHED;
    public static int EDGE_BUMP;
    public static int ES_LEFT;
    public static int ES_CENTER;
    public static int ES_RIGHT;
    public static int ES_MULTILINE;
    public static int ES_UPPERCASE;
    public static int ES_LOWERCASE;
    public static int ES_AUTOVSCROLL;
    public static int ES_AUTOHSCROLL;
    public static int ES_NOHIDESEL;
    public static int ES_READONLY;
    public static int ES_PASSWORD;
    public static int EN_CHANGE;
    public static int EN_UPDATE;
    public static int EN_HSCROLL;
    public static int EN_VSCROLL;
    public static int EN_ALIGN_LTR_EC;
    public static int EN_ALIGN_RTL_EC;
    public static int EC_LEFTMARGIN;
    public static int EC_RIGHTMARGIN;
    public static int EM_GETSEL;
    public static int EM_SETSEL;
    public static int EM_SCROLL;
    public static int EM_SCROLLCARET;
    public static int EM_GETMODIFY;
    public static int EM_SETMODIFY;
    public static int EM_GETLINECOUNT;
    public static int EM_REPLACESEL;
    public static int EM_GETLINE;
    public static int EM_LIMITTEXT;
    public static int EM_CANUNDO;
    public static int EM_UNDO;
    public static int EM_SETPASSWORDCHAR;
    public static int EM_GETPASSWORDCHAR;
    public static int EM_EMPTYUNDOBUFFER;
    public static int EM_SETREADONLY;
    public static int EM_SETMARGINS;
    public static int EM_POSFROMCHAR;
    public static int EM_CHARFROMPOS;
    public static int EM_LINEFROMCHAR;
    public static int EM_LINEINDEX;
    public static int FNERR_SUBCLASSFAILURE;
    public static int FNERR_INVALIDFILENAME;
    public static int FNERR_BUFFERTOOSMALL;
    public static int GMEM_MOVEABLE;
    public static int GMEM_ZEROINIT;
    public static int GMEM_DDESHARE;
    public static int GCL_WNDPROC;
    public static int GWL_WNDPROC;
    public static int GWL_HWNDPARENT;
    public static int GWL_STYLE;
    public static int GWL_EXSTYLE;
    public static int GWL_ID;
    public static int GW_HWNDFIRST;
    public static int GW_HWNDLAST;
    public static int GW_HWNDNEXT;
    public static int GW_HWNDPREV;
    public static int GW_OWNER;
    public static int GW_CHILD;
    public static int GMR_VISIBLE;
    public static int GMR_DAYSTATE;
    public static int GDI_ERROR;
    public static int GDTR_MIN;
    public static int GDTR_MAX;
    public static int GDT_VALID;
    public static int GDT_NONE;
    public static int GA_PARENT;
    public static int GA_ROOT;
    public static int GCS_COMPREADSTR;
    public static int GCS_COMPREADATTR;
    public static int GCS_COMPREADCLAUSE;
    public static int GCS_COMPSTR;
    public static int GCS_COMPATTR;
    public static int GCS_COMPCLAUSE;
    public static int GCS_CURSORPOS;
    public static int GCS_DELTASTART;
    public static int GCS_RESULTREADSTR;
    public static int GCS_RESULTREADCLAUSE;
    public static int GCS_RESULTSTR;
    public static int GCS_RESULTCLAUSE;
    public static int ATTR_INPUT;
    public static int ATTR_TARGET_CONVERTED;
    public static int ATTR_CONVERTED;
    public static int ATTR_TARGET_NOTCONVERTED;
    public static int ATTR_INPUT_ERROR;
    public static int ATTR_FIXEDCONVERTED;
    public static int NI_COMPOSITIONSTR;
    public static int IMN_CLOSESTATUSWINDOW;
    public static int IMN_OPENSTATUSWINDOW;
    public static int IMN_CHANGECANDIDATE;
    public static int IMN_CLOSECANDIDATE;
    public static int IMN_OPENCANDIDATE;
    public static int IMN_SETCONVERSIONMODE;
    public static int IMN_SETSENTENCEMODE;
    public static int IMN_SETOPENSTATUS;
    public static int IMN_SETCANDIDATEPOS;
    public static int IMN_SETCOMPOSITIONFONT;
    public static int IMN_SETCOMPOSITIONWINDOW;
    public static int IMN_SETSTATUSWINDOWPOS;
    public static int IMN_GUIDELINE;
    public static int IMN_PRIVATE;
    public static int CPS_COMPLETE;
    public static int CPS_CANCEL;
    public static int CFS_DEFAULT;
    public static int CFS_RECT;
    public static int CFS_POINT;
    public static int CFS_FORCE_POSITION;
    public static int CFS_CANDIDATEPOS;
    public static int CFS_EXCLUDE;
    public static int IME_CMODE_ALPHANUMERIC;
    public static int IME_CMODE_NATIVE;
    public static int IME_CMODE_CHINESE;
    public static int IME_CMODE_HANGEUL;
    public static int IME_CMODE_HANGUL;
    public static int IME_CMODE_JAPANESE;
    public static int IME_CMODE_KATAKANA;
    public static int IME_CMODE_LANGUAGE;
    public static int IME_CMODE_FULLSHAPE;
    public static int IME_CMODE_ROMAN;
    public static int IME_CMODE_CHARCODE;
    public static int IME_CMODE_HANJACONVERT;
    public static int IME_CMODE_SOFTKBD;
    public static int IME_CMODE_NOCONVERSION;
    public static int IME_CMODE_EUDC;
    public static int IME_CMODE_SYMBOL;
    public static int IME_CMODE_FIXED;
    public static int IME_CMODE_RESERVED;
    public static int IME_SMODE_NONE;
    public static int IME_SMODE_PLAURALCLAUSE;
    public static int IME_SMODE_SINGLECONVERT;
    public static int IME_SMODE_AUTOMATIC;
    public static int IME_SMODE_PHRASEPREDICT;
    public static int IME_SMODE_CONVERSATION;
    public static int IME_SMODE_RESERVED;
    public static int IME_CAND_UNKNOWN;
    public static int IME_CAND_READ;
    public static int IME_CAND_CODE;
    public static int IME_CAND_MEANING;
    public static int IME_CAND_RADICAL;
    public static int IME_CAND_STROKE;
    public static int IMR_COMPOSITIONWINDOW;
    public static int IMR_CANDIDATEWINDOW;
    public static int IMR_COMPOSITIONFONT;
    public static int IMR_RECONVERTSTRING;
    public static int IMR_CONFIRMRECONVERTSTRING;
    public static int IMR_QUERYCHARPOSITION;
    public static int IMR_DOCUMENTFEED;
    public static int IME_CONFIG_GENERAL;
    public static int IME_CONFIG_REGISTERWORD;
    public static int IME_CONFIG_SELECTDICTIONARY;
    public static int IGP_GETIMEVERSION;
    public static int IGP_PROPERTY;
    public static int IGP_CONVERSION;
    public static int IGP_SENTENCE;
    public static int IGP_UI;
    public static int IGP_SETCOMPSTR;
    public static int IGP_SELECT;
    public static int IME_PROP_AT_CARET;
    public static int IME_PROP_SPECIAL_UI;
    public static int IME_PROP_CANDLIST_START_FROM_1;
    public static int IME_PROP_UNICODE;
    public static int IME_PROP_COMPLETE_ON_UNSELECT;
    public static int HC_ACTION;
    public static int HC_GETNEXT;
    public static int HC_SKIP;
    public static int HTNOWHERE;
    public static int HTCLIENT;
    public static int HTBOTTOM;
    public static int HTTRANSPARENT;
    public static int HTBOTTOMLEFT;
    public static int HTBOTTOMRIGHT;
    public static int HELPINFO_WINDOW;
    public static int HCF_HIGHCONTRASTON;
    public static int HDI_ORDER;
    public static int HDI_WIDTH;
    public static int HDM_GETITEMCOUNT;
    public static int HDM_INSERTITEMA;
    public static int HDM_INSERTITEMW;
    public static int HDM_GETITEMA;
    public static int HDM_GETITEMW;
    public static int HDM_SETITEMA;
    public static int HDM_SETITEMW;
    public static int HDN_ITEMCHANGINGA;
    public static int HDN_ITEMCHANGINGW;
    public static int HDN_ITEMCHANGEDA;
    public static int HDN_ITEMCHANGEDW;
    public static int HDN_ITEMCLICKA;
    public static int HDN_ITEMCLICKW;
    public static int HDN_ITEMDBLCLICKA;
    public static int HDN_ITEMDBLCLICKW;
    public static int HDN_DIVIDERDBLCLICKA;
    public static int HDN_DIVIDERDBLCLICKW;
    public static int HDN_BEGINTDRAG;
    public static int HDN_BEGINTRACKA;
    public static int HDN_BEGINTRACKW;
    public static int HDN_ENDDRAG;
    public static int HDN_ENDTRACKA;
    public static int HDN_ENDTRACKW;
    public static int HDN_TRACKA;
    public static int HDN_TRACKW;
    public static int HDN_GETDISPINFOA;
    public static int HDN_GETDISPINFOW;
    public static HandleRef HWND_TOP;
    public static HandleRef HWND_BOTTOM;
    public static HandleRef HWND_TOPMOST;
    public static HandleRef HWND_NOTOPMOST;
    public static int INPLACE_E_NOTOOLSPACE;
    public static int ICON_SMALL;
    public static int ICON_BIG;
    public static int IDC_ARROW;
    public static int IDC_IBEAM;
    public static int IDC_WAIT;
    public static int IDC_CROSS;
    public static int IDC_SIZEALL;
    public static int IDC_SIZENWSE;
    public static int IDC_SIZENESW;
    public static int IDC_SIZEWE;
    public static int IDC_SIZENS;
    public static int IDC_UPARROW;
    public static int IDC_NO;
    public static int IDC_APPSTARTING;
    public static int IDC_HELP;
    public static int IMAGE_ICON;
    public static int IMAGE_CURSOR;
    public static int ICC_LISTVIEW_CLASSES;
    public static int ICC_TREEVIEW_CLASSES;
    public static int ICC_BAR_CLASSES;
    public static int ICC_TAB_CLASSES;
    public static int ICC_PROGRESS_CLASS;
    public static int ICC_DATE_CLASSES;
    public static int ILC_MASK;
    public static int ILC_COLOR;
    public static int ILC_COLOR4;
    public static int ILC_COLOR8;
    public static int ILC_COLOR16;
    public static int ILC_COLOR24;
    public static int ILC_COLOR32;
    public static int ILC_MIRROR;
    public static int ILD_NORMAL;
    public static int ILD_TRANSPARENT;
    public static int ILD_MASK;
    public static int ILD_ROP;
    public static int ILP_NORMAL;
    public static int ILP_DOWNLEVEL;
    public static int ILS_NORMAL;
    public static int ILS_GLOW;
    public static int ILS_SHADOW;
    public static int ILS_SATURATE;
    public static int ILS_ALPHA;
    public static int CSC_NAVIGATEFORWARD;
    public static int CSC_NAVIGATEBACK;
    public static int STG_E_CANTSAVE;
    public static int LOGPIXELSX;
    public static int LOGPIXELSY;
    public static int LB_ERR;
    public static int LB_ERRSPACE;
    public static int LBN_SELCHANGE;
    public static int LBN_DBLCLK;
    public static int LB_ADDSTRING;
    public static int LB_INSERTSTRING;
    public static int LB_DELETESTRING;
    public static int LB_RESETCONTENT;
    public static int LB_SETSEL;
    public static int LB_SETCURSEL;
    public static int LB_GETSEL;
    public static int LB_GETCARETINDEX;
    public static int LB_GETCURSEL;
    public static int LB_GETTEXT;
    public static int LB_GETTEXTLEN;
    public static int LB_GETTOPINDEX;
    public static int LB_FINDSTRING;
    public static int LB_GETSELCOUNT;
    public static int LB_GETSELITEMS;
    public static int LB_SETTABSTOPS;
    public static int LB_SETHORIZONTALEXTENT;
    public static int LB_SETCOLUMNWIDTH;
    public static int LB_SETTOPINDEX;
    public static int LB_GETITEMRECT;
    public static int LB_SETITEMHEIGHT;
    public static int LB_GETITEMHEIGHT;
    public static int LB_FINDSTRINGEXACT;
    public static int LB_ITEMFROMPOINT;
    public static int LB_SETLOCALE;
    public static int LWA_ALPHA;
    public static int MEMBERID_NIL;
    public static int MAX_PATH;
    public static int MA_ACTIVATE;
    public static int MA_ACTIVATEANDEAT;
    public static int MA_NOACTIVATE;
    public static int MA_NOACTIVATEANDEAT;
    public static int MM_TEXT;
    public static int MM_ANISOTROPIC;
    public static int MK_LBUTTON;
    public static int MK_RBUTTON;
    public static int MK_SHIFT;
    public static int MK_CONTROL;
    public static int MK_MBUTTON;
    public static int MNC_EXECUTE;
    public static int MNC_SELECT;
    public static int MIIM_STATE;
    public static int MIIM_ID;
    public static int MIIM_SUBMENU;
    public static int MIIM_TYPE;
    public static int MIIM_DATA;
    public static int MIIM_STRING;
    public static int MIIM_BITMAP;
    public static int MIIM_FTYPE;
    public static int MB_OK;
    public static int MF_BYCOMMAND;
    public static int MF_BYPOSITION;
    public static int MF_ENABLED;
    public static int MF_GRAYED;
    public static int MF_POPUP;
    public static int MF_SYSMENU;
    public static int MFS_DISABLED;
    public static int MFT_MENUBREAK;
    public static int MFT_SEPARATOR;
    public static int MFT_RIGHTORDER;
    public static int MFT_RIGHTJUSTIFY;
    public static int MDIS_ALLCHILDSTYLES;
    public static int MDITILE_VERTICAL;
    public static int MDITILE_HORIZONTAL;
    public static int MDITILE_SKIPDISABLED;
    public static int MCM_SETMAXSELCOUNT;
    public static int MCM_SETSELRANGE;
    public static int MCM_GETMONTHRANGE;
    public static int MCM_GETMINREQRECT;
    public static int MCM_SETCOLOR;
    public static int MCM_SETTODAY;
    public static int MCM_GETTODAY;
    public static int MCM_HITTEST;
    public static int MCM_SETFIRSTDAYOFWEEK;
    public static int MCM_SETRANGE;
    public static int MCM_SETMONTHDELTA;
    public static int MCM_GETMAXTODAYWIDTH;
    public static int MCHT_TITLE;
    public static int MCHT_CALENDAR;
    public static int MCHT_TODAYLINK;
    public static int MCHT_TITLEBK;
    public static int MCHT_TITLEMONTH;
    public static int MCHT_TITLEYEAR;
    public static int MCHT_TITLEBTNNEXT;
    public static int MCHT_TITLEBTNPREV;
    public static int MCHT_CALENDARBK;
    public static int MCHT_CALENDARDATE;
    public static int MCHT_CALENDARDATENEXT;
    public static int MCHT_CALENDARDATEPREV;
    public static int MCHT_CALENDARDAY;
    public static int MCHT_CALENDARWEEKNUM;
    public static int MCSC_TEXT;
    public static int MCSC_TITLEBK;
    public static int MCSC_TITLETEXT;
    public static int MCSC_MONTHBK;
    public static int MCSC_TRAILINGTEXT;
    public static int MCN_SELCHANGE;
    public static int MCN_GETDAYSTATE;
    public static int MCN_SELECT;
    public static int MCS_DAYSTATE;
    public static int MCS_MULTISELECT;
    public static int MCS_WEEKNUMBERS;
    public static int MCS_NOTODAYCIRCLE;
    public static int MCS_NOTODAY;
    public static int MSAA_MENU_SIG;
    public static int OLECONTF_EMBEDDINGS;
    public static int OLECONTF_LINKS;
    public static int OLECONTF_OTHERS;
    public static int OLECONTF_ONLYUSER;
    public static int OLECONTF_ONLYIFRUNNING;
    public static int OLEMISC_RECOMPOSEONRESIZE;
    public static int OLEMISC_INSIDEOUT;
    public static int OLEMISC_ACTIVATEWHENVISIBLE;
    public static int OLEMISC_ACTSLIKEBUTTON;
    public static int OLEMISC_SETCLIENTSITEFIRST;
    public static int OLEIVERB_PRIMARY;
    public static int OLEIVERB_SHOW;
    public static int OLEIVERB_HIDE;
    public static int OLEIVERB_UIACTIVATE;
    public static int OLEIVERB_INPLACEACTIVATE;
    public static int OLEIVERB_DISCARDUNDOSTATE;
    public static int OLEIVERB_PROPERTIES;
    public static int XFORMCOORDS_POSITION;
    public static int XFORMCOORDS_SIZE;
    public static int XFORMCOORDS_HIMETRICTOCONTAINER;
    public static int XFORMCOORDS_CONTAINERTOHIMETRIC;
    public static int OFN_READONLY;
    public static int OFN_OVERWRITEPROMPT;
    public static int OFN_HIDEREADONLY;
    public static int OFN_NOCHANGEDIR;
    public static int OFN_ENABLEHOOK;
    public static int OFN_NOVALIDATE;
    public static int OFN_ALLOWMULTISELECT;
    public static int OFN_PATHMUSTEXIST;
    public static int OFN_FILEMUSTEXIST;
    public static int OFN_CREATEPROMPT;
    public static int OFN_EXPLORER;
    public static int OFN_NODEREFERENCELINKS;
    public static int OFN_ENABLESIZING;
    public static int OFN_USESHELLITEM;
    public static int PDERR_SETUPFAILURE;
    public static int PDERR_PARSEFAILURE;
    public static int PDERR_RETDEFFAILURE;
    public static int PDERR_LOADDRVFAILURE;
    public static int PDERR_GETDEVMODEFAIL;
    public static int PDERR_INITFAILURE;
    public static int PDERR_NODEVICES;
    public static int PDERR_NODEFAULTPRN;
    public static int PDERR_DNDMMISMATCH;
    public static int PDERR_CREATEICFAILURE;
    public static int PDERR_PRINTERNOTFOUND;
    public static int PDERR_DEFAULTDIFFERENT;
    public static int PD_ALLPAGES;
    public static int PD_SELECTION;
    public static int PD_PAGENUMS;
    public static int PD_NOSELECTION;
    public static int PD_NOPAGENUMS;
    public static int PD_COLLATE;
    public static int PD_PRINTTOFILE;
    public static int PD_PRINTSETUP;
    public static int PD_NOWARNING;
    public static int PD_RETURNDC;
    public static int PD_RETURNIC;
    public static int PD_RETURNDEFAULT;
    public static int PD_SHOWHELP;
    public static int PD_ENABLEPRINTHOOK;
    public static int PD_ENABLESETUPHOOK;
    public static int PD_ENABLEPRINTTEMPLATE;
    public static int PD_ENABLESETUPTEMPLATE;
    public static int PD_ENABLEPRINTTEMPLATEHANDLE;
    public static int PD_ENABLESETUPTEMPLATEHANDLE;
    public static int PD_USEDEVMODECOPIES;
    public static int PD_USEDEVMODECOPIESANDCOLLATE;
    public static int PD_DISABLEPRINTTOFILE;
    public static int PD_HIDEPRINTTOFILE;
    public static int PD_NONETWORKBUTTON;
    public static int PD_CURRENTPAGE;
    public static int PD_NOCURRENTPAGE;
    public static int PD_EXCLUSIONFLAGS;
    public static int PD_USELARGETEMPLATE;
    public static int PSD_MINMARGINS;
    public static int PSD_MARGINS;
    public static int PSD_INHUNDREDTHSOFMILLIMETERS;
    public static int PSD_DISABLEMARGINS;
    public static int PSD_DISABLEPRINTER;
    public static int PSD_DISABLEORIENTATION;
    public static int PSD_DISABLEPAPER;
    public static int PSD_SHOWHELP;
    public static int PSD_ENABLEPAGESETUPHOOK;
    public static int PSD_NONETWORKBUTTON;
    public static int PS_SOLID;
    public static int PS_DOT;
    public static int PLANES;
    public static int PRF_CHECKVISIBLE;
    public static int PRF_NONCLIENT;
    public static int PRF_CLIENT;
    public static int PRF_ERASEBKGND;
    public static int PRF_CHILDREN;
    public static int PM_NOREMOVE;
    public static int PM_REMOVE;
    public static int PM_NOYIELD;
    public static int PBM_SETRANGE;
    public static int PBM_SETPOS;
    public static int PBM_SETSTEP;
    public static int PBM_SETRANGE32;
    public static int PBM_SETBARCOLOR;
    public static int PBM_SETBKCOLOR;
    public static int PSM_SETTITLEA;
    public static int PSM_SETTITLEW;
    public static int PSM_SETFINISHTEXTA;
    public static int PSM_SETFINISHTEXTW;
    public static int PATCOPY;
    public static int PATINVERT;
    public static int QS_KEY;
    public static int QS_MOUSEMOVE;
    public static int QS_MOUSEBUTTON;
    public static int QS_POSTMESSAGE;
    public static int QS_TIMER;
    public static int QS_PAINT;
    public static int QS_SENDMESSAGE;
    public static int QS_HOTKEY;
    public static int QS_ALLPOSTMESSAGE;
    public static int QS_MOUSE;
    public static int QS_INPUT;
    public static int QS_ALLEVENTS;
    public static int QS_ALLINPUT;
    public static int RDW_INVALIDATE;
    public static int RDW_ALLCHILDREN;
    public static int stc4;
    public static int SHGFP_TYPE_CURRENT;
    public static int STGM_READ;
    public static int STGM_WRITE;
    public static int STGM_READWRITE;
    public static int STGM_SHARE_EXCLUSIVE;
    public static int STGM_CREATE;
    public static int STGM_TRANSACTED;
    public static int STGM_CONVERT;
    public static int STGM_DELETEONRELEASE;
    public static int STGTY_STORAGE;
    public static int STGTY_STREAM;
    public static int STGTY_LOCKBYTES;
    public static int STGTY_PROPERTY;
    public static int STARTF_USESHOWWINDOW;
    public static int SB_HORZ;
    public static int SB_VERT;
    public static int SB_CTL;
    public static int SB_LINEUP;
    public static int SB_LINELEFT;
    public static int SB_LINEDOWN;
    public static int SB_LINERIGHT;
    public static int SB_PAGEUP;
    public static int SB_PAGELEFT;
    public static int SB_PAGEDOWN;
    public static int SB_PAGERIGHT;
    public static int SB_THUMBPOSITION;
    public static int SB_THUMBTRACK;
    public static int SB_LEFT;
    public static int SB_RIGHT;
    public static int SB_ENDSCROLL;
    public static int SB_TOP;
    public static int SB_BOTTOM;
    public static int SIZE_MAXIMIZED;
    public static int ESB_ENABLE_BOTH;
    public static int ESB_DISABLE_BOTH;
    public static int SORT_DEFAULT;
    public static int SUBLANG_DEFAULT;
    public static int SW_HIDE;
    public static int SW_NORMAL;
    public static int SW_SHOWMINIMIZED;
    public static int SW_SHOWMAXIMIZED;
    public static int SW_MAXIMIZE;
    public static int SW_SHOWNOACTIVATE;
    public static int SW_SHOW;
    public static int SW_MINIMIZE;
    public static int SW_SHOWMINNOACTIVE;
    public static int SW_SHOWNA;
    public static int SW_RESTORE;
    public static int SW_MAX;
    public static int SWP_NOSIZE;
    public static int SWP_NOMOVE;
    public static int SWP_NOZORDER;
    public static int SWP_NOACTIVATE;
    public static int SWP_SHOWWINDOW;
    public static int SWP_HIDEWINDOW;
    public static int SWP_DRAWFRAME;
    public static int MB_ICONHAND;
    public static int MB_ICONQUESTION;
    public static int MB_ICONEXCLAMATION;
    public static int MB_ICONASTERISK;
    public static int SW_SCROLLCHILDREN;
    public static int SW_INVALIDATE;
    public static int SW_ERASE;
    public static int SW_SMOOTHSCROLL;
    public static int SC_SIZE;
    public static int SC_MINIMIZE;
    public static int SC_MAXIMIZE;
    public static int SC_CLOSE;
    public static int SC_KEYMENU;
    public static int SC_RESTORE;
    public static int SC_MOVE;
    public static int SS_LEFT;
    public static int SS_CENTER;
    public static int SS_RIGHT;
    public static int SS_OWNERDRAW;
    public static int SS_NOPREFIX;
    public static int SS_SUNKEN;
    public static int SBS_HORZ;
    public static int SBS_VERT;
    public static int SIF_RANGE;
    public static int SIF_PAGE;
    public static int SIF_POS;
    public static int SIF_TRACKPOS;
    public static int SIF_ALL;
    public static int SPI_GETFONTSMOOTHING;
    public static int SPI_GETDROPSHADOW;
    public static int SPI_GETFLATMENU;
    public static int SPI_GETFONTSMOOTHINGTYPE;
    public static int SPI_GETFONTSMOOTHINGCONTRAST;
    public static int SPI_ICONHORIZONTALSPACING;
    public static int SPI_ICONVERTICALSPACING;
    public static int SPI_GETICONMETRICS;
    public static int SPI_GETICONTITLEWRAP;
    public static int SPI_GETICONTITLELOGFONT;
    public static int SPI_GETKEYBOARDCUES;
    public static int SPI_GETKEYBOARDDELAY;
    public static int SPI_GETKEYBOARDPREF;
    public static int SPI_GETKEYBOARDSPEED;
    public static int SPI_GETMOUSEHOVERWIDTH;
    public static int SPI_GETMOUSEHOVERHEIGHT;
    public static int SPI_GETMOUSEHOVERTIME;
    public static int SPI_GETMOUSESPEED;
    public static int SPI_GETMENUDROPALIGNMENT;
    public static int SPI_GETMENUFADE;
    public static int SPI_GETMENUSHOWDELAY;
    public static int SPI_GETCOMBOBOXANIMATION;
    public static int SPI_GETCLIENTAREAANIMATION;
    public static int SPI_GETGRADIENTCAPTIONS;
    public static int SPI_GETHOTTRACKING;
    public static int SPI_GETLISTBOXSMOOTHSCROLLING;
    public static int SPI_GETMENUANIMATION;
    public static int SPI_GETSELECTIONFADE;
    public static int SPI_GETTOOLTIPANIMATION;
    public static int SPI_GETUIEFFECTS;
    public static int SPI_GETACTIVEWINDOWTRACKING;
    public static int SPI_GETACTIVEWNDTRKTIMEOUT;
    public static int SPI_GETANIMATION;
    public static int SPI_GETBORDER;
    public static int SPI_GETCARETWIDTH;
    public static int SPI_GETMOUSEVANISH;
    public static int SPI_GETDRAGFULLWINDOWS;
    public static int SPI_GETNONCLIENTMETRICS;
    public static int SPI_GETWORKAREA;
    public static int SPI_GETHIGHCONTRAST;
    public static int SPI_GETDEFAULTINPUTLANG;
    public static int SPI_GETSNAPTODEFBUTTON;
    public static int SPI_GETWHEELSCROLLLINES;
    public static int SBARS_SIZEGRIP;
    public static int SB_SETTEXTA;
    public static int SB_SETTEXTW;
    public static int SB_GETTEXTA;
    public static int SB_GETTEXTW;
    public static int SB_GETTEXTLENGTHA;
    public static int SB_GETTEXTLENGTHW;
    public static int SB_SETPARTS;
    public static int SB_SIMPLE;
    public static int SB_GETRECT;
    public static int SB_SETICON;
    public static int SB_SETTIPTEXTA;
    public static int SB_SETTIPTEXTW;
    public static int SB_GETTIPTEXTA;
    public static int SB_GETTIPTEXTW;
    public static int SBT_OWNERDRAW;
    public static int SBT_NOBORDERS;
    public static int SBT_POPOUT;
    public static int SBT_RTLREADING;
    public static int SRCCOPY;
    public static int SRCAND;
    public static int SRCPAINT;
    public static int NOTSRCCOPY;
    public static int STATFLAG_DEFAULT;
    public static int STATFLAG_NONAME;
    public static int STATFLAG_NOOPEN;
    public static int STGC_DEFAULT;
    public static int STGC_OVERWRITE;
    public static int STGC_ONLYIFCURRENT;
    public static int STGC_DANGEROUSLYCOMMITMERELYTODISKCACHE;
    public static int STREAM_SEEK_SET;
    public static int STREAM_SEEK_CUR;
    public static int STREAM_SEEK_END;
    public static int S_OK;
    public static int S_FALSE;
    public static int TRANSPARENT;
    public static int OPAQUE;
    public static int TME_HOVER;
    public static int TME_LEAVE;
    public static int TPM_LEFTBUTTON;
    public static int TPM_RIGHTBUTTON;
    public static int TPM_LEFTALIGN;
    public static int TPM_RIGHTALIGN;
    public static int TPM_VERTICAL;
    public static int TV_FIRST;
    public static int TBSTATE_CHECKED;
    public static int TBSTATE_ENABLED;
    public static int TBSTATE_HIDDEN;
    public static int TBSTATE_INDETERMINATE;
    public static int TBSTYLE_BUTTON;
    public static int TBSTYLE_SEP;
    public static int TBSTYLE_CHECK;
    public static int TBSTYLE_DROPDOWN;
    public static int TBSTYLE_TOOLTIPS;
    public static int TBSTYLE_FLAT;
    public static int TBSTYLE_LIST;
    public static int TBSTYLE_EX_DRAWDDARROWS;
    public static int TB_ENABLEBUTTON;
    public static int TB_ISBUTTONCHECKED;
    public static int TB_ISBUTTONINDETERMINATE;
    public static int TB_ADDBUTTONSA;
    public static int TB_ADDBUTTONSW;
    public static int TB_INSERTBUTTONA;
    public static int TB_INSERTBUTTONW;
    public static int TB_DELETEBUTTON;
    public static int TB_GETBUTTON;
    public static int TB_SAVERESTOREA;
    public static int TB_SAVERESTOREW;
    public static int TB_ADDSTRINGA;
    public static int TB_ADDSTRINGW;
    public static int TB_BUTTONSTRUCTSIZE;
    public static int TB_SETBUTTONSIZE;
    public static int TB_AUTOSIZE;
    public static int TB_GETROWS;
    public static int TB_GETBUTTONTEXTA;
    public static int TB_GETBUTTONTEXTW;
    public static int TB_SETIMAGELIST;
    public static int TB_GETRECT;
    public static int TB_GETBUTTONSIZE;
    public static int TB_GETBUTTONINFOW;
    public static int TB_SETBUTTONINFOW;
    public static int TB_GETBUTTONINFOA;
    public static int TB_SETBUTTONINFOA;
    public static int TB_MAPACCELERATORA;
    public static int TB_SETEXTENDEDSTYLE;
    public static int TB_MAPACCELERATORW;
    public static int TB_GETTOOLTIPS;
    public static int TB_SETTOOLTIPS;
    public static int TBIF_IMAGE;
    public static int TBIF_TEXT;
    public static int TBIF_STATE;
    public static int TBIF_STYLE;
    public static int TBIF_COMMAND;
    public static int TBIF_SIZE;
    public static int TBN_GETBUTTONINFOA;
    public static int TBN_GETBUTTONINFOW;
    public static int TBN_QUERYINSERT;
    public static int TBN_DROPDOWN;
    public static int TBN_HOTITEMCHANGE;
    public static int TBN_GETDISPINFOA;
    public static int TBN_GETDISPINFOW;
    public static int TBN_GETINFOTIPA;
    public static int TBN_GETINFOTIPW;
    public static int TTS_ALWAYSTIP;
    public static int TTS_NOPREFIX;
    public static int TTS_NOANIMATE;
    public static int TTS_NOFADE;
    public static int TTS_BALLOON;
    public static int TTI_WARNING;
    public static int TTF_IDISHWND;
    public static int TTF_RTLREADING;
    public static int TTF_TRACK;
    public static int TTF_CENTERTIP;
    public static int TTF_SUBCLASS;
    public static int TTF_TRANSPARENT;
    public static int TTF_ABSOLUTE;
    public static int TTDT_AUTOMATIC;
    public static int TTDT_RESHOW;
    public static int TTDT_AUTOPOP;
    public static int TTDT_INITIAL;
    public static int TTM_TRACKACTIVATE;
    public static int TTM_TRACKPOSITION;
    public static int TTM_ACTIVATE;
    public static int TTM_POP;
    public static int TTM_ADJUSTRECT;
    public static int TTM_SETDELAYTIME;
    public static int TTM_ADDTOOLA;
    public static int TTM_ADDTOOLW;
    public static int TTM_DELTOOLA;
    public static int TTM_DELTOOLW;
    public static int TTM_NEWTOOLRECTA;
    public static int TTM_NEWTOOLRECTW;
    public static int TTM_RELAYEVENT;
    public static int TTM_GETTIPBKCOLOR;
    public static int TTM_SETTIPBKCOLOR;
    public static int TTM_SETTIPTEXTCOLOR;
    public static int TTM_GETTIPTEXTCOLOR;
    public static int TTM_GETTOOLINFOA;
    public static int TTM_GETTOOLINFOW;
    public static int TTM_SETTOOLINFOA;
    public static int TTM_SETTOOLINFOW;
    public static int TTM_HITTESTA;
    public static int TTM_HITTESTW;
    public static int TTM_GETTEXTA;
    public static int TTM_GETTEXTW;
    public static int TTM_UPDATE;
    public static int TTM_UPDATETIPTEXTA;
    public static int TTM_UPDATETIPTEXTW;
    public static int TTM_ENUMTOOLSA;
    public static int TTM_ENUMTOOLSW;
    public static int TTM_GETCURRENTTOOLA;
    public static int TTM_GETCURRENTTOOLW;
    public static int TTM_WINDOWFROMPOINT;
    public static int TTM_GETDELAYTIME;
    public static int TTM_SETMAXTIPWIDTH;
    public static int TTN_GETDISPINFOA;
    public static int TTN_GETDISPINFOW;
    public static int TTN_SHOW;
    public static int TTN_POP;
    public static int TTN_NEEDTEXTA;
    public static int TTN_NEEDTEXTW;
    public static int TBS_AUTOTICKS;
    public static int TBS_VERT;
    public static int TBS_TOP;
    public static int TBS_BOTTOM;
    public static int TBS_BOTH;
    public static int TBS_NOTICKS;
    public static int TBM_GETPOS;
    public static int TBM_SETTIC;
    public static int TBM_SETPOS;
    public static int TBM_SETRANGE;
    public static int TBM_SETRANGEMIN;
    public static int TBM_SETRANGEMAX;
    public static int TBM_SETTICFREQ;
    public static int TBM_SETPAGESIZE;
    public static int TBM_SETLINESIZE;
    public static int TB_LINEUP;
    public static int TB_LINEDOWN;
    public static int TB_PAGEUP;
    public static int TB_PAGEDOWN;
    public static int TB_THUMBPOSITION;
    public static int TB_THUMBTRACK;
    public static int TB_TOP;
    public static int TB_BOTTOM;
    public static int TB_ENDTRACK;
    public static int TVS_HASBUTTONS;
    public static int TVS_HASLINES;
    public static int TVS_LINESATROOT;
    public static int TVS_EDITLABELS;
    public static int TVS_SHOWSELALWAYS;
    public static int TVS_RTLREADING;
    public static int TVS_CHECKBOXES;
    public static int TVS_TRACKSELECT;
    public static int TVS_FULLROWSELECT;
    public static int TVS_NONEVENHEIGHT;
    public static int TVS_INFOTIP;
    public static int TVS_NOTOOLTIPS;
    public static int TVIF_TEXT;
    public static int TVIF_IMAGE;
    public static int TVIF_PARAM;
    public static int TVIF_STATE;
    public static int TVIF_HANDLE;
    public static int TVIF_SELECTEDIMAGE;
    public static int TVIS_SELECTED;
    public static int TVIS_EXPANDED;
    public static int TVIS_EXPANDEDONCE;
    public static int TVIS_STATEIMAGEMASK;
    public static int TVI_ROOT;
    public static int TVI_FIRST;
    public static int TVM_INSERTITEMA;
    public static int TVM_INSERTITEMW;
    public static int TVM_DELETEITEM;
    public static int TVM_EXPAND;
    public static int TVE_COLLAPSE;
    public static int TVE_EXPAND;
    public static int TVM_GETITEMRECT;
    public static int TVM_GETINDENT;
    public static int TVM_SETINDENT;
    public static int TVM_SETIMAGELIST;
    public static int TVM_GETNEXTITEM;
    public static int TVGN_NEXT;
    public static int TVGN_PREVIOUS;
    public static int TVGN_FIRSTVISIBLE;
    public static int TVGN_NEXTVISIBLE;
    public static int TVGN_PREVIOUSVISIBLE;
    public static int TVGN_CARET;
    public static int TVM_SELECTITEM;
    public static int TVM_GETITEMA;
    public static int TVM_GETITEMW;
    public static int TVM_SETITEMA;
    public static int TVM_SETITEMW;
    public static int TVM_EDITLABELA;
    public static int TVM_EDITLABELW;
    public static int TVM_GETEDITCONTROL;
    public static int TVM_GETVISIBLECOUNT;
    public static int TVM_HITTEST;
    public static int TVM_ENSUREVISIBLE;
    public static int TVM_ENDEDITLABELNOW;
    public static int TVM_GETISEARCHSTRINGA;
    public static int TVM_GETISEARCHSTRINGW;
    public static int TVM_SETITEMHEIGHT;
    public static int TVM_GETITEMHEIGHT;
    public static int TVN_SELCHANGINGA;
    public static int TVN_SELCHANGINGW;
    public static int TVN_GETINFOTIPA;
    public static int TVN_GETINFOTIPW;
    public static int TVN_SELCHANGEDA;
    public static int TVN_SELCHANGEDW;
    public static int TVC_UNKNOWN;
    public static int TVC_BYMOUSE;
    public static int TVC_BYKEYBOARD;
    public static int TVN_GETDISPINFOA;
    public static int TVN_GETDISPINFOW;
    public static int TVN_SETDISPINFOA;
    public static int TVN_SETDISPINFOW;
    public static int TVN_ITEMEXPANDINGA;
    public static int TVN_ITEMEXPANDINGW;
    public static int TVN_ITEMEXPANDEDA;
    public static int TVN_ITEMEXPANDEDW;
    public static int TVN_BEGINDRAGA;
    public static int TVN_BEGINDRAGW;
    public static int TVN_BEGINRDRAGA;
    public static int TVN_BEGINRDRAGW;
    public static int TVN_BEGINLABELEDITA;
    public static int TVN_BEGINLABELEDITW;
    public static int TVN_ENDLABELEDITA;
    public static int TVN_ENDLABELEDITW;
    public static int TCS_BOTTOM;
    public static int TCS_RIGHT;
    public static int TCS_FLATBUTTONS;
    public static int TCS_HOTTRACK;
    public static int TCS_VERTICAL;
    public static int TCS_TABS;
    public static int TCS_BUTTONS;
    public static int TCS_MULTILINE;
    public static int TCS_RIGHTJUSTIFY;
    public static int TCS_FIXEDWIDTH;
    public static int TCS_RAGGEDRIGHT;
    public static int TCS_OWNERDRAWFIXED;
    public static int TCS_TOOLTIPS;
    public static int TCM_SETIMAGELIST;
    public static int TCIF_TEXT;
    public static int TCIF_IMAGE;
    public static int TCM_GETITEMA;
    public static int TCM_GETITEMW;
    public static int TCM_SETITEMA;
    public static int TCM_SETITEMW;
    public static int TCM_INSERTITEMA;
    public static int TCM_INSERTITEMW;
    public static int TCM_DELETEITEM;
    public static int TCM_DELETEALLITEMS;
    public static int TCM_GETITEMRECT;
    public static int TCM_GETCURSEL;
    public static int TCM_SETCURSEL;
    public static int TCM_ADJUSTRECT;
    public static int TCM_SETITEMSIZE;
    public static int TCM_SETPADDING;
    public static int TCM_GETROWCOUNT;
    public static int TCM_GETTOOLTIPS;
    public static int TCM_SETTOOLTIPS;
    public static int TCN_SELCHANGE;
    public static int TCN_SELCHANGING;
    public static int TBSTYLE_WRAPPABLE;
    public static int TVM_SETBKCOLOR;
    public static int TVM_SETTEXTCOLOR;
    public static int TYMED_NULL;
    public static int TVM_GETLINECOLOR;
    public static int TVM_SETLINECOLOR;
    public static int TVM_SETTOOLTIPS;
    public static int TVSIL_STATE;
    public static int TVM_SORTCHILDRENCB;
    public static int UIS_SET;
    public static int UIS_CLEAR;
    public static int UIS_INITIALIZE;
    public static int UISF_HIDEFOCUS;
    public static int UISF_HIDEACCEL;
    public static int UISF_ACTIVE;
    public static int VK_TAB;
    public static int VK_SHIFT;
    public static int VK_CONTROL;
    public static int VK_MENU;
    public static int WH_JOURNALPLAYBACK;
    public static int WH_GETMESSAGE;
    public static int WH_MOUSE;
    public static int WSF_VISIBLE;
    public static int WA_INACTIVE;
    public static int WA_ACTIVE;
    public static int WA_CLICKACTIVE;
    public static int WHEEL_DELTA;
    public static int WS_OVERLAPPED;
    public static int WS_POPUP;
    public static int WS_CHILD;
    public static int WS_MINIMIZE;
    public static int WS_VISIBLE;
    public static int WS_DISABLED;
    public static int WS_CLIPSIBLINGS;
    public static int WS_CLIPCHILDREN;
    public static int WS_MAXIMIZE;
    public static int WS_CAPTION;
    public static int WS_BORDER;
    public static int WS_DLGFRAME;
    public static int WS_VSCROLL;
    public static int WS_HSCROLL;
    public static int WS_SYSMENU;
    public static int WS_THICKFRAME;
    public static int WS_TABSTOP;
    public static int WS_MINIMIZEBOX;
    public static int WS_MAXIMIZEBOX;
    public static int WS_EX_DLGMODALFRAME;
    public static int WS_EX_TRANSPARENT;
    public static int WS_EX_MDICHILD;
    public static int WS_EX_TOOLWINDOW;
    public static int WS_EX_WINDOWEDGE;
    public static int WS_EX_CLIENTEDGE;
    public static int WS_EX_CONTEXTHELP;
    public static int WS_EX_RIGHT;
    public static int WS_EX_LEFT;
    public static int WS_EX_RTLREADING;
    public static int WS_EX_LEFTSCROLLBAR;
    public static int WS_EX_CONTROLPARENT;
    public static int WS_EX_STATICEDGE;
    public static int WS_EX_APPWINDOW;
    public static int WS_EX_LAYERED;
    public static int WS_EX_TOPMOST;
    public static int WS_EX_LAYOUTRTL;
    public static int WS_EX_NOINHERITLAYOUT;
    public static int WS_EX_COMPOSITED;
    public static int WPF_SETMINPOSITION;
    public static int WPF_RESTORETOMAXIMIZED;
    public static int WHITE_BRUSH;
    public static int NULL_BRUSH;
    public static int XBUTTON1;
    public static int XBUTTON2;
    public static int CDN_FIRST;
    public static int CDN_INITDONE;
    public static int CDN_SELCHANGE;
    public static int CDN_SHAREVIOLATION;
    public static int CDN_FILEOK;
    public static int DWL_MSGRESULT;
    public static int PBT_APMPOWERSTATUSCHANGE;
    public static int EVENT_SYSTEM_MOVESIZESTART;
    public static int EVENT_SYSTEM_MOVESIZEEND;
    public static int EVENT_OBJECT_STATECHANGE;
    public static int EVENT_OBJECT_FOCUS;
    public static int OBJID_CLIENT;
    public static int WINEVENT_OUTOFCONTEXT;
    public static UInt32 RIDI_DEVICEINFO;
    public static UInt32 RIM_TYPEHID;
    public static ushort HID_USAGE_PAGE_DIGITIZER;
    public static ushort HID_USAGE_DIGITIZER_DIGITIZER;
    public static ushort HID_USAGE_DIGITIZER_PEN;
    public static ushort HID_USAGE_DIGITIZER_LIGHTPEN;
    public static ushort HID_USAGE_DIGITIZER_TOUCHSCREEN;
    public static int AC_SRC_OVER;
    public static int ULW_COLORKEY;
    public static int ULW_ALPHA;
    public static int ULW_OPAQUE;
    public static IntPtr WTS_CURRENT_SERVER_HANDLE;
    public static int WTS_CURRENT_SESSION;
    public static int FEATURE_OBJECT_CACHING;
    public static int FEATURE_ZONE_ELEVATION;
    public static int FEATURE_MIME_HANDLING;
    public static int FEATURE_MIME_SNIFFING;
    public static int FEATURE_WINDOW_RESTRICTIONS;
    public static int FEATURE_WEBOC_POPUPMANAGEMENT;
    public static int FEATURE_BEHAVIORS;
    public static int FEATURE_DISABLE_MK_PROTOCOL;
    public static int FEATURE_LOCALMACHINE_LOCKDOWN;
    public static int FEATURE_SECURITYBAND;
    public static int FEATURE_RESTRICT_ACTIVEXINSTALL;
    public static int FEATURE_VALIDATE_NAVIGATE_URL;
    public static int FEATURE_RESTRICT_FILEDOWNLOAD;
    public static int FEATURE_ADDON_MANAGEMENT;
    public static int FEATURE_PROTOCOL_LOCKDOWN;
    public static int FEATURE_HTTP_USERNAME_PASSWORD_DISABLE;
    public static int FEATURE_SAFE_BINDTOOBJECT;
    public static int FEATURE_UNC_SAVEDFILECHECK;
    public static int FEATURE_GET_URL_DOM_FILEPATH_UNENCODED;
    public static int FEATURE_TABBED_BROWSING;
    public static int FEATURE_SSLUX;
    public static int FEATURE_DISABLE_NAVIGATION_SOUNDS;
    public static int FEATURE_DISABLE_LEGACY_COMPRESSION;
    public static int FEATURE_FORCE_ADDR_AND_STATUS;
    public static int FEATURE_XMLHTTP;
    public static int FEATURE_DISABLE_TELNET_PROTOCOL;
    public static int FEATURE_FEEDS;
    public static int FEATURE_BLOCK_INPUT_PROMPTS;
    public static int GET_FEATURE_FROM_PROCESS;
    public static int SET_FEATURE_ON_PROCESS;
    public static int URLZONE_LOCAL_MACHINE;
    public static int URLZONE_INTRANET;
    public static int URLZONE_TRUSTED;
    public static int URLZONE_INTERNET;
    public static int URLZONE_UNTRUSTED;
    public static byte URLPOLICY_ALLOW;
    public static byte URLPOLICY_QUERY;
    public static byte URLPOLICY_DISALLOW;
    public static int URLACTION_FEATURE_ZONE_ELEVATION;
    public static int PUAF_NOUI;
    public static int MUTZ_NOSAVEDFILECHECK;
    public static int SIZE_RESTORED;
    public static int SIZE_MINIMIZED;
    public static int WS_EX_NOACTIVATE;
    public static int VK_LSHIFT;
    public static int VK_RMENU;
    public static int VK_LMENU;
    public static int VK_LCONTROL;
    public static int VK_RCONTROL;
    public static int VK_LBUTTON;
    public static int VK_RBUTTON;
    public static int VK_MBUTTON;
    public static int VK_XBUTTON1;
    public static int VK_XBUTTON2;
    public static int PM_QS_SENDMESSAGE;
    public static int PM_QS_POSTMESSAGE;
    public static int MWMO_WAITALL;
    public static int MWMO_ALERTABLE;
    public static int MWMO_INPUTAVAILABLE;
    public static IntPtr HWND_MESSAGE;
    internal static UInt32 DELETE;
    internal static UInt32 READ_CONTROL;
    internal static UInt32 WRITE_DAC;
    internal static UInt32 WRITE_OWNER;
    internal static UInt32 SYNCHRONIZE;
    internal static UInt32 STANDARD_RIGHTS_REQUIRED;
    internal static UInt32 STANDARD_RIGHTS_READ;
    internal static UInt32 STANDARD_RIGHTS_WRITE;
    internal static UInt32 STANDARD_RIGHTS_EXECUTE;
    internal static UInt32 STANDARD_RIGHTS_ALL;
    internal static UInt32 SPECIFIC_RIGHTS_ALL;
    internal static UInt32 ACCESS_SYSTEM_SECURITY;
    internal static UInt32 MAXIMUM_ALLOWED;
    internal static UInt32 GENERIC_READ;
    internal static UInt32 GENERIC_WRITE;
    internal static UInt32 GENERIC_EXECUTE;
    internal static UInt32 GENERIC_ALL;
    internal static UInt32 FILE_READ_DATA;
    internal static UInt32 FILE_LIST_DIRECTORY;
    internal static UInt32 FILE_WRITE_DATA;
    internal static UInt32 FILE_ADD_FILE;
    internal static UInt32 FILE_APPEND_DATA;
    internal static UInt32 FILE_ADD_SUBDIRECTORY;
    internal static UInt32 FILE_CREATE_PIPE_INSTANCE;
    internal static UInt32 FILE_READ_EA;
    internal static UInt32 FILE_WRITE_EA;
    internal static UInt32 FILE_EXECUTE;
    internal static UInt32 FILE_TRAVERSE;
    internal static UInt32 FILE_DELETE_CHILD;
    internal static UInt32 FILE_READ_ATTRIBUTES;
    internal static UInt32 FILE_WRITE_ATTRIBUTES;
    internal static UInt32 FILE_ALL_ACCESS;
    internal static UInt32 FILE_GENERIC_READ;
    internal static UInt32 FILE_GENERIC_WRITE;
    internal static UInt32 FILE_GENERIC_EXECUTE;
    internal static UInt32 FILE_SHARE_READ;
    internal static UInt32 FILE_SHARE_WRITE;
    internal static UInt32 FILE_SHARE_DELETE;
    internal static int ERROR_ALREADY_EXISTS;
    internal static int OPEN_EXISTING;
    internal static int PAGE_READONLY;
    internal static int SECTION_MAP_READ;
    internal static int FILE_ATTRIBUTE_NORMAL;
    internal static int FILE_ATTRIBUTE_TEMPORARY;
    internal static int FILE_FLAG_DELETE_ON_CLOSE;
    internal static int CREATE_ALWAYS;
    internal static int PROCESS_ALL_ACCESS;
    internal static int ENDSESSION_LOGOFF;
    internal static int ERROR_SUCCESS;
    public static int LOCALE_FONTSIGNATURE;
    public static int SWP_NOREDRAW;
    public static int SWP_FRAMECHANGED;
    public static int SWP_NOCOPYBITS;
    public static int SWP_NOOWNERZORDER;
    public static int SWP_NOSENDCHANGING;
    public static int SWP_NOREPOSITION;
    public static int SWP_DEFERERASE;
    public static int SWP_ASYNCWINDOWPOS;
    public static int SPI_GETCURSORSHADOW;
    public static int SPI_SETCURSORSHADOW;
    public static int SPI_GETFOCUSBORDERWIDTH;
    public static int SPI_SETFOCUSBORDERWIDTH;
    public static int SPI_GETFOCUSBORDERHEIGHT;
    public static int SPI_SETFOCUSBORDERHEIGHT;
    public static int SPI_GETSTYLUSHOTTRACKING;
    public static int SPI_SETSTYLUSHOTTRACKING;
    public static int SPI_GETTOOLTIPFADE;
    public static int SPI_SETTOOLTIPFADE;
    public static int SPI_GETFOREGROUNDFLASHCOUNT;
    public static int SPI_SETFOREGROUNDFLASHCOUNT;
    public static int SPI_SETCARETWIDTH;
    public static int SPI_SETMOUSEVANISH;
    public static int SPI_SETHIGHCONTRAST;
    public static int SPI_SETKEYBOARDPREF;
    public static int SPI_SETFLATMENU;
    public static int SPI_SETDROPSHADOW;
    public static int SPI_SETWORKAREA;
    public static int SPI_SETICONMETRICS;
    public static int SPI_SETDRAGWIDTH;
    public static int SPI_SETDRAGHEIGHT;
    public static int SPI_SETPENWINDOWS;
    public static int SPI_SETMOUSEBUTTONSWAP;
    public static int SPI_SETSHOWSOUNDS;
    public static int SPI_SETKEYBOARDCUES;
    public static int SPI_SETKEYBOARDDELAY;
    public static int SPI_SETSNAPTODEFBUTTON;
    public static int SPI_SETWHEELSCROLLLINES;
    public static int SPI_SETMOUSEHOVERWIDTH;
    public static int SPI_SETMOUSEHOVERHEIGHT;
    public static int SPI_SETMOUSEHOVERTIME;
    public static int SPI_SETMENUDROPALIGNMENT;
    public static int SPI_SETMENUFADE;
    public static int SPI_SETMENUSHOWDELAY;
    public static int SPI_SETCOMBOBOXANIMATION;
    public static int SPI_SETCLIENTAREAANIMATION;
    public static int SPI_SETGRADIENTCAPTIONS;
    public static int SPI_SETHOTTRACKING;
    public static int SPI_SETLISTBOXSMOOTHSCROLLING;
    public static int SPI_SETMENUANIMATION;
    public static int SPI_SETSELECTIONFADE;
    public static int SPI_SETTOOLTIPANIMATION;
    public static int SPI_SETUIEFFECTS;
    public static int SPI_SETANIMATION;
    public static int SPI_SETDRAGFULLWINDOWS;
    public static int SPI_SETBORDER;
    public static int SPI_SETNONCLIENTMETRICS;
    public static int LANG_KOREAN;
    public static int MB_YESNO;
    public static int MB_SYSTEMMODAL;
    public static int IDYES;
    public static int PM_QS_INPUT;
    public static int PM_QS_PAINT;
    public static int SW_PARENTCLOSING;
    public static int SW_PARENTOPENING;
    public static int SC_MOUSEMOVE;
    public static int SPI_SETKEYBOARDSPEED;
    internal static int TYMED_HGLOBAL;
    internal static int TYMED_FILE;
    internal static int TYMED_ISTREAM;
    internal static int TYMED_ISTORAGE;
    internal static int TYMED_GDI;
    internal static int TYMED_MFPICT;
    internal static int TYMED_ENHMF;
    public static int WS_OVERLAPPEDWINDOW;
    public static int KEYEVENTF_EXTENDEDKEY;
    public static int KEYEVENTF_KEYUP;
    public static int KEYEVENTF_UNICODE;
    public static int KEYEVENTF_SCANCODE;
    public static int MOUSEEVENTF_MOVE;
    public static int MOUSEEVENTF_LEFTDOWN;
    public static int MOUSEEVENTF_LEFTUP;
    public static int MOUSEEVENTF_RIGHTDOWN;
    public static int MOUSEEVENTF_RIGHTUP;
    public static int MOUSEEVENTF_MIDDLEDOWN;
    public static int MOUSEEVENTF_MIDDLEUP;
    public static int MOUSEEVENTF_XDOWN;
    public static int MOUSEEVENTF_XUP;
    public static int MOUSEEVENTF_WHEEL;
    public static int MOUSEEVENTF_VIRTUALDESK;
    public static int MOUSEEVENTF_ABSOLUTE;
    public static int MOUSEEVENTF_ACTUAL;
    public static int GWL_HINSTANCE;
    public static int GWL_USERDATA;
    public static int GCL_MENUNAME;
    public static int GCL_HBRBACKGROUND;
    public static int GCL_HCURSOR;
    public static int GCL_HICON;
    public static int GCL_HMODULE;
    public static int GCL_CBWNDEXTRA;
    public static int GCL_CBCLSEXTRA;
    public static int GCL_STYLE;
    public static int GCW_ATOM;
    public static int GCL_HICONSM;
    public static int MONITOR_DEFAULTTONULL;
    public static int MONITOR_DEFAULTTOPRIMARY;
    public static int MONITOR_DEFAULTTONEAREST;
    public static UInt32 WTNCA_NODRAWCAPTION;
    public static UInt32 WTNCA_NODRAWICON;
    public static UInt32 WTNCA_NOSYSMENU;
    public static UInt32 WTNCA_VALIDBITS;
    internal static int NO_ERROR;
    public static int VK_OEM_1;
    public static int VK_OEM_PLUS;
    public static int VK_OEM_COMMA;
    public static int VK_OEM_MINUS;
    public static int VK_OEM_PERIOD;
    public static int VK_OEM_2;
    public static int VK_OEM_3;
    public static int VK_C1;
    public static int VK_C2;
    public static int VK_OEM_4;
    public static int VK_OEM_5;
    public static int VK_OEM_6;
    public static int VK_OEM_7;
    public static int VK_OEM_8;
    public static int VK_OEM_AX;
    public static int VK_OEM_102;
    public static int VK_OEM_RESET;
    public static int VK_OEM_JUMP;
    public static int VK_OEM_PA1;
    public static int VK_OEM_PA2;
    public static int VK_OEM_PA3;
    public static int VK_OEM_WSCTRL;
    public static int VK_OEM_CUSEL;
    public static int VK_OEM_ATTN;
    public static int VK_OEM_FINISH;
    public static int VK_OEM_COPY;
    public static int VK_OEM_AUTO;
    public static int VK_OEM_ENLW;
    public static int VK_OEM_BACKTAB;
    public static int LR_DEFAULTCOLOR;
    public static int LR_MONOCHROME;
    public static int LR_COLOR;
    public static int LR_COPYRETURNORG;
    public static int LR_COPYDELETEORG;
    public static int LR_LOADFROMFILE;
    public static int LR_LOADTRANSPARENT;
    public static int LR_DEFAULTSIZE;
    public static int LR_VGACOLOR;
    public static int LR_LOADMAP3DCOLORS;
    public static int LR_CREATEDIBSECTION;
    public static int LR_COPYFROMRESOURCE;
    public static int LR_SHARED;
    public static int WTS_CONSOLE_CONNECT;
    public static int WTS_CONSOLE_DISCONNECT;
    public static int WTS_REMOTE_CONNECT;
    public static int WTS_REMOTE_DISCONNECT;
    public static int WTS_SESSION_LOCK;
    public static int WTS_SESSION_UNLOCK;
    public static UInt32 NOTIFY_FOR_THIS_SESSION;
    public static int PBT_APMSUSPEND;
    public static int PBT_APMRESUMECRITICAL;
    public static int PBT_APMRESUMESUSPEND;
    public static int PBT_APMRESUMEAUTOMATIC;
    public static int PBT_POWERSETTINGCHANGE;
    public static Guid GUID_MONITOR_POWER_ON;
    public static UInt32 PROFILE_READ;
    private static NativeMethods();
    public static bool Succeeded(int hr);
    public static bool Failed(int hr);
    public static int SignedHIWORD(int n);
    public static int SignedLOWORD(int n);
    public static int MakeHRFromErrorCode(int errorCode);
    internal static IntPtr SetEnhMetaFileBits(UInt32 cbBuffer, Byte[] buffer);
    public static int SignedHIWORD(IntPtr intPtr);
    public static int SignedLOWORD(IntPtr intPtr);
    public static int IntPtrToInt32(IntPtr intPtr);
}
internal class MS.Win32.UnsafeNativeMethods : object {
    public static int MB_PRECOMPOSED;
    public static int MB_COMPOSITE;
    public static int MB_USEGLYPHCHARS;
    public static int MB_ERR_INVALID_CHARS;
    public static object PtrToStructure(IntPtr lparam, Type cls);
    public static T PtrToStructure(IntPtr lParam);
    public static void StructureToPtr(object structure, IntPtr ptr, bool fDeleteOld);
    public static int GetCurrentThemeName(StringBuilder pszThemeFileName, int dwMaxNameChars, StringBuilder pszColorBuff, int dwMaxColorChars, StringBuilder pszSizeBuff, int cchMaxSizeChars);
    public static int DwmIsCompositionEnabled(Int32& enabled);
    public static IntPtr GetCurrentThread();
    public static bool SetWindowPos(HandleRef hWnd, HandleRef hWndInsertAfter, int x, int y, int cx, int cy, int flags);
    public static IntPtr GetWindow(HandleRef hWnd, int uCmd);
    public static UInt32 GetDpiForMonitor(HandleRef hMonitor, MONITOR_DPI_TYPE dpiType, UInt32& dpiX, UInt32& dpiY);
    internal static bool IsProcessDPIAware();
    public static IntPtr OpenProcess(int dwDesiredAccess, bool fInherit, int dwProcessId);
    public static bool EnableNonClientDpiScaling(HandleRef hWnd);
    public static int GetClassName(HandleRef hwnd, StringBuilder lpClassName, int nMaxCount);
    public static int MessageBox(HandleRef hWnd, string text, string caption, int type);
    public static int CriticalSetWindowTheme(HandleRef hWnd, string subAppName, string subIdList);
    public static IntPtr CreateCompatibleBitmap(HandleRef hDC, int width, int height);
    public static IntPtr CriticalCreateCompatibleBitmap(HandleRef hDC, int width, int height);
    public static IntPtr CriticalGetStockObject(int stockObject);
    public static int CriticalFillRect(IntPtr hdc, RECT& rcFill, IntPtr brush);
    public static int GetBitmapBits(HandleRef hbmp, int cbBuffer, Byte[] lpvBits);
    public static bool ShowWindow(HandleRef hWnd, int nCmdShow);
    public static void DeleteObject(HandleRef hObject);
    public static bool DeleteObjectNoThrow(HandleRef hObject);
    public static bool IntDeleteObject(HandleRef hObject);
    public static IntPtr SelectObject(HandleRef hdc, IntPtr obj);
    public static IntPtr SelectObject(HandleRef hdc, BitmapHandle obj);
    public static IntPtr CriticalSelectObject(HandleRef hdc, IntPtr obj);
    public static int GetClipboardFormatName(int format, StringBuilder lpString, int cchMax);
    public static int RegisterClipboardFormat(string format);
    public static bool BitBlt(HandleRef hDC, int x, int y, int nWidth, int nHeight, HandleRef hSrcDC, int xSrc, int ySrc, int dwRop);
    public static bool CriticalPrintWindow(HandleRef hWnd, HandleRef hDC, int flags);
    public static bool CriticalRedrawWindow(HandleRef hWnd, IntPtr lprcUpdate, IntPtr hrgnUpdate, int flags);
    public static int DragQueryFile(HandleRef hDrop, int iFile, StringBuilder lpszFile, int cch);
    public static IntPtr ShellExecute(HandleRef hwnd, string lpOperation, string lpFile, string lpParameters, string lpDirectory, int nShowCmd);
    internal static bool ShellExecuteEx(ShellExecuteInfo lpExecInfo);
    public static int MultiByteToWideChar(int CodePage, int dwFlags, Byte[] lpMultiByteStr, int cchMultiByte, StringBuilder lpWideCharStr, int cchWideChar);
    public static int WideCharToMultiByte(int codePage, int flags, string wideStr, int chars, Byte[] pOutBytes, int bufferBytes, IntPtr defaultChar, IntPtr pDefaultUsed);
    public static void CopyMemoryW(IntPtr pdst, string psrc, int cb);
    public static void CopyMemoryW(IntPtr pdst, Char[] psrc, int cb);
    public static void CopyMemory(IntPtr pdst, Byte[] psrc, int cb);
    internal static int ObjectFromLresult(IntPtr lResult, Guid& iid, IntPtr wParam, IAccessible& ppvObject);
    internal static bool IsWinEventHookInstalled(int winevent);
    private static int IntOleInitialize(IntPtr val);
    public static int OleInitialize();
    public static int CoRegisterPSClsid(Guid& riid, Guid& rclsid);
    public static bool EnumThreadWindows(int dwThreadId, EnumThreadWindowsCallback lpfn, HandleRef lParam);
    public static int OleUninitialize();
    private static bool IntCloseHandle(HandleRef handle);
    public static bool CloseHandleNoThrow(HandleRef handle);
    public static int CreateStreamOnHGlobal(IntPtr hGlobal, bool fDeleteOnRelease, IStream& istream);
    private static bool IntUnmapViewOfFile(HandleRef pvBaseAddress);
    public static bool UnmapViewOfFileNoThrow(HandleRef pvBaseAddress);
    public static bool EnableWindow(HandleRef hWnd, bool enable);
    public static bool EnableWindowNoThrow(HandleRef hWnd, bool enable);
    public static int GetObject(HandleRef hObject, int nSize, BITMAP bm);
    public static IntPtr GetFocus();
    private static bool IntGetCursorPos(POINT pt);
    internal static bool GetCursorPos(POINT pt);
    private static bool IntTryGetCursorPos(POINT pt);
    internal static bool TryGetCursorPos(POINT pt);
    internal static int GetWindowText(HandleRef hWnd, StringBuilder lpString, int nMaxCount);
    internal static int GetWindowTextLength(HandleRef hWnd);
    public static IntPtr GlobalAlloc(int uFlags, IntPtr dwBytes);
    public static IntPtr GlobalReAlloc(HandleRef handle, IntPtr bytes, int flags);
    public static IntPtr GlobalLock(HandleRef handle);
    public static bool GlobalUnlock(HandleRef handle);
    public static IntPtr GlobalFree(HandleRef handle);
    public static IntPtr GlobalSize(HandleRef handle);
    internal static IntPtr SetFocus(HandleRef hWnd);
    internal static bool TrySetFocus(HandleRef hWnd);
    internal static bool TrySetFocus(HandleRef hWnd, IntPtr& result);
    internal static IntPtr GetParent(HandleRef hWnd);
    public static IntPtr GetAncestor(HandleRef hWnd, int flags);
    public static bool IsChild(HandleRef hWndParent, HandleRef hwnd);
    public static IntPtr SetParent(HandleRef hWnd, HandleRef hWndParent);
    private static IntPtr IntGetModuleHandle(string modName);
    internal static IntPtr GetModuleHandle(string modName);
    public static IntPtr CallWindowProc(IntPtr wndProc, IntPtr hWnd, int msg, IntPtr wParam, IntPtr lParam);
    public static IntPtr DefWindowProc(IntPtr hWnd, int Msg, IntPtr wParam, IntPtr lParam);
    public static IntPtr IntGetProcAddress(HandleRef hModule, string lpProcName);
    public static IntPtr GetProcAddress(HandleRef hModule, string lpProcName);
    public static IntPtr GetProcAddressNoThrow(HandleRef hModule, string lpProcName);
    public static IntPtr LoadLibrary(string lpFileName);
    [ObsoleteAttribute("Use LoadLibraryHelper.SafeLoadLibraryEx instead")]
internal static IntPtr LoadLibraryEx(string lpFileName, IntPtr hFile, LoadLibraryFlags dwFlags);
    internal static bool GetModuleHandleEx(GetModuleHandleFlags dwFlags, string lpModuleName, IntPtr& hModule);
    internal static bool FreeLibrary(IntPtr hModule);
    public static bool SystemParametersInfo(int nAction, int nParam, RECT& rc, int nUpdate);
    public static bool SystemParametersInfo(int nAction, int nParam, Int32& value, int ignore);
    public static bool SystemParametersInfo(int nAction, int nParam, Boolean& value, int ignore);
    public static bool SystemParametersInfo(int nAction, int nParam, HIGHCONTRAST_I& rc, int nUpdate);
    public static bool SystemParametersInfo(int nAction, int nParam, NONCLIENTMETRICS metrics, int nUpdate);
    public static bool GetSystemPowerStatus(SYSTEM_POWER_STATUS& systemPowerStatus);
    private static int IntClientToScreen(HandleRef hWnd, POINT pt);
    public static void ClientToScreen(HandleRef hWnd, POINT pt);
    public static IntPtr GetDesktopWindow();
    public static IntPtr GetForegroundWindow();
    public static int RegisterDragDrop(HandleRef hwnd, IOleDropTarget target);
    public static int RevokeDragDrop(HandleRef hwnd);
    private static IntPtr IntBeginPaint(HandleRef hWnd, PAINTSTRUCT& lpPaint);
    public static IntPtr BeginPaint(HandleRef hWnd, PAINTSTRUCT& lpPaint);
    private static bool IntEndPaint(HandleRef hWnd, PAINTSTRUCT& lpPaint);
    public static bool EndPaint(HandleRef hWnd, PAINTSTRUCT& lpPaint);
    private static IntPtr IntGetDC(HandleRef hWnd);
    public static IntPtr GetDC(HandleRef hWnd);
    private static int IntReleaseDC(HandleRef hWnd, HandleRef hDC);
    public static int ReleaseDC(HandleRef hWnd, HandleRef hDC);
    public static int GetDeviceCaps(HandleRef hDC, int nIndex);
    public static IntPtr GetActiveWindow();
    public static bool SetForegroundWindow(HandleRef hWnd);
    internal static int CommDlgExtendedError();
    internal static bool GetOpenFileName(OPENFILENAME_I ofn);
    internal static bool GetSaveFileName(OPENFILENAME_I ofn);
    public static bool SetLayeredWindowAttributes(HandleRef hwnd, int crKey, byte bAlpha, int dwFlags);
    public static bool UpdateLayeredWindow(IntPtr hwnd, IntPtr hdcDst, POINT pptDst, POINT pSizeDst, IntPtr hdcSrc, POINT pptSrc, int crKey, BLENDFUNCTION& pBlend, int dwFlags);
    public static IntPtr SetActiveWindow(HandleRef hWnd);
    private static bool IntDestroyCursor(IntPtr hCurs);
    public static bool DestroyCursor(IntPtr hCurs);
    private static bool IntDestroyIcon(IntPtr hIcon);
    public static bool DestroyIcon(IntPtr hIcon);
    private static bool IntDeleteObject(IntPtr hObject);
    public static bool DeleteObject(IntPtr hObject);
    private static BitmapHandle PrivateCreateBitmap(int width, int height, int planes, int bitsPerPixel, Byte[] lpvBits);
    internal static BitmapHandle CreateBitmap(int width, int height, int planes, int bitsPerPixel, Byte[] lpvBits);
    private static bool PrivateDestroyIcon(HandleRef handle);
    internal static bool DestroyIcon(HandleRef handle);
    private static IconHandle PrivateCreateIconIndirect(ICONINFO iconInfo);
    internal static IconHandle CreateIconIndirect(ICONINFO iconInfo);
    public static bool IsWindow(HandleRef hWnd);
    public static IntPtr IntCreateWindowEx(int dwExStyle, string lpszClassName, string lpszWindowName, int style, int x, int y, int width, int height, HandleRef hWndParent, HandleRef hMenu, HandleRef hInst, object pvParam);
    public static IntPtr CreateWindowEx(int dwExStyle, string lpszClassName, string lpszWindowName, int style, int x, int y, int width, int height, HandleRef hWndParent, HandleRef hMenu, HandleRef hInst, object pvParam);
    public static bool IntDestroyWindow(HandleRef hWnd);
    public static void DestroyWindow(HandleRef hWnd);
    internal static IntPtr SetWinEventHook(int eventMin, int eventMax, IntPtr hmodWinEventProc, WinEventProcDef WinEventReentrancyFilter, UInt32 idProcess, UInt32 idThread, int dwFlags);
    internal static bool UnhookWinEvent(IntPtr winEventHook);
    public static void EnumChildWindows(HandleRef hwndParent, EnumChildrenCallback lpEnumFunc, HandleRef lParam);
    private static bool IntEnumChildWindows(HandleRef hwndParent, EnumChildrenCallback lpEnumFunc, HandleRef lParam);
    public static int GetWindowRgn(HandleRef hWnd, HandleRef hRgn);
    public static bool PtInRegion(HandleRef hRgn, int X, int Y);
    public static IntPtr CreateRectRgn(int x1, int y1, int x2, int y2);
    private static int VariantClear(IntPtr pObject);
    public static UInt32 GetRawInputDeviceList(RAWINPUTDEVICELIST[] ridl, UInt32& numDevices, UInt32 sizeInBytes);
    public static UInt32 GetRawInputDeviceInfo(IntPtr hDevice, UInt32 command, RID_DEVICE_INFO& ridInfo, UInt32& sizeInBytes);
    internal static IntPtr GetMenu(HandleRef hWnd);
    internal static bool EnumDisplayMonitors(IntPtr hdc, IntPtr lprcClip, MonitorEnumProc lpfnEnum, IntPtr lParam);
    internal static int WldpIsDynamicCodePolicyEnabled(Boolean& enabled);
}
internal static class System.SR : object {
    private static ResourceManager s_resourceManager;
    [CompilerGeneratedAttribute]
private static CultureInfo <Culture>k__BackingField;
    internal static string ElementNotAvailable;
    internal static string ElementNotEnabled;
    internal static string LocalizedControlTypeButton;
    internal static string LocalizedControlTypeCalendar;
    internal static string LocalizedControlTypeCheckBox;
    internal static string LocalizedControlTypeComboBox;
    internal static string LocalizedControlTypeCustom;
    internal static string LocalizedControlTypeDataGrid;
    internal static string LocalizedControlTypeDataItem;
    internal static string LocalizedControlTypeDocument;
    internal static string LocalizedControlTypeEdit;
    internal static string LocalizedControlTypeGroup;
    internal static string LocalizedControlTypeHeader;
    internal static string LocalizedControlTypeHeaderItem;
    internal static string LocalizedControlTypeHyperlink;
    internal static string LocalizedControlTypeImage;
    internal static string LocalizedControlTypeListItem;
    internal static string LocalizedControlTypeListView;
    internal static string LocalizedControlTypeMenu;
    internal static string LocalizedControlTypeMenuBar;
    internal static string LocalizedControlTypeMenuItem;
    internal static string LocalizedControlTypePane;
    internal static string LocalizedControlTypeProgressBar;
    internal static string LocalizedControlTypeRadioButton;
    internal static string LocalizedControlTypeScrollBar;
    internal static string LocalizedControlTypeSeparator;
    internal static string LocalizedControlTypeSlider;
    internal static string LocalizedControlTypeSpinner;
    internal static string LocalizedControlTypeSplitButton;
    internal static string LocalizedControlTypeStatusBar;
    internal static string LocalizedControlTypeTab;
    internal static string LocalizedControlTypeTabItem;
    internal static string LocalizedControlTypeTable;
    internal static string LocalizedControlTypeText;
    internal static string LocalizedControlTypeThumb;
    internal static string LocalizedControlTypeTitleBar;
    internal static string LocalizedControlTypeToolBar;
    internal static string LocalizedControlTypeToolTip;
    internal static string LocalizedControlTypeTreeView;
    internal static string LocalizedControlTypeTreeViewItem;
    internal static string LocalizedControlTypeWindow;
    internal static ResourceManager ResourceManager { get; }
    internal static CultureInfo Culture { get; internal set; }
    internal static ResourceManager get_ResourceManager();
    [CompilerGeneratedAttribute]
internal static CultureInfo get_Culture();
    [CompilerGeneratedAttribute]
internal static void set_Culture(CultureInfo value);
    internal static string GetResourceString(string resourceKey, string defaultValue);
}
public class System.Windows.Automation.AsyncContentLoadedEventArgs : AutomationEventArgs {
    private AsyncContentLoadedState _asyncContentState;
    private double _percentComplete;
    public AsyncContentLoadedState AsyncContentLoadedState { get; }
    public double PercentComplete { get; }
    public AsyncContentLoadedEventArgs(AsyncContentLoadedState asyncContentState, double percentComplete);
    public AsyncContentLoadedState get_AsyncContentLoadedState();
    public double get_PercentComplete();
}
[ComVisibleAttribute("True")]
[GuidAttribute("d8e55844-7043-4edc-979d-593cc6b4775e")]
public enum System.Windows.Automation.AsyncContentLoadedState : Enum {
    public int value__;
    public static AsyncContentLoadedState Beginning;
    public static AsyncContentLoadedState Progress;
    public static AsyncContentLoadedState Completed;
}
public static class System.Windows.Automation.AutomationElementIdentifiers : object {
    public static object NotSupported;
    public static AutomationProperty IsControlElementProperty;
    public static AutomationProperty ControlTypeProperty;
    public static AutomationProperty IsContentElementProperty;
    public static AutomationProperty LabeledByProperty;
    public static AutomationProperty NativeWindowHandleProperty;
    public static AutomationProperty AutomationIdProperty;
    public static AutomationProperty ItemTypeProperty;
    public static AutomationProperty IsPasswordProperty;
    public static AutomationProperty LocalizedControlTypeProperty;
    public static AutomationProperty NameProperty;
    public static AutomationProperty AcceleratorKeyProperty;
    public static AutomationProperty AccessKeyProperty;
    public static AutomationProperty HasKeyboardFocusProperty;
    public static AutomationProperty IsKeyboardFocusableProperty;
    public static AutomationProperty IsEnabledProperty;
    public static AutomationProperty BoundingRectangleProperty;
    public static AutomationProperty ProcessIdProperty;
    public static AutomationProperty RuntimeIdProperty;
    public static AutomationProperty ClassNameProperty;
    public static AutomationProperty HelpTextProperty;
    public static AutomationProperty ClickablePointProperty;
    public static AutomationProperty CultureProperty;
    public static AutomationProperty IsOffscreenProperty;
    public static AutomationProperty OrientationProperty;
    public static AutomationProperty FrameworkIdProperty;
    public static AutomationProperty IsRequiredForFormProperty;
    public static AutomationProperty ItemStatusProperty;
    public static AutomationProperty LiveSettingProperty;
    public static AutomationProperty ControllerForProperty;
    public static AutomationProperty SizeOfSetProperty;
    public static AutomationProperty PositionInSetProperty;
    public static AutomationProperty IsDockPatternAvailableProperty;
    public static AutomationProperty IsExpandCollapsePatternAvailableProperty;
    public static AutomationProperty IsGridItemPatternAvailableProperty;
    public static AutomationProperty IsGridPatternAvailableProperty;
    public static AutomationProperty IsInvokePatternAvailableProperty;
    public static AutomationProperty IsMultipleViewPatternAvailableProperty;
    public static AutomationProperty IsRangeValuePatternAvailableProperty;
    public static AutomationProperty IsSelectionItemPatternAvailableProperty;
    public static AutomationProperty IsSelectionPatternAvailableProperty;
    public static AutomationProperty IsScrollPatternAvailableProperty;
    public static AutomationProperty IsScrollItemPatternAvailableProperty;
    public static AutomationProperty IsSynchronizedInputPatternAvailableProperty;
    public static AutomationProperty IsVirtualizedItemPatternAvailableProperty;
    public static AutomationProperty IsItemContainerPatternAvailableProperty;
    public static AutomationProperty IsTablePatternAvailableProperty;
    public static AutomationProperty IsTableItemPatternAvailableProperty;
    public static AutomationProperty IsTextPatternAvailableProperty;
    public static AutomationProperty IsTogglePatternAvailableProperty;
    public static AutomationProperty IsTransformPatternAvailableProperty;
    public static AutomationProperty IsValuePatternAvailableProperty;
    public static AutomationProperty IsWindowPatternAvailableProperty;
    public static AutomationEvent ToolTipOpenedEvent;
    public static AutomationEvent ToolTipClosedEvent;
    public static AutomationEvent StructureChangedEvent;
    public static AutomationEvent MenuOpenedEvent;
    public static AutomationEvent AutomationPropertyChangedEvent;
    public static AutomationEvent AutomationFocusChangedEvent;
    public static AutomationEvent AsyncContentLoadedEvent;
    public static AutomationEvent MenuClosedEvent;
    public static AutomationEvent LayoutInvalidatedEvent;
    public static AutomationEvent LiveRegionChangedEvent;
    private static AutomationElementIdentifiers();
}
public class System.Windows.Automation.AutomationEvent : AutomationIdentifier {
    internal AutomationEvent(int id, string programmaticName);
    internal static AutomationEvent Register(Events id, string programmaticName);
    public static AutomationEvent LookupById(int id);
}
public class System.Windows.Automation.AutomationEventArgs : EventArgs {
    private AutomationEvent _eventId;
    public AutomationEvent EventId { get; }
    public AutomationEventArgs(AutomationEvent eventId);
    public AutomationEvent get_EventId();
}
public class System.Windows.Automation.AutomationEventHandler : MulticastDelegate {
    public AutomationEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, AutomationEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, AutomationEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class System.Windows.Automation.AutomationIdentifier : object {
    private Guid _guid;
    private AutomationIdType _type;
    private int _id;
    private string _programmaticName;
    private static Hashtable _idTable;
    public int Id { get; }
    public string ProgrammaticName { get; }
    internal AutomationIdentifier(AutomationIdType type, int id, string programmaticName);
    internal AutomationIdentifier(AutomationIdType type, int id, Guid guid, string programmaticName);
    private static AutomationIdentifier();
    public int get_Id();
    public string get_ProgrammaticName();
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public sealed virtual int CompareTo(object obj);
    internal static AutomationIdentifier Register(AutomationIdType type, int id, string programmaticName);
    internal static AutomationIdentifier LookupById(AutomationIdType type, int id);
    private static bool IsIdSupported(AutomationIdType type, int id);
    private static bool IsPropertySupported(int id);
    private static bool IsEventSupported(int id);
    private static bool IsPatternSupported(int id);
    private static bool IsTextAttributeSupported(int id);
    private static bool IsControlTypeSupported(int id);
}
public class System.Windows.Automation.AutomationPattern : AutomationIdentifier {
    internal AutomationPattern(int id, string programmaticName);
    internal static AutomationPattern Register(Patterns id, string programmaticName);
    public static AutomationPattern LookupById(int id);
}
public class System.Windows.Automation.AutomationProperty : AutomationIdentifier {
    internal AutomationProperty(int id, string programmaticName);
    internal static AutomationProperty Register(Properties id, string programmaticName);
    public static AutomationProperty LookupById(int id);
}
public class System.Windows.Automation.AutomationPropertyChangedEventArgs : AutomationEventArgs {
    private AutomationProperty _property;
    private object _oldValue;
    private object _newValue;
    public AutomationProperty Property { get; }
    public object OldValue { get; }
    public object NewValue { get; }
    public AutomationPropertyChangedEventArgs(AutomationProperty property, object oldValue, object newValue);
    public AutomationProperty get_Property();
    public object get_OldValue();
    public object get_NewValue();
}
public class System.Windows.Automation.AutomationPropertyChangedEventHandler : MulticastDelegate {
    public AutomationPropertyChangedEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, AutomationPropertyChangedEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, AutomationPropertyChangedEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class System.Windows.Automation.AutomationTextAttribute : AutomationIdentifier {
    internal AutomationTextAttribute(int id, string programmaticName);
    internal static AutomationTextAttribute Register(TextAttributes id, string programmaticName);
    public static AutomationTextAttribute LookupById(int id);
}
public class System.Windows.Automation.ControlType : AutomationIdentifier {
    public static ControlType Button;
    public static ControlType Calendar;
    public static ControlType CheckBox;
    public static ControlType ComboBox;
    public static ControlType Edit;
    public static ControlType Hyperlink;
    public static ControlType Image;
    public static ControlType ListItem;
    public static ControlType List;
    public static ControlType Menu;
    public static ControlType MenuBar;
    public static ControlType MenuItem;
    public static ControlType ProgressBar;
    public static ControlType RadioButton;
    public static ControlType ScrollBar;
    public static ControlType Slider;
    public static ControlType Spinner;
    public static ControlType StatusBar;
    public static ControlType Tab;
    public static ControlType TabItem;
    public static ControlType Text;
    public static ControlType ToolBar;
    public static ControlType ToolTip;
    public static ControlType Tree;
    public static ControlType TreeItem;
    public static ControlType Custom;
    public static ControlType Group;
    public static ControlType Thumb;
    public static ControlType DataGrid;
    public static ControlType DataItem;
    public static ControlType Document;
    public static ControlType SplitButton;
    public static ControlType Window;
    public static ControlType Pane;
    public static ControlType Header;
    public static ControlType HeaderItem;
    public static ControlType Table;
    public static ControlType TitleBar;
    public static ControlType Separator;
    private AutomationPattern[][] _requiredPatternsSets;
    private AutomationPattern[] _neverSupportedPatterns;
    private AutomationProperty[] _requiredProperties;
    private string _stId;
    public string LocalizedControlType { get; }
    internal ControlType(int id, string programmaticName);
    private static ControlType();
    internal static ControlType Register(ControlTypes id, string programmaticName);
    public static ControlType LookupById(int id);
    internal static ControlType Register(ControlTypes id, string programmaticName, string stId, AutomationProperty[] requiredProperties, AutomationPattern[] neverSupportedPatterns, AutomationPattern[][] requiredPatternsSets);
    internal static ControlType Register(ControlTypes id, string programmaticName, string stId, AutomationPattern[][] requiredPatternsSets);
    internal static ControlType Register(ControlTypes id, string programmaticName, string stId, AutomationProperty[] requiredProperties);
    internal static ControlType Register(ControlTypes id, string programmaticName, string stId);
    public AutomationPattern[][] GetRequiredPatternSets();
    public AutomationPattern[] GetNeverSupportedPatterns();
    public AutomationProperty[] GetRequiredProperties();
    public string get_LocalizedControlType();
}
public static class System.Windows.Automation.DockPatternIdentifiers : object {
    public static AutomationPattern Pattern;
    public static AutomationProperty DockPositionProperty;
    private static DockPatternIdentifiers();
}
[GuidAttribute("70d46e77-e3a8-449d-913c-e30eb2afecdb")]
[ComVisibleAttribute("True")]
public enum System.Windows.Automation.DockPosition : Enum {
    public int value__;
    public static DockPosition Top;
    public static DockPosition Left;
    public static DockPosition Bottom;
    public static DockPosition Right;
    public static DockPosition Fill;
    public static DockPosition None;
}
public class System.Windows.Automation.ElementNotAvailableException : SystemException {
    public ElementNotAvailableException(string message);
    public ElementNotAvailableException(string message, Exception innerException);
    public ElementNotAvailableException(Exception innerException);
    protected ElementNotAvailableException(SerializationInfo info, StreamingContext context);
    public virtual void GetObjectData(SerializationInfo info, StreamingContext context);
}
public class System.Windows.Automation.ElementNotEnabledException : InvalidOperationException {
    public ElementNotEnabledException(string message);
    public ElementNotEnabledException(string message, Exception innerException);
    protected ElementNotEnabledException(SerializationInfo info, StreamingContext context);
    public virtual void GetObjectData(SerializationInfo info, StreamingContext context);
}
public static class System.Windows.Automation.ExpandCollapsePatternIdentifiers : object {
    public static AutomationPattern Pattern;
    public static AutomationProperty ExpandCollapseStateProperty;
    private static ExpandCollapsePatternIdentifiers();
}
[ComVisibleAttribute("True")]
[GuidAttribute("76d12d7e-b227-4417-9ce2-42642ffa896a")]
public enum System.Windows.Automation.ExpandCollapseState : Enum {
    public int value__;
    public static ExpandCollapseState Collapsed;
    public static ExpandCollapseState Expanded;
    public static ExpandCollapseState PartiallyExpanded;
    public static ExpandCollapseState LeafNode;
}
public static class System.Windows.Automation.GridItemPatternIdentifiers : object {
    public static AutomationPattern Pattern;
    public static AutomationProperty RowProperty;
    public static AutomationProperty ColumnProperty;
    public static AutomationProperty RowSpanProperty;
    public static AutomationProperty ColumnSpanProperty;
    public static AutomationProperty ContainingGridProperty;
    private static GridItemPatternIdentifiers();
}
public static class System.Windows.Automation.GridPatternIdentifiers : object {
    public static AutomationPattern Pattern;
    public static AutomationProperty RowCountProperty;
    public static AutomationProperty ColumnCountProperty;
    private static GridPatternIdentifiers();
}
public static class System.Windows.Automation.InvokePatternIdentifiers : object {
    public static AutomationPattern Pattern;
    public static AutomationEvent InvokedEvent;
    private static InvokePatternIdentifiers();
}
public static class System.Windows.Automation.ItemContainerPatternIdentifiers : object {
    public static AutomationPattern Pattern;
    private static ItemContainerPatternIdentifiers();
}
public static class System.Windows.Automation.MultipleViewPatternIdentifiers : object {
    public static AutomationPattern Pattern;
    public static AutomationProperty CurrentViewProperty;
    public static AutomationProperty SupportedViewsProperty;
    private static MultipleViewPatternIdentifiers();
}
public class System.Windows.Automation.NoClickablePointException : Exception {
    public NoClickablePointException(string message);
    public NoClickablePointException(string message, Exception innerException);
    protected NoClickablePointException(SerializationInfo info, StreamingContext context);
    public virtual void GetObjectData(SerializationInfo info, StreamingContext context);
}
[ComVisibleAttribute("True")]
[GuidAttribute("5F8A77B4-E685-48c1-94D0-8BB6AFA43DF9")]
public enum System.Windows.Automation.OrientationType : Enum {
    public int value__;
    public static OrientationType None;
    public static OrientationType Horizontal;
    public static OrientationType Vertical;
}
public class System.Windows.Automation.ProxyAssemblyNotLoadedException : Exception {
    public ProxyAssemblyNotLoadedException(string message);
    public ProxyAssemblyNotLoadedException(string message, Exception innerException);
    protected ProxyAssemblyNotLoadedException(SerializationInfo info, StreamingContext context);
    public virtual void GetObjectData(SerializationInfo info, StreamingContext context);
}
public static class System.Windows.Automation.RangeValuePatternIdentifiers : object {
    public static AutomationPattern Pattern;
    public static AutomationProperty ValueProperty;
    public static AutomationProperty IsReadOnlyProperty;
    public static AutomationProperty MinimumProperty;
    public static AutomationProperty MaximumProperty;
    public static AutomationProperty LargeChangeProperty;
    public static AutomationProperty SmallChangeProperty;
    private static RangeValuePatternIdentifiers();
}
[ComVisibleAttribute("True")]
[GuidAttribute("15fdf2e2-9847-41cd-95dd-510612a025ea")]
public enum System.Windows.Automation.RowOrColumnMajor : Enum {
    public int value__;
    public static RowOrColumnMajor RowMajor;
    public static RowOrColumnMajor ColumnMajor;
    public static RowOrColumnMajor Indeterminate;
}
[ComVisibleAttribute("True")]
[GuidAttribute("bd52d3c7-f990-4c52-9ae3-5c377e9eb772")]
public enum System.Windows.Automation.ScrollAmount : Enum {
    public int value__;
    public static ScrollAmount LargeDecrement;
    public static ScrollAmount SmallDecrement;
    public static ScrollAmount NoAmount;
    public static ScrollAmount LargeIncrement;
    public static ScrollAmount SmallIncrement;
}
public static class System.Windows.Automation.ScrollItemPatternIdentifiers : object {
    public static AutomationPattern Pattern;
    private static ScrollItemPatternIdentifiers();
}
public static class System.Windows.Automation.ScrollPatternIdentifiers : object {
    public static double NoScroll;
    public static AutomationPattern Pattern;
    public static AutomationProperty HorizontalScrollPercentProperty;
    public static AutomationProperty HorizontalViewSizeProperty;
    public static AutomationProperty VerticalScrollPercentProperty;
    public static AutomationProperty VerticalViewSizeProperty;
    public static AutomationProperty HorizontallyScrollableProperty;
    public static AutomationProperty VerticallyScrollableProperty;
    private static ScrollPatternIdentifiers();
}
public static class System.Windows.Automation.SelectionItemPatternIdentifiers : object {
    public static AutomationPattern Pattern;
    public static AutomationProperty IsSelectedProperty;
    public static AutomationProperty SelectionContainerProperty;
    public static AutomationEvent ElementAddedToSelectionEvent;
    public static AutomationEvent ElementRemovedFromSelectionEvent;
    public static AutomationEvent ElementSelectedEvent;
    private static SelectionItemPatternIdentifiers();
}
public static class System.Windows.Automation.SelectionPatternIdentifiers : object {
    public static AutomationPattern Pattern;
    public static AutomationProperty SelectionProperty;
    public static AutomationProperty CanSelectMultipleProperty;
    public static AutomationProperty IsSelectionRequiredProperty;
    public static AutomationEvent InvalidatedEvent;
    private static SelectionPatternIdentifiers();
}
public class System.Windows.Automation.StructureChangedEventArgs : AutomationEventArgs {
    private StructureChangeType _structureChangeType;
    private Int32[] _runtimeID;
    public StructureChangeType StructureChangeType { get; }
    public StructureChangedEventArgs(StructureChangeType structureChangeType, Int32[] runtimeId);
    public Int32[] GetRuntimeId();
    public StructureChangeType get_StructureChangeType();
}
public class System.Windows.Automation.StructureChangedEventHandler : MulticastDelegate {
    public StructureChangedEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, StructureChangedEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, StructureChangedEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
[GuidAttribute("e4cfef41-071d-472c-a65c-c14f59ea81eb")]
[ComVisibleAttribute("True")]
public enum System.Windows.Automation.StructureChangeType : Enum {
    public int value__;
    public static StructureChangeType ChildAdded;
    public static StructureChangeType ChildRemoved;
    public static StructureChangeType ChildrenInvalidated;
    public static StructureChangeType ChildrenBulkAdded;
    public static StructureChangeType ChildrenBulkRemoved;
    public static StructureChangeType ChildrenReordered;
}
[GuidAttribute("3d9e3d8f-bfb0-484f-84ab-93ff4280cbc4")]
[ComVisibleAttribute("True")]
[FlagsAttribute]
public enum System.Windows.Automation.SupportedTextSelection : Enum {
    public int value__;
    public static SupportedTextSelection None;
    public static SupportedTextSelection Single;
    public static SupportedTextSelection Multiple;
}
public static class System.Windows.Automation.SynchronizedInputPatternIdentifiers : object {
    public static AutomationPattern Pattern;
    public static AutomationEvent InputReachedTargetEvent;
    public static AutomationEvent InputReachedOtherElementEvent;
    public static AutomationEvent InputDiscardedEvent;
    private static SynchronizedInputPatternIdentifiers();
}
[GuidAttribute("fdc8f176-aed2-477a-8c89-5604c66f278d")]
[ComVisibleAttribute("True")]
public enum System.Windows.Automation.SynchronizedInputType : Enum {
    public int value__;
    public static SynchronizedInputType KeyUp;
    public static SynchronizedInputType KeyDown;
    public static SynchronizedInputType MouseLeftButtonUp;
    public static SynchronizedInputType MouseLeftButtonDown;
    public static SynchronizedInputType MouseRightButtonUp;
    public static SynchronizedInputType MouseRightButtonDown;
}
public static class System.Windows.Automation.TableItemPatternIdentifiers : object {
    public static AutomationPattern Pattern;
    public static AutomationProperty RowHeaderItemsProperty;
    public static AutomationProperty ColumnHeaderItemsProperty;
    private static TableItemPatternIdentifiers();
}
public static class System.Windows.Automation.TablePatternIdentifiers : object {
    public static AutomationPattern Pattern;
    public static AutomationProperty RowHeadersProperty;
    public static AutomationProperty ColumnHeadersProperty;
    public static AutomationProperty RowOrColumnMajorProperty;
    private static TablePatternIdentifiers();
}
[ComVisibleAttribute("True")]
[GuidAttribute("B6C08F15-AA5E-4754-9E4C-AA279D3F36D4")]
public enum System.Windows.Automation.Text.AnimationStyle : Enum {
    public int value__;
    public static AnimationStyle None;
    public static AnimationStyle LasVegasLights;
    public static AnimationStyle BlinkingBackground;
    public static AnimationStyle SparkleText;
    public static AnimationStyle MarchingBlackAnts;
    public static AnimationStyle MarchingRedAnts;
    public static AnimationStyle Shimmer;
    public static AnimationStyle Other;
}
[ComVisibleAttribute("True")]
[GuidAttribute("814FAC6C-F8DE-4682-AF5F-37C4F720990C")]
public enum System.Windows.Automation.Text.BulletStyle : Enum {
    public int value__;
    public static BulletStyle None;
    public static BulletStyle HollowRoundBullet;
    public static BulletStyle FilledRoundBullet;
    public static BulletStyle HollowSquareBullet;
    public static BulletStyle FilledSquareBullet;
    public static BulletStyle DashBullet;
    public static BulletStyle Other;
}
[ComVisibleAttribute("True")]
[GuidAttribute("4E33C74B-7848-4f1e-B819-A0D866C2EA1F")]
public enum System.Windows.Automation.Text.CapStyle : Enum {
    public int value__;
    public static CapStyle None;
    public static CapStyle SmallCap;
    public static CapStyle AllCap;
    public static CapStyle AllPetiteCaps;
    public static CapStyle PetiteCaps;
    public static CapStyle Unicase;
    public static CapStyle Titling;
    public static CapStyle Other;
}
[FlagsAttribute]
[ComVisibleAttribute("True")]
[GuidAttribute("2E22CC6B-7C34-4002-91AA-E103A09D1027")]
public enum System.Windows.Automation.Text.FlowDirections : Enum {
    public int value__;
    public static FlowDirections Default;
    public static FlowDirections RightToLeft;
    public static FlowDirections BottomToTop;
    public static FlowDirections Vertical;
}
[ComVisibleAttribute("True")]
[GuidAttribute("1FBE7021-A1E4-4e9b-BE94-2C7DFA59D5DD")]
public enum System.Windows.Automation.Text.HorizontalTextAlignment : Enum {
    public int value__;
    public static HorizontalTextAlignment Left;
    public static HorizontalTextAlignment Centered;
    public static HorizontalTextAlignment Right;
    public static HorizontalTextAlignment Justified;
}
[FlagsAttribute]
[ComVisibleAttribute("True")]
[GuidAttribute("1F57B37D-CB59-43f4-95E0-7C9E40DB427E")]
public enum System.Windows.Automation.Text.OutlineStyles : Enum {
    public int value__;
    public static OutlineStyles None;
    public static OutlineStyles Outline;
    public static OutlineStyles Shadow;
    public static OutlineStyles Engraved;
    public static OutlineStyles Embossed;
}
[ComVisibleAttribute("True")]
[GuidAttribute("909D8633-2941-428e-A549-C752E2FC078C")]
public enum System.Windows.Automation.Text.TextDecorationLineStyle : Enum {
    public int value__;
    public static TextDecorationLineStyle None;
    public static TextDecorationLineStyle Single;
    public static TextDecorationLineStyle WordsOnly;
    public static TextDecorationLineStyle Double;
    public static TextDecorationLineStyle Dot;
    public static TextDecorationLineStyle Dash;
    public static TextDecorationLineStyle DashDot;
    public static TextDecorationLineStyle DashDotDot;
    public static TextDecorationLineStyle Wavy;
    public static TextDecorationLineStyle ThickSingle;
    public static TextDecorationLineStyle DoubleWavy;
    public static TextDecorationLineStyle ThickWavy;
    public static TextDecorationLineStyle LongDash;
    public static TextDecorationLineStyle ThickDash;
    public static TextDecorationLineStyle ThickDashDot;
    public static TextDecorationLineStyle ThickDashDotDot;
    public static TextDecorationLineStyle ThickDot;
    public static TextDecorationLineStyle ThickLongDash;
    public static TextDecorationLineStyle Other;
}
[ComVisibleAttribute("True")]
[GuidAttribute("62242CAC-9CD0-4364-813D-4F0A36DD842D")]
public enum System.Windows.Automation.Text.TextPatternRangeEndpoint : Enum {
    public int value__;
    public static TextPatternRangeEndpoint Start;
    public static TextPatternRangeEndpoint End;
}
[ComVisibleAttribute("True")]
[GuidAttribute("A044E5C8-FC20-4747-8CC8-1487F9CBB680")]
public enum System.Windows.Automation.Text.TextUnit : Enum {
    public int value__;
    public static TextUnit Character;
    public static TextUnit Format;
    public static TextUnit Word;
    public static TextUnit Line;
    public static TextUnit Paragraph;
    public static TextUnit Page;
    public static TextUnit Document;
}
public static class System.Windows.Automation.TextPatternIdentifiers : object {
    public static object MixedAttributeValue;
    public static AutomationTextAttribute AnimationStyleAttribute;
    public static AutomationTextAttribute BackgroundColorAttribute;
    public static AutomationTextAttribute BulletStyleAttribute;
    public static AutomationTextAttribute CapStyleAttribute;
    public static AutomationTextAttribute CultureAttribute;
    public static AutomationTextAttribute FontNameAttribute;
    public static AutomationTextAttribute FontSizeAttribute;
    public static AutomationTextAttribute FontWeightAttribute;
    public static AutomationTextAttribute ForegroundColorAttribute;
    public static AutomationTextAttribute HorizontalTextAlignmentAttribute;
    public static AutomationTextAttribute IndentationFirstLineAttribute;
    public static AutomationTextAttribute IndentationLeadingAttribute;
    public static AutomationTextAttribute IndentationTrailingAttribute;
    public static AutomationTextAttribute IsHiddenAttribute;
    public static AutomationTextAttribute IsItalicAttribute;
    public static AutomationTextAttribute IsReadOnlyAttribute;
    public static AutomationTextAttribute IsSubscriptAttribute;
    public static AutomationTextAttribute IsSuperscriptAttribute;
    public static AutomationTextAttribute MarginBottomAttribute;
    public static AutomationTextAttribute MarginLeadingAttribute;
    public static AutomationTextAttribute MarginTopAttribute;
    public static AutomationTextAttribute MarginTrailingAttribute;
    public static AutomationTextAttribute OutlineStylesAttribute;
    public static AutomationTextAttribute OverlineColorAttribute;
    public static AutomationTextAttribute OverlineStyleAttribute;
    public static AutomationTextAttribute StrikethroughColorAttribute;
    public static AutomationTextAttribute StrikethroughStyleAttribute;
    public static AutomationTextAttribute TabsAttribute;
    public static AutomationTextAttribute TextFlowDirectionsAttribute;
    public static AutomationTextAttribute UnderlineColorAttribute;
    public static AutomationTextAttribute UnderlineStyleAttribute;
    public static AutomationPattern Pattern;
    public static AutomationEvent TextSelectionChangedEvent;
    public static AutomationEvent TextChangedEvent;
    private static TextPatternIdentifiers();
}
public static class System.Windows.Automation.TogglePatternIdentifiers : object {
    public static AutomationPattern Pattern;
    public static AutomationProperty ToggleStateProperty;
    private static TogglePatternIdentifiers();
}
[ComVisibleAttribute("True")]
[GuidAttribute("ad7db4af-7166-4478-a402-ad5b77eab2fa")]
public enum System.Windows.Automation.ToggleState : Enum {
    public int value__;
    public static ToggleState Off;
    public static ToggleState On;
    public static ToggleState Indeterminate;
}
public static class System.Windows.Automation.TransformPatternIdentifiers : object {
    public static AutomationPattern Pattern;
    public static AutomationProperty CanMoveProperty;
    public static AutomationProperty CanResizeProperty;
    public static AutomationProperty CanRotateProperty;
    private static TransformPatternIdentifiers();
}
[FlagsAttribute]
public enum System.Windows.Automation.TreeScope : Enum {
    public int value__;
    public static TreeScope Element;
    public static TreeScope Children;
    public static TreeScope Descendants;
    public static TreeScope Parent;
    public static TreeScope Ancestors;
    public static TreeScope Subtree;
}
public static class System.Windows.Automation.ValuePatternIdentifiers : object {
    public static AutomationPattern Pattern;
    public static AutomationProperty ValueProperty;
    public static AutomationProperty IsReadOnlyProperty;
    private static ValuePatternIdentifiers();
}
public static class System.Windows.Automation.VirtualizedItemPatternIdentifiers : object {
    public static AutomationPattern Pattern;
    private static VirtualizedItemPatternIdentifiers();
}
public class System.Windows.Automation.WindowClosedEventArgs : AutomationEventArgs {
    private Int32[] _runtimeId;
    public WindowClosedEventArgs(Int32[] runtimeId);
    public Int32[] GetRuntimeId();
}
[ComVisibleAttribute("True")]
[GuidAttribute("65101cc7-7904-408e-87a7-8c6dbd83a18b")]
public enum System.Windows.Automation.WindowInteractionState : Enum {
    public int value__;
    public static WindowInteractionState Running;
    public static WindowInteractionState Closing;
    public static WindowInteractionState ReadyForUserInteraction;
    public static WindowInteractionState BlockedByModalWindow;
    public static WindowInteractionState NotResponding;
}
public static class System.Windows.Automation.WindowPatternIdentifiers : object {
    public static AutomationPattern Pattern;
    public static AutomationProperty CanMaximizeProperty;
    public static AutomationProperty CanMinimizeProperty;
    public static AutomationProperty IsModalProperty;
    public static AutomationProperty WindowVisualStateProperty;
    public static AutomationProperty WindowInteractionStateProperty;
    public static AutomationProperty IsTopmostProperty;
    public static AutomationEvent WindowOpenedEvent;
    public static AutomationEvent WindowClosedEvent;
    private static WindowPatternIdentifiers();
}
[ComVisibleAttribute("True")]
[GuidAttribute("fdc8f176-aed2-477a-8c89-ea04cc5f278d")]
public enum System.Windows.Automation.WindowVisualState : Enum {
    public int value__;
    public static WindowVisualState Normal;
    public static WindowVisualState Maximized;
    public static WindowVisualState Minimized;
}
